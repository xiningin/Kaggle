{"cell_type":{"b135e7ca":"code","8c25c63c":"code","7671d1ab":"code","f827626e":"code","2174fbe1":"code","3a69269a":"code","5e01e1b2":"code","d2b9792c":"code","af8dc6c8":"code","5061f9f1":"code","138eb3bb":"code","854acb5f":"code","27868adc":"code","687ac332":"code","a7e5bffb":"code","59d26598":"code","96686e0d":"code","e09bbc0e":"code","93260082":"code","86c59053":"code","3689be16":"code","94ec241b":"code","0e7684a7":"code","afe05d9d":"code","e2aebe29":"code","f7e8f4f6":"code","6fcc083c":"code","4c76b991":"code","23f33b8c":"code","0fabad46":"code","d5563d0b":"code","3c320fa5":"code","b15d686a":"code","a8826d95":"code","a2ca152b":"markdown","3b52160d":"markdown","cc5b4a07":"markdown","3e5c3044":"markdown","89917106":"markdown","55e7d5a9":"markdown","a13b902c":"markdown","bf49f5f8":"markdown","d7e0a89d":"markdown","72234f40":"markdown","6ab0117e":"markdown","119a15a0":"markdown","3f873141":"markdown","3b9623ed":"markdown","075ce5ad":"markdown","12e9f3fa":"markdown","7e355fee":"markdown","3c23e26d":"markdown","a2744313":"markdown","873a9279":"markdown","13e84a0f":"markdown","e9bd9eff":"markdown","442cfe37":"markdown","11b0bd67":"markdown"},"source":{"b135e7ca":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix,accuracy_score\nfrom sklearn import tree,svm\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier","8c25c63c":"df = pd.read_csv('https:\/\/raw.githubusercontent.com\/Umang-19\/devjam\/main\/public\/mldata.csv')\ndf.head()","7671d1ab":"print('The shape of our training set: %s professionals and %s features'%(df.shape[0],df.shape[1]))","f827626e":"print(\"Columns in our dataset: \" , df.columns)","2174fbe1":"print(\"List of Numerical features: \\n\" , df.select_dtypes(include=np.number).columns.tolist())\nprint(\"\\n\\nList of Categorical features: \\n\" , df.select_dtypes(include=['object']).columns.tolist())","3a69269a":"df.isnull().sum(axis=0)","5e01e1b2":"categorical_col = df[['self-learning capability?', 'Extra-courses did','reading and writing skills', 'memory capability score', \n                      'Taken inputs from seniors or elders', 'Management or Technical', 'hard\/smart worker', 'worked in teams ever?', \n                      'Introvert', 'interested career area ']]\nfor i in categorical_col:\n    print(df[i].value_counts(), end=\"\\n\\n\")","d2b9792c":"# Checking for data imbalanceness if any\nsns.set(rc={'figure.figsize':(50,10)})\nsns.countplot(x = df[\"Suggested Job Role\"])","af8dc6c8":"corr = df[['Logical quotient rating', 'hackathons', \n           'coding skills rating', 'public speaking points']].corr()\nf,axes = plt.subplots(1,1,figsize = (10,10))\nsns.heatmap(corr,square=True,annot = True,linewidth = .4,center = 2,ax = axes)","5061f9f1":"print(df[\"Interested subjects\"].value_counts())","138eb3bb":"# Figure Size\nfig, ax = plt.subplots(figsize=(12,6))\n\n# Horizontal Bar Plot\ntitle_cnt=df[\"Interested subjects\"].value_counts().sort_values(ascending=False).reset_index()\nmn= ax.barh(title_cnt.iloc[:,0], title_cnt.iloc[:,1],edgecolor='black', color=sns.color_palette('pastel',len(title_cnt)))\n\n\n\n\n# Remove axes splines\nfor s in ['top','bottom','left','right']:\n    ax.spines[s].set_visible(False)\n\n# Remove x,y Ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n# Add padding between axes and labels\nax.xaxis.set_tick_params(pad=5)\nax.yaxis.set_tick_params(pad=10)\n\n\n# Show top values \nax.invert_yaxis()\n\n# Add Plot Title\nax.set_title('Interested Subjects',weight='bold',fontsize=20)\nax.set_xlabel('Count', weight='bold')\n\n# Add annotation to bars\nfor i in ax.patches:\n    ax.text(i.get_width()+1, i.get_y()+0.5, str(round((i.get_width()), 2)),\n             fontsize=10, fontweight='bold', color='grey')\nplt.yticks(weight='bold')\nplt.xticks(weight='bold')\n\n# Show Plot\nplt.show()","854acb5f":"print(df[\"Interested Type of Books\"].value_counts())","27868adc":"# Figure Size\nfig, ax = plt.subplots(figsize=(12,15))\n\n# Horizontal Bar Plot\ntitle_cnt=df[\"Interested Type of Books\"].value_counts().sort_values(ascending=False).reset_index()\nmn= ax.barh(title_cnt.iloc[:,0], title_cnt.iloc[:,1],edgecolor='black', color=sns.color_palette('pastel',len(title_cnt)))\n\n\n\n# Remove axes splines\nfor s in ['top','bottom','left','right']:\n    ax.spines[s].set_visible(False)\n\n# Remove x,y Ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n# Add padding between axes and labels\nax.xaxis.set_tick_params(pad=5)\nax.yaxis.set_tick_params(pad=10)\n\n\n# Show top values \nax.invert_yaxis()\n\n# Add Plot Title\nax.set_title('Interested Books',weight='bold',fontsize=20)\nax.set_xlabel('Count', weight='bold')\n\n# Add annotation to bars\nfor i in ax.patches:\n    ax.text(i.get_width()+1, i.get_y()+0.5, str(round((i.get_width()), 2)),\n             fontsize=10, fontweight='bold', color='grey')\nplt.yticks(weight='bold')\nplt.xticks(weight='bold')\n\n# Show Plot\nplt.show()","687ac332":"print(df[\"certifications\"].value_counts())","a7e5bffb":"# Figure Size\nfig, ax = plt.subplots(figsize=(12,6))\n\n# Horizontal Bar Plot\ntitle_cnt=df.certifications.value_counts().sort_values(ascending=False).reset_index()\nmn= ax.barh(title_cnt.iloc[:,0], title_cnt.iloc[:,1],edgecolor='black', color=sns.color_palette('pastel',len(title_cnt)))\n\n\n\n# Remove axes splines\nfor s in ['top','bottom','left','right']:\n    ax.spines[s].set_visible(False)\n\n# Remove x,y Ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n# Add padding between axes and labels\nax.xaxis.set_tick_params(pad=5)\nax.yaxis.set_tick_params(pad=10)\n\n\n# Show top values \nax.invert_yaxis()\n\n# Add Plot Title\nax.set_title('Certifications',weight='bold',fontsize=20)\nax.set_xlabel('Count', weight='bold')\n\n# Add annotation to bars\nfor i in ax.patches:\n    ax.text(i.get_width()+1, i.get_y()+0.5, str(round((i.get_width()), 2)),\n             fontsize=10, fontweight='bold', color='grey')\nplt.yticks(weight='bold')\nplt.xticks(weight='bold')\n\n# Show Plot\nplt.show()","59d26598":"print(df[\"workshops\"].value_counts())","96686e0d":"# Figure Size\nfig, ax = plt.subplots(figsize=(12,6))\n\n# Horizontal Bar Plot\ntitle_cnt=df.workshops.value_counts().sort_values(ascending=False).reset_index()\nmn= ax.barh(title_cnt.iloc[:,0], title_cnt.iloc[:,1],edgecolor='black', color=sns.color_palette('pastel',len(title_cnt)))\n\n\n\n# Remove axes splines\nfor s in ['top','bottom','left','right']:\n    ax.spines[s].set_visible(False)\n\n# Remove x,y Ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n# Add padding between axes and labels\nax.xaxis.set_tick_params(pad=5)\nax.yaxis.set_tick_params(pad=10)\n\n\n# Show top values \nax.invert_yaxis()\n\n# Add Plot Title\nax.set_title('Workshops Attended',weight='bold',fontsize=20)\nax.set_xlabel('Count', weight='bold')\n\n# Add annotation to bars\nfor i in ax.patches:\n    ax.text(i.get_width()+1, i.get_y()+0.5, str(round((i.get_width()), 2)),\n             fontsize=10, fontweight='bold', color='grey')\nplt.yticks(weight='bold')\nplt.xticks(weight='bold')\n\n# Show Plot\nplt.show()","e09bbc0e":"print(df[\"Type of company want to settle in?\"].value_counts())","93260082":"# Figure Size\nfig, ax = plt.subplots(figsize=(12,6))\n\n# Horizontal Bar Plot\ntitle_cnt=df[\"Type of company want to settle in?\"].value_counts().sort_values(ascending=False).reset_index()\nmn= ax.barh(title_cnt.iloc[:,0], title_cnt.iloc[:,1],edgecolor='black', color=sns.color_palette('pastel',len(title_cnt)))\n\n\n\n# Remove axes splines\nfor s in ['top','bottom','left','right']:\n    ax.spines[s].set_visible(False)\n\n# Remove x,y Ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n# Add padding between axes and labels\nax.xaxis.set_tick_params(pad=5)\nax.yaxis.set_tick_params(pad=10)\n\n\n# Show top values \nax.invert_yaxis()\n\n# Add Plot Title\nax.set_title('Type of Company you want to settle in?',weight='bold',fontsize=20)\nax.set_xlabel('Count', weight='bold')\n\n# Add annotation to bars\nfor i in ax.patches:\n    ax.text(i.get_width()+1, i.get_y()+0.5, str(round((i.get_width()), 2)),\n             fontsize=10, fontweight='bold', color='grey')\nplt.yticks(weight='bold')\nplt.xticks(weight='bold')\n\n# Show Plot\nplt.show()","86c59053":"print(df[\"interested career area \"].value_counts())","3689be16":"# Figure Size\nfig, ax = plt.subplots(figsize=(10,4)) #width,height\n\n# Horizontal Bar Plot\ntitle_cnt=df[\"interested career area \"].value_counts().sort_values(ascending=False).reset_index()\nmn= ax.barh(title_cnt.iloc[:,0], title_cnt.iloc[:,1],edgecolor='black', color=sns.color_palette('pastel',len(title_cnt)))\n\n\n\n# Remove axes splines\nfor s in ['top','bottom','left','right']:\n    ax.spines[s].set_visible(False)\n\n# Remove x,y Ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n# Add padding between axes and labels\nax.xaxis.set_tick_params(pad=5)\nax.yaxis.set_tick_params(pad=10)\n\n\n# Show top values \nax.invert_yaxis()\n\n# Add Plot Title\nax.set_title('Interested Career Area ',weight='bold',fontsize=20)\nax.set_xlabel('Count', weight='bold')\n\n# Add annotation to bars\nfor i in ax.patches:\n    ax.text(i.get_width()+1, i.get_y()+0.5, str(round((i.get_width()), 2)),\n             fontsize=10, fontweight='bold', color='grey')\nplt.yticks(weight='bold')\nplt.xticks(weight='bold')\n\n# Show Plot\nplt.show()","94ec241b":"cols = df[[\"self-learning capability?\", \"Extra-courses did\",\"Taken inputs from seniors or elders\", \"worked in teams ever?\", \"Introvert\"]]\nfor i in cols:\n    cleanup_nums = {i: {\"yes\": 1, \"no\": 0}}\n    df = df.replace(cleanup_nums)","0e7684a7":"print(\"\\n\\nList of Categorical features: \\n\" , df.select_dtypes(include=['object']).columns.tolist())","afe05d9d":"mycol = df[[\"reading and writing skills\", \"memory capability score\"]]\nfor i in mycol:\n    cleanup_nums = {i: {\"poor\": 0, \"medium\": 1, \"excellent\": 2}}\n    df = df.replace(cleanup_nums)\n\ncategory_cols = df[['certifications', 'workshops', 'Interested subjects', 'interested career area ', 'Type of company want to settle in?', \n                    'Interested Type of Books']]\nfor i in category_cols:\n    df[i] = df[i].astype('category')\n    df[i + \"_code\"] = df[i].cat.codes\n\nprint(\"\\n\\nList of Categorical features: \\n\" , df.select_dtypes(include=['object']).columns.tolist())","e2aebe29":"print(df['Management or Technical'].unique())\nprint(df['hard\/smart worker'].unique())","f7e8f4f6":"df = pd.get_dummies(df, columns=[\"Management or Technical\", \"hard\/smart worker\"], prefix=[\"A\", \"B\"])\ndf.head()","6fcc083c":"print(\"List of Numerical features: \\n\" , df.select_dtypes(include=np.number).columns.tolist())","4c76b991":"feed = df[['Logical quotient rating', 'coding skills rating', 'hackathons', 'public speaking points', 'self-learning capability?','Extra-courses did', \n           'Taken inputs from seniors or elders', 'worked in teams ever?', 'Introvert', 'reading and writing skills', 'memory capability score',  \n           'B_hard worker', 'B_smart worker', 'A_Management', 'A_Technical', 'Interested subjects_code', 'Interested Type of Books_code', 'certifications_code', \n           'workshops_code', 'Type of company want to settle in?_code',  'interested career area _code',\n             'Suggested Job Role']]\n\n# Taking all independent variable columns\ndf_train_x = feed.drop('Suggested Job Role',axis = 1)\n\n# Target variable column\ndf_train_y = feed['Suggested Job Role']\n\nx_train, x_test, y_train, y_test = train_test_split(df_train_x, df_train_y, test_size=0.20, random_state=42)\n","23f33b8c":"clf = tree.DecisionTreeClassifier()\nclf = clf.fit(x_train, y_train)\n\n\ny_pred = clf.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\naccuracy = accuracy_score(y_test,y_pred)\nprint(\"confusion matrics=\",cm)\nprint(\"  \")\nprint(\"accuracy=\",accuracy*100)","0fabad46":"userdata = [['5','5','5','5','1','0','1', '2', '1', '1', '0', '3','3', \n                    '4','4','2','7','0','1','0','1']]\nynewclass = clf.predict(userdata)\nynew = clf.predict_proba(userdata)\nprint(ynewclass)\nprint(\"Probabilities of all classes: \", ynew)\nprint(\"Probability of Predicted class : \", np.max(ynew))","d5563d0b":"clf2 = svm.SVC()\nclf2.fit(x_train, y_train)\nsvm_y_pred = clf2.predict(x_test)\nsvm_cm = confusion_matrix(y_test,svm_y_pred)\nsvm_accuracy = accuracy_score(y_test,svm_y_pred)\nprint(\"confusion matrics=\",svm_cm)\nprint(\"  \")\nprint(\"accuracy=\",svm_accuracy*100)","3c320fa5":"ynewclass = clf2.predict(userdata)\nynew = clf2.decision_function(userdata)\nprint(ynewclass)\nprint(\"Probabilities of all classes: \", ynew)\nprint(\"Probability of Predicted class : \", np.max(ynew))","b15d686a":"clf3 = RandomForestClassifier()\nclf3.fit(x_train, y_train)\nrfc_y_pred = clf3.predict(x_test)\nrfc_cm = confusion_matrix(y_test,svm_y_pred)\nrfc_accuracy = accuracy_score(y_test,rfc_y_pred)\nprint(\"confusion matrics=\",rfc_cm)\nprint(\"  \")\nprint(\"accuracy=\",rfc_accuracy*100)","a8826d95":"userdata = [['5','5','5','5','1','0','1', '2', '1', '1', '0', '3','3', \n                    '4','4','2','7','0','1','0','1']]\nynewclass = clf3.predict(userdata)\nynew = clf3.predict_proba(userdata)\nprint(ynewclass)\nprint(\"Probabilities of all classes: \", ynew)\nprint(\"Probability of Predicted class : \", np.max(ynew))","a2ca152b":"# **(c) Random Forest Classifier** \ud83c\udf32\ud83c\udf32\ud83c\udf32\ud83c\udf32","3b52160d":"## (b) Number Encoding for Categorical ","cc5b4a07":"## (a) Binary Encoding for Categorical Variables","3e5c3044":"## (a) Correlation Between Numerical Features","89917106":"# **4. Exploratory Data Analysis** \ud83d\udcc9","55e7d5a9":"# **1. Importing Necessary Libraries** \ud83d\udcda","a13b902c":"### **Suggestions are always welcome!** \ud83d\ude03\ud83d\udcda\ud83d\udcca\ud83d\udcd0","bf49f5f8":"# **3. Data Preprocessing (Cleaning)** \ud83e\uddf9","d7e0a89d":"### **Predicting class for one instance**","72234f40":"## (a) Checking Missing Values","6ab0117e":"# **2. Loading Dataset** \ud83d\udcca","119a15a0":"# **(b) Supprt Vector Machine Classifier**","3f873141":"## (c) Checking Data Balancing for Classification","3b9623ed":"## (c) Dummy Variable Encoding","075ce5ad":"## \ud83d\udd17 **[Go to the Kaggle Notebook](https:\/\/www.kaggle.com\/umangaggarwal\/predict-my-career)**","12e9f3fa":"# **(a) Decision Tree \ud83c\udf33 Classifier**","7e355fee":"# **6. Building Machine Learning Model** \ud83e\udd16","3c23e26d":"### **Prediction for one instance**","a2744313":"## (b) Checking Distinct Values for Categorical Features","873a9279":"**No highly corelated numerical pair found.**","13e84a0f":"**Observations**\n* The categorical features with yes or no can be made numerical easily using binary encoding.","e9bd9eff":"**Observation: No missing values.**","442cfe37":"## (b) Visualization for Categorical Variables","11b0bd67":"# **5. Feature Engineering** \u2699\ufe0f"}}