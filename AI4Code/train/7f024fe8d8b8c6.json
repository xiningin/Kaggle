{"cell_type":{"afb5ebce":"code","29a91d89":"code","4babdbc9":"code","2b4eb282":"code","adef196e":"code","cb91b55b":"code","cad5e687":"code","885ed3b7":"code","289d84d9":"markdown"},"source":{"afb5ebce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n#print(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\ndata = pd.read_csv('..\/input\/fire-department-calls-for-service.csv')\n\n","29a91d89":"# Missing Values\nper = (data.isnull().sum()\/data.shape[0])*100\npercents = per.iloc[per.nonzero()[0]]\n\n\npercents.plot.barh()\nplt.title('Missing Values')\nplt.xlabel('Percentage')\nplt.show()\n\n","4babdbc9":"# data munging\n\n# parse dates\ndata['Call Date'] = pd.to_datetime(data['Call Date'], format = \"%Y-%m-%d\")\n\n# count of meets per month\ncalls_by_month = data['Call Date'].groupby([data['Call Date'].dt.year, data['Call Date'].dt.month]).agg('count') \n\n# convert to dataframe\ncalls_by_month = calls_by_month.to_frame()\n\n# move date month from index to column\ncalls_by_month['date'] = calls_by_month.index\n\n# rename column\ncalls_by_month = calls_by_month.rename(columns={calls_by_month.columns[0]:\"calls\"})\n\n# re-parse dates\ncalls_by_month['date'] = pd.to_datetime(calls_by_month['date'], format=\"(%Y, %m)\")\n\n# remove index\ncalls_by_month = calls_by_month.reset_index(drop=True)\n\n# get month of meet\ncalls_by_month['month'] = calls_by_month.date.dt.month\n","2b4eb282":"# import plotly\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# these two lines are what allow the code to show up in a notebook!\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\n\n# sepcify that we want a scatter plot with, with date on the x axis and meet on the y axis\nnew_data = [go.Scatter(x=calls_by_month.date, y=calls_by_month.calls)]\n\n# specify the layout of our figure\nlayout = dict(title = \"Number of Calls to Fire Department per Month\",\n              xaxis= dict(title= 'Date',ticklen= 5,zeroline= False))\n\n# create and show our figure\nfig = dict(data = new_data, layout = layout)\niplot(fig)","adef196e":"\n# count of calls by type\ncalls_by_type = data['Call Type'].value_counts().to_frame()\n\n# move call type to column\ncalls_by_type['Call Types'] = calls_by_type.index\n\n# rename column\ncalls_by_type = calls_by_type.rename(columns={calls_by_type.columns[0]:\"calls\"})\n\n# remove index\ncalls_by_type = calls_by_type.reset_index(drop=True)\n\n","cb91b55b":"init_notebook_mode()\n\n# sepcify that we want a bar plot with, with call type on the x axis and calls on the y axis\ntype_data = [go.Bar(x=calls_by_type['Call Types'], y=calls_by_type['calls'])]\n\n# specify the layout of our figure\nlayout = dict(title = \"Number of Calls to Fire Department by Type\",\n              xaxis= dict(title= 'Call Type',ticklen= 5,zeroline= False))\n\n# create and show our figure\nfig = dict(data = type_data, layout = layout)\niplot(fig)","cad5e687":"# count of calls by unit id\ncalls_by_UnitID = data['Unit ID'].value_counts().to_frame()\n\n# move call unit id to column\ncalls_by_UnitID['Unit IDs'] = calls_by_UnitID.index\n\n# rename column\ncalls_by_UnitID = calls_by_UnitID.rename(columns={calls_by_UnitID.columns[0]:\"calls\"})\n\n# remove index\ncalls_by_UnitID = calls_by_UnitID.reset_index(drop=True)\ncalls_by_UnitID.head()","885ed3b7":"init_notebook_mode()\n# sepcify that we want a bar plot with, with call unit id on the x axis and calls on the y axis\nunitID_data = [go.Bar(x=calls_by_UnitID['Unit IDs'], y=calls_by_UnitID['calls'])]\n\n# specify the layout of our figure\nlayout = dict(title = \"Number of Calls to Fire Department by Unit ID\",\n              xaxis= dict(title= 'Call Unit ID',ticklen= 5,zeroline= False))\n\n# create and show our figure\nfig = dict(data = unitID_data, layout = layout)\niplot(fig)","289d84d9":"# Interactive Graphs "}}