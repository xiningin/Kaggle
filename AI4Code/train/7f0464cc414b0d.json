{"cell_type":{"5f3a600e":"code","532cbd9b":"code","363bef1f":"code","92ca8177":"code","97912f17":"code","ab2dd5bf":"code","318c357d":"code","b1538a26":"code","2b7d9904":"code","69cc4379":"code","4ed32a56":"code","6e227901":"code","4d2be21d":"code","fe9462e8":"code","794bddf7":"code","f73883b7":"code","72761a72":"code","220a1eb5":"code","4ad5a942":"code","7e35f6e1":"code","4bf9bca1":"code","5c068c21":"code","bb8d7e2b":"code","f53a1ae4":"code","9cf6d44a":"code","b2b8b46a":"code","e3cfbda9":"code","03a9109c":"code","34767275":"code","a349f9af":"code","037dfaff":"code","32a4b828":"code","ed725e4f":"code","2d5c6028":"code","db6b1a17":"code","4f0bb9e5":"code","76870b54":"code","43763d55":"code","b55423a5":"code","812e919c":"code","6a65df63":"code","37769aac":"code","66932577":"code","e4eaceea":"code","9ee333d0":"code","b88d16d5":"code","fbc8b5b3":"code","5f69b97b":"code","c332fecf":"code","006972af":"code","e3c76b32":"code","2eeae8b4":"code","d32cf2b6":"code","53e688ff":"code","240683e3":"code","26526180":"code","16ff9612":"code","c3ac8593":"code","63ee0ce2":"code","cc5db59e":"code","da2e7b33":"code","fed3ff07":"code","f9c6d1a3":"code","eb3e517b":"code","8be3e001":"code","ea1166a8":"code","6f9c18c9":"code","1a28f5bb":"code","83ef1d7c":"code","f9a59e82":"code","d645913a":"code","44138940":"code","89da18b8":"code","0672a0bb":"code","d462a0ce":"code","95234f4b":"code","683b78b9":"code","99a034aa":"code","19f2a7ce":"code","c65fa658":"code","7d1478a6":"code","ae09b4bb":"code","880fea58":"code","71764d42":"code","cc9482fb":"code","1820bc83":"code","c9a319d0":"code","549fb136":"code","232f4a13":"code","2cdbaad5":"code","9c4118c3":"code","c6f74e65":"code","3fae30fd":"code","a2ad305c":"code","925be5c6":"code","d83b0eb8":"code","64cf5cc7":"markdown","8ee6c46f":"markdown","9b657faf":"markdown","a81a8021":"markdown","5b124d9b":"markdown","dd8105ef":"markdown","8ec304c8":"markdown","63676bbd":"markdown","7b62858e":"markdown","17d29222":"markdown","7c405af0":"markdown","3cacee88":"markdown","3212ebf9":"markdown","b3e2f876":"markdown","d6cef4f0":"markdown","78295979":"markdown","acbfa275":"markdown","15b60d8a":"markdown","5bdf77e7":"markdown","f5c7d0e7":"markdown","3258e9b8":"markdown","baeb43b3":"markdown","b267378c":"markdown","5145533e":"markdown","682343cb":"markdown","1cf64e98":"markdown","06ff8dc7":"markdown","79d19b11":"markdown","40ce89c7":"markdown","e3e9b178":"markdown","2bc096ce":"markdown","f9f869b7":"markdown","bcd358a9":"markdown","0ea2eb79":"markdown","3f35a026":"markdown","4c47c4cb":"markdown","4f58126b":"markdown","9032f0b5":"markdown","a33087a3":"markdown","06c180c4":"markdown","0c08898d":"markdown","eb53b771":"markdown","15ecd88b":"markdown","cc6c168b":"markdown","25b1990a":"markdown","a97c3926":"markdown","946610b6":"markdown","de0b304f":"markdown","c79bbebe":"markdown","5c935dec":"markdown","40050962":"markdown","e040ef26":"markdown","e2bc5d2d":"markdown","3e28d91d":"markdown","55cb22ed":"markdown","94ae5be6":"markdown"},"source":{"5f3a600e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv(\"..\/input\/fifa19\/data.csv\")","532cbd9b":"df.head()","363bef1f":"df.info()","92ca8177":"df.columns","97912f17":"df.corr()","ab2dd5bf":"f,ax = plt.subplots(figsize=(13,13))\nsns.heatmap(df.corr(), annot=False, linewidth=1, cbar_kws={\"label\":\"Intensity bar\",\"orientation\":\"horizontal\"})\nplt.show()","318c357d":"df.Overall.plot(kind = 'line', color = 'k',label = 'Overall',linewidth=1,alpha = 0.5,grid = True,linestyle = '--')\ndf.Composure.plot(color = 'r',label = 'Composure',linewidth=1, alpha = 0.5,grid = True,linestyle = 'dashed')\nplt.legend(loc='upper right')    \nplt.xlabel('x axis')              \nplt.ylabel('y axis')\nplt.title('Comparison of Overall and Composure')            \nplt.show()","b1538a26":"df.plot(kind='scatter', x='Finishing', y='Dribbling',alpha = 0.5, color = 'purple', marker=\"v\")\nplt.title('Finishing and Dribbling Scatter Plot')","2b7d9904":"df.Age.plot(kind=\"hist\",title=\"Frequency of Ages\",bins=100,cumulative=False,align=\"right\",orientation=\"horizontal\", figsize=(7,7))\nplt.xlabel('Frequency')            \nplt.ylabel('Age')\nplt.show()","69cc4379":"fbdic = {\"Name\":\"L.Messi\",\"Nationality\":\"Argentina\"}\nprint(fbdic.keys())\nprint(fbdic.values())","4ed32a56":"  if \"De Gea\" in fbdic.values():\n    print(\"True\")\n  else:\n    print(\"False\")","6e227901":"    fbdic['Name']=\"De Gea\"\n    fbdic[\"Nationality\"]=\"Spain\"\n    print(fbdic)","4d2be21d":"series = df[\"Potential\"]      \nprint(type(series))","fe9462e8":"filtered = df[\"Potential\"] > 93\ndf[filtered]","794bddf7":"df[np.logical_and(df[\"Dribbling\"]>90, df[\"Balance\"]>90)]","f73883b7":"liste = [\"L.Messi\",\"E.Hazard\",\"Coutinho\",\"D.Mertens\",\"Doughlas Costa\"]\nfor i in liste:\n    print(\"Players whose dribblings and balances greater than 90: \", i)\nprint(\"\")\n\nfor index, value in enumerate(liste):\n    print(index+1,\" : \",value)\nprint('') ","72761a72":"for key,value in fbdic.items():\n    print(key,\" : \",value)\nprint('')\n\n\nfor index,value in df[['Overall']][0:5].iterrows():\n    print(index,\" : \",value)\n","220a1eb5":"def tuple_func():\n    \n    \"\"\" return defined t tuble\"\"\"\n    \n    k = (10,20,30)\n    return k\n\nx,y,z = tuple_func()\nprint(x,y,z)\n    ","4ad5a942":"y = 5\ndef f():\n    y = 9\n    return y\n                        \nprint(y)      # y = 5 is global scope\nprint(f())    # y = 9 is local scpoe","7e35f6e1":"x = 3\ndef f():\n  y = 2**3\n  return y\n               #There is no local scope.\nprint(f())     #It uses global scope x.","4bf9bca1":"# How can we learn what is built in scope\nimport builtins\ndir(builtins)","5c068c21":"def num1():              # We are starting a simple example :)\n    def num2():\n        a = 5\n        b = 3\n        c= a*b\n        return c\n    return num2()**3\nprint(num1())","bb8d7e2b":"lisst=[]                   #Let's make a list that occure the numbers that divisionable by seven using by nested functions.\ndef div_seven():           # Exactly we can find this list by another easily way but the main point is how work nested functions.\n    def count_():\n        for i in range (0,101):\n         if (i % 7 == 0):\n            lisst.append(i)\n        return lisst\n    return count_()\nprint(div_seven())","f53a1ae4":"def adder(*num):\n    \n    sum = 0\n    \n    for n in num:\n        sum = sum + n\n        \n    print(\"The sum is: \",sum)\n        \nadder(7,5)\nadder(12,35)\nadder(1,3,4,90)\n    ","9cf6d44a":"def my_dic(**words):\n\n    for key, value in words.items():\n    \n     print(key,value, sep=\" - \")\n    \nmy_dic(Name = \"Mustafa\", Surname = \"Kaplan\", Departman = \"IT\",)\nprint(\"\")\nmy_dic(Name = \"Selin\", Surname = \"Yazar\", Departman = \"HR\" )\n\n","b2b8b46a":"area = lambda x,pi : (pi*(x**2))\nprint(area(2,3.14))","e3cfbda9":"family = [\"Atiye\", \"Niyazi\", \"Burcu\", \"Karahan\"]\nsurname = map (lambda x: x +\" \"+\"Deliorman\",family)\nprint(list(surname))","03a9109c":"# create an iterator object from that iterable\niter_obj = iter(\"123456789\")\nlist1=[]\n# infinite loop\nwhile True:\n    try:\n        \n        element = next(iter_obj)\n        list1.append(element)\n        \n    except StopIteration:\n        print(\"Object's elements are: \", list1)\n        break","34767275":"list_even = [0,2,4]\nlist_odd = [1,3,5]\nlist_fiv = [0,5,10]\nz = zip(list_even, list_odd, list_fiv)\nnew_list = list(z)\nprint(new_list)\nprint(\"\")\nun_zip = zip(new_list)\nunlist1, unlist2, unlist3 = list(un_zip)\nprint(unlist1)\nprint(unlist2)\nprint(unlist3)\nprint(type(unlist1))","a349f9af":"num1 = [10,20,30]\nnum2 = [i - 5 for i in num1 ]\nprint(num2)","037dfaff":"num1 = [50,20,44]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","32a4b828":"average = sum(df.Age)\/len(df.Age)\ndf[\"Age_level\"] = [\"Older\" if i > average else \"Younger\" for i in df.Age]\ndf.loc[:10,[\"Age_level\",\"Age\",\"Name\"]]","ed725e4f":"df.head()","2d5c6028":"df.columns","db6b1a17":"df.info","4f0bb9e5":"df.shape","76870b54":"df.describe","43763d55":"df.boxplot(column=\"Overall\",by=\"Potential\")\nplt.title(\"Overall-Potential boxplot\")\nplt.xlabel(\"Potential\")\nplt.ylabel(\"Overall\")","b55423a5":"df_new = df.head()\ndf_new","812e919c":"melted = pd.melt(frame=df_new,id_vars = 'Name', value_vars= ['Overall','Special'])\nmelted","6a65df63":"melted.pivot(index = 'Name', columns = 'variable',values='value')","37769aac":"df1 = df.head()\ndf2= df.tail()\nconc_data_row = pd.concat([df1,df2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","66932577":"df1 = df[\"Name\"].head()\ndf2 = df[\"Release Clause\"].head()\nconc_df = pd.concat([df1,df2], axis=1)\nconc_df","e4eaceea":"df.dtypes","9ee333d0":"# lets convert object(str) to categorical and int to float.\ndf['Photo'] = df[\"Photo\"].astype('category')\ndf['ID'] = df[\"ID\"].astype('float')\ndf.dtypes","b88d16d5":"df.info()","fbc8b5b3":"df[\"Loaned From\"].value_counts(dropna =False)","5f69b97b":"# Lets drop nan values\ndf1 = df   # also we will use data to fill missing value so I assign it to data1 variable\ndf1[\"Loaned From\"].dropna(inplace = True)  # inplace = True means we do not assign it to new variable. Changes automatically assigned to data","c332fecf":"assert 1==1 # return nothing because it is true","006972af":"assert  df['Loaned From'].notnull().all() # returns nothing because we drop nan values","e3c76b32":"df[\"Loaned From\"].fillna('empty',inplace = True)","2eeae8b4":"assert  df['Loaned From'].notnull().all() # returns nothing because we do not have nan values","d32cf2b6":"# data frames from dictionary\ncompany = [\"MKE\",\"TUSAS\"]\ndaily_income = [\"$10000\",\"$25000\"]\nlist_label = [\"company\",\"daily income\"]\nlist_col = [company,daily_income]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\nzip_data = pd.DataFrame(data_dict)\nzip_data","53e688ff":"# add new column\nzip_data[\"location\"] = [\"Kirikkale\",\"Ankara\"]\nzip_data","240683e3":"#Broadcasting entire column\nzip_data[\"staff number\"] = 0 \nzip_data","26526180":"# Plotting all data \ndf1 = df.loc[:,[\"Strength\",\"Stamina\",\"Jumping\"]]\ndf1.plot()\n# but sometimes it can be confusing  as now.","16ff9612":"# subplots, we can seperate these arguments.\ndf1.plot(subplots = True)\nplt.show()","c3ac8593":"# scatter plot\ndf1.plot(kind=\"scatter\",x = \"Strength\", y = \"Stamina\",color=\"orange\", alpha = 0.8, marker = \"_\")\nplt.show()","63ee0ce2":"# hist plot \ndf1.plot(kind = \"hist\",y = \"Strength\",bins = 50,range= (0,120))","cc5db59e":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndf1.plot(kind = \"hist\",y = \"Strength\",bins = 50,range= (0,250),normed = True,ax = axes[0])\ndf1.plot(kind = \"hist\",y = \"Strength\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","da2e7b33":"df.describe()","fed3ff07":"born_date = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(born_date[1])) # As you can see date is string\n# however we want it to be datetime object\nborn_object = pd.to_datetime(born_date)\nprint(type(born_object))","f9c6d1a3":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndf2 = df.head()\nborn_date = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\nborn_object = pd.to_datetime(born_date)\ndf2[\"Born Date\"] = born_object\n# lets make date as index\ndf2= df2.set_index(\"Born Date\")\ndf2 ","eb3e517b":"# Now we can select according to our date index\nprint(df2.loc[\"1993-03-16\"])\nprint(df2.loc[\"1992-01-10\":\"1993-03-16\"])","8be3e001":"df2.resample(\"A\").mean()","ea1166a8":"# Lets resample with month\ndf2.resample(\"M\").mean()\n# As you can see there are a lot of nan because data2 does not include all months","6f9c18c9":"# We can interpolate with mean()\ndf2.resample(\"M\").mean().interpolate(\"linear\")","1a28f5bb":"df = pd.read_csv('..\/input\/fifa19\/data.csv')\ndf= df.set_index(\"#\")\ndf.head()","83ef1d7c":"# indexing using square brackets\ndf[\"Stamina\"][100]","f9a59e82":"# using column attribute and row label\ndf.Stamina[100]","d645913a":"df.loc[10,[\"Stamina\"]]","44138940":"# Selecting only some columns\ndf[[\"Jumping\",\"Agility\"]]","89da18b8":"print(type(df[\"Strength\"]))     # series\nprint(type(df[[\"Strength\"]]))   # data frames","0672a0bb":"# Slicing and indexing series\ndf.loc[1:10,\"Name\":\"Potential\"]   # 10 and \"Potential\" are inclusive","d462a0ce":"# Reverse slicing \ndf.loc[10:1:-1,\"Name\":\"Potential\"] ","95234f4b":"# From something to end\ndf.loc[1:10,\"Marking\":] ","683b78b9":"# Creating boolean series\nboolean = df.Overall > 92\ndf[boolean]","99a034aa":"# Combining filters\nfirst_filter = df.Stamina > 85\nsecond_filter = df.Strength > 90\ndf[first_filter & second_filter]","19f2a7ce":"# Filtering column based others\ndf.Strength[df.Jumping>93]","c65fa658":"def exp(n):\n    return n*1.5\ndf.Stamina.apply(exp)","7d1478a6":"# Or we can use lambda function\ndf.Stamina.apply(lambda x: x * 1.5)","ae09b4bb":"# Defining column using other columns\ndf[\"Defensive Skill\"] = (df.Composure + df.Marking) \/ 2\ndf.head()","880fea58":"# our index name is this:\nprint(df.index.name)\n# lets change it\ndf.index.name =\"index number\"\ndf.head()","71764d42":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndf.head()\n# first copy of our data to data3 then change index \ndf3 = df.copy()\n# lets make index start from 100. It is not remarkable change but it is just example\ndf3.index = range(200,250,1)\ndf3.head()","cc9482fb":"# Setting index : type 1 is outer type 2 is inner index\ndf1 = df.set_index([\"Club\",\"Position\"]) \ndf1.head(100)\n# data1.loc[\"Fire\",\"Flying\"] # howw to use indexes","1820bc83":"dic = {\"students\":[\"Ahmet\",\"Ali\",\"Bet\u00fcl\",\"B\u00fc\u015fra\"],\"gender\":[\"M\",\"M\",\"F\",\"F\"],\"math_notes\":[10,45,56,90],\"age\":[15,16,14,16]}\ndf1 = pd.DataFrame(dic)\ndf1","c9a319d0":"# pivoting9\n\ndf1.pivot(index=\"students\",columns = \"gender\",values=\"math_notes\").fillna(\"*\")\n","549fb136":"df2 = df1.set_index([\"students\",\"gender\"])\ndf2\n# lets unstack it","232f4a13":"# level determines indexes\ndf1.unstack(level=0)\ndf1","2cdbaad5":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","9c4118c3":"dic = {\"students\":[\"Ahmet\",\"Ali\",\"Bet\u00fcl\",\"B\u00fc\u015fra\"],\"gender\":[\"M\",\"M\",\"F\",\"F\"],\"math_notes\":[10,45,56,90],\"age\":[15,16,14,16]}\ndf1 = pd.DataFrame(dic)\ndf1","c6f74e65":"# df.pivot(index=\"students\",columns = \"age\",values=\"math notes\")\npd.melt(df1,id_vars=\"students\",value_vars=[\"age\",\"math_notes\"])","3fae30fd":"df1","a2ad305c":"# according to treatment take means of other features\ndf1.groupby(\"gender\").mean()   # mean is aggregation \/ reduction method\n# there are other methods like sum, std,max or min","925be5c6":"# Or we can choose multiple features\ndf1.groupby(\"gender\")[[\"math_notes\",\"age\"]].mean()","d83b0eb8":"df.info()\n# as you can see gender is object\n# However if we use groupby, we can convert it categorical data. \n# Because categorical data uses less memory, speed up operations like groupby\n#df[\"gender\"] = df[\"gender\"].astype(\"category\")\n#df[\"treatment\"] = df[\"treatment\"].astype(\"category\")\n#df.info()","64cf5cc7":"<a id = \"18\"><\/a><br>\n### VISUAL EXPLORATORY DATA ANALYSIS\n\n* Box plots: visualize basic statistics like outliers, min\/max or quantiles","8ee6c46f":"<a id = \"34\"><\/a><br>\n### TRANSFORMING DATA","9b657faf":"*Check if De Gea in dictionary or not and if he is not in dict. replace him with the person who exist.*","a81a8021":"Using with histogram, we've showed that how is the distrubutions of ages.","5b124d9b":"<a id = \"24\"><\/a><br>\n# 4. PANDAS FOUNDATION\n<a id = \"25\"><\/a><br>\n### REVIEW of PANDAS","dd8105ef":"<a id = \"39\"><\/a><br>\n### MELTING DATA FRAMES\n\n* Reverse of pivoting","8ec304c8":"<a id = \"22\"><\/a><br>\n### DATA TYPES","63676bbd":"<a id = \"10\"><\/a><br>\n### DEFAULT and FLEXIBLE ARGUMENTS\n\n","7b62858e":"<a id = \"17\"><\/a><br>\n### EXPLORATORY DATA ANALYSIS","17d29222":"<a id = \"35\"><\/a><br>\n### INDEX OBJECTS AND LABELED DATA","7c405af0":"<a id = \"11\"><\/a><br>\n### LAMBDA FUNCTION\nFaster way of writing function","3cacee88":"*Also we can find how many columns and rows consists in our dataframe and if they were integer or object. And learn more about our datas for statistics and data science.*","3212ebf9":"<a id = \"3\"><\/a><br>\n### DICTIONARY","b3e2f876":"<a id = \"21\"><\/a><br>\n### CONCATENATING DATA\n* We can concatenate two dataframe","d6cef4f0":"<a id = \"16\"><\/a><br>\n### DIAGNOSE DATA for CLEANING\n\nWe need to diagnose and clean data before exploring using head, tail, columns, shape and info methods.","78295979":"<a id = \"2\"><\/a><br>\n### MATPLOTLIB\nMatplot is a python library that help us to plot data. The easiest and basic plots are line, scatter and histogram plots.","acbfa275":"<a id = \"14\"><\/a><br>\n### LIST COMPREHENSION","15b60d8a":"*Can you define a serie for take the potantial players who are greater 93 and who are they ?*","5bdf77e7":"<a id = \"23\"><\/a><br>\n### MISSING DATA and TESTING WITH ASSERT\n\nIf we encounter with missing data, what we can do:\n\n* leave as is\n* drop them with dropna()\n* fill missing value with fillna()\n* fill missing values with test statistics like mean\n* Assert statement: check that you can turn on or turn off when you are done with your testing of the program","f5c7d0e7":"*As we saw in this graphic we can say when overalls of the players decreases, composures decreases too.*","3258e9b8":"<a id = \"38\"><\/a><br>\n### STACKING and UNSTACKING DATAFRAME\n\n* deal with multi label indexes\n* level: position of unstacked index\n* swaplevel: change inner and outer level index position","baeb43b3":"# INTRODUCTION\n\n\n<font color = 'purple'>\n\nContent:\n\n1. [INTRODUCTION TO PYTHON](#1)\n   1. [Matplotlib](#2)\n   2. [Dictionary](#3)\n   3. [Pandas](#4)\n   4. [While and For Loops](#5)\n2. [PYTHON DATA SCIENCE TOOL BOX](#6)\n   1. [User Defined Function](#7)\n   2. [Scope](#8)\n   3. [Nested Function](#9)\n   4. [Default and Flexible Argument](#10)\n   5. [Lambda Function](#11)\n   6. [Anonymous Function](#12)\n   7. [Iterators](#13)\n   8. [List Comprehension](#14)\n3. [CLEANING DATA](#15)\n    1. [Diagnose Data for Cleaning](#16)\n    2. [Exploratory Data Analysis](#17)\n    3. [Visual exploratory data analysis](#18)\n    4. [Tidy data](#19)\n    5. [Pivoting data](#20)\n    6. [Concatenating data](#21)\n    7. [Data types](#22)\n    8. [Missing data and testing with assert](#23)\n4. [PANDAS FOUNDATION](#24)\n    1. [Review of pandas](#25)\n    2. [Visual exploratory data analysis](#26)\n    3. [Statistical explatory data analysis](#27)\n    4. [Indexing pandas time series](#28)\n    5. [Resampling pandas time series](#29)\n5. [MANIPULATING DATA FRAMES WITH PANDAS](#30)\n    1. [Indexing data frames](#31)\n    2. [Slicing data frames](#32)\n    3. [Filtering data frames](#33)\n    4. [Transforming data frames](#34)\n    5. [Index objects and labeled data](#35)\n    6. [Hierarchical indexing](#36)\n    7. [Pivoting data frames](#37)\n    8. [Stacking and unstacking data frames](#38)\n    9. [Melting data frames](#39)\n    10. [Categoricals and groupby](#40)","b267378c":"*Maybe we should look at the datas whether there is a problem.*","5145533e":"<a id = \"20\"><\/a><br>\n### PIVOTING DATA\n* Reverse of melting.","682343cb":"<a id = \"6\"><\/a><br>\n# 2. PYTHON DATA SCIENCE TOOLBOX","1cf64e98":"<a id = \"4\"><\/a><br>\n## PANDAS","06ff8dc7":"<a id = \"30\"><\/a><br>\n## MANIPULATING DATA FRAMES WITH PANDAS\n<a id = \"31\"><\/a><br>\n### INDEXING DATA FRAMES\n\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns","79d19b11":"Example of what we learn above.","40ce89c7":"*Let's import the libraries and database which all we need. We need numpy for linear algebra operations, panas for data proccessing and we use matplotlib and seaborn for doing data visualization. *","e3e9b178":"*If we want to output keys and values together we can use this way. Also index with value method can be useful for later :) *","2bc096ce":"<a id = \"28\"><\/a><br>\n### INDEXING PANDAS TIME SERIES\n\n* datetime = object\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","f9f869b7":"<a id = \"9\"><\/a><br>\n## Nested Function\n\nNested function is the function that inside another function","bcd358a9":"*De Gea had not in dictionary. Now we'll replace in dictionary De Gea instead of L.Messi. After that we'll show our dictionary.*","0ea2eb79":"**Hello it's my first notebook for learning data science fundamentals for pandas and introduction to data visualization. If you want to read and work on it, enjoy :) When I learn more , I will rebuild this notebook.**","3f35a026":"*When our data gets close to one, we can say they show correlation between them. However if numbers get close to zero or negative numbers we can say the againsti there are no correlation between the two situation.*","4c47c4cb":"<a id = \"27\"><\/a><br>\n### STATISTICAL EXPLORATORY DATA ANALYSIS\n\n* We already explained that but we should check once again. :)\n\n    * count: number of entries\n    * mean: average of entries\n    * std: standart deviation\n    * min: minimum entry\n    * 25%: first quantile\n    * 50%: median or second quantile\n    * 75%: third quantile\n    * max: maximum entry\n","4f58126b":"<a id = \"40\"><\/a><br>\n### CATEGORICALS AND GROUPBY","9032f0b5":"Try define a dictionary as fbdic for first footballer's name and nationality. Then take keys and values.","a33087a3":"<a id = \"8\"><\/a><br>\n## Scope","06c180c4":"<a id = \"29\"><\/a><br>\n### RESAMPLING PANDAS TIME SERIES\n\n* Resampling: statistical method over different time intervals\n    * Needs string to specify frequency like \"M\" = month or \"A\" = year\n* Downsampling: reduce date time rows to slower frequency like from daily to weekly\n* Upsampling: increase date time rows to faster frequency like from daily to hourly\n* Interpolate: Interpolate values according to different methods like \u2018linear\u2019, \u2018time\u2019 or index\u2019","0c08898d":"<a id = \"33\"><\/a><br>\n### FILTERING DATA FRAMES","eb53b771":"* We built dataframe frome csv file. Also we can build dataframe from dictionaries.\n    * zip() method: This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.\n* Adding new column\n* Broadcasting: Create new column and assign a value to entire column","15ecd88b":"<a id = \"37\"><\/a><br>\n### PIVOTING DATA FRAMES","cc6c168b":"*Use list with for and enumerate method then try to write Players whose dribblings and balances greater than 90  *","25b1990a":"<a id = \"32\"><\/a><br>\n### SLICING DATA FRAME\n* Difference between selecting columns\n    * Series and data frames\n* Slicing and indexing series\n* Reverse slicing\n* From something to end","a97c3926":"*Let's show the players whose dirbblings with balances greater than 90 with logical and operations.*","946610b6":"<a id = \"13\"><\/a><br>\n### ITERATORS","de0b304f":"<a id = \"19\"><\/a><br>\n### TIDY DATA","c79bbebe":"<a id = \"26\"><\/a><br>\n### VISUAL EXPLORATORY DATA ANALYSIS\n\n* Plot\n* Subplot\n* Histogram:\n    * bins: number of bins\n    * range(tuble): min and max values of bins\n    * normed(boolean): normalize or not\n    * cumulative(boolean): compute cumulative distribution","5c935dec":"<a id = \"7\"><\/a><br>\n## User Defined Function","40050962":"From this graphic we understand that there is no correlation between almost all gk skills with others.","e040ef26":"<a id = \"15\"><\/a><br>\n# CLEANING DATA","e2bc5d2d":"<a id = \"1\"><\/a><br>\n# INTRODUCTION TO PYTHON","3e28d91d":"<a id = \"12\"><\/a><br>\n### ANONYMOUS FUNCT\u0130ON\nLike lambda function but it can take more than one arguments.","55cb22ed":"<a id = \"5\"><\/a><br>\n### WHILE and FOR LOOPS\nWe will learn most basic while and for loops","94ae5be6":"<a id = \"36\"><\/a><br>\n### HIERARCHICAL INDEXING"}}