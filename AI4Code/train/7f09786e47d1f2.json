{"cell_type":{"0bb4e15c":"code","614c9b11":"code","62237515":"code","818a0740":"code","def43bdf":"code","1809d3dd":"code","207e0e6f":"code","1984d18d":"code","611acf2c":"code","05bd0fec":"code","be6f54cc":"code","caccd4f3":"code","bebd3545":"code","54715012":"code","b71d041b":"code","015c4699":"code","9e428d30":"code","2f4c9ee5":"code","2e8c8a91":"code","b86966ac":"code","5be06282":"code","4ebcfb7d":"code","666ebf34":"code","5937939d":"code","7847420b":"code","7102a2eb":"code","fbe32136":"code","d1a974f6":"code","411d8dfc":"code","33db0f20":"code","14798ee7":"code","a644b430":"code","f791e3ed":"code","fa7d351c":"code","a8fb7996":"code","4501f938":"code","4f4edfe3":"code","ebfdc4a8":"markdown","48cb79a8":"markdown","9c56761f":"markdown","64b560db":"markdown","b60fb422":"markdown","b32ab08e":"markdown","41f55585":"markdown","453508bf":"markdown"},"source":{"0bb4e15c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import metrics","614c9b11":"df = pd.read_csv('..\/input\/insurance\/insurance.csv')","62237515":"df.shape","818a0740":"df.info()","def43bdf":"df.isna().sum()","1809d3dd":"df.duplicated().sum()","207e0e6f":"# removendo os registros duplicados\ndf = df.drop_duplicates()","1984d18d":"df.head()","611acf2c":"df.describe()","05bd0fec":"df['smoker'].value_counts().plot.bar(rot=0);","be6f54cc":"df['region'].value_counts().plot.bar(rot=0);","caccd4f3":"df.bmi.plot.box()","bebd3545":"df['charges'].plot.box();","54715012":"df.hist(figsize=(13,7), grid=False);","b71d041b":"df2 = df.copy()","015c4699":"le = LabelEncoder()","9e428d30":"df2['sex'] = le.fit_transform(df2['sex'])\ndf2['region'] = le.fit_transform(df2['region'])\ndf2['smoker'] = le.fit_transform(df2['smoker'])","2f4c9ee5":"df2['smoker'] = le.fit_transform(df2['smoker'])","2e8c8a91":"corr = df2.corr()\nsns.heatmap(corr, annot=True, vmax=1, vmin=-1);","b86966ac":"sns.pairplot(df2, hue='smoker');","5be06282":"# X = df2.iloc[:, :-1]\n# y = df2.iloc[:, -1]","4ebcfb7d":"df.columns","666ebf34":"X = df2[['age', 'sex', 'bmi', 'smoker', 'children']]\ny = df2.iloc[:, -1]","5937939d":"from sklearn.preprocessing import StandardScaler, MinMaxScaler\n\n#### StandardScaler\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n#### MinMax\n# scaler = MinMaxScaler()\n# X = scaler.fit_transform(X)","7847420b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=1)","7102a2eb":"from sklearn.linear_model import LinearRegression\n\nlinear_regression = LinearRegression()\n\nlinear_regression.fit(X_train, y_train)\n\ny_pred = linear_regression.predict(X_test)","fbe32136":"print('mean absolute error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('\\nmean squared error:' ,metrics.mean_squared_error(y_test, y_pred, squared=False))\nprint('\\nr2 score:' ,metrics.r2_score(y_test, y_pred, ))\nMAPE = np.mean(np.abs((y_test - y_pred) \/ y_test)) * 100\nprint(f\"\\nValor do MAPE dado em percentual: {MAPE}\")","d1a974f6":"from sklearn.linear_model import SGDRegressor\n\nsgd = SGDRegressor(\n    penalty='l1',\n).fit(X_train, y_train)\n\ny_pred = sgd.predict(X_test)","411d8dfc":"print('mean absolute error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('\\nmean squared error:' ,metrics.mean_squared_error(y_test, y_pred, squared=False))\nprint('\\nr2 score:' ,metrics.r2_score(y_test, y_pred, ))\nMAPE = np.mean(np.abs((y_test - y_pred) \/ y_test)) * 100\nprint(f\"\\nValor do MAPE dado em percentual: {MAPE}\")","33db0f20":"from sklearn.neighbors import KNeighborsRegressor\nknn = KNeighborsRegressor(\n    n_neighbors=9,\n    p=6\n)\n\nknn.fit(X_train, y_train)\n\ny_pred = knn.predict(X_test)","14798ee7":"print('mean absolute error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('\\nmean squared error:' ,metrics.mean_squared_error(y_test, y_pred, squared=False))\nprint('\\nr2 score:' ,metrics.r2_score(y_test, y_pred, ))\nMAPE = np.mean(np.abs((y_test - y_pred) \/ y_test)) * 100\nprint(f\"\\nValor do MAPE dado em percentual: {MAPE}\")","a644b430":"from sklearn.tree import DecisionTreeRegressor\n\ntree = DecisionTreeRegressor(splitter='random', min_samples_split=11, min_samples_leaf=3, random_state=1)\n\ntree.fit(X_train, y_train)\n\ny_pred = tree.predict(X_test)","f791e3ed":"print('mean absolute error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('\\nmean squared error:' ,metrics.mean_squared_error(y_test, y_pred, squared=False))\nprint('\\nr2 score:' ,metrics.r2_score(y_test, y_pred, ))\nMAPE = np.mean(np.abs((y_test - y_pred) \/ y_test)) * 100\nprint(f\"\\nValor do MAPE dado em percentual: {MAPE}\")","fa7d351c":"from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor\n\nrand = RandomForestRegressor(random_state=1)\n\nrand.fit(X_train, y_train)\n\ny_pred = rand.predict(X_test)","a8fb7996":"print('mean absolute error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('\\nmean squared error:' ,metrics.mean_squared_error(y_test, y_pred, squared=False))\nprint('\\nr2 score:' ,metrics.r2_score(y_test, y_pred, ))\nMAPE = np.mean(np.abs((y_test - y_pred) \/ y_test)) * 100\nprint(f\"\\nValor do MAPE dado em percentual: {MAPE}\")","4501f938":"gb = GradientBoostingRegressor(\n    loss='huber',\n    alpha=0.71,\n    learning_rate=.071,\n    n_estimators=200,\n    criterion='mae',\n    random_state=1\n).fit(X_train, y_train)\n\ny_pred = gb.predict(X_test)","4f4edfe3":"print('mean absolute error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('\\nmean squared error:' ,metrics.mean_squared_error(y_test, y_pred, squared=False))\nprint('\\nr2 score:' ,metrics.r2_score(y_test, y_pred, ))\nMAPE = np.mean(np.abs((y_test - y_pred) \/ y_test)) * 100\nprint(f\"\\nValor do MAPE dado em percentual: {MAPE}\")","ebfdc4a8":"# Gradient Boosting","48cb79a8":"# KNN","9c56761f":"Columns\n\n* age: age of primary beneficiary\n\n* sex: insurance contractor gender, female, male\n\n* bmi: Body mass index, providing an understanding of body, weights that are relatively high or low relative to height,\nobjective index of body weight (kg \/ m ^ 2) using the ratio of height to weight, ideally 18.5 to 24.9\n\n* children: Number of children covered by health insurance \/ Number of dependents\n\n* smoker: Smoking\n\n* region: the beneficiary's residential area in the US, northeast, southeast, southwest, northwest.\n\n* charges: Individual medical costs billed by health insurance","64b560db":"# \u00c1rvore de Decis\u00e3o","b60fb422":"# Regress\u00e3o Linear","b32ab08e":"# **Under Construction...**","41f55585":"# Random Forest","453508bf":"# SGD"}}