{"cell_type":{"d8dab937":"code","7b6b146f":"code","4f448da2":"code","13391e77":"code","d82a2515":"code","6b43966a":"code","8c9f5939":"code","cd2ebdbe":"code","ac0126a4":"code","cf6dd448":"code","cc8e784c":"code","3743ee53":"code","0a4c63cb":"code","a8c678db":"code","1a145e87":"code","59f8c6a8":"code","355a484f":"code","8d57a3c8":"code","7888523d":"code","a493c3a9":"code","461053d2":"code","9e10f920":"code","13962ea7":"code","b036a50e":"code","7f3e0258":"code","207cf341":"code","8bd1db4d":"code","04b29c1e":"code","1e57bb11":"code","25294ea1":"code","b48fd991":"code","ea7b7244":"code","0b971e58":"code","3d08ce44":"code","7de54900":"code","9b53ccaa":"code","0da312a7":"code","2bebcf3d":"code","5fd53457":"code","c10b904f":"code","6c80e977":"code","9eb9a1b4":"code","d33b7dd5":"code","8c47ca3e":"code","2033d18d":"code","0d4c4b8d":"code","454fca54":"code","8df03e11":"code","528faba5":"code","187a011b":"code","cdea77a6":"code","5980549c":"code","d91fdd3d":"code","dee9196d":"code","6eda140c":"code","7463bd50":"code","190ad0de":"code","164eb3e8":"code","24b43687":"code","057149dc":"code","5335b6b6":"code","036c41af":"code","459851ef":"code","4cab79cc":"code","01280938":"code","c85d91e9":"code","c2929470":"code","edf2bdd4":"code","ad957a2d":"code","dbbd49b9":"code","e93c198b":"code","3bc8c48e":"code","f9e7ad0e":"code","99f268d9":"code","cb030d18":"code","c7d22ae6":"code","e512b3ec":"code","7cbcf50e":"code","63f995f2":"code","c31bdeee":"code","18579835":"code","8889663c":"code","8c2a09d3":"code","8ccd277a":"code","1f93c2c2":"code","cacf99cb":"code","fdc16058":"code","a5bae756":"code","76bb9294":"code","59891fb7":"code","fc680366":"code","c1193431":"code","4fecca60":"code","ee736904":"markdown","07f3026c":"markdown","d6a66925":"markdown","2ce21f8c":"markdown","96419be3":"markdown","8463c4e3":"markdown","01138ecf":"markdown","cfe0183f":"markdown","4f9d99e9":"markdown","f305069e":"markdown","96d7fed7":"markdown","b462050e":"markdown","f11c4648":"markdown","43eafcce":"markdown","3c058de5":"markdown","55c29074":"markdown","5ee12211":"markdown","61d2784d":"markdown","bdb8bfd1":"markdown","1ffbddf7":"markdown","b7ddf4a6":"markdown","e7e151d4":"markdown","e18f761c":"markdown","b5013c47":"markdown","208a75dc":"markdown","a65976ac":"markdown","ecdf46d5":"markdown","74acf142":"markdown","b348daf9":"markdown","c0aae3c7":"markdown","ac66587d":"markdown","b1c42e3e":"markdown","43fa4268":"markdown","a44baab2":"markdown","76f288ea":"markdown","ff29bcc2":"markdown","9c027059":"markdown","c572d1d3":"markdown","a89ef3c9":"markdown","9dd5778d":"markdown","d8f7b73b":"markdown","f64bc6c3":"markdown","83421a36":"markdown","cd3c3c47":"markdown","220ae8c9":"markdown","15b67da6":"markdown","5f23a888":"markdown","411b18a4":"markdown","730fe5bf":"markdown","20ce07f9":"markdown","4c50bda0":"markdown","82e5d5aa":"markdown","19a80d74":"markdown","3323603b":"markdown","e347b8dc":"markdown","8cbef2ec":"markdown","5fe9a802":"markdown","75dfcf64":"markdown","d3dd46cf":"markdown","ed7a4419":"markdown","ec251cce":"markdown","40d764b8":"markdown","0f8fbe47":"markdown","311f9d73":"markdown","a40c1d4c":"markdown","fc903a1f":"markdown","47b01484":"markdown","ce79d5c8":"markdown","0e1245ce":"markdown","3889c88d":"markdown","6e66524f":"markdown","b81cb3cb":"markdown","25129920":"markdown","4ff13ed1":"markdown","f15cc5b1":"markdown","ecbf3c1c":"markdown","f5838a0d":"markdown","ac70654a":"markdown","aa4db47b":"markdown","ff7f21fd":"markdown","aebdd404":"markdown"},"source":{"d8dab937":"%matplotlib inline\n\nimport os\nimport zipfile\nimport urllib\n\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\nimport qgrid\n\nDOWNLOAD_ROOT = \"\"\nFOOD_PATH = os.path.join(\"\/kaggle\/input\/fropenfoodfactsorg-2020\")\nFOOD_PATH_OUTPUT = os.path.join(\"\/kaggle\/working\")\nFOOD_PATH_FILE = os.path.join(FOOD_PATH, \"fr.openfoodfacts.org.products.csv\")\n\nFOOD_PATH_FILE_OUTPUT = os.path.join(FOOD_PATH_OUTPUT, \"fr.openfoodfacts.org.products_transformed.csv\")\n\n\nimport seaborn as sns\nsns.set()\n","7b6b146f":"from IPython.display import display, Markdown\n\ndef display_freq_table(col_names):\n    for col_name in col_names:    \n        effectifs = food[col_name].value_counts(bins=5)\n\n        modalites = effectifs.index # l'index de effectifs contient les modalit\u00e9s\n\n\n        tab = pd.DataFrame(modalites, columns = [col_name]) # cr\u00e9ation du tableau \u00e0 partir des modalit\u00e9s\n        tab[\"Nombre\"] = effectifs.values\n        tab[\"Frequence\"] = tab[\"Nombre\"] \/ len(food) # len(data) renvoie la taille de l'\u00e9chantillon\n        tab = tab.sort_values(col_name) # tri des valeurs de la variable X (croissant)\n        tab[\"Freq. cumul\"] = tab[\"Frequence\"].cumsum() # cumsum calcule la somme cumul\u00e9e\n        \n        display(Markdown('#### ' + col_name))\n        display(tab)","4f448da2":"'''\nCette fonction donne des informations pour aider \u00e0 d\u00e9cider quelle feature on doit conserver, dans le cas o\u00f9\non a 2 features qui semblent correspondre \u00e0 la m\u00eame notion\n\nElle remonte 3 informations :\n% de cas o\u00f9 la valeur de la colonne 1 est renseign\u00e9e, mais pas la 2\n% de cas o\u00f9 la valeur de la colonne 2 est renseign\u00e9e, mais pas la 1\n% de cas o\u00f9 les valeurs de la colonne 1 et 2 sont renseign\u00e9es toutes les deux\n\n'''\n\ndef compare_na(df, col1, col2):\n    num_rows, num_cols = df.shape\n    \n    col1notnull_col2null = round ( ( ( ( df[ (df[col1].notnull()) & ( df[col2].isna() ) ][[col1,col2]].shape[0] ) \/ num_rows ) * 100), 5)\n    col2notnull_col1null = round ( ( ( ( df[ (df[col2].notnull()) & ( df[col1].isna() ) ][[col1,col2]].shape[0] ) \/ num_rows ) * 100), 5)\n    col1notnull_col2notnull = round ( ( ( ( df[ (df[col1].notnull()) & ( df[col2].notnull() ) ][[col1,col2]].shape[0] ) \/ num_rows ) * 100), 5)\n    \n    print(f'Cas o\u00f9 {col1} est renseign\u00e9 mais pas {col2} : {col1notnull_col2null}%')\n    print(f'Cas o\u00f9 {col2} est renseign\u00e9 mais pas {col1} : {col2notnull_col1null}%')\n    print(f'Cas o\u00f9 {col1} et {col2} sont renseign\u00e9s tous les deux : {col1notnull_col2notnull}%')\n","13391e77":"def read_raw_file(nblines, food_path = FOOD_PATH):\n    csv_path = os.path.join(food_path, \"fr.openfoodfacts.org.products.csv\")\n    \n    fp = open(csv_path)\n    \n    line = \"\"\n    \n    for cnt_lines in range(nblines+1):\n        line = fp.readline()\n        \n    print(\">>>>>> Line %d\" % (cnt_lines))\n    print(line)\n    \n    ","d82a2515":"read_raw_file(0)","6b43966a":"read_raw_file(1)\nread_raw_file(2)\nread_raw_file(3)\nread_raw_file(4)\nread_raw_file(5)","8c9f5939":"import pandas as pd\n\ndef load_food_data(food_path=FOOD_PATH):\n    csv_path = os.path.join(food_path, \"fr.openfoodfacts.org.products.csv\")\n    return pd.read_csv(csv_path, sep='\\t', header=0, encoding='utf-8', low_memory=False)\n\n","cd2ebdbe":"food = load_food_data()","ac0126a4":"num_lines = sum(1 for line in open(FOOD_PATH_FILE, encoding='utf-8'))\nmessage = (\nf\"Nombre de lignes dans le fichier (en comptant l'ent\u00eate): {num_lines}\\n\"\nf\"Nombre d'instances dans le dataframe: {food.shape[0]}\"\n)\nprint(message)","cf6dd448":"food.head()","cc8e784c":"#pd.options.display.max_columns = 1000\npd.set_option(\"display.max_columns\", 1000)\npd.set_option(\"display.max_rows\",1000)","3743ee53":"food[food.duplicated()]","0a4c63cb":"food.drop_duplicates(inplace=True)","a8c678db":"food.head()","1a145e87":"food.tail()","59f8c6a8":"food.info(verbose=True, null_counts=True)","355a484f":"food.describe()","8d57a3c8":"(food.count()\/food.shape[0]).sort_values(axis=0, ascending=False)","7888523d":"pd.options.display.max_colwidth = 100\nfood['url']","a493c3a9":"def analyse_donnees_manquantes(df, seuil = .7):\n    nb_rows, nb_cols = df.shape\n\n    nb_col_many_nulls = (((df.isnull().sum()) \/ nb_rows) > seuil)\n\n    percentage_col_many_nulls = round(((nb_col_many_nulls.sum()) \/ nb_cols) * 100, 2)\n\n    message = ( \n        f\"{percentage_col_many_nulls} % des colonnes ont >= {seuil*100:0.0f}% de donn\u00e9es manquantes \\n\"  \n        f\"Ces colonnes sont : \\n\"\n        f\"{nb_col_many_nulls[nb_col_many_nulls].to_string()}\"\n    )\n\n    print(message)\n    \nanalyse_donnees_manquantes(food)","461053d2":"food['countries_tags'].value_counts()","9e10f920":"food['countries'].value_counts()","13962ea7":"food['countries_fr'].value_counts()","b036a50e":"len(food[food['countries_tags'].str.contains(\"france\")==True])","7f3e0258":"len(food[ ( food['countries'].str.contains(\"France\", case=False)==True ) | ( food['countries'].str.contains(\"FR\")==True )  ] )","207cf341":"len(food[food['countries_fr'].str.contains(\"France\")==True])","8bd1db4d":"food[( food['countries_fr'].str.contains(\"France\", na=False) == True ) &  \n     ( \n         ( food['countries'].str.contains(\"France\", case=False, na=False)==True ) | \n         ( food['countries'].str.contains(\"FR\", na=False)==True ) == False \n     )][['countries', 'countries_fr', 'countries_tags']]","04b29c1e":"food = food[food['countries_tags'].str.contains(\"france\")==True].copy()","1e57bb11":"food.info(verbose=True, null_counts=True)","25294ea1":"analyse_donnees_manquantes(food)","b48fd991":"# This line is commented out, because qgrid seems not to work on kaggle. No data is displayed  (it works on my local computer)\n#qgrid.show_grid(food, grid_options={'forceFitColumns': False, 'defaultColumnWidth': 150})","ea7b7244":"import collections\n\nmin_percentage_feature_values_tokeep = collections.defaultdict(lambda : 0.01)\n#min_percentage_feature_values_tokeep['vitamin-b2_100g'] = 0.01  # Use this to have specific percentage value \n\ndef drop_lowquality_values(df, min_percentage_feature_values_tokeep):\n    num_rows, num_cols = df.shape\n    \n    for column_name in df.columns:\n        if (len(food[food[column_name].notnull()]) < min_percentage_feature_values_tokeep[column_name] * num_rows):\n            df.drop([column_name], axis='columns', inplace = True)\n\n","0b971e58":"drop_lowquality_values(food, min_percentage_feature_values_tokeep)","3d08ce44":"(food.count()\/food.shape[0]).sort_values(axis=0, ascending=False)","7de54900":"food[food['pnns_groups_2'].str.contains(\"legumes\", case=False, na=False)][['product_name', 'main_category_fr', 'pnns_groups_2', 'pnns_groups_1']].head(1000)","9b53ccaa":"food[food['pnns_groups_1'].str.contains(\"legumes\", case=False, na=False)][['product_name', 'main_category_fr', 'pnns_groups_2', 'pnns_groups_1']].head(1000)","0da312a7":"food.groupby(['nutriscore_grade'])['nutriscore_grade'].count().plot(kind='pie')","2bebcf3d":"food.groupby(['nutriscore_grade'])['nutriscore_grade'].count().plot(kind='bar')","5fd53457":"sns.distplot(food[food['nutrition-score-fr_100g'].notnull()]['nutrition-score-fr_100g'], kde=True)","c10b904f":"plt.figure(figsize=(16, 10))\nsns.boxplot(x='nutriscore_grade', y='nutrition-score-fr_100g', data=food.sort_values('nutriscore_grade'))","6c80e977":"food[( food['nutrition-score-fr_100g'] > -1) & \n     (food['nutriscore_grade'] == 'a')][['product_name', 'nutrition-score-fr_100g', 'nutriscore_grade']]","9eb9a1b4":"compare_na(food, 'sodium_100g', 'salt_100g')","d33b7dd5":"(food['sodium_100g'] - food['salt_100g']).hist(bins=50)","8c47ca3e":"compare_na(food, 'ingredients_from_palm_oil_n', 'ingredients_that_may_be_from_palm_oil_n')","2033d18d":"(food['ingredients_from_palm_oil_n'] - food['ingredients_that_may_be_from_palm_oil_n']).hist()","0d4c4b8d":"food[(food['ingredients_from_palm_oil_n'] - food['ingredients_that_may_be_from_palm_oil_n']) != 0][['product_name', 'ingredients_from_palm_oil_n','ingredients_that_may_be_from_palm_oil_n']].head(1000)","454fca54":"compare_na(food, 'labels_tags', 'labels_fr')","8df03e11":"compare_na(food, 'labels_tags', 'labels')","528faba5":"compare_na(food, 'labels_fr', 'labels')","187a011b":"food[['product_name', 'labels', 'labels_fr', 'labels_tags']].head(1000)","cdea77a6":"food[food['labels_tags'].str.contains(\"bio|france|organic\", case=False, na=False)][['product_name', 'labels', 'labels_fr', 'labels_tags']].head(1000)","5980549c":"food[( food['labels_tags'].str.contains(\"bio|organic|france\", case=False, na=False) == True ) &  \n     ( \n         ( food['labels_fr'].str.contains(\"bio|organic|france\", case=False, na=False)==False ) \n     )][['labels_tags', 'labels', 'labels_fr']]","d91fdd3d":"food[( food['labels_fr'].str.contains(\"bio|organic|france\", case=False, na=False) == True ) &  \n     ( \n         ( food['labels_tags'].str.contains(\"bio|organic|france\", case=False, na=False)==False ) \n     )][['labels_tags', 'labels', 'labels_fr']]","dee9196d":"food[( food['labels_tags'].str.contains(\"bio|organic|france\", case=False, na=False) == True ) &  \n     ( \n         ( food['labels'].str.contains(\"bio|organic|france|AB\", case=False, na=False)==False ) \n     )][['labels_tags', 'labels', 'labels_fr']]","6eda140c":"food[['product_name', 'additives_tags', 'additives_fr', 'additives_n']].head(1000)","7463bd50":"compare_na(food, 'additives_tags', 'additives_fr')","190ad0de":"food[['product_name', 'states', 'states_tags', 'states_fr']].head(1000)","164eb3e8":"food[( food['states_tags'].str.contains(\"to-be-checked\", case=False, na=False) == True ) &  \n     ( \n         ( food['states'].str.contains(\"to-be-checked\", case=False, na=False)==False ) \n     )][['states', 'states_tags', 'states_fr']]","24b43687":"food[( food['states'].str.contains(\"to-be-checked\", case=False, na=False) == True ) &  \n     ( \n         ( food['states_tags'].str.contains(\"to-be-checked\", case=False, na=False)==False ) \n     )][['states', 'states_tags', 'states_fr']]","057149dc":"food[( food['states_tags'].str.contains(\"to-be-checked\", case=False, na=False) == True ) &  \n     ( \n         ( food['states_fr'].str.contains(\"A v\u00e9rifier\", case=False, na=False)==False ) \n     )][['states', 'states_tags', 'states_fr']]","5335b6b6":"food[( food['states_tags'].str.contains(\"A v\u00e9rifier\", case=False, na=False) == True ) &  \n     ( \n         ( food['states_fr'].str.contains(\"to-be-checked\", case=False, na=False)==False ) \n     )][['states', 'states_tags', 'states_fr']]","036c41af":"food[['product_name', 'main_category_fr', 'main_category']].head(1000)","459851ef":"food[['product_name', 'ingredients_text']].sample(1000)","4cab79cc":"food[food['ingredients_text'].notnull()]","01280938":"food[food['ingredients_text'].notnull()]['ingredients_text'].str.strip().str.split(',').apply(len)","c85d91e9":"features_list = ['code', 'last_modified_t', 'product_name' , 'states_tags', 'main_category_fr','brands','brands_tags', 'nutriscore_grade','energy_100g','sugars_100g','salt_100g','saturated-fat_100g','fiber_100g','proteins_100g','ingredients_from_palm_oil_n','pnns_groups_2','pnns_groups_1','labels_tags','countries_tags','additives_tags','additives_n','ingredients_text','image_url', 'nova_group']\nfood = food[features_list]","c2929470":"def convert_category_to_number(cat):\n    cat_table = {\n        'a' : 5,\n        'b' : 4,\n        'c' : 3,\n        'd' : 2,\n        'e' : 1,\n        'nan' : None,\n    }\n    \n    return (cat_table.get(cat,None))\n\n\nfood_cat = pd.DataFrame(food['nutriscore_grade'].apply(convert_category_to_number))\n\nfood['nutrition_scoring'] = food_cat","edf2bdd4":"food_no_ingredients = pd.DataFrame(food[food['ingredients_text'].notnull()]['ingredients_text'].str.strip().str.split(',').apply(len))\n\nfood['no_ingredients'] = food_no_ingredients","ad957a2d":"pd.set_option('display.max_colwidth', -1)\nfood[food['ingredients_text'].notnull()][['product_name','ingredients_text', 'no_ingredients']].sample(100)","dbbd49b9":"no_ingredients_mean = food[food['no_ingredients'].notnull()]['no_ingredients'].mean()\nno_ingredients_median = food[food['no_ingredients'].notnull()]['no_ingredients'].median()\n","e93c198b":"plt.figure(figsize=(16, 10))\nplt.axvline(no_ingredients_mean, 0, 1, color='red')\nplt.axvline(no_ingredients_median, 0, 1, color='green')\nsns.distplot(food[food['no_ingredients'].notnull()]['no_ingredients'], kde=True)","3bc8c48e":"food[food['no_ingredients'].notnull()]['no_ingredients'].describe()","f9e7ad0e":"food[food['no_ingredients'].notnull()][['product_name', 'no_ingredients', 'ingredients_text', 'additives_n','additives_tags']].sample(100)","99f268d9":"no_ingredients_scoring_bins = [0, 3, 5, 7, 10, np.inf]\nno_ingredients_scoring_labels = [5, 4, 3, 2, 1]\n                                 \nfood['no_ingredients_scoring'] = pd.cut(food['no_ingredients'], bins=no_ingredients_scoring_bins, labels=no_ingredients_scoring_labels)","cb030d18":"food[food['ingredients_text'].notnull()][['product_name','ingredients_text', 'no_ingredients', 'no_ingredients_scoring']].sample(100)","c7d22ae6":"# Pour une application r\u00e9elle, il faudra r\u00e9cup\u00e9rer la liste des additifs noctifs sur une source de donn\u00e9es externe \u00e0 d\u00e9terminer\nadditives_nocive_list = ['e100', 'e101', 'e103','e104', 'e111', 'e124', 'e128', 'e131', 'e132', 'e133', 'e143', 'e171', 'e173', 'e199', 'e214', 'e215', 'e216', 'e217', 'e218', 'e219', 'e240', 'e249', 'e250', 'e251', 'e386', 'e620', 'e621','e622','e623','e624','e625', 'e924', 'e924a', 'e924b', 'e926', 'e950', 'e951', 'e952', 'e952i','e952ii','e952iii','e952iv']\n\nadditives_nocive_list_search_exp = '|'.join(additives_nocive_list)\n\ndef additives_nocive_score_item(additives_tags):\n    additives_tags_list = additives_tags.split(',')\n    \n    additives_tags_list = [item.strip() for item in additives_tags_list]\n    \n    for additive_nocive in additives_nocive_list:\n        if ('en:'+additive_nocive in additives_tags_list):\n            return(1)\n    \n    return(5)\n\nfood['additives_nocive_scoring'] = pd.DataFrame(food[food['additives_tags'].notnull()]['additives_tags'].apply(additives_nocive_score_item))","e512b3ec":"# Ces valeurs de scoring ont \u00e9t\u00e9 remplies par rapport au document Nutri-score_reglement_usage_041019.pdf\n\n\n\nproportions_scoring_bins = {\n    'energy_100g': {\n        'bins': [-np.inf, 335, 1005, 1675, 2345, np.inf],\n        'labels': [5, 4, 3, 2, 1]\n    },\n    \n    'salt_100g': {\n        'bins': [-np.inf, 0.225, 0.675, 1.125, 1.575, np.inf],\n        'labels': [5, 4, 3, 2, 1]\n    },\n    \n    'sugars_100g': {\n        'bins': [-np.inf, 4.5, 13.5, 22.5, 31,np.inf],\n        'labels': [5, 4, 3, 2, 1]\n    },\n\n    'saturated-fat_100g': {\n        'bins': [-np.inf, 1, 3, 5, 7,np.inf],\n        'labels': [5, 4, 3, 2, 1]\n    },  \n    \n    'fiber_100g': {\n        'bins': [-np.inf, 1.9, 2.8, 3.7, 4.7,np.inf],\n        'labels': [1, 2, 3, 4, 5]\n    },  \n    \n    'proteins_100g': {\n        'bins': [-np.inf, 3.2, 4.8, 6.4, 8,np.inf],\n        'labels': [1, 2, 3, 4, 5]\n    },    \n}\n\n\nfor feature_name in proportions_scoring_bins.keys():\n    feature_name_scoring = feature_name + '_scoring'\n    \n    food[feature_name_scoring] = pd.cut(food[feature_name], bins=proportions_scoring_bins[feature_name]['bins'], labels=proportions_scoring_bins[feature_name]['labels'])\n","7cbcf50e":"food.info()","63f995f2":"food.groupby(['energy_100g_scoring'])['energy_100g_scoring'].count().plot(kind='pie')","c31bdeee":"food.groupby(['salt_100g_scoring'])['salt_100g_scoring'].count().plot(kind='pie')","18579835":"food.info()","8889663c":"analyse_donnees_manquantes(food, 0.7)","8c2a09d3":"bio_list = ['en:organic']\nbio_europeen_list = ['en:eu-organic']\nbio_francais_list = ['fr:ab-agriculture-biologique']\nmadeinfrance_list = ['en:made-in-france', 'fr:cuisine-en-france', 'fr:viande-francaise', 'fr:volaille-francaise ']\n\ndef bio_score_item(labels_tags):\n    labels_tags_list = labels_tags.split(',')\n    \n    labels_tags_list = [item.strip() for item in labels_tags_list]\n    \n    for bio_francais in bio_francais_list:\n        if (bio_francais in labels_tags_list):\n            return(5)\n\n    for bio_europeen in bio_europeen_list:\n        if (bio_europeen in labels_tags_list):\n            return(4)\n\n    for bio in bio_list:\n        if (bio in labels_tags_list):\n            return(3)\n\n    for madeinfrance in madeinfrance_list:\n        if (madeinfrance in labels_tags_list):\n            return(2)\n    \n    return(1)\n\nfood['bio_scoring'] = pd.DataFrame(food[food['labels_tags'].notnull()]['labels_tags'].apply(bio_score_item))","8ccd277a":"food[['bio_scoring','labels_tags']].sample(100)","1f93c2c2":"nova_scoring_bins = [-np.inf, 1, 2, 3, 4]\nnova_scoring_labels = [5, 4, 3, 2]\n                                 \nfood['nova_scoring'] = pd.cut(food['nova_group'], bins=nova_scoring_bins, labels=nova_scoring_labels)","cacf99cb":"(food.count()\/food.shape[0]).sort_values(axis=0, ascending=False)","fdc16058":"food.columns","a5bae756":"food.describe()","76bb9294":"food.skew()","59891fb7":"food.hist(bins=50, figsize=(20,15))","fc680366":"from IPython.display import display, Markdown\n\ndef display_freq_table(col_names):\n    for col_name in col_names:    \n        effectifs = food[col_name].value_counts(bins=5)\n\n        modalites = effectifs.index # l'index de effectifs contient les modalit\u00e9s\n\n\n        tab = pd.DataFrame(modalites, columns = [col_name]) # cr\u00e9ation du tableau \u00e0 partir des modalit\u00e9s\n        tab[\"Nombre\"] = effectifs.values\n        tab[\"Frequence\"] = tab[\"Nombre\"] \/ len(food) # len(data) renvoie la taille de l'\u00e9chantillon\n        tab = tab.sort_values(col_name) # tri des valeurs de la variable X (croissant)\n        tab[\"Freq. cumul\"] = tab[\"Frequence\"].cumsum() # cumsum calcule la somme cumul\u00e9e\n        \n        display(Markdown('#### ' + col_name))\n        display(tab)","c1193431":"display_freq_table(['energy_100g','salt_100g','sugars_100g','saturated-fat_100g','fiber_100g','proteins_100g','ingredients_from_palm_oil_n'])","4fecca60":"food.to_csv(FOOD_PATH_FILE_OUTPUT, index=False)","ee736904":"### Ajout de la feature de scoring par rapport au nombre d'ingr\u00e9dients","07f3026c":"#### Ci-dessous on voit que quand labels_tags correspond \u00e0 du bio ou du fran\u00e7ais, il n'y a pas d'occurence de labels_fr qui ne contient pas la m\u00eame information.  Les 2 champs sont \u00e9quivalents.","d6a66925":"# Fonctions d'affichage et de manipulation de donn\u00e9es qui seront utilis\u00e9es dans le notebook","2ce21f8c":"#### Consultation des valeurs des tags des pays pour voir sur quelles valeurs filtrer pour conserver uniquement la France :","96419be3":"## Ajout d'une feature num\u00e9rique de scoring pour le nutrition grade","8463c4e3":"## Nouvelle analyse des donn\u00e9es manquantes, avec uniquement les produits vendus en France","01138ecf":"## Pourcentage des colonnes qui ont 70% de donn\u00e9es manquantes :","cfe0183f":"## Ajout d'une feature de scoring par rapport au nombre d'additifs nocifs\n### Si un additif nocif est pr\u00e9sent : score = 1\n### Si pas d'additif nocif : score = 5","4f9d99e9":"#### => On retiendra donc le champ labels_tags pour identifier les produits bio ou fabriqu\u00e9s en France","f305069e":"## Affichage des champs renseign\u00e9s (non NA) avec leur pourcentage de compl\u00e9tude\nL'objectif est de voir quelles sont les features qui seront les plus fiables en terme de qualit\u00e9 de donn\u00e9e, et quelles sont celles pour lesquelles on devra faire des choix","96d7fed7":"## Suppression des features par rapport \u00e0 l'objectif\n### On commence par rechercher les principes de base d'une alimentation saine\n### Chaque principe de base fera l'objet de features dans le dataset qui seront conserv\u00e9es","b462050e":"#### Les contr\u00f4les ci-dessous et l'inspection visuelle montrent que les 3 champs contiennent le m\u00eame niveau d'information  => on retiendra le champ states_tags","f11c4648":"# Analyse plus d\u00e9taill\u00e9e des donn\u00e9es et des colonnes manquantes","43eafcce":"### Affichage des tableaux de fr\u00e9quence","3c058de5":"### ingredients_text*\ningredients_text                              0.543133  \n","55c29074":"#### Voici les filtres envisageables pour la France dans ces 3 colonnes :","5ee12211":"### Si bio fran\u00e7ais : scoring = 5\n### Si bio europ\u00e9en : scoring = 4\n### Si bio non fran\u00e7ais, non europ\u00e9en : scoring = 3\n### Si produit non bio, mais fabriqu\u00e9 en France: scoring = 2\n### Si non bio : scoring = 1\n\nBio:  \nen:organic  \n\nBio europ\u00e9en:  \nen:eu-organic  \n\nBio fran\u00e7ais:  \nfr:ab-agriculture-biologique\n\nProduits fabriqu\u00e9s en France:  \nen:made-in-france  \nfr:cuisine-en-france  \nfr:viande-francaise  \nfr:volaille-francaise  ","61d2784d":"## Features les plus importantes pour chaque crit\u00e8re d'une alimentation de qualit\u00e9\nPour chaque crit\u00e8re de recherche r\u00e9alis\u00e9e en d\u00e9but de document sur les principes de base d'une alimentation saine, voici les features que l'on pourra appliquer avec leur pourcentage de champs renseign\u00e9s (non NA) :\n\n####  Scoring de la qualit\u00e9 nutritionnelle\nChoisir entre l'une des 2 variables pour le nutrition score (num\u00e9rique) ou grade (lettre) :  \nnutrition-score-fr_100g                    0.623883  \nnutriscore_grade                         0.623883\n\n=> V\u00e9rifier que les variables ont la m\u00eame information 2 \u00e0 2  (boxplot avec en X la valeur group\u00e9e et en Y la valeur continue)\n\nenergy_100g                                0.656166  \nsalt_100g                                  0.635656  \nsodium_100g                                0.635626  \nsugars_100g                                0.635057  \nsaturated-fat_100g                         0.633635  \n\n% de fruits et l\u00e9gumes :\nfruits-vegetables-nuts_100g                0.030181  \n=> Cette donn\u00e9e n'est pas assez renseign\u00e9e.  On ne pourra donc pas se baser dessus.\n\nfiber_100g                                 0.464476  \nproteins_100g                              0.653373  \n\n\nla teneur en sodium correspond \u00e0 la teneur en sel mentionn\u00e9e sur la d\u00e9claration obligatoire divis\u00e9e par 2,5. \n(Source : Nutri-score_reglement_usage_041019.pdf page 14)\n\n=> On construira 1 feature de teneur en sodium \u00e0 partir des 2 features sodium_100g et salt_100g\n\n\n#### Dimension \u00e9cologique\ningredients_from_palm_oil_n                0.543133  \ningredients_that_may_be_from_palm_oil_n    0.543133  \n\nCette dimension \u00e9cologique est facultative car elle n'influe pas sur la qualit\u00e9 nutritionnelle des aliments\n\n#### Consommer un maximum de \u00ab raw food \u00bb (produits bruts non transform\u00e9s) avec une priorit\u00e9 absolue sur les fruits et l\u00e9gumes\nPour reconna\u00eetre les l\u00e9gumes :\n\npnns_groups_2                              0.681004    =  'Legumes', 'Vegetables', 'vegetables' , 'fruits', legumes'  \npnns_groups_1                              0.659092    =  'Fruits and vegetables'  \n\nNombre d'ingr\u00e9dients et nombre d'additifs (plus il y en a, plus le produit est transform\u00e9) :  \ningredients_text                              0.543133  \nadditives_n                                   0.543133  \n\nOn utilisera aussi :  \nnova_group                                    0.269807  \n\n#### privil\u00e9gier le bio fran\u00e7ais  (versus bio industriel intensif dont la charte change d'un pays \u00e0 l'autre)  \nCombiner les 3 features ci-dessous pour reconna\u00eetre le bio et le bio fran\u00e7ais :   \nlabels_tags                                0.356959  \nlabels_fr                                  0.356959  \nlabels                                     0.356573  \n\nPour r\u00e9cup\u00e9rer les produits vendus (et non pas fabriqu\u00e9s) en France :\ncountries_tags                             1.000000  \n\n#### manger des produits de saison :\nOn pourrait construire un tableau contenant les produits par saison de mani\u00e8re \u00e0 proposer des recettes cibl\u00e9es selon la date.\n\nEn r\u00e9cup\u00e9rant par exemple les informations ici :\nhttps:\/\/alimentsain.fr\/aliment\/calendrier-fruits-legumes\/\n\nMais il s'agit d'une source de donn\u00e9es externe hors p\u00e9rim\u00e8tre de ce projet. \n\n\n#### Fruits, aliments riches en fibres, poissons gras (saumon, sardine, maquereau), l\u00e9gumineuses (\u202f: haricots, lentilles, soja, pois entiers ou cass\u00e9s, pois chiches, f\u00e8ves, luzerne ou lupins), fruits secs, viande blanche, huile v\u00e9g\u00e9tale\nInt\u00e9gr\u00e9 en grande partie dans le nutriscore.\n\n#### Alimentation vari\u00e9e et \u00e9quilibr\u00e9e\n\n####  Eviter les additifs alimentaires consid\u00e9r\u00e9s comme nocifs \/ canc\u00e9rig\u00e8nes\nadditives_tags                             0.309386  \nadditives_fr                                  0.309386\n\nadditives_n                                   0.543133\nadditives                                     0.543001\n\n=> Il faudra conserver l'un de ces champs\n\n\nIl sera n\u00e9cessaire de croiser avec une source de donn\u00e9es externe pour identifier les additifs canc\u00e9rig\u00e8nes\n\n#### Eviter les aliments trop sal\u00e9s\nInt\u00e9gr\u00e9 dans le nutriscore\n\n\n####  AJR (Apports Journaliers Recommand\u00e9s) en France :\nLes features concern\u00e9es ne sont pas assez repr\u00e9sent\u00e9es dans les donn\u00e9es fournies.\nOn ne pourra pas les utiliser :\n\nvitamin-b1_100g                            0.008736  \nmagnesium_100g                             0.008279  \nvitamin-e_100g                             0.008035  \nvitamin-b6_100g                            0.007578  \nvitamin-pp_100g                            0.007213  \nvitamin-b9_100g                            0.007009  \nvitamin-b2_100g                            0.006562  \nvitamin-d_100g                             0.006004  \nvitamin-a_100g                             0.005983  \nphosphorus_100g                            0.005719  \nvitamin-b12_100g                           0.005638  \n\n#### Identification des produits\n\nOn pourra \u00e9galementconserver l'url de l'image du produit afin de permettre au client de faire des visuels :  \nimage_url                                  0.533726\n\nAinsi que le code produit, la date de modification, le nom du produit, les marques et la cat\u00e9gorie :\n\ncode                                       1.000000  \nlast_modified_t                            1.000000  \nproduct_name                               0.926930  \nbrands                                     0.877956  \nbrands_tags                                0.877915  \nmain_category_fr                           0.629368  \n\n\nCes champs contiennent l'\u00e9tat de certaines donn\u00e9es (renseign\u00e9es ou non, \u00e0 v\u00e9rifier ou non). \nIl sera inutile de s'en servir pour v\u00e9rifier les donn\u00e9es qui sont renseign\u00e9es ou non (on peut le faire nous m\u00eames en regardant les valeurs effectivement renseign\u00e9es dans le dataframe)\nOn revanche on conservera l'un des 3 champs ci-dessous pour \u00e9carter les valeurs qui contiennent \"en:to-be-checked\"\n\nLa signification des \u00e9tats (states) est document\u00e9e ici:  \nhttps:\/\/en.wiki.openfoodfacts.org\/State#To_be_checked\n\nEn revanche il est indiqu\u00e9 : \"As of March 2019 this state is still under development and evaluation. \"\nIl sera judicieux d'attendre que ce champ soit stabilis\u00e9 avant de l'utiliser\n\nstates                                        1.000000  \nstates_tags                                   1.000000  \nstates_fr                                     1.000000","bdb8bfd1":"## Affichage des colonnes :","1ffbddf7":"## Ajout d'une feature pour le comptage du nombre d'ingr\u00e9dients","b7ddf4a6":"#### Ci-dessous une comparaison entre labels_tags et labels montre que le champ labels est moins standard que les deux autres  : il faudrait filtrer sur SE-EKO-01 ou DE-\u00d6KO ou d\u00e9signer du bio, l\u00e0 o\u00f9 il suffit de filtrer sur \"bio\" ou \"organic\" dans les champs labels_tags ou labels_fr","e7e151d4":"#### Un exam visuel montre qu'on pourra filtrer sur \"to-be-checked\" ou sur \"A v\u00e9rifier\" si on souhaite \u00e9carter les instances de donn\u00e9es qui ne sont pas encore valid\u00e9es. Cela permettra au client de sortir des recettes fond\u00e9es uniquement sur les informations les plus fiables","e18f761c":"# Import du fichier CSV","b5013c47":"nutrition-score-fr_100g 0.623883\nnutrition_grade_fr 0.623883","208a75dc":"### On voit que le s\u00e9parateur des donn\u00e9es semble \u00eatre la tabulation.\nDe plus, dans la documentation des diff\u00e9rents champs qui a \u00e9t\u00e9 fournie, il est indiqu\u00e9 d'utiliser le s\u00e9parateur tabulation et l'encodage UTF-8 :\nhttps:\/\/world.openfoodfacts.org\/data\/data-fields.txt\n\n### On fait donc un chargement en sp\u00e9cifiant le s\u00e9parateur tabulation, avec encodage utf-8\n","a65976ac":"#### Visualisation graphique de la diff\u00e9rence de valeur entre les deux variables  (0 = pas de diff\u00e9rence)","ecdf46d5":"### Une insepection visuelle sur les champs pnns_groups_2 et pnns_groups_1 montre qu'ils ne seront pas utiles pour d\u00e9tecter les l\u00e9gumes non transform\u00e9s \nPar exemple le beurre de cacahu\u00e8te est tagg\u00e9 \"Legumes\"","74acf142":"# S\u00e9lection des features \u00e0 nettoyer et analyser\n\nVu le nombre important de colonnes disponibles, il va falloir faire une s\u00e9lection :    \n* Par rapport \u00e0 la qualit\u00e9 des donn\u00e9es au pourcentage de valeurs renseign\u00e9es  \n* Par rapport \u00e0 l'objectif, c'est \u00e0 dire par rapport aux principes de base d'une alimentation saine  \n","b348daf9":"### Puis on affiche quelques instances de donn\u00e9es :","c0aae3c7":"#### On conservera ce champ afin de compter le nombre d'ingr\u00e9dients :","ac66587d":"### Box plot avec en abscisse la feature nutriscore_grade, et en ordonn\u00e9e la feature nutrition-score-fr_100g","b1c42e3e":"## Affichage des champs renseign\u00e9s (non NA) avec leur pourcentage de compl\u00e9tude\nL'objectif est de voir quelles sont les features qui seront les plus fiables en terme de qualit\u00e9 de donn\u00e9e","43fa4268":"#### A partir de la page 18 du document Nutri-score_reglement_usage_041019.pdf on peut v\u00e9rifier que :  \nA : valeurs entre Min et -1  (sauf pour les eaux qui sont obligatoirement de classe A)  \nB : Min \u00e0 2  \nC : 2 \u00e0 10  \nD : 6 \u00e0 18  \nE : 10 \u00e0 max  \n\nOn se rend compte en lisant la page 18 du PDF(Nutri-score_reglement_usage_041019.pdf) que le nutri grade(A, B, C, D, E) est diff\u00e9rent (d\u00e9cal\u00e9 d'un cran) selon que l'aliment est une boisson ou non.  \n\n**Le champ nutrition grade porte donc plus d'information. C'est lui que l'on retiendra pour la suite. On pourra le transformer en chiffre pour faciliter un scoring**","a44baab2":"labels_tags                                0.356959  \nlabels_fr                                  0.356959  \nlabels                                     0.356573  ","76f288ea":"## Ajout de la feature de scoring par rapport au bio et au bio fran\u00e7ais\nlabels_tags                                0.356959   ","ff29bcc2":"Champs inutiles pour d\u00e9terminer la qualit\u00e9 des aliments (par rapport aux crit\u00e8res indiqu\u00e9s plus haut sur une alimentation de qualit\u00e9) :\n\npackaging                                     78960 non-null object\npackaging_tags                                78961 non-null object\n\n\nemb_codes                                     29306 non-null object\nemb_codes_tags                                29303 non-null object\nfirst_packaging_code_geo                      18803 non-null object\n\ncities                                        23 non-null object\n\nCes 2 champs sont redondants avec countries_tags  (qui lui aussi a le m\u00eame niveau de qualit\u00e9 de donn\u00e9e), comme d\u00e9j\u00e0 vu plus haut\ncountries                                     320492 non-null object\ncountries_fr                                  320492 non-null object\n\nPas assez de valeurs :\nallergens_fr                                  19 non-null object\n\ntraces_tags\ntraces                                        24353 non-null object\ntraces_fr                                     24352 non-null object\n\nno_nutriments                                 0 non-null float64\n\nserving_size                                  211331 non-null object\n\ncocoa_100g                                    948 non-null float64\n\nChamps pas du tout ou tr\u00e8s peu renseign\u00e9s :\ningredients_from_palm_oil                     0 non-null float64\ningredients_that_may_be_from_palm_oil         0 non-null float64\nnutrition_grade_uk                            0 non-null float64\n\nbutyric-acid_100g                             0 non-null float64\ncaproic-acid_100g                             0 non-null float64\ncaprylic-acid_100g                            1 non-null float64\ncapric-acid_100g                              2 non-null float64\nlauric-acid_100g                              4 non-null float64\nmyristic-acid_100g                            1 non-null float64\npalmitic-acid_100g                            1 non-null float64\nstearic-acid_100g                             1 non-null float64\narachidic-acid_100g                           24 non-null float64\nbehenic-acid_100g                             23 non-null float64\nlignoceric-acid_100g                          0 non-null float64\ncerotic-acid_100g                             0 non-null float64\nmontanic-acid_100g                            1 non-null float64\nmelissic-acid_100g                            0 non-null float64\n\nomega-3-fat_100g                              841 non-null float64\nalpha-linolenic-acid_100g                     186 non-null float64\neicosapentaenoic-acid_100g                    38 non-null float64\ndocosahexaenoic-acid_100g                     78 non-null float64\nomega-6-fat_100g                              188 non-null float64\nlinoleic-acid_100g                            149 non-null float64\narachidonic-acid_100g                         8 non-null float64\ngamma-linolenic-acid_100g                     24 non-null float64\ndihomo-gamma-linolenic-acid_100g              23 non-null float64\nomega-9-fat_100g                              21 non-null float64\noleic-acid_100g                               13 non-null float64\nelaidic-acid_100g                             0 non-null float64\ngondoic-acid_100g                             14 non-null float64\nmead-acid_100g                                0 non-null float64\nerucic-acid_100g                              0 non-null float64\nnervonic-acid_100g                            0 non-null float64\n\nsucrose_100g                                  72 non-null float64\nglucose_100g                                  26 non-null float64\nfructose_100g                                 38 non-null float64\nlactose_100g                                  262 non-null float64\nmaltose_100g                                  4 non-null float64\nmaltodextrins_100g                            11 non-null float64\nstarch_100g                                   266 non-null float64\npolyols_100g                                  414 non-null float64\n\ncasein_100g                                   27 non-null float64\nserum-proteins_100g                           16 non-null float64\nnucleotides_100g                              9 non-null float64\n\nbeta-carotene_100g                            34 non-null float64\n\nbiotin_100g                                   330 non-null float64\nsilica_100g                                   38 non-null float64\nbicarbonate_100g                              81 non-null float64\nchloride_100g                                 158 non-null float64\n\nfluoride_100g                                 79 non-null float64\nchromium_100g                                 20 non-null float64\nmolybdenum_100g                               11 non-null float64\n\ncaffeine_100g                                 78 non-null float64\ntaurine_100g                                  29 non-null float64\nph_100g                                       49 non-null float64\n\n\nchlorophyl_100g                               0 non-null float64\nglycemic-index_100g                           0 non-null float64\nwater-hardness_100g                           0 non-null float64\n\ncollagen-meat-protein-ratio_100g              165 non-null float64\n\n\nA la place de ces champs, on se contentera du comptage ingredients_from_palm_oil_n et ingredients_that_may_be_from_palm_oil_n :\ningredients_from_palm_oil_tags                4835 non-null object\ningredients_that_may_be_from_palm_oil_tags    11696 non-null object\n\n\nRedondant avec main_category_fr:\nmain_category                                 84366 non-null object\n","9c027059":"## Note : les features ci-dessous n'ont pas \u00e9t\u00e9 conserv\u00e9es car redondantes ou non utiles au regard du crible des crit\u00e8res qui identifient une alimentation de qualit\u00e9","c572d1d3":"#### On voit que dans une grande majorit\u00e9 des cas, la diff\u00e9rence entre les 2 variables est nulle et qu'elles sont donc \u00e9quivalentes\n#### On conservera donc ingredients_from_palm_oil_n","a89ef3c9":"### On voit que 73.46 % des colonnes ont >=70% de donn\u00e9es manquantes","9dd5778d":"#### Quelques exemples d'\u00e9carts de valeur entre les 2 variables :","d8f7b73b":"# fr.openfoodfacts 2020 :  data cleaning notebook and scoring features construction\n\n## The goal of this note book is to clean and explore data, and select features that are useful in order to determine quality of ingredients.\n## I built scoring features (ending with _scoring) from 1 to 5 :  5 being the best and 1 the worst\n## If you want a higher level exploratory analysis of scoring features I created,  skip directly to the second notebook and my second dataset : fropenfoodfacts scoring features exploration => https:\/\/www.kaggle.com\/franoisboyer\/fropenfoodfacts-scoring-features-exploration\n\n## => **I know that I did not comprehensively explain everything, but feel free to ask my any question you have about this work, I will be happy to explain**\n\n## Note for english users:  this notebook is in French, since I initially did it for a training that is in French  (openclassrooms training), with an old dataset.  I adaptated my work for new 2020 dataset that I downloaded on 12\/02\/2020 on openfoodfacts website.  But I did not translate it yet in English. If you want English translation, drop me a note, I'll do it with pleasure.\n\n","f64bc6c3":"#### NB : les fr\u00e9quences ci-dessus ne sont pas de 100% car il y a des valeurs non renseign\u00e9es","83421a36":"### Un clic sur un ensemble d'url ci-dessus montre qu'elles ne fonctionnent pas : on ne pourra donc pas y r\u00e9cup\u00e9rer des informations additionnelles\nPour aller plus loin, on note que la colonne \"creator\" contient l'origine des donn\u00e9es : on pourra donc remonter jusqu'\u00e0 l'origine de ces donn\u00e9es pour essayer d'avoir plus d'informations si n\u00e9cessaire.\n\nOn ne va pas creuser cet aspect qui risque de prendre beaucoup de temps et qui est hors p\u00e9rim\u00e8tre du projet, et on va se concentrer sur les donn\u00e9es qui sont d\u00e9j\u00e0 \u00e0 notre disposition.","cd3c3c47":"## V\u00e9rfication s'il y a des doublons","220ae8c9":"=> On conservera main_category_fr ","15b67da6":"## Conserver uniquement les features retenues","5f23a888":"## D\u00e9cider de quel champ utiliser pour filtrer sur le pays\n\n3 champs sont disponibles pour cela.\nIls ont le m\u00eame pourcentage de valeurs pr\u00e9sentes :  \ncountries                                     0.999127  \ncountries_tags                                0.999127  \ncountries_fr                                  0.999127  ","411b18a4":"#### Affichage des nutrtion score > -1 :  on voit que ce sont des eaux. C''est pour cela qu'il y a quelques outliers pour le nutrition grade A","730fe5bf":"### Des url sont fournies pour les produits.  Voir si on pourra compl\u00e9ter les donn\u00e9es avec les url fournies :","20ce07f9":"### labels* : d\u00e9cider quelles features conserver \/ combiner","4c50bda0":"## Analyse des features quantitatives","82e5d5aa":"# Inspection g\u00e9n\u00e9rale des donn\u00e9es","19a80d74":"## Affichage des features restantes avec leur pourcentage de compl\u00e9tude","3323603b":"### Comptage du nombre d'ingr\u00e9dients","e347b8dc":"### Huile de palme : d\u00e9cide quelle feature conserver ou combiner\ningredients_from_palm_oil_n                0.543133  \ningredients_that_may_be_from_palm_oil_n    0.543133  ","8cbef2ec":"#### L'inspection visuelle ci-dessous montre que le champ additives ne correspond pas vraiment \u00e0 ce qu'on cherche, et que additives_n refl\u00e8te bien le nombre d'additifs renseign\u00e9s dans les champs additives_tags et additives_fr","5fe9a802":"#### La comparaison des valeurs NA et l'inspection visuelle  montrent que les champs additives_tags et additives_fr sont \u00e9quivalents => On conservera la feature additives_tags, ainsi que additives_n pour le nombre d'additifs","75dfcf64":"## Inspection de quelques lignes du fichier pour avoir un aper\u00e7u visuel du texte brut :","d3dd46cf":"### main_category*\nmain_category_fr                           0.629368  \nmain_category\n\n","ed7a4419":"### Nutriscore : d\u00e9cider quelle feature conserver\nnutrition-score-fr_100g ou nutrition_grade","ec251cce":"####  Scoring de la qualit\u00e9 nutritionnelle\n\nPour faire ce scoring, on peut utiliser :\n* le nutriscore : https:\/\/quoidansmonassiette.fr\/comment-est-calcule-le-nutri-score-logo-nutritionnel\/  \n* un scoring fond\u00e9 sur le nutriscore en int\u00e9grant \u00e9galement les notions d'additifs et de bio, comme ce que fait par exemple l'application Yuka : https:\/\/yuka.io\/questions\/notation-produits-alimentaires\/\n\n#### Dimension \u00e9cologique\nSi on souhaite int\u00e9grer la dimension \u00e9cologique, on pourra prendre en compte la pr\u00e9sence d'huile de palme dans les aliments\n\n#### Consommer un maximum de \u00ab raw food \u00bb (produits bruts non transform\u00e9s) avec une priorit\u00e9 absolue sur les fruits et l\u00e9gumes\nEviter les aliments trop sucr\u00e9s  \nprivil\u00e9gier le bio fran\u00e7ais  (versus bio industriel intensif dont la charte change d'un pays \u00e0 l'autre)  \n\nSource : https:\/\/alimentsain.fr\/  \n\nOn pourra utiliser le nova group pour le degr\u00e9 de transformation des aliments\n\n\n#### manger des produits de saison :\nIndiqu\u00e9s ici : https:\/\/alimentsain.fr\/aliment\/calendrier-fruits-legumes\/\n\n\n#### Fruits, aliments riches en fibres, poissons gras (saumon, sardine, maquereau), l\u00e9gumineuses (\u202f: haricots, lentilles, soja, pois entiers ou cass\u00e9s, pois chiches, f\u00e8ves, luzerne ou lupins), fruits secs, viande blanche, huile v\u00e9g\u00e9tale\n\n#### Alimentation vari\u00e9e et \u00e9quilibr\u00e9e\n\n####  Eviter les additifs alimentaires consid\u00e9r\u00e9s comme nocifs \/ canc\u00e9rig\u00e8nes\n\n#### Eviter les aliments trop sal\u00e9s\n\n#### Selon l'Organisation mondiale de la sant\u00e9, un r\u00e9gime alimentaire sain est compos\u00e9 des \u00e9l\u00e9ments suivants1 :\n\n    des fruits, des l\u00e9gumes, des l\u00e9gumes secs (comme des lentilles et des pois), des fruits secs et des c\u00e9r\u00e9ales compl\u00e8tes (par exemple du ma\u00efs, millet, avoine, bl\u00e9 et riz brun non transform\u00e9s)1\n    au moins 400 g (soit 5 portions) de fruits et l\u00e9gumes par jour, hors pommes de terre, patates douces, manioc et autres racines amylac\u00e9es1\n    moins de 10 % de l\u2019apport \u00e9nergique total provenant de sucres libres, soit l\u2019\u00e9quivalent de 50 g (ou environ 12 cuill\u00e8res \u00e0 caf\u00e9 rases) pour une personne de poids normal consommant environ 2000 calories par jour ; dans l\u2019id\u00e9al, pour pr\u00e9server davantage la sant\u00e9, cette part devrait \u00eatre inf\u00e9rieure \u00e0 5 % des apports \u00e9nergiques totaux1\n    moins de 30 % de l\u2019apport \u00e9nerg\u00e9tique total provenant des mati\u00e8res grasses. Les graisses insatur\u00e9es (poisson, avocat et noix, et les huiles de tournesol, de soja, de colza et d\u2019olive) sont \u00e0 pr\u00e9f\u00e9rer aux graisses satur\u00e9es (viande grasse, beurre, huile de palme et de noix de coco, cr\u00e8me, fromage, beurre clarifi\u00e9 et saindoux) et aux acides gras trans (aliments industriels et viande et produits laitiers provenant des animaux ruminants). Il est propos\u00e9 de r\u00e9duire l\u2019apport en graisses satur\u00e9es \u00e0 moins de 10 % de l\u2019apport \u00e9nerg\u00e9tique total et celui en acides gras trans \u00e0 moins de 1 % ; les acides gras trans sont \u00e0 exclure d'une alimentation saine1.\n    moins de 5 g de sel (soit environ une cuill\u00e8re \u00e0 caf\u00e9) par jour, de pr\u00e9f\u00e9rence iod\u00e91\n\nSource : Wikipedia\n\n\n####  AJR (Apports Journaliers Recommand\u00e9s) en France :\n\nNutriment \tApport journalier recommand\u00e9  \nVitamine A (r\u00e9tinol) \t800 \u03bcg  \nVitamine B1 (thiamine) \t1,1 mg  \nVitamine B2 (riboflavine) \t1,4 mg  \nVitamine B3 (ou PP, niacine) \t16 mg  \nVitamine B5 (acide pantoth\u00e9nique) \t6 mg  \nVitamine B6 (pyridoxine) \t1,4 mg  \nVitamine B8 ou H (biotine) \t50 \u03bcg  \nVitamine B9 (acide folique)(Folacine) \t200 \u03bcg  \nVitamine B12 (cobalamine) \t2,5 \u03bcg  \nVitamine C (acide ascorbique) \t80 mg  \nVitamine D (chol\u00e9calcif\u00e9rol) \t5 \u03bcg  \nVitamine E (tocoph\u00e9rol) \t12 mg  \nVitamine K (anti-AVK) \t75 \u03bcg  \nCalcium \t800 mg  \nFer \t14 mg  \nIode \t150 \u03bcg  \nMagn\u00e9sium \t375 mg  \nPhosphore \t700 mg  \nS\u00e9l\u00e9nium \t55 \u03bcg  \nZinc \t10 mg  \nPotassium \t2 000 mg  \nChlorure \t800 mg  \nCuivre \t1 mg  \nMangan\u00e8se \t2 mg  \nFluorure \t3,5 mg  \nChrome \t40 \u03bcg  \nMolybd\u00e8ne \t50 \u03bcg  \n\nSource: Wikipedia : https:\/\/fr.wikipedia.org\/wiki\/Apports_journaliers_recommand%C3%A9s\n\n","40d764b8":"#### => Quelques doublond d\u00e9tect\u00e9\u00e9.  A supprimer","0f8fbe47":"# Filtre sur les produits vendus en France\nL'objectif \u00e9tant de pr\u00e9parer des donn\u00e9es pour des recettes pour un site fran\u00e7ais, on va faire l'hypoth\u00e8se que les produits de ces recettes sont vendus en France.","311f9d73":"#### Ci-dessous on voit que le rapport entre les deux features est constant :","a40c1d4c":"### Premiers constats :\n#### De nombreux champs ont tr\u00e8s peu de valeurs renseign\u00e9es, voire aucune\n#### Certaines colonnes sont pr\u00e9sentes dans le fichier CSV mais pas dans l'url de description des champs fournie :\n\nallergens 28344 non-null object\n\nallergens_fr 19 non-null object\n\ntraces_fr 24352 non-null object\n\nadditives_fr 154680 non-null object\n\nnutrition_grade_uk (mais 0 valeurs sont pr\u00e9sentes)\n\npnns_groups_1  91513 non-null object\n\npnns_groups_2  94491 non-null object\n\nstates         320726 non-null object\n\nstates_tags    320726 non-null object\n\nstates_fr      320726 non-null object      \n\n","fc903a1f":"### sodium_100g, salt_100g : d\u00e9cider quelle feature conserver ou combiner\nsodium_100g 0.635626  \nsalt_100g 0.635656  ","47b01484":"### additives* : d\u00e9cider quelle feature conserver\n\nadditives_tags                             0.309386  \nadditives_fr                                  0.309386   \n\nadditives_n                                   0.543133  \n","ce79d5c8":"## Ajout de features de scoring par rapport aux proportions\nenergy_100g                                0.656166  \nsalt_100g                               \nsugars_100g                                0.635057  \nsaturated-fat_100g                         0.633635  \n\nfiber_100g                                 0.464476  \nproteins_100g                              0.653373  \n","0e1245ce":"#### nutrition-score-fr_100g : les valeurs sont bien comprises entre -15 et 40 : pas d'anomalie apparente quand le champ est renseign\u00e9","3889c88d":"### L'observation ci-dessous montre que le nombre d'additifs (additives_n) est d\u00e9j\u00e0 inclus dans le nombre d'ingr\u00e9dients (no_ingredients: feature que l'on a cr\u00e9\u00e9e)","6e66524f":"### states* : d\u00e9cider quelle feature conserver\nstates                                        1.000000  \nstates_tags                                   1.000000  \nstates_fr                                     1.000000  \n","b81cb3cb":"### On constate une dysym\u00e9trie tr\u00e8s importante de la plupart des valeurs","25129920":"# Nettoyage des donn\u00e9es pour les features cibles","4ff13ed1":"# See next notebook for exploratory analysis on this clean data we've just saved","f15cc5b1":"# Sauvegarde des donn\u00e9es clean\u00e9es dans un nouveau CSV","ecbf3c1c":"#### On voit que les filtres countries_fr et countries_tags sont \u00e9quivalents car ils renvoient le m\u00eame nombre de lignes\n#### En revanche le filtre sur countries ne permet pas de renvoyer autant de lignes que les autres.\n\n#### Le tableau ci-dessous permet de lister toutes les valeurs qui d\u00e9tectent la France selon le filtre sur countries_fr, mais qui ne la d\u00e9tectent pas selon le filtre sur countries.   \n#### Il permet de voir pourquoi le filtre sur countries renvoie moins de lignes  (c'est parce que dans le champ countries, le nom du pays est traduit dans diff\u00e9rents langages), et il permet aussi de confirmer par une inspection visuelle que les filtres sur countries_tags et countries_fr sont \u00e9quivalents","f5838a0d":"#### L'inspection montre que 2 valeurs sont int\u00e9ressantes pour d\u00e9tecter ce qui est bio et ce qui est fabriqu\u00e9 en France : bio, AB, organic et made-in-france.\n#### Elle montre aussi les attributs suivants qui permettront de reconna\u00eetre un produit bio :\nBio:  \nen:organic  \n\nBio europ\u00e9en:  \nen:eu-organic  \n\nBio fran\u00e7ais:  \nfr:ab-agriculture-biologique\n\nProduits fabriqu\u00e9s en France:  \nen:made-in-france  \nfr:cuisine-en-france  \nfr:viande-francaise  \nfr:volaille-francaise  \n\nProduit contenat des ogm :\nfr:contient-des-ogm  ","ac70654a":"### Ajout de la feature de scoring par rapport au nova group\nLes features de scoring que l'on cr\u00e9e dans ce notebook sont comprises entre 1 et 5,  5 \u00e9tant la meilleure note.\nAlors que le nova group est compris entre 1 et 4,   1 \u00e9tant la meilleure note.\nAvec le code ci-dessous, on cr\u00e9e la feature nova_scoring au m\u00eame format que les autres features de scoring du notebook","aa4db47b":"## Suppression des features par rapport \u00e0 la qualit\u00e9 des donn\u00e9es \n### (suppression des features dont le nombre de donn\u00e9es est inf\u00e9rieur au seuil minimum d\u00e9fini)","ff7f21fd":"#### => On conservera la variable salt_100g qui est plus compl\u00e8te dans 0.00305% des cas (3 valeurs de plus que sodium_100g, les 2 variables sont quasi \u00e9quivalentes)","aebdd404":"###  On v\u00e9rifie que le nombre de lignes int\u00e9gr\u00e9es dans le Dataframe correspond au nombre de lignes du fichier"}}