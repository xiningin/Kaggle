{"cell_type":{"3a22be44":"code","723bcf40":"code","9afac3a6":"code","5191e79a":"code","b412d831":"code","6e58cc4e":"code","f3d74452":"code","5d9a758f":"code","f611532f":"code","e883bb5b":"code","a92e24e7":"code","3e63252b":"code","ccb585c2":"code","d53211f6":"code","1990d01f":"code","09cb044d":"code","0a61e460":"code","633d7b14":"code","cbcc2232":"code","51b76d79":"code","d6b4101d":"code","aabdf0ee":"code","ddae908f":"code","f3c86ec2":"markdown","e4d9ab08":"markdown","4751a26b":"markdown","8b5195da":"markdown"},"source":{"3a22be44":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","723bcf40":"#importing Pandas\nimport pandas as pd\n\n#importing dataframe\ndf = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv',sep=',',engine='python',parse_dates=['date'])\ndf.head()","9afac3a6":"df.info()","5191e79a":"#Data Merging\/Joining\n\ndf1=pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/items.csv',sep=',')\n\ndf2=pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/shops.csv',sep=',')\n\ndf3 = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv',sep=',')\n","b412d831":"merge_1 = pd.merge(df,df1,on='item_id')\n\nmerge_2 = pd.merge(merge_1,df2,on='shop_id')\n\nmerge_3 = pd.merge(merge_2,df3,on='item_category_id')\n\nmerge_3.tail()","6e58cc4e":"merge_3.shape","f3d74452":"#Grouping the Data Monthly\n\ncat = ['date_block_num','shop_id','item_id']\ntest = merge_3.groupby(cat)[['item_cnt_day','item_price']].sum()\ntest","5d9a758f":"#Saving the file\ntest.to_csv('.\/D:\\Kaggle\\Future Sales\\group_data.csv',header=True)","f611532f":"#Reading the Training Data\n\ndata = pd.read_csv('.\/D:\\Kaggle\\Future Sales\\group_data.csv',sep=',')\ndata.head()","e883bb5b":"data.describe()","a92e24e7":"#import numpy and scikit learn models\nimport numpy as np\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import Ridge\n\n#Spliting data into training and target sets\ny = np.array(data['item_cnt_day'])\nX = np.array(data.drop({'item_cnt_day'},axis=1))\nnp.reshape(X,(1609124,4))\nnp.reshape(y,(1609124,1))\n\n\n#Spliting into train and test set\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=26)\n\n","3e63252b":"#Loading Model and Random Search CV\nrd = Ridge(normalize=False)\na_space = np.logspace(-4,10,50)\nparam = {'alpha': a_space}\nmodel = RandomizedSearchCV(rd,param,cv=8)","ccb585c2":"rd2=Ridge(alpha=0.4,normalize=False)\nrd2.fit(X_train,y_train).coef_","d53211f6":"model.fit(X_train,y_train)","1990d01f":"y_pred = model.predict(X_test)","09cb044d":"temp=y_pred-y_test\ntemp","0a61e460":"from sklearn.metrics import mean_squared_error\nerror = mean_squared_error(y_pred,y_test,squared=False)\nprint(error)","633d7b14":"from sklearn.linear_model import Lasso\nlr = Lasso()\nlasso_model = RandomizedSearchCV(lr,param,cv=8)\nlasso_model.fit(X_train,y_train)","cbcc2232":"y_pred2=lasso_model.predict(X_test)\nerror = mean_squared_error(y_pred2,y_test,squared=False)\nprint(error)","51b76d79":"from sklearn.ensemble import AdaBoostRegressor\nada = AdaBoostRegressor(learning_rate=0.2)\nada.fit(X_train,y_train)","d6b4101d":"y_pred3 = ada.predict(X_test)\nerror = mean_squared_error(y_pred3,y_test,squared=False)\nprint(error)","aabdf0ee":"from sklearn.ensemble import GradientBoostingRegressor\ngbr = GradientBoostingRegressor()\ngbr.fit(X_train,y_train)","ddae908f":"y_pred4 = gbr.predict(X_test)\nerror = mean_squared_error(y_pred4,y_test,squared=False)\nprint(error)","f3c86ec2":"Using Lasso Regression","e4d9ab08":"Using Ridge Regression","4751a26b":"Using Gradient Boosting","8b5195da":"Using ADABoosting"}}