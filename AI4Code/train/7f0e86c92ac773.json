{"cell_type":{"594e8ca0":"code","e643ce6e":"code","299cd9a4":"code","77439c5b":"code","0021b141":"code","65fef735":"code","324ee584":"code","e9703184":"code","c52032cf":"code","d07ac736":"code","4a243ea4":"code","03533548":"code","f0886d63":"code","275b32b9":"code","aadfaa7f":"code","5355fb47":"code","060a06cf":"code","52597c53":"code","2aee5460":"markdown","3e8ed676":"markdown","e5f93717":"markdown","72d47969":"markdown","65f8fecb":"markdown"},"source":{"594e8ca0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e643ce6e":"import re\nimport pandas as pd\nimport string\nimport plotly.express as px\nimport matplotlib as plt\nimport seaborn as sns\nfrom collections import Counter\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize \nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer as vad","299cd9a4":"data = pd.read_csv('..\/input\/reddit-wallstreetsbets-posts\/reddit_wsb.csv')\ndata.info()","77439c5b":"data.head()","0021b141":"data.describe()","65fef735":"print(data.groupby(['title']).size().sort_values())","324ee584":"def clean_text(text):\n    '''Make text lowercase, remove text in square brackets,remove links,remove punctuation\n    and remove words containing numbers.'''\n    text = str(text).lower()\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    return text","e9703184":"data_title = data['title'].apply(lambda x:str(x).split())\ntop = Counter([item for sublist in data_title for item in sublist])\ntemp = pd.DataFrame(top.most_common(20))\ntemp.columns = ['Common_words','count']\ntemp.style.background_gradient(cmap='Blues')","c52032cf":"fig = px.bar(temp, x=\"count\", y=\"Common_words\", title='Commmon Words in Selected Text', orientation='h', \n             width=700, height=700,color='Common_words')\nfig.show()","d07ac736":"def remove_stopword(x):\n    return [y for y in x if y not in stopwords.words('english')]\ndata_title = data_title.apply(lambda x:remove_stopword(x))","4a243ea4":"top = Counter([item for sublist in data_title for item in sublist])\ntemp = pd.DataFrame(top.most_common(20))\ntemp = temp.iloc[1:,:]\ntemp.columns = ['Common_words','count']\ntemp.style.background_gradient(cmap='Purples')","03533548":"fig = px.treemap(temp, path=['Common_words'], values='count',title='Tree of Most Common Words')\nfig.show()","f0886d63":"# Proprocessing the data\ndata['title']=data['title'].str.lower()\n# Code to remove the Hashtags from the text\ndata['title']=data['title'].apply(lambda x:re.sub(r'\\B#\\S+','',x))\n# Code to remove the links from the text\ndata['title']=data['title'].apply(lambda x:re.sub(r\"http\\S+\", \"\", x))\n# Code to remove the Special characters from the text \ndata['title']=data['title'].apply(lambda x:' '.join(re.findall(r'\\w+', x)))\n# Code to substitute the multiple spaces with single spaces\ndata['title']=data['title'].apply(lambda x:re.sub(r'\\s+', ' ', x, flags=re.I))\n# Code to remove all the single characters in the text\ndata['title']=data['title'].apply(lambda x:re.sub(r'\\s+[a-zA-Z]\\s+', '', x))\n# Remove the twitter handlers\ndata['title']=data['title'].apply(lambda x:re.sub('@[^\\s]+','',x))","275b32b9":"data=data[['title']]\n","aadfaa7f":"# Invoking the TFIDFVectorizer\ntf_data=TfidfVectorizer()\n# Copying the data into a new dataframe called vader\nvader=data.copy()\n\nsentiment=vad()\n# Making additional columns for sentiment score in the vader dataframe\nsen=['Positive','Negative','Neutral']\nsentiments=[sentiment.polarity_scores(i) for i in vader['title'].values]\nvader['Negative Score']=[i['neg'] for i in sentiments]\nvader['Positive Score']=[i['pos'] for i in sentiments]\nvader['Neutral Score']=[i['neu'] for i in sentiments]\nvader['Compound Score']=[i['compound'] for i in sentiments]\nscore=vader['Compound Score'].values\nt=[]\nfor i in score:\n    if i >=0.05 :\n        t.append('Positive')\n    elif i<=-0.05 :\n        t.append('Negative')\n    else:\n        t.append('Neutral')\nvader['Overall Sentiment']=t","5355fb47":"vader.head()","060a06cf":"fig=px.histogram(data_frame=vader,x='Compound Score',color='Overall Sentiment',template='plotly')\nfig.show()","52597c53":"sns.countplot(vader['Overall Sentiment'])","2aee5460":"**SENTIMENT ANALYSIS**","3e8ed676":"**EDA**","e5f93717":"**MOST COMMON WORDS IN TITLE**","72d47969":"**IMPORTING NECESSETIES**","65f8fecb":"**READING THE DATA**"}}