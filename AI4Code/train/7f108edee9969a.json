{"cell_type":{"a9952033":"code","7e13d5ab":"code","46b2ef7c":"code","e368375d":"code","8c869413":"code","c2f08f05":"code","f05d9845":"code","14beaeb9":"code","7b7a20fb":"code","6926c6f1":"code","32ee7703":"code","fa47a6a9":"code","0d623e8c":"code","a1fd8bc5":"code","1b056b7a":"code","b9d0f3b9":"code","fedede42":"code","af040540":"code","f974844c":"code","cb5d3d8b":"code","7056f67b":"code","87f2281f":"code","c94b060d":"code","097a054e":"code","7e899995":"code","70a2fca9":"code","efe65a50":"code","aef4ecb8":"code","c97d63e4":"code","a532028c":"code","08319769":"code","78ee4277":"code","10a8fc96":"code","fb4fac4f":"markdown","00cf4fc7":"markdown","4275b489":"markdown","fde1cba4":"markdown","1b239f92":"markdown","a8fcbbb7":"markdown","d863ff0f":"markdown","39d48d70":"markdown","ac5e2ba2":"markdown","aeb4ba81":"markdown","0580a13e":"markdown","8674c232":"markdown","deb0606a":"markdown","fb4baa3b":"markdown","51ab12c3":"markdown","4e07720f":"markdown","e846ff3b":"markdown","81bcadc7":"markdown","f71cc1ac":"markdown","a71662e6":"markdown","a2bf80af":"markdown","742c105a":"markdown","285216f3":"markdown","680a451d":"markdown","20a1fe95":"markdown","74519a3d":"markdown","91843750":"markdown","2eb6d395":"markdown","b5635172":"markdown","f8ddbb15":"markdown","c6af4e9c":"markdown","69443355":"markdown"},"source":{"a9952033":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom datetime import datetime\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom itertools import combinations\n\nfrom datetime import datetime\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.tsa.arima_model import ARIMA as ARIMA\nimport statsmodels.api as sm\nimport statsmodels.tsa.api as smt\npd.options.display.float_format = '{:.2f}'.format","7e13d5ab":"data = pd.read_csv('..\/input\/avocado-prices\/avocado.csv')\ndata = data.drop('Unnamed: 0',axis = 1)\ndata.head()","46b2ef7c":"sns.countplot('type',data = data)","e368375d":"df = data.groupby(data['type']).sum()\nplt.pie(df['Total Volume'],data = df,labels = ['CONVENTIONAL','ORGANIC'])\nplt.show()","8c869413":"sns.barplot(x = 'year',y = 'Total Volume',data = data,palette= 'Blues')","c2f08f05":"df = data.drop(columns = ['year','region'])\nsns.heatmap(df.corr())","f05d9845":"sns.factorplot('AveragePrice','region',data=data,hue='year',size=18,aspect=0.7,palette='Blues',join=False)","14beaeb9":"sns.boxplot('year','AveragePrice',data = data)","7b7a20fb":"sns.distplot(data['AveragePrice'])","6926c6f1":"sns.lineplot('Date','AveragePrice',hue = 'year',data = data,)","32ee7703":"sns.lineplot('Date','Total Volume',hue = 'year',data = data)","fa47a6a9":"sns.swarmplot('Date','AveragePrice',data = data,hue = 'type')","0d623e8c":"sns.catplot('year','Total Volume',data = data)","a1fd8bc5":"sns.catplot('year','Total Bags',data = data)","1b056b7a":"def test_stationarity(timeseries):\n    #Determing rolling statistics\n    MA = timeseries.rolling(window=12).mean()\n    MSTD = timeseries.rolling(window=12).std()\n\n    #Plot rolling statistics:\n    plt.figure(figsize=(15,5))\n    orig = plt.plot(timeseries, color='blue',label='Original')\n    mean = plt.plot(MA, color='red', label='Rolling Mean')\n    std = plt.plot(MSTD, color='black', label = 'Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False)\n\n    #Perform Dickey-Fuller test:\n    print('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print(dfoutput)","b9d0f3b9":"def tsplot(y, lags=None, figsize=(12, 7), style='bmh'):\n    if not isinstance(y, pd.Series):\n        y = pd.Series(y)\n        \n    with plt.style.context(style):    \n        fig = plt.figure(figsize=figsize)\n        layout = (2, 2)\n        ts_ax = plt.subplot2grid(layout, (0, 0), colspan=2)\n        acf_ax = plt.subplot2grid(layout, (1, 0))\n        pacf_ax = plt.subplot2grid(layout, (1, 1))\n        \n        y.plot(ax=ts_ax)\n        p_value = sm.tsa.stattools.adfuller(y)[1]\n        ts_ax.set_title('Time Series Analysis Plots\\n Dickey-Fuller: p={0:.5f}'.format(p_value))\n        smt.graphics.plot_acf(y, lags=lags, ax=acf_ax)\n        smt.graphics.plot_pacf(y, lags=lags, ax=pacf_ax)\n        plt.tight_layout()","fedede42":"data = data.drop(columns = ['Total Volume','Total Bags','year','4046','4225','4770','Small Bags','Large Bags','XLarge Bags'])\ndata['Date'] = pd.to_datetime(data['Date'])\ndata = data.set_index('Date')\ndata = data.resample('W').sum()\ndata.head()","af040540":"test_stationarity(data['AveragePrice'])","f974844c":"dec = sm.tsa.seasonal_decompose(data['AveragePrice'],period = 52).plot()\nplt.show()","cb5d3d8b":"data_diff = data['AveragePrice'].diff()\ndata_diff = data_diff.dropna()\ndec = sm.tsa.seasonal_decompose(data_diff,period = 52).plot()\nplt.show()","7056f67b":"test_stationarity(data_diff)","87f2281f":"tsplot(data_diff)","c94b060d":"model = ARIMA(data['AveragePrice'],order = (0,1,0))\nmodel_fit = model.fit()\nprint(model_fit.summary())","097a054e":"data['FORECAST'] = model_fit.predict(start = 130,end = 170,dynamic = True)\ndata[['AveragePrice','FORECAST']].plot(figsize = (10,6))","7e899995":"exp = [data.iloc[i,0] for i in range(130,len(data))]\npred = [data.iloc[i,1] for i in range(130,len(data))]\ndata = data.drop(columns = 'FORECAST')\nerror = mean_absolute_error(exp,pred)\nerror","70a2fca9":"data_diff_seas = data_diff.diff(52)\ndata_diff_seas = data_diff_seas.dropna()\ndec = sm.tsa.seasonal_decompose(data_diff_seas,period = 52).plot()\nplt.show()","efe65a50":"tsplot(data_diff_seas)","aef4ecb8":"model = sm.tsa.statespace.SARIMAX(data['AveragePrice'],order = (0,1,0),seasonal_order = (1,1,0,52))\nresults = model.fit()\nprint(results.summary())","c97d63e4":"data['Forecast'] = results.predict(start = 130,end = 169,dynamic = True)\ndata[['AveragePrice','Forecast']].plot(figsize = (12,8))","a532028c":"exp = [data.iloc[i,0] for i in range(130,len(data))]\npred = [data.iloc[i,1] for i in range(130,len(data))]\n\nerror = mean_absolute_error(exp,pred)\nerror","08319769":"from pandas.tseries.offsets import DateOffset\nfuture_dates = [data.index[-1] + DateOffset(weeks = x)for x in range(0,52)]","78ee4277":"df = pd.DataFrame(index = future_dates[1:],columns = data.columns)","10a8fc96":"forecast = pd.concat([data,df])\nforecast['Forecast'] = results.predict(start = 170,end = 222,dynamic = True)\nforecast[['AveragePrice','Forecast']].plot(figsize = (12,8))","fb4fac4f":"### PERCENTAGE OF EACH TYPE OF AVOCADO","00cf4fc7":"## TIMESERIES ANALYSIS","4275b489":"- ADDING DATES FOR FORECASTING","fde1cba4":"## PREPROCESSING","1b239f92":"### PLOTS WITH RESPECT TO TIME","a8fcbbb7":"- DATA HAS TREND & SEASONALITY \n- DATA HAS AN INCREASING TREND\n- DATA HAS A YEARLY SEASONAL PATTERN \n- DATA IS NOT STATIONARY ","d863ff0f":"- THE MODEL OUPUTS POOR PREDICTIONS\n- MEAN ABSOLUTE ERROR VALUE ALSO HAS A HIGH VALUE\n- THEREFORE,WE REJECT THIS MODEL AND MOVE TOWARDS SEASONAL ARIMA [SARIMA]","39d48d70":"## IMPORT THE DATASET","ac5e2ba2":"### TOTAL VOLUME vs YEAR","aeb4ba81":"# THANK YOU","0580a13e":"## VISUALIZE THE DATASET","8674c232":"## HEATMAP FOR FINDING CORRELATIONS BETWEEN AVERAGEPRICE & OTHER FEATURES","deb0606a":"# DIFFERENCING","fb4baa3b":"-  THE PREDICTIONS OF ARIMA MODEL ARE NOT GOING TO BE GOOD BECAUSE OUR DATA IS SEASONAL\n-  WE HAVE NOT CONSIDERED THE SEASONAL PATTERN IN THIS PATTERN\n-  p = PARTIAL AUTOCORRELATION = 0 -> PLOT SHOWS NO INSIGNIFICANT LAGS\n-  d = DIFFERENCING = 0 -> DIFFERENCING DONE 1 TIME\n-  q = AUTOCORRELATION = 0 -> PLOT SHOWS NO INSIGNIFICANT LAGS","51ab12c3":"### AVOCADO TYPES","4e07720f":"- HERE WE ARE WORKING ON WEEKLY DATA AND OUR SEASONAL PERIOD IS OF 1 YEAR \n- FOR OUR DATA, S = 52 WEEKS , 52 ENTRIES OF OUR DATAFRAME\n- HENCE WE DIFFERENCE BY 52","e846ff3b":"### SOME MORE VISUALIZATIONS","81bcadc7":"## IMPORT THE NECESSARY LIBRARIES","f71cc1ac":"### AVERAGEPRICE ACCORDING TO CITIES ALONG THE YEARS","a71662e6":"- DROPPING THE UNNECESSARY COLUMNS\n- CONVERTING DATES TO DATETIME AND SETTING IT AS INDEX\n- RESAMPLE [GROUPBY] THE DATA ACCORDING TO YOUR DATASET","a2bf80af":"# SARIMAX","742c105a":"### AVERAGEPRICE VARIATION ALONG THE YEARS ","285216f3":"# TIMESERIES ANALYSIS","680a451d":"## SIMILAR TO ARIMA ORDER\n-  P ->(0-2) \n-  D ->1\n-  Q ->(0-2)\n- SELECT ORDER HAVING THE LEAST AIC MODEL VALUE","20a1fe95":"### DISTRIBUTION OF AVERAGEPRICE","74519a3d":"### FUNCTIONS FOR ANALYSIS","91843750":"# FORECASTING","2eb6d395":"## SEASONAL ORDER","b5635172":"- 1st DIFFERENCING TO ELIMINATE THE TREND ","f8ddbb15":"# ARIMA ","c6af4e9c":"- TREND HAS NOW BEEN ELIMINATED BUT SEASONALITY IS PRESENT BUT NOT CLEARLY VISIBLE\n- DICKEY-FULLER TEST TELLS US THAT OUR DATA IS STATIONARY\n- DETERMINATION IF DATA  IS STATIONARY:\n\n- 1] P-VALUE < 0.05\n- 2] TEST STATISTIC < CRITICAL VALUE\n- 3] THE MOVING AVERAGE OF THE DATA IS ALSO NEARLY 0 AND ROTATES AROUND 0","69443355":"- MEAN ABSOLUTE ERROR OF OUR MODEL IS 11.64\n- IT IS BETTER THAN ARIMA MODEL AND CAN BE IMPROVED BY DIFFERENING OR USING THE SAME TECHNIQUES \n- WITH DIFFERENT TRANSFORMATIONS FOR FORECASTING PURPOSE"}}