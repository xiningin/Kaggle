{"cell_type":{"32b4792f":"code","a01b6872":"code","2cc05a4d":"code","c69ddb4f":"code","d683a874":"code","792b74bf":"code","4b3fbe82":"code","f325378c":"code","0e626bf8":"code","74526d6f":"code","e495a688":"code","732dd611":"code","f5d28bb0":"code","3b0235e9":"code","fe04ea6e":"code","c623d10c":"code","a03fa263":"code","29d1cd6f":"code","7ace5ea0":"code","ace9a2a1":"code","b9624b4c":"code","13cc82eb":"markdown","e256270f":"markdown","49ee5d58":"markdown","0e38efba":"markdown","7be48c10":"markdown","f3fb45b4":"markdown","d07b164f":"markdown","e64971fa":"markdown","8b07973f":"markdown","b425b6e8":"markdown","0b1271eb":"markdown","dc3b91f4":"markdown","03631dc2":"markdown","5853c602":"markdown","1f9c3817":"markdown","146dd94d":"markdown","c242e1e0":"markdown","1dec2e7f":"markdown","277253f0":"markdown","5b31226c":"markdown","30a9543d":"markdown"},"source":{"32b4792f":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom random import randrange","a01b6872":"df_train = pd.read_csv('..\/input\/train.csv')\nprint(f'The train set contain {df_train.shape[0]} examples')\ndf_train.head(3)","2cc05a4d":"X_train = df_train.drop('label', axis = 1)\ny_train = df_train['label']","c69ddb4f":"digits = y_train.unique()\nvalues = y_train.value_counts()\n\nplt.bar(digits, values)\nplt.title('Train set')\nplt.xlabel('Digit')\nplt.ylabel('Examples count')\nplt.xticks(np.arange(len(digits)))\nplt.show()","d683a874":"X_train = X_train \/ 255","792b74bf":"X_train = X_train.values.reshape(-1,28,28,1)","4b3fbe82":"rnd_digit = randrange(X_train.shape[0])\nimg = X_train[rnd_digit][:,:,0]\nlabel = y_train[rnd_digit]\nplt.title(f'This is number {label}')\nplt.axis('off')\nplt.imshow(img, cmap=plt.cm.binary)","f325378c":"y_train = to_categorical(y_train)\ny_train.shape","0e626bf8":"X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = 0.2)\nX_val, X_test, y_val, y_test = train_test_split(X_val, y_val, test_size = 0.5)","74526d6f":"train_datagen = ImageDataGenerator(\n        rotation_range=10,\n        zoom_range = 0.1, \n        width_shift_range=0.1,\n        height_shift_range=0.1,\n        shear_range=0.1,\n        )\n\ntrain_datagen.fit(X_train)","e495a688":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(16, (3,3), activation='relu', padding='same', input_shape=(28, 28, 1)),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Conv2D(16, (3,3), activation='relu', padding='same'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.2),\n    \n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', padding='same'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', padding='same'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.2),\n    \n    tf.keras.layers.Conv2D(64, (3,3), activation='relu', padding='same'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu', padding='same'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.2),\n    \n    tf.keras.layers.Flatten(),\n    \n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    \n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=Adam(0.0001),\n              metrics=['acc'])","732dd611":"model.summary()","f5d28bb0":"batch_size = 32\nhistory = model.fit_generator(\n        train_datagen.flow(X_train, y_train, batch_size=batch_size),\n        epochs=20,\n        validation_data=(X_val, y_val),\n        )","3b0235e9":"plt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","fe04ea6e":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","c623d10c":"model.evaluate(X_test, y_test)","a03fa263":"y_pred = model.predict(X_test)\ny_pred_cl = np.argmax(y_pred, axis = 1)\ny_true = np.argmax(y_test, axis = 1)\n\nconfusion_matrix(y_true, y_pred_cl)","29d1cd6f":"test = pd.read_csv('..\/input\/test.csv')\ntest = test \/ 255\ntest = test.values.reshape(-1,28,28,1)\nprint(f'The test set contain {test.shape[0]} examples')","7ace5ea0":"pred = model.predict(test)\npred = np.argmax(pred, axis = 1)","ace9a2a1":"pred_csv = pd.DataFrame(pred, columns= ['Label'])\npred_csv.index += 1\npred_csv.head()","b9624b4c":"pred_csv.to_csv('submission.csv', index_label='ImageId' )","13cc82eb":"## Digit Recognizer CNN | Keras\n*   Initial step\n*   Data preparation\n*   Create the model.\n*   Evaluate the model\n*   Make a submission.","e256270f":"Let's plot the training set. Looks like we have a balanced data set.","49ee5d58":"Explore the model.","0e38efba":"## Make a submission.\n\nLoad test data, normalize and reshape it.","7be48c10":"Now we need convert our label to \"one hot vector\". Print the result to make sure everything is right.","f3fb45b4":"### Training\n\nBatch size is another hyperparameter to tune.\nFinally, train the model.","d07b164f":"Now we can plot random images with the label. Just rerun the cell and explore different training examples.","e64971fa":"After finishing playing with model and we are happy with achieved accuracy, evaluate your model on the test set.","8b07973f":"## Create the model.\n\nOur playground. Feel free to try a different variation","b425b6e8":"Good job.\n\nLet's look at the confusion matrix.","0b1271eb":"Create dataframe","dc3b91f4":"Make prediction on test.csv","03631dc2":"## **Initial step**\n\nBasic initial step import required libraries\n\n\n*   matplotlib - plot images and results\n*   pandas - reading and manipulating data\n*   numpy - linear algebra\n*   tensorflow - self-explanatory\n*   sklearn - only for data splitting and confusion matrix\n*   randrange - for selecting random images","5853c602":"## Evaluate the model\n\nPlot our accuracy and loss for understanding problems: \"high bias\" and \"high variance\".\n\nInteresting, in this dataset we don't need BatchNorm or Dropout.","1f9c3817":"Save dataframe as a csv file","146dd94d":"Split the data into three sets.\n\nSince data it significantly small we will split to:\n\ntrain - 80%\nvalid - 10%\ntest - 10%","c242e1e0":"Normalize training examples.\n\nNormalization makes training more efficient. Why this happening? I will write a post later.","1dec2e7f":"Reshape training set.\n\nNow it will be 28x28 image.","277253f0":"Looks like we have in first column labels and everything else it's an unrolled 28x28 image.\nExtract Labels to different data.","5b31226c":"### Data augmentation. \n\nWhen working with images is always not enough data. With Keras we can augment it in the fly using ImageDataGenerator","30a9543d":"## Data preparation\n\nLoad the training data with pandas and explore it"}}