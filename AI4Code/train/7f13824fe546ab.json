{"cell_type":{"90bc8c38":"code","48e83358":"code","dd6ba1a0":"code","eb31ed92":"code","0f0df9ac":"code","cd3bcd61":"code","4580dfb3":"code","e99ef676":"code","a40523cf":"code","d8939f93":"code","b620c8c7":"code","17e468bd":"code","78cba2f8":"code","ce62fe59":"code","73148172":"code","3ea5dd84":"code","7b6e1756":"code","640aad7e":"code","7b3ba65e":"code","f2fa2b9c":"code","2e3ccdaf":"code","a6a83dcc":"code","033b79a4":"code","180b8a42":"code","7bdac72a":"code","362d316f":"code","90bf5c8f":"code","58aab6df":"markdown","21a622f1":"markdown","08b334d0":"markdown","c350ec2e":"markdown","cf9d1715":"markdown","4fb0439e":"markdown","ada06704":"markdown","ef5a9be6":"markdown","f21d3403":"markdown","9e892dc2":"markdown","3363df6d":"markdown","8da237bd":"markdown","681d54d6":"markdown","66dad324":"markdown"},"source":{"90bc8c38":"import numpy as np\nimport os\nimport pandas as pd\n\n#ploting libs\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\nimport plotly.express as px\n\n#machine learning libs\nimport tensorflow as tf\nfrom tensorflow.compat.v1.keras.layers import CuDNNLSTM, CuDNNGRU \nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.layers import Dropout, Dense,Conv1D, MaxPooling1D, Bidirectional\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom sklearn.model_selection import train_test_split","48e83358":"data_dir = '\/kaggle\/input\/stanford-covid-vaccine\/'\ntrain = pd.read_json(data_dir + 'train.json', lines=True)\ntest = pd.read_json(data_dir + 'test.json', lines=True)\nsample_submit = pd.read_csv(data_dir + 'sample_submission.csv')","dd6ba1a0":"train.head()","eb31ed92":"test.head()","0f0df9ac":"sample_submit.head()","cd3bcd61":"# we could see the below columns are the once to be predicted\npred_cols = ['reactivity', 'deg_Mg_pH10', 'deg_Mg_50C', 'deg_pH10', 'deg_50C']","4580dfb3":"#the metrics which is used to calculate the score\ndef MCRMSE(y_true, y_pred):\n    colwise_mse = tf.reduce_mean(tf.square(y_true - y_pred), axis=1)\n    return tf.reduce_mean(tf.sqrt(colwise_mse), axis=1)","e99ef676":"# converting the pandas list to the array of size (0,2,1)\ndef pandas_list_to_array(df):\n    \"\"\"\n    Input: dataframe of shape (x, y), containing list of length l\n    Return: np.array of shape (x, l, y)\n    \"\"\"\n    \n    return np.transpose(\n        np.array(df.values.tolist()),\n        (0, 2, 1)\n    )","a40523cf":"#getting the equivalent token value for the three columns\ndef preprocess_inputs(df, token2int, cols=['sequence', 'structure', 'predicted_loop_type']):\n    return pandas_list_to_array(\n        df[cols].applymap(lambda seq: [token2int[x] for x in seq])\n    )","d8939f93":"# this toke2int contains the mapped dict of the charaters\ntoken2int = {x:i for i, x in enumerate('().ACGUBEHIMSX')}\n\ntrain_inputs = preprocess_inputs(train, token2int)\ntrain_labels = pandas_list_to_array(train[pred_cols])","b620c8c7":"# spliting up of data to train and test\nx_train, x_val, y_train, y_val = train_test_split(\n    train_inputs, train_labels, test_size=.1, random_state=38\n)","17e468bd":"a = train[\"signal_to_noise\"].plot.kde(legend=True,color=\"#F8C471\",linewidth=2.8)\nplt.legend(fontsize=10)\nplt.xlabel(\"signal to noise\")","78cba2f8":"a = sns.countplot(data=train,x=\"SN_filter\",color=\"blue\",palette=[\"#F5B041\",\"#58D68D\"],dodge=False)\nvalue = dict(train[\"SN_filter\"].value_counts())\nfor index, row in value.items():\n    a.text(index,row, row, color='black', ha=\"center\")\n\nplt.title(\"SN filter\")","ce62fe59":"#defining the gru layer\ndef CUDNNGgru_layer(hidden_dim):\n    return Bidirectional(\n        CuDNNGRU(hidden_dim,return_sequences=True)\n    )","73148172":"#defining the CuDNNLSTM layer\ndef CuDNNlstm_layer(hidden_dim):\n    return Bidirectional(\n                                CuDNNLSTM(hidden_dim,\n                                return_sequences=True))","3ea5dd84":"# defining the model\ndef build_model(CuDNNlstm=True,seq_len=107, pred_len=68, dropout=0.5,embed_dim=100, hidden_dim=128):\n    \n    inputs = tf.keras.layers.Input(shape=(seq_len, 3))\n\n    embed = tf.keras.layers.Embedding(input_dim=len(token2int), output_dim=embed_dim)(inputs)\n    reshaped = tf.reshape(\n        embed, shape=(-1, embed.shape[1],  embed.shape[2] * embed.shape[3]))\n    \n    reshaped = tf.keras.layers.SpatialDropout1D(.2)(reshaped)\n    \n    if CuDNNlstm:\n        hidden = CuDNNlstm_layer(hidden_dim)(reshaped)\n        hidden = CuDNNlstm_layer(hidden_dim)(hidden)\n        reshaped = tf.keras.layers.SpatialDropout1D(.2)(hidden)\n        hidden = CuDNNlstm_layer(hidden_dim)(reshaped)\n        hidden = CuDNNlstm_layer(hidden_dim)(hidden)\n        reshaped = tf.keras.layers.SpatialDropout1D(.2)(hidden)\n        hidden = CuDNNlstm_layer(hidden_dim)(reshaped)\n        \n    else:\n        hidden = CUDNNGgru_layer(hidden_dim)(reshaped)\n        hidden = CUDNNGgru_layer(hidden_dim)(hidden)\n        reshaped = tf.keras.layers.SpatialDropout1D(.2)(hidden)\n        hidden = CUDNNGgru_layer(hidden_dim)(reshaped)\n        hidden = CUDNNGgru_layer(hidden_dim)(hidden)\n        reshaped = tf.keras.layers.SpatialDropout1D(.2)(hidden)\n        hidden = CUDNNGgru_layer(hidden_dim)(reshaped)\n    \n    #only making predictions on the first part of each sequence\n    truncated = hidden[:, :pred_len]\n    \n    out = tf.keras.layers.Dense(5, activation='linear')(truncated)\n\n    model = tf.keras.Model(inputs=inputs, outputs=out)\n    \n    model.compile(optimizer = Adam(learning_rate=0.001,amsgrad=True), loss=MCRMSE)\n    \n    return model","7b6e1756":"#building the CUDNNlstm model\nCuDNNlstm_model = build_model()\nCuDNNlstm_model.summary()","640aad7e":"#building the CUDNNGgru model\nCUDNNgru_model = build_model(CuDNNlstm=False)\nCUDNNgru_model.summary()","7b3ba65e":"CuDNNlstm_history = CuDNNlstm_model.fit(\n    x_train, y_train,\n    validation_data=(x_val, y_val),\n    batch_size=32,\n    epochs=100,\n    verbose=2,\n    callbacks=[\n        tf.keras.callbacks.ReduceLROnPlateau(patience=5),\n        tf.keras.callbacks.ModelCheckpoint('CuDNNlstm_model.h5')\n    ]\n)","f2fa2b9c":"CUDNNgru_history = CUDNNgru_model.fit(\n    x_train, y_train,\n    validation_data=(x_val, y_val),\n    batch_size=64,\n    epochs=100,\n    verbose=2,\n    callbacks=[\n        tf.keras.callbacks.ReduceLROnPlateau(patience=5),\n        tf.keras.callbacks.ModelCheckpoint('CUDNNGgru_model.h5')\n    ]\n)","2e3ccdaf":"fig = px.line(\n    CUDNNgru_history.history, y=['loss', 'val_loss'],\n    labels={'index': 'epoch', 'value': 'MCRMSE'}, \n    title='Training Loss -  CUDNNgru')\nfig.show()","a6a83dcc":"fig = px.line(\n    CuDNNlstm_history.history, y=['loss', 'val_loss'],\n    labels={'index': 'epoch', 'value': 'MCRMSE'}, \n    title='Training Loss - CuDNNlstm')\nfig.show()","033b79a4":"#seperating the test set based on the length\npublic_df = test.query(\"seq_length == 107\")\nprivate_df = test.query(\"seq_length == 130\")\n\npublic_inputs = preprocess_inputs(public_df, token2int)\nprivate_inputs = preprocess_inputs(private_df, token2int)","180b8a42":"#seperate model for public and private\nmodel_public = build_model(seq_len=107, pred_len=107)\nmodel_private = build_model(seq_len=130, pred_len=130)\n\nmodel_public.load_weights('CuDNNlstm_model.h5')\nmodel_private.load_weights('CuDNNlstm_model.h5')","7bdac72a":"#making the predictions on public and private inputs\npublic_preds = model_public.predict(public_inputs)\nprivate_preds = model_private.predict(private_inputs)","362d316f":"# getting the predicted values\npreds_ls = []\n\nfor df, preds in [(public_df, public_preds), (private_df, private_preds)]:\n    for i, uid in enumerate(df.id):\n        single_pred = preds[i]\n\n        single_df = pd.DataFrame(single_pred, columns=pred_cols)\n        single_df['id_seqpos'] = [f'{uid}_{x}' for x in range(single_df.shape[0])]\n\n        preds_ls.append(single_df)\n\npreds_df = pd.concat(preds_ls)\npreds_df.head()","90bf5c8f":"# creating the submission csv\nsubmission = sample_submit[['id_seqpos']].merge(preds_df, on=['id_seqpos'])\nsubmission.to_csv('submission.csv', index=False)","58aab6df":"#  <h2 style=\"color:#9B59B6\"> 3. Model Training <\/h2> <a id=\"4\"><\/a>","21a622f1":"## distribution of signal to noise","08b334d0":"# <h2 style=\"color:#9B59B6\"> 4. Model Result <\/h2> <a id=\"5\"><\/a>","c350ec2e":"## Importing the required libriries","cf9d1715":"## Model and submission reference is take from @tuckerarrants check his notebook <a herf=\"https:\/\/www.kaggle.com\/tuckerarrants\/openvaccine-gru-lstm#Training\">here<\/a>","4fb0439e":"# <h2 style=\"color:#9B59B6\"> 1. Preprocessing the Data <\/h2> <a id=\"1\"><\/a>","ada06704":"# <h2 style=\"color:#9B59B6\"> What's in the dataset <\/h2> <a id=\"1\"><\/a>","ef5a9be6":"## <h2 style=\"color:#F39C12\"> Contents of Kernal <a id=home><\/a>\n \n(click to navigate)    \n\n\n## [0. What's in the dataset](#1)    \n## [1. Preprocessing of data](#2) \n## [2. Model Building](#3) \n## [3. Model Training](#4)    \n## [4. Model Result](#5) \n## [5. Submission](#6) \n\n\n\n## <span style=\"color:color:#34495E\"> Feel free to comment your thoughts and suggestions are welcomed!! <\/span>","f21d3403":"## Importing the files","9e892dc2":"## the type of filters","3363df6d":"# <strong style=\"color:#8E44AD\"> CuDNNLSTM<\/strong> vs <strong style=\"color:#F39C12\"> GRU <\/strong> - Model Comparison  \n\nThis kernal will show you the difference between CuDNNLSTM and CuDNNGRU","8da237bd":"#  <h2 style=\"color:#9B59B6\"> 5. Submission <\/h2> <a id=\"6\"><\/a>","681d54d6":"<h3 style=\"color:#34495E\"> \u2728\u2728 Thanks for reading my kernal out till the end \u2728\u2728 <\/h3>\n\n<h3 style=\"color:#34495E\"> Let's me know what can be improved in the comments <br><br> If you liked it please do consider <span style=\"color:#2E86C1\">upvoting!!\ud83d\ude0e <\/span> <br><br> Thanks in advance \ud83d\ude0a\ud83d\ude0a <\/h3>","66dad324":"#  <h2 style=\"color:#9B59B6\"> 2. Model Building <\/h2> <a id=\"3\"><\/a>"}}