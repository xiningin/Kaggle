{"cell_type":{"085e9ae8":"code","f8483ceb":"code","cbfd5233":"code","a779931a":"code","8821bec0":"code","a1ad28cb":"code","45ed095d":"code","63f99409":"code","9fc2f6fb":"code","384a9402":"code","b48a4814":"code","38ddc7a7":"code","bc4527fd":"code","4a4e8fb3":"code","87b5f3c4":"code","b8456088":"code","41b42723":"code","62e80ba6":"code","b56bef60":"code","13ed3996":"code","87170b6a":"code","c3260bff":"code","21580785":"code","130d4a0c":"code","cda623e1":"code","9d79313c":"code","e2ad7e9f":"code","230c0908":"markdown","0868f3dd":"markdown","e5b38ebb":"markdown","051f6bb0":"markdown","69c6148d":"markdown","0f472804":"markdown","8331356d":"markdown"},"source":{"085e9ae8":"import numpy as np\nimport pandas as pd\n\nimport urllib.request\nfrom PIL import Image\nimport pickle\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier, VotingClassifier\nfrom sklearn.pipeline import Pipeline\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier","f8483ceb":"df = pd.read_csv(\"h..\/input\/how-long-would-you-stay-data-ft-apr-2021\/hospital_train.csv\", index_col=0)","cbfd5233":"df","a779931a":"class HospitalEncoder:\n\n    @staticmethod\n    def encode_admission(x):\n        data = {'Urgent': 2, 'Trauma': 1, 'Emergency': 3}\n        return data[x]\n\n    @staticmethod\n    def encode_severity(x):\n        data = {'Moderate': 2, 'Extreme': 3, 'Minor': 1}\n        return data[x]\n\n    @staticmethod\n    def encode_age(x):\n        data = {'21-30': 2, '51-60': 5, '71-80': 7, '11-20': 1, \n        '31-40': 3, '0-10': 0, '61-70': 6, '41-50': 4, '81-90': 4, '91-100': 9}\n        return data[x]","8821bec0":"# Quitamos las columnas no relevantes\nfiltered = df.drop(['1', '3', '4', '7', '8','9', '10', '11','14','16'], axis=1)\n\n# Quitamos las filas donde la columna 9 tiene valor nan (33 registros)\n#filtered.dropna(inplace=True)\n\n# Aplicamos los encoders\nfiltered['12'] = filtered['12'].apply(HospitalEncoder.encode_admission)\nfiltered['13'] = filtered['13'].apply(HospitalEncoder.encode_severity)\nfiltered['15'] = filtered['15'].apply(HospitalEncoder.encode_age)\n\n# Get dummies\nfeatures = filtered[['2', '6']]\nfeatures = pd.get_dummies(features)\nfiltered.drop(['2', '6'], axis=1, inplace=True)\ntrain = pd.concat([filtered, features], axis=1)\n\n# Creamos X e y\nX = np.array(train.drop(['17'], axis=1))\ny = np.array(train['17'])\n\n# Conjuntos train\/test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 42)","a1ad28cb":"grad = Pipeline(steps=[\n    ('inputer', SimpleImputer()),\n    ('standard', StandardScaler()),\n    ('grad', GradientBoostingClassifier())\n])\n\ngrad_params = {\n    'grad__random_state': [42, 1, 10, 18122003],\n    'grad__loss': ['deviance', 'exponential'],\n    'grad__learning_rate': [0.1, 0.01, 0.05, 0.2],\n    'grad__n_estimators': [100, 200, 500, 1000],\n    'grad__min_samples_split': [2, 3, 5],\n    'grad__min_samples_leaf': [1, 2],\n    'grad__max_depth': [2, 3, 4, 5]\n}\n\ngrid = GridSearchCV(grad,\n                    grad_params,\n                    cv=5,\n                    scoring='accuracy',\n                    verbose=10)","45ed095d":"grad = Pipeline(steps=[\n    ('inputer', SimpleImputer()),\n    ('grad', GradientBoostingClassifier(learning_rate=0.01, n_estimators=200, verbose=10))\n])","63f99409":"grad.fit(X_train, y_train)\n\ny_pred = grad.predict(X_test)\nprint('Test:', accuracy_score(y_test, y_pred))\ny_pred_train = grad.predict(X_train)\nprint('Train:', accuracy_score(y_train, y_pred_train))","9fc2f6fb":"\nprint('Test:', accuracy_score(y_test, y_pred))\n\nprint('Train:', accuracy_score(y_train, y_pred_train))","384a9402":"import pickle\n\nfilename = 'hospital_grad_final.model'\n\nwith open(filename, 'wb') as archivo_salida:\n    pickle.dump(grad, archivo_salida)","b48a4814":"wildcat = Pipeline(steps=[\n    ('inputer', SimpleImputer()),\n    ('grad', CatBoostClassifier(depth=6, learning_rate=0.1, l2_leaf_reg=5, iterations=1200))\n])","38ddc7a7":"wildcat.fit(X_train, y_train)\ny_pred = wildcat.predict(X_test)\nprint(accuracy_score(y_test, y_pred))","bc4527fd":"import pickle\n\nfilename = 'hospital_cat_final.model'\n\nwith open(filename, 'wb') as archivo_salida:\n    pickle.dump(wildcat, archivo_salida)","4a4e8fb3":"xgb = Pipeline(steps=[\n    ('inputer', SimpleImputer()),\n    ('grad', XGBClassifier(eta=0.1, min_child_weight=10))\n])","87b5f3c4":"xgb.fit(X_train, y_train)\ny_pred = wildcat.predict(X_test)\nprint(accuracy_score(y_test, y_pred))","b8456088":"forest_gump = Pipeline(steps=[\n    ('inputer', SimpleImputer()),\n    ('rfc', RandomForestClassifier(n_estimators=100, min_samples_split=10, random_state=42, min_samples_leaf=2, max_depth=20))\n])","41b42723":"forest_gump.fit(X_train, y_train)\ny_pred = forest_gump.predict(X_test)\nprint(accuracy_score(y_test, y_pred))","62e80ba6":"estimators = [('grad', grad), ('cat', wildcat), ('xgb', xgb)]\nvoting = VotingClassifier(estimators=estimators, voting='soft')","b56bef60":"voting.fit(X_train, y_train)\ny_pred = voting.predict(X_test)\nprint(accuracy_score(y_test, y_pred))","13ed3996":"def chequeator(df_to_submit):\n    \"\"\"\n    Esta funci\u00f3n se asegura de que tu submission tenga la forma requerida por Kaggle.\n    \n    Si es as\u00ed, se guardar\u00e1 el dataframe en un `csv` y estar\u00e1 listo para subir a Kaggle.\n    \n    Si no, LEE EL MENSAJE Y HAZLE CASO.\n    \n    Si a\u00fan no:\n    - apaga tu ordenador, \n    - date una vuelta, \n    - enciendelo otra vez, \n    - abre este notebook y \n    - leelo todo de nuevo. \n    Todos nos merecemos una segunda oportunidad. Tambi\u00e9n t\u00fa.\n    \"\"\"\n    sample = pd.read_csv(\"..\/input\/how-long-would-you-stay-data-ft-apr-2021\/sample_submission.csv\")\n    if df_to_submit.shape == sample.shape:\n        if df_to_submit.columns.all() == sample.columns.all():\n            if df_to_submit.id.all() == sample.id.all():\n                print(\"You're ready to submit!\")\n                df_to_submit.to_csv(\"submission.csv\", index = False) #muy importante el index = False\n                urllib.request.urlretrieve(\"https:\/\/i.kym-cdn.com\/photos\/images\/facebook\/000\/747\/556\/27a.jpg\", \"gfg.png\")     \n                img = Image.open(\"gfg.png\")\n                img.show()   \n            else:\n                print(\"Check the ids and try again\")\n        else:\n            print(\"Check the names of the columns and try again\")\n    else:\n        print(\"Check the number of rows and\/or columns and try again\")\n        print(\"\\nMensaje secreto de Clara: No me puedo creer que despu\u00e9s de todo este notebook hayas hecho alg\u00fan cambio en las filas de `diamonds_test.csv`. Lloro.\")\n\nfilepath = '..\/input\/how-long-would-you-stay-data-ft-apr-2021\/hospital_test.csv'\n\ndef prepare_test(model, filepath):\n    df = pd.read_csv(filepath, index_col=0)\n    # Operaciones de transformaci\u00f3n.\n    # Quitamos las columnas no relevantes\n    filtered = df.drop(['1', '3', '4', '7', '8', '9','10', '11', '14','16'], axis=1)\n\n    # Aplicamos los encoders\n    filtered['12'] = filtered['12'].apply(HospitalEncoder.encode_admission)\n    filtered['13'] = filtered['13'].apply(HospitalEncoder.encode_severity)\n    filtered['15'] = filtered['15'].apply(HospitalEncoder.encode_age)\n\n    # Get dummies\n    features = filtered[['2', '6']]\n    features = pd.get_dummies(features)\n    filtered.drop(['2', '6'], axis=1, inplace=True)\n    test = pd.concat([filtered, features], axis=1)\n\n    # Creamos X\n    X = np.array(test)\n\n    # Cambiamos Nan por la media\n    sim = SimpleImputer()\n    X = sim.fit_transform(X)\n\n    # Cogemos \u00edndice de sample_submission.csv\n    sample = pd.read_csv('..\/input\/how-long-would-you-stay-data-ft-apr-2021\/sample_submission.csv')\n\n    # Preparamos dataframe de test.\n    predictions_submit = model.predict(X)\n    submission = pd.DataFrame({\"id\": sample.id, \"days\": predictions_submit.ravel()})\n    \n    return submission","87170b6a":"grad.fit(X, y)\nsubmission = prepare_test(grad, filepath)\nchequeator(submission)","c3260bff":"submission = prepare_test(grad, filepath)\nchequeator(submission)","21580785":"wildcat.fit(X, y)\nsubmission = prepare_test(wildcat, filepath)\nchequeator(submission)","130d4a0c":"submission = prepare_test(wildcat, filepath)\nchequeator(submission)","cda623e1":"xgb.fit(X, y)\nsubmission = prepare_test(xgb, filepath)\nchequeator(submission)","9d79313c":"forest_gump.fit(X, y)\nsubmission = prepare_test(forest_gump, filepath)\nchequeator(submission)","e2ad7e9f":"voting.fit(X, y)\nsubmission = prepare_test(voting, filepath)\nchequeator(submission)","230c0908":"## 6. Voting Classifier","0868f3dd":"## 7. Final Transformations","e5b38ebb":"## 3. XGBoosting","051f6bb0":"## 1. Gradient Boosting","69c6148d":"# Base Transformations","0f472804":"## 4. Random Forest","8331356d":"## 2. Cat Boosting"}}