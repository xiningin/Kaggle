{"cell_type":{"65a07244":"code","38ae3f04":"code","c9aea6e6":"code","902dde32":"code","3cf72d9a":"code","e8c88c96":"code","2e7af556":"code","2e4e1e81":"code","62a7ffd5":"code","dcd2e2fe":"code","10fdd7ec":"code","1dcc4bac":"code","32d573be":"code","bfdb618c":"code","754fe286":"code","cc9a15d6":"code","c2fd2e25":"code","80e7cf47":"code","a62c4a26":"code","a33ebdc7":"code","3c0d8dd4":"markdown","4a8010a7":"markdown","dd594529":"markdown","964c32cc":"markdown","bd875f15":"markdown","382a0c89":"markdown","e9069c06":"markdown","40d1cf23":"markdown","dc4562c6":"markdown","80f7aa31":"markdown","6b2d0fb2":"markdown","b69f6a92":"markdown","60318c20":"markdown","441e0a6a":"markdown","f40414e8":"markdown","2ed68f73":"markdown","940e404a":"markdown","0ccf5156":"markdown","935de308":"markdown","6bfd7062":"markdown","ee730b16":"markdown","dcc54833":"markdown"},"source":{"65a07244":"import pandas as pd\nimport numpy as np\nimport os","38ae3f04":"# What files are available?\nos.listdir('..\/input')","c9aea6e6":"df_questions = pd.read_csv('..\/input\/questions.csv')\ndf_answers = pd.read_csv('..\/input\/answers.csv')\n\nprint(df_questions.shape)\nprint(df_answers.shape)","902dde32":"# source: https:\/\/www.kaggle.com\/crawford\/starter-kernel\n\ndf_question_answers = df_questions.merge(right=df_answers, how='inner', \n                                         left_on='questions_id', \n                                         right_on='answers_question_id')\n\ndf_question_answers.shape","3cf72d9a":"df_question_answers.head()","e8c88c96":"def extract_hashtags(x):\n    # split the string into a list\n    a = x.split()\n    # extract the hashtags\n    hash_tags = [i for i in a if i.startswith(\"#\")]\n    \n    # Convert the list to a string with a space at the end.\n    # This space is needed when we sum the strings later.\n    result = ' '.join(hash_tags) + \" \"\n    \n    return result\n\n# create a new column containing the hash tags\ndf_question_answers['question_hash_tags'] = \\\ndf_question_answers['questions_body'].apply(extract_hashtags)\n\ndf_question_answers.head()","2e7af556":"# Select only the columns we need\ndf_answers = df_question_answers[['answers_author_id', 'question_hash_tags']]\n\n# Create a new dataframe where we will store the total number of questions answered\ndf_count = df_answers.copy()\n\n# Create an additional column that will show how many questions a professional has answered.\n# The total will appear after we run pandas \"Groupby\" below.\ndf_count['num_questions_answered'] = 1","2e4e1e81":"# Get the number of questions that each professional has answered\ndf_count = df_count.groupby('answers_author_id').sum()\n\ndf_count.head()","62a7ffd5":"# Groupby the answers_author_id column and sum.\n# This is essentially adding (+) the strings associated with each professional id.\n\ndf_prof_tags = df_answers.groupby('answers_author_id').sum()\n\n# Add the num_questions_answered column to df_prof_tags\ndf_prof_tags['num_questions_answered'] = df_count['num_questions_answered']\n\n# reset the index\ndf_prof_tags.reset_index(inplace=True)\n\n\ndf_prof_tags.head()","dcd2e2fe":"df_prof_tags.head()","10fdd7ec":"df_questions = pd.read_csv('..\/input\/questions.csv')\nquestion = df_questions.loc[1,'questions_body']\n\nquestion","1dcc4bac":"# 1. Extract the hash tags from the question\n\ndef extract_hashtags(question):\n    a = question.split()\n    # extract the hashtags\n    quest_tags = [i for i in a if i.startswith(\"#\")]\n    \n    return quest_tags\n\n# call the function\nquest_tags = extract_hashtags(question)\n\nquest_tags","32d573be":"# 2. Filter out all professionals who have previously answered questions with\n# at least one of those hash tags.\n\ndf_prof = df_prof_tags.copy()\n\n# Return 1 if a professional has anawered a question with those tags\ndef filter_on_tag(x):    \n        if x != 1:\n            if item in x:\n                return 1\n            else:\n                return x\n\nfor item in quest_tags:\n    print(item)\n    df_prof['tag_found'] = df_prof['question_hash_tags'].apply(filter_on_tag)\n    \n# filter out rows where the 'tag_found' column has value 1\ndf_filtered = df_prof[df_prof['tag_found'] == 1]\n\ndf_filtered.shape","bfdb618c":"df_filtered.head()","754fe286":"df_filtered = df_filtered[df_filtered['num_questions_answered'] > 50]\n\n# Check the number of professionals identified\ndf_filtered.shape","cc9a15d6":"# Display the 14 professionals\ndf_filtered.head(20)","c2fd2e25":"youve_got_mail = list(df_filtered['answers_author_id'])\n\nyouve_got_mail","80e7cf47":"df_answers = pd.read_csv('..\/input\/answers.csv')\ndf_answers.loc[2,'answers_body']\n","a62c4a26":"df_tag_users = pd.read_csv('..\/input\/tag_users.csv')\ndf_tag_users[df_tag_users['tag_users_user_id'] == 'cbd8f30613a849bf918aed5c010340be']","a33ebdc7":"df_tags = pd.read_csv('..\/input\/tags.csv')\n\nprint(df_tags[df_tags['tags_tag_name'] == 'military'])\nprint(df_tags[df_tags['tags_tag_name'] == 'army'])","3c0d8dd4":"## Section 2\nIn this section we will use the above df_prof_tags dataframe to generate a list of professionals to whom a notification should be sent when a student asks a question on a specific subject.","4a8010a7":"These are the tags that this professional follows:","dd594529":"### Extract the hash tags from the questions","964c32cc":"To conclude, let's take a look at how one professional answered Priyanka's question.","bd875f15":"**Updated Version **\n\nSome lessons learned since creating this kernel:\n\n1. This solution relies on hashtags being present in the student's question. If a hashtag is not present then this solution will fail. Some questions don't have hashtags.\n2. There are 102 professional id's that are listed in answers.csv which are not included in professionals.csv\n3. When merging questions.csv, answers.csv and professionals.csv - only professionals who have answered questions will be present in the merged dataframes. Those professionals who did not answer questions are automatically dropped.","382a0c89":"## What is the objective?\n\n> ### Develop a method to recommend relevant questions to the professionals who are most likely to answer them.","e9069c06":"<hr>","40d1cf23":"We now have a list of 14 professionals to whom we could send an email notification.","dc4562c6":"<hr>","80f7aa31":"## Section 1\nThe goal of this section is to create a dataframe containing the id's of all professionals that have ever answered questions. This dataframe will have a column containing all the hash tags that were part of the questions each professional answered.","6b2d0fb2":"### Merge questions.csv and answers.csv","b69f6a92":"### Let's consider the following question that was asked by Priyanka, a high school student from Bangalore:","60318c20":"Thank you for reading and good luck in this competition.","441e0a6a":"## Summary\n\nWe will start by creating a dataframe containing a list of all professionals who have answered questions in the past. This dataframe will inculde the hash tags that were part of the questions that they answered. It will also include the total number of questions they have answered. We will use this info to match professionals to questions and identify professionals who are both able and likely to answer those questions. This is a vintage solution. We won't be using machine learning.","f40414e8":"We see that there are 68 professionals that have previously answered questions that contained at least one these tags.","2ed68f73":"### These are their unique id's:","940e404a":"## Conclusion","0ccf5156":"Let's reduce this number by considering only those professionals who have answered more than 50 questions. This helps us to identify those professionals who are likely to respond to an email notification. The fact that they have answered many questions in the past is a possible indicator that:<br>\n(i) they are keen on helping students<br>\n(ii) they are willing to take time to write answers<br>\n(iii) they have experience\n","935de308":"Note that she has tagged this question:\n- #military\n- #army","6bfd7062":" This is the final dataframe containing a list of professionals that have previously answered questions and the hash tags that were part of the questions that they answered. The total number of questions that each professional answered is also shown.","ee730b16":"These are the tag id's that correspond to #military and #army:","dcc54833":"This person has answered this question quite thoroughly and gracefully. Yet it's interesting to note that the hash tags that this professional follows do not include either #military (id 27) or #army (id 18016). He or she probably found this question by scrolling through a forum. This is why, when creating this solution, I chose to use question hash tags and not consider hash tags that professionals follow. "}}