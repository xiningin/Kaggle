{"cell_type":{"f353642c":"code","349e0b55":"code","62fb3271":"code","98ed4a4b":"code","bcd37a08":"code","ed1dae0f":"code","473d4bbb":"code","c287fc66":"code","b2f000a6":"code","6776b875":"code","dff6f45e":"code","4793304a":"code","c3deb9cd":"code","b982ab5e":"code","fffed69a":"code","fb5f21b7":"code","7eab0a3f":"code","65baa042":"code","63aa0702":"code","26d560c7":"code","fdc01f0c":"code","7bd2fcab":"code","e8780507":"code","35884aa2":"code","86cd08f7":"code","8702a20c":"code","42acc0c7":"code","c67cffec":"code","37bd74f3":"code","752edf72":"code","74fd3a19":"code","a05e75fa":"code","edc131ff":"code","17e7c44c":"code","b25dfe21":"code","aea3ad06":"code","cb2272ff":"markdown","8d338287":"markdown","8f1ae626":"markdown","454ef050":"markdown","bb7fdcf1":"markdown","fc520dc8":"markdown","abcd5295":"markdown","5f66f708":"markdown","f9e6809e":"markdown","7411e049":"markdown"},"source":{"f353642c":"!pip install jovian opendatasets --upgrade --quiet\n\n!pip install numpy pandas matplotlib.pyplot seaborn  --upgrade --quite\n\n!pip install plotly --upgrade ","349e0b55":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\n%matplotlib inline\nimport opendatasets as od\nimport os","62fb3271":"import matplotlib.style as style\n\nstyle.use(\"fivethirtyeight\")\nstyle.use('seaborn-poster')\n\nplt.rcParams['font.family'] = 'sans-serif'","98ed4a4b":"df = pd.read_csv(\"..\/input\/heart-failure-prediction\/heart.csv\")\ndf.head()\n","bcd37a08":"df.describe()","ed1dae0f":"df.info()","473d4bbb":"df.isna().sum()","c287fc66":"col2=['Age','RestingBP','Cholesterol','MaxHR','Oldpeak']\nfor c in col2:\n    fig=plt.figure(figsize=(9,6))\n    sns.boxplot(x=df[c],hue=df.HeartDisease)\n\n#plt.figure(figsize=(20,10))\n#sns.boxplot(y=df.FastingBs);\n#plt.ylabel('FastingBs', fontsize=20, labelpad=20);","b2f000a6":"#Arrange the data in increasing order\nsorted(col2)","6776b875":"import numpy as np\nq1, q3= np.percentile(df['RestingBP'],[25,75])\niqr = q3 - q1\nlower_bound = q1 -(1.5 * iqr) \nupper_bound = q3 +(1.5 * iqr)\nprint(\"lower_bound\",lower_bound)\nprint(\"upper_bound\",upper_bound)","dff6f45e":"df = df[(df['RestingBP']>=90) & (df['RestingBP']<=170)]\n","4793304a":"q1, q3= np.percentile(df['Oldpeak'],[25,75])\niqr = q3 - q1\nlower_bound = q1 -(1.5 * iqr) \nupper_bound = q3 +(1.5 * iqr)\nprint(\"lower_bound\",lower_bound)\nprint(\"upper_bound\",upper_bound)","c3deb9cd":"df = df[(df['Oldpeak']>=-2) & (df['Oldpeak']<=3)]\n","b982ab5e":"q1, q3= np.percentile(df['MaxHR'],[25,75])\niqr = q3 - q1\nlower_bound = q1 -(1.5 * iqr) \nupper_bound = q3 +(1.5 * iqr)\nprint(\"lower_bound\",lower_bound)\nprint(\"upper_bound\",upper_bound)","fffed69a":"df = df[(df['MaxHR']>=66) & (df['MaxHR']<=210)]","fb5f21b7":"q1, q3= np.percentile(df['Cholesterol'],[25,75])\niqr = q3 - q1\nlower_bound = q1 -(1.5 * iqr) \nupper_bound = q3 +(1.5 * iqr)\nprint(\"lower_bound\",lower_bound)\nprint(\"upper_bound\",upper_bound)","7eab0a3f":"df = df[(df['Cholesterol']>=38) & (df['Cholesterol']<=401)]","65baa042":"#Sex = df.Sex.value_counts()\n\n#fig = px.pie(Sex, \n #            values = Sex.values, \n  #           names = Sex.index,\n   #          color_discrete_sequence=px.colors.sequential.RdBu)\n#fig.update_traces(textposition='inside', textinfo='percent+label', \n #                 marker = dict(line = dict(color = 'white', width = 2)))\n#fig.show()\n","63aa0702":"#colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']\n#explode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.\n\nSex = df.Sex.value_counts()\n\nSex.plot(kind='pie',\n         figsize=(15, 6),\n         autopct='%1.1f%%', \n         startangle=90,    \n         shadow=True,       \n         labels=None,    # turn off labels on pie chart\n         pctdistance=1.12,   # the ratio between the center of each pie slice and the start of the text generated by autopct \n         colors=None,  # add custom colors\n         explode=None # 'explode' lowest 3 continents\n                                )\n\n# scale the title up by 12% to match pctdistance\nplt.title('Male and female contribution in the dataset', y=1.12) \n\nplt.axis('equal') \n\n# add legend\nplt.legend(labels=Sex.index, loc='upper right') \n\nplt.show()","26d560c7":"df.ChestPainType = df.ChestPainType.replace({'ASY': 'Asymptomatic',\n                                             'ATA': 'Atypical angina',\n                                             'NAP': 'Non-Anginal Pain',\n                                              'TA': 'Typical Angina'})\n","fdc01f0c":"ChestPainType = df.ChestPainType.value_counts()\n\nfig = px.pie(ChestPainType, \n             values = ChestPainType.values, \n             names = ChestPainType.index,\n             color_discrete_sequence=px.colors.sequential.RdBu)\nfig.update_traces(textposition='inside', textinfo='percent+label', \n                  marker = dict(line = dict(color = 'white', width = 2)))\nfig.show()","7bd2fcab":"ExerciseAngina = df.ExerciseAngina.value_counts()\n\nfig = px.pie(ExerciseAngina, \n             values = ExerciseAngina.values, \n             names = ExerciseAngina.index,\n             color_discrete_sequence=px.colors.sequential.RdBu)\nfig.update_traces(textposition='inside', textinfo='percent+label', \n                  marker = dict(line = dict(color = 'white', width = 2)))\nfig.show()\n","e8780507":"RestingECG = df.RestingECG.value_counts()\n\nfig = px.pie(RestingECG, \n             values = RestingECG.values, \n             names = RestingECG.index,\n             color_discrete_sequence=px.colors.sequential.RdBu)\nfig.update_traces(textposition='inside', textinfo='percent+label', \n                  marker = dict(line = dict(color = 'white', width = 2)))\nfig.show()","35884aa2":"fig=plt.figure(figsize=(11,6))\npx.histogram(x=df.Sex,color=df.HeartDisease,barmode='group')","86cd08f7":"fig=plt.figure(figsize=(11,6))\npx.histogram(x=df.ChestPainType,color=df.HeartDisease,barmode='group')","8702a20c":"fig=plt.figure(figsize=(11,6))\npx.histogram(x=df.ExerciseAngina,color=df.HeartDisease,barmode='group')\n","42acc0c7":"for c in df.columns:\n    if (c != 'HeartDisease' and df[c].nunique()<10):\n        fig, ax = plt.subplots(ncols=df[c].nunique(), figsize=(15,5))\n        p = 0\n        for i in df[c].unique():\n            ax[p].set_title('-'*150+'\\n'+str(c) +' : '+ str(i), size=14, fontweight='heavy')\n            patches, texts, pcts = ax[p].pie(df[df[c]==i]['HeartDisease'].value_counts().values,\n                   labels=df[df[c]==i]['HeartDisease'].value_counts().index,\n                     autopct=\"%1.2f%%\", startangle=90, colors=['crimson', 'blue'],\n                     wedgeprops={\"edgecolor\":\"black\"})\n            plt.setp(pcts, **{'color':'white','weight':'heavy','size':16})\n            p += 1 \n        fig.show()","c67cffec":"#sns.distplot(df.loc[df['HeartDisease']==1][c],kde_kws={'label':'Normal'},color='red')\ncol1=['Age','RestingBP','Cholesterol','MaxHR','Oldpeak']\nfor c in col1:\n    plt.figure(figsize=(15,5))\n    sns.kdeplot(df[c],hue = df['HeartDisease'])\n    plt.title(f\"\\n\\nKDE plot for '{c}' column \\n\", size=14, fontweight='bold')\n    plt.show()","37bd74f3":"from sklearn.preprocessing import OneHotEncoder , LabelEncoder , label_binarize\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\n","752edf72":"#encode the categorical variables\nencoder = LabelEncoder()\ndf[\"Sex\"] = encoder.fit_transform(df[\"Sex\"])\ndf[\"ChestPainType\"] = encoder.fit_transform(df[\"ChestPainType\"])\ndf[\"RestingECG\"] = encoder.fit_transform(df[\"RestingECG\"])\ndf[\"ST_Slope\"] = encoder.fit_transform(df[\"ST_Slope\"])\ndf[\"ExerciseAngina\"] = encoder.fit_transform(df[\"ExerciseAngina\"])\ndf.head()","74fd3a19":"X=df.drop('HeartDisease',axis=True)\ny=df['HeartDisease']","a05e75fa":"#use gradientboosting to obtain prediction\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\ngb_model = GradientBoostingClassifier(n_estimators=500, learning_rate=0.01, random_state=0)\ngb_model.fit(X_train, y_train)\ngb_preds = gb_model.predict(X_test)\naccuracy = accuracy_score(y_test, gb_preds)\nprint(\"Accuracy of GradientBoostingClassifier: \",accuracy)","edc131ff":"#Fitting K-Nearest Neighbors\nfrom sklearn.neighbors import KNeighborsClassifier\nClassifier = KNeighborsClassifier(n_neighbors = 5,metric = 'minkowski' ,p=2)\nClassifier.fit(X_train,y_train)\n\n#Predicting The Test Set Results \nY_pred = Classifier.predict(X_test)\naccuracy = accuracy_score(y_test, Y_pred)\nprint(\"Accuracy of  K-Nearest Neighbors (K-NN): \",accuracy)","17e7c44c":"#Fitting The SVM \nfrom sklearn.svm import SVC\nClassifier = SVC(kernel = 'linear', random_state = 0)\nClassifier.fit(X_train,y_train)\n\n#Predicting The Test Set Results \nY_pred = Classifier.predict(X_test)\naccuracy = accuracy_score(y_test, Y_pred)\nprint(\"Accuracy of  Support Vector Machine (SVM) : \",accuracy)","b25dfe21":"#Fitting Decision Tree Classification\nfrom sklearn.tree import DecisionTreeClassifier\nClassifier = DecisionTreeClassifier(criterion = 'entropy',random_state = 0)\nClassifier.fit(X_train,y_train)\n\n#Predicting The Test Set Results \nY_pred = Classifier.predict(X_test)\naccuracy = accuracy_score(y_test, Y_pred)\nprint(\"Accuracy of  Decision Tree Classification) : \",accuracy)","aea3ad06":"#Random Forest Classification\nfrom sklearn.ensemble import RandomForestClassifier\nClassifier = RandomForestClassifier(n_estimators = 10,criterion = 'entropy',random_state = 0)\nClassifier.fit(X_train,y_train)\n\n#Predicting The Test Set Results \nY_pred = Classifier.predict(X_test)\naccuracy = accuracy_score(y_test, Y_pred)\nprint(\"Accuracy of  Random Forest Classification : \",accuracy)","cb2272ff":"<h1 style=\"background-color:black\n;font-family:newtimeroman;font-size:225%;text-align:left; color:#40E0D0\">  Splitting Up the data set into traning and testing data <\/h1><a id=0><\/a>","8d338287":"<h1 style=\"background-color:black\n;font-family:newtimeroman;font-size:350%;text-align:center;border-radius: 100px 100px; color:#40E0D0\"> Heart Failure Predictions <\/h1><a id=0><\/a>","8f1ae626":"<h1 style=\"background-color:black\n;font-family:newtimeroman;font-size:225%;text-align:left; color:#40E0D0\">Removing abbreviations for chest pain type <\/h1><a id=0><\/a>","454ef050":"**Insight**\n\nWe have some Outliers in Oldpeak,MaxHR, RestingBP and Cholesterol.Let's remove these Outliers.\n","bb7fdcf1":"<h1 style=\"background-color:black\n;font-family:newtimeroman;font-size:225%;text-align:left; color:#40E0D0\"> Bivariate Analysis (Comparing with target column)<\/h1><a id=0><\/a>","fc520dc8":"Same we will Remove  Outliers from Oldpeak,MaxHR  and Cholesterol.Let's remove these Outliers.","abcd5295":"<h1 style=\"background-color:black\n;font-family:newtimeroman;font-size:225%;text-align:left; color:#40E0D0\">  Find Outliers <\/h1><a id=0><\/a>","5f66f708":"**Insight**\n\n* As age increases risk of heart disease also increases and for age range of 55-65.\n* Higher value of MaxHR shows sign of healthy heart.\n* With increse in Oldpeak risk of heart disease also increses.\n* Cholesterol having value near 200 is good for heart otherwise low and high cholesterol can cause heart disease.","f9e6809e":"<h1 style=\"background-color:black\n;font-family:newtimeroman;font-size:225%;text-align:left; color:#40E0D0\"> Remove Outliers Using IQR <\/h1><a id=0><\/a>\nIQR tells how spread the middle values are. It can be used to tell when a value is too far from the middle.An outlier is a point which falls more than 1.5 times the interquartile range above the third quartile or below the first quartile.\n\n**Steps:**\n\n1.Arrange the data in increasing order\n\n2.Calculate first(q1) and third quartile(q3)\n\n3.Find interquartile range (q3-q1)\n\n4.Find lower bound q1*1.5\n\n5.Find upper bound q3*1.5\n\n**Anything that lies outside of lower and upper bound is an outlier**\n","7411e049":"**Insight**:\n\n* Heart Disease is major problem for male as 54% male affected by it, whereas only 18% female affected by heart disease.\n* For a  person having Asymptomatic (ASY) chest pain and \/or FastingBS is 1  ( 72% and 64% respectively)  heart diseasee.\n* For RestingECG is ST there's 56% chances of heart disease.\n* Person having ExserciseAngina as Y has very high risk (81%) of heart disease.\n* For ST_Slpoe of Flat and Down have high risk (i.e. 78% and 70% respectively) of heart disease whereas for ST_Slope of Up affection risk is low (12%)"}}