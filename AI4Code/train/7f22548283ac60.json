{"cell_type":{"8efc3292":"code","cdac8f72":"code","945a6d7f":"code","82a2e17f":"code","47907360":"code","2e0468b2":"code","1378ad50":"code","0de20b40":"code","d4f7c079":"code","4fab67fb":"code","bfc13b00":"code","632f45d1":"code","2941e9d9":"code","76f94e47":"code","38c4c499":"code","1881b1e7":"code","15bbc4c7":"code","cdff83be":"code","bc929bf1":"code","42040b49":"code","5578464b":"code","8a685184":"code","8cbd3bba":"code","533faa79":"code","1e612713":"code","57b29a06":"code","36ab4c30":"code","7f54fcc2":"code","2aa3418b":"code","7b5bf660":"code","5b391f4f":"code","26e449e8":"code","a9fb108c":"code","2fad16a7":"code","3cfea638":"code","05e08982":"code","ce6b760d":"code","bfe47d30":"code","698a4ffa":"code","2d9fcf60":"code","d794552f":"code","9809a797":"code","a6069859":"code","11f67145":"code","b0e34bc1":"code","24366a92":"code","6bf1ab0d":"code","098620a8":"code","93e5eeb1":"code","007ce312":"code","070676dc":"code","6b9cadd0":"code","24d97a50":"code","e671edb0":"code","52755858":"code","39b3b7f9":"code","5f2585f5":"code","3f79d099":"code","66bde284":"code","f7c043fd":"code","a72e62c8":"code","67106a24":"code","9b5675dd":"code","e39f1afb":"code","96f44faa":"code","a4524799":"code","9371906f":"code","f3ad94cf":"code","2013885e":"code","e6abfe19":"code","579dbb26":"code","72131a3a":"code","332bbad9":"code","6c507fc4":"code","a96a57f0":"code","1edc7096":"code","e6f18769":"code","bdf3ed31":"code","90bb788f":"code","83876c1a":"code","eb828d3c":"code","2a01b068":"code","7d149e41":"code","d9d8d07b":"code","61924d37":"markdown","3f5e1911":"markdown","04e83829":"markdown","fadd8e61":"markdown","d43056bd":"markdown","70384582":"markdown","c29a824f":"markdown","18205e05":"markdown","e34bbc24":"markdown","0ee5c448":"markdown","8a7b3b3e":"markdown","664aa50b":"markdown","c5e5cc19":"markdown","22ba52ec":"markdown","60b67d2d":"markdown"},"source":{"8efc3292":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cdac8f72":"dataframe=pd.read_csv('..\/input\/cicids2017-full-dataset\/combine.csv')\ndataframe.head()","945a6d7f":"df=dataframe.sample(n=854321,replace=True)\ndf.head()","82a2e17f":"df.shape","47907360":"print('Label distribution:')\ndf[' Label'].value_counts()","2e0468b2":"df.isna().any()[lambda x:x]","1378ad50":"del df['Flow Bytes\/s']","0de20b40":"del df[' Flow Packets\/s']","d4f7c079":"df.shape","4fab67fb":"df.info()","bfc13b00":"df.describe()","632f45d1":"moddf= df.dropna()\nmoddf.shape","2941e9d9":"from sklearn.model_selection import train_test_split\ndf_train, df_test=train_test_split(moddf,test_size = 0.20)\nprint(df_train.shape)\nprint(df_test.shape)","76f94e47":"print('Label distribution Training set:')\nprint(df_train[' Label'].value_counts())\nprint()\nprint('Label distribution Test set:')\nprint(df_test[' Label'].value_counts())","38c4c499":"labeldf=df_train[' Label']\nlabeldf_test=df_test[' Label']\n#change the label column\nnewlabeldf=labeldf.replace({ 'BENIGN' : 0, 'DoS Hulk' : 2,'PortScan' : 4,'DDoS' : 2,'DoS GoldenEye' : 2,'DoS slowloris' : 2,'DoS Slowhttptest' : 2,'Bot' : 1,'Infiltration' : 3,'Heartbleed' : 2})\nnewlabeldf_test=labeldf_test.replace({ 'BENIGN' : 0, 'DoS Hulk' : 2,'PortScan' : 4,'DDoS' : 2,'DoS GoldenEye' : 2,'DoS slowloris' : 2,'DoS Slowhttptest' : 2,'Bot' : 1,'Infiltration' : 3,'Heartbleed' : 2})\n# put the new label column back\ndf_train[' Label'] = newlabeldf\ndf_test[' Label'] = newlabeldf_test\nprint(df_train[' Label'].head())\nprint(df_test[' Label'].head())","1881b1e7":"to_drop_Bot = [2,3,4]\nto_drop_DoS = [1,3,4]\nto_drop_Infiltration = [1,2,4]\nto_drop_PortScan = [1,2,3]\nBot_df=df_train[~df_train[' Label'].isin(to_drop_Bot)];\nDoS_df=df_train[~df_train[' Label'].isin(to_drop_DoS)];\nInfiltration_df=df_train[~df_train[' Label'].isin(to_drop_Infiltration)];\nPortScan_df=df_train[~df_train[' Label'].isin(to_drop_PortScan)];\n\n#test\nBot_df_test=df_test[~df_test[' Label'].isin(to_drop_Bot)];\nDoS_df_test=df_test[~df_test[' Label'].isin(to_drop_DoS)];\nInfiltration_df_test=df_test[~df_test[' Label'].isin(to_drop_Infiltration)];\nPortScan_df_test=df_test[~df_test[' Label'].isin(to_drop_PortScan)];\nprint('Train:')\nprint('Dimensions of Bot:' ,Bot_df.shape)\nprint('Dimensions of DoS:' ,DoS_df.shape)\nprint('Dimensions of Infiltration:' ,Infiltration_df.shape)\nprint('Dimensions of PortScan:' ,PortScan_df.shape)\nprint('Test:')\nprint('Dimensions of Bot:' ,Bot_df_test.shape)\nprint('Dimensions of DoS:' ,DoS_df_test.shape)\nprint('Dimensions of Infiltration:' ,Infiltration_df_test.shape)\nprint('Dimensions of PortScan:' ,PortScan_df_test.shape)","15bbc4c7":"# Split dataframes into X & Y\n# assign X as a dataframe of feautures and Y as a series of outcome variables\nX_Bot = Bot_df.drop(' Label',1)\nY_Bot = Bot_df[' Label']\nX_DoS = DoS_df.drop(' Label',1)\nY_DoS = DoS_df[' Label']\nX_Infiltration = Infiltration_df.drop(' Label',1)\nY_Infiltration = Infiltration_df[' Label']\nX_PortScan = PortScan_df.drop(' Label',1)\nY_PortScan = PortScan_df[' Label']\n","cdff83be":"# test set\nX_Bot_test = Bot_df_test.drop(' Label',1)\nY_Bot_test = Bot_df_test[' Label']\nX_DoS_test = DoS_df_test.drop(' Label',1)\nY_DoS_test = DoS_df_test[' Label']\nX_Infiltration_test = Infiltration_df_test.drop(' Label',1)\nY_Infiltration_test = Infiltration_df_test[' Label']\nX_PortScan_test = PortScan_df_test.drop(' Label',1)\nY_PortScan_test = PortScan_df_test[' Label']","bc929bf1":"colNames=list(X_Bot)\ncolNames_test=list(X_Bot_test)","42040b49":"from sklearn import preprocessing\nscaler1 = preprocessing.StandardScaler().fit(X_Bot)\nX_Bot=scaler1.transform(X_Bot) \n\n\n","5578464b":"scaler2 = preprocessing.StandardScaler().fit(X_DoS)\nX_DoS=scaler2.transform(X_DoS) ","8a685184":"scaler3 = preprocessing.StandardScaler().fit(X_Infiltration)\nX_Infiltration=scaler3.transform(X_Infiltration) ","8cbd3bba":"scaler4 = preprocessing.StandardScaler().fit(X_PortScan)\nX_PortScan=scaler4.transform(X_PortScan) \n","533faa79":"# test data\nscaler5 = preprocessing.StandardScaler().fit(X_Bot_test)\nX_Bot_test=scaler5.transform(X_Bot_test) \nscaler6 = preprocessing.StandardScaler().fit(X_DoS_test)\nX_DoS_test=scaler6.transform(X_DoS_test) \nscaler7 = preprocessing.StandardScaler().fit(X_Infiltration_test)\nX_Infiltration_test=scaler7.transform(X_Infiltration_test) \nscaler8 = preprocessing.StandardScaler().fit(X_PortScan_test)\nX_PortScan_test=scaler8.transform(X_PortScan_test) ","1e612713":"print(X_Bot.std(axis=0))","57b29a06":"X_DoS.std(axis=0);\nX_Infiltration.std(axis=0);\nX_PortScan.std(axis=0);","36ab4c30":"#univariate feature selection with ANOVA F-test. using secondPercentile method, then RFE\n#Scikit-learn exposes feature selection routines as objects that implement the transform method\n#SelectPercentile: removes all but a user-specified highest scoring percentage of features\n#f_classif: ANOVA F-value between label\/feature for classification tasks.\nfrom sklearn.feature_selection import SelectPercentile, f_classif\nnp.seterr(divide='ignore', invalid='ignore');\nselector=SelectPercentile(f_classif, percentile=10)\nX_newBot = selector.fit_transform(X_Bot,Y_Bot)\nX_newBot.shape","7f54fcc2":"true=selector.get_support()\nnewcolindex_Bot=[i for i, x in enumerate(true) if x]\nnewcolname_Bot=list( colNames[i] for i in newcolindex_Bot )\nnewcolname_Bot","2aa3418b":"X_newDoS = selector.fit_transform(X_DoS,Y_DoS)\nX_newDoS.shape","7b5bf660":"true=selector.get_support()\nnewcolindex_DoS=[i for i, x in enumerate(true) if x]\nnewcolname_DoS=list( colNames[i] for i in newcolindex_DoS )\nnewcolname_DoS","5b391f4f":"X_newInfiltration = selector.fit_transform(X_Infiltration,Y_Infiltration)\nX_newInfiltration.shape","26e449e8":"true=selector.get_support()\nnewcolindex_Infiltration=[i for i, x in enumerate(true) if x]\nnewcolname_Infiltration=list( colNames[i] for i in newcolindex_Infiltration)\nnewcolname_Infiltration","a9fb108c":"X_newPortScan = selector.fit_transform(X_PortScan,Y_PortScan)\nX_newPortScan.shape","2fad16a7":"true=selector.get_support()\nnewcolindex_PortScan=[i for i, x in enumerate(true) if x]\nnewcolname_PortScan=list( colNames[i] for i in newcolindex_PortScan)\nnewcolname_PortScan","3cfea638":"print('Features selected for DoS:',newcolname_Bot)\nprint()\nprint('Features selected for Probe:',newcolname_DoS)\nprint()\nprint('Features selected for R2L:',newcolname_Infiltration)\nprint()\nprint('Features selected for U2R:',newcolname_PortScan)","05e08982":"'''from sklearn import preprocessing\nfrom sklearn import utils\n\nlab_enc = preprocessing.LabelEncoder()\nencoded = lab_enc.fit_transform(Y_Bot) '''\n","ce6b760d":"Y_Bot=Y_Bot.astype('int')\nY_DoS=Y_DoS.astype('int')\nY_Infiltration=Y_Infiltration.astype('int')\nY_PortScan=Y_PortScan.astype('int')","bfe47d30":"from sklearn.feature_selection import RFE\nfrom sklearn.tree import DecisionTreeClassifier\n# Create a decision tree classifier. By convention, clf means 'classifier'\nclf = DecisionTreeClassifier(random_state=0)\n\n#rank all features, i.e continue the elimination until the last one\nrfe = RFE(clf, n_features_to_select=1)\nrfe.fit(X_newBot, Y_Bot)\nprint (\"Bot Features sorted by their rank:\")\nprint (sorted(zip(map(lambda x: round(x, 4), rfe.ranking_), newcolname_Bot)))","698a4ffa":"rfe.fit(X_newDoS, Y_DoS)\nprint (\"DoS Features sorted by their rank:\")\nprint (sorted(zip(map(lambda x: round(x, 4), rfe.ranking_), newcolname_DoS)))","2d9fcf60":"rfe.fit(X_newInfiltration, Y_Infiltration)\n \nprint (\"Infiltration Features sorted by their rank:\")\nprint (sorted(zip(map(lambda x: round(x, 4), rfe.ranking_), newcolname_Infiltration)))","d794552f":"rfe.fit(X_newPortScan, Y_PortScan)\n \nprint (\"PortScan Features sorted by their rank:\")\nprint (sorted(zip(map(lambda x: round(x, 4), rfe.ranking_), newcolname_PortScan)))","9809a797":"from sklearn.feature_selection import RFE\nclf = DecisionTreeClassifier(random_state=0)\nrfe = RFE(estimator=clf, n_features_to_select=8, step=1)\nrfe.fit(X_Bot, Y_Bot)\nX_rfeBot=rfe.transform(X_Bot)\ntrue=rfe.support_\nrfecolindex_Bot=[i for i, x in enumerate(true) if x]\nrfecolname_Bot=list(colNames[i] for i in rfecolindex_Bot)","a6069859":"rfe.fit(X_DoS, Y_DoS)\nX_rfeDoS=rfe.transform(X_DoS)\ntrue=rfe.support_\nrfecolindex_DoS=[i for i, x in enumerate(true) if x]\nrfecolname_DoS=list(colNames[i] for i in rfecolindex_DoS)","11f67145":"rfe.fit(X_Infiltration, Y_Infiltration)\nX_rfeInfiltration=rfe.transform(X_Infiltration)\ntrue=rfe.support_\nrfecolindex_Infiltration=[i for i, x in enumerate(true) if x]\nrfecolname_Infiltration=list(colNames[i] for i in rfecolindex_Infiltration)","b0e34bc1":"rfe.fit(X_PortScan, Y_PortScan)\nX_rfePortScan=rfe.transform(X_PortScan)\ntrue=rfe.support_\nrfecolindex_PortScan=[i for i, x in enumerate(true) if x]\nrfecolname_PortScan=list(colNames[i] for i in rfecolindex_PortScan)","24366a92":"print('Features selected for DoS:',rfecolname_Bot)\nprint()\nprint('Features selected for Probe:',rfecolname_DoS)\nprint()\nprint('Features selected for R2L:',rfecolname_Infiltration)\nprint()\nprint('Features selected for U2R:',rfecolname_PortScan)","6bf1ab0d":"print(X_rfeBot.shape)\nprint(X_rfeDoS.shape)\nprint(X_rfeInfiltration.shape)\nprint(X_rfePortScan.shape)","098620a8":"clf_Bot=DecisionTreeClassifier(random_state=0)\nclf_DoS=DecisionTreeClassifier(random_state=0)\nclf_Infiltration=DecisionTreeClassifier(random_state=0)\nclf_PortScan=DecisionTreeClassifier(random_state=0)\nclf_Bot.fit(X_Bot, Y_Bot)\nclf_DoS.fit(X_DoS, Y_DoS)\nclf_Infiltration.fit(X_Infiltration, Y_Infiltration)\nclf_PortScan.fit(X_PortScan, Y_PortScan)","93e5eeb1":"clf_rfeBot=DecisionTreeClassifier(random_state=0)\nclf_rfeDoS=DecisionTreeClassifier(random_state=0)\nclf_rfeInfiltration=DecisionTreeClassifier(random_state=0)\nclf_rfePortScan=DecisionTreeClassifier(random_state=0)\nclf_rfeBot.fit(X_rfeBot, Y_Bot)\nclf_rfeDoS.fit(X_rfeDoS, Y_DoS)\nclf_rfeInfiltration.fit(X_rfeInfiltration, Y_Infiltration)\nclf_rfePortScan.fit(X_rfePortScan, Y_PortScan)","007ce312":"clf_Bot.predict(X_Bot_test)","070676dc":"clf_Bot.predict_proba(X_Bot_test)[0:10]","6b9cadd0":"Y_Bot_pred=clf_Bot.predict(X_Bot_test)\n# Create confusion matrix\npd.crosstab(Y_Bot_test, Y_Bot_pred, rownames=['Actual attacks'], colnames=['Predicted attacks'])","24d97a50":"Y_DoS_pred=clf_DoS.predict(X_DoS_test)\n# Create confusion matrix\npd.crosstab(Y_DoS_test, Y_DoS_pred, rownames=['Actual attacks'], colnames=['Predicted attacks'])","e671edb0":"Y_Infiltration_pred=clf_Infiltration.predict(X_Infiltration_test)\n# Create confusion matrix\npd.crosstab(Y_Infiltration_test, Y_Infiltration_pred, rownames=['Actual attacks'], colnames=['Predicted attacks'])","52755858":"Y_PortScan_pred=clf_PortScan.predict(X_PortScan_test)\n# Create confusion matrix\npd.crosstab(Y_PortScan_test, Y_PortScan_pred, rownames=['Actual attacks'], colnames=['Predicted attacks'])","39b3b7f9":"from sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\naccuracy = cross_val_score(clf_Bot, X_Bot_test, Y_Bot_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_Bot, X_Bot_test, Y_Bot_test, cv=10, scoring='precision')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_Bot, X_Bot_test, Y_Bot_test, cv=10, scoring='recall')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_Bot, X_Bot_test, Y_Bot_test, cv=10, scoring='f1')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","5f2585f5":"accuracy = cross_val_score(clf_DoS, X_DoS_test, Y_DoS_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_DoS, X_DoS_test, Y_DoS_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_DoS, X_DoS_test, Y_DoS_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_DoS, X_DoS_test, Y_DoS_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","3f79d099":"accuracy = cross_val_score(clf_Infiltration, X_Infiltration_test, Y_Infiltration_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_Infiltration, X_Infiltration_test, Y_Infiltration_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_Infiltration, X_Infiltration_test, Y_Infiltration_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_Infiltration, X_Infiltration_test, Y_Infiltration_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","66bde284":"accuracy = cross_val_score(clf_PortScan, X_PortScan_test, Y_PortScan_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_PortScan, X_PortScan_test, Y_PortScan_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_PortScan, X_PortScan_test, Y_PortScan_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_PortScan, X_PortScan_test, Y_PortScan_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","f7c043fd":"X_Bot_test2=X_Bot_test[:,rfecolindex_Bot]\nX_DoS_test2=X_DoS_test[:,rfecolindex_DoS]\nX_Infiltration_test2=X_Infiltration_test[:,rfecolindex_Infiltration]\nX_PortScan_test2=X_PortScan_test[:,rfecolindex_PortScan]\nX_PortScan_test2.shape","a72e62c8":"Y_Bot_pred2=clf_rfeBot.predict(X_Bot_test2)\n# Create confusion matrix\npd.crosstab(Y_Bot_test, Y_Bot_pred2, rownames=['Actual attacks'], colnames=['Predicted attacks'])","67106a24":"Y_DoS_pred2=clf_rfeDoS.predict(X_DoS_test2)\n# Create confusion matrix\npd.crosstab(Y_DoS_test, Y_DoS_pred2, rownames=['Actual attacks'], colnames=['Predicted attacks'])","9b5675dd":"Y_Infiltration_pred2=clf_rfeInfiltration.predict(X_Infiltration_test2)\n# Create confusion matrix\npd.crosstab(Y_Infiltration_test, Y_Infiltration_pred2, rownames=['Actual attacks'], colnames=['Predicted attacks'])","e39f1afb":"Y_PortScan_pred2=clf_rfePortScan.predict(X_PortScan_test2)\n# Create confusion matrix\npd.crosstab(Y_PortScan_test, Y_PortScan_pred2, rownames=['Actual attacks'], colnames=['Predicted attacks'])","96f44faa":"accuracy = cross_val_score(clf_rfeBot, X_Bot_test2, Y_Bot_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_rfeBot, X_Bot_test2, Y_Bot_test, cv=10, scoring='precision')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_rfeBot, X_Bot_test2, Y_Bot_test, cv=10, scoring='recall')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_rfeBot, X_Bot_test2, Y_Bot_test, cv=10, scoring='f1')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","a4524799":"accuracy = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","9371906f":"accuracy = cross_val_score(clf_rfeInfiltration, X_Infiltration_test2, Y_Infiltration_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_rfeInfiltration, X_Infiltration_test2, Y_Infiltration_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_rfeInfiltration, X_Infiltration_test2, Y_Infiltration_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_rfeInfiltration, X_Infiltration_test2, Y_Infiltration_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","f3ad94cf":"accuracy = cross_val_score(clf_rfePortScan, X_PortScan_test2, Y_PortScan_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_rfePortScan, X_PortScan_test2, Y_PortScan_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_rfePortScan, X_PortScan_test2, Y_PortScan_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_rfePortScan, X_PortScan_test2, Y_PortScan_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","2013885e":"accuracy = cross_val_score(clf_rfeBot, X_Bot_test2, Y_Bot_test, cv=2, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","e6abfe19":"accuracy = cross_val_score(clf_rfeBot, X_Bot_test2, Y_Bot_test, cv=5, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","579dbb26":"accuracy = cross_val_score(clf_rfeBot, X_Bot_test2, Y_Bot_test, cv=30, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","72131a3a":"accuracy = cross_val_score(clf_rfeBot, X_Bot_test2, Y_Bot_test, cv=50, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","332bbad9":"accuracy = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=2, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","6c507fc4":"accuracy = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=5, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","a96a57f0":"accuracy = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=30, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","1edc7096":"accuracy = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=50, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","e6f18769":"accuracy = cross_val_score(clf_rfeInfiltration, X_Infiltration_test2, Y_Infiltration_test, cv=2, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","bdf3ed31":"accuracy = cross_val_score(clf_rfeInfiltration, X_Infiltration_test2, Y_Infiltration_test, cv=5, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","90bb788f":"accuracy = cross_val_score(clf_rfeInfiltration, X_Infiltration_test2, Y_Infiltration_test, cv=30, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","83876c1a":"accuracy = cross_val_score(clf_rfeInfiltration, X_Infiltration_test2, Y_Infiltration_test, cv=50, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","eb828d3c":"accuracy = cross_val_score(clf_rfePortScan, X_PortScan_test2, Y_PortScan_test, cv=2, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","2a01b068":"accuracy = cross_val_score(clf_rfePortScan, X_PortScan_test2, Y_PortScan_test, cv=5, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","7d149e41":"accuracy = cross_val_score(clf_rfePortScan, X_PortScan_test2, Y_PortScan_test, cv=30, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","d9d8d07b":"accuracy = cross_val_score(clf_rfePortScan, X_PortScan_test2, Y_PortScan_test, cv=50, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))","61924d37":"# Build the model:","3f5e1911":"# Bot","04e83829":"Get the features that were selected: DoS","fadd8e61":"# DoS","d43056bd":"# Infiltration","70384582":"Confusion Matrices","c29a824f":"# PortScan","18205e05":"# PortScan","e34bbc24":"# Infiltration","0ee5c448":"# Summary of features selected by RFE","8a7b3b3e":"# Cross Validation: Accuracy, Precision, Recall, F-measure","664aa50b":"# DoS","c5e5cc19":"# Prediction & Evaluation (validation)","22ba52ec":"Recursive Feature Elimination, select 13 features each of 122 (Option 2: get 13 best features from 122 from RFE)","60b67d2d":"# Bot"}}