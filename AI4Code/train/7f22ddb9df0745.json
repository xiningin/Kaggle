{"cell_type":{"2569b484":"code","a9384d53":"code","6caa2310":"code","782b1268":"code","a1195f33":"code","06e9935a":"code","58b9902e":"code","578e5aa4":"code","92f97dd9":"code","38075b96":"code","432a0db1":"code","b6587d98":"code","e0c08fe0":"code","02636541":"code","9bf0c70b":"code","344f7e77":"code","3b390722":"markdown","76c5c17b":"markdown","64e0ce2c":"markdown"},"source":{"2569b484":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import timedelta\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\n%matplotlib inline  \n\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nfrom time import time\n\nimport math\n\nimport warnings \n# warnings.simplefilter(\"default\")\nwarnings.filterwarnings('ignore')\n\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a9384d53":"# import arrow\n# import datetime\n\n# today = arrow.utcnow().to('Asia\/Calcutta').format('YYYY-MM-DD')\n# display(time_span0[0])\n# # datetime.timestamp(now)\n# # display(datetime.datetime.timestamp(datetime.datetime.today()))\n# display(pd.to_datetime(pd.Series(datetime.datetime.today()))[0])","6caa2310":"submission=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-3\/submission.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-3\/test.csv\")\ntrain=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-3\/train.csv\")\n\ntrain['Province_State'].fillna('',inplace=True)\ntrain['Date'] = pd.to_datetime(train['Date'])\ntrain['day'] = train.Date.dt.dayofyear\ntrain['geo'] = ['_'.join(x) for x in zip(train['Country_Region'], train['Province_State'])]\n\ntest['Province_State'].fillna('', inplace=True)\ntest['Date'] = pd.to_datetime(test['Date'])\ntest['day'] = test.Date.dt.dayofyear\ntest['geo'] = ['_'.join(x) for x in zip(test['Country_Region'], test['Province_State'])]\n\ntrain.sort_values(by=\"Date\",inplace=True)\ntest.sort_values(by=\"Date\",inplace=True)\n\nday_min = train['day'].min()\ntrain['day'] -= day_min\ntest['day'] -= day_min\n\ntest['ConfirmedCases']=np.nan\ntest['Fatalities']=np.nan\n\ntrain[\"ForecastId\"]=np.nan\ntest[\"Id\"]=np.nan\n\nmin_date_train=train['Date'].min()\nmin_date_test=test['Date'].min() \nmax_date_train=train['Date'].max()\nmax_date_test=test['Date'].max()\n\nnum_of_days_train=(max_date_train-min_date_train)\/np.timedelta64(1, 'D')+1\nnum_of_days=int((max_date_test-min_date_train)\/np.timedelta64(1, 'D'))+1\n\n#two formats for the x-axis, for plotting purpose\ntime_span0=pd.date_range(min_date_train, max_date_test)\ntime_span=[str(s.month)+\"\/\"+str(s.day) for s in time_span0]\n\nforcast_days=int((max_date_test-max_date_train)\/np.timedelta64(1, 'D'))","782b1268":"row=7;col=2; \n\nfig = plt.figure(figsize=(36,11));fig.tight_layout(pad=3.0)\nfig.set_figheight(30)\nfig.set_figwidth(20)\n\n# fig,ax=plt.subplots(row,col,figsize=(36,11))\n#fig.tight_layout(pad=3.0)\nn=0\n\ndef plot_Country_State(Country,Province_State,n,row,col,fig):\n    data=train[(train['Province_State']==Province_State)&(train['Country_Region']==Country)]\\\n       .sort_values(by=\"Date\").loc[:,[\"day\",'ConfirmedCases','Fatalities']]\n    \n    if Country in [\"United Kingdom\",\"Canada\"]:\n        data=train[train['Country_Region']==Country].groupby(\"Date\").sum().reset_index()\\\n       .sort_values(by=\"Date\").loc[:,[\"day\",'ConfirmedCases','Fatalities']]\n        \n    if Country==\"US\" and Province_State==\"\":\n        data=train[train['Country_Region']==Country].groupby(\"Date\").sum().reset_index()\\\n       .sort_values(by=\"Date\").loc[:,[\"day\",'ConfirmedCases','Fatalities']]    \n#     pos=n\/\/col, n%col\n#     if row==1 or col==1:pos=n\n        \n    ax = fig.add_subplot(row,col,n)\n    color='tab:blue'\n    line1,=ax.plot(data[\"day\"],data[\"ConfirmedCases\"],label=\"ConfirmedCases\")\n    ax.set_title(Country+\", \"+Province_State); \n    ax.tick_params(axis='y', labelcolor=color)\n#     ax[pos].legend()\n\n    ax2 = ax.twinx();color='tab:red'\n    line2,=ax2.plot(data[\"day\"],data[\"Fatalities\"],label='Fatalities',color=color);  \n    ax2.tick_params(axis='y', labelcolor=color)\n    ax2.legend((line1,line2), (\"ConfirmedCases\",\"Fatalities\"),loc=\"upper left\")\n\nCountry='US';     Province_State=\"\";  n+=1;  plot_Country_State(Country,Province_State,n,row,col,fig)\n\nCountry='US';     Province_State=\"New York\";  n+=1;  plot_Country_State(Country,Province_State,n,row,col,fig)\n\nCountry='US';     Province_State=\"Louisiana\";  n+=1;  plot_Country_State(Country,Province_State,n,row,col,fig)\n\nCountry='US';     Province_State=\"California\";  n+=1;  plot_Country_State(Country,Province_State,n,row,col,fig)\n\nCountry='Italy';     Province_State=\"\";  n+=1;  plot_Country_State(Country,Province_State,n,row,col,fig)\n\nCountry='Spain';     Province_State=\"\";  n+=1;  plot_Country_State(Country,Province_State,n,row,col,fig)\n\nCountry=\"Singapore\";     Province_State=\"\";  n+=1;  plot_Country_State(Country,Province_State,n,row,col,fig)\n\nCountry=\"Korea, South\";     Province_State=\"\";  n+=1;  plot_Country_State(Country,Province_State,n,row,col,fig)\n\nCountry=\"United Kingdom\";     Province_State=\"\";  n+=1;  plot_Country_State(Country,Province_State,n,row,col,fig)\n\nCountry=\"Germany\";     Province_State=\"\";  n+=1;  plot_Country_State(Country,Province_State,n,row,col,fig)\n\nCountry=\"Taiwan*\";     Province_State=\"\";  n+=1;  plot_Country_State(Country,Province_State,n,row,col,fig)\n\nCountry=\"Canada\";     Province_State=\"\";  n+=1;  plot_Country_State(Country,Province_State,n,row,col,fig)\n\nCountry='India';    Province_State=\"\";  n+=1; plot_Country_State(Country,Province_State,n,row,col,fig)\n\nCountry='Japan';    Province_State=\"\";  n+=1; plot_Country_State(Country,Province_State,n,row,col,fig)\n","a1195f33":"# from datetime import datetime\n# datetime_str=pd.date_range(min_date_train, max_date_test)\n# ss=[str(s.month)+\"\/\"+str(s.day) for s in datetime_str]\n# len(ss)","06e9935a":"\n# display(min_date_test)\n# display(max_date_train)\n# display(max_date_test)\n# display(int((max_date_test-min_date_train)\/np.timedelta64(1, 'D')))+1\n# display(test.Date.dt.dayofyear.max()-train.Date.dt.dayofyear.min()+1)","58b9902e":"countries=dict()\nfor cnt in train['Country_Region'].unique():\n    countries[cnt]=train.loc[train['Country_Region']==cnt,'Province_State'].unique()\n\ncountries_test=dict()\nfor cnt in test['Country_Region'].unique():\n    countries_test[cnt]=test.loc[test['Country_Region']==cnt,'Province_State'].unique()","578e5aa4":"res=[]\nfor country in countries:\n    for state in countries[country]:\n        country_state_filter_train=(train['Province_State']==state)&(train['Country_Region']==country)\n        sliced_data=train.loc[country_state_filter_train,:]\n        history=sliced_data.loc[sliced_data['ConfirmedCases']>0,'ConfirmedCases'].to_list() \n        res.append(num_of_days_train-len(history))\nplt.figure()        \nplt.hist(res,color=\"blue\",bins=10 ,range=(0,80))\nplt.title(\"first Confirmed Case histogram: # of countries\/provinces .VS. days from Wuhan Lockdown(1\/22\/2020)\")\n\n\nres=[]\nfor country in countries:\n    for state in countries[country]:\n#         country_state_filter_test=(test['Province_State']==state)&(test['Country_Region']==country)\n        country_state_filter_train=(train['Province_State']==state)&(train['Country_Region']==country)\n        sliced_data=train.loc[country_state_filter_train,:]\n        history=sliced_data.loc[sliced_data['Fatalities']>0,'Fatalities'].to_list() \n        res.append(num_of_days_train-len(history))\nplt.figure()          \nplt.hist(res,color=\"red\",bins=10 ,range=(0,80))\nplt.title(\"first death histogram: # of countries\/provinces .VS. days from Wuhan Lockdown(1\/22\/2020)\")\n\n","92f97dd9":"display(train.head())\ndisplay(test.head())","38075b96":"set(train.columns).difference(test.columns)","432a0db1":"def rmsle(y, y_pred):\n    assert len(y) == len(y_pred)\n    terms_to_sum = [(np.log(np.abs(y_pred[i] + 1)) - np.log(np.abs(y[i] + 1))) ** 2.0 for i,pred in enumerate(y_pred)]\n    return (sum(terms_to_sum) * (1.0\/len(y))) ** 0.5\n\n# evaluate an ARIMA model for a given order (p,d,q)   \ndef evaluate_arima_model(X,forecast_days, arima_order):\n    # prepare training dataset\n    X=[x for x in X]\n    train_size = int(len(X) * 0.9)\n    train, test1 = X[0:train_size], X[train_size:]\n    # make predictions\n    history=train\n    model = ARIMA(history, order=arima_order)\n    model_fit = model.fit(disp=0)\n    predictions = list()\n    predictions =model_fit.forecast(steps=len(test1))[0]\n\n    model = ARIMA(X, order=arima_order)\n    model_fit = model.fit(disp=0)\n    if np.isnan(model_fit.forecast(steps=forecast_days)[0]).sum()>0:\n        return float('inf')\n#     print(\"herehere3333333333333333\")\n#     print(\"error=\",rmsle(test1, predictions))\n    error = rmsle(test1, predictions) \n    \n    return error\n    \ndef evaluate_models(dataset,forcast_days, p_values, d_values, q_values):\n    best_score, best_cfg = float(\"inf\"), (0,0,0)\n  \n    for p in p_values:\n        for d in d_values:\n            for q in q_values:\n                order = (p,d,q)\n                try:\n                    mse = evaluate_arima_model(dataset,forcast_days, order)\n                    if mse < best_score:\n                        best_score, best_cfg = mse, order\n                except:\n                    continue \n        \n\n    print('Best ARIMA%s MSE=%.3f' % (best_cfg, best_score))\n    try: \n        model=ARIMA(dataset, order=best_cfg)\n        model_fit=model.fit(disp=0)\n        new_data=model_fit.forecast(steps=forcast_days)[0]\n    except:\n        new_data=np.array([np.float(\"inf\")])\n    \n    return best_cfg, best_score, new_data","b6587d98":"done=pd.DataFrame({\"A\":[1]})\ndone.to_csv('done.csv',index=False)\ndef predict_country_state(country,state):\n    country_state_filter_train=(train['Province_State']==state)&(train['Country_Region']==country)\n    country_state_filter_test=(test['Province_State']==state)&(test['Country_Region']==country)\n\n    sliced_data=train.loc[country_state_filter_train,:]\n\n    Targets=['ConfirmedCases', \"Fatalities\"]; Subs=[\"_Cases\",\"_Deaths\"]; Preds=dict(); history_Preds=dict()\n    for i,target in enumerate(Targets):\n        history=sliced_data.loc[sliced_data[target]>0,target].to_list()  \n    #     display(history[:5])\n        start_time=time()\n        best_cfg,best_score,pred=evaluate_models(history,forcast_days,range(10),range(7),range(7)) \n        if (pred!=np.float(\"inf\")).all():\n            Preds[\"Pred\"+Subs[i]]=[round(p) if p>0 else 0 for p in pred] \n            history_Preds[\"Pred\"+Subs[i]]=history+Preds[\"Pred\"+Subs[i]]\n\n            print(\"CPU time for \"+target+ \" costed: \",time()-start_time)\n            print(\"Country=\",country,\", Province\/State=\", state)\n            print(\"________________________\")\n\n            test.loc[country_state_filter_test&(test[\"Date\"]<=max_date_train),target]\\\n                 =train.loc[country_state_filter_train&(train[\"Date\"]>=min_date_test)&(train[\"Date\"]<=max_date_train),target].values\n            test.loc[country_state_filter_test&(test[\"Date\"]>max_date_train),target]=Preds[\"Pred\"+Subs[i]]\n        else:\n            return None\n\n    fig=plt.figure()\n\n    ss=history_Preds[\"Pred_Cases\"]; hl=len(ss);\n    ss_plot=np.zeros(num_of_days);ss_plot[-hl:]=ss\n\n    ax=fig.add_subplot();  color='tab:blue'; \n    line1,=ax.plot(time_span0,ss_plot,label='ComfirmedCases',color=color )\n    ax.plot(time_span0[-len(Preds[\"Pred_Cases\"]):],Preds[\"Pred_Cases\"],'*',color=color)\n    ax.set_title(country+\",\"+state)\n    ax.set_ylabel(\"Comfirmed Cases\")\n    ax.set_xlabel(\"Date\")\n    ax.tick_params(axis='y', labelcolor=color)\n    # ax.tick_params(axis='x',labelrotation=45, labelcolor=color)\n    s=[time_span[i]  for i in range(len(time_span)) if  i%10==0];\n    # plt.xticks(ticks=s,labels=s)\n\n    ax.set_xticklabels([])\n\n\n    scale=50\n    ss=history_Preds[\"Pred_Deaths\"]; hl=len(ss);\n    ss_plot=np.zeros(num_of_days);ss_plot[-hl:]=np.array(ss)*scale\n\n    ax2 = ax.twinx();       color='tab:red';   \n    line2,=ax2.plot(time_span0,ss_plot,label='Fatalities',color=color); \n    ax2.plot(time_span0[-len(Preds[\"Pred_Deaths\"]):],np.array(Preds[\"Pred_Deaths\"])*scale,'+',color=color)\n\n    ax2.set_title(country+\",\"+state)\n    ax2.set_ylabel(\"Fitalities (x 50)\")\n    ax2.tick_params(axis='y', labelcolor=color)\n    ax2.legend((line1,line2), (\"ConfirmedCases\",\"Fatalities\"),loc=\"upper left\")\n    s0=[time_span0[i]  for i in range(len(time_span)) if  i%16==15];\n    s=[time_span[i]  for i in range(len(time_span)) if  i%16==15];\n    # ax2.set_xticklabels(labels=s,minor=False)\n    ax2.set_xticklabels([])\n    aa=plt.xticks(ticks=s0, labels=s)\n    aa=plt.axvline(x=pd.to_datetime(pd.Series(datetime.today()))[0], ymin=0, ymax = ss_plot.max(), linewidth=2, color='g')\n    \n    plt.show()\n\n    sumb=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-3\/submission.csv')\n    output=pd.DataFrame()\n    output['ForecastId']=test['ForecastId'].astype(int)\n    output['ConfirmedCases']=test[test['ConfirmedCases'].notnull()]['ConfirmedCases'].astype(int)\n    output['Fatalities']=test[test['Fatalities'].notnull()]['Fatalities'].astype(int)\n    output.to_csv('submission.csv',index=False)\n    \n    done=pd.read_csv('done.csv')\n    done=done.append([{\"A\":country+\" \"+state}],ignore_index=True)\n    done.to_csv('done.csv',index=False)\n    return None\n\n    # Preds","e0c08fe0":"# for country in countries:\n#     for state in countries[country]:\n#         predict_country_state(country,state)","02636541":"from collections import OrderedDict \ncountries_dict = OrderedDict() \ncountries_dict[\"Afghanistan\"]=[\"\"];\ncountries_dict[\"Italy\"]=[\"\"]\ncountries_dict[\"India\"]=[\"\"]\ncountries_dict[\"Germany\"]=[\"\"]\ncountries_dict[\"Spain\"]=[\"\"]\ncountries_dict[\"US\"]=[\"Louisiana\",\"New York\",\"California\"]\n\n\nfor country in countries_dict:\n#     if country in [\"India\",\"Italy\",]\n    for state in countries_dict[country]:\n        predict_country_state(country,state)\n        ","9bf0c70b":"for country in countries:\n    if (countries[country]!=\"\").any():\n        print(country,len(countries[country]))","344f7e77":"countries[\"US\"]","3b390722":"## Comment on the history data:\n- Both the numbers and the curvatures of blue and red curves are imformative.\n- Singapore, Taiwan, and South Korea have very differenr line shape from other places.\n- Spain, Italy shows some good evidence that their curves are bending down. ","76c5c17b":"## Implications from our predictions:\n- Spain, Italy and NewYork have shown some good evidence. Both curves of these places are tending to bend down.  So,the daily numbers for both new comfirmed cases and fatalities are expected to decrease. Among these three places, Spain the best tendency.\n- All the other countries have a up-bending fatalilty curve. Both curves for India, Germany, Afghanistan looks slightly up-bending, implying an worse situaion ahead. \n\n","64e0ce2c":"## Some Observations:\n- There were about 20 days between Feb 8 to Feb 25 that very small number of places where new cases were reported.\n- For most countries\/provinces, first death is after 40 days of Wuhan Lockdown.\n"}}