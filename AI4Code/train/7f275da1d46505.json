{"cell_type":{"e2c66712":"code","74117f09":"code","2f4f47cc":"code","8464fd22":"code","fbc1a420":"code","ec0a80a1":"code","e84193a3":"code","f7e27792":"code","988070b8":"code","6c334df2":"code","c5d4327d":"code","f738aaae":"code","e8945e10":"code","b869336c":"code","c3220ebe":"code","67ec6f35":"markdown","2d43cc90":"markdown","26111c3e":"markdown","8ca7707d":"markdown","be3090bc":"markdown","d04968bd":"markdown","3b9a1fa0":"markdown","cf2ca5e0":"markdown","d0a6b27a":"markdown","57e4c1bb":"markdown","c611f616":"markdown","039e4117":"markdown","505fd285":"markdown","add4cab6":"markdown","b4075ad3":"markdown","d50ac41b":"markdown","c5857e26":"markdown","44f24758":"markdown","cd3a5921":"markdown","1d292d8a":"markdown","83f3517a":"markdown","b7cf0acf":"markdown"},"source":{"e2c66712":"!pip install yfinance","74117f09":"import numpy as np\nimport pandas as pd\nimport datetime\n\nimport matplotlib.pyplot as plt\n%config InlineBackend.figure_format = 'retina'\n\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport yfinance as yf\n\nprint('\u2714\ufe0f Libraries Loaded!')","2f4f47cc":"def get_price(ticker, start_date, end_date):\n    \"\"\"Return a DataFrame with price information (open, high, low, close, adjusted close, and volume) for the ticker between the specified dates.\"\"\"\n    df = yf.download(ticker, start_date, end_date, progress=False)\n    df.reset_index(inplace=True)\n\n    return df\n\n\nprint('\u2714\ufe0f Function defined!')","8464fd22":"def get_closed_dates(df):\n    \"\"\"Return a list containing all dates on which the stock market was closed.\"\"\"\n    # Create a dataframe that contains all dates from the start until today.\n    timeline = pd.date_range(start=df['Date'].iloc[0], end=df['Date'].iloc[-1])\n\n    # Create a list of the dates existing in the dataframe.\n    df_dates = [day.strftime('%Y-%m-%d') for day in pd.to_datetime(df['Date'])]\n\n    # Finally, determine which dates from the 'timeline' do not exist in our dataframe.\n    closed_dates = [\n        day for day in timeline.strftime('%Y-%m-%d').tolist()\n        if not day in df_dates\n    ]\n\n    return closed_dates\n\n\nprint('\u2714\ufe0f Function defined!')","fbc1a420":"def get_MACD(df, column='Adj Close'):\n    \"\"\"Return a new DataFrame with the MACD and related information (signal line and histogram).\"\"\"\n    df['EMA-12'] = df[column].ewm(span=12, adjust=False).mean()\n    df['EMA-26'] = df[column].ewm(span=26, adjust=False).mean()\n\n    # MACD Indicator = 12-Period EMA \u2212 26-Period EMA.\n    df['MACD'] = df['EMA-12'] - df['EMA-26']\n\n    # Signal line = 9-day EMA of the MACD line.\n    df['Signal'] = df['MACD'].ewm(span=9, adjust=False).mean()\n\n    # Histogram = MACD - Indicator.\n    df['Histogram'] = df['MACD'] - df['Signal']\n\n    return df\n\n\nprint('\u2714\ufe0f Function defined!')","ec0a80a1":"def get_RSI(df, column='Adj Close', time_window=14):\n    \"\"\"Return the RSI indicator for the specified time window.\"\"\"\n    diff = df[column].diff(1)\n\n    # This preservers dimensions off diff values.\n    up_chg = 0 * diff\n    down_chg = 0 * diff\n\n    # Up change is equal to the positive difference, otherwise equal to zero.\n    up_chg[diff > 0] = diff[diff > 0]\n\n    # Down change is equal to negative deifference, otherwise equal to zero.\n    down_chg[diff < 0] = diff[diff < 0]\n\n    # We set com = time_window-1 so we get decay alpha=1\/time_window.\n    up_chg_avg = up_chg.ewm(com=time_window - 1,\n                            min_periods=time_window).mean()\n    down_chg_avg = down_chg.ewm(com=time_window - 1,\n                                min_periods=time_window).mean()\n\n    RS = abs(up_chg_avg \/ down_chg_avg)\n    df['RSI'] = 100 - 100 \/ (1 + RS)\n\n    return df\n\n\nprint('\u2714\ufe0f Function defined!')","e84193a3":"def get_trading_strategy(df, column='Adj Close'):\n    \"\"\"Return the Buy\/Sell signal on the specified (price) column (Default = 'Adj Close').\"\"\"\n    buy_list, sell_list = [], []\n    flag = False\n\n    for i in range(0, len(df)):\n        if df['MACD'].iloc[i] > df['Signal'].iloc[i] and flag == False:\n            buy_list.append(df[column].iloc[i])\n            sell_list.append(np.nan)\n            flag = True\n\n        elif df['MACD'].iloc[i] < df['Signal'].iloc[i] and flag == True:\n            buy_list.append(np.nan)\n            sell_list.append(df[column].iloc[i])\n            flag = False\n\n        else:\n            buy_list.append(np.nan)\n            sell_list.append(np.nan)\n\n    df['Buy'] = buy_list\n    df['Sell'] = sell_list\n\n    return df\n\n\nprint('\u2714\ufe0f Function defined!')","f7e27792":"def plot_candlestick_chart(fig, df, row, column=1, plot_EMAs=True, plot_strategy=True):\n    \"\"\"Return a graph object figure containing a Candlestick chart in the specified row.\"\"\"\n    fig.add_trace(go.Candlestick(x=df['Date'],\n                                 open=df['Open'],\n                                 high=df['High'],\n                                 low=df['Low'],\n                                 close=df['Close'],\n                                 name='Candlestick Chart'),\n                  row=row,\n                  col=column)\n\n    # If the boolean argument plot_EMAs is True, then show the line plots for the two exponential moving averages.\n    if (plot_EMAs == True):\n        fig.add_trace(go.Scatter(x=df['Date'],\n                                 y=df['EMA-12'],\n                                 name='12-period EMA',\n                                 line=dict(color='dodgerblue', width=2)),\n                      row=row,\n                      col=column)\n\n        fig.add_trace(go.Scatter(x=df['Date'],\n                                 y=df['EMA-26'],\n                                 name='26-period EMA',\n                                 line=dict(color='whitesmoke', width=2)),\n                      row=row,\n                      col=column)\n\n    if (plot_strategy == True):\n        fig.add_trace(go.Scatter(x=df['Date'],\n                                 y=df['Buy'],\n                                 name='Buy Signal',\n                                 mode='markers',\n                                 marker_symbol='triangle-up',\n                                 marker=dict(size=9),\n                                 line=dict(color='Lime')),\n                      row=row,\n                      col=column)\n\n        fig.add_trace(go.Scatter(x=df['Date'],\n                                 y=df['Sell'],\n                                 name='Sell Signal',\n                                 mode='markers',\n                                 marker_symbol='triangle-down',\n                                 marker=dict(size=9, color='Yellow')),\n                      row=row,\n                      col=column)\n\n    fig.update_xaxes(rangeslider={'visible': False})\n    fig.update_yaxes(title_text='Price ($)', row=row, col=column)\n\n    return fig\n\n\nprint('\u2714\ufe0f Function defined!')","988070b8":"def plot_MACD(fig, df, row, column=1):\n    \"\"\"Return a graph object figure containing the MACD indicator, the signal line, and a histogram in the specified row.\"\"\"\n    df['Hist-Color'] = np.where(df['Histogram'] < 0, 'red', 'green')\n    fig.add_trace(go.Bar(x=df['Date'],\n                         y=df['Histogram'],\n                         name='Histogram',\n                         marker_color=df['Hist-Color'],\n                         showlegend=True),\n                  row=row,\n                  col=column)\n\n    fig.add_trace(go.Scatter(x=df['Date'],\n                             y=df['MACD'],\n                             name='MACD',\n                             line=dict(color='darkorange', width=2)),\n                  row=row,\n                  col=column)\n\n    fig.add_trace(go.Scatter(x=df['Date'],\n                             y=df['Signal'],\n                             name='Signal',\n                             line=dict(color='cyan', width=2)),\n                  row=row,\n                  col=column)\n\n    fig.update_yaxes(title_text='MACD', row=row, col=column)\n\n    return fig\n\n\nprint('\u2714\ufe0f Function defined!')","6c334df2":"def plot_RSI(fig, df, row, column=1):\n    \"\"\"Return a graph object figure containing the RSI indicator in the specified row.\"\"\"\n    fig.add_trace(go.Scatter(x=df['Date'].iloc[30:],\n                             y=df['RSI'].iloc[30:],\n                             name='RSI',\n                             line=dict(color='gold', width=2)),\n                  row=row,\n                  col=column)\n\n    fig.update_yaxes(title_text='RSI', row=row, col=column)\n\n    # Add one red horizontal line at 70% (overvalued) and green line at 30% (undervalued)\n    for y_pos, color in zip([70, 30], ['Red', 'Green']):\n        fig.add_shape(x0=df['Date'].iloc[1],\n                      x1=df['Date'].iloc[-1],\n                      y0=y_pos,\n                      y1=y_pos,\n                      type='line',\n                      line=dict(color=color, width=2),\n                      row=row,\n                      col=column)\n\n    # Add a text box for each line\n    for y_pos, text, color in zip([64, 36], ['Overvalued', 'Undervalued'], ['Red', 'Green']):\n        fig.add_annotation(x=df['Date'].iloc[int(df['Date'].shape[0] \/ 10)],\n                           y=y_pos,\n                           text=text,\n                           font=dict(size=14, color=color),\n                           bordercolor=color,\n                           borderwidth=1,\n                           borderpad=2,\n                           bgcolor='lightsteelblue',\n                           opacity=0.75,\n                           showarrow=False,\n                           row=row,\n                           col=column)\n\n    # Update the y-axis limits\n    ymin = 25 if df['RSI'].iloc[30:].min() > 25 else df['RSI'].iloc[30:].min() - 5\n    ymax = 75 if df['RSI'].iloc[30:].max() < 75 else df['RSI'].iloc[30:].max() + 5\n    fig.update_yaxes(range=[ymin, ymax], row=row, col=column)\n\n    return fig\n\n\nprint('\u2714\ufe0f Function defined!')","c5d4327d":"def plot_volume(fig, df, row, column=1):\n    \"\"\"Return a graph object figure containing the volume chart in the specified row.\"\"\"\n    fig.add_trace(go.Bar(x=df['Date'],\n                         y=df['Volume'],\n                         marker=dict(color='lightskyblue',\n                                     line=dict(color='firebrick', width=0.1)),\n                         showlegend=False,\n                         name='Volume'),\n                  row=row,\n                  col=column)\n\n    fig.update_xaxes(title_text='Date', row=row, col=column)\n    fig.update_yaxes(title_text='Volume ($)', row=row, col=column)\n\n    return fig\n\n\nprint('\u2714\ufe0f Function defined!')","f738aaae":"ticker = 'TSLA'\nno_years = 1\n\nend_date = datetime.datetime.now().strftime('%Y-%m-%d')\nstart_date = (datetime.datetime.now() -\n              datetime.timedelta(days=no_years * 365)).strftime('%Y-%m-%d')\n\nprint('Ticker: {}'.format(ticker))\nprint('Start Date: ', start_date)\nprint('  End Date: ', end_date)\n\ndf = get_price(ticker, start_date, end_date)\nclosed_dates_list = get_closed_dates(df)\n\nprint('\\n(Raw) Dataset Loaded!')\nprint('Last five rows:')\ndf.tail()","e8945e10":"df = get_MACD(df)\ndf = get_RSI(df)\n\ndf.tail()","b869336c":"df = get_trading_strategy(df)\n\nprint('\u2714\ufe0f Final DataFrame is ready!')","c3220ebe":"########## Plot the four plots ##########\nfig = make_subplots(rows=4,\n                    cols=1,\n                    shared_xaxes=True,\n                    vertical_spacing=0.005,\n                    row_width=[0.2, 0.3, 0.3, 0.8])\n\nfig = plot_candlestick_chart(fig,\n                             df,\n                             row=1,\n                             plot_EMAs=True,\n                             plot_strategy=True)\nfig = plot_MACD(fig, df, row=2)\nfig = plot_RSI(fig, df, row=3)\nfig = plot_volume(fig, df, row=4)\n\n########## Customise the figure ##########\n# Update xaxis properties\nfig.update_xaxes(rangebreaks=[dict(values=closed_dates_list)],\n                 range=[df['Date'].iloc[0] - datetime.timedelta(days=3), df['Date'].iloc[-1] + datetime.timedelta(days=3)])\n\n# Update basic layout properties (width&height, background color, title, etc.)\nfig.update_layout(width=800,\n                  height=800,\n                  plot_bgcolor='#0E1117',\n                  paper_bgcolor='#0E1117',\n                  title={\n                      'text': '{} - Stock Dashboard'.format(ticker),\n                      'y': 0.98\n                  },\n                  hovermode='x unified',\n                  legend=dict(orientation='h',\n                              xanchor='left',\n                              x=0.05,\n                              yanchor='bottom',\n                              y=1.003))\n\n# Customize axis parameters\naxis_lw, axis_color = 2, 'white'\nfig.update_layout(xaxis1=dict(linewidth=axis_lw,\n                              linecolor=axis_color,\n                              mirror=True,\n                              showgrid=False),\n                  yaxis1=dict(linewidth=axis_lw,\n                              linecolor=axis_color,\n                              mirror=True,\n                              showgrid=False),\n                  font=dict(color=axis_color))\n\nfig.update_layout(xaxis2=dict(linewidth=axis_lw,\n                              linecolor=axis_color,\n                              mirror=True,\n                              showgrid=False),\n                  yaxis2=dict(linewidth=axis_lw,\n                              linecolor=axis_color,\n                              mirror=True,\n                              showgrid=False),\n                  font=dict(color=axis_color))\n\nfig.update_layout(xaxis3=dict(linewidth=axis_lw,\n                              linecolor=axis_color,\n                              mirror=True,\n                              showgrid=False),\n                  yaxis3=dict(linewidth=axis_lw,\n                              linecolor=axis_color,\n                              mirror=True,\n                              showgrid=False),\n                  font=dict(color=axis_color))\n\nfig.update_layout(xaxis4=dict(linewidth=axis_lw,\n                              linecolor=axis_color,\n                              mirror=True,\n                              showgrid=False),\n                  yaxis4=dict(linewidth=axis_lw,\n                              linecolor=axis_color,\n                              mirror=True,\n                              showgrid=False),\n                  font=dict(color=axis_color))\n\nfig.show()","67ec6f35":"## `plot_volume()`","2d43cc90":"## `get_MACD()`","26111c3e":"## `plot_RSI()`","8ca7707d":"## `get_trading_strategy()`","be3090bc":"Once the raw dataset is retrieved, we will apply the `get_MACD()` and `get_RSI()` functions to calculate the two indicators.","d04968bd":"<br>\n\n# The Strategy\n\nIn our case, we will construct our trading strategy based on the MACD indicator and its signal line. Specifically, we will create a 'Buy Signal\u2019 when the MACD crosses above its signal line and a \u2018Sell Signal\u2019 when the MACD crosses below the signal line. The two types of signals will be overlayed on the candlestick chart as triangles (specifically, green up-pointing triangles for \u2018Buy\u2019 and yellow down-pointing triangles for \u2018Sell\u2019). ","3b9a1fa0":"<br>\n\n# Libraries","cf2ca5e0":"## `get_closed_dates()`\n\n[Source](https:\/\/stackoverflow.com\/questions\/61346100\/plotly-how-to-style-a-plotly-figure-so-that-it-doesnt-display-gaps-for-missing)","d0a6b27a":"<br>\n\n# References\n\n[1] [Technical Indicator](https:\/\/www.investopedia.com\/terms\/t\/technicalindicator.asp#:~:text=Technical%20indicators%20are%20heuristic%20or,to%20predict%20future%20price%20movements.) by James Chen on [Investopedia](https:\/\/www.investopedia.com\/) (Retrieved on Jun 11, 2021).\n\n[2] [Technical Analyst](https:\/\/www.investopedia.com\/terms\/t\/technical-analyst.asp) by Adam Hayes\non [Investopedia](https:\/\/www.investopedia.com\/) (Retrieved on Jun 11, 2021).\n\n[3] [Moving Average Convergence Divergence (MACD)](https:\/\/www.investopedia.com\/terms\/m\/macd.asp) by Jason Fernando on [Investopedia](https:\/\/www.investopedia.com\/) (Retrieved on Jun 11, 2021).\n\n[4] [Relative Strength Index (RSI)](https:\/\/www.investopedia.com\/terms\/r\/rsi.asp) by Jason Fernando on [Investopedia](https:\/\/www.investopedia.com\/) (Retrieved on Jun 11, 2021). \n\n[5] [Compute RSI for stocks with python (Relative Strength Index)](https:\/\/tcoil.info\/compute-rsi-for-stocks-with-python-relative-strength-index\/) by Michal Vasulka on [tcoil.info](https:\/\/tcoil.info\/) (Retrieved on Jun 10, 2021).","57e4c1bb":"<br>\n\n# Functions\n\n## `get_price()`","c611f616":"<br>\n\n# Getting the Data\n\nFor this project, we will retrieve data for [TESLA](https:\/\/www.tesla.com\/en_gb)'s stock price. The user can choose another stock (or asset in general) by specifying the `ticker` variable. The user can also select the date range by changing the `no_years` variable.","039e4117":"<br>\n\n# Disclaimer\n\nThis notebook should **not** be used as financial advice. Its sole purpose is to demonstrate how Python can be used as a tool for technical analysis. ","505fd285":"## `plot_MACD()`","add4cab6":"<br>\n\n# Creating the Dashboard","b4075ad3":"<font size=+3 color=\"royalblue\"><center><b>Stock Technical Indicators with Python (MACD & RSI) \ud83d\udcc8\ud83d\udcc9<\/b><\/center><\/font>\n\n<center><img src=\"https:\/\/images.unsplash.com\/photo-1535320903710-d993d3d77d29?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80\" width = 600><\/center>\n<center><em>Photo by @m_b_m (Unsplash)<\/em><\/center>\n\n<br>\n\nI have also turned this notebook into a dashboard application that is now deployed on Heroku. \n- Access the application: [<img src='https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/ec\/Heroku_logo.svg' width=\"100\" align=\"center\">](https:\/\/financial-dashboard-ko.herokuapp.com\/)\n- See the application in action: [<img src='https:\/\/upload.wikimedia.org\/wikipedia\/commons\/0\/09\/YouTube_full-color_icon_%282017%29.svg' width=\"35\" align=\"center\">](https:\/\/youtu.be\/kG7MtRgYHgU)\n- GitHub repository: [<img src='https:\/\/upload.wikimedia.org\/wikipedia\/commons\/9\/91\/Octicons-mark-github.svg' width=\"30\" align=\"center\">](https:\/\/github.com\/KOrfanakis\/Financial_Dashboard_App)\n\n<br>\n\n**Table of Contents**\n\n1. [Objective](#Objective)\n2. [Disclaimer](#Disclaimer)\n3. [Brief Introduction to Technical Indicators](#Brief-Introduction-to-Technical-Indicators)\n4. [The Strategy](#The-Strategy)\n5. [The Dataset](#The-Dataset)\n6. [Libraries](#Libraries)\n7. [Functions](#Functions) <br>\n    - [`get_price()`](#get_price())<br>\n    - [`get_closed_dates()`](#get_closed_dates())<br>\n    - [`get_MACD()`](#get_MACD())<br>\n    - [`get_RSI()`](#get_RSI())<br>\n    - [`get_trading_strategy()`](#get_trading_strategy())<br>\n    - [`plot_candlestick_chart()`](#plot_candlestick_chart())<br>\n    - [`plot_MACD()`](#plot_MACD())<br>\n    - [`plot_RSI()`](#plot_RSI())<br>\n    - [`plot_volume()`](#plot_volume())<br>\n8. [Getting the Data](#Getting-the-Data)\n9. [Creating the Dashboard](#Creating-the-Dashboard)\n10. [References](#References)\n11. [Conclusions](#Conclusions)","d50ac41b":"<br>\n\n# Brief Introduction to Technical Indicators\n\nSimply put, technical indicators are visual tools used by investors\/traders to help them make investment choices. Technical indicators use historical data to interpret and forecast the future price action of a financial asset [[1](#References)]. Together, these indicators form the basis of technical analysis [[2](#References)].\n\nExamples of common technical indicators include the [Relative Strength Index](https:\/\/www.investopedia.com\/terms\/r\/rsi.asp), [Money Flow Index](https:\/\/www.investopedia.com\/terms\/m\/mfi.asp), Stochastics, [MACD](https:\/\/www.investopedia.com\/terms\/m\/macd.asp), and [Bollinger Bands](https:\/\/www.investopedia.com\/terms\/b\/bollingerbands.asp).\n\n<br>\n\nIn this notebook, we will only use two indicators:\n\n1)\t**Moving average convergence divergence** (**MACD**) [[3](#References)]: The MACD is calculated by subtracting the 26-period [exponential moving average](https:\/\/www.investopedia.com\/terms\/e\/ema.asp) (EMA) from the 12-period EMA. \n\nThe result of that calculation is the **MACD line**. A nine-day EMA of the MACD (called the \"**signal line**\") is then plotted on top of the MACD line, which can function as a trigger for buy and sell signals. Traders may buy the asset when the MACD crosses above its signal line and sell the asset when the MACD crosses below the signal line.\n    \n2)\t**Relative Strength Index** (**RSI**) [[4](#References)]: measures the magnitude of recent price changes to evaluate **overbought or oversold** conditions in the price of an asset. The RSI is displayed as an oscillator (a line graph that moves between two extreme values) and can have a value from 0 to 100. \n\nTraditional interpretation and usage of the RSI are that values of 70 or above indicate that a security is becoming overbought or overvalued and may be primed for a trend reversal or corrective pullback in price. An RSI reading of 30 or below indicates an oversold or undervalued condition.\n\n<br>\n\nMACD measures the relationship between two EMAs, while the RSI measures price change in relation to recent price highs and lows. These two indicators are often used together to provide analysts with a more complete technical picture of a market.\n\nBoth indicators measure [momentum](https:\/\/www.investopedia.com\/investing\/momentum-and-relative-strength-index\/) in a market. However,  because they measure different factors, they sometimes give contrary indications [[3](#References)]. \n","c5857e26":"<br>\n\n# Objective\n\nThis notebook demonstrates how we can use Python to calculate and (interactively) visualise stock price information and indicators. Specifically, using [TESLA](https:\/\/www.tesla.com\/en_gb) as an example, we will plot:\n\n- A candlestick chart for the stock's price, along with the 12- and 26-period exponential moving average,\n- The MACD indicator, along with its signal line,\n- The Relative Strength Index (RSI) indicator, and finally,\n- The trading volume.\n\nWe will also construct a simple trading strategy based on the MACD indicator and its signal line.  ","44f24758":"## `plot_candlestick_chart()`","cd3a5921":"Finally, we will run the `get_trading_strategy()` function to get the buy and sell signals.","1d292d8a":"## `get_RSI()`\n\nSource: https:\/\/tcoil.info\/compute-rsi-for-stocks-with-python-relative-strength-index\/","83f3517a":"<br>\n\n# Conclusions\n\n Our notebook came to an end! In summary, we learned how to use Python to import financial data, calculate two technical indicators, and visualise the information. \n\n<br>\n\nPlease consider <font size=+0 color=\"red\"><b>upvoting<\/b><\/font> if you liked this notebook! Thank you! \ud83d\ude09","b7cf0acf":"<br>\n\n# The Dataset\n\nFor retrieving the dataset, we will use [yfinance](https:\/\/pypi.org\/project\/yfinance\/), which *offers a reliable, threaded, and Pythonic way to download historical market data from [Yahoo! finance](https:\/\/uk.finance.yahoo.com\/?guccounter=1&guce_referrer=aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS8&guce_referrer_sig=AQAAANbK-IrF2YG0Ld-bHzjIQiG-omBlDLFLWOSOrbzMJskOcXjC_I-K5KhVcbrZ6d0hBiXW1ZsazEOEyk4W70lXNXM9-ynubzivCYZkJOqUWLZAx-3i2ejqGgFzRoQwFn53rSHtFm_TtBcygZbyZ2JYxDbgPoro-nWrFD7b2TXE2T6l)*. We just need to specify the stock's ticker and the time frame of interest. The extracted dataset contains daily data for the opening, lowest, highest, closing, and [adjusted closing](https:\/\/www.investopedia.com\/terms\/a\/adjusted_closing_price.asp#:~:text=Key%20Takeaways-,The%20adjusted%20closing%20price%20amends%20a%20stock's%20closing%20price%20to,price%20before%20the%20market%20closes.) price of the stock, along with its trading volume."}}