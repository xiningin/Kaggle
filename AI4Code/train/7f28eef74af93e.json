{"cell_type":{"ef87abb9":"code","131e5509":"code","4841d542":"code","d6bdb51d":"code","125895a0":"code","29d81692":"code","266cb237":"code","0d2eeea9":"code","98c62288":"code","0c78dfae":"code","9d495883":"code","e1e7b15e":"code","3a1d982d":"code","bf15d17e":"code","fa2b20e0":"code","ed32de03":"code","223733a4":"code","4013808a":"code","7b0c00eb":"code","0c1f42b7":"code","37052006":"code","10deedd3":"code","c13d333e":"code","03081a83":"code","2d09a320":"code","8a986b1c":"code","06231d01":"markdown","aeca9ef9":"markdown","5c35efc7":"markdown","d6a34eef":"markdown","877f65aa":"markdown","a54a291e":"markdown","67c3dc56":"markdown","29ff7d10":"markdown","d04cbdec":"markdown","f26ad361":"markdown"},"source":{"ef87abb9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","131e5509":"df = pd.read_csv(\"\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv\")\ndf.head()","4841d542":"df.info()","d6bdb51d":"df.isnull().sum()","125895a0":"plt.rcParams['figure.figsize'] =(10,8)\nplt.style.use('classic')\ncolor = plt.cm.PuRd(np.linspace(0,1,3))\ndf['Geography'].value_counts().plot.bar(color=color);","29d81692":"plt.rcParams['figure.figsize'] =(10,8)\nplt.style.use('classic')\ncolor = plt.cm.PuRd(np.linspace(0,1,3))\nsns.countplot(x='Geography',hue='Exited',data=df);","266cb237":"plt.rcParams['figure.figsize'] =(10,8)\nplt.style.use('classic')\ncolor = plt.cm.PuRd(np.linspace(0,1,3))\nsns.countplot(x='Gender',hue='Exited',data=df);","0d2eeea9":"plt.rcParams['figure.figsize'] =(10,8)\nplt.style.use('classic')\ncolor = plt.cm.PuRd(np.linspace(0,1,3))\nsns.countplot(x='Gender',hue='HasCrCard',data=df)","98c62288":"salary = df[['EstimatedSalary','Exited']].nlargest(100,'EstimatedSalary')\nsalary['Exited'].value_counts()","0c78dfae":"salary_small = df[['EstimatedSalary','Exited']].nsmallest(100,'EstimatedSalary')\nsalary_small['Exited'].value_counts()","9d495883":"plt.rcParams['figure.figsize'] =(10,8)\nplt.style.use('classic')\ncolor = plt.cm.PuRd(np.linspace(0,1,3))\nsns.countplot(x='Gender',hue='NumOfProducts',data=df)","e1e7b15e":"facet = sns.FacetGrid(df,hue=\"Exited\",aspect = 4)\nfacet.map(sns.kdeplot,\"Age\",shade = True)\nfacet.set(xlim = (0,df[\"Age\"].max()))\nfacet.add_legend()\nplt.show()","3a1d982d":"facet = sns.FacetGrid(df,hue=\"Exited\",aspect = 4)\nfacet.map(sns.kdeplot,\"Tenure\",shade = True)\nfacet.set(xlim = (0,df[\"Tenure\"].max()))\nfacet.add_legend()\nplt.show()","bf15d17e":"df.drop(['RowNumber','CustomerId','Surname'],axis=1,inplace=True)\ndf = pd.get_dummies(df,drop_first=True)\ndf.head(2)","fa2b20e0":"x = df.drop('Exited',axis=1)\ny = df['Exited']\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)","ed32de03":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","223733a4":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Flatten,Dense","4013808a":"model = Sequential()\nmodel.add(Dense(x.shape[1],activation='relu',input_dim=x.shape[1]))\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dense(1,activation='sigmoid'))","7b0c00eb":"model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])","0c1f42b7":"history =  model.fit(x_train,y_train.to_numpy(),batch_size=8,epochs=10,verbose=1,validation_split=0.2)","37052006":"model.evaluate(x_test,y_test)","10deedd3":"y_pred =model.predict_classes(x_test)","c13d333e":"from sklearn.metrics import accuracy_score,confusion_matrix\naccuracy_score(y_test,y_pred)","03081a83":"#accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Accuracy\")\nplt.legend(['Train','Val'],loc='upper left')\nplt.show()\n\n#Loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Loss')\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend(['Train','Val'],loc='upper left')\nplt.show()","2d09a320":"from mlxtend.plotting import plot_confusion_matrix\nimport matplotlib","8a986b1c":"class_names=['Staying','Leaving']\nmatrix = confusion_matrix(y_test,y_pred)\nplot_confusion_matrix(conf_mat= matrix,figsize=(5,5),class_names=class_names,show_normed=True)\nplt.xticks(rotation=0);","06231d01":"---\n\n<h1 style=\"text-align: center;font-size: 40px;\">Customer Churn Prediction using ANN <\/h1>\n\n---","aeca9ef9":">Plotting Confusion Matrix","5c35efc7":">Plotting Learning Curve","d6a34eef":">Exploratory Data Analysis","877f65aa":">Scaling","a54a291e":"> \"Tenure\" means time of Bond with the company.So after a certain period of time which is between 6 to 9 years the probability of staying with the company is getting Highest","67c3dc56":"> ## Building ANN","29ff7d10":"> Exited status of People with Lowest Number of Salary","d04cbdec":"> People with Ages between 30 to 40  has the highest probability of staying and Ages between 45 to 55 has the highest probability of leaving","f26ad361":"> Exited status of People with Highest Number of Salary "}}