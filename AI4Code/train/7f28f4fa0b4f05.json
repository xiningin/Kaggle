{"cell_type":{"371b6c6f":"code","bfa1aa3a":"code","d3a516e8":"code","e6db66eb":"code","2807cff7":"code","ec4c7d44":"code","facdd4fb":"code","48f70f4c":"code","595d82d6":"code","3d8c244c":"code","b51f8d0d":"code","60f60182":"code","e55f7e1d":"code","e9bc2a88":"code","432c4c6f":"code","bc824372":"code","a69a5264":"code","b581e8ab":"code","801aa97a":"code","5ff44778":"code","19efe046":"code","78b710dc":"code","af14410c":"code","2624f6ee":"code","30409642":"markdown","dd7fd4ef":"markdown"},"source":{"371b6c6f":"import pandas as pd\nimport numpy as np\nimport os\nimport random\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing import text\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Embedding, Flatten, Dense, LSTM, Dropout, Bidirectional, Conv1D, MaxPooling1D\nfrom keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score","bfa1aa3a":"random.seed(42)","d3a516e8":"df = pd.read_csv(\"\/kaggle\/input\/trip-advisor-hotel-reviews\/tripadvisor_hotel_reviews.csv\")","e6db66eb":"df.head()","2807cff7":"df[\"split\"] = df.apply(lambda x: \"train\" if random.randrange(0,100) > 10 else \"valid\", axis=1)","ec4c7d44":"df[\"split\"].value_counts()","facdd4fb":"df[\"Rating\"].value_counts()","48f70f4c":"df_train = df[df[\"split\"] == \"train\"]\ndf_val = df[df[\"split\"] == \"valid\"]","595d82d6":"tokenizer=Tokenizer(oov_token=\"'oov'\")\ntokenizer.fit_on_texts(df_train['Review'])","3d8c244c":"maxlen = 200\ntrain_X = pad_sequences(tokenizer.texts_to_sequences(df_train['Review']), maxlen=maxlen)\nval_X = pad_sequences(tokenizer.texts_to_sequences(df_val['Review']), maxlen=maxlen)","b51f8d0d":"train_Y = df_train[\"Rating\"]\nval_Y = df_val[\"Rating\"]\ntrain_Y_cat = to_categorical(df_train[\"Rating\"]-1, num_classes=5)\nval_Y_cat = to_categorical(df_val[\"Rating\"]-1, num_classes=5)","60f60182":"glove_dir=\"\/kaggle\/input\/glove-global-vectors-for-word-representation\/\"\n\nembedding_index = {}\nf = open(os.path.join(glove_dir,'glove.6B.100d.txt'),encoding='utf8')\nfor line in f:\n    values = line.split()\n    word = values[0]\n    coefs = np.asarray(values[1:],dtype='float32')\n    embedding_index[word] = coefs\nf.close()\nprint('Found %s word vectors ' % len(embedding_index))","e55f7e1d":"max_words = len(tokenizer.word_index) + 1\nembedding_dim = 100\nembedding_matrix = np.zeros((max_words,embedding_dim))\n\nfor word, idx in tokenizer.word_index.items():\n    embedding_vector = embedding_index.get(word)\n    if embedding_vector is not None:\n        embedding_matrix[idx]=embedding_vector","e9bc2a88":"model=Sequential()\nmodel.add(Embedding(max_words, embedding_dim, input_length=maxlen, weights=[embedding_matrix], trainable=False))\nmodel.add(Bidirectional(LSTM(32)))\nmodel.add(Dense(16, activation=\"relu\"))\nmodel.add(Dense(1, activation=\"linear\"))\nmodel.compile(optimizer=\"Adam\", loss='mean_squared_error', metrics=['mse'])\nprint(model.summary())","432c4c6f":"model.fit(train_X, train_Y, epochs=30, batch_size=256, validation_data=(val_X, val_Y))","bc824372":"pred = model.predict(val_X)","a69a5264":"pred_hard = np.array([round(p[0]) for p in pred])","b581e8ab":"pred_hard[pred_hard < 1] = 1\npred_hard[pred_hard > 5] = 5","801aa97a":"np.unique(pred_hard)","5ff44778":"accuracy_score(val_Y, pred_hard)","19efe046":"model=Sequential()\nmodel.add(Embedding(max_words, embedding_dim, input_length=maxlen, weights=[embedding_matrix], trainable=False))\nmodel.add(Bidirectional(LSTM(32)))\nmodel.add(Dense(16, activation=\"relu\"))\nmodel.add(Dense(5, activation=\"softmax\"))\nmodel.compile(optimizer=\"Adam\", loss='categorical_crossentropy', metrics=['accuracy'])\nprint(model.summary())","78b710dc":"model.fit(train_X, train_Y_cat, epochs=30, batch_size=256, validation_data=(val_X, val_Y_cat))","af14410c":"pred = model.predict(val_X)","2624f6ee":"accuracy_score(val_Y, [np.argmax(p)+1 for p in pred])","30409642":"## Regression","dd7fd4ef":"## Classification"}}