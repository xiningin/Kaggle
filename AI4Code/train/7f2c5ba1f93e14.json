{"cell_type":{"8e2e4e4f":"code","180c821c":"code","de562b15":"code","0201685d":"code","146bcd11":"code","acb96737":"code","1b4644c6":"code","4fdcfbc2":"code","a61980cf":"code","805869a1":"code","d8a7b15a":"code","8e1dc20f":"code","b8fcc20d":"code","b6430496":"markdown"},"source":{"8e2e4e4f":"import numpy as np\nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport cv2 ","180c821c":"infected = os.listdir(\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/Parasitized\")\nuninfected = os.listdir(\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/Uninfected\")\n\n\ndata = []\nlabels = []\n\n#obrobka i dodadanie zakazonych komorek\nfor i in infected:\n    try:\n            img = cv2.imread(\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/Parasitized\/\"+i)\n            img = cv2.resize(img,(50,50))\n            img_array = np.array(img)\n            img_array = img_array\/255\n            data.append(img_array)\n            labels.append(1)\n    except:\n        print(\"!\")\nprint(len(data))\n\n","de562b15":"#zaladownie zdrowych komorek\nfor i in uninfected:\n    try:\n        img = cv2.imread(\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/Uninfected\/\"+i)\n        img = cv2.resize(img,(50,50))\n        img_array = np.array(img)\n        img_array = img_array\/255\n        data.append(img_array)\n        labels.append(0)\n    except:\n        print(\"!\")\nprint(len(data))\n\n#zrezygnowa\u0142em z augmentacji danych, z powodu prostego problemu i du\u017cej dost\u0119pno\u015bci zdj\u0119\u0107. ","0201685d":"data = np.array(data)\nprint(data.shape)\nlabels = np.array(labels)\nprint(labels.shape)","146bcd11":"from sklearn.model_selection import train_test_split\n\n#podzial na zbiory testowe i ewaluacyjne, i treningowe\n\ntrain_x , x , train_y , y = train_test_split(data , labels , \n                                            test_size = 0.2 ,\n                                            random_state = 15)\n\neval_x , test_x , eval_y , test_y = train_test_split(x , y , \n                                                    test_size = 0.5 , \n                                                    random_state = 15)","acb96737":"print(f\"train: {train_x.shape}, val: {eval_x.shape}, test: {test_x.shape}\")","1b4644c6":"plt.figure(1 , figsize = (15 , 9))\nn = 0 \nfor i in range(25):\n    n += 1 \n    r = np.random.randint(0 , train_x.shape[0] , 1)\n    plt.subplot(5 , 5 , n)\n    plt.subplots_adjust(hspace = 0.3 , wspace = 0.3)\n    plt.imshow(train_x[r[0]])\n    plt.title(f\"{'Infected' if train_y[r[0]] == 1 else 'Unifected'} : {train_y[r[0]]}\")\n    plt.xticks([]) , plt.yticks([])\n    \nplt.show()","4fdcfbc2":"from keras import layers\nfrom keras import models\n\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32,(3,3), activation ='relu', input_shape = (50,50,3)))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64,(3,3), activation ='relu'))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(128,(3,3), activation ='relu'))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(512,activation='relu'))\nmodel.add(layers.Dense(1,activation='sigmoid'))\n\n\n\n\n","a61980cf":"model.summary()\n","805869a1":"model.compile(loss =\"binary_crossentropy\", optimizer='rmsprop', metrics=['acc'])","d8a7b15a":"history = model.fit(train_x, train_y, epochs=20, batch_size=16, validation_data=(eval_x,eval_y))","8e1dc20f":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs=range(len(acc))\n\nplt.plot(epochs, acc, 'bo', label='Dokladnosc trenowania')\nplt.plot(epochs,val_acc, 'b', label='Dokladnosc walidacji')\n\nplt.legend()\nplt.figure()\n\nplt.plot(epochs, loss, 'bo', label='Strata trenowania')\nplt.plot(epochs,val_loss, 'b', label='Strata walidacji')\n\nplt.legend()\n\nplt.show()\n","b8fcc20d":"_, test_acc = model.evaluate(test_x, test_y)\nprint(test_acc)","b6430496":"**CNN used for detecting malaria. Accuracy is equal 95%**\n"}}