{"cell_type":{"72705c2d":"code","63037186":"code","0b22d0c7":"code","73461b99":"code","ac35957a":"code","1f5fe612":"code","a2e9ad23":"code","15bf5d08":"code","706a6b2d":"code","96c44902":"code","2c202246":"code","c63e8999":"code","307f2946":"code","fc07deed":"code","0413f0ee":"code","4c6b235a":"code","0b5f4684":"code","4a5933ea":"code","51a29bf1":"code","b52278dd":"code","487639e9":"code","895b6062":"code","0ed8fbfb":"code","1eb1db1e":"code","b4f2fd5c":"code","1ae2f42b":"code","f41a6556":"code","c67acda3":"code","a29846f5":"code","fa4f75d4":"code","f4313f5c":"code","d0c416b8":"code","3ff5c262":"code","e87aa075":"code","83ddfd74":"code","63ac1bb6":"code","09bfac20":"code","4281d574":"code","29ae714e":"code","e6098262":"code","e1d10878":"code","6ccc52c7":"code","67c628b2":"code","059f1e7e":"code","874f1be0":"code","2f2dc709":"code","a49b9dd6":"code","990fcd02":"code","062e6e8b":"markdown","fe7c3605":"markdown","56432248":"markdown"},"source":{"72705c2d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","63037186":"submission = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/sampleSubmission.csv')\ntrain = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/test.csv')","0b22d0c7":"train.head()","73461b99":"test.head()","ac35957a":"train.info()","1f5fe612":"# \uacb0\uce21\uce58 \ud655\uc778\ntrain.isnull().sum()","a2e9ad23":"test.isnull().sum()","15bf5d08":"train.corr()","706a6b2d":"# \uc0c1\uad00\uad00\uacc4 \uc2dc\uac01\ud654\nplt.figure(figsize=(12, 12))\nsns.heatmap(train.corr(), annot=True)","96c44902":"train['datetime'] = pd.to_datetime(train['datetime'])\ntest['datetime'] = pd.to_datetime(test['datetime'])","2c202246":"train['year'] = train['datetime'].dt.year\ntrain['month'] = train['datetime'].dt.month\ntrain['day'] = train['datetime'].dt.day\ntrain['hour'] = train['datetime'].dt.hour\ntrain['minute'] = train['datetime'].dt.minute\ntrain['second'] = train['datetime'].dt.second\ntrain['dayofweek'] = train['datetime'].dt.dayofweek","c63e8999":"test['year'] = test['datetime'].dt.year\ntest['month'] = test['datetime'].dt.month\ntest['day'] = test['datetime'].dt.day\ntest['hour'] = test['datetime'].dt.hour\ntest['minute'] = test['datetime'].dt.minute\ntest['second'] = test['datetime'].dt.second\ntest['dayofweek'] = test['datetime'].dt.dayofweek","307f2946":"train.head()","fc07deed":"train.groupby('season')['count'].mean().plot(kind='bar')","0413f0ee":"import seaborn as sns","4c6b235a":"sns.countplot(train['month'])","0b5f4684":"sns.barplot(x='month', y='count', hue='year', data=train)","4a5933ea":"sns.boxplot(x='month', y='count', hue='year', data=train)","51a29bf1":"import matplotlib.pyplot as plt","b52278dd":"plt.figure(figsize=(12, 8))\nsns.pointplot(x='hour', y='count', hue='dayofweek', data=train)","487639e9":"plt.figure(figsize=(12, 8))\nsns.pointplot(x='hour', y='registered', data=train)","895b6062":"plt.figure(figsize=(12, 8))\nsns.pointplot(x='hour', y='casual', data=train)","0ed8fbfb":"train.columns","1eb1db1e":"sorted(train['day'].value_counts().keys())","b4f2fd5c":"sorted(test['day'].value_counts().keys())","1ae2f42b":"train.loc[train['windspeed'] == 0, 'windspeed'] = np.nan\ntest.loc[test['windspeed'] == 0, 'windspeed'] = np.nan","f41a6556":"train['windspeed'].isnull().sum()","c67acda3":"test['windspeed'].isnull().sum()","a29846f5":"train['windspeed'] = train['windspeed'].interpolate().fillna(train['windspeed'].median())","fa4f75d4":"test['windspeed'] = test['windspeed'].interpolate().fillna(test['windspeed'].median())","f4313f5c":"plt.plot(test.loc[:1000, 'windspeed'])","d0c416b8":"plt.figure(figsize=(10, 8))\nsns.histplot(train['count'])","3ff5c262":"plt.figure(figsize=(10, 8))\nsns.histplot(np.log(train['count']))","e87aa075":"a = 10","83ddfd74":"b = np.log1p(a)\nb","63ac1bb6":"np.expm1(b)","09bfac20":"cols = [\n    #'datetime', \n    'season', \n    'holiday', \n    'workingday', \n    'weather', \n    'temp',\n    'atemp',  # atemp \uc81c\uac70\ud560 \uc608\uc815: \uc0c1\uad00\uad00\uacc4\uac00 0.98\ub85c \uc0c1\ub2f9\ud788 \ub192\uc74c. \ub2e4\uc911\uacf5\uc131\uc120 \uc774\uc288\ub85c \uc784\uc758 \uc81c\uac70\ud568.\n    'humidity', \n    'windspeed',\n    'year', \n    'month', \n#     'day', \n    'hour', \n    'dayofweek',\n]","4281d574":"# labels = [\n#     'count'\n# ]","29ae714e":"from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor","e6098262":"train[cols]","e1d10878":"train[labels]","6ccc52c7":"# \ubaa8\ub378(RandomForest) \ud559\uc2b5, \ube44\ud68c\uc6d0(casual)\uc744 \uc608\uce21\ud558\ub294 \ubaa8\ub378 \uc0dd\uc131\nmodel1 = RandomForestRegressor(n_estimators=300)\nmodel1.fit(train[cols], np.log1p(train['casual']))","67c628b2":"# \ubaa8\ub378(RandomForest) \ud559\uc2b5, \ud68c\uc6d0(registered)\uc744 \uc608\uce21\ud558\ub294 \ubaa8\ub378 \uc0dd\uc131\nmodel2 = RandomForestRegressor(n_estimators=300)\nmodel2.fit(train[cols], np.log1p(train['registered']))","059f1e7e":"# \ube44\ud68c\uc6d0, \ud68c\uc6d0\uc758 \uc790\uc804\uac70 \ub300\uc5ec\ub7c9\uc744 \uac01\uac01 \uc608\uce21 \ud6c4\uc5d0 \ud569\uc0b0 \uc608\uc815\n# \ubaa8\ub378\uc744 \ud65c\uc6a9\ud55c \uc608\uce21 \ucf54\ub4dc\npred1 = model1.predict(test[cols])\npred2 = model2.predict(test[cols])","874f1be0":"pred = np.expm1(pred1) + np.expm1(pred2)","2f2dc709":"# \uc815\ub2f5 \ud30c\uc77c\uc5d0 \uae30\uc785\nsubmission['count'] = pred","a49b9dd6":"submission['count']","990fcd02":"submission.to_csv('08-submission.csv', index=False)","062e6e8b":"## \ub370\uc774\ud130\uc758 \uae30\ubcf8 \uad6c\uc870 \ud655\uc778, \uacb0\uce21\uce58 \ud655\uc778, \uceec\ub7fc\ubcc4 \uc815\ubcf4 \ud655\uc778","fe7c3605":"## interpolation\n[interpolation \uc608\uc81c](https:\/\/teddylee777.github.io\/pandas\/pandas-interpolation\n)","56432248":"## datetime \uceec\ub7fc \ud65c\uc6a9"}}