{"cell_type":{"5ea2b764":"code","4d7c37b7":"code","29f03914":"code","1a1b4dc4":"code","06b25fc2":"code","862be8db":"code","d6714494":"code","b75e2c16":"code","b2a7870e":"code","d08d84c8":"code","a50e92fb":"code","2adb50a2":"code","edb577a7":"code","f1891d8b":"markdown","f0fd2d09":"markdown","a214b88b":"markdown","ecf7bfeb":"markdown","a955fdc8":"markdown","c36ae818":"markdown"},"source":{"5ea2b764":"import numpy as np\nimport pandas as pd\nimport os, sys, gc, time, warnings, pickle, psutil, random","4d7c37b7":"def get_used_memory_MB():\n    return np.round(psutil.Process(os.getpid()).memory_info().rss \/ 1024 ** 2,2)","29f03914":"def get_used_memory_df(df):\n    return np.round(df.memory_usage().sum() \/ 1024 ** 2,2)","1a1b4dc4":"def reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df","06b25fc2":"print('Using total Memory=', get_used_memory_MB(),\"MB\")","862be8db":"train = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/test.csv\")","d6714494":"print('Using total Memory=', get_used_memory_MB(),\"MB\")","b75e2c16":"print(\"train memroy = \",get_used_memory_df(train),\"MB\")\ntrain_reduce = reduce_memory_usage(train)\nprint(\"test memory = \",get_used_memory_df(train_reduce),\"MB\")","b2a7870e":"print(\"train memroy = \",get_used_memory_df(test),\"MB\")\ntest_reduce = reduce_memory_usage(test)\nprint(\"test memory = \",get_used_memory_df(test_reduce),\"MB\")","d08d84c8":"print('Using total Memory=', get_used_memory_MB(),\"MB\")","a50e92fb":"del train\ndel test\ngc.collect()","2adb50a2":"print(\"train memroy = \",get_used_memory_df(train_reduce),\"MB\")\nprint(\"test memory = \",get_used_memory_df(test_reduce),\"MB\")","edb577a7":"print('Using total Memory=', get_used_memory_MB(),\"MB\")","f1891d8b":"# reduce memory fuction","f0fd2d09":"# reduce data","a214b88b":"# load data","ecf7bfeb":"# get total using memory","a955fdc8":"# get datafame memory","c36ae818":"# garbage collect"}}