{"cell_type":{"fddfff87":"code","a07d1027":"code","950ef5be":"code","5ce28b8f":"code","09881547":"code","bd08d081":"code","31df62af":"code","3523f632":"code","66f5f923":"code","23eb1043":"code","13ab0814":"code","266a5a74":"code","504bd0bb":"code","335020c8":"code","49979da3":"code","6fc3f603":"code","5d226764":"code","1d4c54ec":"code","e2402826":"code","ce0c38fc":"code","7d4a3565":"code","12d34373":"code","528a5a2c":"code","fb28751d":"code","bc9903b3":"code","69eb1b8d":"code","928f19cc":"code","db30108f":"code","9e16b0ec":"code","3ff291bd":"code","3cfe53f2":"code","e9cd2e8d":"code","b9e62e4c":"code","c1f95e19":"code","1e3f5873":"code","ecb3dae7":"code","0d981be0":"code","b4a18437":"code","0d661faa":"code","cf9613e3":"code","ced30ecd":"code","36a9bf94":"code","193582d6":"code","9058f7fd":"code","7fda3f28":"code","df1cc93b":"code","4d03092e":"code","2a6160e1":"code","abaf2560":"code","3aa45827":"code","10852925":"code","e2bc25e3":"code","0136c6ea":"code","f478c62d":"code","5feb3015":"code","228ff4fa":"code","55e6d38f":"code","3696fbc9":"code","4479b03a":"code","13282c80":"code","36d9abce":"code","e51aaf46":"code","3ef58836":"code","c24345e0":"code","0399c3bf":"code","1bc7e880":"code","29854c29":"code","12796e0b":"code","7efe6d26":"code","ac4e6f35":"code","e6326fed":"code","026da99e":"code","3c34102d":"code","87a018a2":"code","72480fde":"code","e3a1ead2":"code","3cc143c9":"code","71b49f40":"code","bd46634f":"code","685c8da3":"code","06840124":"code","9e0a8a57":"code","9c9bf95d":"code","6d36160e":"code","9e681f91":"code","30edafca":"code","fbf36e60":"code","a5f58c69":"code","13516276":"code","663133f3":"code","79c1f1ae":"code","fb472d9f":"code","310353ca":"code","b7acfb2f":"code","20ec2c01":"code","67885adf":"code","f175a1ff":"code","db3e5f5a":"code","e46ea1d5":"code","12d3f5b6":"code","bcb5ce27":"code","5d81d505":"code","cd0fca16":"code","587ddf08":"code","2a43724e":"code","a480347e":"code","746e90a8":"code","30a43ada":"code","27a3e760":"code","3570d8c6":"code","6cd91258":"code","7ba1ba76":"markdown","5d5db001":"markdown","7aa27fb9":"markdown","3dc16f49":"markdown","1c0ebed4":"markdown","7bac7f25":"markdown","fb3ebdf8":"markdown","7310edb1":"markdown","d0827a81":"markdown","1dd6c3e7":"markdown","b9e01110":"markdown","14c7b68f":"markdown","80691baa":"markdown","f1084dcd":"markdown","205afe6c":"markdown","a11f0723":"markdown","d80ef153":"markdown","16161ca6":"markdown","2ad5fbb1":"markdown","10e407b6":"markdown","f2fd943b":"markdown","33ff4446":"markdown","3fbd2563":"markdown","688ce00e":"markdown","435371d2":"markdown","604730ea":"markdown","4f1a9f48":"markdown","5e835dee":"markdown","a4e93f55":"markdown","9f7d1b0f":"markdown","d453619d":"markdown","0bde9b1f":"markdown","7c477bb8":"markdown","ed4b35bd":"markdown","0dec83c6":"markdown","041a2524":"markdown","2c468131":"markdown","c1bbeb5d":"markdown","6a57876f":"markdown","fa62ea74":"markdown","e1b8ce34":"markdown","b9a678df":"markdown","8e5a59e2":"markdown","1196cdbc":"markdown","4bc96584":"markdown","2edeec26":"markdown","8fd375ae":"markdown","12966793":"markdown","2c084752":"markdown","4bb0d476":"markdown","7a8639f7":"markdown","4573133e":"markdown","777a1bf7":"markdown","9bbb5769":"markdown","50848f54":"markdown","8867b558":"markdown","0105ebe4":"markdown","2dea64f8":"markdown","21d69dfc":"markdown","a4d6f32b":"markdown","042aa01a":"markdown"},"source":{"fddfff87":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a07d1027":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nbase_color = sns.color_palette()[0]","950ef5be":"data_df = pd.read_csv('\/kaggle\/input\/patient-survey-score-with-demographics\/pxdata.csv')\ndata_df.head(2)","5ce28b8f":"data_df.isnull().sum()","09881547":"data_df.dtypes","bd08d081":"data_df.nunique()","31df62af":"data_df['Perfect'].value_counts()","3523f632":"data_df['Rate'].value_counts()","66f5f923":"data_df['Recommend'].value_counts()","23eb1043":"data_df['Health'].value_counts()","13ab0814":"data_df['Mental'].value_counts()","266a5a74":"data_df['College'].value_counts()","504bd0bb":"data_df['White'].value_counts()","335020c8":"data_df['English'].value_counts()","49979da3":"data_df['Service'].value_counts()","6fc3f603":"data_df['Specialty'].value_counts()","5d226764":"data_df['Unit'].value_counts()","1d4c54ec":"data_df['Source'].value_counts()","e2402826":"data_df['Home'].value_counts()","ce0c38fc":"data_df['Age'].unique()","7d4a3565":"data_df['Stay'].unique()","12d34373":"data_df['Visit'].unique()","528a5a2c":"cleaned_data = data_df.copy()","fb28751d":"cleaned_data['Date'] = pd.to_datetime(cleaned_data['Date'])","bc9903b3":"cleaned_data.dtypes","69eb1b8d":"cleaned_data['Perfect'] = cleaned_data['Perfect'].apply(lambda x : True if x==1 else False)\ncleaned_data['College'] = cleaned_data['College'].apply(lambda x : True if x=='Y' else False)\ncleaned_data['White'] = cleaned_data['White'].apply(lambda x : True if x=='Y' else False)\ncleaned_data['English'] = cleaned_data['English'].apply(lambda x : True if x=='Y' else False)","928f19cc":"cleaned_data.dtypes","db30108f":"cleaned_data['Stay'] = cleaned_data['Stay'].replace({'2+':'2-3', '4+': '4-7'})","9e16b0ec":"cleaned_data['Stay'].unique()","3ff291bd":"cleaned_data['Age'] = cleaned_data[\"Age\"].apply(lambda x: '90+' if x=='80+' else x)","3cfe53f2":"cleaned_data['Age'].unique()","e9cd2e8d":"from pandas.api.types import CategoricalDtype\nage_cat = CategoricalDtype(['18-34', '35-49', '50-64', '65-79', '80-90', '90+'], ordered=True)","b9e62e4c":"cleaned_data['Age'] = cleaned_data['Age'].astype(age_cat)","c1f95e19":"cleaned_data['Age'].dtype","1e3f5873":"stay_cat = CategoricalDtype(['1', '2-3', '4-7', '8+'], ordered=True)\ncleaned_data['Stay'] = cleaned_data['Stay'].astype(stay_cat)","ecb3dae7":"cleaned_data.dtypes","0d981be0":"cleaned_data['Composite'].hist(bins=100)\nplt.xlabel('Composite')\nplt.ylabel('Count')\nplt.show()","b4a18437":"fig = plt.figure(figsize=(10,10))\nax1 = fig.add_subplot(2,2,1)\nax2 = fig.add_subplot(2,2,2)\nax3 = fig.add_subplot(2,2,3)\nax4 = fig.add_subplot(2,2,4)\nsns.countplot(x='Perfect', data=cleaned_data, ax=ax1, color=base_color)\nsns.countplot(x='College', data=cleaned_data, ax=ax2, color=base_color)\nsns.countplot(x='White', data=cleaned_data, ax=ax3, color=base_color)\nsns.countplot(x='English', data=cleaned_data, ax=ax4, color=base_color)\nplt.tight_layout()\nplt.show()","0d661faa":"fig = plt.figure(figsize=(10,5))\nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\nsns.countplot(x='Rate', data=cleaned_data, ax=ax1, color=base_color)\nsns.countplot(x='Recommend', data=cleaned_data, ax=ax2, color=base_color)\nplt.tight_layout()\nplt.show()","cf9613e3":"fig = plt.figure(figsize=(10,5))\nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\nsns.countplot(x='Health', data=cleaned_data, ax=ax1, color=base_color)\nsns.countplot(x='Mental', data=cleaned_data, ax=ax2, color=base_color)\nplt.tight_layout()\nplt.show()","ced30ecd":"fig = plt.figure(figsize=(15,5))\nax1 = fig.add_subplot(1,3,1)\nax2 = fig.add_subplot(1,3,2)\nax3 = fig.add_subplot(1,3,3)\nsns.countplot(x='Age', data=cleaned_data, ax=ax1, color=base_color)\nsns.countplot(x='Sex', data=cleaned_data, ax=ax2, color=base_color)\nsns.countplot(x='Home', data=cleaned_data, ax=ax3, color=base_color)\nplt.tight_layout()\nplt.show()","36a9bf94":"fig = plt.figure(figsize=(10,5))\nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\nsns.countplot(x='Source', data=cleaned_data, ax=ax1, color=base_color)\nsns.countplot(x='Service', data=cleaned_data, ax=ax2, color=base_color)\nplt.tight_layout()\nplt.show()","193582d6":"fig = plt.figure(figsize=(10,5))\nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\nsns.countplot(x='Unit', data=cleaned_data, ax=ax1, color=base_color)\nsns.countplot(x='Specialty', data=cleaned_data, ax=ax2, color=base_color)\nplt.tight_layout()\nplt.show()","9058f7fd":"fig = plt.figure(figsize=(10,5))\nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\nsns.countplot(x='Stay', data=cleaned_data, ax=ax1, color=base_color)\nsns.countplot(x='Visit', data=cleaned_data, ax=ax2, color=base_color)\nplt.tight_layout()\nplt.show()","7fda3f28":"cleaned_data['Date'].hist(bins=100)\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.show()","df1cc93b":"cleaned_data['Month'] = cleaned_data['Date'].apply(lambda x : x.strftime(\"%B\"))","4d03092e":"cleaned_data['Day_of_Week'] = cleaned_data['Date'].apply(lambda x: x.strftime(\"%A\"))","2a6160e1":"m_cat = CategoricalDtype(['January', 'February', 'March', 'April', 'May', 'June', 'July', \n                          'August', 'September', 'October', 'November', 'December'], ordered=True)\nd_w_cat = CategoricalDtype(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', \n                            'Saturday', 'Sunday'], ordered=True)","abaf2560":"cleaned_data['Month'] = cleaned_data['Month'].astype(m_cat)\ncleaned_data['Day_of_Week'] = cleaned_data['Day_of_Week'].astype(d_w_cat)","3aa45827":"cleaned_data['Month'].unique()","10852925":"cleaned_data['Day_of_Week'].unique()","e2bc25e3":"fig = plt.figure(figsize=(12,5))\nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\nch1 = sns.countplot(x='Month', data=cleaned_data, ax=ax1, color=base_color)\nch1.set_xticklabels(labels = ch1.get_xticklabels(), rotation=45)\nch2 = sns.countplot(x='Day_of_Week', data=cleaned_data, ax=ax2, color=base_color)\nch2.set_xticklabels(labels = ch2.get_xticklabels(), rotation=45)\nplt.tight_layout()\nplt.show()","0136c6ea":"d_m = cleaned_data[cleaned_data['Sex']=='M']\nsns.distplot(d_m['Composite'],kde=False, label='Male')\nd_f = cleaned_data[cleaned_data['Sex']=='F']\nsns.distplot(d_f['Composite'],kde=False, label='Female')\nplt.legend(prop={'size': 12})\nplt.title('Distrubtion of Composite per Gender')\nplt.xlabel('Composite')\nplt.ylabel('Count')\nplt.show()","f478c62d":"fig = plt.figure(figsize=(10,10))\nax1 = fig.add_subplot(2,2,1)\nax2 = fig.add_subplot(2,2,2)\nax3 = fig.add_subplot(2,2,3)\nax4 = fig.add_subplot(2,2,4)\nsns.countplot(x='Perfect', data=cleaned_data, ax=ax1, hue='Sex')\nsns.countplot(x='College', data=cleaned_data, ax=ax2, hue='Sex')\nsns.countplot(x='White', data=cleaned_data, ax=ax3, hue='Sex')\nsns.countplot(x='English', data=cleaned_data, ax=ax4, hue='Sex')\nplt.tight_layout()\nplt.show()","5feb3015":"fig = plt.figure(figsize=(10,5))\nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\nsns.countplot(x='Rate', data=cleaned_data, ax=ax1, hue='Sex')\nsns.countplot(x='Recommend', data=cleaned_data, ax=ax2, hue='Sex')\nplt.tight_layout()\nplt.show()","228ff4fa":"d_m = cleaned_data[cleaned_data['Visit']==0]\nsns.distplot(d_m['Composite'],kde=False, label='No Visit')\nd_f = cleaned_data[cleaned_data['Visit']==1]\nsns.distplot(d_f['Composite'],kde=False, label='Visit')\nplt.legend(prop={'size': 12})\nplt.title('Distrubtion of Composite per Visit')\nplt.xlabel('Composite')\nplt.ylabel('Count')\nplt.show()","55e6d38f":"fig = plt.figure(figsize=(10,10))\nax1 = fig.add_subplot(2,2,1)\nax2 = fig.add_subplot(2,2,2)\nax3 = fig.add_subplot(2,2,3)\nax4 = fig.add_subplot(2,2,4)\nsns.countplot(x='Perfect', data=cleaned_data, ax=ax1, hue='Visit')\nsns.countplot(x='College', data=cleaned_data, ax=ax2, hue='Visit')\nsns.countplot(x='White', data=cleaned_data, ax=ax3, hue='Visit')\nsns.countplot(x='English', data=cleaned_data, ax=ax4, hue='Visit')\nplt.tight_layout()\nplt.show()","3696fbc9":"fig = plt.figure(figsize=(10,5))\nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\nsns.countplot(x='Rate', data=cleaned_data, ax=ax1, hue='Visit')\nsns.countplot(x='Recommend', data=cleaned_data, ax=ax2, hue='Visit')\nplt.tight_layout()\nplt.show()","4479b03a":"fig = plt.figure(figsize=(15,5))\nax1 = fig.add_subplot(1,3,1)\nax2 = fig.add_subplot(1,3,2)\nax3 = fig.add_subplot(1,3,3)\nsns.countplot(x='Age', data=cleaned_data, ax=ax1, hue='Visit')\nsns.countplot(x='Sex', data=cleaned_data, ax=ax2, hue='Visit')\nsns.countplot(x='Home', data=cleaned_data, ax=ax3, hue='Visit')\nplt.tight_layout()\nplt.show()","13282c80":"sns.catplot(x='Month', data=cleaned_data, kind='count', hue='Visit', aspect=2)\nplt.show()","36d9abce":"sns.catplot(x='Day_of_Week', kind='count', data=cleaned_data, hue='Visit', aspect=1.2)\nplt.show()","e51aaf46":"sns.catplot(x='Day_of_Week', data=cleaned_data, y='Visit', kind='bar', aspect=1.2, ci=None, color=base_color)\nplt.ylabel('Probability of Visit')\nplt.show()","3ef58836":"sns.catplot(x='Age', data=cleaned_data, y='Visit', kind='bar', aspect=1.2, ci=None, color=base_color)\nplt.ylabel('Probability of Visit')\nplt.show()","c24345e0":"sns.catplot(x='Sex', data=cleaned_data, y='Visit', kind='bar', aspect=0.8, ci=None, color=base_color)\nplt.ylabel('Probability of Visit')\nplt.show()","0399c3bf":"import statsmodels.api as sm\nfemale = cleaned_data[cleaned_data['Sex']=='F']\nmale = cleaned_data[cleaned_data['Sex']=='M']\ncounts = np.array([female['Visit'].sum(), \n                   male['Visit'].sum()])\nnobs = np.array([female.shape[0], male.shape[0]])\nzstat, pval = sm.stats.proportions_ztest(counts, nobs, alternative='smaller')\nzstat, pval","1bc7e880":"sns.catplot(x='Mental', data=cleaned_data, y='Visit', kind='bar', aspect=1.2, ci=None, color=base_color)\nplt.ylabel('Probability of Visit')\nplt.show()","29854c29":"sns.catplot(x='College', data=cleaned_data, y='Visit', kind='bar', aspect=0.8, ci=None, color=base_color)\nplt.ylabel('Probability of Visit')\nplt.show()","12796e0b":"collage = cleaned_data[cleaned_data['College']]\nno_collage = cleaned_data[cleaned_data['College']==False]\ncounts = np.array([collage['Visit'].sum(), \n                   no_collage['Visit'].sum()])\nnobs = np.array([collage.shape[0], no_collage.shape[0]])\nzstat, pval = sm.stats.proportions_ztest(counts, nobs, alternative='smaller')\nzstat, pval","7efe6d26":"sns.catplot(x='White', data=cleaned_data, y='Visit', kind='bar', aspect=0.8, ci=None, color=base_color)\nplt.ylabel('Probability of Visit')\nplt.show()","ac4e6f35":"co = cleaned_data[cleaned_data['White']]\nno = cleaned_data[cleaned_data['White']==False]\ncounts = np.array([co['Visit'].sum(), \n                   no['Visit'].sum()])\nnobs = np.array([co.shape[0], no.shape[0]])\nzstat, pval = sm.stats.proportions_ztest(counts, nobs, alternative='smaller')\nzstat, pval","e6326fed":"cleaned_data.corr()","026da99e":"fig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(1,1,1)\nsns.heatmap(cleaned_data.corr(), ax=ax);","3c34102d":"y = cleaned_data['Visit']\nX = cleaned_data[[x for x in cleaned_data.columns if x not in ['Survey', 'Visit', 'Date']]]","87a018a2":"X['White'] = X['White'].astype('int32')\nX['College'] = X['College'].astype('int32')\nX['English'] = X['English'].astype('int32')\nX['Perfect'] = X['Perfect'].astype('int32')","72480fde":"X['Sex'] = X['Sex'].replace({'F':0, 'M':1})","e3a1ead2":"X['Source'] = X['Source'].replace({'D':1,'T':0})","3cc143c9":"X = pd.get_dummies(X, columns=['Service', 'Home', 'Specialty', 'Unit'])","71b49f40":"X.columns","bd46634f":"X.drop(['Service_O', 'Home_Y', 'Specialty_1', 'Unit_3'], axis=1, inplace=True)","685c8da3":"X['Month'] = X['Month'].replace({'January':0, 'February':1, 'March':2, 'April':3, 'May':4, 'June':5, 'July':6, \n                                 'August':7, 'September':8, 'October':9, 'November':10, 'December':11})\nX['Day_of_Week'] = X['Day_of_Week'].replace({'Monday':0, 'Tuesday':1, 'Wednesday':2, 'Thursday':3, 'Friday':4, \n                                             'Saturday':5, 'Sunday':6})\nX['Age'] = X['Age'].replace({'18-34':0, '35-49':1, '50-64':2, '65-79':3, '80-90':4, '90+':5})\nX['Stay'] = X['Stay'].replace({'1':0, '2-3':1, '4-7':2, '8+':3})","06840124":"X.dtypes","9e0a8a57":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import roc_auc_score, roc_curve, auc","9c9bf95d":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0, train_size=0.7)","6d36160e":"Performances=[]","9e681f91":"from sklearn.tree import DecisionTreeClassifier","30edafca":"dtc = DecisionTreeClassifier(random_state=0)\ndtc.fit(X_train, y_train)","fbf36e60":"model={'Model': 'DecisionTree'}\nmodel['Accuracy'] = accuracy_score(y_test, dtc.predict(X_test))\nmodel['Precision'] = precision_score(y_test, dtc.predict(X_test))\nmodel['F1-Score'] = f1_score(y_test, dtc.predict(X_test))\nPerformances.append(model)","a5f58c69":"confusion_matrix(y_test, dtc.predict(X_test))","13516276":"print(classification_report(y_test, dtc.predict(X_test)))","663133f3":"dtc_features = pd.DataFrame()\ndtc_features['Feature'] = X_train.columns.tolist()\ndtc_features['Importance'] = dtc.feature_importances_\nsns.catplot(y='Feature', x='Importance', data=dtc_features, kind='bar', height=15, color=base_color)\nplt.show()","79c1f1ae":"from sklearn.ensemble import RandomForestClassifier","fb472d9f":"rfc = RandomForestClassifier(n_estimators=100, random_state=0)\nrfc.fit(X_train, y_train)","310353ca":"model={'Model': 'RandomForest'}\nmodel['Accuracy'] = accuracy_score(y_test, rfc.predict(X_test))\nmodel['Precision'] = precision_score(y_test, rfc.predict(X_test))\nmodel['F1-Score'] = f1_score(y_test, rfc.predict(X_test))\nPerformances.append(model)","b7acfb2f":"confusion_matrix(y_test, rfc.predict(X_test))","20ec2c01":"print(classification_report(y_test, rfc.predict(X_test)))","67885adf":"rfc_features = pd.DataFrame()\nrfc_features['Feature'] = X_train.columns.tolist()\nrfc_features['Importance'] = rfc.feature_importances_\nsns.catplot(y='Feature', x='Importance', data=rfc_features, kind='bar', height=15, color=base_color)\nplt.show()","f175a1ff":"from xgboost import XGBClassifier","db3e5f5a":"xgb = XGBClassifier(n_estimators=100,random_state=0)\nxgb.fit(X_train, y_train)","e46ea1d5":"model={'Model': 'XGBoost'}\nmodel['Accuracy'] = accuracy_score(y_test, xgb.predict(X_test))\nmodel['Precision'] = precision_score(y_test, xgb.predict(X_test))\nmodel['F1-Score'] = f1_score(y_test, xgb.predict(X_test))\nPerformances.append(model)","12d3f5b6":"confusion_matrix(y_test, xgb.predict(X_test))","bcb5ce27":"print(classification_report(y_test, xgb.predict(X_test)))","5d81d505":"xgb_features = pd.DataFrame()\nxgb_features['Feature'] = X_train.columns.tolist()\nxgb_features['Importance'] = xgb.feature_importances_\nsns.catplot(y='Feature', x='Importance', data=xgb_features, kind='bar', height=15, color=base_color)\nplt.show()","cd0fca16":"from catboost import CatBoostClassifier","587ddf08":"cb = CatBoostClassifier(n_estimators=2500, random_state=0)\ncb.fit(X_train, y_train)","2a43724e":"model={'Model': 'CatBoost'}\nmodel['Accuracy'] = accuracy_score(y_test, cb.predict(X_test))\nmodel['Precision'] = precision_score(y_test, cb.predict(X_test))\nmodel['F1-Score'] = f1_score(y_test, cb.predict(X_test))\nPerformances.append(model)","a480347e":"confusion_matrix(y_test, cb.predict(X_test))","746e90a8":"print(classification_report(y_test, cb.predict(X_test)))","30a43ada":"cb_features = pd.DataFrame()\ncb_features['Feature'] = X_train.columns.tolist()\ncb_features['Importance'] = cb.feature_importances_\nsns.catplot(y='Feature', x='Importance', data=cb_features, kind='bar', height=15, color=base_color)\nplt.show()","27a3e760":"pd.DataFrame(Performances)","3570d8c6":"fpr_RFC, tpr_RFC, _ = roc_curve(y_test, rfc.predict_proba(X_test)[:,1])\nroc_auc_RFC = auc(fpr_RFC, tpr_RFC)\nfpr_dtc, tpr_dtc, _ = roc_curve(y_test, dtc.predict_proba(X_test)[:,1])\nroc_auc_dtc = auc(fpr_dtc, tpr_dtc)\nfpr_XGB, tpr_XGB, _ = roc_curve(y_test, xgb.predict_proba(X_test)[:,1])\nroc_auc_XGB = auc(fpr_XGB, tpr_XGB)\nfpr_CAT, tpr_CAT, _ = roc_curve(y_test, cb.predict_proba(X_test)[:,1])\nroc_auc_CAT = auc(fpr_CAT, tpr_CAT)","6cd91258":"plt.figure(figsize=(8,8))\nlw = 2\nplt.plot(fpr_dtc, tpr_dtc, \n         lw=lw, label='ROC curve Decision Tree (area = %0.2f)' % roc_auc_dtc)\nplt.plot(fpr_RFC, tpr_RFC, \n         lw=lw, label='ROC curve Random Forest (area = %0.2f)' % roc_auc_RFC)\nplt.plot(fpr_XGB, tpr_XGB, \n         lw=lw, label='ROC curve XGBoost (area = %0.2f)' % roc_auc_XGB)\nplt.plot(fpr_CAT, tpr_CAT, \n         lw=lw, label='ROC curve CATBoost (area = %0.2f)' % roc_auc_CAT)\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Using All Features')\nplt.legend(loc=\"lower right\")\nplt.show()","7ba1ba76":"### Data Cleaning","5d5db001":"From the obtained table we can see that the CatBoost is the best method in terms of accuracy and precision. However, in terms of F1-Score of the class Visit=1 it has the second best value after the Decision Tree. If we compare the macro average of the F1-Score on the two classes we can see that the CatBoost (0.64) is better that the Decision Tree (0.61). This information is obtained from the classification reports. \n\nLets see if the same results are obtained from the ROC Curves.","7aa27fb9":"##### Test: ","3dc16f49":"### CatBoost","1c0ebed4":"##### Test","7bac7f25":"##### Test:","fb3ebdf8":"* Age should be categorical\n\n##### Define:\n* Change Age to categorical type\n\n##### Code:","7310edb1":"#### Data Consistency: \n\nWe check for each feature if the data points present different values for the same meaning.","d0827a81":"### Models Comparaison:","1dd6c3e7":"##### Test:","b9e01110":"Lets now plot their bar plot.","14c7b68f":"### Univariate Analysis","80691baa":"## Exploratory Data Analysis","f1084dcd":"* The Date feature should be of type datetime not string. \n\n##### Define: \n* convert the type from string to datetime\n\n##### Code:","205afe6c":"* Transforming Sex to binary (0 for F, 1 for M)","a11f0723":"* Stay should be categorical\n\n##### Define:\n* Change Stay type from string to categorical:\n\n##### Code:","d80ef153":"In this project, we suppose that we want to build a model that is able to predict the visit outcome. Hence, we have a binary classification problem. The features, in this work, come in different types (categorical, integer, boolean, and float). Therefore, we should start by preparing the data for the model building. ","16161ca6":"We can see that the p-value for this feature is equal to 0.82. Then, $p-value > 0.05$. So we fail to reject the null hypothesis. Hence, **the white or no white does not influence the visit outcome**.","2ad5fbb1":"Lets do the statistical test for this feature also. \n\nThe null hypothesis in this case is that the probablity (ratio) of visit if the white is True is the same as the False: \n$$H_0: p_{F} = p_{T}$$ \n\nThe $H_1$ is that the white has an influence. \n$$H_1: p_{F} \\neq p_{T}$$","10e407b6":"* Convert Month, Day_of_Week, Age, and Stay caterogies to numeric","f2fd943b":"#### Data Accuracy \n\nAccurate data should present the right values in the right format. Since we cannot cross-reference the given values to other sources of data, we only check the right format of the data. ","33ff4446":"#### Feature Engineering:\n\n##### Define: \n* From Date extract the Month Name\n* From Date extract the Day-of-Week\n\n##### Code: ","3fbd2563":"### Data Quality & Tidiness Assessment","688ce00e":"We can see that the p-value is so small (lower than 0.05). Hence, we succeeded in rejecting the null hypothesis. Therefore, **the gender has an influence of the visit outcome**.","435371d2":"* Perfect, College, White, and English should be of type boolean. \n\n##### Define: \n* convert the type from string to boolean\n\n##### Code:","604730ea":"## Data Wrangling","4f1a9f48":"Lets go for the data quality and tidiness assessment.","5e835dee":"### Methodology:\n\nTo assess the performance of the models, we divide the dataset into two parts train and test. The train part is used to fit the models we are going to build and then we use the model to predict the outcome of the test part. Then, the built models should be compared to select the best model. In this application, we use the accuracy, precision, and f1-score to compare the models. We, also, plot the ROC and compute the area under curve of each model. ","a4e93f55":"### Random Forest","9f7d1b0f":"### Bivariate Analysis","d453619d":"Using the ROC curve to select the best model is quite easy. We search for the model that goes rapidly to the top and the one with the higher curve and the highest area under curve. According to these criteria, we can conclude that the CatBoost model is the best.","0bde9b1f":"Lets do the statistical test for this feature also. \n\nThe null hypothesis in this case is that the probablity (ratio) of visit if the college is True is the same as the False: \n$$H_0: p_{F} = p_{T}$$ \n\nThe $H_1$ is that the college has an influence. \n$$H_1: p_{F} \\neq p_{T}$$","7c477bb8":"As we can see we have some data accuracy issues: \n* The Date feature should be of type datetime not string. \n* Perfect, College, White, and English should be of type boolean. \n* Age and Stay should be categorical","ed4b35bd":"# Data Analysis & Predictive Model Building\n***\n#### By Omar BOUGACHA\n\n","0dec83c6":"##### Test","041a2524":"We can see that the gender has an influence on the Visit status. Lets verify if this observation is statistically significant or not. \n\nThe null hypothesis in this case is that the probablity (ratio) of visit if the gender is Female is the same as the Male: \n$$H_0: p_{F} = p_{M}$$ \n\nThe $H_1$ is that the gender has an influence. \n$$H_1: p_{F} \\neq p_{M}$$","2c468131":"## Modeling:\n*********","c1bbeb5d":"* the Stay categories: \n\n##### define: \n* Change the stay categories to: '1', '2-3', '4-7', '8+'\n\n##### Code:","6a57876f":"* Transforming the boolean columns into binary (0,1)","fa62ea74":"This feature of the date allows us to derive other features and to study them. We can most likely derive the month feature and the day of week. ","e1b8ce34":"* Get dummies for features: Service, Home, Specialty, and Unit. \n* Define baseline for each feature. \n    * Feature Service baseline is: O\n    * Feature Home baseline is: Y\n    * Feature Specialty baseline is: 1\n    * Feature Unit baseline is: 3","b9a678df":"#### Data Completness (Missing values)","8e5a59e2":"The stay categories should be defined as: '1', '2-3', '4-7', '8+'","1196cdbc":"From the table of models' performances and the ROC curves, we can conclude that the **CatBoost** model is the most suitable model for this application.","4bc96584":"##### Test","2edeec26":"We can see that the composite feature is highly skewed to the left.","8fd375ae":"### Decision Tree","12966793":"Lets change them to categorical type:","2c084752":"### Data Preparation:","4bb0d476":"In the EDA process, we continue working using the cleaned_data table to analyze the different relationships between the variables. The EDA process has 3 main components: \n* Univariate Analysis\n* Bivariate Analysis \n* Multivariate Analysis\n\nHowever, in this analysis, we focuse only on univariate and bivariate analysis.","7a8639f7":"The obtained p-value is lower than 0.05. Then, we can safely reject the null hypothesis. Therefore, **the college status has an influence over the visit outcome**.","4573133e":"* 80+ and 80-90 category. \n\n##### Define: \n* Change the 80+ category to 90+\n\n##### Code: \n","777a1bf7":"### ROC Curves: ","9bbb5769":"As we can see, all the records are given in this dataset. We do not have any missing values.","50848f54":"### XGBoost","8867b558":"### Data Gathering","0105ebe4":"We can see in the age values we have two categories that mean the same thing 80+ and 80-90. I believe the 80+ is just a mistyping error. Therefore, it should be fixed to 90+","2dea64f8":"* Transfroming Source to binary (0 for T and 1 for D)","21d69dfc":"## Introduction\n***","a4d6f32b":"We can see from the correlation heatmap and the matrix that we have two highly correlated couple of features: \n* the Rate and Recommend\n* the White and English","042aa01a":"##### Test:"}}