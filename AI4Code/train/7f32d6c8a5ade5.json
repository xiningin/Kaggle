{"cell_type":{"044b5c1f":"code","6dfc7026":"code","d4dff567":"code","41296e15":"code","a3cbbbc6":"code","aecdf059":"code","94aeccf6":"code","9ae0a303":"code","abed73f8":"code","9c802d5b":"code","f6be795b":"code","2b8e2bff":"code","806bcb6d":"code","77e21302":"code","67acc59c":"code","ff7d6cfc":"code","21ccff85":"code","224ecf92":"code","09877acc":"code","7422800b":"code","1ec1f7c9":"code","313d7167":"code","cc54dc15":"code","b1d64855":"code","8646c553":"code","22fc5556":"code","0c2c2ef4":"code","936f3cde":"code","505f5c4b":"code","410e4f73":"code","164c74da":"code","bff0a86a":"code","a75546a0":"code","8fc84c2b":"code","074fcad3":"code","f890722b":"code","e154d9c2":"code","ae0fee87":"code","f8573d86":"code","850840e4":"code","89b95435":"code","c760d838":"code","1f86e3e6":"markdown","f7bed7e0":"markdown","fc2b7b86":"markdown","878bc504":"markdown","8b83f32f":"markdown","644cda21":"markdown","9af1cd0e":"markdown","73bc95ae":"markdown","cfceedcc":"markdown","7652f5ed":"markdown","7814dae2":"markdown","d267ddc1":"markdown","bcc1279f":"markdown","02fce659":"markdown","d4236a12":"markdown","4c00c3e5":"markdown","4db87b6a":"markdown","51932dd5":"markdown","f3c8b287":"markdown","d43a5334":"markdown","b723625a":"markdown"},"source":{"044b5c1f":"# Importando\nimport pandas as pd","6dfc7026":"# Lendo um csv\ndf_cripto = pd.read_csv('..\/input\/all-crypto-currencies\/crypto-markets.csv')\n\n# Mostrando o inicio do arquivo\ndf_cripto.head()","d4dff567":"# Achando informa\u00e7\u00f5es sobre as colunas\ndf_cripto.info()","41296e15":"# Os dados s\u00e3o dos valores de criptomoedas entre alguma data, vamos examinar melhor\n# Primeiro devemos ler a coluna date corretamente, como uma data (note que ela est\u00e1 sendo lida como object)\ndf_cripto = pd.read_csv('..\/input\/all-crypto-currencies\/crypto-markets.csv', parse_dates = ['date'])","a3cbbbc6":"# Agora a data est\u00e1 correta\ndf_cripto['date']","aecdf059":"# Exerc\u00edcio: Examine as outras colunas e explore o dataset\ndf_cripto['slug'].unique() # Exemplo","94aeccf6":"# Importando o matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline","9ae0a303":"df_bitcoin = df_cripto[df_cripto['slug'] == 'bitcoin']\n\n# Podemos usar plt.plot para gerar um g\u0155afico de linha\nplt.plot(df_bitcoin['date'], df_bitcoin['close'])","abed73f8":"plt.plot([1, 2, 3, 4], [2, 4, 8, 16])","9c802d5b":"# Para fazer gr\u00e1ficos mais flex\u00edveis, n\u00e3o usamos a biblioteca diretamente\nfig, ax = plt.subplots()\n# Com isso criamos fig (uma figura), e ax (os eixos para onde escreveremos os pontos)\nax.plot(df_bitcoin['date'], df_bitcoin['close'])\nfig.show()\n# Agora instruimos o que est\u00e1 sendo feito com mais controle, isso ser\u00e1 \u00fatil mais tarde","f6be795b":"fig, ax = plt.subplots()\n# Com essa nova ferramenta, podemos tra\u00e7ar mais de um g\u0155afico na mesma figura!!\ndf_ethereum = df_cripto[df_cripto['slug'] == 'ethereum']\n\n# Usamos plot sucessivos para tra\u00e7ar mais de uma linha\nax.plot(df_bitcoin['date'], df_bitcoin['close'])\nax.plot(df_ethereum['date'], df_ethereum['close'])\nfig.show()","2b8e2bff":"# O gr\u00e1fico ainda est\u00e1 ruim de entender, para ficar mais f\u00e1cil devemos usar mais ferramentas para personaliza\u00e7\u00e3o\nfig, ax = plt.subplots()\nax.plot(df_bitcoin['date'], df_bitcoin['close'], label=\"Bitcoin\")\nax.plot(df_ethereum['date'], df_ethereum['close'], label=\"Ethereum\")\n\nfig.set_size_inches(16, 8) # Muda o tamanho da figura\n\nax.set_title(\"Pre\u00e7os de fechamento para Bitcoin e Ethereum\") # Adiciona um t\u00edtulo\n\nax.set_xlabel(\"Data\") # Adiciona o r\u00f3tulo do eixo X\n\nax.set_ylabel(\"Pre\u00e7o (USD)\") # Adiciona o r\u00f3tulo do eixo Y\n\nax.legend() # Cria legendas usando os labels usados nos plots\n\nfig.show()","806bcb6d":"# Outra forma de mostrar esses dados \u00e9 usando subplots, agrupando v\u00e1rios gr\u00e1ficos menores na mesma figura\nfig, ax = plt.subplots(2) # Fornecemos um formato\nax[0].plot(df_bitcoin['date'], df_bitcoin['close'], label=\"Bitcoin\")\nax[1].plot(df_ethereum['date'], df_ethereum['close'], label=\"Ethereum\")\nfig.set_size_inches(16, 8) # Muda o tamanho da figura","77e21302":"# Vamos usar o dataset Iris para esse exemplo\ndf_iris = pd.read_csv('..\/input\/iris\/Iris.csv')\ndf_iris.head()","67acc59c":"# Usamos plt.scatter ou ax.scatter para gerar esse g\u0155afico\nplt.scatter(df_iris['PetalLengthCm'], df_iris['PetalWidthCm'])","ff7d6cfc":"fig, ax = plt.subplots()\nax.scatter(df_iris['PetalLengthCm'], df_iris['PetalWidthCm'])\n\n# Personalizamos da mesma forma\nfig.set_size_inches(16, 8)\nax.set_title(\"Comprimento da p\u00e9tala X Largura da p\u00e9tala\")\n\nfig.show()","21ccff85":"# Nesse dataset podemos usar cores diferentes para diferenciar as esp\u00e9cies\nfig, ax = plt.subplots()\n\n# Criamos os plots separadamente, com labels\nax.scatter(df_iris[df_iris['Species'] == 'Iris-setosa']['PetalLengthCm'], df_iris[df_iris['Species'] == 'Iris-setosa']['PetalWidthCm'], label='Setosa')\nax.scatter(df_iris[df_iris['Species'] == 'Iris-virginica']['PetalLengthCm'], df_iris[df_iris['Species'] == 'Iris-virginica']['PetalWidthCm'], label='Virginica')\nax.scatter(df_iris[df_iris['Species'] == 'Iris-versicolor']['PetalLengthCm'], df_iris[df_iris['Species'] == 'Iris-versicolor']['PetalWidthCm'], label='Versicolor')\n\n# Personalizamos da mesma forma\nfig.set_size_inches(16, 8)\nax.set_title(\"Comprimento da p\u00e9tala X Largura da p\u00e9tala\")\nax.legend()\n\nfig.show()","224ecf92":"# Usamos plt.bar(), ainda segue o padr\u00e3o (X, Y)\nplt.bar(df_iris['Species'], df_iris['PetalLengthCm'])","09877acc":"# Importando\nimport seaborn as sns","7422800b":"# Podemos criar os mesmos gr\u00e1ficos do matplotlib usando o seaborn\nsns.lineplot(data=df_bitcoin, x='date', y='close') # Podemos passar o dataframe, e escolher as colunas com strings","1ec1f7c9":"sns.scatterplot(data=df_iris, x='PetalLengthCm', y='PetalWidthCm') # Scatterplot","313d7167":"sns.barplot(data=df_iris, x='Species', y='PetalLengthCm') # Por padr\u00e3o tamb\u00e9m mostra o invervalo de confian\u00e7a","cc54dc15":"# Podemos escrever c\u00f3digos muito mais simples para obter os mesmos resultados\nsns.scatterplot(data=df_iris, x='PetalLengthCm', y='PetalWidthCm', hue='Species') \n\n# Equivalente no matplotlib:\n\n# fig, ax = plt.subplots()\n# ax.scatter(df_iris[df_iris['Species'] == 'Iris-setosa']['PetalLengthCm'], df_iris[df_iris['Species'] == 'Iris-setosa']['PetalWidthCm'], label='Setosa')\n# ax.scatter(df_iris[df_iris['Species'] == 'Iris-virginica']['PetalLengthCm'], df_iris[df_iris['Species'] == 'Iris-virginica']['PetalWidthCm'], label='Virginica')\n# ax.scatter(df_iris[df_iris['Species'] == 'Iris-versicolor']['PetalLengthCm'], df_iris[df_iris['Species'] == 'Iris-versicolor']['PetalWidthCm'], label='Versicolor')\n# fig.set_size_inches(16, 8)\n# ax.set_title(\"Comprimento da p\u00e9tala X Largura da p\u00e9tala\")\n# ax.legend()\n# fig.show()","b1d64855":"# Para alterar algumas caracter\u00edsticas dos gr\u00e1ficos, ainda devemos usar o matplotlib\nplt.figure(figsize=(16, 10))\nplt.title(\"Comprimento da p\u00e9tala X Largura da p\u00e9tala\")\nsns.scatterplot(data=df_iris, x='PetalLengthCm', y='PetalWidthCm', hue='Species')\nplt.show()","8646c553":"# O gr\u00e1fico mais simples que podemos gerar \u00e9 o histograma\nsns.histplot(df_iris['PetalLengthCm'])","22fc5556":"# Ele faz uma contagem do n\u00famero de linhas dentro das 'bins'\nsns.histplot(df_iris['PetalLengthCm'], bins=20)","0c2c2ef4":"# Novamente podemos separar por esp\u00e9cie \nsns.histplot(data = df_iris, x='PetalLengthCm', bins=20, hue='Species')","936f3cde":"# Alternativamente, podemos usar o kdeplot para obter uma forma suavizada\nsns.kdeplot(data = df_iris, x='PetalLengthCm', hue='Species', shade=True)","505f5c4b":"# Usa estat\u00edsticas dos dados para desenhar as caixas, tamb\u00e9m ajuda a achar outliers\nsns.boxplot(data = df_iris, y='PetalLengthCm')","410e4f73":"plt.figure(figsize=(14, 8))\nsns.boxplot(data = df_iris, y='PetalLengthCm', x='Species')","164c74da":"# O gr\u00e1fico de violino mistura o boxplot com um kde\nplt.figure(figsize=(14, 8))\nsns.violinplot(data = df_iris, y='PetalLengthCm', x='Species')","bff0a86a":"sns.jointplot(data = df_iris, y='PetalLengthCm', x='PetalWidthCm', hue=\"Species\")","a75546a0":"# Jointplot junta v\u00e1rios gr\u00e1ficos, sendo \u00f3timo pra observar distribui\u00e7\u00f5es\nsns.jointplot(data = df_iris, y='PetalLengthCm', x='PetalWidthCm', hue=\"Species\")","8fc84c2b":"# Regplot faz uma regress\u00e3o linear e tra\u00e7a uma linha, isso facilita observar correla\u00e7\u00e3o entre as vari\u00e1veis\nsns.regplot(data = df_iris, y='PetalLengthCm', x='PetalWidthCm')","074fcad3":"# Podemos mudar as caracter\u00edsticas mais gerais dos gr\u00e1ficos de maneira muito simples\nplt.figure(figsize=(16, 10))\nplt.title(\"Comprimento da p\u00e9tala X Largura da p\u00e9tala\")\nsns.scatterplot(data=df_iris, x='PetalLengthCm', y='PetalWidthCm', hue='Species')\nplt.show()","f890722b":"# Mudando o estilo\nsns.set_style(\"ticks\")\nsns.set_palette(\"tab10\")\n\nplt.figure(figsize=(16, 10))\nplt.title(\"Comprimento da p\u00e9tala X Largura da p\u00e9tala\")\nsns.scatterplot(data=df_iris, x='PetalLengthCm', y='PetalWidthCm', hue='Species')\nplt.show()","e154d9c2":"# Histograma a partir de s\u00e9rie\ndf_iris['PetalLengthCm'].hist()","ae0fee87":"df_iris.plot.scatter('PetalLengthCm', 'PetalWidthCm')","f8573d86":"df_linha = df_bitcoin[['date', 'close']].set_index('date')\ndf_linha.head()","850840e4":"df_linha.plot()","89b95435":"from pandas_profiling import ProfileReport","c760d838":"profile = ProfileReport(df_iris, title=\"An\u00e1lise do Dataset Iris\")\nprofile","1f86e3e6":"### 4.1) Gr\u00e1ficos do Pandas","f7bed7e0":"### 2.1) Gr\u00e1ficos de distribui\u00e7\u00f5es\nUsando o seaborn, podemos criar v\u00e1rios gr\u00e1ficos que ilustram a distribui\u00e7\u00e3o de uma vari\u00e1vel espec\u00edfica","fc2b7b86":"### 1.1) Gr\u00e1ficos de linha\nEsse tipo de gr\u00e1fico \u00e9 comum para lidar com s\u00e9ries temporais, nessa caso vamos examinar os pre\u00e7os de fechamento para v\u00e1rias criptomoedas (dados abertos anteriormente)","878bc504":"## 3) Resumindo os usos dos gr\u00e1ficos\nSempre se perguntar primeiro: o que estou tentando ver ou mostrar?\n\nDistribui\u00e7\u00f5es com uma vari\u00e1vel:\n- sns.kdeplot\n- sns.distplot\n- sns.boxplot\n- sns.violinplot\n\nDistribui\u00e7\u00f5es com duas vari\u00e1veis:\n- sns.jointplot\n- sns.scatterplot\n\nRela\u00e7\u00e3o entre vari\u00e1veis:\n- sns.scatterplot\n- sns.regplot\n- sns.barplot\n- sns.boxplot\n\nVaria\u00e7\u00f5es dependentes de tempo \/ Fun\u00e7\u00f5es:\n- sns.lineplot","8b83f32f":"Op\u00e7\u00f5es:\n- darkgrid\n- whitegrid\n- dark\n- white\n- ticks\n\nExemplos de paletas de cores:\n- tab10\n- Paired\n- Set2","644cda21":"## 2 - Seaborn\nApesar de o matplotlib ser a biblioteca mais vers\u00e1til, em muitos casos, criar gr\u00e1ficos com essa ferramenta \u00e9 muito trabalhoso. Ent\u00e3o, podemos usar outras bibliotecas para criar gr\u00e1ficos mais rapidamente, um bom exemplo disso \u00e9 o Seaborn.\n\nSeaborn \u00e9 uma biblioteca de visualiza\u00e7\u00e3o de dados baseada no matplotlib, que facilita criar v\u00e1rios tipos de gr\u00e1ficos estat\u00edsticos.\n\nDocumenta\u00e7\u00e3o em: https:\/\/seaborn.pydata.org\/\n\nC\u00f3digo fonte em: https:\/\/github.com\/mwaskom\/seaborn","9af1cd0e":"Sempre \u00e9 bom olhar a documenta\u00e7\u00e3o das bibliotecas quando tiver d\u00favida sobre algo, a documenta\u00e7\u00e3o do pandas est\u00e1 nesse link: https:\/\/pandas.pydata.org\/docs\/index.html","73bc95ae":"## 1 - Matplotlib\nO matplotlib \u00e9 uma biblioteca do python que nos permite criar gr\u00e1ficos, ele fornece uma interface simples, mas que permite a cria\u00e7\u00e3o de praticamente qualquer gr\u00e1fico. Por esse motivo, ele \u00e9 usado como base para v\u00e1rias bibliotecas de visualiza\u00e7\u00e3o de dados para Python.\n\nA documenta\u00e7\u00e3o pode ser consultada em: https:\/\/matplotlib.org\/stable\/index.html\n\nComo o matplotlib \u00e9 um projeto open source, qualquer um pode consultar o c\u00f3digo fonte e colaborar para o desenvolvimento da biblioteca.\n\nReposit\u00f3rio do matplotlib em: https:\/\/github.com\/matplotlib\/matplotlib","cfceedcc":"### 2.3) Mudando o \"estilo\" dos g\u0155aficos","7652f5ed":"### 1.3) Gr\u00e1fico de barras\nTamb\u00e9m podemos criar gr\u00e1ficos com uma vari\u00e1vel categ\u00f3rica e outra num\u00e9rica, criando os conhecidos gr\u00e1ficos de barras.","7814dae2":"# Data Visualization\nAnalizar os dados apenas olhando as tabelas \u00e9 algo praticamente imposs\u00edvel, portanto precisamos de ferramentas para extrair informa\u00e7\u00f5es dos dados brutos.\n\nPara isso, \u00e9 comum gerar gr\u00e1ficos com os dados, principalmente nas fases iniciais. No python temos v\u00e1rias ferramentas para isso, sendo a principal delas o matplotlib.","d267ddc1":"Tamb\u00e9m existem outros gr\u00e1ficos \u00fateis para esse tipo de an\u00e1lise, como o boxplot e violinplot.","bcc1279f":"Observe que passamos 2 valores para plt.plot, que devem ser algum tipo de lista de n\u00fameros, e equivalem a valores de (X, Y).","02fce659":"Usando o gr\u00e1fico dessa forma, se a segunda s\u00e9rie possui mais de um valor, os valores s\u00e3o agrupados de acordo com alguma estat\u00edstica. Por padr\u00e3o, o valor usado \u00e9 a m\u00e9dia.\n\nPodemos personalizar tudo da mesma forma que os gr\u00e1ficos anteriores.","d4236a12":"Esse tipo de g\u0155afico permite observar correla\u00e7\u00f5es entre vari\u00e1veis, note que a largura da p\u00e9tala \u00e9 proporcional ao comprimento.\n\nTamb\u00e9m podemos observar agrupamentos nos dados.","4c00c3e5":"### 2.2) Outros gr\u00e1ficos interessantes","4db87b6a":"### 1.2) Gr\u00e1ficos de dispers\u00e3o (scatter plots)\nPodem ser usados para mostrar como os dados com duas ou mais vari\u00e1veis est\u00e3o distribu\u00eddos.\n\nEle funciona basicamente como um gr\u00e1fico de linha, mas sem tra\u00e7ar a linha.","51932dd5":"### 4.2) Gerando Gr\u00e1ficos com Pandas Profilling","f3c8b287":"## 4) B\u00f4nus","d43a5334":"## 0 - Revis\u00e3o de Pandas","b723625a":"**Criando g\u0155aficos:** Podemos pensar em criar gr\u00e1ficos da mesma maneira que pensamos criando eles no papel.\n\nPara uma grande parte deles, precisamos definir os pontos, com coordenadas (x, y). Quando esse n\u00e3o \u00e9 o caso tamb\u00e9m precisamos fornecer eles de uma forma conveniente."}}