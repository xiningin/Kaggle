{"cell_type":{"1aea7268":"code","2cfd7ea5":"code","a89c2c06":"code","c5ba2d52":"code","57a1a321":"code","2a801c44":"code","41ed8e75":"code","7f67130d":"code","10a5e31d":"code","527e3dd3":"code","e224ed1b":"code","342b5e14":"code","44e6e871":"code","945f87c8":"code","243cbf3a":"code","3ad2f942":"code","7a7b4cf0":"code","8af5b030":"code","0aeacc4f":"code","e5896baf":"code","6f671e23":"code","ff504b25":"code","47392733":"code","b755ffd8":"code","c5bf2075":"code","4fdf22a9":"code","7e102e13":"code","c1fa927e":"markdown","dd1b2ce4":"markdown","e67e57af":"markdown","1afc7338":"markdown","41e80908":"markdown","942fb346":"markdown","a1c72731":"markdown","c14b6d05":"markdown","318b0992":"markdown","c8c1e23f":"markdown","3a05e49c":"markdown"},"source":{"1aea7268":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\nimport random\n\nimport tensorflow as tf\nprint(\"TF_VERSION:\", tf.__version__)\n\n# set seed\ntf.random.set_seed(0)\nrandom.seed(0)\nnp.random.seed(0)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2cfd7ea5":"train_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntrain_df.shape, test_df.shape","a89c2c06":"train_df.isnull().sum().sum(), test_df.isnull().sum().sum()","c5ba2d52":"# numpy array from pandas df\nX_train, y_train = np.array(train_df.loc[:, 'pixel0':]), np.array(train_df.label)\nX_test = np.array(test_df.loc[:, 'pixel0':])\nprint(X_train.shape, y_train.shape, X_test.shape)","57a1a321":"X_train = X_train.reshape(-1,28,28)\nX_test = X_test.reshape(-1,28,28)\nprint(X_train.shape, y_train.shape, X_test.shape)","2a801c44":"count_array = np.unique(y_train, return_counts=True)\nplt.bar(count_array[0], count_array[1])\nplt.xticks(count_array[0])\nplt.xlabel(\"Target Variable\")\nplt.ylabel(\"Samples\")\nplt.title(\"Samples per target variable\")\nplt.show()","41ed8e75":"# let see some images \nplt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5, 5, i+1)\n    plt.imshow(X_train[i])\n    plt.colorbar()\n    plt.xlabel(y_train[i])\n    plt.xticks([])\n    plt.yticks([])\nplt.show()","7f67130d":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Dropout, BatchNormalization\n\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split ","10a5e31d":"X_train = X_train.reshape(-1,28,28,1)\nX_test = X_test.reshape(-1,28,28,1)\nprint(X_train.shape, y_train.shape, X_test.shape)","527e3dd3":"# preprocessing and convert range from (0,255) -> (0, 1)\nX_train = X_train \/ 255.0\nX_test = X_test \/ 255.0","e224ed1b":"# cross check for preprocessing. what is data range actually is ?\nX_train.min(), X_train.max(), X_test.min(), X_train.max()","342b5e14":"# one hot encoding\ny_train = to_categorical(y_train, num_classes=10)\ny_train.shape","44e6e871":"# split the data into train & validation, size of validation data is \"33%\"\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.33, random_state=42)","945f87c8":"# let's try simple CNN model\n\nmodel = Sequential([\n    \n    # feature learning model\n    Conv2D(8, (3,3), padding='same', input_shape=(28,28,1), activation='relu'),\n    Conv2D(8, (3,3), padding='same', activation='relu'),\n    BatchNormalization(),\n    MaxPool2D(2,2),\n    \n    Conv2D(16, (3,3), padding='same', activation='relu'),\n    Conv2D(16, (3,3), padding='same', activation='relu'),\n    BatchNormalization(),\n    MaxPool2D(2,2),\n    \n    Dropout(0.2),\n    \n    Flatten(),\n    \n    # classification model\n    Dense(128, activation='relu'),\n    Dense(128, activation='relu'),\n    \n    Dropout(0.2),\n    Dense(10, activation='softmax')\n    \n])\nmodel.summary()\n\nmodel.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])","243cbf3a":"reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, verbose=1)","3ad2f942":"model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_valid, y_valid), callbacks=[reduce_lr])","7a7b4cf0":"prediction = model.predict(X_valid, verbose=1)\nprediction_arg_max = prediction.argmax(axis=1)","8af5b030":"y_valid_arg_max = y_valid.argmax(axis=1)","0aeacc4f":"from sklearn.metrics import confusion_matrix","e5896baf":"cm = confusion_matrix(y_valid_arg_max, prediction_arg_max)\nplt.figure(figsize=(10,5))\nsns.heatmap(pd.DataFrame(cm), annot=True, cmap='Blues', fmt='g')\nplt.title(\"Confusion Matrix\")\nplt.show()","6f671e23":"pred = model.predict(X_test, verbose=1)\npred = pred.argmax(axis=1)","ff504b25":"sample_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\nsample_df.to_csv(\"submission.csv\", index=False)","47392733":"sample_df.head()","b755ffd8":"# i am kidding \nsample_df.groupby('Label').size()","c5bf2075":"# update classes with actual result\nsample_df['Label'] = pred","4fdf22a9":"# now looking good\nsample_df.groupby('Label').size()","7e102e13":"sample_df.to_csv(\"submission.csv\", index=False)","c1fa927e":"## Load Dataset","dd1b2ce4":"## Model Training ","e67e57af":"#### let's we plot some sample images","1afc7338":"## Save submission","41e80908":"## Plotting","942fb346":"#### checking model accuracy","a1c72731":"#### Reshaping image from 1D to 2D, for whole dataset 2D to 3D.\n- Image: (-1, 28, 28)\n- Label: (-1, 1)","c14b6d05":"#### Check for number of samples per target variable","318b0992":"## Model validation","c8c1e23f":"#### Check for NULL values","3a05e49c":"#### Creating Numpy array from dataframe\n- Image: (-1, 784)\n- Label: (-1, 1)\n\n"}}