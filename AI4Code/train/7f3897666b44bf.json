{"cell_type":{"54b62477":"code","556e15db":"code","9c428d0c":"code","ad0998d9":"code","b1fdb7dc":"code","39cdfb2e":"code","cea0c152":"code","93414b02":"code","84d4dda4":"code","6d0d8c18":"code","0cd71c6e":"code","858f1a9d":"code","370bf4e0":"code","9106f375":"code","0a51d8c5":"code","0bc25ab6":"code","9cdbe52a":"code","a0a2e3c1":"code","b66b7368":"code","7689ab58":"code","552e8b8d":"code","96f4c639":"code","abc1006e":"code","649adba9":"code","db85be47":"code","5f063479":"code","67226a1b":"code","2edca387":"code","ea8f5f60":"code","7d305a40":"code","b5a5d7d8":"code","37d0dee6":"code","2152531a":"code","f72f2236":"code","6db649f8":"code","63b199fa":"code","56780b6a":"code","9450ddc8":"code","30c4906f":"code","581d1e67":"code","0b9558cd":"code","646d3de4":"code","d0a4ec88":"code","713a26d7":"code","8ef1539a":"code","04ee2533":"code","f62eeded":"code","7cee2952":"code","f30e4171":"code","2a506a87":"code","54d0f44f":"code","d58c49ef":"markdown","29c418ae":"markdown","1bbba339":"markdown"},"source":{"54b62477":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","556e15db":"df_train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf_submit = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","9c428d0c":"!ls ..\/input\/pycaret-231-whl\/","ad0998d9":"!unzip ..\/input\/pycaret-231-whl\/pycaret_2.3.1.zip -d ..\/pycaret","b1fdb7dc":"# installing multiple whl files: https:\/\/stackoverflow.com\/questions\/65844775\/how-to-install-multiple-whl-files-in-the-right-order\n# this command installs all whl files in the wheelhouse folder\n!pip install --no-index --no-deps ..\/pycaret\/wheelhouse\/*.whl","39cdfb2e":"df_train_data","cea0c152":"# \u8a13\u7df4\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u5408\u308f\u305b\u3066\u524d\u51e6\u7406\u3092\u884c\u3046\ndf_test_data['Survived'] = np.nan\n\ndf_all_data = pd.concat([df_train_data,df_test_data])","93414b02":"df_all_data","84d4dda4":"# \u7537\u5973\u306e\u656c\u79f0\u3092\u8ffd\u52a0\ndf_all_data[\"Title\"]=df_all_data[\"Name\"].str.split(',',expand=True)[1].str.split('.',expand=True)[0]\ndf_all_data[\"Title\"]=df_all_data[\"Title\"].replace([\" Don\",\" Rev\",\" Dr\",\" Major\",\" Lady\",\" Sir\",\" Col\",\" Capt\",\" the Countess\",\" Jonkheer\"],\"Rare\")\ndf_all_data[\"Title\"]=df_all_data[\"Title\"].replace([\" Mlle\", \" Ms\"],\" Miss\")\ndf_all_data[\"Title\"]=df_all_data[\"Title\"].replace([\" Mme\",\" Mrs\"],\" Mr\")\n\n# \u30d5\u30a1\u30df\u30ea\u30fc\u30b5\u30a4\u30ba\u3068\u5358\u8eab\u4e57\u8239\u304b\u3069\u3046\u304b\u3092\u8ffd\u52a0\ndf_all_data['FamilySize'] = df_all_data['Parch'] + df_all_data['SibSp']\ndf_all_data['IsAlone'] = 0\ndf_all_data.loc[df_all_data['Parch'] + df_all_data['SibSp'] == 0 , 'IsAlone'] = 1\n\n# 15\u6b73\u4ee5\u4e0b\u306f\u5b50\u4f9b\u30d5\u30e9\u30b0\u3092\u8ffd\u52a0\ndf_all_data['IsChild'] = 0\ndf_all_data.loc[df_all_data['Age'] < 16 , 'IsChild'] = 1\n\n# \u30c1\u30b1\u30c3\u30c8\u756a\u53f7\u304b\u3089\u30b0\u30eb\u30fc\u30d7\u4eba\u6570\u3092\u8ffd\u52a0\ndf_all_data.loc[:, 'TicketSize'] = df_all_data.groupby(['Ticket'])['PassengerId'].transform('count')\n\n# \u30ad\u30e3\u30d3\u30f3\u306e\u7a2e\u985e\u3092\u8ffd\u52a0\ndf_all_data['Cabin_A'] = ['1' if 'A' in str(x) else '0' for x in df_all_data.Cabin]\ndf_all_data['Cabin_B'] = ['1' if 'B' in str(x) else '0' for x in df_all_data.Cabin]\ndf_all_data['Cabin_C'] = ['1' if 'C' in str(x) else '0' for x in df_all_data.Cabin]\ndf_all_data['Cabin_D'] = ['1' if 'D' in str(x) else '0' for x in df_all_data.Cabin]\ndf_all_data['Cabin_E'] = ['1' if 'E' in str(x) else '0' for x in df_all_data.Cabin]\ndf_all_data['Cabin_F'] = ['1' if 'F' in str(x) else '0' for x in df_all_data.Cabin]\ndf_all_data['Cabin_G'] = ['1' if 'G' in str(x) else '0' for x in df_all_data.Cabin]\n","6d0d8c18":"df_all_data.head()","0cd71c6e":"# age\u3092\u4e88\u60f3\u3059\u308b\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u540c\u6642\u306b\u51e6\u7406\n\ndf_age_target = df_all_data[df_all_data.Age.isnull()]\ndf_age_target2 = df_age_target[['Pclass', 'Name', 'Sex', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Title', 'FamilySize',\n       'IsAlone', 'IsChild', 'TicketSize', 'Cabin_A', 'Cabin_B', 'Cabin_C',\n       'Cabin_D', 'Cabin_E', 'Cabin_F', 'Cabin_G']]\ndf_age_train = df_all_data[df_all_data.Age.isnull() == False]\ndf_age_train2 = df_age_train[['Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Title', 'FamilySize',\n       'IsAlone', 'IsChild', 'TicketSize', 'Cabin_A', 'Cabin_B', 'Cabin_C',\n       'Cabin_D', 'Cabin_E', 'Cabin_F', 'Cabin_G']]","858f1a9d":" df_all_data.columns","370bf4e0":"# \u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3092\u307b\u307c\u3044\u3063\u3055\u3044\u884c\u308f\u305a\u306b\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u5b9f\u65bd\nfrom pycaret.regression import *\n\nreg = setup(data=df_age_train2, target='Age', session_id=12,silent=True, ignore_low_variance = True) ","9106f375":"# \u30e2\u30c7\u30eb\u9593\u306e\u6bd4\u8f03\u3092\u5b9f\u65bd\n\nbest_model = compare_models()  # \u5168\u3066\u306e\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3057\u3001\u8a55\u4fa1\u3059\u308b","0a51d8c5":"# catboost\u3092\u5229\u7528\n\ncat= create_model(\"catboost\",fold=5)  # catboost \u30e2\u30c7\u30eb\u3092\u4f5c\u6210","0bc25ab6":"tuned_cat = tune_model(cat,fold=5)  # \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8abf\u6574","9cdbe52a":"final_cat = finalize_model(tuned_cat)","a0a2e3c1":"# Age\u3092\u4e88\u6e2c\u3059\u308b\nAge_predictions = predict_model(final_cat,df_age_target2)\n","b66b7368":"# df_age_target\u306bAge\u3092\u633f\u5165\u3059\u308b\ndf_age_target['Age'] = Age_predictions.Label\n","7689ab58":"df_age_target = df_age_target.reset_index()","552e8b8d":"for i in range(df_age_target.shape[0]):\n    df_all_data['Age'][df_all_data['PassengerId'] == df_age_target['PassengerId'][i]] = df_age_target['Age'][i]\n","96f4c639":"df_all_data.isnull().sum()","abc1006e":"# 15\u6b73\u4ee5\u4e0b\u306f\u5b50\u4f9b\u30d5\u30e9\u30b0\u3092\u8ffd\u52a0\ndf_all_data['IsChild'] = 0\ndf_all_data.loc[df_all_data['Age'] < 16 , 'IsChild'] = 1","649adba9":"# Survived\u3092\u4e88\u6e2c\u3059\u308b\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\n\ndf_target = df_all_data[df_all_data.Survived.isnull()]\ndf_target2 = df_target[['Pclass', 'Name', 'Sex', 'Age','SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Title', 'FamilySize',\n       'IsAlone', 'IsChild', 'TicketSize', 'Cabin_A', 'Cabin_B', 'Cabin_C',\n       'Cabin_D', 'Cabin_E', 'Cabin_F', 'Cabin_G']]\ndf_train = df_all_data[df_all_data.Survived.isnull() == False]\ndf_train2 = df_train[['Survived','Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Title', 'FamilySize',\n       'IsAlone', 'IsChild', 'TicketSize', 'Cabin_A', 'Cabin_B', 'Cabin_C',\n       'Cabin_D', 'Cabin_E', 'Cabin_F', 'Cabin_G']]","db85be47":"df_train2","5f063479":"# \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u5b9f\u65bd\n\nfrom pycaret.classification import *\n\nclf = setup(data=df_train2, target='Survived', session_id=12,silent=True,ignore_low_variance = True) ","67226a1b":"# \u30e2\u30c7\u30eb\u9593\u306e\u6bd4\u8f03\u3092\u5b9f\u65bd\n\nbest_model = compare_models(fold=5)  # \u5168\u3066\u306e\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3057\u3001\u8a55\u4fa1\u3059\u308b","2edca387":"print(best_model)","ea8f5f60":"# \u6700\u3082\u30b9\u30b3\u30a2\u306e\u9ad8\u3044\u30e2\u30c7\u30eb\u306fGradient Boosting Classifier\n\ngbc = create_model(\"gbc\",fold=5,max_depth=2)  #  Gradient Boosting Classifier\u30e2\u30c7\u30eb\u3092\u4f5c\u6210","7d305a40":"# \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n\n#from pycaret.classification import tune_model\n\n#tuned_gbc = tune_model(gbc,fold=5)  # \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8abf\u6574\n\n# finalize\n\nfinal_gbc = finalize_model(gbc)","b5a5d7d8":"\nprint(gbc)","37d0dee6":"# \u5404\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u3092\u8868\u793a\n\nfrom pycaret.classification import plot_model\n\n#plot_model(gbc, plot=\"feature\")  # \u5404\u7279\u5fb4\u306e\u91cd\u8981\u5ea6\u3092\u30d7\u30ed\u30c3\u30c8","2152531a":"#\u3000\u4e88\u6e2c\u306e\u5b9f\u65bd\n\nfrom pycaret.classification import predict_model\n\npredictions_gbc = predict_model(final_gbc, data=df_target2)\n","f72f2236":"# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u4e88\u6e2c\nrf = create_model(\"rf\",fold=5,max_depth=7)  #  Gradient Boosting Classifier\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\n#tuned_rf = tune_model(rf,fold=5)  # \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8abf\u6574","6db649f8":"print(rf)\n","63b199fa":"final_rf = finalize_model(rf)","56780b6a":"predictions_rf = predict_model(final_rf, data=df_target2)","9450ddc8":"predictions_rf","30c4906f":"# Logistic Regression\u3067\u4e88\u6e2c\nlr = create_model(\"lr\",fold=5)  #  \u30e2\u30c7\u30eb\u3092\u4f5c\u6210\n","581d1e67":"tuned_lr = tune_model(lr,fold=5)  # \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8abf\u6574","0b9558cd":"final_lr = finalize_model(lr)","646d3de4":"print(lr)\n","d0a4ec88":"predictions_lr = predict_model(lr, data=df_target2)","713a26d7":"predictions_lr","8ef1539a":"# Gradient boost\u3001Random Forrest\u3001Logistic Regression\u3067\u4e88\u6e2c\u3057\u305f\u5024\u3092\u30de\u30fc\u30b8\n\ndf_prediction_all = pd.DataFrame()\n\ndf_prediction_all[['Label_gbc','Score_gbc']] = predictions_gbc[['Label','Score']]\ndf_prediction_all[['Label_rf','Score_rf']] = predictions_rf[['Label','Score']]\ndf_prediction_all[['Label_lr','Score_lr']] = predictions_lr[['Label','Score']]","04ee2533":"predict_list = []\nfor i in range(len(df_prediction_all)):\n    temp = []\n    temp = [df_prediction_all['Score_gbc'][i],df_prediction_all['Score_rf'][i],df_prediction_all['Score_lr'][i]]\n    max_index = temp.index(np.max(temp))\n    if max_index == 0:\n        predict_list.append(df_prediction_all['Label_gbc'][i])\n    elif max_index == 1:\n        predict_list.append(df_prediction_all['Label_rf'][i])\n    else:\n        predict_list.append(df_prediction_all['Label_lr'][i])\n        ","f62eeded":"df_prediction_all","7cee2952":"df_test_data","f30e4171":"# \u30a8\u30e9\u30fc\u6642\u306b\u51fa\u529b\u3057\u306a\u3044\u3088\u3046\u306bdf_submit\u306eSurvived\u3092\u30c9\u30ed\u30c3\u30d7\ndf_submit = df_submit.drop('Survived',axis=1)\n\n# \u63d0\u51fa\u30c7\u30fc\u30bf\u3078\u30a4\u30f3\u30dd\u30fc\u30c8\ndf_submit['Survived'] = predict_list\n\n# \u6700\u3082\u30b9\u30b3\u30a2\u306e\u9ad8\u3044gbc\u3068\u4e88\u6e2c\u5024\u304c\u9055\u3046\u3082\u306e\u306e\u6570\nprint((df_submit['Survived'] != predictions_gbc['Label']).sum())\n\ndf_submit['Survived'] = [int(str(x)[0]) for x in df_submit.Survived]","2a506a87":"df_submit","54d0f44f":"df_submit.to_csv('pycaret_gbc_prepredict_age9.csv',index=None)","d58c49ef":"## Gradient Boosting\u3001Random Forrest\u3001Logisctic Regression\u306e\u4e2d\u3067\u6700\u3082\u30b9\u30b3\u30a2\u304c\u9ad8\u3044\u3082\u306e\u3092\u6700\u7d42\u7684\u306a\u4e88\u6e2c\u5024\u3068\u3059\u308b","29c418ae":"## Random Forrest\u3001Logistic Regression\u306e\u4e88\u6e2c\u7d50\u679c\u3082\u30de\u30fc\u30b8\u3059\u308b","1bbba339":"## \u307e\u305a\u306fAge\u3092\u4e88\u60f3\u3059\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3001Age\u306e\u6b20\u640d\u5024\u3092\u57cb\u3081\u308b"}}