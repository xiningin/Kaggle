{"cell_type":{"39cba98f":"code","262af048":"code","d1c6c131":"code","6a2c6d8f":"code","e0bf0b1d":"code","bf398693":"code","737d7072":"code","5d26eeee":"markdown","8c9b237b":"markdown","63d6c871":"markdown","d474f307":"markdown","f04f426b":"markdown","d16176ae":"markdown"},"source":{"39cba98f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","262af048":"import pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndata=pd.read_csv('\/kaggle\/input\/uci-wine-dataset\/wine.data',names=['Cultivars','Alcohol','Malic acid','Ash','Alcalinity of ash',\n'Magnesium','Total Phenols','Flavanoids','Nonflavanoid phenols',\n'Proanthocyanins','Color intensity','Hue','OD280\/OD315 of diluted wines','Proline'])\nprint(data)\ninput=['Alcohol','Malic acid','Ash','Alcalinity of ash',\n'Magnesium','Total Phenols','Flavanoids','Nonflavanoid phenols','Proanthocyanins','Color intensity','Hue','OD280\/OD315 of diluted wines','Proline']\nx=data[input]\ny=data['Cultivars']","d1c6c131":"print(data.describe())\nprint(data.dtypes)\nprint(data.corr())\nfor dat in input:\n    plt.hist(data[dat])\n    plt.title(dat)\n    plt.show()","6a2c6d8f":"from  sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.3)\nprint(xtrain.shape)\nprint(ytrain.shape)\nfrom sklearn.preprocessing import StandardScaler\nss=StandardScaler()\nex=ss.fit_transform(xtrain)\nextest=ss.fit_transform(xtest)","e0bf0b1d":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nparamlogi={'multi_class':['ovr','multinomial'],'solver':['newton-cg','saga','lbfgs'],'C':[1.0,0.8,0.7,0.6],'max_iter':[150]}\nlogi=GridSearchCV(LogisticRegression(), param_grid=paramlogi,scoring=['accuracy'],refit='accuracy')\nlogi.fit(ex,ytrain)","bf398693":"from sklearn.metrics import classification_report\ndef show(grid,xex,yey):\n    for a,b in zip(grid.cv_results_['params'],grid.cv_results_['mean_test_accuracy']):#,grid.cv_results_['mean_test_precision'],grid.cv_results_['mean_test_recall']):\n        print('parameters',a,'test accuracy',b)#,'precision',c,'recall',d)\n    print('best param:',grid.best_estimator_,'score',grid.best_score_)\n    print(classification_report(yey,grid.predict(xex)))\nshow(logi,extest,ytest)","737d7072":"logis=LogisticRegression(C=0.7,max_iter=150,multi_class='ovr',solver='newton-cg')\nlogis.fit(ex,ytrain)\nprint('score:', logis.score(extest,ytest))","5d26eeee":"Examining the data:","8c9b237b":"This is a dataset taken from UCI's ML Repository: https:\/\/archive.ics.uci.edu\/ml\/datasets\/Wine , description taken from the link:\nData Set Information:\n\nThese data are the results of a chemical analysis of wines grown in the same region in Italy but derived from three different cultivars. The analysis determined the quantities of 13 constituents found in each of the three types of wines.\n\nI think that the initial data set had around 30 variables, but for some reason I only have the 13 dimensional version. I had a list of what the 30 or so variables were, but a.) I lost it, and b.), I would not know which 13 variables are included in the set.\n\nThe attributes are (dontated by Riccardo Leardi, riclea '@' anchem.unige.it )\n1) Alcohol\n2) Malic acid\n3) Ash\n4) Alcalinity of ash\n5) Magnesium\n6) Total phenols\n7) Flavanoids\n8) Nonflavanoid phenols\n9) Proanthocyanins\n10)Color intensity\n11)Hue\n12)OD280\/OD315 of diluted wines\n13)Proline\n\nIn a classification context, this is a well posed problem with \"well behaved\" class structures. A good data set for first testing of a new classifier, but not very challenging.\n","63d6c871":"Next i will write a function to show the result of GridSearchCV, which is stored in cv_result_ attribute of the class.","d474f307":"You could use the refit parameter of GridSearchCV in order to automatically fit it using the best parameter found (default), but in this notebook i will just make another logisticregression class","f04f426b":"The distribution of the data is fairly consistent and bell-shaped, with no\/few cases of extreme value indicating the good condition of the data. Next we split the data into train and test sets plus scale them using StandardScaler to make it behave better when we use it in the model:","d16176ae":"I will use GridSearchCV in order to determine the optimal parameters. It's easier as this class will iterate through the parameters given, it should be noted that not all solvers or penalties are compatible with each other, plus some of them couldnt be used for solving multiclass problems. For further reference you could read sklearn's documentation on GridSearchCV and LogisticRegression."}}