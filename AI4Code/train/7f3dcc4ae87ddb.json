{"cell_type":{"20ed8b76":"code","4425f459":"code","08d753a0":"code","a9f301ec":"code","a9eab213":"markdown","4f07f618":"markdown","c5d33640":"markdown","6c6cb9bd":"markdown"},"source":{"20ed8b76":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBRegressor\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.inspection import permutation_importance\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\npath_to_file = '..\/input\/heart-disease-cleveland-uci\/heart_cleveland_upload.csv'\n\n#getting data\nX_full = pd.read_csv(path_to_file)\nX = X_full.drop(columns=['condition'],axis = 1)\n#target\ny = X_full.condition\n\n#print(list(X_full.columns))\n#X.head(10)","4425f459":"# training and validation sets\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,random_state=0)","08d753a0":"#\n# random forrest\n#\n\n\n\nrf = Pipeline([\n        ('classifier', RandomForestClassifier(random_state=42))\n])\n\nrf.fit(X_train, y_train)\n\nprint(\"Random forrest train accuracy: %0.3f\" % rf.score(X_train, y_train))\nprint(\"Random forrest test accuracy: %0.3f\" % rf.score(X_valid, y_valid))\n\n#\n# feature importance\n#\ntree_feature_importances = (\n    rf.named_steps['classifier'].feature_importances_)\nsorted_idx = tree_feature_importances.argsort()\n\n#make plot of feature importance\nfig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0] = 10\nfig_size[1] = 8\nplt.rcParams[\"figure.figsize\"] = fig_size\n\ny_ticks = np.arange(0, len(X.columns))\nfig, ax = plt.subplots()\nax.barh(y_ticks, tree_feature_importances[sorted_idx])\nax.set_yticklabels(X.columns[sorted_idx])\nax.set_yticks(y_ticks)\nax.set_title(\"Random Forest Feature Importances\")\nplt.show()\n","a9f301ec":"#\n# xgboost\n#\nfrom sklearn.model_selection import GridSearchCV\nmodel1 = XGBRegressor(n_estimators=150, learning_rate=0.05,random_state = 0)\nmodel1.fit(X_train, y_train)\npredictions1 = model1.predict(X_valid)\nmae1 = mean_absolute_error(y_valid, predictions1)\nprint('mean absolute error -> ', mae1)\n\n#print(model1.get_params())\n\n#uncertainty when performing cross validation\ncv_uncert = -1 * cross_val_score(model1, X, y,cv=10, scoring='neg_mean_absolute_error')\nprint('uncertainty from cross validation -> ', cv_uncert.mean())","a9eab213":"# Introduction\n\nA simple notebook to have a look at the predition of heart diseases using Random forrest, for which the feature importance is tested, and XGBoost, for which also cross validation is tested.","4f07f618":"**XGBoost**\n\nCheck the uncertainty from XGBoost and from cross validation.","c5d33640":"**Random forrest**\n\nThe accuracy for training and test sample is printed-out below. Additionally, the feature importance is shown. Here it should be mentioned that the condition was dropped. Otherwise the test accuracy is of course 100% and the feature importance of the quantity shoots up to 70 % or so.","6c6cb9bd":"Separate test sample and training sample."}}