{"cell_type":{"d482e174":"code","6547404a":"code","4e3aeb8c":"code","0e266e10":"code","52324b9a":"code","cb753617":"code","f6c77605":"code","ae01b9b2":"code","338776c9":"code","bf2143b4":"code","ff1de252":"code","134c38d2":"code","fee0d6b3":"code","0c31ae39":"code","c56704ef":"code","560891fa":"code","d6520b5f":"code","a351625c":"code","68d8038f":"code","0370e857":"code","88a8587e":"code","b782d15d":"code","d104be65":"code","e5160942":"code","ef831c5c":"code","40ed6dae":"code","aed7835c":"code","728a96ad":"code","0bab0ed4":"code","3cb7c5a9":"code","57f0b5fd":"code","8092bb63":"code","c75515f4":"code","4f1c24b8":"code","07bb21ea":"code","12cb455a":"code","59b1982f":"code","d4f9f02c":"code","4ec7be47":"code","fe964db3":"code","9477a97a":"code","76fe11f3":"code","847edf36":"code","adf0ce5d":"code","4b349b0c":"code","f2da1c53":"code","9406c8cf":"code","056e6600":"code","eed82122":"code","df957b2d":"code","96a43ecc":"code","2298c41e":"code","cd7a00b3":"code","7aa1ae98":"code","4509cb2f":"code","b16f8392":"code","92fa90c5":"code","6aa8db0f":"code","e79ac82c":"code","35eb7ec4":"code","c3ef7101":"code","0775c2d8":"code","78b03310":"code","3ab675c9":"code","1516bafd":"code","e75dfd70":"code","732e25f6":"code","ccc6aff2":"markdown","4c37371c":"markdown","db5e9d4b":"markdown","61fb42a6":"markdown","e4215b3f":"markdown","e797a6be":"markdown","301ab554":"markdown","1f073062":"markdown","b0d41e8d":"markdown","b3c6a966":"markdown","6418341d":"markdown","7eca93be":"markdown","88ee3209":"markdown","f92b01e7":"markdown","4dc8bebd":"markdown","58a1179c":"markdown","af8d65e9":"markdown","9a20a8a9":"markdown","4210817d":"markdown","d4935a8b":"markdown","7eb363fa":"markdown","6d58fcbf":"markdown","3479e437":"markdown","3bdc67c6":"markdown","aeddb0d3":"markdown","3b5db679":"markdown","ad832c29":"markdown","06b16c92":"markdown","e03e15fe":"markdown","d7b60034":"markdown","1fee06e8":"markdown","93c4d063":"markdown","dc82a2b2":"markdown","4e0ea237":"markdown","febbafac":"markdown","10e570fe":"markdown","0ce689c3":"markdown","35549b2e":"markdown"},"source":{"d482e174":"%reset -f ","6547404a":"#pip install pycaret","4e3aeb8c":"import pandas as pd\nfrom pycaret.classification import *\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score, plot_confusion_matrix\nfrom imblearn.over_sampling import SMOTE \nfrom sklearn.metrics import classification_report as class_report\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier,ExtraTreesClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier\nfrom yellowbrick.classifier import classification_report\nfrom sklearn.svm import SVC\nimport numpy as np\nfrom sklearn.impute import KNNImputer\nimport matplotlib.pyplot as plt\nsns.set()","0e266e10":"df_1 = pd.read_csv(r\"..\/input\/churn-dataset\/churn.txt\")\ndf_1.head()","52324b9a":"# gives the number of columns present, identifies any missing data;'non-null', identifies the data type for each column, gives the shape of the dataset\n\ndf_1.info();","cb753617":"# number of rows and columns\ndf_1.shape","f6c77605":"#  checking for missing data (further exploration)\ndf_1.isnull().sum()","ae01b9b2":"# 1 = Churn ; 0 = No Churn\ndf_1.Churn.value_counts()","338776c9":"# statistical description of data\ndf_1.describe()","bf2143b4":"print(df_1.skew())","ff1de252":"fig, axes = plt.subplots(4,3, figsize=(20,15),squeeze=False)\naxes = axes.flatten()\nprint('\\n'*3)\n#print(' '*70, 'Columns with Outliers')\nprint('\\n'*6)\nfor pl,col in enumerate(list(df_1.columns.values)):\n    sns.boxplot(ax=axes[pl], data =df_1, y=col)\n    ","134c38d2":"\ndf_1.hist( figsize = (20,15))\nplt.show()","fee0d6b3":"unq_dist = df_1[[('ContractRenewal'),('DataPlan'),('DataUsage'),('Churn')]]","0c31ae39":"unq_dist.describe()","c56704ef":"for pl,col in enumerate(list(unq_dist.iloc[:,:-1].columns.values)):\n    print('\\n')\n    print(' '*40,col)\n    print('\\n')\n    unq_dist.hist(column = col, by =\"Churn\")\n    plt.show();\n    plt.tight_layout();\n    plt.close() ","560891fa":"# plotting a graph matrix only with attributes that are well correlated to the target variable\n\nfor pl,col in enumerate(list(unq_dist.iloc[:,:-1].columns.values)):\n    \n    sns.violinplot(y= col ,x = 'Churn',data=unq_dist, scale='count')\n    sns.catplot(y= col, data= unq_dist, x = 'Churn')\n    \n    \n    plt.title(f'Chrun\/{col}');\n    plt.ylabel(col);\n    plt.show();\n    plt.tight_layout();\n    plt.close() \n    \n\n    ","d6520b5f":"unq_dist.columns[1:3]","a351625c":"df_1 = df_1.drop(unq_dist.columns[1:3], axis =1)","68d8038f":"df_1.head()","0370e857":"df_1.corr()['Churn']","88a8587e":"for col in (df_1.iloc[:,:-1].columns.values):\n    sns.lmplot(x='Churn',y=col,data=df_1)\n    plt.title(f'Churn\/{col}');\n    plt.ylabel(col);\n    plt.show();\n    plt.tight_layout();\n    plt.close() \n    print('   ')\n ","b782d15d":"# visual representation of our correlation analysis using the heatmap\nplt.figure(figsize=(12,6))\nsns.heatmap(df_1.corr(), annot= True)","d104be65":"holder = df_1[['Churn']]","e5160942":"holder","ef831c5c":"holder.Churn.value_counts()","40ed6dae":"df_1 = df_1.drop('Churn',axis =1)","aed7835c":"df_1.head()","728a96ad":"df_1['Churn'] = holder","0bab0ed4":"df_1.columns","3cb7c5a9":"df_1.head()","57f0b5fd":"df_1.Churn.value_counts()","8092bb63":"df_1.describe()","c75515f4":"for pl,col in enumerate(list(df_1.iloc[:,:-1].columns.values)):\n    print('\\n')\n    print(' '*40,col)\n    print('\\n')\n    df_1.hist(column = col, by =\"Churn\")\n    plt.show();\n    plt.tight_layout();\n    plt.close() ","4f1c24b8":"sns.countplot(x = 'Churn', data = df_1);","07bb21ea":"for pl,col in enumerate(list(df_1.iloc[:,:-1].columns.values)):\n   \n    sns.catplot(y= col, data= df_1, x = 'Churn')\n    plt.title(f'Chrun\/{col}');\n    plt.ylabel(col);\n    plt.show();\n    \n    sns.violinplot(y= col ,x = 'Churn',data=df_1, scale='count')\n    plt.title(f'Chrun\/{col}');\n    plt.ylabel(col);\n    plt.show();\n    plt.tight_layout();\n    plt.close() \n    print('\\n'*7)\n    \n\n    ","12cb455a":"df_1 = df_1.drop(['AccountWeeks', 'DayCalls'], axis=1)","59b1982f":"df_1.head()","d4f9f02c":"#x = df_1[['ContractRenewal', 'CustServCalls', 'DayMins', 'MonthlyCharge', 'OverageFee', 'RoamMins']]\nx = df_1.iloc[:,:-1]\ny = df_1.iloc[:, -1]","4ec7be47":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.01,\n                                                    random_state = 100)","fe964db3":"print('Before OverSampling, the shape of train_X: {}'.format(x_train.shape)) \nprint('Before OverSampling, the shape of train_y: {} \\n'.format(y_train.shape)) \n\nprint(\"Before OverSampling, counts of label '1' in y_train is : {}\".format(sum(y_train == 1))) \nprint(\"Before OverSampling, counts of label '0' in y_train is : {} \\n\".format(sum(y_train == 0))) \n\nsm = SMOTE(random_state = 100) \nx_train_res, y_train_res = sm.fit_sample(x_train, y_train.ravel()) \n\nprint('After OverSampling, the shape of train_X: {}'.format(x_train_res.shape)) \nprint('After OverSampling, the shape of train_y: {} \\n'.format(y_train_res.shape)) \n\nprint(\"After OverSampling, counts of label '1 in y_train is ': {}\".format(sum(y_train_res == 1))) \nprint(\"After OverSampling, counts of label '0'in y_train is: {}\".format(sum(y_train_res == 0))) \n","9477a97a":"new_x_train, new_x_test, new_y_train, new_y_test = train_test_split(x_train_res, y_train_res.ravel(), test_size = 0.3,\n                                                    random_state = 100)","76fe11f3":"print('Total number of 1 in new_y_train is: {}'.format(sum(new_y_train == 1)))\nprint('Total number of 0 in new_y_train is: {}'.format(sum(new_y_train == 0)))","847edf36":"print('Total number of 1 in new_y_test is: {}'.format(sum(new_y_test == 1)))\nprint('Total number of 0 in new_y_test is: {}'.format(sum(new_y_test == 0)))","adf0ce5d":"new_x_train.shape, x_train_res.shape","4b349b0c":"pc_data = x_train_res","f2da1c53":"y_train_res.shape","9406c8cf":"pc_data['Churn'] = y_train_res","056e6600":"pc_data.head()","eed82122":"pc_data.isnull().sum()","df957b2d":"pc_data['Churn'].shape","96a43ecc":"minmax= MinMaxScaler()\n\nnew_x_train = minmax.fit_transform(new_x_train)\nnew_x_test = minmax.transform(new_x_test)\n\n","2298c41e":"pc_data.Churn.value_counts()","cd7a00b3":"models = setup(data = pc_data, target = 'Churn',normalize = True, normalize_method = 'minmax',transformation = True,\n              verbose = False, html = True, train_size = 0.70,silent = True, session_id = 100, numeric_features = ['ContractRenewal', 'CustServCalls'])\n","7aa1ae98":"best9 = compare_models(n_select = 9)\n","4509cb2f":"[print('\\n','best9[{}] is: {}'.format(i,j),'\\n'*3) for i,j in enumerate(best9)];","b16f8392":"def AccuracyReportTrain(y_true,y_pred):\n    print('\\n\\nTrain Accuracy is: ',\n          round(100*accuracy_score(y_true,y_pred),3),'%\\n');","92fa90c5":"def AccuracyReportTest(y_true,y_pred):\n    print('\\n\\nTest Accuracy is: ',\n          round(100*accuracy_score(y_true,y_pred),3),'%\\n');","6aa8db0f":"def generateClassificationReportTrain(y_true,y_pred):\n    print('\\n\\n','    '*6,'Train Classification  \\n\\n')\n    print(class_report(y_true,y_pred));\n    #print(confusion_matrix(y_true,y_pred));\n    print('\\n\\nTrain Accuracy is: ',\n          round(100*accuracy_score(y_true,y_pred),3),'%\\n');","e79ac82c":"def generateClassificationReportTest(y_true,y_pred):\n    print('\\n\\n','    '*6,'Test Classification  \\n\\n')\n    print(class_report(y_true,y_pred));\n    #print(confusion_matrix(y_true,y_pred));\n    print('\\n\\nTest Accuracy is: ',\n          round(100*accuracy_score(y_true,y_pred),3),'%\\n');","35eb7ec4":"egbc = best9[0].fit(new_x_train,new_y_train)\nytrain_pred = egbc.predict(new_x_train)\n\nAccuracyReportTrain(new_y_train,ytrain_pred)\n\nclasses = [ \"Unchurned\",\"Churned\"]\nprint('\\n\\n','    '*6,'Train Classification  \\n\\n')\ndisp = classification_report(egbc, X_train = new_x_train, y_train = new_y_train, classes = classes,support=True)\n\nclassLabels = ['Not_Churned', 'Churned']\ndisp = plot_confusion_matrix(estimator=egbc, X=new_x_train, y_true=new_y_train, cmap='Blues', values_format='20.0f', display_labels=classLabels)\ndisp.figure_.set_size_inches(w=8, h=8)\ndisp.ax_.set_title('Train Confusion Matrix', fontsize=13)\nplt.grid()","c3ef7101":"ytest_pred = egbc.predict(new_x_test)\n\nAccuracyReportTest(new_y_test,ytest_pred)\n\nclasses = [ \"Unchurned\",\"Churned\"]\nprint('\\n\\n','    '*6,'Test Classification  \\n\\n')\ndisp = classification_report(egbc, X_train = new_x_train, y_train = new_y_train, X_test = new_x_test, y_test = new_y_test, classes = classes,support=True)\n\ndisp = plot_confusion_matrix(estimator=egbc, X=new_x_test, y_true=new_y_test, cmap='Blues', values_format='20.0f', display_labels=classLabels)\ndisp.figure_.set_size_inches(w=8, h=8)\ndisp.ax_.set_title('Test Confusion Matrix', fontsize=13)\nplt.grid()\nplt.show()","0775c2d8":"etc = best9[1].fit(new_x_train,new_y_train)\nytrain_pred = etc.predict(new_x_train)\n\nAccuracyReportTrain(new_y_train,ytrain_pred)\n\nclasses = [ \"Unchurned\",\"Churned\"]\nprint('\\n\\n','    '*6,'Train Classification  \\n\\n')\ndisp = classification_report(etc, X_train = new_x_train, y_train = new_y_train, classes = classes,support=True)\n\nclassLabels = ['Not_Churned', 'Churned']\ndisp = plot_confusion_matrix(estimator=etc, X=new_x_train, y_true=new_y_train, cmap='Blues', values_format='20.0f', display_labels=classLabels)\ndisp.figure_.set_size_inches(w=8, h=8)\ndisp.ax_.set_title('Train Confusion Matrix', fontsize=13)\nplt.grid()","78b03310":"ytest_pred = etc.predict(new_x_test)\n\nAccuracyReportTest(new_y_test,ytest_pred)\n\nclasses = [ \"Unchurned\",\"Churned\"]\nprint('\\n\\n','    '*6,'Test Classification  \\n\\n')\ndisp = classification_report(etc, X_train = new_x_train, y_train = new_y_train, X_test = new_x_test, y_test = new_y_test, classes = classes,support=True)\n\ndisp = plot_confusion_matrix(estimator=etc, X=new_x_test, y_true=new_y_test, cmap='Blues', values_format='20.0f', display_labels=classLabels)\ndisp.figure_.set_size_inches(w=8, h=8)\ndisp.ax_.set_title('Test Confusion Matrix', fontsize=13)\nplt.grid()\nplt.show()","3ab675c9":"rfc = best9[2].fit(new_x_train,new_y_train)\nytrain_pred = rfc.predict(new_x_train)\n\nAccuracyReportTrain(new_y_train,ytrain_pred)\n\nclasses = [ \"Unchurned\",\"Churned\"]\nprint('\\n\\n','    '*6,'Train Classification  \\n\\n')\ndisp = classification_report(rfc, X_train = new_x_train, y_train = new_y_train, classes = classes,support=True)\n\nclassLabels = ['Not_Churned', 'Churned']\ndisp = plot_confusion_matrix(estimator=rfc, X=new_x_train, y_true=new_y_train, cmap='Blues', values_format='20.0f', display_labels=classLabels)\ndisp.figure_.set_size_inches(w=8, h=8)\ndisp.ax_.set_title('Train Confusion Matrix', fontsize=13)\nplt.grid()","1516bafd":"ytest_pred = rfc.predict(new_x_test)\n\nAccuracyReportTest(new_y_test,ytest_pred)\n\nclasses = [ \"Unchurned\",\"Churned\"]\nprint('\\n\\n','    '*6,'Test Classification  \\n\\n')\ndisp = classification_report(rfc, X_train = new_x_train, y_train = new_y_train, X_test = new_x_test, y_test = new_y_test, classes = classes,support=True)\n\ndisp = plot_confusion_matrix(estimator=rfc, X=new_x_test, y_true=new_y_test, cmap='Blues', values_format='20.0f', display_labels=classLabels)\ndisp.figure_.set_size_inches(w=8, h=8)\ndisp.ax_.set_title('Test Confusion Matrix', fontsize=13)\nplt.grid()\nplt.show()","e75dfd70":"adc = best9[8].fit(new_x_train,new_y_train)\nytrain_pred = adc.predict(new_x_train)\n\nAccuracyReportTrain(new_y_train,ytrain_pred)\n\nclasses = [ \"Unchurned\",\"Churned\"]\nprint('\\n\\n','    '*6,'Train Classification  \\n\\n')\ndisp = classification_report(adc, X_train = new_x_train, y_train = new_y_train, classes = classes,support=True)\n\nclassLabels = ['Not_Churned', 'Churned']\ndisp = plot_confusion_matrix(estimator=adc, X=new_x_train, y_true=new_y_train, cmap='Blues', values_format='20.0f', display_labels=classLabels)\ndisp.figure_.set_size_inches(w=8, h=8)\ndisp.ax_.set_title('Train Confusion Matrix', fontsize=13)\nplt.grid()","732e25f6":"ytest_pred = adc.predict(new_x_test)\n\nAccuracyReportTest(new_y_test,ytest_pred)\n\nclasses = [ \"Unchurned\",\"Churned\"]\nprint('\\n\\n','    '*6,'Test Classification  \\n\\n')\ndisp = classification_report(adc, X_train = new_x_train, y_train = new_y_train, X_test = new_x_test, y_test = new_y_test, classes = classes,support=True)\n\ndisp = plot_confusion_matrix(estimator=adc, X=new_x_test, y_true=new_y_test, cmap='Blues', values_format='20.0f', display_labels=classLabels)\ndisp.figure_.set_size_inches(w=8, h=8)\ndisp.ax_.set_title('Test Confusion Matrix', fontsize=13)\nplt.grid()\nplt.show()","ccc6aff2":"#### Test","4c37371c":"### Viewing the Data","db5e9d4b":"## Continuing Correlation Analysis","61fb42a6":"# CHURN ANALYSIS","e4215b3f":"### Dropping the 'DataPlan' and 'DataUsage' Columns","e797a6be":"#### Train","301ab554":"Based on the graphical analysis we can see that almost all columns contain outliers","1f073062":"## Checking For Outliers","b0d41e8d":"## Forcusing on the columns with percuilar distribution (aside Churn column)","b3c6a966":"#### Knowing the count for our target data as shown below. (This shows that our dataset is underesampled. Since our target value is '1'; it means we're meant to develop a model that is good at predicting churn(1) and not vice versa.)","6418341d":"#### Train","7eca93be":"### Importing Modules","88ee3209":"### best9[1]: Extra Trees Classifier","f92b01e7":"## Applying the models chosen by the PyCaret Algorithm","4dc8bebd":"### Train Test Split","58a1179c":"### Creating the Data PyCaret will use to evaluate models","af8d65e9":"### Showing the spread of the Data","9a20a8a9":"### Resetting the notebook","4210817d":"Several machine learning algorithms make the assumption that the data follow a normal (or Gaussian) distribution. This is easy to check with the skewness value, which explains the extent to which the data is normally distributed. Ideally, the skewness value should be between -1 and +1, and any major deviation from this range indicates the presence of extreme values.","d4935a8b":"#### Test","7eb363fa":"From my analysis these columns apart from 'Contract Renewal' Column aren't going to be helpful in predicting customers that churnned, so I drop them","6d58fcbf":"#### From the above graph it is easy to see the imbalance in the target column of the DataSet","3479e437":"## Correlation Analysis","3bdc67c6":"### Rearranging the DataSet","aeddb0d3":"conclusion: Based on this analysis we could assueme that Churn, ContractRenewal, DataUsage, CustServCalls have been identified as the feastures with outliers, but let us graph it to see if this is true","3b5db679":"###  best9[0]: Extreme Gradient Boosting ","ad832c29":"#### Because there is imbalace in the DataSet (Churn column: more '0' values than '1' values) I will apply oversampling to fix this","06b16c92":"### Returning back to train test split:\n##### Scaling the data","e03e15fe":"### best9[2]: Random Forest Classifier","d7b60034":"## Checking for Outliers & Data Visualization (1)","1fee06e8":"#### Train","93c4d063":"#### Train","dc82a2b2":"#### Test","4e0ea237":"### best9[8]: Ada Boost Classifier","febbafac":"#### Test","10e570fe":"#### The PyCaret algorithm has selected the best 9 ML models to use","0ce689c3":"## Using PyCaret to see which models are best to use","35549b2e":"## Dropping 'AccountWeeks' and 'DayCalls' columns because they don't add to the prediction"}}