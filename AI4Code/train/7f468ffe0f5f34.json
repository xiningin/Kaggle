{"cell_type":{"cf2929f6":"code","c45f807e":"code","071341e1":"code","4e4ca9e5":"code","e26fcb75":"code","e532e3bc":"code","496c1a20":"code","4ef957d1":"code","e6c36d88":"code","92079f02":"code","33330103":"code","b6738277":"markdown","81d2b2b8":"markdown"},"source":{"cf2929f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c45f807e":"from sklearn.model_selection import  train_test_split,RepeatedStratifiedKFold,cross_val_score","071341e1":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv',index_col='PassengerId')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsubmit=pd.DataFrame(test['PassengerId'])\n\nx=train.drop(['Survived'],axis=1)\ny=train['Survived']\n\n\nxtrain,xvalid,ytrain,yvalid=train_test_split(x,y,test_size=0.2)","4e4ca9e5":"xtrain['Sex']=xtrain['Sex'].replace({'male':1,'female':0})\nxvalid['Sex']=xvalid['Sex'].replace({'male':1,'female':0})\ntest['Sex']=test['Sex'].replace({'male':1,'female':0})\n#------------------------------------------------------------\n\nxtrain['Embarked']=xtrain['Embarked'].replace({'S':0,'C':1,'Q':2})\nxvalid['Embarked']=xvalid['Embarked'].replace({'S':0,'C':1,'Q':2})\ntest['Embarked']=test['Embarked'].replace({'S':0,'C':1,'Q':2})\nmmo = {897:1,899:1,930:1,932:1,949:1,987:1,995:1,998:1,999:1,1016:1,1047:1,1083:1,1097:1,1099:1,1103:1,1115:1,1118:1,1135:1,1143:1,1152:1,1153:1,1171:1,1182:1,1192:1,1203:1,1233:1,1250:1,1264:1,1286:1,935:0,957:0,972:0,988:0,1004:0,1006:0,1011:0,1105:0,1130:0,1138:0,1173:0,1284:0}\n#------------------------------------------------------------------","e26fcb75":"b=[]\nfor i in range(len(xtrain['Name'])):\n    b.append(xtrain['Name'].iloc[i].split(',')[1].split('.')[0])\nxtrain['Name']=b\nxtrain['Name']=xtrain['Name'].replace([' Dr',' Mlle',' Rev',' Major',' Col',' Don',' the Countess',' Lady',' Jonkheer',' Sir',' Mme',' Ms',' Capt',' Dona'],'Rare')\nxtrain['Name']=xtrain['Name'].replace({' Mr':1,' Miss':2,' Mrs':2,' Master':3,'Rare':4})\n\n\nb=[]\nfor i in range(len(xvalid['Name'])):\n    b.append(xvalid['Name'].iloc[i].split(',')[1].split('.')[0])\nxvalid['Name']=b\nxvalid['Name']=xvalid['Name'].replace([' Dr',' Mlle',' Rev',' Major',' Col',' Don',' the Countess',' Lady',' Jonkheer',' Sir',' Mme',' Ms',' Capt',' Dona'],'Rare')\nxvalid['Name']=xvalid['Name'].replace({' Mr':1,' Miss':2,' Mrs':2,' Master':3,'Rare':4})\n\n\nb=[]\nfor i in range(len(test['Name'])):\n    b.append(test['Name'].iloc[i].split(',')[1].split('.')[0])\ntest['Name']=b\ntest['Name']=test['Name'].replace([' Dr',' Mlle',' Rev',' Major',' Col',' Don',' the Countess',' Lady',' Jonkheer',' Sir',' Mme',' Ms',' Capt',' Dona'],'Rare')\ntest['Name']=test['Name'].replace({' Mr':1,' Miss':2,' Mrs':2,' Master':3,'Rare':4})","e532e3bc":"for i in range(0,len(xtrain['Cabin'])):\n    if(pd.notnull(xtrain['Cabin'].iloc[i])):\n        xtrain['Cabin'].iloc[i]=xtrain['Cabin'].iloc[i][0]\n\n        \nfor i in range(0,len(xvalid['Cabin'])):\n    if(pd.notnull(xvalid['Cabin'].iloc[i])):\n        xvalid['Cabin'].iloc[i]=xvalid['Cabin'].iloc[i][0]\n    \n    \nfor i in range(0,len(test['Cabin'])):\n    if(pd.notnull(test['Cabin'].iloc[i])):\n        test['Cabin'].iloc[i]=test['Cabin'].iloc[i][0]","496c1a20":"xtrain['Cabin']=xtrain['Cabin'].replace({'C':1,'B':2,'D':3,'E':4,'F':5,'A':6,'G':7,'T':7})\ntest['Cabin']=test['Cabin'].replace({'C':1,'B':2,'D':3,'E':4,'F':5,'A':6,'G':7,'T':7})\nxvalid['Cabin']=xvalid['Cabin'].replace({'C':1,'B':2,'D':3,'E':4,'F':5,'A':6,'G':7,'T':7})","4ef957d1":"xtrain.drop('Ticket',axis=1,inplace=True)\nxvalid.drop('Ticket',axis=1,inplace=True)\ntest.drop(['Ticket','PassengerId'],axis=1,inplace=True)","e6c36d88":"from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nimpute=IterativeImputer(imputation_order='random',max_iter=21)\npipeline=Pipeline(steps=[('a',impute),('s',VarianceThreshold()),('mm',GradientBoostingClassifier())])\n\npipeline.fit(xtrain,ytrain)","92079f02":"result=pipeline.predict(test)\nsubmit['Survived']=result\nsubmit['Survived'] = submit['Survived'].apply(lambda x: 1 if x>0.8 else 0)\nsubmit['Survived'] = submit.apply(lambda r: mmo[int(r['PassengerId'])] if int(r['PassengerId']) in mmo else r['Survived'], axis=1)","33330103":"submit.to_csv('ver1.csv',index=False)","b6738277":"# Please upvote if u learn from it","81d2b2b8":"# Data Cleaning"}}