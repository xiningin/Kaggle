{"cell_type":{"a2eeb976":"code","e229ac63":"code","44b9e3d6":"code","410de70e":"code","a5904f11":"code","6d230bf2":"code","5a4b55f1":"code","ad4b7faa":"code","67fc1584":"code","5baa55a3":"code","d2c68f02":"code","7b9015be":"code","a2d24772":"code","b88187bd":"code","2758fd44":"code","622ac4b3":"code","b85d6c93":"code","b30145b2":"code","395222a5":"code","dc423dce":"code","7d0fe0b6":"code","c967c98e":"code","cc2033b1":"code","9af8bb7a":"code","d32f762c":"code","ea093d2e":"code","e87f5422":"code","b73f8ab6":"code","29506da2":"code","061badf9":"code","7b5c2832":"code","e705fad8":"markdown","a6301885":"markdown","f0428355":"markdown","2e781372":"markdown","fa3f0ba8":"markdown","aca96f23":"markdown","1cd599ef":"markdown","b73acbf9":"markdown","4d257100":"markdown","2695eaac":"markdown","72422080":"markdown","ca48e5ff":"markdown","c0c9d2ab":"markdown","683f7267":"markdown","6cffc9fa":"markdown","73e7f90e":"markdown","155136f5":"markdown","21fa7aae":"markdown","5f00446e":"markdown","316f0156":"markdown","0de15f85":"markdown"},"source":{"a2eeb976":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport geopandas as gpd\nfrom shapely.geometry import Point\n\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nfrom sklearn.neighbors import DistanceMetric\nfrom math import radians","e229ac63":"df = pd.read_csv(\"\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv\")\naus_town_gps = pd.read_csv(\"..\/input\/aus-town-gps\/aus_town_gps.csv\",sep=\",\")\nclimatsaus = pd.read_csv(\"..\/input\/climatsaus-v2\/climatsAUS_v2.csv\",sep=\";\")","44b9e3d6":"df.info()","410de70e":"df.describe(include='object')","a5904f11":"#Attribution de la classe de climat (classification de K\u00f6ppen) pour chaque ville\nclimatsaus.head()","6d230bf2":"# Pour simplifier, on regroupe les climats en 4 cat\u00e9gories : chaud_humide, temp\u00e9r\u00e9_froid, sec et m\u00e9diterran\u00e9en. On pourra ainsi faire des visualisations plus facilement.\n\nclimats_type = {'Am':'chaud_humide',\n                'Aw':'chaud_humide',\n                'Cfa':'chaud_humide',\n                'Cfb':'temp\u00e9r\u00e9_froid', \n                'Cfc':'temp\u00e9r\u00e9_froid', \n                'BSh':'sec',\n                'BSk':'sec',\n                'Bsk':'sec', \n                'Bwh':'sec',\n                'Csa':'m\u00e9diterran\u00e9en',\n                'Csb':'m\u00e9diterran\u00e9en'              \n               }\n\nclimatsaus['Clim_type']=climatsaus['Climat_Koppen'].map(climats_type)","5a4b55f1":"#Fusion des dataframes\n\ndf = pd.merge(df, aus_town_gps, how='left', left_on=\"Location\",right_on=\"Location\")\ndf = pd.merge(df, climatsaus, how='left', left_on=\"Location\",right_on=\"Location\")\ndf.head(10)","ad4b7faa":"df.info()","67fc1584":"#cr\u00e9ation de quelques variables de date et conversion de raintoday et raintomorrow en num\u00e9riques\ndf['RainToday_Num'] = (df['RainToday'] ==  'Yes')*1\ndf['RainTomorrow_Num'] = (df['RainTomorrow'] ==  'Yes')*1\ndf['Date'] = pd.to_datetime(df['Date'])\ndf['Mois'] = df['Date'].dt.month\ndf['Trimestre'] = df['Date'].dt.quarter\ndf['Annee'] = df['Date'].dt.year","5baa55a3":"#cr\u00e9ation d'un dictionnaire associant la direction du vent \u00e0 l'angle correspondant (en degr\u00e9s) sur le cercle trigonom\u00e9trique (ie. E=0\u00b0 et rotation dans le sens direct)\nangles = {'E':0, \n          'ENE':22.5, \n          'NE':45, \n          'NNE':67.5, \n          'N':90, \n          'NNW':112.5, \n          'NW':135, \n          'WNW':157.5, \n          'W':180, \n          'WSW':202.5, \n          'SW':225, \n          'SSW':247.5, \n          'S':270, \n          'SSE':292.5, \n          'SE':315, \n          'ESE':337.5}\n\n#ajout des variables indiquant l'angle du vent au DF\ndf['WindGust_Ang']=df['WindGustDir'].map(angles)\ndf['Wind9am_Ang'] = df['WindDir9am'].map(angles)\ndf['Wind3pm_Ang'] = df['WindDir3pm'].map(angles)\n\n#ajout de variables correspondant au cosinos de l'angle (abscisse des coordonn\u00e9es trigo). Un cosinus n\u00e9gatif correspond \u00e0 un vent d'ouest, un cosinus positif \u00e0 un vent d'est.\ndf['WindGust_cos'] = np.cos(np.radians(df['WindGust_Ang']))\ndf['Wind9am_cos'] = np.cos(np.radians(df['Wind9am_Ang']))\ndf['Wind3pm_cos'] = np.cos(np.radians(df['Wind3pm_Ang']))\n\n#ajout de variables correspondant au sinus de l'angle (ordonn\u00e9e des coordonn\u00e9es trigo). Un sinus n\u00e9gatif correspond \u00e0 un vent de sud, un sinus positif \u00e0 un vent de nord.\ndf['WindGust_sin'] = np.sin(np.radians(df['WindGust_Ang']))\ndf['Wind9am_sin'] = np.sin(np.radians(df['Wind9am_Ang']))\ndf['Wind3pm_sin'] = np.sin(np.radians(df['Wind3pm_Ang']))","d2c68f02":"#D\u00e9compte des valeurs manquantes\npercent_na = df.isna().sum() * 100 \/ len(df)\npercent_na = percent_na.sort_values(ascending=False)\n\nplt.figure(figsize=(16,4))\npercent_na[percent_na > 0].plot(kind='bar')\nplt.title(\"Part de valeurs manquantes par crit\u00e8re\");","7b9015be":"colInter=['MinTemp','MaxTemp','Rainfall','WindGustSpeed','WindSpeed9am','WindSpeed3pm','Humidity9am','Humidity3pm','Pressure9am','Pressure3pm','Temp9am','Temp3pm','WindGust_Ang','Wind9am_Ang','Wind3pm_Ang']\n\ndf_na = df.sort_values([\"Location\",\"Date\"])\n\ndf_inter=df_na[colInter]\n\n#1\u00e8re m\u00e9thode :\ndf_inter = df_inter.interpolate(method='linear')\n\n#2\u00e8me m\u00e9thode :\n#df_inter = df_inter.interpolate(method='ffill', limit_direction='forward')\n\n# On cr\u00e9e le nouveau dataframe df_na pour g\u00e9rer les na\ndf_na[colInter]=df_inter[colInter]\n","a2d24772":"percent_na = df_na.isna().sum() * 100 \/ len(df)\npercent_na = percent_na.sort_values(ascending=False)\n\nplt.figure(figsize=(16,4))\npercent_na[percent_na > 0].plot(kind='bar')\nplt.title(\"Part de valeurs manquantes par crit\u00e8re - apr\u00e8s \u00e9tape des NA\");","b88187bd":"plt.figure( figsize= (20, 10) )\ncorr = df.drop([\"Mois\",\"Trimestre\",\"Annee\"],axis=1).corr()\nsns.heatmap(corr, cmap=\"YlGnBu\",annot=True)\nplt.title(\"Carte thermique du jeu de donn\u00e9es - coefficient de corr\u00e9lation de Pearson\");","2758fd44":"f = plt.figure( figsize= (20, 5) )\nax1 = f.add_subplot(121)\nax2 = f.add_subplot(122)\n\ncorr = df.corr()\n\nax1.title.set_text('Correlations de RainTomorrow')\ntemp = corr[[\"RainTomorrow_Num\"]].loc[abs(corr[\"RainTomorrow_Num\"]) > 0.2].sort_values(by=\"RainTomorrow_Num\",ascending=False)\nsns.heatmap(temp, cmap=\"YlGnBu\",annot=True,ax=ax1)\n\nax2.title.set_text('Correlations de Sunshine')\ntemp = corr[[\"Sunshine\"]].loc[abs(corr[\"Sunshine\"]) > 0.2].sort_values(by=\"Sunshine\",ascending=False)\nsns.heatmap(temp , cmap=\"YlGnBu\",annot=True,ax=ax2)","622ac4b3":"temp = corr[\"RainTomorrow_Num\"].sort_values(ascending=False)\n\nplt.figure(figsize=(20,4))\ntemp.plot(kind='bar')\nplt.title(\"Correlations de RainTomorrow\");","b85d6c93":"temp = corr[\"Sunshine\"].sort_values(ascending=False)\n\nplt.figure(figsize=(20,4))\ntemp.plot(kind='bar')\nplt.title(\"Correlations de Sunshine\");","b30145b2":"Contour_Aus = gpd.read_file(gpd.datasets.get_path(\"naturalearth_lowres\"))\nContour_Aus = Contour_Aus[Contour_Aus[\"name\"] == \"Australia\"]\n\nstats = df.drop(columns=['Annee', 'Mois','Trimestre'],axis=0).groupby(['Location','Latitude','Longitude','Clim_type']).mean().reset_index()\n\nListCrit = ['MinTemp','MaxTemp','Rainfall','Evaporation','Sunshine','WindGustSpeed','WindSpeed9am','WindSpeed3pm','Humidity9am','Humidity3pm','Pressure9am','Pressure3pm','Cloud9am','Cloud3pm','Temp9am','Temp3pm','RainToday_Num']       \nfor i in ListCrit:\n    stats[i] = round(stats[i],2)\nstats\n\ngeometry = [Point(xy) for xy in zip(stats['Longitude'], stats['Latitude'])]\ngeo_df = gpd.GeoDataFrame(stats, geometry=geometry)","395222a5":"m = Contour_Aus.explore(\n        color = \"None\",\n        width = 800,\n        height = 500,\n        highlight = False,\n        popup = False,\n        control_scale=False\n)\n\ngeo_df.explore(\n      m=m,\n    width = 800,        \n    height = 500,\n     column=\"Rainfall\",  # make choropleth based on \"BoroName\" column\n     cmap=\"coolwarm\",\n     scheme=\"quantiles\",  # use mapclassify's natural breaks scheme\n     legend=True, # show legend\n     k=10, # use 10 bins\n     #legend_kwds=dict(colorbar=False), # do not use colorbar\n     marker_kwds=dict(radius=8)\n)\nm","dc423dce":"fig = plt.figure(constrained_layout=True, figsize=(20, 8))\nsubfigs = fig.subfigures(1, 2, wspace=0.07)\n\nax=subfigs[0].subplots(1, 1)\nContour_Aus.plot(ax=ax,color=\"None\",edgecolor=\"Black\")  \nax.title.set_text('Stations M\u00e9t\u00e9o selon le climat')\ngeo_df.plot(ax=ax,markersize=50, cmap='coolwarm', column=\"Clim_type\",legend=True);\n\nax2 = subfigs[1].subplots(2, 1)\n\nax2[0].title.set_text(\"Distribution annuelle des pluies par climat\")\nsns.lineplot(ax=ax2[0],data=df, x=\"Mois\", y=\"Rainfall\", hue=\"Clim_type\")\n\n#sns.countplot(ax=ax2[1],x=\"RainTomorrow\", data=df.loc[df.RainToday=='No'], hue='Clim_type') \n#ax2[1].title.set_text('RainToday = No')\n#sns.countplot(ax=ax2[1],x=\"Clim_type\",  data=df, hue='RainToday') \n#sns.barplot(ax=ax2[1],x=\"Clim_type\", y=\"counts\",hue=\"RainToday\", data=Comptage)\n\nComptage = df[['Clim_type','RainToday']].groupby(['Clim_type','RainToday']).size().reset_index(name='counts')\nComptage['RainToday_ratio'] = Comptage.groupby(['Clim_type'])['counts'].transform(lambda x: x*100\/x.sum())\nax2[1].title.set_text(\"R\u00e9partition des jours de pluie\")\nsns.barplot(ax=ax2[1],x=\"Clim_type\", y=\"RainToday_ratio\",hue=\"RainToday\", data=Comptage);","7d0fe0b6":"f = plt.figure(figsize=(20,10))\nax = f.add_subplot(231)\nax2 = f.add_subplot(232)\nax3 = f.add_subplot(233)\nax4 = f.add_subplot(234)\nax5 = f.add_subplot(235)\nax6 = f.add_subplot(236)\n\nContour_Aus.plot(ax=ax,color=\"None\",edgecolor=\"Black\")  \nax.title.set_text('Part des jours de pluie')\ngeo_df.plot(ax=ax, markersize=50, cmap='coolwarm', column=\"RainToday_Num\");\n\nContour_Aus.plot(ax=ax2,color=\"None\",edgecolor=\"Black\")  \nax2.title.set_text('Moyenne des pr\u00e9cipiations')\ngeo_df.plot(ax=ax2, markersize=50, cmap='coolwarm', column=\"Rainfall\");\n\nContour_Aus.plot(ax=ax3,color=\"None\",edgecolor=\"Black\")  \nax3.title.set_text('Moyenne des temp\u00e9ratures minimales')\ngeo_df.plot(ax=ax3, markersize=50, cmap='coolwarm', column=\"MinTemp\");\n\nContour_Aus.plot(ax=ax4,color=\"None\",edgecolor=\"Black\")  \nax4.title.set_text('Moyenne des temp\u00e9ratures maximales')\ngeo_df.plot(ax=ax4, markersize=50, cmap='coolwarm', column=\"MaxTemp\");\n\nContour_Aus.plot(ax=ax5,color=\"None\",edgecolor=\"Black\")  \nax5.title.set_text('Moyenne des vent Est - Ouest')\ngeo_df.plot(ax=ax5, markersize=50, cmap='coolwarm', column=\"Humidity9am\");\n\nContour_Aus.plot(ax=ax6,color=\"None\",edgecolor=\"Black\")  \nax6.title.set_text('Pression atmosph\u00e9rique')\ngeo_df.plot(ax=ax6, markersize=50, cmap='coolwarm', column=\"Pressure9am\");\n","c967c98e":"df[\"LogRainfall\"] = np.log(df[\"Rainfall\"])\ndf[\"LogEvaporation\"] = np.log(df[\"Evaporation\"])\n\nplt.figure(figsize=(20,5))\nplt.subplot(151)\nsns.histplot(data=df, x=\"Sunshine\",hue=\"RainTomorrow\",bins=20, multiple=\"layer\", thresh=None)\nplt.subplot(152)\nsns.histplot(data=df, x=\"MinTemp\",hue=\"RainTomorrow\",bins=20, thresh=None)\nplt.subplot(153)\nsns.histplot(data=df, x=\"Humidity3pm\",hue=\"RainTomorrow\",bins=20)\nplt.subplot(154)\nsns.histplot(data=df, x=\"LogRainfall\",hue=\"RainTomorrow\",bins=20)\nplt.subplot(155)\nsns.histplot(data=df, x=\"LogEvaporation\",hue=\"RainTomorrow\",bins=20)","cc2033b1":"print(\"Influence des variables atmosph\u00e9riques sur RainTomorrow pour chaque climat\")\n\nsns.catplot(data=df, y=\"Rainfall\", x=\"RainTomorrow\", col=\"Clim_type\", kind='violin', palette='Set1')\nsns.catplot(data=df, y=\"Sunshine\", x=\"RainTomorrow\", col=\"Clim_type\", kind='violin', palette='Set1')\nsns.catplot(data=df, y=\"MinTemp\", x=\"RainTomorrow\", col=\"Clim_type\", kind='violin', palette='Set1')\nsns.catplot(data=df, y=\"MaxTemp\", x=\"RainTomorrow\", col=\"Clim_type\", kind='violin', palette='Set1')\nsns.catplot(data=df, y=\"Pressure3pm\", x=\"RainTomorrow\", col=\"Clim_type\", kind='violin', palette='Set1')\nsns.catplot(data=df, y=\"Pressure9am\", x=\"RainTomorrow\", col=\"Clim_type\", kind='violin', palette='Set1')\nsns.catplot(data=df, y=\"Evaporation\", x=\"RainTomorrow\", col=\"Clim_type\", kind='violin', palette='Set1')\nsns.catplot(data=df, y=\"WindGustSpeed\", x=\"RainTomorrow\", col=\"Clim_type\", kind='violin', palette='Set1')\nsns.catplot(data=df, y=\"Cloud9am\", x=\"RainTomorrow\", col=\"Clim_type\", kind='violin', palette='Set1')\nsns.catplot(data=df, y=\"Cloud3pm\", x=\"RainTomorrow\", col=\"Clim_type\", kind='violin', palette='Set1');","9af8bb7a":"print('\\033[1m' + \"Influence de RainToday sur RainTomorrow\" + '\\033[0m')\n\n#Distribution des valeurs de RainTomorrow en fonction de RainToday (% affich\u00e9s en haut des barres)\n\nplt.figure(figsize=(30,5))\nplt.gcf().subplots_adjust(left = 0.2, bottom = 0.2, right = 0.9, top = 0.9, wspace = 0.5, hspace = 0)\n\nplt.subplot(141)\ntotal = float(len(df.loc[df.RainToday=='No']))\nax = sns.countplot(x=\"RainTomorrow\", data=df.loc[df.RainToday=='No']) \nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.title('RainToday = No')\n   \nplt.subplot(142)\ntotal = float(len(df.loc[df.RainToday=='Yes']))\nax = sns.countplot(x=\"RainTomorrow\", data=df.loc[df.RainToday=='Yes'])\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.ylim([0,95000])\nplt.title('RainToday = Yes')\n\n\n#Distribution des valeurs de RainTomorrow en fonction de RainToday pa climat\n\nplt.subplot(143)\nsns.countplot(x=\"RainTomorrow\", data=df.loc[df.RainToday=='No'], hue='Clim_type') \nplt.title('RainToday = No')\n    \nplt.subplot(144)\nsns.countplot(x=\"RainTomorrow\", data=df.loc[df.RainToday=='Yes'], hue='Clim_type')\nplt.ylim([0,37000])\nplt.title('RainToday = Yes');\n\n#table de contingence entre RainToday et RainTomorrow\ncontingence = pd.crosstab(df[\"RainToday\"],df[\"RainTomorrow\"])\n\n#test du chi2 entre RainToday et RainTomorrow\nfrom scipy.stats import chi2_contingency\n\nchi2 = chi2_contingency(contingence)\nprint(\"Test du chi2 entre RainToday et RainTomorrow :\")\nprint(\"statistique du test chi2 =\",chi2[0])\nprint(\"p-value du test chi2 =\",chi2[1])\nprint(\"degr\u00e9 de libert\u00e9 du test chi2 =\",chi2[2])\n\n#calcul du V de Cramer\ndef V_Cramer (table, N):\n    \"\"\"\n    Calcule le V de Cramer corrig\u00e9 d'un tableau de contingence\n    \n    Param\u00e8tres :\n    table : tableau de contingence\n    N : nombre d'observations\n    \n    Renvoie : la valeur du V de Cramer\n    \"\"\"\n    \n    chi2 = chi2_contingency(table)[0]\n    k = table.shape[0]\n    r = table.shape[1]\n    phi2 = np.max([0 , chi2\/N - (k-1)*(r-1)\/(N-1)])\n    ktil = k - (k-1)**2\/(N-1)\n    rtil = r - (r-1)**2\/(N-1)\n    V = np.sqrt( phi2 \/ np.min([ktil-1 , rtil-1]))\n    return V\n\nprint(\"V de Cramer :\", V_Cramer(contingence,df.shape[0]))","d32f762c":"df= df.sort_values([\"Location\",\"Date\"])\ndf[\"Rain_J_1\"] = df[\"RainToday\"].shift(1)\ndf[\"Rain_J_2\"] = df[\"RainToday\"].shift(2)\n\nplt.figure(figsize=(30,5))\nplt.gcf().subplots_adjust(left = 0.2, bottom = 0.2, right = 0.9, top = 0.9, wspace = 0.5, hspace = 0)\n\nplt.subplot(141)\nplt.title('Part des jours de pluie par climat')\nplt.ylim([0,50])\nComptage = df[['Clim_type','RainTomorrow']].groupby(['Clim_type','RainTomorrow']).size().reset_index(name='counts')\nComptage['Rain_ratio'] = Comptage.groupby(['Clim_type'])['counts'].transform(lambda x: x*100\/x.sum())\n\ng = sns.barplot(x=\"Clim_type\", y=\"Rain_ratio\",data=Comptage[Comptage[\"RainTomorrow\"] == \"Yes\"])\nfor p in g.patches:\n    g.annotate(format(p.get_height(), '.0f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()\/4), \n                   ha = 'center', va = 'center', \n                   size=15,\n                   xytext = (0, 0), \n                   textcoords = 'offset points')\n\nplt.subplot(142)\nplt.title('Quand il a plu aujourd hui')\nplt.ylim([0,50])\nComptage = df[['Clim_type','RainTomorrow','RainToday']].groupby(['Clim_type','RainTomorrow','RainToday']).size().reset_index(name='counts')\nComptage['Rain_ratio'] = Comptage.groupby(['Clim_type','RainTomorrow'])['counts'].transform(lambda x: x*100\/x.sum())\n\ng = sns.barplot(x=\"Clim_type\", y=\"Rain_ratio\",data=Comptage[(Comptage[\"RainToday\"] == \"Yes\")&(Comptage[\"RainTomorrow\"] == \"Yes\")])\nfor p in g.patches:\n    g.annotate(format(p.get_height(), '.0f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()\/4), \n                   ha = 'center', va = 'center', \n                   size=15,\n                   xytext = (0, 0), \n                   textcoords = 'offset points')\n    \nplt.subplot(143)\nplt.title('Quand il a plu la veille ')\nplt.ylim([0,50])\nComptage = df[['Clim_type','RainTomorrow','Rain_J_1']].groupby(['Clim_type','RainTomorrow','Rain_J_1']).size().reset_index(name='counts')\nComptage['Rain_ratio'] = Comptage.groupby(['Clim_type','RainTomorrow'])['counts'].transform(lambda x: x*100\/x.sum())\n\ng = sns.barplot(x=\"Clim_type\", y=\"Rain_ratio\",data=Comptage[(Comptage[\"Rain_J_1\"] == \"Yes\")&(Comptage[\"RainTomorrow\"] == \"Yes\")])\nfor p in g.patches:\n    g.annotate(format(p.get_height(), '.0f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()\/4), \n                   ha = 'center', va = 'center', \n                   size=15,\n                   xytext = (0, 0), \n                   textcoords = 'offset points')    \n    \nplt.subplot(144)\nplt.title('Quand il y a plu l avant veille')\nplt.ylim([0,50])\nComptage = df[['Clim_type','RainTomorrow','Rain_J_2']].groupby(['Clim_type','RainTomorrow','Rain_J_2']).size().reset_index(name='counts')\nComptage['Rain_ratio'] = Comptage.groupby(['Clim_type','RainTomorrow'])['counts'].transform(lambda x: x*100\/x.sum())\n\ng = sns.barplot(x=\"Clim_type\", y=\"Rain_ratio\",data=Comptage[(Comptage[\"Rain_J_2\"] == \"Yes\")&(Comptage[\"RainTomorrow\"] == \"Yes\")])\nfor p in g.patches:\n    g.annotate(format(p.get_height(), '.0f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()\/4), \n                   ha = 'center', va = 'center', \n                   size=15,\n                   xytext = (0, 0), \n                   textcoords = 'offset points')    \n    ","ea093d2e":"print('\\033[1m' + 'Direction du vent en fonction du climat et de la variable RainTomorrow' + '\\033[0m')\n\nfig = plt.figure(figsize=(15,20))\n\nax1 = fig.add_subplot(321)\nax1.set_title(\"Direction W\/E de la rafale la plus forte\")\ng = sns.boxplot(ax=ax1, data=df, y=\"WindGust_cos\", x=\"Clim_type\", hue=\"RainTomorrow\")\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nbox = g.get_position()\ng.set_position([box.x0, box.y0, box.width * 0.85, box.height])\ng.legend(loc='center right', bbox_to_anchor=(1.25, 0.5), ncol=1)\n\nax2 = fig.add_subplot(322)\nax2.set_title(\"Direction S\/N de la rafale la plus forte\")\ng = sns.boxplot(ax=ax2, data=df, y=\"WindGust_sin\", x=\"Clim_type\", hue=\"RainTomorrow\", palette='husl')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nbox = g.get_position()\ng.set_position([box.x0, box.y0, box.width * 0.85, box.height])\ng.legend(loc='center right', bbox_to_anchor=(1.25, 0.5), ncol=1)\n\nax3 = fig.add_subplot(323)\nax3.set_title(\"Direction W\/E du vent \u00e0 9h\")\ng = sns.boxplot(ax=ax3, data=df, y=\"Wind9am_cos\", x=\"Clim_type\", hue=\"RainTomorrow\")\nbox = g.get_position()\ng.set_position([box.x0, box.y0, box.width * 0.85, box.height])\ng.legend(loc='center right', bbox_to_anchor=(1.25, 0.5), ncol=1)\n\nax4 = fig.add_subplot(324)\nax4.set_title(\"Direction S\/N du vent \u00e0 9h\")\ng = sns.boxplot(ax=ax4, data=df, y=\"Wind9am_sin\", x=\"Clim_type\", hue=\"RainTomorrow\", palette='husl')\nbox = g.get_position()\ng.set_position([box.x0, box.y0, box.width * 0.85, box.height])\ng.legend(loc='center right', bbox_to_anchor=(1.25, 0.5), ncol=1)\n\nax5 = fig.add_subplot(325)\nax5.set_title(\"Direction W\/E du vent \u00e0 15h\")\ng = sns.boxplot(ax=ax5, data=df, y=\"Wind3pm_cos\", x=\"Clim_type\", hue=\"RainTomorrow\")\nbox = g.get_position()\ng.set_position([box.x0, box.y0, box.width * 0.85, box.height])\ng.legend(loc='center right', bbox_to_anchor=(1.25, 0.5), ncol=1) \n\nax6 = fig.add_subplot(326)\nax6.set_title(\"Direction S\/N du vent \u00e0 15h\")\ng = sns.boxplot(ax=ax6, data=df, y=\"Wind3pm_sin\", x=\"Clim_type\", hue=\"RainTomorrow\", palette='husl')\nbox = g.get_position()\ng.set_position([box.x0, box.y0, box.width * 0.85, box.height])\ng.legend(loc='center right', bbox_to_anchor=(1.25, 0.5), ncol=1);","e87f5422":"sns.relplot(data=df[df.Clim_type == 'm\u00e9diterran\u00e9en'], x=\"Mois\", y=\"WindGust_cos\", hue=\"RainTomorrow\", kind='line',  height=8.27)\nplt.title(\"Distribution annuelle de la direction des vents W\/E en climat m\u00e9diterran\u00e9en en fonction de RainTomorrow\");","b73f8ab6":"#r\u00e9duction du df \u00e0 ces deux climats\ndf2 = df[(df.Clim_type == 'm\u00e9diterran\u00e9en') | (df.Clim_type == 'chaud_humide')]\n\n#Distribution de WindGust_cos en fonction du climat et de RainTomorrow\nfig = plt.figure(figsize=(6,6))\nplt.title(\"Direction W\/E de la rafale la plus forte\")\nsns.boxplot(data=df2, y=\"WindGust_cos\", x=\"Clim_type\", hue=\"RainTomorrow\")\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.);","29506da2":"#Distribution annuelle de la direction W\/E de la rafale la plus forte\nprint(\"Distribution annuelle de la direction W\/E de la rafale la plus forte en fonction de RainTomorrow\")\nsns.relplot(data=df2, x=\"Mois\", y=\"WindGust_cos\", hue=\"RainTomorrow\", col='Clim_type', kind='line')\nplt.ylabel(\"Direction W-E (WindGust_cos)\");","061badf9":"print(\"test de corr\u00e9lation - climat m\u00e9diterran\u00e9en\")\n\ndf_med = df[df.Clim_type == 'm\u00e9diterran\u00e9en']\n#table de contingence entre RainToday et RainTomorrow\ncontingence_med = pd.crosstab(df_med[\"WindGust_cos\"],df_med[\"RainTomorrow\"])\n\n#test du chi2 entre RainToday et RainTomorrow\nchi2_med = chi2_contingency(contingence_med)\nprint(\"Test du chi2 entre WindGust_cos et RainTomorrow :\")\nprint(\"statistique du test chi2 =\",chi2_med[0])\nprint(\"p-value du test chi2 =\",chi2_med[1])\nprint(\"degr\u00e9 de libert\u00e9 du test chi2 =\",chi2_med[2])\n\n#calcul du V de Cramer\nprint(\"V de Cramer :\", V_Cramer(contingence_med,df_med.shape[0]))","7b5c2832":"print(\"test de corr\u00e9lation - climat chaud_humide\")\n\ndf_trop = df[df.Clim_type == 'chaud_humide']\n#table de contingence entre RainToday et RainTomorrow\ncontingence_trop = pd.crosstab(df_trop[\"WindGust_cos\"],df_trop[\"RainTomorrow\"])\n\n#test du chi2 entre RainToday et RainTomorrow\nchi2_trop = chi2_contingency(contingence_trop)\nprint(\"Test du chi2 entre WindGust_cos et RainTomorrow :\")\nprint(\"statistique du test chi2 =\",chi2_trop[0])\nprint(\"p-value du test chi2 =\",chi2_trop[1])\nprint(\"degr\u00e9 de libert\u00e9 du test chi2 =\",chi2_trop[2])\n\n#calcul du V de Cramer\nprint(\"V de Cramer :\", V_Cramer(contingence_trop,df_trop.shape[0]))","e705fad8":"- Liste des variables avec des valeurs manquantes tri\u00e9s par ordre d\u00e9croissant de valeurs manquantes : 4 variables avec une forte proportion de valeurs manquantes (Sunshine\/Evaporation\/Cloud3pm\/Cloud9am). A voir comment on les traite.\n- Les autres variables avec moins de 10% de valeurs maquantes peuvent \u00eatre trait\u00e9s avec la m\u00e9thode interpolate","a6301885":"Observations :\n- Corr\u00e9lations positives :\n    * 60-90% entre les variables correspondant \u00e0 une m\u00eame grandeur mesur\u00e9e (entre les temp\u00e9ratures, entre les vitesses du vent...).\n    * 55-59% entre Evaporation et Temp9am\/Temp3pm\/MaxTemp\n    * 52% entre Cloud9am\/Cloud3pm et Humidity3pm\n    * 47% entre Sunshine et MaxTemp\n- Corr\u00e9lations n\u00e9gatives :\n    * 68-70% entre Sunshine et Cloud9am\/Cloud3pm.\n    * 63% entre Sunshine et Humidity3pm.\n    * 47-56% entre Humidity9am\/Humidity3pm et Temp9am\/Temp3pm\n    * 41-46% entre WindGustSpeed et Pressure9am\/Pressure3pm (cas de situations d\u00e9pressionnaires apportant la pluie ?)\n","f0428355":"Interpr\u00e9tations - exemple du climat m\u00e9diterran\u00e9en :\n\nLes r\u00e9gions m\u00e9diterran\u00e9ennes sont situ\u00e9es sur la c\u00f4te sud ou sud-ouest de l\u2019\u00eele (oc\u00e9an indien). Les pluies sont apport\u00e9es par des fronts nuageux venant de l'ouest.\n\nLe ph\u00e9nom\u00e8ne est d\u2019autant plus marqu\u00e9 en hiver, en raison de la migration vers le nord de la cr\u00eate subtropicale.  Il s\u2019agit d\u2019une ceinture de haute-pressions (anticyclone) qui permet le maintien d\u2019un temps sec sur le sud du pays en \u00e9t\u00e9. Pendant l\u2019hiver austral, cette ceinture remonte vers le nord, donc la c\u00f4te sud de l\u2019Australie se retrouve sous cette cr\u00eate, ce qui permet aux fronts froids d\u00e9pressionnaires situ\u00e9s sous la ceinture de parcourir le sud du pays, apportant fr\u00e9quemment des pluies. ","2e781372":"Conclusion des chi2 :\nLa direction est-ouest de la rafale la plus forte est corr\u00e9l\u00e9e \u00e0 la pluie en climat m\u00e9diterran\u00e9en (p-value = 0) et en climat chaud_humide (p_value = 0) mais la corr\u00e9lation est plus importante en climat m\u00e9diterran\u00e9en (V de Cramer plus \u00e9lev\u00e9).\n\nNos hypoth\u00e8ses sont valid\u00e9es.","fa3f0ba8":"- Quelles sont les variables les plus corr\u00e9l\u00e9es \u00e0 RainTomorrow ?\n    - Ensoleillement : Sunshine\n    - Humidit\u00e9 : 3pm et 9am\n    - Couverture nuageuse : 3pm et 9am\n    - Pluie du jour : RainToday\n    - Pression atmosph\u00e9rique : Pressure3pm et Pressure9am\n\n\n- L'ensoleillement (Sunshine) est corr\u00e9l\u00e9 \u00e0 RainTomoroww_num malgr\u00e9 que presque 50% de NA pour cette variable. Quand on regarde les corr\u00e9lations, on peut imaginer de traiter les NA en r\u00e9gressant Sunshine sur les crit\u00e8res les plus corr\u00e9l\u00e9s, \u00e0 savoir :\n    - Couverture nuageuse : 3pm et 9am\n    - Humidit\u00e9 : 3pm et 9am\n    - Temp\u00e9rature : Temp3pm, MaxTemp, Temp9am\n  ","aca96f23":"## Num\u00e9risation des vents","1cd599ef":"Le jeu de donn\u00e9es poss\u00e8de 145 460 entr\u00e9es et 23 colonnes dont :\n- La date de l'observation.\n- La ville dans laquelle se situe la station m\u00e9t\u00e9o.\n- 20 variables d\u00e9crivant les conditions atmosph\u00e9riques du jour de l\u2019observation. *\n- La variable cible RainTomorrow dont la valeur (Yes ou No) indique s'il a plu le lendemain de l'observation.\n\n*Le jeu de donn\u00e9es contient un m\u00e9lange de variables explicatives cat\u00e9gorielles (type object) et de variables explicatives num\u00e9riques (type float64) :\n- 14 variables continues : MinTemp, MaxTemp, Rainfall, Evaporation, Sunshine, WindGustSpeed, WindSpeed9am, WindSpeed3pm, Humidity9am, Humidity3pm, Pressure9am, Pressure3pm, Temp9am, Temp3pm\n- 2 variables discr\u00e8tes (Nombre d'octas, de 0 \u00e0 9) : Cloud9am, Cloud3pm\n- 4 variables cat\u00e9gorielles non-num\u00e9riques : WinGustDir, WindDir3am, WindDir3pm, RainToday.\n- Les valeurs de la variable RainToday (Yes, No) sont d\u00e9finies par la variable Rainfall (Yes si pr\u00e9cipitations > 1mm)*\n\nPlusieurs variables poss\u00e8dent de nombreuses valeurs manquantes qu'il faudra g\u00e9rer.\n\nLe jeu de donn\u00e9es comporte 3436 journ\u00e9es d'observations m\u00e9t\u00e9orologiques (entre d\u00e9cembre 2008 et juin 2017) r\u00e9alis\u00e9es par 49 stations m\u00e9t\u00e9o (Location).","b73acbf9":"# Gestion des NA","4d257100":"# Corr\u00e9lations","2695eaac":"Pour simplifier :\n\nHypoth\u00e8ses :\n- La direction des vents dominants diff\u00e8re d'un climat \u00e0 l'autre.\n- La direction des vents n'a pas la m\u00eame influence sur la pluie selon le climat.\n\nPour tester ces hypoth\u00e8ses, on se concentre sur deux climats diff\u00e9rents :\n- Le climat chaud_humide (c\u00f4te est, nord-est, oc\u00e9an Pacifique)\n- Le climat m\u00e9diterran\u00e9en (c\u00f4te sud, sud-ouest, oc\u00e9an Indien)\n\nOn \u00e9tudiera uniquement la direction W-E de la rafale la plus forte (WindGust_cos).","72422080":"# Influence pour pr\u00e9dire la pluie","ca48e5ff":"Constats :\n\n* La distribution de Sunshine et Humidity3pm est bien diff\u00e9rente selon RainTomorrow\n* Pour MinTemp, la distribution est relativement similaire\n* Pour Rainfall et Evaporation, on passe au log pour neutraliser l'influence des valeurs extremes. On voit aussi l'influence plus importante de Rainfall sur RainTomorrow (distribution diff\u00e9rentes)","c0c9d2ab":"# Influence pour la pr\u00e9vision de pluie selon le climats","683f7267":"## Import des fichiers de travail","6cffc9fa":"Observations : \n\n- Les stations m\u00e9t\u00e9o d'Australie sont regroup\u00e9es en 4 climats diff\u00e9rents:\n    - m\u00e9diterrann\u00e9en : stations du sud ouest et du sud centre\n    - chaud_humide (tropical et subtropical humide) => c\u00f4te est du pays\n    - temp\u00e9r\u00e9_froid (temp\u00e9r\u00e9 oc\u00e9anique + montagnard) => plut\u00f4t sud est\n    - sec (chaud et semi-aride, voire aride) => int\u00e9rieur du pays\n\n- La distribution mensuelle des pr\u00e9cipitations illustre bien les diff\u00e9rences de climat (mousson estivale pour le climat tropical, hivernale pour le climat m\u00e9diterran\u00e9en)\n\n- Pour les stations au climat sec, on a 9% de jours de pluie alors que pour les autres on est aux alentours de 22, 23%.\n  ","73e7f90e":"Observations :\nLa distribution des directions des vents selon la pluie diff\u00e8re d\u2019un climat \u00e0 l\u2019autre.","155136f5":"**Chargements des jeux de donn\u00e9es :**\n - df : donn\u00e9es m\u00e9t\u00e9o en australie sur 10 ans\n - aus_town_gps : localisation des stations m\u00e9t\u00e9o (x,y) => ce jeu de donn\u00e9es va nous permettre de repr\u00e9senter les indicateurs sur une carte et de calculer des distances entre stations m\u00e9t\u00e9o\n - climatsaus : climat des stations m\u00e9teo ","21fa7aae":"Observations :\n\nRainfall : Des valeurs extr\u00eames pour tous les climats, particuli\u00e8rement importantes pour le climats chaud et humide. L\u2019influence de RainToday sur RainTomorrow permettra de pr\u00e9ciser ces observations (voir plus loin).\n\nSunshine : Les pluies sont associ\u00e9es \u00e0 un ensoleillement plus faible la veille, effet moins marqu\u00e9 pour le climat temp\u00e9r\u00e9 froid.\n\nCloud9am\/3pm : L\u2019aspect bossel\u00e9 des violons s\u2019explique par la nature discr\u00e8te de ces variables.\nLa couverture nuageuse est plus importante en cas de pluie le lendemain. L\u2019inverse n\u2019est pas observ\u00e9, ce qui peut s\u2019expliquer par la pr\u00e9sence de nombreux jours de grisaille non pluvieux, en particulier sous les climats temp\u00e9r\u00e9 et m\u00e9diterran\u00e9en.\n\nMax\/MinTemp : Pas d\u2019association marqu\u00e9e entre temp\u00e9rature et pluie le lendemain. On observe plus de valeurs extr\u00eames n\u00e9gatives en climat temp\u00e9r\u00e9.\n\nEvaporate : l\u2019association entre \u00e9vaporation et pluie n\u2019est pas \u00e9vidente. Les valeurs extr\u00eame s\u2019observent surtout sous le climat chaud humide et le climat sec. \n\nPressure9am\/3pm : On observe une l\u00e9g\u00e8re association entre valeurs faibles de pression atmosph\u00e9rique et pluie le lendemain (situation d\u00e9pressionaire), les valeurs extr\u00eames faibles \u00e9tant presque toujours associ\u00e9es \u00e0 de pluie.\n\nWindGustSpeed : La forme des violons diff\u00e8rent entre les deux modalit\u00e9s : ils sont plus \u00e9tal\u00e9s avec plus de valeurs extr\u00eames positives en cas de pluie.","5f00446e":"# Decouverte du dataframe - Pr\u00e9processing","316f0156":"# Repr\u00e9sentation cartographique","0de15f85":"Interpr\u00e9tation :\n\nS\u2019il ne pleut pas aujourd\u2019hui, on n\u2019observera pas de pluie le lendemain dans 84% des cas. La r\u00e9ciproque n\u2019est pas vraie : s\u2019il pleut aujourd\u2019hui, la pluie ne persistera que dans la moiti\u00e9 des cas environ.\n\nCette tendance s\u2019observe pour tous les climats (y compris quand on regarde si il a plus les jours d'avant (cf graphes ci dessous)\n\n"}}