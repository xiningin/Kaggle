{"cell_type":{"269019b9":"code","333c9aa7":"code","f335d1f0":"code","c7f4a9be":"code","b86feb3c":"code","eb991396":"code","648370b3":"code","59c1f147":"code","078f7e7f":"code","58f055d7":"code","035d3886":"code","d701489a":"code","2d7689db":"code","45392770":"code","8f57b1f1":"code","5f3f4d11":"code","59744aa3":"code","2f96861e":"code","1a098477":"code","8109374c":"code","7e08fd71":"code","06194072":"code","de004d47":"code","d07292e6":"code","2f988f20":"code","5e58d50b":"code","4518ff5d":"code","c6f8cd20":"code","0b86637f":"code","f5b5da25":"code","c9e8d43c":"code","3341e261":"code","ef2695f0":"code","42bd4dbf":"code","a19accb3":"code","9585dafc":"code","63c2729d":"code","00c3d824":"code","5e5d70e0":"code","6eed5ce8":"code","082a67c1":"markdown","7bbe63c5":"markdown","632b3eed":"markdown","909fe7fa":"markdown","e38ec827":"markdown","d7d0b882":"markdown","585cea7b":"markdown","ebc733bc":"markdown","4dc2d90c":"markdown","5ee9182f":"markdown","d9b43b22":"markdown","08b4874b":"markdown","1c891258":"markdown","970c6a10":"markdown","e9a27222":"markdown","1faa57d2":"markdown","6a82d939":"markdown","3a914ded":"markdown","a70191e6":"markdown","36921f3b":"markdown","df3cdb04":"markdown","7d992872":"markdown","e919ed19":"markdown","0724d836":"markdown","5eeb91af":"markdown","38a67380":"markdown","d9ad40e2":"markdown","316fcecf":"markdown","1d73e357":"markdown","0a3ca52e":"markdown","1834e079":"markdown","b1a0920a":"markdown","b46ee6e7":"markdown","1f17ad0d":"markdown","33886935":"markdown","1647165d":"markdown","f164aded":"markdown","b4ff6ed1":"markdown","18d06288":"markdown","cced199e":"markdown","8e079420":"markdown","c320c349":"markdown","aaa91d91":"markdown","79646d75":"markdown","7d063a0f":"markdown","8b14ac1f":"markdown","f333cf7e":"markdown"},"source":{"269019b9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","333c9aa7":"# Show the Dataset Path to get detaset\n\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f335d1f0":"#  Create New Variable and stores the dataset values as Data Frame\n\nloan_train = pd.read_csv('\/kaggle\/input\/loan-eligible-dataset\/loan-train.csv')\nloan_test = pd.read_csv('\/kaggle\/input\/loan-eligible-dataset\/loan-test.csv')","c7f4a9be":"loan_train.head()","b86feb3c":"loan_train","eb991396":"print(\"Rows: \", len(loan_train))","648370b3":"print(\"Columns: \", len(loan_train.columns))","59c1f147":"print(\"Shape : \", loan_train.shape)","078f7e7f":"loan_train_columns = loan_train.columns # assign to a variable\nloan_train_columns # print the list of columns","58f055d7":"loan_train.describe()","035d3886":"loan_train.info()\n ","d701489a":"def explore_object_type(df ,feature_name):\n    \"\"\"\n    To know, How many values available in object('categorical') type of features\n    And Return Categorical values with Count.\n    \"\"\"    \n    if df[feature_name].dtype ==  'object':\n        print(df[feature_name].value_counts())","2d7689db":"# Now, Test and Call a function for gender only\nexplore_object_type(loan_train, 'Gender')","45392770":"# Solution is, Do you remember we have variable with name of `loan_train_columns`, Right,  let's use it\n# 'Loan_ID', 'Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'Property_Area', 'Loan_Status'\n\nfor featureName in loan_train_columns:\n    if loan_train[featureName].dtype == 'object':\n        print('\\n\"' + str(featureName) + '\\'s\" Values with count are :')\n        explore_object_type(loan_train, str(featureName))","8f57b1f1":"import missingno as msno","5f3f4d11":"# list of how many percentage values are missing\nloan_train\n\nloan_train.isna().sum()\n# round((loan_train.isna().sum() \/ len(loan_train)) * 100, 2)","59744aa3":"msno.bar(loan_train)","2f96861e":"msno.matrix(loan_train )\n","1a098477":"loan_train['Credit_History'].fillna(loan_train['Credit_History'].mode(), inplace=True) # Mode\nloan_test['Credit_History'].fillna(loan_test['Credit_History'].mode(), inplace=True) # Mode\n\n\nloan_train['LoanAmount'].fillna(loan_train['LoanAmount'].mean(), inplace=True) # Mean\nloan_test['LoanAmount'].fillna(loan_test['LoanAmount'].mean(), inplace=True) # Mean","8109374c":"loan_train.Loan_Status = loan_train.Loan_Status.replace({\"Y\": 1, \"N\" : 0})\n# loan_test.Loan_Status = loan_test.Loan_Status.replace({\"Y\": 1, \"N\" : 0}) \n\nloan_train.Gender = loan_train.Gender.replace({\"Male\": 1, \"Female\" : 0})\nloan_test.Gender = loan_test.Gender.replace({\"Male\": 1, \"Female\" : 0})\n\nloan_train.Married = loan_train.Married.replace({\"Yes\": 1, \"No\" : 0})\nloan_test.Married = loan_test.Married.replace({\"Yes\": 1, \"No\" : 0})\n\nloan_train.Self_Employed = loan_train.Self_Employed.replace({\"Yes\": 1, \"No\" : 0})\nloan_test.Self_Employed = loan_test.Self_Employed.replace({\"Yes\": 1, \"No\" : 0})\n","7e08fd71":"\nloan_train['Gender'].fillna(loan_train['Gender'].mode()[0], inplace=True)\nloan_test['Gender'].fillna(loan_test['Gender'].mode()[0], inplace=True)\n\nloan_train['Dependents'].fillna(loan_train['Dependents'].mode()[0], inplace=True)\nloan_test['Dependents'].fillna(loan_test['Dependents'].mode()[0], inplace=True)\n\nloan_train['Married'].fillna(loan_train['Married'].mode()[0], inplace=True)\nloan_test['Married'].fillna(loan_test['Married'].mode()[0], inplace=True)\n\nloan_train['Credit_History'].fillna(loan_train['Credit_History'].mean(), inplace=True)\nloan_test['Credit_History'].fillna(loan_test['Credit_History'].mean(), inplace=True)\n","06194072":"from sklearn.preprocessing import LabelEncoder\nfeature_col = ['Property_Area','Education', 'Dependents']\nle = LabelEncoder()\nfor col in feature_col:\n    loan_train[col] = le.fit_transform(loan_train[col])\n    loan_test[col] = le.fit_transform(loan_test[col])","de004d47":"import matplotlib.pyplot as plt\n%matplotlib inline\n\n\nimport seaborn as sns\nsns.set_style('dark')\n","d07292e6":"loan_train","2f988f20":"loan_train.plot(figsize=(18, 8))\n\nplt.show()","5e58d50b":"plt.figure(figsize=(18, 6))\nplt.subplot(1, 2, 1)\n\n\nloan_train['ApplicantIncome'].hist(bins=10)\nplt.title(\"Loan Application Amount \")\n\nplt.subplot(1, 2, 2)\nplt.grid()\nplt.hist(np.log(loan_train['LoanAmount']))\nplt.title(\"Log Loan Application Amount \")\n\nplt.show()","4518ff5d":"plt.figure(figsize=(18, 6))\nplt.title(\"Relation Between Applicatoin Income vs Loan Amount \")\n\nplt.grid()\nplt.scatter(loan_train['ApplicantIncome'] , loan_train['LoanAmount'], c='k', marker='x')\nplt.xlabel(\"Applicant Income\")\nplt.ylabel(\"Loan Amount\")\nplt.show()","c6f8cd20":"plt.figure(figsize=(12, 6))\nplt.plot(loan_train['Loan_Status'], loan_train['LoanAmount'])\nplt.title(\"Loan Application Amount \")\nplt.show()","0b86637f":"plt.figure(figsize=(12,8))\nsns.heatmap(loan_train.corr(), cmap='coolwarm', annot=True, fmt='.1f', linewidths=.1)\nplt.show()","f5b5da25":"# import ml model from sklearn pacakge\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import accuracy_score\n","c9e8d43c":"logistic_model = LogisticRegression()","3341e261":"train_features = ['Credit_History', 'Education', 'Gender']\n\nx_train = loan_train[train_features].values\ny_train = loan_train['Loan_Status'].values\n\nx_test = loan_test[train_features].values\n","ef2695f0":"logistic_model.fit(x_train, y_train)","42bd4dbf":"# Predict the model for testin data\n\npredicted = logistic_model.predict(x_test)\n","a19accb3":"# check the coefficeints of the trained model\nprint('Coefficient of model :', logistic_model.coef_)\n","9585dafc":"# check the intercept of the model\nprint('Intercept of model',logistic_model.intercept_)","63c2729d":"# Accuray Score on train dataset\n# accuracy_train = accuracy_score(x_test, predicted)\nscore = logistic_model.score(x_train, y_train)\nprint('accuracy_score overall :', score)\nprint('accuracy_score percent :', round(score*100,2))\n","00c3d824":"\n# predict the target on the test dataset\npredict_test = logistic_model.predict(x_test)\nprint('Target on test data',predict_test) \n","5e5d70e0":"import pickle as pkl","6eed5ce8":"# save the model to disk\nfilename = 'logistic_model.pkl'\npkl.dump(logistic_model, open(filename, 'wb')) # wb means write as binary\n\n\n","082a67c1":"<a id=\"2\"><\/a><br>\n# 2. Exploratory Data Analysis\n\nIn this section, We learn about extra information about data and it's characteristics.\n","7bbe63c5":"`Loan_Status` feature boolean values, So we replace `Y` values with `1` and `N` values with `0`\nand same for other `Boolean` types of columns","632b3eed":"> ## *Note: Your output maybe shorter or longer, It's totally depend upon your dataset's columns* ","909fe7fa":"### # convert Categorical variable with Numerical values.","e38ec827":"<a id=\"3\"><\/a><br>\n# 3. Data Visualizations\n\n\nIn this section, We are showing the visual information from the dataset, For that we need some pakages that are `matplotlib` and `seaborn`\n\n","d7d0b882":"- As we can see here, there are too many columns missing with small amount of null values so we use `mean` amd `mode` to replace with `NaN` values.","585cea7b":"\n## Dataset Key Information.\n  \n---  \n  \n> - `Loan_ID`--------------> Unique Loan ID.\n- `Gender`   --------------> Male\/ Female \n- `Married`  --------------> Applicant married (Y\/N) \n- `Dependents` ------------> Number of dependents \n- `Education` -------------> Applicant Education (Graduate\/ Under Graduate) \n- `Self_Employed` ---------> Self-employed (Y\/N) \n- `ApplicantIncome` -------> Applicant income \n- `CoapplicantIncome` -----> Coapplicant income \n- `LoanAmount`  -----------> Loan amount in thousands \n- `Loan_Amount_Term` ------> Term of a loan in months \n- `Credit_History` --------> Credit history meets guidelines \n- `Property_Area` ---------> Urban\/ Semi-Urban\/ Rural \n- `Loan_Status` -----------> Loan approved (Y\/N) ","ebc733bc":"- As we can see in the above output, there are too many columns, ( columns known as features as well. )\n\nWe can also use `loan_train` to show few rows from the first five and last five record from the dataset","4dc2d90c":"* Let's build the model","5ee9182f":"<div class='text-center'>\n    <h1>\ud83c\udfe7 Loan Eligibility Prediction \ud83d\udcb0 using Machine Learning Models \ud83e\udd16   <\/h1>\n<\/div>\n","d9b43b22":"- First of all, We explore object type of data\nSo let's make a function to know how many types of values available in the column","08b4874b":"<a id=\"4\"><\/a><br>\n# 4. Choose ML Model.","1c891258":"- After defined a function, Let's call it. and check what's the output of our created function.","970c6a10":"- First of all we use the `loan_train.describe()` method to shows the important information from the dataset\n- It provides the `count`, `mean`, `standard deviation (std)`, `min`, `quartiles` and `max` in its output.","e9a27222":"### In this notebook kernal, I'm going to predictions customers are eligible for the loan and check whether what are the missing criteria to know why customer not getting loan to make there own house.\n\n\n<div class=\"text-success \"><h4> We will learning about, Data Analysis Preprocess such as, <\/h4><\/div>\n\n--- \n\n> ### Steps are:\n\n\n1. [Gathering Data](#1)\n- [Exploratory Data Analysis](#2)\n- [Data Visualizations](#3)\n- [Machine Learning Model Decision.](#4)\n- [Traing the ML Model](#5)\n- [Predict Model](#6)\n- [Deploy Model](#7)\n\n\n\n \n**Hope** you guys ****Love It**** and get a better **learning experience**.  \ud83d\ude4f","1faa57d2":"\n- We need to fill null values with `mean` and `median` using `missingno` package","6a82d939":"# Import Packages","3a914ded":"- Lets display the some few information from our large datasets\n\nHere, We shows the first five rows from datasets","a70191e6":"- Here's one little issue occurred, Suppose in your datasets there are lots of feature to defined like this above code. ","36921f3b":"> ### Another method is `info()`, This method show us the information about the dataset, Like\n\n1. What's the type of culumn have?\n- How many rows available in the dataset?\n- What are the features are there?\n- How many null values available in the dataset?\n- Ans so on...","df3cdb04":"First of all, we need to importing the necessary packages to work with the data to solve our problem","7d992872":"As we can see in the output.\n\n1. There are `614` entries\n- There are total 13 features (0 to 12)\n- There are three types of datatype `dtypes: float64(4), int64(1), object(8)`\n- It's Memory usage that is, `memory usage: 62.5+ KB`\n- Also, We can check how many missing values available in the `Non-Null Count` column","e919ed19":"<a id=\"1\"><\/a><br>\n# 1. Gathering Data","0724d836":"<a id=\"7\"><\/a><br>\n# 7. Deploy Model","5eeb91af":"\n- Finally, we are done so far. The last step is to deploy our model in production map. So we need to export our model and bind with web application API. \n\nUsing pickle we can export our model and store in to `logistic_model.pkl` file, so we can ealy access this file and calculate customize prediction using Web App API.\n\n\n#### A little bit information about pickle:\n\n`Pickle` is the standard way of serializing objects in Python. You can use the pickle operation to serialize your machine learning algorithms and save the serialized format to a file. Later you can load this file to deserialize your model and use it to make new predictions\n\n\n>>  Here is example of the Pickle export model\n\n\n\n```\nmodel.fit(X_train, Y_train)\n# save the model to disk\nfilename = 'finalized_model.sav'\npickle.dump(model, open(filename, 'wb'))\n\n# some time later...\n\n# load the model from disk\nloaded_model = pickle.load(open(filename, 'rb'))\nresult = loaded_model.score(X_test, Y_test)\nprint(result)\n```","38a67380":"First of all, we are use `LogisticRegression` from `sklearn.linear_model` package. Here is the little information about `LogisticRegression`.\n\n`Logistic Regression` is a **classification algorithm**. It is used to predict a binary outcome (`1 \/ 0`, `Yes \/ No`, and `True \/ False`) given a set of independent variables. To represent binary \/ categorical outcome, we use dummy variables. You can also think of logistic regression as a special case of linear regression when the outcome variable is categorical, where we are using log of odds as the dependent variable.\n\n![](https:\/\/www.analyticsvidhya.com\/wp-content\/uploads\/2015\/10\/logit.png)","d9ad40e2":" You can load this data with the `read_csv()` method from `pandas` package. It converts the data set to a python dataframe.","316fcecf":"#### As I said the above cell, this the information of all the methamatical details from dataset. Like `count`, `mean`, `standard deviation (std)`, `min`, `quartiles(25%, 50%, 75%)` and `max`.","1d73e357":"<a id=\"5\"><\/a><br>\n# 5. Traing the ML Model","0a3ca52e":"* Here, `Property_Area`, `Dependents` and `Education` has multiple values so now we can use `LabelEncoder` from `sklearn` package","1834e079":"> ### *After we collecting the data, Next step we need to understand what kind of data we have.*","b1a0920a":"Pandas has inbuild attribute to get all column from the dataset, With the help of this feature we can get the how many column available we have.","b46ee6e7":"* In this step, We have a lots of Machine Learning Model from sklearn package, and we need to decide which model is give us the better performance. then we use that model in final stage and send to the production level.","1f17ad0d":"> ### Here, we can see there are many rows and many columns, To know how many records and columns are available in our dataset, we can use the `shape` attribute or we can use `len()` to know how many records and how many features available in the dataset.","33886935":"\n<img align=\"center\" src=\"https:\/\/www.rdccbank.com\/uploads\/loan-sub-types-template\/housing-b.jpg\" alt=\"House Loan\" \/>\n\n---\n\n<div class=\"text-danger\" >\n    <h4>Let's Say, You are the owner of the <b>Housing Finance Company<\/b> and you want to build your own model to predict the customers are applying for the home loan and company want to check and validate the customer are eligible for the home loan.\n    <\/h4>\n<\/div>","1647165d":"--- \n---\n\n<div class=\"text-center\">\n    <h1>That's it Guys,<\/h1>\n    <h1>\ud83d\ude4f<\/h1>\n    \n        \n        I Hope you guys you like and enjoy it, and learn something interesting things from this notebook, \n        \n        Even I learn a lots of things while I'm creating this notebook\n    \n        Keep Learning,\n        Regards,\n        Vikas Ukani.\n    \n<\/div>\n\n---\n---\n\n<img src=\"https:\/\/static.wixstatic.com\/media\/3592ed_5453a1ea302b4c4588413007ac4fcb93~mv2.gif\" align=\"center\" alt=\"Thank You\" style=\"min-height:20%; max-height:20%\" width=\"90%\" \/>\n\n","f164aded":"- To read model from file\n\n```\n# load the model from disk\nloaded_model = pkl.load(open(filename, 'rb')) # rb means read as binary\nresult = loaded_model.score(X_test, Y_test)\n\n```","b4ff6ed1":"### Now, You can check your current directory. You can see the file with named \"logistic_model.pkl\"","18d06288":"\n# <div class=\"text-primary\"> The Problem is,  <\/div>\n\n### In a Simple Term, Company wants to make automate the Loan Eligibility Process in a real time scenario related to customer's detail provided while applying application for home loan forms.\n\n\nYou will use the training set to build your model, and the test set to validate it. Both the files are stored on the web as CSV files; their URLs are already available as character strings in the sample code.\n\n","cced199e":"In this heatmap, we can clearly seen the relation between two variables ","8e079420":"Also we can get the shape of the dataset using `shape` attribute","c320c349":"### Also we can get the column as an list(array) from dataset\n\n> **Note: DataFrame.columns returns the total columns of the dataset,\n> Store the number of columns in variable `loan_train_columns`**","aaa91d91":"> ### **Before fitting the model, We need to decide how many feature are available for testing and training, then after complete this step. fitt the model** \n\nCurrently, we are using `Credit_History', 'Education', 'Gender` features for training so let's create train and test variables","79646d75":"# Introduction","7d063a0f":"### Now, Understanding the Data","8b14ac1f":"> ### Finally, We have all the features with numerical values,","f333cf7e":"<a id=\"6\"><\/a><br>\n# 6. Predict Model"}}