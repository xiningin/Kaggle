{"cell_type":{"38bbee9a":"code","a664cc36":"code","e31bf66b":"code","f3853670":"code","e6907973":"code","7e197cd6":"code","64fc7cd1":"code","b017da20":"code","098a2b46":"code","c95df2b9":"code","a9a79ca7":"code","bae75d68":"code","ee203f26":"code","f1a8036c":"code","d94ba76e":"code","ba1c20ab":"code","7efb618e":"code","b3a4585f":"code","dce86b4b":"code","62fe5910":"code","67777fbd":"code","0b260fe4":"code","8921ae2e":"code","9b547519":"markdown","b596f611":"markdown","833b0418":"markdown","028344ee":"markdown","7c36d420":"markdown","7910ab66":"markdown","f164e90d":"markdown","66a7a1d1":"markdown","204d85af":"markdown","4a4624a7":"markdown","b20d3f17":"markdown","1a5d53d9":"markdown","181e12b1":"markdown","9444e199":"markdown","81936edb":"markdown","0d73bb6e":"markdown","00c3a470":"markdown","b6ce3a09":"markdown","c0bae493":"markdown"},"source":{"38bbee9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a664cc36":"import matplotlib.pyplot as plt\nimport cv2\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPool2D, Dropout\nfrom keras.optimizers import SGD, Adam\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping\nfrom keras.utils import to_categorical\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import confusion_matrix","e31bf66b":"data = pd.read_csv(\"\/kaggle\/input\/az-handwritten-alphabets-in-csv-format\/A_Z Handwritten Data.csv\")","f3853670":"data.head() #displaying head of the .csv file","e6907973":"X = data.drop('0',axis = 1) # axis=1 for dropping column\ny = data['0']","7e197cd6":"X.head() #Images","64fc7cd1":"y.head() #Labels","b017da20":"X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size = 0.2)","098a2b46":"X_train = np.reshape(X_train.values, (X_train.shape[0], 28,28))\nX_test = np.reshape(X_test.values, (X_test.shape[0], 28,28))","c95df2b9":"encode = {0:'A',1:'B',2:'C',3:'D',4:'E',5:'F',6:'G',7:'H',8:'I',9:'J',10:'K',11:'L',12:'M',13:'N',14:'O',15:'P',16:'Q',17:'R',18:'S',19:'T',20:'U',21:'V',22:'W',23:'X', 24:'Y',25:'Z'}","a9a79ca7":"y_int = np.int0(y) \ncount = np.zeros(26, dtype='int') #a vector of size 26 with all 0 values\nfor i in y_int:\n    count[i] +=1 #total count of each alphabet\n\nalphabets = []\nfor i in encode.values():\n    alphabets.append(i) #all alphabets\n\nfig, ax = plt.subplots(1,1, figsize=(10,10))\nax.barh(alphabets, count)\n\nplt.xlabel(\"Number of elements \")\nplt.ylabel(\"Alphabets\")\nplt.grid()\nplt.show()","bae75d68":"X_train = X_train.reshape(X_train.shape[0],X_train.shape[1],X_train.shape[2],1) #RGB =>Channel of 1\nprint(\"New shape of train data: \", X_train.shape)\n\nX_test = X_test.reshape(X_test.shape[0], X_test.shape[1], X_test.shape[2],1) #RGB =>Channel of 1\nprint(\"New shape of train data: \", X_test.shape)","ee203f26":"train_yOHE = to_categorical(Y_train, num_classes = 26, dtype='int')\nprint(\"New shape of train labels: \", train_yOHE.shape)\n\ntest_yOHE = to_categorical(Y_test, num_classes = 26, dtype='int')\nprint(\"New shape of test labels: \", test_yOHE.shape)","f1a8036c":"model = Sequential()\n#CNN\n# input -> conv -> maxpool -> conv -> maxpool ......->flattened vector-> \n#.                        hidden layer -> hidden layer -> softmax layer\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2, 2), strides=2))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu', padding = 'same'))\nmodel.add(MaxPool2D(pool_size=(2, 2), strides=2))\n\nmodel.add(Conv2D(filters=128, kernel_size=(3, 3), activation='relu', padding = 'valid'))\nmodel.add(MaxPool2D(pool_size=(2, 2), strides=2))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(64,activation =\"relu\"))\nmodel.add(Dense(128,activation =\"relu\"))\n\nmodel.add(Dense(26,activation =\"softmax\"))","d94ba76e":"model.summary()","ba1c20ab":"model.compile(optimizer = Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])","7efb618e":"history = model.fit(X_train, train_yOHE, epochs=1,  validation_data = (X_test,test_yOHE))","b3a4585f":"predictions = model.predict(\n      x=X_test\n    , batch_size=30\n    , verbose=0\n)","dce86b4b":"#Rounding-off the predictions to 0s and 1s\n\nrounded_predictions = np.argmax(predictions, axis=-1)","62fe5910":"def plot_confusion_matrix(cm, classes,\n                        normalize=False,\n                        title='Confusion matrix',\n                        cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    thresh = cm.max() \/ 2.\n    for i in range (cm.shape[0]):\n        for j in range (cm.shape[1]):\n            plt.text(j, i, cm[i, j],\n            horizontalalignment=\"center\",\n            color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","67777fbd":"cm = confusion_matrix(y_true=Y_test, y_pred=rounded_predictions)","0b260fe4":"#Labels for the CM\n\ncm_plot_labels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']","8921ae2e":"#Plotting the CM\n\nplot_confusion_matrix(cm=cm, classes=cm_plot_labels, title='Confusion Matrix')","9b547519":"# Making Predictions","b596f611":"# Reshaping the data into the format of Images","833b0418":"# Compiling the Model","028344ee":"# Plotting the Confusion Matrix","7c36d420":"![](https:\/\/www.ris-ai.com\/static\/images\/models\/handwritten-character-01.jpg)","7910ab66":"# Importing Required Libraries","f164e90d":"# Here,we will try to classify English Alphabets as shown above with the help of a powerful Convolutional Neural Network.","66a7a1d1":"**SO, ACCORDING TO THE CONFUSION MATRIX, OUR MODEL WORKED PRETTY WELL ON THE TEST DATASET THAT WE CREATED TO TEST IT.**","204d85af":"# Creating the CNN","4a4624a7":"# Creating Confusion Matrix","b20d3f17":"# Getting to know about the Number of Alphabets present in the Data","1a5d53d9":"# Making the data suitable for the CNN","181e12b1":"# Splitting the Data into Images and Labels","9444e199":"# Converting the Values to Categorical Variables","81936edb":"# Getting Summary of the Model Created","0d73bb6e":"# Reading the Data","00c3a470":"# Splitting the Data into Train and Test Sets","b6ce3a09":"# Starting the Training","c0bae493":"# Encoding English Alphabets to Number from 0-25"}}