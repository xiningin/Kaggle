{"cell_type":{"20367be1":"code","754225bb":"code","e670c9c5":"code","28f79ac6":"code","074f253d":"code","cb999bcc":"code","b842df0c":"code","87f37825":"code","a18b3670":"code","1fc0c482":"code","f926089d":"code","3517471a":"code","c31f3b7a":"code","399620b3":"code","6505867f":"code","c5685b92":"code","bc59919e":"code","d3df7c40":"code","27ab446d":"code","75490d70":"code","b3da7dde":"code","0f6f524f":"code","53aa3331":"code","3fc75b48":"code","ecea1eb8":"code","bded527b":"code","df81355b":"code","de92af34":"code","070f071f":"code","8a95b15f":"code","01dd7c1c":"code","75a31527":"code","d8156a2f":"code","6b5d97a2":"code","d329f49a":"code","dcd2db12":"code","bfb50b5a":"code","4ebd4212":"code","4ebce215":"code","7105e8fd":"code","7653d493":"code","0ab06ab8":"code","539b8c4c":"code","64ecd5a7":"code","d053dbfe":"code","bd1e1f4d":"code","d90bcf3a":"code","4cda0c79":"code","37ef40a0":"code","83c738da":"code","325a8ea7":"code","3818cd0f":"code","2cfe0207":"code","7994bdc4":"code","d67e6e2e":"code","4e1c3ef0":"code","a464973b":"code","e01af3db":"code","83c5fd78":"code","085bb778":"code","b109e8c2":"code","64770359":"code","9b99eb19":"code","5da42e82":"code","e0fef850":"code","dbdf4332":"code","60ed1448":"code","98ea8976":"code","16f0db76":"code","1a945da7":"code","a961f8c4":"code","97b4012c":"code","83be47bc":"code","297f6e2f":"code","437cc05f":"code","ca65594b":"code","f8569cc8":"markdown","f9821b18":"markdown","0c33bf0a":"markdown","42d4d9d8":"markdown","dd2ab9ea":"markdown","9efa975f":"markdown","990f118b":"markdown","473bea2f":"markdown","5b1dfd57":"markdown","060aedc0":"markdown","c3b4194f":"markdown","5f17bdd9":"markdown","ecf38f37":"markdown","ee9d0657":"markdown","4e646f48":"markdown","d3bb4a72":"markdown","2d5610e4":"markdown","0fbe92f0":"markdown","635316e7":"markdown","333f4f58":"markdown","d5426bb0":"markdown","7b55cc61":"markdown","d919b676":"markdown","212b6682":"markdown","d5bba589":"markdown","7849de62":"markdown","7156253b":"markdown","33955f2f":"markdown","2c988826":"markdown","05d79452":"markdown","b71b9cea":"markdown","0e3dd7bf":"markdown","c0a20f27":"markdown","ebe294d3":"markdown","9ce40aa3":"markdown","9e4bec61":"markdown","26ef7efe":"markdown","0f3003fe":"markdown","28a93b6a":"markdown","4a6b02bc":"markdown","d8e215f9":"markdown","05e3b8e5":"markdown","b26b7abc":"markdown"},"source":{"20367be1":"%%html\n<style>\n@import url('https:\/\/fonts.googleapis.com\/css?family=Ewert|Roboto&effect=3d|ice|');\nbody {background-color: gainsboro;} \na {color: #37c9e1; font-family: 'Roboto';} \nh1 {color: #37c9e1; font-family: 'Orbitron'; text-shadow: 4px 4px 4px #aaa;} \nh2, h3 {color: slategray; font-family: 'Orbitron'; text-shadow: 4px 4px 4px #aaa;}\nh4 {color: #818286; font-family: 'Roboto';}\nspan {font-family:'Roboto'; color:black; text-shadow: 5px 5px 5px #aaa;}  \ndiv.output_area pre{font-family:'Roboto'; font-size:110%; color:lightblue;}      \n<\/style>","754225bb":"import pandas as pd","e670c9c5":"movies = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv', sep=',')\nprint(type(movies))\nmovies.head(20)","28f79ac6":"tags = pd.read_csv('..\/input\/movielens-20m-dataset\/tag.csv', sep=',')\ntags.head()","074f253d":"ratings = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv', sep=',', parse_dates=['timestamp'])\nratings.head()","cb999bcc":"del ratings['timestamp']\ndel tags['timestamp']","b842df0c":"row_0 = tags.iloc[0]\ntype(row_0)","87f37825":"print(row_0)","a18b3670":"row_0.index","1fc0c482":"row_0['userId']","f926089d":"'rating' in row_0","3517471a":"row_0.name","c31f3b7a":"row_0 = row_0.rename('firstRow')\nrow_0.name","399620b3":"tags.head()","6505867f":"tags.index","c5685b92":"tags.columns","bc59919e":"tags.iloc[ [0,11,500] ]","d3df7c40":"ratings['rating'].describe()","27ab446d":"ratings.describe()","75490d70":"ratings['rating'].mean()","b3da7dde":"ratings.mean()","0f6f524f":"ratings['rating'].min()","53aa3331":"ratings['rating'].max()","3fc75b48":"ratings['rating'].std()","ecea1eb8":"ratings['rating'].mode()","bded527b":"ratings.corr()","df81355b":"filter1 = ratings['rating'] > 10\nprint(filter1)\nfilter1.any()","de92af34":"filter2 = ratings['rating'] > 0\nfilter2.all()","070f071f":"movies.shape","8a95b15f":"movies.isnull().any().any()","01dd7c1c":"ratings.shape","75a31527":"ratings.isnull().any().any()","d8156a2f":"tags.shape","6b5d97a2":"tags.isnull().any().any()","d329f49a":"tags=tags.dropna()","dcd2db12":"tags.isnull().any().any()","bfb50b5a":"tags.shape","4ebd4212":"%matplotlib inline\n\nratings.hist(column='rating', figsize=(10,5))","4ebce215":"ratings.boxplot(column='rating', figsize=(10,5))","7105e8fd":"tags['tag'].head()","7653d493":"movies[['title','genres']].head()","0ab06ab8":"ratings[-10:]","539b8c4c":"tag_counts = tags['tag'].value_counts()\ntag_counts[-10:]","64ecd5a7":"tag_counts[:10].plot(kind='bar', figsize=(10,5))","d053dbfe":"is_highly_rated = ratings['rating'] >= 5.0\nratings[is_highly_rated][30:50]","bd1e1f4d":"is_action= movies['genres'].str.contains('Action')\nmovies[is_action][5:15]","d90bcf3a":"movies[is_action].head(15)","4cda0c79":"ratings_count = ratings[['movieId','rating']].groupby('rating').count()\nratings_count","37ef40a0":"average_rating = ratings[['movieId','rating']].groupby('movieId').mean()\naverage_rating.head()","83c738da":"movie_count = ratings[['movieId','rating']].groupby('movieId').count()\nmovie_count.head()","325a8ea7":"movie_count = ratings[['movieId','rating']].groupby('movieId').count()\nmovie_count.tail()","3818cd0f":"tags.head()","2cfe0207":"movies.head()","7994bdc4":"t = movies.merge(tags, on='movieId', how='inner')\nt.head()","d67e6e2e":"avg_ratings= ratings.groupby('movieId', as_index=False).mean()\ndel avg_ratings['userId']\navg_ratings.head()","4e1c3ef0":"box_office = movies.merge(avg_ratings, on='movieId', how='inner')\nbox_office.tail()","a464973b":"is_highly_rated = box_office['rating'] >= 4.0\nbox_office[is_highly_rated][-5:]","e01af3db":"is_Adventure = box_office['genres'].str.contains('Adventure')\nbox_office[is_Adventure][:5]","83c5fd78":"box_office[is_Adventure & is_highly_rated][-5:]","085bb778":"movies.head()","b109e8c2":"movie_genres = movies['genres'].str.split('|', expand=True)","64770359":"movie_genres[:10]","9b99eb19":"movie_genres['isComedy'] = movies['genres'].str.contains('Comedy')","5da42e82":"movie_genres[:10]","e0fef850":"movies['year'] = movies['title'].str.extract('.*\\((.*)\\).*', expand=True)","dbdf4332":"movies.tail()","60ed1448":"tags = pd.read_csv('..\/input\/movielenslatest\/tags.csv', sep=',')","98ea8976":"tags.dtypes","16f0db76":"tags.head(5)","1a945da7":"tags['parsed_time'] = pd.to_datetime(tags['timestamp'], unit='s')","a961f8c4":"tags['parsed_time'].dtype","97b4012c":"tags.head(2)","83be47bc":"greater_than_t = tags['parsed_time'] > '2015-02-01'\n\nselected_rows = tags[greater_than_t]\n\ntags.shape, selected_rows.shape","297f6e2f":"tags.sort_values(by='parsed_time', ascending=True)[:10]","437cc05f":"average_rating = ratings[['movieId','rating']].groupby('movieId', as_index=False).mean()\naverage_rating.tail()","ca65594b":"joined = movies.merge(average_rating, on='movieId', how='inner')\njoined.head()\njoined.corr()","f8569cc8":"# &#128279; Code Library, Style, and Links ","f9821b18":"# &#128170; Motivation","0c33bf0a":"Selecting rows based on timestamps","42d4d9d8":"# &#127909; Intro Of This NoteBook:\n This notebook uses a dataset from the [MovieLens 20M Dataset](https:\/\/www.kaggle.com\/grouplens\/movielens-20m-dataset). We will describe the dataset further as we explore with it using pandas.\n","dd2ab9ea":"# &#128228; Slicing Out Columns","9efa975f":"# &#128202; Data Visualization","990f118b":"### &#128218; Combine aggreagation, merging, and filters to get useful analytics","473bea2f":"# &#128203; Introduction of MoveLens:\nThis is a report on the movieLens dataset available here. MovieLens itself is a research site run by GroupLens Research group at the University of Minnesota. The first automated recommender system was developed there in 1993.","5b1dfd57":"# &#128101; Group By and Aggregate","060aedc0":"# **\u201cLearning how to do data science is like learning to ski. You have to do it.\u201d**\n![Imgur](https:\/\/i.imgur.com\/2sUbqv7.jpg)","c3b4194f":"* For current analysis, we will remove timestamp","5f17bdd9":"* Thats nice ! No NULL values !","ecf38f37":"# &#9641; DataFrames","ee9d0657":"## &#128681; Add a new column for comedy genre flag ","4e646f48":"# &#127907; Filters for Selecting Rows","d3bb4a72":" # &#128204; Getting Started\n To get started, we will need to; Please note that you will need to download the dataset. \n \n Here are the links to the data source and location:\n \n* ** Data Source:** Kaggle Data Science Home (filename: movelens-20m-dataset.zip)\n* **Location:** https:\/\/www.kaggle.com\/grouplens\/movielens-20m-dataset","2d5610e4":"Sorting the table using the timestamps","0fbe92f0":"More here: http:\/\/pandas.pydata.org\/pandas-docs\/stable\/text.html#text-string-methods ","635316e7":"# &#128221; Dataset Description:\nThe dataset is available in several snapshots. The ones that were used in this analysis were Latest Datasets - both full and small (for web scraping). They were last updated in October 2016.\n\n","333f4f58":"Useful `LINKS`:\n\n&#128187; 1. [MovieLens 20M Dataset Research Paper](http:\/\/files.grouplens.org\/papers\/harper-tiis2015.pdf)\n\n&#128187; 2. [Pandas Documentation](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/)\n\n&#128187; 3. [Pandas Official Site](https:\/\/pandas.pydata.org)","d5426bb0":"* Data Type datetime64[ns] maps to either","7b55cc61":"# &#128214; Definitions of Pandas:\nPandas is a Python library for data analysis. It offers a number of data exploration, cleaning and transformation operations that are critical in working with data in Python.\n\nPandas build upon numpy and scipy providing easy-to-use data structures and data manipulation functions with integrated indexing.\n\n* The main data structures pandas provides are Series and DataFrames.","d919b676":"## &#128678; Series","212b6682":"# &#128295; Data Cleaning: Handling Missing Data","d5bba589":"# &#128200; &#128201; Descriptive Statistics \nLet's look how the ratings are distributed!","7849de62":"# &#128304; Merge Dataframes","7156253b":"* We have some tags which are NULL.","33955f2f":"![Imgur](https:\/\/i.imgur.com\/L9GESTT.jpg)","2c988826":"![Imgur](https:\/\/i.imgur.com\/sO3hkdl.png)","05d79452":"## &#128300; Split 'genres' into multiple columns ","b71b9cea":"## &#128223; Extract year from title e.g. (2007) ","0e3dd7bf":"# &#128199; Average Movie Ratings over Time","c0a20f27":"# &#128336; Parsing Timestamps","ebe294d3":"# &#128230; Data Structures:","9ce40aa3":"* More examples: http:\/\/pandas.pydata.org\/pandas-docs\/stable\/merging.html","9e4bec61":"* Thats nice ! No NULL values !","26ef7efe":"Unix time \/ POSIX time \/ epoch time records time in seconds \n\nsince midnight Coordinated Universal Time (UTC) of April 4, 2009","0f3003fe":"# &#128229; Import Libraries","28a93b6a":" * Timestamps are common in sensor data or other time series datasets. Let us revisit the tags.csv dataset and read the timestamps!","4a6b02bc":"* Thats nice ! No NULL values ! Notice the number of lines have reduced.","d8e215f9":"## Movie ratings related to the year of launch?","05e3b8e5":"# &#128197; Read the Dataset\nIn this notebook, we will be using three CSV files:\n\n* **ratings.csv :** userId,movieId,rating, timestamp\n\n* **tags.csv : **userId,movieId, tag, timestamp\n\n* **movies.csv : **movieId, title, genres ","b26b7abc":"# &#128221; Vectorized String Operations"}}