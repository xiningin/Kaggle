{"cell_type":{"5fe6b28a":"code","4cf330ca":"code","fa64b9f9":"code","81f76353":"code","788cebdc":"code","5b612210":"code","134423ce":"code","80629985":"markdown","c9fdebf5":"markdown","5d466598":"markdown","28c8ce00":"markdown","e69446fe":"markdown","3fbf68b6":"markdown"},"source":{"5fe6b28a":"# Author: Patrick_Ho\n# Stochastic_optimization_algo\n# Last modified: 20\/8\/2018\n\nimport random\nimport math\n\nrandom.seed(100000)","4cf330ca":"# function to update new temperature\ndef update_T(t):\n    t = t * 0.99\n    return round(t, 7)\n\n# generate a neighbor within a distance l from value u\ndef get_neighbor(u, d):\n    distance = d\n    lowerbound = u - distance\n    upperbound = u + distance\n    n = round(random.uniform(max(-1, lowerbound), min(upperbound, 1)), 6)\n\n    return n\n\n# calculate acceptance probability\ndef acceptance_p(old_sol, new_sol, t):\n    p = math.exp((new_sol - old_sol) \/ t)\n    return p","fa64b9f9":"# *** PART A ***\n# --------------\n# define function z\ndef function_z1(u):\n    outcome = u * math.sin(1 \/ (0.01 + u ** 2)) + (u ** 3) * math.sin(1 \/ (0.001 + u ** 4))\n    return round(outcome,6)\n\ndef simulated_annealing_a(u = round(random.uniform(-1, 1), 6)):\n    results = []\n\n    # ***Simulated annealing***\n    # u = random.uniform(-1, 1)  # generate random u in the range from -1 to 1\n    z = function_z1(u)  # calculate the result of function z for u\n    t = 1  # initial temperature\n    print(\"u: \" + str(u) + \"\\t\\tz: \" + str(z) + \"\\t\\ttemperature: \" + str(t))\n\n    # the temperature cools down until 0\n    while t > 0.0001:\n        i = 0\n\n        # create a cycle of 100 times\n        while i <= 100:\n            u_neighbor = get_neighbor(u, 0.05)  # get a neighbor of u\n            new_z = function_z1(u_neighbor)  # new solution of function z\n\n            ap = acceptance_p(z, new_z, t)  # calculate acceptance probability\n\n            # if the new solution is better, so move to that solution\n            if new_z > z:\n                u = u_neighbor\n                z = new_z\n\n            # if acceptance probability is high, then the search is more likely to move to a worse solution\n            if ap > random.random():\n                u = u_neighbor\n                z = new_z\n\n            i += 1\n\n        print(\"u: \" + str(u) + \"\\t\\tz: \" + str(z) + \"\\t\\ttemperature: \" + str(t))\n        results.append({\"u\": u, \"z\": z, \"temperature\": t})\n        t = update_T(t)  # update temperature\n\n    # finding maximum z with corresponding u and temperature\n    best_z = max([x[\"z\"] for x in results])\n    for item in results:\n        if item[\"z\"] == best_z:\n            best_u = item[\"u\"]\n            temp = item[\"temperature\"]\n\n    print(\"Maximum value of z: \" + str(best_z))\n    print(\"Correspoding value of u is: \" + str(best_u))\n    print(\"At temperature: \" + str(temp))\n    \n# *** PART B ***\n# --------------\n\n# define function z = f(u,v)\ndef function_z2(u,v):\n    outcome = u*(v**2)*math.sin(v\/(0.01 + u**2)) + (u**3)*(v**2)*math.sin(v**3\/(0.001 + u**4))\n    return round(outcome,6)\n\ndef simulated_annealing_b(u = round(random.uniform(-1, 1),6), v = round(random.uniform(-1, 1),6)):\n    results_b = []\n\n    # ***Simulated annealing***\n    z = function_z2(u, v)  # calculate the result of function z for u\n    t = 1  # initial temperature\n    print(\"u: \" + str(u) + \"\\t\\tv: \" + str(v) + \"\\t\\tz: \" + str(z) + \"\\t\\ttemperature: \" + str(t))\n\n    # the temperature cools down until 0\n    while t > 0.0001:\n        t = update_T(t)  # update temperature\n        i = 0\n\n        # create a cycle of 100 times\n        while i <= 1000:\n            u_neighbor = get_neighbor(u, 0.5)  # get a neighbor of u within distance of 0.05\n            v_neighbor = get_neighbor(v, 0.5)  # get a neighbor of v within distance of 0.05\n            new_z = function_z2(u_neighbor, v_neighbor)  # new solution of function z\n\n            ap = acceptance_p(z, new_z, t)  # calculate acceptance probability\n\n            # if the new solution is better, so move to that solution\n            if new_z > z:\n                u = u_neighbor\n                v = v_neighbor\n                z = new_z\n\n            # if acceptance probability is high, then the search is more likely to move to a worse solution\n            if ap > random.random():\n                u = u_neighbor\n                v = v_neighbor\n                z = new_z\n\n            i += 1\n\n        print(\"u: \" + str(u) + \"\\t\\tv: \" + str(v) + \"\\t\\tz: \" + str(z) + \"\\t\\ttemperature: \" + str(t))\n        results_b.append({\"u, v\": [u, v], \"z\": z, \"temperature\": t})\n\n    # finding maximum z with corresponding u, v and temperature\n    best_z = max([x[\"z\"] for x in results_b])\n    for item in results_b:\n        if item[\"z\"] == best_z:\n            best_u_v = item[\"u, v\"]\n            temp_b = item[\"temperature\"]\n\n    print(\"Maximum value of z: \" + str(best_z))\n    print(\"Correspoding value of (u, v) is: \" + str(best_u_v))\n    print(\"At temperature: \" + str(temp_b))\n\n# *** PART C ***\n# --------------\n# define function z = f(u,v,w)\ndef function_z3(u,v,w):\n    outcome = (u*(v**2) + math.sin(math.pi*w))*math.sin(v\/(0.01 + u**2))*math.sin((math.pi*w)\/2) + \\\n              (u**3)*(v**2) * w * math.sin(v**3\/(0.001*(math.sin((math.pi*w)\/2)**2) + u**4 + (w-1)**2))\n    return round(outcome,6)\n\ndef simulated_annealing_c(u = round(random.uniform(-1,1),6), v = round(random.uniform(-1,1),6), w = round(random.uniform(-1,1),6)):\n    results_c = []\n\n    # simulated annealing\n    z = function_z3(u=u, v=v, w=w)  # calculate the result of function z for u, v and w\n    t = 1  # initial temperature\n\n    print(\"u: \" + str(u) + \"\\t\\tv: \" + str(v) + \"\\t\\tw: \" + str(w) + \"\\t\\tz: \" + str(z) + \"\\t\\ttemperature: \" + str(t))\n\n    # the temperature cools down until 0\n    while t > 0.0001:\n        t = update_T(t)  # update temperature\n        i = 0\n        # create a cycle of 1000 times\n        while i <= 1000:\n            u_neighbor = get_neighbor(u, 0.5)  # get a neighbor of u\n            v_neighbor = get_neighbor(v, 0.5)  # get a neighbor of v\n            w_neighbor = get_neighbor(w, 0.5)  # get a neighbor of w\n\n            new_z = function_z3(u_neighbor, v_neighbor, w_neighbor)  # new solution of function z\n\n            ap = acceptance_p(z, new_z, t)  # calculate acceptance probability\n\n            # if the new solution is better, so move to that solution\n            if new_z > z:\n                u = u_neighbor\n                v = v_neighbor\n                w = w_neighbor\n                z = new_z\n\n            # if acceptance probability is high, then the search is more likely to move to a worse solution\n            if ap > random.random():\n                u = u_neighbor\n                v = v_neighbor\n                w = w_neighbor\n                z = new_z\n\n            i += 1\n\n        print(\"u: \" + str(u) + \"\\t\\tv: \" + str(v) + \"\\t\\tw: \" + str(w) + \"\\t\\tz: \" + str(z) + \"\\t\\ttemperature: \" + str(t))\n        results_c.append({\"u, v, w\": [u, v, w], \"z\": z, \"temperature\": t})\n\n    # finding maximum z with corresponding u, v, w and temperature\n    best_z = max([x[\"z\"] for x in results_c])\n    for item in results_c:\n        if item[\"z\"] == best_z:\n            best_u_v_w = item[\"u, v, w\"]\n            temp_c = item[\"temperature\"]\n\n    print(\"Maximum value of z: \" + str(best_z))\n    print(\"Correspoding value of (u, v, w) is: \" + str(best_u_v_w))\n    print(\"At temperature: \" + str(temp_c))\n\n# *** PART D ***\n# --------------\n# define function z = f(u,v,w,y)\ndef function_z4(u, v, w, y):\n    outcome = function_z3(u,v,w)*y\n    return round(outcome,6)\n\ndef simulated_annealing_d(u = round(random.uniform(-1,1),6), v = round(random.uniform(-1,1),6), w = round(random.uniform(-1,1),6), y = -1):\n    results_d = []\n    z = function_z4(u, v, w, y)  # calculate the result of function z for u, v, w and y\n    t = 1  # initial temperature\n\n    # for each value of y, find the best value of [u,v,w] which generates the largest value of z\n    # then select the largest values of z from these regions -1, 0 and 1\n    for y in [-1,0,1]:\n        # the temperature cools down until 0\n        best_z = z\n        best_u = u\n        best_v = v\n        best_w = w\n\n        new_t = t\n\n        print(\"u: \" + str(u) + \"\\t\\tv: \" + str(v) + \"\\t\\tw: \" + str(w) + \"\\t\\ty: \" + str(y) +\n              \"\\t\\tz: \" + str(z) + \"\\t\\ttemperature: \" + str(t))\n\n        while new_t > 0.001:\n            new_t = update_T(new_t)  # update temperature\n            i = 0\n\n            while i <= 1000:\n                u_neighbor = get_neighbor(best_u, 0.25)  # get a neighbor of u\n                v_neighbor = get_neighbor(best_v, 0.25)  # get a neighbor of v\n                w_neighbor = get_neighbor(best_w, 0.25)  # get a neighbor of w\n\n                new_z = function_z4(u_neighbor, v_neighbor, w_neighbor, y)  # new solution of function z\n\n                ap = acceptance_p(best_z, new_z, new_t)  # calculate acceptance probability\n\n                if new_z > best_z:\n                    best_u = u_neighbor\n                    best_v = v_neighbor\n                    best_w = w_neighbor\n                    best_z = new_z\n\n                if ap > random.random():\n                    best_u = u_neighbor\n                    best_v = v_neighbor\n                    best_w = w_neighbor\n                    best_z = new_z\n\n                i += 1\n\n            print(\"u: \" + str(best_u) + \"\\t\\tv: \" + str(best_v) + \"\\t\\tw: \" + str(best_w) + \"\\t\\ty: \" + str(y) +\n                  \"\\t\\tz: \" + str(best_z) + \"\\t\\ttemperature: \" + str(new_t))\n            results_d.append({\"u, v, w, y\": [best_u, best_v, best_w, y], \"z\": best_z, \"temperature\": new_t})\n\n    # finding maximum z with corresponding u, v, w and temperature\n    max_z = max([x[\"z\"] for x in results_d])\n    for item in results_d:\n        if item[\"z\"] == max_z:\n            best_value = item[\"u, v, w, y\"]\n            temp = item[\"temperature\"]\n\n    print(\"Maximum value of z: \" + str(max_z))\n    print(\"Correspoding value of (u, v, w, y) is: \" + str(best_value))\n    print(\"At temperature: \" + str(temp))","81f76353":"u = input(\"Please give an input for u (default is a random value): \")\nif u == \"\":\n        u = round(random.uniform(-1, 1),6)\nsimulated_annealing_a(float(u))","788cebdc":"u = input(\"Please give an input for u (default is a random value): \")\nif u == \"\":\n    u = round(random.uniform(-1, 1),6)\n\nv = input(\"Please give an input for v (default is a random value): \")\nif v == \"\":\n    v = round(random.uniform(-1, 1),6)\n        \nsimulated_annealing_b(float(u), float(v))","5b612210":"u = input(\"Please give an input for u (default is a random value): \")\nif u == \"\":\n    u = round(random.uniform(-1, 1),6)\n\nv = input(\"Please give an input for v (default is a random value): \")\nif v == \"\":\n    v = round(random.uniform(-1, 1),6)\n\nw = input(\"Please give an input for w (default is a random value): \")\nif w == \"\":\n    w = round(random.uniform(-1, 1),6)\n        \nsimulated_annealing_c(float(u), float(v), float(w))","134423ce":"u = input(\"Please give an input for u (default is a random value): \")\nif u == \"\":\n    u = round(random.uniform(-1, 1),6)\n\nv = input(\"Please give an input for v (default is a random value): \")\nif v == \"\":\n    v = round(random.uniform(-1, 1),6)\n\nw = input(\"Please give an input for w (default is a random value): \")\nif w == \"\":\n    w = round(random.uniform(-1, 1),6)\n\ny = input(\"Please give an input for y (default is a random value): \")\nif y == \"\":\n    y = random.randint(-1, 1)\n\nsimulated_annealing_d(float(u), float(v), float(w), float(y))","80629985":"Here's the main program to execute the code. However, since Kaggle does not support interactive data input, so you may want to copy the code to your local machine to see how it works.\n\nOutput of the part below will show an error for that.","c9fdebf5":"An example of running the code above with random input values gives the following results:\n- Maximum value of z: 1.67701\n- Correspoding value of u is: 0.999995\n- At temperature: 0.0023812","5d466598":"With 4 random input values:\n* Maximum value of z: 1.94466\n* Correspoding value of (u, v, w, y) is: [0.936974, 0.999663, 0.748349, 1]\n* At temperature: 0.0026329","28c8ce00":"With 3 random input values:\n* Maximum value of z: 1.942833\n* Correspoding value of (u, v, w) is: [0.943072, 0.999234, 0.748555]\n* At temperature: 9.95e-05","e69446fe":"Another example of running the code with random input values:\n* Maximum value of z: 1.676074\n* Correspoding value of (u, v) is: [0.997139, 0.999903]\n* At temperature: 9.95e-05","3fbf68b6":"The link below includes the description of this Kernel and my explanation about Simulated Annealing\nhttps:\/\/phatho93.wixsite.com\/diveindatascience\/single-post\/2018\/08\/20\/Stochastic-Optimization-Algorithm-Simulated-Annealing"}}