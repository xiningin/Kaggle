{"cell_type":{"ad7b37f5":"code","17717c5b":"code","84bb0175":"code","ae54539c":"code","4e6f89e1":"code","9f91c675":"code","f697bbc0":"code","d7e550c3":"code","e5a6d78a":"code","54c5e4c7":"code","6be4799f":"code","341b30e9":"code","1fc6659a":"markdown","a66ea974":"markdown","b1ccd156":"markdown","876129ca":"markdown","3158ae0a":"markdown","6db88cd9":"markdown","c7b504fc":"markdown","ed919287":"markdown","9c77aad0":"markdown"},"source":{"ad7b37f5":"import time\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport statsmodels.api as sm\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import adfuller\n\npd.options.display.max_columns = 99\nplt.rcParams['figure.figsize'] = (12, 8)","17717c5b":"df_train = pd.read_csv('..\/input\/train.csv', parse_dates=['date'], index_col=['date'])\ndf_test = pd.read_csv('..\/input\/test.csv', parse_dates=['date'], index_col=['date'])\ndf_train.shape, df_test.shape","84bb0175":"df_train.head()","ae54539c":"num_stores = len(df_train['store'].unique())\nfig, axes = plt.subplots(num_stores, figsize=(8, 16))\n\nfor s in df_train['store'].unique():\n    t = df_train.loc[df_train['store'] == s, 'sales'].resample('W').sum()\n    ax = t.plot(ax=axes[s-1])\n    ax.grid()\n    ax.set_xlabel('')\n    ax.set_ylabel('sales')\nfig.tight_layout();","4e6f89e1":"months = df_train.index.month\ndummy_months = pd.get_dummies(months)\ndummy_months.columns = ['month-%s' % m for m in dummy_months.columns]\ndummy_months.index = df_train.index\n\ndf_train['prev_quarter'] = df_train['sales'].shift(91)\ndf_train['prev_year'] = df_train['sales'].shift(364)\ndf_train = pd.concat([df_train, dummy_months], axis=1)\ndf_train.dropna(inplace=True)\ndf_train.head()","9f91c675":"import datetime\n\ndf_test_ex = df_test.copy()\nmonths = df_test_ex.index.month\ndummy_months = pd.get_dummies(months)\ndummy_months.columns = ['month-%s' % m for m in dummy_months.columns]\ndummy_months.index = df_test_ex.index\n\nprev_quarter_dates = df_test_ex.index - datetime.timedelta(days=91)\nprev_year_dates = df_test_ex.index - datetime.timedelta(days=364)\ndf_test_ex['prev_quarter'] = df_train.loc[df_train.index.isin(prev_quarter_dates), 'sales'].values\ndf_test_ex['prev_year'] = df_train.loc[df_train.index.isin(prev_year_dates), 'sales'].values\ndf_test_ex = pd.concat([df_test_ex, dummy_months], axis=1)\nfor m in range(4, 13):\n    df_test_ex['month-%s' % m] = 0\ndf_test_ex.head()","f697bbc0":"%%time\ns1i1 = df_train.loc[(df_train['store'] == 1) & (df_train['item'] == 1), 'sales']\nexog_s1i1 = df_train.loc[(df_train['store'] == 1) & (df_train['item'] == 1)].drop(['store', 'item', 'sales'], axis=1)\n\n\narimax = sm.tsa.statespace.SARIMAX(s1i1.loc['2013-12-31':], exog=exog_s1i1,\n                                   enforce_invertibility=False, enforce_stationarity=False, freq='D',\n                                   order=(7,0,0)).fit()\nprint(arimax.summary())","d7e550c3":"arimax_results = df_test.reset_index()\narimax_results['sales'] = 0","e5a6d78a":"tic = time.time()\n\nfor s in arimax_results['store'].unique():\n    for i in arimax_results['item'].unique():\n        endog = df_train.loc[(df_train['store'] == s) & (df_train['item'] == i), 'sales']\n        exog = df_train.loc[(df_train['store'] == s) & (df_train['item'] == i)].drop(['store', 'item', 'sales'], axis=1)\n        arimax = sm.tsa.statespace.SARIMAX(endog=endog, exog=exog,\n                                           enforce_invertibility=False, enforce_stationarity=False, freq='D',\n                                           order=(7,0,0)).fit()\n        exog_test = df_test_ex.loc[(df_test_ex['store'] == s) & (df_test_ex['item'] == i)].drop(['id', 'store', 'item'], axis=1)\n        fcst = arimax.predict(start='2017-12-31', end='2018-03-31', dynamic=True, exog=exog_test)\n        arimax_results.loc[(arimax_results['store'] == s) & (arimax_results['item'] == i), 'sales'] = fcst.values[1:]\n        \n        toc = time.time()\n        if i % 10 == 0:\n            print(\"Completed store {} item {}. Cumulative time: {:.1f}m\".format(s, i, (toc-tic)\/60))","54c5e4c7":"arimax_results.drop(['date', 'store', 'item'], axis=1, inplace=True)\narimax_results.head()","6be4799f":"arimax_results.to_csv('arimax_results.csv', index=False)","341b30e9":"exog = df_train.loc[(df_train['store'] == 10) & (df_train['item'] == 50)].drop(['store', 'item', 'sales'], axis=1)\nforecast = arimax.predict(start='2017-10-01', end='2017-12-31', dynamic=True, exog=exog)\nactual = df_train.loc[(df_train['store'] == 10) & (df_train['item'] == 50), 'sales']\n\nforecast.plot()\nactual.loc['2017-10-01':].plot()\nplt.legend(['ARIMAX', 'Actual'])\nplt.ylabel('Sales');","1fc6659a":"### Example forecast","a66ea974":"### Prepare data","b1ccd156":"## Make Predictions","876129ca":"## Load Data","3158ae0a":"## ARIMAX\n\nAutoregressive Integrated Moving Average with Explanatory Variable (ARIMAX) is an extended version of ARIMA that includes independent predictor variables.","6db88cd9":"# Store Item Demand Forecasting Challenge","c7b504fc":"### Build model","ed919287":"All stores appear to show identical trends and seasonality; they just differ in scale.","9c77aad0":"## Autoregressive Integrated Moving Average (ARIMA)\n\n<a href=\"https:\/\/www.kaggle.com\/c\/demand-forecasting-kernels-only\">Link to competition on Kaggle.<\/a>\n\nThe <a href=\"https:\/\/en.wikipedia.org\/wiki\/Autoregressive_integrated_moving_average\">ARIMA<\/a> model is a generalisation of an ARMA model that can be applied to non-stationary time series."}}