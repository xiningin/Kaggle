{"cell_type":{"a7cfbc1c":"code","8c6fb8c6":"code","bc5779b6":"code","5112ea8e":"code","8eacd4d2":"code","5d4d928c":"code","02284a17":"markdown","4e2f2442":"markdown","2049d423":"markdown","140a9f32":"markdown","27e77d25":"markdown"},"source":{"a7cfbc1c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","8c6fb8c6":"class SimpleLinearRegression:\n    coef = 0\n    intercept = 0\n    rsquared = 0\n    def fit(self, x_train, y_train):\n        sum_of_x = sum(x_train)\n        sum_of_y = sum(y_train)\n        sum_of_x2 = np.sum(np.square(x_train))\n        sum_of_y2 = np.sum(np.square(y_train))\n        dotproduct = np.dot(x_train,y_train)\n        length = len(x_train)\n        dif_x = sum_of_x2 - sum_of_x * sum_of_x\/length\n        dif_y = sum_of_y2 - sum_of_y * sum_of_y\/length\n        numerator = length * dotproduct - sum_of_x * sum_of_y\n        denom = (length * sum_of_x2 - sum_of_x * sum_of_x) * (length * sum_of_y2 - (sum_of_y * sum_of_y))\n        co = dotproduct - sum_of_x * sum_of_y \/ length\n        self.rsquared = np.square(numerator \/ np.sqrt(denom))\n        self.intercept = sum_of_y \/ length - ((co \/ dif_x) * sum_of_x\/length)\n        self.coef = co \/ dif_x\n    def predict(self,x_test):\n        return x_test * self.coef + self.intercept\n        ","bc5779b6":"x_train = np.array([ 1, 2, 3, 4])\ny_train = np.array([ 2, 3, 4, 4])","5112ea8e":"slr = SimpleLinearRegression()\nslr.fit(x_train,y_train)","8eacd4d2":"print(\"Coefficient:\", slr.coef)\nprint('Y-Intercept:',slr.intercept)\nprint('R-Squared:',slr.rsquared)","5d4d928c":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(x_train.reshape(-1,1), y_train.reshape(-1,1))\nprint(lr.coef_)\nprint(lr.intercept_)","02284a17":"**Conclusion**\n\nBoth algorithms gives same coef and intercept result.\n\nOur algorithm seems work","4e2f2442":"**Using sklearn Linear Regression**\n- Using standart sklearn Linear Regression\n- Print results","2049d423":"**Using our Simple Linear Regression**\n- A basic x_train and y_train initialized.\n- Call our fit method\n- See results","140a9f32":"**Simple Linear Regression Class Definition**\n\nSimple Linear Regression is basicly can be formulised as;\ny = ax + b\n\nIn our Simple Linear Regression class, we have there class variables;\n1. coef : this is the coefficient of x,   a  variable in above formula\n1. intercept: this is the y intercept, b variable in above formula\n1. rsquared: this is the calculation of rsquare result ( known as statistical measure of how close the data are to the fitted regression line )\n\nAnd we have two methods\n1. fit: Data will be trained with fit method to produce above class variables\n2. predict: To test new datas.","27e77d25":"# Simple Linear Regression Implementation\n**Purpose**\n- The purpose of this notebook is to implement Simple Linear Regression with python code and to compare results with sklearn's Linear Regression algorithm.\n\n**Roadmap**\n\n- Simple Linear Regression Class Definition\n- Using our Simple Linear Regression\n- Using sklearn Linear Regression\n- Conclusion"}}