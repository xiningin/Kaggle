{"cell_type":{"cc1e7a39":"code","eaa540b2":"code","ae07f911":"code","04f58690":"code","86429fd9":"code","1fb49d02":"markdown","25664862":"markdown","2c8e30e2":"markdown","2c6658ce":"markdown","57bd8070":"markdown","e8341c98":"markdown"},"source":{"cc1e7a39":"import pandas as pd\ntrain_csv_path = '..\/input\/siim-isic-melanoma-classification\/train.csv'\njpeg_dir = '..\/input\/siim-isic-melanoma-classification\/jpeg\/train'\ntrain_df = pd.read_csv(train_csv_path)\ntrain_df.head()","eaa540b2":"from PIL import Image\nimport matplotlib.pyplot as plt\n\nrow = train_df.iloc[5]\nprint(row)\nimg = Image.open(f\"{jpeg_dir}\/{row[0]}.jpg\")\nplt.imshow(img); plt.show()","ae07f911":"# Models and transformations\nimport torchvision.transforms as T\nfrom torchvision import models\nimport torch\nimport torch.nn as nn\n\ntrf = T.Compose([T.Resize(512),\n                 T.CenterCrop(512),\n                 T.ToTensor(), \n                 T.Normalize(mean = [0.485, 0.456, 0.406], \n                             std = [0.229, 0.224, 0.225])])\n\nclass NullNet(nn.Module): \n    def __init__(self):\n        super(NullNet, self).__init__()\n    def forward(self, x):\n        return x\n    \n\ninp = trf(img).unsqueeze(0)    \nmodel_ft = models.resnet18(pretrained=True)\nmodel_ft.fc = NullNet()\n\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nmodel_ft = model_ft.to(device)","04f58690":"# Pass the input through the net\ninp = inp.to(device)\nout = model_ft(inp)\n\nprint (\"Input Shape:\",inp.shape)\nprint (\"Feature Shape:\",out.shape)\nprint (\"Length of Train Data:\", len(train_df))","86429fd9":"import csv\nimport time\nimport numpy as np\n\nsince = time.time()\niter1=0\nfile = open('train_features.csv', 'a+', newline ='')\n# writing the data into the file \nwith file:     \n    write = csv.writer(file) \n    \n    for row in train_df.iloc:\n        img = Image.open(f\"{jpeg_dir}\/{row[0]}.jpg\")\n        inp = trf(img).unsqueeze(0)\n        inp = inp.to(device)\n        out = model_ft(inp)\n\n        output_format = np.concatenate((  row ,(out[0,:].cpu().detach().numpy() )),axis=0)\n        write.writerows([output_format]) \n\n        iter1 = iter1 + 1\n\n        if iter1 % 2000 == 1999:\n            time_elapsed = time.time() - since\n            print('Time from start {:.0f}m {:.0f}s'.format(\n            time_elapsed \/\/ 60, time_elapsed % 60))\n            print('Percentage complete: {:4f}'.format(100*iter1\/(len(train_df))))\n            #break # delete this break to save features from the entire dataset","1fb49d02":"2. Reading Image","25664862":"4. Apply NN to single Image and observe","2c8e30e2":"5. Saving Features to a CSV file","2c6658ce":"3. Load NN and declare transformations","57bd8070":"# Steps\n\n1. reading CSV file\n","e8341c98":"This code in written with the help of PyTorch Image Segmentation Demo:\n\nhttps:\/\/learnopencv.com\/pytorch-for-beginners-semantic-segmentation-using-torchvision\/"}}