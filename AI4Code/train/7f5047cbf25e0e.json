{"cell_type":{"2b7a0eee":"code","d3157901":"code","b44078c9":"code","452a6541":"code","472ffeb4":"code","7b1b6b68":"code","8a70c3fe":"code","d93e6632":"code","0dea5c5a":"code","cd47ddbc":"code","51c8cc2b":"code","6391e514":"code","98b72ede":"code","deb1d277":"code","159f27be":"code","e5e588e8":"code","0a63f66b":"code","851af3e8":"code","e5f7c77d":"code","70039c14":"code","0491e321":"code","26f81d03":"code","adc490bb":"code","ed0a1b90":"code","d4c47c74":"markdown","0c140cbe":"markdown","8ddcb1dd":"markdown","fbd16755":"markdown","2bf361cd":"markdown","f573c426":"markdown","65cdac28":"markdown","058608f2":"markdown","81c92c06":"markdown","b06433d2":"markdown"},"source":{"2b7a0eee":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n# NLTK modules\nimport nltk\nnltk.download('punkt')\nnltk.download('stopwords')\nnltk.download('wordnet')\nfrom nltk.stem import PorterStemmer, WordNetLemmatizer\n\nimport re\n\nfrom gensim.models import Word2Vec # Word2Vec module\nfrom gensim.parsing.preprocessing import preprocess_string, strip_tags, strip_punctuation, remove_stopwords, strip_numeric, stem_text\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, RobustScaler\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score\nfrom imblearn.over_sampling import RandomOverSampler\n\nfrom lightgbm import LGBMClassifier\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d3157901":"train_data = pd.read_csv('\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/test.csv')\nsubmission_data = pd.read_csv('\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/sample_submission_UVKGLZE.csv')","b44078c9":"print(train_data.isnull().sum())\nprint(train_data.columns)","452a6541":"# Converting binary column to category\nto_convert = ['Computer Science', 'Physics', 'Mathematics','Statistics', 'Quantitative Biology', 'Quantitative Finance']\n\n# Make a copy of train data\ntopic_data = train_data.copy()","472ffeb4":"# Changing the binary fields to categorical fields\ntopic_data = topic_data[topic_data[to_convert]==1].stack().reset_index().drop(0,1)\n\ntopic_data['ID'] = topic_data['level_0'].apply(lambda x: x+1)\ntopic_data = topic_data.drop('level_0', axis=1)\n\n# Merge the data based on ID\nmerge_data = train_data.merge(topic_data, how='left', on='ID' )\n# Drop all the binary fields\nmerge_data = merge_data.drop(to_convert, axis=1)\n","7b1b6b68":"# Rename the column to Category\nmerge_data = merge_data.rename({'level_1':'CATEGORY'}, axis=1)\nmerge_data","8a70c3fe":"articles = merge_data\n\n# list unique classes\nprint(np.unique(articles.CATEGORY))","d93e6632":"# Plot category data\nplt.figure(figsize=(10,6))\nsns.countplot(articles.CATEGORY)\nplt.show()","0dea5c5a":"# Stemmer object\nporter = PorterStemmer()\nwnl = WordNetLemmatizer()\n\nclass DataPreprocess:\n    \n    def __init__(self):\n        self.filters = [strip_tags,\n                       strip_numeric,\n                       strip_punctuation,\n                       lambda x: x.lower(),\n                       lambda x: re.sub(r'\\s+\\w{1}\\s+', '', x),\n                       remove_stopwords]\n    def __call__(self, doc):\n        clean_words = self.__apply_filter(doc)\n        return clean_words\n    \n    def __apply_filter(self, doc):\n        try:\n            cleanse_words = set(preprocess_string(doc, self.filters))\n#             filtered_words = set(wnl.lemmatize(w) if w.endswith('e') or w.endswith('y') else porter.stem(w) for w in cleanse_words)\n            return ' '.join(cleanse_words)\n        except TypeError as te:\n            raise(TypeError(\"Not a valid data {}\".format(te)))","cd47ddbc":"# Combine the Title and Abstract data\narticles['TEXT'] = articles['TITLE'].map(str) + articles['ABSTRACT'].map(str)\n\narticles['Processed'] = articles['TEXT'].apply(DataPreprocess())\n","51c8cc2b":"articles['Processed'].values","6391e514":"X = np.reshape(articles['Processed'].values, (-1,1))\ny = np.reshape(articles['CATEGORY'].values, (-1,1))\n\nros = RandomOverSampler(sampling_strategy='minority', random_state=27)\n\nX_res, y_res = ros.fit_resample(X, y)\n\nprint(X_res.shape, y_res.shape)","98b72ede":"def vectorize(vector, X_train, X_test):\n    vector_fit = vector.fit(X_train)\n    \n    X_train_vec = vector_fit.transform(X_train)\n    X_test_vec = vector_fit.transform(X_test)\n    \n    print(\"Vectorization is completed.\")\n    return X_train_vec, X_test_vec\n\ndef label_encoding(y_train):\n    \"\"\"\n        Encode the given list of class labels\n        :y_train_enc: returns list of encoded classes\n        :labels: actual class labels\n    \"\"\"\n    lbl_enc = LabelEncoder()\n    \n    y_train_enc = lbl_enc.fit_transform(y_train)\n    labels = lbl_enc.classes_\n    \n    return y_train_enc, labels\n\n\n# Encode the class labels","deb1d277":"X = X_res\ny = y_res\n\ny_enc_train, labels = label_encoding(y)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y_enc_train, test_size=0.3, shuffle=True)","159f27be":"print(X_train.shape, X_valid.shape)","e5e588e8":"tfidf_vector = TfidfVectorizer(min_df=3, analyzer='word', \n                               strip_accents='unicode', \n                               token_pattern=r'\\w{1}',\n                               ngram_range=(1,3), \n                               max_features=3000,\n                               use_idf=1, \n                               smooth_idf=1,\n                                sublinear_tf=1,\n                              stop_words='english')\n# TFIDFVectorizer \nX_train_vec, X_valid_vec = vectorize(tfidf_vector, X_train.flatten(), X_valid.flatten())","0a63f66b":"lgbm_params = {\n    'n_estimators': 500,\n    'num_leaves': 60,\n     'min_data_in_leaf': 60, \n     'objective':'multiclass',\n     'max_depth': 6,\n     'learning_rate': 0.2,\n     \"boosting\": \"gbdt\",\n     \"feature_fraction\": 0.8,\n     \"bagging_freq\": 1,\n     \"bagging_fraction\": 0.8 ,\n     \"bagging_seed\": 11,\n     \"eval_metric\": 'logloss',\n     \"lambda_l1\": 0.5,\n     \"random_state\": 42,\n    'verbose':1\n    \n}\n\nlgbm_clf = LGBMClassifier(**lgbm_params)\nlgbm_clf.fit(X_train_vec, y_train)","851af3e8":"\n# model = LinearSVC()\nmodel = LogisticRegression(C=1.0, \n                           class_weight='balanced')\n\n# Initialize OVR classifier with ML Algorithm\novr = OneVsRestClassifier(estimator=model)\n\novr.fit(X_train_vec, y_train)","e5f7c77d":"# y_pred = lgbm_clf.predict(X_valid_vec)\ny_pred = ovr.predict(X_valid_vec)\n\nprint(\"Accuracy: %1.3f \\tPrecision: %1.3f \\tRecall: %1.3f \\tF1-Score: %1.3f\\n\" % (accuracy_score(y_valid, y_pred),\n                                                                                     precision_score(y_valid, y_pred, average='micro'),\n                                                                                     recall_score(y_valid, y_pred, average='micro'),\n                                                                                     f1_score(y_valid, y_pred, average='micro')))","70039c14":"test_data['Text'] = test_data['TITLE'] + test_data['ABSTRACT']\n\ntest_data['Processed'] = test_data['Text'].apply(DataPreprocess())","0491e321":"# Feature extraction\nX_train_vec, X_test_vec = vectorize(tfidf_vector, X_train.flatten(), test_data['Processed'])","26f81d03":"# y_preds = lgbm_clf.predict(X_test_vec)\ny_preds = ovr.predict(X_test_vec)\ntest_df = test_data.copy()\n\ntest_df['category'] = pd.Series(y_preds, index=test_data.index)","adc490bb":"test_df['category'].unique()","ed0a1b90":"\ntest_df[labels] = pd.get_dummies(test_df['category'], columns=labels)\n\nfinal_df = test_df.drop(['TITLE', 'ABSTRACT', 'Text', 'Processed', 'category'], axis=1)\n\nsubmission_data = final_df[submission_data.columns]\n\nsubmission_data\n\nsubmission_data.to_csv('multiclass_lr_04.csv', index=False)","d4c47c74":"## Explore Data","0c140cbe":"## Build A Model\n\n1. Light GBM - Score is 74.40\n2. OneVsRestClassifier(SVC) - Score: 74.08\n3. OneVsRestClassifier(LR) - Score: 75.39","8ddcb1dd":"## Loading Dataset","fbd16755":"## Data Preparation","2bf361cd":"## Feature Engineering\n### Convert one-hot encoded fields to categories","f573c426":"## Import Libraries","65cdac28":"## Prepare Test Data","058608f2":"# Simple NLP Topic Modeling Approach\n\n## AnalyticVidhya - JanataHack on Topic Modeling\n\n## Problem statement\n\nResearchers have access to large online archives of scientific articles. As a consequence, finding relevant articles has become more difficult. Tagging or topic modelling provides a way to give token of identification to research articles which facilitates recommendation and search process.\n\nGiven the abstract and title for a set of research articles, predict the topics for each article included in the test set. \n\nNote that a research article can possibly have more than 1 topic. The research article abstracts and titles are sourced from the following 6 topics: \n\n1. Computer Science\n\n2. Physics\n\n3. Mathematics\n\n4. Statistics\n\n5. Quantitative Biology\n\n6. Quantitative Finance\n\n## Dataset\n\nThe dataset consists of three files `train.csv`, `test.csv` and `sample_submission.csv`.\n\n|Fields| Description|\n|-------|-----------|\n|ID |Unique ID for each article|\n|TITLE|Title of the research article|\n|ABSTRACT|Abstract of the research article|\n|Computer Science|Whether article belongs to topic computer science (1\/0)|\n|Physics\t|Whether article belongs to topic physics (1\/0)|\n|Mathematics\t|Whether article belongs to topic Mathematics (1\/0)|\n|Statistics\t|Whether article belongs to topic Statistics (1\/0)|\n|Quantitative Biology\t|Whether article belongs to topic Quantitative Biology (1\/0)|\n|Quantitative Finance|Whether article belongs to topic Quantitative Finance (1\/0)|\n\n\n","81c92c06":"## Resampling Data","b06433d2":"## Feature Extraction"}}