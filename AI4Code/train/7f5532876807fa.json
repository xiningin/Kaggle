{"cell_type":{"b3dc75b7":"code","5ff64aae":"code","2368b7ff":"code","66ddaa70":"code","afbbfe9f":"code","01be53d6":"code","b64c157c":"code","1dff7d74":"code","519e8e32":"code","991c5807":"code","d8b24e9f":"code","20238c1a":"code","11c1cc52":"code","9feb427a":"code","fcbad34c":"code","0a1b9233":"code","c6af08b9":"code","faedacf0":"code","197b6cd8":"code","6c38d67d":"code","8aea6b22":"code","28b39319":"code","5fd98fb5":"code","78e4e8d1":"code","07ce9bf7":"code","54bd8f46":"code","01214a39":"code","0a61e977":"code","63d24125":"code","5a3c51dc":"markdown","ac208687":"markdown","ff245521":"markdown","7e3d18d4":"markdown","2326ee23":"markdown","7ef7b890":"markdown","4d615bcd":"markdown","673e058e":"markdown"},"source":{"b3dc75b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5ff64aae":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense,Activation,Dropout\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Flatten,Dropout,Conv2D,MaxPooling2D, BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import EarlyStopping, Callback\nfrom keras.optimizers import Adam","2368b7ff":"train = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_train.csv')\ntest = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_test.csv')","66ddaa70":"print(train.shape)\nprint(test.shape)","afbbfe9f":"train.head(5)","01be53d6":"test.head(5)","b64c157c":"print(\"train missing values:\", train.isnull().any().sum())\nprint(\"test missing values:\", test.isnull().any().sum())","1dff7d74":"X = train.iloc[:,1:] #taking all but the first row\nY = train.iloc[:,0] #taking only the first row as this is the label\n\n#splitting dataframe using train_test_split\nx_train , x_test , y_train , y_test = train_test_split(X, Y , test_size=0.1, random_state=42)","519e8e32":"class_names = ['T_shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat', \n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n\nplt.figure(figsize=(10, 10))\nfor i in range(36):\n    plt.subplot(6, 6, i + 1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(X.loc[i].values.reshape((28,28))) #calling the .values of each row\n    label_index = int(Y[i]) #setting as an int as the number is stored as a string\n    plt.title(class_names[label_index])\nplt.show()","991c5807":"x_train =x_train\/255.0\nx_test=x_test\/255.0","d8b24e9f":"#reshape\nx_train =x_train.values.reshape(-1, 28,28,1)\n#reshape\nx_test = x_test.values.reshape(-1, 28,28,1)","20238c1a":"#label encoding\ny_train = to_categorical(y_train, num_classes=10)\ny_test  = to_categorical(y_test, num_classes=10)","11c1cc52":"print(\"X_train shape: \", x_train.shape)\nprint(\"X_test shape: \", x_test.shape)\nprint(\"y_train shape: \", y_train.shape)\nprint(\"y_test shape: \", y_test.shape)","9feb427a":"from keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(\n        rotation_range= 10,\n        zoom_range = 0.1,\n        width_shift_range = 0.1,\n        height_shift_range = 0.1\n)\n\ndatagen.fit(x_train)","fcbad34c":"train_generator = datagen.flow(x_train, y_train, batch_size = 64)\n\nvalidation_generator = datagen.flow(x_test, y_test, batch_size = 64)","0a1b9233":"model = Sequential() # Initialize the sequential model\n\n# Add CNN convolutions with BatchNormalization and MaxPooling2D\n# Avoid overfitting with Dropout\nmodel.add(Conv2D(32, kernel_size = (3,3), input_shape=(28, 28, 1), padding = 'Same', activation='relu'))\nmodel.add(Conv2D(64, kernel_size = (3,3), padding = 'Same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=1, padding='valid'))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, kernel_size = (3,3), padding = 'Same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=1, padding='valid'))\nmodel.add(Dropout(0.2))\n\n# Convert our matrix to 1-D set of features \nmodel.add(Flatten())\n\n# Add fully-conected layers\nmodel.add(Dense(512, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.20))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.35))\nmodel.add(Dense(10, activation='softmax'))","c6af08b9":"# Defining the call backs EarlyStopping and myCallback which will stop the training\n# if the accuracy reaches 99%\n\nclass myCallback(Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('accuracy')>0.999):\n            print(\"\\nReached 99.9% accuracy so cancelling training!\")\n            self.model.stop_training = True\n\n# Instantiate callback\nmycallback = myCallback()\n\n\nearly_stopping_callback = EarlyStopping(monitor='val_loss', \n                                        patience=3,\n                                        verbose = 2,\n                                        restore_best_weights=True)\n\n","faedacf0":"from tensorflow.keras.optimizers import Adam\n\nmodel.compile(optimizer = Adam(lr = 1e-3),\n              loss = 'categorical_crossentropy',\n              metrics = ['accuracy'])","197b6cd8":"model.summary()","6c38d67d":"!pip install visualkeras\nimport visualkeras\n\nvisualkeras.layered_view(model)","8aea6b22":"history = model.fit_generator(\n    train_generator,\n    steps_per_epoch = x_train.shape[0] \/\/ 128,\n    epochs = 50,\n    validation_data = validation_generator,\n    validation_steps = x_test.shape[0] \/\/ 64,\n    callbacks = [mycallback,early_stopping_callback]\n)","28b39319":"plt.figure(figsize=(10, 7))\nacc = history.history[\"accuracy\"]\nloss = history.history[\"loss\"]\n\nepochs = range(len(acc))\nval_acc = history.history[\"val_accuracy\"]\nval_loss = history.history[\"val_loss\"]\n\n\nplt.plot(epochs, acc, \"g\", label=\"Accuracy\")\nplt.plot(epochs, loss, \"r\", label=\"Loss\")\n\nplt.plot(epochs, val_acc, \"orange\", label=\"Validation Accuracy\")\nplt.plot(epochs, val_loss, \"brown\", label=\"Vlaidation Loss\")\nplt.title(\"Model Accuracy And Loss\")\nplt.legend()\nplt.show()","5fd98fb5":"# Save the model\nmodel.save('model.h5')","78e4e8d1":"predict=model.predict(x_test)","07ce9bf7":"y_pred=[]\nfor i in range(len(predict)):\n    y_pred.append(np.argmax(predict[i]))","54bd8f46":"for i in range(5):\n    print(y_pred[i])","01214a39":"y = np.argmax(y_test, axis=-1)","0a61e977":"y","63d24125":"mat=confusion_matrix(y,y_pred)\nmat","5a3c51dc":"Data Augumnetation.Increase the size of data so that model can get more images to train.","ac208687":"Importing Dataset","ff245521":"Getting our y into a different variable and splitting the data","7e3d18d4":"UPVOTE if you like this Notebook :)","2326ee23":"Creating the Model","7ef7b890":"Normalizing the pixels into the range 0 to 1.","4d615bcd":"Checking the shape of the dataset.It has pixels that range from 0-255","673e058e":"Finding any missing values."}}