{"cell_type":{"e6415343":"code","2a94a6d4":"code","b79f7f3d":"code","65c8137f":"code","56d3a0cd":"code","15b3aa60":"code","51a23c87":"code","cd09b964":"code","9049a98a":"code","09b2d865":"code","3f21cdfd":"code","8e031b5e":"code","66fa52ed":"code","e856b393":"code","ab39eb63":"code","642ea628":"code","eb6dbe8b":"code","46a95f19":"code","26540a98":"code","d0939cea":"code","5af06d47":"code","4584349b":"code","d86c5c9d":"code","3f0d4ee9":"code","af5bf3a3":"code","7833e9f7":"markdown","20347a37":"markdown","403d0074":"markdown","8cd0ef04":"markdown"},"source":{"e6415343":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2a94a6d4":"import re\nfrom nltk.corpus import stopwords\nimport nltk\nfrom nltk.tokenize import RegexpTokenizer\nfrom bs4 import BeautifulSoup\nfrom string import punctuation\nimport string\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import voting,StackingClassifier,AdaBoostClassifier,RandomForestClassifier","b79f7f3d":"df = pd.read_csv('..\/input\/clickbait-dataset\/clickbait_data.csv')\ndf","65c8137f":"nltk.download('stopwords')","56d3a0cd":"stop = set(string.punctuation)","15b3aa60":"tokenizer = RegexpTokenizer(r'\\w+')","51a23c87":"def remhtml(text):\n  soup = BeautifulSoup(text,\"html.parser\")\n  return soup.get_text()\n\ndef rem_bw_sq_bracks(text):\n  return re.sub('\\[[^]]*\\]','',text)\n\ndef remhttplink(text):\n  return re.sub(r'http\\S+','',text)\n\ndef remAT(text):\n  return re.sub(r'@','',text)\n\ndef remstopwords(text):\n  word_list = tokenizer.tokenize(text)\n  clean_list = [w for w in word_list if w not in stop]\n  clean_text = ' '.join(clean_list)\n  return clean_text\n\ndef clean_sent(text):\n  text = text.lower()\n  text = remhtml(text)\n  text = rem_bw_sq_bracks(text)\n  text = remhttplink(text)\n  text = remAT(text)\n  text = remstopwords(text)\n  return text\n\ndf['headline'] = df['headline'].apply(clean_sent)","cd09b964":"df","9049a98a":"from wordcloud import WordCloud,STOPWORDS","09b2d865":"plt.figure(figsize = (20,20)) # Text that is ClickBait\nwc = WordCloud(max_words = 3000 , width = 1600 , height = 800 , stopwords = STOPWORDS).generate(\" \".join(df[df.clickbait == 1].headline))\nplt.imshow(wc , interpolation = 'bilinear')\nplt.grid(False)","3f21cdfd":"plt.figure(figsize = (20,20)) # Text that is not ClickBait\nwc = WordCloud(max_words = 3000 , width = 1600 , height = 800 , stopwords = STOPWORDS).generate(\" \".join(df[df.clickbait == 0].headline))\nplt.imshow(wc , interpolation = 'bilinear')\nplt.grid(False)","8e031b5e":"sns.countplot(df.clickbait)","66fa52ed":"import tensorflow_hub as hub","e856b393":"embed = hub.load(\"https:\/\/tfhub.dev\/google\/universal-sentence-encoder\/4\")","ab39eb63":"x_train,x_test,y_train,y_test = train_test_split(df.headline.values,df.clickbait.values,random_state = 0,stratify=df.clickbait.values,test_size=0.20)","642ea628":"embed_train = embed(x_train)\nx = embed_train.numpy()","eb6dbe8b":"embed_test = embed(x_test)\nxt = embed_test.numpy()","46a95f19":"y_train=y_train.astype('int')\ny_test=y_test.astype('int')","26540a98":"from time import time","d0939cea":"def sigmoid(x):\n  return (1\/(1+np.exp(-1*x)))","5af06d47":"dt = DecisionTreeClassifier(random_state=2)\ndef pso(X, Y, popu_size, maxItr=100):\n  particles = []\n  for i in range(popu_size):\n      particles.append(np.random.choice([0, 1], size=512))\n  particles = np.array(particles,dtype=float)\n  velocities = np.random.rand(popu_size,512)\n  itr = 0\n  pbest = np.zeros((popu_size,512))\n  pbest_score = np.ones((popu_size,),dtype=float)*0\n  gbest_score = 0\n  gbest = np.zeros((512,))\n  while(itr < maxItr):\n    start = time()\n    for i in range(popu_size):\n      X_togive = np.multiply(X, particles[i])\n      dt.fit(X_togive, Y)\n      Xt = np.multiply(xt, particles[i])\n      score = dt.score(Xt,y_test)\n      if score > pbest_score[i]:\n        pbest_score[i] = score\n        pbest[i] = particles[i]\n      if score > gbest_score:\n        gbest_score = score\n        gbest = pbest[i]\n    for i in range(popu_size):\n      velocities[i] = 0.4*velocities[i] + 2*np.random.rand()*(pbest[i]-particles[i]) +2*np.random.rand()*(gbest-particles[i])\n      for kk in range(512):\n        if velocities[i][kk]>4.0:\n          velocities[i][kk] =  4.0\n        elif velocities[i][kk]<-4.0:\n          velocities[i][kk] = -4.0\n      velo_sig = sigmoid(velocities[i])\n      for kk in range(512):\n        particles[i][kk] = (np.random.randn()<velo_sig[kk])*1\n    end = time()\n    print(\"Epochs:\",itr+1,\"Time Taken:\",(end-start),\"secs\",\"Best Score:\",gbest_score)\n    itr+=1\n  return gbest","4584349b":"dt.fit(x,y_train)\ndt.score(xt,y_test)","d86c5c9d":"new_x = pso(x,y_train,5,100)","3f0d4ee9":"X_togive = np.multiply(x,new_x)\ndt.fit(X_togive, y_train)\ndt.score(xt,y_test)","af5bf3a3":"rf = RandomForestClassifier(random_state=2)\nrf.fit(X_togive,y_train)\nrf.score(xt,y_test)","7833e9f7":"## Cleaning Data","20347a37":"## Tokenizing and Vectorizing Data","403d0074":"## Training Begins","8cd0ef04":"## Paticle Swarm Optimization"}}