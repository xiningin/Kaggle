{"cell_type":{"b6bae82d":"code","616ee686":"code","4b7e6301":"code","39de1443":"code","02790903":"code","496a1f05":"code","d710fc60":"code","dd8af31e":"code","b6d2c0fe":"code","76937444":"code","2f6de20e":"code","c71e48f4":"code","ef14f51f":"code","2350e172":"code","19bf4de0":"code","39399404":"code","0684ecc2":"code","df22bf7f":"code","ca7c993b":"code","af1609b7":"code","2ddba075":"code","360bfd67":"code","3b4511ae":"code","2eafbf2a":"code","5fedadf8":"code","fc89415f":"code","83091b75":"code","622e42c0":"code","d52a50ef":"code","d17b4782":"code","1464706c":"code","8943a91e":"code","334f0bc2":"code","7e3b7bdc":"code","0c1de25c":"code","bed870c8":"code","0265fffe":"code","a8596d48":"code","ff7db975":"code","626d5300":"code","69211fd2":"code","42ffa21b":"code","a3b1790b":"code","a7c79240":"code","3560d9c0":"code","4104306c":"code","6ab6d547":"code","9c3b8ede":"code","14fd5241":"code","118061cc":"code","4ec04f66":"code","a379dee9":"code","b0cc86b6":"code","31e2f986":"code","b76b22af":"code","50bb18bb":"code","4208b2d1":"code","e7114d8d":"code","2a068544":"code","f6961183":"code","97ecd0a3":"code","7ad92de8":"code","29840035":"code","deeb0c6a":"code","db333fb0":"code","6a897d25":"code","11fd019b":"code","62b39745":"code","baa4f8ba":"code","fbc0ffa2":"code","189c6f7c":"code","f9a9a637":"code","bf3d5184":"code","df09a268":"code","3d771170":"code","566524e8":"code","c435f440":"code","820b3f58":"code","00c08471":"code","da5d3833":"code","cf9f3e2e":"code","8d26a1e2":"code","ef34f354":"code","83edaa5b":"code","88bd702e":"code","6d5003af":"markdown","ffcdb1d8":"markdown","f83bce64":"markdown","1808db2d":"markdown","0845d600":"markdown","e2a7095f":"markdown","b24875d2":"markdown","0cf57100":"markdown","35c76519":"markdown","ae91348c":"markdown","a2c42dde":"markdown","1bda93cf":"markdown","5881a9d3":"markdown","2869ad1b":"markdown","98e8f281":"markdown","1359c021":"markdown","0933c871":"markdown","d2b49e5d":"markdown","7f65349f":"markdown","8c7c01b1":"markdown","694f9a99":"markdown","aa6c7c69":"markdown","5bbc4e4b":"markdown","8eb2d56c":"markdown","21a800d1":"markdown","38f89b91":"markdown","8d9db04e":"markdown","ee4efa4b":"markdown","1a552a52":"markdown","ded516c0":"markdown","b1ac8be5":"markdown","72e233f8":"markdown"},"source":{"b6bae82d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n%matplotlib inline","616ee686":"df_org = pd.read_csv('\/kaggle\/input\/summeranalytics2020\/train.csv')\ndf = df_org.copy()","4b7e6301":"df.head()","39de1443":"df.shape","02790903":"df.dtypes","496a1f05":"df.describe()","d710fc60":"df.info()","dd8af31e":"msno.bar(df)","b6d2c0fe":"no_use_cols = ['Id']\ndf.drop(no_use_cols, inplace=True, axis=1)","76937444":"df.shape","2f6de20e":"df.drop_duplicates(inplace=True)\ndf.shape","c71e48f4":"df.describe()","ef14f51f":"nominal_columns = df.select_dtypes(include=['object']).columns.tolist()\nnominal_columns","2350e172":"cont_columns = ['Age','DistanceFromHome','EmployeeNumber','MonthlyIncome','NumCompaniesWorked', 'PercentSalaryHike','TotalWorkingYears',\n                 'TrainingTimesLastYear', 'YearsAtCompany', 'YearsInCurrentRole','YearsSinceLastPromotion','YearsWithCurrManager']\nordinal_columns = ['EnvironmentSatisfaction','JobInvolvement','JobSatisfaction','Education','Behaviour','CommunicationSkill','PerformanceRating','StockOptionLevel']\ntarget_column = ['Attrition']","19bf4de0":"len(nominal_columns)+len(cont_columns)+len(ordinal_columns)+len(target_column)","39399404":"plt.figure(figsize=(10,10))\nsns.heatmap(df[cont_columns].corr(), cmap=\"YlGnBu\")","0684ecc2":"df[cont_columns].hist(figsize=(10,10))","df22bf7f":"sns.pairplot(df[cont_columns])","ca7c993b":"plt.figure(figsize=(10,10))\nsns.heatmap(df[ordinal_columns].corr(), cmap=\"YlGnBu\")","af1609b7":"df.drop(['Behaviour'], inplace=True, axis = 1)\nordinal_columns.remove('Behaviour')","2ddba075":"df.columns","360bfd67":"df_temp = pd.get_dummies(df, columns=['Attrition'])\nfor i in nominal_columns+ordinal_columns:\n    m = df_temp.pivot_table(columns=i, values = ['Attrition_1','Attrition_0'], aggfunc=np.sum)\n    m.loc['PercentAttrit'] = 0\n    for a in m:\n        m.loc['PercentAttrit'][a] = ((m[a][1])\/(m[a][0]+m[a][1]))*100\n    print(m)\n    print(\"\")","3b4511ae":"plt.figure(figsize=(20,5))\ntotal = float(len(df))\nax = sns.countplot(x = pd.cut(df.Age, bins = [0,26,32,36,40,np.inf], labels=[0,1,2,3,4]), hue = df['Attrition'])\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")","2eafbf2a":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nax = sns.countplot(x = df.BusinessTravel, hue = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.subplot(1,2,2)\nax = sns.countplot(hue = df.BusinessTravel, x = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")","5fedadf8":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.boxplot(x = df.Attrition, y = df.DistanceFromHome)\nplt.subplot(1,2,2)\nsns.violinplot(x = df.Attrition, y = df.DistanceFromHome)","fc89415f":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.boxplot(x = df.Attrition, y = df.EmployeeNumber)\nplt.subplot(1,2,2)\nsns.violinplot(x = df.Attrition, y = df.EmployeeNumber)","83091b75":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nax = sns.countplot(x = df.EnvironmentSatisfaction, hue = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.subplot(1,2,2)\nax = sns.countplot(hue = df.EnvironmentSatisfaction, x = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")","622e42c0":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nax = sns.countplot(x = df.JobSatisfaction, hue = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.subplot(1,2,2)\nax = sns.countplot(hue = df.JobSatisfaction, x = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")","d52a50ef":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nax = sns.countplot(x = df.JobInvolvement, hue = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.subplot(1,2,2)\nax = sns.countplot(hue = df.JobInvolvement, x = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")","d17b4782":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nax = sns.countplot(x = df.Gender, hue = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.subplot(1,2,2)\nax = sns.countplot(hue = df.Gender, x = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")","1464706c":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nax = sns.countplot(x = df.MaritalStatus, hue = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.subplot(1,2,2)\nax = sns.countplot(hue = df.MaritalStatus, x = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")","8943a91e":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nax = sns.countplot(x = df.OverTime, hue = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.subplot(1,2,2)\nax = sns.countplot(hue = df.OverTime, x = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")","334f0bc2":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.boxplot(x = df.Attrition, y = df.NumCompaniesWorked)\nplt.subplot(1,2,2)\nsns.violinplot(x = df.Attrition, y = df.NumCompaniesWorked)","7e3b7bdc":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.boxplot(x = df.Attrition, y = df.PercentSalaryHike)\nplt.subplot(1,2,2)\nsns.violinplot(x = df.Attrition, y = df.PercentSalaryHike)","0c1de25c":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nax = sns.countplot(x = df.PerformanceRating, hue = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.subplot(1,2,2)\nax = sns.countplot(hue = df.PerformanceRating, x = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")","bed870c8":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nax = sns.countplot(x = df.StockOptionLevel, hue = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.subplot(1,2,2)\nax = sns.countplot(hue = df.StockOptionLevel, x = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")","0265fffe":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nax = sns.countplot(x = df.CommunicationSkill, hue = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.subplot(1,2,2)\nax = sns.countplot(hue = df.CommunicationSkill, x = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")","a8596d48":"plt.figure(figsize=(20,32))\nplt.subplot(4,1,1)\nax = sns.countplot(x = df.JobRole, hue=df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.subplot(4,1,2)\nax = sns.countplot(x = df.Department, hue=df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.subplot(4,1,3)\nax = sns.countplot(x = df.Education, hue=df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.subplot(4,1,4)\nax = sns.countplot(x = df.EducationField, hue=df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")","ff7db975":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.boxplot(x = df.Attrition, y = df.TotalWorkingYears)\nplt.subplot(1,2,2)\nsns.violinplot(x = df.Attrition, y = df.TotalWorkingYears)","626d5300":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.boxplot(x = df.Attrition, y = df.YearsAtCompany)\nplt.subplot(1,2,2)\nsns.violinplot(x = df.Attrition, y = df.YearsAtCompany)","69211fd2":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.boxplot(x = df.Attrition, y = df.TrainingTimesLastYear)\nplt.subplot(1,2,2)\nsns.violinplot(x = df.Attrition, y = df.TrainingTimesLastYear)","42ffa21b":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.boxplot(x = df.Attrition, y = df.YearsInCurrentRole)\nplt.subplot(1,2,2)\nsns.violinplot(x = df.Attrition, y = df.YearsInCurrentRole)","a3b1790b":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.boxplot(x = df.Attrition, y = df.YearsSinceLastPromotion)\nplt.subplot(1,2,2)\nsns.violinplot(x = df.Attrition, y = df.YearsSinceLastPromotion)","a7c79240":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.boxplot(x = df.Attrition, y = df.YearsWithCurrManager)\nplt.subplot(1,2,2)\nsns.violinplot(x = df.Attrition, y = df.YearsWithCurrManager)","3560d9c0":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nax = sns.countplot(x = df.StockOptionLevel.apply(lambda x: 0 if x == 0 else 1), hue = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.subplot(1,2,2)\nax = sns.countplot(hue = df.StockOptionLevel.apply(lambda x: 0 if x == 0 else 1), x = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")","4104306c":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.boxplot(x = df.Attrition, y = df.TotalWorkingYears \/ df.Age)\nplt.subplot(1,2,2)\nsns.violinplot(x = df.Attrition, y = df.TotalWorkingYears \/ df.Age)","6ab6d547":"df.EducationField.unique()","9c3b8ede":"df.JobRole.unique()","14fd5241":"for ef in df.EducationField.unique():\n    print(ef)\n    print('='*50)\n    print(df[df.EducationField == ef].JobRole.value_counts())\n    print()","118061cc":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.boxplot(x = df.Attrition, y = df.YearsWithCurrManager \/ (df.YearsAtCompany + 1))\nplt.subplot(1,2,2)\nsns.violinplot(x = df.Attrition, y = df.YearsWithCurrManager \/ (df.YearsAtCompany + 1))","4ec04f66":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.boxplot(x = df.Attrition, y = df.YearsInCurrentRole \/ (df.YearsAtCompany + 1))\nplt.subplot(1,2,2)\nsns.violinplot(x = df.Attrition, y = df.YearsInCurrentRole \/ (df.YearsAtCompany + 1))","a379dee9":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.boxplot(x = df.Attrition, y = df.Education \/ (df.Age + df.TotalWorkingYears))\nplt.subplot(1,2,2)\nsns.violinplot(x = df.Attrition, y = df.Education \/ (df.Age + df.TotalWorkingYears))","b0cc86b6":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nax = sns.countplot(x = pd.cut(df.Age, bins = [0,27,45,np.inf], labels=['Young','Mid','Old']), hue = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.subplot(1,2,2)\nax = sns.countplot(hue = pd.cut(df.Age, bins = [0,26,50,np.inf], labels=['Young','Mid','Old']), x = df.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")","31e2f986":"df_temp = df.copy()\nq_pays = dict()\nfor role in df.JobRole.unique():\n    q_pays[role] =  df_temp[df_temp.JobRole == role].MonthlyIncome.quantile(0.4)\n\nprint(q_pays)\ndf_temp['paid_enough'] = df_temp.apply(lambda x: 'No' if x.MonthlyIncome < q_pays.get(x.JobRole) else 'Yes', axis = 1)\n\nplt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nax = sns.countplot(x = df_temp.paid_enough, hue = df_temp.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.subplot(1,2,2)\nax = sns.countplot(x = df_temp.Attrition, hue = df_temp.paid_enough)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")","b76b22af":"df_temp = df.copy()\n\ndef q25(x):\n            return x.quantile(0.25)\ndef q50(x):\n            return x.quantile(0.5)\ndef q75(x):\n            return x.quantile(0.75)\n    \ndef paid_enough(pay, qtiles):\n    if pay <= qtiles[0]:\n        return '25 or less'\n    if pay <= qtiles[1]:\n        return '25 to 50'\n    if pay <= qtiles[2]:\n        return '50-75'\n    return '75 or above'\n\n\nq_pays = dict()\nfor role in df.JobRole.unique():\n    qtiles = [q25, q50, q75]\n    q_pays[role] =  df_temp[df_temp.JobRole == role].MonthlyIncome.agg([q25, q50, q75]).to_list()\n\nprint(q_pays)\ndf_temp['paid_enough'] = df_temp.apply(lambda x: paid_enough(x.MonthlyIncome, q_pays[x.JobRole]), axis = 1)\n\nplt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nax = sns.countplot(x = df_temp.paid_enough, hue = df_temp.Attrition)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")\nplt.subplot(1,2,2)\nax = sns.countplot(x = df_temp.Attrition, hue = df_temp.paid_enough)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\")","50bb18bb":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.boxplot(x = df.Attrition, y = (df.EnvironmentSatisfaction+df.JobSatisfaction+df.JobInvolvement) \/ 15)\nplt.subplot(1,2,2)\nsns.violinplot(x = df.Attrition, y = (df.EnvironmentSatisfaction+df.JobSatisfaction+df.JobInvolvement) \/ 10)","4208b2d1":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.boxplot(x = df.Attrition, y = df.YearsAtCompany\/(df.PercentSalaryHike+1))\nplt.subplot(1,2,2)\nsns.violinplot(x = df.Attrition, y = df.YearsAtCompany\/(df.PercentSalaryHike+1))","e7114d8d":"from sklearn.feature_selection import RFE\nfrom sklearn.ensemble import RandomForestClassifier","2a068544":"df_sel = df_org.copy()\nno_use_cols = ['Id','Behaviour','Gender','Education', 'PerformanceRating', 'EmployeeNumber']\ndf_sel.drop(no_use_cols, inplace=True, axis=1)\ndf_sel.drop_duplicates(inplace=True)\ndf_sel = pd.get_dummies(df_sel, columns=df_sel.select_dtypes(include='object').columns.to_list())\nX = df_sel.drop(['Attrition'], axis=1)\ny = df_sel['Attrition']\nrfe = RFE(RandomForestClassifier(), 20)\nrfe.fit(X, y)\ndf_sel.drop(['Attrition'], axis=1).columns[rfe.get_support()]","f6961183":"df_sel = df_org.copy()\nno_use_cols = ['Id','Behaviour','PerformanceRating','Gender','Education', 'TrainingTimesLastYear','PercentSalaryHike','Department', 'EmployeeNumber']\ndf_sel.drop(no_use_cols, inplace=True, axis=1)\ndf_sel.drop_duplicates(inplace=True)\ndf_sel = pd.get_dummies(df_sel, columns=df_sel.select_dtypes(include='object').columns.to_list())\nX = df_sel.drop(['Attrition'], axis=1)\ny = df_sel['Attrition']\nrfe = RFE(RandomForestClassifier(), 20)\nrfe.fit(X, y)\ndf_sel.drop(['Attrition'], axis=1).columns[rfe.get_support()]","97ecd0a3":"df_mod = df_org.copy()\nno_use_cols = ['Id',\n               'Behaviour',\n               'PerformanceRating',\n               'Gender',\n               'Education', \n               'Department',\n               'EmployeeNumber']\ndf_mod.drop(no_use_cols, inplace=True, axis=1)\ndf_mod.drop_duplicates(inplace=True)\n\nimport pandas_profiling\nprofile = df_mod.profile_report(title='Employee_Attrition_Profile_Dataset')\nprofile.to_notebook_iframe()","7ad92de8":"df_mod = df_org.copy()\ndf_mod['OwnStocks'] = df_mod.StockOptionLevel.apply(lambda x: 0 if x == 0 else 1)\ndf_mod['PropWorkLife'] = df_mod.TotalWorkingYears \/ df_mod.Age\ndf_mod['PropExpComp'] = df_mod.NumCompaniesWorked\/ (df_mod.TotalWorkingYears+1)\ndf_mod['AgeBar'] = pd.cut(df_mod.Age, bins = [0,27,45,np.inf], labels=['Young','Mid','Old']).astype('object')\ndf_mod['PropRoleComp'] = df_mod.YearsInCurrentRole \/ (df_mod.YearsAtCompany + 1)\nq_pays = {\n        'Laboratory Technician': 2705.0, \n        'Manufacturing Director': 5824.4000000000015, \n        'Sales Executive': 5675.8, \n        'Research Scientist': 2693.4, \n        'Sales Representative': 2325.8, \n        'Healthcare Representative': 6348.6, \n        'Research Director': 15014.600000000002, \n        'Human Resources': 2741.0, \n        'Manager': 16894.0\n    }\ndf_mod['AboveQPay'] = df_mod.apply(lambda x: 'No' if x.MonthlyIncome < q_pays.get(x.JobRole) else 'Yes', axis = 1)\ndf_mod['WorkFactors'] = (df_mod.EnvironmentSatisfaction+df_mod.JobSatisfaction+df_mod.JobInvolvement) \/ 15\n\nno_use_cols = [\n                    'Id',\n                    'Behaviour',\n                    'PerformanceRating',\n                    'Gender',\n                    'Education', \n                    'Department',\n                    'EmployeeNumber',\n                    'PercentSalaryHike',\n                    'YearsInCurrentRole',\n                    'YearsSinceLastPromotion',\n                    'YearsWithCurrManager',\n                    'TrainingTimesLastYear',\n                    'EducationField',\n                    'StockOptionLevel',\n                    'TotalWorkingYears',\n                    'YearsAtCompany',\n                    #'NumCompaniesWorked',\n                    #'JobSatisfaction',\n                    #'EnvironmentSatisfaction',\n                    'Age',\n                    #'MonthlyIncome',\n                  ]\ndf_mod.drop(no_use_cols, inplace=True, axis=1)\ndf_mod.drop_duplicates(inplace=True)\n\nimport pandas_profiling\nprofile = df_mod.profile_report(title='Employee_Attrition_Profile_Dataset')\nprofile.to_notebook_iframe()","29840035":"df = pd.read_csv('\/kaggle\/input\/summeranalytics2020\/train.csv')\ndft = pd.read_csv('\/kaggle\/input\/summeranalytics2020\/test.csv')","deeb0c6a":"def extract_feature(df_input):\n    df = df_input.copy()\n    df['OwnStocks'] = df.StockOptionLevel.apply(lambda x: 'No' if x == 0 else 'Yes')\n    df['PropWorkLife'] = df.TotalWorkingYears \/ df.Age\n    df['PropExpComp'] = df.NumCompaniesWorked \/ (df.TotalWorkingYears+1)\n    df['PropRoleComp'] = df.YearsInCurrentRole \/ (df.YearsAtCompany + 1)\n    df['AgeBar'] = pd.cut(df.Age, bins = [0,27,45,np.inf], labels=['Young','Mid','Old']).astype('object')\n    q_pays = {\n        'Laboratory Technician': 2705.0, \n        'Manufacturing Director': 5824.4000000000015, \n        'Sales Executive': 5675.8, \n        'Research Scientist': 2693.4, \n        'Sales Representative': 2325.8, \n        'Healthcare Representative': 6348.6, \n        'Research Director': 15014.600000000002, \n        'Human Resources': 2741.0, \n        'Manager': 16894.0\n    }\n    #df['AboveQPay'] = df.apply(lambda x: 'No' if x.MonthlyIncome < q_pays.get(x.JobRole) else 'Yes', axis = 1)\n    #df['WorkFactors'] = (df.EnvironmentSatisfaction+df.JobSatisfaction+df.JobInvolvement) \/ 15\n    cols_to_drop = [\n                    'Id',\n                    'Behaviour',\n                    'PerformanceRating',\n                    'Gender',\n                    'Education', \n                    'Department',\n                    'EmployeeNumber',\n                    'PercentSalaryHike',\n                    'YearsInCurrentRole',\n                    'YearsSinceLastPromotion',\n                    'YearsWithCurrManager',\n                    'TrainingTimesLastYear',\n                    'EducationField',\n                    'StockOptionLevel',\n                    'TotalWorkingYears',\n                    'YearsAtCompany',\n                    'NumCompaniesWorked',\n                    'Age',\n                    #'MonthlyIncome',\n                    ]\n    df.drop(cols_to_drop, inplace = True, axis = 1)\n    print('Columns Dropped : {}'.format(cols_to_drop))\n    print('Columns in DataFrame: {}'.format(df.columns.to_list()))\n    return df","db333fb0":"df_cleaned = extract_feature(df)\ndft_cleaned = extract_feature(dft)","6a897d25":"df_cleaned.drop_duplicates(inplace=True)","11fd019b":"df_X = df_cleaned.drop(['Attrition'], axis = 1).copy()\ndf_y = df_cleaned[['Attrition']].copy()","62b39745":"nominal_type = list(df_X.select_dtypes(include='object').columns)\nnominal_type","baa4f8ba":"nominal_type_vals = dict()\nfor ot in nominal_type:\n    nominal_type_vals[ot] = list(df_X[ot].unique())\nprint(nominal_type_vals)","fbc0ffa2":"numerical_type = list(df_X.select_dtypes(exclude='object').columns)\nnumerical_type","189c6f7c":"ordinal_type = list()\nordinal_columns_dataset = ['EnvironmentSatisfaction',\n                           'JobInvolvement',\n                           'JobSatisfaction',\n                           'Education',\n                           'Behaviour',\n                           'CommunicationSkill',\n                           'PerformanceRating',\n                           'StockOptionLevel',\n                          ]\nfor col in ordinal_columns_dataset:\n    if col in numerical_type:\n        numerical_type.remove(col)\n        ordinal_type.append(col)\n        \nordinal_type","f9a9a637":"final_cols = list(df_X.columns)\nfinal_cols","bf3d5184":"numerical_index = list()\nnominal_index = list()\nordinal_index = list()\n\nfor col in numerical_type:\n    numerical_index.append(final_cols.index(col))\nfor col in nominal_type:\n    nominal_index.append(final_cols.index(col))\nfor col in ordinal_type:\n    ordinal_index.append(final_cols.index(col))\n\nprint('Numerical Columns')\nfor i,col in zip(numerical_index, numerical_type):\n    print(i, col)\nprint('='*50)\nprint('Nominal Columns')\nfor i,col in zip(nominal_index, nominal_type):\n    print(i, col)\nprint('='*50)\nprint('Ordinal Columns')\nfor i,col in zip(ordinal_index, ordinal_type):\n    print(i, col)","df09a268":"df_X.describe()","3d771170":"X_train_full = df_X.copy()\ny_train_full = df_y.copy()","566524e8":"from sklearn.model_selection import train_test_split\nX_train,X_val,y_train,y_val = train_test_split(df_X, df_y, test_size=0.20, random_state = 0, stratify=df_y)","c435f440":"from imblearn.over_sampling import SMOTENC\nsampler = SMOTENC(categorical_features= nominal_index + ordinal_index, k_neighbors=3, random_state=0, sampling_strategy=0.7)\nX_train, y_train = sampler.fit_resample(X_train, y_train)\nX_train_full, y_train_full = sampler.fit_resample(X_train_full, y_train_full)","820b3f58":"from catboost import CatBoostClassifier, Pool\nfrom catboost import cv\n\ncv_dataset = Pool(data=X_train,\n                  label=y_train,\n                  cat_features=nominal_index)","00c08471":"params = {\"iterations\": 200,\n          \"depth\": 8,\n          \"learning_rate\" : 0.06,\n          \"loss_function\": \"Logloss\",\n          \"eval_metric\":'AUC',\n          \"od_type\" : \"Iter\",\n          \"od_wait\" : 100,\n          \"l2_leaf_reg\" : 20,\n          \"bagging_temperature\":7,\n          \"bootstrap_type\":\"Bayesian\",\n          \"random_strength\": 10,\n          \"verbose\": False\n         }","da5d3833":"scores = cv(cv_dataset,\n            params,\n            fold_count=5, \n            stratified=True,\n            plot=\"True\")","cf9f3e2e":"model = CatBoostClassifier(iterations=params['iterations'],\n                           depth=params['depth'],\n                           learning_rate=params['learning_rate'],\n                           loss_function=params['loss_function'],\n                           od_type = params['od_type'],\n                           eval_metric =params['eval_metric'],\n                           od_wait = params['od_wait'],\n                           cat_features=nominal_index,\n                           l2_leaf_reg = params['l2_leaf_reg'],\n                           bagging_temperature = params[\"bagging_temperature\"],\n                           bootstrap_type = params[\"bootstrap_type\"],\n                           random_strength = params[\"random_strength\"],\n                           verbose=False\n                          )\nmodel.fit(X_train, y_train, eval_set=(X_val, y_val), plot=True)","8d26a1e2":"model = CatBoostClassifier(iterations=params['iterations'],\n                           depth=params['depth'],\n                           learning_rate=params['learning_rate'],\n                           loss_function=params['loss_function'],\n                           od_type = params['od_type'],\n                           eval_metric =params['eval_metric'],\n                           od_wait = params['od_wait'],\n                           cat_features=nominal_index,\n                           l2_leaf_reg = params['l2_leaf_reg'],\n                           bagging_temperature = params[\"bagging_temperature\"],\n                           bootstrap_type = params[\"bootstrap_type\"],\n                           random_strength = params[\"random_strength\"],\n                           verbose=False\n                          )\nmodel.fit(X_train_full, y_train_full)","ef34f354":"X_test = dft_cleaned.copy()","83edaa5b":"def test_model_perf(model, X):\n    predictions_df = pd.DataFrame(model.predict_proba(X),columns=['No_Attrition','Attrition'], index=range(1,471))\n    predictions_df.No_Attrition = predictions_df.No_Attrition.apply(lambda x: np.around(x,7))\n    predictions_df.Attrition = predictions_df.Attrition.apply(lambda x: np.around(x,7))\n    predictions_df.index.name = 'Id'\n    final_df = predictions_df[['Attrition']]\n    return final_df","88bd702e":"predictions_df = test_model_perf(model, X_test)\npredictions_df.to_csv('submission.csv')","6d5003af":"**Distribution of Salary hike looks pretty much similar. On the higher side of hike, employees are likely to stay!**","ffcdb1d8":"### Let's see how does categorical variables actually affect attrition!","f83bce64":"**Singles are more likely to leave job followed by Divorced. Married Employees are likely to stay**","1808db2d":"## Training","0845d600":"**Attrition happens on evvery level here. Although there is slight difference in IQR.**","e2a7095f":"**Employees who live far away from home have a higher rate of attrition.**","b24875d2":"**Females have slightly lesser Attrition Rate than males**","0cf57100":"**Employees in initial years of their working life are more likely to leave.**","35c76519":"### Feature Engineering and Profiling","ae91348c":"Dropping Duplicates in Data!","a2c42dde":"**Employees who own stocks are less likely to leave as compared to ones who don't have any**","1bda93cf":"Behaviour is constant!  \nBetter drop it!","5881a9d3":"Dropping up column ID!","2869ad1b":"**Trend is somewhat similar. Attrtion Rate decreases as scale moves towards right.**","98e8f281":"- Age has a normal Distribution\n- There are variables with exponential distribution.","1359c021":"**Due to High Correlation among Department and JobRole, we can drop Department. Also, Education doesn't affect attrition rate significantly.**","0933c871":"**Employees who have jumped companies once are more likely to leave the job. Employees who jump companies alot are more like to leave.**","d2b49e5d":"**Employees who have to travel frequently have higher attrition as compared to ones who travelrarely. In contrast, Non Travel employees have very low rate of attrition**","7f65349f":"### Feature Selection","8c7c01b1":"**All employyes have performance rating of either 3 or 4. Attrition at both levels look failry similar.**","694f9a99":"**Distribution is fairly similar at all levels with slight difference.** ","aa6c7c69":"## EDA, Processing and Selection","5bbc4e4b":"**We can infer that people in 20s, early 30s and above 40s are more likeyly to leave the job. Age is an important factor**","8eb2d56c":"**Employees in early years of company are more likely to leave**","21a800d1":"**Job Satisfaction distribution is almost identical to Environment Satisfaction**","38f89b91":"**Employees who have received lesser training tend to stay, compared to those who have received more training.**","8d9db04e":"Great! No missing Values!","ee4efa4b":"**There is higher attrition where there is low environment satisfaction. Attrition rate begins to decrease as we move towards high level of envrionment satisfaction. Alsmost similar at levels 3 and 4**","1a552a52":"**Observation from Profile: Employee number has unique values.! Strangeeee**","ded516c0":"### Visualizing a few engineered features","b1ac8be5":"**Employees who do overtime are more likely to leave.**","72e233f8":"Let's have some treat for eyes! Let's paint some Graphs."}}