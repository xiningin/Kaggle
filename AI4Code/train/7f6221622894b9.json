{"cell_type":{"7300847e":"code","636b41e3":"code","cd4c90dd":"code","c3884c42":"code","609bee68":"code","2749c604":"code","92175eda":"code","aa35cca8":"code","4644ee59":"code","49eaedda":"code","15a0d646":"code","3df8e2b3":"code","36ef8a87":"code","b2beeab0":"code","67d6b579":"code","67b54fc2":"code","2c5e2c61":"code","6d725d41":"code","7f0f9472":"code","d35dcf58":"code","e0342f83":"code","113d5aee":"code","1e0d20e8":"code","a1615edb":"code","e543209b":"code","d2d8bdf2":"code","ce6516ac":"code","01532a20":"code","77820ca9":"code","3587a763":"code","355873c7":"code","20bfb599":"code","c1b02a67":"code","4d30fc3f":"code","6b4d123b":"code","7b933a30":"code","0e218367":"code","980ba9b0":"code","ca789909":"code","1e7dc880":"code","ef927d4d":"code","cbc29153":"code","b42ee08f":"code","6aa7dae9":"code","9f4ea82e":"code","081f55ea":"code","90e2d8e6":"code","5e1f5d70":"code","2cb84914":"code","994076c5":"code","d34e7178":"code","7566b4df":"code","77d6bd7b":"code","4dd4d448":"code","df2552ed":"code","c945a182":"code","7e0fe9a1":"code","f8963703":"code","bbf6eb4f":"code","57d06afb":"code","39f12cff":"code","1b8f8a61":"code","fb74c7a5":"code","180c43d3":"code","dde12441":"code","79bb89ad":"code","14fd5da5":"code","936127eb":"code","dd8acff0":"code","4b7558cf":"code","08ca0796":"code","0e0e7fbe":"code","7bdb755b":"code","668234bd":"code","c41fe4e9":"code","4deb3116":"code","bfb8a53a":"code","f6c65c55":"code","ba44ef81":"code","6b92c5a4":"code","05128e2a":"code","461bf9f5":"code","9736b24c":"code","12c3c5f0":"code","1e5aa02e":"code","8a2984c4":"code","ee865703":"code","81795842":"code","a4a2adbb":"code","a1464d52":"code","e18610a7":"code","09eef494":"code","5a58627c":"code","e09b30fb":"code","4114f2f7":"code","ea93b7e1":"code","538b2c89":"code","e1829522":"code","9d462e27":"code","d1966bd8":"code","a5e96da7":"code","06276707":"code","c78f2309":"code","b7b21fe7":"code","32a49186":"code","72dcb778":"code","c2e199ed":"code","a4c71101":"code","7b9ef709":"code","4d51f23e":"code","2e979295":"code","ae44d40f":"markdown","07c2b907":"markdown","ea9f50fa":"markdown","53009ab0":"markdown"},"source":{"7300847e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport json\nimport os\nfrom tqdm import tqdm,tqdm_notebook\nimport gc\nimport random\n\nfrom collections import Counter\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold, GroupKFold\nfrom sklearn.metrics import cohen_kappa_score, mean_squared_error, confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.preprocessing import normalize\nfrom functools import partial\nimport scipy as sp\nfrom sklearn.preprocessing import LabelEncoder, OrdinalEncoder\nfrom sklearn.utils import shuffle\n\nimport lightgbm as lgb\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom xgboost import plot_importance\nfrom catboost import CatBoostRegressor\nfrom matplotlib import pyplot\nimport shap\nfrom time import time\nfrom scipy import stats\nimport json\nimport xgboost as xgb\nimport lightgbm as lgb\n\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport gc\npd.set_option('max_rows',600)\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","636b41e3":"np.random.seed(42)","cd4c90dd":"train_df = pd.read_csv('..\/input\/data-science-bowl-2019\/train.csv')\ntest_df = pd.read_csv('..\/input\/data-science-bowl-2019\/test.csv')\ntrain_labels_df = pd.read_csv('..\/input\/data-science-bowl-2019\/train_labels.csv')\nspecs_df = pd.read_csv('..\/input\/data-science-bowl-2019\/specs.csv')\nsample_submission_df = pd.read_csv('..\/input\/data-science-bowl-2019\/sample_submission.csv')","c3884c42":"train_df = train_df.loc[train_df['installation_id'].isin(set(train_labels_df['installation_id']))]","609bee68":"train_df['title'] = train_df['title'].str.replace(',','')\ntest_df['title'] = test_df['title'].str.replace(',','')","2749c604":"train_df['title_eventcode'] = train_df['title'] + '_' + train_df['event_code'].apply(str)\ntest_df['title_eventcode'] = test_df['title'] + '_' + test_df['event_code'].apply(str)","92175eda":"train_df['timestamp'] = pd.to_datetime(train_df['timestamp'])\ntest_df['timestamp'] = pd.to_datetime(test_df['timestamp'])","aa35cca8":"train_df.head()","4644ee59":"len(list(set(train_df['title_eventcode'].values)))","49eaedda":"title_eventcodes = list(set(train_df['title_eventcode'].values))\ntitles = train_df['title'].unique()\nassessments = [title for title in titles if 'Assessment' in title]\nevent_codes = train_df['event_code'].unique()\ngames = train_df.loc[train_df['type']=='Game']['title'].unique()\nactivities = train_df.loc[train_df['type']=='Activity']['title'].unique()","15a0d646":"def calculate_accuracy_group(true_attempts, false_attempts):\n    accuracy = true_attempts\/(true_attempts+false_attempts) if true_attempts + false_attempts > 0 else 0   \n    if accuracy == 0:\n        accuracy_group = 0\n    elif accuracy == 1:\n        accuracy_group = 3\n    elif accuracy == 0.5:\n        accuracy_group = 2\n    else:\n        accuracy_group = 1\n    return accuracy_group","3df8e2b3":"MAX_TIME_VAL = 9999999","36ef8a87":"def feature_extractor(user_data, test=False):\n    features_list = []\n    title_eventcounts = {titlecode:0 for titlecode in title_eventcodes}\n    title_counts = {title:0 for title in titles}\n    assessment_times = {assessment + '_pass_total_time':0 for assessment in assessments}\n    assessment_times.update({assessment + '_fail_total_time':0 for assessment in assessments})\n    assessment_counts = {assessment + '_pass_count':0 for assessment in assessments}\n    assessment_counts.update({assessment + '_fail_count':0 for assessment in assessments})\n    assessment_false_steps_count = {assessment + '_false_steps_count':0 for assessment in assessments}\n    assessment_last_false_steps_count = {assessment + '_last_false_steps_count':0 for assessment in assessments}\n    assessment_min_times = {assessment + '_pass_min_time':MAX_TIME_VAL for assessment in assessments}\n    assessment_min_times.update({assessment + '_fail_min_time':MAX_TIME_VAL for assessment in assessments})\n    assessment_max_times = {assessment + '_pass_max_time':0 for assessment in assessments}\n    assessment_max_times.update({assessment + '_fail_max_time':0 for assessment in assessments})\n    assessment_accuracy_group_counts = {'accuracy_group_count_'+str(i):0 for i in range(4)}\n    assessment_last_accuracy = {assessment + '_last_accuracy_group': -1 for assessment in assessments}\n    assessment_accuracy_group_last = -1\n    assessment_correct_count = 0\n    assessment_false_count = 0\n    event_codes_count = {str(code): 0 for code in event_codes}\n    games_counter = {game + '_played_count':0 for game in games}\n    game_times = {game + '_total_time':0 for game in games}\n    game_min_times = {game + '_min_time':MAX_TIME_VAL for game in games}\n    game_max_times = {game + '_max_time':0 for game in games}\n    activities_counter = {game + '_played_count':0 for game in activities}\n    activity_times = {activity + '_total_time':0 for activity in activities}\n    activity_min_times = {activity + '_min_time':MAX_TIME_VAL for activity in activities}\n    activity_max_times = {activity + '_max_time':0 for activity in activities}\n    first_session_is_welcome = None\n    session_count = 0\n    durations = []\n    game_false_steps_count = {game + '_false_steps_count':0 for game in games}\n    game_round_max = {game + '_round_max':0 for game in games}\n    game_round_total = {game + '_round_total':0 for game in games}\n    game_false_steps_avg_per_round = {game + '_false_steps_avg_per_round':0 for game in games}\n    game_time_avg_per_round = {game + '_time_avg_per_round':0 for game in games}\n    game_last_false_steps_count = {game + '_last_false_steps_count':0 for game in games}\n    game_last_rounds = {game + '_last_rounds':0 for game in games}\n    game_last_false_steps_avg_per_round = {game + '_last_false_steps_avg_per_round':0 for game in games}\n    \n    installation_id = user_data.iloc[0]['installation_id']\n    \n    for game_session, session in user_data.groupby('game_session', sort=False):\n        session_title = session.iloc[0]['title']\n        session_type = session.iloc[0]['type']\n        session_time = session.iloc[-1]['game_time']\n        session_world = session.iloc[0]['world']\n        \n        if first_session_is_welcome is None:\n                if session_title == 'Welcome to Lost Lagoon!':\n                    first_session_is_welcome = True\n                else:\n                    first_session_is_welcome = False\n\n        if session.iloc[0]['type']=='Assessment':\n            features = {}\n            assessment_avg_times = {assessment + '_pass_avg_time':0 for assessment in assessments}\n            assessment_avg_times.update({assessment + '_fail_avg_time':0 for assessment in assessments})\n            features['installation_id'] = installation_id\n            features['game_session'] = game_session\n            features['assessment_title'] = session_title\n            features['assessment_world'] = session_world\n            features.update(title_eventcounts.copy())\n            features.update(title_counts.copy())\n            features['first_session_is_welcome'] = first_session_is_welcome        \n            features['session_count_so_far'] = session_count\n            \n            for assessment in assessments:\n                pass_count = assessment_counts[session_title+'_pass_count']\n                fail_count = assessment_counts[session_title+'_fail_count']\n                pass_total_time = assessment_times[session_title+'_pass_total_time']\n                fail_total_time = assessment_times[session_title+'_fail_total_time']\n                \n                pass_avg_time = pass_total_time \/ pass_count if pass_count > 0 else 0\n                fail_avg_time = fail_total_time \/ fail_count if fail_count > 0 else 0\n                assessment_avg_times[session_title+'_pass_avg_time'] = pass_avg_time\n                assessment_avg_times[session_title+'_fail_avg_time'] = fail_avg_time\n            features.update(assessment_avg_times.copy())   \n            features.update(assessment_min_times.copy())\n            features.update(assessment_max_times.copy())\n            features.update(assessment_accuracy_group_counts.copy())\n            features['accuracy_group_last'] = assessment_accuracy_group_last\n            features['assessment_true_attempts_count'] = assessment_correct_count\n            features['assessment_false_attempts_count'] = assessment_false_count\n            features['assessment_count_total'] = assessment_correct_count + assessment_false_count\n            features['accumulated_accuracy_group'] = calculate_accuracy_group(assessment_correct_count, assessment_false_count)\n            features.update(event_codes_count.copy())\n            features.update(assessment_last_accuracy.copy())\n            features.update(assessment_false_steps_count.copy())\n            features.update(assessment_last_false_steps_count.copy())\n            features.update(game_false_steps_count.copy())\n            features.update(game_round_max.copy())\n            features.update(game_round_total.copy())\n            \n            \n            if len(durations) == 0:\n                features['duration_mean'] = 0\n            else:\n                features['duration_mean'] = np.mean(durations)\n            \n            complete_code = 4100\n            if session.iloc[0]['title']=='Bird Measurer (Assessment)':\n                complete_code = 4110\n            all_attempts = session.loc[session['event_code']==complete_code]['event_data']\n            true_attempts = all_attempts.str.contains('true').sum()\n            false_attempts = all_attempts.str.contains('false').sum()\n            \n            accuracy_group = calculate_accuracy_group(true_attempts, false_attempts)\n            features['accuracy_group'] = accuracy_group\n            \n            all_attempts = session.loc[session['event_code']==complete_code, ['event_data', 'game_time']]\n            all_attempts['time_taken'] = all_attempts['game_time'].diff()\n            all_attempts.fillna(0,inplace=True)\n            true_attempts = all_attempts[all_attempts['event_data'].str.contains('true')]\n            false_attempts = all_attempts[all_attempts['event_data'].str.contains('false')]\n            assessment_times[session_title+'_pass_total_time'] += true_attempts['time_taken'].sum()\n            assessment_times[session_title+'_fail_total_time'] += false_attempts['time_taken'].sum()\n            assessment_counts[session_title+'_pass_count'] += true_attempts.shape[0]\n            assessment_counts[session_title+'_fail_count'] += false_attempts.shape[0]\n            \n            min_pass_time = true_attempts['time_taken'].min() if true_attempts.shape[0] > 0 else MAX_TIME_VAL\n            max_pass_time = true_attempts['time_taken'].max() if true_attempts.shape[0] > 0 else 0\n            min_fail_time = false_attempts['time_taken'].min() if false_attempts.shape[0] > 0 else MAX_TIME_VAL\n            max_fail_time = false_attempts['time_taken'].max() if false_attempts.shape[0] > 0 else 0\n            \n            assessment_min_times[session_title+'_pass_min_time'] = min(assessment_min_times[session_title+'_pass_min_time'], min_pass_time)\n            assessment_min_times[session_title+'_fail_min_time'] = min(assessment_min_times[session_title+'_fail_min_time'], min_fail_time)\n            assessment_max_times[session_title+'_pass_max_time'] = max(assessment_max_times[session_title+'_pass_max_time'], max_pass_time)\n            assessment_max_times[session_title+'_fail_max_time'] = max(assessment_max_times[session_title+'_fail_max_time'], max_fail_time)\n        \n            \n            assessment_accuracy_group_counts['accuracy_group_count_'+str(accuracy_group)] += 1\n            assessment_accuracy_group_last = accuracy_group\n            assessment_correct_count += true_attempts.shape[0]\n            assessment_false_count += false_attempts.shape[0]\n            \n            assessment_last_accuracy[session_title+'_last_accuracy_group'] = accuracy_group\n            \n            \n            session_end = session.loc[session['event_code']==complete_code]\n            if session_end.shape[0]>0:\n                session_end_event_count = session_end.iloc[-1]['event_count']\n            else:\n                session_end_event_count = 9999999\n            false_steps = session.loc[(session['event_count']<session_end_event_count) & (session['event_code']!=complete_code) & (session['event_data'].str.contains('\"correct\":false'))].shape[0]\n            assessment_false_steps_count[session_title + '_false_steps_count'] += false_steps\n            assessment_last_false_steps_count[session_title + '_last_false_steps_count'] = false_steps\n            \n            game_avg_times = {game + '_avg_time':0 for game in games}\n            for game in games:\n                total_time = game_times[game+'_total_time']\n                game_played = games_counter[game+'_played_count']\n                game_avg_times[game+'_avg_time'] = total_time\/game_played if game_played > 0 else 0\n                total_rounds = game_round_total[game+'_round_total']\n                game_false_steps_avg_per_round[game+'_false_steps_avg_per_round'] = game_false_steps_count[game+'_false_steps_count'] \/ total_rounds if total_rounds > 0 else 0\n                game_time_avg_per_round[game+'_time_avg_per_round'] = total_time \/ total_rounds if total_rounds > 0 else 0\n                game_last_false_steps_avg_per_round[game+'_last_false_steps_avg_per_round'] = game_last_false_steps_count[game+'_last_false_steps_count'] \/ game_last_rounds[game+'_last_rounds'] if game_last_rounds[game+'_last_rounds'] > 0 else 0\n            \n            features.update(game_min_times.copy())\n            features.update(game_max_times.copy())\n            features.update(game_avg_times.copy())\n            features.update(game_false_steps_avg_per_round.copy())\n            features.update(game_time_avg_per_round.copy())\n            features.update(game_last_false_steps_count.copy())\n            features.update(game_last_rounds.copy())\n            features.update(game_last_false_steps_avg_per_round.copy())\n            \n            \n            activity_avg_times = {activity + '_avg_time':0 for activity in activities}\n            for activity in activities:\n                total_time = activity_times[activity+'_total_time']\n                activity_played = activities_counter[activity+'_played_count']\n                activity_avg_times[activity+'_avg_time'] = total_time\/activity_played if activity_played > 0 else 0\n            features.update(activity_min_times.copy())\n            features.update(activity_max_times.copy())\n            features.update(activity_avg_times.copy())\n            \n            durations.append((session.iloc[-1]['timestamp'] - session.iloc[0]['timestamp']).seconds)\n            \n            if test:\n                features_list.append(features)\n            elif true_attempts.shape[0] + false_attempts.shape[0] > 0:\n                features_list.append(features)\n\n        \n        session_title_event_count = Counter(session['title_eventcode'])\n        for key in session_title_event_count.keys():\n            if key in title_eventcounts.keys():\n                title_eventcounts[key] += session_title_event_count[key]\n        \n        session_event_code_count = Counter(session['event_code'])\n        for key in session_event_code_count.keys():\n            if key in event_codes:\n                event_codes_count[str(key)] += session_event_code_count[key]\n                \n        title_counts[session_title] += 1\n        \n        if session.iloc[0]['type']=='Game':\n            games_counter[session_title + '_played_count'] += 1\n            game_times[session_title + '_total_time'] += session.iloc[-1]['game_time']\n            game_min_times[session_title + '_min_time'] = min(session.iloc[-1]['game_time'], game_min_times[session_title + '_min_time'])\n            game_max_times[session_title + '_max_time'] = max(session.iloc[-1]['game_time'], game_max_times[session_title + '_max_time'])\n            \n            false_steps = session.loc[(session['event_data'].str.contains('\"correct\":false'))].shape[0]\n            game_false_steps_count[session_title + '_false_steps_count'] += false_steps\n            rounds = session['event_data'].map(json.loads).map(lambda x: x['round']).max()\n            game_round_max[session_title+'_round_max'] = max(rounds, game_round_max[session_title+'_round_max'])\n            game_round_total[session_title+'_round_total'] += rounds\n            game_last_false_steps_count[session_title+'_last_false_steps_count'] = false_steps\n            game_last_rounds[session_title+'_last_rounds'] = rounds\n            \n        if session.iloc[0]['type']=='Activity':\n            activities_counter[session_title + '_played_count'] += 1\n            activity_times[session_title + '_total_time'] += session.iloc[-1]['game_time']\n            activity_min_times[session_title + '_min_time'] = min(session.iloc[-1]['game_time'], activity_min_times[session_title + '_min_time'])\n            activity_max_times[session_title + '_max_time'] = max(session.iloc[-1]['game_time'], activity_max_times[session_title + '_max_time'])\n        \n        session_count += 1\n        \n    if test:\n        return features_list[-1]\n    return features_list","b2beeab0":"def get_feature_df(df, test=False):\n    features_list = []\n    for i, (inst_id, user_data) in tqdm(enumerate(df.groupby(['installation_id'], sort=False))):\n        user_features_list = feature_extractor(user_data, test)\n        if test:\n            features_list.append(user_features_list)\n        else:\n            features_list.extend(user_features_list)\n    return pd.DataFrame(features_list)","67d6b579":"reduced_test_df = get_feature_df(test_df, True)","67b54fc2":"reduced_test_df.head()","2c5e2c61":"reduced_train_df = pd.read_csv(\"..\/input\/dsb2019-features-1\/reduced_train.csv\")","6d725d41":"reduced_train_df.shape","7f0f9472":"reduced_train_df.drop([col for col in reduced_train_df.columns if 'quit' in col], axis=1, inplace=True)\nreduced_test_df.drop([col for col in reduced_test_df.columns if 'quit' in col], axis=1, inplace=True)","d35dcf58":"reduced_train_df.shape","e0342f83":"columns_sorted = sorted(reduced_train_df.columns)\nrandom.Random(42).shuffle(columns_sorted)\nreduced_train_df = reduced_train_df.reindex(columns_sorted, axis=1)\nreduced_test_df = reduced_test_df.reindex(columns_sorted, axis=1)","113d5aee":"cols = list(reduced_train_df.columns)\ncols_to_drop = ['accuracy_group', 'installation_id', 'game_session']\nfeatures = list(set(cols) - set(cols_to_drop))\ncategorical_features = ['assessment_title', 'assessment_world', 'first_session_is_welcome']","1e0d20e8":"for category in categorical_features:\n    reduced_train_df[category] = reduced_train_df[category].astype('category')\n    reduced_test_df[category] = reduced_test_df[category].astype('category')","a1615edb":"min_max_features = [col for col in reduced_train_df.columns if 'min_time' in col or 'max_time' in col]","e543209b":"class OptimizedRounder(object):\n    \n    def __init__(self):\n        self.coef_ = 0\n\n    def _kappa_loss(self, coef, X, y):\n        X_p = pd.cut(X, [-np.inf] + list(np.sort(coef)) + [np.inf], labels = [0, 1, 2, 3])\n        return -cohen_kappa_score(y, X_p, weights=\"quadratic\")\n\n    def fit(self, X, y):\n        loss_partial = partial(self._kappa_loss, X=X, y=y)\n        initial_coef = [0.5, 1.5, 2.5]\n        self.coef_ = sp.optimize.minimize(loss_partial, initial_coef, method='nelder-mead')\n\n    def predict(self, X, coef):\n        return pd.cut(X, [-np.inf] + list(np.sort(coef)) + [np.inf], labels = [0, 1, 2, 3])\n\n\n    def coefficients(self):\n        return self.coef_['x']","d2d8bdf2":"dist = Counter(reduced_train_df['accuracy_group'])\nfor k in dist:\n    dist[k] \/= len(reduced_train_df)\n\ndef classify(x, bound=[0.5,1.5,2.5]):\n        if x <= bound[0]:\n            return 0\n        elif x <= bound[1]:\n            return 1\n        elif x <= bound[2]:\n            return 2\n        else:\n            return 3\n        \ndef post_process_pred(pred):\n    acum = 0\n    bound = {}\n    for i in range(3):\n        acum += dist[i]\n        bound[i] = np.percentile(pred, acum * 100)\n    pred = np.array(list(map(lambda x: classify(x, bound), pred)))\n    return pred","ce6516ac":"len(features)","01532a20":"params = {\n    'boosting_type': 'gbdt',\n    'objective': 'regression',\n    'seed': 42,\n    'num_threads': 4,\n    'learning_rate': 0.04,\n    'num_leaves': 61,\n    'max_depth': 22,\n    'lambda_l1': 5,\n    'lambda_l2': 1,\n}","77820ca9":"reduced_train_df = shuffle(reduced_train_df, random_state=42)","3587a763":"folds=5\ngroup_kfold = GroupKFold(n_splits=folds)\ngroups = reduced_train_df['installation_id']\nX = reduced_train_df.drop(cols_to_drop, axis=1)\ny = reduced_train_df['accuracy_group']\n\nqwk_scores = []\nmse_values = []\nmodels = []\npredictions_1 = np.empty((folds,reduced_test_df.shape[0]))\npredictions_1_raw = np.empty((folds,reduced_test_df.shape[0]))\nfold_coefficients_1 = np.empty((folds,3))\ni = 0\n\nfor train_index, test_index in group_kfold.split(X, y, groups):\n    X_train, y_train = X.iloc[train_index], y.iloc[train_index]\n    X_test, y_test = X.iloc[test_index], y.iloc[test_index]\n    \n    fold_indices = pd.read_csv(\"..\/input\/dsb2019cv-1\/train_fold\"+str(i+1)+\"_indices.csv\")\n    X_train_sampled = X_train.loc[fold_indices['0'].values]\n    y_train_sampled = y_train.loc[fold_indices['0'].values]\n    \n    fold_indices = pd.read_csv(\"..\/input\/dsb2019cv-1\/cv_fold\"+str(i+1)+\"_indices.csv\")\n    X_test_sampled = X_test.loc[fold_indices['0'].values]\n    y_test_sampled = y_test.loc[fold_indices['0'].values]\n    \n    lgb_train = lgb.Dataset(X_train, y_train)\n    lgb_eval = lgb.Dataset(X_test_sampled, y_test_sampled)\n    gbm = lgb.train(params,\n                lgb_train,\n                valid_sets=(lgb_train, lgb_eval),\n                verbose_eval=20,\n                num_boost_round=1000,\n                early_stopping_rounds=100)\n    models.append(gbm)\n    \n    pred = gbm.predict(X_train)\n    optR = OptimizedRounder()\n    optR.fit(pred, y_train)\n    coefficients = optR.coefficients()\n    fold_coefficients_1[i,:] = coefficients\n    #y_pred = post_process_pred(pred)\n    y_pred = optR.predict(pred, coefficients)\n    \n    train_qwk_score = cohen_kappa_score(y_train, y_pred, weights=\"quadratic\")\n    train_mse_score = mean_squared_error(y_train, pred)\n    \n  \n    \n    pred = gbm.predict(X_test_sampled)\n    #y_pred = post_process_pred(pred)\n    y_pred = optR.predict(pred, coefficients)\n    \n    val_qwk_score = cohen_kappa_score(y_test_sampled, y_pred, weights=\"quadratic\")\n    val_mse_score = mean_squared_error(y_test_sampled, pred)\n    \n    qwk_scores.append((train_qwk_score, val_qwk_score))\n    mse_values.append((train_mse_score, val_mse_score))\n    \n    print(confusion_matrix(y_test_sampled, y_pred))\n    \n    pred = gbm.predict(reduced_test_df.drop(cols_to_drop, axis=1))\n    y_pred = optR.predict(pred, coefficients)\n    \n    predictions_1[i,:] = y_pred\n    predictions_1_raw[i,:] = pred\n    i += 1","355873c7":"qwk_scores, mse_values","20bfb599":"np.asarray(qwk_scores).mean(axis=0), np.asarray(mse_values).mean(axis=0)","c1b02a67":"del reduced_train_df\ndel reduced_test_df\ndel specs_df\ndel train_labels_df\ndel X\ndel y\ndel X_train\ndel y_train\ndel X_test\ndel y_test\n\ngc.collect()","4d30fc3f":"del lgb_train\ndel lgb_eval\ngc.collect()","6b4d123b":"del X_train_sampled\ndel y_train_sampled\ndel X_test_sampled\ndel y_test_sampled\ngc.collect()","7b933a30":"del groups\ndel gbm\ndel optR\ndel models\ngc.collect()","0e218367":"for i in range(5):\n    sns.distplot(predictions_1[i,:])","980ba9b0":"predictions = predictions_1 #np.concatenate([predictions_1, predictions_2], axis=0)","ca789909":"y_pred = np.apply_along_axis(lambda x: Counter(x).most_common(1)[0][0], 0, predictions)","1e7dc880":"sns.countplot(y_pred)","ef927d4d":"Counter(y_pred)","cbc29153":"train = train_df \nkeep_id=train[train.type=='Assessment'][['installation_id']].drop_duplicates()\ntrain=train.merge(keep_id,on='installation_id',how='inner')\ntrain.timestamp=pd.to_datetime(train.timestamp)","b42ee08f":"del keep_id\ngc.collect()","6aa7dae9":"test = test_df\ntest.timestamp=pd.to_datetime(test.timestamp)","9f4ea82e":"np.random.seed(11)","081f55ea":"user_activity={'Clip':0,'Activity':0,'Game':0,'Assessment':0}\n# title count \ntitles=set(set(train.title.unique()).union(set(test.title.unique())))\n\n# add user activit title count\n# words\nworlds=train.world.value_counts().index\nworld_count =dict(zip(worlds,0*np.arange(len(worlds))))\nuser_activity.update(world_count)\n\nlist_of_event_code= list(set(set(train.event_code.unique()).union(set(test.event_code.unique()))))\nlist_of_event_id= list(set(set(train.event_id.unique()).union(set(test.event_id.unique()))))\nAssessment_titles=list(train[train.type=='Assessment'].title.unique())\n\n\n\ntrain['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), train['title'], train['event_code']))\ntest['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), test['title'], test['event_code']))\n\nall_title_event_code = list(set(train[\"title_event_code\"].unique()).union(test[\"title_event_code\"].unique()))\n\n\nlist_of_user_activities = list(set(train['title'].unique()).union(set(test['title'].unique())))\nlist_of_user_activities\n\nactivities_labels = dict(zip(np.arange(len(list_of_user_activities)), \n                              list_of_user_activities))\nall_session_type=list(train.type.unique())","90e2d8e6":"session_title=list(set(train.title.unique()).union(set(test.title.unique())))\nsession_title_encode=dict(zip(session_title,np.arange(len(session_title))))\nworlds=set(test.world.unique())\nworlds=dict(zip(worlds,np.arange(len(worlds))))","5e1f5d70":"activities_map = dict(zip(list_of_user_activities, np.arange(len(list_of_user_activities))))\ntrain['title'] = train['title'].map(activities_map)\ntest['title'] = test['title'].map(activities_map)","2cb84914":"from sklearn.base import BaseEstimator, TransformerMixin\ndef qwk(a1, a2):\n    \"\"\"\n    Source: https:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/114133#latest-660168\n\n    :param a1:\n    :param a2:\n    :param max_rat:\n    :return:\n    \"\"\"\n    max_rat = 3\n    a1 = np.asarray(a1, dtype=int)\n    a2 = np.asarray(a2, dtype=int)\n\n    hist1 = np.zeros((max_rat + 1, ))\n    hist2 = np.zeros((max_rat + 1, ))\n\n    o = 0\n    for k in range(a1.shape[0]):\n        i, j = a1[k], a2[k]\n        hist1[i] += 1\n        hist2[j] += 1\n        o +=  (i - j) * (i - j)\n\n    e = 0\n    for i in range(max_rat + 1):\n        for j in range(max_rat + 1):\n            e += hist1[i] * hist2[j] * (i - j) * (i - j)\n\n    e = e \/ a1.shape[0]\n\n    return 1 - o \/ e","994076c5":"from functools import partial\nimport scipy as sp\nclass OptimizedRounder(object):\n    \"\"\"\n    An optimizer for rounding thresholds\n    to maximize Quadratic Weighted Kappa (QWK) score\n    # https:\/\/www.kaggle.com\/naveenasaithambi\/optimizedrounder-improved\n    \"\"\"\n    def __init__(self):\n        self.coef_ = 0\n\n    def _kappa_loss(self, coef, X, y):\n        \"\"\"\n        Get loss according to\n        using current coefficients\n        \n        :param coef: A list of coefficients that will be used for rounding\n        :param X: The raw predictions\n        :param y: The ground truth labels\n        \"\"\"\n        X_p = pd.cut(X, [-np.inf] + list(np.sort(coef)) + [np.inf], labels = [0, 1, 2, 3])\n\n        return -qwk(y, X_p)\n\n    def fit(self, X, y):\n        \"\"\"\n        Optimize rounding thresholds\n        \n        :param X: The raw predictions\n        :param y: The ground truth labels\n        \"\"\"\n        loss_partial = partial(self._kappa_loss, X=X, y=y)\n        initial_coef = [1.12, 1.74, 2.225]\n        self.coef_ = sp.optimize.minimize(loss_partial, initial_coef, method='nelder-mead')\n\n    def predict(self, X, coef):\n        \"\"\"\n        Make predictions with specified thresholds\n        \n        :param X: The raw predictions\n        :param coef: A list of coefficients that will be used for rounding\n        \"\"\"\n        return pd.cut(X, [-np.inf] + list(np.sort(coef)) + [np.inf], labels = [0, 1, 2, 3])\n\n\n    def coefficients(self):\n        \"\"\"\n        Return the optimized coefficients\n        \"\"\"\n        return self.coef_['x']","d34e7178":"def update_counters(counter: dict,session, col: str):\n            num_of_session_count = Counter(session[col])\n            for k in num_of_session_count.keys():\n                x = k\n                if col == 'title':\n                    x = activities_labels[k]\n                counter[x] += num_of_session_count[k]\n            return counter","7566b4df":"def get_features(user_sample,test_set=False):\n    # intialized all user activity 0\n    user_activity={_type:0 for _type in all_session_type}\n    \n    \n    #duration in clip Activity Game Assessment\n    durations={_type+'_duration':[] for _type in all_session_type }\n    \n    #  user avg time in \n    user_avg_time={_type+'_avg':0 for _type in all_session_type }\n    user_activity.update(user_avg_time)\n    \n    #  user avg time in \n    user_std_time={_type+'_std':0 for _type in all_session_type }\n    user_activity.update(user_std_time)\n    \n    avg_accuracy_group={'avg_'+title:[] for title in Assessment_titles}\n    \n    \n    # \n    last_accuracy_title = {'acc_' + title: -1 for title in Assessment_titles}\n    last_game_time_title = {'lgt_' + title: 0 for title in Assessment_titles}\n    ac_game_time_title = {'agt_' + title: 0 for title in Assessment_titles}\n    avg_group_title ={'avg_'+title:-1 for title in Assessment_titles}\n    \n    std_group_title ={'std_'+title:-1 for title in Assessment_titles}\n    #\n    ac_true_attempts_title = {'ata_' + title: 0 for title in Assessment_titles}\n    ac_false_attempts_title = {'afa_' + title: 0 for title in Assessment_titles}\n       \n    all_true_attempts_title = {'all_true_' + title: 0 for title in Assessment_titles}\n    all_false_attempts_title = {'all_false_' + title: 0 for title in Assessment_titles}\n   \n    # counts \n    event_code_count: Dict[str, int] = {ev: 0 for ev in list_of_event_code}\n    #event_id_count: Dict[str, int] = {eve: 0 for eve in list_of_event_id}\n    title_event_code_count: Dict[str, int] = {t_eve: 0 for t_eve in all_title_event_code}\n    title_count: Dict[str, int] = {eve: 0 for eve in activities_labels.values()} \n        \n    #Assessment_titles actions\n    Assessment_titles_actions = {'Assessment_' + title+'actions': 0 for title in Assessment_titles}\n    # no of action in each session_type\n    activity_session_actions= {'session_size_' + activity +'actions':0 for activity in ['Clip','Activity','Game','Assessment']}\n\n    #game_max_round={'game_level_max_'+game_type:0 for game_type in session_title_game}\n    varity_features={'event_code_count':0,'title_count':0,'title_event_code_count':0}\n    \n    total_correct=0 # by single user\n    total_incorrect=0 # by single user \n    total_accuracy=0 # total acuracy till session ith\n    counter=0      # no of session\n    accuracy=0    # accuracy in session ith \n    total_accuracy_group=0 # total accuracy before current Assessment\n    total_actions=0 # no of action \n    all_assesment =[] # add detail abount and  befor assesment\n    last_activity=0 # last session type \n    last_activity_title=0 # last session title\n    last_world_name=0\n    all_true=0\n    all_false=0\n    \n    \n    \n    \n    accuracy_groups = {0:0,1:0,2:0,3:0} # user accuracy groups \n    i=0\n   \n    \n    for s_id,session in ((user_sample.groupby('game_session',sort=False))):\n        \n        session_type=session.type.iloc[0]\n        session_title=activities_labels[session.title.iloc[0]]\n        world=session.world.iloc[0]\n        \n        if test_set is True:\n            flag=True\n        else:\n            if len(session)==1:\n                flag=False\n            else:\n                flag=True \n\n                \n        user_activity['session_count']=i\n        i=i+1\n        \n        if session_type=='Assessment' and flag:\n\n            # check all attempts  in session \n            attempts=session[(session['event_code']==4110) | (session['event_code']==4100)]\n            # all true in one session \n            attempts_true=attempts['event_data'].str.contains(\"true\").sum()\n            # all false in one session \n            attempts_false=attempts['event_data'].str.contains(\"false\").sum()\n            \n            # feature genration \n            features=user_activity.copy()\n            features.update(last_accuracy_title.copy())\n            features.update(ac_true_attempts_title.copy())\n            features.update(ac_false_attempts_title.copy())\n            features.update(last_game_time_title.copy())\n            features.update(ac_game_time_title.copy())\n\n            \n            \n            features.update(title_event_code_count.copy())\n            features.update(event_code_count.copy())\n           # features.update(event_id_count.copy())\n            features.update(title_count.copy())\n            features.update(Assessment_titles_actions.copy())\n            features.update(activity_session_actions.copy())\n           #features.update(varity_features.copy())\n            features.update(all_true_attempts_title.copy())\n            features.update(all_false_attempts_title.copy())\n            features.update(avg_group_title.copy())\n            features.update(std_group_title.copy())\n              # game \n            #features.update(game_type_all_true.copy())\n            #features.update(game_type_all_false.copy())\n            #features.update(game_type_all_true_false_ratio.copy())\n            #features.update(game_max_round.copy())\n            \n              \n            variety_features = [('var_event_code', event_code_count),\n                               ('var_title', title_count),\n                               ('var_title_event_code', title_event_code_count)]\n            for name, dict_counts in variety_features:\n                arr = np.array(list(dict_counts.values()))\n                features[name] = np.count_nonzero(arr)\n            \n            \n            # session title  exmple Chest Sorter\n            features['session_title']=session_title\n            # total correct true \n            features['total_correct']=total_correct\n            # total correct falsefeatures.update(last_accuracy_title.copy())\n           \n            features['total_incorrect']=total_incorrect\n            # total_correct is prev all correct + new correct in assesment \n            total_correct+=attempts_true\n            total_incorrect+=attempts_false\n            \n            #total accuracy avg accuray till session i for unique installation_id\n            features['total_accuracy']=total_accuracy\/counter if counter>0 else 0\n            # add new attempts in total counter \n            ac_true_attempts_title['ata_' + session_title] += attempts_true\n            ac_false_attempts_title['afa_' + session_title] += attempts_false\n            \n            all_true=session['event_data'].str.contains(\"true\").sum()\n            all_false=session['event_data'].str.contains(\"false\").sum()\n            \n            all_true_attempts_title['all_true_'+session_title]+=all_true\n            all_false_attempts_title['all_false_'+session_title]+=all_false\n            \n            last_game_time_title['lgt_' + session_title] = session['game_time'].iloc[-1]\n            ac_game_time_title['agt_' + session_title] += session['game_time'].iloc[-1]\n\n            \n            accuracy=attempts_true\/(attempts_true+attempts_false) if \\\n                        (attempts_false+attempts_true)!=0 else 0\n            \n            last_accuracy_title['acc_' + session_title] = accuracy\n            \n            \n            # Assessment_titles actions \n            Assessment_titles_actions['Assessment_'+session_title+'actions']+=len(session)\n            features['total_actions'] = total_actions\n            \n            \n            # summ all accuracy \n            total_accuracy+=accuracy\n            # accuracy group for current session \n            if accuracy==0:\n                features['accuracy_group']=0\n            elif accuracy==1:\n                features['accuracy_group']=3\n            elif accuracy==0.5:\n                features['accuracy_group']=2\n            else:\n                features['accuracy_group']=1     \n                \n            features.update(accuracy_groups)\n            # avg accuracy for all assesemt with this assesment\n            features['total_accuracy_group']=total_accuracy_group\/counter if counter>0 else 0\n\n            \n            total_accuracy_group+=features['accuracy_group']\n            accuracy_groups[features['accuracy_group']]+=1\n            \n            features['world']=world\n            \n            avg_accuracy_group['avg_'+session_title].append(features['accuracy_group'])\n            for title in Assessment_titles:\n                if len(avg_accuracy_group['avg_'+title]) is 0:\n                    continue\n                avg_group_title['avg_'+title]=np.mean(avg_accuracy_group['avg_'+title]) \n                std_group_title['std_'+title]=np.std(avg_accuracy_group['avg_'+title])\n            \n            \n            if test_set:\n                # if tese add assesment\n                all_assesment.append(features)\n            else:\n                # if  assesment check if try or not \n                if (attempts_true+attempts_false)>0:\n                    all_assesment.append(features)\n            \n    \n            \n            # counter for assesment no \n            \n            counter+=1\n        \n          # add user avg time \n        \n        \n        for _type in all_session_type:\n            if len(durations[_type+'_duration']) is 0:\n                continue\n            user_activity[_type+'_avg']=np.mean(durations[_type+'_duration']) \n            user_activity[_type+'_std']=np.std(durations[_type+'_duration']) \n        durations[session_type+'_duration'].append((session.iloc[-1]['timestamp']-session.iloc[0]['timestamp']).total_seconds())      \n           \n \n            \n        #even count, event id count event title code combo count in one session \n        event_code_count = update_counters(event_code_count, session,\"event_code\")\n       #event_id_count = update_counters(event_id_count,session, \"event_id\")\n        title_count = update_counters(title_count,session, 'title')\n        title_event_code_count = update_counters(title_event_code_count,session,'title_event_code')\n        \n        \n        \n        activity_session_actions['session_size_'+session_type+'actions']+=len(session)\n        # total action in till previous session + this session \n        total_actions+=len(session)\n        \n        if last_activity != session_type:\n            # add session activity  type \n            user_activity[session_type]+=1\n            last_activity=session_type    \n    if test_set:\n        return all_assesment[-1]\n    else:\n        return all_assesment","77d6bd7b":"compile_data =[]\nuser_id =[]\nfor i , (ins_id, user_sample) in tqdm_notebook(enumerate(train.groupby('installation_id', sort=False))):\n    sample=get_features(user_sample)\n    compile_data+=sample\n    #assement session  sample user id \n    user_id+=[i]*len(sample)","4dd4d448":"j=i\nfor i, (ins_id, user_sample) in tqdm(enumerate(test.groupby('installation_id', sort=False))):\n    sample=get_features(user_sample)[:-1]\n    compile_data+=sample\n    #assement session  sample user i'],d \n    user_id+=[i+j]*len(sample)","df2552ed":"train_df =pd.DataFrame(compile_data)\ntrain_df.drop(['Clip_avg'],axis=1,inplace=True)\ntrain_df.drop(['Clip_std'],axis=1,inplace=True)","c945a182":"train_df.head()","7e0fe9a1":"train_df.columns=[\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in train_df.columns]\ntrain_df=train_df[sorted([\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in train_df.columns])]\nzero_col=(train_df.sum()==0).values\ntrain_df.columns[zero_col]","f8963703":"train_df.drop(train_df.columns[zero_col],axis=1,inplace=True)\ntrain_df=train_df[sorted(train_df.columns)]\nsession_title_encode=dict(zip(session_title,np.arange(len(session_title))))\ntrain_df.session_title = train_df.session_title.map(session_title_encode)\ntrain_df.world=train_df.world.map(worlds)","bbf6eb4f":"train_df['user_id']=user_id","57d06afb":"a0 = 1.12\na1 = 1.74\na2 = 2.225","39f12cff":"def Cappa(y_pred, train_data,eps=1e-5):\n    labels=train_data.get_label()\n    \n    y_pred[y_pred <= a0] = 0\n    y_pred[np.where(np.logical_and(y_pred > a0, y_pred <= a1))] = 1\n    y_pred[np.where(np.logical_and(y_pred > a1, y_pred <= a2))] = 2\n    y_pred[y_pred > a2] = 3\n    return 'cappa',1-cohen_kappa_score(labels, y_pred,weights='quadratic'), False","1b8f8a61":"np.random.seed(10)","fb74c7a5":"params = {\n        'colsample_bytree':0.9839376346182411,\n        'feature_fraction': 0.8637232338991787,\n        'gamma': 0.024799499154065652,\n        'in_child_weight': 1.882771434364163,\n        'learning_rate': 0.02,\n        'max_depth': 6,\n        'reg_alpha': 1.99440604517944,\n        'reg_lambda': 1.9731522286720549,\n        'subsample': 0.5538619922076616,\n        'random_state' :7,\n         'nthread ':-1,\n        'objective':'reg:squarederror',\n        'n_estimators':500\n    }","180c43d3":"folds = 4\ncoefficients=[]\ng_kf = GroupKFold(n_splits=folds)\noutputs =[]\nfold_coefficients_2 = np.empty((folds*2,3))\n\nmodels = []\nj=0\nfor train_index, val_index in g_kf.split(train_df, train_df['accuracy_group'],train_df['user_id']): \n    \n    train_X = train_df.iloc[train_index]\n    train_X,train_y =  train_X.drop(['user_id','accuracy_group'],axis=1),train_X['accuracy_group']\n    \n    \n    for i in range(2):\n        val_X = train_df.iloc[val_index]\n        val_X=val_X.reset_index(drop=['index'])\n        np.random.seed(10+i*10)\n        val_X=val_X.loc[np.random.permutation(len(val_X))]\n        val_X=val_X.groupby('user_id', group_keys=False).apply(lambda df: df.sample(1,replace=True,random_state=10+i*30))\n        \n        val_X,val_y = val_X.drop(['user_id','accuracy_group'],axis=1),val_X['accuracy_group']\n        print(val_y.value_counts())\n        \n        train_set = xgb.DMatrix(train_X, train_y)\n        val_set = xgb.DMatrix(val_X, val_y)\n        model_xgb=xgb.train(params, train_set, \n                         num_boost_round=5000, evals=[(train_set, 'train'), (val_set, 'val')], \n                         verbose_eval=30, early_stopping_rounds=100)\n\n        pred=model_xgb.predict(train_set)\n        optR = OptimizedRounder()\n        optR.fit(pred.reshape(-1,), train_y)\n        coefficients.append(optR.coefficients())\n        fold_coefficients_2[j,:] = optR.coefficients()\n\n        a0=coefficients[j][0]\n        a1=coefficients[j][1]\n        a2=coefficients[j][2]\n\n        y_pred=model_xgb.predict(val_set)\n        y_pred[y_pred <= a0] = 0\n        y_pred[np.where(np.logical_and(y_pred > a0, y_pred <= a1))] = 1\n        y_pred[np.where(np.logical_and(y_pred > a1, y_pred <= a2))] = 2\n        y_pred[y_pred > a2] = 3\n        expected_y=val_y\n        #a0,a1,a2=0.5,1.5,2.5\n        print('---------------------------cappa-value------------------------')\n        value=cohen_kappa_score(expected_y,y_pred,weights='quadratic')\n        outputs.append(value)\n        print(value)\n        print('----------------------classification_report-------------------')\n        print(metrics.classification_report(expected_y, y_pred))\n        print('--------------------------confusion_matrix--------------------')\n        print(metrics.confusion_matrix(expected_y, y_pred))\n        print('--------------------------------------------------------------')\n        models.append(model_xgb)\n        j=j+1","dde12441":"print(outputs)\nprint(sum(outputs)\/folds\/2)","79bb89ad":"fold_coefficients_2","14fd5da5":"\npreds = []\nfor i,model in enumerate(models):\n    a0,a1,a2 =coefficients[i][0],coefficients[i][1],coefficients[i][2]\n    train_df['session_title']=train_df['session_title'].astype('int')\n    train_set=xgb.DMatrix(train_df.drop(['user_id','accuracy_group'],axis=1))\n    pred =model.predict(train_set)\n    pred=np.array(pred)\n    pred[pred <= a0] = 0\n    pred[np.where(np.logical_and(pred > a0, pred <= a1))] = 1\n    pred[np.where(np.logical_and(pred > a1, pred <= a2))] = 2\n    pred[pred > a2] = 3\n    preds.append(pred)\n    \nresult=np.array(preds).T\npred=[]\nfor i in range(result.shape[0]):\n    test_list =list(result[i,:]) \n    res = max(set(test_list), key = test_list.count) \n    pred.append(res)\ncohen_kappa_score(train_df['accuracy_group'],pred,weights='quadratic')","936127eb":"train_df['accuracy_group'].value_counts().plot.bar()","dd8acff0":"print(pred.count(3))\nprint(pred.count(0))\nprint(pred.count(1))\nprint(pred.count(2))","4b7558cf":"counts=[(i,pred.count(i)) for i in set(pred)]\nlabels, ys = zip(*counts)\nxs = np.arange(len(labels)) \nwidth = 0.4\nfig = plt.figure()                                                               \nax = fig.gca()  #get current axes\nax.bar(xs, ys, width, align='center')","08ca0796":"ax=xgb.plot_importance(model_xgb,max_num_features=60,importance_type='gain')\nfig=ax.figure\nfig.set_size_inches(8, 10)","0e0e7fbe":"ax=xgb.plot_importance(model_xgb,max_num_features=60,importance_type='total_gain')\nfig=ax.figure\nfig.set_size_inches(8, 10)","7bdb755b":"ax=xgb.plot_importance(model_xgb,max_num_features=60,importance_type='weight')\nfig=ax.figure\nfig.set_size_inches(8, 10)","668234bd":"del model_xgb","c41fe4e9":"new_test = []\nfor ins_id, user_sample in tqdm_notebook(test.groupby('installation_id', sort=False)):\n    a = get_features(user_sample, test_set=True)\n    new_test.append(a)","4deb3116":"X_test = pd.DataFrame(new_test)\n\nX_test.columns=[\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in X_test.columns]\n\nX_test.session_title = X_test.session_title.map(session_title_encode)\nX_test.world=X_test.world.map(worlds)","bfb8a53a":"X_test=X_test[train_df.drop(['user_id','accuracy_group'],axis=1).columns]","f6c65c55":"preds = []\npredictions_2_raw = np.empty((8,X_test.shape[0]))\nfor i,model in enumerate(models):\n    a0,a1,a2= coefficients[i][0],coefficients[i][1],coefficients[i][2]\n    X_test['session_title']=X_test['session_title'].astype('int')\n    test_set=xgb.DMatrix(X_test)\n    pred =model.predict(test_set)\n    predictions_2_raw[i,:] = pred\n    pred=np.array(pred)\n    pred[pred <= a0] = 0\n    pred[np.where(np.logical_and(pred > a0, pred <= a1))] = 1\n    pred[np.where(np.logical_and(pred > a1, pred <= a2))] = 2\n    pred[pred > a2] = 3\n    preds.append(pred)\n    \nresult=np.array(preds).T\npred=[]\nfor i in range(result.shape[0]):\n    test_list =list(result[i,:]) \n    res = max(set(test_list), key = test_list.count) \n    pred.append(res)\npred[:10]","ba44ef81":"result.T.shape","6b92c5a4":"predictions_1_raw.shape, predictions_2_raw.shape","05128e2a":"luffy_predictions = np.asarray(preds).copy()\nluffy_predictions","461bf9f5":"naruto_predictions = predictions.copy()\nnaruto_predictions","9736b24c":"predictions_combined = np.concatenate([ naruto_predictions,luffy_predictions], axis=0)","12c3c5f0":"\ndel X_test\ndel train_df\ndel models\ndel train_X\ngc.collect()","1e5aa02e":"def read_data():\n\n    print('Reading train_labels.csv file....')\n    train_labels = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv')\n    print('Train_labels.csv file have {} rows and {} columns'.format(train_labels.shape[0], train_labels.shape[1]))\n\n    print('Reading specs.csv file....')\n    specs = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/specs.csv')\n    print('Specs.csv file have {} rows and {} columns'.format(specs.shape[0], specs.shape[1]))\n\n    print('Reading sample_submission.csv file....')\n    sample_submission = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv')\n    print('Sample_submission.csv file have {} rows and {} columns'.format(sample_submission.shape[0], sample_submission.shape[1]))\n    return train_labels, specs, sample_submission\ndef encode_title(train, test, train_labels):\n    # encode title\n    train['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), train['title'], train['event_code']))\n    test['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), test['title'], test['event_code']))\n    all_title_event_code = list(set(train[\"title_event_code\"].unique()).union(test[\"title_event_code\"].unique()))\n    # make a list with all the unique 'titles' from the train and test set\n    list_of_user_activities = list(set(train['title'].unique()).union(set(test['title'].unique())))\n    # make a list with all the unique 'event_code' from the train and test set\n    list_of_event_code = list(set(train['event_code'].unique()).union(set(test['event_code'].unique())))\n    list_of_event_id = list(set(train['event_id'].unique()).union(set(test['event_id'].unique())))\n    # make a list with all the unique worlds from the train and test set\n    list_of_worlds = list(set(train['world'].unique()).union(set(test['world'].unique())))\n    # create a dictionary numerating the titles\n    activities_map = dict(zip(list_of_user_activities, np.arange(len(list_of_user_activities))))\n    activities_labels = dict(zip(np.arange(len(list_of_user_activities)), list_of_user_activities))\n    activities_world = dict(zip(list_of_worlds, np.arange(len(list_of_worlds))))\n    assess_titles = list(set(train[train['type'] == 'Assessment']['title'].value_counts().index).union(set(test[test['type'] == 'Assessment']['title'].value_counts().index)))\n    # replace the text titles with the number titles from the dict\n    train['title'] = train['title'].map(activities_map)\n    test['title'] = test['title'].map(activities_map)\n    train['world'] = train['world'].map(activities_world)\n    test['world'] = test['world'].map(activities_world)\n    train_labels['title'] = train_labels['title'].map(activities_map)\n    win_code = dict(zip(activities_map.values(), (4100*np.ones(len(activities_map))).astype('int')))\n    # then, it set one element, the 'Bird Measurer (Assessment)' as 4110, 10 more than the rest\n    win_code[activities_map['Bird Measurer (Assessment)']] = 4110\n    # convert text into datetime\n    train['timestamp'] = pd.to_datetime(train['timestamp'])\n    test['timestamp'] = pd.to_datetime(test['timestamp'])\n    # hour\n    train['hour'] = train['timestamp'].dt.hour\n    test['hour'] = test['timestamp'].dt.hour\n    \n    return train, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code\nclip_time = {'Welcome to Lost Lagoon!':19,'Tree Top City - Level 1':17,'Ordering Spheres':61, 'Costume Box':61,\n        '12 Monkeys':109,'Tree Top City - Level 2':25, 'Pirate\\'s Tale':80, 'Treasure Map':156,'Tree Top City - Level 3':26,\n        'Rulers':126, 'Magma Peak - Level 1':20, 'Slop Problem':60, 'Magma Peak - Level 2':22, 'Crystal Caves - Level 1':18,\n        'Balancing Act':72, 'Lifting Heavy Things':118,'Crystal Caves - Level 2':24, 'Honey Cake':142, 'Crystal Caves - Level 3':19,\n        'Heavy Heavier Heaviest':61}\n\ndef cnt_miss(df):\n    cnt = 0\n    for e in range(len(df)):\n        x = df['event_data'].iloc[e]\n        y = json.loads(x)['misses']\n        cnt += y\n    return cnt","8a2984c4":"def get_data(user_sample, test_set=False):\n    '''\n    The user_sample is a DataFrame from train or test where the only one \n    installation_id is filtered\n    And the test_set parameter is related with the labels processing, that is only requered\n    if test_set=False\n    '''\n    # Constants and parameters declaration\n    last_activity = 0\n    \n    user_activities_count = {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n    game_time_dict = {'Clip_gametime':0, 'Game_gametime':0, 'Activity_gametime':0, 'Assessment_gametime':0}\n    Assessment_mean_event_count = 0\n    Game_mean_event_count = 0\n    Activity_mean_event_count = 0\n    mean_game_round = 0\n    mean_game_duration = 0 \n    mean_game_level = 0\n    accumulated_game_miss = 0\n    \n    # new features: time spent in each activity\n    last_session_time_sec = 0\n    accuracy_groups = {0:0, 1:0, 2:0, 3:0}\n    all_assessments = []\n    accumulated_accuracy_group = 0\n    accumulated_accuracy = 0\n    accumulated_correct_attempts = 0 \n    accumulated_uncorrect_attempts = 0\n    accumulated_actions = 0\n    counter = 0\n    time_first_activity = float(user_sample['timestamp'].values[0])\n    durations = []\n    clip_durations = []\n    Activity_durations = []\n    Game_durations = []\n    \n    last_accuracy_title = {'acc_' + title: -1 for title in assess_titles}\n    event_code_count: Dict[str, int] = {ev: 0 for ev in list_of_event_code}\n    event_id_count: Dict[str, int] = {eve: 0 for eve in list_of_event_id}\n    title_count: Dict[str, int] = {eve: 0 for eve in activities_labels.values()} \n    title_event_code_count: Dict[str, int] = {t_eve: 0 for t_eve in all_title_event_code}\n        \n    # last features\n    sessions_count = 0\n    \n    # itarates through each session of one instalation_id\n    for i, session in user_sample.groupby('game_session', sort=False):\n        # i = game_session_id\n        # session is a DataFrame that contain only one game_session\n        \n        # get some sessions information\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]\n        session_title_text = activities_labels[session_title]\n                    \n        if session_type == 'Clip':\n            clip_durations.append((clip_time[activities_labels[session_title]]))\n        \n        if session_type == 'Activity':\n            Activity_durations.append((session.iloc[-1, 2] - session.iloc[0, 2] ).seconds)\n            Activity_mean_event_count = (Activity_mean_event_count + session['event_count'].iloc[-1])\/2.0\n        \n        if session_type == 'Game':\n            Game_durations.append((session.iloc[-1, 2] - session.iloc[0, 2] ).seconds)\n            Game_mean_event_count = (Game_mean_event_count + session['event_count'].iloc[-1])\/2.0\n            \n            game_s = session[session.event_code == 2030]   \n            misses_cnt = cnt_miss(game_s)\n            accumulated_game_miss += misses_cnt\n            \n            try:\n                game_round = json.loads(session['event_data'].iloc[-1])[\"round\"]\n                mean_game_round =  (mean_game_round + game_round)\/2.0\n            except:\n                pass\n\n            try:\n                game_duration = json.loads(session['event_data'].iloc[-1])[\"duration\"]\n                mean_game_duration = (mean_game_duration + game_duration) \/2.0\n            except:\n                pass\n            \n            try:\n                game_level = json.loads(session['event_data'].iloc[-1])[\"level\"]\n                mean_game_level = (mean_game_level + game_level) \/2.0\n            except:\n                pass\n            \n        # for each assessment, and only this kind off session, the features below are processed\n        # and a register are generated\n        if (session_type == 'Assessment') & (test_set or len(session)>1):\n            # search for event_code 4100, that represents the assessments trial\n            all_attempts = session.query(f'event_code == {win_code[session_title]}')\n            # then, check the numbers of wins and the number of losses\n            true_attempts = all_attempts['event_data'].str.contains('true').sum()\n            false_attempts = all_attempts['event_data'].str.contains('false').sum()\n            # copy a dict to use as feature template, it's initialized with some itens: \n            # {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n            features = user_activities_count.copy()\n            features.update(last_accuracy_title.copy())\n            features.update(event_code_count.copy())\n            features.update(event_id_count.copy())\n            features.update(title_count.copy())\n            features.update(title_event_code_count.copy())\n            features.update(last_accuracy_title.copy())\n            # features.update(game_time_dict.copy())\n            \n            features['installation_session_count'] = sessions_count\n            features['hour'] = session['hour'].iloc[-1]\n            features['Assessment_mean_event_count'] = Assessment_mean_event_count\n            features['Game_mean_event_count'] = Game_mean_event_count\n            features['Activity_mean_event_count'] = Activity_mean_event_count\n            features['mean_game_round'] = mean_game_round\n            features['mean_game_duration'] = mean_game_duration\n            features['mean_game_level'] = mean_game_level\n            features['accumulated_game_miss'] = accumulated_game_miss\n            \n            variety_features = [('var_event_code', event_code_count),\n                              ('var_event_id', event_id_count),\n                               ('var_title', title_count),\n                               ('var_title_event_code', title_event_code_count)]\n            \n            for name, dict_counts in variety_features:\n                arr = np.array(list(dict_counts.values()))\n                features[name] = np.count_nonzero(arr)\n                 \n            # get installation_id for aggregated features\n            features['installation_id'] = session['installation_id'].iloc[-1]\n            # add title as feature, remembering that title represents the name of the game\n            features['session_title'] = session['title'].iloc[0]\n            # the 4 lines below add the feature of the history of the trials of this player\n            # this is based on the all time attempts so far, at the moment of this assessment\n            features['accumulated_correct_attempts'] = accumulated_correct_attempts\n            features['accumulated_uncorrect_attempts'] = accumulated_uncorrect_attempts\n            accumulated_correct_attempts += true_attempts \n            accumulated_uncorrect_attempts += false_attempts\n            # the time spent in the app so far\n            if durations == []:\n                features['duration_mean'] = 0\n                features['duration_std'] = 0\n            else:\n                features['duration_mean'] = np.mean(durations)\n                features['duration_std'] = np.std(durations)\n            if clip_durations == []:\n                features['Clip_duration_mean'] = 0\n                features['Clip_duration_std'] = 0\n            else:\n                features['Clip_duration_mean'] = np.mean(clip_durations)\n                features['Clip_duration_std'] = np.std(clip_durations)\n                \n            if Activity_durations == []:\n                features['Activity_duration_mean'] = 0\n                features['Activity_duration_std'] = 0\n            else:\n                features['Activity_duration_mean'] = np.mean(Activity_durations)\n                features['Activity_duration_std'] = np.std(Activity_durations)\n                \n            if Game_durations == []:\n                features['Game_duration_mean'] = 0\n                features['Game_duration_std'] = 0\n            else:\n                features['Game_duration_mean'] = np.mean(Game_durations)\n                features['Game_duration_std'] = np.std(Game_durations)\n            durations.append((session.iloc[-1, 2] - session.iloc[0, 2] ).seconds)\n            Assessment_mean_event_count = (Assessment_mean_event_count + session['event_count'].iloc[-1])\/2.0\n            # the accurace is the all time wins divided by the all time attempts\n            features['accumulated_accuracy'] = accumulated_accuracy\/counter if counter > 0 else 0\n            accuracy = true_attempts\/(true_attempts+false_attempts) if (true_attempts+false_attempts) != 0 else 0\n            accumulated_accuracy += accuracy\n            last_accuracy_title['acc_' + session_title_text] = accuracy\n            # a feature of the current accuracy categorized\n            # it is a counter of how many times this player was in each accuracy group\n            if accuracy == 0:\n                features['accuracy_group'] = 0\n            elif accuracy == 1:\n                features['accuracy_group'] = 3\n            elif accuracy == 0.5:\n                features['accuracy_group'] = 2\n            else:\n                features['accuracy_group'] = 1\n            features.update(accuracy_groups)\n            accuracy_groups[features['accuracy_group']] += 1\n            # mean of the all accuracy groups of this player\n            features['accumulated_accuracy_group'] = accumulated_accuracy_group\/counter if counter > 0 else 0\n            accumulated_accuracy_group += features['accuracy_group']\n            # how many actions the player has done so far, it is initialized as 0 and updated some lines below\n            features['accumulated_actions'] = accumulated_actions\n            \n            # there are some conditions to allow this features to be inserted in the datasets\n            # if it's a test set, all sessions belong to the final dataset\n            # it it's a train, needs to be passed throught this clausule: session.query(f'event_code == {win_code[session_title]}')\n            # that means, must exist an event_code 4100 or 4110\n            if test_set:\n                all_assessments.append(features)\n            elif true_attempts+false_attempts > 0:\n                all_assessments.append(features)\n                \n            counter += 1\n        \n        sessions_count += 1\n        # this piece counts how many actions was made in each event_code so far\n        def update_counters(counter: dict, col: str):\n                num_of_session_count = Counter(session[col])\n                for k in num_of_session_count.keys():\n                    x = k\n                    if col == 'title':\n                        x = activities_labels[k]\n                    counter[x] += num_of_session_count[k]\n                return counter\n            \n        game_time_dict[session_type+'_gametime'] = (game_time_dict[session_type+'_gametime'] + (session['game_time'].iloc[-1]\/1000.0))\/2.0\n        event_code_count = update_counters(event_code_count, \"event_code\")\n        event_id_count = update_counters(event_id_count, \"event_id\")\n        title_count = update_counters(title_count, 'title')\n        title_event_code_count = update_counters(title_event_code_count, 'title_event_code')\n\n        # counts how many actions the player has done so far, used in the feature of the same name\n        accumulated_actions += len(session)\n        if last_activity != session_type:\n            user_activities_count[session_type] += 1\n            last_activitiy = session_type \n\n    # if it't the test_set, only the last assessment must be predicted, the previous are scraped\n    if test_set:\n        return all_assessments[-1]\n    # in the train_set, all assessments goes to the dataset\n    return all_assessments","ee865703":"def get_train_and_test(train, test):\n    compiled_train = []\n    compiled_test = []\n    for i, (ins_id, user_sample) in tqdm(enumerate(train.groupby('installation_id', sort = False)), total = 17000):\n        compiled_train += get_data(user_sample)\n    \n    # add extenal data \n    for i, (ins_id, user_sample) in tqdm(enumerate(test.groupby('installation_id', sort = False)), total = 17000):\n        compiled_train += get_data(user_sample)[:-1]\n    \n    \n    for ins_id, user_sample in tqdm(test.groupby('installation_id', sort = False), total = 1000):\n        test_data = get_data(user_sample, test_set = True)\n        compiled_test.append(test_data)\n        \n        \n        \n    reduce_train = pd.DataFrame(compiled_train)\n    reduce_test = pd.DataFrame(compiled_test)\n    categoricals = ['session_title']\n    return reduce_train, reduce_test, categoricals","81795842":"y_pred_j=[]\nclass Base_Model(object):\n    \n    def __init__(self, train_df, test_df, features, categoricals=[], n_splits=5, verbose=True):\n        self.train_df = train_df\n        self.test_df = test_df\n        self.features = features\n        self.n_splits = n_splits\n        self.categoricals = categoricals\n        self.target = 'accuracy_group'\n        self.cv = self.get_cv()\n        self.verbose = verbose\n        self.params = self.get_params()\n        self.y_pred, self.score, self.model = self.fit()\n        \n    def train_model(self, train_set, val_set):\n        raise NotImplementedError\n        \n    def get_cv(self):\n        cv = StratifiedKFold(n_splits=self.n_splits, shuffle=True, random_state=42)\n        return cv.split(self.train_df, self.train_df[self.target])\n    \n    def get_params(self):\n        raise NotImplementedError\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        raise NotImplementedError\n        \n    def convert_x(self, x):\n        return x\n        \n    def fit(self):\n        oof_pred = np.zeros((len(reduce_train), ))\n        y_pred = np.zeros((len(reduce_test), ))\n        for fold, (train_idx, val_idx) in enumerate(self.cv):\n            x_train, x_val = self.train_df[self.features].iloc[train_idx], self.train_df[self.features].iloc[val_idx]\n            y_train, y_val = self.train_df[self.target][train_idx], self.train_df[self.target][val_idx]\n            train_set, val_set = self.convert_dataset(x_train, y_train, x_val, y_val)\n            model = self.train_model(train_set, val_set)\n            conv_x_val = self.convert_x(x_val)\n            oof_pred[val_idx] = model.predict(conv_x_val).reshape(oof_pred[val_idx].shape)\n            x_test = self.convert_x(self.test_df[self.features])\n            y_pred += model.predict(x_test).reshape(y_pred.shape) \/ self.n_splits\n            y_pred_j.append(model.predict(x_test).reshape(y_pred.shape))\n            print('Partial score of fold {} is: {}'.format(fold, eval_qwk_lgb_regr(y_val, oof_pred[val_idx])[1]))\n        _, loss_score, _ = eval_qwk_lgb_regr(self.train_df[self.target], oof_pred)\n        if self.verbose:\n            print('Our oof cohen kappa score is: ', loss_score)\n        return y_pred, loss_score, model\n","a4a2adbb":"class Lgb_Model(Base_Model):\n    \n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n        return lgb.train(self.params, train_set, valid_sets=[train_set, val_set], verbose_eval=verbosity)\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = lgb.Dataset(x_train, y_train, categorical_feature=self.categoricals)\n        val_set = lgb.Dataset(x_val, y_val, categorical_feature=self.categoricals)\n        return train_set, val_set\n        \n    def get_params(self):\n        params = {'n_estimators':5000,\n                    'boosting_type': 'gbdt',\n                    'objective': 'regression',\n                    'metric': 'rmse',\n                    'subsample': 0.75,\n                    'subsample_freq': 1,\n                    'learning_rate': 0.01,\n                    'feature_fraction': 0.9,\n                    'max_depth': 15,\n                    'lambda_l1': 1,  \n                    'lambda_l2': 1,\n                    'early_stopping_rounds': 100\n                    }\n        return params\nclass Xgb_Model(Base_Model):\n    \n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n        return xgb.train(self.params, train_set, \n                         num_boost_round=5000, evals=[(train_set, 'train'), (val_set, 'val')], \n                         verbose_eval=verbosity, early_stopping_rounds=100)\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = xgb.DMatrix(x_train, y_train)\n        val_set = xgb.DMatrix(x_val, y_val)\n        return train_set, val_set\n    \n    def convert_x(self, x):\n        return xgb.DMatrix(x)\n        \n    def get_params(self):\n        params = {'colsample_bytree': 0.8,                 \n            'learning_rate': 0.01,\n            'max_depth': 10,\n            'subsample': 1,\n            'objective':'reg:squarederror',\n            #'eval_metric':'rmse',\n            'min_child_weight':3,\n            'gamma':0.25,\n            'n_estimators':5000}\n\n        return params\n","a1464d52":"train['title'] = train['title'].map(dict(zip(activities_map.values(),activities_map.keys())))\ntest['title'] = test['title'].map(dict(zip(activities_map.values(),activities_map.keys())))\n","e18610a7":"train_labels, specs, sample_submission = read_data()\n# get usefull dict with maping encode\ntrain, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code = encode_title(train, test, train_labels)\n# tranform function to get the train and test set\nreduce_train, reduce_test, categoricals = get_train_and_test(train, test)\nreduce_train.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in reduce_train.columns]\nreduce_test.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in reduce_test.columns]","09eef494":"del train,test","5a58627c":"# call feature engineering function\nfeatures = reduce_train.loc[(reduce_train.sum(axis=1) != 0), (reduce_train.sum(axis=0) != 0)].columns # delete useless columns\nfeatures = [x for x in features if x not in ['accuracy_group', 'installation_id']]","e09b30fb":"to_exclude = [] \najusted_test = reduce_test.copy()\nfor feature in ajusted_test.columns:\n    if feature not in ['accuracy_group', 'installation_id', 'accuracy_group', 'session_title']:\n        data = reduce_train[feature]\n        train_mean = data.mean()\n        data = ajusted_test[feature] \n        test_mean = data.mean()\n        try:\n            error = stract_hists(feature, adjust=True)\n            ajust_factor = train_mean \/ test_mean\n            if ajust_factor > 10 or ajust_factor < 0.1:# or error > 0.01:\n                to_exclude.append(feature)\n                print(feature, train_mean, test_mean, error)\n            else:\n                ajusted_test[feature] *= ajust_factor\n        except:\n            to_exclude.append(feature)\n            print(feature, train_mean, test_mean)\n","4114f2f7":"features = [x for x in features if x not in (to_exclude)]\nreduce_train[features].shape","ea93b7e1":"def eval_qwk_lgb_regr(y_true, y_pred):\n    \"\"\"\n    Fast cappa eval function for lgb.\n    \"\"\"\n    dist = Counter(reduce_train['accuracy_group'])\n    for k in dist:\n        dist[k] \/= len(reduce_train)\n    reduce_train['accuracy_group'].hist()\n    \n    acum = 0\n    bound = {}\n    for i in range(3):\n        acum += dist[i]\n        bound[i] = np.percentile(y_pred, acum * 100)\n\n    def classify(x):\n        if x <= bound[0]:\n            return 0\n        elif x <= bound[1]:\n            return 1\n        elif x <= bound[2]:\n            return 2\n        else:\n            return 3\n\n    y_pred = np.array(list(map(classify, y_pred))).reshape(y_true.shape)\n\n    return 'cappa', cohen_kappa_score(y_true, y_pred, weights='quadratic'), True\ndef cohenkappa(ypred, y):\n    y = y.get_label().astype(\"int\")\n    ypred = ypred.reshape((4, -1)).argmax(axis = 0)\n    loss = cohenkappascore(y, y_pred, weights = 'quadratic')\n    return \"cappa\", loss, True\n","538b2c89":"lgb_model = Lgb_Model(reduce_train, ajusted_test, features, categoricals=categoricals)\nfinal_pred = lgb_model.y_pred \n\nfinal_pred=np.array(y_pred_j)","e1829522":"dist = Counter(reduce_train['accuracy_group'])\nfor k in dist:\n    dist[k] \/= len(reduce_train)\nreduce_train['accuracy_group'].hist()\n\nacum = 0\nbound = {}\nfor i in range(3):\n    acum += dist[i]\n    #avg of all model \n    bound[i] = sum([np.percentile(final_pred[0,:], acum * 100) for i in range(5)])\/5\n    print(f'accum {acum} and bound {bound}')\nprint(bound)","9d462e27":"\ndef classify(x):\n    if x <= bound[0]:\n        return 0\n    elif x <= bound[1]:\n        return 1\n    elif x <= bound[2]:\n        return 2\n    else:\n        return 3\n\nfor i in range(5):\n    final_pred[i,:] = np.array(list(map(classify, final_pred[i,:])))\n    ","d1966bd8":"public_predictions = np.asarray(final_pred).copy()\npublic_predictions","a5e96da7":"predictions_combined = np.concatenate([predictions_combined, public_predictions], axis=0)","06276707":"predictions_combined.shape","c78f2309":"def the_judge(x, preds):\n    if Counter(x).most_common(1)[0][1]>=11:\n        return Counter(x).most_common(1)[0][0]\n    else:\n        candidates = (Counter(x).most_common(2)[0][0], Counter(x).most_common(2)[1][0])\n        left_candidate = int(min(candidates[0], candidates[1]))\n        right_candidate = int(max(candidates[0], candidates[1]))\n        left_candidate_vote = 0\n        right_candidate_vote = 0\n        left_boundary_index = left_candidate\n        right_boundary_index = right_candidate - 1\n        left_margin = 0\n        right_margin = 0\n        for i in range(fold_coefficients_1.shape[0]):\n            if x[i]==left_candidate:\n                left_candidate_vote+=1\n                left_margin += (fold_coefficients_1[i,left_boundary_index] - preds[i])\n            elif x[i]==right_candidate:\n                right_candidate_vote+=1\n                right_margin += (preds[i] - fold_coefficients_1[i,right_boundary_index])\n        offset = fold_coefficients_1.shape[0]\n        for i in range(fold_coefficients_2.shape[0]):\n            if x[offset+i]==left_candidate:\n                left_candidate_vote+=1\n                left_margin += (fold_coefficients_2[i,left_boundary_index] - preds[offset+i])\n            elif x[offset+i]==right_candidate:\n                right_candidate_vote+=1\n                right_margin += (preds[offset+i] - fold_coefficients_2[i,right_boundary_index])\n        left_margin_avg = left_margin\/left_candidate_vote if left_candidate_vote > 0 else 0\n        right_margin_avg = right_margin\/right_candidate_vote if right_candidate_vote > 0 else 0\n        \n        if left_margin_avg > right_margin_avg:\n            return left_candidate\n        else:\n            return right_candidate","b7b21fe7":"predictions_raw_combined = np.concatenate([predictions_1_raw, predictions_2_raw], axis=0)","32a49186":"predictions_raw_combined.shape","72dcb778":"y_pred = []\nfor i in range(predictions_combined.shape[1]):\n    y_pred.append(the_judge(predictions_combined[:,i], predictions_raw_combined[:,i]))","c2e199ed":"Counter(y_pred)","a4c71101":"submission =pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv')","7b9ef709":"submission['accuracy_group'] = np.int64(y_pred)\nsubmission","4d51f23e":"submission.to_csv('submission.csv', index=None)\nsubmission.head()","2e979295":"sns.countplot(submission['accuracy_group'])","ae44d40f":"[QWK](https:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/114133)","07c2b907":"3 Model public \nLightgbm Model with 5 folds used","ea9f50fa":"Model 2\n> 1 XGB MODEL with 4  folds and 2 Subfold with (diff seed trucated validation)","53009ab0":"Model 1 by [Jayasooryan K V](https:\/\/www.kaggle.com\/jayasoo)  \nModel 2 by [Aditya kumar](https:\/\/www.kaggle.com\/negi009)    \nModel 3 [public kernal](https:\/\/www.kaggle.com\/fatsaltyfish\/convert-to-regression-feature-test)"}}