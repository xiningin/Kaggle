{"cell_type":{"3d6959e7":"code","8d9e7708":"code","af396539":"code","0dcb477e":"code","a5f45d22":"code","6c0661a9":"code","b943af48":"code","55d56530":"code","7f780d25":"code","46936076":"code","264ff739":"code","3f900f1c":"markdown","3b0a2a97":"markdown","a9db5de4":"markdown"},"source":{"3d6959e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8d9e7708":"# import liberaries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\nimport matplotlib.gridspec as gridspec\nfrom matplotlib import rcParams\nimport seaborn as sns\n\nrcParams.update({'figure.autolayout': True})\n\n%matplotlib notebook\n\nplt.style.use('fivethirtyeight')","af396539":"## import covid-19 datasets\ndf_covid = pd.read_csv(\"\/kaggle\/input\/covid19-in-usa\/us_states_covid19_daily.csv\")\ndf_covid.head()\n\n##import states population\ndf_population = pd.read_csv(\"http:\/\/www2.census.gov\/programs-surveys\/popest\/datasets\/2010-2019\/national\/totals\/nst-est2019-alldata.csv?#\")\ndf_population = df_population[['NAME', 'POPESTIMATE2019']].iloc[5:].rename(columns = {'NAME': 'state name','POPESTIMATE2019':'population'})\ndf_covid.head()\n\n## replace state abbv with full name\ndf_population['state'] = df_population['state name'].map({\n    'Alabama': 'AL',\n    'Alaska': 'AK',\n    'American Samoa': 'AS',\n    'Arizona': 'AZ',\n    'Arkansas': 'AR',\n    'California': 'CA',\n    'Colorado': 'CO',\n    'Connecticut': 'CT',\n    'Delaware': 'DE',\n    'District of Columbia': 'DC',\n    'Florida': 'FL',\n    'Georgia': 'GA',\n    'Guam': 'GU',\n    'Hawaii': 'HI',\n    'Idaho': 'ID',\n    'Illinois': 'IL',\n    'Indiana': 'IN',\n    'Iowa': 'IA',\n    'Kansas': 'KS',\n    'Kentucky': 'KY',\n    'Louisiana': 'LA',\n    'Maine': 'ME',\n    'Maryland': 'MD',\n    'Massachusetts': 'MA',\n    'Michigan': 'MI',\n    'Minnesota': 'MN',\n    'Mississippi': 'MS',\n    'Missouri': 'MO',\n    'Montana': 'MT',\n    'Nebraska': 'NE',\n    'Nevada': 'NV',\n    'New Hampshire': 'NH',\n    'New Jersey': 'NJ',\n    'New Mexico': 'NM',\n    'New York': 'NY',\n    'North Carolina': 'NC',\n    'North Dakota': 'ND',\n    'Northern Mariana Islands':'MP',\n    'Ohio': 'OH',\n    'Oklahoma': 'OK',\n    'Oregon': 'OR',\n    'Pennsylvania': 'PA',\n    'Puerto Rico': 'PR',\n    'Rhode Island': 'RI',\n    'South Carolina': 'SC',\n    'South Dakota': 'SD',\n    'Tennessee': 'TN',\n    'Texas': 'TX',\n    'Utah': 'UT',\n    'Vermont': 'VT',\n    'Virgin Islands': 'VI',\n    'Virginia': 'VA',\n    'Washington': 'WA',\n    'West Virginia': 'WV',\n    'Wisconsin': 'WI',\n    'Wyoming': 'WY'\n})\ndf_population.head()","0dcb477e":"df_covid.columns","a5f45d22":"## clean data and change column name\nmy_data = df_covid.join(df_population.set_index('state'), on = 'state')\nmy_data[my_data['population'].notnull()]\ndata_cleaned = my_data[my_data['population'].notnull()][['date', 'state name', 'population', 'positive', 'death',\n                                                    'totalTestResults', 'deathIncrease', 'positiveIncrease', 'totalTestResultsIncrease']].rename(columns = {\n   'state name':'state', 'positive': 'total_case', 'death':'total_death', 'totalTestResults' : 'total_test', 'deathIncrease' : 'new_death', 'positiveIncrease': 'new_case', 'totalTestResultsIncrease': 'new_test'\n})\ndata_cleaned['date'] = pd.to_datetime(data_cleaned['date'], format='%Y%m%d')\ndata_cleaned = data_cleaned[data_cleaned['total_case']>0 ]\n\n## add metrics per million people\ndata_cleaned['case_per_m'] = data_cleaned['total_case']*1000000\/data_cleaned['population']\ndata_cleaned['death_per_m'] = data_cleaned['total_death']*1000000\/data_cleaned['population']\ndata_cleaned['test_per_m'] = data_cleaned['total_test']*1000000\/data_cleaned['population']\ndata_cleaned.head()","6c0661a9":"top_10_case = data_cleaned[data_cleaned['date'] == '2020-05-10'].sort_values('total_case', ascending = True).iloc[-10:].set_index('state')['total_case']\ntop_10_death = data_cleaned[data_cleaned['date'] == '2020-05-10'].sort_values('total_death', ascending = True).iloc[-10:].set_index('state')['total_death']\ntop_10_test = data_cleaned[data_cleaned['date'] == '2020-05-10'].sort_values('total_test', ascending = True).iloc[-10:].set_index('state')['total_test']\ntop_10_case_per_m = data_cleaned[data_cleaned['date'] == '2020-05-10'].sort_values('case_per_m', ascending = True).iloc[-10:].set_index('state')['case_per_m']\ntop_10_death_per_m = data_cleaned[data_cleaned['date'] == '2020-05-10'].sort_values('death_per_m', ascending = True).iloc[-10:].set_index('state')['death_per_m']\ntop_10_test_per_m = data_cleaned[data_cleaned['date'] == '2020-05-10'].sort_values('test_per_m', ascending = True).iloc[-10:].set_index('state')['test_per_m']\n","b943af48":"plt.figure(figsize=(12,10))\n\nax1 = plt.subplot(3,2,1)\nax1.barh(top_10_case.index,top_10_case.values)\nax1.tick_params(size = 5,labelsize = 12)\nplt.xlabel(\"Confirmed Cases\",fontsize=10, axes = ax1)\nplt.title(\"Confirmed Cases\",fontsize=12, axes = ax1)\nax1.grid(alpha=0.5)\n\nax2 = plt.subplot(3,2,2)\nax2.barh(top_10_case_per_m.index,top_10_case_per_m.values)\nax2.tick_params(size = 5,labelsize = 12)\nplt.xlabel(\"Confirmed Cases per million\",fontsize=10, axes = ax2)\nplt.title(\"Confirmed Cases per million\",fontsize=12, axes = ax2)\nax2.grid(alpha=0.5)\n\nax3 = plt.subplot(3,2,3)\nax3.barh(top_10_death.index,top_10_death.values, color = 'grey')\nax3.tick_params(size = 5,labelsize = 12)\nplt.xlabel(\"Deaths\",fontsize=10, axes = ax3)\nplt.title(\"Deaths\",fontsize=12, axes = ax3)\nax3.grid(alpha=0.5)\n\nax4 = plt.subplot(3,2,4)\nax4.barh(top_10_death_per_m.index,top_10_death_per_m.values, color = 'grey')\nax4.tick_params(size = 5,labelsize = 12)\nplt.xlabel(\"Deaths per million\",fontsize=10, axes = ax4)\nplt.title(\"Deaths per million\",fontsize=12, axes = ax4)\nax4.grid(alpha=0.5)\n\nax5 = plt.subplot(3,2,5)\nax5.barh(top_10_test.index,top_10_test.values, color = 'orange')\nax5.tick_params(size = 5,labelsize = 12)\nplt.xlabel(\"Tests\",fontsize=10, axes = ax5)\nplt.title(\"Tests\",fontsize=12, axes = ax5)\nax5.grid(alpha=0.5)\n\nax6 = plt.subplot(3,2,6)\nax6.barh(top_10_test_per_m.index,top_10_test_per_m.values, color = 'orange')\nax6.tick_params(size = 5,labelsize = 12)\nplt.xlabel(\"Tests per million\",fontsize=10, axes = ax6)\nplt.title(\"Tests  per million\",fontsize=12, axes = ax6)\nax6.grid(alpha=0.5)\nplt.show()","55d56530":"data_tracker = data_cleaned[data_cleaned['total_case']>=100]\ndata_tracker.head()","7f780d25":"data_tracker['days'] = data_tracker.groupby('state')['date'].apply(lambda x: x - min(x)).dt.days","46936076":"data_tracker['days']\n","264ff739":"fig = plt.figure(figsize=(10,8))\nax1 = fig.add_subplot(111)\n\nax1.plot(data_tracker[data_tracker['state'] == 'New York'][\"days\"], data_tracker[data_tracker['state'] == 'New York'][\"total_case\"],'-')\nax1.plot(data_tracker[data_tracker['state'] == 'California'][\"days\"], data_tracker[data_tracker['state'] == 'California'][\"total_case\"],'-')\nax1.plot(data_tracker[data_tracker['state'] == 'Florida'][\"days\"], data_tracker[data_tracker['state'] == 'Florida'][\"total_case\"],'-')\nax1.plot(data_tracker[data_tracker['state'] == 'Texas'][\"days\"], data_tracker[data_tracker['state'] == 'Texas'][\"total_case\"],'-')\nax1.plot(data_tracker[data_tracker['state'] == 'Pennsylvania'][\"days\"], data_tracker[data_tracker['state'] == 'Pennsylvania'][\"total_case\"],'-')\nax1.set_yscale('log')\nfrom matplotlib.ticker import ScalarFormatter\nfor axis in [ax1.xaxis, ax1.yaxis]:\n    axis.set_major_formatter(ScalarFormatter())\nax1.legend(['New York', 'California', 'Florida', 'Texas', 'Pennsylvania'])\nax1.set_xlabel('Number of days since 100 cases')\nax1.set_ylabel('Confirmed cases')\nax1.set_title('Confirmed cases')\nplt.show()","3f900f1c":"## Analysis and Visualization\n### Top 10 States of case, death, tests in total vs. per million people","3b0a2a97":"## Import and Clean Data","a9db5de4":"### COVID-19 trajectory tracker\n#### In this part we will show only highlight top 5 states in terms of population: California, Texas, Florida, New York, and Pennsylvania"}}