{"cell_type":{"71cf2b1d":"code","af6a1f15":"code","071bf3d4":"code","838a133c":"code","77c18a6a":"code","5e1bbe0e":"code","311eeaac":"code","99dfc31e":"code","eae71aff":"code","2166b429":"code","1db4d55d":"code","236932f9":"code","12f5c2ac":"code","f67226ac":"code","629938c6":"code","411b2cf8":"code","54827f1e":"code","4796ad1d":"code","7aa48853":"markdown","a517728d":"markdown","4f402e7c":"markdown"},"source":{"71cf2b1d":"import covid19_tools as cv19\nimport pandas as pd\nimport numpy as np\nimport re\nimport html\nfrom IPython.display import HTML\n\npd.set_option('display.max_columns', 500)\n\nMETADATA_FILE = '..\/input\/CORD-19-research-challenge\/metadata.csv'\n# Load metadata\nmeta = cv19.load_metadata(METADATA_FILE)\n# Add Covid-19 disease tag so we can filter out non-Covid19 papers\nmeta, _ = cv19.add_tag_covid19(meta)\n# Load full text\nfull_text = cv19.load_full_text(meta[meta.tag_disease_covid19],\n                                '..\/input\/CORD-19-research-challenge\/')\n# Convert full text to a DataFrame\ndf = pd.DataFrame(full_text)","af6a1f15":"odds_re = re.compile(r'\\bOR\\b')\nodds_number_re = re.compile(r'\\bOR\\b.{0,10}?(\\d+\\.\\d+)')","071bf3d4":"# Run on an example string\nor_example = 'Example string containing OR = 3.45, and some other text.'\nodds_number_re.findall(or_example)","838a133c":"ci_numbers_re = re.compile(r'\\bCI\\s?\\:?\\,?=?\\s?(\\d+\\.\\d+).{0,5}?(\\d+\\.\\d+)')","77c18a6a":"# Test on an example\nci_numbers_re.findall('OR = 4.6 and CI = 3.45 to 4.3')","5e1bbe0e":"meta.head()","311eeaac":"# list for storing extracted values and key passages\ndf_list = [] # will be converted to a Pandas DataFrame at the end\noutput_html = ''\nprev_paper = ''\npaper_count = 1\nfor row in df.itertuples():\n    paper_id = row.paper_id\n    bt = row.body_text\n    for item in bt:\n        for sentence in item['text'].split('. '):\n            temp_dict = {'paper_id': paper_id}\n            # Check for odds ratio text\n            if len(odds_re.findall(sentence)) > 0:\n                # Check for a float in the sentence\n                or_numbers = odds_number_re.findall(sentence)\n                if len(or_numbers) > 0:\n                    if paper_id != prev_paper:\n                        prev_paper = paper_id\n                        if paper_id.startswith('PMC'):\n                            temp_meta = meta[meta.pmcid == paper_id]\n                        else:\n                            temp_meta = meta[meta.sha == paper_id]\n                        title = temp_meta.title.values[0]\n                        doi = temp_meta.doi.values[0]\n                        authors = temp_meta.authors.values[0]\n                        output_html += f'<b>{paper_count}. {html.escape(title)}<\/b><br>'\n                        output_html += f'<a href=\"{doi}\">{doi}<\/a><br>'\n                        output_html += f'Authors: {authors}<br>'\n                        paper_count += 1\n                    or_numbers = [float(orn) for orn in or_numbers]\n                    ci_numbers = ci_numbers_re.findall(sentence)\n                    ci_numbers = [(float(cin[0]), float(cin[1])) for cin in ci_numbers]\n                    output_html += html.escape(sentence) + '<br><br><i>Extracted odds ratios:<\/i><ul>'\n                    for orn in or_numbers:\n                        output_html += f'<li>{orn}<\/li>'\n                    output_html += '<\/ul>'\n                    if len(ci_numbers) > 0:\n                        output_html += '<i>Extracted confidence intervals:<\/i><ul>'\n                        for cin in ci_numbers:\n                            output_html += f'<li>{cin[0]} - {cin[1]}<\/li>'\n                        output_html += '<\/ul>'\n                    if len(ci_numbers) < len(or_numbers):\n                        for i in range(len(or_numbers) - len(ci_numbers)):\n                            ci_numbers += [(None, None)]\n                    if len(or_numbers) < len(ci_numbers):\n                        for i in range(len(ci_numbers) - len(or_numbers)):\n                            or_numbers += [None]\n                    temp_dict['or_numbers'] = or_numbers\n                    temp_dict['ci_numbers'] = ci_numbers\n                    temp_dict['sentence'] = sentence\n                    df_list.append(pd.DataFrame(temp_dict))\ndisplay(HTML(output_html))","99dfc31e":"extracts_df = pd.concat(df_list).reset_index(drop=True)","eae71aff":"extracts_df.head()","2166b429":"extracts_df['ci_lower'] = extracts_df.ci_numbers.apply(lambda x: x[0])\nextracts_df['ci_upper'] = extracts_df.ci_numbers.apply(lambda x: x[1])\nextracts_df = extracts_df.drop('ci_numbers', axis=1)","1db4d55d":"extracts_df = extracts_df[['paper_id', 'sentence',\n                           'or_numbers',\n                           'ci_lower', 'ci_upper']].rename(columns={'or_numbers': 'odds_ratio'})","236932f9":"extracts_df.head()","12f5c2ac":"# Need to split these because they key into different fields in meta\npmc_extracts_df = extracts_df[extracts_df.paper_id.str.startswith('PMC')].copy()\npdf_extracts_df = extracts_df[~extracts_df.paper_id.str.startswith('PMC')].copy()","f67226ac":"# paper_id -> pmcid\npmc_extracts_df = pmc_extracts_df.merge(meta, left_on='paper_id',\n                                       right_on='pmcid', how='left')","629938c6":"# paper_id -> sha\npdf_extracts_df = pdf_extracts_df.merge(meta, left_on='paper_id',\n                                        right_on='sha', how='left')","411b2cf8":"# Concatenate\nextracts_df = pd.concat((pmc_extracts_df, pdf_extracts_df)).reset_index(drop=True)","54827f1e":"extracts_df.shape","4796ad1d":"extracts_df.to_csv('extracted_odds_ratios.csv', index=False)","7aa48853":"## Extracting Odds Ratios with Regex\n\nThe two regular expressions below search for:\n\n- **odds_re** - `'OR'` surrounded by two _word boundaries_ (`\\b` in regex).\n- **odds_number_re** - `'OR'` as above, followed by a _float_ (e.g. 0.12, 32.1) within 10 characters.\n\nThe second regular expression makes use of the following special characters:\n\n- `.` means match any character\n- `{0,10}` means match previous character (in this case, any character) 0-10 times.\n- `\\d` means a numeric character 0-9\n- `+` means match previous character multiple times\n- `()` around part of the regex means group and extract this section","a517728d":"## Extracting confidence intervals\n\nThe regular expression below extracts a confidence interval. It uses some more special characters:\n\n- `?` means the preceding character is optional\n- `\\s` is a space","4f402e7c":"# CORD-19 Odds Ratio Extraction\n\nThis Notebook shows how to extract Odds Ratios (OR) from the body text of a paper. It builds on the metadata load, full text load, and Covid-19 thematic tagging in https:\/\/www.kaggle.com\/ajrwhite\/covid19-tools (`File` -> `Add utility script` -> `covid19_tools` to use in your own Notebook).\n\nOdds Ratios are typically presented according to fixed conventions, so they can be extracted using regular expressions."}}