{"cell_type":{"d231a0f0":"code","cd8aa0e2":"code","514807cb":"code","895f8f48":"code","5175093d":"code","42c183d0":"code","81fbccd1":"code","92045b7e":"code","95a00f61":"code","75c4c5f1":"code","10ce1e2d":"code","93d9f219":"code","342e3cb2":"code","4af1835f":"code","5d0d92af":"code","9182dfb9":"code","a525ebaa":"code","f9d28e99":"code","9ae433ec":"code","e7efb796":"code","868d912c":"code","920ca257":"code","fc6d857e":"code","91425410":"code","55e87539":"code","58e7623c":"code","383cf069":"code","4e17a5b6":"code","e2e59263":"code","0d791035":"code","b61ae9b9":"code","c1dd9575":"code","87e0ce56":"code","287b130b":"code","a316939d":"code","c939efe0":"code","823f7907":"code","e5a90c8e":"code","f17e5c7c":"code","61cf330f":"code","abd4a924":"code","372e3ab1":"code","48f4fcdf":"code","29795fa7":"code","fe301e24":"code","40c93b31":"code","77192098":"code","e7ea2eff":"code","e0948e04":"code","f745205d":"code","fcd2f212":"code","9f82df6d":"code","e9a8523a":"code","411e8eb7":"code","763a2e22":"code","508e6cdd":"code","5fb72674":"code","0c37458f":"code","edf35f43":"code","23951b32":"code","33ed3863":"code","33d69e52":"code","a2ae77f1":"code","c8016397":"code","bb8df142":"code","7f6365b3":"code","55ca3b48":"code","df3174d5":"code","33264455":"code","3cebb2b7":"code","1e0995f7":"code","db7ab981":"code","794e5f21":"code","d46cb3a3":"code","5cf3cd46":"code","811ef895":"code","a4f118ea":"code","b614e5ba":"code","bd2b8d83":"markdown","a81d7960":"markdown","d5724fb9":"markdown","5eac6902":"markdown","c18ba893":"markdown","264ea0ab":"markdown","f46aa890":"markdown","335c0adb":"markdown","0964df09":"markdown","5a3117a0":"markdown","f34a441f":"markdown","2eb2c49b":"markdown","c5757d97":"markdown","ea02a76a":"markdown","df3b496a":"markdown","cf1401b2":"markdown","5adb2671":"markdown","edc3d98b":"markdown","0f3ec66b":"markdown","45a1a4c0":"markdown","75e4fb55":"markdown","3d755731":"markdown","0d131122":"markdown","e66e3e37":"markdown","9fd14f42":"markdown","2b470e83":"markdown","f0c6e2f6":"markdown","fba71cfd":"markdown"},"source":{"d231a0f0":"## load all the dependencies\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport matplotlib\nmatplotlib.rcParams['figure.figsize']=(20,10)\n\n\nimport warnings \nwarnings.simplefilter('ignore')","cd8aa0e2":"data = pd.read_csv('\/kaggle\/input\/bengaluru-house-price-data\/Bengaluru_House_Data.csv')","514807cb":"data.head()","895f8f48":"# identify the rows and columns of the data \ndata.shape","5175093d":"## Columns \n\ndata.columns","42c183d0":"## area's in the dataset \n\ndata['area_type'].unique()","81fbccd1":"data['area_type'].value_counts()","92045b7e":"data1 = data.drop(['area_type','society','balcony','availability'],axis='columns')","95a00f61":"data1.isnull().sum()","75c4c5f1":"data1.shape","10ce1e2d":"house_data = data1.dropna()\nhouse_data.isnull().sum()","93d9f219":"house_data.shape","342e3cb2":"house_data.dtypes","4af1835f":"house_data.head()","5d0d92af":"house_data['size'].unique()","9182dfb9":"## add the bhk column\nhouse_data['BHK'] = house_data['size'].apply(lambda x: int(x.split(' ')[0]))","a525ebaa":"house_data.head()","f9d28e99":"house_data['BHK'].unique()","9ae433ec":"house_data[house_data.BHK > 20]","e7efb796":"## Examine the total_sqft column\n\nhouse_data['total_sqft'].unique()","868d912c":"## let's try with a function \n\ndef is_float(x):\n   try:\n     float(x)\n   except:\n     return False\n   return True    ","920ca257":"house_data[~house_data['total_sqft'].apply(is_float)].head(12)","fc6d857e":" def convert_sqft_num(x):\n   tokens = x.split('-')\n   if len(tokens) == 2:\n     return(float(tokens[0])+float(tokens[1]))\/2\n   try:\n     return float(x)\n   except:\n     return None\n            ","91425410":"house_data['total_sqft'] = house_data['total_sqft'].apply(convert_sqft_num)","55e87539":"house_data.head()","58e7623c":"house_data.loc[30]","383cf069":"# Creating a new column to find the price per sq-ft\n\nhouse_data['Price_per_sqft'] = house_data['price']*100000\/house_data['total_sqft']\nhouse_data.head()","4e17a5b6":"## let's work on the location column\nhouse_price = house_data.copy()\nhouse_price['location'].unique()","e2e59263":"len(house_price['location'])","0d791035":"## let's check each location in column\n\nhouse_price['location'] = house_price['location'].apply(lambda x: x.strip()) ## remove the spaces \nlocations = house_price.groupby('location')['location'].agg('count').sort_values(ascending=False)","b61ae9b9":"locations","c1dd9575":"## let's check the location is 1 or 10 times \n\nlocations[locations<=10]","87e0ce56":"len(locations[locations<=10])","287b130b":"locations_less_than_10 = locations[locations<=10]\nlocations_less_than_10","a316939d":"##let's put the \"locations_less_than_10\" in name of \"Other\" category..\n\nhouse_price['location'] = house_price.location.apply(lambda x: 'other' if x in locations_less_than_10 else x)","c939efe0":"house_price['location']","823f7907":"house_price.head(10)","e5a90c8e":"## let's check the sq ft area's  as per 1 bedroom consist 300 sqft..\n\nhouse_price[house_price['total_sqft']\/house_price['BHK']<300].head()","f17e5c7c":"house_price.shape","61cf330f":"## remove the outliers \n\nhouse_prices = house_price[~(house_price['total_sqft']\/house_price['BHK']<300)]","abd4a924":"house_prices.shape","372e3ab1":"## let's check the price per sqft column\n\nhouse_prices.Price_per_sqft.describe()","48f4fcdf":"## let's remove outliers in the price_per_sqft\n\n\ndef remove_pps_outliers(df):\n  df_out = pd.DataFrame()\n  for key, subdf in df.groupby('location'):\n    m = np.mean(subdf.Price_per_sqft)\n    st = np.std(subdf.Price_per_sqft)\n    reduced_df = subdf[(subdf.Price_per_sqft>(m-st)) & (subdf.Price_per_sqft<=(m+st))]\n    df_out = pd.concat([df_out, reduced_df],ignore_index=True)\n  return df_out \n\nhouse = remove_pps_outliers(house_prices)   \n","29795fa7":"house.shape","fe301e24":"##check the outliers for the BHK column\n\ndef plot_scatter_chart(df,location):\n  bhk2 = df[(df.location == location) & (df.BHK==2)]\n  bhk3 = df[(df.location == location) & (df.BHK==3)]\n  matplotlib.rcParams['figure.figsize'] = (15,10)\n  plt.scatter(bhk2.total_sqft, bhk2.price, color='blue', label='2 BHK',s =50)\n  plt.scatter(bhk3.total_sqft, bhk3.price, color='red', marker='+',label='3 BHK', s=50)\n  plt.xlabel(\"Total Square Feet Area\")\n  plt.ylabel(\"Total Price\")\n  plt.title(\"Location\")\n  plt.legend() ","40c93b31":"plot_scatter_chart(house,\"Rajaji Nagar\")","77192098":"plot_scatter_chart(house,\"Electronic City Phase II\")","e7ea2eff":"plot_scatter_chart(house,\"Whitefield\")","e0948e04":"def remove_bhk_outliers(df):\n  exclude_indices = np.array([])\n  for location, location_df in df.groupby('location'):\n    bhk_stats = {}\n    for bhk, bhk_df in location_df.groupby('BHK'):\n      bhk_stats[bhk] = {\n          'mean': np.mean(bhk_df.Price_per_sqft),\n          'std':np.std(bhk_df.Price_per_sqft),\n          'count':bhk_df.shape[0]\n      }\n      for bhk, bhk_df in location_df.groupby('BHK'):\n        stats = bhk_stats.get(bhk-1)\n        if stats and stats['count']>5:\n          exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.Price_per_sqft<(stats['mean'])].index.values)\n  return df.drop(exclude_indices,axis='index')        ","f745205d":"houses = remove_bhk_outliers(house)\nplot_scatter_chart(houses, 'Rajaji Nagar')","fcd2f212":"plot_scatter_chart(houses, 'Electronic City Phase II')","9f82df6d":"matplotlib.rcParams['figure.figsize'] = (15,8)\nplt.hist(houses.Price_per_sqft, rwidth=0.8)\nplt.xlabel(\"Price Per Sqaure Feet\")\nplt.ylabel(\"Count\")","e9a8523a":"houses['bath'].unique()","411e8eb7":"houses[house['bath']>10]","763a2e22":"plt.hist(houses.bath, rwidth=0.8)\nplt.xlabel(\"Number of bathrooms\")\nplt.ylabel(\"Count\")","508e6cdd":"houses[houses.bath>10]","5fb72674":"houses[houses.bath>houses.BHK+2]","0c37458f":"price_house = houses[houses.bath<houses.BHK+2]","edf35f43":"price_house.head(2)","23951b32":"## let's drop some columns for the model building \n\nprices =price_house.drop(['size','Price_per_sqft'],axis='columns')\nprices.head()","33ed3863":"dummies = pd.get_dummies(prices.location)\ndummies.head()","33d69e52":"price = pd.concat([prices, dummies.drop('other', axis='columns')], axis='columns')","a2ae77f1":"price.head()","c8016397":"House_data = price.drop('location',axis='columns')","bb8df142":"House_data.head()","7f6365b3":"House_data.shape","55ca3b48":"X = House_data.drop(['price'], axis='columns')\nX","df3174d5":"y = House_data['price']\ny","33264455":"len(y)","3cebb2b7":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=10)","1e0995f7":"from sklearn.linear_model import LinearRegression\nlr_clf = LinearRegression()\nlr_clf.fit(X_train, y_train)\nlr_clf.score(X_test,y_test)","db7ab981":"from sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\ncv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n\ncross_val_score(LinearRegression(),X,y, cv=cv)","794e5f21":"from sklearn.model_selection import GridSearchCV\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\n\ndef find_best_model_using_gridsearchcv(X,y):\n    algos = {\n        'linear_regression' : {\n            'model': LinearRegression(),\n            'params': {\n                'normalize': [True, False]\n            }\n        },\n        'lasso': {\n            'model': Lasso(),\n            'params': {\n                'alpha': [1,2],\n                'selection': ['random', 'cyclic']\n            }\n        },\n        'decision_tree': {\n            'model': DecisionTreeRegressor(),\n            'params': {\n                'criterion' : ['mse','friedman_mse'],\n                'splitter': ['best','random']\n            }\n        }\n    }\n    scores = []\n    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n    for algo_name, config in algos.items():\n        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)\n        gs.fit(X,y)\n        scores.append({\n            'model': algo_name,\n            'best_score': gs.best_score_,\n            'best_params': gs.best_params_\n        })\n\n    return pd.DataFrame(scores,columns=['model','best_score','best_params'])\n\nfind_best_model_using_gridsearchcv(X,y)","d46cb3a3":"def predict_price(location, sqft,bath, bhk):\n  loc_index=np.where(X.columns==location)[0][0]\n\n  x = np.zeros(len(X.columns))\n  x[0] = sqft\n  x[1] = bath\n  x[2] = bhk\n  if loc_index >= 0 :\n    x[loc_index] = 1\n\n  return lr_clf.predict([x])[0]","5cf3cd46":"predict_price('1st Phase JP Nagar', 1000, 2, 2)","811ef895":"predict_price('Indira Nagar',1000,2,2)","a4f118ea":"import pickle\nwith open('banglore_home_prices_model.pickle','wb') as f:\n  pickle.dump(lr_clf,f)","b614e5ba":"import json\ncolumns = {\n    'data_columns': [col.lower() for col in X.columns]\n}\nwith open(\"Columns.json\",\"w\") as f:\n  f.write(json.dumps(columns))","bd2b8d83":"## Feature Engineering\n\nAdd new feature(integer) for bhk(Bedrooms Hall Kitchen)","a81d7960":"**Use  K-Fold cross validation to measure accuracy of our LinearRegression Model**","d5724fb9":"**We can see that in 5 iterations we get a score above 80% all the time. This is pretty good but we want to test few other algorithms for regression to see if we can get even better score. We will use GridSearchCV for this purpose**","5eac6902":"### Test the model for few properties","c18ba893":"### Find best model using GridSearch CV","264ea0ab":"## Dimensionality Reduction\n\nAny location having less than 10 data points should be tagged as \"other\" location. This way number of categories can be reduced by huge amount. Later on when do one hot encoding, it will help us with having fewer dummy columns","f46aa890":"**Drop the features that are not required to build our model**","335c0adb":"**Load the dataset**","0964df09":"### Export the Tested Model to a pickel file","5a3117a0":"There are some extreme values. So, we have to remove them or consize them..\n","f34a441f":"**Export location and column information to a file that will be useful late on in our prediction application**","2eb2c49b":"**Based on above results we can say that LinearRegression gives the best score. Hence we will use that.**","c5757d97":"**if you have 4 bedroom home and even if you have bathroom in all 4 rooms plus one guest bathroom, you will have total bath = total bed + 1 max. Anything above that is an outlier or a data error and can be removed**","ea02a76a":"**Plot same scatter chart again to visualize price_per_sqft for 2 BHK and 3 BHK properties**","df3b496a":"Their is some range values in the 'total_sqft' column as like \"1133 - 1384\" let's convert it into a single value..","cf1401b2":"**We should also remove properties where for same location, the price of(for example) 3 bedroom apartments is less than 2 bedroom apartment(with same square ft area). What we will do is for a given location, we will build a dictionary of stats per BHK, i.e.**\n\n{\n  '1' : {\n    'mean': 4000,\n    'std' :2000,\n    'count':34\n  },\n  '2' : {\n    'mean' : 4300,\n    'std' : 2300,\n    'count' : 22\n  },\n}\n\nNow we can remove those 2BHK apartments whose price_per_sqft is less than price_per_sqft of 1 BHK apartment","5adb2671":"### Visualizations","edc3d98b":"## Build a Model","0f3ec66b":"**For Above row, it shows total_sqft as 2475 which is an average of the range 2100-2850**\n","45a1a4c0":"The price is between the range of 1000-10000 price sqft.","75e4fb55":"**It is unusual to have 2 more bedrooms than number of bedrooms in a home**","3d755731":"**Insights**\n\nFrom the above chart it shows that, their is outlier which shows 2 BHK price is greater than 3 BHK. We should remove it..","0d131122":"**Data Cleaning : Handle the NA values**","e66e3e37":"**Insight**\n\nThere is some problem in the total_Sqft column it shows 43 bedroom in 2400 sq ft area..","9fd14f42":"Above shows that total_sqft can be a range (e.g. 2100-2850). For such case we can just take average of min and max value in the range. There are other cases such as 34.46Sq. Meter which one can convert to square ft using unit conversion. I am going to just drop such corner cases to keep things simple","2b470e83":"## Regression Project: Predicting House Price in Bangalore","f0c6e2f6":"## Use One_hot_encoding For location","fba71cfd":"**Insights**\n\nCheck above data points. We have 6 bhk apartment with 1020 sqft. Another one is 8 bhk and total sqft is 600. These are clear data errors that can be removed safely"}}