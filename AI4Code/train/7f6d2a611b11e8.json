{"cell_type":{"97321e76":"code","9e0c7533":"code","6185195e":"code","2e8542d0":"code","99d6107d":"code","e948e959":"code","2dc07fa0":"code","4ba6b502":"code","f28e75f2":"code","d16302fd":"code","c53236ac":"code","631993d6":"code","b8e622a3":"code","d3cb2d34":"code","15c38a8f":"code","d23674e1":"code","9f6ac768":"code","2c3074dc":"code","f52c0912":"code","0e9971f1":"code","18842f86":"code","c54e9a31":"code","b27ab49e":"code","5b4774a5":"code","a5caf9f9":"code","a3f34c7f":"code","fd385d31":"code","7c3afba8":"code","a5be23c7":"code","9b2ec26b":"code","86e1c1d9":"code","0110acbe":"code","9842cfcc":"code","55f3fbff":"code","a8d6fbe4":"code","4153746d":"code","76c87e1c":"code","e47bab5b":"markdown","c30cece5":"markdown","86656be2":"markdown","32505cdb":"markdown","94cd2a65":"markdown","46c6ae5f":"markdown"},"source":{"97321e76":"import numpy as np  \nimport pandas as pd  \n\nimport os\nprint(os.listdir('\/kaggle\/input\/corn-or-maize-leaf-disease-dataset\/data\/'))","9e0c7533":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\nimport os \nimport sys\nimport keras\nfrom PIL import * \nimport tensorflow as tf\nfrom keras import optimizers\nfrom keras import applications\nfrom keras import backend as K\nfrom os import listdir, makedirs\nfrom keras.utils.data_utils import Sequence\nfrom os.path import join, exists, expanduser\nfrom keras.models import Sequential, Model, load_model\nfrom keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array\nfrom keras.callbacks import ModelCheckpoint, TensorBoard, ReduceLROnPlateau\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, GlobalAveragePooling2D, Activation, Dropout, Flatten, Dense, Input\nfrom keras.optimizers import SGD\nfrom keras.utils.vis_utils import plot_model\nfrom sklearn.metrics import confusion_matrix, plot_confusion_matrix, classification_report\nfrom keras.applications import ResNet50\nfrom keras.utils.vis_utils import plot_model","6185195e":"path = '\/kaggle\/input\/corn-or-maize-leaf-disease-dataset\/data\/'\nclasses = os.listdir(path)\n\ndef display_four_class_images(random_number):\n    for i in classes:\n        new_path = path + i\n        random_image = os.listdir(new_path)[random_number]\n        print(new_path + '\/' +random_image)\n        plt.imshow(cv2.imread(new_path + '\/' + random_image)[:,:,::-1])\n        plt.show()","2e8542d0":"display_four_class_images(100)","99d6107d":"im = cv2.imread('\/kaggle\/input\/corn-or-maize-leaf-disease-dataset\/data\/Gray_Leaf_Spot\/Corn_Gray_Spot (404).JPG')\nim.shape","e948e959":"im.dtype","2dc07fa0":"im","4ba6b502":"def dataset_size(path, classes):\n    size = []\n    for i in classes:\n        size.append(len(os.listdir(path + i)))\n        \n    df = pd.DataFrame(columns = ['Type', 'No_of_Images'])\n    df['Type'] = classes\n    df['No_of_Images'] = size\n    \n    return df","f28e75f2":"dataset_size(path, classes)","d16302fd":"def average_image_size(label_name):\n    r, g, b = [], [], []\n    for image in os.listdir(path + label_name):\n        im = cv2.imread(path + label_name+'\/'+image)\n        r.append(im.shape[0])\n        g.append(im.shape[1])\n        b.append(im.shape[2])\n        \n    return (sum(r)\/len(r), sum(g)\/len(g), sum(b)\/len(b))","c53236ac":"for label in classes:\n    print(label, average_image_size(label))","631993d6":"def image_extensions(label_name):\n    extension = []\n    for image in os.listdir(path + label_name):\n        extension.append(image.split('.')[-1])\n        \n    return list(set(extension))","b8e622a3":"for label in classes:\n    print(label, image_extensions(label))","d3cb2d34":"train_data_generator =  ImageDataGenerator(rotation_range=40,\n                                width_shift_range=0.2,\n                                height_shift_range=0.2,\n                                rescale=1.\/255,\n                                shear_range=0.2,\n                                zoom_range=0.2,\n                                horizontal_flip=True,\n                                fill_mode='nearest',\n                                validation_split = 0.25)","15c38a8f":"# img = load_img(path+'\/Blight\/Corn_Blight (412).JPG')  # this is a PIL image\n# x = img_to_array(img)  # this is a Numpy array  \n# x = x.reshape((1,) + x.shape)  # this is a Numpy array  \n\n# # the .flow() command below generates batches of randomly transformed images\n# # and saves the results to the `preview\/` directory\n# i = 0\n# for batch in train_data_generator.flow(x, batch_size=1,\n#                           save_to_dir='\/kaggle\/input\/preview', save_prefix='Corn_Blight', save_format='JPG'):\n#     i += 1\n#     if i > 20:\n#         break  # otherwise the generator would loop indefinitely","d23674e1":"train_dataset = train_data_generator.flow_from_directory(\n                                    path,\n                                    target_size = (224, 224),\n                                    class_mode = \"categorical\",\n                                    batch_size = 64,\n                                    subset = \"training\")\n\nval_dataset = train_data_generator.flow_from_directory(\n                                    path,\n                                    target_size = (224, 224),\n                                    class_mode = \"categorical\",\n                                    batch_size = 64,\n                                    subset = \"validation\")","9f6ac768":"def visualize_datagenerator(no_of_images):\n    for pic in range(no_of_images):\n        image, label = val_dataset.next()\n        print(\"image shape is: \", image.shape)\n        plt.imshow(image[0])\n        print(image[20].shape)\n        plt.show()","2c3074dc":"visualize_datagenerator(8)","f52c0912":"input_layer = Input(shape = (224, 224, 3))\n\nresnet50_output = ResNet50(\n    include_top=True,\n    weights=None,\n    classes=train_dataset.num_classes\n)(input_layer)","0e9971f1":"resnet50_model = keras.Model(input_layer, resnet50_output)","18842f86":"resnet50_model.compile(optimizer = \"adam\", loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","c54e9a31":"resnet50_model.summary()","b27ab49e":"plot_model(resnet50_model, to_file='resnet50model_plot.png', show_shapes=True, show_layer_names=True)","5b4774a5":"history = resnet50_model.fit(train_dataset, epochs = 1, validation_data = val_dataset, verbose = True)","a5caf9f9":"history","a3f34c7f":"history.history[\"loss\"]","fd385d31":"def visualize_training_epochs(v):\n    plt.plot(v.history[\"accuracy\"])\n    plt.plot(v.history[\"val_accuracy\"])\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Accuracy\")\n    plt.title(\"Resnet50_model_accuracy\")\n    plt.legend([\"Train\", \"Validation\"])\n    plt.show()\n    \n    plt.plot(v.history[\"loss\"])\n    plt.plot(v.history[\"val_loss\"])\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Loss\")\n    plt.title(\"Resnet50_model_loss\")\n    plt.legend([\"Train\", \"Validation\"])\n    plt.show()","7c3afba8":"visualize_training_epochs(history)","a5be23c7":"resnet50_model.save(\"resnet_50.h5\")","9b2ec26b":"val_dataset.class_indices","86e1c1d9":"val_dataset.classes","0110acbe":"len(val_dataset)","9842cfcc":"predictions = resnet50_model.predict_generator(val_dataset)\npredictions","55f3fbff":"prediction_class = np.argmax(predictions, axis = 1)\nprediction_class","a8d6fbe4":"len(prediction_class)","4153746d":"print(confusion_matrix(val_dataset.classes, prediction_class))","76c87e1c":"print(classification_report(val_dataset.classes, prediction_class))","e47bab5b":"**Import Libraries**","c30cece5":"**Load and check the average image size of each class to make sure that there's no outlier shape in the Dataset.**","86656be2":"**Function to display random images from each class of the dataset**","32505cdb":"**Count of Images in each class**","94cd2a65":"How to increase image data size for single class? - Doubt","46c6ae5f":"**Image Extensions**"}}