{"cell_type":{"e5323296":"code","8a8d9890":"code","4656f27d":"code","ec0c4194":"code","f81c5dd4":"code","9b4cf233":"code","22760d7d":"code","8a90921b":"code","3e2eab20":"code","bab33bf0":"code","fb1c7943":"code","9bc646cc":"code","b32abdb6":"code","7e008b01":"code","961b6e17":"code","c23441bc":"code","a116d214":"code","09469f50":"code","8f2f07a0":"code","709dd2d6":"code","34aa7e10":"code","d65231f6":"markdown","8eba3c3d":"markdown","089dd690":"markdown","b4b0f00e":"markdown","12528341":"markdown","a278cb74":"markdown","88ea38b7":"markdown","3c0f9d39":"markdown","352c3e32":"markdown","fde45a12":"markdown","c14c20a4":"markdown","bb2df10d":"markdown","6a963712":"markdown","438d3d35":"markdown","63ab83f2":"markdown","9a5e07d1":"markdown","35fdfd52":"markdown","7de34149":"markdown","c398750c":"markdown","a2f69549":"markdown","c0b6d475":"markdown","1079104e":"markdown","d7bbd58f":"markdown","eb0c53db":"markdown","5213a03e":"markdown","42c8e7b0":"markdown","eb142e8a":"markdown","fa35cb75":"markdown","d95c396f":"markdown","ed726b35":"markdown"},"source":{"e5323296":"!pip install toloka-kit==0.1.8 # To interact with Toloka API\n!pip install ipyplot # To plot images inside Jupyter Notebooks cells\n!pip install crowd-kit==0.0.4\n\nimport os\nimport datetime\nimport time\nimport logging\nimport sys\n\nimport pandas as pd# To perform data manipulation\nimport ipyplot\n\nimport toloka.client as toloka\nimport toloka.client.project.template_builder as tb\n\nfrom crowdkit.aggregation import MajorityVote\n\nlogging.basicConfig(\n    format='[%(levelname)s] %(name)s: %(message)s',\n    level=logging.INFO,\n    stream=sys.stdout,\n)","8a8d9890":"toloka_client = toloka.TolokaClient(input(\"Enter your token:\"), 'PRODUCTION') # Or switch to 'SANDBOX' \nprint(toloka_client.get_requester())","4656f27d":"!curl https:\/\/tlk.s3.yandex.net\/dataset\/road_signs.tsv --output dataset.tsv\n\n# Load the dataset of links to a pandas DataFrame\ndataset = pandas.read_csv('dataset.tsv', sep='\\t')\n\n# Plot 5 images from dataset to verify data loading\nipyplot.plot_images(\n    [url for url in dataset['image'].sample(n=50)],\n    max_images=5,\n    img_width=1000\n)","ec0c4194":"# How performers will see the task\nproject_interface = toloka.project.view_spec.TemplateBuilderViewSpec(\n    config=tb.TemplateBuilder(\n        view=tb.ImageAnnotationFieldV1(  # Component that selects areas in images\n            image=tb.InputData(path='image'),  # Getter for the input image\n            data=tb.OutputData(path='result'),  # Path for writing output data\n            shapes={tb.ImageAnnotationFieldV1.Shape.RECTANGLE: True},  # Allow to select only rectangular areas\n            validation=tb.RequiredConditionV1(hint='Please select an area')  # At least one area should be selected\n        )\n    )\n)\n\n# You can write instructions and upload them from a file or enter them later in the web interface\n# prepared_instruction = open('instruction.html').read().strip()\nprepared_instruction = '<b>Outline each traffic sign with a separate bounding box(rectangle).<\/b>'\n\n# Set up the project\ndetection_project = toloka.project.Project(\n    assignments_issuing_type=toloka.project.Project.AssignmentsIssuingType.AUTOMATED,\n    public_name='Outline all traffic signs with bounding boxes',\n    public_description='Find and outline all traffic signs with bounding boxes.',\n    public_instructions=prepared_instruction,\n    # Set up the task: view, input, and output parameters\n    task_spec=toloka.project.task_spec.TaskSpec(\n        input_spec={'image': toloka.project.field_spec.UrlSpec()},\n        output_spec={'result': toloka.project.field_spec.JsonSpec()},\n        view_spec=project_interface,\n    ),\n)\n\n# Call the API to create a new project\ndetection_project = toloka_client.create_project(detection_project)","f81c5dd4":"detection_skill = next(toloka_client.get_skills(name='Area selection of road signs'), None)\nif detection_skill:\n    print('Detection skill already exists')\nelse:\n    print('Create new detection skill')\n    detection_skill = toloka_client.create_skill(\n        name='Area selection of road signs',\n        hidden=True,\n        public_requester_description={'EN': 'Performer is annotating road signs'},\n    )\n\nverification_skill = next(toloka_client.get_skills(name='Detection verification'), None)\nif verification_skill:\n    print('Verification skill already exists')\nelse:\n    print('Create new verification skill')\n    verification_skill = toloka_client.create_skill(\n        name='Detection verification',\n        hidden=True,\n        public_requester_description={'EN': 'How good a performer is at verifying detectionsegmentation tasks'},\n    )","9b4cf233":"detection_pool = toloka.pool.Pool(\n    project_id=detection_project.id,\n    private_name='Pool 1',  # Only you can see this information.\n    may_contain_adult_content=False,\n    will_expire=datetime.datetime.utcnow() + datetime.timedelta(days=365),  # Pool will automatically close after one year\n    reward_per_assignment=0.01,     # Set the minimum payment amount for one task page\n    auto_accept_solutions=False,    # Only pay the performer for completing the task,\n                                    # based on the verification results of the second project.\n                                     \n    auto_accept_period_day=7,       # Number of days to determine if we'll pay for task completion by this performer or not.\n    assignment_max_duration_seconds=60*20,  # Give performers 20 minutes maximum to complete one task page.\n    defaults=toloka.pool.Pool.Defaults(\n        # We don't need overlapping for detectiondetectionsegmentation tasks, so we set it to 1\n        default_overlap_for_new_task_suites=1,\n        default_overlap_for_new_tasks=1,\n    ),\n)\n\n# Set the number of tasks per page\ndetection_pool.set_mixer_config(real_tasks_count=1, golden_tasks_count=0, training_tasks_count=0)\n# Please note that the payment amount specified when creating the pool is the amount the performer receives for completing one page of tasks.\n# If you specify 10 tasks per page above, then reward_per_assignment will be paid for completing 10 tasks.","22760d7d":"detection_pool.filter = toloka.filter.Languages.in_('EN')","8a90921b":"# The first rule in this project restricts pool access for performers who often make mistakes\ndetection_pool.quality_control.add_action(\n    collector=toloka.collectors.AcceptanceRate(),\n    conditions=[\n        # Performer completed more than 2 tasks\n        toloka.conditions.TotalAssignmentsCount > 2,\n        # And more than 35% of their responses were rejected\n        toloka.conditions.RejectedAssignmentsRate > 35,\n    ],\n    # This action tells Toloka what to do if the condition above is True\n    # In our case, we'll restrict access for 15 days\n    # Always leave a comment: it may be useful later on\n    action=toloka.actions.RestrictionV2(\n        scope=toloka.user_restriction.UserRestriction.ALL_PROJECTS,\n        duration=15,\n        duration_unit='DAYS',\n        private_comment='Performer often make mistakes',  # Only you will see this comment\n    )\n)\n\n# The second useful rule is \"Fast responses\". It allows us to filter out performers who respond too quickly.\ndetection_pool.quality_control.add_action(\n    # Let's monitor fast submissions for the last 5 completed task pages\n    # And define ones that take less than 20 seconds as quick responses.\n    collector=toloka.collectors.AssignmentSubmitTime(history_size=5, fast_submit_threshold_seconds=20),\n    # If we see more than one fast response, we ban the performer from all our projects for 10 days.\n    conditions=[toloka.conditions.FastSubmittedCount > 1],\n    action=toloka.actions.RestrictionV2(\n        scope=toloka.user_restriction.UserRestriction.ALL_PROJECTS,\n        duration=10,\n        duration_unit='DAYS',\n        private_comment='Fast responses',  # Only you will see this comment\n    )\n)\n\n# Another rule we use is for automatically updating skills\n# We update the detection skill for performers who complete at least one page of tasks from detection pool.\ndetection_pool.quality_control.add_action(\n    collector=toloka.collectors.AnswerCount(),\n    # If performer completed at least one task, it sets the new skill to 1\n    conditions=[toloka.conditions.AssignmentsAcceptedCount > 0],\n    action=toloka.actions.SetSkill(skill_id=detection_skill.id, skill_value=1),\n)\n\n# This rule sends rejected assignments (tasks that you rejected) to other performers according to specified parameters.\ndetection_pool.quality_control.add_action(\n    collector=toloka.collectors.AssignmentsAssessment(),\n    # Check if a task was rejected\n    conditions=[toloka.conditions.AssessmentEvent == toloka.conditions.AssessmentEvent.REJECT],\n    # If the condition is True, add 1 to overlap and open the pool\n    action=toloka.actions.ChangeOverlap(delta=1, open_pool=True),\n)\n\nprint('Quality rules count:', len(detection_pool.quality_control.configs))","3e2eab20":"detection_pool = toloka_client.create_pool(detection_pool)","bab33bf0":"# Configure task inetrface: how performers will see the task\nverification_interface = toloka.project.view_spec.TemplateBuilderViewSpec(\n    config=tb.TemplateBuilder(\n        view=tb.ListViewV1(  # List of components that should be positioned from top to bottom in the UI\n            items=[\n                tb.ImageAnnotationFieldV1(  # Image and selected areas to verify\n                    image=tb.InputData(path='image'),\n                    data=tb.InternalData(path='selection',\n                                         default=tb.InputData(path='selection')),  # Use the input field as default value to display the selected areas\n                    disabled=True  # Disable adding and deleting areas\n                ),\n                tb.RadioGroupFieldV1(  # A component for selecting one value out of several options\n                    label='Are all traffic signs outlined correctly?',  # Label above the options\n                    data=tb.OutputData(path='result'),  # Path for writing output data\n                    options=[\n                        tb.GroupFieldOption(label='Yes', value='OK'),\n                        tb.GroupFieldOption(label='No', value='BAD'),\n                    ],\n                    validation=tb.RequiredConditionV1()  # Requirement to select one of the options\n                )\n            ]\n        ),\n        plugins=[\n            tb.HotkeysPluginV1( # Shortcuts for selecting options using the keyboard\n                key_1=tb.SetActionV1(data=tb.OutputData(path='result'), payload='OK'),\n                key_2=tb.SetActionV1(data=tb.OutputData(path='result'), payload='BAD')\n            )\n        ]\n    )\n)\n\n# You can write instructions and upload them from a file or enter them later in the web interface\n# prepared_instruction = open('instruction.html').read().strip()\nverification_instruction = '''<b>Look at the image and answer the question:<\/b><br\/>\nAre all traffic signs outlined correctly?<br\/>\nIf they are, click Yes.<br\/>\nIf they aren't, click No.<br\/>\nFor example, the road signs here are outlined correctly, so the correct answer is Yes.'''\n\n# Set up the project\nverification_project = toloka.project.Project(\n    assignments_issuing_type=toloka.project.Project.AssignmentsIssuingType.AUTOMATED,\n    public_name='Are the traffic signs outlined correctly?',\n    public_description='Look at the image and decide whether or not the traffic signs are outlined correctly',\n    public_instructions=verification_instruction,\n    # Set up the task: view, input, and output parameters\n    task_spec=toloka.project.task_spec.TaskSpec(\n        input_spec={\n            'image': toloka.project.field_spec.UrlSpec(),\n            'selection': toloka.project.field_spec.JsonSpec(),\n            'assignment_id': toloka.project.field_spec.StringSpec(),\n        },\n        # Set allowed_values, we'll use smart mixing to get the results of this project\n        output_spec={'result': toloka.project.field_spec.StringSpec(allowed_values=['OK', 'BAD'])},\n        view_spec=verification_interface,\n    ),\n)","fb1c7943":"verification_project = toloka_client.create_project(verification_project)","9bc646cc":"verification_pool = toloka.pool.Pool(\n    project_id=verification_project.id,\n    private_name='Pool 1. Road sign verification',  # Only you can see this information.\n    may_contain_adult_content=False,\n    will_expire=datetime.datetime.utcnow() + datetime.timedelta(days=365),  # Pool will close automatically after one year\n    reward_per_assignment=0.01,  # We set the minimum payment amount for one task page\n                                 # By default, auto_accept_solutions is on,\n                                 # so we'll pay for all the tasks without checking results.\n    assignment_max_duration_seconds=60*10,  # Give performers 10 minutes to complete one task page\n    defaults=toloka.pool.Pool.Defaults(\n        # We need an overlap to compare the performers among themselves,\n        # And we need to set an incremental relabeling (dynamic overlap) value less than max_overlap value\n        default_overlap_for_new_task_suites=2,\n    ),\n)\n\n# We'll only show our tasks to English-speaking users because the description of the task is in English.\n# We also won't allow our verification tasks to be performed by users who performed detection tasks.\nverification_pool.filter = (\n    (toloka.filter.Languages.in_('EN')) &\n    (toloka.filter.Skill(detection_skill.id) == None)\n)\n\n# Set up quality control\n# Quality is based on the majority of matching responses from performers who completed the same task.\nverification_pool.quality_control.add_action(\n    collector=toloka.collectors.MajorityVote(answer_threshold=2),\n    # If a performer has 10 or more responses\n    # And the responses are correct in less than 50% of cases,\n    conditions=[\n        toloka.conditions.TotalAnswersCount > 9,\n        toloka.conditions.CorrectAnswersRate < 50,\n    ],\n    # We ban the performer from all our projects for 10 days.\n    action=toloka.actions.RestrictionV2(\n        scope=toloka.user_restriction.UserRestriction.ALL_PROJECTS,\n        duration=10,\n        duration_unit='DAYS',\n        private_comment=' Doesn\\'t match the majority',  # Only you will see this comment\n    )\n)\n\n# Set up the new skill value using MajorityVote.\n# Depending on the percentage of correct responses, we increase the value of the performer's skill.\nverification_pool.quality_control.add_action(\n    collector=toloka.collectors.MajorityVote(answer_threshold=2, history_size=10),\n    conditions=[\n        toloka.conditions.TotalAnswersCount > 2,\n    ],\n    action=toloka.actions.SetSkillFromOutputField(\n        skill_id=verification_skill.id,\n        from_field='correct_answers_rate',\n    ),\n)\nprint('Quality rule count:', len(verification_pool.quality_control.configs))","b32abdb6":"# Set the task count for one page and turn task shuffling ON to enable incremental relabeling\nverification_pool.set_mixer_config(\n    real_tasks_count=10,\n    golden_tasks_count=0,\n    training_tasks_count=0,\n    mix_tasks_in_creation_order=True,  # Enable shuffle mode to use incremental relabeling\n    force_last_assignment=True,\n)\n# Create incremental relabeling\nverification_pool.set_dynamic_overlap_config(\n    type='BASIC',\n    max_overlap=5,       # Each task can be completed maximum 5 times\n    min_confidence=0.8,  # Percentage, where 100% = 1.0\n    answer_weight_skill_id=verification_skill.id,  # Set incremental relabeling by verification skill\n    fields=[toloka.pool.DynamicOverlapConfig.Field(name='result')],\n)\n\nverification_pool = toloka_client.create_pool(verification_pool)","7e008b01":"tasks = [\n    toloka.task.Task(input_values={'image': url}, pool_id=detection_pool.id)\n    for url in dataset['image'].values[:20]\n]\n# Add tasks to a pool\ntoloka_client.create_tasks(tasks, toloka.task.CreateTasksParameters(allow_defaults=True))\n\ndetection_pool = toloka_client.open_pool(detection_pool.id)","961b6e17":"def wait_pool_for_close(pool):\n    sleep_time = 60\n    pool = toloka_client.get_pool(pool.id)\n    while not pool.is_closed():\n        print(\n            f'   {datetime.datetime.now().strftime(\"%H:%M:%S\")}\\t'\n            f'Pool {pool.id} has status {pool.status}.'\n        )\n        time.sleep(sleep_time)\n        pool = toloka_client.get_pool(pool.id)\n\n# Wait for the detection pool\nprint('\\nWaiting for the detection pool to close')\nwait_pool_for_close(detection_pool)\nprint(f'Detection pool {detection_pool.id} is finally closed!')","c23441bc":"def prepare_verification_tasks():\n    verification_tasks = []  # Tasks that we will send for verification\n    request = toloka.search_requests.AssignmentSearchRequest(\n        status=toloka.assignment.Assignment.SUBMITTED,  # Only take completed tasks that haven't been accepted or rejected\n        pool_id=detection_pool.id,\n    )\n    # Create and store new tasks\n    for assignment in toloka_client.get_assignments(request):\n        verification_tasks.append(\n            toloka.task.Task(\n                input_values={\n                    'image': assignment.tasks[0].input_values['image'],\n                    'selection': assignment.solutions[0].output_values['result'],\n                    'assignment_id': assignment.id,\n                },\n                pool_id=verification_pool.id,\n            )\n        )\n    print(f'Generate {len(verification_tasks)} new verification tasks')\n    return verification_tasks\n\ndef run_verification_pool(verification_tasks):\n    toloka_client.create_tasks(\n        verification_tasks,\n        toloka.task.CreateTasksParameters(allow_defaults=True)\n    )\n\n    # Open the verification pool\n    pool = toloka_client.open_pool(verification_pool.id)\n    print(f'Verification pool status - {pool.status}')\n\n# Prepare the tasks\nverification_tasks = prepare_verification_tasks()\n# Add it to the pool and run the pool\nrun_verification_pool(verification_tasks)","a116d214":"print('\\nWaiting for verification pool to close')\nwait_pool_for_close(verification_pool)\nprint(f'Verification pool {verification_pool.id} is finally closed!')","09469f50":"def get_aggregation_results(pool_id, skill_id, submitted_gte=None):\n    user_skill = {}\n    answers = []\n    for assignment in toloka_client.get_assignments(pool_id=pool_id, status='ACCEPTED', submitted_gte=submitted_gte):\n        skill = next(toloka_client.get_user_skills(user_id=assignment.user_id, skill_id=skill_id), None)\n        skill = skill and skill.value\n        user_skill[assignment.user_id] = skill\n        for task, solution in zip(assignment.tasks, assignment.solutions):\n            answers.append([task.input_values['assignment_id'], solution.output_values['result'], assignment.user_id])\n    # Prepare dataframe\n    answers_df = pandas.DataFrame(answers, columns=['task', 'label', 'performer'])\n    skill_series = pandas.Series(user_skill)\n    # Run aggregation\n    predicted_answers = MajorityVote().fit_predict(answers_df, skill_series)\n    # Get aggregated results\n    return predicted_answers\n\ndef set_detection_status(verification_results):\n    # Reject or accept tasks in the detection pool\n    print('Started adding results to detection tasks')\n    for assignment_id, result in verification_results.items():\n        if result == 'OK':\n            toloka_client.accept_assignment(assignment_id, \"Well done!\")\n        else:\n            toloka_client.reject_assignment(assignment_id, 'The object wasn\\'t selected or was selected incorrectly.')\n    print('Finished adding results to detection tasks')\n\n\n# Aggregation operation\nverification_results = get_aggregation_results(verification_pool.id, verification_skill.id)\n# Reject or accept tasks in the detection pool\nset_detection_status(verification_results)","8f2f07a0":"while True:\n    print('\\nWaiting for detection pool to close')\n    wait_pool_for_close(detection_pool)\n    print(f'Detection pool {detection_pool.id} is finally closed!')\n\n    # Preparing tasks\n    verification_tasks = prepare_verification_tasks()\n\n    # Make sure all the tasks are done\n    if len(verification_tasks) == 0:\n        print('All the tasks in our project are done')\n        break\n    \n    verification_submitted_gte = datetime.datetime.utcnow()\n    # Add it to the pool and run the pool\n    run_verification_pool(verification_tasks)\n\n    print('\\nWaiting for verification pool to close')\n    wait_pool_for_close(verification_pool)\n    print(f'Verification pool {verification_pool.id} is finally closed!')\n\n    # Aggregation operation\n    verification_results = get_aggregation_results(verification_pool.id, verification_skill.id, verification_submitted_gte)\n    # Reject or accept tasks in the detection pool\n    set_detection_status(verification_results)\n\n\nprint(f'Results received at {datetime.datetime.now()}')","709dd2d6":"!pip install pillow # To deal with images\n!pip install requests # To make HTTP requests\nfrom PIL import Image, ImageDraw\nimport requests\n\ndef get_image(url, selection):\n    raw_image = requests.get(url, stream=True).raw\n    image = Image.open(raw_image).convert(\"RGBA\")\n    regions = Image.new('RGBA', image.size, (255,255,255,0))\n    pencil = ImageDraw.Draw(regions)\n    for region in selection:\n        if region['shape'] != 'rectangle':\n            continue\n        p1_x = region['left'] * image.size[0]\n        p1_y = region['top'] * image.size[1]\n        p2_x = (region['left'] + region['width']) * image.size[0]\n        p2_y = (region['top'] + region['height']) * image.size[1]\n        pencil.rectangle((p1_x, p1_y, p2_x, p2_y), fill =(255, 30, 30, int(255*0.5)))\n    image = Image.alpha_composite(image, regions)\n    return image\n\ndetection_result = {}  # We'll store our result here","34aa7e10":"max_images = 2\nimages = []\n\nif not detection_result:\n    request_for_result = toloka.search_requests.AssignmentSearchRequest(\n        status=toloka.assignment.Assignment.ACCEPTED,\n        pool_id=detection_pool.id,\n    )\n\n    for assignment in toloka_client.get_assignments(request_for_result):\n        detection_result[assignment.tasks[0].input_values['image']] = assignment.solutions[0].output_values['result']\n\nfor i in range(max_images):\n    url, selection = detection_result.popitem()\n    image = get_image(url, selection)\n    images.append(image)\n\nipyplot.plot_images(\n    images,\n    max_images=max_images,\n    img_width=1000\n)","d65231f6":"Toloka performers work really fast, but they still need time to complete their tasks. We\u2019ll have to wait when they complete all the tasks in the detection pool first.\n\nRemember that you should also review the assignments of detection pool in the web interface. More about [reviewing assignments](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/offline-accept.html).\nYou can view the status of the pool in the web interface, but this is not very convenient in a real-life project.","8eba3c3d":"### Set up the environment\nFirst of all, we higly recommend to read [learn the basics example](https:\/\/github.com\/Toloka\/toloka-kit\/blob\/main\/examples\/0.getting_started\/0.learn_the_basics\/) [![Open In Colab](https:\/\/colab.research.google.com\/assets\/colab-badge.svg)](https:\/\/colab.research.google.com\/github\/Toloka\/toloka-kit\/blob\/main\/examples\/0.getting_started\/0.learn_the_basics\/learn_the_basics.ipynb) before you start this one to be familiar with the main kinds of entities in Toloka.\n\nIn our example we are using the production version of Toloka, but you can also use [Toloka sandbox](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/sandbox.html). Sandbox specifications of the code are presented in the comments.","089dd690":"### Pool creation for a detection project\nA pool is a set of paid tasks sent out for performers.\n\nFirst, create an instance of the pool and set the basic parameters:\n- Payment amount per task.\n- Non-automatic acceptance of results.\n- Number of tasks performers will see on one page.\n- Performer's filter: control who can access this task.\n\nMore about configuring and running pools in:\n* [Toloka Kit](https:\/\/toloka.github.io\/toloka-kit\/source\/toloka.client.pool.html)\n* [Help](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/pool-main.html)\n* [Toloka API](https:\/\/yandex.com\/dev\/toloka\/doc\/concepts\/create-pool.html)","b4b0f00e":"We need to add incremental relabeling because we'll be using aggregated results from different performers. The overlap will be based on the verification skill.","12528341":"We may need multiple iterations over our two pools, so we'll write some simple code to do this in a loop. Let's start it and wait.\n\nDepending on the number of images in the detection pool and the time of day, this can take from 10 minutes to almost an hour.","a278cb74":"---\n---\n## Create a new detection project\n\nIn this project, performers select image areas that contain traffic signs.\n\nThe first step is to configure how performers will see the tasks:\n* write instructions,\n* define the input and output formats.\n\n**Note:** It's important to write clear instructions with examples to make sure the performers do exactly what we want. We also recommend to check the task interface.","88ea38b7":"### Add incremental relabeling and create a pool\nFor more information about incremental relabeling, check [documentation.](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/dynamic-overlap.html)\n","3c0f9d39":"---\n---\n## Create a new project for verification\nIn this project, performers will determine if traffic signs were outlined correctly or not.\n\nThis will be a standard classification project with only two classes: `OK` and `BAD`. We\u2019ll explicitly define these labels as the output values.","352c3e32":"---\n---\n## Add tasks to pools and run the projects\nAt this point, we have configured two projects, and now we can upload the real data that we want to annotate.","fde45a12":"We'll only show our tasks to English-speaking users because the description of the task is in English.\nThis means that only people who speak English will be able to accept this task.","c14c20a4":"### Add custom skills for performers\n\nA skill can describe any characteristic of the performer. Skills are defined by a number from 0 to 100. For example, you can record the percentage of correct responses as a skill. Learn more about [skills](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/nav.html).\n\nIn this project, we'll create two skills: \n- **Detection skill**: Shows the performer completed at least one detection task. We'll later filter out these performers from verification tasks, so that no one can check their own detection. \n- **Verification skill**: How good the current performer is, when compared to others. We'll need this skill later when aggregating the results of the second project.","bb2df10d":"We have just launched our verification pool. Let's wait for it to close.","6a963712":"---\n---\n## Summary\n\nThis project consists of the minimum number of settings that will allow you to collect annotated images for your dataset right from Jupyter Notebook.\n\nFor your future experiments use Toloka Kit [documentation](https:\/\/toloka.github.io\/toloka-kit\/index.html) and check out other [use cases](https:\/\/github.com\/Toloka\/toloka-kit\/tree\/main\/examples).\n","438d3d35":"## The challenge\nWe have a set of real-life photos of roads:\n\n<table  align=\"center\">\n  <tr><td>\n    <img src=\"https:\/\/tlk.s3.yandex.net\/sdc\/photos\/0b35956a9afc639a71045f09745096de.jpg\"\n         alt=\"Sample road photo\"  width=\"800\">\n  <\/td><\/tr>\n  <tr><td align=\"center\">\n    <b>Figure 1.<\/b> Sample road photo\n  <\/td><\/tr>\n<\/table>\n\nWe need to outline every traffic sign. Ultimately, we need to get a set of contours, defined by an array of points, that represent the road signs in each photo. Here\u2019s how it can look like:\n\n<table  align=\"center\">\n  <tr><td>\n    <img src=\"https:\/\/github.com\/Toloka\/toloka-kit\/blob\/main\/examples\/1.computer_vision\/object_detection\/img\/segmentation_example.png?raw=true\"\n         alt=\"Example of how road sign detection can be performed\"  width=\"800\">\n  <\/td><\/tr>\n  <tr><td align=\"center\">\n    <b>Figure 2.<\/b> Example of how road sign detection can be performed.\n  <\/td><\/tr>\n<\/table>\n\nIn real-world tasks, annotation is usually done with a polygon. We chose to use a rectangular outline to simplify the task so that we can reduce costs and speed things up.","63ab83f2":"Call the API to create a new project","9a5e07d1":"Visit the pool page in the web interface and make sure everything is ok: the number of tasks is correct, the pool is running, and some tasks may already be completed.\n\n<table  align=\"center\">\n  <tr><td>\n    <img src=\"https:\/\/github.com\/Toloka\/toloka-kit\/blob\/main\/examples\/1.computer_vision\/object_detection\/img\/segmentation_pool_look.png?raw=true\"\n         alt=\"Pool with tasks\"  width=\"800\">\n  <\/td><\/tr>\n  <tr><td align=\"center\">\n    <b>Figure 7.<\/b> How a running pool may look.\n  <\/td><\/tr>\n<\/table>\n","35fdfd52":"Examine created project in the web interface. To do that:\n\n1. Follow the link above to check the task interface and instructions.\n\n    **Note:** You should see nearly the same interface as in the previous project, only without the ability to select areas.\n    It's important to make sure that the annotation results from the first project display correctly in the second one.\n\n\n2. Open the task **Preview** in the first project.\n3. Outline the signs and click **Submit**.\n4. Copy the result.\n5. Now open the **Preview** of the second project.\n6. Click **Change input data** and paste the annotation results in the `selection` field.\n7. Click **Apply** and make sure the annotation displays correctly.","7de34149":"If you have overlap in the pool, you need to aggregate the results. We will use [crowd-kit](https:\/\/github.com\/toloka\/crowd-kit) library to perform an aggregation.\nIn this example, we use MajorityVote. Learn more about [aggregation](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/result-aggregation.html?lang=en).\n\nNow let\u2019s start the aggregation process. Wait for it to complete and then get the results. We'll use these results to accept or reject the tasks submitted in the detection pool.","c398750c":"**Quality control rules**\n\nView a detailed description of our quality control rules [in documentation](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/control.html).\n\nEach quality control rule consists of the following:\n- **Collector**: How to collect statistics and which metrics can be used in this rule.\n- **Condition**: When the rule will be triggered. Under this condition, only parameters that apply to the collector can be used.\n- **Action**: What to do if the condition is true.","a2f69549":"### Detailed task description\nIn this notebook we will implement Projects 2 and 3 from the [tutorial](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/image-segmentation-overview.html). Check this link if you want to configure these projects right in the web interface.\n\nWe'll skip the first project \"Does the image contain a specific object?\" from tutorial above, since it's easy to implement using our [\"verification project\"](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/image-segmentation-project3.html?lang=en) code.\n\nHere are the two projects we\u2019re going to implement: \n- **Detection project** \"[Select an object in the image](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/image-segmentation-project2.html)\" : performers will select image areas that contain a traffic sign.\n- **Verification project** \"[Are the bounding boxes correct?](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/image-segmentation-project3.html)\" : performers will determine if traffic signs were selected correctly in the images.\n\n[Control tasks](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/goldenset.html) and [majority vote](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/mvote.html) aren't used for the detection project, because we can\u2019t expect the area annotations provided by the performers to match each other exactly. Instead, we\u2019ll check detection results in the second project, where a different group of performers will determine whether the traffic signs were annotated correctly or not.","c0b6d475":"Create a toloka-client instance. All API calls will pass through it.","1079104e":"### Create a pool with all specified conditions\n\nNow we call the Toloka API to finally create a pool in the detection project.\n\nAfterwards, you can check the pool in the web interface. You'll see there aren't any tasks in it. We'll add them later.","d7bbd58f":"**Warning:** Do not run the cells below until the detection pool is closed.\n\nWhen all the tasks in the detection pool have been completed, we can download the results from that pool and prepare data for our verification tasks.\n\nThe next step is to run the verification pool.","eb0c53db":"### Review the dataset\nThe dataset used is collected by Toloka team and distributed under a Creative Commons Attribution 4.0 International license\n[![License: CC BY 4.0](https:\/\/img.shields.io\/badge\/License-CC%20BY%204.0-lightgrey.svg)](https:\/\/creativecommons.org\/licenses\/by\/4.0\/).\n\nOur dataset is just a collection of image URLs.","5213a03e":"### Create and set up a pool in the verification project\nWe will add filter for this pool: specify performers that don't have the detection skill (as they performed in detection tasks). You can combine multiple conditions using the `&` and `|` operators.\n\n**Note:** we add two quality control rules with the same collector, but with different conditions and actions.","42c8e7b0":"Learn more about [Toloka API](https:\/\/yandex.com\/dev\/toloka\/doc\/concepts\/about.html) and [Toloka Kit](https:\/\/toloka.github.io\/toloka-kit).\n","eb142e8a":"---\n---\n## Get the results\nNow we can download all the accepted tasks from the detection pool and work with them. In this notebook, we'll only show the detection results.\nYou can also [download](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/result-of-eval.html) results as a TSV file from web interface.","fa35cb75":"# Annotating ground truth for object detection\n\nThe goal of this notebook is to annotate images which can later be used for training of detection algorithms.\n\nWe will configure and run such project in Toloka from scratch.\n\nPerformers will be asked to annotate the particular objects in the image.\n","d95c396f":"### Review your project and check the task interface\n\nVisit the project page to make sure the task interface is working correctly.\n\nTo do this:\n\n1. Follow the link in the output above.\n2. In the project interface, click **Project actions** on the top right.\n3. Click **Preview** in the menu that appears.\n4. Click **Change input data**.\n5. Insert an image URL (for example,\u202f`https:\/\/tlk.s3.yandex.net\/sdc\/photos\/0b35956a9afc639a71045f09745096de.jpg`) into the `image` field.\n6. Click the **Instructions** button. Make sure the instructions are shown and valid.\n7. Try to select multiple areas with a rectangle using **Box annotation tool**.\n8. Click **Submit** and then **View responses**.\n\nThe result window will appear. Check that your results are in the expected format and that the data is being entered correctly.\n\n<table  align=\"center\">\n  <tr><td>\n    <img src=\"https:\/\/github.com\/Toloka\/toloka-kit\/blob\/main\/examples\/1.computer_vision\/object_detection\/img\/segmentation_results_preview.png?raw=true\"\n         alt=\"Task interface\"  width=\"800\">\n  <\/td><\/tr>\n  <tr><td align=\"center\">\n    <b>Figure 6.<\/b> What the results window might look like\n  <\/td><\/tr>\n<\/table>\n\nWe strongly recommend to check the task interface and instructions every time you create a project. This helps performers to complete the task correctly and your results to be useful.\n\n**Tip:** Do a trial run with a small amount of data. Make sure that after running the entire pipeline, you get data in the expected format and quality.","ed726b35":"Prepare environment and import necessary libraries"}}