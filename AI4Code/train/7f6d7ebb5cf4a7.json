{"cell_type":{"384e67de":"code","c558b093":"code","3193e423":"code","4895962f":"code","4a0733ed":"code","6e9ff766":"code","ab8baa72":"code","1f90c43b":"code","6959a8e4":"code","91b08cba":"code","8e7a9a64":"code","b7fd03b2":"code","ce4194e3":"code","f0dcbe37":"code","7c40a538":"code","6de857fe":"code","a5297c3e":"code","dbe3bf58":"code","452fabfc":"code","3e6b82cb":"code","5c1dfbdd":"code","a0e71cbc":"code","67fc6ffc":"code","b16803a9":"code","ba374791":"code","aed60b2c":"code","7c5c91c8":"code","f98634bd":"code","8c64cb5e":"code","905d00f4":"code","4b990238":"code","f6712b9e":"code","27d14653":"code","40bf7165":"markdown","95164531":"markdown","c9865095":"markdown","db0cf11e":"markdown","e8bb7d55":"markdown","9caa5831":"markdown","d83b7755":"markdown","5a9a11f5":"markdown","9a583f14":"markdown","27ffc1eb":"markdown","1a66cdcf":"markdown","a9fa6787":"markdown","fd2e449d":"markdown","ce95c23e":"markdown","ae82945b":"markdown","a1f394e8":"markdown","12843b62":"markdown"},"source":{"384e67de":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c558b093":"import math\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nfrom statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess\nfrom sklearn.linear_model import LinearRegression\nfrom pandas import date_range\nfrom statsmodels.graphics.tsaplots import plot_pacf\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\n\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go","3193e423":"df_holidays = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/holidays_events.csv', header = 0)\ndf_oil = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/oil.csv', header = 0)\ndf_stores = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/stores.csv', header = 0)\ndf_transactions = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/transactions.csv', header = 0)\n\ntrain = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/train.csv', header = 0)\ntest = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/test.csv', header = 0)","4895962f":"df_holidays['date'] = pd.to_datetime(df_holidays['date'], format = \"%Y-%m-%d\")\ndf_oil['date'] = pd.to_datetime(df_oil['date'], format = \"%Y-%m-%d\")\ndf_transactions['date'] = pd.to_datetime(df_transactions['date'], format = \"%Y-%m-%d\")\ntrain['date'] = pd.to_datetime(train['date'], format = \"%Y-%m-%d\")\ntest['date'] = pd.to_datetime(test['date'], format = \"%Y-%m-%d\")","4a0733ed":"df_transactions.head()","6e9ff766":"print(\"Trainng Data Shape: \", train.shape)\nprint(\"Tresting Data Shape: \", test.shape)\ntrain.head()","ab8baa72":"test.head()","1f90c43b":"train1 = train.merge(df_oil, on='date', how='left')\ntrain1.head(10)","6959a8e4":"df_stores.head(10)","91b08cba":"df_holidays.head()","8e7a9a64":"df_transactions.head(10)\nprint(df_transactions.shape)","b7fd03b2":"store = df_transactions.merge(df_stores, on='store_nbr', how='right')\nstore.head(20)","ce4194e3":"train1 = train1.merge(df_holidays, on='date', how='left')\ntrain1 = train1.merge(df_stores, on='store_nbr', how='left')\ntrain1 = train1.merge(df_transactions, on=['date', 'store_nbr'], how='left')\n\ntrain1 = train1.rename(columns={\"type_x\":\"holiday_type\", \"type_y\":\"store_type\"})\n\ntrain1.head()","f0dcbe37":"agg = train1.groupby('date').agg({\"sales\":\"mean\"}).reset_index()\nagg.head()","7c40a538":"agg = train1.groupby('date').agg({\"sales\":\"mean\"}).reset_index()\nfig = px.line(agg, x=\"date\", y=\"sales\")\nfig.update_layout(title=\"Average Sales by Date\")\nfig.show()\n\nagg = train1.groupby('date').agg({\"transactions\":\"mean\"}).reset_index()\nfig = px.line(agg, x=\"date\", y=\"transactions\")\nfig.update_layout(title=\"Average Transactions by Date\")\nfig.show()","6de857fe":"agg = train1.groupby(['date', 'store_type']).agg({\"sales\":\"mean\"}).reset_index()\nfig = px.line(agg, x=\"date\", y=\"sales\", color=\"store_type\")\nfig.update_layout(title=\"Average Sales by Date and Store Type\")\nfig.show()\n\nagg = train1.groupby(['date', 'store_type']).agg({\"transactions\":\"mean\"}).reset_index()\nfig = px.line(agg, x=\"date\", y=\"transactions\", color=\"store_type\")\nfig.update_layout(title=\"Average Transactions by Date and Store Type\")\nfig.show()","a5297c3e":"agg = train1.groupby(['date', 'cluster']).agg({\"sales\" : \"mean\"}).reset_index()\nfig = px.line(agg, x='date', y=\"sales\", color='cluster')\nfig.update_layout(title = \"Average Sales by Date and Cluster\")\nfig.show()\n\n\nagg = train1.groupby(['date', 'cluster']).agg({\"transactions\" : \"mean\"}).reset_index()\nfig = px.line(agg, x='date', y=\"transactions\", color='cluster')\nfig.update_layout(title = \"Average Transactions by Date and Cluster\")\nfig.show()","dbe3bf58":"train1['family'].shape","452fabfc":"print(train1[\"cluster\"].unique())\nprint(train1[\"store_nbr\"].unique())","3e6b82cb":"# \u68d2\u30b0\u30e9\u30d5\u4f5c\u6210\u306e\u305f\u3081\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u95a2\u6570(\u58f2\u308a\u4e0a\u3052)\n\ndef vbar(col):\n    temp = train1.groupby(col).agg({\"sales\":\"mean\"}).reset_index()\n    temp = temp.sort_values('sales', ascending=False)\n\n    param = {\n        'x':list(temp[\"sales\"])[:][::-1],\n        'y':list(temp[col])[:][::-1],\n        'title':\"Average sales by\" + col\n    }\n\n    bar = go.Bar(y=[str(_) + \" \" for _ in param['y']],\n               x=param['x'],\n               orientation=\"h\",\n               marker=dict(color=\"skyblue\"))\n    return bar\n\n    layout = go.Layout(title=params['title'],\n                      paper_bgcolor='rgba(0,0,0,0)',\n                       plot_bgcolor='rgba(0,0,0,0)',\n                       xaxis_title=\"\", \n                       yaxis_title=\"\", \n                       width=650)\n\n    fig = go.Figure([trace], layout=layout)\n\n    # layout = go.Layout(title=\"Average sales by Family\",\n    #                   paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)',\n    #                    xaxis_title=\"\", yaxis_title=\"\", width=650)\n\n    fig.update_xaxes(tickangle=0, tickfont=dict(color='black'))\n    fig.update_yaxes(tickangle=0, tickfont=dict(color='black'))\n    fig.show()","5c1dfbdd":"bar1 = vbar(\"family\")\nbar2 = vbar(\"state\")\nbar3 = vbar(\"store_type\")\nbar4 = vbar(\"city\")\nbar5 = vbar(\"cluster\")\nbar6 = vbar(\"store_nbr\")\n\ntitles = [\"Store Family\", \"State\", \"Store Type\", \"City\", \"Cluster Number\", \"Store Number\"]\ntitles = [\"Top \" + _ + \"by Average Sales \" for _ in titles]\n\nfig = make_subplots(rows=3, cols=2, subplot_titles=titles)\n\nfig.add_trace(bar1, row=1, col=1)\nfig.add_trace(bar2, row=1, col=2)\nfig.add_trace(bar3, row=2, col=1)\nfig.add_trace(bar4, row=2, col=2)\nfig.add_trace(bar5, row=3, col=1)\nfig.add_trace(bar6, row=3, col=2)\n\nfig.update_layout(height=2000,\n                  paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  showlegend = False)\n\n# fig.update_layout(barmode='group')\nfig.show()","a0e71cbc":"train1.head()","67fc6ffc":"#\u58f2\u308a\u4e0a\u3052\u306a\u3057\u306e\u54c1\u76ee\u3092\u8abf\u3079\u308b\ndef r_family_0(col):\n    a = train1.groupby([col, \"family\"]).sales.sum().reset_index().sort_values([\"family\", col])\n    a = a[a.sales == 0]\n    print(a.shape)\n    print(a)","b16803a9":"titles = [\"state\",\"store_type\",\"city\",\"cluster\", \"store_nbr\"]\n\nfor title in titles:\n    print(r_family_0(title))","ba374791":"# \u68d2\u30b0\u30e9\u30d5\u4f5c\u6210\u306e\u305f\u3081\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u95a2\u6570(\u5ba2\u6570)\n\ndef tbar(col):\n    temp = train1.groupby(col).agg({\"transactions\":\"mean\"}).reset_index()\n    temp = temp.sort_values('transactions', ascending=False)\n\n    param = {\n        'x':list(temp[\"transactions\"])[:][::-1],\n        'y':list(temp[col])[:][::-1],\n        'title':\"Average transactions by\" + col\n    }\n\n    bar = go.Bar(y=[str(_) + \" \" for _ in param['y']],\n               x=param['x'],\n               orientation=\"h\",\n               marker=dict(color=\"palegreen\"))\n    return bar\n\n    layout = go.Layout(title=params['title'],\n                      paper_bgcolor='rgba(0,0,0,0)',\n                       plot_bgcolor='rgba(0,0,0,0)',\n                       xaxis_title=\"\", \n                       yaxis_title=\"\", \n                       width=650)\n\n    tfig = go.Figure([trace], layout=layout)\n\n    tfig.update_xaxes(tickangle=0, tickfont=dict(color='black'))\n    tfig.update_yaxes(tickangle=0, tickfont=dict(color='black'))\n    tfig.show()","aed60b2c":"bar1 = tbar(\"state\")\nbar2 = tbar(\"store_type\")\nbar3 = tbar(\"city\")\nbar4 = tbar(\"cluster\")\nbar5 = tbar(\"store_nbr\")\n\ntitles = [\"State\", \"Store Type\", \"City\", \"Cluster Number\", \"Store Number\"]\ntitles = [\"Top \" + _ + \"by Average Transactions \" for _ in titles]\n\ntfig = make_subplots(rows=3, cols=2, subplot_titles=titles)\n\ntfig.add_trace(bar1, row=1, col=1)\ntfig.add_trace(bar2, row=1, col=2)\ntfig.add_trace(bar3, row=2, col=1)\ntfig.add_trace(bar4, row=2, col=2)\ntfig.add_trace(bar5, row=3, col=1)\n\ntfig.update_layout(height=2000,\n                  paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  showlegend = False)\n\n# fig.update_layout(barmode='group')\ntfig.show()","7c5c91c8":"agg = train1.groupby(['date', 'store_type']).agg({\"sales\":\"mean\"}).reset_index()\nfig = px.line(agg, x=\"date\", y=\"sales\", color=\"store_type\")\nfig.update_layout(title=\"Average Sales by Date and Store Type\")\nfig.show()\n\nagg = train1.groupby(['date', 'store_type']).agg({\"transactions\":\"mean\"}).reset_index()\nfig = px.line(agg, x=\"date\", y=\"transactions\", color=\"store_type\")\nfig.update_layout(title=\"Average Transactions by Date and Store Type\")\nfig.show()\n\nagg = train1.groupby(['date', 'state']).agg({\"sales\":\"mean\"}).reset_index()\nfig = px.line(agg, x=\"date\", y=\"sales\", color=\"state\")\nfig.update_layout(title=\"Average Sales by Date and State\")\nfig.show()\n\nagg = train1.groupby(['date', 'state']).agg({\"transactions\":\"mean\"}).reset_index()\nfig = px.line(agg, x=\"date\", y=\"transactions\", color=\"state\")\nfig.update_layout(title=\"Average Transactions by Date and State\")\nfig.show()\n","f98634bd":"agg = train1.groupby(['date', 'store_nbr']).agg({\"sales\":\"mean\"}).reset_index()\nfig = px.line(agg, x=\"date\", y=\"sales\", color=\"store_nbr\")\nfig.update_layout(title=\"Average Sales by Date and store_nbr\")\nfig.show()\n\nagg = train1.groupby(['date', 'store_nbr']).agg({\"transactions\":\"mean\"}).reset_index()\nfig = px.line(agg, x=\"date\", y=\"transactions\", color=\"store_nbr\")\nfig.update_layout(title=\"Average Transactions by Date and store_nbr\")\nfig.show()\n\nagg = train1.groupby(['date', 'city']).agg({\"sales\":\"mean\"}).reset_index()\nfig = px.line(agg, x=\"date\", y=\"sales\", color=\"city\")\nfig.update_layout(title=\"Average Sales by Date and city\")\nfig.show()\n\nagg = train1.groupby(['date', 'city']).agg({\"transactions\":\"mean\"}).reset_index()\nfig = px.line(agg, x=\"date\", y=\"transactions\", color=\"city\")\nfig.update_layout(title=\"Average Transactions by Date and city\")\nfig.show()","8c64cb5e":"df_oil.head()","905d00f4":"df_oil.isnull().sum()","4b990238":"df_oil['date'] = pd.to_datetime(df_oil.date)\n\ndf_oil = df_oil.set_index(\"date\").dcoilwtico.resample(\"D\").sum().reset_index()\ndf_oil['dcoilwtico'] = np.where(df_oil['dcoilwtico'] == 0, np.nan, df_oil['dcoilwtico'])\ndf_oil['dcoilwtico_interporated'] = df_oil.dcoilwtico.interpolate()\n\ndf_oil.head()","f6712b9e":"print(df_oil.keys()[5:])","27d14653":"p = df_oil.melt(id_vars=['date']+list(df_oil.keys()[3:]), var_name='Legend')\nprint(p.head())\npx.line(p.sort_values([\"Legend\", \"date\"], ascending = [False, True]), x='date', y='value', color='Legend',title = \"Daily Oil Price\" )","40bf7165":"## store_type\u3068\u58f2\u4e0a\u30fb\u5ba2\u6570\u3068\u306e\u76f8\u95a2\u3092\u8abf\u3079\u3066\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306b\u3059\u308b","95164531":"## \u58f2\u4e0a\u5e73\u5747\u3068\u4ed6\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u76f8\u95a2\u6027\u3092\u8abf\u3079\u3066\u68d2\u30b0\u30e9\u30d5\u306b\u3059\u308b","c9865095":"## \u4e0a\u306e\u30b0\u30e9\u30d5\u304b\u3089\n- \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u6570\u306e\u63a8\u79fb\u306f\u6a2a\u3070\u3044\u3002\u3057\u304b\u3057\u3001\u58f2\u4e0a\u306f\u53f3\u80a9\u4e0a\u304c\u308a\u3002\n    - \u5358\u4fa1\u304c\u4e0a\u304c\u3063\u3066\u3044\u308b\uff1f\n- \u30af\u30ea\u30b9\u30de\u30b9\u306e\u524d\u65e5\u306f\u5ba2\u6570\u304c\u6975\u7aef\u306b\u591a\u3044\u306e\u306b\u58f2\u4e0a\u306f\u4e0a\u304c\u3063\u3066\u3044\u306a\u3044\u3002\n    - \u30bb\u30fc\u30eb\u3092\u958b\u50ac\u3057\u3066\u3044\u308b\u306e\u304b\u3082\u3002\n- 1\/1\u306f\u58f2\u4e0a0\n    - \u65b0\u5e74\u306f\u4f11\u307f\n1. \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3 \u2192 \u5ba2\u6570\n2. sales \u2192 \u58f2\u4e0a\u9ad8","db0cf11e":"## \u3068\u3044\u3046\u308f\u3051\u3067\u3001\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306b\u623b\u308b","e8bb7d55":"## cluster\u3068\u58f2\u4e0a\u30fb\u5ba2\u6570\u3068\u306e\u76f8\u95a2\u3092\u8abf\u3079\u3066\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306b\u3059\u308b","9caa5831":"**plotly\u3092\u4f7f\u3063\u305fEDA**  \nkaggle\u521d\u5fc3\u8005\u304c\u3084\u3063\u305f\u52c9\u5f37\u306e\u305f\u3081\u306e\u5206\u6790\u3002\n<br>\n<br>\n\u53c2\u8003notebook\n- https:\/\/www.kaggle.com\/ekrembayar\/store-sales-ts-forecasting-a-comprehensive-guide\/notebook\n- https:\/\/www.kaggle.com\/shivamb\/store-sales-forecasting-exploration\/notebook","d83b7755":"## \u4e0a\u56f3\u3088\u308a\n- \u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u9593\u306e\u95a2\u4fc2\u6027\u304c\u3088\u304f\u5206\u304b\u3089\u306a\u3044\n- \u3082\u3046\u5c11\u3057\u95a2\u4fc2\u6027\u306e\u8a73\u7d30\u5ea6\u3092\u9ad8\u3081\u305f\u3044","5a9a11f5":"## \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3068\u4ed6\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u95a2\u4fc2","9a583f14":"## Oil\u95a2\u9023\u306e\u30c7\u30fc\u30bf\u3092\u898b\u3066\u307f\u308b","27ffc1eb":"- \u7d50\u5c40\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u5206\u304b\u3089\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3001\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306e\u65b9\u304c\u95a2\u4fc2\u6027\u304c\u5206\u304b\u308a\u305d\u3046\u3002","1a66cdcf":"- city\u3068store_nbr\u3067\u898b\u308b\u3068\u58f2\u4e0a\u306e\u30b0\u30e9\u30d5\u306f\u53f3\u80a9\u4e0a\u304c\u308a\u3067\u306f\u306a\u304f\u3001\u58f2\u4e0a\u4f4e\u3044\u3068\u3053\u308d\u306f\u5272\u3068\u305d\u306e\u307e\u307e\u2192\u30b0\u30e9\u30d5\u306e\u7dcf\u9762\u7a4d\u304c\u5897\u3048\u3066\u3044\u308b\u611f\u3058\n    - \u5e97\u8217\u306e\u30bf\u30a4\u30d7\u5225\u306b\u898b\u308b\u3068\u3001\u58f2\u308a\u4e0a\u3052\u304c\u5e95\u4e0a\u3052\u3055\u308c\u3066\u3044\u308b\u3068\u611f\u3058\u305f\u304c\u3001\u5143\u3005\u58f2\u308a\u4e0a\u3052\u3092\u4e0a\u3052\u3066\u3044\u308b\u5e97\u8217\u306e\u58f2\u308a\u4e0a\u3052\u304c\u3055\u3089\u306b\u4e0a\u304c\u3063\u305f\u3068\u3044\u3046\u611f\u3058\uff1f","a9fa6787":"- \u6b20\u640d\u5024\u304c\u5b58\u5728\u3059\u308b\u306e\u3067\u3001\u4f55\u304b\u3067\u88dc\u5b8c\u3057\u305f\u3044\n    - time series\u7cfb\u306b\u306f\u524d\u5f8c\u306e\u5024\u304b\u3089\u4fdd\u7ba1\u3057\u3066\u304f\u308c\u308binterpolation\u304c\u826f\u3055\u305d\u3046\u3068\u306e\u8a18\u4e8b\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u3092\u8a66\u3057\u3066\u307f\u308b","fd2e449d":"\u3068\u308a\u3042\u3048\u305a\u3001\u58f2\u308a\u4e0a\u3052\u3084\u5ba2\u6570\u306e\u63a8\u79fb\u3042\u305f\u308a\u304b\u3089\u898b\u308b","ce95c23e":"## \u4e0a\u306e\u30b0\u30e9\u30d5\u3088\u308a\n- store_type \u300cB\u300d\u306ftransaction\u306f\u591a\u3044\u306e\u306bsales\u306f\u4f4e\u3044\n    - \u5ba2\u6570\u306f\u591a\u3044\u306e\u306b\u3001\u58f2\u4e0a\u306b\u7e4b\u304c\u3063\u3066\u3044\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\n- store_type \u300cD\u300d\u306fB\u306b\u6bd4\u3079\u3066transaction\u304c\u5c11\u306a\u3044\u306e\u306bsales\u304cB\u3092\u4e0a\u56de\u308b\u671f\u9593\u304c\u591a\u3044\n    - D\u306e\u5358\u4fa1\u306f\u9ad8\u3044\uff1f","ae82945b":"- Pastaza\u306e\u58f2\u308a\u4e0a\u3052\u304c2016\u5e74\u307e\u3067\uff10\u2192\u65b0\u898f\u958b\u5e97\u306e\u5e97\u8217\u304b\u306a\n- \u4e0a\u4f4dstate\u306e\u58f2\u308a\u4e0a\u3052\u3068\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u30e9\u30f3\u30af\u306f\u307b\u307c\u4e00\u81f4\n    - \u5ba2\u6570\u304c\u591a\u3044\u3068\u58f2\u308a\u4e0a\u3052\u304c\u4e0a\u304c\u308b\u306e\u306f\u9244\u677f\n    - \u63c3\u3048\u3066\u3044\u308b\u30b0\u30c3\u30ba\u304c\u3044\u3044\u306e\u304b\u3001\u7acb\u5730\u304c\u3044\u3044\u306e\u304b\u3001\u5e97\u8217\u81ea\u4f53\u5927\u304d\u3044\u306e\u304b\n        - \u58f2\u308c\u3066\u3044\u308b\u54c1\u76ee\u306f\u30c0\u30f3\u30c8\u30c4\u3067\u751f\u9bae\u98df\u54c1\u306a\u306e\u3067\u3001\u30b9\u30fc\u30d1\u30fc\u306b\u8fd1\u3044\u611f\u3058\u306a\u306e\u304b\u3082\u3002\n        - \u5ba2\u6570\u304c\u6a2a\u3070\u3044\u3001\u58f2\u308a\u4e0a\u3052\u304c\u4e0a\u304c\u308b\u2192\u5024\u4e0a\u3052\uff1f\n            - \u8f38\u9001\u30b3\u30b9\u30c8\uff1f\u539f\u6750\u6599\u306e\u9ad8\u9a30\uff1f\u6c17\u5019\u5909\u52d5\uff1f\u2192\u4f7f\u3048\u308b\u60c5\u5831\u306foil\u306a\u306e\u3067\u3053\u3063\u3061\u8abf\u3079\u308b\u3068\u306a\u3093\u304b\u5206\u304b\u308a\u305d\u3046\u3002\n    - \u305f\u3060\u3001santa elena\u306b\u95a2\u3057\u3066\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u4e0b\u304b\u3089\u4e8c\u756a\u76ee\u306a\u306e\u306b\u58f2\u4e0a\u306f\u4e0b\u304b\u3089\u4e94\u756a\u76ee\u3050\u3089\u3044","a1f394e8":"## \u4e0a\u30b0\u30e9\u30d5\u3088\u308a\n- \u4e00\u756a\u58f2\u308c\u3066\u3044\u308b\u306e\u306fgrocery1\n- \u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u58f2\u4e0a\u5225\u30e9\u30f3\u30af\u304c\u5206\u304b\u3063\u305f\u306e\u3067\u3001\u6b21\u306f\u9ad8\u30e9\u30f3\u30af\u540c\u58eb\u3067\u306e\u76f8\u95a2\u95a2\u4fc2\u3092\u8abf\u3079\u305f\u3044\u3002\n    - \u4f8b\u3048\u3070\u3001top_city\u3067\u6700\u3082\u58f2\u4e0a\u9ad8\u306e\u9ad8\u3044\u5e97\u8217\u304c\u58f2\u3063\u3066\u3044\u308b\u5546\u54c1\u7a2e\u5225\u3084\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u6570\u3092\u8abf\u3079\u308b\u306a\u3069\u2192\u52b9\u7387\u30fb\u5546\u54c1\u5358\u4fa1\u306a\u3069\u5206\u304b\u308a\u305d\u3046\n- \u5168\u304f\u58f2\u308c\u3066\u306a\u3055\u305d\u3046\u306a\u54c1\u76ee\u304c\u3042\u308b\u3002\n    - \u30e2\u30c7\u30eb\u69cb\u7bc9\u306e\u969b\u306b\u5207\u308a\u6368\u3066\u308b\u304b\uff1f\n- family\u3068store\u306a\u3069\u306e\u95a2\u4fc2\u306f\u3042\u308a\u305d\u3046\u304b\uff1f","12843b62":"- oil\u306e\u4fa1\u683c\u306f\u4e0b\u304c\u3063\u3066\u3044\u308b\n    - \u539f\u6cb9\u4fa1\u683c\u304c\u4e0a\u6607\u3057\u3066\u3001\u7269\u4fa1\u304c\u4e0a\u304c\u3063\u305f\u3068\u3044\u3046\u30b9\u30c8\u30fc\u30ea\u30fc\u306f\u5d29\u308c\u308b\n    - \u305d\u3082\u305d\u3082\u539f\u6cb9\u4fa1\u683c\u306e\u63a8\u79fb\u3068\u58f2\u308a\u4e0a\u3052\u306e\u63a8\u79fb\u3092\u4e00\u7dd2\u306b\u898b\u306a\u3044\u3068\u7d50\u8ad6\u306f\u3067\u306a\u3044"}}