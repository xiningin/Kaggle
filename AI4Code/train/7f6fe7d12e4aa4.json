{"cell_type":{"f9fae2ec":"code","f24634e8":"code","93bd5e02":"code","10895bb3":"code","59463f50":"code","228af833":"code","618a9c06":"code","3dc6ca88":"code","f901237a":"code","175c3768":"code","f3f6a4ba":"code","3e707c0e":"code","41da6aeb":"code","82cd85b9":"markdown","c2f7585b":"markdown","e7251de9":"markdown","51f5fe01":"markdown","979dc9de":"markdown"},"source":{"f9fae2ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f24634e8":"df_train = pd.read_csv(\"..\/input\/home-data-for-ml-course\/train.csv\")\n\ndf_test = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')\n\ny = df_train['SalePrice']\n\ndf_train.drop('SalePrice',axis=1,inplace=True)\n\ntest_index = df_test['Id']","93bd5e02":"df = pd.concat([df_train.assign(ind=\"train\"), df_test.assign(ind=\"test\")])","10895bb3":"df_all = df.drop('ind',axis=1)\n\nbad_cat_cols = [col for col in  df_all.select_dtypes('object').columns if df_all[col].nunique()>=10]\n\ndf_all.drop(bad_cat_cols,axis=1,inplace=True)\n\ndf_all =pd.get_dummies(df_all)","59463f50":"train= df_all[:1460]\ntrain","228af833":"test = df_all[1460:]\ntest","618a9c06":"from xgboost import XGBRegressor","3dc6ca88":"model = XGBRegressor(n_estimators=1000,random_state=0,learning_rate=0.05)","f901237a":"model.fit(train.drop('Id',axis=1),y)","175c3768":"pred =model.predict(test.drop('Id',axis=1))","f3f6a4ba":"output = pd.DataFrame({'Id':test_index,\n                      'SalePrice':pred})","3e707c0e":"output.to_csv('using_XGBoost.csv',index=False)","41da6aeb":"pd.read_csv('using_XGBoost.csv')","82cd85b9":"## XGBRegressor","c2f7585b":"## Split back to train and test","e7251de9":"## Data","51f5fe01":"## Convert Catagorical to numeric","979dc9de":"## Concat train and test"}}