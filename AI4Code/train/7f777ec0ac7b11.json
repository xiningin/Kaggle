{"cell_type":{"8fff7c79":"code","9dc131bf":"code","aee751ff":"code","ad5891a5":"code","b9179bf1":"code","29e3d187":"code","37b962a3":"code","0c8fe180":"code","a28428d9":"code","661f31fc":"code","45d613cd":"code","44aab2d2":"code","60dd15c4":"code","0de06ebe":"code","2885db44":"code","479b94d5":"code","2062c73a":"markdown","22c0cfe9":"markdown","d41c7c22":"markdown"},"source":{"8fff7c79":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9dc131bf":"train = pd.read_csv(\"\/kaggle\/input\/fashionmnist\/fashion-mnist_train.csv\", sep=\",\")\ntest = pd.read_csv(\"\/kaggle\/input\/fashionmnist\/fashion-mnist_test.csv\", sep=\",\")\ntrain.head()","aee751ff":"print(\"train data shape is: \",train.shape)\nprint(\"test data shape is: \", test.shape)","ad5891a5":"test.head()","b9179bf1":"org_X = train.drop(['label'], axis = 1).values\nY = train['label'].values\nX_test = test.drop(['label'], axis = 1).values\nY_test = test['label'].values","29e3d187":"# reshape to 28x28 matrix\nX = org_X.reshape(org_X.shape[0],28,28,1)\nX_test = X_test.reshape(X_test.shape[0],28,28,1)\n\n#Y = tf.keras.utils.to_categorical(Y)\n\nprint(\"new X shape is: \", X.shape)\nprint(\"new Y shape is: \", Y.shape)","37b962a3":"class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","0c8fe180":"plt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(X[i][:,:,0], cmap=plt.cm.binary)\n    plt.xlabel(class_names[train.label[i]])\nplt.show()","a28428d9":"model = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28,1)),\n    keras.layers.BatchNormalization(momentum=0.99),\n    keras.layers.Dropout(0.25),\n    keras.layers.Dense(128, activation='relu'),\n    keras.layers.BatchNormalization(momentum=0.99),\n    keras.layers.Dense(10, activation='softmax')\n])\nmodel.summary()","661f31fc":"# compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","45d613cd":"from sklearn.model_selection import train_test_split\nX_train, X_dev, Y_train, Y_dev = train_test_split(X, Y, test_size = 0.2)","44aab2d2":"# train model\nmodel.fit(X, Y, epochs=30)","60dd15c4":"# evaluate model performance\ntest_loss, test_acc = model.evaluate(X_test, Y_test,verbose=2)\n\nprint('\\nTest accuracy: ', test_acc)\nprint('\\nTest loss: ', test_loss)","0de06ebe":"# reshape to 28x28 matrix\n#X = np.reshape(org_X,(org_X.shape[0],28,28,1))\n#X_train, X_dev, Y_train, Y_dev = train_test_split(X, Y, test_size = 0.8)\n\n# model2 with Convolution layers\nmodel2 = keras.Sequential([\n    keras.layers.Conv2D(32,kernel_size = (3,3),activation='relu',kernel_initializer='he_uniform', padding = 'same',input_shape=(28,28,1)),\n    keras.layers.Conv2D(32, (3,3), activation = 'relu',padding='same'),\n    keras.layers.BatchNormalization(),\n    keras.layers.MaxPooling2D(2,2),\n    keras.layers.Dropout(0.4),\n    \n    keras.layers.Conv2D(64,kernel_size = (3,3),activation='relu',padding = 'same'),\n    keras.layers.Conv2D(64, (3,3), activation = 'relu',padding='same'),\n    keras.layers.BatchNormalization(),\n    keras.layers.MaxPooling2D(2,2),\n    keras.layers.Dropout(0.2),\n    \n    #keras.layers.Conv2D(128,(3,3),padding='same'),\n    #keras.layers.Conv2D(128,(3,3),activation='relu'),\n    #keras.layers.BatchNormalization(momentum=0.99),\n    #keras.layers.MaxPooling2D(2,2),\n    \n    keras.layers.Flatten(),\n    keras.layers.BatchNormalization(),\n    keras.layers.Dense(128, activation ='relu'),\n    keras.layers.BatchNormalization(momentum=0.99),\n    keras.layers.Dense(10, activation='softmax')\n])\nmodel2.summary()","2885db44":"# compile the model\nmodel2.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# add early stopping\n#callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3)\n\n# train model\nmodel2.fit(X, Y, epochs=30,\n          validation_data=[X_dev,Y_dev],\n          #callbacks = [callback]\n          )","479b94d5":"# evaluate model performance\ntest_loss, test_acc = model2.evaluate(X_test, Y_test,verbose=2)\n\nprint('\\nTest accuracy: ', test_acc)\nprint('\\nTest loss: ', test_loss)","2062c73a":"## **1.2 What is Convolutional Neural Network?**","22c0cfe9":"# **1.Background**","d41c7c22":"## **1.1 What is Deep learning?**"}}