{"cell_type":{"7dc0a44a":"code","c82374d0":"code","6aa4bc25":"code","4dbde7ae":"code","369b718f":"code","98d378a8":"code","87e1f5de":"code","ab2e1750":"code","756269ec":"code","ae6f95c3":"code","ee4785e9":"code","08c4a0e9":"code","cd7b5113":"code","1d91cfa2":"code","af11d0f2":"code","98ff79e8":"code","67f59914":"code","73a4c26a":"code","cf5ee43c":"code","7deb064d":"code","ac170f48":"code","8f02a800":"code","d2b4cea1":"code","8737391e":"code","0431674b":"code","90f33659":"code","46f722b2":"code","31d36485":"code","b7c0f9bc":"code","3e9ab688":"code","1546a7a6":"code","ebc7c9d0":"code","67240826":"code","b271ca03":"markdown","25b1cd48":"markdown","e1a3449c":"markdown","5e58f2c8":"markdown","c00ad3eb":"markdown","a9f74775":"markdown","60111ad5":"markdown","7b8e4629":"markdown","19d0e84d":"markdown","566a5581":"markdown","97eb4d42":"markdown","287bd69d":"markdown","f0eb591f":"markdown","61bb631f":"markdown","8a25fb89":"markdown","fd17f6e9":"markdown","018c0b89":"markdown","075a4d23":"markdown","74f40f73":"markdown"},"source":{"7dc0a44a":"pip install emoji","c82374d0":"import datetime\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nfrom wordcloud import WordCloud, STOPWORDS\nimport emoji\n# import itertools \nfrom collections import Counter\nimport warnings\n\n%matplotlib inline\nwarnings.filterwarnings('ignore')","6aa4bc25":"def rawToDf(file, key):\n    '''Converts raw .txt file into a Data Frame'''\n    \n    split_formats = {\n        '12hr' : '\\d{1,2}\/\\d{1,2}\/\\d{2,4},\\s\\d{1,2}:\\d{2}\\s[APap][mM]\\s-\\s',\n        '24hr' : '\\d{1,2}\/\\d{1,2}\/\\d{2,4},\\s\\d{1,2}:\\d{2}\\s-\\s',\n        'custom' : '\\d{1,2}\/\\d{1,2}\/\\d{2,2},\\s\\d{1,2}:\\d{2}\\s[APap][mM]\\s-\\s',\n    }\n    datetime_formats = {\n        '12hr' : '%d\/%m\/%Y, %I:%M %p - ',\n        '24hr' : '%d\/%m\/%Y, %H:%M - ',\n        'custom':'%d\/%m\/%y, %I:%M %p - '   ## used 'y' to denote 2 no for year\n    }\n    \n    with open(file, 'r', encoding='utf-8') as raw_data:\n        # print(raw_data.read())\n        raw_string = ' '.join(raw_data.read().split('\\n')) # converting the list split by newline char. as one whole string as there can be multi-line messages\n        user_msg = re.split(split_formats[key], raw_string) [1:] # splits at all the date-time pattern, resulting in list of all the messages with user names\n        date_time = re.findall(split_formats[key], raw_string) # finds all the date-time patterns\n        \n        df = pd.DataFrame({'date_time': date_time, 'user_msg': user_msg}) # exporting it to a df\n        \n    # converting date-time pattern which is of type String to type datetime,\n    # format is to be specified for the whole string where the placeholders are extracted by the method \n    df['date_time'] = pd.to_datetime(df['date_time'], format=datetime_formats[key])\n    \n    # split user and msg \n    usernames = []\n    msgs = []\n    for i in df['user_msg']:\n        a = re.split('([\\w\\W]+?):\\s', i) # lazy pattern match to first {user_name}: pattern and spliting it aka each msg from a user\n        if(a[1:]): # user typed messages\n            usernames.append(a[1])\n            msgs.append(a[2])\n        else: # other notifications in the group(eg: someone was added, some left ...)\n            usernames.append(\"group_notification\")\n            msgs.append(a[0])\n\n    # creating new columns         \n    df['user'] = usernames\n    df['message'] = msgs\n\n    # dropping the old user_msg col.\n    df.drop('user_msg', axis=1, inplace=True)\n    return df","4dbde7ae":"df = rawToDf('..\/input\/whatsapp-analysis\/whatsapp.txt','12hr')\ndf","369b718f":"df.sample(10)","98d378a8":"df.user.unique()","87e1f5de":"df['day'] = df['date_time'].dt.strftime('%a')\ndf['month'] = df['date_time'].dt.strftime('%b')\ndf['year'] = df['date_time'].dt.year\ndf['date'] = df['date_time'].apply(lambda x: x.date())\ndf","ab2e1750":"new_df = df.copy()      # let's use a copy of our dataset for this analysis.\nnew_df['message_count'] = new_df.shape[0]*[1]      # adding extra helper column --> message_count.\nnew_df","756269ec":"new_df = new_df.groupby('date').sum().reset_index()  # grouping by date; since plot is of frequency of messages --> no. of messages \/ day.\nnew_df","ae6f95c3":"new_df.drop(columns='year', inplace=True)         # let's drop the year since we will need only the date and message count for our analysis\nnew_df","ee4785e9":"# Improving Default Styles using Seaborn\nsns.set_style(\"darkgrid\")\n\n# For better readablity;\nimport matplotlib\nplt.figure(figsize = (27, 10))     # Same as ``\n\n\nplt.title('Trend Of Messages Sent Per Day Over A Period Of Time');\nsns.lineplot(new_df.date, new_df.message_count);   \n\n #Alternatively\n## plt.plot(new_df.date, new_df.message_count)\n\n\n# Saving the plots\n# plt.savefig('msg_plots.svg', format = 'svg')","08c4a0e9":"top10days = new_df.sort_values(by=\"message_count\", ascending=False).head(10)    # Sort values according to the number of messages per day.\ntop10days.reset_index(inplace=True)           # reset index in order.\ntop10days.drop(columns=\"index\", inplace=True) # dropping original indices.\ntop10days","cd7b5113":"# Improving Default Styles using Seaborn\nsns.set_style(\"darkgrid\")\n\n# For better readablity;\nimport matplotlib\nmatplotlib.rcParams['font.size'] = 15\nplt.figure(figsize = (27, 15)) \n\n# A bar plot for top 10 days\nsns.barplot(top10days.date, top10days.message_count);\n\n# Saving the plots\nplt.savefig('top10_days.svg', format = 'svg')","1d91cfa2":"df2 = df.copy()    \ndf2 = df2[df2.user != \"group_notification\"]\ntop10df = df2.groupby(\"user\")[\"message\"].count().sort_values(ascending=False)\n\n# Final Data Frame\ntop10df = top10df.head(10).reset_index()\ntop10df","af11d0f2":"# Improving Default Styles using Seaborn\n# sns.set_style(\"whitegrid\")\n\n# Increasing the figure size\nmatplotlib.rcParams['font.size'] = 15\nplt.figure(figsize=(20, 9))\n\nplt.plot(top10df.user, top10df.message, marker='o', ls='--')\n\n# Labels and Title \nplt.xlabel('Users')\nplt.ylabel('Total number of messages')\n\nplt.title(\"Most Active Users In The Group & Their Count Of Total Messages Sent.\")\nplt.legend(['Messages']);","98ff79e8":"# Improving Default Styles using Seaborn\nsns.set_style(\"whitegrid\")\n\n# Increasing the figure size\nmatplotlib.rcParams['font.size'] = 15\nplt.figure(figsize=(25, 9))\n\n\nplt.title(\"Most Active Users In The Group & Their Count Of Total Messages Sent.\")\n\nplt.bar(top10df.user, top10df.message)   # basic bar chart\nplt.plot(top10df.user, top10df.message, marker='o', ls='--')  # line chart\nplt.show()","67f59914":"df2 = df.copy()    \ndf2 = df2[df2.user != \"group_notification\"]\nlast10df = df2.groupby(\"user\")[\"message\"].count().sort_values(ascending=True) #either change this or use the tail function instead of head below\n\n# Final Data Frame\nlast10df = last10df.head(10).reset_index() #if you did not set 'ascending=True', then use tail(10) over here instead of head(10)\nlast10df","73a4c26a":"# Improving Default Styles using Seaborn\nsns.set_style(\"whitegrid\")\n\n# Increasing the figure size\n\nplt.figure(figsize=(25, 9))\n\nplt.title(\"Members who sent least number of messages | Ghost Participants.\")\n\nplt.bar(last10df.user, last10df.message)   # basic bar chart\nplt.plot(last10df.user, last10df.message, marker='o', ls='--')  # line chart\nplt.show()","cf5ee43c":"df[df.message == '<Media omitted> ']","7deb064d":"index_no= df[df.message == '<Media omitted> '].index  ### index no stored","ac170f48":"# drop all rows with '<Media omitted> '\ndf= df.drop(index_no)","8f02a800":"# Check\ndf[df.message == '<Media omitted> ']","d2b4cea1":"# Using `groupby`, `count` and `sort_values` attributes.\ntop10media = df[df.message == '<Media omitted> '].groupby('user').count().sort_values(by=\"message\", ascending = False).head(10)\n\n# Dropping unused column;\ntop10media.drop(columns=['date_time', 'day', 'month', 'year', 'date'], inplace=True)\n\n# Renaming column name for visualization;\ntop10media.rename(columns={\"message\": \"media_sent\"}, inplace=True)\n\n# resetting index;\ntop10media.reset_index(inplace=True)\n\ntop10media\n","8737391e":"df[df['message'] == \"\"].shape","0431674b":"media_messages_df = df[df.message == '<Media omitted> ']\nmessages_df = df.drop(media_messages_df.index)\nmessages_df['Letter_Count'] = messages_df['message'].apply(lambda s : len(s))\nmessages_df['Word_Count'] = messages_df['message'].apply(lambda s : len(s.split(' ')))\nmessages_df[\"MessageCount\"]=1\n\n\n#PRINT ABOVE TO SEE RESULTS\n\nl = [\"IPL Sai Sunder\", \"Guru\",'Koustav','Juhi','Meera','TDS']\nfor i in range(len(l)):\n  # Filtering out messages of particular user\n  req_df= messages_df[messages_df[\"user\"] == l[i]]\n  # req_df will contain messages of only one particular user\n  print(f'Stats of {l[i]} :')\n  # shape will print number of rows which indirectly means the number of messages\n  print('Total Messages Sent', req_df.shape[0])\n  #Word_Count contains of total words in one message. Sum of all words\/ Total Messages will yield words per message\n  words_per_message = (np.sum(req_df['Word_Count']))\/req_df.shape[0]\n  print('Average Words per message', words_per_message)\n  #media conists of media messages\n  media = media_messages_df[media_messages_df['user'] == l[i]].shape[0]\n  print('Media Messages Sent', media)\n\n  print('---'*10)","90f33659":"df3 = df.copy()\ndf3['message_count'] = [1] * df.shape[0]    # new column that will keep count.\n \ndf3['hour'] = df3['date_time'].apply(lambda x: x.hour)\n \ngrouped_by_time = df3.groupby('hour').sum().reset_index().sort_values(by = 'hour')","46f722b2":"# Better Readablity\nimport matplotlib\nmatplotlib.rcParams['font.size'] = 15\nmatplotlib.rcParams['figure.figsize'] = (20, 10)\n\n# Beautifying Default Styles using Seaborn\n# sns.set_style(\"darkgrid\")\n\n# PLOT: grouped by hour\nsns.barplot(grouped_by_time.hour, grouped_by_time.message_count)\nplt.title('Most Active Hours Of The Day');","31d36485":"# specific `order` to be printed in;\n# days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n# grouping by day;\ngrouped_by_day = df3.groupby('day').sum().reset_index()[['day', 'message_count']]","b7c0f9bc":"# Better Readablity\nimport matplotlib\nmatplotlib.rcParams['font.size'] = 15\nmatplotlib.rcParams['figure.figsize'] = (20, 10)\n\n# Beautifying Default Styles using Seaborn\n# sns.set_style(\"darkgrid\")\n\n# PLOT: grouped by hour\nsns.barplot(grouped_by_day.day, grouped_by_time.message_count)\nplt.title('Most Active Hours Of The Day');","3e9ab688":"# specific `order` to be printed in;\n# months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep']   # till Sept, since chats are till Septemeber\n# grouping by month;\ngrouped_by_month = df3.groupby('month').sum().reset_index()[['month', 'message_count']]","1546a7a6":"# Better Readablity\nimport matplotlib\nmatplotlib.rcParams['font.size'] = 15\nmatplotlib.rcParams['figure.figsize'] = (20, 10)\n\n# Beautifying Default Styles using Seaborn\n# sns.set_style(\"darkgrid\")\n\n# PLOT: grouped by hour\nsns.barplot(grouped_by_month.month, grouped_by_time.message_count)\nplt.title('Most Active Hours Of The Day');","ebc7c9d0":"\ncomment_words = ' '\n\n# stopwords --> Words to be avoided while forming the WordCloud,\n# removed group_notifications like 'joined', 'deleted';\n# removed really common words like \"yeah\" and \"okay\".\n# stopwords = STOPWORDS.update(['group', 'link', 'invite', 'joined','join', 'message', 'deleted', 'yeah', 'hai', 'yes', 'okay', 'ok', 'will', 'use', 'using', 'one', 'know', 'guy', 'group', 'media', 'omitted'])\n\n\n# iterate through the DataFrame.\nfor val in df3.message.values:\n    \n    # typecaste each val to string.\n    val = str(val) \n    \n    # split the value.\n    tokens = val.split() \n    \n    # Converts each token into lowercase.\n    for i in range(len(tokens)): \n        tokens[i] = tokens[i].lower() \n          \n    for words in tokens: \n        comment_words = comment_words + words + ' '\n  \n  \nwordcloud = WordCloud(width = 1000, height = 800, \n                background_color ='white',  \n                min_font_size = 8).generate(comment_words)","67240826":"wordcloud.to_image()","b271ca03":"##**Check top 10 active users in the group.**","25b1cd48":"Over here we will use the date and the count of messages to understand the overall trend of messaging in the group.","e1a3449c":"# **WhatsApp Chat Analysis**","5e58f2c8":"##**Check top 10 most active days of messaging.**","c00ad3eb":"In this Notebook we will be using the following :\n\n**Regex (re)** to extract and manipulate strings based on specific patterns.\n\nRefer to the following resources for more about regular expressions.\n\n  * [Regex - Python Docs](https:\/\/docs.python.org\/3\/library\/re.html)\n    \n  * [Regex cheatsheet](https:\/\/www.rexegg.com\/regex-quickstart.html)\n    \n  * [Regex Test - live](https:\/\/regexr.com\/)\n\n","a9f74775":"## **Check Top 10 Users Most Sent Media, Total Messages, Average Words Per Messsage .**","60111ad5":"As we can see, the person who message most in the group is IPL Sai Sunder followed by Guru and so on.","7b8e4629":"## **Create a WordCloud for the most used words.**","19d0e84d":"\nNOTE:\n\n* Since **WhatsApp texts are multi-line,** we cannot just read the file line by line and get each message that we want. Instead, we need a way to identify `if a line is a new message or part of an old message`. You could use regular expressions.\n* While reading each line, I split it based on a comma and take the first item returned from the split() function. If the line is a new message, the first item would be a valid date, and it will be appended as a new message to the list of messages. If it\u2019s not, the message is part of the previous message, and hence, will be appended to the end of the previous message as one continuous message.","566a5581":"## Most active **Months**","97eb4d42":"<br>\n\n##**Fing out the ghosts\/inactive members the in the group.**\n\nWe can also find out those who are just spectators in the group. They just read messages and pass by.","287bd69d":"\n# **Task to do:**\n\n1. Check overall frequency of total messages on the group.\n\n2. Check top 10 most active days of messaging.\n\n3. Check top 10 active users in the group.\n\n4. Fing out the ghosts\/inactive members the in the group.\n\n5. Check Top 10 Users Most Sent Media, Total Messages, Average Words Per Messsage.\n\n7. Most active hours of the days.\n\n3. Most active Days of the Month\n9. Most active months of the year.\n9. Create a WordCloud for the most used words.\n6. Check top 10 most used emojis.","f0eb591f":"<br>\n\n## **Import The Necessary Libraries**","61bb631f":"## Most active **hours**","8a25fb89":"We can see that there times where there will more messages being sent in the group, as much as about 158 in 0ctober 20219. \n\nWe can also notice that somewhere July 2020, there was less messages being sent in the group. Overall, the trend is inconsistent, sometimes more chats go on, sometimes the group becomes silent and that's the normal behavior of typical WhatsApp group.","fd17f6e9":"We can also plot both Bar Graph and Line Chart for better view.\n","018c0b89":"##**Adding Day, Month, Year, and Date for further analysis**","075a4d23":"## **Check overall frequency of total messages on the group.**","74f40f73":"## Most active **Days**"}}