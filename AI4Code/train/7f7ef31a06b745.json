{"cell_type":{"24fbd5b0":"code","c29ca8a0":"code","78b97b4d":"code","839e8d16":"code","0cf162ff":"code","e7db2fde":"code","43881e55":"code","7abd7693":"code","56e997b4":"code","7b243388":"code","78caeba9":"code","dfb29fea":"code","13da6cf0":"code","169cae9c":"code","06cc6a22":"code","1ee17eac":"code","9f462d27":"code","dc516ae5":"code","7d74c645":"code","3e2f3bd0":"code","bc3e0edd":"code","13b1832a":"code","d3582b4b":"code","f839911d":"code","955e8363":"code","eb13b58b":"code","e8acd489":"markdown","5ce1f2ae":"markdown"},"source":{"24fbd5b0":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom sklearn.model_selection import train_test_split\nimport tensorflow\nimport keras\nfrom tensorflow.keras.models import Sequential\nfrom  tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nsns.set(style='white', context='notebook', palette='deep')\n","c29ca8a0":"train=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest=pd.read_csv('..\/input\/digit-recognizer\/test.csv')","78b97b4d":"train.shape","839e8d16":"test.shape","0cf162ff":"#normilize the image data sets\ntrain=train\/255.0\ntest=test\/255.0","e7db2fde":"Y_train = train[\"label\"]\n\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) \n","43881e55":"X_train= train.drop(labels=['label'],axis=1)","7abd7693":"Y_train=train['label']","56e997b4":"X_train.isnull().any().describe()","7b243388":"# Normalize the data\nX_train = X_train \/ 255.0\ntest = test \/ 255.0","78caeba9":"test.shape","dfb29fea":"test.shape","13da6cf0":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","169cae9c":"#label encoding\n# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nY_train = to_categorical(Y_train, num_classes = 10)","06cc6a22":"# Split the train and the validation set for the fitting\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=0)","1ee17eac":"# Some examples\ng = plt.imshow(X_train[0][:,:,0],cmap=plt.get_cmap('gray'))","9f462d27":"model=Sequential()\nmodel.add(Conv2D(filters=32,kernel_size=(5,5),padding='Same',activation='relu',input_shape=(28,28,1)))\nmodel.add(Conv2D(filters=32,kernel_size=(5,5),padding='Same',activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters=64,kernel_size=(2,2),padding='Same',activation='relu'))\nmodel.add(Conv2D(filters=64,kernel_size=(2,2),padding='Same',activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(256,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10,activation='softmax'))","dc516ae5":"# Define the optimizer\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","7d74c645":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","3e2f3bd0":"# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","bc3e0edd":"datagen=ImageDataGenerator(featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images,\n        vertical_flip=False)\ndatagen.fit(X_train)","13b1832a":"batch_size=32","d3582b4b":"history = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = 2, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","f839911d":"fig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)","955e8363":"predictions = model.predict_classes(X_val, verbose=0)\n\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})","eb13b58b":"submissions.to_csv(\"digit.csv\", index=False, header=True)","e8acd489":"# if notebook is used full please upvote","5ce1f2ae":"# Hand written digit using cnn"}}