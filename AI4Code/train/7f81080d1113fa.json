{"cell_type":{"b1c35879":"code","7ff60ae9":"code","22a27e3c":"code","1bd49ca3":"code","6262b751":"code","f3f3bc32":"code","f9ebf9b3":"code","03fa16c4":"code","e997e54d":"code","00ac14ee":"code","ac018489":"code","86095463":"code","c0764782":"code","5a85b1c8":"code","f594d88d":"code","1a79dc3d":"code","300ce751":"code","b4b3eb90":"code","8ba12166":"code","845a30fc":"code","229213a2":"code","8b75aca7":"code","525b3b92":"code","f00c8c70":"code","26803d8e":"code","f91e9670":"code","d80dbd27":"code","a5a7d46d":"code","5928690f":"code","e7dc9012":"code","112bb5f5":"markdown","92d3ae5e":"markdown","e255682f":"markdown","2f2121fd":"markdown"},"source":{"b1c35879":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7ff60ae9":"train=pd.read_csv('..\/input\/digit-recognizer\/train.csv')","22a27e3c":"train","1bd49ca3":"# Each image is 28 pixels in height and 28 pixels in width, for a total of 784 pixels in total. Each pixel has a single pixel-value associated with it,\n# indicating the lightness or darkness of that pixel, with higher numbers meaning darker. This pixel-value is an integer between 0 and 255, inclusive.\n\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\n# We take first 9 digits\nplt.figure(figsize=(8,8))\nfor i in range(9):\n    image=np.asarray(train.iloc[i,1:].values.reshape((28,28))\/255); # create matrix of 28*28\n    ax=plt.subplot(3,3,i+1);\n    ax.grid(False)\n    plt.imshow(image,cmap='gray')\nplt.show()\n    \n\n","6262b751":"# Observation: In dataset there are some same digits but with different dimensions like 0,1 etc.\nhue_color={0:'#b5e48c',1:'#99d98c',2:'#76c893',3:'#52b69a',4:'#34a0a4',5:\"#168aad\",\n          6:\"#1a759f\",7:\"#1e6091\",8:\"#184e77\",9:'#013a63'}\nplt.style.use(\"fivethirtyeight\")\nax=sns.countplot(data=train,x='label',palette=hue_color)\nplt.gcf().set_size_inches(12,6)\nplt.show()","f3f3bc32":"data=train.drop(columns='label')\nnonZeroPixel=[]\nj=0 \nfor i in data.columns:\n    if max(data[i])==0:\n        nonZeroPixel.append(j)\n    j=j+1 \n    \n# In this code we find the pixels which never have non zero value. \n# We do not need the pixels which have only 0 value for all the lables. Because its does not give any new information about the lables.","f9ebf9b3":"print(nonZeroPixel)\n\n# There are 76 pixels which have only 0 value(indicate black colour)","03fa16c4":"print(len(nonZeroPixel))","e997e54d":"# Create list of nonZeroPixels\n\ndrop=[]\nfor i in nonZeroPixel:\n    drop.append('pixel'+str(i))\n\n# Some elements of drop list    \nprint(drop[:15])\nlen(drop)","00ac14ee":"train_data=train.drop(columns=drop)\nlen(train_data.columns)","ac018489":"train_data","86095463":"print(train_data['pixel770'].unique())\n","c0764782":"print(len(train_data['pixel770'].unique()))","5a85b1c8":"# First we normalize the data\n\nnormalized_data=train_data\/255\n","f594d88d":"print(normalized_data['pixel770'].unique())\nprint(len(normalized_data.columns))","1a79dc3d":"normalized_data['label']=train['label']\nnormalized_data.head()","300ce751":"from matplotlib import pyplot as plt\nimport tensorflow.keras as keras\nfrom sklearn.model_selection import train_test_split","b4b3eb90":"X= normalized_data.iloc[:,1:]\nY=normalized_data.iloc[:,0:1]\n","8ba12166":"train,val,train_label,val_label=train_test_split(X,Y,test_size=0.2)\ntrain.shape","845a30fc":"# Create Sequential neural network with single layer of 128 neurons\nfrom tensorflow.keras.models import Sequential\n\nkeras.backend.clear_session()\nmodel=keras.models.Sequential([\n    # HIDDEN LAYER with 128 neurons\n    keras.layers.Dense(128,activation='relu',input_dim=708),\n    # OUTPUT LAYER with 10 class labels\n    keras.layers.Dense(10,activation='softmax')\n])\n# Setting callback EarlyStopping to prevent the overfitting of the model\nearly=keras.callbacks.EarlyStopping(patience=10)\n# Setting callbacks ModelCheckpoint to save the model with best validation accuracy during training period in 'model.h5' file format\nmodel_check=keras.callbacks.ModelCheckpoint('model.h5',save_best_only=True)\nmodel.compile(loss = 'sparse_categorical_crossentropy',optimizer = 'adam',metrics = ['accuracy'])\nhistory=model.fit(train,train_label,epochs=15,validation_data=(val,val_label),callbacks=[model_check,early])\n","229213a2":"sample=pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')","8b75aca7":"sample","525b3b92":"model=keras.models.load_model('model.h5')","f00c8c70":"test=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest=test.drop(columns=drop)\ntest.head()","26803d8e":"predications=model.predict(test)\npredications.shape","f91e9670":"predications","d80dbd27":"#Retrieve most likely classes\npred=np.argmax(predications,axis=1)","a5a7d46d":"pred","5928690f":"submission=pd.DataFrame({\"ImageId\":test.index+1,\"Label\":pred})\nsubmission","e7dc9012":"submission.to_csv('submission.csv',index=False)","112bb5f5":"# Model Building","92d3ae5e":"Observation:  1. Above array represents the predicated class labels.","e255682f":"Observation: 1.  Neural  network returns 2D array of 10 class labels(0-9) which contain 0 and 1.\n\n             2. The class label which has 0 value, means the predicated digit does not belong to that class label.\n             \n             3. The class label which has value 1, means the predicated digit belongs to that class label","2f2121fd":"# Train basic neural network"}}