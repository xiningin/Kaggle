{"cell_type":{"8fa86710":"code","e063adc1":"code","c2801d5a":"code","3f54a995":"code","09383e74":"code","bbe1c2e0":"code","275dd5f8":"code","ba14f15d":"code","9ce9652c":"code","63251134":"markdown","73b9b261":"markdown","2fe355f8":"markdown","f2c7e59b":"markdown"},"source":{"8fa86710":"import numpy as np \nimport pandas as pd \nfrom path import Path\n\nimport os\n\nfrom ipywidgets import interact, interact_manual\nfrom IPython.display import display\n\nimport cufflinks as cf","e063adc1":"pd.set_option('display.max_rows', 500)\npd.set_option('use_inf_as_na', True)\ncf.set_config_file(offline=True, theme='solar');","c2801d5a":"input_path = Path(\"..\/input\/novel-corona-virus-2019-dataset\/\")","3f54a995":"master_df = pd.read_csv(input_path\/'covid_19_data.csv', index_col='SNo', \n                        parse_dates=['Last Update', 'ObservationDate'])","09383e74":"master_df = master_df.sort_values(['ObservationDate', 'Last Update'])\nmaster_df['Province\/State'] = master_df['Province\/State'].fillna(master_df['Country\/Region'])","bbe1c2e0":"@interact\ndef plot_cumulative(countries=list(master_df['Country\/Region'].sort_values().unique())):\n    df = master_df[master_df['Country\/Region'] == countries].drop_duplicates(subset=['Last Update'])\n    df = df.groupby('ObservationDate', as_index=False).sum() \n    day_num_df = pd.DataFrame(data={'ObservationDate': pd.date_range(df['ObservationDate'].min(), df['ObservationDate'].max()), \n                                    'day_num': 1})\n    day_num_df['day_num'] = day_num_df['day_num'].cumsum() - 1\n    df = df.merge(day_num_df, on='ObservationDate', how='left')\n#     display(df)\n    df.iplot(kind='line', x='day_num', y='Confirmed', secondary_y=['Deaths', 'Recovered'], \n             title=countries, xTitle='Day Number', yTitle='Number of People')","275dd5f8":"desc_countries_by_confirmed = master_df.groupby(['Country\/Region']).last().sort_values('Confirmed', ascending=False).index.to_list()","ba14f15d":"@interact\ndef plot_daily(countries=desc_countries_by_confirmed):\n    df = master_df[master_df['Country\/Region'] == countries].drop_duplicates(subset=['Last Update'])\n    df = df.groupby('ObservationDate', as_index=False).sum() \n    day_num_df = pd.DataFrame(data={'ObservationDate': pd.date_range(df['ObservationDate'].min(), df['ObservationDate'].max()), \n                                    'day_num': 1})\n    day_num_df['day_num'] = day_num_df['day_num'].cumsum() - 1\n    df = df.merge(day_num_df, on='ObservationDate', how='left').sort_values('day_num', ascending=False)\n    df = df.set_index('day_num')\n\n    df['Confirmed'] = df['Confirmed'] -  df['Confirmed'].shift(-1)\n    df['Deaths'] = df['Deaths'] -  df['Deaths'].shift(-1)\n    df['Recovered'] = df['Recovered'] -  df['Recovered'].shift(-1)\n#     display(df)\n    df.iplot(kind='scatter', mode='markers', y='Confirmed', secondary_y=['Recovered', 'Deaths'], \n             title=countries, xTitle='Day Number', yTitle='Number of People', size=7)","9ce9652c":"@interact\ndef pct_change(countries=list(master_df['Country\/Region'].unique())):\n    df = master_df[master_df['Country\/Region'] == countries].drop_duplicates(subset=['Last Update'])\n    df = df.groupby('ObservationDate', as_index=False).sum() \n    day_num_df = pd.DataFrame(data={'ObservationDate': pd.date_range(df['ObservationDate'].min(), df['ObservationDate'].max()), \n                                    'day_num': 1})\n    day_num_df['day_num'] = day_num_df['day_num'].cumsum() - 1\n    df = df.merge(day_num_df, on='ObservationDate', how='left') \n    df = df.set_index('day_num')\n\n    df[['Confirmed', 'Deaths', 'Recovered']] = df[['Confirmed', 'Deaths', 'Recovered']].pct_change()*100\n    df = df.dropna(how='any')\n#     display(df)\n    df.iplot(kind='scatter', mode='markers+lines', x='ObservationDate', y=['Confirmed', 'Deaths', 'Recovered'], \n             title=countries, xTitle='Date', yTitle='Percentage Change', size=7)","63251134":"# Daily Absolute Change","73b9b261":"# Daily Percentage Change","2fe355f8":"#### To play around with interactive widgets, *Fork* the notebook!\n\n*>* Charts in increasing order of difficulty to create *<*","f2c7e59b":"# Cumulative Change"}}