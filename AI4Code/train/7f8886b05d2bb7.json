{"cell_type":{"5aa295e4":"code","44af5f18":"code","f29d3202":"code","a0f10001":"code","6e9b1db6":"code","0ef7e73a":"code","92633cf3":"code","84f7172f":"code","e482b576":"code","364b7045":"code","5ca41d3d":"code","23f9d810":"code","df7c84be":"code","a29aa988":"code","f683345e":"code","eedac5c0":"code","fc8048ce":"code","1567f95f":"markdown","dd1de936":"markdown","9d252246":"markdown","6d95c3c4":"markdown","5d86664f":"markdown","43157745":"markdown"},"source":{"5aa295e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","44af5f18":"import pandas as pd\nfrom datetime import datetime\nfrom sklearn import preprocessing\nfrom xgboost import XGBRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\n# from sklearn.linear_model import LogisticRegression\n# from sklearn.linear_model import LinearRegression\n# from sklearn.ensemble import RandomForestRegressor ","f29d3202":"path = '\/kaggle\/input\/covid19-global-forecasting-week-2\/'\ndf_train = pd.read_csv(path+'train.csv')\ndf_test = pd.read_csv(path+'test.csv')","a0f10001":"df_train['Date'] = pd.to_datetime(df_train['Date'], infer_datetime_format=True)\ndf_test['Date'] = pd.to_datetime(df_test['Date'], infer_datetime_format=True)","6e9b1db6":"df_train.head()","0ef7e73a":"EMPTY_VAL = \"EMPTY_VAL\"\n\ndef fillState(state, country):\n    if state == EMPTY_VAL: return country\n    return state","92633cf3":"df_train['Province_State'].fillna(EMPTY_VAL, inplace=True)\ndf_train['Province_State'] = df_train.loc[:, ['Province_State', 'Country_Region']].apply(lambda x : fillState(x['Province_State'], x['Country_Region']), axis=1)\n\ndf_train.loc[:, 'Date'] = df_train.Date.dt.strftime(\"%m%d\")\ndf_train[\"Date\"]  = df_train[\"Date\"].astype(int)\n\nprint(df_train.shape)\ndf_train.head()","84f7172f":"df_test['Province_State'].fillna(EMPTY_VAL, inplace=True)\ndf_test['Province_State'] = df_test.loc[:, ['Province_State', 'Country_Region']].apply(lambda x : fillState(x['Province_State'], x['Country_Region']), axis=1)\n\ndf_test.loc[:, 'Date'] = df_test.Date.dt.strftime(\"%m%d\")\ndf_test[\"Date\"]  = df_test[\"Date\"].astype(int)\n\nprint(df_test.shape)\ndf_test.head()","e482b576":"le = preprocessing.LabelEncoder()\n\ndf_train['Country_Region'] = le.fit_transform(df_train['Country_Region'])\ndf_train['Province_State'] = le.fit_transform(df_train['Province_State'])\n\ndf_test['Country_Region'] = le.fit_transform(df_test['Country_Region'])\ndf_test['Province_State'] = le.fit_transform(df_test['Province_State'])","364b7045":"df_train.head(2)","5ca41d3d":"df_test.head(2)","23f9d810":"unique_countries = df_train['Country_Region'].unique()","df7c84be":"def build_model_1():\n    model = RandomForestRegressor(n_estimators = 100, random_state = 0) \n    return model\n\ndef build_model_2():\n    model = XGBRegressor(n_estimators=1000)\n    return model\n\ndef build_model_3():\n    model = DecisionTreeRegressor(random_state=1)\n    return model\n\ndef build_model_4():\n    model = LogisticRegression()\n    return model\n\ndef build_model_5():\n    model = LinearRegression()\n    return model\n\ndef build_model_6():\n    model = LGBMRegressor(random_state=5)\n    return model\n\ndef build_model_7():\n    model = LGBMRegressor(iterations=2)\n    return model\n","a29aa988":"df_out = pd.DataFrame({'ForecastId': [], 'ConfirmedCases': [], 'Fatalities': []})","f683345e":"for country in range(len(unique_countries)):\n    current_country_df_train = df_train.loc[df_train['Country_Region'] == unique_countries[country]]\n    current_country_df_test = df_test.loc[df_test['Country_Region'] == unique_countries[country]]\n    print(\"Current Country: \", unique_countries[country])\n    \n#     print(current_country_df_train.head(2))\n#     print(current_country_df_test.head(2))\n    \n    # Create X and Y\n    X_train = current_country_df_train[['Country_Region', 'Province_State', 'Date']].to_numpy()\n    Y1_train = current_country_df_train[['ConfirmedCases']].to_numpy()\n    Y2_train = current_country_df_train[['Fatalities']].to_numpy()\n    X_test = current_country_df_test[['Country_Region', 'Province_State', 'Date']].to_numpy()\n    \n    Y1_train = Y1_train.reshape(-1)\n    Y2_train = Y2_train.reshape(-1)\n#     print(X_train.shape, Y1_train.shape, Y2_train.shape)\n#     print(X_train.shape, Y1_train.reshape(-1), Y2_train.shape)\n    \n    \n    model1 = build_model_2()\n    model1.fit(X_train, Y1_train)\n    res_cnf_cls = model1.predict(X_test)\n    \n    \n    model2 = build_model_2()\n    model2.fit(X_train, Y2_train)\n    res_fac = model2.predict(X_test)\n    \n    current_country_df_test_Id = current_country_df_test.loc[:, 'ForecastId']\n    df_ans = pd.DataFrame({'ForecastId': current_country_df_test_Id, 'ConfirmedCases': res_cnf_cls, 'Fatalities': res_fac})\n    df_out = pd.concat([df_out, df_ans], axis=0)\n   \n    \n#     if country == 1:\n#         break","eedac5c0":"df_out.ForecastId = df_out.ForecastId.astype('int')\ndf_out.head(100)","fc8048ce":"df_out.to_csv('submission.csv', index=False)","1567f95f":"# Model Building","dd1de936":"# Preprocessing","9d252246":"# Import Libraries","6d95c3c4":"# Training and Prediction","5d86664f":"# [YouTube Video](https:\/\/youtu.be\/1CwkkQO_rUk) Tutorial\nhttps:\/\/youtu.be\/1CwkkQO_rUk","43157745":"# Load CSV"}}