{"cell_type":{"5cdcfc71":"code","b55206f0":"code","48d810df":"code","249dec0c":"code","7704730e":"code","cdb3c544":"code","9e8b81d1":"code","7f4b67f7":"code","93f9f8fb":"code","7581689f":"code","18dee768":"code","bf5dfdf0":"code","8c259bd7":"code","d52dfc6b":"code","d25bbde4":"code","860f8adc":"code","ab08addb":"code","5cc98628":"code","cec71677":"code","234fc1e1":"code","65c2632f":"code","cb781da9":"code","0f33bf5d":"code","b710e171":"code","afff8682":"code","3fdbdb10":"code","b70546c2":"code","bab03aa0":"code","9b7600b5":"code","0fbcc678":"code","dd089a4b":"code","4cbce213":"code","869a8bf4":"code","69e04fa5":"code","79dff58f":"code","d09156cc":"code","5180482d":"code","414505ca":"code","e412b6fd":"code","f7f81b4c":"code","90b5a2bf":"code","d3d148eb":"code","6070b237":"code","f0c5de5c":"code","83da19ee":"code","d06c4a15":"code","3a8d8e07":"code","ad32494f":"code","216e2c58":"code","fff1e0ea":"code","b676cb21":"code","0caa0013":"code","8cc34a31":"code","f5aa2f31":"code","87f9f3c2":"code","d5b412f6":"code","4297e582":"code","be25d99c":"code","7a825bd4":"code","648737ae":"code","d730c596":"code","f31d47e0":"code","34f3591b":"code","94030976":"code","ca096ebf":"code","92b27954":"code","6197f8a7":"code","17807f0e":"code","92236a5d":"code","114e7bbb":"code","e643c694":"code","d3db7789":"code","bfd6a1dc":"code","e28b58d5":"code","e529f3e9":"code","cd3839ab":"code","0cff36cb":"code","79daa478":"code","9f0c5606":"code","a640476b":"code","03182f17":"code","e58be2a5":"code","45d1dd42":"code","6225c95d":"code","7296c650":"code","ab1e101e":"code","7885c1fa":"code","ddccaad9":"code","47eeb1e8":"code","37496a4c":"code","a4f09be6":"code","d8d0a1d6":"code","22a03b17":"code","fcd060e3":"code","cabf1214":"code","c40d50c9":"code","5a2e4e5f":"code","f038befc":"code","dc7c2fd5":"code","c21e1d10":"code","799f85cc":"code","64e4c4e5":"code","08b6c8ed":"code","55f83fc2":"code","f7e7cd11":"code","e4be7744":"code","58618933":"code","eb32864c":"code","d68dd480":"code","0f6420ca":"code","8e078b21":"code","baf97d74":"code","e9b9d75c":"code","08b1e4df":"code","2e3b9be7":"code","0be9f220":"code","c93651ee":"code","ce408c85":"code","f719d864":"code","3f10988c":"code","83ad3046":"code","6e3b5a99":"code","0dafc9d4":"code","057e1b1e":"code","7a6cfa6e":"code","0d5fd5ed":"code","7c145dc6":"code","f0bd3c76":"code","cc2371bd":"code","9ee135f1":"code","2ed318cf":"code","b2a85514":"code","13192af9":"code","bd24210e":"code","89d43035":"code","00278841":"code","6603d335":"code","803bc743":"code","e99b4033":"code","48a7adc7":"code","cbad7e9f":"code","39b234d6":"code","c7245fa4":"code","e52ee863":"code","bfd02efd":"code","622a8a47":"code","27f7799f":"code","d1948c1a":"code","5d98eda0":"code","a348958c":"code","6fabb3ec":"code","532d0bec":"code","5a142c15":"code","9e94c822":"code","3bdd1b19":"code","e25fe46a":"code","745bea38":"code","26388ea1":"code","8c5338b2":"code","286f8cb0":"code","adf9d8e1":"code","529e26ea":"markdown","a0279d6d":"markdown","fe9227e1":"markdown","62c4ec63":"markdown","b3673c05":"markdown","2522c3c1":"markdown","ff8d71d2":"markdown","5c83da22":"markdown","00c7951d":"markdown","a3a696f8":"markdown","e7cb9454":"markdown","145e5470":"markdown","06825666":"markdown","5cba7771":"markdown","d9d73bc6":"markdown","aadc1c3b":"markdown","c726fd1f":"markdown","7fd3dc3f":"markdown","275082af":"markdown","cbde018e":"markdown","ec234efa":"markdown","0a3520e5":"markdown","733b1d79":"markdown","41787376":"markdown","4cd8cf5e":"markdown","db896523":"markdown","94c00721":"markdown","b5a5df55":"markdown","b8bef31c":"markdown","fcfb57eb":"markdown","a2222e9e":"markdown","31cd8d64":"markdown","1fdd8be5":"markdown","616ba4bf":"markdown","b7904838":"markdown","7f85f2d5":"markdown","9add816e":"markdown","54700b50":"markdown","3027992e":"markdown","48b1eec6":"markdown","9b0ea714":"markdown","70649792":"markdown","c56c8d19":"markdown","bc61b4b4":"markdown","b8a851f6":"markdown","fac99ef9":"markdown","fe6a7c59":"markdown","2190c151":"markdown","ca5547c7":"markdown","251395f7":"markdown","be27274b":"markdown","38e94f5b":"markdown","1c483a07":"markdown","18aa994f":"markdown","0afa8bf6":"markdown","75c8f369":"markdown","c270ae75":"markdown","2fb58a00":"markdown","4bbf6c1d":"markdown","86d5a6c0":"markdown"},"source":{"5cdcfc71":"import numpy as np","b55206f0":"np.array(74) # 0 dimensional array","48d810df":"np.array([1,2,3,4,5]) # 1 dimensional array","249dec0c":"np.array([[1,2,3,4,5],[6,7,8,9,19]]) # 2 dimensional array - do not forget brackets!","7704730e":"np.array([[[1,2,3,4,5],[6,7,8,9]],[[11,23,43,45,65],[63,45,284,49]]]) \n# 3 dimensional array - An array that has 2-D arrays (matrices)","cdb3c544":"a = np.array([2,1,23,3])","9e8b81d1":"a.ndim","7f4b67f7":"a.shape","93f9f8fb":"a.size","7581689f":"a.dtype","18dee768":"arr = np.array([1,2,3])","bf5dfdf0":"arr","8c259bd7":"type(arr) # Type of array is ndarray","d52dfc6b":"arr.shape","d25bbde4":"list1 = [1,6,2.7,3]","860f8adc":"arr2 = np.array(list1)","ab08addb":"arr2 # all of them are float","5cc98628":"type(arr2)","cec71677":"arr3 = np.array([1.9,23.5,32.5],dtype=\"int\") # We can specify data type with dtype argument","234fc1e1":"arr3","65c2632f":"np.zeros(10)","cb781da9":"np.zeros(5,dtype=int)","0f33bf5d":"np.ones(3)","b710e171":"np.ones((2,4),dtype=\"int\") # 2 dimensional arrays","afff8682":"np.full((2, 5), 6)","3fdbdb10":"np.eye(4)","b70546c2":"np.arange(2,20,2) # It creates a linear series","bab03aa0":"np.arange(5,100,7)","9b7600b5":"np.linspace(0,1,10) # It creates 10 values between 0 and 1","0fbcc678":"np.random.normal(10,4,(2,5)) # It creates (2,5) arrays with 10 mean and 4 standart deviation","dd089a4b":"np.random.randint(2,10,9)","4cbce213":"a = np.arange(0,10)","869a8bf4":"a","69e04fa5":"a[0]","79dff58f":"a[2:5] # It is also called slicing","d09156cc":"a[-1] # Last item of an array","5180482d":"a[1::2]","414505ca":"a[::-1]","e412b6fd":"arr = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])","f7f81b4c":"arr","90b5a2bf":"arr.shape","d3d148eb":"arr[0]","6070b237":"arr[1,2]","f0c5de5c":"arr[0,2:]","83da19ee":"arr[0][2:] # Same with above.","d06c4a15":"arr[2][:2]","3a8d8e07":"arr[:3,:] # All columns till 3rd row","ad32494f":"arr[:,:3] # All rows till 3rd columns","216e2c58":"arr[2][3] = 100","fff1e0ea":"arr","b676cb21":"arr2 = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])","0caa0013":"arr2","8cc34a31":"arr2>2","f5aa2f31":"arr2[arr2>2]","87f9f3c2":"arr = np.random.randint(20, size=(4,5))","d5b412f6":"arr","4297e582":"sub_arr = arr[:2,:3]","be25d99c":"sub_arr","7a825bd4":"sub_arr[0,0] =99","648737ae":"sub_arr","d730c596":"arr \n# When we made changes in subset, main array has also changed. In order to avoid from it, we can use copy(function)","f31d47e0":"arr = np.random.randint(20, size=(4,5))","34f3591b":"sub_arr = arr[:2,:3].copy()","94030976":"sub_arr","ca096ebf":"sub_arr[0,0] =99","92b27954":"sub_arr","6197f8a7":"arr # Main array did not change.","17807f0e":"arry = np.arange(1,10)","92236a5d":"arry","114e7bbb":"arry.shape","e643c694":"reshaped_array = arry.reshape(3,3) # It converts 1-D array to 2-D array.","d3db7789":"reshaped_array","bfd6a1dc":"reshaped_array.shape","e28b58d5":"np.arange(1,10).reshape(3,3)","e529f3e9":"a1= np.arange(1,10)","cd3839ab":"a1","0cff36cb":"a1.ndim # One dimensional array","79daa478":"a2 = np.arange(1,10).reshape((1,9))","9f0c5606":"a2","a640476b":"a2.ndim # Two dimensional array","03182f17":"a2 = np.arange(1,6).reshape((1,5))","e58be2a5":"a2","45d1dd42":"a2.ndim","6225c95d":"a2.reshape(-1)","7296c650":"a2.flatten()","ab1e101e":"a1 = np.array([10,11,12])\na2 = np.array([20,21,22])","7885c1fa":"np.concatenate([a1,a2])","ddccaad9":"arr1 = np.array([[1,2,3],[4,5,6]])\narr2 = np.array([[11,12,13],[14,15,16]])","47eeb1e8":"np.concatenate([arr1,arr2])","37496a4c":"np.concatenate([arr1,arr2],axis=1) # If we want to concat them based on columns","a4f09be6":"arr = np.array([1,3,45,6,76,44,32,104])","d8d0a1d6":"arr","22a03b17":"np.split(arr,[3,5]) # Array splitted by index","fcd060e3":"a, b, c = np.split(arr,[3,5]) # We assigned these arrays to a, b, c","cabf1214":"a","c40d50c9":"b","5a2e4e5f":"c","f038befc":"two_d_array = np.arange(28).reshape(7,4) #2 dimensional array","dc7c2fd5":"two_d_array","c21e1d10":"np.vsplit(two_d_array,[2,5]) # Vertical Splitting 2 dimensional array","799f85cc":"v1, v2, v3 = np.vsplit(two_d_array,[2,5])","64e4c4e5":"v1","08b6c8ed":"v2","55f83fc2":"v3","f7e7cd11":"two_d_array","e4be7744":"np.hsplit(two_d_array,[2]) # Horizontal Splitting 2 dimensional array","58618933":"h1, h2 = np.hsplit(two_d_array,[2]) # Assigning in Horizontal Splitting 2 dimensional array","eb32864c":"h1","d68dd480":"h2","0f6420ca":"arr = np.array([26,2,5,3,65,11,2,4,9])","8e078b21":"arr","baf97d74":"np.sort(arr) # We can sort with sort() function","e9b9d75c":"arr # But it did not change in real array","08b1e4df":"arr.sort() # It helps to change in real array","2e3b9be7":"arr","0be9f220":"-np.sort(-arr) # If we want to sort in descending order","c93651ee":"uni = np.random.uniform(10,2,(3,3)) # It will give 9 value from uniform distribution, mean=10, standart deviation =2","ce408c85":"uni","f719d864":"np.sort(uni,axis=1) # It sorts row based","3f10988c":"np.sort(uni,axis=0) # It sorts column based","83ad3046":"ar = np.array(['Python', 'Java', 'Julia', \"Visual Basic\"])","6e3b5a99":"ar","0dafc9d4":"ar.sort()","057e1b1e":"ar","7a6cfa6e":"arry = np.linspace(0,50,12,dtype=\"int\").reshape(4,3)","0d5fd5ed":"arry","7c145dc6":"arry.shape","f0bd3c76":"arry.ndim","cc2371bd":"adding_array = np.array([1, 0, 1])","9ee135f1":"adding_array","2ed318cf":"adding_array.shape","b2a85514":"adding_array.ndim","13192af9":"arry + adding_array","bd24210e":"arr1 = np.array([1,2,3,4,5,6,7,8,9])","89d43035":"arr1-5 # You can also hear it as ufunc.","00278841":"arr1*3 # You can also hear it as ufunc.","6603d335":"arr2 = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])","803bc743":"arr2","e99b4033":"arr2+10","48a7adc7":"np.add(arr2,10)","cbad7e9f":"arr2-1","39b234d6":"np.subtract(arr2,1)","c7245fa4":"arr2*8","e52ee863":"np.multiply(arr2,8)","bfd02efd":"arr2\/2","622a8a47":"np.divide(arr2,2)","27f7799f":"arr1 = np.array([1,2,3,4,5,6,7,8,9])","d1948c1a":"np.power(arr1,2)","5d98eda0":"np.mean(arr1)","a348958c":"np.sum(arr1)","6fabb3ec":"np.min(arr1)","532d0bec":"np.max(arr1)","5a142c15":"np.var(arr1)","9e94c822":"np.std(arr1)","3bdd1b19":"np.mod(arr1,2)","e25fe46a":"np.absolute(np.array([-1,2-4,-49,-2]))","745bea38":"np.log(arr1)","26388ea1":"np.log10(arr1) # We can change the base","8c5338b2":"arr1 = np.array([[3,5],[9,4]]) \narr2 = np.array([[11,1],[23,12]]) ","286f8cb0":"np.dot(arr1,arr2)","adf9d8e1":"[[3*11+5*23, 3*1+5*12],[9*11+4*23, 9*1+4*12]]","529e26ea":"We can get sum of array with **sum()** function.","a0279d6d":"We can get standart deviation of array with **std()** function.","fe9227e1":"### Ones arrays\n\nReturn a new array of given shape and type, filled with ones.","62c4ec63":"We can get variance of array with **var()** function.","b3673c05":"reshape() funtions make us able to change shape of an array. \n\n**Note:** The shape of an array is the number of elements in each dimension.","2522c3c1":"**ndarray** is shorthand of **N-Dimensional Array** which you will hear occasionally. An N-dimensional array is simply an array with any number of dimensions.","ff8d71d2":"![image.png](attachment:image.png)","5c83da22":"With **shape** attribute, shape of arrays can be checked.","00c7951d":"One of the most useful advantage of arrays is aritmathical operation opportunity. All mathematical operations can be done.","a3a696f8":"## Array Indexing","e7cb9454":"## Importing Numpy","145e5470":"Flattening array means converting a multidimensional array into a 1D array.\n\nWe can use **reshape(-1)** or **flatten()** function for that.","06825666":"The NumPy ndarray class is used to represent both matrices and vectors. A vector is an array with a single column, while a matrix refers to an array with multiple columns.\n\nWith **ndim** attribute, dimension of arrays can be checked.","5cba7771":"We can also use **subtract()** function for elementwise difference.","d9d73bc6":"\nThis image is from: https:\/\/www.google.com\/url?sa=i&url=https%3A%2F%2Fblog.knoldus.com%2Fnumpy-say-bye-to-loops%2F&psig=AOvVaw2d07vEIwpcpKiKkOVunx_5&ust=1607250033807000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCJitgY3Ptu0CFQAAAAAdAAAAABAZ","aadc1c3b":"### Linear Series","c726fd1f":"## Splitting","7fd3dc3f":"### Identity Matrix\n\nIt creates identity matrixes.","275082af":"## Contents\n\n- What is Numpy?\n- Importing Numpy\n- Numpy arrays and Dimensions\n- Creating Numpy Arrays\n    - Zero arrays\n    - Ones arrays\n    - Full arrays\n    - Identify Matrixes\n    - Linear Series\n    - Distributions arrays - Random\n- Array Indexing\n- Subsets\n- reshape() function\n- Flattening the Arrays\n- Concatenation\n- Splitting\n- Sorting\n- Broadcasting\n- Array Math\n- Dot(Scalar) Product\n    \n    \n**Resources:**\n\n- https:\/\/cs231n.github.io\/python-numpy-tutorial\/#numpy\n- https:\/\/numpy.org\/doc\/stable\/reference\/","cbde018e":"## Array Math","ec234efa":"We can also reshape directly.","0a3520e5":"Arrays can be created with nested Python lists and elements are accessible with square brackets as lists.","733b1d79":"We can also use **multiply()** function for elementwise product.","41787376":"We can get floor divide of array with **mod()** function.","4cd8cf5e":"### Distribution arrays - Random","db896523":"Dot product is calculated with this way.","94c00721":"We can get log of array with **log()** function.","b5a5df55":"## What is Numpy?","b8bef31c":"### Zeros arrays\n\nIt returns a new array setting values to zero.","fcfb57eb":"We can also sort strings.","a2222e9e":"With **dtype** attribute, data type of arrays can be checked.","31cd8d64":"We can also use **add()** function for elementwise sum.","1fdd8be5":"## Flattening the Arrays","616ba4bf":"We can get power of array with **power()** function.","b7904838":"Arrays can be changed with assigning new value.","7f85f2d5":"In general, **np** is used for short and alternative name. It can be creates with the **as** keyword.","9add816e":"## Concatenation","54700b50":"An array is main data structure of the Numpy library.It is a grid of values and is indexed by a tuple of nonnegative integers. **The elements are all of the same type**, referred to as the array dtype.\n\nAn array can be indexed by a tuple of nonnegative integers, by boolean, by other array or by integers. The rank of the array is equal to dimensions of array, the shape of an array is a tuple of integers giving the size of the array along each dimension.","3027992e":"## Subsets","48b1eec6":"## Numpy Arrays (Ndarrays) and Dimensions","9b0ea714":"We can also use **divide()** function for elementwise division.","70649792":"## reshape() function","c56c8d19":"### Full arrays\n\nIt returns a new array of given shape filled with value.","bc61b4b4":"We can get minimum value of array with **min()** function.","b8a851f6":"## Dot(Scalar) Product","fac99ef9":"## Creating Numpy Arrays","fe6a7c59":"It is abbreviation of **Numerical Python**. Numpy is a python library for scientific computing. It helps to work with multidimensional array objects and provides tools for working with these array. \n\nSource code of this library is reachable here: https:\/\/github.com\/numpy\/numpy\n\nIt is used very often in order to handle with huge data. ","2190c151":"## Sorting","ca5547c7":" The **dot product** or **scalar product** is an algebraic operation that takes two equal-length sequences of numbers (usually coordinate vectors), and returns a single number.","251395f7":"We can get absolute of array with **absolute()** function.","be27274b":"Boolean indexing is also possible in arrays.","38e94f5b":"![image.png](attachment:image.png)\n","1c483a07":"## Broadcasting","18aa994f":"Like lists in Python, Numpy arrays are reachable with square brackets.","0afa8bf6":"Broadcasting is a powerful mechanism that allows numpy to work with arrays of different shapes when performing arithmetic operations. Frequently we have a smaller array and a larger array, and we want to use the smaller array multiple times to perform some operation on the larger array.","75c8f369":"With **size** attribute, variable number of arrays can be checked.","c270ae75":"We can get maximum value of array with **max()** function.","2fb58a00":"**Created by Berkay Alan**\n\n**Numpy**\n\n**5 of December, 2020**\n\n**For more Tutorial: https:\/\/github.com\/berkayalan**","4bbf6c1d":"We can get mean of array with **mean()** function.","86d5a6c0":"The shape of arry is (4,3) and the shape of adding_array is (3,). The line above worked even though shapes are not same because of **broadcasting**. \n\nBroadcasting two arrays together follows these rules:\n\n- If the arrays do not have the same rank, prepend the shape of the lower rank array with 1s until both shapes have the same length.\n\n- The two arrays are said to be compatible in a dimension if they have the same size in the dimension, or if one of the arrays has size 1 in that dimension.\n\n- The arrays can be broadcast together if they are compatible in all dimensions.\n\n- After broadcasting, each array behaves as if it had shape equal to the elementwise maximum of shapes of the two input arrays.\n \n- In any dimension where one array had size 1 and the other array had size greater than 1, the first array behaves as if it were copied along that dimension"}}