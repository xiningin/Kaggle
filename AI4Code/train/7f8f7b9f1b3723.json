{"cell_type":{"4c4034c4":"code","18b42852":"code","a3050ab9":"code","e7cc3de8":"code","cca640db":"code","484cfad8":"code","33a731c9":"code","8b260d03":"code","791212e4":"code","ae3b84b1":"code","cd5d20af":"code","fa9e2168":"code","7ae81df3":"code","6b909165":"code","c1def61d":"code","fea8bea5":"code","7e11262a":"code","be63b283":"markdown","c157de77":"markdown","16153357":"markdown","465e21ea":"markdown","4c0dc57c":"markdown","6b5e7068":"markdown","8358e8ae":"markdown","ecde2a34":"markdown","6caeb57b":"markdown","d4b7697f":"markdown","310aa439":"markdown","9be8a247":"markdown","ac8911db":"markdown","ca828b5d":"markdown","7adb689c":"markdown","a5c2dbf7":"markdown","f2a91c59":"markdown","d02e7bec":"markdown","ae47b382":"markdown","f8465751":"markdown","432d8919":"markdown","140d005c":"markdown","6ed57d70":"markdown"},"source":{"4c4034c4":"import numpy as np\nimport pandas as pd\nfrom IPython.display import display, clear_output\nfrom IPython.core.display import HTML\nimport ipywidgets as widgets\nfrom ipywidgets import Button, Layout\n\nimport plotly.graph_objects as go\n\nimport os\n\nos.chdir('\/kaggle\/input')\n\npd.options.display.max_columns = 100","18b42852":"data = pd.read_csv('kaggle-survey-2020\/kaggle_survey_2020_responses.csv')","a3050ab9":"labels = data['Q5'][1:].value_counts().index\nvalues = data['Q5'][1:].value_counts().values\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.6)])\nfig.show()","e7cc3de8":"cols = data.columns\nmulti_choice_qns = [i for i in cols if 'Part' in i]\n\nmulti_choice_map = {}\nfor c in multi_choice_qns:\n    val = data[c][1:].dropna().unique()[0]\n    multi_choice_map[c] = data[c][1:].dropna().unique()[0].strip()\n    #if val not in ['None', 'No \/ None', 'None of these activities are an important part of my role at work']:\n        #multi_choice_map[c] = data[c][1:].dropna().unique()[0].strip()","cca640db":"qns_map = {'Q7': 'Programming Languages', 'Q9': 'IDE', 'Q10': 'Notebooks', 'Q14': 'Visualization Libraries',\n           'Q16': 'ML Frameworks', 'Q17': 'ML Algorithms', 'Q23': 'Role at work', 'Q26_A': 'Cloud Platform',\n           'Q27_B': 'Cloud Products', 'Q28_A': 'ML Products', 'Q29_A': 'Big Data Products', 'Q31_A': 'BI Tool',\n           'Q33_A': 'Automated ML Techinques', 'Q34_A': 'AutoML Tools', 'Q35_A': 'ML Experiment Tool', \n           'Q36': 'Public share platform', 'Q37': 'Learning platform', 'Q39': 'Media Source for DS'}\n\nmulti_qns = qns_map.keys()","484cfad8":"def get_top_skills(df):\n    must = {}\n    good_to = {}\n    \n    #Education\n    top_education = df['Q4'].value_counts(normalize=True).index[0]\n    top_education_pct = df['Q4'].value_counts(normalize=True)[0]\n    if top_education_pct >= 0.5:\n        must['Highest education'] = top_education\n    else:\n        good_to['Highest education'] = top_education\n    for q in multi_qns:\n        topic = qns_map[q]\n        ans_cols = [c for c in cols if c.startswith(q)]\n        pct_ans = df[ans_cols].notnull().sum()\/df.shape[0]\n        pct_ans.sort_values(ascending=False, inplace=True)\n        top_skills = pct_ans[pct_ans > 0.5].index.map(multi_choice_map)\n        if len(top_skills) > 0:\n            must[topic] = top_skills\n        else:\n            good_to[topic] = multi_choice_map[pct_ans.index[0]]\n    \n    #Compute platform\n    top_compute_platform = df['Q11'].value_counts(normalize=True).index[0]\n    top_compute_platform_pct = df['Q11'].value_counts(normalize=True)[0]\n    if top_compute_platform_pct >= 0.5:\n        must['Computing platform'] = top_compute_platform\n    else:\n        good_to['Computing platform'] = top_compute_platform\n    \n    #Analytical Tool\n    top_primary_tool = df['Q38'].value_counts(normalize=True).index[0]\n    top_primary_tool_pct = df['Q38'].value_counts(normalize=True)[0]\n    if top_primary_tool_pct >= 0.5:\n        must['Primary Analytical tool'] = top_primary_tool\n    else:\n        good_to['Primary Analytical tool'] = top_primary_tool\n    return must, good_to","33a731c9":"class buttons(object):\n    def __init__(self, n, skill_type, value):\n        self.n = n\n        self.type = skill_type\n        self.value = value\n        #display(HTML(\"<h1> Heading <\/h1>\"))\n    \n    def create_grid(self, val):\n        idx = 0\n        row = []\n        keys = list(val.keys())\n        values = list(val.values())\n        for i in range(self.n):\n            header_button = widgets.Button(description = keys[i], button_style='warning', tooltip = keys[i],layout=Layout(height= '30px', width='300px'))\n            if (isinstance(values[i], pd.Index) | isinstance(values[i], list)):\n                length = len(values[i])\n                if length == 1:\n                    #print(values[i][0])\n                    if values[i][0] in ['None', 'No \/ None', 'None of these activities are an important part of my role at work']:\n                        value_button = [widgets.Button(description = values[i][0], tooltip = values[i][0], layout=Layout(height= '60px', width='300px', margin='2px 2px 30px 2px'))]\n                    else:    \n                        value_button = [widgets.Button(description = values[i][0], button_style='info', tooltip = values[i][0], layout=Layout(height= '60px', width='300px', margin='2px 2px 30px 2px'))]\n                    row.append(widgets.VBox([header_button, *value_button]))\n                    \n                    continue\n                new_height = str(60\/length)\n                value_button = []\n                for v in range(length):\n                    if v ==0:\n                        value_button.append(widgets.Button(description = values[i][v], button_style='success', tooltip = values[i][v], layout=Layout(height= new_height +'px', width='300px', margin='2px 2px 0px 2px')))\n                    elif v == (length-1):\n                        value_button.append(widgets.Button(description = values[i][v], button_style='success', tooltip = values[i][v], layout=Layout(height= new_height +'px', width='300px', margin='0px 2px 2px 2px')))\n                    else:\n                        value_button.append(widgets.Button(description = values[i][v], button_style='success', tooltip = values[i][v], layout=Layout(height= new_height +'px', width='300px', margin='0px 2px 0px 2px')))\n            else:\n                if values[i] in ['None', 'No \/ None', 'None of these activities are an important part of my role at work']:\n                    value_button = [widgets.Button(description = values[i], tooltip = values[i], layout=Layout(height= '60px', width='300px', margin='2px 2px 30px 2px'))]\n                else: \n                    value_button = [widgets.Button(description = values[i], button_style='info', tooltip = values[i], layout=Layout(height= '60px', width='300px', margin='2px 2px 30px 2px'))]\n            \n            row.append(widgets.VBox([header_button, *value_button]))\n    \n        elems = []\n        for l in range(0,self.n,3):\n            elems.append(widgets.HBox(row[l:l+3]))\n        \n        if self.type == 'must_have':\n            self.header = widgets.HTML(description='',value='<h1> Must have skills for {}<\/h1>'.format(self.value))\n        elif self.type == 'good_to_have':\n            self.header = widgets.HTML(description='',value='<h1> Good to have skills for {}<\/h1>'.format(self.value))\n        \n        self.everything = widgets.VBox([self.header, *elems])\n        display(self.everything)\n    \n    def show_legend(self):\n        legends = widgets.HTML(description='', value='<h3> Legends <\/h3>')\n        header_button = widgets.Button(description='', button_style='warning', layout=Layout(height= '20px', width='100px', margin='0px 0px 0px 0px'))\n        header_desc = widgets.HTML(description='', value='Question')\n        legend0 = widgets.HBox([header_button, header_desc])\n        value_button1 = widgets.Button(description='', button_style='success', layout=Layout(height= '20px', width='100px', margin='0px 0px 0px 0px'))\n        value_desc1 = widgets.HTML(description='', value='Multiple preference among the group')\n        legend1 = widgets.HBox([value_button1, value_desc1])\n        value_button2 = widgets.Button(description='', button_style='info', layout=Layout(height= '20px', width='100px', margin='0px 0px 0px 0px'))\n        value_desc2 = widgets.HTML(description='', value='Single preference among the group')\n        legend2 = widgets.HBox([value_button2, value_desc2])\n        value_button3 = widgets.Button(description='', layout=Layout(height= '20px', width='100px', margin='0px 0px 0px 0px'))\n        value_desc3 = widgets.HTML(description='', value='No preference')\n        legend3 = widgets.HBox([value_button3, value_desc3])\n        display(widgets.VBox([legends, legend0, legend1, legend2, legend3]))","8b260d03":"roles = data['Q5'][1:].dropna().unique()\nroles = np.delete(roles, np.argwhere((roles == 'Student') | (roles == 'Other') | (roles == 'Currently not employed')))","791212e4":"display(widgets.HTML(description='',value='<h1> Select Desired Role: <\/h1>'))\n\nw = widgets.Dropdown(\n    options= roles,\n    value='Data Scientist',\n    description='',\n    style={'description_width': 'initial'}\n)\n\ndef on_change(change):\n    if change['type'] == 'change' and change['name'] == 'value':\n        print(\"Selected role is %s\" % change['new'])\n        new_data = data[data['Q5'] == change['new']]\n        must, good_to = get_top_skills(new_data)\n        clear_output()\n        display(widgets.HTML(description='',value='<h1> Select Desired Role: <\/h1>'))\n        display(w)\n        n1 = len(must.keys())\n        bt1 = buttons(n1, 'must_have', change['new'])\n        bt1.create_grid(must)\n        \n        n2 = len(good_to.keys())\n        bt2 = buttons(n2, 'good_to_have', change['new'])\n        bt2.create_grid(good_to)\n        \n        bt2.show_legend()\n        \nw.observe(on_change)\n\ndisplay(w)\n","ae3b84b1":"ds = data[data['Q5'] == 'Data Scientist']\nds_must_have, ds_good_to_have = get_top_skills(ds)\n\nstat = data[data['Q5'] == 'Statistician']\nstat_must_have, stat_good_to_have = get_top_skills(stat)","cd5d20af":"n1 = len(ds_must_have.keys())\nbt1 = buttons(n1, 'must_have', 'Data Scientist')\nbt1.create_grid(ds_must_have)","fa9e2168":"stat_n1 = len(stat_must_have.keys())\nstat_bt1 = buttons(stat_n1, 'must_have', 'Statistician')\nstat_bt1.create_grid(stat_must_have)","7ae81df3":"n2 = len(ds_good_to_have.keys())\nbt2 = buttons(n2, 'good_to_have', 'Data Scientist')\nbt2.create_grid(ds_good_to_have)","6b909165":"stat_n2 = len(stat_good_to_have.keys())\nstat_bt2 = buttons(stat_n2, 'good_to_have', 'Statistician')\nstat_bt2.create_grid(stat_good_to_have)","c1def61d":"def get_top_skill(df):\n    skills = {}\n    #Education\n    top_education = df['Q4'].value_counts(normalize=True).index[0]\n    top_education_pct = df['Q4'].value_counts(normalize=True)[0]\n    skills['Highest education'] = top_education\n    for q in multi_qns:\n        topic = qns_map[q]\n        ans_cols = [c for c in cols if c.startswith(q)]\n        pct_ans = df[ans_cols].notnull().sum()\/df.shape[0]\n        pct_ans.sort_values(ascending=False, inplace=True)\n        skills[topic] = multi_choice_map[pct_ans.index[0]]\n    top_compute_platform = df['Q11'].value_counts(normalize=True).index[0]\n    top_compute_platform_pct = df['Q11'].value_counts(normalize=True)[0]\n    skills['Computing platform'] = top_compute_platform\n    top_primary_tool = df['Q38'].value_counts(normalize=True).index[0]\n    top_primary_tool_pct = df['Q38'].value_counts(normalize=True)[0]\n    skills['Primary tool'] = top_primary_tool\n    return skills","fea8bea5":"out = pd.DataFrame()\nfor r in roles:\n    d = data[data['Q5'] == r]\n    d_skill = get_top_skill(d)\n    out = pd.concat([out, pd.DataFrame(d_skill, index=[r])])\n\nout.head()","7e11262a":"common_skills = out.nunique()[out.nunique() == 1].index\nout.loc[:,common_skills].drop_duplicates()","be63b283":"# Undisputed king of skills\/platforms\n\nFollowing skills are used most irrespective of the job title:","c157de77":"As a result, one can use this notebook to obtain immediate skills (actions) to learn to aim for a specific job title","16153357":"**Key Outcomes:**\n1. **Language**: Python is highest used programming language for Data Scienctists while it is R for Statisticians\n2. **Education**: Top percent have Master's degree in both groups however percentage is more than 50% in Data Scientist group\n3. **Visualization**: Data Scientists heavily rely on matplotlib & seaborn whereas Statisticians use ggplot\/ggplot2\n4. **ML ALgorithms**: Data Scientists majorly use 3 category of ML algorithms i.e Linear\/Logisitic, Tree based & boosting algorithms. Statisticians rely on Linear\/Logisitic regression\n5. **Role**: While 'Analyze and understand data to influence product\/business decision' remains a common goal, Data Scientists also take up additional role to 'Build prototypes to explore applying ML to new areas'\n","465e21ea":"Top skills for each category across job titles","4c0dc57c":"This code only considers the top most skill. for e.g if both Python & SQL is used by majority in the group, it will pick the one which is most popular\/used among the group","6b5e7068":"*     **Media Source for DS** : Kaggle(notebooks, forums, etc)\n\n<img src=\"https:\/\/www.kaggle.com\/static\/images\/site-logo.png\" width=\"200px\">","8358e8ae":"This notebook will answer following 2 questions from the data.\n\n1. Are there skills which are specific to job title\/profile ?\n\n2. What are the common skills across job title ?","ecde2a34":"This is my attempt to analyse the skills required for a specific job title\/profile in Data Science community. \n\nExample: If I a student is planning to become a Machine Learning Engineer then she\/he can understand the skills which are required for that position and try to master it. Same goes for a Data analyst who is planning to become a data engineer or a data Scientists.","6caeb57b":"# How does current title distribution look like ?","d4b7697f":"**Note**: Kaggle notebook doesn't render output interactively based on dropdown input. So clone the notebook and modify the input in dropdown to obtain detailed results","310aa439":"# Compare two of the profiles. Data Scientist vs Statistician","9be8a247":"No clear favorite or preference for Tool categories:\n* ML Product\n* Automated ML techniques\n* ML Experiment Tools\n\nNote: It is surprising that MLflow is not one of the options in ML Experiment Tools question.","ac8911db":"Ipython widgets are used to render the output. Due to nature of Kaggle other tools like dash, TKinter could not be used","ca828b5d":"* **ML Frameworks** : Scikit-learn\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/0\/05\/Scikit_learn_logo_small.svg\/1200px-Scikit_learn_logo_small.svg.png\" width=\"200px\">","7adb689c":"* **Learning Platform** : Coursera\n<img src=\"https:\/\/149362230.v2.pressablecdn.com\/wp-content\/uploads\/2018\/08\/coursera-social-logo.png\" width=\"200px\">","a5c2dbf7":"# Scope of the analysis:\n\nNote: Below questions are left out from the analysis\n* Demography related questions, as the intention is to provide concrete actions to upskill\n* Part B of the questions, as they indicate action which needs to be taken in future\n* Questions like Q18, Q19 which depend on response of another question. Here the group size changes across such questions\n* Questions on salary, years of experience, company size etc as these are not within immediate control of user. ","f2a91c59":"**Note**: There are also questions like media source for DS, regular Learning platform etc. Though answer to them are not skills, I am broadly considering it under skills","d02e7bec":"Obtain distinct roles and remove values which are not career change e.g : Student, Other and Currently not employed","ae47b382":"# Skills are categorized as ***Must have*** and ***Good to have***:\n\n**Must have** : More than 50% of the target group has that skill\n\n**Good to have** : Less than 50% of the target have the skill but it is top skill in the category\n\n\nTop skills (answers) are obtained for all multiple choice questions with multi-selection","f8465751":"# What should I Learn to transition from career X to Y","432d8919":"*     **Computing platform** : A personal computer or laptop","140d005c":"# Common skills across Titles\/profile","6ed57d70":"*     **ML Algorithms** : Linear or Logistic Regression\n\n<img src=\"https:\/\/saedsayad.com\/images\/LogReg_1.png\" width=\"300px\">"}}