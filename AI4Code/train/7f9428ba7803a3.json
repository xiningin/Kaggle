{"cell_type":{"dc586f6c":"code","600dd321":"code","503a52d1":"code","25f6cc7f":"code","66fe3bde":"code","aaad5366":"code","6f59ca65":"code","a97a2651":"code","0fa7b9e9":"code","d7c8414d":"code","9bcd73c9":"code","916cf8f9":"code","c85bc237":"code","6c9e02be":"code","aa0141ca":"code","b51aa9b1":"code","d75117cb":"code","38c5a4a1":"code","8143191b":"code","58327577":"code","53730ab2":"code","c96f74fc":"code","6d7b3a80":"code","59627fb2":"code","e89bebfc":"code","4a08353a":"code","b754cb9d":"code","c42ed2e0":"code","3c340009":"code","5cf6ae4a":"code","c95ac54b":"code","182558a1":"code","95712a24":"code","d0bc3dd3":"code","0843eba8":"code","1d64da3c":"code","4de00f2b":"code","4979d844":"code","4db2a40f":"code","ea13537a":"code","3e09040c":"code","66c10141":"code","003157ba":"code","2eaa4c4e":"code","f2ad8667":"code","8725e175":"code","92b981f0":"code","1f5c49ce":"code","8d4d4208":"code","c5bf5941":"code","aff629ad":"code","2c7fae16":"code","140cff3f":"code","5d3762ba":"code","f6289a44":"code","39ef7710":"code","75e8a693":"code","349501fb":"code","0717f11d":"code","e182d08a":"code","465ffcd3":"code","1da31368":"code","1c0110a7":"code","1f6bd787":"code","2f011814":"code","a222d843":"code","b16231dc":"code","fdd47e80":"code","64cb557a":"markdown","170377a2":"markdown","381e814a":"markdown","4055fbc7":"markdown","97163c0b":"markdown","6a131b63":"markdown","e9bd45c9":"markdown","2ce18111":"markdown","6f3d0567":"markdown","1f7c5ed9":"markdown","45bd13dc":"markdown","9bdf803c":"markdown","7062fd5c":"markdown","1bee6d05":"markdown","19887ab0":"markdown","e9831221":"markdown","125a76b5":"markdown","00acd0f4":"markdown"},"source":{"dc586f6c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# For Visualisation\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom xgboost import plot_importance, to_graphviz\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","600dd321":"# Ignore Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","503a52d1":"filename = '\/kaggle\/input\/paysim1\/PS_20174392719_1491204439457_log.csv'\ndf = pd.read_csv(filename)\npd.concat([df.head(),df.tail()])","25f6cc7f":"# Shape of the dataset imported\ndf.shape","66fe3bde":"# Examining the different feature type present in the data frame\ndf.info()","aaad5366":"# Examining columns of data frame\ndf.columns","6f59ca65":"# Lets check the numeric distribution of the data:\ndf.describe().T","a97a2651":"# Checking the presence of null value in data set\ndf.isnull().sum()","0fa7b9e9":"# Check the fraud\/Non_Fraud related records\ndf['isFraud'].value_counts()","d7c8414d":"# find % values of isFraud\n(df.groupby('isFraud')['isFraud'].count()\/df['isFraud'].count()) *100","9bcd73c9":"def plot_count(df, feature, title='', size=2):\n    f, ax = plt.subplots(1,1, figsize=(3*size,2*size))\n    total = float(len(df))\n    sns.countplot(df[feature],order = df[feature].value_counts().index, palette='Set2')\n    plt.title(title)\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.4f}%'.format(100*height\/total),\n                ha=\"center\") \n        ax.set_facecolor(\"ghostwhite\")\n    plt.show()","916cf8f9":"plot_count(df, 'isFraud', 'Distribution of `isFraud` (count & percent)', size=2.5)","c85bc237":"df['isFraud'].value_counts().plot.pie(autopct='%1.2f%%',shadow=False)\nplt.title(\"Distribution of Target Variable\")\nplt.show()","6c9e02be":"plot_count(df, 'isFlaggedFraud', 'Distribution of `isFlaggedFraud` (count & percent)', size=2.5)","aa0141ca":"df['isFlaggedFraud'].value_counts()","b51aa9b1":"df[df['isFlaggedFraud']==1]","d75117cb":"print('Minimum amount flagged as fraud -', df[df['isFlaggedFraud']==1].amount.min())\nprint('Maximum amount flagged as fraud -', df[df['isFlaggedFraud']==1].amount.max())","38c5a4a1":"# Investigate variable \"isFlaggedFraud\"\npd.crosstab(df.isFraud,df.isFlaggedFraud)","8143191b":"#Groupby type\ndf.groupby('type')['isFraud','isFlaggedFraud'].sum()","58327577":"pd.crosstab(df['type'], df['isFraud'])","53730ab2":"ax = df['type'].value_counts().plot( kind ='bar', title = 'Transaction Type', figsize= (6,6), color=sns.color_palette('husl'))\nax.set_facecolor(\"ghostwhite\")","c96f74fc":"plot_count(df, 'type', 'Distribution of type (count & percent)', size=2.5)","6d7b3a80":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12,6))\ns = sns.boxplot(ax = ax1, x=\"isFraud\", y=\"step\", hue=\"isFraud\",data=df, palette=\"PRGn\",showfliers=True)\ns = sns.boxplot(ax = ax2, x=\"isFraud\", y=\"step\", hue=\"isFraud\",data=df, palette=\"PRGn\",showfliers=False)\nplt.show()","59627fb2":"print(\"Customer-Customer Tractions-\", df.loc[(df.nameOrig.str.contains('C')) & (df.nameDest.str.contains('C'))].shape[0])\nprint(\"Customer-Merchant Tractions-\", df.loc[(df.nameOrig.str.contains('C')) & (df.nameDest.str.contains('M'))].shape[0])\nprint(\"Merchant-Customer Tractions-\", df.loc[(df.nameOrig.str.contains('M')) & (df.nameDest.str.contains('C'))].shape[0])\nprint(\"Merchant-Merchant Tractions-\", df.loc[(df.nameOrig.str.contains('M')) & (df.nameDest.str.contains('M'))].shape[0])","e89bebfc":"print(\"Fraud Detected between Customer-Customer Tractions-\", df.loc[(df.nameOrig.str.contains('C')) & (df.nameDest.str.contains('C')) & (df.isFraud == 1)].shape[0])\nprint(\"Fraud Detected between Customer-Merchant Tractions-\", df.loc[(df.nameOrig.str.contains('C')) & (df.nameDest.str.contains('M')) & (df.isFraud == 1)].shape[0])","4a08353a":"df_fraudTransfer = df.loc[(df.type == 'TRANSFER') & (df.isFraud == 1)]\ndf_notfraud = df.loc[df.isFraud == 0]\ndf_fraudTransfer.loc[df_fraudTransfer.nameDest.isin(df_notfraud.loc[df.type == 'CASH_OUT'].nameOrig)]","b754cb9d":"df.groupby(['type', 'isFraud']).size()","c42ed2e0":"X = df.loc[(df.type == 'TRANSFER') | (df.type == 'CASH_OUT')]\nX = X.drop(['nameOrig', 'nameDest', 'isFlaggedFraud'], axis=1)","3c340009":"fig = plt.figure(figsize= (12,5))\nfig.add_subplot(121)\nax = X.groupby('type').size().plot(kind ='bar', color=sns.color_palette('rocket_r'))\nplt.title('Number of observation based on Type')\nfor p in ax.patches:\n    ax.annotate(str(format(int(p.get_height()), ',d')), (p.get_x(), p.get_height()))\nax.set_facecolor(\"ghostwhite\")\n\nfig.add_subplot(122)\nbx = X['isFraud'].value_counts().plot(kind ='bar', color=sns.color_palette('viridis'))\nplt.title('Number of Fraudulent Transactions')\nplt.xlabel('isFraud')\nfor p in bx.patches:\n    bx.annotate(str(format(int(p.get_height()), ',d')), (p.get_x(), p.get_height()))\nbx.set_facecolor(\"ghostwhite\")","5cf6ae4a":"ax = df.groupby(['type', 'isFlaggedFraud']).size().plot(kind='bar', color=sns.color_palette('husl'))\nax.set_title(\"# of transaction which is flagged as fraud per transaction type\")\nax.set_xlabel(\"(Type, isFlaggedFraud)\", fontsize=12, fontweight = 'bold')\nax.set_ylabel(\"Count of transaction\", fontsize=12, fontweight = 'bold')\nfor p in ax.patches:\n    ax.annotate(str(format(int(p.get_height()), ',d')), (p.get_x(), p.get_height()*1.01))\nax.set_facecolor(\"ghostwhite\")","c95ac54b":"ax = df.groupby(['type', 'isFraud']).size().plot(kind='bar', color=sns.color_palette('husl'))\nax.set_title(\"# of transaction which are the actual fraud per transaction type\")\nax.set_xlabel(\"(Type, isFraud)\", fontsize=12, fontweight = 'bold')\nax.set_ylabel(\"Count of transaction\", fontsize=12, fontweight = 'bold')\nfor p in ax.patches:\n    ax.annotate(str(format(int(p.get_height()), ',d')), (p.get_x(), p.get_height()*1.01))\nax.set_facecolor(\"ghostwhite\")","182558a1":"plt.figure(figsize=(8,6))\nsns.boxplot(x = 'isFraud', y = 'amount', palette=(\"husl\"), data = df[df.amount < 1e5]).set_facecolor(\"ghostwhite\")\nplt.show()","95712a24":"fig, axs = plt.subplots(2, 2, figsize=(10, 10))\ntmp = df.loc[(df.type == 'TRANSFER'), :]\n\na = sns.boxplot(x = 'isFlaggedFraud', y = 'amount', data = tmp, ax=axs[0][0]).set_facecolor(\"ghostwhite\")\naxs[0][0].set_yscale('log')\nb = sns.boxplot(x = 'isFlaggedFraud', y = 'oldbalanceDest', data = tmp, ax=axs[0][1]).set_facecolor(\"ghostwhite\")\naxs[0][1].set(ylim=(0, 0.5e8))\nc = sns.boxplot(x = 'isFlaggedFraud', y = 'oldbalanceOrg', data=tmp, ax=axs[1][0]).set_facecolor(\"ghostwhite\")\naxs[1][0].set(ylim=(0, 3e7))\nd = sns.regplot(x = 'oldbalanceOrg', y = 'amount', data=tmp.loc[(tmp.isFlaggedFraud ==1), :], ax=axs[1][1]).set_facecolor(\"ghostwhite\")\nplt.show()","d0bc3dd3":"XFraud = X.loc[X.isFraud==1]\nXNonFraud = X.loc[X.isFraud==0]","0843eba8":"Fraudpercent = len(XFraud.loc[(XFraud.oldbalanceDest == 0) & (XFraud.newbalanceDest == 0) & (XFraud.amount !=0 )]) \/ (len(XFraud))\n\nprint(\"% of fraud transactions where old and new balance doesn't get updated is : \",Fraudpercent*100)","1d64da3c":"NonFraudpercent = len(XNonFraud.loc[(XNonFraud.oldbalanceDest == 0) & (XNonFraud.newbalanceDest == 0) & (XNonFraud.amount !=0 )]) \/ (len(XNonFraud))\n\nprint(\"% of nonfraud transactions where old ad new balance doesn't get updated is : \", NonFraudpercent*100)","4de00f2b":"# Amount Vs number of transaction\nf, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\nf.suptitle('Amount per transaction by class')\nbins = 25\nax1.hist(X.loc[X.isFraud==1].amount, bins = bins)\nax1.set_title('Fraud')\nax1.set_facecolor(\"ghostwhite\")\nax2.hist(X.loc[X.isFraud==0].amount, bins = bins)\nax2.set_title('Non Fraud')\nax2.set_facecolor(\"ghostwhite\")\nplt.xlabel('Amount ($)')\nplt.ylabel('Number of Transactions')\n# plt.xlim((0, 20000))\nplt.yscale('log')\nplt.show();","4979d844":"# Transform categorical feature(s) to numeric\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf.type = le.fit_transform(df.type)","4db2a40f":"# Explore correlations to label\ndf.corr().isFlaggedFraud.sort_values(ascending=False)","ea13537a":"# Explore correlations visually\nf, ax = plt.subplots(figsize=(12,6))\nsns.heatmap(df.corr(), annot=True, fmt='.2f')\nplt.show()","3e09040c":"plt.figure(figsize = (8,6)) \nplt.subplot(221)\ndfFraudCashout = XFraud.loc[XFraud['type'] == 'CASH_OUT']\ndfFraudCashout = dfFraudCashout.drop(['isFraud', 'step'], axis = 1)\nax1 = sns.heatmap(dfFraudCashout.corr(), vmin = -1, vmax = 1, annot=True, fmt='.2f')\nax1.set(xticklabels=[])\nplt.title('(a) Fraudulent Cash-out transactions')\n\nplt.subplot(222)\ndfFraudTransfer = XFraud.loc[XFraud['type'] == 'TRANSFER']\ndfFraudTransfer = dfFraudTransfer.drop(['isFraud', 'step'], axis = 1)\nax2 = sns.heatmap(dfFraudTransfer.corr(), vmin = -1, vmax = 1, annot=True, fmt='.2f')\nax2.set(xticklabels=[]); ax2.set(yticklabels=[])\nplt.title('(b) Fraudulent Transfer transactions')\n\nplt.subplot(223)\ndfNoFraudCashout = XNonFraud.loc[XNonFraud['type'] == 'CASH_OUT']\ndfNoFraudCashout = dfNoFraudCashout.drop(['isFraud', 'step'], axis = 1)\nsns.heatmap(dfNoFraudCashout.corr(), vmin = -1, vmax = 1, annot=True, fmt='.2f')\nplt.title('(c) Genuine Cashout transactions')\n\nplt.subplot(224)\ndfNoFraudTransfer = XNonFraud.loc[XNonFraud['type'] == 'TRANSFER']\ndfNoFraudTransfer = dfNoFraudTransfer.drop(['isFraud', 'step'], axis = 1)\nax4 = sns.heatmap(dfNoFraudTransfer.corr(), vmin = -1, vmax = 1, annot=True, fmt='.2f')\nax4.set(yticklabels=[])\nplt.title('(d) Genuine Transfer transactions')\n","66c10141":"dfFraudPerHour = XFraud.groupby('step').sum()\nplt.plot(dfFraudPerHour['amount'])\nplt.ylabel('amount \/ hour')\nplt.title('Fraudulent Cashout & Transfer transactions')\nplt.xlabel('hour')","003157ba":"X['step_day'] = X['step'].map(lambda x: x\/\/24)\nX['hour'] = X['step'].map(lambda x: x%24)\nX['step_week'] = X['step_day'].map(lambda x: x\/\/7)","2eaa4c4e":"ax = X['step_day'].value_counts().sort_index(ascending=True).plot(kind = 'bar')\nax.set_xlabel(\"Days of the month\")\nax.set_ylabel(\"# of transactions\")\nax.set_title(\"# of transactions by days of the month\")\nax.set_facecolor(\"ghostwhite\")\nsns.set(style=\"whitegrid\")","f2ad8667":"ax = X['hour'].value_counts().sort_index(ascending=True).plot(kind = 'bar')\nax.set_xlabel(\"Hours of the day\")\nax.set_ylabel(\"# of transactions\")\nax.set_title(\"# of transactions by hours of the day\")\nax.set_facecolor(\"ghostwhite\")","8725e175":"ax = X['step_week'].value_counts().sort_index(ascending=True).plot(kind ='bar')\nax.set_xlabel(\"Weeks of the month\")\nax.set_ylabel(\"# of transactions\")\nax.set_title(\"# of transactions by weeks of the month\")\nax.set_facecolor(\"ghostwhite\")","92b981f0":"X[(X.isFraud == 0)]['hour'].plot.hist(bins=24,color='pink',label='Valid').set_facecolor(\"ghostwhite\")\nplt.xlabel(\"Hours of the day\")\nplt.ylabel(\"# of transactions\")\nplt.title(\"# of Valid transactions by hours of the day\")\nplt.legend()\nplt.show()","1f5c49ce":"X[(X.isFraud == 1)]['hour'].plot.hist(bins=24,color='orange',label='Fraud').set_facecolor(\"ghostwhite\")\nplt.xlabel(\"Hours of the day\")\nplt.ylabel(\"# of transactions\")\nplt.title(\"# of Fraud transactions by hours of the day\")\nplt.legend()\nplt.show()","8d4d4208":"X[(X.isFraud == 0)]['step_day'].plot.hist(bins=7,color='green',label='Valid').set_facecolor(\"ghostwhite\")\nplt.xlabel(\"Days of the month\")\nplt.ylabel(\"# of transactions\")\nplt.title(\"# of Valid transactions by days of the month\")\nplt.legend()\nplt.show()","c5bf5941":"fig, ax = plt.subplots() #1,2, figsize=(7,9)\nX[(X.isFraud == 1)]['step_day'].plot.hist(bins=7,color='orange',label='Fraud').set_facecolor(\"ghostwhite\")\nplt.xlabel(\"Days of the month\")\nplt.ylabel(\"# of transactions\")\nplt.title(\"# of Fraud transactions by days of the month\")\nplt.legend()\nplt.show()","aff629ad":"X[(X.isFraud == 0)]['step_week'].plot.hist(bins=4,color='skyblue',label='Valid').set_facecolor(\"ghostwhite\")\nplt.xlabel(\"Weeks of the month\")\nplt.ylabel(\"# of transactions\")\nplt.title(\"# of Valid transactions by weeks of the month\")\nplt.legend()\nplt.show()","2c7fae16":"X[(X.isFraud == 1)]['step_week'].plot.hist(bins=4,color='Maroon',label='Fraud').set_facecolor(\"ghostwhite\")\nplt.xlabel(\"Weeks of the month\")\nplt.ylabel(\"# of transactions\")\nplt.title(\"# of Fraud transactions by weeks of the month\")\nplt.legend()\nplt.show()","140cff3f":"X.loc[(X.oldbalanceDest == 0) & (X.newbalanceDest == 0) & (X.amount != 0), \\\n      ['oldbalanceDest', 'newbalanceDest']] = - 1\n","5d3762ba":"X.loc[(X.oldbalanceOrg == 0) & (X.newbalanceOrig == 0) & (X.amount != 0), \\\n      ['oldbalanceOrg', 'newbalanceOrig']] = -1","f6289a44":"X['errorBalanceOrig'] = X.newbalanceOrig + X.amount - X.oldbalanceOrg\nX['errorBalanceDest'] = X.oldbalanceDest + X.amount - X.newbalanceDest","39ef7710":"def plotStrip(x, y, hue, figsize = (14, 9)):\n    \n    fig = plt.figure(figsize = figsize)\n    colours = plt.cm.tab10(np.linspace(0, 1, 9))\n    with sns.axes_style('ticks'):\n        ax = sns.stripplot(x, y, \\\n             hue = hue, jitter = 0.4, marker = '.', \\\n             size = 4, palette = colours)\n        ax.set_xlabel('')\n        ax.set_xticklabels(['genuine', 'fraudulent'], size = 16)\n        for axis in ['top','bottom','left','right']:\n            ax.spines[axis].set_linewidth(2)\n\n        handles, labels = ax.get_legend_handles_labels()\n        plt.legend(handles, ['Transfer', 'Cash out'], bbox_to_anchor=(1, 1), \\\n               loc=2, borderaxespad=0, fontsize = 16);\n    return ax","75e8a693":"limit = len(X)\nY = df.isFraud\nax = plotStrip(Y[:limit], X.amount[:limit], X.type[:limit], figsize = (14, 9))\nax.set_ylabel('amount', size = 16)\nax.set_title('Same-signed fingerprints of genuine and fraudulent transactions over amount', size = 18)","349501fb":"limit = len(X)\nax = plotStrip(Y[:limit], X.errorBalanceDest[:limit], X.type[:limit], figsize = (14, 9))\nax.set_ylabel('errorBalanceDest', size = 16)\nax.set_title('Opposite polarity fingerprints over the error in destination account balances', size = 18)","0717f11d":"limit = len(X)\nY = df.isFraud\nax = plotStrip(Y[:limit], X.errorBalanceOrig[:limit], X.type[:limit], figsize = (14, 9))\nax.set_ylabel('errorBalanceDest', size = 16)\nax.set_title('Polarity fingerprints over the error in origin account balances', size = 18)","e182d08a":"X.errorBalanceOrig.loc[(X.errorBalanceOrig == 0) & (df.isFraud == 1)].count()","465ffcd3":"X.errorBalanceOrig.loc[(X.errorBalanceOrig == 0) & (df.isFraud == 0)].count()","1da31368":"x = 'errorBalanceDest'\ny = 'step'\nplt.figure(figsize = (10,6))\nax = plt.scatter(X.loc[Y==0, y], X.loc[Y==0, x], c = 'g', marker = '.', s = 1, label = 'genuine')\nax = plt.scatter(X.loc[Y==1, y], X.loc[Y==1, x], c = 'r', marker = '.', s = 1, label = 'fraudulent')\nplt.ylabel(x, size=16);\nplt.xlabel(y +' [hour]', size=16 )\nplt.show()","1c0110a7":"x = 'errorBalanceOrig'\ny = 'step'\nplt.figure(figsize = (10,6))\nax = plt.scatter(X.loc[Y==0, y], X.loc[Y==0, x], c = 'g', marker = '.', s = 1, label = 'genuine')\nax = plt.scatter(X.loc[Y==1, y], X.loc[Y==1, x], c = 'r', marker = '.', s = 1, label = 'fraudulent')\nplt.ylabel(x, size=16);\nplt.xlabel(y +' [hour]', size=16 )\nplt.show()","1f6bd787":"X.loc[X.type == 'TRANSFER', 'type'] = 0\nX.loc[X.type == 'CASH_OUT', 'type'] = 1\nX.type = X.type.astype(int)","2f011814":"print('The Fraud Transaction in filtered dataset is: {0:.4f}%'.format( len(X[X.isFraud == 1])\/(len(X))*100))","a222d843":"from scipy.stats import skew, boxcox\nfrom sklearn import preprocessing\n\nfigure = plt.figure( figsize =(15,5))\nfigure.add_subplot(132)\nplt.hist(np.cbrt(X['amount']), facecolor = 'skyblue', alpha = 0.5)\nplt.xlabel('cube root of amount')\nplt.title('CBRT on amount')\nplt.text(2, 100000, 'Skewness:{0:.2f}%'.format(skew(np.cbrt(X['amount']))))\n\nfigure.add_subplot(131)\nplt.hist(np.sqrt(X['amount']), facecolor = 'red', alpha = 0.5)\nplt.xlabel('Square root of amount')\nplt.title('SQRT on amount')\nplt.text(2, 100000, 'Skewness:{0:.2f}%'.format(skew(np.sqrt(X['amount']))))\n\nX['amount_boxcox'] = preprocessing.scale(boxcox(X['amount']+1)[0])\n\nfigure.add_subplot(133)\nplt.hist(X['amount_boxcox'], facecolor = 'orange', alpha = 0.5)\nplt.xlabel('Box cox of amount')\nplt.title('BOXCOX on amount')\nplt.text(2, 100000, 'Skewness:{0:.2f}%'.format(skew((X['amount_boxcox']))))","b16231dc":"columns = ['amount_boxcox']\nX.drop(columns, axis=1, inplace=True)","fdd47e80":"X.head(3)","64cb557a":"**Inference** :\nThere are only frauds detected between customer-customer at origin and destination accounts. Therefore, nameOrig and nameDest coulumns won't help in detecting any pattern for fraud happening","170377a2":"### Number of records when destination account in transfer is same as originator account in cash-out","381e814a":"### Fraction of Geniune transactions with oldbalanceDest and newBalanceDest = 0 with amount transacted not equal to zero","4055fbc7":"### Fraction of Fraudulent transactions with oldbalanceDest and newBalanceDest = 0 with amount transacted not equal to zero","97163c0b":"### Minimum and Maximum amount that is transferred in flagged transactions","6a131b63":"#### Conclusions:\n- Total number of data point is 6362620 in which 8213 is fraud and 6354407 is not fraud data point.\n- This shows that the Data is highly imblanced. Target variable distribution shows that we are dealing with an highly imbalanced problem as there are many more genuine transactions as compared to the fraudalent transactions.\n- Hence, we have to be careful in reporting our results and accuracy might not be a good parameter to report for this classification problem. We will look at precision and recall.\n- Also, to improve results we might have to apply pre-processing techniques of undersampling the non-fraudulant transactions or oversampling of fradulant transactions while train-test split.","e9bd45c9":"#### Conclusions:\nThere are no Missing values in the data Currently.. so we can proceed with our EDA furthur","2ce18111":"### Exploratory Data Analysis (EDA)\n\n#### Number of fraudulent and geniune transactions","6f3d0567":"**Fraud occurs only in 2 type of transactions:** TRANSFER and CASH_OUT\n\nAbove table suggests that the fraud happens only if the type is 'Cash_out' or 'Transfer'. Perhaps, only selecting those cases might increase the accuracy of the model.\n\n- The number of fraudulent TRANSFERs = 4097\n\n- The number of fraudulent CASH_OUTs = 4116\n\nThe type of transactions in which isFlaggedFraud is set : TRANSFER","1f7c5ed9":"#### Missing Values Treatment:\nImputing missing values in the data set to avoid fraudulent transactions appear as genuine and help ML algorithms to detect fraud patterns.\n- We do not impute the account balance (before the transaction is made) with a statistic or from a distribution with a subsequent adjustment for the amount transacted because the destination account balances being zero is a strong indicator of fraud.\n- Doing so would mask this indicator of fraud and make fraudulent transactions appear genuine. Instead, below we replace the value of 0 with -1 \n- The data also has several transactions with zero balances in the originating account both before and after a non-zero amount is transacted. In this case, the fraction of such transactions is much smaller in fraudulent (0.3%) compared to genuine transactions (47%). ","45bd13dc":"**Transaction is flagged fraud if the amount transferred is more than 200,000**","9bdf803c":"### Number of Fraudulent and Geniune Transactions based on type of payment mode choosen by the customer","7062fd5c":"### Filtering the dataset with only relevent type of payments which have fraud cases in it","1bee6d05":"### Number of records based on Customer and Merchant transactions at origin and destination accounts","19887ab0":"### Feature Engineering\n\n- New features created which includes errors encountered at account balance in origin and destination.\n- These new features will be important in obtaining the best performance from the ML algorithm.","e9831221":"#### Inference:\nThere are 2 flags which stand out to me and it's interesting to look onto: **isFraud** and **isFlaggedFraud** column. From the hypothesis, isFraud is the indicator which indicates the actual fraud transactions whereas isFlaggedFraud is what the system prevents the transaction due to some thresholds being triggered.","125a76b5":"### Data Definitions\n\n**step** - maps a unit of time in the real world. In this case 1 step is 1 hour of time. Total steps 744 (30 days simulation).\n\n**type** - CASH-IN, CASH-OUT, DEBIT, PAYMENT and TRANSFER.\n\n**amount** - amount of the transaction in local currency.\n\n**nameOrig** - customer who started the transaction\n\n**oldbalanceOrg** - initial balance before the transaction\n\n**newbalanceOrig** - new balance after the transaction\n\n**nameDest** - customer who is the recipient of the transaction\n\n**oldbalanceDest** - initial balance recipient before the transaction. Note that there is not information for customers that start with M (Merchants).\n\n**newbalanceDest** - new balance recipient after the transaction. Note that there is not information for customers that start with M (Merchants).\n\n**isFraud** - This is the transactions made by the fraudulent agents inside the simulation. In this specific dataset the fraudulent behavior of the agents aims to profit by taking control or customers accounts and try to empty the funds by transferring to another account and then cashing out of the system.\n\n**isFlaggedFraud** - The business model aims to control massive transfers from one account to another and flags illegal attempts. An illegal attempt in this dataset is an attempt to transfer more than 200.000 in a single transaction.","00acd0f4":"#### Conclusion: \n- 50% of fraudulent transactions don't update old and new balances in the destination accounts, \n- Where as only 0.06% of non-fraudulent transactions update old and new balances, \n- This says that newBalanceDest being zero is a strong indicator or fraudulent transaction, hence we'll not impute the data but we'll replace it with -1 for our algorithm to be able to detect it more accurately."}}