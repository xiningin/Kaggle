{"cell_type":{"c550fc5e":"code","564dee80":"code","d8db8f0a":"code","6c887ae9":"code","e918a28b":"code","4c475528":"code","21bb1dfb":"code","6af0d52c":"code","2491994e":"code","b1238b8e":"code","12dc31dd":"code","8f76b9d7":"code","9e5584a4":"code","fbeda169":"code","ebff19a6":"code","66c2355d":"code","566fd17d":"code","495e6d4e":"code","65a5f2a5":"code","cb6d1e4f":"code","a018677e":"code","18a746f2":"code","60408e4b":"code","982274a4":"code","c51ee0ac":"code","66a6bb24":"code","325d75a6":"code","2955db3b":"code","b2e36fc9":"code","c7d3038d":"code","2d5f0218":"code","91fe39e6":"code","8b8844e8":"code","1884f73d":"code","253b59ab":"code","b3a615ef":"code","83ce091b":"code","49b28d20":"code","2cab3c8e":"code","ac47210a":"code","c8092d7b":"code","23d33c3a":"code","16c0a92a":"code","8779a50c":"code","318921dd":"code","86464782":"code","21aa7e1a":"code","4582d7d0":"code","b839cea8":"code","c08ed7e4":"code","295c9ab5":"code","8395ec22":"code","cd36a980":"code","30d45f45":"code","44a73f5b":"code","e5808af4":"code","f8217401":"code","1c8fbebb":"code","47f86bf6":"code","e9ec22e4":"code","3a1b981a":"markdown","76b9d0d8":"markdown","3fe30e62":"markdown","c8c9474c":"markdown","0e81870a":"markdown","d1567bce":"markdown","d43a274d":"markdown","b2bffd74":"markdown","a79090e3":"markdown","16503893":"markdown","ea89b0e2":"markdown","bf85449d":"markdown","10fdbcbd":"markdown","6ef30544":"markdown","34fca749":"markdown"},"source":{"c550fc5e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","564dee80":"df = pd.read_csv('\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/train_data.csv')","d8db8f0a":"df.head()","6c887ae9":"df.info()","e918a28b":"df['Stay'].nunique()","4c475528":"df['Stay'].unique()","21bb1dfb":"plt.figure(figsize=(15,6))\nsns.countplot(x='Stay',data=df)","6af0d52c":"df.drop(['case_id','Hospital_code'],axis=1,inplace=True)","2491994e":"def stay_cat_encoder(x):\n    if x == '0-10':\n        return 0\n    elif x == '11-20':\n        return 1\n    elif x == '21-30':\n        return 2\n    elif x == '31-40':\n        return 3\n    elif x == '41-50':\n        return 4\n    elif x == '51-60':\n        return 5\n    elif x == '61-70':\n        return 6\n    elif x == '71-80':\n        return 7\n    elif x == '81-90':\n        return 8\n    elif x == '91-100':\n        return 9\n    elif x == 'More than 100 Days':\n        return 10","b1238b8e":"df['Stay_cat'] = df['Stay'].apply(stay_cat_encoder)","12dc31dd":"df.corr()['Stay_cat'].sort_values()[:-1]","8f76b9d7":"df.head()","9e5584a4":"df.drop(['City_Code_Hospital','patientid','City_Code_Patient'],axis=1,inplace=True)","fbeda169":"df.head()","ebff19a6":"df['Hospital_type_code'].nunique()","66c2355d":"df['Hospital_type_code'].unique()","566fd17d":"df['Hospital_region_code'].unique()","495e6d4e":"df.isnull().sum()","65a5f2a5":"11300\/(len(df)-113) # percentage of missing data in Bed Grade column","cb6d1e4f":"df['Bed Grade'].median()","a018677e":"def imputer_Bed_Grade(x):\n    if pd.isnull(x):\n        return 3\n    else:\n        return x","18a746f2":"df['Bed Grade'] = df['Bed Grade'].apply(imputer_Bed_Grade)","60408e4b":"df.isnull().sum()","982274a4":"df['Bed Grade'].unique()","c51ee0ac":"df['Age'].nunique()","66a6bb24":"df['Age'].unique()","325d75a6":"def Age_cat_encoder(x):\n    if x == '0-10':\n        return 1\n    elif x == '11-20':\n        return 2\n    elif x == '21-30':\n        return 3\n    elif x == '31-40':\n        return 4\n    elif x == '41-50':\n        return 5\n    elif x == '51-60':\n        return 6\n    elif x == '61-70':\n        return 7\n    elif x == '71-80':\n        return 8\n    elif x == '81-90':\n        return 9\n    elif x == '91-100':\n        return 10","2955db3b":"df['Age_cat'] = df['Age'].apply(Age_cat_encoder)","b2e36fc9":"df.corr()['Stay_cat'].sort_values()[:-1]","c7d3038d":"df.select_dtypes(include=['object']).columns","2d5f0218":"from sklearn.preprocessing import LabelEncoder","91fe39e6":"le = LabelEncoder()","8b8844e8":"df3 = df.copy()","1884f73d":"df3.drop('Age',axis=1,inplace=True)","253b59ab":"df3.select_dtypes(include=['object']).columns","b3a615ef":"df3['Hospital_type_code'] = le.fit_transform(df3['Hospital_type_code'])\ndf3['Hospital_region_code'] = le.fit_transform(df3['Hospital_region_code'])\ndf3['Department'] = le.fit_transform(df3['Department'])\ndf3['Ward_Type'] = le.fit_transform(df3['Ward_Type'])\ndf3['Ward_Facility_Code'] = le.fit_transform(df3['Ward_Facility_Code'])\ndf3['Type of Admission'] = le.fit_transform(df3['Type of Admission'])\ndf3['Severity of Illness'] = le.fit_transform(df3['Severity of Illness'])","83ce091b":"df3.info()","49b28d20":"df3.corr()['Stay_cat'].sort_values()[:-1]","2cab3c8e":"X = df3.drop(['Stay_cat','Stay'],axis=1)\ny = df3['Stay']","ac47210a":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","c8092d7b":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()","23d33c3a":"X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","16c0a92a":"X_train.shape","8779a50c":"from sklearn.linear_model import LogisticRegression","318921dd":"lr = LogisticRegression(fit_intercept=True,n_jobs=-1)","86464782":"lr.fit(X_train,y_train)","21aa7e1a":"lr_pred = lr.predict(X_test)","4582d7d0":"from sklearn.metrics import classification_report,confusion_matrix","b839cea8":"print(confusion_matrix(y_test,lr_pred))\nprint('\\n')\nprint(classification_report(y_test,lr_pred))","c08ed7e4":"from sklearn.ensemble import RandomForestClassifier","295c9ab5":"rf = RandomForestClassifier(n_estimators=100)","8395ec22":"rf.fit(X_train,y_train)","cd36a980":"rf_pred = rf.predict(X_test)","30d45f45":"print(classification_report(y_test,rf_pred))\nprint('\\n')\nprint(confusion_matrix(y_test,rf_pred))","44a73f5b":"from sklearn.neighbors import KNeighborsClassifier","e5808af4":"knn = KNeighborsClassifier(n_neighbors=100,n_jobs=-1)","f8217401":"knn.fit(X_train,y_train)","1c8fbebb":"knn_pred = knn.predict(X_test)\nprint(classification_report(y_test,knn_pred))\nprint('\\n')\nprint(confusion_matrix(y_test,knn_pred))","47f86bf6":"from catboost import CatBoostClassifier\ncb = CatBoostClassifier(random_state=42,use_best_model=True,iterations=1000)\ncb.fit(X_train,y_train,use_best_model=True,verbose=100,eval_set=(X_test,y_test))","e9ec22e4":"cb_pred = cb.predict(X_test)\nprint(classification_report(y_test,cb_pred))\nprint('\\n')\nprint(confusion_matrix(y_test,cb_pred))","3a1b981a":"# 3) KNN","76b9d0d8":"# CatBoost = 41% ACCURACY\n# So far, CatBoost seems to be the best model","3fe30e62":"# 2) RANDOM FOREST","c8c9474c":"# DROPPING SOME UNNECCESSARY COLUMNS","0e81870a":"# LR = 38% ; can't use thise model as this model couldn't calculate F-1 score properly","d1567bce":"# NOW LET'S DO LABEL ENCODING OF ALL THESE OBJECT COLUMNS","d43a274d":"# 3) CATBOOST","b2bffd74":"# we'll go with median","a79090e3":"# MISSING DATA HAS BEEN TAKEN CARE OF","16503893":"# 1) LOGISTIC REGRESSION","ea89b0e2":"# Bed Grade has some missing values...let's try filling those..since only less than 0.4% of data is missing we can fit missing values with the median\/mean as it won't affect accuracy much","bf85449d":"# RF = 35% with n=100 (it is the same even when n=500)","10fdbcbd":"# KNN ACCURACY = 38% with k=100","6ef30544":"# Let's get rid of unneccessary columns\n# City_Code_Patient , City_Code_Hospital, patientid ","34fca749":"# make a function and create another column as 'stay_category'(number it from 1 to 11)...make it int..then use df.corr()"}}