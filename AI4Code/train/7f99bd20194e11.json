{"cell_type":{"e93be37c":"code","bf9e7b22":"code","97e0d628":"code","bbb83b55":"code","999fdebb":"code","f2091c9c":"code","f7cb5247":"code","e03502d3":"code","1a46e0c4":"code","e3d69be2":"markdown","67e46691":"markdown","78e8c606":"markdown","e55c6293":"markdown","2adbb5e2":"markdown","b32ba716":"markdown","4c3d1894":"markdown","1193e379":"markdown"},"source":{"e93be37c":"import tensorflow as tf\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\ntf.compat.v1.disable_eager_execution()\n%matplotlib inline","bf9e7b22":"tf.compat.v1.set_random_seed(1)\nnp.random.seed(1)","97e0d628":"#Create Face Datasets\nx = np.linspace(-1, 1, 100)[:, np.newaxis]\nnoise = np.random.normal(0, 0.1, size = x.shape)\ny = np.power(x, 2) + noise","bbb83b55":"# Plot fake Datasets\nplt.scatter(x, y)\nplt.tight_layout()\nplt.show()","999fdebb":"\ntf_x = tf.compat.v1.placeholder(tf.float32, x.shape)\ntf_y = tf.compat.v1.placeholder(tf.float32, y.shape)","f2091c9c":"l1= tf.compat.v1.layers.dense(tf_x, 10, tf.nn.relu)\noutput= tf.compat.v1.layers.dense(l1, 1)","f7cb5247":"loss = tf.compat.v1.losses.mean_squared_error(tf_y, output)\noptimizer = tf.compat.v1.train.GradientDescentOptimizer(learning_rate = 0.5)\ntrain_optimizers = optimizer.minimize(loss)","e03502d3":"sess = tf.compat.v1.Session()\nsess.run(tf.compat.v1.global_variables_initializer())","1a46e0c4":"plt.ion()\n\nfor step in range(10):\n    _, l, pred = sess.run([train_optimizers, loss, output], {tf_x:x, tf_y:y})\n    if step % 5 == 0:\n        plt.cla()\n        plt.scatter(x, y)\n        plt.plot(x, pred, 'r-', lw= 5)\n        plt.text(0.5, 0, 'loss=%.4f'%l, fontdict={'size':20, 'color':'red'})\n        plt.pause(0.1)\n        \nplt.ioff()\nplt.show()","e3d69be2":"# Visualize the hole thing","67e46691":"# Create Neural networks","78e8c606":"# <b style=\"color:blue\"> Why we use Seed Function ? <\/b>\n\n![](http:\/\/)Seed function is used to save the state of a random function, so that it can generate same random numbers on multiple executions of the code on the same machine or on different machines (for a specific seed value). The seed value is the previous value number generated by the generator.","e55c6293":"# Compute Cost","2adbb5e2":"# Create Session()","b32ba716":"<b sytle=\"font-size:25px;\"><b style=\"color:'blue\">What is Simple Linear Regression?<\/b><\/b>\n\nSimple linear regression is a statistical method that allows us to summarize and study relationships between two continuous (quantitative) variables:\n\n    . One variable, denoted x, is regarded as the predictor, explanatory, or independent variable.\n    . The other variable, denoted y, is regarded as the response, outcome, or dependent variable.\nBecause the other terms are used less frequently today, we'll use the <b style=\"color:blue\">predictor\"<\/b> and <b style=\"color:blue\">\"response\"<\/b> terms to refer to the variables encountered in this course. The other terms are mentioned only to make you aware of them should you encounter them. Simple linear regression gets its adjective \"simple,\" because it concerns the study of only one predictor variable. In contrast, multiple linear regression, which we study later in this course, gets its adjective \"multiple,\" because it concerns the study of two or more predictor variables.\n\nTypes of relationships\nBefore proceeding, we must clarify what types of relationships we won't study in this course, namely, deterministic (or functional) relationships. Here is an example of a deterministic relationship.\n\nfahrenheit vs celsius plot\n\nNote that the observed (x, y) data points fall directly on a line. As you may remember, the relationship between degrees Fahrenheit and degrees Celsius is known to be:\n\n<img src=\"https:\/\/online.stat.psu.edu\/stat462\/sites\/onlinecourses.science.psu.edu.stat462\/files\/02simple\/temps\/index.jpg\" alt = \"Simple Regression\">\n\nThat is, if you know the temperature in degrees Celsius, you can use this equation to determine the temperature in degrees Fahrenheit exactly.\n\nHere are some examples of other deterministic relationships that students from previous semesters have shared:\n\nCircumference = \u03c0 \u00d7 diameter\nHooke's Law: Y = \u03b1 + \u03b2X, where Y = amount of stretch in a spring, and X = applied weight.\nOhm's Law: I = V\/r, where V = voltage applied, r = resistance, and I = current.\nBoyle's Law: For a constant temperature, P = \u03b1\/V, where P = pressure, \u03b1 = constant for each gas, and V = volume of gas.\nFor each of these deterministic relationships, the equation exactly describes the relationship between the two variables. This course does not examine deterministic relationships. Instead, we are interested in statistical relationships, in which the relationship between the variables is not perfect.\n\nHere is an example of a statistical relationship. The response variable y is the mortality due to skin cancer (number of deaths per 10 million people) and the predictor variable x is the latitude (degrees North) at the center of each of 49 states in the U.S. (skincancer.txt) (The data were compiled in the 1950s, so Alaska and Hawaii were not yet states, and Washington, D.C. is included in the data set even though it is not technically a state.)\n\n<img src=\"https:\/\/online.stat.psu.edu\/stat462\/sites\/onlinecourses.science.psu.edu.stat462\/files\/02simple\/scatterplot_skin_cancer\/index.png\" alt = \"Regression\">\n\nYou might anticipate that if you lived in the higher latitudes of the northern U.S., the less exposed you'd be to the harmful rays of the sun, and therefore, the less risk you'd have of death due to skin cancer. The scatter plot supports such a hypothesis. There appears to be a negative linear relationship between latitude and mortality due to skin cancer, but the relationship is not perfect. Indeed, the plot exhibits some \"trend,\" but it also exhibits some \"scatter.\" Therefore, it is a statistical relationship, not a deterministic one.\n\nSome other examples of statistical relationships might include:\n\nHeight and weight \u2014 as height increases, you'd expect weight to increase, but not perfectly.\nAlcohol consumed and blood alcohol content \u2014 as alcohol consumption increases, you'd expect one's blood alcohol content to increase, but not perfectly.\nVital lung capacity and pack-years of smoking \u2014 as amount of smoking increases (as quantified by the number of pack-years of smoking), you'd expect lung function (as quantified by vital lung capacity) to decrease, but not perfectly.\nDriving speed and gas mileage \u2014 as driving speed increases, you'd expect gas mileage to decrease, but not perfectly.\nOkay, so let's study statistical relationships between one response variable y and one predictor variable x!\n","4c3d1894":"# Create Tensorflow Variable","1193e379":"# plt.ion()\nThe matplotlib.pyplot.ion() is used to turn on interactive mode. To check the status of interactive mode one can run the below commands,\n\n* plt.rcParams['interactive']\n\nor, this command\n\n* plt.isinteractive()\n\nMatplotlib also interacts with different backends behind the scene. The workhorse behind rendering charts in matplotlib is its backends. Some interactive backends dynamically update and pop up to users after every change. By default, the interactive mode is turned off."}}