{"cell_type":{"a9a72276":"code","4549b532":"code","7d07b875":"code","70d2abc9":"code","7383e2ee":"code","95e9c5b7":"code","888c3d33":"code","0e9f9225":"code","a56ab04c":"code","70fbceb4":"code","2330ea93":"code","2b7657dd":"code","b54c95e6":"code","99c0149f":"code","46e47abd":"markdown","83a823ff":"markdown","97ae409e":"markdown","a71db4bc":"markdown","65bb09c3":"markdown","221c83de":"markdown","60342c3e":"markdown","074e878c":"markdown","010f0177":"markdown","42d1cdd8":"markdown","c1e3f4c1":"markdown","a057f7f3":"markdown","8072a9df":"markdown","5d1fccd9":"markdown","a55e6b9d":"markdown"},"source":{"a9a72276":"from IPython.display import Image\nImage(\"..\/input\/screenshot1\/Screenshot 2020-02-03 at 02.42.13.png\")","4549b532":"# some dynamic folium features would work on the latest versions only, uncomment and run the line below in order to upgrade your\n# kernels folium package to the latest version:\n# !pip install folium --upgrade","7d07b875":"# the author who inspired me to use Timestamped GeoJson:\n# https:\/\/github.com\/bertcarremans\/air_pollution_forecasting\/blob\/master\/notebooks\/Visualizing%20Air%20Pollution%20in%20Belgium.ipynb","70d2abc9":"import os\nfor dirname, _, filenames in os.walk('..\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7383e2ee":"import numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport math\n\nimport folium\nfrom folium import Choropleth, Circle, Marker, plugins\nfrom folium.plugins import HeatMap, MarkerCluster, TimestampedGeoJson\n\nfrom geopandas.tools import geocode\nfrom geopy.geocoders import GoogleV3\ngeocoder = GoogleV3(api_key = 'your_google_maps_API_key') #I have uploaded the processed dataset with already geocoded properties.\n# if you want to use this feature, create an account at google maps, and get their API key\n\nimport datetime\n\nimport seaborn as sns","95e9c5b7":"df = pd.read_csv('..\/input\/tamil-nadu-air-pollution-latlon\/India_Air_LatLOn.csv')","888c3d33":"g_df = gpd.read_file('..\/input\/tamil-nadur-districts\/IND_adm2.shp')\ntamil_nadu_df = g_df[g_df['NAME_1'] == 'Tamil Nadu'][['NAME_2', 'geometry']]","0e9f9225":"df['Sampling Date'] = pd.to_datetime(df['Sampling Date'])","a56ab04c":"c = 0\nfor i in df['Sampling Date'].unique():\n    c += 1\n    if c%3 != 0:\n        df.drop(df[df['Sampling Date'] == i].index, axis = 0, inplace = True)\n\n    ","70fbceb4":"pollutants = {\n    1: {\n        'notation' : 'SO2',\n        'name' :'Sulphur dioxide',\n        'bin_edges' : np.array([15,30,45,60,80,100,125,165,250])\n    },\n    5: {\n        'notation' : 'PM10',\n        'name' :'Particulate matter < 10 \u00b5m',\n        'bin_edges' : np.array([10,20,30,40,50,70,100,150,200])\n    },\n    7: {'notation' : 'O3',\n        'name' :'Ozone',\n        'bin_edges' : np.array([30,50,70,90,110,145,180,240,360])\n    },\n    8: {'notation' : 'NO2',\n        'name' :'Nitrogen dioxide',\n        'bin_edges' : np.array([25,45,60,80,110,150,200,270,400])\n    },\n    10: {'notation' : 'CO',\n        'name' :'Carbon monoxide',\n         'bin_edges' : np.array([1.4,2.1,2.8,3.6,4.5,5.2,6.6,8.4,13.7])\n    },\n    20: {'notation' : 'C6H6',\n        'name' :'Benzene',\n         'bin_edges' : np.array([0.5,1.0,1.25,1.5,2.75,3.5,5.0,7.5,10.0])\n    }\n}","2330ea93":"color_scale = np.array(['#053061','#2166ac','#4393c3','#92c5de','#d1e5f0','#fddbc7','#f4a582','#d6604d','#b2182b','#67001f'])\nsns.palplot(sns.color_palette(color_scale))","2b7657dd":"def color_coding(poll, bin_edges):    \n    idx = np.digitize(poll, bin_edges, right=True)\n    return color_scale[idx]\n\ndef prepare_data(df, pollutant_ID):\n    print('> Preparing data...')\n    # df = df.reset_index().merge(meta, how='inner', on='SamplingPoint').set_index('DatetimeBegin')\n    df = df.loc[:, ['Stn Code', 'Sampling Date', 'lon', 'lat', 'SO2']]\n    # df = df.groupby('Stn Code', group_keys=False).resample(rule='M').last().reset_index()\n    df['color'] = df.SO2.apply(color_coding, bin_edges=pollutants[pollutant_ID]['bin_edges'])\n    return df\n\ndef create_geojson_features(df):\n    print('> Creating GeoJSON features...')\n    features = []\n    for _, row in df.iterrows():\n        # print(row['Sampling Date'])\n        feature = {\n            'type': 'Feature',\n            'geometry': {\n                'type':'Point', \n                'coordinates':[row['lon'],row['lat']]\n            },\n            'properties': {\n                'time': row['Sampling Date'].date().__str__(),\n                # .__str__()\n                'style': {'color' : row['color']},\n                'icon': 'circle',\n                'iconstyle':{\n                    'fillColor': row['color'],\n                    'fillOpacity': 0.5,\n                    'stroke': 'true',\n                    'radius': 20,\n                    'weight': 1\n                }\n            }\n        }\n        features.append(feature)\n    return features\n\n# state_crds = geocoder.geocode('Tamil Nadu')\nstate_crds = {'latitude': '11.1271225', 'longitude': '78.6568942'}\n\ndef make_map(features):\n    print('> Making map...')\n    coords=[11.1271225, 78.6568942]\n    pollution_map = folium.Map(location=coords, \n                               control_scale=True, \n                               zoom_start=7,\n                               tiles = 'CartoDB positron'\n                              )\n\n\n\n    TimestampedGeoJson(\n        {'type': 'FeatureCollection',\n        'features': features}\n        , period='P1D'\n        , duration='P10D'\n        , add_last_point=True\n        , auto_play=False\n        , loop=False\n        , max_speed=1\n        , loop_button=True\n        , date_options='YYYY\/MM\/DD'\n        , time_slider_drag_update=True\n        , transition_time = 100\n    ).add_to(pollution_map)\n    \n    # group1.add_to(pollution_map)\n    # group2.add_to(pollution_map)\n\n    # folium.map.LayerControl('bottomright', collapsed=False).add_to(pollution_map)\n    # df_heat = \n    # pollution_map.add_children(plugins.HeatMap(stations, radius=heat_map_radius))\n    print('> Done.')\n    return pollution_map\n\ndef plot_pollutant(pollutant_ID):\n    print('Mapping {} pollution in Tamil Nadu in 2010-2015'.format(pollutants[pollutant_ID]['name']))\n    df1 = prepare_data(df, pollutant_ID)\n    features = create_geojson_features(df1)\n\n    return make_map(features), df1","b54c95e6":"pollution_map, df1 = plot_pollutant(1)\npollution_map.save('pollution_so2.html')\npollution_map","99c0149f":"df_n = df\ndf_n['SO2'] = df_n['SO2']\/max(df_n['SO2']) # Normalizing the SO2 level. This is a requirement of folium heatmaps.\n\n#Creating list of lists. Thats how timestamped data is being fed to HeatMapWithTime\nheat_data = [[[row['lat'],row['lon'], row['SO2']] for index, row in df_n[df_n['Sampling Date'] == date].iterrows()] for date in df_n['Sampling Date'].unique()]\n\nindex = pd.to_datetime(df_n['Sampling Date'].unique())\nindex = list(index)\ncoords=[11.1271225, 78.6568942]\npollution_map = folium.Map(location=coords, \n                           control_scale=True, \n                           zoom_start=7,\n                           tiles = 'CartoDB positron'\n                          )\n\n\nhm = plugins.HeatMapWithTime(heat_data,\n                             auto_play=True,\n                             min_opacity = 0.1, \n                             max_opacity=1, \n                             radius = 40,\n#                              index = index, for some reason the animation does not work with index on. If you find the way to make it work, please let me know.\n                             index_steps = 20,\n                             min_speed = 40,\n                             use_local_extrema = True\n                             )\nhm.add_to(pollution_map)\npollution_map.save('pollution_heat_map_so2.html')\n# Display the map\npollution_map","46e47abd":".shp file for districts of Tamil Nadu state. ","83a823ff":"Getting the 33% samle of the dataset. Notebook getts overwhelmed if to use all 12k rows.","97ae409e":"The code is hidden below. Feel free to expand the cell and discover the logic of HeatMap animation. The control panel doesnt work as it should, and I didn't find any workaround. Let me know if you have ideas.","a71db4bc":"For some reason I couldn't get access to .shp files of the notebook. The cell below will have all the input files paths as its output.","65bb09c3":"### All functions to create Timestamped Geojson, and display it nicely on the map. Expand the code cell in order to see the logic behind the visualization.","221c83de":"### Dictionary of air pollutants:","60342c3e":"The notebook is still under development. I would appreciate your comments on how to fix the Heatmap issue with controls. Also I am not really satisfied with the look of the map, so if you have a better idea, or examples, that would be really great.","074e878c":"This notebook is a starter for visualizations of air pollution data in India state Tamil Nadu. I call it a starter, because there is still lots of work to do. Feel free to use this notebook as a starting point.\n","010f0177":"### Color scale for pollution levels:","42d1cdd8":"# Air pollution in Tamil Nadu, India. Starter.","c1e3f4c1":"### All necessary imports:","a057f7f3":"### Animated heat map:","8072a9df":"Geocoded dataset:","5d1fccd9":"Air pollution is a big concern of humanity over the last few decades. The increase of mass production, and numbers of vehicles obviuosly not slowing down. Lets see whats going on.","a55e6b9d":"### Reading data:"}}