{"cell_type":{"85956adb":"code","39585eb8":"code","b46700a5":"code","72040f08":"code","151922c5":"markdown","9eaa1235":"markdown","46437a0e":"markdown"},"source":{"85956adb":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import SVR\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV, KFold\n\npower = pd.read_csv('..\/input\/experimental-power-and-thrust-coefficients\/power.csv')\nthrust = pd.read_csv('..\/input\/experimental-power-and-thrust-coefficients\/thrust.csv') ","39585eb8":"plt.figure(figsize=(12, 6))\nsns.scatterplot(data=power, x='TSR', y='Cp', hue='Type', size='Gamma');\nplt.grid(False)","b46700a5":"dic = {}\n\nfor typ in power['Type'].unique():\n    X = power.loc[power['Type'] == typ, ['TSR', 'Gamma']]\n    y = power.loc[power['Type'] == typ, 'Cp']\n    \n    model = make_pipeline(StandardScaler(), SVR())\n    \n    params = {'svr__gamma' : np.logspace(-2, 0, 5),\n              'svr__C' : np.logspace(-2.5, 2.5, 5),\n              'svr__epsilon': np.logspace(-2.5, -0.5, 5)}\n    \n    gscv = GridSearchCV(model, param_grid = params, cv=KFold(4, shuffle=True, random_state=101),\n                        scoring='neg_root_mean_squared_error')\n    \n    gscv.fit(X, y)\n    \n    dic[typ] = (gscv.best_estimator_.fit(X, y), gscv.best_score_)\n    \n    print(f'{typ} score: {gscv.best_score_:.3f}')","72040f08":"lst = list(sns.color_palette(\"ch:s=.25,rot=-.25\"))\n\nfig, ax = plt.subplots(1, 3, figsize = (18, 6))\n\nXd = power.loc[power['Type'] == 'Diffuser', ['TSR', 'Gamma']].sort_values('TSR')\nyd = power.loc[Xd.index, 'Cp']\n    \nXb = power.loc[power['Type'] == 'Blade', ['TSR', 'Gamma']].sort_values('TSR')\nyb = power.loc[Xb.index, 'Cp']\n    \nXs = power.loc[power['Type'] == 'Shroud', ['TSR', 'Gamma']].sort_values('TSR')\nys = power.loc[Xs.index, 'Cp']\n\ny_pred_d = dic['Diffuser'][0].predict(Xd)\ny_pred_b = dic['Blade'][0].predict(Xb)\ny_pred_s = dic['Shroud'][0].predict(Xs)\n\n\nfor i, (un, l) in enumerate(zip(sorted(X['Gamma'].unique()), lst)):\n    \n    ax[0].set_title('Diffuser')\n    ax[0].scatter(Xd.loc[Xd['Gamma'] == un, 'TSR'], yd[Xd['Gamma'] == un], color=l)\n    ax[0].plot(Xd.loc[Xd['Gamma'] == un, 'TSR'], y_pred_d[Xd['Gamma'] == un], color=l, label=f'{un}')\n    ax[0].set_ylabel('CP')\n    ax[0].set_xlabel('TSR')\n    ax[0].legend()\n    \n    ax[1].set_title('Shroud')\n    ax[1].scatter(Xs.loc[Xs['Gamma'] == un, 'TSR'], ys[Xs['Gamma'] == un], color=l)\n    ax[1].plot(Xs.loc[Xs['Gamma'] == un, 'TSR'], y_pred_s[Xs['Gamma'] == un], color=l, label=f'{un}')\n    ax[1].set_ylabel('CP')\n    ax[1].set_xlabel('TSR')\n    ax[1].legend()\n    \n    ax[2].set_title('Blade')\n    ax[2].scatter(Xb.loc[Xb['Gamma'] == un, 'TSR'], yb[Xb['Gamma'] == un], color=l)\n    ax[2].plot(Xb.loc[Xb['Gamma'] == un, 'TSR'], y_pred_b[Xb['Gamma'] == un], color=l, label=f'{un}')\n    ax[2].set_ylabel('CP')\n    ax[2].set_xlabel('TSR')\n    ax[2].legend()\n    \n    fig.tight_layout()","151922c5":"Turbines generally are evaluated by their Power Coefficients, which is the ratio between the power input and the power output. The purpose of this study was to evaluate how its performance change according to yaw condition. Let's investigate it.","9eaa1235":"In order to generalize the study, we are only considering adimensional values to predict Cp, such as TSR and yaw angle.","46437a0e":"Few comments into the results: to Diffuser and Blade, yaw only affects performance after 10\u00ba degrees. The Shroud configuration is less sensitive to the yaw effect."}}