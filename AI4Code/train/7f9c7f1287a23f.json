{"cell_type":{"61fe5c37":"code","c7e42e23":"code","627a4208":"code","99f39eec":"code","2313837c":"code","3cdd0561":"markdown","d356d9ff":"markdown","8fcf5c96":"markdown","f608e800":"markdown"},"source":{"61fe5c37":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c7e42e23":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom IPython.display import display\nimport seaborn as sns\ndf= pd.read_csv('..\/input\/StudentsPerformance.csv')\nSeriesOfMathsMean=pd.Series()\nSeriesOfParentalDegree=pd.Series()\nfor key,value in df.groupby(['parental level of education']):\n    SeriesOfParentalDegree = SeriesOfParentalDegree.append(pd.Series(key),ignore_index=True)\n    SeriesOfMathsMean= SeriesOfMathsMean.append(pd.Series((value['math score']).mean()),ignore_index=True)\nMeanOfMathsWithParentalEducation = pd.concat([pd.DataFrame(SeriesOfParentalDegree),pd.DataFrame(SeriesOfMathsMean)],axis=1)\nMeanOfMathsWithParentalEducation.columns=['ParentalLevelOfEducation','Mean marks in Maths']\nMeanOfMathsWithParentalEducation=MeanOfMathsWithParentalEducation.sort_values(by=['Mean marks in Maths'],ascending=False,inplace=False).reset_index(drop=True,inplace=False)\ndisplay(MeanOfMathsWithParentalEducation)\nplt.figure(figsize=(16,6))\nsns.barplot(x=MeanOfMathsWithParentalEducation['ParentalLevelOfEducation'],y=MeanOfMathsWithParentalEducation['Mean marks in Maths'],linewidth=2.5,palette='ocean',errcolor=\".9\", edgecolor=\".07\" )\nplt.xlabel('Parental Level Of Education',fontsize=18)\nplt.ylabel('Mean Marks in Maths of their Children',fontsize=18)\nplt.title('Parental Education vs their Children\\'s marks in Maths')\nplt.show()\nSeriesOfParentalDegree=pd.Series()\nSeriesOfReadingsMean=pd.Series()\nfor key,value in df.groupby(['parental level of education']):\n    SeriesOfParentalDegree = SeriesOfParentalDegree.append(pd.Series(key),ignore_index=True)\n    SeriesOfReadingsMean= SeriesOfReadingsMean.append(pd.Series((value['reading score']).mean()),ignore_index=True)\nMeanOfReadingsWithParentalEducation = pd.concat([pd.DataFrame(SeriesOfParentalDegree),pd.DataFrame(SeriesOfReadingsMean)],axis=1)\nMeanOfReadingsWithParentalEducation.columns=['ParentalLevelOfEducation','Mean marks in Reading']\nMeanOfReadingsWithParentalEducation=MeanOfReadingsWithParentalEducation.sort_values(by=['Mean marks in Reading'],ascending=False,inplace=False).reset_index(drop=True,inplace=False)\ndisplay(MeanOfReadingsWithParentalEducation)\nplt.figure(figsize=(16,6))\nsns.barplot(x=MeanOfReadingsWithParentalEducation['ParentalLevelOfEducation'],y=MeanOfReadingsWithParentalEducation['Mean marks in Reading'],linewidth=2.5,palette='ocean_r',errcolor=\".9\", edgecolor=\".07\" )\nplt.xlabel('Parental Level Of Education',fontsize=18)\nplt.ylabel('Mean Marks in Reading of their Children',fontsize=18)\nplt.title('Parental Education vs their Children marks in Reading')\nplt.show()\n\nSeriesOfParentalDegree=pd.Series()\nSeriesOfReadingsMean=pd.Series()\nfor key,value in df.groupby(['parental level of education']):\n    SeriesOfParentalDegree = SeriesOfParentalDegree.append(pd.Series(key),ignore_index=True)\n    SeriesOfReadingsMean= SeriesOfReadingsMean.append(pd.Series((value['writing score']).mean()),ignore_index=True)\nMeanOfReadingsWithParentalEducation = pd.concat([pd.DataFrame(SeriesOfParentalDegree),pd.DataFrame(SeriesOfReadingsMean)],axis=1)\nMeanOfReadingsWithParentalEducation.columns=['ParentalLevelOfEducation','Mean marks in writing']\nMeanOfReadingsWithParentalEducation=MeanOfReadingsWithParentalEducation.sort_values(by=['Mean marks in writing'],ascending=False,inplace=False).reset_index(drop=True,inplace=False)\ndisplay(MeanOfReadingsWithParentalEducation)\nplt.figure(figsize=(16,6))\nsns.barplot(x=MeanOfReadingsWithParentalEducation['ParentalLevelOfEducation'],y=MeanOfReadingsWithParentalEducation['Mean marks in writing'],linewidth=2.5,palette='plasma',errcolor=\".9\", edgecolor=\".07\" )\nplt.xlabel('Parental Level Of Education',fontsize=18)\nplt.ylabel('Mean Marks in Reading of their Children',fontsize=18)\nplt.title('Parental Education vs their Children marks in writing')\nplt.show()","627a4208":"testPrepKey=pd.Series()\ntestPrepValue=pd.Series()\nfor key,value in df.groupby(['test preparation course']):\n    testPrepKey = testPrepKey.append(pd.Series(key),ignore_index=True)\n    testPrepValue= testPrepValue.append(pd.Series((value['math score']).mean()),ignore_index=True)\nk = pd.concat([pd.DataFrame(testPrepKey),pd.DataFrame(testPrepValue)],axis=1)\nk.columns=['test preparation course','Mean marks in math']\nk=k.sort_values(by=['Mean marks in math'],ascending=False,inplace=False).reset_index(drop=True,inplace=False)\ndisplay(k)\nplt.figure(figsize=(6,3))\nsns.barplot(x=k['test preparation course'],y=k['Mean marks in math'],linewidth=2.5,palette='plasma',errcolor=\".9\", edgecolor=\".07\" )\nplt.xlabel('Test preparation course',fontsize=18)\nplt.ylabel('Mean Marks in math of their Children',fontsize=10)\nplt.title('test preparation course vs their Children marks in math')\nplt.show()\n\ntestPrepKey=pd.Series()\ntestPrepValue=pd.Series()\nfor key,value in df.groupby(['test preparation course']):\n    testPrepKey = testPrepKey.append(pd.Series(key),ignore_index=True)\n    testPrepValue= testPrepValue.append(pd.Series((value['reading score']).mean()),ignore_index=True)\nk = pd.concat([pd.DataFrame(testPrepKey),pd.DataFrame(testPrepValue)],axis=1)\nk.columns=['test preparation course','Mean marks in reading']\nk=k.sort_values(by=['Mean marks in reading'],ascending=False,inplace=False).reset_index(drop=True,inplace=False)\ndisplay(k)\nplt.figure(figsize=(6,3))\nsns.barplot(x=k['test preparation course'],y=k['Mean marks in reading'],linewidth=2.5,palette='plasma',errcolor=\".9\", edgecolor=\".07\" )\nplt.xlabel('Test preparation course',fontsize=18)\nplt.ylabel('Mean Marks in reading of their Children',fontsize=10)\nplt.title('test preparation course vs their Children marks in reading')\nplt.show()\n\ntestPrepKey=pd.Series()\ntestPrepValue=pd.Series()\nfor key,value in df.groupby(['test preparation course']):\n    testPrepKey = testPrepKey.append(pd.Series(key),ignore_index=True)\n    testPrepValue= testPrepValue.append(pd.Series((value['writing score']).mean()),ignore_index=True)\nk = pd.concat([pd.DataFrame(testPrepKey),pd.DataFrame(testPrepValue)],axis=1)\nk.columns=['test preparation course','Mean marks in writing']\nk=k.sort_values(by=['Mean marks in writing'],ascending=False,inplace=False).reset_index(drop=True,inplace=False)\ndisplay(k)\nplt.figure(figsize=(6,3))\nsns.barplot(x=k['test preparation course'],y=k['Mean marks in writing'],linewidth=2.5,palette='plasma',errcolor=\".9\", edgecolor=\".07\" )\nplt.xlabel('Test preparation course',fontsize=18)\nplt.ylabel('Mean Marks in writing of their Children',fontsize=10)\nplt.title('test preparation course vs their Children marks in writing')\nplt.show()","99f39eec":"sex= pd.Series()\npdOverAll=pd.DataFrame()\nfor key,value in df.groupby(['gender']):\n    sex = sex.append(pd.Series(key))\n    sex = sex.append(pd.Series(key).copy())\n    pdOverAll = (pd.concat([pdOverAll,pd.DataFrame(value['test preparation course'].value_counts())],axis=0))\npdOverAll = pdOverAll.reset_index(drop=False,inplace=False)\nsex= pd.DataFrame(sex).rename(columns={0:'Sex'}).reset_index(drop=True)\npdOverAll= pd.concat([sex,pdOverAll],axis=1)\npdOverAll.rename(columns={'index':'Test Preparation Course','test preparation course':'Test Preparation Count'},inplace=True)\ndisplay(pdOverAll)\n\nplt.figure(figsize=(16,6))\npdOverAll = pdOverAll.pivot('Sex','Test Preparation Course','Test Preparation Count')\nsns.heatmap(pdOverAll,annot=True,cbar=True,fmt='.0f',cmap='gist_heat',linewidth= 4.0,linecolor='grey')\nplt.show()","2313837c":"plt.figure(figsize=(14,8))\nsns.boxplot(x= df['parental level of education'],y=df['math score'])\nsns.swarmplot(x= df['parental level of education'],y=df['math score'],edgecolor='violet',linewidth = 1.0)\nplt.show()\nplt.figure(figsize=(14,8))\nsns.boxplot(x= df['parental level of education'],y=df['reading score'])\nsns.swarmplot(x= df['parental level of education'],y=df['reading score'],edgecolor='black',linewidth = 1.0)\nplt.show()\nplt.figure(figsize=(14,8))\nsns.boxplot(x= df['parental level of education'],y=df['writing score'])\nsns.swarmplot(x= df['parental level of education'],y=df['writing score'],edgecolor='yellow',linewidth = 1.0)\nplt.show()","3cdd0561":"> **#Which test Preparation course produces the highest mean of all the subjects**","d356d9ff":"# Analysis 3: Which gender has how many completed test prep courses!","8fcf5c96":"# The basic marks distribution","f608e800":"**#1st Analysis: Under which type of parental level of education , does their students' mean marks in respective subjects is obtained most**\n"}}