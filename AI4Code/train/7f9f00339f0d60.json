{"cell_type":{"73c0f1df":"code","4a4e79ff":"code","60aac7f0":"code","d8e47584":"code","bb815c3c":"code","00bbb577":"code","735c5e44":"code","bd525a7d":"code","6a9d1d7b":"code","f81083f4":"code","f06c7ada":"code","cf184b8d":"code","9ac2fc5d":"code","e00f10db":"code","6e821700":"code","b2c2f244":"code","1db3200d":"code","05915711":"code","b934543c":"code","de7304b5":"code","415e93c1":"code","d81dbafb":"code","286a04cb":"code","1b9ae2d0":"code","9a3c91f1":"markdown","f73167c3":"markdown","8afd7dcf":"markdown","70107ef7":"markdown","4c7a3f67":"markdown"},"source":{"73c0f1df":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.decomposition import PCA\nimport plotly.express as px\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport math\n\n%matplotlib inline\n\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\nsns.set(style=\"whitegrid\")\n\n\nimport warnings\nimport re\nwarnings.filterwarnings(\"ignore\")","4a4e79ff":"df = pd.read_csv('\/kaggle\/input\/productivity-prediction-of-garment-employees\/garments_worker_productivity.csv')\ntarget_col = 'actual_productivity'\ndf['department'] = df['department'].replace({'finishing ': 'finishing', 'sweing' : 'sewing'})\ndf","60aac7f0":"df_summary = df.describe()\ndf_summary","d8e47584":"df.isna().sum()","bb815c3c":"df['wip'] = df['wip'].fillna(df['wip'].mean())\n# df.drop(columns=['wip'], inplace=True)\ndf['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values('date')","00bbb577":"sns.pairplot(df)","735c5e44":"fig, axes = plt.subplots(2, 5, figsize = (20,10));\ncol_cnt = 0\ncol_names = ['team', 'targeted_productivity', 'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men', 'no_of_style_change', 'no_of_workers']\nfor r in range(2):\n    for c in range(5):\n        try:\n            sns.boxplot(df[col_names[col_cnt]], ax=axes[r][c], orient=\"v\");\n            col_cnt += 1\n        except:\n            pass","bd525a7d":"outlier_cols = [\"targeted_productivity\", \"wip\", \"idle_time\", \"idle_men\", \"no_of_style_change\"] # Columns with outliers\ndef remove_outliers(df, col):\n    q1 = df_summary[col].loc[\"25%\"]\n    q3 = df_summary[col].loc[\"75%\"]\n    iqr = q3 - q1\n    lower_bound = q1 - (1.5 * iqr)\n    upper_bound = q3 + (1.5 * iqr)\n    df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]\n    return df\n    \nfor col in outlier_cols:\n    df = remove_outliers(df, col)\n    \ndf.drop(columns=[\"idle_time\", \"idle_men\", \"no_of_style_change\"], inplace=True)","6a9d1d7b":"df_temp = pd.concat([df[['date', 'actual_productivity']].groupby('date')['actual_productivity'].mean().reset_index(), df[['date', 'over_time']].groupby('date')['over_time'].mean().reset_index().drop(columns=['date'])], axis=1)\nplt.figure(figsize = (15,8))\nsns.lineplot(data = df_temp.actual_productivity, color = \"orange\")\nax2 = plt.twinx()\nsns.lineplot(data = df_temp.over_time, ax = ax2, color = \"red\");","f81083f4":"df = pd.concat([df, pd.get_dummies(df['day'])], axis = 1) \ndf = pd.concat([df, pd.get_dummies(df['department'])], axis = 1)\ndf.drop(columns=['quarter', 'department', 'day'], inplace=True)","f06c7ada":"cols = list(df.columns)\ncols.remove(target_col)","cf184b8d":"df = df[cols + [target_col]]","9ac2fc5d":"plt.figure(figsize = (20,8))\nsns.heatmap(df.corr(), annot=True, fmt='.2g', cmap=\"YlGnBu\");","e00f10db":"df.drop(columns=['date'], inplace=True)\ncols = list(df.columns)\ncols.remove(target_col)","6e821700":"X = df[cols]\ny = df[[target_col]].to_numpy()","b2c2f244":"model = linear_model.LinearRegression()\nmodel.fit(X, y)\nimportance = model.coef_[0]\nfor i,v in enumerate(importance):\n\tprint('Feature: %s, Score: %.5f' % (list(X.columns)[i],v))\nplt.bar([x for x in range(len(importance))], importance)\nplt.show()","1db3200d":"model = DecisionTreeRegressor()\nmodel.fit(X, y)\nimportance = model.feature_importances_\nfor i,v in enumerate(importance):\n\tprint('Feature: %s, Score: %.5f' % (list(X.columns)[i],v))\nplt.bar([x for x in range(len(importance))], importance)\nplt.show()","05915711":"comp = 2\npca = PCA(n_components=comp)\npca.fit(X)\nX_pca = pca.transform(X)\n\nprint(f\"Variance explained: {round(sum(pca.explained_variance_ratio_)*100, 2)}%\")","b934543c":"X_pca_df = pd.DataFrame(X_pca, columns=['pca_1', 'pca_2'])","de7304b5":"data_temp = pd.concat([X_pca_df, df[[target_col]]], axis=1)\nfig = px.scatter_3d(data_temp, x='pca_1', y='pca_2', z=target_col, color=target_col, opacity=0.7, size_max=2)\nfig.show()","415e93c1":"X_train, X_test, y_train, y_test = train_test_split(X_pca_df, y, test_size = 0.2, random_state = 42)","d81dbafb":"regr = linear_model.LinearRegression(normalize=True)\nregr.fit(X_train, y_train)\ny_pred = regr.predict(X_test)\n\nprint(f\"MSE: {mean_squared_error(y_test, y_pred)}\")\nprint(f\"RMSE: {math.sqrt(mean_squared_error(y_test, y_pred))}\")\nprint(f\"MAE: {mean_absolute_error(y_test, y_pred)}\")","286a04cb":"pred_df = pd.concat([pd.DataFrame(y_pred), pd.DataFrame(y_test)], axis=1)\npred_df.columns = ['pred', 'actual']\n\npred_df['error'] = (pred_df['actual'] - pred_df['pred']) ** 2","1b9ae2d0":"sns.lineplot(data=pred_df, x='pred', y='error');","9a3c91f1":"## Train-test split","f73167c3":"## Feature selection","8afd7dcf":"## Productivity vs Overtime","70107ef7":"## PCA","4c7a3f67":"## Removing outliers"}}