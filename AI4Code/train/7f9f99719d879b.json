{"cell_type":{"84c9e6a9":"code","39faa2f2":"code","d4adbbff":"code","f8d28c52":"code","87bc3d6c":"code","bf9686d0":"code","6c1bdff3":"code","a32867cc":"code","3f074993":"code","dbd119b0":"code","9be836df":"code","d0ad2f75":"code","53267e8d":"code","3426caf5":"code","2e9f2fb9":"code","97802f59":"code","e7886808":"code","2287c0b3":"code","53204124":"code","f576eb21":"code","23406d77":"code","5545154b":"code","4d22ee21":"code","3a85d581":"code","5ca59737":"code","83b75256":"code","a0661570":"code","42ee21c1":"code","8c303941":"code","421f1d2e":"code","61c6e22f":"code","f16798f3":"markdown","2fd42455":"markdown","4eae0e4d":"markdown","42c1ae0c":"markdown","31f4e13a":"markdown","2c54e7b3":"markdown"},"source":{"84c9e6a9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))","39faa2f2":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\nsub= pd.read_csv('..\/input\/sample_submission.csv')\nprint(\"Train shape : \",train.shape)\nprint(\"Test shape : \",test.shape)\nprint(\"sub : \", sub.shape)","d4adbbff":"import os\nimport time\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\nimport math\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","f8d28c52":"## split to train and val\ntrain, val = train_test_split(train, test_size=0.08, random_state=2018)","87bc3d6c":"train.head()","bf9686d0":"train['question_text'][0]","6c1bdff3":"lens = train.question_text.str.len()\nlens.mean(), lens.std(), lens.max()","a32867cc":"from matplotlib import pyplot as plt\n%matplotlib inline","3f074993":"lens.hist();\nplt.title('Counts for different length of questions')\nplt.ylabel('Count')\nplt.xlabel('Length of questions')\n","dbd119b0":"train.loc[lens.argmax()]['question_text']","9be836df":"train.isnull().sum()","d0ad2f75":"import re, string\nre_tok = re.compile(f'([{string.punctuation}\u201c\u201d\u00a8\u00ab\u00bb\u00ae\u00b4\u00b7\u00ba\u00bd\u00be\u00bf\u00a1\u00a7\u00a3\u20a4\u2018\u2019\u0010])')\ndef tokenize(s): return re_tok.sub(r' \\1 ', s).split()","53267e8d":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer","3426caf5":"n = train.shape[0]\nvec = TfidfVectorizer(ngram_range=(1,2), tokenizer=tokenize,\n               min_df=3, max_df=0.9, strip_accents='unicode', use_idf=1,\n               smooth_idf=1, sublinear_tf=1 )\ntrn_term_doc = vec.fit_transform(train['question_text'])\nval_term_doc = vec.transform(val['question_text'])\ntest_term_doc = vec.transform(test['question_text'])\n\n","2e9f2fb9":"vec_count = CountVectorizer(ngram_range=(1,2), tokenizer=tokenize,\n              strip_accents='unicode' )","97802f59":"trn_term_doc_count = vec_count.fit_transform(train['question_text'])","e7886808":"word_dict = vec_count.vocabulary_\nword_df = pd.DataFrame.from_dict(word_dict, orient='index')","2287c0b3":"word_df = word_df.rename({0:'Count'}, axis=1)","53204124":"word_df.sort_values('Count').head(20)","f576eb21":"trn_term_doc, val_term_doc, test_term_doc","23406d77":"def pr(y_i, y):\n    p = x[y==y_i].sum(0)\n    return (p+1) \/ ((y==y_i).sum()+1)\n","5545154b":"x = trn_term_doc\nval_x = val_term_doc\ntest_x = test_term_doc","4d22ee21":"def get_mdl(y):\n    y = y.values\n    r = np.log(pr(1,y) \/ pr(0,y))\n    m = LogisticRegression(C=4, dual=True)\n    x_nb = x.multiply(r)\n    return m.fit(x_nb, y), r","3a85d581":"preds = np.zeros((len(val), 1))\nm,r = get_mdl(train['target'])","5ca59737":"preds[:,0] = m.predict_proba(val_x.multiply(r))[:,1]","83b75256":"preds.shape","a0661570":"val.loc[:, 'prediction'] = preds","42ee21c1":"from sklearn.metrics import f1_score","8c303941":"best_score = []\nts = np.arange(0, 1, 0.05)\nfor t in ts :\n    preds = np.where(val['prediction'] > t, 1, 0)\n    score =  f1_score(val['target'], preds )\n    print('Threshold: ', t , ',f1 score :', score )\n    best_score.append(score)\n    \nbest_idx = np.array(best_score).argmax()\n    \nprint('Best threshold :', ts[best_idx], 'Best Score :', best_score[best_idx] )","421f1d2e":"train = pd.read_csv(\"..\/input\/train.csv\")\nm,r = get_mdl(train['target'])\npreds = np.zeros((len(test), 1))\npreds[:,0] = m.predict_proba(test_x.multiply(r))[:,1]","61c6e22f":"submission = pd.DataFrame({'qid': sub[\"qid\"]})\nsubmission['prediction'] = np.where(preds > ts[best_idx], 1 , 0)\nsubmission.to_csv('submission.csv', index=False)","f16798f3":"So it is a question about math with Latex. :) I am gonna keep it as what it is.... but a bit processing for these Latex syntax may become a good feature","2fd42455":"# Submission","4eae0e4d":"The tail is quite long, let's take a look how does it looks like.","42c1ae0c":"Lets do a TF-IDF for linear features","31f4e13a":"# VALIDATION SCORE","2c54e7b3":"# TEST"}}