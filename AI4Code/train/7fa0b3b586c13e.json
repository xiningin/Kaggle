{"cell_type":{"d07114da":"code","a236de5b":"code","b185655f":"code","c4c7cec5":"code","598c3f30":"code","7b91acfd":"code","c07f14da":"code","d6b11ccf":"code","01b3d4f7":"code","16740ba7":"code","7fe52243":"code","3aa28133":"code","59360191":"code","0e94f04c":"code","e8d5c105":"code","b0e00d8e":"code","9308a0f3":"code","24dbc328":"code","a503a66e":"code","85e94198":"code","5b7d967f":"code","3d332ba8":"code","dcdb3872":"markdown","8dc68338":"markdown","d48162a2":"markdown","5deb31be":"markdown","dfae7d54":"markdown","a786b5e0":"markdown","264c12a1":"markdown","5b9a5a70":"markdown","e4d0767d":"markdown","6d6b8373":"markdown","c95e7c86":"markdown","df8130eb":"markdown","d1081881":"markdown","87982a41":"markdown","8cb29855":"markdown","a6240566":"markdown"},"source":{"d07114da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a236de5b":"!pip install pytorch-tabnet","b185655f":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.preprocessing import LabelEncoder\nfrom imblearn.over_sampling import SMOTE\n%matplotlib inline","c4c7cec5":"df = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\n\ndf.head()","598c3f30":"df.shape","7b91acfd":"categorical_features = ['gender', 'hypertension', 'heart_disease','ever_married', 'work_type', 'Residence_type', 'smoking_status']\nnum_features = ['age', 'avg_glucose_level', 'bmi']","c07f14da":"data = df.drop('id', axis=1)\ndata.head()","d6b11ccf":"for categorical_feature in categorical_features:\n    print(data[categorical_feature].unique())","01b3d4f7":"data.isna().sum()","16740ba7":"for i in categorical_features:\n    plt.figure(figsize=(10,5))\n    sns.countplot(x = data[i])\n    plt.show()","7fe52243":"sns.pairplot(data)\nplt.show()","3aa28133":"data['smoking_status'].replace('Unknown', np.nan, inplace=True)","59360191":"data.isna().sum()","0e94f04c":"data['bmi'].fillna(data['bmi'].mean(), inplace=True)\ndata['smoking_status'].fillna(data['smoking_status'].mode()[0], inplace = True)\n\ndata.isna().sum()","e8d5c105":"sns.countplot(x = data['smoking_status'])","b0e00d8e":"plt.figure(figsize=(10,7))\nsns.histplot(data[\"bmi\"])\nplt.show()","9308a0f3":"le = LabelEncoder()\nen_data = data[categorical_features].apply(le.fit_transform)\nen_data.head()","24dbc328":"y = data['stroke']\nX = pd.concat([en_data,data[num_features]], axis=1)\n\nX.head()","a503a66e":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42, stratify=y)","85e94198":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","5b7d967f":"from pytorch_tabnet.tab_model import TabNetClassifier\n\nclf = TabNetClassifier()  #TabNetRegressor()\nclf.fit(X_train, y_train)\npreds = clf.predict(X_test)","3d332ba8":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\n# print(\"The Training Score of RandomForestClassifier is: {:.3f}%\".format(clf.score(X_train, y_train)*100))\nprint(\"\\n----------------------------------------------------------------------\\n\")\nprint(\"The Classification report: \\n{}\\n\".format(classification_report(y_test, preds)))\n\n#Visualize confusion matrix\nplt.figure(figsize = (10, 8))\nsns.heatmap(confusion_matrix(y_test, preds), cmap = 'Blues', annot = True, fmt = 'd', linewidths = 5, cbar = False, annot_kws = {'fontsize': 15},\n           yticklabels = ['No stroke', 'Stroke'], xticklabels = ['Predicted no stroke', 'Predicted stroke'])\nplt.yticks(rotation = 0)\nplt.show()\n\nprint(\"\\n----------------------------------------------------------------------\\n\") \nprint(\"The Accuracy Score of TabNet is: {:.3f}%\".format(accuracy_score(y_test, preds)*100))","dcdb3872":"# Label Encoding","8dc68338":"# Applying Standardization","d48162a2":"# Countplots after filling the Missing Values","5deb31be":"# Thanks you have reached the end :)","dfae7d54":"# Dropping unneccesary features","a786b5e0":"# Importing Libraries","264c12a1":"# Classification Report & Test data Accuracy Scores","5b9a5a70":"# Filling the Missing Values","e4d0767d":"# Checking for missing values","6d6b8373":"# Differentiating categorical and numerical features from the dataset","c95e7c86":"# Plotting Countplots","df8130eb":"# Training the Model","d1081881":"# Installing Pytorch-TabNet\n\nFor stroke prediction I'll be using TabNet developed [dreamquark-ai](https:\/\/github.com\/dreamquark-ai\/tabnet), it's a very simple, efficient and easy to use algorithm for binary classification, multi-classification and regression aswell.","87982a41":"# Reading the Data\nI'm using [Sonak Mukherjee](https:\/\/www.kaggle.com\/redhunter20\/stroke-prediction-rf-acc-93) notebook's pre-processing steps here.","8cb29855":"# Getting list of unique values from all the columns in the dataframe","a6240566":"# Splitting the data"}}