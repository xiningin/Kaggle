{"cell_type":{"d6e9a14f":"code","5114caa3":"code","abcbc0cf":"code","771ce35f":"code","e7c35d75":"code","d7168bc3":"code","f2486a7e":"code","6789f03f":"code","9b6ee850":"code","8982e065":"code","08f9eb4d":"code","d64424b8":"code","04a0b1c4":"code","7b10431f":"code","38a43910":"code","2f8cfa84":"code","ec188d28":"code","6f2a6f9e":"code","ee37308e":"markdown","d926225e":"markdown","37614896":"markdown","a0182b9d":"markdown","6a629d6b":"markdown","aee4fe30":"markdown","507874d4":"markdown","f2ed1bf9":"markdown","a855a5e2":"markdown","295acf72":"markdown","f5823db6":"markdown","9e7bbef6":"markdown","07b1dd02":"markdown","d9944901":"markdown"},"source":{"d6e9a14f":"# Supress Warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# import required libraries\nimport numpy as np\nimport pandas as pd\nimport datetime as dt\n\n# for data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# for Interactive Shells\nfrom IPython.display import display\n\n# setting up the chart size and background\nplt.rcParams['figure.figsize'] = (16, 8)\nplt.style.use('fivethirtyeight')\n\n# For words Preprocessesing\nimport nltk\nimport re\nfrom bs4 import BeautifulSoup as bs\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\n","5114caa3":"consumer_affairs_complaints = pd.read_csv('..\/input\/comcastcomplaints\/comcast_consumeraffairs_complaints.csv')\ncomplaint_2015 = pd.read_csv('..\/input\/comcastcomplaints\/comcast_fcc_complaints_2015.csv')","abcbc0cf":"display(\"Dataset : Comcast Consumer Affairs Complaints\")\ndisplay(consumer_affairs_complaints.head())\nprint()\ndisplay(\"Dataset : comcast fcc complaints 2015\")\ndisplay(complaint_2015.head())","771ce35f":"display(\"Shape of Dataset : Comcast Consumer Affairs Complaints\")\ndisplay(consumer_affairs_complaints.shape)\nprint()\ndisplay(\"Shape of Dataset : comcast fcc complaints 2015\")\ndisplay(complaint_2015.shape)","e7c35d75":"display(\"Information of Dataset : Comcast Consumer Affairs Complaints\")\ndisplay(consumer_affairs_complaints.info())\n\ndisplay(\"Information of Dataset : comcast fcc complaints 2015\")\ndisplay(complaint_2015.info())","d7168bc3":"# Create a new col Date_Time in Comcast fcc complaints 2015 (df2)\ncomplaint_2015[\"Date\"] = pd.to_datetime(complaint_2015[\"Date\"])\ncomplaint_2015['month'] = complaint_2015['Date'].dt.month\ncomplaint_2015['month_day'] = complaint_2015['Date'].dt.strftime('%m-%d')\n\n\n# Let's check data types now\ndisplay(complaint_2015.dtypes)","f2486a7e":"display(complaint_2015[['Customer Complaint', 'month']].groupby(['month']).agg('count').sort_values(by = 'Customer Complaint', ascending = False).style.background_gradient(cmap =  'Reds'))\n\n# Complaints received Monthly Basis\ndaily_complaints =complaint_2015[['Customer Complaint', 'month']].groupby('month').count().reset_index()\nsns.lineplot(daily_complaints['month'], daily_complaints['Customer Complaint'])\nplt.title(\"Time Series for Complaints on Monthly basis\", fontsize = 20)\nplt.xlabel(\"Months\")\nplt.show();","6789f03f":"display(\"20 Days with most Complaints\")\ndisplay(complaint_2015.groupby('month_day').count()[['Customer Complaint']].reset_index().sort_values(by = 'Customer Complaint',ascending = False).head(5).style.background_gradient('Blues'))\n\ndisplay(\"20 Days with Least Complaints\")\ndisplay(complaint_2015.groupby('month_day').count()[['Customer Complaint']].reset_index().sort_values(by = 'Customer Complaint').head(10).style.background_gradient('Oranges'))\n\ndaily_complaints =complaint_2015[['Customer Complaint','month_day']].groupby('month_day').count().reset_index()\nsns.lineplot(daily_complaints['month_day'], daily_complaints['Customer Complaint'])\nplt.title(\"Time Series for Complaints on Daily basis\", fontsize = 20)\nplt.xticks(fontsize = 10, rotation = 90)\nplt.xlabel(\"Days\")\nplt.ylabel(\"Complaints\")\nplt.show();","9b6ee850":"complaint_2015['Status'].replace({'Solved':'Closed','Pending':'Open'}, inplace= True)\n\ndisplay('Unique Values in Column Status: ',complaint_2015['Status'].nunique())\ncomplaint_2015[['Status']].value_counts().to_frame().reset_index().rename({0: \"Count\"}, axis=1).style.background_gradient('crest')\n","8982e065":"# Creating a function substitute the words such as won't to will not etc...\ndef decontracted(phrase):\n    \"\"\"input: some sentence - not preprocessed sentance basically.\n       Output: processes the words such as \"won't\" to 'will not' etc. \n    \"\"\"\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n    phrase = re.sub(r\"wouldn't\", \"would not\", phrase)\n    phrase = re.sub(r\"did't\", \"did not\", phrase)\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'s\", \"\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase\n\n# Let's try this function on some complaint\ndisplay(decontracted(\"comcast won't cancel my service\"))\ndisplay(decontracted(\"comcast does not disclose the internet speed i'm paying for anywhere on my bill or online\"))","08f9eb4d":"# creating a function for preprocessing complaints \ndef preprocess_complaints(comp):\n    \"\"\"input: Takes in complaints (Sting type sentences)\n       output: Returns preprocessed version of complaints these steps consists of lower case, \n       decontracted(function mentioned above), remove speacial characters\n    \"\"\"\n    comp = bs(comp, 'lxml').get_text()  # using  beatifulSoup4 to extract complaints in one variables\n    comp = comp.lower() #lower case the complaint\n    comp = decontracted(comp) # using custom function to replace words like won't to will not etc\n    comp = re.sub('[^A-Za-z]+', ' ', comp) #remove any special character.\n    comp = \" \".join(e for e in comp.split() if e not in set(stopwords.words('english'))) #joining everything what we did till now\n    return comp\n\n# applying the fucntion preprocess_complaints to data['Customer Complaint'] (orginal dataset) \n# and assinging it to a new column in the original dataset:\ncomplaint_2015['Preprocessed_complaints']=complaint_2015['Customer Complaint'].apply(lambda x : preprocess_complaints(x))\n","d64424b8":"# Creating a function for assigning complaint_types to different complaints raised by the users.\ndef complaint_type(row):\n    if (\"internet\" in row['Preprocessed_complaints']) or (\"data\" in row['Preprocessed_complaints']) or (\"cap\" in row['Preprocessed_complaints']):\n            return 'Internet Issues'\n    elif(\"network\" in row['Preprocessed_complaints']) or (\"speed\" in row['Preprocessed_complaints']):\n            return \"Network\/Speed Issues\"\n    elif(\"service\" in row['Preprocessed_complaints']) or (\"bill\" in row['Preprocessed_complaints']) or (\"customer\" in row['Preprocessed_complaints']):\n            return \"Customer_Services Issues\"\n    elif(\"comcast\" in row['Preprocessed_complaints']):\n            return \"Comcast Issues\"\n    else:\n            return \"Others\"\n        \n# applying the function complaint_type() to our original dataset and assigning the results to a new column in original dataset  \ncomplaint_2015['Complaint_Type'] = complaint_2015.apply(lambda row: complaint_type(row), axis=1).to_frame()\n\n# Let's check what we did till now\ndisplay(complaint_2015.head()[['Customer Complaint', 'Preprocessed_complaints', 'Complaint_Type']])\n\n# Displaying a table showing different complaint types and respective counts\ndisplay(complaint_2015.groupby(by = 'Complaint_Type')[['Customer Complaint']].count().reset_index().rename({'Customer Complaint': \"Count\"}, axis=1).sort_values(by = 'Count', ascending = False).style.background_gradient(\"copper_r\"))\n\n# Plotting the Complaint types and count\nsns.countplot(complaint_2015['Complaint_Type'],palette='copper')\nplt.title(\"Count of Types of complaints\", fontsize = 20)\nplt.xticks(fontsize = 15)\nplt.xlabel(\" \")\nplt.ylabel(\"Complaints Counts\")\nplt.show()","04a0b1c4":"# Finally we can even get percentage of the complaint types, by following percentage\ndef get_simple_topic_percentage(topic):\n    \"\"\"\n    Returns a percentage of rows that this particular topic is found\n    in using simple string manipulation.\n    \n    topic: the customer complaint category entered by the customer.\n    \"\"\"\n    return round(complaint_2015[complaint_2015['Complaint_Type'].str.contains(topic, case=False)].shape[0] \/ len(complaint_2015['Complaint_Type']) * 100, 2)\n    \n\n\n# Creating a dictionary of different issues and its respective percentage.\npercentage = {'Internet Issues': [get_simple_topic_percentage('Internet Issues')], 'Customer_Services Issues':[get_simple_topic_percentage('Customer_Services Issues')], \n        'Comcast Issues': [get_simple_topic_percentage('Comcast Issues')], 'Others':[ get_simple_topic_percentage('Others')], 'Network\/Speed Issues': [get_simple_topic_percentage('Network\/Speed Issues')]}\n \n# Create the pandas DataFrame\ndf_percentage = pd.DataFrame(percentage).transpose().rename({0: 'Percentage'}, axis =1).style.background_gradient(\"copper_r\")\n\n\ndf_percentage","7b10431f":"display('Highest Complaints State wise:')\ndisplay(complaint_2015.groupby(['State']).size().sort_values(ascending = False).to_frame().head(6).reset_index().rename({0: \"Count\"}, axis = 1).style.background_gradient('bone_r'))\nprint('\\n')\ndisplay('Lowest Complaints State wise:')\ndisplay(complaint_2015.groupby(['State']).size().sort_values().to_frame().head(6).reset_index().rename({0: \"Count\"}, axis = 1).style.background_gradient('Purples_r'))","38a43910":"display('Highest Open and Closed Complaints State wise:')\ndisplay(complaint_2015.groupby([\"State\",\"Status\"]).size().unstack().sort_values(by='Closed', ascending = False).fillna(0).head(7).style.background_gradient('bone_r'))\nprint('\\n')\ndisplay('Lowest Open and Closed Complaints State wise:')\ndisplay(complaint_2015.groupby([\"State\",\"Status\"]).size().unstack().sort_values(by='Closed').fillna(0).head(7).style.background_gradient('Blues'))\nprint('\\n')\nStatus_complaints=complaint_2015.groupby([\"State\",\"Status\"]).size().unstack().fillna(0)\nStatus_complaints.plot(kind=\"bar\", stacked=True, colormap='copper')\nplt.title(\"Stacked bar chart for State wise status of complaints\", fontsize = 20)\nplt.xticks(fontsize = 15)\nplt.xlabel(\"States\")\nplt.ylabel(\"Complaints_Stacked\")\nplt.show();","2f8cfa84":"display('State with Highest Complaints:')\ndisplay(complaint_2015.groupby(['State']).size().sort_values(ascending = False).to_frame().head(1).reset_index().rename({0: \"Count\"}, axis = 1).style.background_gradient('Reds_r'))","ec188d28":"display('State with Highest Open and Closed Complaints:')\ndisplay(complaint_2015.groupby([\"State\",\"Status\"]).size().unstack().sort_values(by='Closed', ascending = False).fillna(0).head(1).style.background_gradient('Reds_r'))","6f2a6f9e":"complaints = complaint_2015.groupby(['Status', 'State']).size().unstack().fillna(0).transpose().reset_index()[['State','Open']]\n\n\ncomplaints['percentage'] = (complaints['Open'] \/ complaints['Open'].sum()) * 100\ndisplay(\"State with highest percentage of unresolved complaints\")\ncomplaints.sort_values(by ='percentage', ascending = False ).head(1).style.background_gradient('Reds_r')","ee37308e":"\n<div class=\"alert alert-danger\" role=\"primary\"><p style=\"font-weight: bold; font-size:20px; color:#2025bd\" > Which state has the highest percentage of unresolved complaints<\/p> \n<p style=\"font-weight: bold; font-size:20px; color:maroon\" >Formula used : (number of complaints\/total complaints) * 100<\/p> \n<\/div>","d926225e":"<div class=\"alert alert-danger\" role=\"primary\"><p style=\"font-weight: bold; font-size:20px; color:#2025bd\" > State wise status of complaints in a stacked bar chart<\/p> \n<\/div>\n","37614896":"<div class=\"alert alert-success\" role=\"primary\"><p style=\"font-weight: bold;font-size:20px;color: #2025bd\">Trend chart for the number of complaints at monthly granularity level.<\/p>\n<\/div>","a0182b9d":"<div class=\"alert alert-danger\" role=\"primary\"><p style=\"font-weight: bold; font-size:20px; color:#2025bd\" > Observations: <\/p> \n<\/div>\n<div class=\"alert alert-success\" role=\"primary\"><p style=\"font-size:15px; color:#2025bd\" > 1. Above two tables shows the Highest and Lowest Open and Closed complaints state wise. <\/p>\n<p style=\"font-size:15px; color:#2025bd\" >2. We see that Geogia is highest for both Open and Closed complaints. <\/p> \n<p style=\"font-size:15px; color:#2025bd\" >3. Stacked Bar Chart clearly shows the closed complaints are more than open complaints overall. <\/p> \n<p style=\"font-size:15px; color:#2025bd\" >4. We also observe that Florida has good closing rate in terms of complaints as they have 201 Closed complaints and only 39 open complaints.<\/p> \n<\/div>","6a629d6b":"<div class=\"alert alert-danger\" role=\"primary\"><p style=\"font-weight: bold; font-size:20px; color:#2025bd\" > Observations: <\/p> \n<\/div>\n<div class=\"alert alert-success\" role=\"primary\"><p style=\"font-size:15px; color:#2025bd\" > Above Linechart shows the trend of complaints over days displaying each day in format mont_day.<\/p> \n<p style=\"font-size:15px; color:#2025bd\" > As expected from the trend chart of month, days in 6th month ('June') observe the maximum sailes.<\/p> \n    <p style=\"font-size:15px; color:#2025bd\" > We can further observe that complaints were maximum during 23 June to 25 June. 507 complaints being maximum<\/p>\n    <p style=\"font-size:15px; color:#2025bd\" > Complaints were minimum on 11th April. Exact count being 5.<\/p>\n<\/div>\n","aee4fe30":"<div class=\"alert alert-danger\" role=\"primary\"><p style=\"font-weight: bold; font-size:20px; color:#2025bd\" > Observations: <\/p> \n<\/div>\n<div class=\"alert alert-success\" role=\"primary\"><h3 style=\"font-size:15px; color:#2025bd\" > 1. Above results, in order, shows table with  <\/h3>\n<p style=\"font-size:15px; color:#2025bd\" > - complaints, preprocessed complaints and complaint types. <\/p> \n<p style=\"font-size:15px; color:#2025bd\" > - Complaint_types and Counts<\/p> \n<p style=\"font-size:15px; color:#2025bd\" > - Countplot of Complaint_Type<\/p> \n    <p style=\"font-size:15px; color:#2025bd\" > 2. We see that {Type:Internet issues} have the maximum complaints. Exact count being 751.<\/p>\n    <p style=\"font-size:15px; color:#2025bd\" > 3. {Type:Network\/Speed issues} have the minimum complaints when compared to other types. Exact count 85.<\/p>\n<\/div>\n\n<div class=\"alert alert-danger\" role=\"primary\"><p style=\"font-weight: bold; font-size:20px; color:#2025bd\" > {Type:Internet issues} consists of words: {internet, data, cap}. Hence we could say most of customers have problem around internet, data and cap(capacity).<\/p> \n<\/div>\n","507874d4":"<div class=\"alert alert-success\" role=\"primary\"><p style=\"font-weight: bold;font-size:20px;color: #2025bd\">Trend chart for the number of complaints at daily granularity levels.<\/p>\n<\/div>","f2ed1bf9":"<div class=\"alert alert-danger\" role=\"alert\"> <p style=\"font-weight: bold;font-size:25px;color:#2025bd\">Data Preprocessing <\/p><\/div>","a855a5e2":"\n\n<div class=\"alert alert-danger\" role=\"primary\"><p style=\"font-weight: bold; font-size:20px; color:#2025bd\" > Observations: <\/p> \n<\/div>\n<div class=\"alert alert-success\" role=\"primary\"><p style=\"font-size:15px; color:#2025bd\" > 1. Above Tables show the Highest and Lowest Complaints statewise. Not taking in account that complaint is still open or aready closed.  <\/p>\n<p style=\"font-size:15px; color:#2025bd\" >2. We see that Gorgia Florida and California has the highest complaints, count being 289, 240, 220 respectively.<\/p> \n<p style=\"font-size:15px; color:#2025bd\" >3. Naveda Iowa Montana Rhode islands District of Columbia has the lowest complaints count being 1 for each<\/p> \n<p style=\"font-size:15px; color:#2025bd\" > 4. We need better tables which shows even the open and closed complaints separately to see what actually is going on behind these numbers.<\/p> \n<\/div>\n","295acf72":"<div class=\"alert alert-danger\" role=\"primary\"><p style=\"font-weight: bold; font-size:20px; color:#2025bd\" > Table with the frequency of complaint types. Which complaint types are maximum i.e., around internet, network issues, or across any other domains.<\/p> \n<\/div>","f5823db6":"<div class=\"alert alert-danger\" role=\"primary\"><p style=\"font-weight: bold; font-size:20px; color:#2025bd\" > Which state has the maximum complaints<\/p> \n<\/div>","9e7bbef6":"\n<div class=\"alert alert-danger\" role=\"primary\"><p style=\"font-weight: bold; font-size:20px; color:#2025bd\" >Create a new categorical variable with value as Open and Closed. Open & Pending is to be categorized as Open and Closed & Solved is to be categorized as Closed.\n<\/p> \n<\/div>","07b1dd02":"<div class=\"alert alert-danger\" role=\"primary\"><p style=\"font-weight: bold; font-size:20px; color:#2025bd\" > Observations: <\/p> \n<\/div>\n<div class=\"alert alert-success\" role=\"primary\"><p style=\"font-size:15px; color:#2025bd\" > 6th month ('June') observed the heighest complaints from the customers. 1281 being maximum.<\/p> \n<p style=\"font-size:15px; color:#2025bd\" > 5th month ('May') observed lowest complaints from the customers. 399 being the minimum.<\/p> \n    <p style=\"font-size:15px; color:#2025bd\" > Enormous increase in compaints observed from May to June. Precisely 882 complaints<\/p>\n<\/div>","d9944901":"<div class=\"alert alert-danger\" role=\"alert\"> <p style=\"font-weight: bold;font-size:20px;color:#2025bd\">Observation: <\/p><\/div>\n<div class=\"alert alert-success\" role=\"primary\"><p style=\";font-size:15px;color: #2025bd\">There are two datasets.<\/p>\n<p style=\";font-size:15px;color: #2025bd\">We can perform sentimental analysis on \"Comcast Consumer Affairs Complaints\" dataset.<\/p> \n<p style=\";font-size:15px;color: #2025bd\">For \"Comcast fcc complaints 2015\" dataset we can Narrow down the customer complaints to 5 different Labels, which will lead to gain better insights on customer complaint without having to go through them one-by-one for what each customer is complaining about.<\/p> \n<p style=\";font-size:15px;color: #2025bd\">No null values.<\/p>\n<\/div>\n"}}