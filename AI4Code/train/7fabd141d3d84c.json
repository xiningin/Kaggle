{"cell_type":{"aea733f0":"code","3f5f7db7":"code","8e5079b1":"code","fe0ea184":"code","4a39cb44":"code","41de8ef8":"code","59b9e6ec":"code","6b6ffcdd":"code","3fc708eb":"code","035b1b8d":"code","90598154":"code","228f6f5a":"code","73950e17":"code","1255f397":"code","db2c9568":"code","06b373d9":"code","62952b3b":"code","860dd544":"code","59309a07":"code","c03c6fc7":"code","b65824e6":"code","cb4a2e8f":"code","02c63648":"code","932360b6":"code","f4c0986c":"code","5ee28ee9":"code","fe7af422":"code","5dc5885f":"code","017a9aa6":"code","9aee0e80":"code","31305877":"code","fd26f6b6":"code","49a800fc":"code","e3982fb6":"code","ddeb896c":"code","43c0bf50":"code","8b682616":"code","60c111f7":"code","0ce722ba":"code","35023ae2":"code","70d0e761":"code","439e7d4d":"code","5cb6c30b":"code","3a83bff0":"code","ee8fb4c7":"markdown","7c28a79b":"markdown","ba4693ae":"markdown","c1e91f5c":"markdown","dc2b75a1":"markdown","cad4243f":"markdown","acd3876b":"markdown","35856d35":"markdown","cf4ada16":"markdown","82dc5ef5":"markdown","a2587d25":"markdown"},"source":{"aea733f0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3f5f7db7":"'''\nThis tutorial will work on the Fifa Data Set. \nWe will create a DataFrame names fifa and keep using it throughout the Tutorial\n'''\nfifa = pd.read_csv('..\/input\/data.csv' , index_col=0)","8e5079b1":"#printing the first 5 rows\nfifa.head()","fe0ea184":"#printing first 10 rows\nfifa.head(10)","4a39cb44":"#getting information about the DataFrame\nfifa.info()","41de8ef8":"#list of columns\nfifa.columns","59b9e6ec":"#iterating through all columns\nfor column in fifa.columns:\n    print(column)","6b6ffcdd":"#iterating through rows\nfor index,row in fifa.iterrows():\n    print(f'Player {row[\"Name\"]} belongs to {row[\"Nationality\"]}')\n    if index> 5:\n        break","3fc708eb":"#Accessing data for a single column\nfifa['Name']","035b1b8d":"#alternate way\nfifa.Name","90598154":"name = fifa.Name\nprint(type(name))","228f6f5a":"fifa.iloc[0:2 ,0:10 ]","73950e17":"fifa.loc[0:2,['Name','Age','CB']]","1255f397":"#using the iloc operator on an attribute of DataFrame\nfifa.Club.iloc[0:10]","db2c9568":"fifa.Club =='Juventus'","06b373d9":"fifa[fifa.Club =='Juventus']","62952b3b":"fifa[(fifa.Club =='Juventus') & (fifa.Nationality =='Portugal')]","860dd544":"fifa.loc[fifa.LF.isnull()]","59309a07":"fifa[fifa.LF.isnull()]","c03c6fc7":"fifa['goodPlayer'] = True","b65824e6":"fifa.head(2)","cb4a2e8f":"fifa.goodPlayer = fifa.apply(lambda x: True if x.Potential >90 else False, axis='columns' )","02c63648":"fifa.loc[:20,['Potential','goodPlayer']]","932360b6":"fifa_copy = fifa\n#fifa_copy.drop(['CM','CB'], axis=1)\n","f4c0986c":"#replacing values with Null Values by some other value\nfifa.LF.fillna('80+5')","5ee28ee9":"#replacing a value using apply function\n#apply lambda function","fe7af422":"fifa.Nationality.describe()","5dc5885f":"fifa[fifa.Nationality=='England']","017a9aa6":"fifa.CM.describe()","9aee0e80":"fifa.Potential.describe()","31305877":"fifa.dtypes","fd26f6b6":"#Selects Unique Nationalities of players belonging to Juventus\nfifa[fifa.Club=='Juventus'].Nationality.unique()","49a800fc":"#Selects the number of players per Country belonging to Juventus\nfifa[fifa.Club=='Juventus'].Nationality.value_counts()","e3982fb6":"#Selects the number of players per Country belonging to Juventus\nfifa[fifa.Club=='Juventus'].groupby(fifa.Nationality).Nationality.count()","ddeb896c":"#Lists the maximum Potential per Nationality\nfifa.groupby(fifa.Nationality).Potential.max()","43c0bf50":"#apply Lambda Function per Nationality. the Lambda function simply sums up the Potential\nfifa.groupby(fifa.Nationality).apply(lambda x:sum(x.Potential))","8b682616":"fifa.sort_values(by =\"Nationality\", ascending =True)","60c111f7":"#placeholder for q1","0ce722ba":"#placeholder for q2","35023ae2":"#placeholder for q3","70d0e761":"#placeholder for q4","439e7d4d":"#placeholder for q5","5cb6c30b":"#placeholder for q6","3a83bff0":"#placeholder for q7","ee8fb4c7":"Deleting a Column\n","7c28a79b":"**Data Cleaning**","ba4693ae":"**Mini-Exercise 2**","c1e91f5c":"The iloc and the loc operator are used to select data on an index based approach\nThe iloc operator takes as arguments the integer indexes of the rows and columns, while the loc operator can work with Labelled indexes as well.","dc2b75a1":"Information about a column","cad4243f":"Use the fifa DataFrame to answer the following questions -\n1.  Print the Name, Nationality, Clubs and Value of the players from row 10-20 (inclusive)\n2.  Print the Name, Nationality and Value of players belonging to Chelsea.\n3.  Print the Name, Nationality and Value of the star players of Chelsea. [ Assume that a player is considered as a star player if Potential is more than 90]\n4. Find the total value of players belonging to Chelsea.\n5. Find the total value of star players belonging to Chelsea.\n6. Find the number of goalkeepers per Nation. Print it in a descending order.\n7. Drop all the columns except the name, Nationality, Value , club, Potential of the player. Create a new column called as  'goodBuy', which will have True if the Value\/Potential < mean of Value\/Potential, and False otherwise.","acd3876b":"**Basic Data Calculation and Manipulation**","35856d35":"**Creating a new Column**","cf4ada16":"**Sorting Values**","82dc5ef5":"**Boolen indexing \/ Conditional Selection**","a2587d25":"**Selecting Data**"}}