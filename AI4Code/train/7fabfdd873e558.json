{"cell_type":{"6f373715":"code","d4a507bb":"code","3342906f":"code","f688ea29":"code","55414b6c":"code","1ae2ff2e":"code","49559ee2":"code","81579393":"code","2ad8e7f9":"code","bb6f2a9a":"code","0ae15e1d":"code","01417b03":"code","6f77bb17":"code","8fbe6816":"code","16e1d74e":"code","2bcd8006":"code","8d156182":"code","e3ca2af3":"code","215041cd":"code","ab96ff30":"code","a5286ce5":"markdown","b6627579":"markdown","0fcb10f0":"markdown","8d5878a9":"markdown","5d4583da":"markdown","b11e9578":"markdown","c47ef22a":"markdown","23495bc8":"markdown","acca1406":"markdown","0c993e1f":"markdown"},"source":{"6f373715":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d4a507bb":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","3342906f":"print(train.shape , test.shape)","f688ea29":"train.head()","55414b6c":"# LOAD LIBRARIES\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n#\ub118\ud30c\uc774, \ud310\ub2e4\uc2a4, MATPLOT\uc740 \uae30\ubcf8\uc73c\ub85c \ud56d\uc0c1\n\nfrom sklearn.model_selection import train_test_split\n# train.test \uc14b\uc744 \uc27d\uac8c \ubd84\ub9ac\ud558\uae30 \uc704\ud574\uc11c\n\nfrom keras.utils.np_utils import to_categorical\n# cnn\uc744 \ud1b5\ud574 \ucd5c\uc885\uc801\uc73c\ub85c \uacb0\uacfc\ub97c \ubc1b\uc73c\uba74 \ub77c\ubca8\uc218\ub9cc\ud07c\uc758 \uac01\uac01\uc758 \ud655\ub960\uac12\uc73c\ub85c \ubc18\ud658\ub41c\ub2e4. \uacb0\uacfc\uac12\uc744 \ubc1b\uae30 \ud3b8\ud558\uac8c \ud558\uae30\uc704\ud55c \ud568\uc218\nfrom keras.models import Sequential\n# \ucf00\ub77c\uc2a4 \ubaa8\ub378\uad6c\uc131\uae30\ubcf8 \ud568\uc218\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\n# \ucf00\ub77c\uc2a4\uc5d0\uc11c \ud544\uc694\ud55c \ub808\uc774\uc5b4\ub4e4 \uac04\ud3b8\ud558\uac8c \uc4f8\uc218 \uc788\ub2e4.\nfrom keras.preprocessing.image import ImageDataGenerator\n# \uc774\ubbf8\uc9c0\ub97c \uc870\uae08 \ubcc0\ud654\ud574\uc90c\uc73c\ub85c\uc368 \uc131\ub2a5\uc744 \uc62c\ub9b4\uc218 \uc788\ub2e4. \uadf8\ub79c\ub4dc \ub9c8\uc2a4\ud130 Chris Deotte \uc758 25 Million Images! [0.99757] MNIST \ucee4\ub110\uc5d0\uc11c \ucc38\uace0\ud588\ub2e4.(\uadf8\uc678\uc5d0\ub3c4 \uac70\uc758 \ub9ce\uc774 \ucc38\uace0\ud588\ub2e4.)\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nfrom tqdm.keras import TqdmCallback\n# \ucf5c\ubca1 \ubaa8\ub378\uc774 \uc5b4\ub5a4 \uae30\uc900\uc73c\ub85c \ub3cc\ub2e4\uac00 \uba48\ucd94\uace0 \uc800\uc7a5\ud558\uace0 \ud558\ub294\uac83\ub4e4\uc744 \uc124\uc815\ud574\uc904\uc218 \uc788\ub2e4.\nimport warnings\nwarnings.filterwarnings('ignore')\n# \uc9c0\uc800\ubd84\ud558\uac8c \uc6cc\ub2dd\ub728\ub294\uac78 \ub9c9\uc544\uc900\ub2e4.","1ae2ff2e":"# X\uc758 \ub77c\ubca8\uac12\uc744 CNN\uc5d0 \ub123\uc744\uc218 \uc5c6\uace0 \uc774\ub530 \uc608\uce21\ube44\uad50\uc2dc \uc4f8\uac70\ub2c8\uae4c \ubd84\ub9ac\ud574\uc900\ub2e4.\nY_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"],axis = 1)\n\n# 0~255 \uc0ac\uc774\uc758 \ud53d\uc140\uba85\uc554\uc758 \uc22b\uc790\ub97c \uacc4\uc0b0\ud558\uae30 \ud3b8\ud558\uae30 255\ub85c \ub098\ub220 \ube44\uc728\uc740 \uc720\uc9c0\ud558\uace0 \uc22b\uc790\ub294 \uc791\uac8c\nX_train = X_train \/ 255.0\nX_final = test \/ 255.0\n#\uc774\uc81c (28,28) \ubaa8\uc591\uc73c\ub85c RESHAPE\nX_train = X_train.values.reshape(-1,28,28,1)\nX_final = X_final.values.reshape(-1,28,28,1)\n#\uc544\uae4c \ubeb4\ub193\uc740 \ub77c\ubca8\uac12\ub3c4 CNN\uacb0\uacfc\uac12\uc774\ub791 \ube44\uad50\ud560\uc218 \uc788\ub294 \ud615\ud0dc\ub85c \nY_train = to_categorical(Y_train, num_classes = 10)\n","49559ee2":"# matplot\uc73c\ub85c \uac04\ub2e8\ud558\uac8c \uc2dc\uac01\ud654 \ud574\ubcf4\uba74 \ub77c\ubca8\uac12\uc5d0 \ub9de\ub294 \uc22b\uc790\ub97c \ud655\uc778\ud560\uc218 \uc788\ub2e4.\n\nfig = plt.figure(figsize=(10,10))\n\nfor i in range(10):\n    i += 1\n    plt.subplot(2,5,i)\n    plt.title(train['label'][i])\n    plt.imshow(X_train[i].reshape(28,28))\n    plt.axis('off')\nplt.show()","81579393":"# 10\ub3c4 \uc815\ub3c4 \ub3cc\ub9ac\uace0 10% \uc815\ub3c4 \uc90c\ud558\uace0, \uc67c\ucabd, \uc624\ub978\ucabd \uc2dc\ud504\ud2b8\ub97c \ud574\uc11c \ub2e4\uc591\ud55c \ubcc0\ud654\ub97c \uc900 \ub370\uc774\ud130\ub97c \ucd94\uac00\ud574\uc900\ub2e4.(\uc774\ub530 \ucf00\ub77c\uc2a4 \ubaa8\ub378 fit_generator \ud560\ub54c \uc0ac\uc6a9\uc608\uc815)\ndatagen = ImageDataGenerator(\n        rotation_range=10,\n        zoom_range=0.1,\n        width_shift_range=0.1,\n        height_shift_range=0.1,)","2ad8e7f9":"# \uc544\uae4c \uc0ac\uc774\ud0b7\ub7f0\uc5d0\uc11c \uac00\uc838\uc628 split\uc73c\ub85c train\uc548\uc5d0\uc11c \ud6c8\ub828\ubd84\uacfc \uac80\uc99d\ubd84\uc744 \ub098\ub208\ub2e4.(\ubcf4\ud1b5 0.3 \ube44\uc911\uc73c\ub85c \uac80\uc99d\uc0ac\uc774\uc988\ub97c \uc7a1\uc9c0\ub9cc \ub370\uc774\ud130\uac00 \ucda9\ubd84\ud574\uc11c 0.1\ub85c \ud55c\ub2e4)\nX_train, X_test, y_train, y_test = train_test_split(X_train, Y_train, test_size = 0.1)","bb6f2a9a":"model = Sequential()\n\nmodel.add(Conv2D(32,kernel_size=3,activation= 'relu', input_shape = (28,28,1) ))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32,kernel_size=3,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32,kernel_size=5,activation = 'relu', padding='same',strides=2))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(64,kernel_size=3,activation= 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64,kernel_size=3,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64,kernel_size=5,activation = 'relu', padding='same',strides=2))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(128,kernel_size=4,activation= 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Flatten())\nmodel.add(Dropout(0.4))\nmodel.add(Dense(10,activation='softmax'))","0ae15e1d":"# MODEL\ud655\uc778 : \ucc38 \ud3b8\ud558\ub2e4\nmodel.summary()","01417b03":"model.compile(optimizer='adam', loss = \"categorical_crossentropy\", metrics=['accuracy'])\n\n# \ucf5c\ubca1\uc740 \uc774\ub807\uac8c \uc120\uc5b8\ud574\uc11c callbacks\uc5d0 \ub2f4\uc544\ub193\uc790\nearlyStopping = EarlyStopping(patience=10, verbose=0)\nreduce_lr_loss = ReduceLROnPlateau(factor=0.1, patience=5, min_lr=0.000001, verbose=0)\ntqdm = TqdmCallback(verbose=0) #\uc9c4\ud589\uc728 \ud45c\uc2dc\ud574\uc900\ub2e4.(\uc5c6\uc73c\uba74 \ub2f5\ub2f5\ud558\ub2e4)\ncallbacks = [earlyStopping, reduce_lr_loss, tqdm]","6f77bb17":"history = model.fit_generator(datagen.flow(X_train,y_train, batch_size=64),\n                              epochs = 20,\n                              steps_per_epoch = X_train.shape[0]\/\/64,\n                              validation_data = (X_test,y_test),\n                              callbacks=callbacks,\n                              verbose=0)","8fbe6816":"# \uacb0\uacfc\ub97c \ud655\uc778\ud574\ubcf4\uc790(\ud559\uc2b5\ub300\uc0c1\uc758 \uc815\ud655\ub3c4, \uac80\uc99d\ub300\uc0c1\uc758 \uc815\ud655\ub3c4)\nprint('train_acc:{0:.5f} , val_acc:{1:.5f}'.format(max(history.history['accuracy']),max(history.history['val_accuracy'])))","16e1d74e":"# \uadf8\ub798\ud504\ub85c \ud45c\uc2dc\ud574\ubcf4\ub294 \uc815\ud655\ub3c4 Accuracy, \ud6c8\ub828\uc774 \uc801\ub2f9\ud788 \uc798\ub41c\uac70 \uac19\ub2e4. \ub354\uc774\uc0c1 \ud6c8\ub828\uc740 \uc0dd\ub7b5...\n\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Accuracy', fontsize=14)\nplt.xlabel('Epoch', fontsize=14)\nplt.ylabel('Accuracy',fontsize=14)\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","2bcd8006":"#\uacb0\uacfc\uac12\uc744 \ub2f4\uc744 results\ub97c 0\uc73c\ub85c testsize, \ub77c\ubca8\uac1c\uc218\uc758 \ud589\ub82c\ub85c \uc120\uc5b8\ud558\uace0, \uac70\uae30\ub2e4\uac00 \uacb0\uacfc\uac12\uc744 \ub354\ud574\uc11c \ub2f4\ub294\ub2e4\nresults = np.zeros( (X_final.shape[0],10) ) \nresults = results+model.predict(X_final)","8d156182":"# \uc774\ub7f0\uc2dd\uc73c\ub85c \ucc98\uc74c \ub370\uc774\ud130\uc758 \ub300\ud55c 10\uac1c \ub77c\ubca8\uc758 \uc608\uce21\uac12\uc774 \ub2f4\uaca8\uc788\ub2e4\nresults[0]","e3ca2af3":"# \uac01\uac01\uc758 \ud655\ub960\uac12\uc911\uc5d0 \uac00\uc7a5\ub192\uc740\uac12\uc774 \ubc14\ub85c \uc608\uce21\uac12\uc774\ub2c8\uae4c argmax\ub97c \uc774\uc6a9\ud574\uc11c \ubf51\uc544\uc900\ub2e4.\nresults = np.argmax(results, axis=1)\n# \ud558\ub098 \ubf51\ud78c\uac12\uc744 pd.Series\ub97c \uc774\uc6a9\ud574 1\ucc28\uc6d0\uc73c\ub85c \ub9cc\ub4e4\uc5b4 \uc900\ub2e4.\uc21c\uc11c\ub300\ub85c \uac01 \ub370\uc774\ud130\uc758 \uc608\uce21 \ub77c\ubca8\uc774\ub41c\ub2e4.\nresults = pd.Series(results,name='label')","215041cd":"#submission \uc591\uc2dd\uc5d0 \ub9de\ucdb0\uc57c \ud558\ub2c8\uae4c 0\ubd80\ud130 \uc2dc\uc791\uc774 \uc544\ub2cc 1\ubd80\ud130 \uc2dc\uc791\ud558\ub294 \ud615\ud0dc\ub85c \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \ub9cc\ub4e0\ub2e4.\nsubmission = pd.concat([pd.Series(range(1,28001), name='Imageid'),results],axis=1)","ab96ff30":"# \ucd5c\uc885 \ub370\uc774\ud130\uac12 \uc800\uc7a5\nsubmission.to_csv(\"submission.csv\",index=False)","a5286ce5":"* \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc744 \ud638\ucd9c\ud588\uc73c\uba74 \uc774\uc81c \ub370\uc774\ud130 \uc804\ucc98\ub9ac\ub97c \ud574\uc57c\ud55c\ub2e4.\n* MNIST\ub294 \uacb0\uce21\uce58\uac00 \uc788\ub294\uac83\ub3c4 \uc544\ub2c8\uace0 \uc544\uc6c3\ub77c\uc774\uc5b4 \uac12\ub4e4\uc774 \uc788\uc744\ub9ac\ub3c4 \uc5c6\uc5b4\uc11c CNN\uc5d0 \ub4e4\uc5b4\uac08 \uad6c\uc870\uc5d0 \ub9de\uac8c \uac04\ub2e8\ud558\uac8c \ubaa8\uc591\ub9cc \uc7a1\uc544\uc900\ub2e4.","b6627579":"* train\uc740 42,000\uac1c, test\ub294 28,000\uac1c \ud655\uc778\ud588\ub2e4.\n* train.data\uc758 \ubaa8\uc591\uc744 \ud655\uc778\ud588\uc744\ub54c \ub77c\ubca8\uc774 \ud558\ub098 \uc788\uace0 784\uc5f4 \uc989, 28 * 28 \ubaa8\uc591\uc758 \uae00\uc790 \ubaa8\uc591\uc784\uc744 \uc54c\uc218 \uc788\ub2e4.\n\n## \uadf8\ub7fc \uc774\uc81c \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ub85c\ub4dc\ud558\uc790.\n\n* \uae30\ubcf8\uc801\uc73c\ub85c \uac04\ub2e8\ud558\uac8c \ucf00\ub77c\uc2a4\ub97c \uc774\uc6a9\ud574\uc11c CNN\ub9dd\uc744 \uad6c\ud604\ud574\ubcf4\uace0\uc790 \ud55c\ub2e4.\n* \uadf8\ub7ec\uae30 \uc704\ud574\uc11c \ud544\uc218\uc801\uc778 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc744 \ub85c\ub4dc\ud55c\ub2e4.","0fcb10f0":"* \ubaa8\ub378\uc744 \uad6c\uc131\ud558\uae30\uc804\uc5d0 \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \uc62c\ub9ac\uae30 \uc704\ud55c \ub370\uc774\ud130 \uc804\ucc98\ub9ac\ub85c ImageDataGenerator\ub97c \ubbf8\ub9ac \uc120\uc5b8\ud574\uc900\ub2e4.","8d5878a9":"### keras\ub97c \uc774\uc6a9\ud574\uc11c \uac04\ub2e8\ud558\uac8c \ubaa8\ub378\uc744 \uad6c\uc131\ud574\ubcf8\ub2e4.\n \n * CNN \ubaa8\ub378\uc758 \uc774\ub860\uc801\uc778 \ub0b4\uc6a9\ub4e4\uc740 \ub354 \uacf5\ubd80\uac00 \ud544\uc694\ud558\uc9c0\ub9cc \uac1c\ub7b5\uc801\uc73c\ub85c CONVOLUTION\ud558\uace0 \ubc30\uce58\ub178\ub9d0\ub77c\uc774\uc81c\uc774\uc158\uc73c\ub85c \uc815\uaddc\ud654, DROP\uc544\uc6c3\uc744 \ud1b5\ud574 \uacfc\uc801\ud569\uc744 \ub9c9\uc544\uc8fc\ub294 \ub808\uc774\uc5b4\ub97c \ucc28\uace1\ucc28\uace1 \uc313\ub294\ub2e4.\n * \ub9c8\uc9c0\ub9c9 \uc5f4\uc5d0\uac00\uc11c\ub294 \ub2f9\uc5f0\ud558\uac8c\ub3c4 \ud3c9\ud3c9\ud558\uac8c \ud3b4\uc11c(FLATTEN) 10\uac1c\uc758 \ub77c\ubca8\uc5d0 \ub9de\uac8c \uac01 \ud655\ub960\uac12\uc774 \uacc4\uc0b0\ub418\ub3c4\ub85d \uc18c\ud504\ud2b8 \ub9e5\uc2a4 \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec Dense Layer\ub97c \uad6c\uc131\ud55c\ub2e4","5d4583da":"* \ubaa8\ub378\uc744 \uad6c\uc131\ud588\ub2e4\uba74 \ucef4\ud30c\uc77c\uc744 \uc5b4\ub5bb\uac8c \ud560\uc9c0 \uc124\uc815\ud574\uc900\ub2e4(\uc635\ud2f0\ub9c8\uc774\uc800\ub294 \uba40\ub85c\ud560\uc9c0, loss\ub294 \uc5b4\ub5a4\uac12\uae30\uc900\uc73c\ub85c, metric \ub4f1\uc744 \uc124\uc815\ud574\uc900\ub2e4. keras document\ucc38\uace0\ud558\uba74 \ub9ce\ub2e4)\n  (\uc798\ubaa8\ub974\uaca0\uc73c\uba74 \uc0ac\ub78c\ub4e4 \ub9ce\uc774 \uc4f0\ub294 adam, cross\uc5d4\ud2b8\ub85c\ud53c, accuracy\uc744 \uc4f4\ub2e4)\n  \n* \ubaa8\ub378 fit_generator\uc5d0 \uc4f8 \ucf5c\ubca1\ub3c4 \ubbf8\ub9ac \uc120\uc5b8\ud558\uc790(earlystopping, \ubaa8\ub378\uccb4\ud06c\ud3ec\uc778\ud2b8(\ub531\ud788 \uc800\uc7a5\ud560\ud544\uc694\uac00 \uc5c6\uc5b4\uc11c \uc548\ud588\ub2e4) \ub4f1\ub4f1...)\n  ","b11e9578":"## \ubaa8\ub378 \ud6c8\ub828\uc774 \uc644\ub8cc\ub418\uc5c8\uc73c\ub2c8 \uc774\uc81c test data\ub97c \ub123\uc5b4\uc11c \uc608\uce21.\n* \uc544\uae4c \ucc98\uc74c\uc5d0 test data\ub97c X_final\uc5d0 \ub2f4\uc544\uc11c \ub611\uac19\uc774 \uc804\uce58\ub9ac \ud574\uc92c\uc5c8\ub2e4.\n\n> X_final = test \/ 255.0\n\n> X_final = X_final.values.reshape(-1,28,28,1)","c47ef22a":"* \ubc30\uce58 \ub2e8\uc704\ub85c \uc0dd\uc0b0\ud55c \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0a4\ub294 model.fit_generator\ub97c \uc774\uc6a9\ud574 \ud559\uc2b5\uc744 \uc9c4\ud589\ud55c\ub2e4.\n* \uc77c\ub2e8 \uc544\uae4c \uc120\uc5b8\ud55c datagen\uc744 flow\uc2dc\ucf1c\uc11c \uc778\ud48b \ub370\uc774\ud130\ub97c \ub2e4\uc591\ud558\uac8c \ud574\uc8fc\uace0,\n* epochs\ub294 20\ud68c \uc815\ub3c4\ub85c \uc7a1\uc558\ub2e4. \ubc30\uce58\uc0ac\uc774\uc988\ub97c 64\ub85c \uc7a1\uc558\uc73c\ub2c8\uae4c step_per_epoch\ub294 \uc804\uccb4 train\uac2f\uc218\/64\ub85c \ub098\ub220\uc92c\ub2e4.\n* callbacks = callbacks\ub85c \ub2f4\uc544\uc918\uc11c \uc704\uc5d0\uc11c \uc120\uc5b8\ud55c callback\uc774 \uc801\uc6a9\ub418\ub3c4\ub85d \ud588\ub2e4.","23495bc8":"## \uc774\uc81c \ub9c9 \uc2dc\uc791\ud55c \uce90\ub9b0\uc774\ub85c\uc368 \ud5c8\uc811\ud558\uc9c0\ub9cc \uc5ec\uae30\uc800\uae30 \ucc38\uace0\ud558\uace0 \ud544\uc0ac\ud574 \uac00\uba74\uc11c \uacf5\ubd80\uc911\uc774\ub2e4.\n## \ube44\uc2b7\ud55c \uae38\uc744 \uac77\ub294 \ubaa8\ub4e0\uc774\ub4e4\uc774 \uc870\uae08\uc774\ub77c\ub3c4 \ub3c4\uc6c0\uc774 \ub418\uc5c8\uc73c\uba74...","acca1406":"# \uba38\uc2e0\ub7ec\ub2dd \uc785\ubb38\uc790\ub4e4\uc758 \"Hello World\" : Mnist\n\n\uba38\uc2e0\ub7ec\ub2dd\uacc4\uc758 \ud5ec\ub85c\uc6b0 \uc6d4\ub4dc\ub77c\uace0 \ubd88\ub9b4\ub9cc\ud07c \uc785\ubb38\uc790\uc774 \uac00\uc7a5 \uba3c\uc800 \uc811\ud558\uac8c \ub418\ub294 MNIST\n\uc774\uc81c \ub9c9 \uc785\ubb38\ud55c \uce90\ub9b0\uc774\ub85c\uc368 \ub2e4\ub978 \ucee4\ub110\uc744 \ucc38\uace0\ud574\uac00\uba70 \uc544\uc8fc \uac04\ub2e8\ud55c MNIST \ubaa8\ub378\uc744 \uad6c\ud604\ud574 \ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4.\n\n\n* \uc6b0\uc120 \ub370\uc774\ud130 \uba3c\uc800 LOAD (TRAIN, TEST)\n  \ub370\uc774\ud130\uc758 \ubaa8\uc591\uc744 \uc0b4\ud3b4\ubcf4\uc790\n","0c993e1f":"* \ubcc0\ud658\ud55c \uae40\uc5d0 X_train\uc758 28,28 \uc774\ubbf8\uc9c0\ub97c \uc2dc\uac01\ud654 \ud574\ubcf4\uba74 \uc544\ub798\uc640 \uac19\ub2e4."}}