{"cell_type":{"d8c9eccf":"code","8fd33598":"code","30c7a651":"code","216e7483":"code","d2c7667a":"code","16062881":"code","3b2ec327":"code","06299411":"code","c3dbc90f":"code","444a7621":"code","7f460e3d":"code","868f62bd":"code","1e7dae09":"code","b5cc38a0":"code","3a89c73c":"markdown","66c4e36f":"markdown","5d6b39ea":"markdown","e8ddbca8":"markdown","d13c8069":"markdown","a2fe473c":"markdown","14885893":"markdown","af7ebb6b":"markdown","fd7a3af3":"markdown","578288fd":"markdown"},"source":{"d8c9eccf":"import pandas as pd\nroot_dir = \"\/kaggle\/input\/mj1-anomaly-images-detection-challenge\/\"\ntrain_csv_filepath = root_dir + \"train.csv\"\n\n# \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\ntrain_df = pd.read_csv(train_csv_filepath)","8fd33598":"resize_w = 256\nresize_h = 256\nchannel = 3\n\nimport cv2\n# \u753b\u50cf\u304c\u5927\u304d\u3044\u3068\u8a08\u7b97\u304c\u9045\u3044\u305f\u3081\u3001\u30ea\u30b5\u30a4\u30ba\u7e2e\u5c0f\ndef resize(tmp_image):\n    return cv2.resize(tmp_image , (resize_h, resize_w))\n\n# 4\u6b21\u5143\u914d\u5217\u5316()\u3000\ndef to_4d(tmp_image):\n    return tmp_image.reshape(1, resize_h, resize_w, channel)\n    \n\n# 256\u6bb5\u968e\u306e\u8272\u8abf\u30920.0~1.0\u306b\u3059\u308b\ndef normalize(tmp_image):\n    return tmp_image \/ 255.0\n\n# \u753b\u50cf\u306e\u524d\u51e6\u7406\u4ed8\u304d\u30ed\u30fc\u30c9\ndef load_preprocessed_image(image_filepath):\n    tmp_image = cv2.imread(image_filepath)\n    tmp_image = resize(tmp_image)\n    tmp_image = normalize(tmp_image)\n    tmp_image = to_4d(tmp_image)\n\n    return tmp_image","30c7a651":"import numpy as np\nfrom keras.utils import np_utils\n\nimages = None\nfor fn in train_df['filename']:\n    image_filepath = root_dir + 'train\/' + fn\n    tmp_image = load_preprocessed_image(image_filepath)\n    if (images is None):\n        images = tmp_image\n    else:\n        images = np.vstack((images, tmp_image))\n\nanomaly_flags = np.array([flag for flag in train_df['anomaly']])\nanomaly_flags = np_utils.to_categorical(anomaly_flags, 2)\n","216e7483":"from sklearn.model_selection import StratifiedShuffleSplit\nsss = StratifiedShuffleSplit(n_splits=1, test_size=0.333, random_state=0)\n\nfor train_index, test_index in sss.split(images, anomaly_flags):\n    X_train = images[train_index]\n    y_train = anomaly_flags[train_index]\n    X_test = images[test_index]\n    y_test = anomaly_flags[test_index]","d2c7667a":"# over-sampling\u3092\u8a66\u3057\u307e\u3059\u3002\n\ntmp = pd.DataFrame(y_train[:, 1]).value_counts().values\nprint(tmp)\nlabel_ok_num = tmp[0]\nlabel_ng_num = tmp[1]\n\nwhile(label_ok_num != label_ng_num):\n    rand_index = np.random.randint(0, len(y_train))\n\n    label_is_ng = (y_train[rand_index, 1] == 1.0)\n    if label_is_ng:\n        X_train = np.vstack((X_train, [X_train[rand_index]]))\n        y_train = np.vstack((y_train, [y_train[rand_index]]))\n        label_ng_num += 1\n    print(label_ng_num, end='\\r')","16062881":"import matplotlib.pyplot as plt\nimport numpy as np\nimport cv2\n\nfor i, f in enumerate(train_df['filename'][:5]):\n    plt.subplot(1,5,i+1)\n    image_filepath = root_dir + 'train\/' + f\n    tmp_image = cv2.imread(image_filepath)\n    plt.imshow(cv2.cvtColor(tmp_image, cv2.COLOR_BGR2RGB)) # OpenCV \u306f\u8272\u304cGBR\u9806\u306a\u306e\u3067RGB\u9806\u306b\u4e26\u3079\u66ff\u3048\u308b","3b2ec327":"from keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(rotation_range=360)\n\ndatagen.fit(X_train)","06299411":"for i, f in enumerate(datagen.flow(X_train, y_train, batch_size=1)):\n    tmp_image = f[0][0]*256\n    tmp_image = tmp_image.astype(np.uint8)\n    print(tmp_image.shape)\n    plt.imshow(tmp_image) # OpenCV \u306f\u8272\u304cGBR\u9806\u306a\u306e\u3067RGB\u9806\u306b\u4e26\u3079\u66ff\u3048\u308b\n    if (i>=4):\n        break","c3dbc90f":"import numpy as np\n#\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u3068\u524d\u51e6\u7406\n\nfrom keras.datasets import mnist\n#keras\u3067CNN\u69cb\u7bc9\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras.optimizers import Adam\n\n \n'''\nCNN\u306e\u69cb\u7bc9\n'''\ndef cnn_model():\n    model = Sequential()\n\n    model.add(Conv2D(filters=10, kernel_size=(4,4), padding='same', input_shape=(256, 256, 3), activation='relu'))\n    model.add(Conv2D(filters=10, kernel_size=(3,3), padding='same', input_shape=(64, 64, 8), activation='relu'))\n    model.add(Conv2D(filters=10, kernel_size=(2,2), padding='same', input_shape=(16, 16, 16), activation='relu'))\n    model.add(Conv2D(filters=10, kernel_size=(2,2), padding='same', input_shape=(8, 8, 16), activation='relu'))\n\n    model.add(Flatten())\n    model.add(Dense(2, activation='softmax'))\n    adam = Adam(lr=1e-4, decay=1e-6)\n    model.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])\n    return model","444a7621":"epochs = 500\nn_batch = 8\n\nmodel = cnn_model()\nmodel.fit_generator(datagen.flow(X_train, y_train, batch_size=n_batch),\n                    steps_per_epoch=len(X_train) \/ n_batch,\n                    epochs=epochs,\n                    validation_data=(X_test, y_test))\n\ntrain_score = model.evaluate(X_train, y_train, verbose=0)\ntest_score = model.evaluate(X_test, y_test, verbose=0)\nprint('Train Loss:{0:.3f}'.format(train_score[0]))\nprint('Train accuracy:{0:.3}'.format(train_score[1]))\nprint('Test Loss:{0:.3f}'.format(test_score[0]))\nprint('Test accuracy:{0:.3}'.format(test_score[1]))","7f460e3d":"import glob\nfrom pathlib import Path\n\ntest_images = None\ntest_filenames = None\nfor test_filepath in glob.glob('\/kaggle\/input\/mj1-anomaly-images-detection-challenge\/test\/*.png'):\n    tmp_image = load_preprocessed_image(test_filepath)\n    if (test_images is None):\n        test_images = tmp_image\n        test_filenames = [Path(test_filepath).name]\n    else:\n        test_images = np.vstack((test_images, tmp_image))\n        test_filenames.append(Path(test_filepath).name)","868f62bd":"result_predict = model.predict(test_images)\nresult_predict = np.argmax(result_predict, axis=1)\nresult_predict","1e7dae09":"submit_filepath = \"\/kaggle\/input\/mj1-anomaly-images-detection-challenge\/sample_submit.csv\"\nsubmit_df = pd.read_csv(submit_filepath, index_col=0)\n\nfor i, filename in enumerate(test_filenames):\n    submit_df.loc[filename, 'Predicted'] = result_predict[i]\nsubmit_df[:20]","b5cc38a0":"submit_df.to_csv('result_submit.csv')","3a89c73c":"# 3. ImageDataGenerator\u3067\u753b\u50cf\u306e\u6c34\u5897\u3057\u3092\u884c\u3046","66c4e36f":"keras\u306eImageDataGenerator\u3092\u4f7f\u3063\u3066\u3001\u5b66\u7fd2\u306e\u305f\u3073\u306b\u30e9\u30f3\u30c0\u30e0\u306a\u753b\u50cf\u51e6\u7406\u3092\u884c\u3063\u3066\u5b66\u7fd2\u3055\u305b\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002  \n\u4eca\u56de\u306f\u91d8\u306e\u5411\u304d\u304c\u30d0\u30e9\u30d0\u30e9\u3067\u3042\u3063\u305f\u306e\u3067\u3001\u753b\u50cf\u306e\u56de\u8ee2\u3092\u884c\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002","5d6b39ea":"\u3044\u304f\u3064\u304b\u8a66\u3057\u306b\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001  \n\u91d8\u306e\u5411\u304d\u304c\u30d0\u30e9\u30d0\u30e9\u3067\u3057\u305f\u3002","e8ddbca8":"\u30e9\u30f3\u30c0\u30e0\u306a\u753b\u50cf\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u7d50\u679c\u306f\u6bce\u56de\u5909\u308f\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u6587\u66f8\u3092\u66f8\u3044\u3066\u3044\u308b\u5b9f\u884c\u306e\u56de\u3067\u306f\n> Train Loss:0.575\n> Train accuracy:0.746\n> Test Loss:0.605\n> Test accuracy:0.68\n\n\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nLoss\/accuracy\u3068\u3082\u306b\u3001\u524d\u56de\u3088\u308a\u3082\u60aa\u3044\u5024\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001  \nTrain\u3068Test\u306e\u5024\u304c\u8fd1\u304f\u3001\u30d0\u30e9\u30f3\u30b9\u3088\u304f\u5b66\u7fd2\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u4f3a\u3048\u307e\u3059\u3002  \n  \nTrain\u306e\u5024\u304c\u3088\u304f\u3001Test\u306e\u5024\u304c\u60aa\u3044\u72b6\u6cc1\u306f\u4e00\u822c\u7684\u306b\u300c\u904e\u5b66\u7fd2\u300d\u3084\u300c\u6c4e\u5316\u6027\u80fd\u304c\u4f4e\u3044\u300d\u3068\u547c\u3070\u308c\u3066\u304a\u308a  \n\u672c\u756a\u30c7\u30fc\u30bf\u3067\u826f\u3044\u7d50\u679c\u304c\u51fa\u305b\u306a\u3044\u50be\u5411\u304c\u5f37\u304f\u3001\u3088\u304f\u3042\u308a\u307e\u305b\u3093\u3002","d13c8069":"# 6. \u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3067\u5224\u5b9a\u3000\u301c\u30007.\u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210","a2fe473c":"# 3.\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u4f5c\u6210","14885893":"# 2. \u753b\u50cf\u3092\u8868\u793a\u3057\u3066\u307f\u308b","af7ebb6b":"fork\u5143\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 https:\/\/www.kaggle.com\/ruruamour\/simple-sample-code \u3067\u306f\u826f\u3044\u7cbe\u5ea6\u304c\u51fa\u307e\u305b\u3093\u3067\u3057\u305f\u3002 \n  \n\u7cbe\u5ea6\u304c\u51fa\u306a\u304b\u3063\u305f\u8981\u56e0\u306e\uff11\u3064\u306b\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u4e0d\u8db3\u3057\u3066\u3044\u305f\u3053\u3068\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n  \n\u3053\u306eNotebook\u3067\u306f\u3001\u753b\u50cf\u306eaugmentation\uff08\u6c34\u5897\u3057\uff09\u3092\u884c\u3044\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u3092\u5897\u3084\u3059\u65b9\u6cd5\u3092\u66f8\u304d\u307e\u3059\u3002\n","fd7a3af3":"## 1. \u6e96\u5099","578288fd":"## \u5224\u5b9a\u7528\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f"}}