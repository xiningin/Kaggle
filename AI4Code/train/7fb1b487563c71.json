{"cell_type":{"4d03ac2f":"code","20667dc6":"code","4234609a":"code","479f8434":"code","0d37aa46":"code","3e443062":"code","b3ee80eb":"code","65d91be8":"code","1df07fed":"code","74c546e8":"code","01bffe0e":"code","a8632e98":"code","84ed249e":"code","71069bc4":"code","4bc4faac":"code","e589a43a":"code","958dffc4":"code","3bf3059f":"code","75e57f21":"code","31752f95":"code","d579800b":"code","11f3aef7":"code","b1314189":"code","eb688a03":"code","a00b90b0":"code","e2edc5ee":"code","5929c657":"code","ed90a07e":"code","3b95c034":"code","cfca2946":"code","7dc56d60":"code","8a15ae86":"code","2916fd1b":"code","9970338c":"code","3ec88a6f":"code","2366a7e6":"code","4b09fd15":"code","d7eb977a":"code","808042f1":"code","91ac3913":"code","6ecd9034":"code","53c4eac6":"code","334973f8":"code","7b480f35":"code","283aee77":"code","6242770d":"code","f91e81ca":"code","d33e966c":"code","71f6601e":"code","88462342":"code","7d589c46":"code","a2adf46b":"code","13cc0d75":"code","815d9900":"code","7b3b8a6c":"code","6a66bd18":"code","45aa471b":"code","a6abf87c":"code","6026ee6b":"code","b715191c":"code","a70c6568":"code","31482ca0":"code","14e5403d":"code","40650c56":"code","7f3bcc31":"code","90e9d6af":"code","a4842354":"code","9860229b":"code","e5d93560":"code","f778c3db":"code","feddc40b":"code","d938c283":"code","d81ca2b1":"code","27183cdb":"code","d165ed17":"code","696f2559":"code","279924c1":"code","ce92627e":"code","47c438d0":"code","31e6bb88":"code","41d6b6b7":"code","8c48e40a":"code","4f535c66":"code","1c07d087":"code","359e7fc3":"code","c278791e":"markdown","e3f007a9":"markdown","0956abb0":"markdown","d55d0354":"markdown","bc5e464d":"markdown","1f989aa4":"markdown","666ee54b":"markdown","68a78744":"markdown","d7d879dc":"markdown","1290e82f":"markdown","522e7763":"markdown","2e5b41aa":"markdown","f200f405":"markdown","fbf18c75":"markdown","97d7d31b":"markdown","38096ed7":"markdown","9f57f673":"markdown","31df55da":"markdown","84480431":"markdown","1d6e54f7":"markdown","4b45dd38":"markdown","e58d306b":"markdown","470b281e":"markdown","a09a4681":"markdown","bfa0519a":"markdown","f375f547":"markdown","883165fe":"markdown","62e03bdd":"markdown"},"source":{"4d03ac2f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\nimport seaborn as sns\nfrom sklearn import metrics\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn import decomposition, datasets\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","20667dc6":"train_data = pd.read_csv(\"..\/input\/cap-4611-2021-fall-assignment-02\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/cap-4611-2021-fall-assignment-02\/eval.csv\")","4234609a":"#Preliminary Data Processing\ntrain_data.info()","479f8434":"#Checking for unique values below to see if all the columns truly only have\n# 0 and 1. If they do this means there wouldn't be outliers unless theres missing values","0d37aa46":"train_data.violence.unique()\npd.concat([train_data['alcohol_reference'],train_data['animated_blood'],train_data['blood'], train_data['blood_and_gore'], train_data['cartoon_violence'],train_data['cartoon_violence'],\n          train_data['crude_humor'], train_data['drug_reference'], train_data['fantasy_violence'], train_data['intense_violence'], train_data['language'], train_data['lyrics'],\n          train_data['mature_humor'], train_data['mild_blood'], train_data['mild_cartoon_violence'], train_data['mild_fantasy_violence'], train_data['mild_language'], train_data['mild_lyrics'],\n          train_data['mild_suggestive_themes'], train_data['mild_violence'], train_data['no_descriptors'],train_data['nudity'], train_data['partial_nudity'], train_data['sexual_content'],\n            train_data['sexual_themes'],train_data['simulated_gambling'], train_data['strong_janguage'], train_data['strong_sexual_content'], train_data['suggestive_themes'] \n            , train_data['use_of_alcohol'], train_data['use_of_drugs_and_alcohol'], train_data['violence']]).unique()","3e443062":"sns.heatmap(train_data.isnull(),yticklabels=False,cbar=False)","b3ee80eb":"#we have 33 int types, 2 objects and 35 columns with no missing values","65d91be8":"#Due to no missing values there isn't outliers since we have 0 and 1's","1df07fed":"test_data.info()","74c546e8":"#checking the dtypes for test and train to make sure they have the same \n# dtypes","01bffe0e":"sns.heatmap(test_data.isnull(),yticklabels=False,cbar=False)","a8632e98":"#we have 33 int types and 33 columns with no missing values it seems\n#the data we have falls into two common categories I belive. Numeric and \n#categorical since there is no datetime which is the third\n#for numeric categories we want to usually set their type as int64 or float 64\n#for categorical categories we usually want to set their type as category\n#I dont think the title matters as it doesn't fall on the three common\n# I will just keept it as it is since we have int64","84ed249e":"train_data = train_data.drop(columns=[\"title\"])","71069bc4":"# title is not going to be useful in determining ESRB","4bc4faac":"train_data.info()","e589a43a":"#also making sure it falls under one of the four categories and not a new\n#value or else it would be an outlier","958dffc4":"import plotly.express as px\nfig = px.histogram(train_data, x='esrb_rating', y=['alcohol_reference'])\nfig","3bf3059f":"fig2 = px.histogram(train_data, x='esrb_rating', y=['animated_blood'])\nfig2","75e57f21":"fig3 = px.histogram(train_data, x='esrb_rating', y=['blood'])\nfig3","31752f95":"fig4 = px.histogram(train_data, x='esrb_rating', y=['blood_and_gore'])\nfig4","d579800b":"fig5 = px.histogram(train_data, x='esrb_rating', y=['cartoon_violence'])\nfig5","11f3aef7":"fig6 = px.histogram(train_data, x='esrb_rating', y=['crude_humor'])\nfig6","b1314189":"fig7 = px.histogram(train_data, x='esrb_rating', y=['drug_reference'])\nfig7","eb688a03":"fig8 = px.histogram(train_data, x='esrb_rating', y=[ 'fantasy_violence'])\nfig8","a00b90b0":"fig9 = px.histogram(train_data, x='esrb_rating', y=['intense_violence'])\nfig9","e2edc5ee":"fig10 = px.histogram(train_data, x='esrb_rating', y=['language'])\nfig10","5929c657":"fig11 = px.histogram(train_data, x='esrb_rating', y=['lyrics'])\nfig11","ed90a07e":"fig12 = px.histogram(train_data, x='esrb_rating', y=['mature_humor'])\nfig12","3b95c034":"fig13 = px.histogram(train_data, x='esrb_rating', y=['mild_blood'])\nfig13","cfca2946":"fig14 = px.histogram(train_data, x='esrb_rating', y=['mild_cartoon_violence'])\nfig14","7dc56d60":"fig15 = px.histogram(train_data, x='esrb_rating', y=['mild_fantasy_violence'])\nfig15","8a15ae86":"fig16 = px.histogram(train_data, x='esrb_rating', y=['mild_language'])\nfig16","2916fd1b":"fig17 = px.histogram(train_data, x='esrb_rating', y=['mild_lyrics'])\nfig17","9970338c":"fig18 = px.histogram(train_data, x='esrb_rating', y=['mild_suggestive_themes'])\nfig18","3ec88a6f":"fig19 = px.histogram(train_data, x='esrb_rating', y=['mild_violence'])\nfig19","2366a7e6":"fig20 = px.histogram(train_data, x='esrb_rating', y=['no_descriptors'])\nfig20","4b09fd15":"fig21 = px.histogram(train_data, x='esrb_rating', y=['nudity'])\nfig21","d7eb977a":"fig22 = px.histogram(train_data, x='esrb_rating', y=['partial_nudity'])\nfig22","808042f1":"fig23 = px.histogram(train_data, x='esrb_rating', y=['sexual_content'])\nfig23","91ac3913":"fig24 = px.histogram(train_data, x='esrb_rating', y=['sexual_themes'])\nfig24","6ecd9034":"fig25 = px.histogram(train_data, x='esrb_rating', y=['simulated_gambling'])\nfig25","53c4eac6":"fig26 = px.histogram(train_data, x='esrb_rating', y=['strong_janguage'])\nfig26","334973f8":"fig27 = px.histogram(train_data, x='esrb_rating', y=['strong_sexual_content'])\nfig27","7b480f35":"fig28 = px.histogram(train_data, x='esrb_rating', y=['suggestive_themes'])\nfig28","283aee77":"fig29 = px.histogram(train_data, x='esrb_rating', y=['use_of_alcohol'])\nfig29","6242770d":"fig30 = px.histogram(train_data, x='esrb_rating', y=['use_of_drugs_and_alcohol'])\nfig30","f91e81ca":"fig31 = px.histogram(train_data, x='esrb_rating', y=['violence'])\nfig31","d33e966c":"#As we can see there are no outliers except the fact that the ESRB rating\n#don't follow their own guidelines for rating a game\n#that is a factor we can't control","71f6601e":"features=['alcohol_reference', 'animated_blood', 'blood', \n          'blood_and_gore', 'console','cartoon_violence', 'crude_humor',\n          'drug_reference', 'fantasy_violence', 'intense_violence',\n          'language', 'lyrics', 'mature_humor', 'mild_blood',\n          'mild_fantasy_violence', 'mild_cartoon_violence', 'mild_language',\n          'mild_lyrics', 'mild_suggestive_themes', 'mild_violence', 'nudity',\n          'partial_nudity', 'sexual_content', 'sexual_themes', 'no_descriptors',\n          'simulated_gambling', 'strong_sexual_content', 'strong_janguage', 'suggestive_themes',\n          'use_of_alcohol', 'use_of_drugs_and_alcohol', 'violence']\nx_train = train_data[features]\ny_train = train_data['esrb_rating']\nfeatures_test =['alcohol_reference', 'animated_blood', 'blood', \n        'blood_and_gore', 'console','cartoon_violence', 'crude_humor',\n        'drug_reference', 'fantasy_violence', 'intense_violence',\n     'language', 'lyrics', 'mature_humor', 'mild_blood',\n      'mild_fantasy_violence', 'mild_cartoon_violence', 'mild_language',\n          'mild_lyrics', 'mild_suggestive_themes', 'mild_violence', 'nudity',\n         'partial_nudity', 'sexual_content', 'sexual_themes', 'no_descriptors',\n         'simulated_gambling', 'strong_sexual_content', 'strong_janguage', 'suggestive_themes',\n         'use_of_alcohol', 'use_of_drugs_and_alcohol', 'violence']\nx_test = test_data[features]\n","88462342":"#I set up the split manually because train_test_split is giving me a worst\n#score and this work out for me\n#I left features_test there in case i need it","7d589c46":"from sklearn.model_selection import GridSearchCV","a2adf46b":"parameters_SVM = {'kernel':('linear', 'rbf'), 'C':[1, 10, 20]}\nSVM_model = svm.SVC()\nclf = GridSearchCV(SVM_model, parameters_SVM)\nclf.fit(x_train, y_train)","13cc0d75":"prediction_SVM = clf.predict(x_test)\ny_pred = prediction_SVM","815d9900":"cv_SVM = cross_val_score(SVM_model, x_train , y_train , cv = 10, scoring = None)\ncv_SVM_df = pd.DataFrame(cv_SVM)\ncv_SVM_df.describe()","7b3b8a6c":"print(clf.score(x_train, y_train))","6a66bd18":"grid_result_SVM = pd.DataFrame(clf.cv_results_)\ngrid_result_SVM","45aa471b":"grid_result_SVM[['param_C','param_kernel', 'mean_test_score']]","a6abf87c":"print(clf.best_score_)","6026ee6b":"parameters_RandomForest = {'n_estimators': [1,5,10, 20, 30,50, 100]}\nRandomForest_model = RandomForestClassifier()\nclf_R = GridSearchCV(RandomForest_model, parameters_RandomForest)\nclf_R.fit(x_train, y_train)","b715191c":"prediction_RandomForest = clf_R.predict(x_test)\ny_pred2 = prediction_RandomForest\nprint(clf_R.score(x_train, y_train))","a70c6568":"cv_RandomForest = cross_val_score(RandomForest_model, x_train , y_train , cv = 10, scoring = None)\ncv_RandomForest_df = pd.DataFrame(cv_RandomForest)\ncv_RandomForest_df.describe()","31482ca0":"grid_result_RandomForest = pd.DataFrame(clf_R.cv_results_)\ngrid_result_RandomForest","14e5403d":"grid_result_RandomForest[['param_n_estimators', 'mean_test_score']]","40650c56":"print(clf_R.best_score_)","7f3bcc31":"parameters_tree = {'max_depth': [1,10,20, 50, 100]}\ntree_model = tree.DecisionTreeClassifier()\nclf_t = GridSearchCV(tree_model, parameters_tree)\nclf_t.fit(x_train, y_train)\nprediction_tree = clf_t.predict(x_test)\ny_pred3 = prediction_tree\nprint(clf_t.score(x_train, y_train))","90e9d6af":"grid_result_tree = pd.DataFrame(clf_t.cv_results_)\ngrid_result_tree","a4842354":"grid_result_tree[['param_max_depth', 'mean_test_score']]","9860229b":"cv_tree = cross_val_score(tree_model, x_train , y_train , cv = 10, scoring = None)\ncv_tree_df = pd.DataFrame(cv_tree)\ncv_tree_df.describe()","e5d93560":"print(clf_t.best_score_)","f778c3db":"parameters_KN = {'n_neighbors': [1,5,10]}\nKNeighbor_model = KNeighborsClassifier()\nclf_KN = GridSearchCV(KNeighbor_model, parameters_KN)\nclf_KN.fit(x_train, y_train)\nprediction_KN = clf_KN.predict(x_test)\ny_pred4 = prediction_KN\nprint(clf_KN.score(x_train, y_train))","feddc40b":"print(clf_KN.score(x_train, y_train))","d938c283":"grid_result_KN = pd.DataFrame(clf_KN.cv_results_)\ngrid_result_KN","d81ca2b1":"cv_KNeighbor = cross_val_score(KNeighbor_model, x_train , y_train , cv = 10, scoring = None)\ncv_KNeighbor_df = pd.DataFrame(cv_KNeighbor)\ncv_KNeighbor_df.describe()","27183cdb":"grid_result_KN[['param_n_neighbors', 'mean_test_score']]","d165ed17":"print(clf_KN.best_score_)","696f2559":"parameters_log = {'C': [1,5,10]}\nlog_model = LogisticRegression()\nclf_l = GridSearchCV(log_model, parameters_log)\nclf_l.fit(x_train, y_train)","279924c1":"prediction_log = clf_l.predict(x_test)\ny_pred5 = prediction_log","ce92627e":"print(clf_l.score(x_train, y_train))","47c438d0":"cv_log = cross_val_score(log_model, x_train , y_train , cv = 10, scoring = None)\ncv_log_df = pd.DataFrame(cv_log)\ncv_log_df.describe()","31e6bb88":"grid_result_log = pd.DataFrame(clf_l.cv_results_)\ngrid_result_log","41d6b6b7":"grid_result_log[['param_C', 'mean_test_score']]","8c48e40a":"print(clf_l.best_score_)","4f535c66":"print(clf_l.best_score_,clf_KN.best_score_,clf_t.best_score_,clf_R.best_score_,clf.best_score_)","1c07d087":"#The best model according to our statistics is the SVM model","359e7fc3":"output = pd.DataFrame({\n    \"id\": test_data[\"id\"],\n    \"esrb_rating\": y_pred\n})\noutput.to_csv(\"submission.csv\", index = False)\nprint(\"Your submission was succesfully saved!\")","c278791e":"Gridsearch for random forest","e3f007a9":"Cross validation score","0956abb0":"Below is what we use to determine the best model","d55d0354":"Cross validating our scores for the destribution and describe method. We are making sure to look at the mean to see which is the best model","bc5e464d":"Setting up grid search for our RandomForest Model","1f989aa4":"Cross validating and describing our data","666ee54b":"cross validation","68a78744":"Gridsearch for Regressionlog model","d7d879dc":"this is what determines best score","1290e82f":"# Decision Tree model","522e7763":"This is what determines the best score","2e5b41aa":"# Kneighbor model","f200f405":"# Load Data","fbf18c75":"# Making the models","97d7d31b":"The number below is what I use to determine the best model as it is the best mean accuracy score for the model","38096ed7":"Setting up grid search for our SVM Model","9f57f673":"# Comparing the best scores in one line","31df55da":"# Plotting the ESRB and Column correlation","84480431":"# SVM Model","1d6e54f7":"# Analyzing Data","4b45dd38":"# Setting up our split manually","e58d306b":"Below we technically do cross validation in a better way by making not a single fold of 10 but of 1, 10 and 20 which then allows us to see the best mean score of which folds.","470b281e":"This is what determines the best model","a09a4681":"cross validation","bfa0519a":"# Regression log model","f375f547":"Grid search for kneighbor","883165fe":"Grid search for the decision tree","62e03bdd":"# Random Forest model"}}