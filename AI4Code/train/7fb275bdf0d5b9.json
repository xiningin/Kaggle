{"cell_type":{"c04c9255":"code","a16d59eb":"code","e90bdc9d":"code","9f8a5aad":"code","202ef740":"code","2b79738b":"code","9e517016":"code","a74c891b":"code","c9202a7f":"code","95e73749":"code","3d7c754f":"code","f77d53a8":"code","e2a50dab":"code","b4812521":"code","b53bca15":"code","f14af380":"code","18d27fd4":"code","c91e8630":"code","3d831692":"code","258276d4":"code","538b19b7":"code","fec08932":"code","52f37c8f":"markdown","2ddd8ee8":"markdown","a92adc2a":"markdown","6ba297b5":"markdown","4afd32ed":"markdown","b2c6b0c6":"markdown","b9dfdc71":"markdown","9fed16e5":"markdown","cd084755":"markdown","5cc9a668":"markdown","62167ead":"markdown","c4634522":"markdown","0ae8b549":"markdown","704feb60":"markdown","3d8dc2d5":"markdown","d52f2466":"markdown"},"source":{"c04c9255":"#Processing\nimport numpy as np # linear algebra\nimport pandas as pd # data analysis , CSV file I\/O (e.g. pd.read_csv)\n\n#Visualization\nimport seaborn as sns\nimport plotly.express as px # plotting library\nimport matplotlib.pyplot as plt # plotting library\nimport folium # plotting library\nimport folium.plugins as plugins\nimport geopandas as gpd\nfrom folium.plugins import TimestampedGeoJson\n%matplotlib inline \n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfrom sklearn.cluster import KMeans \nfrom sklearn.datasets.samples_generator import make_blobs\n\nprint('Libraries imported.')\n\n# tranforming json file into a pandas dataframe library\nfrom pandas.io.json import json_normalize\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a16d59eb":"# Loading files from kaggle Database\nimport pandas as pd\nCOVID_confirmed = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\nCOVID_death = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\nCOVID_recovered = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')\nCOVID_India = pd.read_csv(\"..\/input\/covid19-corona-virus-india-dataset\/complete.csv\")","e90bdc9d":"# Loading files from kaggle Database\nCOVID_India.rename(columns={'Name of State \/ UT':'State\/UnionTerritory','Cured\/Discharged\/Migrated':'Cured'},inplace=True)\nCOVID_India['Date']=COVID_India['Date'].apply(lambda x:x.replace('-','\/'))\nLatest_date=list(COVID_India['Date'])[-1]","9f8a5aad":"COVID_confirmed.info()","202ef740":"COVID_confirmed['3\/23\/20'].fillna(0,inplace=True)\nCOVID_confirmed['3\/23\/20'].astype('int64')","2b79738b":"COVID_confirmed.head()","9e517016":"COVID_India.head()","a74c891b":"#Transposing Data for confirmed cases\nCOVID_confirmed_T=COVID_confirmed.T\nCOVID_confirmed_T.drop(index=['Lat','Long','Province\/State'],inplace=True)\nCOVID_confirmed_T.columns=COVID_confirmed_T.iloc[0]\nCOVID_confirmed_T=COVID_confirmed_T[1:]\nCOVID_confirmed_T.set_index(COVID_confirmed_T.index.map(lambda x: pd.to_datetime(x, errors='ignore')),inplace=True)\nCOVID_confirmed_T['Global']=COVID_confirmed.sum()[2:]\nCOVID_confirmed_T.head()\n\n#Transposing Data for Death\nCOVID_death_T=COVID_death.T\nCOVID_death_T.drop(index=['Lat','Long','Province\/State'],inplace=True)\nCOVID_death_T.columns=COVID_death_T.iloc[0]\nCOVID_death_T=COVID_death_T[1:]\nCOVID_death_T['Global']=COVID_death.sum()[2:]\nCOVID_death_T.set_index(COVID_death_T.index.map(lambda x: pd.to_datetime(x, errors='ignore')),inplace=True)\n\n#Transposing Data for Recovered\nCOVID_recovered_T=COVID_recovered.T\nCOVID_recovered_T.drop(index=['Lat','Long','Province\/State'],inplace=True)\nCOVID_recovered_T.columns=COVID_recovered_T.iloc[0]\nCOVID_recovered_T=COVID_recovered_T[1:]\nCOVID_recovered_T['Global']=COVID_recovered.sum()[2:]\nCOVID_recovered_T.set_index(COVID_recovered_T.index.map(lambda x: pd.to_datetime(x, errors='ignore')),inplace=True)","c9202a7f":"fig = go.Figure()\nfig.add_trace(\n    go.Scatter(x=COVID_confirmed_T.index, y=COVID_confirmed.sum()[2:],name='Confirmed: Global',line=dict(color='blue')))\nfig.add_trace(\n    go.Scatter(x=COVID_death_T.index, y=COVID_death.sum()[2:],name='Death: Global',line=dict(color='red')))\nfig.add_trace(\n    go.Scatter(x=COVID_recovered_T.index, y=COVID_recovered.sum()[2:],name='Recovered: Global',line=dict(color='green')))\nfig.show()","95e73749":"import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(\n    go.Scatter(x=COVID_confirmed_T.index, y=COVID_confirmed_T['India'],name='Confirmed: India',line=dict(color='blue')))\nfig.add_trace(\n    go.Scatter(x=COVID_death_T.index, y=COVID_death_T['India'],name='Death: India',line=dict(color='red')))\nfig.add_trace(\n    go.Scatter(x=COVID_recovered_T.index, y=COVID_recovered_T['India'],name='Recovered: India',line=dict(color='green')))\nfig.show()","3d7c754f":"import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(\n    go.Bar(x=COVID_confirmed_T.index, y=COVID_confirmed_T['India'],name='Confirmed: India'))\nfig.add_trace(\n    go.Bar(x=COVID_confirmed_T.index, y=COVID_confirmed_T['Italy'],name='Confirmed: Italy'))\nfig.add_trace(\n    go.Bar(x=COVID_confirmed_T.index, y=COVID_confirmed_T['Spain'],name='Confirmed: Spain'))\nfig.show()","f77d53a8":"COVID_India","e2a50dab":"COVID_India_=COVID_India[COVID_India['Date']==Latest_date].sort_values(by='Total Confirmed cases')","b4812521":"import plotly.express as px\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig = px.bar(title='COVID-19: India')\n\nfig.add_trace(go.Bar(\n    y=COVID_India_['State\/UnionTerritory'],\n    x=COVID_India_['Total Confirmed cases'],\n    name='Confirmed',\n    orientation='h',\n    marker=dict(\n        color='rgb(0, 60, 179)',\n        line=dict(color='black')\n    )\n))\n\nfig.add_trace(go.Bar(\n    y=COVID_India_['State\/UnionTerritory'],\n    x=COVID_India_['Cured'],\n    name='Cured',\n    orientation='h',\n    marker=dict(\n        color='green',\n        line=dict(color='black')\n    )\n))\n\nfig.add_trace(go.Bar(\n    y=COVID_India_['State\/UnionTerritory'],\n    x=COVID_India_['Death'],\n    name='Death',\n    orientation='h',\n    marker=dict(\n        color='rgb(179, 0, 0)',\n        line=dict(color='black')\n    )\n))\nfig.update_layout(barmode='stack')\nfig.show()","b53bca15":"COVID_India_","f14af380":"state_label=list(COVID_India_['State\/UnionTerritory'].unique())\nlabels=[]\nstate=[]\nvalues=[]\ncountry=[]\nfor i in state_label:\n    country.extend(('India','India','India'))\n    labels.extend(('Confirmed','Cured','Death'))\n    state.extend([i,i,i])\n    values.extend([int(COVID_India_[COVID_India_['State\/UnionTerritory']==i]['Total Confirmed cases']),\n                 int(COVID_India_[COVID_India_['State\/UnionTerritory']==i]['Cured']),\n                 int(COVID_India_[COVID_India_['State\/UnionTerritory']==i]['Death'])])","18d27fd4":"import plotly.graph_objects as go\ndf = pd.DataFrame(dict(C=country,L=labels, S=state, V=values))\n\nfig = px.sunburst(df, path=['C','S','L'], values='V')\n\nfig.update_layout(\n    margin = dict(t=5, l=5, r=5, b=5)\n)\nfig.update_layout(title_text=\"COVID-19: India\",\n                  title_font_size=20)\nfig.data[0].marker.line.width = 1\nfig.data[0].marker.line.color = \"white\"\n#fig.update_layout(uniformtext=dict(minsize=10))\nfig.update_traces(\n        go.Sunburst(hovertemplate='<b>%{label} <\/b><b>%{value:,.0f}<\/b>'),\n        insidetextorientation='radial',       \n    )\nfig.show()","c91e8630":"date_index2 = pd.date_range('1\/30\/2020', periods=len(COVID_India.groupby('Date').sum().index), freq='D')\n\nfig = px.line(title='COVID-19: India')\nfig.add_trace(go.Line(y= COVID_India.groupby('Date').sum()[\"Total Confirmed cases\"],x=date_index2,name='Confirmed'))\nfig.add_trace(go.Line(y= COVID_India.groupby('Date').sum()[\"Cured\"],x=date_index2,name='Cured'))\nfig.add_trace(go.Line(y= COVID_India.groupby('Date').sum()[\"Death\"],x=date_index2,name='Death'))\nfig.show()","3d831692":"# Latitude & longtitude detected using google.geocoder\n# Already added columns into csv file\nlat_long={'Andhra Pradesh':[15.9240905,80.1863809],\n'Delhi'\t:[28.6517178\t,77.2219388],\n'Haryana':\t[29,\t76],\n'Karnataka'\t:[14.5203896\t,75.7223521],\n'Kerala'\t:[10.3528744,\t76.5120396],\n'Maharashtra':[\t19.531932,\t76.0554568],\n'Odisha'\t:[20.5431241\t,84.6897321],\n'Punjab':\t[30.9293211,\t75.5004841],\n'Rajasthan'\t:[26.8105777,\t73.7684549],\n'Tamil Nadu'\t:[10.9094334\t,78.3665347],\n'Telengana':\t[17.329125\t,78.5822228],\n'Union Territory of Jammu and Kashmir':\t[33.91667,\t76.66667],\n'Union Territory of Ladakh':\t[34.33333\t,77.41667],\n'Uttar Pradesh'\t:[27.1303344\t,80.859666],\n'Uttarakhand'\t:[30.09199355,\t79.32176659]}\n\n# Created Latitude & Longtitude columns for Folium Map\n#COVID_India['Latitude']=COVID_India['State\/UnionTerritory'].apply(lambda x : lat_long[x][0])\n#COVID_India['Longtitude']=COVID_India['State\/UnionTerritory'].apply(lambda x : lat_long[x][1])\n#COVID_India","258276d4":"import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(\n    go.Scatter(x=COVID_India['Date'], y=COVID_India[COVID_India['State\/UnionTerritory']=='Maharashtra']['Total Confirmed cases'],name='Confirmed: India',line=dict(color='blue')))","538b19b7":"COVID_India_dates=list(COVID_India['Date'].unique())\nCOVID_India_state=list(COVID_India['State\/UnionTerritory'].unique())\ndef rad_india(i):\n    x = (i>150000 and 30) or(i>50000 and 20) or (i>10000 and 10) or (i>50000 and 5) or 1\n    return(x)\n\n# Folium plugins\nfrom folium import IFrame\nfrom folium.plugins import MarkerCluster\nfrom folium.plugins import HeatMapWithTime\nfrom folium.plugins import TimestampedGeoJson    \nfrom IPython.display import display\n\n# Define initial location\nmap_India = folium.Map(\n    location=[28.7041, 77.1025],\n    tiles='cartodbdark_matter',\n    zoom_start=5\n)\n\n# Storing coordinates, popup, time in features list\n\nfeatures=[{'type': 'Feature',\n         'geometry': {'type': 'Point','coordinates': [COVID_India['Longitude'][col], COVID_India['Latitude'][col]]},\n         'properties': {'time': COVID_India['Date'][col],'icon': 'circle','iconstyle': {'fillColor': 'red','fillOpacity': 0.6,'stroke': 'false',\n         'radius': rad_india(COVID_India['Total Confirmed cases'][col])},'style': {'weight': 0},'popup':'<b>State:{}<br>Confirmed:{}<br><b>Cured:{}<br>Death:{}'.format(COVID_India['State\/UnionTerritory'][col],COVID_India['Total Confirmed cases'][col],COVID_India['Cured'][col],COVID_India['Death'][col])}}\n          for col in range(COVID_India.shape[0])]\n\nTimestampedGeoJson(\n            {'type': 'FeatureCollection', 'features': features},\n            period='P1D',\n            auto_play=False,\n            min_speed=3,\n            max_speed=4,\n            loop=False,\n            loop_button=True,\n            date_options='DD-MM-YYYY',\n            ).add_to(map_India)\n\nmap_India                                                                                     ","fec08932":"#TimestampedGeoJson Date input\n\nCOVID_dates= list(COVID_confirmed.columns[30:])\n\ndef rad_global(i):\n    x = (i>1000000 and 30) or(i>500000 and 20) or (i>200000 and 15) or (i>100000 and 10)or (i>10000 and 5) or 2\n    return(x)\n\n# Folium plugins\nfrom folium import IFrame\nfrom folium.plugins import MarkerCluster\nfrom folium.plugins import HeatMapWithTime\nfrom folium.plugins import TimestampedGeoJson    \nfrom IPython.display import display\n\n# Define initial location\nmap_world = folium.Map(\n    location=[28.7041, 77.1025],\n    tiles='cartodbdark_matter',\n    zoom_start=3,\n)\n\n# Storing coordinates, popup, time in features list\n\nfeatures=[{'type': 'Feature',\n         'geometry': {'type': 'Point','coordinates':[COVID_confirmed['Long'][col],COVID_confirmed['Lat'][col]]},\n         'properties': {'time': date,'icon': 'circle','iconstyle': {'fillColor': 'red','fillOpacity': 0.6,'stroke': 'false',\n         'radius': rad_global(COVID_confirmed[date][col])},'style': {'weight': 0},'popup':'<b>Country:{}<\/b><br>Confirmed:{}<br>Death:{}'\n         .format(COVID_confirmed['Country\/Region'][col],COVID_confirmed[date][col],COVID_death[date][col])}}\n         for date in COVID_dates for col in range(COVID_confirmed.shape[0]) if (COVID_confirmed[date][col])>0]\n        \nTimestampedGeoJson(\n            {'type': 'FeatureCollection', 'features': features},\n            period='P1D',\n            auto_play=False,\n            min_speed=1,\n            max_speed=1,\n            loop=False,\n            loop_button=True,\n            date_options='DD-MM-YYYY',\n            ).add_to(map_world)\n\nmap_world          ","52f37c8f":"## Coronavirus COVID-19: Global","2ddd8ee8":"### Clustering as per country\nmap_world = folium.Map(location=[28.7041, 77.1025], zoom_start=3)\n\nfor i in range(len(arr)):\n    mc = MarkerCluster(name='1000 clustered icons',overlay=True,control=False,icon_create_function=None)\n    for k in arr[i]:\n        #location = COVID_confirmed['Lat'][k], COVID_confirmed['Long'][k]\n        marker = folium.Marker(location=[COVID_confirmed['Lat'][k],COVID_confirmed['Long'][k]])\n        popup = '<b>Country:{}<\/b><br>Confirmed:{}<br>Death:{}<br>Recovered:{}'.format(COVID_confirmed['Country\/Region'][k],COVID_confirmed['03-04-2020'][k],COVID_death['03-04-2020'][k],COVID_recovered['03-04-2020'][k])\n        folium.Popup(popup).add_to(marker)\n        marker.add_to(mc)\n        mc.add_to(map_world) ","a92adc2a":"Data source: https:\/\/www.mohfw.gov.in","6ba297b5":"## Coronavirus COVID-19: India","4afd32ed":"#### Plotly Python Open Source Graphing Library https:\/\/plot.ly\/python\/","b2c6b0c6":"## Coronavirus COVID-19 India VS other countries","b9dfdc71":"## Importing libraries","9fed16e5":"## Say\u014dnara","cd084755":"# Coronavirus disease (COVID-19): Global & India\n\nAnalysis of Database of publications on 24th March 2020 by Johns Hopkins University & Ministry of Health and Family Welfare India\n\nBy- Jeeten Patel","5cc9a668":"## Data Analysis","62167ead":"## Data Source\n\nhttps:\/\/data.humdata.org\/dataset\/novel-coronavirus-2019-ncov-cases\n\nThe data is compiled by the Johns Hopkins University Center for Systems Science and Engineering (JHU CCSE) from various sources including the World Health Organization (WHO), DXY.cn. Pneumonia. 2020, BNO News, National Health Commission of the People\u2019s Republic of China (NHC), China CDC (CCDC), Hong Kong Department of Health, Macau Government, Taiwan CDC, US CDC, Government of Canada, Australia Government Department of Health, European Centre for Disease Prevention and Control (ECDC), Ministry of Health Singapore (MOH)","c4634522":"## Coronavirus COVID-19: Global","0ae8b549":"## Coronavirus COVID-19 India Statewise","704feb60":"# Folium Map Visualization with Date Slider","3d8dc2d5":"## Visualization","d52f2466":"![](https:\/\/www.who.int\/images\/default-source\/health-topics\/coronavirus\/corona-virus-getty.tmb-1920v.jpg?Culture=en&amp;sfvrsn=217a6a68_6&quot)"}}