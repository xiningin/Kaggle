{"cell_type":{"86d66940":"code","6d38336e":"code","76454b2c":"code","3d53a61a":"code","17e694ab":"code","61b43534":"code","858b4600":"code","4e1b0221":"markdown"},"source":{"86d66940":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d38336e":"#import The required Library\nimport itertools\nimport numpy as np\nimport pandas as pd","76454b2c":"# Set three group of Permutations Depend on the conditions\nmy_list2= ([\"\ud83c\udf85\",\"\ud83e\udd36\",\"\ud83e\udd8c\",\"\ud83e\udddd\",\"\ud83c\udf84\",\"\ud83c\udf81\",\"\ud83c\udf80\"])\nmy_list= ([0,1,2,3,4,5,6])\npermutations=list(itertools.permutations(my_list))\npermutations1=list()\npermutations2=list()\npermutations3=list()\nfor r in range(len(permutations)):\n    if( ((permutations[r][0]==0) and (permutations[r][1]==1)) or ((permutations[r][0]==0) and (permutations[r][2]==1)) or ((permutations[r][0]==0) and (permutations[r][4]==1)) ):\n        permutations1.append(permutations[r])\n    if( ((permutations[r][0]==0) and (permutations[r][3]==1)) or ((permutations[r][0]==0) and (permutations[r][1]==1)) ):\n        permutations2.append(permutations[r])\n    if( ((permutations[r][0]==0) and (permutations[r][1]==1)) or ((permutations[r][0]==0) and (permutations[r][5]==1)) ):\n        permutations3.append(permutations[r])","3d53a61a":"# Create strings of the thre group\nstring=\"\"\nstring2=\"\"\nstring4=\"\"\nfor r in range(len(permutations1)):\n    for i in range(len(permutations1[r])):\n        string+=str(permutations1[r][i])\nfor r in range(len(permutations2)):\n    for i in range(len(permutations2[r])):\n        string2+=str(permutations2[r][i])  \nfor r in range(len(permutations3)):\n    for i in range(len(permutations3[r])):\n        string4+=str(permutations3[r][i])  ","17e694ab":"\n# Create a predection sets for the three group during this I discover that even the 120 Required permutations lead to yield another 833 permutations\nmy_permutations1=list()\nfor r in range(len(string)):\n    string1=\"\"\n    if (r<len(string)-6):\n        if(string[r]!=string[r+1]!=string[r+2]!=string[r+3]!=string[r+4]!=string[r+5]!=string[r+6]):\n            string1+=string[r]+string[r+1]+string[r+2]+string[r+3]+string[r+4]+string[r+5]+string[r+6]\n            if(list(string1) not in my_permutations1):\n                my_permutations1.append(list(string1))\nmy_permutations2=list()\nfor r in range(len(string2)):\n    string3=\"\"\n    if (r<len(string2)-6):\n        if(string2[r]!=string2[r+1]!=string2[r+2]!=string2[r+3]!=string2[r+4]!=string2[r+5]!=string2[r+6]):\n            string3+=string2[r]+string2[r+1]+string2[r+2]+string2[r+3]+string2[r+4]+string2[r+5]+string2[r+6]\n            if(list(string3) not in my_permutations2):\n                my_permutations2.append(list(string3))\nmy_permutations3=list()\nfor r in range(len(string4)):\n    string5=\"\"\n    if (r<len(string4)-6):\n        if(string4[r]!=string4[r+1]!=string4[r+2]!=string4[r+3]!=string4[r+4]!=string4[r+5]!=string4[r+6]):\n            string5+=string4[r]+string4[r+1]+string4[r+2]+string4[r+3]+string4[r+4]+string4[r+5]+string4[r+6]\n            if(list(string5) not in my_permutations3):\n                my_permutations3.append(list(string5))","61b43534":"string6=string.replace(\"0\",\"\ud83c\udf85\")\nstring=string6.replace(\"1\",\"\ud83e\udd36\")\nstring6=string.replace(\"2\",\"\ud83e\udd8c\")\nstring=string6.replace(\"3\",\"\ud83e\udddd\")\nstring6=string.replace(\"4\",\"\ud83c\udf84\")\nstring=string6.replace(\"5\",\"\ud83c\udf81\")\nstring6=string.replace(\"6\",\"\ud83c\udf80\")\nstring9=string4.replace(\"0\",\"\ud83c\udf85\")\nstring4=string9.replace(\"1\",\"\ud83e\udd36\")\nstring9=string4.replace(\"2\",\"\ud83e\udd8c\")\nstring4=string9.replace(\"3\",\"\ud83e\udddd\")\nstring9=string4.replace(\"4\",\"\ud83c\udf84\")\nstring4=string9.replace(\"5\",\"\ud83c\udf81\")\nstring9=string4.replace(\"6\",\"\ud83c\udf80\")\nstring8=string2.replace(\"0\",\"\ud83c\udf85\")\nstring2=string8.replace(\"1\",\"\ud83e\udd36\")\nstring8=string2.replace(\"2\",\"\ud83e\udd8c\")\nstring2=string8.replace(\"3\",\"\ud83e\udddd\")\nstring8=string2.replace(\"4\",\"\ud83c\udf84\")\nstring2=string8.replace(\"5\",\"\ud83c\udf81\")\nstring8=string2.replace(\"6\",\"\ud83c\udf80\")\n","858b4600":"#Some extra work\nSchedule=[string6,string8,string9]\ndf = pd.DataFrame()\ndf[\"Schedule\"]=Schedule\nprint(df)\ndf.to_csv(\"Permutations.scv\",index=False,encoding='utf-8-sig')","4e1b0221":"I get the score of 2520 which I think that it will be the best meaningable score, Because of the cost of position 0 and positin 5 of the first and second shaps.\nThis is my first work in python and i know that it is not good enough, I start with python 2 weeks ago  "}}