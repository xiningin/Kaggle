{"cell_type":{"95914771":"code","3fbd1404":"code","2168ada2":"code","6ddc179d":"code","e9b5317f":"code","9a9e48a8":"code","32541e3c":"code","88787892":"code","7812e16a":"code","57ed8329":"code","fece6d29":"code","013292c3":"markdown","fa6acfc0":"markdown","d3d9cd69":"markdown","89c9ed7f":"markdown","bbba52aa":"markdown","98ef25c1":"markdown"},"source":{"95914771":"# Installing RAPIDS\nimport sys\n!cp ..\/input\/rapids\/rapids.0.15.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz > \/dev\/null\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\/site-packages\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + sys.path \n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/","3fbd1404":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom cuml.manifold import TSNE\nimport cupy, cudf\nimport os\nimport matplotlib.pyplot as plt\nimport gc","2168ada2":"# As cudf is faster than pandas, I'm going to use that.\ndf = cudf.read_csv('..\/input\/simple-eda-and-baseline-data-generation\/train_preprocessed.csv')","6ddc179d":"df['prior_question_had_explanation'] = df['prior_question_had_explanation'].astype(int)\ndf = df.fillna(-9999)\ndf['prior_question_elapsed_time'] = df['prior_question_elapsed_time'].replace(['inf'], -9999)\ndf['prior_question_elapsed_time'] = df['prior_question_elapsed_time'].astype(float)","e9b5317f":"sampled_df = df.sample(10000)\ndel df","9a9e48a8":"target = sampled_df['answered_correctly']\ndel sampled_df['answered_correctly']","32541e3c":"gc.collect()","88787892":"target = target.values\nsampled_df = sampled_df.values","7812e16a":"# I'm converting the data to numpy, as then it's easier to plot\/save it etc.\ntarget = cupy.asnumpy(target)\nsampled_df = cupy.asnumpy(sampled_df)","57ed8329":"%%time\ntsne = TSNE(n_components=2)\ntsne_data = tsne.fit_transform(sampled_df)","fece6d29":"plt.scatter(tsne_data[:,0], tsne_data[:,1], c = target, s = 0.6)","013292c3":"First, I am going to import the data from [Simple EDA and Baseline](https:\/\/www.kaggle.com\/ilialar\/simple-eda-and-baseline) kernel.","fa6acfc0":"If you don't know what TSNE is, you can learn it from StatQuest's great [video](https:\/\/www.youtube.com\/watch?v=NEaUSP4YerM).","d3d9cd69":"As we can see, there's a pattern in some parts of the dataset. However, in general it's not soo easy to distinguish points fallig into different categories by eye.","89c9ed7f":"Next, I'm replacing NaNs and Infs with -9999.","bbba52aa":"Having been inspired by @[Tunguz](https:\/\/www.kaggle.com\/tunguz) great [kernel](https:\/\/www.kaggle.com\/tunguz\/mnist-2d-t-sne-with-rapids) I thought it would be nice to see a two dimensional projection of the data from [Riiid! Answer Correctness Prediction](https:\/\/www.kaggle.com\/c\/riiid-test-answer-prediction) ","98ef25c1":"As the data set is huge, I'm only going to use a fraction of it."}}