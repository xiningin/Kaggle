{"cell_type":{"441134a5":"code","94cadba3":"code","e3611dfa":"code","9c9c5e2b":"code","d2f976e5":"code","da1a8fbb":"code","02d421b2":"code","aadf33a1":"code","01f9677f":"code","4ab94555":"code","967007f0":"code","a7fe9b56":"code","199c6fc3":"code","cd5a8cb9":"code","419ec7a1":"markdown","537f1fd6":"markdown","cc7add90":"markdown","23e7e82e":"markdown","7e8edffc":"markdown","a655a2a2":"markdown","a477df84":"markdown","d610fb47":"markdown","7c05fce6":"markdown","78a98af3":"markdown","fea778c0":"markdown","6a97db98":"markdown","f6f2206c":"markdown","906c7d66":"markdown","16fb5e9d":"markdown","9b61483d":"markdown"},"source":{"441134a5":"import pandas as pd\nimport numpy as np\nimport plotly as ply\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nply.offline.init_notebook_mode (connected = True)\nimport re\nfrom functools import reduce\nimport math\n\nfrom IPython.display import HTML\nimport base64\n","94cadba3":"import plotly as ply\nprint('plotly-'+ply.__version__)\n#v4.8.1\n\nfrom plotly.subplots import make_subplots\n\n\nimport plotly.express as px\nprint('plotly.express-'+ply.__version__)\n\nimport plotly.graph_objects as go\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nply.offline.init_notebook_mode (connected = True)\n\n\nimport pandas as pd\nprint('pandas-'+pd.__version__)\n#v1.1.3\n\nimport numpy as np\nprint('numpy-'+np.__version__)\n#v1.20.1\n\nimport re\nprint('re-'+re.__version__)\n#v2.2.1\n\nfrom functools import reduce\n\nimport math","e3611dfa":"#data path\ndata_path = '..\/input\/d\/dinhvantrong1991\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv'\ndf = pd.read_csv(data_path)#,sheetname='kaggle_survey_2021_responses')\ndf.head()\n\n## Remove first row\ndf.columns = df.iloc[0]\ndf = df.reindex(df.index.drop(0)).reset_index(drop=True)\ndf.columns.name = None\ndf.head()","9c9c5e2b":"# Distinct elements in columns\ncol_name = list(set(df.columns))\n\n# Sorted elements in columns from @codinghorror\ndef natural_key(string_):\n    return [int(s) if s.isdigit() else s for s in re.split(r'(\\d+)', string_)]\n\nsorted(col_name,key = natural_key)\n","d2f976e5":"#explain function\n#   .value_counts() #count\n#   .to_frame() #convert dataframe have a header \n#   .reset_index() #create a row index\n\n# Age\ndf_age = (\n        df['1.Age']\n        .value_counts()\n        .to_frame()\n        .reset_index()\n        .rename({'index':'Age', '1.Age':'Count'},axis=1)\n        .sort_values(by=['Age'], ascending=True) \n        )\n#print(df_age)\n\ndf_age['Percent'] = ((df_age['Count'] \/ df_age['Count'].sum())*100).round(1).astype(str) + '%'\n\n\n\ncolors = ['#4B2991',] * 11\ncolors[0] = '#872CA2'\ncolors[1] = '#C0369D'\ncolors[2] = '#EA4F88'\ncolors[3] = '#FA7876'\ncolors[4] = '#F6A97A'\ncolors[5] = '#C0369D'\n\nfig_age = go.Figure(go.Bar(\n            y=df_age['Count'],\n            x=df_age['Age'],\n            marker_color=colors,\n            cliponaxis = False,\n            text=df_age['Percent']\n\n                        ))\n\nfig_age.update_traces(\n                    texttemplate='%{text}'\n                    ,textposition='outside'\n                    ,textfont_size=14\n                    ,textfont_color='#6b6a6a'\n                    ,hovertemplate='<b>%{label} <\/b> <br> Percent: %{value}%'\n)\n\nfig_age.update_layout(\n                   title_text=\"<b>Age | <\/b> Total - Man - Woman\"\n                  ,title_font_size=30\n                  ,title_font_color='#474747'\n                  ,title_x=0.5\n                  ,showlegend=False\n                  ,yaxis_title=None\n                  ,xaxis_title=None\n                  ,yaxis={'showticklabels': False}\n                  ,plot_bgcolor='#e0e0e0' #'rgba(0, 0, 0, 0)'\n                  ,paper_bgcolor='#e0e0e0'#'rgba(0, 0, 0, 0)'\n                  ,font=dict(family=\"Lato\", size=16, color='#474747')\n                     ,height=550\n\n                 )\n\nfig_age.update_xaxes(showgrid=False)\nfig_age.update_yaxes(showgrid=False)\n\n\nfig_age.add_annotation(\n                    dict(\n                        font=dict(size=14)\n                        ,x=0\n                        ,y=-0.15\n                        ,showarrow=False\n                        ,text='<b>@TrongDV | <\/b> Kaggle Survey 2021'\n                        ,xanchor='left'\n                        ,xref=\"paper\"\n                        ,yref=\"paper\"\n                        )\n                  )\n#fig_age.show()\niplot(fig_age)\n\n\n#list_age = ['18-21','22-24','25-29','30-34','35-39']\n#most_age_range = (df_age[(df_age['Age'].isin(list_age))][['Count']].sum()\/df_age['Count'].sum())*100\n#print(most_age_range)\n","da1a8fbb":"# Gender\ndf_gender = (\n        df['2.Gender']\n        .value_counts()\n        .to_frame()\n        .reset_index()\n        .rename(columns={'index':'Gender', '2.Gender':'Count'})\n        .sort_values(by=['Count'], ascending=True) \n      )\n#print(df_age)\n\ndf_gender['Percent'] = ((df_gender['Count'] \/ df_gender['Count'].sum())*100).round(2).apply(str) + '%'\n\n#Select 2 column with multiple condition\ndf_12=df[(df['2.Gender']=='Man') | (df['2.Gender']=='Woman')][['1.Age','2.Gender']]\n#other ways can use .loc \/ .iloc \/ .query \n\n#Create id series\ndf_12['Id']=df_12.index + 1\ndf_12=df_12.reset_index(drop=True)\n\n#Use pivot table\ndf_ga=pd.pivot_table(\n     df_12\n    ,index=['2.Gender','1.Age']\n    ,aggfunc={'Id': len}\n).rename(columns={'Id': 'count'})\n\n#convert pivot table to dataframe & rename\ndf_ga=pd.DataFrame(df_ga.to_records())\ndf_ga=df_ga.rename({'1.Age':'Age', '2.Gender':'Gender','count':'People'},axis=1)\n\n#print(df_ga)    \n\n#print(df_age)\nfig_gender = make_subplots(rows=1, cols=2)\n\nfig_gender.add_trace(\n            go.Bar(\n                 x=df_gender['Gender'], y=df_gender['Percent']\n                #,height=465\n                #,color = 'Gender'\n                #,color_discrete_sequence=px.colors.sequential.Agsunset\n                ,text=df_gender['Percent']\n                ,marker=dict(color=px.colors.sequential.Agsunset)\n                ,hovertemplate='<b>%{label} <\/b> <br> Percent: %{value}%'\n                )\n    ,row=1, col=2\n            )\n\n\nfig_gender.update_traces(texttemplate='%{text}', textposition='outside',textfont_size=14,textfont_color='#6b6a6a')\n\nfig_gender.update_layout(\n                   title_text=\"<b>Gender & Age | <\/b> Man vs Woman\"\n                  ,title_font_size=30\n                  ,title_font_color='#474747'\n                  ,title_x=0.5\n                  ,showlegend=False\n                  ,yaxis_title=None\n                  ,xaxis_title=None\n                  ,yaxis={'showticklabels': False}\n                  ,plot_bgcolor='#e0e0e0'\n                  ,paper_bgcolor='#e0e0e0'#'rgba(0, 0, 0, 0)'\n                  ,font=dict(family=\"Lato\", size=16, color='#474747')\n    \n                 )\n\nfig_gender.update_xaxes(showgrid=False)\nfig_gender.update_yaxes(showgrid=False,visible=False)\n\nfig_ga = px.sunburst(df_ga, path=['Gender', 'Age'], values='People', color_discrete_sequence=px.colors.sequential.Agsunset)\n\n#print(fig_ga)\ncolorsunburst=['','','','','','','','','','','','','','','','','','','','','','','#694EA1','#C51162']\n\nfig_gender.add_trace(go.Sunburst(\n                 labels=fig_ga['data'][0]['ids'].tolist()\n                ,parents=fig_ga['data'][0]['parents'].tolist()\n                ,values=fig_ga['data'][0]['values'].tolist()\n                ,branchvalues=fig_ga['data'][0]['branchvalues']\n                ,textinfo='label+percent entry'\n                ,hovertemplate='<b>%{label} <\/b> <br> People: %{value}<br>'\n                ,hoverlabel_bgcolor='#512DA8'\n                ,marker=dict(colors=colorsunburst)\n                \n    )\n#,row=1, col=2\n)\n\nfig_gender.update_layout(\n    grid= dict(columns=2, rows=1)\n    ,margin = dict(t=100, l=100, r=100, b=50)\n    ,height = 600\n)\n\nfig_gender.add_annotation(\n                    dict(\n                        font=dict(size=14)\n                        ,x=0\n                        ,y=-0.2\n                        ,showarrow=False\n                        ,text='<b>@TrongDV | <\/b> Kaggle Survey 2021'\n                        ,xanchor='left'\n                        ,xref=\"paper\"\n                        ,yref=\"paper\"\n                        )\n                  )\n\n#fig_gender.show()\niplot(fig_gender)","02d421b2":"# exclude the value \"other\"\n# total\ndf_country=df.loc[df['3.Country']!='Other',['3.Country']]\ndf_country_total=(\n            df_country['3.Country']\n            .value_counts()\n            .to_frame()\n            .reset_index()\n            .rename({'index':'Country','3.Country':'Count'},axis=1)\n            .head(7)\n)\n\n#replace multiple substring to other string\nfor r in (('United States of America', 'USA')\n        ,('United Kingdom of Great Britain and Northern Ireland','UK')\n        ,('United Arab Emirates','UAE')):\n    df_country_total['Country'] = df_country_total['Country'].replace(*r)\n        \n# for man\ndf_country_m=df.loc[(df['2.Gender']=='Man') & (df['3.Country']!='Other'),['3.Country']]\ndf_country_m=(\n            df_country_m['3.Country']\n            .value_counts()\n            .to_frame()\n            .reset_index()\n            .rename({'index':'Country','3.Country':'Count'},axis=1)\n            .head(7)\n)\n\n#replace multiple substring to other string\nfor r in (('United States of America', 'USA')\n        ,('United Kingdom of Great Britain and Northern Ireland','UK')\n        ,('United Arab Emirates','UAE')):\n    df_country_m['Country'] = df_country_m['Country'].replace(*r)\n    \n#for woman\ndf_country_w=df.loc[(df['2.Gender']=='Woman') & (df['3.Country']!='Other'),['3.Country']]\ndf_country_w=(\n            df_country_w['3.Country']\n            .value_counts()\n            .to_frame()\n            .reset_index()\n            .rename({'index':'Country','3.Country':'Count'},axis=1)\n            .head(7)\n)\n\n#replace multiple substring to other string\nfor r in (('United States of America', 'USA')\n        ,('United Kingdom of Great Britain and Northern Ireland','UK')\n        ,('United Arab Emirates','UAE')):\n    df_country_w['Country'] = df_country_w['Country'].replace(*r)\n    \n\nfig_country = make_subplots(rows=1, cols=3)\n\nfig_country.add_trace(go.Funnelarea(\n     values = df_country_m['Count'], text = df_country_m['Country']\n    ,marker = {'colors': ['#4B2991', '#872CA2', '#C0369D', '#EA4F88', '#FA7876','#F6A97A','#C0369D']}\n    ,title = {\"text\": \"<b>Man\"}   \n    ,textfont = {\"family\": \"Lato\", \"size\": 20, \"color\": \"#ffffff\"}, opacity = 0.8\n    ,domain = {\"x\": [0, 0.4], \"y\": [0, 0.8]}\n))\n\nfig_country.add_trace(go.Funnelarea(\n     values = df_country_w['Count'], text = df_country_w['Country']\n    ,marker = {'colors': ['#4B2991', '#872CA2', '#C0369D', '#EA4F88', '#FA7876','#F6A97A','#C0369D']}\n    ,title = {\"text\": \"<b>Woman\"}  \n    ,textfont = {\"family\": \"Lato\", \"size\": 20, \"color\": \"#ffffff\"}, opacity = 0.8\n    ,domain = {\"x\": [0.6, 1], \"y\": [0, 0.8]}\n))\n   \nfig_country.add_trace(go.Funnelarea(\n     values = df_country_total['Count'], text = df_country_total['Country']\n    ,marker = {'colors': ['#4B2991', '#872CA2', '#C0369D', '#EA4F88', '#FA7876','#F6A97A','#C0369D']}\n    ,title = {\"text\": \"<b>Total\"}\n    ,textfont = {\"family\": \"Lato\", \"size\": 25, \"color\": \"#ffffff\"}, opacity = 0.8\n))\n\nfig_country.update_layout(\n                  title_text=\"<b>Top 7 Country<\/b> (exclude other) |  Men - Women - Total\"\n                  ,title_font_size=30\n                  ,title_font_color='#474747'\n                  ,title_x=0.5\n                  ,showlegend=False\n                  ,plot_bgcolor='#e0e0e0' #'rgba(0, 0, 0, 0)'\n                  ,paper_bgcolor='#e0e0e0'#'rgba(0, 0, 0, 0)'\n                  ,font=dict(family=\"Lato\", size=16, color='#474747')\n    ,height=550\n)\n\nfig_country.add_annotation(\n                    dict(\n                        font=dict(size=14)\n                        ,x=0\n                        ,y=-0.15\n                        ,showarrow=False\n                        ,text='<b>@TrongDV | <\/b> Kaggle Survey 2021'\n                        ,xanchor='left'\n                        ,xref=\"paper\"\n                        ,yref=\"paper\"\n                        )\n                  )\n\n#fig_country.show()\niplot(fig_country)","aadf33a1":"# list of contries without other\ndf_country_map = df.loc[df['3.Country']!='Other',['3.Country']]\n\n#replace multiple substring to other string\nfor r in (('United States of America', 'United States')\n        ,('United Kingdom of Great Britain and Northern Ireland','United Kingdom')\n        ,('Hong Kong (S.A.R.)','Hong Kong')\n        ,('Iran, Islamic Republic of...','Iran')\n        ):\n    df_country_map['3.Country'] = df_country_map['3.Country'].replace(*r)\n    \ndf_country_map2=(\n                df_country_map['3.Country']\n                .value_counts()\n                .to_frame()\n                .reset_index()\n                .rename({'index':'Country','3.Country':'People'},axis=1)\n)\n\nfig_map=go.Figure(data=go.Choropleth(\n     locations = df_country_map2['Country']\n    ,z = df_country_map2['People']\n    ,text = df_country_map2['Country']\n    ,locationmode = 'country names'\n    ,colorscale = 'Agsunset'\n    ,autocolorscale=False\n    ,reversescale=True\n    ,marker_line_color='#e3e3e3'\n    ,marker_line_width=0.1\n    ,marker_opacity=0.8\n    ,colorbar_title = 'People',\n))\nfig_map.update_traces(colorbar_showticklabels=False\n                    #,marker_line_width=0\n                     )\n\nfig_map.update_layout(\n                   title_text=\"<b>Kagglers | <\/b> Distribution\"\n                  ,title_font_size=30\n                  ,title_font_color='#474747'\n                  ,title_x=0.5\n                  ,showlegend=False\n                  ,plot_bgcolor='#ffffff' #'rgba(0, 0, 0, 0)'\n                  ,paper_bgcolor='#ffffff'#'rgba(0, 0, 0, 0)'\n                  ,font=dict(family=\"Lato\", size=16, color='#474747')\n                  ,width=800\n                  ,height=550  \n)\n\nfig_map.add_annotation(\n                    dict(\n                        font=dict(size=14)\n                        ,x=0\n                        ,y=-0.15\n                        ,showarrow=False\n                        ,text='<b>@TrongDV | <\/b> Kaggle Survey 2021'\n                        ,xanchor='left'\n                        ,xref=\"paper\"\n                        ,yref=\"paper\"\n                        )\n                  )\n#fig_map.show()\niplot(fig_map)","01f9677f":"#education by gender\ndf_edu_m = df.loc[df['2.Gender'] == 'Man',['4.Education']]\ndf_edu_w = df.loc[df['2.Gender'] == 'Woman',['4.Education']]\ndf_edu_o = df.loc[(df['2.Gender'] != 'Woman') & (df['2.Gender'] != 'Man'),['4.Education']]\n\ndf_edu = (\n    df['4.Education']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename({'index':'Education', '4.Education':'Count'},axis=1) \n    .sort_values(by=['Count'], ascending=True) \n)\n\ndf_edu['Percent']=((df_edu['Count'] \/ df_edu['Count'].sum())*100).round(1).apply(str)+'%'\n\ndf_edu_m = (\n    df_edu_m['4.Education']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename({'index':'Education', '4.Education':'Count'},axis=1) \n    .sort_values(by=['Count'], ascending=True) \n)\n\ndf_edu_m['Percent']=((df_edu_m['Count'] \/ df_edu['Count'].sum())*100).round(1).apply(str)+'%'\n\ndf_edu_w = (\n    df_edu_w['4.Education']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename({'index':'Education', '4.Education':'Count'},axis=1) \n    .sort_values(by=['Count'], ascending=True) \n)\n\ndf_edu_w['Percent']=((df_edu_w['Count'] \/ df_edu['Count'].sum())*100).round(1).apply(str)+'%'\n\ndf_edu_o = (\n    df_edu_o['4.Education']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename({'index':'Education', '4.Education':'Count'},axis=1) \n    .sort_values(by=['Count'], ascending=True) \n)\n\ndf_edu_o['Percent']=((df_edu_o['Count'] \/ df_edu['Count'].sum())*100).round(1).apply(str)+'%'\n\n\n#replace multiple string to abbreviations\nfor r in (('Master\u2019s degree', 'Master')\n        ,('Bachelor\u2019s degree','Bachelor')\n        ,('Doctoral degree','Doctorate')\n        ,('No formal education past high school','No-formal Ed')\n        ,('Professional doctorate','Pro-Doctorate')\n        ,('Some college\/university study without earning a bachelor\u2019s degree','Self-study')\n        ,('I prefer not to answer','No answer')\n          \n        ):\n    df_edu['Education'] = df_edu['Education'].replace(*r)\n    \n\nfig_edu = go.Figure()\nfig_edu.add_trace(go.Bar(\n     y=df_edu['Education']\n    ,x=df_edu_o['Percent']\n    ,name='Other'\n    ,orientation='h'\n    ,marker=dict(\n        color='#50456E'\n            )\n    ,text=df_edu_o['Percent']\n    ,opacity = 0.85\n    \n    \n))\n\nfig_edu.add_trace(go.Bar(\n     y=df_edu['Education']\n    ,x=df_edu_m['Percent']\n    ,name='Man'\n    ,orientation='h'\n    ,marker=dict(\n        color='#694EA1'\n            )\n    ,text=df_edu_m['Percent']\n    ,opacity = 0.85\n))\n\nfig_edu.add_trace(go.Bar(\n     y=df_edu['Education']\n    ,x=df_edu_w['Percent']\n    ,name='Woman'\n    ,orientation='h'\n    ,marker=dict(\n        color='#C0369D'        \n            )\n    ,text=df_edu_w['Percent']\n    ,opacity = 0.85\n    \n))\n\nfig_edu.update_traces(\n                    texttemplate='%{text}'\n                    ,textposition='inside'\n                    ,textfont_size=14\n                    ,textfont_color='#ffffff'\n                    ,hovertemplate='<b>%{label} <\/b> <br> Percent: %{value}%'\n)\n\nfig_edu.update_layout(\n     barmode='stack'\n    ,legend_x=0.3\n    ,legend_y=1.15\n    ,xaxis={'showticklabels': False}\n    ,legend_orientation='h'\n    \n        \n)\n\nfig_edu.update_xaxes(showgrid=False)\nfig_edu.update_yaxes(showgrid=False)\n\nfig_edu.update_layout(\n                  title_text=\"<b>Education<\/b> |  Men - Women\"\n                  ,title_font_size=30\n                  ,title_font_color='#474747'\n                  ,title_x=0.5\n                  #,showlegend=False\n                  ,plot_bgcolor='#e0e0e0' #'rgba(0, 0, 0, 0)'\n                  ,paper_bgcolor='#e0e0e0'#'rgba(0, 0, 0, 0)'\n                  ,font=dict(family=\"Lato\", size=16, color='#474747')\n)\n\nfig_edu.add_annotation(\n                    dict(\n                        font=dict(size=14)\n                        ,x=0\n                        ,y=-0.2\n                        ,showarrow=False\n                        ,text='<b>@TrongDV | <\/b> Kaggle Survey 2021'\n                        ,xanchor='left'\n                        ,xref=\"paper\"\n                        ,yref=\"paper\"\n                        )\n                  )\n\n#fig_edu.show()\niplot(fig_edu)","4ab94555":"df_edu_age_y = df.loc[:,['1.Age','25.Yearly income','4.Education']]\n\n# create 2 columns to calculate median income\ndf_edu_age_y[['min_income','max_income']]=(\n    df['25.Yearly income']\n    .apply(lambda x: str(x).replace(',',''))\n    .apply(lambda x: str(x).replace('$',''))\n    .apply(lambda x: str(x).replace('>',''))    \n    .str.split(\"-\", n = 1, expand = True)\n    .apply(pd.to_numeric,errors = 'coerce')\n)\n\n# create a median column from 2 columns\ndf_edu_age_y['median_income'] = (\n     np.where(df_edu_age_y['min_income'] == 0\n            ,df_edu_age_y['max_income']\n            ,df_edu_age_y['min_income']\/2+df_edu_age_y['max_income']\/2\n             )\n    .round(0)\n)\n\ndf_edu_age_y=(\n     df_edu_age_y\n    .drop(columns=['25.Yearly income','min_income','max_income'])\n    .rename({'1.Age':'age','4.Education':'education',},axis=1)\n)\n\n#replace to abbreviation\nfor r in (('Master\u2019s degree', 'Master')\n        ,('Bachelor\u2019s degree','Bachelor')\n        ,('Doctoral degree','Doctorate')\n        ,('No formal education past high school','No-formal Ed')\n        ,('Professional doctorate','Pro-Doctorate')\n        ,('Some college\/university study without earning a bachelor\u2019s degree','Self-study')\n        ,('I prefer not to answer','No answer')          \n        ):\n    df_edu_age_y['education'] = df_edu_age_y['education'].replace(*r)\n    \n\n\n## add index\ndf_edu_age_y['id']=df_edu_age_y.index + 1\ndf_edu_age_y=df_edu_age_y.reset_index(drop=True)\n\n# Use pivot table\ndf_edu_age_y=pd.pivot_table(\n     df_edu_age_y\n    ,index=['age','education']\n    ,aggfunc={'id': len,'median_income':np.mean}\n).rename(columns={'id': 'count','median_income':'avg_income'})\n\n#convert pivot table to dataframe & rename\ndf_edu_age_y=pd.DataFrame(df_edu_age_y.to_records())\n\n\ndf_edu_age_y = df_edu_age_y.sort_values(['education', 'age'])\n\n\nbubble_size = []\n\nfor index, row in df_edu_age_y.iterrows():\n    bubble_size.append(math.pow(row['count'],1.3))\n\ndf_edu_age_y['size'] = bubble_size\n\neducation_name = ['Master', 'Bachelor', 'Doctorate', 'Self-study', 'No answer','No-formal Ed','Pro-Doctorate']\neducation_data = {education:df_edu_age_y.query(\"education == '%s'\" %education)\n                             for education in education_name}\n\n\nfig_edu_age_y = go.Figure()\n\nfor education_name, education in education_data.items():\n    fig_edu_age_y.add_trace(go.Scatter(\n         x=education['avg_income'].round(0)\n        ,y=education['age']\n        ,name=education_name\n        ,text=df_edu_age_y['education']\n        ,marker_size=education['size']\n        ,hovertemplate=\n            'Age: %{y}<br>'+\n            'Yearly Income: %{x}<br>'+\n            '<extra><\/extra>'\n        ))\n\nfig_edu_age_y.update_traces(\n    mode='markers'\n    ,marker=dict(sizemode = 'area'\n                ,sizeref=10\n                ,line=dict(width=0)\n               )\n    ,opacity = 0.9\n)\n\n\nfig_edu_age_y.update_layout(\n    xaxis={\n        'title':'Yearly Income',\n        'type':'log'}\n    ,yaxis={'title':'Age'}    \n)\n\n#fig_edu_age_y.update_xaxes(showgrid=False)\n#fig_edu_age_y.update_yaxes(showgrid=False)\n\nfig_edu_age_y.update_layout(legend = dict(bordercolor='rgb(100,100,100)'))\n\n\nfig_edu_age_y.update_layout(\n                  title_text=\"<b>Education - Age - Income <\/b> |  The triangle\"\n                  ,title_font_size=30\n                  ,title_font_color='#474747'\n                  ,title_x=0.5\n                  #,showlegend=False\n                  ,plot_bgcolor='#e0e0e0' #'rgba(0, 0, 0, 0)'\n                  ,paper_bgcolor='#e0e0e0'#'rgba(0, 0, 0, 0)'\n                  ,font=dict(family=\"Lato\", size=16, color='#474747')\n    \n                \n)\n\nfig_edu_age_y.add_annotation(\n                    dict(\n                        font=dict(size=14)\n                        ,x=0\n                        ,y=-0.2\n                        ,showarrow=False\n                        ,text='<b>@TrongDV | <\/b> Kaggle Survey 2021'\n                        ,xanchor='left'\n                        ,xref=\"paper\"\n                        ,yref=\"paper\"\n                        )\n                  )\n\n#fig_edu_age_y.show()\niplot(fig_edu_age_y)","967007f0":"df_continents = pd.read_csv('https:\/\/raw.githubusercontent.com\/trodiva\/IS_608\/master\/NanosatDB_munging\/Countries-Continents.csv')\n\ndf_country_edu_income = df.loc[:,['3.Country','4.Education','25.Yearly income']]\n\n# replace multiple substring to specific string\nfor r in (('United States of America', 'United States of America')\n        ,('United Kingdom of Great Britain and Northern Ireland','United Kingdom')\n        ,('Hong Kong (S.A.R.)','')\n        ,('Iran, Islamic Republic of...','Iran')\n        ,('Viet Nam','Vietnam')\n        ,('South Korea','Korea, South')\n        ,('Russia','Russian Federation')\n        ):\n    df_country_edu_income['3.Country'] = df_country_edu_income['3.Country'].replace(*r)\n    \nfor r in (('Master\u2019s degree', 'Master')\n        ,('Bachelor\u2019s degree','Bachelor')\n        ,('Doctoral degree','Doctorate')\n        ,('No formal education past high school','No-formal Ed')\n        ,('Professional doctorate','Pro-Doctorate')\n        ,('Some college\/university study without earning a bachelor\u2019s degree','Self-study')\n        ,('I prefer not to answer','No answer')          \n        ):\n    df_country_edu_income['4.Education'] = df_country_edu_income['4.Education'].replace(*r)\n    \ndf_country_edu_income = (\n    pd.merge(df_country_edu_income,df_continents,how='left',left_on=['3.Country'],right_on=['Country'])\n    .drop('Country',1)\n    .rename({'3.Country':'Country','4.Education':'Education','25.Yearly income':'yearly_income'},axis=1)    \n)\n\n# create 2 columns to calculate median income\ndf_country_edu_income[['min_income','max_income']]=(\n    df_country_edu_income['yearly_income'].copy()\n    .apply(lambda x: str(x).replace(',',''))\n    .apply(lambda x: str(x).replace('$',''))\n    .apply(lambda x: str(x).replace('>',''))    \n    .str.split(\"-\", n = 1, expand = True)\n    .apply(pd.to_numeric,errors = 'coerce')\n)\n\n# create a median income column from 2 columns\ndf_country_edu_income['median_income'] = (\n     np.where(df_country_edu_income['min_income'] == 0\n            ,df_country_edu_income['max_income']\n            ,df_country_edu_income['min_income']\/2+df_country_edu_income['max_income']\/2\n             )\n    .round(0)\n)\n\n#print(df_country_edu_income['median_income'].min())    \ndf_country_edu_income['Id']= df_country_edu_income.index + 1\n\n# top 20 countries have the lasrgest sample\ntop20=df_country_edu_income[df_country_edu_income['Country'].str.strip().astype(bool)]\n\ntop20_largest = (\n    top20['Country'].copy().dropna()\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .sort_values(by=['Country'], ascending=False)\n    .head(35)\n    .drop('Country',1)\n    .drop_duplicates()\n)\n# transform to list\ntop20_largest=top20_largest['index'].to_list()\n\n# top 20 countries have the smallest sample\ntop20_smallest = (\n    top20['Country'].copy().dropna()\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .sort_values(by=['Country'], ascending=True)\n    .head(35)\n    .drop('Country',1)\n    .drop_duplicates()\n)\n# transform to list\ntop20_smallest=top20_smallest['index'].to_list()\n\n#print(top20_smallest)\n\n# top 20 largest and smallest\n# largest\ndf_country_edu_income_l=pd.pivot_table(\n     df_country_edu_income[(df_country_edu_income['Country'].isin(top20_largest))][['Country','Education','Continent','median_income','Id']].copy()\n    ,index=['Continent','Country','Education']\n    ,aggfunc={'Id': len,'median_income':np.mean}\n).rename(columns={'Id': 'count','median_income':'avgIncome'})\n#df_country_edu_income_l=df_country_edu_income[(df_country_edu_income['Country'].isin(top20_largest))][['Country','Education','Continent','median_income','Id']].copy()\n\ndf_country_edu_income_l = (\n    pd.DataFrame(df_country_edu_income_l.to_records())\n).fillna(df_country_edu_income_l['avgIncome'].min())\n\n#print(top20_largest)\n\n# smallest\ndf_country_edu_income_s=pd.pivot_table(\n     df_country_edu_income[(df_country_edu_income['Country'].isin(top20_smallest))][['Country','Education','Continent','median_income','Id']].copy()\n    ,index=['Continent','Country','Education']\n    ,aggfunc={'Id': len,'median_income':np.mean}\n).rename(columns={'Id': 'count','median_income':'avgIncome'})\n\ndf_country_edu_income_s = (\n    pd.DataFrame(df_country_edu_income_s.to_records())\n).fillna(df_country_edu_income_s['avgIncome'].min())\n\n\n# total country\ndf_country_edu_income=pd.pivot_table(\n     df_country_edu_income[['Country','Education','Continent','median_income','Id']].copy()\n    ,index=['Continent','Country','Education']\n    ,aggfunc={'Id': len,'median_income':np.mean}\n).rename(columns={'Id': 'count','median_income':'avgIncome'})\n\n# assign NaN values as min(income)\ndf_country_edu_income = (\n    pd.DataFrame(df_country_edu_income.to_records())\n).fillna(df_country_edu_income['avgIncome'].min())\n\n# total\nfig_country_edu_income = px.treemap(\n    df_country_edu_income\n    ,path=[px.Constant('Total country'),'Continent', 'Country','Education']\n    ,values='count'\n    ,color='avgIncome'\n    ,color_continuous_scale='deep'\n    ,color_continuous_midpoint=np.average(df_country_edu_income['avgIncome'],weights=df_country_edu_income['count'])\n    ,range_color=[999,200000]\n    #,text=df_country_edu_income['']\n)\nfig_country_edu_income.update_layout(margin = dict(t=5, l=0, r=0, b=0),height=600)\nfig_country_edu_income.update_traces(textinfo='label+percent parent')\n#fig_country_edu_income.show()\niplot(fig_country_edu_income)\n\n# the largest sample\nfig_country_edu_income_l = px.treemap(\n    df_country_edu_income_l\n    ,path=[px.Constant('Top 35 the largest sample'),'Continent', 'Country','Education']\n    ,values='count'\n    ,color='avgIncome'\n    ,color_continuous_scale='deep'\n    ,color_continuous_midpoint=np.average(df_country_edu_income_l['avgIncome'],weights=df_country_edu_income_l['count'])\n    ,range_color=[999,200000]\n    #,text=df_country_edu_income['']\n)\nfig_country_edu_income_l.update_layout(margin = dict(t=5, l=0, r=0, b=0),height=600)\nfig_country_edu_income_l.update_traces(textinfo='label+percent parent')\nfig_country_edu_income_l.show()\niplot(fig_country_edu_income_l)\n\n# the smallest sample\nfig_country_edu_income_s = px.treemap(\n    df_country_edu_income_s\n    ,path=[px.Constant('Top 35 the smallest sample'),'Continent', 'Country','Education']\n    ,values='count'\n    ,color='avgIncome'\n    ,color_continuous_scale='deep'\n    ,color_continuous_midpoint=np.average(df_country_edu_income_s['avgIncome'],weights=df_country_edu_income_s['count'])\n    ,range_color=[999,200000]\n    #,text=df_country_edu_income['']\n)\nfig_country_edu_income_s.update_layout(margin = dict(t=5, l=0, r=0, b=0),height=600)\nfig_country_edu_income_s.update_traces(textinfo='label+percent parent')\n#fig_country_edu_income_s.show()\niplot(fig_country_edu_income_s)","a7fe9b56":"df_occupation=df.loc[:,['5.Occupation']]\ndf_occupation_m=df.loc[df['2.Gender']=='Man',['5.Occupation']]\ndf_occupation_w=df.loc[df['2.Gender']=='Woman',['5.Occupation']]\ndf_occupation_o=df.loc[(df['2.Gender']!='Man') & (df['2.Gender']=='Woman') ,['5.Occupation']]\n\ndf_occupation=(\n    df_occupation['5.Occupation']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename({'index':'occupation','5.Occupation':'count'},axis=1)\n    .sort_values(by=['count'], ascending=True)  \n)\n\ndf_occupation_m=(\n     df_occupation_m['5.Occupation']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename({'index':'occupation','5.Occupation':'count'},axis=1)\n    .sort_values(by=['count'], ascending=True)     \n)\n\ndf_occupation_w=(\n     df_occupation_w['5.Occupation']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename({'index':'occupation','5.Occupation':'count'},axis=1)\n    .sort_values(by=['count'], ascending=True)     \n)\n\ndf_occupation_o=(\n     df_occupation_o['5.Occupation']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename({'index':'occupation','5.Occupation':'count'},axis=1)\n    .sort_values(by=['count'], ascending=True)     \n)\n\ndf_occupation_m['percent']=((df_occupation_m['count'] \/ df_occupation['count'].sum())*100).round(1).astype('str')+'%'\ndf_occupation_w['percent']=((df_occupation_w['count'] \/ df_occupation['count'].sum())*100).round(1).astype('str')+'%'\ndf_occupation_o['percent']=((df_occupation_o['count'] \/ df_occupation['count'].sum())*100).round(1).astype('str')+'%'\n\n\nfig_occupation = go.Figure()\nfig_occupation.add_trace(go.Bar(\n     y=df_occupation['occupation']\n    ,x=df_occupation_o['percent']\n    ,name='Other'\n    ,orientation='h'\n    ,marker=dict(\n        color='#50456E'\n            )\n    ,text=df_occupation_o['percent']\n    ,opacity = 0.85 \n))\n\nfig_occupation.add_trace(go.Bar(\n     y=df_occupation['occupation']\n    ,x=df_occupation_m['percent']\n    ,name='Man'\n    ,orientation='h'\n    ,marker=dict(\n        color='#694EA1'\n            )\n    ,text=df_occupation_m['percent']\n    ,opacity = 0.85\n))\n\nfig_occupation.add_trace(go.Bar(\n     y=df_occupation['occupation']\n    ,x=df_occupation_o['percent']\n    ,name='Woman'\n    ,orientation='h'\n    ,marker=dict(\n        color='#C0369D'        \n            )\n    ,text=df_occupation_o['percent']\n    ,opacity = 0.85\n    \n))\n\nfig_occupation.update_traces(\n                    texttemplate='%{text}'\n                    ,textposition='inside'\n                    ,textfont_size=14\n                    ,textfont_color='#ffffff'\n                    ,hovertemplate='<b>%{label} <\/b> <br> Percent: %{value}%'\n)\n\nfig_occupation.update_layout(\n     barmode='stack'\n    ,legend_x=0.3\n    ,legend_y=1.1\n    ,legend_orientation='h'\n    ,xaxis={'showticklabels': False}\n    \n        \n)\n\nfig_occupation.update_xaxes(showgrid=False)\nfig_occupation.update_yaxes(showgrid=False)\n\nfig_occupation.update_layout(\n     title_text=\"<b>Role<\/b> |  Men - Women - others\"\n    ,title_font_size=30\n    ,title_font_color='#474747'\n    ,title_x=0.5\n    ,plot_bgcolor='#e0e0e0' #'rgba(0, 0, 0, 0)'\n    ,paper_bgcolor='#e0e0e0'#'rgba(0, 0, 0, 0)'\n    ,font=dict(family=\"Lato\", size=16, color='#474747')\n    ,height=600\n    \n)\n\nfig_occupation.add_annotation(\n                    dict(\n                        font=dict(size=14)\n                        ,x=0\n                        ,y=-0.15\n                        ,showarrow=False\n                        ,text='<b>@TrongDV | <\/b> Kaggle Survey 2021'\n                        ,xanchor='left'\n                        ,xref=\"paper\"\n                        ,yref=\"paper\"\n                        )\n                  )\n\n#fig_occupation.show()\niplot(fig_occupation)","199c6fc3":"df_continents = pd.read_csv('https:\/\/raw.githubusercontent.com\/trodiva\/IS_608\/master\/NanosatDB_munging\/Countries-Continents.csv')\n\ndf_country_occ_income = df.loc[:,['3.Country','5.Occupation','25.Yearly income']]\n\n# replace multiple substring to specific string\nfor r in (('United States of America', 'United States of America')\n        ,('United Kingdom of Great Britain and Northern Ireland','United Kingdom')\n        ,('Hong Kong (S.A.R.)','')\n        ,('Iran, Islamic Republic of...','Iran')\n        ,('Viet Nam','Vietnam')\n        ,('South Korea','Korea, South')\n        ,('Russia','Russian Federation')\n        ):\n    df_country_occ_income['3.Country'] = df_country_occ_income['3.Country'].replace(*r)\n    \ndf_country_occ_income = (\n    pd.merge(df_country_occ_income,df_continents,how='left',left_on=['3.Country'],right_on=['Country'])\n    .drop('Country',1)\n    .rename({'3.Country':'Country','5.Occupation':'occupation','25.Yearly income':'yearly_income'},axis=1)    \n)\n\n# create 2 columns to calculate median income\ndf_country_occ_income[['min_income','max_income']]=(\n    df_country_occ_income['yearly_income'].copy()\n    .apply(lambda x: str(x).replace(',',''))\n    .apply(lambda x: str(x).replace('$',''))\n    .apply(lambda x: str(x).replace('>',''))    \n    .str.split(\"-\", n = 1, expand = True)\n    .apply(pd.to_numeric,errors = 'coerce')\n)\n\n# create a median income column from 2 columns\ndf_country_occ_income['median_income'] = (\n     np.where(df_country_occ_income['min_income'] == 0\n            ,df_country_occ_income['max_income']\n            ,df_country_occ_income['min_income']\/2+df_country_occ_income['max_income']\/2\n             )\n    .round(0)\n)\n\n#print(df_country_edu_income['median_income'].min())    \ndf_country_occ_income['Id']= df_country_occ_income.index + 1\n\n# top 20 countries have the lasrgest sample\ntop20=df_country_occ_income[df_country_occ_income['Country'].str.strip().astype(bool)]\n\ntop20_largest = (\n    top20['Country'].copy().dropna()\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .sort_values(by=['Country'], ascending=False)\n    .head(35)\n    .drop('Country',1)\n    .drop_duplicates()\n)\n# transform to list\ntop20_largest=top20_largest['index'].to_list()\n\n# top 20 countries have the smallest sample\ntop20_smallest = (\n    top20['Country'].copy().dropna()\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .sort_values(by=['Country'], ascending=True)\n    .head(35)\n    .drop('Country',1)\n    .drop_duplicates()\n)\n# transform to list\ntop20_smallest=top20_smallest['index'].to_list()\n\n#print(top20_smallest)\n\n# top 20 largest and smallest\n# largest\ndf_country_occ_income_l=pd.pivot_table(\n     df_country_occ_income[(df_country_occ_income['Country'].isin(top20_largest))][['Country','occupation','Continent','median_income','Id']].copy()\n    ,index=['Continent','Country','occupation']\n    ,aggfunc={'Id': len,'median_income':np.mean}\n).rename(columns={'Id': 'count','median_income':'avgIncome'})\n#df_country_edu_income_l=df_country_edu_income[(df_country_edu_income['Country'].isin(top20_largest))][['Country','Education','Continent','median_income','Id']].copy()\n\ndf_country_occ_income_l = (\n    pd.DataFrame(df_country_occ_income_l.to_records())\n).fillna(df_country_occ_income_l['avgIncome'].min())\n\n#print(top20_largest)\n\n# smallest\ndf_country_occ_income_s=pd.pivot_table(\n     df_country_occ_income[(df_country_occ_income['Country'].isin(top20_smallest))][['Country','occupation','Continent','median_income','Id']].copy()\n    ,index=['Continent','Country','occupation']\n    ,aggfunc={'Id': len,'median_income':np.mean}\n).rename(columns={'Id': 'count','median_income':'avgIncome'})\n\ndf_country_occ_income_s = (\n    pd.DataFrame(df_country_occ_income_s.to_records())\n).fillna(df_country_occ_income_s['avgIncome'].min())\n\n\n# total country\ndf_country_occ_income=pd.pivot_table(\n     df_country_occ_income[['Country','occupation','Continent','median_income','Id']].copy()\n    ,index=['Continent','Country','occupation']\n    ,aggfunc={'Id': len,'median_income':np.mean}\n).rename(columns={'Id': 'count','median_income':'avgIncome'})\n\n# assign NaN values as min(income)\ndf_country_occ_income = (\n    pd.DataFrame(df_country_occ_income.to_records())\n).fillna(df_country_occ_income['avgIncome'].min())\n\n# total\nfig_country_occ_income = px.treemap(\n    df_country_occ_income\n    ,path=[px.Constant('Total country'),'Continent', 'Country','occupation']\n    ,values='count'\n    ,color='avgIncome'\n    ,color_continuous_scale='deep'\n    ,color_continuous_midpoint=np.average(df_country_occ_income['avgIncome'],weights=df_country_occ_income['count'])\n    ,range_color=[999,200000]\n    #,text=df_country_edu_income['']\n)\nfig_country_occ_income.update_layout(margin = dict(t=5, l=0, r=0, b=0),height=600)\nfig_country_occ_income.update_traces(textinfo='label+percent parent')\nfig_country_occ_income.show()\n\n# the largest sample\nfig_country_occ_income_l = px.treemap(\n    df_country_occ_income_l\n    ,path=[px.Constant('Top 35 the largest sample'),'Continent', 'Country','occupation']\n    ,values='count'\n    ,color='avgIncome'\n    ,color_continuous_scale='deep'\n    ,color_continuous_midpoint=np.average(df_country_occ_income_l['avgIncome'],weights=df_country_occ_income_l['count'])\n    ,range_color=[999,200000]\n    #,text=df_country_edu_income['']\n)\nfig_country_occ_income_l.update_layout(margin = dict(t=5, l=0, r=0, b=0),height=600)\nfig_country_occ_income_l.update_traces(textinfo='label+percent parent')\nfig_country_occ_income_l.show()\n\n# the smallest sample\nfig_country_occ_income_s = px.treemap(\n    df_country_occ_income_s\n    ,path=[px.Constant('Top 35 the smallest sample'),'Continent', 'Country','occupation']\n    ,values='count'\n    ,color='avgIncome'\n    ,color_continuous_scale='deep'\n    ,color_continuous_midpoint=np.average(df_country_occ_income_s['avgIncome'],weights=df_country_occ_income_s['count'])\n    ,range_color=[999,200000]\n    #,text=df_country_edu_income['']\n)\nfig_country_occ_income_s.update_layout(margin = dict(t=5, l=0, r=0, b=0),height=600)\nfig_country_occ_income_s.update_traces(textinfo='label+percent parent')\n#fig_country_occ_income_s.show()\niplot(fig_country_occ_income_s)\n","cd5a8cb9":"df_continents = pd.read_csv('https:\/\/raw.githubusercontent.com\/trodiva\/IS_608\/master\/NanosatDB_munging\/Countries-Continents.csv')\n\ndf_continent_gen_yoe = df.loc[:,['2.Gender','3.Country','6.YoE']]\n\n# replace multiple substring to specific string\nfor r in (('United States of America', 'United States of America')\n        ,('United Kingdom of Great Britain and Northern Ireland','United Kingdom')\n        ,('Hong Kong (S.A.R.)','')\n        ,('Iran, Islamic Republic of...','Iran')\n        ,('Viet Nam','Vietnam')\n        ,('South Korea','Korea, South')\n        ,('Russia','Russian Federation')\n        ):\n    df_continent_gen_yoe['3.Country'] = df_continent_gen_yoe['3.Country'].replace(*r)\n    \nfor r in (('Prefer not to say', 'Other')\n        ,('Nonbinary','Other')\n        ,('Prefer to self-describe','Other')\n        ):\n    df_continent_gen_yoe['2.Gender'] = df_continent_gen_yoe['2.Gender'].replace(*r)    \n    \ndf_continent_gen_yoe = (\n    pd.merge(df_continent_gen_yoe,df_continents,how='left',left_on=['3.Country'],right_on=['Country'])\n    .drop('Country',1)\n    .rename({'2.Gender':'gender','3.Country':'Country','6.YoE':'yoe'},axis=1)  \n    .drop('Country',1)    \n)\n\n\ndf_continent_gen_yoe['Id']= df_continent_gen_yoe.index + 1\n\n# total country\ndf_continent_gen_yoe=pd.pivot_table(\n     df_continent_gen_yoe[['gender','yoe','Continent','Id']].copy()\n    ,index=['Continent','yoe','gender']\n    ,aggfunc={'Id': len}\n).rename(columns={'Id': 'count'})\n\ndf_continent_gen_yoe=pd.DataFrame(df_continent_gen_yoe.to_records())\n\n# total\nfig_continent_gen_yoe = px.treemap(\n    df_continent_gen_yoe\n    ,path=[px.Constant('World'),'Continent','yoe','gender']\n    ,values='count'\n    ,color_discrete_sequence=px.colors.diverging.Tealrose\n)\nfig_continent_gen_yoe.update_layout(margin = dict(t=5, l=0, r=0, b=0),height=600)\nfig_continent_gen_yoe.update_traces(textinfo='label+percent parent')\n#fig_continent_gen_yoe.show()\niplot(fig_continent_gen_yoe)\n","419ec7a1":"**4. Density of kaggler in data sample**\n\nAs we can take a look at a figure, In Asia, India are still have the largest sample. In north America, USA is in the second.","537f1fd6":"**1. Age distribution of Kaggler**\n\n* In kaggle survey, most of the age range is less than 40 years old\n* The total percent of the group is approximate 80%","cc7add90":"**7. Education - Continents - Income by TreeMap**\n\n**Total**\n\nIn Asia, we have top 5 countries are:\n1. India\n2. Japan\n3. China\n4. Russia\n5. Pakistan\n\nIn Europe, the top 5 are:\n1. United Kingdom\n2. Germany\n3. Spain\n4. France\n5. Italy\n\nIn America:\n1. USA\n2. Canada\n3. Brazile\n4. Mexico\n5. Colombia\n\nIn Africa:\n1. Nigeria\n2. Egypt\n3. Kenya\n4. South Africa\n5. Morocco\n\nIn oceania:\n1. Australia\n\n**Top 35 smallest sample:**\n\nIn Asia, we have top 5 countries are:\n1. Singapore\n2. Malaysia\n3. Israel\n4. Thailand\n5. UAE\n\nIn Europe, the top 5 are:\n1. Netherlands\n2. Portugal\n3. Greece\n4. Ireland\n5. Sweden\n\nIn Africa:\n1. Tunisia\n2. Ghana\n3. Uganda\n4. Algeri\n5. Ethiopia\n\nIn America:\n1. Peru\n2. Chile\n3. Ecuador\n\n\n* Loot at the treemap we see the high salaries are concentrated in area such as North America, Europe and some other developed countries.\n\n* In addition, a person hold a doctorate's degree is higher average salary than the others.\n\n","23e7e82e":"# DEMOGRAPHICS AND GEOGRAPHY OF KAGGLERs","7e8edffc":"**5. Education**\n\n* In a figure as below, the highest percent of education is a master degree. Specifically, propotion of men sample is 30.8% compare to 7.5% of women sample.\n\n* The second is a bachelor degree, the percent is slightly decreased 30.5% for gents and 7.1% for ladies.\n","a655a2a2":"# Updating...","a477df84":"**8. Role**\n\n* Students are still the largest sample.\n* The second role is Data scientist.\n* And the third is Software engineer.\n\n* Suprisingly, the other role are in 4. (Maybe my role will be ranked in this group)\n* The 5th is Data Analyst.\n\n","d610fb47":"**3. Top 7 countries have the largest sample in data survey**\n\n* These rankingse are unchanged for population & men sample\n* For women sample, while top 2 countries are the same as population data, From the 3rd country there has been a change.","7c05fce6":"**2. Data**\n\n* I have removed the first row and have edited the data header like as below\n* We have a data frame with 5 rows and 369 columns","78a98af3":"**9. Salaries classified by yearly income and countries.**\n\nThe top high salaries including as below:\n\n* Product Manager \/ Project Manager\n* Research Scientist\n* ML engineer\n* Data scientist\n* Data analyst","fea778c0":"**6. Relationship between education and age group and income**\n\n* Apparently, master's degree holders have higher salaries than bachelor's degree. And you can see the distribution prove it clearly.\n\n* Beside that, the older the age, the higher the salary.","6a97db98":"**2. Gender & Age distribution**\n\n* Percent of men distribution is ~ 79% compare to ~19% of women.\n\n* **To men**: The top 3 ranges 18-21 | 22-24 and 25-29\n* **To women**: The top 3 ranges are same as the men\n","f6f2206c":"# Kaggle survey 2021\n**1. Library.**\n\n* These are all library I used\n* I use plotly library for a visualization because it's so understandable and easy for a beginner","906c7d66":"**3. List of variables**\n\n* We actually have 42 variables after remove duplicates variable name from data source","16fb5e9d":"**10. Age distribution by continents and years of experience**\n","9b61483d":"<img src=\"https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/3136\/media\/kaggle-transparent.svg\" width=\"1000\">"}}