{"cell_type":{"385fe279":"code","88cb1bcd":"code","9eb32dc3":"code","0b39fec9":"code","816cffee":"code","80713bee":"code","80138241":"code","77789fbd":"code","2d560bf1":"code","76b34430":"code","7d0f7f17":"code","28bfca2f":"code","b33336dd":"code","4a827a83":"code","83835a6c":"markdown","b2f3893e":"markdown","547654a6":"markdown","e477f7a3":"markdown","23e3103f":"markdown","fd4f8cc3":"markdown","d464c548":"markdown","ca3c30be":"markdown","fad69ba4":"markdown"},"source":{"385fe279":"!pip install dicom2nifti","88cb1bcd":"import dicom2nifti","9eb32dc3":"import numpy as np\nimport nibabel as nib\n#import itk\n#import itkwidgets\nfrom ipywidgets import interact, interactive, IntSlider, ToggleButtons\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style('darkgrid')\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport matplotlib.animation as anim\nfrom IPython.display import Image as show_gif","0b39fec9":"class ImageToGIF:\n    \"\"\"Create GIF without saving image files.\"\"\"\n    def __init__(self,\n                 size=(600, 400), \n                 xy_text=(80, 10),\n                 dpi=100, \n                 cmap='CMRmap'):\n\n        self.fig = plt.figure()\n        self.fig.set_size_inches(size[0] \/ dpi, size[1] \/ dpi)\n        self.xy_text = xy_text\n        self.cmap = cmap\n        \n        self.ax = self.fig.add_axes([0, 0, 1, 1])\n        self.ax.set_xticks([])\n        self.ax.set_yticks([])\n        self.images = []\n \n    def add(self, *args, label, with_mask=True):\n        \n        image = args[0]\n        mask = args[-1]\n        plt.set_cmap(self.cmap)\n        plt_img = self.ax.imshow(image, animated=True)\n        if with_mask:\n            plt_mask = self.ax.imshow(np.ma.masked_where(mask == False, mask),\n                                      alpha=0.7, animated=True)\n\n        plt_text = self.ax.text(*self.xy_text, label, color='red')\n        to_plot = [plt_img, plt_mask, plt_text] if with_mask else [plt_img, plt_text]\n        self.images.append(to_plot)\n        plt.close()\n \n    def save(self, filename, fps):\n        animation = anim.ArtistAnimation(self.fig, self.images)\n        animation.save(filename, writer='imagemagick', fps=fps)\n        \n        ","816cffee":"dicom2nifti.convert_directory(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00000\/T2w\", \".\/\")","80713bee":"sample_filename = \".\/5_t2w.nii.gz\"","80138241":"sample_img = nib.load(sample_filename)\nsample_img = np.asanyarray(sample_img.dataobj)\n#print(\"img shape ->\", sample_img.shape)\nheight, width, depth= sample_img.shape\nprint(f\"The image object has the following dimensions: height: {height}, width:{width}, depth:{depth}\")","77789fbd":"maxval = 409\ni = np.random.randint(0, maxval)\nprint(f\"Plotting Layer {i}\")\nplt.imshow(sample_img[:, :, i], cmap='gray')\nplt.axis('off');","2d560bf1":"sample_data_gif = ImageToGIF()\nlabel = sample_filename.replace('\/', '.').split('.')[-2]\nfilename = f'{label}_3d_2d.gif'\n\nfor i in range(sample_img.shape[0]):\n    image = np.rot90(sample_img[i])\n    #mask = np.clip(np.rot90(sample_mask[i]), 0, 1)\n    sample_data_gif.add(image,label=f'{label}_{str(i)}')\n \nsample_data_gif.save(filename, fps=15)\nshow_gif(filename, format='png')","76b34430":"dicom2nifti.convert_directory(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00000\/FLAIR\", \".\/\")","7d0f7f17":"sample_filename = \".\/4_flair.nii.gz\"","28bfca2f":"sample_img = nib.load(sample_filename)\nsample_img = np.asanyarray(sample_img.dataobj)\n#print(\"img shape ->\", sample_img.shape)\nheight, width, depth= sample_img.shape\nprint(f\"The image object has the following dimensions: height: {height}, width:{width}, depth:{depth}\")","b33336dd":"maxval = 400\ni = np.random.randint(0, maxval)\nprint(f\"Plotting Layer {i}\")\nplt.imshow(sample_img[:, :, i], cmap='gray')\nplt.axis('off');","4a827a83":"sample_data_gif = ImageToGIF()\nlabel = sample_filename.replace('\/', '.').split('.')[-2]\nfilename = f'{label}_3d_2d_2.gif'\n\nfor i in range(sample_img.shape[0]):\n    image = np.rot90(sample_img[i])\n    #mask = np.clip(np.rot90(sample_mask[i]), 0, 1)\n    sample_data_gif.add(image,label=f'{label}_{str(i)}')\n \nsample_data_gif.save(filename, fps=15)\nshow_gif(filename, format='png')","83835a6c":"# T2w","b2f3893e":"This is a gif of the MRI scans","547654a6":"Next let's see how the FLAIR view of the MRI scans look like ","e477f7a3":"# FLAIR","23e3103f":"# Dicom to nifti","fd4f8cc3":"Here we will picking a random layer of the MRI scan","d464c548":"Hope this notebook was helpful to show you how our data looks like and what our model will exactly be seeing ","ca3c30be":"Now let's see how the MRI scans look like, we will be starting with T2w","fad69ba4":"Here we are basically converting a series of dicom files into a nifti file with each layer of the MRI scans stacked on top of each other "}}