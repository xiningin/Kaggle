{"cell_type":{"d3652f9f":"code","6522de8c":"code","27127cff":"code","d7cbe074":"code","2cc62f1e":"code","b703337d":"code","271c40d1":"code","34c671f2":"code","56b54f5e":"code","8792ec0e":"code","18e199d6":"code","6cbeb8f8":"code","48dfc70c":"code","62a48b1e":"code","26650ecf":"code","c67e48d3":"code","1fcbd6f1":"code","8f8841ef":"code","a358bc5e":"code","b5fa8cce":"code","4f9591b1":"code","a3fb70c6":"code","1d57798c":"code","af81350d":"code","2fafedd2":"code","3cbf0332":"code","fb0ee972":"code","a634ed99":"code","14d3f758":"code","67f337f5":"code","b3de441f":"code","af6cc77d":"markdown","d9ce2e3a":"markdown","6e813203":"markdown","481cd826":"markdown","6d076c57":"markdown","3295f9d1":"markdown"},"source":{"d3652f9f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6522de8c":"#verilerin okunmas\u0131\ndata = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")\ndata2 = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\") # missing data i\u00e7in kullan\u0131lan db","27127cff":"# veri setinde yeralan future'lar\u0131n incelenmei\ndata.columns","d7cbe074":"# future'lar\u0131n veri tiplerinin incelenmesi\ndata.info()","2cc62f1e":"#verinin \u00f6n izlemesi\ndata.head(10)","b703337d":"# future'lar aras\u0131ndaki korelasyonun incelenmesi\ndata.corr()","271c40d1":"# korelasyonlar\u0131n line plot kullan\u0131larak g\u00f6rselle\u015ftirilmesi\ndata.plot( kind = 'line', x = \"target\", y = \"cp\", color = 'g', linewidth = '1', figsize=(12,6) )\nplt.xlabel('target')\nplt.ylabel('c p')\nplt.title('target-cp korelasyon grafigi')\nplt.show()\n","34c671f2":"# cinsiyet frekans\u0131n\u0131 histogram ile g\u00f6rselle\u015ftirilmesi\ndata.sex.plot(kind = 'hist',bins = 5, figsize=(12,6))\nplt.xlabel('cinsiyet 0:Kad\u0131n 1:Erkek')\nplt.ylabel('frekans - say\u0131')\nplt.title('Cinsiyet - frekans da\u011f\u0131l\u0131m\u0131')\nplt.show()","56b54f5e":"# scatter plot kullan\u0131m\u0131\nplt.figure(figsize=(12,6))\nplt.scatter(data.age, data.trestbps, s=30)\nplt.scatter(data.age, data.thalach, s=20)\nplt.xlabel('ya\u015f')\nplt.ylabel('trestbps - thalch')\nplt.title('scatter plot')\nplt.legend()\nplt.show()","8792ec0e":"yasFiltresi = data[\"age\"] > 65 # 65 ya\u015f \u00fczerindeki hastalar\u0131n g\u00f6r\u00fcnt\u00fclenmesi\ncpFiltresi = data[\"cp\"] > 2 # g\u00f6g\u00fcs agr\u0131 tipi 3 olanlar\u0131 filterele\n\ndata[yasFiltresi & cpFiltresi] # 65 yas \u00fczeri g\u00f6g\u00fcs agr\u0131 tipi 0 ve 1 olan hastalar\u0131n filtrelenmesi","18e199d6":"# 65 yas \u00fczerindeki hasta say\u0131s\u0131n\u0131n \u00f6\u011frenilmesi\n\nhastaSayisi = 0\nfor each in data.age:\n    if each > 65 :\n        hastaSayisi += 1\nprint('65 ya\u015f \u00fczeri hasta say\u0131s\u0131 = ',hastaSayisi)","6cbeb8f8":"# fonksiyon tan\u0131mlama\n\ndef getYoungestPatientInfo():\n    \"\"\" This function returns information who is the youngest patient \"\"\"\n    age = 100;\n    \n    for each in data.age:\n        if each < age:\n            age = each\n    \n    return data[data.age == age]\n","48dfc70c":"getYoungestPatientInfo() # tan\u0131mlanan fonksiyonun \u00e7\u0131kt\u0131s\u0131\n","62a48b1e":"# %% Nested function\n\ndef powerRes(i,r):\n    \"\"\" calculete power of the resistor \"\"\"\n    \"\"\" i = current(A) , r = resistor(ohm) \"\"\"\n    \n    def square():\n        return i**2\n    \n    return square()*r \n\nprint(\"power:\",powerRes(2,50))  # calculate power for i=2A,r=50ohm","26650ecf":"# %% Default and Flexiable function\n    \ndef effectiveValue(Vm,k=0.707):\n    \"\"\" calculate effective value of the alternative voltage \"\"\"\n    return Vm*k\n    \n\ndef power(i,v,*cosf):\n    \"\"\" calculate the power \"\"\"\n    cos = 1\n    \n    for each in cosf:\n        if each != 0:\n            cos = each\n   \n    return i*v*cos\n\n\nprint(\"Effective value for 380v is : \",effectiveValue(380),\"Volt\")\nprint(\"power for 2A and 220V :\",power(2,220), \"Watt\")\nprint(\"power for 2A , 220V and cosfi 0.8 :\",power(2,220,0.8), \"Watt\")","c67e48d3":"# %% lamda function\n    \nvoltage = lambda i,r:i*r\n\n# calculate voltage for i=2A , r= 50 ohm \nprint(voltage(2,50),\"Volt\")","1fcbd6f1":"# %% Anonymous function\n\nres_list = [4,6,2]\nresult = map(lambda i:12\/i,res_list)\n\nprint(list(result))","8f8841ef":"# Iteration\nword = \"Python\"\niterWord = iter(word)\nprint(next(iterWord))\nprint(*iterWord)","a358bc5e":"# Zip\n\nlistEng = [\"noun\",\"verb\",\"adverb\",\"adjective\"]\nlistTur = [\"isim\",\"fiil\",\"zarf\",\"s\u0131fat\"]\n\ndictionary = zip(listEng,listTur)\nprint(dictionary)\nwordList = list(dictionary)\nprint(wordList)","b5fa8cce":"# Unzip\nunzip = zip(*wordList)\nlistEnglish,listTurkish = list(unzip)\nprint(listEnglish)\nprint(listTurkish)\n","4f9591b1":"# List Comprehension\n\nnumbers = [1,2,3,4,5]\n\nsquareOfnumbers = [ each**2 for each in numbers]\n\nprint(\"Numbers : \",numbers)\nprint(\"Square of the numbers : \",squareOfnumbers)","a3fb70c6":"# Conditionals on iterable\n\nnumbers = [1,2,3,4,5]\n\ntypeOfNumbers = [\"even\" if n%2==0 else \"odd\"  for n in numbers]\n\nprint(\"Numbers are :\",numbers)\nprint(\"Type of the numbers are : \",typeOfNumbers)\n","1d57798c":"# list comprehension in the dataset\n\n# The dataset includes sex type  1 or 0 therefore we will add new future as male or female.\n\ndata[\"gender\"] = [ \"male\" if each == 1 else \"female\"  for each in data.sex]\n\ndata.loc[:5,[\"sex\",\"gender\"]]","af81350d":"# value counts \n# data i\u00e7erisinde hangi ya\u015ftan ka\u00e7 hastan\u0131n oldu\u011fununun value_counts() metodu ile elde edilmesi\n\nprint(data.age.value_counts())","2fafedd2":"# rastegele say\u0131lardan liste olu\u015fturup bu listenin median,lower quantierQ1, upper quantierQ3 incelenmesi\n\nimport random \nimport math\n\nliste = list()\n\nfor i in range(1,12):\n    liste.append(random.randint(1,100)) # 1-100 aras\u0131nda rastgele 11 say\u0131 olu\u015ftur\n\nliste.sort() # listeyi s\u0131rala\nmed = math.floor(len(liste)\/2)\n\nprint(\"Sayilar : \",liste)\nprint(\"Median : \",liste[med]) # medyan \nprint(\"Lower Quantlier Q1 : \", liste[math.floor(med\/2)]) # Q1\nprint(\"Upper Quantlier Q3 : \", liste[med + math.ceil(((len(liste)-1) - med)\/2) ]) #Q3\n\n","3cbf0332":"# veri seti i\u00e7erisindeki say\u0131sal de\u011ferlerin istatiksel \u00f6zellikleri describe() fonksiyonu ile g\u00f6r\u00fcnt\u00fclenmesi\n\ndata.describe()\n","fb0ee972":"# boxplot kullan\u0131m\u0131 : Quantlier de\u011ferlerini g\u00f6rselle\u015ftirerek analiz yapmay\u0131 kolayla\u015ft\u0131r\u0131r.\ndata.boxplot(column = 'age')","a634ed99":"# melt kullan\u0131m\u0131 : veri g\u00f6rselle\u015ftirmede kolayl\u0131k sa\u011flayacak\n\ndata2 = data.head()\n\nmelted = pd.melt(data2,id_vars = 'age', value_vars = ['cp','chol'])\nmelted\n","14d3f758":"# concatenating data\n\n# iki tane dataframe'i birle\u015ftirmek i\u00e7in kullan\u0131l\u0131r.\n\ndf_1 = data.head()\ndf_2 = data.tail()\n\n# vertical : dikey yani yukar\u0131dan a\u015fa\u011f\u0131ya birle\u015ftirme axis=0\n\nconc_data_row = pd.concat([df_1,df_2],axis=0,ignore_index=True)\n\n\n# horizantal : yatay birle\u015ftirme\n\nd1 = data[\"age\"].head()\nd2 = data[\"sex\"].head()\n\nconc_data_col = pd.concat([d1,d2],axis=1)\n\nconc_data_row","67f337f5":"\n# veri tipini de\u011fi\u015ftirme\n\ndata.dtypes # veri setindeki future'lar\u0131n veri tipini verir.\n\n# veri seti i\u00e7erisindeki target future'\u0131 int olarak belirtilmi\u015f \n# ancak bu veri sadece 0-1 de\u011ferleri alm\u0131\u015ft\u0131r \n# bu veri tipini int dan bool olarak de\u011fi\u015ftirdik.\n\ndata['target'] = data['target'].astype('bool') # convert int to bool\n\ndata.dtypes","b3de441f":"# missing data\n\n# dataset i\u00e7erinde Province\/State future'da bulunan missing datalar\u0131n temizlenmesi \ndf = data2[\"Province\/State\"].dropna(inplace=True)\n\nassert data2[\"Province\/State\"].notnull().all() # yapt\u0131\u011f\u0131m\u0131z i\u015flemi kontrol etme. e\u011fer ba\u015far\u0131l\u0131ysa hata vermeyecek","af6cc77d":"# 2.B\u00f6l\u00fcm Python Data Science Toolbox","d9ce2e3a":"# 3.B\u00f6l\u00fcm Cleaning Data","6e813203":"# D\u00f6ng\u00fc kullan\u0131m\u0131","481cd826":"# korelasyonlar\u0131n incelenmesi\n* **oldpeak - slope** aras\u0131nda -0.577 negatif \n* **target - cp aras\u0131nda** 0.433 pozitif korelasyon oldu\u011fu g\u00f6r\u00fclm\u00fc\u015ft\u00fcr.\n","6d076c57":"# Fonksiyon tan\u0131mlama ","3295f9d1":"# Veri filtreleme i\u015flemleri"}}