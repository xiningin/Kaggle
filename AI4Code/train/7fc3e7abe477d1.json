{"cell_type":{"5195017d":"code","2eed2b26":"code","e0301fad":"code","cece98fc":"code","492601d8":"code","89a50e57":"code","8f7490c7":"code","108f7501":"code","4bd184f2":"code","4099c895":"code","967afa26":"code","7b6e747d":"code","7d04669f":"code","534d0bb7":"code","c529b330":"code","37c852c8":"code","7fcb7925":"code","4b8f113f":"code","22d389df":"code","06a607c0":"code","e7cadf56":"code","18291b78":"code","ab24b4a9":"code","4618c1bc":"code","02f0120b":"code","a5ce4e73":"code","dd950971":"code","10b70b2a":"code","e74c3436":"code","4c602554":"code","a9f893b4":"code","db9f726b":"code","edea70e6":"code","3e389335":"markdown","a4de7e6e":"markdown","93d987aa":"markdown","4a3a4977":"markdown","a5777d6f":"markdown","8c1a627b":"markdown","0b16a5a3":"markdown","a6011839":"markdown","d1d65cb7":"markdown"},"source":{"5195017d":"from sklearn.preprocessing import RobustScaler\nimport pandas as pd\nimport torch\nimport torch.optim as optim\nimport numpy as np\nimport random\ntorch.manual_seed(1)","2eed2b26":"seaice_data = pd.read_csv('..\/input\/prediction-of-sea-ice\/seaice_train.csv')","e0301fad":"seaice_data","cece98fc":"from datetime import datetime as dt\nfrom dateutil.parser import parse\nimport time","492601d8":"def toYearFraction(date):\n    def sinceEpoch(date): # returns seconds since epoch\n        return time.mktime(date.timetuple())\n    s = sinceEpoch\n\n    year = date.year\n    startOfThisYear = dt(year=year, month=1, day=1)\n    startOfNextYear = dt(year=year+1, month=1, day=1)\n    yearElapsed = s(date) - s(startOfThisYear)\n    yearDuration = s(startOfNextYear) - s(startOfThisYear)\n    # \ucd08\ub2e8\uc704\ub85c 1\ub144 \/ \ud604\uc7ac\ub0a0\uc9dc \uc758 \ube44\uc728 \n    fraction = yearElapsed\/yearDuration\n    return date.year + fraction","89a50e57":"train_decimal_year = []\n\ntrain_decimal_year.append(toYearFraction(parse(\"1978-11-15\")))\ntrain_decimal_year.append(toYearFraction(parse(\"1978-12-15\")))\n\nfor i in range(1979, 2019):\n  if i == 2016:\n    continue\n  for m in range(1 , 13):\n    flag = int(m \/ 10)\n    if flag == 0:\n      date = (\"{}-0{}-15\".format(i,m))\n    else:\n      date = (\"{}-{}-15\".format(i,m))\n    train_decimal_year.append(toYearFraction(parse(date)))\n\ntrain_decimal_year.append(toYearFraction(parse(\"2019-01-15\")))\ntrain_decimal_year.append(toYearFraction(parse(\"2019-02-15\")))\ntrain_decimal_year.append(toYearFraction(parse(\"2019-03-15\")))\ntrain_decimal_year.append(toYearFraction(parse(\"2019-04-15\")))\ntrain_decimal_year.append(toYearFraction(parse(\"2019-05-15\")))","8f7490c7":"train_decimal_year = np.array(train_decimal_year)\ntrain_decimal_year.shape","108f7501":"seaice_data = seaice_data.drop(['month'],axis = 1)","4bd184f2":"for i in range(475):\n  seaice_data.iloc[i,0] = train_decimal_year[i]","4099c895":"seaice_data.tail(30)\nseaice_data.iloc[447:475]","967afa26":"x_carbon = np.array(seaice_data.iloc[0:447,0:4])\nx_seaice = np.array(seaice_data.iloc[0:447,5])\ny_carbon = np.array(seaice_data.iloc[0:447,4])","7b6e747d":"x_carbon","7d04669f":"scaler = RobustScaler()\nx_carbon_s = scaler.fit_transform(x_carbon)","534d0bb7":"x_carbon_s","c529b330":"x_ctrain = torch.FloatTensor(x_carbon_s)\ny_ctrain = torch.FloatTensor(np.transpose(y_carbon[np.newaxis]))","37c852c8":"W = torch.zeros((4,1),requires_grad=True)\nb = torch.zeros(1,requires_grad=True)","7fcb7925":"import torch.nn.functional as F\noptimizer = optim.Adam([W,b], lr = 0.1)\nloss = torch.nn.MSELoss()\n\nnb_epochs = 100000\nfor epochs in range(nb_epochs + 1):\n  h = x_ctrain.matmul(W)+ b\n  cost = loss(h,y_ctrain)\n  optimizer.zero_grad()\n  cost.backward()\n  optimizer.step()\n\n  if epochs % 1000 == 0:\n    print(\"epochs {}\/{:4d}, cost {:.6f}\".format(epochs, nb_epochs, cost.item()))","4b8f113f":"carbon_x_test = np.array(seaice_data.iloc[447:475,0:4])\ncarbon_xs_test = scaler.fit_transform(carbon_x_test)\ncarbon_xs_test","22d389df":"x_ctest = torch.FloatTensor(carbon_xs_test)\ncarbon_pred = x_ctest.matmul(W)+b\ncarbon_pred = carbon_pred.detach().numpy()","06a607c0":"carbon_pred","e7cadf56":"index = 0\nfor i in range(447,475):\n   seaice_data.iloc[i,4] = carbon_pred[index]\n   index = index + 1","18291b78":"seaice_data","ab24b4a9":"x_data = np.array(seaice_data.iloc[:,0:5])\nxs_data = scaler.fit_transform(x_data)\ny_data = np.transpose(np.array(seaice_data.iloc[:,5])[np.newaxis])","4618c1bc":"x_train = torch.FloatTensor(xs_data)\ny_train = torch.FloatTensor(y_data)","02f0120b":"x_W = torch.zeros((5,1), requires_grad=True)\nx_b = torch.zeros(1, requires_grad=True)","a5ce4e73":"optimizer_1 = optim.Adam([x_W,x_b], lr = 1e-3)\nloss = torch.nn.MSELoss()\n\nnb_epochs = 50000\nfor epochs in range(nb_epochs + 1):\n  h_1 = x_train.matmul(x_W)+ x_b\n\n  cost_1 = loss(h_1,y_train)\n  optimizer_1.zero_grad()\n  cost_1.backward()\n  optimizer_1.step()\n\n  if epochs % 1000 == 0:\n    print(\"epochs {}\/{:4d}, cost {:.6f}\".format(epochs, nb_epochs, cost_1.item()))","dd950971":"test_data = pd.read_csv('..\/input\/prediction-of-sea-ice\/seaice_test.csv')\ntest_data","10b70b2a":"test_decimal_year = []\n\nfor m in range(1 , 13):\n  flag = int(m \/ 10)\n  if flag == 0:\n    date = (\"2016-0{}-15\".format(m))\n  else:\n    date = (\"2016-{}-15\".format(m))\n  test_decimal_year.append(toYearFraction(parse(date)))\n\ntest_decimal_year = np.array(test_decimal_year )\ntest_decimal_year","e74c3436":"test_data = test_data.drop(['month'],axis = 1)\n\nfor i in range(12):\n  test_data.iloc[i,0] = test_decimal_year[i]","4c602554":"tests_data = scaler.fit_transform(np.array(test_data))\n\ntests_data = torch.FloatTensor(tests_data)\nprint(tests_data)","a9f893b4":"predict_h = tests_data.matmul(x_W) + x_b\npredict_h","db9f726b":"month_ = np.array(range(12)) +1\nmonth_ = np.transpose(month_[np.newaxis])\npredict_h = predict_h.detach().numpy()\nprint(month_.shape)\nprint(predict_h.shape)","edea70e6":"sol_ = np.hstack([month_,predict_h])\nsol_","3e389335":"**<h1 id=\"two\" style=\"color:purple;\">* 2\ucc28 \ud559\uc2b5 : Carbon \uacfc \uc694\uc778\ub4e4\uc5d0 \ub300\ud55c 2016\ub144\uc758 \ud574\ube59 \uc608\uce21<\/h1>**\n","a4de7e6e":"**<h1 id=\"one\" style=\"color:purple;\">* 1\ucc28 \ud559\uc2b5 : Carbon \uc758 Nan \uac12 \uc608\uce21 <\/h1>**\n\n#### \ub370\uc774\ud130 \uc815\uaddc\ud654 ( Car, Cow, GDP )","93d987aa":"**<h1 id=\"two_two\" style=\"color:purple;\">- \uc608\uce21\ub41c 2016\ub144\uc758 \ud574\ube59\uc758 \ud06c\uae30<\/h1>**","4a3a4977":"**<h1 id=\"zero\" style=\"color:purple;\">* \ub144,\ub2ec = \uc18c\uc218\uc810 \ub144\ub2ec\uc778 \ud558\ub098\uc758 \ubcc0\uc218\ub85c \ubcc0\ud658 <\/h1>**\n\n#### Datetime(object) -> Decimal\/float years (float)","a5777d6f":"---\n<b><a href=\"#zero\">* \ub144,\ub2ec = \uc18c\uc218\uc810 \ub144\ub2ec\uc778 \ud558\ub098\uc758 \ubcc0\uc218\ub85c \ubcc0\ud658<\/a><br><\/b>\n\n<b><a href=\"#one\">* 1\ucc28 \ud559\uc2b5 : Carbon \uc758 Nan \uac12 \uc608\uce21<\/a><br><\/b>\n&emsp;&emsp;<a href=\"#one_one\">- NAN \uac12\uc5d0 \ud574\ub2f9\ud558\ub294 \uc608\uce21\ub41c \ud0c4\uc18c \uac12 <\/a><br>\n\n<b><a href=\"#two\">* 2\ucc28 \ud559\uc2b5 : Carbon \uacfc \uc694\uc778\ub4e4\uc5d0 \ub300\ud55c 2016\ub144\uc758 \ud574\ube59 \uc608\uce21<\/a><br><\/b>\n&emsp;&emsp;<b><a href=\"#two_two\">- \uc608\uce21\ub41c 2016\ub144\uc758 \ud574\ube59\uc758 \ud06c\uae30<\/a><br><\/b>\n\n---\n\n\ucf54\ub4dc\ub97c \ucc38\uace0\ud558\uc5ec \uc88b\uc740 \uc9c0\uc2dd\uc744 \uc5bb\uc73c\uc168\ub2e4\uba74 upvoted \ubd80\ud0c1\ub4dc\ub9bd\ub2c8\ub2e4. : )","8c1a627b":"# \ubcf8\uaca9\uc801\uc73c\ub85c 2016\ub144\uc758 \ud0c4\uc18c\uc640 \uc694\uc778\ub4e4\uc5d0 \uc758\ud55c \ud574\ube59\ud06c\uae30\ub97c \uc608\uce21\ud574\ubcf4\uc790\n\n## Test \ub370\uc774\ud130 \uc815\uaddc\ud654","0b16a5a3":"# Baseline(2.35395)","a6011839":"<h1 style=\"font-family: 'Garamond';\"> <b><i>Prediction Of Sea Ice - How to get baseline score(2.35395)<\/i><\/b><\/h1>","d1d65cb7":"**<h1 id=\"one_one\" style=\"color:purple;\">- NAN \uac12\uc5d0 \ud574\ub2f9\ud558\ub294 \uc608\uce21\ub41c \ud0c4\uc18c \uac12  <\/h1>**\n \n"}}