{"cell_type":{"50fdeb59":"code","1c0e75b3":"code","a97eac4f":"code","bec19dd9":"code","f180b9b7":"code","4c184b7f":"code","4c4d144c":"code","807b66a4":"code","8aa853da":"code","5a11d5e5":"code","40834748":"code","29ed7fc9":"code","e9ccfcdf":"code","d4d05088":"code","34347fcb":"code","8cc78706":"code","9a8f312e":"code","422b3f43":"code","c6915998":"code","25f97808":"markdown","cc1fbb71":"markdown","33e553fb":"markdown","4a4be572":"markdown","53b22a6c":"markdown","9e955146":"markdown","a0022c94":"markdown","7f1e2cbf":"markdown","41610c71":"markdown"},"source":{"50fdeb59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","1c0e75b3":"GoTData = pd.read_csv(\"..\/input\/character-deaths.csv\")","a97eac4f":"GoTData.info()","bec19dd9":"GoTData.describe() #Mathematical statistics about the data.","f180b9b7":"GoTData.corr() # We can see in this code's output that Book of Death and Death Year are directly proportional.","4c184b7f":"f,ax = plt.subplots(figsize=(17,17))\nsns.heatmap(GoTData.corr(),annot=True,linewidths=.5,fmt = '.1f',ax=ax)\nplt.show()","4c4d144c":"GoTData.head(6)","807b66a4":"GoTData.tail(6)","8aa853da":"GoTData.columns","5a11d5e5":"GoTData[\"Book of Death\"].plot(kind='line',color = 'purple',label = \"Book of Death\", linewidth=1,alpha=1,grid=True,linestyle= \"-.\")\nGoTData[\"Death Chapter\"].plot(kind=\"line\",color = \"blue\", label = \"Death Chapter\",linewidth=1,alpha=1,grid = True,linestyle = \":\")\nplt.legend(loc=\"upper left\")\nplt.xlabel(\"X Axis\")\nplt.ylabel(\"Y Axis\")\nplt.title(\"Line Plot Visualization\")\nplt.show()","40834748":"GoTData.plot(kind = \"scatter\",x= \"Book of Death\",y=\"Death Chapter\",alpha=.5,color=\"black\")\nplt.xlabel(\"Death Chapter\")\nplt.ylabel(\"Book of Death\")\nplt.title(\"Book of Death and Death Chapter 's Scatter Plot\")","29ed7fc9":"GoTData[\"Death Chapter\"].plot(kind=\"hist\",bins=40,figsize=(10,10))\nplt.xlabel(\"Death Chapter\")\nplt.ylabel(\"Frequency\")\nplt.show()","e9ccfcdf":"# Cleaning plot\nGoTData[\"Book of Death\"].plot(kind=\"hist\",bins=10)\nplt.clf()","d4d05088":"GoTCharacters = GoTData[\"Name\"]","34347fcb":"ChName = \"Ygritte\"\nfor each in GoTCharacters:\n    if each == ChName:\n        print(ChName + \" is a Game of Thrones Character\")","8cc78706":"print(type(GoTCharacters)) #GoTCharacters column data frame is a series \nprint(type(GoTData[[\"Name\"]]))","9a8f312e":"BiC42 = (GoTData[\"Book Intro Chapter\"]<92) & (GoTData[\"Book Intro Chapter\"]>75)\nGoTData[BiC42]  \n# OR We can use logical_and like this\nGoTData[np.logical_and((GoTData[\"Book Intro Chapter\"]>75), (GoTData[\"Nobility\"]==1))]","422b3f43":"# Looking for characters' rankings\nfor index,value in enumerate(GoTData[\"Name\"]):\n    print(value,\"is the\",index+1,\". character of the Game of Thrones list.\")\n","c6915998":"for index,value in GoTData[['Book Intro Chapter']][0:1].iterrows():\n    print(index,\" : \",value)","25f97808":"Scatter Plot","cc1fbb71":"Histogram","33e553fb":"To check for a character whether in Game of Thrones or not","4a4be572":"Importing CSV file\n\n","53b22a6c":"Line Plot ","9e955146":"First 6 values of the dataset\n","a0022c94":"Visualization of correlation","7f1e2cbf":"Last 6 values of the dataset","41610c71":"Filtering"}}