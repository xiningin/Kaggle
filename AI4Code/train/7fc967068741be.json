{"cell_type":{"7af55ffb":"code","f1be83a3":"code","6d7be3c0":"code","bd7f512f":"code","45fde89b":"code","f989460e":"code","e7eeee5d":"code","5b3cdc99":"code","0e3838f7":"code","197168d7":"code","15081cea":"code","06987408":"code","53db885f":"code","f650b3b4":"code","9ed2ecb9":"code","5bd41c52":"code","e7e474bc":"code","5b832e9a":"code","02b71aa0":"code","ba431866":"code","20c07181":"code","add5fdcf":"code","fabf2726":"code","b38c2b2c":"code","869b8286":"markdown","f6ac8c93":"markdown","27cc9d83":"markdown","3ae18c06":"markdown","07b78b4d":"markdown","8853443a":"markdown","801eee08":"markdown","a4f08b8e":"markdown","8484036a":"markdown","5432135e":"markdown","fcd50946":"markdown","a89e7a33":"markdown","0b80e34e":"markdown","a4a13ff0":"markdown","c8f2561c":"markdown","dc9cf4fa":"markdown","fbabf4e9":"markdown"},"source":{"7af55ffb":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f1be83a3":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6d7be3c0":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-nov-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-nov-2021\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-nov-2021\/sample_submission.csv\")","bd7f512f":"train","45fde89b":"test","f989460e":"submission","e7eeee5d":"sns.displot(train.target)","5b3cdc99":"train.target.value_counts()","0e3838f7":"target = train.target\n\ntrain_copy = train.copy()\n\ncombi = train_copy.drop('target', axis=1).append(test)\ncombi","197168d7":"combi.isnull().sum().sum()","15081cea":"combi.info()","06987408":"combi.describe()","53db885f":"combi.drop('id', axis=1, inplace=True)\ncombi","f650b3b4":"combi = (combi - combi.min()) \/ (combi.max() - combi.min())\ncombi","9ed2ecb9":"#combi = (combi - combi.mean()) \/ combi.std()\n#combi","5bd41c52":"y = target\nX = combi[: len(train)]\nX_test = combi[len(train) :]","e7e474bc":"from sklearn.feature_selection import SelectPercentile, chi2\n\ntransformer = SelectPercentile(chi2, percentile=25)\n\nX = transformer.fit_transform(X, y)\nX_test = transformer.transform(X_test)\n\nX.shape, X_test.shape","5b832e9a":"from sklearn.model_selection import train_test_split\n\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.10, random_state=42)\nX_train.shape, X_val.shape, y_train.shape, y_val.shape","02b71aa0":"#from sklearn.model_selection import GridSearchCV\n#from sklearn.experimental import enable_hist_gradient_boosting\n#from sklearn.ensemble import HistGradientBoostingClassifier\n\n\n#HGB = HistGradientBoostingClassifier()\n\n#parameters = {'learning_rate':[.01, .1, 1, 10], 'max_iter':[100, 1000, 5000, 10000]}\n\n#clf = GridSearchCV(HGB, parameters).fit(X_train, y_train)\n\n#print(clf.best_params_)","ba431866":"from sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingClassifier\n\nmodel = HistGradientBoostingClassifier(learning_rate=.1, max_iter=10000, random_state=42).fit(X_train, y_train)\nprint(model.score(X_train, y_train))","20c07181":"y_pred = model.predict(X_val)\nprint(model.score(X_val, y_val))","add5fdcf":"from sklearn.metrics import confusion_matrix\n\nprint(confusion_matrix(y_val, y_pred))","fabf2726":"prediction = model.predict(X_test)","b38c2b2c":"submission.target = prediction\n\nsubmission.to_csv('submission.csv', index=False)\nsubmission = pd.read_csv(\"submission.csv\")\nsubmission\n","869b8286":"Analyse combi","f6ac8c93":"Feature selection","27cc9d83":"Drop target and create combined dataframe","3ae18c06":"Define X, y and X_test","07b78b4d":"Select model","8853443a":"For this competition, you will be predicting a binary target based on 100 feature columns given in the data. All columns are continuous.\n\nThe data is synthetically generated by a GAN that was trained on a real-world dataset used to identify spam emails via various extracted features from the email.","801eee08":"Normalise","a4f08b8e":"Standardise","8484036a":"Predict on validation set","5432135e":"Split","fcd50946":"Predict on X_test","a89e7a33":"Drop ID because it adds no value to prediction","0b80e34e":"Analyse target","a4a13ff0":"Check for null values","c8f2561c":"Confusion matrix","dc9cf4fa":"Prepare prediction for submission","fbabf4e9":"Import, load and read"}}