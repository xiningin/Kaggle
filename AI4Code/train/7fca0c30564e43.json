{"cell_type":{"68a96440":"code","07260b20":"code","3f36c735":"code","a145e16d":"code","5a37d3c4":"code","578169fc":"code","c736d84d":"code","d4192412":"code","7cc5f379":"code","b949b263":"code","52656602":"code","31f23604":"code","c7d3af53":"code","0a62a7fa":"code","ff84180c":"code","45e666ec":"code","f9ff1550":"code","55844fde":"code","e32355ec":"code","e8e44b55":"code","cde5945a":"code","fa84b564":"markdown"},"source":{"68a96440":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","07260b20":"train = pd.read_csv('\/kaggle\/input\/quora-insincere-questions-classification\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/quora-insincere-questions-classification\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/quora-insincere-questions-classification\/sample_submission.csv')","3f36c735":"display(train.head())\ndisplay(test.head())\ndisplay(sub.head())","a145e16d":"display(train.info())\ndisplay(test.info())\ndisplay(sub.info())","5a37d3c4":"import pandas_profiling as pp\npp.ProfileReport(train)","578169fc":"import pandas_profiling as pp\npp.ProfileReport(test)","c736d84d":"train.target.value_counts()","d4192412":"# Checking if it is balanced or unbalanced \ntrain['target'].value_counts()\n\ntrain['target'].value_counts() * 100 \/ len(train)\n\n\nsns.countplot(x='target', data=train, palette='viridis')","7cc5f379":"import nltk\nimport string\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\n\nnltk.download('stopwords')\nnltk_stopwords = stopwords.words('english')\n\nwordnet_lemmatizer = WordNetLemmatizer()\n\ndef lemSentence(sentence):\n    token_words = word_tokenize(sentence)\n    lem_sentence = []\n    for word in token_words:\n        lem_sentence.append(wordnet_lemmatizer.lemmatize(word, pos=\"v\"))\n        lem_sentence.append(\" \")\n    return \"\".join(lem_sentence)\n\ndef clean(message, lem=True):\n    # Remove ponctuation\n    message = message.translate(str.maketrans('', '', string.punctuation))\n    \n    # Remove numbers\n    message = message.translate(str.maketrans('', '', string.digits))\n    \n    # Remove stop words\n    message = [word for word in word_tokenize(message) if not word.lower() in nltk_stopwords]\n    message = ' '.join(message)\n    \n    # Lemmatization (root of the word)\n    if lem:\n        message = lemSentence(message)\n    \n    return message","b949b263":"train['question_text_cleaned'] = train.question_text.apply(lambda x: clean(x, True))","52656602":"print(train.head())\nprint(train.info())\nprint(train.describe().T)","31f23604":"from sklearn.model_selection import train_test_split\n# split  data into training and testing sets of 50:50 ratio\n# 50% of test size selected\n# random_state is random seed\nX_train, X_test, y_train, y_test = train_test_split(train['question_text_cleaned'], train['target'], test_size=0.50, random_state=1)","c7d3af53":"from sklearn.linear_model import SGDClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncount_vectorizer = CountVectorizer()\nmodel1 = SGDClassifier(random_state=0)\n\nvectorize_model_pipeline = Pipeline([\n    ('count_vectorizer', count_vectorizer),\n    ('model', model1)])\nvectorize_model_pipeline.fit(X_train, y_train)\npredictions1 = vectorize_model_pipeline.predict(X_test)\nprint('Accuracy :', accuracy_score(y_test, predictions1))\nprint('F1 score :', accuracy_score(y_test, predictions1))","0a62a7fa":"from sklearn.ensemble import RandomForestClassifier\ncount_vectorizer = CountVectorizer()\nmodel2 = RandomForestClassifier()\n\nvectorize_model_pipeline = Pipeline([\n    ('count_vectorizer', count_vectorizer),\n    ('model', model2)])\nvectorize_model_pipeline.fit(X_train, y_train)\npredictions2 = vectorize_model_pipeline.predict(X_test)\n\nprint('Accuracy :', accuracy_score(y_test, predictions2))\nprint('F1 score :', accuracy_score(y_test, predictions2))","ff84180c":"from sklearn.neighbors import KNeighborsClassifier\ncount_vectorizer = CountVectorizer()\nmodel3 = KNeighborsClassifier()\n\nvectorize_model_pipeline = Pipeline([\n    ('count_vectorizer', count_vectorizer),\n    ('model', model3)])\nvectorize_model_pipeline.fit(X_train, y_train)\npredictions3 = vectorize_model_pipeline.predict(X_test)\n\nprint('Accuracy :', accuracy_score(y_test, predictions3))\nprint('F1 score :', accuracy_score(y_test, predictions3))","45e666ec":"from xgboost import XGBClassifier\ncount_vectorizer = CountVectorizer()\nmodel4 = XGBClassifier()\n\nvectorize_model_pipeline = Pipeline([\n    ('count_vectorizer', count_vectorizer),\n    ('model', model4)])\nvectorize_model_pipeline.fit(X_train, y_train)\npredictions4 = vectorize_model_pipeline.predict(X_test)\n\nprint('Accuracy :', accuracy_score(y_test, predictions4))\nprint('F1 score :', accuracy_score(y_test, predictions4))","f9ff1550":"models = pd.DataFrame({\n    'Model': ['SGD Classifier','Random Forest Classifier',\n              'K Neighbors Classifier','XGB Classifier'],\n\n    'F1 score ': [accuracy_score(y_test, predictions1)*100,\n              accuracy_score(y_test, predictions2)*100,\n              accuracy_score(y_test, predictions3)*100, \n              accuracy_score(y_test, predictions4)*100]})\n\nmodels.sort_values(by='F1 score ', ascending=True)","55844fde":"test['question_text_cleaned'] = test.question_text.apply(lambda x: clean(x, True))","e32355ec":"test['prediction'] = vectorize_model_pipeline.predict(test['question_text_cleaned'])","e8e44b55":"final = test[['qid','prediction']]\nfinal.set_index('qid', inplace=True)\nfinal.head()","cde5945a":"final.to_csv('submission.csv')","fa84b564":"\n# <h1 style='background-color:LimeGreen; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 15px 50px;' > Quora Insincere Questions Classification  <\/h1>\n### We used 4 algorithms Classifier\n\n\n* SGD Classifier\n* Random Forest Classifier\n* XGB Classifier\n* KNeighbors Classifier\n\n\n<img src=\"https:\/\/datawhatnow.com\/wp-content\/uploads\/2017\/04\/word_cloud.jpg\" width=\"800px\">\n\n\n\n### File descriptions\n* train.csv - the training set\n* test.csv - the test set\n* sample_submission.csv - A sample submission in the correct format\n* enbeddings\/ - (see below)\n\n\n### Data fields\n* qid - unique question identifier\n* question_text - Quora question text\n* target - a question labeled \"insincere\" has a value of 1, otherwise 0\n\n\n\n### Dataset Link\n\n\n##### [Here](https:\/\/www.kaggle.com\/c\/quora-insincere-questions-classification\/data)"}}