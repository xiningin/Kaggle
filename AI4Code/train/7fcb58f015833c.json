{"cell_type":{"adceac1a":"code","e4450e9d":"code","c09e967e":"code","3f686fd2":"code","cd81125f":"code","4e568a1d":"code","56f89871":"code","2bf5a006":"code","e3b6ac73":"code","076d810a":"code","f6a02c6f":"code","982b87ff":"code","8ad87319":"code","d4599d5a":"code","8df10da2":"code","fa749ee8":"code","ec957f14":"code","972ac15d":"code","c69c67af":"code","6b6bc448":"code","7ae00d74":"code","bee0a5b3":"code","d8838311":"code","13199882":"code","ef9b12bd":"code","5e48dd2c":"code","23ecdae7":"code","1cb2a9a7":"code","cd40e316":"code","1683277d":"code","86dc5b5b":"code","844240f5":"code","eb2a8390":"code","aa363cf1":"code","fd69f761":"code","ab280861":"code","3006ae35":"markdown","4a61fb54":"markdown","7606ff6f":"markdown","277d0ec3":"markdown","d9466b98":"markdown","ec35dd1c":"markdown","a78e0cb9":"markdown","f7dd62f3":"markdown","3f3eb9b5":"markdown","060b2a7e":"markdown","6d27b761":"markdown","141dbb44":"markdown","9b26fb60":"markdown","fa2112fe":"markdown","424bf477":"markdown","c6451ba8":"markdown","8dccaac8":"markdown","09e7c2a7":"markdown"},"source":{"adceac1a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        \n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e4450e9d":"import matplotlib.pyplot as plt","c09e967e":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n\nfootball = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","3f686fd2":"football","cd81125f":"edu = pd.read_csv('\/kaggle\/input\/ict-lesson\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu\n","4e568a1d":"edu.head()","56f89871":"edu.tail()\n","2bf5a006":"edu[10:15]","e3b6ac73":"edu.describe()","076d810a":"edu['Value']","f6a02c6f":"edu[10:15]","982b87ff":"edu['GEO']","8ad87319":"edu.iloc[90:94][['TIME','GEO']]","d4599d5a":"edu[edu['Value'] > 6.5].tail()","8df10da2":"\nedu[edu[\"Value\"].isnull()].head()","fa749ee8":"edu.max(axis = 0)","ec957f14":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","972ac15d":"s = edu[\"Value\"]\/100\ns.head()","c69c67af":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","6b6bc448":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","7ae00d74":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","bee0a5b3":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","d8838311":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","13199882":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","ef9b12bd":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","5e48dd2c":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","23ecdae7":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","1cb2a9a7":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","cd40e316":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","1683277d":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","86dc5b5b":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","844240f5":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","eb2a8390":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","aa363cf1":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","fd69f761":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","ab280861":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","3006ae35":"3. What does the method tail()return?\n\nMethod tail return the last rows in dataframe","4a61fb54":"# 6.8  Rearranging data","7606ff6f":"# 6.6  Sorting data","277d0ec3":"7. What do you observe regarding the parameter ascending=False?\n\nValues are sorted in descending order.","d9466b98":"# **6.1  Reading data**\n","ec35dd1c":"# 7.1  Plotting data","a78e0cb9":"# 6.2  Selecting data","f7dd62f3":"5. What does this index return? What does the first index represent? And the second one?\n\nIndex return rows 90-93 of columns Time and GEO. First index represent indication a range of rows and second one indicate a range of column","3f3eb9b5":"# Getting started with the data science ecosystem\n\nNotebook created according to instruction from website: http:\/\/vargas-solar.com\/data-centric-smart-everything\/hands-on\/getting-started-with-the-data-science-ecosystem\/","060b2a7e":"4. Which measures does the result show? It seems that it shows some default values, can you guess which ones?\n\nIt shows count, mean, std, min, 25%, 50%, 75% and max.\n\nThe default ones are count, mean, std, min and max.","6d27b761":"# 6.5  Manipulating data","141dbb44":"# 6.3  Filtering data","9b26fb60":"# 6.7  Grouping data","fa2112fe":"# 6.9  Ranking data","424bf477":"6. What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?\n\n\nOperation edu['Value']>6.5 produe aSeries - we cannot have access to the columns and neither to the rows  \n[edu['Value']>6.5] produce aDataFrame","c6451ba8":"2. What happens if we give a number as argument to the method head()?\n\nWe can determine by it the number of first displayed rows","8dccaac8":"# 6.4  Filtering missing values","09e7c2a7":"1. Which is the size of the edu DataFrame [rows x colums]\n\nThe size is 384 rows and 3 columns."}}