{"cell_type":{"67d48de8":"code","0af9821c":"code","d2b2963c":"code","26fb3fbd":"code","b60c2756":"code","554e2777":"code","39e705a5":"code","8ec2f055":"code","61fd82f7":"code","9e20c0f8":"code","c6d0f2e2":"code","0b95067b":"code","18589d47":"code","8b5097c5":"code","527ff14e":"code","8f9dc7cc":"code","b841d652":"code","a2de6ccf":"code","45967880":"code","3c30bc8c":"code","c1cd1012":"code","77f206f4":"code","c101bfd2":"code","e9eabca1":"code","038edd7a":"markdown","323c54ca":"markdown","9b1758fd":"markdown","b3ae6537":"markdown","f3a960bc":"markdown"},"source":{"67d48de8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0af9821c":"import os\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime,timedelta\nfrom sklearn.metrics import mean_squared_error\nfrom scipy.optimize import curve_fit\nfrom scipy.optimize import fsolve\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport time\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()","d2b2963c":"df=pd.read_csv('..\/input\/comulative-confirmed-case-in-indonesia\/Comulative Confirmed Case in Indonesia.csv',usecols=['Date','Sulsel'])","26fb3fbd":"df['Kasus']=df['Sulsel'].diff()\ndf.dropna()","b60c2756":"xs = df['Date']\nys = df['Kasus']\ndfx = pd.DataFrame({'x': xs, 'y': ys})\nnn_start='6\/1\/2020'\nfig = go.Figure()\n\nfig.add_scattergl(x=xs, y=dfx.y, name=\"Before New Normal\", line={'color': 'black'})\n\nfig.add_scattergl(x=dfx.x.where(dfx.x>=nn_start), y=ys, name=\"After New Normal\", line={'color': 'red'})\nfig.update_layout(title={'text':\"Kasus Harian Sulsel\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'})\niplot(fig)","554e2777":"df=df.rename(columns={'Sulsel':'Komulatif','Date':'Tanggal'})","39e705a5":"df2 = df.loc[:,['Tanggal','Komulatif']]\nFMT = '%m\/%d\/%Y'\ndate = df2['Tanggal']\ndf2['Tanggal'] = date.map(lambda x : (datetime.strptime(x, FMT) - datetime.strptime(\"3\/20\/2020\", FMT)).days)\ndf2[df2['Tanggal'] == 0] ","8ec2f055":"def logistic_model(x,a,b,c):\n    return c\/(1+np.exp(-(x-b)\/a))","61fd82f7":"x = list(df2.iloc[18:90,0])\ny = list(df2.iloc[18:90,1])\nfit = curve_fit(logistic_model,x,y)","9e20c0f8":"A,B=fit\nA","c6d0f2e2":"errors = [np.sqrt(fit[1][i][i]) for i in [0,1,2]]\nerrors","0b95067b":"a=A[0]+errors[0]\nb=A[1]+errors[1]\nc=A[2]+errors[2]","18589d47":"sol = int(fsolve(lambda x : logistic_model(x,a,b,c) - int(c),b))\nsol","8b5097c5":"pred_x = list(range(max(x),sol))\nplt.rcParams['figure.figsize'] = [7, 7]\nplt.rc('font', size=14)# Real data\nplt.scatter(x,y,label=\"Real data\",color=\"red\")\n\nplt.plot(x+pred_x, [logistic_model(i,a,b,c) for i in x+pred_x], label=\"Logistic model\" )\n\nplt.legend()\nplt.xlabel(\"Days since 20 March 2020\")\nplt.ylabel(\"Total number of infected people\")\nplt.ylim((min(y)*0.9,c*1.1))\nplt.show()","527ff14e":"y_pred_logistic = [logistic_model(i,a,b,c) for i in x]\n\ns1=(np.subtract(y,y_pred_logistic)**2).sum()\ns2=(np.subtract(y,np.mean(y))**2).sum()\nr=1-s1\/s2\nprint(\"R^2 adalah {}\".format(r))","8f9dc7cc":"from datetime import timedelta, date\nfrom datetime import datetime  \nfrom datetime import timedelta \n\nstart_date = \"20\/03\/20\"\n\ndate_1 = datetime.strptime(start_date, \"%d\/%m\/%y\")\n\nend_date = date_1 + timedelta(days=sol)\n\nx=end_date.strftime(\"%d %B %Y\")\n\n\nprint(\"Jumlah kasus maksimal di Sulawesi Selatan menurut prediksi adalah {:.0f}\".format(A[2]+errors[2])) #Penambahan dengan error\nprint(\"Puncak wabah adalah {:.0f} hari setelah 20 Maret 2020 atau {}\". format(sol,x))","b841d652":"xx = list(df2.iloc[18:128,0])\nyy = list(df2.iloc[18:128,1])\nfit = curve_fit(logistic_model,xx,yy)\nyy","a2de6ccf":"AA,BB=fit\nAA","45967880":"errors1 = [np.sqrt(fit[1][i][i]) for i in [0,1,2]]\nerrors1","3c30bc8c":"aa=AA[0]+errors1[0]\nbb=AA[1]+errors1[1]\ncc=AA[2]+errors1[2]","c1cd1012":"sol1 = int(fsolve(lambda xx : logistic_model(xx,aa,bb,cc) - int(cc),bb))\nsol1","77f206f4":"pred_xx = list(range(max(xx),sol1))\nplt.rcParams['figure.figsize'] = [7, 7]\nplt.rc('font', size=14)\nplt.scatter(xx,yy,label=\"Real data\",color=\"green\")\n\nplt.plot(xx+pred_xx, [logistic_model(i,aa,bb,cc) for i in xx+pred_xx], label=\"Logistic model\" )\n\nplt.legend()\nplt.xlabel(\"Days since 20 March 2020\")\nplt.ylabel(\"Total number of infected people\")\nplt.ylim((min(yy)*0.9,cc*1.1))\nplt.show()","c101bfd2":"yy_pred_logistic = [logistic_model(i,aa,bb,cc) for i in xx]\n\nss1=(np.subtract(yy,yy_pred_logistic)**2).sum()\nss2=(np.subtract(yy,np.mean(yy))**2).sum()\nrr=1-ss1\/ss2\nprint(\"R^2 adalah {}\".format(rr))","e9eabca1":"from datetime import timedelta, date\nfrom datetime import datetime  \nfrom datetime import timedelta \n\nstart_date = \"20\/03\/20\"\n\ndate_1 = datetime.strptime(start_date, \"%d\/%m\/%y\")\n\nend_date = date_1 + timedelta(days=sol1)\n\nxxx=end_date.strftime(\"%d %B %Y\")\n\n\nprint(\"Jumlah kasus maksimal di indonesia menurut prediksi adalah {:.0f}\".format(AA[2]+errors1[2])) #Penambahan dengan error\nprint(\"Puncak wabah adalah {:.0f} hari setelah 20 Maret 2020 atau {}\". format(sol1,xxx))\n","038edd7a":"**Kesimpulan**","323c54ca":"**MODELING**","9b1758fd":"**Model logit untuk data 20 Maret -16 Juni 2020 (PSBB + New Normal)**","b3ae6537":"Model Dari Awal Hingga Akhir PSBB (20 Maret 2020 - 31 Mei 2020)","f3a960bc":"> Visualization"}}