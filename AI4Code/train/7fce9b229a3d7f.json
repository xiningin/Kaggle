{"cell_type":{"6dcb22e3":"code","6a4ddf28":"code","3a7129fb":"code","7504e4e4":"code","82b61c3b":"code","14bbbffd":"code","71d79559":"code","7b688a29":"code","2c8c584c":"code","a8139c88":"code","bff08d63":"code","2b4ad61b":"code","f2413669":"code","ff8f7087":"code","89c136b9":"code","1eb2e191":"code","be1cf2f7":"code","b0b0a766":"code","043103cf":"code","418afaa7":"code","de224d2f":"code","51f8184c":"code","f57862db":"code","6a4854b5":"code","b90f0be1":"code","da8dd58e":"code","28181875":"code","82c21aab":"code","4565958c":"code","26f357dc":"code","75ba35e2":"code","cca634dd":"code","c6b130db":"code","d666114d":"code","331d5457":"code","71eee11c":"code","eeff32b6":"code","10f905ee":"code","696a14a7":"code","c8571e13":"code","a4834e56":"code","c067724f":"code","492194fe":"code","5b308c97":"code","6bf0d888":"code","bdacede2":"code","d731eff8":"code","55a707a6":"code","5bbabb6b":"code","2919f380":"code","f927636a":"code","d84df848":"code","6439b275":"code","e1f0de6d":"code","1e6207d3":"code","b4ce12d0":"code","3b7bb24b":"code","3089a127":"code","9be2f284":"code","588b7f1c":"code","3286c3c3":"code","b0096f1d":"code","341f6600":"code","0185a29a":"code","a388642b":"code","124bebf8":"code","09dd98ca":"code","1061452f":"code","3de9718a":"code","050171f9":"code","6a1b37f5":"markdown","bb017db9":"markdown","568055f7":"markdown","69b3cf7f":"markdown","4d82c6b9":"markdown","7f08b13a":"markdown","c8d31bf8":"markdown","6069fca3":"markdown","421db69f":"markdown","c0cc13bc":"markdown","09bbc40b":"markdown","56e91c99":"markdown","5ac39797":"markdown","a393c020":"markdown","10aa1429":"markdown","e2e3ab92":"markdown","ebe81564":"markdown","69d1eeac":"markdown","60f251ef":"markdown","b0dd3ab0":"markdown","cb9a1705":"markdown","cddd2270":"markdown","58988cb4":"markdown","5a741533":"markdown","fa99f0b4":"markdown","d63bb59d":"markdown","3418fc09":"markdown","022a7bf1":"markdown","6d1fd803":"markdown","72eb86f0":"markdown","77aaf8b8":"markdown","aa1384a7":"markdown","77f2947f":"markdown","dbcc4097":"markdown","9527ef31":"markdown","a5229c0d":"markdown","77d9a9da":"markdown","4f90e9e7":"markdown","e967bbe0":"markdown","2b1138dc":"markdown","e29cb545":"markdown","7acb205d":"markdown","62868011":"markdown","6c4b368f":"markdown","b501050f":"markdown","4f7146f6":"markdown","241edd65":"markdown","8cb55d89":"markdown","a046027a":"markdown","257e7ed1":"markdown","9615ded2":"markdown","dff70721":"markdown","191d3878":"markdown"},"source":{"6dcb22e3":"import numpy as np\nimport pandas as pd","6a4ddf28":"from plotly.offline import iplot, init_notebook_mode\nimport cufflinks as cf\nimport plotly.graph_objs as go\n# import chart_studio.plotly as py\n\ninit_notebook_mode(connected=True)\ncf.go_offline(connected=True)\n\n# Set global theme\ncf.set_config_file(world_readable=True, theme='pearl')","3a7129fb":"import seaborn as sns \nimport matplotlib.pyplot as plt","7504e4e4":"movie_df = pd.read_csv('..\/input\/fmovies-most-watched-contents\/Movie.csv')\ntv_df = pd.read_csv('..\/input\/fmovies-most-watched-contents\/TV.csv')","82b61c3b":"date_mv = pd.to_datetime(movie_df['Date'],format=\"%Y-%m-%d\")\ndate_tv= pd.to_datetime(tv_df['Date'],format=\"%Y-%m-%d\")","14bbbffd":"movie_df['Date'] = date_mv\ntv_df['Date'] = date_tv\n","71d79559":"movie_df.set_index(\"Date\", drop=True,inplace=True)\ntv_df.set_index(\"Date\", drop=True,inplace=True)","7b688a29":"movie_df.head()","2c8c584c":"tv_df.info()","a8139c88":"site_ratings_mv_median = movie_df['USER_REVIEWS_LOCAL'].median()\nimdb_ratings_mv_median = movie_df['IMDB'].median()","bff08d63":"\nfig = go.Figure()\nfig.add_trace(go.Histogram(x=movie_df['USER_REVIEWS_LOCAL'], name=\"Local Ratings|Movie\"))\nfig.add_trace(go.Histogram(x=movie_df['IMDB'], name=\"IMDB ratings|Movie\"))\n\nfig.add_trace(go.Scatter(\n    x=[imdb_ratings_mv_median-1.1, site_ratings_mv_median +1.3],\n    y=[300, 299],\n    text=[\"IMDB Median\",\"Site Ratings Median\",],\n    mode=\"text\",\n    showlegend=False\n#     name=[\"Site Ratings Mean\",\"IMDB Mean\"]\n))\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0=imdb_ratings_mv_median,\n            y0=0,\n            x1=imdb_ratings_mv_median,\n            y1=350,\n            line=dict(\n                width=4,\n                dash=\"dot\",\n            ),\n    )\nfig.add_shape(\n            type=\"line\",\n            x0=site_ratings_mv_median,\n            y0=0,\n            x1=site_ratings_mv_median,\n            y1=350,\n            line=dict(\n                color=\"LightSeaGreen\",\n                width=4,\n                dash=\"dashdot\",\n            ),\n    )\n\nfig.update_layout(title=\"Distribution Plot Local Ratings Vs IMDB |Movies\")\n# fig.write_image(\"..\/Imgs\/Distribution_plt_lcl_ratings_mv.png\", width=5)","2b4ad61b":"site_ratings_mv = movie_df.sort_values('USER_REVIEWS_LOCAL', ascending=False,ignore_index=True)\n","f2413669":"site_ratings_mv.drop_duplicates('MOVIE_NAME',inplace=True )\n","ff8f7087":"eval_movie_df = site_ratings_mv[['MOVIE_NAME', 'IMDB','USER_REVIEWS_LOCAL','NUMBER_REVIEWS_LOCAL','SITE_RANK']]","89c136b9":"from sklearn.preprocessing import MinMaxScaler","1eb2e191":"scaler = MinMaxScaler()","be1cf2f7":"eval_movie_df[['IMDB','USER_REVIEWS_LOCAL']] = scaler.fit_transform(eval_movie_df[['IMDB','USER_REVIEWS_LOCAL']])","b0b0a766":"movie_names = eval_movie_df.MOVIE_NAME.values.tolist()\nimdb_ratings = eval_movie_df.IMDB.values.tolist()\nlocal_ratings = eval_movie_df.USER_REVIEWS_LOCAL.values.tolist()\n","043103cf":"fig = go.Figure()\nfig.add_trace(go.Bar(x=movie_names[:100], y= imdb_ratings[:100], name=\"IMDB Ratings Top 100 |Movie\"))\nfig.add_trace(go.Bar(x=movie_names[:100], y= local_ratings[:100], name=\"Local Ratings Top 100 |Movie\"))\nfig.update_xaxes(tickangle=-45)\nfig.update_layout(xaxis_title =\"Movies\",\n                  yaxis_title=\"Ratings\",\n                  title=\"IMDB Vs Local Ratings Top 100,|Movie | sorted Local Ratings\",height=700)\n# for saving image use these dimensions\n#width=1000, height=700\n# fig.write_image(\"..\/Imgs\/imdb_vs_local_top_100_mv.png\")","418afaa7":"fig = go.Figure()\nfig.add_trace(go.Bar(x=movie_names[-100:], y= imdb_ratings[-100:], name=\"IMDB Ratings Bottom 100|Movie\"), )\nfig.add_trace(go.Bar(x=movie_names[-100:], y= local_ratings[-100:], name=\"Local Ratings Bottom 100|Movie\"))\nfig.update_xaxes(tickangle=-45)\nfig.update_layout(xaxis_title =\"Movies\", \n                  yaxis_title=\"Ratings\", \n                  title=\"IMDB Vs Local Ratings Bottom 100, sorted by local Ratings\",\n                 height=700)\n# for saving image use these dimensions\n#width=1000, height=700\n# fig.write_image(\"..\/Imgs\/imdb_vs_local_bottom_100_mv.png\")","de224d2f":"imdb_ratings_mv = movie_df.sort_values('IMDB', ascending=False, ignore_index=True)\nimdb_ratings_mv.drop_duplicates('MOVIE_NAME',inplace=True )","51f8184c":"eval_movie_df_imdb = imdb_ratings_mv[['MOVIE_NAME', 'IMDB','USER_REVIEWS_LOCAL','NUMBER_REVIEWS_LOCAL','SITE_RANK']]","f57862db":"eval_movie_df_imdb[['IMDB','USER_REVIEWS_LOCAL']] = scaler.fit_transform(eval_movie_df_imdb[['IMDB','USER_REVIEWS_LOCAL']])","6a4854b5":"movie_names_imdb = eval_movie_df_imdb.MOVIE_NAME.values.tolist()\nimdb_ratings_imdb = eval_movie_df_imdb.IMDB.values.tolist()\nlocal_ratings_imdb = eval_movie_df_imdb.USER_REVIEWS_LOCAL.values.tolist()","b90f0be1":"fig = go.Figure()\nfig.add_trace(go.Bar(x=movie_names_imdb[:100], y= imdb_ratings_imdb[:100], name=\"IMDB Ratings Top 100|Movie\"))\nfig.add_trace(go.Bar(x=movie_names_imdb[:100], y= local_ratings_imdb[:100], name=\"Local Ratings Top 100|Movie\"))\nfig.update_xaxes(tickangle=-45)\nfig.update_layout(xaxis_title =\"Movies\",\n                  yaxis_title=\"Ratings\",\n                  title=\"IMDB Vs Local Ratings Top 100 |Movie |sorted IMDb\",\n                   height=700)\n\n# for saving image use these dimensions\n#width=1000, height=700\n# fig.write_image(\"..\/Imgs\/imdb_vs_local_imdb_sort_top_100_mv.png\")\n","da8dd58e":"fig = go.Figure()\nfig.add_trace(go.Bar(x=movie_names_imdb[-100:], y= imdb_ratings_imdb[-100:], name=\"IMDB Ratings Bottom 100|Movie\"), )\nfig.add_trace(go.Bar(x=movie_names_imdb[-100:], y= local_ratings_imdb[-100:], name=\"Local Ratings Bottom 100|Movie\"))\nfig.update_xaxes(tickangle=-45)\nfig.update_layout(xaxis_title =\"Movies\",\n                  yaxis_title=\"Ratings\",\n                  title=\"IMDB Vs Local Ratings Bottom 100|Movie |soted IMDB\", \n                  height=700,)\n\n# for saving image use these dimensions\n#width=1000, height=700\n# fig.write_image(\"..\/Imgs\/imdb_vs_local_imdb_sort_bottom_100_mv.png\")\n","28181875":"imdb_ratings_mv.iloc[-12:,[5,9]]","82c21aab":"site_ratings_tv_median = tv_df['USER_REVIEWS_LOCAL'].median()\nimdb_ratings_tv_median= tv_df['IMDB'].median()","4565958c":"print(site_ratings_tv_median ,imdb_ratings_tv_median)","26f357dc":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=tv_df['USER_REVIEWS_LOCAL'], name=\"Local Ratings|TV\"))\nfig.add_trace(go.Histogram(x=tv_df['IMDB'], name=\"IMDB ratings|TV\"))\n\nfig.add_trace(go.Scatter(\n    x=[imdb_ratings_tv_median-2.3, site_ratings_tv_median + 2.4],\n    y=[165, 165],\n    text=[\"IMDB Median TV\",\"Site Ratings Median TV\",],\n    mode=\"text\",\n    showlegend=False\n))\n\nfig.add_shape(\n            type=\"line\",\n            x0=site_ratings_tv_median,\n            y0=0,\n            x1=site_ratings_tv_median,\n            y1=170,\n            line=dict(\n                color=\"LightSeaGreen\",\n                width=4,\n                dash=\"dashdot\",\n            ),\n    )\n\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0=imdb_ratings_tv_median,\n            y0=0,\n            x1=imdb_ratings_tv_median,\n            y1=170,\n            line=dict(\n                width=4,\n                dash=\"dot\",\n            ),\n    )\nfig.update_layout(title=\"Distribution Plot Local Ratings Vs IMDB |TV\")\n# fig.write_image(\"..\/Imgs\/Distribution_plt_lcl_ratings_tv.png\")","75ba35e2":"site_ratings_tv = tv_df.sort_values('USER_REVIEWS_LOCAL', ascending=False,ignore_index=True)\n","cca634dd":"site_ratings_tv.drop_duplicates('TV_NAME',inplace=True )\n","c6b130db":"eval_tv_df= site_ratings_tv[['TV_NAME', 'IMDB','USER_REVIEWS_LOCAL','NUMBER_REVIEWS_LOCAL','SITE_RANK']]\neval_tv_df[['IMDB','USER_REVIEWS_LOCAL']] = scaler.fit_transform(eval_tv_df[['IMDB','USER_REVIEWS_LOCAL']])","d666114d":"tv_names = eval_tv_df.TV_NAME.values.tolist()\ntv_imdb_ratings = eval_tv_df.IMDB.values.tolist()\ntv_local_ratings = eval_tv_df.USER_REVIEWS_LOCAL.values.tolist()\n","331d5457":"fig = go.Figure()\nfig.add_trace(go.Bar(x=tv_names[:100], y= tv_imdb_ratings[:100], name=\"IMDB Ratings Top 100|TV\"))\nfig.add_trace(go.Bar(x=tv_names[:100], y= tv_local_ratings[:100], name=\"Local Ratings Top 100|TV\"))\nfig.update_xaxes(tickangle=-45)\nfig.update_layout(xaxis_title =\"TV Shows\", yaxis_title=\"Ratings\", title=\"IMDB Vs Local Ratings Top 100,|TV |sort Local Ratings\", height=700,)","71eee11c":"fig = go.Figure()\nfig.add_trace(go.Bar(x=tv_names[-100:], y= tv_imdb_ratings[-100:], name=\"IMDB Ratings Bottom 100|TV\"))\nfig.add_trace(go.Bar(x=tv_names[-100:], y= tv_local_ratings[-100:], name=\"Local Ratings Bottom 100|TV\"))\nfig.update_xaxes(tickangle=-45)\nfig.update_layout(xaxis_title =\"TV Shows\", yaxis_title=\"Ratings\", title=\"IMDB Vs Local Ratings Bottom 100,|TV |sort Local Ratings\", height=700,)","eeff32b6":"imdb_ratings_tv= tv_df.sort_values('IMDB', ascending=False, ignore_index=True)\nimdb_ratings_tv.drop_duplicates('TV_NAME',inplace=True )","10f905ee":"eval_tv_df_imdb = imdb_ratings_tv[['TV_NAME', 'IMDB','USER_REVIEWS_LOCAL','NUMBER_REVIEWS_LOCAL','SITE_RANK']]\neval_tv_df_imdb[['IMDB','USER_REVIEWS_LOCAL']] = scaler.fit_transform(eval_tv_df_imdb[['IMDB','USER_REVIEWS_LOCAL']])","696a14a7":"tv_names_imdb = eval_tv_df_imdb.TV_NAME.values.tolist()\ntv__imdb_ratings_imdb = eval_tv_df_imdb.IMDB.values.tolist()\ntv_local_ratings_imdb = eval_tv_df_imdb.USER_REVIEWS_LOCAL.values.tolist()","c8571e13":"fig = go.Figure()\nfig.add_trace(go.Bar(x=tv_names_imdb[:100], y= tv__imdb_ratings_imdb[:100], name=\"IMDB Ratings Top 100|TV\"))\nfig.add_trace(go.Bar(x=tv_names_imdb[:100], y= tv_local_ratings_imdb[:100], name=\"Local Ratings Top 100|TV\"))\nfig.update_xaxes(tickangle=-45)\nfig.update_layout(xaxis_title =\"TV Shows\", yaxis_title=\"Ratings\", title=\"IMDB Vs Local Ratings Top 100,|TV |sort IMDB Ratings\", height=700,)","a4834e56":"fig = go.Figure()\nfig.add_trace(go.Bar(x=tv_names_imdb[-100:], y= tv__imdb_ratings_imdb[-100:], name=\"IMDB Ratings Bottom 100|TV\"))\nfig.add_trace(go.Bar(x=tv_names_imdb[-100:], y= tv_local_ratings_imdb[-100:], name=\"Local Ratings Bottom 100|TV\"))\nfig.update_xaxes(tickangle=-45)\nfig.update_layout(xaxis_title =\"TV Shows\", yaxis_title=\"Ratings\", title=\"IMDB Vs Local Ratings Bottom 100,|TV |sort IMDB Ratings\", height=700,)","c067724f":"genre_prp_mv = movie_df.GENRE.value_counts(normalize=True)*100","492194fe":"\ngenre_names_mv = genre_prp_mv.index.tolist()\ngenre_names_pct_mv = genre_prp_mv.values.tolist()\n","5b308c97":"\nfig = go.Figure()\nfig.add_trace(go.Pie(labels=genre_names_mv, values=genre_names_pct_mv))\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=15,\n                  marker=dict( line=dict(color='#000000', width=2)),)\nfig.update_layout(title=\"Genres In Movies\",\n                 template=\"ggplot2\",\n                    font=dict(\n                        family=\"Courier New, monospace\",\n                              size=18,\n                              color=\"#7f7f7f\"))\n\n# fig.write_image(\"..\/Imgs\/genre_n_movies.png\")","6bf0d888":"genre_prp_tv = tv_df.GENRE.value_counts(normalize=True)*100","bdacede2":"\ngenre_names_tv = genre_prp_tv.index.tolist()\ngenre_names_pct_tv = genre_prp_tv.values.tolist()","d731eff8":"fig = go.Figure()\nfig.add_trace(go.Pie(labels=genre_names_tv, values=genre_names_pct_tv))\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=15,\n                  marker=dict( line=dict(color='#000000', width=2)),)\nfig.update_layout(title=\"Genres In Movies\",\n                 template=\"ggplot2\",\n                    font=dict(\n                        family=\"Courier New, monospace\",\n                              size=18,\n                              color=\"#7f7f7f\"))\n\n# fig.write_image(\"..\/Imgs\/genre_n_tvs.png\")","55a707a6":"fig = go.Figure()\nfig.add_trace(go.Bar(x=genre_names_mv, y=genre_names_pct_mv,name=\"Genres| Movie\"))\nfig.add_trace(go.Bar(x=genre_names_tv, y=genre_names_pct_tv, name=\"GenresTV\"))\nfig.update_layout(title=\"Movie Vs. TV | Genre\", xaxis_title=\"Genre Names\", yaxis_title=\"Share in Percentage\",template=\"ggplot2\",)\n\n# fig.write_image(\"..\/Imgs\/movies_vs_tv_top_genre.png\")","5bbabb6b":"print(tv_df.drop_duplicates('TV_NAME').shape[0])\nprint(movie_df.drop_duplicates('MOVIE_NAME').shape[0])","2919f380":"movie_df.columns","f927636a":"site_ranks_movie = movie_df[['MOVIE_NAME','SITE_RANK','USER_REVIEWS_LOCAL','IMDB','NUMBER_REVIEWS_LOCAL']].sort_values('SITE_RANK')\nsite_ranks_movie.drop_duplicates('MOVIE_NAME', inplace=True)","d84df848":"site_ranks_movie.head()","6439b275":"# site_ranks_movie[['USER_REVIEWS_LOCAL','MOVIE_NAME','IMDB']].iloc[:50,:].iplot(kind='bar', x=\"MOVIE_NAME\")\nlayout=dict(title=\"IMDB & 30 Most Watched Movies\", \n            xaxis_title=\"Movies\",\n            yaxis_title=\"Ratings\")\nsite_ranks_movie[['MOVIE_NAME','IMDB']].iloc[:30,:].iplot(kind=\"bar\", x=\"MOVIE_NAME\",layout=layout)\n","e1f0de6d":"layout=dict(title=\"IMDB & 30 Least Watched Movies\", \n            xaxis_title=\"Movies\",\n            yaxis_title=\"Ratings\")\nsite_ranks_movie[['MOVIE_NAME','IMDB']].iloc[-30:,:].iplot(kind=\"bar\", x=\"MOVIE_NAME\",layout=layout)\n","1e6207d3":"movie_df[movie_df.MOVIE_NAME == \"Eternal Sunshine Of The Spotless Mind\"]['GENRE']","b4ce12d0":"top_100_movies = site_ranks_movie.iloc[:100,0].values.tolist()\nbottom_100_movies = site_ranks_movie.iloc[-100:,0].values.tolist()","3b7bb24b":"\ntop_100_mv_genres = np.array([])\nbottom_100_mv_genres = np.array([])\n\nfor movie in top_100_movies:\n    val = movie_df[movie_df.MOVIE_NAME == movie]['GENRE'].values\n    top_100_mv_genres = np.append(top_100_mv_genres,val)\n    \n    \nfor movie in bottom_100_movies:\n    val = movie_df[movie_df.MOVIE_NAME == movie]['GENRE'].values\n    bottom_100_mv_genres = np.append(bottom_100_mv_genres,val)\n\n","3089a127":"\ntop_100_mv_genre_counts = np.unique(top_100_mv_genres,return_counts=True, )\nbottom_100_mv_genre_counts = np.unique(bottom_100_mv_genres,return_counts=True, )","9be2f284":"top_100_mv_genre_counts[1]","588b7f1c":"fig = go.Figure()\nfig.add_trace(go.Bar(x=top_100_mv_genre_counts[0], y=top_100_mv_genre_counts[1], name=\"Top 100 Most Watched Movies\"))\nfig.add_trace(go.Bar(x=bottom_100_mv_genre_counts[0], y=bottom_100_mv_genre_counts[1], name=\"Bottom 100 Most Watched Movies\"))\nfig.update_layout(title=\"Views & Genres|Movies\", xaxis_title=\"Genres\", yaxis_title=\"Counts\")\n# fig.write_image(\"..\/Imgs\/views_n_genres_mv.png\")","3286c3c3":"site_ranks_tv = tv_df[['TV_NAME','SITE_RANK','USER_REVIEWS_LOCAL','IMDB','NUMBER_REVIEWS_LOCAL']].sort_values('SITE_RANK')\nsite_ranks_tv.drop_duplicates('TV_NAME', inplace=True)\n","b0096f1d":"top_100_tvs = site_ranks_tv.iloc[:100,0].values.tolist()\nbottom_100_tvs = site_ranks_tv.iloc[-100:,0].values.tolist()\n\ntop_100_tv_genres = np.array([])\nbottom_100_tv_genres = np.array([])\n\nfor tv in top_100_tvs:\n    val = tv_df[tv_df.TV_NAME == tv]['GENRE'].values\n    top_100_tv_genres = np.append(top_100_tv_genres,val)\n    \n    \nfor tv in bottom_100_tvs:\n    val = tv_df[tv_df.TV_NAME == tv]['GENRE'].values\n    bottom_100_tv_genres = np.append(bottom_100_tv_genres,val)\n\n\ntop_100_tv_genre_counts = np.unique(top_100_tv_genres,return_counts=True, )\nbottom_100_tv_genre_counts = np.unique(bottom_100_tv_genres,return_counts=True, )","341f6600":"fig = go.Figure()\nfig.add_trace(go.Bar(x=top_100_tv_genre_counts[0], y=top_100_tv_genre_counts[1], name=\"Top 100 Most Watched TVs\"))\nfig.add_trace(go.Bar(x=bottom_100_tv_genre_counts[0], y=bottom_100_tv_genre_counts[1], name=\"Bottom 100 Most Watched TVs\"))\nfig.update_layout(title=\"Views & Genres|TV\", xaxis_title=\"Genres\", yaxis_title=\"Counts\")\n# fig.write_image(\"..\/Imgs\/views_n_genres_tv.png\")","0185a29a":"temp_df = movie_df.drop_duplicates(\"MOVIE_NAME\")","a388642b":"grp_by_released_date_movie = temp_df['MOVIE_NAME'].groupby(temp_df.index.year).count()","124bebf8":"index = grp_by_released_date_movie.index.tolist()\nvalues = grp_by_released_date_movie.values.tolist()\nsize = [val*.5 for val in values]","09dd98ca":"fig= go.Figure()\nfig.add_trace(go.Scatter(x =index,y= values, mode=\"markers\", marker=dict(size=size,color=size)))\nfig.update_layout(title=\"Movies Released Per Year\", xaxis_title=\"Year\", yaxis_title=\"Movies Counts\")\nfig.show()\n# grp_by_released_date_movie.iplot(kind=\"scatter\", mode=\"markers\", size=grp_by_released_date_movie.values*0.5)\n# fig.write_image(\"..\/Imgs\/Movie_releases_per_yr.png\")","1061452f":"yr_most_watched_rank  = temp_df.groupby(temp_df.index.year)[[\"SITE_RANK\"]].mean().sort_values('SITE_RANK')","3de9718a":"rank = yr_most_watched_rank.rank(method='min')\n\nx = rank.index.tolist()\ny =  rank.SITE_RANK.values\n\n\n#Lets subtract all values by 60 as max value being 42. By doing so smallest rank becomes highest and gets biggest size in plot. \nrank_plot_size=[60-float(val) for val in y]","050171f9":"fig= go.Figure()\nfig.add_trace(go.Scatter(x=x,y=y, mode='markers', marker=dict(size=rank_plot_size,color=rank_plot_size)))\nfig.update_layout(title=\"Rank of Years By Most Watched|Movie\",xaxis_title=\"Year\", yaxis_title=\"Rank\", )\nfig.show()\n\n# fig.write_image(\"..\/Imgs\/yr_rank_most_watched_mv.png\")","6a1b37f5":"Normalizing","bb017db9":"lets drop duplicates for cause for now we only care about movie_name and ratings","568055f7":"Local and IMDB both seems to be quite normally distributed, with the half of  below 7.","69b3cf7f":"## Most Watched Movies(site rank) and Their IMDBs","4d82c6b9":"Lets have a quick look at the amount of movies released per year, but first drop duplicates","7f08b13a":"- 'movie_name\/ tv_name' : Name of movie \/ tv \n- 'watch_link': Url link for page to watch movie\/tv, \n- 'date_added': Date added to df not in fmovies\n- 'site_rank':Ranking, by the order of movies most watched to least watched starting from 1,2,3... so on.\n- 'Genre': Genres\n- 'Stars': Cast,\n- 'IMDb': IMDb ratings,\n- 'Director': Director, \n- 'Release': Released Date for Movie\/TV,\n- 'Country': Origin country can be more than one\n- 'User_Reviews_local'- Average ratings on fmovies.to website\n- 'Number_Reviews_local'- Number of reviews by viewers on the fmovies.to website\n- 'season' - Which season, only for tv shows\n- 'episodes' - Number of episoded available for tv shows \n","c8d31bf8":"The raitings are from different source and number of user from IMDB is unknown so lets normalize them","6069fca3":"Plot","421db69f":"In TV screens most of the shows are Drama,Comedy and Action, while we should remember, mostly a show has multiple genre.","c0cc13bc":"### TV's","09bbc40b":"As we can see form both charts, Its clear that IMDB in general does effect the watch count. Most watched movies do have high IMDB ratins. But the Bottom thirty some movies are there which still have very high ratings like \"Eternal sunshine of spotless mind\",8.3 imdb. ","56e91c99":"#### Movies sorted by SITE_RATINGS","5ac39797":"lets count the most repeated genres of top and bottom 100 movies.","a393c020":"## Movie Vs TV Genre Share\n\nLets compare TV and Movie worlds by Genre","10aa1429":"### Top TVs VS. Genres","e2e3ab92":"Project is the continuation of web crawling of website fmovies's [most-watched](https:\/\/fmovies.to\/most-watched) section analysis for the website. \nIn part one we crawled websites and extracted informations. In part two we tidyed the data for analysis. This is third part where we'll analyse the data.","ebe81564":"#### TVS sorted by IMDb Ratings\n","69d1eeac":"Its seems among **Action, Adventures,Sci-Fi, Fantasy** are the genres that are very popular in general. Moreover, **Comedy** is like a potato, bleding in anywhere. \n\nGenres like **Drama, Romance** top the chart amons least watched, while **Documentary, war** does not seems to crowd favorite as these genres attract only a certain group of people.\n\nBut at the end of the day, either be movies or tvs, their popularity depends on many other factors like story, plot, cast, marketing, producers, star casts and so on.","60f251ef":"## Reset Index","b0dd3ab0":"### Movies\n","cb9a1705":"# Columns ","cddd2270":"From the pie chart most of the movies have genre Drama, Action, Comedy.. and so on in that order, while we should remember, mostly a movie has multiple genre.","58988cb4":"Year 1991 is ranked highest, while 1996 is lowest which is 42.","5a741533":"While the time I created this plot if July 15,2020,  fmovies, has the movies from 1971-2020. The number of movies is increasing from 2012, while 2019 being the year with most movies.\n\n**Note:** *These movies are all from the most-watched list from just first 50 pages of fmovies.to, not all the movies in inventory.*","fa99f0b4":"# Analysis","d63bb59d":"From plot, on contrary to Movies, **Drama** is very popular genre in small screens followed by **Crime** in second and then **Action** in the third most watched genre. \n\n**Documentary** is still not popluar here as well. **Horror** shows take equal stance in fmovies.","3418fc09":"### Rank Years By Most Watched","022a7bf1":"#### Movies Distribution for IMDB and User Ratings","6d1fd803":"## Genre Percentage","72eb86f0":"Lets rank movies by year,in the order of most watched movie.","77aaf8b8":"## Release Dates and Movies\n\nThough we donot have the accurate date when the movie was added in the website, lets assume its in order with the release date and compare the movies most watched ranking and their release dates.","aa1384a7":"### Count of Movies By Year","77f2947f":"When sorting by site ratings, higher site rated movie also have higher IMDB ratings.","dbcc4097":"## IMDB Vs Site Ratings","9527ef31":"From the distribution it seems 50% of the site ratings are around 6.5 while 8 for imdb ","a5229c0d":"Lets Rank the year using pd.Rank with \"min\" being the highest rank.\n \nWe know that lower the value higher the rank, however, plotting will show opposite.Lets subtract all values by 60 as max value being 42. By doing so smallest rank becomes highest and gets biggest size in plot. \n","77d9a9da":"While sorting by site_ratings,bottom ones i.e the movies imdb seems to higher than on comparision to the site ratings.\nBut we also have to remember the fact this is a biased data, the number of users in IMDB is not known and not all the viewers rate the movie in fmovies.to","4f90e9e7":"### Genre In Movies","e967bbe0":"## Genres and Ranks","2b1138dc":"# Introduction","e29cb545":"The top five movies in the website have 7+ imdb ratings while its counter part has ratings around 7. But it should be considered, that number of reivews varies more. The \"Avengers: Infinity War\" which is in the second spot among *MOVIES* has more than 21k reviewers.","7acb205d":"Plot","62868011":"While Drama being the top choice for both tv and movie makers, its significantly more in tv sector. Action seems to be just a little bit more in movies. \nFamily genre is about three times more in movies, whilst crime is double in tv shows.\n\n\nThe unique one seems to reality tv, as the name suggest is about 20 times more share in tv than in movies. And Tv shows and Games shows are unique to tv only.\nBut as printed below, we are comparing 1302 movies against 285 tv shows","6c4b368f":"And the assumption was correct.","b501050f":"While movies in the bottom 100 have fluctuation, and it seems lowest 12 have imdb around 0. Lets see actual value rather than normalized ones for those 12.\n","4f7146f6":"#### TVS sorted by Local Ratings\n","241edd65":"As mentioned in column info, the Site rank column is the order of movies in the most_watched list, starting from 1 for most watched movie.","8cb55d89":"### Genre In Movies","a046027a":"#### TV's Distribution for IMDB and User Ratings","257e7ed1":"#### Movies sorted by IMDB","9615ded2":"While sorted with IMDB ratings, it seems local ratings are usually lesser.","dff70721":"### Top Movies VS. Genres","191d3878":"Lets just follow the similar procedure we followed above."}}