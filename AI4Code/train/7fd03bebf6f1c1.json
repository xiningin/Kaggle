{"cell_type":{"d30632b7":"code","beeb9802":"code","4cc579fd":"code","16d32eb8":"code","5ef32d5e":"code","542f0c51":"code","c21e5d07":"code","a6496aa6":"code","769e91df":"code","fb41faf0":"code","980d0d9e":"code","3a7b0311":"code","e4782f38":"code","6ed6a24e":"code","4cd147e6":"code","8691b646":"code","79d58a61":"code","3c61905b":"code","f44c5e0f":"code","f28db509":"code","50c15b16":"code","d6e6b43f":"code","4214d016":"code","c814a28f":"code","7da4a42a":"code","e35e0d6a":"code","7d056476":"code","e5009b98":"markdown","8d93daa4":"markdown","61ad159a":"markdown","9364c479":"markdown","8ddde834":"markdown","ae785e5a":"markdown","0a2a1e9f":"markdown","f08dadb9":"markdown","336f5ae7":"markdown","11a8dec3":"markdown","fa9679ed":"markdown","b5b54ef0":"markdown","d1f80f37":"markdown","0d33bab1":"markdown","3a1d682f":"markdown","909b11bb":"markdown","f7b54d30":"markdown"},"source":{"d30632b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","beeb9802":"dataset=pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\n\ndataset.info()","4cc579fd":"dataset.describe()","16d32eb8":"dataset.isnull().sum()","5ef32d5e":"import seaborn as sns\nimport matplotlib.pyplot as plt","542f0c51":"sns.pairplot(dataset)\nplt.show()","c21e5d07":"corr=dataset.corr()\ncolormap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(corr,cmap=colormap,xticklabels=corr.columns,yticklabels=corr.columns,annot=True)\nplt.show()","a6496aa6":"dataset['quality'] = dataset.quality.apply(lambda x : 1 if x > 6.5 else 0)","769e91df":"sns.countplot(data = dataset, x = 'quality')\nplt.show()","fb41faf0":"X=dataset.drop('quality',1)\ny=dataset['quality']","980d0d9e":"from sklearn.model_selection import train_test_split","3a7b0311":"X_train, X_test, y_train,y_test= train_test_split(X,y,test_size=0.30, random_state=37)","e4782f38":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree","6ed6a24e":"dt_base=DecisionTreeClassifier(max_depth=10,random_state=4)\ndt_base.fit(X_train,y_train)","4cd147e6":"from sklearn import metrics","8691b646":"y_pred=dt_base.predict(X_test)","79d58a61":"acc = metrics.accuracy_score(y_test,y_pred)\nprint(acc)","3c61905b":"tree.plot_tree(dt_base, max_depth=2)","f44c5e0f":"dt_base.tree_.node_count","f28db509":"param_grid = {\n    'max_depth' : range(4,20,4),\n    'min_samples_leaf' : range(20,200,20),\n    'min_samples_split' : range(20,200,20),\n    'criterion' : ['gini','entropy'] \n}\nn_folds = 5","50c15b16":"from sklearn.model_selection import GridSearchCV","d6e6b43f":"dt = DecisionTreeClassifier(random_state=34)\ngrid = GridSearchCV(dt, param_grid, cv = n_folds, return_train_score=True)","4214d016":"grid.fit(X_train,y_train)","c814a28f":"grid.best_params_","7da4a42a":"best_tree = grid.best_estimator_\nbest_tree","e35e0d6a":"best_tree.fit(X_train,y_train)\ny_pred_best = best_tree.predict(X_test)","7d056476":"acc = metrics.accuracy_score(y_test,y_pred_best)\nprint(acc)","e5009b98":"Let's find the accuracy of our first model","8d93daa4":"After visualization, the first thing to do is to separate the features from the target variable and then split it into training and test sets.","61ad159a":"After splitting, let's apply our first decision tree model","9364c479":"Also, a heatmap to find co-relations between the features\n","8ddde834":"We can see that 179 nodes are present, so we can set the range approx 200 to see the result","ae785e5a":"We will first using pairplot.\nA pairplot plot a pairwise relationships in a dataset. The pairplot function creates a grid of Axes such that each variable in data will by shared in the y-axis across a single row and in the x-axis across a single column","0a2a1e9f":"We can see that there is not much effect in tuning the hyperparameters.  It might be possible that the model may have overfit the data because we can see from the count graph that majority have the target value 0. Thus, to get more accurate result, we could get more data to work on it","f08dadb9":"We can see that our model is 88.5 % accurate. Let's visualize the tree\n<br>\nTrees can be visualized with the help of function plot_tree. So, let's start.","336f5ae7":"After training, let's find the best parameters that is suited","11a8dec3":"We can see that the size is too small for us to read. I am currently searching for a method and will update it as soon as I'll find","fa9679ed":"Thus, now there is no need to to put any random value. Now, it's time to visualize the data. For data visualization, we would be using seaborn and matplotlib.pyplot","b5b54ef0":"we can see that the following pair are highly co-related to each other.\n> citric acid and fixed acidity \n<br>\n> density and fixed acidity\n<br>\n> free sulphur dioxide and total slphur dioxide ","d1f80f37":"From the info, we can see that there are 1599 non-null values, with data types both float64 and int64.\nLet us check if there are any null  values present in them, (there is no need but just to be sure).","0d33bab1":"Now, finding the accuracy of this best_tree","3a1d682f":"We, now convert the quality (i.e, target ) into two categories, as we would be using Decision Tree Classifier here, \nas mentioned in the tips, that if the quality is greater tha 6.5 , it's \"good\"(1) else \"bad\"(0)","909b11bb":"We are using gridSearchCV to train models under different hyperparameters and get the result","f7b54d30":"It's time for HYPERPARAMETER TUNING"}}