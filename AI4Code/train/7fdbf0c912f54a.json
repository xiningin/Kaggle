{"cell_type":{"17ce64d5":"code","39b2b3ab":"code","ec41ce5c":"code","de96710c":"code","e8e03859":"code","9438a8f4":"code","bbc559f0":"code","71aed99c":"code","5d828c43":"code","ce27d2d7":"code","687e9199":"code","e82dc206":"code","55832888":"code","3ce59675":"code","8b8f1bad":"code","055dd747":"code","93d0312a":"code","08444d21":"code","886a4ca3":"code","54de38b7":"code","ff79b9d5":"code","0be74413":"code","15299274":"code","411aa582":"code","88922bbd":"code","56d22489":"markdown","6cb8bf1d":"markdown","4f62bd84":"markdown","84e7b7a2":"markdown","b70d2af4":"markdown","0e9b8b6f":"markdown","c21efae7":"markdown","1e1edde9":"markdown","ad5e8d19":"markdown","122d74f4":"markdown","f969d686":"markdown","5e34af42":"markdown","58cfb320":"markdown","f3960020":"markdown","7bcf32ed":"markdown","b49e301e":"markdown","da03201c":"markdown"},"source":{"17ce64d5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","39b2b3ab":"#import IPython\n#IPython.display.IFrame(<iframe width=\"650\" height=\"400\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" title=\"2019-nCoV\" src=\"\/gisanddata.maps.arcgis.com\/apps\/Embed\/index.html?webmap=14aa9e5660cf42b5b4b546dec6ceec7c&extent=77.3846,11.535,163.5174,52.8632&zoom=true&previewImage=false&scale=true&disable_scroll=true&theme=light\"><\/iframe>)","ec41ce5c":"from IPython.display import HTML\n\nHTML('<div style=\"position:relative;height:0;padding-bottom:56.25%\"><iframe src=\"https:\/\/www.youtube.com\/embed\/jmHbS8z57yI?ecver=2\" width=\"640\" height=\"360\" frameborder=\"0\" style=\"position:absolute;width:100%;height:100%;left:0\" allowfullscreen><\/iframe><\/div>')","de96710c":"## install calmap\n#! pip install calmap","e8e03859":"# essential libraries\nimport json\nimport random\nfrom urllib.request import urlopen\n\n# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n#import calmap\nimport folium\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\nfrom plotly.subplots import make_subplots\n\n# color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active case - yellow\n\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# html embedding\nfrom IPython.display import Javascript\nfrom IPython.core.display import display\nfrom IPython.core.display import HTML","9438a8f4":"# list files\n#!ls ..\/input\/corona-virus-report\n# https:\/\/www.kaggle.com\/imdevskp\/corona-virus-report","bbc559f0":"# importing datasets\n\n\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', parse_dates=['Date'])\ntrain = pd.read_csv('\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_train.csv')\nsub = pd.read_csv('\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_submission.csv')\ntest = pd.read_csv('\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_test.csv')","71aed99c":"full_table[full_table['Province\/State']=='California']\n","5d828c43":"train","ce27d2d7":"ca_by_state = train.copy()\n\ntrain.columns\nca_by_state.columns =['Id', 'Province\/State', 'Country\/Region', 'Lat', 'Long', 'Date',\n       'Confirmed', 'Deaths']\nca_by_state = ca_by_state[ca_by_state.Date >'2020-03-09']\n","687e9199":"\nca_by_state['Active'] = ca_by_state.Confirmed - ca_by_state.Deaths\nca_by_state","e82dc206":"print ('Last update of this dataset was ' + str(train.loc[len(train)-1]['Date']))\nprint ('Last update of the studay dataset was ' + str(full_table.loc[len(full_table)-1]['Date']))","55832888":"#rates\n","3ce59675":"dict = {\n        'California':ca_by_state,\n        #'United States': us_by_date,\n}","8b8f1bad":"def plots_by_country (country, country_name):\n\n    temp = country\n\n    # adding two more columns\n    temp['No. of Deaths to 100 Confirmed Cases'] = round(temp['Deaths']\/temp['Confirmed'], 3)*100\n    # temp['No. of Recovered to 1 Death Case'] = round(temp['Recovered']\/temp['Deaths'], 3)\n    #print (temp)\n\n    \n    #print (temp.iloc[13]['Date'])\n    last_date = temp.iloc[len(temp)-1]['Date']\n    death_rate = temp[temp.Date ==last_date]['No. of Deaths to 100 Confirmed Cases']\n    temp = temp.melt(id_vars='Date', value_vars=['No. of Deaths to 100 Confirmed Cases', ], \n                     var_name='Ratio', value_name='Value')\n\n    #str(full_table.loc[len(full_table)-1]['Date'])\n\n    fig = px.line(temp, x=\"Date\", y=\"Value\", color='Ratio', log_y=True, width=1000, height=700,\n                  title=country_name + ' Recovery and Mortality Rate Over Time', color_discrete_sequence=[dth, rec])\n    fig.show()\n    return death_rate, 0\n        \nrates = []\nfor key, value in dict.items():\n    death_rate, recovered_rate  = plots_by_country (value,key)\n    rates.append ([key,np.float(death_rate),np.float(recovered_rate)]) ","055dd747":"import pylab\nfrom scipy.optimize import curve_fit\n\ndef sigmoid(x, x0, k):\n     y = 1 \/ (1 + np.exp(-k*(x-x0)))\n     return y\n\ndef exp (x,a,b):\n    y = a* np.exp(x*b)\n    return y\n\ndef gaussian(x, a, x0, sigma):\n    return a*np.exp(-(x-x0)**2\/(2*sigma**2))\n\ndef growth_rate_over_time (f, country, attribute, title):\n    ydata = country[attribute]\n    \n\n    xdata = list(range(len(ydata)))\n\n    rates = []\n    for i, x in enumerate(xdata):\n        if i > 2:\n#            print (xdata[:x+1])\n#            print (ydata[:x+1])\n\n            popt, pcov = curve_fit(f, xdata[:x+1], ydata[:x+1])\n            rates.append (popt[1])\n    rates = np.array(rates) \n    pylab.style.use('dark_background')\n    pylab.figure(figsize=(12,8))\n    xdata = np.array(xdata)\n    #pylab.grid(True, linestyle='-', color='0.75')\n    pylab.plot(xdata[3:]+1, 100*rates, 'o', linestyle='solid', label=attribute)\n    #if fit_good:\n    #    pylab.plot(x,y, label='fit')\n    #pylab.ylim(0, ymax*1.05)\n    #pylab.legend(loc='best')\n    pylab.xlabel('Days Since Start')\n    pylab.ylabel('Growth rate percentage ' + attribute)\n    pylab.title(title + attribute, size = 15)\n    pylab.show()\n    \n        \n    \n\ndef plot_curve_fit (f, country, attribute, title, normalize = False, curve = 'Exp'):\n    #print (country)\n    #country = country[10:]\n    fit_good = True\n    ydata = country[attribute]\n    #ydata = np.array(ydata)\n    xdata = range(len(ydata))\n    mu = np.mean(ydata)\n    sigma = np.std(ydata)\n    ymax = np.max(ydata)    \n    if normalize:\n        ydata_norm = ydata\/ymax\n    else:\n        ydata_norm = ydata\n    #f = sigmoid\n    try:\n        if curve == 'Gauss': # pass the mean and stddev\n            popt, pcov = curve_fit(f, xdata, ydata_norm, p0 = [1, mu, sigma])\n        else:    \n            popt, pcov = curve_fit(f, xdata, ydata_norm,)\n    except RuntimeError:\n        print ('Exception - RuntimeError - could not fit curve')\n        fit_good = False\n    else:\n\n        fit_good = True\n        \n    if fit_good:\n        if curve == 'Exp':   \n            print (key + ' -- Coefficients for y = a * e^(x*b)  are ' + str(popt))\n            print ('Growth rate is now ' + str(round(popt[1],2)))\n        elif curve == 'Gauss':\n            print (key + ' -- Coefficients are ' + str(popt))\n        else:   # sigmoid \n            print (key + ' -- Coefficients for y 1\/(1 + e^(-k*(x-x0)))  are ' + str(popt))\n            \n        print ('Mean error for each coefficient: ' + str(np.sqrt(np.diag(pcov))\/popt))\n    else:\n        print (key + ' -- Could not resolve coefficients ---')\n    x = np.linspace(-1, len(ydata), 100)\n    if fit_good:\n        y = f(x, *popt)\n        if normalize:\n            y = y * ymax\n    plt.style.use('dark_background')\n    pylab.figure(figsize=(15,12)) \n    #pylab.grid(True, linestyle='-', color='0.75')\n    pylab.plot(xdata, ydata, 'o', label=attribute)\n    if fit_good:\n        pylab.plot(x,y, label='fit')\n    pylab.ylim(0, ymax*1.05)\n    pylab.legend(loc='best')\n    pylab.xlabel('Days Since Start')\n    pylab.ylabel('Number of ' + attribute)\n    pylab.title(title + attribute, size = 15)\n    pylab.show()\n","93d0312a":"for key, value in dict.items():\n    if key in [\"China\",'Rest of China w\/o Hubei']:\n        pass\n    else:\n        #growth_rate_over_time (exp, value, 'Confirmed', \"Growth Rate Percentage - \")\n        growth_rate_over_time (exp, value, 'Confirmed', key + ' - Growth Rate Percentage for ',)\n        #growth_rate_over_time (exp, value, 'Deaths', key + ' - Growth Curve for ',)\n        #growth_rate_over_time (exp, value, 'Recovered', key + ' - Growth Curve for ',False)","08444d21":"round (72\/35,2)","886a4ca3":"for key, value in dict.items():\n    if key in [\"China\",'Rest of China w\/o Hubei']:\n        pass\n    else:\n        plot_curve_fit (exp, value, 'Confirmed', key + ' - Growth Curve for ',False,'Exp')\n        plot_curve_fit (exp, value, 'Deaths', key + ' - Growth Curve for ',False,'Exp')\n        #plot_curve_fit (exp, value, 'Recovered', key + ' - Growth Curve for ',False,'Exp')","54de38b7":"#    plot_curve_fit (sigmoid, value, 'Recovered', key + ' - Logistic Growth Curve for ',True,'Logistic')","ff79b9d5":"plot_curve_fit (gaussian, ca_by_state, 'Active', 'California' + ' - Curve for Cases ',False,'Gauss')","0be74413":"x0 = 33\nk = 0.27\nkd = 0.3\nx0_death = 35\nresults = [] \ntotal_estimated = 500000\ntotal_deaths = total_estimated * 0.15\nfor x in range(1,44):\n    conf = int(total_estimated * sigmoid(x, x0, k))\n    deaths = int(total_deaths * sigmoid(x, x0_death, kd))\n    print ('Confirmed estimate for day ' + str(x) + ' - ' + str(conf))\n    print ('Death estimate for day ' + str(x) + ' - ' + str(deaths))\n    results.append([x,conf,deaths])","15299274":"ca_by_state","411aa582":"r = pd.DataFrame(results)\nr.columns = sub.columns\nsub = r.copy()\nsub\n","88922bbd":"sub.to_csv(\"submission.csv\", index=False)","56d22489":"Next, let's review some of the grow curves.\n\n","6cb8bf1d":"# Preprocessing","4f62bd84":"## Most Recent Update","84e7b7a2":"# Logistic Prediction\n\nBased on observations from our previous analysis, we derived logistic curve parameters of \n* k = .25\n* X0 = 34\n\nThe first date of recorded confirmations was 3\/10\/2020. We will model from that point.\n","b70d2af4":"# Purpose of This Document\nThe purpose of this notebook is to use knowledge from tracking of the COVID-19 virus in specific countries and regions that have seen severe growth rates. \n\nThe full report is https:\/\/www.kaggle.com\/wjholst\/covid-19-growth-patterns-in-critical-countries\n\nCurrently, the following countries and regions are included:\n* China\n* All China excluding the original Hubei province\n* Rest of the world\n* United States\n* Italy\n* Iran\n* Spain\n* More (see below in the Change History section)\n\nThere are two phases to the growth rate, an exponential phase, and then a flattening, downward turning of the curve. This is a sigmoid curve. The sigmoid curve is include only in the cases where the inflection point has been crossed (as of 3\/15\/20, all China and remainder of China excluding Hubei. \n\nThe report now includes US states which have very active growth rates.\n\nOverall, it is hopeful that the exponential and logistic graphs will help us define the inflection point for each separate population grouping. \n\n## Predictions of the California Growth Rate\n\nThe information gathered within this report is now being used to predict the California growth rate for both confirnd cases and deaths. The approach will be simple - based on observations of other countries and current California available data, we will estimate the parameters for the logistic curve to match the current rates. We will then modify the parameters systematically to generate expected, best, and worse case scenarios.\n\n## Observation Log\n\n* On 3\/18, South Korea was moved to the sigmoid tracking group. The sigmoid curves now converge.\n*          Italy's exponential curve began to tilt slightly. That may signal the start of an inflection point.\n*          Italy's mortality rate is extremely high and still climbing.\n*          Washington State also seems to be flattening.\n* 3\/20\/20 - For the third day in a row, the confirmed rate in Iran is to the right of the curve. **Iran may be reaching an inflection** point after around 25 days. **Italy also seems close** to an inflection point.\n\n## Change History\n\n* 2020-03-18 - Addressed a problem with some of the curve fitting not converging. Because some of the countries, like the US, had a long period of days with no increases of cases, the tracking start date.\n* 2020-03-18 - Added US \"hot\" states, NY, CA, and WA. Also added Germany, which has shown rapid recent growth.\n* 2020-03-19 - Added Colorado, per friend request. Also added France and 2 high density countries, Monaco and Singapore\n* 2020-03-20 - Removed Monaco, not enough cases\n* 2020-03-21 - Added Switzerland, New Jersey, Louisiana, and 12 'hot' European countries as a group\n* 2020-03-22 - Added United Kingdom and UK to hot European group\n* 2020-03-22 - Modified to generate predicted results for California.\n\n\n## About Coronavirus\n\n* Coronaviruses are **zoonotic** viruses (means transmitted between animals and people).  \n* Symptoms include from fever, cough, respiratory symptoms, and breathing difficulties. \n* In severe cases, it can cause pneumonia, severe acute respiratory syndrome (SARS), kidney failure and even death.\n* Coronaviruses are also asymptomatic, means a person can be a carrier for the infection but experiences no symptoms\n\n## Novel coronavirus (nCoV)\n* A **novel coronavirus (nCoV)** is a new strain that has not been previously identified in humans.\n\n## COVID-19 (Corona Virus Disease 2019)\n* Caused by a **SARS-COV-2** corona virus.  \n* First identified in **Wuhan, Hubei, China**. Earliest reported symptoms reported in **November 2019**. \n* First cases were linked to contact with the Huanan Seafood Wholesale Market, which sold live animals. \n* On 30 January the WHO declared the outbreak to be a Public Health Emergency of International Concern ","0e9b8b6f":"## Exponential Growth Curves\n\nThere are two sets of graphs in this section. \n\n### Growth Rate Percentage Over Time\n\nThe first is a plot of growth rate percentage over time. The graph starts on the 4th day because initial rates cannot be extimated. This graph is produced by generating curve fittings iteratively for the n days. This means that the a separate is calulated for days 1-4, 1-5, 1-6,...1-n. These calculated rates are then plotted over the number of days since the localized start.\n","c21efae7":"## Examining the Growth Curves\n\nThese distributions start off exponentially, but eventually become a logistic curve. We can plot them both ways, and then fit a non-linear regression to the curve to determine the rate.\n\nFirst we look at mortality curves. The trend to what for is an increasing mortality curve. This means that medical treatments are not controlling the virus well. This is true in Italy, which has an older population and seemed to be slow to respond in social distancing efforts. Compare Italy to South Korea, which had an agressive testing and treatment program, we see that Italy has a severe virus growth situation.\n\n### What these curves show\n\nThere are several groups of curves shown. They show:\n\n* Growth rate over time - this shows the daily growth rate for each region \n* Exponential growth for each region - there are separate plots for confirmed cases, deaths, and recovered\n* Logistic growth curves - these are for only the countries that have reached an inflection point\n\nThe growth curves also have the coefficents and errors for each coeffients. The second coefficient is the growth rate.\n\nYou may observe, at some point, where the daily arrival rates are to the right of the predicted curve. This is a good signal that the growth rate might be reaching an inflection point. Once this point is reached, the infection point, the growth rate will slow down, and the curve will be S-shaped, a sigmoid curve. This is a very good signal!\n\nThe infection point generally indicates that 50 percent of the cummulative cases have been reached.","1e1edde9":"### Growth Rates of Confirmed, Deaths, \n\nThere are three graphs in this section which show exponential growth rate of confirmed, deaths, and recovered. The head shows the current growth rate.\n\nYou can use the rule of 72 to find the doubling rate. As of March 20th, the confirmed growth rate for the United States is around 0.35. That means that the number of confirmed cases will double in just 2 days. *( 72\/35 = 2.06 )*","ad5e8d19":"https:\/\/www.kaggle.com\/imdevskp\/mers-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/sars-2003-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/western-africa-ebola-outbreak-analysis\n","122d74f4":"# Dataset","f969d686":"# Libraries","5e34af42":"### Import Libraries","58cfb320":"## Gaussian Approximation of Active Cases\n\nThe active cases should fairly clossly resemble a Gaussian distribution. While the derivate of a sigmoid function is not the Gaussian function, a Gaussian distribution is a close approximation.","f3960020":"The calculation of active cases is not accurate, because it does not include recovered. However it is useful in the gaussian plot.","7bcf32ed":"# COVID-19 - Understand Growth Patterns for Prediction \n\nThis notebook is intended to serve as an EDA for the current Kaggle competion on global forecasting of the spread of the coronvirus.\n\nI think it is important for everyone to understand the nature of the growth patterns of pandemics. There is an excellent Youtube video from [3Blue1Brown](https:\/\/www.youtube.com\/channel\/UCYO_jab_esuFRV4b17AJtAw) that offers a great explanation.\n\n### Understanding Growth Video Link\n\n![image.png](attachment:image.png)\n\nhttps:\/\/www.youtube.com\/watch?v=Kas0tIxDvrg&t=35s","b49e301e":"# Acknowledgements\n\nThis effort was inspired by an excellent Youtube video from [3Blue1Brown](https:\/\/www.youtube.com\/channel\/UCYO_jab_esuFRV4b17AJtAw)\n\n* Video - https:\/\/www.youtube.com\/watch?v=Kas0tIxDvrg&t=35s \n* Starting kernel - https:\/\/www.kaggle.com\/imdevskp\/covid-19-analysis-viz-prediction-comparisons\n* https:\/\/github.com\/CSSEGISandData\/COVID-19\n* https:\/\/arxiv.org\/ftp\/arxiv\/papers\/2003\/2003.05681.pdf\n\n","da03201c":"### Install"}}