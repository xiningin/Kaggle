{"cell_type":{"0caa3bbe":"code","43d6b737":"code","bfc15e92":"code","77f72d89":"code","e9f39e17":"code","303f690d":"code","f1e7a2d8":"code","a821050c":"code","2bd23de5":"code","30eba95b":"code","894961a7":"code","ecdd4977":"code","417f30f7":"code","0c4788b5":"code","8dee28b7":"code","f6067f2f":"code","4051d03d":"code","d84fb112":"code","cadd2328":"code","0644a73e":"code","3d776466":"code","06263ce3":"markdown","32537b56":"markdown","76bbc743":"markdown","c820a3f6":"markdown","99e4e90e":"markdown","c75f9b40":"markdown","531c945f":"markdown","d461526c":"markdown","77b41cdb":"markdown","bd4c63c5":"markdown","4ac4218b":"markdown","4ff19e8c":"markdown","bb111b3d":"markdown","94ee5a90":"markdown","8a9b6a31":"markdown","0b196ef8":"markdown","c35d80c9":"markdown","c41adc93":"markdown","9c6bdc5a":"markdown","15e13063":"markdown"},"source":{"0caa3bbe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","43d6b737":"import tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nimport tensorflow.keras.layers as L\nfrom tensorflow.keras.losses import SparseCategoricalCrossentropy\nfrom tensorflow.keras.optimizers import Adam\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport seaborn as sns\n\n\nimport numpy as np \nimport pandas as pd\n\nimport nltk\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.tokenize import TweetTokenizer\nfrom nltk.tokenize import word_tokenize \nfrom nltk.corpus import stopwords\n\nimport re","bfc15e92":"train = pd.read_csv('..\/input\/covid-19-nlp-text-classification\/Corona_NLP_train.csv',encoding='latin1')\ntest = pd.read_csv('..\/input\/covid-19-nlp-text-classification\/Corona_NLP_test.csv',encoding='latin1')\n\ntrain.head()","77f72d89":"print('Examples in train data: {}'.format(len(train)))\nprint('Examples in test data: {}'.format(len(test)))","e9f39e17":"train.isna().sum()","303f690d":"dist_train = train['Sentiment'].value_counts()\ndist_test = test['Sentiment'].value_counts()\n\ndef ditribution_plot(x,y,name):\n    fig = go.Figure([\n        go.Bar(x=x, y=y)\n    ])\n\n    fig.update_layout(title_text=name)\n    fig.show()","f1e7a2d8":"ditribution_plot(x= dist_train.index, y= dist_train.values, name= 'Class Distribution train')","a821050c":"ditribution_plot(x= dist_test.index, y= dist_test.values, name= 'Class Distribution test')","2bd23de5":"X = train['OriginalTweet'].copy()\ny = train['Sentiment'].copy()","30eba95b":"def data_cleaner(tweet):\n    \n    # remove urls\n    tweet = re.sub(r'http\\S+', ' ', tweet)\n    \n    # remove html tags\n    tweet = re.sub(r'<.*?>',' ', tweet)\n    \n    # remove digits\n    tweet = re.sub(r'\\d+',' ', tweet)\n    \n    # remove hashtags\n    tweet = re.sub(r'#\\w+',' ', tweet)\n    \n    # remove mentions\n    tweet = re.sub(r'@\\w+',' ', tweet)\n    \n    #removing stop words\n    tweet = tweet.split()\n    tweet = \" \".join([word for word in tweet if not word in stop_words])\n    \n    return tweet\n\n\nstop_words = stopwords.words('english')\n\nX_cleaned = X.apply(data_cleaner)\nX_cleaned.head()","894961a7":"tokenizer = Tokenizer()\ntokenizer.fit_on_texts(X_cleaned)\n\nX = tokenizer.texts_to_sequences(X_cleaned)\n\nvocab_size = len(tokenizer.word_index)+1\n\nprint(\"Vocabulary size: {}\".format(vocab_size))\nprint(\"\\nExample:\\n\")\nprint(\"Sentence:\\n{}\".format(X_cleaned[6]))\nprint(\"\\nAfter tokenizing :\\n{}\".format(X[6]))\n\nX = pad_sequences(X, padding='post')\nprint(\"\\nAfter padding :\\n{}\".format(X[6]))","ecdd4977":"encoding = {'Extremely Negative': 0,\n            'Negative': 0,\n            'Neutral': 1,\n            'Positive':2,\n            'Extremely Positive': 2\n           }\n\nlabels = ['Negative', 'Neutral', 'Positive']\n           \n\ny.replace(encoding, inplace=True)","417f30f7":"tf.keras.backend.clear_session()\n\n# hyper parameters\nEPOCHS = 2\nBATCH_SIZE = 32\nembedding_dim = 16\nunits = 256\n\nmodel = tf.keras.Sequential([\n    L.Embedding(vocab_size, embedding_dim, input_length=X.shape[1]),\n    L.Bidirectional(L.LSTM(units,return_sequences=True)),\n    L.GlobalMaxPool1D(),\n    L.Dropout(0.4),\n    L.Dense(64, activation=\"relu\"),\n    L.Dropout(0.4),\n    L.Dense(3)\n])\n\n\nmodel.compile(loss=SparseCategoricalCrossentropy(from_logits=True),\n              optimizer='adam',metrics=['accuracy']\n             )\n\nmodel.summary()","0c4788b5":"history = model.fit(X, y, epochs=EPOCHS, validation_split=0.12, batch_size=BATCH_SIZE)","8dee28b7":"fig = px.line(\n    history.history, y=['accuracy', 'val_accuracy'],\n    labels={'index': 'epoch', 'value': 'accuracy'}\n)\n\nfig.show()","f6067f2f":"fig = px.line(\n    history.history, y=['loss', 'val_loss'],\n    labels={'index': 'epoch', 'value': 'loss'}\n)\n\nfig.show()","4051d03d":"X_test = test['OriginalTweet'].copy()\ny_test = test['Sentiment'].copy()\n\nX_test = X_test.apply(data_cleaner)\n\nX_test = tokenizer.texts_to_sequences(X_test)\n\nX_test = pad_sequences(X_test, padding='post')\n\ny_test.replace(encoding, inplace=True)","d84fb112":"pred = model.predict_classes(X_test)","cadd2328":"loss, acc = model.evaluate(X_test,y_test,verbose=0)\nprint('Test loss: {}'.format(loss))\nprint('Test Accuracy: {}'.format(acc))","0644a73e":"conf = confusion_matrix(y_test, pred)\n\ncm = pd.DataFrame(\n    conf, index = [i for i in labels],\n    columns = [i for i in labels]\n)\n\nplt.figure(figsize = (12,7))\nsns.heatmap(cm, annot=True, fmt=\"d\")\nplt.show()","3d776466":"print(classification_report(y_test, pred, target_names=labels))","06263ce3":"<a class=\"anchor\" id=\"0.1\"><\/a>\n# Table of content\n1. [Import libraries](#01)\n2. [Dataset](#02)\n    - [Dataset size](#2.1)\n    - [Missing values](#2.2)\n3. [Class distribution](#3)\n    - [Train distribution](#3.1)\n    - [Test distribution](#3.2)\n4. [Data Preprocessing](#04)\n    - [Cleaning](#4.1)\n    - [Tokenizing](#4.2)\n    - [Feature encoding](#4.3)\n5. [Model building and training](#05)\n    - [Training history](#5.1)\n7. [Evaluation](#06)\n    - [Preprocessing test data](#6.1)\n    - [Accuracy and loss](#6.2)\n    - [Confussion matrix](#6.3)\n    - [Classification report](#6.4)","32537b56":"## Dataset <a class=\"anchor\" id=\"02\"><\/a>","76bbc743":"<a class=\"anchor\" id=\"3.2\"><\/a>","c820a3f6":"Model will start overfitting after 2 epochs","99e4e90e":"### Preprocessing test data <a class=\"anchor\" id=\"6.1\"><\/a>","c75f9b40":"### Cleaning <a class=\"anchor\" id=\"4.1\"><\/a>","531c945f":"### Classification report <a class=\"anchor\" id=\"6.4\"><\/a>","d461526c":"## Model building and training <a class=\"anchor\" id=\"05\"><\/a>","77b41cdb":"### Training history <a class=\"anchor\" id=\"5.1\"><\/a>","bd4c63c5":"### Confusion matrix <a class=\"anchor\" id=\"6.3\"><\/a>","4ac4218b":"<a class=\"anchor\" id=\"3.1\"><\/a>","4ff19e8c":"### Tokenizing <a class=\"anchor\" id=\"4.2\"><\/a>","bb111b3d":"## Class distribution <a class=\"anchor\" id=\"03\"><\/a>","94ee5a90":"## Evaluation <a class=\"anchor\" id=\"06\"><\/a>","8a9b6a31":"### Accuracy and loss <a class=\"anchor\" id=\"6.2\"><\/a>","0b196ef8":"## Data preprocessing <a class=\"anchor\" id=\"04\"><\/a>","c35d80c9":"## Import libraries <a class=\"anchor\" id=\"01\"><\/a>","c41adc93":"### Dataset size <a class=\"anchor\" id=\"2.1\"><\/a>","9c6bdc5a":"### Feature encoding <a class=\"anchor\" id=\"4.3\"><\/a>","15e13063":"### Missing values <a class=\"anchor\" id=\"2.2\"><\/a>"}}