{"cell_type":{"f4848c6b":"code","90fc7614":"code","74e39d8f":"code","defa10cf":"code","8ec73a09":"code","152a6988":"code","9c63f0c0":"code","565e390b":"code","cd2f64c1":"code","d5a4e4e7":"code","99193f93":"markdown","35694898":"markdown","4d008893":"markdown","e547e196":"markdown","1025ecd6":"markdown","2c7d1be9":"markdown"},"source":{"f4848c6b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90fc7614":"from geopy import distance\ndef calculate_distance(lat1, long1, lat2, long2):\n    user_loc = (lat1, long1)\n    venue_loc = (lat2, long2)\n    return distance.distance(user_loc, venue_loc).km","74e39d8f":"combinedf = pd.read_csv('..\/input\/prediction-preparation\/combine_user_venues.csv')\npartialdf = combinedf[combinedf['user_id'] == 1348362]\npartialdf.shape","defa10cf":"partialdf.nunique()","8ec73a09":"ratingsdf = pd.read_csv('..\/input\/data-exploration\/avgratings.csv')\nratedvenuesdf = ratingsdf[ratingsdf['user_id'] == 1348362]\nratedvenuesdf.head()","152a6988":"cond = partialdf['id'].isin(ratedvenuesdf['venue_id'])\npartialdf.drop(partialdf[cond].index, inplace = True)\npartialdf.shape","9c63f0c0":"partialdf['distance'] = partialdf.apply(lambda row : calculate_distance(row['user_latitude'], row['user_longitude'], row['latitude'], row['longitude']), axis=1)\npartialdf.head()","565e390b":"shortlistdf = partialdf[partialdf['distance'] < 80]\nshortlistdf.head()","cd2f64c1":"shortlistdf.shape","d5a4e4e7":"shortlistdf.to_csv('shortlist_user1.csv', index=False)","99193f93":"Write this to file: shortlist_user1.csv","35694898":"Define a distance function to find the straight line geographical distance between 2 points.","4d008893":"We will also like to remove venues that the user has rated already. So we have to compare to the saved avgratings file.","e547e196":"We're now going to process the large combine_user_venues.csv to get a shortlist of venues within 80km of each user","1025ecd6":"Check there's only 1 unique userid","2c7d1be9":"Start calculating distance between this user and all the remaining venues"}}