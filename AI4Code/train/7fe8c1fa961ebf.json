{"cell_type":{"96c267a5":"code","dfb95be4":"code","40639fd4":"code","3e6772f7":"code","a9dd6399":"code","ff54862a":"code","163e6bb6":"code","de93a0a4":"code","7392feee":"code","4777f716":"code","e7067c49":"code","8f540456":"markdown","269cbe71":"markdown","3e414592":"markdown","7bebfbbf":"markdown","1c80c3fd":"markdown"},"source":{"96c267a5":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport os","dfb95be4":"from keras.preprocessing.image import ImageDataGenerator\n\n##Data Preprocessing Training Set\ntrain_datagen = ImageDataGenerator(\n        rescale=1.\/255,\n        shear_range=0.2,\n        zoom_range=0.2\n        #vertical_flip=True\n    )\n\n\ntraining_set = train_datagen.flow_from_directory(\n        '\/kaggle\/input\/intel-image-classification\/seg_train\/seg_train\/',\n        target_size=(150,150),\n        batch_size=32, \n        class_mode='categorical')\n\n\n##Data Preprocessing Test Set\ntest_datagen = ImageDataGenerator(rescale=1.\/255) \ntest_set = test_datagen.flow_from_directory(\n        '\/kaggle\/input\/intel-image-classification\/seg_test\/seg_test',\n        target_size=(150,150),\n        batch_size=32,\n        class_mode='categorical')","40639fd4":"class_names_dict=training_set.class_indices\nclass_names_dict","3e6772f7":"class_indeces = pd.Series({v: k for k, v in class_names_dict.items()})\nprint(class_indeces)","a9dd6399":"##Building CNN\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import MaxPool2D\nfrom tensorflow.keras.layers import Flatten\n\ncnn=Sequential()\n\n#Step 1 Convolution\n#The first convolutional layer\ncnn.add(Conv2D(filters=32,kernel_size=3,activation='relu',input_shape=(150,150,3))) #filters\n\n#Step 2 Pooling\ncnn.add(MaxPool2D(pool_size=2,strides=2))\n\n#The Second Convolotional Layer\ncnn.add(Conv2D(filters=32,kernel_size=3,activation='relu')) \ncnn.add(MaxPool2D(pool_size=2,strides=2))\n\n#Step 3 Flattening\ncnn.add(Flatten())\n\n#Step 4 Full connection\ncnn.add(Dense(units = 128, activation = 'relu'))\ncnn.add(Dense(units = 128, activation = 'relu'))\n#Step 5 Output Layer\ncnn.add(Dense(units = 6, activation = 'softmax'))","ff54862a":"from tensorflow.keras.callbacks import ReduceLROnPlateau,EarlyStopping\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.05, patience=5, min_lr=0.000002) #Optimizing Learning Rate\nearly_stop = EarlyStopping(monitor='val_accuracy', patience=5)\ncnn.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\ncnn.summary()","163e6bb6":"history=cnn.fit(x=training_set,validation_data=test_set,epochs=25,callbacks=[reduce_lr,early_stop])","de93a0a4":"import matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\n%matplotlib inline","7392feee":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nsns.lineplot(epochs, acc, label='Training Accuracy')\nsns.lineplot(epochs, val_acc,label='Validation Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.legend()\nplt.figure()\n\nsns.lineplot(epochs, loss,label='Training Loss')\nsns.lineplot(epochs, val_loss, label='Validation Loss')\nplt.title('Training and Validation Loss')\nplt.legend()\n\nplt.show()","4777f716":"import glob\nimport random\nfrom keras.preprocessing import image\ntest_image_random = glob.glob('..\/input\/intel-image-classification\/seg_pred\/seg_pred\/*.jpg')\nimage_select = random.randint(1,len(test_image_random))\n#print(type(test_image_folder))\ntest_image=image.load_img(test_image_random[image_select],target_size=(150,150,3))\nplt.imshow(test_image)","e7067c49":"test_image=image.img_to_array(test_image)\ntest_image=np.expand_dims(test_image,axis=0)\nresult=cnn.predict_classes(test_image)\nanswer=class_indeces[result]\nprint(answer)","8f540456":"# Building CNN","269cbe71":"# Image Augmentation","3e414592":"# Graphs","7bebfbbf":"# Basic Libraries","1c80c3fd":"# Testing"}}