{"cell_type":{"dac02cf1":"code","27110e06":"code","70d29ab7":"code","80aee84a":"code","a9bd7240":"code","ace55996":"code","f24f3c6d":"code","5ae63ab1":"code","b3b09c8d":"code","6f5fb4e7":"code","54434284":"code","68c1c61a":"code","f98debcf":"code","c3b0e01c":"code","f4b0ba57":"code","7efd4ff6":"code","a15d649e":"code","0bb017a7":"code","e29c4444":"code","ab7c2444":"code","8a01f11f":"code","a02b2adf":"markdown","113d19cb":"markdown","5e2d13a1":"markdown","c69460f2":"markdown","0a02051a":"markdown","cff23792":"markdown","d7931d0c":"markdown","edc380d0":"markdown","8e32e508":"markdown","baaf2d73":"markdown","2575139f":"markdown","6460ee58":"markdown","ad874407":"markdown","2fc65b20":"markdown","eee2ef76":"markdown","f3eee469":"markdown","5261f9d2":"markdown","3fca3ed3":"markdown","a985532d":"markdown","007f8dd8":"markdown","466cf427":"markdown","56af63f6":"markdown","f345c8d6":"markdown","62704c97":"markdown","a6f9af80":"markdown","1632502d":"markdown","bf6235f8":"markdown","878bb1e0":"markdown","6c3d4369":"markdown","bb11b217":"markdown","9ed73646":"markdown","b2699e42":"markdown","c498158f":"markdown","9d1b3e27":"markdown"},"source":{"dac02cf1":"import numpy as np\n \nimport time\nimport sys\nS= range(1000)\nprint(sys.getsizeof(5)*len(S))\n \nD= np.arange(1000)\nprint(D.size*D.itemsize)","27110e06":"import time\nimport sys\n \nSIZE = 1000000\n \nL1= range(SIZE)\nL2= range(SIZE)\nA1= np.arange(SIZE)\nA2=np.arange(SIZE)\n \nstart= time.time()\nresult=[(x,y) for x,y in zip(L1,L2)]\nprint((time.time()-start)*1000)\n \nstart=time.time()\nresult= A1+A2\nprint((time.time()-start)*1000)","70d29ab7":"import numpy as np\na = np.array([(1,2,3),(4,5,6)])\nprint(\"Dimension is:-\",a.ndim)","80aee84a":"import numpy as np\na = np.array([(1,2,3)])\nprint(\"Itemsize is:-\",a.itemsize)","a9bd7240":"import numpy as np\na = np.array([(1,2,3)])\nprint(\"DataType is:-\",a.dtype)","ace55996":"import numpy as np\na = np.array([(1,2,3,4,5,6)])\nprint(\"Shape is:-\",a.shape)","f24f3c6d":"import numpy as np\na=np.array([(1,2,3,4),(3,4,5,6)])\nprint(a[0,2])","5ae63ab1":"import numpy as np\na=np.array([(1,2,3,4),(3,4,5,6)])\nprint(a[0:,2])","b3b09c8d":"import numpy as np\na=np.array([(8,9),(10,11),(12,13)])\nprint(a[0:2,1])","6f5fb4e7":"import numpy as np\na=np.linspace(1,3,10)\nprint(\"Result is:-\\n\",a)","54434284":"import numpy as np\na= np.array([1,2,3])\nprint(\"Mininmum is:\",a.min())\nprint(\"Maximum is:\",a.max())","68c1c61a":"import numpy as np\na= np.array([1,2,3])\nprint(\"Sum is:-\",a.sum())","f98debcf":"import numpy as np\na= np.array([(1,2,3),(3,4,5)])\nprint(a.sum(axis=0))","c3b0e01c":"import numpy as np\na=np.array([(1,2,3),(3,4,5,)])\nprint(\"Square root:-\\n\",np.sqrt(a))\nprint(\"Standard Deviation:-\",np.std(a))","f4b0ba57":"import numpy as np\nx= np.array([(1,2,3),(3,4,5)])\ny= np.array([(1,2,3),(3,4,5)])\nprint(\"Addition is:-\\n\",x+y)","7efd4ff6":"import numpy as np\nx= np.array([(1,2,3),(3,4,5)])\ny= np.array([(1,2,3),(3,4,5)])\nprint(\"Subtracting is:-\\n\",x-y)\nprint(\"Multiplication is:-\\n\",x*y)\nprint(\"Division is:-\\n\",x\/y)","a15d649e":"import numpy as np\nx= np.array([(1,2,3),(3,4,5)])\ny= np.array([(1,2,3),(3,4,5)])\nprint(\"Vertical Stacking is:-\\n\",np.vstack((x,y)))\nprint(\"Horizontal Stacking is:-\\n\",np.hstack((x,y)))","0bb017a7":"import numpy as np\nx= np.array([(1,2,3),(3,4,5)])\nprint(\"Result is:-\",x.ravel())","e29c4444":"a= np.array([1,2,3])\nprint(\"Exponential Functions is:-\",np.exp(a))","ab7c2444":"import numpy as np\nimport matplotlib.pyplot as plt\na= np.array([1,2,3])\nprint(\"Log Functions is:-\",np.log(a))","8a01f11f":"import numpy as np\nimport matplotlib.pyplot as plt\na= np.array([1,2,3])\nprint(\"Log10 Functions is:-\",np.log10(a))","a02b2adf":"# 12)Vertical & Horizontal Stacking:-\n* Next, if you want to concatenate two arrays and not just add them, you can perform it using two ways \u2013 vertical stacking and horizontal stacking. \n* Let me show it one by one in this python numpy tutorial.","113d19cb":"* The above output shows that the memory allocated by list (denoted by S) is 28000 whereas the memory allocated by the NumPy array is just 8000. \n* From this, you can conclude that there is a major difference between the two and this makes Python NumPy array as the preferred choice over list.","5e2d13a1":"* In the above code, we have defined two lists and two numpy arrays. \n* Then, we have compared the time taken in order to find the sum of lists and sum of numpy arrays both. If you see the output of the above program, there is a significant change in the two values. \n* List took 560ms whereas the numpy array took almost 55ms. Hence, numpy array is faster than list. ","c69460f2":"**Thank You for your time.....Happy Learning.....**","0a02051a":"# **7).linspace:-**\n\nThis is another operation in python numpy which returns evenly spaced numbers over a specified interval. Consider the below example:","cff23792":"# **8).max\/.min:-**\n\n\nNext, we have some more operations in numpy such as to find the minimum, maximum as well the sum of the numpy array. ","d7931d0c":"> **a)Exp Functions:-**","edc380d0":"Next, just to remove the confusion, let\u2019s say we have one more row and we don\u2019t want to get its 2nd element printed just as the image above. What we can do in such case?\nConsider the below code:","8e32e508":"# **4).shape:-**\n     \n     \nYou can find the shape of the data.","baaf2d73":"# Explanation Part:-\n\n* The very first reason to choose python NumPy array is that it occupies less memory as compared to list. \n* Then, it is pretty fast in terms of execution and at the same time, it is very convenient to work with NumPy. \n* So these are the major advantages that Python NumPy array has over list. \n* Don\u2019t worry, I am going to prove the above points one by one practically in PyCharm. \n* Consider the below example:-","2575139f":"> **c)Calculate Log10:-**","6460ee58":"# ------------------------NUMPY------------------------","ad874407":"Taking one step forward, let\u2019s say we need the 2nd element from the zeroth and first index of the array. Let\u2019s see how you can perform this operation:","2fc65b20":"# **5).reshape:-**\n\nReshape is when you change the number of rows and columns which gives a new view to an object. \n\n\n\n![](https:\/\/d1jnx9ba8s6j9r.cloudfront.net\/blog\/wp-content\/uploads\/2017\/06\/Reshape.jpg)","eee2ef76":"# 11)Addition Operation:-\n\n* You can perform more operations on numpy array i.e addition, subtraction,multiplication and division of the two matrices. \n* Let me go ahead in python numpy tutorial, and show it to you practically:- ","f3eee469":"# **9).sum:-**\n\nTo add up all the values in a array.","5261f9d2":"let\u2019s see a simple one. We have an array and we need a particular element (say 3) out of a given array.","3fca3ed3":"* As you can see in the figure, we have a numpy array 2*3. Here the rows are called as axis 1 and the columns are called as axis 0. Now you must be wondering what is the use of these axis?\n\n* Suppose you want to calculate the sum of all the columns, then you can make use of axis. Let me show you practically.","a985532d":"# **1).ndim:-**\n     \nYou can find the dimension of the array, whether it is a two-dimensional array or a single dimensional array. \n     \n     \n     \n     \n![](https:\/\/d1jnx9ba8s6j9r.cloudfront.net\/blog\/wp-content\/uploads\/2017\/06\/numpy-array-150x148.jpg)     ","007f8dd8":"# Python NumPy Operations:-","466cf427":"Hey Folks,\n\n**Please vote up if you like this notebook. Also, try to refer to all other notebooks avaliable attached to my profile.**\n\n\n\nLet get started....\n\n> In this Python NumPy Notebook, you will understand each aspect of Numpy.\n\n> NumPy is a Python package that stands for \u2018Numerical Python\u2019. It is the core library for scientific computing, which contains a powerful n-dimensional array object.\n\n> Numpy array is a powerful N-dimensional array object which is in the form of rows and columns. We can initialize NumPy arrays from nested Python lists and access it elements.\n\n> To install Python NumPy, go to your command prompt and type **\u201cpip install numpy\u201d**. Once the installation is completed, go to your IDE (For example: PyCharm) and simply import it by typing: **\u201cimport numpy as np\u201d**.\n\n> We use python NumPy array instead of a list because of the below three reasons:\n\n> > Less Memory.\n\n> > Fast.\n\n> > Convenient.\n\n","56af63f6":"# 13)ravel:-\n\n* There is one more operation where you can convert one numpy array into a single column i.e ravel.\n* Let me show how it is implemented practically.","f345c8d6":"You must be finding these pretty basic, but with the help of this knowledge you can perform a lot bigger tasks as well. Now, lets understand the concept of axis in python numpy.","62704c97":"Therefore, the sum of all the columns are added where 1+3=4, 2+4=6 and 3+5=8. \nSimilarly, if you replace the axis by 1, then it will print [4 6 8] where all the rows get added.","a6f9af80":"Next, let\u2019s talk how python NumPy array is faster and more convenient when compared to list.","1632502d":"# 14)Exponential and Logarithmic function:\n\n* Now in exponential, the e value is somewhere equal to 2.7 and in log, it is actually log base 10.\n* When we talk about natural log i.e log base e, it is referred as Ln. So let\u2019s see how it is implemented practically:","bf6235f8":"# 6)Slicing:-\n* As you can see the \u2018reshape\u2019 function has showed its magic. \n* Now, let\u2019s take another operation i.e Slicing. \n* Slicing is basically extracting particular set of elements from an array. \n* This slicing operation is pretty much similar to the one which is there in the list as well. \n* Consider the following example:\n\n\n\n![](https:\/\/d1jnx9ba8s6j9r.cloudfront.net\/blog\/wp-content\/uploads\/2017\/06\/Slicing.jpg)","878bb1e0":"![](https:\/\/d1jnx9ba8s6j9r.cloudfront.net\/blog\/wp-content\/uploads\/2017\/06\/array-300x245.png)","6c3d4369":"# **3).dtype:-**\n     \n     \nYou can find the data type of the elements that are stored in an array.\n     \n     \n     \n     \n![](https:\/\/d1jnx9ba8s6j9r.cloudfront.net\/blog\/wp-content\/uploads\/2017\/06\/numpy-datatype.png-150x90.jpg) ","bb11b217":"# **2).itemsize:-**\n     \nYou can calculate the byte size of each element.\n     \n     \n     \n     \n![](https:\/\/www.edureka.co\/blog\/wp-content\/uploads\/2017\/06\/Numpy-byte.png) ","9ed73646":"By this, we come to the end of this python numpy tutorial. \nWe have covered all the basics of python numpy, so you can start practicing now. ","b2699e42":"# 10)Square Root & Standard Deviation:-\n\n* There are various mathematical functions that can be performed using python numpy. \n* You can find the square root, standard deviation of the array. So, let\u2019s implement these operations: ","c498158f":"> **b)Calculate log:-**","9d1b3e27":"* This is extremely simple! Right? Similarly, we can perform other operations such as subtraction, multiplication and division. Consider the below example:"}}