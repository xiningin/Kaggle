{"cell_type":{"b92715be":"code","9b6cf74b":"code","8492ed9c":"code","d4c12865":"code","3b9908ff":"code","232346f3":"code","6c46fda8":"code","3e7ed6cf":"markdown"},"source":{"b92715be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b6cf74b":"df = pd.read_csv('..\/input\/laptop-price\/laptop_price.csv', encoding='latin-1')\ndf #examine","8492ed9c":"#do the easiest one first\n#drop the GB from ram, and change it to numeric value\ndf['Ram'] = df['Ram'].replace('[GB]', '', regex=True)\ndf['Ram'] = pd.to_numeric(df['Ram'])\ndf.rename(columns={'Ram':'Ram (GB)'}, inplace=True)\n\n#now Weight\n#remove the 'KG' and change to numeric\ndf['Weight'] = df['Weight'].replace('[kg]', '', regex=True)\ndf['Weight'] = pd.to_numeric(df['Weight'])\ndf.rename(columns={'Weight':'Weight (Kg)'}, inplace=True)\n\n#Now for the Memory (the storage)\n#it contains the memory size in either GB or TB\n#Followed by the storage Type, either SSD, HDD, or Flash Storage\n#so we need to split the memory by size and the type first\n#assign size in the memory column (replace the original) and type in a new column called storage type\n#then drop the size abbreviation in memory column and change it to numeric\n\n#first split at fist space to get size and type\nsplit_mem = df['Memory'].str.split(' ', 1, expand=True)\nsplit_mem\n#now assign the new columns to original DF\ndf['Storage Type'] = split_mem[1]\ndf['Memory'] = split_mem[0]\n\n\n#now change the memory into numeric \n#okay since the size is either in GB or TB, we can drop the abbrev for now\n#and later we perhaps want to convert the TB into GB (1TB into 1024GB)\n#since its either GB or TB we cant replace it with empty space, we need to do strsplit\n\n#put the split into temporary df\ndf_mem= df['Memory'].str.split('(\\d+)',  expand=True)\n\n#assign it back\ndf['Memory'] = pd.to_numeric(df_mem[1])\ndf.rename(columns={'Memory':'Memory (GB or TB)'}, inplace=True)\n\n\n#last thing, convert the TB into GB\n#lets check the disticnt value\ndf['Memory (GB or TB)'].unique()\n#the result [128, 256, 512, 500,   1,  32,  64,   2,  16, 180, 240,   8, 508]\n\n#okay we we now if its more than 1 digit number, it must be in GB otherwise its in TB\n#but there is number 8 here, could it be 8GB storage or 8tb storage?\n#lets check first\n\ndf[df['Memory (GB or TB)'] == 8]\n#it is 8GB SSD, so 16 must be in GB aswell\n\n#now we only need to change 1 and 2 into 1024 and 2048 respectively\ndef mem(x):\n    if x == 1:\n        return 1024\n    elif x == 2:\n        return 2048\ndf['Memory (GB or TB)'] = df['Memory (GB or TB)'].apply(lambda x: 1024 if x==1 else x)\ndf['Memory (GB or TB)'] = df['Memory (GB or TB)'].apply(lambda x: 2048 if x==2 else x)\ndf.rename(columns={'Memory (GB or TB)':'Memory (GB)'}, inplace=True)\n\n#now lets examine the data for now\ndf","d4c12865":"#Now for CPU\n#there are 3 information in the string\n#for example Intel Core i7 6500U 2.5GHz or Intel Celeron Dual Core N3050 1.6GHz\n# first part is the vendor either intel or amd\n#the second part is the model (e.g Core i7 6500u, Celeron Dual Core N3050)\n#The third part is the CPU speed in Ghz (2.5Ghz, 1.6Ghz)\n\n#lets do this one by one to not get confuse\n#first thing first, lets split by first space then put the cpu vendor into new column\nsplit_vendor = df['Cpu'].str.split(' ', 1, expand=True)\nsplit_vendor\n#now assign the new columns to original DF\ndf['Cpu Vendor'] = split_vendor[0]\ndf['Cpu'] = split_vendor[1]\n\n\n#next Lets take out the cpu speed\n\nsplit_type= df['Cpu'].str.split(' ', 1, expand=True)\nsplit_type\n#now assign the new columns to original DF\ndf['Cpu Type'] = split_type[0]\ndf['Cpu'] = split_type[1]\n\n#now we are going to take the cpu speed, this time we dont do expand=True\n#regular split will just return list instead of new dataframe without expand=True\n#but if we want to take the value in list inside of the data frame we need to use str.get() instead of [] \ndf['Cpu'] = df['Cpu'].str.split()\ndf['Cpu Speed'] = df['Cpu'].str.get(-1)\n\ntemp = list(df['Cpu'])\ntemp_2 = []\nfor i in temp:\n    del i[-1]\n    temp_2.append(i)\ntemp_3 = []\nfor i in temp_2:\n    temp_3.append(\" \".join(i))\ndf['Cpu'] = temp_3\n\n\n#now lets split Cpu speed\ndf['Cpu Speed'] = df['Cpu Speed'].replace('[GHz]', '', regex=True)\ndf['Cpu Speed'] = pd.to_numeric(df['Cpu Speed'])\ndf.rename(columns={'Cpu Speed':'Cpu Speed (GHz)'}, inplace=True)\n\n#examine again\ndf","3b9908ff":"#separating CPU model and series, e.g i5 7200u, Series i5, model 7200u. if no series, write unspecified\n#we dont use expand because cpu without series only has length of 1, and also there is dual core with space\n\n#Ryzen is abit different\n#if ryzen 1600 means ryzen 5 1600, if 1700, means ryzen 7 1700\n#only ryzen 5 and 7 are available, no ryzen 3\n\ncpu_split = list(df['Cpu'].str.split())\n#df['Cpu Model'] = df['Cpu'].str.get(-1)\ncpu_model_true = []\nfor i in cpu_split:\n    if len(i) == 1 and i[0] not in ['1600', '1700']:\n        cpu_model_true.append('Unspecified')\n    elif len(i) == 1 and i[0] in ['1600', '1700']:\n        if i[0] == '1600':\n            cpu_model_true.append('1600')\n        elif i[0] == '1700':\n            cpu_model_true.append('1700')\n    #elif len(i) > 1 and '-' in i[1]: #APU check\n        #cpu_series.append([i[1].split('-')[-1]]) #add apu series code\n    else:\n        cpu_model_true.append(i[-1])\ndf['Cpu Model'] = cpu_model_true\n\n\n\n#now for CPU series\n#delete model to get cpu series from cpu_split list\n\n#heads up, for ryzen dont have any series, we are going to add the ryzen series\n#if ryzen 1600 means ryzen 5 1600, if 1700, means ryzen 7 1700\n#only ryzen 5 and 7 are available, no ryzen 3\n\n#and also for APU series, some series are writen A9-9420\n#eventhough 9420 is the model, we have to split this by '-'\n\ncpu_series = []\nfor i in cpu_split:\n    if len(i) == 1 and i[0] not in ['1600', '1700']: #and '-' not in i[0]: #ryzen and apu check\n        cpu_series.append(i)\n    elif len(i) == 1 and i[0] in ['1600', '1700']: #ryzen check\n        if i[0] == '1600':\n            cpu_series.append(['5']) #ryzen add\n        elif i[0] == '1700':\n            cpu_series.append(['7']) #ryzen add\n    #elif len(i) == 1 and '-' in i[0]: #APU check\n        #cpu_series.append([i[0].split('-')[0]]) #add apu series code\n    else:\n        del i[-1]\n        cpu_series.append(i)\n    \ncpu_series_join = []\nfor i in cpu_series:\n    cpu_series_join.append(\" \".join(i))\ndf['Cpu Series'] = cpu_series_join\n\n\n\n#rearrange column and delete cpu column\n#drop cpu column\ndf = df.drop('Cpu', 1)\n#rearrange\ndf = df[['laptop_ID',\n 'Company',\n 'Product',\n 'TypeName',\n 'Inches',\n 'ScreenResolution',\n 'Cpu Vendor',\n 'Cpu Type',\n 'Cpu Series',        \n 'Cpu Model',        \n 'Cpu Speed (GHz)',\n 'Ram (GB)',\n 'Storage Type',        \n 'Memory (GB)',\n 'Gpu',\n 'OpSys',\n 'Weight (Kg)',        \n 'Price_euros']]\ndf","232346f3":"#for the time being, we are done with CPU\n#Move to:\n#Screen Resoultion column needs to be split between reso, and panel\n#if they dont have panel type, e.g only 'full hd' in description then panel is 'unspecified'\n\n#GPu needs to be split by gpu vendor, model, series, and so on\n\n[list(df['ScreenResolution'].unique())] #check distinct values in screenreso\n\ntemp_reso= df['ScreenResolution'].str.split(\" \") #temporary series for screen reso\ndf['Reso'] = temp_reso.str.get(-1) #getting screen reso only\n\n#now lets split RESO into Screen Width and Screen Height\ndf[['Screen Width', 'Screen Height']] = df['Reso'].str.split('x', expand=True) #split and put them into respective column instantly\n\n#create screen type, its either ips or not 'unspecified'\ndf['Screen Type'] = df['ScreenResolution'].apply(lambda x : 'IPS' if 'IPS' in x else 'Unspecified')\n\n#this is where i am confused\n#should i create new features called Screen Quality for (HD, FUll HD, Quad HD, and ULTRA HD)\n#but there is some screen reso that i dont understand which category should i fall to\n#like example 1920x1080 is obviusly full hd, but 2736x1824 which category should it fall to?\n#even https:\/\/en.wikipedia.org\/wiki\/Display_resolution doesnt have explaantion for it\n#i think i'm done for screenresolution for the time being\n#i made features : Reso, Screen Width, Screen Height, and Screen Type\n\n#SO lets move to GPU for the time being\n\n#create GPU vendor\ntemp_df001 = df['Gpu'].str.split()\ndf['Gpu Vendor'] = temp_df001.str.get(0)\n\n#create Gpu Model\ndf_temp002 = list(df['Gpu'].str.split())\ndf_temp002\n\ndf_temp003 = []\nfor i in df_temp002:\n    df_temp003.append(\" \".join(i[1:]))\ndf_temp003\n\ndf['Gpu Model'] = df_temp003\n\n#rearrange\ndf = df[['laptop_ID', 'Company', 'Product', 'TypeName', 'Inches',\n    'ScreenResolution', 'Reso', 'Screen Width', 'Screen Height', 'Screen Type',\n    'Cpu Vendor', 'Cpu Type', 'Cpu Series', 'Cpu Model',\n    'Cpu Speed (GHz)', 'Ram (GB)', 'Storage Type', 'Memory (GB)', 'Gpu', 'Gpu Vendor', 'Gpu Model',\n    'OpSys', 'Weight (Kg)',   'Price_euros']]\ndf","6c46fda8":"#okay done for the time being with datacleaning\n#i should  add this to kaggle and ask for advice for the problem i encounter\n#1. CPU AMD still needs cleaning but i confuse as how to\n#2. GPU MOdel still needs to be separated \n#3. Do i need to add Screen Type? like HD, FHD and soon. but there is still screeb reso that i\n#do not know which its belong to. like 2736x1824 which category should it fall to? i had check wiki but no answer","3e7ed6cf":"# Laptop price initial data cleaning"}}