{"cell_type":{"d24c3f8d":"code","3b625b6e":"code","6baf8105":"code","c64da14a":"code","ce45774b":"code","f790898e":"code","75d3e4a7":"code","979f06cd":"code","8be3e086":"code","bcb8d7cd":"code","a4351a40":"code","a679cbbb":"code","bcdbb262":"code","e8e779f1":"code","f5000b9f":"code","5f99421b":"markdown","6081bde5":"markdown"},"source":{"d24c3f8d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data Visualization\nimport seaborn as sns # data Visualization\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3b625b6e":"#Importing the datasets\ndf_train = pd.read_csv('\/kaggle\/input\/cat-in-the-dat-ii\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/cat-in-the-dat-ii\/test.csv')\ndf_sub = pd.read_csv('\/kaggle\/input\/cat-in-the-dat-ii\/sample_submission.csv')","6baf8105":"sns.countplot(x=df_train['target'], data=df_train)\nplt.title(\"TARGET DISTRIBUTION\", fontsize = 20)\nplt.xlabel(\"Target Values\", fontsize = 15)\nplt.ylabel(\"Count\", fontsize = 15)\nplt.show()","c64da14a":"df_train.sort_index(inplace=True)\ndf_train.head()","ce45774b":"y_train = df_train['target']\ntest_id = df_test['id']\ndf_train.drop(['target', 'id'], axis=1, inplace=True)\ndf_test.drop('id', axis=1, inplace=True)","f790898e":"cat_feat_to_encode = df_train.columns.tolist()\nsmoothing=0.20\nimport category_encoders as ce\noof = pd.DataFrame([])\nfrom sklearn.model_selection import StratifiedKFold\nfor tr_idx, oof_idx in StratifiedKFold(n_splits=5, random_state= 1024, shuffle=True).split(df_train, y_train):\n    ce_target_encoder = ce.TargetEncoder(cols = cat_feat_to_encode, smoothing=smoothing)\n    ce_target_encoder.fit(df_train.iloc[tr_idx, :], y_train.iloc[tr_idx])\n    oof = oof.append(ce_target_encoder.transform(df_train.iloc[oof_idx, :]), ignore_index=False)\nce_target_encoder = ce.TargetEncoder(cols = cat_feat_to_encode, smoothing=smoothing)\nce_target_encoder.fit(df_train, y_train)\ndf_train = oof.sort_index()\ndf_test = ce_target_encoder.transform(df_test)","75d3e4a7":"#Lets take our matrics of features\nx_train = df_train.iloc[:,:].values\nx_test = df_test.iloc[:,:].values","979f06cd":"from sklearn.utils import class_weight\ncw = class_weight.compute_class_weight('balanced',np.unique(y_train),y_train)","8be3e086":"#Import Keras model for NN\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.callbacks import EarlyStopping","bcb8d7cd":"# define model\nclassifier = Sequential()\nclassifier.add(Dense(units = 512, kernel_initializer = 'uniform', activation = 'relu', input_dim = 23))\nclassifier.add(Dense(units = 256, kernel_initializer = 'uniform', activation = 'relu'))\nclassifier.add(Dense(units = 128, kernel_initializer = 'uniform', activation = 'relu'))\nclassifier.add(Dense(units = 64, kernel_initializer = 'uniform', activation = 'relu'))\nclassifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\nclassifier.compile(loss=keras.losses.binary_crossentropy,\n              optimizer=keras.optimizers.Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, amsgrad=False))","a4351a40":"# Applying early stopping\nes = EarlyStopping(monitor='val_loss', mode='min', verbose=1)","a679cbbb":"# Fitting the ANN to the Training set\nclassifier.fit(x_train, y_train, batch_size = 1000, epochs = 100, verbose=0,callbacks=[es], class_weight=cw)","bcdbb262":"#Predicting the Test set result\ny_pred = classifier.predict_proba(x_test)[:,0]","e8e779f1":"#Sumbmission the result\ndf_sub = pd.DataFrame()\ndf_sub['id'] = test_id\ndf_sub['target'] = y_pred\ndf_sub.to_csv('submission.csv', index=False)","f5000b9f":"df_sub.head(20)","5f99421b":"Check the target variable","6081bde5":"From above graph we note that target variable is not balanced"}}