{"cell_type":{"bf3ccc6d":"code","f7c695e1":"code","e3c9c547":"code","5b5d36fe":"code","2b4ac2ff":"code","ba0c8ab2":"code","0c529d43":"code","17e9c6c1":"code","fbdb9148":"code","fca57893":"code","2132daeb":"code","14f81e90":"code","f9826444":"code","86b0cdba":"code","a8582f2c":"code","c4000d7c":"code","beebe1f0":"code","ae371969":"code","fd0f7695":"code","9e84c2da":"code","93bb8aaa":"code","0b2d1931":"code","fc5a8d51":"code","ac1ccec1":"code","7d3daeca":"code","99d89592":"code","2bfdc545":"code","278f12ee":"code","bd150a5e":"code","3ebf1513":"code","aa5fa25a":"code","28ca9777":"code","8fc2aa25":"code","74c5c0d0":"markdown","2f44cc0b":"markdown"},"source":{"bf3ccc6d":"import numpy as np\nimport matplotlib.pyplot as plt","f7c695e1":"import pandas as pd\napplication_test = pd.read_csv(\"..\/input\/home-credit-default-risk\/application_test.csv\")\napplication_train = pd.read_csv(\"..\/input\/home-credit-default-risk\/application_train.csv\")\nbureau_balance = pd.read_csv(\"..\/input\/home-credit-default-risk\/bureau_balance.csv\")\nbureau = pd.read_csv(\"..\/input\/home-credit-default-risk\/bureau.csv\")\ncredit_card_balance = pd.read_csv(\"..\/input\/home-credit-default-risk\/credit_card_balance.csv\")\n# HomeCredit_columns_description = pd.read_csv(\"..\/input\/home-credit-default-risk\/HomeCredit_columns_description.csv\")\ninstallments_payments = pd.read_csv(\"..\/input\/home-credit-default-risk\/installments_payments.csv\")\nPOS_CASH_balance = pd.read_csv(\"..\/input\/home-credit-default-risk\/POS_CASH_balance.csv\")\nprevious_application = pd.read_csv(\"..\/input\/home-credit-default-risk\/previous_application.csv\")\nsample_submission = pd.read_csv(\"..\/input\/home-credit-default-risk\/sample_submission.csv\")","e3c9c547":"((application_train['TARGET'] == 0) & (application_train['CODE_GENDER'] == 'M')).sum()","5b5d36fe":"height = np.array([((application_train['TARGET'] == 0) & (application_train['CODE_GENDER'] == 'M')).sum(),\n                   ((application_train['TARGET'] == 1) & (application_train['CODE_GENDER'] == 'M')).sum(),\n                   ((application_train['TARGET'] == 0) & (application_train['CODE_GENDER'] == 'F')).sum(),\n                   ((application_train['TARGET'] == 1) & (application_train['CODE_GENDER'] == 'F')).sum()])\nleft = np.array([1, 2, 3, 4])\nlabel = ['0 & M', '1 & M', '0 & F', '1 & F']\n\nplt.bar(left, height, tick_label=label, align='center')\nplt.show()\nprint(height[1]\/(height[0]+height[1]))\nprint(height[3]\/(height[2]+height[3]))","2b4ac2ff":"application_train.NAME_EDUCATION_TYPE.unique()","ba0c8ab2":"height = np.array([((application_train['TARGET'] == 0) & (application_train['NAME_EDUCATION_TYPE'] == 'Secondary \/ secondary special')).sum(),\n                  ((application_train['TARGET'] == 1) & (application_train['NAME_EDUCATION_TYPE'] == 'Secondary \/ secondary special')).sum(),\n                  ((application_train['TARGET'] == 0) & (application_train['NAME_EDUCATION_TYPE'] == 'Higher education')).sum(),\n                  ((application_train['TARGET'] == 1) & (application_train['NAME_EDUCATION_TYPE'] == 'Higher education')).sum(),\n                  ((application_train['TARGET'] == 0) & (application_train['NAME_EDUCATION_TYPE'] == 'Incomplete higher')).sum(),\n                  ((application_train['TARGET'] == 1) & (application_train['NAME_EDUCATION_TYPE'] == 'Incomplete higher')).sum(),\n                  ((application_train['TARGET'] == 0) & (application_train['NAME_EDUCATION_TYPE'] == 'Lower secondary')).sum(),\n                  ((application_train['TARGET'] == 1) & (application_train['NAME_EDUCATION_TYPE'] == 'Lower secondary')).sum(),\n                  ((application_train['TARGET'] == 0) & (application_train['NAME_EDUCATION_TYPE'] == 'Academic degree')).sum(),\n                  ((application_train['TARGET'] == 1) & (application_train['NAME_EDUCATION_TYPE'] == 'Academic degree')).sum()])","0c529d43":"left = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nplt.bar(left, height, align='center')\nplt.show()\nprint(height[1]\/(height[0]+height[1]))\nprint(height[3]\/(height[2]+height[3]))\nprint(height[5]\/(height[4]+height[5]))\nprint(height[7]\/(height[6]+height[7]))\nprint(height[9]\/(height[8]+height[9]))","17e9c6c1":"application_train.NAME_INCOME_TYPE.unique()","fbdb9148":"height = np.array([((application_train['TARGET'] == 0) & (application_train['NAME_INCOME_TYPE'] == 'Working')).sum(),\n                  ((application_train['TARGET'] == 1) & (application_train['NAME_INCOME_TYPE'] == 'Working')).sum(),\n                  ((application_train['TARGET'] == 0) & (application_train['NAME_INCOME_TYPE'] == 'State servant')).sum(),\n                  ((application_train['TARGET'] == 1) & (application_train['NAME_INCOME_TYPE'] == 'State servant')).sum(),\n                  ((application_train['TARGET'] == 0) & (application_train['NAME_INCOME_TYPE'] == 'Commercial associate')).sum(),\n                  ((application_train['TARGET'] == 1) & (application_train['NAME_INCOME_TYPE'] == 'Commercial associate')).sum(),\n                  ((application_train['TARGET'] == 0) & (application_train['NAME_INCOME_TYPE'] == 'Pensioner')).sum(),\n                  ((application_train['TARGET'] == 1) & (application_train['NAME_INCOME_TYPE'] == 'Pensioner')).sum(),\n                  ((application_train['TARGET'] == 0) & (application_train['NAME_INCOME_TYPE'] == 'Unemployed')).sum(),\n                  ((application_train['TARGET'] == 1) & (application_train['NAME_INCOME_TYPE'] == 'Unemployed')).sum(),\n                  ((application_train['TARGET'] == 0) & (application_train['NAME_INCOME_TYPE'] == 'Student')).sum(),\n                  ((application_train['TARGET'] == 1) & (application_train['NAME_INCOME_TYPE'] == 'Student')).sum(),\n                  ((application_train['TARGET'] == 0) & (application_train['NAME_INCOME_TYPE'] == 'Businessman')).sum(),\n                  ((application_train['TARGET'] == 1) & (application_train['NAME_INCOME_TYPE'] == 'Businessman')).sum(),\n                  ((application_train['TARGET'] == 0) & (application_train['NAME_INCOME_TYPE'] == 'Maternity leave')).sum(),\n                  ((application_train['TARGET'] == 1) & (application_train['NAME_INCOME_TYPE'] == 'Maternity leave')).sum()])","fca57893":"left = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\nplt.bar(left, height, align='center')\nplt.show()\nprint(height[1]\/(height[0]+height[1]))\nprint(height[3]\/(height[2]+height[3]))\nprint(height[5]\/(height[4]+height[5]))\nprint(height[7]\/(height[6]+height[7]))\nprint(height[9]\/(height[8]+height[9]))\nprint(height[11]\/(height[10]+height[12]))\nprint(height[13]\/(height[12]+height[13]))\nprint(height[15]\/(height[14]+height[15]))","2132daeb":"height = np.array([((application_train['TARGET'] == 0) & (application_train['REGION_RATING_CLIENT_W_CITY'] == 1)).sum(),\n                  ((application_train['TARGET'] == 1) & (application_train['REGION_RATING_CLIENT_W_CITY'] == 1)).sum(),\n                  ((application_train['TARGET'] == 0) & (application_train['REGION_RATING_CLIENT_W_CITY'] == 2)).sum(),\n                  ((application_train['TARGET'] == 1) & (application_train['REGION_RATING_CLIENT_W_CITY'] == 2)).sum(),\n                  ((application_train['TARGET'] == 0) & (application_train['REGION_RATING_CLIENT_W_CITY'] == 3)).sum(),\n                  ((application_train['TARGET'] == 1) & (application_train['REGION_RATING_CLIENT_W_CITY'] == 3)).sum()])","14f81e90":"left = np.array([1, 2, 3, 4, 5, 6])\nplt.bar(left, height, align='center')\nplt.show()\nprint(height[1]\/(height[0]+height[1]))\nprint(height[3]\/(height[2]+height[3]))\nprint(height[5]\/(height[4]+height[5]))","f9826444":"application_train['AGE'] = -(application_train.DAYS_BIRTH\/365)\n\napplication_train[application_train[\"TARGET\"] == 1].hist('AGE')","86b0cdba":"application_train['AMT_INCOME_TOTAL'].hist(by=application_train['TARGET'])","a8582f2c":"# \u5916\u308c\u5024\u304c\u3059\u3054\u3044\u306e\u3067log\u3068\u308b\n# take the logarithm because the graph above is affected by outliers\nnp.log(application_train['AMT_INCOME_TOTAL']).hist(by=application_train['TARGET'])\nplt.show()","c4000d7c":"# \u4e0a\u306e\u3084\u3064\u3067\u3082\u3001\u5916\u308c\u5024\u306e\u5f71\u97ff\u3042\u308b\u306e\u3067\u3001range\u3067\u8868\u793a\u7bc4\u56f2\u3092\u72ed\u3081\u308b\nnp.log(application_train['AMT_INCOME_TOTAL']).hist(by=application_train['TARGET'], bins=20, range=(10, 14))\nplt.show()","beebe1f0":"application_train['CNT_CHILDREN'].hist(by=application_train['TARGET'], bins=5, range=(-0.5, 4.5))","ae371969":"from sklearn.model_selection import train_test_split\nimport re\nX = application_train.drop(columns=['TARGET', 'SK_ID_CURR'])\ny = application_train['TARGET']\nX = pd.get_dummies(X, drop_first=True, dummy_na=True)\nX = X.fillna(X.mean())\nrename_dict = {}\nfor i in X.columns[:]:\n    rename_dict[i] = re.sub('[,:]', '_', i)\nprint(rename_dict)\nX = X.rename(columns=rename_dict)\nprint(X.head())\nX_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.2, random_state=0)","fd0f7695":"import lightgbm as lgb\nfrom sklearn.metrics import accuracy_score\ngbm = lgb.LGBMClassifier(objective='binary',\n                        num_leaves = 23,\n                        learning_rate=0.1,\n                        n_estimators=100)\ngbm.fit(X_train, y_train,\n        eval_set=[(X_test, y_test)],\n        eval_metric='binary',\n        early_stopping_rounds=10)\ny_pred = gbm.predict(X_test)   # , num_iteration=gbm.best_iteration\ny_pred_proba = gbm.predict_proba(X_test)  # , num_iteration=gbm.best_iteration\n\naccu = accuracy_score(y_test, y_pred)\nprint('accuracy = {:>.4f}'.format(accu))\n\n# Feature Importance\nfti = gbm.feature_importances_\n\nprint('Feature Importances:')\nfor i, feat in enumerate(X_train.columns):\n    print('\\t{0:20s} : {1:>.6f}'.format(feat, fti[i]))","9e84c2da":"columns_fti_list = []\nfor i, j in zip(X_train.columns, fti):\n    columns_fti_list.append((i, j))\ncolumns_fti_list.sort(key=lambda x: x[1], reverse=True)","93bb8aaa":"num = 60\nheight = []\ntick_label = []\nfor i, j in columns_fti_list[:num]:\n    height.append(j)\n    tick_label.append(i)\nleft = [x for x in range(num)]","0b2d1931":"fig = plt.figure(figsize=(36.0, 6.0))\nax = fig.add_axes([0.5,0.1,0.4,0.8])\nplt.bar(left, height, tick_label=tick_label)\nplt.xticks(rotation=90)\nplt.show()","fc5a8d51":"X = application_train.drop(columns=['TARGET', 'SK_ID_CURR'])\ny = application_train['TARGET']\nX = pd.get_dummies(X, drop_first=True, dummy_na=True)\n# X = X.fillna(X.mean())\nrename_dict = {}\nfor i in X.columns[:]:\n    rename_dict[i] = re.sub('[,:]', '_', i)\nX = X.rename(columns=rename_dict)\nX_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.2, random_state=0)\n\ngbm = lgb.LGBMClassifier(objective='binary',\n                        num_leaves = 23,\n                        learning_rate=0.1,\n                        n_estimators=100)\ngbm.fit(X_train, y_train,\n        eval_set=[(X_test, y_test)],\n        eval_metric='binary',\n        early_stopping_rounds=10)\ny_pred = gbm.predict(X_test)   # , num_iteration=gbm.best_iteration\ny_pred_proba = gbm.predict_proba(X_test)  # , num_iteration=gbm.best_iteration\n\naccu = accuracy_score(y_test, y_pred)\nprint('accuracy = {:>.4f}'.format(accu))\n\n# Feature Importance\nfti = gbm.feature_importances_\n\"\"\"\nprint('Feature Importances:')\nfor i, feat in enumerate(X_train.columns):\n    print('\\t{0:20s} : {1:>.6f}'.format(feat, fti[i]))\n\"\"\"    \ncolumns_fti_list = []\nfor i, j in zip(X_train.columns, fti):\n    columns_fti_list.append((i, j))\ncolumns_fti_list.sort(key=lambda x: x[1], reverse=True)\n\nnum = 60\nheight = []\ntick_label = []\nfor i, j in columns_fti_list[:num]:\n    height.append(j)\n    tick_label.append(i)\nleft = [x for x in range(num)]\n\nfig = plt.figure(figsize=(36.0, 6.0))\nax = fig.add_axes([0.5,0.1,0.4,0.8])\nplt.bar(left, height, tick_label=tick_label)\nplt.xticks(rotation=90)\nplt.show()","ac1ccec1":"X = application_train.drop(columns=['TARGET', 'SK_ID_CURR'])\ny = application_train['TARGET']\nX = pd.get_dummies(X, drop_first=True, dummy_na=True)\n# X = X.fillna(X.mean())\nrename_dict = {}\nfor i in X.columns[:]:\n    rename_dict[i] = re.sub('[,:]', '_', i)\nX = X.rename(columns=rename_dict)\nX_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.2, random_state=0)\n\ngbm = lgb.LGBMClassifier(objective='binary',\n                        num_leaves = 23,\n                        learning_rate=0.1,\n                        n_estimators=100,\n                        metric_types=\"auc\")\ngbm.fit(X_train, y_train,\n        eval_set=[(X_test, y_test)],\n        eval_metric='binary',\n        early_stopping_rounds=10)\ny_pred = gbm.predict(X_test)   # , num_iteration=gbm.best_iteration\ny_pred_proba = gbm.predict_proba(X_test)  # , num_iteration=gbm.best_iteration\n\naccu = accuracy_score(y_test, y_pred)\nprint('accuracy = {:>.4f}'.format(accu))\n\n# Feature Importance\nfti = gbm.feature_importances_\n\"\"\"\nprint('Feature Importances:')\nfor i, feat in enumerate(X_train.columns):\n    print('\\t{0:20s} : {1:>.6f}'.format(feat, fti[i]))\n\"\"\"    \ncolumns_fti_list = []\nfor i, j in zip(X_train.columns, fti):\n    columns_fti_list.append((i, j))\ncolumns_fti_list.sort(key=lambda x: x[1], reverse=True)\n\nnum = 60\nheight = []\ntick_label = []\nfor i, j in columns_fti_list[:num]:\n    height.append(j)\n    tick_label.append(i)\nleft = [x for x in range(num)]\n\nfig = plt.figure(figsize=(36.0, 6.0))\nax = fig.add_axes([0.5,0.1,0.4,0.8])\nplt.bar(left, height, tick_label=tick_label)\nplt.xticks(rotation=90)\nplt.show()","7d3daeca":"from sklearn.metrics import roc_auc_score, roc_curve\nprint(roc_auc_score(y_test, y_pred_proba[:, 1]))\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba[:, 1])\nplt.plot(fpr, tpr, marker='o')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\nplt.show()","99d89592":"X = application_train.drop(columns=['TARGET', 'SK_ID_CURR'])\ny = application_train['TARGET']\nX_submit = application_test.drop(columns='SK_ID_CURR')\nlenX = len(X)\nX = pd.concat([X, X_submit])\nX = pd.get_dummies(X, drop_first=True, dummy_na=True)\nX_submit = X[lenX:]\nX = X[:lenX]\n# X = X.fillna(X.mean())\n\nrename_dict = {}\nfor i in X.columns[:]:\n    rename_dict[i] = re.sub('[,:]', '_', i)\nX = X.rename(columns=rename_dict)\nX_submit = X_submit.rename(columns=rename_dict)\n\nX_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.2, random_state=0)\n\ngbm = lgb.LGBMClassifier(objective='binary',\n                        num_leaves = 23,\n                        learning_rate=0.1,\n                        n_estimators=100,\n                        metric_types=\"auc\")\ngbm.fit(X_train, y_train,\n        eval_set=[(X_test, y_test)],\n        eval_metric='binary',\n        early_stopping_rounds=10)\ny_pred = gbm.predict(X_test)   # , num_iteration=gbm.best_iteration\ny_pred_proba = gbm.predict_proba(X_test)  # , num_iteration=gbm.best_iteration\n\naccu = accuracy_score(y_test, y_pred)\nprint('accuracy = {:>.4f}'.format(accu))\n\n# Feature Importance\nfti = gbm.feature_importances_\n\"\"\"\nprint('Feature Importances:')\nfor i, feat in enumerate(X_train.columns):\n    print('\\t{0:20s} : {1:>.6f}'.format(feat, fti[i]))\n\"\"\"    \ncolumns_fti_list = []\nfor i, j in zip(X_train.columns, fti):\n    columns_fti_list.append((i, j))\ncolumns_fti_list.sort(key=lambda x: x[1], reverse=True)\n\nnum = 60\nheight = []\ntick_label = []\nfor i, j in columns_fti_list[:num]:\n    height.append(j)\n    tick_label.append(i)\nleft = [x for x in range(num)]\n\nfig = plt.figure(figsize=(36.0, 6.0))\nax = fig.add_axes([0.5,0.1,0.4,0.8])\nplt.bar(left, height, tick_label=tick_label)\nplt.xticks(rotation=90)\nplt.show()","2bfdc545":"len(gbm.predict_proba(X_submit))","278f12ee":"gbm.predict_proba(X_submit)[:, 1]","bd150a5e":"baseline = gbm.predict_proba(X_submit)[:, 1]","3ebf1513":"baseline_submit = pd.concat([application_test['SK_ID_CURR'], pd.Series(baseline)], axis=1)","aa5fa25a":"baseline_submit.columns = ['SK_ID_CURR', 'TARGET']","28ca9777":"baseline_submit","8fc2aa25":"baseline_submit.to_csv('baseline.csv', index=False)","74c5c0d0":"- working\n\u52b4\u50cd\u8005\n- State servant\n\u516c\u52d9\u54e1\n- Commercial associate\n\u5546\u4eba\n- Pensioner\n\u5e74\u91d1\u53d7\u7d66\u8005\n- unemployed\n\u5931\u696d\u8005\n- student\n\u5b66\u751f\n- Businessman\n\u30d3\u30b8\u30cd\u30b9\u30de\u30f3\n- Maternity leave\n\u80b2\u5150\u4f11\u696d\u4e2d","2f44cc0b":"- secondary\n\u4e2d\u7b49\u6559\u80b2\n- higher education\n\u9ad8\u7b49\u6559\u80b2\n- incomplete higher\n\u9ad8\u6821\u4e2d\u9000\uff08\uff1f\uff1f\uff1f\uff09\n- lower secondary\n\u4e2d\u5b66\u6821\n- academic degree\n\u5b66\u4f4d"}}