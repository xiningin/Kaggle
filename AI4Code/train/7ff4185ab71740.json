{"cell_type":{"01cef10b":"code","764dfd43":"code","cc2ea9c5":"code","77d72989":"code","d9dbc977":"code","ce324a8c":"code","3c61c197":"code","e40e018f":"code","cd0e613e":"code","bec684ad":"code","813efce4":"code","52993fff":"code","f9152246":"code","b2a48087":"code","82d4edf1":"code","8594199b":"code","5eb5c8b2":"code","1087f8fc":"code","49c1a239":"code","c0141bac":"code","d2cfca4d":"markdown","281188a9":"markdown","7a34b849":"markdown","86784796":"markdown","a1b55133":"markdown","75b1d903":"markdown","fa9e3078":"markdown","233b84b6":"markdown","63d9ea66":"markdown","6b487788":"markdown","c92d4145":"markdown","78744b3e":"markdown","9fe6013d":"markdown","62dd889b":"markdown"},"source":{"01cef10b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","764dfd43":"train = pd.read_csv('..\/input\/train.csv', parse_dates=['date'])\ntest = pd.read_csv('..\/input\/test.csv', parse_dates=['date'])","cc2ea9c5":"print(\"Train shape: \", train.shape)\nprint(\"Test shape: \", test.shape)","77d72989":"train.describe()","d9dbc977":"df = pd.concat([train,test])\ndf['month'] = df['date'].dt.month\ndf['weekday'] = df['date'].dt.dayofweek\ndf['year'] = df['date'].dt.year\ndf['week_of_year']  = train.date.dt.weekofyear\n\ndf.drop('date', axis=1, inplace=True)\ndf.head()","ce324a8c":"col = [i for i in df.columns if i not in ['date','id','sales']]\ny = 'sales'\ntrain = df.loc[~df.sales.isna()]","3c61c197":"from sklearn import cross_validation\nX_train, X_test, y_train, y_test = cross_validation.train_test_split(train[col],train[y], test_size=0.2, random_state=42)\nprint(X_train.shape)\nprint(X_test.shape)\nX_train.head()","e40e018f":"from sklearn import linear_model\nreg = linear_model.LinearRegression()\nreg.fit(X_train, y_train)","cd0e613e":"from sklearn.metrics import mean_absolute_error\npredictions = reg.predict(X_test)\nprint(mean_absolute_error(predictions,y_test))","bec684ad":"import seaborn as sns\ntrain2 = train.copy()\ntrain2.drop('id', axis=1, inplace=True)\ntrain2.head()\ncorr = train2.corr()\nsns.heatmap(corr, xticklabels=corr.columns,yticklabels=corr.columns)","813efce4":"df[\"median-store_item-month\"] = df.groupby(['month',\"item\",\"store\"])[\"sales\"].transform(\"median\")\ndf[\"mean-store_item-week\"] = df.groupby(['week_of_year',\"item\",\"store\"])[\"sales\"].transform(\"mean\")\ndf[\"item-month-sum\"] = df.groupby(['month',\"item\"])[\"sales\"].transform(\"sum\") # total sales of that item  for all stores\ndf[\"store-month-sum\"] = df.groupby(['month',\"store\"])[\"sales\"].transform(\"sum\") ","52993fff":"df.head()","f9152246":"train = df.loc[~df.sales.isna()]\ntrain3 = train.copy()\ntrain3.drop('id', axis=1, inplace=True)\ntrain3.head()\ncorr = train3.corr()\nsns.heatmap(corr, xticklabels=corr.columns,yticklabels=corr.columns)","b2a48087":"# get shifted features for grouped data. Note need to sort first! \ndf[\"item-week_shifted-90\"] = df.groupby(['week_of_year',\"item\"])[\"sales\"].transform(lambda x:x.shift(12).sum()) # shifted total sales for that item 12 weeks (3 months) ago\ndf[\"store-week_shifted-90\"] = df.groupby(['week_of_year',\"store\"])[\"sales\"].transform(lambda x:x.shift(12).sum()) # shifted total sales for that store 12 weeks (3 months) ago\ndf[\"item-week_shifted-90\"] = df.groupby(['week_of_year',\"item\"])[\"sales\"].transform(lambda x:x.shift(12).mean()) # shifted mean sales for that item 12 weeks (3 months) ago\ndf[\"store-week_shifted-90\"] = df.groupby(['week_of_year',\"store\"])[\"sales\"].transform(lambda x:x.shift(12).mean()) # shifted mean sales for that store 12 weeks (3 months) ago","82d4edf1":"train = df.loc[~df.sales.isna()]\ntrain4 = train.copy()\ntrain4.drop('id', axis=1, inplace=True)\ntrain4.head()\ncorr = train4.corr()\nsns.heatmap(corr, xticklabels=corr.columns,yticklabels=corr.columns)","8594199b":"import missingno as msno\nmsno.bar(train,figsize=(20,4))","5eb5c8b2":"col = [i for i in train.columns if i not in ['id','sales','store','item','month','weekday','year','week_of_year']]\ny = 'sales'\nfrom sklearn import cross_validation\nX_train, X_test, y_train, y_test = cross_validation.train_test_split(train[col],train[y], test_size=0.2, random_state=42)\nprint(X_train.shape)\nprint(X_test.shape)\nX_train.head()","1087f8fc":"from sklearn import linear_model\nreg = linear_model.LinearRegression()\nreg.fit(X_train, y_train)\nfrom sklearn.metrics import mean_absolute_error\npredictions = reg.predict(X_test)\nprint(mean_absolute_error(predictions,y_test))","49c1a239":"from sklearn.ensemble import RandomForestRegressor\nRF = RandomForestRegressor(n_estimators=200, n_jobs=-1)\nRF.fit(X_train, y_train)\nfrom sklearn.metrics import mean_absolute_error\npredictions = RF.predict(X_test)\nprint(mean_absolute_error(predictions,y_test))","c0141bac":"import xgboost\nxgb = xgboost.XGBRegressor(n_estimators=100, learning_rate=0.08, gamma=0, subsample=0.75,\n                           colsample_bytree=1, max_depth=7)\nxgb.fit(X_train,y_train)\nfrom sklearn.metrics import mean_absolute_error\npredictions = xgb.predict(X_test)\nprint(mean_absolute_error(predictions,y_test))","d2cfca4d":"# Final Model","281188a9":"## XGBoost","7a34b849":"## Linear Regression","86784796":"No matter what model is, the final testing performance (mean absolute error) after feature extracion are batter than benchmark model ","a1b55133":"All of feature has low correlation of sales. The original feature is not good for model training.","75b1d903":"# Input Data","fa9e3078":"# Benchmark Model","233b84b6":"# Correlations Study","63d9ea66":"## Random Forst","6b487788":"## Linear Regression for benchmark model","c92d4145":"# Feature Extraction\nAdd historical \/ seasonal features. Thanks to [Dan Ofer's notebook](https:\/\/www.kaggle.com\/danofer\/getting-started-with-time-series-features)","78744b3e":"The correlation looks better after feature extraction.","9fe6013d":"## Miss data review","62dd889b":"# Date Preprocess"}}