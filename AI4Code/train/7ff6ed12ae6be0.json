{"cell_type":{"9fe1058c":"code","c97eaf26":"code","6668827e":"code","d7c465af":"code","899e1b6d":"code","632e9d02":"code","d31e5dd0":"code","17d40d5a":"code","a5ed3a67":"code","f06347c7":"code","499daaef":"code","19c1228a":"code","abd5a820":"code","54540095":"code","8ec39df4":"markdown","c5a950ca":"markdown"},"source":{"9fe1058c":"import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport cv2\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c97eaf26":"path = '\/kaggle\/input\/vinbigdata-chest-xray-abnormalities-detection\/'\nos.listdir(path)","6668827e":"train_data = pd.read_csv(path+'train.csv')\nsample_data= pd.read_csv(path+'sample_submission.csv')","d7c465af":"print('Number train images:', len(train_data.index))\nprint('Number test images:', len(sample_data.index))","899e1b6d":"plt.figure(figsize=(26, 8))\nsns.countplot(x=\"class_name\", data=train_data)\nplt.title(\"Class Name Distribution\")\nplt.show()","632e9d02":"plt.figure(figsize=(8, 8))\nsns.countplot(x=\"class_id\", data=train_data)\nplt.title(\"Class ID Distribution\")\nplt.show()","d31e5dd0":"plt.figure(figsize=(8, 8))\nsns.countplot(x=\"rad_id\", data=train_data)\nplt.title(\"RAD ID Distribution\")\nplt.show()\n\n","17d40d5a":"# ref kernel: https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way\nimport pydicom \nimport numpy as np\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\n\ndef read_xray(path, voi_lut = True, fix_monochrome = True):\n    dicom = pydicom.read_file(path)\n    \n    # VOI LUT (if available by DICOM device) is used to transform raw DICOM data to \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n               \n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n        \n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n        \n    return data","a5ed3a67":"def plot_pixel_array(data, figsize=(8,8)):\n    plt.figure(figsize=figsize)\n    plt.imshow(data, cmap=plt.cm.bone)\n    plt.show()","f06347c7":"train_dir = \"..\/input\/vinbigdata-chest-xray-abnormalities-detection\/train\"\ntest_dir = \"..\/input\/vinbigdata-chest-xray-abnormalities-detection\/test\"\n\ntrain_files = os.listdir(train_dir)\ntest_files = os.listdir(test_dir)","499daaef":"print(\"Examining train images...\")\nfor _ in range(5):\n    fn = train_files[np.random.randint(0, len(train_files))]\n    file_path = os.path.join(train_dir, fn)\n    data = read_xray(file_path)\n    plot_pixel_array(data)","19c1228a":"\nfor _ in range(10):\n    idx = np.random.randint(0, len(train_files))\n    img_id = train_data.loc[idx, 'image_id']\n    img = read_xray(os.path.join(train_dir, img_id+\".dicom\"))\n    figg= plt.figure(figsize=(6,6))\n    figg.add_subplot(1,1,1)\n    plt.imshow(img, cmap='gray')\n    plt.title(train_data.loc[idx, 'class_name'])\n    \n    if train_data.loc[idx, 'class_name'] != 'No finding':\n        bbox = [train_data.loc[idx, 'x_min'],\n                train_data.loc[idx, 'y_min'],\n                train_data.loc[idx, 'x_max'],\n                train_data.loc[idx, 'y_max']]\n        \n        patch = matplotlib.patches.Rectangle((bbox[0], bbox[1]),\n                              bbox[2]-bbox[0],\n                              bbox[3]-bbox[1],\n                              ec='r', fc='none', lw=2.)\n        ax = plt.gca()\n        ax.add_patch(patch)","abd5a820":"sample_data.to_csv('submission1.csv',index= False)","54540095":"output = pd.read_csv('submission1.csv',)\noutput","8ec39df4":"Checking the Localizations","c5a950ca":"Output"}}