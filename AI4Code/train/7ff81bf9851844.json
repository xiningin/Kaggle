{"cell_type":{"c9f2cf6b":"code","c283fa88":"code","9a8ea4eb":"code","3eb354aa":"code","ca0547f8":"code","1bd121c2":"code","2bf3a399":"code","760a6005":"markdown","138299f6":"markdown","4e20e387":"markdown","6078704c":"markdown","e874b4d8":"markdown"},"source":{"c9f2cf6b":"import numpy as np\nimport pandas as pd\nfrom sklearn import model_selection, datasets, linear_model, metrics\nfrom sklearn.preprocessing import scale\nfrom sklearn.linear_model import Lasso\nfrom xgboost import XGBRegressor\nfrom sklearn.externals import joblib\nfrom sklearn import preprocessing\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c283fa88":"data = pd.read_csv('\/kaggle\/input\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/sample_submission.csv')\ndata.select_dtypes(object).keys()","9a8ea4eb":"labelEncoder = preprocessing.LabelEncoder()\n\nfor i in data.select_dtypes(object).keys():\n    data[i] = labelEncoder.fit_transform(data[i])\n    test[i] = labelEncoder.transform(test[i])","3eb354aa":"X = scale(data.drop(columns = ['Energy_consumption','Id']))\ny = data[\"Energy_consumption\"]\ndata_col = data.drop(columns = ['Energy_consumption','Id']).columns\nlasso_clasificator = Lasso(alpha=2)#11 - nado\nlasso_clasificator.fit(X,y)\ninform_data =[]\ncoef = []\nfor i,item in enumerate(lasso_clasificator.coef_):\n    if item != abs(0):\n        inform_data.append(data_col[i])\n        coef.append(item)\n\nprint(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 - \", len(inform_data))\n","ca0547f8":"xg_reg = XGBRegressor(objective ='reg:squarederror', colsample_bytree = 0.15, learning_rate = 0.001,\n                max_depth = 5, n_estimators = 70000,subsample=0.5)\nxg_reg.fit(data[inform_data], data['Energy_consumption'] )","1bd121c2":"xbg_scoring = model_selection.cross_val_score(xg_reg,data[inform_data], data['Energy_consumption'], scoring = 'neg_mean_squared_error', cv = 5)\nxbg_scoring.mean()","2bf3a399":"pred = xg_reg.predict(test[inform_data])\nsub['Energy_consumption'] = pred\nsub.to_csv('\/kaggle\/working\/subEND.csv')","760a6005":"\u0422\u0443\u0442 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c MSE, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0441v=5 \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u043b \u0438\u043c\u0435\u043d\u043d\u043e \u043d\u0430 \u044d\u0442\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438 \u0438 \u0437\u043d\u0430\u043b \u0441 \u0447\u0435\u043c \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c.","138299f6":"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043e\u0431\u044c\u0435\u043a\u0442\u044b \u0432 \u0447\u0438\u0441\u043b\u0430.","4e20e387":"\u0414\u0430\u043b\u044c\u0448\u0435 \u044f \u0432\u044b\u0431\u0438\u0440\u0430\u044e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 L1 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0442\u043e\u0440\u0430.","6078704c":"\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043d\u0430\u0448\u0443 \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e XGBRegressor, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043d\u0435 \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0432\u0437\u044f\u043b \u043b\u0443\u0447\u0448\u0438\u0435 \u0438\u0437 \u0442\u0435\u0445 \u0447\u0442\u043e \u0431\u044b\u043b\u0438 \u0442\u0430\u043a \u043a\u0430\u043a \u0441\u0440\u043e\u043a \u043f\u043e\u0434\u0436\u0438\u043c\u0430\u043b.","e874b4d8":"\u0417\u0430\u043f\u0438\u0441\u044c \u0432 \u0444\u0430\u0439\u043b"}}