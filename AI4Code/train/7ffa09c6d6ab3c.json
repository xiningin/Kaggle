{"cell_type":{"c1ab737b":"code","9efc6a22":"code","3a7404d0":"code","0370f936":"code","59251caa":"code","56385ef1":"code","8084b992":"code","b2bae03d":"code","4b1a2f8d":"code","325f21e0":"code","3e0181eb":"code","2e850642":"code","1aa16d69":"code","9608f1d9":"code","6503bfff":"code","ebc8ff58":"code","0590b088":"code","cc77aca3":"code","697c7321":"code","195917a5":"code","6fed29bd":"code","69fb6364":"code","0085ea7d":"code","8e04351a":"code","bf3fb595":"code","609a75f3":"code","72e14bf9":"code","2778eade":"code","34540675":"code","f5618358":"code","829035f2":"code","dcabefe3":"code","0de79097":"code","b6329958":"code","12fe4450":"code","df3ff925":"code","7685b5ff":"code","56600bc1":"code","57f0faa4":"code","af37da74":"code","3de55f88":"code","56728441":"code","e942c1dc":"code","0f3240bd":"code","1ee80b23":"code","f8b80256":"code","d5cc03f1":"code","1cbb93d7":"code","56e5f696":"code","6c931b27":"code","a2d6b370":"code","e5533e1e":"code","e9cdb509":"code","b82daa86":"code","67f0622e":"code","099d17b9":"code","393e0131":"code","27684502":"code","d19c7e93":"code","ceebfcdf":"code","89253725":"code","cdca4d0e":"code","9fdc2bc2":"code","1cf6ebcf":"code","8a1405a2":"code","df6c10e3":"code","24fa3f5c":"code","049e86d8":"code","2dfbafbc":"code","4a15db2e":"code","585c1d98":"code","33955310":"code","8e5143d3":"code","4de12f8b":"code","da100d71":"code","f171fc47":"code","61cfa8f1":"code","e085fbf2":"code","068d9ad5":"code","a66d987c":"code","4b76e940":"code","ad64f436":"code","e66f2d6e":"code","0998ccd4":"code","735f3b16":"code","ee0e94d5":"code","781a5efd":"code","d3a58f7a":"code","5f10c48d":"code","ec665688":"code","546508ed":"code","b89580b1":"code","2f463afe":"code","b0d2d11e":"code","81bd74f0":"code","b2a80eb5":"code","764fa7b7":"code","2c6f82b4":"code","b08d75d4":"code","080f83e2":"code","4a751df1":"code","61fe0955":"code","8c92854e":"code","8f594f00":"code","03cc8764":"code","7eb35aae":"code","2ad0f40c":"code","d11758f8":"markdown","a28e0a47":"markdown","79f1e2cc":"markdown","45c64e55":"markdown","e67b3292":"markdown","5a7d8c09":"markdown","ccc16460":"markdown","cfc1f6ea":"markdown","8da62abf":"markdown","71a7aacc":"markdown","c2c0fdff":"markdown","37d8f205":"markdown","22fdad54":"markdown","58b3f4fd":"markdown","f793071e":"markdown","e68e68ba":"markdown","00b62542":"markdown","0202bf0e":"markdown","913c0610":"markdown","50e09538":"markdown","1ef90a9f":"markdown","3f570547":"markdown","1d028ea3":"markdown","57faf0a2":"markdown","c9947061":"markdown","1d81c8df":"markdown","45c1bae8":"markdown","dfed5001":"markdown","3fe023ba":"markdown","5e0320a4":"markdown","3bd3f1c4":"markdown","0fa99685":"markdown","001dd11c":"markdown","a8730128":"markdown","956fe640":"markdown","aa78c9da":"markdown","1fd46a78":"markdown","44224ffe":"markdown","a6899355":"markdown","030b7489":"markdown","9b8253eb":"markdown","dc92e181":"markdown","9cec756f":"markdown","c5c10c01":"markdown","5928a208":"markdown","19097687":"markdown","2291e513":"markdown","0c8f6e63":"markdown","b2345ccf":"markdown","cef8b397":"markdown","2b71d3f9":"markdown","fb40ed76":"markdown","8a838637":"markdown","15176d86":"markdown","46738180":"markdown","35c539c0":"markdown","d1f1babd":"markdown","9e947a20":"markdown","f67f6b03":"markdown","00e0b48b":"markdown","4ff55f63":"markdown","182fce67":"markdown","bbdbb4ac":"markdown","0bcb66ae":"markdown","55293211":"markdown","44345378":"markdown","f7c9129b":"markdown","0da46098":"markdown","5bb51106":"markdown","6cea7291":"markdown","f88c2a7c":"markdown","63c2f47c":"markdown","ed6af6c1":"markdown","793eeca6":"markdown","a41e3300":"markdown","c6b1116b":"markdown","14f091a5":"markdown","fc188ffc":"markdown","83efd100":"markdown","54d1c558":"markdown","010fe67c":"markdown","574216d0":"markdown","5012aa26":"markdown","964f00d5":"markdown","4a105a07":"markdown","a5720d2b":"markdown","d8113d1c":"markdown","13870a8b":"markdown","890274ac":"markdown"},"source":{"c1ab737b":"# Remove the # to install comet\n#pip install comet_ml","9efc6a22":"\"\"\"\n# import comet_ml at the top of your file\nfrom comet_ml import Experiment\n\n# Create an experiment with your api key:\nexperiment = Experiment(\n    api_key=\"ZBRB8H2ncCGZsUoS6CqVIAr0y\",\n    project_name=\"general\",\n    workspace=\"knetshiongolwe\",\n)\n\"\"\"\n","3a7404d0":"# data analysis libraries\nimport pandas as pd\nimport numpy as np\n\n# Kaggle requirements\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\n# visualisation libraries\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom numpy.random import RandomState\n\n\n#word cloud\n%matplotlib inline\nimport wordcloud\n\nfrom wordcloud import WordCloud, STOPWORDS\n%matplotlib inline\nsns.set()\n\n# visualisation libraries\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom plotly.offline import init_notebook_mode, plot, iplot\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\n\n\n# ML Models\nfrom surprise import Reader\nfrom surprise import Dataset\nfrom surprise.model_selection import cross_validate\nfrom surprise import NormalPredictor\nfrom surprise import KNNBasic\nfrom surprise import KNNWithMeans\nfrom surprise import KNNWithZScore\nfrom surprise import KNNBaseline\nfrom surprise import SVD\nfrom surprise import BaselineOnly\nfrom surprise import SVDpp\nfrom surprise import NMF\nfrom surprise import SlopeOne\nfrom surprise import CoClustering\nfrom surprise.accuracy import rmse\nfrom surprise import accuracy\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# ML Pre processing\nfrom surprise.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n# Hyperparameter tuning\nfrom surprise.model_selection import GridSearchCV\n\n# High performance hyperparameter tuning\n#from tune_sklearn import TuneSearchCV\n#import warnings\n#warnings.filterwarnings(\"ignore\")","0370f936":"#Pandas libraries used in the notebook.\ntrain = pd.read_csv('\/kaggle\/input\/edsa-recommender-system-predict\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/edsa-recommender-system-predict\/test.csv')\ndf_movies = pd.read_csv('\/kaggle\/input\/edsa-recommender-system-predict\/movies.csv')\ndf_samp = pd.read_csv('\/kaggle\/input\/edsa-recommender-system-predict\/sample_submission.csv')\ndf_imdb = pd.read_csv('\/kaggle\/input\/edsa-recommender-system-predict\/imdb_data.csv')\ndf_gtags = pd.read_csv(\"\/kaggle\/input\/edsa-recommender-system-predict\/genome_tags.csv\")\ndf_scores = pd.read_csv(\"\/kaggle\/input\/edsa-recommender-system-predict\/genome_scores.csv\")\ndf_tags = pd.read_csv(\"\/kaggle\/input\/edsa-recommender-system-predict\/tags.csv\")\ndf_links = pd.read_csv(\"\/kaggle\/input\/edsa-recommender-system-predict\/links.csv\")\n","59251caa":"#viewing training data\ntrain.head()","56385ef1":"#Viewing movies data\ndf_movies.head()","8084b992":"#Viewing imdb dataframe\n\ndf_imdb.head(1)\n","b2bae03d":"#Viewing Genrome tags\ndf_gtags.head(1)\n","4b1a2f8d":"#Viewing scores\ndf_scores.head()","325f21e0":"#viewing tags\ndf_tags.head()","3e0181eb":"#view links\ndf_links.head()","2e850642":"#check for missing values\ntrain.isnull().sum()","1aa16d69":"# check duplicates\ndup_bool = train.duplicated(['userId', 'movieId', 'rating'])\n\n# display duplicates\nprint(\"Number of duplicate records:\", sum(dup_bool))\n","9608f1d9":"# Create a copy\ndf = train.copy()","6503bfff":"# Create a copy of the train data\ndf_train = train.copy()\n\n# Display top 5 records\ndf_train.head()\n","ebc8ff58":"# Find the length of the unique use\nlen(df_train['userId'].unique()), len(df_train['movieId'].unique())\n","0590b088":"# View movies\ndf_movies.head()","cc77aca3":"# View unique values of movies\nlen(df_movies['movieId'].unique())\n","697c7321":"# Merge the ratings and movies\ndf_merge1 = df_train.merge(df_movies, on='movieId')\n# View the first 5 rows\ndf_merge1.head()\n","195917a5":"# Merging the dataset with that of the imbd\ndf_merge2 = df_train.merge(df_imdb, on=\"movieId\")\n# View first 5 rows\ndf_merge2.head()\n","6fed29bd":"# Merging the merge data earlier on with the df_imbd\ndf_merge3 = df_merge1.merge(df_imdb, on=\"movieId\" )\n# View first 5 rows\ndf_merge3.head()\n","69fb6364":"# Check the null values of the data that has just been merged.\ndf_merge3.isnull().sum()\n","0085ea7d":"# View keywords\ndf_merge3['plot_keywords'].tail(100)\n","8e04351a":"# Extract unique values from rating column\ntrain['rating'].unique()\n","bf3fb595":"# Merging the dataset with that of the imbd\ndf_merge2 = df_train.merge(df_imdb, on=\"movieId\")\ndf_merge2.head(1)\n","609a75f3":"# Merging the merge data earlier on with the df_imbd\ndf_merge3 = df_merge1.merge(df_imdb, on=\"movieId\" )\ndf_merge3.head()\n","72e14bf9":"# Get summary statistics of rating\ntrain['rating'].describe()\n","2778eade":"data = df_merge1['rating'].value_counts().sort_index(ascending=False)\n\n# Create trace\ntrace = go.Bar(x=data.index,\n               text=['{:.1f} %'.format(val) for val in (data.values \/ df_merge1.shape[0] * 100)],\n               textposition='auto',\n               textfont=dict(color='#000000'),\n               y=data.values,\n               marker=dict(color='#db0000'))\n# Create layout\nlayout = dict(title='Distribution Of {} movie-ratings'.format(df_merge1.shape[0]),\n              xaxis=dict(title='rating'),\n              yaxis=dict(title='Count'))\n# Create plot\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig)\n","34540675":"df_merge3.rename(columns={'rating_x': 'rating', 'rating_y': 'numRatings'}, inplace=True)\n#Create dataframe\nnum_ratings = pd.DataFrame(df_merge3.groupby('movieId').count()['rating']).reset_index()\n#merge num ratings with df_merge3\ndf_merge3 = pd.merge(left=df_merge3, right=num_ratings, on='movieId')\n# rename columns\ndf_merge3.rename(columns={'rating_x': 'rating', 'rating_y': 'numRatings'}, inplace=True)\n","f5618358":"# pre_process the budget column\n\n# remove commas\ndf_merge3['budget'] = df_merge3['budget'].str.replace(',', '')\n\n# remove currency signs like \"$\" and \"GBP\"\ndf_merge3['budget'] = df_merge3['budget'].str.extract('(\\d+)', expand=False)\n\n# convert the feature into a float\ndf_merge3['budget'] = df_merge3['budget'].astype(float)\n\n# remove nan values and replacing with 0\ndf_merge3['budget'] = df_merge3['budget'].replace(np.nan, 0)\n\n# convert the feature into an integer\ndf_merge3['budget'] = df_merge3['budget'].astype(int)\n","829035f2":"#extracting date from title column\ndf_merge3['release_year'] = df_merge3.title.str.extract('(\\(\\d\\d\\d\\d\\))', expand=False)\n\n#adding date to realse year column\ndf_merge3['release_year'] = df_merge3.release_year.str.extract('(\\d\\d\\d\\d)', expand=False)\n\n#view top 2 rows of the dataframe\ndf_merge3.head(2)","dcabefe3":"#drop duplicates on dataframe\ndata_1= df_merge3.drop_duplicates('movieId')\n\n#view top 2 rows of the dataframe\ndata_1.head(2)","0de79097":"#create ratings dataframe\nratings_df = pd.DataFrame()\n\n#extract average ratings\nratings_df['Mean_Rating'] = df_merge3.groupby('title')['rating'].mean().values\n\n#extract average number of ratings\nratings_df['Num_Ratings'] = df_merge3.groupby('title')['rating'].count().values\n\n#make a plot\nfig, ax = plt.subplots(figsize=(14, 7))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.set_title('Rating vs. Number of Ratings', fontsize=24, pad=20)\nax.set_xlabel('Rating', fontsize=16, labelpad=20)\nax.set_ylabel('Number of Ratings', fontsize=16, labelpad=20)\n\nplt.scatter(ratings_df['Mean_Rating'], ratings_df['Num_Ratings'], alpha=0.5, color='green')","b6329958":"movies = df_movies.copy()","12fe4450":"# Make a census of the genre keywords\ngenre_labels = set()\nfor s in movies['genres'].str.split('|').values:\n    genre_labels = genre_labels.union(set(s))\n\n# Function that counts the number of times each of the genre keywords appear\ndef count_word(dataset, ref_col, census):\n    \"\"\"  \n    \n    This function counts the number of times each \n    of the genre keywords appear  \n    \n    Input : movies dataframe, column from dataframe,\n    label column from dataframe\n    datatype : dataframe        \n    \n    output : list    \n    \n    \"\"\"\n    keyword_count = dict()\n    for s in census: \n        keyword_count[s] = 0\n    for census_keywords in dataset[ref_col].str.split('|'):        \n        if type(census_keywords) == float and pd.isnull(census_keywords): \n            continue        \n        for s in [s for s in census_keywords if s in census]: \n            if pd.notnull(s): \n                keyword_count[s] += 1\n    \n    # convert the dictionary in a list to sort the keywords by frequency\n    keyword_occurences = []\n    for k,v in keyword_count.items():\n        keyword_occurences.append([k,v])\n    keyword_occurences.sort(key = lambda x:x[1], reverse = True)\n    return keyword_occurences, keyword_count\n\n# Calling this function gives access to a list of genre keywords which are sorted by decreasing frequency\nkeyword_occurences, dum = count_word(movies, 'genres', genre_labels)\nkeyword_occurences[:5]","df3ff925":"# Import new libraries\n%matplotlib inline\nimport wordcloud\nfrom wordcloud import WordCloud, STOPWORDS\n# Define the dictionary used to produce the genre wordcloud\ngenres = dict()\ntrunc_occurences = keyword_occurences[0:18]\nfor s in trunc_occurences:\n    genres[s[0]] = s[1]\n\n# Create the wordcloud\ngenre_wordcloud = WordCloud(width=1000,height=400, background_color='black')\ngenre_wordcloud.generate_from_frequencies(genres)\n\n# Plot the wordcloud\nf, ax = plt.subplots(figsize=(16, 8))\nplt.imshow(genre_wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","7685b5ff":"df = df_imdb[['movieId','title_cast','director', 'plot_keywords']]\ndf = df.merge(df_movies[['movieId', 'genres', 'title']], on='movieId', how='inner')\ndf.head(1)","56600bc1":"# Convert data types to strings for string handling\ndf['title_cast'] = df.title_cast.astype(str)\ndf['plot_keywords'] = df.plot_keywords.astype(str)\ndf['genres'] = df.genres.astype(str)\ndf['director'] = df.director.astype(str)\n\n# Removing spaces between names\ndf['director'] = df['director'].apply(lambda x: \"\".join(x.lower() for x in x.split()))\ndf['title_cast'] = df['title_cast'].apply(lambda x: \"\".join(x.lower() for x in x.split()))\n\n# Discarding the pipes between the actors' full names and getting only the first three names\ndf['title_cast'] = df['title_cast'].map(lambda x: x.split('|')[:3])\n\n# Discarding the pipes between the plot keywords' and getting only the first five words\ndf['plot_keywords'] = df['plot_keywords'].map(lambda x: x.split('|')[:5])\ndf['plot_keywords'] = df['plot_keywords'].apply(lambda x: \" \".join(x))\n\n# Discarding the pipes between the genres \ndf['genres'] = df['genres'].map(lambda x: x.lower().split('|'))\ndf['genres'] = df['genres'].apply(lambda x: \" \".join(x))\n\ndf.head(1)","57f0faa4":"\ndef most_watched(input_df):\n    \n    \"\"\"  \n    \n    This function gives out the number of ratings\n    for each genre for each year since 1970  \n    \n    Input : dataframe\n    datatype : dataframe        \n    \n    output : Figure (bar graph)\n    \n    \"\"\"\n    # Create a copy of the input dataframe and merge it to the movies dataframe\n    df = input_df.copy()\n    df = df.merge(df_movies,on='movieId',how='left')\n    \n    # Create an empty dataframe\n    b = pd.DataFrame()\n    \n    # Extract the timestamps and genres \n    timestamps = [timestamp for timestamp in df.timestamp]\n    all_genres = set(','.join([genres.replace('|',',') for genres in df.genres]).split(','))\n    \n    # Get the number of ratings for each genre for each year since 1970\n    for index,genre in enumerate(all_genres):\n        a = pd.Series([int((timestamps[i]\/31536000)+1970) for i,x in enumerate(df.genres) if genre in x])\n        a = a.value_counts()\n        b = pd.concat([b,pd.DataFrame({genre:a})],axis=1)\n        \n    # Create trace\n    trace = go.Bar(x = data.index,\n    text = ['{:.1f} %'.format(val) for val in (data.values \/ df_merge1.shape[0] * 100)],\n    textposition = 'auto',\n    textfont = dict(color = '#000000'),\n    y = data.values,\n    marker = dict(color = '#db0000'))\n    \n    \n    # Plot the trends for each genre on the same line graph \n    plt.figure(figsize=(40,20))\n    plot = sns.barplot(data=b, ci=None)\n      \n    # Add plot labels\n    plt.title('Trends in genre popularity',fontsize=20)\n    plt.xlabel('Genres', fontsize=15)\n    plt.ylabel('Number of ratings', fontsize=15)\n    \n    plt.show()\n    \n    return\n\nmost_watched(train)","af37da74":"\ndef most_watched(input_df): \n    \n    \"\"\"\"\n    This function gives out the number of ratings\n    for each genre for each year since 1970  \n    \n    Input : dataframe\n    datatype : dataframe        \n    \n    output : Figure (line graph)\n    \n    \"\"\"\n    \n    # Create a copy of the input dataframe and merge it to the movies dataframe\n    df = input_df.copy()\n    df = df.merge(df_movies,on='movieId',how='left')\n    \n    # Create an empty dataframe\n    b = pd.DataFrame()\n    \n    # Extract the timestamps and genres \n    timestamps = [timestamp for timestamp in df.timestamp]\n    all_genres = set(','.join([genres.replace('|',',') for genres in df.genres]).split(','))\n    \n    # Get the number of ratings for each genre for each year since 1970\n    for index,genre in enumerate(all_genres):\n        a = pd.Series([int((timestamps[i]\/31536000)+1970) for i,x in enumerate(df.genres) if genre in x])\n        a = a.value_counts()\n        b = pd.concat([b,pd.DataFrame({genre:a})],axis=1)\n    \n    # Plot the trends for each genre on the same line graph \n    plt.figure(figsize=(40,20))\n    palette = sns.color_palette(\"mako_r\", 20)\n    sns.set()\n    sns.set_palette(\"PuBuGn_d\")\n    plot = sns.lineplot(data=b, dashes=False, palette=palette)\n      \n    # Add plot labels\n    plt.title('Trends in genre popularity',fontsize=20)\n    plt.xlabel('Years', fontsize=15)\n    plt.ylabel('Number of ratings', fontsize=15)\n    \n    plt.show()\n    \n    return\n\nmost_watched(train)","3de55f88":"# Create a wordcloud of the movie titles\nmovies['title'] = movies['title'].fillna(\"\").astype('str')\ntitle_corpus = ' '.join(movies['title'])\ntitle_wordcloud = WordCloud(stopwords=STOPWORDS, background_color='white', height=2000, width=4000).generate(title_corpus)\n\n# Plot the wordcloud\nplt.figure(figsize=(16,8))\nplt.imshow(title_wordcloud)\nplt.axis('off')\nplt.show()","56728441":"genre_df = pd.DataFrame(df_merge3['genres'].str.split('|').tolist(), index=df_merge3['movieId']).stack()\ngenre_df = genre_df.reset_index([0, 'movieId'])\ngenre_df.columns = ['movieId', 'Genre']","e942c1dc":"def make_bar_chart(dataset, attribute, bar_color='#3498db', edge_color='#2980b9', title='Title', xlab='X', ylab='Y', sort_index=False):\n    \n    \"\"\"\"\n    This function gives the count of the\n    different genres\n    \n    Input : dataframe, dataframe column,\n    colour of figure, title of figure,\n    x and y labels\n    datatype : dataframe        \n    \n    output : Figure (bar plot)\n    \n    \"\"\"\n    \n    if sort_index == False:\n        xs = dataset[attribute].value_counts().index\n        ys = dataset[attribute].value_counts().values\n    else:\n        xs = dataset[attribute].value_counts().sort_index().index\n        ys = dataset[attribute].value_counts().sort_index().values\n    \n    # Plotting the figure   \n    fig, ax = plt.subplots(figsize=(14, 7))\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.set_title(title, fontsize=24, pad=20)\n    ax.set_xlabel(xlab, fontsize=16, labelpad=20)\n    ax.set_ylabel(ylab, fontsize=16, labelpad=20)\n    # Plot the bar graph\n    plt.bar(x=xs, height=ys, color=bar_color, edgecolor=edge_color, linewidth=2)\n    plt.xticks(rotation=45)\n    \n# Show the bar chart with selected features    \nmake_bar_chart(genre_df, 'Genre', title='Most Popular Movie Genres', xlab='Genre', ylab='Counts')","0f3240bd":"# Create an empty list\nyears = []\n# Finding the number of movies published in each year\nfor title in df_merge3['title']:\n    year_subset = title[-5:-1]\n    try: years.append(int(year_subset))\n    except: years.append(9999)\n# Create a new column in a dataframe.       \ndf_merge3['moviePubYear'] = years\nprint('The Number of Movies Published each year:',len(df_merge3[df_merge3['moviePubYear'] == 9999]))","1ee80b23":"def make_histogram(dataset, attribute, bins=25, bar_color='#3498db', edge_color='#2980b9', \n                   title='Title', xlab='X', ylab='Y', sort_index=False):\n    \"\"\"\"\n    This function gives a plot of the\n    number of movies published per year\n    \n    Input : dataframe, dataframe column,\n    bins, colour of figure, title of figure,\n    x and y labels\n    datatype : dataframe        \n    \n    output : Figure (bar plot)\n    \n    \"\"\"\n    if attribute == 'moviePubYear':\n        dataset = dataset[dataset['moviePubYear'] != 9999]\n        \n    fig, ax = plt.subplots(figsize=(14, 7))\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.set_title(title, fontsize=24, pad=20)\n    ax.set_xlabel(xlab, fontsize=16, labelpad=20)\n    ax.set_ylabel(ylab, fontsize=16, labelpad=20)\n    \n    plt.hist(dataset[attribute], bins=bins, color=bar_color, ec=edge_color, linewidth=2)\n    \n    plt.xticks(rotation=45)\n    \n    \nmake_histogram(df_merge3, 'moviePubYear', title='Movies Published per Year', xlab='Year', ylab='Counts')","f8b80256":"df_merge3.head(2)","d5cc03f1":"# Create a dataframe with the number of movies that the directors have made\ndirector_m = pd.DataFrame(data_1.groupby('director').count()['title'].sort_values(ascending=False)).reset_index()\n# View the first five directors\ndirector_m.head()","1cbb93d7":"# the least and most number of movies by directors in the dataset.\n\nprint(f'No of unique movies: \\t{len(data_1)}\\nLeast produced: \\t{director_m.title.min()}\\nMost produced: \\t\\t{director_m.title.max()}')","56e5f696":"# View the director and the count of ratings\npd.DataFrame(data_1.groupby('director').sum()['numRatings'].sort_values(ascending=False)).reset_index()\n","6c931b27":"#df_merge3.sort_values(by='numRatings', ascending=False).drop_duplicates('movieId')[:100]\ndirector_n = pd.DataFrame(data_1.groupby('director').sum()['numRatings'].sort_values(ascending=False)).reset_index()\n\n# visualize the number of movies per director\nplt.figure(figsize = (14, 9.5))\nsns.barplot(data = director_n.head(50), y = 'director', x = 'numRatings', color = 'teal')\nplt.ylabel('Directors')\nplt.xlabel('Number of ratings')\nplt.title('Number of ratings per director\\n')\n#plt.xlim(0, 27)\nplt.show()","a2d6b370":"# visualize the number of movies per director\nplt.figure(figsize = (14, 9.5))\nsns.barplot(data = director_m.head(50), y = 'director', x = 'title', color = 'teal')\nplt.ylabel('Directors')\nplt.xlabel('Number of movies released')\nplt.title('Number of Movies released per director\\n')\nplt.xlim(0, 27)\nplt.show()","e5533e1e":"# Create a list from the dataframe of the movie count of directors\ntop_100_produced = list(director_m.director.head(100))\n\ntop_produced = data_1[data_1['director'].isin(top_100_produced)]","e9cdb509":"# find the mean rating for the movies\navg_per_director = df_merge3[['rating','movieId']].groupby('movieId').mean().reset_index()","b82daa86":"# update the ratings of the movies with the average rating\ntop_produced = pd.merge(top_produced.drop('rating',1),avg_per_director,on='movieId').sort_values('rating',ascending=False)","67f0622e":"print(f'Min_rating: \\t{top_produced.rating.min()}\\nMax_rating: \\t{top_produced.rating.max()}\\nMean_rating: \\t{round(top_produced.rating.mean(),2)}')","099d17b9":"\n#print the row related to this index.\ndef find_minmax(x):\n    #use the function 'idmin' to find the index of lowest profit movie.\n    min_index = data_1[x].idxmin()\n    #use the function 'idmax' to find the index of Highest profit movie.\n    high_index =data_1[x].idxmax()\n    high = pd.DataFrame(data_1.loc[high_index,:])\n    low = pd.DataFrame(data_1.loc[min_index,:])\n    \n    #print the movie with high and low profit\n    print(\"Movie Which Has Highest \"+ x + \" : \",data_1['title'][high_index])\n    print(\"Movie Which Has Lowest \"+ x + \"  : \",data_1['title'][min_index])\n    return pd.concat([high,low],axis = 1)\n\n#call the find_minmax function.\nfind_minmax('budget')","393e0131":"#make a plot which contain top 10 highest budget movies.\n#sort the 'budget' column in decending order and store it in the new dataframe.\ninfo = pd.DataFrame(data_1['budget'].sort_values(ascending = False))\ninfo['title'] = data_1['title']\ndata = list(map(str,(info['title'])))\n\n#extract the top 10 budget movies data from the list and dataframe.\nx = list(data[:10])\ny = list(info['budget'][:10])\n\n#plot the figure and setup the title and labels.\nax = sns.pointplot(x=y,y=x)\nsns.set(rc={'figure.figsize':(10,5)})\nax.set_title(\"Top 10 High Budget Movies\",fontsize = 15)\nax.set_xlabel(\"Budget\",fontsize = 13)\nsns.set_style(\"darkgrid\")","27684502":"#top 10 Movies With Longest runtime\n#sort the 'runtime' column in decending order and store it in the new dataframe.\ninfo = pd.DataFrame(data_1['runtime'].sort_values(ascending = False))\ninfo['title'] = data_1['title']\ndata = list(map(str,(info['title'])))\n\n#extract the top 10 longest duraton movies data from the list and dataframe.\nx = list(data[:10])\ny = list(info['runtime'][:10])\n\n#make the point plot and setup the title and labels.\nax = sns.pointplot(x=y,y=x)\nsns.set(rc={'figure.figsize':(10,5)})\nax.set_title(\"Top 10 Longest Movies\",fontsize = 15)\nax.set_xlabel(\"Runtime\",fontsize = 13)\nsns.set_style(\"darkgrid\")\n","d19c7e93":"from sklearn.linear_model import LinearRegression\n\n# create a dataframe with runtime data\nruntime_data = pd.DataFrame(data_1.dropna().groupby('release_year').mean()['runtime']).dropna()\nruntime_data.index = runtime_data.index.astype('int')\nruntime_data = runtime_data[runtime_data['runtime']>1].copy()\n\n# train a linear regression model for the trend\nlrm = LinearRegression()\nruntime_data = runtime_data.reset_index()\nlrm.fit(runtime_data.release_year.values.reshape(-1,1),runtime_data.runtime.values.reshape(-1,1))\n\n# make predictions\nruntime_data['regression'] = lrm.predict(runtime_data.release_year.values.reshape(-1,1))\n\n# visualize the runtime per annum\nruntime_data = runtime_data.set_index('release_year')\nruntime_data.plot(figsize=(10,6))\nplt.title(\"Average runtime per annum\\n\")\nplt.ylabel(\"Average runtime\")\nplt.show()","ceebfcdf":"# create a dataframe with budget data\nbudget_data = pd.DataFrame(data_1.dropna().groupby('release_year').mean()['budget']).dropna()\nbudget_data.index = budget_data.index.astype('int')\nruntime_data = budget_data[budget_data['budget']>1].copy()\n\n# # make predictions\nbudget_data = budget_data.reset_index()\nbudget_data = budget_data.drop('budget',1).merge(pd.DataFrame(budget_data[budget_data['release_year']>1982]), on ='release_year')\n\n# # visualize the budget per annum\nplt.figure(figsize=(10,5))\nsns.barplot(x='release_year',y='budget',data=budget_data, color='darkblue')\nplt.title(\"Average budget per annum\\n\")\nplt.ylabel(\"Average budget\")\nplt.xticks(rotation=45)\nplt.show()","89253725":"#make a function will will split the string and return the count of each genre.\ndef count_genre(x):\n    \n    \"\"\"\"\n    This function gives a function will split\n    the string and return the count of each genre.\n    \n    Input : dataframe column\n    datatype : dataframe (integer)        \n    \n    output : Figure (bar plot)\n    \n    \"\"\"\n    \n    #concatenate all the rows of the genrs.\n    data_plot = data_1[x].str.cat(sep = '|')\n    data = pd.Series(data_plot.split('|'))\n    #conts each of the genre and return.\n    info = data.value_counts(ascending=False)\n    return info\n\n#call the function for counting the movies of each genre.\ntotal_genre_movies = count_genre('genres')\n#plot a 'barh' plot using plot function for 'genre vs number of movies'.\ntotal_genre_movies.plot(kind= 'barh',figsize = (13,6),fontsize=12,colormap='tab20c')\n\n#setup the title and the labels of the plot.\nplt.title(\"Genre With Highest Release\",fontsize=15)\nplt.xlabel('Number Of Movies',fontsize=13)\nplt.ylabel(\"Genres\",fontsize= 13)\nsns.set_style(\"whitegrid\")","cdca4d0e":"i = 0\n# Create a list for the genre count\ngenre_count = []\n#\nfor genre in total_genre_movies.index:\n    genre_count.append([genre, total_genre_movies[i]])\n    i = i+1\n# Create a plot    \nplt.rc('font', weight='bold')\nf, ax = plt.subplots(figsize=(10, 10))\ngenre_count.sort(key = lambda x:x[1], reverse = True)\nlabels, sizes = zip(*genre_count)\nlabels_selected = [n if v > sum(sizes) * 0.01 else '' for n, v in genre_count]\nax.pie(sizes, labels=labels_selected,\n       autopct = lambda x:'{:2.0f}%'.format(x) if x > 1 else '',\n       shadow=False, startangle=0)\nax.axis('equal')\n# Plotting the pie chart\nplt.tight_layout()","9fdc2bc2":"def plot_correlation_map( df ):\n    \n    \"\"\"\"\n    This function gives a correlation map\n    using all the features from merged data.\n    \n    Input : dataframe column\n    datatype : dataframe (integer)        \n    \n    output : Figure (bar plot)\n    \n    \"\"\"\n    # Plotting using the features\n    \n    corr = df.corr()\n    _ , ax = plt.subplots( figsize =( 12 , 10 ) )\n    cmap = sns.diverging_palette( 240 , 10 , as_cmap = True )\n    _ = sns.heatmap(corr,cmap = cmap,square=True, cbar_kws={ 'shrink' : .9 }, ax=ax, annot = True, annot_kws = { 'fontsize' : 12 })","1cf6ebcf":"# Select a number of features from the dataframe to make the correlation map\nplot_correlation_map(data_1[['userId','movieId','rating', 'timestamp', 'budget','runtime', 'numRatings']])","8a1405a2":"# Create a copy of a dataframe\nmovies = df_movies.copy()","df6c10e3":"# Merge two dataframes\ndf_1 = df_imdb[['movieId','title_cast','director', 'plot_keywords']]\ndf_1 = df_1.merge(movies[['movieId', 'genres', 'title']], on='movieId', how='inner')\ndf_1.head()","24fa3f5c":"# Convert data types to strings for string handling\ndf_1['title_cast'] = df_1.title_cast.astype(str)\ndf_1['plot_keywords'] = df_1.plot_keywords.astype(str)\ndf_1['genres'] = df_1.genres.astype(str)\ndf_1['director'] = df_1.director.astype(str)\n\n# Removing spaces between names\ndf_1['director'] = df_1['director'].apply(lambda x: \"\".join(x.lower() for x in x.split()))\ndf_1['title_cast'] = df_1['title_cast'].apply(lambda x: \"\".join(x.lower() for x in x.split()))\n\n# Discarding the pipes between the actors' full names and getting only the first three names\ndf_1['title_cast'] = df_1['title_cast'].map(lambda x: x.split('|'))\n\n# Discarding the pipes between the plot keywords' and getting only the first five words\ndf_1['plot_keywords'] = df_1['plot_keywords'].map(lambda x: x.split('|'))\ndf_1['plot_keywords'] = df_1['plot_keywords'].apply(lambda x: \" \".join(x))\n\n# Discarding the pipes between the genres \ndf_1['genres'] = df_1['genres'].map(lambda x: x.lower().split('|'))\ndf_1['genres'] = df_1['genres'].apply(lambda x: \" \".join(x))\n\ndf_1.head()","049e86d8":"#we convert the tille_cast column from list to string\ndf_1['liststring'] = df_1['title_cast'].apply(lambda x: ','.join(map(str, x)))\n\n#we remove the commas between the string in each row\ndf_1['liststring'] = df_1['liststring'].replace(',',' ', regex=True)\n\n#we choose keywords, cast(liststring), diector and genres column to use as our features\ndf_features = df_1[['liststring','director','plot_keywords','genres']]\n\n#we combine the features columns into  single string\ndf_1['combined_features'] = df_features['liststring'] +' '+ df_features['director'] +' '+ df_features['plot_keywords'] +' '+ df_features['genres']\n\n#we now feed the combined features to a CountVectorizer() object for getting the cv matrix.\ncv =CountVectorizer()\ncv_matrix = cv.fit_transform(df_1['combined_features'])\n\n#now we obtain the cosine similarity matrix from the cv matrix\nsim_score = cosine_similarity(cv_matrix,cv_matrix)\n\ndf_1.set_index('title', inplace = True)\nindices = pd.Series(df_1.index)","2dfbafbc":"print(sim_score)","4a15db2e":"#Method to get recommenations\ndef recommendations(title,n,sim_score = sim_score):\n    '''\n    This method returns movies which are similar.\n    \n    Input:\n        title: name of the movie to be compared\n        n: number(quantity) of movies to be returned\n        sim_core: similarity score\n    Output:\n        recommend movies\n    '''\n    \n    recommended_movies = []\n    \n    # gettin the index of the movie that matches the title\n    idx = indices[indices == title].index[0]\n\n    # creating a Series with the similarity scores in descending order\n    score_series = pd.Series(sim_score[idx]).sort_values(ascending = False)\n\n    # getting the indexes of the 10 most similar movies\n    top_n_indexes = list(score_series.iloc[1:n+1].index)\n    \n    # populating the list with the titles of the best n matching movies\n    for i in top_n_indexes:\n        recommended_movies.append(list(df_1.index)[i])\n        \n    return recommended_movies","585c1d98":"recommendations('Innocence (2014)',10)","33955310":"\n# Creating a small test dataframe to evaluate our models\ntests = train.copy()\ntests.drop(['timestamp'], axis=1, inplace=True)\ntests = tests.head(20000)\n\n# Creating the training data\nreader = Reader(rating_scale=(0.5, 5))\ntest_data = Dataset.load_from_df(tests[['userId','movieId','rating']], reader)\n\n# Compute similarities between users using cosine distance\nsim_options = {\"name\": \"cosine\",\n               \"user_based\": True}  \n\n# Evaluate the model \nuser = KNNWithMeans(sim_options=sim_options)\ncv = cross_validate(user, test_data, cv=5, measures=['RMSE'], verbose=True)","8e5143d3":"# Compute similarities between items using cosine distance\nsim_options = {\"name\": \"cosine\",\n               \"user_based\": False}  \n\n# Fit the KNNwithmeans algorithm to the training set\nitem_based = KNNWithMeans(sim_options=sim_options)\n\n# Evaluate the model \ncv = cross_validate(item_based, test_data, cv=5, measures=['RMSE'], verbose=True)","4de12f8b":"# Loading as Surprise dataframe\ndf_train = train.copy()\nreader = Reader()\n# Data selected for model training\ndata = Dataset.load_from_df(df_train[['userId', 'movieId', 'rating']], reader)","da100d71":"# Data split 99\/1\ntrainset, testset = train_test_split(data, test_size=0.01)","f171fc47":"# Check the info of the dataset\ndf_train.info()","61cfa8f1":"# Base algorithm\nalgo = SVD()","e085fbf2":"# Fitting our trainset\nalgo.fit(trainset)","068d9ad5":"# Using the 15% testset to make predictions\npredictions = algo.test(testset) \npredictions\n\ntest = pd.DataFrame(predictions)","a66d987c":"# View the head\ntest.head()","4b76e940":"# We are trying to predict ratings for every userId \/ movieId pair, we implement the below list comprehension to achieve this.\nratings_predictions=[algo.predict(row.userId, row.movieId) for _,row in test_df.iterrows()]\nratings_predictions","ad64f436":"# Converting our prediction into a familiar format-Dataframe\ndf_pred=pd.DataFrame(ratings_predictions)\ndf_pred","e66f2d6e":"# Renaming our predictions to original names\ndf_pred=df_pred.rename(columns={'uid':'userId', 'iid':'movieId','est':'rating'})\ndf_pred.drop(['r_ui','details'],axis=1,inplace=True)","0998ccd4":"# Snippet of our ratings\ndf_pred.head()","735f3b16":"# Concatenating userId\/movieId into a single Id column.(code has to be run twice to get desired outcome)\ndf_pred['Id']=df_pred.apply(lambda x:'%s_%s' % (x['userId'],x['movieId']),axis=1)\ndf_pred['Id']=df_pred.apply(lambda x:'%s_%s' % (x['userId'],x['movieId']),axis=1)","ee0e94d5":"# View the first five rows of the dataframe\ndf_pred.head()","781a5efd":"# Drop the columns: 'userId' and 'movieId'\ndf_pred.drop(['userId', 'movieId'], inplace=True, axis= 1)","d3a58f7a":"# View the predicted dataset\ndf_pred = df_pred[['Id', 'rating']]","5f10c48d":"# View the first 5 rows\ndf_pred.head()","ec665688":"# View the shape of the dataset to be submitted \ndf_pred.shape","546508ed":"# The submitted base model\ndf_pred.to_csv(\"SVD_model_base.csv\", index=False)","b89580b1":"# Copy of the train dataset\ndf_train = train.copy()\nreader = Reader(rating_scale=(0, 5))\n# Data for training the SVD model\nsup_data= Dataset.load_from_df(df_train[['userId', 'movieId', 'rating']], reader)","2f463afe":"# The full dataset for model training\nsup_train = sup_data.build_full_trainset()\n# The parameters obtained from randomised search CV\nalgo = SVD(n_factors = 300 , lr_all = 0.006 , reg_all = 0.04 , n_epochs = 60 , init_std_dev = 0.04)\n# Fit the model\nalgo.fit(sup_train)\n","b0d2d11e":"# We are trying to predict ratings for every userId \/ movieId pair, we implement the below list comprehension to achieve this.\nratings_predictions=[algo.predict(row.userId, row.movieId) for _,row in test_df.iterrows()]\n# View the predictions\nratings_predictions","81bd74f0":"# Converting our prediction into a familiar format-Dataframe\ndf_pred=pd.DataFrame(ratings_predictions)\n# View the predictions from a dataframe\ndf_pred","b2a80eb5":"# Renaming our predictions to original names\ndf_pred=df_pred.rename(columns={'uid':'userId', 'iid':'movieId','est':'rating'})\n# Drop the columns not required for the submission\ndf_pred.drop(['r_ui','details'],axis=1,inplace=True)","764fa7b7":"# Snippet of our ratings\ndf_pred.head()","2c6f82b4":"# Concatenating userId\/movieId into a single Id column.(code has to be run twice to get desired outcome)\ndf_pred['Id']=df_pred.apply(lambda x:'%s_%s' % (x['userId'],x['movieId']),axis=1)\ndf_pred['Id']=df_pred.apply(lambda x:'%s_%s' % (x['userId'],x['movieId']),axis=1)","b08d75d4":"# View the top 5 rows for the prediction\ndf_pred.head()","080f83e2":"# Drop the features that will not be required for the submission\ndf_pred.drop(['userId', 'movieId'], inplace=True, axis= 1)","4a751df1":"# Datframe that will be ready for submission\ndf_pred = df_pred[['Id', 'rating']]","61fe0955":"# View the first 5 rows \ndf_pred.head()","8c92854e":"# Shape of the prediction dataset\ndf_pred.shape","8f594f00":"# Submission final csv. file\ndf_pred.to_csv(\"SVD_altered_params.csv\", index=False)","03cc8764":"# #Log Parameters of all models\n# params ={'SVD_model type': 'SVD',\n#          'SVD_Params': str(svd_params),\n         \n#          'stratify':True\n# }","7eb35aae":"# # Log our parameters and results\n# experiment.log_parameters(params)","2ad0f40c":"# experiment.end()\n# experiment.display","d11758f8":"**Observations:**\n* We can observe that Man, Girl and Love are larger then the rest, which informs us that they are the most popular title words.\n* II, III and three are relatively small which tells us that they are relatively less popular than other title words.\n\n**Recommendations:**\n\n* The deminutive nature of II, III and three tell us that there were not a lot of franchise films and this is a worry for netflix because we know that franchise films are created because they already have establish fanbases which if brought to netflix would add to the viewership and improve the revenue.\n* Love, La, Girl and Man were the most occuring title words this matches up with the popularity line graph as romance and drama are amongst the top films, if any changes are obseved in the relative popularity of the genre types then this should be reflected in title popularity.","a28e0a47":"<a id=\"subsection-three\"><\/a>\n# **Creating a copy**\n\nWe will rename our train data as df and look at the top 5 records in the dataframe.","79f1e2cc":"**Observations:**\n* Drama, Comedy, Action, Thriller and adventure are the top 5 genre in the dataset.\n\n**Recommndations:**\n* Netflix should endeavor to match the order of genre of movies available in terms of quantity to the popularity of the genre so as to maximise the views, this in turn will maximise the revenue in films.","45c64e55":"# **Number of ratings per director**","e67b3292":"# Content Base Filtering and Collaborative Filtering\n","5a7d8c09":"**Observations:**\n\n* The Pie Chart represents the same thing as the Bar graph of the movie released with the added benifit of the relative distribution of releases.\n\n","ccc16460":"![](https:\/\/media.giphy.com\/media\/oenruB2DKC7p6\/giphy.gif)","cfc1f6ea":"Using UBCF gives us a RMSE score of 1.1 (based on a 2% sample of the train data)","8da62abf":"# **Conclusion**","71a7aacc":"Train:\n\n* UserId\n* movieId : Identifier for movies used\n* rating : Ratings are made on a 5-star scale, with half-star increments (0.5 stars - 5.0 stars).\n* timestamp: represent seconds since midnight Coordinated Universal Time (UTC) of January 1, 1970.","c2c0fdff":"## **User-Based and Item Based**\n\n![](https:\/\/cdn-images-1.medium.com\/max\/1600\/1*QvhetbRjCr1vryTch_2HZQ.jpeg)","37d8f205":"# **Popular Movies by Genre**","22fdad54":"## **Joining Datasets**","58b3f4fd":"# **Ratings Distribution**","f793071e":"# **Genre With Highest Release**","e68e68ba":"# **Additional Links For Notebook**","00b62542":"# **Collaborative Filtering**\n\n**What Is Collaborative Filtering?**\n\nCollaborative filtering is a technique that can filter out items that a user might like based on reactions by similar users.\n\nIt works by searching a large group of people and finding a smaller set of users with tastes similar to a particular user. It looks at the items they like and combines them to create a ranked list of suggestions.\n\nto be more precise it is based on similarity in preference, taste and choices of two users. A good example that we can give you could be if user A likes movies 1,2 and 3 and user B likes movies 2,3 and 4 then this implies that they have similar interests and user A should like movie 4 and B should like movie 1.\n\n\n**Why Do We Consider Collaborating Filtering Over Content Based Filtering?**\n\nCollaborative filtering recommender engine is a much better algorithm then content-based filtering since it can do feature learning on its own, in other words, it can learn which features to use.\n\n**Advantages of Collaborative filtering:**\n\nTaken that we find collaborative filtering better than content-based, we will give a few advantages to support the argument.\n\n* Takes other user ratings into consideration \n* Doesn't need to study or extract information from a recommended item.\n* It adapts to the user's interest which might change over time.\n\n**About Collaborative Filtering Datasets:**\n\nTo take note that for us to implement this algorithm or any recommendation algorithms we need a specific dataset that is structured in a specific format. This data should entail a set of items and users who have reacted to some of the items.\n\nWhile working with such data, you\u2019ll mostly see it in the form of a matrix consisting of the reactions given by a set of users to some items from a set of items. Each row would contain the ratings given by a user, and each column would contain the ratings received by an item. A matrix with five users and five items could look like this:\n\n\n**Rating Matrix:**\n\n\n![](https:\/\/files.realpython.com\/media\/rating-matrix.04153775e4c1.jpg)\n\nThe matrix shows five users who have rated some of the items on a scale of 1 to 5. For example, the first user has given a rating 4 to the third item. n most cases, the cells in the matrix are empty, as users only rate a few items. It\u2019s highly unlikely for every user to rate or react to every item available. A matrix with mostly empty cells is called sparse, and the opposite to that (a mostly filled matrix) is called dense.\n\n**How do you measure the accuracy of the ratings you calculate?**\n\nEssentially there are many approaches but we will explain the main approach that we will need for this project which is the Root Mean Square Error (RMSE), in which you predict ratings for a test dataset of user-item pairs whose rating values are already known. The difference between the known value and the predicted value would be the error. Square all the error values for the test set, find the average (or mean), and then take the square root of that average to get the RMSE.\n\n![](https:\/\/www.analyticsvidhya.com\/wp-content\/uploads\/2016\/02\/rmse.png)\n\nAnother metric to measure the accuracy is Mean Absolute Error (MAE), in which you find the magnitude of error by finding its absolute value and then taking the average of all error values.\n\nHowever, we will be focusing on the RMSE for our predictions.\n\nBefore diving deep into the code we would like to clarify the type of collaborative filtering we are going to implement. \n\nRecommender Systems are divided into three branches of which collaborative filtering is entailed, the figure below will make a clear breakdown to the reader.\n\n![](https:\/\/www.seoclerk.com\/pics\/want61009-1nSWOn1525162745.jpg)\n\nYou will notice that Collaborative filtering consist of two filtering techniques, \n\n* **Model-based Technique**\n* **Memory-based filtering**\n\nWe will give a short description of these techniques. \n\n* **Model-based Technique**\nModel-based collaborative filtering algorithms provide item recommendations by first developing a model of user ratings. With these systems you will build a model from user ratings and then make recommendations based on that model, this offers a speed and scalability that not available when\nyou are forced to refer back to the entire dataset to make a prediction.\n\n* **Memory based filtering**\nMemory-based rely heavily on simple similarity measures (cosine similarity, Pearson correlation and more) to match similar people or items together.\nThese consist of two methods namely **Item-based** and **user based** collaborative filtering.\n\nThe figure below defines the two filtering methods.\n\n![](https:\/\/cdn-images-1.medium.com\/max\/1600\/1*7uW5hLXztSu_FOmZOWpB6g.png)","0202bf0e":"**Advantages:**\n* Easy to implement.\n* Context independent.\n* Compared to other techniques, such as content-based, it is more accurate.\n\n**Disadvantages**\n* Sparsity: The percentage of people who rate items is really low.\n* Scalability: The more K neighbors we consider (under a certain threshold), the better my classification should be. Nevertheless, the more users there are in the system, the greater the cost of finding the nearest K neighbors will be.\n* Cold-start: New users will have no to little information about them to be compared with other users.","913c0610":"Links:\n\n* movieId : Identifier for movies used by https:\/\/movielens.org\n* imdbId : Identifier for movies used by http:\/\/www.imdb.com\n* tmdbId : An identifier for movies used by https:\/\/www.themoviedb.org.","50e09538":"# Comet","1ef90a9f":"**Observations:**\n* We can observe that a high percentage of our movies were rated above average i.e above 3\n* A low percentage were below 3\n\n**Recommendations:**\n* Hence More movies are high quality perhaps people are watching movies that are recommended to them, either by their social groups or the recommender system itself.   ","3f570547":"<a id=\"subsection-one\"><\/a>\n# **Checking for missing values column wise**\n\n**Handling Missing Data:**\n\nIn our dataset, there may be some missing values. We cannot train our model with a dataset that contains missing values. So we have to check if our dataset has missing values.\n","1d028ea3":"# Collaborators\n\n1. Thamsanqa Funzani\n2. Maria Rakau\n3. Kundani Netshiongolwe\n4. Lancelot Ngobeni\n5. Warren Alpha Mbekezeli\n6. Lazola Javu","57faf0a2":"# **Genre Popularity**","c9947061":"**Observations:**\n* We can obseve that there arent any significat positive correlations amongst the features , aside from timestamp and movieId\n* There is a very clear correlation between movieId and timestamp, this is possibly because movies have different lengths and do not end at exactly the same time","1d81c8df":"# SVD prediction with altered parameters","45c1bae8":"https:\/\/codeburst.io\/explanation-of-recommender-systems-in-information-retrieval-13077e1d916c [Accessed: 25\/11\/20]\n\nwww.quora.com. (n.d.). Recommendation Systems: What is the difference between item-to-item collaborative filtering and content-based filtering? - Quora. [online] Available at: https:\/\/www.quora.com\/Recommendation-Systems-What-is-the-difference-between-item-to-item-collaborative-filtering-and-content-based-filtering\n\nLungu, C. (2018). Building a recommender system. [online] Machine Learning Blog. Available at: http:\/\/www.clungu.com\/Building-a-recommender-system\n\nCold start problem - http:\/\/www.yusp.com\/blog\/cold-start-problem-recommender-systems\/ 32a. Frank Kane, Sundog Education\n\nTowards datascience. 2018. Building and Testing Recommender Systems With Surprise, Step-By-Step. [ONLINE] Available at: https:\/\/towardsdatascience.com\/building-and-testing-recommender-systems-with-surprise-step-by-step-d4ba702ef80b. [Accessed 13 December 2020].\n\n\n\n\n","dfed5001":"![i_rec.PNG](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAnAAAAFbCAYAAABVkLPLAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAP+lSURBVHhe7H0FeBTX+\/X3\/1Vw4u7B3V2Ku3vx4tZSWqQt0NJSKBTaQnF3d5fgxN0IhKDBNbjD+e55kw2bzSYktLQknfd5zrO7M3fuzNyZnXvm1f8HTTTRJFPIq1ev8OjRI5w7dw4RERGIjo7GzZs38fz584QWmmiiiSaaZBbRCJwmmmQSefz4Mfz9\/bFgwQKMHDkS33zzDaZNmwYPDw\/cv38fL1++TGipiSaaaKJJRheNwGmiSSaRO3fuYMaMGejUqROKFy8ONzc3VKxYEUOGDMGVK1c0TZwmmmiiSSYSjcBpokkmkevXrwtZK1++PExNTfHBBx\/A0tISzZs3x4ULF\/Ds2bOElppoookmmmR00QicJppkErl8+TLatm2LAgUKCIH7+OOPhcC1bNlSI3CaaKKJJplMNAKniSaZQGgejYqKEu2bg70dLCzMYZI7F\/LlzYuvvvoKV69e1UyommiiiSaZSDQCp4kmGVwYnHD37l0cOnRItG+WlhawUjA1NUGpUqUwa9Ys3L59Gy9evEjYQhNNNNFEk4wuGoHTRJMMLiRmFy9exOLFi+Hk5ARzMzNF4CxhZmaKGjVqYP\/+\/Xj48KEWhaqJJppokolEI3CaaJLBhabREydOYMyYMbC2toaZqakQOGrhGMAQExODJ0+eSJ44TTTRRBNNModoBE4TTTK4MDghODgY\/fv1E+2bqYmJEDh7O1t06dJZkvmyjUbgNNFEE00yj2gEThNNMriQnHl5eaFF8+bInTs3TITAWcDF2Rn9+\/fXok810UQTTTKhaAROE00yuDx9+hS7du1CieLFYWNtJSZUCwsLlCxRAj\/\/\/LOmedNEE000yYSiEThNNMngwgjUFStWwNHREQ4O9mJGtbGxQZ06dbBw4cKEVppoookmmmQm0QicJppkYGEE6tmzZzFp0iSYm5sLiSOBc3ZyQpcuXbB3796ElppoookmmmQm0QicJppkYGF0aVBQkCTrzZUrVyKBy5s3L77++muEh4cntNREE0000SQziUbg\/iGhH5IhmJdLH8baaKJJavLo0SMcOHAA3bp1Q44cOcSEamFujsKFCon\/G0toaaKJJppokvlEI3DvWHREjLm6qC3RB5OrPnjwQMDvhuu11A+avEnu3buHtWvXon79+sidKydsbawlArVMmdKYPn26rNdEE0000STziUbg3lKoMSPB0uHx48eiDdHh\/v374lzOEkY3btzAlStXJFs+NSL0WTp16hSio6Nx\/PhxAROxchnXxcbGSmHy69evy\/bsh\/3p+taROx14LJr8NyUuLg6zZ8+WklnM\/8YIVJK4enXrCrHT7g1NNNFEk8wpGoFLp9BpnGSKRCw0NFTKFG3evFnKGE2dOhVjx47FiBEj8MUXX6BXr17o2rUrOnTogFatWqFp06Zo1KgRGjZsiHr16qF27dqoVasWatasKZ911aTL5VzfrFkztG3TBl06d0K\/fv0wZMgQjBw5Er\/88gvmzJmDjRs34uDBg+LjRNJHokcyp8l\/R3gv8sXgpx9\/hKODg1RhyJE9O9zc3NC1Sxd4eHgktNREE0000SSziUbgjAgnRmq6ODkeO3YMR44cweZNmyRVw8yZMzFu3DgMHzYMffv2EXLGckW1FQGrUKECihYpAnd3d6lJaWtrAysrS5ibm8HM1ESKi\/PT2twUVqa5YWXG769hqZYR5myboE2xtDCHnZ0dXFxckC9fPhQvXhxVq1ZF48aN0bFjR\/Tv30+c1X9Uk\/i0adOwfPly7Ny5E4GBgThz5oxo\/3gummQ+oemd2tsvPv9ckvfyPvnoo49EG\/fNN9\/A398\/oaUmmmiiiSaZTf7zBI4mJpo\/WW7o9OnTCAkJEcK2bds20XSNHj0aPXv2FM1ZlSpVUKRwYbgqMuXq7Ij8bs4onM8dxQvlR6kiBVCueGFUKl0MVcuWQI0KpVG\/WgVBo08qoXmd6mjTsBbaN66DLk3rolvzeujRqiF6tW4k6Nm6Ibq3qI8uzeqiQ5M6aFW\/BhrXrIJ6VSugVqUy+ET1V7l0cZRX++C+ihXIi0J53ZDHxRGuTgouzihQoAAqVaqENm1aS1Ti5MmTsWTJEuzYsUMmc072V69eFQ0itXWaf13GFr5gMIChU6dOEsBga2uLDz74n+R\/o\/\/byZMnE1pqookmmmiS2eQ\/SeBI2nRBBXTypgmSptBpf\/6JwYMHo1XLlqhWrRqKFSuGPO7ucHZ0gL2tDWytLGFjYQYXBzuULpIfjaqVRacmtdG\/Q3N806cjJg7rh7ljh2HVH2OwZdYvOLBkKg4u\/ROeq2YicMN8hG5djLAERO1cjuO7kiN82xJZH7hxPrzUdvtVHzvnTcamGeOxZOJITB35BX4Y1B2DOrXEp41qoma5EihTOC\/yOtnDxtIc1gpO6vjc3dxQWJHNMmXKiKmWUYo0727duhVhYWHiY6cjcpqfVMYUEvKlS5eKyT1btmyigfv4ow\/RulUrrF+\/HteuXUtoqYkmmmiiSWaT\/xyBo3mUpidqL6ih8PPzw6ZNmzBxwgTxG6pevTpcXV0lp1ZuBXtrSxRydUTZwvlQtWQh1KlQAq1rV0bvNo0wsl8XTB89BMsmjcaWmRNwaPk0BG9eiBiP1bjstQVxAbtxL9gDj8MP4vmxw3h54igQ7fVmnPDEi6gjeBxxEHfV9td9dyD20AYc27EU3mtmYcfcXxPI3GCM6N0RAzu1QOemtdGwallUKl4QRfI4w8neFuZmpsidM4dEJRYtWhQtFTEdNWoUFixYIGZW5g87f\/68BElwXDTJWEIz+R9\/\/CEvGzoCRxNqh\/btpbQWAxw00UQTTTTJnPKfIXDUuFHjxEhQHx8fidyjeZQFwIsUKQIHBwc42NvBUcHdwRYF3ZxQq0Ip9GnXFJOG9cfaqT\/iwNKpCNq0EKf3rcFlzy24oYgVSdrdoL24H7IPD8P244kiXc8UWXuuCNjL40cVPPFKETLCKFlLBdyGfbyIOioE8GnkITwKP4AHal\/c52217+s+O3DFayvOHlyP0K1LsHvBZMwa8zW+7tEB7Rp8gk\/KFEXhPC6wt7NVsJPzzJMnD8qVK4f2aqIncaXJmFpITvhMZ6IFQ2QMofmUpnL6RebMGZ9ChDVQGUBDcq5dR03eV+HzmPdnRoXmfqLJ+yCZnsDxj0YfNzr0M63C0K+\/RsOGDWTSI5FhkIG1hRmKF3BH24Y18V3\/rpg\/bji2zZoIr1WzELFtKc4dWI8bPttxL3ivaMWoHUuRkL0FUUsCbm\/YR2r7UuCxvFBE70nEIdwJ3IOLRzbhxO6VCFZk8+iKGdg4fRx++\/Zz9G3fHJVKFEIeRzs5ZysrKxTIn198++jnR1JLUzJ9ATWN3Psv69atk+hmF2dnCZChppX3NU3lTFGjTTKa\/JPCZwaJmT6ePn2amNfy8aP7eHj3qiDuegxuX43GzUsRuHbeD9fOHMZVhYsnduDC8W3xOLYJsRFrEnEuZBHOBs1LEWcCZiHGZwpO+U7BmcA5RtvocD50aZK+L0RtTdzvpejdcjzXzhzB9dgAhUDcvByBOzfO4H7cZdy\/cwUP7t+Tl13OLbrzIwzPXwdNNHkXkmkJHCMvaR708vKSgt4kbkx2StJGP7ECro6oVLIIOjWti1GKtM0bOxx7FvyOcEXYrnpvw+PwA6L9SiRUaYEeqUryXX+ZseXvEDyHByEeOHdwPbxXz8bySaPx24gBGNKtLVrWrS6+fLly5RTzW+XKlUUrxzQojLilr5xmXn3\/hMSMk8esWbMkaMXS0lKqL5iZmUr6mXnz5kkuQU00eVvhf14HEhASMZKVxw\/vKAJ2BfduKgJ2ORg3Yr1x4+xBXIvZhUtRG3Ahci1iw1cqsrUAZ\/ynKzL1O056\/YKTnj\/j5NExiD74jSDK40sc8xiMyN0DEL6jJ8K2dRUEb2qH4I1tBEEbWiFofdNEBKyph4BVtVOE\/8qa8F1WFb7Lq8J\/VS2jbXQIXNsgSd\/BG1sn7jdkc4eE4+mG8J29Ffogcs9AHN\/3VcLxf4sTh39A9JEfEeM1QZ3jHzjlNx1ng+er814o538xaiMun9yJq6cP4No5L8RdCcWd6ydw79ZZIbAcRxI+fa0ex1l\/3LUXME3eJJmOwPFPQTPp4cOHMWPGDAwYMEAmOZoPne1tFWEpgOa1q+KbXh0w\/fsvcWTFdFw4sgkPQvfhWeShRNOnMTKULqRE1P5hAkfEm2KPiBmWGsRb\/jtxYtdK7Jo3Gb8O74+2jWqjQonCyOPsAAdba7i7uohf1XfffSdBD1FRUeIQT9Kgyb8vfNDz5eSnn35CoYIFJYUISZyZmZkE4TCCWgtg0MSYkBQwaIkgSXj29CGePIrDo3tX8OD2Gdy9cRx3rgThxnkvXDtzAFdiduPSiS2IjViNc6HLcS54Hk77TVXk5SdFwL5C2M6+QnRIfALWNob\/6vrwW1kbPksrwHN+MXjOK4Ajs11wZJYDjs6yz3TwnOOqzrEgvBaWVOSxkoDnH7iuKUI2tUfY9s8Qvqs\/ovYPw\/FD3ysi+wtO+09VRG++InqrhOhdit6JK6f249pZT9y8EKCIcRju3IjBgzsX8eThbXWNHiUSPEJ3\/XTQ5L8rmYLA8aHEG5sEIyYmRpLqdu\/eHWXLlEG+PO5C3PK7u6C9Iip\/jhqMg8v+xIndK8TUSB82+q29YoCBAfH5S3hboqbT0qW2fXr6NtIXTcCPwvYrIrcL5w9tQMiWRVgw\/hsM6NAM9SqVRrF8rnCws0HePHnQsEEDIQpMHEyNHP0ItYfGvyvUhDD4hr5ubq6uyJ07txA4JvKdMmUKfH19cefOnYTWmvyXhM9CHUl78UJN+oqgPXschycPruPx\/ct4EHdWNEFxVyNx42KwaIguRm3G2eAFilxMROT+bxG67TMEbWynyFgDeC+tjKPziuDwTEejBEbDX4GDEFzfZVUQsKYJgjd1QNiOXooYf40Y70k4HTAbF45twJXTh3D1nB+uXwjGrSvHhNzdu30e9+Mu4eG9a3j25D5ePH+Cl4qQ6xM73b2gSeaVTEHgqN5nVCkntd9\/\/12iLfMo4mZpZoIS+V3Rtl5VjOrfBev\/+BnHt6\/E\/WAPvDh+JH1EKL142751hCu17dPT9xv6ehXtiedqLE7tW4M9C38XIjdajVXTTyrAztYa1lZWosFk0mD6VtFHjqlXNBL37wmjqLdv3y5VPhiUoiNwNIOvWrVKNKZso8l\/QdQELRM1J+yXePaUvliP8PDBfcTdvIArZ47ifPgqnPT6Fcf2DVcva13gu7IOji4sg0MznTOtZizTYbYzvBYWh9\/q+gja9Cki9w7FiaMTERMwFxej9+D21RO4G3ddvWDfVf99+uc9UPfBYzx9ooid9qzOtJLhCRzJG3Oa6UymTANib28HBxsrlCqUB52b1sWcn4aKb9tt\/914GnEo3kSqT2x03w2hIzopLTe2Xn9ZSt9Tg65dam311+m3N7Zc91t\/ucEymlifRR7GvRAPXPXaioD18zFt1GDUqVgKzo72sLSwgIO9PapWqYLRo0ZJsmNGrNIEo8k\/L\/RLXLRoEVq0aKFIm60EMJDAOTs7Y\/fu3eJCQFcCTTKfUKOi85l6eP+maGQundyLM8GLxTwXsXsQQja1ReDqOvBfXgl+S8vCd3FJeC8sAu8FBeE1L6+Y\/UgIqAEyShY0vIdQ12q2Ezznusk19J5fUK6pz6Li8F1SRl3rCghYXQ8hmzsifNcgRB38QQI5Lh7fihuxAYi7dUmsJ7rAC909pJG7jC0ZmsDxZgwODhazEZ3vS5QoAVsbG5QomA8DO7bE6j\/GwGv1bMQe2ohHYQfw0hjBMUJoUlyvv0x\/uSFSWvembVJbnxJ02+m21f\/UfddfbmxdwjKJZo06IhpKRt7SP3DSiIFoVquKpCJxUWSuYMGCaNa0KVauXCl59PhQ0IjcPyu3bt3C96NHS\/Qw73cGL1haWkg6nIAA9bDWyHWGFpI0nb\/Towe3EHc9WvyjLkZtEh+06KM\/I3LPAPVS2gWhm1ojcG1D+K\/8BL5Ly6tJvaia5PPIZG+cCGjItKCWbl4+uQd8SOpWVFP3Rn2EbGyB0C2fInxnXxzbPxIxvn+KT+OVU\/twR91bD+\/flrmUgX+6wAqN2GUMyZAEjpMTJylqG4YNG4ZqVatKDjfWGG1UozImDO0v1Q9uBezCk8hDyYmLIQyIjNF1hu0MkZbtdN\/12+mg38bYMt13\/WWGbVL7nRqMtVW\/GfhwymMNNkz7GeO+7IX2DWsij5O9FEyvX68exo8bh3379uHSpUvaH\/4fEo7zhQsXpLJGoUKFYGNjLQmb+VmrVi0h1XzD1nxf3n\/hNeKzjHjy6C7u3zqD2xf9ce30XlxQE+zZgD9x8sgPOLb3C4Ru64agDS0kutJncWkcneOqmT81pA\/qnvFaUBx+K6ojaF1ThG3thCiPwfHRtD5TcCZ4IS5EbRafu7hrJ0TDy2cJrVwkdXyh0J4r75dkKALHyYs3FCPsNm\/eHD+JFSwAd2cHiaLs1qIe1kz5CWcPrJfABFY+SKx+oCMpxmBAXFJcrv9bH\/rb6KC\/PK3tDdfpL9N9119mbLkOb1qvj5TaqmXUyDH\/3dkD67B9zkQM6doaZQu6wcosN0qXKol+\/fpJvdXwsDD5k2t\/8HcrfENmMEmDBg3g5OgYT+DMzSSYgdeC7gR80Gry\/gmfX7w2jx\/G4cHts7hzJRTXzx7BlZPbEBu6CDGe4xC5ZxBCNn+qiFodeM0vqGnSNLxzeM5xUcSuiKRfCdrQEqHbe0maFAZRnAtfh0vRe3DtnLeQukf3b+DZ08dyH\/PFg\/c0oT33\/x3JMASONwjVvEwyu3fvXjRv3lz8slwdbNG0RkX88d3n6sG3UKJKWbkgGRlJK9JDfFJCWrfXb\/dX9\/kuoY5NR+SOb1+MpSN7oXIRF9hamsLNzRU1a9bEd99+i3PnzgnB0P7M704YXUrNc8WKFWFjbS0mVFZfYALfadOm4fbt25r59D0Q\/gdevniO588e4umjW3h07yLuXD+OGxeCEXtsk\/pbTZT0EgHrmqvJs6hG1DS8dxAN77wC6mWiLkK3dkP00XGS54\/m\/BsXwxF3\/RTu37mMRw\/iJHhGR+h472tzwD8jGYbAkRiw3BOzz385eDDy58sHF3sbNEkgbwEb5iMucK8QDSFDb0Oi0rKcSE\/\/mQXqfMU\/zn8Hzq\/\/DRP7tkGtMoWlsL+zk5OQuLlz5wqJo8pdk3cjV69elQCGkiVLSiUNHYErX768\/De0NC\/\/pqhJSyav+GhQZuxnEldqMsJ2DoDXkio4OsfN6GSpQUNGgedcd0l9ErKtN054\/YFLMftx89pZ3Im7LRUqGPn6VN3\/Gol795IhCByZPf2stmzZImYiOtKztif93aZ\/PwTh25dI0XiWk0okV2klWCm1S2379PSfiSAJgY8dxDO\/TYhe9SsmDWiHRpVLwt3JXhIlk8SRRNBHi+ZUTf5+4UvMzz\/\/jLx580r1BRI4pnqpV7eu5H\/T\/N\/+eeHz6fHDu2Jiunh8C44f\/B4hW7oiYHVd+C0tJ5GCXvMLKPLmoiZAzW9NQ0aHQ7zZdV5+eC8sBt+lZaW6BatoRHp8jbPBC3HjYogidDfkhVIX9aq5dvz9kiEIHM1GO3fulHqdzDzPtBa1K5fFnJ+G4eSeVbgf4pE0NYgh3kTGDH\/rlumvS62Pd42U9q071ndxnKntU5G4x56rcGLVJCz8thc61quM\/C4OUouzebNm4p9IXywtlcXfL5GRkejdu7doPc3NzIS8Mf9b27ZtpTqDZj59t0LtJjXMzLd1M9YPFyNXS\/oOloQK3dwWgWvqwWdxGUnQGp+qw9gEqEFDJoO61z3n5VUvKyUQsPIThGxqJSXIjh\/+CWeCl+DKqYOIu34aDx68JnSapeCvy3tP4MjamTy2f79+KFK4EFwcbFGxZFHM+nEoGCHJ8ldSRYHkIsYHr84H4+WFUAG\/c1ki8dDB8LdumbHl6YF+Hyn1p1ue0vq0IKVtU1qWlv2kpZ1+m7DdeO69BmfW\/YGtE77Et12bwtXeSpzqGVyybNkyHD9+XHvr+puFyarr1q0jUdckcBbmZpK0+vPPP5fIbE3+fiEpfnT\/utSzZMDB2aA5OHF4jNTwDFrXWBG2sjg6x934xKZBw38UnnPc5GUmYE0DhG7tKuXEor2nIjZiHa7H+uPu7cuSukQX5cr\/mWY9SJ+81wSOk\/+pU6ekuHqhAgWkVmfzWkwT0hfnD254rXWL8cPL82HA5eN4GXcBL+5dFryMi1XLovDqXBBw0js5CdFHSsvTA\/0+UutL1y61NqnB2LYp9ZfSckOkpZ2uDRF1GAjZgeeeK3FvzxyELBqLfq3qwMnGEq4uzmjVqpUUVT9z5kzC1dTkrwofcAzgKViwAOxsbSR9iEnu3ChVqhQmTJggQT6a\/HXhJPLsyQM8iDuPuMuBuBqzU5G22YjaN1RSeUgaDyMTlgYNGlIBExHPL4bAtY0R6TEEJ32n4UzYesRGH8KNSxG4c\/uGaOf0I1w1SV3eWwLHC3jz5k3Mnj1bKgA4M2Dhk4qYO3YYzuxfK2lChFScUuTt4jE8v3cNeHYfr16+Lvb76uUzvHp6TxG5c4rEBceTOH0SQhgSE2NkJb142+1T2i49\/aWlLdvoYGw9oVuXUhsuj9gH+G\/A88NLcHvXLAQvGYtP61WBi5013N3c0KZNG3G410pv\/XUhqeA4rlixQqou2Cbkf2MZLeZ\/W7p0qTz8NHk7efnyhSJtd\/H4\/hXcu3kSV0\/vx0mfPxCytQu8FxbXzKEaNPzNYJTroTlFcGRFKxw7MBonQ7fi0tkg3L52CnfjrskLqY7I8fmnaeeSy3tJ4HjRWC7I398fTZs2lQmrWrkSQt5O7l2Fp8cOSQ1PEomXsRGKvF0Fnt9XWya9wLzgLxWhI7GLJ3FBbyYt+jDWhnjT+rQiLfsiUlpvbPnb9mUIXTvD9vrLE7Rw8FmDl4cX4+7uOTg4dTha1ygHRxsr5HF3lxqqO3bsEFW5Jm8vfCulNvPXX39F7ly5EgkcI1A\/\/fRTHDx4UAsceSthMt3nuH8vDheObULE3q+lgLtWvF2Dhn8ePssqIWzXIEQHrcGZ06dw+\/atRL858gJNksp7SeA4EdEJnuWaWB7LzsocXZrVw75FU3DLb6ee6dQHuHoSr54ydUIKvlYJJI4aupfnQ1MnMFynD2NtiDetTyvSsi8ipfXGlr9tX4bQtTNsr7+cvofUwgVsBI4uxQtF4phi5OuOTVC6YB64OTlIvrJJkyZJ8mVNC\/f2Qj+R8PBwfPvtt8iRI3sigbO2skSfPr2lPq1G4NIuJMRxVyNxLnih1A\/1XfEJfJeUlnqh8dGixicYDRo0vDtIdOv8AvBZXEr+k0wqHOM\/C7GngsQiR62cLghC08i9hwSOkzxNRYGBgejVqxdsbW1RrWxxzPhhCM7sX4dnxw6\/JhMxvsC1GPU0fpjqxaR55OWTu3h1MTKBeKQDhsRF9z0tv1Nabuy34Tp9GC7XtTXWXn+d4Xrdb8N1KbU1ttxwXdQhCWigKZUk7vH+BfD48xuM6NwYlYvlg70904vUwNGjRyWaWCNxbyfUYB44cEACRLJnjydwlhbmcHR0wDfffCMF7LWxTVk4NixXdfNiEC6EL0f04VEI29pRaoiydqRWlkqDhvcMsx3htaAw\/FZUQ+D6Vgjf\/YWa8qfi4sl9iWROV7v1v6qde28IHN+IeTE4yUdHR4v2jcW5zczMMLh7OwRvXogHofuSkgo9ApeaCLljm0tRSclHepASgXnX+Kf3ZwypnTu1occOAiE7hcARt3bNwq7JX2Ngq9oo4OokhdapOaIGSUst8nbCl5pVq1ahdu3ayJUrl2jebKytUKBAftFwPnjwIKGlJvry7Ml93L12DJdPbMIp7wmS2oDF30naNL82DRoyDph3jmQuZEsXRBwYI+lJrp71QdzNi0LmdETuv6SZ+1cIHFWgZND06aHp5\/Dhw9i2bRvWrV2LxYsWiZ9Pjx49YGJiggJ5XLBwwne4F+IRny5ERxxIJtKogeO6V6lp4FIiJzro1uvDWLu\/G8b29U\/uXwfdPlPaL0kcTak+awDPZULiLmz4A2t+GojODarCJGdWFC9eTGqmMiEzybqh8I\/H+4IEnuZWVnRgGpLQ0FAEBATAx8cHXl5eOHLkCDw9PeW+YVJb+kr+F4T\/lylTpqBwoUKSOoTmUycnRwnwWbhwoeYfkiD8rz9\/9hgP487h9kVvXIxchROHRirS1giec\/MYnRg0aNCQsUAfVb8VNRG5ZzBi\/GfjXNQeXDkfIamUqCTQRbJmdjL3jxE4mjDIkm\/cuCGT74YNGxKI2meoXr06ChQoIOYgpkegdiF37lzIkT076lUpi43TxuFu0N74Sgv6ZEJ84KLx6uld1f8bfODuXMbLcyFJt9fw9+H4ESB0N+C9UhG4ZXh2cKH4wy35rgeKuVkiW5aP0adPH+zbt08IGjVGJGvXr18XUnfy5EnJcbZr1y7Rvv72228YNmwYevfqhQ7t26NZ06aoX6+eVHuoW7euEHzW\/gwKCsr0f1KeH6tbUIvJgB5q3nLlzIFCisx1\/PRTbN++PaHlf1f4H2cU6cO7F3Az1gcx3pMRsLaxemvPZ3QC0KBBQybB3PzwXFYPvttHIirEA5fPh4tW7sH9u+I7TO6RWeeIf4TAcQCpKaEGhfmqWrdujXLlyqGgIm0kbGampjIhmZmaCHLmyI4sWbLgf\/\/7H+wtzfBV93bwWj0bcYF7kpKGE57xiXvvnJdIUzXVxe8wQXjRhNhx3cWIeMKnt20i9Ps0Bv22xtobLtd9T+vyNyGltrp+3qa\/N22jW2fYJqVtxJR6AAjYBHitEC3cQ495CF7wI4a2rw\/TnNmlfueYMWMkl9mhQ4ck2e\/YsWPRp3dvNGvWTIh8mTJlULRoUeTPnx+urq5wdHCQclEkLqYmJong8ubNm4tZkX\/SzEziqJmMiIiQMnI5cuSQygvZsmVDhQoV8PXXX4t\/4X9dHty9igvHNiBse094zS9o\/EGvQYOGTI1DM50QuL4tTgXMxZXzYbh9+3ZisuDMOEe8MwKnM5OeOHFCtC5M6jpgwABUqVIF7u5ucHVxQbFixfDJJ59IvjBqZ776aojCVzJRMf0EIxitLM1RpVRhTB7eH8d3rcSTCFZeSCANJBMxvnh1IRwv4s7h+d1rkvcNzx8IaDZ9rh7sL+LO4tWZwKSEg9vqoL\/cGPTbGmtvuFz3Pa3L34SU2ur6eZv+3rSNbp1hm5S24XKSuNBdgM9qIXDUwsVu+AMrRveBnaUJrK2txIerr7rWvMZM9lutWrX42rb2dkLUnJ2dpM4nk9NWrVpV2tdQ94hEI9va4uOPP8ZHH30k2qf+\/ftLibXMTuCoqWSakA4dOgiBc3JyEgLH\/G\/0fyO5+y\/K82ePcPNSKE77TUXQxtbwWVJWkbf84vxs7OGuQYOGzA0GI0lJr8UlEbiuKY4fGoNLMQfE6kM\/YppXM1Ow199C4DggdCAkaaNpjHZoVlCg3xLNYd+MGIGGDRsibx532NnZCoGrXKkSOnXqhO+\/\/x6rV6\/B0aOeCAsNE3h7+4hPHLcrWCA\/bK0s0KFxHexe+Btu+iekEdEnEqf88CqW5bMiFFm7iBf3r8VXYrh1Ri0LT6jEkIL2Tb+fNy0zhK6NsbapLdf\/bQj97Yy1TW1dStBvn97tdJ\/6fRiDbl3kfsB3bTyBO7QIV7f+iV2Tv4CbrRmyZf1Y6qW6uboiT5488unk6CC+XG5ubihWtCiqKdLGe4V1b2lCHT16NAYPHiz5AGlmJ3ljHrQWzZvLSwHJS2b6QxoTvgitX79exoURqA4ODkLgWrZogeXLliE2NjahZeYX+rXcV\/\/xy9HbJZI0ZFNr+C2vrPm3adCgIQk857pLoX1WTwnZNQRnQlfjcuzxRD+5zOA3\/JcIHAeA2g+qKRmQQGdzBiLQf2nIkCHo2rUrGjVqiNKlSqqJWk3Sri5o3KiR+PIsWLBAtCdMF3Lp0mUhfs+ePRc8fPhIfKNoZuNEzqz+FUoUxm8jBiB062I8ZyoRQ\/JAgqbAklovLkQaJ24pEZDU1r0J+n3r92H4W3+54TJjSGn7N617F9DtLy37pC9cwCa8OLIUN7bPwOFp3+CLtrVhaZJDkY4ssLG2Rr58ecVUysL33bt3k1JpEydOlKobK1euwMaNG6X+7erVq\/Hjjz+iffv20p4pZVg6qmHDBpg7dw6OHTsm2qnMLvQRnDp1KipUKC854Ozt7ZErZ041dt1Fu53ZAzmoXX3x\/Dnu3T6niNtWnDw6FsGb2sB7YTGjD24NGjRoSMRsR3jOK4TA9c0Rtmc4jvstxvkYfyFy5C8MeMioFpy3JnAkb9QMBCrSxomWppwvv\/wS9evXF+1KTjXBiLYkdy7RvFWvXk1I3bp160Q7R7t0agyYA0qV5\/r1G1CnTh3kdbZHt+Z1sXXWBDGjGiUPqUGfhOgjpXWG26cGY9vq92FsveE6\/WX6y1Nqr1uu\/1u3zFh73XfD9Tro2um3N7bOcJlhO36G7sS9A4sRtOBHjO\/TGnaWprC0sED1atUkKIFatT\/++ANbNm+Gj7e3RJySiMWbQl9r06iFZd4z3k\/ZsmbFhx9+KHVWx40bh8jISGn\/X5CYmBgMHToU+fPlUwQ2lxBZ+sHx\/8SAIGNRvZlFXjx7hPu3z+La6f2I8Z6EoPUt4LWgkPEHtQYNGjSkAmrlPJfWRsCO4YgOWocLp4MQl1CDlXwkoxG5dBM4niDVj6yUQA1a\/379ULp0aZlUWNaHEws1BPxOrdsn1auLX9uaNWvFDs2BSqvJixP0qVOn0eOzHrC1tEC1MsWw8Jdv8TBs\/2sC8T5Cn+CkFW+zzT+BtB6XfruIfYjdNR9rx32Bbg0qi+m0cuXKWLZ0Oc6cOZvoi0Cze2oZtZcvXy7+ke7u7uqFgBq8bOL7NmrUKElqS9MhtU+p9ZHRhQ8VkrTOnTvDwUH9r8zNBboC9nwZyozy4sVTPH14A7cu+uGk1yT4rawpWdqNPZQ1aNCgIT2Qig+LysFr05c4EbJLTKt34m4k+shllPkk3QSOBIyJdv\/880+JFmQxbZq1nJ2cxOmcWrgJv\/yCfn374hf1SVPY+fPn1aR9P92DQgLHDPODBg2CtZUViuZ3xx\/ffY5b\/rvwMirBDy416IiF4Xfdb90y3Xd9GLY13Eb\/tyH0tzHcTvddf70+9Nfrt0tpuSEMl79pG\/3lhu1SWm64TLdc9z3qMGJ2r8CCH4egTY0ykniWASw0iVNrm1aNEc3oTCtCEyu1d8x\/xiAG+tFVrlxJfOOo\/aX5PjNqofggoWaSZJWabSa1ZjQutduMwF20aJGkF8mMcuf6SUQfHQ\/fZZXUA1erkqBBg4Z3AQd4LiwDrw39ERW0Xeac+\/fvJ1iD3n8Sly4Cx5OiPw5NW0wFwgmFGpGWLVuKlu23yZOxaeNGHDlyFJs2bZL0BhdiY8W\/La1aNw4ai0vTxEryFhYShr59+sLa2hr53Zwx\/qu+uOK5NbkfnDHoiIXhd91v3TLdd30YtjXcRv+3IfS3MdxO911\/vT701+u3S2m5IQyXv2kb\/eWG7VJabrhMt1zv+5m967D4p2Fo80lp5MieVTRIGzdswsnok7h29ar4H7xJc8Z74OTJGGzfvkNMrgP690eNGjXg4uIsYJQy\/cDoH8bUJNQKs8\/MIjwXatjWrFkjL0fm5uawsbGRBNe9evbEli1b5IGTWeTli2e4d+scTnr9iqD1TeCzqJimddOgQcO7BSuyzCsIn+U1EbFvJC6f9RNrIfPWkvO8z0Fy6SJwZKb0PWJGeKYyoFmrbZs2mDt3ruR4o2buqpqcb9+OkwHQRXukh7xx0qKJ7YqajBngcOjgIXz2WQ8hcPlcnTFuSG9cProlZQKnIxNv+q6D\/m\/det0y\/e+G640t1\/+d2nL93+nFX93+70Jqx6CWXzi0ERt+G42ejauKCZXpQGbMmImjRzwRER6ZaEpNjcTxvuGf6OrVa3Jv8YWAZkNqo\/LmzSOJn+kXVqPGJ5IPjRo+3nf802UG4X\/H398f06dPR7myZRWBMxMCxxcn+sTxfPkfy+jC60w\/t\/OhCxG6tQt8l1aE51w34w9bDRo0aHgXmO0Cn8VlELSpIwL3TsCJY8Eyn1ABxTklNZ\/9f0vSReD4ts+yV4wiZTqDPHncMe3PP3H8eJRMxjoz1tuqHjmZ37p1CzEnYxCkyBvNr9T2MQqR9TSLFsiD37\/9HLf89FKJGCEPSZDScmNIrR8dUmqT0jap9UXo95cW\/JVt\/y686RjUcpq5PZf\/ie96tkWu7B\/Dzc1Viq5vWL8BBxUp9\/HxxTH1MnDhwkX1B3mYqgMpl\/Pe4gsE66muXLlKUowworlYsaJwsLdDieLF0LNHDzErMrUI276Pf7j0CB8c1GR\/9913KFqksJiQ6WtKMNKb50mCm5Hl4b0ruBqzB9GHf0DA6npaUXkNGjT8u5jtisMLKsFr4+eI8F6K2DPh8qKsC3R4nyRdBI7aNSYU5YTCNAasy8g6jIwifPw4PqpUF+CgI3RpJXNsx0Fi4t+jR45gz+7dEiSxdOlSNGjQADaKwNWsUBpLJo58\/4MYNOBpxEGc9liD2T9+jbyO1sieLSs6d+qEOXPmYOvWreLbtnfPHsn5RzMhfeNoMk2LtvbJk6c4dixK\/N9GqnuRJbacnRxhaWGOmjVqYPz48aKtY5BDRiZx9H+jtpvj5q4IMDVw9nZ2yJcvn5hV6c6QEU3G\/K+Lpv1GFM4Fz0fwxnZSDsfow1SDBg0a\/gWw3urR5Q0R7DEOJ8P3ib8xFQN8dnGeSiu3eZeSLgIX75N0UvJ1MfEq83q1bNlCcrqxJiXXMWKOWhBvb29cuXIlzeasR48ei+ZNn7zRx4eTcfny5SWNSK\/WDbFz3iQ8jTxklDTotD8a\/gb81bE8fgS3fbdjz\/zJaFunCnJmzypmVF5P1sElgdOBucyCggITgl3SRvxJzEhwqJGbP3++VCWgbxiDHIoWKYKBAwZg8eLFotHNqCSOdYNpKmW1Cgd7eylgz4oVrGbCwAa+8KTVPeF9EZa2e\/LwFq5fCEXk3q8kY7qxh6cGDRo0vBeYWwCHVnyKwx5rcf5MFOJu3xLLR3oUVO9K0kXgKGSg9E374YcfxC+NUagF8ueXkljMFE9tGSNSmb+LmhZOQm+Sly9f4Ny5C\/D28hHyxkmdBG7t2rVSYov+TqUL58O4Ib0QsGF+vP+bPlnQM92lG4bb6fdl+N1YG2NIbR2h2\/5N\/eiQUhtjy9PSX3qQnv7026rvD0P3IXLbIkz9oiMsTHKiiCJWDHah5kyfwOlInJcXq3GE4tLFi+ot581RQNSwUUPbrl07KcPFvIP\/93\/\/J3V0SXjq1auHHTt2ZEg\/MZJOarZZPotpVJgAmXWCHR0dJSCEL0p8ocpo8vDuZZwJWggvJuGd7WT8galBgwYN7xGOzHLE4fml4L19LE5EvfaN07mN\/VuSbgJH9SFNNyRYvXr1kvJGNjbWUhJJVyKJBeq\/HDxY\/OVSz5TPYvPxZtdjkVE4eOBQ4oSuI3CMdrW3s0W1ssWxcPw3OLN\/LV5EHYknC+mBjmC8rzA8Pj0ilOS34fI3Ib3t9aHbTtdHevpRbZ9EHMSFA6ux\/deBcLAyFfJBYk+N2fbt25MQuN2KuOtIXHhYmPqDXMXTp09SJXGnT58WB\/+aNWsid64c+OCD\/0my3ywffwxTU1NUqlRJyCLNsxlN+J9gwFDjxo2lBizryLKIPwv8Dxs6FFFRUdImowgJ6c0Lvjh+YDh8F5fSyJsGDRoyFmY7w3N+MQRu6gz\/w2vE4sgqVP\/mczjdBI4TKp35aO6i9oP5uRgVlyN7NpiZ5hZtAVM9zJs3X1JAsG1Kwr5oYuUg+Pn6Yc+ePYnkjdo7+tdVq1ZVnLeb1KyC3Qt+i88Bl1IAQ2pID\/n4N2Ds+PSX8bs+9NulhvS214duO10f6elHtX2uiPY9\/204uWoCSuV3gYWZqWhpf504UXy49AmcjsR5eHjg8KFD4qBP8p+aiZD3IM33rJOaSxG4\/\/3vf6IV5ksFE922UeSfZnjeXxlNaEqmmZSabSbFtrKyEhMxC\/8zpcrZs2czTLTt4we3cCFiJcJ3fAbfJYq8GXs4atCgQUMGgNf8gvBc0Rye28cjLOigBHeS51C59U+bVNNN4ChUG1KFSILFXFxM1MrkooxKZeZ8aljoZM5JKGX\/I+Z7e4H79x\/g9KlTkhJBN5HT7MWSW4y0K1K4MKwtzNCjdWMEb1oo\/m+vjBGGNyG9BOSfhLFjM1ym+224\/E1Ib3sd9PelD2NtjUG1faWI9vOwvbi7byE61a0kWrjy5cpi4MCBkghan7zpg0SeJI4+lKn9KUjMjhw5IqW5mFKEJlTejywxNUWRHGrfmH4ktZeI91X4\/+ILEqucUJuoI3D8TR9CPjT+bfX9m+TF86e4eyMGZwKmI2h9U3jN0wIVNGjQkPHhOccVBxdUheemYYgK8RCrJBUOfKn+J0lcugkcJw1OrNSSderUCS7OTKrqgurVq0tZLU4unFhfvEhJcxKfEoJRq\/RNOn8+Fr4+PvDYuzdxAmfqkCVLlkhuL5rdCudxwdgveuLs\/rWJ5EBDCnjb8XkX43riKBC5H89812Pm0G4oV9AR+dxdJJiBFTtI1PWJmyF4b1A9rV8fVV94H5HIMIkvKxMw0S2DGZiXkOZVOpr+029Ef5dQw\/bTTz9JxClfkEjgSOT4P6MPKn1R3+cAhudP7+P2pUB1C\/wMnyVlxfxg7EGoQYMGDRkWC8vAe\/NghPpswulT0cJ9\/kkSly4CR20IU4RsVwSrVatWonVjDq5u3bpi2bJl4oBuKDwRTjScbJ8+fYZHjx6KTxIdtGkm8zziJaYz\/Yl78+bNmDFjBho1aiTm2Wa1qmDdn2NxzXubHjlI0PSkFbptUtv+bfpNCfp96faZ3v2mtJwwtk63TH8dv+tDt1x\/vf6n4TpD6K\/Tb6u\/XB9RR\/AyZCei1\/2GjnXLwsHaVJJAN2nSRHwcjZG4eFPqPqnEEf9nSJmo6O7JVatWoVixYtL3559\/jmPHjqWi\/X3\/hf5vPXv2hKODg\/zPWEKLJI5Elef7T7\/ppUdePHuIWxd8EL77C+MPPQ0aNGjIJDgyJy8OLm2OI3uX4GR05D9K4tJF4Jivi6ZNTpBmpqbiVD1i+HB4Hj2K69fiC9XrCydealDi4u6I1u7EiVMI9A+S9gcO7Jc8YIT+5M0Jnaavn378Efnz50fWrFnxRdc2CNu6GPeDPYyTBn0YEog3QX+b9Paja2e4TVqXvwmG2+lv+6bl+r\/12+j\/Tg36fRmuSw\/orxh5AK+8VuCXAR1RsmBeWCkyUrJkSSlKT7Kuf\/13K9APLiKcJvg318\/lepI4aqyY2NfMzBQtWrQQkzxTiGS0NBsUEk+m4alTp0585QX1X6MfKF0U+N9j9NP7LDfOHUbY9s\/Uw01LyqtBg4bMDyYg3zipEPZunibKAyqp\/gnXnTQTOGrQaNrs0aMHypQpI5GmrE3JxL5MFWLMV4kmUpK+0JAQ+Ph4w9PTE\/v37RcfJ2pZOFnrT94ECSJrW9JPiloHNwdb\/DlqMK75bMPzqLTVP30aeRg3gw\/gfEDKuBCojjv0UDLcVHgQdkDwKPyg+Nxxvwyc0CHRB09HUoz9Tml5epDSNm\/qK7XtjEGt0z8\/Rvk+O3ZYwEjShwnjcTf0QLLxuhx00Oj46nAx8ABuhhzAS\/8NODR9JLo1qgYnWyvR3DLlzMqVK8Ucr38PMJWMr7cfrl6JL4v1JhJHksaXhM8++wx2dnZSaovEkFrejKiF4x+fY1K8eHHYqv+ZjbWVkLgSJYpj3M8\/v9fpQy6f2KRetjrCa77m76ZBg4b\/Dg7OcMS2aRWxe90vCA0NTSRx71ITl2YCxwNhcAJ9cOzt7ZE3b14sXLAAsbHnFbljNvikB8mDvnz5CoKDg3HkyGHxUyIMzaWGoCmWmhmmD6HTdqUShbBmyo94ELpfEae0RZ\/eDz+Mc\/77EHrUA35HDwj4PeLo3tfw3IsoLw8c9\/bAKd\/9OOt\/QHBO4YL\/fsG1oAO4FXoQtxVRuR32GnEK98MPKXJDcndESI\/sW48QJX4aLk8PUtrmTX2ltl0CeMxPFUF7qEhqXNjhJOdH8LyJy4qAXQiIH49YBd04nVDjxrGL9DQY1wQEH92HoKP7cUyN8Xm13XP\/TTi\/YQrG9GyFwu7OUhqtRIkSQtY3btyYjMQdUESfwS13796Vlwd9iQ9+uS8vDnT2v3LlKo5HnUCXLl3E5Mj8b+yTUaoZkcDxnBmly2TZtjbWAnMzM0noO3fOnPeTwKn\/+5UTm4W8eS8oZPQBp0GDBg2ZGfunOWP\/wjo4un2i5Opk9aq0Vhh6G0kzgaM2jVGh1ApYW1lKtN\/BgwdkEiW5o6aEE62ObXLijD0fCx9vH3h4vA5QSA2cxJnXq2PHjihXrhwsLMzRs01jeK6aKVo1o6TECG4pwnXMax+O7N+Lffs8BIf37cHRfbuNwufAHvgf2psMQUc8hPgZQ4QiLqd99uFmyEE8jjj4msTpoE+idMRJf\/2bkNI2b+pLt96wjd5yHusjNZ5XFEGNUucR5hlPdo3B2Lj4KXjuNz6WOhzct1fge3APjisS9yxwGx4eWIxlo\/uhabUyyOviKC8C\/fr1k4oJhr5wJPoBAf6SrJcmQ90fgPcXo30CAgKEpK1YsUJeLCb8MgEVKlQQk2OrVi3lZYEBDhnNhMrj5TkzSpfjw9JZhJX6z9H\/jel13rf8b\/R5u3n+CEK3kLwVNPpg06BBg4b\/BOa4Y\/+COti1drwosHRpRt7FXJRmAkd\/ol9\/\/RVFixYV7QkJ1hI18bLmZFhYOGJiTomfW3zUYHyKEE5EJHC6\/G5vAiNYWWe1bNmyUjLI3dkBc8eOwIXDm+IJkh4JSRGKrFwJOqiIhkdiVYe0Qsy6CTBcR4KhD5LNwx67cdLHA3FBe\/Es8pCYHnmcYmI1dmzvCag1vB16UEguxyi945RWcBwPeOxB6JE9eBq8C\/BZjaD5P+LXAe3RvHoZZM+eTczxEydOFJOnoRaOvnB8i6HTvk7r9OLFcymfNXHCBLRr21byylEzxQAGBryw2gPvIQYBvGv19bsQuiLwT89kvfQVZBQ2QdMwE2dznaFG8t8URpsyYCFsew94zc9n\/IGmQYMGDf8hUBO3dVol7Fz3O45FhiaSuL97PkqXCZWaEpqnGOnH1AZMltq1a1fJw0WNATUiTN+gm2Bu3LiFiIhIeHoelajC1IgcJ++ZM2dKWSROVuamuVGnYkkEbpifrPICCRKJEpezrBbJE4un01\/rUeh+nDiyEx47tmDTpk1Yv369+NUx4pHBEYxWJOh7Re3N8uXLxWy7PAHLli4VMI3J4sWLpK4rTcVMTWGIJQvnY8eqRfBbPx\/h25YicsdyHN+1EjEea3Bm3zqcPbAe5w5sQOyhjbh4ZDOueG7FDd8duB+yT3zrkmjtSK503\/VhQL6SIKGNbjx4\/vcUmbwdsBs31X6ue2+XyN2rXttk35ePbsEldRznD25A2O512L1xtZy\/ITguBMeI0I0ZwTGkeY9jSnB8Sbx57TneBMkYE+jSZ3Lvrh0IOLALDwN34qXXKtzdPRuhi35SJK4dzHLnkCCVvn37yr2lK3Kvj4MHDiIsNDwx7xkJDtu1bNECFubmieWzmMSX983ngwZJbjjmIMyIQk02tYft27cXvzdq4RwcHCRVD4kpTcbvi7x88Qy3LwchfM9gow8xDRo0aPiv4uB0J2ycXBQe2xbieFSEKMGMxQr8FUkzgaOcOXNGJmjWs9TVnuQEnCNHDklxQK0cJxn68FA44fL7hQsXERl5XHzhUiJxnOwHqcmXea9Mc+dC6UJ5MHPM17jitTWRsJCovDh+RMgPfeJIVC57bsHp\/WsRtWs5QjcvxOEV07B4+m\/4eexYjBgxAoMHDxaCwBJOJIc0Q7E8EYkoc4axMDiL5dMfi1nu6dtHsGQRy4MxWINO5AQJgyEsCYt42FhZwt7OBq6O9ijo4oBieV1QplBe1ChbDC1qVkSPlvUwsl8XbJs9ESd2r8C94L1JSRxhQM6MQr+N+qRGLS5wN8K2L8Gq38dg6sjBGPN5Dwzr1QGDOrdEr7aN0bV5PXRsVAOtaldBi1qV0aBGVVStWlVM4QTLThFcxuz\/HBuOETVcHK9mzZpJdCd9E+lr1rt3bxlXXjMWXB85ciTGjBkjmDBhgvi2zZkzR5LRrl+3FqcPb0Lc\/iW4v3cuLm6eiq2Tv0bLWpWQI1t8kfsff\/zRaHUG4vDhI4iKOp5oEiWJoamd25G06eqfUkPF6gUZlbxRSOD4QkEtNF+S5L5S917hwoWkAsP7ZD69e\/MUoo\/+jKOzHY0+wDRo0KDhvwzWUF0\/rSEOqPk+JiZG3H9I4v4uSReBo+M4I\/tY43TcuHFqUimM7Nmz46MPP1BkxkwmfpY20qU54GTLvG905IuOPimpQwzNk9S8UYNDElBBESlHRYBK5HdHl2b1EKQI2f1QD5w\/sBH7Fk7FvLHDMWZQdwzv0Q5fKGLSh8SkWR10aPgJ2tWvjmY1K6Fx9QqoVrEcSpcqhaJFi6BggfwokD8f8uXNI7VanRwdpdA5\/YqkxqQiXXQQZ8BErlw5pSQYkT17VmTPlgXZsn6ciKxZFGFNFfHtuF1OhVyqDxPVp6VpTthbmcHNyQFFC+RFrQol0a9dY4z\/qjcOLP1TNHJJiFkawCoHT8IPwnPVLCya8B2+7dMJ7Rp8oshicVQoVkD2UyifO\/K7u8DN2QHO9nZwsrOFoyKk9taWQjYtLSzE7GhlafEaajnHhMXTdf5XHC+CY+fq4gw3N1fkz5cX+dW4FipUUMzq9I0kCWalAJIPkmISQga91KxRA10UgezZvDb6ta6HPi3rolWtCiji7oSPP\/pQ6ueSWA8bNkz8LHkP6ZtUWSPVx8cHx49Hy0vBk8ePFaE7gRUrVklCYBJQ3oe8H7\/55huJdua9mhGF\/x2SX75A0IRKLRw\/WbKOGuL3xSTM8lissOC7tILRB5cGDRo0aLDHwZnuWDujI\/btXCEWSs5Nf5cmLl0EjjtlkjqGyLJUEctcmeTOJRN6vXp1MXz4CHh7+4kWgcLEvWzPHF3cRr\/aAkFfMprgOGFR2+Ps7IQSBfOKxmjGD1\/h5N5V8Fo9C3N+HIbBnVsrglYZpYsWUBO\/A\/I52cDN3hLOtuZwtDYVOCm42prByUZBfTrbqmU2uRPhapdbbZNLfeaEm10u5HfMjXyOuZDXISfy2OdEPvVZ0DmHURRyzonibrlQ3D11FHFN2kchZ+4nh9qP2odD\/HHYW+ZGQXdnfFKuhGjkvBQJexS2P80kjprIu0F7cWjZNLV9Z0XcaqBckXxwVuftYKXO0dZE7UvB0QTuap\/cb36n1+A5x5+3As874bch2JbjxPHSjZm7Gj+OoXPCmDqrfbnYmcpY21mZwMHaDLZWprCxjId1wqeLuk6udhbI62gt147fLU2ySwF6U1MTqV\/KFwBq+JiqhmZ5EjmaZnmv0JQaFBgiGii+GDx8+Eg0wiR5rFhAPzhq46hRHTt2rBA+ljfJSFGoPFZqF3\/44Qepf8oXDGq3SahbtmyB7du3J7T89+XisdUIWt9Mq7CgQYMGDW\/ArmlFsXnJcFF+MUH931UlKF0Ejn5wDEzgpMmcW\/Z2tjLJNGvWFBMmTFSEbKf4vXGC5cGRaZ4\/dx4hwSFy4IbaN\/oy0feJyUmZtNfexgot61bD4gnfSuSp37q5+GFQdzSoVh5F8rooUmYJC9NcMM+VReFjWJl8DGvTLLAxywIHi6xwssqGPHbZUUARpqKuuVAqT26Uzpsb5fKborxC5cJmqFbMHNWLm6NWSQvUK2OFhmWt0KicFRqXt0azSjZoWcU2Ea2r2aFNAtpWt0OHGg749A1o94l94jY6NK9sK\/3XVvssndcEztbZYGWWE3aW6njKFMPEr\/vhwuGNkpaE0bb0ZXscThyQHGzx3w\/iCX391PqHiuyd3LMK3\/XphCqlisDd0RY25rlkHPLZ55BzrVrUXM71k+IWqF3KEvXVufI834QGajw4LjpwnNgH+xKofisXVuNZIH5My+QzkXEu6Z4bhZxyCvKqY3CzzQ4XdZ725lnkGhEWuT9OuHZZYJbzY+TK9iGyfPQBcmT7GGamuSXnmauri2hNq1WrKlpZ+hrSbL\/PYx\/8fQNE+8Z7i+D9SJJGjRtJHAMYSOKYX+6P338XzR01Wn\/HH+WfEJJT1m794osvpPoCgxeyZcsm2k+arBkw9D7InWuRiNjVW8v1pkGDBg1pgCT6\/bMO1i\/7FUFBQeIO9Hdo4dJM4Gi6og2Xk+m3334r5iqa3Bo1bCgBDH5+fpL3TSecaC8ppknydvDA60L1+qCZjCWzmjZtKnUsSxfOh58H94TP2tkI2DAfE4cNQOWSRWBlmhNmirCRoJEgFHc3UcTBDBULkkyYo2oRc9QoYSGoW9oSDcu9JmMtFHki+WpTlZ\/2imA5oL3CpzXj0amWPTordKntgC51nASdajkK+L1bXSd0VZ+dazu+EWzH9t3rOaFHfWf0auiCfk1c0b+pG\/qrz14NnNBOHUNNdZyFnXMJqbG1yI2mNSpi0\/RxOLZzhQRCBG1aKOSVmrnDK2bAZ81s+K+fh+DNi2Q9P5dPGo1KJQrDxsJEEaOsyKNIE8eCRLGjOi85D3VMunOIPz6HRPB8ed6G6FjTPp6oJowPwXFrkzB2\/N5KjauMpyKnrdRni8o2aK7Gu3EFa4GOBNZRxJHkj8dFlC9ghlJ5TVHC3RTF3UxkDIiC6pq62+WAg6UitiZZkDtHPKEjiaMPI0kcfScjwiLw9Cl9wF7f9NRaMcWNr68vBg0aiEKFColJtpm6p77\/\/nshRO9b2o2UhL57JGmdO3cWk7COwDEfHH1LGX37bworqzx78gAnjvwM36XljT6oNGjQoEFDcmz\/3Q1r\/myJ7ZtXyLyky3H6V0hcmgkc\/dho0mINVDr7k3DR5LV+3TpJH6LvmMcDunL5MgIDAyQHmzHyRpAM0ueJ+bvosN27XTPsXfQ7Di+fhjk\/DoWbs5rAslLDlhVl85sq4mCDvo2cMbhlHnzZKg8+b+6OAYockST1bRyPPgo9G7jgs\/ou6FbPWREXEhknRdoU2UggdE0r2aJBORsBSQY1Y58UM0eVImaiXSqb3yQBueWzdD4TFHPLJRAzqh6KueVOXEdtH7cpX8BEkUoz0V41rWgjhKinInNftHTH8Hb5MLRNXrXMHhUKmsHWPCscbSzQpm5V\/PRlL4we0B1fdmurxqIJujSviw6Na6F7y\/ro16GZLP9h0Gf4rl8XNPqkInLmUJO8VXbRgJFYfaX6Zf9D1Nj0b+KmiGT8+bdX+2+md85E3dJWct7GQBKs35ZoUjF+7HRoW802ngAnjC+JIsec6N1QXYdG8ddCd110RLafOq6+CderdyOX+GumrmnXOo5ooa5PdXUdaHbOnf0jZPn4A6k+MGTIEIlq5QtBSiZRan1ppmeAjQTCmJpKlDRzxPHezQhaOJpPGfVLdwISN2oT+Unz8rRp00T1\/m\/Ki2ePcfNCEHyXVZY3SmMPKQ0aNGhIxJz88J5fAr4LS8BHSzOEHX+WxIoZA8VqdOHCBbEQ\/RU3nzQTOKaXYDRivOO\/lTin79u3X7QfnDz1hWQuNDRE8ngZI246kMBNnjxZJqicObJhWM9PpWg9HfIbVi2HnNmzwk4RnIblbTBIkbWvEwgKP6nhaljOCuUK5EZBpxxwt42Ho2U22JhmFROrSY6PhAhky\/IhshIfG8MHiSBh4LJs2bIKcmb7GLlzZIFJruywyE0TYDyZtEuAtVl2mJnkTlxnKvv7UG33YUJf8f2Z5vwYBRxzokkFayGeI9rnk0+eQ+l8pmJGZBBEDkXIBNmzSyCEfoBENoXs6pi4nvnTeD4fq+1qFLdA17pOQmp1\/TaraC0kyM48m2izjJ+77vhSgrFt9KAbU4UcWT+UsSYs1TjYqrGxt8gmGlO5LnY5UNg5hxDNioVo3jVVx22ujtMGnWo5yLUd1jYvhirwPHor8levjKWYhHPlzCH+bUwxkxqBo9D3khosRsYyCIABGjVr1hTtMN903ndhgNCkX39FubJlkDNndkkhklOdP19w+F\/5tyswPLl\/BZF7v9IqLWjQoCFN8FraD8f2rsJF35WI2d0PnrOdjLb7r+DAdOaHqy7puMLCwiS1yF+Zm1IlcNRa0M+IDuFMHeHu7g5XFxe0aN4cmzZuxvVr8bm5XgsT+D4XTYKPt3eqCWIZwMC8YjQNMXu+qSJC3\/Xvihnff4la5UvA1spcEZ8sqFvKEv0au4h2iVolatEqFTYVXzcHRRJc7UxRNI8DyhV2R9WSBdCgckk0\/aQC2tSrjs7N6qBLs7ro2bYxBnZqieG9O2LM559h\/Fd9MGn4AMGUkV9g5pivsGD8CCybNBqr\/xgj2DB9HDbNHI\/NCltnT8Du+ZMFexa8xm6FXfN\/k+VbZ\/8ibddPG4uVk7\/H\/B+\/waQRA\/Bt387qWKqhWF4HuNpkEz+yPg2dFAnNI2SlbmlrRf4+xkcf\/g9WJlnhapsdRd1yoVx+EyE7OpTOl1v8+lxtsiui9LGQN55\/66q2+Ly5m4wPNW6VCpkJ6S3sZo\/aFUri08a1MahzK4we2B0\/D+mNX4f1x5TvvpD6stO\/H4I5Pw1NhllqPLiemKzOgePFbX\/8oidGDegqGN7rUwzu2gb9OjRHr7ZN0LNNIxnvtg0+QbMa5VG\/UknUKFsEVUrkR9lCbiiR3xkFXWyRz5HXLgecFbnjcTpaqmN1yYX6Za3RXRHaz1u4C5Eb2MwNVYqYCxEskNddfC7XrlmTKonh\/Xrr1m25r6jF4v1KbRx\/0+fgr7zp\/BPCIsj0B2XRepPcuSVKmD6BDGBgbjvDF6V\/Up4\/e4Qb570UeSuMo5nyIewIr3llELCqLYLWdU8VgSubw1dt45msDw0aNOjguXokLkQF4PG9ODx7GIcnt6NwO2w0ApYWM9r+6My2CNnwFYLXdYTX3BTaZHAcmemAPdOLYsHUwTh4YK+Ue\/wrWrhUCRwnDF0JLWbMp6asSePGkgWfwQnJnfBeKUL3TAIdjqoJxxhx04F53xjAQJOXmZkJbC3N8EWX1orwdELRvM6KpGSBiyI89Oci2aGWpnU1e5RVRIYkpqQiBA2qlkX3lg3wdY\/2GK3IH1OMTBzaF1MVQSERWTphJFb8+gPWTh2LrbN+gcfiP3B4xXR4r5mFwI0LELJlEY7tXI4Te1bh1L61knD3kucWyT13w28HbvrvxC3\/XZJjjTnbdLgf7IH7IQrqU7eMbW6p9td9tkuy3NN71yJI7cNj0R+Y+cNX6Na8niJxjkJe6D9GcyIJXPNKthLU8PFH\/4O7IqU0v1Kz2KaaLTp8YpcI+vPRt4xaLGq5smX5AKXy5hbTI7Vu7K9BWRu42eZSY+MixHXcl72x6JfvhIDyvOlXF6zOOWzbkvikw7tXIlq9HRni+O4VCN++VBC0aYH433Fbjtuh5dNwUGH3gt+wY+6v2DRjPNZOGYtVk8dI8MmCcSOEhP+miN+4Ib3ww8BuGNW\/C4aqazSwY0v0al4L3RtURKe65dGyWklUKp4f+Z3MxRRdp7QlutR2xFet82JYu3xqDOxR0CkXnOxtUKNGDYnOvHMnTu4zQ6F\/Fv8IDGpYvnyFFLSnFo61URcsmC\/L32ctHI+N5cE6d+okvm9MHcLUPEzLwnx7gYGBCS3\/HXkYdx6nfH4z+lDK8JhbFD4rv1STzRbcPO+D2xcCU8Wtc4dwPfJPRC7PD585RvrToEEDQjy34vbt+JywIi8f4uWdvQhfXQle+m3nFITnqm8QG3oAcRcicTvWFxcCfkPEyhJJ+sss2D\/dDct\/rYE1KxUHCQmRcqT6LmjpkRQJHIkZnb\/JENu0aS2TChOnjhs3XqL7qAlJ7lcUT+AukMAdPYrdRoibDjQJzZo1SyYn5l9zsDJHqzpV0bpedTjZWok5klon+klRu0Qn\/EqFzdVkb4YCLtbo3bYR5o4dLgTJb70iJpsWCcK2LsExRU6iFSk77bEW5zzWS+WBi0c24aoiZtcUwWI1BCYBvksyFrpPkgIzslMX6fks8jCescLDMfVdfTJ58MsTRxMhpbISoL\/8xfGjklSXiYbZ3+2AXbiiCCGrNCz7dRQ+bVwLtuY5xd+O50NS2v4TewnMoNmymGtOMR3SJDqwqata\/xr91W8GHtBHzM48i5gtPyluJoES1FrRH43mWBd7K0WUmmPl7z8gYP18nPJYI+d+3Xe7HM+doL1y3vcUAeV5GwPJ6Z2gPYgLiielOtz02ynjd81nGy4f3ayI6iaJnmW1ibNqnLkv4oQihpE7lqlrsTjhuixU12ie5Kw7NH8C9v\/5HXZO+gprfuyPn\/u2RVNF5IrnsRKfwjqlLCQIhFo4+tBVLGQOe2tTFFQvD6yRG+\/P9loTxXuQplNq2IKDQyTVxqhRo1G+XDnY2dnC3c1NEuNSK\/xvarBSEx4XI7b3798vL0jW1tbiqsBE0YyoZUoVlgb7t0Q0mxe8EbS+hdEHUkaH95IaCPfxwmN1H6XNU\/IFXj69hOtenyFwiVb7VYMGYzgW7oW7D+JTiom8egI8C0Xk2mrw1rWb7QKfJbURFRqOx48exzfjM\/12CK4c7QbP2ZnP1\/bQDEds\/yM\/pv46DLt2bpd0WEwr8jbzU4oEjio9at\/8\/f1RqGBBqbzQT5EtpnO4dOlyQitDiTeh3lCTqb+vn+R9S4nEsQwTa6uyOgIdtS1y50QhNyfkc3FE7lw5xKzIAAOa0hiowKhGmt\/KFs6LDo1qYN3Un4SYMeUGyZOxfGkCPbJldL2ClKJSeBGVQMAiWOlhX7y2TX1yH8+PvUWd04T9ktCd2b9OzLUudlYo7JxTghvo2E8NGjVp1KiVcM8lwQID1DnTn80QA5q4oG5pC9hbZJUUHA3KWYlZmYEB9ctYI69DbpQtWgDb5kzEBUWuuF+jx2UEMgbq\/DgGJK0ks6JlVCAZjR+Dw6\/HQB9G+jOGVyS\/obvwwns1HuxfgBvbpiNs0VjMHt4DbWuXQzF3SxRVJLZWCQvRKtLXkaZVJ+sckniYVSJOnzqF53pvK9RcXb16TVLY\/PDDGKm4weAalp5iPV36ajKC9X1O7Mv\/Guu98j\/Bc6TvHgMYaELt2aOH+P8xAeS\/JU8f38OFiBXwnJvX6AMpo8N3dSPEXLiL5y\/S8QB9+RhPYxcgbE0lo31q0PBfR1oInOfsAvBf1Q3XHjzHc72\/38tHZ3Hv+Hi1PnNWeSGJ+2VEEyxdNEPqW+vKbKVXUiRw7IxmJyZSpUaA5aV++eUXnFVsMWWm+EqtexGfz+rESXh7eUtpI9Z2NMwBx6AIZs2nkznLIH34wf8E\/\/vf\/0llB1vzbGhe2U4iN+noXiqPCfI6WUnlhY3Tx4lpM5EcpIVMGK7T24Y1VZkYl0XzT+xehaDNiyQP3eHlNLfOQejWJTi9b51on+6F7BWS98Z+9b8rkLwcWTEdVUoWhJ1FDlQpbIbP6jsLKhYyE41afsfsaFTeRgjccEXYGLAxrB3NifHopwhczeIWkmqDAQNM7UFy+1k9Z0nR4e5gJabaO4F74kt06R+XPvSOS7eMZI8atvOHNko9V\/8NC+T8CWrPqNmM2bsaV7234UnkQeNE1qBPo8vD9gABGwHfdcDRpYLbO2di0ci+aFK1JPLY55bAB0an8pxpOs5rnx3mJjmkskZgQIB6W3md2+2RemsLDY3A0K+HipaYNVGZQ43mUyb1pdmV5Od91b5R+F+j\/xvT8TBylhG01B4ygS+Pn+4GjPT+t+TOtSgcPzjK6IMoM8BnVUNEn72ZLgL36sUjPDmnng1rKhrtU4OG\/zrSpIGbVRS+yz9PTuAensbdyLGZlsAdnumAud+XwJypo8TyQq71txI4mqVoPqX5iXVOmTrk14kT30DgXgsPhlUYTp8+g8DAIBw8eCAJiVu4cCH69Okj+eRYU5XRnQSJDKMynayyS1JcamKY8sLNJjsqFXPD798Mwm1F3pIQFH2CoPtu+FvXVrcs4Tv7obaNRGV4zw6oXaEEXJ0cJdGuKTWB5mYonNcNnzaqiT++\/Rz7lkzBdZ8dSfvR7UMfRpaHb1uCz1o3hL2tDcopwtWljqOk26hZwlIiZRm9WbukpWjmqH2iaVRyyCUgnuyZI1e2j2Ca8yPJ80aiQzNsMXczlCqcH7+p8XkUdiB+fAz2LzA8Lv5WuHh0k+SWG9K1NepWLgMHRSBy58opsLOxRomCedC2fnVMHfkFzh9cn0DiUtiHIXT75GfkfiB4WxIC90rh2LLxmNC\/HcoXyQvzXIqcVou\/9szhV8QlJyxMsiNvHnfs3bNH\/OB0BI4vC6diYqT+KoMW+DJALRarexw6dEhqz73vwQsMFOKfmGXB8ubJk0jgqIXj\/yQiIuJf1SBeO7UbwRvbGH0QZQZ4Lq2FAL9AqRyTNnmF509u46JHawQszJxaSQ0a\/ir+CoF79fQKHpyZl2kJ3BGFXX+4YcbEAVJKlDl2aUZNr7zRhMoEqSRvNOtUrlwZAwYMkKAGagWYnuH8uXOSgNRwkuQES\/MW1zF\/FTUM1MTpCBz939q2aQNLS0tk+fhD1C1jLVGHTB2RXZEZZ0XgmFj2q9Z5UK2YJfI5WaFtvSpYMfn7dJWdSgnUILHKAQMNxg7uqUhLWalVam6aGx9\/\/LFoAz\/4n8IHH0j6DlsrCxTM44aaFUpi9ICuoqFL73FQg\/Vd3y7I42iHknlMJaEwzZ\/Ms0bSShJnY5oFbrY5JNiBwRou1q\/BtBxmirhJxKpqRx+x3g2dJJFuUXdz1KhYBmun\/iQVHdJi6iXJoyaTxfU\/a9kA5YoVgouDnYwB67pSm0VkyfIRcuVQBNvCVJFZV6k3y+vAwA+aWo31nSKMEDjixvbpWD92IJpWLi4knmZUaiL1CVwedzfs3L4TcerFQEfg+DLBe4zOoCy8z2hmJgBm\/jeGaevKur3Pwj8u\/8QsI+akXh4sLMwlhQiDhhitTfPq27yd\/R3C\/\/WFiJXwW\/GJ0QdRpsAcd3gtqYXILVNxxnsZYkM9cPvS2YQReC1Pbh\/HzZNbcM77D0RvqA3\/hfn+kQnGZ1FlBKxuj8A1neC\/rCH8Zjv9CxGwbgoNEL51CKL2fCcI3zoIfsvqq+X\/jJ+S7+Lq8F\/RXH1WS7KcEYuec1L2RfScnRfeC6rAf3kzeM+vrH67G22XBLNdVduKMua+i2up\/gvIck+13GteOfU99Uhsn0UV5Vj9l9b+z0Ys\/xUChxe38fjapn\/pXv9ncHiGA34b00Xy63L+It\/ic143t6VFUg1i4ORH1d7IkSNRrlw5uDg7I3++fKhYoQJatGiB7t2748cff1TEzAM3btw0suNXYu6KPX9ekqzqCBzNsjTH1qlTR\/KdsazSpzUdJYs\/IzKzqwmcBO7TGvYY3NIdlQqZo6CLHXq2aoDtc34VHzWj5CCNoI\/Xdd8dEok6ql8XlC9WAKa5c+Ljjz4SwvZ\/\/\/d\/AtbpNFGEwM3NTSZTBwcHIXLlihbAsJ4dRGsnJM7IPoyBUa7U4hV2c0QRVxNJrksNWrNKduIDx\/0xf1yu7GpMTHLCxtIMLrYWAkcrM0VicgmxIrmkHxy1cnT4Z9RqIVdzNK5RBUeWzcTzqMMpmzgTvpPk0WS8ddYESblC3zwW8ac2lGMgx5Ili0Qft23bBp991h2fftpBCtPbqTFoUqMS5vw0TLSK94I9ku4nNUSpaydm1M1JCNzDffNwYOoIdK5bQfz7yuTLLQEabQwI3O5du9WN\/prA8ZMkg9pe3qcsrl+hfDm5v2i+f98JHI+ff9x58+ahapUqUp6OwQvUwNF\/j+lDmLE7+X\/rnxGO3xn\/qWrSyuxlsxzhPbeqIkh1ELhuJM6G+MFQb3v31CrE7PwUAcuqwHe2sT7eBo6KgJRA0KoeiNg4DKFrP1OTfyVFKvOql8ShOOU\/H9diduPWeR8FP9w8e1iRyA2I9fkRYaurJY3m04OQloW1ELBmCCIPTEZs4GycD16IWIWLAVNw5kB\/hC9xhvcbomg95+SD78rmiDg6D9eiD+HO5Qjcu3pccOdyGG6eOYhrUctx3ns0QlcaRBcawGtOSfgv6YHwnT\/hlJc6Bt9pijBPQsz+rxG+vrHRbQSKJIcc\/A0Xj+9R5++JG6d34krUfJwJXoIrJ9bi+snt6ti24GrkUlz0nYhjm1qra0mSVgshW7\/DudBVuHHKQ217VH3uxXW1zcXAX3F8a2v4GNmf5zxF3DZ+h8sxe2TMb5w+gGsRK3AldD4uH1+P6+p6XIvegGvHV6qxnIgT21rCn+OoyJ3fpqE4HbwY107HH+vNMwdwQ+3vavAsnNvbEcHLiibbX2rwXlAaQWu74pjHeJzxm45LwfNwOWQeYv2nyLiFra1ndLuj6p7yWTkY0b5zcdpvBqL3foHQ1R0QuGoQjnnNRmy4Op\/ja9R5rMO1E6txOWweTh38BkHzFUF9i3ubBNp3cQ0ErFJjsbIF\/JbWwZmzx\/Dwqb5aLR0E7mUcHt\/YhoA5mZfAEVN+aILZMybDy8sLN2\/elOdtep71KRI4CjtitClNUf379UPp0qXg7OQktRmZu83W1laSrE6fPl3SihiaVvmbk8\/Jk9HqAD0TTaj0fxsxYgQqVaok0ZfMCcYcZiQ0zJVGAsccZzSh0ozIigUFXe3Rt10T7F34e7qc842BwQkBG+dj3s8jULVMMZjkyiGaJh1xE\/KmfrPIeskSJdC8eXNFYtrKucbXbLWWGqa\/fzMQlz23CCFMQphS0H6x7Xy1zxL53VDYxQSNyltLlG2LynaideJ+TXMpouJkJ+bQqmWKo26l0oJPyhZHiQJ5YGVmIho4JiwmgWPJL1ZOKKgIXKt6NRG2eYlEzRrbv+64qHljFC61iN\/06QRrcxNFXj8U\/0MeAz+zKKJIEx7zki1evARbtmwVc\/rw4cORN28e2FtboGuL+pIz7+yBdUlN2qmBxxaxDwjamoTAPTmwEJ4zRuKzhpVhkv0jiUilyZi1ZF8TOHd4eOwTs6j+Tc7vNKVS61atalWUKlkSQ7\/+GuvXrxfz5PssJJ\/0b5s0aRKKFS0qwULm5gxisJWqJ0wf8m8m8H388C5iPH8y+vDJtFjwGU74HIahzvPu8Tk4sf7vDVrwVMQ4eO9EXAg\/hJsxYbh+\/JCQrNM+k3DuWCge3Ltn1GXl6Z0Y3IicjhNbGyYjk\/4rGqoJfzTOBa1ShCMYt65exNMHcXjy6AGePrqP5\/ev4tFVH9wMnYgYtb3\/wpTIeVHJe3cmeL2aXPjSlLDzJKIWvniCJ3EncD1yNqK3Nob\/PMN+yiNwTTdEH5mCS6FHcDP2FB7cvoqHd6\/jYdxF3L8SipvR63HW51tErK0E33muidt6zs4D3\/lNEau2efxMR6mf4eWLe0kyIfDz1fPHeH4nFrdP7cC5o98rkrgEV89EJX8GvHyG5w8u4M6ZLerZ1QdBC7if18frs\/pTnAgNRpIMp08f4uUTA0sT+7kfi7uqnwte3+PYwTG4cDIEDx+ptglNRHhsj27j8SUPXPEbgfB1VRL3ZRzO8JlXD2Hbv8Bp3xmKpB7A7Uvn8OjuDbx4dFfw9N5VNW4huB61DKcO9ITvXFc9oqNI0Yq+OBkWiLvqWfnw7k3cvRSg2u7B5WP+8rJLohB\/X6nxe\/VCXcK7eHAtAlf9f0bU+upqzKlx1T+m5PCco66NeuE4fkC98Pj+gQshK3Dp2HZcityKi2FrcPferaSkTCNwyTB99CeY8fv3ktmDlpa\/lcBR2JkuQo41UDt06CA+RjR9UlNTUk2WU6dMFX85\/fQOFB7MtatXER4Whv379yUSOJpPe\/fqpbYtIcSlkHMOdFREhJGmNBPG+4NlQ6sqdpJq4+8kcCQa1ITN\/vFr9GzTWAro62vddMiePSsqK4LJgurUjlDNST+rAf0HoHix4nBzskd3RWC818zGNe9tEqUq+yBJSoHAMQiCpscyhfOhsKsJGpSzFi1Tyyr2yKnGgcfBdf3aN8X4Ib1FWzdt9JcCJh0e0q0NyhbJL0l86SNIAscSWlJb1c0Cnzapi5N7V6VMphKOi0XyT+1bgwXjv0GtiqWTnfuHH34gDvSsvMGM0eHhEThz5hwiIiLF1MekzpYW5ihVKB++7dMZR1fOED\/CZPszBh4bzahpJHAMYijgmEMIXP78+XD48JHEBxDVzQS\/00eMBLN2rVooUbw4Bg0cKC8K\/yb5SYuQeJ44cUK0h6zhqiNwNKXSXYGuB\/8mCX1w5xJOHPzW6MMn0yIFAvfg1FLEbKllfJu3AbVkS1vi3MWrePLs9bOTz9w05Sx8eR23o\/5AxFKaD2nSK4vg9a1xxn854q5fTqZBNCYPTq\/AyW1NkpAmHXxWdMXp4N1p\/w+9uo97MXMQvYEmxvg+Ds+pgKD1o3E+3FvyNKYs6mhf3sStsImI2lBDEZj44\/GcUwz+S35VRORmUlKUqrzCywfX1Bg+Tn0bRSie3Q3Bxf3tELDAPZEoBGwbgPNX0uFz+kqRj6cP5MXSGNnWlxf3InA9eAyCl5dMHCN9eM4roAhkO0R7LMb12NPyfEhVXj5UpNUfp3a2hu+ChFJVs+sieOti3HnKkUiPkIw\/Qlzkr0KkUyZO+eG9qCZCdw3CqXA\/3L\/75vMW0QhcMswYVR5TJnwt6a9YiYfX+28lcDrhA4W1u8gUf\/rpJ9FE0VeMhehXr16La9duJLR8LbyhT55kNKpXou8b8fPPP4u\/krubq5SeKuSUAzVLWqKEOwuzfyylmqxNs6JeaUtFUuJzgRVwsUOv1o2we\/5vrwlcKmQpJTxS5OXIyploUbsq3O2t1b4+SkZgSKRoLqV5mJMrz503KM8nIjwSvXr2go2NNYrkdcHkEQPhvXoWHoQoAqM7Ht0xGRwftV70NytXRBE4FxPULmWJHg1cJEExAxOyZs2C3u2aStTn08jDidsRzM\/ms3YuujSvJz6C9JMjgWNlCtZvLexijp6tGkp+Nv19JoNaxzxuzJ\/Xp30zuYaG58\/jKF6sqDjQX758JXEy4dsnkw7yZsuXN4+UG6tRoRRmjfkap\/etNb4\/Qn8c+HnsYLwfnB6Be7x\/AY5O\/04IHO+JknniCVxDRXJJ6hmFWqxYMXh7e+PUqVOSO0cHRpnyJWHixIli3qfW9MvBg7FixYr3nsDxnqKpt5d6oaHfG7XarDNMk\/0ff\/yBs2fPCkH9t+TO9ZOI8hhi9OGTafFPEbg5leC7ZgEePHkD0UhFHl\/chXM7m8BzdnH4Lv1RTfqn1EtN+hJW346cgmNrKyQ9tvnFcCxgA27ffQOBMJCX98NxPWiEmnTpF+eOI6sn4PKFM2kikyLPH+F22ARErikfP3HPKQnPpbPV\/yTurccodXmGV89icWpTLfjNc5FzTzeBS6c8ux2Ca75fJDdfz8mjnvEdEKVe2tJE4HXy8qniO0cQuakuvOY44ui85gjbuxVv\/dR4cQbnDvWGnyJPSY5P4Aav+a0Q4bEGcerWSBdB1AhcMswcWRy\/jxsoeXE5j+lrldMiaSZwFGo5mFCUQQymJiYSfDDl9yk4e+ZcskmG2riLFy\/B3z9ATVD7kxC4gQMHSomjXDlzCmGgyY4+Vx+oz\/+p3\/TxorN+xUImEpFZtagF8jhYSUmqdVPHSk6yRFKQGoyQh9hDG4RwFFXk66MP482W+iB5owakUsWK2LFjuyJurx89HFhOuMzLVbFiBVib50bDqmWxeMJ3koIjcV8pgKbbg8v+RNVShZHPwQTVipqjW10ntK3uIPVSqVkjgWNgBVObJNk2aC+OrJiB9o1qI9vHH6jtcyYSuHIFTCTBcZ+2TSQoQUyoetsmgRoH+q39OrQvqpQslOz8CRIznn+Av78ECOjernj+fEPgmwLNffQZzOdsj89oSv19zOvx1h93Y+Dx0Q9Oj8Dd2T0bHr8PQ7cGlcWEXq2oGXoqclu7lBXsLLJLNDC1vevXrcNvkydLeg2+SJBksxxbjx49FKnMi6xZskjtUBZ\/Z8Hgf5P8pEXoY0oNL830TNejI3BMJ0JtJ\/0ikpht\/mG5dSkUEbv7G334ZFr8UwRuVmn4LhmrCJyByS0dEk\/gOsJnaV9cuX0Pz16kT+dCeXk3CLFHByQ5Nm+Ppbh+7Vo6NThKXlzG7ZPT4Dcrj+qnFWIVeXv8PH29vHoWg4s+X8b7p71zAqfk1TM8OTcv0bT5rgkcNZWPrmzDiWUOSfzNvNZ0RWR4GF6lRZtlKGq+ver1OUKWFvrrBE5ddZrXI1YWTzy2RMxsgchDmxD36EX67w2NwCXDwjHF8PvPvcXSFR0d\/W4JHCMl\/pw6FR3at4eZqYlUZti\/\/wAePHiYbKdUl5+MPokjh48mmk4Zubp06VKp7WhmaooPFYEiacmZIwfyuzgIsSlZMI+kruAkzgLoNDHWL2ulCEsu1CxbEPPHjRBzXVqiLI2BVQG+7N5O\/Njo52ZIXj5UBI7mQ5qJd+\/eJURUX+jTR3MqHczp9O\/qaIfvB3bH6f3r4vPD6UiK4b7VMhK4Q8v\/RLVUCVwTReAWxhM4\/W0VgWM5LB2By68IHP0Dm1awFof\/gi4WGPBpC9wN2hM\/NvrQPw6FA0v\/RO+2jeFsa5ns\/Alq4EoULybX6sqVq0k0cEw4yJQXDGYhAab\/XPXSRfDT592T7ScJ9I+DZtRwD8B3LeC5TAjc+Q2TsHhUTzSuWlpy3FHz1r2uI6oUNoedlUliXjcm6i1bpgzc1G8uY8JeZ2dn2NpYyQsBic+YMWMkaIbBAWlS7f+LQg31sGHD5H6zUvedjSJxFhYWcn+xtNbbZuj+u+QmCdwujcBR\/n4C5wKvBdUQdSxEPbhTMZO\/uoeH147jRkxYMrPY\/TMbcMajH46H+uDp87eYVCnPr+Jq0I9qslTHNNtZoixPnwrBwydGtECvbkvgwumgnYg9HZ1sjPD0Im5F\/YGARWUR7se5gTkbE9alVdREfy9mCU5urPZGAsfn84tHd\/DyacopGDg30cR570okHj+8b+T\/9BKvHvnjxNbGQixSI3CvXiiice8Gnjx+lOr\/8tWjODy8dRG31fMyubzEs7hwXN7TBD4JWj+feY0QfXg57qV2HyiJn4+MD+j941NxbH3VNBO4l\/ev4eGdG0ZdNO6dmI3oDaqvJPerPYI9\/sDly9fwFu8J6rA1AmeIWaOK45fve4q7zzslcPwjrly5Upz5ixUtIhPob79NFhOPMQ3BlSvXEBIcigOK4Ok0b1u3bsWoUaNkArY0M0WRPC5oXf8TfNu3C6Z+9zkWjhuOoZ+1Q0E3R+TM9qGYzmhGa1HZFgWdcqJkAWeMG9IbF49ulqoAxshJMhiQmEPLpqF949qi0TEMXCBI6nLlyoUiRYpg9uzZuHr1igwowRudJjueA01cJKBMucGi7mHblsSn1DDYnz7eisAl9GWMwA1s5o7G5a1QOm9uFFIEblCnlrhvzJSr1w+rVmye+Qua166K3DmzJzt\/gsTMztZG\/B1pLuU503TKGrc0oQ8aNEgRDfpAqrHKkR2F3Z0xuHPL+IoY+vvUh\/5yErgIReD81ycSuIilP2PigHZqbArBPOdH6FDDUQI0yuQzVWTbXK4Hy0o1a9YMDg40NdqgaNGiqFK5stQ9bdmihVQKYTJcRvRkBPJGYaoTjnOhQoWk8gLBMloMYKBK\/d\/UvlHiFHE4tnew0YdPpsU\/RuDiHcH9NnyunjNnoOcGlyivHp7E9fA\/cHxbZ4Ru6IaoQ7\/hyskw3LsagwfntuHCoTGI3PErLt+6b+TB\/0wRm8u4eWIdzh35DjH7v8DZ0JXqJex2wvoEeRWHm+G\/IGyhOqY5heC1Zixu37xiMEmrg2O7kB9wbEtL+K1sisANg3HScwtu3bwpz8aXTy7h7sl5iN7SFQFrv8eNOOZgNDipV2pUX5zDxbDlOHV0Es5H7UfcveRU4+m1\/bhwsHMqBE79L17ewnVFPE\/t64uo\/VMQeyIsSeCByMvneHIjGFf8RiNia2cc2zMR1y6fwdMkfyvV8\/NInNzePFUC9\/LxRdw\/uwrHd\/VG1F7VJtoT9+8nJ46vHp3CtbCp6rr0QPi+H3Dm9JlkJtHnd6Nx7WAHRdzigwX8N36t+oswOMd4ef7oKuLO7ELMoZ8QvX8wTh9ehDh1DoZPhiexK3BiS\/03ELjn6p5QJDv8NzVu\/dV\/ewYunjyerK\/7J+fj5CaD1EHzO+B0xBE8TDp48fLyGZ49vIH7V07g9skgwV01NknuaY3AJcOMkSUwblRP8d9+pwTu+PHjUpORZixGorJckafnUXUD31Nrk+6QB3Aq5jS8PL2knNbOnTuFCJAAcrJydXFBHmcHdG1eDyt++x4R25eKaZN1NVdMGo2a5YrDxiwnrEyySnADo1FLuOdGAVc7fNmtDQLXL8RDfaKiTxQI\/eUGbej71axWFTEB6xM4MeMm\/GYqDWtrK\/FLYsoTmo05uD4+vlixfIX4\/VGDyLYmuRSR6tQC\/hvmxTvyG+xPH8YIXNc6Tmhd1V60Tkwl0r9jC4RuWfQ6ECGhLxIzmlA7KPLJII88dvEm1EbpJHA0r677cyzqVS0vaUJ058\/qBUzYzOhiJpLNoYgZNVyDBw+W6E6aLhctWiTaoiKFC4uZlWNGbZ2rgy16t26YcvoSQn+5EQLnNXMUvu7QAKUKuEkuPGpeW1W1k2L2VuYmovHjPUeQ5NDhn2SOxzNr5kx5gzl8+LD4x9HMnS4fkn9JSM5INnlOugL25urFhvVb+\/fvn1D3Ne1\/5nch92\/H4sSBEUYfPpkW\/yCBoxbOc05dnD8Xicf6t+yr54oInMHVkHEIX1M5Pj3HbBd4zy+LkM2f48S+4YpwtEHIyi4I3bkK99S2Se6U53F4dP0ozvv9gIgNzeA3rzIC13yKmKDV6uVGr8A45eVVXA\/9EcHzFaFcUApBhw\/ioUHi6FcvHihStQPH11fQK+BfSB1Pa0Qe+BmnfH\/Hed8fcHxLQ\/gva4ywIwfwXN27STngIzy\/F4HLgSMRtKqB2ra0egR8hTORIckIxMu7Ibjq\/3WKBO7lM3V+55fj2OoScjyH51RB8N6puK2fd4zy7BbuRC9ExLLC6njpl1cO0REHcfeR\/h7TQOBe3ceDi1txanuThHNXpGvb77gSez4Z6XpyYR2ide0WVoXfnp14pAiu\/ljoEzjPOfkRfnQWrusXfqcoUvTw8kFc9v8Jx7Z1gNfckvBd0hon9i9E3JXk+314ag6iNtZIhcApknU\/CjdCvsexNWXhM9dF3et9cNLfK9m9bozA+W7+E1cvxCYnmc+uI+70Rpz3HovovV\/j2KYBgrPn1EvGE71x1ghcMswYWRa\/fN9P\/LXfGYGjJmPz5s2ifXN1dZHaqNTCMKjBUEPAnXPyDA8Nl7qpO3fswJYtW7B27VrxnWMyYGb2r1y6KH4d1h8sfk6fNk78JC37F09FuwY1UMDFHha5s0qKjY41HSQSNZ+TNbq3aIBNf\/6CW367kpMUHfSXG7QhgWuqCBzzu+kIHDVpNIeyqD6d+ukHR2JSrFhRyXXH6FNm9mcULsfA3d1N\/L\/0CZzv2jm4z3xoBvvTx72gPdi\/ZAoqlyiIvAkErkttRzlH5j7Llf1j0eaR0CZqsxL6YtJhr9Wz0KlpXTEvu9rEBzHoCFy8CbW5lNFK3M4Qqp8kBC4hgIHjQJ9EljWrV68eSpQoIYSOBK948eKi4WrRorl8cl2OHK\/TrjDdiJOtlbou9V6nU0nYVxLoLxcCp4hmwCZF4JYLgds16St0qV9Foo2ZtJhJfOuXtYSzdVZJIsyoV+bjI7Kra8Xj5bUhqWSgCTXBukSIGUWoteDLDYMz+MJArSJT11CzSDMwo23\/bQL3+MFtxHiOFdOasQdQpsQ\/SuAYbdlSEbjjSQmcIjsvrm5EqCJvxreLh+fiDog4etBA8\/QKz+5E4mrQBASsaqJeCD9F5I7vcT58P+7FJTfpvXpyHJd8v5JJ1XtxOUQdP4nHT\/Snf5opY3HtyGfwXxSf0DZFKJLpv7E7zpy\/mLDta3l+PwY3Q38wSGxbGeE7\/8A9A3Ptq8encD3sZ8kdZ4zAvXhwHjcOd4bfgteVMAK29ME5Q+L1NBY3IibCL3F\/9ggP2IxbSYIzVM9vInAvLuJG5K9y7Lp+ji4cinPHkmv97qr9HVubUGJtTnl4r1qA+w8fJDl+fQLnNbcSToZswn3DG+7JFVzx\/VkRnoYI3dwWkbv64JTXNsRdfx1YphM+J276D0PYimIpErhXz67h3un5CF\/k8DptSjoIXIjvFtw2JP\/qReNR7Gqc2Fxfj5TF4y8l8v2PELjfv6mM8WO+FH7Eagx\/O4FjZzSfjhs3TpK6MjqTEz01Hgxq4PqXL4mXAk6gXE4HcmqvqHWjBmfKlCno27ev+CzlcbZHt+b1sWnGeDwJT6irmTC5+6+fLySmcsmCMM2ZRcpodVYkp1ZJS+R3skDzmpUwecQAXDySEG1pCH2yYLhcYZ8iiC3rVYe5WbwJlWSNyVPLlC4teekYGWtiYiKkjpo4+lfRP6lWrVoysVL7ox+5aZY7J77o0goBG+YnjUTVP46EfccF7MauuZNQtnA+IXDVSeDqxBO4nNk+Et+\/L7u1FQJnWKaKJDdAjU23lg0UgfsokcA1Lh\/vA8cghl5tmqg\/cerBFCTJG6b9jMY1Kglp5TnwPFu2bCmkYfz48UKMSJR058igEtan5adumQ7ZFNF1c7BV+26UevCEPtgu8gAQoo7VazleHF6MlT\/0Q8OKRZHH3kLM5V+0cEdVNT6WJvFRyTmzZYFJzuxC5ngsfJGgPxz9Kv9tkvO2QoLGNy+OtZWlhUShUvvJ+5CBMiSk\/\/a5caI4GzgdXvMLGX0AZUq8BwRONF7nZiNk1euUHMbgta4vjh87nrBVvNBP6t5FH1zwm4vYiADcu8v8Zfqzo568eoanV7fhjEd76c97SQWcOHsNT\/TNZK8e4cltL4QvcIG3Qc45QzDtR9ju0bhl4Fb16uVT3D2zHpGLk1dt8N\/cA2cvGxKmy7h1Yir8\/iqBe3EJN6N+e68J3NFZ9RAdvCsZgXt1LxiXQ7aq\/99B3Lt1WQiZ0acB\/QCf3MK5XU0RMF\/tMwUC9zwuENd8B74+fiJNBI7XzA1REYqQPdRr+UrdI09u4Oz2eghIlvvvrxK423h8fTP8MzmBG\/15dfwwergoueiq9LcSOHZELQFrMXKCZ44qRvr169dPSmiR2HGH\/Lx37744+DNq7uTJ01i9eo2QAZrgPv30Uwl4YHRdtmzZ0KFJHWyYPg5n9uulnuDErj5P7F4p9TY7Na2D3DmzoYR7LtHAtaxih0IuJihZwE3qiZ7cs+r1tgZ9JCELBm381s1Fnw7NxVxFAkci9\/nng3DkyFGEhoYJUaWWkBooEhS2IZkjSPZ0mieChMbR2hRjPv9MnUtCEINuX0b2fctnJzZN+SU+D5w6lzqKnHat64RGFWyRNctHihya4Zs+nXFi18pk21K7RdMqU3\/kypEtMZFvy8q2Uhg\/n5M5OjVvIDVN4xP5Jt+\/7ph2L\/gdXVvUg72VuZwXgzY2b96C69ev44aCh4eHmI9155kaLExyokKxAhjVr2vy\/enDcDyiDicSuJvbZ+CXfu1QKr+T+PZVK2YmdVCLu5sIsbUwzSnJjxnxW6l4AflNU2Ojhg0leie95UfeByExYgAD\/yM0XVPDqCNwjEjlNeB\/698WHuf5sCXwXfb3JrB9r\/E+aOBePMTzS0sRutogvYcBjBE4Ckncq5fqf6FeqlP9bzyPxsVD3RE4Lz5lhFEC9\/wWHl\/eiMA5zmmYTMsjdOek5ATuYQyuh441ur1G4IwTOBKzVy9fxCOVa\/jq+QPcPzYRISvLxO8zBQL3+NJenN\/12gQsSBOB4zG2wPnzJ5NpiV\/e3JOilvgv10I9uwCZtRYqcWimE74d1BBjxvwgJROZS5dZE\/5WAscoOJp5qHVjdBw1cDVq1BBtza+\/\/irpHOiHxIz9PXv2Qps2bVCnTl3JxcXC3I6ODrC2jvftIXmrU7kslk0aLYEITCibZFJXk\/wVzy3YMfdXjFSEgA7yLPBODdWnisSVzmuCvA6mqFSiIHzXzn2dPDctIIFQOHdgPf4cNRj5XR2FkNH3iJUkrl27JgELTFhMwslzNUZY9EHtW92KJTH7p6GSzDfR\/8uQrCTs+7LnViz4+RsUz+eqyGhuibRkkEaj8rbIke1j5HW2x49f9JCaqUn6UZ8kZeFbF6N\/x5YwUfu1MY8vpUX\/wJolLVDI1QLtGtdBtCLA8QROb\/8GCNw4Hz+p\/ZQrVlDGgBHFG9ZvxLWr14TE8WZq37690XM2hJu9tRT65zVNtq+E806E\/jqdGdVrBXznjEa\/FrVQ2M0GJfPkRnNFSns1cIK7XQ5YKoJYp2wRTPuyM0IXj8ORGSPRtGopWJiZiKaK2t34SLeMR+BYS5gpdczUf0NH4FhzmClRoqKi3osUKDzOKzG7EbK5g9GHUKbE+0LgLr89gXujvHyMl3e8cHpPRwQuKphYAitFAndpAwLSQuDmtUDE\/k14rM9WlDy7cRQXD\/cwsk0phOwYhxsPkrriaAQuDfKKPoUhuBUwQpG3svCiTxv3mSKB24PzOw1KlqWZwLVCbKwicPqXSQjcToSs\/isEzhk+S2vj1MXbeKoX8fDy4RncPTYu0xK4IzMdsGVyPowa0kaq8Bw8eFB8nv9WAkehdoMauK5du4r5kxoCOroXL1ZMShYVLlwIefPmFTOQkyJDdtYWsLYwgaONpZSEcrW3gEXuLGKuK1c0P2b9+DVi9q2RZLzGHN4fhu4XLdzCX76VKgmsC8pC99RUseIA85+52NtgxW8\/4LrP9qRVB4wRBd2yBNwP8cC+xVPQ+JMKcLK1hJ06FzqMb9++TSIsGajBdBU6DVxKoCaOJJBE6NDyafH+b\/r71N93wnKSx4lD+6GgqwOKuZmIVpG5zqiJy50jq2iXaB5mSpLEvhL6oUn1+K7l+LpHe9hYmME898dSfoxBHqyFWsTdAk1qVZWqCEZ90fS+Xzq6BVtnT0D3Vg2RXZFq+rG1bdNWqgGQkPNaF8if3+h564M516qULoZfh\/VDxI5lr\/dlDIbHw+tGM6oicMtG9UaTSkVQ2MUU1YuZy3m1rGKjyHsWFFBj9Xmbetg\/ZTieHVyIuF2zMKB1XXV\/Wcj9R79K3vgZIeJUX\/i\/IlFu0qQJcufOLQSOPnCMsGVeO5pX34dzIoG7feUYThz63uiDKFMisxI4Kf10HnfocH5wIKJ3tUHwyvrwm1codQL38j6e3DiA0PnOyWqdes5xl9qX3vPLq8nWHUfnt0fkwd3JyMPTqwdwYX\/HJNvK9ova4JjnDoOoUM71p3EjfPxf94HLhASOZbnuxypCHDBZzZVdEbGmPrznlRb\/Q9nnP0XgXjzAi6urEbLK+D2aNgKn7oF5hRGwdTIungrDo7jreBp3CreOL8LxDdx\/cpN7ZsBhReBmjSqB777uKtkumDKKKbrS+8xPkw8cfXGYGJXatbJly0pRexKy7NmyKpJmj5KF8qJ0kQJC0D4pkQ\/1yhVCu1rl0bl+FTSsWAx5HC3Fv6tt\/erwWjMbD8P3GyVvxAs1sd\/024Fd8yepPvMjZ3ZFbAqbo3NtJzSpaIMiLrlgaW6KsV\/2VoRmRVItnCFJ0F+WsJyEj+bX7wd2Q5MaFeFkZytJaxmUwYmzbl1FDhwcjFYo0Idprhyy\/a75k3Hu4Pqk5b10x6C3XyJ6z2qM6N0J+RSxZXqM9jUcRANXvbil1ECtX6kUpn8\/RPW34XVfev0w4OP7Ad3g5mAD05wfiW9gt7r0obNBMXdz1KpcTlKECDkmQdLbt\/53BkQc27kck0YMROG88b5uNOMxNUrRIkXg7Owk5MzwnA3hYm+Lnm2aYMfcSbgbvPf1vowh4Rxe\/yaB249nh5fix54tUb6Qo5TPalLBWjSLTOTLc6xcLD9+HdgBIYt+wqsjS\/DAYx6Gd2kGd0cblCheVEze9B34t9NtpFfomkA\/0vLly4sZnwTOWl0DVjjhG9n7koCYD5QH927ibMhiHJ2bUKonE4MRgZ5LB+NkgG+yyMhH59bi9PZGRrd7e\/xFAreyK6ICkx9rvLzAqxd3pE7pteObcZEF1b1G4cSuPgjf3Bcx3j8hNngxLvhPxZn9fRG+phK8FpdD5PFTBkEMz\/H8YQwuH+gIv4Xx94DnvPLwX9cTx70mSe3L84HzcebQIIRuHG6UwD2\/E4IrCYESr4+\/PIK2q4n73IWEVq\/l2Q1PXDzSWxGg\/wKBK4Vjvqtw+4FhT\/Hy4ul9PLwZjTvn9uFK2Bxc8PkFMXu+R9SO73D80Bic858pOOvNOqtV4TP\/7yZwrup\/0UARuBMGGjhqcQ\/h+Ea1T11ksiKRXgvKqDH8EhcvqPsoiS+lcQJHLdzRWZUQsm0wYo6MxZnD3+DY5mYGbTIXDs5wxPB+1fHdiC8kToAlE5k0P73yRgJH4WQSHBwsDtfU0NBHJ3v27Mjy8UdoW686RvXrjJ+\/7IVJX\/fCghE9sHx0X2z9ZbA4pg\/v3ARli+RTBC6X+LUFbVqIp8zhpj+564HEjuk2vFbNlIAFc5NcKO6eW0yFrPtZKm9uWJjmQu+2TeG1enbSklM6kpCEKOgtSwCrJuyYNwnjv+qNEgXzKULqhFKlSkoGfwYtMCEsTYvGSAtBv7EieV3lvGnupPYtmSZQf98JyyO2L0Ofdk3h7mAr5cE6KQJGzWKFQoqs5M6B1nWqSqLi2MMbX\/el60d9kihO\/LoPiuRxhokiNzQr96zvhHbV7VAijzkqly6OJRNHxkf16gic\/rEk9EeSfNV7K7bPmYhuLRoIWWPEac6cOZA7dy7Ryhk7b31Qa9egajlMH\/2lkMEkiYeNQf9YEn6\/iNiPO3vno3ezGhJFWzafiToXeyFwRV1zSS7ARuoFYOmo3ji9bnIigRvVozXyuzpIuS9WY9CVO8tIwkAfBioULFhQcu6RwDGRLwOF5qg3sveJkFJbeDnmAPxWNTT6MMro8JztBu95VRC8+VNE7hqMqMPLcVm9FBjKs5t+uBo0Dsd2dETk1sZSeumvO1j\/NQLnuaAhwvevwkPFDpIZXtQE++JBDOKOb8SxLYMRsq49wra0x7ED3+NcdCSe0j8uoenzuCBc8fkC3gtLI8jrKB4+MKhbqo7nxU0PxOzrh7DN7RGxZxzORgThnt7M\/\/JeCC76zMDxg4vxyFCR8OwG7p1ejsiE8\/GcVwkB60bj7LFgPEz2132GuycXIXp9pf8IgbNH0P7fcelqXMJafXmFx3cv4nrUFpw78BMi1yhytqkdju\/6BRfCvOQ5kijqXK\/5DUPo8o5\/M4FzgtfcUupFORQPn+qfhfr+6hauB3yD41tbIGR9M3V\/dUbUgZ8RK\/5cBr2+Ukf0PApR66obkDOaSYvAb2UDBG9sq+4vhXV14L+Q1Tz022UOHJ7hgG2\/uaNn1xYYO3asuKgxi8Lb+DynicBROEHST4x5qzhpMo8aJ\/qJwwbAb+0cMe+d91iJB\/sXyCTLyMLYTVOwcHQf1KtUSghcxzcRuIRJ\/mHYfoRsWYTPO7eCvbUF8jvkkKLmzJlWuYip+MXVqVQam2dOwKOwA6\/NhYbQ61MfTxXBuXBkEw4s+ROfNqoFF3srCSKgWfR\/RsgKwZxnXM8ISFs10bZvXAebpo9\/nTrE8Dz0952wnFGkzWpWhr2tNaoVs0SPBs7oVEsREbdcisDlRN\/2TbHq9zFi4kzsS9eP+rx0dDNmfD8EFYoVRO4cH4kJtncjV0UEFQHNZ45ShfNJahaOiRBK3f71jkEHtoneswrzfh6BIgXyij\/fxx99mCRIwxBcR2JL4p7f3RU\/fN5DUpuwfJf0m8K+jK3jNXusrvPZDVPQrEoxuNtll6jTT2s6ilnZ2Tq7BDB0rlcRHr8Pxa0dMxIJ3Ni+7aQUWrGiRSWpMk38JBkZRajVZrAP09PQB5MaX50Grl7duli3dm1Cy\/dDSCbjrp3E8SMT1Bt25vNJYeWB0A2zcC3ugdFkusnklSIzD3xwcl1F+M79q+lV\/hqBo\/YmaPP3uHaPvjMJ2ybIq2ePFG+Kwa3QQ7ga6IGbp0Px4N6tZIRD5MVVxJ2aBb+5xeC1YQnuMYVNwip9ef7gFu7fuSUa5GSijvlm6ASc3tcDN4zYA18+PIu7x39DwPIKCNryJ2LPnccjIwfz6tklXPYdgUBqdf4jBM5r43Ccio7CS8Nr+OolHt+7jFunPOUaXo\/wxt0bV1N83t0\/uQAntw39mwlcPMID9yHurhGS8eIRHt44gbiLYeq+uZKsr9eiXkpfXsOZ7U3gP0\/vfzM7H7wX98Xp0MO4cfUyHsVdxcOz23FuVxN4zc58JtQ9U13w57elMah\/d8yYMQO+vr7ie\/42c1iaCRyFJI6REnPmzIGlZbxZdP20cZI+42XUEbw6dgivgrfjVUJuLxK4ZT\/0RctqJHA50ab+JwjYsCBVDRxBH67Yw5swf\/wI5HdzklQSUrWgjiOaVbJFEdeccFaka8qoL3HDd\/vrqgyG5MHY74RlJDg8bqb\/GNSxBfI62yFH9vgUFcaIC+u+5syRHU42lujZuhH2LPhd\/PWSkEf9fenvT4E+bAeWTEWJ\/K6SAqROKdWPInBMVptHkRdWpqA\/3Z6Fv6tz2pFse\/6mz9+q339Ao08qiHaqTikLITv0Gatc2ByF3WwlF9w9Xg9DDZxhfwoct6ve26S+bIMqZYQsMy2IsXQhXJY1y8cwN8ktGsC5Y4eLr+Ibx0B\/v3rLqAVkWpXNE79CucJ5UMg5N5pXssZn9RzRoYaDnJ+NWRZ816UuoleOE\/KmI3C\/DWyPsgWcUKxwAQmgof9ARiJwDAxicughQ4aI6Zq+pUwjQiLXs0cPSUj8PgkJ3L17d3Eu2hNeC4qoB66xItcZF76rGiLm3C08S5LHIDV5JWk+Hp+ekQaC9Sb8VQLnAK8VTRESHGZca6uLZFTrUo1IfXoRt4\/\/qYhOHnV92+PCxbPQz8GaKGr7FPt4dRvXgn5C+IZ2OBEdY6Qdj+UpXjx\/iJfPGSFrvJ\/H59cgRpcI9z9C4I7O\/gQRBxfgjv5h6YRjnngNFVIafyW3wn9H5Po+74TAeW2YhmuxsQktDIT3mSDlY4uXV7h\/fAoiEurOEuJ3eeqieilIcOAnXt7H45uHET7f6Y2pazIaNk3Ki97dmuC7b0dg\/fr1UiSByeffOYHjA4LJe+fNmyspRZitf42a\/O+FeAhBEb+mhMhCHYFbTgJXPYHA1UsbgSP5oBnVZ81sVCpVVCI0i7jmFp8xTu41SpjD1iInBnVpA7\/181RbvQCCdID7YVBD1M7lWD75ewzq3BK1yhdHQVdH2FhZSrUFG0tzFM\/vhrYNa+Dbfp2lcD2LzZN8CHEx0q8hmJT3fug+rJ7yE+yszFHAMQcalbdG74auaFzeBnbmWWFrZYE5Y4chePPCFM+HOd72LvoDnykCmT3LByhfwATd6zujlyKCNYpbwMXWBLUqlVXtdr3ZpEmo4ydZJjFk8MOvwweIibd+lbJwd7SDqSJrBINGyhTKi5Z1quLHL3piryKZ1GAmavqM9f0GMOUKNY1fdmqOPI7W6lzMxCT8aQ171C1tKVUpnGzM8VOfVji74Te5n\/QJXOn8LhJAM2zo0AxH4OisyoCZzp07S1CQjsAxRQ+DaEju3ifhQ5Xje\/3KKXht\/AJH5xU0+mDKqPBd3QgxF+7ieUq50ozJy8d4fmkZwtamnmj3zfirBE5hbl71rGyDcxev4+mztzO9P7lyABf2dYCnmLPyI2D3MolKT09vL+\/6IvZIL3jPq4bgLXPxVN03b5rODeXVvSCc3tcNvjpi9l8hcLPc4LOiC074Jw+eSasw+XHs4f7wX9TmnRC4o\/PKICpgvdHSZ+mRh9HTEbkuvs6q15wyCF03BncfP8GLJOTvJZ4\/OIcrHq3gr3eNMzp2TXHBjJGl0a1rR0yePAmHDh3CxYskr4\/TQH6TS7oIHHdw5coVLFmyREoZ0W9q8a8jccNvR0IONEVomN8rcIsicStxY\/t0bPh5YCKBa1m7iiTqfROBIzF6FnkIZw6sQ9cW9YX0uNpmR+MK8QXOO3xiJya2upVLY8G4EbjsZWByTAe4r6eRB8U8ydQkm2eMFz+ymT8OxbTvv8Is9clyXyROIVsW46IiLjTxppW8ETzf47tXYowiP2YmOSTxbtvqdujTyAU1S1pJHVRXR3vsnDdJ\/NykpqqRfkgCgzcvwrBeHaVuqrsaE+bIYz90\/s9jnxOF8rpJwf64gDSSOAUdkT2xe5X4FdI3bsH4b\/Dn6CEC+uWt\/mOMaAcjty+TgAVe7\/SMgT64v7tBe0X7WVkRdFe73Khd0kLMySS2DFT5+MP\/wd4yJ77v0Rin105MRuDKFHBG0cIFMXyYIr3BwRmKwPEPu3DhQtSrV1cqLzg5OYIJoln1YtasWbh8+XJCy\/dHRAt39zai1b3ps6KOmphIPIw\/pDIavJbXRVjESXUPGU7FKcurF4\/wKOZPhK4qb7TPtMMZXnNrKwKXtJSWJPKNnYeQNPbvOS8\/gnaMQuz503hkrAh9CvLq0S3cP70e5\/Z\/huClRV\/3t6gBwg4sxbVLl9JE4l49PIGr\/t8iVHKR5YP3otY4ERyEJ2n163n1VBGQk7hweAAClxRLPI6js4uqcxuLO3E33orAvXp4DNeCv00SPRvmvRI3b+s7jL9U4xCC6G1NhcD5beqJU2cNKkmkkcBRC3XNayBClyYEeyiCErhyqiJw95Mc\/9O4Y7iwswG8dak\/iLnF4Ld2AGLCw\/Hk+fM0k9+XL57g0fUgXPQahpAVTCdSAaE7J+KueiTq9\/GXCZyC7+qeOBO637gJPY1yL3wcIlbH39eesysgaPVkPKZmMWG9Tl48uoKbR7sjYFH+ZMeREXFklgNWjCuE4QMbYejXX0tMAWth84X+beevdBE4Couas+wDa6IyUnPa90MQe2gjnkQcSjCVJWjh\/Nbjzu452PrLF2JCzZkjGxpXKyckKUngQQrgJE9iOHZwTxTN7wY7i2yoXswM3es5ondDZxRyyolieR3xbZ+O8dGoJCtvQyjUNiQi3J7EiUQmLmg3bvnvlGjY24oIkbCwzimDA2h2fCNx0VvP87gTtEdy233auCYsTbOhVkkWsXcU4kXTJzWMhfO5Sz3VW347403C+v0lgPtnwuBfvu4rBM4i18doXdUW\/Zq4on0Ne\/Glc7S1wpyfhsqYPFTHnFaSRQ0qtXEcA57r7cDdcv4yBoHxY0Diymv3tlo3HZ6pPi4c3oQ1U36Eg601CjrnlEjaToqMsjqFtWkWsFC+lUkWfNulLmJWj09C4Mb1aYNieRyFwH337beiscpIQQynT5+W6FlGdDMHnJ2dnSSWZvoa5iFM4pj8nghf3hjMdOvWTfWONh6+S\/+q6fA9woKS8N32A66eDMTDm7F4fEe9ESs8uXcVj+\/fSoq71\/D41nE8OLcRZ\/d2eHNpqTfCUU24RXFMPXfu3NMVRn+Bl08u4qZPL0Vm0loBI76foF3f4XyEB+5eu5QskpnX8OXzp3j+8AYe3wzDvdNrccl\/EqK3NkPgouQRxp6LmyNsz2+4FH0U927flP9YopaAWfhfKFLy8JTqZw0u+X2DsFUVXhOlOQXguWIQYsMO4y7NQ\/rsxUBePruHh1d9cNlvhDqOQgaBITTpNsXFC6cVqUno5OUjPL3pjXObq8Nn3msC5Lu2M04cO\/WacD4nOV2EmG0N9PqzR9DWn3H5tC7wSfX5Mg73Y2YiIqHmrPfKtjgW6J3YD8\/52W1fRZAGJHW+n9cY0YHbcS+BeTNx8tMbvojZ2gB+c+PbeM4uAP8lnXEhNgZPEq7HiydxuHNmM8JXFIOXoU\/p3OLwXv0VTgeux81LMXj86EHy1BIvn+P5o9t4eCMKt0\/vxKWgqTh1YCACF6v+ZJ\/uCFjfGefOx6pxV+RUbfL8oSJDETMQtdqgsod6eYg8pF747+o9c57dwPWAHxC2vHjStoLiCFrfHedCVuKOuseS1bul0JT6OA4PLvvj2oktuHLyMG5dOYdHt0\/jbuwRnNndQZEy3f+mEHyX9RL\/0+cv9HpSfTy\/dxoXd9aC33ydljJjY+tv7pg0vDIG9v8Mf\/zxh2jfYmNjxaXmbVNGpZvAMT8VyxcxsW\/WrFnFpBa5Y7mY0+IJnAK1cKE7cW\/\/Yuyc9DVa1ygnJKV2hZLwXjMnnsDp2uoIhsFvEg+aElf+9gNqVCgNK0V8GIFKMxujFCsWMkMeezN0blYXh5ZNE41OstQZ+v0a7kMfBm1JUHQwLGmVDIb7SPj9Sn2SFJIQnty7GpOHD0D5InngZpsdrarYoLcib5\/Vc5LkxKysUKVMMRzfnUC6dOdhAJ25k4mDmTcuR9YPpZRWn0auko6EQQB2libo1LQ2dsz7VbSKJH1CuNiH3vEZRcJ6jr3+GCQZB932hv28qd+ET\/ZNghi6dbFUsGCUccWCpuhci+Zxe9FOZvuYFS\/+TzSTIzrVSUbg4tOI2EqtWkbxZKQ0Ivyj0ufhyy+\/lLQtFuYMXrAUl4QmjRtLBYb3VZvIiYyRUldjQxC6rTu85mUe04bnbFeErFMTp+cfOO\/\/pyA2cDbOBy9JisC5OO\/5Pc5sqwfvvxzA8Bpem7\/FmdBdiLsQgjsXvXEjej6OLc+rVzg+7QhY0R4nDk7HpRPbcfv8AdyO9UZcrA9unT+IGzHbcDVsIWI9hyF6fcUkBMg4isNvRTdE+yxSE7F6qT2nXu7O78fts+ol99QaXA8br\/opn2I\/fiv6Itp\/Pa5ejMb9u3GKVD7Bq2ePFR7ixaMbQkJuRG\/CmYNfiHbLaFSvIjmhR+fiyml1HhcD1L534ErgaAQpkpQkL93CGgjYPgXX1PHdImIW49Su1vA3GEOfec1wfN\/vuBKzS53LHtw6s1KRrjrwW+Au6z3nV0XQlnG4fsEXd65EqrE7iit+o1+bRfUQuP0LnI7cq8bYEzfPKDJ1tB8Cl+ppEBU85ypC5TEl4Xrsx7XjyxGzr2+SNklBH9MaCNs9DufDFZE7e0CuH6+jXE+1nysRS3Hm8GhErm+cVCuYAK9FFRG8ZwqunNmDm2qfV8Jn4\/jW1vAx0tZvXTtEB23CncuhgtsxSxC1uWFSsmoA3yVVcFzdY1fPeiDuUiDuqnG6eyVC3bv+iDur9hm5HKf2DEDgslrwXdUZYR6Tcc57Ak5s6wKf+UlferwWlka4\/0HE3byG50\/UffHkPp7ePYe7MSsRucQJ3m\/xH3jfcGC6E2aMLImv+reQdGVUgjFZO1O0\/RXlQ7oJHJ3t9u\/fj04dO0pR84GdW+HoypnxecD0J2xF4p74rMf+mT+gXcMayJ71Y1Qtqd6uVs1KM4GjNojlozo2rasm+uzIY5cDzSpaY1AzdzG1OVlnQ1VFfOaNHY4Yj9WvtWMJfYhJN\/G33nc9sP0bQQJjFAbr5Xs8+SF5uxWwW5G3VVg39Se0aVBTkatcqFDQRKoM9G3sijbV7FDAMSeszEzQQY3RhaObhKQZO06CvnQkP+v\/HIu8isAwavSTYvH1VPs1cZOoVBebnMjnbCeaSyYYpsmX5Drx+Aget+6Y9aFb\/wbI8SS7ZnrfDZHQltvy\/JjChObiFrWrquuaQ0hoj\/qOcm3zOeRIDJzIle0jDP20DqJXjRfyRtzfOxf9WtaGvbU5SpcuLTV2GR39tm8w\/6SQAD158gT+\/v5S7YOVFxh5Sl9LV1dXdOvaVaozvK8imghFLvkSF+07G36r6snkauyBpeFtUAneC1rCb2kdI+veErOd4T2vgkIlyXFntM07htdcRQLXfYFIn224fDYE9y8G4mGsF26fWIkTu\/rJemPbGcJ3SU2Femlu\/1dAQu89vwqC1n0G\/wUlUyUzHFevuaWNrvs74DmngFw\/r3k0O76bACIvJtNd2UbgNTd9WmW\/ZQ0QtLY7Atd2hf\/S2kYJZeqghq0pojxX4AZJ+plDuBzwm7wYZJZEvusmFsS3A2tjwIABkrjX29tb3NH4QvxX5q50EziadzjJDB8+XDLIt6pXHZtmjJPcaomTupAnL9E+7VnwWyKBK1s4L46smPHGNCK63ywJdT9kH0b06ggb89ywNMkiAQx9FPlh\/rSCzrkkqW235nWxftrPQphIEKgtIrj9m8D2THybGmgeJglKCxiVSc0hNWUMsFgw7hs0r1lZkTc1SdvmELL1Ves8+KyeM2qVtICTVTbJaTZmUHcZwxdRR5OOiQF4vIeXTZOoUWpAy+Q3kQTHPRu6oLcCCR2Lv5crkk+N26dClM4f2oD76riMHa8hqLEzNgY6cP\/GxtEYSGQTr6kCCTZNsoEbF2DyN4Nga20JZ+sc6FTLEV3VuFQrYg57i6yJBI6BGoNa1UTIwh\/xaN98vFQE7sqWqWhXs4QivTmllBYjoqmCTjTtvMfCY+T\/h1q2+vXrSyQ3SRz\/RySjfDN73wIYjAkfOhdizyHE42d4zn\/tN6Xhr4JkWE3QfzspZn\/EvzUZqv3OdhFNFLW23oI8iii4KXJCLWYaj4vjImPzT52HoyJyaTk+rn+Xx8S+ddfQ2Pq\/A2ofjC6XCPN0nou6JjJOgrc9Rid1L7ip+0PdF3JvuKo+3+X5\/nM4PNMRP3xRVdKGTJw4EXv37pW8b0zc+1ctR+kmcNQgcOfLli2TCaiQu5PkHjt7YJ1oiIRoJJAwEh8Sti7N6yFblo9QyM0RB5ZOe2MQgw6vouO1WdSwVSpVBNYWuVHYOSeaV7JBP0XiWEs0v2Mu5HW0RsOq5fBN705qf9MlEODy0c24cGQjzhxYK4jesxKRO5YhfNsSyTHnv36uwHPlTHVMU7FbEc2tsydiw\/SfBczHRvPt0l9HSa60GT98lYg\/vvscE77ui7Ff9hJN1+gB3fBdn44Y+lk7DOnaBv3aN0XzWpVRukhB5HF2kIL3pfKYSTLiIYq8sVA7tU5udtlhkjMbalUqg\/1LpioCtV+N4WsCmwi9ZRyP0\/vWyP5ZX9baNCsKqTFpXdVO+qZfHf3IXG1N4OpgjeL51ThVLYNBnzbHt70\/xaj+XcF6qzz28V\/1we\/fDEw8L47zwvHfYMmEkXLuBIkxx4XVFlh1Yt+SKRKx6rdujowfo2Y5phHbl+LE7hU4vT9+vGMPb8AVr6247rtdcFuR60jVZuYPQ9ChcW2UKJQP5rmzokFZawxs5ibaSPo15s7+YXzakg\/\/hywffYABLeIJ3IO9c3F3zxzs+f1rVCvuDlc1rqzXumnTpgyhfaNQVU6fh8WLF6NixYoSgUr\/Nwb41K5dW3IC8b\/1vgvHmw+f6GP+8N42WhzojT24NGjQoOG\/DJbMmjy8EoYM6IAfx3wvplPmLdWZTv+q4iHdBI4P77t378LHxwclSpSAlYUZerVtgn2L\/pBC9PqEg1oYv3Vz0btdUwliyONgAw\/VjpocHSFJFQn9HF4+XfbhbGspucHK5jdBn8YuQlYaKBJX1DU38jmao3g+Z7SuX0NSYQz8tAX6dWiOz9o0EXRt1QidWzREx2b1JQlvm4a1BK1U++Z1qksd0YafVEKdKuUFNSuWVSiDT8qXRtUyxVG5ZEEB05qUL1FYyoaVK+Ku4IbSBV1QKr+TgqOCA4rlsVXnagp3u5xCrqoWMUN7Rd4+b+6OQQo0\/xZyzgWzXFmR19URQ3t+KqbOtESNktRSw3dIjUn1ssVga54TViYfy5hQuze0bV70augi5JbLaJLMY58bxfPYoaQ6Ph5r2cJucuzli+VDhZJF1DkVE1QpUwLVypVE9fKl5NyJOlXKoX61impsKqNxrSpoVqcaWtarkTh+LKD\/adN66NS8Abq2bITuaqw5\/v07NJP8ekzGTAzu0hqdm9dXY1kUeZ2s1PiYoEoRcznWgU1dUaukJRwsssmYWJuZqPMyEb\/Jno2rwXPmd7i+bRrOr\/8dX7ZvABdbC1SrWlXeZmiOzChCp\/KgoCD8\/PPPKFKkCExMTBSBs4WpSS60a9cOW7dulSChjCA8FyafDPPfjn1LO8hbprEHmAYNGjT8F+HxpzPmjC6GL\/u1wvejvpXsHeRNzDLwtmlDDCXdBI5CP5hz586hX79+kkm+miI4NAHumjcpwYSpiJcCP0M2L8LnavI2MzWBg40lts+dlPY0HAn9nD+4AVNHfiElucxyZ4eDZVa0qGyLAU3dJBigWSUbieYsmccUhdzMUcTNEsXdLVFUoaCrRSIKq99FFAq7mieiWB4LRW5Uex3yJkfJvBZSu5Qond9SwQplC1igQgGzJGDNVpISgomHG5SxRAt1bF1q26NHfSepXUpixaoDNha54GxnJeXFts\/9FY\/C9YJAjI2FHqiFu3x0i5TVqlgsP2wt1dhaZUf5AqZCFDkmLLHFdCuNyluhRnFzGR\/D4y1f0AJlC1rL+ehQMp\/xMSiRz0rAMSqmUNhNjaduHNV3jqtunDnuHH99FHaxQAFndW1cTVEuvxnqlraSHHaDW+aJ174pomujyGhRdwc0KF8MRfM4I7ci\/Y0ql8S0IV2wZkx\/TP+qG0oVcIGdjRX69u0rudQuXbqUcFe+\/0LT4+7du9GnTx+4ubklaOBsYWNthYEDB0o+O5qDM4LwRY7nczH2FHwPLIHHwqY4PDuP0QeZBg0aNPyXsHuKC+b9UBxD+jbE8KFfYt68eZKgnbyJbjR\/V9DdWxE47pyOzCzCylQIrg62qF2xFH78\/DNc89GrjKDIRvjWpfi6RwdJVGthbob108dJwIOhf1RqoGlx57zJaFO\/BuzV5M0SSyXzxEek0vzGgIBudRVhqeGAeqUthbAYAysX1FekqkFZq0Q0rWgjJlmipSKF7T5xSAYmECb5Sgvoz8Xj6ljLAV3rOCjy5oBONe2lygCjLenzljtHFrg62qFWhZJiUmQ1hDeOhwGJe6IIH02X\/do3QenC+RQhNBUfwYJOTBJsg4417GX\/umPoqI7L2PEagsdubAyI1opocZxImBuWez2GRN3SFkbHXAee+yfqs7kaY\/ov9mvsgs9buEvwBYknU4a42VuiTc3y+LFHc1QtWRAmObNL1YcWn5RD86qlUK6wu\/i+lSxRHFOnTpWqIDTpZxR58OCB\/GeaNWsGBwcHmKv\/g52trZC577\/\/HqdOnfpLEUn\/tJDEkXBeOH8ah3Yvxv7FjXFoduYveK9BgwYNKYGat4U\/FsPQ\/g0xoH9\/TJ8+XfyeY2JiJAj078yY8FYEjg9uTkaBgYFo3lxNRvZ2yOfiiI6Na4kPWlzg7sSIUBI4BiHkUSTP3NQEq\/74Udanh8DRt46+Vt\/17YzyRQsgV46scLbOhpolmPzVUcxwxGd1HRUJs0GT8taJaFzeKgmEsFVWRCQBzRShYHkuokUVOymYb4g21eLRWoeqdsnAklgE+yGB0kFHKEvnzS3kLXu2LLCztkK9SqUxtEd77F\/ypyQtNnbeSWBA4Dh+TJ0y56dh6NW6IcoWyS9F\/i1yZ0Fxt9wyNjQv646jSQVbo8ct0Ds33bkShuOgOz8dSMY4hhzTRorQGY41obsOJHjcpkud+AhcEjemPmmqlrnZ5oC1aXZUKeqO77s1xcof+qJ+xRJSn5VJnAu7OyOvky3sLXPB3c0FXbp0kQLA9MPKSMLjnTt3LmrUUC8i9vZS\/9TezlZyKk6ePFkS\/PK\/lZGEDyO+UdK379CueBJ3eHZ8OgYNGjRo+C\/hwHRHLPmpKL77vL6QN+Z727VrF06cOCEJew1zM\/5VeSsCR6H9lnbciRMmoGLFCmIGcnOyR+cmtSUh7Q2\/nXgUflC0RD8M6o5i+VzF14dZ\/a9R46QLeEgNesSFpM9z1Ux806cTCrk6Sh40khUGNZAgUbPWrIK1fFLTRjBhbtWipklQsZApyuYzSUQxt5xSW5WgGY+pSvThakOTbTbxz2LAAMEEumY5P0oC1u7MntU4smX5EDmzZ4GZaW64OjmgfcOaEp0atXMFHoYdSHrO6QAJMjWe\/mvmY8KXfVC9TDFYmJvCJFcOtd+PkhxDDnV8hsdMmKtz0Z0XYWeuzlWdL8mm4Vjkd8yROFYE8\/LpxrFcfpNkY\/1JcbPEa0E0ViSPqUIYwMEIXOZ8M8kRP3Yl8rvg646NsX\/KMJxYMQFtalWEtbkJsmfPlpjstmDBgujerRsOHjwofpgZIfJUJyQ6V69elQS+hdR5MO+bhYWFnFfTpk0lsIEF7jOi6F7ozp8\/iyN7FsNjUXPNJ06DBg3\/OcweVQxD+jTA5wPjyRtdZqKjo8Vi+S7ye741gaNwAiWzpFN25UqVRJtgZ2mGupVKY\/KIgfBaPUs0cozUrFKyEMwVgZk6arCktUjmsG9M06S3jMXPWRXBf+N8LPrlGzHZWihCyJqZuXN8CFMSEkVG+GmqSAFBcsCoRn3kUiBh0CF71g8kXQXBvrJ+nBSMhPz4QwX1SSJGyLosJEgfS64yJuI1yZEFprlzSmQo66c62VjAzcFa0pww+pYBB307NJNaqsEbF4rZlHnumJMtyTnrQzcehuOig1pOTefDkH3iJ+ixaArGDemDxp9URJlCeSQfnIutFZysLeBgZa6OzUQdYy7kzpldjjmnIkcsXp89W9bEc8uizk13voZjQejGimAiYf2xNBzr3AnXQQcdYeQnrw235\/hWL5EXv\/RvC7\/5Y3BrxwycWv0rOjf8RO6lokWKoMdn8ZmrmUD65MmTosnKaJoq+ouxbAprt7q6uCQSOGdnZ3w+aJBoFElKM6rwevC6nD19At77FmLv4jYaidOgQcN\/Aow2nTWqOL7q2xBfDR4g8xWf6fqat3ehcPhLBI5CH6SQkBDMnz8f\/fv3l4LcNH2VLJRPojtbN6iJqmVLwFURmZw5cuAnReaoeZJIVB1BSyNI+ug\/d+HwRmyaMR6j+ndDu0a1ULNCKVRiNKUCAypqKXJXp3IZ1KtaDo1rVBK0qFNNcta1bVADHZvUQdcWDQQ92jSWCNc+7ZthQKeW+KJrG8FXn7XH8J6d8G3vLhjZvyvGDPoM477qI6k3iAnD+uO3bwcpQvoFpo7+EjN+GCJ1U+f8\/A0WjP8WSxRRY4F8YvUfP2Lb7F8lIlcS64YnFIE3PMcEUpbqMj3ypg8Zm6A9OLF7JfYu\/AMbpv2Mlb+NwdKJo7D4l++wSB3TXHVsM38chj+\/\/0qO+Y+RgyUfGzH+675yXrw+P6hz\/X5gd3zXrwuG9fwUQ3t2wJDu7WRcPu\/SBv0+bYFe7ZqiW6uGMoadm9VDe3UdOL5E01pVZMwbVq8g14H4pFwJqXtaoXhBVChWUK5TM9VueO+OWDfuSxxfMQH3Pebi6YGFQuB6tqgDB2tz1K0Tn16D9U7pP5DRiJtOqF3bvHmzFLCn1s3W1hbm5uaiVeSfPSMFMKQkfEjxGp2JOQav\/SuwY3EvePzpgiPq4WbsoadBgwYNGRmsb7p7qhumflseQwc0w4hhX+DPqVOFvLHizrskb5S\/TOAoktjzwgWp0MAEv\/Xq1UPhwoXFUZulgnLlzIlsWbNK4tmve3yKwI0L8TjiYDISYhQGhIWmV5KVeyF7Ja\/b9jm\/SkH7P0cNFswc85X8XjLxOyz7dZTkcyNYvWCjIn1bZ0\/AzvmTsXfxH9i3ZCoOr5iOIytnSIUIEiwWgifCty5B1I4ViN69Gqf3rZXcciRflzw347ICqwkwKS1NuwSJJRMXsxQWgy7ik+LGJwEmSFipLeOxi\/lY\/xwJY8QsrcsSQJMqK0Cw1ugTtT\/ul1q+14l698sxsjYrj5kaTZ4D87Rd9twi50VyfO7Aepzdvw7Re1fj2M7lkuONFTE4LkzCy3JorL5xYNmf8Fg8BbsX\/ibXYdPM8ZJDjzVOOeYrFHnldaDWkeW\/pivSOPW7zwWzxnyNtVN\/kmt4Z\/8SvDi8WMplPTu0CBc2\/oEv2tWHs60FmjRuhOXLl0v0TkYW+oj99ttvqFu3LqytrYTAMY8ig4BI7FgO7O\/2j\/inhWZimgmoSWRAxuF9W7BrSS\/snlYEB2do2jgNGjRkHhxSz7RNk\/Lh928q4cv+7TFs6FeYOXMm9uzZI2WydEXq36Wrz99C4KgVoSaOBxweHo7Vq1fjq6++QpMmTWSCcnd3h5WVFbJly4a+HZrDa\/VsIRaJZMSQlOj\/1l+vB5IgpiO56b9TyAfNsjqwBuhVr63JQKJyQ7UnuB2JjD4YFMDKD\/FQZEz1z+PUJ2JMk0IiJkggY9SmEZIaRf8c9H\/rlr0Jxtqntm162qvlcrx6oGk68XwUhPwlnCs1hQTLdyWOS3A8AdSBCXp1Y3pDkUGaho2NfawihvrXiEmW6Qv5IHQ\/XviuBzyXCYEjkbuxfQZGdGwANzsLNGzYQPzDMkKC29SEqnSaSvl\/sLKylOhTGxsb1K5VS7Rv\/O\/8ndFJ\/6YwkpbmVJJuLy9P7FjcB3tmlcfBmZmjKLUGDRr+2\/D40wmrxxfEhKHVMKBvF6miw6pAVGLR540Wl3\/ihfxvIXA6IdMkkZOItEOHsGLFCkyaNAkDBwwQrRxLBrGu6b7FU6TklDGCkSYi8leRCsEx+t0Qhuv429i2uuX6694EY+1T2z697Y3BWB9vg7fpg9sEbwO8VyUhcN92aigErkGD+li4cKGEYGdkCQ0NRetWrVAgf35YWVoKeXN0cECrVi1FW8X\/zbt8U\/unhWSUgQ0M3KCLxc7VP2DXnBoSoaqZVDVo0JBRsX+aExb\/VARD+9VFz5498dNPPwnXYX1TKhroRvJPWVP+VgKnE2rk+BZO0ypPiM7nZKh08G9Ss5KYManNSTaR6\/9OC4wRD2O\/dcuMtTeEro1hu5SW66\/T\/62\/PjPhbc\/NcIz0Ebw9CYG7uWMmxvVuhXyO1qhTuxZmzZolGqyMKiQz\/HPX+OQTODk6KAJnISlEXJyd0a1bN3E\/yKi+famJTjPP6hLHoyJweO8K7FzUHXumuBp9MGrQoEHD+wr6ux2c4YTfR5TGwJ5N8cXnA0VBxXKOfEllUnmmVPonc3m+EwKnE2oUWPOL5YNYgZ8TF1Nd0EeKJkqZvFMjPoaTvu63bpn+b8PlhtvofusvM1xnrJ3+d33ot0sJhm1133XL9de9aXlKv\/W30UF\/eVq2MVyv\/9vYcsNl+khpXWrbGRC4W4rA\/TGoAwq62CrSUx1Tp0zBsWPHEu6qjCd8kdmxYwcKFSok\/m+svsAkvoywHT1qlBCczKR90xeeF9MN0UR8+tQJ+BzZga0rx2LTnzVxaKZG5DRo0PD+Y980Z6wYVwTD+9fEkIEdMXrkN8JpmCaEbmPXrl0Ti8PfUd80PfJOCRxFp4UjS7WxtkZhdyfM\/3kE7gTtTT6R6yZ5QxiuT6ltWtsRurZpaW\/YznB5SjBsn9I2xtoRqa1\/03b639PaNiXo+tBva\/hbH\/rrDNvpfuuvN0Lgpn7REYVc7FC9WjWJ0oyMjEy4ozKWUAvF2ndM4Ovk6CgvMUzia2ZqiiqVK4vfREbLaZde4RiQxNG0QPeKoEAfeGydib3L+8BjVmkcnK4FOGjQoOH9A7VuG3\/NiynflMc3g5ri84G9MX7cz2IyPXLkiPi7sSY0MwjQ0vJPP8ffOYFjFAY1DPSJ4wRmZ2WByd8MlIACSaVhOKEbg+H6lNqmt51+e\/3vKbVNbZ0xpLW9YTv9tuldR+ivf1PbtEDXh34\/qfWrv87Yd8NlhgRu50zMHtoNRd0dpWg9qxQwh1pGFL6RRUREYOTIkeL7JtUXSODMzCSBL7N08yUnswtJHJ8FfNDxgccoLe\/DW7Fn9TfYOacBPGYUMvoA1aBBg4Z\/A3unumLJ2KIYP7QGhn\/REd+MGIEpU6Zg69atYlXky6jO3+3fCkB75wSOD27ahVl2ixnoTU1M8P2gHhKJKLngDCf1tMAYGUhpOZel1J5IbV1qeFO\/fxfSu5+U2qa2PLV9GFuenrY6pLbOgMDd3jkLS0f2Rol8rqhcuTLGjx8vf5iMKCRwfFPr3r273Ps6AscUIvR\/IzF9Fxm631fR+cUxMzlr2fr6+mLXxhnYubATDswtI6YKLchBgwYN\/wb47OEzaMOv+f9\/e2cBHcX5tfHzlSRAiLu7kIQQkuDu7u4Ud3e34O4OxSkupbgVKlCj7u7ef115vnne5KXDMgkJhGD3Oeee7M7M7s7MbnZ+exUrJxTHyH4NMXhgb0yfNk21s+IUIDaTN3vd7qRuO8BR\/MJmCKxMmTJwc3PDsK5t8fqRrfjlJYtKVLHrLSv4yWu7HftiAXCbx3VHsZgwlCxZEpMmTcLFixczPk33lvjrjPlvHGDPsGk6wPmrZr4DBw5UBQwPEsBRDDPwvOgqVXrjLpx9HIe3T8Lu+aVxekVhPLHCADmLL1gxMTGx22HsVXlkQTg2TS2Kob3qoXuXjhgzerRqJE+vGwsV+H3NlBcyzZ2GNypPAI5f1qTWunXrqu7zvds2wTO7VqveYZYXdLFr7QEDuB+OrMCetL5ILRyBlJQUFX68VwGOuV\/MlyhdqpSCNxrnBkdFRmLy5MnKBf+giiBHeFW5cR99hBdfeBZHD+\/D4Z0z8fjySjhl\/BK2+qIVExMTy03j2L9NU+Mwum8VA9zaY9iwISr3eteuXXjyySdVGyumgvFHJ6MId0vOcp4AHL+kWcjQtUsX5XloU6+6aiXC5q7XAQHv25p5vd7GfNu8ndX2WZntc5nX3axl9jxWy7lMm+06bVk9zna5thutv1XTz29+jcxeM7Pt9DILgNs7rZ8CuOTkZIw2fgXxn+heFP\/hly5dikgD2PjZJ8CxqTXBdMmSJQ9E\/ltW0t44plkwLMEvyucvXcDxQxuwc3V\/7JpfAScWhVp+6YqJiYndip1dHoyNUxIwZVA5DOvTGCOH9sXMGTOwYcMGnDhxQuUvf\/rpp6qbBn+ME97uJuUJwDEP6IsvvsCUyZOV56FupdJYPXU4Xj286b+Luu2F3Wy267Pa1mz6cdm1rJ4ju8tv1m70XPr19HY5eW3bx1k99kbLzWa7ja1ltl1my64DuJU4MncISidEoFhSUQwfPhznz5\/P+DTdO6KLnf\/8EydOVI17Q0KCVRUqQa5evXp49NFHlSv+QRchjueKIMfwBL8r2Dbm7KnHcOjR+di7tg92LqiCY4sicW6Z5MeJiYndmp1YHIKtaYUxY2gZjB3UGKOG9cTUKRNVtwCmvHA6DscbcqICf2STYe42eKPyBOD45cw+UJs3b0ZSUpIaOj+hb0dc2L78v4u9NtsLvL7Im9dlta3Z9HbZtayeI7vLb8ay81x6G7NZbWdl5u0ze6zFco4G+\/rpx\/Di\/g14cscKvPb4VjVezLyNpeXgNdR9G4D70QC40wuHo1xiBBKLxGHQoEE4d+5cxqfp3hGBhMUXvXr1UlWnoaGhCuDCw8LQp08fdUzcRpQughy\/KAm1\/MXLIgdOsDh98gj2bJmNvau7YP+SqjiyOE5mq4qJieXI2BLk0LwIbJoaj8VjSmHKsPoYMrAHJk+eqJrFs9UZG65zMo7u68bo4d0Iblp5AnA8AZyNyGq88uXLIyYsGJ2b1MZjq2enzw\/VF3axu8L4nnAm6jfPHMa+ZdMxvFtb9GjVAEsnDMan5\/dbPuaWzBbgjq7E2SUjUN4AuPjCMejbty9Onz6d8Wm6d8QqJU4hadKkCVxdXa8CXHx8PGbMmKGmS9wNibB3o3he+MuXP\/w0yLHlys6Nc7B7RQc8trQ8ji2NUwOlrb6sxcTExGj8jjg8PxyPziyMhWPKYlT\/Rhg0oAcmTfwP3C5cuIA33nhDef+ZzsEfkXdLnltWyhOA44lg\/JhkW6dOHdWNvlbF0tixYLIaCK8u4rZeGW3m++b1+raVWT3WbDndnmb7GPO2VvetHqPXm7ezXW61vXnZjZabb5vNvExvYzZjOcGNvfk4yP7zCwfw2KpZaFW7MmIjQpFUOBIjurTCm0e3Zvr4q3+tzLyN+TE0C4B7ZvUoVCoWidjoSPTs2fOeBDh6keiSr1ChwjUAl5qainXr1qmcL1HmIsTxi5S\/hBnK4HB8gtyxY8ew7ZFF2LSwPQ4vSsLpZZEql0Xaj4iJidH4XUAv\/fHFodg3NxZzR5ZDv+4N0b9vD5XSosGNudUssGQ1PNM3yCmMAtwryhOAo+iFI902bdoUXsZFrGLJYnhk5lj8cvlUuhfO6sKuL\/jm2\/q+vm1lVo81W063p9k+xryt1X2rx+j15u1sl1ttb152o+Xm22YzL9PbmOzfN57ALy+exDcXD+Pdk4\/i1MZFmD6kBxJiIuHv54viRWIxoU9HvH9qp+Xjr3sNWzNvY34M7QYA1717dxw\/fjzjk3TviAA3e\/ZslTbg5uaKwMBAeHl6onTp0ti5c6f6pSe6sfjdYQY5FkRdvvwizpw+jl07NmD9\/M7YPqskji6S0VxiYmIBqvBpw6QEjOlbGT26tMOIYYMwc8Y04wf1quvAjdFBDW73gtfNrDwDOJ4YEu6AAQMQFhaG5IQYzBjaEx+c2Y1\/Xj9\/7YXd1swQYL5vXnYjMz8mMzNvZ3VbP5d5nXm5+b7V+hstv9F6W8tqeWaPM5b9++Z5\/PXaOfz+8hkF0D88d1Q1Vn7q0ZXYuWgKpgzogroVSyEyJAC+3l6oUb4ERnRrg0MrZ+H3V8789xo2z3vda5qXZWbczgbg\/nd0FV7YOAVVUmIQFRGGLl26KK\/LvSbmUQwbNgyRERFqCoOPtzf8fH3UBAZWOD1o\/d9uRfz+0CDHL1yW9LMT+isvv4wzJw\/hsT2rsWXNZGxa9DAOLimr2gJYfbGLiYndn3Z6aRC2pBXGnOGlMW5gfYwc1AFjRw1U6Srr169XxQlsHM7UFY43ZPsipmnQ08\/vlnsN3qg8BTjmBM2aNQspyclIiArHwA7NcG7L0vSJDLYX9ewCQHbtdjynNqvnzuy19LZW21s9xmpZTkw\/b4YR3liI8MWTB\/HyoY04vGYOlk4YgsGdWqBZzYqoVCLJeG\/C4OvpCn8vN7SuXx3rZ4zBpd1r8MWFg9c+r\/l1btb4PLYAd2wVLm+ehirF4wz4CVdTDB5\/\/PGMT9LdL37WCRpMGejYsSP8\/PzgbxgnMbAKu2ePHqrK6V78wrjT4hctv3BZ\/EGPnJ7owHJ\/FoUcPrAdB7ZNx+7VvbBzYS0cmF9EdVa3+sIXExO7t+30kmDsnxOFNROLYsbQ8pgwpAnGDOuGSRPGYP78+di0aZPKneX3Lb+PGQVkZORurizNifIU4HhRY+ioVq1aiAoNQrMaFbBu+ij89tLp\/4AgAzRuGhDMjzc\/h+393DLza+nnN9++0bbZWa7vZ2EMQ\/\/z+hMqf+3nF0+oAoSPz+7Bm0e34YX9G3B+23IcWT0bW+eOx7JJwzBtSE8M6tQSzWtXRqmihRHk6wU\/TzeEBvggJT4aTWtUxJie7XFk7Tx8+sS+2wfZfA4TwP37xEb8dmot3n50NqqXTER4eBjat2+Pxx4ztrlHRMCg941uerYL8fT0RFBgIJydndRkiSlTpqiEWdHNi98nPM\/8Emb4gyDHli38dc1f2Y8ffgy7Ns\/DztX9sGtJIxxYXA7HlhZRX\/gy4UFM7N61s8sCcXBuBLakJWDFhNKYM7oWJgxrhZHD+iFt6lSsWL5cNeBl3jSnJzDlQjfhJYPc7ZWlOVGeARzFL9sXXnhBzYAMDvRHycTCGNurA3587pgBIBlAYGXmi\/2dslx+\/StvpUMXiwb+MYzFHAxr\/mGAEkOb9JIRxHhuvrt0RNnXTx\/Gl08exGdP7MdHZ\/fig9O78fbxHXjjyDa8+tgmPL9vHS5sX4Ej6+Zix\/yJWD5xCKYN7o4hnVuhXcOaqF46GTGhgQjw9YGvlyf8vDwQ5OeNaGNZsfgY1K9cBr1aNcD8kX1wdssS\/GC8NsHtirF\/2Tr+mz1HJoCjXTEg7ov9i1C7dBKCg4PQqlUrVc15r4hfEASJHTt2qKprTh8JCQ6Gq4uTAjq68xn+E+WedMED0zSY18IeTvyu4Zf4zu2PYMvqidizqjP2LaqEE0sicE4KHsTE7hk7szQYRxaGYd+caGyZVhSLxlXC+MHNMGxwb4wbN+6qt43Xiaefflp9\/3722Wfqh532tt2PEY88BTiKlXcjR45EWFio8sJ1blxDAckN8+DMxou+1XJbM29nBgbzNmazWUdw+csAGHoICVQ5ssun8Mvlk9fbiyfx8wsn8L\/nj+FHwwhmXz31GD67cBDvE8hO7MDrR7bg8oENKift+Ib5OLhihrLtBpStmzYKS8YPwrRB3TG+T0f0bdcYDzetjVa1K6FBpVIGpBVDiYRoFIuNQEJkCOIjghETFoSgAD\/4+XjDy8Mdgf6+SIyJUEDXqVFNpA3qpnLf6KV7xQDBD8\/uUfD2zxtPXHM+rlpW59Fqnb5v9RguywLgOPidhS9MPL1XxPAevUAsYChWrJgCuGAD4NzdXNC2TRsVDmZ7DFHui7+sef6ZrsFzzC\/xdK\/c03j8sX1Yt3IWds1JlTFdYmJ3sdFLzvYfp5YE4\/jiEOyaFY8lY0tiZL866NG9O8aMGaO+X9euXYv9+\/erRu8vv\/wy3nvvPcUYuhUIwe1+Vp4DHMMd8+bNU5V5YcGBaFSlNJ7ds0ZBz3UX98zMCgSszLwdb2szb2M20zp6xn4yQOv5feuxbd5EbJg5Jke2fsZorJg09DqjV2z+qH6Yl2Ezh\/XC1IHdMHlAF4zq0RYju9PaYMjDLdC7TSN0bVoXHRtUU9aqdkU0qlwaNcsko2JKAkoWiUWCAWjhwQEKyvy83eHj7gRfb09EBPqiiAFwxeOj1LYNjMd1bFwLAzs1x5ieHVQByeqpI9RIs8sHN6i2IQRMegF57Fcrg63OV1bn0Wqdvm\/1GC67zwCOn\/GjR4+qZr1RUZHwcHdTx+Hl5YX+\/fvjueeeU4Ahun3ir22CHN8L5ZX79E28dXEdzq0vj3MrZDSXmNjdbMxb3TY9HjOGlMCArtXRv1c7jBw2ENPSpmDlypXYs2cPzpw5oxqlc\/wec9tYlEBw4\/88PfIPQo5xngMcfyE\/8sgjqF69OmIiI1ApNVE1i\/3+0hHrC3xmltm2OXmOLOxvA2Q+f\/IA1k0biYYGZFYrnZwzK1UMFVKKoEJygrJSSfFITiiM5PgYJEaHID4qDPGRwYgJDUBEsB\/Cg\/xU\/pm2kABfBAf4IcgAs1DjNi3Y3wdBfoYZy2iBxm2avy+391PPRa9b6aKxqFexFNrWr4Y+BgRO6NsJq6cMx+HVsw1YXoe3jm3Hx2f34qunDuH7Z4\/iV4Lbq2cVuFmdC3VOc+O8Wj0Hl2UBcBxBVb9+fTV26l4R4Yzh02bNmqnxWZ6eHmp8FvPgxo8fr5Jp7\/dfhneDGMrme\/HZ2yfw6vFBuLi5DM6vCjcuEBI+FRO72+yx+ZFYO7EIpg0phdH9amPs0A6YOKY\/Zs2YjOXLlmLbtm2qIIEhUo7aY19Iett0\/zZCG\/nifslvy47yHOCokydPKu9EieKpBsiEK+\/TR2f2\/AcKN2saCHLB6Il679ROpA3sqsDIz9sjZ+blAR8Pt6vm5e4GD3d3Nczcx9O47+muigYCvN0R5OuJMAPaogyQiwsPQtGYMKTGR6NMsXhULpWMWhVKokHVcmhasxLaNqyJ7q0aYmCnlhjVsz2mDOyGGcN6Y\/H4wdgwYzR2zJ+EQytm4sSGBXhi6zJc3LUarxzahA9O7VKFDfR0\/v3aE+keNovjvs5y8ZxmahYAx4H29cslwcfbE3Vq11ZAdC+Iv\/r4S3D58uWq3xvBjS1E\/P39VAHDggULVAn7g\/Dr8E6J5\/bvv\/7E91++gfcuLcPlA23w9IYky4uGmJhY3hvHWjGnbfv0OKyaWBLTh1XGrDFNMXV0B0we1w8zpk3C0qVLsXXrVgVtLAjTIVJdScofZ\/yRpsHtQdQdATg20OMFrm7duvDz8UL9yqWNL9lH0j1AVhf47FouwgYrOumh2rt0GgZ1aoGuLepfY52b1UOnJnXwcNO66GKzLt0aoEfrRletV9sm6NuhOfob4DW4S1tlI7u3w7hexq+Mvg+rMOrMIT0wd0QfLBo7AMsnDsbatBHYPGe8mljB\/WAfthMbFqq5pC\/sW483jmzFh2d24bPz+1UunYYzq+O5q80W4Az75cQaNC5vAJyXG2rXqnXPABy\/UFigMHnyZERHsQmyn+r\/FhgYoIox+IUk+W+3R+ng9gd+\/fEzfP7WY3jj7Hhc3FIOF1ZJyFRM7E4ai4Y4QH7P7GhsTkvAmsklsXh8Vcw0oG3KmG4YMXy46te2bNky9R3JPGGOtyK0sSCJ0MaCBJ3b9qCESG+kOwJwdHnSC9etW9f04d6BvgaczFbJ\/VfeyAGEEdhuFdoye7yx\/Mqb5\/HLSyfxxVMHDVDafY29d+pRvH1sm2Hb8cHpXcrM6z86u1vllWn76ulDasrBt5ceVwUCtJ9eOK6Omblnv758Ot1UwUS6\/fbyGdUWxGx\/vnpOhXdpBN5r8tVu9VzcKcsE4JpUSAe4WrVq3jMAx1L1Sxcvom+fPggM8EeAYT4+Pqp59ahRo9Tnnp9\/Ue6KX+Z\/\/PYjvv\/8Mj54fg2efbSeAW4ymUFM7E4YCxCOLwrB4fmR2DunMLbPKIoNU0uplh\/jh7bAiKF9VPUoCxE4bpDf74Q2etrY05GtP1hNTmjjdyrzWZl2QnAT\/ac7AnB8E\/gm0UtRNDERbq4umDa4h2qHQUC57gKfGZzYLte3rba33c5s5u1stiHEsRrTylTrj1fPXjXet9qOxue55jXNZvG6luvMZrvefD+rx9H0tubtbB+j79su18tszbyt\/mtrtsv1\/UwArnmlYvDxdFX5ktu3G+vvAbHfEHsQtWzZEr4+XlcBjgPsV61ahZdeekmVtYtyRwS3K\/\/+g99\/\/QFfvn8Grx0fhAtrYi0vKmJiYrlvnDvK3mychHBySTCOLQrDfgPa1k1OxpyR1TCsb0tVOTp06FBMnToVixYtUi0\/WD166tQpVYjw1ltvqYbc7J\/JFBQdHqWJpy1z3RGAo\/hmPbJhA5o2aQIX50J4uGkdnN285L+mvrYXeisosF2ub1ttb7ud2czbZbaNebur922W25p5O6vlV9dnc53ZbNeb72f1OJre1ryd7WP0fdvlepmtmbfVf23Ndrm+nwXAebk5oVKlSti8eXPGJ+fuFttWMD2gTp06Kt\/R14A3Vp8WL15cjXJhDgdDAKJbF7\/Y\/\/zzD\/z0\/ad489xEXNxaHk+uliIFMbG8tGPMZZsWi6VjkjChf1n06VIPg\/t1xfixwzBzxhQsWbwQ69atU4VonGlNLxt\/yLKYi9+XTCnheDz+sNWtPwTasqc7BnAcSs1w0jCDyl1dXVXFJqcE\/PDskfQL+82aBgMrM4NDTuxGz2m+re\/fzOvklmW2TzcyvW12ts\/uc97I+Dw3AriKFdUvtrtdTKRlSTsrTVmw4O7upqpoaRWNY2D1FD10UoF66+K5\/vWnr\/HhSzvwwr5WePqR5Lsy1+3E4lDsmhmLNROKYsnoYnhkcjwOzIlU\/a2sthcTu5vtyMLw9MKD8SlYNKYiZo9piEnDWqk8tplTBmPOjPGYN3cm1qxJD4tygg5H3LF1kq4cZT4boY2pJOaRVjTlURd4y7buGMCx7JcXO3alDw8PR5Cfl0rmf\/vYjv\/CqFYX\/BtZboHFjYyvo81qfWaWV\/uXXcvuMdyO\/davbQNwtL\/PbkCbaikGwBVCxQoV7gmA469I9iZq3bo1IiIi4OmR7oELDAxEo0aNVPEOf2HKF9TNi+kXv\/3yHb7+8DzePj8Vz+2sm9EaxPqCk9fGcNLhBRHYPDUOi0anYMbwKpg2qhmmjeuMWZN7Y9nsvlg7vwc2zm+LrfPrY+f8Stg6LQEH5kbh5JJQVZ1n9bxiYnlpp5cG47F5hLUY1dpj6djimDu6CmaPbYSZ49pi+vjumD11KObPScPCBfMNYFtzFdj4HXjp0iW8+uqrKuLAEXf84crKUV2E8KBXj+aW7hjA8SLGWDc7KPPixnBT81qVVaXlt7Y94fSF3nzxz2x5TrbNzjor09vf7OOs1llZTrbP6XPT9GOsHmu+n9k2OTXzc5if0wLgaB1rlYa3hwsqZADc3fzPzi8k\/socO3YsihYtqlqH+Ph4qyKdCOMHSo8ePVRSrsDbzYu\/1H\/86g189NJGvPx4Nzy1oZjlxScvjcB1bFEo9s6OwZZpSVgxoRSWTqxlQFtTjBveBRPGjVCJ2mw+yjxONqRmE9Id2zdh28bF2Lp2sgF0vbB5YQc8urgpdi+uhb0LK+LAwhLYYzzn4wvCcXJxqEoKt3p9MbFbMX6uji4Mxb45kQasxWLT1CJYO7kkVk+pjGWT62De+KaYMa4Dpo7rpQbEz5w5E0uWLFGOF841Z1oIge3ixYsqr12HRdmfTeeymYGNJt+Buac7BnAUK0tYbcJ+L7GxsSgSHY7xfR7Gq4c3449Xzty4V9mNwOBO2Z3cj9x67bw6Br7O8weAJ7ddB3Cd6lRQPfTKlSuHDRs2qM\/L3fbPz\/2hN\/n1119XCbpxcXFwdnKCu5sbAgMC4OHhjsTEIqpgh79A5csrZ+L5+uefv\/D7L9\/im48v4a3zabi0raLlxSgvjB42hj8PG2DFuYw7ZxXBmskcqF0b44e1R\/9+\/TBp0iTMnTtX5f3s3btXpYowfE6PBL2wNH5eOKuVrRKOHTumwG7Lli1Yu3op1i6bgvWLB2JZWjNsnlMHO+dXwd4FZXBwYTIOzo\/DwXnRqocW2zKcMS7A4rUTy8oIafSoHTd+aByeH6E+P\/zs7plTBDtmpWLd1HJYOK460kY2Mj7DbTFi2ABMmDBBwRoLDghr\/PFx4MABnDhxQuWw8bP7xhtvqBYfBDZ62Mx5bAQ2HRoV3T7dUYDjm0uXKr\/MatSoATdXV9SpWBp7lqSpJrpqPmpmF33912y222Vm5m1tH5fT57K1rB6f1Wvp22Yzb6dvmy2z5TTb5zAvt72f1XZ6vXk7822r7c3baDNvq02vu7j7OnjTAOfl7opSpUqpUvO7DeD4+SW8cdYmS+ITEhKQ38EB+fLlg6cBbiEhIWoOKvPfNm7cqMrhBeCyL54r9nX733cf4oOXtuGZrdVxflWE5UXqdhp7WBGUCG5HFkRg+\/QimDOiHEb2rYe+vTtjyJAhCtB5seMPDUKbHvNDWNOJ2vyuo0eCnwNe7Aj0vPB98sknynNBDwZDT2fPnlWeDVYzsycWq5c5fjBtyhhMG9Me00Y0woqJ5bFlenEcWJCIk8uicXpZBE4tDTUsRF2sub+sDCRwWh2T2P1l\/Izy\/T6zNB3W+Dng5+HkknAcmhdr\/NBIxNrJJTBnZGVMGVofI\/s1wJCBvVT\/NQ1rdKTwRwdh7eDBg6rgQOevsUqU+WtsQk7vmu7JRmDj97L2sInyVncU4CheBPklNnDgQJU3VCIxDlMGdMHh1XNU37NrLv76gp+VZWc7\/Xy2297osebH6W0ze4zVcvPjMluub5u3My8zm15va+Z15m2zegxNb2u7XWbLM7PMHm9eZrYsAI4euDKlS6uLGL8s7hYA4pcVQwTM4+S+1apZEz7eXijkWNCAOLtrAI4Nq3lBvpv2\/24Xf73zfH354dN45UgfPLU2FudXcgB93gIJL4x758Rg9YQkTBtcDkN7N0D\/Pl0wasRgzJ41HcuX\/9d49KmnnlIQxs8EoY2FWrzIEfLpleB3Hd9\/bfwMcTnXE+r4eeJjeJFklT6hjl67Z599VnnqTp86hUMH92HH9s3Yunkd1q9ZiuVLZmPxvAlYNL0Ppo9uihnDa2DBqNJYOT4JW9MKqwpBDga3Ojaxe9\/ofT29LAR7Z8di05R4rByXhPkjyxifg5pIG9kUwzhje1hfTBg71PgBMBazZkzB\/HmzsXrVcmzevEmFQQ8dOoTTp0\/jmWeeUdWhhDVGxpi7xrQPc5Wo\/iwT2MyfZdGd0R0HOL75\/GDwS7BmzRqIjQhFgyplMLF\/Z3x24YBqWHtL8GBl+vlst73RY82P09tm9hir5ebHZbZc3zZvZ15mNr3e1szrzNtm9Ria3tZ2u8yWZ2aZPd68LMNUI+KLuywBrkv9yvDzcr\/rAI4XXl5o+YXH9iYNGzZEXHSkakgd5OsFp0KOKqeTAOft7Y327dopbwx\/qYpuLMLbd5+9iHeemo3ndzXAU+sTLC9et8uOLgrDlrQ4zB2RijF9q2Ds4FaYNLonpk0ejnlzpqvPIlsiMJxEaLPtFs+LHT1tfL\/5WdHgZiWu08Zt+RjtpSP80UtHjwefmxM+6NFj6Ory5cvq80cPyfFjR3HwwG7s2rERmzcswyNr5mLt8qlYtXAMVs4fguVz+mH1nM5YNrURFo2rgmXjSmHdpEQFeMzde3xBBE5LVexdZ+eWs69aCB6fH6HyITdPLaxadSweU9p4H6ti\/ri6mDW2GWaM64Qpoztj1pT+mDdjOBbOGY+lC6djxdJ5WLN6tfL+a1BjuJ6fGX52+BniZ4k\/FOgFZg82DWv8\/PFzSGDj\/6P+HGsTaLs7dMcBjuIHgl9Mw4YNQ2xMNCKDA9R4reMbFuCH547eOBcutyyvXkfsKsBded0A9GesAa5bgyrKA8eWHLxo3g0hSH5WeZFm8c2IESPQsEF9xERHoWqZVDSqUhYp8dHK+0aACwoKVKO0+vbtozwqfKzIWnxf\/\/rrD\/z201f45NWdePVYP1zcUva2twahB4MXyV0zo7FhSgrmjaqAWaPrY\/rYNga09cCUSWOwYP48rF27VoU0GVbixY+eMXop6C3jRY+fTcKXvtjRbuazysfox9P4fPR28Ln5A4atF2h8TV5w6eljaIthfHr\/XnzxRRWG5eeT+8q8JRZN7Hp0MzatX2KA3XSsXjwBaxYNw6p5fbF+YR9sWNANG+Z3wMb5LbF5bn2sTauAdZNLGJBXFBunxGP79MLYMytKDRunsVErQ3VW51Msc1PesqXByit6cF4kds+MUrZ9WmE8MiUJqycWV3C9fHI1LBxfG0smN8SiSU2wcFILLJzSHgumdsHsyb0xb\/pQA9LGYsmCaVi+dIEqkOHnk04Qhu\/pDWbe5RNPPKGKC\/iZYAsPeob5WeFnRnvW6PXVPzh03pr58yffWXe37gqAo\/gFtXv3buXN8PP1QXigHwZ2bI6XD21ML2iwbYYrdu8bIe7VU8DTj1oCXJd6leDp5qKa4N4NAMcvM3re6HkZPHgwEosUQWigP1KKxKJZrUpoaABc4YgQVcDg6upiQJynKmQgwPELlB4Vfs7vNITebeL5+OPXH\/DtJ5fw3sVFeG5XQzy5NsbyIpgbxovowbmsuovDegPalk9kP6v6mDamE0aPGHhNPhsBiPlsDGMyV1d3i9fDtBlO4kUvLy50tnDHCy5fX4Mdf1jQ+Bmlx477you2hjvmMtFjyAs7L\/D0yPD4CKYsoNiwfg3Wr56PZQvGY8nsIVg8ozeWTO+KFTM7Ys3sNti0oBU2zGmOjXMaYcvc2tg6pyo2zayIzTNKYdvM4tg+KxXbZxbDjhnxeHRGjJp7STtgnGsWfRD8aPT2aWOC\/d1ehMH9Y04h95ewr4\/jsfnhBohFYP+cyPRjnRVtHHuMYQmGFTHORZI6L5tnlMaGtHJ4ZEZlbJhZA2un18XyqQ2xZEpTLEsjnLXGvMldMGtSb0yfNBCzZ4zH9GlpqhBm4cKFKjeNgMZKfHp+OcGAKRl8Dwnq\/EHBzyc9anyv6Q2mR42QRu+tBjWds8bPjO2PDZro3tNdA3AUf9HyA1uiRAl4e3shOiQQyyYMxvunduGv185dD3EZXpxrlplNr89qmxtZdh5r+xq38npWlhvPd6PnyO19zo698QRw+fFrm\/g+kd4D7n\/HVqJVtdIGwLmibNmyKrmWXzx3Cn54seSX4ZEjR9C9e3dERUaocH\/55CJo16A6qpYqpnoZFihQAPnz54eDgwMKFsivQqj16tVTQMDEYF48CXP03BAAHmSYU0Dy95\/45YeP8Plbh\/DaiSHpY7BW5q53R81lXBxqXHAjVD7b5rRkLBhTCZOGNsLIwV2UJ3XatGlqkDZD4oQaFhKw0k4XIRCK6KlgSEl7Ku4W8Txyn8zGCzT3lZ8xHYrlMTDfWHvu+H3L8BnDaMx9oreGFYYEVv5IoSeH54I\/rNnji8nthFr+mGIrCQLGtGlTMX3ycMxJG4A5U\/tizqRumDOhLeaOb4olkxth8aQGWDG1DjbMqIHNs6tiy+wq2Dm3nLJH55TF7nmlsH9hcRxYmIp985OV7Z+fiP3ziqTb\/AQcXBCXpR2aH4ND86KzNmMbq8eyqvfqa2XYPsP2zE26uj9756cY+1sSO2aXwbZZZbFhekVsNGBs1ZSqWDG5OpZOqoUF443\/8YkNMGtMI8wa2wazxrXHrAmdMXNyX6RNHIrx48ZiivHDYNasWaoghde5FStWKDBjlScBmmFOViOzlxpDncxL04BG+Gaonvlp7K1GOGeOGkGd7ynNXFig89TMJpB2\/+muAjh+yFhuP3LkSNSsWRNubm4onRSHjTPH4utnDiuIuwoaZuDgbW3m+3q91XZW21gtt9rObLaPudH2N2OZPZ95eXZfV29nu73tcr1O\/zVvZ75vNvM6\/RzXbZ+xjPBG79uze4Ent2bA20b8dWY9vj28DKcXD0G5pGj4+\/upPoH0EtwJ8eLIiyEvePzl27RpUwQY+5RaJBZTB3XD4nGD0L9DUyREh8HZyRHeHu4GdDrDxakQnAs5GssKqZBqUGCA6geXmpKCtm3aYPHixQoQeJF90MRzSvv9NwMsvnoLb1+Yjqc3lbSEr5s1Fh9wNiMr8fbP5VzG4pg9ohJG9GuEvn16KmjjxVQP0j569KgCGHrZCDY6n02HRmn3cjiJwKmPQxsv9Dw+XvTpoaGnhpBHzw2NgMCQGyGP4MBzQ9AjTBAq+GOEsyz5o4ZGjx5DePxfJYwor54BfAQUQh89SQS\/+fPnK4hh5SPBOS0tTbXgYQ9F2vjRAzBhVC+MN2zCqB6YNrajyTpcZ9NHNceMkY2ytOmjmlo+duqYThg\/0ngtk40e3ldNCNL7Q2NrGO4njftMeOUx8IcZj4vj83icNHrKeOwEXsIvIZgwzHNEMOaPA3pC6TWjEcwI0fSW8rPHXEf9HhDM+L7ws0gvK98r7fm1fT9pEvJ8sHRXARzFLxD+CuQ\/emJiIny9vdCoWnlsmj0WH5\/bi3954TfDwd1qthBzI9Pbm2HHdhur9Vlta2WZbaufJ6fPp+1Gj9HrXz0NvHQ03fNGeLuw5ar37deTa\/DBrjk4u3QomlUtCS83F+WNnTJlivqiuxPiBY6gxS\/p+vXrIzIiHFVKp2LRuIF4ft86PLFtGXq3boiEqDA0qlERa6eNxJq0EVg2cQhmDOmJkd3boUuzOqhdLhWJ0eGIDglASHAQUlNTMWbMGBX24A+XB0W8wPBC8+uvv+CDl3bg2V2NcWFNNM6vzL0keoZId84sjLnDUzFpWCOMHd4dkyeMxOKFc7Bp43oDxPep8BOBjRdOXjDpXSXE6Fwg7idNwybtXpf5WKxMH7M2vk\/8gUHQo9EDSSNI0KNHqCBc8NzRCL38oUPT8Gf28jGMSwDkZ55FPfyfJgjy+55VtgSbdDtj2GmcPnVSFWicOG6AT4YdefwxPHZov4Xty4Zd\/7jDjx1Ur2G2Y\/x7\/Lhpf84qTxj3k+DFHENCLHPLeCwEMMItvbU0hjD5mdLngt52ej15jnh9MwMZTRcN8BzzfNPoLbN9P6zeM1sTPVi66wCOXxr8wPOXSpMmTVQSeGJMOIZ2bolTGxfhy6cO4s9Xz+LKG+evh4S7yXIKQXp7\/tVmu4028\/obbWtrmW2rnyenz6ct08cY79PrZ9PtlZPpUxee2w9c2nPV80b75fhqvLN9Fo7OHYL5\/VohLtQXPl7uaNq0iQpr8Usxr8UvVYY7+fqdOnVCbEwMkgpHYcjDLXFh+wrjs3gILxgQ190AtOTCERjSuRVeP7oVbx3bjssHHsHTj67E4dWz8cjUwZjWozm61KuI6qWKIT4yFAG+PmjRooUCiQfFC8eL0G+\/fI+vPriA104Ow6XtVQx4i7KEsJwYq\/X2zI7CmokpmDu6BqaOaqvGVs2ZZoD0krnYuHGD8p7yQkwYpzfJDG28cOp8IH2hFKUDnxkgdK6UrfHc0XSojt4hgjD\/f7SHT+foEV606XCu9jaZAVBDIHO5CILaCIT8Lsgt4\/OZn5+fC74mzQxgeh9tQUzDGIGWx0njMfP4afxs8Zzoc6Q\/Z7ZmPs\/y+RNlV3cdwPHDywsa\/5Hoiq5WrRrCQoJQKikOgzo1x\/7lM\/Dhmd349fJJ1YLiOvC4E2YGFqv196LpY8npcent6SllhelrBri9fBx48bABbXvTCxae2o4rF7bij9PrlH15aAkurBiHZUM6oGv9SiidEJU+Qqt8OcyZPVv9yuUXY16KX7z8lc0xSK1atULRoolITojF8K6tcWbTYnzzzGH8+tJpvHRgAzo1rI6ySYUxc2gP\/PDcMfxmLP\/pheP44dmj+OLCAbx\/eB1e3TQNTywdi22T+mJE23pIjAxRaQKsEOQX\/f38pc0LFH+Yff\/la\/jg+VV46WBbPLW+6E173VgBeWheJDZNTVAzGheOq4W5E1pi3tQ+WDBnovKWsiKPIT0NbQxPEQjM0KYvrLxoinJP\/CzbAgrNDDE0DXxmI\/zZmvZKZcf4vmqQMgOV1baZme3r87Nru5+2x0KzOmb5bIlup+46gKP4BcB\/Gn7hMtGTUxqCAwNUmKpN\/eqYN6ovLu5arS6QedZiJCvLKeTcC6aPJ6fHRXBT0HbCgLbHgecPpodKnzHALSNc+u8TG\/HLidV4b+csnF40EosHt0XPRpVQKbkwQvx91EQOjs9inglDLQwx5KX4JU54Y+i2grEf8TFRKJ1cBGN7dcDTO1bilxdP4N83zytPMD1wzWtUQOXiRbB8wiD8\/vKZa84HP59X6HXkcZ97BN88thR70\/qhSko8qlatim3btqkLzP0KcLyI\/fT9J\/j0rSN44+x4PLu9qiWUZWXp46tCsH9OFB6dVRQbp5fHssn1MHtCW0yb0Bczp6epHCTmHDHXiOE4hrWY7E0PCr0kvJDrizEvtvczMD\/I4vtqC1YCUaL7VXclwGnxn4+uaiYa16lTB+Hh4arbfVRIgApXHVwxE288vhVfPnkIv1w+ib9fe+JaoONtW8tqndn0dlZ2o+2yu9zqOfSy3FpuXqaXm29bbWNel9V6\/Zdh0jfobTPg5aVjKkz678U9+Pv8Fvx+ah1+Or4aXx5YgvcfnYtXN83ApTWTcHTeUCwZ3AptqpVAVKAHPN2cEBDgr+aG1qtXF6tWrlQhDQJAXohf8rzAMxTCQhrmpyUnF4Oflwcql0jCzKE98c7xHfjLgDYeMz9nv750Ck\/vXIUaZVNRo3QyHpkx+r\/pIRnnh6H+Ky8cUgDHIg2Gih+fMxjVShRRAEfouN8AjsfC8\/nnH7\/ih6\/ewPvPr8Wzuxrh\/OpoS0CzsjNLg9WQbc5t3DsvEVtnlMLiCbUwZ2InzJg6CnPmzMGaNWuUB5NhaOZT6QIEhrp0Ppv2nuTV50gkEonySnc1wGkxx4AVPH369EFKSoqqTnVxdkZCVCg6NKyO5ROH4KkdK\/DJE\/vx43PHDJg7hd9ePq36x\/1pXFB50f3ntXP493UD8G5n7pwl3Ngsz6nZPi47z2Ven53ttelts7G98iwZ5\/OfV07h7xeP4K9L+\/HHhe34zQC2X46vwbeHl+PD3fPx8sY0nF42GssGd8DAZtVQt0xRFI0ORbCvJ1yd8sPFyVF53IoWLYpu3bqpfDNeiHnxzatfzry4M0eHPZTY6qNx48bw9\/eHYwEHxEUEYtqQHvjiQkbuJWHVOPZ\/jGPnZ+3MpkUom5qE+lXKYvfiqerzds25YhiZXsgMzyNh9nAGwNGzzIq9+w3gOL\/05\/99iy8+uISXH++VrZ5u9LKpXltLQ3ByaRj2zEnA0nGlMGlofYwZ0VsBNVsv8PPBNgusgNSzRpmjxHwq3eaDP\/xEIpHoftc9AXD8Bc0EV1YB8Vf3gAEDkJSUpLxxwX7eSI2LUlV+betVRf\/2TZE2qBvWpI3EvmXTcXLDQlzavQavH9mCz87vx08vnMDfxsX3GlgxQ4vV8pzazTzPzb62BoXc2ndt+vlsn5f3XzuDn54\/jp\/PbcNH+xfjhY1TjYvwSOxO64elg9pjfKf66NWkGlpUL4uapZNQITkexQxoiwzwgK+HM1xdnFWT2yIJCSqRf\/r06artACvSmPvIC3FewRs\/W6yQY7uDwYMGKagKCgpSPxAcC+ZHdOh\/AGf+3NDb+\/VTj+Ho2rkomZSAlnWq4ohxW7W6MZ8rE8D9c+4RfLF\/EQ7NGqgAjl5lthi4XwBO5wd9\/8WrePvCTDyzqTQurObw+awbtbJRKnu0cd7ojGHVMGJgR4wfMwgzp03E0iULsHXLZpXPllloVEMbz+H9BMIikUiUle4JgOOXMi8MDG\/xYsueTcxPat26NSqWL4\/E+DiEhwQi2N8HhaPCUC4lEY2qlkWnhjXQu1VDjOjWFhP7PYz5o\/tj7bRR2Dp3AvYsTsPBlbNUZeuF7cvx3O51eO3gFrxzYocqkvj8wgF8\/cxj+PH5Y\/j9lTPGxftc9osmbgambuYxND5Om9X6bBrhhMf504sn8d2lx9Xxf3h2twG+W3H5wAYFwU9sXaYgZffCydg0ZSDWjOyKuX1bYdzDDTGgdW20q10edcoUQ\/HYYMQEeyPU3wtB\/r6IDA9DanISKlUoh\/p166BF8+bo3LkzJkyYoDwqDH8x35FeMIa88gLeeMHna7JZJvtRNW3SRP0o8PfzRUBAgBqDxf5tEcH+GN+no\/pcqPBoxvniuXrv5E7sXDQFqUXi0KlpXZzdsuT62b2q192+qwD32b6F2DWlDyqnxCmAI5gw8fpelv7\/\/OXHL\/HRS1vx8uEueGZjasbw+euBjT3aOE7okSkJmD+yFNKG1cHUUR0wc\/IALJmfhlWrVqiO8\/w\/5482tp5gxSB\/xBHa+DnR0CaJ4iKR6EHVPQFwWvyiZmiNlWT8UmcDztGjR6uQV2pqCsLCQlUeVUigPyINoIsND0a8AXRFY6OQFBeFkknxqFiiGGqWL4mm1SugfYPq6NumEcb0bI9ZQ3th5cRh2DZvggF2M3F8w3ycN8CO7SDeNS7UBBpWHn578XF8\/9xR\/GCA3f9eOI6fDeAxG3PxfnvplKpE\/N244POif9VeZTj33DVGTw7Dcdk1bk8vD4HL9rn+NMz8egwjcz9ozNcy7yf3ncfAWbPfGcfE4yOQvHp4s4I1gu2eJWlYN30UFozuh7SBXTC8Syt0aVobTaqVQ40S8SiXGI3ihcORFBOmCkxiwoIQHmyAdIAPggJ8ERYajISEBFVJ3KVLF4wbN0419Ny7Z49qE8P3kB43XpAJALf7QqxBg58htgNgryc2dC1v\/Aig183Ly1NNAOE+E+YIcWGBvhhqHDeLFXgONZzx9quHN+GRWWOQUqQw+rRrqgprrgM4tk5h9a0J4HZM6o1KyXFqQgNH4tyrAMf3iwD15+8\/45uPL+HtC9Pw\/K76eHJt3HXQxjFELELYlFYMq6dWxsKJTTFnUmfMmTYEC+fNUJ51hpP5njAHUc8a1Q116Wkz57MJtIlEogdd9xTAmcUvcnpQGFZhy4AFCxZg4sSJ6NevLzp26IAmBtRVr15dVTMWK1YMMTExCA4Ogp+vL\/x8vBFCz1BwABIiQ1HCuABXMsCuTsXSaFarMto1rInOzeqiV5vGGPRwS4zu1QFTBnXFrOF9MHdUPywePwgrpwzD+hmjsX3eROxcOEXBDosq6KE6+chCnN2yFE89utKwVXhm1xo8t3cdXjRg8NXDW\/DGkW14+9gOlRT\/7olH8f6pncrrR\/vkzD5L++jMHrX+g9O71fZ8HB\/\/pvFcfL7XHt+Clw9twvP71hsAtla9Lj1mZzYvMfZnEQ6vnqNasOxaNBXb50\/EIzPHYNXU4Vg6YTDmjOyrpgqM6d0Rw7q2Qf8OzdGtRX0VFmxQtTyqlUlFuZQiSImPUiHFYD8f+Hm7K28VC0sIPBw4X90AtWZNm6Jr164YNGiQ6mDONhwMTxJUeGFmOwfmK\/GCnFeJ5bzY01vDxHb2ACMkEBg4Eos5lRx35eXlhYjwMAVulStXRsWKFREVGamqYnu3bmCcx8WqNYiGM4biL+5erc4f24sMNc7bS4c2KsjODsBVTolXc385MudeBDieUxYp\/Pj12\/jkFePzd7w\/nt5Q7GprEOazPb4gXM3E3DqjONZPq4RlUxpi\/pQumDtjlOrGz671HB3E0U2s+mUOop41ai5C0J42kUgkEv2nexbgzNKeFVYRMqGZeTIc8cK8qpUrV2LGjBlqPBeT5Js3b466deuiapUqKG\/AHTv9M4E+Li4OUVFRCA0NVQnsPj4+8PDwgIuLCxwdC6JAfgcUMv4yf8vX0w2hxoU9LiIYJRKiUT45HlVLFkXdiiXRtEYFtKlXDQ83rYuerRsp69e+maqaHdWzPSb062zAUncDBntj9og+mDOiL+aPTodC2orxw7Fy\/IjrbMn4wVe3WTh2gHocHz9tcA\/1fJMGdMVYA8CGd2uDgR1bKPjs0qweOjWpo1qvNKhSBrXKl0DF1CIolRiDIlGhCA\/0hb+nu8r34rE5FSqkjtfd3V0df2BgICINiImNjUWRIkWQnJyM0qVLK48apxK0a9dO5SNyzAxHytAjyosxL8S8CDO3ixffOymChgY3FsIQKFu2bKmmfLAYxtXVFSEhIQryWRXaoEEDBVbs0cbPRKCvN9rXr4J9y6bh+0tHroarv3\/2KE5sWIDpQ3qgaFw0xvd92ADq7aq9iAY4VRHNHngXd18DcFvH90AlA+CaNWumQrj3EsDxf432609f45uPn8E7T83C05tKqzw2TkA4vjQGjy1KxM65xbFmamVMG1kfU8b1RdqUCeozwt6ObKrLz4ntrFEdGuX\/Ml9DJBKJRJnrvgA4W6mwjvHLnUDHiyONMMELBMOvDM0wRMPcK4byCB7sN0fQGzpkCHr26IE2bdooSKEnhhdyJycn2Nvbw84uHwoWNGDHuO\/s7GQAj2HOBvgYxlmYThnzLwlCzgYYaeP2ZitkwBKNz0Eo5GOuPlY9b3qyf1amn8P2eTlQncbb3A83N1e4uTorc3dzgYe7cd9YRnghrPn6+iI6Okp5n8qWLatys9q2bYv+\/furXENW\/3GYPFs2sPqPVaK86OrQlj7HPOd5lcOWlfj6hADuE9\/vJ544h1GjRqFMmTJqsoejo6M6PwR1QimBlOFMgps2Qj4hj21E6lcsgdVTR+CrJw9dBbivnz6M3UvSMK5PJyTFx2DGsN74hKPeTADHnMkrbGD89I50gDv7CD7duwCrhnVC2aKxqkEwR\/NwP+8F8bz+8bvxXv\/yPT56dTee29MS51aE49zKCJxcFo1ds4ti\/eymmDm5vwqXsziFI\/HY64792XisOjTKVh\/MaeX\/Jf9P7zToi0Qi0b2m+xLgKO0psDV9cWd4hhcPemeYGM0LPb13H3\/0kapy4\/w+XmzYsmDw4MEqsZ2Axb8MvRFqCHxDDOAj6PQwoI\/jlnhRpmeFY8Bq166NWrVqKUBgWK5ChQoKIkqVKqVmYRIeCAnhYWEGbDnioYceUp4wH29v5QmkR9BshQsXRnx8vApZ0mvIxzMESC8iPWOELy5zsLczACW\/8pqx0IPeR4IYvU9Lly5RMMb+Y6yAJMDywsoQFnPSeMwsFOHxM3GcI2WYh8Tzo8fFEDh0HpLVOb6T4nvLfeZxsSM\/vYQlihdHoPG+eRiwyrBvdHS0Omf0uBFWtdfNbAS65GLFEODrjaolkzBneG98dv7AVYD78smD2DJ3PPq0a4yUwpFYPmkIvnv2SHqhS8Y2ytjMOAPg\/jyzHi9tnqYmThDgCMn8EUHovdvF9\/r3337C15+8gFeODcDFbVVxfmM1nNjSCfs2T8SSBVOxiAUIKxZh08YNCvbpBefx8TPF0Cg\/Q\/x\/05Wj5s+PSCQSiXKm+xbgbiRePLQRRrTXji0smKPF5HoCDfO3GHYNDAxQF3QCAT0K7EH11JNP4eCBQwqG6MHj5IC0qVNVdeWE8eNVDtjYMWMwbNgwlRM2cOBABXu9evVCz549VWI\/Ya+4ARiFHB3xf\/\/3f3B2ckJEeLiCvvbt219jHTp0QMeOHfHwww8rYKT17dtXeQ3ZJ2vy5MkK1ooaUOjp4aH+EhLS0tKwceNGlSROsGFlH8dTEdK0J41QRk8IjeeBIESjZ0TnIJnP2d0iXvy5nzwGggIrFwluAwcMUOc2Lq6wajfDAoXg4GAFwDoMrL1ujRo1us64nO9LoJ8PyibFYUyvDvjo7N6r3rXPnthvQNtQdGlWF8mxEVgzdYTKi7uukbQNwL24KQ3z+rVGyYQo9X5yIDb3\/24W3+9ffvwcn711BO9eWo53n12NF86tw9mjG3D04CYc3LcDe\/fuVV62c+fOqR8Deki8zmfjjyV+rsyfI5FIJBLdvB4ogONFgxdLwgovKrzo8wKjPG\/GxYb5OAQzzk9kewdWTBKyiiUlqYt5LwO6WDDB7ZTn7tvv8NFHH+PVV17F+fMXlLeO7Q\/YGoPApI3J2mvXrr1qfF4avXj07jFMW7CgI\/I5uKCgoyeiowsrUKTHbNmyZdcZYZFetI0bHzGgbDceP\/w4njiX3tj0\/PnzKi+Nnjh66ljIQchj\/hH3g3mB2vNGkONjeLGlt41eEp4HerD0AGd6J2n0vhFuzYnld8pzQgigB4fvAb2DfD\/4ni1ZvFh5R6tUqYIiCfGIjIyAn6+Pqkym95KFFvSE0iuaFbxpK2VsH+jvh6JxMejdppGq0tVw9rEBcxzp1qFBNZUHuXn2uOvGaGUGcHP6tESJ+EjVSoXD8u92gOP7\/Mdvxuf981fw2bvn8PG7z+P1Vy+rz86lS5eUl+2VV15RPwj0vFGdz6ahjSaeNpFIJMo93XcAp3\/d84KhvUca2ghshBNeNAkvrADcaQAXKxLpPWPeDj1kvLAy9MimroQgwhA9XGx\/8YEBOrwwUdr7Q7D58suvDZB4R13MTp06jcMGzLGrf2a2e\/du9bq9e\/UyXiMRDo4+sHOvBAfXJASGFFaAwRwiVumZH0ewZDL+2bPncPnyiwZ4sdXCl+qCyYvlzz\/\/pEJX9PIxXMv8PcInw4RsmkuPHL14rBTlZAt6BtmKZdKkier1eB7owSLsbTNgla\/Jqk3mvvFizXPHc0ioI8zRY8dzYPbU5faFms+n31O+FsGNRQk8TsIy97tbt24qJMrKUbYCYRiaYdPY2BgVria46XCpFaxZGc8fW4lERYSjbf2qeOvotnQoM+Dsw9O7MW1wd7SsVRHlisWpSmS2eMkS4E6vx7PrJ2Ba9yYoHhehPKiEnrsd4Cief77X\/JzxRw8\/AwR+\/tWtPnQ+G4+H24tEIpHo9umeBzhe3HlhJ7wQKBj+5EWFXhmGQBnOYasRhtboHaPnS+eu0bvGQgXmpNFb4+npoQoBChYsgPz5HVTBAttLtGnTGi+88Lx6bkKKla5cSb\/AEeRee+11lVd24sRJHD1yVHnmzBDGKjx60RjuLFeuAgo6B8HOozbyRSxH\/sDecPIqjrDwGDRt2lRBHrdX4Pb446pq8eLFi3jzjbcURPE1zRdLDZU7tm9XhRgMG+bLl08djy5u0KaKMQoVAkdZeXt5qjAxq05ZzMD2K7Vq1lQVm4Q9evUIsTx3PIcMxzJkRs8XJygwFEhPHkOyzHHiPuQGyPG95ftKaKCXkIDMc0HQ1NDGVia6oIOVw8wfZI4gPW70tplz3GwhzXa5+Tb7w4UZz8W+gg0rl8LLBx9R49gIZu+d3KUa\/DasXBqVUhOwb+k0\/GPb6JkFDRxk\/9R2BXB\/nFqH88tHYFT7Oirs2q9vX\/VZzewzdTeJnzG+p\/whRFDjjxadD6mhLbfBXSQSiUSZ654EOF4oNLDxlz\/DNoQHggQ9Vqx8Y94ZCwqY60QvGisOCSwsFCDQ2NnZXTVWlxJoWLGpQCbAX5mrixOiDLAbOnSoAhO+ZnYuUoSOn376GW+99R6ef\/YFnDp5SkEcwYMwxjAsgYieMTfPENh51ke+uGOwK\/Ez8sWfQP7gQcjvmmDAQ5iCJ+bcHT1yBM88\/bSCGF5AsxL38cknLyhAZCEDqy6VJymjGILAw554Af5+8PXxVmOtWCnLAgq2S+H50GY+Tzxv2ni++LiYmGjlqSL4MMdv9erVyrvJQfT0lOUETrjfBAU+Rr+\/DOOy3QRDvyzEYHuP4KAgFDReX793hRwLqOIEHmulSpVUBakGMfNfs9ku09BmfozuBRcU4GdAWhE8uX0F\/mCY1AC4d44\/imFdWqNmmWKoVrIoDq+afa3njfb6WeDSHgVvtN9PrsWJ+UPRt0VtFC0cpX5EEEzvFen\/O238nItEIpHozuieAjheQPhrn9BGbxrBigUGzPNiYjpDncx1CgsLU8BG7xk9MvSqsV2H8jR5e6mu+7qqk\/2\/6Kmht4W5U+wPR68OL97RUZEK6MqVK6ug64033sHvv\/+RsTf\/6d9\/eSG7FuwIIvRO0FPxmQGYL7\/0Ms6cPqtalhDeCD3evmFw8KoHu+hNsCv+PfKV+tf4+wPs4o\/DIaAXnD1iER8Xh3lz5+LsmTMqL+2PP1i9l\/mFk+eIrztt2jTlRfP18VGwVqVKZQU\/NIaGaTxvPFYeN61SpYrqPLCalV5Jnk9WyTLxn42Q08EvWJ1bdzc31e6E55Xwx3YkDFnSg8fK2ObNmmHG9OkqJy87IgzQo0OPFL15PE8sAmEhAvclrnCsel917zY2ZOZ7qFufcP95bNnJbcuu8dzw\/DMPrnRiDA6tmokfnzuqIO3No9vRt21jVEiJV3N4j66d9x\/AacsE4Lo3ro5i8bHKo0nIvZfEz5c2kUgkEt053VMAx9wz5gwxDMnQHvO72NaDXiTmPPEv4Yxhr4iICAUdhA9asWJJKJ6aasBASQU29NQwL4oQw3YfvPAz1KaN+VLJycUU8BFY+Hpr16xVHjB6H8zK7GJGiKNp6HzxxctqYgThMDgsAf7hlRBSagn8q38Ju1L\/wK400v+mfgW7uMfh4N8dHl7BqGnAFiGOIWF6pWxh0Sx655gbxjYmhC16FelFYqjY7HGimY+Xxm1oPBc8fkIePZjpcFdJtUEhLBE+mVeWYgAeCzzo+WKzX7ZDYfNfbwOc+R6o\/Z43Tx2\/Pkc6FMf91LDG95MNl9kQmAUXrLhl6DPReN6gwABVRUpvIRvusgUIoY1Qx\/PIfaTHTR9DbsEbjUBIiA0OCkRy4UhsnDUGX1w4oODs9ce3okuzOiifHKdGi516ZNG18Gbhgfv1xBrsndYP7WpXQGrRBOVRJLSKRCKRSJRT3VMAR28W89lmzZqloIyeGA8PTg3wViAXEhKsQIIXePb5ImwQPOhJIRAQSmgEFG2ZXfS5jp45Pz8\/FXotHBuDIYMHqxw05p7lxAPB\/Dh6xZ577nnlNSRYuvmVQGRydxStdxxhDa8oeMtXSts\/yJfyMeyjVsHRoxh8\/MPx8MNdVPiVCeNZASPXczh7Skoy3FxdVGPgWOP1cgo2ZsDTUEcjLNEIvTRCDs8v4Y4hYUK1r68P3N1cldeM3kaGCXnOWJ3IKleO0yKMshiDuYCsxOU8W75nBG9CID1s7NvGdigBBkAzR5HeQL6nhDb9PnL\/rPY\/N4zHx30KCQ5CQmQIlk8cgo\/PGkBmwNlrh7egU5NaKJUYi2Y1KuDMpsU3BLhfDIDbObk3mlcthZLJRVU+4Y3C4SKRSCQSWemeAjhCACGG1ZO8yNMzViSjSpTwQK+MDoXSs0ZoI2zwQp9TgOFjGJbla9jly2fAhJt6vrS0qQo+6EXKjghb3JbhT4YFq1atDm\/\/GAQWbouyjdaifIe3LQDOsJK\/wb7oMygQPAAOTlFILVkZI0aMxrlzZzO8cNeKr\/Prr7+p1g7169dTEwdYjMFJEXGFC+eqZ8psBCieK+2xU6Hn6CgVeg4NDVF5iMyJYyUrw97MT6TniUPk2fi4Xr26ql0Hw6GcCOFunGcWkwRljPHi+0tvH71+ugXI7YQ2s\/GY+BkIDQlBTGgAZgzpoebPEtA49L99gxpIjY9C0+oVlAeORQxX+8Dx76unr47RUgB3fI0ao1W\/fArKliyu5oEKwIlEIpHoZnRPARw9OEzoJxQoeCtSRF1kbeGE923NvDyrbbQRSggN9OzZ29spjxKrG+kBeuSRR9S+ZMcL988\/f+OH739QANOlS1e4ugXAJ6IhyjZcidbD3kGt\/n8ipL4FwBlmV+InOCSeQ36fxnD2Lo5iKeXUwH42rLV9bUIiCwdWr16jigu4z\/nz51e5aQkJ8Zkec1aW1WPM58p2OXPgCGCESII125SwYpTvFb1o7MvG\/WJxBQGTwObn52uAUjBioqPV+8pzTyDUoV+r1zJbTtdltT2NkEgPHPeD4eCwAF8MfrglLh94JB3gHtusZt4ytFqvYinsWZym5qP+9dpZA+LOA6xIffk48MzOqwD307HVaoxWleJFULVSRVXwQc+sSCQSiUQ51T0FcMwjYzUnw3LBwYEoHBurPG3aw5abxudkWJB5VwzV0svHJH4WBXASAkOptrlwtkr3iv2Kly6\/jIEDBsLD0wAX\/xKo3m4POo37Al2m\/o3KvQCvGtYApyEuX+w+FAjoBDevwgYQlVAhZHpuNMTxL\/tz8dwQkli0UaCAgyoy4FB6ttS4EbDklvF1GMImvLGth23VL6tcOTPWy4A2FiUQ6JiTyFCsGdZsnzevjOBGry3hkR4\/ev+YV8mGwF2a18PFXWsUwDEHrnPT2kiKCUdqXCTG9uqAs5uX4uNz+\/DTC8fwx4vH8ffzh3Hl6UevAtyPR1Zidu+WSI6LVnDIHyPMDxSJRCKRKKe6pwCO3goOUt+8eXNGrpWv8vYwrMaLfm4aL+bM7SK0MWdt3NixqpAhIT5eVa+OHjUK77\/3nso7sxKhikUXr77ymrHtGLW\/3kGpqNJqG9oMewu9pv+O7tOBMl2BQhUMUGMBg5WpooZvYRe7B\/n9WsLVMwKVK1VUTXbZqoSvz9d56aWXVVUjPZMsPGBI0t\/fT3nCWGlrdYy3y+i1Yi4ivZccYUUI5n2+V\/RgVq5cSYG3LkCw9bLlpfG1CVPcHwIbQ8DcRx6DrmwOCwtVbUoaViuPM5uWKIBjI9+0gd3QoFIp+Hi4wcPNFZGhwShfPAk9WtTDyklD8eS6NHxnQBvh7Z9zj+Dz\/YswqXMjJCfEqkbRLN4QgBOJRCLRzeieAjh6sxg+ZAhTAZG3t4KTrABOe1ayu1wb1\/GiHhUVqZLxp06dqprHsr9cyRIlFCStWb0a3337rQFRtm096Hn7RTW55WPYmiQoPBlFyg1G66FvoOe039B92r9oPxFIbg84lLEAt6t2JR3iYrYjv29zOBQKUuDK9honT55UBQIfffQJ1q\/foLxYEeFhqtKVxRthoSEqf4thTKtjzMoyOzc3Omf8SzCj95IAVLJkiatVvzyf9BDSy6XN9jm0ZfU6N2t8PZ2vx88M94f5krbQxuIVmm6lQk8hK2ErpCbi8dVzFMD97\/njuLh7NbbPn4gR3dqiWc1KKFEkFhFB\/kiIjkDDKmUwpVtTvLrJoHQD4FjAcGndJAxpWQOpifFq4gdzA7ObSykSiUQikVn3DMDR08S8M1YuskEtL6psk8ELLi\/IVhdsGkFAw0Bmt62M6wgiMdFRqgKVg+LZTHb\/\/gNqCDm9SZzkwOa6X3\/91TUNa+kRo6eQj+HzhIbFIDSuAaq33YUeaT+jn8EAHScBjYcBhVtcD21Xw6e8X+ovOKR+jHxhc1DQpya8\/aNVSI8eLRYCHD58GAcPHFRhZVaecnrCyRMnlGeJQ\/HDDaAjiFgdY1aW2bm50TnjXw1K9K7xvdGFJFb5bPq2rWW1jsb1N9qGxm24P9wHDW30rNLbxoIXQhvPjxnaWHlqC3AsyoiPCMHKicPw\/oldqpHv5X0bcW7rUjUHdULfh9G2fnWUTymCxOhw1R+ue\/2KODRrAN7bORPPr5+INaM6o1V1AxBTkpCWlqbGkt0LUxhEIpFIdPfpngE4QhGnLbCvGL0mbDMRF1dYecIIBpldvK3MvM72Mdq4jhd8tuAgxI0fP17B4+uvp+8DvTYEgOXLl6sZoeznxbBpeiuPL\/HoozsVNDAE6+Tih+jUbmg+4EUFb7RmI4EK3a8gqN6V\/2DNBG9XIa7Ez3CIPwT7gL5w9y+FlOJl1Wszsb60ARhsS0KQq23sK6Fj1KjReP6551VbDgIc22\/Qu2R1jJlZZucmq3OW1Toru9H2ubFegyTfR35OdC87W3AjsGnT9\/mXpgDOONcstAjwdsfA9s2wfd5k7Jg\/GdvmTMImA96WTxqKtEHdMKRzK3RqVAu1yqaiXoXi6Fi3Iub2a4ltE7th+ZB26N6wMsokxqJsqZJqHBmne8g0A5FIJBLdjO4JgCMYsb\/Z3r170a5dO9WbjZWMbMrLC7TVxVwvy8yysx29R2zBQQgaPnyYGn7PkCVDo926dlXVkmw6y8HvH3zwgcpnYnHBxYvPqLFS9JJxSkH+gu6ITumMJn0voc+sf9FzBlCj3xVEN70Cl0omb1sGwOnbdqX+Rb6UT2EfMgZOfnUQVbiEGrTPofv0DrJykxBXoUJ5JCUVNaCtkfIQst8c9z8iIlxVdRJYMjtWvTw758xsOd2exsfczOO02T5WP5\/5eQnzOkzKkDI9bgRehnE1tJnBTYOaGeIYcqbRy8oxbMwjZENkV6cCqFwyCZ2b1c3U2jaogToVSqFmmRTUrlASraqXxcN1yqF5FeO5E6IRExqEWjVr4MCBA9JCRCQSiUQ3rXsC4FjtyXwvhi7Z6JVVlvSM0LNidSHPLSMMENIYQuvevbsCyB9++EFdeFlBWMkAA17cO3bsiAP796uRWW+99SZmz56lHsM+ZqqYwABO\/1DjAl57Nh6e9DOajgBS2v8Lj2r\/VZ9aAlyJn2CfcAYF3FMQGBShpivs2bNHTTDYtWunqi5V46ycHI3biZg+fbrqlXf69CkD8Kqrc8WGx\/Q8WR3f\/WAa5nSYlMDG4yWwWcGaXmY2vV6DG\/Mq+b7zvaOn19WAN7Zk4eeOo7zYAiWnxpFuLDBhVSu9puwlKBKJRCLRzeqeALhXXnkFEyZMUBdVjsvixAWGUbMDb\/oCb7XuRkaAIxgxhNa2bVsFbQQkFi188MH7WLRwoRrtxKrUdsb63bv3YM6cuWo\/Gb5knhMLCjivNTQ8HqEJLVG\/9xuIavIvPKsDBcqZYM3WSv2FfInPIZ9vdxQo6IKKFSth0aJFBiC+pRLfP\/roI9VOhMBBT1+vXr3UlArO1ty1a5cKFRIgCSOEGqvju5eN7432slkVIliBWmZGgCNYsaWJbijMFigclO\/g4KDayLASuU2bNqoJ8dKlS2\/KOC6MrV6YHykjtEQikUh0K7qrAY4J3gQSXvx4cWbolFWhvEDT26Iv5hrSrGAtq3V6ve0ybYSEZAOAWM1JDw9Dpd9++62xZ+kD41nAQHBiiJJVsQSlEgZQsehh4IABeOqpp\/DiCy9g9apVagJDQc+S8C35KAqV+QL5y\/4N+8yqT0v9Cbti78AufC6cPaKVt5HNcJ82Xk\/n2jEn8M0338SO7duxceMmnD9\/Qe0be+WxQSyhhB44ggnbZNgeW1bHTdPrb7Sd2Wy35X2zmdfZbpPVMp3LRtOju3TLDx0azQzasvK68bzyfWOlLvv70UtGj2ahQo5q0gdfg7NZOZqMUzRYNcpzznD5zRgbLX\/zzTfqs5NZ+xmRSCQSibKjuxbgCCm80F28eFFVe7LilNWXzEti\/hcv6rYXfNsLv9U6q\/Xm+2YjwHFgO2dhEhqWLVumKmH1\/n3+2WfYumWLmjLAXDOG2zj4vFatmtj56KNqfBahip6xrl27wNkzAflDRsCh2EsGpP2uYI0hU1uzL\/4l7AofhL1vRzUHtLcBiayA\/fTTT69e+Pn6DC1\/9uln+PjjT1RolwnxBAQCBz1vBDjCCsHHfFyZnQuz6XVZbWNr5m3185vNvK3tdrbLeO5punqU77k5PKqhjSCWGaTRdOiURm8loY2hZ4aW6aFkrzx3NzflZeO5jo2JVs\/dvl07zJ49G48\/\/jhefvll9b6zjQ3POX9Y3KzxPeJ7JxKJRCLRreiuBDhe4HixI4zQ+1beuGAzj4zeEoYGeVHXF30NAGYzg4CV6fV6G\/N9symAS0lGUGCAgoWFCxeqIgat31RfulfUTEuG8bhdsaQkjBo1SoV9OZuUhQ3vvfcuJk+ehLDIJOT3rgP7hOOwK\/FDepGCLcCV\/Bv2Sa\/ALnQaHD3LIDGxCLZs3oKXLr+En3\/6KeOV\/xOf\/7ffflfni\/ryyy8xfPhwlXxPQKHn0gy7tMzOhe1629tZme12+r7ZzNtbbafv87wzPGpbPZpZIYIZ0mi2AEejJ5LgxlAoZ7QS1jhyjPDm7e2FKONcVTReg3mWDE2zyODy5csKmjnlgmFrAS+RSCQS3S26KwGOXgqGTp977jmVe8YZpAxz8YKsCxcyMyswyMqy2pYgQa9NoAFmzGsjqJkBjqFUNuxlgcXo0WNUqLJbt644dOjQ1RynK1f+xQ8\/fI8tW7agcpUasHcujHyRa2GX\/C7sSv5xffg0ld63\/XDwaYnA4Gi0b98Bb7zxpvEcPxqQduOWEwQOjvpiXhzzuRjetTq222mZvQeZLSdg8lzTU0g419WjBDdzyw8NY2ZgMy+zWkePG987ng8WltDj5unhrmbbsoqXnji+HotUpkyerN4nNouWClGRSCQS3c266wCOXg49MoueELbC4MQFXXWqIcAKBGjm9eZtbJdrs12nt6cRKuh5Y\/iWEw6mpaWpsKhZ3F\/mo73\/\/kc4cuSo6glnOyOV9xmGo2euQCE\/5AscCYeEE7Av8e11AJcv7jjyB\/aGk0cCqlerplqW5CRnisUNBCLCG4srmCdme5zmYzQvN1tmy81m+zxZPcZqHZdxXzW0MUxNT5v2nmkQ0\/dvZAQ2Aje9bQy10+PGPnw+Pt6qKIGVpM5OTsqbS09ci+bNsXDBAhWmZwhapiKIRCKR6F7RXQdwhJX33nsPu3ftQmpKMjw83JWXxDbvLS+MgEEPEGd5soBi7NixBsNfNMgAAFSvSURBVKi9f13zVULcX3\/9iZ9++kntv22ojQD3zjvvYMb06Sjk7IeHfHsZAHc0U4Bz8O8Iv+Ak9O7d+2rRQnbE7d599x0FnQQXnjcm4lsd250wnk9Csc5rI7DZ5rTRrODsRkZ4Y94fq4IZHqWHjW0\/WEma38FeQRyfu2fPnlixYgVOnz6t3hOG6ZnbRkDO7nkWiUQikehO664DOFb5LV68WDXs9fLyQmREhPLKWOVxme+bl1uty+n2eh09WOFhYfDy9FDNeZnbZj2A\/IoCACsIICCcO3dWFTsUcA5GvvClsCv2JuxKphcy2AJc\/sAe8ApMUdtruMiOuB3Df8x9o9eQbTEISZkdm9XyG1lWj7Nax2UMjTK8zHw2AqWuINVtP6yATJv2wtl64jSw6WIEVo1yWoKTUyE4OjqqogQu42sOHDgAy5ctUy08nn32WVUNympdgrWAm0gkEonuRd1VAMe8NyaPt27dWuUt8YLMUJhV3puGA6vlZni4FSM00kPESQyeHm7o06ePCpHmJD+KcPDjDz+oHnJVq9WAg3Mc7OOPwi71K9iV+vs6gLNPfAb2IePg4ltG9ZZjFWv6sPysIYOv8+eff6j9YzUs4cW2B5zVMWZ2vszLtelwJ4GMnjSaGaz5OJ3LpvPZCG7cB0Kb9rRpb5sZzMygZrVch0f5eSCYcsRZeFgoAgMC4G2AvquLs5pXSs8jt+XrMxeQY89OnDihvLr8fDHcLdWgIpFIJLrXddcAHC+ozBNjo1Tmu7FrPT1fnHZAKDDDhQYM22V6uRkobsX4ugQPtgjxcHdT4TfmpBEEtDQEZAYDPC6OAZs3dx5i45KR37MK8hd9CvaqCvWf6wDOIflV2IUvgKN3ZTRp3Bjvv\/ueCs\/eCDboSWII9+TJUyp8yJYrzAVjbhmPJavzkdW5NP9lZShhjF4thrQJ1oQ0DXL8S2DjOm6jG+wS3OhtswUybVbLtGloS0pKQkJ8vHoveGw+3t4K2Ni\/jbAaZsAcX4NTMdhAeevWrWr0GSceMG8xJ55MkUgkEonudt01AEf4oJeKoEB44wWaAEJosAIMLstqudW6mzGCCOehEuA6deqEQwcPXu0FR68Yq0zVLeOvFWQx3Prmm29hyJAhcPOKRYGgXnBIeg52JX+7Dt7SAe5N2EWtQX6vmqhhwNLTTz2TLfggKLJCdufOXXB2KqRaZRCKtPcyq\/OR2Tq9nH8JaHwunbPGsDbhlueHkMh1NIZsCW2ZVY9amS3A6UIEQhtDpNHRUaoSOSDD2+bm6gJPT09VVZqamqI+I127dlWjxDjujGFuFiXo1ioikUgkEt1vuisAjuDDEVHsek\/vCnPfGAozw8edML424YQhO3bpb9WqFTZv3qxadWRX9NadOXNGhYUfKpSo4Mwu5cP0aQsWAGeX+jnsYnfBwbuBCjNyLFZ2AI4VlCywYN88Ahzzwgha9JBZHVtOjeeCYUl61czgRa8XYU2bbWg0O6ahTYGb9rZl9LFjxairAWwFCxZUVaQcKu\/j44OSxmPobZsxY4Zq2\/Lxxx9fV\/0rEolEItH9qjsOcIQ3et\/GjRunvC2s9mT7B8KAOb8qr02DI0OCzCXjEHN6etjM9913383Y+xvrs88+w\/LlyxXo5HOtgPxJz6JQ+b9gXzp9kP11VuJn5Es4CwffNgpkCGScv2pb+Wor5nYxQX\/QoEEKdtj0mN4yQpftsd2s8f0g0NoCGKFNm+26GxnhjeeXLU\/oNeSsW4aACxiwxgpSGqGNMEeP38iRI7F\/\/3689tprKjRNQCbg0tt2ozCzSCQSiUT3i+4owPGiy7DfkSNH1MWZQ8TZn4vgQc8RIcrsgdP3s2M5eUxW23I\/6BliVSNDg5xJyly9G4kwweN7\/bU3MHjQYETGpMA1rCtC6\/4PzhVhAJwFvNFK\/QP7Yq\/BIbAfomKKYsyYMWq6QlbhQK4jzOzZs0cdR4ECBRQEM7zJvLQbnYus1tkazwfDp2ZPm9njZrtML6fxPOqwKN9nFiEEsLGup7txfp3hVMhRwaeLs7MCNnpg2UqF\/QDZYJc5bTz3\/MwwNC3AJhKJRKIHVXcM4AgdrLB84oknVHEAe63RCAb0elnBw50wAhDhw93dXSXTs7UHG7\/eCB7oMWOuHIsKGjVugYCICggtOQ\/hDa9cBTg9PssW4hxS3kX+0DEIDEtWeXeffPJJpk1m6Xmjh+6ly5exaNEilXfGZrXc1+wUMOTUeD4IhnwdM6TpkKr5vs5jYzg0OipKFaWoPDZv76uD41k9GhwchGRWzBrP27x5c\/Tq1QtTp05V0MbPx9tvv63OJat\/CW787Ai8iUQikehB1h0DOIa9GAZbuXJlessQ44LOCz0rGAkJVvBgNl31mJ1tbS0nQMPXYfiT+0fPUcuWLXHu3LkbhjSZj\/X6a6+rnLmy5WsiuHBjJNU9gMA6V+BEgCvzH8CZIY63CXAFwtPgFVhKhW0\/eP99y\/wu5sWxES1DumxMO2HCBHUO3VxdFUQRhG\/kfcup6TCqLlDQXjcCG00vM4dGgwIDVREI94v5bAxHM8\/R389XTYygp61\/\/\/5qKsK+ffsUILPtBz2PDK\/z2G90vkUikUgkepB0RwCO4MHWDkw+79evn\/LIsJ8XL\/zM2bICB1vTLS148SdUWG1jZTcDNBXKl1eDzwkbBMajR4\/eMGGeExnOnDqD2bNnI6VEJcQU745ybZ+3BDjeLlDuP4izT\/kA+SMXwsWvkoJHNjf+7bdfr\/E68RzSI0V4e+7ZZ1V1LIfYh4WGKtikJ1NX8N4JgKP3jcDL6lHmtHGiBt\/j2NgYlCheXHnxCMMsXGGvtp07d+LJJ5\/EBx98oPLablS0IRKJRCLRg6w7AnAEjwsXLmDYsGHKQ8ORRwz56dCpho7MjNswT445VQQJM6jcDuNr0VvECllWdhI26BnKSoQQFi9wokRMvAE4NSahTt+v\/wO4DFij8X6AsVxDnV3xb5Avehvsveqp3mfPP\/+iaouhvVAEuT\/++B0fffihAT0X8Pjjj2PHjh0YMGAAPNzd1RSG3KxANRsBjtBsBjgrYw4eYZLwxupR3uf7xiKLBQsWYPfu3bh8+TL+97\/\/iXdNJBKJRKIc6o4A3PPPP49p06apnmGsMGTLEN7ODN643Gz00tG7Q89dREREth5rtY6W1eP0bRZYMAxIgGOT4ZUrV+Pzz78wQMraS0TA+vLLL1RuH8E0MqEWqrXehqYj\/kFA7Stw0KCWAXBuVa4gptm\/KGSAnFpmAJxd3GHk8+mgPFj0+HFIvU7cZ94b8+LOnD6Nxw8fVp7MRzZswMOdOhkw7Hi1EMSqAlWfD22267WZ19k+hsBMz6D2vPFvZgDHZruhIcE4ZhwD25wwl41wS4inF1M8bSKRSCQS5Vx5DnC8gDNkRgAgELFpL1uGZDd0Sg8QPXUREeEqp4od+NmbzGpbK8sMSjIzbstwH0GRFZMMo86YPkMNQv\/nH+vKUOb3PfPMRZXPFxwWj8LFu6Bh99NoPhLwNwDO1vsW0egKSnS8AudKGZ65Er\/ALvEZ5PMfoJL+161bh5deesUAn\/\/h559+UiB0\/vx5Ndvz4MGDqnntsqVLVQGAo2NBBU+EWoZ7c3q8ZrN6HM+\/LcBpiDObGeAijffqjddfV4UYUnwgEolEItGtK08Bjh6XwwZ0NGvWzIAh\/6vzOnXLEA0bmRm3IegRqEKCg1UFIysbNcBZPSY3jK8XHR2tepQFG9DJ1h4vvviiynOzApIvvvgS69dvUN43D79EJFedgtZDX0eT4YBH1f\/gjeZV\/QpS2l9BtT74D+BK\/g57DrsPnqSa1nI01IkTJxW4Mbn\/6aefugpvNIZPOYWAuWkc5E4PGG8TtqyO51ZMvwca4DIzM8DxPWKjZgmVikQikUiUO8oTgCPksPXDhx9+iBHDhyOxSIJq2MswaFbhT1vT+Vf02NEzxX5h4eFhOXqOmzF60pir5+PtZey3LwYPHoQnnjhvGjRvVvpUieEjRiIiMh5ewRVRsfkWdJ74LRoOBQpV+A\/eGEoNrn8FlXpcQd2BGQBnLLMr+RfsUz+DfcRCVa3JQo+NGzfi6aeexjPPPIOjR49chTfa5s2bVYNbFi4UKlRIhU\/pJbtd54TvAwHONmxqNg1wLP5ge5jXX389y152IpFIJBKJsq88ATjmOTFZnbDBylFWI0aEh6sLvVWelpVpzw9hjSE7jlgiwDGUSg\/Z7QQ4QmNSUlFVyODl6aGayz7++BF88MFH1wEcj\/W5555F02Yt4e6TgPDEtmjU8wn0nvnXNQDHHLiC5YGYZkCdAVdQf\/B\/AKfy40r8BPvo9fD08lUeS+YMHth\/EMePn7gG3mgbNmxQkEdoYk4hgfN2eN+0ZRvgwtI9cAS4V199NdNediKRSCQSiXKmPAE4hk7pfeO4rKioSBU6ZXiR4GUFCFamvW+cAsDH+vn6XgNwVo\/JLWPOHV+T0Mh+Zl26dMGunbvw2quvG8d2LZQQUk6ePIniJcqikGcJFC49CC0HvYR+c2AJcLEGwDUYcgUtRgMuldO9cspDx1mpsXvg7BZiAGtJBWjr16+\/Dt5oXM4Gwwzzcsh7dkPSN2vZBTgWp\/j6+iiAe+mll27YekUkEolEIlH2dNsBjtWG7KTPRHvO5\/Ty8kRikSKWXiJChy146GWEKI6yIhzkBOCsntNsma0zLycQEVjYnoMTBOgRY4sQhjR\/\/vmXDC\/cFbAq9YvPv8DKFSsRHBKF0ITWKNdoJTqM+iBTgEvtCHSeCnSaBATVvfJfPzgD4OwTjsPJpzxCQ8NUO5JVq1ZZAtyqlSvRskULA4wDEGRYZgCnl\/GvNttttGW1zgxwOufNDG86B44A5+PjrfIdOSlCAE4kEolEotzRbQU4hhOZdM8qSlZIurm6ICY6GpUrVbpmggKhQN+2Na5jPhdbeTDHi+FTtvKwAji9\/Y2ez2p9Vo\/jvvL1CST0wNWuVUvN5zx16hS++vIrBak81r\/\/\/ktNEeBUAb+ASJSpvxiNez+JbpO\/R6+ZQJ2B1+bAuVcFKvUE+swCHp4MhNRPr0RVXjh64BLOw967OZxcA9C4cVMsW7bsOnjj\/FMO2Cfg0vtGLxwBS+97Vsd1I8vqcXoeqhnizCB3FeC8vZXnkj3fBOBEIpFIJMod3VaA+\/TTT\/Hoo4+iQ4cOat4lCwB40dceIm1ZgQJhhHlzbExLQNAD0Znc7+RUyBLgbJ\/jVo37wKpO9lcjwHEyA8dWsYHuW2++qSCOCfrs0\/booztRuUp1+AWnoE7nY+g07guV\/9ZzBlBrwH8Al78cEFj3Cmr1v6K8c12mMpz6r4K6\/GUzAC7xeeTz7wf7gv6oWasO5syZo4DNDHCbNm3CpEmTUL58OXh6uKuqXqtjyG1joYR5HqptOxFbgHvhhRfU+RGJRCKRSHTrum0Ax4s153Oy8z49Zs7OzmpOJ2HM7CGiEbqswIvLCHv0fhEWtPeNFaFM1ncsWDDHHribNe4H959FDITIESNGKIB69tIlfPjBB6qlyA8\/\/Ih58+YjIqoIQuOboGn\/F9Fz+m8K0GwBzq0KENn4CuoNTge4rgbAFW3zL3xrXVGhVbtSf8Ou2FuwC01TAFexUhUFatu2bbsG4JYsWaI8fikpySpcyfNku+\/ZOSc5PW+2AGdrtgD33HPPZdp2RSQSiUQiUc502wCO3relS5eiZo0aqmcb+5nldLwTQY+5cmwbQihg7hvhjS1EOJ6pQIH8qpr1drcRobECllDiaxwH\/w4ePFgNXj937izeeuttfPfdd3j33fcxfPgI+AbEIbHCCLQd8S56z\/jTEuD8DFCLb\/mvKmBQAJcGpLT\/F+EN08Oo3CZfyuewi1xlABznxJZV0Mh2ImaAmzp1qsqPY0sWFofc7p54tgCnQ6a2ZgVwDDVLLziRSCQSiW5dtw3gzpw5g86dOyMsLAzeXl4qNysn8EZI4PYaFOj1ogcsvf+bE+zs7BTA5UUjXxoBjqFbf38\/lcfXq1cvNc+TYdQXX3xJNdl94okn0LFjR7h6xaJknbloN\/J9S4BjAQMnMpTodAUtx6QDXI\/pQLU+VxDV5D+Asyv+PfLH7VMAVzQpGT169MDKlSuvATiCJHMEWd0bHhaqblvtf26ZAJxIJBKJRHdeuQ5wDJH9\/PPPqrEsq07peWPuGMOg9KhZwYC+bV5OeCOY6TAdgSA0JARubm5wcHDI8MAVUMvMo7T0c9haZutsX9e8zmwsZGAIl7l8fE3CKQHu8OHDePqpi7j0zLNYvnyFOk7f0HJo1PsZdJn8A\/rM+scS4CIb\/4vqfa+o6tNMAa7kL7BLOK0ALrZwPNq2bYtFixZdA3DcD8ItZ7XGxqQXMHB\/b3Q+zGa1XVaP5Tr93pihzZwHJwAnEolEItHtU64CHC\/OP\/zwgypcYNiTc07peeOF3lx1amsaCmgEEMIbQ6e6VQUT8zlxgV392UyXYJiamqpmqbLbvxngbpdx\/xkC5ixU9jZr0aI5tm\/fjscOHcKpk6ewb+8+5ZWLLpyK0IR2aDfyA1W80G9OuodNAxxnnzLHjeOzWo6Gqk7lev5tPAxIantFDbdXzXxL\/gm7oi8iv2siIqPi1H6w+pXgduDAAQWQPF8EJXoGixZNvAayaPq+eVlumBmuaRretNkCHEePcQi\/5MCJRCKRSHTryjWAI7z9+OOPuHTpkmoZQo8Qw6cEMFZwmkEiMyMYEN5Y6MAQnW4bQmhiR38+Z906dTB69Gh07NABcYULXzfM3up5c8MIcOxDp3vZcT\/YHkXD1OLFi1UxRWB4aSRXm4Yuk767Cm9mgKN3zbvGFZTtcgUdJqavo\/U2AK7FKKB4x3\/hUTUd4PKV+hd2ye+igFdl+AUloGKlqqqQga\/JvnrsC0eoJFDy3BCkrPY9t80McHx\/NcSZTQGcCp8TuqWNiEgkEolEualcATh6VRgee+WVV5SHiJ4xNm9NSU7O0VgnbkfYIyjR+0Z4Y96bagYb4K\/6ry1csAAXLlzAqFGjVENgswfO6jlzy7hvfB16AxkWZi+7+fPnq7YeG9avx7Bhw1CE+xNfH7U6PYbuab9ehTMFaLOAuoMA18pARKMrqNr7iur9Zl7fdhxQopMBcNU0wAF2KZ\/CwbclnLxSkJRSVsErAY5ezvHjx6NoYiI8PT0QERGhoNdq32+HsXCE8Kh7wdkaAY7vDVub0BP78ssvyygtkUgkEolySbkCcPSsfPLJJ9i1a5eCLycnp6uD6um5sgIAK9N5b4Q3enHYMiQ4KFANaOfttLQ0PP3006rClbcJCRzTxLyz2w1wfH7CKL1ODFdy\/yZOnIitW7ditgGtrVu3Rlh4JBJK90TrYe+gx7TfrwE4WqNhgFd1oFi7f1W4tPu0\/9b1mZ0+kaHUw+kAp3LgaKlf4iG\/\/sjvUQExccUxZMgQ5fHj6zL\/LSoyQkESPYPZ9XTmhtHbyPfaNg\/uGoAL4zB7DzX7VmahikQikUiUe8oVgPv222\/VBAJ639S4KXd3lVjPisjsghW3I4Cwwz\/hiN43QhtzqArkz6+ggD3PCAJfffWVgiZ6w+jt42PyAuA4i5VeJzYkTk4upryAmzdvVmFNHqt\/UAyKVhiJzhO+vgbctDUfld77jd639hP+y3+jZQZw+VK\/Qb7gCcjvWRlhkUno06ePAmW2E+E+hQQHKUiiJ44AbLXvt8MIcDzvWQEcc+D0LNTXXntNAE4kEolEolzSLQMcJxAwpEmIIYCxYS+9QVYNezMzAgE9dYQC7X3TAMeRWY4FC6BIQjxGjhiB48ePq5Yd8+fNU4UM7H1GqGKbDz6P+TnN97Nabl5mtV4bAYnePkJjbGysGiDPPLS+ffuqFiPu\/iVQst7Kq5WntsactyqEN+Mv4a2vzXpCHCcz+NfOgDeGUYv\/D\/mit6CAX0sER6SgU6dOang9Z7GmD9j3VeeglHHOrPZZH4\/5+DLbxmq51TKa7XulzQxw9MAxB44A98Ybb6jPikgkEolEolvXLQPcxx9\/jLlz56qqU4IE850IOVlVnVoZAYwhVzMU0IvHUCxz4JjnVcyApO7du6tWGpMnT1agwNfkYwhXVs+bm6Zz9Jhvxvyuxo0bK69jq1atEB5VFCFxTVCj\/YFroMxshLaHp1jDm7a6A68guD7gUDYD4Er8Coci52AXMBB+oaVUgcg8A16nT59ugGSgyg1kmxaGM62Ai6ahy2qdthuttzWGkwnOfK+0XQdwxjkiwLHZ8ltvvSUtREQikUgkyiXdEsDxgswQImGNRQsMd9Jrpr1hOTHCEcOQhDiG5jTIEeIKF45VlYwMFUZHRSlw4PB2huj8jOUM42mAs3ru3DS+Dj2MPF7uWw8DKAmsPkHJSKw4Bi0GXrYEs+waAS66yRXVbkSFUUv+Cfvk15EvcCw8A0qgerVqqnkvQ6nubq7qHNATSY+n1f7eDtMApwfa830itOm\/ZoDz8U5v4vzOO+8IwIlEIpFIlEu6JYBjThNhIjIiAi4uziq53xzOvBnjYwkHBDl69Qhn9OzQE8dWGe7ubnB2clIeuYIFC8LbgEYCQ07y7W7FuH\/MvfP1TQ9dli1bDjGFi8InpBIqNt+MzhO\/sQSz7BoBLr7FFbhXzciD40zU1C+QLzgN7n7FUcKAxqZNmypPoIuzs6p8pfctL\/PfaHz9GxYxZAAcw83vvvsu\/v3334xPjkgkEolEolvRLQMc53NyPqmrqys8PDwUaLGSNCuPGJdnto6eOEISH09IYGsMeuPo7WJLEeZTeRgQxykM+fLlUwBHzw8LDPhY2+fL7LWy2gdbM2\/HfSNQ0gPHaltfvwC4eccgPLENGvY8m9G81xrOsmOcjZrQ0gxw\/8KuxK\/IF74Ebv7ljfOboI6XvfF4vnmb58n22LM6Pr0us\/W0rNbRsg1wPt7KY\/nBBx8IwIlEIpFIlEu6ZYDbsWOHmv+p54Qy54lwwQs7w5xWIHAjeNCmIY5ASG8cwYkeJ+agsdLVwcEeXl5eKoSYWb+5zF4ru\/tAM29HgKOXkSO18jvYoaCjkwFwsYgr3Q8tB71oCWU5sTZjgeR2\/01juNoPLnoTnPzrwi8wSnn+ePwspuC+WHnf9PFZHWNW67RltY7G850dgPPzTR\/+LwAnEolEIlHu6ZYAjg18eWFmVSR7kpU2Ltxurq6qEpWJ9YQuQpzuBWcGh6xMQwJv69w43R+OEMfqy2ADXhwLFlReKMKjBjjbx5ufM7N1OTWGdyMiwmFvlw\/57B3h6F0FJesuRvtR71tCWU6MAFemyxX41soYp0UvHCtS4w4jv18bOLqGqtAxjbllPC\/mXnvcP6vjy+q4M1uelWmA09MybE0DHKtk6T398MMPBeBEIpFIJMol3RLAUX\/88YeqRH3yySexYcMGdOjQQVVHeni4K8hKTExUye5ZhVRvZAQzPp6J+iwYIBgWSUhQg+0ZumVolVB1s8+fUyNQxsUVhoO9PewcnBAQ2wJ1Oh9F18nfW0JZTowAV67rFfjVtgW4Y8gf0B0OTpF46KGH4OjoqEApMy\/n7TS+HkPWetwZw7i2Rk8pPYS+Pj5qP9l8WeagikQikUiUO7plgKPoWeGg8s8++0z1aZswfrwK7bHFBStT2Q+Mg9YJWWZvUU6M0MDHEp7o\/WHojj3i3NxcVQ4eYSKvQIb7QTBl+LSgcyASK4xEm2Fv3nL+G63jJKB63ysIqX8twNknPg374DHI55QIewMceV7Zi80qbJwXRnA0A5xtCJVQzaITtpUhwH\/++ecZnxaRSCQSiUS3qlwBOC2C3K+\/\/qrCqsuWLUPLli1VKI0gx8IDViMyDJpZwcGNjICmQY7wEhISrKpSdbj2Zp\/TanlWRm8gPYDOrj7wDqmEco1WosstVp9q65qWXsgQ2eRagHNIfht2EcvwkEt5NVqscGzMLXk1b2RZPS\/XmQGOHjZbiFMAFxSkjHmMX375ZcanRCQSiUQi0a0qVwFOix33v\/76a5w4cQITJkxQHjP2a3N2dlJhVeZEcRkLAsygwNs3Age9np44FjMwjMq\/9MhZeffMjzHftrLsrONfhnKjoiLh6hmOhHJDUaPDfnSb8qMlkOXUMgM4u9TPYBf7KPK51zag1V1BEwFO5\/3Z7rvVMvPyzNZnx\/g4W4Cj2QIciy3oheP7IgAnEolEIlHu6bYAHEWIY97TyZMn1eSAhx\/uhIjwMHh6eKh5qQxBam+cBokbQYV5PeEvMtKAKBcXhIWGKGjIK4Bj8r6a+epbBOUbr0GjPpfQY9qvlkCWU9MAF2UAHMGNEKdALvVzA+B23lMAx3MUFham+tZxfq1IJBKJRKLc0W0DOCasE+K+\/\/57NYB+586dxoW\/gbqgs8CBkxXYM44QoEOBOTECXGxMDNzd3JSXh149M8xkZRpCrMwWVGzXERIZLmRul19oSeV9azP8HfSa8YclkOXUbAHuqpX4Gfniz+AhzxZwMaCVoWkrgDPvr15mNtv1WZntY82Pz04OHAGOkyJat26tPLIikUgkEolyR7cN4LQ4Pol5cQyhnTt3ToVUmdROAGIT3pDgIDXZgGFJwpEZILIyAhwrQdkPjTDIEV63CnBZLdfG0G18XBw8vQIQUaQpWg15DT3SfkHf2f9aAllOrfcsoPVYILE1UKCcCeBK\/QP7Yq\/CPqCPyr1j3l9mAGc+Dr3f+r6t6fVZbWNlVjlw2ghwatxYQIDykj7cqRO++eabjE+ESCQSiUSiW9VtBziz\/vzzT7z00ktYuXIlunTpoi70rKZkM14CSbmyZRUYEErMYGFlBDi2qvDy9FTd\/gmB2XncrRifn6CpvIg+MShacTi6TPzOAK8r14HYrViHiUBye6BgeRPAGeaQ8i7yh4yGk1uYmkiR3XN1O4wgy5YuVgBHY2UwAS42NgZ9evfGt99+m\/EpEIlEIpFIdKvKU4CjOL2BLSXOnj2LuXPnolmzZupi721AXGhoiPKkMcfMnBtnZfTWsaEvZ5IS4hhSJNRZbZsbxn3hPhFY6D0MCK+Ais3Wo3ta7uS+mY0AV7wj4FzpWoCzT\/0I+SNmwNE9QfVXsxqhlVfGc50ZwPE+31P2A0xMLIJRI0eqULpIJBKJRKLcUZ4DHKXDqixyYFh1zJgxapoCk\/PpjWPYjXBGYNJhVUKDDt\/p2\/Tg0cvDSlSG7KygTz9Gm3mdXm+7zMoISgRL5u15enojOrktmvS9iB7TfrOEsFsxAlzZLoB3DZs8uOLfwCFqJfK7l1TnKqs+cJkdc2bHm9l2mS23BTizMR+RLWPYQoTv47Rp0\/Djjz9mvPsikUgkEoluVXcE4Cj2jPvtt99Ubtzp06cVxLGXW6ABZAyrMkRIqNOjoggOZiNAsHUIE+U5jYFjpWzz6DRw5IbxeQkrTMp3cQtAYvnh6DzhK0sAu1WzAjhViWoAXL7orXjIrabqBcccNJ4HvY+2oGVrVsv1sswek5lZARyBmn8JbVGREar\/H2GOnlYBOJFIJBKJck93DOAoXanKi\/tzzz2HmTNnok7t2moYvo+Pj5q0wHYjBBXme5lhhUbgCw8PU02C+RgChS3QmLe\/FWPBAPPsuE9OnklIqbkY3dN+sQSwW7WsPHB2cY8hn3c7NUqL8KTz4LiPPF5ttvuv12e2LLPHZGbZATiGUNkqZvHixfjf\/\/6X8a6LRCKRSCS6Vd1RgNOiN+6XX37Bm2++iU2bNqFbt26oYsCBj7eXGlZPOKO3jTlfZg8bvXNsJcLeciwsIEwQtDTE5JYRkBiuZKEFw7UBkbVQpfVO9Jj2uyWA3ap1mQpU63MFQfWubyViV+Rp5PPvp4bZp6am3rE8OFuAY+4bAY5\/mcfIYf9s2syK43Xr1uHnn3\/OeLdFIpFIJBLdqu4KgNPSzX9Z4LBx40ZVqcpcKubFMZ8qsUgR5XXTXifCi65EpbeHHjKuswKOWzFWXBJOQoKDUcjZE\/Fl+qNp\/+fQe+bflgB2q9Z9OlB7wBWENUyfxnB1IkPJ32Ff7A3YBU9AgQIF1LEzbHynAU7DmzYWlLAghQBH8N29e7cCdJFIJBKJRLmjuwrgtFjkwLDqhQsXMGrUKDUYn7lxrLzk2KxkA9QIDwS45ORiylPn7+er+rOxkMEKOHJq9PDp24QkgiRfv6BLKMrUX4rOE3Jn9qmVEeDqDU5v5nstwP0F+9TPYB8+X3ngWOzB80CvpHnf88Ky8sCpJr4GvNEIv8ePH1f5jiKRSCQSiXJHdyXAUcyPY6Xqhx9+qEJwrVq2NACtMDw9PdX0BYZVy5Yto2COAOft5amWccaqGTR0uDWz2\/p+Zsb1zMFj6xAPTz+4+pVGjfYH0GvGX5bwlRtGgGs6Aija5lqAU39L\/A\/20etRyMldQS1DlIQp8\/7amu3xWK3P7nL9PFnlwLFSl9MxgoODlHfw6aefxh9\/\/JHxzopEIpFIJLpV3bUAp8WwKitVn3jiCcyaNUt53dg6hDNQGVZlFaqbq6uCOg5PZ8jOFjpuxQgqBBNXV08UcE9BbMn+aDHwBUvwyi2zAjgNcXal\/oR93GNwdC8KL08PlRtoO4osMyCzspxsazYrgNNGbyWLPRhybtWqFd566y3V\/08kEolEIlHu6K4HOF2pyua\/R44cUSFVQlxoaKhqN+Lp4Q5nJycD6JwNaPBB1apVLYHjZo05dcytK1jIDQW9q6JopUloPfQ1S\/DKLcvMA2cGuILuiQpaCZd3K8CFGe9R+\/btlReV76FIJBKJRKLc0V0PcFocw\/XVV1\/hhRdewN69e9GxQwfV7d\/V1QUODg7K2E6EzXZzK6mfoEIgJJA4OnkgIKYFKrXYik5jP7MEr9yyzDxwCuRK\/gm7hLOw96xvQKU3ipcoqfL+8rKQgeclq1Fa7MnHNjDMV+zatavyoDKvUSQSiUQiUe7ongE4it44ghzHMh07dgyDBg1SPcecnZ3x0EMPqea2DCla5YSZASS7Riji8wUEBqGQazCKlB+O5gMvo+dtmL5gNgJcqzHp47RsAS4fAS7xOeTz7wv7gn4oVixVhY1zq5Ahu+eKnkk9zF4XMGgjuHE0GnMS+\/Tpo3rAsVWMSCQSiUSi3NE9BXBmMSmeyfGTJk1SXjd6fNhag0BHuNDgdiOAy2w9lzE0mZRUFO4e\/vAOroByjVagy8SvLaErN63nzPRmvuW6ZgJwSa\/BLmSKAriEhKLq+HX\/u6yO9Uamz8WNnoPrrQBO\/2XolEUlrAoeOnSogm7Ct0gkEolEotzRPQtwFBPj2fx32bJlygtVyLGgqoBk2w8zjOTEzJDCitaY6Gi4eoQhoewQ1Op4EN2n\/GgJXbltnadkBnB\/wS75fdhFrjAAzh\/R0YUVNDEvUO93VpbVNvrYs\/M8VgDHUCr\/hgQHqZYrxVNTMWmiQaIikUgkEolyVfc0wFE\/\/fSTGojfuXNnNROVYTtOaCBkmIEkp8YwLMdAsbLV3TcBFZqsQ7sR76H3jD8tgSu3LVOAM8yu+PfIH7dHAVxQcKgqsiDAWh3H7bKsQqg8ZyxiYP++2bNmZbxTIpFIJBKJckv3PMAxPPfyyy+rfDiGUTkEn+Bwq0n9BDiGY719g+EfWQuNej+DLpO+R59Z\/1gCV26bLcBdrUKllfwF9gknFcD5+wchLi5OwZTVcdwuo8fPCuB429\/PTzXxJeQtX748450SiUQikUiUW7rnAY65Ve+\/\/z4mTJigwp1sIEuQuNWkfuaUMRzr6R2EiKKt0FZ53\/5C39lXLIErt637NKByr2s9b1dhjnlwRZ9HfpcE+PgGIioqUo0YszqO22UEOObe2QIcw6gEabZ5adasmRqJJhKJRCKRKHd1zwMc9dlnn2HJkiWq5UdAgD9SU1KuApxt7pYGEKtl2ui9Y\/4bB7J7+sagaIWh6Dzx2zyDN1q3NKBST2uAy1fqX9gnv40CXhXh7B6M4OAwVS1rexxWx5ZblhnAFS9eHN7e3iqU3alTJ+zbty\/jXRKJRCKRSJRbui8A7ptvvlED03v06KGG2nPIO\/uUmSHtRqbBhLfZV40eLeZy+YeXQ8Wm69A97RcDrPIO4LpOBSr2sIK3dLNL+QT5fZrBvlAEfHyDFESZAcvq2HLL+JwEXI7xMgMc\/yYnJ8PT00N5L\/v3749Tp05lvEsikUgkEolyS\/cFwLHPGAffz549G5GR4SqkeLMTGeh9o2epaNFE+Pj4ISa5DZr0eQY9bnPvN1vrOQOo3hewL5Oe93YtwF0xAO5T5PPtqgDOw8NHeR31MWjIsrXMlt+MEeCYa0ho08bwaWIiJ0S4IrlYEsaNG4dnn302410SiUQikUiUW7ovAO7333\/HO++8o8J1TOin54wVpCxE0MBh9iBlZtyOoVfCCOd4evqEI6XqWHQe\/5UlZN1OI8DV7A8UqmABcCX\/hn2xN1DQpw4KOHqqcWIc6q+PVx9LZset12W23myZbcOqV55jDW7aeP7dXF1QunQpzJs3D++++27GuyQSiUQikSi3dF8AHPvBcVzTk08+qSDC399f5WKZJzJk1whwqampqpeZs5s\/EssPuyMA12UqUKH7fx64q1aKfeA+hF30RhTwKAU3d1+EhASrHLjsAFl27UbPRYBjCJWvq8OnPOfMfXNxdkL5cmVVfz7mJ4pEIpFIJMpd3RcAxzFN7Af3xhtvqCa+AQbAJRUtenU6QU5Me+DCwsLg4uqBmJQOaD7gRfSc\/oclaN0O4yQGjtIyXvoaz5sdm\/iW+AH2CaeQ378dChTyRVBwCIoax8qQsdXx3KzdCOD4egyhMgfOXMAQHh4OFxdn432ohs2bN+PHH3\/MeJdEIpFIJBLllu4LgGMrEXrh6O3p0KEDwkJDULhwrOpDZgUfWRlz4NgImM1x2Q7DJ9iAk3pL8rQKlT3gavYDwhtdO8zersT\/1BxUu5DJyO\/M3DcPBW\/sx3YzsJqVZQVwXMdzRO8bYVcbAY5tXNzd3dV53Lt3rwpvi0QikUgkyl3dFwBH0Qv3ww8\/qNmoRYokICI8\/OqQdwKHLZBYLdPLGXrlYxkOdHYNQGBsUzTr9xy6TPrutjfy7T0LaE3vW3vAtbLJA1fydzUDNV\/YPNi5loVToUIq34wgZZv7pv9qMx\/fjdZpM68zb6+tcuXKVwFO578R4Hy8vVUOYrt27XDkyBH8888\/Ge+QSCQSiUSi3NJ9A3D0wv3yyy\/Ytm2b8kgFBQUpwGBLEAJHdqDEbIQihgWZT+fuHYuStWajXvez6DblfwZo3T5PXOepQN1BVxDR+EpG8cKV9Pmnxd5Q80\/zuVVCwYIFERoSoipB6eni\/mb3uGzN\/Bj9HHpZVs\/Hc2wLcMwdZAUq27gMHjxYVQaLRCKRSCTKfd1XAMexWs888wyaNGkCPz8\/FV682bmofAxDsAnx8XBx9YR3UAmUqrsA7UZ9gN4z\/7aEr9ywNuM4QusK\/GtnABzhLeWjdM+bWzk4FHRHQEBArsx7vVkzA5zOfyPIFUtKglOhgihfrhymTJmCS5cuZbw7IpFIJBKJclP3DcBRhLjPP\/9cNZBlZSYnKRAy6KWyApEbGR9Xvnw5hIaGwdHZB+4hTQ2IW4L2I9+zhK9bsb6zga5pQL1BVxDV5IpqH5Kv1D+wS\/4YDwVNgINXXTi5hRnwFqg8XXrSxJ0wnhcWMGh4o9EDR89bgfz5FeCtXLkSr732WsY7IxKJRCKRKDd1XwEcxWrUiRMnIiYmRk1luBXYIYiwqpU5dU5OrnDxLobolG5o3PvJXPfCMfdNe998a15Jbx9S4ic4FDkHB89acHCOhZu7H2KN42L+mdX+5pUR4NgDzgxwzH9LSEhAfgPgmP+2fft2vPfeexnvikgkEolEotzUfQdwv\/32G1atWqXCeH6+vgoqGAq9mXAjH8NcuDKlS6uKVDePQHgGlkT5xqvQadznliB2s9ZjOlC19xVENrkCp4oMnf4B+6QXUSB0NAo4h8LZ1Q+hoeEGLJVUY8Ks9jcvTJ8T3cRXW0pKioJmBwcH9OnTB0ePHpUecCKRSCQS3SbddwD3xx9\/4Pjx42jbti28vbxUNSo9VuZq1JwaiwUIgsyrc3TyQnjRTqjX7UyuVaT2mQW0Gw9ENr4Cl8qAfek\/kK\/YO7CPWIwCrkXg4uKqQsIlihdXQ+St9jErM8PXrRq9bwRiXcBAY\/iUM1BDQkKUB278+PF4\/vnnVVWwSCQSiUSi3Nd9B3B\/\/\/033nzzTYwaNUoBV0CAvwqjai\/czRjhjxDHHC\/2XnN0T0CxanPQeeI36Dv7X0soy64x941TF2r0hfK82Zf+WxUt2EVtgJ1HbRQoUEA1x2WIUlfU3sgyg7XcgDgCHCHStoAhKSlJNVB2dnbGkiVL8NFHHymYFolEIpFIlPu67wCO+vXXX7F69WoV0vP19VV\/CR3aE3UzRnDh6Cg+l7u7B0IL10HNDvvRPe1XSzDLrnHmaZMRVxDb\/N\/0vLfUz2EXuwsO3g3g6FhI7T89iARQ7oPVvuWlEWaZF2gGOHrg4uPj4e7mptq3MP9NJjCIRCKRSHT7dF8CHKcyHDp0SE0noPcqMCDAgKBKlgCkPUtWy823aYQoVl+yOMLFMxpRxQeg5ZA3DIj75aY9cW3HA6UevgK3yn9nwNujcPDvggIuMfD29laeN3OjXrNZLdOm9zmz5Zmt15bZOu4LgdI8QksBXFwcXJydlTfusccew88\/\/5zxbohEIpFIJMpt3ZcAx3YiFy9eVM1kCRfMhSNYWCX\/ZwYz5vv6NgGQodTYWFaE+sA\/vAqqt91jQNyb6DX9d0tAy8o487Th0CuIafo3HEp+qzxv+YMGoIBbMRRy8kBwcLCaOWq7b9oyW07jOqv1enlm67Vlto4AR0+kBjieV4aoeU6cnAqpx505c0Z5QUUikUgkEt0e3ZcAR7377rtYvny5Cvl5uLurViCEL1sgyQxm9DJCG59DG\/PQmO\/lZUChs0cUYkuPQp3Ox9WYrZx44XoZ8NZpMlChO+Bd\/Q\/YFXsNDgFdkd+9DPI7eisYCg8LUwBHTyJfm\/ui91Pvn75va5mtMz\/Oar15G6vluoBBwxs9hJwbGxkZaeyzE3r27Ilnn31WZqCKRCKRSHQbdd8C3Pfff48TJ04ooPD18UZYWCgqVqx4FUQIQ1kZPU302BH6OPWgQvnyKFu2jAEsqYiKioSbmyvsHNzg7FsRpestQsshr6PntN8sYc3KHp4CNB4GxLf4CwVKfACH6DUo4BqLQk4+cC7kCFfngvDz9UFikSIobcBSxYoVFMwRILlvej81bJlNH2NOzOoxXGZ7Tpj\/Rq8mwY2eN8Js4cKFlbfQxcUF06ZNw1tvvaXC2CKRSCQSiW6P7luA43D7Dz74ALNmzUJ8XGF4e3kiJTlZeZAIQQQRGofWV6tWVcERQa1K5coqx4sTGHR1JQsXOKDdx9vTACsnOBZwgLOjHVwL2aFAQWeExTdBlVbb0XHsZ+g7+8ZzUvvMBpqPBEp0\/Bc+Vb6AfcxmOHqWhJuzIyL8HZEU7oTogILwcLaHk6OD2vfQ0FCVZ0ZwIkxyX7nPLM7gMRE2afTW0QhbZjN7EWnmdfoxNP085vPEc8TXYh4he+KxYIHGsClzDDkv1tPTQ+Xs7dixA1999ZU6\/yKRSCQSiW6P7luAo7799lvs3bsXrVu3ViFPAkZUVJQCsoiICGXsXcZWI8yTc3N1hbMBaBwWnz+\/PfI72MHeLh8eeughZQ72+eBUwA5RAY6oluSKmsVc4OteEF6enghPaIr63U+j14w\/LaFNG+Gt81QWLvwLz6q\/wy7uOOx9Whtg6Igy8W7oW88b8zoHIK2dP5qXc0eQl7Evxuvy9bkv3KeCBfIb++oCfz9fhIWFqeNhnzrCJhvqMrzJYovyBujRmLPG2aVmozeS6\/RILD6Ovdz4HHwuwpk+R0GBAcqL6enhAVcXZ7UP+pzQ\/u\/\/\/k\/1f4uOjsZTTz2lmimLRCKRSCS6fbqvAY4gwXmcCxcuVHBRsGABFCpUUA1cL+RYQEEHJwc42Nsbf+3hWNABHi4FEOjliHA\/RxQJc0L5BBc0KumKDlU80N+AqxFNfTC9QwAWdw\/C1HaBaFzGF0UjXOEfGI9ilcegxcAXLcFNW7dpQOnO\/8Kr8tdwSHoGdoHD4OQahoRQJ0xq7Y\/lvYKxdUgoNg0KxZIeQWpZz1qeaFHeB1WSPFA03NnYvwJwKmgPe2O\/eQyOjgXh7ORowGchuBgASshyd3dXPetuZNyO2\/NxLurxhdRzXXuOCLP2KJDfAQUNsC1kQOxDD\/2fynnjeaUXsHfv3li2bBm+\/PJL\/PPPPxnvgEgkEolEotuh+xrg2NT366+\/xqlTp9ClSxdUrVIFCfFx8HBzgWshB3i75keRUGekRLmiVKwzKhVxQa1Ub9Qr6YPm5TzwcDVPBW3jWvpiXpdArOwdjEcGhGD7sDDsGhGG9QNCMbp5AGqmeCI4wA8RRZqgVof96DXjL0t4Y8+3FqOghtUXTL4Ih\/CZKOBZAcHeTmhWxh1r+gZjh\/Hce0aFY8\/IcOwcHoYtBswt6xmEtPaBGNzQD52qeaFRKTdUiE\/f70QD6OJDnFA4pBBiggohwgDPYO8CCPYx\/mbXjO0Zuo00LCawkHqu2GDjuYz7BNnoQEcUNu5zebwBmsUiDEB0ckCAv68Kr44dOxZ79uzBiy++qIoXWAUsEolEIpHo9um+BjiCBIGCUwH2GoDBCQGdOnVCZHgIAr0KolikC7rV9MXwpgEGpDFsGYCZnUKUze0chMXdA7GiVxDW9kv3ihGudhvgttcArH2j0wGLHrOHq\/kgIdwNfoFFUKL2bHQa9yV6z7we4jhxoXqfv+FV6XNVtODgXR\/u7v4oHUvvm186vBngpp+ff3mfyzcODFEAuahbIGZ3CsCkNv4Y0SwAfev5oksNb7Sv4oVWFTzRsJQHahhAWaWoK6okutzYjO24PR\/XtKyHeo62lTzRuqInGpV2V9bMWN7SWM5lXNehircCxdjoCHTo0EHlvX388cdqdJbkvolEIpFIdPt1XwMcRYj7888\/VWjv7bffVhBXumQqIgJcUamohwI1wtlOE5hZGddZGeFqggFf9Uq4IcDbDSHxLVGz0zF0nfyjAW3\/FTQw963V6H8Q1+QrFCy8GXY+HVHQJRyFg53QpboXNg0KsXx+bbb7Q7DbNjRMwSU9dAu6BGJWxwBMbhuAMS1DMLyJL4Y19lE23GS2y0Y09cXYVsGY0tYfMzr4Kzic83CAus1w8VBjm6GNuJ0PRjf3wRjDRjfzRWKoE5KKFEb\/\/v3xxBNPZJxtkUgkEolEeaH7HuBsdezoUTSoXw\/Bgb4oHeeGpT2Dr0JRVtBku04bQWp9\/xCMb+mL4tGFVD5bWFJftB3+9tVh92reaRpQqduPsIs\/jgLe1VHIJQRB3i5oWd5DAdjukWHXvJ75Na1eP7vL9HJttvfNy7XxmLYMDsW09v7quMa1uNYIcEUMgCsqACcSiUQi0R3RAwdw586dQ7t2bREc4IvkKFcs7Bakcs5sQcYMN3q5+bbt\/eW9gtCpmg+iAgrBw68oKjXfqLxwfWb9i+7TgToDryCsxmU85NMJ9o6BiAt1Q+sK9AAGqtfXz6ef23zfarntMvNyq3V6vf6blXGbGwFcTIAjisTHCsCJRCKRSHQH9MABHBPthwwejNDgQMSHOiOtfYAKg1qBjNkyAx+9fMewUCzsGoS6xV3h6uqFsPjGaNr\/RXSZ9AOajvgbCQ1fQcGIcXB0iUJciBvaVPTE7IcDsH1o6HXPeaeNx7RtSCjmdwnExFZ+WQLcoEGD8OSTT2acXZFIJBKJRHmhBw7g3njjDUyePBmREWGIDHDC2BZ+KgdOg8vNGr1omweFok9dH8QGu8M3MAGVW2xGgx5nUbTJq\/AotgkFvWvBx93ZgDw3jGnuiw0Drs17u9V90JYbx7LNAEsWTBDguK\/MfzPnwGmA47xZ9n4TiUQikUiUd3rgAO7999\/HggULEBsTjTA\/Jwxq4KNag+QGPLEQYnqHQNRO9YCPtz8ikvshudpU+KSshkNgb3h4hqJ4tAuGNPLB8p5ByvNnfvxdA3CqQOI\/gCO4jWqWbqOVpQNc0SJxGDJkiACcSCQSiUR5rAcO4L744gusX78eiUUSEOJbCN1qeGJ1n\/RCBiuYyamxoKF\/PR9EBLijkEcKfEIqwymgMQq4FVP91HrW9sXK3kF41AbeCE3qb8Zts5m3y47lNsBl5oErVrQIhg4dKgAnEolEIlEe64EDuP\/97384cOCAGkrv7+mkCgmW9gxS0JNbtqh7MGqmeMDT2R72dg8hv4MD\/DwKon4JN+XtYxNgghK35W3CEtuIcJ3Z2PuNxQTsN6dAzuZ1bpdx37hP7IOXWQ5ctAFwyUlFMGzYMDz99NMZZ1ckEolEIlFe6IEDuL\/++kt5jDhBgLM9Kyd5YdbD\/7USycw0cOnb5vu2xpy6yW38kRBWSA2959SCuqluWNA18Orj+JetQ1b1CcbE1n4YUN8bHSq7o73Julb3VP3X6Al7xIA5hmj1a2T1+rQb7WNWxsexKIOeSTYYtgK4cN+CKJ6ajDFjxuDSpUsZZ1ckEolEIlFe6IEDODb2vXz5Mpo2baoG25dO8MbU9oGWEGO+ndl9fdu8ntMaGEollHWs4oEuBohNbeevvGkEsant\/PBwdR\/USHZHSqQTogMKItQnP4I8Ha6xYK\/8BigVQHxIISRHOKFqUTc1CYEARbgiANq+trbMlpvXmbexXUavnxXAjTVseBMftW+lShbHpEmT8Pzzz2ecXZFIJBKJRHmhBw7gqDfffBN9+\/ZFqVKlUCyGs079r\/Ziyy1TY7Z6BmFR9yDleVvYLdAAtwA18qpyogtigpwR5OuG2KhwlC9bGvXr1ka7Nq3RqUN7PNyxvXG7FZo0boia1auiZPEUFI6OQGigF6ICnVEi2gmNSnlgYMMA1eqDUMhQrBWI3YzxXDyaJcB5K8AsV7YM0tLS8MILL2ScWZFIJBKJRHmhBxLgWIk6YcIE1KxZEwmRBBLfq6O0csuYs8ah9\/S6cUh9Wjt\/tK3kYYCbE4L93BEaEoSEhATUq1dP9aWbN28etm7dip07d2LXrl3YsmULli9frlqe9OzZE40aNkTJEiUQHRmBIH9vhPg6o3RhN\/Ss5YXp7f2xrt9\/uXW3atx3qxAq4Y1FDBrgKpQvhxkzZiiPpkgkEolEorzTAwlwn3zyCRYuWIDWrVqhcAQHwvuovDUrmLlZY3iThQBrDbCa0TEQD1fzRGqUMwJ8PZGSXAytjNceMWKEgrRDhw6pQgB6Bt955x28++67ql8dQ5OnTp3C7t27sXrVKuXt6t27N2rVqoWYqEiE+ruhfIKrGsc1qpk\/VvUJzRWI0x64df2CMdkMcKxGbZYOcAEeDqhUsTxmz56NV155JePMikQikUgkygs9kAD31Vdf4dEdOzB0yBDERISgYxVPrO0brODFnCtmtqzW2doeA94IhCt6BSnPW5tK3ogNdoKXpwfKly+PsWPG4Pjx4\/j000\/VoP3s6O+\/\/8ZPP\/2kIG+Hse+9evZEamoq\/Hx9EODtjHIJHujfIEB54nKjWnX3yHBsGsRiDJsQqgFxQxt7w9vNAdWrVVU99V599dWMvRSJRCKRSJQXeiABjq1ELly4gIULFyI+JhKNSrmqPDVzUcDNmIYfjqHi801o6Ysu1TwQH1wQzoUKKHjbv3+\/AkhWw7KgIqfiY\/755x98\/\/33eOyxx9CwYUNEhIfD080Zccbr9KnjdY0Xzgxl5n01m9U6K4AjvLEqtl89L3i52qN+vXpYs2aN8hqKRCKRSCTKOz2QAPfHH3+oPLhHH30URROLqKICggoBzhZ2zPet1tku52xTFi+MNmCnSRkvlC7sokKdNapXx7p16xS80Zt2M\/BmFiHu22+\/VaFXNiZu06YNwkMCEB1QQEEch+uzkELvm3kfM7vP29rMAJfevDfdzADXoH49rDUAjiFfkUgkEolEeacHEuAIP9999x1OnjyJMqVLIzXGHUMb+14DcDk1Qg+BiQUL09r7o29db5SIcUF4oDsSi8Rh3LhxeOutt9Rr55b+\/fdfFVZ97733VFi1Xbt2CA70QXJEITWuiyFc5rJZ7W9WZgtw9LzR0gsYfNGtlj88XRzQpHEjPPLIIwqGRSKRSCQS5Z0eSICj9+u3337DxYsXUbduHVWJ2q2m903BjjZWbnJyAtt6jGrmi\/aVPRDp74jgIH80adIEe\/bsUa+Z2yIQ\/v777wqiCFO1a9eCt1sh1C\/prgb1sx+d1f7eyPRA+yk2IdShjX3QvooPPJwd0LJlC2zfvh0fffRRxt6IRCKRSCTKCz2QAEcxB+3ll19Gx44dUTgyGK0qeBjAcvMAR+\/bit5Byvs2qIE36hV3g497QTU0n943vtbt1K+\/\/qqqQefMmQN\/Pz8khrsaEOmJBQZQ0ptmtc9ZmfYoTm17LcANaeSNVuXd4e5sj\/bt22Hv3r347LPPMvZCJBKJRCJRXuiBBTjmoTH5fvjw4YiLjUKDEq7YPDi9lYgV0GRl9L7xsfS+sW9a7zreKBNnQI6rC0qVKolNmzbhm2++yXjl2yN64n7++Wc888wzqlgiLNAbVYq6YlQzP2wcFGq531mZBrg0C4BrWS4d4Lp07ozDhw+rvD6RSCQSiUR5pwcW4Ag8X3zxBZYuXYrk5GSUj3dS0xI4BksDjC3QmG\/r+4Q3Nutd1jMIUwzYGdXMR7UliQhwQVRUJFq2bIknn3zylosWsiO+BqtTGUqtVLEiEiJ9ULu4Fya0+S+Mmp3j0kaAm90p4OpAewLcoIY+qFfSG25ODujXty9Onz592+FUJBKJRCLRtXpgAY4FAISdffv2oUKFCige5ai8ZxxLlZOxWgxPrusfgrmdAzChVfqc0Bbl3BHk664a7o4ePTpPG90yNPzxxx+jT+\/eSCoSh7gwD3So6nW1QMPqGDIzBXAPB2B8y\/QGvjQFcCW84VTQDgMGDMD58+fVeRSJRCKRSJR3emABThcyPPfcc2jUqBHiQ53Ro7YPVvYOUgCnvVKZQY9ezsIHtg1hw16OmhpQ3wt1UlwQ5OeJvn37qNYhH374Ycar3n7xuAhxmzdvRssWLRAXHYaqRV2xpHvO+9xx+zkGwBFM6X0b1dQHfep6o0aKF5wc7VX4+dlnn1WhW5FIJBKJRHmnBxbgKIZRWb3ZuXNnxIR6oUkZTyztYQCcRdK\/LdxwmQqfDgnFYgOOJhqQQw9Vz9reqFTEFcEBPpgyeTKOHj2Kr7\/+OuMV804cw8XiieIpxZAU7oSRBnzldMwWj48Ap0OofI4etbxQMdEdLoXyXy3OYBWsSCQSiUSivNMDDXAU8+CGDRuGhJhQ5alaZJMHR7MCOBqBiG06WLwwrqWvyn\/rWsMHpQq7ISTQT016uHTpkpr8kNf6\/PPPsWrlSjXuKjbUXeXl0VtIKDMfgxlQ9W193wrgutX0Mo7PFe4uhdSgfc5sze44MJFIJBKJRLmjBx7gfvzxR8ybNw+lihdD8WhnzOjgjx3D\/htsbwYas3EZgYjNcqe3Tw+fEuA6VfNCcqQLgoMCsHnzJlXpeic8VKyy5agttkkpEhuOqkluqjEvc\/Zsj0Mfn76t71sBXNcaXihmHJ+PpxtmzJihjo+vJRKJRCKRKO\/0wAMcJxlwikGd2rURE+SkRkVtHJgOOmagsTI2ul3YNVD1fuPc09HNfVTvtcRwF0RGRODQoUPKE8actDshev8mTZqEsqVLIjawoBrYT6+h1bFYmRXAda7uibgQJwT5+2C+Ab4MQQvAiUQikUiUt3rgAU4XMvTq1QuRAc7oXtNT5bQ9OuzG+WKbB4ViegcD3lql90kjwLWu6IH4MDckxMfj2LFjal5pbo7Pyok4o3Tbtm1o3boVgr3zq6a8W4eEXlNlS1Az39bG+1YA93A1T0T4F0JkeCiWLVuKTz75JE9apIhEIpFIJPpPDzzA6X5wU6dMQXigB+qkuql2IgQdM9DYGiGIo7NYfUq40QDHFiIxIa5ISiqKEydOqBYbbFlyJ8QGu2zzMWTwYPi6O6BnLU+s7Rd8taXIjcwK4DpV9USQlyOKJMRjzZo1ysMoEolEIpEob\/XAAxzFHLXVq1chvnAUikZ6oH99\/xtOL9hlQBBhiLBnBrhmZd0RFeSK5GJJqsntnQQ4tvd48803MW1aGnw9HNGkjAeW98p+GNUK4DpU8VAjwkqWKK5alcgUBpFIJBKJ8l4CcIboheOweTb0DQ0yIKWqP9b0TQ81WoENjQUMK3sHX4W36wAuuRjOnj2LH3744Y4BHKtDOad08eLFCPT1QLViHlja8xYBrrIHPFwKoHKliti5c6dMYRCJRCKR6A5IAC5Dp06dQovmzRER4q8gjGO1CGlWYMP8sB3D0itQMwW4Ykl3PITK4gIC1po1qxEe4oey8W5Y3D3olgCuvQFwLoUcULduHezfv1\/l+IlEIpFIJMpbCcBl6PXXX8fEiRMRGx2BckXcDVjxxYYBIdcl+mtjjhyLHe5mgKNYZctChoS4aCSEFVKzTW3B1OoYed8McGOMY+OYsHaV3FGwgIOa8nDkyBEZoyUSiUQi0R2QAFyGOC1h69atKFE8GYkRLmhVwV15q2zBRtumgenzT20BrmV5D8QGuyA+Lu6uAbhdu3apiQyR\/o6Y2TFAeQ+tjsnWbAFucCM\/NC3nAwd7ezW9gjl+7KMnEolEIpEobyUAlyEWMpw7dw5169RGRIiPCjdOax+gQEZ7qrRxGStQCTe2ANe2kicSwlwQHRWFxx9\/XIHhneyT9ssvv6h+dFUqV0SwV0HM6PAfwNkel63ZAtyABhxk7w57A+CGDBmCp59+WgGiSCQSiUSivJUAXIbYy+y1115Dn969ER8fh5gQdwxv4oedFnlwWQFch6peSIpwQVhYiCqM+Oijj\/DHH39kvEre69dff8Wxo0dRr25t+LoVwPRsAhzXmwGOUyZ61fFG9WJucHBwQFpaGi5fvqwAUSQSiUQiUd5KAM4kNqVdtGgRqlatihB\/T3Sp7qlmnZob32rLDOA6V\/dGarQrggL9sWnTJjUrlBB1p8TXPn78OBo1qK+qR+lV3D702hCqBjZb4zQKDXDMf+tiHFv5BHcFcKxsZYsSNkIWiUQikUiUtxKAM4n5agx7tmvbFkH+3qhfwlUBjB4Cb7ZHBlgDXPeaPigT54bAAD+sWLECzz\/\/\/B0ZZq+lAa5hgwZwcXJUALeN0xiMY9CgZgVwhFYe96xOARjf0hfDGvugY1VvlIx1Rf78+VUT3\/fee++OehdFIpFIJHpQJQBnEsOBzz\/3HAYOHIjwkACUjHHFgAZ+WNYzCOv6BWPz4FBsybA1fYOvAhzDi9r61PFC1aLOCAn0xZw5s1Ve3XfffZfxCnmvGwGcOWxqNnrfNhnHObG1L4Y08kbvuv5oUcEPxSKdFcCx4IMeS\/aaE4lEIpFIlLcSgMsQm\/myp9mF8+cxiAAXFgo3p\/wI9sqPpPBCqJjgiiZlPdGhqi8GNfTFuJbpNtoEb7T+9f1QO9UTQX5eGDFiBHbv3q2a6d4pWYZQM8mB2zMyTI3ZYt4fQ8SzDUDtaBxv1SQ3FItwRqhPQRQqYKcAbu3atXjrrbdUEcOdmvUqEolEItGDqgce4Agf9Ly9+OKLWLJkCTp27IjkYsXg4uKCAgUKwLFgATgVdIC7swN83fMj1NcRccGOSIl0RJnCTqiW5Ir6Jd3VkPcB9b0wsIEPGpX2MADOE127dMHy5cvx\/vvvZ7xa3osAd5RFDHVqG\/v\/XxGDLbxtGRKKBV0DMbG1nwGh3mha1h1ljeOLDigEH7f8cC5ohwIOdrCzS7eaNWtiwvjxOHDggBqazypekUgkEolEeaMHEuBYccrQH8dcEdzY6Hbw4MEoW7Ys\/P394OXlBV9fX0RGRCA2JgaRkREIDQlGQIC\/Wu\/t5Qk3V2e4ORdQcBPiU9AAukKonOiMhqXcUdWAOj8vV9SrVxfjxo3Dq6++mvHKeS8CHPP6alSvigCPAqqNCJsQ0zjLdX6XQIxp6Y9uNbxUzl+FeCckhjrCz9jWzcURXp4e8PPzRWBgIEJDQ5V5e3vD09MTiUWKqIa+kydPVmO1dFEDz69IJBKJRKLbpwcO4NiTjcUKDP898cQTmDp1KqpUqYLAgAB4erjDx4CTwrGxKFmyJKpVq4Y6deqgVq1aapvy5cujVKlSSExMRHhYmNrW2bkQnJwc4eJUAK6G0UMXE1gI7gb8FE9NRbdu3XDp0qU7BjUEuMcee0z1gfNzL4DRzf0xr0uQCqUObuSLFuU9kBThDH8PR7gbQOrmXNDYdyd4uLshOCgQCfHx6pgrVaqkzgfPQ0pKCoIMoCPE8RxEGKDLdQsXLsQLL7ygQtH0yEloVSQSiUSi26MHBuAIUJyIwNmg58+fV7AxbNgwAzyqIsCAN3c3N4SGhig441D76tWro169emjUqBEaNmyIunXronbt2ip0WLFiRQU1xYoVQ3R0NMIMmPPz9YWLi7OCOHcnBxQsmF+BTfPmzRUo3imYIcAdPnwYVatUhocBaE3K+qJleU\/USnFHqcJuKBzsZOxvfrgaIEpvW2BgACIjI1GkSBGUKFFCnYsaNWookK1fv74ytllJNeA0KioKfn5+Bvh6KM8cz9fYsWNx7NgxfPDBByo\/TrxxIpFIJBLlvh4YgKPnje086CGaP38+qlerhojwMLgY4OLsVAghwcHK60ZAa9CggTKCm62ZlxNYCHrlypVDfHy8CrG6GM9lb5cP+fLlU1BYuXJlNVLrTgIcixgaGODlXMgRsQawhfs5GjBnQGZ+OxQwrGCBAiosTBhNTk5Wx0Ovoz4PVueCQPffcQfA1cUFjo6OCvwYNuacVObG8fVFIpFIJBLlru5rgKP356+\/\/lIQ8eGHH6rKyRYtWiA2Ngaenu7wcHdHWFioCnXSq0QoyQzctCfO1rg9QU6HWYsVS4KfL+eF2hlg6KTy6pjof6ca3vJ16XHs0KEDnAy4dCxgj0IsynB3RXBwkAqRlilTBlUM0CS88hzweDI7D2bjdvTO0SPJsCpBzs3VBSEhIQpcOW5r3759KqTKnEPxxolEIpFIlDu6rwGOTWYZymMV5pgxYxRoMNeNeVtRkZFXw6UMjRJICGm3YoQeQlxMTAxcXZxRzoC3vn374uLFi3dsHioBludg\/fr1KF+unKqudTfAlftIcKMHkWFR2+PP7vngdnw8AZbPFxdXGN7eXsriChdGvbp1MWHCBDz77LPKA3onB\/uLRCKRSHS\/6L4EOEICh8jT87Rs2TLlfYqNjVXVk8HBwUhKKqqS8ulxsoKXmzU+D5+TYEhI7NWzp5pYQIC6U+K5YJuUl19+GYMHDVLFB\/SUFS9eXIFrZseR03PC7bVHLiUlWQEyYVlV8xq3BwwYgIMHD97x2bAikUgkEt0Puu8AjmE6enpOnTqlWoPQ6+bl5anCmYQ3ggsrJukxYmGCNsKHTtKnme\/Ts2YOKer75mV6OQGuaNGiKrmfXj8OtP\/8888z9u7OiPl3n376KebNm6fAihDH88Bwqe3+2x6b7TKa+Txp4\/nS55LngBW7zIfz9\/dX\/fQIz+3atcOuXbsUxMkMVZFIJBKJbl73HcAxZEhv07Rp01C6dGnVty2\/gx3c3VxVXzfmajEvjYBBI+DR6JFj+NNsBD2GGGn0LBH6zEYPlq3xcQkJCQrgRo8efVcAHL1w3Ie5c+de9YyxWIHHZbv\/tsfI46bp80CzPU\/Md+M51OeU55cFIQQ4QrObqyvs7e1V2JZQzarYd955J2PvRCKRSCQS5VT3HcAxPEcvDz1CTk5OqhrUwT4fvDzdVaUpW3swpEcrXLiwsri4OGWsqKT3TBshh8Z2IQQ\/s9GDRUixNa6LiAhXVZ2EFY7SuhsAjuO8pk+friDWx9sLMdHRlsfAZbbHSuM5SEpKuub80AirPHf6XOpzy\/PM9iq6vx7fBxrhbtKkSaoyVyQSiUQi0c3pvgM4NpBdunSp8r65ubmp1haFaIUKwdnZWSXxa3N1db3O+BhtvG\/e3my2j9PGdYUKOaqw7eDBg+46gKMXjGDL82G1\/zTbY9Wmz5\/5HOnzZPVYbq9eyzj\/fB9oBMGePXuq6RcikUgkEoluTvcdwDHfi5MPVqxYoaof2ayXnrB+\/fqhV69e6N69O7p06YJOnTopa9u2LVq1aoWmTZuqnC\/mhdEYNqxWterV8CCrVVllSStZooRqZEvPlK1HipaSnKzCkZs3b1Z955iTdyfFvMAff\/xRjdTi8dILRs\/idfttHA+Piw189bHyuHn8PA9stcL+efoc8XyxgKFJkyZo2bIl2rRpo2bJ8vzyPPN887wPHDhQvQ+jRo3CokWLVDHDnRwvJhKJRCLRva77DuAo9n374osv8Pbbb+OVV17B5cuX8dxzz6l2Hk899ZSajHDmzBllDOWx6SyhYu\/evWqmJ23b1q3YYgDYxo0bsWHDBtWGY83q1coIh6xupaePEx1sjUPx+VjmeX333XcqL+9Oi21M6IVjTt6qVavUPtruN4+Hx8Xj08fK4+bx8zxs3rQJW7ZsuXqOeL7Y54197giHbBjMc8rqX55nnm+ed86b5fvw+uuv4+OPP1Ywyb5wIpFIJBKJbk73JcDRC0dgITgxJ85sDLES8MzGNhs\/\/\/zzdUbPGWHjZoxjpPj63A+GMO+0dFNj7pfV\/mbXeE6szhXPoT6fPMe2510bwe1OTaUQiUQikeh+0X0JcCKRSCQSiUT3swTgRCKRSCQSie4xCcCJRCKRSCQS3WMSgBOJRCKRSCS6xyQAJxKJRCKRSHSPSQBOJBKJRCKR6B6TAJxIJBKJRCLRPSYBOJFIJBKJRKJ7TAJwIpFIJBKJRPeYBOBEIpFIJBKJ7jEJwIlEIpFIJBLdYxKAE4lEIpFIJLrHJAAnEolEIpFIdI9JAE4kEolEIpHoHpMAnEgkEolEItE9JeD\/AQ5Ox7Kw28NGAAAAAElFTkSuQmCC)\n\n\nHere\u2019s a glimpse of what happens when you call the above function.","3fe023ba":"## **Merging More Datasets**","5e0320a4":"<a id=\"section-one\"><\/a>\n\n# **Import libraries and datasets**\n\nWe will be working with the famous Surprise(Simple Python RecommendatIon System Engine.) Library, Surprise is a Python scikit for building and analyzing recommender systems that deal with explicit rating data. \n\nBelow are all libraries that are used through out this notebook.","3bd3f1c4":"# **Top Ten Longest Movies**","0fa99685":"# **Correlation of Features**","001dd11c":"# **Average Budget Per Annum**\n","a8730128":"genome-scores:\n\n* movieId : Identifier for movies\n* tagId :\n* relevance","956fe640":"# **Loading data**\n<a id=\"section-two\"><\/a>\n\nWe will load all the dataframes that we desire to work with ","aa78c9da":"**Observation:**\n* We can see that average runtime of movies have consistantly increased from 1900 to the early 1990's from which time it has plateued until the last year of the dataset, this could be due to the decrease in the crisis of studio lot time which allows movies to be made longer due to the reduction in cast. \n* We can observe that there has been an high variation from 1900 to early 1990 and less variation till the end of the dataset this could be due to the fact that movies produed in the 90's were very short.\n\n**Recommendations:**\n* As seen in the line graph movie runtime had a high variation and that could be attributed to the technological advancement which feedback could not be given to producers or directors but anytime prior to 2000 the runtime has stabilised which could be because everyone now has internet and since they have internet they can voice out their opinions.\n* The later years of 2000 is slightly declining as seen on the graph therefore producesrs should produce shorter movies.\n","1fd46a78":"**Observations:**\n* There is an observable trend of increase in average budget of budget of film  which could be due to special effects and CGI.\n\n**Recommendations:**\n* This trend is particularly relavent for the streaming service as networks and production houses are producing their own competing sreaming services and therefore are removing their content from existing streaming servises which puts pressure on sreaming servises to create more in-house content. \n","44224ffe":"genome-tags:\n\n* tagId\n* tag : tag descriptions for the tag IDs in the genome file","a6899355":"**Observations:**\n* It is reasonable to expect that movies with a high number of ratings have also garnered a high number of views.\n* Therefore the higher the number of ratings the greater the popularity.\n\n**Recommendations:**\n\n* Netflix should endeavor to match the order of genre of movies available in terms of quantity to the popularity of the genre so as to maximise the views, this in turn will maximise the return on investment in films.\n* For example Drama is currently the most popular genre in the dataset and if comedy were to take the number one spot we would suggest to Netflix to commission more comedy movies than drama.\n* This is especially important because networks\/production companies are creating their own streaming servises which reduces the amount of content that they licenced out to Netflix and therefore they are producing in house content.","030b7489":"<a id=\"section-four\"><\/a>\n# **Exploratory data analysis(EDA)**\n![](https:\/\/aryng.com\/assets\/img\/ani3.gif)\n\n**Lets make visuals Data Scientists!!**","9b8253eb":"**Observations:**\n\n* This is a line graph which shows the top 10 longest movies of which taken is the longest Movie.","dc92e181":"# **Problem Statement**\n\nConstruct a recommendation algorithm based on content or collaborative filtering, capable of accurately predicting how a user will rate a movie they have not yet viewed based on their historical preferences.","9cec756f":"# **Comet Experiment**","c5c10c01":"* The more a movie gets more ratings it\u2019s average ratings tends to increase. This also means that, If more and more people are watching a particular movie, it probably has a good budget and good marketing, and they are highly rated.","5928a208":"# Reference","19097687":"![](https:\/\/i.pinimg.com\/originals\/be\/b9\/1c\/beb91c4fb913bbb224d5e90c5d497016.gif)\n\n***Let\u2019s get you the best movie!***","2291e513":"# **Singular value decomposition (SVD)**\n\n\nSVD is decomposition of a matrix R which is the utility matrix with m equal to the number of users and m number exposed items (movies) into the product of three matrices:\n\nU is a left singular orthogonal matrix, representing the relationship between users and latent factors \n\u03a3 is a diagonal matrix (with positive real values) describing the strength of each latent factor\n\nV(transpose) is a right singular orthogonal matrix, indicating the similarity between items and latent factors.\n\n\n![](https:\/\/i.ytimg.com\/vi\/HGsEIMXhNpo\/maxresdefault.jpg)\n\nDecompose rating matrix R in unique prosuct of 3 matrices, \nwith an aim to reveal latent factors in R by minimizing RMSE\n\n* r is rank of R\n* U and V are column orthonomal\n* V^T has orthonomal rows\n* Sum of is diagonal matrix with singular values\n\nThe aim of SVD is to make r smaller by settin smallest  singular\nvalues to 0.\n\n","0c8f6e63":"* We can see that Stephen King (23 movies released) and Edward Burns (9 movies released) are outperforming the directors; inclusive of Luc Besson who has the most movies directed (26).","b2345ccf":"# **Item-item collaborative based filtering**\n\n**Item-Item Collaborative Filtering:**\n\nIt is quite similar to the previous algorithm, but instead of finding user\u2019s look-alike, we try finding movie\u2019s look-alike. Once we have a movie\u2019s look-alike matrix, we can easily recommend alike movies to a user who has rated any movie from the dataset. This algorithm is far less resource consuming than user-user collaborative filtering. Hence, for a new user, the algorithm takes far lesser time than user-user collaborate as we don\u2019t need all similarity scores between users.","cef8b397":"# Evaluating unique values for movies\n","2b71d3f9":"tags:\n\n* userId\n* movieId\n* tag : User-generated metadata about movies. Each tag is typically a single word or short phrase. The meaning, value, and * purpose of a particular tag is determined by each user.\n* timestamp : represent seconds since midnight Coordinated Universal Time (UTC) of January 1, 1970","fb40ed76":"The following code was going to provide us with a merge of a dataset of the tahes that are available. However, we get an error indicating that this is quite huge and we will have to either minimize the dataset or try to find another alternative.","8a838637":"## **Model Building**","15176d86":"<a id=\"section-three\"><\/a>\n# **Evaluating Data**\n\nHere is the data that we are was given to us.\nSupplied Files\n* genome_scores.csv - a score mapping the strength between movies and tag-related properties. Read more here\n* genome_tags.csv - user assigned tags for genome-related scores\n* imdb_data.csv - Additional movie metadata scraped from IMDB using the links.csv file.\n* links.csv - File providing a mapping between a MovieLens ID and associated IMDB and TMDB IDs.\n* sample_submission.csv - Sample of the submission format for the hackathon.\n* tags.csv - User assigned for the movies within the dataset.\n* test.csv - The test split of the dataset. Contains user and movie IDs with no rating data.\n* train.csv - The training split of the dataset. Contains user and movie IDs with associated rating data.\n\n*Description of the data that is given to us *","46738180":"**Observations:**\n* We observed a decrease in the movies published per year from 2000\n\n**Reccomendations:**\n* It is not clear what accounts for the decrease in movies published but possible reasons for this change include finacial crisis in 2000 and in 2009.\n\n","35c539c0":"# **Top Ten Budget Movies**","d1f1babd":"## **User-user collaborative based filtering(UB-CF)**\n\n**User-User Collaborative Filtering:** \n\nHere we find look alike users based on similarity and recommend movies which first user\u2019s look-alike has chosen in past. This algorithm is very effective but takes a lot of time and resources. It requires to compute every user pair information which takes time. Therefore, for big base platforms, this algorithm is hard to implement without a very strong parallelizable system.\n\n A specific application of this is the user-based Nearest Neighbor algorithm. This algorithm needs two tasks:\n1.Find the K-nearest neighbors (KNN) to the user a, using a similarity function w to measure the distance between each pair of users:\n\n\n\n![formula.PNG](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAgQAAABLCAYAAAAPk58GAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAC+ZSURBVHhe7d2DlyxL1gXw7y+ZNbZt27bnjW3btm3btm3btpFzf7lmvy8mJrPQqur3zl4rVt+uigycONhxIrLv\/w2FQqFQKBSO9ShCUCgUCoVCoQhBoVAoFAqFIgSFQqFQKBSOoAhBoVAoFAqFIgSFQqFQKBSKEBQKhUKhUDiCIgSFQqFQKBSKEBQKhUKhUChCUCgUCoVC4QiKEBQKhUKhUChCUCgUCoVCoQhBoVAoFAqFIyhCUCgUCoVCoQhBoVAoFAqFIgSFQqFQKBSOoAhBoVAoFAqFIgSFQqFQKBSKEBQKhUKhUDiCIgSFQqFQKBSKEBQKhUKhUChCUCgUCoVC4QiKEBQKhUKhUDjmEYJ\/\/etfwz\/\/+c\/xp7JtyLgyxh75PnVSpupuIzLuzGHbkXEehrEGGW+vF\/k8pbD\/OKwyXzTuuc83gYzjMPnAw4xjFCGgNL\/\/\/e+Hb33rW8M3v\/nN4Xe\/+9342bbgH\/\/4x\/DrX\/96HN93v\/vdcaxRcj\/\/9re\/DX\/84x+H3\/zmN8MPf\/jD4Utf+tLw4Q9\/eHjf+943fP\/73x\/+\/ve\/j3W3Fcb34x\/\/ePjqV786\/PSnPx3++te\/\/ueb7QO9ML4\/\/OEPw29\/+9vhT3\/601bpyiLQE\/L92te+Nsrb7\/SHftF5xXzyeWHvQa705c9\/\/vNox+yaPh0GeRs3vf\/2t789+kn+hu6AObAH35ubzzc1J\/3SY77vG9\/4xvDzn\/+8dHqfsVWEIEYWR\/2rX\/1q+OUvfzkqrN8FnDll8DnDfMMb3jDc7na3G25729sOr3jFK8bntwWc+Atf+MJxbHe9612Ht7\/97aPCG\/tf\/vKX4Stf+crw5je\/eXjuc5873P\/+9x+ue93rDuc+97mHM53pTMMrX\/nKkSxsK8yB0T70oQ8dbnSjGw2PfOQjh8985jOz67UpGA9H94Mf\/GAkW6961auGF7\/4xcNHP\/rRcS22Hcb\/xS9+cXjUox413PSmNx0e+MAHjgSMbRj\/G9\/4xuFFL3rR8Ja3vGX45Cc\/Oer\/Jp36MRFkiXTR93e9613Dy172suGpT33q8KMf\/Wjr5Wx8Aj79uOMd7zj6IuNHLAFB8PvLX\/7ycW580qY2VvzdBz7wgeF+97vfcMtb3nJ4+tOfPpKYbdwYGRMfvqhkg2QN2KTfp+opvgtJO0hsBSEgIAr3i1\/8YvjsZz87KiJH\/exnP3t4xjOeMbzgBS8YXvOa1wwf+tCHRgVFDnrD87zvLn7xiw8nOMEJhhOf+MTDhS50oeG9733vVhipxTWvc57znMPxj3\/84XjHO95wgxvcYNzlGR\/y85KXvGS48Y1vPFzgAhcYTnaykw0nPOEJh5Oc5CTDmc985uEjH\/nIVhoCZP0e8YhHjGNWTnrSk46kZxtkHxgL5\/bBD35weMhDHjJc5SpXGQnXZS5zmeF5z3ve+N22ww7pvve973DKU55ylPNxjnOc4XGPe9zRO9X73Oc+o\/5c9KIXHQkl+5Fp4mQKuwcdQuxf\/epXD3e+852HS17ykqMO8TVseROBcx3wIXzs1a52tVF\/+MmLXexiw5ve9Kbxe37mqKOOGudz6UtferjDHe4wzvV73\/veqHsHiS9\/+csjETjFKU4x+nS+E1Hh\/7cJdAJJf+c73zlu8uYKcqOuWIA8ik1T9RSx7ic\/+cl\/ejg4bJwQEJAF\/vznPz+ybE5MUD\/\/+c8\/KsDZz3724VznOtf4+2Uve9nhJje5yRj4e8Mj5E984hPDaU5zmjGYUiLPYLv62DQwPmNhgCc\/+cnHnwKSnanxcegMQIbg0Y9+9HC+851vJAMCK+fuu211NsZvbDe84Q2HE53oROP8yP\/a1772Qtn77qDWRj8C5tve9rZRx05\/+tMP5z3vecdskgyBY5xNMPJ1Ydd0netcZyQE5MxR3uUudxk\/5+w5pmc+85mjU1eH\/dzmNrcZswWHYX7bDDrEkT\/lKU8ZfRRfc6lLXWokYTIz1uCg9Hmn4IcEIqSRb6FD\/KTMJTj6cET58Ic\/fPS3ZzjDGYYLX\/jC4++yBwepQ4g74sKX8OkypXRbxnibYM2RcvLiqy9ykYv8V\/EZ0sU\/qoucv+c97xmuec1r\/k99v9OtW9ziFiMpOGhslBAQjjSnnbM0swVnZBTQ7pmzxlA5N847TBHD7YOj3yns1a9+9eG0pz3tcMYznnG43vWuN3zuc5\/7T43NwlylqC268Znrve51r\/GuQJyIOXDqmCRHgzQgBbIG7hyk3jbC2O1GzU05z3nOMxK8qTH7jFE4E5SqFKj3G\/Ts3e9+93DlK195dIQcovEZA5lvs2xbGKfsBrJMzmc961nHXVPOVhXz+frXvz6S51Od6lSjTd361rceSc9hmee2gdwcvzz5yU8eAyi5Xv7ylx8JPP2NDm27fAV0mws+JX6Ir7UxAeNXx7GC41ebFnNFLB\/\/+MeP9npQc3Qkc\/e7330429nONpzudKcbbfcd73jHuHnaJpDH61\/\/+uGe97znuNnIphTZIrsrXelKw53udKeRNKjLVm2AH\/SgBw3Xv\/71j65\/jnOcY1wLmacnPvGJ4zodNDZKCLDVj33sY6NQOGmL7t\/YKufle4HGuZE06alPfepx1+P8t1dKv8s0YOqU6N73vvd4Tub5g1LgRTCGn\/3sZ+OxwN3udrfxrP1Tn\/rU\/4zNeN19SIYAKVDXcco2zGMOxubyj2BFoTlOu42pMTMIRO2xj33seNeADuwnyNQ5ezIYnKBzSWRgm2U6BePlKMjOGTA597rh35w6UsCh0yHOnx5x9IX1QWcFf0Sdo+e83dVABsj7sOiRcRoz32hDIrvh33xtC\/VkPBzXOj4QsGzUXvva104e2e4HBP73v\/\/9Y+Dk092j2kY\/aDwKPyOrcZaznOVoQuC4l3zZY2KR4ndzIV+bV\/pkLWxq1Uvdg8ZGCYFAb6ExJI5aCsUZFuWM4CI8QRJhkHpxhtcLK3UJksJzfPmsr7spGIe5MLQ5ozJ+TJKSIEnkYu7bxop7RM7m5z5Efu\/n6HeEDnGw7nbqnMx+QX90wX0U+oNQYuzSpmR92NDK1Y51bmfqdzrjLo60L3Ipa+PIpK9bWAzyQnYdzdAhBOtWt7rV0dm9wyTPjJfu80Otn+zhM3cHEHy2at4yTYjmQdhOxsVXOiZos2DbCL4PaUS+QwhkkxwzkVfG7d82I44qL3GJS4zZFxtem5bMb1Nz3CghcJEF+6RoBPiEJzzhaAVtwekRHqWUBhVwekSIhN0Kv28r9foSTH2n9FilToup+koPqXSOhzw4cSknZ0lTdVv07S4qU1hUb+7zIJ9H7m1p4Xepe+vOEMwRCfz4xz\/+P89NlUWYq8tInatf4xrXGPsTHJHQKVK5CH37i8p+YaqvlClYD2lXx2hsjP3c\/va3P5qwHWb08182n0V12jam6pCjlLDjPiSdTfod4Zprcwp9P4vKfiHtL7PVQD13n2QsbU4cVZn7fr+RkzHpvx\/rTtG2sUpZFwiL+yW586Bc4QpX+K8jST9lTsnUhVQZBJmBlgxsEhsjBBy1M2dOSuDDqtz0pmi9UAj0da973RhEkAaMEdSLwqiDRbpw6FJMMg1B6uqXIWP3UvZSPNh\/lE47GN2nP\/3p8VzN0YUg3Y5JXeO0iPpRV9\/9uNs+jQUr\/MIXvjDeERCk+pvf6jujS2qbE+eElt2D0AdllHFxeQyBcMESk3dz3k5Av3bFbpyrD\/34HGmo53l3FrTpe8+bq9Q+2UTB++fJUXDXT3+s49\/m6\/6HuyExGreIv\/Od74xtaFfxb33bARuvdXDj1udT0DYZSS8adzJMYOwyEByZ\/twIf9rTnjbb1hS0pU1z1w\/5kIWxMW5tSfW5ZUyn9jqbo\/\/IWdtka53J2XwXyYUMvcKaC2QuPuW282GDMSvmS0\/yVpILWn5OyaGtbw2VFuSKIHlF1tpOHXPRRUdM2SW7+GXtV4X29EP\/Y6PuE\/mJsLFRhe2ZC7udW9OdIP1r01z4KvZMD\/iJRcdInjVXhJpPUuxm85riXiNjtV5kwv\/ysfw0Er9TpE1zNXc+25pPFUdyU5vOZeBrbObYGV\/jJwKub\/NS1HGsjQzIAnsTiw7k+01jY4SAYJwfh0kpjI6Ds3CtcAiU0Lz+IpBSatAGZXUpUQZBe25neo1MJiGOmSFQJspvMdxUdX7mFvy1rnWtcccqwOtD8DAOFxKvetWrjgvK0SMh2qFQggEyI23ooouLJC7ctBf\/\/HR0QcGkaZ\/\/\/OcPD37wg8fLk1e84hWHxzzmMaPzaeEZY5TS5ngYn8s\/jGIK6pujIORvF0jtuZTiFrrn3C43Lu\/vemfdJSiXVczDs3GExoeMOaszPjKxC2CQXqXynbm68YvNkpM1ECAFa2RNH3bedqNeV0LKIgt1BX2vjnrvGSsWoKy5NqXz3a2whs7UpLn9\/rCHPWwct3VABKcuNPnd2pivdWdg2glpJGNvbdjV6Q+ptN4x0kXwPSfOQTu24QiNh94gbXSNzr30pS8dL78ib+6ukNteAnmlcy550TuXl6yR9aTPfZALIhvr560K83ds8KxnPWuc\/05Ad9iKdvei9KR4EfSNdCJ+9MOxE323phxxv2s1f\/ZKv9mHeXu2Bf1wKZPNuL9Ed5Co6IafyKjv2KRX9diVcawCcjZPNvqc5zxntFFt8S9sjX+h2+6C3OxmNzv6FVg+cC9g\/PykjZJLteTmb1gg4pe73OXG\/hfNJTpEv23c+CT+ax1CtCr4MoQJUeEDyEW\/7sGQFxKVdVkV6mvXeDN3xx7asw5ThQ\/ZyQ1\/RIuvim9T+Lb4GvopVvHvjp5sjJCTVXzRQWFjhMAiOSt3pktwjM15ss8sHuH1QvJ7PvMzlw0FFRfFvN9PYbXHUaS+wPzWt751NGSvdAgODFtdbN\/lIO9+UgRvM+Qyn+KtBovsVijmyKlwxtrwfOrZ8VK2kBWLLJgyOI6bAuhTERARgp6Ze4YhXPCCFxzHoG9Oz869h7pIDgJDucnRbVwKfY973GN0PNLjxuY7SuriCjIEnCvmrZ7xCRh5L5kMBB+7fRcgXZLJPI3J7XxjFyQ5MZeNyCIyle2xhlkrmZEnPelJowPKWKxRxmzdzdlPO3lpNjtZY0q\/dvYCeUheoA9GlnbN2VspuTDI2SEz2sDY6YrdZMY2B98LFnZsZER2GL3n3RgW+I058\/VT\/3bjIVx7Ae0IWMgHwkHPsk5k5dZ1dG4K5OVSE\/mROTt5wAMeMAaJnQAp054xSXvutqzj5M0FUeXQyZ68yV2hw+y8haCKSCXVT0f4i7Y\/+oFMHPe4xx39h3bsRlPHTzpgR0fm6iDZq+wg2SgyYSPDLukJPfJvpM486BRbNzY\/rSmCuapMlsEY+EkXSpF1b6WwYTIzH8RWwF8EbXg+2Vw2Jmj7fC9hLWTv+G7E1ZrRdX3yCfzVOiBD68RvIED8ibmbtzbnSi5PrgN9ydx5Rd642ZqCCJITexNjxBKxANGREfLcXq31XmBjhIAQBJ0YNuFZDI6LA7bz4XzmnKvPXHjBrO1sBRDPa4fiem82wqbwdqwCNlJA2dTVL4LAIdz85jcfdwkUx6JRnozL2w12q4zY7hCz1w7FSR3BRsBL8I4h2kHaObsroY5+BT5stQ9unkGIOG3tMlpvXPQGa05ko67xR26CrgwDw0JGyNHYtKW4IR3mS67SZtpAhFzWTKrLPDBbZEAAxNCzw2Sg5GUX5QKN+WG6vktf5NLe4PdvuyPOuH2dkvMzRlkLuwHFbl5dJM1unPPRpkAow9K2CwyNY\/U9oqWOXSDZmiOjs6PRpzqcDfm0bUxBPwIW8kefEBdZJcHB8YBdu8BgraJLDD3OfFn7q0I7HFqyX8YROQtS5meec0AWZHEQX88Z4zo73B5IIsJljen0bgrb95cWVw0sMiEIBP1g3y5smRP5G0+bmSE3uqH9kDXrSKfbtREw+IUEHm0K4KljbDYBArnvEQJ60WcjengeGaDPbJRtmTMbJUPyR0wFBnppfHSU70Fi9grGz0+aA7KKFEQe\/BqdbuUxBW3YSLj8RgaeJ4Pef+0WMo6IJhuWdc3FavJh43bTq8Kc6As\/xk7oiXaQQyTIJoHfkrHsi3jCj64D\/fGt7MuYFQTQxomcbEitLR20SbT25LpM9geNjRICRmEHjLUSYBwdQUqdYaUEJ63YC87vOROyU6YwUXRBRHo6zxC8RXHmiKVhm4xPf3a\/nL5gZEGlwzlg\/WdMjJnzokCchd2voODVL0qmjiJ16XPI+KSRsER9hBBIqTuG6B05J4N0aFM9BiHd2aaEtWs+dunkpl\/ZCil7svC94hkkiIJqy1xc4OOk2jp2wc4yBd\/MFyFAeuyEMWU7Qs5MO3Yy0vqcrfFyqMYYOWiDwbVjyTrpxxisE\/lLndmNkZFxKP6tbesluDJgclPfGJEs848syNbaqMO55lgh\/XKu7dgRP2NZBEEU2UEkPEO+si4cku+0bQyyRnE2Codpjul\/r0DOZEOnBb7ImSynjlFa0DH6Gn0WBOxQHb2tC\/0gW0hdq\/e7KZxj1nMZ9E\/+CDJCJjNm3c2LLbTrqk3ztmOz9voyd2SolRddc5xgPvSS7rubkTraQT6yQdAW3Whtsodn6Z7NSsi98bFR6+h7hV+T8Ujgo+MClcC4V8hYyMaRJn+L1OgPuRToM9c5+L59FZqcbCRWyZKsA7qatZUpsGGI3YoF69whMGb+L5s\/60e25uGuiGNYRGmqkP+yrEkPeoJ8CPhZS76B7I3D0bJ58GctGVgm+4PGxggBEAoni7lKUxNY6ywEdoFJELYjVT+IIP0UPKT6LHwUPemYFhZHipVTtWDq2v1ytHaE2lcETcqT8fjJcQk++ko9u5Wch3NMnC4HDe34KKAMRuaFHNid9+OjjAKWOlEoaTLjDjzDmVMs9RinACxd2rbHuIzX2GNUSJO22nrmQUE5V21pkyE6CqDIHCZnggyZg10+Iqd97XheFqMlBHZl5ATqpD\/BUvA2Nzsy9zwWBTQyEvQyBwHaZ5kDp2yXjkDKkMTQwPeCh9Sm+RiXdgQEn8\/Bc9ZB5iLGbR2QxTynjkJ3BUfzVmR+6Ol+wLw4s6RSyZtOJsDMwXNIKhIcGbggRjfWhX4QMgHUkZfd726KnblMYNZsHdBL+mw+mVdLCOgGPfQd\/Ugdd01aeQnK7F8GgF762w4CQuoYm3sz6QepQOaX6RD\/066V7E6f3dK2DYrx0W8+pLWdvUD681P\/dsDJhrBFc2nHNAXfy+aGWJOTccqGLnt2J+DLZA2z20bIBdtV5WJMfDjfYbzWTJaWvfId5K7OsrIq1NWmTCs94QvIiJ9HLo3DZ\/RApi5\/rn6dPg4KGyUEESS25rKUdDwmneASwQp+2HYCUQttcMJJaStSdL3xAeOX6squWT\/+\/n7uK6RgogyHIlJIxMTOiBNo67WEQFscba+0npFmFiyMLbsUTlobLaR2pejVY7QCvXsL7ZylRSl3HJQxuiwUJQ\/MVabD\/5mgnl2ItHNfz\/g4BcGerPVtrIIPw1Rf\/3ba6pFNyIASQ8iacWrS\/f06qWecGbdiHlPZn0BGh9MnM\/U5WG3kGYE7mRc7lqm5qZ9jB31bV\/XmYP1kJqSOIw\/Bq9cn\/yYTWQFtq2cX0I9hr2Bcslj5oydkggz1RLCH7+wM8xcarZPMzLrnsaCtFPPcbWnbWxdslt7FRtlzdqzaQ8JlBxA2u35rae6Ib9sf4mDHT+eRSmvf6q4Aoh8y1w9dolMtSe9hd+lYLXphgyKg9mTcHFxiRMSNn++zY+9tZy+gX\/7T0aC+FDY\/5Yd6+F7KWzDzHFmSSUuc9hKIhjs6+iFD8nNxmc6sAmMiV35BsemT+SXXXu\/myjpQn69hV\/qz5uRE1mIaHfWZ72SMkOlFGaZNYqOEICBQxizoOqu3mxG0CTHCxeClydVrF8y\/nfekLqOXWhY4+4W1g+BUBVuKxrm6\/a9e6vppF2Qh9aue4OCWbtsexZLu06c6Fp0T6JWWw6acjF09gdmlLsGuh0xIUsIuvzjfa1\/f8xPjlLpTh8Hk3kI7NjBXRxraMQ\/B1IXFvh6nJIAntUZ+dp4MSN227\/5ZvwvOzsZiCOaHAPV17ehkEiJ79QS0RUbOgXrjIwGdjO3mjJlxkz8Dk5nhnPq2GJ3jjJY8yXT0Y2vhjQJZGvMhX9kF8+kDQPpPFsHcnU8vms9ugPRqP3aBAAsy5L8I5ioQWCPjNC+BoL9tvyq0tx9lXZg3O0KMyIPuSjVri36wHWTd2XmOE+m2e0Kcd+CIShC2zvQ+R36BtmQN0oc22eAcIdC\/jQKi6BnyRsZsevp5ItdS4fRMsfHZacZkGeirrEXItXG5T8NPLJO\/713cdSRKBgqZIuTLnt0JbIJkcpLJyEXPVeRiPOrJyFhv85RlduyJ1PRFxhg5Ru5TkMkp\/zwHffI\/8cuK9aSDst\/kbBw+Nyb6MJXB3gZsDSFQGCrBWjw7OUE0AqYY2L5z25ZBW3wGnXoUnpEx5Bba5xgxW2do2qPgAkYL7VEK5\/ycCONBDrw2F2hLsJHWSppdYBDw2kX2b4plZy4YaYujcLGoZ4jqOmMMcdAm8tISIGNz4UaA9D2DcbYt2Lb9gh2tC5LGRzmx+6ljCsQJcUhg81N6TpvLoC0yzfGF4t\/WqO3Hv6XwGIexkD3jkYWYM3LP+E7mKDd3zdfvnJhdGAeuLePloPu2QggYoedXIQR2IkmN6k8AcRY91bZ1TIpQsf5z89kNImcXreJYBCZyXtZfnm0JARLpKGUnYHuyFeyLjuymaIMcF63HHDznyIG+kof1yn96JnjY7QtasiPuloQQyOLl8qF+HTPJMvEtCF5PsIzT8+ljGSHQv3FFL\/SJULQXHgOkG\/nUrvHZyTpW2w8dMi8EUl\/0ALG0C7eWy+Tv+54Q8M\/0aidrtwyOKvlfvoJcBPek2ZdBHb7B8WJsxWZSe9a4L2yBf5c5SrGxW+e1Q33KGrUXfvlo64ukykDRR5\/7Xj2+g25tGzZCCAiQY1F65fcdJcWgOO8EvwiTYrYM3\/OUM3Wcx7nB3xusdjlQxp8gSRE4hBbGZBcqhRjld9FPQAu0xcCl\/rWjbzs2bfku8G8K4XKedtTTrvG19YByyI7k3Ez2QmZBhgHUp+iMI07Q7p9itQQpkFnIGwjGyECmMgl2KUhFArW7HJjzKk5JWwKLgG08ivOy3lH4N+PAlDMeu3rP9uNp4TsMXuqNTMwXqTAPuwj9IiCchfH2bdET+pILYascGSB5rXw5h34n5N9JC3P46nI+U4RrL6BNusuBkZ+5IC2rOGTfG397ZCDwIL07gXV0fGd3bi12U2R\/\/H36ncjM2vqrcLkfoLi9b11kUgRumUMZAPqN3Jk7YpSLtci6LJXsgPFM3WfhR6yzNdYHXeL8Wx8UeBbJQUTU9QwSisRP2Sh9EajU5ZPsZNu\/ZbKX4K8cj0ZWNh7I9dQ8ehgPYp3jBvbLJy670LpTyGTyf\/pig+4rrHqB0XhshtrLvmxzrtAJa5RiQ+lZ5GlV6FP2WtZTf9aSv6ULfI3xJOvoe36In1yV5BwkNkIIBCEKZuGlaHuh+J0gpWoZTJyu8\/D+hi+DFVx8H0WXDu3b1B7maWdKoS2a4JBLgIH2clarPXVlINoLS9q2yBizOvrmVBhd2y8nIHDZ2WnHPKS\/+os8\/s25u8iWlJ5AJzBnx6KO7Ikb4hRXHU7OHzHpA5y6HHebHnRJkIK2\/YLdr7sKIUleS+JIFwXNQFt2xSFt+kHi+nNt\/0aWXGKKTBGzZQbhO\/MQzDgH85VKJCtrRA6cxdTuCzg7pCOvjDFEznouzW69ZJeypjJJAh997ecj0LjvESMn62UX\/HYK45I1yy1v47NmxrUM1rG9VEhmsh7SouvC3NgWh5l576YYD31ZRdd6sFO6HwKtsCu6iygiBerQDToSQsBRkwdbYF98h42BHSE59+vnMztpuqMPP10EnCME\/IJdZtaJXjgzntILmYz4GWMz5nVS1etAuwi5vowtxN\/8lsHYBUjHmZ7lK7x5oc2pee0GfDuiF\/nRE8TFWq4C43G8hjx7llz5Uj6Y3q9S+OF1MwSySNZan0hMez\/K2G0ykdTovXX3+mwby7YBB04IGL\/Lc95lZoxea5tSKp9x\/Iy1NcaenduBO\/8maEWQFuT6Nj3jjJ6CaItD876pbEQLvztWSJ8KR9P2qW3pyewk1aFIvUOx2Iw+qTbOmFH2r3x5xl8MJBPjU9curg3M6tg9kEdLCNz47h0qBUR+BF71OE1znVI+6c+k57THQU+dd07BfO1+jJkcyEyWo5cD2SF3YdDqya70ZGwKMid2Tp7jiBg6Y3UO7m6HeZrv1Hh9btcYR6ZfbzbMOV0GTE5kpr9FhAA5yy1yxZGM\/uaCm2dS1gX5cZI5TjIXx1BIyTIYk+xCdqJ0FqlCxtaFsUtp2+2QvzZ3WwSWnRACOia7kPslZOJ1WDtXepHjFBmD\/J0BNm\/c+fO0yCFy46Lx3OVMbdhZJ8uknamjBfA8nc7tdvVDCPo5skW+z3qo5y6My6tz5BZ2qj\/ATyLk9NrY+CSkcJX2jF1WM\/eM2GFec55CxrnuWNWXvXH2Ts76csS6zh8J0gYfbg2sN99kncUcpb0rMFfWvUOgPxupxBZ\/5MrdNHZrPORHL2zmyF8xNmNc5VLnQeLACQFDYFBSnliSC229sQAhMVopPo6ccjBehh5Wq46App0IGROcSqXavdlVUmZtYWuYZx+8OPqkti2uel7Raseovjmoo19tTt3gtwvBrPMuMucg4Ep5t\/CM1LbsgfbUFbiQjkAdxmJsCIF6mCgn0gZ69QRRc8scBJKcs\/dwjp9divbskFcJNMB5eT3Ts8bDOXPKvRw4W+uc9K56UrSrvKKnHa995dUs65ELY5Fl21cL4yBD58bJ0NCPOSOkCwiNuUS+skgumbb1\/RvRSDCy\/uTQ61JgHGTlHgrZzo13DoIPkhoCai52HD2ZnUJIaS6rCmzOtNsjsHVgB4yEydTtRdnpMQuZypogmdZAQVRkURAAMlOHLTgGIjPzFwgFGEcFUuC+MydjmFs7R3f5C6aylJx9jvJaeD478fgGvouu9zYqBe64L+ResJXxmFtTumWc\/JM668jMs4hc\/CQ7kKGjj6u0QwZS4p43L7Lk\/9o5BeqyScdUvl9nnOry7+SnD8WmcZ0LsNowBiTMPMUEMaQ9Vly1rAL1bKCQW33FH8hMknvqIAcujMZ3q8eHIfrGtS04cELAkBiUNK7LFT0hyGJQJvWwfYLmDDnrGG\/q2iHHUVIAgTRnhKkHlJ8jjEIjJBxDFi3g6PM3DdRz6SSXlQLt2knG6AUOrytF4QJBwPi0o55xSkf1uxHKYreTnax5SEFlp56CYLR3CCieAJfUnaItLFcQjKMka4G\/30mTMaekT\/X8dCu7l8kcGL20uWeNh4LLwvRyEPgZKEKkLidu5+3zjLut38LnZGinENk4ntGXgLLI6fgcMydza0CP8srd3DMCBPJhPp6x81efTDyjIAjSuzFuuxnn4anTwvgQSvO1U7EjtkOd638KSIQ0dORsXAjkKg5X8OC8ycyzyKExTO1wl0Ff5qhfz2t7N0Ub2UWtC88gJvQgchGwZJC8b+57hc048qM36gi8bMvRAb1IUJwbg8\/jE8idrfvjPvxQD3XNSfYrvqHfpCjmLmDI9hmX8du9+yt9U2uqTWtI57SN3C8iwj206Xg2R3tIiqxbO6ZFsOb0l76TgSMZMumf049XncmVrrusvA4BVk8mMXef+DfBnD9bZZyQekh\/dF6GlOysdXzTsrIq1GWL4om1Nm421l5ETpvWjC6QYXRDJnib3jg4cEIgCHhn3CIJDBgSpWG4DAWjF+AolmAjiFBE6RapnAQ1hcA5N4KNgJ2VOq+WKhSQBV\/1fCYYRNE4BK8HZdEChuPiHyPl6O38+ktlnmHMcUTaQ1aM3zzMQZ0EQqln9cyDIVIWdaTc1DdGTqu9ieqM2JgjE\/MxdxkBGQd11CVH2Qk7LbsAAV3wSHpeHfXtiPSnPUVbUuFtei4BfRWQB6LEeDNmRIUTMFZz0h9nxhBkHnLGFuLGcWduMjj+3RuG3+0QcvPf84o52i2Rc\/9M4HO6hfSERDlPXHSRDcmIQzIvayZL4KhKIEesODtrFb1j4MZjLRXzybjogLnrnyPmLMi8\/98gF4H+RXf15ye7YSf6stucI3HWQXo3sidHOr5IbgeNnYzDMwKFTUX0D5HjW9qgStdlrbL+5GDtOGbPz8kt0A750ldyZ+tHHXXUSAp7qEuuSGXIooKo8A+OAPXJ1vXP3nxv\/Ei7y5r0Jb4wY7Nrpl\/apHPGn2OOVaA9+hIZKAgOn6ENfpIezcmCbXpjiZ7zFWRhs9IDSaKn9JyNm7c5kckqUM9bPllT8qavPss4\/ZzKdPbQljlH7\/lAvhfp4nf4JPYzVcyX31oEa01eivW0fvohI1kNd5+mNmCyWtYhOmtcNhNkpy3122cOGgdOCExcUMNWKTjhSQkTqgtq\/mSlc0ApGAZuZ8gYMEdGEmH5adG1RQEZiiIQSh0KgAKlDARllzbVlkWIUU+ljgW0MGmBXPoxO9nAvzE7i5qgYHdP+WU1pP4YIUfCQTEidRgJdi3A6AfrRnwouvm3dyHUEzi0R7GlLbWHTSI92tI3o2FAxuPynWMVuwgEKkpHPhyAIxPOUWZEMOVoyIESa0c6lZxXARkwLP3pI\/IXTJE08\/MTiROU7WqQl8yPAXltkMyslXNagZ\/R9BA82z\/6Ie0t\/bbMaIHOeFMh56d0AEnz+RRyhpnjDc8YN30kY\/OV0nTzPM5GYdjapW\/W3Jzpp8CB3JFxxq8tcu51bw52ctG39Cfd7bKcvmS+eh0FvyN9jhv0T2dkjrbxdvO6MH4BrbUZOt7ff6EjSFwIMhnQc6So9Sdz8D3HTp+tMTmyzf4YEdRVEGWZiqy3wkbpsCLr6JKvtD3b9D1fyH7ZKP8hCLJRcDyUC7naZKvs2453FfBFjhDpsee1Ez9pXnycDKdg2MN8ZAOMm9\/UN38kaPZwN6q1G33N\/Z2UKZCnI1a+IW2wMWft\/ANizR\/m700sgrayEUHCsw42e9rj9xCEqeKtlGV\/uAsxQe6sE39g3lkba+XCoMxBm0nKmNhr1t0zjrlknVxWtQmcWoeDwoETAsppZ+4ymgwAxaSoDNtiMTafcdyIAOWjkJ7rlcDv0oaCMcGmeNYiCbgCh4DLqLJoirSWxWrb5DzcDk2wFcgxyj54eMYuwDjTHoOm\/AIFZfCMMQv4OfZQKAIFwLKNTxCUNjUPl704HfWMATvmOBxPCOJ23OraxQsQGWdrfByKDARFJYcYAhnLipgfBylQuCyZHT5HZ9dCIVcFgqI9jDfzY8BInrSsYI90GbPdNSfm+9TlJDlF6Tx19d2zf7ImSw4tO3dEwvh7hzwFdThOz5AXHXDsgsFPAUt3+UgWwA7OOCNf2QVsnrMQEFxQy1zyvX44L2ulbwTD+kW3ydm\/6ePcjqwH5yP4ZzwKPRJ09Kf9qdSs9sk0l1rt2Dj\/OTJ0mGCu\/AK\/QR70iq1O7coEGbZg\/e2u6VoIVC+zKVhHzp\/N6Yu9IPD8Sv+83+k7wsHeojt+8hE+0z8yg+QbT2yUP0EK2JTn6TjoW6DiN\/gH8xB03LFaBWRCp0NSFG2wPz7WHQd+is728KxNmroIATJrc2WOPXKEaGzmknEiSKvIWR0bHkQlfiJyIXs+m+9ahWD43rohVcafbHN8nbnMFX532UVGpDr\/02vmGtnyh+ZNVu64Zax+kptMbv7jtqwF0sJOtemZTeHACYFFkhq260EMGLGgLzgyBIxOQLUgBGfxY+S9EvidEkvD2GVKyzE2SiPAWjSO0iLYzbopKwvBEBlIv8NUz9meOordtGDSO279Un7tyELoW33nfJwUBmuenhMQfI6JCxSUUzBwU16w5FTUxbgZvjbtNDMPysGgOLDIwZwZpSBpN+u1KEcFxp5AiexwKjIogoBzeORI2tK5Okdp96pO5mrXKsivAuMwPwZsvcheX3Y30u4CZvoxHlka85MpMB7ExXrYvcsiMNw50qcfxInBcIrWVrt93SmoY529YsXoGKB7AfRuKsOgvnHInlgLgZiMEUCvytIHfdNhY7f2MiHWIutKrlkrdTlu\/WsDyUQcyIhcliHz14bsA30j56wnG5FBSX+BfyMS+uRwFDehESHftXUPI4yfzjj+ob90ie72cyM7a6Ye+bHFHAGuIwP2yX5zsc6OGfHWfg\/tslE667hGBlSh++yWjVov42d\/7D1rKjBbU36D7gAfwXZsBGSbkFrk3yvbq8B4tGEHSh\/oK\/\/CBtg832h+5tLKxL8RSrtp+iOAGaex9bqrLnui\/3bG3rryDFvrj1znoA4\/wYeyJ\/JmX9bN2Nkkv0Z2q0B7ih23WGPOsqdkZ1yybFPFZtJmaRGMw6ZLxiLxoi38qdJnrPybf7FB8j1fKPbxn7J9joLEhU3hwAkBEAqFEoAJR9BmHBSHsnFkdjG9k5uCdiiigOlZiq3NBCLPK9ryeYq++7b97rm2Xm8kgc8pL8KibwGiH7Of6mmHUqprrurpvx2f4jNtUjbOzXP9PNq6nA6ZIVcMPnNSPON5bemXTMkp41P821gy1\/S1DrShb7LXV\/pp5Zb+jE9d9SIzfaZu6vcwNs7BDpkzI8u5uj3SLidsJ21nbacgQ8PB6LuH+uZlLtFL4yWrrIWf0TttW4spnW3bQnLtTuwSc7GxrTuHtg1rOSfnFmQtICFQApg0rKA4V\/8wwlyiv35OzctnbT0yyxquirSB5CbLJeOGLFqPvi2\/K7FR9qn4N31PfW2yAevZrml0KPXSFj2UbkYIHDsigqtCG9rmV+jrlH9p4Xf12F2yK1LtNlLGMoWMU5F58Axd10\/f\/hzSBj8Z38ontn5iXaRNc0aibIoQBDY4VQRr67EIsX9zW1SMuYfxtPbMx2RN6MPUMweFjRCCKRBSyrrYyTPHFBxT5s4IGL9gH4djbgzHTthxgeMFqdZ8vw48YyckC8WZS71yqrIqjJ9xT8nSZ6vKeK6ezxEmmQZ9S32ucg66LrTHoXAwdsJ2QpyyIwoXKzmcve7z2AJy4+BleqSfBWW32GVsZArIds6Re3Y3cvesACQYuwOCGNtJCpR7DfYmGJuT3bmUuLm67e\/oBaGfm0vmKQslC4Y4aWNdArafyBhXKQeFg+5vEbaGEBSOveBIHYtwrs4zMfiwb7f7OUGEQEoeq+Zg1gWDs8vg6KTnnKdyrC5o6lOq0y5yr2FuyIBjFbt1O6b8oau9dgJkRkbuP3DkzjLJztFHdrLb4ngOI8hOQHR0ZKfu\/kLO4d2JssvbD\/kK0o6MEEqZnrxCtx87SSluR7iOCdxvcO+FPtFZGY65+fnceDzvCJPuaSPEdz\/kUth7FCEobBx2JM5XXeZxRuvCjR2Q81cBjePlpAS13e42kAKpVuf\/iIGjA2eGzvM4vL2EHZxzX\/+XhbcTvKrq7kB2WXvtJJElQcNlR5fQnMNKgTpGK6e8e5Af\/bOu7ic5\/\/dGlGMEF2kF7Z2Q1TnoT5vsgE24Q4MMuHPTHj3sJRBjl5tlBFyQRibdE5J5WqRDjkT88SIXdtmrZx2xLHqmsH0oQlDYOOys3A2QxncL2GuFyEF2YC5CSYPbgezWuXie05Z9sHPn2N0l4NB2chSxCOZll+R1uLyCKZjsl5M0fgHEsYp5SWMncOxHf8dGRJZ0EQGjN7JOLsItSqfvBNpyWVJWiR65sCsdP3e8tRdwbOciIZvwp9KR5P5OQw+f540llwldjpTB2I8sWGF\/UYSgsHEIznbSXtNx6U9x1u4msF2utxX2ggz00B5ysNuswxzsqtwqRwSQjzjW\/UI\/n\/3sq\/D\/5GC\/dEh7LsHJ8jhSk+nZRh1Sx5s13oRASGX8PF84fChCUNg4OA+XCZ1\/SzW67Od1HBf+pl6HOiww5uyS9iNgFI7ZoC8IAP1fJ0AfNIyJnhtj6fnhRhGCwsbBgXAkUq7O971e5b5AUqPlYAqFQmH\/UYSgsDUIMdjm3VChUCgcU1GEoFAoFAqFQhGCQqFQKBQKRQgKhUKhUCgcQRGCQqFQKBQKRQgKhUKhUCgUISgUCoVCoXAERQgKhUKhUCgUISgUCoVCoVCEoFAoFAqFwhEUISgUCoVCoVCEoFAoFAqFQhGCQqFQKBQKR1CEoFAoFAqFQhGCQqFQKBQKRQgKhUKhUCgcQRGCQqFQKBSO9RiGfwOrG3CRqEB9HQAAAABJRU5ErkJggg==)","9e947a20":"![](https:\/\/i.pinimg.com\/originals\/d9\/58\/5e\/d9585efc140b5d3689b3341aa5c35df1.jpg)","f67f6b03":"* The top 5 genres are, in that respect order: Drama, Comedy,Thriller, Romance and Action,.We will show this on a wordcloud too in order to make it more visually appealing.","00e0b48b":"**What Is Content-based Filtering?**\n\nThis filtering is based on the description or some data provided for that product. The system finds the similarity between recommended items based on their description or context. The user\u2019s historical preference is taken into account to find products they may like in the future.\nFor instance, if a user likes movies such as \u2018Man in black\u2019 then we can recommend him the movies of \u2018Will Smith\u2019 or movies with the genre \u2018Sci-fi\u2019.\n\n**Techniques used for our content based filtering:**\n\nWe used CountVectoriser that is used in Feature Extraction which entirely is responsible for convecting text into vectors.\nand the reason why we chose to use count vectoriser instead of tfidVectoriser is to avoid penalising keywords, directors and genres that occurred more frequently essentially because if we have a high count in the dataset this doesn't mean that the word is less important. \n\n**Why we don't consider Content-based filtering:**\n\ncontent-based recommendation systems have inherent limitations because of their lack of use of other user data. And because it is inherently retrospective it does not help the user to find discover their potential new favourite movies.\nFor instance, let\u2019s say that user X and user Y like action movies. User X also likes comedy movies, because you don\u2019t have that knowledge, you keep offering action movies. Eventually, you\u2019re eliminating other options that user Y potentially might like.\n\n\n**What is cosine similarity?**\n\nCosine similarity is a technique for measuring the similarity between vectors. It calculates the cosine of the angle between the two vectors. If the angle between the two vectors is zero, the similarity is calculated as 1 because the cosine of zero is 1. So the two vectors are the same. The cosine of any angle varies from 0 to 1. Therefore, similarity rates will vary from 0 to 1. The formula is expressed as follows:\n \n![cosine.PNG](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAjcAAACZCAYAAADToRsZAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAFKvSURBVHhe7d0J1G1lXT\/w\/1o5C8ogypQyw2UGkUGBCyiCXq4IeJEhUOAKkohABRjFYCZOIM5SkhOSZOaAmlNlkqWVZIRDWJClZqU2z9n+r89jP9xu9zlnn\/Oefd9zzvv7rvWs877n7OHZv+fZ+\/fdv+n5f1UikUgkEonEAiHJTSKRSCQSiYVCkptEIpFIJBILhSQ3iUQikUgkFgpJbhKJRCKRSCwUktwkEolEonf87\/\/+b\/Xd7363+o\/\/+I\/q3\/7t36r\/\/u\/\/rv7rv\/6r\/K3953\/+Z\/k9kZgGktwkEolEoncgLv\/yL\/9S3X333dUf\/uEfVvfcc0\/1F3\/xF9Vdd91Vff7zn6\/uvffe6p\/\/+Z8LCUoklookN4lEIpHoHSwzX\/nKV6p3v\/vd1Ytf\/OLqTW96U\/Xe9763\/H\/jjTdW73rXu6o\/\/dM\/LdacRGKpSHKTSCQSiV7BGsMq8\/GPf7y65ZZbqnPPPbf6sR\/7sertb3979dnPfraQm5\/5mZ+pPvjBD1b\/+I\/\/mNabxJKR5CaRSCQSvQJZ+ad\/+qfqU5\/6VPXrv\/7r1RlnnFE973nPqz7zmc9Uf\/3Xf1298Y1vLP\/\/yq\/8SvUP\/\/APSW4SS0aSm0QikUj0DgHE3\/nOd6pPfvKT1UknnVS99rWvrf7qr\/6qxN1cffXV1UUXXVT9xm\/8RgkuTnKTWCqS3CQSiUSid0RA8c0331ydfPLJ1Yc\/\/OHigmK9ufDCC6urrrqquK3+\/M\/\/vPrXf\/3XJDiJJSHJTSKRSCR6B3LzN3\/zN9WVV15ZnXfeedUdd9xRrDQf+tCHCrl50YteVL3jHe+obr\/99oy7SSwZSW4SiUQi0Tv+53\/+p\/rGN75RXXPNNdVrXvOa4pLiqkJmXvKSl1Qve9nLSsyN1PB\/\/\/d\/\/7+9EonJkOQmkUgkEr2D5YZF5jd\/8zeL1YaLyndf+9rXqt\/+7d8u33\/xi1+s\/v7v\/74QoURiKUhyk0gkEonewc2kho2gYsQmCIz6N7779re\/XWJtktgkpoEkN4lEIpHYIEBwWGua8TS+a\/s+kZgUSW4SiUQiMRUgJ+JoBAqra7PUpvAfK49jJhLjIMlNIpFIJKYC1pdvfvOb1e\/+7u9Wt912W8mEEkujeJ\/A4bbmt9\/6rd+qPvGJT1Qf+chHyj4f+MAHytIM73vf+0p6uOBjx54GuL3E9SgWyCU2KcIK5XjI16Dm97RKbXgkuUkkEonEVECRf+ELX6he8YpXlFo2p59+ekn9fvOb31yWWpDq3Wxve9vbyu+K+l177bXVC1\/4wuq5z31utW7dumrNmjVlmQYkRzzOUoFgIF+qJCNdqiNPQpocx+rmf\/u3f1vq8lgTK5qFQevtz\/7sz0qWGEsUspMkZ8MgyU0ikUgkpgJEQcXhV73qVdXjH\/\/4avfdd6\/Wr19f\/dqv\/Vr1uc99rvrjP\/7j6s477yyf8bcVwa0S\/ju\/8ztlbam3vOUtpebNqaeeWj32sY+t9tprr+qKK66ovv71ry\/ZeoOQfPSjH62e85znlKKB+oBwjAsERRA0C9Uv\/dIvVa985Surn\/u5nyuk7hd\/8RfLdxrS9oY3vKFcE8sU2ehDon8kuUkkEonE1MDCgqj8+I\/\/eLVq1apq9erVReEjJ2JxKPdmU9fGflLFFfpj8UBCfv7nf756+tOfXp122mnVH\/zBHyxpxfAgXhboRJjOPPPM6tOf\/vRErink5u\/+7u+KO02NnrVr11b77LNP9YxnPKO64YYbqptuuqk0xOanfuqnyjUga0jOX\/7lX2ZG2AZAkptEIpFITA1IhLRuMTMnnnhitdNOO1WnnHJKWTdKcPAot4zfKX\/bculwW7G0vPvd7y7fTQr7iuWxrtXWW29d+oacIFfjQh\/tx63lOpGXXXfdtbr00kurP\/mTPykxQur33HvvvaWGD+vVLrvsUggOOUzDxZYYjiQ3iUQikZgKgrggOCwULBcHH3xwITgXX3xxiccZx\/pi23vuuacc5\/Wvf32x6kzimtIv52YJOuGEE6ptt922xPOwDk1CbsAxkRQB0E996lOrAw44oFhmZHjpYzTBy2KJyOCggw4qsUdcWiGrRD9IcpNIJBKJqYHS1pAGVgzxMrvttltx21x\/\/fUluLarW8ZxuLIQk4997GMlgHdccuMY3F3iX8TZWMeKleVJT3pSyehaylIPiMtb3\/rW6glPeEJ13HHHlcyvJnnjvuIK23777YuLzhITuXZW\/0hyk0gkEompg\/JmxeD6kfHEFXTYYYdVv\/qrv1rSsLuSFNshIKwd4mPGJQX2+b3f+73qJ3\/yJ0t2lmBnRCv6shRXF+sUa9DjHve46oILLihuNP2NPiJ4rEOIj\/ijSy65pCw9sZQU9EQ3JLlJJBKJRC+g6LmSfvmXf7lYSrbZZptCdJANLp1xiMoklg4WIvEvgnxlNMmOQnBkYXGXvfOd75zYimIfxxM4vf\/++xerkFRw16uJt5FyftFFF1VPe9rTCrkSb5MuqQ2DJDeJRCKR6A3cNGrBsJjsvffe1Q477FCIgIyoPi0YCITaMtLLucbUteFGElSM2CA4XFXf+ta3foBs+FtDjOpWmCZcl\/RuGVL77rtv9YIXvKCkf0ftHqucy8g666yzyiron\/nMZ8q56i45x3YOLTFdJLlJJBKJRG+gwMXN\/NEf\/VGxYjzmMY8pMSpiVcTfTFJnpgu4hFhWXvziF1e\/8Au\/ULKXnAvJOfLIIwvRevWrX10ynuoExjZICPcRt9Og\/nGtITGOxSqFvMnoes973lM+BUA\/+9nPLtlZAorV8uGmcy4NsZMeLy5p0mKCicFIcpNIJBKJXkFxIwOWUmDp2G677Up6uHgc1pU6uZgGWEcQJ5aZc845p1hTkJUvfvGL1a233loIiSBnNWq++tWv\/gCxEN+DcCAn3Gdt2VT6y+3EAsUCxDqjto\/v1NLRvvSlLxW3lzTxY445pnrd615Xfg\/LDSvSJz\/5yUKQ7rrrrh+w6CSWjiQ3iUQikegVyAALiFgU6dLSplUwRjSabqGlwrFYSKxbJTNKjA\/LCbLypje9qbrmmmuqQw45pLjHuKsiCDiAzHz5y1+u3vWudw1MXXctqhNzOwlOlg0ltse2fvPJMvOVr3ylWG9kSiFZn\/3sZ+8jS8gN8iRjCxlKy810keQmkUgkEr0C4dBYRVg4VBym7LmIpm25QS7UxuGKUh2Y64kLLNa2Elz85Cc\/uViP1N5hzWE10QeERAFCMUIIjmDjNtIhGJrr6aijjirxO87FMtW8Dq6ws88+u9pqq61KAT8Vkbno7M+yJAAZsfHdNGWQSHKTSCQSiQ2AsNxYZ8o6TBbDFHPSZhmZFAiCbCTuL+tTydJiPRE7o7GusJ4gHCw3Fui0vpW+saj4natI38TIDCIdateIsZElFcUA6\/Vy7IMwCSL2uwJ+qhdzP+mfT5lU9hNYPU0ZJL6HJDeJRCKR6BUUPYsI4iBzSAaTIFpKfRoWC9YVVhfWk9\/\/\/d8vad\/qzyARSIvzIzC24YZ6\/vOfXyw3Vi1nSVLrRoFA\/RMbc9lllxU3Vj1t22eQIPE0UrutUcUCZd0r1hgEx6f9kBYLaR544IGlKrJAY+QO2fL3S1\/60kLyZG8tpdZOoh1JbhKJRCLRGxAP8SVcMgiDwnncNV2JjW0cw\/ZtLiK\/c20hDR\/5yEdKTM26detKlhSCgZAAYuO8gpjFwViCQZaTRT2RIBac97\/\/\/dWNN95YLDriaBAexw9iE9lN4nGsTWXVc+teIWsClmWEicVh+RHnc\/zxx5cAakHDApeRGBYhsUZSxaWPc5llxeLpI8lNIpFIJHoBhU1xs2ywiMheEg8zjsUGqWD1EZvSVvjP\/3675ZZbSqq5dZ5UH1ZcT0xPuIv0I1YaV1SP1UVQMyKDYCAlrDhic571rGeVWB2kzPE157YIJsvT8573vJJxxSqDSF1++eXFEoOwCFJ2TIHM559\/flluIYKN9QUJ0y\/bCnj+8Ic\/XNxfiekiyU0ikUgkpo4gBGrNyFJ67WtfW6wj3DpNgjIItkMwWFuQBLEuTeuNbb75zW8Wl5KAYcG9rC\/ibT7\/+c8Xiw3oC5LFcnTTTTdVb3zjG0u\/7INsIEgCfFmXkBtWHEG\/QcQQE\/3nRrIPi4\/zyP6S8s0aoyFZzm1BTdYc2WBhPdJ31huZXC984QtLY8npIx1+pSPJTSKRSCSmDqQCWWAVkaGEWESAbhdFbhsp3QKAr7766kJIwpISiL+RB9uKdYlm23pAsLgbBEdcTnM7+9qWW4nl5Sd+4ieKawlhQjyQEs029rdP\/RhxnGi2ca4gRvU++15QtbgfdXYsySCGR\/8S00OSm0QiURAP4Qi+bItvmDbinOO2xOzC+Jg7XDFiU7hf6sX6uoyfOYgkcBMJ3BW7whIyqfumyzlZZpyPq0hxPkspsOggI9Occ66L5cd5xOX4m4Unyc10keQmkUgUIDSx2B9FIqskTPp9IZSgWAZvyu9973uHNgXPbKs2iWDPcVwcif5hLChpY8pFgyRw27BMyBTiVopWt3aIqfGdgF3bIhXcWOrhWCbhmc98Zgn6NUf7Gm9WFnNezI0+Syd3HeFSmhYQNCniLFpkJNaHbFxXzuXpIclNIpEooGTECiiLL0jSw9dDt08LDkXoQS+zRQaLUvVHHHFEdfjhh5eS9Qqf+V4ToKlfmoBNsREZrzBbMA5iTMS1GLO1a9cWC4UgXhYcQbcReCswV8yK2Bd\/++6nf\/qnq3PPPbcE\/O63337VlltuWVK2ZUBF5lJfMM9ZaRAaRfycD7mf5jkdy3nca7KnnMvf4wRYJ7ohyU0ikSgPXKXmuQB23HHHsrihbJPPfe5zvVpvkBuKhEXmuuuuq04++eRq6623rjbbbLPqoIMOKm\/+Aje5CCjCn\/3Zny3VZa0LpDKs+AgxGdN2HSQmg3nE+mesBOUaTyRn\/fr1JWXaZ\/wt40gqNPJjrvkOgZU6rfDdE5\/4xEJ0kW2p1txGfY6xY2vmJLLhWvo6n2OzCIX7N+fu9JHkJpFIFMUhC+S4446rHv7wh1cPechDinJRYr6vGhyhTJjpvSVbZ+eSSy4ppeo33njjUoOEUvOGy12hwiyyJcMEudlkk01KKq+Ml1xVeTZgDGIsBc2aP6w4bc3v9eY723PViNWJxkVq7DMmJTEOktwkEolCHl7+8peXFY4f+tCHVve73\/2qXXfdtVRQlSLbp2JBcBxfZg1LzDbbbFM97GEPK\/VKxCMgXn73liurRQAmUoOAKcSmrL11gKYdG5EYH8aSpQ8h5p6apIm9qf\/PbTNt91Bi8ZHkJpFY4UAckAhxLFZLFuPw4Ac\/uHrEIx5RytP7TeBun6C4FDdTFbZObsTjcBHENvqh3omYnCA3FkcUhJrkZjYQZNW4hdtlKS2O5TOR6IokN4nECoe3bDEtMlLOPPPMEgQq7gV5ENeidLzMlj7fnCmxJrk59thjS9aMc7PY6Kf4HAGp++yzT7XFFluUVZlVvVVszTESyw8khMXFWCmuNwnpNNfCUmdskVfHzDFOdEWSm0RiBYMS4Q5i\/ZB2q+S8zCXBvMiNwGJBxn27fZrkZqONNipWJCX7laf\/2Mc+Vj5lSCFfu+yyS7HeyMJReE3cTp\/kK9Ed3IjGROq+GKlJrH7cUOKoLILJUmdeWtMprXOJrkhyk0isYFAiMpVYbS6++OJSbM3igyw43FIsKFKyBXWOs3Kxt3cZTOIl7DfKpdAkN9xiFiU877zzqiuvvLJUqJUppV\/7779\/sdycddZZJfhUwHG4rhLLD+Mug02QsKUXJsm2M2fUtRFQbIVuxFuBvUmOlViZSHKTSKxgMPVz87CGXH\/99cWKw0qjLPyqVauqBz3oQSWwWLBx14wkFhTl59WgoeAoJSRnmGWlSW4ENVuU0Hll0LznPe8pzbpB6qAIKJYmrEw+MiYINWMylhfhSjL2gtC5pfw9iSsJieHSEnNlLp5wwgmleGPfsV+JxUGSm0RihYIysrBgFM9TTI0bAClRHfbQQw8tFhQ1Z9Qf8X0XCwkFhyRxGbH6cGuNCvhtkhup4Pb9xCc+UYgLcqRJM2ZdYrXZYYcdCvGyRo\/UY+6QxPLB+CLA1pD61Kc+VeaAMTG25g1i4v9hDalBUu3jeLL4zMsTTzwxyU1iLCS5SSRWIBAbcSpWM1bPRuMCUkNGlViF1lhOkAzWmwMOOKC6+eabO9W8oZQsjyCt+wlPeEIp0Bal8wehSW4iWwppCVeE82re6MUFqXUjLsg5lMwfZR1K9AskVAC4uChuRHNLhWuk5Wtf+1pxUYnFqTfk2veav+++++4yjmHtQWYVBDzppJOS3CTGQpKbRGIFAgnwViyQWMVf1WQV0FMzRoyD+BtxOAgEcqMMvt\/vueeeke4fx6agpJAjRFY9HpVtNYzcNK1Fjs2Ftueee1b3v\/\/9S3Cx0v1ZyG\/5YE4gKArxveENbyjuwle+8pWl+J7lMRAZgcGW94gmnobL8f3vf39Zz0zQOMuhcQwiXCc3VuhOcpPoiiQ3iYUAxVlv42DS\/eYZlAf3DneUMviCir05s7Bod955Z6kOzIIj5ZqFZPXq1SW+RcDoKFB2LEOIiOBQpGOYfLuQmxgjCtN2lolAbpAc2TSx+GBiw8N4i7FBaJERRPimm24q1hyWN59+N8bRLFKJLAsIZ9lBaiygad6k5SaxVCwsuYkHYbMlFg\/G1QORu0KAbFtcSHMeRPNQVkvDw5UiHmWVmGe4Xi4CCkPApzdrcTWykcTTuP6Ii6BkvG1z\/+y8887VAx7wgEI6bIv8UERdsqCccxj8jiwhJhQji1Esv3D00Uf\/wPIL+mz9Ky4oxEcs0KabbloUnzRx4zjqfIl+QO7uQe5IVjQWQRl27keWGyRGLI4sqnpjqdH8Zg5GPZuYV0luEpOid3Jj0puofZuL6+fxt083G3O4B7FCUP72FtHXAzDOGy3RP8hZHIh6GjJzWB+Mex3GhaWC8vbGaBuf9jMfrMwrE4dJnQLtEjQ7j3Bd3pYtRGlZheOPP77aa6+9ykKFAogpJsoDaaForNQs9TrWcWLBsd7T5ZdfXiwld9xxR9l2KfeTe1b9EkUEucSe8pSnlAKC0tAtBcGqZEXoF73oRSWG54ILLiiZXVLBpYSroKzIoHEbFtOT6B\/GUmaccTRW6tyYI5695hP3k+8Gtfe9733F9RSp\/eZVG7np6\/mdWCz0Sm4oHiycMvHg7OvN2DG9afL5Yv7eFDzopLSqg\/GKV7yivE24ubwB9tEHN5wbksmcSd8nJVu\/Ef1db4mlgQwpV8RGijAFKSAxAlDBNuaCByYrgKJwUp8FPcroMG9YfBAjsSYUZV9zZLlBLjJYyIBbR5aRlZitzEweLDJBbriDEBhv4LY544wzSjv\/\/POLnNxP3riXai0hZ88Hi18KZkZeZG8hVVK+nV+AsxaxQPrtf1k04nmMLWtT3lPLC88\/9xiXlPF5y1veUgiJe8wLphcK829Qc+96bnrpMA8RG9Ydwcky5xwvnu\/58pgYhd7IjQeNCcqv7wHlTdFEnbbp2LHUUvj4xz9ezsOM7iGNWDBhU3oeyoIm3SS+6+PNXD+Y1t\/61reW1Ff+ZjdzKFq\/M7+HXznfMpcOMvRQRGoQFooOgSbrmGOU57333ltIi9RkwY4UqYJwSC8i6mHKenDttdcWS4G4EnMqjrEoIAvWS+4mb9i33357IXiaFwNxEWRqziJ4SKPt\/E5Jaf62n3vZG3mdSE4CSooSc\/7muTTnir5G474ybixuxi7e8hPLC\/ML4UU6EWhxXO5PesC8Mk6jmu3MCc9KRMZLh2c6Uo1sCzw27rZNJIahV3KDYIiQZ2o+9dRTiw82lM+04FgeylYKdh5mag9DNwerkSJQSM9hhx1W3ig82Jf6QG6DfniDRKAQKW+hTLHeKMGN762E4tQnJC8xOcgbSfQAveqqq8pbXdM1YRvK\/JZbbimkRUE4ipHSRmykKDOHm5PaRz\/60WKlUDTMQ3nRHqDkYR66L90f9Waekp1tNNfetl292WYab9DO6\/xt52hr+kVhuhZ9TcwGjIVnMeLp2SfOZtKXWeMrDs696gXZvYnsen4HCU8khqFXt5SHH2VC+VAsgsaW6qNvwrGYKU18xOK6664rjB+B8fBDcMQOCE5EbviA+yI3zsUNJugS2RLfEOdys7oxBXFKgaSYE5PD2LLCSQlmhfFGT\/HVEfMPsZH14y2QdY1VggVHSXfuGNY02yKn3hKlRXtDZBWY5lxNJBYdQZ495z37JiW\/9rO\/43i+R\/P\/tEh1YrGxJHLjwY9BU9zevExG\/2smn0\/KhFJn9g\/G7TfNjeD\/eAPznYmrxXf18\/jeZ13h+Nt5nYdpm8Krx\/Z4c+CGsMJwk9zY13bRf63txontnDv6G83\/treN\/VkPxBAgNm5G2\/hNn1gZWAsEyJGF7+vwf7O1fT9L0B\/XSKaunyybYxTwHfnaJuTc3M7\/sV19TLSQJXjIISBcgKww0kz9HrCdOYFMyqwRlGp+OB53CsL7tKc9rVhpWNTsa66ouyHQ9oYbbrjv+0Qi0R1xD08Dcax6SyS6YGJy46FPeYcyZz5EYASFeQP21suSQcn7XqNUKBdv2P4WkxJBZCwZvhMEbFvHdXzb+43yQlwcz3EpUxOdIvW7Y9nPNnz4lCEMIjcUqzcMpk9m1EhTjFTEOL5GkXrbj\/66Pm\/7+uJ\/rg\/HEpjqf\/3g1tAvihyxcXwWLBYksR\/Oo5\/6p6\/OgfA4ruZY9rO\/Y+tT\/Oa40b\/lgnOTobEMGfK3k6+xMv5BDGzrGl1fjJPrt5\/rrm9nPF03OZpTmjG1PZmQh+0QF\/FU3Ejim8iyLg\/H1J9TTjmljL30Yfs7vnFDdlTl9Wk8XYs+6r99LrzwwkLKnS+RSCQS84WJyA1FQNlS2N503\/zmNxdFI5BMSqk4GwrO7xQPZc4tpTQ3BUeZeOv29iwQVLyENWTE5FBCAse4C\/haKU3pgdw9SIpziMjnz6V4KEcKUHorl4K3eErN95RdndzItKC87EcpO7Zze7sXAMfF4dwsLI6PWCERlKHYDL\/LEhHAKnWYa0P\/9R0ZE9DqO8HTrpsSp3Sd03HF4qgZYl0c1+k8gp9DmavVISBZf\/3O1YIAkCXZkLP+quRJUbdZFVyz70M2rn+cZh\/7th27Dr+bA2St2mjIzzgbO32PRfMcE2l1DeJfVK1Vmp1MzREyQjo01yWolFvPnDKuZEp+vicr5yYvxERmjbGoBwD7RAgFER988MEl1dmccWzbicmy1IAaLyw3AhT1U0OwZeysW7eu+PkR7DppasJvSJH51CbPUU0\/R8k6MVsw5uaqsZvkHjNXlvvlJJFYdExEbij9T3\/604WcIDPqE1DMFNw555xTYl+4ACg41gqr96qPgRRQJN7eKS+Kyeq+qqSqY0EZqTVCQaplcfbZZxfyQKkjTJT+c5\/73KKY\/E8pshBQelIPBQ07D6UZys7DxH5SCYPc6D9rESV83HHHlT5TupS0suH+1xckzP6uhYIVrHz44YcXxSctlRL09u8aKXl94nbSD\/1EypwHSbONa1UIzfXKzEHUxAqxxlDy5Kfkve1OPvnkQpBYLFiUxJUImJYiaz+EK6xTdbhmCpmMBS6TzThNCjDi4Lop+zY4B\/kaczVPWMT0HTETSM2t43odx8Mf+XS9YpGiHP8HPvCBEh\/le0TXWLKAIYrmgrHxvSw4hNKYILgsNhQDmUgJRhRtQ2EE9JtMjZEaLWSqb86LYAfRJGdzGOlxTRryJE3auCKYzjdIDkDJOZfxb5PnsOb+MLcytme+YD6Yq15ejGHb2A5r7nXPQfM4kUj0g7HJjYcwtwiioj6G+BFuA2+8gjdZT1hCuGUoBooHGfCWTCmzRFC+LBYsOhbkO+SQQwqJYUmhaJAB8RCrVq0qwaCOYT\/nYRVBfChA50BUKBfKEmlwLEpwFLlhDaFYkSGEhpJxDSwjSASS4g3fcVyvB5JzsgQceeSRpb8Upu1Yi5AQhIM8uJ4QN\/1m3XBNsqSQo913370QAsoQAfEbxewcMgz85hxWYWZtoPQdlxJ2TNdCTmTYpnR9x4VmXyQRyUAquraoB0QWgywKFDp5IBdr1qwpcuSaNB6u3wq+CI9+IneOyXL2qle9qlhwKHPXhYQaX9lsxtz4IstILZKLXJIfwoPc6RfLn\/FjvUJsEF1Eu+4+0j+Kx7yzcjQCa+wdA+HRP6tJG3uENMiFRq7G1nxFsEbVvNEX7isxOuPKmuXJHDK3R1lv9M02FGK2\/loXK5p7zD3pBc0Yto3tsGaOe1Yi\/sZ1GPxuPrf1NVu25Wxeroe9+C03JiI3FAxLBiUh5oFlxRsJhR0pe5SSm5J7hwI76qijimL2IPc9Ze7BTsFQPjJZEAkCo5hksiA3CAULgO+9LSFIFCpCQqESMsVGwVB2VgiWjdQkN\/WYG9t7Q\/fWxTrCAuFNisJFChCrE044ofRJPz3wECjHYblBrlirKF\/nRWych6LjakKywqLge\/tT9IjQfvvtV0gHUkMOftNPk4RipdSdm2Lm8iNrRIx7JuqyOI\/t2x6Mcc1k5gFqLFiQujZEAQEZRJ4AGSALBEA\/EUvy9LA2dq4B+SBT5xfQS25kFuPi2K7FmCCD3EMIjs\/IbEM8zCmkj0vLsV0bdwBihCwi2CxD5gE4Nvkgk\/qH7JIbK5DrMzeQRJV5fbJUBTGyr2ugfMwjZGxUULExNJYsSePK2j2DVJN121jWYf47D5mRifNlm14jU2PhPjemw2CsPIuMhTFsG9thzYuB52Cb5bUO53GveWmwT1u\/s2VbjuZ+UZi3C0FfLkzklqJcKK\/169eXEugUNvKg0JK3XQSCNcJFU3AUEDN\/kBvKwk3LwsKFQUl5SFBKHiyExnLhuBRN7EOBisNAbryJIzceEEGIuC66kBuK0PE8oDzQKE5vYawOXGqOYXvHQdIoYsTHuZE0\/UUC9Ne59dm5fCJKyEmd3PiNVYIbyzVRto7n+2igT65DP1maWET8z73E7YMc6E9sPwj6q1\/6Z6zGafYhn0HEBlh1uAGVwEfYTHQEQb98GlvXjRiKrUEkyJPyd47oP+LrOOaQarQsNGRuTuyxxx7FqodoBtER16RvjmE77ibZUpRMKArHRhZY4MjaNkiTsTYnWeOMDZcUK6MCf0Fe7Gsb44wYsUAisPF7G+zjd9ddl2PXFrIOmQyC\/iNoF110UbkmpDLb9Bo3sPvTy8kwshnfGzNjN8k9Zq7EM2PYuDuHuY3we+a09TtbtuVojA+skLwPw3TFcmIiy42HubdIbgLEhZuGlcUqveJNxFJQRLYbRm4oLNYfdUVYGTwsgty4ma0tE64B3zfJDavJJOTGw8UDzFs7BWc\/rhHbRTyGc4jBYTkxeEFuWBUoYqRIn+oYRm644erkhsuOItUP\/Y+HHPLiPKwd+sV6I2AW8ULm9H0YYnw8RB2bnMdp9rFvPHzbgBBQsnvvvfd9Lj1jF7AfmbkWMuUCYp0LQhgwR6xBg\/wgs95qWZzE5bCqHHTQQdVOO+1Ubb\/99uWGYlVDmMiNXGQ1GdOYB+DciABiYrVoWU8UhP7ZjzXOOjWUGbLomuM6fdqGdRC5MY9HWW7s49zGuSnLUY2snW+YrAOO7zrFASG6SH+26TUyFWfHCmj+D4OxMmbGrm1cRzVvu+bjqDF3D7lHzFOW8rZ+Z8u2HM18ZKFn6Rw1j5cLE5EbD2WWiHB7cBEw4bPkcD9Y7oDLhyIbRG6QD0G8lJ4g2TZy441+FLmxzyhygxjUyY3fWEMoZmTFJzcGFkrBejNmMfD27zopaX1wHMSHm00fm0pPH7tYbihe1g+Eh1UBUQz261pYsVyLPrNMkC0iaJ9RLNm5EDLyJAeuv3Ga85ANgjBIqYflZt999y1xN023UCh7E58yZoXhfiRbisM2IG5BDIzjuF4Bv8YnAqH1hQvPeHAviW8gR8dGdMwzliNm0iB95GOeICaOKw4mgq8pCvE0CDVSy50Y\/YaYL\/Y1jxBd83eQHGxvjjsOAtomz2GNbFhjjP8wAgV+1zfbmovuo2zTbWTr2TZqLNznSC8XvDFsG9thzfMyloiJe6ENfrON+znHPNssNTrAvKy\/bJuvnr9drP8bAhORGxfHjSNehTLyUKA4EATKzls2V483FGZ933HnRECxhwfliTxQeogMZUxQlBAFNgm5Qa6C3NhWXymEpuXGwOi\/PmlcJywpzs9t4c0e6UJC\/MbiwKKA3HAXISlBbuLh5HMYubE9ObgmCjuyqARmU77xQLUtWTJFR5aZVXZl+XjwjoL9ydZ1GgOWCoq3a7MPCxECOGhy6geZstIxTxp3b6TObTxYdpBex6EAXAPSGyZ\/x3W9fidLVhLBvo4jfovMuayQSvNHv6RzGz9ExjEQJfFeSJG\/wyKkD36nRMwFQeuOZRy4UrlOkVOkIuZIwN+uW5yXa3ONwwil7c0Z4+d448qakiMnVsEuDwLns122\/lp9PgyC+9wzCQEfd8w18zCSIUadL8c82yy3+vz1v\/uCrqIzvdyOelHoExORG8qC8qUovLl4uGNxgt68XUuD9hbu4lwkoiIDiKLhIqC03NyyaHzPSuJBj\/ggSmIvBO1646douD2QD2\/I3rgpyiiRT5gUkPNxU3BleeNGRpyHNcZ57YP8eLAImKX8EBsEwjV4Q0c4BO7a1vesJt70uUBYovTXb64HcXF9lBuZIFj6zrSNACFI3CuOGQqQFYEFAlnhEqPEKXPyrBMlytlDk4WBgubbRPicoz6Z2uB3BAPBIRvXNU4jS0p\/2Ln8pv\/ImvgYGWzG2fiRu7FEQhEs42wMudm441h5nEOQNPkggTKeXC+SwiJk\/iBZ5ItskL3vYv54m0WMuBLNA1Yc5AX0mbyRBoTI8ViCkGdzVp+NPQLpOuqwr3ls3Fn06m7JQTBuzu2a2uQ5qiE2XZRcYnZgrLikjJ053zauw5p57R5HkhKJRQG947nthZOuFbbSfIHckJiY3Ah2peTVBOFeomBYQyg61hZmVwpQYTdWEAGcYlVYVShCLgdv7b7n6kGKZN1400covO0jKtKCEQakxKdjeNNHiGzHGqBFbRxkiavC8VlG9Mk+SAllxxrDQmAQWAIoXVYgBAfZcF3iPxzLfv5nXfEW77iO4zckyzVTahQcMqGPlKm+SycnG6RLnAhypk9cKdxwFL3mmptv7h56rFJqxrCMUMb2H6Zk6zBGttWvSZp9h01IvyGOrh8RMJEFYiNqZCVtnT\/Wg99DnLXFtZKH31wP8oP0aLZF\/pBj8kNSyR1JMh8cV2yO7cKKx6LjmGJzkCQyjj7rPyXiGMaWj9g8dC7jzIrW5hJw7ciw8UFOjaf+j5LFUmStDTv+MDgvWcR4aUs95jiI6\/YJo85f\/01r7t8X2vq11HPXjzlJc97oSyKxCPCSxhDAc7F69eri3vecXq55PhG5oWgpNm4ahANh8ZarUUgUM+UnhZciQ0KQHrVA7If0+BTER+F4o2YxQTqQgahqjPAgI0y5vqfcWGXs45jcWvZhwbGP7\/wmRgVpYAkgbPsgIwiQfbzVswKxvtjW+V1LkDRWBAQNoUGcWJJkdlHMjuM8tnfeOrnRR987HsVKgSNyfqNMWTXIiAXIsZCdunnaAy8aAun8zucY3hRnCa45rGyCy4yTT+QBcXStrst2CAKyKzAS+SEj423ecAMiQa6PO8sYu26EhaxsY1yMA+IRpIRMkVHWQ+TFMeqKyrnNM\/PC+Yy78UKinKvthvPmgRAjvCw85jEr0CxC\/7kCXY+3IyRHIwfWwnCHdoHtoo0DVjXn8mmcyRz51IcmeTQ25ovt\/eZ\/+3n4eVbo+7jo2mf9MrdY4Vjr9BUZ1k8yrM+bRCIxGdxbvCz0AEMA\/U6PjftcmRYmIjceFpS6B5NGkVFePn0v1saFemi5OApc87sHioeMh6AHc\/zGTeE7Jlt\/x\/eaB6Lv41zcSr537HiYNvcJ8y\/3A6XoO\/vazkPWw59S8D8Xh0GxHSuKB5+Hod8cw\/b142j67rwUpYcjJejam9fkeH6zTciNi4l7RR896ONhi3A5j4e+GCJEgJL33SQP\/76h32RoHFwPGZIxebnWmNQhH6TY767NtZIf4hMKx7zxnfE21rYxr2JcQo7gb8RIrA4S3MzYsl0o\/ziG+Wi\/tpvNdwgT0sXq5sY0Pvo1izAfzC8Ez\/WRt7mEnCHt+t5lzpAT2bqnyHycuhVky7plTMnVfS0OxcsDWcdYgb5wDbLEmQf+tx\/CGa5G2\/v0u76Y94Oa+1MzV5zXfThorPQlXrrc9+aJc5KVa5jFe2tDwDi79zxDjUU8txa1eQZ4zk57vMnR\/PdsbzvvojX3jGd8U47uX88P4Qhe3r2cep53fZ5MG2OTG9BZD5JobhAPjFBSftdcLAHUm99977Ptt7bv47f423nq33fZp\/l99NH\/+m5yOq6+xfexbZfjaG3bxTZ1uYW84jfbsTKw6LCEmRwe+hQta9By+i1HIfrveppzoAmyjWtvbucz5kW05rjU4X+KDQHkvuPfRU4cp37M6FvbMeqwDdIpjkegMsU3yiW1nHA9lLV4LBZKSltj6UJ4KCvbjAIywfrJrchiFkSpC8xT8mehRS4QKpY3zYO+Lm\/yDcsd4mJc1EdiVQtZ+86YstKxnLKquidYQVldWX49NDV\/M3tzN7pnkCrnbyOvHrC2j3vJNZMZiyAZ6ttKhPGh7Ckh8mWRXuRmDoi\/G8eq2QXxLHLvsdq3nXtRWngdPDPcs4GQp3vJSwxvCQv+cuquichNYrqghLjRxJrI5EFqNA8db9Qe2IkfBoXKZeeGczNRzG3KbRQ8nLyJcD0KhpPVFwp4VuEhglSIeeIa9KDx0Gbpo+y9YY0iN+TECoIcqlkko9D+LCfI5SiIkUKIxFRFZqQ5izSwBtTJjXHhIiZbFhd98xDkzpRhyFrpmvRbjJXyEUoAKORofTA1j8TCidNTu8h9In5Nn8W4ifvienS\/1K2GQPFQ3qxG4SImMy5zMlyp5MYYs46aQwL2yVz9qkVt4vkQ3MjsnBbMbaTJi5EEibZzL0oTwyh2UkiFe7YuR3+zknoGCBWI4q7LhSQ3MwBKgIJw83lwixvyhmtymEB+n+bNuCgIUiJOSnCx2CxKtYtiDpArUoAkyWbj4opCbnXlPGsYRm7EPY0iN67bMVgIZfc9\/OEPr7bddttS86lrrBFyg6x4sCM3iJIA\/sg+HEVuuBXF1kVWhXFjSXB+Vh7rrFkb7EEPelAhON6KvQRwhem3c\/HtK9ao70gOf3+TWCFdCLC3zSQ334cxIUtziNWBNcuYLGpjHUd0pz3e7j1zy3w1J1kR286\/KI2uCld0E54BiI8XCSEdy\/kMTXIzA6BoPNQpWLEB3mTFpcQDPzEYlCTlRUF6cxc\/1dWtAuTLheKG5OaQdj4PQaaDyA2XVFdyI9YGudh1112r+9\/\/\/oVEsIQgiV3MyU1yg7QI4BZIb0zqc7eN3JC18yMycT772BY54praeeedS99UsTZGHpjOpXlLdEx93njjjatHPepRpTQAclS\/dn1hUndf2YfFL8hNvQDlSgJZmzNeoiR7sHiRqXtnUZt5xRo77XtbzJckFHNMJqb51Xb+RWnk6P4yh5rPCHpMTA7r73LfV0lulhkxOdxw3ihZaihXE2jWFeyswE2EoAgqFtxMdl1BmXqbR4rE3Hjgk3vzpp01LJXcuG5vYJah2GabbQqx+ZEf+ZFCJmToCVauk5M2NMkN2YuhQUoQmEnITQAJQZJ22WWXQm64zWxXN4U7vjdJJSk22WSTaqONNirB4AKa63MAuWH1QYA9dPV1pZMbc5wi4hbkQhjX4pn4PhBxFlNJCCzJs\/7s6ANxzcije3sWnqFJbhILAQ9mCo2iGocUugHt641k0NvILGIp5Mb1UfDIg3oUCkVavwvB4Z5CFgT5ItvD0EZuxOB4yHclN4hUV3LDqll305KBaqgImn5vvvnmJW4NaatfO1eE89QtP0luvlteCASSmzOsD+PcN4nvgcxYvcRIkqP7MDEbSHKTSNQwD8QGlkJukA7WDPEqLB0yrhTe4tZ5wAMeUIJ4kRBvocMU3oYkN9xS4kJYGFg2bU+pyJY68MADq0c84hGlwKaYm2amFnIjlsrbtcypJDffc+eaI+L8lA6YB1fsLIIc3YfmvNi\/lTiXZhVJbhKJOcSk5AaBYKWyD2Ij64hyE5BtUdcHPvCB1ZZbblmIzyjFv6HIzf3ud7\/q0Y9+dCnYqJ8y48RHydywTIplWlQsd9627ELkhoVCsCcXQpKb742HhAWZL+YRK928EPtZgnuJG1TZAoHEs5xhudKQ5CaRmENMSm68nQskRhKOPPLIEh\/DiuMYlifZbLPNqgc\/+MFlFX9unGFpsxvScoPcWGqDpUFWG2uTzEJLt+yzzz6F3KhjIu5KQGf9WEFuyCXJzfdARjKlBBMPs\/LVQabD2kqE+0M9F2Tb3DPnh8miKbO2lpgOktwkEnOIIDdSt8OtgNyMqnNjP9lEasZYmFUGkXgL26t3s9NOOxXXlMBiJGJYYLE3f2RFjAtlOYrcIEuTkhup4N6OpSs7ryaYWE0ccTYIDkLmeDIN64RlGLkhw5VGbshZ7BI3HytYl2Bi4yUAGRH2abzFLxlL88f4rkTFTAbqY5nz0qCHufbIJ+RoP4kMXkr8bY6a8yuRaPeFJDeJxBzCQ5DlpE5uPCiHkRsPV9spsmV1euQGGVE7RlVhRbpWrVpVyM2mm25arVu3rpAAiqwNg8iN7Bt\/T5PciLlh+ZHtxIWiOaeS+gr07bvvvtUWW2xR3FSuP6pVwyByo3TASiQ3FLC4JFY7MqnLqg1cLRQwmUkdp8xjKQ3zTRq0MV2Jitk8J0NzDskbJkdyF\/NFboi1AHkuLfcfOZrf5JixT9NBkptEYg5BkTQtN0FuPGzbyA0l5WHMtSP7aM2aNaXir8qq3Fsq\/lqJX1q12BsxOEqtDwosHma5mTa5qWdLxXY+\/a8i8mGHHVY95CEPKe6rSy+9tFgYos9puflBkL0ibNLwKVbyGAZzy1hL8zd31q9fX2TJciaOyfpusutsN0y5LxpcKyuh2k7kyHI67PoRcoUEzetLLrmkvEwgi9xaLJDcrIhP875NTIYkN4nEHKJObijqiLkZRG48dP2u\/LzYmrVr15Z4C2TDw1bzJu8By8UjLXyrrbYqZfnVAGp74NZjbprkBoHpm9wAhYrcyJTS50c+8pGlz9xpXcjNSoy5oWSRlSuuuKIEwQqKHQSyNhaIDCVuvp122mlFIYvdkiFE3saGu2WYcl80mMMsWNLAyWfUPDJXbc\/KI2D\/7LPPLlYvQfCsYUoa+Fxp87EvJLlJJOYQHoAUczOguEluKBsWGwpMTIAYC8sUIDbICaJB+Wt+9wbqISuw+KEPfWh11FFHFZcV10UcLzDtgGJkxD6uTRyIbesVivUj4jtcj2umGFSGtQSDQGhkyDHrSzAkufk+jB+CiJxYLoDlwVgMgu3JS9VZROb5z39+sYz5H6Hl2qOk\/RZjuFJg\/ll2AelTALQ+39uAVLIomu+yFMnf6vTmKguOtdTEwJnbK4kk9oUkN4nEHKIruUEEKHTmcBYOridF+xAC33krt50mHsCD1zZbb711cU0hC9xWHroCkb19hgKbNrlBwrz9U7jOJ8B5u+22KzFAloiwPhSzPWuD4n2ImAwpsUO2Q4QsvyALqO4iQG6yzs33QCbilihTGWeU7Sil7HfjzupnxXyuSuMlDoeC5tq01pc4HuO8UhQzdy3CbR6ZY6OInd\/dp5Y3ITP3CZm5V90HZMsC5FjDCGeiG5LcJBJziK7kxlu6DCMPz3PPPbdkFHHhiJtgTg+i4XjWNrNMgYJ+XFM77rhjsZhIsxYfQKnVScu0yY0+iAVhDeD+YEGKfuy\/\/\/4lw0s\/XLNPyuCkk04q1\/TUpz61kDAWhFjVvE5uWKqY\/CmTlUxuKFiExrILGtdSFzLCckcps9JQ6GSIhJ555pkl5kbm1R133PFDbsNFhWsUzG6uCtAf5ZKL38jRfSfmxnIg9nPfseSYvyxqiHudnCcmQ5KbRGIO0ZXchJ9fBhMi4W1dire\/xcCwZLCY2FYMj6BRVg7F3QSPisuw\/bXXXnvfG2pf5MZ3XGOUJ8tS9EMffPrf9hqyYvV8f3O1iV1g4qdcXU8d+ix4VlyIt+2VTG7I2OKO3HSu3\/zoAnIzr8w3AeTGU10XFgiEmGvG9yuF3CCJ4pbMdSSFi24UyIW1SxVt8xsZJH\/B2Nx95jeyxEJmjia5WRqS3CQSc4iu5Iaip3CQGG\/s9eatPdwIHtb2Z9lABprb+o6CEw8Q5vc+Ym4cX7\/qfWjrTzQuN\/2iJMgkFEJdMdiOMvFWLGaHIgpys9KypSJjB3Hl4usa38HCQOkGQTS2ZIkgC5D1m9gR47oSYM6YQ2ovyVbsMofIGblhXRSrw8LovnCvkqGMKS5VcnTfdhmXxGAkuUkk5hAephRzG7nxoAxy4wGpIQ7NFr\/FQ3TYtlpz+0gFb5KbpdS5idZ2\/rZW30drA3IjXodCEWMU5GYl1rkxTyhjFjyWgy5khFzJiOwiRst3FDAFjXy2BZwvMpBEFhvkBlnsKkf7IYd1OfrOS4X7wn3QtDwmJkOSm0RiDkHZDLLc1MlNn0BumNjbLDdt5EbMSxu5YQ0IctMHkBuF\/lgqKGHKZKWSGxYYSpmbcVj16SaMTZ1QBvzvGM3vlwPRR\/2JPvUF80iAvrkuU6orIanLMf6v9ztkGJ\/LgehfXY7L2Z9JkeQmkZhDUMjqz8go4hJYDnLTdEshLYIlfSd2xoMx0Ga5kRnCXXTbbbctC7lZaW4p8uXyUHjPODQr6vq7r9YnHB+54M40nix04liUCXBPBJGYJrhDxRnJOvN3fa43r31arW84B1khwO5tGXCsfHfddVe5b+rXOA9IcpNIzCE8zL1589Oz4HC1IBiIAjcPAtG3eVtAqbdXJAthoDhZBZxfbEFdqSAQ0rttL\/7Hg9J+4oOQHEqorwe4vigIKIUciRJngpDpq7fuvkngrIDMZfiwrrGimS91+J+ilrGGHC+1IbjkPS1yUVf09bni+Nw6AudldCFu3G4C0ZtlAaYF14fII+xIYlyj87gXXHtTHpM25NzLy7TkOAj6brwQfy9IrLIy4ciRdbV+nfOAJDeJxBzCg8gDjyLiv0dkKGmkhktoQzwMvSl\/6UtfKg8950ewPNSd3991hUKx+r7+Nq3f+o989EkwKG1EjOJGbPRVrIi+eiOdpwf2UoBgkoOUfm\/krGl1GB8KTeaOLCiKjWXNCvKa1PG2vzWZa2revOAFLyglB84666zqsssuK0Hc5uJSyYX9jV0o\/LpFxlxDYq6\/\/vpC2hBXFhWVuFXcNsemPcbilSIAuN4X89w8E3dGDioRyzZkOYz0+7ZGhrYhR3LTb6UOyFHRRNbZrplotnE\/6ZdA+0HN7+aAvtvHp+vSX\/JDFr2M6INUdS8H82TlTHKTSMwh4mHk4URZ1\/\/X+jYhxwPUW6rPOL+HXzww6\/A75WT76Jt+2zb27wPRLwow+uU759bXvuU0SyB7wa+CYLkdmoSSRY2iVeTRchcKIiI7UvO9uQ9q0vC5Q6XkU8TqIu2+++5lMVMp\/PWlMCaF8WJ1UgIAOUPEov8UtTo7aiOxOCAXasc8+9nPro455pgS22X\/acGxLHgpZkv6e13hu05kHdFSo0nxSSSFlYdVibxYNpvN937nMjQ+ruXJT35yKUy5xx57lNg01991vrL2IJaOx\/2qrz79H43MuPAQXq4o8kRgkDIlIbwo+e3iiy8uY8rK2rT2zTKS3CQSc4wmKfB\/X0ShibZzDTv\/oO03BIb1a6XAmz+XAxLCmkFR1mWCALIQKMynMjXlyoUl5oLbR5ZPW6PMEQpWOaSCIj3vvPPKYqann356KUqH2E4KfWTlE+Ny0EEHFdLCFYusgmP7X6kB5M11UsqsDYo7cntOk9yQk3RuBEHNoDrh0Fe\/IwmnnHJKte222xY5Il3kQ1ZtMtRCjqyh+kz2qoUjSQpYGhsEtQuQP1YXVqDjjz++kBPWINYh5PC6664rRBGJYm1jhUJCXY++KvzJquk7BFWxTNfr2uYFSW4SiURiBYACZSVgRUBW2qxr3HXe0JEC1hskBTlhHaHE7dNsvtdYMCg\/sVcsG5TnOeecUxQncjIpuUReZOYhStY8O\/bYY4s1xrkcUx\/0DzkQM+JvAcXr168vlay5sWwzLXDHqkqssZDUjx39cb0sI6pnI4qIBSsPV1AXOUb8E\/ehjEjrTiGNxmeYHOM3clDUksXngAMOqI488shiTTIurHZcTmLglEg44ogjSuOKcj3ctfqPSOmzyskIkH3rVqpZR5KbRCKRWHBQehQXhUzpeitvU5IsHKw63vC5px73uMeVGAzWm6Ybqw2OSUGLs2FF4eaiVFkSfD8u7IOICRJ+7GMfW9Y70y+xLgiA82lBDhAh\/RdAjhRw9UyzarLjWDQUYeNKamacgf\/JkZuPHLnnDj744OJu0rcuBMExXA+ihlQI6rVqfxfXlH3JA0FxfuSGBYg1xriEe9jvSKLlVpDG888\/v1hq9E\/\/kStWHAUfWW0iEWBekOQmkUgkFhyUHbeIt38pvsNiJyg\/QbliLbhErCKPLLDIdFVuFCzlyT0jZmcScuMYLB2sDGJ5WB822mij0ieLplL8tglQygic37jekLgIYK9vtxSQI8sHoqG0wLBjI4MCdAVnW6PtuOOOu48kdHWTObZ4GGPmushx1L7RH+TEGlbWZVMyohlYTV7cd6xCD3vYw4qVLsgNC5Hr48JiybNo7rwF3ye5SSQSiQUHhSUuBUlhUfH\/IKXse24NcSVcQXvuuWeJHxGg2iQUg2AbSphiRjgmsZ7Yn4uE9UDRQbEfj3nMY0qQLeKij3FM2yJfFDKrijR\/C3siF84\/LYuD87AayYYSF4MIDoK+IZGCdi0Cu2rVqmJBQVT0vQtRCDlGJWj7dbkW+6n5s27dumK5Qfa4JX2vObexYdk69NBDS98UJOTaY43iiiRHweLInLkjHifinOYBSW4SiURiwcEdwb0hC4aLicJsA8UHFCgLgyBeAbHib1gBvOmPo+AoUefyGcfuAttS5GJnuLUQBISFFQLBoXjFvoSippT9boFUadVcRmJKxJFQzIOud1xw50SlbdaMYa46fdOQBaRy9erVxeokZR7x6BocDOPKUb\/I4PDDDy+B3TKluPfMA0TT2JIt150gbTFB6k6RqaBz8VIIpTo+5EqO5JnZUolEIpGYGVCwLC+CiaX4Dnv7D+VJQcrcQRgOPPDA6pBDDilEgzVlWmShDc7PIoKEIQVcaawvgopZGbbZZpvSj4gBQRLEkyBfXD+sFWqznH322SUbCJGYVn+52qJPYm+6WFFsI1ZGDRsxTGKGZCvZvy85cpeREasbUnXDDTcUawxrE8sTsoLYyMISU8P1Zx\/WGfE9sqvUCZKZpiSAgGIkJ7OlEolEIjETQBa4NLhyvMGHxWMUbEOZUXziRrgujj766PtcQqwIfSAsMSwPApK50VgMEC1WpC233LK6+uqr74vjoZQp7muuuaYExSqcp1HIlDoyN62+Oqc4FBYNfRwlx\/idG1Ack7gWckTCBHcbiz7kyEWnGOOOO+5YYpXELLFoIVUyqKTJc5WJq2IVY80hS648QcjGmwxt52\/7ck8Nc2fOGpLcJBKJxAKD0rLMBFeOWjDIwCiEAvMpkFT8zYknnlhtv\/321WmnnVZShIfFm0wK59M\/LjRuEfE2LDS+ExCrD4985COLlUawMMuHhmwhcMiHoFjN31wx3GjTUshcUSwiXDTO2eW4ttHEKyFsT3\/606vddtutWES4hsZxT3WFWCNZUNxgKk2zbHEpaixZ+oH8IT5q4YQVCYkk76YckSVj0Beh7QNJbhKJRGKBEVYDFgdKeVxSghxRbsgR15S6Ld7uuWimreyci4UGsRHEzBojw+id73xnqZZMGW+yySalho06LlxnQR4GNYjPNvjNdQzbBmyjkB5rEPfOuKTE\/siWwF1xLlLE1Znx3ahzjwPHQkaln5OXoGFEjKw080GAMpnqA0tSVB+277A2T0hyk0gkEnMGigYRoKhGEQyuJUGiXDyTFmKzD6sFN4X4Gwp6UK2cpcAxWRW4VLhwxIMgOJp0ZsGxG2+8cUlfFihMWS8VLDusEq5x2PUghVxySBZiNU68TBzXPtxs5MiyInZH1tI05aifxsfSDyoLq2VTH3Pnijkh4FiNG\/LtYzyXE0luEolEYs5AWQmyFQcxKj07Un7FW8iIoWDHUWK2FZMhrkXshpgNsRmjyMC4cDzXI21ZqjUihlDps6ZmjorHlPHatWuLNaqeuYXkuVZBsdwsdYU+CPYRk4MoiaEZRBRdJ+uHLCkZZI4\/ilQ24RhIFFIhSNvyCqonT1uOUr5VZhZvg0QhYohwIMYTiWRB+tEf\/dFSt0ff\/KbJqmJB45aapwypOpLcJBKJxByB8qHEuR5YY8RE1JVXE2JRxK4gDKMypdrA\/SKGg1sL8fB3LH2wVIQyRRS4vvSTqwaxoYCRF5YIjStF\/IiYG8saiCOpu9iQBCQlFvu0\/6g+UuKyyBAW2VmDZOM4YlEE1nLnKJA3Drmxv2sR70KOSBLCRraj+tgFjhENmZHttNNOOxUiGgHV8bt+2AZRVTPIUhvWBAsyaBukSx\/Jcdpusw2FJDeJRCIxR2B5YZ1Q1O7UU0+9ryjfIAi8Vd9G+m8UcusKx3Uu7hOuDudCCEJRLhWuhTtEH8V9sDSEZYgSdg7bOCcrwpVXXlmypaRUyzZC3BAtytt2go5V8hUTM4qAITLOgzA5r3iauiWoDscRjMt9Y32utmUXhoH7TFC3VHxy5CqKgORxjtMG+7t2x0O6xCjtt99+JQ1cfJDxM+4aGbpOdWzE4xx11FEltd311AmQ49x2221FjvPqrkpyk0gkEnMCSoYSo2CPOeaYouT9Xbdg1EFhsRZQqF2tGQEK01u\/tGfWBm4p5+5qsXAeBEPgcRCiOvzPAqWqsABlRI3Clc6tii+l6lzcImrcUMLqssjYUlRQGrO+cRE5j3MgO\/6nrJGXYdfKnWd\/lgsp7iwybf0E33EnIUIWsxy0XRtcg9pASIdxIEcp4OTb5RghA\/IIIleH\/0OOrFaCrcXbIDhkxAKD2AoIR3YshGnldy4+rrHIlNIXMuOeQm7U5mEtm0Zc03IgyU0ikUjMCcI6IZvImzlFT0FRtm1AeijlICddM3ych4JDnChkb\/FiUkYRhjooYu4PdVRYDJouH8eh5GVwUbqChyleREefg9xQtmrtsD6xnEhhlgpOBlLbuVDEH7EyiCORXj0qk8u5Ke+XvvSlZUFOWUNSvO3Xdn2OhQipr6Mvg8hkE3GN+sUtSBbcPOTbFcZM6r3raiugSK5IiDFyDn0Uc0OW3GjIDdn59Lu5wA2nmJ\/jhbVKX10\/65xr9TtX3DA5zjKS3CQSicScgOWFkhMvIWtpq622KtYEyq1NCdne+kAUWtfsIsqSC4P1hDKk6Fhwhrm+6qAkbSsglbXAuRGyJrkBBIiC5R4SPCyex9+IFQIRx0KsuHXEqdgmAo2RJtuKGWGd4LYSs4PwtJ0PHJMlhHuG7B7\/+McXS4dsLMdqkyOCgSAgQ847ShbOoSFoCI0VwREc19pVjoDIuG7Ei+Wq7bqchxzFXpFdXUbIpe\/EE8WnsUCwEGLHtz+YGyxkLEyqF6uozOqXlptEIpFI9AZKiIWCe+klL3lJqTCL3HAvUPJt1gCkQCwLd8UgglGHc3A9IVD24apBUoJoDIPfEQOKlhIWX6K6LcsS8tW2v+\/0m8Kvt7rS9anflGxzO98hJKwMyAdrhVgkcSbDyA2LBNKGdFiuQe2e5zznOQODirm5WIpYscixTdZ1kAMCJehZ0PfNN99cZEKOfmuTRR22sS2XkXNaSoI8BV23ka9Bcmw28rJdWx8QOMHVxlwaPusYK5X95hFJbhKJRGIOQCGxoHDjSO22AKNFJNesWdNqTaC8BOpyRwgIHqQYA7ZHTLhAZEUhN9KtuSooas3v9eY7biOECJHi6gmFro6LQnyyuqaVFdSEY7Iy6TPLhhgTLi6EZxC5IQMWFLEzZMkKppCdmjBcW23EhVWEZQdR7CJH18tShhDpj\/6FHJsyDDmypJBjBP7KGJO+L7ZKXR9yjHTtPqAfLDdcfaoncwGy\/KTlJpFIJBK9gVLjZqJoWSbUJuFOEVTM0kI51RUf5S5+goJkpaA4hylGSt1xY20hVg3KX32ZtobEiI3hvqIQWWiuuuqqEhis7D9riPWJWENGWTqWAqSOhYMLTTyOQntIYFMeAd8hElwzSATyIfhW5pBMqzaSiKhw1Vg8UvDuIDn6HhmIhTItPMnyQkZtMkRgjF0QLVY5FihxM4jhXnvtVT360Y8uMTSytfqUo\/ni2hDhM844o7gTkRtzbhiZm1UkuUkkEok5AMVJAVG+lBDrDaWM4FDozWJ+tpNBw4pCuVL2g2A\/5OfWW28tb+3WP+IKUSkYYbjwwgt\/qMlqso0MJms+WdRSyX9WEBYlsSwsQF0X6pwUjo1AIRNWAXcNgqcHxSGB78kSyeGGsVL3AQccUBYWZXWpw7Zh4UFEhllPbGsckCQysUCm7KVBcvQ9OXItkiPrUcjR+lPkKLYK4UHG+iYZYoSkiXNLIc\/cfYhin6SqLyS5SSQSiTlBKFUKmOWEtUGFWVaWZu0VSpglwG8CbgfVcAH7IQNcH7YXOMuCI9tmUBO4y+2i2q7aNMgFiwPrjU8WC26tJlnoAyobCw5GblgeBPEOynyqg5XFttLB99hjj3Jdzf3Evoh3cV2CdJuWnTqQDwQhSCUZ+RzU2mSJXHAJOZ\/GPei8w8jptMAlxv0m3gYxRYqHufhmGUluEolEYs5AwVJ4XBcq9rIqNGNBkBUZREiGjBuKvE3Zx3fID8XOQuBYgm67Nts3m\/OLJdGnUSRjKXBsbimZWQKtZYf5fxgJCdgXATv99NOLG40cBW2HHP3OEoN4ICNtKe1NkDPLGjmOam1yazakta+YpSZcK0sWcnvLLbeUmK0Nde5pI8lNIpFIzBkoWIqWq2PzzTcvriRxHnX3gdgccTBcLaPevimvaBT7uK2+f7NtCLBqICWUscBmxKbr+RE\/LiJLEZx11lklOyxkZX\/HY81AnpAN1zsIcb4497RaHLNvmD9Il8wun4jNsOudZSS5SSQSiTkDRccy4g2b5eYpT3lKqUlSdz0JBuXSYMno4qLxO1LA2uI4kyo1x9FYMJCOLmnkS4Fj6yvF7Jx1YtIFSBGXmlghazKx5ARJdFxyFNBLjiwyo+Tid\/1gBZmWHLkYN4QcgfxCjn2er28kuUkkEok5hABgbqftttuurO4s4wYxoZAoZzE5gkIVq4vvh8E+sqXE3SgCN27asW0pREG6lkGQqaVuiiyfYfE+yw3Ej5xUKV69enWp9Bv9RUwEJ7OQkWcXmSAGLB\/Sxl37JDFHzmt8o\/KybDTHQnAS3ZDkJpFIJOYQCIusHErZCtAWkox0bwpVRVyWG8G2XcgFq430ZPtI8R6VOt6EbSlfmUsCmVULtiClfujrrELfyO7QQw8tSzEIHkbQAFlzLVdccUWJceoqR3VtBAYL5O5CLJtwDOdjLVKUUDaVpTDGJZwrGUluEolEYs4QRMJbvcUmH\/WoR5W6JFxVfpOxo4y+wnasMeFmaYPtNRYHgbiq0voc1w1iW0pZ6jByhBBIbVadl1KeVSAsMqakbXNNyVgK9xO3miKIMprIZJgcoS4DFjMWLP+PixgLZPOyyy6rjj\/++KELeyZ+GEluEolEYg5BAQqGfcYznlFtuummJeg1apJwZ7DACCb2XcShtIGypMQFIMd6TeJFIuZinGafOFYsbYBkzTK5IS+WFgX3dtxxxxJfIwPMtchUkuYuvVxg8Sg5stKQH6sLckIWSFJTTqNaECtBvTLA1B1CEpPcdEeSm0QikZhDUIAsA6oAb7bZZkU5C35liaBcWRu4W9Quse0gUO4WVeR+UeVXwTr7cG1R7sgRRU1ptzW\/6QfFG4TIfiwe1r8SezLL5EZ\/ZVmpQLzDDjuUYnqsXcgjkma1cnFIw9x0vkdG7Ke4IteW2B37sIAhRo41TI4aUoogBSEiNynoSW7GR5KbRCKRmENQcqr\/sixwSx177LH3xXiopMu9YrmAUbEzyuuL3RFUa\/FIFhcBsfajrLmYEB4F3dqaoOHbb7+9WDvCBSNId17IDUiVl3mm2rOCftx9SInAahYxckVeBskRGUEIyQmxUUzQ8aSOk6\/jqPY7TI5cY9xQxjQsRM6Z5GYyJLlJJBKJOQQlx33EZSJjyvIBLAziRQTxcmeI+6Agh4EyVVFXTZwzzzyzkBtWBITEApNSzGU+DWpidLizHIe1A+aN3LA0ISWCsy19gBSSLTKi8jH337DYGdYvLiQZa0iIejlioMgE2WQZsihlm\/yiSUEnR6Qyyc3SkeQmkUgk5hCUHNcRYrL33nuXCrtibBASKeKUIoXJAjEMlO\/dd99dSA2lLEaGxcGxESVWDcfkMvG3xkpDmXO3aMgBRRzurzq5mfWYG0AauOVkTFmGQcE+lhhyVJ2Y261LvI0CgIK4LR7KEoOocBOSj2OQo8+QIzk35Wi8Qo5BbqywnuRmPCS5SSQSiTkFS4kVq60xZfVocTZcIFa6FlAcsSODQFFSpIiL7CbBtFYQ55aibFkcuGisXu1T4C1LDguDlG\/Hp9BZeijyyCaipJ1\/Xiw3CAj3G5eUuBsuPYTPiuqugwVmFKlw7eRGjhbD5MoKubD8cN2Ro+9DjmrX1OUoJgeBCSKFMNUtN6xJSW66IclNIpFIzCkoQQr0jDPOqLbccssSFCu2w0KMUocj62cYKEuESE0aCzbedNNNpWCdAFhKVxyIGB7khvtE3RwBy4KQ\/a5RypQ4IoUoCEIOiwNLBqLErTOripmMXJdgYitxW63btaoxU68fNAyum+vJitoqHgssJkcWIASGHP2P5IQcmySxTm4cT2o\/oiVNnRxZeXyfBGc0ktwkEonEnILVhVXh8ssvL8swiJkRg8OVIluHW6mLImRBkBWE3Nx4443FnUWhc5GwHrC8+OQm4a7S\/BYNcWG58IlsKTjHCrRmzZoSs4JwcceEZWfWQEYIhjWmxC9xK4lb8r++u\/Yu5AbpMxaCicXw+N++XeRof\/IzpuREjlyOF198cbEoGR+uLla2WZXjLCHJTSKRSMwxKEgp3Ntuu211zDHHFOWqOi4LASXahdwgMqwKCBGXCcI0yuLTBsqZ9YGL59Zbb63e9ra3laUDWH5mmdyAeBgWF9Wejz766OKOuuCCC4rbr4u1hLzEGpGj7DOWGXKd5JqD3Fj6IeTokxyT3HRDkptEIpGYY3AFiZMRCCtj6pnPfGZxZbDGDIu3qYO1ABES04EsUdSUeRdiVIftEQGuFSnQ0fwfVolZBReQIOg999yzyFEKODdfc7X1QXDt5EaOrrkux3ExSo5+n+S4KwlJbhKJRGKOQfGyFsj0UWH3iCOOKIHFAmInsb6sVCB2rEwWIWW9UV356quvLhlN45KyJB7LjyQ3iUQiMaegRCle2Thr166ttthii5IWzk3FDTTLlpJZg7gXbiDBu+KX9t9\/\/+p1r3tdsZikHOcPSW4SiURijoHgsC4861nPqjbffPNqn332KenX0rHTgtAdLGCyl1RptlaXRTTFuXAvJeYPSW4SiURijoHACFwVH7L11lsXt5RKxeIzktx0B1lJYb\/yyitLWj33FHefGJfE\/CHJTSKRSMwxKGXpxS9\/+cur3XbbrTrttNNKobi0OIwPNWm49Hbeeefi5lODJjOT5hNJbhKJRGKOgdywLkgXPuSQQ6pLL720KOWumVKJ7+M73\/lOKX5Ijueee24pgpjxNvOJJDeJRCIxx0BuZEUp+CYNXH0W6xalUh4fiuyFHC082qUycWI2keQmkUgkFgAypq6\/\/vqS8ZNKeTKwgN15551l6Qgrg6drb36R5CaRSCQWAFwqFLP1hzIIdjKwgKkybNkElYAnLcKXWH4kuUkkEok5R7imVLUVAJsuqckRchSzlMRmfpHkJpFIJBKJxEIhyU0ikUgkEomFQpKbRCKRSCQSC4UkN4lEIpFIJBYKSW4SiUQikUgsFJLcJBKJRCKRWCgkuUkkEolEIrFQSHKTSCQSiURigVBV\/x+\/8uLMFiGVggAAAABJRU5ErkJggg==)\n\n\n\n**Advantages:**\n\n* The user gets recommended the types of items they love.\n* The user is satisfied by the type of recommendation.\n* New items can be recommended; just data for that item is required.\n\n**Disadvantages:**\n\n* The user will never be recommended for different items.\n* Business cannot be expanded as the user does not try a different type of product.\n* If the user matrix or item matrix is changed the cosine similarity matrix needs to be calculated again.\n* Limited content analysis: If the content doesn\u2019t contain enough information to discriminate the items precisely, the recommendation itself risks being imprecise.\n* Over-specialization: Content-based filtering provides a limited degree of novelty since it has to match up the features of a user\u2019s profile with available items. In the case of item-based filtering, only item profiles are created and users are suggested items similar to what they rate or search for, instead of their history. A perfect content-based filtering system may suggest nothing unexpected or surprising.","4ff55f63":"Using IBCF gives us a RMSE score of 1.08 (based on a 2% sample of the train data) which is only a slight improvement on the UBCF method","182fce67":"* It is reasonable to expect that movies with a high number of ratings have also garnered a high number of views.\n* It is clear looking at the bar graph that Comedy, Drama and Action have the highest number of ratings and therefore views, it is therefore advisable to commission more of these genres of movie in order to increase viewership which in turn will increase revenue.","bbdbb4ac":"## **Ratings Distribution**","0bcb66ae":"<a id=\"section-four\"><\/a>\n# **Data Preprocessing**\n**Preparing raw data:**\n\nWe will first prepare this raw data to make it suitable for our machine learning model. This is a very crucial step while for creating a machine learning model.","55293211":"The current recommendation systems that are bring used and are popular are the content-based filtering and collaborative filtering which works by implementing different information sources to make the recommendations. \n\n- **Content-based filtering (CBF)** : makes recommendations based on user preferences for product features.\n- **Collaborative filtering (CF)**:  mimics user-to-user recommendations (i.e. it relies on how other users have responded to the same items). It predicts users preferences as a linear, weighted combination of other user preferences.\n\nWe have to note that both of these methods have **limitations**: The CBF can recommend a new item but needs more data on user preferences to give out the best match. On the other hand, the CF requires large dataset with active users who rated the product before to make the most accurate predictions. The combination of both of these methods is known as hybrid recommendation systems.","44345378":"# **Movie Published per Year**","f7c9129b":"# **Table of contents:**\n- [Import libraries and datasets](#section-one)\n- [Loading data](#section-two)\n- [Evaluating Data](#section-three)\n- [Data preprocessing](#section-four)\n  * [Checking for missing values column wise](#subsection-one)\n  * [Checking for duplicates records](#subsection-two)\n  * [Create copy](#subsection-three)\n  * [Evaluating Length of Unique Values](#subsection-four)\n  * [Evaluating unique values for movies](#subsection-four)\n  * [Joining Datasets](#subsection-four)\n- [Exploratory data analysis](#section-four)\n- [Collaborative and Content base filtering](#section-five)\n- [content Based Filtering](#section-five)\n- [Collaborative Based Filtering](#section-six)\n  * [Item-Item based](#subsection-one)\n  * [User-User](#subsection-two)\n  * [Singular value decomposition](#subsection-three)\n- [Model Building](#section-seven)\n- [Attempt prediction with altering parameters](#section-eight)\n- [Submission](#section-nine)\n- [Links to the Notebooks](Section-)\n- [Links to Github and Trello](Section)\n- [Conclusion](#section-ten)\n- [Collaborators](Section-)\n- [Acknowledgements](#section-eleven)\n- [References](#section-twelve)\n- [Comet](#section-thirteen)\n\n","0da46098":"# Average Runtime Per Annum","5bb51106":"* The top 5 genres are, in that respect order: Drama, Comedy, Action, Thriller, and Romance. ","6cea7291":"\nIn this notebook, the movieLens dataset was used to create our recommender system. The dataset draws on movie ratings and movie specific data dating back over 50 years. The EDA revealed to us that there was an increase in movie production from 1990 to 2000 which subsequently slowed down in the last few years.\n\n\nWe observed that a high percentage of our movies were rated above  3  with the top 3 occurring ratings being 4, 3 and 5 in that order and that alone comprised 50% of total ratings. There are 19 unique movie genres in the dataset with Drama, comedy and thriller being the 3 most popular genres.\n\n\nWe attempted  4 different techniques for building a recommender system. Due to its computational inefficiency we excluded the content base method as a solution. \n\n\nIn order to produce new recommendations we attempted collaborative based filtering methods because they draw only on past interactions between users and items. These methods do not require item meta-data like their content-based counterparts. This has an added advantage of adapting users' interest which might change over time.\n\n\nWe found that  sparsity and scalability were a challenge when we attempted both user-based and item-based memory methods. We settled on the singular value decomposition(SVD), a collaborative filtering method that deals with the sparsity that  we had with the user-user and item-item memory based methods, the advantage of being computationally more efficient than content based method .\n\n\nThe SVD model was able to predict new ratings with a RMSE score of 0.79343 on kaggle.\n\n\n**Possible improvements:**\n\nCollaborative filtering methods have an issue with the cold start problem, which the content based filtering method doesn\u2019t. This problem can be addressed by implementing a hybrid recommender system that uses a combination of both content and collaborative filtering based methods.\n","f88c2a7c":"### **Base Algorithm**","63c2f47c":"For effective experimentation and version controll we used Comet. Comet, built specifically for Machine Learning, allows us to track changes to our models as we develop, train, and test them. It provides a convenient graphical interface to moniter model performance while tweaking the model, along with the ability to reproduce any logged experiment. Below is a guide on how to use Comet.","ed6af6c1":"**Loading Surprise Dataset:**\n\nWe will be using the dataset module which loads the pandas dataframe that is available for this experiment, The reader function is used to parse a file containing ratings data. The default format in which it accepts data is that each rating is stored in a separate line in the order user, movie and rating","793eeca6":"**Observations:**\n* We can observe that the top 10 movies above are similar movies to the movie Innocent released in 2014.\n\n**Recommendations:**\n\n* Since a user will not be pretty impresive with a list of recommendations, a possible improvement for this content based recommendation system would be to only keeping the most recent.\n\n* Content-based filtering is not practical, or rather, not very dependable when the number of items increases along with a need for clear and differentiated descriptions.\n\n* To overcome all the issues discussed earlier, we can implement collaborative filtering techniques, which have proven to be better and more scalable.\n\n* The content based method is also extremely memory intensive therefore we will focus on collaborative filtering","a41e3300":"There are a number of models that were used before selecting the SVD model as the performing model. By clicking on the models represented, it will directly link to the model on Github.\n\n1. [Baseline model](https:\/\/github.com\/Thami-ex\/unsupervised-predict-streamlit-template\/blob\/master\/Notebooks\/Baseline%20Only%20model.ipynb)\n\n2. [Co Clustering model](https:\/\/github.com\/Thami-ex\/unsupervised-predict-streamlit-template\/blob\/master\/Notebooks\/Co_Clustering%20Model.ipynb)\n\n3. [Non-Negative Matrix Factorization model](https:\/\/github.com\/Thami-ex\/unsupervised-predict-streamlit-template\/blob\/master\/Notebooks\/nmf-model.ipynb)\n\n4. [SVDpp](https:\/\/github.com\/Thami-ex\/unsupervised-predict-streamlit-template\/blob\/master\/Notebooks\/SVDpp%20Model%20.ipynb)","c6b1116b":"# **Number of moviesper director**","14f091a5":"**Observations:**\n* The bar chart reflects the number of movies per director. The chart is layed out such that the directors with the most movies produced are reflected first in descending order of the number of movies per director.\n* Luc Besson is the most prolific director out of all directors in the dataset.\n","fc188ffc":"## **Evaluating Length of Unique Values**","83efd100":"# **Introduction**\n\n\u201cWhat movies should I check out tonight?\u201d\u200a\n\nHow many times have you had to answer this question when you came home from work? As for me\u200a\u2014\u200ayes, I've to answer it for what felt like a million times. From Netflix, ShowMax, to HBO the need to build robust movie recommendation systems is becoming extremely important given the huge demand for personalized content of modern consumers.\n\nAn example of a recommendation system is such as this:\n\nUser X watches Rick and Morty and Dragon Ball Z.\nUser Y does search on Rick and Morty, then the system suggests Dragon Ball Y  from data collected about user X.\nRecommendation systems are used not only for movies but on multiple other products and services like Amazon (Books, Items), Pandora\/Spotify (Music), Google (News, Search), YouTube (Videos) etc.\n\nRecommender systems help users select similar items when something is being chosen online. There are several companies that actually use these systems, as such the biggest companies such Netflix or Amazon would suggest to the users movies that might interest. Other companies such as Yelp use recommender systems to suggest different resturants and services. The main point to use these systems is to reach out to users by provider best customer services and improve customer satisfaction.\n\n","54d1c558":"**Observations:**\n\n* This is a line graph which shows the Top 10 high budget movies of which My Way is the Top budget Movie.","010fe67c":"Parameters:\n\n- n_factors \u2013 The number of factors. Default is 100.\n- n_epochs \u2013 The number of iteration of the SGD procedure. Default is 20.\n- init_mean \u2013 The mean of the normal distribution for factor vectors initialization. Default is 0.\n- init_std_dev \u2013 The standard deviation of the normal distribution for factor vectors initialization. Default is 0.1.\n- lr_all \u2013 The learning rate for all parameters. Default is 0.005.\n- reg_all \u2013 The regularization term for all parameters. Default is 0.02.","574216d0":"<a id=\"subsection-two\"><\/a>\n# **Checking for duplicates records**\n**Checking Duplicate Values:**\n\nAt times our dataset may entail some duplicated values which are not necessary therefore this values must be removed, befor removing these duplicates we are able to first check if we do have them. We will implement this by the code below.","5012aa26":"# **Visualising Ratings**","964f00d5":"# **Visualising Movies**","4a105a07":"# Links\n\n- [Github](https:\/\/github.com\/Thami-ex\/unsupervised-predict-streamlit-template)\n- [Trello Board](https:\/\/trello.com\/b\/9pCAjCmW\/team5unsupervised)","a5720d2b":"**Observations:**\n* Drama, Comedy, Action, Thriller and adventure are the top 5 genre in the dataset.\n\n**Recommndations:**\n* Netflix should endeavor to match the order of genre of movies available in terms of quantity to the popularity of the genre so as to maximise the views, this in turn will maximise the revenue in films.","d8113d1c":"# **Acknowledgements**","13870a8b":"Movies:\n\n* movieId : Identifier for movies used\n\n* title : These were entered manually or imported from https:\/\/www.themoviedb.org\/, and include the year of release in parentheses. Errors and inconsistencies may exist in these titles.\n\n* genres: Genres are a pipe-separated list, and are selected from the following:\n\n    * Action\n    * Adventure\n    * Animation\n    * Children's\n    * Comedy\n    * Crime\n    * Documentary\n    * Drama\n    * Fantasy\n    * Film-Noir\n    * Horror\n    * Musical\n    * Mystery\n    * Romance\n    * Sci-Fi\n    * Thriller\n    * War\n    * Western\n    * (no genres listed)","890274ac":"# **Visualising Genres**\n\nThe genres variable will surely be important while building the recommendation engines since it describes the content of the film (i.e. Animation, Horror, Sci-Fi). A basic assumption is that films in the same genre should have similar contents. I'll attempt to see exactly which genres are the most popular."}}