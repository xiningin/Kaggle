{"cell_type":{"96d58aa1":"code","e3e2d234":"code","b5e61a3c":"code","d6397c4e":"code","7c180339":"code","bd4734d7":"code","2771a922":"code","9ee6e9ec":"code","c9ab9fd4":"code","3f32c8eb":"code","9339eca0":"code","55a71806":"code","f64195aa":"code","87013f22":"code","5c2279ea":"code","ecfb2c7a":"code","2ac02cf9":"code","9ce3a73c":"code","dbddadaf":"code","3bf1c3f4":"markdown","aadfe3df":"markdown","d4be7ede":"markdown","35364eeb":"markdown","440dd7b1":"markdown","b55c8f3e":"markdown","777e86aa":"markdown","304c503d":"markdown","837c9795":"markdown","7767d7a7":"markdown","ed9a33f3":"markdown","e9009d74":"markdown","928c4505":"markdown","dcc566cd":"markdown","da1b5f89":"markdown","71ed5310":"markdown","48a8a814":"markdown","10067587":"markdown","94136d24":"markdown","f6a00f52":"markdown","18cccdb5":"markdown","f04bb052":"markdown","23512d8e":"markdown"},"source":{"96d58aa1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #matplotlib.pyplot is for plotting <br>\nplt.style.use('ggplot')\nimport collections #collections for frequency tables\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('k\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e3e2d234":"df = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')\ndf.head()","b5e61a3c":"df.columns = df.columns.str.replace(' ', '_')","d6397c4e":"for col in df.columns:\n    print(col)\n    print(df[col].unique())\n    print('\\n'*3)","7c180339":"df_row_index = df.index[df['Category']=='1.9'].tolist()\nprint(df_row_index)","bd4734d7":"df_shifted = df.shift(1,axis = 1)\ndf.loc[10472] = df_shifted.loc[10472]\ndf['App'][10472] = 'Life Made WI-Fi Touchscreen Photo Frame'\ndf['Category'][10472] = 'LIFESTYLE'\ndf.loc[10470:10475]","2771a922":"df.info() #with duplicates\nprint('\\n\\n\\n')\ndf.drop_duplicates(subset='App',keep='first',inplace = True)\ndf.info() #without diplicates","9ee6e9ec":"df['Installs'].value_counts()","c9ab9fd4":"df['Installs'] = df[\"Installs\"].apply(lambda x: x.replace('+',''))\ndf['Installs'] = df[\"Installs\"].apply(lambda x: x.replace(',',''))\ndf['Installs']=pd.to_numeric(df['Installs'])\ndf['Installs'].value_counts()","3f32c8eb":"df['Price'].value_counts()","9339eca0":"df['Price'] = df['Price'].apply(lambda x: x.replace('$',''))\ndf['Price']=pd.to_numeric(df['Price'])\ndf['Price'].value_counts()\n# df['Price'].isnull().any()","55a71806":"categories_list = df['Category'].unique().tolist()\ncategories_list","f64195aa":"total_apps = len(df['App'].index)\ntotal_installs = df['Installs'].sum()\ndf['Price*Installs'] = df['Price']*df['Installs']\ntotal_money_spent = df['Price*Installs'].sum()\n\nprint('TOTAL NUMBER OF APPS IS',total_apps)\nprint('TOTAL NUMBER OF DOWNLOADS IS',total_installs)\nprint('TOTAL PRICE FOR ALL APPS',total_money_spent,'$')","87013f22":"def keys_values_lists_descending(categories_list,values_list):\n    pairs_list = zip(categories_list,values_list)\n    total_dict = dict(pairs_list)\n    freq_list = collections.Counter(total_dict)\n    top_dict = dict(freq_list.most_common())\n    keys = list(top_dict.keys())\n    values = list(top_dict.values())\n    keys.reverse()\n    values.reverse()\n#     print(keys)\n#     print(values)\n    return keys,values","5c2279ea":"app_number_list = []\n\nfor category in categories_list:\n    df_temp = df[(df['Category'] == category)]\n    app_number_list.append(len(df_temp['App'].index))\n\n# print(categories_list)\n# print(app_number_list)\nkeys,values = keys_values_lists_descending(categories_list,app_number_list)\n# print(keys)\n# print(values)\n\nfig,ax = plt.subplots(figsize=(20,10))\nax.set_title(\"TOTAL APPS PER CATEGORY\", fontsize=18)\nax.set_xlabel(\"Number of Apps 1e10\", fontsize=18);\nax.barh(keys,values)\n\n# set individual bar lables using above list\nindex = 0\nfor i in ax.patches:\n    # get_width pulls left or right; get_y pushes up or down\n    ax.text(i.get_width()+.3, i.get_y()+.1, str(round((values[index]\/total_apps)*100,2))+'%', fontsize=10,color='dimgrey')\n    index = index + 1\n\nplt.show\n","ecfb2c7a":"installs_number_list = []\n\nfor category in categories_list:\n    df_temp = df[(df['Category'] == category)]\n    installs_number_list.append(df_temp['Installs'].sum())\n\nkeys,values = keys_values_lists_descending(categories_list,installs_number_list)\n\nfig,ax = plt.subplots(figsize=(20,10))\nax.set_title(\"TOTAL INSTALLS PER CATEGORY PER CATEGORY\", fontsize=18)\nax.set_xlabel(\"Number of Apps 1e10\", fontsize=18);\nax.barh(keys,values)\n\n# set individual bar lables using above list\nindex = 0\nfor i in ax.patches:\n    # get_width pulls left or right; get_y pushes up or down\n    ax.text(i.get_width()+.3, i.get_y()+.1, str(round((values[index]\/total_installs)*100,2))+'%', fontsize=10,color='dimgrey')\n    index = index + 1\nplt.show","2ac02cf9":"money_category_list = []\n\nfor category in categories_list:\n    df_temp = df[(df['Category'] == category)]\n    money_category_list.append(df_temp['Price*Installs'].sum())\n\nkeys,values = keys_values_lists_descending(categories_list,money_category_list)\n# print(keys)\n# print(values)\n\nfig,ax = plt.subplots(figsize=(20,10))\nax.set_title(\"TOTAL PRICES PER CATEGORY\", fontsize=18)\nax.set_xlabel(\"Dollars 1e8\", fontsize=18);\nax.barh(keys,values)\n\n# set individual bar lables using above list\nindex = 0\nfor i in ax.patches:\n    # get_width pulls left or right; get_y pushes up or down\n    ax.text(i.get_width()+.3, i.get_y()+.1, str(round((values[index]\/total_money_spent)*100,2))+'%', fontsize=10,color='dimgrey')\n    index = index + 1\nplt.show","9ce3a73c":"ratio_list = []\n\nfor category in categories_list:\n    df_temp = df[(df['Category'] == category)]\n    total_apps_in_category = len(df_temp['App'].index)\n    total_installs_in_category = df_temp['Installs'].sum()\n    ratio_installs_per_app_in_category = total_installs_in_category\/total_apps_in_category\n    ratio_list.append(ratio_installs_per_app_in_category)\n\nkeys,values = keys_values_lists_descending(categories_list,ratio_list)\n\nfig,ax = plt.subplots(figsize=(20,10))\nax.set_title(\"RATIO INSTALLS PER APPS PER CATEGORY\", fontsize=18)\nax.set_xlabel(\"Number of Apps 1e7\", fontsize=18);\nax.barh(keys,values)\n\n# set individual bar lables using above list\nindex = 0\nfor i in ax.patches:\n    # get_width pulls left or right; get_y pushes up or down\n    ax.text(i.get_width()+.3, i.get_y()+.1, str(round((values[index]))), fontsize=10,color='dimgrey')\n    index = index + 1\n\nplt.show\n","dbddadaf":"for category in categories_list:\n    installs_number_list = []\n    df_temp = df[(df['Category'] == category)]\n    df_temp = df_temp.sort_values('Installs', axis = 0, ascending = False)\n    keys = df_temp['App'][:5].tolist()\n    values = df_temp['Installs'][:5].tolist()\n    keys.reverse()\n    values.reverse()\n#     print(keys)\n#     print(values)\n\n    fig,ax = plt.subplots()\n    ax.set_title(\"TOTAL 5 INSTALLS PER APP IN CATEGORY OF {0}\".format(category),fontsize=18)\n    ax.set_xlabel(\"Number of Installs\", fontsize=18);\n    ax.barh(keys,values)\n    \n#     set individual bar lables using above list\n    index = 0\n    for i in ax.patches:\n        # get_width pulls left or right; get_y pushes up or down\n        ax.text(i.get_width()+.3, i.get_y()+.5, str(round((values[index]))))\n        index = index + 1\n        \n    plt.show(block=False)\n","3bf1c3f4":"## TOTAL INSTALLS PER CATEGORY","aadfe3df":"## TOTAL APPS PER CATEGORY","d4be7ede":"> It is import to recognize the leaders in each category and learn from their success\n> For this reaseon, the most installed apps in each category is demonstrated below","35364eeb":"## Unique values analysis\n> Look at unique values to find if some data is wrongly placed","440dd7b1":"## Handle duplicates \n> Now need to drop duplicates of Apps, compare the numbers<br>\n> 10841 Apps before drop<br>\n> 9660 Apps after drop<br>","b55c8f3e":"# Data at a glance","777e86aa":"> It is clear from the bar chart that FAMILY,GAME and TOOLS Apps are almost <b>40%<\/b> of the whole market, which means <i>high level of competition<\/i>","304c503d":"## Shift the data\n> It is clear that some data is wrongly placed during the analysis of unique values.<br>\n> In category column '1.9' is clearly wrong.<br>\n> Need to locate the row<br>","837c9795":"> Shift the row to the right<br>\n> Correct the name of App<br>\n> Correct the Category of App<br>","7767d7a7":"# Clean the data","ed9a33f3":"## Clean data format in Price column\n> For our analysis we focus on Install and Price categories<br>\n> Price need to be in int64 format without any symbols<br>\n> Get rid of $ <br>\n> Convert to numeric values","e9009d74":"## TOTAL PRICES PER CATEGORY","928c4505":"# VISUALISE DATA","dcc566cd":"# MOBAPP STUDIO PROJECT\n## Research of the Google Play Store\n> The goal is to analyze the market\n> 1. Size of the market (total apps,installs,downloads)\n> 2. Size of the market per category (total apps,installs,downloads with percentages)\n> 3. Ratios of installs per apps per category\n> 4. Istalls per app in each category (top 5 per category)","da1b5f89":"## TOTAL DATA\n> FOCUSING ON NUMBER OF APPS,DOWNLOADS,PRICES FOR THE WHOLE MARKET <br>\n> Get the categories list for all plots below to be used","71ed5310":"> It is interesting to see that FAMILY,GAME and TOOLS being <b>the most number of apps categories<\/b> are not even top 5 due to ratio of installs per apps per category <br>\n> It is worth noticing that COMMUNICATION category probably has <b>the highest competition due to top ratio of installs per apps","48a8a814":"## TOTAL DATA SUMMARY\n> TOTAL NUMBER OF APPS IS <b> 9660 <\/b><br>\n> TOTAL NUMBER OF DOWNLOADS IS <b>75 122 938 527 <\/b><br>\n> TOTAL PRICE FOR ALL APPS IS <b>291 148 457.79 $<\/b>\n<br>\n<br>\n> The total data will be used in ratios\/percentages like\n> - Apps per category\n> - Installs per category\n> - Money per category","10067587":"> However, almost <b>40%<\/b> of installs is spread among GAME,COMMUNICATION and TOOLS meaning that FAMILY has lower <i>installs per application ratio<\/i>","94136d24":"## Clean data format in Installs column\n> For our analysis we focus on Install and Price categories<br>\n> Installs need to be in int64 format without any symbols<br>\n> Get rid of , and + <br>\n> Convert to numeric values","f6a00f52":"## Format the columns first\n> Replace space with underscore from column names <br>","18cccdb5":"## TOP 5 INSTALLS  PER APP FOR EACH CATEGORY","f04bb052":"> The reason for FAMILY having lower <i>installs per application ratio<\/i> may be the higher prices.<br>\n> Almost <b>40%<\/b> percent of all market prices is located in FAMILY CATEGORY","23512d8e":"> The function above is used to get categories and values respectively <br>\n> Sort their values in descending order <br> \n> Return categories and values<br>\n> The output will be used in plotting horizontal bar charts<br>"}}