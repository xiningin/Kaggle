{"cell_type":{"f2e51411":"code","66280ae6":"code","a5fb2d0b":"code","f322b4e2":"code","fe54b23a":"code","8566e622":"code","0e90cb3a":"code","82abaead":"code","5ba688c6":"code","d5e513b2":"code","22adfe08":"code","7db0fc37":"code","ae304fe4":"code","97fe14e2":"code","500e1c4f":"code","5b05230a":"code","fee8c911":"code","cb7ca29f":"code","d13c85da":"code","8d9b323c":"code","0038c550":"code","72494bf8":"code","dcd2c85f":"code","60197eb1":"code","1056e828":"code","92927b75":"code","dab007ee":"code","0a1bb346":"code","d42b66ba":"code","8f16bbdf":"code","b4fd1814":"code","dce20e2d":"code","c782c199":"code","90c17a79":"code","8ed5e2ec":"code","2bbaa77f":"code","44730151":"code","d7aa2b57":"markdown","42b9c1b8":"markdown","8c9dd7a4":"markdown","74a0d870":"markdown","c27529e5":"markdown","c25ddb15":"markdown","8d1e79cb":"markdown","5adc5214":"markdown","6e8bb457":"markdown","2a75eeae":"markdown","eef967d1":"markdown","b0bad40f":"markdown","e26129b4":"markdown","f643d52d":"markdown","8f10d97c":"markdown","19aee429":"markdown"},"source":{"f2e51411":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","66280ae6":"import tensorflow.keras.layers as L\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dropout\nimport nltk\nfrom sklearn.metrics import accuracy_score\nfrom tensorflow.keras.losses import SparseCategoricalCrossentropy\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport numpy as np\nfrom string import punctuation\nfrom nltk.corpus import stopwords\nimport re\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom sklearn.model_selection import train_test_split","a5fb2d0b":"df = pd.read_csv(\"\/kaggle\/input\/covid-19-nlp-text-classification\/Corona_NLP_train.csv\",encoding=\"latin-1\")","f322b4e2":"test_data = pd.read_csv(\"\/kaggle\/input\/covid-19-nlp-text-classification\/Corona_NLP_test.csv\")\n","fe54b23a":"df.head()\n","8566e622":"df['Sentiment'].value_counts()\n","0e90cb3a":"def encode_sentiment(sentiment):\n  if sentiment==\"Neutral\":\n    return 0\n  elif sentiment==\"Positive\":\n    return 2\n  elif sentiment==\"Negative\":\n    return 1\n  elif sentiment==\"Extremely Positive\":\n    return 2\n  elif sentiment==\"Extremely Negative\":\n    return 1","82abaead":"df['new_sentiment'] = df['Sentiment'].apply(encode_sentiment)\n","5ba688c6":"df['new_sentiment'].value_counts()\n","d5e513b2":"train_df = df[['OriginalTweet','new_sentiment']]\n","22adfe08":"train_df.head()\n","7db0fc37":"train_df = train_df.sample(frac=1)\n","ae304fe4":"sentiment = train_df['new_sentiment'].values\n","97fe14e2":"def process_text(text):\n  text = str(text) #Convert string to str\n  #Lowers the string\n  text = text.lower()\n  #Removes the full url\n  url_remove = re.compile(r'(http|ftp|https):\/\/([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:\/~+#-]*[\\w@?^=%&\/~+#-])?')\n  text = re.sub(url_remove,' ',text)\n  #Removes the punctuation\n  text = ''.join([string for string in text if string not in punctuation and not string.isdigit()])\n  #Removes any more special characters\n  special_character = re.compile(r'[^a-zA-Z]')\n  text = re.sub(special_character,' ', text)\n  text = text.strip() #Strip white spaces\n  text = text.split(' ')\n  text = ' '.join([string for string in text if string not in stopwords.words('english')])#Removing all stop words\n  return text","500e1c4f":"train_df['processed_tweet'] = train_df['OriginalTweet'].apply(process_text)","5b05230a":"train_df.head()","fee8c911":"tokenizer = Tokenizer()","cb7ca29f":"tokenizer.fit_on_texts(train_df['processed_tweet'].values)","d13c85da":"train =  tokenizer.texts_to_sequences(train_df['processed_tweet'].values)","8d9b323c":"train = pad_sequences(train,padding='post')","0038c550":"x_train , x_test , y_train , y_test = train_test_split(train,sentiment,test_size=0.2,random_state=42)","72494bf8":"embedding_vectors = 30\nVOCAB_SIZE = len(tokenizer.word_index)+1","dcd2c85f":"model = tf.keras.Sequential([\n    L.Embedding(VOCAB_SIZE,embedding_vectors, input_length=x_train.shape[1]),\n    L.Bidirectional(L.LSTM(256,return_sequences=True)),\n    L.GlobalMaxPool1D(),\n    L.Dropout(0.4),\n    L.Dense(256, activation=\"relu\"),\n    L.Dropout(0.4),\n    L.Dense(3)\n])","60197eb1":"model.compile(loss=SparseCategoricalCrossentropy(from_logits=True),\n              optimizer='adam',metrics=['accuracy']\n             )","1056e828":"model.summary()","92927b75":"model.fit(x_train,y_train,epochs=2,\n          validation_data=(x_test,y_test))","dab007ee":"test = test_data[['OriginalTweet','Sentiment']]","0a1bb346":"test['processed_tweet'] = test_data['OriginalTweet'].apply(process_text)","d42b66ba":"test['new_sentiment'] = test_data['Sentiment'].apply(encode_sentiment)","8f16bbdf":"test.drop(['OriginalTweet','Sentiment'],inplace=True,axis=1)","b4fd1814":"test.head()","dce20e2d":"test_tweet = test['processed_tweet'].values\ntest_sentiment = test['new_sentiment'].values","c782c199":"convert_seq = tokenizer.texts_to_sequences(test_tweet)","90c17a79":"convert_seq = pad_sequences(convert_seq,padding='post')","8ed5e2ec":"predict = model.predict_classes(convert_seq)","2bbaa77f":"print(f\"The accuracy is : { accuracy_score(test_sentiment,predict)*100}%\")","44730151":"sns.heatmap(confusion_matrix(test_sentiment,predict),annot=True, fmt=\"d\")","d7aa2b57":"<H3>Preprocessing Text<\/h3>\n\nFor Preprocessing we will , \n*   Convert the text to string\n*   Lower the string\n*   Create a Regular Expression to remove any URL's\n*   Removing punctuation\n*   Removing any special characters\n*   Remove stopwords","42b9c1b8":"<h3>Making predictions on test data<\/h3>","8c9dd7a4":"<h3>Tokenizing the text<\/h3>","74a0d870":"Converting the text into integer sequence","c27529e5":"Padding post the text with '0' so they all be of same length so we can fit them into the model","c25ddb15":"*   Importing the required library's\n*   Cleaning the data\n  *   Converting the text to lower case\n  *   Removing URL's\n  *   Removing stop words\n  *   Removing punctuation's\n\n*   Preparing the text and building the model\n  *   Tokenizing the text\n  *   Converting the texts to sequences\n  *   Padding the sequence\n  *   Building the model & model summary\n  *   Training the model\n\n\n*   Predicting on test data and calculating accuracy score and plotting confusion matrix\n\n\n\n\n\n","8d1e79cb":"<h3>Training the data<\/h3>","5adc5214":"<h3>Making predictions on test data<\/h3>","6e8bb457":"In this kernel i will be performing sentiment prediction for 'Corona Tweets'  using bi-directional LSTM. The kernel will be having these section and will be explaining it as you scroll","2a75eeae":"Where,\n*   0 - Neutral\n*   1 - Negative\n*   2 - Positive\n","eef967d1":"<h3>Building the Model<\/h3>","b0bad40f":"<h3>Confusion Matrix<\/h3>","e26129b4":"<h3>Importing required library's<\/h3>","f643d52d":"Creating a new column called 'new_sentiment' and applying the 'encode_sentiment' function to the 'sentiment' column which results in encoding the values to an integer","8f10d97c":"Since we have unique values like 'Positive' , 'Negative' , 'Neutral' , 'Extremely Positive' , ' Extremely Negative' we will just convert them to 'Positive' , 'Negative, 'Neutral' with it's corresponding integer value","19aee429":"If you liked this kernel , Please give it an upvote! :) "}}