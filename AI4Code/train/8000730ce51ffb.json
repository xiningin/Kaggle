{"cell_type":{"afbb2f96":"code","b57757e1":"code","a8e0b71e":"code","d9799036":"code","ff47f0a5":"code","ff5355ee":"code","a17291fd":"code","2ddafb4c":"code","efd3b234":"code","73ffe3b3":"code","7992a294":"code","bc9fc4a4":"code","424f73f6":"code","7d174cf5":"code","ef38b557":"code","e51bddba":"code","5a6419b8":"code","366733fc":"code","f14b8445":"code","97eac21a":"code","c65283b1":"code","f3348429":"code","7c1a86ff":"code","0f3afc97":"code","4448754a":"code","c586efb5":"code","264d3bff":"code","76d5c31a":"code","4930c15f":"code","24cec10b":"code","8b7f15a1":"code","825e7fb3":"code","4c6c7bbb":"code","91b5086d":"code","d05baf7f":"markdown","73d020f0":"markdown","cae30bcb":"markdown","db0f4128":"markdown","a16fa60d":"markdown","da5913f7":"markdown","d3bf25ef":"markdown","6fac8c01":"markdown","40276e26":"markdown","48dac2ef":"markdown","54fcdcbd":"markdown","d7f66805":"markdown","b1d965b8":"markdown"},"source":{"afbb2f96":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b57757e1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a8e0b71e":"df = pd.read_csv(\"\/kaggle\/input\/travel-insurance-prediction-data\/TravelInsurancePrediction.csv\")\ndf.head(n=5)","d9799036":"df.info()","ff47f0a5":"df.isnull().sum()","ff5355ee":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ncol=['Employment Type','Employment Type','FrequentFlyer','EverTravelledAbroad','GraduateOrNot']\ndf[col]=df[col].apply(le.fit_transform)\ndf.head(n=5)","a17291fd":"df.describe()","2ddafb4c":"df.duplicated().sum()","efd3b234":"sns.countplot(x='TravelInsurance',data=df)\nplt.show()","73ffe3b3":"sns.countplot(x='Employment Type',data=df)\nplt.show()","7992a294":"sns.countplot(x='GraduateOrNot',data=df)\nplt.show()","bc9fc4a4":"sns.countplot(x='ChronicDiseases',data=df)\nplt.show()","424f73f6":"sns.countplot(x='FrequentFlyer',data=df)\nplt.show()","7d174cf5":"sns.countplot(x='EverTravelledAbroad',data=df)\nplt.show()","ef38b557":"sns.distplot(df['Age'],hist=False)\nplt.show()","e51bddba":"sns.distplot(df['AnnualIncome'],hist=False)\nplt.show()","5a6419b8":"sns.displot(df['FamilyMembers'])\nplt.show()","366733fc":"plt.figure(figsize=(10,6))\nsns.heatmap(df.corr(),cmap='coolwarm',annot=True)","f14b8445":"plt.figure(figsize=(10,8))\nsns.boxplot(data=df,orient='h')","97eac21a":"x = df.drop(['Unnamed: 0','TravelInsurance'],axis=True)\ny = df['TravelInsurance']","c65283b1":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=101)","f3348429":"from sklearn.preprocessing import MinMaxScaler\nmscale=MinMaxScaler()\nmscale.fit_transform(x_train)\nmscale.transform(x_test)","7c1a86ff":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score,confusion_matrix","0f3afc97":"keys = ['KNN','LogisticRegression','DecisionTree','Randomforest','supportvector','Gaussian']\nvalues = [KNeighborsClassifier(),LogisticRegression(),DecisionTreeClassifier(),RandomForestClassifier(),SVC(),GaussianNB()]\nmodels = dict(zip(keys,values))\nprint(models)","4448754a":"for name,algo in models.items():\n    model = algo\n    model.fit(x_train,y_train)\n    predict = model.predict(x_test)\n    train_acc = model.score(x_train,y_train)\n    test_acc = model.score(x_test,y_test)\n    print(name,'Training acc:',train_acc,'Test acc:',test_acc)","c586efb5":"from sklearn.model_selection import  GridSearchCV\nparams = {'max_depth': [2,4,6,8,10,12,14,16],\n'min_samples_split': [2,3,4,5,6],\n'min_samples_leaf': [1,2,3]}\nclf = DecisionTreeClassifier()\ngcv = GridSearchCV(estimator=clf,param_grid=params)\ngcv.fit(x_train,y_train)","264d3bff":"model = gcv.best_estimator_\nmodel.fit(x_train,y_train)\ny_train_pred = model.predict(x_train)\ny_test_pred = model.predict(x_test)\nprint(f'Train score {accuracy_score(y_train_pred,y_train)}')\nprint(f'Test score {accuracy_score(y_test_pred,y_test)}')","76d5c31a":"from sklearn import tree\nplt.figure(figsize=(10,10))\nfeatures = x.columns\nclasses = ['0','1']\ntree.plot_tree(model,feature_names=features,class_names=classes,filled=True)\nplt.title('Afetr Pre Pruning')\nplt.show()","4930c15f":"path = clf.cost_complexity_pruning_path(x_train, y_train)\nccp_alphas, impurities = path.ccp_alphas, path.impurities","24cec10b":"clfs = []\nfor ccp_alpha in ccp_alphas:\n    clf = DecisionTreeClassifier(random_state=0, ccp_alpha=ccp_alpha)\n    clf.fit(x_train, y_train)\n    clfs.append(clf)\nprint(\"Number of nodes in the last tree is: {} with ccp_alpha: {}\".format(\n    clfs[-1].tree_.node_count, ccp_alphas[-1]))","8b7f15a1":"clf = DecisionTreeClassifier(random_state=0, ccp_alpha=0.013)\nclf.fit(x_train,y_train)","825e7fb3":"pred=clf.predict(x_test)\nfrom sklearn.metrics import accuracy_score\nprint(\"Training Accuracy :\", clf.score(x_train, y_train))\nprint(\"Testing Accuracy :\", accuracy_score(y_test,pred))","4c6c7bbb":"from sklearn import tree\nplt.figure(figsize=(10,10))\nfeatures = x.columns\nclasses = ['0','1']\ntree.plot_tree(clf,feature_names=features,class_names=classes,filled=True)\nplt.title('Afetr Post Pruning')\nplt.show()","91b5086d":"confusion_matrix(pred,y_test)","d05baf7f":"# Models","73d020f0":"**Load Data**","cae30bcb":"# Data insights\n","db0f4128":"# Exploratory Data Analysis","a16fa60d":"**normalisation**","da5913f7":"# TravelInsurance Prediction","d3bf25ef":"**pre pruning**","6fac8c01":"**visualisation**","40276e26":"# Done","48dac2ef":"* consider decision and it looks like overfitted","54fcdcbd":"**Post Pruning**","d7f66805":"**Gridsearch**","b1d965b8":"**Outlier Treatment**"}}