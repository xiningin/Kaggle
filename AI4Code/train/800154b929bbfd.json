{"cell_type":{"880d02a7":"code","1310811b":"code","e16146f7":"code","47e30ac6":"code","1fff8acf":"code","ce149579":"code","573fc882":"code","2db4c1e2":"code","ac229338":"code","d78e329f":"code","d6a9935e":"code","084f1f02":"code","0c53b5e8":"code","de15ea6c":"code","add03bd3":"code","6bc431d3":"code","de338e0b":"code","f4568b04":"code","a6a71312":"code","50607cdc":"code","523ee871":"code","1e79669a":"code","c90b8627":"code","e7e0b22d":"code","127f0030":"code","bc9886ad":"code","bf621fa6":"code","d8de4f7f":"code","7fa5b157":"code","60ae8921":"code","b40475e1":"code","830b13b3":"code","74de935e":"code","c7435dc4":"code","6b13c5b1":"code","978e0e02":"code","4ca7f4b8":"code","723ff61b":"code","e5e7582b":"code","d16199df":"code","680f2843":"code","a046e8d5":"markdown","edfc1f23":"markdown","1d84c674":"markdown","bee3665f":"markdown","bbbd9822":"markdown","522836ee":"markdown","fa752880":"markdown","4e6f8be8":"markdown","86f60a9c":"markdown","a23576b6":"markdown","969b70bd":"markdown","ec70ad47":"markdown","82a2dc34":"markdown","8d049ccf":"markdown","32971333":"markdown","06d084fc":"markdown","0be5b1d9":"markdown","b3a65030":"markdown","f176a251":"markdown","9556ab74":"markdown","0f980330":"markdown","8ce75e70":"markdown","9d6540f3":"markdown","51982468":"markdown","76ab509d":"markdown","0c77fb6f":"markdown","ffa78f66":"markdown","bbb12a06":"markdown","40b852fb":"markdown","5b764e3b":"markdown","9f65c0b8":"markdown","12454525":"markdown","f071af35":"markdown","feb3f736":"markdown","ef462cfe":"markdown","61b85a89":"markdown","7a9e7900":"markdown"},"source":{"880d02a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport matplotlib.pyplot as plt    # visualization library (g\u00f6rselle\u015ftirme k\u00fct\u00fcphanesi)\nimport seaborn as sns              # visualization library (g\u00f6rselle\u015ftirme k\u00fct\u00fcphanesi)\n\nfrom collections import Counter \n\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1310811b":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","e16146f7":"train_df.columns","47e30ac6":"train_df.head(10)","1fff8acf":"train_df.describe()","ce149579":"train_df.info()","573fc882":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Survived\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature ( \u00f6zelliklerimizi \u00e7a\u011f\u0131rd\u0131k)\n    var = train_df[variable]  \n    \n    # count number of categorical variable(value\/sample)  \n    # (Kategorik De\u011fi\u015fken Say\u0131s\u0131 Say\u0131s\u0131 (De\u011fer \/ \u00d6rnek))\n    varValue = var.value_counts()  \n    \n    # visualize (g\u00f6rselle\u015ftirme)\n    plt.figure(figsize = (9,3))  \n    \n    plt.bar(varValue.index ,varValue)   \n    # for the y-axis (grafi\u011fi y taraf\u0131n\u0131 belirlememize olanak sa\u011fl\u0131yor)\n    \n    plt.xticks(varValue.index , varValue.index.values)  \n    # for the x-axis  (grafi\u011fin x taraf\u0131 ile ilgileniyor)\n    \n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue)) \n    # variable : column name (s\u00fctun ismi)  \n    # varValue: column sum of data among themselves  (s\u00fctun verilerin kendi aras\u0131ndaki toplam\u0131)","2db4c1e2":"category1 =[\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\n\nfor c in category1:\n    bar_plot(c)","ac229338":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))\n    \n    \n#Because the graphical analysis of the columns specified in category2 is very complex, we analyzed differently.\n#(category2 deki belirtilen s\u00fctunlar\u0131n grafik analizi \u00e7ok kar\u0131\u015f\u0131k oldu\u011fu i\u00e7in farkl\u0131 \u015fekilde analiz yapt\u0131k )","d78e329f":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable],bins= 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()\n    ","d6a9935e":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","084f1f02":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"] , as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","0c53b5e8":"# Sex vs Survived \ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending =False)","de15ea6c":"# S\u0130bSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","add03bd3":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","6bc431d3":"train_df[\"age_level\"] = [\"adult\" if age >= 18   else \"child\" for age in train_df.Age]","de338e0b":"train_df[[\"age_level\",\"Survived\"]].groupby([\"age_level\"], as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","f4568b04":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for f in features:\n        # 1st quartile \n        Q1 = np.percentile(df[f],25)  # value (\u00e7ekilen de\u011fer) , percentile of value (de\u011ferin y\u00fczdelik dilimi)\n        # 3rd quartile\n        Q3 = np.percentile(df[f],75)  # value (\u00e7ekilen de\u011fer) , percentile of value (de\u011ferin y\u00fczdelik dilimi)    \n        #IQR \n        IQR = Q3 - Q1 \n        # Outlier step (ayk\u0131r\u0131 ad\u0131m)\n        outlier_step = IQR * 1.5   \n        # detect outlier and their indeces (ayk\u0131r\u0131 de\u011ferleri ve i\u00e7sellerini tespit etmek)\n        outlier_list_col = df[(df[f] < Q1 - outlier_step) | (df[f] > Q3 + outlier_step)].index \n        \n        # (df[f] < Q1 - outlier_step) to calculate the small value (k\u00fc\u00e7\u00fck de\u011feri hesaplamak i\u00e7in) \n        # (df[f] > Q3 + outlier_step) to calculate the great value (b\u00fcy\u00fck de\u011feri hesaplamak i\u00e7in)\n\n        # store indeces \n        outlier_indices.extend(outlier_list_col) # transferred to the empty set  ( bo\u015f k\u00fcmeye aktar\u0131ld\u0131 )\n\n    outlier_indices = Counter(outlier_indices) # Counter: returns the number of data  (verilerin ka\u00e7 adetten olu\u015ftu\u011funu verir)\n    \n    multiple_outliers = list(i for i ,v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","a6a71312":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","50607cdc":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","523ee871":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","1e79669a":"train_df.columns[train_df.isnull().any()]   # i\u00e7inde null de\u011fer bar\u0131nd\u0131ran sat\u0131rlar\u0131 verdi","c90b8627":"train_df.isnull().sum()","e7e0b22d":"train_df[train_df[\"Embarked\"].isnull()]","127f0030":"train_df.boxplot(column = \"Fare\",by=\"Embarked\")\nplt.show()","bc9886ad":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\") \n# Empty values filled with port C \n# (C liman\u0131 ile doldurulmu\u015f bo\u015f de\u011ferler)\n","bf621fa6":"train_df[train_df[\"Embarked\"].isnull()]  \n# No results came because we filled in the blank values \n\n# (bo\u015f de\u011ferleri doldurdu\u011fumuz i\u00e7in hi\u00e7bir sonu\u00e7 gelmedi)","d8de4f7f":"train_df[train_df[\"Fare\"].isnull()]  ","7fa5b157":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3 ][\"Fare\"]))\n# With fillna, we put the average wage of people with a pclass value of 3.\n# (fillna ile , pclass de\u011feri 3 olan ki\u015filerin \u00fccret ortalamas\u0131n\u0131 koyduk.)","60ae8921":"train_df[train_df[\"Fare\"].isnull()]  ","b40475e1":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()\n\n# sns.heatmap => allows us to display data in color in a rectangular box (verileri dikd\u00f6rtegen bir kutu i\u00e7inde renkli olarak g\u00f6stermemizi sa\u011fl\u0131yor)\n# train_df[list1].corr() => the rows made are taken from the master data (belirlenen sat\u0131rlar ana veriden al\u0131nd\u0131)\n# annot = True => show information inside boxes (kutular i\u00e7indeki bilgileri g\u00f6steriyor) \n# fmt = \".2f\" => sensitivity after the comma is set (virg\u00fclden sonraki hassasiyet belirlendi)","830b13b3":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()\n\n# x = \"SibSp\", y = \"Survived\" => x and y values are determined (x ve y de\u011ferleri belirlendi)\n# data = train_df => values from the data set (veri setinden de\u011ferler al\u0131nd\u0131)\n# kind = \"bar\" => chart type determined (grafik tipi belirlendi)\n# size = 6 => graphic size is determined (grafik b\u00fcy\u00fckl\u00fc\u011f\u00fc belirlendi)\n# g.set_ylabels(\"Survived Probability\") => y-axis information (y ekseni bilgisi)\n","74de935e":"g = sns.factorplot(x= \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()\n\n# x = \"Parch\", y = \"Survived\" => x and y values are determined (x ve y de\u011ferleri belirlendi)\n# data = train_df => values from the data set (veri setinden de\u011ferler al\u0131nd\u0131)\n# kind = \"bar\" => chart type determined (grafik tipi belirlendi)\n# size = 6 => graphic size is determined (grafik b\u00fcy\u00fckl\u00fc\u011f\u00fc belirlendi)\n# g.set_ylabels(\"Survived Probability\") => y-axis information (y ekseni bilgisi)","c7435dc4":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\",data = train_df,kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()\n\n# x = \"Pclass\", y = \"Survived\" => x and y values are determined (x ve y de\u011ferleri belirlendi)\n# data = train_df => values from the data set (veri setinden de\u011ferler al\u0131nd\u0131)\n# kind = \"bar\" => chart type determined (grafik tipi belirlendi)\n# size = 6 => graphic size is determined (grafik b\u00fcy\u00fckl\u00fc\u011f\u00fc belirlendi)\n# g.set_ylabels(\"Survived Probability\") => y-axis information (y ekseni bilgisi)","6b13c5b1":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()\n\n# train_df => Data set (veri seti)\n# col = \"Survived\" => y-axis data (y ekseni verisi)\n# sns.distplot, \"Age\", bins = 25 => x-axis data (x ekseni verisi)\n","978e0e02":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\",size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()\n\n# train_df => Data set (veri seti)\n# col = \"Survived\" => y-axis data (y ekseni verisi)\n# rplt.hist, \"Age\", bins = 25 => x-axis data (x ekseni verisi)\n","4ca7f4b8":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","723ff61b":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","e5e7582b":"train_df[train_df[\"Age\"].isnull()]","d16199df":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","680f2843":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","a046e8d5":"For two people who are not sure where they got on the ship; We can estimate from which port he got on, based on the fare he paid, and the class room he traveled in.\n\n(Gemiye nerden bindi\u011fi belli olmayan iki ki\u015fi i\u00e7in ; \u00f6dedi\u011fi bilet \u00fccretinden , hangi s\u0131n\u0131f odada seyehat etti\u011finden yola \u00e7\u0131karak\nhangi limandan bindi\u011fini tahmin edebiliriz.)","edfc1f23":"<a id = \"5\" ><\/a>   \n## Numerical Variable (Kategrik S\u00fctunlar) ","1d84c674":"* Passengers who pay higher fare have better survival\n* (Daha y\u00fcksek \u00fccret \u00f6deyen yolcular\u0131n hayatta kalmas\u0131 daha y\u00fcksektir.)","bee3665f":"* Age is not correlated with sex but it is correlated with parch, sibsp and pclass.\n* (Ya\u015f cinsiyetle ili\u015fkili de\u011fildir, ancak \u00e7ocuk say\u0131s\u0131, e\u015f\/karde\u015f say\u0131s\u0131 ve yolcu s\u0131n\u0131f\u0131 ile ili\u015fkilidir.)","bbbd9822":"<a id = \"15\" ><\/a>  \n## Pclass -- Survived ","522836ee":"<a id = \"6\" ><\/a>   \n\n# Basic Data Analysis (Temel Veri Analizi)\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","fa752880":"The above result indicates that females have a higher survival rate than males. \n(Yukar\u0131daki sonu\u00e7 kad\u0131nlar\u0131n hayatta kalma oran\u0131n\u0131 erkeklere g\u00f6re daha fazla oldu\u011funu belirtiyor )","4e6f8be8":"<a id = \"3\" ><\/a>   \n# Univariate Variable Analysis (S\u00fct\u00fcnlar\u0131n Analizi)\n* Categorical Variable (Kategrik S\u00fctunlar): Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable (Say\u0131sal S\u00fctunlar): Fare, Age and PassengerId","86f60a9c":"<a id = \"19\" ><\/a>\n## Embarked -- Sex -- Fare -- Survived","a23576b6":"* Those less than 10 years of age have a higher survival rate\n* (10 ya\u015f\u0131n alt\u0131ndakilerin hayatta kalma oran\u0131 daha y\u00fcksektir)\n* Oldest passengers (80) survived\n* (En ya\u015fl\u0131 yolcu (80) hayatta kald\u0131)\n* Most 20-year-old passengers did not survive\n* (20 ya\u015f\u0131ndaki yolcular\u0131n \u00e7o\u011fu hayatta kalamad\u0131)\n* Most passengers are in 15-35 age range\n* (\u00c7o\u011fu yolcu 15-35 ya\u015f aral\u0131\u011f\u0131nda)","969b70bd":"* Having a large number of family members reduces the chances of survival.\n* (\u00c7ok say\u0131da aile \u00fcyesine sahip olmak hayatta kalma \u015fans\u0131n\u0131 azalt\u0131r.)","ec70ad47":"<a id = \"1\" ><\/a>   \n# Load and Check Data (Verileri Y\u00fckleme ve Kontrol Etme)","82a2dc34":"According to the above analysis, the higher the number of people with whom it is associated, the lower the survival rate. \n(Yukar\u0131daki analize g\u00f6re yan\u0131nda bulunan insan say\u0131s\u0131 artt\u0131k\u00e7a hayatta kalma oran\u0131 d\u00fc\u015f\u00fcyor)","8d049ccf":"<a id = \"7\" ><\/a>   \n\n# Outlier Detection (Ayk\u0131r\u0131 De\u011fer Tespiti)\n   ","32971333":"According to the above analysis, as the number of children increases, the survival rate increases, but after 3 children there is a sudden decrease. \n\n(Yukar\u0131daki analize g\u00f6re \u00e7ocuk say\u0131s\u0131 artt\u0131k\u00e7a hayatta kalma oran\u0131 art\u0131yor , fakat 3 \u00e7ocuktan sonra ani bir d\u00fc\u015f\u00fc\u015f oluyor)","06d084fc":"* The higher the passenger class, the higher the survival rate\n* (Yolcu s\u0131n\u0131f\u0131 ne kadar y\u00fcksekse, hayatta kalma oran\u0131 o kadar y\u00fcksek)","0be5b1d9":"<a id = \"18\" ><\/a>\n## Embarked -- Sex -- Pclass -- Survived","b3a65030":"* Female passengers have much better survival rate than males\n* (Kad\u0131n yolcular\u0131n hayatta kalma oran\u0131 erkeklere g\u00f6re \u00e7ok daha y\u00fcksektir.)\n* Men who ride from C have a higher rate of staying on the line\n* (C noktas\u0131ndan binen erkeklerin hatta kalma oran\u0131 daha y\u00fcksektir.)","f176a251":"Analysis of survival rates according to the type of room in which people on board are staying. \n\n(Gemideki insanlar\u0131n kald\u0131klar\u0131 oda tipine g\u00f6re hayatta kalma oranlar\u0131n\u0131 analizi. )\n\n\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"] ;   analysis of measurements according to room classes (oda s\u0131n\u0131flar\u0131na g\u00f6re \u00f6l\u00fcmleri analizi.)\n\nas_index = False  => Used for sql style grouping   (sql tarz\u0131 grupland\u0131rma i\u00e7in kullan\u0131l\u0131yor)\n\n.mean()  => We have averaged the measurement values for each room class. (her oda s\u0131n\u0131f\u0131 i\u00e7in \u00f6l\u00fcm de\u011ferlerinin ortalamas\u0131n\u0131 ald\u0131k )\n\n.sort_values(by=\"Survived\",ascending = False)\n\nsort_values  => To get data according to the axes from the table we draw data from ( veri \u00e7ekti\u011fimiz tablodan eksenlere g\u00f6re veri almam\u0131z i\u00e7in )\n\nby =>  we specify the column name we want to sort (s\u0131ralamak istedi\u011fimiz s\u00fctun ad\u0131n\u0131 belirtiriz )\nascending = False   =>  write in descending order (azalan s\u0131ralamda yaz)","9556ab74":"<a id = \"11\" ><\/a>   \n# Visualization (G\u00f6rselle\u015ftirme) ","0f980330":"* Small families have a better chance of survival.\n* (K\u00fc\u00e7\u00fck ailelerin hayatta kalma \u015fans\u0131 daha y\u00fcksektir.)","8ce75e70":"* float64(2) : Fare and Age \n* int64(5): Pclass , Sibsp, Parch , PassengerId and Survived\n* object(5): Cabin, Embarked, Ticket, Name and Sex","9d6540f3":"<a id = \"16\" ><\/a>  \n## Age -- Survived  ","51982468":"<a id = \"17\" ><\/a>   \n## Pclass -- Survived -- Age ","76ab509d":"<a id = \"4\" ><\/a>   \n## Categorical Variable (Kategrik S\u00fctunlar)","0c77fb6f":"<a id = \"9\" ><\/a>   \n\n## Find Missing Value (Eksik De\u011feri Bulun)","ffa78f66":"<a id = \"2\" ><\/a>  \n\n# Variable Description (S\u00fctunlar\u0131 A\u00e7\u0131klama)\n\n1. PassengerId = unique id number to each pessenger(her yolcuya ait benzersiz kimlik numaras\u0131)\n2. Survived: passenger survive(1) or died(0) (yolcu hayatta kald\u0131 (1) veya \u00f6ld\u00fc (0) )\n3. Pclass: passenger class (yolcu s\u0131n\u0131f\u0131)\n4. Name: name (isim)\n5. Sex: gander of passenger (yolcunun cinsiyeti)\n6. Age: age of passenger (yolcunun ya\u015f\u0131)\n7. SibSp: number of siblins\/spouses (karde\u015flerin \/ e\u015flerin say\u0131s\u0131)\n8. Parch: number of parents\/children (ebeveyn \/ \u00e7ocuk say\u0131s\u0131) \n9. Ticket: ticket number (bilet numaras\u0131)\n10. Fare: amount of money spent on ticket (bilete harcanan para miktar\u0131) \n11. Cabin: cabin category (kabin kategorisi)\n12. Embarked: port where passenger embarked (C = Cherbourg , Q = Queenstown , S = Southampton) (yolcunun bindi\u011fi liman)\n","bbb12a06":"* Sex is not informative for age prediction, age distribution seems to be same.\n* (Cinsiyet ya\u015f tahmini i\u00e7in bilgilendirici de\u011fil, ya\u015f da\u011f\u0131l\u0131m\u0131 ayn\u0131 g\u00f6r\u00fcn\u00fcyor.)","40b852fb":"<a id = \"10\" ><\/a>   \n\n## Fill Missing Value (Eksik De\u011feri Doldur)\n* Embarked has 2 missing value (Gemiye Nerden bindi\u011fi bilinmeyen 2 ki\u015fi var)\n* Fare has only 1 (\u00dccreti bilinmeyen 1 ki\u015fi var)","5b764e3b":"<a id = \"13\" ><\/a>   \n## SibSp -- Survived","9f65c0b8":"<a id = \"8\" ><\/a>   \n\n# Missing Value (Eksik de\u011fer)\n* Find Missing Value (Eksik De\u011feri Bulun)\n* Fill Missing Value (Eksik De\u011feri Doldur)","12454525":"# INTRODUCTON (TANITIM)\n<font color = \u2018blue\u2019  >\nContent \n\n1. [Load and Check Data (Data y\u00fckleme)](#1)\n2. [Variable Description (S\u00fctunlar\u0131 A\u00e7\u0131klama)](#2)\n    * [Univariate Variable Analysis (S\u00fct\u00fcnlar\u0131m\u0131z\u0131n Analizi)](#3)\n        * [Categorical Variable (Kategrik S\u00fctunlar\u0131m\u0131z\u0131n)](#4)\n        * [Numerical Variable (Kategrik S\u00fctunlar\u0131m\u0131z\u0131n)](#5)\n3. [Basic Data Analysis (Temel Veri Analizi)](#6)\n4. [Outlier Detection (Ayk\u0131r\u0131 De\u011fer Tespiti)](#7)\n5. [Missing Value (Eksik de\u011fer)](#8)\n    * [Find Missing Value (Eksik De\u011feri Bulun)](#9)\n    * [Fill Missing Value (Eksik De\u011feri Doldur)](#10)\n6. [Visulaization (G\u00f6rselle\u015ftirme)](#11)\n    * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age)](#17)\n    * [Embarked -- Sex -- Pclass -- Survived)](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature)](#20)\n    \n","f071af35":"* Death and survival chart by passenger class and age\n* (Yolcu s\u0131n\u0131f\u0131 ve ya\u015fa g\u00f6re \u00f6l\u00fcm ve hayatta kalma tablosu)","feb3f736":"<a id = \"20\" ><\/a>\n## Fill Missing: Age Feature","ef462cfe":"As seen in the graph, the median line is the closest port of C at 80 units. \n\n(Yukar\u0131daki grafikte g\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere medyan \u00e7izgisi 80 birim \u00fccrete en yak\u0131n C liman\u0131 olmaktad\u0131r.)","61b85a89":"<a id = \"12\" ><\/a>   \n## Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived","7a9e7900":"<a id = \"14\" ><\/a>   \n## Parch--Survived"}}