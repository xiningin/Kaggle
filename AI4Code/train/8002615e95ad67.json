{"cell_type":{"a924f60f":"code","f5d43ec5":"code","2e960754":"code","2a6ae520":"code","4d754873":"code","e08bc35e":"code","46efb4b9":"code","1a2f7b22":"code","35477ae5":"code","34e10b3c":"code","937265cf":"code","a2d5958c":"code","de5c1733":"code","87ce9f3c":"code","dc172428":"code","ec38dcd0":"code","72866de7":"code","772692e0":"code","2ccf1154":"code","69df31da":"code","681d2a3b":"code","2bc47bdf":"code","308faeb2":"code","f226124c":"code","6cb8e7ac":"code","8594b3c1":"code","79c58416":"code","1b4700a5":"code","d92dbe81":"code","dc4fa5a8":"code","f9d0455e":"code","6269dbbe":"code","c1f0c7c9":"code","425d8dbe":"code","6ee47358":"code","f50d708e":"markdown","99279ce8":"markdown","2aa88b9d":"markdown","051ab64b":"markdown","d2f23050":"markdown","a481d2ce":"markdown","cea75067":"markdown","a44c3476":"markdown","561133db":"markdown","626b267b":"markdown","a42ebcfa":"markdown","f0e979d5":"markdown","670fde2a":"markdown","04710979":"markdown"},"source":{"a924f60f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nimport plotly.express as px","f5d43ec5":"df = pd.read_csv('..\/input\/high-value-customers-identification\/Ecommerce.csv', parse_dates=['InvoiceDate'], encoding= 'unicode_escape')\nprint(df.shape)\ndf.head()","2e960754":"df.info()","2a6ae520":"df = df.iloc[:, :-1]\ndf['Year'] = df['InvoiceDate'].dt.year\ndf['Month'] = df['InvoiceDate'].dt.month\ndf['Day'] = df['InvoiceDate'].dt.day\ndf.head()","4d754873":"df.isnull().sum()","e08bc35e":"# Drop missing rows\ndf.dropna(axis = 0, inplace = True)\nprint(df.shape)","46efb4b9":"df['TotalIncome'] = df['Quantity'] * df['UnitPrice']","1a2f7b22":"# Drop rows with no income\nno_income = df[df['TotalIncome'] <=0].index\ndf.drop(no_income, inplace = True)","35477ae5":"# Drop rows with no quantities\ndiscard = df[df['Quantity'] <= 0].index\ndf.drop(discard, inplace=True )\ndf.shape","34e10b3c":"# Checking for outliers using scatterplot\nplt.scatter(df['Quantity'], df['UnitPrice'])\nplt.show()","937265cf":"df[df['UnitPrice'] > 5000]","a2d5958c":"df[df['Quantity'] > 20000]","de5c1733":"# Treat the extreme values as outliers and remove them\noutliers = df[(df['UnitPrice'] > 5000) | (df['Quantity'] > 20000)].index\ndf.drop(outliers, inplace = True)\ndf.shape","87ce9f3c":"df['CustomerID'] = df['CustomerID'].astype('int').astype('category')\n\n# Turning object columns into categories to reduce the used memory\ncategories = ['InvoiceNo', 'StockCode', 'Description', 'Country']\nfor c in categories:\n    df[c] = df[c].astype('category')\nprint(df.info())","dc172428":"years = df['Year'].value_counts()\nyears","ec38dcd0":"pie, ax = plt.subplots(figsize=[12,8])\nlabels = ['2017', '2016']\ncolors = ['goldenrod', 'teal']\nplt.pie(x = years, autopct='%.1f%%', explode=[0.05]*2, labels=labels, pctdistance=0.5, colors = colors)\nplt.title('% of sales by year')\nplt.show()","72866de7":"# Separate sales by year\nsales_16 = df[df['Year'] == 2016]\nsales_17 = df[df['Year'] == 2017]","772692e0":"monthly_16 = sales_16['Month'].value_counts()\nmonthly_16","2ccf1154":"plt.figure(figsize=(8,4))\nmonthly_16.sort_index().plot(color='teal', kind='bar')\nplt.title('# of sales in the months of 2016')\nplt.xlabel('Month')\nplt.ylabel('# of sales')\nplt.grid()\nplt.show()","69df31da":"cash_16 = sales_16.groupby('Month')['TotalIncome'].sum()\n\n\nplt.figure(figsize=(8,4))\ncash_16.sort_index().plot(kind='bar', color='teal')\nplt.title('Total income (pounds) by month in 2016')\nplt.xlabel('Month')\nplt.ylabel('Income (pounds)')\nplt.grid()\nplt.show()","681d2a3b":"quantity_16 = sales_16.groupby('Month')['Quantity'].sum()\n\n\nplt.figure(figsize=(8,4))\nquantity_16.sort_index().plot(kind='bar', color='teal')\nplt.title('Total quantity sold by month in 2016')\nplt.xlabel('Month')\nplt.ylabel('Quantity')\nplt.grid()\nplt.show()","2bc47bdf":"monthly_17 = sales_17['Month'].value_counts()\n\nplt.figure(figsize=(8,4))\nmonthly_17.sort_index().plot(kind='bar', color='goldenrod')\nplt.title('# of sales in the months of 2017')\nplt.xlabel('Month')\nplt.ylabel('# of sales')\nplt.grid()\nplt.show()","308faeb2":"cash_17 = sales_17.groupby('Month')['TotalIncome'].sum()\n\n\nplt.figure(figsize=(8,4))\ncash_17.sort_index().plot(kind='bar', color='goldenrod')\nplt.title('Total income (pounds) by month in 2017')\nplt.xlabel('Month')\nplt.ylabel('Income (pounds)')\nplt.grid()\nplt.show()","f226124c":"quantity_17 = sales_17.groupby('Month')['Quantity'].sum()\n\n\nplt.figure(figsize=(8,4))\nquantity_17.sort_index().plot(kind='bar', color='goldenrod')\nplt.title('Total quantity sold by month in 2017')\nplt.xlabel('Month')\nplt.ylabel('Quantity')\nplt.grid()\nplt.show()","6cb8e7ac":"months_comparison = df[(df['Month'] == 11) | (df['Month'] == 12)]\n\ncomparison = months_comparison.groupby(['Year', 'Month'])['TotalIncome'].sum()\ncomparison = comparison.reset_index()\n\nplt.figure(figsize=(8,4))\nsns.barplot(data=comparison, x='Month', y='TotalIncome', hue='Year')\nplt.title('Comparison of months income by year')\nplt.show()","8594b3c1":"top_customers = df.groupby('CustomerID')['Quantity'].sum()\ntop_customers = top_customers.sort_values(ascending=False).head(10)\n\n\nplt.figure(figsize=(8,4))\ntop_customers.plot(kind='bar', color='salmon')\nplt.title('Top 10 cutomers by quantity bought')\nplt.xlabel('Customer ID')\nplt.ylabel('Quantity')\nplt.grid()\nplt.show()","79c58416":"df['Country'].value_counts().head()","1b4700a5":"countries = df['Country'].value_counts()[1:]\nfig, ax = plt.subplots(figsize = (12,6))\n\n\nax.bar(countries.index, countries, color = 'salmon')\nax.set_xticklabels(countries.index, rotation = 90)\nax.set_title('Number of customers by country (excluding UK)')\nax.grid()\nplt.show()","d92dbe81":"# Features for clustering\n\ncustomer_df = df.groupby('CustomerID').agg({'TotalIncome': ['mean','sum','max']})\ndata = pd.DataFrame(customer_df)\ndata.columns = ['Mean', 'Sum','Max']\ndata","dc4fa5a8":"features = customer_df.values","f9d0455e":"scaler = StandardScaler()\nscaled_features = scaler.fit_transform(features)\nscaled_features","6269dbbe":"ks = range(1, 11)\ninertias = []\n\nfor k in ks:\n    # Create a KMeans instance with k clusters: model\n    model = KMeans(n_clusters= k)\n    \n    # Fit model to samples\n    model.fit(scaled_features)\n    \n    # Append the inertia to the list of inertias\n    inertias.append(model.inertia_)\n    \n# Plot ks vs inertias\nplt.figure(figsize=(12,6))\nplt.plot(ks, inertias, '-o')\nplt.xlabel('number of clusters, k')\nplt.ylabel('inertia')\nplt.xticks(ks)\nplt.show()\n","c1f0c7c9":"MODEL = KMeans(n_clusters=3)\nMODEL.fit(scaled_features)","425d8dbe":"data['Cluster'] = MODEL.predict(scaled_features)\ndata.head()","6ee47358":"px.scatter_3d(data_frame=data, x='Max', y='Mean', z='Sum', color='Cluster')","f50d708e":"# Libraries","99279ce8":"# Data Exploration","2aa88b9d":"## Choosing number of clusters, K","051ab64b":"# Cleaning & Preparation","d2f23050":"# Dataset description\n\nThis is a transnational dataset that contains all the transactions occurring between Nov-2016 to Dec-2017 for a UK-based online retail store.\n\nAttribute Description\n- InvoiceNo Invoice number (A 6-digit integral number uniquely assigned to each transaction)\n- StockCode Product (item) code\n- Description Product (item) name\n- Quantity The quantities of each product (item) per transaction\n- InvoiceDate The day when each transaction was generated\n- UnitPrice Unit price (Product price per unit)\n- CustomerID Customer number (Unique ID assigned to each customer)\n- Country Country name (The name of the country where each customer resides)","a481d2ce":"# <b> Clustering: Customers identification","cea75067":"## Clusters plot","a44c3476":"# Clustering","561133db":"# Analysis tasks to be performed:\nUse the clustering to segment customers into groups","626b267b":"# Reading the data","a42ebcfa":"As can be observerved, most of the customers are from UK since the online retail store is UK-based.\n\nLet's visualize the count of customers from the other countries.","f0e979d5":"## Preprocessing","670fde2a":"## Create the model","04710979":"![](https:\/\/q3p9g6n2.rocketcdn.me\/wp-content\/ml-loads\/2015\/12\/ecommerce-shopping-retail-ss-1920.jpg)"}}