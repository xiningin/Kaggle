{"cell_type":{"56cf23eb":"code","f4486d81":"code","888bd670":"code","b3bcf64c":"code","ab0ea7c6":"code","14bf0232":"code","74b74914":"code","f47b31a8":"code","cdf6d579":"code","8b704420":"code","1da29be0":"code","a84fa2dc":"code","b16b8d6c":"code","7904e4ec":"code","b2e3d0a7":"code","856e4f4b":"code","15ee00a9":"code","4696e0bd":"code","5f6ac5b2":"code","e6ee5ab1":"code","019ca7cd":"code","433c77bf":"code","f79563cb":"code","b7f7dcb0":"code","bfa964f7":"code","5dda3650":"code","73572670":"code","95097099":"code","18449086":"code","740865d6":"code","8b650010":"code","bf274ff7":"code","dda45de3":"code","b46d6bce":"code","e672d541":"code","dcbaf14a":"code","75586f46":"code","447b13b0":"markdown","755a66f6":"markdown","a6cffb84":"markdown","1a612d88":"markdown","b4e17457":"markdown","89e6c698":"markdown","b7438146":"markdown","23b09248":"markdown","dbaa90e1":"markdown","edbcc79f":"markdown","5134f2df":"markdown","dc06532e":"markdown","67ee292a":"markdown","7c6b2977":"markdown","952822f2":"markdown","dab889b0":"markdown","6363f7b6":"markdown","325c67cd":"markdown","0cfc11eb":"markdown","e49d2987":"markdown","2a5754af":"markdown"},"source":{"56cf23eb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f4486d81":"train_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\nSalePrice = train_data['SalePrice']\ntrain_data.drop(columns=['SalePrice'], inplace=True)\n\ndata = pd.concat([train_data, test_data])\ndata.set_index('Id', inplace=True)\ndata","888bd670":"feat_nan = data.columns[(data.isna().sum() > 0).values]\ndata[feat_nan].head()","b3bcf64c":"count_NaN = data.isnull().sum().sort_values(ascending=False)\/data.shape[0]\ncol_name = count_NaN.index\ntop_n = 15\npos = np.arange(top_n) + 0.5\n\nplt.figure(figsize=(8, 8))\nplt.barh(pos, count_NaN.values[:top_n][::-1], align='center')\nplt.yticks(pos, col_name[:top_n][::-1])\nplt.title('Top 15 features with most NaN')\nplt.show()","ab0ea7c6":"data = data.dropna(axis=1, thresh=len(data)*0.6, how='all')","14bf0232":"LFrontage_nhood = data.groupby('Neighborhood')['LotFrontage']\ndata['LotFrontage'] = LFrontage_nhood.transform(lambda x: x.fillna(x.median()))","74b74914":"data['GarageType'].fillna('NA', inplace=True)\ndata['GarageFinish'].fillna('NA', inplace=True)\ndata['GarageQual'].fillna('NA', inplace=True)\ndata['GarageCond'].fillna('NA', inplace=True)\ndata['GarageYrBlt'].fillna(0, inplace=True)\ndata['GarageCars'].fillna(0, inplace=True)\ndata['GarageArea'].fillna(0, inplace=True)\n\nquality_map = {\"NA\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5}\n\ndata['GarageQual'].replace(quality_map, inplace=True)\ndata['GarageCond'].replace(quality_map, inplace=True)\n\nquality_map = {\"NA\": 0, \"Unf\": 1, \"RFn\": 2, \"Fin\": 3}\n\ndata['GarageFinish'].replace(quality_map, inplace=True)","f47b31a8":"data['BsmtFinSF1'].fillna(0.0, inplace=True)\ndata['BsmtFinSF2'].fillna(0.0, inplace=True)\ndata['BsmtUnfSF'].fillna(0.0, inplace=True)\ndata['BsmtFullBath'].fillna(0, inplace=True)\ndata['BsmtHalfBath'].fillna(0, inplace=True)\ndata['TotalBsmtSF'].fillna(0.0, inplace=True)\n\ndata['BsmtFinType1'].fillna('NA', inplace=True)\ndata['BsmtQual'].fillna('NA', inplace=True)\ndata['BsmtExposure'].fillna('NA', inplace=True)\ndata['BsmtCond'].fillna('NA', inplace=True)\ndata['BsmtFinType2'].fillna('NA', inplace=True)\n\n# BsmtCond and BsmtQual\nquality_map = {\"NA\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5}\n\ndata['BsmtCond'].replace(quality_map, inplace=True)\ndata['BsmtQual'].replace(quality_map, inplace=True)\n\n# BsmtExposure\nquality_map = {\"NA\": 0, \"No\": 1, \"Mn\": 2, \"Av\": 3, \"Gd\": 4}\n\ndata['BsmtExposure'].replace(quality_map, inplace=True)","cdf6d579":"feats = data.columns[(data.isna().sum() > 0).values]\nfor x in feats:\n    data[x].fillna(data[x].mode()[0], inplace=True)","8b704420":"data['has2ndfloor'] = (data['2ndFlrSF'] > 0) * 1\ndata['hasBasement'] = (data.TotalBsmtSF > 0) * 1\ndata['hasGarage'] = (data.GarageCars > 0) * 1\ndata['hasPool'] = (data.PoolArea > 0) * 1\n\ndata['Total_InteriorSF'] = data['TotalBsmtSF'] + data['1stFlrSF'] \\\n                           + data['2ndFlrSF']\n\ndata['Total_Bathrooms'] = data['FullBath'] + (0.5 * data['HalfBath']) \\\n                          + data['BsmtFullBath'] + (0.5 * data['BsmtHalfBath'])\n\ndata['Total_porch_sf'] = data['OpenPorchSF'] + data['3SsnPorch'] \\\n                         + data['EnclosedPorch'] + data['ScreenPorch'] \\\n                         + data['WoodDeckSF']","1da29be0":"data.drop(columns=['FullBath', 'HalfBath', 'BsmtFullBath', 'BsmtHalfBath'],\n          axis=1, inplace=True)","a84fa2dc":"data['HouseAge'] = data['YrSold'] - data['YearBuilt']\ndata['RemodYears'] = data['YrSold'] - data['YearRemodAdd']\ndata['GarageAge'] = data['YrSold'] - data['GarageYrBlt']\n\ndata['HouseAge'] = data.HouseAge.apply(lambda x: 0 if x < 0 else x)\ndata['RemodYears'] = data.RemodYears.apply(lambda x: 0 if x < 0 else x)\ndata['GarageAge'] = data.GarageAge.apply(lambda x: 0 if x < 0 else x)\n\ndata.drop(columns=['YearBuilt', 'YearRemodAdd', 'GarageYrBlt', 'YrSold',\\\n                   'MoSold'], axis=1, inplace=True)","b16b8d6c":"data['MSSubClass'] = data['MSSubClass'].astype(object)\ncat_feature = [x for x in data.select_dtypes(include='object').columns]\ndata[cat_feature].describe()","7904e4ec":"fig, ax = plt.subplots(11, 3, figsize=(20, len(cat_feature) * 2))\nfor idx, feature in enumerate(cat_feature):\n    sns.boxplot(x=feature, y=SalePrice, data=train_data,\n                ax=ax[idx \/\/ 3, idx % 3])\n    ax[idx \/\/ 3, idx % 3].set_title(f'{feature} x SalePrice')\n    ax[idx \/\/ 3, idx % 3].xaxis.set_tick_params(rotation=45)\n\nplt.tight_layout()","b2e3d0a7":"data['CentralAir'] = pd.get_dummies(data.CentralAir, drop_first=True)\ndata['Street'] = pd.get_dummies(data.Street, drop_first=True)\n\nquality_map = {\"Po\": 0, \"Fa\": 1, \"TA\": 2, \"Gd\": 3, \"Ex\": 4}\ndata['KitchenQual'].replace(quality_map, inplace=True)\n\nquality_map = {'Sev': 0, 'Mod': 1, 'Gtl': 2}\ndata.LandSlope.replace(quality_map, inplace=True)\n\nquality_map = {'IR3': 0, 'IR2': 1, 'IR1': 2, 'Reg': 3}\ndata.LotShape.replace(quality_map, inplace=True)\n\nquality_map = {\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5}\n\ndata['ExterQual'].replace(quality_map, inplace=True)\ndata['ExterCond'].replace(quality_map, inplace=True)\ndata['HeatingQC'].replace(quality_map, inplace=True)\n\nquality_map = {\"N\": 1, \"P\": 2, \"Y\": 3}\ndata['PavedDrive'].replace(quality_map, inplace=True)","856e4f4b":"data.drop(columns=['Utilities'], axis=1, inplace=True)","15ee00a9":"# generate binary values using get_dummies\ncat_feature = data.select_dtypes(include='object').columns\ndata_dum = pd.get_dummies(data, columns=cat_feature)\n\ndata_dum.head()","4696e0bd":"data[cat_feature].describe()","5f6ac5b2":"Xtrain = data_dum.iloc[train_data.index]\nXtrain['SalePrice'] = SalePrice.values.astype('float64')\nXtest = data_dum.iloc[test_data.Id-1]","e6ee5ab1":"quant_feat = [x for x in data.select_dtypes(include=[np.number]).columns]\nquant_feat.append('SalePrice')\nXtrain[quant_feat] = Xtrain[quant_feat].astype('float')","019ca7cd":"corr = Xtrain[quant_feat].corr()\nprint(corr['SalePrice'].sort_values(ascending=False)[:20])","433c77bf":"corr_fort = corr['SalePrice'].sort_values(ascending=False)[:20].index\n\nplt.figure(figsize=(20, 48))\nsns.heatmap(corr[corr_fort], annot=True, linewidth=0.6, cmap=\"Blues\")\nplt.title('Correlation of elements that contribute to SalePrice', fontsize=24)\nplt.show()","f79563cb":"corr['SalePrice'].sort_values(ascending=True)[:20]","b7f7dcb0":"corr_faible = corr['SalePrice'].sort_values(ascending=True)[:20].index\n\nplt.figure(figsize=(18, 48))\nsns.heatmap(corr[corr_faible], annot=True, linewidth=0.6, cmap=\"Blues\")\nplt.title('Correlation of elements that contribute to SalePrice', fontsize=22)\nplt.show()","bfa964f7":"Xtrain.drop(columns=['GrLivArea', 'TotalBsmtSF', '1stFlrSF', 'GarageArea',\n                     'has2ndfloor', 'hasBasement', 'PoolArea',\n                     'GarageAge', 'GarageCond', 'hasGarage'],\n            axis=1, inplace=True)\n\nXtest.drop(columns=['GrLivArea', 'TotalBsmtSF', '1stFlrSF', 'GarageArea',\n                    'has2ndfloor', 'hasBasement', 'PoolArea',\n                    'GarageAge', 'GarageCond', 'hasGarage'],\n           axis=1, inplace=True)","5dda3650":"corr['SalePrice'].sort_values(ascending=True)[5:20]","73572670":"Xtrain.drop(columns=['LandSlope', 'LowQualFinSF', 'MiscVal', 'BsmtFinSF2',\n                     'ExterCond', 'Street', '3SsnPorch'], axis=1, inplace=True)\nXtest.drop(columns=['LandSlope', 'LowQualFinSF', 'MiscVal', 'BsmtFinSF2',\n                    'ExterCond', 'Street', '3SsnPorch'], axis=1, inplace=True)","95097099":"quant_feat = Xtrain.select_dtypes(include='float').columns\nXtrain[quant_feat].head()","18449086":"Xtrain[quant_feat].plot(kind='box', subplots=True, figsize=(16, 26),\n                        layout=(7, 5))\nplt.show()","740865d6":"ax = sns.pairplot(Xtrain, size=3, x_vars=['Total_InteriorSF', 'LotFrontage',\n                                          'LotArea', 'BsmtFinSF1'],\n                  y_vars=['SalePrice'])\nplt.show()","8b650010":"Xtrain[Xtrain['Total_InteriorSF'] > 7000][['Total_InteriorSF', 'LotFrontage',\n                                           'LotArea', 'BsmtFinSF1']]","bf274ff7":"Xtrain[Xtrain['LotFrontage'] > 300][['Total_InteriorSF', 'LotFrontage',\n                                    'LotArea', 'BsmtFinSF1']]","dda45de3":"Xtrain[Xtrain['LotArea'] > 100000][['Total_InteriorSF', 'LotArea',\n                                    'BsmtFinSF1']]","b46d6bce":"Xtrain.drop(axis=0, index=[250, 314, 336, 524, 935, 1299], inplace=True)","e672d541":"Sknew = Xtrain[quant_feat].skew()\nskewed_features = Sknew[np.abs(Xtrain[quant_feat].skew()) > 0.5].index\nskewed_features","dcbaf14a":"# Performing log(1+x) transformation\nskewed_features = skewed_features[:-1]\nXtrain[skewed_features] = np.log1p(Xtrain[skewed_features])\nXtest[skewed_features] = np.log1p(Xtest[skewed_features])","75586f46":"Xtrain[skewed_features].hist(figsize=(16, 16), layout=(6, 5), bins=25)\nplt.show()","447b13b0":"Pour la variable \u2018LotFrontage\u2019, on remplace les NaN par la mediane en groupant les donn\u00e9es selon le quartier de la maison.","755a66f6":"Les variables tr\u00e8s corr\u00e9l\u00e9es entre elles:\n    \n   - GrLivArea, TotalBsmtSF, 1stFlrSF, TotalInteriorSF\n   - GarageArea, GarageCars\n   - has2ndfloor, 2ndFlrSF\n   - BsmtCond, hasBasement\n   - PoolArea, hasPool\n   - GarageAge, GarageCond, hasGarage, GarageQual","a6cffb84":"Pour les autre variables, on les impute par leur valeur typique.","1a612d88":"### Import data","b4e17457":"Pour les autres variables, en fonction des situations, nous avons utilis\u00e9 2 m\u00e9thodes : \n        \n     - Remplis par la valeur nulle ou NA \n     - Remplacer par la valeur typique des variables\n","89e6c698":"On supprime les 5 premiers variables qui contiennent plus 50% des valeurs manquantes. ","b7438146":"### Traitements des NaN","23b09248":"**Garage fearures**\n\n**GarageType**: Emplacement du garage\n\t\t\n       2Types\tMore than one type of garage\n       Attchd\tAttached to home\n       Basment\tBasement Garage\n       BuiltIn\tBuilt-In (Garage part of house - typically has room above garage)\n       CarPort\tCar Port\n       Detchd\tDetached from home\n       NA\tNo Garage\n\t\t\n**GarageYrBlt**: ann\u00e9e de construction du garage\n\t\t\n**GarageFinish**: Finition int\u00e9rieure du garage\n       Fin\tFinished\n       RFn\tRough Finished\t\n       Unf\tUnfinished\n       NA\tNo Garage\n\n**GarageQual**: qualit\u00e9 du garage \n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage\n\t\t\n**GarageCond**: \u00c9tat du garage\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage\n\n**GarageCars** : Taille du garage en capacit\u00e9 de voiture\n\n**GarageArea** : Taille du garage en pieds carr\u00e9s  ","dbaa90e1":"#### One Hot Encoder avec get_dummies()","edbcc79f":"### Variables cat\u00e9gorielles","5134f2df":"# Notebook Analyse Exploratoire\n\n## Kaggle Challenge: House Prices - Advanced Regression Techniques","dc06532e":"#### Variables \u00e0 forte corr\u00e9lation","67ee292a":"### Analyse de la corr\u00e9lation avec Target SalePrice","7c6b2977":"**Basement features**\n\n**BsmtQual** - Evaluates the height of the basement\/\u00c9value la hauteur du sous-sol\n\n       Ex\tExcellent (100+ inches)\t\n       Gd\tGood (90-99 inches)\n       TA\tTypical (80-89 inches)\n       Fa\tFair (70-79 inches)\n       Po\tPoor (<70 inches\n       NA\tNo Basement\n       \n**BsmtCond**: \u00c9value l'\u00e9tat g\u00e9n\u00e9ral du sous-sol: Excellent, Good, Typical, Fair, Poor, No Basement\n\t\n**BsmtExposure**: Fait r\u00e9f\u00e9rence aux murs de d\u00e9brayage ou au niveau du jardin\n\n       Gd\tGood Exposure\n       Av\tAverage Exposure (split levels or foyers typically score average or above)\t\n       Mn\tMimimum Exposure\n       No\tNo Exposure\n       NA\tNo Basement\n\n**BsmtFinType1**: \u00c9valuation de la surface finie du sous-sol\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement\n\t\t\n**BsmtFinType2**: \u00c9valuation de la surface finie du sous-sol (si plusieurs types)\n\n**BsmtFinSF1** : Pieds carr\u00e9s finis de type 1 \n\n**BsmtFinSF2** : Pieds carr\u00e9s finis de type 2 \n\n**BsmtUnfSF**  : Pieds carr\u00e9s non finis de sous-sol\n\n**BsmtFullBath**   : Salle de bain compl\u00e8te au sous-sol\n\n**BsmtHalfBath**   : toilettes au sous-sol\n\n**TotalBsmtSF**: Superficie totale en pieds carr\u00e9s du sous-sol ","952822f2":"#### Transformation en variable ordinaire","dab889b0":"#### Variables \u00e0 faible corr\u00e9lation","6363f7b6":"### Feature Engineering","325c67cd":"#### Valeurs aberrantes","0cfc11eb":"#### Transformation au log","e49d2987":"**Variables temporelles**\n\n- YearBuilt: Original construction date\n\n- YearRemodAdd: Remodel date (same as construction date if no remodeling or additions)\n\n- GarageYrBlt: Year garage was built\n\n- YrSold: Year Sold (YYYY)\n\n- MoSold: Month Sold (MM)","2a5754af":"On supprime les variables qui sont tr\u00e8s faiblement corr\u00e9l\u00e9es avec le target avec une corr\u00e9lation < \u00b10.05."}}