{"cell_type":{"20425d90":"code","8c95b27b":"code","cbfb71e1":"code","b0076e4a":"code","d166dbcf":"code","c584b4bf":"code","e341626f":"code","31fbf497":"code","362a0938":"code","4cd4a1dd":"code","1f535f1b":"code","a970526b":"code","3324d560":"code","96680558":"code","757484d6":"code","5e85d850":"code","9adb8fbf":"markdown","a72c82f1":"markdown","e73bde71":"markdown","56904b43":"markdown","cf90d246":"markdown"},"source":{"20425d90":"!cp ..\/input\/gdcm-conda-install\/gdcm.tar .\n!tar -xvzf gdcm.tar\n!conda install --offline .\/gdcm\/gdcm-2.8.9-py37h71b2a6d_0.tar.bz2","8c95b27b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n## Loading Libraries\nimport numpy as np\nimport pandas as pd\n\nimport fastai\nfrom fastai.basics import *\nfrom fastai.callback.all import *\nfrom fastai.vision.all import *\nfrom fastai.medical.imaging import *\nimport torchvision.models as models\nimport pydicom\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cbfb71e1":"source = '..\/input\/rsna-str-pulmonary-embolism-detection'\nfiles = os.listdir(source)\nfiles","b0076e4a":"df = pd.read_csv(f'{source}\/train.csv')\nprint(df.shape)\ndf.head()","d166dbcf":"get_x = lambda x:f'{source}\/train\/{x.StudyInstanceUID}\/{x.SeriesInstanceUID}\/{x.SOPInstanceUID}.dcm'\n\nvocab = ['pe_present_on_image', 'negative_exam_for_pe', 'indeterminate', \n         'rv_lv_ratio_gte_1', 'rv_lv_ratio_lt_1', # Only one label should be true at a time\n         'chronic_pe', 'acute_and_chronic_pe', # Only one label can be true at a time\n         'leftsided_pe', 'central_pe', 'rightsided_pe', # More than one label can be true at a time\n         'qa_motion', 'qa_contrast', 'flow_artifact', 'true_filling_defect_not_pe'] # These are only informational. Maybe use it for study level inferences\n\nget_y = ColReader(vocab) ","c584b4bf":"tfms = [IntToFloatTensor(div=1000.0, div_mask=1), \n        *aug_transforms(size=224)]","e341626f":"block = DataBlock(blocks=(ImageBlock(cls=PILDicom), MultiCategoryBlock(vocab=vocab, encoded=True)), \n                  get_x=get_x,\n                  get_y=get_y,\n                  batch_tfms=tfms)","31fbf497":"dls = block.dataloaders(df[:1600], bs=32, num_workers=0)  # Change df[:1600] to df to train on complete data. \ndls.show_batch(max_n=9, nrows=3, ncols=3, figsize=(20,20))","362a0938":"def accuracy_multi(inp, targ, thresh=0.5, sigmoid=True):\n    \"Compute accuracy when `inp` and `targ` are the same size.\"\n    if sigmoid: inp = inp.sigmoid()\n    return ((inp>thresh)==targ.bool()).float().mean()","4cd4a1dd":"head = create_head(nf=1024, n_out=14, lin_ftrs=[512, 128], concat_pool=True)\nconfig = cnn_config(custom_head=head)\n\nlearn = cnn_learner(dls, resnet34, config=config, metrics=accuracy_multi)","1f535f1b":"lr_good = learn.lr_find()","a970526b":"lr_good # pick the learning rate from here to fit method below","3324d560":"learn.fit_one_cycle(3, lr_max=0.03)","96680558":"learn.model_dir = '.'\nlearn.save(file='..\/working\/resnet34')","757484d6":"interp = ClassificationInterpretation.from_learner(learn)","5e85d850":"losses,idxs = interp.top_losses()\nlen(dls.valid_ds)==len(losses)==len(idxs)\ninterp.plot_confusion_matrix(figsize=(7,7))","9adb8fbf":"## Model Development","a72c82f1":"## Data Preparation","e73bde71":"## Loading Libraries","56904b43":"... Working on inference pipeline currently. Will publish it in the next few days!\nFeedback for improvement is welcome!","cf90d246":"## Model Evaluation"}}