{"cell_type":{"545b7d0b":"code","ba702196":"code","a935c118":"code","8224598f":"code","ef768b90":"code","012d914a":"code","51050e30":"markdown","c957971d":"markdown","28ae003c":"markdown","8b1551ed":"markdown","89ca5049":"markdown","55e8b248":"markdown","b191c230":"markdown","15c382c1":"markdown","b0a4ec01":"markdown"},"source":{"545b7d0b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ba702196":"def get_model(application, size):\n    base_model = application(weights='imagenet', input_shape=(size,size,3), include_top=False)\n    #base_model.trainable = False\n    model = models.Sequential()\n    model.add(base_model)\n    model.add(layers.GlobalAveragePooling2D())\n    model.add(layers.Dense(1024, activation='relu'))\n    model.add(layers.Dropout(0.5))\n    model.add(layers.Dense(196, activation='softmax'))\n    model.summary()\n\n    optimizer = optimizers.RMSprop(lr=0.0001)\n    model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['acc'])\n\n    return model","a935c118":"model_xception = get_model(Xception, 299)\nmodel_xception.load_weights('.\/Kaggle\/car_class\/model\/best_model_xception.hdf5')\nxception_predict = model_xception.predict_generator(\n    generator=test_generator_299,\n    steps = get_steps(nb_test_sample, batch_size),\n    verbose=1\n)","8224598f":"model_DenseNet201 = get_model(DenseNet201, 224)\nmodel_DenseNet201.load_weights('.\/Kaggle\/car_class\/model\/best_model_DenseNet201.hdf5')\nDenseNet201_predict = model_DenseNet201.predict_generator(\n    generator=test_generator_224,\n    steps = get_steps(nb_test_sample, batch_size),\n    verbose=1\n)","ef768b90":"model_nasnetlarge = get_model(NASNetLarge, 331)\nmodel_nasnetlarge.load_weights('.\/Kaggle\/car_class\/model\/best_model_MobileNetV2.hdf5')\nnasnetlarge_predict = model_nasnetlarge.predict_generator(\n    generator=test_generator_331,\n    steps = get_steps(nb_test_sample, batch_size),\n    verbose=1\n)","012d914a":"preds = DenseNet201_predict*0.34 + xception_predict*0.34 + nasnetlarge_predict*0.33\n\npreds_class_indices=np.argmax(preds, axis=1)\npreds_labels = (train_generator_299.class_indices)\nlabels = dict((v,k) for k,v in preds_labels.items())\nfinal_predictions = [labels[k] for k in preds_class_indices]","51050e30":"final_predictions\uc744 summit \ud30c\uc77c\ub85c \uc800\uc7a5\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n\n\ub2e4\ub9cc \uc774 \uc0d8\ud50c\uc5d0\uc11c \uc0ac\uc6a9\ub41c \uac00\uc911\uce58\ub294 \ud6c8\ub828\ub370\uc774\ud130\ub97c 7\ub3003\uc73c\ub85c \ud6c8\ub828\uacfc \uac80\uc99d\uc73c\ub85c \ubd84\ub9ac\ud574\uc11c \uc5bb\uc740 \uac00\uc911\uce58 \uc785\ub2c8\ub2e4.\n\ucd5c\uc885 \ud6c8\ub828\uc744 \uc2dc\ud0a4\uae30 \uc704\ud574\uc11c\ub294 30% \uac80\uc99d\uc6a9 \ub370\uc774\ud130\ub97c \ud6c8\ub828\ub370\uc774\ud130\uc5d0 \ubaa8\ub450 \ud3ec\ud568\uc2dc\ucf1c\uc11c \ub2e4\uc2dc \uac00\uc911\uce58\ub97c \uc5bb\ub294 \uacfc\uc815\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.\n\uc5ec\uae30\uc11c \uadf8\ubd80\ubd84\uc740 \uc0dd\ub7b5\ub418\uc5b4\uc838 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ucd94\uac00\ub85c\n\npreds = DenseNet201_predict*0.34 + xception_predict*0.34 + nasnetlarge_predict*0.33\n\n\ubd80\ubd84\uc5d0\uc11c \n\npreds = DenseNet201_predict*0.2 + xception_predict*0.3 + nasnetlarge_predict*0.5\n\n\uc774\ub807\uac8c \uacc4\uc0b0\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac74 \uccab\ubc88\uc9f8 \ucee4\ub110\uc744 \ub3cc\ub9ac\uba74\uc11c \uc5bb\uc740 val_loss, val_acc\ub97c \uace0\ub824\ud574\uc11c \ubaa8\ub378\ubcc4 \ube44\uc911\uc744 \uc815\ud574 \uc8fc\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n\ubcc4\uac70 \uc5c6\ub294 \ucee4\ub110 \ubd10\uc8fc\uc154\uc11c \uac10\uc0ac\ud569\ub2c8\ub2e4.","c957971d":"crop\ud55c \uc774\ubbf8\uc9c0\ub4e4\ub3c4 \ud558\uae30 \ucc98\ub7fc \uc0ac\uc774\uc988\ubcc4 \ud074\ub798\uc2a4\ubcc4\ub85c \uc798 \uc800\uc7a5\ud574 \ub461\ub2c8\ub2e4.\n[crop\uc774\ubbf8\uc9c0](https:\/\/drive.google.com\/file\/d\/11_Xuymvjvxvt8Dhj7HoHe3ZkpfSLkx5f\/view?usp=sharing)","28ae003c":"\uc774\ub7f0\uc2dd\uc73c\ub85c \ub0b4\uac00 \ud6c8\ub828\uc2dc\ucf30\ub358 \ubaa8\ub378\ub4e4\uacfc \uc800\uc7a5\ud574\ub450\uc5c8\ub358 \uac00\uc911\uce58\ub97c \ub85c\ub4dc\ud558\uace0 \uac01\uac01 \uc608\uce21\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4.\n\uc608\uce21\uc774 \uc644\ub8cc\ub418\uba74\n","8b1551ed":"\uc774 \ubaa8\ub378\ub4e4\uc744 \uc559\uc0c1\ube14 \ud558\uae30 \uc704\ud574\uc11c \ud558\uae30 \ucc98\ub7fc \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc600\uace0\uc694.\n\ub2e4\uc2dc \ud55c\ubc88 \ub9d0\uc500\ub4dc\ub9ac\ub9cc kaggle \uc0c1\uc5d0\uc11c \ubc14\ub85c \uc2e4\ud589\uc774 \ub418\uc9c0\ub294 \uc548\uc544\uc694. \n\ubc29\ubc95\ub9cc \uacf5\uc720\ud558\ub824\uace0\uc694.","89ca5049":"![image.png](attachment:image.png)","55e8b248":"Keras \ubb38\uc11c\uc758 \uc0d8\ud50c \ucf54\ub4dc\n\n![image.png](attachment:image.png)","b191c230":"\uc6b0\uc120 \uc800\uc758 \uccab\ubc88\uc9f8 \ucee4\ub110 \nhttps:\/\/www.kaggle.com\/janged\/3rd-ml-month-car-model-classification-xception\n\uc744 \uac00\uc9c0\uace0 \uc5ec\ub7f0 \uc0ac\uc804 \ud6c8\ub828 \ubaa8\ub378\uc744 \ub3cc\ub9ac\uba74\uc11c \uac00\uc911\uce58\ub97c \ud30c\uc77c\ub85c \uc798 \uc800\uc7a5\ud558\uace0 \ud30c\uc77c \ub124\uc774\ubc0d\uc744 \uc815\ub9ac\ud574 \ub450\uc5c8\uc2b5\ub2c8\ub2e4.\n\n\ucd94\uac00\ub85c \nkeras \ubb38\uc11c\uc5d0 \ubcf4\uc2dc\uba74\nhttps:\/\/keras.io\/applications\/#mobilenetv2\n\n![image.png](attachment:image.png)\n\n\uc774\ub807\uac8c \uc0ac\uc804 \ud6c8\ub828 \ubaa8\ub378\ubcd1 \uc815\ubcf4\uc5d0 \uac01 \ubaa8\ub378\uc5d0 \ucd5c\uc801\ud654\ub41c \uadf8\ub9bc \uc0ac\uc774\uc988 \ub4f1\uc774 \uc798 \uc124\uba85\ub418\uc5b4\uc838 \uc788\uc2b5\ub2c8\ub2e4.","15c382c1":"\uc9c0\uae08 \uc62c\ub9ac\ub294 \ucee4\ub110\uc740 \uce90\uae00\uc5d0\uc11c \uc804\uccb4 \uc2e4\ud589\uc774 \ub418\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4.\n\uc81c \ub85c\uceec PC\uc5d0\uc11c \ub3cc\ub838\ub358 \uc0ac\ud56d\uacfc \uc559\uc0c1\ube14 \ud588\ub358 \ubc29\ubc95\uc744 \uacf5\uc720 \ud558\uace0\uc790 \uc62c\ub9bd\ub2c8\ub2e4.\n\n\ub9ac\ub354\ubcf4\ub4dc 0.92703 \uae30\ub85d\ud55c \ub0b4\uc6a9\uc785\ub2c8\ub2e4.\n\n\uc800\ub294 \uba38\uc2e0\ub7ec\ub2dd \ub525\ub7ec\ub2dd \uacf5\ubd80\ud55c\uc9c0 \uc5bc\ub9c8 \ub418\uc9c0 \uc54a\uc544\uc11c \uc774\ub860\uc801\uc778 \uc124\uba85\uc744 \ud560 \ub2a5\ub825\uc740 \ubabb\ub418\uace0\uc694.\n\ub2e4\ub9cc \uc800\uac19\uc774 \ucd08\ubcf4\uc774\uc2e0 \ubd84\ub4e4\uc5d0\uac8c \uc0ac\uc6a9\ubc95\uc744 \uacf5\uc720\ud558\uace0\uc790 \ucee4\ub110\uc744 \uc791\uc131\ud588\uc2b5\ub2c8\ub2e4.","b0a4ec01":"\uc5ec\ud558\ud2bc \uc800\uc758 \uccab\ubc88\uc9f8 \ucee4\ub110\uc744 \ud1b5\ud574\uc11c\nPC\uc5d0 \ud558\uae30\uc640 \uac19\uc774 \ubaa8\ub378\ubcc4 \uac00\uc911\uce58\ub97c \uc798 \uc800\uc7a5\ud574 \ub461\ub2c8\ub2e4.\n\n![image.png](attachment:image.png)"}}