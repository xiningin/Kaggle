{"cell_type":{"062f3078":"code","52d666fe":"code","9e65a2be":"code","d6e9aa69":"code","0f63692c":"code","cee2ab23":"code","76290ca1":"code","bedad43c":"code","2e9ae6ab":"code","138a76b3":"code","20ccd56b":"code","c9e0bb1c":"code","880128b6":"code","7165e2b6":"code","9c0777e9":"code","b9135db7":"markdown"},"source":{"062f3078":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf # deep learning library\nfrom matplotlib import pyplot as plt # data visualization","52d666fe":"train_df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest_df = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\n\nprint('Train data shape: ', train_df.shape)\nprint('Test data shape: ', test_df.shape)","9e65a2be":"print('Is train data has null value? ', train_df.isnull().any().any())\nprint('Is test data has null value? ', test_df.isnull().any().any())\n\nprint('Is train data has duplicate? ', train_df.duplicated().any())\nprint('Is test data has duplicate? ', test_df.duplicated().any())","d6e9aa69":"train_features = train_df.copy().drop('label', axis=1)\ntrain_target = train_df.copy().loc[:, ['label']]","0f63692c":"train_target.hist()\nplt.show()","cee2ab23":"train_features = train_features \/ 255.0\ntrain_features.head(3)","76290ca1":"tensor_features = tf.convert_to_tensor(train_features)\ntensor_target = tf.convert_to_tensor(train_target)","bedad43c":"tensor_features = tf.reshape(tensor_features, (tensor_features.shape[0], 28, 28, 1))\ntensor_features.shape","2e9ae6ab":"from sklearn.preprocessing import OneHotEncoder\n\nenc = OneHotEncoder(sparse=False)\ntarget_encoded = enc.fit_transform(tensor_target)\ntarget_encoded","138a76b3":"model = tf.keras.Sequential([\n    tf.keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(pool_size=(2,2)),\n    tf.keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(pool_size=(2,2)),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax'),\n])","20ccd56b":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics='accuracy')\nmodel_history = model.fit(x=tensor_features, y=target_encoded, epochs=25, validation_split=0.8)","c9e0bb1c":"def plot_model_history(model_hist, history_type, plot_title, plot_y, plot_x, plot_legend):\n    for history in history_type:\n        plt.plot(model_hist.history[history])\n        \n    plt.title(plot_title)\n    plt.ylabel(plot_y)\n    plt.xlabel(plot_x)\n    plt.legend(plot_legend, loc='upper left')\n    plt.show()","880128b6":"plot_model_history(model_history, ['accuracy', 'val_accuracy'], \n                   'Model Accuracy', 'Accuracy', \n                   'Epochs', ['Train', 'Val'])\n\nplot_model_history(model_history, ['loss', 'val_loss'], \n                   'Model Loss', 'Loss', \n                   'Epochs', ['Train', 'Val'])","7165e2b6":"tensor_test = tf.convert_to_tensor(test_df)\ntensor_test = tf.reshape(tensor_test, (tensor_test.shape[0], 28, 28, 1))\npred_result = model.predict(tensor_test)\npred_result = pred_result.argmax(1)","9c0777e9":"submission_df = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nsubmission_df['Label'] = pred_result\nsubmission_df.to_csv('submission.csv', index=False)","b9135db7":"# Simple Digit Recognizer Using CNN"}}