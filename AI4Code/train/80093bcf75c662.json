{"cell_type":{"1d7a0a3a":"code","d16043c4":"code","65da2a69":"code","b22344d1":"code","9e1e5695":"code","522fa06d":"code","34a72141":"code","bde9b518":"code","2d85603c":"code","06f8ddb6":"code","89a1fe48":"code","dddc4fba":"code","fc2b5f4e":"code","0d2660f0":"code","8246b646":"code","8c3d1c84":"code","1df223bf":"code","f6eb1ff0":"code","482df2ac":"code","a3c8c3bb":"code","504084be":"code","3f59a30f":"code","1f11a278":"markdown","577237a4":"markdown","056a1706":"markdown","c7393607":"markdown","d4a78cd3":"markdown","3dc09e8d":"markdown","de8116e6":"markdown","75277b14":"markdown","be2f6c25":"markdown","7359e4b4":"markdown","13a4f7c5":"markdown","d6808816":"markdown","c38f3d56":"markdown","8deab69f":"markdown","8e9353d9":"markdown","bab8e4e1":"markdown","5c9c10a0":"markdown","7e1ee504":"markdown"},"source":{"1d7a0a3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d16043c4":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom statsmodels.graphics.gofplots import ProbPlot\n%matplotlib inline","65da2a69":"train_df=pd.read_csv(\"\/kaggle\/input\/seoul-bike-rental-ai-pro-iti\/train.csv\")\ntrain_df.head()","b22344d1":"# change the column names with special characters\ntrain_df.rename(columns={'Temperature(\ufffdC)':'Temperature(C)','Dew point temperature(\ufffdC)':'Dew point temperature(C)'},inplace=True)\nprint(train_df.columns)\ntrain_df.head()","9e1e5695":"# first check the info and type of the columns\ntrain_df.info()","522fa06d":"train_df.describe()","34a72141":"# Now let's extract all the values stored in the date variable \ntrain_df['Date'] = pd.to_datetime(train_df['Date'])\ntrain_df['year']= train_df['Date'].apply(lambda x:x.year)\ntrain_df['month']= train_df['Date'].apply(lambda x:x.month)\ntrain_df['day']=train_df['Date'].apply(lambda x:x.day)\ntrain_df['dow'] = train_df['Date'].apply(lambda x:x.dayofweek)\ntrain_df['woy'] = train_df['Date'].apply(lambda x:x.weekofyear)","bde9b518":"train_df.head()","2d85603c":"colormap = plt.cm.RdBu\nplt.figure(figsize=(22,11))\nplt.title('Pearson Correlation of Features', y=1.05, size=20)\nsns.heatmap(train_df.drop('ID',axis=1).corr(),linewidths=0.1,vmax=1.0,cmap=colormap, linecolor='white', annot=True)","06f8ddb6":"fig, ax = plt.subplots(figsize=(18, 5))\nsns.boxplot(x=train_df['Hour'], y=train_df['y'], ax=ax)\nax.set_ylabel('y')\nax.set_title(\"Boxplot of y grouped by hour\");\n","89a1fe48":"fig, ax = plt.subplots(figsize=(18, 10))\nsns.boxplot(x=train_df['Holiday'], y=train_df['y'], ax=ax)\nax.set_ylabel('y')\nax.set_title(\"Boxplot of y grouped by holiday\");","dddc4fba":"fig, ax = plt.subplots(figsize=(18, 10))\nsns.pointplot(x='Hour', y='y', data=train_df, hue='Holiday', ax=ax)\nax.set_title(\"Pointplot of y grouped by Hour during holiday and non holiday\");","fc2b5f4e":"day_map = {0:'Monday', 1:'Tuesday', 2:'Wednesday', 3:'Thursday', 4:'Friday', 5:'Saturday', 6:'Sunday'}\nhueOrder = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\ndata = pd.DataFrame({'mean':train_df.groupby([\"Hour\",\"dow\"], sort=True)[\"y\"].mean()}).reset_index()\ndata['dow'] = data['dow'].map(lambda d : day_map[d])","0d2660f0":"fig, ax = plt.subplots(figsize=(18, 5))\nsns.pointplot(x=data[\"Hour\"], y=data[\"mean\"], hue=data[\"dow\"], hue_order=hueOrder, ax=ax)\nax.set(xlabel='Hour Of The Day', ylabel='Users Count', title=\"Average Users Count By Hour Of The Day Across Weekdays\");","8246b646":"\nfigure, axes = plt.subplots(nrows=3)\nfigure.set_size_inches(12, 18)\nsns.pointplot(x='Hour', y='y', data=train_df, hue='Functioning Day', ax=axes[0])\nsns.pointplot(x='Hour', y='y', data=train_df, hue='Seasons', ax=axes[1])\nsns.boxplot(x='Seasons', y='y', data=train_df, ax=axes[2])\n","8c3d1c84":"fig, ax = plt.subplots(figsize=(18, 5))\nsns.boxplot(x=train_df['Rainfall(mm)'], y=train_df['y'], ax=ax)\nax.set_ylabel('y')\nax.set_title(\"Boxplot of y grouped by amount of rain fall\");","1df223bf":"(train_df['Rainfall(mm)']).hist(bins=100)\n\nplt.xlabel(\"Rainfall(mm)\")\nplt.title(\"Disribution of rainfall(cm)\")","f6eb1ff0":"fig, ax = plt.subplots(figsize=(18, 5))\nsns.boxplot(x=train_df['Snowfall (cm)'], y=train_df['y'], ax=ax)\nax.set_ylabel('y')\nax.set_title(\"Boxplot of y grouped by amount of Snowfall\");","482df2ac":"(train_df['Snowfall (cm)']).hist(bins=100)\n\nplt.xlabel(\"Snowfall (cm)\")\nplt.title(\"Disribution of Snowfall(cm)\")","a3c8c3bb":"sns.distplot(x=train_df[\"Temperature(C)\"])\n\nplt.xlabel(\"Temperature(C)\")\nplt.title(\"Disribution of Temperature(C)\")","504084be":"sns.distplot(x=train_df[\"Visibility (10m)\"])\n\nplt.xlabel(\"Visibility (10m)\")\nplt.title(\"Disribution of Visibility\")","3f59a30f":"figure, axes = plt.subplots(nrows=2, ncols=2) \nplt.tight_layout()\nfigure.set_size_inches(7, 6)\n\n\nsns.regplot(x='Temperature(C)', y='y', data=train_df, ax=axes[0, 0], scatter_kws={'alpha': 0.2}, line_kws={'color': 'red'})\nsns.regplot(x='Visibility (10m)', y='y', data=train_df, ax=axes[0, 1], scatter_kws={'alpha': 0.2}, line_kws={'color': 'red'})\nsns.regplot(x='Hour', y='y', data=train_df, ax=axes[1, 0], scatter_kws={'alpha': 0.2}, line_kws={'color': 'red'})\nsns.regplot(x='Humidity(%)', y='y', data=train_df, ax=axes[1, 1], scatter_kws={'alpha': 0.2}, line_kws={'color': 'red'});\n","1f11a278":"No outliers!!!!!\n\nAs expected ther is a rise in the demand for bikes early from 8:9 am and from 5:7 pm and as this hypothesis is true we can divide bike demand into 3 main categories:\n- High : 7-9 and 17-19 hours\n\n- Average : 10-16 hours\n\n- Low : 0-6 and 20-24 hours Here we have analyzed the distribution of total bike demand.","577237a4":"As expected on average there is a high demand during non holidays, but let's check if also the hours during which there is a high demand in Holidays is different.","056a1706":"## If you have any suggestions or ideas Please comment below and let's help each other.","c7393607":"c) Weather conditions: ","d4a78cd3":"### Import Libraries","3dc09e8d":"b) Holiday Trend:","de8116e6":"##### It appears that we don't have any null values","75277b14":"As we can see that no variable will give us a proper model with single variable linear regression so we have a lot to think about which model will be better? \n\n- Polynomial regression?(which features to put in? how to check if it is valid to assume that we can approximate the real model with a linear one?) \n- Kmeans?\n\nLet's see what the data is hiding from us by creating the suggested variable above.\n","be2f6c25":"Bikes are rented more in Summer and Autumn and much less in Winter.","7359e4b4":"### Now let's check for the linear fit with the most correlated features before starting Feature engineering","13a4f7c5":"As we can see that we can divide the amount of snow into 3 categories:\n- No rain\n- Slightly snowing (from >0 to 1.6)\n- Heavily snowing (>1.6)","d6808816":"As we can see that we can divide the amount of rain into 3 categories:\n- No rain\n- Slightly raining (from >0 to 4)\n- Heavily raining (>4)","c38f3d56":"We are provided hourly rental data along with weather data. We have to predict the total count of bikes rented during each hour covered by the test set, using only information available prior to the rental period.\n\n\n### Data fields:\n- ID - an ID for this instance\n- Date - year-month-day\n- Hour - Hour of he day\n- Temperature - Temperature in Celsius\n- Humidity - %\n- Windspeed - m\/s\n- Visibility - 10m\n- Dew point temperature - Celsius\n- Solar radiation - MJ\/m2\n- Rainfall - mm\n- Snowfall - cm\n- Seasons - Winter, Spring, Summer, Autumn\n- Holiday - Holiday\/No holiday\n- Functional Day - NoFunc(Non Functional Hours), Fun(Functional hours)\n- y - Rented Bike count (Target), Count of bikes rented at each hour","8deab69f":"There is a different trend in the weekends but not very good to rely on.","8e9353d9":"a) Hourly trend:","bab8e4e1":"And we can combine these conditions together we can combine the weather conditions to create a newly categorical feature describing the weather during each day.","5c9c10a0":"# 1)Hypothesis Generation:\n\nBefore exploring the data to understand the relationship between variables,we focus on hypothesis generation first. Now, this might sound counter-intuitive for solving a data science problem, but before exploring data, we should spend some time thinking about the business problem, gaining the domain knowledge and may be gaining first hand experience of the problem.\n\nHere are some of the hypothesis which could influence the demand of bikes:\n\nHourly trend: There must be high demand during office timings(the typical office hours at South Korea is from 9:00 am to 6:00 pm so we will expect rise (from aroud 7:00 am to 9:am and from 6:00 pm to 9:00 pm)). Early morning and late evening can have different trend (cyclist) and low demand during 10:00 pm to 4:00 am.\n\nHoliday Trend: There must be high demand during working days and low demand during holidays and weekends\n\nRain: The demand of bikes will be lower on a rainy day as compared to a sunny day. Similarly, higher humidity will cause to lower the demand and vice versa.(this will be determined by the Rainfall variable).\n\nTemperature: It may have positive correlation with the number of rentals that occur.\n\nWeather condition: Determine from all the weather values that we have if it is a clear day or mist day or light rain\/snow or heavy rain\/snow and this new feature will also affect the number of bikes rented in this day.\n\n","7e1ee504":"## 2)Hypothesis testing:"}}