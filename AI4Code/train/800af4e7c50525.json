{"cell_type":{"a06932e8":"code","3c06e8ae":"code","07386a53":"code","8b6f5e39":"code","13619d91":"code","ce2964b5":"code","15290b45":"code","037377c7":"code","ca2ed610":"code","42728dcf":"code","81ba14d5":"code","da638085":"code","6e6b3f10":"code","8be82325":"code","eabd7c2c":"code","24a8a805":"code","0d5ccd2d":"code","eba5bdfe":"code","b4273ae1":"code","a3220b54":"code","ba9284ab":"code","e3661342":"code","f0f1246a":"code","11e3f179":"code","4c35015a":"code","97b1741c":"code","5efa43d3":"code","f15bbf9c":"code","2c367ab8":"code","717bee61":"code","cfde6d62":"code","7fc4abe2":"code","9c629509":"code","3cca9072":"code","56b88d48":"code","8c1b2ae7":"code","f8e6b277":"markdown","ddfe8744":"markdown","5a612c03":"markdown","ff3eabe2":"markdown","97d54167":"markdown","cb97d10f":"markdown","4edfc53f":"markdown","9c739637":"markdown","0f8ca0bf":"markdown"},"source":{"a06932e8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3c06e8ae":"df_fake = pd.read_csv(\"\/kaggle\/input\/social-network-fake-account-dataset\/fake_account.csv\",sep='\\t', names=['id', 'post'])\ndf_fake","07386a53":"df_fake.isnull().sum()","8b6f5e39":"df_fake = df_fake.dropna()\ndf_fake","13619d91":"import jieba\nimport re\nimport string","ce2964b5":"from emoji import UNICODE_EMOJI\nUNICODE_EMOJI","15290b45":"seg_list = [list(jieba.cut(s, cut_all=False)) for s in df_fake['post']]\nseg_list","037377c7":"eng_list = [[w for w in seg_list[i] if re.match('^[a-z|A-Z|]*$',w)] for i in range(len(seg_list))]\n# posts that contain English characters\neng_list1 = [l for l in eng_list if l != []]\neng_list1","ca2ed610":"len(eng_list1)","42728dcf":"# list of posts that contain only Chinese\npunc = \"\uff01\uff1f\uff61\u3002\uff02\uff03\uff04\uff05\uff06\uff07\uff08\uff09\uff0a\uff0b\uff0c\uff0d\uff0f\uff1a\uff1b\uff1c\uff1d\uff1e\uff20\uff3b\uff3c\uff3d\uff3e\uff3f\uff40\uff5b\uff5c\uff5d\uff5e\uff5f\uff60\uff62\uff63\uff64\u3001\u3003\u300a\u300b\u300c\u300d\u300e\u300f\u3010\u3011\u3014\u3015\u3016\u3017\u3018\u3019\u301a\u301b\u301c\u301d\u301e\u301f\u3030\u303e\u303f\u2013\u2014\u2018\u2019\u201b\u201c\u201d\u201e\u201f\u2026\u2027\ufe4f. \\t\\n\"\nall_chin = [[w for w in seg_list[i] \n             if w not in punc \n             and w not in string.punctuation \n             and w not in UNICODE_EMOJI\n             and not re.match('^[a-z|A-Z|0-9|.]*$',w) ] for i in range(len(seg_list))]\nall_chin","81ba14d5":"# number of posts that contain only English\nall_eng = [l for l in all_chin if l == []]\nlen(all_eng)","da638085":"pip install mafan","6e6b3f10":"import mafan\nfrom mafan import simplify, tradify\nall_chin_simp = [[simplify(w) for w in all_chin[i]] for i in range(len(all_chin))]","8be82325":"all_chin_simp","eabd7c2c":"# without removing stop words\ndocument = [\" \".join(s) for s in all_chin_simp]","24a8a805":"document","0d5ccd2d":"from sklearn.feature_extraction.text import TfidfVectorizer\ntfidf_model = TfidfVectorizer(token_pattern=r\"(?u)\\b\\w+\\b\").fit(document)","eba5bdfe":"tfidf_model.vocabulary_","b4273ae1":"#\u8fd8\u6ca1\u60f3\u597d\u600e\u4e48\u5f04\u3002\u3002\u3002","a3220b54":"np.random.seed(10)\nfor i in np.random.randint(109945, size=20):\n    print(str(i)+':',seg_list[i])","ba9284ab":"# check how many posts contain emoji\nemoji_list = [[w for w in seg_list[i] if w in UNICODE_EMOJI] for i in range(len(seg_list))]\nlen([l for l in emoji_list if l != []])","e3661342":"# posts in all_chin list that contain emoji\nchin_emoji_list = [[w for w in all_chin[i] if w in UNICODE_EMOJI] for i in range(len(all_chin))]\nlen([l for l in chin_emoji_list if l != []])","f0f1246a":"df_real = pd.read_csv(\"\/kaggle\/input\/social-network-fake-account-dataset\/legitimate_account.csv\",\n                      sep='\\t',\n                      names=['id', 'time', 'forward', 'comment', 'like', 'post'])\ndf_real","11e3f179":"df_real = df_real.dropna().reset_index(drop=True)\ndf_real","4c35015a":"# number of unique users\nlen(df_real['id'].unique())","97b1741c":"seg_list_real = [list(jieba.cut(s, cut_all=False)) for s in df_real['post']]\nseg_list_real","5efa43d3":"eng_list_real = [[w for w in seg_list_real[i] if re.match('^[a-z|A-Z|]*$',w)] for i in range(len(seg_list_real))]\neng_list_real1 = [l for l in eng_list_real if l != []]\neng_list_real1","f15bbf9c":"# number of posts that contain English characters\nlen(eng_list_real1)","2c367ab8":"import string\nall_chin_real = [[w for w in seg_list_real[i] \n                  if w not in punc \n                  and w not in string.punctuation \n                  and w not in UNICODE_EMOJI\n                  and not re.match('^[a-z|A-Z|0-9|.]*$',w) ] for i in range(len(seg_list_real))]\nall_chin_real","717bee61":"all_chin_simp_real = [[simplify(w) for w in all_chin_real[i]] for i in range(len(all_chin_real))]","cfde6d62":"all_chin_simp_real","7fc4abe2":"# number of posts that contain only English\nall_eng_real = [l for l in all_chin_real if l == []]\nlen(all_eng_real)","9c629509":"np.random.seed(3)\nfor i in np.random.randint(1225881, size=20):\n    print(str(i)+':',seg_list_real[i])","3cca9072":"# check how many posts contain emoji\nemoji_list_real = [[w for w in seg_list_real[i] if w in UNICODE_EMOJI] for i in range(len(seg_list_real))]\nlen([l for l in emoji_list_real if l != []])","56b88d48":"[l for l in emoji_list_real if l != []]","8c1b2ae7":"# posts in all_chin list that contain emoji\nchin_emoji_list_real = [[w for w in all_chin_real[i] if w in UNICODE_EMOJI] for i in range(len(all_chin_real))]\nlen([l for l in chin_emoji_list_real if l != []])","f8e6b277":"# # convert to simplified Chinese","ddfe8744":"# legitimate accounts","5a612c03":"Possible Features:\nNLP\nSentiment(Distribution)\nPCA\nT-SNE\n\nClassification Model:\n","ff3eabe2":"# # try tf-idf vectorizer","97d54167":"# # fake accounts","cb97d10f":"# # random checking","4edfc53f":"# # emoji checking","9c739637":"# # try stop words","0f8ca0bf":"# # random checking"}}