{"cell_type":{"d8ae172f":"code","f2f0bb7f":"code","25f058fe":"code","e303dd9d":"code","efee69ab":"code","25adc1cc":"code","3ce4a994":"code","b6403ba7":"code","fb21dc07":"code","b1e5cc4d":"code","4393f550":"code","cbcd9bd9":"code","a229e025":"markdown","18f9b9c2":"markdown","f8d611c6":"markdown","63178c4b":"markdown","c785d788":"markdown","305718a7":"markdown","0ab8ba4f":"markdown","cee58b29":"markdown"},"source":{"d8ae172f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot  as plt # data visualization\nimport cv2\nimport os\n\nplt.rc('axes', titlesize=14)     # fontsize of the axes title\nplt.rc('figure', titlesize=18)  # fontsize of the figure title\n\n\nDATASET_DIR = '\/kaggle\/input\/landmark-recognition-2020'\nTRAIN_IMAGE_DIR = '\/kaggle\/input\/landmark-recognition-2020\/train'\nWIKIPEDIA_CATS_PATH = '\/kaggle\/input\/wikipedia-categories-for-glr-2020\/gldv2-train-category.csv'\n\n\ndef make_clickable(val):\n    # target _blank to open new window\n    return '<a target=\"_blank\" href=\"{}\">{}<\/a>'.format(val, val)\n\ndef plot_images(image_list,rows,cols,title):\n    \n    \n    fig,ax = plt.subplots(rows,cols,figsize = (25,5*rows))\n    ax = ax.flatten()\n    \n    for i, idx in enumerate(image_list[:rows*cols]):\n        image = cv2.imread(TRAIN_IMAGE_DIR+'\/{}\/{}\/{}\/{}.jpg'.format(idx[0],idx[1],idx[2],idx))\n        image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n        ax[i].imshow(image)\n        ax[i].set_axis_off()\n        ax[i].set_title(idx)\n    \n    plt.suptitle(title)\n\n    \ndef get_image_list (landmark_id):\n    return train.query(\"landmark_id == @landmark_id\")[\"id\"].values    \n\n\ndef show_landmark (landmark_id,rows=5,cols=5, shuffle=True):\n    image_list = get_image_list (landmark_id = landmark_id )\n    if shuffle:\n        np.random.shuffle(image_list)\n    plot_images(image_list,rows=rows,cols=cols,title=f'{landmark_id} - # {rows*cols} of {len(image_list)}' ) \n    \n\ntrain = pd.read_csv(f'{DATASET_DIR}\/train.csv')\ncats = pd.read_csv(WIKIPEDIA_CATS_PATH)\nprint(\"Shape of train_data :\", train.shape)\nprint(\"Number of unique landmarks :\", train[\"landmark_id\"].nunique())\n\n","f2f0bb7f":"top_landmarks = train.groupby(\"landmark_id\").agg({'id':'count'}).reset_index().rename(columns={\"id\":\"count\"}).sort_values(by=\"count\",ascending=False).reset_index(drop=True)[:10]\ntop_landmarks = top_landmarks.merge(cats, on=\"landmark_id\")\ntop_landmarks","25f058fe":"landmark_id=138982\nshow_landmark(landmark_id=landmark_id,rows=3,cols=5)\ncats.query(\"landmark_id == @landmark_id\").style.format({'category': make_clickable})","e303dd9d":"landmark_id=126637\nshow_landmark(landmark_id=landmark_id,rows=3,cols=5)\ncats.query(\"landmark_id == @landmark_id\").style.format({'category': make_clickable})","efee69ab":"landmark_id=20409\nshow_landmark(landmark_id=landmark_id,rows=3,cols=5)\ncats.query(\"landmark_id == @landmark_id\").style.format({'category': make_clickable})","25adc1cc":"def get_image_list_by_istance (df,instance):\n    return df.query(\"instance == @instance\")[\"id\"].values    \n\n\ndef show_instance (df,instance,rows=5,cols=5, shuffle=True):\n    image_list = get_image_list_by_istance (df,instance )\n    if shuffle:\n        np.random.shuffle(image_list)\n    plot_images(image_list,rows=rows,cols=cols,title=f'{instance} - # {rows*cols} of {len(image_list)}' ) ","3ce4a994":"cats[\"instance\"] = cats[\"instance\"].map(lambda x: str(x).strip() )","b6403ba7":"cats.groupby([\"instance\"]).agg({\"landmark_id\":\"count\"}).reset_index().sort_values(by=\"landmark_id\", ascending=False)[:50]","fb21dc07":"train = train.merge(cats, on=\"landmark_id\")","b1e5cc4d":"instance=\"church building\"\nshow_instance(train,instance,rows=3,cols=5)","4393f550":"instance=\"castle\"\nshow_instance(train,instance,rows=3,cols=5)","cbcd9bd9":"instance=\"lighthouse\"\nshow_instance(train,instance,rows=3,cols=5)","a229e025":"## Instance: lighthouse","18f9b9c2":"## Instance: church building ","f8d611c6":"## Instance: castle","63178c4b":"# Wikipedia Instances","c785d788":"## Category:Media_contributed_by_the_ETH-Bibliothek (138982)","305718a7":"# Landmarks with highest number of images in train","0ab8ba4f":"## Category:Noraduz_Cemetery (20409) \t","cee58b29":"## Category:Corktown,_Toronto (126637)"}}