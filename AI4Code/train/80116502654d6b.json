{"cell_type":{"ff8dd34f":"code","1df38700":"code","18a44b77":"code","10aad79b":"code","28f1d002":"code","96c6e055":"code","a33f9f9c":"code","a08058c1":"code","6c0d8cf0":"code","1ee21f4e":"code","1bdd0751":"code","d0f17d4d":"code","ea0ae1da":"code","656bbcac":"code","f2efd0af":"code","db6f9dd8":"code","8f05cc8e":"code","f108fd30":"code","06e22fc2":"code","64a54140":"code","1fa0237c":"code","92f3b5b8":"code","ccaa3ad3":"code","c0536680":"code","6a31e80e":"code","8842ee66":"code","ff279d63":"code","27bc819d":"code","d0b0771b":"code","bb28ee5d":"code","929f8058":"markdown","25624a8f":"markdown","5c68d739":"markdown","f2a3856c":"markdown","0bf3b2fd":"markdown","81527d8b":"markdown"},"source":{"ff8dd34f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n%matplotlib inline\nimport os\nfrom tqdm import tqdm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport numpy as np\nimport time\nfrom datetime import timedelta\nimport math\nimport cv2 \nimport re\nfrom tensorflow.python.platform import gfile\n\nprint(os.listdir(\"..\/input\"))\nprint(\"Train data set:\", len(os.listdir(\"..\/input\/dog-breed-identification\/train\")))\nprint(\"Test data set:\", len(os.listdir(\"..\/input\/dog-breed-identification\/test\")))\nprint(os.listdir(\"..\/input\/vgg16\"))\n\n# Any results you write to the current directory are saved as output.","1df38700":"# all training images\ntrain_dir = '..\/input\/dog-breed-identification\/train\/'\nmodel_dir = '..\/input\/'\nlist_images = [train_dir+f for f in os.listdir(train_dir) if re.search('jpg|JPG', f)]\n\nprint(list_images[0:4])\n","18a44b77":"train_dogs = pd.read_csv('..\/input\/dog-breed-identification\/labels.csv')\n#train_dogs['image_path'] = list_images\ntrain_dogs.head(5)\n\n","10aad79b":"br_labels = train_dogs.groupby(\"breed\").count()\nbr_labels = br_labels.rename(columns = {\"id\" : \"count\"})\nbr_labels = br_labels.sort_values(\"count\", ascending=False)\nbr_labels.head()","28f1d002":"yy = pd.value_counts(train_dogs['breed'])\n\n\nfig, ax = plt.subplots()\nfig.set_size_inches(15,9)\nsns.set_style(\"whitegrid\")\n\nax = sns.barplot(x = yy.index, y = yy, data = train_dogs)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 90, fontsize = 10)\nax.set(xlabel='Dog Breed', ylabel='Count')\nax.set_title('Distribution of the Dog Breeds')","96c6e055":"target_lables = train_dogs['breed']\none_hot = pd.get_dummies(target_lables, sparse = True)\none_hot_labels = np.asarray(one_hot)\n\n","a33f9f9c":"\nIMG_SIZE = 224\n\nIMG_SHAPE = (IMG_SIZE, IMG_SIZE)\n\n\nn_classes = 120","a08058c1":"x_train = []\ny_train = []\ny_orig_label = []\norig_label = []\ni = 0 \n\nfor f, breed in tqdm(train_dogs.values):\n    img = cv2.imread('..\/input\/dog-breed-identification\/train\/{}.jpg'.format(f))\n    label = one_hot_labels[i]\n    orig_label = target_lables[i]\n    x_train.append(cv2.resize(img, (IMG_SIZE, IMG_SIZE)))\n    y_train.append(label)\n    y_orig_label.append(orig_label)\n    i += 1\n\n \n\n","6c0d8cf0":"y_train_raw = np.array(y_train, np.uint8)\nx_train_raw = np.array(x_train, np.float32) \/ 255.\n","1ee21f4e":"def plot_images(images, cls_true, cls_pred=None):\n    \n    # Create figure with 3x3 sub-plots.\n    fig, axes = plt.subplots(2, 3)\n    fig.subplots_adjust(hspace=0.8, wspace=0.8)\n\n    for i, ax in enumerate(axes.flat):\n        # Plot image.\n        ax.imshow(images[i], cmap='binary')\n\n        # Show true classes.\n        xlabel = \"True: {0}\".format(cls_true[i])\n        \n        # Show the classes as the label on the x-axis.\n        ax.set_xlabel(xlabel)\n        \n        # Remove ticks from the plot.\n        ax.set_xticks([])\n        ax.set_yticks([])\n    \n    # Ensure the plot is shown correctly with multiple plots\n    # in a single Notebook cell.\n    plt.show()","1bdd0751":"train_img = x_train[0:6]\nlabel_img = y_orig_label[0:6]\nplot_images(images=train_img, cls_true=label_img)\n","d0f17d4d":"from sklearn.preprocessing import OneHotEncoder, LabelEncoder\npath_train = '..\/input\/dog-breed-identification\/train'\n#Generator\ndef generator(df, path):\n    \n    while 1:\n        for i in range(int(df.shape[0])):\n            img_path = os.path.join(path, df.iloc[i]['id']+ '.jpg')\n    \n            img = image.load_img(img_path, target_size=(224, 224))\n            x = image.img_to_array(img)\n            x = np.expand_dims(x, axis=0)\n            x = preprocess_input(x)\n            #y = df.iloc[i]['breed']\n            #y = onehot.transform(y).toarray()\n            #print(img.shape,np.array([y]).shape)\n            yield (x)\n                    \ngen_1 = generator(train_dogs, path_train)","ea0ae1da":"from keras.models import Model\nfrom keras.applications.vgg16 import VGG16\nfrom keras.preprocessing import image\nfrom keras.optimizers import SGD, Adam\nfrom keras.applications.resnet50 import preprocess_input, decode_predictions\nfrom keras.layers import Dense, GlobalAveragePooling2D\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.applications.vgg19 import VGG19\n\n\n","656bbcac":"num_class = y_train_raw.shape[1]\n\nprint(num_class)\n","f2efd0af":"vgg16_weights = '..\/input\/vgg16\/vgg16_weights_tf_dim_ordering_tf_kernels.h5'\nbase_model = VGG16(weights=vgg16_weights, input_shape=(224, 224, 3))\n\n\n#base_model.summary()","db6f9dd8":"optimizer = Adam(lr=0.0001)\nmodel = Model(inputs=base_model.input, outputs=base_model.get_layer('fc1').output)\nmodel.compile(loss='categorical_crossentropy',\n                  optimizer=optimizer,\n                  metrics=['accuracy'])","8f05cc8e":"feature = model.predict_generator(gen_1,steps=10221, verbose=1)\n\n\n","f108fd30":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(feature, train_dogs.iloc[:10221]['breed'])\n\nprint(X_train[0:4])","06e22fc2":"#Import svm model\nfrom sklearn import svm\n\n#Create a svm Classifier\nclf = svm.SVC(kernel='linear') # Linear Kernel\n\n#Train the model using the training sets\nclf.fit(X_train, y_train)\n\n#Predict the response for test dataset\ny_pred = clf.predict(X_test)","64a54140":"from sklearn.metrics import accuracy_score\n\nacc = accuracy_score(y_test, y_pred)\n\nprint(\"Incredible accuracy of : \",acc)","1fa0237c":"# Use the sample submission file to set up the test data - x_test\nsubmit_data = pd.read_csv('..\/input\/dog-breed-identification\/sample_submission.csv')","92f3b5b8":"# Creae the x_test\nx_test = []\nfor i in tqdm(submit_data['id'].values):\n     img = cv2.imread('..\/input\/dog-breed-identification\/test\/{}.jpg'.format(i))\n     x_test.append(cv2.resize(img, (224, 224)))","ccaa3ad3":"path_test = '..\/input\/dog-breed-identification\/test\/'\ngen_test = generator(submit_data, path_test)","c0536680":"feature_test = model.predict_generator(gen_test,steps=10357, verbose=1)","6a31e80e":"predictions = clf.predict(feature_test)","8842ee66":"col_names = one_hot.columns.values","ff279d63":"submission_results = pd.DataFrame(predictions)","27bc819d":"submission_results[0:5]","d0b0771b":"submission_results.insert(0, 'id', submit_data['id'])","bb28ee5d":"submission_results.to_csv('submission.csv', index=False)","929f8058":"**Read the labels**","25624a8f":"**Count number of breeds**","5c68d739":"**Image parameters to be used**","f2a3856c":"**Distribution of the breeds**","0bf3b2fd":"**One hot encoding the labels**","81527d8b":"**Function to plot the images**"}}