{"cell_type":{"0ed70e5d":"code","49d94303":"code","50edc682":"code","1c8bc811":"code","573acb7a":"code","670b74fc":"code","bb08d285":"code","a5c3d554":"code","5b25789a":"code","74d9a4a7":"code","ed7f74b8":"code","693ea51b":"code","1af19eb8":"code","96fd0e1e":"markdown"},"source":{"0ed70e5d":"from __future__ import print_function\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","49d94303":"!pip -q install vit_pytorch linformer\n\n\nimport glob\nfrom itertools import chain\nimport os\nimport random\nimport zipfile\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom linformer import Linformer\nfrom PIL import Image\nfrom sklearn.model_selection import train_test_split\nfrom torch.optim.lr_scheduler import StepLR\nfrom torch.utils.data import DataLoader, Dataset\nfrom torchvision import datasets, transforms\nfrom tqdm.notebook import tqdm\n\nfrom vit_pytorch.efficient import ViT\nprint(f\"Torch: {torch.__version__}\")\n\n# Training settings\nbatch_size = 32\nepochs = 30\nlr = 3e-4\ngamma = 0.7\nseed = 42\n\n# Epoch: \u6240\u6709\u8bad\u7ec3\u6837\u672c\u90fd\u5df2\u8f93\u5165\u5230\u6a21\u578b\u4e2d\uff0c\u79f0\u4e3a\u4e00\u4e2aEpoch\n# Iteration\uff1a\u4e00\u6279\u6837\u672c\u8f93\u5165\u5230\u6a21\u578b\u4e2d\uff0c\u79f0\u4e4b\u4e3a\u4e00\u4e2aIteration\n# Batchsize\uff1a\u6279\u5927\u5c0f\uff0c\u51b3\u5b9a\u4e00\u4e2aEpoch\u6709\u591a\u5c11\u4e2aIteration\n# \u6837\u672c\u603b\u6570\uff1a80\uff0c Batchsize\uff1a8\n# 1 Epoch = 10 Iteration\n\n\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.backends.cudnn.deterministic = True\n\nseed_everything(seed)\n\ndevice = 'cuda'\n\nefficient_transformer = Linformer(\n    dim=128,\n    seq_len=49+1,  # 7x7 patches + 1 cls-token\n    depth=12,\n    heads=8,\n    k=64\n)\n\n\ntrain_transforms = transforms.Compose(\n    [\n        transforms.Resize((224, 224)),\n        transforms.RandomResizedCrop(224),\n        transforms.RandomHorizontalFlip(0.3),\n        transforms.RandomVerticalFlip(0.3),\n        transforms.RandomRotation(120),        \n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])#\u5f52\u4e00\u5316\u5230[-1.0,1.0]\n    ]\n)\n\nval_transforms = transforms.Compose(\n    [\n        transforms.Resize((224, 224)),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ]\n)\n\n\ntest_transforms = transforms.Compose(\n    [\n        transforms.Resize((224, 224)),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ]\n)","50edc682":"import torch\nimport torchvision\nfrom torchvision import transforms, utils\nimport matplotlib.pyplot as plt\n\ntrain_dir = '..\/input\/mushroom-12-9528\/Mushrooms_3dataset(9528)\/train'\nval_dir = '..\/input\/mushroom-12-9528\/Mushrooms_3dataset(9528)\/valid'\ntest_dir = '..\/input\/mushroom-12-9528\/Mushrooms_3dataset(9528)\/test'\n\ntrain_img_data = torchvision.datasets.ImageFolder(train_dir,\n                                            transform=train_transforms,\n                                            )\n\nval_img_data = torchvision.datasets.ImageFolder(val_dir,\n                                            transform=val_transforms,\n                                            )\ntest_img_data = torchvision.datasets.ImageFolder(test_dir,\n                                            transform=test_transforms,\n                                            )\n \ntrain_data_loader = torch.utils.data.DataLoader(train_img_data, batch_size=batch_size, shuffle=True)\nval_data_loader = torch.utils.data.DataLoader(val_img_data, batch_size=batch_size, shuffle=True)\ntest_data_loader = torch.utils.data.DataLoader(test_img_data, batch_size=batch_size, shuffle=True)\n\n\n\nprint(len(train_data_loader.dataset))\nprint(len(val_data_loader.dataset))\nprint(len(test_data_loader.dataset))\n\n\n","1c8bc811":"#torch.hub.list('pytorch\/vision')\n#model = torch.hub.load('pytorch\/vision:v0.10.0', 'resnet101', pretrained=True)\nmodel = torch.hub.load('NVIDIA\/DeepLearningExamples:torchhub', 'nvidia_resneXt')\nmodel.fc.out_features = 12\nmodel.to(device)\n","573acb7a":"# Training settings\n# batch_size = 32\n# epochs = 50\n# lr = 3e-4\n# gamma = 0.7\n# seed = 42\n\n\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import accuracy_score\n\n\n# loss function\ncriterion = nn.CrossEntropyLoss()\n# optimizer\noptimizer = optim.Adam(model.parameters(), lr=lr)\n# scheduler\nscheduler = StepLR(optimizer, step_size=1, gamma=gamma)\n\nmodel.train()\nfor epoch in range(epochs):\n    epoch_loss = 0\n    epoch_accuracy = 0\n\n    #for data, label in tqdm(train_loader):\n    for data, label in tqdm(train_data_loader):\n        data = data.to(device)\n        label = label.to(device)\n\n        output = model(data)\n        loss = criterion(output, label)\n\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n        acc = (output.argmax(dim=1) == label).float().mean()\n        epoch_accuracy += acc \/ len(train_data_loader)\n        epoch_loss += loss \/ len(train_data_loader)\n        \n    with torch.no_grad():\n        epoch_val_accuracy = 0\n        epoch_val_loss = 0\n        for data, label in val_data_loader:\n            data = data.to(device)\n            label = label.to(device)\n\n            val_output = model(data)\n            val_loss = criterion(val_output, label)\n\n            acc = (val_output.argmax(dim=1) == label).float().mean()\n            epoch_val_accuracy += acc \/ len(val_data_loader)\n            epoch_val_loss += val_loss \/ len(val_data_loader)\n            \n    \n    print(\n        f\"Epoch : {epoch+1} - loss : {epoch_loss:.4f} - acc: {epoch_accuracy:.4f} - val_loss : {epoch_val_loss:.4f} - val_acc: {epoch_val_accuracy:.4f}\\n\"\n    )\n\n    torch.save(model, '.\/model.pt')  # \u76f4\u63a5\u4fdd\u5b58\u6a21\u578b","670b74fc":"model.eval()\nprob_all = []\nlable_all = []\nprob_score=[]\ni=0\nfor data, label in tqdm(test_data_loader):\n        data = data.to(device)\n        label = label.to(device)\n        l2 = label.cpu().detach().numpy()\n        lable_all.extend(l2)\n        prob = model(data) #\u8868\u793a\u6a21\u578b\u7684\u9884\u6d4b\u8f93\u51fa\n        prob = prob.cpu().detach().numpy() #\u5148\u628aprob\u8f6c\u5230CPU\u4e0a\uff0c\u7136\u540e\u518d\u8f6c\u6210numpy\uff0c\u5982\u679c\u672c\u8eab\u5728CPU\u4e0a\u8bad\u7ec3\u7684\u8bdd\u5c31\u4e0d\u7528\u5148\u8f6c\u6210CPU\u4e86\n        prob_score.extend(prob) \n        prob_all.extend(np.argmax(prob,axis=1)) #\u6c42\u6bcf\u4e00\u884c\u7684\u6700\u5927\u503c\u7d22\u5f15\n        i=i+1\n#print(prob_all)\n#print(label_train)\nprint(i)\n","bb08d285":"!pip install pytorch-gradcam\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import classification_report\n\ntarget_names = ['Agaricus', 'Amanita', 'Boletus','Cortinarius','Entoloma','Exidia','Hygrocybe','Inocybe','Lactarius','Pluteus','Russula','Suillus']\n\nprint(\"Accuracy:{:.4f}\".format(accuracy_score(lable_all, prob_all) ))\nprint(\"Recall:{:.4f}\".format(recall_score(lable_all, prob_all,average='macro') ))\nprint(\"Precision:{:.4f}\".format(precision_score(lable_all, prob_all,average='macro') ))\nprint(\"f1_score:{:.4f}\".format(f1_score(lable_all, prob_all,average='macro') ))\nprint(classification_report(lable_all,prob_all,target_names=target_names))\n\n#fpr, tpr, thresholds = roc_curve(lable_all, prob_score, pos_label=2)\n#print(\"Auc:{:.4f}\".format(roc_auc_score(lable_all, prob_score,average='macro') ))\nprint(confusion_matrix(prob_all,lable_all))\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nconf_mat=confusion_matrix(prob_all,lable_all)\nclass_label=train_img_data.classes\ndf_cm = pd.DataFrame(conf_mat, index=class_label, columns=class_label)\ndf_cm\n#conf_mat\nheatmap=sns.heatmap(df_cm, annot=True, fmt=\"d\",cmap=\"YlGnBu\")\nheatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(),rotation=0, ha='right')\nheatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(),rotation=45, ha='right')\n\n\nimport torch\nimport torchvision\nimport torch.nn as nn\nimport torch.optim as optim\nfrom gradcam import GradCAM, GradCAMpp\nfrom gradcam.utils import visualize_cam\nfrom torchvision import transforms\nimport PIL\nimport matplotlib.pyplot as plt\n\n#model = torch.load('..\/input\/mushroom-resnet50\/model.pt')\ngradcam = GradCAM.from_config(model_type='resnet', arch=model, layer_name='layer4')\n \n# get an image and normalize with mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)\n\npil_img = PIL.Image.open('..\/input\/mushroom-12-9528\/Mushrooms_3dataset(9528)\/test\/Agaricus\/028_-vDPakMKna4.jpg')\ntorch_img = transforms.Compose([transforms.Resize((224, 224)), transforms.ToTensor()])(pil_img).to('cuda')\nnormed_img = transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])(torch_img)[None]\n \n    # get a GradCAM saliency map on the class index 10.\nmask, logit = gradcam(normed_img, class_idx=None)\n\nheatmap, cam_result = visualize_cam(mask, torch_img)\n \nplt.figure()\nplt.imshow(transforms.ToPILImage()(heatmap))\n \nplt.figure()\nplt.imshow(transforms.ToPILImage()(cam_result))\n \nplt.show()\n\n#plt.savefig(\"heatmap1.png\",dpi=500,bbox_inches = 'tight')\n\n","a5c3d554":"pil_img = PIL.Image.open('..\/input\/mushroom-12-9528\/Mushrooms_3dataset(9528)\/test\/Amanita\/017_NOBUxtHiHRg.jpg')\ntorch_img = transforms.Compose([transforms.Resize((224, 224)), transforms.ToTensor()])(pil_img).to('cuda')\nnormed_img = transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])(torch_img)[None]\n \n    # get a GradCAM saliency map on the class index 10.\nmask, logit = gradcam(normed_img, class_idx=None)\n\nheatmap, cam_result = visualize_cam(mask, torch_img)\n \nplt.figure()\nplt.imshow(transforms.ToPILImage()(heatmap))\n \nplt.figure()\nplt.imshow(transforms.ToPILImage()(cam_result))\n \nplt.show()\n\n#plt.savefig(\".heatmap2.png\",dpi=500,bbox_inches = 'tight')","5b25789a":"pil_img = PIL.Image.open('..\/input\/mushroom-12-9528\/Mushrooms_3dataset(9528)\/test\/Boletus\/0017_j-9IXyoRLrY.jpg')\ntorch_img = transforms.Compose([transforms.Resize((224, 224)), transforms.ToTensor()])(pil_img).to('cuda')\nnormed_img = transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])(torch_img)[None]\n \n    # get a GradCAM saliency map on the class index 10.\nmask, logit = gradcam(normed_img, class_idx=None)\n\nheatmap, cam_result = visualize_cam(mask, torch_img)\n \nplt.figure()\nplt.imshow(transforms.ToPILImage()(heatmap))\n \nplt.figure()\nplt.imshow(transforms.ToPILImage()(cam_result))\n \nplt.show()\n\n#plt.savefig(\".heatmap2.png\",dpi=500,bbox_inches = 'tight')","74d9a4a7":"pil_img = PIL.Image.open('..\/input\/mushroom-12-9528\/Mushrooms_3dataset(9528)\/test\/Entoloma\/009_FXrjeqzS7RU.jpg')\ntorch_img = transforms.Compose([transforms.Resize((224, 224)), transforms.ToTensor()])(pil_img).to('cuda')\nnormed_img = transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])(torch_img)[None]\n \n    # get a GradCAM saliency map on the class index 10.\nmask, logit = gradcam(normed_img, class_idx=None)\n\nheatmap, cam_result = visualize_cam(mask, torch_img)\n \nplt.figure()\nplt.imshow(transforms.ToPILImage()(heatmap))\n \nplt.figure()\nplt.imshow(transforms.ToPILImage()(cam_result))\n \nplt.show()\n\n#plt.savefig(\".heatmap2.png\",dpi=500,bbox_inches = 'tight')","ed7f74b8":"pil_img = PIL.Image.open('..\/input\/mushroom-12-9528\/Mushrooms_3dataset(9528)\/test\/Hygrocybe\/009_ibeII169AxM.jpg')\ntorch_img = transforms.Compose([transforms.Resize((224, 224)), transforms.ToTensor()])(pil_img).to('cuda')\nnormed_img = transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])(torch_img)[None]\n \n    # get a GradCAM saliency map on the class index 10.\nmask, logit = gradcam(normed_img, class_idx=None)\n\nheatmap, cam_result = visualize_cam(mask, torch_img)\n \nplt.figure()\nplt.imshow(transforms.ToPILImage()(heatmap))\n \nplt.figure()\nplt.imshow(transforms.ToPILImage()(cam_result))\n \nplt.show()\n\n#plt.savefig(\".heatmap2.png\",dpi=500,bbox_inches = 'tight')","693ea51b":"pil_img = PIL.Image.open('..\/input\/mushroom-12-9528\/Mushrooms_3dataset(9528)\/test\/Inocybe\/AS2014PIC72742951.jpg')\ntorch_img = transforms.Compose([transforms.Resize((224, 224)), transforms.ToTensor()])(pil_img).to('cuda')\nnormed_img = transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])(torch_img)[None]\n \n    # get a GradCAM saliency map on the class index 10.\nmask, logit = gradcam(normed_img, class_idx=None)\n\nheatmap, cam_result = visualize_cam(mask, torch_img)\n \nplt.figure()\nplt.imshow(transforms.ToPILImage()(heatmap))\n \nplt.figure()\nplt.imshow(transforms.ToPILImage()(cam_result))\n \nplt.show()\n\nplt.savefig(\"heatmap2.png\",dpi=500,bbox_inches = 'tight')","1af19eb8":"import torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nimport torch.optim.lr_scheduler as lr_scheduler\nfrom torch.optim.lr_scheduler import _LRScheduler\nfrom torch.utils.data import DataLoader, sampler, random_split\n\nimport torchvision.transforms as transforms\nimport torchvision.datasets as datasets\nimport torchvision.models as models\n\nfrom sklearn import decomposition\nfrom sklearn import manifold\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import ConfusionMatrixDisplay\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport copy\nfrom collections import namedtuple\nimport os\nimport random\nimport shutil\nimport time\n\ndef get_representations(model, iterator):\n\n    model.eval()\n\n    outputs = []\n    intermediates = []\n    labels = []\n\n    with torch.no_grad():\n        for data, label in tqdm(iterator):\n            data = data.to(device)\n            #label = label.to(device)\n            l2 = label.cpu().detach().numpy()\n            lable_all.extend(l2)\n            prob = model(data) #\u8868\u793a\u6a21\u578b\u7684\u9884\u6d4b\u8f93\u51fa\n            outputs.append(prob.cpu())\n            labels.append(label)\n        \n\n    outputs = torch.cat(outputs, dim = 0)\n    labels = torch.cat(labels, dim = 0)\n\n    return outputs, labels\n\noutputs, labels = get_representations(model, train_data_loader)\n\ndef get_pca(data, n_components = 2):\n    pca = decomposition.PCA()\n    pca.n_components = n_components\n    pca_data = pca.fit_transform(data)\n    return pca_data\n\ndef plot_representations(data, labels, classes, n_images = None):\n    \n    if n_images is not None:\n        data = data[:n_images]\n        labels = labels[:n_images]\n        \n    fig = plt.figure(figsize = (10, 10))\n    ax = fig.add_subplot(111)\n    scatter = ax.scatter(data[:, 0], data[:, 1], c = labels, cmap = 'tab10')\n    handles, labels = scatter.legend_elements()\n    legend = ax.legend(handles = handles, labels = classes)\n    \n\noutput_pca_data = get_pca(outputs)\nplot_representations(output_pca_data, labels, train_img_data.classes)\n\ndef get_tsne(data, n_components = 2, n_images = None):\n    \n    if n_images is not None:\n        data = data[:n_images]\n        \n    tsne = manifold.TSNE(n_components = n_components, early_exaggeration=3, random_state = 8, perplexity=35,learning_rate=300)\n    tsne_data = tsne.fit_transform(data)\n    return tsne_data\n\nN_IMAGES = 5_000\n\noutput_tsne_data = get_tsne(outputs)\nplot_representations(output_tsne_data, labels, train_img_data.classes)\n\nN_IMAGES = 5_000\n\noutput_tsne_data = get_tsne(outputs)\nplot_representations(output_tsne_data, labels, train_img_data.classes)","96fd0e1e":"====\u4ee5\u4e0b\u4e3a\u8bad\u7ec3\u540e\uff0c\u8f7d\u5165\u5f97\u5230\u7684\u6743\u91cd\u505a\u8bc4\u4f30\uff08\u4e0e\u4e0a\u9762\u65e0\u5173\uff09"}}