{"cell_type":{"e42151f8":"code","55f53187":"code","5925a164":"code","1564d115":"code","b15071e6":"code","e98de52a":"code","4d31b997":"code","19d774f9":"code","69df6427":"code","53eb4eac":"code","349ba2c5":"code","113fdb66":"code","2c3b801d":"code","0aa5c6ce":"code","e615e1f3":"code","efeb7c5a":"code","303c6e15":"code","d816f42f":"code","8c4b1bd7":"code","f397046f":"code","620e5456":"code","35394f42":"code","12594fdf":"code","8a8c571a":"code","b4e38ab3":"code","bc6adc8d":"code","ee577b35":"code","670dcebd":"code","c0da9eab":"code","aa0470f2":"markdown"},"source":{"e42151f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","55f53187":"import pandas as pd\nimport numpy as np","5925a164":"df = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')","1564d115":"df.head()","b15071e6":"df.corr()['Outcome']","e98de52a":"X = df.iloc[:,0:-1]\ny = df.iloc[:,-1]","4d31b997":"from sklearn.preprocessing import StandardScaler\nse = StandardScaler()\nX = se.fit_transform(X)\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y, test_size = 0.2, random_state = 1)","19d774f9":"import tensorflow\nfrom tensorflow import keras \nfrom keras import Sequential\nfrom keras.layers import Dense,Dropout\nimport kerastuner as kt\n","69df6427":"def build_model(hp):\n    model = Sequential()\n    model.add(Dense(32,activation='relu',input_dim = 8))\n    model.add(Dense(1,activation='sigmoid'))\n    optimizer = hp.Choice('optimizer',values = ['adam','sgd','rmsprop','adadelta'])\n    model.compile(optimizer= optimizer,loss = 'binary_crossentropy',metrics = ['accuracy'])\n    return (model)","53eb4eac":"tuner = kt.RandomSearch(build_model, objective = 'val_accuracy', max_trials = 10, directory = 'mydir', project_name = 'keras_tuer1')","349ba2c5":"from keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor = 'val_loss', patience = 30)","113fdb66":"help(EarlyStopping)","2c3b801d":"tuner.search(X_train,y_train,epochs = 200,validation_data = (X_test,y_test), callbacks = [early_stop])","0aa5c6ce":"tuner.get_best_hyperparameters()[0].values","e615e1f3":"model = tuner.get_best_models(num_models=1)[0]","efeb7c5a":"model.evaluate(X_test,y_test)","303c6e15":"def build_model(hp):\n    model = Sequential()\n    counter = 0\n    for i in range(hp.Int('num_layers', min_value = 1, max_value = 10)):\n        if counter == 0:\n            model.add(\n          Dense(hp.Int('units'+str(i),min_value = 8, max_value = 128, step = 2), \n                activation = hp.Choice('activation'+str(i), values = ['relu','tanh','sigmoid']),\n                input_dim = 8))\n            model.add(Dropout(hp.Choice('dropout'+str(i), values = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9])))    \n      \n    else:\n        model.add(Dense(\n           hp.Int('units'+str(i),min_value = 8, max_value = 128, step = 2),\n           activation = hp.Choice('activation'+str(i),values = ['relu','tanh','sigmoid'])\n       ))\n        model.add(Dropout(hp.Choice('dropout'+str(i), values = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9])))    \n\n    counter += 1\n    model.add(Dense(1, activation = 'sigmoid'))\n    model.compile(optimizer = hp.Choice('optimizer', values = ['adam', 'rmsprop', 'sgd']) , loss = 'binary_crossentropy',\n    metrics = ['accuracy'])\n    return(model)","d816f42f":"tuner = kt.RandomSearch(build_model, objective = 'val_accuracy',max_trials = 5,directory = 'mydir', project_name = 'keras_tue1' )","8c4b1bd7":"tuner.search_space_summary()","f397046f":"tuner.search(X_train,y_train, epochs = 200 ,batch_size = 16,  validation_data = (X_test,y_test))","620e5456":"tuner.get_best_hyperparameters()[0].values","35394f42":"tuner.results_summary()","12594fdf":"best_model = tuner.get_best_models(num_models =1)[0]","8a8c571a":"best_model.evaluate(X_test,y_test, batch_size = 16)","b4e38ab3":"from keras.callbacks  import History, EarlyStopping\nearly_stop = EarlyStopping(monitor = 'val_accuracy', patience  =  20)\nhistory = History()\n","bc6adc8d":"best_model.fit(X_train,y_train,epochs = 200, batch_size = 20,verbose = 1, validation_data = (X_test,y_test), callbacks = [history, early_stop])","ee577b35":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","670dcebd":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model\"s training and validation loss across epochs')\nplt.ylabel('accuracy')\nplt.xlabel('Epochs')\nplt.legend(['Train','validation'], loc ='right')\nplt.show()","c0da9eab":"best_model.evaluate(X_test,y_test)","aa0470f2":"### till here we are clear that we will gonna use Adam as optimizer "}}