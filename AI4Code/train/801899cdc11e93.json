{"cell_type":{"f43e15b2":"code","9fafdd99":"code","a434adcc":"code","84b35706":"code","61069d2e":"code","aec1129b":"code","76140963":"code","61ae9809":"code","ac2672f5":"code","f42f7c5a":"code","f8016ef4":"code","caa42fb1":"code","2a50b204":"code","d95e7f1a":"markdown","690f6171":"markdown","69ee6ad0":"markdown","dfaec30a":"markdown","04be0bf9":"markdown","4d8830ec":"markdown","0fe8215c":"markdown","8e242b7e":"markdown","bd720478":"markdown"},"source":{"f43e15b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport pylab as pl\nfrom datetime import datetime\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9fafdd99":"df = pd.read_csv('..\/input\/googleplaystore.csv')\n\npd.options.display.max_rows = 50\npd.options.display.max_columns = 10\n\ndf.head()\n\ndf.describe()","a434adcc":"print('Total number of apps: ', len(df))\nprint(df.isnull().sum())\n\ndf.drop_duplicates(subset='App', inplace=True)\ndf = df[df.Rating.notnull()]\ndf = df[df['Android Ver'].notnull()]\ndf = df[df['Current Ver'].notnull()]\n\ndf.drop_duplicates(subset='App', inplace=True)\nprint('Total number of apps: ', len(df))\nprint(df.isnull().sum())","84b35706":"df['Reviews'] = df.Reviews.astype(int) \n\ndf['Price'] = df.Price.apply(lambda x: x.replace('$', '') if '$' in x else x) # contains dollar sign. Should be transormed more.\ndf['Price'] = df.Price.astype(float) \n\n# chaining example in transformation with lambda\n# log added for scaling the feature\ndf['Installs'] = df.Installs.apply(lambda x: np.log(int(x.replace('+', '').replace(',', ''))))\n\n# transformation of size, including log for scaling the feature\ndf['Size'] = df['Size'].apply(lambda x: str(x).replace('Varies with device', 'NaN') if 'Varies with device' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: str(x).replace('M', '') if 'M' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: str(x).replace(',', '') if ',' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: float(str(x).replace('k', '')) \/ 1000 if 'k' in str(x) else x)\ndf['Size'] = df.Size.astype(float) \ndf['Size'] = np.log(df['Size'])\n\n# transformation to date format\ndf['Last Updated'] = df['Last Updated'].apply(lambda x: pd.to_datetime(x) if pd.notnull(x) else '')\n\ndf.info(verbose=True)\ndf.describe()","61069d2e":"pl.figure(figsize=(12,5))\npl.title(\"Distribution rating\")\nax = sns.distplot(df[\"Rating\"], color = 'r')","aec1129b":"pl.figure(figsize = (12,10))\n\npl.scatter(df[\"Rating\"],\n            df[\"Reviews\"],\n            linewidths=1, c = \"b\")\npl.xlabel(\"Rating\")\npl.ylabel(\"Reviews\")\npl.title(\"scatter rating and reviews\")\npl.show()","76140963":"pl.figure(figsize = (12,10))\n\npl.scatter(df[\"Installs\"],\n            df[\"Rating\"],s = 5,\n            linewidths=1, c = \"b\")\npl.xlabel(\"Installs\")\npl.ylabel(\"Rating\")\npl.title(\"scatter installs and rating\")\npl.show()","61ae9809":"pl.figure(figsize = (12,10))\n\npl.scatter(df[\"Installs\"],\n            df[\"Price\"],s = 5,\n            linewidths=1, c = \"b\")\npl.xlabel(\"Installs\")\npl.ylabel(\"Price\")\npl.title(\"scatter installs and price\")\npl.show()","ac2672f5":"pl.figure(figsize = (12,10))\n\npl.scatter(df[\"Installs\"],\n            df[\"Size\"],s = 5,\n            linewidths=1, c = \"b\")\npl.xlabel(\"Installs\")\npl.ylabel(\"Size\")\npl.title(\"scatter installs and size\")\npl.show()","f42f7c5a":"#sns.pairplot(df, vars[\"Rating\", \"Reviews\", \"Price\", \"Size\", \"Installs\"])\n#df = df[(df.installs !=0) & (df.reviews!=0)].dropna()\n#df = df['Installs'][df.Installs!=0].dropna()\nimpute_value = df['Installs'].median\n#df = df['Installs'][df.Installs!=0].fillna(impute_value)\n#df = df['Reviews'][df.Reviews!=0].dropna()\ndf = df[(df.Installs !=0) & (df.Reviews!=0)].dropna()\n\ncols = [\"Rating\", \"Reviews\", \"Price\", \"Size\", \"Installs\", \"Type\"]\n#cols = [\"Rating\", \"Price\", \"Size\", \"Installs\"]\n\ndfcols = df[cols]\nsns.pairplot(dfcols, hue=\"Type\" )","f8016ef4":"sns.boxplot(y=\"Rating\", x=\"Installs\", data=df, palette = 'pink')","caa42fb1":"#cm = np.corrcoef(df[cols].values.T)\n#sns.set(font_scale = 1.7)\n#hm = sns.heatmap(cm,cbar = True, annot = True,square = True, fmt = '.2f', annot_kws = {'size':15}, yticklabels = cols, xticklabels = cols)\n\n# create correlation matrix\ncorr = df.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# draw heatmap\nsns.heatmap(corr, xticklabels=corr.columns.values, yticklabels=corr.columns.values, mask=mask)","2a50b204":"grouped = df.groupby(['Category'])['Installs'].mean()\n\ngrouped.plot.bar()","d95e7f1a":"And the correlation heatmap:","690f6171":"Group by category and show in historgram.","69ee6ad0":"Start to visualize.","dfaec30a":"And now the scatter plot","04be0bf9":"Clean the dataset.","4d8830ec":"And the boxplot","0fe8215c":"Show the variables in the dataframe.","8e242b7e":"Read the data set","bd720478":"And now the pairplot for the same variables: rating, reviews, price, size and iinstalls:"}}