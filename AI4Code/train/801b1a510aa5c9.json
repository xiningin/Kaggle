{"cell_type":{"3235d68d":"code","4555fa8d":"code","89224f96":"code","cc133131":"code","08993384":"code","d54c0bb4":"code","f3ceeec6":"code","7441ef05":"code","cf08f01b":"code","e9c7f319":"code","a5d5ece3":"code","768b844b":"code","ddac967b":"code","fd4616e8":"code","59d5eb5d":"markdown","bea47816":"markdown","eb8e8a60":"markdown","d01547e2":"markdown","45e5c9ec":"markdown","0b003e3b":"markdown","0d77420d":"markdown","26bb2203":"markdown","86504d12":"markdown","312a0f13":"markdown","ca4ed7fe":"markdown"},"source":{"3235d68d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px # interactive data visualization library\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4555fa8d":"# use pandas to read desired CSV file, and display first two records\ndata = pd.read_csv('..\/input\/online-chess-games\/chess_games.csv')\ndata.head(2)","89224f96":"# get a dataset that displays the counts of each outcome\nwinners = pd.DataFrame(data['winner'].value_counts()).reset_index().rename(columns={'index': 'Winner', 'winner': 'Count'})\nwinners","cc133131":"px.pie(winners,\n       title='Percentages of Wins and Draws',\n       names='Winner',\n       values='Count',\n       color_discrete_sequence=px.colors.qualitative.D3,    # I personally like this color scheme better than the default\n       height=450,\n       width=500\n      )","08993384":"winner_statuses = (pd.DataFrame(data[['winner', 'victory_status']].value_counts())\n                     .reset_index()\n                     .rename(columns={'Count': 'winner', 0: 'count'}))\n\nwinner_statuses = winner_statuses[~(winner_statuses['winner'] == 'Draw')]\nwinner_statuses","d54c0bb4":"# bar chart that shows proportion of winners by piece color of the winner and the type of victory\npx.bar(winner_statuses,\n       title='Proportion of Winners by Piece and Type of Victory',\n       x='victory_status',\n       y='count',\n       color='winner',\n       barmode='group',\n       color_discrete_sequence=px.colors.qualitative.D3,   \n       height=500,\n       width=700\n      )","f3ceeec6":"black_win_data = data[data['winner']=='Black']\nblack_openings = pd.DataFrame(black_win_data['opening_fullname'].value_counts().head(10)).reset_index().rename(columns={'index': 'opening', 'opening_fullname': 'wins'})\n\n# bar chart of top 10 openings for black\npx.bar(black_openings,\n       title='Top 10 Common Openings for Black',\n       x='wins',\n       y='opening',\n       width=900,\n       height=500,\n       color_discrete_sequence=px.colors.qualitative.D3\n      ).update_yaxes(categoryorder='total ascending')","7441ef05":"white_win_data = data[data['winner']=='White']\nwhite_openings = pd.DataFrame(white_win_data['opening_fullname'].value_counts().head(10)).reset_index().rename(columns={'index': 'opening', 'opening_fullname': 'wins'})\n\n# bar chart of top 10 openings for white\npx.bar(white_openings,\n       title='Top 10 Common Openings for White',\n       x='wins',\n       y='opening',\n       width=900,\n       height=500,\n       color_discrete_sequence=px.colors.qualitative.D3\n      ).update_yaxes(categoryorder='total ascending')","cf08f01b":"black_win_percent = round(len(black_win_data[(black_win_data['black_rating']) > (black_win_data['white_rating'])]) \/ len(black_win_data), 4) * 100\nwhite_win_percent = round(len(white_win_data[(white_win_data['white_rating']) > (white_win_data['black_rating'])]) \/ len(white_win_data), 4) * 100\n\nprint(f'Black Stats: {black_win_percent}% of winners with the black pieces had higher rating than their opponent.')\nprint(f'White Stats: {white_win_percent}% of winners with the white pieces had higher rating than their opponent.')","e9c7f319":"px.bar(black_win_data['black_id'].value_counts().head(),\n       title='Player Wins With Black Pieces',\n       orientation='h',\n       width=600,\n       height=400,\n       color_discrete_sequence=px.colors.qualitative.D3\n      ).update_yaxes(categoryorder='total ascending')","a5d5ece3":"px.bar(white_win_data['white_id'].value_counts().head(),\n       title='Player Wins With White Pieces',\n       orientation='h',\n       width=600,\n       height=400,\n       color_discrete_sequence=px.colors.qualitative.D3\n      ).update_yaxes(categoryorder='total ascending')","768b844b":"player_results = pd.DataFrame(data[['winner', 'white_id']].value_counts()).reset_index().rename(columns={0: 'count'})\nplayer_results","ddac967b":"win_counts = []\n\n# count the number of wins for each player and put it into a list of dictionaries called win_counts\nfor player in player_results['white_id'].unique():\n    win_counts.append({'player': player, 'total wins': player_results[player_results['white_id']==player]['count'].sum()})\n\n# make a dataframe out of the list of dictionaries, sort it in descending order, and reset the indecies \n# dataframe only includes the top 10 accounts\nresults = pd.DataFrame(win_counts).sort_values(by='total wins', ascending=False).reset_index(drop=True).head()\nresults","fd4616e8":"# bar plot showing a visualization of the results\npx.bar(results,\n       title='Player Wins',\n       x='total wins',\n       y='player',\n       width=600,\n       height=400,\n       color_discrete_sequence=px.colors.qualitative.D3\n      ).update_yaxes(categoryorder='total ascending')","59d5eb5d":"> Another chart that shows the proportions of winners according to **piece color of winner**, and **victory_status**\u2014won by resignation, checkmate or the opponent ran out of time.","bea47816":"> As expected, **taranga** is the player with the highest amount of wins for both the black pieces and the white pieces","eb8e8a60":"### 2.2.2 White\n\n> Here we can see the **top 10** most common openings in which white was victorious","d01547e2":"> With this pie chart, we can see that almost **half** of all games were won with the white pieces, **45.4%** by black, and **950** games ended in a draw.","45e5c9ec":"## 2.2 Frequent Opening Moves by Color\n\n- **Q:** Which opening move was most frequently used in games in which black won? What about when white won?\n","0b003e3b":"### 2.2.1 Black\n\n> Here we can see the **top 10** most common openings in which black was victorious","0d77420d":"# 1. Import Dataset","26bb2203":"## 2.4 User With Most Wins\n\n- **Q:** Which user won the most amount of games? In what percentage of those games was the user the higher rated player?\n\n> When I got the `value_counts` for each winner, it seemed like the player **taranga** will have the most wins, but of course I have to find another way to verify this hypothesis.","86504d12":"# 2. Analyzing The Data\n\n**Sample Questions to Ponder:**\n\n- What percentage of games were won by white? How many ended in a draw?\n\n- Which opening move was most frequently used in games in which black won? What about when white won?\n\n- What percentage of games are won by the player with the higher rating? Does this vary by piece color?\n\n- Which user won the most amount of games? In what percentage of those games was the user the higher rated player?","312a0f13":"## 2.1 Percentage of Drawn Games & Wins by White and Black\n\n- **Q:** What percentage of games were won by white? How many ended in a draw?","ca4ed7fe":"## 2.3 Percentage of Wins of Players With Higher Rating\n\n- **Q:** What percentage of games are won by the player with the higher rating? Does this vary by piece color?\n\n> Based on these percentages, there is only a **slight difference** in the variance of percentages between white and black, white being slightly higher at **65.28%**, and black slightly lower at **63.94%**. "}}