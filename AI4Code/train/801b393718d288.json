{"cell_type":{"950dcd21":"code","00117bbf":"code","e1ac9c3c":"code","09e711ab":"code","3753ee41":"code","8581fca1":"code","b6f3493b":"code","713064c5":"code","14905a12":"code","284299b1":"code","3ab0dc86":"code","b2bddf2c":"code","0aa736d8":"code","fc7107c5":"code","80b04a8d":"code","493a3106":"code","6e92a8aa":"code","1eef1945":"code","d115fe26":"code","38240990":"code","5972526d":"code","7d5bc674":"code","9fd4ecbd":"code","092330df":"code","b6c16311":"code","f3e8899f":"code","d8ae5e96":"code","5cc7eac0":"code","4481ba8c":"markdown","1e44fabf":"markdown","61cc2989":"markdown","59a5292f":"markdown","4bf837ee":"markdown","02baf96c":"markdown","3edb80a2":"markdown","f7f432fc":"markdown","4e7449fa":"markdown","2e2e15cd":"markdown","843f00ba":"markdown","701125b0":"markdown","e510272a":"markdown","034df27f":"markdown","fb457090":"markdown","994f1e5f":"markdown","77856539":"markdown","b9d8980a":"markdown"},"source":{"950dcd21":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","00117bbf":"'''\nLoad the dataset from the csv and save it to 'data_text'\n'''\nimport pandas as pd\ndata = pd.read_csv('..\/input\/abcnewsdata\/abcnews-date-text.csv', error_bad_lines=False)\n# we only need to headlines from the data\ndata_text = data[:300000][['headline_text']]\ndata_text['index'] = data_text.index\ndocuments = data_text","e1ac9c3c":"'''\nGet the total number of documents\n'''\nprint(len(documents))","09e711ab":"documents.head()","3753ee41":"'''\nLoading Gensim and nltk libraries\n'''\n\nimport gensim\nfrom gensim.utils import simple_preprocess\nfrom gensim.parsing.preprocessing import STOPWORDS\nfrom nltk.stem import WordNetLemmatizer, SnowballStemmer\nfrom nltk.stem.porter import *\nimport numpy as np\nnp.random.seed(400)","8581fca1":"import nltk\nnltk.download('wordnet')","b6f3493b":"'''\nWrite a function to perform the pre processing steps on the entire dataset\n'''\nstemmer = SnowballStemmer(\"english\")\ndef lemmatize_stemming(text):\n    return stemmer.stem(WordNetLemmatizer().lemmatize(text, pos='v'))\n\n# Tokenize and Lemmatize\ndef preprocess(text):\n    result=[]\n    for token in gensim.utils.simple_preprocess(text) :\n        if token not in gensim.parsing.preprocessing.STOPWORDS and len(token) > 3:\n            result.append(lemmatize_stemming(token))\n    return result","713064c5":"'''\nPreview a document after preprocessing\n'''\ndocument_num = 4310\ndoc_sample = documents[documents['index'] == document_num].values[0][0]\n\nprint(\"Original document: \")\nwords = []\nfor word in doc_sample.split(' '):\n    words.append(word)\nprint(words)\nprint(\"\\n\\nTokenized and lemmatized document: \")\nprint(preprocess(doc_sample))","14905a12":"documents.head()","284299b1":"# preprocess all the headlines, saving the list of results as 'processed_docs'\nprocessed_docs = documents['headline_text'].map(preprocess)","3ab0dc86":"'''\nPreview 'processed_docs'\n'''\nprocessed_docs.head()","b2bddf2c":"'''\nCreate a dictionary from 'processed_docs' containing the number of times a word appears \nin the training set using gensim.corpora.Dictionary and call it 'dictionary'\n'''\ndictionary = gensim.corpora.Dictionary(processed_docs)","0aa736d8":"'''\nChecking dictionary created\n'''\ncount = 0\nfor k, v in dictionary.iteritems():\n    print(k, v)\n    count += 1\n    if count > 10:\n        break","fc7107c5":"'''\nRemove very rare and very common words:\n\n- words appearing less than 15 times\n- words appearing in more than 10% of all documents\n'''\ndictionary.filter_extremes(no_below=15, no_above=0.1, keep_n=100000)","80b04a8d":"bow_corpus = [dictionary.doc2bow(doc) for doc in processed_docs]","493a3106":"'''\nChecking Bag of Words corpus for our sample document --> (token_id, token_count)\n'''\nbow_corpus[document_num]","6e92a8aa":"'''\nPreview BOW for our sample preprocessed document\n'''\n# Here document_num is document number 4310 which we have checked in Step 2\nbow_doc_4310 = bow_corpus[document_num]\n\nfor i in range(len(bow_doc_4310)):\n    print(\"Word {} (\\\"{}\\\") appears {} time.\".format(bow_doc_4310[i][0], \n                                                     dictionary[bow_doc_4310[i][0]], \n                                                     bow_doc_4310[i][1]))","1eef1945":" '''\nCreate tf-idf model object using models.TfidfModel on 'bow_corpus' and save it to 'tfidf'\n'''\nfrom gensim import corpora, models\n\n\ntfidf = models.TfidfModel(bow_corpus)","d115fe26":"'''\nApply transformation to the entire corpus and call it 'corpus_tfidf'\n'''\ncorpus_tfidf = tfidf[bow_corpus]","38240990":"'''\nPreview TF-IDF scores for our first document --> --> (token_id, tfidf score)\n'''\nfrom pprint import pprint\nfor doc in corpus_tfidf:\n    pprint(doc)\n    break","5972526d":"# LDA mono-core -- fallback code in case LdaMulticore throws an error on your machine\n# lda_model = gensim.models.LdaModel(bow_corpus, \n#                                    num_topics = 10, \n#                                    id2word = dictionary,                                    \n#                                    passes = 50)\n\n# LDA multicore \n'''\nTrain your lda model using gensim.models.LdaMulticore and save it to 'lda_model'\n'''\nlda_model = gensim.models.LdaMulticore(bow_corpus, \n                                       num_topics=10, \n                                       id2word = dictionary, \n                                       passes = 2, \n                                       workers=2)","7d5bc674":"'''\nFor each topic, we will explore the words occuring in that topic and its relative weight\n'''\nfor idx, topic in lda_model.print_topics(-1):\n    print(\"Topic: {} \\nWords: {}\".format(topic, idx ))\n    print(\"\\n\")","9fd4ecbd":"'''\nDefine lda model using corpus_tfidf, again using gensim.models.LdaMulticore()\n'''\n\nlda_model_tfidf = gensim.models.LdaMulticore(corpus_tfidf, \n                                       num_topics=10, \n                                       id2word = dictionary, \n                                       passes = 2, \n                                       workers=2)","092330df":"'''\nFor each topic, we will explore the words occuring in that topic and its relative weight\n'''\nfor idx, topic in lda_model_tfidf.print_topics(-1):\n    print(\"Topic: {} Word: {}\".format(idx, topic))\n    print(\"\\n\")","b6c16311":"'''\nText of sample document 4310\n'''\nprocessed_docs[4310]","f3e8899f":"'''\nCheck which topic our test document belongs to using the LDA Bag of Words model.\n'''\ndocument_num = 4310\n\n# Our test document is document number 4310\nfor index, score in sorted(lda_model[bow_corpus[document_num]], key=lambda tup: -1*tup[1]):\n    print(\"\\nScore: {}\\t \\nTopic: {}\".format(score, lda_model.print_topic(index, 10)))","d8ae5e96":"'''\nCheck which topic our test document belongs to using the LDA TF-IDF model.\n'''\n# Our test document is document number 4310\nfor index, score in sorted(lda_model_tfidf[bow_corpus[document_num]], key=lambda tup: -1*tup[1]):\n    print(\"\\nScore: {}\\t \\nTopic: {}\".format(score, lda_model_tfidf.print_topic(index, 10)))","5cc7eac0":"unseen_document = \"My favorite sports activities are running and swimming.\"\n\n# Data preprocessing step for the unseen document\nbow_vector = dictionary.doc2bow(preprocess(unseen_document))\n\nfor index, score in sorted(lda_model[bow_vector], key=lambda tup: -1*tup[1]):\n    print(\"Score: {}\\t Topic: {}\".format(score, lda_model.print_topic(index, 5)))","4481ba8c":"## Running LDA using Bag of Words ##\n\nWe are going for 10 topics in the document corpus.\n\n** We will be running LDA using all CPU cores to parallelize and speed up model training.**\n\nSome of the parameters we will be tweaking are:\n\n* **num_topics** is the number of requested latent topics to be extracted from the training corpus.\n* **id2word** is a mapping from word ids (integers) to words (strings). It is used to determine the vocabulary size, as well as for debugging and topic printing.\n* **workers** is the number of extra processes to use for parallelization. Uses all available cores by default.\n* **alpha** and **eta** are hyperparameters that affect sparsity of the document-topic (theta) and topic-word (lambda) distributions. We will let these be the default values for now(default value is `1\/num_topics`)\n    - Alpha is the per document topic distribution.\n        * High alpha: Every document has a mixture of all topics(documents appear similar to each other).\n        * Low alpha: Every document has a mixture of very few topics\n\n    - Eta is the per topic word distribution.\n        * High eta: Each topic has a mixture of most words(topics appear similar to each other).\n        * Low eta: Each topic has a mixture of few words.\n\n* ** passes ** is the number of training passes through the corpus. For  example, if the training corpus has 50,000 documents, chunksize is  10,000, passes is 2, then online training is done in 10 updates: \n    * `#1 documents 0-9,999 `\n    * `#2 documents 10,000-19,999 `\n    * `#3 documents 20,000-29,999 `\n    * `#4 documents 30,000-39,999 `\n    * `#5 documents 40,000-49,999 `\n    * `#6 documents 0-9,999 `\n    * `#7 documents 10,000-19,999 `\n    * `#8 documents 20,000-29,999 `\n    * `#9 documents 30,000-39,999 `\n    * `#10 documents 40,000-49,999` ","1e44fabf":"## Running LDA using TF-IDF ##","61cc2989":"# Latent Dirichlet Allocation #\n\nThis notebook is a part of my learning journey which I've been documenting from Udacity's Natural Language Processing Nanodegree program, which helped me a lot to learn and excel advanced data science stuff such as PySpark. Thank you so much Udacity for providing such quality content. \n\nLDA is used to classify text in a document to a particular topic. It builds a topic per document model and words per topic model, modeled as Dirichlet distributions. \n\n* Each document is modeled as a multinomial distribution of topics and each topic is modeled as a multinomial distribution of words.\n* LDA assumes that the every chunk of text we feed into it will contain words that are somehow related. Therefore choosing the right corpus of data is crucial. \n* It also assumes documents are produced from a mixture of topics. Those topics then generate words based on their probability distribution. ","59a5292f":"The model correctly classifies the unseen document with '42'% probability to the X category.","4bf837ee":"Let's glance at the dataset:","02baf96c":"## Testing model on unseen document ##","3edb80a2":"** Gensim filter_extremes **\n\u200b\n[`filter_extremes(no_below=5, no_above=0.5, keep_n=100000)`](https:\/\/radimrehurek.com\/gensim\/corpora\/dictionary.html#gensim.corpora.dictionary.Dictionary.filter_extremes)\n\u200b\nFilter out tokens that appear in\n\u200b\n* less than no_below documents (absolute number) or\n* more than no_above documents (fraction of total corpus size, not absolute number).\n* after (1) and (2), keep only the first keep_n most frequent tokens (or keep all if None).","f7f432fc":"## TF-IDF on our document set ##\n\nWhile performing TF-IDF on the corpus is not necessary for LDA implemention using the gensim model, it is recemmended. TF-IDF expects a bag-of-words (integer values) training corpus during initialization. During transformation, it will take a vector and return another vector of the same dimensionality.","4e7449fa":"** TF-IDF stands for \"Term Frequency, Inverse Document Frequency\".**\n\n* It is a way to score the importance of words (or \"terms\") in a document based on how frequently they appear across multiple documents.\n* If a word appears frequently in a document, it's important. Give the word a high score. But if a word appears in many documents, it's not a unique identifier. Give the word a low score.\n* Therefore, common words like \"the\" and \"for\", which appear in many documents, will be scaled down. Words that appear frequently in a single document will be scaled up.\n\nIn other words:\n\n* TF(w) = `(Number of times term w appears in a document) \/ (Total number of terms in the document)`.\n* IDF(w) = `log_e(Total number of documents \/ Number of documents with term w in it)`.\n\n** For example **\n\n* Consider a document containing `100` words wherein the word 'tiger' appears 3 times. \n* The term frequency (i.e., tf) for 'tiger' is then: \n    - `TF = (3 \/ 100) = 0.03`. \n\n* Now, assume we have `10 million` documents and the word 'tiger' appears in `1000` of these. Then, the inverse document frequency (i.e., idf) is calculated as:\n    - `IDF = log(10,000,000 \/ 1,000) = 4`. \n\n* Thus, the Tf-idf weight is the product of these quantities: \n    - `TF-IDF = 0.03 * 4 = 0.12`.","2e2e15cd":"## Load the dataset\n\nThe dataset we'll use is a list of over one million news headlines published over a period of 15 years. We'll start by loading it from the `abcnews-date-text.csv` file.","843f00ba":"** Gensim doc2bow **\n\n[`doc2bow(document)`](https:\/\/radimrehurek.com\/gensim\/corpora\/dictionary.html#gensim.corpora.dictionary.Dictionary.doc2bow)\n\n* Convert document (a list of words) into the bag-of-words format = list of (token_id, token_count) 2-tuples. Each word is assumed to be a tokenized and normalized string (either unicode or utf8-encoded). No further preprocessing is done on the words in document; apply tokenization, stemming etc. before calling this method.","701125b0":"Let's now preprocess all the news headlines we have. To do that, let's use the [map](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.map.html) function from pandas to apply `preprocess()` to the `headline_text` column\n","e510272a":"## Bag of words on the dataset\n\nNow let's create a dictionary from 'processed_docs' containing the number of times a word appears in the training set. To do that, let's pass `processed_docs` to [`gensim.corpora.Dictionary()`](https:\/\/radimrehurek.com\/gensim\/corpora\/dictionary.html) and call it '`dictionary`'.","034df27f":"### It has the highest probability (`0.61`) to be  part of the topic that we assigned as Topic X, which is the accurate classification. ###","fb457090":"## Data Preprocessing ##\n\nWe will perform the following steps:\n\n* **Tokenization**: Split the text into sentences and the sentences into words. Lowercase the words and remove punctuation.\n* Words that have fewer than 3 characters are removed.\n* All **stopwords** are removed.\n* Words are **lemmatized** - words in third person are changed to first person and verbs in past and future tenses are changed into present.\n* Words are **stemmed** - words are reduced to their root form.","994f1e5f":"## It has the highest probability (59%) to be part of the topic that we assigned as topic X.","77856539":"## Performance evaluation by classifying sample document using LDA TF-IDF model","b9d8980a":"## Performance evaluation by classifying sample document using LDA Bag of Words model##\n\nWe will check to see where our test document would be classified."}}