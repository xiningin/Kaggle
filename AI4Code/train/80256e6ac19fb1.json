{"cell_type":{"175088dd":"code","ac5b8b02":"code","8ae28171":"code","d566ea7e":"code","1e084056":"code","3a617b13":"code","35e2c116":"code","78f77682":"code","69939e13":"code","8fe4bee8":"code","1a3af37e":"code","ac152755":"code","34fe2605":"code","dd6be861":"markdown","43d8f839":"markdown","7e0cd8e0":"markdown","4d0b6b92":"markdown"},"source":{"175088dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# from ycimpute.imputer import EM\n\nimport pandas as pd\nimport gc\nimport time\nfrom contextlib import contextmanager\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import KFold, StratifiedKFold\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \nwarnings.filterwarnings(\"ignore\", category=FutureWarning) \nwarnings.filterwarnings(\"ignore\", category=UserWarning) \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ac5b8b02":"# get the number of missing data points per column\ndef missing_data(df):\n    total = df.isnull().sum()\n    percent = (df.isnull().sum()\/df.isnull().count()*100).sort_values(ascending = False)\n    types = df.dtypes\n    unieq = df.select_dtypes(include = [object,float,int]).apply(pd.Series.nunique, axis = 0)\n    df_mis = pd.concat([total, percent ,unieq,types], axis=1, keys=['Sum_Mis', 'Per_Mis','Unieq', 'Types'])\n    \n    return df_mis.head(len(df_mis))","8ae28171":"def iqr(df):\n    IQR = df.describe().T\n    IQR['lower'] = IQR['25%']-1.5*(IQR['75%']-IQR['25%'])\n    IQR['upper'] = IQR['75%']+1.5*(IQR['75%']-IQR['25%'])\n    upper_count = []\n    i = 0\n    for col in df:\n        upper_count.append(len(df[df[col] > IQR.iloc[i][-1]]))\n        i +=1\n    \n    lower_count = []\n    i = 0\n    for col in df:\n        lower_count.append(len(df[df[col] < IQR.iloc[i][-2]]))\n        i +=1\n    \n    IQR['lower_count'] = lower_count\n    IQR['upper_count'] = upper_count\n    IQR['out_percent'] = (IQR['upper_count'] + IQR['lower_count'])\/IQR['count']\n    return IQR","d566ea7e":"#Read the installments_payments.csv\nins = pd.read_csv('..\/input\/home-credit-default-risk\/installments_payments.csv')\nins['NEW_DAYS_PAID_EARLIER'] = ins['DAYS_INSTALMENT']-ins['DAYS_ENTRY_PAYMENT']\n\n# Her bir taksit \u00f6demesinin gec olup olmama durumu 1: gec \u00f6dedi 0: erken \u00f6demeyi temsil eder\nins['NEW_NUM_PAID_LATER'] = ins['NEW_DAYS_PAID_EARLIER'].map(lambda x: 1 if x<0 else 0)\n\n# Agrregation ve degisken tekillestirme\nagg_list = {'NUM_INSTALMENT_VERSION':['nunique'],\n               'NUM_INSTALMENT_NUMBER':'max',\n               'DAYS_INSTALMENT':['min','max'],\n               'DAYS_ENTRY_PAYMENT':['min','max'],\n               'AMT_INSTALMENT':['min','max','sum','mean'],\n               'AMT_PAYMENT':['min','max','sum','mean'],\n               'NEW_DAYS_PAID_EARLIER':'mean',\n               'NEW_NUM_PAID_LATER':'sum'}\n\n\nins_agg = ins.groupby('SK_ID_PREV').agg(agg_list)\n\n\n# Multi index problemi c\u00f6z\u00fcm\u00fc\nins_agg.columns = pd.Index([\"INS_\" + e[0] + '_' + e[1].upper() for e in ins_agg.columns.tolist()])\n\n# drop variables \nins_agg.drop(['INS_DAYS_INSTALMENT_MIN','INS_DAYS_INSTALMENT_MAX','INS_DAYS_ENTRY_PAYMENT_MIN','INS_DAYS_ENTRY_PAYMENT_MAX'],axis=1,inplace=True)\n\n# Kredi \u00f6deme y\u00fczdesi ve toplam kalan borc\nins_agg['INS_NEW_PAYMENT_PERC'] = ins_agg['INS_AMT_PAYMENT_SUM'] \/ ins_agg['INS_AMT_INSTALMENT_SUM']\nins_agg['INS_NEW_PAYMENT_DIFF'] = ins_agg['INS_AMT_INSTALMENT_SUM'] - ins_agg['INS_AMT_PAYMENT_SUM']\n    \nins_agg.reset_index(inplace = True)\n\n\n# NaN values fill with EM()\n# def mlearn(df):   \n#     df_num = df.select_dtypes(include=[\"float64\", \"int64\"])\n#     from ycimpute.imputer import EM\n#     df_new = EM().complete(np.array(df_num))\n#     df_new = pd.DataFrame(pos_new, columns=list(df_num))\n#     return df_new\n\n# ins_agg = mlearn(ins_agg)\n\n# missing_data(ins_agg)","1e084056":"pos = pd.read_csv('..\/input\/home-credit-default-risk\/POS_CASH_balance.csv')\n# Kategorik Degiskenimizi Dummy Degiskenine D\u00f6n\u00fcst\u00fcrme\npos = pd.get_dummies(pos, columns=['NAME_CONTRACT_STATUS'], dummy_na = True)\n# Aggregation Islemi - Tekillestirme\nagg_list = {\n    'MONTHS_BALANCE':['min','max'],\n    'CNT_INSTALMENT':['min','max'],\n    'CNT_INSTALMENT_FUTURE':['min','max'],\n    'SK_DPD':['max','mean'],\n    'SK_DPD_DEF':['max','mean'],\n    'NAME_CONTRACT_STATUS_Active':'sum',\n    'NAME_CONTRACT_STATUS_Amortized debt':'sum',\n    'NAME_CONTRACT_STATUS_Approved':'sum',\n    'NAME_CONTRACT_STATUS_Canceled':'sum',\n    'NAME_CONTRACT_STATUS_Completed':'sum',\n    'NAME_CONTRACT_STATUS_Demand':'sum',\n    'NAME_CONTRACT_STATUS_Returned to the store':'sum',\n    'NAME_CONTRACT_STATUS_Signed':'sum',\n    'NAME_CONTRACT_STATUS_XNA':'sum',\n    'NAME_CONTRACT_STATUS_nan':'sum'\n}\n\npos_agg = pos.groupby('SK_ID_PREV').agg(agg_list)\n\n# Multilayer index'i tek boyutlu index'e d\u00f6n\u00fcst\u00fcrme\npos_agg.columns= pd.Index([\"POS_\" + e[0] + '_' + e[1].upper() for e in pos_agg.columns.tolist()])\n\n# SK_DPD kac kredide 0 olma durumu (SK_DPD MAX alacagiz 0 durumunu veriyor) \n# SK_DPD_DEF (SK_DPD_DEF_MAX sifir olma durumunu veriyor)\n# CNT_INSTALMENT_FUTURE_MIN==0 oldugunda NAME_CONTRACT_STATUS_Completed_SUM==0 olma durumu \n\npos_agg['POS_NEW_IS_CREDIT_NOT_COMPLETED_ON_TIME']= (pos_agg['POS_CNT_INSTALMENT_FUTURE_MIN']==0) & (pos_agg['POS_NAME_CONTRACT_STATUS_Completed_SUM']==0)\n\n\n# 1:kredi zamaninda kapanmamis 0:kredi zamaninda kapanmis\n\npos_agg['POS_NEW_IS_CREDIT_NOT_COMPLETED_ON_TIME']=pos_agg['POS_NEW_IS_CREDIT_NOT_COMPLETED_ON_TIME'].astype(int)\n\npos_agg.drop(['POS_NAME_CONTRACT_STATUS_Approved_SUM',\n   'POS_NAME_CONTRACT_STATUS_Amortized debt_SUM',\n   'POS_NAME_CONTRACT_STATUS_Canceled_SUM',\n   'POS_NAME_CONTRACT_STATUS_Returned to the store_SUM',\n   'POS_NAME_CONTRACT_STATUS_Signed_SUM',\n   'POS_NAME_CONTRACT_STATUS_XNA_SUM',\n   'POS_NAME_CONTRACT_STATUS_nan_SUM'],axis=1,inplace=True)\n\npos_agg.reset_index(inplace = True)\n\n\n# # NaN values fill with EM()\n# def mlearn(df):   \n#     df_num = df.select_dtypes(include=[\"float64\", \"int64\"])\n#     from ycimpute.imputer import EM\n#     df_new = EM().complete(np.array(df_num))\n#     df_new = pd.DataFrame(pos_new, columns=list(df_num))\n#     return df_new\n\n# pos_agg = mlearn(pos_agg)\n\n# missing_data(pos_agg)","3a617b13":"\nCCB = pd.read_csv('..\/input\/home-credit-default-risk\/credit_card_balance.csv')\n\nCCB = pd.get_dummies(CCB, columns= ['NAME_CONTRACT_STATUS'] )  # artik tumu sayisal \n\ndropthis = ['NAME_CONTRACT_STATUS_Approved', 'NAME_CONTRACT_STATUS_Demand',\n    'NAME_CONTRACT_STATUS_Refused', 'NAME_CONTRACT_STATUS_Sent proposal','NAME_CONTRACT_STATUS_Signed' ]\n\nCCB['NAME_CONTRACT_STATUS_Active']=CCB['NAME_CONTRACT_STATUS_Active'].astype(int)\nCCB['NAME_CONTRACT_STATUS_Completed']=CCB['NAME_CONTRACT_STATUS_Completed'].astype(int)\n\nCCB = CCB.drop(dropthis, axis=1)\n\nagg_list = {\n'SK_ID_CURR' :['mean'],\n'MONTHS_BALANCE':[\"sum\",\"mean\"], \n'AMT_BALANCE':[\"sum\",\"mean\",\"min\",\"max\"],\n'AMT_CREDIT_LIMIT_ACTUAL':[\"sum\",\"mean\"],\n'AMT_DRAWINGS_ATM_CURRENT':[\"sum\",\"mean\",\"min\",\"max\"],\n'AMT_DRAWINGS_CURRENT':[\"sum\",\"mean\",\"min\",\"max\"], \n'AMT_DRAWINGS_OTHER_CURRENT':[\"sum\",\"mean\",\"min\",\"max\"],\n'AMT_DRAWINGS_POS_CURRENT':[\"sum\",\"mean\",\"min\",\"max\"], \n'AMT_INST_MIN_REGULARITY':[\"sum\",\"mean\",\"min\",\"max\"],\n'AMT_PAYMENT_CURRENT':[\"sum\",\"mean\",\"min\",\"max\"], \n'AMT_PAYMENT_TOTAL_CURRENT':[\"sum\",\"mean\",\"min\",\"max\"],\n'AMT_RECEIVABLE_PRINCIPAL':[\"sum\",\"mean\",\"min\",\"max\"], \n'AMT_RECIVABLE':[\"sum\",\"mean\",\"min\",\"max\"], \n'AMT_TOTAL_RECEIVABLE':[\"sum\",\"mean\",\"min\",\"max\"],\n'CNT_DRAWINGS_ATM_CURRENT':[\"sum\",\"mean\"], \n'CNT_DRAWINGS_CURRENT':[\"sum\",\"mean\",\"max\"],\n'CNT_DRAWINGS_OTHER_CURRENT':[\"mean\",\"max\"], \n'CNT_DRAWINGS_POS_CURRENT':[\"sum\",\"mean\",\"max\"],\n'CNT_INSTALMENT_MATURE_CUM':[\"sum\",\"mean\",\"max\",\"min\"],\n'SK_DPD':[\"sum\",\"mean\",\"max\"], \n'SK_DPD_DEF':[\"sum\",\"mean\",\"max\"],\n'NAME_CONTRACT_STATUS_Active':[\"sum\",\"mean\",\"min\",\"max\"],\n'NAME_CONTRACT_STATUS_Completed':[\"sum\",\"mean\",\"min\",\"max\"], \n}\n\n\nCCB_agg = CCB.groupby('SK_ID_PREV').agg(agg_list)\n\n\nCCB_agg.columns = pd.Index(['CCB_' + e[0] + \"_\" + e[1].upper() for e in CCB_agg.columns.tolist()])\n\nCCB_agg.reset_index(inplace = True)\n\n\n# NaN values fill with EM()\n\n# missing_data(CCB_agg)","35e2c116":"pre_app = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/previous_application.csv')\n\n#% 99 olan iki stunu (RATE_INTEREST_PRIMARY','RATE_INTEREST_PRIVILEGED) drop ediyoruz\npre_app.drop(pre_app[['RATE_INTEREST_PRIMARY','RATE_INTEREST_PRIVILEGED']],axis=1,inplace=True) \n\n\n#pre_app missin data nan to 0\ndf1 = pre_app[(pre_app.AMT_ANNUITY.isna() == True) & (pre_app.AMT_APPLICATION == 0 )].fillna(0)\ndf2 = pre_app[(pre_app.AMT_ANNUITY.isna() == True) & (pre_app.AMT_APPLICATION != 0 )]\ndf3 = pre_app[(pre_app.AMT_ANNUITY.isna() == False) & (pre_app.AMT_APPLICATION == 0 )]\ndf4 = pre_app[(pre_app.AMT_ANNUITY.isna() == False) & (pre_app.AMT_APPLICATION != 0 )]\npre_app = pd.concat([df1, df2, df3, df4])\n\n\npre_app['NAME_TYPE_SUITE'].replace(0 , 'Unaccompre_appnied', inplace = True)\npre_app['NAME_TYPE_SUITE'].replace(np.nan , 'Unaccompre_appnied', inplace = True)\npre_app['NAME_TYPE_SUITE'].value_counts()\n\n# yanlis degeri nan ile doldurma\npre_app['DAYS_FIRST_DRAWING'].replace(365243, np.nan, inplace= True)\npre_app['DAYS_FIRST_DUE'].replace(365243, np.nan, inplace= True)\npre_app['DAYS_LAST_DUE_1ST_VERSION'].replace(365243, np.nan, inplace= True)\npre_app['DAYS_LAST_DUE'].replace(365243, np.nan, inplace= True)\npre_app['DAYS_TERMINATION'].replace(365243, np.nan, inplace= True)\n\n# hafta gunleri ve calisma saatleri degistirildi\npre_app[\"WEEKDAY_APPR_PROCESS_START\"] = pre_app[\"WEEKDAY_APPR_PROCESS_START\"].replace(['MONDAY','TUESDAY', 'WEDNESDAY','THURSDAY','FRIDAY'], 'WEEK_DAY')\npre_app[\"WEEKDAY_APPR_PROCESS_START\"] = pre_app[\"WEEKDAY_APPR_PROCESS_START\"].replace(['SATURDAY', 'SUNDAY'], 'WEEKEND')\npre_app[\"HOUR_APPR_PROCESS_START\"] = pre_app[\"HOUR_APPR_PROCESS_START\"].replace([8,9,10,11,12,13,14,15,16,17], 'working_hours')\npre_app[\"HOUR_APPR_PROCESS_START\"] = pre_app[\"HOUR_APPR_PROCESS_START\"].replace([18,19,20,21,22,23,0,1,2,3,4,5,6,7], 'off_hours')\n\n\n# DAYS_DECISION de\u011feri 1 y\u0131ldan k\u00fc\u00e7\u00fck olanlara 1, b\u00fcy\u00fck olanlara 0 de\u011feri verildi.\npre_app[\"DAYS_DECISION\"] = [1 if abs(i\/(12*30)) <=1 else 0 for i in pre_app.DAYS_DECISION]\n\n\n# \"NAME_TYPE_SUITE\"  de\u011fi\u015fkeninin alone ve not_alone olarak iki kategoriye ayr\u0131lmas\u0131\npre_app[\"NAME_TYPE_SUITE\"] = pre_app[\"NAME_TYPE_SUITE\"].replace('Unaccompanied', 'alone')\npre_app[\"NAME_TYPE_SUITE\"] = pre_app[\"NAME_TYPE_SUITE\"].replace('Unaccompre_appnied', 'alone')\nb = ['Family', 'Spouse, partner', 'Children', 'Other_B', 'Other_A', 'Group of people']\npre_app[\"NAME_TYPE_SUITE\"] = pre_app[\"NAME_TYPE_SUITE\"].replace(b, 'not_alone')\n\n# \"NAME_GOODS_CATEGORY\"  de\u011fi\u015fkenindeki bu de\u011ferler others olarak kategorize edilecek\na = [\n    'Auto Accessories', 'Jewelry', 'Homewares', 'Medical Supplies', 'Vehicles', 'Sport and Leisure', \n    'Gardening', 'Other', 'Office Appliances', 'Tourism', 'Medicine', 'Direct Sales', 'Fitness',\n    'Additional Service','Education', 'Weapon', 'Insurance', 'House Construction', 'Animals'\n]\npre_app[\"NAME_GOODS_CATEGORY\"] = pre_app[\"NAME_GOODS_CATEGORY\"].replace(a, 'others')\n\n# \"NAME_SELLER_INDUSTRY\"  de\u011fi\u015fkenindeki bu de\u011ferler others olarak kategorize edilecek\na = ['Auto technology', 'Jewelry', 'MLM partners', 'Tourism'] \npre_app[\"NAME_SELLER_INDUSTRY\"] = pre_app[\"NAME_SELLER_INDUSTRY\"].replace(a, 'other')\n\n# \u0130stenilen krecinin verilen krediye oran\u0131 i\u00e7eren de\u011fi\u015fkeni t\u00fcretir\npre_app[\"NEW_LOAN_RATE\"] = pre_app.AMT_APPLICATION\/pre_app.AMT_CREDIT\n\n# \u00d6deme g\u00fcn\u00fcn\u00fc geciktirmi\u015f mi bunu g\u00f6steren churn_prev de\u011fi\u015fkeni t\u00fcretilir.\n# 1= geciktirmi\u015f, 0 = geciktirmemi\u015f, NaN = bo\u015f de\u011fer\nk = pre_app.DAYS_LAST_DUE_1ST_VERSION - pre_app.DAYS_LAST_DUE\npre_app[\"DAYS_DUE\"] = [1 if i >= 0 else (0 if i < 0  else \"NaN\") for i in k]\n\ndrop_list = ['AMT_DOWN_PAYMENT', 'SELLERPLACE_AREA', 'CNT_PAYMENT', 'PRODUCT_COMBINATION',\n             'DAYS_FIRST_DRAWING','DAYS_FIRST_DUE','DAYS_LAST_DUE_1ST_VERSION', 'DAYS_LAST_DUE',\n             'DAYS_TERMINATION','NFLAG_INSURED_ON_APPROVAL']\npre_app.drop(drop_list, axis = 1, inplace = True)\n\n\ncategory_columns = pre_app.select_dtypes(include = [object]).columns\n\npre_app = pd.get_dummies(pre_app, columns = category_columns )\n\nagg_list =     {\"SK_ID_CURR\":['mean'], \n                \"AMT_ANNUITY\":[\"max\"],\n                \"AMT_APPLICATION\":[\"min\",\"mean\",\"max\"],\n                \"AMT_CREDIT\":[\"max\"], \n                \"AMT_GOODS_PRICE\":[\"sum\", \"mean\"],\n                \"NFLAG_LAST_APPL_IN_DAY\":[\"sum\",\"mean\"], \n                \"RATE_DOWN_PAYMENT\":[\"sum\", \"mean\"],\n                \"DAYS_DECISION\":[\"sum\"],\n                'DAYS_DUE_0' : [\"sum\", \"mean\"],\n                'DAYS_DUE_1' : [\"sum\", \"mean\"],\n                'DAYS_DUE_NaN' : [\"sum\", \"mean\"],\n                \"NEW_LOAN_RATE\":[\"sum\", \"mean\", \"min\", \"max\"],\n                \"NAME_CONTRACT_TYPE_Cash loans\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_TYPE_Consumer loans\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_TYPE_Revolving loans\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_TYPE_XNA\":[\"sum\", \"mean\"],\n                \"WEEKDAY_APPR_PROCESS_START_WEEKEND\":[\"sum\", \"mean\"],\n                \"WEEKDAY_APPR_PROCESS_START_WEEK_DAY\":[\"sum\", \"mean\"],\n                \"HOUR_APPR_PROCESS_START_off_hours\":[\"sum\", \"mean\"],\n                \"HOUR_APPR_PROCESS_START_working_hours\":[\"sum\", \"mean\"],\n                \"FLAG_LAST_APPL_PER_CONTRACT_N\":[\"sum\", \"mean\"],\n                \"FLAG_LAST_APPL_PER_CONTRACT_Y\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Building a house or an annex\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Business development\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Buying a garage\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Buying a holiday home \/ land\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Buying a home\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Buying a new car\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Buying a used car\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Car repairs\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Education\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Everyday expenses\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Furniture\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Gasification \/ water supply\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Hobby\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Journey\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Medicine\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Money for a third person\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Other\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Payments on other loans\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Purchase of electronic equipment\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Refusal to name the goal\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Repairs\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Urgent needs\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Wedding \/ gift \/ holiday\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_XAP\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_XNA\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_STATUS_Approved\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_STATUS_Canceled\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_STATUS_Refused\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_STATUS_Unused offer\":[\"sum\", \"mean\"],\n                \"NAME_PAYMENT_TYPE_Cash through the bank\":[\"sum\", \"mean\"],\n                \"NAME_PAYMENT_TYPE_Cashless from the account of the employer\":[\"sum\", \"mean\"],\n                \"NAME_PAYMENT_TYPE_Non-cash from your account\":[\"sum\", \"mean\"],\n                \"NAME_PAYMENT_TYPE_XNA\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_CLIENT\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_HC\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_LIMIT\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_SCO\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_SCOFR\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_SYSTEM\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_VERIF\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_XAP\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_XNA\":[\"sum\", \"mean\"],\n                \"NAME_TYPE_SUITE_alone\":[\"sum\", \"mean\"],\n                \"NAME_TYPE_SUITE_not_alone\":[\"sum\", \"mean\"],\n                \"NAME_CLIENT_TYPE_New\":[\"sum\", \"mean\"],\n                \"NAME_CLIENT_TYPE_Refreshed\":[\"sum\", \"mean\"],\n                \"NAME_CLIENT_TYPE_Repeater\":[\"sum\", \"mean\"],\n                \"NAME_CLIENT_TYPE_XNA\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Audio\/Video\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Clothing and Accessories\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Computers\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Construction Materials\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Consumer Electronics\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Furniture\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Mobile\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Photo \/ Cinema Equipment\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_XNA\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_others\":[\"sum\", \"mean\"],\n                \"NAME_PORTFOLIO_Cards\":[\"sum\", \"mean\"],\n                \"NAME_PORTFOLIO_Cars\":[\"sum\", \"mean\"],\n                \"NAME_PORTFOLIO_Cash\":[\"sum\", \"mean\"],\n                \"NAME_PORTFOLIO_POS\":[\"sum\", \"mean\"],\n                \"NAME_PORTFOLIO_XNA\":[\"sum\", \"mean\"],\n                \"NAME_PRODUCT_TYPE_XNA\":[\"sum\", \"mean\"],\n                \"NAME_PRODUCT_TYPE_walk-in\":[\"sum\", \"mean\"],\n                \"NAME_PRODUCT_TYPE_x-sell\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_AP+ (Cash loan)\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Car dealer\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Channel of corporate sales\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Contact center\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Country-wide\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Credit and cash offices\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Regional \/ Local\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Stone\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Clothing\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Connectivity\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Construction\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Consumer electronics\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Furniture\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Industry\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_XNA\":[\"sum\", \"mean\"],\n                'NAME_SELLER_INDUSTRY_other':[\"sum\", \"mean\"],\n                \"NAME_YIELD_GROUP_XNA\":[\"sum\", \"mean\"],\n                \"NAME_YIELD_GROUP_high\":[\"sum\", \"mean\"],\n                \"NAME_YIELD_GROUP_low_action\":[\"sum\", \"mean\"],\n                \"NAME_YIELD_GROUP_low_normal\":[\"sum\", \"mean\"],\n                \"NAME_YIELD_GROUP_middle\":[\"sum\", \"mean\"],}\n\npre_agg = pre_app.groupby('SK_ID_PREV').agg(agg_list)\n\npre_agg.columns = pd.Index([\"PREV_\" + e[0] + '_' + e[1].upper() for e in pre_agg.columns.tolist()])\n\npre_agg.reset_index(inplace = True)\n","78f77682":"display(missing_data(ins_agg))\n\ndisplay(missing_data(pos_agg))\n\ndisplay(missing_data(CCB_agg))\n\ndisplay(missing_data(pre_agg))\n","69939e13":"display(iqr(ins_agg).round(2))","8fe4bee8":"display(iqr(ins_agg).round(2))\ndisplay(iqr(pos_agg).round(2))\ndisplay(iqr(CCB_agg).round(2))\ndisplay(iqr(pre_agg).round(2))","1a3af37e":"df_ins_pos = ins_agg.merge(pos_agg, how = 'left', on = 'SK_ID_PREV')\ndf_ins_pos","ac152755":"df_ins_pos_ccb = df_ins_pos.merge(CCB_agg ,how = 'left', on = 'SK_ID_PREV')\ndf_ins_pos_ccb","34fe2605":"df_all = pre_agg.merge(df_ins_pos_ccb, how = 'left', on = 'SK_ID_PREV' )\ndf_all","dd6be861":"# installments_payments","43d8f839":"# pos_cash_balance","7e0cd8e0":"# previous_application","4d0b6b92":"# credit_card_balance"}}