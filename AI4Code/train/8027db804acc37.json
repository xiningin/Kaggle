{"cell_type":{"e3b781ac":"code","86062bf4":"code","948e1aed":"code","50da3071":"code","677f3c5a":"code","2e0aa008":"code","c327e8e4":"code","9a87e0be":"code","2a996e92":"code","3504f178":"code","14927de2":"markdown","54c7a1b1":"markdown","6fc80a17":"markdown","d2f0f0c0":"markdown","48648940":"markdown","f5471a07":"markdown","300ea5cd":"markdown","ad912c13":"markdown","10341647":"markdown"},"source":{"e3b781ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86062bf4":"# Read in dataset\nimport pandas as pd\napps_with_duplicates = pd.read_csv('\/kaggle\/input\/google-android-apps\/apps.csv')\nprint(apps_with_duplicates.shape)\n\n# Drop duplicates\napps = apps_with_duplicates.drop_duplicates()\nprint(apps.shape)\n#output shows there were no duplicate columns\n# Print the total number of apps\nprint('Total number of apps in the dataset = ', len(apps))\n\n# Print a concise summary of apps dataframe\nprint(apps.info())\n\n# Have a look at a random sample of n rows\nn = 5\napps.sample(n)","948e1aed":"# List of characters to remove\nchars_to_remove = ['+',',','$']\n# List of column names to clean\ncols_to_clean = ['Installs','Price']\n\n# Loop for each column\nfor col in cols_to_clean:\n    # Replace each character with an empty string\n    for char in chars_to_remove:\n        #.astype() is for type conversion, here apps col is being converted to sting type\n        #.str.replace(char, '') it works on a sting(.str signifies this) which contains char and replaces the char by'' \n        apps[col] = apps[col].astype(str).str.replace(char, '')\n    # Convert col to numeric .to_numeric(apps[col]) converts apps[col back to numeric type]\n    apps[col] = pd.to_numeric(apps[col])\napps.info()  \n#from output , it can be seen that price and installs are numeric type now ","50da3071":"import plotly\n#this next line makes sure that plots are shown in jupyter notebook when internet is disconnected...offline.\nplotly.offline.init_notebook_mode(connected=True)\n#graph_objs :This package imports definitions for all of Plotly's graph objects\nimport plotly.graph_objs as go\n\n# Print the total number of unique categories, unique fn return total no. of unique category in apps.\nprint(apps['Category'].unique())\nnum_categories = len(apps['Category'].unique())\nprint('Number of categories = ', num_categories)\n\n# Count the number of apps in each 'Category' and sort them in descending order\nnum_apps_in_category = apps['Category'].value_counts().sort_values(ascending = False)\nprint(num_apps_in_category)\n# print(type(num_apps_in_category))\n# output :it is pandas.core.series.series\ndata = [go.Bar(\n        x = num_apps_in_category.index, # index = category name\n        y = num_apps_in_category.values, # value = count\n)]\nylabel= 'numper of apps '\n# similar to plt.show of matplotlib\nplotly.offline.iplot(data)\n","677f3c5a":"# Average rating of apps\navg_app_rating = apps['Rating'].mean()\nprint('Average app rating = ', avg_app_rating)\n\n# Distribution of apps according to their ratings\ndata = [go.Histogram(\n        x = apps['Rating']\n)]\n\n# Vertical dashed line to indicate the average app rating\nlayout = {'shapes':[ {\n              'type' :'line',\n              'x0': avg_app_rating,\n              'y0': 0,\n              'x1': avg_app_rating,\n              'y1': 1000,\n    # \"dash\" in next line is a keyword argumnet whose value is dashdot\n              'line': { 'dash': 'dashdot'}\n          }]\n          }\n\nplotly.offline.iplot({'data': data, 'layout': layout})","2e0aa008":"%matplotlib inline\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nimport warnings #used to remove warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Filter rows where both Rating and Size values are not null, ~ is used for 'not'\napps_with_size_and_rating_present = apps[(~apps['Rating'].isnull()) & (~apps['Size'].isnull())]\nprint(apps_with_size_and_rating_present.head(6))\n\n# Subset for categories with at least 250 apps\nlarge_categories = apps_with_size_and_rating_present.groupby('Category').filter(lambda x: len(x) >= 250).reset_index()\n\n# Plot size vs. rating\nplt1 = sns.jointplot(x = large_categories['Size'], y = large_categories['Rating'], kind = 'hex')\n#here keyword argument kind = hex makes hexagons in scatter plot\n\n# Subset apps whose 'Type' is 'Paid'\npaid_apps = apps_with_size_and_rating_present[apps_with_size_and_rating_present['Type'] == 'Paid']\n\n# Plot price vs. rating\nplt2 = sns.jointplot(x = paid_apps['Price'], y = paid_apps['Rating'])","c327e8e4":"import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nfig.set_size_inches(15, 8)\n\n# Select a few popular app categories\npopular_app_cats = apps[apps.Category.isin(['GAME', 'FAMILY', 'PHOTOGRAPHY',\n                                            'MEDICAL', 'TOOLS', 'FINANCE',\n                                            'LIFESTYLE','BUSINESS'])]\nprint(popular_app_cats.head(10))\n\n# Examine the price trend by plotting Price vs Category\nax = sns.stripplot(x = popular_app_cats['Price'], y = popular_app_cats['Category'], jitter=True, linewidth=1)\nax.set_title('App pricing trend across categories')\n\n# Apps whose Price is greater than 200\napps_above_200 = popular_app_cats[['Category', 'App', 'Price']][popular_app_cats['Price'] > 200]\napps_above_200","9a87e0be":"# Select apps priced below $100\napps_under_100 = popular_app_cats[popular_app_cats['Price']<100]\n\nfig, ax = plt.subplots()\nfig.set_size_inches(15, 8)\n\n# Examine price vs category with the authentic apps (apps_under_100)\nax = sns.stripplot(x= 'Price', y='Category', data=apps_under_100,\n                   jitter=True, linewidth=1)\nax.set_title('App pricing trend across categories after filtering for junk apps')","2a996e92":"trace0 = go.Box(\n    # Data for paid apps\n    y=apps[apps['Type'] == 'Paid']['Installs'],\n    name = 'Paid'\n)\n\ntrace1 = go.Box(\n    # Data for free apps\n    y=apps[apps['Type'] == 'Free']['Installs'],\n    name = 'Free'\n)\n\nlayout = go.Layout(\n    title = \"Number of downloads of paid apps vs. free apps\",\n    yaxis = dict(\n        type = 'log',\n        \n    )\n)\n\n# Add trace0 and trace1 to a list for plotting in a single plot\ndata = [trace0, trace1]\nplotly.offline.iplot({'data': data, 'layout': layout})","3504f178":"# Load user_reviews.csv\nreviews_df = pd.read_csv('\/kaggle\/input\/google-android-app-reviews\/googleplaystore_user_reviews.csv')\n\n# Join and merge the two dataframe,how= inner ,inner join is a type of join.\nmerged_df = pd.merge(apps, reviews_df, on = 'App', how = \"inner\")\n\n\n# Drop NA values from Sentiment and Translated_Review columns\nmerged_df = merged_df.dropna(subset=['Sentiment', 'Translated_Review'])\n\n#this statement is of no use :sns.set_style('ticks')\nfig, ax = plt.subplots()\nfig.set_size_inches(11, 8)\n\n# User review sentiment polarity for paid vs. free apps\nax = sns.boxplot(x = merged_df.Type, y = merged_df.Sentiment_Polarity, data = merged_df)\nax.set_title('Sentiment Polarity Distribution')\nmerged_df","14927de2":"## 4. Distribution of app ratings\n<p>After having witnessed the market share for each category of apps, let's see how all these apps perform on an average. App ratings (on a scale of 1 to 5) impact the discoverability, conversion of apps as well as the company's overall brand image. Ratings are a key performance indicator of an app.<\/p>\n<p>From our research, we found that the average volume of ratings across all app categories is <code>4.17<\/code>. The histogram plot is skewed to the left indicating that the majority of the apps are highly rated with only a few exceptions in the low-rated apps.<\/p>","54c7a1b1":"## 8. Popularity of paid apps vs free apps\n<p>For apps in the Play Store today, there are five types of pricing strategies: free, freemium, paid, paymium, and subscription. Let's focus on free and paid apps only. Some characteristics of free apps are:<\/p>\n<ul>\n<li>Free to download.<\/li>\n<li>Main source of income often comes from advertisements.<\/li>\n<li>Often created by companies that have other products and the app serves as an extension of those products.<\/li>\n<li>Can serve as a tool for customer retention, communication, and customer service.<\/li>\n<\/ul>\n<p>Some characteristics of paid apps are:<\/p>\n<ul>\n<li>Users are asked to pay once for the app to download and use it.<\/li>\n<li>The user can't really get a feel for the app before buying it.<\/li>\n<\/ul>\n<p>Are paid apps installed as much as free apps? It turns out that paid apps have a relatively lower number of installs than free apps, though the difference is not as stark as I would have expected!<\/p>","6fc80a17":"## 3. Exploring app categories\n<p>With more than 1 billion active users in 190 countries around the world, Google Play continues to be an important distribution platform to build a global audience. For businesses to get their apps in front of users, it's important to make them more quickly and easily discoverable on Google Play. To improve the overall search experience, Google has introduced the concept of grouping apps into categories.<\/p>\n<p>This brings us to the following questions:<\/p>\n<ul>\n<li>Which category has the highest share of (active) apps in the market? <\/li>\n<li>Is any specific category dominating the market?<\/li>\n<li>Which categories have the fewest number of apps?<\/li>\n<\/ul>\n<p>We will see that there are <code>33<\/code> unique app categories present in our dataset. <em>Family<\/em> and <em>Game<\/em> apps have the highest market prevalence. Interestingly, <em>Tools<\/em>, <em>Business<\/em> and <em>Medical<\/em> apps are also at the top.<\/p>","d2f0f0c0":"## 6. Relation between app category and app price\n<p>So now comes the hard part. How are companies and developers supposed to make ends meet? What monetization strategies can companies use to maximize profit? The costs of apps are largely based on features, complexity, and platform.<\/p>\n<p>There are many factors to consider when selecting the right pricing strategy for your mobile app. It is important to consider the willingness of your customer to pay for your app. A wrong price could break the deal before the download even happens. Potential customers could be turned off by what they perceive to be a shocking cost, or they might delete an app they\u2019ve downloaded after receiving too many ads or simply not getting their money's worth.<\/p>\n<p>Different categories demand different price ranges. Some apps that are simple and used daily, like the calculator app, should probably be kept free. However, it would make sense to charge for a highly-specialized medical app that diagnoses diabetic patients. Below, we see that <em>Medical and Family<\/em> apps are the most expensive. Some medical apps extend even up to \\$80! All game apps are reasonably priced below \\$20.<\/p>","48648940":"## 5. Size and price of an app\n<p>Let's now examine app size and app price. For size, if the mobile app is too large, it may be difficult and\/or expensive for users to download. Lengthy download times could turn users off before they even experience your mobile app. Plus, each user's device has a finite amount of disk space. For price, some users expect their apps to be free or inexpensive. These problems compound if the developing world is part of your target market; especially due to internet speeds, earning power and exchange rates.<\/p>\n<p>How can we effectively come up with strategies to size and price our app?<\/p>\n<ul>\n<li>Does the size of an app affect its rating? <\/li>\n<li>Do users really care about system-heavy apps or do they prefer light-weighted apps? <\/li>\n<li>Does the price of an app affect its rating? <\/li>\n<li>Do users always prefer free apps over paid apps?<\/li>\n<\/ul>\n<p>We find that the majority of top rated apps (rating over 4) range from 2 MB to 20 MB. We also find that the vast majority of apps price themselves under \\$10.<\/p>","f5471a07":"## 7. Filter out \"junk\" apps\n<p>It looks like a bunch of the really expensive apps are \"junk\" apps. That is, apps that don't really have a purpose. Some app developer may create an app called <em>I Am Rich Premium<\/em> or <em>most expensive app (H)<\/em> just for a joke or to test their app development skills. Some developers even do this with malicious intent and try to make money by hoping people accidentally click purchase on their app in the store.<\/p>\n<p>Let's filter out these junk apps and re-do our visualization.<\/p>","300ea5cd":"## 9. Sentiment analysis of user reviews\n<p>Mining user review data to determine how people feel about your product, brand, or service can be done using a technique called sentiment analysis. User reviews for apps can be analyzed to identify if the mood is positive, negative or neutral about that app. For example, positive words in an app review might include words such as 'amazing', 'friendly', 'good', 'great', and 'love'. Negative words might be words like 'malware', 'hate', 'problem', 'refund', and 'incompetent'.<\/p>\n<p>By plotting sentiment polarity scores of user reviews for paid and free apps, we observe that free apps receive a lot of harsh comments, as indicated by the outliers on the negative y-axis. Reviews for paid apps appear never to be extremely negative. This may indicate something about app quality, i.e., paid apps being of higher quality than free apps on average. The median polarity score for paid apps is a little higher than free apps, thereby syncing with our previous observation.<\/p>\n<p>In this notebook, we analyzed over ten thousand apps from the Google Play Store. We can use our findings to inform our decisions should we ever wish to create an app ourselves.<\/p>","ad912c13":"## 2. Data cleaning\n<p>The four features that we will be working with most frequently henceforth are <code>Installs<\/code>, <code>Size<\/code>, <code>Rating<\/code> and <code>Price<\/code>. The <code>info()<\/code> function (from the previous task)  told us that <code>Installs<\/code> and <code>Price<\/code> columns are of type <code>object<\/code> and not <code>int64<\/code> or <code>float64<\/code> as we would expect. This is because the column contains some characters more than just [0,9] digits. Ideally, we would want these columns to be numeric as their name suggests. <br>\nHence, we now proceed to data cleaning and prepare our data to be consumed in our analyis later. Specifically, the presence of special characters (<code>, $ +<\/code>) in the <code>Installs<\/code> and <code>Price<\/code> columns make their conversion to a numerical data type difficult.<\/p>","10341647":"## 1. Google Play Store apps and reviews\n<p>Mobile apps are everywhere. They are easy to create and can be lucrative. Because of these two factors, more and more apps are being developed. In this notebook, we will do a comprehensive analysis of the Android app market by comparing over ten thousand apps in Google Play across different categories. We'll look for insights in the data to devise strategies to drive growth and retention.<\/p>\n<p><img src=\"https:\/\/assets.datacamp.com\/production\/project_619\/img\/google_play_store.png\" alt=\"Google Play logo\"><\/p>\n<p>Let's take a look at the data, which consists of two files:<\/p>\n<ul>\n<li><code>apps.csv<\/code>: contains all the details of the applications on Google Play. There are 13 features that describe a given app.<\/li>\n<li><code>user_reviews.csv<\/code>: contains 100 reviews for each app, <a href=\"https:\/\/www.androidpolice.com\/2019\/01\/21\/google-play-stores-redesigned-ratings-and-reviews-section-lets-you-easily-filter-by-star-rating\/\">most helpful first<\/a>. The text in each review has been pre-processed and attributed with three new features: Sentiment (Positive, Negative or Neutral), Sentiment Polarity and Sentiment Subjectivity.<\/li>\n<\/ul>"}}