{"cell_type":{"3b1f5cfd":"code","fe62c73a":"code","fc1ed1c2":"code","5bc539cc":"code","a2c05b4b":"code","a7f64e68":"code","b26f0fd6":"code","0fef1f4f":"code","4bb2f77d":"code","d9c04818":"code","725ee8ed":"code","422e6627":"code","41125997":"code","494a8b5d":"code","a11669ab":"code","98447f9c":"code","b30ea438":"code","48df3986":"code","5023c6d1":"code","4b6e8eb5":"code","bc6df356":"code","e8fc360e":"code","a3fcbb46":"code","8d527dd7":"code","174db1b3":"code","d3282238":"code","38f715f2":"code","e5a560b5":"code","9cfc7ece":"markdown","c2336f5a":"markdown","5be8235f":"markdown"},"source":{"3b1f5cfd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as plt\nfrom scipy.stats import skew\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n%config InlineBackend.figure_format = 'retina' #set 'png' here when working on notebook\n%matplotlib inline","fe62c73a":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","fc1ed1c2":"train.head()\n","5bc539cc":"all_data = pd.concat((train.loc[:,'MSSubClass':'SaleCondition'],\n                      test.loc[:,'MSSubClass':'SaleCondition']))","a2c05b4b":"plt.rcParams['figure.figsize'] = (12.0, 6.0)\nprices = pd.DataFrame({\"price\":train[\"SalePrice\"], \"log(price + 1)\":np.log1p(train[\"SalePrice\"])})\nprices.hist()","a7f64e68":"train[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#log transform skewed numeric features:\nnumeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\nskewed_feats = train[numeric_feats].apply(lambda x: skew(x.dropna())) #compute skewness\nskewed_feats = skewed_feats[skewed_feats > 0.75]\nskewed_feats = skewed_feats.index\n\nall_data[skewed_feats] = np.log1p(all_data[skewed_feats])","b26f0fd6":"all_data = pd.get_dummies(all_data)\n","0fef1f4f":"all_data = all_data.fillna(all_data.mean())\n","4bb2f77d":"X_train = all_data[:train.shape[0]]\nX_test = all_data[train.shape[0]:]\ny = train.SalePrice","d9c04818":"from sklearn.linear_model import Ridge, RidgeCV, ElasticNet, LassoCV, LassoLarsCV\nfrom sklearn.model_selection import cross_val_score\n\ndef rmse_cv(model):\n    rmse= np.sqrt(-cross_val_score(model, X_train, y, scoring=\"neg_mean_squared_error\", cv = 5))\n    return(rmse)","725ee8ed":"model_ridge = Ridge()\n","422e6627":"alphas = [0.05, 0.1, 0.3, 1, 3, 5, 10, 15, 30, 50, 75]\ncv_ridge = [rmse_cv(Ridge(alpha = alpha)).mean() \n            for alpha in alphas]","41125997":"cv_ridge = pd.Series(cv_ridge, index = alphas)\ncv_ridge.plot(title = \"Validation - Just Do It\")","494a8b5d":"cv_ridge.min()\n","a11669ab":"model_lasso = LassoCV(alphas = [1, 0.1, 0.001, 0.0005]).fit(X_train, y)\n","98447f9c":"rmse_cv(model_lasso).mean()\n","b30ea438":"coef = pd.Series(model_lasso.coef_, index = X_train.columns)\n","48df3986":"print(\"Lasso picked \" + str(sum(coef != 0)) + \" variables and eliminated the other \" +  str(sum(coef == 0)) + \" variables\")","5023c6d1":"imp_coef = pd.concat([coef.sort_values().head(10),\n                     coef.sort_values().tail(10)])","4b6e8eb5":"plt.rcParams['figure.figsize'] = (8.0, 10.0)\nimp_coef.plot(kind = \"barh\")","bc6df356":"plt.rcParams['figure.figsize'] = (6.0, 6.0)\n\npreds = pd.DataFrame({\"preds\":model_lasso.predict(X_train), \"true\":y})\npreds[\"residuals\"] = preds[\"true\"] - preds[\"preds\"]\npreds.plot(x = \"preds\", y = \"residuals\",kind = \"scatter\")","e8fc360e":"import xgboost as xgb\n\ndtrain = xgb.DMatrix(X_train, label = y)\ndtest = xgb.DMatrix(X_test)\n\nparams = {\"max_depth\":2, \"eta\":0.1}\nmodel = xgb.cv(params, dtrain,  num_boost_round=500, early_stopping_rounds=100)","a3fcbb46":"model.loc[30:,[\"test-rmse-mean\", \"train-rmse-mean\"]].plot()\n","8d527dd7":"model_xgb = xgb.XGBRegressor(n_estimators=360, max_depth=2, learning_rate=0.1) #the params were tuned using xgb.cv\nmodel_xgb.fit(X_train, y)","174db1b3":"xgb_preds = np.expm1(model_xgb.predict(X_test))\nlasso_preds = np.expm1(model_lasso.predict(X_test))","d3282238":"predictions = pd.DataFrame({\"xgb\":xgb_preds, \"lasso\":lasso_preds})\npredictions.plot(x = \"xgb\", y = \"lasso\", kind = \"scatter\")","38f715f2":"preds = 0.7*lasso_preds + 0.3*xgb_preds\n","e5a560b5":"solution = pd.DataFrame({\"id\":test.Id, \"SalePrice\":preds})\nsolution.to_csv(\"ridge_sol.csv\", index = False)","9cfc7ece":"using xgboost","c2336f5a":"**Preprocessing**","5be8235f":"**Model Selection\n**"}}