{"cell_type":{"70cd2f96":"code","cd34b9d5":"code","1532a089":"code","cfb88a1c":"code","0108f4a2":"code","0e7cfe45":"code","3392daaa":"code","f1e58742":"code","6548c039":"code","aca20db2":"code","21f4c706":"code","e269e1f8":"code","99739208":"code","568fe2aa":"code","af802542":"code","ba93fecd":"code","300359f3":"code","491994db":"code","75eae3cf":"code","1ec03d28":"code","173c67a8":"code","672aaf3e":"markdown","b4569677":"markdown","58f3c33a":"markdown","8ab23df2":"markdown","201ad66f":"markdown","10f85d35":"markdown","cfe52f5a":"markdown","fef5295c":"markdown","2c700f56":"markdown","bb4b5e57":"markdown","b561eba3":"markdown","648a45ec":"markdown","91453139":"markdown"},"source":{"70cd2f96":"!pip install xfeat","cd34b9d5":"from xfeat import SelectCategorical, LabelEncoder, LambdaEncoder, Pipeline, ConcatCombination, SelectNumerical, ArithmeticCombinations, TargetEncoder, aggregation, GBDTFeatureSelector, GBDTFeatureExplorer","1532a089":"# Starter#2\u6539\u3092\u5f15\u7528\n# \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3080 \n#---------\u3053\u3053\u304b\u3089\u5fc5\u9808\uff08\u307b\u307c\u3069\u3093\u306a\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3082\u5fc5\u305a\u4f7f\u3046\uff09---------\nimport pandas as pd #\u8868\u5f62\u5f0f\u30c7\u30fc\u30bf\u3092\u6271\u3046\u306e\u306b\u5fc5\u9808\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002Excel\u3092\u8d85\u4fbf\u5229\u306b\u3057\u305f\u3088\u3046\u306a\u3082\u306e\nimport numpy as np #\u30d9\u30af\u30c8\u30eb\u30fb\u884c\u5217\u8a08\u7b97\u3092\u59cb\u3081\u3068\u3057\u305f\u6570\u5024\u8a08\u7b97\u306b\u5fc5\u9808\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\nimport matplotlib.pyplot as plt #\u30b0\u30e9\u30d5\u30d7\u30ed\u30c3\u30c8\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\n\n#---------\u3053\u3053\u304b\u3089optional---------\nfrom sklearn.model_selection import KFold #K fold\u4ea4\u5dee\u691c\u8a3c\u7528\nfrom sklearn.metrics import mean_absolute_error #\u672c\u30b3\u30f3\u30da\u306e\u8a55\u4fa1\u6307\u6a19\u8a08\u7b97\u7528\nimport lightgbm as lgb #LightGBM\u7528\nfrom tqdm.notebook import tqdm #for\u30eb\u30fc\u30d7\u306e\u9014\u4e2d\u9032\u6357\u8868\u793a\u7528\n\n#---------baseline\u306b\u8ffd\u52a0---------\nimport seaborn as sns","cfb88a1c":"# Starter#2\u6539\u3092\u5f15\u7528\n#\u914d\u5e03\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\n#read_csv\u306fcsv\u3092\u8aad\u307f\u8fbc\u3080\u305f\u3081\u306e\u95a2\u6570\ntrain_df=pd.read_csv(\"..\/input\/the-datascience-cup-beta\/train.csv\",index_col=0)\ntest_df=pd.read_csv(\"..\/input\/the-datascience-cup-beta\/test.csv\",index_col=0)\ndescription_df=pd.read_csv(\"..\/input\/the-datascience-cup-beta\/description.csv\",index_col=0)\nsample_df=pd.read_csv(\"..\/input\/the-datascience-cup-beta\/sample.csv\",index_col=0)","0108f4a2":"pd.options.display.max_columns=100 #jupyter\u3067\u8868\u793a\u3059\u308bpandas\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u5217\u6570\u3092100\u5217\u307e\u3067\u306b\u3059\u308b\u3002\u3053\u308c\u3092\u3057\u306a\u3044\u3068\u6b21\u306e\u30bb\u30eb\u3067\u9014\u4e2d\u5217\u304c\u52dd\u624b\u306b\u300c...\u300d\u3068\u7701\u7565\u3055\u308c\u3066\u3057\u307e\u3046","0e7cfe45":"train_df.info()","3392daaa":"train_df_categ = SelectCategorical().fit_transform(train_df)\ntrain_df_categ.info()","f1e58742":"# \u5909\u6570\u540d\u3092\u30ea\u30b9\u30c8\u5316\ncateg_features_list = list(train_df_categ)\ncateg_features_list","6548c039":"# \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3092\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308bPipeline\u306e\u4f5c\u6210\nencoder = Pipeline([\n    SelectCategorical(),\n    LabelEncoder(output_suffix=\"\"),\n])","aca20db2":"train_df_categ = encoder.fit_transform(train_df)\ntest_df_categ = encoder.fit_transform(test_df)\ntrain_df_categ.head(10)","21f4c706":"# \u6570\u5024\u30c7\u30fc\u30bf\u306e\u53d6\u308a\u51fa\u3057\ntrain_df_num = SelectNumerical().fit_transform(train_df)\ntest_df_num = SelectNumerical().fit_transform(test_df)\ntrain_df_num.info()","e269e1f8":"# \u5909\u6570\u540d\u3092\u30ea\u30b9\u30c8\u5316\nnum_features_list = list(train_df_num)\nnum_features_list","99739208":"# \u6700\u5927\u53ce\u5bb9\u4eba\u6570\u3068\u30d9\u30c3\u30c9\u306e\u6570\u306e\u8db3\u3057\u5408\u308f\u305b\nencoder = Pipeline([\n    SelectNumerical(),\n    ArithmeticCombinations(\n        input_cols=['accommodates', 'bedrooms'], \n        drop_origin=True, \n        operator=\"+\", \n        r=2,)\n    ])\n\ntrain_df_num_combi = encoder.fit_transform(train_df_num)\ntest_df_num_combi = encoder.fit_transform(test_df_num)\ntrain_df_num_combi.head(10)","568fe2aa":"train_enc_df = pd.concat([train_df_categ, train_df_num, train_df_num_combi], axis=1)\ntest_enc_df = pd.concat([test_df_categ, test_df_num, test_df_num_combi], axis=1)","af802542":"train_enc_df","ba93fecd":"# \u5b66\u7fd2\u306b\u7528\u3044\u308b\u5909\u6570\u540d\u3092\u30ea\u30b9\u30c8\u5316\nfeatures = list(train_enc_df)\nfeatures.remove('price')\nfeatures","300359f3":"#\u6c42\u3081\u305f\u3044\u5217\ntarget = [\"price\"]\n\n#\u6b21\u306e\u5b66\u7fd2\u3067\u4f7f\u3046\u4e0a\u3067\u90fd\u5408\u304c\u826f\u3044\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6574\u7406\u3057\u3066\u304a\u304d\u307e\u3059\nx_train_df = train_enc_df[features]\ny_train_df = train_enc_df[target]\nx_test_df = test_enc_df[features]","491994db":"# Starter#2\u6539\u3092\u5f15\u7528\n#\u5165\u308c\u7269\ny_preds = []#\u4e88\u6e2c\u7d50\u679c\u5165\u308c\u5834\nmodels=[]#\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u5165\u308c\u5834\nscores = []#\u4e88\u6e2c\u7d50\u679c\u3092\u4f7f\u3063\u305f\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u8a55\u4fa1\u7f6e\u304d\u5834\n\n#CrossValidation\u306e\u305f\u3081\u3001\u30c7\u30fc\u30bf\u5206\u5272\u306e\u6e96\u5099\nFolds=5\ncv = KFold(n_splits=Folds,shuffle=True, random_state=71) \n\n#LightGBM\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6e96\u5099\nparams={\n    \"objective\":\"regression_l1\", #MAE\n}\n\nfor i, (train_ix, val_ix) in tqdm(enumerate(cv.split(x_train_df, y_train_df))):\n    #\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u308b\n    X_train_, y_train_ = x_train_df.iloc[train_ix], y_train_df.iloc[train_ix] #train_ix\u306f\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\u3002\u3053\u308c\u3092\u4f7f\u3063\u3066\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3002iloc\u306fpandas dataframe\u3092\u884c\u756a\u53f7\u3067\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3002\n    X_val, y_val = x_train_df.iloc[val_ix], y_train_df.iloc[val_ix]     #\u691c\u8a3c\u7528\n    train_dataset=lgb.Dataset(X_train_, y_train_) #LightGBM\u3092\u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u4f5c\u308b\u305f\u3081\u306e\u304a\u307e\u3058\u306a\u3044\n    val_dataset=lgb.Dataset(X_val, y_val,reference=train_dataset) #LightGBM\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\u305f\u3081\u306e\u304a\u307e\u3058\u306a\u3044\n    evals_result = {} #\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u8f9e\u66f8\n    #\u5b66\u7fd2\uff01\n    model=lgb.train(params,\n                  train_dataset,\n                  valid_sets=[train_dataset,val_dataset],\n                  valid_names = ['train', 'valid'],\n                  num_boost_round=500, #LightGBM\u306f\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u624b\u6cd5\u306e\u4e00\u3064\u3067\u3042\u308b\u3001boosting\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\u4f55\u56de\u6c7a\u5b9a\u6728\u3092\u76f4\u5217\u3067\u3064\u306a\u3052\u308b\u304b\u3053\u3053\u3067\u6307\u5b9a\u3059\u308b\n                  early_stopping_rounds = 20, #boosting\u3067\u6728\u3092\u91cd\u306d\u3066\u3082\u3060\u3093\u3060\u3093\u52b9\u679c\u304c\u51fa\u306a\u304f\u306a\u3063\u3066\u3044\u304f\u3002early_stopping_rounds\u56de\u691c\u8a3c\u7528\u30bb\u30c3\u30c8\u3067\u52b9\u679c\u304c\u51fa\u306a\u3044\u5834\u5408\u3001\u5b66\u7fd2\u3092\u6253\u3061\u5207\u308b\n                  verbose_eval = 50, #\u8868\u793a\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u7a2e\u985e\u3092\u6307\u5b9a\n                  evals_result = evals_result)\n    print(f\"========================{i+1}\/{Folds} done!========================\")\n\n    \n    #\u6027\u80fd\u8a55\u4fa1\u306e\u305f\u3081\u4e88\u6e2c\n    y_pred = model.predict(X_val)\n    #\u4e88\u6e2c\u7d50\u679c\u3092\u3082\u3068\u306b\u30b9\u30b3\u30a2\u3092\u7b97\u51fa\n    score = mean_absolute_error(y_val, y_pred)\n    #\u7d50\u679c\u3092\u5165\u308c\u7269\u306b\u8ffd\u52a0\n    y_preds.append(y_pred)\n    scores.append(score)\n    models.append(model)\n    #\u5b66\u7fd2\u66f2\u7dda\u306e\u53ef\u8996\u5316\n    train_metric = evals_result['train']['l1']\n    eval_metric = evals_result['valid']['l1']\n    plt.plot(train_metric, label='train')\n    plt.plot(eval_metric, label='valid')\n    plt.grid()\n    plt.legend()\n    plt.xlabel('rounds')\n    plt.ylabel('score')\n    plt.show()\n\nprint(\"===========================\u5b66\u7fd2\u5b8c\u4e86!===============================\")\nprint(f'**********************CV Score is {np.array(scores).mean()}**********************')","75eae3cf":"#\u3053\u306e\u30b3\u30fc\u30c9\u306fgege\u3055\u3093\u306ecode\u304b\u3089\u501f\u7528\u3057\u307e\u3057\u305f\u3002\ndef plot_importance(model, cols, topn=None, fname=None):\n    \n    if 'lightgbm' in str(type(model)):\n        importance = model.feature_importance(importance_type='gain')\n    \n    # calculate importance\n    cols = [str(x) for x in cols]\n    df_importance = pd.DataFrame(sorted(zip(importance, cols)), columns=['Value','Feature'])\n    df_importance.sort_values(by=\"Value\", ascending=False, inplace=True)\n    if topn is not None:\n        df_importance = df_importance.head(topn)\n    \n    # plot\n    plt.figure(figsize=(20, 10))\n    sns.barplot(x=\"Value\", y=\"Feature\", data=df_importance)\n    plt.title('Feature importance')\n    plt.tight_layout()\n    \n    # save\n    if fname is not None:\n        plt.savefig(fname)\n    else:\n        plt.show()\n\nplot_importance(model, features) #\u6700\u5f8c\u306efold\u306b\u3064\u3044\u3066\u7279\u5fb4\u91cf\u91cd\u8981\u5ea6\u3092\u30d7\u30ed\u30c3\u30c8","1ec03d28":"# Starter#2\u6539\u3092\u5f15\u7528\ny_preds=[]\nfor model in models: #\u30e2\u30c7\u30eb\u304c5\u500b\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u305e\u308c\u3067\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3057\u3001\u7d50\u679c\u3092\u5e73\u5747\u3059\u308b\u3002\u4e00\u7a2e\u306e\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u624b\u6cd5\u3068\u8003\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n    y_pred = model.predict(x_test_df)#\u4e88\u6e2c\u3000test_df\u3068\u540c\u3058\u884c\u6570\u306e\u4e88\u6e2c\u30c7\u30fc\u30bf\u304cy_pred\u306b\u5165\u308b\n    y_preds.append(y_pred)\ny_sub = np.mean(y_preds, axis=0) #\u5404\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u3092\u305d\u308c\u305e\u308c\u5e73\u5747\u3059\u308b\u3002axis=0\u306f\u5e73\u5747\u3092\u53d6\u308b\u65b9\u5411\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u3002\ny_sub","173c67a8":"# Starter#2\u6539\u3092\u5f15\u7528\nsub_df=pd.DataFrame({\"index\":test_df.index,\"price\":y_sub})\nsub_df.to_csv(\"submission.csv\",index=False)\nsub_df","672aaf3e":"1\u5909\u6570\u3092\u8ffd\u52a0\u3059\u308b\u7a0b\u5ea6\u3067\u3042\u308c\u3070\u3001\u624b\u52d5\u3067\u3082\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\u304c\u3001\n\u8907\u6570\u306e\u7279\u5fb4\u91cf\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u3064\u304f\u308d\u3046\u3068\u3059\u308b\u3068\u3001\u3053\u306exfeat\u304c\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\u3002","b4569677":"# xfeat\u3092\u5229\u7528\u3057\u305f\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3092\u8a66\u3057\u3066\u307f\u308b\n\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u306f\u7686\u3055\u3093\u3069\u3046\u3084\u3063\u3066\u5b9f\u65bd\u3055\u308c\u3066\u3044\u307e\u3059\u304b\uff1f  \nPFN(Preferred Networks)\u304c\u516c\u958b\u3057\u3066\u3044\u308bxfeat\u3092\u3064\u304b\u3063\u3066\u307f\u3066\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3092\u5b9f\u65bd\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\uff01  \nhttps:\/\/github.com\/pfnet-research\/xfeat  \n\n\u3082\u3057\u3088\u304b\u3063\u305f\u3089\u7686\u3055\u3093\u306e\u624b\u6cd5\u3092\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff01","58f3c33a":"base\u3092Starter#2\u6539\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u3002  \nhttps:\/\/www.kaggle.com\/nmkt6e6d6b74\/starter-2\/notebook","8ab23df2":"## \u6587\u5b57\u5217\u30c7\u30fc\u30bf\u306e\u53d6\u308a\u51fa\u3057","201ad66f":"## \u6570\u5024\u30c7\u30fc\u30bf\u306e\u53d6\u308a\u51fa\u3057","10f85d35":"# \u524d\u51e6\u7406","cfe52f5a":"\u7c21\u5358\u306blabel encode\u304c\u3067\u304d\u308b\u534a\u9762\u3001\u91cd\u8981\u306a\u30c7\u30fc\u30bf\u3092\u898b\u843d\u3068\u3057\u3066\u3057\u307e\u3046\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001  \n\u5b9f\u969b\u306b\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\u3057\u3001\u4e01\u5be7\u306blabel encode\u3092\u5b9f\u65bd\u3059\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\uff08\u4eca\u56de\u306f\u5272\u611b\uff09","fef5295c":"\u9069\u5f53\u306b\u4f5c\u3063\u305f\u6700\u5927\u53ce\u5bb9\u4eba\u6570\u3068\u30d9\u30c3\u30c9\u306e\u6570\u306e\u8db3\u3057\u5408\u308f\u305b\u304c\u4e00\u756a\u4e0a\u306b\u6765\u3066\u307e\u3059\u306d\u3002  \n\u4ed6\u306b\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u304c\u4f5c\u308c\u306a\u3044\u304b\u8a66\u884c\u932f\u8aa4\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff01","2c700f56":"# model","bb4b5e57":"\u3082\u3063\u3068\u8a73\u3057\u304f\u77e5\u308a\u305f\u3044\u65b9\u306f\u3001\u5225\u30b5\u30a4\u30c8\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002  \nhttps:\/\/acro-engineer.hatenablog.com\/entry\/2020\/12\/15\/120000  \n\n\u672cnotebook\u3067\u306f\u3001xfeat\u3092\u672c\u8ab2\u984c\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u306e\u307f\u3092\u30b9\u30b3\u30fc\u30d7\u3068\u3057\u3066\u3044\u307e\u3059\u3002","b561eba3":"SelectCategorical, SelectNumerical\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u52b9\u7387\u826f\u304f\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u6bce\u306e\u5909\u6570\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","648a45ec":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u307f\u8fbc\u307f","91453139":"## \u6570\u5024\u30c7\u30fc\u30bf\u3092\u5229\u7528\u3057\u3066\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3092\u4f5c\u6210"}}