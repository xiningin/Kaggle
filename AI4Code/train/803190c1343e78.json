{"cell_type":{"284fe436":"code","4955aaad":"code","9efeca09":"code","675056c0":"code","8ecee90e":"code","e1f16a7d":"code","d83f1b4e":"code","1113c6cf":"markdown","65f34e50":"markdown"},"source":{"284fe436":"%%bash\n# Install Python 2.7 because the shared library of MIPCL for Python3 is broken (link error).\ngit clone git:\/\/github.com\/yyuu\/pyenv.git ~\/.pyenv\necho 'export PYENV_ROOT=\"$HOME\/.pyenv\"' >> ~\/.bash_profile\necho 'export PATH=\"$PYENV_ROOT\/bin:$PATH\"' >> ~\/.bash_profile\necho 'eval \"$(pyenv init -)\"' >> ~\/.bash_profile\nsource ~\/.bash_profile\napt-get install -y libssl-dev libreadline-dev\npyenv install 2.7.17\npyenv local 2.7.17\npip install pandas numpy\n\n# Install MIPCL(mipcl_py module)\nwget https:\/\/mipcl-cpp.appspot.com\/static\/download\/mipcl-py-2.6.1.linux-x86_64.tar.gz\ntar --exclude='*docs' -xzvf mipcl-py-2.6.1.linux-x86_64.tar.gz # exclude docs directory due to `too many nested subdirectories error` in kaggle kernel\nrm -f .\/mipcl_py\/mipshell\/mipcl.so\nln -s mipcl-py2.so .\/mipcl_py\/mipshell\/mipcl.so # Use mipcl-py2","4955aaad":"%%bash\nsource ~\/.bash_profile\npython <<__EOF__\nfrom __future__ import print_function\nimport time\nimport numpy as np\nimport pandas as pd\nimport mipcl_py.mipshell.mipshell as mipshell\n\ndef get_days(assigned_days, n_people):\n    days = np.zeros(assigned_days.max(), int)\n    for i, r in enumerate(assigned_days):\n        days[r-1] += n_people[i]\n    return days\n\n\ndef example_mipcl(desired, n_people):\n    def accounting_penalty(day, next_day):\n        return (day - 125.0) * (day**(0.5 + abs(day - next_day) \/ 50.0)) \/ 400.0\n    FAMILY_COST = np.asarray([0,50,50,100,200,200,300,300,400,500])\n    MEMBER_COST = np.asarray([0, 0, 9,  9,  9, 18, 18, 36, 36,235])\n    num_days = desired.max()\n    num_families = desired.shape[0]\n    solver = mipshell.Problem(name='Santa2019 only preference')\n    C, B, I = {}, {}, {}\n\n    for fid, choices in enumerate(desired):\n        for cid in range(10):\n            B[fid, choices[cid]-1] = mipshell.Var(type=mipshell.BIN, lb=0.0, ub=1.0)\n            C[fid, choices[cid]-1] = FAMILY_COST[cid] + n_people[fid] * MEMBER_COST[cid]\n\n    for day in range(num_days):\n        I[day] = mipshell.Var(type=mipshell.INT, lb=125, ub=300)\n        mipshell.sum_(n_people[fid]*B[fid, day] for fid in range(num_families) if (fid,day) in B) == I[day]\n\n    for fid in range(num_families):\n        mipshell.sum_(B[fid, day] for day in range(num_days) if (fid,day) in B) == 1\n\n    objective = mipshell.sum_(C[fid, day]*B[fid, day] for fid, day in B)\n\n    solver.minimize(objective)\n    solver.optimize(silent=False, gap=0.0)\n    if solver.is_solution:\n        print(\"Result: \", solver.getObjVal())\n        assigned_days = np.zeros(num_families, int)\n        for fid, day in B:\n            if B[fid, day].val > 0.5:\n                assigned_days[fid] = day + 1\n        return assigned_days\n    else:\n        print(\"Failed\", solver.is_solution, solver.is_infeasible, solver.isPureLP)\n        return None\n\n\ndef save(assigned_days):\n    with open(\"submission_init.csv\", \"w\") as f:\n        f.write(\"family_id,assigned_day\\n\")\n        for fid, v in enumerate(assigned_days):\n            f.write(\"{},{}\\n\".format(fid, v))\n\n\nif __name__ == \"__main__\":\n    ds = pd.read_csv('..\/input\/santa-workshop-tour-2019\/family_data.csv')\n    t = time.time()\n    ret = example_mipcl(ds.values[:,1:11], ds.values[:,11])\n    if ret is not None:\n        save(ret)\n    print(\"Elapsed time\", time.time() - t)\n__EOF__","9efeca09":"Stochastic optimalization: https:\/\/www.kaggle.com\/golubev\/c-stochastic-product-search-65ns","675056c0":"%%writefile main.cpp\n#include <array>\n#include <cassert>\n#include <algorithm>\n#include <cmath>\n#include <fstream>\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <random>\nusing namespace std;\n#include <chrono>\nusing namespace std::chrono;\n\nconstexpr array<uint8_t, 14> DISTRIBUTION{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 5}; \/\/ You can setup how many families you need for swaps and what best choice use for each family\n\/\/ {2, 5} it's mean the first random family will brute force for choices 1-2 and the second random family will brute force for choices 1-5\n\nconstexpr int MAX_OCCUPANCY = 300;\nconstexpr int MIN_OCCUPANCY = 125;\nconstexpr int BEST_N = 1000;\narray<uint8_t, 5000> n_people;\narray<array<uint8_t, 10>, 5000> choices;\narray<array<uint16_t, 10>, 5000> PCOSTM;\narray<array<double, 176>, 176> ACOSTM;\n\nvoid init_data() {\n    ifstream in(\"..\/input\/santa-workshop-tour-2019\/family_data.csv\");\n    \n    assert(in && \"family_data.csv\");\n    string header;\n    int n,x;\n    char comma;\n    getline(in, header);\n    for (int j = 0; j < choices.size(); ++j) {\n        in >> x >> comma;\n        for (int i = 0; i < 10; ++i) {\n            in >> x >> comma;\n            choices[j][i] = x-1;\n        }\n        in >> n;\n        n_people[j] = n;\n    }\n    array<int, 10> pc{0, 50, 50, 100, 200, 200, 300, 300, 400, 500};\n    array<int, 10> pn{0,  0,  9,   9,   9,  18,  18,  36,  36, 235};\n    for (int j = 0; j < PCOSTM.size(); ++j)\n        for (int i = 0; i < 10; ++i)\n            PCOSTM[j][i] = pc[i] + pn[i] * n_people[j];\n    \n    for (int i = 0; i < 176; ++i)\n        for (int j = 0; j < 176; ++j)\n            ACOSTM[i][j] = i * pow(i+125, 0.5 + abs(i-j) \/ 50.0) \/ 400.0;\n}\narray<uint8_t, 5000> read_submission(string filename) {\n    ifstream in(filename);\n    assert(in && \"submission_init.csv\");\n    array<uint8_t, 5000> assigned_day{};\n    string header;\n    int id, x;\n    char comma;\n    getline(in, header);\n    for (int j = 0; j < choices.size(); ++j) {\n        in >> id >> comma >> x;\n        assigned_day[j] = x-1;\n        auto it = find(begin(choices[j]), end(choices[j]), assigned_day[j]);\n        if (it != end(choices[j]))\n            assigned_day[j] = distance(begin(choices[j]), it);\n    }\n    return assigned_day;\n}\nstruct Index {\n    Index(array<uint8_t, 5000> assigned_days_) : assigned_days(assigned_days_)  {\n        setup();\n    }\n    array<uint8_t, 5000> assigned_days;\n    array<uint16_t, 100> daily_occupancy_{};\n    int preference_cost_ = 0;\n    void setup() {\n        preference_cost_ = 0;\n        daily_occupancy_.fill(0);\n        for (int j = 0; j < assigned_days.size(); ++j) {\n            daily_occupancy_[choices[j][assigned_days[j]]] += n_people[j];\n            preference_cost_ += PCOSTM[j][assigned_days[j]];\n        }\n    }\n    double calc(const array<uint16_t, 5000>& indices, const array<uint8_t, DISTRIBUTION.size()>& change) {\n        double accounting_penalty = 0.0;\n        auto daily_occupancy = daily_occupancy_;\n        int preference_cost = preference_cost_;\n        for (int i = 0; i < DISTRIBUTION.size(); ++i) {\n            int j = indices[i];\n            daily_occupancy[choices[j][assigned_days[j]]] -= n_people[j];\n            daily_occupancy[choices[j][       change[i]]] += n_people[j];\n            \n            preference_cost += PCOSTM[j][change[i]] - PCOSTM[j][assigned_days[j]];\n        }\n\n        for (auto occupancy : daily_occupancy)\n            if (occupancy < MIN_OCCUPANCY)\n                return 1e12*(MIN_OCCUPANCY-occupancy);\n            else if (occupancy > MAX_OCCUPANCY)\n                return 1e12*(occupancy - MAX_OCCUPANCY);\n\n        for (int day = 0; day < 99; ++day)\n            accounting_penalty += ACOSTM[daily_occupancy[day]-125][daily_occupancy[day+1]-125];\n\n        accounting_penalty += ACOSTM[daily_occupancy[99]-125][daily_occupancy[99]-125];\n        return preference_cost + accounting_penalty;\n    }\n    void reindex(const array<uint16_t, DISTRIBUTION.size()>& indices, const array<uint8_t, DISTRIBUTION.size()>& change) {\n        for (int i = 0; i < DISTRIBUTION.size(); ++i) {\n            assigned_days[indices[i]] = change[i];\n        }\n        setup();\n    }\n};\n\ndouble calc(const array<uint8_t, 5000>& assigned_days, bool print=false) {\n    int preference_cost = 0;\n    double accounting_penalty = 0.0;\n    array<uint16_t, 100> daily_occupancy{};\n    for (int j = 0; j < assigned_days.size(); ++j) {\n        preference_cost += PCOSTM[j][assigned_days[j]];\n        daily_occupancy[choices[j][assigned_days[j]]] += n_people[j];\n    }\n    for (auto occupancy : daily_occupancy)\n        if (occupancy < MIN_OCCUPANCY)\n            return 1e12*(MIN_OCCUPANCY-occupancy);\n        else if (occupancy > MAX_OCCUPANCY)\n            return 1e12*(occupancy - MAX_OCCUPANCY);\n\n    for (int day = 0; day < 99; ++day)\n        accounting_penalty += ACOSTM[daily_occupancy[day]-125][daily_occupancy[day+1]-125];\n\n    accounting_penalty += ACOSTM[daily_occupancy[99]-125][daily_occupancy[99]-125];\n    if (print) {\n        cout << preference_cost << \" \" << accounting_penalty << \" \" << preference_cost+accounting_penalty << endl;\n    }\n    return preference_cost + accounting_penalty;\n}\n\nvoid save_sub(const array<uint8_t, 5000>& assigned_day) {\n    ofstream out(\"submission_init2.csv\");\n    out << \"family_id,assigned_day\" << endl;\n    for (int i = 0; i < assigned_day.size(); ++i)\n        out << i << \",\" << choices[i][assigned_day[i]]+1 << endl;\n}\n        \nconst vector<array<uint8_t, DISTRIBUTION.size()>> changes = []() {\n    vector<array<uint8_t, DISTRIBUTION.size()>> arr;\n    array<uint8_t, DISTRIBUTION.size()> tmp{};\n    for (int i = 0; true; ++i) {\n        arr.push_back(tmp);\n        tmp[0] += 1;\n        for (int j = 0; j < DISTRIBUTION.size(); ++j)\n            if (tmp[j] >= DISTRIBUTION[j]) {\n                if (j >= DISTRIBUTION.size()-1)\n                    return arr;\n                tmp[j] = 0;\n                ++tmp[j+1];\n            }\n    }\n    return arr;\n}();\n\ntemplate<class ExitFunction>\nvoid stochastic_product_search(Index index, ExitFunction fn) { \/\/ 15'360'000it\/s  65ns\/it  0.065\u00b5s\/it\n    double best_local_score = calc(index.assigned_days);\n    thread_local std::mt19937 gen(std::random_device{}());\n    gen.seed(1);\n    uniform_int_distribution<> dis(0, 4999);\n    array<uint16_t, 5000> indices;\n    iota(begin(indices), end(indices), 0);\n    array<uint16_t, DISTRIBUTION.size()> best_indices{};\n    array<uint8_t, DISTRIBUTION.size()> best_change{};\n    for (; fn();) {\n        bool found_better = false;\n        for (int k = 0; k < BEST_N; ++k) {\n            for (int i = 0; i < DISTRIBUTION.size(); ++i) \/\/random swap\n                swap(indices[i], indices[dis(gen)]);\n            for (const auto& change : changes) {\n                auto score = index.calc(indices, change);\n                if (score < best_local_score) {\n                    found_better = true;\n                    best_local_score = score;\n                    best_change = change;\n                    copy_n(begin(indices), DISTRIBUTION.size(), begin(best_indices));\n                }\n            }\n        }\n        if (found_better) { \/\/ reindex from N best if found better\n            index.reindex(best_indices, best_change);\n\/\/            save_sub(index.assigned_days);\n            calc(index.assigned_days, true);\n            \n        }\n    }\n    save_sub(index.assigned_days);\n}\n\nint main() {\n    init_data();\n    auto assigned_day = read_submission(\"\/kaggle\/working\/submission_init.csv\");\n\n    Index index(assigned_day);\n    calc(index.assigned_days, true);\n\/\/    auto forever = []() { return true; };\n\/\/    auto count_exit = [start = 0]() mutable { return (++start <= 1000); };\n    auto time_exit = [start = high_resolution_clock::now()]() {\n        return duration_cast<minutes>(high_resolution_clock::now()-start).count() < 120; \/\/2h\n    };\n    \n    stochastic_product_search(index, time_exit);\n    return 0;\n}","8ecee90e":"!g++ -pthread -lpthread -O3 -std=c++17 -o main main.cpp","e1f16a7d":"!.\/main","d83f1b4e":"%%time\nfrom ortools.linear_solver import pywraplp\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n#%matplotlib inline\n\nNUMBER_DAYS = 100\nNUMBER_FAMILIES = 5000\nMAX_BEST_CHOICE = 5\ndata = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv')\nsubmission = pd.read_csv('\/kaggle\/working\/submission_init2.csv')\nassigned_days = submission['assigned_day'].values\ncolumns = data.columns[1:11]\nDESIRED = data[columns].values\nCOST_PER_FAMILY        = [0,50,50,100,200,200,300,300,400,500]\nCOST_PER_FAMILY_MEMBER = [0, 0, 9,  9,  9, 18, 18, 36, 36,235]\nN_PEOPLE = data['n_people'].values\n\ndef get_daily_occupancy(assigned_days):\n    daily_occupancy = np.zeros(100, int)\n    for fid, assigned_day in enumerate(assigned_days):\n        daily_occupancy[assigned_day-1] += N_PEOPLE[fid]\n    return daily_occupancy\n\n\n    \ndef cost_function(prediction):\n    N_DAYS = 100\n    MAX_OCCUPANCY = 300\n    MIN_OCCUPANCY = 125\n    penalty = 0\n    days = list(range(N_DAYS,0,-1))\n    tmp = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv', index_col='family_id')\n    family_size_dict = tmp[['n_people']].to_dict()['n_people']\n\n    cols = [f'choice_{i}' for i in range(10)]\n    choice_dict = tmp[cols].to_dict()\n\n    # We'll use this to count the number of people scheduled each day\n    daily_occupancy = {k:0 for k in days}\n    \n    # Looping over each family; d is the day for each family f\n    for f, d in enumerate(prediction):\n        # Using our lookup dictionaries to make simpler variable names\n        n = family_size_dict[f]\n        choice_0 = choice_dict['choice_0'][f]\n        choice_1 = choice_dict['choice_1'][f]\n        choice_2 = choice_dict['choice_2'][f]\n        choice_3 = choice_dict['choice_3'][f]\n        choice_4 = choice_dict['choice_4'][f]\n        choice_5 = choice_dict['choice_5'][f]\n        choice_6 = choice_dict['choice_6'][f]\n        choice_7 = choice_dict['choice_7'][f]\n        choice_8 = choice_dict['choice_8'][f]\n        choice_9 = choice_dict['choice_9'][f]\n\n        # add the family member count to the daily occupancy\n        daily_occupancy[d] += n\n\n        # Calculate the penalty for not getting top preference\n        if d == choice_0:\n            penalty += 0\n        elif d == choice_1:\n            penalty += 50\n        elif d == choice_2:\n            penalty += 50 + 9 * n\n        elif d == choice_3:\n            penalty += 100 + 9 * n\n        elif d == choice_4:\n            penalty += 200 + 9 * n\n        elif d == choice_5:\n            penalty += 200 + 18 * n\n        elif d == choice_6:\n            penalty += 300 + 18 * n\n        elif d == choice_7:\n            penalty += 300 + 36 * n\n        elif d == choice_8:\n            penalty += 400 + 36 * n\n        elif d == choice_9:\n            penalty += 500 + 36 * n + 199 * n\n        else:\n            penalty += 500 + 36 * n + 398 * n\n\n    # for each date, check total occupancy\n    #  (using soft constraints instead of hard constraints)\n    for _, v in daily_occupancy.items():\n        if  (v < MIN_OCCUPANCY): #(v > MAX_OCCUPANCY) or\n            penalty += 100000000\n\n    # Calculate the accounting cost\n    # The first day (day 100) is treated special\n    accounting_cost = (daily_occupancy[days[0]]-125.0) \/ 400.0 * daily_occupancy[days[0]]**(0.5)\n    # using the max function because the soft constraints might allow occupancy to dip below 125\n    accounting_costs = [max(0, accounting_cost)]\n    diffs = [0]\n    # Loop over the rest of the days, keeping track of previous count\n    yesterday_count = daily_occupancy[days[0]]\n    for day in days[1:]:\n        today_count = daily_occupancy[day]\n        diff = abs(today_count - yesterday_count)\n        accounting_costs.append(max(0, (today_count-125.0) \/ 400.0 * today_count**(0.5 + diff \/ 50.0)))\n        yesterday_count = today_count\n\n    return penalty, sum(accounting_costs), penalty + sum(accounting_costs)\n\nfrom random import sample\nfrom random import seed\nseed(2)\n\nfor f in range(100):\n    ad = assigned_days.copy()\n    \n    days_for_fix = np.array(sample(range(1,101),50))\n   \n    daily_occupancy = get_daily_occupancy(ad)\n    fids = np.where(np.isin(ad, days_for_fix))[0] # Ids of family for move\n    \n    solver = pywraplp.Solver('Setup occupation of days', pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING)\n    PCOSTM, B = {}, {} # cost matrix, boolean vars matrix\n    for fid in fids:\n        for i in range(MAX_BEST_CHOICE):\n            B[fid, DESIRED[fid][i]-1] = solver.BoolVar(f'b{fid, i}') # B[family, choice_day] = boolean variable \n            PCOSTM[fid, DESIRED[fid][i]-1] = COST_PER_FAMILY[i] + N_PEOPLE[fid] * COST_PER_FAMILY_MEMBER[i]  # PCOSTM[family, choice_day] = cost \n\n    lower_bounds = np.zeros(100)\n    upper_bounds = np.zeros(100)\n\n    delta  = 8\n    for fi in days_for_fix:\n        lower_bounds[fi-1] = max(daily_occupancy[fi-1]-delta,125)\n        upper_bounds[fi-1] = min(daily_occupancy[fi-1]+delta,300)\n\n    D = {}\n    \n    for j in range(NUMBER_DAYS):\n        I = solver.IntVar(lower_bounds[j], upper_bounds[j], f'I{j}')\n        solver.Add(solver.Sum([N_PEOPLE[i] * B[i, j] for i in range(NUMBER_FAMILIES) if (i,j) in B]) == I) # sum families over choices days \n        if upper_bounds[j]>124:\n            rj = range(int(lower_bounds[j]),int(upper_bounds[j])+1)\n            for i in rj:\n                D[j, i] = solver.BoolVar(f'd{j, i}') \n            solver.Add(solver.Sum([D[j, i]*i for i in rj]) == I)            \n\n    for i in fids:\n        solver.Add(solver.Sum(B[i, j] for j in range(NUMBER_DAYS) if (i,j) in B) == 1) # exactly one day assigned to each family\n    sM =solver.Sum(PCOSTM[i, j] * B[i, j] for i, j in B)\n    for i in range(NUMBER_DAYS):\n        if np.isin(i,days_for_fix-1):\n            ri = range(int(lower_bounds[i]),int(upper_bounds[i])+1)\n            if i<99:\n                sM +=  solver.Sum(D[i,j]*(j-125)\/400*j**(0.5+abs(j-daily_occupancy[i+1])\/50) for j in ri)\n                \n            if i>0:\n                sM +=  solver.Sum(D[i,j]*(daily_occupancy[i-1]-125)\/400*daily_occupancy[i-1]**(0.5+abs(j-daily_occupancy[i-1])\/50) for j in ri)\n            \n    solver.Minimize( sM)\n    sol = solver.Solve()\n\n    status = ['OPTIMAL', 'FEASIBLE', 'INFEASIBLE', 'UNBOUNDED', 'ABNORMAL', 'MODEL_INVALID', 'NOT_SOLVED']\n    if status[sol] == 'OPTIMAL':\n        for i, j in B:\n            if B[i, j].solution_value() > 0.5:\n                ad[i] = j+1\n    if cost_function(ad)[2]<cost_function(assigned_days)[2]:\n\n        submission['assigned_day'] = ad\n        assigned_days = ad\n        print(cost_function(ad))\nscore = cost_function(assigned_days)[2]\nsubmission.to_csv(f'submission_{score}.csv', index=False)\n","1113c6cf":"This notebook is based on a great notebooks from Vlad Golubev and nagadomi - special thanks to both of \nthem for sharing codes!\n\nInitial value (best preference cost solution):\nhttps:\/\/www.kaggle.com\/nagadomi\/mipcl-example-only-preference","65f34e50":"My own piece of code based on: https:\/\/www.kaggle.com\/golubev\/optimization-preference-cost-mincostflow\nand idea on this: https:\/\/www.kaggle.com\/golubev\/manual-to-improve-submissions"}}