{"cell_type":{"4b49ce15":"code","5da714a4":"code","d97da560":"code","cff6c4a6":"code","cd95d92c":"code","c700134a":"code","c562c227":"code","cb86c17c":"code","9eae134b":"code","0e52b912":"code","0e8b124c":"code","cd7ea2a9":"code","7b3957b7":"code","ba54ce46":"code","8e4ef1f3":"code","5b237048":"code","19e142f3":"code","41c332e7":"markdown"},"source":{"4b49ce15":"import os\nimport cv2\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport json\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Flatten, Activation, Dropout, GlobalAveragePooling2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import optimizers, applications\nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler, TensorBoard, EarlyStopping\nfrom keras import backend as K ","5da714a4":"train_df = pd.read_csv(\"..\/input\/aptos2019-blindness-detection\/train.csv\")\ntrain_df[\"id_code\"]=train_df[\"id_code\"].apply(lambda x:x+\".png\")\ntrain_df['diagnosis'] = train_df['diagnosis'].astype(str)\ntrain_df.head()","d97da560":"# Example of images \nimg_names = train_df['id_code'][:10]\n\nplt.figure(figsize=[15,15])\ni = 1\nfor img_name in img_names:\n    img = cv2.imread(\"..\/input\/aptos2019-blindness-detection\/train_images\/%s\" % img_name)[...,[2, 1, 0]]\n    plt.subplot(6, 5, i)\n    plt.imshow(img)\n    i += 1\nplt.show()","cff6c4a6":"nb_classes = 5\nlbls = list(map(str, range(nb_classes)))\nbatch_size = 32\nimg_size = 64\nnb_epochs = 5","cd95d92c":"%%time\n\ntrain_datagen=ImageDataGenerator(\n    rescale=1.\/255, \n    validation_split=0.25,\n#     horizontal_flip = True,    \n#     zoom_range = 0.3,\n#     width_shift_range = 0.3,\n#     height_shift_range=0.3\n    )\n\ntrain_generator=train_datagen.flow_from_dataframe(\n    dataframe=train_df,\n    directory=\"..\/input\/aptos2019-blindness-detection\/train_images\",\n    x_col=\"id_code\",\n    y_col=\"diagnosis\",\n    batch_size=batch_size,\n    shuffle=True,\n    class_mode=\"categorical\",\n    classes=lbls,\n    target_size=(img_size,img_size),\n    subset='training')\n\nvalid_generator=train_datagen.flow_from_dataframe(\n    dataframe=train_df,\n    directory=\"..\/input\/aptos2019-blindness-detection\/train_images\",\n    x_col=\"id_code\",\n    y_col=\"diagnosis\",\n    batch_size=batch_size,\n    shuffle=True,\n    class_mode=\"categorical\", \n    classes=lbls,\n    target_size=(img_size,img_size),\n    subset='validation')","c700134a":"model = applications.ResNet50(weights=None, \n                          include_top=False, \n                          input_shape=(img_size, img_size, 3))\nmodel.load_weights('..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5')","c562c227":"model.trainable = False","cb86c17c":"#Adding custom layers \nx = model.output\nx = Flatten()(x)\nx = Dense(1024, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\npredictions = Dense(nb_classes, activation=\"softmax\")(x)\nmodel_final = Model(input = model.input, output = predictions)\n\nmodel_final.compile(optimizers.rmsprop(lr=0.001, decay=1e-6),loss='categorical_crossentropy',metrics=['accuracy'])","9eae134b":"# Callbacks\n\ncheckpoint = ModelCheckpoint(\"model_1.h5\", monitor='val_loss', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\nearly = EarlyStopping(monitor='val_loss', min_delta=0, patience=5, verbose=1, mode='auto')","0e52b912":"%%time\nhistory = model_final.fit_generator(generator=train_generator,                   \n                                    steps_per_epoch=100,\n                                    validation_data=valid_generator,                    \n                                    validation_steps=30,\n                                    epochs=nb_epochs,\n                                    callbacks = [checkpoint, early],\n                                    max_queue_size=16,\n                                    workers=2,\n                                    use_multiprocessing=True,\n                                    verbose=0)","0e8b124c":"with open('history.json', 'w') as f:\n    json.dump(history.history, f)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['acc', 'val_acc']].plot()","cd7ea2a9":"sam_sub_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/sample_submission.csv')\nsam_sub_df[\"id_code\"]=sam_sub_df[\"id_code\"].apply(lambda x:x+\".png\")\nprint(sam_sub_df.shape)\nsam_sub_df.head()","7b3957b7":"%%time\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_datagen.flow_from_dataframe(  \n        dataframe=sam_sub_df,\n        directory = \"..\/input\/aptos2019-blindness-detection\/test_images\",    \n        x_col=\"id_code\",\n        target_size = (img_size,img_size),\n        batch_size = 1,\n        shuffle = False,\n        class_mode = None\n        )","ba54ce46":"%%time\ntest_generator.reset()\npredict=model_final.predict_generator(test_generator, steps = len(test_generator.filenames))","8e4ef1f3":"predict.shape","5b237048":"filenames=test_generator.filenames\nresults=pd.DataFrame({\"id_code\":filenames,\n                      \"diagnosis\":np.argmax(predict,axis=1)})\nresults['id_code'] = results['id_code'].map(lambda x: str(x)[:-4])\nresults.to_csv(\"submission.csv\",index=False)","19e142f3":"results.head()","41c332e7":"Transfer learning from pretrained model (Resnet50) using Keras"}}