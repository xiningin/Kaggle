{"cell_type":{"7cfd580f":"code","03367bde":"code","27a9d357":"code","6888529c":"code","3b375203":"code","4a5a5f82":"code","20309013":"code","a0830c41":"code","23344af7":"code","8906c948":"code","5c70e840":"code","f2822c3d":"code","6554cf76":"code","c3461f90":"code","6d2e1880":"code","80fc9c47":"code","5ff8f009":"code","e1ce95ee":"code","17aabef3":"code","1a4cfcfe":"code","e6497694":"code","9154a4e0":"code","3914072a":"code","02490aca":"code","155ada1c":"code","e9323578":"code","65cfe08e":"code","8bed5335":"code","d0de36ec":"code","2a350cef":"code","9381ec75":"code","af8d7bf6":"code","3f96bae1":"code","1fe37ca3":"code","12ab6df3":"code","2ffda1e2":"code","83bfb439":"code","f9c8480f":"code","3d53102e":"code","7905f2c9":"code","03b3ce5a":"code","93b53e2d":"code","baa7659a":"code","84408fbd":"code","565207a4":"code","a4f1afd6":"code","770fc445":"code","f1b47cf2":"code","f593c4ad":"code","0ca7ca28":"code","50c6c1fb":"code","6242b51f":"code","2778f5aa":"code","586e65b1":"code","0fb915c9":"code","3ac6152a":"code","af529794":"code","51c4ab8e":"code","395ca412":"code","a0f2e109":"code","2a1e2d56":"code","8f01c891":"code","eaf25385":"code","a339a1b2":"code","594b00bb":"code","d7b5f454":"code","8e31748f":"code","9861c335":"code","7b3c43cc":"code","226d610b":"code","e1414e25":"code","1d618bab":"code","f90413d7":"code","e6d4ed6a":"code","94377258":"code","5fb6b49a":"code","3c46b201":"code","77f1adb3":"code","373c85ce":"code","76c540be":"markdown","6075bc50":"markdown","c38bc53f":"markdown","b772ba7c":"markdown","b178b676":"markdown","7ebfea0f":"markdown","67cd1b45":"markdown","e08189a8":"markdown","fdd1f4c9":"markdown"},"source":{"7cfd580f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\n\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error","03367bde":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n","27a9d357":"# Shape of the Train Data\ndf_train.shape, df_test.shape","6888529c":"#Train Data info\ndf_train.info()","3b375203":"#Describing The Train Data\ndf_train.describe()","4a5a5f82":"#Train Data info\n\ndf_train.head()","20309013":"#Test Data info\n\ndf_test.info()","a0830c41":"#describe The Test Data \n\ndf_test.describe()","23344af7":"df_test.head()","8906c948":"df_train.head()","5c70e840":"# Checking null values\ndf_train.isnull().sum()","f2822c3d":"# Checking null values\n\ndf_test.isnull().sum()","6554cf76":"df_train = df_train.drop(columns = (['Alley','FireplaceQu','PoolQC','Fence','MiscFeature',]))","c3461f90":"df_test = df_test.drop(columns = (['Alley','FireplaceQu','PoolQC','Fence','MiscFeature',]))","6d2e1880":"df_train = df_train.fillna(df_train.mean())","80fc9c47":"df_test = df_test.fillna(df_train.mean())","5ff8f009":"df_train.columns","e1ce95ee":"df_train[\"MasVnrArea\"] = df_train[\"MasVnrArea\"].fillna(df_train[\"MasVnrArea\"].mode()[0])\ndf_train[\"BsmtFinSF1\"] = df_train[\"BsmtFinSF1\"].fillna(df_train[\"BsmtFinSF1\"].mode()[0])\ndf_train[\"BsmtFinSF2\"] = df_train[\"BsmtFinSF2\"].fillna(df_train[\"BsmtFinSF2\"].mode()[0])\ndf_train[\"BsmtUnfSF\"] = df_train[\"BsmtUnfSF\"].fillna(df_train[\"BsmtUnfSF\"].mode()[0])\ndf_train[\"TotalBsmtSF\"] = df_train[\"TotalBsmtSF\"].fillna(df_train[\"TotalBsmtSF\"].mode()[0])\ndf_train[\"2ndFlrSF\"] = df_train[\"2ndFlrSF\"].fillna( df_train[\"2ndFlrSF\"].mode()[0])\ndf_train[\"GarageArea\"] = df_train[\"GarageArea\"].fillna( df_train[\"GarageArea\"].mode()[0])\ndf_train[\"WoodDeckSF\"] = df_train[\"WoodDeckSF\"].fillna( df_train[\"WoodDeckSF\"].mode()[0])\ndf_train[\"OpenPorchSF\"] = df_train[\"OpenPorchSF\"].fillna( df_train[\"OpenPorchSF\"].mode()[0])\ndf_train[\"EnclosedPorch\"] = df_train[\"EnclosedPorch\"].fillna( df_train[\"EnclosedPorch\"].mode()[0])\ndf_train[\"3SsnPorch\"] = df_train[\"3SsnPorch\"].fillna(df_train[\"3SsnPorch\"].mode()[0])\ndf_train[\"ScreenPorch\"] = df_train[\"ScreenPorch\"].fillna(df_train[\"ScreenPorch\"].mode()[0])\ndf_train[\"MiscVal\"] = df_train[\"MiscVal\"].fillna(df_train[\"MiscVal\"].mode()[0])\ndf_train[\"ScreenPorch\"] = df_train[\"ScreenPorch\"].fillna(df_train[\"ScreenPorch\"].mode()[0])\n","17aabef3":"df_test['MSZoning']=df_test['MSZoning'].fillna(df_test['MSZoning'].mode()[0])\ndf_test['Utilities']=df_test['Utilities'].fillna(df_test['Utilities'].mode()[0])\ndf_test['MasVnrType']=df_test['MasVnrType'].fillna(df_test['MasVnrType'].mode()[0])\ndf_test['MasVnrArea']=df_test['MasVnrArea'].fillna(df_test['MasVnrArea'].mode()[0])\ndf_test['BsmtCond']=df_test['BsmtCond'].fillna(df_test['BsmtCond'].mode()[0])\ndf_test['BsmtQual']=df_test['BsmtQual'].fillna(df_test['BsmtQual'].mode()[0])\ndf_test['BsmtExposure']=df_test['BsmtExposure'].fillna(df_test['BsmtExposure'].mode()[0])\ndf_test['BsmtFinType1']=df_test['BsmtFinType1'].fillna(df_test['BsmtFinType1'].mode()[0])\ndf_test['BsmtFinType2']=df_test['BsmtFinType2'].fillna(df_test['BsmtFinType2'].mode()[0])\ndf_test['BsmtFullBath']=df_test['BsmtFullBath'].fillna(df_test['BsmtFullBath'].mode()[0])\ndf_test['BsmtHalfBath']=df_test['BsmtHalfBath'].fillna(df_test['BsmtHalfBath'].mode()[0])\ndf_test['Functional']=df_test['Functional'].fillna(df_test['Functional'].mode()[0])\ndf_test['GarageType']=df_test['GarageType'].fillna(df_test['GarageType'].mode()[0])\ndf_test['GarageFinish']=df_test['GarageFinish'].fillna(df_test['GarageFinish'].mode()[0])\ndf_test['GarageQual']=df_test['GarageQual'].fillna(df_test['GarageQual'].mode()[0])\ndf_test['GarageCond']=df_test['GarageCond'].fillna(df_test['GarageCond'].mode()[0])\ndf_test['Exterior1st']=df_test['Exterior1st'].fillna(df_test['Exterior1st'].mode()[0])\ndf_test['Exterior2nd']=df_test['Exterior2nd'].fillna(df_test['Exterior2nd'].mode()[0])\ndf_test['BsmtFinSF1']=df_test['BsmtFinSF1'].fillna(df_test['BsmtFinSF1'].mean())\ndf_test['BsmtFinSF2']=df_test['BsmtFinSF2'].fillna(df_test['BsmtFinSF2'].mean())\ndf_test['BsmtUnfSF']=df_test['BsmtUnfSF'].fillna(df_test['BsmtUnfSF'].mean())\ndf_test['TotalBsmtSF']=df_test['TotalBsmtSF'].fillna(df_test['TotalBsmtSF'].mean())\ndf_test['KitchenQual']=df_test['KitchenQual'].fillna(df_test['KitchenQual'].mode()[0])\ndf_test['GarageCars']=df_test['GarageCars'].fillna(df_test['GarageCars'].mean())\ndf_test['GarageArea']=df_test['GarageArea'].fillna(df_test['GarageArea'].mean())\ndf_test['SaleType']=df_test['SaleType'].fillna(df_test['SaleType'].mode()[0])","1a4cfcfe":"df_train.isnull().sum()","e6497694":"df_test.isnull().sum()","9154a4e0":"sns.distplot(x = df_train.SalePrice  ) ","3914072a":"sns.boxplot(x = df_train.SalePrice, y = df_train.LotFrontage)","02490aca":"sns.countplot( df_train.OverallQual)","155ada1c":"sns.boxplot(y =df_train.SalePrice ,x = df_train.OverallCond)","e9323578":"sns.scatterplot(x =df_train.SalePrice ,y = df_train.YearBuilt)","65cfe08e":"sns.scatterplot(y =df_train.SalePrice ,x = df_train.YearRemodAdd)","8bed5335":"sns.boxplot(df_train.GrLivArea)","d0de36ec":"sns.boxplot(y =df_train.SalePrice ,x = df_train['BsmtFullBath'])","2a350cef":"sns.countplot(df_train['FullBath'])","9381ec75":"sns.countplot(df_train['HalfBath'])","af8d7bf6":"sns.boxplot(df_train['BedroomAbvGr'])","3f96bae1":"sns.boxplot(df_train['TotRmsAbvGrd'])","1fe37ca3":"sns.boxplot(df_train['Fireplaces'])","12ab6df3":"sns.boxplot(df_train['GarageYrBlt'])","2ffda1e2":"sns.countplot(df_train['GarageCars'])","83bfb439":"sns.boxplot(df_train['GarageArea'])","f9c8480f":"sns.boxplot(df_train['WoodDeckSF'])","3d53102e":"sns.boxplot(df_train['OpenPorchSF'])","7905f2c9":"sns.countplot(df_train['MoSold'])","03b3ce5a":"sns.barplot(x = df_train['YrSold'],y = df_train.SalePrice)","93b53e2d":"df_train.shape","baa7659a":"df_train.select_dtypes(include='object').columns","84408fbd":"df_test.select_dtypes(include='object').columns","565207a4":"df_train_1 = df_train.drop(columns = (['Utilities','Condition2','HouseStyle','RoofMatl','Exterior1st','Exterior2nd','Heating','Electrical','GarageQual']))","a4f1afd6":"df_test_1 = df_test.drop(columns = (['Utilities','Condition2','HouseStyle','RoofMatl','Exterior1st','Exterior2nd','Heating','Electrical','GarageQual']))","770fc445":"dummied_train=pd.get_dummies(df_train_1, drop_first=True)","f1b47cf2":"dummied_test=pd.get_dummies(df_test_1, drop_first=True)","f593c4ad":"dummied_train.head()","0ca7ca28":"dummied_test.head()","50c6c1fb":"X=dummied_train.drop(columns='SalePrice',axis=1)\nY=dummied_train['SalePrice']","6242b51f":"#from sklearn.preprocessing import StandardScaler\n#scalar = StandardScaler()\n#X_scalar_fit = scalar.fit_transform(X)","2778f5aa":"#X_scalar_fit","586e65b1":"X","0fb915c9":"Y","3ac6152a":"# splitting the dataset into train and test data\n\nx_train,x_test,y_train,y_test = train_test_split(X,Y,test_size=0.33,random_state = 42)\nx_train.shape,x_test.shape,y_train.shape,y_test.shape","af529794":"y_train","51c4ab8e":"lm = LinearRegression()\nlm_fit = lm.fit(x_train,y_train)","395ca412":"print('intercept_ : ',lm_fit.intercept_)\nprint(lm_fit.coef_)","a0f2e109":"y_pred_lm = lm_fit.predict(x_test)\n","2a1e2d56":"# loocking for y_test data predicted data and y_test - predicted data\n\nfor i in range(y_test.shape[0]):\n    print('y_test :',list(y_test)[i],'|***|','y_pred_lm :',(y_pred_lm)[i],'|***|','y_test - y_pred_lm :',list(y_test)[i]-y_pred_lm[i])","8f01c891":"#Linear Regression model metrics\n\nmse = mean_squared_error (y_test, y_pred_lm)\n\nrmse = np.sqrt(mse)\n\nprint('=======================================')\nprint (\"R2 Score :\" , r2_score(y_test,y_pred_lm))\nprint('=======================================')\nprint (\"RMSE :\", rmse)\nprint('=======================================')\nprint (\"mse :\", mse)\n\nprint('=======================================')\nprint (\"training set score :\", lm_fit.score(x_train, y_train))\nprint (\"test set score :\", lm_fit.score(x_test,y_test))\nprint('=======================================')","eaf25385":"# Plot Targets & Predictions\n\nplt.scatter(y_test, y_pred_lm)\nplt.plot([y_test.min(),y_test.max()],[y_pred_lm.min(),y_pred_lm.max()], color = 'black', label = 'regretion Line' )\nplt.xlabel('Targets',size=18)\nplt.ylabel('Predictions',size=18)\nplt.title('Targets & Predictions',size=20)\nplt.legend()\nplt.show()","a339a1b2":"lassoR = Lasso(alpha=1)\nlassoR_fit = lassoR.fit(x_train, y_train)","594b00bb":"y_pred_lasso = lassoR_fit.predict(x_test)","d7b5f454":"for i in range(y_test.shape[0]):\n    print('y_test :',list(y_test)[i],'y_pred_lasso :',(y_pred_lasso)[i],'y_test - y_pred_lasso :',list(y_test)[i]-y_pred_lasso[i])","8e31748f":"#Lasso Regression model metrics\n\nmse = mean_squared_error (y_test, y_pred_lasso)\n\nrmse = np.sqrt(mse)\n\nprint('=======================================')\nprint (\"R2 Score :\" , r2_score(y_test,y_pred_lasso))\nprint('=======================================')\nprint (\"RMSE :\", rmse)\nprint('=======================================')\nprint (\"mse :\", mse)\n\nprint('=======================================')\n\nprint (\"training set score :\", lassoR_fit.score(x_train, y_train))\nprint (\"test set score :\", lassoR_fit.score(x_test,y_test))\nprint('=======================================')","9861c335":"# Plot Targets & Predictions\n\nplt.scatter(y_test, y_pred_lasso)\nplt.plot([y_test.min(),y_test.max()],[y_pred_lasso.min(),y_pred_lasso.max()], color = 'black', label = 'regretion Line' )\nplt.xlabel('Targets',size=18)\nplt.ylabel('Predictions',size=18)\nplt.title('Targets & Predictions',size=20)\nplt.legend()\nplt.show()","7b3c43cc":"#Random Forest Regressor mODEL\nrandom_reg = RandomForestRegressor(n_estimators=100,random_state=0)\n#Random Forest Regressor Model Fitting\nrandom_reg_fit = random_reg.fit(x_train,y_train)","226d610b":"y_pred_random = random_reg_fit.predict(x_test)","e1414e25":"for i in range(y_test.shape[0]):\n    print('y_test :',list(y_test)[i],'y_pred_random :',(y_pred_random)[i],'y_test - y_pred_random :',list(y_test)[i]-y_pred_random[i])","1d618bab":"#Random Forest Regression model metrics\nmse = mean_squared_error (y_test, y_pred_random)\n\nrmse = np.sqrt(mse)\n\nprint('=======================================')\nprint (\"R2 Score :\" , r2_score(y_test,y_pred_random))\nprint('=======================================')\nprint (\"RMSE :\", rmse)\nprint('=======================================')\nprint (\"mse :\", mse)\n\nprint('=======================================')\n\nprint (\"training set score :\", random_reg.score(x_train, y_train))\nprint (\"test set score :\", random_reg.score(x_test,y_test))\nprint('=======================================')","f90413d7":"# Plot Targets & Predictions\n\nplt.scatter(y_test, y_pred_random)\nplt.plot([y_test.min(),y_test.max()],[y_pred_random.min(),y_pred_random.max()], color = 'black', label = 'regretion Line' )\nplt.xlabel('Targets',size=18)\nplt.ylabel('Predictions',size=18)\nplt.title('Targets & Predictions',size=20)\nplt.legend()\nplt.show()","e6d4ed6a":"gbr = GradientBoostingRegressor(random_state=101)\ngbr_fit = gbr.fit(x_train,y_train)","94377258":"y_pred_gbr= gbr_fit.predict(x_test)","5fb6b49a":"for i in range(y_test.shape[0]):\n    print('y_test :',list(y_test)[i],'y_pred_gbr :',(y_pred_gbr)[i],'y_test - y_pred_gbr :',list(y_test)[i]-y_pred_gbr[i])","3c46b201":"#Gradient Boosting Regressor model metrics\nmse = mean_squared_error (y_test, y_pred_gbr)\n\nrmse = np.sqrt(mse)\n\nprint('=======================================')\nprint (\"R2 Score :\" , r2_score(y_test,y_pred_gbr))\nprint('=======================================')\nprint (\"RMSE :\", rmse)\nprint('=======================================')\nprint (\"mse :\", mse)\n\nprint('=======================================')\n\nprint (\"training set score :\", gbr.score(x_train, y_train))\nprint (\"test set score :\", gbr.score(x_test,y_test))\nprint('=======================================')","77f1adb3":"Models_ = pd.DataFrame({'SCORS' : ['R2 Score','training set score','test set score'],\n           \"Regression MODEL\":[0.831698560459678,0.8980745243844303,0.831698560459678] ,\n           \"Lasso Regression\":[0.8322487822541007,0.8980627943155526,0.8322487822541007] ,\n           \"Random Forest\" : [0.869804116303287,0.979544155498982,0.869804116303287],\n           \"GradientBoosting \" : [0.8645686466019491,0.9688574770535183,0.8645686466019491]    })","373c85ce":"Models_","76c540be":"## Random Forest Regressor Model","6075bc50":"## Read Data","c38bc53f":"## Gradient Boosting Regressor","b772ba7c":"## Replace null values","b178b676":"## LassoRegression Model","7ebfea0f":"## Drop Columns","67cd1b45":"# Import Libraries","e08189a8":"## Data Preprossing\n* find null values\n* fill null values using fillna\n* Drop Columns With More Null values\n* Replace values","fdd1f4c9":"## LinearRegression Model"}}