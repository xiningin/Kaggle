{"cell_type":{"1c66ed3f":"code","5c50ba87":"code","3b771136":"code","845e37b1":"code","cc9c4fc8":"code","258c42db":"code","7fd9f819":"code","7abcf642":"code","fedf403c":"code","7ddb037a":"code","072cc4ab":"code","8998b28a":"code","69c29c4c":"markdown","8d301869":"markdown","608d65eb":"markdown","fd601dbf":"markdown","8fa54192":"markdown","8109f7ba":"markdown","ff851a08":"markdown","b0230e7f":"markdown"},"source":{"1c66ed3f":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport gc\nimport itertools\nimport numpy as np\nimport pandas as pd\nimport lightgbm as lgb\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import StratifiedKFold","5c50ba87":"train_df = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/train.csv\")\ntrain_df.set_index('id', inplace=True)\nprint(f\"train_df: {train_df.shape}\")\ntrain_df.head()","3b771136":"test_df = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/test.csv\")\ntest_df.set_index('id', inplace=True)\nprint(f\"test_df: {test_df.shape}\")\ntest_df.head()","845e37b1":"cat_cols = [col for col in test_df.columns if train_df[col].nunique() < 5]\nnum_cols = [col for col in test_df.columns if col not in cat_cols]\nprint(f\"cat_cols: {len(cat_cols)} \\nnum_cols: {len(num_cols)}\")","cc9c4fc8":"train_df[num_cols] = train_df[num_cols].astype('float32')\ntrain_df[cat_cols] = train_df[cat_cols].astype('uint8')\n\ntest_df[num_cols] = test_df[num_cols].astype('float32')\ntest_df[cat_cols] = test_df[cat_cols].astype('uint8')\n\nprint(f\"train_df: {train_df.shape} \\ntest_df: {test_df.shape}\")\n\nfeatures = test_df.columns.tolist()\nprint(f\"Num features: {len(features)}\")\n\ncat_cols_indices = [train_df.columns.get_loc(col) for col in cat_cols]\nprint(f\"cat_cols_indices: {cat_cols_indices}\")","258c42db":"def plot_confusion_matrix(cm, classes):\n\n    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\n    plt.title('Confusion matrix', fontweight='bold', pad=15)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=0)\n    plt.yticks(tick_marks, classes)\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], 'd'),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label', fontweight='bold')\n    plt.xlabel('Predicted label', fontweight='bold')\n    plt.tight_layout()","7fd9f819":"FOLD = 10\nSEEDS = [791, 225, 508]\n\nparams = {\n    'objective' : 'binary',\n    'metric' : 'auc',\n    'importance_type': 'gain',\n    'n_estimators' : 10000,\n    'colsample_bytree' : 0.196,\n    'subsample' : 0.5828,\n    'subsample_freq' : 1, \n    'reg_alpha' : 0.045,\n    'reg_lambda' : 0.0117,\n    'min_child_weight' : 16.843,\n    'min_child_samples' : 412,\n    'num_leaves': 546, \n    'max_depth': 5, \n    'cat_smooth': 36.40200359200525, \n    'cat_l2': 12.979520035205597,\n    'verbosity' : 0,\n    'force_col_wise' : True,\n    'random_state' : 2021\n}","7abcf642":"counter = 0\noof_score = 0\ny_pred_final_lgb = np.zeros((test_df.shape[0], 1))\ny_pred_meta_lgb = np.zeros((train_df.shape[0], 1))\n\n\nfor sidx, seed in enumerate(SEEDS):\n    seed_score = 0\n    \n    kfold = StratifiedKFold(n_splits=FOLD, shuffle=True, random_state=seed)\n\n    for idx, (train, val) in enumerate(kfold.split(train_df[features], train_df['target'])):\n        counter += 1\n\n        train_x, train_y = train_df[features].iloc[train], train_df['target'].iloc[train]\n        val_x, val_y = train_df[features].iloc[val], train_df['target'].iloc[val]\n\n        lgtrain = lgb.Dataset(train_x, label=train_y.ravel(), free_raw_data=False)\n        lgvalidation = lgb.Dataset(val_x, label=val_y.ravel(), free_raw_data=False)\n\n        params['learning_rate'] = 0.03\n\n        model = lgb.train(params, lgtrain, valid_sets=[lgtrain, lgvalidation], \n                          #categorical_feature=cat_cols_indices,\n                          early_stopping_rounds=200, verbose_eval=500)\n\n        params['learning_rate'] = 0.01\n\n        model = lgb.train(params, lgtrain, valid_sets=[lgtrain, lgvalidation], \n                          #categorical_feature=cat_cols_indices, \n                          init_model=model, early_stopping_rounds=100, \n                          verbose_eval=500)\n\n        y_pred = model.predict(val_x, num_iteration=model.best_iteration)\n        y_pred_meta_lgb[val] += np.array([y_pred]).T\n        y_pred_final_lgb += np.array([model.predict(test_df, num_iteration=model.best_iteration)]).T\n        \n        score = roc_auc_score(val_y, y_pred)\n        oof_score += score\n        seed_score += score\n        print(\"\\nLightGBM | Seed-{} | Fold-{} | OOF Score: {}\\n\".format(seed, idx, score))\n        \n        del model, y_pred\n        del train_x, train_y\n        del val_x, val_y\n        gc.collect()\n    \n    print(\"\\nLightGBM | Seed: {} | Aggregate OOF Score: {}\\n\\n\".format(seed, (seed_score \/ FOLD)))\n\n\ny_pred_meta_lgb = y_pred_meta_lgb \/ float(len(SEEDS))\ny_pred_final_lgb = y_pred_final_lgb \/ float(counter)\noof_score \/= float(counter)\nprint(\"LightGBM | Aggregate OOF Score: {}\".format(oof_score))","fedf403c":"y_pred_meta = np.mean(y_pred_meta_lgb, axis=1)\ny_pred = (y_pred_meta>0.5).astype(int)\nprint(classification_report(train_df['target'], y_pred))","7ddb037a":"cnf_matrix = confusion_matrix(train_df['target'], y_pred, labels=[0, 1])\nnp.set_printoptions(precision=2)\nplt.figure(figsize=(12, 5))\nplot_confusion_matrix(cnf_matrix, classes=[0, 1])","072cc4ab":"np.savez_compressed('.\/TPS_1021_LGB_Meta_Features.npz',\n                    y_pred_meta_lgb=y_pred_meta_lgb,\n                    y_pred_final_lgb=y_pred_final_lgb)","8998b28a":"submit_df = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv\")\nsubmit_df['target'] = y_pred_final_lgb.ravel()\nsubmit_df.to_csv(\"LGB_Submission.csv\", index=False)\nsubmit_df.head()","69c29c4c":"## Feature Engineering","8d301869":"## Import libraries","608d65eb":"## Save meta features","fd601dbf":"## Load source datasets","8fa54192":"## Model Hyperparameters","8109f7ba":"## Create submission files","ff851a08":"## Helper Function","b0230e7f":"## LightGBM Model"}}