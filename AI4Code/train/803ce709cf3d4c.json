{"cell_type":{"b0cc5b8f":"code","a3458812":"code","bc54e433":"code","67df1dea":"code","179d914e":"code","6ad9fc8b":"code","769c1b34":"code","b3fe78cc":"code","181b0eb3":"code","50fa2a96":"code","d495bd60":"code","54f92e38":"code","cf7c2989":"code","270d335a":"code","668d2856":"code","e5e3743d":"code","16aab11b":"code","59fb71fe":"code","bb00ce49":"code","eb3e33c9":"code","794bcea3":"code","02ad2905":"code","c5aee6fd":"code","c61fa005":"code","76599121":"code","3584f8f1":"code","644565f3":"code","e3d043fc":"code","5fda0635":"code","1e05733a":"code","4997e229":"code","8c01b315":"code","8328017b":"code","16c8ef2e":"code","78297dc5":"code","ae9d28c8":"code","a4f9aa66":"code","f67fc085":"code","1056faea":"code","af6dbed7":"code","2bcc7f7e":"code","3889854c":"code","8d60c1a0":"code","1e12b616":"code","cab1dc93":"code","07a5e3fb":"code","00ad44b5":"code","eb94ac9d":"code","84e9766c":"code","8ab6bbd9":"code","65beba00":"code","11c42cd9":"code","3207be11":"code","2d067de5":"code","3d476091":"code","2dc1d0e7":"code","13c9c6d4":"code","f42f3137":"code","27e375d2":"code","26ff1033":"code","abb22cb1":"markdown","5774cfe5":"markdown","55f6f2c4":"markdown","5ed38d75":"markdown","12ab32f2":"markdown","e498c1f6":"markdown","2e68bc59":"markdown","44b79544":"markdown","b9f97d7a":"markdown","1cd74b2b":"markdown","430a6dc7":"markdown","fb5d3924":"markdown","6d0c795d":"markdown","0b625eab":"markdown","5622e717":"markdown","dffa4c46":"markdown","26cad9a3":"markdown","20021bc6":"markdown","9cd68f8a":"markdown","a22cc0a8":"markdown","51e72a47":"markdown","83ea3a4e":"markdown","314c43b1":"markdown","43f572c8":"markdown","c576ef59":"markdown","4069d8ca":"markdown","c7bd65ae":"markdown","0355f360":"markdown","1497bf00":"markdown","54d3144c":"markdown","d6463eb0":"markdown","a1e31f81":"markdown","248c51c5":"markdown","28a6c04b":"markdown","0b298319":"markdown","95b06625":"markdown","032dfecf":"markdown","11a5294c":"markdown","97f06cfd":"markdown","6f051280":"markdown","796ed506":"markdown","7634316a":"markdown","7d6b259a":"markdown","d0a2f9fd":"markdown","5d054072":"markdown","2180abed":"markdown","0c141118":"markdown","67e6c756":"markdown","3ed2370a":"markdown","78f9cb41":"markdown"},"source":{"b0cc5b8f":"import numpy as np  \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\npd.options.display.max_rows = 100\n\nimport warnings\nwarnings.filterwarnings('ignore')","a3458812":"# set input path and load dataset\ninput_path = '..\/input\/kaggle-survey-2021\/'\nsurvey = pd.read_csv(input_path + \"kaggle_survey_2021_responses.csv\")\nsurvey","bc54e433":"survey.info() ","67df1dea":"survey.describe()","179d914e":"selected_cols = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\ntemp = survey[selected_cols]\ntemp","6ad9fc8b":"# to find my country, South Korea\ntemp.Q3.unique()","769c1b34":"# South Korea\nkorean = temp.loc[temp.Q3 == \"South Korea\", :]\nkorean","b3fe78cc":"sns.countplot(data=korean, x=\"Q1\")","181b0eb3":"sns.countplot(data=korean, x=\"Q2\")","50fa2a96":"plt.figure(figsize=(8, 12))\nsns.countplot(data=korean, y=\"Q4\")","d495bd60":"X = korean.Q1.value_counts().sort_index()\nsns.countplot(data=korean, x=\"Q1\", order=X.index)","54f92e38":"X = korean.Q1.value_counts().sort_values(ascending=False)\nsns.countplot(data=korean, x=\"Q1\", order=X.index)","cf7c2989":"X = korean.Q1.value_counts().sort_values(ascending=False)\nsns.countplot(data=korean, x=\"Q1\", order=X.index, palette=\"autumn\")","270d335a":"X = korean.Q2.value_counts().sort_values()[::-1]\nsns.countplot(data=korean, x=\"Q2\", order=X.index)","668d2856":"X = korean.Q2.value_counts(normalize=True).sort_values()[::-1]\nsns.barplot(x=X.index, y=X.values, palette=\"Set2\")","e5e3743d":"plt.figure(figsize=(6, 4))\nX = korean.Q4.value_counts().sort_values()[::-1]\nsns.countplot(data=korean, y=\"Q4\", order=X.index)","16aab11b":"plt.figure(figsize=(6, 4))\nX = korean.Q4.value_counts(normalize=True).sort_values()[::-1]\nsns.barplot(x=X.values, y=X.index, palette=\"Set2\")","59fb71fe":"# delete first row (= delete questions)\ncountries = temp.iloc[1:, :]\ncountries","bb00ce49":"pt = pd.pivot_table(data=countries.loc[:, [\"Q1\", \"Q3\"]], index=[\"Q3\"], columns=\"Q1\", aggfunc={\"Q1\":\"count\"})\npt","eb3e33c9":"pt = pd.pivot_table(data=countries.loc[:, [\"Q1\", \"Q3\"]], index=[\"Q3\"], columns=\"Q1\", aggfunc={\"Q1\":\"count\"}, fill_value=0)\npt","794bcea3":"pt = pd.pivot_table(data=countries.loc[:, [\"Q2\", \"Q3\"]], index=[\"Q3\"], columns=\"Q2\", aggfunc={\"Q2\":\"count\"})\npt","02ad2905":"american = pt.loc[\"United States of America\"]\ncanada = pt.loc[\"Canada\"]\ndisplay(american)\ndisplay(canada)","c5aee6fd":"plt.figure(figsize=(6, 4))\nplt.title(\"American\")\namerican.Q2.plot(kind=\"barh\")\nplt.show()\nplt.figure(figsize=(6, 4))\nplt.title(\"Canada\")\ncanada.Q2.plot(kind=\"barh\")\nplt.show()","c61fa005":"# grab columns with Q7s\nselected_cols = [\"Q1\", \"Q2\", \"Q3\", \"Q8\"]\nQ7s = [col for col in survey.columns if col.startswith(\"Q7\")]\nselected_cols = selected_cols + Q7s\ntemp2 = survey[selected_cols]\ntemp2","76599121":"Q7_list = []\nQ7_list.append(temp2[Q7s[0]].loc[0]) # insert Question\nfor _, row in temp2[Q7s][1:].iterrows():\n    #print(row)\n    temp_list = row[~row.isna()]\n    #print(temp_list.values)\n    Q7_list.append(temp_list.values)\nprint(Q7_list[:3])","3584f8f1":"temp2.drop(Q7s, axis=1, inplace=True)\ntemp2[\"Q7\"] = Q7_list\ntemp2","644565f3":"temp3 = temp2.dropna()\ntemp_len = temp3.Q7.apply(lambda x: len(x))\ntemp3[\"Q7_len\"] = temp_len\ntemp3 = temp3.loc[temp3.Q7_len != 0, :]\ntemp3.drop(\"Q7_len\", axis=1, inplace=True)\ntemp3","e3d043fc":"korean = temp3.loc[temp3.Q3 == \"South Korea\"]\nkorean","5fda0635":"from collections import Counter\nQ7_data = []\nfor row in korean.Q7:\n    Q7_data = Q7_data + list(row)\ncounter = Counter(Q7_data)\ndf = pd.DataFrame({\"Languages\":counter.keys(), \"Count\":counter.values()}).set_index(\"Languages\")\ndf.plot(kind=\"barh\")","1e05733a":"X = df.sort_values(by=\"Count\", ascending=False)\nplt.figure(figsize=(12, 6))\nsns.barplot(x=X.index, y=X.Count, palette=\"Set2\")","4997e229":"plt.figure(figsize=(12, 6))\nsns.countplot(data=korean, x=\"Q8\")","8c01b315":"X = korean.Q8.value_counts(normalize=True).sort_values()\nplt.figure(figsize=(12, 6))\nsns.barplot(x=X.index, y=X.values, palette=\"Set2\")","8328017b":"# drop the first row\ngenders = temp3.iloc[1:, :]\ngenders","16c8ef2e":"pt = pd.pivot_table(data=genders.loc[:, [\"Q2\", \"Q8\"]], index=[\"Q2\"], columns=\"Q8\", aggfunc={\"Q8\":\"count\"})\npt","78297dc5":"# fill NaN values to 0\npt = pd.pivot_table(data=genders.loc[:, [\"Q2\", \"Q8\"]], index=[\"Q2\"], columns=\"Q8\", aggfunc={\"Q8\":\"count\"}, fill_value=0)\npt","ae9d28c8":"pt = pd.pivot_table(data=genders.loc[:, [\"Q3\", \"Q8\"]], index=[\"Q3\"], columns=\"Q8\", aggfunc={\"Q8\":\"count\"}, fill_value=0)\npt","a4f9aa66":"france = pt.loc[\"France\"]\ngermany = pt.loc[\"Germany\"]\ndisplay(france)\ndisplay(germany)","f67fc085":"plt.figure(figsize=(6, 4))\nplt.title(\"France\")\nfrance.Q8.plot(kind=\"barh\")\nplt.show()\nplt.figure(figsize=(6, 4))\nplt.title(\"Germany\")\ngermany.Q8.plot(kind=\"barh\")\nplt.show()","1056faea":"plt.figure(figsize=(10, 6))\nplt.title(\"France\")\ndf = france.Q8.sort_values()[::-1]\nsns.barplot(x=df.index, y=df.values)\nplt.figure(figsize=(10, 6))\nplt.title(\"Germany\")\ndf2 = germany.Q8.sort_values()[::-1]\nsns.barplot(x=df2.index, y=df2.values)","af6dbed7":"selected_cols = [\"Q1\", \"Q2\", \"Q3\"]\nQ17s = [col for col in survey.columns if col.startswith(\"Q17\")]\nQ18s = [col for col in survey.columns if col.startswith(\"Q18\")]\nQ19s = [col for col in survey.columns if col.startswith(\"Q19\")]\n\nselected_cols = selected_cols + Q17s + Q18s + Q19s\ntemp4 = survey[selected_cols]\ntemp4","2bcc7f7e":"Q17_list = []\nQ17_list.append(temp4[Q17s[0]].loc[0])\nfor _, row in temp4[Q17s][1:].iterrows():\n    #print(row)\n    temp_list = row[~row.isna()]\n    #print(temp_list.values)\n    Q17_list.append(temp_list.values)\nprint(Q17_list[:3])","3889854c":"Q18_list = []\nQ18_list.append(temp4[Q18s[0]].loc[0])\nfor _, row in temp4[Q18s][1:].iterrows():\n    #print(row)\n    temp_list = row[~row.isna()]\n    #print(temp_list.values)\n    Q18_list.append(temp_list.values)\nprint(Q18_list[:3])","8d60c1a0":"Q19_list = []\nQ19_list.append(temp4[Q19s[0]].loc[0])\nfor _, row in temp4[Q19s][1:].iterrows():\n    #print(row)\n    temp_list = row[~row.isna()]\n    #print(temp_list.values)\n    Q19_list.append(temp_list.values)\nprint(Q19_list[:3])","1e12b616":"temp4.drop(Q17s, axis=1, inplace=True)\ntemp4[\"Q17\"] = Q17_list\ntemp4","cab1dc93":"temp4.drop(Q18s, axis=1, inplace=True)\ntemp4[\"Q18\"] = Q18_list\ntemp4","07a5e3fb":"temp4.drop(Q19s, axis=1, inplace=True)\ntemp4[\"Q19\"] = Q19_list\ntemp4","00ad44b5":"temp5 = temp4.dropna()\ntemp_len = temp4.Q17.apply(lambda x: len(x))\ntemp_len2 = temp4.Q18.apply(lambda x: len(x))\ntemp_len3 = temp4.Q19.apply(lambda x: len(x))\ntemp5[\"Q17_len\"] = temp_len\ntemp5[\"Q18_len\"] = temp_len2\ntemp5[\"Q19_len\"] = temp_len3\ntemp5 = temp5.loc[temp5.Q17_len != 0, :]\ntemp5 = temp5.loc[temp5.Q18_len != 0, :]\ntemp5 = temp5.loc[temp5.Q19_len != 0, :]\ntemp5.drop(\"Q17_len\", axis=1, inplace=True)\ntemp5.drop(\"Q18_len\", axis=1, inplace=True)\ntemp5.drop(\"Q19_len\", axis=1, inplace=True)\ntemp5","eb94ac9d":"korean = temp5.loc[temp5.Q3 == \"South Korea\"]\nkorean","84e9766c":"from collections import Counter\nQ17_data = []\nfor row in korean.Q17:\n    Q17_data = Q17_data + list(row)\ncounter = Counter(Q17_data)\ndf = pd.DataFrame({\"Methods\":counter.keys(), \"Count\":counter.values()}).set_index(\"Methods\")\ndf.plot(kind=\"barh\")","8ab6bbd9":"X = df.sort_values(by=\"Count\", ascending=False)\nplt.figure(figsize=(6, 4))\nsns.barplot(y=X.index, x=X.Count, palette=\"Set2\")","65beba00":"from collections import Counter\nQ18_data = []\nfor row in korean.Q18:\n    Q18_data = Q18_data + list(row)\ncounter = Counter(Q18_data)\ndf = pd.DataFrame({\"Methods\":counter.keys(), \"Count\":counter.values()}).set_index(\"Methods\")\ndf.plot(kind=\"barh\")","11c42cd9":"X = df \/ df.Count.sum()\nX = X.sort_values(by=\"Count\", ascending=True)\nplt.figure(figsize=(6, 4))\nsns.barplot(y=X.index, x=X.Count, palette=\"Set2\")","3207be11":"from collections import Counter\nQ19_data = []\nfor row in korean.Q19:\n    Q19_data = Q19_data + list(row)\ncounter = Counter(Q19_data)\ndf = pd.DataFrame({\"Methods\":counter.keys(), \"Count\":counter.values()}).set_index(\"Methods\")\ndf.plot(kind=\"barh\")","2d067de5":"X = df.sort_values(by=\"Count\", ascending=False)\nplt.figure(figsize=(6, 4))\nsns.barplot(y=X.index, x=X.Count, palette=\"Spectral\")","3d476091":"from collections import Counter\nQ17_data = []\nfor row in temp5[1:].Q17:\n    Q17_data = Q17_data + list(row)\ncounter = Counter(Q17_data)\ndf = pd.DataFrame({\"Methods\":counter.keys(), \"Count\":counter.values()}).set_index(\"Methods\")\ndf.plot(kind=\"barh\")","2dc1d0e7":"X = df \/ df.Count.sum()\nX = X.sort_values(by=\"Count\", ascending=False)\nplt.figure(figsize=(6, 4))\nsns.barplot(y=X.index, x=X.Count, palette=\"Set3\")","13c9c6d4":"from collections import Counter\nQ18_data = []\nfor row in temp5[1:].Q18:\n    Q18_data = Q18_data + list(row)\ncounter = Counter(Q18_data)\ndf = pd.DataFrame({\"Methods\":counter.keys(), \"Count\":counter.values()}).set_index(\"Methods\")\ndf.plot(kind=\"barh\")","f42f3137":"X = df.sort_values(by=\"Count\", ascending=False)\nplt.figure(figsize=(6, 4))\nsns.barplot(y=X.index, x=X.Count, palette=\"winter\")","27e375d2":"from collections import Counter\nQ18_data = []\nfor row in temp5[1:].Q19:\n    Q19_data = Q19_data+ list(row)\ncounter = Counter(Q19_data)\ndf = pd.DataFrame({\"Methods\":counter.keys(), \"Count\":counter.values()}).set_index(\"Methods\")\ndf.plot(kind=\"barh\")","26ff1033":"X = df.sort_values(by=\"Count\", ascending=True)\nplt.figure(figsize=(6, 4))\nsns.barplot(y=X.index, x=X.Count, palette=\"Set2\")","abb22cb1":"### Checkpoints\n\n- This time, we select the columns related to the programming language that users frequently use.\n\n- What columns we need?\n\n- How can we handle starts with Q7~ columns?","5774cfe5":"- Show Age info","55f6f2c4":"## Step 2. Pick rows to use","5ed38d75":"- Same in Q19s","12ab32f2":"#### Now, in CV","e498c1f6":"### Quick intro\n \n- The first row of data is what each question was about.\n\n- If you are interested in how the data was collected and how to use it, you can download the data set and use it in the **supplementary_data** folder.\n\nSource : https:\/\/www.kaggle.com\/c\/kaggle-survey-2021\/data","2e68bc59":"#### Let's choose some countries.. France and Germany!","44b79544":"#### Let's dive into Gender","b9f97d7a":"#### Combine Q7~ columns into new \"Q7\" column","1cd74b2b":"- Select and Sort into countplot!","430a6dc7":"#### Now, in NLP","fb5d3924":"## Summary\n\n- We practice a lot of aspect of this wonderful dataset!\n\n\n- If you feel interested points, please upvote and share your own code!\n\n\n**Thanks a lot! Have a wonderful day**","6d0c795d":"#### Replace Q17s, Q18s, Q19s that we made right before.","0b625eab":"- Set NaN to 0","5622e717":"#### Combine Q17~ columns into single one","dffa4c46":"- Show gender info","26cad9a3":"## Step3. Let's upgrade out plots!","20021bc6":"- Now, we can choose my friends, Korean!","9cd68f8a":"- Now, we plot education status countplot","a22cc0a8":"### <b>Points<\/b>\n- Understanding EDA process\n\n- Using libraries numpy, pandas, matplotlib, seaborn\n\n- Analyze Kagglers","51e72a47":"### Now, we look at the programming language statistics by gender through the pivot table for the entire data, not for Koreans.","83ea3a4e":"- In order to find information about educational background, let's grab the Q1, Q2, Q3, Q4 columns.","314c43b1":"- Sort and print the plot in age column with respect to order of age","43f572c8":"- Sort and print the age column in order of frequency","c576ef59":"- Change color palette to \"autumn\"","4069d8ca":"- Change count into ratio","c7bd65ae":"#### NLP !!","0355f360":"- There is some missings. Delete them!","1497bf00":"#### Plot their favorite ML methods","54d3144c":"### Now, we look at the educational statistics by country through the pivot table for the entire data, not for Koreans.","d6463eb0":"#### Let's pick my Koreans!","a1e31f81":"- Sort and print gender columns in order of frequency","248c51c5":"## Kaggle Survey?\n- There is a Data Science Community called Kaggle. Every year, Kaggle conducts a survey of Kaggle users. The results of this survey are a good source of information about how the world's best Data Scientists are working and what they are studying.\n\n- The dataset we are using this time uses the \"2021 Kaggle Machine Learning Survey\" dataset, which was released a few days ago, to take a look at Kagglers working in South Korea (and something others).","28a6c04b":"#### Drop missings","0b298319":"- Show educational status","95b06625":"#### Change the two graphs above, that outputs in descending order of frequency, and change the color palette to winter.","032dfecf":"- Same thing in Q18s","11a5294c":"- At this time, choose Q8 column","97f06cfd":"### We just look some education info. How about others?","6f051280":"Let's grab the columns we need","796ed506":"### Checkpoints\n\n- This time, we select the columns related to the ML methods that users frequently use.\n\n- What columns we need?\n\n- How can we handle starts with Q17~ columns, Q18~ columns and Q19~ columns?","7634316a":"- Change count to ratio and set color palette as \"Set2\"","7d6b259a":"- Change count into ratio, and visualize it in ascending order.","d0a2f9fd":"## Step 1. Load Datasets","5d054072":"#### To combine list of languages, we create another dataframe.","2180abed":"#### CV!!","0c141118":"- Pick USA and Canada info","67e6c756":"#### ML methods","3ed2370a":"#### Let's apply in entire dataset!","78f9cb41":"#### How about Q8?"}}