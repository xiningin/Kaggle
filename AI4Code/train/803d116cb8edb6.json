{"cell_type":{"85afbaac":"code","f81f2322":"code","14e536bb":"code","6a86abb7":"code","e48c2956":"code","9e92dd4f":"code","db89b0e1":"markdown","6150cf87":"markdown"},"source":{"85afbaac":"import numpy as np\nimport pandas as pd","f81f2322":"# Load BTC\/USD minute candles\ndf = pd.read_csv('\/kaggle\/input\/392-crypto-currency-pairs-at-minute-resolution\/cryptominuteresolution\/btcusd.csv')\ndf['time'] = pd.to_datetime(df['time'], unit = 'ms')\n# Use data from 2015 until the end of dataset, that is Sep 2019\ndf = df[\n    (df.time > pd.Timestamp(year = 2015, month = 1, day = 1)) &\n    (df.time < pd.Timestamp(year = 2019, month = 1, day = 1))\n].reset_index(drop = True)\n# Drop the columns we don't use\ndf.drop(columns = ['high', 'low', 'volume'], inplace = True)\ndf","14e536bb":"# Trading parameters; windows in minutes\nwin1 = 30 * 60\nwin2 = 1 * 60\n# 0.01 = 1% price shift within the window\nthreshold1 = 0.009 \nthreshold2 = 0.005\n\n# win1 = 300\n# win2 = 3600\n# threshold1 = 0.01\n# threshold2 = -0.005\n\n# Features & Trading logic\ndf['ma1'] = df['close'].rolling(win1).mean()\ndf['ma2'] = df['close'].rolling(win2).mean()\ndf['position'] = np.nan\n# When price is above long-term MA and under short-term MA, BUY. \n# And vice versa. Keep +-1 positions, never close.\ndf.loc[df[\n    (df.close > df.ma1 + threshold1 * df.close) & \n    (df.close < df.ma2 - threshold2 * df.close)\n].index,'position'] = 1\ndf.loc[df[\n    (df.close < df.ma1 - threshold1 * df.close) & \n    (df.close > df.ma2 + threshold2 * df.close)\n].index,'position'] = -1\n\n# Backtest\nfees = 0.0010 # exchange transaction fee\ndf.loc[0, 'position'] = 0\ndf['position'].fillna(method = 'ffill', inplace = True)\ndf['nominal'] = - df['position'].diff() * df['close']\ndf['fees'] = df.position.diff().abs() * fees * df['close']\ndf['nominal'] -= df['fees']\ndf['earns'] = df['nominal'].cumsum() + df['position'] * df['close']\nearns = df.earns.iloc[-1]\n\nour_trades = df[df.position.diff() != 0].copy()\nour_trades['duration'] = our_trades.time.diff()\nour_trades['trade_earns'] = our_trades.earns.diff()\nprint(f'Earns = ${earns:.0f}')\nprint(f'Trades = {len(our_trades)}')\nprint(f'Profit per trade = ${earns \/ len(our_trades):.1f}')\ndf[['earns','close']].plot()","6a86abb7":"# Generate random walk data\nnp.random.seed(9)\ndf['noise'] = (np.random.rand(len(df)) - 0.5)\ndf['close'] = 1000 + df['noise'].cumsum()\ndf['open'] = np.nan\ndf","e48c2956":"best_earns = 0.0\nbest_parameters = None\n\nfor win1 in [30,60,300,1800,3600,7200]:\n   for win2 in [30,60,300,1800,3600,7200]:\n       for threshold1 in [0.001, 0.005, 0.01, 0.02]:\n            for threshold2 in [0.001, 0.005, -0.001, -0.005]:\n                # Features & Trading logic\n                df['ma1'] = df['close'].rolling(win1).mean()\n                df['ma2'] = df['close'].rolling(win2).mean()\n                df['position'] = np.nan\n                # When price is above long-term MA and under short-term MA, BUY. And vice versa. Keep +-1 positions, never close.\n                df.loc[df[(df.close > df.ma1 + threshold1 * df.close) & (df.close < df.ma2 - threshold2 * df.close)].index,'position'] = 1\n                df.loc[df[(df.close < df.ma1 - threshold1 * df.close) & (df.close > df.ma2 + threshold2 * df.close)].index,'position'] = -1\n\n                # Backtest\n                fees = 0.0010 # exchange transaction fee\n                df.loc[0, 'position'] = 0\n                df['position'].fillna(method = 'ffill', inplace = True)\n                df['nominal'] = - df['position'].diff() * df['close']\n                df['fees'] = df.position.diff().abs() * fees * df['close']\n                df['nominal'] -= df['fees']\n                df['earns'] = df['nominal'].cumsum() + df['position'] * df['close']\n                earns = df.earns.iloc[-1]\n\n                if earns <= 0 or earns == np.nan: \n                    continue\n                if earns > best_earns:\n                    best_earns = earns\n                    best_parameters = (win1, win2, threshold1, threshold2)\n                print(f'{win1:5d} {win2:5d} {threshold1:.5f} {threshold2:.5f} {earns:+7.0f}')\n                \nprint('Best earns', best_earns)\nprint('Best parameters', best_parameters)","9e92dd4f":"# our_trades[our_trades.duration > pd.Timedelta(days = 10)]\n# our_trades[our_trades.trade_earns.abs() > 20]","db89b0e1":"## Optimization & overfitting example","6150cf87":"# Simple BTC\/USD trend following strategy"}}