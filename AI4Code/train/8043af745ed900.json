{"cell_type":{"5d982a8e":"code","373219f5":"code","b1a39890":"code","d592e3f5":"code","a426ffe2":"code","161d8337":"code","2e42c78d":"code","300d288e":"code","a0f3c9f9":"code","16ecbb39":"code","ff8ea905":"code","d15252dc":"code","be268e33":"code","4c0a89ac":"code","5c56b2f7":"code","9170fd38":"code","b00cbe3a":"code","b955f645":"code","72ab3e3c":"code","10dd917a":"code","45f2b47d":"code","6fadb149":"code","805a299c":"code","dea1590b":"code","8cae23b2":"code","aaa42f5f":"code","9ba10546":"code","619c3794":"code","29ad78e0":"code","4946ab0f":"code","7eea3f1c":"code","f8a1d00d":"code","6c70de1f":"code","07d938bb":"code","b4a1f4f5":"code","940beb05":"code","a9670b40":"code","ece1471e":"code","1b6195ea":"code","03f6be6f":"code","559d8619":"code","762815fd":"code","c09bc94f":"code","856febeb":"code","91b0462d":"code","f0336b14":"code","4d713840":"code","e20b93ef":"code","c6f06d2f":"code","75350725":"code","70400269":"code","868a4564":"code","8f64fc0a":"code","8a871511":"code","ed07f7ea":"code","e36ddda2":"code","2d329e44":"code","bb8cebc2":"code","437387b4":"code","0f5f1c54":"code","8f5906c3":"code","13e0a6a2":"code","d7af3d29":"code","13e455ce":"code","12d903e6":"code","eb9d882c":"code","00d175c2":"code","cbf8c7c2":"code","896b5736":"code","a9add10c":"code","fbd85ad3":"code","f611c877":"code","08d49ee7":"markdown","aa4eefa7":"markdown","1343613a":"markdown","496f1474":"markdown","29bb7a89":"markdown","10cf21eb":"markdown","4230be9f":"markdown","2d8ee3dc":"markdown","2227347f":"markdown","e6801c95":"markdown","89a68483":"markdown","c9eca86a":"markdown","e1aacb55":"markdown","021acd3e":"markdown","56ee7473":"markdown","7c697c30":"markdown","3510ad9e":"markdown","4245c934":"markdown","536960db":"markdown","fa16ec5f":"markdown","a2d07718":"markdown","d9a89f86":"markdown","c7bfcd49":"markdown","19933cb4":"markdown","72b21d27":"markdown","db6371f1":"markdown","7d7e2050":"markdown","398e388b":"markdown","457fa41d":"markdown","4976d209":"markdown","15c937b7":"markdown","f5903003":"markdown","dcfe75d6":"markdown","c3e011e4":"markdown","a23ad360":"markdown","fd667082":"markdown"},"source":{"5d982a8e":"#library imports\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport os\n%matplotlib inline","373219f5":"def ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn","b1a39890":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","d592e3f5":"df_train.head()","a426ffe2":"df_test.head()","161d8337":"df_train.shape, df_test.shape","2e42c78d":"train_Id = df_train['Id']\ntest_Id = df_test['Id']\n\ndf_train.drop('Id', axis=1, inplace=True)\ndf_test.drop('Id', axis=1, inplace=True)","300d288e":"df_train.shape, df_test.shape","a0f3c9f9":"df_train.corr()['SalePrice'].sort_values(ascending=False)","16ecbb39":"plt.figure(figsize=(8, 4), dpi=100)\nsns.scatterplot(data=df_train, x='OverallQual', y='SalePrice')\nplt.show()","ff8ea905":"plt.figure(figsize=(8, 4), dpi=100)\nsns.scatterplot(data=df_train, x='GrLivArea', y='SalePrice')\nplt.show()","d15252dc":"df_train = df_train.drop(df_train[(df_train['GrLivArea'] > 4000) & (df_train['SalePrice'] < 300000)].index)","be268e33":"plt.figure(figsize=(8, 4), dpi=100)\nsns.scatterplot(data=df_train, x='GrLivArea', y='SalePrice')\nplt.show()","4c0a89ac":"from scipy import stats\nfrom scipy.stats import norm, skew","5c56b2f7":"df_train['SalePrice'].describe()","9170fd38":"plt.figure(figsize=(8, 6))\nsns.distplot(df_train['SalePrice'], fit=norm)\nplt.show()","b00cbe3a":"plt.figure(figsize=(8, 6))\nstats.probplot(df_train['SalePrice'], plot=plt)\nplt.show()","b955f645":"df_train['SalePrice'] = np.log1p(df_train['SalePrice'])","72ab3e3c":"plt.figure(figsize=(8, 6))\nsns.distplot(df_train['SalePrice'], fit=norm)\nplt.show()","10dd917a":"plt.figure(figsize=(8, 6))\nstats.probplot(df_train['SalePrice'], plot=plt)\nplt.show()","45f2b47d":"n_train = df_train.shape[0]\nn_test = df_test.shape[0]\ny_train = df_train.SalePrice.values\nall_data = pd.concat((df_train, df_test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)","6fadb149":"all_data.shape","805a299c":"percent_missing = (all_data.isnull().sum() \/ len(all_data)) * 100\npercent_missing = percent_missing.drop(percent_missing[percent_missing == 0].index).sort_values(ascending=False)\ndf_percent_missing = pd.DataFrame({'Missing Percentage': percent_missing})","dea1590b":"df_percent_missing","8cae23b2":"plt.figure(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=df_percent_missing.index, y=df_percent_missing['Missing Percentage'])\nplt.xlabel('Features', fontsize=12)\nplt.xlabel('Missing Percentage', fontsize=12)","aaa42f5f":"missing_40 = percent_missing[percent_missing > 40].index\nmissing_40","9ba10546":"for i in missing_40:\n    all_data[i] = all_data[i].fillna('None')","619c3794":"all_data['LotFrontage'] = all_data.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))","29ad78e0":"for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[col] = all_data[col].fillna('None')","4946ab0f":"for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)","7eea3f1c":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)","f8a1d00d":"for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')","6c70de1f":"all_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna('None')\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)","07d938bb":"all_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])","b4a1f4f5":"all_data = all_data.drop(['Utilities'], axis=1)","940beb05":"all_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")","a9670b40":"for col in ('Electrical', 'KitchenQual', 'Exterior1st', 'Exterior2nd', 'SaleType'):\n    all_data[col] = all_data[col].fillna(all_data[col].mode()[0])","ece1471e":"all_data['MSSubClass'] = all_data['MSSubClass'].fillna('None')","1b6195ea":"percent_missing = (all_data.isnull().sum() \/ len(all_data)) * 100\npercent_missing = percent_missing.drop(percent_missing[percent_missing == 0].index).sort_values(ascending=False)\ndf_percent_missing = pd.DataFrame({'Missing Percentage': percent_missing})","03f6be6f":"df_percent_missing","559d8619":"all_data['MSSubClass'] = all_data['MSSubClass'].apply(str)","762815fd":"all_data['OverallCond'] = all_data['OverallCond'].astype(str)","c09bc94f":"all_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","856febeb":"from sklearn.preprocessing import LabelEncoder","91b0462d":"cols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', 'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', 'BsmtFinType2',\n        'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope', 'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')","f0336b14":"for col in cols:\n    encoder = LabelEncoder()\n    encoder.fit(list(all_data[col].values))\n    all_data[col] = encoder.transform(list(all_data[col].values))","4d713840":"all_data.shape","e20b93ef":"all_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']","c6f06d2f":"num_feat = all_data.select_dtypes(exclude='object').columns\nnum_feat","75350725":"skewed_feat = all_data[num_feat].apply(lambda x: skew(x)).sort_values(ascending=False)\nskewed_feat = pd.DataFrame({'Skew': skewed_feat})\nskewed_feat.head()","70400269":"skewed_feat = skewed_feat[abs(skewed_feat['Skew']) > 0.75]\nskewed_feat","868a4564":"from scipy.special import boxcox1p\n\nlamb = 0.15\nfor i in skewed_feat.index:\n    all_data[i] = boxcox1p(all_data[i], lamb)","8f64fc0a":"all_data = pd.get_dummies(all_data)","8a871511":"all_data.shape","ed07f7ea":"df_train = all_data[:n_train]\ndf_test = all_data[n_train:]","e36ddda2":"df_train.head()","2d329e44":"from sklearn.model_selection import cross_val_score, train_test_split","bb8cebc2":"def rmse_cv(model):\n    rmse = np.sqrt(-cross_val_score(model, X_train, y_train, scoring='neg_mean_squared_error', cv=5))\n    return rmse","437387b4":"X_train = df_train.values","0f5f1c54":"from sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\nlin_reg.fit(X_train, y_train)","8f5906c3":"score = rmse_cv(lin_reg)","13e0a6a2":"score.mean(), score.std()","d7af3d29":"from sklearn.tree import DecisionTreeRegressor\n\ntree_reg = DecisionTreeRegressor(min_samples_leaf=20, random_state=42)\ntree_reg.fit(X_train, y_train)","13e455ce":"score = rmse_cv(tree_reg)\nscore.mean(), score.std()","12d903e6":"from sklearn.ensemble import RandomForestRegressor\n\nforest_reg = RandomForestRegressor(random_state=42)\nforest_reg.fit(X_train, y_train)","eb9d882c":"score = rmse_cv(forest_reg)\nscore.mean(), score.std()","00d175c2":"from sklearn.ensemble import GradientBoostingRegressor\n\ngbrt = GradientBoostingRegressor(n_estimators=200, learning_rate=0.1)\ngbrt.fit(X_train, y_train)","cbf8c7c2":"score = rmse_cv(gbrt)\nscore.mean(), score.std()","896b5736":"from xgboost import XGBRegressor\n\nxgboost = XGBRegressor(n_estimators=200, learning_rate=0.1)\nxgboost.fit(X_train, y_train)","a9add10c":"score = rmse_cv(xgboost)\nscore.mean(), score.std()","fbd85ad3":"X_test = df_test.values","f611c877":"y_predict = gbrt.predict(X_test)","08d49ee7":"## 4. Feature engineering","aa4eefa7":"We will add one more feature which is the total area of basement, first, and second floor:","1343613a":"For all the categorical basement-related features, NaN means that there is no basement:","496f1474":"The model with the best accuracy so far is the GradientBoostingRegressor. We can further exploring other models, as well as tweaking the hyperparameters of the existing model.","29bb7a89":"Let's try using a decision tree model:","10cf21eb":"For MasVnrArea and MasVnrType, NA most likely means no masonry veneer for these houses. We can fill 0 for the area and None for the type:","4230be9f":"We will concatenate the train and test data into a same DataFrame, so that we can deal with missing data more easily:","2d8ee3dc":"We will apply Box Cox transformation to the highly skewed features:","2227347f":"We will convert some numerical variables that are intrinsically categorical:","e6801c95":"For PoolQC, MiscFeature, Alley, Fence, and Fireplace, the data description states that NA means there is none of that particular feature. Hence we will fill the missing data with value of None:","89a68483":"For BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath, the missing values are likely zero for having no basement:","c9eca86a":"Let's use an ensemble of decision tree (Random Forest):","e1aacb55":"Lastly, we will convert categorical features to dummy variables:","021acd3e":"In order to visually see outliers, we will need a box plot or scatter plot. Therefore, we will explore the most correlated features with the target variable SalePrice and plot it out:","56ee7473":"## 2. Univariate study","7c697c30":"The target variable has a positive skew. Hence we will transform it to make it close to normal distribution by applying log transformation:","3510ad9e":"For LotFrontage, we will fill the missing data with the median of its neighborhood:","4245c934":"Let's use other ensemble methods:","536960db":"# Data Pre-processing","fa16ec5f":"For MSZoning, we will fill the missing data with the feature mode (most frequent data):","a2d07718":"Since almost all of the data for Utilities is the same ('AllPub'), we will drop the whole feature since it won't help with the predictions:","d9a89f86":"For Electrical, KitchenQual, Exterior1st, Exterior2nd, and SaleType, we will fill the missing data with the feature mode (most frequent data):","c7bfcd49":"Let's start with linear regression:","19933cb4":"We will save the 'Id' column and drop it from the original DataFrame, because it is unnecessary for prediction:","72b21d27":"For GarageType, GarageFinish, GarageQual and GarageCond, we will replace the missing data with None:","db6371f1":"For GarageYrBlt, GarageArea and GarageCars, we will replace the missing data with 0 since there is no garage to begin with:","7d7e2050":"We will encode ordinal features using Label Encoding:","398e388b":"## 1. Checking for outliers","457fa41d":"# Model Building and Evaluation","4976d209":"## 3. Dealing with missing data","15c937b7":"We will check the skew of the numerical features:","f5903003":"For Functional, the data description states that NA means typical:","dcfe75d6":"We can see the two bottom right points don't follow the general trend. We will treat them as outliers as drop them:","c3e011e4":"There are some points with very high quality but very low price.","a23ad360":"For MSSubClass, Na most likely means no building class. Hence we can replace missing values with None:","fd667082":"We will start imputing missing values:"}}