{"cell_type":{"e22a45ee":"code","954f9b11":"code","65f94f84":"code","6b24841d":"code","7e9a3a5b":"code","2ade0ce9":"code","88f5ca64":"code","a54a72fd":"code","a35bb838":"code","e985ccea":"code","e21ee624":"code","1f13e69d":"code","d1b69c67":"code","bf2c776d":"code","66bf50e6":"code","619c8d3b":"code","8d3e0b2c":"code","1930b04f":"code","adbeead6":"code","0b427566":"code","c27a5bf9":"code","982952d2":"code","998011cf":"code","b01b8668":"code","bd522841":"code","73822416":"code","72036008":"code","4f293aa1":"code","5bb6d843":"code","25e196bc":"code","0f5737ff":"code","c0fd2664":"code","207028e8":"code","48a5afb7":"code","1baf98b5":"code","7e4241a4":"code","ce6d9b8a":"code","bc75dc02":"code","9453d5dc":"code","03f15e89":"code","8049256a":"code","f5e7936e":"code","58e1420a":"code","79b08b60":"code","68392780":"code","39f4ab79":"code","3e5a3b48":"code","5c6bab61":"code","eff42d34":"code","07b92276":"code","2af8d4e8":"code","39a8680c":"code","66d18003":"code","ec3127c9":"code","3a7c7a44":"code","d79b1444":"code","589618b3":"code","eb619f1f":"code","8df7e1ad":"code","4071f2b9":"code","cdbd0495":"code","1af24cb9":"code","def9e91a":"code","707ae539":"code","c6e4f79d":"code","ed1ae357":"code","c4c12f56":"code","e87ad3aa":"code","d1c31923":"code","426c85fa":"code","1b568f21":"code","236a86f1":"code","934af714":"code","1fee1252":"code","c7eec711":"code","356899b9":"code","6021e1ca":"code","502e190a":"code","1fe0b154":"code","a0daab6d":"code","dfaac6de":"code","9bf0d68a":"code","a57d1b28":"code","ef147ccd":"code","e64704d9":"code","795c811c":"code","e1e15b7c":"code","21cdbc81":"code","feb96c14":"code","7da5b52c":"code","6fc9b51c":"code","16573d68":"code","3ad333f5":"code","76461698":"code","3e0ad3a8":"code","bd311a43":"code","0b1c9614":"code","82c36cb5":"code","235cc48b":"code","b8e82b00":"code","d6f8608a":"code","3a767356":"code","8c6f0be2":"code","390964e6":"code","e83d596e":"code","74684849":"code","b7a82601":"code","964a9900":"code","db0f8551":"code","da7fac8b":"code","a1a8e9dd":"code","6425b6de":"code","9ec3c67d":"code","9a4bd937":"code","a62267f4":"code","a931cc9a":"code","3ead02f6":"code","a1f3a7bf":"code","bd9dc686":"code","a4df6f27":"code","91ab3e4c":"code","d8cad1a4":"code","bbbec168":"code","36ca4b1b":"code","a4202bcd":"code","7b1ce6d5":"code","5b1fc8bb":"code","a6a1106b":"code","5235e025":"code","2000350d":"code","b8028dd3":"code","e67628fb":"code","b3af381f":"code","3f9526d6":"code","096257e3":"code","e2e349b6":"code","71a30049":"code","2a83c4fe":"code","b0a46d8b":"code","0547cc02":"code","fd2aaf3a":"code","436ffed4":"code","0cce3632":"code","ee0616b5":"code","8d62f6b4":"code","dc42df06":"code","5952b3d3":"code","54bd9fa1":"code","82dcf69d":"markdown","8c06464d":"markdown","94f0e5d2":"markdown","553adbb2":"markdown","1a247684":"markdown","046890ac":"markdown","34979004":"markdown","d162a40d":"markdown","46eb5183":"markdown","fff51db9":"markdown","f1d6e5ec":"markdown","33ac4341":"markdown","dc017bf2":"markdown","eef06e31":"markdown","8aeb5616":"markdown","50fe9bd3":"markdown","cedbd772":"markdown"},"source":{"e22a45ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","954f9b11":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","65f94f84":"# cat \/kaggle\/input\/house-prices-advanced-regression-techniques\/data_description.txt","6b24841d":"# load csv\nimport pandas as pd\norig_train_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\norig_test_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\ntrain_data = orig_train_data.copy(deep=True) \ntest_data = orig_test_data.copy(deep=True) ","7e9a3a5b":"# first 10 rows\ntrain_data.head(10)","2ade0ce9":"train_data.info()","88f5ca64":"train_data.describe()","a54a72fd":"train_data.shape","a35bb838":"# find numeric and category columns\nall_columns_set = set(train_data.columns.to_list())\n\nnumeric_columns = train_data._get_numeric_data().columns\nnumeric_columns_set = set(numeric_columns.to_list())\ncategory_columns_set = all_columns_set - numeric_columns_set\nprint('numeric_columns_set', len(numeric_columns_set))\nprint('category_columns_set', len(category_columns_set))\nnumeric_columns_set","e985ccea":"# show relative coff\ncorr_matrix = train_data.corr()\ncorr_matrix['SalePrice'].sort_values(ascending=False)","e21ee624":"from pandas.plotting import scatter_matrix\nattrs = ['SalePrice', 'OverallQual','GrLivArea','GarageCars','GarageArea','TotalBsmtSF','1stFlrSF']\nscatter_matrix(train_data[attrs], figsize=(25, 25))\nplt.tight_layout()\nplt.show()","1f13e69d":"# show train test numeric distribute\nplt.figure(figsize=(50,60))\ncopy_temp = numeric_columns_set.copy()\ncopy_temp.remove('SalePrice')\ncolumns = list(copy_temp)\nnum = len(columns)\nprint(num)\ncol = 6\nrow = int(num\/3) + 1\nfor i in np.arange(0, num):\n    ax = plt.subplot(row, col, i+1)\n    sns.kdeplot(x=train_data[columns[i]], ax=ax, label='train')\n    sns.kdeplot(x=test_data[columns[i]], ax=ax, label='test')\n\nplt.tight_layout()\nplt.legend()\nplt.show()","d1b69c67":"train_data[numeric_columns_set].hist(figsize=(50,40))\nplt.show()","bf2c776d":"# boxplot\nplt.figure(figsize=(50,60))\ncolumns = list(numeric_columns_set)\nnum = len(columns)\nprint(num)\ncol = 6\nrow = int(num\/3) + 1\nfor i in np.arange(0, num):\n    ax = plt.subplot(row, col, i+1)\n    sns.boxplot(x=train_data[columns[i]], ax=ax)\n\nplt.tight_layout()\nplt.show()","66bf50e6":"train_data['MiscVal'].value_counts()","619c8d3b":"train_data['LotArea'].hist(bins=100)","8d3e0b2c":"train_data['PoolArea'].value_counts()","1930b04f":"zero_rows = train_data[train_data['BsmtFinSF2'] == 0].shape[0]\nall_rows = train_data['BsmtFinSF2'].shape[0]\nprint('all:{}, zero:{}, rato: {}'.format(all_rows, zero_rows, zero_rows\/all_rows))","adbeead6":"zero_rows = train_data[train_data['LowQualFinSF'] == 0].shape[0]\nall_rows = train_data['LowQualFinSF'].shape[0]\nprint('all:{}, zero:{}, rato: {}'.format(all_rows, zero_rows, zero_rows\/all_rows))","0b427566":"zero_rows = train_data[train_data['EnclosedPorch'] == 0].shape[0]\nall_rows = train_data['EnclosedPorch'].shape[0]\nprint('all:{}, zero:{}, rato: {}'.format(all_rows, zero_rows, zero_rows\/all_rows))","c27a5bf9":"zero_rows = train_data[train_data['ScreenPorch'] == 0].shape[0]\nall_rows = train_data['ScreenPorch'].shape[0]\nprint('all:{}, zero:{}, rato: {}'.format(all_rows, zero_rows, zero_rows\/all_rows))","982952d2":"zero_rows = train_data[train_data['3SsnPorch'] == 0].shape[0]\nall_rows = train_data['3SsnPorch'].shape[0]\nprint('all:{}, zero:{}, rato: {}'.format(all_rows, zero_rows, zero_rows\/all_rows))","998011cf":"train_data[numeric_columns_set].describe()","b01b8668":"temp = numeric_columns_set.copy()\ntemp.remove('SalePrice')\ntest_data[temp].describe()","bd522841":"# test GarageYrBlt has error value\ntest_data['GarageYrBlt'].sort_values(ascending=False).head(10)\n# change it to max value\nmax_train_GarageYrBlt = train_data['GarageYrBlt'].max()\ntest_data.loc[test_data['GarageYrBlt']>max_train_GarageYrBlt, 'GarageYrBlt']=max_train_GarageYrBlt","73822416":"# show category null\nplt.figure(figsize=(50, 50))\n\n# plot heatmap to check null values\n# 'cbar = False' does not show the color axis \nsns.heatmap(train_data.isnull(), cbar=False)\n\n# display the plot\nplt.tight_layout()\nplt.show()","72036008":"Total = train_data.isnull().sum().sort_values(ascending = False)          \n\n# calculate the percentage of missing values\n# 'ascending = False' sorts values in the descending order\n# the variable with highest percentage of missing values will appear first\nPercent = ((Total*100)\/train_data.isnull().count()).sort_values(ascending = False)   \n\n# concat the 'Total' and 'Percent' columns using 'concat' function\n# 'keys' is the list of column names\n# 'axis = 1' concats along the columns\nmissing_data = pd.concat([Total, Percent], axis = 1, keys = ['Total', 'Percentage of Missing Values'])    \nmissing_data[missing_data['Total']>0]","4f293aa1":"# fill LotFrontage na\nprint(train_data['LotFrontage'].describe())\nprint(train_data['LotFrontage'].mean())\ntrain_data['LotFrontage'] = 1\/train_data['LotFrontage']\ntrain_data['LotFrontage'] = train_data['LotFrontage'].fillna(0.0)","5bb6d843":"# if GarageType is nan , GarageYrBlt is nan. So GarageYrBlt is nan means GarageYrBlt is infinite.\nprint(orig_train_data[orig_train_data['GarageYrBlt'].isnull()==True]['GarageType'].unique())\nmax_GarageYrBlt = orig_train_data['GarageYrBlt'].min()\nprint(max_GarageYrBlt)\ntrain_data['GarageYrBlt'] = 1\/(orig_train_data['GarageYrBlt'] - max_GarageYrBlt + 1)\ntrain_data['GarageYrBlt'] = train_data['GarageYrBlt'].fillna(0)\ntrain_data['GarageYrBlt'].head(20)","25e196bc":"print(orig_train_data[orig_train_data['MasVnrArea'].isnull()==True]['MasVnrType'].unique())\ntrain_data['MasVnrArea'] = orig_train_data['MasVnrArea'].fillna(0.0)","0f5737ff":"print(orig_train_data['Electrical'].value_counts())\nprint(orig_train_data['Electrical'].mode()[0])\norig_train_data['Electrical'].fillna(orig_train_data['Electrical'].mode()[0], inplace=True)","c0fd2664":"train_data.fillna('None', inplace=True)","207028e8":"# show category null\nplt.figure(figsize=(50, 50))\n\n# plot heatmap to check null values\n# 'cbar = False' does not show the color axis \nsns.heatmap(test_data.isnull(), cbar=False)\n\n# display the plot\nplt.tight_layout()\nplt.show()","48a5afb7":"\nTotal = test_data.isnull().sum().sort_values(ascending = False)          \n\n# calculate the percentage of missing values\n# 'ascending = False' sorts values in the descending order\n# the variable with highest percentage of missing values will appear first\nPercent = ((Total*100)\/test_data.isnull().count()).sort_values(ascending = False)   \n\n# concat the 'Total' and 'Percent' columns using 'concat' function\n# 'keys' is the list of column names\n# 'axis = 1' concats along the columns\nmissing_data = pd.concat([Total, Percent], axis = 1, keys = ['Total', 'Percentage of Missing Values'])    \nmissing_data[missing_data['Total']>0]","1baf98b5":"# fill LotFrontage na\n# test_data['LotFrontage'] = test_data['LotFrontage'].fillna((test_data['LotFrontage'].mean()))\nprint(test_data['LotFrontage'].describe())\nprint(test_data['LotFrontage'].mean())\ntest_data['LotFrontage'] = 1\/test_data['LotFrontage']\ntest_data['LotFrontage'] = test_data['LotFrontage'].fillna(0.0)","7e4241a4":"# if GarageType is nan , GarageYrBlt is nan. So GarageYrBlt is nan means GarageYrBlt is infinite.\nprint(orig_test_data[orig_test_data['GarageYrBlt'].isnull()==True]['GarageType'].unique())\norig_test_data[(orig_test_data['GarageYrBlt'].isnull()==True) & (orig_test_data['GarageType']=='Detchd')]\ntest_data.loc[(test_data['GarageYrBlt'].isnull()==True) & (test_data['GarageType']=='Detchd'), 'GarageYrBlt'] = train_data[train_data['GarageType'] == 'Detchd']['GarageYrBlt'].mean()\n\nmax_GarageYrBlt = orig_train_data['GarageYrBlt'].min()\nprint(max_GarageYrBlt)\ntest_data['GarageYrBlt'] = 1\/(test_data['GarageYrBlt'] - max_GarageYrBlt + 1)\ntest_data['GarageYrBlt'] = test_data['GarageYrBlt'].fillna(0)\ntest_data['GarageYrBlt'].head(10)","ce6d9b8a":"print(orig_test_data[orig_test_data['MasVnrArea'].isnull()==True]['MasVnrType'].unique())\ntest_data['MasVnrArea'] = orig_test_data['MasVnrArea'].fillna(0.0)","bc75dc02":"print(orig_test_data['MSZoning'].value_counts())\nprint(orig_train_data['MSZoning'].mode()[0])\ntest_data['MSZoning'].fillna(orig_train_data['MSZoning'].mode()[0], inplace=True)","9453d5dc":"print(orig_test_data['Functional'].value_counts())\nprint(orig_train_data['Functional'].mode()[0])\ntest_data['Functional'].fillna(orig_train_data['Functional'].mode()[0], inplace=True)","03f15e89":"print(orig_test_data['Exterior1st'].value_counts())\nprint(orig_train_data['Exterior1st'].mode()[0])\ntest_data['Exterior1st'].fillna(orig_train_data['Exterior1st'].mode()[0], inplace=True)","8049256a":"print(orig_test_data['BsmtFullBath'].value_counts())\nprint(orig_train_data['BsmtFullBath'].mode()[0])\ntest_data['BsmtFullBath'].fillna(orig_train_data['BsmtFullBath'].mode()[0], inplace=True)","f5e7936e":"print(orig_test_data[orig_test_data['MasVnrArea'].isnull()==True]['MasVnrType'].unique())\n# print(orig_train_data['BsmtFinSF1'].mean())\ntest_data['BsmtFinSF1'].fillna(0.0, inplace=True)","58e1420a":"print(orig_test_data['Exterior2nd'].value_counts())\nprint(orig_train_data['Exterior2nd'].mode()[0])\ntest_data['Exterior2nd'].fillna(orig_train_data['Exterior2nd'].mode()[0], inplace=True)","79b08b60":"print(orig_test_data['BsmtHalfBath'].value_counts())\nprint(orig_train_data['BsmtHalfBath'].mode()[0])\ntest_data['BsmtHalfBath'].fillna(orig_train_data['BsmtHalfBath'].mode()[0], inplace=True)","68392780":"print(orig_test_data['Utilities'].value_counts())\nprint(orig_train_data['Utilities'].mode()[0])\ntest_data['Utilities'].fillna(orig_train_data['Utilities'].mode()[0], inplace=True)","39f4ab79":"print(orig_test_data['BsmtFullBath'].value_counts())\nprint(orig_train_data['BsmtFullBath'].mode()[0])\ntest_data['BsmtFullBath'].fillna(orig_train_data['BsmtFullBath'].mode()[0], inplace=True)","3e5a3b48":"# print(orig_test_data['BsmtFinSF2'].value_counts())\nprint(orig_test_data[orig_test_data['BsmtFinSF2'].isnull()==True]['BsmtFinType2'].unique())\n# print(orig_train_data['BsmtFinSF2'].mean())\ntest_data['BsmtFinSF2'].fillna(0.0, inplace=True)","5c6bab61":"# print(orig_test_data['BsmtUnfSF'].value_counts())\nprint(orig_test_data[orig_test_data['BsmtUnfSF'].isnull()==True]['BsmtQual'].unique())\n# print(orig_train_data['BsmtUnfSF'].mean())\ntest_data['BsmtUnfSF'].fillna(0.0, inplace=True)","eff42d34":"# print(orig_test_data['TotalBsmtSF'].value_counts())\nprint(orig_test_data[orig_test_data['TotalBsmtSF'].isnull()==True]['BsmtQual'].unique())\n# print(orig_train_data['TotalBsmtSF'].mean())\ntest_data['TotalBsmtSF'].fillna(0.0, inplace=True)","07b92276":"# print(orig_test_data['GarageArea'].value_counts())\nprint(orig_test_data[orig_test_data['GarageArea'].isnull() == True]['GarageType'].unique())\ntest_data.loc[(test_data['GarageArea'].isnull()) & (test_data['GarageType']=='Detchd'), 'GarageArea'] = orig_test_data[orig_test_data['GarageType']=='Detchd']['GarageArea'].mean()\ntest_data['GarageArea'].fillna(0.0, inplace=True)","2af8d4e8":"# print(orig_test_data['GarageCars'].value_counts())\nprint(orig_test_data[orig_test_data['GarageCars'].isnull() == True]['GarageType'].unique())\n# print(orig_train_data['GarageCars'].mode()[0])\ntest_data.loc[(test_data['GarageCars'].isnull()) & (test_data['GarageType']=='Detchd'), 'GarageCars'] = orig_test_data[orig_test_data['GarageType']=='Detchd']['GarageCars'].mode()[0]\ntest_data['GarageCars'].fillna(0.0, inplace=True)","39a8680c":"# print(orig_test_data['BsmtFinSF1'].value_counts())\nprint(orig_test_data[orig_test_data['BsmtFinSF1'].isnull() == True]['BsmtFinType1'].unique())\n# print(orig_train_data['BsmtFinSF1'].mean())\ntest_data['BsmtFinSF1'].fillna(0.0, inplace=True)","66d18003":"print(orig_test_data['MSZoning'].value_counts())\nprint(orig_train_data['MSZoning'].mode()[0])\ntest_data['MSZoning'].fillna(orig_train_data['MSZoning'].mode()[0], inplace=True)","ec3127c9":"print(orig_test_data['Utilities'].value_counts())\nprint(orig_train_data['Utilities'].mode()[0])\ntest_data['Utilities'].fillna(orig_train_data['Utilities'].mode()[0], inplace=True)","3a7c7a44":"print(orig_test_data['Functional'].value_counts())\nprint(orig_train_data['Functional'].mode()[0])\ntest_data['Functional'].fillna(orig_train_data['Functional'].mode()[0], inplace=True)","d79b1444":"print(orig_test_data['Exterior2nd'].value_counts())\nprint(orig_train_data['Exterior2nd'].mode()[0])\ntest_data['Exterior2nd'].fillna(orig_train_data['Exterior2nd'].mode()[0], inplace=True)","589618b3":"print(orig_test_data['SaleType'].value_counts())\nprint(orig_train_data['SaleType'].mode()[0])\ntest_data['SaleType'].fillna(orig_train_data['SaleType'].mode()[0], inplace=True)","eb619f1f":"print(orig_test_data['Exterior1st'].value_counts())\nprint(orig_train_data['Exterior1st'].mode()[0])\ntest_data['Exterior1st'].fillna(orig_train_data['Exterior1st'].mode()[0], inplace=True)","8df7e1ad":"print(orig_test_data['KitchenQual'].value_counts())\nprint(orig_train_data['KitchenQual'].mode()[0])\ntest_data['KitchenQual'].fillna(orig_train_data['KitchenQual'].mode()[0], inplace=True)","4071f2b9":"test_data.fillna('None', inplace=True)","cdbd0495":"copy_train_data = train_data.copy(deep=True) \ncopy_test_data = test_data.copy(deep=True) ","1af24cb9":"# set 3SsnPorch 2 category\ntrain_data.loc[train_data['3SsnPorch']!=0, '3SsnPorch']=1\ntrain_data['3SsnPorch'].value_counts()","def9e91a":"# set 3SsnPorch 2 category\ntest_data.loc[test_data['3SsnPorch']!=0, '3SsnPorch']=1\ntest_data['3SsnPorch'].value_counts()","707ae539":"# transform BsmtFinSF1\ntrain_data['BsmtFinSF1'] = np.log(copy_train_data['BsmtFinSF1']+1)\ntrain_data['BsmtFinSF1'].hist()","c6e4f79d":"# transform BsmtFinSF1\ntmp = copy_test_data['BsmtFinSF1'].astype(float)\ntmp.describe()\ntest_data['BsmtFinSF1'] = np.log(copy_test_data['BsmtFinSF1']+1)\ntest_data['BsmtFinSF1'].hist()","ed1ae357":"train_data['BsmtFinSF2'].hist()\nplt.show()","c4c12f56":"print(train_data[train_data['BsmtFinSF2']!=0].shape[0]\/train_data['BsmtFinSF2'].shape[0])","e87ad3aa":"# # set BsmtFinSF2 2 category\n# train_data.loc[train_data['BsmtFinSF2']!=0, 'BsmtFinSF2']=1\n# train_data['BsmtFinSF2'].value_counts()","d1c31923":"# # set BsmtFinSF2 2 category\n# test_data.loc[test_data['BsmtFinSF2']!=0, 'BsmtFinSF2']=1\n# test_data['BsmtFinSF2'].value_counts()","426c85fa":"print(train_data[train_data['EnclosedPorch']!=0].shape[0]\/train_data['EnclosedPorch'].shape[0])","1b568f21":"# # set EnclosedPorch 2 category\n# train_data.loc[train_data['EnclosedPorch']!=0, 'EnclosedPorch']=1\n# train_data['EnclosedPorch'].value_counts()","236a86f1":"# # set EnclosedPorch 2 category\n# test_data.loc[test_data['EnclosedPorch']!=0, 'EnclosedPorch']=1\n# test_data['EnclosedPorch'].value_counts()","934af714":"# transform GarageYrBlt\ntrain_data['GarageYrBlt'].describe()\ntrain_data['GarageYrBlt'].hist(bins=100)\nplt.show()\nnp.log(train_data['GarageYrBlt']+1).hist(bins=100)\nplt.show()\n\ntest_data['GarageYrBlt'].describe()\ntest_data['GarageYrBlt'].hist(bins=100)\nplt.show()\nnp.log(test_data['GarageYrBlt']+1).hist(bins=100)\nplt.show()\n\n\ntrain_data[['GarageYrBlt']].plot.scatter(x=0, y='GarageYrBlt')\nplt.show()\n\ntest_data[['GarageYrBlt']].plot.scatter(x=0, y='GarageYrBlt')\nplt.show()","1fee1252":"print(train_data[(train_data['GarageYrBlt']>0) & (train_data['GarageYrBlt']<0.2)].shape[0]\/train_data['GarageYrBlt'].shape[0])","c7eec711":"# desc LotArea\ncopy_train_data['LotArea'].describe()\ncopy_train_data['LotArea'].hist()\nplt.show()\nnp.log(copy_train_data['LotArea']+1).hist()\nplt.show()\n\ncopy_test_data['LotArea'].describe()\ncopy_test_data['LotArea'].hist()\nplt.show()\nnp.log(copy_test_data['LotArea']+1).hist()\nplt.show()","356899b9":"# transform LotArea\ntrain_data['LotArea'] = np.log(copy_train_data['LotArea']+1)\n\ntest_data['LotArea'] = np.log(copy_test_data['LotArea']+1)","6021e1ca":"# desc LowQualFinSF\nprint(copy_train_data['LowQualFinSF'].value_counts())\nprint(copy_test_data['LowQualFinSF'].value_counts())\n\nprint(copy_train_data[copy_train_data['LowQualFinSF']!=0].shape[0]\/copy_train_data['LowQualFinSF'].shape[0])\nprint(copy_test_data[copy_test_data['LowQualFinSF']!=0].shape[0]\/copy_test_data['LowQualFinSF'].shape[0])","502e190a":"# transform LowQualFinSF\n\ntrain_data.loc[train_data['LowQualFinSF'] != 0 , 'LowQualFinSF'] = 1\ntest_data.loc[test_data['LowQualFinSF'] != 0 , 'LowQualFinSF'] = 1","1fe0b154":"# train_data['MSSubClass'] = all_MSSubClass[all_MSSubClass['type'] == 'train']\n# test_data['MSSubClass'] = all_MSSubClass[all_MSSubClass['type'] == 'test']","a0daab6d":"# desc MasVnrArea\ncopy_train_data['MasVnrArea'].describe()\ncopy_train_data['MasVnrArea'].hist()\nplt.show()\nnp.log(copy_train_data['MasVnrArea']+1).hist()\nplt.show()\n\ncopy_test_data['MasVnrArea'].describe()\ncopy_test_data['MasVnrArea'].hist()\nplt.show()\nnp.log(copy_test_data['MasVnrArea']+1).hist()\nplt.show()","dfaac6de":"# transform MasVnrArea\ntrain_data['MasVnrArea'] = np.log(copy_train_data['MasVnrArea']+1)\n\ntest_data['MasVnrArea'] = np.log(copy_test_data['MasVnrArea']+1)","9bf0d68a":"# desc MiscVal\nprint(copy_train_data['MiscVal'].value_counts())\nprint(copy_test_data['MiscVal'].value_counts())\n\nprint(copy_train_data[copy_train_data['MiscVal']!=0].shape[0]\/copy_train_data['MiscVal'].shape[0])\nprint(copy_test_data[copy_test_data['MiscVal']!=0].shape[0]\/copy_test_data['MiscVal'].shape[0])","a57d1b28":"# transform MiscVal\n\ntrain_data.loc[train_data['MiscVal'] != 0 , 'MiscVal'] = 1\ntest_data.loc[test_data['MiscVal'] != 0 , 'MiscVal'] = 1","ef147ccd":"# desc OpenPorchSF\ncopy_train_data['OpenPorchSF'].describe()\ncopy_train_data['OpenPorchSF'].hist()\nplt.show()\nnp.log(copy_train_data['OpenPorchSF']+1).hist()\nplt.show()\n\ncopy_test_data['OpenPorchSF'].describe()\ncopy_test_data['OpenPorchSF'].hist()\nplt.show()\nnp.log(copy_test_data['OpenPorchSF']+1).hist()\nplt.show()","e64704d9":"# transform OpenPorchSF\ntrain_data['OpenPorchSF'] = np.log(copy_train_data['OpenPorchSF']+1)\n\ntest_data['OpenPorchSF'] = np.log(copy_test_data['OpenPorchSF']+1)","795c811c":"# desc PoolArea\nprint(copy_train_data['PoolArea'].value_counts())\nprint(copy_test_data['PoolArea'].value_counts())\n\nprint(copy_train_data[copy_train_data['PoolArea']!=0].shape[0]\/copy_train_data['PoolArea'].shape[0])\nprint(copy_test_data[copy_test_data['PoolArea']!=0].shape[0]\/copy_test_data['PoolArea'].shape[0])","e1e15b7c":"# transform PoolArea\n\ntrain_data.loc[train_data['PoolArea'] != 0 , 'PoolArea'] = 1\ntest_data.loc[test_data['PoolArea'] != 0 , 'PoolArea'] = 1","21cdbc81":"# desc SalePrice\ncopy_train_data['SalePrice'].describe()\ncopy_train_data['SalePrice'].hist()\nplt.show()\nnp.log(copy_train_data['SalePrice']+1).hist()\nplt.show()","feb96c14":"# transform SalePrice\n# train_data['SalePrice'] = np.log(copy_train_data['SalePrice']+1)","7da5b52c":"# desc ScreenPorch\nprint(copy_train_data['ScreenPorch'].value_counts())\nprint(copy_test_data['ScreenPorch'].value_counts())\n\nprint(copy_train_data[copy_train_data['ScreenPorch']!=0].shape[0]\/copy_train_data['ScreenPorch'].shape[0])\nprint(copy_test_data[copy_test_data['ScreenPorch']!=0].shape[0]\/copy_test_data['ScreenPorch'].shape[0])","6fc9b51c":"# transform ScreenPorch\n\ntrain_data.loc[train_data['ScreenPorch'] != 0 , 'ScreenPorch'] = 1\ntest_data.loc[test_data['ScreenPorch'] != 0 , 'ScreenPorch'] = 1","16573d68":"# desc WoodDeckSF\ncopy_train_data['WoodDeckSF'].describe()\ncopy_train_data['WoodDeckSF'].hist()\nplt.show()\nnp.log(copy_train_data['WoodDeckSF']+1).hist()\nplt.show()\n\ncopy_test_data['WoodDeckSF'].describe()\ncopy_test_data['WoodDeckSF'].hist()\nplt.show()\nnp.log(copy_test_data['WoodDeckSF']+1).hist()\nplt.show()","3ad333f5":"# transform WoodDeckSF\ntrain_data['WoodDeckSF'] = np.log(copy_train_data['WoodDeckSF']+1)\n\ntest_data['WoodDeckSF'] = np.log(copy_test_data['WoodDeckSF']+1)","76461698":"# desc YearBuilt\nmax_YearBuilt = copy_train_data['YearBuilt'].max()\ncopy_train_data['YearBuilt'].describe()\ncopy_train_data['YearBuilt'].hist()\nplt.show()\n(max_YearBuilt - copy_train_data['YearBuilt']+1).hist()\nplt.show()\nnp.log(max_YearBuilt - copy_train_data['YearBuilt']+1).hist()\nplt.show()\n\ncopy_test_data['YearBuilt'].describe()\ncopy_test_data['YearBuilt'].hist()\nplt.show()\n(max_YearBuilt - copy_test_data['YearBuilt']+1).hist()\nplt.show()\nnp.log(max_YearBuilt - copy_test_data['YearBuilt']+1).hist()\nplt.show()","3e0ad3a8":"# transform YearBuilt\ntrain_data['YearBuilt'] = np.log(copy_train_data['YearBuilt']+1)\n\ntest_data['YearBuilt'] = np.log(copy_test_data['YearBuilt']+1)","bd311a43":"# desc YearBuilt\ntrain_data['YearRemodAdd'] = copy_train_data['YearRemodAdd'] - copy_train_data['YearBuilt']\nprint(train_data['YearRemodAdd'].describe())\n# train_data['YearRemodAdd'].hist()\n# plt.show()\n# np.log(train_data['YearRemodAdd']+1).hist()\n# plt.show()\n\ntest_data['YearRemodAdd'] = copy_test_data['YearRemodAdd'] - copy_test_data['YearBuilt']\nprint(test_data['YearRemodAdd'].describe())\n# test_data['YearRemodAdd'].hist()\n# plt.show()\n# np.log(test_data['YearRemodAdd']+1).hist()\n# plt.show()","0b1c9614":"# because YearRemodAdd should >= YearBuilt, so value cann't be smaller than zero.\ntest_data.loc[test_data['YearRemodAdd'] < 0, 'YearRemodAdd'] = 0","82c36cb5":"print(test_data[test_data['YearRemodAdd']<20.0].shape[0]\/test_data['YearRemodAdd'].shape[0])\nprint(test_data[test_data['YearRemodAdd']<20.0].shape[0]\/copy_test_data['YearRemodAdd'].shape[0])","235cc48b":"train_data['YearRemodAdd'].hist(bins=100)\nplt.show()\nnp.log(train_data['YearRemodAdd']+1).hist(bins=100)\nplt.show()\n\ntest_data['YearRemodAdd'].hist(bins=100)\nplt.show()\nnp.log(test_data['YearRemodAdd']+1).hist(bins=100)\nplt.show()","b8e82b00":"corr_matrix = train_data[['YearRemodAdd', 'SalePrice']].corr\nfrom pandas.plotting import scatter_matrix\nattrs = ['SalePrice', 'YearRemodAdd']\nscatter_matrix(train_data[attrs], figsize=(5, 5))\nplt.tight_layout()\nplt.show()","d6f8608a":"# train_data.loc[train_data['YearRemodAdd']>1, 'YearRemodAdd'] = 2\n# test_data.loc[test_data['YearRemodAdd']>1, 'YearRemodAdd'] = 2\n# train_data['YearRemodAdd'].value_counts()","3a767356":"# desc YearBuilt\nmax_YrSold = copy_train_data['YrSold'].max()\ncopy_train_data['YrSold'].describe()\ncopy_train_data['YrSold'].hist()\nplt.show()\nnp.log(max_YearBuilt - copy_train_data['YrSold']+1).hist()\nplt.show()\n\ncopy_test_data['YrSold'].describe()\ncopy_test_data['YrSold'].hist()\nplt.show()\nnp.log(max_YearBuilt - copy_test_data['YrSold']+1).hist()\nplt.show()","8c6f0be2":"train_data.drop('YrSold', axis=1, inplace=True)\ntest_data.drop('YrSold', axis=1, inplace=True)","390964e6":"numeric_columns = train_data._get_numeric_data().columns\nscaler_columns = numeric_columns.copy()\nscaler_columns = scaler_columns.drop(['MSSubClass','Id','SalePrice'])","e83d596e":"from sklearn import preprocessing\nmax_abs_scaler = preprocessing.MaxAbsScaler()\nstandard_scaler = preprocessing.StandardScaler()\n\nmax_abs_scaler.fit(train_data[scaler_columns])\nscaler_train_data = max_abs_scaler.transform(train_data[scaler_columns])\nscaler_test_data = max_abs_scaler.transform(test_data[scaler_columns])\n\nstandard_scaler.fit(train_data[scaler_columns])\nscaler_train_data = max_abs_scaler.transform(scaler_train_data)\nscaler_test_data = max_abs_scaler.transform(scaler_test_data)\n\n# train_data = pd.concat([train_data[['MSSubClass','Id','SalePrice']], scaler_train_data], axis=1)\n# test_data = pd.concat([test_data[['MSSubClass','Id']], scaler_test_data], axis=1)\n\nprint(scaler_train_data.shape)\nprint(scaler_test_data.shape)","74684849":"# scaler_train_data[0:1].shape","b7a82601":"# desc MSSubClass\nprint(copy_train_data['MSSubClass'].value_counts())\nprint(copy_test_data['MSSubClass'].value_counts())","964a9900":"train_MSSubClass = copy_train_data[['MSSubClass']]\ntrain_MSSubClass['type'] = 'train'\n\ntest_MSSubClass = copy_test_data[['MSSubClass']]\ntest_MSSubClass['type'] = 'test'\n\nall_MSSubClass = pd.concat([train_MSSubClass, test_MSSubClass])\n\nall_MSSubClass[all_MSSubClass['type']=='test'].head()\nall_MSSubClass_value = [[x] for x in all_MSSubClass['MSSubClass'].unique()]\nall_MSSubClass_value","db0f8551":"# one_hot MSSubClass\nfrom sklearn.preprocessing import OneHotEncoder\ncat_encoder = OneHotEncoder()\ncat_encoder.fit(all_MSSubClass_value)\n\none_hot_columns = ['MSSubClass_' + str(x) for x in cat_encoder.categories_[0]]\n\ntrain_arr = cat_encoder.transform(train_MSSubClass[['MSSubClass']]).toarray()\n# train_df = pd.DataFrame(train_arr, columns=one_hot_columns)\n# train_data = pd.concat([train_data.drop('MSSubClass',axis=1), train_df], axis=1)\nprint(train_arr.shape)\n\ntest_arr = cat_encoder.transform(test_MSSubClass[['MSSubClass']]).toarray()\n# test_df = pd.DataFrame(test_arr, columns=one_hot_columns)\n# test_data = pd.concat([test_data.drop('MSSubClass',axis=1), test_df], axis=1)\nprint(test_arr.shape)\n\ntrain_data_arr = np.c_[scaler_train_data, train_arr]\ntest_data_arr = np.c_[scaler_test_data, test_arr]","da7fac8b":"numerical_columns = np.r_[scaler_columns, one_hot_columns]\nnumerical_columns","a1a8e9dd":"train_data_df = pd.DataFrame(train_data_arr, columns = numerical_columns)\ntest_data_df = pd.DataFrame(test_data_arr, columns = numerical_columns)","6425b6de":"other_columns = category_columns_set.copy()\nother_columns.update(['SalePrice', 'Id'])\nprint(len(other_columns))\nother_columns","9ec3c67d":"train_data['SalePrice'].head()","9a4bd937":"train_data = pd.concat([train_data[other_columns], train_data_df], axis=1)\n\nother_columns.remove('SalePrice')\ntest_data = pd.concat([test_data[other_columns], test_data_df], axis=1)","a62267f4":"train_data.shape\n# train_data_df.shape","a931cc9a":"test_data.shape\n# test_data_df.shape","3ead02f6":"train_data.columns.sort_values()","a1f3a7bf":"# show train test numeric distribute\nplt.figure(figsize=(50,60))\ncopy_temp = numeric_columns_set.copy()\ncopy_temp.remove('SalePrice')\ncopy_temp.remove('YrSold')\ncopy_temp.remove('MSSubClass')\ncolumns = list(copy_temp)\nnum = len(columns)\nprint(num)\ncol = 6\nrow = int(num\/3) + 1\nfor i in np.arange(0, num):\n    print(columns[i])\n    ax = plt.subplot(row, col, i+1)\n    sns.kdeplot(x=train_data[columns[i]], ax=ax, label='train')\n    sns.kdeplot(x=test_data[columns[i]], ax=ax, label='test')\n\nplt.tight_layout()\nplt.legend()\nplt.show()","bd9dc686":"# create a list of all categorical variables\n# initiate an empty list to store the categorical variables\ncategorical=list(category_columns_set)\n\n# plot the count plot for each categorical variable \nfig, ax = plt.subplots(nrows = 15, ncols = 3, figsize=(25, 60))\n\ntrain_data['type'] = 'train'\ntest_data['type'] = 'test'\n\nprint(train_data.shape)\nprint(test_data.shape)\n\nall_data = pd.concat([train_data.drop('SalePrice', axis = 1), test_data])\nall_data.head()\n# use for loop to plot the count plot for each variable\nfor variable, subplot in zip(categorical, ax.flatten()):\n    \n    # use countplot() to plot the graph\n#     sns.countplot(hue=\"type\", data=train_data[['type', categorical]], x=categorical, ax = subplot)\n    sns.countplot(hue=\"type\", data=all_data[['type', variable]], x=variable, ax = subplot)\n\n\n# display the plot\nplt.tight_layout()\nplt.show()","a4df6f27":"correlation=train_data.corr()\nplt.figure(figsize=(50, 50))\nsns.heatmap(correlation[(correlation >= 0.3) | (correlation <= -0.3)],\n            annot=True,linewidths=.1,linecolor=\"blue\")\nplt.title('Correlation between features', fontsize=15)\n\nplt.tight_layout()\nplt.show()","91ab3e4c":"#Checking for null values\nTotal = train_data.isnull().sum().sort_values(ascending = False)          \n\n# calculate the percentage of missing values\n# 'ascending = False' sorts values in the descending order\n# the variable with highest percentage of missing values will appear first\nPercent = ((Total*100)\/train_data.isnull().count()).sort_values(ascending = False)   \n\n# concat the 'Total' and 'Percent' columns using 'concat' function\n# 'keys' is the list of column names\n# 'axis = 1' concats along the columns\nmissing_data = pd.concat([Total, Percent], axis = 1, keys = ['Total', 'Percentage of Missing Values'])    \nmissing_data\n\n# train_data.head(100)\n\n# train_data.isnull().count()","d8cad1a4":"# one_hot_train_data = pd.get_dummies(train_data.drop('MSSubClass', axis=1))\n# one_hot_train_data['MSSubClass'] = train_data['MSSubClass']\n# one_hot_train_data['MSSubClass'][0].toarray()\n\none_hot_train_data = pd.get_dummies(train_data)","bbbec168":"one_hot_train_data.head(20)","36ca4b1b":"one_hot_train_data.shape","a4202bcd":"#Checking for null values\nTotal = test_data.isnull().sum().sort_values(ascending = False)          \n\n# calculate the percentage of missing values\n# 'ascending = False' sorts values in the descending order\n# the variable with highest percentage of missing values will appear first\nPercent = ((Total*100)\/test_data.isnull().count()).sort_values(ascending = False)   \n\n# concat the 'Total' and 'Percent' columns using 'concat' function\n# 'keys' is the list of column names\n# 'axis = 1' concats along the columns\nmissing_data = pd.concat([Total, Percent], axis = 1, keys = ['Total', 'Percentage of Missing Values'])    \nmissing_columns = missing_data[missing_data['Percentage of Missing Values'] > 0.0].index\n\nprint(test_data[missing_columns].info())\nmissing_data","7b1ce6d5":"# one_hot_test_data = pd.get_dummies(test_data.drop('MSSubClass', axis=1))\n# one_hot_test_data['MSSubClass'] = test_data['MSSubClass']\n# test_data['MSSubClass'][0].toarray()\n\none_hot_test_data = pd.get_dummies(test_data)","5b1fc8bb":"one_hot_test_data.head(10)","a6a1106b":"one_hot_test_data.shape","5235e025":"same_columns = set(one_hot_train_data.columns.to_list()) & set(one_hot_test_data.columns.to_list())\nsame_columns","2000350d":"# train_loss_columns = list(max_columns - set(one_hot_train_data.columns.to_list()))\n# one_hot_train_data[train_loss_columns] = 0\n\nsame_columns = list(same_columns)\nsame_columns.append('SalePrice')\nlen(same_columns)","b8028dd3":"one_hot_train_data = one_hot_train_data[same_columns]","e67628fb":"one_hot_train_data.shape","b3af381f":"from sklearn.model_selection import train_test_split\n\nX = one_hot_train_data.drop(['Id','SalePrice'], axis=1)\ny = one_hot_train_data['SalePrice']\nprint(X.shape)\nprint(y.shape)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 2021)\n\n# check the dimensions of the train & test subset using 'shape'\n# print dimension of train set\nprint(\"X_train\",X_train.shape)\nprint(\"y_train\",y_train.shape)\n\n# print dimension of test set\nprint(\"X_test\",X_test.shape)\nprint(\"y_test\",y_test.shape)","3f9526d6":"# X_train['MSSubClass'].head(1).values[0].toarray().shape","096257e3":"# import xgboost as xgb \n# X_train['MSSubClass'][0].toarray()","e2e349b6":"from xgboost import XGBRegressor\nmodel = XGBRegressor()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\ny_pred[0:10]","71a30049":"# y_test = np.exp(y_test) - 1\n# y_pred = np.exp(y_pred) - 1\n\nprint(y_test.head(10))\nprint(y_pred[0:10])","2a83c4fe":"# from sklearn.metrics import accuracy_score\n\n# accuracy = accuracy_score(y_test, y_pred)\n# print(accuracy)\n\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\n# \u6839\u5747\u65b9\u8bef\u5dee(RMSE)\nprint(np.sqrt(mean_squared_error(np.log(y_test),np.log(y_pred))))\n\n# \u5e73\u5747\u7edd\u5bf9\u8bef\u5dee(MAE)\nprint(mean_absolute_error(np.log(y_test), np.log(y_pred)))","b0a46d8b":"res = pd.DataFrame({\n    'y_pred':y_pred,\n    'y_test':y_test\n})\n\nres.head(10)","0547cc02":"# train_loss_columns = list(max_columns - set(one_hot_train_data.columns.to_list()))\n# one_hot_train_data[train_loss_columns] = 0\n\nsame_columns = same_columns[:-1]\none_hot_test_data = one_hot_test_data[same_columns]\none_hot_test_data.shape","fd2aaf3a":"# one_hot_test_data['SalePrice'].head(10)","436ffed4":"predict = model.predict(one_hot_test_data.drop(['Id'], axis=1))\n# one_hot_test_data['SalePrice'] = np.exp(predict) - 1\none_hot_test_data['SalePrice'] = predict\none_hot_test_data.head(10)","0cce3632":"result = one_hot_test_data[['Id','SalePrice']]\nresult.to_csv('my_sub_06_23_xgboost.csv', index=False)","ee0616b5":"from catboost import CatBoostRegressor\n\ncat = CatBoostRegressor(learning_rate=0.01,iterations=4000)\ncat.fit(X_train, y_train,verbose = 0)\ny_pred = cat.predict(X_test)","8d62f6b4":"# y_test = np.exp(y_test) - 1\n# y_pred = np.exp(y_pred) - 1\n\nprint(y_test.head(10))\nprint(y_pred[0:10])","dc42df06":"# \u6839\u5747\u65b9\u8bef\u5dee(RMSE)\nprint(np.sqrt(mean_squared_error(np.log(y_test),np.log(y_pred))))\n\n# \u5e73\u5747\u7edd\u5bf9\u8bef\u5dee(MAE)\nprint(mean_absolute_error(np.log(y_test), np.log(y_pred)))","5952b3d3":"predict = cat.predict(one_hot_test_data.drop(['Id'], axis=1))\n# one_hot_test_data['SalePrice'] = np.exp(predict) - 1\none_hot_test_data['SalePrice'] = predict\none_hot_test_data.head(10)","54bd9fa1":"result = one_hot_test_data[['Id','SalePrice']]\nresult.to_csv('my_sub_06_23_catboost.csv', index=False)","82dcf69d":"1. OverallQual is category, GarageCars is of int type","8c06464d":"1. EnclosedPorch can be changed to 0\/1.","94f0e5d2":"1. ScreenPorch can be changed to 0\/1.","553adbb2":"1. 3SsnPorch can be changed to 0\/1.","1a247684":"1. not transform GarageYrBlt","046890ac":"1. LowQualFinSF can be changed to 0\/1.","34979004":"1. BsmtFinSF2 can be changed to 0\/1.","d162a40d":"# numeric_columns_set\n\n1stFlrSF: \n\n2ndFlrSF: \n\n3SsnPorch: change to category\n\nBedroomAbvGr: \n\nBsmtFinSF1: heavy-tailed\n\nBsmtFinSF2: change to category\n\nBsmtFullBath:  \n\nBsmtHalfBath: \n\nBsmtUnfSF: \n\nEnclosedPorch: change to category\n\nFireplaces: \n\nFullBath:  \n\nGarageArea:  \n\nGarageCars:  \n\nGarageYrBlt: (max_year - year) and heavy-tailed\n\nGrLivArea: \n\nHalfBath: \n\nId: drop\n\nKitchenAbvGr: \n\nLotArea: heavy-tailed\n\nLotFrontage: \n\nLowQualFinSF: change to category\n\nMSSubClass:  numeric category\n\nMasVnrArea:  heavy-tailed\n\nMiscVal:  change to category\n\nMoSold:  \n\nOpenPorchSF:  heavy-tailed\n\nOverallCond:\n\nOverallQual:\n\nPoolArea:  change to category\n\nSalePrice:  heavy-tailed\n\nScreenPorch: change to category\n\nTotRmsAbvGrd:\n\nTotalBsmtSF:\n\nWoodDeckSF:   heavy-tailed\n\nYearBuilt:   (max_year - year) and is heavy-tailed\n\nYearRemodAdd:  (max_year - year) and YearRemodAdd should be compared to YearBuilt\n\nYrSold:  (max_year - year) and may not have influence\n","46eb5183":"1. MiscVal can be changed to 0\/1.","fff51db9":"1. most features of train and test data have similary distribute.\n2. we can use train data to fill test na data","f1d6e5ec":"\"LotFrontage is NaN\" means \"the Linear feet of street connected to property is infinite\"","33ac4341":"1. LotArea is heavy-tailed and should be transformed.","dc017bf2":"1. some columns is about year, which means the object is new or old. So these columns can be changed to (max_year - year).  these columns are YearBuilt\u3001 GarageYrBuilt\u3001YrSold\u3001YearRemodAdd.\n2. YearBuilt\\GarageYrBuilt is heavy-tailed and should be transformed.\n3. YrSold may not have influence.\n4. YearRemodAdd should be compared to YearBuilt\n5. SalePrice is heavy-tailed and should be transformed.\n6. WoodDeckSF is heavy-tailed and should be transformed.\n7. MasVnrArea is heavy-tailed and should be transformed.\n8. OpenPorchSF is heavy-tailed and should be transformed.\n9. BsmtFinSF1 is heavy-tailed and should be transformed.","eef06e31":"# handle error value and na data","8aeb5616":"1. PoolArea can be changed to 0\/1.","50fe9bd3":"# desc transfomed data","cedbd772":"# transform"}}