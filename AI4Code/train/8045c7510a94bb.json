{"cell_type":{"c3f76044":"code","4706f9fe":"code","653c7a2a":"code","5c82bd0a":"code","5615e2e4":"code","1781db37":"code","6b0af3a9":"code","7efd77a8":"code","d8f066f8":"code","1d4998e6":"code","7421e5e5":"code","add7c54b":"code","860a7fbf":"code","942cb8ef":"code","4d0d988b":"code","abbce913":"code","086e80b7":"code","e3b76561":"code","c0c746c8":"code","25a5cda5":"code","3913db5f":"code","0c8f5eb3":"code","84ca8df7":"code","06add1d9":"code","0da3c6cd":"code","40ce7535":"code","998f95a4":"code","122cc132":"markdown","07d26265":"markdown"},"source":{"c3f76044":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4706f9fe":"from sklearn.linear_model import Ridge","653c7a2a":"train = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/train.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/sample_submission.csv')","5c82bd0a":"train.head()","5615e2e4":"train.tail()","1781db37":"train.loc[49000:50010,:]","6b0af3a9":"train.shape","7efd77a8":"train['open_channels'].min()","d8f066f8":"train_time = train['time'].values","1d4998e6":"train_time_0 = train_time[:50000]","7421e5e5":"for i in range(1,100):\n    train_time_0 = np.hstack([train_time_0, train_time[i*50000:(i+1)*50000]])","add7c54b":"train['time'] = train_time_0","860a7fbf":"test = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/test.csv')","942cb8ef":"test.head()","4d0d988b":"test.tail()","abbce913":"test.shape","086e80b7":"train_time_0 = train_time[:50000]\nfor i in range(1,40):\n    train_time_0 = np.hstack([train_time_0, train_time[i*50000:(i+1)*50000]])\ntest['time'] = train_time_0","e3b76561":"n_groups = 100\ntrain[\"group\"] = 0\nfor i in range(n_groups):\n    ids = np.arange(i*50000, (i+1)*50000)\n    train.loc[ids,\"group\"] = i","c0c746c8":"n_groups = 40\ntest[\"group\"] = 0\nfor i in range(n_groups):\n    ids = np.arange(i*50000, (i+1)*50000)\n    test.loc[ids,\"group\"] = i","25a5cda5":"train['signal_2'] = 0\ntest['signal_2'] = 0","3913db5f":"n_groups = 100\nfor i in range(n_groups):\n    sub = train[train.group == i]\n    signals = sub.signal.values\n    imax, imin = math.floor(np.max(signals)), math.ceil(np.min(signals))\n    signals = (signals - np.min(signals))\/(np.max(signals) - np.min(signals))\n    signals = signals*(imax-imin)\n    train.loc[sub.index,\"signal_2\"] = [0,] +list(np.array(signals[:-1]))","0c8f5eb3":"n_groups = 40\nfor i in range(n_groups):\n    sub = test[test.group == i]\n    signals = sub.signal.values\n    imax, imin = math.floor(np.max(signals)), math.ceil(np.min(signals))\n    signals = (signals - np.min(signals))\/(np.max(signals) - np.min(signals))\n    signals = signals*(imax-imin)\n    test.loc[sub.index,\"signal_2\"] = [0,] +list(np.array(signals[:-1]))","84ca8df7":"signals.shape","06add1d9":"#X = train[['time', 'signal_2']].values\nX = train[['signal_2']].values\ny = train['open_channels'].values","0da3c6cd":"model = Ridge()\nmodel.fit(X, y)\n","40ce7535":"train_preds = model.predict(X)\ntrain_preds = np.clip(train_preds, 0, 10)\ntrain_preds = train_preds.astype(int)","998f95a4":"from sklearn.metrics import cohen_kappa_score\nfrom sklearn.metrics import accuracy_score\ngt_labels=train.values[:,2]\nprint(gt_labels[:5])\nprint(train_preds[:5])\nprint(accuracy_score(gt_labels,train_preds))\nprint(cohen_kappa_score(gt_labels,train_preds))\nprint(cohen_kappa_score(gt_labels,train_preds,weights=\"quadratic\"))\n","122cc132":"The following signal processing parts are taken from the following Khoi Nguyen kernel: https:\/\/www.kaggle.com\/suicaokhoailang\/an-embarrassingly-simple-baseline-0-960-lb","07d26265":"Thanks to https:\/\/www.kaggle.com\/tunguz for sharing this!\nMetrics matter\nCompare accuracy, Cohen's kappa and ....QUADRATIC Cohen's kappa...."}}