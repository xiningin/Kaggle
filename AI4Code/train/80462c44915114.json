{"cell_type":{"d87576ed":"code","ef7a351c":"code","f81c8986":"code","49f4b3a9":"code","159c8052":"code","7a50db53":"code","dcf3eba2":"code","406f84ae":"code","f5a34801":"code","0d2d331b":"code","f26bea56":"code","d5c1c9a3":"code","2d564e9d":"code","3063e804":"code","69d9ed01":"markdown","8c4ac4c3":"markdown","857f7b65":"markdown","57429d43":"markdown","8e4b48a0":"markdown","0138db8d":"markdown"},"source":{"d87576ed":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","ef7a351c":"data = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","f81c8986":"display(data.info(),data.head(10))","49f4b3a9":"data.describe().transpose()","159c8052":"ax = sns.countplot(x=data[\"Outcome\"],data=data)\nvalcount = data['Outcome'].value_counts().values.tolist()\nax.set_xticklabels(\n    ['Diabetic'+':'+str(valcount[0]),'Non-Diabetic'+':'+str(valcount[1])]\n);","7a50db53":"data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)","dcf3eba2":"for col in data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']]:\n    print(col\n          +':'\n          +str(data[col].isnull().sum()) # to count number of Null values\n          +'\\npercentage : '\n          +str((data[col].isnull().sum())\/(len(data[col]))*100) + '\\n' # To calculate the percentage of Null Values\n         )","406f84ae":"plt.figure(figsize=(25,20))\nfor i,col in enumerate(data.columns,start=0):\n    if i<8:\n        plt.subplot(4,2,i+1)\n        sns.boxplot(x=col,data=data,color = 'lightblue');","f5a34801":"data = data.fillna(data.median()) # Replacing the NaN values with the median values\ndata.isna().sum() # Checking if any NaN alues are present","0d2d331b":"data.groupby(['Outcome']).count()","f26bea56":"sns.pairplot(data,hue='Outcome',diag_kind='kde');","d5c1c9a3":"array = data.values\nx = array[:,0:8]        # all rows from first 8 columns\ny = array[:,8]          # all rows and the 8th column\ntest_size = 0.30   #taking 70:30 training and test split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=test_size,random_state=42)\n\n#Setting random_state a fixed value will guarantee that same sequence of random numbers \n#are generated each time you run the code. And unless there is some other randomness present \n#in the process, the results produced will be same as always. \n#This helps in verifying the output.","2d564e9d":"# Fit the model on original data i.e. before upsampling\nmodel = LogisticRegression(solver='liblinear')\nmodel.fit(x_train, y_train)\ny_predict = model.predict(x_test)\nmodel_score = model.score(x_test, y_test)\nprint(model_score)\nprint(metrics.confusion_matrix(y_test, y_predict))\nprint(metrics.classification_report(y_test, y_predict))","3063e804":"cm = metrics.confusion_matrix(y_test, y_predict)\nplt.clf()\nplt.imshow(cm, interpolation='nearest', cmap=plt.cm.Wistia)\nclassNames = ['NonDiabetic', 'Diabetic']\nplt.title('Confusion Matrix - Test Data')\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\ntick_marks = np.arange(len(classNames))\nplt.xticks(tick_marks, classNames, rotation=45)\nplt.yticks(tick_marks, classNames)\ns = [['G1', 'G2'], ['G1','G2']]\n \nfor i in range(2):\n    for j in range(2):\n        plt.text(j,i, str(s[i][j])+\" = \"+str(cm[i][j]))\nplt.show()","69d9ed01":"true negatives(127), false negatives(33),  true positives(47), false positives(24)","8c4ac4c3":"Fit the model on the original data","857f7b65":"The problem that we are dealing with is a classificaion kind of problem hence lets start by looking at the diagonal values.\n\n* We see that there is an overlap of the density graph plotted for diabetic and non diabetic cases.The variables that have less overlap of the density graph will be the weak predictors and the variables which have a major or complete overlap will be poor predictors.\n","57429d43":"**Missing Values**","8e4b48a0":"**Observations from the above :**\n* The values for the pregnancies needs to be cheked as the mean suggests the value 3.84 which is close to 4 which seems to be a little bit on the higher side.\n* Columns have values as 0 at some places which is cleary incorrect data\/missing values.\n* Independent\/Predictor Variables : Pregnancies,Glucose,BloodPressure etc.\n* Dependent\/Target Variable : Outcome.","0138db8d":"As seen earlier diabetic class being a \"non-normal\" class has an under representation"}}