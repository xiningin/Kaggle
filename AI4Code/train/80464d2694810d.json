{"cell_type":{"be897eff":"code","587bd7c7":"code","a987c121":"code","34a16ffd":"code","771109de":"code","6a6f931d":"code","81e8bc32":"code","2607cf82":"code","96cc6276":"code","42ef076c":"code","b8e21a5c":"code","ab751cea":"code","3373429a":"code","26a1c163":"code","d6b80c06":"code","a9312c50":"code","bfccf203":"code","4d94359a":"code","f4860c31":"markdown","85a8b898":"markdown","2532d4c9":"markdown","7b4a6b4c":"markdown","7196d3ff":"markdown","1d4d7547":"markdown","87fc9c90":"markdown","47a9ca2b":"markdown"},"source":{"be897eff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nimport math\nimport json\nimport numpy as np\nimport pandas as pd\nimport networkx as nx\nimport cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\nfrom IPython.display import Image\nimport missingno as msno\nimport seaborn as sns\n\n%matplotlib inline\n# Any results you write to the current directory are saved as output.","587bd7c7":"df20 = pd.read_csv(\"\/kaggle\/input\/flight-delay-prediction\/Jan_2019_ontime.csv\")\ndf19 = pd.read_csv(\"\/kaggle\/input\/flight-delay-prediction\/Jan_2020_ontime.csv\")","a987c121":"#Parsing Dates\ndf20['Date'] = pd.to_datetime('2020-01-' + df20['DAY_OF_MONTH'].apply(str))\ndf20['day_name']=df20['Date'].dt.weekday_name","34a16ffd":"df20.head(5)","771109de":"df20.columns","6a6f931d":"#prepare the data\ndf_carieer = pd.DataFrame(df20['OP_CARRIER'].value_counts().reset_index().values, columns=[\"OP_CARRIER\", \"AggregateOP\"])\n# df_carieer = df_carieer.sort_index(axis = 0, ascending=True)\ndf_carieer= df_carieer.sort_values('AggregateOP',ascending=False)\n\nfig = px.bar(df_carieer, y='AggregateOP', x='OP_CARRIER', text='AggregateOP', opacity = 0.8)\nfig.update_traces(texttemplate='%{text:.1s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=4, uniformtext_mode='hide', title_x = 0.5,title_text='Carriers Count (OP Carrier)', yaxis=dict(title='Count'),\n                  xaxis=dict(title='OP Carrier Code'))\nfig.add_annotation( x='WN', y=100000, text=\"Highest OP CARRIER - WN\",showarrow=True, font=dict( family=\"Courier New, monospace\", size=10, color=\"#ffffff\" ), align=\"right\", arrowhead=2, arrowsize=1, arrowwidth=2, arrowcolor=\"#636363\", ax=120, ay=0, bordercolor=\"#c7c7c7\", borderwidth=2, borderpad=4, bgcolor=\"#ff7f0e\", opacity=0.8)\n\nfig.add_trace(go.Scatter(x=df_carieer['OP_CARRIER'], y=df_carieer['AggregateOP'],\n                    mode='lines+markers',opacity = 0.3,showlegend=False,\n                   line = dict(\n        smoothing = 1.2, color = 'blue',\n        shape = \"spline\"\n    )))\n\nfig.show()\n\n","81e8bc32":"# df20.columns\ndf_Org = pd.DataFrame(df20['ORIGIN'].value_counts().reset_index().values, columns=[\"ORIGIN\", \"AggregateOrigin\"])\n\ndf_Org = df_Org.sort_values('AggregateOrigin',ascending=False).head(10)\ndf_Org = df_Org.sort_values('AggregateOrigin',ascending=True)\n\nfig = px.bar(df_Org, x='AggregateOrigin', y='ORIGIN', text='AggregateOrigin', orientation ='h',opacity = 0.8)\nfig.update_traces(texttemplate='%{text:.5s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=4, uniformtext_mode='hide', title_text='Top 10 Airports w.r.t Arrivals', title_x = 0.5)\nfig.add_annotation( x= 30000, y='ATL', text=\"World's Busiest Airport <br> <b>Hartsfield\u2013Jackson Atlanta International Airport<b>\",showarrow=True, font=dict( family=\"Arial\", size=12, color=\"#ffffff\" ), align=\"center\", arrowhead=2, arrowsize=1, arrowwidth=2, arrowcolor=\"#636363\", ax=-30, ay=80, bordercolor=\"#c7c7c7\", borderwidth=2, borderpad=4, bgcolor=\"#32a848\", opacity=0.8)\n\nfig.show()\n#Busiest Airport Source :https:\/\/en.wikipedia.org\/wiki\/List_of_the_busiest_airports_in_the_United_States","2607cf82":"\ndf_dest = pd.DataFrame(df20['DEST'].value_counts().reset_index().values, columns=[\"DEST\", \"AggregateDest\"])\n\ndf_dest = df_dest.sort_values('AggregateDest',ascending=False).head(10)\ndf_dest = df_dest.sort_values('AggregateDest',ascending=True)\n\n\n\nfig = px.bar(df_dest, x='AggregateDest', y='DEST', text='AggregateDest', orientation ='h',opacity = 0.8)\nfig.update_traces(texttemplate='%{text:.3s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=4, uniformtext_mode='hide', title_text='Top 10 Airports w.r.t Departures', title_x = 0.5)\nfig.add_annotation( x= 30000, y='ATL', text=\"World's Busiest Airport <br> <b>Hartsfield\u2013Jackson Atlanta International Airport<b>\",showarrow=True, font=dict( family=\"Arial\", size=12, color=\"#ffffff\" ), align=\"center\", arrowhead=2, arrowsize=1, arrowwidth=2, arrowcolor=\"#636363\", ax=-30, ay=80, bordercolor=\"#c7c7c7\", borderwidth=2, borderpad=4, bgcolor=\"#32a848\", opacity=0.8)\nfig.show()\n\n#Busiest Airport Source :https:\/\/en.wikipedia.org\/wiki\/List_of_the_busiest_airports_in_the_United_States","96cc6276":"#Comparison of both origin & desination flights\nfig = go.Figure()\n# Create and style traces\nfig.add_trace(go.Scatter(x=df_dest['DEST'], y=df_dest['AggregateDest'], name='Destination Airport',\n                         line=dict(color='firebrick', width=2)))\nfig.add_trace(go.Scatter(x=df_Org['ORIGIN'], y=df_Org['AggregateOrigin'], name = 'Origin Airport',\n                         line=dict(color='royalblue', width=1)))\nfig.update_layout(uniformtext_minsize=4, uniformtext_mode='hide', title_text='Top 10 Airports w.r.t Arrivals & Destinations', title_x = 0.5)\nfig.update_layout( yaxis=dict(title='Count'),xaxis=dict(title='IATA Code'))","42ef076c":"#comparing arrivals and departures time frames\n\nvalues = [df20['DEP_DEL15'].value_counts()[0],df20['DEP_DEL15'].value_counts()[1]]\nlabels = [\"Delayed (<15 minutes)\", \"Delayed (>15 minutes)\"]\ncolors = ['lightgreen','red']\nvalues_arr = [df20['ARR_DEL15'].value_counts()[0],df20['ARR_DEL15'].value_counts()[1]]\n\nfig = make_subplots(1, 2, specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=['Departures', 'Arrivals'])\nfig.add_trace(go.Pie(labels=labels, values=values, pull=[0, 0.1],textinfo = 'label+percent'),1,1)\nfig.add_trace(go.Pie(labels=labels, values=values_arr, pull=[0, 0.1],textinfo = 'label+percent'),1,2)\nfig.update_traces( textinfo='value', textfont_size=14,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(uniformtext_minsize=4, uniformtext_mode='hide', title_text='Flights Delayed', title_x = 0.5, legend_title='<b>               Flights<\/b>',legend=dict(x=.45, y=0.6))\n\n\nfig.show()","b8e21a5c":"df_time = pd.DataFrame(df20['DEP_TIME_BLK'].value_counts().reset_index().values, columns=[\"DEP_TIME_BLK\", \"AggregateDepTime\"])\n\ndf_time = df_time.sort_values('DEP_TIME_BLK',ascending=True)\n\nwidth = [0.5] * 19\nwidth[0] = 0.9\ncolors = ['#053752','#f29624','#f29624','#e5de44','#e5de44','#eae54b','#eae54b','#f5f259','#f5f259','#f5f259','#f8bd4c','#fbd063','#5595a9','#417c93','#2d647d','#1a4d68','#053752','#053752','#053752']\n\n\nfig = go.Figure(data=[go.Bar(x = df_time['DEP_TIME_BLK'], y = df_time['AggregateDepTime'], width = width, marker_color =colors, opacity =0.8, marker_line_width=2, text = df_time['AggregateDepTime'],textposition='outside' )])\n\nfig.update_layout(uniformtext_minsize=4, uniformtext_mode='hide', title_x = 0.5,title_text='<b>Departues by Time Frame<b>', yaxis=dict(title=' Departures Count', range=[0,60000]),xaxis=dict(title='Time Frame <i>(00:00 - 23:59)<i>'),bargap=1)\n\nfig.add_annotation( x='0600-0659', y=48000, text=\"<b>Highest Departures<b>\",showarrow=False, font=dict( family=\"Calbiri\", size=14, color=\"#ffffff\" ), align=\"left\", arrowhead=2, arrowsize=1, arrowwidth=2, arrowcolor=\"#636363\", ax=50, ay=-40, bordercolor=\"#c7c7c7\", borderwidth=2, borderpad=4, bgcolor=\"#f29624\", opacity=0.8)\n\n\nfig.show()","ab751cea":"#short <800, medium 800-2200 , long2200\n\ndf20['FlightType'] = 'Short Haul'\ndf20.loc[(df20['DISTANCE'] >= 800) & (df20['DISTANCE'] <= 2200), 'FlightType'] = 'Medium Haul'\ndf20.loc[(df20['DISTANCE'] > 2200), 'FlightType'] = 'Long Haul'\n\ndf_flight = pd.DataFrame(df20['FlightType'].value_counts().reset_index().values, columns=[\"FlightType\", \"AggregateType\"])\nlabels = [\"Short Haul\",\"Medium Haul\",\"Long Haul\"]\nvalue = [df_flight['AggregateType'][0],df_flight['AggregateType'][1],df_flight['AggregateType'][2]]\n# colors=['lightcyan','cyan','royalblue']\nfigs = go.Figure(data=[go.Pie(labels=labels, values=value, pull=[0, 0, 0.3],textinfo = 'label+percent', hole = 0.3, hoverinfo=\"label+percent\")])\nfigs.update_traces( textinfo='label + percent', textfont_size=10)\nfigs.update_layout(\n    title_text=\"<b>Fligts By Distance<b> <i>(in Miles)<i>\",title_x = 0.5, font_size = 12,legend=dict(x=.75, y=0.55),\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='<b>Distance<b>', x=0.5, y=0.5, font_size=11, showarrow=False)]\n)\nfigs.show()","3373429a":"#Longest Air Routes\ndf_sub20 = df20[['ORIGIN','DEST','DISTANCE']].drop_duplicates()\ndf_sub20 = df_sub20.sort_values('DISTANCE',ascending=False)\ndf_sub20 = df_sub20[['ORIGIN','DEST']]\nsubList20 = df_sub20.head(20).values.tolist()\nsubList20 = list(set(tuple(x) for x in subList20))\ng20 = nx.from_edgelist(subList20)\nlen(g20.nodes()), len(g20.edges())\n\n\nplt.figure(figsize=(20,10))\n# <matplotlib.figure.Figure object at 0x7f1b65ea5e80>\n\nnx.draw(g20, pos = nx.nx_pydot.graphviz_layout(g20), \\\n    node_size=1200, node_color='lightblue', linewidths=2, \\\n    font_size=10, font_weight='bold', with_labels=True, dpi=10000)\nplt.title(\"Top 20 Longest routes by Distance\", fontdict=None, loc='Left', fontsize = 14)\nplt.show()    ## plot2.png attached","26a1c163":"#Smallest Air Routes\ndf_sub20 = df20[['ORIGIN','DEST','DISTANCE']].drop_duplicates()\ndf_sub20 = df_sub20.sort_values('DISTANCE',ascending=True)\ndf_sub20 = df_sub20[['ORIGIN','DEST']]\nsubList20 = df_sub20.head(20).values.tolist()\nsubList20 = list(set(tuple(x) for x in subList20))\ng20 = nx.from_edgelist(subList20)\nlen(g20.nodes()), len(g20.edges())\n\n\nplt.figure(figsize=(20,10))\n# <matplotlib.figure.Figure object at 0x7f1b65ea5e80>\n\nnx.draw(g20, pos = nx.nx_pydot.graphviz_layout(g20), \\\n    node_size=1200, node_color='lightblue', linewidths=2, \\\n    font_size=10, font_weight='bold', with_labels=True, dpi=10000)\nplt.title(\"Top 20 Shortest routes by Distance\", fontdict=None, loc='Left', fontsize = 14)\nplt.show()    ## plot2.png attached","d6b80c06":"#All Air routes\ndf_sub = df20[['ORIGIN','DEST']]\nsubList = df_sub.values.tolist()\nsubList = list(set(tuple(x) for x in subList))\ng = nx.from_edgelist(subList)\nlen(g.nodes()), len(g.edges())\n\nplt.figure(figsize=(20,14))\n# <matplotlib.figure.Figure object at 0x7f1b65ea5e80>\n\nnx.draw(g, pos = nx.nx_pydot.graphviz_layout(g), \\\n    node_size=1200, node_color='lightblue', linewidths=2, \\\n    font_size=10, font_weight='bold', with_labels=True, dpi=10000)\nplt.title(\"All routes by Distance\", fontdict=None, loc='Left', fontsize = 14)\nplt.show()    ## plot2.png attached","a9312c50":"import missingno as msno\nplt.figure(figsize=(5,5))\nmsno.bar(df20)","bfccf203":"msno.heatmap(df20) ","4d94359a":"f, ax = plt.subplots(figsize=(10, 8))\ncorr = df20.corr()\nsns.heatmap(corr,\n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values)","f4860c31":"> <center><h1>EDA - Understanding the Data<\/h1><\/center>","85a8b898":"<hr>","2532d4c9":"<hr>","7b4a6b4c":"> <h3>****Building Network Graphs by Distance****<\/h3>\n* Top 20 Longest Air Routes\n* Top 20 Shortest Air Routes\n> * All Air Routes","7196d3ff":"* Short Haul - Distance <800 miles \n* Medium Haul - Distance 800-2200 miles\n* Long Haul - Distance >2200miles\n<b>\n    \n[Source](https:\/\/en.wikipedia.org\/wiki\/Flight_length)","1d4d7547":"<center><img src=\"https:\/\/images.unsplash.com\/photo-1464037866556-6812c9d1c72e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\" ><\/center>\n<center><h6>Image Source : Ashim D\u2019Silva(Unsplash)<\/h6><\/center>","87fc9c90":"<hr>","47a9ca2b":"> <h3>Missing Data Analysis<\/h3>\n"}}