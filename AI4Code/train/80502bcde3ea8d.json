{"cell_type":{"921e6a11":"code","f5560cec":"code","71a5038b":"code","d3a8a7a1":"code","5af920c1":"code","edbbe0cf":"code","92810da0":"code","5905d022":"code","41f365f5":"code","73466f2a":"code","3bece7d1":"code","8c6fcd85":"code","232c5d82":"markdown","c27fb254":"markdown","fa12511a":"markdown","8cb2c91e":"markdown","b3820724":"markdown","34db7329":"markdown","a875b646":"markdown","71676d4a":"markdown","d4185820":"markdown","ae05a30d":"markdown"},"source":{"921e6a11":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport re as re # Regex \n\nimport warnings\nwarnings.filterwarnings('ignore') # Get rid of annoying warnings\n\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nsub = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv') \npid = train[\"PassengerId\"]\n\ntrain.head(5)","f5560cec":"full_data = [train,test]\nprint (train.info())","71a5038b":"print (train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean())","d3a8a7a1":"print (train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean())","5af920c1":"print (train[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean(), '\\n')\n\nfor dataset in full_data:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n    \nprint (train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean())","edbbe0cf":"for dataset in full_data:\n    dataset['Alone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'Alone'] = 1\nprint (train[['Alone', 'Survived']].groupby(['Alone'], as_index=False).mean())","92810da0":"for dataset in full_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')\nprint (train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean())","5905d022":"for dataset in full_data:\n    age_avg = dataset['Age'].mean()\n    age_std = dataset['Age'].std()\n    age_null_count = dataset['Age'].isnull().sum()\n    \n    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\n    dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list\n    dataset['Age'] = dataset['Age'].astype(int)\n    \ntrain['CategoricalAge'] = pd.cut(train['Age'], 5)\n\nprint (train[['CategoricalAge', 'Survived']].groupby(['CategoricalAge'], as_index=False).mean())","41f365f5":"def get_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    # If the title exists, extract and return it.\n    if title_search:\n        return title_search.group(1)\n    return \"\"\n\nfor dataset in full_data:\n    dataset['Title'] = dataset['Name'].apply(get_title)\n\nfor dataset in full_data:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\nprint (train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean())","73466f2a":"for dataset in full_data:\n    # Mapping Sex\n    dataset['Sex'] = dataset['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\n    \n    # Mapping titles\n    title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n    \n    # Mapping Embarked\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\n    # Mapping Age\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] \t\t\t\t\t       = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']                           = 4\n\n# Feature Selection\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp', 'FamilySize']\ntrain = train.drop(drop_elements, axis = 1)\ntrain = train.drop(['CategoricalAge'], axis = 1)\n\ntest  = test.drop(drop_elements, axis = 1)\n\nprint (train.head(10))\n\ntrain = train.values\ntest  = test.values","3bece7d1":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\n\nclassifiers = [\n    KNeighborsClassifier(3),\n    SVC(probability=True),\n    DecisionTreeClassifier(),\n    RandomForestClassifier(),\n\tAdaBoostClassifier(),\n    GradientBoostingClassifier(),\n    GaussianNB(),\n    LinearDiscriminantAnalysis(),\n    QuadraticDiscriminantAnalysis(),\n    LogisticRegression()]\n\nlog_cols = [\"Classifier\", \"Accuracy\"]\nlog \t = pd.DataFrame(columns=log_cols)\n\nsss = StratifiedShuffleSplit(n_splits=10, test_size=0.1, random_state=0)\n\nX = train[0::, 1::]\ny = train[0::, 0]\n\nacc_dict = {}\n\nfor train_index, test_index in sss.split(X, y):\n\tX_train, X_test = X[train_index], X[test_index]\n\ty_train, y_test = y[train_index], y[test_index]\n\t\n\tfor clf in classifiers:\n\t\tname = clf.__class__.__name__\n\t\tclf.fit(X_train, y_train)\n\t\ttrain_predictions = clf.predict(X_test)\n\t\tacc = accuracy_score(y_test, train_predictions)\n\t\tif name in acc_dict:\n\t\t\tacc_dict[name] += acc\n\t\telse:\n\t\t\tacc_dict[name] = acc\n\nfor clf in acc_dict:\n\tacc_dict[clf] = acc_dict[clf] \/ 10.0\n\tlog_entry = pd.DataFrame([[clf, acc_dict[clf]]], columns=log_cols)\n\tlog = log.append(log_entry)\n\nplt.xlabel('Accuracy')\nplt.title('Classifier Accuracy')\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x='Accuracy', y='Classifier', data=log, color=\"b\")","8c6fcd85":"from sklearn.impute import SimpleImputer\n\nmy_imputer = SimpleImputer()\ntest = my_imputer.fit_transform(test)\n\ncandidate = GradientBoostingClassifier()\ncandidate.fit(train[0::, 1::], train[0::, 0])\nresult = candidate2.predict(test)\n\nhit = 0\nmiss = 0\ni = 0\nfor line in sub['Survived']:\n    if line == result[i]:\n        hit = hit + 1\n    else:\n        miss = miss + 1\n    i = i+1   \n        \nprint('avg:',hit\/i,hit,miss)","232c5d82":"### Embarked Location","c27fb254":"# Predict","fa12511a":"## Data\n\nClean everthing and parsing data to numbers","8cb2c91e":"### SibSp and Parch","b3820724":"### Passager Class","34db7329":"### Title\n\nAnalyzing the name doesn't seem very interesting to us, for example, we can see how much a title affects survival rates.","a875b646":"## Survival probabilites","71676d4a":"## Classifier\n\nWe can test accuracy of some classifiers to chose the best for us","d4185820":"### Sex","ae05a30d":"### Age"}}