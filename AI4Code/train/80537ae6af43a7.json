{"cell_type":{"648aa867":"code","4ce17604":"code","b0bfa6b1":"code","9df1d7ef":"code","cbe561a7":"code","1dcb2038":"code","43cb692f":"code","e72b299a":"code","0875c19e":"code","295b4e80":"code","3c9b1e4a":"code","5b046e45":"code","903d96cd":"code","8823a913":"code","497d1346":"code","bd6173df":"code","f3eaf952":"code","8c566cc9":"markdown","0065c5fc":"markdown","60eb8cc8":"markdown","eb8e32f7":"markdown","81935bf0":"markdown","6ee99d42":"markdown"},"source":{"648aa867":"!pip install openpyxl","4ce17604":"# Magic command for graphing\n%matplotlib inline\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as tkr\nimport numpy as np\n# To place NBA team logos as scatter points\nfrom matplotlib.offsetbox import OffsetImage, AnnotationBbox\nfrom matplotlib.cbook import get_sample_data","b0bfa6b1":"# Create path string to retreive file\nnba_source_file_path = \"..\/input\/nba-conference-wise-standings\/nba_conf_wise.xlsx\"","9df1d7ef":"# read excel data into Pandas data frames. Using one dataframe each for eastern and western conference for ease of analysis and graphing\nnba_east_df = pd.read_excel(nba_source_file_path,\"eastern\")\nnba_west_df = pd.read_excel(nba_source_file_path,\"western\")\n","cbe561a7":"# Add the conference field in the eastern conference dataframe\nnba_east_df[\"Conf\"] = \"Eastern\"\nnba_east_df.head()","1dcb2038":"# Add the conference field in the eastern conference dataframe\nnba_west_df[\"Conf\"] = \"Western\"\nnba_west_df.head()","43cb692f":"# create a combined dataframe from the two conference dataframe, rename the conference column header to team\nnba_full_df = pd.concat([nba_east_df.rename(columns ={\"Eastern Conference\":\"Team\"}),nba_west_df.rename(columns = {\"Western Conference\":\"Team\"})],ignore_index = 1)\nnba_full_df","e72b299a":"# loop through the dataframe to remove the conference wise seeding in the team name column\nfor x in range(len(nba_full_df[\"Team\"])):\n    nba_full_df[\"Team\"][x] = nba_full_df[\"Team\"][x].rsplit(\"(\")[0]","0875c19e":"# view the output to confirm removal of seed from team name column\nnba_full_df.head()","295b4e80":"# Calculate the points ratio which is equal to the total points scored divided by total points given away\n# The ratio is the same if we divide PointsScored per game with PointsAway per game\nnba_full_df[\"pts_ratio\"] = nba_full_df[\"PS\/G\"]\/nba_full_df[\"PA\/G\"]\n\n# Calculate win ratio which is Number of wins divided by total games played\nnba_full_df[\"win_ratio\"]=nba_full_df[\"W\"]\/(nba_full_df[\"W\"]+nba_full_df[\"L\"])\n","3c9b1e4a":"# Using basketballs pythagoras theorem, we loop through the dataframe to find the MAD(mean average deviation) to arrive at the\n# exponential(exp) value with minimum MAD. More information about this is in the summary\nmin =10\nmin_exp = 0\nfor exp in range(100): \n    MAD =abs(nba_full_df[\"pts_ratio\"]**exp\/(nba_full_df[\"pts_ratio\"]**exp+1)-nba_full_df[\"win_ratio\"]).mean()\n    if MAD < min:\n        min = MAD\n        min_exp = exp\nprint(min_exp)\nprint(min)\nnba_full_df[\"pred_win_ratio\"]= nba_full_df[\"pts_ratio\"]**min_exp\/(nba_full_df[\"pts_ratio\"]**min_exp+1)\nnba_full_df.head()","5b046e45":"#create a scatter plot to visualize the correlation between the actual win ratio and predicted win ratio\nfig, ax = plt.subplots(figsize=(4,4))\nax.scatter(nba_full_df[\"win_ratio\"],nba_full_df[\"pred_win_ratio\"],c = \"skyblue\",\n        edgecolor=\"black\", linewidths=1,\n      alpha=0.8)\nplt.title('Actual vs Predicted Win ratio', fontsize=10)       \nplt.xlabel(\"Actual Win ratio\", fontsize=8)\nplt.ylabel(\"Predicted Win ratio\", fontsize=8)\n","903d96cd":"# using the predicted win ratio, we calculate the total predicted wins of each team from the remaining games\n# using 72 because the 2020-21 season is shortened to 72 games per team instead of the ususal 82 games\ngames_remaining = 72-nba_full_df[\"W\"]-nba_full_df[\"L\"]\nnba_full_df[\"PW\"] = (nba_full_df[\"pred_win_ratio\"]*games_remaining).round(0)\n# the assumption follows that the teams will lose the remaining games other than the predicted wins\nnba_full_df[\"PL\"] = games_remaining - nba_full_df[\"PW\"]\n# add existing actual wins to predicted wins for remainder games to arrive at total predicted wins for season\nnba_full_df[\"PW\"] = nba_full_df[\"PW\"]+nba_full_df[\"W\"]\nnba_full_df[\"PL\"] = nba_full_df[\"PL\"]+nba_full_df[\"L\"]\nnba_full_df.head()","8823a913":"# create conference wise dataframes for predicted standings\nnba_west_pred_standings = nba_full_df[nba_full_df[\"Conf\"]==\"Western\"].sort_values(['PW'],ascending = 0).reset_index(drop=1)\nnba_east_pred_standings = nba_full_df[nba_full_df[\"Conf\"]==\"Eastern\"].sort_values(['PW'],ascending = 0).reset_index(drop=1)\nseeds = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n# add initial seeding to the teams, conflicts for teams with equal records will be sorted later\nnba_west_pred_standings.insert(0,\"seed\",seeds)\nnba_east_pred_standings.insert(0,\"seed\",seeds)","497d1346":"nba_west_pred_standings","bd6173df":"nba_east_pred_standings","f3eaf952":"# create a function for the conference wise scatter plots\ndef main(conf):\n    # list to store url paths for each team\n    image_path = []\n    # list to store team names to use for image retreival along with image_path\n    team_name = []\n    # scatter point color\n    color = \"skyblue\"\n    # loop to get the last word of a teams name, for the 76sixers, the name referred in all URLs is sixers\n    for x in conf[\"Team\"]:\n        x = x.split()\n        if x[-1] == \"76ers\":\n            x[-1] = \"sixers\"\n            # since sixers are in the eastern conference this next statement changes the color of the scatter points for the eastern conference plot\n            color = \"coral\"\n        #add the names to team_name list but in all lowercase\n        team_name.append(x[-1].lower())\n    # loop to create image path for images by adding teamname and extension\n    for n in team_name:\n        image_path.append('..\/input\/team-logos\/'+n+'.png')\n    # create a scatter plot based on parameters to the main function\n    fig, ax = plt.subplots(figsize=(7,7))\n    ax.scatter(conf[\"seed\"],conf[\"PW\"],s=10*conf[\"PW\"],c = color,\n      edgecolor=\"black\", linewidths=1,\n      alpha=0.8, label = conf[\"Conf\"][0])\n    # code to run the imscatter function which replaces scatter points with individual team logos, cannot use this in public websites like Kaggle due to copyright concerns\n    for x, y, image_pat in zip(conf[\"seed\"],conf[\"PW\"],image_path):\n        imscatter(x, y, image_pat, zoom=0.1, ax=ax)\n\n    # invert x-axis for better looking plots\n    plt.gca().invert_xaxis()\n    # set X and Y axis ticks\n    plt.gca().set_xticks(conf[\"seed\"])\n    plt.gca().set_yticks(conf[\"PW\"])\n    #for i, txt in enumerate(team_name):\n    #    ax.annotate(txt, (conf[\"seed\"][i]+0.5,conf[\"PW\"][i]-2))\n    \n    # add titles and labels\n    plt.title('Predicted Wins and playoff seeding', fontsize=10)       \n    plt.xlabel(\"Playoff seed\", fontsize=10)\n    plt.ylabel(\"Predicted Wins\", fontsize=10)\n    # set grids to show below the scatter points\n    ax.set_axisbelow(True)\n    # add grid lines\n    ax.yaxis.grid(color='gray', linestyle='dashed',alpha = 0.2)\n    ax.xaxis.grid(color='gray', linestyle='dashed',alpha = 0.2)\n    # set minor ticks on Y-axis for ease of reading the graphs\n    ax.yaxis.set_minor_locator(tkr.MultipleLocator(1))\n    # add a legend\n    #plt.legend()\n\n    # function to plot the images of indiviual team logos on to the scatter plot\ndef imscatter(x, y, image, ax=None, zoom=1):\n    if ax is None:\n        ax = plt.gca()\n    try:\n        image = plt.imread(image)\n    except TypeError:\n        # Likely already an array...\n        pass\n    im = OffsetImage(image, zoom=zoom)\n    x, y = np.atleast_1d(x, y)\n    artists = []\n    for x0, y0 in zip(x, y):\n        ab = AnnotationBbox(im, (x0, y0), xycoords='data', frameon=False)\n        artists.append(ax.add_artist(ab))\n    ax.update_datalim(np.column_stack([x, y]))\n    ax.autoscale()\n    return artists\n# call main function for each of the conference predicted standings data frames\nmain(nba_east_pred_standings)\nmain(nba_west_pred_standings)\nplt.show()\n\n","8c566cc9":"<h1> 3. Cleaning <\/h1>\n<div style=\"font-family:calibri; font-size:120%;\"><p> \nThe data cleaning for the above bullets is done in this section:\n    \n*     The team name is split so as to remove the brackets\n*     The header of the team name column is changed to \"Team\" while merging the conference wise dataframes into a single dataframe\n    <\/p>\n<\/div>\n\n","0065c5fc":"<h1> 2. Data <\/h1>\n<div style=\"font-family:calibri;font-size:120%;\">\n<p> We start off by loading the data in the excel file. The data was picked up from the from the Basketball Reference 2020-21 NBA season summary page. I used a basic crude and amateur data collection method (copy and paste into excel)of the first two tables in the webpage.\n\nThe data looks good except for:\n* The team name has the current conference playoff seed\/rank in brackets\n* The header of the team name column is the conference name\n    <\/p>\n\n\n","60eb8cc8":"<h1> 4. Calculation core <\/h1>\n<div style=\"font-family:calibri; font-size:120%;\"><p> \nThree calculations are done in this section:\n    \n*     Find the exponent (for the pythagorean expecatition theorem) which gives least Mean Average Deviation\n*     Using the exponent, calculate the predicted win ratio for each team\n*     Using the predicted win ratio, calculate the predicted wins for the season\n    <\/p>\n<\/div>\n\n","eb8e32f7":"<img src=\"https:\/\/images.pexels.com\/photos\/2291004\/pexels-photo-2291004.jpeg?cs=srgb&dl=pexels-sergio-souza-2291004.jpg&fm=jpg\" height =800 width = 400 style=\"transform:rotate(90deg);\">\n\n<div style=\"font-family:calibri;padding:5%;font-size:120%;\">\n<h1 align = center> \ud83c\udfc0 Predicting the NBA 2020-21 season playoff seeds \ud83c\udfc0 <\/h1>\n\n<h1> 1. Introduction \ud83d\udcd6<\/h1>\n<p style=\"font-family: calibri;\">I, Rama Goparaju, have been a lifelong sports fan. Along with this,I have always been interested in statistics. <br>\n    \nBefore starting this blog, I had a background in computer science, but I had absolutely no programming experience with Python. After learning the some basics of Python and the Pandas library (like how to make lists, dataframes, print things, create graphs etc.), I was eager to jump in to my first project. Through doing these projects, I'm hoping to improve my coding skills and gather better understanding of statistics and data science in sports. <br>\n\nThis is my first attempt at a Kaggle notebook.<\/p>\n    \n\n<div style = \"font-family:calibri;background-color:skyblue;padding:3%;\">\n<p>Before kicking off, I want to thank a few people for the amazing inspiration:<br>\n1. Kenneth Jee (https:\/\/www.kennethjee.com\/) for the highly informative videos on his youtube channel, and for suggesting...<br>\n2. Wayne Winston's book \"Mathletics: How Gamblers, Managers, and Sports Enthusiasts Use Mathematics in Baseball, Basketball, and Football\" (ISBN: 978-0691154589)<br>\n3. The book is where I picked up the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Pythagorean_expectation#:~:text=Pythagorean%20expectation%20is%20a%20sports,runs%20they%20scored%20and%20allowed\"> Pythagorean expecatation in sports<\/a> that is the center piece of this analysis<br>\n4. <a href=\"https:\/\/gist.github.com\/feeblefruits\/20e7f98a4c6a47075c8bfce7c06749c2\">Jacques Coetzee\n    github code<\/a> which helped me put the team logos on the scatter plot<\/p>\n<\/div>\n<br>\n<br>\n<div style = \"font-family:calibri; background-color:coral;padding:3%;\">\nThe data used in this analysis is picked up from <a href = \"https:\/\/www.basketball-reference.com\/leagues\/NBA_2021.html#all_team-stats-per_poss\">Basketball Reference conference standings tables <\/a>\n    <\/div><br>\nAnd finally here goes...\n<\/div>\n    ","81935bf0":"<h1> 5. Final thoughts <\/h1>\n<div style=\"font-family:calibri; font-size:120%;\"><p> \nSince this is first ever notebook, please feel free to suggest any improvements and next steps in the comments.\n\nWhere I want to go next:\n* Pull data using API requests\n* Increasing complexity of the core analysis involved - player based ratings and analysis\n* Better looking visualizations - using other libraries","6ee99d42":"<h1> 5. Visualize <\/h1>\n<div style=\"font-family:calibri; font-size:120%;\"><p> \nThe results are visualized in this sections. Two scatter plots, one for each conference are plotted with team seed against predicted wins as the x and y axis respectively\n    \n*     I've used the team logos in place of scatter points for better visualization and also learnt something new there\n* Visualization makes it very intuitive to reach a simple conclusion that the western conference is relatively more competitive than the easter conference where there is a clear runaway top 3.    \n    <\/p>\n<\/div>\n\n"}}