{"cell_type":{"ef7afc81":"code","8d1da7ac":"code","de608fe1":"code","513f699c":"code","1ee387fe":"code","efdbc3bb":"code","666b712d":"code","6c495722":"code","c815caa2":"code","a7630b5c":"code","2bbc3e9a":"code","00ad89d4":"code","e3e1850f":"code","e6fdde5f":"code","924b0271":"code","765d3c1d":"code","c76fe163":"code","d4e833aa":"code","dbe5b97b":"code","88608c77":"code","0019cf7e":"code","7b2c4892":"code","439e1398":"code","f6f79cff":"code","0208125e":"code","bf64be84":"code","46c5f9b6":"code","4b2a70f1":"code","4528097d":"code","c5c1e948":"code","b8bc23ca":"code","b6e9910d":"code","0f8687d8":"code","263de393":"code","f3958017":"code","0d434c2c":"code","6f537a98":"code","9bce69de":"code","ff4835ef":"code","93241626":"code","33e15589":"code","e890b834":"code","b00710b4":"code","b6d2ad3c":"code","030c2dd1":"markdown","decfeafe":"markdown","69585edd":"markdown","55c0271a":"markdown","6a5ff845":"markdown","a3af7ddc":"markdown","3f099b64":"markdown","6e67bc2c":"markdown","c6d24a44":"markdown","e7cbc3d3":"markdown","6643e508":"markdown","088fc3cd":"markdown"},"source":{"ef7afc81":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\n%matplotlib inline\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier,NeighborhoodComponentsAnalysis,LocalOutlierFactor\nfrom sklearn.decomposition import PCA\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","8d1da7ac":"data = pd.read_csv(\"\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv\")","de608fe1":"data.drop([\"Unnamed: 32\",\"id\"],axis=1,inplace=True)","513f699c":"data.head()","1ee387fe":"data.rename(columns={\"diagnosis\":\"target\"},inplace=True)","efdbc3bb":"data.head()","666b712d":"sns.countplot(data[\"target\"]);","6c495722":"print(data.target.value_counts())","c815caa2":"data[\"target\"] = [1 if i.strip()==\"M\" else 0 for i in data.target]","a7630b5c":"data.shape","2bbc3e9a":"corr_matrix = data.corr()\nsns.clustermap(corr_matrix, annot = True, fmt = \".2f\")\nplt.title(\"Correlation Between Features\")\nplt.show()","00ad89d4":"threshold = 0.75\nfilter_ = np.abs(corr_matrix[\"target\"]) > threshold\ncorr_features = corr_matrix.columns[filter_].tolist()\nsns.clustermap(data[corr_features].corr(),annot=True,fmt=\".2f\",figsize=(12,8));\nplt.title(\"Correlation Between Features w 0.75 Threshold\");\nplt.show();","e3e1850f":"data_melted = pd.melt(data,id_vars=\"target\",var_name=\"features\",value_name=\"value\")","e6fdde5f":"plt.figure(figsize=(12,8));\nsns.boxplot(x=\"features\",y=\"value\",hue=\"target\",data=data_melted);\nplt.xticks(rotation=90);\nplt.show();","924b0271":"sns.pairplot(data[corr_features],diag_kind=\"kde\",markers=\"*\",hue=\"target\")\nplt.show();","765d3c1d":"y = data.target\nx = data.drop([\"target\"],axis=1)\ncolumns = x.columns.tolist()","c76fe163":"#Local Outlier Factor\nclf = LocalOutlierFactor()","d4e833aa":"y_pred = clf.fit_predict(x)\ny_pred","dbe5b97b":"x_score = clf.negative_outlier_factor_\noutlier_score = pd.DataFrame()\noutlier_score[\"score\"] = x_score\noutlier_score","88608c77":"threshold = -2\nfilter_ = outlier_score[\"score\"] < threshold\noutlier_index = outlier_score[filter_].index.tolist()","0019cf7e":"radius = (x_score.max() - x_score)\/(x_score.max() - x_score.min())\noutlier_score[\"radius\"] = radius\noutlier_score","7b2c4892":"plt.figure()\nplt.scatter(x.iloc[outlier_index,0],x.iloc[outlier_index,1],color=\"blue\",s=50,label=\"Outliers\");\nplt.scatter(x.iloc[:,0],x.iloc[:,1],s=500*radius,edgecolors=\"r\",facecolors=\"none\",label=\"Outlier Scores\");\nplt.legend()\nplt.show()","439e1398":"#Drop Outliers Index\nx = x.drop(outlier_index)\ny = y.drop(outlier_index).values","f6f79cff":"test_size = 0.3\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size = test_size, random_state = 42)","0208125e":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\nX_train_df = pd.DataFrame(X_train, columns = columns)\nX_train_df_describe = X_train_df.describe()\nX_train_df[\"target\"] = Y_train","bf64be84":"X_train_df_describe","46c5f9b6":"X_train_df","4b2a70f1":"data_melted = pd.melt(X_train_df, id_vars = \"target\",\n                      var_name = \"features\",\n                      value_name = \"value\")\n\nplt.figure(figsize=(12,8))\nsns.boxplot(x = \"features\", y = \"value\", hue = \"target\", data = data_melted)\nplt.xticks(rotation = 90)\nplt.show()","4528097d":"sns.pairplot(X_train_df[corr_features], diag_kind = \"kde\", markers = \"+\",hue = \"target\")\nplt.show();","c5c1e948":"knn = KNeighborsClassifier(n_neighbors=2)\nknn.fit(X_train,Y_train)\ny_pred = knn.predict(X_test)\ncm = confusion_matrix(Y_test,y_pred)\nacc = accuracy_score(Y_test,y_pred)\nscore = knn.score(X_test,Y_test)\nprint(\"Score: \",score)\nprint(\"CM: \",cm)\nprint(\"Basic KNN Acc: \",acc)","b8bc23ca":"def KNN_Best_Params(x_train, x_test, y_train, y_test):\n    \n    k_range = list(range(1,31))\n    weight_options = [\"uniform\",\"distance\"]\n    print()\n    param_grid = dict(n_neighbors = k_range, weights = weight_options)\n    \n    knn = KNeighborsClassifier()\n    grid = GridSearchCV(knn, param_grid, cv = 10, scoring = \"accuracy\")\n    grid.fit(x_train, y_train)\n    \n    print(\"Best training score: {} with parameters: {}\".format(grid.best_score_, grid.best_params_))\n    print()\n    \n    knn = KNeighborsClassifier(**grid.best_params_)\n    knn.fit(x_train, y_train)\n    \n    y_pred_test = knn.predict(x_test)\n    y_pred_train = knn.predict(x_train)\n    \n    cm_test = confusion_matrix(y_test, y_pred_test)\n    cm_train = confusion_matrix(y_train, y_pred_train)\n    \n    acc_test = accuracy_score(y_test, y_pred_test)\n    acc_train = accuracy_score(y_train, y_pred_train)\n    print(\"Test Score: {}, Train Score: {}\".format(acc_test, acc_train))\n    print()\n    print(\"CM Test: \",cm_test)\n    print(\"CM Train: \",cm_train)\n    \n    return grid","b6e9910d":"grid = KNN_Best_Params(X_train,X_test,Y_train,Y_test)","0f8687d8":"scaler = StandardScaler()\nx_scaled = scaler.fit_transform(x)","263de393":"pca = PCA(n_components = 2)\npca.fit(x_scaled)\nX_reduced_pca = pca.transform(x_scaled)","f3958017":"pca_data = pd.DataFrame(X_reduced_pca, columns = [\"p1\",\"p2\"])\npca_data[\"target\"] = y","0d434c2c":"sns.scatterplot(x = \"p1\", y = \"p2\", hue = \"target\", data = pca_data);\nplt.title(\"PCA: p1 vs p2\");","6f537a98":"X_train_pca, X_test_pca, Y_train_pca, Y_test_pca = train_test_split(X_reduced_pca, y, test_size = test_size, random_state = 42)\ngrid_pca = KNN_Best_Params(X_train_pca, X_test_pca, Y_train_pca, Y_test_pca)","9bce69de":"# visualize \ncmap_light = ListedColormap(['orange',  'cornflowerblue'])\ncmap_bold = ListedColormap(['darkorange', 'darkblue'])\n\nh = .05 # step size in the mesh\nX = X_reduced_pca\nx_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\ny_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h),\n                     np.arange(y_min, y_max, h))\n\nZ = grid_pca.predict(np.c_[xx.ravel(), yy.ravel()])\n\n# Put the result into a color plot\nZ = Z.reshape(xx.shape)\nplt.figure();\nplt.pcolormesh(xx, yy, Z, cmap=cmap_light);\n\n# Plot also the training points\nplt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold,\n            edgecolor='k', s=20);\nplt.xlim(xx.min(), xx.max());\nplt.ylim(yy.min(), yy.max());\nplt.title(\"%i-Class classification (k = %i, weights = '%s')\"\n          % (len(np.unique(y)),grid_pca.best_estimator_.n_neighbors, grid_pca.best_estimator_.weights));\n","ff4835ef":"nca = NeighborhoodComponentsAnalysis(n_components = 2, random_state = 42)\nnca.fit(x_scaled, y)\nX_reduced_nca = nca.transform(x_scaled)\n\nnca_data = pd.DataFrame(X_reduced_nca, columns = [\"p1\",\"p2\"])\nnca_data[\"target\"] = y\n\nsns.scatterplot(x = \"p1\",  y = \"p2\", hue = \"target\", data = nca_data);\nplt.title(\"NCA: p1 vs p2\");","93241626":"X_train_nca, X_test_nca, Y_train_nca, Y_test_nca = train_test_split(X_reduced_nca, y, test_size = test_size, random_state = 42)\ngrid_nca = KNN_Best_Params(X_train_nca, X_test_nca, Y_train_nca, Y_test_nca)","33e15589":"cmap_light = ListedColormap(['orange',  'cornflowerblue'])\ncmap_bold = ListedColormap(['darkorange', 'darkblue'])\n\nh = .2 # step size in the mesh\nX = X_reduced_nca\nx_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\ny_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h),\n                     np.arange(y_min, y_max, h))\n\nZ = grid_nca.predict(np.c_[xx.ravel(), yy.ravel()])\n\n# Put the result into a color plot\nZ = Z.reshape(xx.shape)\nplt.figure()\nplt.pcolormesh(xx, yy, Z, cmap=cmap_light);\n\n# Plot also the training points\nplt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold,\n            edgecolor='k', s=20);\nplt.xlim(xx.min(), xx.max());\nplt.ylim(yy.min(), yy.max());\nplt.title(\"%i-Class classification (k = %i, weights = '%s')\"\n          % (len(np.unique(y)),grid_nca.best_estimator_.n_neighbors, grid_nca.best_estimator_.weights));","e890b834":"knn = KNeighborsClassifier(**grid_nca.best_params_)\nknn.fit(X_train_nca,Y_train_nca)\ny_pred_nca = knn.predict(X_test_nca)\n\nacc_test_nca = accuracy_score(y_pred_nca,Y_test_nca)\nknn.score(X_test_nca,Y_test_nca)","b00710b4":"test_data = pd.DataFrame()\n\ntest_data[\"X_test_nca_p1\"] = X_test_nca[:,0]\ntest_data[\"X_test_nca_p2\"] = X_test_nca[:,1]\n\ntest_data[\"y_pred_nca\"] = y_pred_nca\ntest_data[\"Y_test_nca\"] = Y_test_nca","b6d2ad3c":"plt.figure(figsize=(12,8));\nsns.scatterplot(x=\"X_test_nca_p1\", y=\"X_test_nca_p2\", hue=\"Y_test_nca\",data=test_data);\n\ndiff = np.where(y_pred_nca!=Y_test_nca)[0]\nplt.scatter(test_data.iloc[diff,0],test_data.iloc[diff,1],label = \"Wrong Classified\",alpha = 0.2,color = \"red\",s = 1000);","030c2dd1":"### *Choose Best Parameters*","decfeafe":"## Outlier Detection","69585edd":"### *Pair Plot*","55c0271a":"### *Neighborhood Component Analysis (NCA)*","6a5ff845":"### *Correlation Matrix*","a3af7ddc":"### *Principal Component Analysis(PCA)* ","3f099b64":"## Basic KNN Model","6e67bc2c":"## Import Data","c6d24a44":"## Train Test Split","e7cbc3d3":"## EDA","6643e508":"### *Box Plot*","088fc3cd":"## Standardization"}}