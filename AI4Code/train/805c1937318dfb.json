{"cell_type":{"0789f671":"code","b8a09179":"code","c502c33a":"code","09b2f959":"code","153195ff":"code","8eab89fa":"code","7e9b7961":"code","d09f7542":"code","c0535ecc":"code","cd92bafb":"code","30e1ee33":"code","d86fd830":"code","53de7a90":"code","58d7266c":"code","61e874f2":"code","52444f8c":"code","9aad053d":"code","3137e4f2":"code","4d667635":"code","11887cd7":"code","a4764ee9":"code","c0663072":"code","c557ffe6":"code","5890a46e":"code","e2110292":"code","5f8ffdb5":"code","9244d683":"code","13f79c32":"code","74412f8b":"code","10060b20":"code","4ad78a5a":"code","cdb39ef5":"code","324baaf3":"code","2694116b":"code","ea897eff":"code","85f99491":"code","bd2fad0d":"code","9ae1fbfb":"code","7fffda8c":"code","16679fce":"code","1dc7ef1a":"code","f4313781":"code","77f74b97":"code","facc439c":"code","e2a848ce":"code","190217a7":"code","b6ed9d32":"code","9f2fbadb":"code","77cd6d01":"code","8f7f50f5":"code","0ad3e68b":"code","f20a6519":"code","4e653b79":"code","871edddd":"code","335c20b5":"code","50464084":"code","d0e50db7":"code","6f2a395c":"code","a3f61a42":"code","70f5e70d":"code","c436098e":"code","de29006b":"code","efe58137":"code","350e2b1d":"code","c475399b":"code","9d225703":"code","3fc9401a":"code","1f54503c":"code","21bf4fb3":"code","391e606a":"code","333c2891":"code","7c440faa":"code","724cd6a8":"code","eb7c4977":"code","057d57fb":"code","46a3afec":"code","3b3c13fe":"code","75541dc6":"code","5e96804f":"code","045efc25":"code","e9dc5e15":"code","5082258a":"code","573c49e7":"code","1d67b553":"code","3ef0ec66":"code","80a23bcf":"code","8f8a0614":"code","feaca161":"code","133f7b9e":"code","f338c795":"markdown","e5e988da":"markdown","8aa72d33":"markdown","dd125a60":"markdown","0be0293a":"markdown","120cdb0f":"markdown","3405cf09":"markdown","7ffc7f89":"markdown","ec3ad41e":"markdown","b6a83ec7":"markdown","96e9248a":"markdown","d76081d4":"markdown","6e839545":"markdown","cb8c2e0b":"markdown","6048aff7":"markdown"},"source":{"0789f671":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b8a09179":"df_train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-3\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-3\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-3\/submission.csv')","c502c33a":"df_train","09b2f959":"df_test","153195ff":"sample_submission","8eab89fa":"train_countries = list(df_train['Country_Region'].unique())\ntest_countries = list(df_test['Country_Region'].unique())","7e9b7961":"print(len(train_countries))\nprint(len(test_countries))\nprint(len(set(train_countries).intersection(set(test_countries))))","d09f7542":"df_train_original = df_train\ndf_test_original = df_test","c0535ecc":"\ndf_train = df_train_original.replace(np.nan, '', regex=True)\ndf_test = df_test_original.replace(np.nan, '', regex=True)","cd92bafb":"df_train[['Country_Region', 'Province_State']]","30e1ee33":"df_train['location'] = df_train[['Country_Region', 'Province_State']].apply(lambda x: '-'.join(x), axis=1)\ndf_test['location'] = df_test[['Country_Region', 'Province_State']].apply(lambda x: '-'.join(x), axis=1)","d86fd830":"locations_train = df_train['location'].unique()\nlocations_test = df_train['location'].unique()","53de7a90":"print(len(locations_train))\nprint(len(locations_test))","58d7266c":"df_train[df_train['ConfirmedCases'] > 0]","61e874f2":"groups_train = df_train.groupby(['Country_Region', 'Province_State'])\nprint(len(groups_train))","52444f8c":"# groups_train = df_train[df_train['ConfirmedCases'] > 0].groupby(['Country\/Region', 'Province\/State'])\n# print(len(groups_train))\n# groups_test = df_test[df_test['ConfirmedCases'] > 0].groupby('location')","9aad053d":"# groups.get_group('China-Hebei')\nmin_date = groups_train['Date'].min()","3137e4f2":"min_date","4d667635":"min_date_sorted = min_date.sort_values()","11887cd7":"for x,y in zip(min_date_sorted.index, min_date_sorted):\n    print(x,y)","a4764ee9":"list(df_train[df_train['Country_Region'] == 'China']['Province_State'])","c0663072":"df_train[(df_train['Country_Region'] == 'Pakistan')]","c557ffe6":"df_train[(df_train['Country_Region'] == 'US') & (df_train['Province_State'] == 'Washington')]","5890a46e":"index = 0\nfor x,y in zip(min_date_sorted.index, min_date_sorted):\n    print(index, x, y)\n    index = index + 1","e2110292":"min_date_sorted.shape","5f8ffdb5":"import matplotlib.pyplot as plt ","9244d683":"index = 34","13f79c32":"record = df_train[(df_train['Country_Region'] == min_date_sorted.index[index][0]) & (df_train['Province_State'] == min_date_sorted.index[index][1])]","74412f8b":"# x axis values \nx = record['Date']\n# corresponding y axis values \ny1 = record['ConfirmedCases']\ny2 = record['Fatalities']\n  \n# plotting the points  \nplt.plot(x, y1, label = \"Confirmed Cases\") \n# plt.plot(x, y2, label = \"Fatalities\") \n# naming the x axis \nplt.xlabel('Date') \n# naming the y axis \nplt.ylabel('Label') \n  \n# giving a title to my graph \nplt.title(str(min_date_sorted.index[index][0]) + \" \" + str(min_date_sorted.index[index][1]) + ' - Confirmed Cases') \n  \n# function to show the plot \nplt.show() ","10060b20":"# x axis values \nx = record['Date']\n# corresponding y axis values \ny1 = record['ConfirmedCases']\ny2 = record['Fatalities']\n  \n# plotting the points  \n# plt.plot(x, y1, label = \"Confirmed Cases\") \nplt.plot(x, y2, label = \"Fatalities\") \n# naming the x axis \nplt.xlabel('Date') \n# naming the y axis \nplt.ylabel('Label') \n  \n# giving a title to my graph \nplt.title(str(min_date_sorted.index[index][0]) + \" \" + str(min_date_sorted.index[index][1]) + ' - Fatalities') \n  \n# function to show the plot \nplt.show() ","4ad78a5a":"import numpy as np \n  \n# curve-fit() function imported from scipy \nfrom scipy.optimize import curve_fit \n  \nfrom matplotlib import pyplot as plt \n  \n# numpy.linspace with the given arguments \n# produce an array of 40 numbers between 0 \n# and 10, both inclusive \nx = np.linspace(0, 10, num = 40) \n  \n  \n# y is another array which stores 3.45 times \n# the sine of (values in x) * 1.334.  \n# The random.normal() draws random sample  \n# from normal (Gaussian) distribution to make \n# them scatter across the base line \ny = 3.45 * np.sin(1.334 * x) + np.random.normal(size = 40) \n  \n# Test function with coefficients as parameters \ndef test(x, a, b): \n    return a * np.sin(b * x) \n  \n# curve_fit() function takes the test-function \n# x-data and y-data as argument and returns  \n# the coefficients a and b in param and \n# the estimated covariance of param in param_cov \nparam, param_cov = curve_fit(test, x, y)","cdb39ef5":"from numpy import exp, linspace, random, log\nimport math\nt = np.arange(0., 90., 1)\n\n# red dashes, blue squares and green triangles\n# f = [70000*1\/(1+math.pow(math.e,-(x-30)\/2)) for x in t]\n# f = [700*1\/(1+math.pow(math.e,-(x-20)\/2)) * (700*1\/(1+math.pow(math.e,-(x-40)\/2)) + 700) for x in t]\n\nf = 9000*1\/(1+exp(-1*(t-42)\/2.7)) + 50*log(1+exp((t-50))) - 0\nprint(f)\nplt.plot(t, f, 'r--')\nplt.show()","324baaf3":"record = df_train[(df_train['Country_Region'] == min_date_sorted.index[index][0]) & (df_train['Province_State'] == min_date_sorted.index[index][1])]\nrecord = record[record['ConfirmedCases'] > 0]\n\nfrom datetime import datetime\n# datetime.date.today()\nbase_date_object = datetime.strptime('2020-01-22', \"%Y-%m-%d\").date()\nrecord['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in record['Date']]\n","2694116b":"\nrecord2 = record[record['Fatalities'] > 0]\n# x axis values \nx = record['days'].values\nx2 = record2['days'].values\n# corresponding y axis values \ny1 = record['ConfirmedCases'].values\ny2 = record2['Fatalities'].values","ea897eff":"# print(record['Date'][3600])\n\nx","85f99491":"# record['days']\ny2","bd2fad0d":"from scipy.optimize import curve_fit\nfrom numpy import exp, linspace, random, log\n\ndef gaussian(x, amp, cen, wid):\n    return amp * exp(-(x-cen)**2 \/ wid)\n\ndef test(x, a, b, c): \n    return a*1\/(1+exp(-b*(x-c)))\n\ndef test_linear(x, a, b, c, d, e, f): \n    return a*1\/(1+exp(-b*(x-c))) + d*log(1+exp(x-e)) - f\n\ndef custom(x, a, b , c, d, e, f, g):\n    return a*1\/(1+exp(-(x-b)\/c)) * (d*1\/(1+exp(-(x-e)\/f)) + g)","9ae1fbfb":"y_max_ = y1[-1]\ny1_prime = np.diff(y1)\ny1_prime2 = np.diff(y1_prime)\nif len(y1)>0 and len(y1_prime) > 0 and len(y1_prime2) > 0:\n    max_slope_index = len(y1_prime) - 1 - list(y1_prime)[::-1].index(max(y1_prime))\n    max_slope_range = (max_slope_index+1)\/len(y1_prime)\n    y_max_ = y1[-1]\n    if max_slope_range < 0.75:\n        if y1_prime[max_slope_index] > 0 and max_slope_range < 0.75 and (((y1_prime[max_slope_index] - max(y1_prime[-2:]))\/y1_prime[max_slope_index]) < 0.5):\n            y_max_ = y1[-1]\n            pass\n        else:\n            y_max_ = y1[max_slope_index + 1]\n            pass\n    else:\n        y_max_ = y1[-1]","7fffda8c":"y1_prime","16679fce":"y1","1dc7ef1a":"y_max_","f4313781":"# param, param_cov = curve_fit(test, np.array(x), np.array(y1), [700, 0.5, 19], bounds=([1,0.1,-30],[800,2,150]))\n# param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y1[-1]\/2, 0.5, (x[-1] - x[0])\/2 + x[0]], bounds=([y1[-1]\/2, 0.1, -30],[y1[-1] + 1000, 2, 150]))\n# param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_\/2, 0.1, 0],[y_max_*2 + 1500, 1, 150]))\nparam, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*4, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*3, 0.1, 0],[y_max_*8 + 1500, 1, 150]))\n# param, param_cov = curve_fit(test_linear, np.array(x), np.array(y1), [y_max_, 0.5, (x[-1] - x[0])\/2 + x[0], 50, 45, 0], maxfev = 100000, bounds=([y_max_\/2, 0.1, 0, 1, 30, -100],[y_max_*2 + 1500, 1, 150, 100, 100, 1000]))\n# param, param_cov = curve_fit(custom, np.array(x), np.array(y1), maxfev = 100000, bounds=([1, 0, 1, 1, 30, 1, 1], [2, 60, 8, 200, 90, 8, 1400]))\n# np.array([1,2,3,4])","77f74b97":"# gmodel = Model(custom)\n# print('parameter names: {}'.format(gmodel.param_names))\n# print('independent variables: {}'.format(gmodel.independent_vars))\n# params = gmodel.make_params()\n# result = gmodel.fit(y1, params, x=x)","facc439c":"param","e2a848ce":"index","190217a7":"y1_pred = test(x,param[0], param[1], param[2])\n# y1_pred = test_linear(x,param[0], param[1], param[2], param[3], param[4], param[5])\n# y1_pred = custom(x,param[0], param[1], param[2], param[3], param[4], param[5], param[6])\nbase_x = range(61,100,1)\n# y1_pred_test = custom(base_x, param[0], param[1], param[2], param[3], param[4], param[5], param[6])\ny1_pred_test = test(base_x, param[0], param[1], param[2])\n# y1_pred_test = test_linear(base_x, param[0], param[1], param[2], param[3], param[4], param[5])","b6ed9d32":"# x axis values \n# x = record['Date']\n# corresponding y axis values \n# y1 = record['ConfirmedCases']\n# y2 = record['Fatalities']\n# plotting the points  \nplt.plot(x, y1, label = \"Confirmed Cases\") \nplt.plot(x, y1_pred, label = \"Predicted\") \nplt.plot(base_x, y1_pred_test, label = \"Predicted\") \n# naming the x axis \nplt.xlabel('Date') \n# naming the y axis \nplt.ylabel('Label') \n  \n# giving a title to my graph \nplt.title(str(min_date_sorted.index[index][0]) + \" \" + str(min_date_sorted.index[index][1]) + ' - Confirmed Cases') \n  \n# function to show the plot \nplt.show() ","9f2fbadb":"test([-30],param[0], param[1], param[2])","77cd6d01":"np.diff(y1)","8f7f50f5":"y2 = record2['Fatalities'].values\nprint(y2)\nprint(len(y2))","0ad3e68b":"x2","f20a6519":"(x2[-1] - x2[0])\/2 + x2[0]","4e653b79":"y2[-1]","871edddd":"\n# param2, param_cov2 = curve_fit(test, np.array(x), np.array(y2), [6, 0.5, 10], bounds=([6,0.4,0],[100,0.8,150]))\nparam2, param_cov2 = curve_fit(test, np.array(x2), np.array(y2), [y2[-1]\/2, 0.5, (x2[-1] - x2[0])\/2 + x2[0] -3], bounds=([y2[-1]\/2, 0.2, 0],[y2[-1] + 1, 0.8, 150]))","335c20b5":"param2","50464084":"y2_pred = test(x2,param2[0], param2[1], param2[2])","d0e50db7":"# x axis values \n# x = record['Date']\n# corresponding y axis values \n# y1 = record['ConfirmedCases']\n# y2 = record2['Fatalities']\n  \n# plotting the points  \nplt.plot(x2, y2, label = \"Confirmed Cases\") \nplt.plot(x2, y2_pred, label = \"Fatalities\") \n# naming the x axis \nplt.xlabel('Date') \n# naming the y axis \nplt.ylabel('Label') \n  \n# giving a title to my graph \nplt.title(str(min_date_sorted.index[index][0]) + \" \" + str(min_date_sorted.index[index][1]) + ' - Fatalities') \n  \n# function to show the plot \nplt.show() ","6f2a395c":"print(x2)\nprint(y2_pred)\nprint(y2)","a3f61a42":"record","70f5e70d":"base_x = range(61,100,1)\nprint(len(base_x))\nbase_y1 = test(base_x,param[0], param[1], param[2])\nbase_y2 = test(base_x,param2[0], param2[1], param2[2])","c436098e":"base_y1","de29006b":"base_y2","efe58137":"x","350e2b1d":"day_index_pred = 0\ndiff1_list = []\ndiff2_list = []\nfor day in base_x:\n    if day in x:\n        day_index = np.where(x == day)\n        diff1 = y1[day_index] - base_y1[day_index_pred]\n        diff1_list.append(diff1)\n    if day in x2:\n        day_index = np.where(x2 == day)\n        diff2 = y2[day_index] - base_y2[day_index_pred]\n        diff2_list.append(diff2)\n    day_index_pred = day_index_pred + 1\n\ndiff1_mean = np.max(diff1_list)\ndiff2_mean = np.max(diff2_list)\n\n#     print('diff1_mean', diff1_mean)\n#     print('diff2_mean', diff2_mean)\nif np.isnan(diff1_mean):\n    pass\nelse:\n    base_y1_mod = list(np.array(base_y1) + diff1_mean)\nif np.isnan(diff2_mean):\n    pass\nelse:\n    base_y2_mod = list(np.array(base_y2) + diff2_mean)\n\nbase_y1_pred = [int(n) for n in base_y1_mod]\nbase_y2_pred = [int(m) for m in base_y2_mod]","c475399b":"print(list(base_x))\nprint(base_y1)\nprint(base_y1_mod)\nprint(base_y1_pred)\nprint(diff1_list)\nprint(diff1_mean)","9d225703":"print(list(base_x))\nprint(base_y2)\nprint(base_y2_mod)\nprint(base_y2_pred)\nprint(diff2_list)\nprint(diff2_mean)","3fc9401a":"# index = 0\n# for key_,_ in zip(min_date_sorted.index, min_date_sorted):\n    \n#     record = df_train[(df_train['Country_Region'] == key_[0]) & (df_train['Province_State'] == key_[1])]\n#     record['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in record['Date']]\n#     # x axis values \n#     x = record['days']\n#     # corresponding y axis values \n#     y1 = record['ConfirmedCases']\n#     y2 = record['Fatalities']\n#     y1_prime = np.diff(y1)\n#     print(index, key_)\n#     print(y1_prime)\n#     print('**************************************************')\n#     plt.plot(x[1:], y1_prime, label = \"Daily Increment\") \n#     # plt.plot(x, y2, label = \"Fatalities\") \n#     # naming the x axis \n#     plt.xlabel('Date') \n#     # naming the y axis \n#     plt.ylabel('Label') \n\n#     # giving a title to my graph \n#     plt.title(str(key_[0]) + \" \" + str(key_[1]) + ' - Daily Increment') \n\n#     # function to show the plot \n#     plt.show()\n#     index = index + 1\n    ","1f54503c":"test_groups = df_test.groupby(['Country_Region', 'Province_State'])","21bf4fb3":"group = test_groups.get_group((\"Afghanistan\",\"\"))\nprint(group['Date'].values)\nprint(group['ForecastId'].values)","391e606a":"index = 0\nfor key_,_ in zip(min_date_sorted.index, min_date_sorted):\n    \n    record = df_train[(df_train['Country_Region'] == key_[0]) & (df_train['Province_State'] == key_[1])]\n    record['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in record['Date']]\n    # x axis values \n    x = record['days']\n    # corresponding y axis values \n    y1 = record['ConfirmedCases']\n    y2 = record['Fatalities']\n    y1_prime = np.diff(y1)\n    \n#     print(y1_prime)\n    stage0 = False\n    stage1 = False\n    stage2 = False\n    stage3 = False\n    count1 = 0\n    count2 = 0\n    for start in range(len(y1_prime)-3):\n        if sum(y1_prime[start:start+3]) <=12:\n            count1 = count1 + 1\n            count2 = 0\n        else:\n            count2 = count2 + 1\n            count1 = 0\n        if not stage0 and count2 == 0 and count1 > 2:\n            stage0 = True\n            count1 = 0\n        if not stage1 and count1 == 0 and count2 > 5:\n            stage0 = True\n            stage1 = True\n            count2 = 0\n        if stage1 and count2 == 0 and count1 > 3:\n            stage2 = True\n            count1 = 0\n        if stage2 and count1 == 0 and count2 > 2:\n            stage3 = True\n            count2 = 0\n    if stage3:\n        print(index, key_)\n        print(y1_prime)\n        # plotting the points  \n        plt.plot(x, y1, label = \"Confirmed Cases\") \n        # plt.plot(x, y2, label = \"Fatalities\") \n        # naming the x axis \n        plt.xlabel('Date') \n        # naming the y axis \n        plt.ylabel('Label') \n\n        # giving a title to my graph \n        plt.title(str(key_[0]) + \" \" + str(key_[1]) + ' - Confirmed Cases') \n\n        # function to show the plot \n        plt.show() \n    index = index + 1","333c2891":"# Get average fatality rate with respect to confirmed cases\ntotal_confirmed = 0\ntotal_fatalities = 0\nrate = []\nmax_y1 = []\nmax_y2 = []\ndetails = []\nfor index, start_date in zip(min_date_sorted.index, min_date_sorted):\n    print(index, start_date)\n#     print(list(min_date_sorted.index).index(index))\n    record = df_train[(df_train['Country_Region'] == index[0]) & (df_train['Province_State'] == index[1])]\n    if len(record[record['ConfirmedCases'] > 0]) != 0:\n        record = record[record['ConfirmedCases'] > 0]\n    record2 = record\n    if len(record[record['Fatalities'] > 0]) != 0:\n        record2 = record[record['Fatalities'] > 0]\n    # corresponding y axis values \n    \n    y1 = record['ConfirmedCases'].values\n    y2 = record2['Fatalities'].values\n    \n    b = -1\n    bad_index = 0\n    mod_count = 0\n    y1_copy = list(y1)\n    for a in y1:\n        if a < b:\n            y1[bad_index] = b\n            mod_count = mod_count + 1\n        else:\n            b = a\n        bad_index = bad_index + 1\n#     if mod_count > 0:\n#         print(\"*****************\")\n#         print(list(min_date_sorted.index).index(index), index)\n#         print(mod_count)\n#         print(y1)\n#         print(y1_copy)\n#         print(\"*****************\")\n    b = -1\n    bad_index = 0\n    mod_count = 0\n    y2_copy = list(y2)\n    for a in y2:\n        if a < b:\n            y2[bad_index] = b\n            mod_count = mod_count + 1\n        else:\n            b = a\n        bad_index = bad_index + 1\n#     if mod_count > 0:\n#         print(\"*****************\")\n#         print(list(min_date_sorted.index).index(index), index)\n#         print(mod_count)\n#         print(y2)\n#         print(y2_copy)\n#         print(\"*****************\")\n    \n    \n    y1_prime = np.diff(y1)\n    y1_prime2 = np.diff(y1_prime)\n#     print(y1)\n#     print(\"-------------------------------\")\n#     print(y1_prime)\n#     print(\"-------------------------------\")\n#     print(y1_prime2)\n#     print(\"*******************************\")\n    y_max_ = y1[-1]*2 + 1500\n    \n    if len(y1)>0 and len(y1_prime) > 0 and len(y1_prime2) > 0:\n        max_slope_index = len(y1_prime) - 1 - list(y1_prime)[::-1].index(max(y1_prime))\n        max_slope_range = (max_slope_index+1)\/len(y1_prime)\n        if max_slope_range < 0.75:\n            if y1_prime[max_slope_index] > 0 and max_slope_range < 0.5 and (((y1_prime[max_slope_index] - max(y1_prime[-2:]))\/y1_prime[max_slope_index]) < 0.5):\n                y_max_ = y1[-1]*2 + 1500\n    #             print(\"*******************************\")\n    #             print(list(min_date_sorted.index).index(index), index)\n    #             print(max_slope_index + 1, len(y1_prime))\n    #             print(max_slope_range, \"Max slope range\")\n    #             print(y1)\n    #             print(\"-------------------------------\")\n    #             print(y1_prime)\n    #             print(\"-------------------------------\")\n    #             print(y1_prime2)\n    #             print(\"*******************************\")\n                pass\n            else:\n                y_max_ = y1[max_slope_index + 1]*2 + 1500\n    #             print(\"*******************************\")\n    #             print(index)\n    #             print(max_slope_index + 1, len(y1_prime))\n    #             print(max_slope_range, \"Max slope range\")\n    #             print(y1)\n    #             print(\"-------------------------------\")\n    #             print(y1_prime)\n    #             print(\"-------------------------------\")\n    #             print(y1_prime2)\n    #             print(\"*******************************\")\n                pass\n        else:\n            y_max_ = y1[-1]*2 + 1500\n\n    #     if(index[1] == 'California'):\n    #         print(\"*******************************\")\n    #         print(index)\n    #         print(max_slope_index + 1, len(y1_prime))\n    #         print(max_slope_range, \"Max slope range\")\n    #         print(y1)\n    #         print(\"-------------------------------\")\n    #         print(y1_prime)\n    #         print(\"-------------------------------\")\n    #         print(y1_prime2)\n    #         print(\"*******************************\")\n    ratio = 0\n    if y2[-1] > 0:\n        ratio = y1[-1]\/y2[-1]\n    else:\n        ratio = y1[-1]\n    max_y1.append(y1[-1])\n    max_y2.append(y2[-1])\n    rate.append(ratio)\n    details.append(\" \".join([str(x) for x in [y1[-1], \" ------- \", y2[-1], \" ---- \", ratio, \" --------------- \", record['Date'].values[-1], \" ---- \", index, \"----\", list(min_date_sorted.index).index(index)]]))\n#     print(y1[-1], \" ------- \", y2[-1], \" ---- \", ratio, \" --------------- \", record['Date'].values[-1], \" ---- \", index, \"----\", list(min_date_sorted.index).index(index))\n    total_confirmed = total_confirmed + y1[-1]\n    total_fatalities = total_fatalities + y2[-1]\n\nprint(total_confirmed\/total_fatalities)","7c440faa":"for a1, a2, b, c in zip(max_y1, max_y2, rate, details):\n    print(c)","724cd6a8":"print(pd.DataFrame(rate).describe())\nprint('Median ', np.median(rate))\nprint('Mean ', np.mean(rate))\nprint('Average', np.average(rate, weights = max_y2))\navg = np.average(rate, weights = max_y2)","eb7c4977":"for a1, a2, b, c in zip(max_y1, max_y2, rate, details):\n    if(a1 < 100 and a2 < 4 and b < avg):\n        # correct the y2_pred as per average rate = 22\n        print(c)\n        pass\n    else:\n        ## correct the y2_pred as per the rate\n#         print(c)\n        pass","057d57fb":"rate_1 = [3,4,5,15,21,22,23,26,27,28,30,31,32,35,36,39,42,45,47,48,49,53,61,67,68,69,72,75,81,94,101,102,107,108,109,154,156,157,158,164,165,166, 171,174,175,176,178,179,181,183, 184,185,186,187,189,190,191,192,211,212,215,217,220,221,222,228,229,230,233,240,241,248,249,264,265,275,276,277,278,280,281,283,291,293,294,295,299,301,302,303,305]\nrate_1_1 = [2,51,52,76,153,193,194,195,196,197,198,199,242,243,245,247,292,297]\nrate_1_2 = [6,20,29,70,71,97,98,104,180,252,255,262,266]\nrate_1_5 = [24,46,54,57,59,62,66,100,103,105,159,167,168,201,204,205,206,207,213,214,223,225,231,234,236,237,244,250,259,267,268,269,270,271,272,273,285,286,298]\nrate_2 = []\nrate_3 = [9,25,34,63,64,74,77,78,99,208,219,258,260,261,284,296,300]\nrate_4 = [7,11,13,18,37,40,41,55,56,129,216,226,235,239,246,274]\nrate_custom = [169,172,173,177,182,188,218,279,282]\nrates = [1,1.1,1.2,1.5,2,3,4]\nindices = [rate_1, rate_1_1+rate_custom, rate_1_2, rate_1_5, rate_2, rate_3, rate_4]\nmult = [2]*306\ni = 0\nfor index_list in indices:\n    for j in index_list:\n        mult[j] = rates[i]\n    i = i + 1\nfor a,b in enumerate(mult):\n    print(a,b)","46a3afec":"df = pd.DataFrame(columns = ['ForecastId','ConfirmedCases','Fatalities'])\ndf_hr = pd.DataFrame(columns = ['ForecastId', 'Country_Region', 'Province_State', 'Days', 'ConfirmedCases','Fatalities','Date'])\n","3b3c13fe":"# record = df_train[(df_train['Country_Region'] == 'Italy') & (df_train['Province_State'] == '')]\n# record['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in record['Date']]\n# record = record[record['days'] > public_start_day]\n# record","75541dc6":"public_start_date = '2020-03-26'\npublic_end_date = '2020-04-08'\n\ncount = 0\nfor index, start_date in zip(min_date_sorted.index, min_date_sorted):\n    print(list(min_date_sorted.index).index(index), index, start_date)\n    record = df_train[(df_train['Country_Region'] == index[0]) & (df_train['Province_State'] == index[1])]\n    if len(record[record['ConfirmedCases'] > 0]) == 0:\n        pass\n    else:\n        record = record[record['ConfirmedCases'] > 0]\n    base_date_object = datetime.strptime(start_date, \"%Y-%m-%d\").date()\n    public_start_date_object = datetime.strptime(public_start_date, \"%Y-%m-%d\").date()\n    public_end_date_object = datetime.strptime(public_end_date, \"%Y-%m-%d\").date()\n    record['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in record['Date']]\n    public_start_day = (public_start_date_object - base_date_object).days + 1\n    public_end_day = (public_end_date_object - base_date_object).days + 1\n    \n    ## limit the training data to date before public start date\n    if len(record[record['days'] < public_start_day]) > 0:\n        record = record[record['days'] < public_start_day]\n    # x axis values \n    \n    record2 = record\n    if len(record[record['Fatalities'] > 0]) != 0:\n        record2 = record[record['Fatalities'] > 0]\n    x = record['days'].values\n    x2 = record2['days'].values\n    # corresponding y axis values \n    y1 = record['ConfirmedCases'].values\n    y2 = record2['Fatalities'].values\n    \n    \n    ####  data correction ####\n    b = -1\n    bad_index = 0\n    mod_count = 0\n#     y1_copy = list(y1)\n    for a in y1:\n        if a < b:\n            y1[bad_index] = b\n            mod_count = mod_count + 1\n        else:\n            b = a\n        bad_index = bad_index + 1\n    if mod_count > 0:\n        print(\"*****************\")\n        print(list(min_date_sorted.index).index(index), index)\n        print(mod_count)\n        print(y1)\n#         print(y1_copy)\n        print(\"*****************\")\n    b = -1\n    bad_index = 0\n    mod_count = 0\n#     y2_copy = list(y2)\n    for a in y2:\n        if a < b:\n            y2[bad_index] = b\n            mod_count = mod_count + 1\n        else:\n            b = a\n        bad_index = bad_index + 1\n    if mod_count > 0:\n        print(\"*****************\")\n        print(list(min_date_sorted.index).index(index), index)\n        print(mod_count)\n        print(y2)\n#         print(y2_copy)\n        print(\"*****************\")    \n    ####  data correction ####\n\n    if len(y1) > 0:\n        y_max_ = y1[-1]\n        y1_prime = np.diff(y1)\n        y1_prime2 = np.diff(y1_prime)\n        if len(y1)>0 and len(y1_prime) > 0 and len(y1_prime2) > 0:\n            max_slope_index = len(y1_prime) - 1 - list(y1_prime)[::-1].index(max(y1_prime))\n            max_slope_range = (max_slope_index+1)\/len(y1_prime)\n            y_max_ = y1[-1]\n            if max_slope_range < 0.75:\n                if y1_prime[max_slope_index] > 0 and max_slope_range < 0.75 and (((y1_prime[max_slope_index] - max(y1_prime[-2:]))\/y1_prime[max_slope_index]) < 0.5):\n                    y_max_ = y1[-1]\n                    pass\n                else:\n                    y_max_ = y1[max_slope_index + 1]\n                    pass\n            else:\n                y_max_ = y1[-1]\n    else:\n        y_max_ = 0\n    \n    stage0 = False\n    stage1 = False\n    stage2 = False\n    stage3 = False\n    count1 = 0\n    count2 = 0\n    for start in range(len(y1_prime)-3):\n        if sum(y1_prime[start:start+3]) <=12:\n            count1 = count1 + 1\n            count2 = 0\n        else:\n            count2 = count2 + 1\n            count1 = 0\n        if not stage0 and count2 == 0 and count1 > 2:\n            stage0 = True\n            count1 = 0\n        if not stage1 and count1 == 0 and count2 > 5:\n            stage0 = True\n            stage1 = True\n            count2 = 0\n        if stage1 and count2 == 0 and count1 > 3:\n            stage2 = True\n            count1 = 0\n        if stage2 and count1 == 0 and count2 > 2:\n            stage3 = True\n            count2 = 0\n#     if stage3:\n    if list(min_date_sorted.index).index(index) in rate_custom:\n        param, param_cov = curve_fit(custom, np.array(x), np.array(y1), maxfev = 100000, bounds=([1, 0, 1, 1, 30, 1, 1], [1.1, 60, 8, 200, 100, 8, 1400]))\n        y1_pred = custom(x, param[0], param[1], param[2], param[3], param[4], param[5], param[6])\n#     elif index[0] == 'Korea, South':\n#         param, param_cov = curve_fit(test_linear, np.array(x), np.array(y1), [y_max_, 0.5, (x[-1] - x[0])\/2 + x[0], 50, 45, 0], maxfev = 100000, bounds=([y_max_\/2, 0.1, 0, 1, 30, -100],[y_max_*5 + 1500, 1, 150, 100, 100, 1000]))\n#         y1_pred = test_linear(x, param[0], param[1], param[2], param[3], param[4], param[5])\n#     elif index[0] in ['US', 'Spain', 'Germany', 'France', 'Iran', 'United Kingdom']:\n#         param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*7, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*5, 0.1, 0],[y_max_*10 + 1500, 1, 150]))\n#         y1_pred = test(x, param[0], param[1], param[2])\n#     elif index[0] == 'China':\n#         param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_\/2, 0.1, 0],[y_max_*5 + 1500, 1, 150]))\n#         y1_pred = test(x, param[0], param[1], param[2])\n    elif mult[list(min_date_sorted.index).index(index)] == 1:\n        param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*mult[list(min_date_sorted.index).index(index)] + 1, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*mult[list(min_date_sorted.index).index(index)], 0.1, 0],[y_max_*mult[list(min_date_sorted.index).index(index)]*1.5 + 30, 1, 150]))\n        y1_pred = test(x, param[0], param[1], param[2])\n    elif mult[list(min_date_sorted.index).index(index)] == 1.1:\n        param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*mult[list(min_date_sorted.index).index(index)] + 1, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*mult[list(min_date_sorted.index).index(index)], 0.1, 0],[y_max_*mult[list(min_date_sorted.index).index(index)]*1.5 + 200, 1, 150]))\n        y1_pred = test(x, param[0], param[1], param[2])\n    elif mult[list(min_date_sorted.index).index(index)] == 1.2:\n        param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*mult[list(min_date_sorted.index).index(index)] + 1, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*mult[list(min_date_sorted.index).index(index)], 0.1, 0],[y_max_*mult[list(min_date_sorted.index).index(index)]*1.5 + 200, 1, 150]))\n        y1_pred = test(x, param[0], param[1], param[2])\n    else:\n        param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*mult[list(min_date_sorted.index).index(index)] + 1, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*mult[list(min_date_sorted.index).index(index)], 0.1, 0],[y_max_*4 + 1500, 1, 150]))\n        y1_pred = test(x, param[0], param[1], param[2])\n    param2, param_cov2 = curve_fit(test, np.array(x2), np.array(y2), [y2[-1]\/2, 0.5, (x2[-1] - x2[0])\/2 + x2[0] - 3], maxfev = 100000, bounds=([y2[-1]\/2, 0.1, 0],[y2[-1]*5 + 1, 0.8, 150]))\n    y2_pred = test(x2,param2[0], param2[1], param2[2])\n    \n#     print(y1)\n#     print(y1_pred)\n#     print(\"----------------------------------\")\n#     print(y2)\n#     print(y2_pred)\n#     print(\"----------------------------------\")\n    \n    group = test_groups.get_group(index)\n#     print(group['Date'].values)\n    group['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in group['Date'].values]\n    \n    group = group[group['days'] <= public_end_day]\n    \n    ids = group['ForecastId'].values\n    days = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in group['Date'].values]\n    \n    prev_days = range(public_start_day - 6, public_start_day - 1, 1)\n    \n#     if stage3:\n    if list(min_date_sorted.index).index(index) in rate_custom:\n        test_y1_pred_raw = custom(days, param[0], param[1], param[2], param[3], param[4], param[5], param[6])\n        prev_y1_pred_raw = custom(prev_days, param[0], param[1], param[2], param[3], param[4], param[5], param[6])\n#     elif index[0] == 'Korea, South':\n#         test_y1_pred_raw = test_linear(days, param[0], param[1], param[2], param[3], param[4], param[5])\n#         prev_y1_pred_raw = test_linear(prev_days, param[0], param[1], param[2], param[3], param[4], param[5])\n#     elif index[0] in ['US', 'Spain', 'Germany', 'France', 'Iran', 'United Kingdom']:\n#         test_y1_pred_raw = test(days, param[0], param[1], param[2])\n#         prev_y1_pred_raw = test(prev_days, param[0], param[1], param[2])\n    else:\n        test_y1_pred_raw = test(days, param[0], param[1], param[2])\n        prev_y1_pred_raw = test(prev_days, param[0], param[1], param[2])\n    test_y2_pred_raw = test(days, param2[0], param2[1], param2[2])\n    prev_y2_pred_raw = test(prev_days, param2[0], param2[1], param2[2])\n    \n    day_index_pred = 0\n    diff1_list = []\n    diff2_list = []\n    for day in prev_days:\n        if day in x:\n            day_index = np.where(x == day)\n            diff1 = y1[day_index] - prev_y1_pred_raw[day_index_pred]\n            diff1_list.append(diff1)\n        if day in x2:\n            day_index = np.where(x2 == day)\n            diff2 = y2[day_index] - prev_y2_pred_raw[day_index_pred]\n            diff2_list.append(diff2)\n        day_index_pred = day_index_pred + 1\n    \n    if len(diff1_list) > 0:\n        diff1_mean = np.max(diff1_list)\n    else:\n        diff1_mean = 0\n    if len(diff2_list) > 0:\n        diff2_mean = np.max(diff2_list)\n    else:\n        diff2_mean = 0\n#     print('diff1_mean', diff1_mean)\n#     print('diff2_mean', diff2_mean)\n    if np.isnan(diff1_mean):\n        pass\n    else:\n        test_y1_pred_raw = list(np.array(test_y1_pred_raw) + diff1_mean)\n    if np.isnan(diff2_mean):\n        pass\n    else:\n        test_y2_pred_raw = list(np.array(test_y2_pred_raw) + diff2_mean)\n    \n#     test_y1_pred = [int(n) for n in test_y1_pred_raw]\n#     test_y2_pred = [int(m) for m in test_y2_pred_raw]\n\n    test_y1_pred = test_y1_pred_raw\n    test_y2_pred = test_y2_pred_raw\n\n    \n    ratio = 0\n    if y2[-1] > 0:\n        ratio = y1[-1]\/y2[-1]\n    else:\n        ratio = y1[-1]\n    \n    train_day_index = days.index(public_start_day) - 1\n    \n    if(y1[-1] < 100 and y2[-1] < 4 and ratio < avg):\n        # correct the y2_pred as per average rate = 22\n        for pred_index in range(len(test_y2_pred)):\n            if pred_index > train_day_index:\n                if test_y2_pred[pred_index] < test_y1_pred[pred_index]\/avg:\n                    test_y2_pred[pred_index] = test_y1_pred[pred_index]\/avg\n    else:\n        ## correct the y2_pred as per the rate\n        for pred_index in range(len(test_y2_pred)):\n            if pred_index > train_day_index:\n                if test_y2_pred[pred_index] < test_y1_pred[pred_index]\/ratio:\n                    test_y2_pred[pred_index] = test_y1_pred[pred_index]\/ratio\n    \n    test_y1_pred = [int(n) for n in test_y1_pred]\n    test_y2_pred = [int(m) for m in test_y2_pred]\n    \n    local_df_hr = pd.DataFrame(ids, columns=['ForecastId'])\n    print()\n    local_df_hr.insert(1, 'Country_Region', [index[0]]*len(days))\n    local_df_hr.insert(2, 'Province_State', [index[1]]*len(days))\n    local_df_hr.insert(3, 'Days', days)\n    local_df_hr.insert(4, 'ConfirmedCases', test_y1_pred)\n    local_df_hr.insert(5, 'Fatalities', test_y2_pred)\n    local_df_hr.insert(6, 'Date', group['Date'].values)\n    \n    local_df = pd.DataFrame(ids, columns=['ForecastId'])\n    local_df.insert(1, 'ConfirmedCases', test_y1_pred)\n    local_df.insert(2, 'Fatalities', test_y2_pred)\n    df = df.append(local_df)\n    df_hr = df_hr.append(local_df_hr)\n    \n    # x axis values \n#     if stage3:\n#     if not stage3 and index[0] not in ['US', 'Spain', 'Germany', 'France', 'Iran', 'United Kingdom']:\n#     if y1[-1] > test_y1_pred[0]:\n#     if index[0] in ['US', 'Spain', 'Germany', 'France', 'Iran', 'United Kingdom']:\n#     if list(min_date_sorted.index).index(index) in rate_1_1:\n#     if index[0] == 'Russia':\n#         print(mult[list(min_date_sorted.index).index(index)])\n#         print(y_max_)\n#     actual_record = df_train[(df_train['Country_Region'] == index[0]) & (df_train['Province_State'] == index[1])]\n#     actual_record['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in actual_record['Date']]\n#     actual_record = actual_record[actual_record['days'] > public_start_day]\n#     actual_days = actual_record['days'].values\n#     actual_y = actual_record['ConfirmedCases'].values\n#     actual_y2 = actual_record['Fatalities'].values\n\n#     x = record['days'].values\n#     plt.plot(x, y1, label = \"ConfirmedCases\") \n#     plt.plot(x, y1_pred, label = \"Predicted\") \n#     plt.plot(days, test_y1_pred, label = \"Forecast\")\n#     plt.plot(actual_days, actual_y, label = \"Actual\")\n#     plt.xlabel('Date') \n#     plt.ylabel('Label') \n#     plt.title(str(index[0]) + \" \" + str(index[1]) + ' - ConfirmedCases') \n#     plt.show() \n\n#     plt.plot(x2, y2, label = \"Fatalities\") \n#     plt.plot(x2, y2_pred, label = \"Predicted\")\n#     plt.plot(days, test_y2_pred, label = \"Forecast\")\n#     plt.plot(actual_days, actual_y2, label = \"Actual\")\n#     plt.xlabel('Date') \n#     plt.ylabel('Label') \n#     plt.title(str(index[0]) + \" \" + str(index[1]) + ' - Fatalities') \n#     plt.show() \n    count = count + 1\n#     break\n","5e96804f":"print(df.shape)\nprint(df_hr.shape)","045efc25":"private_start_date = '2020-04-09'\nprivate_end_date = '2020-05-07'\n\ncount = 0\nfor index, start_date in zip(min_date_sorted.index, min_date_sorted):\n    print(list(min_date_sorted.index).index(index), index, start_date)\n    record = df_train[(df_train['Country_Region'] == index[0]) & (df_train['Province_State'] == index[1])]\n    if len(record[record['ConfirmedCases'] > 0]) == 0:\n        pass\n    else:\n        record = record[record['ConfirmedCases'] > 0]\n    base_date_object = datetime.strptime(start_date, \"%Y-%m-%d\").date()\n    private_start_date_object = datetime.strptime(private_start_date, \"%Y-%m-%d\").date()\n    private_end_date_object = datetime.strptime(private_end_date, \"%Y-%m-%d\").date()\n    record['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in record['Date']]\n    private_start_day = (private_start_date_object - base_date_object).days + 1\n    private_end_day = (private_end_date_object - base_date_object).days + 1\n    \n    ## limit the training data to date before public start date\n    if len(record[record['days'] < private_start_day]) > 0:\n        record = record[record['days'] < private_start_day]\n    # x axis values \n    \n    record2 = record\n    if len(record[record['Fatalities'] > 0]) != 0:\n        record2 = record[record['Fatalities'] > 0]\n    x = record['days'].values\n    x2 = record2['days'].values\n    # corresponding y axis values \n    y1 = record['ConfirmedCases'].values\n    y2 = record2['Fatalities'].values\n    \n    \n    ####  data correction ####\n    b = -1\n    bad_index = 0\n    mod_count = 0\n#     y1_copy = list(y1)\n    for a in y1:\n        if a < b:\n            y1[bad_index] = b\n            mod_count = mod_count + 1\n        else:\n            b = a\n        bad_index = bad_index + 1\n    if mod_count > 0:\n        print(\"*****************\")\n        print(list(min_date_sorted.index).index(index), index)\n        print(mod_count)\n        print(y1)\n#         print(y1_copy)\n        print(\"*****************\")\n    b = -1\n    bad_index = 0\n    mod_count = 0\n#     y2_copy = list(y2)\n    for a in y2:\n        if a < b:\n            y2[bad_index] = b\n            mod_count = mod_count + 1\n        else:\n            b = a\n        bad_index = bad_index + 1\n    if mod_count > 0:\n        print(\"*****************\")\n        print(list(min_date_sorted.index).index(index), index)\n        print(mod_count)\n        print(y2)\n#         print(y2_copy)\n        print(\"*****************\")    \n    ####  data correction ####\n\n    y_max_ = y1[-1]\n    y1_prime = np.diff(y1)\n    y1_prime2 = np.diff(y1_prime)\n    if len(y1)>0 and len(y1_prime) > 0 and len(y1_prime2) > 0:\n        max_slope_index = len(y1_prime) - 1 - list(y1_prime)[::-1].index(max(y1_prime))\n        max_slope_range = (max_slope_index+1)\/len(y1_prime)\n        y_max_ = y1[-1]\n        if max_slope_range < 0.75:\n            if y1_prime[max_slope_index] > 0 and max_slope_range < 0.75 and (((y1_prime[max_slope_index] - max(y1_prime[-2:]))\/y1_prime[max_slope_index]) < 0.5):\n                y_max_ = y1[-1]\n                pass\n            else:\n                y_max_ = y1[max_slope_index + 1]\n                pass\n        else:\n            y_max_ = y1[-1]\n    \n    \n    stage0 = False\n    stage1 = False\n    stage2 = False\n    stage3 = False\n    count1 = 0\n    count2 = 0\n    for start in range(len(y1_prime)-3):\n        if sum(y1_prime[start:start+3]) <=12:\n            count1 = count1 + 1\n            count2 = 0\n        else:\n            count2 = count2 + 1\n            count1 = 0\n        if not stage0 and count2 == 0 and count1 > 2:\n            stage0 = True\n            count1 = 0\n        if not stage1 and count1 == 0 and count2 > 5:\n            stage0 = True\n            stage1 = True\n            count2 = 0\n        if stage1 and count2 == 0 and count1 > 3:\n            stage2 = True\n            count1 = 0\n        if stage2 and count1 == 0 and count2 > 2:\n            stage3 = True\n            count2 = 0\n#     if stage3:\n    if list(min_date_sorted.index).index(index) in rate_custom:\n        param, param_cov = curve_fit(custom, np.array(x), np.array(y1), maxfev = 100000, bounds=([1, 0, 1, 1, 30, 1, 1], [1.1, 60, 8, 200, 100, 8, 1400]))\n        y1_pred = custom(x, param[0], param[1], param[2], param[3], param[4], param[5], param[6])\n#     elif index[0] == 'Korea, South':\n#         param, param_cov = curve_fit(test_linear, np.array(x), np.array(y1), [y_max_, 0.5, (x[-1] - x[0])\/2 + x[0], 50, 45, 0], maxfev = 100000, bounds=([y_max_\/2, 0.1, 0, 1, 30, -100],[y_max_*5 + 1500, 1, 150, 100, 100, 1000]))\n#         y1_pred = test_linear(x, param[0], param[1], param[2], param[3], param[4], param[5])\n#     elif index[0] in ['US', 'Spain', 'Germany', 'France', 'Iran', 'United Kingdom']:\n#         param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*7, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*5, 0.1, 0],[y_max_*10 + 1500, 1, 150]))\n#         y1_pred = test(x, param[0], param[1], param[2])\n#     elif index[0] == 'China':\n#         param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_\/2, 0.1, 0],[y_max_*5 + 1500, 1, 150]))\n#         y1_pred = test(x, param[0], param[1], param[2])\n    elif mult[list(min_date_sorted.index).index(index)] == 1:\n        param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*mult[list(min_date_sorted.index).index(index)] + 1, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*mult[list(min_date_sorted.index).index(index)], 0.1, 0],[y_max_*mult[list(min_date_sorted.index).index(index)]*1.5 + 30, 1, 150]))\n        y1_pred = test(x, param[0], param[1], param[2])\n    elif mult[list(min_date_sorted.index).index(index)] == 1.1:\n        param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*mult[list(min_date_sorted.index).index(index)] + 1, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*mult[list(min_date_sorted.index).index(index)], 0.1, 0],[y_max_*mult[list(min_date_sorted.index).index(index)]*1.5 + 200, 1, 150]))\n        y1_pred = test(x, param[0], param[1], param[2])\n    elif mult[list(min_date_sorted.index).index(index)] == 1.2:\n        param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*mult[list(min_date_sorted.index).index(index)] + 1, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*mult[list(min_date_sorted.index).index(index)], 0.1, 0],[y_max_*mult[list(min_date_sorted.index).index(index)]*1.5 + 200, 1, 150]))\n        y1_pred = test(x, param[0], param[1], param[2])\n    else:\n        param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*mult[list(min_date_sorted.index).index(index)] + 1, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*mult[list(min_date_sorted.index).index(index)], 0.1, 0],[y_max_*4 + 1500, 1, 150]))\n        y1_pred = test(x, param[0], param[1], param[2])\n    param2, param_cov2 = curve_fit(test, np.array(x2), np.array(y2), [y2[-1]\/2, 0.5, (x2[-1] - x2[0])\/2 + x2[0] - 3], maxfev = 100000, bounds=([y2[-1]\/2, 0.1, 0],[y2[-1]*5 + 1, 0.8, 150]))\n    y2_pred = test(x2,param2[0], param2[1], param2[2])\n    \n#     print(y1)\n#     print(y1_pred)\n#     print(\"----------------------------------\")\n#     print(y2)\n#     print(y2_pred)\n#     print(\"----------------------------------\")\n    \n    group = test_groups.get_group(index)\n#     print(group['Date'].values)\n    group['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in group['Date'].values]\n    \n    group = group[group['days'] >= private_start_day]\n    ids = group['ForecastId'].values\n    days = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in group['Date'].values]\n    \n    \n    prev_days = range(private_start_day - 6, private_start_day - 1, 1)\n    \n#     if stage3:\n    if list(min_date_sorted.index).index(index) in rate_custom:\n        test_y1_pred_raw = custom(days, param[0], param[1], param[2], param[3], param[4], param[5], param[6])\n        prev_y1_pred_raw = custom(prev_days, param[0], param[1], param[2], param[3], param[4], param[5], param[6])\n#     elif index[0] == 'Korea, South':\n#         test_y1_pred_raw = test_linear(days, param[0], param[1], param[2], param[3], param[4], param[5])\n#         prev_y1_pred_raw = test_linear(prev_days, param[0], param[1], param[2], param[3], param[4], param[5])\n#     elif index[0] in ['US', 'Spain', 'Germany', 'France', 'Iran', 'United Kingdom']:\n#         test_y1_pred_raw = test(days, param[0], param[1], param[2])\n#         prev_y1_pred_raw = test(prev_days, param[0], param[1], param[2])\n    else:\n        test_y1_pred_raw = test(days, param[0], param[1], param[2])\n        prev_y1_pred_raw = test(prev_days, param[0], param[1], param[2])\n    test_y2_pred_raw = test(days, param2[0], param2[1], param2[2])\n    prev_y2_pred_raw = test(prev_days, param2[0], param2[1], param2[2])\n    \n    \n    day_index_pred = 0\n    diff1_list = []\n    diff2_list = []\n    for day in prev_days:\n        if day in x:\n            day_index = np.where(x == day)\n            diff1 = y1[day_index] - prev_y1_pred_raw[day_index_pred]\n            diff1_list.append(diff1)\n        if day in x2:\n            day_index = np.where(x2 == day)\n            diff2 = y2[day_index] - prev_y2_pred_raw[day_index_pred]\n            diff2_list.append(diff2)\n        day_index_pred = day_index_pred + 1\n    \n    if len(diff1_list) > 0:\n        diff1_mean = np.max(diff1_list)\n    else:\n        diff1_mean = 0\n    if len(diff2_list) > 0:\n        diff2_mean = np.max(diff2_list)\n    else:\n        diff2_mean = 0\n    \n#     print('diff1_mean', diff1_mean)\n#     print('diff2_mean', diff2_mean)\n    if np.isnan(diff1_mean):\n        pass\n    else:\n        test_y1_pred_raw = list(np.array(test_y1_pred_raw) + diff1_mean)\n    if np.isnan(diff2_mean):\n        pass\n    else:\n        test_y2_pred_raw = list(np.array(test_y2_pred_raw) + diff2_mean)\n    \n#     test_y1_pred = [int(n) for n in test_y1_pred_raw]\n#     test_y2_pred = [int(m) for m in test_y2_pred_raw]\n    test_y1_pred = test_y1_pred_raw\n    test_y2_pred = test_y2_pred_raw\n    \n    ratio = 0\n    if y2[-1] > 0:\n        ratio = y1[-1]\/y2[-1]\n    else:\n        ratio = y1[-1]\n    \n    train_day_index = days.index(private_start_day) - 1\n    \n    if(y1[-1] < 100 and y2[-1] < 4 and ratio < avg):\n        # correct the y2_pred as per average rate = 22\n        for pred_index in range(len(test_y2_pred)):\n            if pred_index > train_day_index:\n                if test_y2_pred[pred_index] < test_y1_pred[pred_index]\/avg:\n                    test_y2_pred[pred_index] = test_y1_pred[pred_index]\/avg\n    else:\n        ## correct the y2_pred as per the rate\n        for pred_index in range(len(test_y2_pred)):\n            if pred_index > train_day_index:\n                if test_y2_pred[pred_index] < test_y1_pred[pred_index]\/ratio:\n                    test_y2_pred[pred_index] = test_y1_pred[pred_index]\/ratio\n    \n    test_y1_pred = [int(n) for n in test_y1_pred]\n    test_y2_pred = [int(m) for m in test_y2_pred]\n\n    local_df_hr = pd.DataFrame(ids, columns=['ForecastId'])\n    local_df_hr.insert(1, 'Country_Region', [index[0]]*len(days))\n    local_df_hr.insert(2, 'Province_State', [index[1]]*len(days))\n    local_df_hr.insert(3, 'Days', days)\n    local_df_hr.insert(4, 'ConfirmedCases', test_y1_pred)\n    local_df_hr.insert(5, 'Fatalities', test_y2_pred)\n    local_df_hr.insert(6, 'Date', group['Date'].values)\n    \n    local_df = pd.DataFrame(ids, columns=['ForecastId'])\n    local_df.insert(1, 'ConfirmedCases', test_y1_pred)\n    local_df.insert(2, 'Fatalities', test_y2_pred)\n    df = df.append(local_df)\n    df_hr = df_hr.append(local_df_hr)\n    # x axis values \n#     if stage3:\n#     if index[0] in ['US', 'Spain', 'Germany', 'France', 'Iran', 'United Kingdom']:\n#     print(y1_prime)\n#     if count > 166 and count < 173:\n    x = record['days'].values\n    plt.plot(x, y1, label = \"Confirmed Cases\") \n    plt.plot(x, y1_pred, label = \"Predicted\") \n    plt.plot(days, test_y1_pred, label = \"Forecast\")\n    plt.xlabel('Date') \n    plt.ylabel('Label') \n    plt.title(str(index[0]) + \" \" + str(index[1]) + ' - Confirmed Cases') \n    plt.show() \n\n    plt.plot(x2, y2, label = \"Fatalities\") \n    plt.plot(x2, y2_pred, label = \"Predicted\")\n    plt.plot(days, test_y2_pred, label = \"Forecast\")\n    plt.xlabel('Date') \n    plt.ylabel('Label') \n    plt.title(str(index[0]) + \" \" + str(index[1]) + ' - Fatalities') \n    plt.show() \n    count = count + 1\n#     break\n","e9dc5e15":"print(df.shape)\nprint(df_hr.shape)","5082258a":"df = df.sort_values(by=['ForecastId'], ascending=True)\ndf_hr = df_hr.sort_values(by=['ForecastId'], ascending=True)","573c49e7":"df.to_csv('submission.csv', index=False)\ndf_hr.to_csv('hr_submission.csv', index=False)","1d67b553":"df.shape","3ef0ec66":"for row in df_hr.values:\n    print(row)","80a23bcf":"df_test.shape","8f8a0614":"df.columns","feaca161":"df","133f7b9e":"df_hr","f338c795":"# ***Using Sigmoid, Multi-Sigmoid curve fitting with correction***","e5e988da":"# ***Applying all features, fit curves for all locations and generate predictions with plots along with Human Readable output***","8aa72d33":"***Analyze Predictions on Future Days***","dd125a60":"***Plot Curve - Fatalities***","0be0293a":"***Plot a sample multi-Sigmoid***","120cdb0f":"***Checking on which curve applies to which location - Sigmoid or multi-Sigmoid***","3405cf09":"**Load Dataset**","7ffc7f89":"***Plot Curve - Cinfirmed Cases***","ec3ad41e":"***Analyze record of a particular Location given by Index***","b6a83ec7":"Current\n\nAll contries need to be categorized based on their state of infection.\nWhat multipliers to use for bounds will depend on the state of each country.\n\n\n\nEarlier\n1.3 make it special for US (10x) and South Korea with step linear function.\n\n1.2 [Use Float instead of integers]\n\n1.x [Added 5x multiplier on extimation boundary]\n\n1.x [Changing the predictions for public and private leaderboard]","96e9248a":"***GroupBy Location***","d76081d4":"**Identify Each Location by Index**","6e839545":"***Correction to be done on predictions of fitted-curve based on actual values ***","cb8c2e0b":"***Correcting the bad points in data and generalizing curve-fitting base and bound estimates***","6048aff7":"***Analyze Curve Fitting of Sigmoid on a data point***"}}