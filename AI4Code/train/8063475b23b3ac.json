{"cell_type":{"0ca52ed6":"code","aa8491d2":"code","0bbeaeec":"code","2ba792f6":"code","bf5f10a9":"code","49097648":"code","d9670d1c":"code","2e4320b4":"code","9b08e561":"code","b97af4ef":"code","88059664":"code","174ca734":"code","65f04f40":"code","72df1daa":"code","989662eb":"code","106ecfa6":"code","64dddbd1":"code","6e442959":"code","bc9fb8ff":"code","491a83fc":"code","1a738394":"code","80f90b9f":"code","932b1908":"code","a51e86a1":"code","20e47f7c":"code","28b7bd2c":"code","66baf665":"markdown","1dddfc77":"markdown","7c71d964":"markdown","4db8f1ab":"markdown","5f6abc6d":"markdown","bd178a5d":"markdown","7f07e418":"markdown","5367fa5f":"markdown"},"source":{"0ca52ed6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(rc={'figure.figsize':(13,13)})\nsns.set_style(\"whitegrid\")\nimport warnings\nwarnings.filterwarnings(\"ignore\")","aa8491d2":"df = pd.read_csv('..\/input\/income-classification\/income_evaluation.csv', skipinitialspace=True)\ndf.head()","0bbeaeec":"df.info()","2ba792f6":"## Income By Age\nax = sns.boxplot(x=\"income\", y=\"age\", data=df)","bf5f10a9":"## Income By age and race\nax = sns.boxplot(x=\"income\", y=\"age\", hue=\"race\",\n                 data=df, palette=\"Set2\")","49097648":"## Income by age, race and sex\ng = sns.catplot(x=\"income\", y=\"age\",\n                hue=\"sex\", col=\"race\",\n                col_wrap=3,\n                data=df, kind=\"box\",\n                palette=\"Set3\");","d9670d1c":"## Income by age, native country and sex\ng = sns.catplot(x=\"income\", y=\"age\",\n                hue=\"sex\", col=\"native-country\",\n                col_wrap=3,\n                data=df, kind=\"box\",\n                palette=\"vlag\");","2e4320b4":"## Income by age and hours per week\nax = sns.scatterplot(x=\"age\", y=\"hours-per-week\", hue=\"income\",\n                     data=df, palette='prism')","9b08e561":"## Income by age, hours per week and occupation\ng = sns.relplot(x=\"age\", y=\"hours-per-week\",\n                 col=\"occupation\", col_wrap=3, hue=\"income\",\n                 kind=\"scatter\", data=df, palette='rocket')","b97af4ef":"## Income by age, hours per week and education\ng = sns.relplot(x=\"age\", y=\"hours-per-week\",\n                 col=\"education\", col_wrap=3, hue=\"income\",\n                 kind=\"scatter\", data=df, palette='seismic')","88059664":"## Income by age, hours per week and marital status\ng = sns.relplot(x=\"age\", y=\"hours-per-week\",\n                 col=\"marital-status\", col_wrap=3, hue=\"income\",\n                 kind=\"scatter\", data=df, palette='gist_heat')","174ca734":"## Income by age, hours per week and relationship\ng = sns.relplot(x=\"age\", y=\"hours-per-week\",\n                 col=\"relationship\", col_wrap=3, hue=\"income\",\n                 kind=\"scatter\", data=df, palette='Oranges')","65f04f40":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\ndf.income = labelencoder.fit_transform(df.income)","72df1daa":"df = pd.get_dummies(df)\ndf.head()","989662eb":"## Split Data\n\nX = df.drop('income', 1)\ny = df.income\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","106ecfa6":"## Oversample\n\ndf.income.value_counts()","64dddbd1":"### Oversample with Random Oversmpling\nfrom imblearn.over_sampling import RandomOverSampler\n\noversample = RandomOverSampler()\nXTRO, YTRO = oversample.fit_resample(X_train, y_train)\n\n# Check value distribution\nYTRO.value_counts()","6e442959":"### Oversample with SMOTE\nfrom imblearn.over_sampling import SMOTE\n\noversample = SMOTE()\nXTS, YTS = oversample.fit_resample(X_train, y_train)\n\n# Check value distribution\nYTS.value_counts()","bc9fb8ff":"### Oversample with ADASYN\nfrom imblearn.over_sampling import ADASYN\n\noversample = ADASYN()\nXTA, YTA = oversample.fit_resample(X_train, y_train)\n\n# Check value distribution\nYTA.value_counts()","491a83fc":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import SGDClassifier\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report","1a738394":"Oversampling = ['Random OverSampler','SMOTE','ADASYN']","80f90b9f":"## Random Forest\nRF = RandomForestClassifier(n_estimators = 200, criterion = 'entropy', random_state = 12)\nRFs = []\n\n### Random Oversampling\nRF.fit(XTRO, YTRO)\npred = RF.predict(X_test)\nactual = np.array(y_test)\nRF_RO = accuracy_score(actual, pred)\nRFs.append(RF_RO)\n\nprint('Random Oversampling')\nprint('Accuracy Score :', RF_RO)\nprint('Report : ')\nprint(classification_report(actual, pred))\n\n### SMOTE\nRF.fit(XTS, YTS)\npred = RF.predict(X_test)\nactual = np.array(y_test)\nRF_S = accuracy_score(actual, pred)\nRFs.append(RF_S)\n\nprint('SMOTE')\nprint('Accuracy Score :', RF_S)\nprint('Report : ')\nprint(classification_report(actual, pred))\n\n### ADASYN\nRF.fit(XTA, YTA)\npred = RF.predict(X_test)\nactual = np.array(y_test)\nRF_A = accuracy_score(actual, pred)\nRFs.append(RF_A)\n\nprint('ADASYN')\nprint('Accuracy Score :', RF_A)\nprint('Report : ')\nprint(classification_report(actual, pred))","932b1908":"## Logistic Regression\nLR = LogisticRegression()\nLRs = []\n\n### Random Oversampling\nLR.fit(XTRO, YTRO)\npred = LR.predict(X_test)\nactual = np.array(y_test)\nLR_RO = accuracy_score(actual, pred)\nLRs.append(LR_RO)\n\nprint('Random Oversampling')\nprint('Accuracy Score :', LR_RO)\nprint('Report : ')\nprint(classification_report(actual, pred))\n\n### SMOTE\nLR.fit(XTS, YTS)\npred = LR.predict(X_test)\nactual = np.array(y_test)\nLR_S = accuracy_score(actual, pred)\nLRs.append(LR_S)\n\nprint('SMOTE')\nprint('Accuracy Score :', LR_S)\nprint('Report : ')\nprint(classification_report(actual, pred))\n\n### ADASYN\nLR.fit(XTA, YTA)\npred = LR.predict(X_test)\nactual = np.array(y_test)\nLR_A = accuracy_score(actual, pred)\nLRs.append(LR_A)\n\nprint('ADASYN')\nprint('Accuracy Score :', LR_A)\nprint('Report : ')\nprint(classification_report(actual, pred))","a51e86a1":"## SGD Classifier\nSGD = SGDClassifier(loss='modified_huber')\nSGDs = []\n\n### Random Oversampling\nSGD.fit(XTRO, YTRO)\npred = SGD.predict(X_test)\nactual = np.array(y_test)\nSGD_RO = accuracy_score(actual, pred)\nSGDs.append(SGD_RO)\n\nprint('Random Oversampling')\nprint('Accuracy Score :', SGD_RO)\nprint('Report : ')\nprint(classification_report(actual, pred))\n\n### SMOTE\nSGD.fit(XTS, YTS)\npred = SGD.predict(X_test)\nactual = np.array(y_test)\nSGD_S = accuracy_score(actual, pred)\nSGDs.append(SGD_S)\n\nprint('SMOTE')\nprint('Accuracy Score :', SGD_S)\nprint('Report : ')\nprint(classification_report(actual, pred))\n\n### ADASYN\nSGD.fit(XTA, YTA)\npred = SGD.predict(X_test)\nactual = np.array(y_test)\nSGD_A = accuracy_score(actual, pred)\nSGDs.append(SGD_A)\n\nprint('ADASYN')\nprint('Accuracy Score :', SGD_A)\nprint('Report : ')\nprint(classification_report(actual, pred))","20e47f7c":"result = pd.DataFrame({'Random Forest': RFs,\n                       'Logistic Regression': LRs,'SGD Classifier': SGDs},\n                         index = Oversampling)\nresult","28b7bd2c":"result.plot(figsize=(12,8));","66baf665":"## Modeling\n\nThere is 3 algorithm i'm using today, there is Random Forest, Logistic regression, and SGD Classifier.","1dddfc77":"## Feature Engineering\n\nLet's change categorical feature to numerical.","7c71d964":"## Summary\n\nFrom all this experiment, the best algorithm is Random Forest since its always come with a good accuracy no matter the oversampler method is. And for the oversample method, the best method is SMOTE.","4db8f1ab":"## EDA","5f6abc6d":"## Import Modules","bd178a5d":"## Introduction\n\nHai, today are another episode of classification. This time we are going to deal with imbalance dataset using oversampling method from imblearn. As for algorithm we are going to use Random Forest, Logistic Regression, and SGD Classifier.","7f07e418":"## Quick Look","5367fa5f":"## Oversampling\n\nJust as i explain before, today we are going to use oversampling method. There are Random Oversampler, SMOTE and ADASYN. So what is the difference, while the RandomOverSampler is over-sampling by duplicating some of the original samples of the minority class, SMOTE and ADASYN generate new samples in by interpolation. However, the samples used to interpolate\/generate new synthetic samples differ. In fact, ADASYN focuses on generating samples next to the original samples which are wrongly classified using a k-Nearest Neighbors classifier while the basic implementation of SMOTE will not makeany distinction between easy and hard samples to be classified using the nearest neighbors rule. SMOTE might connect inliers and outliers while ADASYN might focus solely on outliers which, in both cases, might lead to a sub-optimal decision function\n\nFor more about Oversampling :\n\nhttps:\/\/imbalanced-learn.readthedocs.io\/en\/stable\/over_sampling.html\n"}}