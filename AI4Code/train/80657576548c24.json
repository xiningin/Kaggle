{"cell_type":{"728e2ff6":"code","2a277472":"code","7c17f33e":"code","865e038a":"code","3d988ed6":"code","3d4aaedf":"code","5fcac115":"code","c90b1172":"markdown","1c3e61d4":"markdown","78d3de89":"markdown","b1925ea9":"markdown","116bb86c":"markdown","ab53ebf0":"markdown"},"source":{"728e2ff6":"import torch","2a277472":"w = torch.rand(4, 3, 2) #\u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0442\u0435\u043d\u0437\u043e\u0440 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 4, 3, 2\nx = torch.Tensor(4, 3, 2) #\u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0442\u0435\u043d\u0437\u043e\u0440 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 4, 3, 2\ny = torch.ones(4, 3, 2) #\u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0442\u0435\u043d\u0437\u043e\u0440, \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0439 \u0435\u0434\u0438\u043d\u0438\u0446\u0430\u043c\u0438, \u0440\u0430\u0437\u043c\u0435\u0440\u0430 4, 3, 2\nz = torch.zeros(4, 3, 2) #\u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0442\u0435\u043d\u0437\u043e\u0440, \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0439 \u043d\u0443\u043b\u044f\u043c\u0438, \u0440\u0430\u0437\u043c\u0435\u0440\u0430 4, 3, 2\nprint(w)\nprint(x)\nprint(y)\nprint(z)","7c17f33e":"import torch.nn as nn\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.fc1 = nn.Linear(1,1) #\u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u043e\u0434\u043d\u0438\u043c \u0432\u0445\u043e\u0434\u043d\u044b\u043c \u0438 \u043e\u0434\u043d\u0438 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c\n    def forward(self, x): #\u043c\u0435\u0442\u043e\u0434 \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u043f\u0440\u043e\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0441\u0435\u0442\u0438\n        x = self.fc1(x)\n        return x\n    \nnet = Net() #\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c\nprint(net)\nprint(list(net.parameters()))","865e038a":"from torch.autograd import Variable\ninp = Variable(torch.randn(1,1,1))\nprint(inp)","3d988ed6":"out = net(inp)\nprint(out)","3d4aaedf":"import torch.optim as optim\ndef criterion(out, label): #\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0442\u0435\u0440\u044c\n    return (label - out)**2\noptimizer = optim.SGD(net.parameters(), lr=0.01, momentum=0.5) #\u043c\u0435\u0442\u043e\u0434 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438\n\ndata = [(1,3), (2,6), (3,9), (4,12), (5,15), (6,18)]\nfor epoch in range(20): #\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044d\u043f\u043e\u0445 \u0431\u0443\u0434\u0435\u0442 \u043e\u0431\u0443\u0447\u0430\u0442\u044c\u0441\u044f \n    for i, data2 in enumerate(data):\n        X, Y = iter(data2)\n        X, Y = Variable(torch.FloatTensor([X]), requires_grad=True), Variable(torch.FloatTensor([Y]), requires_grad=False)\n        optimizer.zero_grad()\n        outputs = net(X)\n        loss = criterion(outputs, Y)\n        loss.backward() #\u0437\u0430\u043f\u0443\u0441\u043a \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043a\u0438\n        optimizer.step()\n    print(\"Epoch {} - loss: {}\".format(epoch, loss.data[0]))","5fcac115":"out = net(inp)\nprint(inp, out)","c90b1172":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u0441\u0435\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u043a\u0430\u043a\u0430\u044f-\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f.","1c3e61d4":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1. \u0423\u0432\u0435\u043b\u0438\u0447\u044c\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043f\u043e\u0445 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u043e 50.\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. \u0412\u043c\u0435\u0441\u0442\u043e \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\n\u0430) \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e\n\u0431) ReLU\n\u0432) \u043c\u044f\u0433\u043a\u0438\u0439 \u043c\u0438\u043d\u0438\u043c\u0443\u043c\n\u0433) \u043c\u044f\u0433\u043a\u0438\u0439 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3. \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043e\u0434\u0438\u043d \u0441\u043b\u043e\u0439 \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u043e\u0447\u0435\u0442\u0430\u043b\u0430\u0441\u044c \u0441 \u043c\u044f\u0433\u043a\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u043e\u043c.\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0441\u0435\u0442\u044c \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0443\u044e \u0437\u0430\u0434\u0430\u043d\u0438\u044e 3 \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u044f \u0434\u0432\u0443\u0445 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\n\u043d\u0430\u0431\u043e\u0440 [(-1,-1,0), (-1,0,0), (0,-1,0), (0,0,0), (0,1,1), (1,0,1), (1,1,2), (0,2,2), (2,0,2), (2,1,3), (1,2,3), (2,2,4)]","78d3de89":"\u0412\u043a\u043b\u044e\u0447\u0438\u043c \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0442\u0435\u0439. \u0421\u0435\u0442\u044c \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442\u0443 \u0442\u0438\u043f\u0430 \u041c\u043e\u0434\u0443\u043b\u044c. ","b1925ea9":"\u041b\u0435\u0433\u043a\u043e \u0432\u0438\u0434\u0435\u0442\u044c, \u0447\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0447\u0442\u043e-\u0442\u043e \u0432\u0440\u043e\u0434\u0435 y=3x, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u044c\u0441\u044f \u043a \u043d\u0443\u0436\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e","116bb86c":"\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u043a\u043b\u044e\u0447\u0438\u043c \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0442\u0435\u0440\u044c","ab53ebf0":"\u0421\u0435\u0433\u043e\u0434\u043d\u044f \u043d\u0435 \u043f\u0440\u043e \u043d\u0438\u0445, \u043d\u043e \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0440\u0438\u043c \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u0435\u043d\u0437\u043e\u0440\u044b."}}