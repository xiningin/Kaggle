{"cell_type":{"d0ae24fe":"code","966b550a":"code","7b348d76":"code","5aa58c35":"code","2330b584":"code","0df91d63":"code","fc552dce":"code","40e6f112":"code","94bde7fc":"code","b939daaf":"code","17bca5cc":"code","9b50ceac":"code","4c63d370":"code","a451a1ab":"code","73cb720e":"code","5d89c5dd":"code","e6723051":"code","a7cc4ffe":"code","38ac4f21":"code","3d95c538":"code","19f03a40":"code","2f3ee1aa":"markdown","1e8609eb":"markdown","487ecc16":"markdown","70670f2a":"markdown","479cf1b5":"markdown","f3180bdd":"markdown"},"source":{"d0ae24fe":"import datetime as dt\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nsns.set_style('whitegrid')\n\nimport os\nfrom keras.applications import xception\nfrom keras.preprocessing import image\nfrom mpl_toolkits.axes_grid1 import ImageGrid\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\nimport cv2\nfrom scipy.stats import uniform\n\nfrom tqdm import tqdm\nfrom glob import glob\n\n\nfrom keras.models import Model, Sequential\nfrom keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding, Masking\nfrom keras.utils import np_utils, to_categorical\n\nimport keras\nfrom keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\n\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense, BatchNormalization\n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n\n#copying the pretrained models to the cache directory\ncache_dir = os.path.expanduser(os.path.join('~', '.keras'))\nif not os.path.exists(cache_dir):\n    os.makedirs(cache_dir)\nmodels_dir = os.path.join(cache_dir, 'models')\nif not os.path.exists(models_dir):\n    os.makedirs(models_dir)\n    \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Conv2D, MaxPool2D, Flatten, Input\nfrom keras.optimizers import SGD, Adam\nfrom keras.utils import np_utils\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.utils import plot_model\n\n#copy the Xception models\n!cp ..\/input\/keras-pretrained-models\/xception* ~\/.keras\/models\/\n#show\n!ls ~\/.keras\/models","966b550a":"img = load_img('..\/input\/sheep-goat\/sheep_goat\/goat\/goat28.jpg')  # this is a PIL image\nx = img_to_array(img)  # this is a Numpy array \nprint('image shape: ', x.shape)\n\nprint('Goat Image')\nplt.imshow(img)\nplt.show()\n\n\nimg = load_img('..\/input\/sheep-goat\/sheep_goat\/sheep\/sheep3.jpg')  # this is a PIL image\nx = img_to_array(img)  # this is a Numpy array \nprint('Sheep Image')\nplt.imshow(img)\nplt.show()","7b348d76":"\ndir_kaggle ='..\/input\/sheep-goat\/'\ndata_kaggle ='..\/input\/sheep-goat\/sheep_goat\/'\ngoat  ='..\/input\/sheep-goat\/sheep_goat\/goat\/'\nsheep ='..\/input\/sheep-goat\/sheep_goat\/sheep\/'\n\n\nclass_data= ['goat','sheep']\nlen_class_data = len(class_data)","5aa58c35":"image_count = {}\ntrain_data = []\n\nfor i , class_data in tqdm(enumerate(class_data)):\n    class_folder = os.path.join(data_kaggle,class_data)\n    label = class_data\n    image_count[class_data] = []\n    \n    for path in os.listdir(os.path.join(class_folder)):\n        image_count[class_data].append(class_data)\n        train_data.append(['{}\/{}'.format(class_data, path), i, class_data])","2330b584":"#show image count\nfor key, value in image_count.items():\n    print('{0} -> {1}'.format(key, len(value)))","0df91d63":"#create a dataframe\ndf = pd.DataFrame(train_data, columns=['file', 'id', 'label'])\ndf.shape\ndf.head()","fc552dce":"cnt_pro = df['label'].value_counts()\nplt.figure(figsize=(6,4))\nsns.barplot(cnt_pro.index, cnt_pro.values, alpha=0.8)\nplt.ylabel('Number of Occurrences', fontsize=12)\nplt.xlabel('label', fontsize=12)\nplt.xticks(rotation=80)\nplt.show();","40e6f112":"#masking function\ndef create_mask_for_plant(image):\n    image_hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n\n    lower_hsv = np.array([0,0,250])\n    upper_hsv = np.array([250,255,255])\n    \n    mask = cv2.inRange(image_hsv, lower_hsv, upper_hsv)\n    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (11,11))\n    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)\n    \n    return mask\n\n#image segmentation function\ndef segment_image(image):\n    mask = create_mask_for_plant(image)\n    output = cv2.bitwise_and(image, image, mask = mask)\n    return output\/255\n\n#sharpen the image\ndef sharpen_image(image):\n    image_blurred = cv2.GaussianBlur(image, (0, 0), 3)\n    image_sharp = cv2.addWeighted(image, 1.5, image_blurred, -0.5, 0)\n    return image_sharp\n\n# function to get an image\ndef read_img(filepath, size):\n    img = image.load_img(os.path.join(data_kaggle, filepath), target_size=size)\n    #convert image to array\n    img = image.img_to_array(img)\n    return img","94bde7fc":"#get an image\nimg = read_img(df['file'][12],(255,255))\n#mask\nimage_mask = create_mask_for_plant(img)\n#segmentation\nimage_segmented = segment_image(img)\n#sharpen the image\nimage_sharpen = sharpen_image(image_segmented)\n\nfig, ax = plt.subplots(1, 4, figsize=(10, 5));\nplt.suptitle('SAMPLE PROCESSED IMAGE', x=0.5, y=0.8)\nplt.tight_layout(1)\n\nax[0].set_title('ORIGINAL', fontsize=12)\nax[1].set_title('MASK', fontsize=12)\nax[2].set_title('SEGMENTED', fontsize=12)\nax[3].set_title('SHARPEN', fontsize=12)\n\n\nax[0].imshow(img\/255);\nax[1].imshow(image_mask);\nax[2].imshow(image_segmented);\nax[3].imshow(image_sharpen);\n\n","b939daaf":"INPUT_SIZE=255\n\n##preprocess the input\nX_train = np.zeros((len(df), INPUT_SIZE, INPUT_SIZE, df.shape[1]), dtype='float')\nfor i, file in tqdm(enumerate(df['file'])):\n    #read image\n    img = read_img(file,(INPUT_SIZE,INPUT_SIZE))\n    #masking and segmentation\n    image_segmented = segment_image(img)\n    #sharpen\n    image_sharpen = sharpen_image(image_segmented)\n    x = xception.preprocess_input(np.expand_dims(image_sharpen.copy(), axis=0))\n    X_train[i] = x","17bca5cc":"print('Train Image Shape: ', X_train.shape)\nprint('Train Image Size: ', X_train.size)","9b50ceac":"y = df['id']\ntrain_x, train_val, y_train, y_val = train_test_split(X_train, y, test_size=0.1, random_state=101)","4c63d370":"print('GOAT IMAGES ON TRAINING DATA: ',y_train[y_train==0].shape[0])\nprint('SHEEP IMAGES ON TRAINING DATA: ',y_train[y_train==1].shape[0])","a451a1ab":"##get the features\nxception_bf = xception.Xception(weights='imagenet', include_top=False, pooling='avg')\nbf_train_x = xception_bf.predict(train_x, batch_size=32, verbose=1)\nbf_train_val = xception_bf.predict(train_val, batch_size=32, verbose=1)","73cb720e":"#print shape of feature and size\nprint('Train Shape: ', bf_train_x.shape)\nprint('Train Size: ', bf_train_x.size)\n\nprint('Validation Shape: ', bf_train_val.shape)\nprint('Validation Size: ', bf_train_val.size)","5d89c5dd":"model = Sequential()\nmodel.add(Dense(units = 75 , activation = 'relu', input_dim=bf_train_x.shape[1]))\nmodel.add(Dense(units = 2, activation = 'softmax'))\n\nmodel.add(Flatten())\nmodel.add(Dropout(0.15))\nmodel.compile(optimizer = 'adam' , loss = 'binary_crossentropy' , metrics = ['accuracy'])\nmodel.summary()","e6723051":"#train the model \nhistory = model.fit(bf_train_x, y_train, epochs=1000, batch_size=32);","a7cc4ffe":"plot_model(model, to_file='model.png')","38ac4f21":"plt.plot(history.history['accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epochs')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\nplt.savefig('model_accuracy.png')\n# summarize history for loss\nplt.plot(history.history['loss'])\n#plt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epochs')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\nplt.savefig('model_loss.png')","3d95c538":"confusion_mat = confusion_matrix(y_val, predictions)\n\nplt.figure(figsize=(4,4))\nsns.heatmap(confusion_mat, square=True, annot=True,\n            yticklabels=['Goat', 'Sheep'],\n            xticklabels=['Goat', 'Sheep']);\nplt.title('CONFUSION MATRIX');\nplt.xlabel('Y_TRUE');\nplt.ylabel(\"PREDICTIONS\");","19f03a40":"print(classification_report(y_val, predictions))","2f3ee1aa":"# Analyze\n","1e8609eb":"# Model","487ecc16":"# CNN Goat\/Sheep Prediction","70670f2a":"# Train split","479cf1b5":"# Preprocessing","f3180bdd":"# Feature Extraction"}}