{"cell_type":{"e7fb9346":"code","a206a67f":"code","beff0e7f":"code","3bbdc720":"code","60d1eb39":"code","67461f35":"code","d0742d98":"code","80e3ef69":"code","2f589247":"code","110f0dae":"code","2cf1d7de":"code","a8daa072":"code","16723ef5":"code","e12ea08d":"code","c9e9e09a":"code","9a623a69":"code","e509a749":"code","e0eb4cb2":"code","3ea3a33d":"code","541817f4":"code","9a56b92c":"code","a25102ba":"code","879861a2":"code","48e25b08":"code","4665ca3e":"code","77297474":"code","6d90a852":"code","fb3fbfad":"code","23779c88":"code","2082df55":"code","c7d91544":"code","d5dc6824":"code","1b2f6baa":"markdown","0a72bfb6":"markdown","1ed7b336":"markdown","59ecee72":"markdown","43f922dd":"markdown","2c9acd13":"markdown","feb3ebeb":"markdown","6ff9949f":"markdown","6f6b8e16":"markdown","a719d747":"markdown","763d0113":"markdown","80aed4a7":"markdown","9d75f742":"markdown","5a3a29f1":"markdown","6421ee8e":"markdown","26873ede":"markdown","22d2c678":"markdown","c9e815b8":"markdown","3f8c12de":"markdown","7b43f091":"markdown","00fb13ba":"markdown","2d4a1851":"markdown","7e8f03f5":"markdown","ceffc4a3":"markdown"},"source":{"e7fb9346":"\nimport numpy as np \nimport pandas as pd \nfrom pandas.io.json import json_normalize\nimport json\nimport os\n\n#Libraries for plots\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\ninit_notebook_mode(connected = True)\nfrom IPython.display import HTML\nplt.style.use('fivethirtyeight')\nsns.set_context(rc = {\"lines.linewidth\": 2})\n\nimport random\nimport datetime as dt\n\n# For feature Selection\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.metrics import accuracy_score\n\n\n\n# Stats from Scipy for Hypothesis testing\nfrom scipy.stats import norm\nfrom scipy.stats import kurtosis, skew\nfrom scipy.stats import shapiro\nfrom scipy.stats import normaltest\n\n\n\ndef load_df(csv_path = '..\/input\/train.csv', nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    \n    df = pd.read_csv(csv_path, \n                     converters = {column: json.loads for column in JSON_COLUMNS}, \n                     dtype = {'fullVisitorId': 'str'}, \n                     nrows = nrows)\n    \n    for column in JSON_COLUMNS:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}\")\n    return df\n\nprint(os.listdir(\"..\/input\"))\n\n# For random color in my Plotly plots.\ndef randomc():\n    r = random.randint(1,255)\n    g = random.randint(1,255)\n    b = random.randint(1,255)\n    return('rgb({},{},{})'.format(r,g,b))\n\n","a206a67f":"%%time\ntrain_df = load_df()\n#test_df = load_df(\"..\/input\/test.csv\")","beff0e7f":"train_df.info()\n","3bbdc720":"# to numeric values\ntrain_df['totals.transactionRevenue'] = pd.to_numeric(train_df['totals.transactionRevenue'])\ntrain_df['totals.transactionRevenue'] = train_df['totals.transactionRevenue'].fillna(0)\ntrain_df['totals.hits'] = pd.to_numeric(train_df['totals.hits']).fillna(0)\ntrain_df['totals.pageviews'] = pd.to_numeric(train_df['totals.pageviews']).fillna(0)\n\n#dates from int to Timestamp\ntrain_df['date'] = pd.to_datetime(train_df.date, format='%Y%m%d')\n\n# drop useless colums that have only 1 value\ntrain_const_cols = [ col for col in train_df.columns if len(train_df[col].unique()) == 1]\ntrain_df.drop(train_const_cols, axis = 1, inplace = True)\n","60d1eb39":"misvalue_dic = {}\nfor column in train_df :\n    v = 100 * train_df[column].isna().sum() \/ len(train_df)\n    column\n    if v > 0 :\n        misvalue_dic[column]=v\n","67461f35":"misvalue_dic","d0742d98":"trace1 = go.Bar(\n                x = list(misvalue_dic.keys()),\n                y = list(misvalue_dic.values()),\n                name = \"Missing Values\",\n                marker = dict(color=randomc()))\ndata = [trace1]\nlayout = go.Layout(\n    xaxis = dict(tickangle = -25),\n    title='Percentage of missing value for uncomplete columns',\n)\nfig = go.Figure(data = data, layout = layout)\niplot(fig)\n\n    ","80e3ef69":"#Some insight on the target variable : Total Transaction Revenue\ngdf = train_df.groupby(\"fullVisitorId\")[\"totals.transactionRevenue\"].sum().reset_index()\n\n#take non zero total transaction revenues\nnz_df = gdf.loc[gdf[\"totals.transactionRevenue\"] > 0]\nlog_nz = np.log1p(nz_df[\"totals.transactionRevenue\"])\nnz = nz_df[\"totals.transactionRevenue\"]\n\n\n","2f589247":"print(\"Among all the visitors, only {0:.3f} percent have bought something from August 2016 to August 2017\".format( round(100*len(nz)\/len(gdf),4)))","110f0dae":"plt.subplots(figsize = (14, 7))\nax = sns.distplot(a = nz).set_title('Distribution of non null Totals Transaction Revenues')","2cf1d7de":"plt.subplots(figsize = (16, 7))\nax = sns.distplot(a = log_nz,axlabel = \"ln(1+ totals.transactionRevenue)\" ).set_title('Distribution of Ln(1+non null Totals Transaction Revenues)')\n","a8daa072":"log_nz.describe()","16723ef5":"print( \"The skewness of the distribution is {}.\".format(log_nz.skew()))\nprint( \"The kurtosis of the distribution is {}.\".format(log_nz.kurt()))","e12ea08d":"# Shapiro Normality Test\nstat, p = shapiro(log_nz)\nprint('Statistics=%.3f, p=%.3f' % (stat, p))\n\nalpha = 0.05\nif p > alpha:\n    print('Sample looks Gaussian (fail to reject H0)')\nelse:\n    print('Sample does not look Gaussian (reject H0)')","c9e9e09a":"#D'Agostino Test\nstat, p = normaltest(log_nz)\nprint('Statistics=%.3f, p=%.3f' % (stat, p))\n\nalpha = 0.05\nif p > alpha:\n    print('Sample looks Gaussian (fail to reject H0)')\nelse:\n    print('Sample does not look Gaussian (reject H0)')\n    \n","9a623a69":"nz2 = train_df.loc[train_df['totals.transactionRevenue'] > 0]\nz2 = train_df.loc[train_df['totals.transactionRevenue'] == 0]\nfig, ax1 = plt.subplots(figsize = (18, 10))\nplt.title(\"Revenue and Non Revenue visits\");\nz2.groupby(['date'])['totals.transactionRevenue'].count().plot()\nax1.set_ylabel('Visits count')\nplt.legend(['Non-Revenue and Revenue users'], loc =(0.70,0.9) )\nax2 = ax1.twinx()\nnz2.groupby(['date'])['totals.transactionRevenue'].count().plot(color='brown')\nax2.set_ylabel('Visits count')\nplt.legend(['Revenue users'], loc = (0.7, 0.95))\nplt.grid(False)","e509a749":"def barplot_visit(feat):\n    feat_data = 100*train_df[feat].value_counts()\/len(train_df)\n    feat_data = feat_data.to_frame().reset_index()\n    \n    nz = 100 * train_df.loc[train_df['totals.transactionRevenue'] > 0][feat].value_counts() \/ len(train_df.loc[train_df['totals.transactionRevenue'] > 0])\n    nz = nz.to_frame().reset_index()\n    \n    trace1 = go.Bar(\n        x=feat_data['index'],\n        y=feat_data[feat],\n        name='Zero Revenue',\n        marker=dict(color=randomc())\n    )\n    \n    trace2 = go.Bar(\n        x=nz['index'],\n        y=nz[feat],\n        name='Non Zero Revenue',\n        marker=dict(color=randomc())\n    )\n    \n    layout = go.Layout(\n        title=feat,\n        height=100, width=100,\n        xaxis=dict(\n            tickfont=dict(size=14)\n        ),\n        yaxis=dict(\n            title='Percentage of visits for each {}'.format(feat),\n            titlefont=dict(size=16),\n            tickfont=dict(size=14)\n        ),\n        legend=dict(\n            x=1.0,\n            y=1.0,\n            bgcolor='rgb(255, 255, 255)',\n            bordercolor='rgb(255, 255, 255)'\n        ),\n       \n    )\n    \n\n    fig = tools.make_subplots(rows=1, cols=2)\n\n    fig.append_trace(trace1, 1, 1)\n    fig.append_trace(trace2, 1, 2)\n    fig['layout'].update(autosize=False, height=300, width=1000, title='Percentage of visits for each {}'.format(feat))\n\n    iplot(fig)\n\n","e0eb4cb2":"barplot_visit('channelGrouping')\n","3ea3a33d":"barplot_visit('device.operatingSystem')","541817f4":"barplot_visit('geoNetwork.continent')","9a56b92c":"barplot_visit('geoNetwork.subContinent')","a25102ba":"barplot_visit('device.deviceCategory')","879861a2":"def barplot_revenue(feat):\n    feat_data = 100*train_df.groupby(feat)['totals.transactionRevenue'].sum()\/train_df['totals.transactionRevenue'].sum()\n    feat_data = feat_data.to_frame().reset_index()\n\n    trace0 = go.Bar(\n        x=feat_data[feat],\n        y=feat_data['totals.transactionRevenue'],\n        name=feat,\n        marker=dict(color=randomc())\n    )\n    \n    layout = go.Layout(\n        title=feat,\n        autosize=False,\n        width=800,\n        height=300,\n        xaxis=dict(\n            tickfont=dict(size=14)\n        ),\n        yaxis=dict(\n            title='Percentage of revenue for each {}'.format(feat),\n            titlefont=dict(size=16),\n            tickfont=dict(size=14)\n        ),\n        legend=dict(\n            x=1.0,\n            y=1.0),\n       \n    )\n    \n    fig = go.Figure(data=[trace0], layout=layout)\n    iplot(fig)\n","48e25b08":"barplot_revenue('channelGrouping')","4665ca3e":"barplot_revenue('device.operatingSystem')","77297474":"barplot_revenue('geoNetwork.continent')","6d90a852":"barplot_revenue('device.deviceCategory')","fb3fbfad":"date_revenue = 100* train_df.groupby('date')['totals.transactionRevenue'].sum()\/train_df['totals.transactionRevenue'].sum()\n\nplt.subplots(figsize = (14, 6))\nplt.title(\"Percenntage of revenue per day\");\n\ndate_revenue.plot(linewidth=1.25)","23779c88":"from sklearn.preprocessing import LabelEncoder\n\n#categorical features\ncat_feat = list(train_df.columns.values)\ncat_feat.remove('totals.transactionRevenue')\ncat_feat.remove(\"totals.pageviews\")\ncat_feat.remove(\"totals.hits\")\n\n#numerical features\nnum_feat = [\"totals.hits\", \"totals.pageviews\"]\n\n\nfor feat in cat_feat:\n    lbl = LabelEncoder()\n    lbl.fit(list(train_df[feat].values.astype('str')))\n    train_df[feat] = lbl.transform(list(train_df[feat].values.astype('str')))\nfor feat in num_feat:\n    train_df[feat] = train_df[feat].astype(float)\n\ny= train_df['totals.transactionRevenue']\n\nfeats= cat_feat + num_feat\n\nX = train_df[feats]\n\n# Train test split without shuffle to keep the date order\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, shuffle=False, random_state=0)\n\n\n","2082df55":"# Create a random forest classifier\nfrom sklearn.ensemble import RandomForestRegressor\n\nrgr = RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=2,\n           max_features='auto', max_leaf_nodes=None,\n           min_impurity_decrease=0.0, min_impurity_split=None,\n           min_samples_leaf=1, min_samples_split=2,\n           min_weight_fraction_leaf=0.0, n_estimators=1000, n_jobs=-1,\n           oob_score=False, random_state=0, verbose=1, warm_start=False)\n# Train the classifier. You can try with other parameters, \n# Especially try to use more estimators if your machine is more powerful.\nrgr.fit(X_train, y_train)\n\n# Print the name and gini importance of each feature\nfor feature in zip(feats, rgr.feature_importances_):\n    print(feature)","c7d91544":"feat_score =sorted(zip(feats, rgr.feature_importances_), key=lambda tup: tup[1], reverse=True)\nscore_list=[x[1] for x in feat_score]\nfeat_list=[x[0] for x in feat_score]\n\n","d5dc6824":"trace0 = go.Bar(\n                x = feat_list,\n                y = score_list,\n                name = \"Score of features\",\n                marker = dict(color=randomc()))\ndata = [trace0]\nlayout = go.Layout(\n    xaxis = dict(tickangle = -25),\n    title='Score of features',\n)\nfig = go.Figure(data = data, layout = layout)\niplot(fig)\n","1b2f6baa":"How surprising ! People using Macintosh seem buy more often than Windows and Linux users","0a72bfb6":"Taking the log here is what we get. Much nicer !","1ed7b336":"|skewness|< 0.5 ==> The distribution is symmetric around the mean <br>\nNo conclusion for the kurtosis though as it is between -2 and 2.\n<br> <br>\n\n**Normality Test:**\nWe will perform [Shapiro-Wilk test](https:\/\/en.wikipedia.org\/wiki\/Shapiro%E2%80%93Wilk_test), based on expected values, and [d'Agostino test](https:\/\/en.wikipedia.org\/wiki\/D%27Agostino%27s_K-squared_test), based on kurtosis and skewness. Noteworthy : the Shapiro test is said to be less acurate when n is large (>1000) .\n","59ecee72":"First plot : \n**Ratio of missing values**","43f922dd":"**Conclusion of EDA :** \n<br>\n<br>\nWe don't do EDA just for the sake of EDA, here is  what we can conclude :\n\n1. The distribution of the sums of non zero transaction revenues does not fit a popular distribution. Especially not the normal distribution. \n2. Appart from this last feature creation ( binary variable to indicate week end days), this EDA does not give many hint for potential manual feature engineering\n<br>\n<br>\nThe dataset has many categorical features and only two numerical features. So I think ensembles will be of a good help for feature engineering and predictions too. If anyone has a non-blackbox method or a more interpretable way to do feature engineering, please tell me ! I would like to know. \n","2c9acd13":"Revenue comes mostly from desktop users","feb3ebeb":"Conclusion : WIth such a low p-value, we reject the hypothesis of normality <br>\nLink to remind [Misunderstanding of p-values](https:\/\/en.wikipedia.org\/wiki\/Misunderstandings_of_p-values)","6ff9949f":" So the distribution has a nice bell shape but the tails are too light to be a normal distribution. We can verify this assumption with **normality tests**.  <br><br>\nHere is a quick description of the distribution of log values. Let's compute the [skewness](https:\/\/en.wikipedia.org\/wiki\/Skewness) and [kurtosis](https:\/\/fr.wikipedia.org\/wiki\/Kurtosis) before the normality test","6f6b8e16":"**This is the end of my kernel**\n<br>\n<br>\nEDA did not give many hints so manual feature engineering did not seem useful. We have performed feature engineering with a randomforest algorithm. The most important feature seems to be the total page viewed, by far.\n<br>\nQuite interesting analysis. Though, I wonder how this problem would be tackled by a professional data science team. What happens when you have a dataset where the only methods you can use for both feature engineering\/selection, are ensemble or black-box model. How do you explain the result to the client ? \" I did some magic tricks and my algorithm has good performance \" ?? Any insight please tell me I want to know !\n\nThank you for reading !\n","a719d747":"I only load the training set to avoid memory issues. If you fork this kernel, the data processing steps on both sets.","763d0113":"![eee](http:\/\/googletoday.net\/wp-content\/uploads\/2015\/10\/GoogleMerchandiseStore-Haul-1024x488.jpg)\n\nData science has a lot of applications in e-commerce and marketing. This competition introduces yet another challenge in these domains that can be tackled using Machine Learning techniques.\n\n**The goal** is to predict the natural log of the sum of all transactions per user. In layman's terms, we want to design an algorithm that will identify clients who spend a lot of money on Google Merchandise Store and those who don't.\n\n**This Kernel is dedicated to Exploratory Data Analysis**. I will try to gain as many insights as possible. I will do another kernel to benchmark different models on this dataset, from the most interpretable to the most complex one.\n\nHere is what I will do :\n1. Check missing values and data processing\n2. Compute statistics on the target variable \/ Hypothesis Testing\n3. Exploratory Data Analysis\n4. Features Selection\n\nEnjoy and feel free to give any constructive critics !","80aed4a7":"**Feature Selection**\n<br>\n<br>\nAs manual feature engineering is not obvious here, let's use **Random Forest Algorithm** for Feature Selection. We will first one-hot encode the whole training set.","9d75f742":"**Distribution of the Target Variable\n**\n\nLet's plot the distribution of the Target Variable, non null values only<br\/>\nWithout taking the log of totals, here is what it looks like.","5a3a29f1":"Some columns have almost 100% of missing values ! \n<br\/> Might be tempting to drop them thinking they are useless. We don't know anything yet about this dataset, so it would be risky.","6421ee8e":"Visits from Referal Channel group tend to buy more whereas they represent only 11% of the visits","26873ede":"**Data Pre-Processing**","22d2c678":"**A quick summary of the training set.**","c9e815b8":"As expected, most people visit the website from their desktop\/laptop","3f8c12de":"**Worth noticing :**\n<br>\nRevenue transaction increase a lot in december. Good Christmas gift !","7b43f091":"Are there specific periods where people are show more interes for Google products ? For example when a new version of Android is released ? Let's see for ourself <br> <br>\n\n**Number of visits per day : **","00fb13ba":"**Let's see how the continent, the device and other  features are related to the number of visits**","2d4a1851":"**What we get from that :**\n<br>\n<br>\nFor every month we see approximately 4 drop & rise patterns. And the peaks are sharper. We can easily infer than people are more likely to buy during the week end. So if we were doind manual feature engineering we could add a column of binary variable indicating if the corresponding day is in the week end or not.","7e8f03f5":"![](https:\/\/juicebubble.co.za\/wp-content\/uploads\/2018\/03\/normal-paranormal-distribution-white-400x400.png)","ceffc4a3":"Compute the ratio of Missing values"}}