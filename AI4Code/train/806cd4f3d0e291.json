{"cell_type":{"d30c81fb":"code","ebee5c82":"code","27bf6a07":"code","ed44825c":"code","810ac503":"code","7f30a808":"code","e746863f":"code","6c121f1f":"code","a4f88612":"code","fcd9f449":"code","dcb21235":"code","6128a1ab":"code","a77d679b":"code","621b76c6":"code","da92f608":"code","b1352d2e":"code","12aa00b1":"markdown","1624e7e6":"markdown","2d53a225":"markdown","e849759c":"markdown","e3a4351e":"markdown"},"source":{"d30c81fb":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport random","ebee5c82":"mnist = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")","27bf6a07":"y = mnist.iloc[:, 0].values\nx = mnist.iloc[:, 1:].values\n#\uc774\ubbf8\uc9c0\uc640 \uc608\uce21\ud558\uace0\uc790 \ud558\ub294 \uac12\uc744 \ubd84\ub958\ud569\ub2c8\ub2e4.","ed44825c":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)\n#valid set\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.","810ac503":"x_test = x_test \/ 255\nx_train = x_train \/ 255\nx_train = x_train.reshape(x_train.shape[0], 28, 28, 1)\nx_test = x_test.reshape(x_test.shape[0], 28, 28, 1)\n#\ub370\uc774\ud130\ub97c \uacc4\uc0b0\ud558\uae30 \uc27d\ub3c4\ub85d \uc791\uac8c \ub9cc\ub4ed\ub2c8\ub2e4.","7f30a808":"y_train = tf.keras.utils.to_categorical(y_train, 10)\ny_test = tf.keras.utils.to_categorical(y_test, 10)\n#3,5,9\ucc98\ub7fc \uc22b\uc790\uc758 \ud615\ud0dc\ub85c \uc788\ub294 y\ub97c [0,0,0,1,0,0,0,0,0,0]\uc640 \uac19\uc740 \ud615\uc2dd\uc73c\ub85c \ubcc0\uacbd\ud574\uc90d\ub2c8\ub2e4.\n#one hot encoding","e746863f":"learning_rate = 0.00062","6c121f1f":"model = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Conv2D(filters=20, kernel_size=(3, 3), input_shape=(28,28,1),activation='relu',kernel_initializer='glorot_uniform',padding=\"same\"))\nfor a in range(3):\n    model.add(tf.keras.layers.Conv2D(filters=62, kernel_size=(3, 3), activation='relu',kernel_initializer='glorot_uniform',padding=\"same\"))\n    model.add(tf.keras.layers.Dropout(0.38))\n    model.add(tf.keras.layers.MaxPooling2D(pool_size=(3, 3)))\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(units=62, kernel_initializer='glorot_normal', activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=10, kernel_initializer='glorot_normal', activation='softmax'))\nmodel.summary()\n#\uc5ec\ub7ec \uc2dc\ub3c4\ub97c \ud1b5\ud574 \uc5bb\uc740 \uac12\uc744 \ubc14\ud0d5\uc73c\ub85c \ubaa8\ub378\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n#conv2D layer\ub294 Convolution\ud558\uac8c \uc774\ubbf8\uc9c0\ub97c \ucc98\ub9ac\ud574\uc90d\ub2c8\ub2e4.\n#relu\ub294 \uc74c\uc218 \uac12\uc5d0\ub294 0\uc758 \uac00\uc911\uce58\ub97c \uc591\uc218 \uac12\uc5d0\ub294 1\uc758 \uac00\uc911\uce58\ub97c \uacf1\ud558\uc5ec \uac12\uc744 \ucc98\ub9ac\ud569\ub2c8\ub2e4.\n#kernel_initializer='glorot_uniform'\ub294 Xavier Initialization\uc774\ub77c\uace0\ub3c4 \ubd88\ub9ac\uba70 \uc774\uc804 \ub178\ub4dc\uc640 \ub2e4\uc74c \ub178\ub4dc\uc758 \uac1c\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uac00\uc911\uce58\ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4.\n#padding=\"same\"\uc740 \ud14c\ub450\ub9ac\uc5d0 0\uc758 \uac12\uc744 \ucd94\uac00\uc2dc\ucf1c \uc5b4\ub514\uac00 \ubaa8\uc11c\ub9ac\uc778\uc9c0 \uc54c\uac8c \ud558\uace0 output\uc758 \ud06c\uae30\ub97c \uac19\uac8c \ud574\uc90d\ub2c8\ub2e4 padding=\"valid\"\ub77c\uba74 \uc544\ubb34\ub7f0 \uac12\ub3c4 \ucd94\uac00\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n#Dropout\uc740 \ud2b9\uc815 layer\uc5d0 \ub108\ubb34 \ub9ce\uc740 \uac00\uc911\uce58\uac00 \uc3e0\ub9ac\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\uc5ec \ub79c\ub364\ud558\uac8c layer\uac04\uc758 \uc5f0\uacb0\uc744 \ud574\uc81c\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n#MaxPooling2D layer\ub294 n,n\uc0ac\uc774\uc988\uc758 \uc0ac\uac01\ud615\uc548\uc5d0 \uc788\ub294 \uac12 \uc911 \uac00\uc7a5 \ud070 \uac12\ub9cc\uc744 \uc774\uc6a9\ud558\uc5ec \uc0c8\ub85c\uc6b4 \uc774\ubbf8\uc9c0\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\n#Flatten layer\ub294 conv2d\ub97c \uac70\uce58\uace0 \ub098\uc628 2\ucc28\uc6d0\uc758 \ub370\uc774\ud130\ub97c 1\ucc28\uc6d0\uc758 \ub370\uc774\ud130\ub85c \ud3b4\uc8fc\uc5b4 dense layer\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ud569\ub2c8\ub2e4.\n#\ub9c8\uc9c0\ub9c9\uc73c\ub85c softmax\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74 units\uac1c\uc218\uc758 target\uc774 \uc788\uc744 \ub54c 1\ubc88\uc9f8, 3\ubc88\uc9f8 \ub4f1 \uc5b4\ub514\uc758 \uac12\uc77c \ud655\ub960\uc774 \ub192\uc740\uc9c0\uc5d0 \ub530\ub77c [0,0,0,1,0,0,0,0,0,0]\uc640 \uac19\uc740 \ud615\uc2dd\uc73c\ub85c \ucc98\ub9ac\ub429\ub2c8\ub2e4.","a4f88612":"model.compile(loss='categorical_crossentropy', optimizer=tf.keras.optimizers.RMSprop(lr=learning_rate), metrics=['accuracy'])\n#adam\uacfc RMSprop\uc774 \uc788\uc5c8\uc73c\ub098 RMSprop\uc774 \uc870\uae08 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \ubcf4\uc5ec\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.","fcd9f449":"callbacks = tf.keras.callbacks.ModelCheckpoint(filepath='model.h5', monitor='val_loss', save_best_only=True),\n            #tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience = 30, verbose=1)]\n#\ucc98\uc74c\uc5d0\ub294 EarlyStopping\uc744 \uc0ac\uc6a9\ud558\uc600\uc9c0\ub9cc \ub370\uc774\ud130\uac00 \uc801\uc5b4 overfitting\uc774 \ub418\uae30 \uc5b4\ub824\uc6b4 \ud658\uacbd\uc774\ub77c\uace0 \uc0dd\uac01\ub418\uc5b4 ModelCheckpoint\ub97c \uc0ac\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4.\n#ModelCheckpoint\ub294 val_loss\ub97c \ubaa8\ub2c8\ud130 \ud558\uba70 \uac00\uc7a5 \ucd5c\uc0c1\uc758 \uac12\uc744 \uac00\uc9c4 \ubaa8\ub378\uc744 model.h5\ud30c\uc77c\uc5d0 \uc5c5\ub370\uc774\ud2b8\ud569\ub2c8\ub2e4.","dcb21235":"history = model.fit(x_train, y_train, batch_size=100, epochs=100,validation_data =(x_test,y_test),callbacks=callbacks,verbose=0)\n#verbose\ub97c 0\uc73c\ub85c \ud558\uba74 \uae30\ub85d\uc774 \uc548\ubcf4\uc785\ub2c8\ub2e4.\n#verbose\ub97c 1\ub85c \ud558\uba74 \ud559\uc2b5\uc774 \uc5bc\ub9c8\uc815\ub3c4 \ub418\uc5c8\ub294\uc9c0, loss, val_loss, accuracy, val_accuracy\ub4f1\uc774 \ud45c\uc2dc\ub429\ub2c8\ub2e4.\n#verbose\ub97c 2\ub85c \ud558\uba74 loss, val_loss, accuracy, val_accuracy\ub4f1\ub9cc \ud45c\uc2dc\ub429\ub2c8\ub2e4.","6128a1ab":"history_frame = pd.DataFrame(history.history)\nhistory_frame.loc[:, ['loss', 'val_loss']].plot()\nhistory_frame.loc[:, ['accuracy', 'val_accuracy']].plot();\n#\uac01 \uac12\ub4e4\uc774 \uc5b4\ub5bb\uac8c \ubcc0\ud558\uc600\ub294\uc9c0\ub97c \uc0b4\ud3b4\ubcf4\uace0 \ud639\uc2dc\ub098 \uc624\ubc84\ud53c\ud305\uc774 \ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.","a77d679b":"y_train = tf.keras.utils.to_categorical(y_train, 10)\ny_test = tf.keras.utils.to_categorical(y_test, 10)\n#one hot enciding\ubd80\ubd84\uc785\ub2c8\ub2e4.","621b76c6":"model = tf.keras.models.load_model('.\/model.h5') \n#ModelCheckpoint\ub97c \uc0ac\uc6a9\ud558\uc5ec \ucd5c\uace0\uc758 \uac12\uc744 \ubcf4\uc5ec\uc8fc\uc5c8\ub358 \ubaa8\ub378\uc744 \ubd88\ub7ec\uc635\ub2c8\ub2e4.","da92f608":"test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\").values\ntest = test.reshape(-1, 28, 28, 1).astype('float32') \/ 255.0\ny_pred = model.predict(test).argmax(axis=1)\n#\ubaa8\ub378\uc744 \uc774\uc6a9\ud558\uc5ec \uac12\uc744 \uc608\uce21\ud558\ub294 \ubd80\ubd84\uc785\ub2c8\ub2e4.","b1352d2e":"submission = pd.DataFrame({'ImageId': np.arange(1, 28001), 'Label': y_pred})\nsubmission.to_csv(\"submission.csv\", index = False)\n#dataframe\uc744 csv\ud615\uc2dd\uc73c\ub85c \ub9cc\ub4e4\uc5b4 submission\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.","12aa00b1":"|      | layer\uc758 \uc885\ub958\uc640 \uc218                                                | \ud30c\ub77c\ubbf8\ud130 \uc218               | best loss, accuracy                                                       | EarlyStopping \uc5ec\ubd80 |              \ubc14\uafbc \uc810              |                        \ud55c\uc904\ud3c9                       |\n|------|------------------------------------------------------------------|---------------------------|---------------------------------------------------------------------------|:------------------:|:---------------------------------:|:---------------------------------------------------:|\n| 1\ucc28  | conv2D 1\uac1c filters 20       \/        Dense 1\uac1c \ucd5c\ub300 units=20     | Total params: 314,030     | loss: 0.0076 - accuracy: 0.9987 - val_loss: 0.0829 - val_accuracy: 0.9806 |          o         |           \uae30\ubcf8\uc801\uc778 \uc2dc\uc791           |                                                     |\n| 2\ucc28  | conv2D 1\uac1c filters 20       \/        Dense 1\uac1c \ucd5c\ub300 units=30     | Total params: 470,940     | loss: 0.0064 - accuracy: 0.9983 - val_loss: 0.0849 - val_accuracy: 0.9801 |          o         |     dense\ub97c \uc880 wide\ud558\uac8c \ud574\ubcf4\uc790    |                    \ubcc4 \ucc28\uc774\uac00 \uc5c6\ub2e4                   |\n| 3\ucc28  | conv2D 1\uac1c filters 20       \/        Dense 1\uac1c \ucd5c\ub300 units=100    | Total params: 1,569,310   | loss: 0.0065 - accuracy: 0.9984 - val_loss: 0.0751 - val_accuracy: 0.9806 |          o         |     dense\ub97c \ub354 wide\ud558\uac8c \ud574\ubcf4\uc790    |                    loss\uac00 \uc904\uc5c8\ub2e4                    |\n| 4\ucc28  | conv2D 1\uac1c filters 20       \/        Dense 1\uac1c \ucd5c\ub300 units=300    | Total params: 4,707,510   | loss: 0.0049 - accuracy: 0.9988 - val_loss: 0.0619 - val_accuracy: 0.9843 |          o         |     dense\ub97c \ub354 wide\ud558\uac8c \ud574\ubcf4\uc790    |                   \ud6a8\uacfc\ub294 \uad49\uc7a5\ud588\ub2e4                   |\n| 5\ucc28  | conv2D 1\uac1c filters 20       \/        Dense 1\uac1c \ucd5c\ub300 units=1000   | Total params: 15,691,210  | loss: 0.0023 - accuracy: 0.9994 - val_loss: 0.0683 - val_accuracy: 0.9852 |          o         |     dense\ub97c \ub354 wide\ud558\uac8c \ud574\ubcf4\uc790    |                   \ud6a8\uacfc\ub294 \ubbf8\ubbf8\ud588\ub2e4                   |\n| 6\ucc28  | conv2D 1\uac1c filters 20       \/        Dense 1\uac1c \ucd5c\ub300 units=2000   | Total params: 31,382,210  | loss: 0.0049 - accuracy: 0.9987 - val_loss: 0.0669 - val_accuracy: 0.9833 |          o         |     dense\ub97c \ub354 wide\ud558\uac8c \ud574\ubcf4\uc790    |                   \ud6a8\uacfc\ub294 \ubbf8\ubbf8\ud588\ub2e4                   |\n| 7\ucc28  | conv2D 1\uac1c filters 100       \/        Dense 1\uac1c \ucd5c\ub300 units=1000  | Total params: 7,842,110   | loss: 0.0072 - accuracy: 0.9978 - val_loss: 0.0794 - val_accuracy: 0.9813 |          o         |       filter\uc758 \uc218\ub97c \ub298\ub824\ubcf4\uc790      |                   \ud6a8\uacfc\ub294 \ubbf8\ubbf8\ud588\ub2e4                   |\n| 8\ucc28  | conv2D 1\uac1c filters 1000       \/        Dense 1\uac1c \ucd5c\ub300 units=1000 | Total params: 784,021,010 | loss: 0.0103 - accuracy: 0.9968 - val_loss: 0.0818 - val_accuracy: 0.9818 |          o         |       filter\uc758 \uc218\ub97c \ub298\ub824\ubcf4\uc790      |         \ud6a8\uacfc\ub3c4 \ubcc4\ub85c\uace0 \ud55cepoch\uc5d0 1\ubd84\uc774 \uac78\ub9b0\ub2e4        |\n| 9\ucc28  | conv2D 1\uac1c filters 5       \/        Dense 1\uac1c \ucd5c\ub300 units=100     | Total params: 393,160     | loss: 0.0111 - accuracy: 0.9965 - val_loss: 0.0785 - val_accuracy: 0.9804 |          o         |       filter\uc758 \uc218\ub97c \uc904\uc5ec\ubcf4\uc790      |                    \ubcc4 \ucc28\uc774\uac00 \uc5c6\ub2e4                   |\n| 10\ucc28 | conv2D 1\uac1c filters 5 \/ Dense 1\uac1c \ucd5c\ub300 units=1000                 | Total params: 3,931,060   | loss: 0.0041 - accuracy: 0.9987 - val_loss: 0.0980 - val_accuracy: 0.9793 |          o         |     dense\ub97c \ub354 wide\ud558\uac8c \ud574\ubcf4\uc790    |                    \ubcc4 \ucc28\uc774\uac00 \uc5c6\ub2e4                   |\n| 11\ucc28 | conv2D 5\uac1c filters 62 \/ Dense 1\uac1c \ucd5c\ub300 units=100                 | Total params: 2,159,964   | loss: 0.0126 - accuracy: 0.9958 - val_loss: 0.0553 - val_accuracy: 0.9869 |          o         |   conv2d layer\ub97c \ub298\ub824\ubcf4\uc790(valid)  |                \uc131\ub2a5\uc774 \ub9ce\uc774 \uac1c\uc120\ub418\uc5c8\ub2e4               |\n| 12\ucc28 | conv2D 5\uac1c filters 62 \/ Dense 1\uac1c \ucd5c\ub300 units=100(same)           | Total params: 5,011,964   | loss: 0.0080 - accuracy: 0.9975 - val_loss: 0.0511 - val_accuracy: **0.9881*** |          o         |     padding\uc744 same\uc73c\ub85c \ud574\ubcf4\uc790     |                valid\ubcf4\ub2e4 \uc131\ub2a5\uc774 \uc88b\ub2e4                |\n| 13\ucc28 | conv2D 27\uac1c filters 62 ,(2,2)\/ Dense 1\uac1c \ucd5c\ub300 units=100          | Total params: 413,920     | loss: 2.3015 - accuracy: 0.1124 - val_loss: 2.3011 - val_accuracy: 0.1082 |          o         |   conv2d layer\ub97c \ub298\ub824\ubcf4\uc790(valid)  |             \uc774\ubbf8\uc9c0\uac00 \ub108\ubb34 \uc791\uc740 \uac83 \uac19\ub2e4.             |\n| 14\ucc28 | conv2D 27\uac1c filters 62 ,(2,2)\/ Dense 1\uac1c \ucd5c\ub300 units=100          | Total params: 5,268,520   | loss: 2.3014 - accuracy: 0.1124 - val_loss: 2.3010 - val_accuracy: 0.1082 |          o         |   conv2d layer\ub97c \ub298\ub824\ubcf4\uc790(same)   |             \uc774\ubbf8\uc9c0\uac00 \ub108\ubb34 \uc791\uc740 \uac83 \uac19\ub2e4.             |\n| 15\ucc28 | conv2D 10\uac1c filters 62 ,(2,2)\/ Dense 1\uac1c \ucd5c\ub300 units=100          | Total params: 5,006,074   | loss: 0.0042 - accuracy: 0.9988 - val_loss: 0.0896 - val_accuracy: 0.9857 |          o         |      conv2d layer\ub97c \uc904\uc5ec\ubcf4\uc790      | \uc774\ubbf8\uc9c0\uac00 \uc791\uae30 \ub54c\ubb38\uc5d0 conv2d layer\uac00 \uc545\uc601\ud5a5\uc744 \ub07c\uce5c\ub2e4 |\n| 16\ucc28 | conv2D 3\uac1c filters 62 ,(2,2)\/ Dense 5\uac1c \ucd5c\ub300 units=1000          | Total params: 398,822     | loss: 0.0294 - accuracy: 0.9908 - val_loss: 0.0794 - val_accuracy: 0.9788 |          o         | dense\uc758 \uac1c\uc218\ub97c \ub298\ub824\ubcf4\uc790(deep\ud558\uac8c) |             \uc131\ub2a5\uc740 \uc88b\uc73c\ub098 \ud070 \uc601\ud5a5\uc740 \uc5c6\ub2e4            |\n| 17\ucc28 | conv2D 3\uac1c filters 62 ,(2,2)\/ Dense 5\uac1c \ucd5c\ub300 units=1000          | Total params: 29,452,808  | loss: 0.0122 - accuracy: 0.9960 - val_loss: 0.0773 - val_accuracy: 0.9860 |          o         | dense\uc758 \uac1c\uc218\ub97c \ub298\ub824\ubcf4\uc790(deep\ud558\uac8c) |             \uc131\ub2a5\uc740 \uc88b\uc73c\ub098 \ud070 \uc601\ud5a5\uc740 \uc5c6\ub2e4            |","1624e7e6":"# \ub370\uc774\ud130 \uc804\ucc98\ub9ac (\uc774\ubbf8\uc9c0 \ub85c\ub4dc)","2d53a225":"# \ucc98\uc74c\uc73c\ub85c\ub294 \uc5ec\ub7ec\uac00\uc9c0 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4\ubcf4\uba70 \uac00\uc7a5 \uc88b\uc740 \ubaa8\ub378\uc744 \ucc3e\uc544\ubcf4\uc558\uc2b5\ub2c8\ub2e4","e849759c":"# \ub77c\uc774\ube0c\ub7ec\ub9ac import","e3a4351e":"# submission"}}