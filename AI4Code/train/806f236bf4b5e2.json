{"cell_type":{"ebf14b4b":"code","cff0bbe8":"code","792d8641":"code","9226ccf2":"code","cfc307a3":"code","9a61d474":"code","591117e5":"code","dd439fb6":"code","5c34b9a7":"code","0a502b9c":"code","832a265a":"code","7388be83":"code","71b73677":"code","a9340e17":"code","f7a5b7f2":"code","adb75031":"code","fd94ac79":"code","5422c991":"code","7b1aafb9":"code","bdeabab9":"code","83201f72":"code","c22e03e0":"code","ef9f28d2":"code","39c59d5b":"code","3d3185b8":"code","f6c13a68":"code","9ca9b716":"code","ad82df20":"code","b82f1306":"code","12b5bc33":"code","19f2444a":"code","60c0341d":"code","cf80f9f4":"code","1d6f7363":"code","891eee20":"code","06047c50":"markdown","09355817":"markdown","867dcf5a":"markdown","227cde0e":"markdown","41ca1129":"markdown","9be2fe52":"markdown","d7488000":"markdown","67dd0572":"markdown","94093b1e":"markdown","d6411d9f":"markdown","34f23a42":"markdown","4fa83c9a":"markdown","09dadc56":"markdown","91aa7ebe":"markdown","c1476114":"markdown"},"source":{"ebf14b4b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# load data\ntrain = pd.read_csv('..\/input\/train.csv')\nprint('Shape of train set {}'.format(train.shape))\ntest = pd.read_csv('..\/input\/test.csv')\nprint('Shape of test set {}'.format(test.shape))\n\n# for param tuning\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import get_scorer","cff0bbe8":"def onehot_encode(cat_feat, data):\n    '''\n    Encode given categorical feature and add names of new binary columns into the set of features\n    :param cat_feat:\n    :param data:\n    :return:\n    '''\n    encoded = pd.get_dummies(data[cat_feat], prefix=cat_feat, dummy_na=True)\n    res = pd.concat([data.drop(columns=[cat_feat]), encoded], axis='columns')\n    return res\n\ndef add_quality(df, componente='pared', component='wall'):\n    for i in [1,2,3]:\n        i_quality = (df['e{}{}'.format(componente, i)] == 1)\n        df.loc[i_quality, '{}_quality'.format(component)] = i\n    return df\n\ndef to_english(df, sp_pre='pared', eng_pre='wall_', translate=None):\n    '''\n    rename certain columns in specified dataframe from Spanish \n    to English, given the translation\n    '''\n    for sp in translate.keys():\n        spanish_name = sp_pre + '{}'.format(sp)\n        english_name = eng_pre + '{}'.format(translate[sp])\n        df.rename(columns={spanish_name: english_name}, inplace=True)\n    \n    return df","792d8641":"# join train and test\ntest['Target'] = np.nan\ndata_all = pd.concat([train, test])\n\nprint('Shape of all data: {}'.format(data_all.shape))\nn_house = data_all['idhogar'].nunique()\nprint('# unique households in data: {}'.format(n_house))","9226ccf2":"n_row = data_all.shape[0]\nn_null = data_all.drop('Target', axis='columns').isnull().values.sum(axis=0)\ncolumns = list(data_all.columns)\ncolumns.remove('Target')\npd.DataFrame({'column': columns, \n              'n_null': n_null}).sort_values('n_null', ascending=False).head(10)","cfc307a3":"def mk_derived_feats(df):\n    feats_div = [('children_fraction', 'r4t1', 'r4t3'), \n                 ('working_man_fraction', 'r4h2', 'r4t3'),\n                 ('all_man_fraction', 'r4h3', 'r4t3'),\n                 ('human_density', 'tamviv', 'rooms'),\n                 ('human_bed_density', 'tamviv', 'bedrooms'),\n#                  ('rent_per_person', 'v2a1', 'r4t3'),\n#                  ('rent_per_room', 'v2a1', 'rooms'),\n                 ('mobile_density', 'qmobilephone', 'r4t3'),\n#                  ('tablet_density', 'v18q1', 'r4t3'),\n                 ('mobile_adult_density', 'qmobilephone', 'r4t2'),\n#                  ('tablet_adult_density', 'v18q1', 'r4t2'),\n                 #('', '', ''),\n                ]\n    \n    feats_sub = [('people_not_living', 'tamhog', 'tamviv'),\n                 ('people_weird_stat', 'tamhog', 'r4t3')]\n\n    for f_new, f1, f2 in feats_div:\n        df['fe_' + f_new] = (df[f1] \/ df[f2]).astype(np.float32)       \n    for f_new, f1, f2 in feats_sub:\n        df['fe_' + f_new] = (df[f1] - df[f2]).astype(np.float32)\n    return df\n\ndef mk_agg_feats(df):\n    # aggregation rules over household\n    aggs_num = {'age': ['min', 'max', 'mean'],\n                'escolari': ['min', 'max', 'mean']\n               }\n    aggs_cat = {'dis': ['sum', 'mean']} # mean will give us percentage of disable members\n    for s_ in ['estadocivil', 'parentesco', 'instlevel']:\n        for f_ in [f_ for f_ in df.columns if f_.startswith(s_)]:\n            aggs_cat[f_] = ['mean', 'count'] # mean will give us percentage of the type\n    \n    # aggregate over household\n    for name_, df_ in [('18', df.query('age >= 18'))]:\n        df_agg = df_.groupby('idhogar').agg({**aggs_num, **aggs_cat}).astype(np.float32)\n        df_agg.columns = pd.Index(['agg' + name_ + '_' + e[0] + \"_\" + e[1].upper() for e in df_agg.columns.tolist()])\n        df = df.join(df_agg, how='left', on='idhogar')\n        del df_agg\n    \n    return df\n\ndef drop_redundant(df):\n    # Drop SQB variables, as they are just squres of other vars \n    df.drop([f_ for f_ in df.columns if f_.startswith('SQB') or f_ == 'agesq'], axis=1, inplace=True)\n    # Drop id's\n#     df.drop(['Id', 'idhogar'], axis=1, inplace=True)\n    # Drop repeated columns\n    df.drop(['hhsize', 'area2'], axis=1, inplace=True)\n    return df","9a61d474":"from sklearn.preprocessing import LabelEncoder\n\nyes_no_map = {'no': 0, 'yes': 1}\ndata_all['dependency'] = data_all['dependency'].replace(yes_no_map).astype(np.float32)\ndata_all['edjefe'] = data_all['edjefe'].replace(yes_no_map).astype(np.float32)\ndata_all['edjefa'] = data_all['edjefa'].replace(yes_no_map).astype(np.float32)\n\ndata_all['idhogar'] = LabelEncoder().fit_transform(data_all['idhogar'])\n\ndata_all = mk_derived_feats(data_all)\ndata_all = mk_agg_feats(data_all)\ndata_all = drop_redundant(data_all)","591117e5":"fe_feats = [ff for ff in data_all.columns if ff.startswith('fe_')]\nagg_feats = [ff for ff in data_all.columns if ff.startswith('agg')]","dd439fb6":"basic_feats = ['dependency']\n# basic_feats = ['hogar_nin', 'hogar_adul', 'hogar_mayor', 'dependency', \n#                 'overcrowding', 'rooms', 'bedrooms']","5c34b9a7":"is_head = (data_all.parentesco1 == 1)\nhead_df = data_all.loc[is_head, :]\n# print('Shape of head_df: {}'.format(head_df.shape))\n\nn_head = head_df.shape[0]\nprint('# unique household heads: {}'.format(n_head))","0a502b9c":"head_df.loc[head_df['male'] == 1, 'head_gender'] = 'male'\nhead_df.loc[head_df['female'] == 1, 'head_gender'] = 'female'\nprint('Shape of head_df: {}'.format(head_df.shape))\n\n# one-hot encode head gender\nhead_df = onehot_encode('head_gender', head_df)\n\nhead_gender_feats = [cc for cc in head_df.columns if 'head_gender' in cc]\nhead_gender_feats","832a265a":"# convert binary edu levels to numeric values\nfor i in range(1, 10):\n    head_df.loc[head_df['instlevel{}'.format(i)] == 1, 'head_edu_level'] = i\n    \nhead_df = head_df.rename(columns={'escolari': 'head_school_years'})","7388be83":"# as there are a few households with no head, we need an left outer join \n# to avoid missing those houses\ncols = ['idhogar', 'head_school_years', 'head_edu_level'] + head_gender_feats\ndata_all = pd.merge(data_all, head_df[cols], how='left', on='idhogar')\nprint(data_all.shape)","71b73677":"house_head_feats = ['head_school_years', 'head_edu_level'] + head_gender_feats","a9340e17":"data_all = add_quality(data_all, componente='pared', component='wall')\ndata_all = add_quality(data_all, componente='techo', component='roof')\ndata_all = add_quality(data_all, componente='viv', component='floor')\nprint(data_all.shape)","f7a5b7f2":"# rename material columns\n# wall\ntranslate = {'blolad': 'block',\n             'zocalo': 'socket',\n             'preb': 'cement',\n             'des': 'waste',\n             'mad': 'wood',\n             'zinc': 'zink',\n             'fibras': 'natural_fibers',\n             'other': 'other'}\ndata_all = to_english(data_all, sp_pre='pared', eng_pre='wall_', \n                   translate=translate)\nwall_feats = [cc for cc in data_all.columns if 'wall_' in cc]\n\n# floor\ntranslate = { \n    'moscer': 'mosaic',\n    'cemento': 'cement',\n    'other': 'other',\n    'natur': 'natural',\n    'notiene': 'no_floor',\n    'madera': 'wood'\n}\ndata_all = to_english(data_all, sp_pre='piso', eng_pre='floor_', translate=translate)\nfloor_feats = [cc for cc in data_all.columns if 'floor_' in cc]\n\n# roof\ntranslate = {\n     'zinc': 'zinc',\n     'entrepiso': 'fiber cement',\n     'cane': 'natural fibers',\n     'otro': 'other'\n}\ndata_all = to_english(data_all, sp_pre='techo', eng_pre='roof_', translate=translate)\nroof_feats = [cc for cc in data_all.columns if 'roof_' in cc]\n","adb75031":"material_feats = roof_feats + wall_feats + floor_feats","fd94ac79":"# water\ntranslate = {\n    'guadentro': 'inside_house',\n    'guafuera': 'outside_house',\n    'guano': 'no'\n}\ndata_all = to_english(data_all, sp_pre='abasta', eng_pre='water_provision_', \n                   translate=translate)\nwater_feats = [cc for cc in data_all.columns if 'water_provision_' in cc]\n\n# electricity\ntranslate = {\n    'public': 'public',\n    'planpri': 'private_plan',\n    'noelec': 'no',\n    'coopele': 'cooperate'\n}\ndata_all = to_english(data_all, sp_pre='', eng_pre='electric_', translate=translate)\nelec_feats = [cc for cc in data_all.columns if 'electric_' in cc]\n\n# energy\ntranslate = {\n    'cinar1': 'no',\n    'cinar2': 'electricity',\n    'cinar3': 'gas',\n    'cinar4': 'charcoal'\n}\ndata_all = to_english(data_all, sp_pre='energco', eng_pre='energy_', translate=translate)\nenergy_feats = [cc for cc in data_all.columns if 'energy_' in cc]\n\n# toilet\ntranslate = {\n    '1': 'no',\n    '2': 'sewer',\n    '3': 'septic_tank',\n    '5': 'black hole',\n    '6': 'other'\n}\ndata_all = to_english(data_all, sp_pre='sanitario', eng_pre='toilet_', translate=translate)\ntoilet_feats = [cc for cc in data_all.columns if 'toilet_' in cc]\n\n# rubbish\ntranslate = {\n    '1': 'tanker truck',\n    '2': 'buried',\n    '3': 'burning',\n    '4': 'throw empty place',\n    '5': 'throw to river',\n    '6': 'other'\n}\ndata_all = to_english(data_all, sp_pre='elimbasu', eng_pre='rubbish_', translate=translate)\nrubbish_feats = [cc for cc in data_all.columns if 'rubbish_' in cc]","5422c991":"facility_feats = water_feats + elec_feats + energy_feats + toilet_feats + rubbish_feats","7b1aafb9":"translate = {\n    '1': 'own_fully_paid',\n    '2': 'own_pay_installment',\n    '3': 'rented',\n    '4': 'precarious',\n    '5': 'other'\n}\ndata_all = to_english(data_all, sp_pre='tipovivi', eng_pre='living_type_', \n                      translate=translate)","bdeabab9":"live_feats = [cc for cc in data_all.columns if 'living_type_' in cc]","83201f72":"head_df = data_all.query('parentesco1 == 1')\ntrain = head_df.loc[head_df['Target'].notnull(), :]\ntest = head_df.loc[head_df['Target'].isnull(), :]","c22e03e0":"# features to be used\nfeatures = basic_feats + house_head_feats + material_feats + facility_feats + live_feats + fe_feats + agg_feats\nprint('# features: {}'.format(len(features)))","ef9f28d2":"# use a validation set to check how the trained model perform\nX, y = train[['idhogar', 'Id'] + features], train['Target']\nX_train, X_valid, y_train, y_valid = train_test_split(X[features], y, \n                                                      test_size=0.1, random_state=0)","39c59d5b":"import lightgbm as lgb\n\ngbm = lgb.LGBMClassifier(n_jobs=4, random_state=0, class_weight='balanced')\nparam_grid = {'num_leaves': np.arange(10, 50, 10), \n              'learning_rate': np.arange(0.05, 0.2, 0.05),\n             'n_estimators': np.arange(10, 25, 5)}\nscoring = {'f1_macro': get_scorer('f1_macro')}\nmetric = 'f1_macro'","3d3185b8":"# train and param tuning\ngs = GridSearchCV(gbm,\n                  param_grid=param_grid,\n                  scoring=scoring,\n                  cv=5,\n                  refit=metric,\n                  verbose=True,\n                 n_jobs=4,\n                 )\ngs.fit(X_train, y_train)\n\nbest_estimator = gs.best_estimator_","f6c13a68":"from sklearn.metrics import f1_score","9ca9b716":"# check perf of trained model on validaton set\ny_pred = best_estimator.predict(X_valid)\nmacro_f1 = f1_score(y_valid, y_pred, average='macro')\nprint(macro_f1)","ad82df20":"# predict\nX_test = test[['Id', 'idhogar'] + features]\ny_pred = best_estimator.predict(X_test[features])\npred_for_heads = pd.DataFrame({'Id': X_test['Id'], 'idhogar': X_test['idhogar'], \n                              'Target': y_pred})\npred_for_heads['Target'] = pred_for_heads['Target'].apply(int)","b82f1306":"pred_for_heads['Target'].head()","12b5bc33":"#merge back to include other rows into submission\ntest_all = data_all.loc[data_all['Target'].isnull(), ['Id', 'idhogar']]\nsubmit = pd.merge(test_all, pred_for_heads[['idhogar', 'Target']], how='left')","19f2444a":"submit.head()","60c0341d":"sum(submit['Target'].isnull())","cf80f9f4":"submit.fillna(1, inplace=True)\nsubmit['Target'] = submit['Target'].astype(np.int16)\nsubmit.head()","1d6f7363":"submit[['Id', 'Target']].to_csv('submisssion.csv', index=False)","891eee20":"lgb.plot_importance(best_estimator, figsize=(15, 15), grid=False)","06047c50":"## House material","09355817":"### gender","867dcf5a":"`Target` become float as there are some null values, perhaps due to some households with no head. Let just fill the null values and cast `Target` to int.","227cde0e":"## Check NAs","41ca1129":"Three columns `rez_esc`, `v18q1` and `v2a1` are dominated by NAs. Care should be taken if we want to use them later.","9be2fe52":"## Renting or owning a house","d7488000":"## Feature engineering\nThis part is based on https:\/\/www.kaggle.com\/mlisovyi\/feature-engineering-lighgbm-with-f1-macro, with additional  comments to clarify things.","67dd0572":"### edu level","94093b1e":"# Light gbm\nAs scoring strategy is based only on predictions for household heads, moreover as pointed out in this [discussion](https:\/\/www.kaggle.com\/c\/costa-rican-household-poverty-prediction\/discussion\/61403#360115), only labels by household heads are guaranteed to be correct, we should only use rows of household heads for training and prediction.","d6411d9f":"The important features are:\n* min\/mean\/max school years of adult members\n* dependency rate\n* mobile\/bed\/human densities\n* min\/avg\/max age of adult members\n* kid ratio\n*  working man ratio\n*  floor\/wall\/roof quality\n* ratios of instilevels 3,4,5 (which are complete primary, incomplete secondary and complete secondary)\n* ratios of `estadocivil` 7, 5, 3 (marriage status: single, separated and married)","34f23a42":"## Facility","4fa83c9a":"## Add data of household head","09dadc56":"## Helpers","91aa7ebe":"### merge gender and edu data","c1476114":"# Transforming and merging data"}}