{"cell_type":{"2f6c07ab":"code","483e863b":"code","ae8e9ed9":"code","3f860ed6":"code","9318e31e":"code","c773b1fc":"code","1320d827":"code","a35609e6":"code","5b8bdb89":"code","7a28d8ef":"code","e86edef5":"code","a070027b":"code","a7542057":"code","270c75fa":"code","2a6dd086":"code","51b71f68":"code","d9eca942":"markdown","d8704e31":"markdown","0c890916":"markdown","791d7868":"markdown","ec26d071":"markdown","5390575c":"markdown","b44cfd39":"markdown","dd1f7001":"markdown"},"source":{"2f6c07ab":"import numpy as np \nimport pandas as pd \nimport tensorflow as tf \nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nimport cv2\nimport os, glob, shutil\n","483e863b":"input_dir = '\/kaggle\/input\/fashion-product-images-small\/images'","ae8e9ed9":"glob_dir = input_dir + '\/*.jpg'\n\ntemp  = glob.glob(glob_dir)\n\nprint(len(temp))","3f860ed6":"paths = temp[0:1000] # taking only 1000 images\n\nimages = [cv2.resize(cv2.imread(file), (128, 128)) for file in paths]\n# list of all images\nimages = np.array(images)\/255\n# array of all images and normalization","9318e31e":"images.shape","c773b1fc":"plt.imshow(images[0]) ## to plot images","1320d827":"images.shape","a35609e6":"## Embedding of images\n## Embedding is done to reduce higher dimension into lower dimensions such that there is no significant information loss\n\nmodel = tf.keras.applications.MobileNetV2(include_top = False, weights='imagenet', input_shape=(128, 128, 3))\n# Pre-trained model Mobilenetv2\n# model initialization\n\npredictions = model.predict(images) ## representation of image to reduce size\n# Output of mobile net i.e embedded data\n\n\npred_images = predictions.reshape(images.shape[0], -1) ## reshape to flatten the image","5b8bdb89":"predictions[0].shape","7a28d8ef":"pred_images.shape","e86edef5":"#### Plotting Silhoutte score to find optimal K\nsil = []\nkl = []\nkmax = 10\n\n\n\nfor k in range(2, kmax+1):\n  print(k)\n  kmeans2 = KMeans(n_clusters = k,random_state = 0).fit(pred_images)\n  labels = kmeans2.labels_\n  sil.append(silhouette_score(pred_images, labels))\n  kl.append(k)","a070027b":"plt.plot(kl, sil)\nplt.xlabel('Silhoutte Score')\nplt.ylabel('K')\nplt.show()","a7542057":"k = 8\nkmodel = KMeans(n_clusters=k)\n\nkmodel.fit(pred_images) ### training kmean\n\n\nkpredictions = kmodel.predict(pred_images) ###prediction\n####","270c75fa":"for i in range(k):\n     if(os.path.isdir(\"\/kaggle\/working\/cluster\" + str(i))==True): ##checking whether this directory exists or not\n        shutil.rmtree(\"\/kaggle\/working\/cluster\" + str(i))","2a6dd086":"#### Making output directory\nfor i in range(k):\n    if(os.path.isdir(\"\/kaggle\/working\/cluster\" + str(i))==False):\n        os.makedirs(\"\/kaggle\/working\/cluster\" + str(i))\n    ## for making directory\n    \n    \n    ## Saving images in directory\nfor i in range(len(paths)):\n    shutil.copy2(paths[i], \"\/kaggle\/working\/cluster\"+str(kpredictions[i]))\n####","51b71f68":"#### Plotting image from each cluster\nfig ,axs = plt.subplots(4,k,figsize=(10,10)) ### making subplot \n\nfor i in range(k):\n    xyz = '\/kaggle\/working\/cluster'+str(i) + '\/*.jpg'\n    img = [cv2.imread(abc,0) for abc in glob.glob(xyz)]\n    \n    \n    #print(\"Cluster No \"+str(i))\n    for j in range(min(4, len(img))):\n      axs[j][i].imshow(img[j], cmap = 'gray')\n      axs[j][i].set_xticks([])\n      axs[j][i].set_yticks([])\n      axs[j][i].set_xlabel(\"Class_\"+str(i))\nplt.show()\n####","d9eca942":"# Shubhi Joshi\n#### Class roll no - 48\n#### Sec D\n#### B Tech 3rd year GEU","d8704e31":"# Plotting Silhoutte\nTo find optimal k in k means","0c890916":"# Loading data","791d7868":"# Training K-means\nHere maximum is at k = 3 . But as this is fashion dataset so there can be many different types of clusters like based on gender , top or bottom etc. So, for this dataset k = 3 don't seems to be sufficient so choosing k = 8","ec26d071":"# Getting embedded data","5390575c":"# Saving all clusters","b44cfd39":"# Plotting results","dd1f7001":"# Importing Libraries"}}