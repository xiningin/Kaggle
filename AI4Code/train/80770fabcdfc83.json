{"cell_type":{"4dc7e17b":"code","4831fcc0":"code","f7d46606":"code","870004a8":"code","08e8f60b":"code","0f7962bb":"code","79491dfe":"code","762007bb":"code","d31fdcd2":"code","2a7bc638":"code","b4c5373c":"code","94391fb2":"code","59c4228b":"code","2c9bb61e":"code","b8109f2f":"code","88ec468f":"code","381b32c5":"code","44687a48":"code","3614ee02":"code","e5580b7f":"code","af6afcd9":"code","aa4cbd39":"code","3f76c6c7":"code","65e3435e":"markdown","759bee04":"markdown","a334a226":"markdown"},"source":{"4dc7e17b":"import os\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\n\nplt.rcParams['figure.figsize'] = [8, 8]\nplt.style.use('ggplot')","4831fcc0":"!ls ..\/input\/nytfug","f7d46606":"id2label = {0: 'Galaxy', 1: 'Quasar', 2: 'Star'}\ntrain = pd.read_csv('..\/input\/nytfug\/train.csv')\ntrain['label_str'] = train['label'].map(id2label)\ntest = pd.read_csv('..\/input\/nytfug\/test.csv')\n\ntrain","870004a8":"train.info()","08e8f60b":"test.info()","0f7962bb":"train['label_str'].value_counts()","79491dfe":"train['label_str'].value_counts(normalize=True)","762007bb":"for i in range(3):\n    sns.kdeplot(data=train[train['label'] == i]['alpha'], shade=True, label=id2label[i])\nplt.legend();","d31fdcd2":"for i in range(3):\n    sns.kdeplot(data=train[train['label'] == i]['delta'], shade=True, label=id2label[i])\nplt.legend();","2a7bc638":"sns.jointplot(data=train, x='alpha', y='delta', hue='label_str', s=50, alpha=0.5, height=10, ratio=3);","b4c5373c":"for i in range(3):\n    sns.kdeplot(data=train[train['label'] == i]['u'], shade=True, label=id2label[i])\nplt.legend();","94391fb2":"for i in range(3):\n    sns.kdeplot(data=train[train['label'] == i]['g'], shade=True, label=id2label[i])\nplt.legend();","59c4228b":"for i in range(3):\n    sns.kdeplot(data=train[train['label'] == i]['r'], shade=True, label=id2label[i])\nplt.legend();","2c9bb61e":"for i in range(3):\n    sns.kdeplot(data=train[train['label'] == i]['i'], shade=True, label=id2label[i])\nplt.legend();","b8109f2f":"for i in range(3):\n    sns.kdeplot(data=train[train['label'] == i]['z'], shade=True, label=id2label[i])\nplt.legend();","88ec468f":"# creating interaction\ntrain['alpha_delta'] = train['alpha'] * train['delta']\ntest['alpha_delta'] = test['alpha'] * test['delta']","381b32c5":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn import metrics\nfrom sklearn import preprocessing","44687a48":"features = [\n    'alpha',\n    'delta',\n    # 'alpha_delta', \n    'u',\n    'g',\n    'r',\n    'i',\n    'z'\n]\n\naccs = []\npreds_test = []\n\ndf_sub = test[['id']].copy()\n\nn_splits = 5\nkf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\nfor fold, (tr, val) in enumerate(kf.split(train[features], train['label'])):\n    print('FOLD:', fold)\n    \n    # split\n    X_train = train.loc[tr, features]\n    y_train = train.loc[tr, 'label']\n    X_val = train.loc[val, features]\n    y_val = train.loc[val, 'label']\n    X_test = test[features]\n    \n    # standardize\n    scaler = preprocessing.StandardScaler()\n    X_train = pd.DataFrame(scaler.fit_transform(X_train), columns=X_train.columns)\n    X_val = pd.DataFrame(scaler.transform(X_val), columns=X_val.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), columns=X_test.columns)\n    \n    # fit\n    model = LogisticRegression(\n        n_jobs=-1,\n        random_state=1,\n        max_iter=500\n        # solver='sag',\n        # max_iter=1000\n    )\n    model.fit(X_train, y_train)\n    \n    # predict\n    preds = model.predict(X_val)\n    \n    # predict on test set\n    df_sub[f'fold_{fold}'] = model.predict(X_test)\n    \n    # metrics\n    report = metrics.classification_report(y_val, preds, target_names=[f'{x[1]} ({x[0]})' for x in id2label.items()])\n    acc = metrics.accuracy_score(y_val, preds)\n    print(report)\n    print('Accuracy:', acc)\n    print()\n    accs.append(acc)\n    \nprint('-' * 50)\nprint('Mean:', np.mean(accs))\nprint('Std:', np.std(accs))","3614ee02":"df_sub","e5580b7f":"df_sub.iloc[:, 1:].value_counts()","af6afcd9":"df_sub['label'] = df_sub.iloc[:, 1:].mode(axis=1)\ndf_sub","aa4cbd39":"pd.concat([\n    train['label'].map(id2label).value_counts(normalize=True).rename('train'),\n    df_sub['label'].map(id2label).value_counts(normalize=True).rename('test')\n], axis=1).plot.bar();","3f76c6c7":"df_sub[['id', 'label']].to_csv('submission.csv', index=False)","65e3435e":"## Check submission","759bee04":"## Training","a334a226":"Seems that Stars could be discriminated by the feature `alpha * delta`"}}