{"cell_type":{"67fac137":"code","2efb1db9":"code","7082907e":"code","f8aafb01":"code","5bf1526d":"code","8f190b7b":"code","10ccd45e":"code","448bd934":"code","4644791f":"code","54d6edf2":"code","9df12615":"code","6a38d54d":"code","ee7d7cac":"code","91ce8689":"code","ec6d068a":"code","beffd429":"code","f7f69b31":"code","23202602":"code","61143ca3":"code","3ff55ed5":"code","11f93c2c":"code","648b592b":"code","ebd3d2b3":"code","594c97aa":"code","12f17f22":"code","8094132e":"code","a305481d":"code","61e65292":"code","a7bd484c":"code","aa861a21":"code","20e5afc0":"code","6860eb01":"code","9d775c9b":"code","c8c2496d":"code","04e2483f":"code","049c2eb3":"code","f72ce527":"code","e741b293":"code","f2f0c391":"code","48585c17":"code","b5ce3a0b":"code","2e11f162":"code","3827f590":"code","146ed7dd":"markdown","cea53383":"markdown","d541998a":"markdown","a285f2ab":"markdown","bf278817":"markdown","1d48444a":"markdown","5230815a":"markdown","30af39fc":"markdown","8b1bfad3":"markdown","3237f4d4":"markdown","044f531e":"markdown","d614cfc6":"markdown","e43da9dd":"markdown","96ef16ce":"markdown","4980320a":"markdown","b24f09c3":"markdown","1cc0f139":"markdown","7f17d9d1":"markdown","372e1622":"markdown","e5d301c1":"markdown","1af32d6c":"markdown","3680f187":"markdown","fc5c0016":"markdown","c6f94419":"markdown"},"source":{"67fac137":"import numpy as np\n\n# Pandas is used for data manipulation\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\n#Graphic library plotly\nimport plotly.graph_objects as go\n\nfrom sklearn import tree\nimport graphviz\nimport pydot\nfrom sklearn.metrics import accuracy_score","2efb1db9":"# Read in data, add header row and display first 5 rows\nfeatures = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\nfeatures.head(5)","7082907e":"print('The shape of our features is:', features.shape)","f8aafb01":"features.info()","5bf1526d":"# Descriptive statistics for each column\nfeatures.describe()","8f190b7b":"# Initialize figure with subplots\nfrom plotly.subplots import make_subplots\n\n# Add traces\nfig = make_subplots(rows=5, cols=2, start_cell=\"bottom-left\")\n\n\nfig.add_trace(go.Scatter(y=features['Pregnancies'], mode='markers'),\n              row=1, col=1)\n\nfig.add_trace(go.Scatter(y=features['Glucose'], mode='markers'),\n              row=1, col=2)\n\nfig.add_trace(go.Scatter(y=features['BloodPressure'], mode='markers'),\n              row=2, col=1)\n\nfig.add_trace(go.Scatter(y=features['SkinThickness'], mode='markers'),\n              row=2, col=2)\n\nfig.add_trace(go.Scatter(y=features['Insulin'], mode='markers'),\n              row=3, col=1)\n\nfig.add_trace(go.Scatter(y=features['BMI'], mode='markers'),\n              row=3, col=2)\n\nfig.add_trace(go.Scatter(y=features['DiabetesPedigreeFunction'], mode='markers'),\n              row=4, col=1)\n\nfig.add_trace(go.Scatter(y=features['Age'], mode='markers'),\n              row=4, col=2)\n\nfig.add_trace(go.Scatter(y=features['Outcome'], mode='markers'),\n              row=5, col=1)\n\n# Update yaxis properties\nfig.update_yaxes(title_text=\"Pregnancies\", row=1, col=1)\nfig.update_yaxes(title_text=\"Glucose\", row=1, col=2)\nfig.update_yaxes(title_text=\"BloodPressure\", row=2, col=1)\nfig.update_yaxes(title_text=\"SkinThickness\", row=2, col=2)\nfig.update_yaxes(title_text=\"Insulin\", row=3, col=1)\nfig.update_yaxes(title_text=\"BMI\", row=3, col=2)\nfig.update_yaxes(title_text=\"DiabetesPedigreeFunction\", row=4, col=1)\nfig.update_yaxes(title_text=\"Age\", row=4, col=2)\nfig.update_yaxes(title_text=\"Outcome\", row=5, col=1)\n\n# Update title and height\nfig.update_layout(title_text=\"Basic plots for data verifying and detecting outliers\",\n                  height=1400,\n                  width=1000,\n                 showlegend=False\n                 )\n\nfig.show()","10ccd45e":"features.isna().sum()","448bd934":"(features==0).sum()","4644791f":"cols_with_zero = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']","54d6edf2":"for col in cols_with_zero:            \n    features[col] = features[col].mask(features[col] == 0, features[col].median())","9df12615":"(features==0).sum()","6a38d54d":"# target is the value we want to predict\ntarget = features['Outcome']","ee7d7cac":"# Remove the target from the features\nfeatures= features.drop('Outcome', axis = 1)","91ce8689":"list(features.columns)","ec6d068a":"def detect_outliers_zscore(dataframe, col_name):\n    outliers = []\n    thres = 3\n    mean = np.mean(dataframe[col_name])\n    std = np.std(dataframe[col_name])\n    # print(mean, std)\n    for i in dataframe[col_name]:\n        z_score = (i-mean)\/std\n        if (np.abs(z_score) > thres):\n            outliers.append(i)\n    return outliers","beffd429":"print(detect_outliers_zscore(features, 'Pregnancies'))","f7f69b31":"print(detect_outliers_zscore(features, 'Glucose'))","23202602":"print(detect_outliers_zscore(features, 'BloodPressure'))","61143ca3":"print(detect_outliers_zscore(features, 'SkinThickness'))","3ff55ed5":"print(detect_outliers_zscore(features, 'Insulin'))","11f93c2c":"print(detect_outliers_zscore(features, 'BMI'))","648b592b":"print(detect_outliers_zscore(features, 'DiabetesPedigreeFunction'))","ebd3d2b3":"cols_with_outliers = [\n                        features['Pregnancies'], features['BloodPressure'], features['SkinThickness'],\n                        features['Insulin'], features['BMI'], features['DiabetesPedigreeFunction']\n                     ]","594c97aa":"def replace_outliers(dataframe, col_name):\n    for i in detect_outliers_zscore(dataframe, col_name):\n        dataframe.loc[dataframe[col_name] == i] = dataframe[col_name].median()","12f17f22":"replace_outliers(features, 'Pregnancies')","8094132e":"replace_outliers(features, 'BloodPressure')","a305481d":"replace_outliers(features, 'SkinThickness')","61e65292":"replace_outliers(features, 'Insulin')","a7bd484c":"replace_outliers(features, 'BMI')","aa861a21":"replace_outliers(features, 'DiabetesPedigreeFunction')","20e5afc0":"# Using Skicit-learn to split data into training and testing sets\nfrom sklearn.model_selection import train_test_split\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size = 0.25, random_state = 42)\n\nprint('Training Features Shape:', X_train.shape)\nprint('Training Target Shape:', y_train.shape)\nprint('Testing Features Shape:', X_test.shape)\nprint('Testing Target Shape:', y_test.shape)","6860eb01":"dtc = tree.DecisionTreeClassifier(criterion=\"gini\", random_state=42, max_depth=3, min_samples_leaf=4)\n\ndtc.fit(X_train, y_train)","9d775c9b":"y_predict = dtc.predict(X_test)","c8c2496d":"dtc.score(X_train, y_train)","04e2483f":"dtc.score(X_test, y_test)","049c2eb3":"dtc.feature_importances_","f72ce527":"fig = go.Figure([go.Bar(x=list(features.columns), y=dtc.feature_importances_,\n                        text=dtc.feature_importances_.round(decimals=2),\n                       textposition='outside',\n                       )\n                ])\n\nfig.update_layout(title_text='Least Used Feature', height=600)\n\nfig.show()","e741b293":"max_depths = np.array([1, 2, 3, 5, 7, 9, 11])\n\ntrain_score = []\ntest_score = []\nfor d in max_depths:\n    dtc = tree.DecisionTreeClassifier(max_depth=d)\n    dtc.fit(X_train, y_train)\n    train_score.append(dtc.score(X_train, y_train))\n    test_score.append(dtc.score(X_test, y_test))\n\nfig = go.Figure()\n\n# Add traces\n\nfig.add_trace(go.Scatter(x=max_depths, y=train_score,\n                    mode='lines+markers',\n                    name='train'))\nfig.add_trace(go.Scatter(x=max_depths, y=test_score,\n                    mode='lines+markers',\n                    name='test'))\n\nfig.update_layout(\n    xaxis_title=\"max_depths\",\n    yaxis_title=\"score\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"RebeccaPurple\"\n    )\n)\n\nfig.show()","f2f0c391":"min_samples = np.array([2, 4, 8, 16, 32])\n\ntrain_score = []\ntest_score = []\nfor s in min_samples:\n    dtc = tree.DecisionTreeClassifier(min_samples_leaf=s)\n    dtc.fit(X_train, y_train)\n    train_score.append(dtc.score(X_train, y_train))\n    test_score.append(dtc.score(X_test, y_test))\n\nfig = go.Figure()\n\n# Add traces\n\nfig.add_trace(go.Scatter(x=min_samples, y=train_score,\n                    mode='lines+markers',\n                    name='train'))\nfig.add_trace(go.Scatter(x=min_samples, y=test_score,\n                    mode='lines+markers',\n                    name='test'))\n\nfig.update_layout(\n    xaxis_title=\"min_samples\",\n    yaxis_title=\"score\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"RebeccaPurple\"\n    )\n)\n\nfig.show()","48585c17":"max_leaf_nodes = np.array([2, 4, 8, 16, 32])\n\ntrain_score = []\ntest_score = []\nfor n in max_leaf_nodes:\n    dtc = tree.DecisionTreeClassifier(max_leaf_nodes=s)\n    dtc.fit(X_train, y_train)\n    train_score.append(dtc.score(X_train, y_train))\n    test_score.append(dtc.score(X_test, y_test))\n\nfig = go.Figure()\n\n# Add traces\n\nfig.add_trace(go.Scatter(x=min_samples, y=train_score,\n                    mode='lines+markers',\n                    name='train'))\nfig.add_trace(go.Scatter(x=min_samples, y=test_score,\n                    mode='lines+markers',\n                    name='test'))\n\nfig.update_layout(\n    xaxis_title=\"max_leaf_nodes\",\n    yaxis_title=\"score\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"RebeccaPurple\"\n    )\n)\n\nfig.show()","b5ce3a0b":"min_samples_split = np.array([2, 4, 8, 16, 32])\n\ntrain_score = []\ntest_score = []\nfor s in min_samples_split:\n    dtc = tree.DecisionTreeClassifier(min_samples_split=s)\n    dtc.fit(X_train, y_train)\n    train_score.append(dtc.score(X_train, y_train))\n    test_score.append(dtc.score(X_test, y_test))\n\nfig = go.Figure()\n\n# Add traces\n\nfig.add_trace(go.Scatter(x=min_samples, y=train_score,\n                    mode='lines+markers',\n                    name='train'))\nfig.add_trace(go.Scatter(x=min_samples, y=test_score,\n                    mode='lines+markers',\n                    name='test'))\n\nfig.update_layout(\n    xaxis_title=\"min_samples_split\",\n    yaxis_title=\"score\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"RebeccaPurple\"\n    )\n)\n\nfig.show()","2e11f162":"tree.export_graphviz(dtc, out_file = 'small_tree.dot',\n                     feature_names = list(features.columns),\n                     rounded = True, precision = 1)\n\n(graph, ) = pydot.graph_from_dot_file('small_tree.dot')\n\ngraph.write_png('small_tree.png');","3827f590":"#Import library\nfrom IPython.display import Image\n\n# Load image from local storage\nImage(filename = \"small_tree.png\", width = 1400, height = 600)","146ed7dd":"<h4><B>We make basic plots using plotly visualization library<\/B><\/h4>","cea53383":"<h3>Visualizing Decision Trees<\/h3>","d541998a":"<h4>Detecting outliers using the Z-scores<\/h4>","a285f2ab":"<h4>Building the tree for different values of min_samples_split<\/h4>","bf278817":"<h4>Features and Targets<\/h4>","1d48444a":"<h4>Building the tree for different values of max_leaf_nodes<\/h4>","5230815a":"<h3>Model exploration<\/h3>","30af39fc":"<h3>Getting rid of outliers<\/h3>","8b1bfad3":"<h3>Rating the importance of features<\/h3>","3237f4d4":"<p>We see that some parameters in our dataset have zero values.\nIt is unlikely that glucose, blood pressure, SkinThickness, insulin, BMI might have zero values<\/p>","044f531e":"<h4>The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset.<\/h4>","d614cfc6":"<h4>Training and Testing Sets<\/h4>","e43da9dd":"<h2>Pima Indians Diabetes Database<\/h2>\n<h4>The datasets consist of several medical predictor (independent) variables and one target (dependent) variable, Outcome. Independent variables include the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.<\/h4>","96ef16ce":"<h4>Building the tree for different values of min_samples:<\/h4>","4980320a":"<p>Let's replace the zero values<\/p>","b24f09c3":"<h4><B>The parameters included are:<\/B><\/h4>\n<p><I>Pregnancies - Number of times pregnant<\/I><\/p>\n<p><I>Glucose - Plasma glucose concentration a 2 hours in an oral glucose tolerance test<\/I><\/p>\n<p><I>BloodPressure - Diastolic blood pressure (mm Hg)<\/I><\/p>\n<p><I>SkinThickness - Triceps skin fold thickness (mm)<\/I><\/p>\n<p><I>Insulin - 2-Hour serum insulin (mu U\/ml)<\/I><\/p>\n<p><I>BMI - Body mass index (weight in kg\/(height in m)^2)<\/I><\/p>\n<p><I>DiabetesPedigreeFunction - Diabetes pedigree function<\/I><\/p>\n<p><I>Age<\/I><\/p>\n<p><I>Outcome - 1 (positive result) or 0 (negative result)<\/I><\/p>\n<h4>Task: Use Decision Trees to Make a Medical Diagnosis, outcome prediction<\/h4>","1cc0f139":"<p>We get 0,77 precision for training set and 0,71 precision for testing set<\/p>","7f17d9d1":"<h4><B>To identify anomalies, we can quickly compute summary statistics.<\/B><\/h4>","372e1622":"<h4><I><B>The following Python code loads in the csv data and displays the structure of the data:<\/B><\/I><\/h4>","e5d301c1":"<h3><B>Train Model<\/B><\/h3>","1af32d6c":"<p>Check again dataset on the presence of zero values<\/p>","3680f187":"<p>We will use Z-score to detect outliers<\/p>\n<p>Criteria: any data point whose Z-score falls out of 3rd standard deviation is an outlier.<\/p>","fc5c0016":"<h2>Identify Anomalies \/ Missing Data<\/h2>","c6f94419":"<h4>Building the tree for different values of max_depth:<\/h4>"}}