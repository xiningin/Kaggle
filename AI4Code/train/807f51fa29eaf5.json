{"cell_type":{"b61ae0ba":"code","e1bfc0c3":"code","b456f8d0":"code","1fee63be":"code","393200a5":"code","9819b058":"code","e9c45b63":"code","975be2db":"code","32db225e":"code","edcdd244":"code","b54677de":"code","07687854":"markdown","434d55cd":"markdown","697c3ea4":"markdown","d4717e81":"markdown","bdbd1343":"markdown","ba9dec7d":"markdown","f9ac9f2b":"markdown","46c7a66a":"markdown","6416bf1b":"markdown","811553f3":"markdown"},"source":{"b61ae0ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport itertools\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\ninputData = pd.read_csv('..\/input\/eye movement.csv', delimiter=',')\nprint(inputData.dtypes)\nprint(inputData.columns)\nprint(\"Data shape:\",inputData.shape)\nprint(inputData.head())\nprint(inputData.describe())\nprint(inputData.info())","e1bfc0c3":"print(inputData.isnull().sum())","b456f8d0":"plt.figure( figsize=(10,10))\ninputData['eyeDetection{0,1}'].value_counts().plot.pie(autopct=\"%1.1f%%\")\nplt.title(\"Data division on eye movement\",fontsize=10)\nplt.show()","1fee63be":"fig = plt.figure(figsize=(20, 15))\nax = fig.gca()\ninputData.plot(ax=ax,kind='density',subplots=True,sharex=False)\nplt.show()","393200a5":"fig = plt.figure(figsize = (10,10))\nax = fig.gca()\nsns.heatmap(inputData.corr(), annot=True, fmt=\".2f\")\nplt.title(\"Correlation\",fontsize=5)\nplt.show()","9819b058":"eyes0 = inputData.loc[inputData[\"eyeDetection{0,1}\"]==0].sample(frac=0.01)\neyes1 = inputData.loc[inputData[\"eyeDetection{0,1}\"]==1].sample(frac = 0.01)\nv = pd.concat([eyes0,eyes1])\n\n\nsns.pairplot(data=v,hue=\"eyeDetection{0,1}\")\nplt.title(\"Skewness\",fontsize =10)\nplt.show()","e9c45b63":"from sklearn.model_selection import train_test_split\nX = inputData.iloc[:,0:2].copy()\ny = inputData[\"eyeDetection{0,1}\"].copy()\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)","975be2db":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","32db225e":"# Grid search to find best paramaters\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold\n\nparam_grid = [\n  {'C': [1, 10, 100, 1000], 'kernel': ['linear']},\n  {'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001], 'kernel': ['rbf']}, # Ran too slowly with these\n  #{'kernel':['linear']},\n  #{'kernel':['rbf'], 'gamma':[0.001, 0.0001]}\n]\n\nestimator = SVC()\nclf = GridSearchCV(estimator=estimator, param_grid=param_grid, n_jobs=-1)\ncross_val_score(clf, X_train, y_train)","edcdd244":"# Testing\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)","b54677de":"#Import scikit-learn metrics module for accuracy calculation\nfrom sklearn import metrics\n\n# Model Accuracy: how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","07687854":"**Data Divsion of eye movement**","434d55cd":"<a id='eda'><\/a>\n# Exploratory Data Analysis\n","697c3ea4":"**Correlation**","d4717e81":"# **Predicting eye movement from EEG Data**\n<a href=\"#eda\"> EDA <\/a>\n\n<a id='data_splits'> Splitting Data into Test\/Train<\/a>\n\n<a href=\"#svm_predicts\">Support vector Machine based Predictions<\/a>\n\n<a href=\"#perf\">Performance Metrics<\/a>\n","bdbd1343":"**Density plots**","ba9dec7d":"**Pair plots**","f9ac9f2b":"<a id='data_splits'><\/a>\n# Data Splits for testing and training","46c7a66a":"**Lets check for NULL entries**","6416bf1b":"<a id='perf'><\/a>\n# Performance Metrics","811553f3":"<a id='svm_predicts'><\/a>\n# SVM Kernel Based Prediction"}}