{"cell_type":{"f7cbd7e4":"code","67f70b51":"code","a6368f1c":"code","fb09f143":"code","b745aad5":"code","e96305c6":"code","a8728fb2":"code","02258802":"markdown","d2554cd3":"markdown","0c37a4c1":"markdown","9ead1ef9":"markdown","a2e9c1ad":"markdown","8f56d3dd":"markdown","d4c7e55a":"markdown","1af216fd":"markdown"},"source":{"f7cbd7e4":"import numpy as np \nimport pandas as pd \nfrom scipy.stats import skewnorm\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","67f70b51":"def score_function(predict, actual):\n    \n    # predict = pd.read_csv(predict_label, engine='python') # \uc608\uce21 \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\n    # actual = pd.read_csv(actual_label,engine='python') # \uc2e4\uc81c \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\n\n\n    predict.acc_id = predict.acc_id.astype('int')\n    predict = predict.sort_values(by =['acc_id'], axis = 0) # \uc608\uce21 \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c \n    predict = predict.reset_index(drop = True)\n    actual.acc_id = actual.acc_id.astype('int')\n    actual = actual.sort_values(by =['acc_id'], axis = 0) # \uc2e4\uc81c \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c\n    actual =actual.reset_index(drop=True)\n    \n    if predict.acc_id.equals(actual.acc_id) == False:\n        print('acc_id of predicted and actual label does not match')\n        sys.exit() # \uc608\uce21 \ub2f5\uc548\uc758 acc_id\uc640 \uc2e4\uc81c \ub2f5\uc548\uc758 acc_id\uac00 \ub2e4\ub978 \uacbd\uc6b0 \uc5d0\ub7ec\ucc98\ub9ac \n    else:\n            \n        S, alpha, L, sigma = 30, 0.01, 0.1, 15  \n        cost, gamma, add_rev = 0,0,0 \n        profit_result = []\n        survival_time_pred = list(predict.survival_time)\n        amount_spent_pred = list(predict.amount_spent)\n        survival_time_actual = list(actual.survival_time)\n        amount_spent_actual = list(actual.amount_spent)    \n        for i in range(len(survival_time_pred)):\n            if survival_time_pred[i] == 64 :                 \n                cost = 0\n                optimal_cost = 0\n            else:\n                cost = alpha * S * amount_spent_pred[i]                    #\ube44\uc6a9 \uacc4\uc0b0\n                optimal_cost = alpha * S * amount_spent_actual[i]          #\uc801\uc815\ube44\uc6a9 \uacc4\uc0b0 \n            \n            if optimal_cost == 0:\n                gamma = 0\n            elif cost \/ optimal_cost < L:\n                gamma = 0\n            elif cost \/ optimal_cost >= 1:\n                gamma = 1\n            else:\n                gamma = (cost)\/((1-L)*optimal_cost) - L\/(1-L)              #\ubc18\uc751\ub960 \uacc4\uc0b0\n            \n            if survival_time_pred[i] == 64 or survival_time_actual[i] == 64:\n                T_k = 0\n            else:\n                T_k = S * np.exp(-((survival_time_pred[i] - survival_time_actual[i])**2)\/(2*(sigma)**2))    #\ucd94\uac00 \uc0dd\uc874\uae30\uac04 \uacc4\uc0b0\n                \n            add_rev = T_k * amount_spent_actual[i]                         #\uc794\uc874\uac00\uce58 \uacc4\uc0b0\n    \n           \n            profit = gamma * add_rev - cost                                #\uc720\uc800\ubcc4 \uae30\ub300\uc774\uc775 \uacc4\uc0b0\n            profit_result.append(profit)\n            \n        score = sum(profit_result)                                         #\uae30\ub300\uc774\uc775 \ucd1d\ud569 \uacc4\uc0b0\n        print(score)\n    return score","a6368f1c":"label = pd.read_csv('\/kaggle\/input\/train_label.csv')\nprint('label shape: ', label.shape)","fb09f143":"numValues = label.shape[0]\namount_maxValue = label.amount_spent.max()\nsurvival_maxValue = label.survival_time.max()\nskewness = 100   #Negative values are left skewed, positive values are right skewed.\n\namount_pred = skewnorm.rvs(a = skewness,loc=0, size=numValues)\nsurvival_pred = skewnorm.rvs(a = -skewness,loc=survival_maxValue, size=numValues)\nsurvival_pred = np.ceil(survival_pred)","b745aad5":"f, ax = plt.subplots(2,2, figsize=(10,10))\n\nsns.kdeplot(label.amount_spent, label='amount spent', ax=ax[0,0])\nax[0,0].set_title('True Amount Spent')\nsns.kdeplot(amount_pred, label='amount spent', ax=ax[0,1])\nax[0,1].set_title('Pred Amount Spent')\nsns.kdeplot(label.survival_time, label='Survival Time', ax=ax[1,0])\nax[1,0].set_title('True Survival Time')\nsns.kdeplot(survival_pred, label='Survival Time', ax=ax[1,1])\nax[1,1].set_title('Pred Survival Time')\nplt.show()","e96305c6":"pred_df = label.copy()\npred_df['survival_time'] = survival_pred\npred_df['amount_spent'] = amount_pred","a8728fb2":"train_score = score_function(label, label)","02258802":"\ub79c\ub364\ud558\uac8c \uc0dd\uc131\ud55c \ub808\uc774\ube14\uc744 \ub123\uc5c8\uc744\ub54c Score\ub294 -1258.25\uc774\ub2e4.","d2554cd3":"# create skewed data\n- \ud55c\ucabd\uc73c\ub85c \ubd84\ud3ec\uac00 \uc3e0\ub9b0 \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574 scipy.stats\uc758 skewnorm\uc744 \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4.","0c37a4c1":"# Score Function Example ","9ead1ef9":"temp_score = score_function(pred_df, label)","a2e9c1ad":"# Load Data","8f56d3dd":"Train label \uac04 Score\uc758 Maximum Profit\uc740 91693.76 \uc774\ub2e4.","d4c7e55a":"# Score function","1af216fd":"# Score Function"}}