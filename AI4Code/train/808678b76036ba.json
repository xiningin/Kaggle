{"cell_type":{"3b564912":"code","8e4d951f":"code","58f0b05c":"code","20cba8ea":"code","86153e70":"code","e7772fa9":"code","d2d00062":"code","eea44b3a":"code","c471d161":"code","f6833eaa":"code","ad609a0b":"code","2904e7de":"code","53fa08f8":"code","69072754":"code","5339a389":"code","6bcd1104":"code","01afedbc":"code","dcad70d9":"code","c29ea80b":"code","37c67775":"code","f70615c2":"code","f0ae84c3":"code","67f5e195":"code","95fe8881":"code","9af2afab":"code","f93d689d":"code","c30d2f12":"code","40ef3f5b":"code","3d97e9d1":"code","51006e68":"code","9b3c7378":"code","299016df":"code","444d0efc":"markdown","7fcdfb92":"markdown","5ba8c701":"markdown","a8a554be":"markdown","3298ee7a":"markdown","011041b2":"markdown","cd3faf0d":"markdown","6853c452":"markdown","8120a2fc":"markdown","c3effbd8":"markdown","a0113eaa":"markdown","29fc36d0":"markdown","f25ec148":"markdown","d6c42c79":"markdown"},"source":{"3b564912":"import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nimport keras","8e4d951f":"train = pd.read_csv('..\/input\/preprocesseddata\/preprocessedData.csv')\ntest = pd.read_csv('..\/input\/testfinaldata\/testdata.csv')\ntrain.head()","58f0b05c":"features = ['Team','Opposition','TeamA Rating','TeamB Rating','Match Country','TeamA Home','TeamB Home','Ground']","20cba8ea":"X = train[features]\ny = train.winbool\nX.tail()","86153e70":"X1 = X.append(test,ignore_index=True)\nX2 = X1[1042:]\nX2.head()","e7772fa9":"trainBkp = X\ntestBkp = X2","d2d00062":"number = LabelEncoder()\nX1['Ground'] = number.fit_transform(X1['Ground'].astype('str'))\nX1['Team'] = number.fit_transform(X1['Team'].astype('str'))\nX1['Opposition'] = number.fit_transform(X1['Opposition'].astype('str'))\nX1['Match Country'] = number.fit_transform(X1['Match Country'].astype('str'))","eea44b3a":"X1.head()","c471d161":"X = X1[:1042]\ntest = X1[1042:]\nX.tail()","f6833eaa":"test.head()","ad609a0b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)\n#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=12)","2904e7de":"y.shape[0]\n","53fa08f8":"num_categories = 2\ny_train = keras.utils.to_categorical(y_train, num_categories)\ny_test= keras.utils.to_categorical(y_test, num_categories)\ny_train","69072754":"# Model Building\nmodel = keras.models.Sequential()\nmodel.add(keras.layers.Dense(50, activation=\"relu\", input_dim = 8))\nmodel.add(keras.layers.Dropout(0.1))\nmodel.add(keras.layers.Dense(80, activation=\"relu\"))\nmodel.add(keras.layers.Dropout(0.1))\nmodel.add(keras.layers.Dense(100, activation=\"relu\"))\nmodel.add(keras.layers.Dropout(0.1))\nmodel.add(keras.layers.Dense(2, activation=\"softmax\"))","5339a389":"# Compiling the model - adaDelta - Adaptive learning\nmodel.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adadelta(), metrics=['accuracy'])","6bcd1104":"batch_size = 50\nnum_epoch = 5000\nmodel_log = model.fit(X_train, y_train, batch_size = batch_size, epochs=num_epoch, verbose=1, validation_data=(X_test, y_test))","01afedbc":"train_score = model.evaluate(X_train, y_train, verbose=0)\ntest_score = model.evaluate(X_test, y_test, verbose=0)\nprint('Train accuracy:', train_score[1])\nprint('Test accuracy:', test_score[1])","dcad70d9":"model.summary()","c29ea80b":"prediction = model.predict_classes(test)\ntestBkp[\"Result\"] = prediction\ntestBkp.head()","37c67775":"def winner(x):\n    if x.Result == 1:\n        x[\"Winning_Team\"] = x.Team\n    else:\n        x[\"Winning_Team\"] = x.Opposition\n    return x\n\ndata_2019_final = testBkp.apply(winner, axis= 1)\nresults_2019 = data_2019_final.groupby(\"Winning_Team\").size()\nresults_2019 = results_2019.sort_values(ascending=False)\nprint(results_2019)","f70615c2":"p = []\np.append(results_2019.keys()[0])\np.append(results_2019.keys()[1])\np.append(results_2019.keys()[2])\np.append(results_2019.keys()[3])\np[0]","f0ae84c3":"df = pd.DataFrame(columns=['Team','Opposition','TeamA Rating','TeamB Rating','Match Country','TeamA Home','TeamB Home','Ground'])","67f5e195":"# train[train['Team']=='Sri Lanka']\n# X1[134:]","95fe8881":"df.loc[-1] = [p[0],p[3],p[0],p[3],'England',p[0],p[3],'Manchester']\ndf.loc[0] = [p[3],p[0],p[3],p[0],'England',p[3],p[0],'Manchester']\ndf.loc[1] = [p[1],p[2],p[1],p[2],'England',p[1],p[2],'Birmingham']\ndf.loc[2] = [p[2],p[1],p[2],p[1],'England',p[2],p[1],'Birmingham']\n# adding a row\ndf.index = df.index + 1  # shifting index\ndf = df.sort_index() \ncleanup = {\"TeamA Home\":{\"England\":1, \"India\":0, \"South Africa\":0, \"New Zealand\":0, \"Australia\":0, \"Pakistan\":0,\"Sri Lanka\":0, \"Bangladesh\":0},\n           \"TeamB Home\":{\"England\":1, \"India\":0, \"South Africa\":0, \"New Zealand\":0, \"Australia\":0, \"Pakistan\":0,\"Sri Lanka\":0, \"Bangladesh\":0},\n           \"TeamA Rating\":{\"England\":1, \"India\":2, \"South Africa\":3, \"New Zealand\":4, \"Australia\":5, \"Pakistan\":6,\"Sri Lanka\":9,\"Bangladesh\":7},\n           \"TeamB Rating\":{\"England\":1, \"India\":2, \"South Africa\":3, \"New Zealand\":4, \"Australia\":5, \"Pakistan\":6,\"Sri Lanka\":9,\"Bangladesh\":7},\n}\ndf = df.replace(cleanup)\ndf","9af2afab":"cleanup = {\"Team\":{\"Australia\":1,\"New Zealand\":11, \"Pakistan\":13, \"England\":4, \"South Africa\": 15, \"India\": 6,\"Sri Lanka\":16,\"Bangladesh\":2},\n            \"Opposition\": {\"Australia\":1,\"New Zealand\":11, \"Pakistan\":13, \"England\":4, \"South Africa\": 15, \"India\": 6,\"Sri Lanka\":16,\"Bangladesh\":2},\n            \"Match Country\":{\"England\":3 },\n            \"Ground\":{\"Manchester\": 68,\"Birmingham\":11},\n         }\n\ndf1 = df.replace(cleanup)\ndf1.head()","f93d689d":"predictionsemi = model.predict_classes(df1)\ndf['Result'] = -1\ndf[\"Result\"] = predictionsemi\ndf\n#df[\"Result\"].head()","c30d2f12":"finalists = []\nif df['Result'][0] == 1:\n    finalists.append(df['Team'][0])\nelse:\n    finalists.append(df['Opposition'][0])\nif df['Result'][2] == 1:\n    finalists.append(df['Team'][2])\nelse:\n    finalists.append(df['Opposition'][2])\n    ","40ef3f5b":"finalists","3d97e9d1":"df = pd.DataFrame(columns=['Team','Opposition','TeamA Rating','TeamB Rating','Match Country','TeamA Home','TeamB Home','Ground'])\ndf   ","51006e68":"df.loc[-1] = [finalists[0],finalists[1],finalists[0],finalists[1],'England',finalists[0],finalists[1],'Lord\\'s']\ndf.loc[0] = [finalists[1],finalists[0],finalists[1],finalists[0],'England',finalists[1],finalists[0],'Lord\\'s']\n# adding a row\ndf.index = df.index + 1  # shifting index\ndf = df.sort_index()\ncleanup = {\"TeamA Home\":{\"England\":1, \"India\":0, \"South Africa\":0, \"New Zealand\":0, \"Australia\":0, \"Pakistan\":0,\"Sri Lanka\":0, \"Bangladesh\":0},\n           \"TeamB Home\":{\"England\":1, \"India\":0, \"South Africa\":0, \"New Zealand\":0, \"Australia\":0, \"Pakistan\":0,\"Sri Lanka\":0, \"Bangladesh\":0},\n           \"TeamA Rating\": {\"England\":1, \"India\":2, \"South Africa\":3, \"New Zealand\":4, \"Australia\":5, \"Pakistan\":6,\"Sri Lanka\":9, \"Bangladesh\":7},\n           \"TeamB Rating\":{\"England\":1, \"India\":2, \"South Africa\":3, \"New Zealand\":4, \"Australia\":5, \"Pakistan\":6,\"Sri Lanka\":9, \"Bangladesh\":7},\n\n}\ndf = df.replace(cleanup)\ndf","9b3c7378":"cleanup = {\"Team\":{\"Australia\":1,\"New Zealand\":11, \"Pakistan\":13, \"England\":4, \"South Africa\": 15, \"India\": 6,\"Sri Lanka\":16,\"Bangladesh\":2},\n            \"Opposition\": {\"Australia\":1,\"New Zealand\":11, \"Pakistan\":13, \"England\":4, \"South Africa\": 15, \"India\": 6,\"Sri Lanka\":16,\"Bangladesh\":2},\n            \"Match Country\":{\"England\":3 },\n            \"Ground\":{\"Lord\\'s\": 67},\n        }\ndf1 = df.replace(cleanup)\ndf1.head()","299016df":"predictionsemi = model.predict_classes(df1)\ndf['Result'] = -1\ndf[\"Result\"] = predictionsemi\ndf","444d0efc":"Encode all the categorical data to integer values","7fcdfb92":"Now that the model is ready, we run the model on Test data.","5ba8c701":"Take out actual train data from 'X' dataframe and keep the rest of data for cross-validation","a8a554be":"Combine both train and test data, so as to encode all the categorical data to integer data.\n\n* X : train data\n* X1: combined data\n* X2: test data","3298ee7a":"Check the accuracy on the validation data.","011041b2":"Import all the required libraries","cd3faf0d":"Extract specific columns you wish to use as featues to train your model","6853c452":"Create a backup of original train and test data, before encoding it.","8120a2fc":"Build the model","c3effbd8":"Print the score of each team in the group matches","a0113eaa":"We have got the top 4 teams in the group stages. These 4 teams will proceed to the semi-finals.\n\nThe semi-finals are played according to the following rule.\n\n* First - Fourth\n* Second - Third","29fc36d0":"Apply encoding to select categorical columns of combined dataframe, to convert them to numerical values to be fed into the model.","f25ec148":"Separate out encoded train and test data.","d6c42c79":"And the finalists are: "}}