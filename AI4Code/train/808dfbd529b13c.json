{"cell_type":{"bf3fb80d":"code","05a5955d":"code","f75cec0a":"code","0e4f0d45":"code","0ea848b7":"code","4c90d427":"code","861e2665":"code","e241ca81":"code","58d3dd74":"code","99ed8cb4":"code","5103b3c1":"code","5139eb21":"code","2564f2a3":"code","87589758":"code","2458263c":"code","a51e953d":"code","93405b73":"code","e09b7bd3":"code","7b251b7b":"code","7b3b2cad":"code","284895d4":"code","e8490ed5":"code","fdde733a":"code","a4afc201":"code","372c9649":"code","ad4608f8":"markdown","c9033484":"markdown","fa13ed9c":"markdown"},"source":{"bf3fb80d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sb\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","05a5955d":"# We can try to guess the physical object types be studying their properties.\n# This information will be useful, in case we want to fit the light curves with some of the proposed algorithms (see 'The PLAsTiCC Astronomy Classification Demo' by michaelapers)\n# Fine tuning these algorithms will potentially speed up and improve the machine learning predictions, because the training data set is not representative of test data set.","f75cec0a":"# Loading the data\ntrain = pd.read_csv('..\/input\/training_set.csv')\ntrain.name = 'Training Set'\ntrain_meta = pd.read_csv('..\/input\/training_set_metadata.csv')\ntrain_meta.name = 'Training Metadata Set'","0e4f0d45":"train_comp = pd.merge(train_meta, train, on='object_id')","0ea848b7":"order = [53, 64, 6, 95, 52, 67, 92, 88, 62, 15, 16, 65, 42, 90]\nlegend_class = train_meta['target'].value_counts().to_frame().sort_values(['target'])\nlegend_class.index.name = 'Class'\nlegend_class.columns = ['Number count']\n# 14 out of 15 object classes are populated.\n# The distribution of objects is certainly irregular.\nsb.set(rc={'figure.figsize':(15,10)})\nsb.barplot(x=train_meta['target'].value_counts().index.ravel(), y=train_meta['target'].value_counts().ravel(), label=legend_class, order=order)\nplt.legend(loc='upper left')","4c90d427":"# Let us have a look at the redshift statistics.\n# We want to know the minimum, median and maximum redshifts for each of the classes.\n\norder = [6, 16, 53, 65, 92, 64, 67, 62, 52, 15, 90, 42, 95, 88] # order originates from the maximum redshift measured\nsb.set_color_codes(\"pastel\")\nmax_z = train_meta.groupby('target')['hostgal_specz'].max().sort_values()\nsb.barplot(x=max_z.index,\n           y=max_z.values,  label=\"Max\", color='b', order=order)\nmed_z = train_meta.groupby('target')['hostgal_specz'].median().sort_values()\nsb.barplot(x=med_z.index,\n           y=med_z.values, label=\"Mean\", color='r', order=order)\nmin_z = train_meta.groupby('target')['hostgal_specz'].min().sort_values()\nsb.set_color_codes(\"muted\")\nsb.barplot(x=min_z.index, \n           y=min_z.values, label=\"Min\", color='y', order=order)\nplt.legend(loc='upper left')\nplt.ylabel('hostgal_specz')\nplt.axis([-0.5,13.5,0,1.5])\n\n# We learn that\n# 6, 16, 53, 65, 92 have to be innergalactic objects: stars or star-like objects\n# 64, 67, 62, 52, 15, 90, 42, 95, 88 are extragalactic objects (Active Galactic Nuclei, Supernovae, etc.)\n# furthermore, we can identify at least two subcategories:\n# 95 and 88 seem to be very distant objects (scale factor of the Universe ~ 1 \/ (1 + z) , for z <= 1000), these objects must be bright and present at earlier times of the Universe\n# the other objects have a median redshift of 0.2","861e2665":"# Now we go through each of the classes (a very traditional approach ... )\n# Physically correct reasoning will follow...\n#comment: the sb.scatterplot(hue=...) does not seem to work properly. any ideas?\n\nfrom random import randint\n\ndef plt_cls(df, cls, obj=None, hue=False, ln_plt=False):\n    plt.figure(figsize=(15,5))\n    obj_class = df[(df['target']==cls)]\n    unique_ids = obj_class['object_id'].unique()\n    if obj == None:\n        obj = unique_ids[randint(0,len(unique_ids)-1)]\n    label = 'class: ' + str(cls) + ', obj_id: '  + str(obj) + ', z: ' + str(list(df[df['object_id']==obj]['hostgal_photoz'])[0])\n    print(label)\n    mjd = obj_class[obj_class['object_id']==obj]['mjd']\n    flx = obj_class[obj_class['object_id']==obj]['flux']\n    if ln_plt == False:\n        if hue == False:\n            sb.scatterplot(mjd, flx, label=label)\n        else:\n            sb.scatterplot(mjd, flx, hue=df['passband'])\n    else:\n        sb.lineplot(mjd, flx, hue=df['passband'])\n    plt.legend(loc='upper left')\n    plt.plot()","e241ca81":"# random behavior\n# guess: variable star\nplt_cls(train_comp, 16, hue=True)","58d3dd74":"# periodicity of about 100 days\n# achromatic flux change\n# guess: pulsating star\nplt_cls(train_comp, 53, hue=True)","99ed8cb4":"# single event\n# short timescale of few days\n# chromatic flux change\n# guess: microlensing event\nplt_cls(train_comp, 6)","5103b3c1":"# single event\n# random behavior\n# guess: variable star\/eruptive\nplt_cls(train_comp, 65, hue=True)","5139eb21":"# random behavior & huge fluctuations\n# guess:  variable star\nplt_cls(train_comp, 92, hue=True)","2564f2a3":"# single event\n# achromatic\n# long timescale\n# guess: supernova 1a\nplt_cls(train_comp, 95, hue=True)","87589758":"# high redshift\n# variability\n# long timescale\n# guess: AGN\nplt_cls(train_comp, 88, hue=True)","2458263c":"# single event\n# short timescale\n# guess: merging event\nplt_cls(train_comp, 64, hue=True)","a51e953d":"# single event\n# symmetric\n# short timescale\n# guess: merging event\nplt_cls(train_comp, 67, hue=True)","93405b73":"# single event\n# long timescale\n# guess: supernova type 1\nplt_cls(train_comp, 62, hue=True)","e09b7bd3":"# single event\n# asymmetric\n# guess: supernova type 2\nplt_cls(train_comp, 52, hue=True)","7b251b7b":"# single event\n# asymmetric\n# guess: supernova type 2\nplt_cls(train_comp, 15, hue=True)","7b3b2cad":"# single event\n# guess: supernova type 1\nplt_cls(train_comp, 90, hue=True)","284895d4":"# single event\n# short timescale\n# guess: supernova type 1\nplt_cls(train_comp, 42, hue=True)","e8490ed5":"import pandas as pd\n# One quick addition:\n#test = pd.read_csv('..\/input\/test_set.csv', low_memory=True, chunk)","fdde733a":"test_meta = pd.read_csv('..\/input\/test_set_metadata.csv', low_memory=True)","a4afc201":"# From the redshift distribution of the training and test set follows, that\n# zero redshift, with redshift between 0.05 and 0.3 and around 2.5 are overrepresented in the training set\n# objects with redshift between 0.3 and 1.0 are underrepresented as well -> data augmentation can be useful to avoid misclassification\n\nplt.figure(figsize=(20,5))\nsb.distplot(test_meta['hostgal_photoz'])\nsb.distplot(train_meta['hostgal_photoz'])\nplt.axis([0.0,1.0,0.0,2.0])","372c9649":"plt.figure(figsize=(20,5))\nsb.distplot(test_meta['hostgal_photoz'])\nsb.distplot(train_meta['hostgal_photoz'])\nplt.axis([1.0,3.0,0.0,0.1])\nplt.plot()","ad4608f8":"## Extragalactic objects","c9033484":"## Studying the populations representativeness","fa13ed9c":"## Innergalatic objects"}}