{"cell_type":{"e0126426":"code","ad33ed1c":"code","bd3afa14":"code","a2ab1c73":"code","80fa8cd3":"code","49782fc2":"code","410a673d":"code","ea947e9b":"code","60495857":"code","382cb0c6":"code","693a14a9":"code","50ad0729":"code","74b0c6d1":"code","957ff82e":"code","c0a1e2e5":"code","cddc69ee":"code","cbf5a89f":"code","639837db":"code","c38ecb74":"code","39db3dfb":"code","9788a5d9":"code","dd98b524":"code","c3f770ba":"code","337b59ed":"markdown","09f70b32":"markdown","2f350332":"markdown","04650d14":"markdown"},"source":{"e0126426":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport numpy as np\n\nheart = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","ad33ed1c":"heart.head()","bd3afa14":"for i,col in enumerate(['age','anaemia','creatinine_phosphokinase','diabetes','ejection_fraction', 'high_blood_pressure','platelets','serum_creatinine','serum_sodium','sex','smoking','time']):\n  plt.figure(i)\n  sb.catplot(x = col, y = 'DEATH_EVENT', data = heart, kind = 'point', aspect = 2)","a2ab1c73":"heart.drop(['diabetes', 'sex', 'smoking'], axis = 1, inplace= True)","80fa8cd3":"heart.head()","49782fc2":"from sklearn.model_selection import train_test_split","410a673d":"feature = heart.drop('DEATH_EVENT', axis = 1)\nlabel = heart['DEATH_EVENT']","ea947e9b":"train_feature,test_feature,train_label,test_label = train_test_split(feature,label,test_size = 0.5, random_state = 50)\nval_feature,test_feature, val_label,test_label = train_test_split(test_feature,test_label,test_size = 0.5, random_state = 50)","60495857":"train_feature.count()","382cb0c6":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV","693a14a9":"LogisticRegression()","50ad0729":"def ML_results(results):\n\n  mean = results.cv_results_['mean_test_score']\n  std = results.cv_results_['std_test_score']\n  for mean, std, params in zip(mean, std, results.cv_results_['params']):\n    print('mean: ',round(mean,3),' std: ',round(std * 2,3),' for ',format(params))\n  print('\\n Final parameter decided: ',format(results.best_params_))","74b0c6d1":"LR = LogisticRegression(max_iter=500)\nparameter = {\n    'C' : [0.001, 0.01, 0.1, 1, 10, 100, 1000]\n}\ncv = GridSearchCV(LR, parameter, cv = 5)\ncv.fit(train_feature,train_label.values.ravel())\nLR = cv.best_estimator_\nLR","957ff82e":"from sklearn.ensemble import GradientBoostingClassifier","c0a1e2e5":"GradientBoostingClassifier()","cddc69ee":"gb = GradientBoostingClassifier()\nparameter = {\n    'learning_rate' : [0.01,0.1,1,10],\n    'max_depth' : [1,2,3,4],\n    'n_estimators' : [50,100,200,500]\n}\ncv = GridSearchCV(gb, parameter, cv = 5)\ncv.fit(train_feature, train_label.ravel())\ngb = cv.best_estimator_\ngb","cbf5a89f":"from time import time\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score\ndef eval_model(name, model , feature, label):\n  start = time()\n  pred = model.predict(feature)\n  end = time()\n  accuracy = round(accuracy_score(label,pred),4)\n  presision = round(precision_score(label,pred),4)\n  recall = round(recall_score(label,pred),4)\n  print('{} == Accuracy: {}, Precision: {}, recall: {},Latency: {}'.format(name,\n                                                                     accuracy,\n                                                                     presision,\n                                                                     recall,\n                                                                     round((end-start),3)))\n  return pred","639837db":"print('Valdiation')\neval_model('LR',LR,val_feature,val_label)\neval_model('GB',gb,val_feature, val_label)","c38ecb74":"print('testing')\npred = eval_model('LR',LR,test_feature,test_label)\npred1 = eval_model('GB',gb,test_feature,test_label)\npred","39db3dfb":"test_label.values","9788a5d9":"actual = np.empty([75], dtype = int)\nj=0\nfor i in test_label:\n  actual[j] = i\n  j+=1\nactual","dd98b524":"plt.figure(figsize=(15,10), dpi = 200)\nplt.grid()\nplt.plot(pred)\nplt.plot(actual)","c3f770ba":"plt.figure(figsize=(15,10), dpi = 200)\nplt.grid()\nplt.plot(pred1)\nplt.plot(actual)","337b59ed":"NOw spliting the data for training and testing","09f70b32":"Testing will be done by LR and GB","2f350332":"First one is Logistic regression(LR).","04650d14":"Will compare Logistic regression, and boosting to understand which one will be better to work with for this data."}}