{"cell_type":{"9a85e7d3":"code","b6e788af":"code","9096c8f0":"code","6cf8d8be":"code","0b03c892":"code","c40a0ed7":"code","b5d9d3da":"code","146296f9":"code","c1d7daee":"code","e7c930a4":"code","d64c9d81":"code","efdef9fd":"code","8f7330d6":"code","30c8e332":"code","6b1426c0":"code","230c4741":"code","8e8b39cc":"code","e4a83626":"code","d7313097":"code","822e74c2":"code","fc6ba711":"code","ccdc578c":"code","87d1920e":"code","5cde12b6":"code","d757f2f6":"code","130fa815":"code","9bb578f4":"code","ccd5a9c5":"code","e04398ca":"code","bfa69e98":"code","4b006267":"code","887cf711":"code","6e3debf2":"code","7c166028":"code","cb94ed7f":"code","b7d70ce2":"code","801bf7fb":"code","62ea664b":"code","2fc37998":"code","2d1d8816":"code","61071914":"code","44c37d73":"code","65ac02f9":"code","26e23bdd":"code","9244f4a6":"code","d51b88e4":"code","c0c4c7c7":"code","b1fd777f":"code","4ad53321":"markdown","ed10840b":"markdown","10dfa605":"markdown","fc63b5f2":"markdown","ca1492ec":"markdown","2faa25a4":"markdown","c6812dca":"markdown","33ebbedf":"markdown","c1851e72":"markdown","bed06382":"markdown"},"source":{"9a85e7d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b6e788af":"import numpy as np \nimport matplotlib.pyplot as plt \nimport matplotlib.colors as mcolors\nimport pandas as pd \nimport random\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nimport operator\nplt.style.use('seaborn')\n%matplotlib inline ","9096c8f0":"confirmed_df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ndeaths_df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\nrecoveries_df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')","6cf8d8be":"confirmed_df.head()","0b03c892":"columns = confirmed_df.keys()","c40a0ed7":"confirmed = confirmed_df.loc[:, columns[4]:columns[-1]]\ndeaths = deaths_df.loc[:, columns[4]:columns[-1]]\nrecoveries = recoveries_df.loc[:, columns[4]:columns[-1]]","b5d9d3da":"dates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\ntotal_recovered = [] \n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    mortality_rate.append(death_sum\/confirmed_sum)\n    total_recovered.append(recovered_sum)","146296f9":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nworld_cases = np.array(world_cases).reshape(-1, 1)\ntotal_deaths = np.array(total_deaths).reshape(-1, 1)\ntotal_recovered = np.array(total_recovered).reshape(-1, 1)","c1d7daee":"days_in_future = 15\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-15]","e7c930a4":"start = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","d64c9d81":"X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_22, world_cases, test_size=0.15, shuffle=False) ","efdef9fd":"kernel = ['poly', 'sigmoid', 'rbf']\nc = [0.01, 0.1, 1, 10]\ngamma = [0.01, 0.1, 1]\nepsilon = [0.01, 0.1, 1]\nshrinking = [True, False]\nsvm_grid = {'kernel': kernel, 'C': c, 'gamma' : gamma, 'epsilon': epsilon, 'shrinking' : shrinking}\n\nsvm = SVR()\nsvm_search = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nsvm_search.fit(X_train_confirmed, y_train_confirmed)","8f7330d6":"svm_search.best_params_","30c8e332":"svm_confirmed = svm_search.best_estimator_\nsvm_pred = svm_confirmed.predict(future_forcast)","6b1426c0":"# checking against testing data\nsvm_test_pred = svm_confirmed.predict(X_test_confirmed)\nplt.plot(svm_test_pred)\nplt.plot(y_test_confirmed)\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test_confirmed))","230c4741":"linear_model = LinearRegression(normalize=True, fit_intercept=True)\nlinear_model.fit(X_train_confirmed, y_train_confirmed)\ntest_linear_pred = linear_model.predict(X_test_confirmed)\nlinear_pred = linear_model.predict(future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_confirmed))","8e8b39cc":"print(linear_model.coef_)\nprint(linear_model.intercept_)","e4a83626":"tol = [1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4]\n\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2}\n\nbayesian = BayesianRidge()\nbayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search.fit(X_train_confirmed, y_train_confirmed)","d7313097":"bayesian_search.best_params_","822e74c2":"bayesian_confirmed = bayesian_search.best_estimator_\ntest_bayesian_pred = bayesian_confirmed.predict(X_test_confirmed)\nbayesian_pred = bayesian_confirmed.predict(future_forcast)\nprint('MAE:', mean_absolute_error(test_bayesian_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_bayesian_pred, y_test_confirmed))","fc6ba711":"plt.plot(y_test_confirmed)\nplt.plot(test_bayesian_pred)","ccdc578c":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=15)\nplt.show()","87d1920e":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, svm_pred, linestyle='dashed', color='purple')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'SVM predictions'])\nplt.xticks(size=15)\nplt.show()","5cde12b6":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, linear_pred, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'Linear Regression Predictions'])\nplt.xticks(size=15)\nplt.show()","d757f2f6":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, bayesian_pred, linestyle='dashed', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Time', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=15)\nplt.show()","130fa815":"# Future predictions using SVM \nprint('SVM future predictions:')\nset(zip(future_forcast_dates[-15:], svm_pred[-15:]))","9bb578f4":"# Future predictions using Linear Regression \nprint('Ridge regression future predictions:')\nset(zip(future_forcast_dates[-15:], bayesian_pred[-15:]))","ccd5a9c5":"# Future predictions using Linear Regression \nprint('Linear regression future predictions:')\nprint(linear_pred[-15:])","e04398ca":"# Split data for model\nX_train_deaths, X_test_deaths, y_train_deaths, y_test_deaths = train_test_split(days_since_1_22, total_deaths, test_size=0.15, shuffle=False) ","bfa69e98":"kernel = ['poly', 'sigmoid', 'rbf']\nc = [0.01, 0.1, 1, 10]\ngamma = [0.01, 0.1, 1]\nepsilon = [0.01, 0.1, 1]\nshrinking = [True, False]\nsvm_grid = {'kernel': kernel, 'C': c, 'gamma' : gamma, 'epsilon': epsilon, 'shrinking' : shrinking}\n\nsvm = SVR()\nsvm_search = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1, return_train_score=True, n_iter=40, verbose=1)\nsvm_search.fit(X_train_deaths, y_train_deaths)","4b006267":"print('Best Params are: ')\nsvm_search.best_params_","887cf711":"svm_deaths = svm_search.best_estimator_\nsvm_pred_death = svm_deaths.predict(future_forcast)","6e3debf2":"# check against testing data\nsvm_test_pred = svm_deaths.predict(X_test_deaths)\nplt.plot(svm_test_pred)\nplt.plot(y_test_deaths)\nplt.legend(['Death Cases', 'SVM predictions'])\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test_deaths))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test_deaths))","7c166028":"linear_model = LinearRegression(normalize=True, fit_intercept=True)\nlinear_model.fit(X_train_deaths, y_train_deaths)\ntest_linear_pred = linear_model.predict(X_test_deaths)\nlinear_pred = linear_model.predict(future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_deaths))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_deaths))","cb94ed7f":"print(linear_model.coef_)\nprint(linear_model.intercept_)","b7d70ce2":"plt.plot(y_test_deaths)\nplt.plot(test_linear_pred)\nplt.legend(['Death Cases', 'Linear Regression predictions'])","801bf7fb":"tol = [1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4]\n\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2}\n\nbayesian = BayesianRidge()\nbayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search.fit(X_train_deaths, y_train_deaths)","62ea664b":"bayesian_search.best_params_","2fc37998":"bayesian_deaths = bayesian_search.best_estimator_\ntest_bayesian_pred_deaths = bayesian_deaths.predict(X_test_deaths)\nbayesian_pred_deaths = bayesian_deaths.predict(future_forcast)\nprint('MAE:', mean_absolute_error(test_bayesian_pred_deaths, y_test_deaths))\nprint('MSE:',mean_squared_error(test_bayesian_pred_deaths, y_test_deaths))","2d1d8816":"plt.plot(y_test_deaths)\nplt.plot(test_bayesian_pred_deaths)\nplt.legend(['Confirmed Cases', 'Bayesian predictions'])","61071914":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, total_deaths, color='red')\nplt.title('# of Coronavirus Death Cases Over Time', size=20)\nplt.xlabel('Time', size=20)\nplt.ylabel('# of Deaths', size=20)\nplt.xticks(size=15)\nplt.show()","44c37d73":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, total_deaths, color='red')\nplt.plot(future_forcast, svm_pred_death, linestyle='dashed', color='purple')\nplt.title('# of Coronavirus Death Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('# of Cases', size=20)\nplt.legend(['Death Cases', 'SVM predictions'])\nplt.xticks(size=15)\nplt.show()","65ac02f9":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, total_deaths, color='red')\nplt.plot(future_forcast, linear_pred, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Death Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('# of Cases', size=20)\nplt.legend(['Death Cases', 'Linear Regression Predictions'])\nplt.xticks(size=15)\nplt.show()","26e23bdd":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, total_deaths, color='red')\nplt.plot(future_forcast, bayesian_pred_deaths, linestyle='dashed', color='green')\nplt.title('# of Coronavirus Death Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('# of Cases', size=20)\nplt.legend(['Death Cases', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=15)\nplt.show()","9244f4a6":"# Future predictions using SVM \nprint('SVM future predictions:')\nset(zip(future_forcast_dates[-14:], svm_pred_death[-14:]))","d51b88e4":"# Future predictions using Bayesian regression\nprint('Bayesian regression future predictions:')\nset(zip(future_forcast_dates[-14:], bayesian_pred_deaths[-14:]))","c0c4c7c7":"# Future predictions using Linear Regression \nprint('Linear regression future predictions:')\nprint(linear_pred[-14:])","b1fd777f":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, total_deaths, color='r')\nplt.plot(adjusted_dates, total_recovered, color='green')\nplt.legend(['Deaths', 'Recoveries'], loc='best', fontsize=20)\nplt.title('# of Coronavirus Cases', size=20)\nplt.xlabel('Time', size=20)\nplt.ylabel('# of Cases', size=20)\nplt.xticks(size=15)\nplt.show()","4ad53321":"Bayesian ridge regression model ","ed10840b":"**Number of death prediction:**","10dfa605":"Model for predicting number of confirmed cases by using support vector machine,linear regression and ridge regression.","fc63b5f2":"SVM Model","ca1492ec":"**Predicting the future**","2faa25a4":"Linear regression model","c6812dca":"I am going to share predictions about the virus on the basis of time series data known by the scientific name of SARS-CoV-2\n\nSARS-CoV-2 causes the disease COVID-19 (CoV-19) which is an infectious disease declared as a global pandemic by the World Health Organization (WHO) and causes a severe acute respiratory syndrome.\n\npreviously known by the provisional name 2019 novel coronavirus (2019-nCoV) this virus is a positive-sense single-stranded RNA virus.\n\nIt is contagious in humans and is the cause of the ongoing 2019\u201320 coronavirus outbreak, an pandemic of coronavirus disease 2019 (COVID-19)","33ebbedf":"Death and recoveries over time","c1851e72":"Convert integer into datetime","bed06382":"Furure Predictions"}}