{"cell_type":{"f06ee3a8":"code","64c7ac60":"code","b2a084d9":"code","f2209f65":"code","6fb3ca6d":"code","b29fafa0":"code","8d44973d":"code","9f131e66":"code","c61ee4a6":"code","b44e96ab":"code","6e1ddfee":"code","4632e3ca":"code","a1d3890e":"code","df23da0b":"code","55ae904a":"code","5215188b":"code","1937bfa8":"code","8de3eccb":"code","e6140c07":"code","0644f640":"code","3c3cbf40":"code","49032119":"code","a794fb73":"code","30975387":"code","93ac14ca":"code","f936f68a":"code","50030a7f":"code","9863e272":"code","2445f0ea":"code","9b02eb36":"code","7c3668c4":"code","2605e5f4":"code","c6b72c9e":"code","297300b2":"code","a10bc3aa":"code","a6581d94":"code","35cc5f85":"markdown","7244ba74":"markdown","bdc7e64a":"markdown","2bb54e99":"markdown","b7f489ed":"markdown","3d889000":"markdown","d294629d":"markdown","27c50bae":"markdown","c0278da6":"markdown"},"source":{"f06ee3a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","64c7ac60":"import matplotlib.pyplot as plt","b2a084d9":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}","f2209f65":"football = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","6fb3ca6d":"football","b29fafa0":"edu = pd.read_csv('\/kaggle\/input\/ense3-octobre\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","8d44973d":"edu.head(3)","9f131e66":"edu.tail(8)","c61ee4a6":"edu.describe()","b44e96ab":"edu['Value']","6e1ddfee":"edu[10:14]","4632e3ca":"edu.iloc[90:94][['TIME','GEO']]","a1d3890e":"edu[edu['Value'] > 6.6].tail(8)","df23da0b":"edu['Value'] > 6.6","55ae904a":"edu[edu[\"Value\"].isnull()].head()","5215188b":"edu.max(axis = 0)","1937bfa8":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","8de3eccb":"s = edu[\"Value\"]\/100\ns.head()","e6140c07":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","0644f640":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","3c3cbf40":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","49032119":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()\n","a794fb73":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","30975387":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","93ac14ca":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","f936f68a":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","50030a7f":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","9863e272":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","2445f0ea":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","9b02eb36":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","7c3668c4":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","2605e5f4":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","c6b72c9e":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","297300b2":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","a10bc3aa":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","a6581d94":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","35cc5f85":"What do you observe regarding the parameter ascending=False?\n\nIf ascending=False the value will be arranged in descending order, if ascending=True the value will be arranged in ascending order","7244ba74":"6.6  Sorting data","bdc7e64a":"What does this index return? What does the first index represent? And the second one?\n\nThe first index represent the slice of rows you want, and the second index the column you want","2bb54e99":"6.9  Ranking data","b7f489ed":"What happens if we give a number as argument to the method head()?\n\nIf we write edu.head(n), it's give us the n first rows, n=5 by default","3d889000":"6)What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?\n\nedu[edu['Value'] > X].tail(n) gives the last n lines among all the lines whose value is greater than X and it's a Data Frame because there are several value for one index\n\nedu['Value'] > X say for each rows if the value are > to X (TRUE) or not (False) and it's a S\u00e9rie because there are one index and one value\n\n\n","d294629d":"What happens if we give a number as argument to the method head()?\n\nIf we write edu.tail(n), it's give us the n last rows, n=5 by default","27c50bae":"Which is the size of the edu DataFrame (rows x columns)?\nThere are 384 rows and 3 columns","c0278da6":"Which measures does the result show? It seems that it shows some default values, can you guess which ones?\n\ncount: There are 384 rows et 361 rows with a value\nMean: it's the average\nmin\/max give the minimum value and the maximum value\n25%, 50% and 75% give first quartile, median and third quartile\nsdt give standard deviation"}}