{"cell_type":{"abd74ffa":"code","f92d0541":"code","09005771":"code","7fea9526":"code","987483ce":"code","d57e35f5":"code","77ccbc32":"code","84c42cf8":"code","769c8096":"code","0ad0b454":"code","e1f0350b":"code","41100661":"code","873f7c6d":"code","cb40462e":"code","627fb168":"code","98bfc134":"code","1b33bcbb":"markdown","c5194224":"markdown","0e1faa19":"markdown","bb183af5":"markdown","fe4b2582":"markdown","f072671c":"markdown","4176e973":"markdown","a7cecab3":"markdown","47b69d91":"markdown"},"source":{"abd74ffa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm_notebook\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f92d0541":"structures = pd.read_csv('..\/input\/structures.csv')\n\nstructures","09005771":"xyz = structures[['x','y','z']].values\n","7fea9526":"ss = structures.groupby('molecule_name').size()\nss = ss.cumsum()\nss","987483ce":"ssx = np.zeros(len(ss) + 1, 'int')\nssx[1:] = ss\nssx","d57e35f5":"molecule_id = 20\nprint(ss.index[molecule_id])\nstart_molecule = ssx[molecule_id]\nend_molecule = ssx[molecule_id+1]\nxyz[start_molecule:end_molecule]","77ccbc32":"structures_idx = structures.set_index('molecule_name')","84c42cf8":"structures_idx.loc['dsgdb9nsd_000022'][['x', 'y', 'z']].values","769c8096":"def get_fast_dist_matrix(xyz, ssx, molecule_id):\n    start_molecule, end_molecule = ssx[molecule_id], ssx[molecule_id+1]\n    locs = xyz[start_molecule:end_molecule]    \n    num_atoms = end_molecule - start_molecule\n    loc_tile = np.tile(locs.T, (num_atoms,1,1))\n    dist_mat = np.sqrt((loc_tile - loc_tile.T)**2).sum(axis=1)\n    return dist_mat","0ad0b454":"molecule_id = 0\nmolecule = ss.index[molecule_id]\nprint(molecule)\nget_fast_dist_matrix(xyz, ssx, molecule_id)","e1f0350b":"print(ss.index[molecule_id])","41100661":"structures.loc[structures['molecule_name']=='dsgdb9nsd_000001']","873f7c6d":"carbon_x = -0.012698\ncarbon_y = 1.085804\ncarbon_z = 0.008001","cb40462e":"def distance_from_carbon_to_xyz(xyz):\n    return np.sqrt( (carbon_x - xyz[0])**2 + (carbon_y - xyz[1])**2 + (carbon_z - xyz[2])**2)","627fb168":"structures.loc[structures['molecule_name']=='dsgdb9nsd_000001', ['x','y','z']].apply(distance_from_carbon_to_xyz, 1)","98bfc134":"molecule_id = 0\nmolecule = ss.index[molecule_id]\nprint(molecule)\nget_fast_dist_matrix(xyz, ssx, molecule_id)","1b33bcbb":"# As expected, it is dsgdb9nsd_000001. But we know it should be very symmetric with the same distances. Let's calculate it using the structures file.","c5194224":"# We can see the distances are 0 and 1.09 pretty much. Let's check the distance matrix again.","0e1faa19":"# That distance is not there. Therefore the distance computation is wrong.","bb183af5":"# It's all wrong!","fe4b2582":"# Let's calculate the distances from the Carbon atom to the Hydrogens","f072671c":"Looks good.\n\nWe can now rewrite our function using our arrays.\n","4176e973":"We can compare with the information we get from the original pandas dataframe","a7cecab3":"# Okay, that is the distance matrix for molecule_id==0. Let's check which molecule it is.","47b69d91":"Let's check we get the same result with both techniques.  We use methane, molecule_id=0"}}