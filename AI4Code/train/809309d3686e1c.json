{"cell_type":{"a3e26bcc":"code","864a5dcf":"code","871c0c4d":"code","54229ec9":"code","446daea2":"code","efa09070":"code","eb3dfc15":"code","e62f9ef8":"code","b14c8d4a":"code","3249bf7c":"code","5d7396e8":"code","5c186cd0":"code","ddd0b1fc":"code","815c70f3":"code","ba1e1cd8":"markdown","b5cc1210":"markdown","b5895340":"markdown","9328d4d0":"markdown","70c8484f":"markdown","43ad240b":"markdown","72f1c1ef":"markdown","a9408c8b":"markdown","6f75eaa3":"markdown","1a8c1157":"markdown","49a335d0":"markdown","bedaf671":"markdown","c831418f":"markdown","20e462c6":"markdown","ae8b2471":"markdown"},"source":{"a3e26bcc":"import pandas as pd\nimport numpy as np\n\nimport plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected=True)\nfrom plotly import tools\nimport plotly.figure_factory as ff\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndf = pd.read_csv('..\/input\/all_stocks_5yr.csv')\ndf['date'] = pd.to_datetime(df['date'])\ndf.head()","864a5dcf":"goog = df[df.Name=='GOOG']\namzn = df[df.Name=='AMZN']\nmerge = goog[['date','close']].merge(amzn[['date','close']], on = 'date')\nmerge['diff'] = merge['close_x'] - merge['close_y']\nmerge.head()","871c0c4d":"trace0 = go.Scatter(x=goog.date, y=goog.close)\ndata = [trace0]\npy.iplot(data)","54229ec9":"trace0 = go.Scatter(x=goog.date, y=goog.close, name='GOOG')\ntrace1 = go.Scatter(x=amzn.date, y=amzn.close, name='AMZN')\ntrace2 = go.Scatter(x=merge.date, y=merge['diff'], name='DIFF')\n\ndata = [trace0, trace1,trace2]\npy.iplot(data)","446daea2":"trace0 = go.Scatter(x=goog.date, y=goog.close, name='GOOG')\ntrace1 = go.Scatter(x=amzn.date, y=amzn.close, name='AMZN')\ntrace2 = go.Scatter(x=merge.date, y=merge['diff'], name='DIFF')\n\ndata = [trace0, trace1, trace2]\nlayout = dict(title='Stock Prices of GOOG vs AMZN')\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig)","efa09070":"trace0 = go.Scatter(x=goog.date, y=goog.close, name='GOOG', line=dict(color='lime'))\ntrace1 = go.Scatter(x=amzn.date, y=amzn.close, name='AMZN', line=dict(color='grey'))\ntrace2 = go.Scatter(x=merge.date, y=merge['diff'], name='DIFF', line=dict(color='red'))\n\ndata = [trace0, trace1, trace2]\nlayout = dict(\n            title='Stock Prices of GOOG vs AMZN',\n              xaxis = dict(\n        range = ['2016-03-01','2018-01-31']\n              )\n             )\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig)","eb3dfc15":"trace0 = go.Scatter(\n                    x=goog.date, \n                    y=goog.close, \n                    name='GOOG', \n                    line=dict(color='lime'\n                             )\n                   )\n\ntrace1 = go.Scatter(\n                    x=amzn.date, \n                    y=amzn.close, \n                    name='AMZN', \n                    line=dict(color='grey'\n                             )\n                   )\n\ntrace2 = go.Scatter(\n                    x=merge.date, \n                    y=merge['diff'], \n                    name='DIFF', \n                    line=dict(color='red'\n                             )\n                   )\n\ndata = [trace0, trace1, trace2]\nlayout = dict(\n    title='Stock Prices of GOOG vs AMZN',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label='1m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=3,\n                     label='3m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=6,\n                     label='6m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=12,\n                     label='12m',\n                     step='month',\n                     stepmode='backward'\n                    )\n            ])\n        ),\n        rangeslider=dict(\n            visible = True\n        ), type='date'\n    )\n)\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig)","e62f9ef8":"trace0 = go.Scatter(\n                    x=goog.date, \n                    y=goog.close, \n                    name='GOOG', \n                    line=dict(color='lime')\n                   )\n\ntrace1 = go.Scatter(\n                    x=amzn.date,\n                    y=amzn.close, \n                    name='AMZN', \n                    line=dict(color='grey')\n                   )\n\ntrace2 = go.Scatter(\n                    x=merge.date, \n                    y=merge['diff'], \n                    name='DIFF', \n                    line=dict(color='red'\n                             )\n                   )\n\ndata = [trace0, trace1, trace2]\nlayout = {\n    'title': 'Stock Prices of GOOG vs AMZN',\n    'yaxis': {'title': 'price ($)'},\n    'shapes': [{\n        'x0': '2017-10-20', 'x1': '2017-10-20',\n        'y0': 0, 'y1': 1, 'yref': 'paper',\n        'line': {'color': 'red', 'width': 1}\n    }],\n    'annotations': [{\n        'x': '2017-10-20',  'yref': 'paper',\n         'showarrow': False, 'xanchor': 'left',\n        'text': 'Change Point'\n    }]\n}\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig)","b14c8d4a":"trace0 = go.Box(\n    y=goog.close,\n    name = 'GOOG Close',\n    marker = dict(\n        color = 'red')\n)\n\ntrace1 = go.Box(\n    y=amzn.close,\n    name = 'AMZN Close',\n    marker = dict(\n        color = 'navy')\n)\n\ndata = [trace0, trace1]\nlayout = dict(title='Stock Prices of GOOGLE & AMAZON')\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig)","3249bf7c":"data = goog[['open','close','volume']]\ndata[\"index\"] = np.arange(len(data))\n\nfig = ff.create_scatterplotmatrix(data, diag='box', index='index',size= 3,\n                               height=700, width=700, colormap='RdBu')\npy.iplot(fig)","5d7396e8":"trace0 = go.Scatterpolar(\n      r = [goog['close'].mean(),goog['open'].min(), goog['low'].min(),goog['high'].max()],\n      theta = ['close','open','low','high'], line =  dict(\n            color = 'pink'), name='GOOGLE',\n      fill = 'toself'\n)\n\ntrace1 = go.Scatterpolar(\n      r = [amzn['close'].mean(),amzn['open'].min(), amzn['low'].min(),amzn['high'].max()],\n      theta = ['close','open','low','high'], line =  dict(\n            color = 'navy'), name='AMAZON',\n      fill = 'toself'\n)\n\ndata = [trace0,trace1]\nlayout = go.Layout(\n      polar = dict(\n        radialaxis = dict(\n          visible = True)), \n    title='GOOGLE vs AMAZON'\n)\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig)","5c186cd0":"trace0 = go.Candlestick(\n                        x=goog.date,\n                        open=goog.open,\n                        high=goog.high, \n                        low=goog.low,\n                        close=goog.close\n                       )\ndata = [trace0]\npy.iplot(data)","ddd0b1fc":"trace0 = go.Candlestick(\n                        x=goog.date,\n                        open=goog.open,\n                        high=goog.high, \n                        low=goog.low,\n                        close=goog.close,\n                       decreasing=dict(line=dict(color= 'indigo')\n                                      )\n                       )\n\ndata = [trace0]\nlayout =  dict(\n    title = \"Increase vs Decrease (GOOGLE)\",\n    xaxis = dict(range = ['2016-10-01','2018-01-01']\n                )\n)\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig)","815c70f3":"df1dm = goog.resample('D', on='date').mean()\ndf1wm = goog.resample('W', on='date').mean()\ndf1mm = goog.resample('M', on='date').mean()\n\ntrace0 = go.Scatter(\n    x = df1mm.index,\n    y = df1mm['close'],\n    name = 'monthly',\n    mode='markers',\n    marker=dict(\n        size=4,\n        color = 'grey')\n)\n\ntrace1 = go.Scatter(\n    x = df1wm.index,\n    y = df1wm['close'],\n    name = 'weekly',\n    mode='markers',\n    marker=dict(\n        size=4,\n        color = 'orange'\n    )\n)\n\ntrace2 = go.Scatter(\n    x = df1dm.index,\n    y = df1dm['close'],\n    name = 'daily',\n    mode='markers',\n    marker=dict(\n        size=4,\n        color = 'indigo'\n    )\n)\n\nfig = tools.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],\n                          subplot_titles=('Monthly','Weekly', 'Daily'\n                                         )\n                         )\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 2, 1)\n\nfig['layout'].update(showlegend=False, title='Price of Amazon on monthly, weekly and daily basis')\npy.iplot(fig)","ba1e1cd8":"**Change colors, time-range and add title etc. to candlestick chart. All steps are same as in scatterplot.**","b5cc1210":"List of Plotly colorscales:\n* \u2018Blackbody\u2019\n* \u2018Bluered\u2019\n* \u2018Blues\u2019\n* \u2018Earth\u2019\n* \u2018Electric\u2019\n* \u2018Greens\u2019\n* \u2018Greys\u2019\n* \u2018Hot\u2019\n* \u2018Jet\u2019\n* \u2018Picnic\u2019\n* \u2018Portland\u2019\n* \u2018Rainbow\u2019\n* \u2018RdBu\u2019\n* \u2018Reds\u2019\n* \u2018Viridis\u2019\n* \u2018YlGnBu\u2019\n* \u2018YlOrRd\u2019\n\nThe default colorscale is \u2018RdBu\u2019.\n\n**If we would like to compare lowest, highest values of stock prices historically we could see scatterpolar function of Plotly.**","b5895340":"**Change x-axis range & colors. To customize our chart, we only add what we want in the related part.**","9328d4d0":"**Your feedback really matters - please share your thoughts and suggestions.**","70c8484f":"**Second rule: put everything not related to data (like title or axis rotations) in layout and finally put both trace and layout in the same place. That's all!**","43ad240b":"**Adding custom buttons & time sliders helps us to compare two stocks in different time scales.**","72f1c1ef":"**Add amazon stock prices in a different trace and then label & combine them in the same place.**","a9408c8b":"**Let's combine barplots, scatterplots to understand relation between open, close prices & daily volume.**","6f75eaa3":"> **Logic behind the Plotly visuals is so simple. First rule: put everything related to the data in trace. That's all!**","1a8c1157":"**Barplot gives us a overall statistical picture like min, max, quantiles, etc.**","49a335d0":"<h1><center>PLOTLY TUTORIAL - 3<\/center><\/h1>\n\n***\nPlotly is a library built on top of d3.js that has a steep-learning curve JavaScript library. There are Plotly API for Matlab, R, Python that helps us to create interactive visuals and dashboards. In other words, we can manipulate data manipulations in Pandas DataFrame and create interactive visual works easily.\n\n*In this notebook, my aim is to investigate Google & Amazon stock prices by using Plotly time-series features while generating a comprehensive tutorial for PLOTLY enthusiasts. After reading the tutorial you may want to check my other tutorials.*\n\n**PLOTLY TUTORIAL - 1 (Kaggle ML and Data Science Survey): https:\/\/www.kaggle.com\/hakkisimsek\/plotly-tutorial-1**\n\n**PLOTLY TUTORIAL - 2 (2015 Flight Delays and Cancellations): https:\/\/www.kaggle.com\/hakkisimsek\/plotly-tutorial-2**\n\n**PLOTLY TUTORIAL - 4 (Google Store Customer Data): https:\/\/www.kaggle.com\/hakkisimsek\/plotly-tutorial-4**\n\n**PLOTLY TUTORIAL - 5 (Kaggle Survey 2018): https:\/\/www.kaggle.com\/hakkisimsek\/plotly-tutorial-5**\n\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*CNuxBDgp-Cb-VPfm9NAb-Q.png\">\n\nsource: http:\/\/www.timqian.com\/star-history\/#bokeh\/bokeh&plotly\/dash","bedaf671":"**Choose Google & Stock stock prices and calculate differences.**","c831418f":"**Until now, I hope they are all easy to grasp. Let's complicate the picture a little bit and add a line in a spesific date.**","20e462c6":"**Resample the data for  monthly, weekly and daily analysis in subplots. Firstly, we should change datetime for resampling manipulations.**","ae8b2471":"**CANDLESTICK CHARTS**\n\n*A candlestick is a chart that displays the open, high, low, open and closing prices of a stock.*"}}