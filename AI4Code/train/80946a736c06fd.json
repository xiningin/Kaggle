{"cell_type":{"629fe35e":"code","0f12f789":"code","1947bafc":"code","f5b00062":"code","96526ccd":"code","1cd1bf8c":"code","35028a27":"code","2363a3fe":"code","5c3088be":"code","657833cd":"code","b5172927":"code","90c5b76f":"code","9c357126":"code","c7ae50a9":"code","d0521d3a":"code","02833d47":"code","7f39a777":"code","cc9dd054":"code","6e6f6fc5":"code","c313c9ef":"code","5009ed65":"code","6fa34a64":"code","dacde383":"markdown","e8663794":"markdown"},"source":{"629fe35e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f12f789":"main_data = pd.read_csv(\"\/kaggle\/input\/pakistans-largest-ecommerce-dataset\/Pakistan Largest Ecommerce Dataset.csv\", \n                        parse_dates=[\"created_at\", \"Working Date\"], low_memory=False)","1947bafc":"main_data.head()","f5b00062":"main_data.shape","96526ccd":"main_data.columns","1cd1bf8c":"status_col = main_data.status\nstatus_col.isna().sum()","35028a27":"status_col = status_col.dropna()\nstatus_list = list(set(status_col))\nprint(status_list)","2363a3fe":"status_list = status_list[1:]\nprint(status_list)","5c3088be":"status_values = []\nfor s in status_list:\n    val = main_data[main_data.status == s].status.count()\n    status_values.append(val)\n\n\nstatus_info = np.array([status_list, status_values])","657833cd":"print(status_info)","b5172927":"for i in range(len(status_list)):\n    print(status_info[0][i], ' = ', status_info[1][i])","90c5b76f":"import matplotlib.pyplot as plt\nplt.barh(status_list,status_values)\nplt.title('Status of Orders against total Orders', fontsize = 14)\nplt.xlabel('Order Counts', fontsize = 14)\nplt.ylabel('Order Status', fontsize = 14)\nplt.grid(True)\nplt.autoscale(tight=True)\nplt.show()","9c357126":"main_data.category_name_1.isna().sum()","c7ae50a9":"categories = main_data.category_name_1\ncategories= categories.dropna()","d0521d3a":"item_categories = list(set(categories))\nprint(item_categories)","02833d47":"print(len(item_categories))","7f39a777":"temp= item_categories[:14]\nprint(temp)","cc9dd054":"temp.append(item_categories[15])","6e6f6fc5":"item_categories = temp\nprint(item_categories)","c313c9ef":"number_of_qty_ordered = main_data.qty_ordered\nnumber_of_qty_ordered.isna().sum()","5009ed65":"number_of_qty_ordered= number_of_qty_ordered.dropna()\nexisting_qtys = list(set(number_of_qty_ordered))\nprint(existing_qtys)","6fa34a64":"\nmain_data.loc[main_data['qty_ordered']== max(existing_qtys),'category_name_1']","dacde383":"Which is the category where maximum quantities were sold","e8663794":"# Working on Categories"}}