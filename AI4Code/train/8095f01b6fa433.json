{"cell_type":{"20cfbfb0":"code","c66b0d81":"code","db6d7679":"code","57914a37":"code","305599d2":"code","cd6d7da0":"code","403a5f9f":"code","c0088d03":"code","04e7bccc":"code","a559e4f9":"code","4d4ba042":"code","a1a63ed9":"code","81171003":"code","d38af6a2":"code","87cf7f32":"code","4c84ac9a":"code","5b1af0b0":"code","8ed589a3":"code","d5b3a56c":"code","744a0feb":"code","f1ff0a1a":"code","9d6d9667":"code","3de4bf87":"code","e41d7583":"code","783b0c31":"code","3594b6ff":"code","820a9a81":"code","e514251c":"markdown","a3c49c7c":"markdown","b148bb90":"markdown"},"source":{"20cfbfb0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c66b0d81":"placement = pd.read_csv('\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')\n\nplacement","db6d7679":"task_1_data = placement.drop(columns=['sl_no','gender','ssc_b','hsc_b','hsc_s','degree_t','workex','etest_p','specialisation','status','salary'])\n\ntask_1_data","57914a37":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n#Plotting ssc_p against mba_p\nplt.subplot(2,2,1)\nsns.regplot(x = task_1_data.ssc_p, y = task_1_data.mba_p)\n\n#Plotting hsc_p against mba_p\nplt.subplot(2,2,2)\nsns.regplot(x = task_1_data.hsc_p, y = task_1_data.mba_p)\n\n#Plotting degree_p against mba_p\nplt.subplot(2,2,3)\nsns.regplot(x = task_1_data.degree_p, y = task_1_data.mba_p)","305599d2":"#Standardizing data\n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ntask_1_data[['hsc_p']] = scaler.fit_transform(task_1_data[['hsc_p']])\n\ntask_1_data[['ssc_p']] = scaler.fit_transform(task_1_data[['ssc_p']])\n\ntask_1_data[['degree_p']] = scaler.fit_transform(task_1_data[['degree_p']])\n\ntask_1_data[['mba_p']] = scaler.fit_transform(task_1_data[['mba_p']])","cd6d7da0":"#Plotting scaled data. Note the difference along the X-axis and Y-axis units.\n\n#Plotting ssc_p against mba_p\nsns.regplot(x = task_1_data.ssc_p, y = task_1_data.mba_p)\n\n#Plotting hsc_p against mba_p\nsns.regplot(x = task_1_data.hsc_p, y = task_1_data.mba_p)\n\n#Plotting degree_p against mba_p\nsns.regplot(x = task_1_data.degree_p, y = task_1_data.mba_p)","403a5f9f":"X = task_1_data.drop(columns=['mba_p'])\ny = task_1_data['mba_p']","c0088d03":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1001)","04e7bccc":"from sklearn.linear_model import LinearRegression\n\nreg = LinearRegression()","a559e4f9":"reg.fit(X_train, y_train)","4d4ba042":"importance = reg.coef_\nfor i,v in enumerate(importance):\n    print('Feature:',X_train.columns[i],', Score: %.5f' % (v))","a1a63ed9":"from sklearn.metrics import r2_score\n\npred = reg.predict(X_test)\naccuracy = r2_score(pred, y_test)\n\nprint(\"Intercept: \",reg.intercept_)\nprint(\"Coefficients: \",reg.coef_)\nprint(\"R2 Score: \",accuracy)\n\nprint(\"\\nRegression Equation: Y = \",reg.coef_[0],\"x^2 + \",reg.coef_[1],\"x + (\",reg.intercept_,\")\")","81171003":"#Dropping non-numerical columns and primary keys\n\ntask_2_data = placement.drop(columns=['gender','ssc_b','hsc_b','hsc_s','degree_t','workex','specialisation','status','sl_no','etest_p'])\n\n#Dropping null values\n\ntask_2_data.dropna(inplace=True)\n\n#View modified data\n\ntask_2_data","d38af6a2":"X = task_2_data.drop(columns = ['salary'])\ny = task_2_data['salary']","87cf7f32":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1001)","4c84ac9a":"from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom lightgbm import LGBMRegressor\nfrom sklearn.linear_model import Lasso, Ridge\n\nxgb = XGBRegressor(learning_rate=0.01, n_estimators=1000)\nclf = RandomForestRegressor(n_estimators=1000)\ngb = GradientBoostingRegressor(learning_rate=0.01, n_estimators=1000)\nlgbm = LGBMRegressor(boosting_type='gbdt', objective='huber', learning_rate=0.01, n_estimators=1000, metric='rmse')\nlassoreg = Lasso(alpha=0.1, normalize=True)\nridgereg = Ridge(alpha=0.1, normalize=True)","5b1af0b0":"xgb_scores = cross_val_score(xgb, X_train, y_train, cv=10)\nclf_scores = cross_val_score(clf, X_train, y_train, cv=10)\ngb_scores = cross_val_score(gb, X_train, y_train, cv=10)\nlgbm_scores = cross_val_score(lgbm, X_train, y_train, cv=10)\nlasso_scores = cross_val_score(lassoreg, X_train, y_train, cv=10)\nridge_scores = cross_val_score(ridgereg, X_train, y_train, cv=10)","8ed589a3":"print(\"XGB Regression: \",np.mean(xgb_scores))\nprint(\"Random Forest Regression: \",np.mean(clf_scores))\nprint(\"Gradient Boosting Regression: \",np.mean(gb_scores))\nprint(\"LGBM Regression: \",np.mean(lgbm_scores))\nprint(\"Lasso Regression: \",np.mean(lasso_scores))\nprint(\"Ridge Regression: \",np.mean(ridge_scores))","d5b3a56c":"#LGBM gave the best results of the cross validation.\n#We will use it to predict our salaries.\n\nlgbm.fit(X_train, y_train)\npred_1 = lgbm.predict(X_test)\nprint(lgbm.score(X_test, y_test))\n\n#We also want to get a picture of the decision tree!\n#That's why we're fitting the clf model below.\n\nclf.fit(X_train, y_train)\npred_2 = clf.predict(X_test)\nprint(clf.score(X_test, y_test))","744a0feb":"#These are the actual, correct values of the salaries.\n#Observe the difference between this table and the one below.\n\nactual_values = pd.DataFrame({'actual_salary':y_test})\nactual_values.index = X_test.index\n\nactual_values.to_csv(\"Actual_Salaries.csv\", index=False)\n\nactual_values","f1ff0a1a":"#Clearly, LGBM Regression gives the best results here. Let's see its predictions.\n\nmodel_preds = pd.DataFrame({'predicted_salary':pred_1})\nmodel_preds.index = X_test.index\n\nmodel_preds.to_csv(\"Predicted_Salaries.csv\",index=False)\n\nmodel_preds","9d6d9667":"from sklearn.tree import export_graphviz\nimport pydot","3de4bf87":"feature_list = list(X_test.columns)\nfeature_list","e41d7583":"#Pulling out a tree\n\ntree = clf.estimators_[5]","783b0c31":"export_graphviz(tree, out_file='tree.dot', feature_names=feature_list, rounded=True, precision=1)","3594b6ff":"(graph, ) = pydot.graph_from_dot_file('tree.dot')","820a9a81":"#Export image of tree\n\ngraph.write_png('tree.png')","e514251c":"# 2. Regression using Ensemble Models, to predict future salaries","a3c49c7c":"# 1. Building Linear Regression Model, with ssc_p, hsc_p, and degree_p as independent variables and mba_p as dependent variable.","b148bb90":"# Now, we're going to get an image of the decision tree."}}