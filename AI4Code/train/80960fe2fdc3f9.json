{"cell_type":{"38af351c":"code","27eca2c6":"code","916d97f9":"code","20e6625a":"code","3a139e05":"markdown","9fbd2adf":"markdown","04388b5f":"markdown","40e70af2":"markdown","32bdd272":"markdown"},"source":{"38af351c":"from datetime import datetime\nimport time\nimport json\nimport requests\nimport numpy as np\nimport pandas as pd\n\nclass OpenDotaAPI():\n    def __init__(self, verbose = False):\n        self.verbose = verbose\n        self.last_match_id = 0\n\n    def _call(self, url, parameters, tries= 2):\n        for i in range(tries):\n            try:\n                if self.verbose: print(\"Sending API request... \", end=\"\", flush=True)\n                resp = requests.get(url, params= parameters, timeout= 20)\n                load_resp = json.loads(resp.text)\n                if self.verbose: print(\"done\")\n                return load_resp\n            except Exception as e:\n                print(\"failed. Trying again in 5s\")\n                print(e)\n                time.sleep(5)\n        else:\n            ValueError(\"Unable to connect to OpenDota API\")\n\n    # Return a list of 100 recent matches; save smaller match_id\n    def get_recent_matches(self, use_last_match = False):\n        params = dict()\n        if use_last_match:\n            params['less_than_match_id'] = self.last_match_id\n        url = \"https:\/\/api.opendota.com\/api\/publicMatches\"\n        matches = self._call(url, params)\n        self.last_match_id = min([item['match_id'] for item in matches])\n        return matches\n\n    # Return a dictionary with match information\n    def get_match_info(self, match_id):\n        url = \"https:\/\/api.opendota.com\/api\/matches\/\" + str(match_id)\n        return self._call(url, None)\n\n    # Return a list with player's match history (previous matches)\n    def get_player_matches_history(self, account_id):\n        url = \"https:\/\/api.opendota.com\/api\/players\/{}\/matches\".format(account_id)\n        return self._call(url, None)\n\n    # Get a dictionary with overall benchmarks given account id (kills, deaths, gpm...)\n    def get_player_totals(self, account_id, hero_id = None):\n        params = {'sort': 1}\n        if hero_id: params['hero_id'] = hero_id\n        url = \"https:\/\/api.opendota.com\/api\/players\/{}\/totals\".format(int(account_id))\n        return self._call(url, params)\n\n    # Return wins and losses for a given account id\n    def get_player_win_loss(self, account_id, hero_id = None):\n        if hero_id:\n            params = {'hero_id': hero_id}\n        else:\n            params = None\n        url = \"https:\/\/api.opendota.com\/api\/players\/{}\/wl\".format(account_id)\n        resp = self._call(url, params)\n        return resp['win'], resp['lose']","27eca2c6":"class DataPreprocessing():\n    def __init__(self):\n        # Initialize tables as empty dataframes\n        self.matches = pd.DataFrame()\n        self.players = pd.DataFrame()\n        self.chat = pd.DataFrame()\n        self.objectives = pd.DataFrame()\n        self.advantages = pd.DataFrame()\n        self.events = pd.DataFrame()\n        self.abilities = pd.DataFrame()\n        self.wards = pd.DataFrame()\n        self.previous_matches = pd.DataFrame()\n\n\n    def get_match(self, match):\n        \"\"\" Get general information from the match and append to self.matches. \"\"\"\n        \n        fields = ['match_id', 'match_seq_num', 'patch', 'region', 'start_time', 'duration',\n            'game_mode', 'skill', 'first_blood_time', 'barracks_status_dire',\n            'barracks_status_radiant', 'tower_status_dire', 'tower_status_radiant',\n            'dire_score', 'radiant_score', 'radiant_win']\n\n        proc_match = {key: [match[key]] for key in fields}\n        self.matches = self.matches.append(pd.DataFrame(proc_match), ignore_index= True)\n    \n    def get_match_chat(self, match):\n        \"\"\" Get match chat and save to self.chat dataframe. \"\"\"\n        fields = ['match_id', 'time', 'type', 'key', 'slot', 'player_slot']\n        messages = []\n        if match['chat']:\n            for item in match['chat']:\n                message = {'match_id': match['match_id']}\n                for field in fields:\n                    message[field] = item[field]\n                messages.append(message.copy())\n            if messages:\n                self.chat = self.chat.append(pd.DataFrame(messages), ignore_index= True)\n\n    def get_match_objectives(self, match):\n        \"\"\" Get game objectives like Roshan and towers and append to self.objectives dataframe. \"\"\"\n        fields = ['time', 'type', 'unit', 'key', 'slot', 'player_slot']\n        objectives = []\n        if match['objectives']:\n            for item in match['objectives']:\n                obj = {'match_id': match['match_id']}\n                for field in fields:\n                    if field in item:\n                        obj[field] = item[field]\n                    else:\n                        obj[field] = np.nan\n                objectives.append(obj.copy())\n        if objectives:\n            self.objectives = self.objectives.append(pd.DataFrame(objectives), ignore_index= True)\n\n    def get_match_advantages(self, match):\n        \"\"\" Get radiant gold and xp advantage for each minute and append to self.advantages dataframe. \"\"\"\n        advantages = []\n        if match['radiant_gold_adv']:  # Gold advantage (gold_or_xp = 0)\n            for i, value in enumerate(match['radiant_gold_adv']):\n                adv = {\n                    'match_id': match['match_id'],\n                    'minute': i,\n                    'gold_or_xp': 0,\n                    'value': int(value)\n                }\n                advantages.append(adv.copy())\n        if match['radiant_xp_adv']:  # XP advantage (gold_or_xp = 1)\n            for i, value in enumerate(match['radiant_xp_adv']):\n                adv = {\n                    'match_id': match['match_id'],\n                    'minute': i,\n                    'gold_or_xp': 1,\n                    'value': int(value)\n                }\n                advantages.append(adv.copy())\n        if advantages:\n            self.advantages = self.advantages.append(pd.DataFrame(advantages), ignore_index= True)\n\n    def get_players_events(self, match):\n        \"\"\" Get events for each player (kills, runes, bb and purchases) and append to self.events. \"\"\"\n        events = []\n        for player in match['players']:\n            if player['buyback_log']: # Player's Buybacks\n                for bb in player['buyback_log']:\n                    tmp = {\n                        'match_id': match['match_id'],\n                        'account_id': player['account_id'],\n                        'player_slot': player['player_slot'],\n                        'hero_id': player['hero_id'],\n                        'time': bb['time'],\n                        'key': np.nan,\n                        'event': 'buyback'\n                    }\n                    events.append(tmp.copy())\n            if player['kills_log']: # Player's kills on enemy heroes\n                for kill in player['kills_log']:\n                    tmp = {\n                        'match_id': match['match_id'],\n                        'account_id': player['account_id'],\n                        'player_slot': player['player_slot'],\n                        'hero_id': player['hero_id'],\n                        'time': kill['time'],\n                        'key': kill['key'],\n                        'event': 'kill'\n                    }\n                    events.append(tmp.copy())\n            if player['runes_log']: # Runes picked\n                for rune in player['runes_log']:\n                    tmp = {\n                        'match_id': match['match_id'], \n                        'account_id': player['account_id'], \n                        'player_slot': player['player_slot'],\n                        'hero_id': player['hero_id'], \n                        'time': rune['time'],\n                        'key': rune['key'],\n                        'event': 'rune'\n                    }\n                    events.append(tmp.copy())\n            if player['purchase_log']:\n                for item in player['purchase_log']: # Items purchased\n                    tmp = {\n                        'match_id': match['match_id'],\n                        'account_id': player['account_id'],\n                        'player_slot': player['player_slot'],\n                        'hero_id': player['hero_id'],\n                        'time': item['time'],\n                        'key': item['key'],\n                        'event': 'purchase'\n                    }\n                    events.append(tmp.copy())\n        if events:\n            self.events = self.events.append(pd.DataFrame(events), ignore_index= True)\n\n    def get_ability_upgrades(self, match):\n        \"\"\" Get skill upgrades for each player. Columns goes from 1 to 25 for each possible skill upgrade. \"\"\"\n        ability_upgrades = []\n        for player in match['players']:\n            if player['ability_upgrades_arr']:\n                tmp = {\n                    'match_id': match['match_id'],\n                    'account_id': player['account_id'],\n                    'player_slot': player['player_slot'],\n                    'hero_id': player['hero_id'],\n                }\n                for i in range(25):\n                    tmp['skill_upgrade_' + str(i + 1)] = np.nan\n                for i, value in enumerate(player['ability_upgrades_arr']):\n                    tmp['skill_upgrade_' + str(i + 1)] = value\n                ability_upgrades.append(tmp.copy())\n        if ability_upgrades:\n            self.abilities = self.abilities.append(pd.DataFrame(ability_upgrades), ignore_index= True)\n\n    def get_wards(self, match):\n        \"\"\" Get time, position, slot and hero for each ward placed and append to self.wards dataframe. \"\"\"\n        wards = []\n        for player in match['players']:\n            if player['obs_log']:  # Observer wards (type = 0)\n                for item in player['obs_log']:\n                    ward = {\n                        'match_id': match['match_id'], 'account_id': player['account_id'],\n                        'player_slot': player['player_slot'], 'hero_id': player['hero_id'],\n                        'time': item['time'], 'x': item['x'], 'y': item['y'], 'type': 0\n                    }\n                    wards.append(ward.copy())\n            if player['sen_log']:  # Sentry wards (type = 1)\n                for item in player['sen_log']:\n                    ward = {\n                        'match_id': match['match_id'], 'account_id': player['account_id'],\n                        'player_slot': player['player_slot'], 'hero_id': player['hero_id'],\n                        'time': item['time'], 'x': item['x'], 'y': item['y'], 'type': 1\n                    }\n                    wards.append(ward.copy())\n        if wards:\n            self.wards = self.wards.append(pd.DataFrame(wards), ignore_index= True)\n\n    def get_players(self, match):\n        \"\"\" Get match information for each player and append to self.players dataframe. \"\"\"\n        \n        fields = ['player_slot', 'account_id', 'hero_id', 'kills', 'deaths',\n            'assists', 'last_hits', 'denies', 'gold_per_min', 'xp_per_min',\n            'gold_spent', 'hero_damage', 'hero_healing', 'tower_damage',\n            'level', 'party_size', 'item_0', 'item_1', 'item_2', 'item_3',\n            'item_4', 'item_5', 'camps_stacked', 'creeps_stacked', 'obs_placed', 'sen_placed',\n            'purchase_tpscroll', 'rune_pickups', 'roshans_killed', 'towers_killed', 'win']\n\n        players = []\n        for item in match['players']:\n            player = {'match_id': match['match_id']}\n            for field in fields:\n                if field in item:\n                    player[field] = item[field]\n                else:\n                    player[field] = np.nan\n            players.append(player.copy())\n        if players:\n            self.players = self.players.append(pd.DataFrame(players), ignore_index= True)\n\n    def get_previous_matches(self, current_match_id, player_account_id, player_previous_matches,\n                             current_match_start_time):\n        \"\"\" Append all previous matches before match_start_time from a given account id. \"\"\"\n        \n        previous_matches = []\n        fields = ['match_id', 'player_slot', 'radiant_win', 'duration', 'game_mode',\n                  'lobby_type', 'start_time', 'version', 'hero_id', 'kills', 'deaths',\n                  'assists', 'skill', 'leaver_status', 'party_size']\n\n        for item in player_previous_matches:\n            previous_match = {'current_match_id': current_match_id, 'account_id': player_account_id}\n            for field in fields:\n                previous_match[field] = item[field]\n            previous_matches.append(previous_match.copy())\n\n        df = pd.DataFrame(previous_matches)\n        # Avoid future games\n        df = df[df['start_time'] < current_match_start_time]\n        self.previous_matches = self.previous_matches.append(df, ignore_index= True)\n\n    def get_all_current_match_tables(self, match_details):\n        \"\"\" Get all tables from a current match, except the previous matches. \"\"\"\n        self.get_match(match_details)\n        self.get_players(match_details)\n        self.get_match_chat(match_details)\n        self.get_match_objectives(match_details)\n        self.get_match_advantages(match_details)\n        self.get_ability_upgrades(match_details)\n        self.get_players_events(match_details)\n        self.get_wards(match_details)","916d97f9":"def main(sleep_time = 2):\n    api = OpenDotaAPI(verbose= True)\n    data = DataPreprocessing()\n    recent_matches = filter_matches(api.get_recent_matches())\n    for recent_match in recent_matches:\n        time.sleep(sleep_time)\n        match_details = api.get_match_info(recent_match['match_id'])\n        data.get_all_current_match_tables(match_details)\n        # Get previous matches for all players with valid account ids\n        players_with_account = data.players[data.players['account_id'] > 0]\n        for i, player in players_with_account.iterrows():\n            time.sleep(sleep_time)\n            full_match_history = api.get_player_matches_history(player['account_id'])\n            if full_match_history:\n                data.get_previous_matches(match_details['match_id'], player['account_id'],\n                full_match_history, match_details['start_time'])\n    return data\n\n\ndef filter_matches(matches_list):\n    return list(filter(lambda m: _filter_function(m), matches_list))\n\ndef _filter_function(match):\n    if match['duration'] < 1000 or match['duration'] > 4200:\n        return False\n    elif match['lobby_type'] < 5 or match['lobby_type'] > 7:\n        return False\n    else:\n        return True","20e6625a":"def append_sqlite(data):\n    data.matches.to_sql(if_exists = 'append')","3a139e05":"Live your comment if you have any suggestions or find any bugs in this script.","9fbd2adf":"<h3>3. Main function<\/h3>\n\nMain logic to run the script.\n\n<b>How it works:<\/b>\n\nWe start by obtaining a list of recent public matches and filter this list by duration and lobby type as we want just ranked games with a reasonable duration. For each match we make an request to get detailed information and process it with the DataPreprocessing class, which will also append the information to Dataframes. For each valid player account id we make a new request to obtain the previous matches (match history) that happened before the current match and append that to the previous_matches dataframe.","04388b5f":"The easiest way to save the information is either by using a csv file or SQLite. I'd recommend the later since databases are more reliable and enable sql query. To append the dataframe to SQLite you just need something like:","40e70af2":"<h2>Dataset updating<\/h2>\n\nFollowing [this discussion](https:\/\/www.kaggle.com\/devinanzelmo\/dota-2-matches\/discussion\/52733) I've been working on a script to get fresh data from [OpenDota API](https:\/\/docs.opendota.com\/). My initial ideia was to create:\n\n* Matches table: current matches information\n* Players table: information about each player on that match (from match\/players array)\n* Chat table: chat messages when avaliable\n* Objectives table: game objectives (towers, roshan, first-blood) from match\/objectives array\n* Advantages table: Gold and XP advantage for each minute\n* Events table: events for each player including: kills, item purchases...\n* Abilities upgrades: abilities upgrades for each player\n* Wards table: Observer and sentry wards placed\n* Previous matches table: Previous matches for each player in current match\n\nWe can get all this information with a single request, except the previous matches, which we need a request for each account id in a current match. The API is now limited to 50k requests each month, so I can't get much information on a short period to update this dataset. I will post my code here in case someone (maybe with a premium OpenDota account) can do that. Please feel free to use any part of the code you find usefull.\n\nNote: I can't run the code here on kaggle since it blocks the request, but it's working on my local environment\n\n\n<h3>1. Class for making requests to API<\/h3>","32bdd272":"<h3>2. Data preprocessing class<\/h3>\n\nHold data for all processed matches in dataframes as mentioned in tables list. It also implements methods for processing the raw data obtained with the API class."}}