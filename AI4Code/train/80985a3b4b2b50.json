{"cell_type":{"621072a2":"code","d03612af":"code","c9d6620d":"code","f5e92efc":"code","9856a1e8":"code","6dff29df":"code","2a68c692":"code","aeb6eefa":"code","df2a2da1":"code","51a824a7":"code","e852d002":"code","2502d935":"code","5554b6ee":"code","2c5a610e":"code","d323f042":"code","42ac6dfa":"code","d7e05752":"code","2e3d42f7":"code","8234ad2f":"code","92f4008b":"code","f32e9d73":"code","5e09b517":"code","6a3b7e05":"code","a218c9b2":"code","27e77791":"code","ad1690f0":"code","ae8ce69b":"code","d61184e6":"code","6f4d6c84":"code","ce660746":"code","d440c0db":"code","dc98623b":"code","aab96e4f":"code","7e842964":"code","49e996a4":"code","c924c084":"code","0ebcf8e5":"code","ca0a487c":"code","2e6e6329":"code","3082533d":"code","4914c6fc":"code","540fe114":"code","86a6c9ba":"code","2cacc577":"code","618e4598":"code","a6746635":"markdown","0bf63c5a":"markdown","42c01265":"markdown","cf517492":"markdown","f5adb98c":"markdown","b17dc302":"markdown","fc03cf84":"markdown","2d63bdea":"markdown","b42ac898":"markdown","3c978db9":"markdown","f9f44c1d":"markdown","835700c1":"markdown","1e9a6757":"markdown","1463cc5d":"markdown","c82d96a9":"markdown","570f658c":"markdown","17835e7f":"markdown","afb35237":"markdown","c2112092":"markdown","c86483d7":"markdown","e3c8ac5f":"markdown","4f6192d1":"markdown","9349eae2":"markdown","8e692dab":"markdown","4f12f90d":"markdown","9c94a919":"markdown","4ef23a7b":"markdown"},"source":{"621072a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nplt.style.use(\"seaborn-whitegrid\") # we opened grid.\n#plt.style.available --> it shows what else we can use.\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d03612af":"df_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ndf_test.head()","c9d6620d":"test_PassengerId = df_test[\"PassengerId\"]\n","f5e92efc":"df_train.columns","9856a1e8":"df_train.head()","6dff29df":"df_train.describe()","2a68c692":"df_train.info()","aeb6eefa":"def bar_plot(variable):\n    \"\"\"\n    input: variable ex: \"Sex\"\n    output: bar plot & value count \n    \"\"\"\n    # get variable\n    var = df_train[variable]\n    # count number of categorical variable(value\/sample)\n    varvalue = var.value_counts()\n    #visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varvalue.index,varvalue,color=\"r\")\n    plt.xticks(varvalue.index)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}:\\n{}:\".format(variable,varvalue))\n    ","df2a2da1":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","51a824a7":"def plot_histogram(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(df_train[variable],bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distirbution with hist\".format(variable))\n    plt.show()\n    \n    print(\"{}:\\n{}:\".format(variable,df_train[variable].value_counts()))","e852d002":"numericVariables = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVariables:\n    plot_histogram(n)","2502d935":"# Pclass - Survived\ndf_train[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False) # I wanted to see Pclass and Survived columns together and I grouped according to Pclass. But it returns\n# groupby object so to see result we have to specify what we need to see like mean() or max() or etc.","5554b6ee":"df_train[df_train[\"Pclass\"]==1][\"Pclass\"].value_counts()","2c5a610e":"df_train[df_train[\"Pclass\"]==2][\"Pclass\"].value_counts()","d323f042":"df_train[df_train[\"Pclass\"]==3][\"Pclass\"].value_counts()","42ac6dfa":"df_train[df_train[\"Pclass\"]==3][\"Survived\"].describe()","d7e05752":"df_train[df_train[\"Pclass\"]==2][\"Survived\"].describe()","2e3d42f7":"df_train[df_train[\"Pclass\"]==1][\"Survived\"].describe()","8234ad2f":"df_train[[\"Sex\",\"Survived\"]].groupby([\"Sex\"]).mean()","92f4008b":"df_train[\"Sex\"].value_counts()","f32e9d73":"df_train[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"]).mean().sort_values(by=\"Survived\",ascending=True)","5e09b517":"df_train[(df_train[\"SibSp\"]==0) & (df_train[\"Survived\"] == 1 )][\"Sex\"].value_counts()","6a3b7e05":"df_train[(df_train[\"SibSp\"]==0) & (df_train[\"Survived\"] == 1 ) & (df_train[\"Sex\"] == \"female\")][\"Age\"].describe()","a218c9b2":"df_train[[\"Parch\",\"Survived\"]].groupby(\"Parch\").mean()","27e77791":"df_train[(df_train[\"Parch\"] == 0)][\"Sex\"].value_counts()","ad1690f0":"df_train[(df_train[\"Parch\"]==0) & (df_train[\"SibSp\"] == 0)][\"Sex\"].value_counts()","ae8ce69b":"df_train[(df_train[\"Parch\"]==0) & (df_train[\"SibSp\"] == 0)][\"Age\"].min()","d61184e6":"df_train[(df_train[\"Parch\"] == 4) | (df_train[\"Parch\"] == 6)| (df_train[\"Parch\"] == 5)]","6f4d6c84":"for i in df_train[df_train[\"Sex\"] == \"male\"][\"Name\"]:\n    if \"jack\" in i.lower():\n        print(i)","ce660746":"for i in df_train[df_train[\"Sex\"] == \"female\"][\"Name\"]:\n    if \"rose\" in i.lower():\n        print(i)","d440c0db":"def detect_outliers(df,features):\n    outlier_indexes = []\n    for c in features:\n        # 1st quartile\n        \n        q1 = np.percentile(df[c],25) # 25 for first quartile\n        \n        # 3rd quartile\n        \n        q3 = np.percentile(df[c],75) # 75 for third quartile\n        \n        \n        # IQR\n        \n        IQR = q3 - q1\n        \n        \n        #Outlier Step\n        \n        outlier_step = IQR * 1.5\n        \n        \n        \n        # detect outlier and their indexes\n        \n        outlier_col_list = df[(df[c] < q1 - outlier_step) | (df[c] > q3 + outlier_step)].index\n        \n        \n        \n        # Store indexes\n        \n        outlier_indexes.extend(outlier_col_list)\n        \n        \n        \n        \n    outlier_indexes = Counter(outlier_indexes ) # It counts the values which are in the 'outlier_indexes' and gives us how many different value it has.\n    \n    multiple_outliers = list( i for i , v in outlier_indexes.items() if v>2) \n    \n    return multiple_outliers\n        \n        ","dc98623b":"df_train.iloc[detect_outliers(df_train,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","aab96e4f":"# Drop outliers\n\ndf_train = df_train.drop(detect_outliers(df_train,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop = True)","7e842964":"df_train","49e996a4":"# Concatenating\n\ndf_train_len = len(df_train)\n\ndf_train = pd.concat([df_train,df_test],axis=0).reset_index(drop=True)","c924c084":"df_train.head()","0ebcf8e5":"df_train.columns[df_train.isnull().any()]","ca0a487c":"df_train.isnull().sum()","2e6e6329":"df_train[df_train[\"Embarked\"].isnull()]","3082533d":"df_train.boxplot(column = \"Fare\", by = \"Embarked\",figsize = (10,10))\nplt.show()","4914c6fc":"df_train[\"Embarked\"] = df_train[\"Embarked\"].fillna(\"C\")","540fe114":"df_train[df_train[\"Embarked\"].isnull()]","86a6c9ba":"df_train[df_train[\"Fare\"].isnull()]","2cacc577":"df_train[\"Fare\"] = df_train[\"Fare\"].fillna(df_train[df_train[\"Pclass\"] == 3][\"Fare\"].mean())","618e4598":"df_train[df_train[\"Fare\"].isnull()]","a6746635":"* float64(2): Fare, Age\n* int64(5): PassengerId, Survived, Pclass, SibSp, Parch\n* object(5): Name, Sex, Ticket, Cabin, Embarked","0bf63c5a":"* Parch - Survived","42c01265":"<a id = '5'><\/a>\n## Numerical variable Anlysis","cf517492":"# Introduction\n\n*They said that their ship would never sink! But we should know that nothing is certain. Probably statistics, posibility data anlysis exist because of that. And I'm here to analyze the titanic data. What we know is this accident happend in 1912 and 1502 people died out of 2224 people. Also what we will learn is inside the data of titanic.\nLets see together.*\n\n<font color = 'green'>\n\nContent:\n\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)\n4. [Outliner Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)","f5adb98c":"<a id = '6' ><\/a>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","b17dc302":"<a id = \"2\"><\/a>\n# Variable Description\n\n1. PassengerId: Unique id number of each passenger.\n1. Survived: Passengers who survived or died. (0 means died and 1 means survived)\n1. Pclass: Passenger class\n1. Name: Passengers names\n1. Sex: Male of Female\n1. Age: Age of passengers\n1. SibSp: number of siblings\/spouses\n1. Parch: number of parents\/children\n1. Ticket: Ticket number\n1. Fare: Cost of ticket\n1. Cabin: Cabin category\n1. Embarked: Port where passenger embarked (c = Cherbourg, Q = Queenstown, S=Southampton)","fc03cf84":"<a id = '10'><\/a>\n# Fill Missing Value","2d63bdea":"If you were a woman in Titanic you survive chance would be more than a man.","b42ac898":"<a id =\"1\"><\/a>\n# Load and Check Data","3c978db9":"Probably you think this is a unlucky sitation for who are in 3. class. But mean of variable lists doesn't always give logical results. Below you can see the number of people in the each classes.\n\n1.class = 216\n\n2.class = 184\n\n3.class = 491\n\n","f9f44c1d":"<a id = '9' ><\/a>\n# Find Missing Value","835700c1":"**Describe the women who survived**","1e9a6757":"* Embarked has 2 missing values\n* Fare has only 1","1463cc5d":" * Pclass - Survived\n -----------------------","c82d96a9":"Let's talk about the results above. We have 484 female and 411 of them are completely alone. Otherwise we have 194 female and 126 of them are completely alone. And I am really wondering Why is there a alone child who is 5 years old in Titanic. ","570f658c":"But to be woman is not enough to live :). If you were in Titanic as a woman and you were not one of those old lucky woman, probably you would be dead:) But if you are like 27 probably you would be survived.\n\nAs we can see If you are alone and you want to travel by a ship, do it before it's too late:) Otherwise nevermind:)","17835e7f":"If you examine the values above, you can see the only 1.class' median is 1. It means the lots of value equals to 1. Actually we didn't need to do this at this sample. Because the sample is formed by 1 and 0. So mean of the variables is enough.","afb35237":"As we can see the people who embarked from C paid between like 30-150. And we have 2 NaN values inside of the Embraked column. And those columns' fare values are both 80. So we can choose C to add to Embarked column.","c2112092":"<a id = '8'><\/a>\n# Missing Value","c86483d7":"**Both the numbers of alone and survived ones.**","e3c8ac5f":"<a id = '7'><\/a>\n# Outliner Detection","4f6192d1":"* SibSp - Survived\n---------------------------------","9349eae2":"<a id = '3' ><\/a>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Age, Fare, PassengerId","8e692dab":"* Sex - Survived\n-----------------------","4f12f90d":"Oh! Where are Jack and Rose. All we know is a lie. Could anyone please explain me this situation?","9c94a919":"<a id = '4' ><\/a>\n## Categorical Variable Anlysis","4ef23a7b":"Number of women almost equals to 2 times of men's number but like %18 of men survived and like %74 of women survived. Probably the men sacrificed themselves due to protect their wives and children."}}