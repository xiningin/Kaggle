{"cell_type":{"0f74ff81":"code","311f22d4":"code","a46a6487":"code","e1b7d2f1":"code","e86d42e0":"code","8dac4549":"code","7b1695c9":"code","28095972":"code","26785c0c":"code","7c1c8ec2":"code","ed6be696":"code","ebecf6cc":"code","a28e3f91":"code","24e0ecb5":"code","a718fcec":"code","baa1a0d1":"code","0d323750":"code","e8d335be":"code","a178f47c":"code","6939c62a":"code","c93a2cfc":"code","18680599":"code","a94bbd6a":"code","cea81346":"code","c8c6a279":"code","e6fc1728":"code","c5db461d":"code","9f568d3f":"code","eea6c1fa":"code","df51ba54":"code","3072a62b":"code","69f002d7":"code","aa549e27":"code","158515d9":"code","0a2ab09b":"code","85815865":"code","dc0f32f4":"code","6409a8df":"code","e2f8b998":"code","27d0ca54":"code","03ad7dbb":"code","c5023ec2":"code","6d353046":"code","24788eba":"code","5368049d":"code","4b7a4d18":"code","d59ad046":"code","a8addde9":"code","7967863a":"markdown","f0e86169":"markdown","8b8bef56":"markdown","e795e6db":"markdown","d04aebc0":"markdown","fe006c76":"markdown","f6ec6641":"markdown","f9bda2c8":"markdown","15e79fee":"markdown","3a1b24c8":"markdown","f7ad0b20":"markdown","c643b5dd":"markdown","154b3d73":"markdown","9f593ebd":"markdown","d3cbc5d8":"markdown","636a8dc5":"markdown","bb8e01cf":"markdown","02bba3d1":"markdown","099379a9":"markdown"},"source":{"0f74ff81":"import sys\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings('ignore')\nimport logging","311f22d4":"data = pd.read_csv('\/kaggle\/input\/zomato-bangalore-restaurants\/zomato.csv')","a46a6487":"sorted(data)","e1b7d2f1":"data.head()\n","e86d42e0":"data.isnull().sum()","8dac4549":"data.info()","7b1695c9":"data=data.rename(columns={'approx_cost(for two people)':'cost','listed_in(type)':'type','listed_in(city)':'city'})","28095972":"sorted(data)\ndata.rest_type.unique()","26785c0c":"data.dropna(inplace=True)\ndata.isnull().sum()","7c1c8ec2":"X = data.copy()\n\nle = LabelEncoder()  \nX.online_order = le.fit_transform(X.online_order)\nX.book_table = le.fit_transform(X.book_table)\nX['online_order'].unique()\nX['book_table'].unique()\nX.online_order.astype(float)\nX.book_table.astype(float)\nX.book_table","ed6be696":"X.rate.head()\nX.rate.unique()","ebecf6cc":"X = X.loc[X.rate !='NEW']\n\nX = X.loc[X.rate !='-'].reset_index(drop=True)\n\nX.rate= X.rate.astype(str)\n\nX.rate=X.rate.apply(lambda x : x.replace('\/5',''))\nX.rate=X.rate.astype(float)\nX.rate","a28e3f91":"X.cost = X.cost.astype(str)\nX.cost = X.cost.apply(lambda x : x.replace(',',''))\nX.cost = X.cost.astype(float)\nX.cost","24e0ecb5":"X.votes.astype(float)","a718fcec":"X.drop_duplicates(keep='first',inplace = True)","baa1a0d1":"X.head()","0d323750":"sns.countplot(data['city'])\nsns.countplot(data['city']).set_xticklabels(sns.countplot(data['city']).get_xticklabels(), rotation=90, ha=\"right\")\nfig = plt.gcf()\nfig.set_size_inches(10,10)\nplt.title('Location')","e8d335be":"loc_plt=pd.crosstab(X['rate'],X['city'])\nloc_plt.plot(kind='bar',stacked=True);\nfig = plt.gcf()\nfig.set_size_inches(10,10)\nplt.title('Location - Rating',fontsize=15,fontweight='bold')\nplt.ylabel('Location',fontsize=10,fontweight='bold')\nplt.xlabel('Rating',fontsize=10,fontweight='bold')\nplt.xticks(fontsize=10,fontweight='bold')\nplt.yticks(fontsize=10,fontweight='bold');\nplt.legend().remove();","a178f47c":"type_plt=pd.crosstab(X['rate'],data['type'])\ntype_plt.plot(kind='bar',stacked=True);\nfig = plt.gcf()\nfig.set_size_inches(10,10)\nplt.title('Type - Rating',fontsize=15,fontweight='bold')\nplt.ylabel('Type',fontsize=10,fontweight='bold')\nplt.xlabel('Rating',fontsize=10,fontweight='bold')\nplt.xticks(fontsize=10,fontweight='bold')\nplt.yticks(fontsize=10,fontweight='bold');","6939c62a":"sns.boxplot(x=X.online_order, y =X.rate ,data = X)","c93a2cfc":"sns.boxplot(x=X.book_table, y =X.rate ,data = X)","18680599":"sns.countplot(x='online_order',data=data)\nfig = plt.gcf()\nfig.set_size_inches(10,10)\nplt.title('Restaurants delivering online or not')\n","a94bbd6a":"sns.countplot(data['book_table'])\nfig = plt.gcf()\nfig.set_size_inches(6,6)\nplt.title('Restaurants allowing table booking or not')","cea81346":"sns.countplot(X['type'])\nsns.countplot(X['type']).set_xticklabels(sns.countplot(X['type']).get_xticklabels(), rotation=90, ha=\"right\")\nfig = plt.gcf()\nfig.set_size_inches(10,10)\nplt.title('Type of Service')","c8c6a279":"temp =X.name.value_counts()\ntemp = temp.head(10).plot(kind = 'barh',color='cyan')\ntemp.set_title('Top 10 restuarants in Bangalore')","e6fc1728":"sns.scatterplot(data = X ,x='cost', y='rate',hue='online_order',\n    sizes=(20, 200), legend=\"full\")","c5db461d":"sns.scatterplot(data = X ,x='cost', y='rate',hue='book_table',\n    sizes=(20, 200), legend=\"full\")","9f568d3f":"sns.countplot(X['cost'])\nsns.countplot(X['cost']).set_xticklabels(sns.countplot(X['cost']).get_xticklabels(), rotation=90, ha=\"right\")\nfig = plt.gcf()\nfig.set_size_inches(12,12)\nplt.title('Cost of Restuarant')","eea6c1fa":"X = X.drop(['url','address','phone','location','city','menu_item'],axis=1)","df51ba54":"X.groupby('online_order').mean()","3072a62b":"X.groupby('book_table').mean()","69f002d7":"def Encode(X):\n    for column in X.columns[~X.columns.isin(['rate', 'cost', 'votes'])]:\n        X[column] = pd.factorize(X[column])[0]\n    return X\n\nenc = Encode(X.copy())\nenc\n","aa549e27":"scaler = StandardScaler()","158515d9":"x_fit=scaler.fit_transform(enc)\n","0a2ab09b":"enc=pd.DataFrame(x_fit,columns=enc.columns)\nenc.head()","85815865":"enc.info()","dc0f32f4":"corr = enc.corr(method='kendall')\nplt.figure(figsize=(15,8))\nsns.heatmap(corr, annot=True)\nenc.columns","6409a8df":"x = enc.iloc[:,[1,2,4,5,6,7,8,9,10]]\ny = X.rate\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=42)\nx_train.head()\n","e2f8b998":"from sklearn.ensemble import ExtraTreesRegressor\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesRegressor()\nmodel.fit(x,y)","27d0ca54":"feat_importances = pd.Series(model.feature_importances_, index=x.columns)\nfeat_importances.nlargest(8).plot(kind='barh')\nplt.show()","03ad7dbb":"from sklearn.linear_model import LinearRegression\nreg=LinearRegression()\nreg.fit(x_train,y_train)\ny_pred=reg.predict(x_test)\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_pred)\n","c5023ec2":"sns.distplot(y_test-y_pred)","6d353046":"from sklearn.tree import DecisionTreeRegressor\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=0)\nDTree=DecisionTreeRegressor(min_samples_leaf=.0001)\nDTree.fit(x_train,y_train)\ny_predict1=DTree.predict(x_test)\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_predict1)","24788eba":"sns.distplot(y_test-y_predict1)","5368049d":"from sklearn.ensemble import RandomForestRegressor\nRForest=RandomForestRegressor(n_estimators=500,random_state=430,min_samples_leaf=.0001)\nRForest.fit(x_train,y_train)\ny_predict=RForest.predict(x_test)\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_predict)","4b7a4d18":"sns.distplot(y_test-y_predict)","d59ad046":"import pickle","a8addde9":"file = open('rf.pkl','wb')\npickle.dump(RForest,file)","7967863a":"<h4><i>Restuarants with around 300 to 800 rupees avergae bill(two people) are high in number<i><h4>","f0e86169":"<h4><i> Type-Rating<i><h4>\n","8b8bef56":"<h4><i> Location-Rating <i><h4>","e795e6db":"<h4><i> Restuarants allowing table booking or not<i><h4>","d04aebc0":"<h3>Decision Tree Regressor<h3>","fe006c76":"<h2> Key Findings <h2>","f6ec6641":"<h3>Splitting the dataset<h3>","f9bda2c8":"<h4>\n<i>   \n1. Linear Regressor shows approximately 23%\n    <i><h4>\n   <h4> <i>\n2. Decision Tree Regressor shows approximately 83%<i><h4>\n<h4><i>        \n3. Random Forest Regressor shows approximately 87%\n<i><h4>\n   <h4> <i>\nIn this model, we have considered various restaurants records with features like the name, average cost, locality, whether it accepts online order, can we book a table, type of restaurant.\nThis model will help business owners predict their rating on the parameters considered in our model and improve the customer experience.<i><h4>\n      <h4>  <i>\nDifferent algorithms were used but in the end the final model is selected on Random Forest Regressor which gives the highest accuracy compared to others.<i><h4>","15e79fee":"<h3>Standardizing the data<h3>","3a1b24c8":"<h4><i> Restuarants delivering online or not <i><h4>","f7ad0b20":"<h3> Results:<h3>","c643b5dd":"\n<h4> <i>\n    Cost and Rate distribution according to online ordering and table booking <i> <h4>","154b3d73":"<h4><i> Type of Service <i><h4>","9f593ebd":"<h4><i>The above box plot also helps us look into the outliers. This box plot is\nregarding how table booking availability is seen in restaurants with\nrating over 4.\n<i><h4>","d3cbc5d8":"<h4><i>The above scatterplots shows the correspondence between the\ncost, online ordering, bookings and rating of the restaurant.<h4><i>","636a8dc5":"<h3>Linear Regressor<h3>","bb8e01cf":"<h2>Data visualization <h2>","02bba3d1":"<h3>Correlation between different variables <h3>","099379a9":"<h3>Random Forest Regressor<h3>"}}