{"cell_type":{"666e4741":"code","d8806fe7":"code","c03cfe87":"code","ec8a19c1":"code","90a7d97f":"code","7466b96e":"code","cf99972f":"code","ac6a7ea5":"code","4e6f6c7f":"code","0b961d8d":"code","ec621b2f":"code","9fe701d4":"code","1036d44c":"code","8ce40d5d":"code","33c6fba3":"code","3d5b5a91":"code","ba6ea30d":"code","ab2d6828":"code","0bbe5bf4":"code","b0e08363":"code","b8dece9e":"code","879f65d8":"code","157e1c09":"code","29c97d0a":"code","170f016e":"code","3c5c57cd":"code","5e819fbd":"code","f783cc64":"code","179dd674":"code","e1ed38e9":"code","c7445cfc":"code","9bd6afbb":"code","629e8ba2":"code","18c15d65":"code","1b01868a":"code","a17d2307":"code","503b4594":"code","a68afa0d":"code","3c6913c9":"code","de7db312":"code","cd66ad94":"code","822d23db":"code","f69725df":"code","4b15662f":"code","b2df2bf1":"code","c5831d96":"code","922065b2":"code","169bf8fd":"code","aec00a1d":"code","cfeca85c":"code","4f35577a":"code","3a1b8cd8":"code","a16f21c8":"code","d91dccf6":"code","70bbf222":"code","76fffb89":"code","0ae86cbf":"code","177c3d5a":"code","a1f94edc":"code","0999147e":"code","c376a3cc":"code","fda3aa3d":"code","48f2148f":"markdown","d9bd4d4a":"markdown","3c8c30b1":"markdown","d2b426c7":"markdown","5995c150":"markdown","5440d6ba":"markdown","a6423b0d":"markdown","46f8f90f":"markdown"},"source":{"666e4741":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d8806fe7":"dt_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndt_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","c03cfe87":"print(dt_train.dtypes)\ndt_train.head(7)","ec8a19c1":"dt_test.head(7)","90a7d97f":"dt_train.describe()","7466b96e":"dt_train.info()","cf99972f":"print(dt_train.columns.values)","ac6a7ea5":"# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.set(style=\"ticks\", color_codes=True)\n","4e6f6c7f":"# concat train and test data\ndata = [dt_train, dt_test]\ndata = pd.concat(data)\ndata.shape","0b961d8d":"sns.relplot(x=\"PassengerId\", y=\"Age\",hue=\"Sex\", data=data);","ec621b2f":"sns.relplot(x=\"PassengerId\", y=\"Age\",hue=\"Sex\",kind=\"line\" , data=data);","9fe701d4":"sns.relplot(x=\"PassengerId\", y=\"Age\",hue=\"Sex\",col=\"Pclass\" , data=data);\n","1036d44c":"sns.catplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=data);","8ce40d5d":"g = sns.FacetGrid(data, col=\"Sex\")\ng.map(plt.hist, \"Survived\");","33c6fba3":"g = sns.FacetGrid(data, col=\"Pclass\")\ng.map(plt.hist, \"Survived\");","3d5b5a91":"X_train = dt_train.drop([\"PassengerId\", \"Name\"], axis=1)\nX_test = dt_test.drop([\"PassengerId\", \"Name\"], axis=1)\nX_train.head()","ba6ea30d":"from sklearn.preprocessing import OneHotEncoder\nimport numpy as np","ab2d6828":"enc = OneHotEncoder()\n","0bbe5bf4":"enc.fit(X_train[['Sex']])","b0e08363":"Sex = enc.transform(X_train[['Sex']]).toarray()\nSex\n#COLUNMS: FEMALE MALE","b8dece9e":"X_train.insert(2,\"Female\", Sex[:,0],True)","879f65d8":"X_train.insert(3,\"Male\", Sex[:,1],True)\nX_train.head()","157e1c09":"X_train.drop(\"Sex\", axis=1, inplace=True)","29c97d0a":"X_train.head()","170f016e":"em = X_train[['Embarked']]","3c5c57cd":"em.fillna('A', inplace= True)\nem.isnull().sum()","5e819fbd":"enc2 = OneHotEncoder()\nenc2.fit(em)\nEmbarked = enc2.transform(em).toarray()","f783cc64":"test = [['S'], ['C'], ['Q'], ['A']]\nenc2.transform(test).toarray()","179dd674":"X_train['A'] = Embarked[:,0]\nX_train['C'] = Embarked[:,1]\nX_train['Q'] = Embarked[:,2]\nX_train['S'] = Embarked[:,3]\n\n","e1ed38e9":"X_train.drop(\"Embarked\", axis=1, inplace=True)\nX_train.head(10)","c7445cfc":"X_train.drop(\"Cabin\", axis=1, inplace=True)\nX_train.head(10)","9bd6afbb":"Y_train = X_train['Survived']\nX_train.drop(\"Survived\", axis=1, inplace=True)","629e8ba2":"print(Y_train)\nprint(X_train)","18c15d65":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nle.fit(Y_train)\nY_train = le.transform(Y_train)","1b01868a":"Y_train.size","a17d2307":"X_train.Ticket","503b4594":"X_train.drop(\"Ticket\", axis=1, inplace=True)\nX_train.head()","a68afa0d":"X_train.info()","3c6913c9":"from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\nimp.fit(X_train[['Age','Fare']])\n","de7db312":"age = imp.transform(X_train[['Age','Fare']])","cd66ad94":"X_train.Age  =  age","822d23db":"X_train.info()","f69725df":"X_train.head()","4b15662f":"X_test.drop('Cabin', inplace=True, axis=1)\nX_test.head()","b2df2bf1":"X_test.drop('Ticket', inplace=True, axis=1)\nX_test.head()","c5831d96":"emt = X_test[['Embarked']]\nEmbarked = enc2.transform(emt).toarray()\nEmbarked","922065b2":"X_test['A'] = Embarked[:,0]\nX_test['C'] = Embarked[:,1]\nX_test['Q'] = Embarked[:,2]\nX_test['S'] = Embarked[:,3]\nX_test.drop(\"Embarked\", axis=1, inplace=True)\nX_test.head(10)","169bf8fd":"Sex = enc.transform(X_test[['Sex']]).toarray()\nX_test.insert(2,\"Female\", Sex[:,0],True)\nX_test.insert(3,\"Male\", Sex[:,1],True)\nX_test.drop(\"Sex\", axis=1, inplace=True)\n","aec00a1d":"X_test.info()","cfeca85c":"X_train.to_csv('X_df_train.csv')\nX_test.to_csv('X_df_test.csv')","4f35577a":"Y_train = Y_train.reshape((891,1))","3a1b8cd8":"X_train.shape, Y_train.shape, X_test.shape","a16f21c8":"X_train = pd.read_csv('\/kaggle\/working\/X_df_train.csv')\nX_test = pd.read_csv('\/kaggle\/working\/X_df_test.csv')","d91dccf6":"X_test.Age.fillna(0, inplace= True)","70bbf222":"X_test.Fare.fillna(0, inplace= True)","76fffb89":"from sklearn.linear_model import LogisticRegression\nlo_reg = LogisticRegression()\nlo_reg.fit(X_train, Y_train)\nY_pred = lo_reg.predict(X_test)\nacc_log = round(lo_reg.score(X_train, Y_train) * 100, 2)\nacc_log","0ae86cbf":"from joblib import dump\ndump(lo_reg, 'flo_reg.joblib') ","177c3d5a":"from sklearn.ensemble import RandomForestClassifier\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","a1f94edc":"dump(random_forest, 'random_forest.joblib') ","0999147e":"from sklearn.svm import SVC, LinearSVC\nsvc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc","c376a3cc":"dump(svc, 'svc.joblib') ","fda3aa3d":"# we can use another algorithme\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","48f2148f":"#preparing the data for ML algorithm\n1. deleting unitil colomns\n2. remplacing missing values\n3. encoding categorical data\n4. labeling the data as Ml parameters","d9bd4d4a":"# Model, predict and solve","3c8c30b1":"* object values:\n**name**, **Sex**, Ticket, Cabin, **Embarcked**\n* missed values :\nAge, Cabin, **Embarcked**","d2b426c7":"2. Random Forest ","5995c150":"3. Support Vector Machines","5440d6ba":"* Categorical data: Survived, Sex, and Embarked. Ordinal: Pclass.\n* Continous: Age, Fare. Discrete: SibSp, Parch.","a6423b0d":"1. Logistic Regression","46f8f90f":"# the data is prepared to be trained through ML algo\n"}}