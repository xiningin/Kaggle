{"cell_type":{"76d17363":"code","788b7715":"code","8b5384e2":"code","5b060043":"code","93c01040":"code","b024da88":"code","31f0d563":"code","c453b9b8":"code","1d3e9dbd":"code","4aecc4a4":"code","da5035db":"code","9d16344a":"code","638982ee":"code","b2781495":"code","b07022dd":"code","a4727aa4":"code","bb0028b3":"code","d83dd67a":"markdown","ce29f977":"markdown","2dd437a7":"markdown","a78b2521":"markdown","dd4b08e2":"markdown","499d8f59":"markdown"},"source":{"76d17363":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","788b7715":"#reading the data \ntrain_data = pd.read_csv(\"\/kaggle\/input\/train.csv\")","8b5384e2":"train_data.head(5)","5b060043":"train_data.isnull().sum()","93c01040":"total_data = train_data.count()","b024da88":"print(total_data)","31f0d563":"train_data = train_data.dropna()","c453b9b8":"train_data.head()","1d3e9dbd":"#lets put the image name , in the name , id in the Id and classId in the classId\nnew_train_df = pd.DataFrame(columns=['ImageId','hasMask', 'ClassId','EncodedPixels'])\nnew_train_df['ImageId'] = train_data['ImageId_ClassId'].apply(lambda x: x.split('_')[0])\nnew_train_df['ClassId'] = train_data['ImageId_ClassId'].apply(lambda x: x.split('_')[1])\nnew_train_df['hasMask'] = ~ train_data['EncodedPixels'].isna()\nnew_train_df['EncodedPixels'] = train_data['EncodedPixels'] \n","4aecc4a4":"mask_count_df = new_train_df.groupby('ImageId').agg(np.sum).reset_index()\nmask_count_df.sort_values('hasMask', ascending=False, inplace=True)\nprint(mask_count_df.shape)\nmask_count_df.head()","da5035db":"new_train_df.head()","9d16344a":"ax = sns.catplot(x='ClassId',kind='count',data=new_train_df,orient=\"h\")\nax.fig.autofmt_xdate()","638982ee":"sub_df = pd.read_csv('..\/input\/sample_submission.csv')\nsub_df['ImageId'] = sub_df['ImageId_ClassId'].apply(lambda x: x.split('_')[0])\ntest_imgs = pd.DataFrame(sub_df['ImageId'].unique(), columns=['ImageId'])","b2781495":"test_imgs.head()","b07022dd":"def mask2rle(img):\n    '''\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels= img.T.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)\n\ndef rle2mask(mask_rle, shape=(1600,256)):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (width,height) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape).T","a4727aa4":"def build_masks(rles, input_shape):\n    depth = len(rles)\n    height, width = input_shape\n    masks = np.zeros((height, width, depth))\n    \n    for i, rle in enumerate(rles):\n        if type(rle) is str:\n            masks[:, :, i] = rle2mask(rle, (width, height))\n    \n    return masks\n\ndef build_rles(masks):\n    width, height, depth = masks.shape\n    \n    rles = [mask2rle(masks[:, :, i])\n            for i in range(depth)]\n    \n    return rles","bb0028b3":"# sample_filename = 'db4867ee8.jpg'\n# sample_image_df = new_train_df[new_train_df['ImageId'] == sample_filename]\n# sample_path = f\"..\/input\/train_images\/{sample_image_df['ImageId'].iloc[0]}\"\n# sample_img = cv2.imread(sample_path)\n# sample_rles = sample_image_df['EncodedPixels'].values\n# sample_masks = build_masks(sample_rles, input_shape=(256, 1600))\n\n# fig, axs = plt.subplots(5, figsize=(12, 12))\n# axs[0].imshow(sample_img)\n# axs[0].axis('off')\n\n# for i in range(4):\n#     axs[i+1].imshow(sample_masks[:, :, i])\n#     axs[i+1].axis('off')\n","d83dd67a":"Let's have a look at our test data set ","ce29f977":"Code Taken from the kernel https:\/\/www.kaggle.com\/xhlulu\/severstal-simple-keras-u-net-boilerplate ","2dd437a7":"**Let's do some visualization to check which class has the most images **","a78b2521":"We can see that the ImageId and the ClassId are in the same dataframe column , we need to separate out them  so that we can see some more insights of data.","dd4b08e2":"Using Utility Functions","499d8f59":"Credit goes to the https:\/\/www.kaggle.com\/paulorzp\/rle-functions-run-lenght-encode-decode"}}