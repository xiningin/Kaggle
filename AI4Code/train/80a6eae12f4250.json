{"cell_type":{"987fc173":"code","03f6ec90":"code","f0d6e630":"code","61be1558":"code","3e5e586d":"code","cd5c9730":"code","c0c32401":"code","3b375f4a":"code","d3f9bc6c":"code","c6d2bcaf":"code","4ea8bfe5":"code","67fce42d":"code","5680feb9":"code","aa2f23b8":"code","96bb8eb6":"code","c130204f":"code","40a29776":"code","01a07733":"code","5da3628a":"code","29057cf9":"code","be135e2d":"code","0a2528eb":"code","79197982":"code","ed0858aa":"code","bcecc02f":"code","ba8047cd":"code","74eeb273":"code","7d7da4cc":"code","cb77c616":"code","baea1174":"code","3f983316":"code","49b266ba":"code","7377aeda":"code","90ada555":"code","895eceab":"code","7e03ee97":"code","492d7270":"code","1d3b4761":"code","de8c37e4":"code","44ae6afd":"code","dba4a762":"code","30c11c44":"code","08161412":"code","3abf92c6":"code","e03126c3":"markdown","303ce83c":"markdown","61fdf8eb":"markdown","ea277fae":"markdown","74559cfc":"markdown","60a879c2":"markdown","e4900dc4":"markdown","df1bfecb":"markdown","91d59e41":"markdown","94146c9c":"markdown","672782ca":"markdown"},"source":{"987fc173":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import LabelEncoder\nimport seaborn as sns\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","03f6ec90":"!pip install librosa","f0d6e630":"import librosa\nimport IPython.display as ipd\nimport fnmatch\n\n\nmusic=('..\/input\/trainses\/')\n\nerkekses=('..\/input\/erkeksesleri\/')","61be1558":"musictest=('..\/input\/kadntestses\/')\n\nx,sr=librosa.load(musictest+\"artk baka bir zamana.wav\")\nipd.Audio(x,rate=sr)","3e5e586d":"import matplotlib.pyplot as plt\nimport librosa.display\nplt.figure(figsize=(10,2))\nlibrosa.display.waveplot(x,sr=sr)","cd5c9730":"X=librosa.stft(x) #stft -> Short-time Fourier transform\nXdb=librosa.amplitude_to_db(abs(X)) #Genlikten Desibel de\u011ferine\nplt.figure(figsize=(20,8))\nlibrosa.display.specshow(Xdb,sr=sr,x_axis=\"time\",y_axis=\"hz\")\nplt.colorbar()","c0c32401":"mfkk=librosa.feature.mfcc(x,sr=sr)\nprint(mfkk.shape)\n  \nplt.figure(figsize=(15,6))\nlibrosa.display.specshow(mfkk,x_axis=\"s\")\nplt.colorbar()","3b375f4a":"zero_crossing=librosa.zero_crossings(x)\nprint(sum(zero_crossing)) #Toplam s\u0131f\u0131r ge\u00e7i\u015fi say\u0131s\u0131\n  \nplt.plot(x[5000:5100])\nplt.grid()","d3f9bc6c":"spec_cent=librosa.feature.spectral_centroid(x)\nprint(spec_cent.shape)\nplt.semilogy(spec_cent.T)\nplt.ylabel(\"Hz\")","c6d2bcaf":"spec_roll=librosa.feature.spectral_rolloff(x,sr=sr)\nprint(spec_roll.shape)\n\nplt.semilogy(spec_roll.T,\"r\")\nplt.ylabel(\"Hz\")","4ea8bfe5":"chroma=librosa.feature.chroma_stft(x,sr=sr)\nprint(chroma.shape)\nlibrosa.display.specshow(chroma,y_axis=\"chroma\",x_axis=\"time\")\nplt.colorbar()","67fce42d":"music_folders=[music]\ntest_folders=[musictest]\nerkek_folders=[erkekses]","5680feb9":"kolonlar=[\"mfkk\"+str(i) for i in range(20)]\nfor isim in [\"zero\",\"centroid\",\"rolloff\",\"chroma\",\"t\u00fcr\",\"dosya\"]:\n    kolonlar.append(isim)\n    \n\"\"\"\u00c7\u0131kt\u0131: ['mfkk0', 'mfkk1', 'mfkk2', 'mfkk3', 'mfkk4', 'mfkk5', 'mfkk6',\n'mfkk7', 'mfkk8', 'mfkk9', 'mfkk10', 'mfkk11', 'mfkk12', 'mfkk13',\n'mfkk14', 'mfkk15', 'mfkk16', 'mfkk17', 'mfkk18', 'mfkk19', 'zero',\n'centroid', 'rolloff', 'chroma', 't\u00fcr', 'dosya']\"\"\"","aa2f23b8":"t\u00fcr_liste=[\"18 Yandaym.wav\",\"19 yandaym.wav\", \"20 yandaym.wav\",\"21 yandaym.wav\",\"22 yandaym.wav\", \"23 yandaym.wav\"]\nerkek_liste=[\"Burak.wav\",\"Yeni proje.wav\", \"burin.wav\",\"erman.wav\",\"isa.wav\", \"mehmet.wav\"]\ntest_liste=[\"artk baka bir zamana.wav\"]","96bb8eb6":"def ses_df(music_folders,kolonlar,t\u00fcr_liste):\n    liste=[]\n    adim=0\n    for folder in music_folders:\n        for t\u00fcr in t\u00fcr_liste:\n            dosyalar=fnmatch.filter(os.listdir(folder),t\u00fcr)\n            label=t\u00fcr.split(\"*\")[0]\n            for dosya in dosyalar:\n                x,sr=librosa.load(folder+dosya,duration=5,res_type='kaiser_fast')\n                liste.append([np.mean(x) for x in librosa.feature.mfcc(x,sr=sr)])\n                liste[adim].append(sum(librosa.zero_crossings(x)))\n                liste[adim].append(np.mean(librosa.feature.spectral_centroid(x)))\n                liste[adim].append(np.mean(librosa.feature.spectral_rolloff(x,sr=sr)))\n                liste[adim].append(np.mean(librosa.feature.chroma_stft(x,sr=sr)))\n                liste[adim].append(label)\n                liste[adim].append(dosya)\n                adim+=1\n    return pd.DataFrame(liste,columns=kolonlar)","c130204f":"def test_df(musictest_folders,kolonlar,test_liste):\n    liste=[]\n    adim=0\n    for folder in musictest_folders:\n        for t\u00fcr in test_liste:\n            dosyalar=fnmatch.filter(os.listdir(folder),t\u00fcr)\n            label=t\u00fcr.split(\"*\")[0]\n            for dosya in dosyalar:\n                x,sr=librosa.load(folder+dosya,duration=5,res_type='kaiser_fast')\n                liste.append([np.mean(x) for x in librosa.feature.mfcc(x,sr=sr)])\n                liste[adim].append(sum(librosa.zero_crossings(x)))\n                liste[adim].append(np.mean(librosa.feature.spectral_centroid(x)))\n                liste[adim].append(np.mean(librosa.feature.spectral_rolloff(x,sr=sr)))\n                liste[adim].append(np.mean(librosa.feature.chroma_stft(x,sr=sr)))\n                liste[adim].append(label)\n                liste[adim].append(dosya)\n                adim+=1\n    return pd.DataFrame(liste,columns=kolonlar)","40a29776":"def erkek_df(erkek_folders,kolonlar,erkek_liste):\n    liste=[]\n    adim=0\n    for folder in erkek_folders:\n        for t\u00fcr in erkek_liste:\n            dosyalar=fnmatch.filter(os.listdir(folder),t\u00fcr)\n            label=t\u00fcr.split(\"*\")[0]\n            for dosya in dosyalar:\n                x,sr=librosa.load(folder+dosya,duration=5,res_type='kaiser_fast')\n                liste.append([np.mean(x) for x in librosa.feature.mfcc(x,sr=sr)])\n                liste[adim].append(sum(librosa.zero_crossings(x)))\n                liste[adim].append(np.mean(librosa.feature.spectral_centroid(x)))\n                liste[adim].append(np.mean(librosa.feature.spectral_rolloff(x,sr=sr)))\n                liste[adim].append(np.mean(librosa.feature.chroma_stft(x,sr=sr)))\n                liste[adim].append(label)\n                liste[adim].append(dosya)\n                adim+=1\n    return pd.DataFrame(liste,columns=kolonlar)","01a07733":"music_df=ses_df(music_folders,kolonlar,t\u00fcr_liste)\n\nprint(music_df.shape)\nmusic_df.head()","5da3628a":"test_df=test_df(test_folders,kolonlar,test_liste)\n\nprint(test_df.shape)\ntest_df.head()","29057cf9":"erkek_df=erkek_df(erkek_folders,kolonlar,erkek_liste)\n\nprint(erkek_df.shape)\nerkek_df.head()","be135e2d":"test_df[\"t\u00fcr\"].value_counts()\n\"\"\"  normal      351\n     murmur      129\n     artifact     40\n     Name: t\u00fcr, dtype: int64 \"\"\"","0a2528eb":"music_df","79197982":"cinsiyet=[]\ncinsiyet.append('kad\u0131n')\ncinsiyet.append('kad\u0131n')\ncinsiyet.append('kad\u0131n')\ncinsiyet.append('kad\u0131n')\ncinsiyet.append('kad\u0131n')\ncinsiyet.append('kad\u0131n')\nmusic_df['label'] = cinsiyet\nmusic_df","ed0858aa":"cinsiyet=[]\ncinsiyet.append('erkek')\ncinsiyet.append('erkek')\ncinsiyet.append('erkek')\ncinsiyet.append('erkek')\ncinsiyet.append('erkek')\ncinsiyet.append('erkek')\nerkek_df['label'] = cinsiyet\nerkek_df","bcecc02f":"test_df","ba8047cd":"label_encode = LabelEncoder()","74eeb273":"music_df","7d7da4cc":"train_df=pd.concat([music_df,erkek_df])\ntrain_df","cb77c616":"cormap = train_df.corr()\nfig, ax = plt.subplots(figsize=(20,20))\nsns.heatmap(cormap, annot = True)","baea1174":"train_df_X=train_df.iloc[:,0:24]\ntrain_df_y = train_df['label']\ntrain_df_X","3f983316":"train_df_y","49b266ba":"# Scale the data to be between -1 and 1\n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ntrain_df_X = pd.DataFrame(scaler.fit_transform(train_df_X), columns=train_df_X.columns)\ntrain_df_X.head()","7377aeda":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\nX_train, X_test, y_train, y_test = train_test_split(train_df_X, train_df_y)","90ada555":"\nfrom sklearn.svm import SVC\nfrom sklearn import metrics\n\nSVC().get_params()   # Hyperparamters of SVC","895eceab":"# Now let's make grid for tunning the hyperparametes\n\nfrom sklearn.model_selection import GridSearchCV\n\nC = np.arange(0.1, 2, 0.1)\nkernel = ['linear', 'rbf', 'poly']\ngamma = [0.01,0.02,0.03,0.04,0.05]\n\n\ngrid = {'C': C,\n        'kernel': kernel,\n        'gamma': gamma }","7e03ee97":"# Fitting SVM classifiers with hyperparameter tunned using grid search(cross validation with 10 folds)\n\nfrom sklearn.svm import SVC\nfrom sklearn import metrics\n\nsvc_grid = GridSearchCV(estimator = SVC(), param_grid = grid, cv = 4)\nsvc_grid.fit(X_train, y_train)","492d7270":"svc_grid.best_params_  # Best pairs of hyperparameters provided by grid search","1d3b4761":"# Prediction\n\ny_pred = svc_grid.best_estimator_.predict(X_test)\n\npred_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\npred_df","de8c37e4":"test_df=test_df.iloc[:,0:24]\ntest_df","44ae6afd":"import pickle","dba4a762":"filename = 'finalized_model.sav'\npickle.dump(svc_grid, open(filename, 'wb'))","30c11c44":"loaded_model = pickle.load(open(filename, 'rb'))\nresult = loaded_model.score(X_test, y_test)\nprint(result)","08161412":"def predictionOutput(x):\n    prediction = loaded_model.predict(x)\n    if(prediction[0] == 'kad\u0131n'):\n        print(\"Bu kad\u0131n\")\n    elif (prediction[0] == 'erkek'):\n        print(\"Bu erkek\")\n    else: \n        print(\"bilinmiyor\")","3abf92c6":"predictionOutput(test_df)","e03126c3":"# Perform Encoding by coverting 'label' feature into numerical form\ntrain_df['label'] = label_encode.fit_transform(train_df['label'])","303ce83c":"x \u2192 ses zaman serisi\nsr \u2192ses frekans\u0131(Hz)","61fdf8eb":"y_pred = svc_grid.best_estimator_.predict(test_df)\npred_df = pd.DataFrame({ 'Predicted': y_pred})\npred_df","ea277fae":"Spectral Centroid\nSpektrumun k\u00fctle merkezinin nerede oldu\u011funu g\u00f6sterir.","74559cfc":"cinsiyet=[]\ncinsiyet.append('')\ntest_df['label'] = cinsiyet\ntest_df","60a879c2":"Spectral Rolloff\nSinyal \u015feklinin \u00f6l\u00e7\u00fcs\u00fc. Toplam spektral enerjisinin belli bir y\u00fczdesini temsil eder.","e4900dc4":"Spektrogram\nSpektrogram, belirli bir dalga formunda bulunan \u00e7e\u015fitli frekanslarda bir sinyalin sinyal g\u00fcc\u00fcn\u00fc veya y\u00fcksekli\u011fini temsil eden g\u00f6rseldir. Ayn\u0131 zamanda enerji seviyelerini zaman i\u00e7inde nas\u0131l de\u011fi\u015fti\u011fini de g\u00f6sterir.\nShort Time Fourier Transform: Ses sinyali i\u015flemek i\u00e7in g\u00fc\u00e7l\u00fc bir ara\u00e7t\u0131r. Sinyaller i\u00e7in zamana ve frekansa g\u00f6re karma\u015f\u0131k genli\u011fi belirten zaman frekans\u0131 da\u011f\u0131l\u0131m\u0131n\u0131 tan\u0131mlar.","df1bfecb":"Zero Crossing Rate\nZero crossing rate bir sinyalin s\u0131f\u0131r \u00e7izgisinden ge\u00e7i\u015fi yani i\u015faret de\u011fi\u015fiminin oran\u0131d\u0131r.","91d59e41":"sesi g\u00f6r\u00fcnt\u00fcl\u00fcyoruz.","94146c9c":"Chroma Frekans\u0131\nSpektrum m\u00fczikal oktav\u0131n\u0131n 12 farkl\u0131 yar\u0131 tonunu(chroma) temsil eden 12 par\u00e7an\u0131n belirtildi\u011fi ses i\u00e7in g\u00fc\u00e7l\u00fc bir sunumudur.","672782ca":"Feature Extraction \u2014 \u00d6znitelik \u00c7\u0131kar\u0131m\u0131\nMel-Frekans Kepstral Katsay\u0131lar\u0131 (Mel-Frequency Cepstral Coefficients)\nMel frekans \u00f6l\u00e7e\u011fi, insan kula\u011f\u0131n\u0131n ses frekanslar\u0131ndaki de\u011fi\u015fimi alg\u0131lay\u0131\u015f\u0131n\u0131 g\u00f6steren bir \u00f6l\u00e7ektir. MFCC(Mel-Frequency Cepstral Coefficients), ses sinyalinin k\u0131sa zamanl\u0131 g\u00fc\u00e7 spektrumunun Mel \u00f6l\u00e7e\u011fi \u00fczerindeki ifadesidir.\nFrekanstan Mel \u00f6l\u00e7e\u011fine d\u00f6n\u00fc\u015f\u00fcm form\u00fcl\u00fc;\nM \u2550 1125 \u00d7 ln(1+(f\u00f7700))\nM \u2192 Mel \u00f6l\u00e7e\u011fi\nf \u2192 Frekans(Hz)"}}