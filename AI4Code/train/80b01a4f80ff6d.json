{"cell_type":{"9429594b":"code","055f64aa":"code","61ea42cd":"code","e0135160":"code","6780af86":"code","973bbfd7":"code","0826b217":"code","09c4dcb7":"code","58fb51d9":"code","0c890a7c":"code","6ccd3da0":"code","e4e7b81c":"code","5e572485":"code","9a3f04e7":"code","1eb94f21":"code","fe6f75f1":"code","a3465c9b":"code","5be7e48d":"code","4fd53f6d":"code","dcb51b8f":"code","7b804cee":"code","a1c6ce5d":"code","2e9ee52a":"code","0f6338ee":"code","50e6c7d9":"code","58eb875c":"code","bcf016a4":"code","f0adbad6":"code","b2c440b7":"code","ad447b2f":"code","71856370":"markdown","e1401b37":"markdown","ecc24bff":"markdown","11665517":"markdown","c7aaa75e":"markdown","0b33a28a":"markdown","8e122c0f":"markdown","b6dea7e5":"markdown","ca08fd9b":"markdown","9e80301c":"markdown","d10098c4":"markdown","b8b02f79":"markdown","173e4d52":"markdown","a485e996":"markdown","81772bdb":"markdown","bf478d69":"markdown","6a929b6d":"markdown","6ac3d865":"markdown","20728234":"markdown","4f3a3a82":"markdown","b3768404":"markdown","32dd6300":"markdown","2330b452":"markdown","48f903ea":"markdown","6d1ec9ca":"markdown","5e791924":"markdown","90258df2":"markdown","5d4810be":"markdown","60f6cae5":"markdown","6a2462c8":"markdown","ea94e93c":"markdown","3540b765":"markdown"},"source":{"9429594b":"import cv2\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix","055f64aa":"malign_data = \"..\/input\/skin-cancer-malignant-vs-benign\/train\/malignant\"\nmalign_data2 = \"..\/input\/skin-cancer-malignant-vs-benign\/test\/malignant\"\nbenign_data = \"..\/input\/skin-cancer-malignant-vs-benign\/train\/benign\"\nbenign_data2 = \"..\/input\/skin-cancer-malignant-vs-benign\/test\/benign\"\n\ndf = pd.DataFrame() #hold the image arrays\ny_values = []  # hold the image labels\n\ncount = 0\n\n# I save all images to dataframe\n\nfor img_name in os.listdir(malign_data):\n    img = cv2.imread(malign_data+\"\/\"+img_name)\n    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    img_one_column_arr = img_gray.reshape((img.shape[0]*img.shape[1]),1)  # (224*224, 1) = (50176, 1)\n    df[str(count)] = img_one_column_arr[:,0]\n    y_values.append(1) # 1 == Malign\n    count += 1\n\nfor img_name in os.listdir(malign_data2):\n    img = cv2.imread(malign_data2+\"\/\"+img_name)\n    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    img_one_column_arr = img_gray.reshape((img.shape[0]*img.shape[1]),1)  # (224*224, 1) = (50176, 1)\n    df[str(count)] = img_one_column_arr[:,0]\n    y_values.append(1) # 1 == Malign\n    count += 1\n\n\nfor img_name in os.listdir(benign_data):\n    img = cv2.imread(benign_data+\"\/\"+img_name)\n    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    img_one_column_arr = img_gray.reshape((img.shape[0]*img.shape[1]), 1)\n    df[str(count)] = img_one_column_arr[:,0]\n    y_values.append(0) # 0 = Benign\n    count += 1\n\nfor img_name in os.listdir(benign_data2):\n    img = cv2.imread(benign_data2+\"\/\"+img_name)\n    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    img_one_column_arr = img_gray.reshape((img.shape[0]*img.shape[1]), 1)\n    df[str(count)] = img_one_column_arr[:,0]\n    y_values.append(0) # 0 = Benign\n    count += 1\n","61ea42cd":"x_data = df.T","e0135160":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x_data, y_values, test_size=0.3, random_state=42)","6780af86":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(x_train, y_train)","973bbfd7":"score_knn = knn.score(x_test, y_test)\nprint(\"KNN Accuracy : \",score_knn)","0826b217":"y_prediction_knn = knn.predict(x_test)\n\nc_matrix_knn = confusion_matrix(y_test, y_prediction_knn)","09c4dcb7":"f, ax = plt.subplots(figsize=(10,6))\nax = sns.heatmap(c_matrix_knn, annot=True, linewidths=0.5, linecolor=\"red\", fmt=\".0f\", ax=ax)\nplt.xlabel(\"y_prediction\")\nplt.ylabel(\"y_true\")\nplt.show()","58fb51d9":"from sklearn.svm import SVC\nsvm = SVC(random_state=42)\nsvm.fit(x_train, y_train)","0c890a7c":"y_prediction_svm = svm.predict(x_test)\n\ncm_svm = confusion_matrix(y_test, y_prediction_svm)","6ccd3da0":"score_svm = svm.score(x_test,y_test)\nprint(\"SVM Accuracy : \",score_svm)","e4e7b81c":"f, ax = plt.subplots(figsize = (10,6))\nax = sns.heatmap(cm_svm, annot=True, linewidth=0.5, linecolor=\"red\", fmt=\".0f\", ax=ax)\nplt.xlabel(\"y_prediction\")\nplt.ylabel(\"y_true\")\nplt.show()","5e572485":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train, y_train)","9a3f04e7":"y_prediction_nb = nb.predict(x_test)\n\ncm_nb = confusion_matrix(y_test, y_prediction_nb)","1eb94f21":"score_nb = nb.score(x_test,y_test)\nprint(\"Naive Bayes Accuracy : \", score_nb)","fe6f75f1":"f, ax = plt.subplots(figsize=(10,6))\nax = sns.heatmap(cm_nb, annot=True, linewidth=0.5, linecolor=\"red\", fmt=\".0f\", ax=ax)\nplt.xlabel(\"y_prediction\")\nplt.ylabel(\"y_true\")\nplt.show()","a3465c9b":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(x_train, y_train)","5be7e48d":"score_dt = dt.score(x_test, y_test)\nprint(\"Decision Tree Accuracy : \", score_dt)","4fd53f6d":"y_prediction_dt = dt.predict(x_test)\n\ncm_dt = confusion_matrix(y_test, y_prediction_dt)","dcb51b8f":"f, ax = plt.subplots(figsize=(10,6))\nax = sns.heatmap(cm_dt, annot=True, linewidth=0.5, linecolor=\"red\", fmt=\".0f\", ax=ax)\nplt.xlabel(\"y_prediction\")\nplt.ylabel(\"y_true\")\nplt.show()","7b804cee":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=100, random_state=42)\nrf.fit(x_train, y_train)","a1c6ce5d":"score_rf = rf.score(x_test, y_test)\nprint(\"Random Forest Accuracy : \", score_rf)","2e9ee52a":"y_prediction_rf = rf.predict(x_test)\n\ncm_rf = confusion_matrix(y_test, y_prediction_rf)","0f6338ee":"f, ax = plt.subplots(figsize=(10,6))\nax = sns.heatmap(cm_rf, annot=True, linewidth=0.5, linecolor=\"red\", fmt=\".0f\", ax=ax)\nplt.xlabel(\"y_prediction\")\nplt.ylabel(\"y_true\")\nplt.show()","50e6c7d9":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train, y_train)","58eb875c":"score_lr = lr.score(x_test, y_test)\nprint(\"Accuracy Logistic Regression : \", score_lr)","bcf016a4":"y_prediction_lr = lr.predict(x_test)\n\ncm_lr = confusion_matrix(y_test, y_prediction_dt)","f0adbad6":"f, ax = plt.subplots(figsize=(10,6))\nax = sns.heatmap(cm_lr, annot=True, linewidth=0.5, linecolor=\"red\", fmt=\".0f\", ax=ax)\nplt.xlabel(\"y_prediction\")\nplt.ylabel(\"y_true\")\nplt.show()","b2c440b7":"print(\"KNN Accuracy : \", score_knn)\nprint(\"SVM Accuracy : \", score_svm)\nprint(\"Naive Bayes Accuracy : \", score_nb)\nprint(\"Decision Tree Accuracy : \", score_dt)\nprint(\"Random Forest Accuracy : \", score_rf)\nprint(\"Logistic Regression Accuracy : \", score_lr)","ad447b2f":"accuracy = [score_knn, score_svm, score_nb, score_dt, score_rf, score_lr]\nacc_name = [\"KNN Accuracy\", \"SVM Accuracy\", \"Naive Bayes Accuracy\",\n           \"Decision Tree Accuracy\", \"Random Forest Accuracy\", \"Logistic Regression Accuracy\"]\nf, ax = plt.subplots(figsize=(10,6))\nax = plt.bar(acc_name, accuracy, width=0.6, color=\"#FF5733\", edgecolor=\"black\")\nplt.grid(True)\nplt.axis(ymin=0.5, ymax=1)\nplt.tick_params(axis='x', labelrotation=45)\nplt.ylabel(\"Accuracy\")\nplt.show()","71856370":"# Support Vector Machine (SVM)","e1401b37":"* create predicted values and create new confusion matrix","ecc24bff":"* import RandomForest and fit the data","11665517":"* show the results in heat map","c7aaa75e":"* I predict the test data and I create a confusion matrix","0b33a28a":"* We separating data to train and test","8e122c0f":"* Creat a predicted values and creat new confusion matrix","b6dea7e5":"* Show Naive Bayes accuracy","ca08fd9b":"* import the Naive Bayes and fit the data","9e80301c":"* show Logistic Regression accuracy","d10098c4":"* show the SVM accuracy","b8b02f79":"* import Logistic Regression and fit the data","173e4d52":"# Logistic Regression","a485e996":"* show Random Forest accuracy","81772bdb":"* We completed the model creating operations \n* Lets see all accuracy values","bf478d69":"* creating predicted values and creat a new confusion matrix","6a929b6d":"* And We see the best accuracy are Random Forest and SVM\n","6ac3d865":"* create predicted values an create new confusion matrics","20728234":"* create predicted values and create new confusion matrix","4f3a3a82":"* \u0130mport SVM and fit the data","b3768404":"* and show the results in heat map","32dd6300":"# Decision Tree Classification","2330b452":"* show results in heat map","48f903ea":"# Key Nearest Neighbours (KNN)","6d1ec9ca":"* show the Decision Tree accuracy","5e791924":"* import decision tree and fit the data","90258df2":"* And I show the results in heat map","5d4810be":"# Random Forest Classification","60f6cae5":"# Naive Bayes","6a2462c8":"* Show Model Accuracy","ea94e93c":"* Import KNN and fit the data","3540b765":"* and show the results in heat map"}}