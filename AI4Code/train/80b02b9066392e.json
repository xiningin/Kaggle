{"cell_type":{"fcfa9b3d":"code","7db4fd7f":"code","aa5a5ccd":"code","cacfc000":"code","c8387131":"code","3116a16f":"code","b77484d7":"code","aa2b7af2":"code","717a1581":"code","76ec094e":"code","45ac1408":"code","436ba07e":"code","98f953f8":"code","fe0606f1":"code","5cac91e6":"code","61cc0eaa":"code","0bdc4381":"code","b9ec87ff":"code","bd397570":"code","5abede02":"code","4b3e4bb3":"code","f3c211a0":"code","b1870fa0":"code","0603eb80":"code","7c2d223a":"code","a23a17f8":"code","a60d5f79":"code","af4bc174":"code","7d42786a":"code","3d39a0ad":"code","a0b68718":"code","2d1f4b04":"code","e64e2ff6":"code","838f6d0d":"code","40cbf0fa":"code","8091c00e":"code","bb343779":"code","f96fd797":"code","dc78bb23":"code","6f988d7c":"code","c319afce":"code","f7b011e7":"code","381eaeab":"code","b03acfe3":"code","af96a29c":"code","c56df2a2":"code","828a11e0":"code","bd644ee3":"code","62abbde2":"code","a685b9d3":"code","3bfb58a0":"code","2dd98171":"code","5e8a719a":"code","bca46872":"code","7430e96a":"code","fa11e2f5":"code","1c3de506":"code","d3bfcafc":"code","504622f6":"code","5b40c9ee":"code","bc0bf687":"code","142ab5f8":"code","b10b76f8":"code","10ea51cb":"code","50020c3c":"code","9fca14e5":"code","a32c10e3":"code","cadc0bcd":"code","1f5159cc":"code","9972894f":"code","66d2b11b":"code","e44c778b":"code","4124b092":"code","85dd482c":"code","84413355":"code","7b894092":"code","80290dec":"code","69e848cd":"code","8bbd1b41":"code","b1a20238":"code","f5ccce06":"code","84434059":"code","492fad3a":"code","39215212":"code","bc13e235":"code","ce9c1c06":"code","659df0b6":"code","b97a1cfe":"code","cc9f27d0":"code","790f1ee0":"code","211b3e4b":"code","cc01a051":"code","dbae3b40":"code","a9a2b782":"code","227e8d9f":"code","82b4a217":"code","2294a7e6":"code","b3263dec":"code","53ac7d11":"code","d5db64e8":"markdown","4992d1c6":"markdown","c0efd3f3":"markdown","bb27255a":"markdown","6ad7f67a":"markdown","30d974d4":"markdown","8cbc63bd":"markdown","89583655":"markdown","9189df23":"markdown","ce61cc5b":"markdown","318df16f":"markdown","6d686644":"markdown","26d681ff":"markdown","40c28133":"markdown","255ab605":"markdown","f0cebb52":"markdown","4c151cd1":"markdown","33d7d693":"markdown","a12e025e":"markdown","6d05d924":"markdown","5bda5f47":"markdown","63a6d419":"markdown","ccde4873":"markdown","439c25b5":"markdown","6a462e44":"markdown","05837751":"markdown","f83e0599":"markdown","d256ff64":"markdown","0fec9faf":"markdown","86116313":"markdown","b9e9b1f1":"markdown","0fafa026":"markdown","f854d7b6":"markdown","87dd9f59":"markdown","9329de65":"markdown","d967d3c6":"markdown","8461e339":"markdown","c95bd06b":"markdown","a2c400a4":"markdown","815b7aec":"markdown","c8d4bfd2":"markdown","846c4dfa":"markdown","426c8cf2":"markdown","ee71ecb7":"markdown","ce43d8ef":"markdown","6c3c8c45":"markdown","69622494":"markdown","2dbad1d4":"markdown","1ce50d4b":"markdown","b95583a4":"markdown","1e527f8a":"markdown","17a03cf9":"markdown","78696439":"markdown","a7eb6401":"markdown","b990b9ec":"markdown","5158bef2":"markdown","ee6181e9":"markdown","ece432fe":"markdown","b6a9e0f6":"markdown","8d058310":"markdown","794eeb16":"markdown","ba136ec1":"markdown"},"source":{"fcfa9b3d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7db4fd7f":"#basic import\nimport numpy as np\nimport pandas as pd\n\n#visualizations\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n#machine learning\nfrom sklearn import metrics \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split","aa5a5ccd":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\n","cacfc000":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")","c8387131":"test_ =test.copy()","3116a16f":"train.info()","b77484d7":"test.info()","aa2b7af2":"train.head()","717a1581":"test.head()","76ec094e":"train.describe()","45ac1408":"#run some auto visualization tool to see graphics of data no need to understand now\n!pip install git+git:\/\/github.com\/AutoViML\/AutoViz.git\n!pip install xlrd","436ba07e":"from autoviz.AutoViz_Class import AutoViz_Class\n\nAV = AutoViz_Class()\ndftc = AV.AutoViz(\n    filename='', \n    sep='' , \n    depVar='Survived', \n    dfte=train, \n    header=0, \n    verbose=1, \n    lowess=False, \n    chart_format='png', \n    max_rows_analyzed=300000,\n    max_cols_analyzed=30\n)","98f953f8":"from pandas_profiling import ProfileReport\nreport = ProfileReport(train)\nreport","fe0606f1":"median = train['Age'].median()\ntrain['Age'].fillna(value=train['Age'].median(), inplace=True)","5cac91e6":"train[\"Embarked\"].fillna(value=\"Q\", inplace=True)","61cc0eaa":"survived = train[\"Survived\"]","0bdc4381":"plt.style.use('ggplot')\nplt.figure(figsize=(4,4),dpi=80)\nsns.countplot(survived)","b9ec87ff":"did_not_survived=round(len(survived[survived==0])\/len(survived),2)*100\nprint(f\"Their are {did_not_survived}% of people who lost there life in the mishap\")\nprint(\"We get this information from train dataset\")","bd397570":"corr = train.corr()\nplt.figure(figsize=(8,4))\nsns.heatmap(corr,annot=True,cmap=\"cubehelix\")","5abede02":"plt.figure(figsize=(8,4))\nsns.catplot(x=\"Survived\",y=\"Fare\",data=train,kind=\"swarm\")\n","4b3e4bb3":"plt.figure(figsize=(10,6))\nsns.catplot(x=\"Survived\",y=\"Fare\",data=train,kind=\"swarm\",hue=\"Sex\")","f3c211a0":"sns.catplot(x=\"Survived\",y=\"Fare\",data=train,kind=\"swarm\",hue=\"Pclass\",palette=\"rocket\")","b1870fa0":"fig = px.box(train,y=\"Fare\",x=\"Pclass\",points=\"all\",color=\"Survived\")\nfig.show()","0603eb80":"fig = px.box(train,y=\"Fare\",x=\"Survived\",points=\"all\",color=\"Survived\")\nfig.show()","7c2d223a":"fig1 = px.histogram(train, x=\"Fare\", nbins = 50)\nfig1.show()","a23a17f8":"train[\"Log_Fare\"] = np.log(train[\"Fare\"])\nfig1 = px.histogram(train, x=\"Log_Fare\", nbins = 50)\nfig1.show()","a60d5f79":"def filter_train(train,feature,value):\n    return train[train[feature]==value]","af4bc174":"survived = filter_train(train,\"Survived\",1)\nnot_survived = filter_train(train,\"Survived\",0)\nfig1 = px.histogram(survived, x=\"Fare\", nbins = 50, template=\"plotly_dark\", barmode = 'overlay', color ='Survived')\nfig2 = px.histogram(not_survived, x=\"Fare\", nbins = 50, template=\"ggplot2\", barmode = 'overlay', color ='Survived')\nfig1.update_layout(title = 'Histogram of Customers\u2019 Fare',xaxis_title = \"Fare\", yaxis_title = \"Standard Count\", width = 800, height = 600)\nfig1.add_trace(fig2.data[0])\nfig1.show()","7d42786a":"\nPclass1 = filter_train(train,\"Pclass\",1)\nPclass2 = filter_train(train,\"Pclass\",2)\nPclass3 = filter_train(train,\"Pclass\",3)\nfig1 = px.histogram(Pclass1, x=\"Fare\", nbins = 50, template=\"plotly_dark\", barmode = 'overlay', color ='Pclass',color_discrete_sequence=px.colors.qualitative.G10)\nfig2 = px.histogram(Pclass2, x=\"Fare\", nbins = 50, template=\"ggplot2\", barmode = 'overlay', color ='Pclass')\nfig3 = px.histogram(Pclass3, x=\"Fare\", nbins = 50, template=\"ggplot2\", barmode = 'overlay', color ='Pclass')\nfig1.update_layout(title = 'Histogram of Customers\u2019 Fare with class',xaxis_title = \"Fare\", yaxis_title = \"Standard Count\", width = 800, height = 600)\nfig1.add_trace(fig2.data[0])\nfig1.add_trace(fig3.data[0])\nfig1.show()","3d39a0ad":"train_stack=train.groupby(['Survived','Pclass']).size().reset_index()\ntrain_stack['Percentage']=train.groupby(['Survived','Pclass']).size().groupby(level=0).apply(lambda x:100 * x\/float(x.sum())).values\n        \ntrain_stack.columns= ['Survived','Pclass', 'Counts','Percentage']\n      \ntrain_stack['Percentage'] =   train_stack['Percentage'].map('{:,.2f}%'.format) \n      ","a0b68718":"fig = px.bar(train_stack, x = 'Pclass', y = 'Counts', color = \n    'Survived', barmode = 'stack')\nfig.update_layout(title = \"Survived statistics per class\",\n     xaxis_title = 'Survived', yaxis_title = 'Counts', \n     width = 800, height = 600)\nfig.show()","2d1f4b04":"plt.figure(figsize=(10,8))\nsns.boxplot(x='Pclass',y='Fare',data=train, palette='rainbow',hue=\"Survived\")\nplt.title(\"Fare by Passenger Class, Titanic\")","e64e2ff6":"sns.distplot(train[\"Age\"], color=\"r\")","838f6d0d":"plt.figure(figsize=(10,8))\nsns.displot(train,x=\"Age\",hue=\"Survived\")","40cbf0fa":"g = sns.FacetGrid(train, col=\"Pclass\",  row=\"Survived\")\ng.map_dataframe(sns.histplot, x=\"Age\")","8091c00e":"g = sns.FacetGrid(train, col=\"Pclass\",  row=\"Survived\",hue=\"Sex\")\ng.map_dataframe(sns.histplot, x=\"Age\")\ng.add_legend()","bb343779":"g = sns.FacetGrid(train, col=\"Pclass\",row=\"Survived\")\ng.map_dataframe(sns.scatterplot, x=\"Age\", y=\"Fare\", hue=\"Sex\")\ng.add_legend()","f96fd797":"from fitter import Fitter, get_common_distributions, get_distributions\n","dc78bb23":"Age = train[\"Age\"].dropna().values","6f988d7c":"f = Fitter(Age,\n           distributions=['gamma',\n                          'lognorm',\n                          \"beta\",\n                          \"burr\",\n                          \"norm\"])\nf.fit()\nf.summary()","c319afce":"Fare = train.Fare.values\nf = Fitter(Fare,\n           distributions=['gamma',\n                          'lognorm',\n                          \"beta\",\n                          \"burr\",\n                          \"norm\"])\nf.fit()\nf.summary()","f7b011e7":"bins = [0, 20,30, 40,55,90]\nlabels =[1,2,3,4,5]\ntrain['binned_age'] = pd.cut(train['Age'], bins,labels=labels)\n","381eaeab":"sns.countplot(train[\"binned_age\"])","b03acfe3":"g = sns.FacetGrid(train, col=\"Pclass\",  row=\"Survived\",hue=\"Sex\")\ng.map_dataframe(sns.countplot, x=\"binned_age\")\ng.add_legend()","af96a29c":"ax = sns.boxplot(x=\"binned_age\", y=\"Fare\", data=train)","c56df2a2":"g = sns.FacetGrid(train, col=\"Pclass\",row=\"Survived\")\ng.map_dataframe(sns.boxplot, x=\"binned_age\", y=\"Fare\", hue=\"Sex\")\ng.add_legend()","828a11e0":"sns.countplot(train[\"Embarked\"])","bd644ee3":"g = sns.FacetGrid(train, col=\"Pclass\",row=\"Survived\")\ng.map_dataframe(sns.countplot, x=\"Embarked\", hue=\"Sex\")\ng.add_legend()","62abbde2":"train_stack=train.groupby(['Survived','Embarked']).size().reset_index()\ntrain_stack['Percentage']=train.groupby(['Survived','Embarked']).size().groupby(level=0).apply(lambda x:100 * x\/float(x.sum())).values\n        \ntrain_stack.columns= ['Survived','Embarked', 'Counts','Percentage']\n      \ntrain_stack['Percentage'] =   train_stack['Percentage'].map('{:,.2f}%'.format) ","a685b9d3":"fig = px.bar(train_stack, x = 'Embarked', y = 'Counts', color = \n    'Survived', barmode = 'stack')\nfig.update_layout(title = \"Survived statistics per Embarked\",\n     xaxis_title = 'Survived', yaxis_title = 'Counts', \n     width = 800, height = 600)\nfig.show()","3bfb58a0":"sns.catplot(x=\"Embarked\", y=\"Fare\", hue=\"Survived\", data=train)","2dd98171":"sns.countplot(train[\"SibSp\"])","5e8a719a":"train.loc[train[\"SibSp\"]>0,\"SibSp\"] = 1","bca46872":"sns.countplot(train[\"SibSp\"])","7430e96a":"g = sns.FacetGrid(train, col=\"Pclass\",row=\"Sex\")\ng.map_dataframe(sns.countplot, x=\"SibSp\", hue=\"Survived\")\ng.add_legend()","fa11e2f5":"train.head()","1c3de506":"train.drop([\"PassengerId\",\"Name\",\"Age\",\"Parch\",\"Ticket\",\"Cabin\",\"Log_Fare\"],axis=1,inplace=True)","d3bfcafc":"train","504622f6":"sex = pd.get_dummies(train[\"Sex\"],drop_first=True).rename(columns=lambda x:'Sex_' +str(x))\npclass = pd.get_dummies(train[\"Pclass\"],drop_first=True).rename(columns=lambda x:'Pclass_' +str(x))\nembarked = pd.get_dummies(train[\"Embarked\"],drop_first=True).rename(columns=lambda x:'Embarked_' +str(x))\nsibsp = pd.get_dummies(train[\"SibSp\"],drop_first=True).rename(columns=lambda x:'SibSp_' +str(x))\nage = pd.get_dummies(train[\"binned_age\"],drop_first=True).rename(columns=lambda x:'Age_' +str(x))","5b40c9ee":"train = pd.concat([train,sex,pclass,embarked,sibsp,age],axis=1)","bc0bf687":"train.head()","142ab5f8":"train.drop([\"Pclass\",\"Sex\",\"SibSp\",\"Embarked\",\"binned_age\"],axis=1,inplace=True)","b10b76f8":"train.head()","10ea51cb":"train.info()","50020c3c":"train[\"Sex_male\"] =  train[\"Sex_male\"].astype(np.float64)\ntrain[\"Pclass_2\"] =  train[\"Pclass_2\"].astype(np.float64)\ntrain[\"Pclass_3\"] =  train[\"Pclass_3\"].astype(np.float64)\ntrain[\"Embarked_Q\"] =  train[\"Embarked_Q\"].astype(np.float64)\ntrain[\"Embarked_S\"] =  train[\"Embarked_S\"].astype(np.float64)\ntrain[\"SibSp_1\"] =  train[\"SibSp_1\"].astype(np.float64)\ntrain[\"Age_2\"] = train[\"Age_2\"].astype(np.float64)\ntrain[\"Age_3\"] =  train[\"Age_3\"].astype(np.float64)\ntrain[\"Age_4\"] =  train[\"Age_4\"].astype(np.float64)\ntrain[\"Age_5\"] =  train[\"Age_5\"].astype(np.float64)","9fca14e5":"X = train.drop('Survived',axis = 1)\ny = train[\"Survived\"]","a32c10e3":"x_train, x_test, y_train, y_test = train_test_split(X, y, random_state=4,test_size=0.2)","cadc0bcd":"logmodel = LogisticRegression(solver='liblinear')","1f5159cc":"logmodel.fit(x_train,y_train)","9972894f":"predictions = logmodel.predict(x_test)","66d2b11b":"print(metrics.classification_report(y_test,predictions))","e44c778b":"print(metrics.confusion_matrix(y_test,predictions))","4124b092":"test.head()","85dd482c":"test['Age'].fillna(value=median, inplace=True)","84413355":"test[\"Embarked\"].fillna(value=\"Q\", inplace=True)","7b894092":"test.info()","80290dec":"test['binned_age'] = pd.cut(test['Age'], bins,labels=labels)","69e848cd":"test.loc[test[\"SibSp\"]>0,\"SibSp\"] = 1","8bbd1b41":"test.drop([\"PassengerId\",\"Name\",\"Age\",\"Parch\",\"Ticket\",\"Cabin\"],axis=1,inplace=True)","b1a20238":"sex = pd.get_dummies(test[\"Sex\"],drop_first=True).rename(columns=lambda x:'Sex_' +str(x))\npclass = pd.get_dummies(test[\"Pclass\"],drop_first=True).rename(columns=lambda x:'Pclass_' +str(x))\nembarked = pd.get_dummies(test[\"Embarked\"],drop_first=True).rename(columns=lambda x:'Embarked_' +str(x))\nsibsp = pd.get_dummies(test[\"SibSp\"],drop_first=True).rename(columns=lambda x:'SibSp_' +str(x))\nage = pd.get_dummies(test[\"binned_age\"],drop_first=True).rename(columns=lambda x:'Age_' +str(x))","f5ccce06":"test = pd.concat([test,sex,pclass,embarked,sibsp,age],axis=1)","84434059":"test.drop([\"Pclass\",\"Sex\",\"SibSp\",\"Embarked\",\"binned_age\"],axis=1,inplace=True)","492fad3a":"test[\"Sex_male\"] =  test[\"Sex_male\"].astype(np.float64)\ntest[\"Pclass_2\"] =  test[\"Pclass_2\"].astype(np.float64)\ntest[\"Pclass_3\"] =  test[\"Pclass_3\"].astype(np.float64)\ntest[\"Embarked_Q\"] =  test[\"Embarked_Q\"].astype(np.float64)\ntest[\"Embarked_S\"] =  test[\"Embarked_S\"].astype(np.float64)\ntest[\"SibSp_1\"] =  test[\"SibSp_1\"].astype(np.float64)\ntest[\"Age_2\"] = test[\"Age_2\"].astype(np.float64)\ntest[\"Age_3\"] =  test[\"Age_3\"].astype(np.float64)\ntest[\"Age_4\"] =  test[\"Age_4\"].astype(np.float64)\ntest[\"Age_5\"] =  test[\"Age_5\"].astype(np.float64)","39215212":"test[\"Fare\"].fillna(0,inplace=True)","bc13e235":"predict_test_y =  logmodel.predict(test)","ce9c1c06":"submission = pd.DataFrame({\n        \"PassengerId\": test_[\"PassengerId\"],\n        \"Survived\": predict_test_y\n    })\nsubmission.to_csv('submission.csv', index=False)","659df0b6":"from sklearn.neighbors import KNeighborsClassifier\n\nmodel = KNeighborsClassifier(n_neighbors=3)\n\n","b97a1cfe":"model.fit(x_train,y_train)","cc9f27d0":"predicted= model.predict(test)","790f1ee0":"submission = pd.DataFrame({\n        \"PassengerId\": test_[\"PassengerId\"],\n        \"Survived\": predicted\n    })\nsubmission.to_csv('submission1.csv', index=False)","211b3e4b":"from sklearn.neighbors import KNeighborsClassifier\n\nmodel = KNeighborsClassifier(n_neighbors=5)\nmodel.fit(X,y)\npredicted= model.predict(test)\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_[\"PassengerId\"],\n        \"Survived\": predicted\n    })\nsubmission.to_csv('submission2.csv', index=False)","cc01a051":"from sklearn.naive_bayes import GaussianNB\n\nmodel = GaussianNB()\nmodel.fit(X,y)\npredicted= model.predict(test)\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_[\"PassengerId\"],\n        \"Survived\": predicted\n    })\nsubmission.to_csv('submission2.csv', index=False)","dbae3b40":"from sklearn.naive_bayes import BernoulliNB\n\nmodel = BernoulliNB()\nmodel.fit(X,y)\npredicted= model.predict(test)\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_[\"PassengerId\"],\n        \"Survived\": predicted\n    })\nsubmission.to_csv('submission2.csv', index=False)","a9a2b782":"from sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X,y)\npredicted= model.predict(test)\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_[\"PassengerId\"],\n        \"Survived\": predicted\n    })\nsubmission.to_csv('submission2.csv', index=False)","227e8d9f":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X,y)\npredicted= model.predict(test)\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_[\"PassengerId\"],\n        \"Survived\": predicted\n    })\nsubmission.to_csv('submission2.csv', index=False)","82b4a217":"from sklearn import svm\n\nmodel = svm.SVC(kernel='linear')\nmodel.fit(X,y)\npredicted= model.predict(test)\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_[\"PassengerId\"],\n        \"Survived\": predicted\n    })\nsubmission.to_csv('submission2.csv', index=False)","2294a7e6":"from sklearn import svm\n\nmodel = svm.SVC(kernel='rbf')\nmodel.fit(X,y)\npredicted= model.predict(test)\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_[\"PassengerId\"],\n        \"Survived\": predicted\n    })\nsubmission.to_csv('submission2.csv', index=False)","b3263dec":"from xgboost import XGBClassifier\n\n\nmodel = XGBClassifier()\nmodel.fit(X,y)\npredicted= model.predict(test)\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_[\"PassengerId\"],\n        \"Survived\": predicted\n    })\nsubmission.to_csv('submission2.csv', index=False)","53ac7d11":"from sklearn.neural_network import MLPClassifier\nmodel = MLPClassifier(hidden_layer_sizes=(8,8,8), activation='relu', solver='adam', max_iter=500)\nmodel.fit(X,y)\npredicted= model.predict(test)\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_[\"PassengerId\"],\n        \"Survived\": predicted\n    })\nsubmission.to_csv('submission2.csv', index=False)","d5db64e8":"* One simple understanding if you are poor you will die.\n* Female has more advantage than man over living","4992d1c6":"* Well our hypothesis is more or less true and we can identify that the most expensive ticket belongs to a person aged between 30-40.","c0efd3f3":"# Data Visualization(EDA)","bb27255a":"## score 0.66028","6ad7f67a":"### Corelation plot","30d974d4":"## General Layout Style \n### Subheader in h3 format and notes in paragraph ","8cbc63bd":"## Model","89583655":"* Nothing is clear from this plot.","9189df23":"* cabin, age and far is missing some values here.\n* test.csv is used to test our hypothesis model. ","ce61cc5b":"# Test Data ","318df16f":"### Analysis of Fare and Age","6d686644":"* Interesting fact is that the survival  in Embarked C is more then death.\n* Let's make one hypothesis  and test it : Embarkment C has fare compatively higher than other ones.","26d681ff":"## Handling Missing Value ","40c28133":"## score: 0.75119","255ab605":"* for most of the age range in pclass if sex is female she is more likely to survived\n* Same for pclass 1 and class 3 aswell \n* The dead female count for pclass1 and 2 is negligble so rich woman survives more than man.","f0cebb52":"* Any insight can you spot from these plots\n* It is not clearly visible if these plots have any significance over model building \n* one  common interpretation is that for all the class most survived are the one for whom age remains between 20 to 40","4c151cd1":"## Naive-Bayes","33d7d693":"* Generally the fare ranges from 0 to 90. \n* Some rare case that includes the price to be as high as 500.\n* The distribution is not normal at all.","a12e025e":"* something interesting is that Emabrked c has the fare of 500+ but rather data point doesn't make it possible to validate our claim and we will be required statistical test to validate our thought.","6d05d924":"### Some summary statistics of the data ","5bda5f47":"* Interesting Fact most of the dead people are male so gender is crucial parameter for detection of survival.\n* A high percent of women survived this mishap regardless of their wealth status.(Assumption: Wealth of a person is proportional to the fare of ticket) ","63a6d419":"* This visuals will help us get understand the data more accuately \n* We will create more visualization to help understand the data \n* After understanding of the data we will go through a pipeline process to get cleaned data\n* atlast applying a machine learning model to validate our skills.","ccde4873":"* better , Now we can run some meaningful analysis with it.","439c25b5":"## score:0.72248","6a462e44":"* Wow what a plot just validated our hypothesis .\n* If you are a female chances of your survival will gonna increases a lot no matter of your age.","05837751":"### Bin The Age","f83e0599":"### Embarked Analysis","d256ff64":"* the mode of fare for class 1 is around 80 and the price of fare if exceed 100 then it is definitely a class 1 ticket.\n* For class 2 the mode of price remains around 20 and it max goes upto 80.\n* For class 3 it remains upto 10 the mode.","0fec9faf":"## score: 0.74641","86116313":"* Analysis of the SibSp is meaningless in these way \n* We will make column where the person is either alone or not.","b9e9b1f1":"## KNN ","0fafa026":"# Basic Data manupulation\n### Goal\n* Look into the data \n* Identify shape, structure\n* Get a general overview \n* Run some autovisualizations\n","f854d7b6":"* clear indication that most of the passenger who didn't survived are paid less for fare\n* there is an overlay of fare price but the trend is clear \n* take away: if you pay more your chance of survival increases [logical]","87dd9f59":"## Next step refactor code , explain algorithm, add big data solution, add tensorflow code","9329de65":"* for class 1  the female used to have more fare for tickets and they tend to survived \n* for other classes hard to figure out.","d967d3c6":"* Our data cleaning is done next step Model Building.","8461e339":"* Data set is partially imbalanced.","c95bd06b":"* we have 2 float columns, 5 integer columns, 5 object columns\n* Traget variable is survived and has zero null value.\n* Age , cabin and Embarked has null values with them.","a2c400a4":"## score: 0.69138","815b7aec":"### Autoviz","c8d4bfd2":"## Logistic Regression","846c4dfa":"## Score 0.69617","426c8cf2":"## score: 0.76076","ee71ecb7":"# Other columns interaction with Survived","ce43d8ef":"* It is hard to find any pattern from the graph.","6c3c8c45":"* Apart from class 1 the data remains concentrated into other classes\n* Class 1 and 2 has higher median of survival with fare.","69622494":"## score: 0.76315","2dbad1d4":"### Survived data field\nAnalysis of survived data field","1ce50d4b":"### Fare and Survived","b95583a4":"### is more age means more money?","1e527f8a":"* Most of the peoples fare remains below 100\n* With incresing number of fare the survival rate also increase \n* For a Fare of greater than 500 you will sure shot survived in Titanic.","17a03cf9":"* for class 1 and 2 the most of the surviving female are with Embarked C \n* for class 3 it is male who survived more and from Embarked S but with less difference.","78696439":"### Is this same across male and female and Pclass?","a7eb6401":"* The median for surviving is 26 and the same for not surviving is 10.5","b990b9ec":"* survived has corelation with fare and pclass. Where pclass and fare is also corelated.\n\n* pclass is also corelated with age. does this make any sense? may be with age you earn money and you will get to buy good class tickits. make sense. ","5158bef2":"## score 0.76555","ee6181e9":"### Sibling","ece432fe":"Basic Understanding\n* training data contains people where more people dies than survives.It cn be understood from survived.mean value\n* Fare is not uniformly or normally distributed and skewed towards right as we have mean around 32 and max around 512.\n* Average age of people travelling in titanic is around 29 \n* Most of the people travels alone.(obvious from real world senario)\n\nwow all these with simple train.describe()","b6a9e0f6":"### First Rows of data","8d058310":"# Pandas Profilling","794eeb16":"## score: 0.74401","ba136ec1":"## score: 0.76315 "}}