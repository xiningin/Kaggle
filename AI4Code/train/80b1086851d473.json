{"cell_type":{"75dce785":"code","fc5a1490":"code","db071a8d":"code","f612056a":"code","4da3fa28":"code","3bcaccc4":"code","117a4bd3":"code","758ea26e":"code","b2e42cac":"code","f7a6d9fc":"code","4233622c":"code","49f052c9":"code","f043457a":"code","738e1f9b":"code","c27b8bae":"code","9204f20d":"code","3b389397":"code","2b8baca1":"code","6cd7a6b4":"code","0cfdd518":"code","862aac48":"code","0fa453c0":"code","2c1f5523":"code","33863ef7":"code","db562fdc":"code","c9444c82":"code","f47defc3":"code","a6e6c620":"code","70fc236f":"code","8c6a62e9":"code","92af5999":"code","7b521a31":"code","db42a6b7":"code","cf17832d":"code","dac4fc92":"code","bc59e6a1":"code","0a70a249":"code","4490e323":"code","4e1df463":"code","4e1f4c1a":"code","0c3ef98c":"code","f1305c0f":"code","c7d5b453":"code","9bafc1ba":"code","ecb8aed4":"code","eedb9385":"code","3920ef9f":"code","03dfec81":"code","85153b25":"code","b0f29759":"code","185b5f57":"code","86515793":"code","8fd46d9f":"code","ac671f68":"code","0b16fdd1":"code","569a8af9":"code","08299352":"code","bc490b56":"code","785cc4fe":"code","46292046":"code","a71aba88":"code","3a056938":"code","9a6479e1":"code","d4197e87":"code","1b28163b":"code","99ea34e7":"code","0256b20b":"code","d0fb1533":"code","8cc4c058":"code","8447c707":"code","5dbc1515":"code","8c13c4a5":"code","66adfcbe":"code","c4262a77":"code","b46c03f2":"code","29a25654":"code","f9e805e2":"code","8ea2c745":"code","9438ea94":"code","3fa541e1":"code","2dabf7c8":"markdown","520881cd":"markdown","ac2519ce":"markdown","c601ffeb":"markdown","45454e31":"markdown","f7510263":"markdown","f67c5580":"markdown","957b6a45":"markdown","ec2e4ff1":"markdown","ef986686":"markdown","098e7a0a":"markdown","623f3465":"markdown","2ca8eb03":"markdown","a3509f9f":"markdown","4968ccba":"markdown","8650efe2":"markdown","c51e20cb":"markdown","388a987d":"markdown","69742d0b":"markdown","da90b30a":"markdown","ad04e85e":"markdown","2d4c3779":"markdown","c39eefce":"markdown","5cc9b6a5":"markdown","de6edbdd":"markdown","9bcb9fd3":"markdown","59b4d151":"markdown","44cbb8cd":"markdown","0432c133":"markdown","6d8ee957":"markdown","48974e22":"markdown","ec8a8a63":"markdown"},"source":{"75dce785":"# Importing all required packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","fc5a1490":"#Importing CarPrice_Assignment.csv\ncarDetails = pd.read_csv('..\/input\/CarPriceAssignment.csv')","db071a8d":"# Looking at first five rows\ncarDetails.head()","f612056a":"carDetails.info()","4da3fa28":"# Let's look at some statistical information about our dataframe.\ncarDetails.describe()","3bcaccc4":"# Let's plot a pair plot of all variables in our dataframe\nsns.set(font_scale=2)\nsns.pairplot(carDetails)","117a4bd3":"plt.figure(figsize = (20,10))  \nsns.heatmap(carDetails.corr(),annot = True)","758ea26e":"carDetails.drop(['carwidth','curbweight','wheelbase','highwaympg'], axis =1, inplace = True)\n#we can also remove carID  as its just a serial number \ncarDetails.drop(['car_ID'], axis =1, inplace = True)\n","b2e42cac":"carDetails.info()","f7a6d9fc":"# Plotting price \nc = [i for i in range(1,206,1)]\nfig = plt.figure()\nplt.scatter(c,carDetails['price'])\nfig.suptitle('price vs index', fontsize=20)              # Plot heading \nplt.xlabel('index', fontsize=18)                          # X-label\nplt.ylabel('price', fontsize=16)  \n","4233622c":"# # carDetails = carDetails.ix[carDetails['price'] <= 25000]\n# # carDetails.describe()\n# import numpy\n\n# arr = carDetails['price']\n# elements = numpy.array(arr)\n\n# mean = numpy.mean(elements, axis=0)\n# sd = numpy.std(elements, axis=0)\n\n# final_list1 = [x for x in arr if (x < mean - 2 * sd)]\n# final_list2 = [x for x in arr if (x > mean + 2 * sd)]\n# print(len(final_list1))\n# print(len(final_list2))\n\n# print(final_list1)\n# print(final_list2)\n\n\n# carDetails = carDetails.ix[carDetails['price'] <= 30000]\n# carDetails.describe()","49f052c9":"carDetails[\"CarName\"] = carDetails[\"CarName\"].str.replace('-', ' ')\ncarDetails.CarName.unique()\n\ncarDetails[\"CarName\"] = carDetails.CarName.map(lambda x: x.split(\" \", 1)[0])\n# As we have some redundant data in carName lets fix it \ncarDetails.CarName = carDetails['CarName'].str.lower()\ncarDetails['CarName'] = carDetails['CarName'].str.replace('vw','volkswagen')\ncarDetails['CarName'] = carDetails['CarName'].str.replace('vokswagen','volkswagen')\ncarDetails['CarName'] = carDetails['CarName'].str.replace('toyouta','toyota')\ncarDetails['CarName'] = carDetails['CarName'].str.replace('porcshce','porsche')\ncarDetails['CarName'] = carDetails['CarName'].str.replace('maxda','mazda')\ncarDetails['CarName'] = carDetails['CarName'].str.replace('maxda','mazda')\n\ncarDetails.CarName.unique()\n# carDetails.info()","f043457a":"# Converting Yes to 1 and No to 0\ncarDetails['fueltype'] = carDetails['fueltype'].map({'gas': 1, 'diesel': 0})\ncarDetails['aspiration'] = carDetails['aspiration'].map({'std': 1, 'turbo': 0})\ncarDetails['doornumber'] = carDetails['doornumber'].map({'two': 1, 'four': 0})\ncarDetails['enginelocation'] = carDetails['enginelocation'].map({'front': 1, 'rear': 0})","738e1f9b":"carDetails.info()\n# carDetails.head()","c27b8bae":"df = pd.get_dummies(carDetails)\ndf.head()\n# df.info()\n","9204f20d":"#defining a normalisation function \ncols_to_norm = ['symboling', 'carlength', 'carheight', \n         'enginesize', 'boreratio', 'stroke', 'compressionratio','horsepower', 'peakrpm', 'citympg', 'price']\n# Normalising only the numeric fields \nnormalised_df = df[cols_to_norm].apply(lambda x: (x-np.mean(x))\/ (max(x) - min(x)))\nnormalised_df.head()\n\ndf['symboling'] = normalised_df['symboling']\ndf['carlength'] = normalised_df['carlength']\ndf['carheight'] = normalised_df['carheight']\ndf['enginesize'] = normalised_df['enginesize']\ndf['boreratio'] = normalised_df['boreratio']\ndf['stroke'] = normalised_df['stroke']\ndf['price'] = normalised_df['price']\ndf['compressionratio'] = normalised_df['compressionratio']\ndf['horsepower'] = normalised_df['horsepower']\ndf['peakrpm']= normalised_df['peakrpm']\ndf['citympg'] = normalised_df['citympg']\ndf.head()\n","3b389397":"refinedcol = df.columns\nrefinedcol","2b8baca1":"# Putting feature variable to X\n# df.info()\n# df.columns\nX = df[['symboling', 'fueltype', 'aspiration', 'doornumber', 'enginelocation',\n       'carlength', 'carheight', 'enginesize', 'boreratio', 'stroke',\n       'compressionratio', 'horsepower', 'peakrpm', 'citympg',\n       'CarName_alfa', 'CarName_audi', 'CarName_bmw', 'CarName_buick',\n       'CarName_chevrolet', 'CarName_dodge', 'CarName_honda', 'CarName_isuzu',\n       'CarName_jaguar', 'CarName_mazda', 'CarName_mercury',\n       'CarName_mitsubishi', 'CarName_nissan', 'CarName_peugeot',\n       'CarName_plymouth', 'CarName_porsche', 'CarName_renault',\n       'CarName_saab', 'CarName_subaru', 'CarName_toyota',\n       'CarName_volkswagen', 'CarName_volvo', 'carbody_convertible',\n       'carbody_hardtop', 'carbody_hatchback', 'carbody_sedan',\n       'carbody_wagon', 'drivewheel_4wd', 'drivewheel_fwd', 'drivewheel_rwd',\n       'enginetype_dohc', 'enginetype_dohcv', 'enginetype_l', 'enginetype_ohc',\n       'enginetype_ohcf', 'enginetype_ohcv', 'enginetype_rotor',\n       'cylindernumber_eight', 'cylindernumber_five', 'cylindernumber_four',\n       'cylindernumber_six', 'cylindernumber_three', 'cylindernumber_twelve',\n       'cylindernumber_two', 'fuelsystem_1bbl', 'fuelsystem_2bbl',\n       'fuelsystem_4bbl', 'fuelsystem_idi', 'fuelsystem_mfi',\n       'fuelsystem_mpfi', 'fuelsystem_spdi', 'fuelsystem_spfi']]\n\n# # # Putting response variable to y\ny = df['price']","6cd7a6b4":"#random_state is the seed used by the random number generator, it can be any integer.\nfrom sklearn.cross_validation import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7 ,test_size = 0.3, random_state=100)","0cfdd518":"# help(rfe)","862aac48":"# Importing RFE and LinearRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\n# Running RFE with the output number of the variable equal to 15\nlm = LinearRegression()\nrfe = RFE(lm, 15)             # running RFE\nrfe = rfe.fit(X_train, y_train)\nprint(rfe.support_)           # Printing the boolean results\nprint(rfe.ranking_)  ","0fa453c0":"X_train.columns[rfe.support_]","2c1f5523":"#variables that are to be dropped\nX_train.columns\ncol = X_train.columns[~rfe.support_]\ncol","33863ef7":"print(\"Before droping of columns\")\nX_train.columns\nX_train1 = X_train.drop(col,1)\nprint(\"After Droping of columns\")\nX_train1.columns\n\ndf.head()","db562fdc":"# Adding a constant variable \nimport statsmodels.api as sm  \nX_train1 = sm.add_constant(X_train1)","c9444c82":"lm_1 = sm.OLS(y_train,X_train1).fit() # Running the linear model\nprint(lm_1.summary())","f47defc3":"def vif_cal(input_data, dependent_col):\n    vif_df = pd.DataFrame( columns = ['Var', 'Vif'])\n    x_vars=input_data.drop([dependent_col], axis=1)\n    xvar_names=x_vars.columns\n    for i in range(0,xvar_names.shape[0]):\n        y=x_vars[xvar_names[i]] \n        x=x_vars[xvar_names.drop(xvar_names[i])]\n        rsq=sm.OLS(y,x).fit().rsquared  \n        vif=round(1\/(1-rsq),2)\n        vif_df.loc[i] = [xvar_names[i], vif]\n    return vif_df.sort_values(by = 'Vif', axis=0, ascending=False, inplace=False)","a6e6c620":"df.drop(col, axis =1, inplace = True)\n# df.head()","70fc236f":"# Calculating Vif value\n# df.head()\nvif_cal(input_data=df, dependent_col=\"price\")","8c6a62e9":"plt.figure(figsize = (20,10))  \nsns.heatmap(df.corr(),annot = True)","92af5999":"# Dropping highly correlated variables and insignificant variables\nX_train2 = X_train1.drop('enginetype_rotor', 1)","7b521a31":"# Creating a second fitted model\nlm_2 = sm.OLS(y_train,X_train2).fit()","db42a6b7":"#Let's see the summary of our second linear model\nprint(lm_2.summary())","cf17832d":"df.drop('enginetype_rotor', axis =1, inplace = True)","dac4fc92":"# Calculating Vif value\nvif_cal(input_data= df, dependent_col=\"price\")","bc59e6a1":"# Dropping highly correlated variables and insignificant variables\nX_train3 = X_train2.drop('cylindernumber_eight', 1)","0a70a249":"# Creating a third fitted model \nlm_3 = sm.OLS(y_train,X_train3).fit()","4490e323":"#Let's see the summary of our third linear model\nprint(lm_3.summary())","4e1df463":"df.drop('cylindernumber_eight', axis =1, inplace = True)","4e1f4c1a":"# Calculating Vif value\nvif_cal(input_data=df, dependent_col=\"price\")","0c3ef98c":"# Dropping highly correlated variables and insignificant variables \nX_train4 = X_train3.drop('enginetype_dohcv', 1)","f1305c0f":"# Creating a fourth fitted model\nlm_4 = sm.OLS(y_train,X_train4).fit()","c7d5b453":"#Let's see the summary of our fourth linear model\nprint(lm_4.summary())","9bafc1ba":"df.drop('enginetype_dohcv', axis =1, inplace = True)","ecb8aed4":"# Calculating Vif value\nvif_cal(input_data=df, dependent_col=\"price\")","eedb9385":"# Dropping highly correlated variables and insignificant variables\nX_train5 = X_train4.drop('cylindernumber_four', 1)","3920ef9f":"# Creating a fifth fitted model\nlm_5 = sm.OLS(y_train,X_train5).fit()","03dfec81":"#Let's see the summary of our fifth linear model\nprint(lm_5.summary())","85153b25":"df.drop('cylindernumber_four', axis =1, inplace = True)","b0f29759":"# Calculating Vif value\nvif_cal(input_data=df, dependent_col=\"price\")","185b5f57":"plt.figure(figsize = (20,10))  \nsns.heatmap(df.corr(),annot = True)","86515793":"# Dropping highly correlated variables and insignificant variables\nX_train6 = X_train5.drop('cylindernumber_twelve', 1)","8fd46d9f":"# Creating a sixth fitted model\nlm_6 = sm.OLS(y_train,X_train6).fit()","ac671f68":"#Let's see the summary of our sixth linear model\nprint(lm_6.summary())","0b16fdd1":"df.drop('cylindernumber_twelve', axis =1, inplace = True)","569a8af9":"# Calculating Vif value\nvif_cal(input_data=df, dependent_col=\"price\")","08299352":"# Dropping highly correlated variables and insignificant variables\nX_train7 = X_train6.drop('stroke', 1)","bc490b56":"# Creating a seventh fitted model\nlm_7 = sm.OLS(y_train,X_train7).fit()","785cc4fe":"#Let's see the summary of our seventh linear model\nprint(lm_7.summary())","46292046":"df.drop('stroke', axis =1, inplace = True)","a71aba88":"# Calculating Vif value\nvif_cal(input_data=df, dependent_col=\"price\")","3a056938":"# Dropping highly correlated variables and insignificant variables\nX_train8 = X_train7.drop('boreratio', 1)","9a6479e1":"# Creating a eighth fitted model\nlm_8 = sm.OLS(y_train,X_train8).fit()","d4197e87":"#Let's see the summary of our eighth linear model\nprint(lm_8.summary())","1b28163b":"df.drop('boreratio', axis =1, inplace = True)","99ea34e7":"# Calculating Vif value\nvif_cal(input_data=df, dependent_col=\"price\")","0256b20b":"# Dropping highly correlated variables and insignificant variables\nX_train9 = X_train8.drop('cylindernumber_three', 1)","d0fb1533":"# Creating a ninth fitted model\nlm_9 = sm.OLS(y_train,X_train9).fit()","8cc4c058":"#Let's see the summary of our ninth linear model\nprint(lm_9.summary())","8447c707":"df.drop('cylindernumber_three', axis =1, inplace = True)","5dbc1515":"# Calculating Vif value\nvif_cal(input_data=df, dependent_col=\"price\")","8c13c4a5":"plt.figure(figsize = (20,10))  \nsns.heatmap(df.corr(),annot = True)","66adfcbe":"# Adding  constant variable to test dataframe\nX_test_m9 = sm.add_constant(X_test)","c4262a77":"# Creating X_test_m12 dataframe by dropping variables from X_test_m12\nX_test_m9 = X_test_m9.drop(col, axis=1)\nX_test_m9 = X_test_m9.drop(['cylindernumber_three','enginetype_rotor','cylindernumber_eight',\n                              'enginetype_dohcv','cylindernumber_four','cylindernumber_twelve','stroke','boreratio'], axis=1)\nX_test_m9.info()\n","b46c03f2":"# Making predictions\ny_pred_m9 = lm_9.predict(X_test_m9)\ny_pred_m9","29a25654":"# Actual vs Predicted\nc = [i for i in range(1,63,1)]\nfig = plt.figure()\nplt.plot(c,y_test, color=\"blue\", linewidth=3.5, linestyle=\"-\")     #Plotting Actual\nplt.plot(c,y_pred_m9, color=\"red\",  linewidth=3.5, linestyle=\"-\")  #Plotting predicted\nfig.suptitle('Actual and Predicted', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                               # X-label\nplt.ylabel('Car Price', fontsize=16)  ","f9e805e2":"#Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_pred_m9)\nfig.suptitle('y_test vs y_pred', fontsize=20)              # Plot heading \nplt.xlabel('y_test', fontsize=18)                          # X-label\nplt.ylabel('y_pred', fontsize=16)     ","8ea2c745":"# Error terms\nfig = plt.figure()\nc = [i for i in range(1,63,1)]\n# plt.plot(c,y_test-y_pred_m9, color=\"blue\", linewidth=2.5, linestyle=\"-\")\nplt.scatter(c,y_test-y_pred_m9)\n\nfig.suptitle('Error Terms', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                      # X-label\nplt.ylabel('ytest-ypred', fontsize=16)                # Y-label","9438ea94":"# Plotting the error terms to understand the distribution.\nfig = plt.figure()\nsns.distplot((y_test-y_pred_m9),bins=15)\nfig.suptitle('Error Terms', fontsize=20)                  # Plot heading \nplt.xlabel('y_test-y_pred', fontsize=18)                  # X-label\nplt.ylabel('Index', fontsize=16)             ","3fa541e1":"import numpy as np\nfrom sklearn import metrics\nprint('RMSE :', np.sqrt(metrics.mean_squared_error(y_test, y_pred_m9)))","2dabf7c8":"##### Droping the values and updating the model-5\nAs we can see cylindernumber_four is negatively corelated to  enginesize and car width with values of -0.52 and -0.63 and also the vif is very high 30.73. Lets drop it ","520881cd":"### Importing And Understanding Data","ac2519ce":"#### Data cleanup\nThere is a variable named CarName which is comprised of two parts - the first word is the name of 'car company' and the second is the 'car model'. For example, chevrolet impala has 'chevrolet' as the car company name and 'impala' as the car model name. We need to consider only company name as the independent variable for model building. ","c601ffeb":"### Dealing with Categorical Fields ","45454e31":"##### Droping the values and updating the model-9\nAs we can see the p-value of cylindernumber_three is high with value of 0.07 and also it has very less corelation with price. As we have other variables which have good corealtion with price. lets drop this variable ","f7510263":"#### Generating dummy values for categorical columns of more than 2 levels","f67c5580":"As we can see from heat map the cylindernumber_two and enginetype_rotor are highly corelated, the corelation is 1 and also the Vif value is pretty high for enginetype_rotor. It is infinity lets drop it.","957b6a45":"##### Droping the values and updating the model-2 ","ec2e4ff1":"## Conclusion\n  \n1. The R square and Adjusted R square value in CarModelWithOutliers is almost same which is 89.8% and 89.2% respectively which indicates that none of the parameters in CarModelWithOutliers model are reduntant.\n\n2. And also from Error Terms scatter plot we can see that the error (y_test-y-pred) is unequally distributed, and does not follow any pattern, as there is no curve, and shows no relation which indicates that it is just the white noise. \n\n3. The RSME value is 0.06519190461262164\n\n4. As we can see that the model seems to be stable, The variables that can affect price are:\n \n    1   enginesize\t\n    2   carlength\t\n    3\tCarName_buick\t\n    4\tCarName_porsche\t\n    5\tCarName_bmw\t\n    6\tcylindernumber_two\t\n    7\tCarName_audi\t\n\n","ef986686":"As we can se we have few categorial fields like carName, carbody, driveWheel, fuelsystem, cylinderNumber, engineType So lets generate dummy columns for all of these first.","098e7a0a":"##### Droping the values and updating the model-7\nAs we can see stroke is positively corelated to enginesize  with value of 0.2 and also it has high p-value of 1.84 and also it has very less co relation with price. so lets drop it\n","623f3465":"#### Lets also check the VIF values ","2ca8eb03":"### Prediction with model-9","a3509f9f":"### Rescaling the Features using Normalisation","4968ccba":"### Assessing the Model:\nLets scatter plot the error and see if the error is some random noise or white noise, or it has some pattern.","8650efe2":"#### Dealing with outliers","c51e20cb":"### Visualizing the data","388a987d":"#### RFE","69742d0b":"#### Dealing with highly corelated data after data visualisation","da90b30a":"##### Droping the values and updating the model-3","ad04e85e":"### Building Model By droping columns after RFE ","2d4c3779":"##### Droping the values and updating the model-6\nAs we can see cylindernumber_twelve is positively corelated to enginesize  with value of 0.34 and also it has high p-value of 1.49 and also it has high negative coefficient. so lets drop it \n","c39eefce":"## Splitting Data into Training and Testing Sets\n","5cc9b6a5":"### Model Evaluation","de6edbdd":"As we can see the cylindernumber_eight its vif is 3.43 and also we can see that it is positively corelated with enginetype_dohcv(0.44) and enginesize (0.49) lets go ahead and drop it ","9bcb9fd3":"From above scatter plots and also the heat map as we can notice there is a high corelation between:\n1.carlength, curbweight, wheelbase and carwidth, so we can drop 3 out of 4, so lets drop carwidth and curbweight and wheelbase\n2.There is a high corelation of .97 between highwaympg and citympg, so lets drop highwaympg\n","59b4d151":"##### Droping the values and updating the model-8\nAs we can see boreratio is positively corelated to enginesize and also the carlength with values of 0.58 and 0.61 and also it has high p-value of 1.69 and also it has vif of 2.11, so lets drop it ","44cbb8cd":"##### Droping the values and updating the model-4\nAs we can see the enginetype_dohcv has very high pvalue and it is negatively corelated to CarName_porsche","0432c133":"As we can see in the above scatter plot the error is randomly distributed and it does not follow any pattern.  I think we are good to go with this model, which has both adjusted R square and R square cloase to 0.89","6d8ee957":"### Data Preparation","48974e22":"##### Converting all categorical fields of two levels to binary","ec8a8a63":"### Corelation Matrix"}}