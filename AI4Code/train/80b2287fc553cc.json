{"cell_type":{"3bdf344a":"code","e2a325e2":"code","a332e7ef":"code","4a7ea75c":"code","abbbb268":"code","4adde8ed":"code","27eb0a17":"code","ba132856":"code","73b70957":"code","339184f1":"code","c19f6e67":"code","1efe6e98":"code","f860b25f":"code","b49ab49d":"code","f594a7ae":"markdown","bbf12d99":"markdown","2f0b5f50":"markdown","a23e5f9c":"markdown","09f93dc2":"markdown","e51aa271":"markdown","3fe44177":"markdown"},"source":{"3bdf344a":"import os\nimport math\nimport random\nimport time\n\nimport numpy as np\nimport pandas as pd\n\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import DataLoader\n\nfrom transformers import AutoTokenizer\nfrom transformers import AutoModel\nfrom transformers import AutoConfig\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.svm import SVR\n\nimport gc\ngc.enable()","e2a325e2":"BATCH_SIZE = 32\nMAX_LEN = 248\nEVAL_SCHEDULE = [(0.50, 16), (0.49, 8), (0.48, 4), (0.47, 2), (-1., 1)]\nROBERTA_PATH = \"\/kaggle\/input\/roberta-base\"\nTOKENIZER_PATH = \"\/kaggle\/input\/roberta-base\"\nDEVICE = \"cuda\" if torch.cuda.is_available() else \"cpu\"","a332e7ef":"test_df = pd.read_csv(\"\/kaggle\/input\/commonlitreadabilityprize\/test.csv\")\nsubmission_df = pd.read_csv(\"\/kaggle\/input\/commonlitreadabilityprize\/sample_submission.csv\")","4a7ea75c":"tokenizer = AutoTokenizer.from_pretrained(TOKENIZER_PATH)","abbbb268":"class LitDataset(Dataset):\n    def __init__(self, df, inference_only=False):\n        super().__init__()\n\n        self.df = df        \n        self.inference_only = inference_only\n        self.text = df.excerpt.tolist()\n        #self.text = [text.replace(\"\\n\", \" \") for text in self.text]\n        \n        if not self.inference_only:\n            self.target = torch.tensor(df.target.values, dtype=torch.float32)        \n    \n        self.encoded = tokenizer.batch_encode_plus(\n            self.text,\n            padding = 'max_length',            \n            max_length = MAX_LEN,\n            truncation = True,\n            return_attention_mask=True\n        )        \n \n\n    def __len__(self):\n        return len(self.df)\n\n    \n    def __getitem__(self, index):        \n        input_ids = torch.tensor(self.encoded['input_ids'][index])\n        attention_mask = torch.tensor(self.encoded['attention_mask'][index])\n        \n        if self.inference_only:\n            return (input_ids, attention_mask)            \n        else:\n            target = self.target[index]\n            return (input_ids, attention_mask, target)","4adde8ed":"class LitModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n\n        config = AutoConfig.from_pretrained(ROBERTA_PATH)\n        config.update({\"output_hidden_states\":True, \n                       \"hidden_dropout_prob\": 0.0,\n                       \"layer_norm_eps\": 1e-7})                       \n        \n        self.roberta = AutoModel.from_pretrained(ROBERTA_PATH, config=config)  \n            \n        self.attention = nn.Sequential(            \n            nn.Linear(768, 512),            \n            nn.Tanh(),                       \n            nn.Linear(512, 1),\n            nn.Softmax(dim=1)\n        )        \n\n        self.regressor = nn.Sequential(                        \n            nn.Linear(768, 1)                        \n        )\n        \n\n    def forward(self, input_ids, attention_mask):\n        roberta_output = self.roberta(input_ids=input_ids,\n                                      attention_mask=attention_mask)        \n\n        # There are a total of 13 layers of hidden states.\n        # 1 for the embedding layer, and 12 for the 12 Roberta layers.\n        # We take the hidden states from the last Roberta layer.\n        last_layer_hidden_states = roberta_output.hidden_states[-1]\n\n        # The number of cells is MAX_LEN.\n        # The size of the hidden state of each cell is 768 (for roberta-base).\n        # In order to condense hidden states of all cells to a context vector,\n        # we compute a weighted average of the hidden states of all cells.\n        # We compute the weight of each cell, using the attention neural network.\n        weights = self.attention(last_layer_hidden_states)\n                \n        # weights.shape is BATCH_SIZE x MAX_LEN x 1\n        # last_layer_hidden_states.shape is BATCH_SIZE x MAX_LEN x 768        \n        # Now we compute context_vector as the weighted average.\n        # context_vector.shape is BATCH_SIZE x 768\n        context_vector = torch.sum(weights * last_layer_hidden_states, dim=1)        \n        \n        # Now we reduce the context vector to the prediction score.\n        return self.regressor(context_vector)","27eb0a17":"def predict(model, data_loader):\n    \"\"\"Returns an np.array with predictions of the |model| on |data_loader|\"\"\"\n    model.eval()\n\n    result = np.zeros(len(data_loader.dataset))    \n    index = 0\n    \n    with torch.no_grad():\n        for batch_num, (input_ids, attention_mask) in enumerate(data_loader):\n            input_ids = input_ids.to(DEVICE)\n            attention_mask = attention_mask.to(DEVICE)\n                        \n            pred = model(input_ids, attention_mask)                        \n\n            result[index : index + pred.shape[0]] = pred.flatten().to(\"cpu\")\n            index += pred.shape[0]\n\n    return result","ba132856":"test_dataset = LitDataset(test_df, inference_only=True)","73b70957":"NUM_MODELS = 5\n\nall_predictions = np.zeros((NUM_MODELS, len(test_df)))\n\n\n\ntest_dataset = LitDataset(test_df, inference_only=True)\ntest_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE,\n                         drop_last=False, shuffle=False, num_workers=2)\n\nfor model_index in range(NUM_MODELS):            \n    model_path = f\"..\/input\/commonlit-roberta-0467\/model_{model_index + 1}.pth\"\n    print(f\"\\nUsing {model_path}\")\n                        \n    model = LitModel()\n    model.load_state_dict(torch.load(model_path, map_location=DEVICE))    \n    model.to(DEVICE)\n        \n    all_predictions[model_index] = predict(model, test_loader)\n            \n    del model\n    gc.collect()","339184f1":"averaging_weights = np.array([1, 2, 3, 2, 1], dtype=np.float32)\naveraging_weights = averaging_weights \/ averaging_weights.sum()\nmodel1_prediction = np.average(np.sort(all_predictions, axis=0), axis=0, weights=averaging_weights)","c19f6e67":"import os\nfrom pathlib import Path\n\nmodel_packs = [\n    \"..\/input\/clrp-finetune-roberta-large-123\",    \n]\n\nmodels_preds = []\n\nfor model_pack in model_packs:\n    in_folder_path = Path(model_pack)\n    scripts_dir = Path(in_folder_path \/ 'scripts')\n    os.chdir(scripts_dir)\n    exec(Path(\"imports.py\").read_text())\n    exec(Path(\"config.py\").read_text())\n    exec(Path(\"dataset.py\").read_text())\n    exec(Path(\"model.py\").read_text())\n    os.chdir('\/kaggle\/working')\n    test_df = pd.read_csv(\"\/kaggle\/input\/commonlitreadabilityprize\/test.csv\")\n\n    #tokenizer = torch.load('..\/input\/tokenizers\/roberta-tokenizer.pt')\n    tokenizer = AutoTokenizer.from_pretrained(\"..\/input\/robertalarge\")\n    \n    models_folder_path = Path(in_folder_path \/ 'models')    \n    n_models = 5\n\n    for model_num in range(n_models):\n        print(f'Inference#{model_num+1}\/{n_models}')\n        test_ds = CLRPDataset(data=test_df, tokenizer=tokenizer, max_len=Config.max_len, is_test=True)\n        test_sampler = SequentialSampler(test_ds)\n        test_dataloader = DataLoader(test_ds, sampler = test_sampler, batch_size=Config.batch_size)\n        model = torch.load(models_folder_path \/ f'best_model_{model_num}.pt').to(Config.device)\n\n        all_preds = []\n        model.eval()\n\n        for step,batch in enumerate(test_dataloader):\n            sent_id, mask = batch['input_ids'].to(Config.device), batch['attention_mask'].to(Config.device)\n            with torch.no_grad():\n                preds = model(sent_id, mask)\n                all_preds += preds.flatten().cpu().tolist()\n\n        models_preds.append(all_preds)\n\nmodels_preds = np.array(models_preds)\nprint(np.sort(models_preds[:, :5], axis=0))\n\nmodel2_prediction = models_preds.mean(axis=0)","1efe6e98":"import os\nimport numpy as np\nimport pandas as pd\nimport random\n\nfrom transformers import AutoConfig, AutoModel, AutoTokenizer, AdamW, get_linear_schedule_with_warmup, logging\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, TensorDataset, SequentialSampler, RandomSampler, DataLoader\n\nfrom tqdm.notebook import tqdm\n\nimport gc; gc.enable()\nfrom IPython.display import clear_output\n\nfrom sklearn.model_selection import StratifiedKFold\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style('whitegrid')\nlogging.set_verbosity_error()\nINPUT_DIR = '..\/input\/commonlitreadabilityprize'\nMODEL_DIR = '..\/input\/robertalarge'\nCHECKPOINT_DIR = '..\/input\/best-transformer-representations-94cff1\/'\n\nDEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\nMAX_LENGTH = 300\nTEST_BATCH_SIZE = 1\nHIDDEN_SIZE = 1024\n\nNUM_FOLDS = 5\nSEEDS = [113, 71]\ntest = pd.read_csv(os.path.join(INPUT_DIR, 'test.csv'))\n\nclass MeanPoolingModel(nn.Module):\n    \n    def __init__(self, model_name):\n        super().__init__()\n        \n        config = AutoConfig.from_pretrained(model_name)\n        self.model = AutoModel.from_pretrained(model_name, config=config)\n        self.linear = nn.Linear(HIDDEN_SIZE, 1)\n        self.loss = nn.MSELoss()\n        \n    def forward(self, input_ids, attention_mask, labels=None):\n        \n        outputs = self.model(input_ids, attention_mask)\n        last_hidden_state = outputs[0]\n        input_mask_expanded = attention_mask.unsqueeze(-1).expand(last_hidden_state.size()).float()\n        sum_embeddings = torch.sum(last_hidden_state * input_mask_expanded, 1)\n        sum_mask = input_mask_expanded.sum(1)\n        sum_mask = torch.clamp(sum_mask, min=1e-9)\n        mean_embeddings = sum_embeddings \/ sum_mask\n        logits = self.linear(mean_embeddings)\n        \n        preds = logits.squeeze(-1).squeeze(-1)\n        \n        if labels is not None:\n            loss = self.loss(preds.view(-1).float(), labels.view(-1).float())\n            return loss\n        else:\n            return preds\ndef get_test_loader(data):\n\n    x_test = data.excerpt.tolist()\n    \n    tokenizer = AutoTokenizer.from_pretrained(MODEL_DIR)\n\n    encoded_test = tokenizer.batch_encode_plus(\n        x_test, \n        add_special_tokens=True, \n        return_attention_mask=True, \n        padding='max_length', \n        truncation=True,\n        max_length=MAX_LENGTH, \n        return_tensors='pt'\n    )\n\n    dataset_test = TensorDataset(\n        encoded_test['input_ids'],\n        encoded_test['attention_mask']\n    )\n\n    dataloader_test = DataLoader(\n        dataset_test,\n        sampler = SequentialSampler(dataset_test),\n        batch_size=TEST_BATCH_SIZE\n    )\n    \n    return dataloader_test\n\ntest_dataloader = get_test_loader(test)\nall_predictions = []\nfor seed in SEEDS:\n    \n    fold_predictions = []\n    \n    for fold in tqdm(range(NUM_FOLDS)):\n        model_path = f\"model_{seed + 1}_{fold + 1}.pth\"\n        \n        print(f\"\\nUsing {model_path}\")\n        \n        model_path = CHECKPOINT_DIR + f\"model_{seed + 1}_{fold + 1}.pth\"\n        model = MeanPoolingModel(MODEL_DIR)\n        model.load_state_dict(torch.load(model_path)) \n        model.to(DEVICE)\n        model.eval()\n\n        predictions = []\n        for batch in test_dataloader:\n\n            batch = tuple(b.to(DEVICE) for b in batch)\n\n            inputs = {'input_ids':      batch[0],\n                      'attention_mask': batch[1],\n                      'labels':         None,\n                     }\n\n     \n            preds = model(**inputs).item()\n            predictions.append(preds)\n            \n        del model \n        gc.collect()\n            \n        fold_predictions.append(predictions)\n    all_predictions.append(np.mean(fold_predictions, axis=0).tolist())\n    \nmodel3_prediction = np.mean(all_predictions,axis=0)","f860b25f":"final_prediction = (model1_prediction + model2_prediction + model3_prediction) \/ 3.","b49ab49d":"submission_df.target = final_prediction\nprint(submission_df)\nsubmission_df.to_csv(\"submission.csv\", index=False)","f594a7ae":"# Model 1","bbf12d99":"# Inference","2f0b5f50":"# Model\nThe model is inspired by the one from [Maunish](https:\/\/www.kaggle.com\/maunish\/clrp-roberta-svm).","a23e5f9c":"# Overview\n\nThe ensemble includes models from:\n\n[https:\/\/www.kaggle.com\/andretugan\/pre-trained-roberta-solution-in-pytorch](https:\/\/www.kaggle.com\/andretugan\/pre-trained-roberta-solution-in-pytorch)\n\n[https:\/\/www.kaggle.com\/chamecall\/clrp-inference](https:\/\/www.kaggle.com\/chamecall\/clrp-inference)\n\n[https:\/\/www.kaggle.com\/rajat95gupta\/mean-pooling-4-seeds](https:\/\/www.kaggle.com\/rajat95gupta\/mean-pooling-4-seeds)","09f93dc2":"# Dataset","e51aa271":"# Model 2\nImported from [https:\/\/www.kaggle.com\/chamecall\/clrp-inference](https:\/\/www.kaggle.com\/chamecall\/clrp-inference)","3fe44177":"# Model 3\nImported from [https:\/\/www.kaggle.com\/rajat95gupta\/mean-pooling-4-seeds](https:\/\/www.kaggle.com\/rajat95gupta\/mean-pooling-4-seeds)"}}