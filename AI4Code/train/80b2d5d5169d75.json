{"cell_type":{"2746e0a3":"code","3e67d380":"code","c6591f91":"code","dc473ecb":"code","68471b8b":"code","14259c72":"code","af1aa1fc":"code","f6be1487":"code","21b696da":"code","7ca96825":"code","823e15a0":"code","864bc2e2":"code","3cca8b73":"code","726b2037":"code","c06073d6":"code","5f69f729":"code","42a8b189":"code","b95a3d79":"code","08838cd9":"code","1b8f836b":"code","1fdbba28":"code","05d4c3c2":"code","9f4a9384":"code","fe24abe5":"markdown","37458cfb":"markdown","9d808ad2":"markdown","a5f97b58":"markdown"},"source":{"2746e0a3":"#import library\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","3e67d380":"movies = pd.read_csv('..\/input\/updatedtmdb-movies-dataset\/tmdb_movies_dataset.csv')","c6591f91":"movies.shape","dc473ecb":"movies.head()","68471b8b":"#drop unnamed: 0\nmovies = movies.drop('Unnamed: 0', 1)\nmovies.head()","14259c72":"movies.describe()","af1aa1fc":"movies.info()","f6be1487":"#heatmap correlation\nplt.figure(figsize = (10,6))\nsns.heatmap(movies.corr(), vmax = 0.9, square = True)\nplt.title(\"Pearson Correlation\")\nplt.show()","21b696da":"#selection data\ndf = movies[['id', 'title', 'release_date', 'popularity', 'vote_average', 'vote_count']]\ndf.head()","7ca96825":"#handling categorical data\ndf = pd.get_dummies(df, drop_first = True)\ndf.head()","823e15a0":"#split data\ndf = df.set_index('id')\n\nX = df.drop('vote_count', axis = 1)\ny = df['vote_count']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","864bc2e2":"#build model\nlr = LinearRegression()\nmodel = %time lr.fit(X_train, y_train)\nprint(model)","3cca8b73":"#prediction \ny_pred = lr.predict(X_test)\nprint(y_pred)","726b2037":"#result\nprediction = pd.DataFrame({'Actual' : y_test, 'Predicted' : y_pred})\nprediction.head()","c06073d6":"#visualize actual & prediction\nplt.figure(figsize = (10, 6))\nax = sns.distplot(y, hist = False, color = \"r\", label = \"Actual\")\nsns.distplot(y_pred, hist = False, color = \"b\", label = \"Predicted\" , ax = ax)\nplt.title('Actual vs Predicted for Price')\nplt.legend()\nplt.show()","5f69f729":"#check MAE\nprint('Mean Absolute Error : ', metrics.mean_absolute_error(y_test, y_pred).round(2))","42a8b189":"#check MSE\nprint('Mean Squared Error : ', metrics.mean_squared_error(y_test, y_pred).round(2))","b95a3d79":"#check RMSE\nprint('Root Mean Squared Error : ', np.sqrt(metrics.mean_absolute_error(y_test, y_pred).round(2)))","08838cd9":"#check R squared\nprint('R Squared : ', metrics.r2_score(y_test, y_pred))","1b8f836b":"#visualize model\nx = y_test\ny = y_pred\n\nplt.figure(figsize = (10,6))\nplt.title(\"Linear Regression Plot Model\")\nplt.plot(x, y, 'o')\n\nm, b = np.polyfit(x, y, 1)\nplt.plot(x, m * x + b)","1fdbba28":"#distribution\nplt.figure(figsize = (10,6))\nsns.distplot(df['vote_count'])\nplt.title(\"Distribution of Vote\")\nplt.show()","05d4c3c2":"#defining feature\ncoef = pd.Series(model.coef_, index = X.columns)\n\nimp_coef = pd.concat([coef.sort_values().head(10),\n                     coef.sort_values().tail(10)])","9f4a9384":"#visualize feature\nplt.figure(figsize = (10,6))\nimp_coef.plot(kind = 'barh')\nplt.title(\"Feature Importance\")\nplt.xlabel('Score')\nplt.ylabel('Features')\nplt.show()","fe24abe5":"## Linear Regression Model","37458cfb":"## Check Feature Importance","9d808ad2":"## Data Extraction","a5f97b58":"# Recommendation TMDB Movies"}}