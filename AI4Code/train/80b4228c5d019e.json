{"cell_type":{"aa149a7a":"code","cd0d2ab8":"code","975f6ad9":"code","b11f2e37":"code","1d156650":"code","7ee0ca11":"code","45939d0d":"code","53a1a319":"code","d329a8e4":"code","83991e83":"code","60860593":"code","b9b1caa5":"code","a188806e":"code","8cb0cf77":"code","6922731e":"code","374b8683":"code","005c1237":"markdown"},"source":{"aa149a7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cd0d2ab8":"train_cat_dir = os.path.join(\"\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/cats\/\")\ntrain_dog_dir = os.path.join(\"\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/dogs\/\")\n\nvalidation_cat_dir = os.path.join(\"\/kaggle\/input\/cat-and-dog\/test_set\/test_set\/cats\/\")\nvalidation_dog_dir = os.path.join(\"\/kaggle\/input\/cat-and-dog\/test_set\/test_set\/dogs\/\")\n    ","975f6ad9":"train_cat_names = os.listdir(train_cat_dir)\nprint(train_cat_names[:5])\ntrain_dog_names = os.listdir(train_dog_dir)\nprint(train_dog_names[:5])\n\nvalidation_cat_name = os.listdir(validation_cat_dir)\nprint(validation_cat_name[:5])\nvalidation_dog_names = os.listdir(validation_dog_dir)\nprint(validation_dog_names[:5])","b11f2e37":"print(\"total training cat images : \", len(os.listdir(train_cat_dir)))\nprint(\"total training dog images : \", len(os.listdir(train_dog_dir)))\n\nprint(\"total validation cat images : \", len(os.listdir(validation_cat_dir)))\nprint(\"total validation dog images : \", len(os.listdir(validation_dog_dir)))","1d156650":"%matplotlib inline\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\n# Parameter for our graph; we'll output images in a 4x4 configuration\nnrows = 4\nncols = 4\n\n# Index for iterating over images\npic_index = 0","7ee0ca11":"# Set up matplotlib fig, and size it to fit 4x4 pics\nfig = plt.gcf()\nfig.set_size_inches(ncols * 4, nrows * 4)\n\n\npic_index += 8\nnext_cat_pix = [os.path.join(train_cat_dir, fname) \n                for fname in train_cat_names[pic_index-8:pic_index]]\nnext_dog_pix = [os.path.join(train_dog_dir, fname) \n                for fname in train_dog_names[pic_index-8:pic_index]]\n\nfor i, img_path in enumerate(next_cat_pix+next_dog_pix):\n  # Set up subplot; subplot indices start at 1\n  sp = plt.subplot(nrows, ncols, i + 1)\n  sp.axis('Off') # Don't show axes (or gridlines)\n\n  img = mpimg.imread(img_path)\n  plt.imshow(img)\n\nplt.show()","45939d0d":"import tensorflow as tf\nfrom tensorflow import keras","53a1a319":"model = keras.Sequential([\n    \n    keras.layers.Conv2D(16,(3,3),activation=\"relu\",input_shape=(300,300,3)),\n    keras.layers.MaxPooling2D(2,2),\n    \n    keras.layers.Conv2D(32,(3,3),activation=\"relu\"),\n    keras.layers.MaxPooling2D(2,2),\n    \n    keras.layers.Conv2D(32,(3,3),activation=\"relu\"),\n    keras.layers.MaxPooling2D(2,2),\n    \n    keras.layers.Flatten(),\n    keras.layers.Dense(512,activation=\"relu\"),\n    keras.layers.Dense(1,activation=\"sigmoid\")\n])","d329a8e4":"model.summary()","83991e83":"model.compile(optimizer=keras.optimizers.RMSprop(learning_rate=0.001),\n             loss=\"binary_crossentropy\",\n             metrics=['accuracy'])","60860593":"from keras.preprocessing.image import ImageDataGenerator","b9b1caa5":"# All images will be rescaled by 1.\/255\ntrain_datagen = ImageDataGenerator(rescale=1\/255)\ntest_datagen = ImageDataGenerator(rescale=1\/255)\n\n# flow training images in batches of 128 using train_datagen generator\ntrain_generator = train_datagen.flow_from_directory(\"\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/\",\n                                                   target_size=(300,300),\n                                                   batch_size=32,\n                                                   class_mode=\"binary\")\n\n\n# flow test images in batches of 128 using test_datagen generator\ntest_generator = test_datagen.flow_from_directory(\"\/kaggle\/input\/cat-and-dog\/test_set\/test_set\/\",\n                                                 target_size=(300,300),\n                                                 batch_size=32,\n                                                 class_mode=\"binary\")","a188806e":"history = model.fit(train_generator,\n                   steps_per_epoch=8,\n                   epochs=50,\n                   verbose=1,\n                   validation_data=test_generator,\n                   validation_steps=8)","8cb0cf77":"import numpy as np\nimport cv2\nfrom keras.preprocessing import image","6922731e":"path = \"\/kaggle\/input\/images\/d2.jpeg\"\n\n\nimg = image.load_img(path,target_size=(300,300))\nx = image.img_to_array(img)\nx = np.expand_dims(x,axis=0)\n\nimages = np.vstack([x])\nclasses = model.predict(images,batch_size=10)\nprint(classes[0])\nif classes[0] > 0.5:\n    print(\"This IS A DOG.\")\nelse:\n    print(\"This IS A CAT.\")\n    \n","374b8683":"# check the image is cat or dog with open-cv or model predicted right or not\npath = \"\/kaggle\/input\/images\/d2.jpeg\"\nimage.load_img(path)","005c1237":"## Building Model "}}