{"cell_type":{"8703bc2c":"code","cc75af8c":"code","4dbeef8e":"code","bf307d20":"code","ba7f8665":"code","352e0816":"code","0fd37c8e":"code","188285cc":"code","9d7157ae":"code","dd95b504":"code","b67dbc9b":"code","cc2a6592":"code","7aaf5f94":"code","71f4dbfc":"code","fdeec07f":"code","fa104d1a":"code","0be1809b":"code","9e6a2c02":"code","9f6cba97":"code","889d60c2":"code","d25a7e44":"code","39b7b036":"code","9d154976":"code","1fbd595a":"code","b3f41c69":"code","dd05a7b7":"code","be8b0a21":"code","1a2f3c68":"markdown","cc8c01de":"markdown","3272051d":"markdown","a83ec7fd":"markdown","11b5510a":"markdown"},"source":{"8703bc2c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\nfrom joblib import dump, load","cc75af8c":"#2021\ndf2021_round1=pd.read_excel(\"First_Round_Opening_Closing_Ranks.xlsx\")\ndf2021_round2=pd.read_excel(\"Second_Round_Opening_Closing_Ranks.xlsx\")\ndf2021_round3=pd.read_excel(\"Third_Round_Opening_Closing_Ranks.xlsx\")\n\n#2019\ndf2019_round1=pd.read_excel(\"JAM2019_cutoffRound1.xlsx\",sheet_name=\"Table 2\")\ndf2019_round2=pd.read_excel(\"JAM2019_cutoffRound2.xlsx\",sheet_name=\"Table 2\")\ndf2019_round3=pd.read_excel(\"JAM2019_cutoffRound3.xlsx\",sheet_name=\"Table 1\")\ndf2019_round32=pd.read_excel(\"JAM2019_cutoffRound3.xlsx\",sheet_name=\"Table 2\")\n\n","4dbeef8e":"df2019_round1.head(3)","bf307d20":"df2021_round1.head()","ba7f8665":"#Renaming some columns\ndf2019_round1=df2019_round1.rename(columns={\"ZoneName\":\"Institute\",\"CourseName\":\"Course\"})\ndf2019_round2=df2019_round2.rename(columns={\"ZoneName\":\"Institute\",\"CourseName\":\"Course\"})\ndf2019_round3=df2019_round3.rename(columns={\"ZoneName\":\"Institute\",\"CourseName\":\"Course\"})","352e0816":"#Checking the number of IITs and the courses\nprint(f\"The number of unique IITs participating in JAM is :- {len(df2021_round1['Institute'].unique())}\")\nprint(f\"The number of unique courses offered by IITs after JAM qualification is :- {len(df2021_round1['Course'].unique())}\")","0fd37c8e":"#Creating different DataFrames for different castes (Round1)\ndf2021_round1gn=df2021_round1[['Institute','Course','Closing_gn']]\ndf2021_round1obc=df2021_round1[['Institute','Course','Closing_obc']]\ndf2021_round1sc=df2021_round1[['Institute','Course','Closing_sc']]\ndf2021_round1st=df2021_round1[['Institute','Course','Closing_st']]\n#Round2\ndf2021_round2gn=df2021_round2[['Institute','Course','Closing_gn']]\ndf2021_round2obc=df2021_round2[['Institute','Course','Closing_obc']]\ndf2021_round2sc=df2021_round2[['Institute','Course','Closing_sc']]\ndf2021_round2st=df2021_round2[['Institute','Course','Closing_st']]\n#Round3\ndf2021_round3gn=df2021_round3[['Institute','Course','Closing_gn']]\ndf2021_round3obc=df2021_round3[['Institute','Course','Closing_obc']]\ndf2021_round3sc=df2021_round3[['Institute','Course','Closing_sc']]\ndf2021_round3st=df2021_round3[['Institute','Course','Closing_st']]","188285cc":"#Creating different DataFrames for different castes (Round1)\ndf2019_round1gn=df2019_round1[['Institute','Course','Closing_gn']]\ndf2019_round1obc=df2019_round1[['Institute','Course','Closing_obc']]\ndf2019_round1sc=df2019_round1[['Institute','Course','Closing_sc']]\ndf2019_round1st=df2019_round1[['Institute','Course','Closing_st']]\n#Round2\ndf2019_round2gn=df2019_round2[['Institute','Course','Closing_gn']]\ndf2019_round2obc=df2019_round2[['Institute','Course','Closing_obc']]\ndf2019_round2sc=df2019_round2[['Institute','Course','Closing_sc']]\ndf2019_round2st=df2019_round2[['Institute','Course','Closing_st']]\n#Round3\ndf2019_round3gn=df2019_round3[['Institute','Course','Closing_gn']]\ndf2019_round3obc=df2019_round3[['Institute','Course','Closing_obc']]\ndf2019_round3sc=df2019_round3[['Institute','Course','Closing_sc']]\ndf2019_round3st=df2019_round3[['Institute','Course','Closing_st']]","9d7157ae":"#Number of courses in differnt IITs\ndf2019_round1obc[\"Institute\"].value_counts()","dd95b504":"#Number of courses in differnt IITs\ndf2021_round1obc[\"Institute\"].value_counts()","b67dbc9b":"# Joining all the rounds for different castes\n#2021\ndf2021_obc=pd.concat([df2021_round1obc,df2021_round2obc,df2021_round3obc,df2019_round1obc,\n                      df2019_round2obc,df2019_round1obc],axis=0)\n\ndf2021_gn=pd.concat([df2021_round1gn,df2021_round2gn,df2021_round3gn,df2019_round1gn,\n                     df2019_round2gn,df2019_round3gn],axis=0)\n\ndf2021_sc=pd.concat([df2021_round1sc,df2021_round2sc,df2021_round3sc,df2019_round1sc,\n                     df2019_round2sc,df2019_round3sc],axis=0)\n\ndf2021_st=pd.concat([df2021_round1st,df2021_round2st,df2021_round3st,df2019_round1st,\n                     df2019_round2st,df2019_round3st],axis=0)\n","cc2a6592":"#Resetting the index\ndf2021_obc=(df2021_obc.reset_index()).drop(columns=['index'])\ndf2021_gn=(df2021_gn.reset_index()).drop(columns=['index'])\ndf2021_sc=(df2021_sc.reset_index()).drop(columns=['index'])\ndf2021_st=(df2021_st.reset_index()).drop(columns=['index'])","7aaf5f94":"#Dropping the entries with a null(\"-\") value\nitr=df2021_obc.shape[0]\nfor i in range(0,itr):\n    if df2021_obc[\"Closing_obc\"][i]==\"-\":\n        df2021_obc=df2021_obc.drop([i],axis=0)\n\n        \nitr=df2021_gn.shape[0]\nfor i in range(0,itr):\n    if df2021_gn[\"Closing_gn\"][i]==\"-\":\n        df2021_gn=df2021_gn.drop([i],axis=0)\n \n        \nitr=df2021_sc.shape[0]\nfor i in range(0,itr):\n    if df2021_sc[\"Closing_sc\"][i]==\"-\":\n        df2021_sc=df2021_sc.drop([i],axis=0)\n        \nitr=df2021_st.shape[0]\nfor i in range(0,itr):\n    if df2021_st[\"Closing_st\"][i]==\"-\":\n        df2021_st=df2021_st.drop([i],axis=0)\n","71f4dbfc":"# The shape of the dataframes\nprint(f\"The shape of General Data Frame is :- {df2021_gn.shape}\")\nprint(f\"The shape of OBC Data Frame is :- {df2021_obc.shape}\")\nprint(f\"The shape of SC Data Frame is :- {df2021_sc.shape}\")\nprint(f\"The shape of ST Data Frame is :- {df2021_st.shape}\")","fdeec07f":"#Checking Null values\ndf2021_gn.isnull().sum()","fa104d1a":"#Lets visualize the scores\ndata=df2021_obc[\"Closing_obc\"]\ndata.plot(kind=\"hist\")\nplt.title(\"Histogram for obc rank\")\nplt.show()","0be1809b":"# Creating target features and dependent features\n#General\nX_gn=df2021_gn.drop(columns='Institute')\ny_gn=df2021_gn['Institute']\n#OBC\nX_obc=df2021_obc.drop(columns='Institute')\ny_obc=df2021_obc['Institute']\n#SC\nX_sc=df2021_sc.drop(columns='Institute')\ny_sc=df2021_sc['Institute']\n#ST\nX_st=df2021_st.drop(columns='Institute')\ny_st=df2021_st['Institute']","9e6a2c02":"#Uisng Column Transformer for using two feature engineering methods\n#Gen\ntransformer_gen =ColumnTransformer([\n    (\"Onehot\",OneHotEncoder(),['Course']),\n    (\"scalar\",StandardScaler(),['Closing_gn'])\n])\n#OBC\ntransformer_obc =ColumnTransformer([\n    (\"Onehot\",OneHotEncoder(),['Course']),\n    (\"scalar\",StandardScaler(),['Closing_obc'])\n])\n#SC\ntransformer_sc =ColumnTransformer([\n    (\"Onehot\",OneHotEncoder(),['Course']),\n    (\"scalar\",StandardScaler(),['Closing_sc'])\n])\n#ST\ntransformer_st =ColumnTransformer([\n    (\"Onehot\",OneHotEncoder(),['Course']),\n    (\"scalar\",StandardScaler(),['Closing_st'])\n])","9f6cba97":"#creating a pipeline to transform the data and fit the model\n#Gen\npipe_gn=Pipeline([\n    ('trans',transformer_gen),(\"clf\",RandomForestClassifier())\n])\n#obc\npipe_obc=Pipeline([\n    ('trans',transformer_obc),(\"clf\",RandomForestClassifier())\n])\n#sc\npipe_sc=Pipeline([\n    ('trans',transformer_sc),(\"clf\",RandomForestClassifier())\n])\n#st\npipe_st=Pipeline([\n    ('trans',transformer_st),(\"clf\",RandomForestClassifier())\n])","889d60c2":"#Fitting the pipeline with X_train and y_train data\npipe_gn.fit(X_gn,y_gn)\npipe_obc.fit(X_obc,y_obc)\npipe_sc.fit(X_sc,y_sc)\npipe_st.fit(X_st,y_st)","d25a7e44":"\n#Training accuracy\n#gen\ntrain_predgn=pipe_gn.predict(X_gn)\nprint(f\"The training accuracy of General Category is : {accuracy_score(train_predgn,y_gn)}\")\n#obc\ntrain_predobc=pipe_obc.predict(X_obc)\nprint(f\"The training accuracy of OBC Category is : {accuracy_score(train_predobc,y_obc)}\")\n#SC\ntrain_predsc=pipe_sc.predict(X_sc)\nprint(f\"The training accuracy of SC Category is : {accuracy_score(train_predsc,y_sc)}\")\n#ST\ntrain_predst=pipe_st.predict(X_st)\nprint(f\"The training accuracy of ST Category is : {accuracy_score(train_predst,y_st)}\")","39b7b036":"#df2021_obc[\"Course\"].value_counts()","9d154976":"#Custom test dataframe\ndata={\"Course\":[\"PHYSICS\"],\"Closing_obc\":[741]}\ndf_test=pd.DataFrame(data=data)\ndf_test","1fbd595a":"train_pred=pipe_obc.predict(df_test)","b3f41c69":"train_pred","dd05a7b7":"Course=\"APPLIED GEOLOGY\"\nCaste=\"OBC\"\nRank=98\nif Caste==\"GEN\":\n    data={\"Course\":[Course],\"Closing_gn\":[Rank]}\n    df_test=pd.DataFrame(data)\n    print(pipe_gn.predict(df_test))\nelif Caste==\"OBC\":\n    data={\"Course\":[Course],\"Closing_obc\":[Rank]}\n    df_test=pd.DataFrame(data)\n    print(pipe_obc.predict(df_test))\nelif Caste==\"SC\":\n    data={\"Course\":[Course],\"Closing_gn\":[Rank]}\n    df_test=pd.DataFrame(data)\n    print(pipe_sc.predict(df_test))\nelif Caste==\"ST\":\n    data={\"Course\":[Course],\"Closing_gn\":[Rank]}\n    df_test=pd.DataFrame(data)\n    print(pipe_st.predict(df_test))\n    ","be8b0a21":"#Dumping the pipelines\ndump(pipe_gn,\"pipe_gn.joblib\")\ndump(pipe_obc,\"pipe_obc.joblib\")\ndump(pipe_sc,\"pipe_sc.joblib\")\ndump(pipe_st,\"pipe_st.joblib\")","1a2f3c68":"Note:- All the year cutoffs will be merged with the 2021 cutoff","cc8c01de":"#### 2021","3272051d":"Writing a if clause to check the provided caste by the user and accordingly calling the required pipeline","a83ec7fd":"We will create different models for General Category,OBC NCl category,SC category, ST category and then will deploying the final model we will use if clause that will check the caste of the student and on the basis of that the particular model will be triggered","11b5510a":"#### 2019"}}