{"cell_type":{"84551c99":"code","ff7e4c17":"code","601d96a6":"code","2576bc0a":"code","d8a37945":"code","aef31d86":"code","00239c42":"code","c9ec6412":"code","0ceb3bc2":"code","472b265a":"code","136f0d66":"code","ed0f15fd":"code","f33e221f":"code","b4990f99":"code","0a8ddb47":"code","00642ba5":"code","f5b5a96a":"code","da91cde6":"code","d393ad1d":"code","8dca5208":"code","e2dd29a6":"code","44942a1c":"code","ec946bdc":"code","3a6879a8":"code","b4f09473":"code","9a032ca2":"code","6a022134":"code","fc8463c7":"markdown","01252c6e":"markdown","4e1b8ff4":"markdown","22495009":"markdown","726211b4":"markdown","53794409":"markdown","24562b3a":"markdown","469a0e4f":"markdown","4c46f0f6":"markdown","bd73a982":"markdown","34c3bd22":"markdown","77ebdfb2":"markdown","ee01e43d":"markdown","55af7050":"markdown","31eb23a7":"markdown"},"source":{"84551c99":"#Load the necessary python libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')","ff7e4c17":"#Load the dataset\ndf = pd.read_csv('..\/input\/diabetes.csv')\n\n#Print the first 5 rows of the dataframe.\ndf.head()","601d96a6":"#Let's observe the shape of the dataframe.\ndf.shape","2576bc0a":"#Let's create numpy arrays for features and target\nX = df.drop('Outcome',axis=1).values\ny = df['Outcome'].values","d8a37945":"#importing train_test_split\nfrom sklearn.model_selection import train_test_split","aef31d86":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.4,random_state=42, stratify=y)","00239c42":"#import KNeighborsClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\n#Setup arrays to store training and test accuracies\nneighbors = np.arange(1,9)\ntrain_accuracy =np.empty(len(neighbors))\ntest_accuracy = np.empty(len(neighbors))\n\nfor i,k in enumerate(neighbors):\n    #Setup a knn classifier with k neighbors\n    knn = KNeighborsClassifier(n_neighbors=k)\n    \n    #Fit the model\n    knn.fit(X_train, y_train)\n    \n    #Compute accuracy on the training set\n    train_accuracy[i] = knn.score(X_train, y_train)\n    \n    #Compute accuracy on the test set\n    test_accuracy[i] = knn.score(X_test, y_test) ","c9ec6412":"#Generate plot\nplt.title('k-NN Varying number of neighbors')\nplt.plot(neighbors, test_accuracy, label='Testing Accuracy')\nplt.plot(neighbors, train_accuracy, label='Training accuracy')\nplt.legend()\nplt.xlabel('Number of neighbors')\nplt.ylabel('Accuracy')\nplt.show()","0ceb3bc2":"#Setup a knn classifier with k neighbors\nknn = KNeighborsClassifier(n_neighbors=7)","472b265a":"#Fit the model\nknn.fit(X_train,y_train)","136f0d66":"#Get accuracy. Note: In case of classification algorithms score method represents accuracy.\nknn.score(X_test,y_test)","ed0f15fd":"#import confusion_matrix\nfrom sklearn.metrics import confusion_matrix","f33e221f":"#let us get the predictions using the classifier we had fit above\ny_pred = knn.predict(X_test)","b4990f99":"confusion_matrix(y_test,y_pred)","0a8ddb47":"pd.crosstab(y_test, y_pred, rownames=['True'], colnames=['Predicted'], margins=True)","00642ba5":"#import classification_report\nfrom sklearn.metrics import classification_report","f5b5a96a":"print(classification_report(y_test,y_pred))","da91cde6":"y_pred_proba = knn.predict_proba(X_test)[:,1]","d393ad1d":"from sklearn.metrics import roc_curve","8dca5208":"fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)","e2dd29a6":"plt.plot([0,1],[0,1],'k--')\nplt.plot(fpr,tpr, label='Knn')\nplt.xlabel('fpr')\nplt.ylabel('tpr')\nplt.title('Knn(n_neighbors=7) ROC curve')\nplt.show()","44942a1c":"#Area under ROC curve\nfrom sklearn.metrics import roc_auc_score\nroc_auc_score(y_test,y_pred_proba)","ec946bdc":"#import GridSearchCV\nfrom sklearn.model_selection import GridSearchCV","3a6879a8":"#In case of classifier like knn the parameter to be tuned is n_neighbors\nparam_grid = {'n_neighbors':np.arange(1,50)}","b4f09473":"knn = KNeighborsClassifier()\nknn_cv= GridSearchCV(knn,param_grid,cv=5)\nknn_cv.fit(X,y)","9a032ca2":"knn_cv.best_score_","6a022134":"knn_cv.best_params_","fc8463c7":"Hope you find it useful. :)please upvote","01252c6e":"**Confusion Matrix**\n\nA confusion matrix is a table that is often used to describe the performance of a classification model (or \"classifier\") on a set of test data for which the true values are known. Scikit-learn provides facility to calculate confusion matrix using the confusion_matrix method.","4e1b8ff4":"Considering confusion matrix above:\n\nTrue negative = 165\n\nFalse positive = 36\n\nTrue postive = 60\n\nFasle negative = 47","22495009":"Confusion matrix can also be obtained using crosstab method of pandas.","726211b4":"**Classification Report**\n\nAnother important report is the Classification report. It is a text summary of the precision, recall, F1 score for each class. Scikit-learn provides facility to calculate Classification report using the classification_report method.","53794409":"Thus a knn classifier with number of neighbors as 14 achieves the best score\/accuracy of 0.7578 i.e about 76%","24562b3a":"Let's split the data randomly into training and test set. \n\nWe will fit\/train a classifier on the training set and make predictions on the test set. Then we will compare the predictions with the known labels.\n\nScikit-learn provides facility to split data into train and test set using train_test_split method.","469a0e4f":"As observed above we have 768 rows and 9 columns. The first 8 columns represent the features and the last column represent the target\/label. ","4c46f0f6":"Let's create a classifier using k-Nearest Neighbors algorithm.\n\nFirst let us first observe the accuracies for different values of k.","bd73a982":"It is a best practice to perform our split in such a way that out split reflects the labels in the data. In other words, we want labels to be split in train and test set as they are in the original dataset. So we use the stratify argument.\n\nAlso we create a test set of size of about 40% of the dataset.","34c3bd22":"We can observe above that we get maximum testing accuracy for k=7. So lets create a KNeighborsClassifier with number of neighbors as 7.","77ebdfb2":"**Hyperparameter tuning**\n\nThe value of k (i.e 7) we selected above was selected by observing the curve of accuracy vs number of neighbors. This is a primitive way of hyperparameter tuning. \n\nThere is a better way of doing it which involves:\n\n1) Trying a bunch of different hyperparameter values\n\n2) Fitting all of them separately\n\n3) Checking how well each performs\n\n4) Choosing the best performing one\n\n5) Using cross-validation every time\n\nScikit-learn provides a simple way of achieving this using GridSearchCV i.e Grid Search cross-validation.\n\n","ee01e43d":"**Cross Validation**\n\nNow before getting into the details of Hyperparamter tuning, let us understand the concept of Cross validation.\n\nThe trained model's performance is dependent on way the data is split. It might not representative of the model\u2019s ability to generalize.\n\nThe solution is cross validation.\n\nCross-validation is a technique to evaluate predictive models by partitioning the original sample into a training set to train the model, and a test set to evaluate it. \n\nIn k-fold cross-validation, the original sample is randomly partitioned into k equal size subsamples. Of the k subsamples, a single subsample is retained as the validation data for testing the model, and the remaining k-1 subsamples are used as training data. The cross-validation process is then repeated k times (the folds), with each of the k subsamples used exactly once as the validation data. The k results from the folds can then be averaged (or otherwise combined) to produce a single estimation. The advantage of this method is that all observations are used for both training and validation, and each observation is used for validation exactly once.","55af7050":"**ROC (Reciever Operating Charecteristic) curve**\n\nIt is a plot of the true positive rate against the false positive rate for the different possible cutpoints of a diagnostic test.\n\nAn ROC curve demonstrates several things:\n\n1) It shows the tradeoff between sensitivity and specificity (any increase in sensitivity will be accompanied by a decrease in specificity).\n\n2) The closer the curve follows the left-hand border and then the top border of the ROC space, the more accurate the test.\n\n3)The closer the curve comes to the 45-degree diagonal of the ROC space, the less accurate the test.\n\n4) The area under the curve is a measure of test accuracy.","31eb23a7":"**Scikit-learn is a very popular Machine Learning library for Python. In this kernel let us use it to build a machine learning model using k-Nearest Neighbors algorithm to predict whether the patients in the \"Pima Indians Diabetes Dataset\" have diabetes or not. **"}}