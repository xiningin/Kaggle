{"cell_type":{"5f59f0e2":"code","5b1137e7":"code","cf80d685":"code","df07ffb9":"code","292a1cfb":"code","82977d35":"code","4bd47e3f":"code","9f0f9e4c":"code","eb24373b":"code","1bef310b":"code","384426de":"code","0a1092e2":"code","bef62f6f":"code","efe27fb5":"code","6ab9928f":"code","ef3505b3":"markdown","a3522678":"markdown","867cf6fe":"markdown","d0ee86f9":"markdown","10baee68":"markdown","bc465664":"markdown","b43c6629":"markdown","fa706d5a":"markdown","24ce2ff6":"markdown","c430fd32":"markdown","5b478063":"markdown","cc4a7a32":"markdown","3dcfd41a":"markdown","571ec7f7":"markdown","98256152":"markdown","0d599177":"markdown"},"source":{"5f59f0e2":"%%HTML\n<style type=\"text\/css\">\n\ndiv.h2 {\n    background-color: #000000; \n    color: white; \n    padding: 5px; \n    padding-right: 300px; \n    font-size: 30px; \n    max-width: 1500px; \n    margin-top: 2px;\n    margin-bottom: 10px;\n}\n<\/style>","5b1137e7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\n\nimport re\nfrom IPython.display import display, HTML","cf80d685":"try:\n    apps = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv')\n    reviews = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv')\nexcept:\n    print('File names have changed')","df07ffb9":"# clean data\n\ndef clean_size(x):\n    \n    if 'M' in x:\n        x = float(x.replace('M', ''))\n        return (x*1000)\n    elif 'k' in x:\n        return float(x.replace('k', ''))\n    elif 'Varies with device':\n        return -1 # varies with device\n    else:\n        return x\n    \ndef compress_ver(x):\n    \n    if(x=='Varies with device'):\n        return x\n    else:\n        x = str(x)\n        x = x.replace('Version', '').replace('version', '').replace('v', '').replace('V', '')\n        return x[: (x.find('.')+2)]\n    \ndef split_genre(x):\n    \n    return x.split(';')\n\ndef to_num(x):\n    \n    return (float(x.replace('$', '')))\n\ndef rep_cont_rating(x):\n    \n    if(x=='Mature 17+' or x=='Adults only 18+'):\n        return '17+'\n    elif(x=='Teen' or x=='Everyone 10+'):\n        return '10+'\n    else:\n        return x\n\n# fixing the mis-represented entry\ncat = apps[(apps['Category']=='1.9') | (apps['Rating']==19.0) | (apps['Installs']=='Free')]\napps = apps[~((apps['Category']=='1.9') & (apps['Rating']==19.0) & (apps['Installs']=='Free'))].reset_index(drop=True)\nname = cat.iloc[:,0]\nshifted = cat.iloc[:,1:].shift(periods=1, axis=1)\nfixed_entry = pd.concat([name, shifted], axis=1)\napps = pd.concat([apps, fixed_entry], axis=0).reset_index(drop=True)\napps.shape\n\n# remove duplicates\napps = apps[~(apps.duplicated())].reset_index(drop=True)\n\n# make size uniform in KB    \napps['Size'] = apps['Size'].apply(clean_size)\n\n# impute missing ratings with -1 and convert to integer\napps['Rating'] = apps['Rating'].fillna(-1)\napps['Rating'] = apps['Rating'].astype(float)\n\n# convert to datetime\napps['Last Updated'] = pd.to_datetime(apps['Last Updated'])\n\n# typecast `Reviews` to integer\napps['Reviews'] = apps['Reviews'].astype(int)\n\n# minimize versions to major and minor\napps['Current_ver_min'] = apps['Current Ver'].apply(compress_ver)\n\n# convert `Genres` to lists\napps['Genres'].fillna('Missing', inplace=True)\napps['Genres'] = apps['Genres'].apply(split_genre)\n\n# impute\napps['Type'] = apps['Type'].fillna('Missing')\napps['Category'] = apps['Category'].fillna('Missing')\n\n# convert price\napps['Price'] = apps['Price'].apply(to_num)\n\n# making content rating less ambiguous\napps['Content Rating'] = apps['Content Rating'].apply(rep_cont_rating)","292a1cfb":"colors = ['#FFD400', '#FF3333']\nfig = go.Figure(\n    data=go.Pie(labels=['Free', 'Paid'],\n               values=[apps['Type'].value_counts()['Free'], apps['Type'].value_counts()['Paid']],\n               hole=0.5)\n)\nfig.update_traces(hoverinfo='label+percent', textinfo='label', textfont_size=15,\n                 marker=dict(colors=colors, line=dict(color='#000000', width=1)))\nfig.update_layout(\n    template='ggplot2',\n    font_family='Courier New',\n    title = 'Paid apps are rare!',\n    title_font_size=30,\n    showlegend=False)\nfig.show()","82977d35":"def top_n(df, col, n=5):\n    \n    temp = pd.DataFrame(df[col].value_counts()).head(n).reset_index()\n    return temp\n\nfree_paid = apps.groupby(['Category', 'Type'], as_index=False).agg({'App':'count'})\ncat_cnt = apps.groupby('Category', as_index=False).agg({'App':'count'})\nfree_paid_prop = pd.merge(left=free_paid, right=cat_cnt, left_on='Category', right_on='Category')\nfree_paid_prop['Percent'] = round((free_paid_prop['App_x'] \/ free_paid_prop['App_y']),2)","4bd47e3f":"paid = apps[apps['Type']=='Paid']\nfree = apps[apps['Type']=='Free']\n\nfig = make_subplots(rows=2, cols=2,\n                    specs=[[{}, {}],\n                           [{\"colspan\": 2}, None]],\n                    subplot_titles=('Top 5 Paid App Categories', 'Top 5 Free App Categories',\n                                   'Top 10 Categories based on \"Paid App Percentage\"'))\n\nfeature = 'Category'\ndf = top_n(paid, feature, 5)\ncolors = ['#3BCCFF',] * 5\ncolors[1] = colors[3] = '#FF3333'\nfig.add_trace(\n    go.Bar(\n        x=df['index'],\n        y=df[feature],\n        name='Paid Apps',\n        marker_color=colors,\n    ), row=1, col=1)\n\nfeature = 'Category'\ndf = top_n(free, feature, 5)\ncolors = ['#3BCCFF',] * 5\nfig.add_trace(\n    go.Bar(\n        x=df['index'],\n        y=df[feature],\n        name='Free Apps',\n        marker_color=colors,\n    ), row=1, col=2)\n\ndf = free_paid_prop[free_paid_prop['Type']=='Paid'].sort_values(by='Percent', ascending=False).head(10)\ncolors = ['#3BCCFF',] * 10\ncolors[0] = colors[1] = '#FF3333'\nfig.add_trace(\n    go.Bar(\n        x=df['Category'],\n        y=df['Percent'],\n        name='Paid App %',\n        marker_color=colors,\n    ), row=2, col=1)\n\nfig.update_yaxes(title_text=\"Number of Apps\", row=1, col=1)\nfig.update_yaxes(title_text=\"Paid App Percentage\", row=2, col=1)\n    \nfig.update_layout(\n    template='plotly_dark',\n    font_family='Courier New',\n    title_text = 'Medical and Personalization apps - Most likely to be paid!',\n    title_font_size=15,\n    showlegend=False,\n    height=700\n)\n\nfig.show()","9f0f9e4c":"qual_cats = list(free_paid_prop[free_paid_prop['Type']=='Paid'].sort_values(by='Percent', ascending=False).head(10)['Category'].values)\nrateable = apps[apps['Rating']!=-1]\nrateable = rateable[rateable['Category'].isin(qual_cats)]\nrateable = rateable[rateable['Category'].isin(['PERSONALIZATION', 'MEDICAL'])] # only personalization and medical stuff\n\ndef pare_installs(x):\n    \n    return int(x.replace('+','').replace(',',''))\nrateable['Installs'] = rateable['Installs'].apply(pare_installs)\n\npaid = rateable[rateable['Type']=='Paid']","eb24373b":"fig = px.scatter(paid, x='Rating', y='Price', color='Category',\n                 color_discrete_sequence=['#3BCCFF', '#48FF48'],\n                 size= 'Installs', hover_data=['App'], size_max=100,\n                 opacity=0.50)\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.99, y=-0.2,\n                              xanchor='center', yanchor='top',\n                              text='Size of point represents minimum installs of the app',\n                              font=dict(family='Arial',\n                                        size=12,\n                                        color='rgb(150,150,150)'),\n                              showarrow=False))\n\nfig.update_layout(\n    showlegend=True,\n    annotations=annotations,\n    template='plotly_dark',\n    font_family='Courier New',\n    title_text = 'Personalization Apps have been installed far more than Medical Apps',\n    title_font_size=15,\n    height=400\n)\n\nfig.show()","1bef310b":"\nfig = make_subplots(rows=1, cols=2,\n                    subplot_titles=('On App Prices', 'On Average App Ratings'))\n\nfig.add_trace(go.Violin(y=paid['Price'][paid['Category']=='MEDICAL'],\n                               box_visible=False,\n                               line_color='#3BCCFF',\n                               name='MEDICAL',\n                               meanline_visible=True, fillcolor='#3BCCFF', opacity=0.75,\n                               ), row=1, col=1)\nfig.add_trace(go.Violin(y=paid['Price'][paid['Category']=='PERSONALIZATION'],\n                               box_visible=False,\n                               line_color='#48FF48',\n                               name='PERSONALIZATION',\n                               meanline_visible=True, fillcolor='#48FF48', opacity=0.75,\n                               ), row=1, col=1)\nfig.add_trace(go.Violin(y=paid['Rating'][paid['Category']=='MEDICAL'],\n                               box_visible=False,\n                               line_color='#3BCCFF',\n                               name='MEDICAL',\n                               meanline_visible=True, fillcolor='#3BCCFF', opacity=0.75,\n                               ), row=1, col=2)\nfig.add_trace(go.Violin(y=paid['Rating'][paid['Category']=='PERSONALIZATION'],\n                               box_visible=False,\n                               line_color='#48FF48',\n                               name='PERSONALIZATION',\n                               meanline_visible=True, fillcolor='#48FF48', opacity=0.75,\n                               ), row=1, col=2)\n\nfig.update_yaxes(title_text=\"Price of App($)\", row=1, col=1)\nfig.update_yaxes(title_text=\"Rating of App(0-5)\", row=1, col=2)\n\nfig.update_layout(\n    template='plotly_dark',\n    font_family='Courier New',\n    title_text = 'Comparison between Medical Apps and Personalization Apps',\n    title_font_size=15,\n    showlegend=False,\n    yaxis_title='Price of App($)',\n    height=400\n)\n\nfig.show()","384426de":"def extract_major(x):\n    try:\n        return int(float(x))\n    except:\n        if(x=='Varies with device'):\n            return -1 # indicates varies with device\n        else:\n            return -2 # indicates different format\n        \ndef df_ver(v):\n    \n    return apps[apps['Major_ver']==v]\n\ndef second_maj(x):\n    \n    if x>=2:\n        return 'Yes'\n    else:\n        return 'No'\n\napps['Major_ver'] = apps['Current_ver_min'].apply(extract_major)\napps = apps.drop(['Current_ver_min'], axis=1)","0a1092e2":"print('All major versions for the apps in this dataset(-1 and -2 are special cases; hence ignore):')\napps['Major_ver'].sort_values(ascending=False).unique()","bef62f6f":"ver_nos = pd.DataFrame(apps['Major_ver'].value_counts().head(10)).\\\n    reset_index().sort_values(by='Major_ver', ascending=False)\ncolors = ['#3BCCFF',] * 10\ncolors[0] = '#FF3333'\ncolors[2] = '#FFD400'\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=ver_nos['index'],\n    y=ver_nos['Major_ver'],\n    name='Major version = 1',\n    marker_color=colors\n))\n\nannotations = [dict(x=-1, y=900, text='Varies with Device', arrowhead=1, ax=30, ay=-70),\n               dict(x=1, y=3000, text='Major Version = 1', arrowhead=1, ax=120, ay=-40)]\n\nfig.update_layout(\n    annotations=annotations,\n    showlegend=False,\n    template='plotly_dark',\n    font_family='Courier New',\n    title_text = \"Top 10 Most Common Version Numbers on Playstore\" ,\n    title_font_size=15,\n    xaxis_title='Major Version Number of App',\n    yaxis_title='Number of Apps',\n    height=400\n)\nfig.show()","efe27fb5":"def plot_table(df, exclude=[]):\n    \"\"\" Plot table with plotly \"\"\"\n    \n    \n    colorscale = [[0, '#FF3333'],[.5, '#FFFFFF'],[1, '#FFFFFF']]\n    fig =  ff.create_table(df[['App', 'Category', 'Rating', 'Reviews', 'Installs',\n                                        'Current Ver', 'Last Updated']].sort_values(by='Last Updated'),\n                           colorscale=colorscale)\n    fig.show()\n\n# prep some data\n\napps_ver_b1 = apps[(apps['Major_ver']<1000) & (apps['Major_ver']>=0) & (apps['Rating']>=0)]\napps_ver_b2 = apps[(apps['Major_ver']<6000) & (apps['Major_ver']>=1000) & (apps['Rating']>=0)]\napps_ver_b3 = apps[(apps['Major_ver']>=6000) & (apps['Rating']>=0)]\n\napps_ver_b1['Sec_maj'] = apps_ver_b1['Major_ver'].apply(second_maj)","6ab9928f":"plot_table(apps_ver_b3)","ef3505b3":"\ud83d\udca1 **INSIGHTS**\n\n- The above table represents all apps that had very large major versions\n- On careful observation, we see two things\n    - All are \"MEDICAL\" apps\n    - All of them but 2 have this abbreviation 'AH'. What does that mean?\n- None of these apps are big in terms of their installs and neither do they boast of a large number of reviews. Cool. So what?\n\nLet's hypothesize here. Does it not seem like these apps with 'AH' are probably made by the same developer who likes versioning their apps starting from 300000? The number of installs are pretty low, so maybe these are utility apps used by only a specific set of users. Even the 'Last Updated' dates indicate some kind of relation between these apps and their versions.  \n\n**We are right in our hypothesis!**  \n\nThrough a search on Appstore, I was able to find out that 'AH' stood for Animal Hospital. And these apps were developed by [Vet2Pet](https:\/\/play.google.com\/store\/apps\/developer?id=Vet2Pet). They develop custom apps for veterinary doctors and clinics.\n\n![image.png](attachment:image.png)","a3522678":"\ud83d\udca1 **INSIGHTS**\n\n- Medical apps are priced way higher than Personalization apps\n    - Median price of Medical apps = 5.49\\$\n    - Median price of Personalization apps = 1.49\\$\n    - Therefore, if well received, Medical apps can generate far more revenue than Personalization apps\n- When it comes to rating, both categories have the same median rating of 4.4\n    - But, Medical apps have more bad performers when compared to Personalization apps\n    ","867cf6fe":"What about those very large(extremely large) version numbers? Were they mistakes?  \n\nNope.","d0ee86f9":"\ud83d\udca1 **INSIGHTS**\n\n- Personalization apps have been installed far more than medical apps, as is evident from the size of the green points when compared to the blue ones.\n- It can also be noticed that most apps in either category are rated on the higher side on average\n- Vargo Anesthesia Mega App is the most expensive at 80$\n- VeinSeek has the lowest average rating(2.5, installs=1000+) while FHR 5-Tier 2.0 has the highest average rating(5, installs=500+)","10baee68":"## *Question 2* => Can the version numbers of apps tell a story?\n\nMy first instinct was to discard the version numbers. But, what if these version numbers could tell a story? Let's find out :)\n\n\ud83d\udcfb **WHAT'S NEW HERE**\n\n- For this part, I am extracting only the major version of an app\n- This is based on the assumption that a version number is represented as major.minor.patch ([Source](https:\/\/medium.com\/@GabEarnsh\/versioning-mobile-app-releases-like-a-pro-25137766150a))\n- Another assumption made here is that an app is considered as having a second or more major version release if it's major version is >= 2 (Even in cases where version starts at 0). This is because the provided data does not provide an insight about all releases for each app.","bc465664":"There exists a diverse range of major versions for all apps. The unique major versions for the apps in Playstore at the time of data collection for this dataset are depicted below.","b43c6629":"### *Answer* => The app developer could make an app for the Medical category, provided she is able to make something useful and well received by her customers.","fa706d5a":"<div class='h2'>Data Cleaning<\/div>\n\nThis section contains the code written to clean the data prior to using it for analysis.","24ce2ff6":"<div class='h2'>Analyzing to Answer<\/div>","c430fd32":"### *Answer* => Yes. The version numbers have given 2 stories here. The first is about how most apps on play store at the time of this data collection were in their first major version. The second is a more poignant story of an app that helps support veterinary doctors so that they can care well for their \"furry\" clients :)","5b478063":"\ud83d\udd0d **METRIC DEFINITION**\n- Paid App Percentage = (No. of paid apps in category X) \/ (No. of total apps in category X)\n\n\ud83d\udca1 **INSIGHTS**\n- Across the top 5 applications in each of the categories i.e Paid and Free, Medical and Personalization applications are those that are present in Paid's top 5 apps but absent in Free's top 5 apps\n-  For every 100 applications belonging to Medical(or Personalization), 21 of these were paid apps\n    - This might mean\n        - Medical or Personalization apps have larger investment to make, hence they are priced\n        - People are willing to pay for Medical or Personalization apps, hence they are priced more frequently than other apps\n    - Let's assume our app developer has a lot of resources to back her work. So, she might be interested in going after apps in these 2 categories. But which one?","cc4a7a32":"<center><h1>Q and A with Google Play Store Data<\/h1><\/center>\n<center><i>An opinionated analysis of questions that interest me<\/i><\/center>\n<br>\n<br>\n\nThe purpose of this kernel is to answer a few questions that have piqued my interest during an initial look at the [Google Play Store Apps dataset](https:\/\/www.kaggle.com\/lava18\/google-play-store-apps).\n\nThe analysis for finding these answers are limited by the data at hand and therefore, I strongly advise against taking any action based on the finds of this notebook!\n\n**NOTE:** The dataset used for analysis is 2 years old and we know a lot can change in 2 years. Therefore, the analysis may not be exactly representative of the current scenario. We would need contemporary app data to find that out :)","3dcfd41a":"\ud83d\udca1 **INSIGHTS**\n\n- Most apps on the playstore are versioned at 1 (major version)\n- There exist a considerable number of apps that have major versions that \"vary with device\"\n- As version numbers increase, the number of corresponding apps are lesser","571ec7f7":"Firstly, the \"paid app\" market is very small when compared to the \"free app\" market. This might indicate that our developer has to first try to find answers to the questions, *Why are so few apps behind a payment barrier? Is it only because people don't like to pay? Or is there another reason?*\n\n","98256152":"## *Question 1* => If app developer X wanted to develop an app that she wished to monetize, in which category should she release it?\n\n\ud83d\udcfb **WHAT'S NEW HERE**\n\n- I am dividing app data on the basis of whether the app is \"Paid\" or \"Free\" ","0d599177":"\ud83d\udc7d **PECULIARITIES**\n\n- Version numbers like 1000000, 30000, 5055 etc. => Do developers of these apps actually have these many major versions?\n- Version numbers like 2018, 2017, 2014 => They look like years.\n- This brings us to the fundamental question => Are all apps on Play Store subject to a uniform way of versioning? Through this data it definitely does not seem like it.\n\n\ud83d\udcdd **NOTE**\n\n- The version numbers -1 and -2 have been explicitly introduced by me.\n   * -1 signifies apps that have versions that vary with device\n   * -2 signifies apps that had a version that did not conform to the major.minor.patch pattern\n- For the sake of analysis, I am analyzing all apps by bucketing them on the basis of their versions\n    - First bucket => Version number < 1000 (Infact, the max. version no. in this bucket is only 263)\n    - Second bucket => Version number > 1000 and Version number < 6000\n    - Third bucket => Version number > 6000"}}