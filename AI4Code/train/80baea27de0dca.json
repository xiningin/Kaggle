{"cell_type":{"c4aac167":"code","b84c6d4e":"code","76f6494e":"code","e316c957":"code","4c5e8de1":"code","868aa24f":"code","700b9675":"code","eac1ef72":"code","968d2317":"code","fd453254":"code","5e010380":"code","18b22cf9":"code","1d4214a8":"code","ca53a25b":"code","64fb6546":"code","77c5cc8c":"code","b17d87bc":"code","7728dd89":"code","66c3c7f6":"code","2825ac7f":"code","bf92faef":"code","c0cf26c2":"code","b28b314e":"code","0dcc47d1":"code","e1a01a3f":"code","770857a4":"code","66989a17":"code","bc28e1c0":"code","e8eb9bc5":"code","bc173630":"code","60ea8790":"code","71d6549b":"code","9de8241f":"code","0fb9e865":"code","daa84859":"code","af39c323":"code","55c2b0b9":"code","0693e3c3":"code","d3c3bb80":"code","2ffe8697":"code","101cf5d6":"code","00323acf":"code","becef7c5":"code","12482832":"code","45b6a1f7":"code","8e0d84aa":"code","1d0bf0dd":"code","ea15ad02":"code","a3fea083":"code","5a8c0506":"code","ba0e5ed3":"code","4113127c":"code","22f89cc0":"code","3e3ddafe":"code","01124ea3":"code","ccd9744e":"code","b6820519":"code","490dc18a":"code","ce098901":"code","f8672075":"code","37d5a163":"markdown","ae6f2602":"markdown","9b20b0d7":"markdown","2aa50a05":"markdown","a79b3673":"markdown","83110aab":"markdown","3069652f":"markdown","c005d4fe":"markdown","b504f3c8":"markdown","632aa1cc":"markdown","c0b6f8c1":"markdown","2acb898d":"markdown","a145ff89":"markdown","ffa0b562":"markdown","631d2a8e":"markdown","a3e5e4a2":"markdown","2f1bd205":"markdown","380d2a95":"markdown","14d61848":"markdown","71798ba9":"markdown","a0a819bb":"markdown","3133a3e3":"markdown","098f5b89":"markdown","6f9baf43":"markdown","e9fbbe2a":"markdown","ecf42622":"markdown","e5c2b75b":"markdown","20296150":"markdown","acfa08e9":"markdown","8511f33e":"markdown","6abad3c9":"markdown"},"source":{"c4aac167":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n\"\"# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n #   for filename in filenames:\n  #      print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b84c6d4e":"import plotly.express as px\nimport plotly.graph_objects as go\nimport folium\nimport librosa\nimport matplotlib.pyplot as plt\nimport librosa.display\nfrom matplotlib import gridspec\nfrom PIL import Image\nimport warnings\nwarnings.filterwarnings(\"ignore\")","76f6494e":"pd.set_option(\"max.columns\",100)\npd.set_option(\"max.rows\",1000)","e316c957":"train_data = pd.read_csv(\"\/kaggle\/input\/birdsong-recognition\/train.csv\")\nprint(train_data.info())\ntest_data = pd.read_csv('\/kaggle\/input\/birdsong-recognition\/test.csv')\nprint(test_data.info())","4c5e8de1":"test_data.head()","868aa24f":"train_data.head()","700b9675":"min_play = train_data.groupby(['species'])['xc_id'].count().reset_index()\nmin_play = min_play.rename(columns={'xc_id':'count'})\nmin_play.sort_values(by = ['count'], inplace = True, ascending = True)\nmin_play\n\nfig = px.bar(min_play, x='count', y='species',\n             hover_data=['species'], color='species',\n             labels={'count':'Count'}, height=1400, width = 1000)\nfig.update_layout(\n    title=\"Species Names and Distribution - Total # Species:  264\",\n    xaxis_title=\"Counts\",\n    yaxis_title=\"Names\",\n    font=dict(\n        family=\"sans serif\",\n        size=10,\n        color=\"#7f7f72\"\n    )\n)\nfig.show()","eac1ef72":"train_data['elevation'] = train_data['elevation'].str.replace('m','')\ntrain_data['elevation'] = train_data['elevation'].str.replace('?','')\ntrain_data['elevation'] = train_data['elevation'].str.replace('930-990','990')\ntrain_data['elevation'] = train_data['elevation'].str.replace('1650-1900','1900')\ntrain_data['elevation'] = train_data['elevation'].str.replace(',','')\ntrain_data['elevation'] = train_data['elevation'].str.replace('Unknown','')\ntrain_data['elevation'] = train_data['elevation'].str.replace('~','')\ntrain_data['elevation'] = train_data['elevation'].str.replace('-','')\ntrain_data['elevation'] = train_data['elevation'].str.replace(' ','')\ntrain_data['elevation'] = pd.to_numeric(train_data['elevation'])\n\nelev = train_data.groupby('elevation')['xc_id'].count().reset_index()\nelev = elev.rename(columns = {'xc_id':'count'})\nfig = px.scatter(elev, x='elevation', y='count', color = 'elevation')\nfig.update_layout(\n    title=\"Elevation Distribution\",\n    xaxis_title=\"Elevation\",\n    yaxis_title=\"Count\",\n    font=dict(\n        family=\"sans serif\",\n        size=14,\n        color=\"#7f7f72\"\n    )\n)","968d2317":"eled = train_data.groupby('elevation')['bird_seen'].value_counts().reset_index(name = 'counts')\np_ele = eled.pivot(columns = 'bird_seen', values = 'counts', index = 'elevation')\np_ele = p_ele.reset_index()\np_ele = p_ele.fillna(0)\n\nfig = px.scatter(p_ele, x=\"yes\", y=\"no\",size=\"elevation\", color=\"elevation\",size_max=20, height = 600, width= 800)\nfig.update_layout(\n    title=\"Elevation vs Bird_seen\",\n    xaxis_title=\"Bird_seen Yes\",\n    yaxis_title=\"Bird_seen No\",\n    font=dict(\n        family=\"sans serif\",\n        size=14,\n        color=\"#7f7f72\"\n    )\n)","fd453254":"elevs = train_data.groupby('country')['elevation'].mean().reset_index()\nfig = px.scatter(elevs, x='country', y='elevation', color = 'country')\nfig.update_layout(\n    title=\"Elevation vs country\",\n    xaxis_title=\"Country\",\n    yaxis_title=\"Elevation\",\n    font=dict(\n        family=\"sans serif\",\n        size=14,\n        color=\"#7f7f72\"\n    )\n)","5e010380":"rating_count = train_data.groupby('rating')['xc_id'].count().reset_index()\nrating_count = rating_count.rename(columns = {'xc_id':'count'})\nfig = px.bar(rating_count, x='rating', y='count', color = 'rating')\nfig.update_layout(\n    title=\"Rating Distribution\",\n    xaxis_title=\"Ratings\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=18,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","18b22cf9":"palyback_count = train_data.groupby('playback_used')['xc_id'].count().reset_index()\npalyback_count = palyback_count.rename(columns = {'xc_id':'count'})\nfig = px.bar(palyback_count, x='playback_used', y='count', color = 'playback_used')\nfig.update_layout(\n    title=\"Sound Playback Used\",\n    xaxis_title=\"Playback Used\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=18,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","1d4214a8":"channels_count = train_data.groupby('channels')['xc_id'].count().reset_index()\nchannels_count = channels_count.rename(columns = {'xc_id':'count'})\nchannels_count.channels = channels_count.channels.str.replace('(','')\nchannels_count.channels = channels_count.channels.str.replace(')','')\nfig = px.bar(channels_count, x='channels', y='count', color = 'channels')\nfig.update_layout(\n    title=\"Channel Types\",\n    xaxis_title=\"Types\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=18,\n        color=\"#7f7f72\"\n    )\n)\nfig.show()","ca53a25b":"pitch = train_data.groupby(['pitch'])['xc_id'].count().reset_index()\npitch = pitch.rename(columns={'xc_id':'count'})\nfig = go.Figure(data = [go.Pie(labels = pitch.pitch,values = pitch['count'])])\nfig.update_layout(\n    title=\"Pitch Levels\",\n    xaxis_title=\"Levels\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=18,\n        color=\"#7f7f72\"\n    )\n)\nfig.show()","64fb6546":"speed = train_data.groupby(['speed'])['xc_id'].count().reset_index()\nspeed = speed.rename(columns={'xc_id':'count'})\nfig = go.Figure(data = [go.Pie(labels = speed['speed'],values = speed['count'])])\nfig.update_layout(\n    title=\"Play Speed\",\n    xaxis_title=\"Play Speed\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=18,\n        color=\"#7f7f72\"\n    )\n)\nfig.show()","77c5cc8c":"notes= train_data.groupby(['number_of_notes'])['xc_id'].count().reset_index()\nnotes = notes.rename(columns={'xc_id':'count'})\nnotes.sort_values(by = ['count'], inplace = True, ascending=False)\nfig = px.bar(notes, x='number_of_notes', y='count',\n             hover_data=['number_of_notes'], color='number_of_notes',\n             labels={'count':'count'}, height=400)\nfig.update_layout(\n    title=\"Notes Ranges\",\n    xaxis_title=\"Notes Range\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=18,\n        color=\"#7f7f72\"\n    )\n)\nfig.show()","b17d87bc":"bird_seen = train_data.groupby(['bird_seen'])['xc_id'].count().reset_index()\nbird_seen = bird_seen.rename(columns={'xc_id':'count'})\nfig = go.Figure(data = [go.Pie(labels = bird_seen.bird_seen,values = bird_seen['count'])])\nfig.update_layout(\n    title=\"Birds Seen by Author\",\n    xaxis_title=\"Birds Seen\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=18,\n        color=\"#7f7f72\"\n    )\n)\nfig.show()","7728dd89":"stype= train_data.groupby(['type'])['xc_id'].count().reset_index()\nstype = stype.rename(columns={'xc_id':'count'})\nstype.sort_values(by = ['count'], inplace = True, ascending=False)\nfig = px.bar(stype[0:15], x='type', y='count',\n             hover_data=['type'], color='type',\n             labels={'count':'count'}, height=400)\nfig.update_layout(\n    title=\"Types of Sounds\",\n    xaxis_title=\"Sound types\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=18,\n        color=\"#7f7f72\"\n    )\n)\nfig.show()","66c3c7f6":"volume= train_data.groupby(['volume'])['xc_id'].count().reset_index()\nvolume = volume.rename(columns={'xc_id':'count'})\nvolume.sort_values(by = ['count'], inplace = True, ascending=False)\nfig = px.bar(volume, x='count', y='volume',\n             hover_data=['volume'], color='volume',\n             labels={'count':'count'}, height=400)\nfig.update_layout(\n    title=\"Volume Levels\",\n    xaxis_title=\"Count\",\n    yaxis_title=\"Volume levels\",\n    font=dict(\n        family=\"sans serif\",\n        size=18,\n        color=\"#7f7f72\"\n    )\n)\nfig.show()","2825ac7f":"slength= train_data.groupby(['length'])['xc_id'].count().reset_index()\nslength = slength.rename(columns={'xc_id':'count'})\nslength.sort_values(by = ['count'], inplace = True, ascending=False)\nfig = px.bar(slength, x='length', y='count',\n             hover_data=['length'], color='length',\n             labels={'count':'count'}, height=400)\nfig.update_layout(\n    title=\"Sounds Length\",\n    xaxis_title=\"Length Category\",\n    yaxis_title=\"Count\",\n    font=dict(\n        family=\"sans serif\",\n        size=14,\n        color=\"#7f7f72\"\n    )\n)\nfig.show()","bf92faef":"sample_rate = train_data.groupby(['sampling_rate'])['sampling_rate'].count().reset_index(name = 'count')\nfig = px.bar(sample_rate, x='sampling_rate', y='count',\n             hover_data=['sampling_rate'], color='sampling_rate',\n             labels={'count':'count'}, height=400)\nfig.update_layout(\n    title=\"Audio Sample Rate\",\n    xaxis_title=\"Sample Rate\",\n    yaxis_title=\"Count\",\n    font=dict(\n        family=\"sans serif\",\n        size=14,\n        color=\"#7f7f72\"\n    )\n)\nfig.show()","c0cf26c2":"country= train_data.groupby('country')['xc_id'].count().reset_index()\ncountry = country.rename(columns={'xc_id':'count'})\nfig = px.scatter(country, x=\"count\", y=\"count\",size=\"count\", color=\"country\", hover_name=\"country\", log_x=True, size_max=60)\nfig.update_layout(\n    title=\"Country wise recordings\",\n    xaxis_title=\"Count\",\n    yaxis_title=\"Count\",\n    font=dict(\n        family=\"sans serif\",\n        size=14,\n        color=\"#7f7f72\"\n    )\n)\nfig.show()","b28b314e":"author= train_data.groupby(['author','ebird_code'])['ebird_code'].count().reset_index(name = 'count')\nauthor.sort_values(by = ['count'], inplace = True, ascending=False)\nfig = px.bar(author[0:100], x='author', y='count',\n             hover_data=['author'], color='ebird_code',\n             labels={'count':'count'}, height=400)\nfig.update_layout(\n    title=\"Author's Works on each species\",\n    xaxis_title=\"Authors\",\n    yaxis_title=\"Count\",\n    font=dict(\n        family=\"sans serif\",\n        size=14,\n        color=\"#7f7f72\"\n    )\n)","0dcc47d1":"author= train_data.groupby(['author'])['xc_id'].count().reset_index()\nauthor = author.rename(columns={'xc_id':'count'})\nauthor.sort_values(by = ['count'], inplace = True, ascending=False)\nfig = px.bar(author[0:10], x='author', y='count',\n             hover_data=['author'], color='author',\n             labels={'count':'count'}, height=400)\nfig.update_layout(\n    title=\"Author's Works\",\n    xaxis_title=\"Authors\",\n    yaxis_title=\"Count\",\n    font=dict(\n        family=\"sans serif\",\n        size=14,\n        color=\"#7f7f72\"\n    )\n)\nfig.show()","e1a01a3f":"author_rating = train_data.groupby(['author','rating']).agg({'rating':'count'})\nauthor_rating.columns = [\"_\".join(x) for x in author_rating.columns.ravel()]\nauthor_rating = author_rating.rename(columns= {'r_a_t_i_n_g':'count'}).reset_index()\nauthor_rating.author = author_rating.author.str.slice(0,20)\n\nfig = px.scatter(author_rating, x=\"count\", y=\"rating\",size=\"count\", color=\"author\",size_max=50, height = 600, width= 800)\nfig.update_layout(\n    title=\"Author vs Ratings\",\n    xaxis_title=\"Count\",\n    yaxis_title=\"Ratings\",\n    font=dict(\n        family=\"sans serif\",\n        size=14,\n        color=\"#7f7f72\"\n    )\n)\nfig.show()","770857a4":"map_data = train_data[train_data.latitude!='Not specified']\nmap_data.latitude = pd.to_numeric(map_data.latitude)\nmap_data.longitude = pd.to_numeric(map_data.longitude)","66989a17":"map_osm = folium.Map(location=[40.742, -73.956], zoom_start=11, tiles='Stamen Terrain')\n\nmap_data.apply(lambda row:folium.CircleMarker(location=[row[\"latitude\"], row[\"longitude\"]], \n                                              radius=10, fill_color = row['rating'])\n                                             .add_to(map_osm), axis=1)\n\nmap_osm","bc28e1c0":"seen = {'yes':'green','no':'red'}\nmap_seen = folium.Map(location=[40.742, -73.956], zoom_start=5)\n\nmap_clr_data = map_data.dropna()\n\nmap_clr_data.apply(lambda row:folium.CircleMarker(location=[row[\"latitude\"], row[\"longitude\"]], \n                                              radius=10, fill_color = seen[row['bird_seen']])\n                                             .add_to(map_seen), axis=1)\n\nmap_seen","e8eb9bc5":"map_data.columns","bc173630":"map_osm = folium.Map(location=[40.742, -73.956],zoom_start=4)\n\nmap_data.apply(lambda row:folium.CircleMarker(location=[row[\"latitude\"], row[\"longitude\"]], \n                                              radius=10, fill_color = row['elevation'])\n                                             .add_to(map_osm), axis=1)\n\nmap_osm","60ea8790":"seen = train_data.groupby('country')['author'].count().reset_index()\nfig = px.scatter(seen, x='country', y='author', color = 'country')\nfig.update_layout(\n    title=\"Author vs country\",\n    xaxis_title=\"Country\",\n    yaxis_title=\"Author\",\n    font=dict(\n        family=\"sans serif\",\n        size=14,\n        color=\"#7f7f72\"\n    )\n)","71d6549b":"train_data['date'] = train_data['date'].str.replace('-00','-01')\ntrain_data['date'] = train_data['date'].str.replace('0-01-01','2000-01-01')\ntrain_data['date'] = train_data['date'].str.replace('1012','2012')\ntrain_data['date'] = train_data['date'].str.replace('201-','2010')\ntrain_data['date'] = train_data['date'].str.replace('0201007-11','2010-07-11')\ntrain_data['date'] = train_data['date'].astype('datetime64[ns]')","9de8241f":"tdate= train_data.groupby(['date'])['xc_id'].count().reset_index(name = 'count')\nfig = px.line(tdate, x='date', y='count')\nfig.update_layout(\n    title=\"Recordings by Date\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=14,\n        color=\"#7f7f72\"\n    )\n)","0fb9e865":"tdate= train_data.groupby(['date','ebird_code'])['ebird_code'].count().reset_index(name = 'count')\nfig = px.scatter(tdate, x='date', y='count', color = 'ebird_code', size='count')\nfig.update_layout(\n    title=\"Birds obsorbed by date\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=14,\n        color=\"#7f7f72\"\n    )\n)","daa84859":"tdate= train_data.groupby(['date','bird_seen'])['bird_seen'].count().reset_index(name = 'count')\nfig = px.scatter(tdate, x='date', y='count', color = 'bird_seen', size='count')\nfig.update_layout(\n    title=\"Birds seen by date\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=14,\n        color=\"#7f7f72\"\n    )\n)","af39c323":"fig = px.box(train_data, y=\"rating\")\nfig.show()","55c2b0b9":"fig = px.box(train_data, y=\"duration\")\nfig.show()","0693e3c3":"fig = px.box(train_data, y=\"elevation\")\nfig.show()","d3c3bb80":"train_data.columns","2ffe8697":"y, sr = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/houspa\/XC479586.mp3\")\nplt.figure(figsize=(10, 10))\nplt.subplot(2, 1, 1)\nlibrosa.display.waveplot(y, sr=sr)\nplt.title('Monophonic')\n\ny_harm, y_perc = librosa.effects.hpss(y)\nplt.subplot(2, 1, 2)\nlibrosa.display.waveplot(y_harm, sr=sr, alpha=0.25)\nlibrosa.display.waveplot(y_perc, sr=sr, color='r', alpha=0.5)\nplt.title('Harmonic + Percussive')\nplt.tight_layout()\nplt.show()\n","101cf5d6":"y1, sr1 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/dowwoo\/XC460991.mp3\")\nplt.figure(figsize=(10, 10))\nplt.subplot(2, 1, 1)\nlibrosa.display.waveplot(y1, sr=sr1)\nplt.title('Monophonic')\n\ny_harm, y_perc = librosa.effects.hpss(y1)\nplt.subplot(2, 1, 2)\nlibrosa.display.waveplot(y_harm, sr=sr1, alpha=0.25)\nlibrosa.display.waveplot(y_perc, sr=sr1, color='r', alpha=0.5)\nplt.title('Harmonic + Percussive')\n#plt.tight_layout()\nplt.show()","00323acf":"y2, sr2 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/logshr\/XC236573.mp3\")\nplt.figure(figsize=(10, 10))\nplt.subplot(2, 1, 1)\nlibrosa.display.waveplot(y2, sr=sr2)\nplt.title('Monophonic')\n\ny_harm, y_perc = librosa.effects.hpss(y2)\nplt.subplot(2, 1, 2)\nlibrosa.display.waveplot(y_harm, sr=sr2, alpha=0.25)\nlibrosa.display.waveplot(y_perc, sr=sr2, color='r', alpha=0.5)\nplt.title('Harmonic + Percussive')\nplt.tight_layout()\nplt.show()","becef7c5":"D = librosa.amplitude_to_db(np.abs(librosa.stft(y)), ref=np.max)\nplt.figure(figsize=(35, 15))\nplt.subplot(4, 2, 1)\nlibrosa.display.specshow(D, y_axis='linear')\nplt.colorbar(format='%+2.0f dB')\nplt.title('Linear-frequency power spectrogram')","12482832":"D = librosa.amplitude_to_db(np.abs(librosa.stft(y1)), ref=np.max)\nplt.figure(figsize=(35, 15))\nplt.subplot(4, 2, 1)\nlibrosa.display.specshow(D, y_axis='linear')\nplt.colorbar(format='%+2.0f dB')\nplt.title('Linear-frequency power spectrogram')","45b6a1f7":"D = librosa.amplitude_to_db(np.abs(librosa.stft(y2)), ref=np.max)\nplt.figure(figsize=(35, 15))\nplt.subplot(4, 2, 1)\nlibrosa.display.specshow(D, y_axis='linear')\nplt.colorbar(format='%+2.0f dB')\nplt.title('Linear-frequency power spectrogram')","8e0d84aa":"C = librosa.feature.chroma_cqt(y=y, sr=sr)\nplt.figure(figsize=(35, 15))\ntempo, beat_f = librosa.beat.beat_track(y=y, sr=sr, trim=False)\nbeat_f = librosa.util.fix_frames(beat_f, x_max=C.shape[1])\nCsync = librosa.util.sync(C, beat_f, aggregate=np.median)\nbeat_t = librosa.frames_to_time(beat_f, sr=sr)\nax1 = plt.subplot(2,1,1)\nlibrosa.display.specshow(C, y_axis='chroma', x_axis='time')\nplt.title('Chroma (linear time)')\nax2 = plt.subplot(2,1,2, sharex=ax1)\nlibrosa.display.specshow(Csync, y_axis='chroma', x_axis='time',x_coords=beat_t)\nplt.title('Chroma (beat time)')\nplt.tight_layout()\nplt.show()","1d0bf0dd":"C = librosa.feature.chroma_cqt(y=y1, sr=sr1)\nplt.figure(figsize=(35, 15))\ntempo, beat_f = librosa.beat.beat_track(y=y1, sr=sr, trim=False)\nbeat_f = librosa.util.fix_frames(beat_f, x_max=C.shape[1])\nCsync = librosa.util.sync(C, beat_f, aggregate=np.median)\nbeat_t = librosa.frames_to_time(beat_f, sr=sr)\nax1 = plt.subplot(2,1,1)\nlibrosa.display.specshow(C, y_axis='chroma', x_axis='time')\nplt.title('Chroma (linear time)')\nax2 = plt.subplot(2,1,2, sharex=ax1)\nlibrosa.display.specshow(Csync, y_axis='chroma', x_axis='time',x_coords=beat_t)\nplt.title('Chroma (beat time)')\nplt.tight_layout()\nplt.show()","ea15ad02":"C = librosa.feature.chroma_cqt(y=y2, sr=sr2)\nplt.figure(figsize=(35, 15))\ntempo, beat_f = librosa.beat.beat_track(y=y2, sr=sr, trim=False)\nbeat_f = librosa.util.fix_frames(beat_f, x_max=C.shape[1])\nCsync = librosa.util.sync(C, beat_f, aggregate=np.median)\nbeat_t = librosa.frames_to_time(beat_f, sr=sr)\nax1 = plt.subplot(2,1,1)\nlibrosa.display.specshow(C, y_axis='chroma', x_axis='time')\nplt.title('Chroma (linear time)')\nax2 = plt.subplot(2,1,2, sharex=ax1)\nlibrosa.display.specshow(Csync, y_axis='chroma', x_axis='time',x_coords=beat_t)\nplt.title('Chroma (beat time)')\nplt.tight_layout()\nplt.show()","a3fea083":"plt.figure(figsize=(15,4))\ngram = librosa.feature.tempogram(y=y, sr=sr)\nlibrosa.display.specshow(gram, x_axis='time', y_axis='tempo')\nplt.colorbar()\nplt.title('Tempogram')\nplt.tight_layout()\nplt.show()","5a8c0506":"plt.figure(figsize=(15,4))\ngram = librosa.feature.tempogram(y=y1, sr=sr1)\nlibrosa.display.specshow(gram, x_axis='time', y_axis='tempo')\nplt.colorbar()\nplt.title('Tempogram')\nplt.tight_layout()\nplt.show()","ba0e5ed3":"plt.figure(figsize=(15,4))\ngram = librosa.feature.tempogram(y=y2, sr=sr2)\nlibrosa.display.specshow(gram, x_axis='time', y_axis='tempo')\nplt.colorbar()\nplt.title('Tempogram')\nplt.tight_layout()\nplt.show()","4113127c":"plt.figure(figsize=(15,4))\nD = librosa.amplitude_to_db(np.abs(librosa.stft(y)), ref=np.max)\nlibrosa.display.specshow(D, cmap='gray_r', y_axis='linear')\nplt.colorbar(format='%+2.0f dB')\nplt.title('Linear power spectrogram (grayscale)')","22f89cc0":"plt.figure(figsize=(15,4))\nD = librosa.amplitude_to_db(np.abs(librosa.stft(y1)), ref=np.max)\nlibrosa.display.specshow(D, cmap='gray_r', y_axis='linear')\nplt.colorbar(format='%+2.0f dB')\nplt.title('Linear power spectrogram (grayscale)')","3e3ddafe":"plt.figure(figsize=(15,4))\nD = librosa.amplitude_to_db(np.abs(librosa.stft(y2)), ref=np.max)\nlibrosa.display.specshow(D, cmap='gray_r', y_axis='linear')\nplt.colorbar(format='%+2.0f dB')\nplt.title('Linear power spectrogram (grayscale)')","01124ea3":"fig = plt.figure(figsize=(15, 13)) \ngs = gridspec.GridSpec(5, 2, width_ratios=[2, 6]) \nax0 = plt.subplot(gs[0])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/bkbwar.jpg\")\nax0.axis('off')\nax0.imshow(img)\nax1 = plt.subplot(gs[1])\ny, sr = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/bkbwar\/XC101580.mp3\")\nlibrosa.display.waveplot(y, sr)\nax1.plot()\n\nax2 = plt.subplot(gs[2])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/clanut.jpg\")\nax2.axis('off')\nax2.imshow(img)\nax3 = plt.subplot(gs[3])\ny1, sr1 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/clanut\/XC391597.mp3\")\nlibrosa.display.waveplot(y1, sr1)\nax3.plot()\n   \nax4 = plt.subplot(gs[4])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/whcspa.jpg\")\nax4.axis('off')\nax4.imshow(img)\nax5 = plt.subplot(gs[5])\ny2, sr2 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/whcspa\/XC478423.mp3\")\nlibrosa.display.waveplot(y2, sr2)\nax5.plot()\n\nax6 = plt.subplot(gs[6])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/prawar.jpg\")\nax6.axis('off')\nax6.imshow(img)\nax7 = plt.subplot(gs[7])\ny3, sr3 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/prawar\/XC444966.mp3\")\nlibrosa.display.waveplot(y3, sr3)\nax7.plot()\n\nax8 = plt.subplot(gs[8])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/rebwoo.jpg\")\nax8.axis('off')\nax8.imshow(img)\nax9 = plt.subplot(gs[9])\ny4, sr4 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/rebwoo\/XC145839.mp3\")\nlibrosa.display.waveplot(y4, sr4)\nax9.plot()","ccd9744e":"fig = plt.figure(figsize=(18, 18)) \ngs = gridspec.GridSpec(5, 2, width_ratios=[2, 6]) \nax0 = plt.subplot(gs[0])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/bkbwar.jpg\")\nax0.axis('off')\nax0.imshow(img)\nax1 = plt.subplot(gs[1])\ny, sr = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/bkbwar\/XC101580.mp3\")\nD = librosa.amplitude_to_db(np.abs(librosa.stft(y)), ref=np.max)\nlibrosa.display.specshow(D, y_axis='linear')\nplt.colorbar(format='%+2.0f dB')\nplt.title('Linear-frequency power spectrogram')\nax1.plot()\n\nax2 = plt.subplot(gs[2])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/clanut.jpg\")\nax2.axis('off')\nax2.imshow(img)\nax3 = plt.subplot(gs[3])\ny1, sr1 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/clanut\/XC391597.mp3\")\nD1 = librosa.amplitude_to_db(np.abs(librosa.stft(y1)), ref=np.max)\nlibrosa.display.specshow(D1, y_axis='linear')\nplt.colorbar(format='%+2.0f dB')\nax3.plot()\n   \nax4 = plt.subplot(gs[4])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/whcspa.jpg\")\nax4.axis('off')\nax4.imshow(img)\nax5 = plt.subplot(gs[5])\ny2, sr2 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/whcspa\/XC478423.mp3\")\nD2 = librosa.amplitude_to_db(np.abs(librosa.stft(y2)), ref=np.max)\nlibrosa.display.specshow(D2, y_axis='linear')\nplt.colorbar(format='%+2.0f dB')\nax5.plot()\n\nax6 = plt.subplot(gs[6])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/prawar.jpg\")\nax6.axis('off')\nax6.imshow(img)\nax7 = plt.subplot(gs[7])\ny3, sr3 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/prawar\/XC444966.mp3\")\nD3 = librosa.amplitude_to_db(np.abs(librosa.stft(y3)), ref=np.max)\nlibrosa.display.specshow(D3, y_axis='linear')\nplt.colorbar(format='%+2.0f dB')\nax7.plot()\n\nax8 = plt.subplot(gs[8])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/rebwoo.jpg\")\nax8.axis('off')\nax8.imshow(img)\nax9 = plt.subplot(gs[9])\ny4, sr4 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/rebwoo\/XC145839.mp3\")\nD4 = librosa.amplitude_to_db(np.abs(librosa.stft(y4)), ref=np.max)\nlibrosa.display.specshow(D4, y_axis='linear')\nplt.colorbar(format='%+2.0f dB')\nax9.plot()","b6820519":"fig = plt.figure(figsize=(18, 18)) \ngs = gridspec.GridSpec(5, 2, width_ratios=[2, 6]) \nax0 = plt.subplot(gs[0])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/bkbwar.jpg\")\nax0.axis('off')\nax0.imshow(img)\nax1 = plt.subplot(gs[1])\ny, sr = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/bkbwar\/XC101580.mp3\")\nC = librosa.feature.chroma_cqt(y=y, sr=sr)\nlibrosa.display.specshow(C, y_axis='chroma', x_axis='time')\nplt.title('Chroma (beat time)')\nax1.plot()\n\nax2 = plt.subplot(gs[2])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/clanut.jpg\")\nax2.axis('off')\nax2.imshow(img)\nax3 = plt.subplot(gs[3])\ny1, sr1 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/clanut\/XC391597.mp3\")\nC1 = librosa.feature.chroma_cqt(y=y1, sr=sr1)\nlibrosa.display.specshow(C1, y_axis='chroma', x_axis='time')\nax3.plot()\n   \nax4 = plt.subplot(gs[4])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/whcspa.jpg\")\nax4.axis('off')\nax4.imshow(img)\nax5 = plt.subplot(gs[5])\ny2, sr2 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/whcspa\/XC478423.mp3\")\nC2 = librosa.feature.chroma_cqt(y=y2, sr=sr2)\nlibrosa.display.specshow(C2, y_axis='chroma', x_axis='time')\nax5.plot()\n\nax6 = plt.subplot(gs[6])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/prawar.jpg\")\nax6.axis('off')\nax6.imshow(img)\nax7 = plt.subplot(gs[7])\ny3, sr3 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/prawar\/XC444966.mp3\")\nC3 = librosa.feature.chroma_cqt(y=y3, sr=sr3)\nlibrosa.display.specshow(C3, y_axis='chroma', x_axis='time')\nax7.plot()\n\nax8 = plt.subplot(gs[8])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/rebwoo.jpg\")\nax8.axis('off')\nax8.imshow(img)\nax9 = plt.subplot(gs[9])\ny4, sr4 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/rebwoo\/XC145839.mp3\")\nC4 = librosa.feature.chroma_cqt(y=y4, sr=sr4)\nlibrosa.display.specshow(C4, y_axis='chroma', x_axis='time')\nax9.plot()","490dc18a":"\nfig = plt.figure(figsize=(18, 18)) \ngs = gridspec.GridSpec(5, 2, width_ratios=[2, 6]) \nax0 = plt.subplot(gs[0])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/bkbwar.jpg\")\nax0.axis('off')\nax0.imshow(img)\nax1 = plt.subplot(gs[1])\ny, sr = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/bkbwar\/XC101580.mp3\")\ngram = librosa.feature.tempogram(y=y, sr=sr)\nlibrosa.display.specshow(gram, x_axis='time', y_axis='tempo')\nax1.plot()\n\nax2 = plt.subplot(gs[2])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/clanut.jpg\")\nax2.axis('off')\nax2.imshow(img)\nax3 = plt.subplot(gs[3])\ny1, sr1 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/clanut\/XC391597.mp3\")\ngram1 = librosa.feature.tempogram(y=y1, sr=sr1)\nlibrosa.display.specshow(gram1, x_axis='time', y_axis='tempo')\nax3.plot()\n   \nax4 = plt.subplot(gs[4])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/whcspa.jpg\")\nax4.axis('off')\nax4.imshow(img)\nax5 = plt.subplot(gs[5])\ny2, sr2 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/whcspa\/XC478423.mp3\")\ngram2 = librosa.feature.tempogram(y=y2, sr=sr2)\nlibrosa.display.specshow(gram2, x_axis='time', y_axis='tempo')\nax5.plot()\n\nax6 = plt.subplot(gs[6])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/prawar.jpg\")\nax6.axis('off')\nax6.imshow(img)\nax7 = plt.subplot(gs[7])\ny3, sr3 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/prawar\/XC444966.mp3\")\ngram3 = librosa.feature.tempogram(y=y3, sr=sr3)\nlibrosa.display.specshow(gram3, x_axis='time', y_axis='tempo')\nax7.plot()\n\nax8 = plt.subplot(gs[8])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/rebwoo.jpg\")\nax8.axis('off')\nax8.imshow(img)\nax9 = plt.subplot(gs[9])\ny4, sr4 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/rebwoo\/XC145839.mp3\")\ngram4 = librosa.feature.tempogram(y=y4, sr=sr4)\nlibrosa.display.specshow(gram4, x_axis='time', y_axis='tempo')\nax9.plot()","ce098901":"\nfig = plt.figure(figsize=(18, 18)) \ngs = gridspec.GridSpec(5, 2, width_ratios=[2, 6]) \nax0 = plt.subplot(gs[0])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/bkbwar.jpg\")\nax0.axis('off')\nax0.imshow(img)\nax1 = plt.subplot(gs[1])\ny, sr = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/bkbwar\/XC101580.mp3\")\nD = librosa.amplitude_to_db(np.abs(librosa.stft(y)), ref=np.max)\nlibrosa.display.specshow(D, cmap='gray_r', y_axis='linear')\nax1.plot()\n\nax2 = plt.subplot(gs[2])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/clanut.jpg\")\nax2.axis('off')\nax2.imshow(img)\nax3 = plt.subplot(gs[3])\ny1, sr1 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/clanut\/XC391597.mp3\")\nD = librosa.amplitude_to_db(np.abs(librosa.stft(y1)), ref=np.max)\nlibrosa.display.specshow(D, cmap='gray_r', y_axis='linear')\nax3.plot()\n   \nax4 = plt.subplot(gs[4])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/whcspa.jpg\")\nax4.axis('off')\nax4.imshow(img)\nax5 = plt.subplot(gs[5])\ny2, sr2 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/whcspa\/XC478423.mp3\")\nD = librosa.amplitude_to_db(np.abs(librosa.stft(y2)), ref=np.max)\nlibrosa.display.specshow(D, cmap='gray_r', y_axis='linear')\nax5.plot()\n\nax6 = plt.subplot(gs[6])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/prawar.jpg\")\nax6.axis('off')\nax6.imshow(img)\nax7 = plt.subplot(gs[7])\ny3, sr3 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/prawar\/XC444966.mp3\")\nD = librosa.amplitude_to_db(np.abs(librosa.stft(y3)), ref=np.max)\nlibrosa.display.specshow(D, cmap='gray_r', y_axis='linear')\nax7.plot()\n\nax8 = plt.subplot(gs[8])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/rebwoo.jpg\")\nax8.axis('off')\nax8.imshow(img)\nax9 = plt.subplot(gs[9])\ny4, sr4 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/rebwoo\/XC145839.mp3\")\nD = librosa.amplitude_to_db(np.abs(librosa.stft(y4)), ref=np.max)\nlibrosa.display.specshow(D, cmap='gray_r', y_axis='linear')\nax9.plot()","f8672075":"fig = plt.figure(figsize=(18, 18)) \ngs = gridspec.GridSpec(5, 2, width_ratios=[2, 6]) \nax0 = plt.subplot(gs[0])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/bkbwar.jpg\")\nax0.axis('off')\nax0.imshow(img)\nax1 = plt.subplot(gs[1])\ny, sr = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/bkbwar\/XC101580.mp3\")\ny_harm, y_perc = librosa.effects.hpss(y)\nlibrosa.display.waveplot(y_harm, sr=sr, alpha=0.25)\nlibrosa.display.waveplot(y_perc, sr=sr, color='r', alpha=0.5)\nax1.plot()\n\nax2 = plt.subplot(gs[2])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/clanut.jpg\")\nax2.axis('off')\nax2.imshow(img)\nax3 = plt.subplot(gs[3])\ny1, sr1 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/clanut\/XC391597.mp3\")\ny_harm1, y_perc1 = librosa.effects.hpss(y1)\nlibrosa.display.waveplot(y_harm1, sr=sr1, alpha=0.25)\nlibrosa.display.waveplot(y_perc1, sr=sr1, color='r', alpha=0.5)\nax3.plot()\n   \nax4 = plt.subplot(gs[4])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/whcspa.jpg\")\nax4.axis('off')\nax4.imshow(img)\nax5 = plt.subplot(gs[5])\ny2, sr2 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/whcspa\/XC478423.mp3\")\ny_harm2, y_perc2 = librosa.effects.hpss(y2)\nlibrosa.display.waveplot(y_harm2, sr=sr2, alpha=0.25)\nlibrosa.display.waveplot(y_perc2, sr=sr2, color='r', alpha=0.5)\nax5.plot()\n\nax6 = plt.subplot(gs[6])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/prawar.jpg\")\nax6.axis('off')\nax6.imshow(img)\nax7 = plt.subplot(gs[7])\ny3, sr3 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/prawar\/XC444966.mp3\")\ny_harm3, y_perc3 = librosa.effects.hpss(y3)\nlibrosa.display.waveplot(y_harm3, sr=sr3, alpha=0.25)\nlibrosa.display.waveplot(y_perc3, sr=sr3, color='r', alpha=0.5)\nax7.plot()\n\nax8 = plt.subplot(gs[8])\nimg = Image.open(\"\/kaggle\/input\/osic-bird-image\/rebwoo.jpg\")\nax8.axis('off')\nax8.imshow(img)\nax9 = plt.subplot(gs[9])\ny4, sr4 = librosa.load(\"\/kaggle\/input\/birdsong-recognition\/train_audio\/rebwoo\/XC145839.mp3\")\ny_harm4, y_perc4 = librosa.effects.hpss(y4)\nlibrosa.display.waveplot(y_harm4, sr=sr4, alpha=0.25)\nlibrosa.display.waveplot(y_perc4, sr=sr4, color='r', alpha=0.5)\nax9.plot()","37d5a163":"![image.png](attachment:image.png)","ae6f2602":"## 3.2 Spectrogram<a id = '3.2'>","9b20b0d7":"## 4.2 Linear-frequency power spectrogram<a id = '4.2'>","2aa50a05":"# Birdcall Recognition EDA","a79b3673":"## 4.4 Chromagram <a id = '4.4'>","83110aab":"Input files\n\n\/kaggle\/input\/birdsong-recognition\/test.csv\n\n\/kaggle\/input\/birdsong-recognition\/train.csv\n\n\/kaggle\/input\/birdsong-recognition\/example_test_audio_summary.csv\n\n\/kaggle\/input\/birdsong-recognition\/example_test_audio_metadata.csv","3069652f":"## 3.4 Tempogram<a id = '3.4'>","c005d4fe":"## 3.3 Chromagram<a id ='3.3'>","b504f3c8":"### Most of the birds have been seen by the Author","632aa1cc":"## 2.5 EDA - Date wise <a id='2.5'><\/a>","c0b6f8c1":"## 2.4 EDA - Location wise<a id='2.4'><\/a>","2acb898d":"### mostly these birds sounds are songs or calls","a145ff89":"## 3. Audio Analysis \ud83c\udfbc<a id='3'><\/a>","ffa0b562":"### More number of sound samples are having **good** ratings","631d2a8e":"Most of the birds are found in urban areas","a3e5e4a2":"## 4.5 Linear power spectrogram (grayscale) <a id='4.5'>","2f1bd205":"## 4.6 Harmonic + Percussive <a id ='4.6'>","380d2a95":"## 2.1 Birds and its environment <a id=\"2.1\"><\/a>","14d61848":"## 4.3 Chromagram <a id = '4.3'>","71798ba9":"## 4. Bird Song Audio Features Comparison<a id = '4'>","a0a819bb":"## 3.1 Tempo<a id ='3.1'>","3133a3e3":"## 2.2 EDA - Audio and backgrounds<a id='2.2'><\/a>","098f5b89":"### Higher number of birds sounds recored in USA followed by Canada and Mexico","6f9baf43":"## 3.5 Linear power spectrogram (grayscale)<a id = '3.5'>","e9fbbe2a":"## 4.1 Amplitutde<a id = '4.1'>","ecf42622":"## If you like this kernel plz <font color='red'>UPVOTE<\/font>.\n## If you have suggestions to improve this kernel plz <font color='red'>COMMENT<\/font>.\n\n<font color='Blue'>************************ Notebook is under construction ************************<\/font>","e5c2b75b":"## 1. Loading Data and Libraries<a id=\"1\"><\/a> ","20296150":"## 2.3 EDA - Authors<a id='2.3'><\/a>","acfa08e9":"## 2.6 EDA- Box plots<a id='2.6'>","8511f33e":"## 2. Data Exploration <a id=\"2\"><\/a>","6abad3c9":"<font size='5' color='#1C2833'>Contents<\/font> \n<font size='3' color='#717D7E'>\n1. [Loading Data and Libraries](#1)\n2. [Data Exploration](#2)<br>\n    2.1 [Birds and its Evnironment](#2.1)<br>\n    2.2 [Audio and background](#2.2)<br>\n    2.3 [Authors](#2.3)<br>\n    2.4 [Locations](#2.4)<br>\n    2.5 [Date wise](#2.5)<br>\n    2.6 [Box plots](#2.6)<br>\n3. [Audio Exploration](#3)<br>\n    3.1 [Tempo](#3.1)<br>\n    3.2 [Spectrogram](#3.2)<br>\n    3.3 [Chromagram](#3.3)<br>\n    3.4 [Tempogram](#3.4)<br>\n    3.5 [Linear power spectrogram (grayscale)](#3.5)<br>\n4. [Bird's song Comparison](#4)<br>\n    4.1 [Amplitude](#4.1)<br>\n    4.2 [Linear-frequency power spectrogram](#4.2)<br>\n    4.3 [Choromagram](#4.3)<br>\n    4.4 [Tempogram](#4.4)<br>\n    4.5 [Linear power spectrogram (grayscale)](#4.5)<br>\n    4.6 [Harmonic + Percussive](#4.6)<br>\n    \n   "}}