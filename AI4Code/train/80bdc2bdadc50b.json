{"cell_type":{"7d8c7f95":"code","9c7f193b":"code","38f38c4f":"code","4baab98e":"code","a0a62dde":"code","5cff6b06":"code","92ec931d":"code","fc923ab0":"code","668c7938":"code","eeaad025":"code","8bb0c989":"code","3c3e7e16":"code","385ae84f":"code","8bcf7c89":"code","897ce099":"code","a945c96e":"code","f81bbc71":"code","2ad03cc2":"code","5ff2cb26":"code","78674860":"code","dcbfd836":"code","5ad80590":"code","a31aae99":"code","b88e1a77":"code","6d5b5027":"code","6122cdab":"code","ed62e5cc":"code","0d137e56":"code","c2f2dac6":"code","1eca621c":"code","4be357d3":"code","e157c121":"code","6175c299":"code","4d7f7581":"code","2f2a95a6":"code","6b39a3c3":"code","bbb93194":"code","dc4a8329":"code","731d1de3":"code","d6c1e8c6":"code","d109f670":"markdown","987afe93":"markdown","5e5963a3":"markdown","338b0778":"markdown","0be4cd68":"markdown","aea64b73":"markdown","09e593b5":"markdown","b96e9d9c":"markdown","e525fec7":"markdown","84693787":"markdown","c1517629":"markdown","821b7653":"markdown","12aefa98":"markdown","ce39d404":"markdown"},"source":{"7d8c7f95":"import os\nprint(os.listdir(\"..\/input\"))\n# manipulating dataframes\nimport pandas as pd\nimport numpy as np\n# visualizing libraries\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","9c7f193b":"titanic = pd.read_csv('..\/input\/train.csv')\ntitanic.head()","38f38c4f":"titanic.shape","4baab98e":"titanic.dtypes","a0a62dde":"#summary statistics\ntitanic.describe()","5cff6b06":"#plots to identify any patterns or insights\ntitanic.hist(figsize=(10,10))","92ec931d":"#New Feature:Title\ndef title(x):\n    if 'Mr.' in x:\n        return 'Mr'\n    elif 'Mrs.' in x:\n        return 'Mrs'\n    elif 'Master' in x:\n        return 'Master'\n    elif 'Miss.' in x:\n        return 'Miss'\n    else:\n        return 'Other'\n# feature for the title of each person\ntitanic['Title'] = titanic['Name'].apply(title)\n\ntitanic['Title'].value_counts()","fc923ab0":"#New Feature: Mother\ndef mother(df):\n    if df['Sex'] == 'female' and df['Parch'] > 0 and df['Age'] > 18 and df['Title'] != 'Miss':\n        return 'Mother'\n    else:\n        return 'Not Mother'\n# feature mother for each person\ntitanic['Mother'] = titanic.apply(mother, axis=1)\n\ntitanic.Mother.value_counts()","668c7938":"# Added in 2 new features\ntitanic.head(3)","eeaad025":"titanic.isnull().sum() \/ len(titanic)","8bb0c989":"#Data Imputation: Age\n# Plot Distribution of Age (Missing)\nplt.subplot(1, 2, 1)\ntitanic['Age'].hist(bins=20, figsize=(15,6), edgecolor='white')\nplt.xlabel('Age', fontsize=12)\nplt.title('Distribution of Age (Missing)', fontsize=18)\n\n# Plot Distribution of Age (Imputed Mean)\nplt.subplot(1, 2, 2)\nmean_age = pd.DataFrame(titanic['Age'].fillna(titanic.Age.mean()))\nmean_age['Age'].hist(bins=20, figsize=(15,6), edgecolor='white', color='r')\nplt.xlabel('Age)', fontsize=12)\nplt.title('Distribution of Age (Imputed Mean)', fontsize=18)\n\nplt.show()    \n \n    \n    \n    ","3c3e7e16":"#Data Imputation: Age by Passenger Title\ntitanic.groupby(['Title'])['Age'].median()","385ae84f":"titanic.boxplot(column='Age',by='Title') #Mean Age is different per title\nplt.ylabel('Age')","8bcf7c89":"# Fill in the missing age with the median of their Titles\ntitanic['Age'].fillna(titanic.groupby([\"Title\"])[\"Age\"].transform(np.median),inplace=True)","897ce099":"#Plot the Age Distribution\ntitanic['Age'].hist(bins=20, figsize=(15,6), edgecolor='white')\nplt.xlabel('Age', fontsize=12)\nplt.title('Distribution of Age (Imputed by Title)', fontsize=18)","a945c96e":"#Data Imputation: Embarked\ntitanic.Embarked.value_counts() ","f81bbc71":"#Impute missing 'Embarked' variable with the most frequent value: (S)\ntitanic['Embarked'] = titanic['Embarked'].fillna(titanic['Embarked'].value_counts().index[0])","2ad03cc2":"#Data Imputation: Cabin\ntitanic.Cabin.isnull().sum() \/ len(titanic)","5ff2cb26":"#Drop Cabin Feature\ntitanic.drop(columns=['Cabin'], inplace=True)","78674860":"titanic['FamilySize'] = titanic['SibSp'] + titanic['Parch'] + 1\ntitanic.FamilySize.value_counts()","dcbfd836":"titanic.FamilySize.hist()\nplt.title('FamilySize Distribution for Titanic Passengers', size=15)\nplt.xlabel(\"Family Size\")\nplt.ylabel('Frequency')","5ad80590":"titanic['IsAlone'] = titanic['FamilySize'].apply(lambda x: 1 if x == 1 else 0)\ntitanic.IsAlone.value_counts()","a31aae99":"titanic.IsAlone.hist()\nplt.title('IsAlone Distribution for Titanic Passengers', size=15)\nplt.xlabel(\"IsAlone\")\nplt.ylabel('Frequency')","b88e1a77":"# Examine the Age Distribution\n#Binning helps solve the skewness problem.\ntitanic.Age.hist(bins=25)\nplt.title('Age Distribution for Titanic Passengers', size=15)\nplt.xlabel(\"Age\")\nplt.ylabel('Frequency')","6d5b5027":"# Fixed Width Binning (Kid, Teen, Adult, Elderly)\n#With domain knowledge, we can safely bin our passengers into different age groups.\nbins = [0,12,17,60,150]\nlabels = [\"kid\",\"teen\",\"adult\",\"elderly\"]\ntitanic['AgeGroup'] = pd.cut(titanic.Age,bins=bins,labels=labels)\ntitanic[['Age','AgeGroup']].head(10)","6122cdab":"#Quantile Binning uses the quantiles of our feature\ntitanic.Age.describe()","ed62e5cc":"#Create a quantile list\nquantile_list = [0, .25, .5, .75, 1.]\nquantiles = titanic['Age'].quantile(quantile_list)\nquantiles","0d137e56":"titanic['age_quantile_range'] = pd.qcut(titanic.Age, 4)\ntitanic['age_quantile_label'] = pd.qcut(titanic.Age, 4, labels=[0.25, 0.5, 0.75, 1])\ntitanic[['Age','age_quantile_range','age_quantile_label']].head()","c2f2dac6":"# Plot Fare Price Distribution\nplt.subplot(1, 2, 1)\n(titanic['Fare']).plot.hist(bins=15, figsize=(15, 6), edgecolor = 'white')\nplt.xlabel('Fare Price', fontsize=12)\nplt.title('BEFORE', fontsize=24)\n\n#Plot Log Fare Price Distribution\nplt.subplot(1, 2, 2)\nnp.log(titanic['Fare']+1).plot.hist(bins=15,figsize=(15,6), edgecolor='white', color='r')\nplt.xlabel('log(Fare Price+1)', fontsize=12)\nplt.title('AFTER', fontsize=24)\n\nplt.show()","1eca621c":"import sklearn.preprocessing as preproc\ndf_scale = titanic[['Fare']]","4be357d3":"#Min-Max Scaling\ndf_scale['Min-Max'] = preproc.minmax_scale(titanic[['Fare']])","e157c121":"#Standardization\ndf_scale['Standardization'] = preproc.StandardScaler().fit_transform(titanic[['Fare']])","6175c299":"fig, (ax1, ax2, ax3) = plt.subplots(3,1)\nfig.tight_layout()\n\n# Plot Original Price\ndf_scale['Fare'].hist(ax=ax1, bins=50)\nax1.tick_params(labelsize=14)\nax1.set_xlabel(\"Original Price\", fontsize=10)\nax1.set_ylabel(\"Frequency\", fontsize=14)\n\n# Plot Min-Max Scaling on Price\ndf_scale['Min-Max'].hist(ax=ax2, bins=50, color='r')\nax2.tick_params(labelsize=14)\nax2.set_xlabel(\"Min-Max Price\", fontsize=10)\n\n# Plot Standardized Scaling on Price\ndf_scale['Standardization'].hist(ax=ax3, bins=50, color='g')\nax3.tick_params(labelsize=14)\nax3.set_xlabel(\"Standarized Price\", fontsize=10)","4d7f7581":"titanic_cat = titanic.select_dtypes(include=['object','category'])\ntitanic_cat.head()","2f2a95a6":"#Encode our 'AgeGroup' Category\nage_group = np.unique(titanic_cat['AgeGroup'])\nage_group","6b39a3c3":"#Label Encoding\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ngenre_labels = le.fit_transform(titanic['AgeGroup'])\ntitanic_cat['AgeGroup_LE'] = genre_labels\ntitanic_cat[['AgeGroup','AgeGroup_LE']].head(20)","bbb93194":"# Ordinal Encoding\nfrom sklearn.preprocessing import OrdinalEncoder\nenc = OrdinalEncoder(categories=[['kid','teen','adult','elderly']])\nX = [['adult'], ['teen'], ['kid'], ['elderly'], ['adult']]\nAgeGroup_OE = enc.fit_transform(X)\nAgeGroup_OE","dc4a8329":"#Get the original data back\nage_ord_map = {'kid': 1, 'teen': 2, 'adult': 3, 'elderly': 4}\ntitanic_cat['AgeGroup_OE'] = titanic_cat['AgeGroup'].map(age_ord_map)\ntitanic_cat[['AgeGroup','AgeGroup_OE']].head(20)","731d1de3":"age = pd.DataFrame(['Kid','Teen','Adult','Elderly'], columns=['AgeGroup'])\nage_dummy_features = pd.get_dummies(age['AgeGroup'])\npd.concat([age, age_dummy_features], axis=1)","d6c1e8c6":"#Apply Dummy Encoding to 'AgeGroup' feature\ntitanic_dummyage = pd.get_dummies(titanic_cat['AgeGroup'])\npd.concat([titanic_cat, titanic_dummyage], axis=1)","d109f670":"**Dummy Encoding**\n\n* Use one Dummy encoding where you want each value\/category of the feature to be unique.\n* One Hot Encoding fixes the problem of having your model think that different categorical values have some numeric association to it.","987afe93":"**Basic Feature Engineering**","5e5963a3":"**Explore data**","338b0778":"Create new features from dataset:\n* title: reflecting a persons title (Mr., Mrs. etc)\n* mother: reflecting if a person is a mother or not","0be4cd68":"**Normalization**\n\nNormalization( Feature scaling) always divides the feature by a constant.\nAnd it does not change the distribution of your data","aea64b73":"**Feature Engineering and Data Pre-Processing**","09e593b5":"**Power Transformations**\n\n* Power Transformations DOES CHANGE the distribution of your data and tries to make it more \"normal\".\n* Example: Log Transformation, It compresses the long tail of the distribution into a shorter tail, and expands the lower tail of the distribution into the longer head.","b96e9d9c":"**Load Dataset**","e525fec7":"**Numeric Feature Engineering Techniques**","84693787":"**Categorical Feature Engineering**","c1517629":"**Plot Scaled Features**","821b7653":"**Encoding Ordinal Variables**\n\nRequires domain knowledge and assumes order of importance","12aefa98":"**Impute Missing Values**","ce39d404":"There's A LOT of single riders. \n**Create new feature**: \"IsAlone\""}}