{"cell_type":{"d3b536e0":"code","003bde04":"code","bf66e98c":"code","81c66e5c":"code","46942eb2":"code","d654d366":"code","eba52482":"code","541c6475":"code","9842e644":"code","7caeafa9":"code","63f25af7":"code","8e4e7196":"code","1c243d15":"code","a4727ebb":"code","ec9cd269":"code","4aa7607b":"code","63b347f5":"code","f09850e7":"code","f36bc8a2":"code","73d5df86":"code","fe48d8ba":"code","76aa4c5a":"markdown","4c1d92a5":"markdown","ca80f425":"markdown","20bd6bb4":"markdown","a282b1ee":"markdown","8971d4ac":"markdown","fa0084dc":"markdown","30f3d5cb":"markdown","169fb0f6":"markdown","90bae1ce":"markdown","6c490da5":"markdown","6653c74a":"markdown"},"source":{"d3b536e0":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n#plotly\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected =True)\nimport plotly.graph_objs as go\nfrom plotly import tools\n\n#matplotlib\nimport matplotlib.pyplot as plt ","003bde04":"data = pd.read_csv('..\/input\/fifa-18-demo-player-dataset\/CompleteDataset.csv')\ndata.head(2)","bf66e98c":"data.shape","81c66e5c":"data.info()","46942eb2":"data['array'] = data['Unnamed: 0']+1\n\n# Just take the columns we'll use\ndata= data[['array','Name','Age','Nationality','Overall','Potential','Club','Value',\n                      'Wage','Special','Acceleration','Ball control','Dribbling','Free kick accuracy',\n                      'Penalties','Shot power']]","d654d366":"data.head(4)","eba52482":"data.shape","541c6475":"from wordcloud import WordCloud\n\n#Prepare Data Frame\nd_frame = data.Club[:20]\n\nplt.subplots(figsize=(10,10))\nwordcloud = WordCloud(\n                   background_color='White',\n                        width = 700,\n                        height = 400\n    ).generate(\" \".join(d_frame))\n\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')","9842e644":"#\u0443\u0434\u0430\u043b\u044f\u0435\u043c \u20ac -> '\u00a3100K' -> '100K'\nwage = data['Wage'].map(lambda x: x.replace(\"\u20ac\", \"\"))\nwage.head() \n\n#\u0443\u0434\u0430\u043b\u044f\u0435\u043c K -> it will be like that: '100K' -> '100'\nwage = wage.map(lambda x: x.replace(\"K\", \"\"))\nwage.head()","7caeafa9":"#\u0443\u0434\u0430\u043b\u044f\u0435\u043c \u20ac -> '\u00a3100M or \u00a3100K' -> '100M or 100K'\nvalue = data['Value'].map(lambda x: x.replace(\"\u20ac\", \"\"))\n                                                                       \n#\u0443\u0434\u0430\u043b\u044f\u0435\u043c M -> '100M' -> '100 or 100K'\nvalue = value.map(lambda x: x.replace(\"M\", \"\"))\nvalue.head()\n\n#\u0443\u0434\u0430\u043b\u044f\u0435\u043c K -> '100K' -> '100'\nvalue = value.map(lambda x: x.replace(\"K\", \"\"))\nvalue.head()   ","63f25af7":"wage = wage.astype(\"int\")*1000\nwage.head()","8e4e7196":"value = value.astype(\"float\")*1000000\nvalue.head()","1c243d15":"#\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\ndata['wage']=wage\ndata['value']=value\ndata.head(4)","a4727ebb":"data.groupby(\"Nationality\").Name.count().sort_values(ascending=False).head(10)","ec9cd269":"#How many players are from the same country? \/ \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u044b\ndf = data['Nationality'].value_counts()\n\niplot([\n    go.Choropleth(\n    locationmode='country names',\n    locations=df.index.values,\n    text= df.index,\n    z=df.values,\n    colorscale= 'Jet'\n    )\n])","4aa7607b":"players = pd.DataFrame(data.Nationality.value_counts()) \\\n.reset_index() \\\n.rename({'index': 'Country', 'Nationality': 'Players'}, \n        axis=1)\n\ndef get_country():\n    for country in players[:6].Country.values:\n        yield country\n\nfig, axes = plt.subplots(nrows=2, ncols=3, figsize=(12,7), constrained_layout=True)\na = get_country()\n\nfor row, row_axes in enumerate(axes):\n    for column, ax in enumerate(row_axes):\n        country = next(a)\n        ax.hist(data.query('Nationality == \"{}\"'.format(country)).Age, bins=20)\n        ax.set_title('{}'.format(country))\n        ax.set_xlabel('Age')\n        ax.set_ylabel('Quantity')\n\nfig.suptitle('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430', fontsize=16)        \nplt.show()      ","63b347f5":"\u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u0442\u043e\u043f-6 \u0441\u0442\u0440\u0430\u043d (\u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0444\u0443\u0442\u0431\u043e\u043b\u0438\u0441\u0442\u043e\u0432)","f09850e7":"fig, ax = plt.subplots()\nax.hist(data['Age'], bins=20)\nax.set_xlabel('\u0412\u043e\u0437\u0440\u0430\u0441\u0442 \u0438\u0433\u0440\u043e\u043a\u0430')\nax.set_ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0433\u0440\u043e\u043a\u043e\u0432')\nax.set_title(r'\u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 \u0438\u0433\u0440\u043e\u043a\u043e\u0432')\nplt.show()","f36bc8a2":"df = data.groupby(['Age']).value.mean()\n\nfig, ax = plt.subplots()\nax.plot(df)\n\nax.set(xlabel='\u0412\u043e\u0437\u0440\u0430\u0441\u0442 \u0438\u0433\u0440\u043e\u043a\u0430', ylabel='\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0446\u0435\u043d\u0430',\n       title='\u0413\u0440\u0430\u0444\u0438\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u0433\u0440\u043e\u043a\u0430 \u043e\u0442 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430')\nax.grid()\n\nfig.savefig(\"test.png\")\nplt.show()","73d5df86":"data.groupby(\"Club\")[\"wage\"].mean().sort_values(ascending=False).head(10)","fe48d8ba":"#\u041f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c Data Frame\ndf = data.groupby(\"Club\")[\"wage\"].mean().sort_values(ascending=False).head(10)\n\n#\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0433\u0440\u0430\u0444\u0438\u043a\ntrace = go.Bar(\n    x= data.array,\n    y= df,\n    opacity = 0.75,\n    text= data.Club,\n    marker = dict(color='rgba(0, 250, 100,0.6)'))\n\ndata = [trace]\nlayout = go.Layout(barmode='group',\n                  title='\u0422\u043e\u043f-10 \u043a\u043e\u043c\u0430\u043d\u0434, \u0438\u0433\u0440\u0430\u044e\u0449\u0438\u0445 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0437\u0430\u0440\u043f\u043b\u0430\u0442\u043e\u0439',\n                  xaxis= dict(title= '\u041d\u043e\u043c\u0435\u0440'),\n                  yaxis= dict(title='\u0421\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u0430\u044f \u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u043a\u043b\u0443\u0431\u0430'),)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","76aa4c5a":"**3.1 \u0422\u043e\u043f-20 \u043a\u043b\u0443\u0431\u043e\u0432 \"\u043e\u0431\u043b\u0430\u043a\u043e\u043c \u0441\u043b\u043e\u0432\"** ","4c1d92a5":"**3.4. \u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 \u0438\u0433\u0440\u043e\u043a\u043e\u0432**","ca80f425":"**3.5. \u0413\u0440\u0430\u0444\u0438\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0442\u0440\u0430\u043d\u0441\u0444\u0435\u0440\u0442\u043d\u043e\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u0433\u0440\u043e\u043a\u0430 \u043e\u0442 \u0435\u0433\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430** ","20bd6bb4":"**3.3.1. \u041e\u0442\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u0430\u0440\u0442\u0435 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c**","a282b1ee":"**3.2.\u041f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e Wage' and 'Value'**","8971d4ac":"# 2.DATA","fa0084dc":"**3.3.2. \u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u0442\u043e\u043f-6 \u0441\u0442\u0440\u0430\u043d (\u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0444\u0443\u0442\u0431\u043e\u043b\u0438\u0441\u0442\u043e\u0432)**\n\n\u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u0440\u0430\u043d, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0434\u043e\u043c\u0438\u043d\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442","30f3d5cb":"**3.6. \u0422\u043e\u043f-10 \u043a\u043e\u043c\u0430\u043d\u0434, \u0432\u044b\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043d\u0443\u044e \u043f\u043b\u0430\u0442\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e BarPlot**","169fb0f6":"# 1. Packages","90bae1ce":"**3.3 \u041f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c**","6c490da5":"# 3. DATA VISUALIZATION","6653c74a":"**2.1.Data Structure**\n\nThere are 75 columns and 17981 observations on data."}}