{"cell_type":{"778935b0":"code","78d45ad1":"code","2a0cfad8":"code","6ca0d91a":"code","e0128d4f":"code","93286f3c":"code","b2eeedf2":"code","3f3add32":"code","d9c144ce":"code","ac906ccf":"code","62ebb348":"code","dfb730fd":"code","75da6ad9":"code","ddb35910":"code","51d22055":"code","64234a11":"code","7526b8f9":"code","54041657":"code","62a8aa5a":"code","aa0d7e6a":"code","c642de84":"code","9f5e166b":"code","57e1d4e9":"code","9333dfd9":"code","c8d6398f":"code","7a75c634":"code","f6c1bb44":"code","16b1f718":"code","c41d9e25":"code","60521b42":"code","7c19f1a4":"code","0e31c255":"markdown","7896e493":"markdown","8cba6402":"markdown","e7db2d21":"markdown","d3c188ae":"markdown","ba498174":"markdown","62063771":"markdown","aa689b35":"markdown","d45b27ef":"markdown","60273fa4":"markdown","ab69f26c":"markdown","1092d0dc":"markdown","504952b6":"markdown","01dd44cf":"markdown","6e2ab9e4":"markdown","3aec65eb":"markdown","7422182f":"markdown","2fe798fa":"markdown","bc117d4b":"markdown","695866c0":"markdown"},"source":{"778935b0":"!pip install bubbly\n!pip install squarify","78d45ad1":"import numpy as np \nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport plotly.offline as py \nimport plotly.graph_objs as go\nfrom plotly import tools\npy.init_notebook_mode(connected=True)\n\nfrom bubbly.bubbly import bubbleplot\nimport squarify\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nprint(os.listdir(\"..\/input\"))","2a0cfad8":"df = pd.read_csv(\"..\/input\/googleplaystore.csv\")\ndf.head()","6ca0d91a":"null_sum = pd.DataFrame(df.isnull().sum(), columns=[\"Sum\"])\nnull_percent = pd.DataFrame((df.isnull().sum() \/ df.shape[0]) * 100, columns=[\"Percent\"])\ntotal = pd.concat([null_sum, null_percent], axis=1)\ntotal.sort_values([\"Sum\", \"Percent\"], ascending=False)","e0128d4f":"df.info()","93286f3c":"#Droping Null Values\ndf = df.dropna(axis=0)","b2eeedf2":"#Droping Duplicates\ndf.drop_duplicates(\"App\", inplace=True)","3f3add32":"#Removing + and , from installs\ndf[\"Installs\"] = df[\"Installs\"].apply(lambda x: x.replace('+', ''))\ndf[\"Installs\"] = df[\"Installs\"].apply(lambda x: x.replace(',', ''))\n\n#Removing M and , and Converting size of apps to MB\ndf[\"Size\"] = df[\"Size\"].apply(lambda x: str(x).replace('Varies with device', 'NaN') if 'Varies with device' in str(x) else x)\ndf[\"Size\"] = df[\"Size\"].apply(lambda x: str(x).replace('M', '') if 'M' in str(x) else x)\ndf[\"Size\"] = df[\"Size\"].apply(lambda x: str(x).replace(',', '') if 'M' in str(x) else x)\ndf[\"Size\"] = df[\"Size\"].apply(lambda x: float(str(x).replace('k', '')) \/ 1024 if 'k' in str(x) else x)\n\ndf[\"Installs\"] = df[\"Installs\"].astype(\"int\")\ndf[\"Reviews\"] = df[\"Reviews\"].astype(\"int\")\ndf.dropna(axis=0, inplace=True)\ndf[\"Size\"] = df[\"Size\"].astype(\"float\")","d9c144ce":"#Removing $ from Price\ndf[\"Price\"] = df[\"Price\"].apply(lambda x: x.replace('$', ''))\ndf[\"Price\"] = df[\"Price\"].astype(\"float\")","ac906ccf":"plt.style.use(\"_classic_test\")\n\nplt.figure(figsize=(10,8))\nplt.hist(df[\"Rating\"], bins=100);","62ebb348":"plt.figure(figsize=(10,8))\nsns.countplot(df[\"Installs\"])\nplt.xticks(rotation=90);","dfb730fd":"plt.style.use(\"seaborn-white\")\nsns.pairplot(df);","75da6ad9":"def pie_plot(cnt, colors, text):\n    labels = list(cnt.index)\n    values = list(cnt.values)\n    \n    trace = go.Pie(labels=labels, \n                   values=values, \n                   hoverinfo='value+percent', \n                   title=text, \n                   textinfo='label', \n                   hole=.4, \n                   textposition='inside', \n                   marker=dict(colors = colors,\n                              ),\n                  )\n    return trace\n\n\ntypes = df[\"Type\"].value_counts()\ntrace = pie_plot(types, ['#09efef', '#b70333'], \"Results\")\n\npy.iplot([trace], filename='Type')\n","ddb35910":"df.dropna(axis=0, inplace=True)\ndf['ratings'] = round(df['Rating'])\ndf['ratings'] = df['ratings'].astype('int')\ndf['size'] = round(df['Size'])\ndf['size'] = df['size'].astype('int')\n\n\nfig = bubbleplot(df, x_column='Reviews', y_column='ratings', bubble_column='App', size_column='size', color_column='Installs', x_title='Reviews', \n                 y_title='Ratings', title='Reviews vs Ratings', x_logscale=False, scale_bubble=3, height=650)\n\npy.iplot(fig, config={'scrollzoom': True})","51d22055":"plt.figure(figsize=(20,20))\ncolor = plt.cm.cool(np.linspace(0, 1, 50))\n\ncategories = df[\"Category\"].value_counts().sort_values(ascending=True)\nsquarify.plot(sizes=categories.values, label=categories.index, alpha=.8, color=color)\nplt.title('Tree Map For Popular Categories')\nplt.axis('off')\nplt.show()","64234a11":"genres = df[\"Genres\"].value_counts().sort_values(ascending=True)\ntrace = pie_plot(genres, [\"cyan\", \"yellow\", \"red\"], \"Genres\")\npy.iplot([trace])","7526b8f9":"content = df[\"Content Rating\"].value_counts()\ntrace = pie_plot(content, [\"yellow\", \"cyan\", \"purple\", \"red\"], \"Content\")\npy.iplot([trace], filename=\"Content\")","54041657":"trace = [go.Histogram(x = df.Size)]\nlayout = {\"title\": \"Size\"}\npy.iplot({\"data\": trace, \"layout\": layout})","62a8aa5a":"trace = [go.Scatter(x=df[\"Rating\"], y=df[\"Size\"], mode=\"markers\")]\nlayout = {\"title\": \"Ratings vs Size\",\n          \"xaxis\": {\"title\": \"Ratings\"},\n          \"yaxis\": {\"title\": \"Size\"},\n          \"plot_bgcolor\": \"rgb(0,0,0)\"} \npy.iplot({'data': trace, 'layout': layout})","aa0d7e6a":"# Top Categories\ndf[[\"Category\", \"Rating\"]].groupby(\"Category\", as_index=False).mean().sort_values('Rating', ascending=False).head(10)","c642de84":"plt.style.use(\"seaborn-white\")\nplt.figure(figsize=(10, 8))\nsns.boxplot(x=\"Category\", y=\"Rating\", palette=\"rainbow\", data=df)\nplt.title(\"Category vs Rating\")\nplt.xticks(rotation=90);","9f5e166b":"# Top Genres\ndf[[\"Genres\", \"Rating\"]].groupby(\"Genres\", as_index=False).mean().sort_values('Rating', ascending=False).head(10)","57e1d4e9":"plt.figure(figsize=(20, 10))\nsns.boxplot(x=\"Genres\", y=\"Rating\", palette=\"rainbow\", data=df)\nplt.title(\"Genres vs Rating\")\nplt.xticks(rotation=90);","9333dfd9":"costlier = df.sort_values(by=\"Price\", ascending=False)[[\"App\", \"Price\"]].head(20)\ncostlier","c8d6398f":"apps = df[df[\"Reviews\"] >= 200]\napps.head()","7a75c634":"# Top 10 Apps \ntop_apps = apps.sort_values(by=[\"Rating\", \"Reviews\", \"Installs\"], ascending=False)[[\"App\", \"Rating\", \"Reviews\"]].head(10)\ntop_apps","f6c1bb44":"#APPS WITH MOST INSTALLATIONS\napps.sort_values(by=\"Installs\", ascending=False)[[\"App\", \"Installs\", \"Rating\"]].head(15)","16b1f718":"#APPS WITH MOST REVIEWS\napps.sort_values(by=\"Reviews\", ascending=False)[[\"App\", \"Reviews\", \"Rating\"]].head(15)","c41d9e25":"reviews = pd.read_csv('..\/input\/googleplaystore_user_reviews.csv')\nreviews.head()","60521b42":"# Droping Null Values\nreviews.dropna(axis=0, inplace=True)","7c19f1a4":"from wordcloud import WordCloud\nfrom nltk.corpus import stopwords\n\nplt.figure(figsize=(12,12))\nwc = WordCloud(background_color=\"white\", max_words=100, colormap=\"rainbow\", stopwords=stopwords.words(\"english\"))\nplt.imshow(wc.generate_from_text(str(reviews[\"Translated_Review\"])), interpolation=\"bilinear\");\nplt.axis(\"off\");","0e31c255":"**Mostly Google Apps have most installations**","7896e493":"### Data Cleaning","8cba6402":"**Some of common words used in reviews**\n* **app, health, good, Awesome etc**","e7db2d21":"**In this kernel we will try to do some analysis and we will find out the most popular app on play store**","d3c188ae":"** Thank you if you made it till here!! Please Upvote**","ba498174":"* **Most Ratings range from 3 to 5**","62063771":"## PLAY STORE APPS EDA ","aa689b35":"* **As Price Increases the installation decreases as well as reviews decreases**\n* **Free apps are more preferred and has most number of reviews and installations**\n* **Lots of ratings range from 3-5** ","d45b27ef":"### TOP APPS","60273fa4":"**I have rounded ratings and size for bubbleplot**\n* Clash of Clans , Clash Royale, Subway Surfers, Candy Crush are most popular","ab69f26c":"* **Most Reviewed Apps are:-**\n<img src=\"https:\/\/gizblog.it\/wp-content\/uploads\/2019\/01\/Facebook-messenger-instagram-whatsapp.jpg\" width=\"300px\">","1092d0dc":"**Apps with smaller size has highest rating**","504952b6":"* **Most apps are rated for everyone**","01dd44cf":"* **Tools, Entertainment, Education are some of the popular Genres**","6e2ab9e4":"* **93.1% of free apps** \n* **6.89% of paid apps**","3aec65eb":"* **Family, Game and Tools are some popular categories**","7422182f":"**JW Library has most reviews and highest rating**","2fe798fa":"**Taking apps with at least 200 reviews to find the best App**","bc117d4b":"<img src=\"https:\/\/www.androidpolice.com\/wp-content\/uploads\/2018\/08\/play-store-hero.png\"  width=\"1000px\">","695866c0":"* **Most Costliest Apps**\n* **400 dollars is the highest Price**"}}