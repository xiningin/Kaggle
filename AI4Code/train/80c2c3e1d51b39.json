{"cell_type":{"407b4465":"code","d4acf124":"code","0359ea46":"code","7f405ece":"code","a5130d3b":"code","f8fcf6cd":"code","ba353ff9":"code","137dbc44":"code","d97896f5":"code","9a4af853":"code","de98b803":"code","81e9450f":"code","36fe50db":"code","ab56423e":"code","710deff1":"code","9ba0c44e":"code","8656977f":"code","76d3b4b7":"code","6e32c807":"code","6aad71f2":"code","812e0635":"code","163bbdba":"code","2f698ccf":"code","2074908e":"code","450b7661":"code","b2f08a1e":"code","d40cc844":"code","ee2f1303":"code","2d483e35":"code","47d9bc2c":"code","6e588bb0":"code","01f015e4":"code","6e54119c":"code","b18b94fc":"code","5a58c7ee":"code","36f5f678":"code","7811cb75":"code","58c6636a":"code","b462236b":"code","c442d8ef":"code","33687545":"code","c4172269":"code","18d58149":"code","8e0560b2":"code","6764c28d":"code","6d165c23":"code","a5b22915":"code","d2eef6f4":"code","39e6dd5a":"code","5e9ae143":"code","cfc14afd":"code","d0525428":"code","fb4452a7":"code","7798f95f":"code","c5ba0190":"code","bdd8ca2e":"code","c4d0fd98":"code","fb13e137":"code","567595a6":"code","86382282":"code","942557d0":"code","4ea79569":"code","25cd7e66":"code","8eeb7a83":"code","b193900d":"code","ebf43937":"code","d69612b0":"code","a35818e2":"code","5f70cb1d":"code","8c50000d":"code","201a33da":"code","df0443af":"code","e09d0788":"code","4e4c9820":"code","89ccf847":"code","8e5437c0":"markdown","76e94fea":"markdown","04e0e574":"markdown","88bfafd6":"markdown","4c0f4a95":"markdown","9b344124":"markdown","611ec7e2":"markdown","91860024":"markdown","786b9def":"markdown","37c82ea7":"markdown","ae0965a4":"markdown","78d6b76b":"markdown","155f8fa6":"markdown","8e2cebab":"markdown","723edcb9":"markdown","c1679c5c":"markdown","536ef4f1":"markdown","e6b409c1":"markdown","4a158be4":"markdown","864abe60":"markdown","59a3f6bf":"markdown","b72a61f0":"markdown","08fab508":"markdown","f51d19cd":"markdown","2a4bffff":"markdown","9f5b89c5":"markdown","5c4496b6":"markdown","6612dd8d":"markdown","ff576d2a":"markdown","33da2bee":"markdown","39fc1065":"markdown","36de1ccb":"markdown","5ab9f393":"markdown","6614e198":"markdown","927e7fa0":"markdown","d6a12454":"markdown","4f294449":"markdown","557faf9a":"markdown","bb0a15b7":"markdown","8fccbc01":"markdown","db8ee449":"markdown","99477c40":"markdown","23eadbd5":"markdown","cffae4fc":"markdown","3fc0e21f":"markdown","90ca16b1":"markdown","1ca10adc":"markdown","a855aa96":"markdown","258decc2":"markdown","c1a87903":"markdown"},"source":{"407b4465":"# General tools\nimport pandas as pd\nimport numpy as np\nimport os, math\nfrom collections import Counter\n\n# Plotting\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nmorancolor=sns.color_palette(['#6a2202', '#bc7201', '#e5ab09', '#22180d', '#0f1a26','#241c24', '#745656', '#c7b44f', '#977f48', '#392c23'])\nplt.style.use(\"fivethirtyeight\")\nsns.set_palette(morancolor)\n\nplt.rcParams['font.family']='serif'\nplt.rcParams['figure.dpi'] =100 # high resolution\n\n# Manage warnings\nimport warnings\nwarnings.filterwarnings('ignore')","d4acf124":"df=pd.read_csv(\"..\/input\/water-potability\/water_potability.csv\")\ndf.dropna(how='all',inplace=True)\ndf.drop_duplicates(inplace=True)\ndf.shape","0359ea46":"df.sample(3)","7f405ece":"df.info()","a5130d3b":"df.nunique()","f8fcf6cd":"pd.DataFrame([df.isnull().sum().sort_values(ascending=False),(df.isnull().sum()\/df.shape[0]).sort_values(ascending=False)],\n            index=['# of missing values','Percentage']).T","ba353ff9":"df.describe()","137dbc44":"def despine():\n    sns.despine(top=1,bottom=1,right=1,left=1)\n    \ndef title(title,fontsize=13):\n    plt.title(title,fontweight='bold',fontsize=fontsize)","d97896f5":"def countall(df,lst,h=4,w=10,cut=3,hspace=.5,wspace=.25,annotsize=10):\n    f=plt.figure(figsize=(w,h))\n    plt.subplots_adjust(hspace=hspace,wspace=wspace)\n    for i,col in enumerate(lst):\n        ax=f.add_subplot(math.ceil(len(lst)\/cut),cut,i+1)\n        sns.countplot(df[col])\n        for p in ax.patches:\n            ax.annotate(f\"{p.get_height()\/df[col].shape[0]*100:.2f}%\",xy=[p.get_x(),p.get_height()],fontsize=annotsize)\n        despine()\n        plt.ylabel('')\n        plt.xlabel(col,fontweight='bold')","9a4af853":"from scipy.stats import skew\ndef kdeall(df,lst,h=4,w=10,cut=3,hspace=.5,wspace=.25,meanskew=True,kdecut=0,legendsize=10,xlabelsize=13,loc='best'):\n    f=plt.figure(figsize=(w,h))\n    plt.subplots_adjust(hspace=hspace,wspace=wspace)\n    for i,col in enumerate(lst):\n        f.add_subplot(math.ceil(len(lst)\/cut),cut,i+1)\n        if meanskew==True:\n            sns.kdeplot(df.dropna(subset=[col])[col],cut=kdecut,label=f'Skewness: {skew(df.dropna(subset=[col])[col]):.2f}',lw=3)\n            plt.axvline(df.dropna(subset=[col])[col].mean(),label='mean',color='#22180d',lw=1.5)\n            plt.axvline(df.dropna(subset=[col])[col].median(),label='median',ls='--',color='#22180d',lw=1.5)\n            plt.legend(fontsize=legendsize,loc=loc)\n        else: sns.kdeplot(df.dropna(subset=[col])[col],cut=kdecut,lw=3)\n        sns.rugplot(df.dropna(subset=[col])[col])\n        despine()\n        plt.ylabel('')\n        plt.xlabel(col,fontweight='bold',fontsize=xlabelsize)","de98b803":"def pointall(df,lst,target,h=4,w=10,cut=3,hspace=.5,wspace=.25,annotsize=10,choose=1):\n    f=plt.figure(figsize=(w,h))\n    plt.subplots_adjust(hspace=hspace,wspace=wspace)\n    for i,col in enumerate(lst):\n        ax=f.add_subplot(math.ceil(len(lst)\/cut),cut,i+1)\n        if choose==1: sns.pointplot(x=df[target],y=df[col],lw=3)\n        else: sns.pointplot(x=df[col],y=df[target],lw=3)\n        despine()\n        plt.ylabel('')\n        plt.xlabel(col,fontweight='bold')","81e9450f":"def histall(df,lst,target,h=4,w=10,cut=3,hspace=.5,wspace=.25,xlabel=12):\n    f=plt.figure(figsize=(w,h))\n    plt.subplots_adjust(hspace=hspace,wspace=wspace)\n    for i,col in enumerate(lst):\n        ax=f.add_subplot(math.ceil(len(lst)\/cut),cut,i+1)\n        sns.histplot(data=df.dropna(subset=[col,target]),x=col,hue=target)\n        despine()\n        plt.ylabel('')\n        plt.xlabel(col,fontweight='bold',fontsize=xlabel)","36fe50db":"def boxall(df,lst,h=4,w=10,cut=3,hspace=.5,wspace=.25,annotsize=10,target=None):\n    f=plt.figure(figsize=(w,h))\n    plt.subplots_adjust(hspace=hspace,wspace=wspace)\n    for i,col in enumerate(lst):\n        ax=f.add_subplot(math.ceil(len(lst)\/cut),cut,i+1)\n        if target==None: sns.boxplot(df[col])\n        else: sns.boxplot(df[target],df[col])\n        despine()\n        plt.ylabel('')\n        plt.xlabel(col,fontweight='bold')","ab56423e":"def kdesmall(x):\n    sns.kdeplot(df[x],hue=df.Potability,lw=3,cut=0)\n    title(f'Distribution of {x}')","710deff1":"df.Potability.value_counts(1)","9ba0c44e":"sns.catplot(data=df,y=\"Potability\",kind='count',height=4,aspect=1.7)\ndespine()\ntitle('Distribution of Potability',fontsize=17)","8656977f":"df.corr().Potability.abs().sort_values(ascending=False)[1:][::-1].plot(kind='barh',figsize=(7,4))\nplt.yticks(fontsize=11)\ndespine()","76d3b4b7":"col=df.corr().Potability.abs().sort_values(ascending=False)[1:].index.tolist()\ncol","6e32c807":"kdeall(df,col,cut=3,h=10,w=10,legendsize=10)\nplt.suptitle('Distribution of our independent features',fontweight='bold')\nplt.show()","6aad71f2":"histall(df,col,\"Potability\",h=10)\nplt.suptitle('Potability and other independent features',fontweight='bold')\nplt.show()","812e0635":"pointall(df,col,\"Potability\",h=7)\nplt.suptitle('Potability and other independent features',fontweight='bold')\nplt.show()","163bbdba":"boxall(df,col,h=7)","2f698ccf":"kdesmall(\"Organic_carbon\")\nplt.axvline(x=4,lw=3,ls=':',color='black')\nplt.figtext(0.1, 0.15, 'safe')\nplt.figtext(0.3, 0.15, 'unsafe')\ndespine()","2074908e":"kdesmall(\"Chloramines\")\nplt.axvline(x=4,lw=3,ls=':',color='black')\nplt.figtext(0.2, 0.15, 'safe')\nplt.figtext(0.4, 0.15, 'unsafe')\ndespine()","450b7661":"kdesmall(\"ph\")\nplt.axvline(x=6.5,lw=3,ls=':',color='black')\nplt.axvline(x=8.5,lw=3,ls=':',color='black')\nplt.figtext(0.52, 0.15, 'safe')\nplt.figtext(0.37, 0.15, 'unsafe')\nplt.figtext(0.62, 0.15, 'unsafe')\n\ndespine()","b2f08a1e":"kdesmall(\"Hardness\")","d40cc844":"kdesmall(\"Trihalomethanes\")\nplt.axvline(x=80,lw=3,ls=':',color='black')\nplt.figtext(0.52, 0.15, 'safe')\nplt.figtext(0.67, 0.15, 'unsafe')\ndespine()","ee2f1303":"kdesmall(\"Turbidity\")\nplt.axvline(x=5,lw=3,ls=':',color='black')\nplt.figtext(0.56, 0.15, 'safe')\nplt.figtext(0.67, 0.15, 'unsafe')\n\ndespine()","2d483e35":"kdesmall(\"Conductivity\")\nplt.axvline(x=400,lw=3,ls=':',color='black')\nplt.figtext(0.3, 0.15, 'safe')\nplt.figtext(0.45, 0.15, 'unsafe')\n\ndespine()","47d9bc2c":"df.corr().Potability.abs().sort_values(ascending=False)[1:][::-1].plot(kind='barh')\ndespine()","6e588bb0":"mask = np.triu(np.ones_like(df.corr()))\nf=plt.figure(figsize=(9,5))\nsns.heatmap(df.corr(),cmap='RdBu',vmax=1,vmin=-1,mask=mask,annot=True,fmt='.2f',annot_kws={\"size\":9},cbar=False)\nplt.yticks(fontsize=11)\nplt.xticks(fontsize=11,rotation=40)\nplt.show()","01f015e4":"boxall(df,col,h=13,target=\"Potability\",hspace=.25)","6e54119c":"from scipy.stats import ttest_ind\ndef checking(x):\n    stat,p=ttest_ind(df[df.Potability==0].dropna(subset=[x])[x],df[df.Potability==1].dropna(subset=[x])[x])\n    return p","b18b94fc":"pd.Series({i:checking(i) for i in col}).sort_values(ascending=False).plot(kind='barh')\nplt.axvline(x=.1,c='black',ls=':')\nplt.show()\n\npd.Series({i:checking(i) for i in col}).sort_values(ascending=False)","5a58c7ee":"sns.pairplot(df,hue=\"Potability\",corner=True)","36f5f678":"df.isnull().sum().sort_values(ascending=False)","7811cb75":"for i in [\"Sulfate\",\"ph\",\"Trihalomethanes\"]:\n    df[i].fillna(df[i].median(),inplace=True)","58c6636a":"df.isnull().sum()","b462236b":"boxall(df,col,h=7)","c442d8ef":"def outliers(x,fence=1.5):\n    q1,q3=np.percentile(df[x],25), np.percentile(df[x],75)\n    iqr=q3-q1\n    print(f\"{x}: {len(df[(df[x]<q1-fence*iqr)|(df[x]>q3+1.5*iqr)])} outliers\")\n    return df[(df[x]<q1-fence*iqr)|(df[x]>q3+1.5*iqr)].index.tolist()","33687545":"outind=[]\nfor i in [\"Solids\",\"Organic_carbon\"]:\n    outind.extend(outliers(i))\noutind=list(set(outind))\nprint(f\"\\nWe are going to drop {len(outind)} outliers\")","c4172269":"print(df.shape)\ndf.drop(index=outind,inplace=True)\ndf.shape","18d58149":"# before scaling\nkdeall(df,col,h=10,xlabelsize=13)\ndf2=df.copy() # let's make a copy of our dataset before scaling","8e0560b2":"from sklearn.preprocessing import StandardScaler\nscl=StandardScaler()\ndf[col]=scl.fit_transform(df[col])\ndf","6764c28d":"# after scaling\nkdeall(df,col,h=10,xlabelsize=13)\nplt.suptitle('After scaling',fontsize=17,fontweight='bold')\nplt.show()","6d165c23":"import statsmodels.api as sm\ndef select_by_pvalue(target,df,fence=.05,w=7,h=5,textw=.5,texth=.2):\n    mod=sm.OLS(df[target],df.drop(target,axis=1))\n    fii=mod.fit()\n    sub=fii.summary2().tables[1][\"P>|t|\"].sort_values()\n    sub.plot(kind='barh',figsize=(w,h))\n    pvalue_set=sub[sub<=fence].index.tolist()\n    plt.axvline(x=fence,c='black')\n    plt.figtext(textw, texth, 'dropped',fontsize=15, fontweight='bold')\n    return pvalue_set","a5b22915":"select_by_pvalue(\"Potability\",df,fence=.1)","d2eef6f4":"df.corr().Potability.abs().sort_values(ascending=False)[1:][::-1].plot(kind='barh')","39e6dd5a":"subset=df.drop(columns=['Turbidity','ph','Potability']).columns.tolist()\nsubset","5e9ae143":"from sklearn.decomposition import PCA\ndef reduct_pca(X,w=8,h=3):\n    pca=PCA(n_components=X.shape[1],random_state=0)\n    Xpca=pca.fit_transform(X)\n    f=plt.figure(figsize=(w,h))\n    plt.bar(range(1,X.shape[1]+1),pca.explained_variance_ratio_,label='individual explained variance')\n    plt.step(range(1,X.shape[1]+1), np.cumsum(pca.explained_variance_ratio_),where='mid',label='cumulative explained variance')\n    plt.xticks(range(1,X.shape[1]+1))\n    plt.xlabel('# of principal components')\n    plt.ylabel('explained variance ratio',fontsize=13)\n    plt.yticks(fontsize=12)\n    plt.legend(fontsize=12,loc='best')\n    despine()\n    return Xpca","cfc14afd":"reduct_pca(df.drop(columns=\"Potability\"))","d0525428":"X=df.iloc[:,:-1]\ny=df.Potability\nX.shape,y.shape","fb4452a7":"from sklearn.model_selection import StratifiedKFold\ndef check(clf,X,y=y,n_splits=10):\n    kf=StratifiedKFold(n_splits=n_splits,random_state=0,shuffle=True)\n    k_tracc,k_teacc=[],[]\n    for (tr,te) in kf.split(X,y):\n        clf.fit(X.iloc[tr],y.iloc[tr])\n        k_tracc.append(clf.score(X.iloc[tr],y.iloc[tr]))\n        k_teacc.append(clf.score(X.iloc[te],y.iloc[te]))\n    print(f\"Train score: {np.mean(k_tracc)}\")\n    print(f\"Test score: {np.mean(k_teacc)}\")\n    return clf","7798f95f":"def selectmoran(modellst,X,y=y,n_splits=10,random_state=0):\n    kf=StratifiedKFold(n_splits=n_splits,random_state=random_state,shuffle=True)\n    namelst,imp,tr_acc,te_acc=[],[],[],[]\n    for clf in modellst:\n        namelst.append(type(clf).__name__)\n        k_tracc, k_teacc, k_f1, k_imp=[],[],[],[]\n        for (tr,te) in kf.split(X,y): # train, test index\n            clf.fit(X.iloc[tr],y.iloc[tr])\n            k_tracc.append(clf.score(X.iloc[tr],y.iloc[tr]))\n            k_teacc.append(clf.score(X.iloc[te],y.iloc[te]))\n            if hasattr(clf,\"feature_importances_\"): k_imp.append(clf.feature_importances_)\n        tr_acc.append(np.mean(k_tracc))\n        te_acc.append(np.mean(k_teacc))\n        if len(k_imp)==0: imp.append(False)\n        else: imp.append(np.mean(k_imp,axis=0))\n    score=pd.DataFrame({'Model':namelst,'Train_accuracy':tr_acc,'Test_accuracy':te_acc}).sort_values('Test_accuracy',ascending=False)\n    return score,imp","c5ba0190":"def plotscoring(score,title,w=7,h=5,alpha=.97,axvline=.8,yticksize=12):\n    f,ax=plt.subplots(figsize=(w,h))\n    print(f\"Mean accuracy for all models: {np.mean(score.Test_accuracy)}\\n\")\n    print(score)\n    sns.barplot(x=score.Test_accuracy,y=score.Model,alpha=alpha,color='#bc7201')\n    sns.barplot(x=-score.Train_accuracy,y=score.Model,alpha=alpha,color='#6a2202')\n    ax.set_xlim(-1,1)\n    plt.axvline(x=0,color='black')\n    plt.xlabel('Train\/ Test accuracy')\n    plt.ylabel('')\n    plt.title(f\"Model score for {title}\",fontweight='bold')\n    plt.axvline(x=axvline,ls=':')\n    plt.yticks(fontsize=yticksize)\n    despine()","bdd8ca2e":"from sklearn.model_selection import GridSearchCV\ndef grid(clf,params,X,y=y,cv=5):\n    grid=GridSearchCV(clf,params,cv=cv)\n    grid.fit(X,y)\n    print(f\"Best score: {grid.best_score_}\")\n    print(f\"Best params: {grid.best_params_}\")\n    return grid.best_estimator_","c4d0fd98":"def plotting_importances(score,imp,X,w=8,h=3,rotation=90,xsize=10):\n    for (a,b) in zip(score.Model,imp):\n        if b is not False:\n            ind=np.argsort(b)[::-1]\n            cols=X.columns\n            plt.figure(figsize=(w,h))\n            plt.title(f\"Feature importances via {a}\",fontweight='bold',fontsize=13)\n            plt.bar(range(X.shape[1]),b[ind])\n            plt.xticks(range(X.shape[1]),cols[ind],rotation=rotation,fontsize=xsize)\n            plt.xlim([-1,X.shape[1]])\n            plt.tight_layout()","fb13e137":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier,AdaBoostClassifier,BaggingClassifier,ExtraTreesClassifier\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom lightgbm import LGBMClassifier\nfrom sklearn.svm import SVC,LinearSVC\n\nmodellst=[LogisticRegression(solver='liblinear'), \n          RandomForestClassifier(), GradientBoostingClassifier(),\n          AdaBoostClassifier(), BaggingClassifier(), CatBoostClassifier(), XGBClassifier(),\n          GaussianNB(), LGBMClassifier(), SVC()]","567595a6":"scorefull,impfull=selectmoran(modellst,X,y)","86382282":"plotscoring(scorefull,'Full features')","942557d0":"subset","4ea79569":"score_subset,imp_subset=selectmoran(modellst,X[subset])","25cd7e66":"plotscoring(score_subset,'Subset')","8eeb7a83":"def plot_meanscore(meanscore_set):\n    print(meanscore_set)\n    f=plt.figure(figsize=(8,3))\n    meanscore_set.Test_accuracy[::-1].plot(kind='barh',color='#0f1a26',alpha=.95)\n    (-1*meanscore_set.Train_accuracy[::-1]).plot(kind='barh',alpha=.95)\n    plt.axvline(x=0,c='black')\n    despine()","b193900d":"meanscore=pd.DataFrame({'Test_accuracy':[np.mean(i.Test_accuracy) for i in [scorefull,score_subset]],\n             'Train_accuracy':[np.mean(i.Train_accuracy) for i in [scorefull,score_subset]]},\n             index=['Fullset','Subset']).sort_values('Test_accuracy',ascending=False)\n\nmaxscore=pd.DataFrame({'Test_accuracy':[np.max(i.Test_accuracy) for i in [scorefull,score_subset]],\n             'Train_accuracy':[np.max(i.Train_accuracy) for i in [scorefull,score_subset]]},\n             index=['Fullset','Subset']).sort_values('Test_accuracy',ascending=False)","ebf43937":"plot_meanscore(meanscore)\ntitle('Mean test accuracy',fontsize=17)","d69612b0":"plot_meanscore(maxscore)\ntitle('Max test accuracy',fontsize=17)","a35818e2":"plotscoring(scorefull,'Full features')","5f70cb1d":"tuningfull=[AdaBoostClassifier(base_estimator=ExtraTreesClassifier(), learning_rate=0.5, n_estimators=200),\n           BaggingClassifier(base_estimator=SVC()),\n           LGBMClassifier(boosting_type='dart', learning_rate=0.03, max_depth=8, n_estimators=150, subsample=1),\n           XGBClassifier(** {'learning_rate': 0.05, 'max_depth': None, 'n_estimators': 100, 'subsample': 0.8}),\n           RandomForestClassifier(n_estimators=300,min_samples_leaf=2,random_state=1),\n           SVC(C=3),\n           CatBoostClassifier(random_state=1),\n           GradientBoostingClassifier(learning_rate=0.03, max_depth=6, min_samples_leaf=2, n_estimators=80, subsample=0.8)]\nscore_tuf,imp_tuf=selectmoran(tuningfull,X)","8c50000d":"plotscoring(score_tuf,'Hypertuning - Full features')","201a33da":"plotscoring(score_subset,'Subset')","df0443af":"tuningsub=[AdaBoostClassifier(base_estimator=ExtraTreesClassifier(), learning_rate=0.02, n_estimators=80, random_state=1),\n          RandomForestClassifier(max_depth=7, n_estimators=80),\n          BaggingClassifier(SVC(C=3)),\n          SVC(C=3, gamma='auto'),\n          CatBoostClassifier(**{'leaf_estimation_method': 'Newton', 'learning_rate': 0.03, 'max_depth': 5, 'n_estimators': 300, 'subsample': 0.8}),\n          XGBClassifier(booster='dart',learning_rate=.03,n_estimators=100,max_depth=5,subsample=.8),\n          ExtraTreesClassifier(max_depth=7,n_estimators=300,min_samples_leaf=2,random_state=1),\n           GradientBoostingClassifier(learning_rate=0.03,\n                           loss='exponential', max_depth=7, min_samples_leaf=2,\n                           n_estimators=250, subsample=0.8)]\nscore_tus,imp_tus=selectmoran(tuningsub,X[subset])","e09d0788":"plotscoring(score_tus,'Subset')","4e4c9820":"meanscore=pd.DataFrame({'Test_accuracy':[np.mean(i.Test_accuracy) for i in [scorefull,score_subset,score_tuf,score_tus]],\n             'Train_accuracy':[np.mean(i.Train_accuracy) for i in [scorefull,score_subset,score_tuf,score_tus]]},\n             index=['Fullset','Subset','Hypertuning - Fullset','Hypertuning - Subset']).sort_values('Test_accuracy',ascending=False)\nmaxscore=pd.DataFrame({'Test_accuracy':[np.max(i.Test_accuracy) for i in [scorefull,score_subset,score_tuf,score_tus]],\n             'Train_accuracy':[np.max(i.Train_accuracy) for i in [scorefull,score_subset,score_tuf,score_tus]]},\n             index=['Fullset','Subset','Hypertuning - Fullset','Hypertuning - Subset']).sort_values('Test_accuracy',ascending=False)","89ccf847":"plot_meanscore(maxscore)","8e5437c0":"# 3. Data preprocessing","76e94fea":">PH is an important parameter in evaluating the acid\u2013base balance of water. It is also the indicator of acidic or alkaline condition of water status. **WHO has recommended maximum permissible limit of pH from 6.5 to 8.5**. The current investigation ranges were 6.52\u20136.83 which are in the range of WHO standards.","04e0e574":"# 2. Exploratory data analysis","88bfafd6":"### 4.2.2 Hypertuning parameters on subset","4c0f4a95":"### 2.1.1 Our target variable: Potability","9b344124":"### 2.1.3 Our target variable and other independent features","611ec7e2":">Pure water is not a good conductor of electric current rather\u2019s a good insulator. Increase in ions concentration enhances the electrical conductivity of water. Generally, the amount of dissolved solids in water determines the electrical conductivity. Electrical conductivity (EC) actually measures the ionic process of a solution that enables it to transmit current. According to WHO standards, **EC value should not exceeded 400 \u03bcS\/cm**","91860024":"## 1.1 Importing python libraries and our dataset","786b9def":"- All of our independent features are almost normally distributed with small skewness (we should standardize them later), except for Solids\n- Some large values appear in the right of Solids distribution (with the skewness of 0.62)","37c82ea7":">Total Organic Carbon (TOC) in source waters comes from decaying natural organic matter (NOM) as well as synthetic sources. TOC is a measure of the total amount of carbon in organic compounds in pure water. According to US EPA < 2 mg\/L as TOC in treated \/ drinking water, and < 4 mg\/Lit in source water which is use for treatment.","ae0965a4":"## 1.3 Data distribution","78d6b76b":"## 3.3 Feature scaling","155f8fa6":"# Context\nSource: https:\/\/www.kaggle.com\/adityakadiwal\/water-potability\n\nAccess to safe drinking-water is essential to health, a basic human right and a component of effective policy for health protection. This is important as a health and development issue at a national, regional and local level. In some regions, it has been shown that investments in water supply and sanitation can yield a net economic benefit, since the reductions in adverse health effects and health care costs outweigh the costs of undertaking the interventions.\n\n# Content\nThe water_potability.csv file contains water quality metrics for 3276 different water bodies.","8e2cebab":"## 4.2 Hypertuning parameters","723edcb9":"- Target variable - Potability: 39% of our observations are safe for human consumption\n- Features may contain outliers: solids, conductivity, and trihalomethanes","c1679c5c":"# 4. Modeling","536ef4f1":"Let's form our hypothesis\n    \n    H0: mean values for both groups are the same\n    H1: mean values for both groups are significantly different\n    \n    Alpha (significance level): 10%","e6b409c1":"## 2.2 Multivariate analysis","4a158be4":"## 3.4 Feature selection","864abe60":"- Turibidity seems not to be a good predictor\n- Water with is usable for human consumptions are more likely to have:\n    + higher solids: with an average value of about 22400\n    + lower organic carbon: around 14.2\n    + higher chloramines\n    + lower sulfate\n    + lower hardness: around 196\n    + lowr conductivity: about 425\n    + higher trihalomethanes\n    + slightly lower ph","59a3f6bf":">The turbidity of water depends on the quantity of solid matter present in the suspended state. It is a measure of light emitting properties of water and the test is used to indicate the quality of waste discharge with respect to colloidal matter. The mean turbidity value obtained for Wondo Genet Campus (0.98 NTU) is lower than the WHO recommended value of 5.00 NTU.","b72a61f0":"## 3.1 Filling in missing data","08fab508":"- Features contains missing data: sulfate, ph, and trihalomethanes","f51d19cd":"# 1. Overview","2a4bffff":"### 4.2.1 Hypertuning parameters on our fullset","9f5b89c5":"### 3.4.2 By our EDA","5c4496b6":"## 2.1 Univariate analysis","6612dd8d":"## 3.2 Handling outliers","ff576d2a":"### 4.1.1 Initial performance on our full set","33da2bee":"- All of our features are weakly correlated","39fc1065":"- So solids and organic carbon features have significant differences on our target variable\n- We also notice that ph and turbidity features seem not to be good predictors","36de1ccb":"## 1.2 Data completeness","5ab9f393":"- The most important features (in order) are probably: solids, organic carbon, chloramines, and sulfate","6614e198":"### 4.1.2 Performing on our subset","927e7fa0":"# Data dictionary\n    1. pH value:\n    PH is an important parameter in evaluating the acid\u2013base balance of water. It is also the indicator of acidic or alkaline condition of water status. WHO has recommended maximum permissible limit of pH from 6.5 to 8.5. The current investigation ranges were 6.52\u20136.83 which are in the range of WHO standards.\n\n    2. Hardness:\n    Hardness is mainly caused by calcium and magnesium salts. These salts are dissolved from geologic deposits through which water travels. The length of time water is in contact with hardness producing material helps determine how much hardness there is in raw water. Hardness was originally defined as the capacity of water to precipitate soap caused by Calcium and Magnesium.\n\n    3. Solids (Total dissolved solids - TDS):\n    Water has the ability to dissolve a wide range of inorganic and some organic minerals or salts such as potassium, calcium, sodium, bicarbonates, chlorides, magnesium, sulfates etc. These minerals produced un-wanted taste and diluted color in appearance of water. This is the important parameter for the use of water. The water with high TDS value indicates that water is highly mineralized. Desirable limit for TDS is 500 mg\/l and maximum limit is 1000 mg\/l which prescribed for drinking purpose.\n\n    4. Chloramines:\n    Chlorine and chloramine are the major disinfectants used in public water systems. Chloramines are most commonly formed when ammonia is added to chlorine to treat drinking water. Chlorine levels up to 4 milligrams per liter (mg\/L or 4 parts per million (ppm)) are considered safe in drinking water.\n\n    5. Sulfate:\n    Sulfates are naturally occurring substances that are found in minerals, soil, and rocks. They are present in ambient air, groundwater, plants, and food. The principal commercial use of sulfate is in the chemical industry. Sulfate concentration in seawater is about 2,700 milligrams per liter (mg\/L). It ranges from 3 to 30 mg\/L in most freshwater supplies, although much higher concentrations (1000 mg\/L) are found in some geographic locations.\n\n    6. Conductivity:\n    Pure water is not a good conductor of electric current rather\u2019s a good insulator. Increase in ions concentration enhances the electrical conductivity of water. Generally, the amount of dissolved solids in water determines the electrical conductivity. Electrical conductivity (EC) actually measures the ionic process of a solution that enables it to transmit current. According to WHO standards, EC value should not exceeded 400 \u03bcS\/cm.\n\n    7. Organic_carbon:\n    Total Organic Carbon (TOC) in source waters comes from decaying natural organic matter (NOM) as well as synthetic sources. TOC is a measure of the total amount of carbon in organic compounds in pure water. According to US EPA < 2 mg\/L as TOC in treated \/ drinking water, and < 4 mg\/Lit in source water which is use for treatment.\n\n    8. Trihalomethanes:\n    THMs are chemicals which may be found in water treated with chlorine. The concentration of THMs in drinking water varies according to the level of organic material in the water, the amount of chlorine required to treat the water, and the temperature of the water that is being treated. THM levels up to 80 ppm is considered safe in drinking water.\n\n    9. Turbidity:\n    The turbidity of water depends on the quantity of solid matter present in the suspended state. It is a measure of light emitting properties of water and the test is used to indicate the quality of waste discharge with respect to colloidal matter. The mean turbidity value obtained for Wondo Genet Campus (0.98 NTU) is lower than the WHO recommended value of 5.00 NTU.\n\n    10. Potability:\n    Indicates if water is safe for human consumption where 1 means Potable and 0 means Not potable.","d6a12454":"- All features, except for turbidity","4f294449":"1. Overview\n    - 1.1 Importing python libraries and our dataset\n    - 1.2 Data completeness\n    - 1.3 Data distribution\n2. Exploratory data analysis\n    - 2.1 Univariate analysis\n    - 2.2 Multivariate analysis\n3. Data preprocessing\n    - 3.1 Filling in missing data\n    - 3.2 Handling outliers\n    - 3.3 Feature scaling\n    - 3.4 Feature selection\n4. Modeling\n    - 4.1 Our baseline models\n    - 4.2 Hypertuning parameters","557faf9a":"- There is no clear linear trends because our variables are weakly correlated (see the correlation matrix), so linear models may not work on our dataset","bb0a15b7":"## 4.1 Our baseline models","8fccbc01":"## 3.4.2 Dimensionality reduction via PCA","db8ee449":"- Approximate 60% of the variance was explained by the top 5 principal components\n- We've noticed that our features have weak correlation and there are no obvious linear trends between features which might tell us a better story about our target variable","99477c40":"- Our fullset has better performance than subset","23eadbd5":"### 2.1.2 Distribution of our independent features","cffae4fc":">Chlorine and chloramine are the major disinfectants used in public water systems. Chloramines are most commonly formed when ammonia is added to chlorine to treat drinking water. **Chlorine levels up to 4 milligrams per liter (mg\/L or 4 parts per million (ppm)) are considered safe in drinking water**","3fc0e21f":"- Our sample contains 3276 observations and 10 features, including our target variable - potability\n- All features are numeric","90ca16b1":"### 3.4.1 Using P-value","1ca10adc":"### 2.1.4 Conclusion\n- A large propotion of our observations are at unsafe levels","a855aa96":"- The most important features (in order) probably are: solids, organic carbon, chloramines, and sulfate","258decc2":">THMs are chemicals which may be found in water treated with chlorine. The concentration of THMs in drinking water varies according to the level of organic material in the water, the amount of chlorine required to treat the water, and the temperature of the water that is being treated. **THM levels up to 80 ppm is considered safe in drinking water**","c1a87903":"- Our target variable is not really well-balanced with about 61% of the water unusable for human consumptions"}}