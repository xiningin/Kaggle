{"cell_type":{"21aa6923":"code","e9a2576a":"code","584ad7b2":"code","276cff49":"code","2cc37aa3":"code","f70c7f15":"code","9fe06080":"code","4761d537":"code","debf6414":"markdown","6877d590":"markdown","0142e102":"markdown","727902c6":"markdown","c6425d6c":"markdown","2a722713":"markdown","5d9d4d52":"markdown"},"source":{"21aa6923":"import tensorflow as tf","e9a2576a":"train_folder = \"..\/input\/training_set\/training_set\"\ntest_folder = \"..\/input\/test_set\/test_set\"\ntarget_size = (100, 150, 3)","584ad7b2":"gen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1.\/255)","276cff49":"train_images = gen.flow_from_directory(train_folder, target_size=target_size[:2], batch_size=40)\ntest_images = gen.flow_from_directory(test_folder, target_size=target_size[:2], batch_size=40)","2cc37aa3":"def create_model(target_size=(225, 300, 3)):\n    model = tf.keras.models.Sequential([\n        # Normalizing Input Tensor\n        tf.keras.layers.BatchNormalization(input_shape=target_size),\n        # Convolutional Layer #1\n        tf.keras.layers.Conv2D(128, (3, 3), activation=\"relu\"),\n        tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),\n        # Convolutional Layer #2\n        tf.keras.layers.Conv2D(64, (3, 3), activation=\"relu\"),\n        tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),\n        # Convolutional Layer #3\n        tf.keras.layers.Conv2D(32, (3, 3), activation=\"relu\"),\n        tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),\n        # Flatten Layer\n        tf.keras.layers.Flatten(),\n        # Dense Layer #1\n        tf.keras.layers.Dense(128, activation=\"relu\"),\n        # Dense Layer #2\n        tf.keras.layers.Dense(64, activation=\"relu\"),\n        # Dropout Layer\n        tf.keras.layers.Dropout(0.5),\n        # Output Layer\n        tf.keras.layers.Dense(2, activation=\"softmax\")\n    ])\n\n    return model","f70c7f15":"model = create_model(target_size=target_size)\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","9fe06080":"model.fit_generator(train_images, epochs=10, steps_per_epoch=8005 \/\/ 40,)","4761d537":"print(f\"Accuracy: {model.evaluate_generator(test_images, 2000 \/\/ 40)[1]}\")","debf6414":"### Validating The Model","6877d590":"### Training The Model","0142e102":"## Some Config Vars","727902c6":"## Image Generators","c6425d6c":"### Compiling The Model","2a722713":"## Preparing Model","5d9d4d52":"## Import Dependences"}}