{"cell_type":{"3024ef48":"code","68f30fdd":"code","57b16e66":"code","12b74f4b":"code","ea49b9bf":"code","348971c5":"code","42f4b494":"code","85b876e5":"code","b6b61e1a":"code","bc2bbca7":"code","a0af5f70":"code","52efe7ef":"code","cb66c9e0":"code","39060409":"code","9dafd8e0":"code","1ea01ccb":"code","eec56950":"code","1a132aa5":"code","9e0e99e3":"code","4d15ebf5":"code","88e0b59c":"code","2a8ad92c":"code","578c0020":"code","e45d98a3":"markdown","1d7d1b6b":"markdown","079aeb5d":"markdown","0c4a9af7":"markdown","15271cab":"markdown","08238730":"markdown","ae257707":"markdown","9b358b43":"markdown","2ac1a24b":"markdown","a71017e3":"markdown","13b2bc35":"markdown","975dee1f":"markdown","c69154c2":"markdown"},"source":{"3024ef48":"!pip install -U git+https:\/\/github.com\/paoloripamonti\/face-recognition.git","68f30fdd":"from face_recognition import FaceRecognition\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, roc_curve, precision_recall_curve, roc_auc_score, accuracy_score\n\nimport matplotlib.pyplot as plt\nimport os\nimport glob\nimport pandas as pd\nimport random\nimport numpy as np\nimport cv2\nimport base64\nfrom tqdm import tqdm\nimport requests\nfrom pprint import pprint","57b16e66":"ROOT_Train =\"\/kaggle\/input\/masked-unmasked-mixed\/mixed_2_3\/mixed\/train\"\nROOT_Test = \"\/kaggle\/input\/masked-unmasked-mixed\/mixed_2_3\/mixed\/test\"","12b74f4b":"train = []\nfor path in glob.iglob(os.path.join(ROOT_Train, \"**\", \"*.jpg\")):\n    person = path.split(\"\/\")[-2]\n    train.append({\"person\":person, \"path\": path})\n  \ntrain = pd.DataFrame(train)\ntrain = train.groupby(\"person\").filter(lambda x: len(x) > 0)\ntrain.head(10)","ea49b9bf":"train.groupby(\"person\").count()[:50].plot(kind='bar', figsize=(20,5))","348971c5":"print(\"number of person in train dataset : %s\" %(len(train.groupby(\"person\"))))\nprint(\"number of image in train dataset : %s\" %(len(train)))","42f4b494":"trainx, valid = train_test_split(train, test_size=0.1, random_state=42, shuffle=True)","85b876e5":"print(\"number of person in train dataset : %s\" %(len(trainx.groupby(\"person\"))))\nprint(\"number of image in train dataset : %s\" %(len(trainx)))\nprint(\"number of person in validation dataset : %s\" %(len(valid.groupby(\"person\"))))\nprint(\"number of image in validation dataset: %s\" %(len(valid)))","b6b61e1a":"plt.figure(figsize=(20,10))\nfor i in range(10):\n    idx = random.randint(0, len(train))\n    img = plt.imread(train.path.iloc[idx])\n    plt.subplot(4, 5, i+1)\n    plt.imshow(img)\n    plt.title(train.person.iloc[idx])\n    plt.xticks([])\n    plt.yticks([])\nplt.tight_layout()\nplt.show()","bc2bbca7":"test = []\nfor path in glob.iglob(os.path.join(ROOT_Test, \"**\", \"*.jpg\")):\n    person = path.split(\"\/\")[-2]\n    test.append({\"person\":person, \"path\": path})\ntest = pd.DataFrame(test)\ntest = test.groupby(\"person\").filter(lambda x: len(x) > 0)\ntest.head(10)","a0af5f70":"print(\"number of person in test dataset : %s\" %(len(test.groupby(\"person\"))))\nprint(\"number of image in test dataset : %s\" %(len(test)))","52efe7ef":"test.groupby(\"person\").count()[:50].plot(kind='bar', figsize=(20,5))","cb66c9e0":"plt.figure(figsize=(20,10))\nfor i in range(10):\n    idx = random.randint(0, len(test))\n    img = plt.imread(test.path.iloc[idx])\n    plt.subplot(4, 5, i+1)\n    plt.imshow(img)\n    plt.title(test.person.iloc[idx])\n    plt.xticks([])\n    plt.yticks([])\nplt.tight_layout()\nplt.show()","39060409":"print(\"Train:\",len(trainx))\nprint(\"Test:\",len(test))","9dafd8e0":"%%time\nfr = FaceRecognition()","1ea01ccb":"%%time\nfr.fit_from_dataframe(trainx) ","eec56950":"fr.save('masked_unmasked_model.pkl')","1a132aa5":"%%time\nvalid_test, valid_pred, valid_scores = [],[],[]\nfor idx in tqdm(range(len(valid))):\n    path = valid.path.iloc[idx]\n    result = fr.predict(path)\n    for prediction in result[\"predictions\"]:\n        valid_pred.append(prediction[\"person\"])\n        valid_scores.append(prediction[\"confidence\"])\n        valid_test.append(valid.person.iloc[idx])","9e0e99e3":"%%time\ny_test, y_pred, y_scores = [],[],[]\nfor idx in tqdm(range(len(test))):\n    path = test.path.iloc[idx]\n    result = fr.predict(path)\n    for prediction in result[\"predictions\"]:\n        y_pred.append(prediction[\"person\"])\n        y_scores.append(prediction[\"confidence\"])\n        y_test.append(test.person.iloc[idx])","4d15ebf5":"print(classification_report(y_test, y_pred))","88e0b59c":"print(\"Train Accuracy: %f\" % accuracy_score(valid_test, valid_pred))","2a8ad92c":"print(\"Test Accuracy: %f\" % accuracy_score(y_test, y_pred))","578c0020":"person = ''\nfor i in range (0,30):\n    if person == y_test[i]:\n        continue\n    else:\n        person = y_test[i]\n        path = test[test.person==person][\"path\"].iloc[0]\n        img = cv2.imread(path)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        result = fr.predict(path)\n        if (len(result[\"predictions\"]) > 0):\n            file_bytes = np.fromstring(base64.b64decode(result[\"frame\"]), np.uint8)\n            output = cv2.imdecode(file_bytes,1)\n            plt.figure(figsize=(10,5))\n            plt.subplot(1, 2, 1)\n            plt.imshow(img)\n            plt.title(person)\n            plt.subplot(1, 2, 2)\n            plt.imshow(output)\n            print(result[\"predictions\"][0][\"confidence\"])\n            plt.title(\"%s (%f)\" % (result[\"predictions\"][0][\"person\"], result[\"predictions\"][0][\"confidence\"]))\n            plt.tight_layout()\n            plt.show()","e45d98a3":"### Size of train & test dataset","1d7d1b6b":"# Needed Libraries","079aeb5d":"# Evaluate","0c4a9af7":"# Save Model","15271cab":"## Test Dataset","08238730":"# Examples","ae257707":"# Fit Face Recognition","9b358b43":"## Train Dataset","2ac1a24b":"## Training Model","a71017e3":"## Initialize Model","13b2bc35":"### Settings","975dee1f":"# Face Recognition\n\nSee: https:\/\/github.com\/paoloripamonti\/face-recognition.git","c69154c2":"# Read dataset"}}