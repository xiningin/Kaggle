{"cell_type":{"80b4b1ce":"code","a8c5e687":"code","69b5ad08":"code","e1c0452f":"code","729f6a32":"code","e1707641":"code","0963e41a":"code","ea11bc90":"code","c145a181":"code","1b4355f9":"code","aa063081":"code","71be2bb7":"code","ed80dd93":"code","bd55c820":"code","e5c7f5a0":"code","6c6d20ff":"code","4a965992":"code","0da5abd3":"code","317713c9":"code","abfb57ee":"code","434578c6":"code","99075dff":"code","f207b582":"code","15e81eb1":"code","a18ea0e3":"code","a71f524f":"code","90cec41f":"code","1e9286d8":"code","034eca10":"code","8485fa90":"code","4a6be3bf":"code","11a9bb5f":"code","1b2814e8":"code","5d801255":"code","ec7cdc6f":"code","f26bb174":"code","126a9a34":"code","23422d6b":"code","5e161bcd":"code","63cb4a65":"code","b98b2018":"code","46a7ede3":"code","becb2cfa":"code","bd086cab":"code","0f556689":"code","84917aeb":"code","ca2b4074":"code","64894e51":"code","811970e2":"code","e4607b87":"code","aced2a26":"code","e0758c99":"code","3caf9e51":"code","9c6376b7":"code","8e0d6d9c":"code","23669cea":"code","d1751daa":"code","6c8600f0":"code","afdc323d":"code","fd671d51":"code","879f0917":"code","671a6f61":"code","c4863c1f":"code","76cc06d2":"code","dca916cc":"code","301bb756":"code","bb4a1c8b":"code","e02233ce":"code","cd0bd6dc":"code","b50c7ae1":"code","3baaf6a9":"code","2ba36ba5":"code","348acf84":"code","ba956470":"code","6a6725f3":"code","671b065d":"code","327f9646":"code","bbb01ec0":"code","89c9cc01":"code","641b5473":"code","486e77d0":"code","d0e15b41":"code","ee6eb00d":"code","a2255e99":"code","300a97e1":"code","2fd527a5":"code","9eb354a9":"code","a4bbc50a":"code","5496d309":"code","361d6ae4":"code","520af221":"code","380dc142":"markdown","e3a58c94":"markdown","839939d0":"markdown","da0adca7":"markdown","72647b79":"markdown","16fde816":"markdown","e0630cc5":"markdown","8c74e167":"markdown","7d8bb981":"markdown","012998cd":"markdown","7b3d1f45":"markdown","870efd0b":"markdown","41516dc0":"markdown","4391e00a":"markdown","c41192d6":"markdown","d430341d":"markdown","f6c39ce1":"markdown","c219aa60":"markdown","d51ef5ba":"markdown","99fae438":"markdown","5bbd59da":"markdown","0f225790":"markdown","464ae005":"markdown","28167ef0":"markdown","10f2c7de":"markdown","1f283726":"markdown","f68cc3a8":"markdown","92cc5be7":"markdown","08d05f71":"markdown","39531e99":"markdown","f25abcae":"markdown","016e86e4":"markdown","c29e4d4b":"markdown","2eaf4c38":"markdown","eed19eea":"markdown","b1c178c2":"markdown","ef153176":"markdown","0ee5e01f":"markdown","67ba4503":"markdown","642a18f5":"markdown","3fe2e586":"markdown","bc6c6f6f":"markdown","3e33b993":"markdown","eb07124f":"markdown","16d70286":"markdown","4c4f1355":"markdown","22fdf7b1":"markdown","fcb542b3":"markdown","4f5c7e43":"markdown","c2a2dcb9":"markdown","d51c8fad":"markdown","2ef1c77a":"markdown","bbfe9da2":"markdown","6554e83c":"markdown","017babb8":"markdown","dde0a51f":"markdown","01f84564":"markdown","27b49eab":"markdown","263d010f":"markdown","8ee714c8":"markdown","eb05e8ae":"markdown","ee63316e":"markdown","7b9bb422":"markdown","1582020c":"markdown","de6dd2a7":"markdown","9e87b04d":"markdown","4455ad97":"markdown","2be95291":"markdown","995bf56b":"markdown","f967a903":"markdown","475ffc41":"markdown","43727265":"markdown","09202659":"markdown","85d012ec":"markdown","27d5b84d":"markdown","4b3884be":"markdown","e8996a33":"markdown","a41af1a6":"markdown","23af0324":"markdown","fc1fa4e0":"markdown","6943bcf8":"markdown","59504172":"markdown","f36f505f":"markdown"},"source":{"80b4b1ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a8c5e687":"data = pd.read_csv('..\/input\/2015ddd\/2015d.csv')","69b5ad08":"data.info()","e1c0452f":"data.head(20)","729f6a32":"data.tail()","e1707641":"data.columns","0963e41a":"data.corr()","ea11bc90":"f,ax = plt.subplots(figsize = (15,15))\nsns.heatmap(data.corr(), annot = True, linewidth = 0.5, fmt='.2f', ax=ax)\nplt.show()","c145a181":"data.Economy.plot(kind = 'line', color = 'g', label = 'Economy', linewidth = 1, alpha = 1, grid = True, linestyle= ':')\ndata.Health.plot(kind = 'line', color = 'b', label = 'Health', linewidth = 1, alpha = 1, grid = True, linestyle = '-.')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.legend()\nplt.title('Line plot')\nplt.show()","1b4355f9":"data.plot(kind = 'scatter', x = 'Happiness_Score', y = 'Economy', color = 'b', alpha = 0.5)\nplt.xlabel('Happiness Score')\nplt.ylabel('Economy')\nplt.title('Happiness Score - Economy Scatter Plot ')\nplt.show()","aa063081":"plt.bar(data.Country[145:157], data.Happiness_Score[145:157], width =  0.5, color= 'r', alpha = 0.7)\nplt.show()","71be2bb7":"def tuple_ex():\n    t = (5,6,'a')\n    return t    #return defined tuple -t- .\nx,y,z = tuple_ex()\nprint(x,y,z)\n","ed80dd93":"x = 5\ndef f():\n    x = 3\n    y = x * 2\n    return y\nprint(x)\nprint(f())","bd55c820":"def f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(1,2,3))","e5c7f5a0":"def f(*args):\n    for i in args:\n        print(i)\nf(1)\nf(1,2,3,4,'as',67)\n\ndef f(**kwargs):\n    for key , value in kwargs.items():\n        print(key,\" \",value)\n        \nf(country = 'spain', capital = 'madrid' , population = 123421)","6c6d20ff":"addition = lambda x,a,b : x+a+b\naddition(1,9,3)\nsquare = lambda x : x**2\nsquare(7)","4a965992":"number_list = [1,2,3]\ny = map(lambda x : x**2 , number_list)\nprint(list(y))","0da5abd3":"name = \"abdullah\"\nk = iter(name)\nprint(next(k))\nprint(*k)","317713c9":"list1 = [1,2,3,4]\nlist2 = [5,6,'a',8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\ntype(z_list)\nprint(z_list)","abfb57ee":"un_zip = zip(*z_list)\nun_list1 , un_list2 = list(un_zip)\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","434578c6":"num1 = [1,2,3]\nnum2 = [i+1 for i in num1]\nprint(num2)","99075dff":"num1 = [5,10,15]\nnum2 = [i-5 if i < 7 else i**2 if i == 10 else i+5 for i in num1]\nprint(num2)","f207b582":"#  <6low        >6 high","15e81eb1":"data[\"Happiness_level\"] = [\"high\" if i > 6 else \"low\" for i in data.Happiness_Score]\ndata.loc[:10 , [\"Country\",\"Happiness_level\", \"Happiness_Score\"]]","a18ea0e3":"data.head()","a71f524f":"data.tail() #last 5","90cec41f":"data.columns\n","1e9286d8":"data.shape","034eca10":"data.info()","8485fa90":"print(data['Region'].value_counts(dropna = False)) #count non-null variables too.","4a6be3bf":"data.describe() #ignore null entries","11a9bb5f":"data.boxplot(column = 'Economy', by = 'Happiness_level')\nplt.show()","1b2814e8":"data_new = data.head()\ndata_new","5d801255":"melted = pd.melt(frame = data_new, id_vars = 'Country',value_vars =['Happiness_Rank','Happiness_Score'])\nmelted","ec7cdc6f":"melted.pivot(index = 'Country',columns = 'variable',values = 'value')","f26bb174":"data1 = data.head()\ndata2 = data.tail()\nconc_data_row = pd.concat([data1,data2],axis = 0,ignore_index = False) # axis = 0 add in row\nconc_data_row\n","126a9a34":"data0 = data['Country'].head()\ndata1 = data['Happiness_Score'].head()\ndata2 = data['Economy'].head()\nconc_data_col = pd.concat([data0,data1,data2],axis = 1)\nconc_data_col","23422d6b":"data.dtypes","5e161bcd":"data['Country'] = data['Country'].astype('category')\ndata['Happiness_Rank'] = data['Happiness_Rank'].astype('float')","63cb4a65":"data.dtypes","b98b2018":"data.info()","46a7ede3":"data[\"Region\"].value_counts(dropna = False)","becb2cfa":"data[\"Region\"].dropna(inplace = True) #inplace = True means do not assign new variable.","bd086cab":"assert data[\"Region\"].notnull().all()","0f556689":"#data frame creating from dictionary\nmountains = [\"Rocky\",\"Everest\"]\naltitude = [\"4401\",\"8848\"]\nlist_label = [\"Mountain\",\"Altitude\"]\nlist_col = [mountains,altitude]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","84917aeb":"df[\"Location\"] = [\"Nort America\",\"Himalayas\"]\ndf","ca2b4074":"df[\"broadcasting\"] = 0\ndf","64894e51":"#plotting all data\ndata1 = data.loc[:,[\"Happiness_Score\",\"Economy\",\"Health\"]]\ndata1.plot()\nplt.show()","811970e2":"#subplots\ndata1.plot(subplots = True)\nplt.show()","e4607b87":"#Scatter plot\ndata.plot(kind = \"scatter\",x = \"Economy\",y = \"Happiness_Score\")\nplt.show()","aced2a26":"#Histogram plot\ndata1.plot(kind = \"hist\",y = \"Happiness_Score\",bins = 50,range = (0,10),normed = True)\nplt.show()","e0758c99":"fig,axes = plt.subplots(nrows = 2,ncols = 1)\ndata1.plot(kind = \"hist\",y = \"Happiness_Score\",bins = 50,range = (0,10),normed = True, ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Happiness_Score\",bins = 50,range = (0,10),normed = True, ax = axes[1]\n          ,cumulative = True)\nplt.show()","3caf9e51":"time_list = [\"1981-04-17\",\"1981-03-12\"]\nprint(type(time_list[1]))\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","9c6376b7":"data2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list) #changing type, str to datetime\ndata2[\"date\"] = datetime_object             #adding to dataframe\ndata2 = data2.set_index(\"date\")             # as an index !\ndata2","8e0d6d9c":"print(data2.loc[\"1993-03-16\"])","23669cea":"print(data2.loc[\"1992-03-10\":\"1993-03-16\"])","d1751daa":"data2.resample(\"A\").mean()","6c8600f0":"data2.resample(\"M\").mean()","afdc323d":"data2.resample(\"M\").first().interpolate(\"linear\")","fd671d51":"data2.resample(\"M\").mean().interpolate(\"linear\")","879f0917":"data = data.set_index(\"Happiness_Rank\")  #indexing with happiness_rank\ndata.head()","671a6f61":"data[\"Happiness_Score\"][1]     #using square brackets","c4863c1f":"data.Happiness_Score[1]       #using column attribute and row label","76cc06d2":"data.loc[1,[\"Happiness_Score\"]]  #using loc","dca916cc":"data[[\"Happiness_Score\",\"Economy\"]]      #selecting only precise columns","301bb756":"data.loc[1:10,\"Region\":\"Family\"]    # ROWS --->  1 TO 10\n                                    # COLUMNS -> Region to Family","bb4a1c8b":"data.loc[10:1:-1,\"Region\":\"Family\"]    #reverse slicing","e02233ce":"data.loc[1:10,\"Economy\":]","cd0bd6dc":"boolean = data.Happiness_Score > 6\ndata[boolean]","b50c7ae1":"filt1 = data.Happiness_Score > 6\nfilt2 = data.Economy > 1.25\ndata[filt1 & filt2]","3baaf6a9":"data.Region[data.Happiness_Score > 6.8]","2ba36ba5":"def div(m):\n    y = m\/2\n    return y\ndata.Happiness_Score.apply(div)","348acf84":"data.Happiness_Score.apply(lambda m:m\/2)","ba956470":"data[\"new_column\"] = data.Happiness_Score - data.Standard_Error\ndata.head()","6a6725f3":"#We can learn our index name :\nprint(data.index.name)","671b065d":"data.index.name = \"index_name\"\ndata.head()","327f9646":"data3 = data.copy()\ndata3.index = range(100,258,1)\ndata3.head()","bbb01ec0":"data3 = data.set_index([\"Region\",\"Happiness_level\"])\ndata3.head(150)","89c9cc01":"dic = {\"chemical\" : [\"X\",\"Y\",\"X\",\"Y\"],\"reactivity\" : [\"low\",\"high\",\"low\",\"high\"],\"price\" : [34,14,56,78],\n       \"config\" : [3,7,7,3] }\ndf = pd.DataFrame(dic)\ndf","641b5473":"#pivoting\ndf.pivot(index = \"chemical\",columns = \"config\",values = \"price\")","486e77d0":"df1 = df.set_index([\"chemical\",\"config\"])    \ndf1","d0e15b41":"df1.unstack(level = 0)  #level : position of unstacked index","ee6eb00d":"df1.unstack(level = 1)","a2255e99":"df2 = df1.swaplevel(0,1)\ndf2","300a97e1":"df","2fd527a5":"pd.melt(frame = df,id_vars = \"chemical\",value_vars = [\"reactivity\",\"price\"])","9eb354a9":"df","a4bbc50a":"df.groupby(\"chemical\").mean()","5496d309":"df.groupby(\"chemical\").max()","361d6ae4":"df.groupby(\"chemical\").price.max()","520af221":"df.groupby(\"chemical\")[[\"price\",\"reactivity\"]].min()","380dc142":"**RESAMPLING PANDAS TIME SERIES**\n","e3a58c94":"First concatenate datas in rows. (Means axis = 0)","839939d0":"Personally I like correlation map because it looks verys elegant :).And of course it helps us to see correlation easily.","da0adca7":"We can see repetitions of entries by using value_counts().","72647b79":"As you can see it takes time to create dataframes from dictionary.","16fde816":"**MANIPULAT\u0130NG DATA FRAMES with PANDAS******","e0630cc5":"We check this code with assert.If the sentences that we write next to assert is true then it will return nothing.","8c74e167":"Scatter plot is brilliant way to see correlations or comparing two features.","7d8bb981":"data.corr() is essential to see the correlations beetween columns.Also we use data.corr() to map the correlations.","012998cd":"* Now we can resample the dataframe. \n* \"A\" means with respect to YEAR,\n* \"M\" means with respect to MONTH","7b3d1f45":"Line plot is good for observe two columns behaviour together.","870efd0b":"k  = iterable\nWe iterate the object(iterable) with iterator.","41516dc0":"**CLEANING DATA**","4391e00a":"------**PANDAS FOUNDAT\u0130ON**------\n\n* Building Data Frames From Scratch\n* Despite the building data frames from csv we can also build data frames from dictionaries via using zip() method.\nzip() method returns a list of tuples.\n","c41192d6":"Also we can unzip the lists that we zipped before.","d430341d":"Adding new features to the data frame is the same as we did before.","f6c39ce1":"map(func,list) means, apply the function whole list.","c219aa60":"STACKING AND UNSTACKING DATAFRAME","d51ef5ba":"We can search a specific data with respect to date.","99fae438":"Now it is time to see behaviours of features on graphs.","5bbd59da":"We can also use more than one filter.","0f225790":"**Pivoting Data:**Reverse of melting","464ae005":"FILTERING DATA FRAMES","28167ef0":"We can see the informations in data with data.info(). It shows us entries,columns,types of columns and whether they are non-null or not.","10f2c7de":"We can zip list with zip().","1f283726":"**------------------------**","f68cc3a8":"List comprehension is creating a list using for loops in a single line.","92cc5be7":"**Tidy Data:**\nWe tidy data with melt().","08d05f71":"We can easily unstack the df1","39531e99":"Using subplots we can separate the features.","f25abcae":"To fill NaN entries we can interpolate linearly.","016e86e4":"INDEX OBJECTS AND LABELED DATA","c29e4d4b":"In this data we don't have null entries.But in order to learn what we do with null entries I'd like to share with you dropna().","2eaf4c38":"MELTING","eed19eea":"Resampling by YEAR (\"A\") with mean. ","b1c178c2":"We also see this with using value_counts(dropna = False) -means do not drop null entries.-","ef153176":"Region : outer index and Happiness_level: inner index","0ee5e01f":"If you do axis = 1 it will concat datas with columns","67ba4503":"So it returns nothing, means in the all 'Region' column we do not have null entries, all of the entries are notnull.","642a18f5":"**SCOPE**\n","3fe2e586":"It is also possible to change the name of index.","bc6c6f6f":"data.head() shows us the first 5(default) rows of the datas.It is important because we should take a look to data before working on data deeply.","3e33b993":"But we learnt shorter way to write function before.","eb07124f":"We are able to change inner and outer level index positions.","16d70286":"Filtering means getting datas for defined interval by creating boolean series.","4c4f1355":"* b and c are default arguments but a is a flexible arguments that we can assign.","22fdf7b1":"**--------------------------------------------------------------------------------------------------------------------------------------------------------------**","fcb542b3":"* frame = source\n* id_vars = unchanging variable\n* value_vars = variables and their values.","4f5c7e43":"datatime is an object.","c2a2dcb9":"SLICING DATA FRAME","d51c8fad":"We can use **lambda** to write function in a line.","2ef1c77a":"**Missing Datas**\nYou can do:\n* -leave as it\n* -drop them with dropna()\n* -fill missing value with fillna()\n* -fill missing values with test statistics like mean","bbfe9da2":"* Black line at top is the max value.\n* Blue line at top is the secont quartile (%75)\n* Green line is median (%50)\n* Blue line at bottom is first quartile (%25)\n* Black line at bottom is min value.\n* **Black circle is the outlier !!**","6554e83c":"To drop null entries we use dropna().","017babb8":"To see the columns easily use data.columns.","dde0a51f":"**Concatenating Data**","01f84564":"First of all we must read the data we have.","27b49eab":"HIERARCHICAL INDEXING","263d010f":"INDEXING","8ee714c8":"This code gives us the entries that only have Happiness Score higher than 6.","eb05e8ae":"CATEGORICALS AND GROUPBY","ee63316e":"**VISUAL EXPLORATORY DATA ANALYSIS**","7b9bb422":"*args can be anything.    **kwargs is a dictionary version of *args.","1582020c":"To find specific element we have several ways.","de6dd2a7":"Also we can interpolate linearly with having same means.","9e87b04d":"* x = 5 is the global that defined main body in script\n* x = 3 is a local that defined in a function\nIf there is no local scope, function will use the global scope\n","4455ad97":"We can group the features according to any feature that we want","2be95291":"This code will give us the Regions which only has Happiness Score greater than 6.8","995bf56b":"Box plots : visualize basic statistics like outliers,min\/max or quantiles","f967a903":"TRANSFORMING DATA","475ffc41":"Resampling by Month (\"M\") with mean.","43727265":"What we mean broadcasting is adding new column to the data frame and give whole entries a value.","09202659":"PIVOTING DATA FRAMES","85d012ec":"Now, let's create a datelist then change it's type to datetime (like \u0131 said it is an object) and add it to our dataframe as an index.","27d5b84d":"**INDEXING PANDAS TIME SERIES**\n","4b3884be":"We can define a new column by using other columns in the dataframe.","e8996a33":"**DATA TYPES**","a41af1a6":"Let's remind ourselves basic plotting techniques.","23af0324":"We may want to learn features beetween 2 selected columns.For this purpose we use slicing.","fc1fa4e0":"We can modify the index.","6943bcf8":"Changing the data types may be important some times.And for this purpose we have astype().","59504172":"We do not have null entry.All of the entries are non-null.","f36f505f":"We may want to have different kind of our data's values."}}