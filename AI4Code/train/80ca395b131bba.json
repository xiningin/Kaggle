{"cell_type":{"a253bcf8":"code","3e8655e2":"code","3377e598":"code","9d30b566":"code","457cc4d5":"code","4ba35195":"code","c73e77cf":"code","4f3cbcbc":"code","106eace2":"code","5462ae08":"code","65e090b3":"code","2126b02d":"code","f19b4ba7":"code","8d23d824":"code","a8b463d3":"code","49fc1623":"code","1ece6498":"code","e63a52b8":"code","3be66fcc":"code","a2a5a643":"code","493dced3":"code","8a48f43c":"code","7fca66d1":"code","5a50ae99":"code","3918c430":"code","114e4ac7":"code","f3264616":"code","94e37105":"code","2d44aa42":"code","5cb6aab5":"code","5b1c088b":"code","9896933a":"code","3d396765":"code","f9585c5c":"code","3cfd926a":"code","9933ee73":"code","b90600b1":"code","5a0037a2":"code","1b4b3b42":"markdown","b78679ef":"markdown","38fa518c":"markdown"},"source":{"a253bcf8":"import numpy as np\nimport matplotlib.pyplot as plt\nimport cv2\nimport os","3e8655e2":"image = cv2.imread('..\/input\/surface-crack-detection\/Negative\/00002.jpg')\ntype(image)","3377e598":"plt.imshow(image)","9d30b566":"image = cv2.imread('..\/input\/surface-crack-detection\/Positive\/00003.jpg')\ntype(image)","457cc4d5":"plt.imshow(image)","4ba35195":"image.shape","c73e77cf":"path = '..\/input\/surface-crack-detection'","4f3cbcbc":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPool2D, Dropout\nfrom keras.layers import Dense, Flatten, Activation\nfrom keras.preprocessing.image import ImageDataGenerator","106eace2":"model = Sequential()\nmodel.add(Conv2D(input_shape=(227,227,3),filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(units=4096,activation=\"relu\"))\nmodel.add(Dense(units=4096,activation=\"relu\"))\nmodel.add(Dense(units=2, activation=\"softmax\"))\nmodel.summary()","5462ae08":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","65e090b3":"datagen = ImageDataGenerator(rescale=1.0\/255,validation_split=0.3)","2126b02d":"train_data = datagen.flow_from_directory(path,\n                                         target_size=[227,227],\n                                         batch_size=64,\n                                         class_mode='categorical',\n                                         subset='training')\ntest_data = datagen.flow_from_directory(path,\n                                        target_size=[227,227],\n                                        batch_size=64,\n                                        class_mode='categorical',\n                                        subset='validation')\n                                       \n","f19b4ba7":"history=model.fit_generator(train_data,\n                           validation_data=test_data,\n                           epochs=15,\n                           steps_per_epoch=len(train_data),\n                           validation_steps=len(test_data))","8d23d824":"model.save_weights(\"model.h5\")","a8b463d3":"print(history.history.keys())","49fc1623":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","1ece6498":"from keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg16 import preprocess_input\n\nfrom keras.applications import InceptionV3\nfrom keras.applications import ResNet50\nfrom keras.models import Model","e63a52b8":"vgg = VGG16(include_top=False, weights='imagenet', input_shape=(227,227,3))\nvgg.summary()","3be66fcc":"for layer in vgg.layers:\n    layer.trainable=False","a2a5a643":"x = Flatten()(vgg.output)\nx = Dense(512,activation='relu')(x)\nx = Dense(512,activation='relu')(x)\nprediction = Dense(2,activation='sigmoid')(x)\nmodel = Model(inputs=vgg.input, outputs=prediction)\nmodel.summary()","493dced3":"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","8a48f43c":"history=model.fit_generator(train_data,\n                           validation_data=test_data,\n                           epochs=5,\n                           steps_per_epoch=len(train_data),\n                           validation_steps=len(test_data))","7fca66d1":"model.save_weights(\"vgg_model.h5\")","5a50ae99":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","3918c430":"inception = InceptionV3(include_top=False, weights='imagenet', input_shape=(227,227,3))\ninception.summary()","114e4ac7":"for layer in inception.layers:\n    layer.trainable=False","f3264616":"x = Flatten()(inception.output)\nx = Dense(512,activation='relu')(x)\nx = Dense(512,activation='relu')(x)\nprediction = Dense(2,activation='sigmoid')(x)\nmodel = Model(inputs=inception.input, outputs=prediction)\nmodel.summary()","94e37105":"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","2d44aa42":"hist=model.fit_generator(train_data,\n                           validation_data=test_data,\n                           epochs=5,\n                           steps_per_epoch=len(train_data),\n                           validation_steps=len(test_data))","5cb6aab5":"model.save_weights(\"inception_model.h5\")","5b1c088b":"plt.plot(hist.history['accuracy'])\nplt.plot(hist.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(hist.history['loss'])\nplt.plot(hist.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","9896933a":"resnet = ResNet50(include_top=False, weights='imagenet', input_shape=(227,227,3))\nresnet.summary()","3d396765":"for layer in resnet.layers:\n    layer.trainable=False","f9585c5c":"x = Flatten()(resnet.output)\nx = Dense(512,activation='relu')(x)\nx = Dense(512,activation='relu')(x)\nprediction = Dense(2,activation='sigmoid')(x)\nmodel = Model(inputs=resnet.input, outputs=prediction)\nmodel.summary()","3cfd926a":"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","9933ee73":"history=model.fit_generator(train_data,\n                           validation_data=test_data,\n                           epochs=5,\n                           steps_per_epoch=len(train_data),\n                           validation_steps=len(test_data))","b90600b1":"model.save_weights(\"resnet_model.h5\")","5a0037a2":"plt.plot(hist.history['accuracy'])\nplt.plot(hist.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(hist.history['loss'])\nplt.plot(hist.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","1b4b3b42":"## VGG16 Architecture","b78679ef":"## Inception Architecture","38fa518c":"## Resnet Architecture"}}