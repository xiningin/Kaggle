{"cell_type":{"a3533436":"code","4eadcdb7":"code","9e5604fa":"code","55ae237c":"code","968f94db":"code","a5e7ebb3":"code","2d1effbb":"code","bba8e4ea":"code","4469d816":"code","c6bdbf19":"markdown","d69e04fe":"markdown","39c55f1f":"markdown","7f6c90ac":"markdown"},"source":{"a3533436":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\n\n%matplotlib inline\n\n\ndata_file = \"\/kaggle\/input\/chess\/games.csv\"\n\ndata = pd.read_csv(data_file)\ndata.head()","4eadcdb7":"data = data.drop(['rated', 'created_at', 'last_move_at', 'opening_ply', 'opening_name', 'white_id', 'black_id', 'increment_code', 'opening_eco'], axis=1)\ndata.head()","9e5604fa":"data.describe()","55ae237c":"print(\"Number of games with less than 10 moves: {}\".format(len(data[data['turns'] <= 10])))\ndata = data[data['turns'] > 10]\n\n# Create a new column for average rating of the two users\ndata['rating'] = data.apply(lambda row: (row['white_rating'] + row['black_rating']) \/ 2, axis=1)\ndata = data.drop(['white_rating', 'black_rating'], axis=1)\ndata.head()","968f94db":"max_rating = data['rating'].max()\nmin_rating = data['rating'].min()\ndelta = int((max_rating - min_rating) \/ 3)\n\nsplit_ratings = [min_rating + 1 + (i + 1) * delta for i in range(3)]\n\nsplit_ratings\n","a5e7ebb3":"print(data.iloc[0]['moves'])","2d1effbb":"p = {\n    \"NONE\": 0,\n    \"R1B\": 1, # First black rook\n    \"N1B\": 2, # First black knight\n    \"B1B\": 3, # First black boshop\n    \"QB\": 4, # black queen\n    \"KB\": 5, # black king\n    \"B2B\": 6, # Second black bishop\n    \"N2B\": 7, # Second black knight\n    \"R2B\": 8, # Second black rook\n    \"P1B\": 9, # First black pawn\n    \"P2B\": 10, # First black pawn\n    \"P3B\": 11, # 3 black pawn\n    \"P4B\": 12, # 4 black pawn\n    \"P5B\": 13, # 5 black pawn\n    \"P6B\": 14, # 6 black pawn\n    \"P7B\": 15, # 7 black pawn\n    \"P8B\": 16, # 8 black pawn\n    \n    \"R1W\": 17, # First black rook\n    \"N1W\": 18, # First black knight\n    \"B1W\": 19, # First black boshop\n    \"QW\": 20, # black queen\n    \"KW\": 21, # black king\n    \"B2W\": 22, # Second black bishop\n    \"N2W\": 23, # Second black knight\n    \"R2W\": 24, # Second black rook\n    \"P1W\": 25, # First black pawn\n    \"P2W\": 26, # First black pawn\n    \"P3W\": 27, # 3 black pawn\n    \"P4W\": 28, # 4 black pawn\n    \"P5W\": 29, # 5 black pawn\n    \"P6W\": 30, # 6 black pawn\n    \"P7W\": 31, # 7 black pawn\n    \"P8W\": 32 # 8 black pawn\n}\n\nstate = np.array([\n    [ p['R1B'], p['N1B'], p['B1B'], p['QB'],  p['KB'],  p['B2B'], p['N2B'], p['R2B'] ],\n    [ p['P1B'], p['P2B'], p['P3B'], p['P4B'], p['P5B'], p['P6B'], p['P7B'], p['P8B'] ],\n    [ 0,        0,        0,        0,        0,        0,        0,        0        ],\n    [ 0,        0,        0,        0,        0,        0,        0,        0        ],\n    [ 0,        0,        0,        0,        0,        0,        0,        0        ],\n    [ 0,        0,        0,        0,        0,        0,        0,        0        ],\n    [ p['P1W'], p['P2W'], p['P3W'], p['P4W'], p['P5W'], p['P6W'], p['P7W'], p['P8W'] ],\n    [ p['R1W'], p['N1W'], p['B1W'], p['QW'],  p['KW'],  p['B2W'], p['N2W'], p['R2W'] ]\n])\n\nstate","bba8e4ea":"def chess_pos_to_array_pos(chess_pos):\n    letter = chess_pos[0]\n    number = int(chess_pos[1])\n    row = 8 - number\n    col = (ord(letter) - 65)\n    \n    assert row >= 0 and row <= 7\n    assert col >= 0 and col <= 7\n    \n    return (row, col)\n\n# Testing:\nprint(chess_pos_to_array_pos(\"A1\"))\nprint(chess_pos_to_array_pos(\"A8\"))\nprint(chess_pos_to_array_pos(\"H1\"))\nprint(chess_pos_to_array_pos(\"H8\"))\n","4469d816":"def move(src, dst):\n    src_pos = chess_pos_to_array_pos(src)\n    dst_pos = chess_pos_to_array_pos(dst)","c6bdbf19":"I am going to split the dataset into three groups based on the rating (bad, good, expert) to make different level of bots","d69e04fe":"I will also create a method to easily move the piece that is at a certain position to another position","39c55f1f":"I will need a simple way to switch from chess position (ex: A1, F4) \nto index position (ex: A1 = (7, 0),  F4 = (4, 5))","7f6c90ac":"Find the most used opening move"}}