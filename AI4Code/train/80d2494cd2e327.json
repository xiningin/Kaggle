{"cell_type":{"7293bb7a":"code","5afa787d":"code","aa756a3e":"code","5ded3a90":"code","59046161":"code","ef9c4622":"code","1e6aae26":"code","9bea7f6a":"code","fdf2cb87":"code","f5474758":"code","a99a07c2":"code","8448859d":"code","3d228928":"code","c3fc8eed":"code","88d02ad2":"code","39219d85":"code","447d2b9e":"code","b8707b6c":"code","b90406a3":"code","173b42ff":"code","dad29c27":"code","8b1d92a1":"code","626631c5":"code","e7f6d7fe":"code","47af6a14":"code","6b95ea55":"code","98ce3750":"code","5d71454d":"code","4b26ca3c":"code","63730b2e":"code","70b70238":"code","15cd8c02":"code","2b5f5c4c":"code","25eee7b9":"code","c1904a44":"code","88d3619c":"code","e5c2c5b1":"markdown","17a78484":"markdown","2c794f65":"markdown","2d496435":"markdown","e3957b1e":"markdown","aa0bb958":"markdown"},"source":{"7293bb7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5afa787d":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","aa756a3e":"import seaborn as sns\nimport numpy as np # used for handling numbers\nimport pandas as pd # used for handling the dataset\nfrom sklearn.impute import SimpleImputer # used for handling missing data\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder # used for encoding categorical data\nfrom sklearn.model_selection import train_test_split # used for splitting training and testing data\nfrom sklearn.preprocessing import StandardScaler # used for feature scaling","5ded3a90":"from google.colab import drive\ndrive.mount('\/content\/drive')","59046161":"df_train = pd.read_csv(\"\/kaggle\/input\/resolving-citizenss-grievances\/dataset\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/resolving-citizenss-grievances\/dataset\/test.csv\")\ndf_submission = pd.read_csv(\"\/kaggle\/input\/resolving-citizenss-grievances\/dataset\/sample_submission.csv\")","ef9c4622":"df_test['importance']=-1\ndf_train['label'] = 'train'\ndf_test['label'] = 'test'\ncombined = pd.concat([df_train,df_test],axis=0)\ncombined.shape","1e6aae26":"df_train.shape","9bea7f6a":"combined.head","fdf2cb87":"nRow, nCol = combined.shape\nprint(f'There are {nRow} rows and {nCol} columns')","f5474758":"combined.info()","a99a07c2":"df = combined.drop(['application','country.alpha2','decisiondate','docname','itemid','judgementdate','kpdate','languageisocode','originatingbody_type','parties.0','parties.1','parties.2','respondent.0','respondent.1','respondent.2','respondent.3','respondent.4'],axis=1)","8448859d":"cols=df.columns\nvalues=df.isna().sum()\nvalues","3d228928":"missing = []\nfor i in range(len(cols)):\n  if(values[i]!=0):\n    print(cols[i]+\"       \"+str(values[i]))\n    missing.append(cols[i])","c3fc8eed":"df = df.drop(missing,axis = 1)\ndf_train = df_train.drop(missing,axis = 1)","88d02ad2":"df.shape","39219d85":"df['ecli'] = df['ecli'].iloc[:].str.slice(13,17)\ndf_train['ecli'] = df_train['ecli'].iloc[:].str.slice(13,17)","447d2b9e":"df.head()","b8707b6c":"df_train.corr()","b90406a3":"sns.countplot(df_train['importance'])","173b42ff":"importance_year=df_train[[\"ecli\",\"importance\"]].groupby(['ecli']).mean()\nimportance_year=importance_year.reset_index()\n\nfig, ax = plt.subplots(figsize=(10,10))\nsns.barplot(data=importance_year,y='importance',x='ecli',palette='dark')\nplt.show()","dad29c27":"fig, ax =plt.subplots(1,3,figsize=(30,10))\n#---------------------------------------------------------------------------------\nimportance_country=df_train[[\"country.name\",\"importance\"]].groupby(['country.name']).mean()\nimportance_country=importance_country.reset_index()\nimportance_country=importance_country.sort_values(by=['importance'])\nc1=sns.barplot(data=importance_country,x='importance',y='country.name',ax=ax[0],palette='deep')\nc1.set(title='Country Vs Importance')\nc1.set_xticklabels(c1.get_xticklabels(), rotation=90)\n#-------------------------------------------------------------------------------\nimportance_rank=df_train[[\"rank\",\"importance\"]].groupby([\"importance\"]).mean()\nimportance_rank=importance_rank.reset_index()\nimportance_rank=importance_rank.sort_values(by=['rank'])\nc2=sns.barplot(data=importance_rank,x='importance',y='rank',ax=ax[1],palette='bright')\nc2.set(title=\"importance Vs Rank\")\nc2.set_xticklabels(c2.get_xticklabels(), rotation=0)\n#-------------------------------------------------------------------------------\nimportance_branch=df_train[[\"doctypebranch\",\"importance\"]].groupby(['doctypebranch']).mean()\nimportance_branch=importance_branch.reset_index()\nimportance_branch=importance_branch.sort_values(by=['importance'])\nc3=sns.barplot(data=importance_branch,x='doctypebranch',y='importance',ax=ax[2],palette='pastel')\nc3.set(title='Branch Vs Importance')\nc3.set_xticklabels(c3.get_xticklabels(), rotation=90)\n#--------------------------------------------------------------------------------\nfig.show()","8b1d92a1":"fig, ax =plt.subplots(1,2,figsize=(10,5))\n#------------------------------------------------------------\nimportance_separateopinion=df_train[[\"separateopinion\",\"importance\"]]\nc1=sns.barplot(data=importance_separateopinion,x='separateopinion',y='importance',ax=ax[0],palette=\"magma\")\nc1.set(title='Branch Vs Importance')\nc1.set_xticklabels(c1.get_xticklabels(), rotation=0)\n#-------------------------------------------------------------\nimportance_typedescription=df_train[[\"typedescription\",\"importance\"]]\nc2=sns.barplot(data=importance_typedescription,x='typedescription',y='importance',ax=ax[1],palette=\"Set2\")\nc2.set(title='typedescription Vs Importance')\nc2.set_xticklabels(c2.get_xticklabels(), rotation=0)\nfig.show()","626631c5":"# Import label encoder \nfrom sklearn import preprocessing \n\ncountry = pd.get_dummies(df['country.name'])\ndoctype = pd.get_dummies(df['doctypebranch'])\necli = pd.get_dummies(df['ecli'])\noriginatingbody = pd.get_dummies(df['originatingbody_name'])\ntypedescription = pd.get_dummies(df['typedescription'],prefix = 'type_')\n\n\nle = preprocessing.LabelEncoder()\ndf['doctypebranch']=le.fit_transform(df['doctypebranch'])\ndf['separateopinion']=le.fit_transform(df['separateopinion'])","e7f6d7fe":"df_temp = pd.concat([country,doctype,ecli,originatingbody,typedescription],axis=1)\ndf_temp.head(3)","47af6a14":"new_data=df.drop(['country.name','doctypebranch','ecli','originatingbody_name','typedescription','respondentOrderEng','originatingbody'],axis=1)\nnew_data.head(3)\nnew_data=pd.concat([new_data,df_temp],axis=1)\nnew_data.head()","6b95ea55":"!pip install xgboost","98ce3750":"from sklearn import datasets\nimport xgboost as xgbr\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\ntarget_col = 'importance'","5d71454d":"combined_train = new_data.query('label == \"train\"').drop(['label'] , axis=1)","4b26ca3c":"combined_train","63730b2e":"X_train, X_test, Y_train, Y_test = train_test_split(combined_train.drop([target_col], axis=1),combined_train[target_col],test_size=0.2,stratify=combined_train[target_col])\nxg_reg = xgbr.XGBClassifier(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,\n                max_depth = 50, alpha = 10, n_estimators = 100)","70b70238":"xg_reg.fit(X_train.drop(['appno'],axis=1),Y_train)","15cd8c02":"res=xg_reg.predict(X_test.drop(['appno'],axis=1))\nprint(\"cv score: \", accuracy_score(res, Y_test) * 100)","2b5f5c4c":"tst = new_data.query('label == \"test\"').drop(['label', target_col] , axis=1)","25eee7b9":"xg_reg.fit(X_train.drop(['appno'],axis=1),Y_train)","c1904a44":"preds = xg_reg.predict(tst.drop(['appno'],axis=1))","88d3619c":"sub = pd.DataFrame(columns=[\"appno\",\"importance\"])\nsub[\"appno\"] = tst.appno\nsub[\"importance\"] = preds\nsub.to_csv(\"submission.csv\", index=False)","e5c2c5b1":"Model Creation and Training","17a78484":"Data Analysis and Preprocessing","2c794f65":"Exploratory Data Analysis","2d496435":"Model predictions","e3957b1e":"Importing Necessary Libraries","aa0bb958":"Feature Engineering"}}