{"cell_type":{"9b46241e":"code","f90cfd14":"code","27b6e8c4":"code","f218d1c4":"code","88eb6c19":"code","cbaa9850":"code","6503bf55":"code","9c5b5b01":"code","014483b8":"code","51617d25":"code","e665295c":"code","93183405":"code","a0f0c2a9":"code","3fa1aeb4":"markdown","6d41a3b8":"markdown","99c76998":"markdown","b425441e":"markdown","d11681f6":"markdown","0ba11d69":"markdown","bc294308":"markdown","d39360f7":"markdown","d07c0bfe":"markdown","b8c54f0f":"markdown","853149a3":"markdown","475e9139":"markdown","b1365dd1":"markdown"},"source":{"9b46241e":"import pandas as pd\nfrom darts import TimeSeries","f90cfd14":"df = pd.read_csv('..\/input\/air-passengers\/AirPassengers.csv')\n\nSeries = TimeSeries.from_dataframe(df, 'Month', '#Passengers')","27b6e8c4":"\ntrain, val = Series.split_before(pd.Timestamp('19580101'))","f218d1c4":"from darts.models import ExponentialSmoothing\n\nmodel = ExponentialSmoothing()\nmodel.fit(train)\nprediction = model.predict(len(val))","88eb6c19":"import matplotlib.pyplot as plt\n\nSeries.plot(label = 'actual')\nprediction.plot(label = 'forecast', lw = 3)\nplt.legend()","cbaa9850":"from darts.models import AutoARIMA\n\nmodel_aarima = AutoARIMA()\nmodel_aarima.fit(train)\nprediction_aarima = model_aarima.predict(len(val))","6503bf55":"Series.plot(label = 'actual')\nprediction_aarima.plot(label = 'forecast_aarima', lw = 3)\nplt.legend()","9c5b5b01":"from darts.models import FFT\n\nmodel_fft = FFT()\nmodel_fft.fit(train)\nprediction_fft = model_fft.predict(len(val))","014483b8":"Series.plot(label = 'actual')\nprediction_fft.plot(label = 'forecast-fft', lw = 3)\nplt.legend()","51617d25":"# facebook prophet model\nfrom darts.models import Prophet\n\nmodel_prophet = Prophet()\nmodel_prophet.fit(train)\nprediction_prophet = model_prophet.predict(len(val))","e665295c":"Series.plot(label = 'actual')\nprediction_prophet.plot(label = 'forecast-prophet', lw = 3)\nplt.legend()","93183405":"from darts.backtesting import backtest_forecasting\n\nmodels = [ExponentialSmoothing(), Prophet()]\n\nbacktests = [backtest_forecasting(Series,\n                                 model,\n                                 pd.Timestamp('19550101'),\n                                 fcast_horizon_n=3)\n            for model in models]","a0f0c2a9":"from darts.metrics import mape\n\nSeries.plot(label='actual')\nfor i, m in enumerate(models):\n    err = mape(backtests[i], Series)\n    backtests[i].plot(lw = 3, label = '{}, MAPE = {:.2f}%'.format(m, err))\n    \nplt.title('Backtest with 3-months forecast horizon')\nplt.legend()","3fa1aeb4":"Thank to [medium](https:\/\/medium.com\/unit8-machine-learning-publication\/darts-time-series-made-easy-in-python-5ac2947a8878)","6d41a3b8":"## Splitting the series into training and validation TimeSeries","99c76998":"Exponential smoothing is doing good with less error as compared to Prophet","b425441e":"Darts make it very easy to do the Time Series Analysis.","d11681f6":"Like pandas has DataFrame, Similarly, Darts has TimeSeries","0ba11d69":"It comprises all the API required for Time series analysis and its primary goal is to simplify the time series machine learning experience. \n","bc294308":"## All the time series models:\n* Exponential smoothing,\n* ARIMA & auto-ARIMA,\n* Facebook Prophet,\n* Theta method,\n* FFT (Fast Fourier Transform),\n* Recurrent neural networks (vanilla RNNs, GRU, and LSTM variants),\n* Temporal Convolutional Networks (TCN),\n* and several naive baselines.","d39360f7":"# Dart: Sci-kit learn for Time Series Analysis","d07c0bfe":"# Evaluation","b8c54f0f":"Darts in not inbuilt, so install it using \"*pip install u8darts\"*","853149a3":"## Models","475e9139":"# Backtesting","b1365dd1":"This timeseries is univariate, containing only one variable."}}