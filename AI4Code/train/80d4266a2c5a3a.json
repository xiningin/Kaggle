{"cell_type":{"98ffb456":"code","cd1b39c5":"code","bee4c14b":"code","4e4fece5":"code","5a324ac1":"code","2dff7082":"code","a95f176a":"code","af2ef5cd":"code","41207960":"code","f2456576":"code","9b972f1f":"code","903ce683":"code","10d74bd7":"code","98e43350":"code","7e67d5fb":"code","f05db1ba":"code","4b56b2e9":"code","a20194a2":"code","3d9dd6b9":"code","67018ead":"code","8fa6e377":"markdown","d6723598":"markdown","4c095873":"markdown","dd52ac53":"markdown","5af1950d":"markdown","8b16d54b":"markdown","5d4c6ac3":"markdown","c53342a4":"markdown","7ac8873d":"markdown","e331ffc1":"markdown","b7985919":"markdown","a3f860a1":"markdown","7c283b85":"markdown"},"source":{"98ffb456":"!pip install autogluon.tabular[all] -q --progress-bar off > \/dev\/null 2>&1","cd1b39c5":"from timeit import default_timer as timer\nimport pandas as pd\nimport numpy as np\nfrom IPython.display import HTML\nimport logging","bee4c14b":"competition_prefix = 'titanic'\n\nid_column = 'PassengerId'\nlabel = 'Survived'\ntrain_data = pd.read_csv(f'..\/input\/{competition_prefix}\/train.csv', index_col=id_column)\ntest_data = pd.read_csv(f'..\/input\/{competition_prefix}\/test.csv', index_col=id_column)\nsample_submission = pd.read_csv(f'..\/input\/{competition_prefix}\/gender_submission.csv', index_col=id_column)","4e4fece5":"train_data[:5]","5a324ac1":"from sklearn.model_selection import train_test_split\n\nrandom_state = 42\ntrain_data, valid_data = train_test_split(train_data, test_size=0.1, random_state=random_state)","2dff7082":"max_features_list = ['sqrt', 'log2', 0.25, 0.5, 0.75]\nn_neighbors_list = [4 ** i for i in range(1, 4)]\nhyperparameters = {\n    'GBM': [\n        {'extra_trees': True, 'seed': random_state, 'ag_args': {'name_suffix': 'XT'}},\n        {},\n        'GBMLarge',\n    ],\n    'RF': [\n        {'criterion': 'gini', 'random_state': random_state, 'max_features': max_features, 'n_estimators': 500,\n         'ag_args': {'name_suffix': f'Gini_{str(max_features)}', 'problem_types': ['binary', 'multiclass']}}\n        for max_features in max_features_list\n    ] + [\n        {'criterion': 'entropy', 'random_state': random_state, 'max_features': max_features, 'n_estimators': 500,\n         'ag_args': {'name_suffix': f'Entr_{str(max_features)}', 'problem_types': ['binary', 'multiclass']}}\n        for max_features in max_features_list\n    ],\n    'KNN': [\n        {'weights': 'uniform', 'n_neighbors': n_neighbors, 'ag_args': {'name_suffix': f'Unif_{n_neighbors}'},\n         'ag_args_fit': {'use_daal': False}}\n        for n_neighbors in n_neighbors_list\n    ] + [\n        {'weights': 'distance', 'n_neighbors': n_neighbors, 'ag_args': {'name_suffix': f'Dist_{n_neighbors}'},\n         'ag_args_fit': {'use_daal': False}}\n        for n_neighbors in n_neighbors_list\n    ]\n}","a95f176a":"from autogluon.tabular import TabularPredictor\n\nt0 = timer()\nautogluon_predictor = TabularPredictor(\n    label=label,\n    eval_metric=\"accuracy\",\n    learner_kwargs={'ignored_columns': [id_column]}\n).fit(\n    train_data=train_data,\n    verbosity=2,\n    presets='best_quality',\n    hyperparameters=hyperparameters\n)\nt1 = timer()\ndefault_leaderboard = autogluon_predictor.leaderboard(valid_data)\nt2 = timer()\n\ndefault_ag_fitting_time = t1 - t0\ndefault_ag_evaluation_time = t2 - t1","af2ef5cd":"default_leaderboard","41207960":"!pip install scikit-learn-intelex -q --progress-bar off > \/dev\/null 2>&1","f2456576":"from sklearnex import patch_sklearn\npatch_sklearn()","9b972f1f":"logger = logging.getLogger()\nfh = logging.FileHandler('log.txt')\nfh.setLevel(10)\nlogger.addHandler(fh)","903ce683":"from autogluon.tabular import TabularPredictor\n\n\nt0 = timer()\nautogluon_predictor = TabularPredictor(\n    label=label,\n    eval_metric=\"accuracy\",\n    learner_kwargs={'ignored_columns': [id_column]}\n).fit(\n    train_data=train_data,\n    verbosity=2,\n    presets='best_quality',\n    hyperparameters=hyperparameters\n)\nt1 = timer()\nopt_leaderboard = autogluon_predictor.leaderboard(valid_data)\nt2 = timer()\n\nopt_ag_fitting_time = t1 - t0\nopt_ag_evaluation_time = t2 - t1","10d74bd7":"opt_leaderboard","98e43350":"fitting_speedup = round(default_ag_fitting_time \/ opt_ag_fitting_time, 2)\nevaluation_speedup = round(default_ag_evaluation_time \/ opt_ag_evaluation_time, 2)\nHTML(f'<h2>Fitting speedup: {fitting_speedup}x<\/h2>'\n     f'(from {round(default_ag_fitting_time, 2)} to {round(opt_ag_fitting_time, 2)} seconds)'\n     f'<h2>Evaluation speedup: {evaluation_speedup}x<\/h2>'\n     f'(from {round(default_ag_evaluation_time, 2)} to {round(opt_ag_evaluation_time, 2)} seconds)')","7e67d5fb":"speedups = default_leaderboard.set_index('model')['fit_time'] \/ opt_leaderboard.set_index('model')['fit_time']\nspeedups = speedups.filter(like='RandomForest')\nHTML(f'<h2>Random Forest fitting speedup: {round(speedups.mean(), 2)}x<\/h2>')","f05db1ba":"logger.removeHandler(fh)","4b56b2e9":"!cat log.txt | grep 'running accelerated version' | sort | uniq","a20194a2":"predictions = autogluon_predictor.predict(test_data)\nsample_submission[label] = predictions\nsample_submission[:5]","3d9dd6b9":"sample_submission.to_csv(\"submission.csv\")","67018ead":"!rm -rf AutogluonModels","8fa6e377":"### Accelerate Scikit-learn with two lines of code:","d6723598":"AutoML is powerful tool to get good solution for small problems in little time. In this notebook, we will show it with [AutoGluon](https:\/\/github.com\/awslabs\/autogluon) AutoML framework and \u202f[**Intel\u00ae Extension for Scikit-learn***](https:\/\/github.com\/intel\/scikit-learn-intelex) which accelerates Scikit-learn algorithms with just two lines of code.","4c095873":"### Data loading","dd52ac53":"I will show you how to **speed up** your kernel without changing your code using **Intel\u00ae Extension for Scikit-learn**!","5af1950d":"Setup logging to track accelerated cases:","8b16d54b":"# Other notebooks with sklearnex usage\n\n### [[predict sales] Stacking with scikit-learn-intelex](https:\/\/www.kaggle.com\/alexeykolobyanin\/predict-sales-stacking-with-scikit-learn-intelex)\n\n### [[TPS-Aug] NuSVR with Intel Extension for Sklearn](https:\/\/www.kaggle.com\/alexeykolobyanin\/tps-aug-nusvr-with-intel-extension-for-sklearn)\n\n### [Using scikit-learn-intelex for What's Cooking](https:\/\/www.kaggle.com\/kppetrov\/using-scikit-learn-intelex-for-what-s-cooking?scriptVersionId=58739642)\n\n### [Fast KNN using \u202fscikit-learn-intelex for MNIST](https:\/\/www.kaggle.com\/kppetrov\/fast-knn-using-scikit-learn-intelex-for-mnist?scriptVersionId=58738635)\n\n### [Fast SVC using scikit-learn-intelex for MNIST](https:\/\/www.kaggle.com\/kppetrov\/fast-svc-using-scikit-learn-intelex-for-mnist?scriptVersionId=58739300)\n\n### [Fast SVC using scikit-learn-intelex for NLP](https:\/\/www.kaggle.com\/kppetrov\/fast-svc-using-scikit-learn-intelex-for-nlp?scriptVersionId=58739339)","5d4c6ac3":"Don't forget reimport modules to get effect of patch:","c53342a4":"# AutoGluon with optimized Scikit-learn\n\n### Intel\u00ae Extension for Scikit-learn installation:","7ac8873d":"### Accelerated functions:","e331ffc1":"# \ud83d\udef3 Fast AutoML with AutoGluon and Intel\u00ae Extension for Scikit-learn* - Titanic - Machine Learning from Disaster","b7985919":"Fit AutoGluon with best quality:","a3f860a1":"# Conclusions\n\nIntel\u00ae Extension for Scikit-learn gives you opportunities to:\n\n* Use your Scikit-learn code for training and inference without modification.\n* Train models and use them for prediction up to 1.4 - 1.6 times faster.\n* Get predictions of the similar quality as the other tested frameworks.\n\n*Please upvote if you liked it.*","7c283b85":"# AutoGluon with default Scikit-learn\n\nLet's define parameters for Gradient Boosting, Random Forest and kNN:"}}