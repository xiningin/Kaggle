{"cell_type":{"db812814":"code","bf51366c":"code","c21edfe8":"code","c7a87b3c":"code","a4f37e9e":"code","ce36f536":"code","6face240":"code","71a469af":"code","58feaeb8":"code","80a4dc6e":"code","2391d000":"code","954b0f04":"code","23506a17":"code","b8b844a6":"code","8f0c5749":"code","958dc091":"markdown"},"source":{"db812814":"# Assignment 1.2 - Functions for everything.py\n# You may work with a partner on this assignment\n# By Emily Mayer\n# 30 points\n\n# rule - complete the following 7 functions\n# rule - add appropriate print\/execute statements to run\/test each function\n# note - you may copy\/paste from your previous assignments as appropriate\n\n# complete the following 7 code cells","bf51366c":"def madlibV1():\n    # this function will, when called ask the user for several strings and then print a madlib using those words\n    # input and print statements will be *inside* the function definition\n    # this is worse code than the next problem\n    action = input(\"enter a action\")\n    animal = input(\"enter a animal\")\n    place = input(\"enter a place\")\n    response = \" the \" + animal + \" \" + action  + \" to \" + place \n    print(response)\nmadlibV1()","c21edfe8":"def madlibV2(action, animal, place):\n    # this function will take in several strings and then return a madlib using those words\n    # input and print statements will be in main code after this function is defined\n    #this is better code than the previous problem\n\n    # note: madlibV1 uses input, V2 takes in variables\n    # note: madlibV1 uses 'print', V2 uses 'return'\n    # the actual content of the madlibs may be the same as each other, or different from each other\n     return \" the \" + animal + \" \" + action + \" to \" + place\n\nword = input(\"enter a action:\\n\")\nword2 = input(\"enter a animal:\\n\")\nword3 = input(\"enter a place:\\n\")\nprint(madlibV2(word,word2,word3))","c7a87b3c":"def reverse_string(word):\n    # this function takes in a string, named 'word' and returns that string backwards\n    # [print (reverse_string(\"kittens\"))] should print [\"snettik\"]\n    # do this using the algorithm you built in last week's assignment\n    reversed_word = \"\"\n    for letter in word:\n        reversed_word = letter + reversed_word\n    return reversed_word\nreverse_string(\"house\")","a4f37e9e":"def formulaV1(number_of_points_in_math, number_of_points_in_science, number_of_points_in_history, number_of_points_in_english, number_of_AP_classes):\n    # you may use an appropriate function name instead\n    # this function takes in numbers as needed and returns a result\n    # this may be a formula you implemented earlier or a new one\n\n    total_number_of_points = number_of_points_in_math + number_of_points_in_science + number_of_points_in_history + number_of_points_in_english\n    number_of_classes = 4\n    total_number_of_points += number_of_AP_classes\n    GPA = total_number_of_points\/number_of_classes\n    rounded_GPA = round (GPA, 2)\n    return GPA\nformulaV1(2,3,4,1,2)","ce36f536":"def yes_or_no():\n    # this function asks \"do you want to play again, yes or no?\"\n    # and returns your answer - yes\/no\n    # for any other answer this will re-ask until you give an acceptable answer\n\n    while True:\n        yes_or_no = input(\"do you want to play again? Yes or no?\")\n        if yes_or_no == \"yes\":\n            return \"yes\"\n        if yes_or_no == \"no\":\n            return \"no\"\n        \n\nyes_or_no()","6face240":"def formulaV2():\n    # you may use an appropriate function name instead\n    # this will solve the same formula as formulaV1\n    # ... and then ask \"do you want to solve another (yes\/no)?\"\n    # ... and only accept \"yes\" and \"no\", and otherwise re-ask\n    # to accomplish this, call functions formulaV1 and yes_or_no\n    # ... inside this function\n\n    while True:\n        number_of_points_in_math = int(input(\"How many points did you get in math?\"))\n        number_of_points_in_science = int(input(\"How many points did you get in science?\"))\n        number_of_points_in_history = int(input(\"How many points did you get in history?\"))\n        number_of_points_in_english = int(input(\"How many points did you get in english?\"))\n        number_of_AP_classes = int(input(\"How many AP classes do you have?\"))\n        GPA = formulaV1(number_of_points_in_math, number_of_points_in_science, number_of_points_in_history, number_of_points_in_english, number_of_AP_classes)\n        print(GPA)\n        ans = yes_or_no()\n        \n        if ans == \"no\":\n            return \"no\"\n\nformulaV2()","71a469af":"%pip install colorama","58feaeb8":"from colorama import *\ndef redPrint(message):\n    # prints a message in red, and then sets the color back to normal if needed\n    \n    print(Fore.RED + message)\n    print(Style.RESET_ALL)\nredPrint(\"Doggo!\")","80a4dc6e":"def madlibv1():\n    # this function will, when called ask the user for several strings and then print a madlib using those words\n    color = input(\"please enter a color: \")\n    animal = input(\"please enter a plural animal: \")\n    adj = input(\"please enter an adjective: \")\n    response = color + \" \" + animal + \" are \" + adj\n    print (response)\n    \nmadlibv1()  ","2391d000":"def madlibv2(color, animal, adj):\n    # this function will take in several strings and then retrun a madlib using those words\n    return color + \" \" + animal + \" are \" + adj\n\nword1 = input(\"please enter a color:\\n\")\nword2 = input(\"please enter an animal (plural):\\n\")\nword3 = input(\"please enter an adjective:\\n\")\nprint (madlibv2(word1, word2, word3))\n","954b0f04":"def distance_formula(x1, y1, x2, y2):\n    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** .5\n\nprint (distance_formula(3,4,6,8))","23506a17":"def yes_or_no():\n    # this function asks \"do you want to play again, yes or no?\"\n    # and returns your answer - yes\/no\n    # for any other answer this will re-ask until you give an acceptable answer\n    while True:\n        response = input(\"would you like to play again? (yes or no): \").lower()\n        if response == \"yes\" or response == \"no\":\n            return response\n\nprint (yes_or_no())","b8b844a6":"def distance_formula_V2():\n    while True:\n        print (\"solving distance formula for (x1, y1, x2, y2)\")\n        num1 = int(input(\"please enter x1: \"))\n        num2 = int(input(\"please enter y1: \"))\n        num3 = int(input(\"please enter x2: \"))\n        num4 = int(input(\"please enter y2: \"))\n        answer = distance_formula(num1, num2, num3, num4)\n        print (\"the distance is\", answer)\n        response = yes_or_no()\n        if response == 'no':\n            break\n    print (\"done, thank you\")\n        \ndistance_formula_V2()","8f0c5749":"from colorama import *\ndef blueprint(message):\n    print (Fore.BLUE + message)\n    print (Style.RESET_ALL) \n\nblueprint(\"hello world\")","958dc091":"Examples begin here"}}