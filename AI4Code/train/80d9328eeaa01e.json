{"cell_type":{"689f28a8":"code","a038a8bd":"code","4dfc2c1e":"code","c7a5309d":"code","2e9671e6":"code","f632d429":"code","03b100d3":"code","27cf8a7f":"code","0c225e03":"code","3a986e57":"code","1c51ca32":"code","de352e58":"code","a369b33a":"code","4e0004f0":"code","d989de49":"code","a1581d59":"code","2a5835d4":"code","9c8b712a":"markdown","7acad676":"markdown","c19e4c2d":"markdown","1b3eb148":"markdown","94c0658f":"markdown","120fc800":"markdown","63656b67":"markdown","c0298ec6":"markdown","f3bb4a32":"markdown","b70dc67f":"markdown","98f78c75":"markdown","b4a7a4b3":"markdown"},"source":{"689f28a8":"import tensorflow.keras as keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, BatchNormalization\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a038a8bd":"train = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/test.csv')\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/sample_submission.csv')","4dfc2c1e":"train = train.drop('id', axis=1)\ntest = test.drop('id', axis=1)","c7a5309d":"for i in range(50):\n    mean, std = train[f'feature_{i}'].mean(), train[f'feature_{i}'].std()\n    train[f'feature_{i}'] = train[f'feature_{i}'].apply(lambda x : (x-mean)\/std)\n    test[f'feature_{i}'] = test[f'feature_{i}'].apply(lambda x : (x-mean)\/std)","2e9671e6":"label_dict = {val:idx for idx, val in enumerate(sorted(train['target'].unique()))}\ntrain['target'] = train['target'].map(label_dict)\n\ntarget = train['target']\ntrain.drop(['target'], inplace=True, axis=1)","f632d429":"train = train.values\ntarget = target.values\ntarget =  to_categorical(target)","03b100d3":"X_train, X_val, y_train, y_val = train_test_split(train, target, test_size = 0.1, random_state = 2, stratify=target)","27cf8a7f":"num_features = 50\nnum_classes = 4","0c225e03":"model = Sequential([\n        Dense(512, input_dim=num_features, activation='relu'),\n        BatchNormalization(),\n        Dropout(0.3),\n        Dense(256, activation='relu'),\n        BatchNormalization(),\n        Dropout(0.2),\n        Dense(128, activation='relu'),\n        BatchNormalization(),\n        Dropout(0.2),\n        Dense(num_classes, activation='softmax')\n    ])\n\nmodel.summary()","3a986e57":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics='accuracy')","1c51ca32":"history = model.fit(X_train, y_train,\n          batch_size = 100, epochs = 20, verbose = 2,\n          validation_data=(X_val, y_val));","de352e58":"score = model.evaluate(X_val, y_val, verbose = 0)\nprint('Test loss: {}%'.format(score[0] * 100))\nprint('Test score: {}%'.format(score[1] * 100))\nprint(\"MLP Error: %.2f%%\" % (100 - score[1] * 100))","a369b33a":"fig, ax = plt.subplots(figsize=(20,8))\nsns.lineplot(x = history.epoch, y = history.history['loss'])\nsns.lineplot(x = history.epoch, y = history.history['val_loss'])\nax.set_title('Learning Curve (Loss)')\nax.set_ylabel('Loss')\nax.set_xlabel('Epoch')\nax.legend(['train', 'test'], loc='best')\nplt.show()","4e0004f0":"pred = model.predict(train).argmax(axis=1)","d989de49":"fig, ax = plt.subplots(figsize=(9, 9))\nsns.heatmap(confusion_matrix(target.argmax(axis=1), pred), cmap='Blues', \n            annot=True, cbar=False, fmt='d', square=True, linewidth=0.4, ax=ax)\n\nax.set_ylabel('Pred', fontweight='bold')\nax.set_xlabel('True', fontweight='bold')\n\nplt.show()","a1581d59":"sample_submission[['Class_1','Class_2', 'Class_3', 'Class_4']] = model.predict(test)","2a5835d4":"sample_submission.to_csv(f'submission.csv',index=False)","9c8b712a":"## Model (Keras)","7acad676":"## Normalization\n\nThe data needs to be normalized to fit into the DNN.","c19e4c2d":"### Confusion Matrix","1b3eb148":"### Compile","94c0658f":"## Result visualization","120fc800":"### Initialization","63656b67":"### Evaluate","c0298ec6":"## Output","f3bb4a32":"## Simple Keras Pipeline\n\n- EDA : https:\/\/www.kaggle.com\/subinium\/tps-may-categorical-eda","b70dc67f":"The structure of the model can be changed freely, and the model is an MLP model using only Dense, Batchnormalization, Dropout.","98f78c75":"## Split Data","b4a7a4b3":"### Fit\n\nI didn't do a lot of Epochs for fast execution, and the batch size and epoch can be adjusted.\n\nWith the GPU, you can run the model much faster."}}