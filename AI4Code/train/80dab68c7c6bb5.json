{"cell_type":{"a46bced5":"code","02442c61":"code","784c6265":"code","29dd4cd4":"code","ca554163":"code","29461b77":"code","4c62d455":"code","91d09550":"code","3f6d21cb":"code","9b8a92f8":"code","4d85af07":"code","ec82e424":"code","dd647aea":"code","9121fab2":"code","83f75c79":"code","58b95d2b":"code","c66dc031":"code","f8145267":"code","47cc83b1":"code","8111d364":"code","7594f0e6":"code","7eb3b085":"code","23fc95e8":"code","416936b0":"code","e58d856d":"code","77c15002":"code","88921e08":"code","09315299":"code","1a4fd811":"code","bc131fa2":"code","9f2bcac2":"code","64e0a3c5":"code","a1b826af":"code","96165d96":"code","0c53e94c":"code","e4e58134":"code","4d9708f1":"code","e46f973a":"code","9b477c67":"code","7d086932":"code","4bf6962e":"markdown","a4102a48":"markdown","3e267747":"markdown","bbe2425c":"markdown","0b71d232":"markdown","1c330551":"markdown","0dc40f2b":"markdown","2a7fbdf1":"markdown","b73ee5b9":"markdown","2e1386fb":"markdown","7deaacd9":"markdown","4f57f4ca":"markdown","2a34f287":"markdown","fef89d8b":"markdown","665e2e86":"markdown","c5a6a220":"markdown","e5ad81f8":"markdown","367760e4":"markdown","0b9ce034":"markdown","9c781134":"markdown","e0e429b3":"markdown","f7ddffdd":"markdown","95db2913":"markdown","fce1fb5f":"markdown","153c4617":"markdown","f0a89104":"markdown","311b3efb":"markdown","0e3cf4b0":"markdown","c862ab76":"markdown","0015935b":"markdown","c68e23f3":"markdown","9c5c7755":"markdown","5c46ae96":"markdown","9b58f09a":"markdown","b13d9e1a":"markdown","5d8849d3":"markdown","320e8f70":"markdown","cff0e4e4":"markdown"},"source":{"a46bced5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport missingno as msno\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nimport datetime\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","02442c61":"df = pd.read_csv('\/kaggle\/input\/goodreadsbooks\/books.csv', error_bad_lines=False)\ndf.head(1)","784c6265":"df.shape","29dd4cd4":"df.info()","ca554163":"df.describe()","29461b77":"df.isnull().sum().sort_values()","4c62d455":"cardinality={}\nfor col in df.columns:\n    cardinality[col] = df[col].nunique()\n\ncardinality","91d09550":"#CHANGE DATE FORMAT FROM M\/D\/YYYY TO MM\/DD\/YYYY\n\nfor row in df['publication_date']:\n    if len(row) == 8:\n        df['publication_date'].replace(row, ('0' + row), inplace=True)\n        \nfor row in df['publication_date']:\n    if row[1] == '\/':\n        df['publication_date'].replace(row, ('0' + row), inplace=True)\n\nfor row in df['publication_date']:\n    if row[4] == '\/':\n        df['publication_date'].replace(row, (row[:3] + '0' + row[3:]), inplace=True)        ","3f6d21cb":"# CHANGE DATE TYPE FROM STR TO DATETIME\n\ndates = pd.Series(df['publication_date'])\ndates = pd.to_datetime(dates, errors='coerce')\ndf['publication_date'] = dates","9b8a92f8":"#SEPARATE DAY, MONTH, AND YEAR INTO INDIVIDUAL COLUMNS\n\ndf['publication_year'] = pd.to_datetime(df['publication_date']).dt.year\ndf['publication_year'] = df['publication_year'].fillna(0)\ndf['publication_year'] = df['publication_year'].astype(int)\n\ndf['publication_month'] = pd.to_datetime(df['publication_date']).dt.month\ndf['publication_month'] = df['publication_month'].fillna(0)\ndf['publication_month'] = df['publication_month'].astype(int)\n\ndf['pub_month_name'] = df['publication_date'].dt.strftime('%B')\ndf['pub_month_num'] = df['publication_date'].dt.strftime('%m')\ndf['publication_weekday'] = df['publication_date'].dt.strftime('%A')  \ndf['pub_date_num'] = df['publication_date'].dt.strftime('%d')\ndf['pub_year_month'] = df.publication_date.dt.to_period(\"M\")","4d85af07":"# REMOVE ROWS WITH NULL DATE VALUES\n\ndf = df[df['publication_year'] != 0]\n\ndf['publication_year'].isnull().value_counts()","ec82e424":"bins = np.linspace(0, 5, 6)\ngroup_names = ['btw 0 & 1', 'btw 1 & 2', 'btw 2 & 3', 'btw 3 & 4', 'btw 4 & 5']\ndf['ratings_binned'] = pd.cut(df['average_rating'], bins, labels=group_names, include_lowest=True)\n","dd647aea":"#Remove Mary GrandPre from Harry Potter novels\n\ndf.replace('J.K. Rowling-Mary GrandPr\u00e9', 'J.K. Rowling', inplace=True)","9121fab2":"title_count = df.groupby(['title'])[['bookID']].agg('count').reset_index()\ntitle_count.rename(columns={'bookID':'count'}, inplace=True)\ntitle_count = title_count.sort_values('count', ascending=False)\ntitle_count = title_count.reset_index().drop(['index'], axis=1)\ntitle_count = title_count.head(20)","83f75c79":"sns.set_context('poster')\nplt.figure(figsize=(20,20))\n\nx=title_count['count']\ny=title_count['title']\n\nax = sns.barplot(x=x, y=y, palette='deep')\n\n\nax.set_title(\"MOST FREQUENTLY OCCURRING TITLES\")\nax.set_xlabel(\"NUMBER OF OCCURANCES\")\nax.set_ylabel(\"TITLES\")\n# plt.show()\n\n","58b95d2b":"most_rated_titles = df[['title', 'ratings_count', 'publication_year']].sort_values('ratings_count', ascending = False).reset_index()\nmost_rated_titles = most_rated_titles.drop(['index'], axis=1)\nmost_rated_titles = most_rated_titles.head(50)\nmost_rated_titles\n\n# most_rated_titles = df[df['title'].isin(most_rated_titles['title'].unique())]\n# most_rated_titles = most_rated_titles[most_rated_titles['title'].isin(most_rated_titles['title'].unique())]\n# most_rated_titles","c66dc031":"sns.set_context('poster')\nplt.figure(figsize=(20,20))\n\nx=most_rated_titles['ratings_count']\ny=most_rated_titles['title']\n\nsns.barplot(x=x, y=y, palette='deep')\n\nplt.title(\"20 MOST RATED TITLES\")\nplt.xlabel(\"NUMBER OF RATINGS\")\nplt.ylabel(\"TITLES\")\nplt.show()","f8145267":"top_titles_list = most_rated_titles['title'].head(50).unique()\n\ntitle_ratings = df.groupby(['title'])[['average_rating']].agg('mean').reset_index()\ntitle_ratings =  title_ratings[title_ratings['title'].isin(top_titles_list)]\ntitle_ratings =  title_ratings.sort_values('average_rating', ascending=False)\ntitle_ratings =  title_ratings.reset_index().drop(['index'], axis=1)\ntitle_ratings = title_ratings.head(25)\n","47cc83b1":"sns.set_context('poster')\nplt.figure(figsize=(20,25))\n\nx=title_ratings['average_rating']\ny=title_ratings['title']\n\nsns.barplot(x=x, y=y, palette='deep')\n\nplt.title(\"HIGHEST RATED OF 25 MOST RATED TITLES\")\nplt.xlabel(\"AVERAGE RATING\")\nplt.ylabel(\"TITLES\")\nplt.show()","8111d364":"author_count = df[['authors']].value_counts().to_frame().reset_index()\nauthor_count.rename(columns={0:'count'}, inplace=True)\nauthor_count = author_count.head(20)\n\n","7594f0e6":"sns.set_context('poster')\nplt.figure(figsize=(20,15))\n\nx=author_count['count']\ny=author_count['authors']\n\nsns.barplot(x=x, y=y, palette='deep')\n\nplt.title(\"20 MOST OCCURING AUTHORS\")\nplt.xlabel(\"NUMBER OF OCCURANCES\")\nplt.ylabel(\"AUTHORS\")\nplt.show()","7eb3b085":"most_rated_auth = author_count['authors'].head(20).unique()\n\nauth_avg_rating = df.groupby(['authors'])[['average_rating']].agg('mean').reset_index()\nauth_avg_rating = auth_avg_rating[auth_avg_rating['authors'].isin(most_rated_auth)]\nauth_avg_rating = auth_avg_rating.sort_values('average_rating', ascending=False)\nauth_avg_rating = auth_avg_rating.reset_index().drop(['index'], axis=1)\nauth_avg_rating = auth_avg_rating.head(20)\n","23fc95e8":"sns.set_context('poster')\nplt.figure(figsize=(20,15))\n\nx=auth_avg_rating['average_rating']\ny=auth_avg_rating['authors']\n\nsns.barplot(x=x, y=y, palette='deep')\n\nplt.title(\"HIGHEST RATED OF 20 MOST OCCURING AUTHORS\")\nplt.xlabel(\"AVERAGE RATING\")\nplt.ylabel(\"AUTHORS\")\nplt.show()","416936b0":"book_years = df.groupby(['publication_year'])[['bookID']].agg('count')\nbook_years.rename(columns={'bookID' : 'count'}, inplace=True)\nbook_years = book_years.sort_values('count', ascending=False).reset_index()\nbook_years = book_years.head(20)\nbook_years = book_years.sort_values('publication_year').reset_index().drop(['index'], axis=1)\n","e58d856d":"sns.set_context('poster')\nplt.figure(figsize=(20,15))\n\nx=book_years['publication_year']\ny=book_years['count']\n\nchart = sns.barplot(x=x, y=y, palette='deep')\n\nplt.title(\"YEARS WITH THE MOST LISTED BOOKS\")\nplt.xlabel(\"YEARS\")\nplt.xticks(rotation=45,  horizontalalignment='center',fontweight='light',fontsize='small')\nplt.ylabel(\"NUMBER OF BOOKS\")\nplt.show()\n\n","77c15002":"rating_month = df.groupby(['publication_month', 'pub_month_name'])[['bookID']].agg('count')\nrating_month = rating_month.sort_values('bookID', ascending=False).reset_index()\nrating_month.rename(columns={'bookID':'book_count'}, inplace=True)\nrating_month = rating_month.head(20).sort_values('publication_month')","88921e08":"sns.set_context('poster')\nplt.figure(figsize=(20,15))\n\nx=rating_month['pub_month_name']\ny=rating_month['book_count']\n\nchart = sns.barplot(x=x, y=y, palette='deep')\n\nplt.title(\"MONTHS WITH THE MOST LISTED BOOKS\")\nplt.xlabel(\"MONTHS\")\nplt.xticks(rotation=45,  horizontalalignment='center',fontweight='light',fontsize='small')\nplt.ylabel(\"NUMBER OF BOOKS\")\nplt.show()\n","09315299":"pub_ratings_count = df.groupby(['publisher'])[['ratings_count']].agg('count')\npub_ratings_count = pub_ratings_count.sort_values('ratings_count', ascending=False).reset_index()\npub_ratings_count = pub_ratings_count.head(20)","1a4fd811":"sns.set_context('poster')\nplt.figure(figsize=(20,15))\n\nx=pub_ratings_count['ratings_count']\ny=pub_ratings_count['publisher']\n\nsns.barplot(x=x, y=y, palette='deep')\n\nplt.title(\"20 MOST RATED PUBLISHERS\")\nplt.xlabel(\"NUMBER OF RATINGS\")\nplt.ylabel(\"PUBLISHERS\")\nplt.show()","bc131fa2":"most_rated_pub = pub_ratings_count['publisher'].head(20).unique()\n\npub_avg_ratings = df.groupby(['publisher'])[['average_rating']].agg('mean').reset_index()\npub_avg_ratings = pub_avg_ratings[pub_avg_ratings['publisher'].isin(most_rated_pub)]\npub_avg_ratings = pub_avg_ratings.sort_values('average_rating', ascending=False)\npub_avg_ratings = pub_avg_ratings.reset_index().drop(['index'], axis=1)","9f2bcac2":"sns.set_context('poster')\nplt.figure(figsize=(15,20))\n\nx=pub_avg_ratings['average_rating']\ny=pub_avg_ratings['publisher']\n\nsns.barplot(x=x, y=y, palette='deep')\n\nplt.title(\"Average Ratings of the 20 Most Rated Publishers\")\nplt.xlabel(\"Average Rating\")\nplt.ylabel(\"Publishers\")\nplt.show()","64e0a3c5":"languages = df.groupby(['language_code'])[['title']].agg('count')\nlanguages = languages.rename(columns={'title':'count'}).reset_index()\nlanguages = languages.sort_values('count', ascending=False)\n\nsns.set_context('talk')\nplt.figure(figsize=(15,10))\n\nsns.barplot(x=\"language_code\", y='count', data=languages, palette='deep')\n\nplt.title(\"DISTRIBUTION OF LANGUAGES\")\nplt.xlabel(\"LANGUAGES\")\nplt.xticks(rotation=45,  horizontalalignment='center',fontweight='light',fontsize='12')\n\nplt.ylabel(\"COUNT\")\nplt.show()","a1b826af":"fig = px.pie(df, values='average_rating', names='ratings_binned')\nfig.show()","96165d96":"fig = px.scatter(x=df['average_rating'], y=df['  num_pages'])\n\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title_text='CORRELATION: AVERAGE RATING & NUM OF PAGES',\n                  yaxis_title='NUM OF PAGES',\n                  xaxis_title='AVERAGE RATING', \n                  title_x=0.5,\n                  width = 750,\n                  height=500)\nfig.show()","0c53e94c":"fig = px.scatter(x=df['average_rating'], y=df['ratings_count'])\n\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title_text='CORRELATION: AVERAGE RATING & RATINGS COUNT',\n                  yaxis_title='ratings_count',\n                  xaxis_title='AVERAGE RATING', \n                  title_x=0.5,\n                  width = 750,\n                  height=500)\nfig.show()","e4e58134":"sample = df[df['ratings_count']<20000]\n\nfig = px.scatter(x=sample['average_rating'], y=sample['ratings_count'])\n\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title_text='CORRELATION: AVERAGE RATING & RATINGS COUNT',\n                  yaxis_title='ratings_count',\n                  xaxis_title='AVERAGE RATING', \n                  title_x=0.5,\n                  width = 750,\n                  height=500)\nfig.show()","4d9708f1":"ratings_reviews = df[['text_reviews_count', 'ratings_binned']].sort_values('text_reviews_count', ascending=False)\n# ratings_reviews","e46f973a":"fig = px.scatter(x=ratings_reviews['ratings_binned'], y=ratings_reviews['text_reviews_count'])\n\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title_text='CORRELATION: AVERAGE RATING & TEXT REVIEWS COUNT',\n                  yaxis_title='TEXT REVIEWS COUNT',\n                  xaxis_title='AVERAGE RATING BINS', \n                  title_x=0.5,\n                  width = 750,\n                  height=500)\nfig.show()","9b477c67":"fig = px.scatter(x=df['average_rating'], y=df['text_reviews_count'])\n\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title_text='CORRELATION: AVERAGE RATING & TEXT REVIEWS COUNT',\n                  yaxis_title='TEXT REVIEWS COUNT',\n                  xaxis_title='AVERAGE RATING', \n                  title_x=0.5,\n                  width = 750,\n                  height=500)\nfig.show()","7d086932":"fig = px.scatter(x=df['average_rating'], y=df['publication_year'])\n\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title_text='CORRELATION: RATING & YEAR OF PUBLICATION',\n                  yaxis_title='YEAR OF PUBLICATION',\n                  xaxis_title='AVERAGE RATING', \n                  title_x=0.5,\n                  width = 750,\n                  height=500)\nfig.show()","4bf6962e":"# <a id=\"4\">IV. DATA WRANGLING<\/a>\n","a4102a48":"<a id=\"preprocessing\"><\/a>\n<font size=\"+1.5\" color=\"#223452\"><b>TOP 20 PUBLISHERS WITH MOST RATINGS<\/b><\/font><br> ","3e267747":"<a id=\"preprocessing\"><\/a>\n<font size=\"+1.5\" color=\"#223452\"><b>CREATE BINS FOR AVERAGE RATINGS<\/b><\/font><br>","bbe2425c":"# <a id=\"2\">II. DATA OVERVIEW & INSIGHTS<\/a>\n","0b71d232":"### OBSERVATIONS\n\nThe higher ratings count values exist within the 3.5 to 4.5 average rating range. This may possibly indicate a correlation between higher ratings counts and average ratings.","1c330551":"### OBSERVATIONS\n\nThe higher ratings count values exist within the 3.5 to 4.5 average rating range. This may possibly indicate a correlation between higher ratings counts and average ratings. \n\nWhen zooming in to the range below 20,000 ratings counts we see that as the ratings counts increase, they are more concentrated around the average rating value of 4. ","0dc40f2b":"<a id=\"ratings_dist\"><\/a>\n<font size=\"+1.5\" color=\"#223452\"><b>PLOTTING RATINGS DISTRIBUTION<\/b><\/font><br> \n\nBinning the average ratings into categories gives us a general overview of the ratings trends for the entire dataset.","2a7fbdf1":"<a id=\"preprocessing\"><\/a>\n<font size=\"+1.5\" color=\"#223452\"><b>YEARS WITH MOST BOOKS LISTED<\/b><\/font><br> ","b73ee5b9":"### OBSERVATIONS\n\nBooks published before 1960 tend to be almost exclusively rated above 3.5\n\nThe highest rated books were published more recently. \n\nBecause the dataset contains many duplicate titles with different publication dates, the relationship between the two variables is more difficult to determine.\n","2e1386fb":"<a id=\"preprocessing\"><\/a>\n<font size=\"+1.5\" color=\"#223452\"><b>CONVERT PUBLICATION DATES TO DATETIME FORMAT<\/b><\/font><br>","7deaacd9":"### OBSERVATIONS\n\nBecause the titles with the higher text review counts are consistently in the 3.5 - 4.5 range there might be a direct relationship between the two variables. ","4f57f4ca":"<a id=\"preprocessing\"><\/a>\n<font size=\"+1.5\" color=\"#223452\"><b>20 MOST FREQUENTLY OCCURRING TITLES<\/b><\/font><br>\n\nAlthough the data set consists of over 11,000 entries, many of the book titles appear multiple times. This is due to a number of factors including, multiple author listings and formats and different publishers and publication dates. \n\nThe following visualization depicts the 20 books that appear most frequently within the Goodreads data set. ","2a34f287":"# <a id='#5a'>BIVARIATE ANALYSIS<\/a>","fef89d8b":"<a id=\"top\"><\/a>\n\n<!-- <div class=\"list-group\" id=\"list-tab\" role=\"tablist\"> -->\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">Table of Contents<\/h3>\n\n* <a href='#1'>I. LOAD LIBRARIES & PACKAGES<\/a>\n* <a href='#2'>II. DATA OVERVIEW & INSIGHTS<\/a>\n* <a href='#3'>III. MISSING VALUES<\/a>\n* <a href='#4'>IV. DATA WRANGLING<\/a>\n* <a href='#5'>V. EXPLORATORY DATA ANALYSIS<\/a>  \n    A. <a href='#5a'>Va. Bivariate Exploration<\/a> \n* <a href='#6'>VI. CONCLUSION<\/a>","665e2e86":"<a id=\"most_rated\"><\/a>\n<font size=\"+1.5\" color=\"#223452\"><b>20 MOST RATED TITLES<\/b><\/font><br>\n\nBecause the Average Rating is the target variable, this is one of the more important visualizations. By looking at the 20 titles that recieved the most ratings we're able to guage the popularity of the books within this dataset. We're also able to make inferences into some of the factors that may contribute to a book's popularity. ","c5a6a220":"<a id=\"rating_pub_year\"><\/a>\n<font size=\"+1.5\" color=\"#223452\"><b>CORRELATION: RATING & YEAR OF PUBLICATION<\/b><\/font><br> ","e5ad81f8":"# <a id='#5'>V. EXPLORATORY DATA ANALYSIS<\/a>","367760e4":"### OBSERVATIONS\n\nBased on the above visualization the majority of books have less than 500 pages with average ratings between 3 and 4. \n\nBooks between 500 and 1500 pages are mostly rated in the 3.5 to 4.5 range. However, as the page numbers trend upward there is a slight increase in the ratings as well. \n\nThe few books with pages numbering above 1500 are mostly all rated above 4.0, yet most of the books rated above 4.5 have less than 500 pages. \n\nBased on the above observations a causal relationship between the two variables is unable to be determined. \n\n\n","0b9ce034":"### OBSERVATIONS\n\nThe titles that occur most frequently in the Goodreads data set are books that might be considered classic literature. Many of the books are in the public domain, which accounts for why there are so many different publications under different publishing companies. ","9c781134":"<p  style=\"text-align: center;\"><font size=\"12\"><b>GOODREADS BOOK RATINGS<\/b><\/font><\/p>\n<p  style=\"text-align: center;\"><font size=\"4\">AN EXPLORATORY DATA ANALYSIS<\/font><\/p>","e0e429b3":"<a id=\"preprocessing\"><\/a>\n<font size=\"+1.5\" color=\"#223452\"><b>HIGHEST RATED OF 20 MOST RATED PUBLISHERS<\/b><\/font><br> ","f7ddffdd":"<a id=\"highest_rated\"><\/a>\n<font size=\"+1.5\" color=\"#223452\"><b>20 HIGHEST RATED OF THE 50 MOST RATED TITLES<\/b><\/font><br>\n\nIn the Goodreads dataset the highest rated titles are the ones with only one or two ratings. Unfortunately this doesn't provide as clear of a representation of a book's quality as would a book with multiple ratings. \n\nTo address this isue, I've visualized the average ratings for the books that have been rated the most times in the dataset. ","95db2913":"<a id=\"rating_pg_num\"><\/a>\n<font size=\"+1.5\" color=\"#223452\"><b>AVERAGE RATING & NUMBER OF PAGES<\/b><\/font><br> \n\nIn this visualization we will plot the number of pages in a book as compared to it's average rating. ","fce1fb5f":"# <a href='#VI'>VI. CONCLUSION<\/a>\n\nThe Goodreads dataset has a lot of useful information for determining which factors may influence a book's rating and for general exploration of facts about a book.\n\nWe were able to look at variables such as publisher, date of publication, number of ratings, number of text reviews, and compare them to the average rating. \n\nIn a future version I will add prediction models to the kernel and also explore creating a recommendation system. \n\nThanks for stopping by!\n\n-Milton ","153c4617":"<a id=\"rating_ratings_count\"><\/a>\n<font size=\"+1.5\" color=\"#223452\"><b>AVERAGE RATING & RATINGS COUNT<\/b><\/font><br> ","f0a89104":"<a id=\"preprocessing\"><\/a>\n<font size=\"+1.5\" color=\"#223452\"><b>HIGHEST RATED OF 20 MOST OCCURING AUTHORS<\/b><\/font><br>","311b3efb":"<a id=\"language\"><\/a>\n<font size=\"+1.5\" color=\"#223452\"><b>LANGUAGE DISTRIBUTION<\/b><\/font><br> ","0e3cf4b0":"## CARDINALITY","c862ab76":" <hr size=\"30\">","0015935b":"## INTRODUCTION\n\nThis kernel is an exploration and analysis of the Goodreads dataset. We'll examine several variables and their relationships to gain insight into what kind of influence they might have on each other. \n\nBy looking at over 11,000 books in several different langagues by thousands of different authors and publishers we will learn a lot about why certain books continue to have such a profound impact.\n\nIn a future version I plan to do some modeling to try and predict the average rating of a book using some of the feature variables listed. ","c68e23f3":"#### OBSERVATIONS\n\nThe 20 books with the most ratings consists of a mixture classic literature and newer titles such as the Harry Potter series and The Da Vinci Code. \n\nTypes of Books in the list:\n    * Books used in schools: \"The Giver\", \"Animal Farm\", and \"Romeo and Juliet\"\n    * Books made into movies\/TV shows: \"Harry Potter\", \"A Clash of Kings\"\n","9c5c7755":"# <a id=\"3\">III. MISSING VALUES<\/a>\n","5c46ae96":"<a id=\"ratings_bins_text_reviews\"><\/a>\n<font size=\"+1.5\" color=\"#223452\"><b>CORRELATION: RATINGS BINS & TEXT REVIEWS COUNT<\/b><\/font><br> \n\nBy using the ratings bins we're able to get a more general picture of the relationship between the number of text reviews a book has and its rating. \n\nFor a more in depth look, we'll also look at the individual ratings compared to the text review counts.","9b58f09a":"### OBSERVATIONS: \n\nAlthough Twilight has the most ratings, it is not included among the books with the highest average rating. ","b13d9e1a":"<hr>","5d8849d3":"# <a id=\"1\">I. LIBRARIES & PACKAGES<\/a>\n","320e8f70":"<a id=\"preprocessing\"><\/a>\n<font size=\"+1.5\" color=\"#223452\"><b>20 MOST OCCURING AUTHORS<\/b><\/font><br>","cff0e4e4":"<a id=\"preprocessing\"><\/a>\n<font size=\"+1.5\" color=\"#223452\"><b>PUBLICATION MONTH COUNT<\/b><\/font><br> "}}