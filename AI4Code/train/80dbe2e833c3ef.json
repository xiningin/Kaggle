{"cell_type":{"91b00ff0":"code","dfba769e":"code","38f49abb":"code","8fa7f6ea":"code","99e70858":"code","cfa04747":"code","b576f225":"code","002c95ac":"code","dac8a6df":"code","d482909f":"code","64d4d610":"code","5783d9d1":"code","9ceb6d8b":"code","226cfccd":"code","664c1026":"code","e6fc8419":"code","6f616fe6":"code","9dc878bf":"code","44736086":"code","6be49615":"code","928d0fc0":"code","445856e7":"code","22b8eab8":"code","86308d1f":"code","106524d7":"code","07bd16c8":"code","c5ca7bfe":"code","acda6e04":"code","3fa8e79b":"code","50570f0e":"code","c48ef23c":"code","e37ba88f":"code","5a15db78":"code","0fe2e5a0":"code","ac5a6dda":"code","9e6d70f9":"code","5b91be75":"code","2ec3a354":"code","441f9a56":"code","1bd94b36":"code","fb473a09":"code","8807baf9":"code","e3fec6ef":"code","783a91b2":"code","827bdba9":"code","e9a8bbcb":"code","b7b9eed9":"code","52a2ba7b":"code","fbf06b7b":"code","047e7c7a":"code","57d56409":"code","d3246a8c":"code","37a47a35":"code","c91e0c1b":"code","d233b608":"code","83550dd7":"code","d6ba7e6d":"code","64cc9773":"code","dc16469a":"code","5f239907":"code","e7d91fb7":"code","0cecf691":"code","4dab90fb":"code","019b4d68":"code","eb3144fe":"code","159630ff":"code","0a121616":"code","755ed475":"code","0c9d4f9b":"code","2378c573":"code","b9b6e033":"code","3e99e572":"code","ab445724":"code","f57442fe":"code","d3587984":"code","a30285a6":"code","abb6bf82":"code","f44dfaee":"code","82383531":"code","85f749f2":"code","d9668d6c":"code","31860f37":"code","a29cdfa8":"code","c5bcff42":"code","602b45cb":"code","e2bab170":"code","6c415a52":"code","8e36f577":"code","ce2e2ac6":"code","fc507ed6":"code","3c593422":"code","44cd752b":"code","f944dedb":"markdown","2d2da8a2":"markdown","c8b42b63":"markdown","f26d1640":"markdown","63a63128":"markdown","b28ab01d":"markdown","08edc892":"markdown","877eeef5":"markdown","c02c5bcf":"markdown","1a4e4549":"markdown","edb8e3d8":"markdown","58ee740f":"markdown","e944d9ee":"markdown","70d30e45":"markdown","e64e7805":"markdown","82ec41e4":"markdown","c12d0e2d":"markdown","fb50c802":"markdown","813981ce":"markdown","3284c250":"markdown","aaca5629":"markdown","6792c5f4":"markdown","054e25ea":"markdown","2706dc13":"markdown","7045614f":"markdown","a634405d":"markdown","afdd4baf":"markdown","e8c5a250":"markdown","3d801292":"markdown","c3cdb18c":"markdown","86adbeac":"markdown","ae13f1cb":"markdown","8edd5a4e":"markdown","387a9d0f":"markdown","b2e14add":"markdown","274cbfab":"markdown","cd4a277e":"markdown"},"source":{"91b00ff0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","dfba769e":"#df_merchants=pd.read_csv(\"..\/input\/merchants.csv\")\ndf_historical_transactions=pd.read_csv(\"..\/input\/historical_transactions.csv\")\ndf_train=pd.read_csv(\"..\/input\/train.csv\")\n","38f49abb":"df_test=pd.read_csv(\"..\/input\/test.csv\")","8fa7f6ea":"df_train.groupby('first_active_month').count()['card_id'].plot(kind='bar',figsize=(40,15))","99e70858":"df_test.groupby('first_active_month').count()['card_id'].plot(kind='bar',figsize=(40,15))","cfa04747":"df_train['target'].describe()","b576f225":"df_train.boxplot(column='target', figsize=(20,20))","002c95ac":"df_train['target'].describe()['75%'] - df_train['target'].describe()['25%']","dac8a6df":"df_train.head()","d482909f":"df_train.sort_values('first_active_month').groupby(['first_active_month']).mean()['target'].plot(kind='bar',figsize=(20,10))\n","64d4d610":"fig, ax = plt.pyplot.subplots()\n# the size of A4 paper\nfig.set_size_inches(11.7, 8.27)\nfor feature in df_train['feature_1'].unique():\n        sns.distplot(df_train[df_train['feature_1']==feature]['target']);","5783d9d1":"fig, ax = plt.pyplot.subplots()\n# the size of A4 paper\nfig.set_size_inches(11.7, 8.27)\nsns.violinplot(x=\"feature_1\", y=\"target\",  data=df_train, palette=\"muted\",inner=\"points\")","9ceb6d8b":"fig, ax = plt.pyplot.subplots()\n# the size of A4 paper\nfig.set_size_inches(11.7, 8.27)\nsns.violinplot(x=\"feature_2\", y=\"target\",  data=df_train, palette=\"muted\",inner=\"points\")","226cfccd":"fig, ax = plt.pyplot.subplots()\n# the size of A4 paper\nfig.set_size_inches(11.7, 8.27)\nsns.violinplot(x=\"feature_3\", y=\"target\",  data=df_train, palette=\"muted\",inner=\"points\")","664c1026":"df_historical_transactions.head()","e6fc8419":"print(\"min purchase date\", df_historical_transactions['purchase_date'].min())\nprint(\"max purchase date\", df_historical_transactions['purchase_date'].max())","6f616fe6":"df_historical_transactions['purchase_date'] = pd.to_datetime(df_historical_transactions['purchase_date'])\nmax_purchase_date=df_historical_transactions['purchase_date'].max()","9dc878bf":"g=df_historical_transactions[['card_id']].groupby('card_id')","44736086":"df_transaction_counts=g.size().reset_index(name='num_transactions')","6be49615":"#df_transaction_counts.head()\ndf_train=pd.merge(df_train,df_transaction_counts, on=\"card_id\",how='left')\n","928d0fc0":"df_test=pd.merge(df_test,df_transaction_counts, on=\"card_id\",how='left')","445856e7":"df_train['num_transactions'].describe()","22b8eab8":"bins=[0,500,1000,1500,2000,2500]","86308d1f":"df_train['binned_numtransactions']=pd.cut(df_train['num_transactions'],bins)","106524d7":"df_train.head()","07bd16c8":"fig, ax = plt.pyplot.subplots()\n# the size of A4 paper\nfig.set_size_inches(11.7, 8.27)\nsns.boxplot(x='binned_numtransactions',y='target',data=df_train)","c5ca7bfe":"#this takes more memory (not needed now)\n#df_historical_transactions['YearMonth_Purchase'] = df_historical_transactions['purchase_date'].map(lambda x: 100*x.year + x.month)\n\n","acda6e04":"#You can plot and check this , there is peak in one particular month, skipping this as it takes memory\n#g=df_historical_transactions[['YearMonth_Purchase','purchase_amount']].groupby('YearMonth_Purchase').mean()\n#g.plot(kind='bar',figsize=(20,10))","3fa8e79b":"top_merchants_by_purchaseamount=df_historical_transactions[['merchant_id','purchase_amount']].groupby(by='merchant_id').mean().sort_values(by='purchase_amount',ascending=False).head(20)\n","50570f0e":"top_merchants_by_purchaseamount.head()","c48ef23c":" \n#g=df_historical_transactions[df_historical_transactions['merchant_id'].isin(list(top_merchants_by_purchaseamount.index))][['merchant_id','YearMonth_Purchase','purchase_amount']].groupby(['YearMonth_Purchase','merchant_id']).mean()\n","e37ba88f":"#g.unstack()","5a15db78":"g=df_historical_transactions[['card_id','merchant_id']].groupby(['card_id','merchant_id'])\n","0fe2e5a0":"merchantid_counts_percard=g.size()\n","ac5a6dda":"merchantid_counts_percard=pd.DataFrame(merchantid_counts_percard)","9e6d70f9":"merchantid_counts_percard.head()","5b91be75":"merchantid_counts_percard.columns=['num_favourite_merchant']","2ec3a354":"merchantid_counts_percard.head()","441f9a56":"merchantid_counts_percard=merchantid_counts_percard.sort_values(by='num_favourite_merchant',ascending=False)","1bd94b36":"merchantid_counts_percard=merchantid_counts_percard.groupby(level=0).head(1).reset_index()\n","fb473a09":"merchantid_counts_percard.columns=['card_id','favourite_merchant','num_transaction_favourite_merchant']","8807baf9":"\ndf_train=pd.merge( df_train,merchantid_counts_percard,on=\"card_id\",how='left')","e3fec6ef":"df_test=pd.merge( df_test,merchantid_counts_percard,on=\"card_id\",how='left')","783a91b2":"df_historical_transactions['purchase_amount'].describe()","827bdba9":"g=df_historical_transactions[['card_id','purchase_amount']].groupby('card_id')","e9a8bbcb":"purchaseamount_agg=g.agg(['sum', 'min','max','std','median','mean'])","b7b9eed9":"purchaseamount_agg=purchaseamount_agg.reset_index()","52a2ba7b":"purchaseamount_agg.head()","fbf06b7b":"df_train=pd.merge( df_train,purchaseamount_agg,on=\"card_id\",how='left')","047e7c7a":"df_train.head()","57d56409":"df_test=pd.merge( df_test,purchaseamount_agg,on=\"card_id\",how='left')","d3246a8c":"df_train[\"first_active_month\"]=pd.to_datetime(df_train[\"first_active_month\"])","37a47a35":"df_test[\"first_active_month\"]=pd.to_datetime(df_test[\"first_active_month\"])","c91e0c1b":"df_train[\"first_active_yr\"]=df_train[\"first_active_month\"].dt.year","d233b608":"df_test[\"first_active_yr\"]=df_test[\"first_active_month\"].dt.year","83550dd7":"df_train[\"first_active_mon\"]=df_train[\"first_active_month\"].dt.month","d6ba7e6d":"df_test[\"first_active_mon\"]=df_test[\"first_active_month\"].dt.month","64cc9773":"len(df_train['favourite_merchant'].unique())","dc16469a":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\ndf_train['favourite_merchant'] = le.fit_transform(df_train['favourite_merchant'] )","5f239907":"le = preprocessing.LabelEncoder()\ndf_test['favourite_merchant'] = le.fit_transform(df_test['favourite_merchant'] )","e7d91fb7":"last_active_month=df_historical_transactions.loc[df_historical_transactions.groupby('card_id').purchase_date.idxmax(),:][['card_id','purchase_date','purchase_amount']]\n","0cecf691":"last_active_month.columns=['card_id','last_active_purchase_date','last_active_purchase_amount']","4dab90fb":"last_active_month.head()","019b4d68":"df_train=pd.merge(df_train,last_active_month, on=\"card_id\",how='left')\n","eb3144fe":"df_test=pd.merge(df_test,last_active_month, on=\"card_id\",how='left')\n","159630ff":"df_train['last_active_purchase_year']=df_train['last_active_purchase_date'].dt.year","0a121616":"df_train['last_active_purchase_month']=df_train['last_active_purchase_date'].dt.month","755ed475":"df_train['last_active_purchase_day']=df_train['last_active_purchase_date'].dt.day","0c9d4f9b":"df_test['last_active_purchase_year']=df_test['last_active_purchase_date'].dt.year","2378c573":"df_test['last_active_purchase_month']=df_test['last_active_purchase_date'].dt.month","b9b6e033":"df_test['last_active_purchase_day']=df_test['last_active_purchase_date'].dt.day","3e99e572":"max_purchase_date","ab445724":"\ndf_train['dormancy']=[(max_purchase_date-x).days for x in df_train['last_active_purchase_date']]","f57442fe":"df_test['dormancy']=[(max_purchase_date-x).days for x in df_test['last_active_purchase_date']]","d3587984":"df_train.head()","a30285a6":"df_test.columns","abb6bf82":"\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nimport lightgbm as lgb","f44dfaee":"df_train.columns=['first_active_month','card_id','feature_1','feature_2','feature_3','target','num_transactions',\n                  'binned_numtransactions','favourite_merchant','num_transaction_favourite_merchant',\n                  'sum_purchase_amount','min_purchase_amount','max_purchase_amount',\n                  'std_purchase_amount','median_purchase_amount','mean_purchase_amount',\n                  'first_active_yr','first_active_mon','last_active_purchase_date',\n       'last_active_purchase_amount', 'last_active_purchase_year','last_active_purchase_month', \n                  'last_active_purchase_day', 'dormancy']\n","82383531":"df_test.columns=['first_active_month','card_id','feature_1','feature_2','feature_3',\n                 'num_transactions','favourite_merchant','num_transaction_favourite_merchant',\n                 'sum_purchase_amount','min_purchase_amount','max_purchase_amount',\n                 'std_purchase_amount','median_purchase_amount','mean_purchase_amount','first_active_yr','first_active_mon','last_active_purchase_date',\n            'last_active_purchase_amount', 'last_active_purchase_year',\n           'last_active_purchase_month', 'last_active_purchase_day', 'dormancy']\n","85f749f2":"df_test.head()","d9668d6c":"final_cols=['feature_1','feature_2','feature_3','num_transactions','favourite_merchant','num_transaction_favourite_merchant','sum_purchase_amount',\n            'min_purchase_amount','max_purchase_amount','std_purchase_amount','median_purchase_amount','mean_purchase_amount',\n            'first_active_yr','first_active_mon','last_active_purchase_amount', 'last_active_purchase_year',\n           'last_active_purchase_month', 'last_active_purchase_day', 'dormancy']\ntarget_col=['target']","31860f37":"\nlgb_params = {\n        \"objective\" : \"regression\",\n        \"metric\" : \"rmse\",\n        \"num_leaves\" : 30,\n        \"min_child_weight\" : 50,\n        \"learning_rate\" : 0.05,\n        \"bagging_fraction\" : 0.7,\n        \"feature_fraction\" : 0.7,\n        \"bagging_frequency\" : 5,\n        \"bagging_seed\" : 2018,\n        \"verbosity\" : -1\n    }","a29cdfa8":"Folds = KFold(n_splits=7, shuffle=True, random_state=1989)","c5bcff42":"\npred_train = np.zeros(len(df_train))\npred_test = np.zeros(len(df_test))\n\nfeatures_lgb = list(df_train.columns)\nfeature_importance = pd.DataFrame()","602b45cb":"train_X=df_train[final_cols]","e2bab170":"train_y=df_train[target_col]","6c415a52":"test_X=df_test[final_cols]","8e36f577":"for fold_, (train_idx, val_idx) in enumerate(Folds.split(df_train)):\n    train_data = lgb.Dataset(train_X.iloc[train_idx], label=train_y.iloc[train_idx])\n    val_data = lgb.Dataset(train_X.iloc[val_idx], label=train_y.iloc[val_idx])\n\n    num_round = 10000\n    model = lgb.train(lgb_params, train_data, num_round, valid_sets = [train_data, val_data], verbose_eval=1000, early_stopping_rounds = 100)\n    pred_train[val_idx] = model.predict(train_X.iloc[val_idx], num_iteration=model.best_iteration)\n\n    pred_test += model.predict(test_X, num_iteration=model.best_iteration) \/ Folds.n_splits\n\n","ce2e2ac6":"\nprint(np.sqrt(mean_squared_error(pred_train, df_train[target_col])))","fc507ed6":"submit_df = pd.read_csv('..\/input\/sample_submission.csv')\nsubmit_df[\"target\"] = pred_test\nsubmit_df.to_csv(\"submission_baseline_lgb.csv\", index=False)","3c593422":"submit_df","44cd752b":"fig, ax = plt.pyplot.subplots(figsize=(12,10))\nlgb.plot_importance(model, max_num_features=50, height=0.8, ax=ax)\nax.grid(False)\nplt.pyplot.title(\"LGB- Feature Importance\", fontsize=15)\n","f944dedb":"Distribution looks similar. ","2d2da8a2":"## **Training Model**","c8b42b63":"#### Lets also check how feature(feature-1,feature-2,feature-3) column relates to target","f26d1640":"**Lets also relate first active month with target **","63a63128":"## **Historical Transactions**","b28ab01d":"Distribution looks same for feature-1 column. There are many near 0.\n\nModel hopefully will be able to relate feature variable and target","08edc892":"This shows number of subscribers increasing. As from wikipedia, Elo was founded in 2010 so this shows trend of subscriber growing from that time. It would be interesting to see how many of old customers are still there performing transactions and whats their loyalty score. We will explore this part later on","877eeef5":"### **add Favourite merchant and Favourite merchant count**","c02c5bcf":"### **Encode Favourite merchant column**","1a4e4549":"So most lies in this range\n","edb8e3d8":"Description based on above output which is commented. \n\nI wanted to create line chart on it but there are many NaN so decided not to create it. However there is one interesting thing to note. We have noticed peak in April 2018 (previous graph) , if we see purchases for merchant with id: M_ID_ee49262ab5, this is influencing a lot. We keep this for later part","58ee740f":"Skipping this part, you can check top 20 merchants by month year basis","e944d9ee":"### **Lets bin num transactions and plot to see the relationship with loyalty score**","70d30e45":"### **Transform first_active_month and get year and month**","e64e7805":"### **Last Active Month**","82ec41e4":"### **Include num_transactions as feature**","c12d0e2d":"There are transactions ranging from 2017 to 2018. Lets now check # of transactions and relate with loyalty of customer","fb50c802":"These all distribution looks similar. Probability of target being near 0 is higher so Model should be able to find relationship here. We will keep this feature","813981ce":"### **Lets add column on training data :favourite merchant, favourite merchant transaction count **","3284c250":"Why lowest score for customers whose first active month is april 2012?? ","aaca5629":"### **Add Dormancy**","6792c5f4":"### **Lets now see the trend of purchase date and purchase amount**","054e25ea":"##### Convert to date and make column YearMonth_Purchase on historical transaction","2706dc13":"### **First Active Months: Month of first purchase. Lets see the trend of how many first purchases from beginning**","7045614f":"From this plot we can see that there are extreme outliers as well if we specifically see minimum value. Mean is therefore effected by this outlier its greater than median. Distribution is skewed from left side.\n. Distribution is tight. Lets also calculate Interquartile(not effected by outliers) to see the range.","a634405d":"##### Lets explore and relate historical transaction with target variable","afdd4baf":"Interesting. There is peak in one particular Month: April 2017 . We keep this for later part.","e8c5a250":"It seems that some of lower transaction counts has lower loyalty score as can be seen in above distribution. There are  extreme values from negative side for lower transaction counts. Model will be able to find some relationship here","3d801292":"We will use this later to calculate dormancy","c3cdb18c":"### **Using 7 K Fold cross validation**","86adbeac":"Violen Plot allows us to compare in a more better way. Lets plot for feature 1, feature 2 and feature 3","ae13f1cb":"### **Lets look at target variable**","8edd5a4e":"\nLets also validate this distribution using test set","387a9d0f":"## **Exploration and building features**","b2e14add":"### **aggregate Purchase amount and add sum,mean, max, min as feature**","274cbfab":"### **Top 20 Merchants with higher purchase amount**","cd4a277e":"### **Prepare Data (X and Y for training)**"}}