{"cell_type":{"137a0b52":"code","618d08ae":"code","93cfcc73":"code","3a2d4462":"code","cdb4b9da":"code","7fc9334c":"code","2e4b1456":"code","06c5527b":"code","1e4958dc":"code","5de85213":"code","a483c49e":"code","d4b3216e":"code","c9598b43":"code","7a3b21b4":"code","6a133891":"code","051e4803":"code","a4c46dc6":"code","26b9832c":"code","81b9d60d":"code","c5fb0c6d":"code","0daaf816":"code","b72598bd":"code","7cac47eb":"code","f36fa44a":"code","329f92ce":"code","0abd6642":"code","0a3cafcb":"code","7b7c8201":"code","950dbb45":"code","3fb49055":"code","4914915f":"code","64e1f17d":"code","1a043aa7":"code","d311b076":"code","0c9f971d":"code","649658b9":"code","5557d4bb":"code","eaaa5008":"code","ad03018f":"markdown","b18cefdd":"markdown","316df3d0":"markdown","d67c3d8e":"markdown","9acddb07":"markdown","f8e2d840":"markdown","81c4b57c":"markdown","a5f90b3c":"markdown","3ac3ea77":"markdown","563891f0":"markdown","76140987":"markdown"},"source":{"137a0b52":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport re\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf","618d08ae":"data = pd.read_csv('..\/input\/college-football-attendance-2000-to-2018\/CFBeattendance.csv', encoding='latin-1')","93cfcc73":"data","3a2d4462":"features_to_drop = ['Date', 'Site', 'Team', 'Opponent']\n\ndata.drop(features_to_drop, axis=1, inplace=True)","cdb4b9da":"data.isna().sum()","7fc9334c":"data.dtypes","2e4b1456":"categorical_features = ['Time', 'Rank', 'TV', 'Opponent_Rank', 'Conference']","06c5527b":"def get_uniques(df, columns):\n    return {column: list(df[column].unique()) for column in columns}","1e4958dc":"get_uniques(data, categorical_features)","5de85213":"binary_features = ['TV', 'New Coach', 'Tailgating']\n\nordinal_features = ['Time', 'Rank', 'Opponent_Rank']\n\nnominal_features = ['Conference']","a483c49e":"data['TV'].value_counts()","d4b3216e":"data['TV'] = data['TV'].apply(lambda x: 0 if x == 'Not on TV' else 1)","c9598b43":"data['New Coach'] = data['New Coach'].astype(np.int)\ndata['Tailgating'] = data['Tailgating'].astype(np.int)","7a3b21b4":"data","6a133891":"data['Rank'].unique()","051e4803":"data['Rank'] = data['Rank'].apply(lambda x: 26 if x == 'NR' else np.int(x))\ndata['Opponent_Rank'] = data['Opponent_Rank'].apply(lambda x: 26 if x == 'NR' else np.int(x))","a4c46dc6":"time_ordering = sorted(data['Time'].unique())","26b9832c":"data['Time'] = data['Time'].apply(lambda x: time_ordering.index(x))","81b9d60d":"data","c5fb0c6d":"data['Conference'].unique()","0daaf816":"def onehot_encode(df, column):\n    dummies = pd.get_dummies(df[column])\n    df = pd.concat([df, dummies], axis=1)\n    df.drop(column, axis=1, inplace=True)\n    return df","b72598bd":"data = onehot_encode(data, 'Conference')","7cac47eb":"data.drop([4355, 5442, 5449, 5456], axis=0, inplace=True)","f36fa44a":"y = data['Result']\nX = data.drop('Result', axis=1)","329f92ce":"y","0abd6642":"y = y.apply(lambda x :re.search(r'^[^\\s]*', x).group(0))","0a3cafcb":"y.unique()","7b7c8201":"y[(y == 'NC') | (y == 'White') | (y == 'Blue')]","950dbb45":"label_encoder = LabelEncoder()\n\ny = label_encoder.fit_transform(y)\ny_mappings = {index: value for index, value in enumerate(label_encoder.classes_)}\ny_mappings","3fb49055":"y","4914915f":"X","64e1f17d":"scaler = MinMaxScaler()\n\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)\nX","1a043aa7":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7)","d311b076":"inputs = tf.keras.Input(shape=(33,))\nx = tf.keras.layers.Dense(16, activation='relu')(inputs)\nx = tf.keras.layers.Dense(16, activation='relu')(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n\noptimizer = tf.keras.optimizers.Adam(learning_rate=0.001)\nmetrics = [\n    tf.keras.metrics.BinaryAccuracy(name='acc'),\n    tf.keras.metrics.AUC(name='auc')\n]\n\nmodel.compile(\n    optimizer=optimizer,\n    loss='binary_crossentropy',\n    metrics=metrics\n)\n\n\nbatch_size = 32\nepochs = 10\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=batch_size,\n    epochs=epochs,\n    verbose=0\n)","0c9f971d":"plt.figure(figsize=(14, 10))\n\nepochs_range = range(1, epochs + 1)\ntrain_loss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.plot(epochs_range, train_loss, label=\"Training Loss\")\nplt.plot(epochs_range, val_loss, label=\"Validation Loss\")\n\nplt.title(\"Training and Validation Loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend()\n\nplt.show()","649658b9":"np.argmin(val_loss)","5557d4bb":"model.evaluate(X_test, y_test)","eaaa5008":"y.sum() \/ len(y)","ad03018f":"# Getting Started","b18cefdd":"## Scaling","316df3d0":"# Training","d67c3d8e":"### Nominal Encoding","9acddb07":"# Preprocessing","f8e2d840":"# Results","81c4b57c":"### Ordinal Encoding","a5f90b3c":"## Missing Values","3ac3ea77":"### Label Encoding","563891f0":"## Encoding","76140987":"### Binary Encoding"}}