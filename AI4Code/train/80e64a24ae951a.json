{"cell_type":{"311a6bce":"code","1e880830":"code","982f8e17":"code","0a7832f2":"code","b0992cc4":"code","e1964857":"code","7cbf2cb7":"code","1982c2b3":"code","d5043d79":"code","a6c135c7":"code","5ac49a24":"code","e1621c1a":"code","53f9217a":"code","f764fadc":"code","9afb62e1":"code","ed31acc3":"code","f2319c6c":"code","2bcd634d":"code","9f372681":"code","a8432124":"code","3580ed2b":"code","3013848c":"code","7ffc585d":"code","0eaad12d":"code","ec1b6d1a":"code","28aae1fd":"code","59c09600":"code","670d3a09":"code","1110ec5a":"code","150aa6b7":"markdown"},"source":{"311a6bce":"import json\nimport pandas as pd \nimport numpy as np \ndf1=pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\ndf2=pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')","1e880830":"df2.drop(['homepage'], axis=1,inplace=True)","982f8e17":"df1.columns = ['id','tittle','cast','crew']\ndf2= df2.merge(df1,on='id')\ndf2.set_index('id',inplace=True)","0a7832f2":"def get_director(x):\n    for i in x:\n        if i['job'] == 'Director':\n            return i['name']\n    return np.nan\n\ndef get_author(x):\n    for i in x:\n        if i['job'] == 'Author':\n            return i['name']\n    return np.nan","b0992cc4":"df2.columns","e1964857":"df2['crew'] = df2['crew'].apply(json.loads)\ndf2['genres'] = df2['genres'].apply(json.loads)\ndf2['keywords'] = df2['keywords'].apply(json.loads)\ndf2['production_companies'] = df2['production_companies'].apply(json.loads)\ndf2['production_countries'] = df2['production_countries'].apply(json.loads)\ndf2['cast'] = df2['cast'].apply(json.loads)\n\n\ndf2['director'] = df2['crew'].apply(get_director)\ndf2['author'] = df2['crew'].apply(get_author)","7cbf2cb7":"def get_list(x):\n    if isinstance(x, list):\n        names = [i['name'] for i in x]\n        return names\n    \n        if len(names) > 3:\n            names = names[:3]\n        return names\n    \n    return []","1982c2b3":"df2['keywords_list'] = df2['keywords'].apply(get_list)\ndf2['genres_list'] = df2['genres'].apply(get_list)\ndf2['companies_list'] = df2['production_companies'].apply(get_list)\ndf2['countries_list'] = df2['production_countries'].apply(get_list)\ndf2['cast_list'] = df2['cast'].apply(get_list)\n\ndf2['cast_list'] = df2['cast_list'].apply(lambda x : x[:3])","d5043d79":"df2.info()","a6c135c7":"df2.head()","5ac49a24":"def clean_data(x):\n    if isinstance(x, list):\n        return [str.lower(i.replace(\" \", \"\")) for i in x]\n    else:\n        #Check if director exists. If not, return empty string\n        if isinstance(x, str):\n            return str.lower(x.replace(\" \", \"\"))\n        else:\n            return ''","e1621c1a":"features = ['keywords_list','genres_list','companies_list','countries_list','cast_list','director']\nfor feature in features:\n    df2[feature] = df2[feature].apply(clean_data)","53f9217a":"df2.drop(['cast','production_companies','production_countries','keywords','genres','original_title','crew'],axis=1,inplace=True)","f764fadc":"df2.columns","9afb62e1":"df_preprocess=df2[['budget','overview','title','director','author','keywords_list','genres_list','companies_list','countries_list','cast_list']]","ed31acc3":"df_preprocess.head()","f2319c6c":"df_preprocess['author'] = df_preprocess['author'].apply(lambda x : x if str(x) != 'nan' else \"\")","2bcd634d":"def create_soup(x,pesos=[1,1,1,1,0]):\n    return ' '.join(pesos[1]*x['keywords_list']) + ' ' + \\\n    ' '.join(pesos[2]*x['genres_list']) + ' ' + ' '.join(pesos[3]*x['cast_list']) + ' '.join(pesos[4]*x['companies_list']) + \" \"+ pesos[0] * (x['director'] + ' ')\n\ndf_preprocess['soup'] = df_preprocess.apply(create_soup, axis=1)","9f372681":"df_preprocess['soup'] = df_preprocess['soup'].apply(lambda x : \" \".join(x.split()))","a8432124":"df_preprocess[df_preprocess['title']=='The Godfather']['cast_list'].values","3580ed2b":"from sklearn.feature_extraction.text import CountVectorizer\n\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(df_preprocess['soup'])\n\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncosine_sim2 = cosine_similarity(count_matrix, count_matrix)","3013848c":"df_preprocess = df_preprocess.reset_index()\nindices = pd.Series(df_preprocess.index, index=df2['title'])","7ffc585d":"def get_recommendations(title, cosine_sim=cosine_sim2):\n    # Get the index of the movie that matches the title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return df_preprocess['title'].iloc[movie_indices]","0eaad12d":"get_recommendations('The Godfather')","ec1b6d1a":"get_recommendations('The Dark Knight Rises')","28aae1fd":"get_recommendations('Avatar')","59c09600":"get_recommendations('Pulp Fiction')","670d3a09":"get_recommendations('Click')","1110ec5a":"get_recommendations('Toy Story 2')","150aa6b7":"- Considerar features num\u00e9ricas (budget e lancamento)\n- Considerar faixa et\u00e1ria (desenho animado ta ruim)\n- Acha filmes bem similares muito bem\n\n\nPeso 1\n\nPeso 21120,21210"}}