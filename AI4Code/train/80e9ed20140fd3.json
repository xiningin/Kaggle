{"cell_type":{"2b3c8fd8":"code","d83a9d76":"code","fcf4a322":"code","674bcc6c":"code","5e95a7b6":"code","51f1c01d":"code","88308acb":"code","bd42037e":"code","1e50f52a":"code","4fb7030a":"code","b048a536":"code","7af59048":"code","9c271417":"code","5d9c98c1":"code","9facdc90":"code","704e9341":"code","d9955eaa":"code","bd8a0591":"code","bfde0c1d":"code","cb02d99a":"code","6d2bb89a":"code","a3caf2b0":"code","d9e5395f":"code","23cde81b":"code","a25ab660":"code","7451afc3":"code","aea21d4a":"markdown"},"source":{"2b3c8fd8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d83a9d76":"import matplotlib.pyplot as plt \nimport seaborn as sns\nimport statsmodels.tsa.stattools as stattools","fcf4a322":"df = pd.read_csv('\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv')","674bcc6c":"df.head(3)","5e95a7b6":"fig, ax = plt.subplots(4, 1,figsize=(10,20))\nsns.countplot(x='Geography', data=df, ax=ax[0])\nsns.countplot(x='Gender', data=df, ax= ax[1])\nsns.countplot(y='Tenure', data=df,ax= ax[2])\nsns.distplot(df.Age, ax=ax[3])","51f1c01d":"fig, ax = plt.subplots(4, 1,figsize=(10,20))\nsns.countplot(x='NumOfProducts', data=df, ax=ax[0])\nsns.countplot(x='HasCrCard', data=df, ax= ax[1])\nsns.countplot(x='IsActiveMember', data=df,ax= ax[2])\nsns.countplot(x='Exited', data=df,ax= ax[3])","88308acb":"df.shape","bd42037e":"x_var = 'EstimatedSalary'\ngroupby_var = 'Geography'\ndf_agg = df.loc[:, [x_var, groupby_var]].groupby(groupby_var)\nvals = [df[x_var].values.tolist() for i, df in df_agg]\n\n# Draw\nplt.figure(figsize=(16,9), dpi= 80)\ncolors = [plt.cm.Spectral(i\/float(len(vals)-1)) for i in range(len(vals))]\nn, bins, patches = plt.hist(vals, 30, stacked=True, density=False, color=colors[:len(vals)])\n\n# Decoration\nplt.legend({group:col for group, col in zip(np.unique(df[groupby_var]).tolist(), colors[:len(vals)])})\nplt.title(f\"Stacked Histogram of ${x_var}$ colored by ${groupby_var}$\", fontsize=22)\nplt.xlabel(x_var)\nplt.ylabel(\"Frequency\")\nplt.ylim(0, 400)","1e50f52a":"x_var = 'Balance'\ngroupby_var = 'Geography'\ndf_agg = df.loc[:, [x_var, groupby_var]].groupby(groupby_var)\nvals = [df[x_var].values.tolist() for i, df in df_agg]\n\n# Draw\nplt.figure(figsize=(16,9), dpi= 80)\ncolors = [plt.cm.Spectral(i\/float(len(vals)-1)) for i in range(len(vals))]\nn, bins, patches = plt.hist(vals, 30, stacked=True, density=False, color=colors[:len(vals)])\n\n# Decoration\nplt.legend({group:col for group, col in zip(np.unique(df[groupby_var]).tolist(), colors[:len(vals)])})\nplt.title(f\"Stacked Histogram of ${x_var}$ colored by ${groupby_var}$\", fontsize=22)\nplt.xlabel(x_var)\nplt.ylabel(\"Frequency\")\nplt.ylim(0, 800)","4fb7030a":"x_var = 'CreditScore'\ngroupby_var = 'Geography'\ndf_agg = df.loc[:, [x_var, groupby_var]].groupby(groupby_var)\nvals = [df[x_var].values.tolist() for i, df in df_agg]\n\n# Draw\nplt.figure(figsize=(16,9), dpi= 80)\ncolors = [plt.cm.Spectral(i\/float(len(vals)-1)) for i in range(len(vals))]\nn, bins, patches = plt.hist(vals, 30, stacked=True, density=False, color=colors[:len(vals)])\n\n# Decoration\nplt.legend({group:col for group, col in zip(np.unique(df[groupby_var]).tolist(), colors[:len(vals)])})\nplt.title(f\"Stacked Histogram of ${x_var}$ colored by ${groupby_var}$\", fontsize=22)\nplt.xlabel(x_var)\nplt.ylabel(\"Frequency\")\nplt.ylim(0, 800)","b048a536":"x_var = 'CreditScore'\ngroupby_var = 'Gender'\ndf_agg = df.loc[:, [x_var, groupby_var]].groupby(groupby_var)\nvals = [df[x_var].values.tolist() for i, df in df_agg]\n\n# Draw\nplt.figure(figsize=(16,9), dpi= 80)\ncolors = [plt.cm.Spectral(i\/float(len(vals)-1)) for i in range(len(vals))]\nn, bins, patches = plt.hist(vals, 30, stacked=True, density=False, color=colors[:len(vals)])\n\n# Decoration\nplt.legend({group:col for group, col in zip(np.unique(df[groupby_var]).tolist(), colors[:len(vals)])})\nplt.title(f\"Stacked Histogram of ${x_var}$ colored by ${groupby_var}$\", fontsize=22)\nplt.xlabel(x_var)\nplt.ylabel(\"Frequency\")\nplt.ylim(0, 800)","7af59048":"x_var = 'EstimatedSalary'\ngroupby_var = 'Gender'\ndf_agg = df.loc[:, [x_var, groupby_var]].groupby(groupby_var)\nvals = [df[x_var].values.tolist() for i, df in df_agg]\n\n# Draw\nplt.figure(figsize=(16,9), dpi= 80)\ncolors = [plt.cm.Spectral(i\/float(len(vals)-1)) for i in range(len(vals))]\nn, bins, patches = plt.hist(vals, 30, stacked=True, density=False, color=colors[:len(vals)])\n\n# Decoration\nplt.legend({group:col for group, col in zip(np.unique(df[groupby_var]).tolist(), colors[:len(vals)])})\nplt.title(f\"Stacked Histogram of ${x_var}$ colored by ${groupby_var}$\", fontsize=22)\nplt.xlabel(x_var)\nplt.ylabel(\"Frequency\")\nplt.ylim(0, 400)","9c271417":"x_var = 'Balance'\ngroupby_var = 'Gender'\ndf_agg = df.loc[:, [x_var, groupby_var]].groupby(groupby_var)\nvals = [df[x_var].values.tolist() for i, df in df_agg]\n\n# Draw\nplt.figure(figsize=(16,9), dpi= 80)\ncolors = [plt.cm.Spectral(i\/float(len(vals)-1)) for i in range(len(vals))]\nn, bins, patches = plt.hist(vals, 30, stacked=True, density=False, color=colors[:len(vals)])\n\n# Decoration\nplt.legend({group:col for group, col in zip(np.unique(df[groupby_var]).tolist(), colors[:len(vals)])})\nplt.title(f\"Stacked Histogram of ${x_var}$ colored by ${groupby_var}$\", fontsize=22)\nplt.xlabel(x_var)\nplt.ylabel(\"Frequency\")\nplt.ylim(0, 800)","5d9c98c1":"country = df[['EstimatedSalary', 'Geography']].groupby('Geography').apply(lambda x: x.mean())\ncountry.sort_values('EstimatedSalary', inplace=True)\ncountry.reset_index(inplace=True)\n\nfig, ax = plt.subplots(figsize=(16,10), dpi= 80)\nax.hlines(y=country.index, xmin=11, xmax=26, color='gray', alpha=0.7, linewidth=1, linestyles='dashdot')\nax.scatter(y=country.index, x=country.EstimatedSalary, s=75, color='firebrick', alpha=0.7)\n\nax.set_title('Dot Plot for Country Average  EstimatedSalary', fontdict={'size':22})\nax.set_xlabel('EstimatedSalary')\nax.set_yticks(country.index)\nax.set_yticklabels(country.Geography.str.title(), fontdict={'horizontalalignment': 'right'})\nax.set_xlim(90000, 110000)\nplt.show()","9facdc90":"balan = df[['Balance', 'Geography']].groupby('Geography').apply(lambda x: x.mean())\nbalan.sort_values('Balance', inplace=True)\nbalan.reset_index(inplace=True)\n\nfig, ax = plt.subplots(figsize=(16,10), dpi= 80)\nax.hlines(y=balan.index, xmin=11, xmax=26, color='gray', alpha=0.7, linewidth=1, linestyles='dashdot')\nax.scatter(y=balan.index, x=balan.Balance, s=75, color='firebrick', alpha=0.7)\n\nax.set_title('Dot Plot for Country Average  Balance', fontdict={'size':22})\nax.set_xlabel('Balance')\nax.set_yticks(balan.index)\nax.set_yticklabels(balan.Geography.str.title(), fontdict={'horizontalalignment': 'right'})\nax.set_xlim(60000, 125000)\nplt.show()","704e9341":"df.head(3)","d9955eaa":"plt.figure(figsize=(12,10), dpi= 80)\nsns.heatmap(df.corr(), xticklabels=df.corr().columns, yticklabels=df.corr().columns, cmap='RdYlGn', center=0, annot=True)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","bd8a0591":"df.drop(['CustomerId', 'Surname'], axis = 1, inplace = True)","bfde0c1d":"X = df.iloc[:, :-1]\ny = df.iloc[:, -1].astype('float')\nX.head()","cb02d99a":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.3, random_state = 40)\nlen(y_train), len(y_val)","6d2bb89a":"X_train.reset_index(drop=True, inplace=True)\nX_val.reset_index(drop=True, inplace=True)\n\ny_train.reset_index(drop=True, inplace=True)\ny_val.reset_index(drop=True, inplace=True)","a3caf2b0":"categorical_cols = [col for col in df.select_dtypes(exclude='number').columns]\ncategorical_cols","d9e5395f":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\n\nX_train_categorical, X_val_categorical = pd.DataFrame(), pd.DataFrame()\n\nfor col in categorical_cols:\n    X_train_categorical[col] = label_encoder.fit_transform(X_train[col])\n    X_val_categorical[col] = label_encoder.transform(X_val[col])\n\nX_train.drop(categorical_cols, axis = 1, inplace = True)\nX_val.drop(categorical_cols, axis = 1, inplace=True)\n\nX_train = X_train.join(X_train_categorical)\nX_val = X_val.join(X_val_categorical)","23cde81b":"import xgboost as xgb\nfrom sklearn.metrics import mean_squared_error\nparams = {}\nparams['objective'] = 'binary:logistic'\nparams['eval_metric'] = 'logloss'\nparams['eta'] = 0.02\nparams['max_depth'] = 4\n\nd_train = xgb.DMatrix(X_train, label=y_train)\nd_valid = xgb.DMatrix(X_val, label=y_val)\n\nwatchlist = [(d_train, 'train'), (d_valid, 'valid')]\nmodel1 = xgb.cv(params, d_train,  num_boost_round=500, early_stopping_rounds=100)\nmodel = xgb.train(params, d_train, 400, watchlist, early_stopping_rounds=50, verbose_eval=10)","a25ab660":"model1.loc[30:,[\"train-logloss-mean\", \"test-logloss-mean\"]].plot()","7451afc3":"xgb.plot_importance(model)\nplt.rcParams['figure.figsize'] = [5, 5]\nplt.show()","aea21d4a":"#reference \n#https:\/\/www.kaggle.com\/duttasd28\/churn-imbalanced-multiple-models-best-89-5\n#https:\/\/www.kaggle.com\/anokas\/data-analysis-xgboost-starter-0-35460-lb"}}