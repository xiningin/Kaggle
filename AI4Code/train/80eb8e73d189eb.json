{"cell_type":{"5b7ad8bc":"code","8d4b71e3":"code","25b91653":"code","60d23ecd":"code","b357c8d0":"code","c867b660":"code","d88b0946":"code","fad11f06":"code","1d0dc6ce":"code","29f9b125":"code","ad176189":"code","1c94ea10":"code","72baa7fd":"code","5d5d401b":"code","88148c7a":"code","cdb51d68":"code","1fb3c7c1":"code","c92606a2":"code","08dd5a0f":"code","b02b4570":"code","c6ae0721":"code","7c9169f4":"code","73511f24":"code","0eb80c5f":"code","a3145dd4":"code","6aac90ea":"code","5090565a":"code","c5236421":"code","054d8cf0":"code","39711ce7":"code","23de8a5f":"code","dc80b208":"code","31b8c08f":"code","8f014c99":"code","124de7c1":"code","d9ff0a56":"code","81847a4c":"code","f7538e0d":"code","06c3e47c":"code","9a9de3e5":"code","61ae3b9e":"code","0ed9653f":"code","5a1cdadf":"code","6c51d100":"code","629481dc":"code","30845125":"code","4046db55":"code","42a195d1":"code","8118b897":"code","0b9df273":"code","aa12a1af":"code","d4f4b636":"code","235966e7":"code","fa432281":"code","2a80bd8f":"code","533c6c96":"code","e570ece5":"code","cac02c39":"code","cf360133":"code","4ff2ea41":"code","7b63db91":"markdown","b022d88c":"markdown","44234284":"markdown","044bdfd2":"markdown","9e65badf":"markdown","d105aa0b":"markdown","9972180d":"markdown","3ccb975a":"markdown","bbd4832e":"markdown","1e1da531":"markdown","e58eb4c8":"markdown","a5d06470":"markdown","08f19a26":"markdown","e379745f":"markdown","60e5948f":"markdown","d5fc2c20":"markdown","63151efc":"markdown","267d866d":"markdown","22d37761":"markdown","0948b047":"markdown","2c631b16":"markdown","b796d4cf":"markdown","a85d9b84":"markdown","04931a07":"markdown","91cb0e54":"markdown","5ae965f9":"markdown","82a066f6":"markdown"},"source":{"5b7ad8bc":"#@markdown <h3>\u2b05\ufe0f Click Here to Load Libraries (Important to Run)<\/h3>\n#@markdown <br><center><a href=\"#\"><img src='https:\/\/gifimage.net\/wp-content\/uploads\/2018\/04\/loading-gif-bootstrap-13.gif' height=\"300\" alt=\"Gdrive-logo\"\/><\/a><\/center>\n#@markdown <center><h2>Loading and Installing Important Libraries<\/h2><\/center><br>\n\nMODE = \"Use Without Drive\" #@param [\"MOUNT\", \"UNMOUNT\", \"Use Without Drive\"]\nDownload_Dataset = True #@param {type:\"boolean\"}\nIPython_Site = \"Kaggle\" #@param [\"Colab\", \"Kaggle\"]\n\n# Library_To_Import = \"All\" #@param [\"All\", \"File Upload\", \"Telegram Uploader\", \"Youtub Downloader\", \"Torrent Downloader\", \"Unzip\/UnRar\", \"Mega Downloader\"]\n#@markdown <br><h4><i>* Note - Always Run This Cell before Running Any Other Cell<\/i><\/h4>\n#@markdown <h4><i>* Note - Please Dont Change Anything If you are Not Sure<\/i><\/h4>\n\n# Importing Libraries\n!pip install wget\n# !pip install plotly_express\n!pip install --upgrade plotly\n!pip install --upgrade statsmodels\n!pip install pmdarima\n# Basic Libraries\nimport wget\nimport json , shutil , re , datetime , requests , cv2 , os , warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np\nimport time\nimport math\n# Plotting\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport matplotlib.dates as mdates\nfrom matplotlib.offsetbox import AnchoredText\nimport seaborn as sns\nimport plotly.offline as py\nimport plotly.express as px\nfrom folium import Map\nfrom folium.plugins import HeatMap\nfrom folium.plugins import MarkerCluster\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport statsmodels.api as sm\nfrom statsmodels.tools import eval_measures as eval\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.api import Holt, SimpleExpSmoothing, ExponentialSmoothing\nfrom statsmodels.tsa.ar_model import AutoReg, ar_select_order\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom pmdarima.arima import auto_arima\nfrom pmdarima.preprocessing import BoxCoxEndogTransformer , LogEndogTransformer\nfrom pmdarima.arima import AutoARIMA\nfrom statsmodels.tsa.forecasting.theta import ThetaModel\nfrom statsmodels.tsa.stattools import acf , pacf\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nplt.style.use('ggplot')\nsns.set_context(\"paper\")\n%matplotlib inline\n\n# Modelling\nfrom scipy import integrate\nfrom scipy import optimize\n\n# Map\nimport folium\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn import preprocessing\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nfrom fbprophet.plot import plot_components_plotly\nfrom IPython.display import Markdown\nfrom IPython.display import Image\nfrom IPython.display import clear_output\n\n# For LSTM \nfrom keras import backend as K\nfrom keras.models import Sequential, load_model\nfrom keras.layers import  RepeatVector, Reshape\nfrom keras.utils import plot_model\n\nfrom keras.optimizers import Adam\nfrom keras.layers import  Activation, add , GlobalMaxPooling1D,GlobalAveragePooling1D , Dense, Dropout, Embedding,Flatten, Conv1D, MaxPooling1D, LSTM , GRU, SpatialDropout1D ,Bidirectional ,Input , concatenate , TimeDistributed , Concatenate\nfrom keras import utils\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint\nfrom keras_preprocessing.text import tokenizer_from_json\nfrom keras.models import model_from_json ,Model\n\nif IPython_Site == 'Colab':\n  from google.colab import drive\n  drive.mount._DEBUG = False\nclear_output()\ndisplay(Markdown(\"<h1>Colab for Corona Virus Countinuous Updates<\/h1><br>\"))\n\ndef refine_address(Address , default = 'Download' , file = False , make_dir = True):\n  if file == False:\n    if Address == '':\n      Address = default\n    if Address[0] =='\/':\n      # If Absolute Path is Provided\n      if Address[-1] !='\/':\n        Address = Address + '\/'\n      else:\n        pass\n    # Else if Relative path is provided\n    elif os.path.exists('\/content\/drive\/My Drive\/'):\n      #If Drive is Mounted\n      Address = '\/content\/drive\/My Drive\/'+Address\n      if Address[-1] !='\/':\n        Address = Address + '\/'\n      else:\n        pass\n    else:\n      #Else if Drive is Not Mounted\n      Address = '\/content\/'+Address\n      if Address[-1] !='\/':\n        Address = Address + '\/'\n      else:\n        pass\n    if make_dir:\n      os.makedirs(Address, exist_ok=True)\n    else:\n      os.makedirs(Address, exist_ok=True)\n    return Address\n  else:\n    if Address[0] =='\/':\n      return Address\n    elif os.path.exists('\/content\/drive\/My Drive\/'):\n      return '\/content\/drive\/My Drive\/'+ Address\n    else:\n      return '\/content\/'+Address\n\n# if not os.path.exists('\/content\/drive\/'):\n#   drive.mount('\/content\/drive')\n\nif MODE == \"MOUNT\":\n  if not os.path.exists('\/content\/drive\/'):\n    drive.mount('\/content\/drive', force_remount=True)\n  File_Prefix = '\/content\/drive\/MyDrive\/COVID\/India\/'\n  display(Markdown(\"- <h4>Drive Mounted.....<\/h4><br>\"))\nelif MODE == \"UNMOUNT\":\n  try:\n    drive.flush_and_unmount()\n  except ValueError:\n    pass\n  get_ipython().system_raw(\"rm -rf \/root\/.config\/Google\/DriveFS\")\n  File_Prefix = '\/content\/'\n  display(Markdown(\"- <h4>Drive Unmounted.....<\/h4><br>\"))\nelse:\n  if IPython_Site == 'Colab':\n    File_Prefix = '\/content\/'\n  else:\n    File_Prefix = '\/kaggle\/'\n  display(Markdown(\"- <h4>Importing Libraries Done.....<\/h4><br>\"))\nFile_Prefix = refine_address(File_Prefix)\n\nif Download_Dataset:\n  wget.download('https:\/\/api.covid19india.org\/csv\/latest\/states.csv',File_Prefix+'states_.csv')\n  wget.download('https:\/\/api.covid19india.org\/csv\/latest\/districts.csv',File_Prefix+'districts_.csv')\n  wget.download('https:\/\/covid.ourworldindata.org\/data\/ecdc\/full_data.csv',File_Prefix+'Covid_full_data.csv')\n  wget.download('https:\/\/covid.ourworldindata.org\/data\/owid-covid-data.csv',File_Prefix+'Covid_data.csv')\n  wget.download('https:\/\/api.covid19india.org\/misc.json',File_Prefix+'Populations.json')\n  wget.download('https:\/\/raw.githubusercontent.com\/terminate9298\/Corona-Visualization-and-Prediction\/main\/Dataset\/centroids.csv',File_Prefix+'centroids.csv')\n  wget.download('https:\/\/raw.githubusercontent.com\/terminate9298\/Corona-Visualization-and-Prediction\/main\/Dataset\/tableconvert_csv_o4ycku.csv',File_Prefix+'tableconvert_csv_o4ycku.csv')\n\ndisplay(Markdown(\"- <h4>Files Downloaded Successfully.....<\/h4><br>\"))\n\nstates = pd.read_csv(File_Prefix+'states_.csv')\ndistricts = pd.read_csv(File_Prefix+'districts_.csv')\ncentroids = pd.read_csv(File_Prefix+'centroids.csv')\nstates = pd.concat([pd.DataFrame([['2020-03-01','Kerala',0,0,0,0,0]],columns = states.columns) , states] ,axis = 0)\nstates.sort_values(by = ['Date'])\nstates.fillna(0 , inplace = True)\ndistricts.fillna(0 , inplace = True)\nstates['Active'] = states['Confirmed'] - (states['Recovered'] + states['Deceased'])\nstates['Month'] = states['Date'].apply(lambda x: x.split('-')[1])\nstates['Month'] = states['Month'].astype(int)\nstates = states[states['Month']>2]\ndate_unique = states.Date.unique()\ndate_unique = date_unique[:-1]\nWorld_ = pd.read_csv(File_Prefix+'Covid_data.csv')\nWorld_.fillna(0,inplace = True)\nWorld_['date'] = pd.to_datetime(World_['date'] , format = '%Y-%m-%d')\nbasedate = pd.Timestamp(World_.date.min())\nWorld_['Days_Passed'] = (World_['date'] - basedate)\/86400000000000\nWorld_['date'] = World_['date'].astype(str)\nWorld_['Days_Passed'] = World_['Days_Passed'].astype(int)\n\nworld_locations = pd.read_csv(File_Prefix+'tableconvert_csv_o4ycku.csv')\nworld_locations.columns = ['Country', 'Alpha-2 code', 'iso_code', 'Numeric code', 'Latitude (average)', 'Longitude (average)']\nWorld_ = World_.merge(world_locations , how = 'left' , on = ['iso_code'])\n\ndisplay(Markdown(\"- <h4>World Data Processed...<\/h4><br>\"))\nworld_dates_unique = World_.date.unique()\n\nCompleted_ = []\nDistrict_ = []\nfor st in states['State'].unique():\n  Arr_ = states[states.State == st].values\n  Confirmed_ = 0\n  Recovered_ = 0\n  Deceased_ = 0\n  Other_ = 0 \n  Tested_ = 0\n  Active_ = 0\n  K_ = 0\n  dyas = 0\n  for i in date_unique:\n    if i in Arr_[:,0]:\n      Completed_.append([\n                         i,\n                         st,\n                         Arr_[K_,2],#Confirmed\n                         Arr_[K_,3],#Recovered\n                         Arr_[K_,4],#Deceased\n                         Arr_[K_,5],#Other\n                         Arr_[K_,6],#Tested\n                         Arr_[K_,7],#Active\n                         Arr_[K_,2] - Confirmed_,#Confirmed\n                         Arr_[K_,3] - Recovered_,#Recovered\n                         Arr_[K_,4] - Deceased_,#Deceased\n                         Arr_[K_,5] - Other_,#Other\n                         Arr_[K_,6] - Tested_,#Tested\n                         Arr_[K_,7] - Active_, #Active\n                         dyas #Days Passes since\n      ])\n      Confirmed_ = Arr_[K_,2]\n      Recovered_ = Arr_[K_,3]\n      Deceased_ = Arr_[K_,4]\n      Other_ = Arr_[K_,5]\n      Tested_ = Arr_[K_,6]\n      Active_ = Arr_[K_,7]\n      K_ += 1\n      dyas +=1\n    else:\n      Completed_.append([\n                         i,\n                         st,\n                         Confirmed_,#Confirmed\n                         Recovered_,#Recovered\n                         Deceased_,#Deceased\n                         Other_,#Other\n                         Tested_,#Tested\n                         Active_,#Active\n                         0,#Confirmed\n                         0,#Recovered\n                         0,#Deceased\n                         0,#Other\n                         0,#Tested\n                         0,#Active\n                         dyas\n      ])\n      dyas += 1\nCompleted_ = pd.DataFrame(np.array(Completed_) , columns = ['Date', 'State', 'Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_', 'Tested_', 'Active_','Days_Passed'])\nfor i in ['Confirmed', 'Recovered', 'Deceased', 'Other',\n       'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_',\n       'Tested_', 'Active_', 'Days_Passed']:\n  Completed_[i] = Completed_[i].astype(str).astype(np.float64)\nCompleted_['Negative'] = Completed_['Tested_'] - Completed_['Confirmed_']\nCompleted_[\"Death Rate (per 100)\"] = np.round(100*Completed_[\"Deceased\"]\/Completed_[\"Confirmed\"],2)\nCompleted_[\"Cure Rate (per 100)\"] = np.round(100*Completed_[\"Recovered\"]\/Completed_[\"Confirmed\"],2)\nCompleted_.fillna(0,inplace = True)\nIndia_ = Completed_[Completed_.State == 'India']\n# Completed_ = Completed_[Completed_.State != 'India']\nCompleted_['Month'] = Completed_['Date'].apply(lambda x: x.split('-')[1])\nCompleted_['Month'] = Completed_['Month'].astype(int)\nIndia_['Date'] = pd.to_datetime(India_['Date'] , format = '%Y-%m-%d')\nIndia_['Date'] = India_['Date'].dt.strftime('%m\/%d\/%Y')\ndef clear_states(text):\n  text = re.sub(r\"Uttar Pradesh\", \"UP\", text)\n  text = re.sub(r\"Tamil Nadu\", \"TN\", text)\n  text = re.sub(r\"Jammu and Kashmir\", \"J&K\", text)\n  text = re.sub(r\"Andhra Pradesh\", \"Andra P\", text)\n  text = re.sub(r\"Himachal Pradesh\", \"HP\", text)\n  text = re.sub(r\"Madhya Pradesh\", \"MP\", text)\n  text = re.sub(r\"Andaman and Nicobar Islands\", \"A&N\", text)\n  text = re.sub(r\"Arunachal Pradesh\", \"Arun P\", text)\n  text = re.sub(r\"Dadra and Nagar Haveli and Daman and Diu\", \"D&D\", text)\n  text = re.sub(r\"State Unassigned\", \"Other\", text)\n  return text\nwith open(File_Prefix+'Populations.json') as f:\n  data = json.load(f)\ndistrict_populations = pd.DataFrame(data['district_meta_data'])\nstate_populations = pd.DataFrame(data['state_meta_data'])\nstate_populations.columns = ['Abbreviation', 'State No', 'Population', 'State']\ndistrict_populations.columns = ['District', 'District Key', 'Population', 'SL No', 'State', 'State Code']\n\n\nCompleted_ = Completed_.merge(state_populations , on=['State'] , how = 'left')\nIndia_ = India_.merge(state_populations , on=['State'] , how = 'left')\nCompleted_['Population'] = Completed_['Population'].replace('',np.NaN).astype(np.float32)\nCompleted_['Population'].fillna(Completed_['Population'].mean() , inplace= True)\nIndia_['Population'] = India_['Population'].replace('',np.NaN).astype(np.float32)\nIndia_['Population'].fillna(India_['Population'].mean() , inplace= True)\n\nCompleted_['State'] = Completed_['State'].apply(lambda x: clear_states(x))\nstates_list = Completed_.State.unique()\nIndia_ = India_.head(India_.shape[0]-1)\n\nIndia_.reset_index(drop = True , inplace = True)\ndisplay(Markdown(\"- <h4>India State Level Data Processed...<\/h4><br>\"))\n\n\ndistricts['Date'] = pd.to_datetime(districts['Date'], format = '%Y-%m-%d')\ndistricts['Days_Passed'] = districts['Date'] - districts['Date'].min()\ndistricts['Days_Passed'] = ((districts['Days_Passed'].values)\/86400000000000).astype(int)\ndistricts.sort_values(by = ['District','Date'] ,inplace = True)\ndistricts['Active'] = districts['Confirmed'] - (districts['Recovered']+districts['Deceased'])\nDistrict_ = []\nfor s,st in districts[['State','District']].drop_duplicates().values:\n  Arr_ = districts[districts.State == s]\n  Arr_ = Arr_[Arr_.District == st].values\n  Confirmed_ = 0\n  Recovered_ = 0\n  Deceased_ = 0\n  Other_ = 0 \n  Tested_ = 0\n  Active_ = 0\n  for K_ in range(len(Arr_)-1):\n    District_.append([\n                          Arr_[K_,0],#Date\n                          Arr_[K_,1],#State\n                          Arr_[K_,2],#District\n                          Arr_[K_,3],#Confirmed\n                          Arr_[K_,4],#Recovered\n                          Arr_[K_,5],#Deceased\n                          Arr_[K_,6],#Other\n                          Arr_[K_,7],#Tested\n                          Arr_[K_,9],#Active\n                          Arr_[K_,3] - Confirmed_,#Confirmed\n                          Arr_[K_,4] - Recovered_,#Recovered\n                          Arr_[K_,5] - Deceased_,#Deceased\n                          Arr_[K_,6] - Other_,#Other\n                          Arr_[K_,7] - Tested_,#Tested\n                          Arr_[K_,9] - Active_, #Active\n                          Arr_[K_,8],#Days Passed\n        ])\n    Confirmed_ = Arr_[K_,3]\n    Recovered_ = Arr_[K_,4]\n    Deceased_ = Arr_[K_,5]\n    Other_ = Arr_[K_,6]\n    Tested_ = Arr_[K_,7]\n    Active_ = Arr_[K_,9]\n\nDistrict_ = pd.DataFrame(np.array(District_) , columns = ['Date', 'State', 'District', 'Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_', 'Tested_', 'Active_','Days_Passed'])\nfor i in ['Confirmed', 'Recovered', 'Deceased', 'Other',\n       'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_',\n       'Tested_', 'Active_', 'Days_Passed']:\n  District_[i] = District_[i].astype(str).astype(np.float64)\nDistrict_['Negative'] = District_['Tested_'] - District_['Confirmed_']\nDistrict_[\"Death Rate (per 100)\"] = np.round(100*District_[\"Deceased\"]\/District_[\"Confirmed\"],2)\nDistrict_[\"Cure Rate (per 100)\"] = np.round(100*District_[\"Recovered\"]\/District_[\"Confirmed\"],2)\nDistrict_.fillna(0,inplace = True)\n# Completed_ = Completed_[Completed_.State != 'India']\nDistrict_['Month'] = District_['Date'].astype(str).apply(lambda x: x.split('-')[1])\nDistrict_['Month'] = District_['Month'].astype(int)\n\n\nDistrict_ = District_.merge(district_populations , on=['District','State'] , how = 'left')\n\nstate_Cooridinates = [\n ['Goa','Unknown' , 15.2993, 74.1240],\n ['Andaman and Nicobar Islands','Unknown' , 11.7401 , 92.6586],\n ['Manipur','Unknown' , 24.6637, 93.9063],\n ['Assam','Unknown' , 26.2006 , 92.9376],\n ['Chandigarh','Unknown' , 30.7333, 76.7794],\n ['Telangana','Unknown' , 17.3850, 78.4867],\n ['Delhi','Unknown' , 28.7041, 77.1025],\n ['Sikkim','Unknown' ,27.5330, 88.5122],\n]\ncentroids = pd.concat([centroids , pd.DataFrame(state_Cooridinates , columns = ['State','District','Latitude','Longitude'])])\nDistrict_ = District_.merge(centroids , on = ['District','State'], how = 'left')\nDistrict_['Population'] = District_['Population'].replace('',np.NaN).astype(np.float32)\nDistrict_['Population'].fillna(District_['Population'].mean() , inplace= True)\n\nDistrict_.index = pd.to_datetime(District_['Date'])\nIndia_.index = pd.to_datetime(India_['Date'])\nCompleted_.index = pd.to_datetime(Completed_['Date'])\nWorld_.index = pd.to_datetime(World_['date'])\n\nIndia_['Month'] = India_.index.month_name() \nCompleted_['Month'] = Completed_.index.month_name() \nDistrict_['Month'] = District_.index.month_name() \nWorld_['Month'] = World_.index.month_name() \n\ndisplay(Markdown(\"- <h4>India District Level Data Processed...<\/h4><br>\"))\n\nSup_Title = \"Corona Virus\"\nStyle_Color = \"rocket\"\nPlot_Style = \"fast\" \nSNS_Context = \"poster\" \nSNS_Style = \"ticks\" \nFormat_To_Save = \"jpg\"\n\n\nGraphs_Width = 29 \nGraphs_Height = 19 \nSNS_Font_Scale = 0.75\nPlot_Saturation = 0.86 \nPlot_Alpha = 0.85 \nSubPlot_Top = 0.92 \n\nplt.style.use(Plot_Style)\nsns.set_context(SNS_Context , font_scale = SNS_Font_Scale)\nsns.set_style(SNS_Style)\nplt.tight_layout()\n\nStyle_Palettes = sns.color_palette(Style_Color)\nsns.color_palette(Style_Color)\ndisplay(Markdown(\"- <h4>Setting To Default...<\/h4><br>\"))\n\ndisplay(Markdown(\"- <h4>All Files Preprocessed Successfully.....<\/h4><br>\"))","8d4b71e3":"#@markdown <h3>\u2b05\ufe0f Click Here to Change Settings<\/h3>\n#@markdown <br><center><img src='https:\/\/external-content.duckduckgo.com\/iu\/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.OVRVW9ZaxOE3sHmsX7_bMAHaHa%26pid%3DApi&f=1' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Setting the Configuration<\/h2><\/center><br>\nSup_Title = \"Corona Virus\" #@param {type:\"string\"}\nStyle_Color = \"rocket_r\" #@param [\"tab10\" , \"deep\", \"muted\", \"pastel\", \"bright\", \"dark\", \"colorblind\" , \"hls\" , \"husl\" , \"Set2\", \"Paired\" , \"rocket\", \"mako\", \"flare\", \"crest\" , \"magma\" , \"viridis\" , \"rocket_r\" , \"cubehelix\" , \"ch:start=.2,rot=-.3\" , \"ch:s=-.2,r=.6\" , \"dark:salmon_r\" , \"Blues\" , \"YlOrBr\" , \"vlag\" , \"icefire\" , \"Spectral\" , \"coolwarm\"]\nPlot_Style = \"fast\" #@param ['Solarize_Light2', '_classic_test_patch', 'bmh', 'classic', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'seaborn', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark', 'seaborn-dark-palette', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook', 'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white', 'seaborn-whitegrid', 'tableau-colorblind10']\nSNS_Context = \"poster\" #@param ['notebook','paper','talk','poster']\nSNS_Style = \"ticks\" #@param ['darkgrid', 'whitegrid', 'dark', 'white', 'ticks']\nFormat_To_Save = \"jpg\" #@param [\"jpg\", \"png\", \"jpeg\", \"eps\", \"pdf\", \"svg\", \"raw\", \"rgba\", \"tif\", \"tiff\"]\n\n\nGraphs_Width = 29 #@param {type:\"slider\", min:0, max:100, step:1}\nGraphs_Height = 19 #@param {type:\"slider\", min:0, max:100, step:1}\nSNS_Font_Scale = 0.75 #@param {type:\"slider\", min:0, max:3, step:0.05}\nPlot_Saturation = 0.86 #@param {type:\"slider\", min:0, max:1, step:0.01}\nPlot_Alpha = 0.85 #@param {type:\"slider\", min:0, max:1, step:0.01}\nSubPlot_Top = 0.92 #@param {type:\"slider\", min:0, max:1, step:0.01}\n\nplt.style.use(Plot_Style)\nsns.set_context(SNS_Context , font_scale = SNS_Font_Scale)\nsns.set_style(SNS_Style)\nplt.tight_layout()\ndisplay(Markdown(\"<h1>Using The Color Palatte<\/h1>\"))\n\nStyle_Palettes = sns.color_palette(Style_Color)\nsns.color_palette(Style_Color)","25b91653":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/image.flaticon.com\/icons\/png\/512\/2037\/2037098.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Corona Virus on World Map with HeatMap of Indian Districts<\/h2><\/center><br>\n\nType_Of_HeatMap = \"Confirmed\" #@param [\"Effected_Districts\",'Confirmed', 'Recovered', 'Deceased','Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_','Other_', 'Tested_', 'Active_', 'Days_Passed', 'Negative', 'Death Rate (per 100)', 'Cure Rate (per 100)','Population']\nDate = \"2020-12-20\" #@param {type:\"date\"}\n\nif Date not in District_['Date'].astype(str).unique():\n  Date = District_['Date'].max()\n\ndata = District_[District_['Date'] == Date].dropna()\n\nif Type_Of_HeatMap == \"Effected_Districts\":\n  m = folium.Map(location=data[['Latitude', 'Longitude']].mean().values,width=\"%100\",height=\"%100\", zoom_start=6)\n  m.add_children(HeatMap(data[['Latitude', 'Longitude']].values))\n\nelse:\n  plt_by = Type_Of_HeatMap\n  m = folium.Map(location=data[['Latitude', 'Longitude']].mean().values,width=\"%100\",height=\"%100\", zoom_start=6)\n  m.add_children(HeatMap(data[['Latitude', 'Longitude',plt_by]].values))\nmarker_cluster = MarkerCluster().add_to(m)\nfor i in range(data.shape[0]):\n  rw = data.iloc[i]\n  tooltip = \"District:{}<br> {} Cases: {}<br> Click for more\".format(rw[\"District\"], plt_by.replace('_',' (Daily Cases)').title(),rw[plt_by])\n  location = [rw['Latitude'] , rw['Longitude']]\n  folium.Marker(location, \n                popup= \"District : {}<br>State : {}<br>Population : {}<br>Confirmed Cases : {}<br>Recovered Cases : {}<br>Deceased Cases : {}<br>Active Cases : {}<br>New Confirmed Cases : {}<br>New Recovered Cases : {}<br>New Deceased Cases : {}<br>Cure Rate (per 100) : {}<br>Death Rate (per 100) : {}\".format(rw['District'],rw['State'],rw['Population'], rw['Confirmed'],rw['Recovered'],rw['Deceased'],rw['Active'],rw['Confirmed_'],rw['Recovered_'],rw['Deceased_'],rw['Cure Rate (per 100)'],rw['Death Rate (per 100)']) , \n                tooltip=tooltip).add_to(marker_cluster)\ndata = World_[World_['date'] == Date].dropna()\nfor i in range(data.shape[0]):\n  rw = data.iloc[i]\n  tooltip = \"Country:{}<br>Total Cases: {}<br> Click for more\".format(rw[\"location\"], rw['total_cases'] )\n  location = [rw['Latitude (average)'] , rw['Longitude (average)']]\n  folium.Marker(location, \n                popup= \"Country : {}<br>Total Cases : {}<br>New Cases : {}<br>Total Death Cases : {}<br>New Death Cases : {}\".format(rw['location'],rw['total_cases'],rw['new_cases'], rw['total_deaths'],rw['new_deaths']) , \n                tooltip=tooltip).add_to(marker_cluster)\nm\n  ","60d23ecd":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn2.iconfinder.com\/data\/icons\/coronavirus-118\/82\/coronavirus_corona-15-512.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Plot Corona Virus Cases in Countries of World (Tabular)<\/h2><\/center><br>\nSort_By = \"total_cases\" #@param ['total_cases','total_cases_per_million', 'new_cases','new_cases_per_million','total_deaths','total_deaths_per_million', 'new_deaths','new_deaths_per_million']\nPlot_Top = 10 #@param {type:\"slider\", min:1, max:30, step:1}\nDate = \"2020-12-19\" #@param {type:\"date\"}\n\n# Date = '2020-'+Plot_Month.zfill(2)+'-'+Plot_Date.zfill(2)\nif Date not in world_dates_unique:\n  Date = World_['date'].max()\n\ndisplay(Markdown(\"<h2> COUNTRY WISE CONFIRMED, DEATH AND CURED CASES of 2019-nCoV AS OF {}<\/h2>\".format(Date)))\ntemp = World_[World_['location']!='World'].reset_index(drop = True)\ntemp[temp['date'] == Date][['location','total_cases','total_cases_per_million', 'new_cases','new_cases_per_million','total_deaths','total_deaths_per_million', 'new_deaths','new_deaths_per_million']]\\\n                        .sort_values(Sort_By, ascending= False).fillna(0)\\\n                        .iloc[:Plot_Top].style\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"total_cases\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"total_cases_per_million\"])\\\n                        .background_gradient(cmap='bone_r',subset=[\"total_deaths\"])\\\n                        .background_gradient(cmap='bone',subset=[\"total_deaths_per_million\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"new_cases\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"new_cases_per_million\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"new_deaths\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"new_deaths_per_million\"])\\","b357c8d0":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn0.iconfinder.com\/data\/icons\/coronavirus-88\/64\/worldwide-global-world-virus-covid-Corona_virus-512.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Plot Corona Virus Cases in World (Bar Plot)<\/h2><\/center><br>\n\nPlot_Column = \"total_cases\" #@param ['total_cases', 'new_cases','new_cases_smoothed', 'total_deaths', 'new_deaths', 'new_deaths_smoothed', 'total_cases_per_million', 'new_cases_per_million', 'new_cases_smoothed_per_million', 'total_deaths_per_million', 'new_deaths_per_million', 'new_deaths_smoothed_per_million', 'reproduction_rate', 'icu_patients', 'icu_patients_per_million', 'hosp_patients', 'hosp_patients_per_million', 'weekly_icu_admissions', 'weekly_icu_admissions_per_million', 'weekly_hosp_admissions','weekly_hosp_admissions_per_million', 'total_tests', 'new_tests', 'total_tests_per_thousand', 'new_tests_per_thousand', 'new_tests_smoothed', 'new_tests_smoothed_per_thousand', 'tests_per_case', 'positive_rate', 'tests_units', 'stringency_index', 'population']\n#Plot_Month = \"12\" #@param ['3', '4', '5', '6', '7', '8', '9', '10', '11', '12']\n#Plot_Date = \"9\" #@param ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30']\nPlot_Only = 13 #@param {type:\"slider\", min:0, max:100, step:1}\nDate = \"2020-12-19\" #@param {type:\"date\"}\n\n\n# Date = '2020-'+Plot_Month.zfill(2)+'-'+Plot_Date.zfill(2)\nif Date not in world_dates_unique:\n  display(Markdown('<h5> Invalid Date Encountered.. <br>Setting Date to last Date<\/h5>'))\n  time.sleep(2)\n  Date = World_['date'].max()\n\ndisplay(Markdown(\"<center><h2>Bar Plot for Top {} Countries with Highest {} of SARS-CoV-2 On {} \\n<\/h2><\/center>\".format(Plot_Only , Plot_Column.replace('_',' ').title() , Date)))\n\nstate_cases = World_[World_.date == Date]\nstate_cases = state_cases[state_cases['location']!='World']\nstate_cases=state_cases.sort_values(Plot_Column, ascending= False)\ntotal_cases = state_cases[Plot_Column].sum()\n\nstate_cases=state_cases.head(int(Plot_Only))\n\nplt.figure(figsize=(Graphs_Width,Graphs_Height))\nax = plt.subplot(1,1,1)\nplt.suptitle(Sup_Title, fontsize = 29)\nplt.title('\\nBar Plot for Top {} Countries with Highest {} of SARS-CoV-2 On {} \\n'.format(Plot_Only , Plot_Column.replace('_',' ').title() , Date) , fontsize = 19)\n\ngraph = sns.barplot(data=state_cases,y='location',x= Plot_Column , saturation = Plot_Saturation , alpha = Plot_Alpha, palette =Style_Color, label = Plot_Column+' Cases' , ci = 'sd' , orient = 'h')\nplt.xlim(0,state_cases[Plot_Column].max()+state_cases[Plot_Column].max()\/10 )\n\nplt.ylabel('Countries ')\nplt.xlabel('Number of Cases')\nplt.legend(loc = 8 , fontsize = 16)\nanchored_text = AnchoredText(\"Column: {}\\nDate : {}\\nTotal Cases (Sum): {}\".format(Plot_Column,state_cases.date.unique()[0] ,int(total_cases)), borderpad=1.0, pad = 1.0, loc=7 , frameon= True )\nax.add_artist(anchored_text)\n# plt.text(0.95, 0.01, 'colored text in axes coords',\n#         verticalalignment='bottom', horizontalalignment='right',\n#         color='green', fontsize=15)\nfor p in graph.patches[:int(Plot_Only)]:\n  _x = p.get_x() + p.get_width() \n  _y = p.get_y() + p.get_height()\/2 + float(0.2)\n  value = ((int(p.get_width())\/total_cases)*100)\n  if np.isnan(value):\n    value = 0.0\n  graph.text(_x , _y , ' {:.2f}%'.format(value) , ha = 'left', color = sns.color_palette('rocket')[1])\nplt.subplots_adjust(top=SubPlot_Top)\n\nplt.savefig(File_Prefix+'World Bar Plot on {} _{}.{}'.format(Date , time.time() , Format_To_Save) , bbox_inches = 'tight')\n","c867b660":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='http:\/\/cdn.onlinewebfonts.com\/svg\/img_569508.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Plot Corona Virus Cases in Country with Polynomial Regression<\/h2><\/center><br>\nPlot_Column = \"new_cases\" #@param ['total_cases', 'new_cases','new_cases_smoothed', 'total_deaths', 'new_deaths', 'new_deaths_smoothed', 'total_cases_per_million', 'new_cases_per_million', 'new_cases_smoothed_per_million', 'total_deaths_per_million', 'new_deaths_per_million', 'new_deaths_smoothed_per_million', 'reproduction_rate', 'icu_patients', 'icu_patients_per_million', 'hosp_patients', 'hosp_patients_per_million', 'weekly_icu_admissions', 'weekly_icu_admissions_per_million', 'weekly_hosp_admissions','weekly_hosp_admissions_per_million', 'total_tests', 'new_tests', 'total_tests_per_thousand', 'new_tests_per_thousand', 'new_tests_smoothed', 'new_tests_smoothed_per_thousand', 'tests_per_case', 'positive_rate', 'tests_units', 'stringency_index', 'population', 'population_density', 'median_age', 'aged_65_older', 'aged_70_older', 'gdp_per_capita', 'extreme_poverty', 'cardiovasc_death_rate', 'diabetes_prevalence', 'female_smokers', 'male_smokers', 'handwashing_facilities', 'hospital_beds_per_thousand', 'life_expectancy', 'human_development_index']\nLocation = \"United States\" #@param [\"Aruba\", \"Afghanistan\", \"Angola\", \"Anguilla\", \"Albania\", \"Andorra\",\"United Arab Emirates\", \"Argentina\", \"Armenia\",\"Antigua and Barbuda\", \"Australia\", \"Austria\", \"Azerbaijan\",\"Burundi\", \"Belgium\", \"Benin\", \"Bonaire Sint Eustatius and Saba\",\"Burkina Faso\", \"Bangladesh\", \"Bulgaria\", \"Bahrain\", \"Bahamas\",\"Bosnia and Herzegovina\", \"Belarus\", \"Belize\", \"Bermuda\",\"Bolivia\", \"Brazil\", \"Barbados\", \"Brunei\", \"Bhutan\", \"Botswana\",\"Central African Republic\", \"Canada\", \"Switzerland\", \"Chile\",\"China\", \"Cameroon\",\"Democratic Republic of Congo\", \"Congo\", \"Colombia\", \"Comoros\",\"Cape Verde\", \"Costa Rica\", \"Cuba\", \"Curacao\", \"Cayman Islands\",\"Cyprus\", \"Czech Republic\", \"Germany\", \"Djibouti\", \"Dominica\",\"Denmark\", \"Dominican Republic\", \"Algeria\", \"Ecuador\", \"Egypt\",\"Eritrea\", \"Western Sahara\", \"Spain\", \"Estonia\", \"Ethiopia\",\"Finland\", \"Fiji\", \"Falkland Islands\", \"France\", \"Faeroe Islands\",\"Gabon\", \"United Kingdom\", \"Georgia\", \"Guernsey\", \"Ghana\",\"Gibraltar\", \"Guinea\", \"Gambia\", \"Equatorial Guinea\", \"Greece\", \"Grenada\", \"Greenland\", \"Guatemala\",\"Guam\", \"Guyana\", \"Hong Kong\", \"Honduras\", \"Croatia\", \"Haiti\",\"Hungary\", \"Indonesia\", \"Isle of Man\", \"India\", \"Ireland\", \"Iran\",\"Iraq\", \"Iceland\", \"Israel\", \"Italy\", \"Jamaica\", \"Jersey\",\"Jordan\", \"Japan\", \"Kazakhstan\", \"Kenya\", \"Kyrgyzstan\", \"Cambodia\", \"Saint Kitts and Nevis\", \"South Korea\", \"Kuwait\", \"Laos\",\"Lebanon\", \"Liberia\", \"Libya\", \"Saint Lucia\", \"Liechtenstein\",\"Sri Lanka\", \"Lesotho\", \"Lithuania\", \"Luxembourg\", \"Latvia\",\"Morocco\", \"Monaco\", \"Moldova\", \"Madagascar\", \"Maldives\", \"Mexico\",\"Marshall Islands\", \"Macedonia\", \"Mali\", \"Malta\", \"Myanmar\",\"Montenegro\", \"Mongolia\", \"Northern Mariana Islands\", \"Mozambique\",\"Mauritania\", \"Montserrat\", \"Mauritius\", \"Malawi\", \"Malaysia\",\"Namibia\", \"New Caledonia\", \"Niger\", \"Nigeria\", \"Nicaragua\",\"Netherlands\", \"Norway\", \"Nepal\", \"New Zealand\", \"Oman\",\"Pakistan\", \"Panama\", \"Peru\", \"Philippines\", \"Papua New Guinea\",\"Poland\", \"Puerto Rico\", \"Portugal\", \"Paraguay\", \"Palestine\",\"French Polynesia\", \"Qatar\", \"Romania\", \"Russia\", \"Rwanda\",\"Saudi Arabia\", \"Sudan\", \"Senegal\", \"Singapore\", \"Solomon Islands\",\"Sierra Leone\", \"El Salvador\", \"San Marino\", \"Somalia\", \"Serbia\",\"South Sudan\", \"Sao Tome and Principe\", \"Suriname\", \"Slovakia\",\"Slovenia\", \"Sweden\", \"Swaziland\" ,\"Seychelles\", \"Syria\", \"Turks and Caicos Islands\", \"Chad\", \"Togo\",\"Thailand\", \"Tajikistan\", \"Timor\", \"Trinidad and Tobago\",\"Tunisia\", \"Turkey\", \"Taiwan\", \"Tanzania\", \"Uganda\", \"Ukraine\",\"Uruguay\", \"United States\", \"Uzbekistan\", \"Vatican\",\"Saint Vincent and the Grenadines\", \"Venezuela\",\"British Virgin Islands\", \"United States Virgin Islands\",\"Vietnam\", \"Vanuatu\", \"Wallis and Futuna\", \"Kosovo\", \"Yemen\",\"South Africa\", \"Zambia\", \"Zimbabwe\", \"World\", \"International\"]\nApply_Rolling_Mean = 4 #@param {type:\"slider\", min:1, max:30, step:1}\nRegression_Power = 4 #@param {type:\"slider\", min:0, max:20, step:1}\nTrain_on_days_from = 20 #@param {type:\"slider\", min:20, max:300, step:1}\nPredict_of_future_days = 15 #@param {type:\"slider\", min:0, max:200, step:1}\nPlot_Lib = \"MatplotLib\" #@param [\"Plotly\", \"MatplotLib\"]\nBar_Plot = 25 #@param {type:\"slider\", min:0, max:30, step:1}\nLine_Plot = True #@param {type:\"boolean\"}\nUse_Log = True #@param {type:\"boolean\"}\nDate = 'date'\ndisplay(Markdown(\"<center><h2>Time Series Plot of {} for {} of SARS-CoV-2 \\n<\/h2><\/center>\".format(Location , Plot_Column.replace('_',' ').title())))\n\nplot_color = list(sns.color_palette(Style_Color,n_colors=2).as_hex())\ndata = World_[World_.location == Location]\ntimes = pd.date_range(data[Date].min(), periods = data.shape[0]+Predict_of_future_days , freq='D')\n\nif Use_Log:\n  data[Plot_Column] = np.log1p(data[Plot_Column])\nbar_data = data.resample('M').mean()\nif Plot_Lib == 'MatplotLib':\n  plt.figure(figsize=(Graphs_Width,Graphs_Height))\n\n  # Bar Plot\n  if Bar_Plot:\n    plt.bar(bar_data.index,bar_data[Plot_Column], align = 'edge',width = -Bar_Plot , linewidth = 0 , color = list(sns.color_palette(Style_Color,n_colors=len(bar_data[Plot_Column].values)).as_hex()) , alpha = .9 ,label = 'Monthly Average')\n  #Applying Rolling Mean\n  if Apply_Rolling_Mean > 1:\n    data[Plot_Column] = data[Plot_Column].rolling(Apply_Rolling_Mean, min_periods = 1).mean()\n  # Line Plot of Data\n  if Line_Plot:\n    plt.plot(data[Plot_Column], label = 'Confirmed {} (per day)'.format(Plot_Column.replace('_',' ').title()) , color = plot_color[0] )\n  # Applying Regression Power\n  if Regression_Power:\n    model = np.poly1d(np.polyfit(data['Days_Passed'].values[Train_on_days_from-20:], data[Plot_Column].values[Train_on_days_from-20:], Regression_Power))\n    polyline = np.linspace(Train_on_days_from, World_['Days_Passed'].max()+Predict_of_future_days, len(times[Train_on_days_from:])) \n    plt.plot( pd.Series([0 if i<0 else i for i in model(polyline)] , index = times[Train_on_days_from:])  , label = 'Predicted {} Cases'.format(Plot_Column.replace('_',' ').title()) , color = plot_color[1])\n\n  plt.suptitle(Sup_Title, fontsize = 29)\n  plt.title('{} Cases In {} of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' ').title() , Location ) , fontsize = 19)\n  plt.legend()\n  plt.ylabel('Cases')\n  plt.xlabel('Days Passed Since {}'.format(World_['date'].min()))\n  plt.subplots_adjust(top=SubPlot_Top)\n\n  plt.savefig(File_Prefix+'{} Regression  Plot on {} _{}.{}'.format(Location,World_.date.max() , time.time() , Format_To_Save) , bbox_inches = 'tight')\nelse:\n  fig=go.Figure()\n  if Regression_Power:\n    model = np.poly1d(np.polyfit(data['Days_Passed'].values[Train_on_days_from-20:], data[Plot_Column].values[Train_on_days_from-20:], Regression_Power))\n    polyline = np.linspace(Train_on_days_from, World_['Days_Passed'].max()+Predict_of_future_days, len(times[Train_on_days_from:])) \n    reg_plot = pd.Series([0 if i<0 else i for i in model(polyline)] , index = times[Train_on_days_from:])  \n    # fig.add_trace(go.Scatter(x = reg_plot.index , y = reg_plot , mode = 'lines' ))\n    fig.add_trace(go.Scatter(x = reg_plot.index ,y = reg_plot , mode = 'lines' , name = ' Fitted Line on {} '.format(Plot_Column.replace('_',' ').title())))\n  if Apply_Rolling_Mean > 1:\n    data[Plot_Column] = data[Plot_Column].rolling(Apply_Rolling_Mean, min_periods = 1).mean()\n  fig.add_trace(go.Scatter(x = data.index , y = data[Plot_Column] , mode = 'lines' , name = '{} Cases'.format(Plot_Column.replace('_',' ').title() ) ) )\n  if Bar_Plot:\n    fig.add_trace(go.Bar(x = bar_data.index,y = bar_data[Plot_Column] , name = 'Monthly Average', marker=dict(color = list(sns.color_palette(Style_Color,n_colors=len(bar_data[Plot_Column].values)).as_hex()))))\n  fig.update_layout(title='{} Cases In {} of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' ').title() , Location ),\n                  xaxis_title='Days Passed Since {}'.format(data[Date].min()),yaxis_title=\"Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"),\n                  height =Graphs_Height*96\/3)\n  fig.show()","d88b0946":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn1.iconfinder.com\/data\/icons\/life-of-amazon-outline\/340\/brazil_map_amazon_country_travel_ocean-256.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Plot Corona Virus Cases in 5 Countries<\/h2><\/center><br>\nPlot_Column = \"total_cases\" #@param ['total_cases', 'new_cases','new_cases_smoothed', 'total_deaths', 'new_deaths', 'new_deaths_smoothed', 'total_cases_per_million', 'new_cases_per_million', 'new_cases_smoothed_per_million', 'total_deaths_per_million', 'new_deaths_per_million', 'new_deaths_smoothed_per_million', 'reproduction_rate', 'icu_patients', 'icu_patients_per_million', 'hosp_patients', 'hosp_patients_per_million', 'weekly_icu_admissions', 'weekly_icu_admissions_per_million', 'weekly_hosp_admissions','weekly_hosp_admissions_per_million', 'total_tests', 'new_tests', 'total_tests_per_thousand', 'new_tests_per_thousand', 'new_tests_smoothed', 'new_tests_smoothed_per_thousand', 'tests_per_case', 'positive_rate', 'tests_units', 'stringency_index', 'population', 'population_density', 'median_age', 'aged_65_older', 'aged_70_older', 'gdp_per_capita', 'extreme_poverty', 'cardiovasc_death_rate', 'diabetes_prevalence', 'female_smokers', 'male_smokers', 'handwashing_facilities', 'hospital_beds_per_thousand', 'life_expectancy', 'human_development_index']\nApply_Rolling_Mean = 4 #@param {type:\"slider\", min:1, max:30, step:1}\nLocation_1 = \"Pakistan\" #@param [\"None\" ,\"Aruba\", \"Afghanistan\", \"Angola\", \"Anguilla\", \"Albania\", \"Andorra\",\"United Arab Emirates\", \"Argentina\", \"Armenia\",\"Antigua and Barbuda\", \"Australia\", \"Austria\", \"Azerbaijan\",\"Burundi\", \"Belgium\", \"Benin\", \"Bonaire Sint Eustatius and Saba\",\"Burkina Faso\", \"Bangladesh\", \"Bulgaria\", \"Bahrain\", \"Bahamas\",\"Bosnia and Herzegovina\", \"Belarus\", \"Belize\", \"Bermuda\",\"Bolivia\", \"Brazil\", \"Barbados\", \"Brunei\", \"Bhutan\", \"Botswana\",\"Central African Republic\", \"Canada\", \"Switzerland\", \"Chile\",\"China\", \"Cameroon\",\"Democratic Republic of Congo\", \"Congo\", \"Colombia\", \"Comoros\",\"Cape Verde\", \"Costa Rica\", \"Cuba\", \"Curacao\", \"Cayman Islands\",\"Cyprus\", \"Czech Republic\", \"Germany\", \"Djibouti\", \"Dominica\",\"Denmark\", \"Dominican Republic\", \"Algeria\", \"Ecuador\", \"Egypt\",\"Eritrea\", \"Western Sahara\", \"Spain\", \"Estonia\", \"Ethiopia\",\"Finland\", \"Fiji\", \"Falkland Islands\", \"France\", \"Faeroe Islands\",\"Gabon\", \"United Kingdom\", \"Georgia\", \"Guernsey\", \"Ghana\",\"Gibraltar\", \"Guinea\", \"Gambia\", \"Equatorial Guinea\", \"Greece\", \"Grenada\", \"Greenland\", \"Guatemala\",\"Guam\", \"Guyana\", \"Hong Kong\", \"Honduras\", \"Croatia\", \"Haiti\",\"Hungary\", \"Indonesia\", \"Isle of Man\", \"India\", \"Ireland\", \"Iran\",\"Iraq\", \"Iceland\", \"Israel\", \"Italy\", \"Jamaica\", \"Jersey\",\"Jordan\", \"Japan\", \"Kazakhstan\", \"Kenya\", \"Kyrgyzstan\", \"Cambodia\", \"Saint Kitts and Nevis\", \"South Korea\", \"Kuwait\", \"Laos\",\"Lebanon\", \"Liberia\", \"Libya\", \"Saint Lucia\", \"Liechtenstein\",\"Sri Lanka\", \"Lesotho\", \"Lithuania\", \"Luxembourg\", \"Latvia\",\"Morocco\", \"Monaco\", \"Moldova\", \"Madagascar\", \"Maldives\", \"Mexico\",\"Marshall Islands\", \"Macedonia\", \"Mali\", \"Malta\", \"Myanmar\",\"Montenegro\", \"Mongolia\", \"Northern Mariana Islands\", \"Mozambique\",\"Mauritania\", \"Montserrat\", \"Mauritius\", \"Malawi\", \"Malaysia\",\"Namibia\", \"New Caledonia\", \"Niger\", \"Nigeria\", \"Nicaragua\",\"Netherlands\", \"Norway\", \"Nepal\", \"New Zealand\", \"Oman\",\"Pakistan\", \"Panama\", \"Peru\", \"Philippines\", \"Papua New Guinea\",\"Poland\", \"Puerto Rico\", \"Portugal\", \"Paraguay\", \"Palestine\",\"French Polynesia\", \"Qatar\", \"Romania\", \"Russia\", \"Rwanda\",\"Saudi Arabia\", \"Sudan\", \"Senegal\", \"Singapore\", \"Solomon Islands\",\"Sierra Leone\", \"El Salvador\", \"San Marino\", \"Somalia\", \"Serbia\",\"South Sudan\", \"Sao Tome and Principe\", \"Suriname\", \"Slovakia\",\"Slovenia\", \"Sweden\", \"Swaziland\" ,\"Seychelles\", \"Syria\", \"Turks and Caicos Islands\", \"Chad\", \"Togo\",\"Thailand\", \"Tajikistan\", \"Timor\", \"Trinidad and Tobago\",\"Tunisia\", \"Turkey\", \"Taiwan\", \"Tanzania\", \"Uganda\", \"Ukraine\",\"Uruguay\", \"United States\", \"Uzbekistan\", \"Vatican\",\"Saint Vincent and the Grenadines\", \"Venezuela\",\"British Virgin Islands\", \"United States Virgin Islands\",\"Vietnam\", \"Vanuatu\", \"Wallis and Futuna\", \"Kosovo\", \"Yemen\",\"South Africa\", \"Zambia\", \"Zimbabwe\", \"World\", \"International\"]\nLocation_2 = \"United States\" #@param [\"None\" ,\"Aruba\", \"Afghanistan\", \"Angola\", \"Anguilla\", \"Albania\", \"Andorra\",\"United Arab Emirates\", \"Argentina\", \"Armenia\",\"Antigua and Barbuda\", \"Australia\", \"Austria\", \"Azerbaijan\",\"Burundi\", \"Belgium\", \"Benin\", \"Bonaire Sint Eustatius and Saba\",\"Burkina Faso\", \"Bangladesh\", \"Bulgaria\", \"Bahrain\", \"Bahamas\",\"Bosnia and Herzegovina\", \"Belarus\", \"Belize\", \"Bermuda\",\"Bolivia\", \"Brazil\", \"Barbados\", \"Brunei\", \"Bhutan\", \"Botswana\",\"Central African Republic\", \"Canada\", \"Switzerland\", \"Chile\",\"China\", \"Cameroon\",\"Democratic Republic of Congo\", \"Congo\", \"Colombia\", \"Comoros\",\"Cape Verde\", \"Costa Rica\", \"Cuba\", \"Curacao\", \"Cayman Islands\",\"Cyprus\", \"Czech Republic\", \"Germany\", \"Djibouti\", \"Dominica\",\"Denmark\", \"Dominican Republic\", \"Algeria\", \"Ecuador\", \"Egypt\",\"Eritrea\", \"Western Sahara\", \"Spain\", \"Estonia\", \"Ethiopia\",\"Finland\", \"Fiji\", \"Falkland Islands\", \"France\", \"Faeroe Islands\",\"Gabon\", \"United Kingdom\", \"Georgia\", \"Guernsey\", \"Ghana\",\"Gibraltar\", \"Guinea\", \"Gambia\", \"Equatorial Guinea\", \"Greece\", \"Grenada\", \"Greenland\", \"Guatemala\",\"Guam\", \"Guyana\", \"Hong Kong\", \"Honduras\", \"Croatia\", \"Haiti\",\"Hungary\", \"Indonesia\", \"Isle of Man\", \"India\", \"Ireland\", \"Iran\",\"Iraq\", \"Iceland\", \"Israel\", \"Italy\", \"Jamaica\", \"Jersey\",\"Jordan\", \"Japan\", \"Kazakhstan\", \"Kenya\", \"Kyrgyzstan\", \"Cambodia\", \"Saint Kitts and Nevis\", \"South Korea\", \"Kuwait\", \"Laos\",\"Lebanon\", \"Liberia\", \"Libya\", \"Saint Lucia\", \"Liechtenstein\",\"Sri Lanka\", \"Lesotho\", \"Lithuania\", \"Luxembourg\", \"Latvia\",\"Morocco\", \"Monaco\", \"Moldova\", \"Madagascar\", \"Maldives\", \"Mexico\",\"Marshall Islands\", \"Macedonia\", \"Mali\", \"Malta\", \"Myanmar\",\"Montenegro\", \"Mongolia\", \"Northern Mariana Islands\", \"Mozambique\",\"Mauritania\", \"Montserrat\", \"Mauritius\", \"Malawi\", \"Malaysia\",\"Namibia\", \"New Caledonia\", \"Niger\", \"Nigeria\", \"Nicaragua\",\"Netherlands\", \"Norway\", \"Nepal\", \"New Zealand\", \"Oman\",\"Pakistan\", \"Panama\", \"Peru\", \"Philippines\", \"Papua New Guinea\",\"Poland\", \"Puerto Rico\", \"Portugal\", \"Paraguay\", \"Palestine\",\"French Polynesia\", \"Qatar\", \"Romania\", \"Russia\", \"Rwanda\",\"Saudi Arabia\", \"Sudan\", \"Senegal\", \"Singapore\", \"Solomon Islands\",\"Sierra Leone\", \"El Salvador\", \"San Marino\", \"Somalia\", \"Serbia\",\"South Sudan\", \"Sao Tome and Principe\", \"Suriname\", \"Slovakia\",\"Slovenia\", \"Sweden\", \"Swaziland\" ,\"Seychelles\", \"Syria\", \"Turks and Caicos Islands\", \"Chad\", \"Togo\",\"Thailand\", \"Tajikistan\", \"Timor\", \"Trinidad and Tobago\",\"Tunisia\", \"Turkey\", \"Taiwan\", \"Tanzania\", \"Uganda\", \"Ukraine\",\"Uruguay\", \"United States\", \"Uzbekistan\", \"Vatican\",\"Saint Vincent and the Grenadines\", \"Venezuela\",\"British Virgin Islands\", \"United States Virgin Islands\",\"Vietnam\", \"Vanuatu\", \"Wallis and Futuna\", \"Kosovo\", \"Yemen\",\"South Africa\", \"Zambia\", \"Zimbabwe\", \"World\", \"International\"]\nLocation_3 = \"India\" #@param [\"None\" ,\"Aruba\", \"Afghanistan\", \"Angola\", \"Anguilla\", \"Albania\", \"Andorra\",\"United Arab Emirates\", \"Argentina\", \"Armenia\",\"Antigua and Barbuda\", \"Australia\", \"Austria\", \"Azerbaijan\",\"Burundi\", \"Belgium\", \"Benin\", \"Bonaire Sint Eustatius and Saba\",\"Burkina Faso\", \"Bangladesh\", \"Bulgaria\", \"Bahrain\", \"Bahamas\",\"Bosnia and Herzegovina\", \"Belarus\", \"Belize\", \"Bermuda\",\"Bolivia\", \"Brazil\", \"Barbados\", \"Brunei\", \"Bhutan\", \"Botswana\",\"Central African Republic\", \"Canada\", \"Switzerland\", \"Chile\",\"China\", \"Cameroon\",\"Democratic Republic of Congo\", \"Congo\", \"Colombia\", \"Comoros\",\"Cape Verde\", \"Costa Rica\", \"Cuba\", \"Curacao\", \"Cayman Islands\",\"Cyprus\", \"Czech Republic\", \"Germany\", \"Djibouti\", \"Dominica\",\"Denmark\", \"Dominican Republic\", \"Algeria\", \"Ecuador\", \"Egypt\",\"Eritrea\", \"Western Sahara\", \"Spain\", \"Estonia\", \"Ethiopia\",\"Finland\", \"Fiji\", \"Falkland Islands\", \"France\", \"Faeroe Islands\",\"Gabon\", \"United Kingdom\", \"Georgia\", \"Guernsey\", \"Ghana\",\"Gibraltar\", \"Guinea\", \"Gambia\", \"Equatorial Guinea\", \"Greece\", \"Grenada\", \"Greenland\", \"Guatemala\",\"Guam\", \"Guyana\", \"Hong Kong\", \"Honduras\", \"Croatia\", \"Haiti\",\"Hungary\", \"Indonesia\", \"Isle of Man\", \"India\", \"Ireland\", \"Iran\",\"Iraq\", \"Iceland\", \"Israel\", \"Italy\", \"Jamaica\", \"Jersey\",\"Jordan\", \"Japan\", \"Kazakhstan\", \"Kenya\", \"Kyrgyzstan\", \"Cambodia\", \"Saint Kitts and Nevis\", \"South Korea\", \"Kuwait\", \"Laos\",\"Lebanon\", \"Liberia\", \"Libya\", \"Saint Lucia\", \"Liechtenstein\",\"Sri Lanka\", \"Lesotho\", \"Lithuania\", \"Luxembourg\", \"Latvia\",\"Morocco\", \"Monaco\", \"Moldova\", \"Madagascar\", \"Maldives\", \"Mexico\",\"Marshall Islands\", \"Macedonia\", \"Mali\", \"Malta\", \"Myanmar\",\"Montenegro\", \"Mongolia\", \"Northern Mariana Islands\", \"Mozambique\",\"Mauritania\", \"Montserrat\", \"Mauritius\", \"Malawi\", \"Malaysia\",\"Namibia\", \"New Caledonia\", \"Niger\", \"Nigeria\", \"Nicaragua\",\"Netherlands\", \"Norway\", \"Nepal\", \"New Zealand\", \"Oman\",\"Pakistan\", \"Panama\", \"Peru\", \"Philippines\", \"Papua New Guinea\",\"Poland\", \"Puerto Rico\", \"Portugal\", \"Paraguay\", \"Palestine\",\"French Polynesia\", \"Qatar\", \"Romania\", \"Russia\", \"Rwanda\",\"Saudi Arabia\", \"Sudan\", \"Senegal\", \"Singapore\", \"Solomon Islands\",\"Sierra Leone\", \"El Salvador\", \"San Marino\", \"Somalia\", \"Serbia\",\"South Sudan\", \"Sao Tome and Principe\", \"Suriname\", \"Slovakia\",\"Slovenia\", \"Sweden\", \"Swaziland\" ,\"Seychelles\", \"Syria\", \"Turks and Caicos Islands\", \"Chad\", \"Togo\",\"Thailand\", \"Tajikistan\", \"Timor\", \"Trinidad and Tobago\",\"Tunisia\", \"Turkey\", \"Taiwan\", \"Tanzania\", \"Uganda\", \"Ukraine\",\"Uruguay\", \"United States\", \"Uzbekistan\", \"Vatican\",\"Saint Vincent and the Grenadines\", \"Venezuela\",\"British Virgin Islands\", \"United States Virgin Islands\",\"Vietnam\", \"Vanuatu\", \"Wallis and Futuna\", \"Kosovo\", \"Yemen\",\"South Africa\", \"Zambia\", \"Zimbabwe\", \"World\", \"International\"]\nLocation_4 = \"United Kingdom\" #@param [\"None\" ,\"Aruba\", \"Afghanistan\", \"Angola\", \"Anguilla\", \"Albania\", \"Andorra\",\"United Arab Emirates\", \"Argentina\", \"Armenia\",\"Antigua and Barbuda\", \"Australia\", \"Austria\", \"Azerbaijan\",\"Burundi\", \"Belgium\", \"Benin\", \"Bonaire Sint Eustatius and Saba\",\"Burkina Faso\", \"Bangladesh\", \"Bulgaria\", \"Bahrain\", \"Bahamas\",\"Bosnia and Herzegovina\", \"Belarus\", \"Belize\", \"Bermuda\",\"Bolivia\", \"Brazil\", \"Barbados\", \"Brunei\", \"Bhutan\", \"Botswana\",\"Central African Republic\", \"Canada\", \"Switzerland\", \"Chile\",\"China\", \"Cameroon\",\"Democratic Republic of Congo\", \"Congo\", \"Colombia\", \"Comoros\",\"Cape Verde\", \"Costa Rica\", \"Cuba\", \"Curacao\", \"Cayman Islands\",\"Cyprus\", \"Czech Republic\", \"Germany\", \"Djibouti\", \"Dominica\",\"Denmark\", \"Dominican Republic\", \"Algeria\", \"Ecuador\", \"Egypt\",\"Eritrea\", \"Western Sahara\", \"Spain\", \"Estonia\", \"Ethiopia\",\"Finland\", \"Fiji\", \"Falkland Islands\", \"France\", \"Faeroe Islands\",\"Gabon\", \"United Kingdom\", \"Georgia\", \"Guernsey\", \"Ghana\",\"Gibraltar\", \"Guinea\", \"Gambia\", \"Equatorial Guinea\", \"Greece\", \"Grenada\", \"Greenland\", \"Guatemala\",\"Guam\", \"Guyana\", \"Hong Kong\", \"Honduras\", \"Croatia\", \"Haiti\",\"Hungary\", \"Indonesia\", \"Isle of Man\", \"India\", \"Ireland\", \"Iran\",\"Iraq\", \"Iceland\", \"Israel\", \"Italy\", \"Jamaica\", \"Jersey\",\"Jordan\", \"Japan\", \"Kazakhstan\", \"Kenya\", \"Kyrgyzstan\", \"Cambodia\", \"Saint Kitts and Nevis\", \"South Korea\", \"Kuwait\", \"Laos\",\"Lebanon\", \"Liberia\", \"Libya\", \"Saint Lucia\", \"Liechtenstein\",\"Sri Lanka\", \"Lesotho\", \"Lithuania\", \"Luxembourg\", \"Latvia\",\"Morocco\", \"Monaco\", \"Moldova\", \"Madagascar\", \"Maldives\", \"Mexico\",\"Marshall Islands\", \"Macedonia\", \"Mali\", \"Malta\", \"Myanmar\",\"Montenegro\", \"Mongolia\", \"Northern Mariana Islands\", \"Mozambique\",\"Mauritania\", \"Montserrat\", \"Mauritius\", \"Malawi\", \"Malaysia\",\"Namibia\", \"New Caledonia\", \"Niger\", \"Nigeria\", \"Nicaragua\",\"Netherlands\", \"Norway\", \"Nepal\", \"New Zealand\", \"Oman\",\"Pakistan\", \"Panama\", \"Peru\", \"Philippines\", \"Papua New Guinea\",\"Poland\", \"Puerto Rico\", \"Portugal\", \"Paraguay\", \"Palestine\",\"French Polynesia\", \"Qatar\", \"Romania\", \"Russia\", \"Rwanda\",\"Saudi Arabia\", \"Sudan\", \"Senegal\", \"Singapore\", \"Solomon Islands\",\"Sierra Leone\", \"El Salvador\", \"San Marino\", \"Somalia\", \"Serbia\",\"South Sudan\", \"Sao Tome and Principe\", \"Suriname\", \"Slovakia\",\"Slovenia\", \"Sweden\", \"Swaziland\" ,\"Seychelles\", \"Syria\", \"Turks and Caicos Islands\", \"Chad\", \"Togo\",\"Thailand\", \"Tajikistan\", \"Timor\", \"Trinidad and Tobago\",\"Tunisia\", \"Turkey\", \"Taiwan\", \"Tanzania\", \"Uganda\", \"Ukraine\",\"Uruguay\", \"United States\", \"Uzbekistan\", \"Vatican\",\"Saint Vincent and the Grenadines\", \"Venezuela\",\"British Virgin Islands\", \"United States Virgin Islands\",\"Vietnam\", \"Vanuatu\", \"Wallis and Futuna\", \"Kosovo\", \"Yemen\",\"South Africa\", \"Zambia\", \"Zimbabwe\", \"World\", \"International\"]\nLocation_5 = \"China\" #@param [\"None\" ,\"Aruba\", \"Afghanistan\", \"Angola\", \"Anguilla\", \"Albania\", \"Andorra\",\"United Arab Emirates\", \"Argentina\", \"Armenia\",\"Antigua and Barbuda\", \"Australia\", \"Austria\", \"Azerbaijan\",\"Burundi\", \"Belgium\", \"Benin\", \"Bonaire Sint Eustatius and Saba\",\"Burkina Faso\", \"Bangladesh\", \"Bulgaria\", \"Bahrain\", \"Bahamas\",\"Bosnia and Herzegovina\", \"Belarus\", \"Belize\", \"Bermuda\",\"Bolivia\", \"Brazil\", \"Barbados\", \"Brunei\", \"Bhutan\", \"Botswana\",\"Central African Republic\", \"Canada\", \"Switzerland\", \"Chile\",\"China\", \"Cameroon\",\"Democratic Republic of Congo\", \"Congo\", \"Colombia\", \"Comoros\",\"Cape Verde\", \"Costa Rica\", \"Cuba\", \"Curacao\", \"Cayman Islands\",\"Cyprus\", \"Czech Republic\", \"Germany\", \"Djibouti\", \"Dominica\",\"Denmark\", \"Dominican Republic\", \"Algeria\", \"Ecuador\", \"Egypt\",\"Eritrea\", \"Western Sahara\", \"Spain\", \"Estonia\", \"Ethiopia\",\"Finland\", \"Fiji\", \"Falkland Islands\", \"France\", \"Faeroe Islands\",\"Gabon\", \"United Kingdom\", \"Georgia\", \"Guernsey\", \"Ghana\",\"Gibraltar\", \"Guinea\", \"Gambia\", \"Equatorial Guinea\", \"Greece\", \"Grenada\", \"Greenland\", \"Guatemala\",\"Guam\", \"Guyana\", \"Hong Kong\", \"Honduras\", \"Croatia\", \"Haiti\",\"Hungary\", \"Indonesia\", \"Isle of Man\", \"India\", \"Ireland\", \"Iran\",\"Iraq\", \"Iceland\", \"Israel\", \"Italy\", \"Jamaica\", \"Jersey\",\"Jordan\", \"Japan\", \"Kazakhstan\", \"Kenya\", \"Kyrgyzstan\", \"Cambodia\", \"Saint Kitts and Nevis\", \"South Korea\", \"Kuwait\", \"Laos\",\"Lebanon\", \"Liberia\", \"Libya\", \"Saint Lucia\", \"Liechtenstein\",\"Sri Lanka\", \"Lesotho\", \"Lithuania\", \"Luxembourg\", \"Latvia\",\"Morocco\", \"Monaco\", \"Moldova\", \"Madagascar\", \"Maldives\", \"Mexico\",\"Marshall Islands\", \"Macedonia\", \"Mali\", \"Malta\", \"Myanmar\",\"Montenegro\", \"Mongolia\", \"Northern Mariana Islands\", \"Mozambique\",\"Mauritania\", \"Montserrat\", \"Mauritius\", \"Malawi\", \"Malaysia\",\"Namibia\", \"New Caledonia\", \"Niger\", \"Nigeria\", \"Nicaragua\",\"Netherlands\", \"Norway\", \"Nepal\", \"New Zealand\", \"Oman\",\"Pakistan\", \"Panama\", \"Peru\", \"Philippines\", \"Papua New Guinea\",\"Poland\", \"Puerto Rico\", \"Portugal\", \"Paraguay\", \"Palestine\",\"French Polynesia\", \"Qatar\", \"Romania\", \"Russia\", \"Rwanda\",\"Saudi Arabia\", \"Sudan\", \"Senegal\", \"Singapore\", \"Solomon Islands\",\"Sierra Leone\", \"El Salvador\", \"San Marino\", \"Somalia\", \"Serbia\",\"South Sudan\", \"Sao Tome and Principe\", \"Suriname\", \"Slovakia\",\"Slovenia\", \"Sweden\", \"Swaziland\" ,\"Seychelles\", \"Syria\", \"Turks and Caicos Islands\", \"Chad\", \"Togo\",\"Thailand\", \"Tajikistan\", \"Timor\", \"Trinidad and Tobago\",\"Tunisia\", \"Turkey\", \"Taiwan\", \"Tanzania\", \"Uganda\", \"Ukraine\",\"Uruguay\", \"United States\", \"Uzbekistan\", \"Vatican\",\"Saint Vincent and the Grenadines\", \"Venezuela\",\"British Virgin Islands\", \"United States Virgin Islands\",\"Vietnam\", \"Vanuatu\", \"Wallis and Futuna\", \"Kosovo\", \"Yemen\",\"South Africa\", \"Zambia\", \"Zimbabwe\", \"World\", \"International\"]\nPlot_Lib = \"MatplotLib\" #@param [\"Plotly\", \"MatplotLib\"]\nFill_Alpha = 0.13 #@param {type:\"slider\", min:0, max:1, step:0.01}\nUse_Log = False #@param {type:\"boolean\"}\n\nLocations = [Location_1 ,Location_2 ,Location_3 ,Location_4 ,Location_5]\nDate = 'date'\n\ndisplay(Markdown(\"<center><h2>Time Series Plot of 5 Countries for {} of SARS-CoV-2 On {} \\n<\/h2><\/center>\".format(Plot_Column.replace('_',' ').title() , World_.date.max())))\n\nplot_color = list(sns.color_palette(Style_Color,n_colors=len(Locations)).as_hex())\n\nif Plot_Lib == 'MatplotLib':\n  plt.figure(figsize=(Graphs_Width,Graphs_Height))\n\n  for i,Location in enumerate(Locations):\n    if Location in World_.location.unique():\n      data = World_[World_.location == Location]\n      data[Plot_Column] = data[Plot_Column].rolling(Apply_Rolling_Mean , min_periods = 1).mean()\n      if Use_Log:\n        data[Plot_Column] = np.log1p(data[Plot_Column])\n      plt.plot(data[Plot_Column], label = '{}'.format(Location) , color = plot_color[i] )\n      plt.fill_between(data.index , 0 , data[Plot_Column], color =  plot_color[i] , alpha = Fill_Alpha)\n  plt.suptitle(Sup_Title, fontsize = 29)\n  plt.title('Most Effected Countries with {} Cases of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' ').title() ) , fontsize = 19)\n  plt.legend()\n  if Use_Log:\n    plt.ylabel('Cases (After Log)')\n  else:\n    plt.ylabel('Cases')\n  plt.xlabel('Days Passed Since {}'.format(World_.date.min()))\n  plt.subplots_adjust(top=SubPlot_Top)\n  plt.savefig(File_Prefix+'5 Countries Regression  Plot on {} _{}.{}'.format(World_.date.max() , time.time() , Format_To_Save) , bbox_inches = 'tight')\n\nelse:\n  fig=go.Figure()\n  # go.update_layout( )\n  for i,Location in enumerate(Locations):\n    if Location in World_.location.unique():\n      data = World_[World_.location == Location]\n      data[Plot_Column] = data[Plot_Column].rolling(Apply_Rolling_Mean , min_periods = 1).mean()\n      if Use_Log:\n        data[Plot_Column] = np.log1p(data[Plot_Column])\n      fig.add_trace(go.Scatter(x = data.index , y = data[Plot_Column] , mode = 'lines' ,  name = '{}'.format(Location) ) )\n  fig.update_layout(title='{} Cases In {} of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' ').title() , Location ),\n                  xaxis_title='Days Passed Since {}'.format(data[Date].min()),yaxis_title=\"Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"),\n                  height =Graphs_Height*96\/3)\n  fig.show()","fad11f06":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/assets.website-files.com\/5d9ba0eb5f6edb77992a99d0\/5e62506c9394b24aa66cf385_iconfinder_connection-route-spread-virus-global_5728179.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Time Series Plot of Corona Virus Cases in Top Countries<\/h2><\/center><br>\nPlot_Column = \"new_cases\" #@param ['total_cases', 'new_cases','new_cases_smoothed', 'total_deaths', 'new_deaths', 'new_deaths_smoothed', 'total_cases_per_million', 'new_cases_per_million', 'new_cases_smoothed_per_million', 'total_deaths_per_million', 'new_deaths_per_million', 'new_deaths_smoothed_per_million', 'reproduction_rate', 'icu_patients', 'icu_patients_per_million', 'hosp_patients', 'hosp_patients_per_million', 'weekly_icu_admissions', 'weekly_icu_admissions_per_million', 'weekly_hosp_admissions','weekly_hosp_admissions_per_million', 'total_tests', 'new_tests', 'total_tests_per_thousand', 'new_tests_per_thousand', 'new_tests_smoothed', 'new_tests_smoothed_per_thousand', 'tests_per_case', 'positive_rate', 'tests_units', 'stringency_index', 'population', 'population_density', 'median_age', 'aged_65_older', 'aged_70_older', 'gdp_per_capita', 'extreme_poverty', 'cardiovasc_death_rate', 'diabetes_prevalence', 'female_smokers', 'male_smokers', 'handwashing_facilities', 'hospital_beds_per_thousand', 'life_expectancy', 'human_development_index']\nUse_Method = \"mean\" #@param [\"sum\", \"mean\", \"max\", \"median\", \"min\", \"std\", \"var\"]\nPlot_top = 8 #@param {type:\"slider\", min:0, max:100, step:1}\nApply_Rolling_Mean = 9 #@param {type:\"slider\", min:1, max:30, step:1}\nPlot_Lib = \"Plotly\" #@param [\"Plotly\", \"MatplotLib\"]\nFill_Alpha = 0.13 #@param {type:\"slider\", min:0, max:1, step:0.01}\nUse_Log = False #@param {type:\"boolean\"}\nDate = 'date'\nLocations = World_.groupby('location').agg({Plot_Column:Use_Method}).sort_values(by=[Plot_Column] , ascending = False).reset_index()['location'].head(Plot_top+1).values\nplot_color = list(sns.color_palette(Style_Color,n_colors=len(Locations)*2).as_hex())\n\ndisplay(Markdown(\"<center><h2>Time Series Plot of Top Countries for {} of SARS-CoV-2  \\n<\/h2><\/center>\".format(Plot_Column.replace('_',' ').title())))\n\nif Plot_Lib == 'MatplotLib':\n  plt.figure(figsize=(Graphs_Width,Graphs_Height))\n  for i,Location in enumerate(Locations):\n    if Location in World_.location.unique() and Location != 'World' :\n      data = World_[World_.location == Location]\n      data[Plot_Column] = data[Plot_Column].rolling(Apply_Rolling_Mean, min_periods = 1).mean()\n\n      if Use_Log:\n        data[Plot_Column] = np.log1p(data[Plot_Column])\n      if Fill_Alpha:\n        plt.fill_between(data.index , 0 , data[Plot_Column], color =  plot_color[i] , alpha = Fill_Alpha)\n      plt.plot(data.index , data[Plot_Column], label = '{}'.format(Location) , color = plot_color[i*2] )\n\n  plt.suptitle(Sup_Title, fontsize = 29)\n  plt.title('{} Cases of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' ').title() ) , fontsize = 19)\n  plt.legend()\n  plt.ylabel('Cases')\n  plt.xlabel('Days Passed Since {}'.format(World_.date.min()))\n  plt.subplots_adjust(top=SubPlot_Top)\n  plt.savefig(File_Prefix+'Top Countries Regression  Plot on {} _{}.{}'.format(World_.date.max() , time.time() , Format_To_Save) , bbox_inches = 'tight')\nelse:\n  fig=go.Figure()\n  for i,Location in enumerate(Locations):\n    if Location in World_.location.unique() and Location != 'World' :\n      data = World_[World_.location == Location]\n      data[Plot_Column] = data[Plot_Column].rolling(Apply_Rolling_Mean, min_periods = 1).mean()\n\n      if Use_Log:\n        data[Plot_Column] = np.log1p(data[Plot_Column])\n\n      fig.add_trace(go.Scatter(x = data.index , y = data[Plot_Column] , mode = 'lines' , name = '{}'.format(Location) ) ) \n  \n  fig.update_layout(title='Top {} Cases In World of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' ').title()  ),\n                  xaxis_title='Days Passed Since {}'.format(data[Date].min()),yaxis_title=\"Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"),\n                  height =Graphs_Height*96\/3)\n  fig.show()","1d0dc6ce":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/images.vexels.com\/media\/users\/3\/151175\/isolated\/preview\/c8cccfd752a2c029daaa084aca6bb2bc-percent-pie-chart-doodle-by-vexels.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Plot Corona Virus Cases in Countries of World (Pie Chart)<\/h2><\/center><br>\nPlot_By = \"total_cases\" #@param ['total_cases','total_cases_per_million', 'new_cases','new_cases_per_million','total_deaths','total_deaths_per_million', 'new_deaths','new_deaths_per_million']\nDate = \"2020-12-19\" #@param {type:\"date\"}\n \nif Date not in world_dates_unique:\n  display(Markdown('<h5> Invalid Date Encountered.. <br>Setting Date to last Date<\/h5>'))\n  time.sleep(2)\n  Date = World_['date'].max()\ndisplay(Markdown(\"<h2> COUNTRY WISE PIE CHART CASES of 2019-nCoV AS OF {}<\/h2>\".format(Date)))\n \ntemp = World_[World_['location']!= 'World']\nfig = px.sunburst(temp[temp['date'] == Date].sort_values(by=Plot_By, ascending=False).reset_index(drop=True), \n                  path=[\"continent\", \"location\"], values=Plot_By, height=700,\n                 title='Number of {} Reported As Of {}'.format(Plot_By.replace('_',' ').title(), Date),\n                 color_discrete_sequence = px.colors.qualitative.Prism ,)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","29f9b125":"#@markdown <h3>\u2b05\ufe0f Click Here to START Fitting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn0.iconfinder.com\/data\/icons\/chart-22\/20\/chart_box_plot-256.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2><br>Mathematical functions on Data<\/h2><\/center><br>\n\nPlot_Column = \"new_cases\" #@param ['total_cases', 'new_cases','new_cases_smoothed', 'total_deaths', 'new_deaths', 'new_deaths_smoothed', 'total_cases_per_million', 'new_cases_per_million', 'new_cases_smoothed_per_million', 'total_deaths_per_million', 'new_deaths_per_million', 'new_deaths_smoothed_per_million', 'reproduction_rate', 'icu_patients', 'icu_patients_per_million', 'hosp_patients', 'hosp_patients_per_million', 'weekly_icu_admissions', 'weekly_icu_admissions_per_million', 'weekly_hosp_admissions','weekly_hosp_admissions_per_million', 'total_tests', 'new_tests', 'total_tests_per_thousand', 'new_tests_per_thousand', 'new_tests_smoothed', 'new_tests_smoothed_per_thousand', 'tests_per_case', 'positive_rate', 'tests_units', 'stringency_index', 'population', 'population_density', 'median_age', 'aged_65_older', 'aged_70_older', 'gdp_per_capita', 'extreme_poverty', 'cardiovasc_death_rate', 'diabetes_prevalence', 'female_smokers', 'male_smokers', 'handwashing_facilities', 'hospital_beds_per_thousand', 'life_expectancy', 'human_development_index']\nLocation = \"India\" #@param [\"Aruba\", \"Afghanistan\", \"Angola\", \"Anguilla\", \"Albania\", \"Andorra\",\"United Arab Emirates\", \"Argentina\", \"Armenia\",\"Antigua and Barbuda\", \"Australia\", \"Austria\", \"Azerbaijan\",\"Burundi\", \"Belgium\", \"Benin\", \"Bonaire Sint Eustatius and Saba\",\"Burkina Faso\", \"Bangladesh\", \"Bulgaria\", \"Bahrain\", \"Bahamas\",\"Bosnia and Herzegovina\", \"Belarus\", \"Belize\", \"Bermuda\",\"Bolivia\", \"Brazil\", \"Barbados\", \"Brunei\", \"Bhutan\", \"Botswana\",\"Central African Republic\", \"Canada\", \"Switzerland\", \"Chile\",\"China\", \"Cameroon\",\"Democratic Republic of Congo\", \"Congo\", \"Colombia\", \"Comoros\",\"Cape Verde\", \"Costa Rica\", \"Cuba\", \"Curacao\", \"Cayman Islands\",\"Cyprus\", \"Czech Republic\", \"Germany\", \"Djibouti\", \"Dominica\",\"Denmark\", \"Dominican Republic\", \"Algeria\", \"Ecuador\", \"Egypt\",\"Eritrea\", \"Western Sahara\", \"Spain\", \"Estonia\", \"Ethiopia\",\"Finland\", \"Fiji\", \"Falkland Islands\", \"France\", \"Faeroe Islands\",\"Gabon\", \"United Kingdom\", \"Georgia\", \"Guernsey\", \"Ghana\",\"Gibraltar\", \"Guinea\", \"Gambia\", \"Equatorial Guinea\", \"Greece\", \"Grenada\", \"Greenland\", \"Guatemala\",\"Guam\", \"Guyana\", \"Hong Kong\", \"Honduras\", \"Croatia\", \"Haiti\",\"Hungary\", \"Indonesia\", \"Isle of Man\", \"India\", \"Ireland\", \"Iran\",\"Iraq\", \"Iceland\", \"Israel\", \"Italy\", \"Jamaica\", \"Jersey\",\"Jordan\", \"Japan\", \"Kazakhstan\", \"Kenya\", \"Kyrgyzstan\", \"Cambodia\", \"Saint Kitts and Nevis\", \"South Korea\", \"Kuwait\", \"Laos\",\"Lebanon\", \"Liberia\", \"Libya\", \"Saint Lucia\", \"Liechtenstein\",\"Sri Lanka\", \"Lesotho\", \"Lithuania\", \"Luxembourg\", \"Latvia\",\"Morocco\", \"Monaco\", \"Moldova\", \"Madagascar\", \"Maldives\", \"Mexico\",\"Marshall Islands\", \"Macedonia\", \"Mali\", \"Malta\", \"Myanmar\",\"Montenegro\", \"Mongolia\", \"Northern Mariana Islands\", \"Mozambique\",\"Mauritania\", \"Montserrat\", \"Mauritius\", \"Malawi\", \"Malaysia\",\"Namibia\", \"New Caledonia\", \"Niger\", \"Nigeria\", \"Nicaragua\",\"Netherlands\", \"Norway\", \"Nepal\", \"New Zealand\", \"Oman\",\"Pakistan\", \"Panama\", \"Peru\", \"Philippines\", \"Papua New Guinea\",\"Poland\", \"Puerto Rico\", \"Portugal\", \"Paraguay\", \"Palestine\",\"French Polynesia\", \"Qatar\", \"Romania\", \"Russia\", \"Rwanda\",\"Saudi Arabia\", \"Sudan\", \"Senegal\", \"Singapore\", \"Solomon Islands\",\"Sierra Leone\", \"El Salvador\", \"San Marino\", \"Somalia\", \"Serbia\",\"South Sudan\", \"Sao Tome and Principe\", \"Suriname\", \"Slovakia\",\"Slovenia\", \"Sweden\", \"Swaziland\" ,\"Seychelles\", \"Syria\", \"Turks and Caicos Islands\", \"Chad\", \"Togo\",\"Thailand\", \"Tajikistan\", \"Timor\", \"Trinidad and Tobago\",\"Tunisia\", \"Turkey\", \"Taiwan\", \"Tanzania\", \"Uganda\", \"Ukraine\",\"Uruguay\", \"United States\", \"Uzbekistan\", \"Vatican\",\"Saint Vincent and the Grenadines\", \"Venezuela\",\"British Virgin Islands\", \"United States Virgin Islands\",\"Vietnam\", \"Vanuatu\", \"Wallis and Futuna\", \"Kosovo\", \"Yemen\",\"South Africa\", \"Zambia\", \"Zimbabwe\", \"World\", \"International\"]\nPlt_Col = 4 #@param {type:\"slider\", min:1, max:6, step:1}\nDate = 'date'\n\ndata = World_[World_['location'] == Location]\nfreq = []\n\n\n# freq.append([np.spacing(data[Plot_Column]).values , 'Spacing Function'])\nfreq.append([data[Plot_Column].values.reshape(-1)  , 'Original Data'])\nfreq.append([data[Plot_Column].diff().values.reshape(-1)  , 'Difference of Original Data'])\nfreq.append([np.log1p(data[Plot_Column]).values.reshape(-1) , 'Log1p Fuction'])\nfreq.append([np.log1p(data[Plot_Column]).diff().values.reshape(-1) , 'Difference of Log1p Fuction'])\nfreq.append([np.sqrt(data[Plot_Column]).values.reshape(-1) , 'Square Root Function'])\nfreq.append([np.sqrt(data[Plot_Column]).diff().values.reshape(-1) , 'Difference of Square Root Function'])\nfreq.append([np.cbrt(data[Plot_Column]).values.reshape(-1) , 'Cube Root Function'])\nfreq.append([np.cbrt(data[Plot_Column]).diff().values.reshape(-1) , 'Difference of Cube Root Function'])\nfreq.append([np.sqrt(np.sqrt(data[Plot_Column])).values.reshape(-1) , 'Quad Root Function'])\nfreq.append([np.sqrt(np.sqrt(data[Plot_Column])).diff().values.reshape(-1) , 'Difference of Quad Root Function'])\nfreq.append([np.square(data[Plot_Column]).values.reshape(-1) , 'Square Function'])\nfreq.append([np.square(data[Plot_Column]).diff().values.reshape(-1) , 'Difference of Square Function'])\nfreq.append([preprocessing.MinMaxScaler().fit_transform(data[Plot_Column].values.reshape(-1,1)).reshape(-1) , 'Min Max Scaler Function'])\nfreq.append([preprocessing.RobustScaler().fit_transform(data[Plot_Column].values.reshape(-1,1)).reshape(-1) , 'Robust Scaler Function'])\nfreq.append([preprocessing.StandardScaler().fit_transform(data[Plot_Column].values.reshape(-1,1)).reshape(-1) , 'Standard Scaler Function'])\nfreq.append([preprocessing.PowerTransformer().fit_transform(data[Plot_Column].values.reshape(-1,1)).reshape(-1) , 'Power Transformer Scaler'])\nfreq.append([sm.tsa.filters.bkfilter(data[Plot_Column]).values.reshape(-1) , 'BKFilter Band Pass Filter'])\nfreq.append([sm.tsa.filters.hpfilter(data[Plot_Column])[1].values.reshape(-1) , 'HPFilter Smoothing Filter'])\nfreq.append([BoxCoxEndogTransformer().fit_transform(data[Plot_Column]+0.00000001)[0], 'BoxCoxEndogTransformer Filter'])\n\nplot_color = list(sns.color_palette(Style_Color,n_colors=len(freq)).as_hex())\nPlt_Row = math.ceil(len(freq)\/Plt_Col)\nplt.figure(figsize=(Graphs_Width,Graphs_Height*Plt_Row\/Plt_Col))\n\nfor i,j in enumerate(freq):\n  plt.subplot(Plt_Row , Plt_Col , i+1)\n  # plt.bar(range(len(j[0])) , j[0], width = 0.2 , linewidth = 0 , color = list(sns.color_palette(Style_Color,n_colors=len(j[0])).as_hex()) )\n  plt.plot(j[0], label = j[1] , color = plot_color[i])\n  plt.fill_between(list(range(len(j[0]))) ,0, j[0] ,color = plot_color[i] , alpha =0.4)\n  \n  plt.legend(loc = 2)\n  # plt.title(j[1]+' Over Data')\n  # plt.xlabel('Days Passed Since {}'.format(data.Date.min()))","ad176189":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn2.iconfinder.com\/data\/icons\/round-varieties\/60\/Rounded_-_High_Ultra_Colour19_-_Graph-256.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Month Wise Effect of Corona Virus in States of India<\/h2><\/center><br>\n\nPlot_Column = \"total_cases total_deaths total_tests new_cases new_deaths new_tests hosp_patients positive_rate\" #@param ['total_cases', 'new_cases', 'total_deaths', 'new_deaths', 'hosp_patients', 'new_tests', 'total_tests', 'positive_rate' , 'total_cases total_deaths total_tests' , 'new_cases new_deaths new_tests' , 'total_cases total_deaths total_tests new_cases new_deaths new_tests hosp_patients positive_rate']\nLocation = \"India\" #@param [\"Aruba\", \"Afghanistan\", \"Angola\", \"Anguilla\", \"Albania\", \"Andorra\",\"United Arab Emirates\", \"Argentina\", \"Armenia\",\"Antigua and Barbuda\", \"Australia\", \"Austria\", \"Azerbaijan\",\"Burundi\", \"Belgium\", \"Benin\", \"Bonaire Sint Eustatius and Saba\",\"Burkina Faso\", \"Bangladesh\", \"Bulgaria\", \"Bahrain\", \"Bahamas\",\"Bosnia and Herzegovina\", \"Belarus\", \"Belize\", \"Bermuda\",\"Bolivia\", \"Brazil\", \"Barbados\", \"Brunei\", \"Bhutan\", \"Botswana\",\"Central African Republic\", \"Canada\", \"Switzerland\", \"Chile\",\"China\", \"Cameroon\",\"Democratic Republic of Congo\", \"Congo\", \"Colombia\", \"Comoros\",\"Cape Verde\", \"Costa Rica\", \"Cuba\", \"Curacao\", \"Cayman Islands\",\"Cyprus\", \"Czech Republic\", \"Germany\", \"Djibouti\", \"Dominica\",\"Denmark\", \"Dominican Republic\", \"Algeria\", \"Ecuador\", \"Egypt\",\"Eritrea\", \"Western Sahara\", \"Spain\", \"Estonia\", \"Ethiopia\",\"Finland\", \"Fiji\", \"Falkland Islands\", \"France\", \"Faeroe Islands\",\"Gabon\", \"United Kingdom\", \"Georgia\", \"Guernsey\", \"Ghana\",\"Gibraltar\", \"Guinea\", \"Gambia\", \"Equatorial Guinea\", \"Greece\", \"Grenada\", \"Greenland\", \"Guatemala\",\"Guam\", \"Guyana\", \"Hong Kong\", \"Honduras\", \"Croatia\", \"Haiti\",\"Hungary\", \"Indonesia\", \"Isle of Man\", \"India\", \"Ireland\", \"Iran\",\"Iraq\", \"Iceland\", \"Israel\", \"Italy\", \"Jamaica\", \"Jersey\",\"Jordan\", \"Japan\", \"Kazakhstan\", \"Kenya\", \"Kyrgyzstan\", \"Cambodia\", \"Saint Kitts and Nevis\", \"South Korea\", \"Kuwait\", \"Laos\",\"Lebanon\", \"Liberia\", \"Libya\", \"Saint Lucia\", \"Liechtenstein\",\"Sri Lanka\", \"Lesotho\", \"Lithuania\", \"Luxembourg\", \"Latvia\",\"Morocco\", \"Monaco\", \"Moldova\", \"Madagascar\", \"Maldives\", \"Mexico\",\"Marshall Islands\", \"Macedonia\", \"Mali\", \"Malta\", \"Myanmar\",\"Montenegro\", \"Mongolia\", \"Northern Mariana Islands\", \"Mozambique\",\"Mauritania\", \"Montserrat\", \"Mauritius\", \"Malawi\", \"Malaysia\",\"Namibia\", \"New Caledonia\", \"Niger\", \"Nigeria\", \"Nicaragua\",\"Netherlands\", \"Norway\", \"Nepal\", \"New Zealand\", \"Oman\",\"Pakistan\", \"Panama\", \"Peru\", \"Philippines\", \"Papua New Guinea\",\"Poland\", \"Puerto Rico\", \"Portugal\", \"Paraguay\", \"Palestine\",\"French Polynesia\", \"Qatar\", \"Romania\", \"Russia\", \"Rwanda\",\"Saudi Arabia\", \"Sudan\", \"Senegal\", \"Singapore\", \"Solomon Islands\",\"Sierra Leone\", \"El Salvador\", \"San Marino\", \"Somalia\", \"Serbia\",\"South Sudan\", \"Sao Tome and Principe\", \"Suriname\", \"Slovakia\",\"Slovenia\", \"Sweden\", \"Swaziland\" ,\"Seychelles\", \"Syria\", \"Turks and Caicos Islands\", \"Chad\", \"Togo\",\"Thailand\", \"Tajikistan\", \"Timor\", \"Trinidad and Tobago\",\"Tunisia\", \"Turkey\", \"Taiwan\", \"Tanzania\", \"Uganda\", \"Ukraine\",\"Uruguay\", \"United States\", \"Uzbekistan\", \"Vatican\",\"Saint Vincent and the Grenadines\", \"Venezuela\",\"British Virgin Islands\", \"United States Virgin Islands\",\"Vietnam\", \"Vanuatu\", \"Wallis and Futuna\", \"Kosovo\", \"Yemen\",\"South Africa\", \"Zambia\", \"Zimbabwe\", \"World\", \"International\"]\nApply_Rolling = 5 #@param {type:\"slider\", min:1, max:30, step:1}\nPlot_Method = \"Mean\" #@param [\"None\", \"Median\", \"Mean\", \"Max\", \"Min\"]\n\nFill_Below = True #@param {type:\"boolean\"}\ndata = World_[World_.location == Location]\nPlot_Column = Plot_Column.split(' ')\n\nn_cols = len(World_['Month'].unique())\nn_rows = len(Plot_Column)\nplot_color = list(sns.color_palette(Style_Color,n_colors=n_rows*n_cols).as_hex())\nplt.figure(figsize = (Graphs_Width*4.5,int(Graphs_Height\/2)*n_rows))\ni=0\nMonths = data['Month'].unique()\nfor plot_row in Plot_Column:\n  for col in Months:\n    temp = data[data['Month'] == col].reset_index(drop = True)\n    plt.subplot( n_rows , n_cols , i+1)\n    if Plot_Method == 'Mean':\n      plt.plot(temp[plot_row].rolling(Apply_Rolling, min_periods = 1).mean() , color = plot_color[i] , label = '{} Rolling Mean'.format(col))\n    elif Plot_Method == 'Median':\n      plt.plot(temp[plot_row].rolling(Apply_Rolling, min_periods = 1).median() , color = plot_color[i] , label = '{} Rolling Median'.format(col))\n    elif Plot_Method == 'Max':\n      plt.plot(temp[plot_row].rolling(Apply_Rolling, min_periods = 1).max() , color = plot_color[i] , label = '{} Rolling Max'.format(col))\n    elif Plot_Method == 'Min':\n      plt.plot(temp[plot_row].rolling(Apply_Rolling, min_periods = 1).min() , color = plot_color[i] , label = '{} Rolling Min'.format(col))\n    else:\n      plt.plot(temp[plot_row] , color = plot_color[i] , label = '{}'.format(col))\n      \n    if Fill_Below:\n      plt.fill_between(list(temp.index) ,0, temp[plot_row] ,color = plot_color[i] , alpha =0.4, label = '{}'.format(col))\n  \n    plt.legend()\n    plt.title('{}  in Month {}'.format(plot_row.replace('_',' (Per Day) ') , col) , fontsize = 19)\n    i+=1\nplt.plot()\n","1c94ea10":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn2.iconfinder.com\/data\/icons\/coronavirus-118\/82\/coronavirus_corona-15-512.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Plot Corona Virus Cases in States of India<\/h2><\/center><br>\nSort_By = \"Confirmed\" #@param ['Confirmed', 'Recovered', 'Deceased','Active','Confirmed_','Recovered_','Deceased_','Tested','Death Rate (per 100)','Cure Rate (per 100)']\nPlot_Top = 19 #@param {type:\"slider\", min:1, max:30, step:1}\nDate = \"2020-12-18\" #@param {type:\"date\"}\n\n# Date = '2020-'+Plot_Month.zfill(2)+'-'+Plot_Date.zfill(2)\nif Date not in Completed_['Date'].unique():\n  Date = Completed_['Date'].max()\ndisplay(Markdown(\"<h2> STATE WISE CONFIRMED, DEATH AND CURED CASES of 2019-nCoV AS OF {}<\/h2>\".format(Date)))\n\n\ntemp = Completed_[Completed_['State']!='India'].reset_index(drop = True)\ntemp[temp['Date'] == Date][['State','Confirmed', 'Recovered', 'Deceased','Active','Confirmed_','Recovered_','Deceased_','Tested','Death Rate (per 100)','Cure Rate (per 100)']]\\\n                        .sort_values(Sort_By, ascending= False).fillna(0)\\\n                        .iloc[:Plot_Top].style\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deceased\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Death Rate (per 100)\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Cure Rate (per 100)\"])\\\n                        .background_gradient(cmap='crest',subset=[\"Confirmed_\"])\\\n                        .background_gradient(cmap='PuRd',subset=[\"Recovered_\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Deceased_\"])\\\n                        .background_gradient(cmap='rocket',subset=[\"Tested\"])\\","72baa7fd":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/media.9curry.com\/uploads\/state\/image\/2\/Uttar_Pradesh.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Plot Corona Virus Cases in States of India<\/h2><\/center><br>\nPlot_Status = \"Plot Cumulative Graph\" #@param [\"Plot Cumulative Graph\" , \"Plot Today's Graph\"]\nPlot_Only = \"Confirmed, Recovered and Deceased Cases\" #@param [\"Confirmed, Recovered and Deceased Cases\", \"Confirmed Cases\", \"Recovered Cases\", \"Deceased Cases\", \"Other Cases\" , \"Tests Cases\", \"Active Cases\"]\nPlot_Top = 20 #@param {type:\"slider\", min:0, max:30, step:1}\nDate = \"2020-12-19\" #@param {type:\"date\"}\nPopulation_Ratio = True #@param {type:\"boolean\"}\n\nif Date not in date_unique:\n  display(Markdown('<h3> Invalid Date Encountered.. <br>Setting Date to last Date<\/h3>'))\n  time.sleep(2)\n  Date = date_unique[-1]\ndisplay(Markdown(\"<center><h2>Bar Plot of Most Effected States of India of SARS-CoV-2 On {} \\n<\/h2><\/center>\".format( Date)))\n\nif Plot_Status == 'Plot Cumulative Graph':\n  plot_using = ['Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active']\nelse:\n  plot_using = ['Confirmed_', 'Recovered_', 'Deceased_', 'Other_', 'Tested_', 'Active']\n\nstate_cases = Completed_[Completed_.Date == Date]\nif Population_Ratio:\n  for i in plot_using:\n    state_cases[i] = state_cases[i]\/state_cases['Population']\n\n\nif Plot_Only == \"Confirmed, Recovered and Deceased Cases\":\n  state_cases=state_cases.sort_values(plot_using[0], ascending= False)\n  total_cases = state_cases[plot_using[0]].sum()\nelif Plot_Only == 'Confirmed Cases':\n  state_cases=state_cases.sort_values(plot_using[0], ascending= False)\n  total_cases = state_cases[plot_using[0]].sum()\nelif Plot_Only == 'Recovered Cases':\n  state_cases=state_cases.sort_values(plot_using[1], ascending= False)\n  total_cases = state_cases[plot_using[1]].sum()\nelif Plot_Only == 'Deceased Cases':\n  state_cases=state_cases.sort_values(plot_using[2], ascending= False)\n  total_cases = state_cases[plot_using[2]].sum()\nelif Plot_Only == 'Other Cases':\n  state_cases=state_cases.sort_values(plot_using[3], ascending= False)\n  total_cases = state_cases[plot_using[3]].sum()\nelif Plot_Only == 'Tests Cases':\n  state_cases=state_cases.sort_values(plot_using[4], ascending= False)\n  total_cases = state_cases[plot_using[4]].sum()\nelse:\n  state_cases=state_cases.sort_values(plot_using[5], ascending= False)\n  total_cases = state_cases[plot_using[5]].sum()\n\n# state_cases=state_cases.sort_values(plot_using[0], ascending= False)\n# total_cases = state_cases[plot_using[0]].sum()\nstate_cases=state_cases[state_cases.State!='India'].head(int(Plot_Top))\nplt.figure(figsize=(Graphs_Width,Graphs_Height))\nax = plt.subplot(1,1,1)\nplt.suptitle(Sup_Title, fontsize = 29)\nplt.title('\\n{} of Top {} States with SARS-CoV-2 Cases On {} \\n'.format(Plot_Status , Plot_Top , Date) , fontsize = 19)\nif Plot_Only == \"Confirmed, Recovered and Deceased Cases\":\n  graph = sns.barplot(data = state_cases , y='State', x = plot_using[0] , saturation = Plot_Saturation, alpha = Plot_Alpha , color =Style_Palettes[0] , label = plot_using[0]+' Cases' , ci = 'sd' , orient = 'h')\n  sns.barplot(data=state_cases,y='State',x = plot_using[1] , saturation = Plot_Saturation, alpha = Plot_Alpha, color =Style_Palettes[1], label = plot_using[1]+' Cases' , ci = 'sd' , orient = 'h')\n  sns.barplot(data=state_cases,y='State',x= plot_using[2] , saturation = Plot_Saturation , alpha = Plot_Alpha, color =Style_Palettes[2], label = plot_using[2]+' Cases' , ci = 'sd' , orient = 'h')\n  plt.xlim(0,state_cases[plot_using[0]].max()+state_cases[plot_using[0]].max()\/10 )\n\nelif Plot_Only == 'Confirmed Cases':\n  graph = sns.barplot(data = state_cases , y='State', x = plot_using[0] , saturation = Plot_Saturation, alpha = Plot_Alpha , palette =Style_Color , label = plot_using[0]+' Cases' , ci = 'sd' , orient = 'h')\n  plt.xlim(0,state_cases[plot_using[0]].max()+state_cases[plot_using[0]].max()\/10 )\nelif Plot_Only == 'Recovered Cases':\n  graph = sns.barplot(data=state_cases,y='State',x = plot_using[1] , saturation = Plot_Saturation, alpha = Plot_Alpha, palette =Style_Color, label = plot_using[1]+' Cases' , ci = 'sd' , orient = 'h')\n  plt.xlim(0,state_cases[plot_using[1]].max()+state_cases[plot_using[1]].max()\/10 )\n\nelif Plot_Only == 'Deceased Cases':\n  graph = sns.barplot(data=state_cases,y='State',x= plot_using[2] , saturation = Plot_Saturation , alpha = Plot_Alpha, palette =Style_Color, label = plot_using[2]+' Cases' , ci = 'sd' , orient = 'h')\n  plt.xlim(0,state_cases[plot_using[2]].max()+state_cases[plot_using[2]].max()\/10 )\n\nelif Plot_Only == 'Other Cases':\n  graph = sns.barplot(data=state_cases,y='State',x= plot_using[3] , saturation = Plot_Saturation , alpha = Plot_Alpha, palette =Style_Color, label = plot_using[3]+' Cases' , ci = 'sd' , orient = 'h')\n  plt.xlim(0,state_cases[plot_using[3]].max()+state_cases[plot_using[3]].max()\/10 )\n\nelif Plot_Only == 'Tests Cases':\n  graph = sns.barplot(data=state_cases,y='State',x= plot_using[4] , saturation = Plot_Saturation , alpha = Plot_Alpha, palette =Style_Color, label = plot_using[4]+' Cases' , ci = 'sd' , orient = 'h')\n  plt.xlim(0,state_cases[plot_using[4]].max()+state_cases[plot_using[4]].max()\/10 )\n\nelse:\n  graph = sns.barplot(data=state_cases,y='State',x= plot_using[5] , saturation = Plot_Saturation , alpha = Plot_Alpha, palette =Style_Color, label = plot_using[5]+' Cases' , ci = 'sd' , orient = 'h')\n  plt.xlim(0,state_cases[plot_using[5]].max()+state_cases[plot_using[5]].max()\/10 )\n\n\n# plt.xticks(rotation=90)\nplt.ylabel('States (India)')\nplt.xlabel('Number of Cases')\n# plt.xlim(0,Completed_['Confirmed'].max()+Completed_['Confirmed'].max()\/10 )\n# plt.xlim(0,state_cases[plot_using[0]].max()+state_cases[plot_using[0]].max()\/10 )\nplt.legend(loc = 8)\nanchored_text = AnchoredText(\"Month : {}\\nDays Passed : {}\\nTotal Cases (Sum): {}\".format(state_cases.Month.unique()[0] ,  state_cases.Days_Passed.unique()[0],int(total_cases)), borderpad=1.0, pad = 1.0, loc=7 , frameon= True )\nax.add_artist(anchored_text)\n# plt.text(0.95, 0.01, 'colored text in axes coords',\n#         verticalalignment='bottom', horizontalalignment='right',\n#         color='green', fontsize=15)\nfor p in graph.patches[:int(Plot_Top)]:\n  _x = p.get_x() + p.get_width() \n  _y = p.get_y() + p.get_height()\/2 + float(0.2)\n  value = ((p.get_width()\/total_cases)*100)\n  if np.isnan(value):\n    value = 0.0\n  graph.text(_x , _y , ' {:.2f}%'.format(value) , ha = 'left', color = sns.color_palette('rocket')[1])\nplt.subplots_adjust(top=SubPlot_Top)\n\nplt.savefig(File_Prefix+'India States Bar Plot  on {} _{}.{}'.format(Date , time.time() , Format_To_Save) , bbox_inches = 'tight')","5d5d401b":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn4.iconfinder.com\/data\/icons\/coronavirus-1\/512\/wuhan-coronavirus-virus-outbreak-14-512.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Plot Tested & Negative of COVID-19 Virus in States of India<\/h2><\/center><br>\nPlot_Top = 20 #@param {type:\"slider\", min:0, max:30, step:1}\nDate = \"2020-12-18\" #@param {type:\"date\"}\nPopulation_Ratio = True #@param {type:\"boolean\"}\n\nif Date not in date_unique:\n  display(Markdown('<h3> Invalid Date Encountered.. <br>Setting Date to last Date<\/h3>'))\n  time.sleep(2)\n  Date = date_unique[-1]\ndisplay(Markdown(\"<center><h2>Bar Plot of Most Tested States of India of SARS-CoV-2 On {} \\n<\/h2><\/center>\".format( Date)))\n\nplot_using = ['Tested_', 'Negative' , 'Confirmed_']\nstate_cases = Completed_[Completed_.Date == Date]\nif Population_Ratio:\n  for i in plot_using:\n    state_cases[i] = state_cases[i]\/state_cases['Population']\nstate_cases=state_cases[state_cases.State!='India'].head(int(Plot_Top))\n\nstate_cases=state_cases.sort_values('Tested_', ascending= False)\nstate_cases=state_cases.head(20)\n\ntotal_cases = state_cases['Tested_'].sum()\nplt.figure(figsize=(Graphs_Width,Graphs_Height))\nax = plt.subplot(1,1,1)\nplt.suptitle(Sup_Title, fontsize = 29)\nplt.title('\\n{} of Top {} States with SARS-CoV-2 Cases On {} \\n'.format(Plot_Status , Plot_Top , Date) , fontsize = 19)\n\ngraph = sns.barplot(data = state_cases , y='State', x = plot_using[0] , saturation = Plot_Saturation, alpha = Plot_Alpha , color =Style_Palettes[0] , label = plot_using[0]+' Cases' , ci = 'sd' , orient = 'h')\nsns.barplot(data=state_cases,y='State',x = plot_using[1] , saturation = Plot_Saturation, alpha = Plot_Alpha, color =Style_Palettes[1], label = plot_using[1]+' Cases' , ci = 'sd' , orient = 'h')\nsns.barplot(data=state_cases,y='State',x= plot_using[2] , saturation = Plot_Saturation , alpha = Plot_Alpha, color =Style_Palettes[2], label = plot_using[2]+' Cases' , ci = 'sd' , orient = 'h')\nplt.xlim(0,state_cases[plot_using[0]].max()+state_cases[plot_using[0]].max()\/10 )\n\nplt.ylabel('States (India)')\nplt.xlabel('Number of Tests')\n\nplt.legend(loc = 8)\nanchored_text = AnchoredText(\"Month : {}\\nDays Passed : {}\\nTotal Tests  Today : {}\".format(state_cases.Month.unique()[0] ,  state_cases.Days_Passed.unique()[0],int(total_cases)), borderpad=1.0, pad = 1.0, loc=7 , frameon= True )\nax.add_artist(anchored_text)\n\nfor p in graph.patches[:20]:\n  _x = p.get_x() + p.get_width() \n  _y = p.get_y() + p.get_height()\/2 + float(0.2)\n  value = ((p.get_width()\/total_cases)*100)\n  if np.isnan(value):\n    value = 0.0\n  graph.text(_x , _y , ' {:.5f}%'.format(value) , ha = 'left', color = sns.color_palette('rocket')[1])\nplt.subplots_adjust(top=SubPlot_Top)\n\nplt.savefig(File_Prefix+'India States Tested Bar Plot  on {} _{}.{}'.format(Date , time.time() , Format_To_Save) , bbox_inches = 'tight')","88148c7a":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn.pixabay.com\/photo\/2013\/07\/13\/12\/36\/india-159941_960_720.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Plot Corona Virus Cases in India<\/h2><\/center><br>\nPlot_Column = \"C\/R\/D\" #@param ['C\/R\/D' , 'C\/R\/D\/A', 'C\/R\/D(Daily)' ,'Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_', 'Negative']\nLocation = \"UP\" #@param ['Kerala', 'Delhi', 'Telangana', 'India', 'Rajasthan', 'Haryana','UP', 'Ladakh', 'TN', 'J&K', 'Karnataka', 'Maharashtra', 'Punjab','Andra P', 'HP', 'Uttarakhand', 'Odisha', 'Puducherry','West Bengal', 'Chandigarh', 'Chhattisgarh', 'Gujarat', 'MP','Bihar', 'Manipur', 'Goa', 'Mizoram', 'A&N', 'Assam', 'Jharkhand','Arun P', 'Nagaland', 'Tripura', 'D&D', 'Meghalaya', 'Sikkim','Other']\nRegression_Power = 1 #@param {type:\"slider\", min:0, max:20, step:1}\nApply_Rolling_Mean = 7 #@param {type:\"slider\", min:0, max:30, step:1}\nTrain_on_days_from = 42 #@param {type:\"slider\", min:20, max:300, step:1}\nPredict_of_future_days = 15 #@param {type:\"slider\", min:0, max:200, step:1}\nBar_Plot = 25 #@param {type:\"slider\", min:0, max:30, step:1}\nPlot_Lib = \"Plotly\" #@param [\"Plotly\", \"MatplotLib\"]\n\nLine_Plot = True #@param {type:\"boolean\"}\nUse_Log = True #@param {type:\"boolean\"}\nDate = 'Date'\ndisplay(Markdown(\"<center><h2>Line Plot of {} By SARS-CoV-2<\/h2><\/center>\".format(Location)))\n\nif Plot_Column == 'C\/R\/D':\n  Plot_Column = ['Confirmed' , 'Recovered' , 'Deceased']\nelif Plot_Column == 'C\/R\/D\/A':\n  Plot_Column = ['Confirmed' , 'Recovered' , 'Deceased' , 'Active']\nelif Plot_Column == 'C\/R\/D(Daily)':\n  Plot_Column = ['Confirmed_' , 'Recovered_' , 'Deceased_']\nelse:\n  Plot_Column = [Plot_Column]\ndata = Completed_[Completed_.State == Location]\nbar_data = data.resample('M').mean()\ntimes = pd.date_range(data[Date].min(), periods = data.shape[0]+Predict_of_future_days , freq='D')\nif Use_Log:\n  bar_data[Plot_Column[0]] = np.log1p(bar_data[Plot_Column[0]])\nplot_color = list(sns.color_palette(Style_Color,n_colors=len(Plot_Column)*2).as_hex())\nif Plot_Lib == 'MatplotLib':\n  plt.figure(figsize=(Graphs_Width,Graphs_Height))\n  if Bar_Plot:\n    plt.bar(bar_data.index, bar_data[Plot_Column[0]], align = 'edge',width = -Bar_Plot , linewidth = 0 , color = list(sns.color_palette(Style_Color,n_colors=len(bar_data[Plot_Column].values)).as_hex()) , alpha = .9 ,label = 'Monthly Average')\n\n  for col,i in enumerate(Plot_Column):\n    data[i] = data[i].rolling(Apply_Rolling_Mean, min_periods = 1).mean()\n    if Use_Log:\n      data[i] = np.log1p(data[i])\n    if Line_Plot:\n      plt.plot(data[i], label = '{} Cases(per day)'.format(i.replace('_',' (Daily)').title()) , color = plot_color[col*2] )\n    if Regression_Power:\n      model = np.poly1d(np.polyfit(data['Days_Passed'].values[Train_on_days_from-20:], data[i].values[Train_on_days_from-20:], Regression_Power))\n      polyline = np.linspace(Train_on_days_from, data['Days_Passed'].max()+Predict_of_future_days, len(times[Train_on_days_from:])) \n      plt.plot( pd.Series([0 if i<0 else i for i in model(polyline)] , index = times[Train_on_days_from:])  , label = 'Predicted {} Cases'.format(i.replace('_',' (Daily)').title()) , color = plot_color[1])\n\n  plt.suptitle(Sup_Title, fontsize = 29)\n  plt.title('\\nLine Plot in {} with SARS-CoV-2 Cases  \\n'.format(Location ) , fontsize = 19)\n\n  plt.legend()\n  plt.ylabel('Cases')\n  plt.xlabel('Days Passed Since {}'.format(Completed_['Date'].min()))\n  plt.subplots_adjust(top=SubPlot_Top)\n  plt.savefig(File_Prefix+'Time Series India State Reg Plot  on {} _{}.{}'.format(Completed_[Date].max() , time.time() , Format_To_Save) , bbox_inches = 'tight')\nelse:\n  fig=go.Figure()\n  for col,i in enumerate(Plot_Column):\n    if Use_Log:\n      data[i] = np.log1p(data[i])\n    if Regression_Power:\n      model = np.poly1d(np.polyfit(data['Days_Passed'].values[Train_on_days_from-20:], data[i].values[Train_on_days_from-20:], Regression_Power))\n      polyline = np.linspace(Train_on_days_from, data['Days_Passed'].max()+Predict_of_future_days, len(times[Train_on_days_from:])) \n      reg_plot = pd.Series([0 if i<0 else i for i in model(polyline)] , index = times[Train_on_days_from:])  \n      fig.add_trace(go.Scatter(x = reg_plot.index ,y = reg_plot , mode = 'lines' , name = ' Fitted Line on {} '.format(i.replace('_',' ').title())))\n    if Apply_Rolling_Mean > 1:\n      data[i] = data[i].rolling(Apply_Rolling_Mean, min_periods = 1).mean()\n    fig.add_trace(go.Scatter(x = data.index , y = data[i] , mode = 'lines' , name = '{} Cases'.format(i.replace('_',' ').title() ) ) )\n  if Bar_Plot:\n    fig.add_trace(go.Bar(x = bar_data.index,y = bar_data[Plot_Column[0]] , name = 'Monthly Average Confirmed Cases', marker=dict(color = list(sns.color_palette(Style_Color,n_colors=len(bar_data[Plot_Column[0]].values)).as_hex()))))\n  fig.update_layout(title='Cases of {} SARS-CoV-2 \\n'.format(Location),\n                  xaxis_title='Days Passed Since {}'.format(data[Date].min()),yaxis_title=\"Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"),\n                  height =Graphs_Height*96\/3)\n  fig.show()","cdb51d68":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/assets.website-files.com\/5d9ba0eb5f6edb77992a99d0\/5e62506c9394b24aa66cf385_iconfinder_connection-route-spread-virus-global_5728179.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Top Effected States by Corona Virus<\/h2><\/center><br>\n\nPlot_Column = \"Confirmed_\" #@param ['Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_', 'Negative']\nUse_Method = \"mean\" #@param [\"sum\", \"mean\", \"max\", \"median\", \"min\", \"std\", \"var\"]\nPlot_top = 4 #@param {type:\"slider\", min:0, max:100, step:1}\nApply_Rolling_Mean = 11 #@param {type:\"slider\", min:1, max:30, step:1}\nPlot_Lib = \"MatplotLib\" #@param [\"Plotly\", \"MatplotLib\"]\nFill_Alpha = 0.13 #@param {type:\"slider\", min:0, max:1, step:0.01}\nUse_Log = False #@param {type:\"boolean\"}\nDate = 'Date'\n\ndisplay(Markdown(\"<center><h2>Line Plot for {} Most Effected Indian States By SARS-CoV-2<\/h2><\/center>\".format(Plot_top)))\n\nLocations = Completed_.groupby('State').agg({Plot_Column:Use_Method}).sort_values(by=[Plot_Column] , ascending = False).reset_index()['State'].head(Plot_top+1).values\nplot_color = list(sns.color_palette(Style_Color,n_colors=len(Locations)*2).as_hex())\n\n\nif Plot_Lib == 'MatplotLib':\n  plt.figure(figsize=(Graphs_Width,Graphs_Height))\n  for i,Location in enumerate(Locations):\n    if Location in Completed_.State.unique() and Location != 'India' :\n      data = Completed_[Completed_.State == Location]\n      data[Plot_Column] = data[Plot_Column].rolling(Apply_Rolling_Mean, min_periods = 1).mean()\n\n      if Use_Log:\n        data[Plot_Column] = np.log1p(data[Plot_Column])\n      if Fill_Alpha:\n        plt.fill_between(data.index , 0 , data[Plot_Column], color =  plot_color[i] , alpha = Fill_Alpha)\n      plt.plot(data.index , data[Plot_Column], label = '{}'.format(Location) , color = plot_color[i*2] )\n\n  plt.suptitle(Sup_Title, fontsize = 29)\n  plt.title('{} Cases of  SARS-CoV-2 in States \\n'.format(Plot_By.replace('_',' (Daily)').title() ) , fontsize = 19)\n  plt.legend()\n  plt.ylabel('Cases')\n  plt.xlabel('Days Passed Since {}'.format(Completed_['Date'].min()))\n  plt.subplots_adjust(top=SubPlot_Top)\n  plt.savefig(File_Prefix+'Time Series Top Effected India  Reg Plot  on {} _{}.{}'.format(World_.date.max() , time.time() , Format_To_Save) , bbox_inches = 'tight')\n\nelse:\n  fig=go.Figure()\n  for i,Location in enumerate(Locations):\n    if Location in Completed_.State.unique() and Location != 'India' :\n      data = Completed_[Completed_.State == Location]\n      data[Plot_Column] = data[Plot_Column].rolling(Apply_Rolling_Mean, min_periods = 1).mean()\n\n      if Use_Log:\n        data[Plot_Column] = np.log1p(data[Plot_Column])\n\n      fig.add_trace(go.Scatter(x = data.index , y = data[Plot_Column] , mode = 'lines' , name = '{}'.format(Location) ) ) \n  \n  fig.update_layout(title='Top {} Cases In India of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' (Daily)').title()  ),\n                  xaxis_title='Days Passed Since {}'.format(data[Date].min()),yaxis_title=\"Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"),\n                  height =Graphs_Height*96\/3)\n  fig.show()","1fb3c7c1":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/images.vexels.com\/media\/users\/3\/151175\/isolated\/preview\/c8cccfd752a2c029daaa084aca6bb2bc-percent-pie-chart-doodle-by-vexels.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Pie Plot of Corona Virus Cases in States of India (Pie Chart)<\/h2><\/center><br>\nPlot_By = \"Confirmed\" #@param ['Confirmed', 'Recovered', 'Deceased','Tested','Active','Confirmed_', 'Recovered_', 'Deceased_','Death Rate (per 100)','Cure Rate (per 100)']\nDate = \"2020-12-18\" #@param {type:\"date\"}\nPopulation_Ratio = True #@param {type:\"boolean\"}\n\nif Date not in date_unique:\n  display(Markdown('<h3> Invalid Date Encountered.. <br>Setting Date to last Date<\/h3>'))\n  time.sleep(2)\n  Date = date_unique[-1]\n\nif Date not in Completed_['Date'].unique():\n  Date = Completed_['Date'].max()\ndisplay(Markdown(\"<h2> State WISE PIE CHART CASES of 2019-nCoV AS OF {}<\/h2>\".format(Date )))\n\ntemp = Completed_[Completed_['State']!= 'India']\n\nif Population_Ratio:\n  temp[Plot_By] = temp[Plot_By]\/temp['Population']\nfig = px.sunburst(temp[temp['Date'] == Date].sort_values(by=Plot_By, ascending=False).reset_index(drop=True), \n                  path=[ \"State\"], values=Plot_By, height=700,\n                 title='Number of {} Reported as of {}'.format(Plot_By.replace('_',' (New) ').title() , Date),\n                 color_discrete_sequence = px.colors.qualitative.Prism ,)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\n\n","c92606a2":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/s3.amazonaws.com\/iconbros\/icons\/icon_pngs\/000\/000\/566\/original\/pie-chart.png?1511983049' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Pie Plot of Corona Virus Cases for Different Months in States of India (Pie Chart)<\/h2><\/center><br>\n \nUse_Method = \"mean\" #@param [\"sum\", \"mean\", \"max\", \"median\", \"min\", \"std\", \"var\"]\nPlot_Column = \"Death Rate (per 100)\" #@param ['Confirmed', 'Recovered', 'Deceased', 'Other','Tested', 'Active', 'Death Rate (per 100)','Cure Rate (per 100)']\nMonth_After_State = False #@param {type:\"boolean\"}\n \ntemp = Completed_.groupby(['Month','State'], as_index = False).agg({ Plot_Column:[Use_Method] })\ntemp.columns =  [' '.join(col).strip() for col in temp.columns.values]\n \nif Month_After_State:\n  Paths = [ \"State\" , \"Month\"]\nelse:\n  Paths = [ \"Month\" , \"State\"]\n \nfig = px.sunburst(temp[temp['State']!='India'].sort_values(by=Plot_Column + ' ' + Use_Method, ascending=False).reset_index(drop=True), \n                  path=Paths, values=Plot_Column  + ' ' +  Use_Method, height=700,\n                 title='Number of {} Reported'.format((Plot_Column  + ' ' + Use_Method).replace('_',' (New) ').title()),\n                 color_discrete_sequence = px.colors.qualitative.Prism ,)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","08dd5a0f":"#@markdown <h3>\u2b05\ufe0f Click Here to START Fitting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn0.iconfinder.com\/data\/icons\/chart-22\/20\/chart_box_plot-256.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2><br>Mathematical functions on Data<\/h2><\/center><br>\n\nPlot_Column = \"Confirmed\" #@param ['Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_']\nLocation = \"India\" #@param ['Kerala', 'Delhi', 'Telangana', 'India', 'Rajasthan', 'Haryana','UP', 'Ladakh', 'TN', 'J&K', 'Karnataka', 'Maharashtra', 'Punjab','Andra P', 'HP', 'Uttarakhand', 'Odisha', 'Puducherry','West Bengal', 'Chandigarh', 'Chhattisgarh', 'Gujarat', 'MP','Bihar', 'Manipur', 'Goa', 'Mizoram', 'A&N', 'Assam', 'Jharkhand','Arun P', 'Nagaland', 'Tripura', 'D&D', 'Meghalaya', 'Sikkim','Other']\nPlt_Col = 4 #@param {type:\"slider\", min:1, max:6, step:1}\nDate = 'Date'\n\ndata = Completed_[Completed_['State'] == Location]\nfreq = []\n\n# freq.append([np.spacing(data[Plot_Column]).values , 'Spacing Function'])\nfreq.append([data[Plot_Column].values.reshape(-1)  , 'Original Data'])\nfreq.append([data[Plot_Column].diff().values.reshape(-1)  , 'Difference of Original Data'])\nfreq.append([np.log1p(data[Plot_Column]).values.reshape(-1) , 'Log1p Fuction'])\nfreq.append([np.log1p(data[Plot_Column]).diff().values.reshape(-1) , 'Difference of Log1p Fuction'])\nfreq.append([np.sqrt(data[Plot_Column]).values.reshape(-1) , 'Square Root Function'])\nfreq.append([np.sqrt(data[Plot_Column]).diff().values.reshape(-1) , 'Difference of Square Root Function'])\nfreq.append([np.cbrt(data[Plot_Column]).values.reshape(-1) , 'Cube Root Function'])\nfreq.append([np.cbrt(data[Plot_Column]).diff().values.reshape(-1) , 'Difference of Cube Root Function'])\nfreq.append([np.sqrt(np.sqrt(data[Plot_Column])).values.reshape(-1) , 'Quad Root Function'])\nfreq.append([np.sqrt(np.sqrt(data[Plot_Column])).diff().values.reshape(-1) , 'Difference of Quad Root Function'])\nfreq.append([np.square(data[Plot_Column]).values.reshape(-1) , 'Square Function'])\nfreq.append([np.square(data[Plot_Column]).diff().values.reshape(-1) , 'Difference of Square Function'])\nfreq.append([preprocessing.MinMaxScaler().fit_transform(data[Plot_Column].values.reshape(-1,1)).reshape(-1) , 'Min Max Scaler Function'])\nfreq.append([preprocessing.RobustScaler().fit_transform(data[Plot_Column].values.reshape(-1,1)).reshape(-1) , 'Robust Scaler Function'])\nfreq.append([preprocessing.StandardScaler().fit_transform(data[Plot_Column].values.reshape(-1,1)).reshape(-1) , 'Standard Scaler Function'])\nfreq.append([preprocessing.PowerTransformer().fit_transform(data[Plot_Column].values.reshape(-1,1)).reshape(-1) , 'Power Transformer Scaler'])\nfreq.append([sm.tsa.filters.bkfilter(data[Plot_Column]).values.reshape(-1) , 'BKFilter Band Pass Filter'])\nfreq.append([sm.tsa.filters.hpfilter(data[Plot_Column])[1].values.reshape(-1) , 'HPFilter Smoothing Filter'])\nfreq.append([BoxCoxEndogTransformer().fit_transform(data[Plot_Column]+0.00000001)[0], 'BoxCoxEndogTransformer Filter'])\n\nplot_color = list(sns.color_palette(Style_Color,n_colors=len(freq)).as_hex())\nPlt_Row = math.ceil(len(freq)\/Plt_Col)\nplt.figure(figsize=(Graphs_Width,Graphs_Height*Plt_Row\/Plt_Col))\n\nfor i,j in enumerate(freq):\n  plt.subplot(Plt_Row , Plt_Col , i+1)\n  # plt.bar(range(len(j[0])) , j[0], width = 0.2 , linewidth = 0 , color = list(sns.color_palette(Style_Color,n_colors=len(j[0])).as_hex()) )\n  plt.plot(j[0], label = j[1] , color = plot_color[i])\n  plt.fill_between(list(range(len(j[0]))) ,0, j[0] ,color = plot_color[i] , alpha =0.4)\n  \n  plt.legend(loc = 2)\n  # plt.title(j[1]+' Over Data')\n  # plt.xlabel('Days Passed Since {}'.format(data.Date.min()))\n  \nplt.suptitle(Sup_Title, fontsize = 29)\nplt.subplots_adjust(top=SubPlot_Top)","b02b4570":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn2.iconfinder.com\/data\/icons\/round-varieties\/60\/Rounded_-_High_Ultra_Colour19_-_Graph-256.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Month Wise Effect of Corona Virus in States of India<\/h2><\/center><br>\n\nPlot_Column = \"Confirmed Recovered Deceased Confirmed_ Recovered_ Deceased_ Tested Active Death-Rate-(per-100) Cure-Rate-(per-100)\" #@param ['Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_', 'Negative', 'Confirmed Recovered Deceased','Confirmed_ Recovered_ Deceased_','Confirmed Recovered Deceased Confirmed_ Recovered_ Deceased_','Confirmed Recovered Deceased Confirmed_ Recovered_ Deceased_ Tested Active Death-Rate-(per-100) Cure-Rate-(per-100)']\nLocation = \"India\" #@param ['Kerala', 'Delhi', 'Telangana', 'India', 'Rajasthan', 'Haryana','UP', 'Ladakh', 'TN', 'J&K', 'Karnataka', 'Maharashtra', 'Punjab','Andra P', 'HP', 'Uttarakhand', 'Odisha', 'Puducherry','West Bengal', 'Chandigarh', 'Chhattisgarh', 'Gujarat', 'MP','Bihar', 'Manipur', 'Goa', 'Mizoram', 'A&N', 'Assam', 'Jharkhand','Arun P', 'Nagaland', 'Tripura', 'D&D', 'Meghalaya', 'Sikkim','Other']\nApply_Rolling = 10 #@param {type:\"slider\", min:1, max:30, step:1}\nPlot_Method = \"Median\" #@param [\"None\", \"Median\", \"Mean\", \"Max\", \"Min\"]\n\nFill_Below = True #@param {type:\"boolean\"}\ndata = Completed_[Completed_.State == Location]\nPlot_Column = Plot_Column.split(' ')\n\n\nn_cols = len(India_['Month'].unique())\nn_rows = len(Plot_Column)\nplot_color = list(sns.color_palette(Style_Color,n_colors=n_rows*n_cols).as_hex())\nplt.figure(figsize = (Graphs_Width*4.5,int(Graphs_Height\/2)*n_rows))\ni=0\n\nfor plot_row in Plot_Column:\n  plot_row = plot_row.replace('-',' ')\n  for col in data['Month'].unique():\n    temp = data[data['Month'] == col].reset_index(drop = True)\n    plt.subplot( n_rows , n_cols , i+1)\n    if Plot_Method == 'Mean':\n      plt.plot(temp[plot_row].rolling(Apply_Rolling, min_periods = 1).mean() , color = plot_color[i] , label = '{} Rolling Mean'.format(col))\n    elif Plot_Method == 'Median':\n      plt.plot(temp[plot_row].rolling(Apply_Rolling, min_periods = 1).median() , color = plot_color[i] , label = '{} Rolling Median'.format(col))\n    elif Plot_Method == 'Max':\n      plt.plot(temp[plot_row].rolling(Apply_Rolling, min_periods = 1).max() , color = plot_color[i] , label = '{} Rolling Max'.format(col))\n    elif Plot_Method == 'Min':\n      plt.plot(temp[plot_row].rolling(Apply_Rolling, min_periods = 1).min() , color = plot_color[i] , label = '{} Rolling Min'.format(col))\n    else:\n      plt.plot(temp[plot_row] , color = plot_color[i] , label = '{}'.format(col))\n      \n    if Fill_Below:\n      plt.fill_between(list(temp.index) ,0, temp[plot_row] ,color = plot_color[i] , alpha =0.4, label = '{}'.format(col))\n  \n    plt.legend()\n    plt.title('{}  in Month {}'.format(plot_row.replace('_',' (Per Day) ') , col) , fontsize = 19)\n    i+=1\nplt.plot()\n","c6ae0721":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/images.vexels.com\/media\/users\/3\/151175\/isolated\/preview\/c8cccfd752a2c029daaa084aca6bb2bc-percent-pie-chart-doodle-by-vexels.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Plot Corona Virus Cases in Countries of Districts of India (Pie Chart)<\/h2><\/center><br>\nPlot_By = \"Confirmed\" #@param ['Confirmed', 'Recovered', 'Deceased','Tested','Active']\nDate = \"2020-12-08\" #@param {type:\"date\"}\n\ndisplay(Markdown(\"<h2> District WISE PIE CHART CASES of 2019-nCoV<\/h2>\"))\nif Date not in District_['Date'].astype(str).unique():\n  Date = District_['Date'].max()\n\ntemp = District_[District_['District']!= 'Unknown']\nfig = px.sunburst(temp[temp['Date'] == Date].sort_values(by=Plot_By, ascending=False).reset_index(drop=True), \n                  path=[\"State\" , \"District\"], values=Plot_By, height=700,\n                 title='Number of {} Reported as {}'.format(Plot_By.replace('_',' (New) ').title() , Date),\n                 color_discrete_sequence = px.colors.qualitative.Prism ,)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","7c9169f4":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='http:\/\/www.pngpix.com\/wp-content\/uploads\/2016\/10\/PNGPIX-COM-Pie-Chart-PNG-Transparent-Image.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Plot Corona Virus Cases in District on Day (Pie Chart)<\/h2><\/center><br>\nPlot_District = \"Delhi\" #@param ['Agar Malwa', 'Agra', 'Ahmedabad', 'Ahmednagar','Airport Quarantine', 'Aizawl', 'Ajmer', 'Akola', 'Alappuzha','Aligarh', 'Alipurduar', 'Alirajpur', 'Almora', 'Alwar', 'Ambala','Ambedkar Nagar', 'Amethi', 'Amravati', 'Amreli', 'Amritsar','Amroha', 'Anand', 'Anantapur', 'Anantnag', 'Angul', 'Anjaw','Anuppur', 'Araria', 'Aravalli', 'Ariyalur', 'Arwal', 'Ashoknagar','Auraiya', 'Aurangabad', 'Ayodhya', 'Azamgarh', 'BSF Camp','Bagalkote', 'Bageshwar', 'Baghpat', 'Bahraich', 'Balaghat','Balangir', 'Balasore', 'Ballari', 'Ballia', 'Balod','Baloda Bazar', 'Balrampur', 'Bametara', 'Banaskantha', 'Banda','Bandipora', 'Banka', 'Bankura', 'Banswara', 'Barabanki','Baramulla', 'Baran', 'Bareilly', 'Bargarh', 'Barmer', 'Barnala','Barwani', 'Bastar', 'Basti', 'Bathinda', 'Beed', 'Begusarai','Belagavi', 'Bengaluru Rural', 'Bengaluru Urban', 'Betul','Bhadohi', 'Bhadrak', 'Bhagalpur', 'Bhandara', 'Bharatpur','Bharuch', 'Bhavnagar', 'Bhilwara', 'Bhind', 'Bhiwani', 'Bhojpur','Bhopal', 'Bidar', 'Bijapur', 'Bijnor', 'Bikaner', 'Bilaspur','Birbhum', 'Bokaro', 'Botad', 'Boudh', 'Budaun', 'Budgam','Bulandshahr', 'Buldhana', 'Bundi', 'Burhanpur', 'Buxar','Capital Complex', 'Chamarajanagara', 'Chamba', 'Chamoli','Champawat', 'Champhai', 'Chandauli', 'Chandigarh', 'Chandrapur','Changlang', 'Charkhi Dadri', 'Chatra', 'Chengalpattu', 'Chennai','Chhatarpur', 'Chhindwara', 'Chhota Udaipur', 'Chikkaballapura','Chikkamagaluru', 'Chitradurga', 'Chitrakoot', 'Chittoor','Chittorgarh', 'Churu', 'Coimbatore', 'Cooch Behar', 'Cuddalore','Cuttack', 'Dadra and Nagar Haveli', 'Dahod','Dakshin Bastar Dantewada', 'Dakshin Dinajpur', 'Dakshina Kannada','Daman', 'Damoh', 'Dang', 'Darbhanga', 'Darjeeling', 'Datia','Dausa', 'Davanagere', 'Dehradun', 'Delhi', 'Deogarh', 'Deoghar','Deoria', 'Devbhumi Dwarka', 'Dewas', 'Dhalai', 'Dhamtari','Dhanbad', 'Dhar', 'Dharmapuri', 'Dharwad', 'Dhenkanal', 'Dholpur','Dhule', 'Dimapur', 'Dindigul', 'Dindori', 'Diu', 'Doda', 'Dumka','Dungarpur', 'Durg', 'East Champaran', 'East Garo Hills','East Godavari', 'East Jaintia Hills', 'East Kameng','East Khasi Hills', 'East Siang', 'East Singhbhum', 'Ernakulam','Erode', 'Etah', 'Etawah', 'Evacuees', 'Faridabad', 'Faridkot','Farrukhabad', 'Fatehabad', 'Fatehgarh Sahib', 'Fatehpur','Fazilka', 'Ferozepur', 'Firozabad', 'Foreign Evacuees', 'Gadag','Gadchiroli', 'Gajapati', 'Ganderbal', 'Gandhinagar', 'Ganganagar','Ganjam', 'Garhwa', 'Gariaband', 'Gaurela Pendra Marwahi','Gautam Buddha Nagar', 'Gaya', 'Ghaziabad', 'Ghazipur','Gir Somnath', 'Giridih', 'Godda', 'Gomati', 'Gonda', 'Gondia','Gopalganj', 'Gorakhpur', 'Gumla', 'Guna', 'Guntur', 'Gurdaspur','Gurugram', 'Gwalior', 'Hamirpur', 'Hanumangarh', 'Hapur', 'Harda','Hardoi', 'Haridwar', 'Hassan', 'Hathras', 'Haveri', 'Hazaribagh','Hingoli', 'Hisar', 'Hnahthial', 'Hooghly', 'Hoshangabad','Hoshiarpur', 'Howrah', 'Idukki', 'Indore', 'Italians', 'Jabalpur','Jagatsinghpur', 'Jaipur', 'Jaisalmer', 'Jajpur', 'Jalandhar','Jalaun', 'Jalgaon', 'Jalna', 'Jalore', 'Jalpaiguri', 'Jammu','Jamnagar', 'Jamtara', 'Jamui', 'Janjgir Champa', 'Jashpur','Jaunpur', 'Jehanabad', 'Jhabua', 'Jhajjar', 'Jhalawar', 'Jhansi','Jhargram', 'Jharsuguda', 'Jhunjhunu', 'Jind', 'Jodhpur','Junagadh', 'Kabeerdham', 'Kaimur', 'Kaithal', 'Kalaburagi','Kalahandi', 'Kalimpong', 'Kallakurichi', 'Kamle', 'Kancheepuram','Kandhamal', 'Kangra', 'Kannauj', 'Kannur', 'Kanpur Dehat','Kanpur Nagar', 'Kanyakumari', 'Kapurthala', 'Karaikal', 'Karauli','Kargil', 'Karnal', 'Karur', 'Kasaragod', 'Kasganj', 'Kathua','Katihar', 'Katni', 'Kaushambi', 'Kendrapara', 'Kendujhar','Khagaria', 'Khandwa', 'Khargone', 'Khawzawl', 'Kheda', 'Khordha','Khowai', 'Khunti', 'Kinnaur', 'Kiphire', 'Kishanganj', 'Kishtwar','Kodagu', 'Koderma', 'Kohima', 'Kolar', 'Kolasib', 'Kolhapur','Kolkata', 'Kollam', 'Kondagaon', 'Koppal', 'Koraput', 'Korba','Koriya', 'Kota', 'Kottayam', 'Kozhikode', 'Kra Daadi', 'Krishna','Krishnagiri', 'Kulgam', 'Kullu', 'Kupwara', 'Kurnool','Kurukshetra', 'Kurung Kumey', 'Kushinagar', 'Kutch','Lahaul and Spiti', 'Lakhimpur Kheri', 'Lakhisarai', 'Lalitpur','Latehar', 'Latur', 'Lawngtlai', 'Leh', 'Lepa Rada', 'Lohardaga','Lohit', 'Longding', 'Longleng', 'Lower Dibang Valley','Lower Siang', 'Lower Subansiri', 'Lucknow', 'Ludhiana', 'Lunglei','Madhepura', 'Madhubani', 'Madurai', 'Maharajganj', 'Mahasamund','Mahe', 'Mahendragarh', 'Mahisagar', 'Mahoba', 'Mainpuri','Malappuram', 'Malda', 'Malkangiri', 'Mamit', 'Mandi', 'Mandla','Mandsaur', 'Mandya', 'Mansa', 'Mathura', 'Mau', 'Mayurbhanj','Meerut', 'Mehsana', 'Mirzapur', 'Moga', 'Mokokchung', 'Mon','Moradabad', 'Morbi', 'Morena', 'Mumbai', 'Mungeli', 'Munger','Murshidabad', 'Muzaffarnagar', 'Muzaffarpur', 'Mysuru','Nabarangapur', 'Nadia', 'Nagapattinam', 'Nagaur', 'Nagpur','Nainital', 'Nalanda', 'Namakkal', 'Namsai', 'Nanded', 'Nandurbar','Narayanpur', 'Narmada', 'Narsinghpur', 'Nashik', 'Navsari','Nawada', 'Nayagarh', 'Neemuch', 'Nilgiris', 'Niwari','North 24 Parganas', 'North Garo Hills', 'North Tripura','Nuapada', 'Nuh', 'Osmanabad', 'Other Region', 'Other State','Others', 'Pakke Kessang', 'Pakur', 'Palakkad', 'Palamu','Palghar', 'Pali', 'Palwal', 'Panchkula', 'Panchmahal', 'Panipat','Panna', 'Papum Pare', 'Parbhani', 'Paschim Bardhaman','Paschim Medinipur', 'Patan', 'Pathanamthitta', 'Pathankot','Patiala', 'Patna', 'Pauri Garhwal', 'Perambalur', 'Peren', 'Phek','Pilibhit', 'Pithoragarh', 'Porbandar', 'Prakasam', 'Pratapgarh','Prayagraj', 'Puducherry', 'Pudukkottai', 'Pulwama', 'Punch','Pune', 'Purba Bardhaman', 'Purba Medinipur', 'Puri', 'Purnia','Purulia', 'Rae Bareli', 'Raichur', 'Raigad', 'Raigarh','Railway Quarantine', 'Raipur', 'Raisen', 'Rajgarh', 'Rajkot','Rajnandgaon', 'Rajouri', 'Rajsamand', 'Ramanagara','Ramanathapuram', 'Ramban', 'Ramgarh', 'Rampur', 'Ranchi','Ranipet', 'Ratlam', 'Ratnagiri', 'Rayagada', 'Reasi', 'Rewa','Rewari', 'Ribhoi', 'Rohtak', 'Rohtas', 'Rudraprayag', 'Rupnagar','S.A.S. Nagar', 'S.P.S. Nellore', 'Sabarkantha', 'Sagar','Saharanpur', 'Saharsa', 'Sahibganj', 'Saiha', 'Saitual', 'Salem','Samastipur', 'Samba', 'Sambalpur', 'Sambhal', 'Sangli', 'Sangrur','Sant Kabir Nagar', 'Saraikela-Kharsawan', 'Saran', 'Satara','Satna', 'Sawai Madhopur', 'Sehore', 'Seoni', 'Serchhip','Shahdol', 'Shahid Bhagat Singh Nagar', 'Shahjahanpur', 'Shajapur','Shamli', 'Sheikhpura', 'Sheohar', 'Sheopur', 'Shi Yomi', 'Shimla','Shivamogga', 'Shivpuri', 'Shopiyan', 'Shrawasti', 'Siang','Siddharthnagar', 'Sidhi', 'Sikar', 'Simdega', 'Sindhudurg','Singrauli', 'Sipahijala', 'Sirmaur', 'Sirohi', 'Sirsa','Sitamarhi', 'Sitapur', 'Sivaganga', 'Siwan', 'Solan', 'Solapur','Sonbhadra', 'Sonipat', 'South 24 Parganas', 'South Garo Hills','South Tripura', 'South West Garo Hills', 'South West Khasi Hills','Sri Muktsar Sahib', 'Srikakulam', 'Srinagar', 'State Pool','Subarnapur', 'Sukma', 'Sultanpur', 'Sundargarh', 'Supaul','Surajpur', 'Surat', 'Surendranagar', 'Surguja', 'Tapi','Tarn Taran', 'Tawang', 'Tehri Garhwal', 'Tenkasi', 'Thane','Thanjavur', 'Theni', 'Thiruvallur', 'Thiruvananthapuram','Thiruvarur', 'Thoothukkudi', 'Thrissur', 'Tikamgarh', 'Tirap','Tiruchirappalli', 'Tirunelveli', 'Tirupathur', 'Tiruppur','Tiruvannamalai', 'Tonk', 'Tuensang', 'Tumakuru', 'Udaipur','Udham Singh Nagar', 'Udhampur', 'Udupi', 'Ujjain', 'Umaria','Una', 'Unknown', 'Unnao', 'Unokoti', 'Upper Dibang Valley','Upper Siang', 'Upper Subansiri', 'Uttar Bastar Kanker','Uttar Dinajpur', 'Uttara Kannada', 'Uttarkashi', 'Vadodara','Vaishali', 'Valsad', 'Varanasi', 'Vellore', 'Vidisha','Vijayapura', 'Viluppuram', 'Virudhunagar', 'Visakhapatnam','Vizianagaram', 'Wardha', 'Washim', 'Wayanad', 'West Champaran','West Garo Hills', 'West Godavari', 'West Jaintia Hills','West Kameng', 'West Khasi Hills', 'West Siang', 'West Singhbhum','West Tripura', 'Wokha', 'Y.S.R. Kadapa', 'Yadgir', 'Yamunanagar','Yanam', 'Yavatmal', 'Zunheboto']\nDate = \"2020-12-06\" #@param {type:\"date\"}\n\n\n# display(Markdown(\"<h2> District WISE PIE CHART CASES of 2019-nCoV<\/h2>\"))\nif Date not in District_['Date'].astype(str).unique():\n  Date = District_['Date'].max()\n\nPlot_Pie = True\nif Plot_Pie:\n  temp = District_[District_['District'] == Plot_District]\n  temp = temp[temp['Date'] == Date]\n  dic_temp = dict(\n              total_values = temp[['Confirmed', 'Recovered', 'Deceased']].values[0],\n              daily_values = temp[['Confirmed_', 'Recovered_', 'Deceased_']].values[0],\n              names = ['Confirmed', 'Recovered', 'Deceased'],\n              par = ['Corona Cases','Corona Cases','Corona Cases']\n              )\n  fig = make_subplots(1, 2, specs=[[{\"type\": \"domain\"}, {\"type\": \"domain\"}]],)\n  fig = px.sunburst(dic_temp, names = 'names',\n                   parents = 'par',\n                   values='daily_values', height=700,\n                 title='Number of {} Cases Reported as {}'.format('New' , Date),\n                 color_discrete_sequence = px.colors.qualitative.T10)\n  fig.data[0].textinfo = 'label+text+value'\n  fig.show()\n  fig = px.sunburst(dic_temp, names = 'names',\n                   parents = 'par',\n                   values='total_values', height=700,\n                 title='Number of {} Cases Reported as {}'.format('Total' , Date),\n                 color_discrete_sequence = px.colors.qualitative.T10)\n\n  fig.data[0].textinfo = 'label+text+value'\n  fig.show()","73511f24":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='http:\/\/icons.iconarchive.com\/icons\/paomedia\/small-n-flat\/512\/file-excel-icon.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Plot Corona Virus Cases in District (Table View)<\/h2><\/center><br>\nPlot_District = \"Delhi\" #@param ['Agar Malwa', 'Agra', 'Ahmedabad', 'Ahmednagar','Airport Quarantine', 'Aizawl', 'Ajmer', 'Akola', 'Alappuzha','Aligarh', 'Alipurduar', 'Alirajpur', 'Almora', 'Alwar', 'Ambala','Ambedkar Nagar', 'Amethi', 'Amravati', 'Amreli', 'Amritsar','Amroha', 'Anand', 'Anantapur', 'Anantnag', 'Angul', 'Anjaw','Anuppur', 'Araria', 'Aravalli', 'Ariyalur', 'Arwal', 'Ashoknagar','Auraiya', 'Aurangabad', 'Ayodhya', 'Azamgarh', 'BSF Camp','Bagalkote', 'Bageshwar', 'Baghpat', 'Bahraich', 'Balaghat','Balangir', 'Balasore', 'Ballari', 'Ballia', 'Balod','Baloda Bazar', 'Balrampur', 'Bametara', 'Banaskantha', 'Banda','Bandipora', 'Banka', 'Bankura', 'Banswara', 'Barabanki','Baramulla', 'Baran', 'Bareilly', 'Bargarh', 'Barmer', 'Barnala','Barwani', 'Bastar', 'Basti', 'Bathinda', 'Beed', 'Begusarai','Belagavi', 'Bengaluru Rural', 'Bengaluru Urban', 'Betul','Bhadohi', 'Bhadrak', 'Bhagalpur', 'Bhandara', 'Bharatpur','Bharuch', 'Bhavnagar', 'Bhilwara', 'Bhind', 'Bhiwani', 'Bhojpur','Bhopal', 'Bidar', 'Bijapur', 'Bijnor', 'Bikaner', 'Bilaspur','Birbhum', 'Bokaro', 'Botad', 'Boudh', 'Budaun', 'Budgam','Bulandshahr', 'Buldhana', 'Bundi', 'Burhanpur', 'Buxar','Capital Complex', 'Chamarajanagara', 'Chamba', 'Chamoli','Champawat', 'Champhai', 'Chandauli', 'Chandigarh', 'Chandrapur','Changlang', 'Charkhi Dadri', 'Chatra', 'Chengalpattu', 'Chennai','Chhatarpur', 'Chhindwara', 'Chhota Udaipur', 'Chikkaballapura','Chikkamagaluru', 'Chitradurga', 'Chitrakoot', 'Chittoor','Chittorgarh', 'Churu', 'Coimbatore', 'Cooch Behar', 'Cuddalore','Cuttack', 'Dadra and Nagar Haveli', 'Dahod','Dakshin Bastar Dantewada', 'Dakshin Dinajpur', 'Dakshina Kannada','Daman', 'Damoh', 'Dang', 'Darbhanga', 'Darjeeling', 'Datia','Dausa', 'Davanagere', 'Dehradun', 'Delhi', 'Deogarh', 'Deoghar','Deoria', 'Devbhumi Dwarka', 'Dewas', 'Dhalai', 'Dhamtari','Dhanbad', 'Dhar', 'Dharmapuri', 'Dharwad', 'Dhenkanal', 'Dholpur','Dhule', 'Dimapur', 'Dindigul', 'Dindori', 'Diu', 'Doda', 'Dumka','Dungarpur', 'Durg', 'East Champaran', 'East Garo Hills','East Godavari', 'East Jaintia Hills', 'East Kameng','East Khasi Hills', 'East Siang', 'East Singhbhum', 'Ernakulam','Erode', 'Etah', 'Etawah', 'Evacuees', 'Faridabad', 'Faridkot','Farrukhabad', 'Fatehabad', 'Fatehgarh Sahib', 'Fatehpur','Fazilka', 'Ferozepur', 'Firozabad', 'Foreign Evacuees', 'Gadag','Gadchiroli', 'Gajapati', 'Ganderbal', 'Gandhinagar', 'Ganganagar','Ganjam', 'Garhwa', 'Gariaband', 'Gaurela Pendra Marwahi','Gautam Buddha Nagar', 'Gaya', 'Ghaziabad', 'Ghazipur','Gir Somnath', 'Giridih', 'Godda', 'Gomati', 'Gonda', 'Gondia','Gopalganj', 'Gorakhpur', 'Gumla', 'Guna', 'Guntur', 'Gurdaspur','Gurugram', 'Gwalior', 'Hamirpur', 'Hanumangarh', 'Hapur', 'Harda','Hardoi', 'Haridwar', 'Hassan', 'Hathras', 'Haveri', 'Hazaribagh','Hingoli', 'Hisar', 'Hnahthial', 'Hooghly', 'Hoshangabad','Hoshiarpur', 'Howrah', 'Idukki', 'Indore', 'Italians', 'Jabalpur','Jagatsinghpur', 'Jaipur', 'Jaisalmer', 'Jajpur', 'Jalandhar','Jalaun', 'Jalgaon', 'Jalna', 'Jalore', 'Jalpaiguri', 'Jammu','Jamnagar', 'Jamtara', 'Jamui', 'Janjgir Champa', 'Jashpur','Jaunpur', 'Jehanabad', 'Jhabua', 'Jhajjar', 'Jhalawar', 'Jhansi','Jhargram', 'Jharsuguda', 'Jhunjhunu', 'Jind', 'Jodhpur','Junagadh', 'Kabeerdham', 'Kaimur', 'Kaithal', 'Kalaburagi','Kalahandi', 'Kalimpong', 'Kallakurichi', 'Kamle', 'Kancheepuram','Kandhamal', 'Kangra', 'Kannauj', 'Kannur', 'Kanpur Dehat','Kanpur Nagar', 'Kanyakumari', 'Kapurthala', 'Karaikal', 'Karauli','Kargil', 'Karnal', 'Karur', 'Kasaragod', 'Kasganj', 'Kathua','Katihar', 'Katni', 'Kaushambi', 'Kendrapara', 'Kendujhar','Khagaria', 'Khandwa', 'Khargone', 'Khawzawl', 'Kheda', 'Khordha','Khowai', 'Khunti', 'Kinnaur', 'Kiphire', 'Kishanganj', 'Kishtwar','Kodagu', 'Koderma', 'Kohima', 'Kolar', 'Kolasib', 'Kolhapur','Kolkata', 'Kollam', 'Kondagaon', 'Koppal', 'Koraput', 'Korba','Koriya', 'Kota', 'Kottayam', 'Kozhikode', 'Kra Daadi', 'Krishna','Krishnagiri', 'Kulgam', 'Kullu', 'Kupwara', 'Kurnool','Kurukshetra', 'Kurung Kumey', 'Kushinagar', 'Kutch','Lahaul and Spiti', 'Lakhimpur Kheri', 'Lakhisarai', 'Lalitpur','Latehar', 'Latur', 'Lawngtlai', 'Leh', 'Lepa Rada', 'Lohardaga','Lohit', 'Longding', 'Longleng', 'Lower Dibang Valley','Lower Siang', 'Lower Subansiri', 'Lucknow', 'Ludhiana', 'Lunglei','Madhepura', 'Madhubani', 'Madurai', 'Maharajganj', 'Mahasamund','Mahe', 'Mahendragarh', 'Mahisagar', 'Mahoba', 'Mainpuri','Malappuram', 'Malda', 'Malkangiri', 'Mamit', 'Mandi', 'Mandla','Mandsaur', 'Mandya', 'Mansa', 'Mathura', 'Mau', 'Mayurbhanj','Meerut', 'Mehsana', 'Mirzapur', 'Moga', 'Mokokchung', 'Mon','Moradabad', 'Morbi', 'Morena', 'Mumbai', 'Mungeli', 'Munger','Murshidabad', 'Muzaffarnagar', 'Muzaffarpur', 'Mysuru','Nabarangapur', 'Nadia', 'Nagapattinam', 'Nagaur', 'Nagpur','Nainital', 'Nalanda', 'Namakkal', 'Namsai', 'Nanded', 'Nandurbar','Narayanpur', 'Narmada', 'Narsinghpur', 'Nashik', 'Navsari','Nawada', 'Nayagarh', 'Neemuch', 'Nilgiris', 'Niwari','North 24 Parganas', 'North Garo Hills', 'North Tripura','Nuapada', 'Nuh', 'Osmanabad', 'Other Region', 'Other State','Others', 'Pakke Kessang', 'Pakur', 'Palakkad', 'Palamu','Palghar', 'Pali', 'Palwal', 'Panchkula', 'Panchmahal', 'Panipat','Panna', 'Papum Pare', 'Parbhani', 'Paschim Bardhaman','Paschim Medinipur', 'Patan', 'Pathanamthitta', 'Pathankot','Patiala', 'Patna', 'Pauri Garhwal', 'Perambalur', 'Peren', 'Phek','Pilibhit', 'Pithoragarh', 'Porbandar', 'Prakasam', 'Pratapgarh','Prayagraj', 'Puducherry', 'Pudukkottai', 'Pulwama', 'Punch','Pune', 'Purba Bardhaman', 'Purba Medinipur', 'Puri', 'Purnia','Purulia', 'Rae Bareli', 'Raichur', 'Raigad', 'Raigarh','Railway Quarantine', 'Raipur', 'Raisen', 'Rajgarh', 'Rajkot','Rajnandgaon', 'Rajouri', 'Rajsamand', 'Ramanagara','Ramanathapuram', 'Ramban', 'Ramgarh', 'Rampur', 'Ranchi','Ranipet', 'Ratlam', 'Ratnagiri', 'Rayagada', 'Reasi', 'Rewa','Rewari', 'Ribhoi', 'Rohtak', 'Rohtas', 'Rudraprayag', 'Rupnagar','S.A.S. Nagar', 'S.P.S. Nellore', 'Sabarkantha', 'Sagar','Saharanpur', 'Saharsa', 'Sahibganj', 'Saiha', 'Saitual', 'Salem','Samastipur', 'Samba', 'Sambalpur', 'Sambhal', 'Sangli', 'Sangrur','Sant Kabir Nagar', 'Saraikela-Kharsawan', 'Saran', 'Satara','Satna', 'Sawai Madhopur', 'Sehore', 'Seoni', 'Serchhip','Shahdol', 'Shahid Bhagat Singh Nagar', 'Shahjahanpur', 'Shajapur','Shamli', 'Sheikhpura', 'Sheohar', 'Sheopur', 'Shi Yomi', 'Shimla','Shivamogga', 'Shivpuri', 'Shopiyan', 'Shrawasti', 'Siang','Siddharthnagar', 'Sidhi', 'Sikar', 'Simdega', 'Sindhudurg','Singrauli', 'Sipahijala', 'Sirmaur', 'Sirohi', 'Sirsa','Sitamarhi', 'Sitapur', 'Sivaganga', 'Siwan', 'Solan', 'Solapur','Sonbhadra', 'Sonipat', 'South 24 Parganas', 'South Garo Hills','South Tripura', 'South West Garo Hills', 'South West Khasi Hills','Sri Muktsar Sahib', 'Srikakulam', 'Srinagar', 'State Pool','Subarnapur', 'Sukma', 'Sultanpur', 'Sundargarh', 'Supaul','Surajpur', 'Surat', 'Surendranagar', 'Surguja', 'Tapi','Tarn Taran', 'Tawang', 'Tehri Garhwal', 'Tenkasi', 'Thane','Thanjavur', 'Theni', 'Thiruvallur', 'Thiruvananthapuram','Thiruvarur', 'Thoothukkudi', 'Thrissur', 'Tikamgarh', 'Tirap','Tiruchirappalli', 'Tirunelveli', 'Tirupathur', 'Tiruppur','Tiruvannamalai', 'Tonk', 'Tuensang', 'Tumakuru', 'Udaipur','Udham Singh Nagar', 'Udhampur', 'Udupi', 'Ujjain', 'Umaria','Una', 'Unknown', 'Unnao', 'Unokoti', 'Upper Dibang Valley','Upper Siang', 'Upper Subansiri', 'Uttar Bastar Kanker','Uttar Dinajpur', 'Uttara Kannada', 'Uttarkashi', 'Vadodara','Vaishali', 'Valsad', 'Varanasi', 'Vellore', 'Vidisha','Vijayapura', 'Viluppuram', 'Virudhunagar', 'Visakhapatnam','Vizianagaram', 'Wardha', 'Washim', 'Wayanad', 'West Champaran','West Garo Hills', 'West Godavari', 'West Jaintia Hills','West Kameng', 'West Khasi Hills', 'West Siang', 'West Singhbhum','West Tripura', 'Wokha', 'Y.S.R. Kadapa', 'Yadgir', 'Yamunanagar','Yanam', 'Yavatmal', 'Zunheboto']\n# For Tabular Plot\nSort_By = \"Confirmed\" #@param ['Confirmed', 'Recovered', 'Deceased','Tested','Active','Confirmed_', 'Recovered_', 'Deceased_','Death Rate (per 100)', 'Cure Rate (per 100)']\nPlot_Last = 14 #@param {type:\"slider\", min:1, max:100, step:1}\n\ndisplay(Markdown(\"<h2> STATE WISE CONFIRMED, DEATH AND CURED CASES of 2019-nCoV AS OF {}<\/h2>\".format(District_['Date'].max())))\ntemp = District_[District_['District'] == Plot_District].reset_index(drop = True)\ntemp['Date'] = temp['Date'].astype(str)\n# tabular_index = temp[temp['Date'] == Date].index.values[0]\ntemp[['Date','District','Confirmed', 'Recovered', 'Deceased','Active','Confirmed_','Recovered_','Deceased_','Tested','Death Rate (per 100)','Cure Rate (per 100)']]\\\n                          .sort_values(Sort_By, ascending= False).fillna(0)\\\n                          .head(Plot_Last)\\\n                          .style\\\n                          .background_gradient(cmap='YlOrBr',subset=[\"Confirmed\"])\\\n                          .background_gradient(cmap='Reds',subset=[\"Deceased\"])\\\n                          .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                          .background_gradient(cmap='Blues',subset=[\"Active\"])\\\n                          .background_gradient(cmap='Reds',subset=[\"Death Rate (per 100)\"])\\\n                          .background_gradient(cmap='Greens',subset=[\"Cure Rate (per 100)\"])\\\n                          .background_gradient(cmap='crest',subset=[\"Confirmed_\"])\\\n                          .background_gradient(cmap='PuRd',subset=[\"Recovered_\"])\\\n                          .background_gradient(cmap='Blues',subset=[\"Deceased_\"])\\\n                          .background_gradient(cmap='rocket',subset=[\"Tested\"])\n","0eb80c5f":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/images.vexels.com\/media\/users\/3\/151175\/isolated\/preview\/c8cccfd752a2c029daaa084aca6bb2bc-percent-pie-chart-doodle-by-vexels.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Plot Corona Virus Cases in Countries of Districts of India (Bar Chart)<\/h2><\/center><br>\nPlot_State = \"Uttar Pradesh\" #@param [\"India\",'Andaman and Nicobar Islands', 'Andhra Pradesh','Arunachal Pradesh', 'Assam', 'Bihar', 'Chandigarh','Chhattisgarh', 'Dadra and Nagar Haveli and Daman and Diu','Gujarat', 'Haryana', 'Himachal Pradesh','Jammu and Kashmir', 'Jharkhand', 'Karnataka', 'Kerala', 'Ladakh','Madhya Pradesh', 'Maharashtra', 'Manipur', 'Meghalaya', 'Mizoram','Nagaland', 'Odisha', 'Puducherry', 'Punjab', 'Rajasthan', 'Tamil Nadu', 'Telangana', 'Tripura', 'Uttar Pradesh','Uttarakhand', 'West Bengal']\nPlot_By = \"Confirmed Recovered Deceased\" #@param ['Confirmed', 'Recovered', 'Deceased','Tested','Active','Confirmed Recovered Deceased' , 'Confirmed_','Recovered_', 'Deceased_' , 'Confirmed_ Recovered_ Deceased_']\nPlot_Top = 23 #@param {type:\"slider\", min:1, max:100, step:1}\nDate = \"2020-12-06\" #@param {type:\"date\"}\nPopulation_Ratio = True #@param {type:\"boolean\"}\n\ndisplay(Markdown(\"<h2> District WISE Bar CHART CASES of 2019-nCoV<\/h2>\"))\nif Date not in District_['Date'].astype(str).unique():\n  Date = District_['Date'].max()\n  print('Invalid Date...Might Cause Error ...Reduce Date to Avoid any Error')\nPlot_By = Plot_By.split(' ')\n\nif Plot_State == 'India':\n  data = District_[District_['Date'] == Date]\n  if Population_Ratio:\n    for i in Plot_By:\n      data[i] = data[i]\/data['Population']\n  data = data.sort_values(Plot_By[0] , ascending = False).head(Plot_Top)\nelse:\n  data = District_[District_['State'] == Plot_State]\n  data = data[data['Date'] == Date]\n  if Population_Ratio:\n    for i in Plot_By:\n      data[i] = data[i]\/data['Population']\n  data = data.sort_values(Plot_By[0] , ascending = False).head(Plot_Top)\n\n\nplt.figure(figsize=(Graphs_Width,Graphs_Height))\nax = plt.subplot(1,1,1)\nplt.suptitle(Sup_Title, fontsize = 29)\nplt.title('\\nTop {} Districts with SARS-CoV-2 Cases On {} \\n'.format(Plot_Top , Date) , fontsize = 19)\n\nPlot_Top = min(Plot_Top , data.shape[0])\nif len(Plot_By) ==1:\n  plt_by = Plot_By[0]\n  graph = sns.barplot(data=data,y='District',x= plt_by , saturation = Plot_Saturation , alpha = Plot_Alpha, palette =Style_Color, label = plt_by.replace('_', ' Daily ')+' Cases' , orient = 'h')\n\nelse:\n  plot_color = list(sns.color_palette(Style_Color,n_colors=len(Plot_By)).as_hex())\n  for i,plt_by in enumerate(Plot_By):\n    # print(' Plot by',plt_by)\n    graph = sns.barplot(data=data,y='District', x= plt_by , \n                        saturation = Plot_Saturation , alpha = Plot_Alpha, \n                        color = plot_color[i], \n                        label = plt_by.replace('_', ' Daily ')+' Cases' , \n                        orient = 'h')\nplt.xlim(0,data[Plot_By[0]].max()+data[Plot_By[0]].max()\/10 )\nplt.ylabel('Districts ')\nplt.xlabel('Number of Cases')\nplt.legend(loc = 8 , fontsize = 16)\ntotal_cases = data[Plot_By[0]].sum()\nfor p in graph.patches[:int(Plot_Top)]:\n  _x = p.get_x() + p.get_width() \n  _y = p.get_y() + p.get_height()\/2 + float(0.2)\n  value = ((p.get_width()\/total_cases)*100)\n  if np.isnan(value):\n    value = 0.0\n  graph.text(_x , _y , ' {:.2f}%'.format(value) , ha = 'left', color = sns.color_palette('rocket')[1])\nplt.subplots_adjust(top=SubPlot_Top)\n\nplt.savefig(File_Prefix+'District Plot India  Bar Plot  on {} _{}.{}'.format(World_.date.max() , time.time() , Format_To_Save) , bbox_inches = 'tight')\n","a3145dd4":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn.pixabay.com\/photo\/2013\/07\/13\/12\/36\/india-159941_960_720.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Plot Corona Virus Cases in India<\/h2><\/center><br>\nPlot_Column = \"C\/R\/D\" #@param ['C\/R\/D' , 'C\/R\/D\/A', 'C\/R\/D(Daily)' ,'Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_', 'Negative']\nPlot_District = \"Ghaziabad\" #@param ['Agar Malwa', 'Agra', 'Ahmedabad', 'Ahmednagar','Airport Quarantine', 'Aizawl', 'Ajmer', 'Akola', 'Alappuzha','Aligarh', 'Alipurduar', 'Alirajpur', 'Almora', 'Alwar', 'Ambala','Ambedkar Nagar', 'Amethi', 'Amravati', 'Amreli', 'Amritsar','Amroha', 'Anand', 'Anantapur', 'Anantnag', 'Angul', 'Anjaw','Anuppur', 'Araria', 'Aravalli', 'Ariyalur', 'Arwal', 'Ashoknagar','Auraiya', 'Aurangabad', 'Ayodhya', 'Azamgarh', 'BSF Camp','Bagalkote', 'Bageshwar', 'Baghpat', 'Bahraich', 'Balaghat','Balangir', 'Balasore', 'Ballari', 'Ballia', 'Balod','Baloda Bazar', 'Balrampur', 'Bametara', 'Banaskantha', 'Banda','Bandipora', 'Banka', 'Bankura', 'Banswara', 'Barabanki','Baramulla', 'Baran', 'Bareilly', 'Bargarh', 'Barmer', 'Barnala','Barwani', 'Bastar', 'Basti', 'Bathinda', 'Beed', 'Begusarai','Belagavi', 'Bengaluru Rural', 'Bengaluru Urban', 'Betul','Bhadohi', 'Bhadrak', 'Bhagalpur', 'Bhandara', 'Bharatpur','Bharuch', 'Bhavnagar', 'Bhilwara', 'Bhind', 'Bhiwani', 'Bhojpur','Bhopal', 'Bidar', 'Bijapur', 'Bijnor', 'Bikaner', 'Bilaspur','Birbhum', 'Bokaro', 'Botad', 'Boudh', 'Budaun', 'Budgam','Bulandshahr', 'Buldhana', 'Bundi', 'Burhanpur', 'Buxar','Capital Complex', 'Chamarajanagara', 'Chamba', 'Chamoli','Champawat', 'Champhai', 'Chandauli', 'Chandigarh', 'Chandrapur','Changlang', 'Charkhi Dadri', 'Chatra', 'Chengalpattu', 'Chennai','Chhatarpur', 'Chhindwara', 'Chhota Udaipur', 'Chikkaballapura','Chikkamagaluru', 'Chitradurga', 'Chitrakoot', 'Chittoor','Chittorgarh', 'Churu', 'Coimbatore', 'Cooch Behar', 'Cuddalore','Cuttack', 'Dadra and Nagar Haveli', 'Dahod','Dakshin Bastar Dantewada', 'Dakshin Dinajpur', 'Dakshina Kannada','Daman', 'Damoh', 'Dang', 'Darbhanga', 'Darjeeling', 'Datia','Dausa', 'Davanagere', 'Dehradun', 'Delhi', 'Deogarh', 'Deoghar','Deoria', 'Devbhumi Dwarka', 'Dewas', 'Dhalai', 'Dhamtari','Dhanbad', 'Dhar', 'Dharmapuri', 'Dharwad', 'Dhenkanal', 'Dholpur','Dhule', 'Dimapur', 'Dindigul', 'Dindori', 'Diu', 'Doda', 'Dumka','Dungarpur', 'Durg', 'East Champaran', 'East Garo Hills','East Godavari', 'East Jaintia Hills', 'East Kameng','East Khasi Hills', 'East Siang', 'East Singhbhum', 'Ernakulam','Erode', 'Etah', 'Etawah', 'Evacuees', 'Faridabad', 'Faridkot','Farrukhabad', 'Fatehabad', 'Fatehgarh Sahib', 'Fatehpur','Fazilka', 'Ferozepur', 'Firozabad', 'Foreign Evacuees', 'Gadag','Gadchiroli', 'Gajapati', 'Ganderbal', 'Gandhinagar', 'Ganganagar','Ganjam', 'Garhwa', 'Gariaband', 'Gaurela Pendra Marwahi','Gautam Buddha Nagar', 'Gaya', 'Ghaziabad', 'Ghazipur','Gir Somnath', 'Giridih', 'Godda', 'Gomati', 'Gonda', 'Gondia','Gopalganj', 'Gorakhpur', 'Gumla', 'Guna', 'Guntur', 'Gurdaspur','Gurugram', 'Gwalior', 'Hamirpur', 'Hanumangarh', 'Hapur', 'Harda','Hardoi', 'Haridwar', 'Hassan', 'Hathras', 'Haveri', 'Hazaribagh','Hingoli', 'Hisar', 'Hnahthial', 'Hooghly', 'Hoshangabad','Hoshiarpur', 'Howrah', 'Idukki', 'Indore', 'Italians', 'Jabalpur','Jagatsinghpur', 'Jaipur', 'Jaisalmer', 'Jajpur', 'Jalandhar','Jalaun', 'Jalgaon', 'Jalna', 'Jalore', 'Jalpaiguri', 'Jammu','Jamnagar', 'Jamtara', 'Jamui', 'Janjgir Champa', 'Jashpur','Jaunpur', 'Jehanabad', 'Jhabua', 'Jhajjar', 'Jhalawar', 'Jhansi','Jhargram', 'Jharsuguda', 'Jhunjhunu', 'Jind', 'Jodhpur','Junagadh', 'Kabeerdham', 'Kaimur', 'Kaithal', 'Kalaburagi','Kalahandi', 'Kalimpong', 'Kallakurichi', 'Kamle', 'Kancheepuram','Kandhamal', 'Kangra', 'Kannauj', 'Kannur', 'Kanpur Dehat','Kanpur Nagar', 'Kanyakumari', 'Kapurthala', 'Karaikal', 'Karauli','Kargil', 'Karnal', 'Karur', 'Kasaragod', 'Kasganj', 'Kathua','Katihar', 'Katni', 'Kaushambi', 'Kendrapara', 'Kendujhar','Khagaria', 'Khandwa', 'Khargone', 'Khawzawl', 'Kheda', 'Khordha','Khowai', 'Khunti', 'Kinnaur', 'Kiphire', 'Kishanganj', 'Kishtwar','Kodagu', 'Koderma', 'Kohima', 'Kolar', 'Kolasib', 'Kolhapur','Kolkata', 'Kollam', 'Kondagaon', 'Koppal', 'Koraput', 'Korba','Koriya', 'Kota', 'Kottayam', 'Kozhikode', 'Kra Daadi', 'Krishna','Krishnagiri', 'Kulgam', 'Kullu', 'Kupwara', 'Kurnool','Kurukshetra', 'Kurung Kumey', 'Kushinagar', 'Kutch','Lahaul and Spiti', 'Lakhimpur Kheri', 'Lakhisarai', 'Lalitpur','Latehar', 'Latur', 'Lawngtlai', 'Leh', 'Lepa Rada', 'Lohardaga','Lohit', 'Longding', 'Longleng', 'Lower Dibang Valley','Lower Siang', 'Lower Subansiri', 'Lucknow', 'Ludhiana', 'Lunglei','Madhepura', 'Madhubani', 'Madurai', 'Maharajganj', 'Mahasamund','Mahe', 'Mahendragarh', 'Mahisagar', 'Mahoba', 'Mainpuri','Malappuram', 'Malda', 'Malkangiri', 'Mamit', 'Mandi', 'Mandla','Mandsaur', 'Mandya', 'Mansa', 'Mathura', 'Mau', 'Mayurbhanj','Meerut', 'Mehsana', 'Mirzapur', 'Moga', 'Mokokchung', 'Mon','Moradabad', 'Morbi', 'Morena', 'Mumbai', 'Mungeli', 'Munger','Murshidabad', 'Muzaffarnagar', 'Muzaffarpur', 'Mysuru','Nabarangapur', 'Nadia', 'Nagapattinam', 'Nagaur', 'Nagpur','Nainital', 'Nalanda', 'Namakkal', 'Namsai', 'Nanded', 'Nandurbar','Narayanpur', 'Narmada', 'Narsinghpur', 'Nashik', 'Navsari','Nawada', 'Nayagarh', 'Neemuch', 'Nilgiris', 'Niwari','North 24 Parganas', 'North Garo Hills', 'North Tripura','Nuapada', 'Nuh', 'Osmanabad', 'Other Region', 'Other State','Others', 'Pakke Kessang', 'Pakur', 'Palakkad', 'Palamu','Palghar', 'Pali', 'Palwal', 'Panchkula', 'Panchmahal', 'Panipat','Panna', 'Papum Pare', 'Parbhani', 'Paschim Bardhaman','Paschim Medinipur', 'Patan', 'Pathanamthitta', 'Pathankot','Patiala', 'Patna', 'Pauri Garhwal', 'Perambalur', 'Peren', 'Phek','Pilibhit', 'Pithoragarh', 'Porbandar', 'Prakasam', 'Pratapgarh','Prayagraj', 'Puducherry', 'Pudukkottai', 'Pulwama', 'Punch','Pune', 'Purba Bardhaman', 'Purba Medinipur', 'Puri', 'Purnia','Purulia', 'Rae Bareli', 'Raichur', 'Raigad', 'Raigarh','Railway Quarantine', 'Raipur', 'Raisen', 'Rajgarh', 'Rajkot','Rajnandgaon', 'Rajouri', 'Rajsamand', 'Ramanagara','Ramanathapuram', 'Ramban', 'Ramgarh', 'Rampur', 'Ranchi','Ranipet', 'Ratlam', 'Ratnagiri', 'Rayagada', 'Reasi', 'Rewa','Rewari', 'Ribhoi', 'Rohtak', 'Rohtas', 'Rudraprayag', 'Rupnagar','S.A.S. Nagar', 'S.P.S. Nellore', 'Sabarkantha', 'Sagar','Saharanpur', 'Saharsa', 'Sahibganj', 'Saiha', 'Saitual', 'Salem','Samastipur', 'Samba', 'Sambalpur', 'Sambhal', 'Sangli', 'Sangrur','Sant Kabir Nagar', 'Saraikela-Kharsawan', 'Saran', 'Satara','Satna', 'Sawai Madhopur', 'Sehore', 'Seoni', 'Serchhip','Shahdol', 'Shahid Bhagat Singh Nagar', 'Shahjahanpur', 'Shajapur','Shamli', 'Sheikhpura', 'Sheohar', 'Sheopur', 'Shi Yomi', 'Shimla','Shivamogga', 'Shivpuri', 'Shopiyan', 'Shrawasti', 'Siang','Siddharthnagar', 'Sidhi', 'Sikar', 'Simdega', 'Sindhudurg','Singrauli', 'Sipahijala', 'Sirmaur', 'Sirohi', 'Sirsa','Sitamarhi', 'Sitapur', 'Sivaganga', 'Siwan', 'Solan', 'Solapur','Sonbhadra', 'Sonipat', 'South 24 Parganas', 'South Garo Hills','South Tripura', 'South West Garo Hills', 'South West Khasi Hills','Sri Muktsar Sahib', 'Srikakulam', 'Srinagar', 'State Pool','Subarnapur', 'Sukma', 'Sultanpur', 'Sundargarh', 'Supaul','Surajpur', 'Surat', 'Surendranagar', 'Surguja', 'Tapi','Tarn Taran', 'Tawang', 'Tehri Garhwal', 'Tenkasi', 'Thane','Thanjavur', 'Theni', 'Thiruvallur', 'Thiruvananthapuram','Thiruvarur', 'Thoothukkudi', 'Thrissur', 'Tikamgarh', 'Tirap','Tiruchirappalli', 'Tirunelveli', 'Tirupathur', 'Tiruppur','Tiruvannamalai', 'Tonk', 'Tuensang', 'Tumakuru', 'Udaipur','Udham Singh Nagar', 'Udhampur', 'Udupi', 'Ujjain', 'Umaria','Una', 'Unknown', 'Unnao', 'Unokoti', 'Upper Dibang Valley','Upper Siang', 'Upper Subansiri', 'Uttar Bastar Kanker','Uttar Dinajpur', 'Uttara Kannada', 'Uttarkashi', 'Vadodara','Vaishali', 'Valsad', 'Varanasi', 'Vellore', 'Vidisha','Vijayapura', 'Viluppuram', 'Virudhunagar', 'Visakhapatnam','Vizianagaram', 'Wardha', 'Washim', 'Wayanad', 'West Champaran','West Garo Hills', 'West Godavari', 'West Jaintia Hills','West Kameng', 'West Khasi Hills', 'West Siang', 'West Singhbhum','West Tripura', 'Wokha', 'Y.S.R. Kadapa', 'Yadgir', 'Yamunanagar','Yanam', 'Yavatmal', 'Zunheboto']\nRegression_Power = 0 #@param {type:\"slider\", min:0, max:20, step:1}\nApply_Rolling_Mean = 7 #@param {type:\"slider\", min:0, max:30, step:1}\nTrain_on_days_from = 42 #@param {type:\"slider\", min:20, max:300, step:1}\nPredict_of_future_days = 15 #@param {type:\"slider\", min:0, max:200, step:1}\nBar_Plot = 25 #@param {type:\"slider\", min:0, max:30, step:1}\nPlot_Lib = \"MatplotLib\" #@param [\"Plotly\", \"MatplotLib\"]\n\nLine_Plot = True #@param {type:\"boolean\"}\nUse_Log = False #@param {type:\"boolean\"}\nDate = 'Date'\ndisplay(Markdown(\"<center><h2>Line Plot of {} District By SARS-CoV-2<\/h2><\/center>\".format(Plot_District)))\n\nif Plot_Column == 'C\/R\/D':\n  Plot_Column = ['Confirmed' , 'Recovered' , 'Deceased']\nelif Plot_Column == 'C\/R\/D\/A':\n  Plot_Column = ['Confirmed' , 'Recovered' , 'Deceased' , 'Active']\nelif Plot_Column == 'C\/R\/D(Daily)':\n  Plot_Column = ['Confirmed_' , 'Recovered_' , 'Deceased_']\nelse:\n  Plot_Column = [Plot_Column]\n\ndata = District_[District_.District == Plot_District]\n\nbar_data = data.resample('M').mean()\ntimes = pd.date_range(data[Date].min(), periods = data.shape[0]+Predict_of_future_days , freq='D')\nif Use_Log:\n  bar_data[Plot_Column[0]] = np.log1p(bar_data[Plot_Column[0]])\nplot_color = list(sns.color_palette(Style_Color,n_colors=len(Plot_Column)*2).as_hex())\nif Plot_Lib == 'MatplotLib':\n  plt.figure(figsize=(Graphs_Width,Graphs_Height))\n  if Bar_Plot:\n    plt.bar(bar_data.index, bar_data[Plot_Column[0]], align = 'edge',width = -Bar_Plot , linewidth = 0 , color = list(sns.color_palette(Style_Color,n_colors=len(bar_data[Plot_Column].values)).as_hex()) , alpha = .9 ,label = 'Monthly Average')\n\n  for col,i in enumerate(Plot_Column):\n    data[i] = data[i].rolling(Apply_Rolling_Mean, min_periods = 1).mean()\n    if Use_Log:\n      data[i] = np.log1p(data[i])\n    if Line_Plot:\n      plt.plot(data[i], label = '{} Cases(per day)'.format(i.replace('_',' (Daily)').title()) , color = plot_color[col*2] )\n    if Regression_Power:\n      model = np.poly1d(np.polyfit(data['Days_Passed'].values[Train_on_days_from-20:], data[i].values[Train_on_days_from-20:], Regression_Power))\n      polyline = np.linspace(Train_on_days_from, data['Days_Passed'].max()+Predict_of_future_days, len(times[Train_on_days_from:])) \n      plt.plot( pd.Series([0 if i<0 else i for i in model(polyline)] , index = times[Train_on_days_from:])  , label = 'Predicted {} Cases'.format(i.replace('_',' (Daily)').title()) , color = plot_color[1])\n\n  plt.suptitle(Sup_Title, fontsize = 29)\n  plt.title('\\nLine Plot in {} with SARS-CoV-2 Cases  \\n'.format(Plot_District ) , fontsize = 19)\n\n  plt.legend()\n  plt.ylabel('Cases')\n  plt.xlabel('Days Passed Since {}'.format(District_['Date'].min()))\n  plt.subplots_adjust(top=SubPlot_Top)\n  plt.savefig(File_Prefix+'Time Series India District Reg Plot  on {} _{}.{}'.format(District_[Date].max() , time.time() , Format_To_Save) , bbox_inches = 'tight')\nelse:\n  fig=go.Figure()\n  for col,i in enumerate(Plot_Column):\n    if Use_Log:\n      data[i] = np.log1p(data[i])\n    if Regression_Power:\n      model = np.poly1d(np.polyfit(data['Days_Passed'].values[Train_on_days_from-20:], data[i].values[Train_on_days_from-20:], Regression_Power))\n      polyline = np.linspace(Train_on_days_from, data['Days_Passed'].max()+Predict_of_future_days, len(times[Train_on_days_from:])) \n      reg_plot = pd.Series([0 if i<0 else i for i in model(polyline)] , index = times[Train_on_days_from:])  \n      fig.add_trace(go.Scatter(x = reg_plot.index ,y = reg_plot , mode = 'lines' , name = ' Fitted Line on {} '.format(i.replace('_',' ').title())))\n    if Apply_Rolling_Mean > 1:\n      data[i] = data[i].rolling(Apply_Rolling_Mean, min_periods = 1).mean()\n    fig.add_trace(go.Scatter(x = data.index , y = data[i] , mode = 'lines' , name = '{} Cases'.format(i.replace('_',' ').title() ) ) )\n  if Bar_Plot:\n    fig.add_trace(go.Bar(x = bar_data.index,y = bar_data[Plot_Column[0]] , name = 'Monthly Average Confirmed Cases', marker=dict(color = list(sns.color_palette(Style_Color,n_colors=len(bar_data[Plot_Column[0]].values)).as_hex()))))\n  fig.update_layout(title='Cases of {} SARS-CoV-2 \\n'.format(Location),\n                  xaxis_title='Days Passed Since {}'.format(data[Date].min()),yaxis_title=\"Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"),\n                  height =Graphs_Height*96\/3)\n  fig.show()","6aac90ea":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/assets.website-files.com\/5d9ba0eb5f6edb77992a99d0\/5e62506c9394b24aa66cf385_iconfinder_connection-route-spread-virus-global_5728179.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Top Effected States by Corona Virus<\/h2><\/center><br>\n\nPlot_State = \"Uttar Pradesh\" #@param [\"India\",'Andaman and Nicobar Islands', 'Andhra Pradesh','Arunachal Pradesh', 'Assam', 'Bihar', 'Chandigarh','Chhattisgarh', 'Dadra and Nagar Haveli and Daman and Diu','Gujarat', 'Haryana', 'Himachal Pradesh','Jammu and Kashmir', 'Jharkhand', 'Karnataka', 'Kerala', 'Ladakh','Madhya Pradesh', 'Maharashtra', 'Manipur', 'Meghalaya', 'Mizoram','Nagaland', 'Odisha', 'Puducherry', 'Punjab', 'Rajasthan', 'Tamil Nadu', 'Telangana', 'Tripura', 'Uttar Pradesh','Uttarakhand', 'West Bengal']\nPlot_Column = \"Confirmed_\" #@param ['Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_', 'Negative']\nUse_Method = \"mean\" #@param [\"sum\", \"mean\", \"max\", \"median\", \"min\", \"std\", \"var\"]\nPlot_top = 4 #@param {type:\"slider\", min:0, max:100, step:1}\nApply_Rolling_Mean = 11 #@param {type:\"slider\", min:1, max:30, step:1}\nPlot_Lib = \"MatplotLib\" #@param [\"Plotly\", \"MatplotLib\"]\nFill_Alpha = 0.13 #@param {type:\"slider\", min:0, max:1, step:0.01}\nUse_Log = False #@param {type:\"boolean\"}\nDate = 'Date'\n\ndisplay(Markdown(\"<center><h2>Line Plot for {} Most Effected Indian District By SARS-CoV-2<\/h2><\/center>\".format(Plot_top)))\n\nif Plot_State == 'India':\n  Locations = District_.groupby('District').agg({Plot_By:Use_Method}).sort_values(by=[Plot_Column] , ascending = False).reset_index()['District'].head(Plot_top+1).values\nelse:\n  Locations = District_[District_['State']==Plot_State].groupby('District').agg({Plot_Column:Use_Method}).sort_values(by=[Plot_Column] , ascending = False).reset_index()['District'].head(Plot_top+1).values\n\nplot_color = list(sns.color_palette(Style_Color,n_colors=len(Locations)*2).as_hex())\n\n\nif Plot_Lib == 'MatplotLib':\n  plt.figure(figsize=(Graphs_Width,Graphs_Height))\n  for i,Location in enumerate(Locations):\n    if Location in District_.District.unique() and Location != 'Unknown' :\n      data = District_[District_.State == Plot_State]\n      data = data[data.District == Location]\n\n      data[Plot_Column] = data[Plot_Column].rolling(Apply_Rolling_Mean, min_periods = 1).mean()\n\n      if Use_Log:\n        data[Plot_Column] = np.log1p(data[Plot_Column])\n      if Fill_Alpha:\n        plt.fill_between(data.index , 0 , data[Plot_Column], color =  plot_color[i] , alpha = Fill_Alpha)\n      plt.plot(data.index , data[Plot_Column], label = '{}'.format(Location) , color = plot_color[i*2] )\n\n  plt.suptitle(Sup_Title, fontsize = 29)\n  plt.title('{} Cases of  SARS-CoV-2 in States \\n'.format(Plot_Column.replace('_',' (Daily)').title() ) , fontsize = 19)\n  plt.legend()\n  plt.ylabel('Cases')\n  plt.xlabel('Days Passed Since {}'.format(Completed_['Date'].min()))\n  plt.subplots_adjust(top=SubPlot_Top)\n  plt.savefig(File_Prefix+'Time Series Top Effected District  Reg Plot  on {} _{}.{}'.format(World_.date.max() , time.time() , Format_To_Save) , bbox_inches = 'tight')\n\nelse:\n  fig=go.Figure()\n  for i,Location in enumerate(Locations):\n    if Location in District_.District.unique() and Location != 'Unknown' :\n      data = District_[District_.State == Plot_State]\n      data = data[data.District == Location]\n      \n      data[Plot_Column] = data[Plot_Column].rolling(Apply_Rolling_Mean, min_periods = 1).mean()\n\n      if Use_Log:\n        data[Plot_Column] = np.log1p(data[Plot_Column])\n\n      fig.add_trace(go.Scatter(x = data.index , y = data[Plot_Column] , mode = 'lines' , name = '{}'.format(Location) ) ) \n  \n  fig.update_layout(title='Top {} Cases In District of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' (Daily)').title()  ),\n                  xaxis_title='Days Passed Since {}'.format(data[Date].min()),yaxis_title=\"Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"),\n                  height =Graphs_Height*96\/3)\n  fig.show()","5090565a":"#@markdown <h3>\u2b05\ufe0f Click Here to START Plotting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn2.iconfinder.com\/data\/icons\/round-varieties\/60\/Rounded_-_High_Ultra_Colour19_-_Graph-256.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2>Month Wise Effect of Corona Virus in States of India<\/h2><\/center><br>\n\nPlot_Column = \"Confirmed Recovered Deceased Confirmed_ Recovered_ Deceased_ Tested Active Death-Rate-(per-100) Cure-Rate-(per-100)\" #@param ['Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_', 'Negative', 'Confirmed Recovered Deceased','Confirmed_ Recovered_ Deceased_','Confirmed Recovered Deceased Confirmed_ Recovered_ Deceased_','Confirmed Recovered Deceased Confirmed_ Recovered_ Deceased_ Tested Active Death-Rate-(per-100) Cure-Rate-(per-100)']\nPlot_District = \"Etawah\" #@param ['Agar Malwa', 'Agra', 'Ahmedabad', 'Ahmednagar','Airport Quarantine', 'Aizawl', 'Ajmer', 'Akola', 'Alappuzha','Aligarh', 'Alipurduar', 'Alirajpur', 'Almora', 'Alwar', 'Ambala','Ambedkar Nagar', 'Amethi', 'Amravati', 'Amreli', 'Amritsar','Amroha', 'Anand', 'Anantapur', 'Anantnag', 'Angul', 'Anjaw','Anuppur', 'Araria', 'Aravalli', 'Ariyalur', 'Arwal', 'Ashoknagar','Auraiya', 'Aurangabad', 'Ayodhya', 'Azamgarh', 'BSF Camp','Bagalkote', 'Bageshwar', 'Baghpat', 'Bahraich', 'Balaghat','Balangir', 'Balasore', 'Ballari', 'Ballia', 'Balod','Baloda Bazar', 'Balrampur', 'Bametara', 'Banaskantha', 'Banda','Bandipora', 'Banka', 'Bankura', 'Banswara', 'Barabanki','Baramulla', 'Baran', 'Bareilly', 'Bargarh', 'Barmer', 'Barnala','Barwani', 'Bastar', 'Basti', 'Bathinda', 'Beed', 'Begusarai','Belagavi', 'Bengaluru Rural', 'Bengaluru Urban', 'Betul','Bhadohi', 'Bhadrak', 'Bhagalpur', 'Bhandara', 'Bharatpur','Bharuch', 'Bhavnagar', 'Bhilwara', 'Bhind', 'Bhiwani', 'Bhojpur','Bhopal', 'Bidar', 'Bijapur', 'Bijnor', 'Bikaner', 'Bilaspur','Birbhum', 'Bokaro', 'Botad', 'Boudh', 'Budaun', 'Budgam','Bulandshahr', 'Buldhana', 'Bundi', 'Burhanpur', 'Buxar','Capital Complex', 'Chamarajanagara', 'Chamba', 'Chamoli','Champawat', 'Champhai', 'Chandauli', 'Chandigarh', 'Chandrapur','Changlang', 'Charkhi Dadri', 'Chatra', 'Chengalpattu', 'Chennai','Chhatarpur', 'Chhindwara', 'Chhota Udaipur', 'Chikkaballapura','Chikkamagaluru', 'Chitradurga', 'Chitrakoot', 'Chittoor','Chittorgarh', 'Churu', 'Coimbatore', 'Cooch Behar', 'Cuddalore','Cuttack', 'Dadra and Nagar Haveli', 'Dahod','Dakshin Bastar Dantewada', 'Dakshin Dinajpur', 'Dakshina Kannada','Daman', 'Damoh', 'Dang', 'Darbhanga', 'Darjeeling', 'Datia','Dausa', 'Davanagere', 'Dehradun', 'Delhi', 'Deogarh', 'Deoghar','Deoria', 'Devbhumi Dwarka', 'Dewas', 'Dhalai', 'Dhamtari','Dhanbad', 'Dhar', 'Dharmapuri', 'Dharwad', 'Dhenkanal', 'Dholpur','Dhule', 'Dimapur', 'Dindigul', 'Dindori', 'Diu', 'Doda', 'Dumka','Dungarpur', 'Durg', 'East Champaran', 'East Garo Hills','East Godavari', 'East Jaintia Hills', 'East Kameng','East Khasi Hills', 'East Siang', 'East Singhbhum', 'Ernakulam','Erode', 'Etah', 'Etawah', 'Evacuees', 'Faridabad', 'Faridkot','Farrukhabad', 'Fatehabad', 'Fatehgarh Sahib', 'Fatehpur','Fazilka', 'Ferozepur', 'Firozabad', 'Foreign Evacuees', 'Gadag','Gadchiroli', 'Gajapati', 'Ganderbal', 'Gandhinagar', 'Ganganagar','Ganjam', 'Garhwa', 'Gariaband', 'Gaurela Pendra Marwahi','Gautam Buddha Nagar', 'Gaya', 'Ghaziabad', 'Ghazipur','Gir Somnath', 'Giridih', 'Godda', 'Gomati', 'Gonda', 'Gondia','Gopalganj', 'Gorakhpur', 'Gumla', 'Guna', 'Guntur', 'Gurdaspur','Gurugram', 'Gwalior', 'Hamirpur', 'Hanumangarh', 'Hapur', 'Harda','Hardoi', 'Haridwar', 'Hassan', 'Hathras', 'Haveri', 'Hazaribagh','Hingoli', 'Hisar', 'Hnahthial', 'Hooghly', 'Hoshangabad','Hoshiarpur', 'Howrah', 'Idukki', 'Indore', 'Italians', 'Jabalpur','Jagatsinghpur', 'Jaipur', 'Jaisalmer', 'Jajpur', 'Jalandhar','Jalaun', 'Jalgaon', 'Jalna', 'Jalore', 'Jalpaiguri', 'Jammu','Jamnagar', 'Jamtara', 'Jamui', 'Janjgir Champa', 'Jashpur','Jaunpur', 'Jehanabad', 'Jhabua', 'Jhajjar', 'Jhalawar', 'Jhansi','Jhargram', 'Jharsuguda', 'Jhunjhunu', 'Jind', 'Jodhpur','Junagadh', 'Kabeerdham', 'Kaimur', 'Kaithal', 'Kalaburagi','Kalahandi', 'Kalimpong', 'Kallakurichi', 'Kamle', 'Kancheepuram','Kandhamal', 'Kangra', 'Kannauj', 'Kannur', 'Kanpur Dehat','Kanpur Nagar', 'Kanyakumari', 'Kapurthala', 'Karaikal', 'Karauli','Kargil', 'Karnal', 'Karur', 'Kasaragod', 'Kasganj', 'Kathua','Katihar', 'Katni', 'Kaushambi', 'Kendrapara', 'Kendujhar','Khagaria', 'Khandwa', 'Khargone', 'Khawzawl', 'Kheda', 'Khordha','Khowai', 'Khunti', 'Kinnaur', 'Kiphire', 'Kishanganj', 'Kishtwar','Kodagu', 'Koderma', 'Kohima', 'Kolar', 'Kolasib', 'Kolhapur','Kolkata', 'Kollam', 'Kondagaon', 'Koppal', 'Koraput', 'Korba','Koriya', 'Kota', 'Kottayam', 'Kozhikode', 'Kra Daadi', 'Krishna','Krishnagiri', 'Kulgam', 'Kullu', 'Kupwara', 'Kurnool','Kurukshetra', 'Kurung Kumey', 'Kushinagar', 'Kutch','Lahaul and Spiti', 'Lakhimpur Kheri', 'Lakhisarai', 'Lalitpur','Latehar', 'Latur', 'Lawngtlai', 'Leh', 'Lepa Rada', 'Lohardaga','Lohit', 'Longding', 'Longleng', 'Lower Dibang Valley','Lower Siang', 'Lower Subansiri', 'Lucknow', 'Ludhiana', 'Lunglei','Madhepura', 'Madhubani', 'Madurai', 'Maharajganj', 'Mahasamund','Mahe', 'Mahendragarh', 'Mahisagar', 'Mahoba', 'Mainpuri','Malappuram', 'Malda', 'Malkangiri', 'Mamit', 'Mandi', 'Mandla','Mandsaur', 'Mandya', 'Mansa', 'Mathura', 'Mau', 'Mayurbhanj','Meerut', 'Mehsana', 'Mirzapur', 'Moga', 'Mokokchung', 'Mon','Moradabad', 'Morbi', 'Morena', 'Mumbai', 'Mungeli', 'Munger','Murshidabad', 'Muzaffarnagar', 'Muzaffarpur', 'Mysuru','Nabarangapur', 'Nadia', 'Nagapattinam', 'Nagaur', 'Nagpur','Nainital', 'Nalanda', 'Namakkal', 'Namsai', 'Nanded', 'Nandurbar','Narayanpur', 'Narmada', 'Narsinghpur', 'Nashik', 'Navsari','Nawada', 'Nayagarh', 'Neemuch', 'Nilgiris', 'Niwari','North 24 Parganas', 'North Garo Hills', 'North Tripura','Nuapada', 'Nuh', 'Osmanabad', 'Other Region', 'Other State','Others', 'Pakke Kessang', 'Pakur', 'Palakkad', 'Palamu','Palghar', 'Pali', 'Palwal', 'Panchkula', 'Panchmahal', 'Panipat','Panna', 'Papum Pare', 'Parbhani', 'Paschim Bardhaman','Paschim Medinipur', 'Patan', 'Pathanamthitta', 'Pathankot','Patiala', 'Patna', 'Pauri Garhwal', 'Perambalur', 'Peren', 'Phek','Pilibhit', 'Pithoragarh', 'Porbandar', 'Prakasam', 'Pratapgarh','Prayagraj', 'Puducherry', 'Pudukkottai', 'Pulwama', 'Punch','Pune', 'Purba Bardhaman', 'Purba Medinipur', 'Puri', 'Purnia','Purulia', 'Rae Bareli', 'Raichur', 'Raigad', 'Raigarh','Railway Quarantine', 'Raipur', 'Raisen', 'Rajgarh', 'Rajkot','Rajnandgaon', 'Rajouri', 'Rajsamand', 'Ramanagara','Ramanathapuram', 'Ramban', 'Ramgarh', 'Rampur', 'Ranchi','Ranipet', 'Ratlam', 'Ratnagiri', 'Rayagada', 'Reasi', 'Rewa','Rewari', 'Ribhoi', 'Rohtak', 'Rohtas', 'Rudraprayag', 'Rupnagar','S.A.S. Nagar', 'S.P.S. Nellore', 'Sabarkantha', 'Sagar','Saharanpur', 'Saharsa', 'Sahibganj', 'Saiha', 'Saitual', 'Salem','Samastipur', 'Samba', 'Sambalpur', 'Sambhal', 'Sangli', 'Sangrur','Sant Kabir Nagar', 'Saraikela-Kharsawan', 'Saran', 'Satara','Satna', 'Sawai Madhopur', 'Sehore', 'Seoni', 'Serchhip','Shahdol', 'Shahid Bhagat Singh Nagar', 'Shahjahanpur', 'Shajapur','Shamli', 'Sheikhpura', 'Sheohar', 'Sheopur', 'Shi Yomi', 'Shimla','Shivamogga', 'Shivpuri', 'Shopiyan', 'Shrawasti', 'Siang','Siddharthnagar', 'Sidhi', 'Sikar', 'Simdega', 'Sindhudurg','Singrauli', 'Sipahijala', 'Sirmaur', 'Sirohi', 'Sirsa','Sitamarhi', 'Sitapur', 'Sivaganga', 'Siwan', 'Solan', 'Solapur','Sonbhadra', 'Sonipat', 'South 24 Parganas', 'South Garo Hills','South Tripura', 'South West Garo Hills', 'South West Khasi Hills','Sri Muktsar Sahib', 'Srikakulam', 'Srinagar', 'State Pool','Subarnapur', 'Sukma', 'Sultanpur', 'Sundargarh', 'Supaul','Surajpur', 'Surat', 'Surendranagar', 'Surguja', 'Tapi','Tarn Taran', 'Tawang', 'Tehri Garhwal', 'Tenkasi', 'Thane','Thanjavur', 'Theni', 'Thiruvallur', 'Thiruvananthapuram','Thiruvarur', 'Thoothukkudi', 'Thrissur', 'Tikamgarh', 'Tirap','Tiruchirappalli', 'Tirunelveli', 'Tirupathur', 'Tiruppur','Tiruvannamalai', 'Tonk', 'Tuensang', 'Tumakuru', 'Udaipur','Udham Singh Nagar', 'Udhampur', 'Udupi', 'Ujjain', 'Umaria','Una', 'Unknown', 'Unnao', 'Unokoti', 'Upper Dibang Valley','Upper Siang', 'Upper Subansiri', 'Uttar Bastar Kanker','Uttar Dinajpur', 'Uttara Kannada', 'Uttarkashi', 'Vadodara','Vaishali', 'Valsad', 'Varanasi', 'Vellore', 'Vidisha','Vijayapura', 'Viluppuram', 'Virudhunagar', 'Visakhapatnam','Vizianagaram', 'Wardha', 'Washim', 'Wayanad', 'West Champaran','West Garo Hills', 'West Godavari', 'West Jaintia Hills','West Kameng', 'West Khasi Hills', 'West Siang', 'West Singhbhum','West Tripura', 'Wokha', 'Y.S.R. Kadapa', 'Yadgir', 'Yamunanagar','Yanam', 'Yavatmal', 'Zunheboto']\nApply_Rolling = 4 #@param {type:\"slider\", min:1, max:30, step:1}\nPlot_Method = \"Mean\" #@param [\"None\", \"Median\", \"Mean\", \"Max\", \"Min\"]\nFill_Below = True #@param {type:\"boolean\"}\nPlot_Column = Plot_Column.split(' ')\n\ndata = District_[District_.District == Plot_District]\nn_cols = len(District_['Month'].unique())\nn_rows = len(Plot_Column)\nplot_color = list(sns.color_palette(Style_Color,n_colors=n_rows*n_cols).as_hex())\nplt.figure(figsize = (Graphs_Width*4.5,int(Graphs_Height\/2)*n_rows))\ni=0\n\nfor plot_row in Plot_Column:\n  plot_row = plot_row.replace('-',' ')\n  for col in data['Month'].unique():\n    temp = data[data['Month'] == col].reset_index(drop = True)\n    plt.subplot( n_rows , n_cols , i+1)\n    if Plot_Method == 'Mean':\n      plt.plot(temp[plot_row].rolling(Apply_Rolling, min_periods = 1).mean() , color = plot_color[i] , label = '{} Rolling Mean'.format(col))\n    elif Plot_Method == 'Median':\n      plt.plot(temp[plot_row].rolling(Apply_Rolling, min_periods = 1).median() , color = plot_color[i] , label = '{} Rolling Median'.format(col))\n    elif Plot_Method == 'Max':\n      plt.plot(temp[plot_row].rolling(Apply_Rolling, min_periods = 1).max() , color = plot_color[i] , label = '{} Rolling Max'.format(col))\n    elif Plot_Method == 'Min':\n      plt.plot(temp[plot_row].rolling(Apply_Rolling, min_periods = 1).min() , color = plot_color[i] , label = '{} Rolling Min'.format(col))\n    else:\n      plt.plot(temp[plot_row] , color = plot_color[i] , label = '{}'.format(col))\n      \n    if Fill_Below:\n      plt.fill_between(list(temp.index) ,0, temp[plot_row] ,color = plot_color[i] , alpha =0.4, label = '{}'.format(col))\n  \n    plt.legend()\n    plt.title('{}  in Month {}'.format(plot_row.replace('_',' (Per Day) ') , col) , fontsize = 19)\n    i+=1\nplt.plot()\n\n","c5236421":"#@markdown <h3>\u2b05\ufe0f Click Here to START Fitting<\/h3>\n#@markdown <br><center><img src='https:\/\/file.scirp.org\/Html\/3-7401490\/5c6169a0-4c91-4bdc-be3e-3c9ba7cf13ce.jpg' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2><br>Predict Corona Virus Cases in India With SEIR Model<\/h2><\/center><br>\nDays_From_Exposed_To_Infected = 10 #@param {type:\"slider\", min:0, max:21, step:1}\nPhase_Differnce = 81 #@param {type:\"slider\", min:0, max:300, step:1}\n\n\ndef seir_model_ode(y, t, params): \n  infection_rate = params[0]\n  recovery_rate = params[1]\n  exposed_rate = params[2]\n  reinfection_rate = params[3]\n  \n  s = y[0]\n  e = y[1]\n  i = y[2]\n  r = y[3]\n\n  dsdt = -exposed_rate*s*(i+e) + reinfection_rate*r\n  dedt = (exposed_rate*s*(i+e)) - (infection_rate*e)\n  didt = (infection_rate*e) - (recovery_rate*i)\n  drdt = recovery_rate*i - reinfection_rate*r\n\n  return (dsdt, dedt, didt, drdt)\n\ndef calculate_seir_model(params, t, initial_condition):\n  seir_ode = lambda y,t:seir_model_ode(y,t, params)\n  ode_result = integrate.odeint(func=seir_ode, y0=initial_condition, t=t)\n  return ode_result\n\ndef fit_seir_model(params_to_fit, t, initial_condition, i_r_true):\n  fit_result = calculate_seir_model(params_to_fit, t, initial_condition)\n  residual_i = i_r_true[0] - fit_result[:,2]\n  residual_r = i_r_true[1] - fit_result[:,3]\n  residual = np.concatenate((residual_i, residual_r))\n  return residual \n\ndef country2Divided(N, status,lockdownDay,countryName):\n  plot_color = list(sns.color_palette(Style_Color,n_colors=4).as_hex())\n  I_start = status.loc[0, 'Confirmed']\/N\n  E_start = (status.loc[Days_From_Exposed_To_Infected, 'Confirmed'] - status.loc[0, 'Confirmed'])\/N\n  S_start = 1 - E_start - I_start\n  R_start = status.loc[0, 'Recovered']\/N\n\n  ic = (S_start, E_start, I_start, R_start)\n\n  beforelockdown=status.loc[0:lockdownDay]\n  afterlockdown=status.loc[lockdownDay+1:]\n  i_r_true_bf = (list(beforelockdown['Confirmed']\/N), list(beforelockdown['Recovered']\/N))\n  i_r_true_af = (list(afterlockdown['Confirmed']\/N), list(afterlockdown['Recovered']\/N))\n\n  time_opt_bf = range(0, lockdownDay+1)\n  time_opt_af = range(0, len(afterlockdown))\n  time_opt =range(0,len(status))\n\n  E_start_day = min(len(status['Days_Passed']),len(beforelockdown)+14)\n  \n  E_start_af = (status.loc[E_start_day, 'Confirmed'] - status.loc[len(beforelockdown), 'Confirmed'])\/N\n  I_start_af = status.loc[len(beforelockdown), 'Confirmed']\/N\n  S_start_af = 1 - E_start_af - I_start_af\n  R_start_af = status.loc[len(beforelockdown), 'Recovered']\/N\n\n  ic_af = (S_start_af, E_start_af, I_start_af, R_start_af)\n  \n  params_start_guess = [0.01, 0.001, 0.01, 0.001]\n  optimal = optimize.least_squares(fit_seir_model,\n    x0=params_start_guess,\n    args=(time_opt_bf, ic, i_r_true_bf),\n    ftol=1.49012e-22)\n  optimal_af = optimize.least_squares(fit_seir_model,\n    x0=params_start_guess,\n    args=(time_opt_af, ic_af, i_r_true_af),\n    ftol=1.49012e-22)\n  \n  optimal_params = optimal.x\n  optimal_params_af = optimal_af.x\n\n  print('## '+countryName+' In Intial Phase')\n  print('Optimized infection rate: ', optimal_params[0])\n  print('Optimized recovered rate: ', optimal_params[1])\n  print('Optimized exposed rate: ', optimal_params[2])\n  print('Optimized reinfection rate: ', optimal_params[3])\n  print('\\n')\n  print('## '+countryName+' after Phase')\n  print('Optimize infection rate: ', optimal_params_af[0])\n  print('Optimize recovered rate: ', optimal_params_af[1])\n  print('Optimize exposed rate: ', optimal_params_af[2])\n  print('Optimized reinfection rate: ', optimal_params_af[3])\n  ir = optimal_params[0]\n  rr = optimal_params[1]\n  er = optimal_params[2]\n  rir = optimal_params[3]\n  ir_af = optimal_params_af[0]\n  rr_af = optimal_params_af[1]\n  er_af = optimal_params_af[2]\n  rir_af = optimal_params_af[3]\n\n  fit_result_bf = calculate_seir_model((ir, rr, er, rir), time_opt_bf, ic)\n  fit_result_af = calculate_seir_model((ir_af, rr_af, er_af, rir_af), time_opt_af, ic_af)\n  fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, sharey=True, sharex=True, figsize=[Graphs_Width,int(Graphs_Height\/2)])\n  fig.text(0.5, 0.04, 'Number of days after March-01 2020', ha='center', fontsize=18)\n\n  ax1.set_title('Infected cases in '+ countryName,fontsize=20)\n  ax1.plot(time_opt, i_r_true_bf[0]+i_r_true_af[0], 'o-', color= plot_color[0] , markersize = 0.3)\n  ax1.plot(time_opt, np.hstack((fit_result_bf[:,2],fit_result_af[:,2])), 'o-', color= plot_color[2] , markersize=0.3)\n  ax1.legend(['Actual infection', 'Predicted infection'],loc=2, fontsize=12)\n  ax1.set_ylabel('Proportion of population', fontsize=12)\n  \n  ax2.set_title('Recovered cases in '+countryName,fontsize=20)    \n  ax2.plot(time_opt, i_r_true_bf[1]+i_r_true_af[1], 'o-', color= plot_color[1] ,  markersize = .3)\n  ax2.plot(time_opt, np.hstack((fit_result_bf[:,3],fit_result_af[:,3])), 'o-', color= plot_color[3],markersize=0.3)\n  ax2.legend(['Real recover', 'Predicted recover'],loc=2, fontsize=12)\n  datetime_pred = pd.date_range(start=\"2020-03-01\",end=\"2021-01-01\", freq='D')\n  pred_time = [x.strftime(\"%Y-%m-%d\") for x in datetime_pred]\n  pred_range = range(0, len(pred_time))\n  pred_result = calculate_seir_model((ir_af, rr_af, er_af, rir_af), pred_range, ic_af)\n  time_axis = [pred_time[i] for i in[0, 29, 60, 90, 121, 151, 182, 213, 243, 274, 304]]\n  time_labels = ['Mar.', 'Apr.', 'May', 'June', 'July', 'Aug.', 'Sept.', 'Oct.', 'Nov.', 'Dec.', 'Jan.']\n  ## Plot SEIDR\n  fig, ax = plt.subplots(figsize=[Graphs_Width,Graphs_Height])\n\n  ax.plot(pred_time, pred_result[:,0],color=plot_color[0] ) #susceptible\n  ax.plot(pred_time, pred_result[:,1],color=plot_color[1] ) #exposed\n  ax.plot(pred_time, pred_result[:,2],color=plot_color[2] ) #infected\n  ax.plot(pred_time, pred_result[:,3], color = plot_color[3] ) #recovered\n  ax.legend(loc=1, labels=['Susceptible', 'Exposed', 'Infected', 'Recovered'], fontsize=12)\n  ax.set_title('SEIR predictions', fontsize=20)\n  ax.set_xlabel('Month', fontsize=12)\n  ax.set_ylabel('Proportion of population', fontsize=12)\n  plt.xticks(time_axis, time_labels, rotation='vertical');\n\ncountry2Divided(138*1e6 ,India_.reset_index(drop = True), Phase_Differnce, 'India');","054d8cf0":"#@markdown <center><h2><br>How Normal Unoptimized SEIR Model Looks<\/h2><\/center><br>\n\ndef base_seir_model(init_vals, params, t):\n    S_0, E_0, I_0, R_0 = init_vals\n    S, E, I, R = [S_0], [E_0], [I_0], [R_0]\n    alpha, beta, gamma = params\n    dt = t[1] - t[0]\n    for _ in t[1:]:\n        next_S = S[-1] - (beta*S[-1]*I[-1])*dt\n        next_E = E[-1] + (beta*S[-1]*I[-1] - alpha*E[-1])*dt\n        next_I = I[-1] + (alpha*E[-1] - gamma*I[-1])*dt\n        next_R = R[-1] + (gamma*I[-1])*dt\n        S.append(next_S)\n        E.append(next_E)\n        I.append(next_I)\n        R.append(next_R)\n    return [S,E, I,R]\n  \nt_max = 100\ndt = .1\nt = np.linspace(0, t_max, int(t_max\/dt) + 1)\nN = 1000000\ninit_vals = 1 - 1\/N, 1\/N, 0, 0\nalpha = 0.2\nbeta = 1.75\ngamma = 0.5\nparams = alpha, beta, gamma\n# Run simulation\nresults = base_seir_model(init_vals, params, t)\n\nplt.figure(figsize=(Graphs_Width,Graphs_Height))\nplt.suptitle(Sup_Title, fontsize = 29)\n\nfor i in results:\n  plt.plot(i )\nplt.legend(['Susceptible','Exposed','Infected','Recovered'])\nplt.ylabel('% of Population')\nplt.xlabel('Days Passed Since 01-Jan-2020')","39711ce7":"#@markdown <h3>\u2b05\ufe0f Click Here to START Fitting<\/h3>\n#@markdown <br><center><img src='https:\/\/www.researchgate.net\/profile\/Sebastiano_Battiato\/publication\/340482894\/figure\/fig1\/AS:877674142654465@1586265230482\/The-employed-SEIRD-epidemic-model-for-SARS-CoV-2.jpg' height=\"200\" alt=\"SEIRD-logo\"\/><\/center>\n#@markdown <center><h2><br>Predict Corona Virus Cases in Country With SEIRD Model<\/h2><\/center><br>\nDays_From_Exposed_To_Infected = 7 #@param {type:\"slider\", min:0, max:21, step:1}\nPhase_Differnce = 59 #@param {type:\"slider\", min:0, max:300, step:1}\nConsider_Exposed_as_Infectious = True #@param {type:\"boolean\"}\n\ndef seird_v2_model_ode(y, t, params): \n  # Parameters to find\n  infection_rate = params[0]\n  recovery_rate = params[1]\n  exposed_rate = params[2]\n  reinfection_rate = params[3]\n  death_rate = params[4]\n  \n  # Y variables\n  s = y[0]\n  e = y[1]\n  i = y[2]\n  r = y[3]\n  d = y[4]\n  # SIR ODE System \n  dsdt = -exposed_rate*s*i + reinfection_rate*r\n  dedt = (exposed_rate*s*i) - (infection_rate*e)\n  didt = (infection_rate*e) - (recovery_rate*i + death_rate*i)\n  drdt = recovery_rate*i - reinfection_rate*r \n  dddt = death_rate*i\n    \n  # Return our system\n  return (dsdt, dedt, didt, drdt, dddt)\n\n\ndef seird_model_ode(y, t, params): \n  # Parameters to find\n  infection_rate = params[0]\n  recovery_rate = params[1]\n  exposed_rate = params[2]\n  reinfection_rate = params[3]\n  death_rate = params[4]\n  \n  # Y variables\n  s = y[0]\n  e = y[1]\n  i = y[2]\n  r = y[3]\n  d = y[4]\n  # SIR ODE System \n  dsdt = -exposed_rate*s*(i+e) + reinfection_rate*r\n  dedt = (exposed_rate*s*(i+e)) - (infection_rate*e)\n  didt = (infection_rate*e) - (recovery_rate*i + death_rate*i)\n  drdt = recovery_rate*i - reinfection_rate*r\n  dddt = death_rate*i\n    \n  # Return our system\n  return (dsdt, dedt, didt, drdt, dddt)\n\ndef calculate_seird_model(params, t, initial_condition):\n  if Consider_Exposed_as_Infectious:\n    seird_ode = lambda y,t:seird_model_ode(y,t, params)\n  else:\n    seird_ode = lambda y,t:seird_v2_model_ode(y,t, params)\n  ode_result = integrate.odeint(func=seird_ode, y0=initial_condition, t=t)\n  return ode_result\n\ndef fit_seird_model(params_to_fit, t, initial_condition, i_r_true):\n  fit_result = calculate_seird_model(params_to_fit, t, initial_condition)\n  residual_i = i_r_true[0] - fit_result[:,2]\n  residual_r = i_r_true[1] - fit_result[:,3]\n  residual_d = i_r_true[2] - fit_result[:,4]\n  residual = np.concatenate((residual_i, residual_r , residual_d))\n  return residual\n\ndef seird_predict(N, status,lockdownDay,countryName):\n  #Initial Values of SEIRD\n  I_start = status.iloc[0]['Confirmed']\/N\n  E_start = (status.iloc[Days_From_Exposed_To_Infected]['Confirmed'] - status.iloc[0]['Confirmed'])\/N\n  S_start = 1 - E_start - I_start\n  R_start = status.iloc[0]['Recovered']\/N\n  D_start = status.iloc[0]['Deceased']\/N\n  ic = (S_start, E_start, I_start, R_start , D_start)\n\n  #Dividing the Data to Two Phases\n  beforelockdown=status.iloc[0:lockdownDay]\n  afterlockdown=status.iloc[lockdownDay+1:]\n  i_r_true_bf = (list(beforelockdown['Confirmed']\/N), list(beforelockdown['Recovered']\/N) , list(beforelockdown['Deceased']\/N))\n  i_r_true_af = (list(afterlockdown['Confirmed']\/N), list(afterlockdown['Recovered']\/N) , list(afterlockdown['Deceased']\/N))\n\n  time_opt_bf = range(0, lockdownDay)\n  time_opt_af = range(0, len(afterlockdown))\n  time_opt =range(1,len(status))\n  \n  # Find Minimum for Start Day of Exposed Data\n\n  E_start_day = min(len(status['Days_Passed']),len(beforelockdown)+Days_From_Exposed_To_Infected)\n  E_start_af = (status.iloc[E_start_day]['Confirmed'] - status.iloc[len(beforelockdown)]['Confirmed'])\/N\n  I_start_af = status.iloc[len(beforelockdown)]['Confirmed']\/N\n  S_start_af = 1 - E_start_af - I_start_af\n  R_start_af = status.iloc[len(beforelockdown)]['Recovered']\/N\n  D_start_af = status.iloc[len(beforelockdown)]['Deceased']\/N\n\n  # Calculating Optimal Solution\n  ic_af = (S_start_af, E_start_af, I_start_af, R_start_af, D_start_af)  \n  params_start_guess = [0.01, 0.001, 0.005, 0.001 , 0.00005]\n  # assert (len())\n  optimal = optimize.least_squares(fit_seird_model,\n    x0=params_start_guess,\n    args=(time_opt_bf, ic, i_r_true_bf),\n    ftol=1.49012e-22,\n    jac= '3-point',\n    method = 'trf',loss= 'linear' , verbose = 1)\n  optimal_af = optimize.least_squares(fit_seird_model,\n    x0=params_start_guess,\n    args=(time_opt_af, ic_af, i_r_true_af),\n    ftol=1.49012e-22,\n    jac= '3-point',\n    method = 'trf' , loss = 'linear', verbose = 1)\n  optimal_params = optimal.x\n  optimal_params_af = optimal_af.x\n  # Printing Optimal Solution\n  print('## '+countryName+' In Intial Phase')\n  print('Optimized infection rate: ', optimal_params[0])\n  print('Optimized recovered rate: ', optimal_params[1])\n  print('Optimized exposed rate: ', optimal_params[2])\n  print('Optimized reinfection rate: ', optimal_params[3])\n  print('Optimized Death rate: ', optimal_params[4])\n  print('\\n')\n  print('## '+countryName+' after Phase')\n  print('Optimize infection rate: ', optimal_params_af[0])\n  print('Optimize recovered rate: ', optimal_params_af[1])\n  print('Optimize exposed rate: ', optimal_params_af[2])\n  print('Optimized reinfection rate: ', optimal_params_af[3])\n  print('Optimized Death rate: ', optimal_params_af[4])\n  ir = optimal_params[0]\n  rr = optimal_params[1]\n  er = optimal_params[2]\n  rir = optimal_params[3]\n  dr = optimal_params[4]\n  ir_af = optimal_params_af[0]\n  rr_af = optimal_params_af[1]\n  er_af = optimal_params_af[2]\n  rir_af = optimal_params_af[3]\n  dr_af = optimal_params_af[4]\n\n  fit_result_bf = calculate_seird_model((ir, rr, er, rir , dr), time_opt_bf, ic)\n  fit_result_af = calculate_seird_model((ir_af, rr_af, er_af, rir_af , dr_af), time_opt_af, ic_af)\n\n  plot_color = list(sns.color_palette(Style_Color,n_colors=6).as_hex())\n  fig, (ax1, ax2, ax3) = plt.subplots(nrows=1, ncols=3, sharey=False, sharex=False, figsize=[Graphs_Width,int(Graphs_Height\/3)])\n  # fig.text(0.5, 0.04, 'Number of days after March-01 2020', ha='center', fontsize=18)\n\n  ax1.set_title('Infected cases in '+ countryName,fontsize=20)\n  ax1.plot(time_opt, i_r_true_bf[0]+i_r_true_af[0], 'o-', color= plot_color[0] , markersize = 0.3)\n  ax1.plot(time_opt, np.hstack((fit_result_bf[:,2],fit_result_af[:,3])), 'o-', color= plot_color[3] , markersize=0.3)\n  ax1.legend(['Actual infection', 'Predicted infection'],loc=2, fontsize=12)\n  ax1.set_ylabel('Proportion of population')\n  ax1.set_xlabel('No. of Days Passed')\n  \n  ax2.set_title('Recovered cases in '+countryName,fontsize=20)    \n  ax2.plot(time_opt, i_r_true_bf[1]+i_r_true_af[1], 'o-', color= plot_color[1] ,  markersize = .3)\n  ax2.plot(time_opt, np.hstack((fit_result_bf[:,3],fit_result_af[:,3])), 'o-', color= plot_color[4],markersize=0.3)\n  ax2.legend(['Actual Recovery', 'Predicted Recovery'],loc=2, fontsize=12)\n  ax2.set_ylabel('Proportion of population')\n  ax2.set_xlabel('No. of Days Passed')\n\n  ax3.set_title('Deceased cases in '+countryName,fontsize=20)    \n  ax3.plot(time_opt, i_r_true_bf[2]+i_r_true_af[2], 'o-', color= plot_color[2] ,  markersize = .3)\n  ax3.plot(time_opt, np.hstack((fit_result_bf[:,4],fit_result_af[:,4])), 'o-', color= plot_color[5],markersize=0.3)\n  ax3.legend(['Actual Deceased Cases', 'Predicted Deceased Cases'],loc=2, fontsize=12)\n  ax3.set_ylabel('Proportion of population')\n  ax3.set_xlabel('No. of Days Passed')\n\n  datetime_pred = pd.date_range(start=\"2020-03-01\",end=\"2021-01-01\", freq='D')\n  pred_time = [x.strftime(\"%Y-%m-%d\") for x in datetime_pred]\n  pred_range = range(0, len(pred_time))\n  pred_result = calculate_seird_model((ir_af, rr_af, er_af, rir_af, dr_af), pred_range, ic_af)\n  # time_axis = [pred_time[i] for i in[0, 29, 60, 90, 121, 151, 182, 213, 243, 274, 304]]\n  # time_labels = ['Mar.', 'Apr.', 'May', 'June', 'July', 'Aug.', 'Sept.', 'Oct.', 'Nov.', 'Dec.', 'Jan.']\n  \n  ## Plot SEIDR\n  fig, ax = plt.subplots(figsize=[Graphs_Width,Graphs_Height])\n\n  ax.plot(pred_range, pred_result[:,0],color=plot_color[0] ) #susceptible\n  ax.plot(pred_range, pred_result[:,1],color=plot_color[1] ) #exposed\n  ax.plot(pred_range, pred_result[:,2],color=plot_color[2] ) #infected\n  ax.plot(pred_range, pred_result[:,3], color = plot_color[3] ) #recovered\n  ax.plot(pred_range, pred_result[:,4], color = plot_color[4] ) #deceased\n  # ax.plot(pred_time, pred_result[:,4], color = plot_color[4] ) #deceased\n  ax.legend(loc=1, labels=['Susceptible', 'Exposed', 'Infected', 'Recovered' , 'Deceased'])\n  ax.set_title('SEIRD predictions')\n  ax.set_xlabel('Months')\n  ax.set_ylabel('Proportion of population', fontsize=12)\n  # plt.xticks(time_axis, time_labels, rotation='vertical');\n  return optimal , optimal_af\noptimal , optimal_af = seird_predict(138*1e6 ,India_.reset_index(drop = True), Phase_Differnce, 'India');","23de8a5f":"#@markdown <h3>\u2b05\ufe0f Click Here to START Fitting<\/h3>\n#@markdown <br><center><img src='https:\/\/external-content.duckduckgo.com\/iu\/?u=http%3A%2F%2Fwww.pngall.com%2Fwp-content%2Fuploads%2F2016%2F07%2FFacebook-Download-PNG.png&f=1&nofb=1' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2><br>Prophet Model for Forecasting<\/h2><\/center><br>\n\nPlot_Column = \"Confirmed\" #@param ['Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_']\nLocation = \"India\" #@param ['Kerala', 'Delhi', 'Telangana', 'India', 'Rajasthan', 'Haryana','UP', 'Ladakh', 'TN', 'J&K', 'Karnataka', 'Maharashtra', 'Punjab','Andra P', 'HP', 'Uttarakhand', 'Odisha', 'Puducherry','West Bengal', 'Chandigarh', 'Chhattisgarh', 'Gujarat', 'MP','Bihar', 'Manipur', 'Goa', 'Mizoram', 'A&N', 'Assam', 'Jharkhand','Arun P', 'Nagaland', 'Tripura', 'D&D', 'Meghalaya', 'Sikkim','Other']\nPredict_For = 55 #@param {type:\"slider\", min:0, max:100, step:1}\n\n\nprophet_data = Completed_[Completed_.State == Location][['Date' , Plot_Column]]\nprophet_data['Date'] = pd.to_datetime(prophet_data['Date'])\nprophet_data.columns = ['ds','y']\n\nm = Prophet()\nm.fit(prophet_data)\nfuture = m.make_future_dataframe(periods=Predict_For)\nforecast = m.predict(future)\nforecast.index = pd.to_datetime(forecast.ds)\nclear_output()\nplot_color = list(sns.color_palette(Style_Color,n_colors=3).as_hex())\nplt.figure(figsize=(Graphs_Width,Graphs_Height))\n\nplt.bar(list(prophet_data.index) , prophet_data['y'].values, width = 0.3 , linewidth = 0 , color = list(sns.color_palette(Style_Color,n_colors=prophet_data.shape[0]).as_hex()) )\nplt.fill_between(list(forecast.index), forecast['yhat_lower'].values, forecast['yhat_upper'].values, color = plot_color[0] , alpha = 0.2 )\nplt.plot(forecast['yhat'], label = 'Predicted Corona Cases By Prophet Model ' , color = plot_color[1] )\nplt.plot(prophet_data['y'], label = 'Confirmed Corona Cases ' , color = plot_color[2] )\n\nplt.suptitle(Sup_Title, fontsize = 29)\nplt.title('{} Cases of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' (Daily)').title() ) , fontsize = 19)\nplt.legend()\nplt.ylabel('Cases')\nplt.xlabel('Days Passed Since {}'.format(Completed_.Date.min()))\nplt.subplots_adjust(top=SubPlot_Top)\n","dc80b208":"plot_plotly(m, forecast)","31b8c08f":"plot_components_plotly(m, forecast)","8f014c99":"#@markdown <h3>\u2b05\ufe0f Click Here to START Fitting<\/h3>\n#@markdown <br><center><img src='https:\/\/svmwebsolutions.com\/wp-content\/uploads\/2019\/04\/logo.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2><br>SVM Model for Forecasting<\/h2><\/center><br>\n\nPlot_Column = \"Confirmed\" #@param ['Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_']\nLocation = \"India\" #@param ['Kerala', 'Delhi', 'Telangana', 'India', 'Rajasthan', 'Haryana','UP', 'Ladakh', 'TN', 'J&K', 'Karnataka', 'Maharashtra', 'Punjab','Andra P', 'HP', 'Uttarakhand', 'Odisha', 'Puducherry','West Bengal', 'Chandigarh', 'Chhattisgarh', 'Gujarat', 'MP','Bihar', 'Manipur', 'Goa', 'Mizoram', 'A&N', 'Assam', 'Jharkhand','Arun P', 'Nagaland', 'Tripura', 'D&D', 'Meghalaya', 'Sikkim','Other']\nKernel_SVM = \"poly\" #@param['poly','linear','rbf','sigmoid']\nPredict_For = 35 #@param {type:\"slider\", min:0, max:100, step:1}\n#@markdown <br><h4><i>* Note - SVR Show Poor Result Worst than expected<\/i><\/h4>\n\nsvm=SVR(C=1,degree=6,kernel=Kernel_SVM , epsilon=0.01)\n# C -> Regularization Parameter\n# Degree -> Degree of Polynomial Kernel to use (Ignored for Others)\n# Kernel -> Kernel to use for Prediction\n\ndata = Completed_[Completed_['State'] == Location]\n#Fitting model on the training data\nsvm.fit(data['Days_Passed'].values.reshape(-1,1) , data[Plot_Column].values.reshape(-1,1))\nprediction_valid_svm=svm.predict(np.array(range(int(data['Days_Passed'].max()+Predict_For))).reshape(-1,1))\n\nclear_output()\nplot_color = list(sns.color_palette(Style_Color,n_colors=3).as_hex())\nplt.figure(figsize=(Graphs_Width,Graphs_Height))\n\nplt.bar(list(data['Days_Passed'].values) ,data[Plot_Column].values, width = 0.2 , linewidth = 0 , color = list(sns.color_palette(Style_Color,n_colors=len(data)).as_hex()) )\n# plt.fill_between(list(forecast.index), forecast['yhat_lower'].values, forecast['yhat_upper'].values, color = plot_color[0] , alpha = 0.2 )\nplt.plot(prediction_valid_svm, label = 'Predicted Corona Cases By SVR Model ' , color = plot_color[1] )\nplt.plot(data[Plot_Column].values.reshape(-1,1), label = '{} Corona Cases '.format(Plot_Column) , color = plot_color[2] )\n\nplt.suptitle(Sup_Title, fontsize = 29)\nplt.title('{} Cases of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' (Daily)').title() ) , fontsize = 19)\nplt.legend()\nplt.ylabel('Cases')\nplt.xlabel('Days Passed Since {}'.format(Completed_.Date.min()))\nplt.subplots_adjust(top=SubPlot_Top)","124de7c1":"#@markdown <h3>\u2b05\ufe0f Click Here to START Fitting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn1.iconfinder.com\/data\/icons\/media-player-long-shadow\/50\/Repeat-512.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2><br>Correlations and Moving Average<\/h2><\/center><br>\n\nPlot_Column = \"Other\" #@param ['Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_']\nLocation = \"India\" #@param ['Kerala', 'Delhi', 'Telangana', 'India', 'Rajasthan', 'Haryana','UP', 'Ladakh', 'TN', 'J&K', 'Karnataka', 'Maharashtra', 'Punjab','Andra P', 'HP', 'Uttarakhand', 'Odisha', 'Puducherry','West Bengal', 'Chandigarh', 'Chhattisgarh', 'Gujarat', 'MP','Bihar', 'Manipur', 'Goa', 'Mizoram', 'A&N', 'Assam', 'Jharkhand','Arun P', 'Nagaland', 'Tripura', 'D&D', 'Meghalaya', 'Sikkim','Other']\nSeason_Period = 7 #@param {type:\"slider\", min:1, max:40, step:1}\nUse_Log = False #@param {type:\"boolean\"}\nDate = 'Date'\nPredict_For = 0\ndata = Completed_[Completed_['State'] == Location]\ntimes = pd.date_range(data[Date].min(), periods = data.shape[0]+Predict_For , freq='D')\ndata.index = pd.to_datetime(data[Date])\nif Use_Log:\n  data[Plot_Column] = np.log1p(data[Plot_Column].values)\ntrain_split = data[Plot_Column]\ntrain_split_mean = train_split.rolling(Season_Period , min_periods = 1).mean()\ntrain_split_std = train_split.rolling(Season_Period , min_periods = 1).std()\n\ntrain_split_acf = pd.Series(acf(train_split, nlags = 40))\ntrain_split_pacf = pd.Series(pacf(train_split, nlags = 40 , method = 'ols') )\n\nResult = [[train_split_mean, 'Roling Mean'],\n          [train_split_std , 'Rolling STD'],\n          ]\nResult_2 =[[train_split_acf , 'Autocorrelation Function'],\n          [train_split_pacf, 'Partial Autocorrelation Function']]\n\nif True:\n  plot_color = list(sns.color_palette(Style_Color,n_colors=len(Result)+1).as_hex())\n  fig = plt.figure(figsize=(Graphs_Width,Graphs_Height))\n  plt.suptitle(Sup_Title, fontsize = 29)\n  plt.subplots_adjust(top=SubPlot_Top)\n  plt.subplot(2,1,1)\n  plt.title('{} Cases of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' (Daily)').title()  ) , fontsize = 19)\n\n  plt.fill_between(train_split.index , 0 , train_split , color = plot_color[0],alpha = .2 , label = 'Original Data')\n  for j,i in enumerate(Result):\n    plt.plot(i[0], label = i[1] , color = plot_color[j+1] )\n  plt.legend()\n  plt.ylabel('Cases')\n  plt.xlabel('Days Passed')\n  \n  # plt.plot()\n  plt.subplot(2,1,2)\n\n  # fig = plt.figure(figsize=(Graphs_Width,Graphs_Height\/2))\n  for j,i in enumerate(Result_2):\n    plt.plot(i[0], label = i[1] , color = plot_color[j+1] )\n  plt.legend()\n  plt.plot()\n\n","d9ff0a56":"Plot_Column = \"Deceased Deceased_\" #@param ['Confirmed Confirmed_', 'Recovered Recovered_', 'Deceased Deceased_', 'Other Other_', 'Tested Tested_', 'Active Active_']\nLocation = \"India\" #@param ['Kerala', 'Delhi', 'Telangana', 'India', 'Rajasthan', 'Haryana','UP', 'Ladakh', 'TN', 'J&K', 'Karnataka', 'Maharashtra', 'Punjab','Andra P', 'HP', 'Uttarakhand', 'Odisha', 'Puducherry','West Bengal', 'Chandigarh', 'Chhattisgarh', 'Gujarat', 'MP','Bihar', 'Manipur', 'Goa', 'Mizoram', 'A&N', 'Assam', 'Jharkhand','Arun P', 'Nagaland', 'Tripura', 'D&D', 'Meghalaya', 'Sikkim','Other']\nDate = 'Date'\n\ndata = Completed_[Completed_['State'] == Location]\n# times = pd.date_range(data[Date].min(), periods = data.shape[0] , freq='D')\n# data.index = pd.to_datetime(data[Date])\nplot_color = list(sns.color_palette(Style_Color,n_colors=4).as_hex())\n\nPlot_Column = Plot_Column.split(' ')\nn_cols = 2\nn_rows = 2\nplt.figure(figsize = (Graphs_Width,Graphs_Height))\nplt.subplot(n_rows , n_cols , 1)\nplot_acf(data[Plot_Column[0]], lags = 75, ax = plt.gca() , c = plot_color[0] , title = Plot_Column[0]+' Autocorrelation' )\nplt.subplot(n_rows , n_cols , 2)\nplot_pacf(data[Plot_Column[0]], lags = 75, ax = plt.gca() , c = plot_color[1], title = Plot_Column[0]+' Partial Autocorrelation' )\nplt.subplot(n_rows , n_cols , 3)\nplot_acf(data[Plot_Column[1]] , lags = 75, ax = plt.gca() , c = plot_color[2], title = Plot_Column[1]+' Autocorrelation' )\nplt.subplot(n_rows , n_cols , 4)\nplot_pacf(data[Plot_Column[1]] , lags = 75, ax = plt.gca() , c = plot_color[3], title = Plot_Column[1]+' Partial Autocorrelation' )\nplt.plot()","81847a4c":"#@markdown <h3>\u2b05\ufe0f Click Here to START Fitting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn2.iconfinder.com\/data\/icons\/wirecons-free-vector-icons\/32\/475331-calculate-512.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2><br>Seasonal Decompose of Data<\/h2><\/center><br>\n\nPlot_Column = \"Confirmed\" #@param ['Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_']\nLocation = \"India\" #@param ['Kerala', 'Delhi', 'Telangana', 'India', 'Rajasthan', 'Haryana','UP', 'Ladakh', 'TN', 'J&K', 'Karnataka', 'Maharashtra', 'Punjab','Andra P', 'HP', 'Uttarakhand', 'Odisha', 'Puducherry','West Bengal', 'Chandigarh', 'Chhattisgarh', 'Gujarat', 'MP','Bihar', 'Manipur', 'Goa', 'Mizoram', 'A&N', 'Assam', 'Jharkhand','Arun P', 'Nagaland', 'Tripura', 'D&D', 'Meghalaya', 'Sikkim','Other']\nSeason_Period = 14 #@param {type:\"slider\", min:1, max:40, step:1}\nModel_Behaviour = \"add\" #@param [\"add\", \"mul\"]\n\ndata = Completed_[Completed_['State'] == Location]\ntrain_split = data[Plot_Column].values\ntrain_split = pd.Series(train_split)\nif Model_Behaviour == 'mul':\n  train_split = train_split +0.000001 \nseas_d=sm.tsa.seasonal_decompose(train_split,model=Model_Behaviour,period=Season_Period , extrapolate_trend='freq')\n\nprint('Accuracy Scores For Data is :\\n  -> Mean Squared Error : {} ({})\\n  -> Root Mean Squared Error : {} ({})\\n  -> Standard Deviation : {} ({})\\n  -> Mean Absolute Error : {} ({})\\n'\\\n      .format(\\\n              eval.mse(seas_d.trend.values, train_split),\\\n              eval.mse(seas_d.trend.values, train_split)\/len(train_split), \\\n              eval.rmse(seas_d.trend.values, train_split) , \\\n              eval.rmse(seas_d.trend.values, train_split)\/len(train_split) , \\\n              eval.stde(seas_d.trend.values, train_split), \\\n              eval.stde(seas_d.trend.values, train_split)\/len(train_split), \\\n              eval.meanabs(seas_d.trend.values, train_split),\\\n              eval.meanabs(seas_d.trend.values, train_split)\/len(train_split)\\\n              )\\\n      )\n\nplot_color = list(sns.color_palette(Style_Color,n_colors=4).as_hex())\nPlt_Col = 2\nPlt_Row = 1\nplt.figure(figsize=(Graphs_Width,Graphs_Height\/Plt_Col))\n\nplt.subplot(Plt_Row,Plt_Col , 1)\nplt.plot(seas_d.seasonal.values , label = 'Estimated Seasonal Component', color = plot_color[0])\nplt.fill_between(list(range(seas_d.nobs[0])) ,0, seas_d.seasonal.values ,color = plot_color[0] , alpha =0.4)\nplt.legend()\n\nplt.subplot(Plt_Row,Plt_Col , 2)\nplt.plot(seas_d.resid.values , label = 'Estimated Residual Component', color = plot_color[1])\nplt.fill_between(list(range(seas_d.nobs[0])) ,0, seas_d.seasonal.values ,color = plot_color[1] , alpha =0.4 , label = 'Estimated Seasonal Components')\nplt.legend()\n\nplt.suptitle(Sup_Title, fontsize = 29)\nplt.subplots_adjust(top=SubPlot_Top)\nplt.plot()\n\nplt.figure(figsize=(Graphs_Width,Graphs_Height\/Plt_Col))\nplt.plot(seas_d.observed.values , label = 'Observed Component', color = plot_color[2])\nplt.plot(seas_d.trend.values , label = 'Estimated Trend Component', color = plot_color[3])\nplt.legend()\nplt.plot()\n","f7538e0d":"#@markdown <h3>\u2b05\ufe0f Click Here to START Fitting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn0.iconfinder.com\/data\/icons\/data-analytics-line\/64\/Autoregression-chart-graph-result-analytics-512.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2><br>Auto Regression for Forecasting<\/h2><\/center><br>\nAR_Model = \"AutoReg\" #@param [\"AutoReg\", \"ar_select_order\"]\n\nPlot_Column = \"Confirmed\" #@param ['Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_']\nLocation = \"India\" #@param ['Kerala', 'Delhi', 'Telangana', 'India', 'Rajasthan', 'Haryana','UP', 'Ladakh', 'TN', 'J&K', 'Karnataka', 'Maharashtra', 'Punjab','Andra P', 'HP', 'Uttarakhand', 'Odisha', 'Puducherry','West Bengal', 'Chandigarh', 'Chhattisgarh', 'Gujarat', 'MP','Bihar', 'Manipur', 'Goa', 'Mizoram', 'A&N', 'Assam', 'Jharkhand','Arun P', 'Nagaland', 'Tripura', 'D&D', 'Meghalaya', 'Sikkim','Other']\nTrain_Split = 0.8 #@param {type:\"slider\", min:0.05, max:0.95, step:0.05}\nPredict_For = 20 #@param {type:\"slider\", min:0, max:100, step:5}\nSeason_Period = 14 #@param {type:\"slider\", min:1, max:40, step:1}\nPlot_Forecast = \"Complete Plot ( Train + Test + Forecast )\" #@param [\"Complete Plot ( Train + Test + Forecast )\", \"Test + Forecast Plot\"]\nPlot_Log = \"MatplotLib\" #@param [\"Plotly\", \"MatplotLib\"]\nPlot_Summary = True #@param {type:\"boolean\"}\nApply_Log = False #@param {type:\"boolean\"}\nDate = 'Date'\ndata = Completed_[Completed_['State'] == Location]\ntrain_for = int(data.shape[0]*Train_Split)\ntrain_split = data.iloc[:train_for][Plot_Column].values + 0.00001\nvalid_split = data.iloc[train_for:][Plot_Column].values + 0.00001\nif Apply_Log:\n  train_split = np.log1p(train_split)\n  valid_split = np.log1p(valid_split)\n\ntrain_split = pd.Series(train_split)\nvalid_split = pd.Series(valid_split)\nif AR_Model == 'AutoReg':\n  es = AutoReg(train_split, 2 , trend = 'ct', seasonal = True , period = Season_Period)\n  es = es.fit()\nelse:\n  es = ar_select_order(train_split, 2 , trend = 'ct', seasonal = True , period = Season_Period)\n  es.ar_lags\n  es = es.model.fit()\nif Plot_Summary:\n  print(es.summary())\n\nif Plot_Forecast == 'Test + Forecast Plot':\n  pred = es.predict(start = train_for, end = train_for + len(valid_split) + Predict_For)\n  Plot_Data = [\n               [list(range(train_for , train_for + len(pred),1)),\n               pred,'Predicted Forecast',':'\n               ],\n               [list(range(train_for , train_for+ len(valid_split))),\n               valid_split,'{} Covid Cases'.format(Plot_Column),'--'\n               ]\n  ]\n  \nelse:\n  pred = es.predict(start = 0 , end = data.shape[0]+Predict_For )\n  Plot_Data = [\n               [list(range(0 , len(pred))),\n               pred,'Predicted Curve' ,':'\n               ],\n               [list(range(0, len(train_split))),\n                train_split , 'Actual Train Curve','--'\n               ],\n               [list(range(train_for , train_for+len(valid_split))),\n                valid_split , 'Observed Test Curve','--'\n               ]\n  ]\n# simulations = es.simulate(len(valid_split) + Predict_For , repetitions = No_Of_Simulations , error = 'add').values\n# Simulation_Data = [\n#                    list(range(train_for , train_for + len(valid_split) + Predict_For , 1)),\n#                    simulations[:,0],\n#                    simulations[:,-1]\n#                   ]\npred = es.predict(start = 0 , end = data.shape[0]+Predict_For )\npred = np.nan_to_num(pred, copy=True, nan=0.0, posinf=None, neginf=None)\n\nprint('Accuracy Scores For Training Data :\\n  -> Mean Squared Error : {} ({})\\n  -> Root Mean Squared Error : {} ({})\\n  -> Standard Deviation : {} ({})\\n  -> Mean Absolute Error : {} ({})\\n'\\\n      .format(\\\n              eval.mse(pred[0:train_split.shape[0]], train_split),\\\n              eval.mse(pred[0:train_split.shape[0]], train_split)\/len(train_split), \\\n              eval.rmse(pred[0:train_split.shape[0]], train_split) , \\\n              eval.rmse(pred[0:train_split.shape[0]], train_split)\/len(train_split) , \\\n              eval.stde(pred[0:train_split.shape[0]], train_split), \\\n              eval.stde(pred[0:train_split.shape[0]], train_split)\/len(train_split), \\\n              eval.meanabs(pred[0:train_split.shape[0]], train_split),\\\n              eval.meanabs(pred[0:train_split.shape[0]], train_split)\/len(train_split)\\\n              )\\\n      )\nprint('Accuracy Scores For Testing Data :\\n  -> Mean Squared Error : {} ({})\\n  -> Root Mean Squared Error : {} ({})\\n  -> Standard Deviation : {} ({})\\n  -> Mean Absolute Error : {} ({})\\n'\\\n      .format(\\\n              eval.mse(pred[-valid_split.shape[0]:], valid_split) ,\\\n              eval.mse(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split) ,\\\n              eval.rmse(pred[-valid_split.shape[0]:], valid_split) , \\\n              eval.rmse(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split) , \\\n              eval.stde(pred[-valid_split.shape[0]:], valid_split) , \\\n              eval.stde(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split) , \\\n              eval.meanabs(pred[-valid_split.shape[0]:], valid_split),\\\n              eval.meanabs(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split)\\\n              )\\\n      )\nif Plot_Lib == 'MatplotLib':\n  plot_color = list(sns.color_palette(Style_Color,n_colors=len(Plot_Data)+1).as_hex())\n  fig = plt.figure(figsize=(Graphs_Width,Graphs_Height))\n  for j,i in enumerate(Plot_Data):\n    plt.plot(i[0], i[1],i[3],label = i[2] , color = plot_color[j+1]  )\n  \n  fig = es.plot_predict(fig = fig , start = train_for, end = train_for + len(valid_split) + Predict_For)\n  plt.suptitle(Sup_Title, fontsize = 29)\n  plt.title('{} Cases of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' (Daily)').title()  ) , fontsize = 19)\n  plt.legend()\n  plt.ylabel('Cases')\n  plt.xlabel('Days Passed Since {}'.format(Completed_.Date.min()))\n  plt.subplots_adjust(top=SubPlot_Top)\n  plt.plot()\n  fig = plt.figure(figsize=(Graphs_Width,Graphs_Height))\n  fig = es.plot_diagnostics(fig=fig, lags=2)\n  plt.plot()\nelse:\n  fig=go.Figure()\n  for i in Plot_Data:\n    fig.add_trace(go.Scatter(x = i[0], y = i[1], mode = 'lines+markers', name = i[2]))\n\n  fig.update_layout(title='{} Cases of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' (Daily)').title()),\n                  xaxis_title='Days Passed Since {}'.format(Completed_.Date.min()),yaxis_title=\"Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\n  fig.show()\n","06c3e47c":"#@markdown <h3>\u2b05\ufe0f Click Here to START Fitting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn4.iconfinder.com\/data\/icons\/coronavirus-1\/512\/wuhan-coronavirus-virus-outbreak-02-256.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2><br>Simple Exponential Smoothing for Forecasting<\/h2><\/center><br>\n\nPlot_Column = \"Confirmed\" #@param ['Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_']\nLocation = \"India\" #@param ['Kerala', 'Delhi', 'Telangana', 'India', 'Rajasthan', 'Haryana','UP', 'Ladakh', 'TN', 'J&K', 'Karnataka', 'Maharashtra', 'Punjab','Andra P', 'HP', 'Uttarakhand', 'Odisha', 'Puducherry','West Bengal', 'Chandigarh', 'Chhattisgarh', 'Gujarat', 'MP','Bihar', 'Manipur', 'Goa', 'Mizoram', 'A&N', 'Assam', 'Jharkhand','Arun P', 'Nagaland', 'Tripura', 'D&D', 'Meghalaya', 'Sikkim','Other']\nTrain_Split = 0.8 #@param {type:\"slider\", min:0.05, max:0.95, step:0.05}\nPredict_For = 25 #@param {type:\"slider\", min:0, max:100, step:5}\nNo_Of_Simulations = 100 #@param {type:\"slider\", min:10, max:500, step:5}\nInitialization_Method = \"legacy-heuristic\" #@param [\"None\", \"estimated\", \"heuristic\", \"legacy-heuristic\"]\nPlot_Forecast = \"Complete Plot ( Train + Test + Forecast )\" #@param [\"Complete Plot ( Train + Test + Forecast )\", \"Test + Forecast Plot\"]\nPlot_Lib = \"MatplotLib\" #@param [\"Plotly\", \"MatplotLib\"]\nPlot_Summary = True #@param {type:\"boolean\"}\nApply_Log = True #@param {type:\"boolean\"}\n\nDate = 'Date'\nModel_Name = \"Exponential Smoothing\"\ndata = Completed_[Completed_['State'] == Location]\ntrain_for = int(data.shape[0]*Train_Split)\ntrain_split = data.iloc[:train_for][Plot_Column].values + 0.00001\nvalid_split = data.iloc[train_for:][Plot_Column].values + 0.00001\n\nif Apply_Log:\n  train_split = np.log1p(train_split)\n  valid_split = np.log1p(valid_split)\n\ntrain_split = pd.Series(train_split)\nvalid_split = pd.Series(valid_split)\n\nif Initialization_Method == 'None':\n  Initialization_Method = None\n\nes = SimpleExpSmoothing(train_split, initialization_method=Initialization_Method).fit()\nif Plot_Summary:\n  print(es.summary())\n\nif Plot_Forecast == 'Test + Forecast Plot':\n  pred = es.predict(start = train_for, end = train_for + len(valid_split) + Predict_For)\n  Plot_Data = [\n               [list(range(train_for , train_for + len(pred),1)),\n               pred,'Predicted Forecast',':'\n               ],\n               [list(range(train_for , train_for+ len(valid_split))),\n               valid_split,'{} Covid Cases'.format(Plot_Column),'--'\n               ]\n  ]\n  \nelse:\n  pred = es.predict(start = 0 , end = data.shape[0]+Predict_For )\n  Plot_Data = [\n               [list(range(0 , len(pred))),\n               pred,'Predicted Curve' ,':'\n               ],\n               [list(range(0, len(train_split))),\n                train_split , 'Actual Train Curve','--'\n               ],\n               [list(range(train_for , train_for+len(valid_split))),\n                valid_split , 'Observed Test Curve','--'\n               ]\n  ]\nsimulations = es.simulate(len(valid_split) + Predict_For , repetitions = No_Of_Simulations , error = 'add').values\nSimulation_Data = [\n                   list(range(train_for , train_for + len(valid_split) + Predict_For , 1)),\n                   simulations[:,0],\n                   simulations[:,-1]\n                  ]\npred = es.predict(start = 0 , end = data.shape[0]+Predict_For )\npred = np.nan_to_num(pred, copy=True, nan=0.0, posinf=None, neginf=None)\n\nprint('Accuracy Scores For Training Data :\\n  -> Mean Squared Error : {} ({})\\n  -> Root Mean Squared Error : {} ({})\\n  -> Standard Deviation : {} ({})\\n  -> Mean Absolute Error : {} ({})\\n'\\\n      .format(\\\n              eval.mse(pred[0:train_split.shape[0]], train_split),\\\n              eval.mse(pred[0:train_split.shape[0]], train_split)\/len(train_split), \\\n              eval.rmse(pred[0:train_split.shape[0]], train_split) , \\\n              eval.rmse(pred[0:train_split.shape[0]], train_split)\/len(train_split) , \\\n              eval.stde(pred[0:train_split.shape[0]], train_split), \\\n              eval.stde(pred[0:train_split.shape[0]], train_split)\/len(train_split), \\\n              eval.meanabs(pred[0:train_split.shape[0]], train_split),\\\n              eval.meanabs(pred[0:train_split.shape[0]], train_split)\/len(train_split)\\\n              )\\\n      )\nprint('Accuracy Scores For Testing Data :\\n  -> Mean Squared Error : {} ({})\\n  -> Root Mean Squared Error : {} ({})\\n  -> Standard Deviation : {} ({})\\n  -> Mean Absolute Error : {} ({})\\n'\\\n      .format(\\\n              eval.mse(pred[-valid_split.shape[0]:], valid_split) ,\\\n              eval.mse(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split) ,\\\n              eval.rmse(pred[-valid_split.shape[0]:], valid_split) , \\\n              eval.rmse(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split) , \\\n              eval.stde(pred[-valid_split.shape[0]:], valid_split) , \\\n              eval.stde(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split) , \\\n              eval.meanabs(pred[-valid_split.shape[0]:], valid_split),\\\n              eval.meanabs(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split)\\\n              )\\\n      )\nif Plot_Lib == 'MatplotLib':\n  plot_color = list(sns.color_palette(Style_Color,n_colors=len(Plot_Data)+1).as_hex())\n  plt.figure(figsize=(Graphs_Width,Graphs_Height))\n  plt.fill_between(Simulation_Data[0],Simulation_Data[1], Simulation_Data[2], color = plot_color[0] , alpha = 0.1 , label = 'Simulations' )\n\n  for j,i in enumerate(Plot_Data):\n    plt.plot(i[0], i[1],i[3],label = i[2] , color = plot_color[j+1]  )\n  plt.suptitle(Sup_Title, fontsize = 29)\n  plt.title('{} Cases of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' (Daily)').title()  ) , fontsize = 19)\n  plt.legend()\n  plt.ylabel('Cases')\n  plt.xlabel('Days Passed Since {}'.format(Completed_.Date.min()))\n  plt.subplots_adjust(top=SubPlot_Top)\n  plt.plot()\n\nelse:\n  fig=go.Figure()\n  for i in Plot_Data:\n    fig.add_trace(go.Scatter(x = i[0], y = i[1], mode = 'lines+markers', name = i[2]))\n\n  fig.update_layout(title='{} Cases of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' (Daily)').title()),\n                  xaxis_title='Days Passed Since {}'.format(Completed_.Date.min()),yaxis_title=\"Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\n  fig.show()\n","9a9de3e5":"#@markdown <h3>\u2b05\ufe0f Click Here to START Fitting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn3.iconfinder.com\/data\/icons\/pictograms-vol-2-3\/400\/linear_diagram-256.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2><br>Holt's Exponential Smoothing for Forecasting<\/h2><\/center><br>\n\nPlot_Column = \"Confirmed\" #@param ['Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_']\nLocation = \"India\" #@param ['Kerala', 'Delhi', 'Telangana', 'India', 'Rajasthan', 'Haryana','UP', 'Ladakh', 'TN', 'J&K', 'Karnataka', 'Maharashtra', 'Punjab','Andra P', 'HP', 'Uttarakhand', 'Odisha', 'Puducherry','West Bengal', 'Chandigarh', 'Chhattisgarh', 'Gujarat', 'MP','Bihar', 'Manipur', 'Goa', 'Mizoram', 'A&N', 'Assam', 'Jharkhand','Arun P', 'Nagaland', 'Tripura', 'D&D', 'Meghalaya', 'Sikkim','Other']\nTrain_Split = 0.8 #@param {type:\"slider\", min:0.05, max:0.95, step:0.05}\nPredict_For = 25 #@param {type:\"slider\", min:0, max:100, step:5}\nNo_Of_Simulations = 100 #@param {type:\"slider\", min:10, max:500, step:5}\nPlot_Forecast = \"Complete Plot ( Train + Test + Forecast )\" #@param [\"Complete Plot ( Train + Test + Forecast )\", \"Test + Forecast Plot\"]\nPlot_Lib = \"MatplotLib\" #@param [\"Plotly\", \"MatplotLib\"]\nPlot_Summary = True #@param {type:\"boolean\"}\nEnable_Exponential_Trend = False #@param {type:\"boolean\"}\nEnable_Damped_Trend = True #@param {type:\"boolean\"}\nEnable_Damped_Trend = True #@param {type:\"boolean\"}\nApply_Log = True #@param {type:\"boolean\"}\nDate = 'Date'\nModel_Name = \"Exponential Smoothing\"\ndata = Completed_[Completed_['State'] == Location]\ntrain_for = int(data.shape[0]*Train_Split)\ntrain_split = data.iloc[:train_for][Plot_Column].values + 0.00001\nvalid_split = data.iloc[train_for:][Plot_Column].values + 0.00001\n\nif Apply_Log:\n  train_split = np.log1p(train_split)\n  valid_split = np.log1p(valid_split)\n\n\ntrain_split = pd.Series(train_split)\nvalid_split = pd.Series(valid_split)\n\nes = Holt(train_split,exponential = Enable_Exponential_Trend, damped_trend = Enable_Damped_Trend, initialization_method=\"estimated\").fit()\nif Plot_Summary:\n  print(es.summary())\n\n\nif Plot_Forecast == 'Test + Forecast Plot':\n  pred = es.predict(start = train_for, end = train_for + len(valid_split) + Predict_For)\n  Plot_Data = [\n               [list(range(train_for , train_for + len(pred),1)),\n               pred,'Predicted Forecast',':'\n               ],\n               [list(range(train_for , train_for+ len(valid_split))),\n               valid_split,'{} Covid Cases'.format(Plot_Column),'--'\n               ]\n  ]\n  \nelse:\n  pred = es.predict(start = 0 , end = data.shape[0]+Predict_For )\n  Plot_Data = [\n               [list(range(0 , len(pred))),\n               pred,'Predicted Curve' ,':'\n               ],\n               [list(range(0, len(train_split))),\n                train_split , 'Actual Train Curve','--'\n               ],\n               [list(range(train_for , train_for+len(valid_split))),\n                valid_split , 'Observed Test Curve','--'\n               ]\n  ]\nsimulations = es.simulate(len(valid_split) + Predict_For , repetitions = No_Of_Simulations , error = 'add').values\nSimulation_Data = [\n                   list(range(train_for , train_for + len(valid_split) + Predict_For , 1)),\n                   simulations[:,0],\n                   simulations[:,-1]\n                  ]\npred = es.predict(start = 0 , end = data.shape[0]+Predict_For )\npred = np.nan_to_num(pred, copy=True, nan=0.0, posinf=None, neginf=None)\n\nprint('Accuracy Scores For Training Data :\\n  -> Mean Squared Error : {} ({})\\n  -> Root Mean Squared Error : {} ({})\\n  -> Standard Deviation : {} ({})\\n  -> Mean Absolute Error : {} ({})\\n'\\\n      .format(\\\n              eval.mse(pred[0:train_split.shape[0]], train_split),\\\n              eval.mse(pred[0:train_split.shape[0]], train_split)\/len(train_split), \\\n              eval.rmse(pred[0:train_split.shape[0]], train_split) , \\\n              eval.rmse(pred[0:train_split.shape[0]], train_split)\/len(train_split) , \\\n              eval.stde(pred[0:train_split.shape[0]], train_split), \\\n              eval.stde(pred[0:train_split.shape[0]], train_split)\/len(train_split), \\\n              eval.meanabs(pred[0:train_split.shape[0]], train_split),\\\n              eval.meanabs(pred[0:train_split.shape[0]], train_split)\/len(train_split)\\\n              )\\\n      )\nprint('Accuracy Scores For Testing Data :\\n  -> Mean Squared Error : {} ({})\\n  -> Root Mean Squared Error : {} ({})\\n  -> Standard Deviation : {} ({})\\n  -> Mean Absolute Error : {} ({})\\n'\\\n      .format(\\\n              eval.mse(pred[-valid_split.shape[0]:], valid_split) ,\\\n              eval.mse(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split) ,\\\n              eval.rmse(pred[-valid_split.shape[0]:], valid_split) , \\\n              eval.rmse(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split) , \\\n              eval.stde(pred[-valid_split.shape[0]:], valid_split) , \\\n              eval.stde(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split) , \\\n              eval.meanabs(pred[-valid_split.shape[0]:], valid_split),\\\n              eval.meanabs(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split)\\\n              )\\\n      )\nif Plot_Lib == 'MatplotLib':\n  plot_color = list(sns.color_palette(Style_Color,n_colors=len(Plot_Data)+1).as_hex())\n  plt.figure(figsize=(Graphs_Width,Graphs_Height))\n  plt.fill_between(Simulation_Data[0],Simulation_Data[1], Simulation_Data[2], color = plot_color[0] , alpha = 0.1 , label = 'Simulations' )\n\n  for j,i in enumerate(Plot_Data):\n    plt.plot(i[0], i[1],i[3],label = i[2] , color = plot_color[j+1]  )\n  plt.suptitle(Sup_Title, fontsize = 29)\n  plt.title('{} Cases of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' (Daily)').title()  ) , fontsize = 19)\n  plt.legend()\n  plt.ylabel('Cases')\n  plt.xlabel('Days Passed Since {}'.format(Completed_.Date.min()))\n  plt.subplots_adjust(top=SubPlot_Top)\n  plt.plot()\n  # fig = plt.figure(figsize=(Graphs_Width,Graphs_Height))\n  # fig = es.plot_diagnostics(fig=fig, lags=2)\n  # plt.plot()\nelse:\n  fig=go.Figure()\n  for i in Plot_Data:\n    fig.add_trace(go.Scatter(x = i[0], y = i[1], mode = 'lines+markers', name = i[2]))\n\n  fig.update_layout(title='{} Cases of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' (Daily)').title()),\n                  xaxis_title='Days Passed Since {}'.format(Completed_.Date.min()),yaxis_title=\"Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\n  fig.show()\n","61ae3b9e":"#@markdown <h3>\u2b05\ufe0f Click Here to START Fitting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn0.iconfinder.com\/data\/icons\/charts-graphs-1\/24\/chart-trend-exponential-up-512.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2><br>Exponential Smoothing for Forecasting<\/h2><\/center><br>\n\nPlot_Column = \"Confirmed\" #@param ['Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_']\nLocation = \"India\" #@param ['Kerala', 'Delhi', 'Telangana', 'India', 'Rajasthan', 'Haryana','UP', 'Ladakh', 'TN', 'J&K', 'Karnataka', 'Maharashtra', 'Punjab','Andra P', 'HP', 'Uttarakhand', 'Odisha', 'Puducherry','West Bengal', 'Chandigarh', 'Chhattisgarh', 'Gujarat', 'MP','Bihar', 'Manipur', 'Goa', 'Mizoram', 'A&N', 'Assam', 'Jharkhand','Arun P', 'Nagaland', 'Tripura', 'D&D', 'Meghalaya', 'Sikkim','Other']\nTrain_Split = 0.8 #@param {type:\"slider\", min:0.05, max:0.95, step:0.05}\nPredict_For = 70 #@param {type:\"slider\", min:0, max:100, step:5}\nSeason_Period = 7 #@param {type:\"slider\", min:1, max:40, step:1}\nNo_Of_Simulations = 100 #@param {type:\"slider\", min:10, max:500, step:5}\nPlot_Forecast = \"Complete Plot ( Train + Test + Forecast )\" #@param [\"Complete Plot ( Train + Test + Forecast )\", \"Test + Forecast Plot\"]\nPlot_Lib = \"MatplotLib\" #@param [\"Plotly\", \"MatplotLib\"]\nPlot_Summary = True #@param {type:\"boolean\"}\nApply_Log = False #@param {type:\"boolean\"}\nDate = 'Date'\nModel_Name = \"Exponential Smoothing\"\ndata = Completed_[Completed_['State'] == Location]\ntrain_for = int(data.shape[0]*Train_Split)\ntrain_split = data.iloc[:train_for][Plot_Column].values + 0.00001\nvalid_split = data.iloc[train_for:][Plot_Column].values + 0.00001\nif Apply_Log:\n  train_split = np.log1p(train_split)\n  valid_split = np.log1p(valid_split)\n\ntrain_split = pd.Series(train_split)\nvalid_split = pd.Series(valid_split)\n\nes = ExponentialSmoothing(train_split,seasonal_periods=Season_Period,trend='add',seasonal= 'mul', damped_trend=True, use_boxcox=False, initialization_method=\"estimated\").fit()\nif Plot_Summary:\n  print(es.summary())\n\n\nif Plot_Forecast == 'Test + Forecast Plot':\n  pred = es.predict(start = train_for, end = train_for + len(valid_split) + Predict_For)\n  Plot_Data = [\n               [list(range(train_for , train_for + len(pred),1)),\n               pred,'Predicted Forecast',':'\n               ],\n               [list(range(train_for , train_for+ len(valid_split))),\n               valid_split,'{} Covid Cases'.format(Plot_Column),'--'\n               ]\n  ]\n  \nelse:\n  pred = es.predict(start = 0 , end = data.shape[0]+Predict_For )\n  Plot_Data = [\n               [list(range(0 , len(pred))),\n               pred,'Predicted Curve' ,':'\n               ],\n               [list(range(0, len(train_split))),\n                train_split , 'Actual Train Curve','--'\n               ],\n               [list(range(train_for , train_for+len(valid_split))),\n                valid_split , 'Observed Test Curve','--'\n               ]\n  ]\nsimulations = es.simulate(len(valid_split) + Predict_For , repetitions = No_Of_Simulations , error = 'add').values\nSimulation_Data = [\n                   list(range(train_for , train_for + len(valid_split) + Predict_For , 1)),\n                   simulations[:,0],\n                   simulations[:,-1]\n                  ]\npred = es.predict(start = 0 , end = data.shape[0]+Predict_For )\npred = np.nan_to_num(pred, copy=True, nan=0.0, posinf=None, neginf=None)\n\nprint('Accuracy Scores For Training Data :\\n  -> Mean Squared Error : {} ({})\\n  -> Root Mean Squared Error : {} ({})\\n  -> Standard Deviation : {} ({})\\n  -> Mean Absolute Error : {} ({})\\n'\\\n      .format(\\\n              eval.mse(pred[0:train_split.shape[0]], train_split),\\\n              eval.mse(pred[0:train_split.shape[0]], train_split)\/len(train_split), \\\n              eval.rmse(pred[0:train_split.shape[0]], train_split) , \\\n              eval.rmse(pred[0:train_split.shape[0]], train_split)\/len(train_split) , \\\n              eval.stde(pred[0:train_split.shape[0]], train_split), \\\n              eval.stde(pred[0:train_split.shape[0]], train_split)\/len(train_split), \\\n              eval.meanabs(pred[0:train_split.shape[0]], train_split),\\\n              eval.meanabs(pred[0:train_split.shape[0]], train_split)\/len(train_split)\\\n              )\\\n      )\nprint('Accuracy Scores For Testing Data :\\n  -> Mean Squared Error : {} ({})\\n  -> Root Mean Squared Error : {} ({})\\n  -> Standard Deviation : {} ({})\\n  -> Mean Absolute Error : {} ({})\\n'\\\n      .format(\\\n              eval.mse(pred[-valid_split.shape[0]:], valid_split) ,\\\n              eval.mse(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split) ,\\\n              eval.rmse(pred[-valid_split.shape[0]:], valid_split) , \\\n              eval.rmse(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split) , \\\n              eval.stde(pred[-valid_split.shape[0]:], valid_split) , \\\n              eval.stde(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split) , \\\n              eval.meanabs(pred[-valid_split.shape[0]:], valid_split),\\\n              eval.meanabs(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split)\\\n              )\\\n      )\nif Plot_Lib == 'MatplotLib':\n  plot_color = list(sns.color_palette(Style_Color,n_colors=len(Plot_Data)+1).as_hex())\n  plt.figure(figsize=(Graphs_Width,Graphs_Height))\n  plt.fill_between(Simulation_Data[0],Simulation_Data[1], Simulation_Data[2], color = plot_color[0] , alpha = 0.1 , label = 'Simulations' )\n\n  for j,i in enumerate(Plot_Data):\n    plt.plot(i[0], i[1],i[3],label = i[2] , color = plot_color[j+1]  )\n  plt.suptitle(Sup_Title, fontsize = 29)\n  plt.title('{} Cases of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' (Daily)').title()  ) , fontsize = 19)\n  plt.legend()\n  plt.ylabel('Cases')\n  plt.xlabel('Days Passed Since {}'.format(Completed_.Date.min()))\n  plt.subplots_adjust(top=SubPlot_Top)\n  plt.plot()\n  # fig = plt.figure(figsize=(Graphs_Width,Graphs_Height))\n  # fig = es.plot_diagnostics(fig=fig, lags=2)\n  # plt.plot()\nelse:\n  fig=go.Figure()\n  for i in Plot_Data:\n    fig.add_trace(go.Scatter(x = i[0], y = i[1], mode = 'lines+markers', name = i[2]))\n\n  fig.update_layout(title='{} Cases of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' (Daily)').title()),\n                  xaxis_title='Days Passed Since {}'.format(Completed_.Date.min()),yaxis_title=\"Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\n  fig.show()\n","0ed9653f":"#@markdown <h3>\u2b05\ufe0f Click Here to START Fitting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn3.iconfinder.com\/data\/icons\/education-and-school-8\/48\/Search-512.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2><br>Searching For Optimal SARIMAX Perimeters<\/h2><\/center><br>\n\nPlot_Column = \"Confirmed\" #@param ['Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_']\nLocation = \"India\" #@param ['Kerala', 'Delhi', 'Telangana', 'India', 'Rajasthan', 'Haryana','UP', 'Ladakh', 'TN', 'J&K', 'Karnataka', 'Maharashtra', 'Punjab','Andra P', 'HP', 'Uttarakhand', 'Odisha', 'Puducherry','West Bengal', 'Chandigarh', 'Chhattisgarh', 'Gujarat', 'MP','Bihar', 'Manipur', 'Goa', 'Mizoram', 'A&N', 'Assam', 'Jharkhand','Arun P', 'Nagaland', 'Tripura', 'D&D', 'Meghalaya', 'Sikkim','Other']\n\ndata = Completed_[Completed_['State'] == Location]\ntrain_split = data[Plot_Column].values\ntrain_split = pd.Series(train_split)\n\nauto_Arima = AutoARIMA(start_p=1 , d=None, start_q=1 ,max_p=9, max_d=9, max_q=9, max_P=9, max_D=9, max_Q=9,trend = 'ct', stepwise=True, n_jobs=-1 , n_fits=50 ,trace = True)\nauto_Arima.fit(train_split)\nprint(auto_Arima.summary())","5a1cdadf":"#@markdown <h3>\u2b05\ufe0f Click Here to START Fitting<\/h3>\n#@markdown <br><center><img src='https:\/\/static.tildacdn.com\/tild3234-6238-4138-b261-393230376565\/analytics_4.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2><br>SARIMAX Fitting for Forecasting<\/h2><\/center><br>\n\nPlot_Column = \"Confirmed\" #@param ['Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_']\nLocation = \"India\" #@param ['Kerala', 'Delhi', 'Telangana', 'India', 'Rajasthan', 'Haryana','UP', 'Ladakh', 'TN', 'J&K', 'Karnataka', 'Maharashtra', 'Punjab','Andra P', 'HP', 'Uttarakhand', 'Odisha', 'Puducherry','West Bengal', 'Chandigarh', 'Chhattisgarh', 'Gujarat', 'MP','Bihar', 'Manipur', 'Goa', 'Mizoram', 'A&N', 'Assam', 'Jharkhand','Arun P', 'Nagaland', 'Tripura', 'D&D', 'Meghalaya', 'Sikkim','Other']\nTrain_Split = 0.9 #@param {type:\"slider\", min:0.05, max:0.95, step:0.05}\nPredict_For = 70 #@param {type:\"slider\", min:0, max:100, step:5}\nPlot_Forecast = \"Complete Plot ( Train + Test + Forecast )\" #@param [\"Complete Plot ( Train + Test + Forecast )\", \"Test + Forecast Plot\"]\nPlot_Lib = \"Plotly\" #@param [\"Plotly\", \"MatplotLib\"]\nPlot_Summary = True #@param {type:\"boolean\"}\nDate = 'Date'\nModel_Name = \"Exponential Smoothing\"\ndata = Completed_[Completed_['State'] == Location]\ntrain_for = int(data.shape[0]*Train_Split)\ntrain_split = data.iloc[:train_for][Plot_Column].values + 0.00001\nvalid_split = data.iloc[train_for:][Plot_Column].values + 0.00001\n\ntrain_split = pd.Series(train_split)\nvalid_split = pd.Series(valid_split)\n\n# es = SARIMAX(train_split , order = (7,3,0),enforce_invertibility = True ,time_varying_regression =False).fit()\nes = SARIMAX(train_split , order = (8,3,1),enforce_invertibility = True ,time_varying_regression =False).fit()\nif Plot_Summary:\n  print(es.summary())\n\n\nif Plot_Forecast == 'Test + Forecast Plot':\n  pred = es.predict(start = train_for, end = train_for + len(valid_split) + Predict_For)\n  Plot_Data = [\n               [list(range(train_for , train_for + len(pred),1)),\n               pred,'Predicted Forecast',':'\n               ],\n               [list(range(train_for , train_for+ len(valid_split))),\n               valid_split,'{} Covid Cases'.format(Plot_Column),'--'\n               ]\n  ]\n  \nelse:\n  pred = es.predict(start = 0 , end = data.shape[0]+Predict_For )\n  Plot_Data = [\n               [list(range(0 , len(pred))),\n               pred,'Predicted Curve' ,':'\n               ],\n               [list(range(0, len(train_split))),\n                train_split , 'Actual Train Curve','--'\n               ],\n               [list(range(train_for , train_for+len(valid_split))),\n                valid_split , 'Observed Test Curve','--'\n               ]\n  ]\n\npred = es.predict(start = 0 , end = data.shape[0]+Predict_For )\npred = np.nan_to_num(pred, copy=True, nan=0.0, posinf=None, neginf=None)\n\nprint('Accuracy Scores For Training Data :\\n  -> Mean Squared Error : {} ({})\\n  -> Root Mean Squared Error : {} ({})\\n  -> Standard Deviation : {} ({})\\n  -> Mean Absolute Error : {} ({})\\n'\\\n      .format(\\\n              eval.mse(pred[0:train_split.shape[0]], train_split),\\\n              eval.mse(pred[0:train_split.shape[0]], train_split)\/len(train_split), \\\n              eval.rmse(pred[0:train_split.shape[0]], train_split) , \\\n              eval.rmse(pred[0:train_split.shape[0]], train_split)\/len(train_split) , \\\n              eval.stde(pred[0:train_split.shape[0]], train_split), \\\n              eval.stde(pred[0:train_split.shape[0]], train_split)\/len(train_split), \\\n              eval.meanabs(pred[0:train_split.shape[0]], train_split),\\\n              eval.meanabs(pred[0:train_split.shape[0]], train_split)\/len(train_split)\\\n              )\\\n      )\nprint('Accuracy Scores For Testing Data :\\n  -> Mean Squared Error : {} ({})\\n  -> Root Mean Squared Error : {} ({})\\n  -> Standard Deviation : {} ({})\\n  -> Mean Absolute Error : {} ({})\\n'\\\n      .format(\\\n              eval.mse(pred[-valid_split.shape[0]:], valid_split) ,\\\n              eval.mse(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split) ,\\\n              eval.rmse(pred[-valid_split.shape[0]:], valid_split) , \\\n              eval.rmse(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split) , \\\n              eval.stde(pred[-valid_split.shape[0]:], valid_split) , \\\n              eval.stde(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split) , \\\n              eval.meanabs(pred[-valid_split.shape[0]:], valid_split),\\\n              eval.meanabs(pred[-valid_split.shape[0]:], valid_split)\/len(valid_split)\\\n              )\\\n      )\nif Plot_Lib == 'MatplotLib':\n  plot_color = list(sns.color_palette(Style_Color,n_colors=len(Plot_Data)+1).as_hex())\n  plt.figure(figsize=(Graphs_Width,Graphs_Height))\n  # plt.fill_between(Simulation_Data[0],Simulation_Data[1], Simulation_Data[2], color = plot_color[0] , alpha = 0.1 , label = 'Simulations' )\n\n  for j,i in enumerate(Plot_Data):\n    plt.plot(i[0], i[1],i[3],label = i[2] , color = plot_color[j+1]  )\n  plt.suptitle(Sup_Title, fontsize = 29)\n  plt.title('{} Cases of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' (Daily)').title()  ) , fontsize = 19)\n  plt.legend()\n  plt.ylabel('Cases')\n  plt.xlabel('Days Passed Since {}'.format(Completed_.Date.min()))\n  plt.subplots_adjust(top=SubPlot_Top)\n  plt.plot()\n  # fig = plt.figure(figsize=(Graphs_Width,Graphs_Height))\n  # fig = es.plot_diagnostics(fig=fig, lags=2)\n  # plt.plot()\nelse:\n  fig=go.Figure()\n  for i in Plot_Data:\n    fig.add_trace(go.Scatter(x = i[0], y = i[1], mode = 'lines+markers', name = i[2]))\n\n  fig.update_layout(title='{} Cases of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' (Daily)').title()),\n                  xaxis_title='Days Passed Since {}'.format(Completed_.Date.min()),yaxis_title=\"Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\n  fig.show()\n","6c51d100":"#@markdown <h3>\u2b05\ufe0f Click Here to START Fitting<\/h3>\n#@markdown <br><center><img src='https:\/\/cdn1.iconfinder.com\/data\/icons\/gestureworks_gesture_glyphs\/256\/stroke_greek_theta_gestureworks.png' height=\"200\" alt=\"Gdrive-logo\"\/><\/center>\n#@markdown <center><h2><br>Theta Model Fitting for Forecasting<\/h2><\/center><br>\n\nPlot_Column = \"Confirmed\" #@param ['Confirmed', 'Recovered', 'Deceased', 'Other', 'Tested', 'Active', 'Confirmed_', 'Recovered_', 'Deceased_', 'Other_','Tested_', 'Active_']\nLocation = \"India\" #@param ['Kerala', 'Delhi', 'Telangana', 'India', 'Rajasthan', 'Haryana','UP', 'Ladakh', 'TN', 'J&K', 'Karnataka', 'Maharashtra', 'Punjab','Andra P', 'HP', 'Uttarakhand', 'Odisha', 'Puducherry','West Bengal', 'Chandigarh', 'Chhattisgarh', 'Gujarat', 'MP','Bihar', 'Manipur', 'Goa', 'Mizoram', 'A&N', 'Assam', 'Jharkhand','Arun P', 'Nagaland', 'Tripura', 'D&D', 'Meghalaya', 'Sikkim','Other']\n\nPredict_For = 59 #@param {type:\"slider\", min:0, max:100, step:1}\nIntervals = 54 #@param {type:\"slider\", min:0, max:100, step:1}\nModel_Behaviour = \"add\" #@param [\"add\", \"mul\"]\nPlot_Lib = \"MatplotLib\" #@param [ \"MatplotLib\"]\nDate = 'Date'\n\nModel_Name = \"Exponential Smoothing\"\ndata = Completed_[Completed_['State'] == Location]\n\ntimes = pd.date_range(data[Date].min(), periods = data.shape[0]+Predict_For , freq='D')\n\ndata.index = pd.to_datetime(data[Date])\ntrain_split = data[Plot_Column]\n\ni = Intervals\nresult = []\n\nwhile i < train_split.shape[0]:\n  data = train_split[:i]\n  tm = ThetaModel(data , method = Model_Behaviour).fit()\n  result.append(pd.Series(tm.forecast(Predict_For).values , index = times[i:i+Predict_For]))\n  i+=Intervals\n\nprint(tm.summary())\nif Plot_Lib == 'MatplotLib':\n  plot_color = list(sns.color_palette(Style_Color,n_colors=len(result)+1).as_hex())\n  plt.figure(figsize=(Graphs_Width,Graphs_Height))\n  plt.plot(train_split , ':' , label = 'Original Data' , color = plot_color[0])\n\n  for j,i in enumerate(result):\n    plt.plot(i,color = plot_color[j+1]  )\n  plt.suptitle(Sup_Title, fontsize = 29)\n  plt.title('{} Cases of  SARS-CoV-2 \\n'.format(Plot_Column.replace('_',' (Daily)').title()  ) , fontsize = 19)\n  plt.legend()\n  plt.ylabel('Cases')\n  plt.xlabel('Days Passed Since {}'.format(Completed_.Date.min()))\n  plt.subplots_adjust(top=SubPlot_Top)\n  plt.plot()\n","629481dc":"series_len = 14\ndef Preprocess_RNN(data = World_ , Col_ = 'iso_code' , use_col = 'total_cases' , series_len = 14 , first_min = 100 ,  Apply_Scaler = False , Use_Log = True ):\n  flag = []\n  for iso in data[Col_].unique():\n    temp = data[data[Col_]== iso]\n    date_temp = temp.index\n    temp[use_col] = temp[use_col].clip(0)\n    temp = temp[use_col].values\n    if Use_Log:\n      temp = np.log1p(temp)\n    if Apply_Scaler:\n      scaler = MinMaxScaler()\n      temp = scaler.fit_transform(temp)\n    for i in range(len(temp) - series_len):\n      if temp[i]>0:\n        flag.append([ date_temp[i], temp[i:i+series_len] , temp[i+series_len] , iso])\n  t_data =  pd.DataFrame([i[1] for i in flag] , columns = ['X_{}'.format(i) for i in range(1,series_len+1)])\n  t_data['Y'] = [i[2] for i in flag]\n  t_data.index = [i[0] for i in flag]\n  t_data['iso_code'] = [i[3] for i in flag]\n  return t_data\n\ntrain_Data = Preprocess_RNN()\nAdditional_Data = World_[['iso_code','population', 'population_density', 'median_age', 'aged_65_older', 'aged_70_older', 'gdp_per_capita', 'extreme_poverty', 'cardiovasc_death_rate', 'diabetes_prevalence', 'female_smokers', 'male_smokers', 'handwashing_facilities', 'hospital_beds_per_thousand','life_expectancy', 'human_development_index', 'Latitude (average)', 'Longitude (average)']].drop_duplicates(['iso_code'])\nAdditional_Data.fillna(0 , inplace = True)\ntrain_Data = train_Data.merge(Additional_Data , on = ['iso_code'])\n\ntrain_Data = train_Data.sample(frac = 1)\nAdditional_columns = ['population', 'population_density', 'median_age', 'aged_65_older', 'aged_70_older', 'gdp_per_capita', 'extreme_poverty', 'cardiovasc_death_rate', 'diabetes_prevalence', 'female_smokers', 'male_smokers', 'handwashing_facilities', 'hospital_beds_per_thousand','life_expectancy', 'human_development_index', 'Latitude (average)', 'Longitude (average)']\ntrain_Add = train_Data[Additional_columns]\nUse_Log = True\nif Use_Log:\n  for i in ['population', 'population_density', 'median_age', 'aged_65_older', 'aged_70_older', 'gdp_per_capita', 'extreme_poverty', 'cardiovasc_death_rate', 'diabetes_prevalence', 'female_smokers', 'male_smokers', 'handwashing_facilities', 'hospital_beds_per_thousand','life_expectancy', 'human_development_index']:\n    train_Add[i] = np.log1p(train_Add[i])\ntrain_Add = train_Add.values\ntrain_X = train_Data[['X_{}'.format(i) for i in range(1,series_len+1)]].values\ntrain_Y = train_Data['Y'].values\n\ntrain_X = np.reshape(train_X , (train_X.shape[0] , train_X.shape[1], 1))\ntrain_Y = train_Y.reshape(train_Y.shape[0],1)\n\nfeatures_len =len(Additional_columns)","30845125":"model = Sequential()\nmodel.add(LSTM(1000, activation = 'relu', input_shape = (series_len , 1) , return_sequences=True))\nmodel.add(Dropout(.2))\nmodel.add(LSTM(750, activation = 'relu' , return_sequences=True))\nmodel.add(Dropout(.2))\nmodel.add(LSTM(750, activation = 'relu' , return_sequences=True))\nmodel.add(Dropout(.2))\nmodel.add(LSTM(750, activation = 'relu' , return_sequences=True))\nmodel.add(Dropout(.2))\nmodel.add(Dense(75 , activation = 'relu'))\nmodel.add(Dropout(.2))\nmodel.add(Dense(1))\nmodel.compile(optimizer = 'adam' , loss = 'mse')\nearly_stopping = EarlyStopping(monitor = 'loss' , patience = 20 , restore_best_weights = True)\nclear_output()\nprint(model.summary())\n# model.fit(train_X , train_Y , batch_size = 128 , epochs = 100 , verbose = 1 , callbacks = [early_stopping] , steps_per_epoch=10)","4046db55":"# cases_IN = Input(input_shape = (series_len , 1) , name = 'LSTM_Input')\ncases_IN = Input(shape = (series_len , 1) , name = 'LSTM_Input')\ncases = Bidirectional(LSTM(300 , activation='relu' , return_sequences = True , name = 'Bidirectional_LSTM_1'))(cases_IN)\ncases = Dropout(0.2)(cases)\ncases = Bidirectional(LSTM(300 , activation='relu' , return_sequences = True , name = 'Bidirectional_LSTM_2'))(cases)\ncases = Dropout(0.2)(cases)\ncases = Bidirectional(LSTM(300 , activation='relu' , return_sequences = True , name = 'Bidirectional_LSTM_3'))(cases)\ncases = Dropout(0.2)(cases)\ncases = Bidirectional(LSTM(300 , activation='relu' , name = 'Bidirectional_LSTM_4'))(cases)\ncases = Dropout(0.2)(cases)\ncases = Dense(300 , activation = 'relu' , name = 'Dense_Layer_1')(cases)\ncases = Dense(75 , activation = 'relu' , name = 'Dense_Layer_2')(cases)\ncases_OUT = Dense(1 , name = 'Dense_Layer_Output')(cases)\n\nmodel = Model(inputs = cases_IN, outputs = cases_OUT)\nmodel.compile(loss='mse', optimizer='adam')\nmodel.summary()\ncallbacks = [ ReduceLROnPlateau(monitor='loss', patience=10 , verbose= 1),EarlyStopping(monitor='loss', min_delta=1e-4, patience=20, verbose= 1)]\nplot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)\n","42a195d1":"cases_IN = Input(shape = (series_len , 1) , name = 'LSTM_Input')\ncases = Bidirectional(LSTM(300 , activation='relu' , return_sequences = True , name = 'Bidirectional_LSTM_1'))(cases_IN)\ncases = Dropout(0.2)(cases)\ncases = Bidirectional(LSTM(300 , activation='relu' , return_sequences = True , name = 'Bidirectional_LSTM_2'))(cases)\ncases = Dropout(0.2)(cases)\ncases = Bidirectional(LSTM(300 , activation='relu' , return_sequences = True , name = 'Bidirectional_LSTM_3'))(cases)\ncases = Dropout(0.2)(cases)\ncases = Bidirectional(LSTM(300 , activation='relu' , name = 'Bidirectional_LSTM_4'))(cases)\ncases = Dropout(0.2)(cases)\ncases = Dense(300 , activation = 'relu' , name = 'Dense_Layer_1')(cases)\n\nfeatures_IN = Input(shape = (features_len, ) , name = 'Feature_Space_Input')\nfeatures = Dense(300 , activation = 'relu' , name = 'Features_Dense_Layer')(features_IN)\n\ncases = Concatenate()([cases , add([cases , features]) , features])\ncases = Dense(256 , activation = 'relu' , name = 'Dense_Layer_2')(cases)\ncases = Dense(75 , activation = 'relu' , name = 'Dense_Layer_3')(cases)\ncases_OUT = Dense(1 , name = 'Dense_Layer_Output')(cases)\n\nmodel = Model(inputs = [cases_IN , features_IN], outputs = cases_OUT)\nmodel.compile(loss='mse', optimizer='adam')\nmodel.summary()\ncallbacks = [ ReduceLROnPlateau(monitor='loss', patience=10 , verbose= 1),EarlyStopping(monitor='loss', min_delta=1e-4, patience=20, verbose= 1)]\nplot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)\n","8118b897":"# model.fit([train_X , train_Add] , train_Y , batch_size = 128 , epochs = 100 , verbose = 1 , callbacks = callbacks, steps_per_epoch=10)","0b9df273":"# scores = model.evaluate([train_X , train_Add] , train_Y , verbose=0)","aa12a1af":"# train_iso = train_Data[train_Data['iso_code'] == 'IND']\n# train_iso_Add = train_iso[Additional_columns]\n# Use_Log = True\n# if Use_Log:\n#   for i in ['population', 'population_density', 'median_age', 'aged_65_older', 'aged_70_older', 'gdp_per_capita', 'extreme_poverty', 'cardiovasc_death_rate', 'diabetes_prevalence', 'female_smokers', 'male_smokers', 'handwashing_facilities', 'hospital_beds_per_thousand','life_expectancy', 'human_development_index']:\n#     train_iso_Add[i] = np.log1p(train_iso_Add[i])\n# train_iso_Add = train_iso_Add.values\n\n# train_iso_X = train_iso[['X_{}'.format(i) for i in range(1,series_len+1)]].values\n# train_iso_Y = train_iso['Y'].values\n\n# train_iso_X = np.reshape(train_iso_X , (train_iso_X.shape[0] , train_iso_X.shape[1], 1))\n# train_iso_Y = train_iso_Y.reshape(train_iso_Y.shape[0],1)\n\n# features_len =len(Additional_columns)","d4f4b636":"# model.fit([train_iso_X , train_iso_Add] , train_iso_Y , batch_size = 128 , epochs = 500 , verbose = 1 , steps_per_epoch=10)","235966e7":"# def create_test_data(data = World_  , Add_D = Additional_Data, iso_code  = 'IND' , series_len = series_len , use_col = 'total_cases', Use_Log = True):\n#   data = World_[World_['iso_code'] == iso_code].tail(series_len)\n#   data = data[use_col].values\n#   A_D = Add_D[Add_D['iso_code'] == iso_code]\n#   Additional_columns = ['population', 'population_density', 'median_age', 'aged_65_older', 'aged_70_older', 'gdp_per_capita', 'extreme_poverty', 'cardiovasc_death_rate', 'diabetes_prevalence', 'female_smokers', 'male_smokers', 'handwashing_facilities', 'hospital_beds_per_thousand','life_expectancy', 'human_development_index', 'Latitude (average)', 'Longitude (average)']\n#   A_D = A_D[Additional_columns]\n\n#   if Use_Log:\n#     data = np.log1p(data)\n#     for i in ['population', 'population_density', 'median_age', 'aged_65_older', 'aged_70_older', 'gdp_per_capita', 'extreme_poverty', 'cardiovasc_death_rate', 'diabetes_prevalence', 'female_smokers', 'male_smokers', 'handwashing_facilities', 'hospital_beds_per_thousand','life_expectancy', 'human_development_index']:\n#       A_D[i] = np.log1p(A_D[i])\n\n#   return data , A_D.values","fa432281":"# def ceate_prediction(predict_for = 100):\n#   test_X , test_Add = create_test_data()\n#   for i in range(predict_for):\n#     pred = model.predict([test_X.reshape(1,-1,1) , test_Add])[0]\n#     test_X = np.append(test_X , pred)\n    ","2a80bd8f":"# model.predict([test_X.reshape(1,-1,1) , test_Add])[0][0]","533c6c96":"# model.predict([train_iso_X , train_iso_Add])","e570ece5":"# series_Len = 21\n# First_Min = 100\n# flag = []\n# for i in range(start_index , len(temp) - series_Len , ):\n#   if temp[i]>100:\n#     flag.append([date_index[i],temp[i:i+series_Len] , temp[i+series_Len]])","cac02c39":"# train_data = pd.DataFrame([i[1] for i in flag] , columns = ['X_{}'.format(i) for i in range(1,series_Len+1)])","cf360133":"# train_data['Y'] =[i[2] for i in flag]\n# train_data['date'] =[i[0] for i in flag]","4ff2ea41":"# model.save(\"model.h5\")\n# model = load_model('model.h5')","7b63db91":"## Seasonal decomposition using Moving Averages.\n\n\n","b022d88c":"Holt linear attempts to capture the high-level trends in the time series data and fits the data with a straight line. The method can be summarized as follows:\nForecast, level, and trend equations respectively.<br>\n<center>\n<img src = 'https:\/\/i.imgur.com\/MHgcgGo.png' height = 38px><\/img><br>\n<img src = 'https:\/\/i.imgur.com\/3ImRHEO.png' height = 38px><\/img><br>\n<img src = 'https:\/\/i.imgur.com\/XExnvMX.png' height = 38px><\/img>\n<br>\n<\/center>\nIn the above equations, \u03b1 and \u03b2 are constants which can be configured. The values lt and bt represent the level and trend values repsectively. The trend value is the slope of the linear forecast function and the level value is the y-intercept of the linear forecast function. The slope and y-intercept values are continuously updated using the second and third update equations. Finally, the slope and y-intercept are used to calculate the forecast y<sub>t+h<\/sub> (in equation 1), which is h time steps ahead of the current time step","44234284":"## Seasonal AutoRegressive Integrated Moving Average with eXogenous regressors model (SARIMAX)","044bdfd2":"Decomposing Time Series into several components-Trend, Seasonality, and Random noise. We know that Time series data is composed of Level, Trend, Seasonality, and Random noise. Let\u2019s decompose the data and plot the trend, seasonality, and randomness in the data.\n<br>\nWe use statsmodel for seasonal decompose as an Additive \/ Multiplicative Model and the Period of the time series, which is the periodicity of the data, which is ***14 days*** as Infection Time of Corona Virus.\n<br>\n><b>Additive model<\/b> = Trend + Seasonality + Random Noise<br>\n><b>Multiplicative model<\/b> = Trend * Seasonality * Random Noise<br>\n\nThe seasonal component is first removed by applying a convolution filter to the data. The average of this smoothed series for each period is the returned seasonal component.\n","9e65badf":"## Support Vector Regressor","d105aa0b":"# Downloading Files and Importing Libraries\n\n","9972180d":"# COVID-19 Analysis At District Level (India)","3ccb975a":"## Ploting Moving Average, Moving STD, ACF & PACF\n","bbd4832e":"\nThe exponential smoothing method uses a different type of \"smoothing\" which differs from average smoothing. The previous time steps are exponentially weighted and added up to generate the forecast. The weights decay as we move further backwards in time. The model can be summarized as follows:\n<br>\n<center>\n<img src = 'https:\/\/i.imgur.com\/IqqjOFc.png' height = 38px><\/img><br>\n<img src = 'https:\/\/i.imgur.com\/GiyHyZf.png' height = 38px><\/img><br>\n<\/center>\nIn the above equations, \u03b1 is the smoothing parameter. The forecast y<sub>t+1<\/sub> is a weighted average of all the observations in the series y1, \u2026 ,yt. The rate at which the weights decay is controlled by the parameter \u03b1. This method gives different weightage to different time steps, instead of giving the same weightage to all time steps (like the moving average method). This ensures that recent sales data is given more importance than old sales data while making the forecast. Now let us see how this new smoothing method performs on our miniature dataset. ","1e1da531":"## Holt's Exponential Smoothing Model","e58eb4c8":"<center><a href=\"https:\/\/colab.research.google.com\/drive\/12xjqXdRqbvx0XJ0292L-mgALqv09L7Mb?usp=sharing\" target=\"_parent\"><img src=\"https:\/\/skycityauckland.co.nz\/media\/2283506\/thecolab.png\" alt=\"Open In Colab\">\n<h1>Open in Colab for Better User Interface<\/h1>\n<\/a><\/center>","a5d06470":"## Simple Exponential Smoothing","08f19a26":"##SEIR Model","e379745f":"### Searching for Optimal ARIMA Model\n","60e5948f":"#Configurations","d5fc2c20":"## SEIRD Model","63151efc":"## Exponential Smoothing","267d866d":"### Implementing SARIMAX","22d37761":"# RNN (LSTM)\n\nI tried alot to make LSTM Work....\nBut LSTM Doesn't Work","0948b047":"## AutoRegressions","2c631b16":"# Forecasting and Best Fit","b796d4cf":"## Theta Model","a85d9b84":"# COVID-19 Cases in World","04931a07":"The  [Theta model of Assimakopoulos & Nikolopoulos (2000)](https:\/\/www.statsmodels.org\/dev\/examples\/notebooks\/generated\/theta-model.html) is a simple method for forecasting the involves fitting two \u03b8-lines, forecasting the lines using a Simple Exponential Smoother, and then combining the forecasts from the two lines to produce the final forecast. The model is implemented in steps:\n\n\n1.   Test for seasonality\n2.   Deseasonalize if seasonality detected\n3.   Estimate \u03b1 by fitting a SES model to the data and b0 by OLS.\n4.   Forecast the series\n5.   Reseasonalize if the data was deseasonalized.\n    ","91cb0e54":"## Prophet Model","5ae965f9":"#COVID - 19 Analysis in India\n","82a066f6":"\n\n*   Autocorrelation Function (ACF): It just measures the correlation between two consecutive (lagged version). example at lag 4, ACF will compare series at time instance t1\u2026t2 with series at instance t1\u20134\u2026t2\u20134\n\n*   Partial Autocorrelation Function (PACF): is used to measure the degree of association between y(t) and y(t-p).\n"}}