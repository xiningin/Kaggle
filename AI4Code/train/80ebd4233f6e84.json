{"cell_type":{"67b108bc":"code","d573d0fb":"code","5873a6e1":"code","296df56b":"code","fc006dc5":"code","f0d6441c":"markdown","a18efc23":"markdown","83a8090f":"markdown","1d6546c9":"markdown","026751a4":"markdown","451c7f14":"markdown"},"source":{"67b108bc":"TRAIN_PATH = \"..\/input\/titanic\/train.csv\"\nTEST_PATH = \"..\/input\/titanic\/test.csv\"\nSAMPLE_SUBMISSION_PATH = \"..\/input\/titanic\/gender_submission.csv\"\nSUBMISSION_PATH = \"submission.csv\"","d573d0fb":"# import module we'll need to import our custom module\nfrom shutil import copyfile\n\n# copy our file into the working directory (make sure it has .py suffix)\ncopyfile(src = \"..\/input\/titanic-preprocess\/titanic_preprocess_py.py\", \n         dst = \"..\/working\/titanic_preprocess_py.py\")\n\nfrom titanic_preprocess_py import *\n\ntrain,test = loadAndPreprocess(TRAIN_PATH,TEST_PATH)\ntrain.head()","5873a6e1":"from sklearn.model_selection import StratifiedKFold,cross_val_score,RandomizedSearchCV,GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier,StackingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import f1_score,recall_score,precision_score,roc_auc_score\nfrom xgboost import XGBClassifier\n\n\ndef buildKNNModel(train,ID,TARGET,N_SPLITS,SEED,GRID_SEARCH_CV_NUM,SCORING):\n    # split data \n    y = train[TARGET]\n    X = train.drop([ID,TARGET],axis=1)\n\n    # split train set and validation set\n    stk = StratifiedKFold(n_splits=N_SPLITS,random_state=SEED,shuffle=True)\n    for train_index,val_index in stk.split(X,y):\n        X_train,y_train = X.iloc[train_index],y.iloc[train_index]\n        X_val,y_val = X.iloc[val_index],y.iloc[val_index]\n\n\n    # build model     \n    knn = KNeighborsClassifier()\n    knn.fit(X_train,y_train)\n    pred_knn = knn.predict(X_val)\n    print(\"knn recall:\",round(recall_score(y_val,pred_knn),2))\n    print(\"knn precision:\",round(precision_score(y_val,pred_knn),2))\n    print(\"knn f1_score:\",round(f1_score(y_val,pred_knn),2))\n    print(\"knn rou_auc_score:\",round(roc_auc_score(y_val,pred_knn),2))\n\n    # optimize model \n    params = {'algorithm': ['auto'], \n              'weights': ['uniform', 'distance'], \n              'leaf_size': range(1,30), \n              'n_neighbors': range(3,20)}\n    gs = GridSearchCV(knn, param_grid = params, \n                     verbose=True, \n                     cv=GRID_SEARCH_CV_NUM, \n                     scoring = SCORING\n                    )\n    gs.fit(X_train, y_train)\n    print(gs.best_score_)\n    print(gs.best_estimator_)\n    print(gs.best_params_)\n\n    # evaluate model\n    pred_val = gs.predict(X_val)\n    print(\"gs recall:\",round(recall_score(y_val,pred_val),2))\n    print(\"gs precision:\",round(precision_score(y_val,pred_val),2))\n    print(\"gs f1_score:\",round(f1_score(y_val,pred_val),2))\n    print(\"gs rou_auc_score:\",round(roc_auc_score(y_val,pred_val),2))\n    \n    return gs\n\n","296df56b":"ID = \"PassengerId\"\nTARGET = \"Survived\"\n\nSEED = 2021\nN_SPLITS = 5\nGRID_SEARCH_CV_NUM = 5\nSCORING = \"roc_auc\"\n\nknnModel = buildKNNModel(train,ID,TARGET,N_SPLITS,SEED,GRID_SEARCH_CV_NUM,SCORING)","fc006dc5":"X_test = test.drop([ID,TARGET],axis=1)   \ntest_pred = knnModel.predict(X_test).astype(int)\n\nsub = pd.read_csv(SAMPLE_SUBMISSION_PATH)\nsub[TARGET] = test_pred\nsub.to_csv(SUBMISSION_PATH,index=False)\nsub.head(10)","f0d6441c":"# global variables","a18efc23":"# build knn model","83a8090f":"preprocess library path : https:\/\/www.kaggle.com\/rhythmcam\/titanic-preprocess","1d6546c9":"# define knn model","026751a4":"# load and preprocess","451c7f14":"# predict and make submission csv "}}