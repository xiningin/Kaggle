{"cell_type":{"6c4b26e1":"code","59544b63":"code","ccee8bd9":"code","27b64192":"code","c73ca5d9":"code","09eaac0c":"code","486699d3":"code","d2538a30":"markdown","3f495a64":"markdown"},"source":{"6c4b26e1":"from IPython.display import clear_output\n!pip3 install rx\nclear_output()","59544b63":"import rx\nfrom rx.scheduler import ThreadPoolScheduler\nfrom rx import of,operators as ops","ccee8bd9":"import multiprocessing\nimport random\nimport time\nfrom threading import current_thread","27b64192":"SHORT_DELAY_TIME = 0.01\n\nDATA_LIST1 = of(1,2,3,4,5,6,7)\nDATA_LIST2 = of(1,2,3,4,5)\n\nPROCESS_END_WAITING_TIME = 5\n\ndef returnDataAfterShortDelay(data):\n    time.sleep(SHORT_DELAY_TIME) # short sleep\n    \n    return data","c73ca5d9":"# make Stream 1\nDATA_LIST1.pipe(\n   ops.map(lambda data: returnDataAfterShortDelay(data)),\n).subscribe(\n   lambda success: print(\"[Stream1]{0}\".format(success)),\n   lambda error: print(\"[Stream1]{0}\".format(error)),\n   lambda: print(\"[Stream1]complete\")\n)\n\n# make Stream 2\nDATA_LIST2.pipe(\n   ops.map(lambda data: returnDataAfterShortDelay(data)),\n).subscribe(\n   lambda success: print(\"[Stream2]{0}\".format(success)),\n   lambda error: print(\"[Stream2]{0}\".format(error)),\n   lambda: print(\"[Stream2]complete\")\n)\n\ntime.sleep(PROCESS_END_WAITING_TIME)","09eaac0c":"thread_count = multiprocessing.cpu_count()\nthread_pool_scheduler = ThreadPoolScheduler(thread_count)\nprint(\"cpu count = {0}\".format(thread_count))","486699d3":"# make Stream 1\nDATA_LIST1.pipe(\n   ops.map(lambda data: returnDataAfterShortDelay(data)),\n   ops.subscribe_on(thread_pool_scheduler)\n).subscribe(\n   lambda success: print(\"[Stream1]{0}\".format(success)),\n   lambda error: print(\"[Stream1]{0}\".format(error)),\n   lambda: print(\"[Stream1]complete\")\n)\n\n# make Stream2\nDATA_LIST2.pipe(\n   ops.map(lambda data: returnDataAfterShortDelay(data)),\n   ops.subscribe_on(thread_pool_scheduler)\n).subscribe(\n   lambda success: print(\"[Stream2]{0}\".format(success)),\n   lambda error: print(\"[Stream2]{0}\".format(error)),\n   lambda: print(\"[Stream2]complete\")\n)\n\ntime.sleep(PROCESS_END_WAITING_TIME)","d2538a30":"# without subscribe_on  => sync process","3f495a64":"# with subscribe_on => async process"}}