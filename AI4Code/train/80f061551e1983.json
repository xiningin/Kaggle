{"cell_type":{"ac15990c":"code","fd875267":"code","eef09f05":"code","61d9c292":"code","9651aaca":"code","ae11c141":"code","61f79129":"code","51f58ea8":"code","265f3090":"code","865034da":"code","3b3593ee":"code","c71c0273":"code","cebc99d8":"code","cb52e083":"code","68cad9ef":"code","5a88392b":"code","caadbda3":"code","01a2463f":"code","3960bea9":"code","a67d7892":"code","8c02b0cd":"code","44a6136e":"code","d5bf989f":"code","72d5304d":"code","347423e1":"code","576b4122":"code","74420f49":"code","751eabbf":"code","da35508d":"code","d520294f":"code","b42be656":"code","698ee98f":"code","77eb9a9d":"markdown","1d9d05da":"markdown","a68d00b8":"markdown","946eb24b":"markdown","a1cdf1c7":"markdown","88db4dc0":"markdown","f2f97e3f":"markdown","5682a2e4":"markdown","d49c7630":"markdown","2b2c1b8f":"markdown","7b4e0a92":"markdown","16a1d707":"markdown","1cc60999":"markdown","390bab8c":"markdown","87077f03":"markdown","03b113bf":"markdown","eaba9b80":"markdown","d35f12a6":"markdown","84919895":"markdown","718f57e6":"markdown","70a1c5ec":"markdown","361bbdb7":"markdown","f966045a":"markdown","40caec52":"markdown","ff968b1b":"markdown","0f735502":"markdown","923be022":"markdown","a59da081":"markdown","7ea60637":"markdown","7a92d356":"markdown","ad6727cb":"markdown","aa14f8c9":"markdown","6bbc33ac":"markdown","e84eefca":"markdown","351b968a":"markdown","376453a7":"markdown","cfefa0d7":"markdown","9ac0fccb":"markdown","d0336d2f":"markdown","e0c918b7":"markdown"},"source":{"ac15990c":"import sys # Realiza a importa\u00e7\u00e3o da biblioteca built-in sys.\n\nsys.version","fd875267":"x = 1\n\nprint(x)\n\nx = \"uma string\"\n\nprint(x)","eef09f05":"um_inteiro = 100\num_real = 150.345 # Separador decimal eh ponto, nao virgula.\num_booleano = True # Sempre True ou False. A primeira letra maiuscula.\numa_string = \"isso eh uma string\" # Aceitamos aspas duplas.\noutra_string = 'isso eh outra string' # E tambem aspas simples.","61d9c292":"str1 = \"hello\"\nstr2 = \"world\"\n\nstr_final = str1 + \", \" + str2 + \"!\"\n\nprint(str_final)","9651aaca":"print(f\"um_inteiro = {um_inteiro}, um_real = {um_real}\")\nprint(f\"um_booleano = {um_booleano}\")\nprint(f\"uma_string = {uma_string}, outra_string = {outra_string}\")","ae11c141":"lista_vazia = [] # Criamos uma lista vazia com os colchetes vazios.\n\nlista_um_elemento = [10] # Apenas o elemento entre colchetes.\n\nlst1 = [1, 2, 3]\nlst2 = [\"hello\", \"world\", 4, 5]\n\nprint(f\"lista_vazia = {lista_vazia}, lista_um_elemento = {lista_um_elemento}\")\nprint(f\"lst1 = {lst1} e lst2 = {lst2}\")","61f79129":"lst3 = lst1 + lst2\n\nprint(lst3)","51f58ea8":"print(f\"O primeiro elemento de lst1 eh {lst1[0]} e o segundo eh {lst1[1]}\") # Contagem comeca em zero.\n\nprint(f\"N\u00e3o pod\u00edamos deixar de dizer tamb\u00e9m: {lst2[0]}, {lst2[1]}!\")\n\nlst2[1] = \"Python\"\n\nprint(f\"Ou melhor: {lst2[0]}, {lst2[1]}!\")","265f3090":"lst3 = [10, 20, 30, 40, 50]\n\nprint(lst3[1:4:2]) # Comeca na posicao 1, vai ate a posicao 3, de 2 em 2.\nprint(lst3[:4:2]) # Podemos omitir o inicio. Nesse caso, 0 eh assumido.\nprint(lst3[:4]) # Ainda mais comum, eh omitir o passo. Nesse caso, de 1 em 1 eh assumido.\nprint(lst3[1:]) # E tambem podemos omitir o fim. Nesse caso, o fim da lista eh assumido.\nprint(lst3[:]) # Podemos ate mesmo omitir tudo. Nesse caso, inicio eh assumido 0 e fim eh assumido como fim da lista.\nprint(lst3[::-1]) # Um caso util eh omitirmos inicio e fim e fazer passo -1. Nesse caso, obtemos a lista invertida.","865034da":"lst1 = [1, 2, 3, 4] # Inicializando lst1 no comeco do bloco.\n\nprint(f\"Lista lst1: {lst1}\")\n\n# Obtendo tamanho.\ntamanho = len(lst1)\nprint(f\"Tamanho da lista lst1: {tamanho}\")\n\n# Adicionando um elemento ao final da lista.\nlst1.append(10)\nprint(f\"Lista lst1 com 10 adicionado no final: {lst1}\")\n\n# Inserindo em uma determinada posicao.\nlst1.insert(4, 8) # Adiciona o elemento 8 na posicao 4.\nprint(f\"Lista lst1 com 8 adicionado na posi\u00e7\u00e3o 4: {lst1}\")\n\n# Removendo um elemento da lista.\nlst1.remove(8) # Remove primeira ocorrencia do 8.\nprint(f\"Lista lst1 ap\u00f3s remover elemento 8: {lst1}\")\n\n# Invertendo a lista.\nlst1.reverse()\nprint(f\"Lista lst1 invertida: {lst1}\")\n\n# Ordenando a lista.\nlst1.sort()\nprint(f\"Lista lst1 ordenada: {lst1}\")","3b3593ee":"tupla_vazia = () # Criamos uma tupla vazia com apenas os par\u00eanteses vazios.\n\ntupla_um_elemento = (10,) # Criamos uma tupla com um unico elemento colocando uma virgula apos o elemento.\n\ntpl1 = (1, 2, 3)\ntpl2 = (\"hello\", \"tuples\", 4, 5)\n\nprint(f\"tupla_vazia = {tupla_vazia}, tupla_um_elemento = {tupla_um_elemento}\")\nprint(f\"tpl1 = {tpl1} e tpl2 = {tpl2}\")","c71c0273":"print(f\"O primeiro elemento de tpl1 eh {tpl1[0]} e o segundo eh {tpl1[1]}\") # Contagem comeca em zero.\n\nprint(f\"N\u00e3o pod\u00edamos deixar de dizer de novo: {tpl2[0]}, {tpl2[1]}!\")","cebc99d8":"try:\n    tpl2[0] = \"bye\" # Gera um erro do tipo TypeError.\nexcept TypeError as err:\n    print(err)","cb52e083":"tpl1 = (10, 20, 30, 40, 50)\n\nprint(f\"Tupla tpl1: {tpl1}\")\n\n# Obtendo tamanho.\ntamanho = len(tpl1)\nprint(f\"Tamanho da tupla tpl1: {tamanho}\")\n\nprint(tpl1[1:4:2]) # Comeca na posicao 1, vai ate a posicao 3, de 2 em 2.\nprint(tpl1[:4:2]) # Podemos omitir o inicio. Nesse caso, 0 eh assumido.\nprint(tpl1[:4]) # Ainda mais comum, eh omitir o passo. Nesse caso, de 1 em 1 eh assumido.\nprint(tpl1[1:]) # E tambem podemos omitir o fim. Nesse caso, o fim da lista eh assumido.\nprint(tpl1[:]) # Podemos ate mesmo omitir tudo. Nesse caso, inicio eh assumido 0 e fim eh assumido como fim da lista.\nprint(tpl1[::-1]) # Um caso util eh omitirmos inicio e fim e fazer passo -1. Nesse caso, obtemos a lista invertida.","68cad9ef":"set_vazio = {} # Criamos um conjunto vazio com as chaves vazias.\n\nset_um_elemento = {10} # Apenas um elemento entre as chaves.\n\nset1 = {1, 2, 3}\nset2 = {\"hello\", \"tuples\", 4, 5}\n\nprint(f\"set_vazio = {set_vazio}, set_um_elemento = {set_um_elemento}\")\nprint(f\"set1 = {set1} e set2 = {set2}\")","5a88392b":"dic1 = {\"Maria\": 20, \"Joao\": 21}\n\nidade_maria = dic1[\"Maria\"]\nidade_joao = dic1[\"Joao\"]\n\nprint(f\"A idade de Maria \u00e9 {idade_maria}\")\nprint(f\"A idade de Jo\u00e3o \u00e9 {idade_joao}\")","caadbda3":"lst1 = [1, 2, 3, 4, 5]\nlst_comp = [x**2 for x in lst1] # Para cada elemento x de lst1, criamos lst_comp com os elementos x ao quadrado.\n\nprint(lst_comp)\n\nset1 = {1, 2, 3, 4, 5}\nset_comp = {x**3 for x in set1}\n\nprint(set_comp)","01a2463f":"lst1 = [1, 2, 3, 4, 5]\nlst_comp_cond = [x**2 for x in lst1 if x % 2 == 1] # Para cada elemento impar x de lst1, criamos lst_comp_cond com os elementos x ao quadrado.\n\nprint(lst_comp_cond)","3960bea9":"lst1 = [1, 2, 3, 4, 5]\nlst2 = [10, 20, 30, 40, 50]\n\nlst_comp_complexa = [(x, y) for x in lst1 for y in lst2 if x * y > 100] # Pega os pares ordenados de lst1 x lst2 para os quais x * y > 100.\n\nprint(lst_comp_complexa)","a67d7892":"x = 1\ny = 2\n\nif x == 0:\n    print(\"x \u00e9 zero\")\nelif x == 1 and y == 2:\n    print(\"x \u00e9 1 e y \u00e9 2\")\nelse:\n    print(\"x n\u00e3o \u00e9 1 e y n\u00e3o \u00e9 2\")","8c02b0cd":"x = 10\nwhile x > 0:\n    print(f\"x = {x}\")\n    x -= 1","44a6136e":"print(list(range(1, 10, 2))) # Vai de 1 a 10 (exclusive) de 2 em 2.\nprint(list(range(1, 10))) # Vai de 1 a 10 (exclusive) de 1 em 1 (passo default).\nprint(list(range(10))) # Vai de 0 a 10 (exclusive) de 1 em 1 (passo default).","d5bf989f":"for i in range(10):\n    print(f\"i = {i}\")","72d5304d":"lst1 = [1, 2, 3, 4, 5]\ntpl1 = (1, 2, 3, 4, 5)\nset1 = {1, 2, 3, 4, 5}\n\nprint(\"\\nNa lista:\")\nfor elem in lst1:\n    print(f\"elem = {elem}\")\n\nprint(\"\\nNa tupla:\")\nfor elem in tpl1:\n    print(f\"elem = {elem}\")\n    \nprint(\"\\nNo conjunto:\")\nfor elem in set1:\n    print(f\"elem = {elem}\")","347423e1":"lst1 = [10, 20, 30, 40, 50]\n\nfor i, elem in enumerate(lst1):\n    print(f\"Posi\u00e7\u00e3o {i} de lst1 = {elem}\")","576b4122":"def quadrado(x):\n    return x**2\n\nprint(f\"2\u00b2 = {quadrado(2)}\")\nprint(f\"3\u00b2 = {quadrado(3)}\")","74420f49":"def soma(x, y=1):\n    return x + y\n\nprint(f\"soma(2) = 2 + 1 = {soma(2)}\")\nprint(f\"soma(2, 3) = 2 + 3 = {soma(2, 3)}\")","751eabbf":"def potencia(expoente, base):\n    return base**expoente\n\nprint(f\"2\u00b3 = potencia(base=2, expoente=3) = {potencia(base=2, expoente=3)}\")\nprint(f\"3\u00b2 = potencia(expoente=2, base=3) = {potencia(expoente=2, base=3)}\")","da35508d":"def mostrar(primeiro, segundo, *args, **kwargs):\n    print(f\"O primeiro argumento \u00e9 {primeiro}\")\n    print(f\"O segundo argumento \u00e9 {segundo}\")\n    \n    for arg in args:\n        print(f\"Cada argumento coletado pela tupla \u00e9 {arg}\")\n        \n    for kwarg, valor in kwargs.items():\n        print(f\"Cada argumento {kwarg} coletado pelo dicion\u00e1rio \u00e9 {valor}\")\n        \n\nmostrar(\"hello\", \"world\", \"um\", \"argumento\", \"diferente\",\n     keyword_arg1=\"um argumento\", keyword_arg2=\"diferente\")","d520294f":"class Pessoa:\n    def __init__(self, nome, idade):\n        self.nome = nome\n        self.idade = idade\n        \n    def apresentacao(self):\n        return f\"Ol\u00e1, meu nome \u00e9 {self.nome} e tenho {self.idade} anos\"\n\n\nmaria = Pessoa(\"Maria\", 20)\njoao = Pessoa(\"Jo\u00e3o\", 21)\n\nprint(maria.apresentacao())\nprint(joao.apresentacao())","b42be656":"class Funcionario(Pessoa):\n    def __init__(self, nome, idade, ocupacao):\n        super().__init__(nome, idade)\n        self.ocupacao = ocupacao\n        \n    def apresentacao(self):\n        return f\"Ol\u00e1, meu nome \u00e9 {self.nome} e sou {self.ocupacao}\"\n\n\nmaria = Funcionario(\"Maria\", 20, \"desenvolvedora\")\njoao = Funcionario(\"Jo\u00e3o\", 21, \"testador\")\n\nprint(maria.apresentacao())\nprint(joao.apresentacao())","698ee98f":"class Cargo:\n    def __init__(self, cargo, carga_horaria):\n        self._cargo = cargo\n        self._carga_horaria = carga_horaria\n        \n    @property\n    def carga_horaria(self):\n        return str(self._carga_horaria) + \" horas\/semana\"\n    \n    @carga_horaria.setter\n    def carga_horaria(self, nova_carga_horaria):\n        self._carga_horaria = nova_carga_horaria\n\n\nestagiario = Cargo(\"Estagi\u00e1rio\", 20)\n\nprint(f\"Carga hor\u00e1ria original do estagi\u00e1rio: {estagiario.carga_horaria}\")\n\nestagiario.carga_horaria = 10 # O final do semestre estava chegando...\n\nprint(f\"Carga hor\u00e1ria de final de semestre do estagi\u00e1rio: {estagiario.carga_horaria}\")","77eb9a9d":"Explicar orienta\u00e7\u00e3o a objetos est\u00e1 fora do escopo deste curso r\u00e1pido. Para os interessados, na se\u00e7\u00e3o de Refer\u00eancias, coloquei algumas indica\u00e7\u00f5es que considero boas.  \nAqui me restringirei somente a sintaxe de orienta\u00e7\u00e3o a objetos em Python.","1d9d05da":"Para uma lista mais completa das opera\u00e7\u00f5es de tuplas, acesse: https:\/\/docs.python.org\/3\/tutorial\/datastructures.html#tuples-and-sequences","a68d00b8":"Fun\u00e7\u00f5es permitem par\u00e2metros *default*:","946eb24b":"> Nota: ao contr\u00e1rio de C ou Java, o Python n\u00e3o possui estruturas `switch-case` e `do-while`.","a1cdf1c7":"Podemos criar express\u00f5es bastante complexas, envolvendo m\u00faltiplos *loops* `for`:","88db4dc0":"Podemos usar a fun\u00e7\u00e3o `range` para criar `for` simples:","f2f97e3f":"Python permite utilizar v\u00e1rios tipos de dados: inteiros, reais, strings, objetos:","5682a2e4":"Tamb\u00e9m podemos acessar intervalos de uma lista, uma opera\u00e7\u00e3o chamada *slicing*.  \nPara isso, utilizamos a nota\u00e7\u00e3o colchete com a seguinte sintaxe: `nome_da_lista[inicio:fim:passo]`,  \nonde `nome_da_lista` \u00e9 a nossa lista, `inicio` \u00e9 a primeira posi\u00e7\u00e3o do intervalo inclusive, `fim` \u00e9 a \u00faltima posi\u00e7\u00e3o do intervalo exclusive e `passo` \u00e9 o incremento entre uma posi\u00e7\u00e3o e outra.\n\nEssa nota\u00e7\u00e3o tem bastante liberdade e flexibidade. Podemos omitir `inicio`, `fim` e `passo`. Tamb\u00e9m podemos fazer `passo < 0`, ou seja, andar \"ao contr\u00e1rio\" na lista. Nesse \u00faltimo caso, faz sentido fazermos `inicio >= fim`.","d49c7630":"As listas possuem certas opera\u00e7\u00f5es (m\u00e9todos) interessantes:","2b2c1b8f":"### if\n\nPython prov\u00ea estruturas de sele\u00e7\u00e3o `if...elif...else`.\n\nBlocos de sele\u00e7\u00e3o condicional `if` n\u00e3o necessitam de par\u00eanteses.  ","7b4e0a92":"Podemos criar m\u00e9todos similares a *getters* e *setters* em Python.\n\nNote que para evitar recurs\u00e3o infinita do m\u00e9todo`@property` de `carga_horaria`, fizemos o atributo interno se chamar `_carga_horaria` (com um _ na frente), enquanto o atributo externo se chama `carga_horaria`.","16a1d707":"## Conjuntos\n\nUma outra cole\u00e7\u00e3o, \u00e0s vezes subestimada, mas que pode ser bastante \u00fatil \u00e9 o conjunto (*set*).  \nConjuntos s\u00e3o objetos imut\u00e1veis, e como em um conjunto matem\u00e1tico, conjuntos em Python n\u00e3o permitem elementos duplicados.\n\nCriamos conjuntos com a nota\u00e7\u00e3o de chaves (**{** e **}**):","1cc60999":"Antes de mostrarmos o `for`, falemos da fun\u00e7\u00e3o `range`. A fun\u00e7\u00e3o `range` pode ser usada para gerar uma sequ\u00eancia num\u00e9rica, \u00fatil para criar *loops*.  \nO primeiro argumento \u00e9 o in\u00edcio inclusive e o segundo argumento \u00e9 o fim exclusive. Podemos passar tamb\u00e9m um terceiro argumento de passo.\n\nSe apenas um argumento for passado, ele indica o fim (exclusive) da sequ\u00eancia.","390bab8c":"## Refer\u00eancias\n\n* Site oficial do Python: https:\/\/www.python.org\/\n* \u00d3timo livro para aprender os conceitos b\u00e1sicos do Python: **Ceder, Vernon L., Kenneth McDonald, and Daryl D. Harms. The quick Python book. Manning, 2010.**\n* Bom livro para se aprofundar em orienta\u00e7\u00e3o a objetos com Python: **Phillips, Dusty. Python 3 Object Oriented Programming. Packt Publishing Ltd, 2010.**\n* Excelente livro para aprender os conceitos mais avan\u00e7ados do Python: **Ramalho, Luciano. Fluent Python: clear, concise, and effective programming. O'Reilly Media, Inc., 2015.** (um dos meus livros preferidos)\n* \u00d3timo livro sobre boas pr\u00e1ticas em desenvolvimento com Python: **Slatkin, Brett. Effective Python: 59 Specific Ways to Write Better Python. Pearson Education, 2015.**","87077f03":"## B\u00e1sico\n\nPodemos executar qualquer bloco individualmente. A sa\u00edda da \u00faltima linha de c\u00f3digo do bloco ser\u00e1 a sa\u00edda do bloco.\n\nVamos come\u00e7ar verificando a vers\u00e3o do Python que estamos executando:","03b113bf":"## Tuplas\n\nComo vimos, listas s\u00e3o *mut\u00e1veis*: podemos modific\u00e1-las *in-place* depois de criadas.  \nNem sempre isso \u00e9 desej\u00e1vel. Em algumas ocasi\u00f5es, queremos trabalhar com objetos *imut\u00e1veis*: qualquer modifica\u00e7\u00e3o feita em um objeto imut\u00e1vel gera um novo objeto.  \n\nO jeito do Python de criar cole\u00e7\u00f5es imut\u00e1veis \u00e9 atrav\u00e9s de **tuplas** (*tuples*). Assim como as listas, as tuplas podem possuir elementos de tipos diferentes.\n\nTuplas s\u00e3o criadas com par\u00eanteses (**(** e **)**):\n","eaba9b80":"Tamb\u00e9m podemos acessar seus elementos atrav\u00e9s da nota\u00e7\u00e3o de colchetes:","d35f12a6":"## Fun\u00e7\u00f5es\n\nComo toda boa linguagen, Python permite a cria\u00e7\u00e3o e execu\u00e7\u00e3o de fun\u00e7\u00f5es.  \n\nPara isso, utilizamos a palavra reservada `def` para criar fun\u00e7\u00f5es:","84919895":"Como a maioria das linguagens de programa\u00e7\u00e3o orientadas a objetos, Python possui um sistema de heran\u00e7a que permite que uma classe estenda outra.","718f57e6":"A partir do Python 3.5.0, temos um jeito bem f\u00e1cil de exibir sa\u00eddas na tela com a fun\u00e7\u00e3o `print`, as chamadas *f-strings*:","70a1c5ec":"Para uma lista mais completa das opera\u00e7\u00f5es de listas, acesse: https:\/\/docs.python.org\/3\/tutorial\/datastructures.html#more-on-lists","361bbdb7":"## Orienta\u00e7\u00e3o a objetos\n\nExplicar orienta\u00e7\u00e3o a objetos est\u00e1 fora do escopo deste curso r\u00e1pido. Para os interessados, na se\u00e7\u00e3o de Refer\u00eancias, coloquei algumas indica\u00e7\u00f5es que considero boas.  \nAqui me restringirei somente \u00e0 sintaxe de orienta\u00e7\u00e3o a objetos em Python.\n\nEm Python, definimos uma classe com a palavra reservada `class`.  Diferentemente de Java, C++ e Ruby, Python n\u00e3o possui modificadores de visibilidade (*public*, *protected*, *package* ou *private*). Tamb\u00e9m n\u00e3o temos nenhuma sintaxe especial para declara\u00e7\u00e3o de m\u00e9todos: eles s\u00e3o apenas fun\u00e7\u00f5es definidas dentro de uma classe.\n\nTamb\u00e9m n\u00e3o precisamos declarar atributos, eles podem ser criados a qualquer momento.\n\nDentro de uma classe, seguimos a conven\u00e7\u00e3o de referenciar o objeto atual com a palavra `self`. Todo m\u00e9todo de inst\u00e2ncia de uma classe tem como seu primeiro par\u00e2metro `self`.\n\nO construtor de uma classe \u00e9 dada pelo m\u00e9todo especial `__init__`.","f966045a":"Duas funcionalidades bastate \u00fateis das fun\u00e7\u00f5es em Python \u00e9 permitir passar argumentos por nome e argumentos n\u00e3o especificados na fun\u00e7\u00e3o.\n\nArgumentos por nome permite que passemos os argumentos em qualquer ordem:","40caec52":"Listas, tuplas e conjuntos fazem parte de um grupo de objetos chamaos *iter\u00e1veis*. Isso significa dizer que podemos iterar (i.e., realizar um *loop*) sobre eles:","ff968b1b":"Por\u00e9m, como tuplas s\u00e3o imut\u00e1veis, n\u00e3o podemos modificar seus elementos com a nota\u00e7\u00e3o colchete (nem de nenhum outro jeito).  \nTentar faz\u00ea-lo nos gera um erro:","0f735502":"Uma informa\u00e7\u00e3o \u00fatil de se saber \u00e9 que em Python podemos concatenar (i.e., colocar uma seguida da outra) strings com o operador +:","923be022":"Podemos concatenar listas com o operador + (talvez voc\u00ea lembre que podemos fazer isso com strings e n\u00e3o \u00e9 por acaso! Strings em Python s\u00e3o listas :))","a59da081":"Em Python, ao contr\u00e1rio de linguagens como C, C++ e Java, n\u00e3o precisamos declarar vari\u00e1veis antes de utiliz\u00e1-las.\n\nPython possui *tipagem din\u00e2mica*:","7ea60637":"Para iterarmos mantermos o \u00edndice da nossa posi\u00e7\u00e3o atual, podemos usar a fun\u00e7\u00e3o `enumerate`:","7a92d356":"# Introdu\u00e7\u00e3o ao Python\n\nIsso na verdade \u00e9 um curso a jato de Python.\n\nA ideia \u00e9 apenas apresentar os conceitos e sintaxe b\u00e1sicos da linguagem, sem se perder nos detalhes. Mas como \u00e9 f\u00e1cil imaginar, \u00e9 simplesmente imposs\u00edvel ensinar uma linguagem de programa\u00e7\u00e3o, por mais simples que ela seja, em apenas um notebook ou curso r\u00e1pido.\n\nNo final deste notebook, eu fa\u00e7o indica\u00e7\u00f5es de mais materiais para voc\u00ea aprofundar o seu conhecimento, caso seja do seu interesse (e seria muito bom se fosse!).","ad6727cb":"Tuplas compartilham de algumas das opera\u00e7\u00f5es dispon\u00edveis para listas, incluindo a fun\u00e7\u00e3o `len` e *slicing*.","aa14f8c9":"## Listas\n\nPodemos armazenar uma cole\u00e7\u00e3o de valores em listas (*lists*). Os elementos dessas listas n\u00e3o precisam ser necessariamente do mesmo tipo,\nou seja, podemos mesclar inteiros com reais com strings e assim por diante em uma mesma lista.\n\nListas s\u00e3o delimitadas por colchetes (**[** e **]**):","6bbc33ac":"## Estruturas de controle\n\nAntes de falarmos das estruturas de controle do Python, precisamos deixar uma coisa muito clara: **Python delimita seus blocos de c\u00f3digo atrav\u00e9s da indenta\u00e7\u00e3o**.","e84eefca":"Dicion\u00e1rios possuem uma lista vasta de m\u00e9todo muito \u00fateis. Sugiro que voc\u00ea se familiarize com eles em algum momento.\n\nPara uma lista de m\u00e9todos, acesse: https:\/\/docs.python.org\/3\/tutorial\/datastructures.html#dictionaries","351b968a":"## Dicion\u00e1rios\n\nDicion\u00e1rios s\u00e3o uma das estruturas de dados mais vers\u00e1teis de qualquer linguagem de programa\u00e7\u00e3o. Eles tamb\u00e9m s\u00e3o conhecidos como *hash*, *map* e *arrays* associativos.  \n\nDicion\u00e1rios s\u00e3o conjuntos de *chave-valor* (*key*-*value*) em que podemos associar a cada *chave* um *valor* correspondente.","376453a7":"## List e set comprehensions\n\nPython possui um mecanismo para cria\u00e7\u00e3o de listas e conjuntos de forma bastante compacta e leg\u00edvel, as compreens\u00f5es (*comprehensions*).","cfefa0d7":"### for e while\n\nO Python prov\u00ea *loops* com as estruturas `for` e `while`. Comecemos pelo `while`.","9ac0fccb":"Podemos adicionar condicionais aos elementos:","d0336d2f":"Podemos usar nota\u00e7\u00e3o de colchetes para acessar e modificar valores individuais de listas.\n\n**Lembrando, como quase sempre na computa\u00e7\u00e3o, a contagem (das posi\u00e7\u00f5es) come\u00e7a em 0.**","e0c918b7":"Para uma lista mais completa das opera\u00e7\u00f5es de conjuntos, acesse: https:\/\/docs.python.org\/3\/tutorial\/datastructures.html#sets"}}