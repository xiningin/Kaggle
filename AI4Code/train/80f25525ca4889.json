{"cell_type":{"e3abaa94":"code","ec197f6f":"code","660572f8":"code","4e10ed04":"code","938f3542":"code","cc81c27e":"code","f8604f30":"code","59f2d1ad":"code","59f36bff":"code","dfe0bc8d":"code","2151ff8d":"code","8c1fdb25":"code","f1a16615":"code","32b1598c":"code","8c0620a5":"code","6b3a9736":"code","db58fbe5":"code","6571afe1":"code","fa600b3c":"code","5ccbe746":"code","d5f1c714":"code","061d6d3c":"code","4db30d26":"markdown","7be6b0ed":"markdown","c1549c37":"markdown","13e33508":"markdown","cc8a51f6":"markdown","8c062eb5":"markdown","56cc60a6":"markdown","10ed02ed":"markdown","2ec9b9ef":"markdown","fbd50aba":"markdown"},"source":{"e3abaa94":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec197f6f":"# We install the Faker module.\n!pip install Faker ","660572f8":"# In addition, we install the Dumper, which provides nicer console output when dumping variables.\n!pip install Dumper","4e10ed04":"# The following example is a simple demonstration of Faker.\n\nfrom faker import Faker\n\nfaker = Faker()\n\nprint(f'name: {faker.name()}')\nprint(f'address: {faker.address()}')\n\nprint(f'text: {faker.text()}')","938f3542":"# Jobs are generated with job().\n\nfrom faker import Faker\n\nfaker = Faker()\n\nfor _ in range(6):\n    print(faker.job())","cc81c27e":"from faker import Faker\n\nfaker = Faker('cz_CZ')\n\nfor i in range(3):\n\n    name = faker.name()\n    address = faker.address()\n    phone = faker.phone_number()\n\n    print(f'{name}, {address}, {phone}')\n# The example generates fake data in Czech language.","f8604f30":"from faker import Faker\n\nfaker = Faker()\n\nprint(f'currency: {faker.currency()}')\nprint(f'currency name: {faker.currency_name()}')\n\nprint(f'currency code: {faker.currency_code()}')","59f2d1ad":"from faker import Faker\n\nfaker = Faker()\n\nprint(f'a word: {faker.word()}')\nprint(f'six words: {faker.words(6)}')\n\nwords = ['forest', 'blue', 'cloud', 'sky', 'wood', 'falcon']\n\nprint(f'customized unique words: {faker.words(3, words, True)}')","59f36bff":"# The example creates dummy words.\nprint(f'a word: {faker.word()}')","dfe0bc8d":"# This line generates a fake word\nprint(f'six words: {faker.words(6)}')","2151ff8d":"# Here we generate six dummy words\nwords = ['forest', 'blue', 'cloud', 'sky', 'wood', 'falcon']\n\nprint(f'customized unique words: {faker.words(3, words, True)}')","8c1fdb25":"from faker import Faker\nimport dumper\n\nfaker = Faker()\n\nprofile1 = faker.simple_profile()\ndumper.dump(profile1)\n\nprint('--------------------------')\n\nprofile2 = faker.simple_profile('M')\ndumper.dump(profile2)\n\nprint('--------------------------')\n\nprofile3 = faker.profile(sex='F')\ndumper.dump(profile3)","f1a16615":"from faker import Faker\n\nfaker = Faker()\n\nprint(f'Random int: {faker.random_int()}')\nprint(f'Random int: {faker.random_int(0, 100)}')\nprint(f'Random digit: {faker.random_digit()}')","32b1598c":"# The example generates random digits and integers.\nprint(f'Random int: {faker.random_int(0, 100)}')","8c0620a5":"# Faking hashes and uuids\nfrom faker import Faker\n\nfaker = Faker()\n\nprint(f'Email: {faker.email()}')\nprint(f'Safe email: {faker.safe_email()}')\nprint(f'Free email: {faker.free_email()}')\nprint(f'Company email: {faker.company_email()}')\n\nprint('------------------------------------')\n\nprint(f'Host name: {faker.hostname()}')\nprint(f'Domain name: {faker.domain_name()}')\nprint(f'Domain word: {faker.domain_word()}')\nprint(f'TLD: {faker.tld()}')\n\nprint('------------------------------------')\n\nprint(f'IPv4: {faker.ipv4()}')\nprint(f'IPv6: {faker.ipv6()}')\nprint(f'MAC address: {faker.mac_address()}')\n\nprint('------------------------------------')\n\nprint(f'Slug: {faker.slug()}')\nprint(f'Image URL: {faker.image_url()}')","6b3a9736":"## Faking date and time","db58fbe5":"from faker import Faker\n\nfaker = Faker()\n\nprint(f'Date of birth: {faker.date_of_birth()}')\nprint(f'Century: {faker.century()}')\nprint(f'Year: {faker.year()}')\nprint(f'Month: {faker.month()}')\nprint(f'Month name: {faker.month_name()}')\nprint(f'Day of week: {faker.day_of_week()}')\nprint(f'Day of month: {faker.day_of_month()}')\nprint(f'Time zone: {faker.timezone()}')\nprint(f'AM\/PM: {faker.am_pm()}')","6571afe1":"from faker import Faker\n\nfaker = Faker()\n\nprint(f'Datetime this century: {faker.date_time_this_century()}')\nprint(f'Datetime this decade: {faker.date_time_this_decade()}')\nprint(f'Datetime this year: {faker.date_time_this_year()}')\nprint(f'Datetime this month: {faker.date_time_this_month()}')\n\nprint('-------------------------')\n\nprint(f'Date this century: {faker.date_this_century()}')\nprint(f'Date this decade: {faker.date_this_decade()}')\nprint(f'Date this year: {faker.date_this_year()}')\nprint(f'Date this month: {faker.date_this_month()}')\n\nprint('-------------------------')\n\nTOTAL_SECONDS = 60*60*24*2 # two days\n\nseries = faker.time_series(start_date='-12d', end_date='now', precision=TOTAL_SECONDS)\n\nfor val in series:\n    print(val[0])","fa600b3c":"from faker import Faker\n\nfaker = Faker()\n\nprint(f'Unix time: {faker.unix_time()}')\nprint(f'Datetime: {faker.date_time()}')\nprint(f'iso8601: {faker.iso8601()}')\nprint(f'Date: {faker.date()}')\nprint(f'Time: {faker.time()}')\n\nprint('-------------------------')\n\nprint(f\"Datetime between: {faker.date_time_between(start_date='-15y', end_date='now')}\")\nprint(f\"Date between: {faker.date_between()}\")\n\nprint('-------------------------')\n\nprint(f\"Future datetime: {faker.future_datetime()}\")\nprint(f\"Future date: {faker.future_date()}\")\nprint(f\"Past datetime: {faker.past_datetime()}\")\nprint(f\"Past date: {faker.past_date()}\")","5ccbe746":"# In the following example, we generate XML data with Faker and Jinja2 template. The XML file will contain users.\n# We install the Jinja2 template engine.\n\n!pip install jinja2","d5f1c714":"from jinja2 import Environment, FileSystemLoader\nfrom faker import Faker\n\nclass User:\n\n    def __init__(self, first_name, last_name, occupation):\n\n        self.first_name = first_name\n        self.last_name = last_name\n        self.occupation = occupation\n\nfaker = Faker()\nusers = []\n\nfor _ in range(10):\n\n    first_name = faker.first_name()\n    last_name = faker.last_name()\n    occupation = faker.job()\n\n    user = User(first_name, last_name, occupation)\n\n    users.append(user)","061d6d3c":"file_loader = FileSystemLoader('templates')","4db30d26":"## Faking words","7be6b0ed":"## Faking profiles","c1549c37":"## The origin of notebbok\n[You find in this site more details](http:\/\/zetcode.com\/python\/faker\/)","13e33508":"## Faking locale data","cc8a51f6":"# Setting up Faker","8c062eb5":"## Faking currencies","56cc60a6":"## Generating XML data with Faker","10ed02ed":"## Faking jobs","2ec9b9ef":"## The package is installed with composer.","fbd50aba":"## Faking numbers"}}