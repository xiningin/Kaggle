{"cell_type":{"32484be2":"code","7798c618":"code","dd70c89c":"code","2dfa645c":"code","2337c4c3":"code","dcde1167":"code","6ea148f8":"code","c3d57432":"code","e6202065":"code","8e4ba3dc":"code","a2f03525":"code","2c11d040":"code","088ec60e":"code","bb2eb7da":"code","e55181a5":"code","c03a7758":"code","53683da1":"code","6bec287f":"code","f06ecd38":"code","e6dd39d5":"code","ea08ffc2":"markdown","59132e95":"markdown","be423b74":"markdown","aaf989ff":"markdown","19832acf":"markdown","6467f450":"markdown","2820f90e":"markdown","a3e4cdf5":"markdown","5eacb402":"markdown","0065ceb6":"markdown"},"source":{"32484be2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Reshape, Dropout\nfrom keras.utils import to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam\n\nnp.random.seed(3)","7798c618":"def draw(index, x):\n    plt.imshow(x[index][:,:,0], cmap='gray')\n    plt.show()","dd70c89c":"def draw_multiple(df):\n    n_cols = 10\n    n_rows = int(np.ceil(df.shape[0] \/ 10.0))\n    col_i = 0\n    row_i = 0\n    fig, ax = plt.subplots(n_rows, n_cols, sharex=True, sharey=True, figsize=(25, 25 * n_rows \/ 10))\n    for index, row in df.iterrows():\n        x = row[1:]\n        y = row[0]\n        x = x.values.reshape((28,28))\n        p = ax[row_i, col_i] if n_rows > 1 else ax[col_i]\n        p.imshow(x, cmap='gray')\n        p.set_title(\"i:{}, l:{}\".format(index, y))\n        \n        col_i += 1\n        if (col_i >= n_cols):\n            col_i = 0\n            row_i += 1","2dfa645c":"df_train = pd.read_csv(\"..\/input\/train.csv\")\nx_unlabeled = pd.read_csv(\"..\/input\/test.csv\")","2337c4c3":"bad_sample_ids = [73,125,2013,4226,5288,5747,8566,14032,15219,16301,17300,24477,25946,34274,36018]\ndf_bad_samples = df_train.loc[bad_sample_ids, :]\ndf_train_cleaned = df_train.drop(bad_sample_ids, errors='ignore')\nprint('dropped')","dcde1167":"draw_multiple(df_bad_samples)","6ea148f8":"def prepare_x(x):\n    x_prepared = x.values \/ 256.0\n    x_prepared = x_prepared.reshape(-1, 28, 28, 1)\n    return x_prepared\n\ndef prepare_df(df):\n    x = df_train.iloc[:, 1:]\n    y = df_train.iloc[:, 0]\n    x_prepared = prepare_x(x)\n    y_prepared = to_categorical(y, num_classes=10)\n    return x_prepared, y_prepared\n\nx_test = prepare_x(x_unlabeled)\nx_train_all, y_train_all = prepare_df(df_train)\nx_train_all_cleaned, y_train_all_cleaned = prepare_df(df_train_cleaned)\nprint(x_train_all.shape)\nprint(x_train_all_cleaned.shape)","c3d57432":"x_train, x_val, y_train, y_val = train_test_split(x_train_all_cleaned, y_train_all_cleaned, test_size = 0.02, random_state=3)\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_val.shape)","e6202065":"image_gen = ImageDataGenerator(\n    rotation_range=15.0, \n    width_shift_range=0.15, \n    height_shift_range=0.15, \n    zoom_range=0.15, \n    fill_mode='nearest'\n)\nimage_gen.fit(x_train)","8e4ba3dc":"def build_model(optimizer):\n    CONV_FILTERS_1 = 80\n    CONV_KERNEL_1 = (7, 7)\n\n    CONV_FILTERS_2 = 80\n    CONV_KERNEL_2 = (5, 5)\n    MAX_POOL_SIZE_2 = (2, 2)\n\n    CONV_FILTERS_3 = 160\n    CONV_KERNEL_3 = (5, 5)\n    MAX_POOL_SIZE_3 = (2, 2)\n\n    CONV_FILTERS_4 = 160\n    CONV_KERNEL_4 = (3, 3)\n\n    model = Sequential()\n\n    model.add(Conv2D(filters=CONV_FILTERS_1, kernel_size=CONV_KERNEL_1, activation='relu', input_shape=(28,28,1)))\n    model.add(Dropout(0.1))\n\n    model.add(Conv2D(filters=CONV_FILTERS_2, kernel_size=CONV_KERNEL_2, activation='relu', padding='same'))\n    model.add(MaxPooling2D(pool_size=MAX_POOL_SIZE_2))\n    model.add(Dropout(0.1))\n\n    model.add(Conv2D(filters=CONV_FILTERS_3, kernel_size=CONV_KERNEL_3, activation='relu', padding='same'))\n    model.add(MaxPooling2D(pool_size=MAX_POOL_SIZE_3))\n\n    model.add(Conv2D(filters=CONV_FILTERS_4, kernel_size=CONV_KERNEL_4, activation='relu', padding='same'))\n\n    model.add(Flatten())\n    model.add(Dense(80, activation='relu'))\n    model.add(Dense(10, activation='softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n\n    model.summary()\n    return model","a2f03525":"optimizer_rmsprop = 'rmsprop'\noptimizer_adam = Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)\nmodel_rmsprop = build_model(optimizer_rmsprop)\nmodel_adam = build_model(optimizer_adam)","2c11d040":"def fit(model, x_train, y_train, x_val, y_val, batch_size, epochs, history):\n    history_new = model.fit_generator(\n        image_gen.flow(x_train, y_train, batch_size=batch_size), \n        steps_per_epoch=len(x_train) \/ batch_size,\n        epochs=epochs,\n        verbose=1,\n        validation_data=(x_val, y_val)\n    ).history\n    history['acc'].extend(history_new['acc'])\n    history['val_acc'].extend(history_new['val_acc'])\n    return history\n\ndef train(model): \n    history = {'acc':[], 'val_acc':[]}\n    history = fit(model, x_train, y_train, x_val, y_val, 128, 8, history)\n    history = fit(model, x_train, y_train, x_val, y_val, 256, 8, history)\n    history = fit(model, x_train, y_train, x_val, y_val, 512, 8, history)\n    history = fit(model, x_train, y_train, x_val, y_val, 1024, 8, history)\n    history = fit(model, x_train, y_train, x_val, y_val, 2048, 8, history)\n    return history","088ec60e":"# history_rmsprop = train(model_rmsprop)\nhistory_adam = train(model_adam)","bb2eb7da":"# pd.DataFrame.from_dict(history_rmsprop)[['acc','val_acc']].plot.line()\npd.DataFrame.from_dict(history_adam)[['acc','val_acc']].plot.line()","e55181a5":"model = model_adam\ny_test_one_hot = model.predict(x_test)","c03a7758":"print(y_test_one_hot.shape)\ny_test = np.argmax(y_test_one_hot, axis=1)\nprint(y_test.shape)\ny_test","53683da1":"Submission = pd.DataFrame()\nSubmission['ImageId'] = range(1, x_test.shape[0] + 1)\nSubmission['Label'] = y_test\nprint(Submission.head())\nSubmission.set_index('ImageId', inplace=True)\nSubmission.to_csv('cnn_submission1.csv', sep=',')\nprint('Saved')","6bec287f":"y_train_predicted_one_hot = model.predict(x_train_all)\ny_train_predicted = np.argmax(y_train_predicted_one_hot, axis=1)\ny_train_actual = np.argmax(y_train_all, axis=1)","f06ecd38":"train_digits_df = pd.DataFrame.from_dict({ \"predicted\": y_train_predicted, \"actual\": y_train_actual })\nmislabeled_df = train_digits_df.loc[train_digits_df['predicted'] != train_digits_df['actual']]\nprint(mislabeled_df.shape)\nmislabeled_pairs_table = pd.DataFrame(0, index=range(0,10), columns=range(0,10))\nfor index, row in mislabeled_df.iterrows():\n    actual = row['actual']\n    predicted = row['predicted']\n    mislabeled_pairs_table[actual][predicted] += 1\nmislabeled_pairs_table","e6dd39d5":"draw_multiple(df_train.loc[mislabeled_df.index.values, :].head(40))\nprint(\"Samples marked as bad (excluded from training): {}\", bad_sample_ids)","ea08ffc2":"Predict and build a CSV file for submission\n--------","59132e95":"Check mislabeled samples\n---------------------","be423b74":"Build CNN\n---------","aaf989ff":"Normalize and reshape the data\n-------------------------","19832acf":"Drop some of poorly labeled samples\n-----------------------------","6467f450":"Train\n----","2820f90e":"TO TRY:\n-------\n* Exclude bad samples (properly)","a3e4cdf5":"Digit Recognizer\n=============================================\nSteps\n-----\n* Normalize data to improve the convergence speed\n* Reshape data: 1D -> 3D\n* Exclude some of poorly labeled samples\n* Split labeled data into train and val\n* Build image generator to generate more labeled samples from the given samples by allowing slight modifications\n* Build a model\n* Train a model\n* Make a prediction for the test data and save it for submission\n* Make a prediction on the original labeled data and draw the images\n\nSome ideas are taken from this amazing kernel \"Introduction to CNN Keras - Acc 0.997 (top 8%)\" https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6","5eacb402":"Split the labeled samples into into train and validation sets\n----------------------------------------------","0065ceb6":"Build Image Generator\n------------------"}}