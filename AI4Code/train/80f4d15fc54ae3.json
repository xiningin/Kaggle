{"cell_type":{"c017da7b":"code","04397ae0":"code","2bba41ab":"code","460518c6":"code","72eaffb7":"code","2bdd6426":"code","e23606ae":"code","d1564c52":"code","6eb617c9":"code","b894bfb0":"code","fae277a3":"code","93be3b25":"code","6481eff0":"code","9b6cba63":"code","689b2050":"markdown","1fdb7da7":"markdown","91f0ba28":"markdown","e50d2525":"markdown","9d3a8c27":"markdown","86e9c823":"markdown","c65b1bd0":"markdown","7a361997":"markdown","b3594bd2":"markdown","73f0a02c":"markdown"},"source":{"c017da7b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","04397ae0":"from keras.models import Sequential\nfrom keras.layers import Dense,Activation,Flatten, Dropout\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D, ZeroPadding2D\nfrom keras.optimizers import SGD\nfrom keras.utils import np_utils\nimport matplotlib.pyplot as plt","2bba41ab":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsample = pd.read_csv('..\/input\/sample_submission.csv')","460518c6":"y = train.label\nX = train.drop('label', axis=1)","72eaffb7":"X_train = X.values\/255\nX_train = X_train.reshape(-1,28,28,1)     # \u8fd9\u5730\u65b9\u4e00\u5b9a\u8981\u7528\uff08-1\uff0c28\uff0c28\uff0c1\uff09\ny_train = np_utils.to_categorical(y)","2bdd6426":"X_test = test.values \/ 255\nX_test = X_test.reshape(-1, 28, 28, 1)","e23606ae":"def myModel(weights_path = None):\n    model = Sequential()\n    \n    model.add(ZeroPadding2D((1,1), input_shape=(28,28,1)))\n    model.add(Conv2D(64, (3,3),padding='same', activation='relu'))\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Conv2D(64, (3,3),padding='same', activation='relu'))\n    model.add(MaxPooling2D((2,2), strides=(2,2)))\n    \n    model.add(ZeroPadding2D((1,1)))\n    model.add(Conv2D(128, kernel_size=3, activation='relu'))\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Conv2D(128, kernel_size=3, activation='relu'))\n    model.add(MaxPooling2D((2,2), strides=(2,2)))\n    \n    model.add(ZeroPadding2D((1,1)))\n    model.add(Conv2D(256, kernel_size=3, activation='relu'))\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Conv2D(256, kernel_size=3, activation='relu'))\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Conv2D(256, kernel_size=3, activation='relu'))\n    model.add(MaxPooling2D((2,2), strides=(2,2)))\n    \n    model.add(ZeroPadding2D((1,1)))\n    model.add(Conv2D(512, kernel_size=3, activation='relu'))\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Conv2D(512, kernel_size=3, activation='relu'))\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Conv2D(512, kernel_size=3, activation='relu'))\n    model.add(MaxPooling2D((2,2), strides=(2,2)))\n    \n    model.add(Flatten())\n    model.add(Dense(4096, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(4096, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(10, activation='softmax'))\n    \n    return model","d1564c52":"VGG = myModel()\noptimizer = SGD()\nVGG.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])","6eb617c9":"history = VGG.fit(X_train,y_train,batch_size=64, epochs=15, validation_split=0.2,verbose=1)","b894bfb0":"# show the accuracy and loss \nprint(history.history.keys())\n# accuracy\nplt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n\n# loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","fae277a3":"ret = VGG.predict(X_test)","93be3b25":"results = np.argmax(ret,axis = 1)","6481eff0":"df = {'ImageId':sample['ImageId'],\n     'Label':results }\n\nsubmission = pd.DataFrame(df)","9b6cba63":"submission.to_csv('submission.csv', index=False)","689b2050":"### Step5:Train the net","1fdb7da7":"## This is a simple VGG16 with keras","91f0ba28":"Not bad, hah?","e50d2525":"### Step1: import packages","9d3a8c27":"### Step4:Define the VGG net","86e9c823":"As we know, Convolutional Network is very godd for Classification. And VGG16 is impressive.\n\nSo we built this model to classify the MNIST data.\n\n\n## No more words.So let's just start.","c65b1bd0":"### Step7:Submit","7a361997":"### Step2:load the data","b3594bd2":"### Step6:Predict","73f0a02c":"### Step3: Process the data"}}