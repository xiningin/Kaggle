{"cell_type":{"ee23da7d":"code","ae55b8d5":"code","465491e0":"code","b3df532c":"code","d6235e40":"code","17dfcfb2":"code","8d9a4282":"code","1176f76b":"code","9813830a":"code","17ff5c4d":"code","c797586b":"code","0ea4c461":"code","97e59d71":"code","76a5211e":"code","c474923a":"code","cd342834":"code","960e1c78":"code","6082b4d0":"code","2ef68d3a":"code","279c0c3c":"code","8abcb1e9":"code","b2f6ba6e":"code","35af9122":"code","bcddf2aa":"code","b6b69a49":"code","3360d8c1":"code","ddefcfd8":"code","24645fee":"code","2a482fde":"code","e45cb95c":"code","06fd8eed":"code","6f407bfe":"markdown","f00c8b73":"markdown","7b3e952f":"markdown","716e847d":"markdown"},"source":{"ee23da7d":"import matplotlib.pyplot as plt\nimport sklearn\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV\nimport pandas as pd \nfrom pandas.plotting import scatter_matrix\nimport numpy as np\nplt.style.use('bmh')\n%matplotlib inline","ae55b8d5":"# import the data for prediction \ndf = pd.read_csv('..\/input\/abalone-dataset\/abalone.csv')\ndf.head()","465491e0":"df.head()","b3df532c":"# looking into our data, there are no outliers\ndf.info()","d6235e40":"# let's explore sex, it is a categorical variable \ndf['Sex'].value_counts()","17dfcfb2":"# visualizing the features\ndf.hist(bins=50, figsize=(20, 15))\nplt.show()","8d9a4282":"# Find the r value aka standard correlation coefficient \ncorr_matrix = df.corr()\ncorr_matrix['Rings']","1176f76b":"# plot variables against each other to find the relationship \nattributes = ['Length', 'Diameter', 'Height', 'Whole weight', 'Shucked weight', 'Viscera weight', 'Shell weight']\nscatter_matrix(df[attributes], figsize=(15, 12))","9813830a":"# convert text labels to integer labels\nsex_label = LabelEncoder()\ndf['Sex'] = sex_label.fit_transform(df['Sex'])\ndf.head()","17ff5c4d":"df.describe()","c797586b":"# define the features and the labels\n# dropping the sex column due to the lack of correlation \n\nX = df.drop(['Rings', 'Sex'], axis=1)\ny = df['Rings']\n# divide data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=20)","0ea4c461":"X_train.hist(bins=50, figsize=(20, 15))\nplt.show()","97e59d71":"y_train.hist(bins=50)\nplt.show()","76a5211e":"# standardize our data \n# standardization is less affected by outliers\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","c474923a":"sklearn.metrics.SCORERS.keys()","cd342834":"# fine tune hyperparamaters\nknn_grid = [\n    {'n_neighbors': [i+1 for i in range(10)] }, \n]\nknn = KNeighborsRegressor()\nknn_search = GridSearchCV(knn, knn_grid, scoring='neg_mean_squared_error', cv=5,\n                          return_train_score=True, n_jobs=-1)\nknn_search.fit(X_train, y_train)","960e1c78":"knn_search.best_params_","6082b4d0":"result = knn_search.cv_results_\nfor mean_acc, params in zip(result['mean_test_score'], result['params']):\n    print(mean_acc, params)","2ef68d3a":"# try other models\nkernel = ['linear', 'rbf', 'poly', 'sigmoid']\nc = [0.01, 0.1, 1, 10]\ngamma = [0.01, 0.1, 1]\nsvm_grid = {'kernel': kernel, 'C': c, 'gamma' : gamma}","279c0c3c":"svm = SVR()\nsvm_search = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=5, return_train_score=True, n_jobs=-1, n_iter=20, verbose=1)\nsvm_search.fit(X_train, y_train)","8abcb1e9":"svm_search.best_params_","b2f6ba6e":"result = svm_search.cv_results_\nfor mse, params in zip(result['mean_test_score'], result['params']):\n    print(mse, params)","35af9122":"ensemble_grid =  {'n_estimators': [(i+1)*10 for i in range(20)],\n                 'criterion': ['mse', 'mae'],\n                 'bootstrap': [True, False]}\n\nensemble = RandomForestRegressor()\nensemble_search = RandomizedSearchCV(ensemble, ensemble_grid, scoring='neg_mean_squared_error', cv=5, return_train_score=True, n_jobs=-1, n_iter=10, verbose=1)\nensemble_search.fit(X_train, y_train)","bcddf2aa":"ensemble_search.best_params_","b6b69a49":"result = ensemble_search.cv_results_\nfor mse, params in zip(result['mean_test_score'], result['params']):\n    print(mse, params)","3360d8c1":"svm_reg = svm_search.best_estimator_\nsvm_reg.fit(X_train, y_train)","ddefcfd8":"svm_pred = svm_reg.predict(X_test)\nprint(np.sqrt(mean_squared_error(svm_pred, y_test)))","24645fee":"knn_reg = knn_search.best_estimator_\nknn_reg.fit(X_train, y_train)","2a482fde":"knn_pred = knn_reg.predict(X_test)\nprint(np.sqrt(mean_squared_error(knn_pred, y_test)))","e45cb95c":"ensemble_reg = ensemble_search.best_estimator_\nensemble_reg.fit(X_train, y_train)","06fd8eed":"ensemble_pred = ensemble_reg.predict(X_test)\nprint(np.sqrt(mean_squared_error(ensemble_pred, y_test)))","6f407bfe":"Scale our data ","f00c8b73":"Visualizing the dataset","7b3e952f":"Try several models using grid search and evaluate them","716e847d":"Get the data for processing"}}