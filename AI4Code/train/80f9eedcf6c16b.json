{"cell_type":{"eb14befd":"code","37aa1867":"code","a17edeca":"code","004dc45d":"code","6f342700":"code","e8aa6863":"code","177eb5b1":"code","2f7b7edf":"code","934e3b01":"code","519952a6":"code","167208ed":"code","c5190265":"code","b8662a3b":"code","439950de":"code","5493ca46":"code","8c78ccb5":"code","09f15f0d":"code","46dfcc0a":"code","16b2eb1f":"code","3b64a213":"code","f3e02717":"code","6882aa30":"code","cf6faa1e":"code","f2c0dffd":"code","f989b696":"code","6a3d5e95":"code","849cd2de":"code","332d698e":"code","189eb39c":"code","07947d1e":"code","d788aa79":"code","d28527d9":"code","26728d04":"code","efa01249":"code","b036efd7":"code","46cfa3a9":"code","8b187fcc":"code","953801d1":"code","f73ae10e":"code","0ffb683b":"code","ea006ded":"code","1582595a":"code","4c65b8c1":"code","13caf44b":"code","423c0d44":"code","e3ff636d":"code","0dd88255":"code","a734e09a":"code","34dd8086":"code","92f792c0":"code","7859bcb2":"code","b1d89368":"code","e65600c9":"code","5d9f6314":"code","61100a7b":"code","4fadbb90":"code","685af135":"code","e6f85c42":"code","c78ef310":"code","84be8bea":"code","dd653e82":"code","f3307f6e":"code","776958ea":"markdown","495c31eb":"markdown","6335ce29":"markdown","e65b4411":"markdown","1d794064":"markdown","7b57d6bf":"markdown","383ea184":"markdown","e025f063":"markdown","034d979e":"markdown","ada92f19":"markdown","609b674a":"markdown","d8d8ed91":"markdown","69b14b42":"markdown","d0bff134":"markdown","d6c5ce1c":"markdown","5bffbf07":"markdown","435937f8":"markdown","a7fd4b4f":"markdown","215c0a55":"markdown","5de609e3":"markdown","9e99d19f":"markdown","ec423b76":"markdown","9c410e2a":"markdown","826f1c67":"markdown","6cd50dab":"markdown","f6eec2d7":"markdown","14ffd76e":"markdown","ff286f11":"markdown","f859daf5":"markdown"},"source":{"eb14befd":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom statistics import mode\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler","37aa1867":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a17edeca":"data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","004dc45d":"data","6f342700":"data.drop_duplicates(inplace=True)","e8aa6863":"data_missing_1 = data.copy()","177eb5b1":"data_missing_1.isnull().mean()","2f7b7edf":"print(data_missing_1.isnull().mean().to_string())","934e3b01":"data_missing_1.isnull().mean().sort_values(ascending=False).head(20)","519952a6":"pd.DataFrame(data_missing_1.isnull().mean().sort_values(ascending=False).head(5)).T.columns","167208ed":"data_missing_1.drop(['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu'], axis=1, inplace=True)","c5190265":"data_missing_1.isnull().mean().sort_values(ascending=False).head(15)","b8662a3b":"data_missing_1.dropna(axis=0, inplace=True)","439950de":"data_missing_1.isnull().mean()","5493ca46":"data_missing_2 = data.copy()","8c78ccb5":"data_missing_2.isnull().mean().sort_values(ascending=False).head(20)","09f15f0d":"data_missing_2.drop(['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu'], axis=1, inplace=True)","46dfcc0a":"pd.DataFrame(data_missing_2.isnull().mean().sort_values(ascending=False)).head(20).T.columns","16b2eb1f":"data_missing_2[['LotFrontage', 'GarageType', 'GarageCond', 'GarageYrBlt',\n       'GarageFinish', 'GarageQual', 'BsmtFinType2', 'BsmtExposure',\n       'BsmtFinType1', 'BsmtCond', 'BsmtQual', 'MasVnrArea', 'MasVnrType',\n       'Electrical', 'PavedDrive', 'WoodDeckSF', 'LowQualFinSF', 'GrLivArea',\n       'BsmtFullBath', 'BsmtHalfBath']]","3b64a213":"column_mode = ['GarageType', 'GarageCond', 'GarageYrBlt',\n       'GarageFinish', 'GarageQual', 'BsmtFinType2', 'BsmtExposure',\n       'BsmtFinType1', 'BsmtCond', 'BsmtQual', 'MasVnrArea', 'MasVnrType',\n       'Electrical', 'PavedDrive', 'WoodDeckSF', 'LowQualFinSF', 'GrLivArea',\n       'BsmtFullBath', 'BsmtHalfBath']","f3e02717":"for i in column_mode:\n    data_missing_2[i] = data_missing_2[i].fillna(mode(data_missing_2[i]))","6882aa30":"data_missing_2['BsmtFinType2'].mode()","cf6faa1e":"pd.DataFrame(data_missing_2.corr()['LotFrontage'].abs()).sort_values('LotFrontage', ascending=False)","f2c0dffd":"data_missing_3 = data.copy()","f989b696":"data_missing_3.fillna('no_info', inplace=True)","6a3d5e95":"data_missing_3.isnull().mean()","849cd2de":"data_missing_3.groupby('BsmtQual')['SalePrice'].agg(['count', 'mean', 'median'])","332d698e":"data.SalePrice.hist(bins=45)","189eb39c":"data_quantile = data.copy()","07947d1e":"IQR = data_quantile.SalePrice.quantile(0.75) - data_quantile.SalePrice.quantile(0.25)","d788aa79":"Lower = data_quantile.SalePrice.quantile(0.25) - (IQR * 1.5)\nUpper = data_quantile.SalePrice.quantile(0.75) + (IQR * 1.5)","d28527d9":"data_quantile = data_quantile[data_quantile.SalePrice.between(Lower, Upper)]","26728d04":"data_quantile.SalePrice.hist(bins=45)","efa01249":"data_std = data.copy()","b036efd7":"std_3 = data_std.SalePrice.std() * 3","46cfa3a9":"mean_sp = data_std.SalePrice.mean()","8b187fcc":"data_std = data_std[data_std.SalePrice.between(mean_sp - std_3, mean_sp + std_3)]","953801d1":"data_std.SalePrice.hist(bins=45)","f73ae10e":"data_fix = data.copy()","0ffb683b":"data_fix.SalePrice.hist(bins=65)","ea006ded":"data_fix = data_fix[data_fix['SalePrice'] <= 500000]","1582595a":"data_fix.SalePrice.hist(bins=65)","4c65b8c1":"data_type = pd.DataFrame(data_missing_2.dtypes)","13caf44b":"data_type[data_type[0] == 'object'].T.columns","423c0d44":"data_missing_2[['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\n       'PavedDrive', 'SaleType', 'SaleCondition']]","e3ff636d":"col_encoder = ['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\n       'PavedDrive', 'SaleType', 'SaleCondition']","0dd88255":"labelencoder = LabelEncoder()\nfor i in col_encoder:\n    data_missing_2[i] = labelencoder.fit_transform(data_missing_2[i])","a734e09a":"data_missing_2.head()","34dd8086":"pd.DataFrame(data_missing_1.dtypes)","92f792c0":"pd.DataFrame(data_missing_1.dtypes)[pd.DataFrame(data_missing_1.dtypes)[0] == 'object'].T.columns","7859bcb2":"data_missing_1 = pd.get_dummies(data_missing_1)","b1d89368":"pd.DataFrame(data_missing_1.dtypes)[pd.DataFrame(data_missing_1.dtypes)[0] == 'object'].T.columns","e65600c9":"data_missing_1.nunique().sort_values(ascending=False).head(20)","5d9f6314":"data_missing_1[['LotArea', 'GrLivArea', 'BsmtUnfSF', '1stFlrSF']]","61100a7b":"ss = StandardScaler().fit(data_missing_1[['LotArea', 'GrLivArea', 'BsmtUnfSF', '1stFlrSF']])\ndata_missing_1[['LotArea', 'GrLivArea', 'BsmtUnfSF', '1stFlrSF']] = ss.transform(data_missing_1[['LotArea', 'GrLivArea', 'BsmtUnfSF', '1stFlrSF']])","4fadbb90":"data_missing_1[['LotArea', 'GrLivArea', 'BsmtUnfSF', '1stFlrSF']]","685af135":"data_missing_1.LotArea.std()","e6f85c42":"data_missing_2.nunique().sort_values(ascending=False).head(20)","c78ef310":"data_missing_2[['LotArea', 'GrLivArea', 'BsmtUnfSF', '1stFlrSF']]","84be8bea":"MinMax = MinMaxScaler().fit(data_missing_2[['LotArea', 'GrLivArea', 'BsmtUnfSF', '1stFlrSF']])\ndata_missing_2[['LotArea', 'GrLivArea', 'BsmtUnfSF', '1stFlrSF']] = MinMax.transform(data_missing_2[['LotArea', 'GrLivArea', 'BsmtUnfSF', '1stFlrSF']])","dd653e82":"data_missing_2[['LotArea', 'GrLivArea', 'BsmtUnfSF', '1stFlrSF']]","f3307f6e":"data_missing_2[['LotArea', 'GrLivArea', 'BsmtUnfSF', '1stFlrSF']].describe().T[['min', 'max']]","776958ea":"**Sort in descending order**","495c31eb":"**MIN and MAX values == 0 and 1**","6335ce29":"# Outliers in the target variable","e65b4411":"**Now you can see all the signs. Mean() shows the percentage of missing values, so it's more convenient**","1d794064":"**Deleting columns and rows with omissions**","7b57d6bf":"**We remove signs where more than 50% of the missing values**","383ea184":"**Replace the missing values with the mode and median of the features**","e025f063":"**We look at which signs are correlated the most. Building a model, the target variable -  Lot Frontpage.**  \n  \n**<li>train - data with the LotFrontage value;**\n**<li>test - data with missing LotFrontage values.**","034d979e":"**If there are more than 50% missing values in the attribute, then we delete the attribute completely.**","ada92f19":"# Outliers  - 3 standard deviations","609b674a":"**Processes the data so that the standard deviation == 1**","d8d8ed91":"**Apply encoding to the data where there are no missing values!**","69b14b42":"**In all categorical variables and variables with 0, we replace the missing values to the mode().**","d0bff134":"# Missing values #1","d6c5ce1c":"**Encoding is applied to categorical variables, scaling is applied to continuous variables**","5bffbf07":"**We remove outliers beyond the 25 and 75 quantile * 1.5**","435937f8":"# Outliers  - interquartile range","a7fd4b4f":"# Missing values #2","215c0a55":"# Missing values #3","5de609e3":"# Encoding - LabelEncoder","9e99d19f":"## Scaling - MinMax","ec423b76":"**Replacing Nan with the value 'no_info'**","9c410e2a":"# Outliers - specific value","826f1c67":"**Not all signs are shown**","6cd50dab":"**This is necessary for such an analysis of variables**","f6eec2d7":"# Scaling - StandardScaler","14ffd76e":"**We output the remaining signs and delete the lines with omissions**","ff286f11":"**Transform all signs with the type 'object' into values 1 \/ 0**","f859daf5":"# Encoding - get_dummies"}}