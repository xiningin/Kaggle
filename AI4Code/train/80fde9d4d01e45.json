{"cell_type":{"533f1498":"code","d47986ca":"code","02f15633":"code","d7164e31":"code","ded9cbd0":"code","02d13b20":"code","88caf0aa":"code","be20f099":"code","01cb6694":"code","c0ef70c7":"code","b7f99f16":"code","cf0b7737":"code","22ce82c2":"code","29443f0d":"code","19fd9848":"code","8a98ff06":"code","0c738c66":"code","c2f83863":"code","c973d9be":"code","dfd7d85b":"code","d54d0eb4":"code","6d50e3bc":"code","ec76650b":"code","d1c073eb":"code","d6fc56da":"code","4b4246e3":"code","0b80ad2f":"code","039dc38c":"code","2d5d0224":"code","36a48768":"code","97281687":"markdown","574b0c51":"markdown","02894540":"markdown","88266424":"markdown","879438ae":"markdown"},"source":{"533f1498":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set_palette('husl')\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n","d47986ca":"gr = pd.read_csv('..\/input\/greedata\/newd.csv')\nx = gr.iloc[:,0:12].values \ny = gr.label.values","02f15633":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense","d7164e31":"from sklearn.preprocessing import StandardScaler, LabelBinarizer\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import recall_score","ded9cbd0":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 0 ,stratify=y)","02d13b20":"x_train = StandardScaler().fit_transform(x_train)\n# y_train = LabelBinarizer().fit_transform(y_train)\n\nx_test = StandardScaler().fit_transform(x_test)\n# y_test = LabelBinarizer().fit_transform(y_test)\n","88caf0aa":"y_train = keras.utils.to_categorical(y_train, num_classes=5)\ny_test = keras.utils.to_categorical(y_test, num_classes=5)","be20f099":"from keras.optimizers import SGD","01cb6694":"sgd = SGD(lr=0.02, decay=1e-6, momentum=0.9, nesterov=True)","c0ef70c7":"shallow_model = Sequential()\nshallow_model.add(Dense( 12, input_dim=12, activation = 'relu'))\nshallow_model.add(Dense( units = 35, activation= 'relu'))\nshallow_model.add(Dense( units = 5, activation= 'softmax'))\n# shallow_model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\nshallow_model.compile(loss='categorical_crossentropy',optimizer=sgd, metrics=['accuracy'])","b7f99f16":"shallow_history = shallow_model.fit(x_train, y_train, epochs = 50, batch_size=10, validation_data = (x_test, y_test))","cf0b7737":"print(max(shallow_history.history['val_accuracy']))","22ce82c2":"plt.plot(shallow_history.history['accuracy'])\nplt.plot(shallow_history.history['val_accuracy'])\nplt.title(\"Accuracy\")\nplt.legend(['train', 'test'])\nplt.show()\n","29443f0d":"plt.plot(shallow_history.history['loss'])\nplt.plot(shallow_history.history['val_loss'])\nplt.plot('Loss')\nplt.legend(['Train','Test'])\nplt.show()\n","19fd9848":"import itertools\nimport seaborn as sns\n","8a98ff06":"def printreport(exp, pred):\n    print(classification_report(exp, pred))\n    print(\"recall score\")\n    print(recall_score(exp,pred,average = 'macro'))","0c738c66":"def plot_confuse(model, x_val, y_val):\n    predictions = model.predict_classes(x_val)\n    truelabel = y_val.argmax(axis=-1)   \n    s = accuracy_score(truelabel, predictions)\n    print('accury')\n    print(s)\n    printreport(truelabel, predictions)\n    cm = confusion_matrix(y_true=truelabel, y_pred=predictions)\n    f, ax = plt.subplots(figsize =(5,5))\n    sns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\n    plt.xlabel(\"y_pred\")\n    plt.ylabel(\"y_true\")\n    plt.show()","c2f83863":"plot_confuse(shallow_model, x_test, y_test)","c973d9be":"from keras.models import Sequential\nfrom keras.layers import Dense, Activation , Dropout\nfrom tensorflow.keras import regularizers\n\nmodel = Sequential()\nmodel.add(Dense(input_dim=x.shape[1], output_dim=25, activation='relu',activity_regularizer=regularizers.l2(10e-5)))\n#model.add(Dropout(0.2))\nmodel.add(Dense(input_dim=25, output_dim=15, activation='relu'))\nmodel.add(Dense(input_dim=15, output_dim=5,activation='softmax'))\nmodel.compile(optimizer=sgd, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"]) #sgd,adam\n#model.compile(loss='sparse_categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])\nmodel.summary()","dfd7d85b":"# X_train,X_test, y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=0,stratify=y)\n\n# X_train = StandardScaler().fit_transform(X_train)\n# # y_train = LabelBinarizer().fit_transform(y_train)\n\n# X_test = StandardScaler().fit_transform(X_test)\n# # y_test = LabelBinarizer().fit_transform(y_test)\n\n# y_train = keras.utils.to_categorical(y_train, num_classes=5)\n# y_test = keras.utils.to_categorical(y_test, num_classes=5)\n\nhistory = model.fit(x_train, y_train, epochs=50,batch_size=10, validation_data = (x_test, y_test))\ny_pred = model.predict(x_test)\n\n","d54d0eb4":"print(max(shallow_history.history['val_accuracy']))","6d50e3bc":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title(\"Accuracy\")\nplt.legend(['train', 'test'])\nplt.show()","ec76650b":"plt.plot(shallow_history.history['loss'])\nplt.plot(shallow_history.history['val_loss'])\nplt.plot('Loss')\nplt.legend(['Train','Test'])\nplt.show()\n","d1c073eb":"plot_confuse(model, x_test, y_test)","d6fc56da":"deep_model = Sequential()\ndeep_model.add(Dense( 12, input_dim=12, activation = 'relu'))\ndeep_model.add(Dense( units = 25, activation= 'relu'))\ndeep_model.add(Dense( units = 20, activation= 'relu'))\ndeep_model.add(Dense( units = 15, activation= 'relu'))\ndeep_model.add(Dense( units = 10, activation= 'relu'))\ndeep_model.add(Dense( units = 5, activation= 'softmax'))\ndeep_model.compile(loss = 'categorical_crossentropy', optimizer = sgd, metrics = ['accuracy'])","4b4246e3":"deep_history = deep_model.fit(x_train, y_train, epochs = 50, batch_size=10, validation_data = (x_test, y_test))","0b80ad2f":"print(max(shallow_history.history['val_accuracy']))","039dc38c":"plt.plot(deep_history.history['accuracy'])\nplt.plot(deep_history.history['val_accuracy'])\nplt.title(\"Accuracy\")\nplt.legend(['train', 'test'])\nplt.show()","2d5d0224":"plt.plot(deep_history.history['loss'])\nplt.plot(deep_history.history['val_loss'])\nplt.plot('Loss')\nplt.legend(['Train','Test'])\nplt.show()\n","36a48768":"plot_confuse(deep_model, x_test, y_test)","97281687":"# KERAS","574b0c51":"# Quota Function","02894540":"# Multi layer learning(Six layer)","88266424":"# Shallow Deep learning(Three layer)","879438ae":"# Four layer "}}