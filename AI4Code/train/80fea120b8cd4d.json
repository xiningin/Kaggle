{"cell_type":{"ac747f80":"code","3b8a91c8":"code","e81e7537":"code","1929b310":"code","91975bcb":"code","c4411788":"code","9e485451":"code","5e20f997":"code","5c8421a9":"code","c768a54e":"code","58cc51c9":"code","7dec6bc6":"code","67e8e38a":"code","e3d06eb9":"code","95234bbe":"code","70c687b2":"code","c2030998":"code","0c99e286":"code","51c56196":"code","2f85b7f4":"code","6d1a9ce9":"code","735b858b":"code","0dfd2b76":"code","563c49a7":"code","fb02a628":"code","5007d99a":"code","e47cd33e":"code","2e614560":"code","80ad3d39":"code","678c920f":"code","5da665c4":"code","d87781e6":"code","2d0d245d":"code","61329c96":"code","606be24b":"code","015a515e":"code","619b5ca2":"code","3dc06299":"code","fa0e6a8a":"code","9d2c6428":"code","e95e13d7":"code","e2139d7c":"code","cf93a779":"code","ebc5d4ed":"code","163cab43":"code","f8635d38":"code","8514d28b":"code","e734ee70":"code","8afdb050":"code","fe00d3d0":"code","a45a7b22":"code","bfa5c547":"code","bba81503":"code","077d4a7a":"markdown","9985afe6":"markdown","a62aa405":"markdown","0589f877":"markdown","bb5e0e1d":"markdown","78fd5302":"markdown","8fc4f52b":"markdown","a9d40f18":"markdown","e13d1e63":"markdown","ef6eb9a9":"markdown","b93af041":"markdown","200fba7e":"markdown","d2e07b46":"markdown","ee4a4d7e":"markdown","54d90d3f":"markdown","e08f5823":"markdown","1cde2906":"markdown","fca936e2":"markdown","1052e727":"markdown"},"source":{"ac747f80":"\nimport matplotlib.pyplot as plt\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB","3b8a91c8":"test_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntrain_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")","e81e7537":"test_df.head()","1929b310":"train_df.head()","91975bcb":"train_df.info()","c4411788":"test_df.info()","9e485451":"train_df.describe().T","5e20f997":"survival_count=train_df['Survived'].value_counts()\nsurvival_count","5c8421a9":"pie, ax = plt.subplots(figsize=[10,6])\nlabels = survival_count.keys()\nplt.pie(x=survival_count, autopct=\"%.1f%%\", explode=[0.05]*2, labels=labels, pctdistance=0.5)\nplt.title(\"Survived Passengers\", fontsize=14);","c768a54e":"missing_values = train_df.isnull().sum().sort_values(ascending=False)\nmissing_values","58cc51c9":"train_df.columns.tolist()","7dec6bc6":"fig, axes = plt.subplots(nrows=1, ncols=2,figsize=(12, 5))\nwomen = train_df[train_df['Sex']=='female']\nmen = train_df[train_df['Sex']=='male']\nsns.set_palette(\"pastel\")\nax1 = sns.distplot(women[women['Survived']==1].Age.dropna(), bins=18, label = 'Survived', ax = axes[0], kde =False)\nax2 = sns.distplot(women[women['Survived']==0].Age.dropna(), bins=40, label = 'Not_Survived', ax = axes[0], kde =False)\nax1.legend()\nax1.set_title('Female')\n\nax2 = sns.distplot(men[men['Survived']==1].Age.dropna(), bins=18, label = 'Survived', ax = axes[1], kde = False)\nax2 = sns.distplot(men[men['Survived']==0].Age.dropna(), bins=40, label = 'Not_Survived', ax = axes[1], kde = False)\n\nax2.legend()\n\nax2.set_title('Male')","67e8e38a":"FacetGrid = sns.FacetGrid(train_df, row='Embarked', height=4.5, aspect=1.6)\nFacetGrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette=None,  order=None, hue_order=None )\nFacetGrid.add_legend()","e3d06eb9":"sns.barplot(x='Pclass', y='Survived', data=train_df)","95234bbe":"facetgrid = sns.FacetGrid(train_df, col='Survived', row='Pclass', height=3, aspect=1.6)\nfacetgrid.map(plt.hist, 'Age', alpha=1, bins=20)\nfacetgrid.add_legend();","70c687b2":"data = [train_df, test_df]\nfor dataset in data:\n    dataset['relatives'] = dataset['SibSp'] + dataset['Parch']\n    dataset.loc[dataset['relatives'] > 0, 'not_alone'] = 0\n    dataset.loc[dataset['relatives'] == 0, 'not_alone'] = 1\n    dataset['not_alone'] = dataset['not_alone'].astype(int)\ntrain_df['not_alone'].value_counts()","c2030998":"data[:2]","0c99e286":"axes = sns.factorplot('relatives','Survived', \n                      data=train_df, aspect = 2.5, apha=1)","51c56196":"fig, axs = plt.subplots(figsize=[10,6], ncols=2)\nsns.boxplot(x='Survived', y= 'Fare', data= train_df, ax=axs[0])\nsns.boxplot(x='Survived', y= 'Fare', hue='Sex', data= train_df, ax=axs[1])","2f85b7f4":"train_df = train_df.drop(['PassengerId'], axis=1)","6d1a9ce9":"train_df.head()","735b858b":"import re\ndeck = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"U\": 8}\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['Cabin'] = dataset['Cabin'].fillna(\"U0\")\n    dataset['Deck'] = dataset['Cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x).group())\n    dataset['Deck'] = dataset['Deck'].map(deck)\n    dataset['Deck'] = dataset['Deck'].fillna(0)\n    dataset['Deck'] = dataset['Deck'].astype(int)\n\n    \ntrain_df = train_df.drop(['Cabin'], axis=1)\ntest_df = test_df.drop(['Cabin'], axis=1)","0dfd2b76":"train_df","563c49a7":"data = [train_df, test_df]\n\nfor dataset in data:\n    mean = train_df[\"Age\"].mean()\n    std = test_df[\"Age\"].std()\n    is_null = dataset[\"Age\"].isnull().sum()\n    # compute random numbers between the mean, std and is_null\n    rand_age = np.random.randint(mean - std, mean + std, size = is_null)\n    # fill NaN values in Age column with random values generated\n    age = dataset[\"Age\"].copy()\n    age[np.isnan(age)] = rand_age\n    dataset[\"Age\"] = age\n    dataset[\"Age\"] = train_df[\"Age\"].astype(int)\n","fb02a628":"train_df[\"Age\"].isnull().sum()","5007d99a":"train_df","e47cd33e":"train_df['Embarked'].describe()","2e614560":"common_value = 'S'\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].fillna(common_value)","80ad3d39":"train_df","678c920f":"missing_values = train_df.isnull().sum().sort_values(ascending=False)\nmissing_values","5da665c4":"genders = {\"male\": 0, \"female\": 1}\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['Sex'] = dataset['Sex'].map(genders)","d87781e6":"train_df = train_df.drop(['Ticket','Name'], axis=1)\ntest_df = test_df.drop(['Ticket','Name'], axis=1)","2d0d245d":"train_df","61329c96":"ports = {\"S\": 0, \"C\": 1, \"Q\": 2}\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].map(ports)","606be24b":"train_df","015a515e":"data = [train_df, test_df]\nfor dataset in data:\n    dataset['Age'] = dataset['Age'].astype(int)\n    dataset.loc[ dataset['Age'] <= 11, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 11) & (dataset['Age'] <= 18), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 18) & (dataset['Age'] <= 22), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 22) & (dataset['Age'] <= 27), 'Age'] = 3\n    dataset.loc[(dataset['Age'] > 27) & (dataset['Age'] <= 33), 'Age'] = 4\n    dataset.loc[(dataset['Age'] > 33) & (dataset['Age'] <= 40), 'Age'] = 5\n    dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 66), 'Age'] = 6\n    dataset.loc[ dataset['Age'] > 66, 'Age'] = 6\n\n","619b5ca2":"train_df['Age'].value_counts()","3dc06299":"train_df","fa0e6a8a":"data = [train_df, test_df]\n\nfor dataset in data:\n    dataset['Fare'] = dataset['Fare'].fillna(0)\n    dataset['Fare'] = dataset['Fare'].astype(int)","9d2c6428":"train_df.head(10)","e95e13d7":"data = [train_df, test_df]\n\nfor dataset in data:\n    dataset.loc[ dataset['Fare'] <= 7, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7) & (dataset['Fare'] <= 14), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[(dataset['Fare'] > 31) & (dataset['Fare'] <= 99), 'Fare']   = 3\n    dataset.loc[(dataset['Fare'] > 99) & (dataset['Fare'] <= 250), 'Fare']   = 4\n    dataset.loc[ dataset['Fare'] > 250, 'Fare'] = 5\n","e2139d7c":"train_df.head(10)","cf93a779":"test_df","ebc5d4ed":"X_train = train_df.drop('Survived', axis=1)\nY_train = train_df['Survived']\nX_test = test_df.drop('PassengerId',axis=1)\n","163cab43":"sgd = linear_model.SGDClassifier(max_iter=5, tol=None)\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\n\nsgd.score(X_train, Y_train)\n\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\nacc_sgd","f8635d38":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\n\nY_prediction = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","8514d28b":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\n\nY_pred = logreg.predict(X_test)\n\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","e734ee70":"knn = KNeighborsClassifier(n_neighbors = 3) \nknn.fit(X_train, Y_train)  \nY_pred = knn.predict(X_test)  \nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","8afdb050":"gaussian = GaussianNB() \ngaussian.fit(X_train, Y_train) \nY_pred = gaussian.predict(X_test)  \nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nacc_gaussian","fe00d3d0":"perceptron = Perceptron(max_iter=10)\nperceptron.fit(X_train, Y_train)\n\nY_pred = perceptron.predict(X_test)\n\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\nacc_perceptron","a45a7b22":"linear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\n\nY_pred = linear_svc.predict(X_test)\n\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\nacc_linear_svc","bfa5c547":"decision_tree = DecisionTreeClassifier() \ndecision_tree.fit(X_train, Y_train) \nY_pred = decision_tree.predict(X_test)  \nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","bba81503":"results = pd.DataFrame({\n    'Score': [acc_linear_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_decision_tree],\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', \n              'Decision Tree']})\nresult_df = results.sort_values(by='Score', ascending=False)\nresult_df = result_df.set_index('Score')\nresult_df","077d4a7a":"A cabin number looks like \u2018C123\u2019 and the letter refers to the deck. \nwe\u2019re going to extract these and create a new feature, that contains a persons deck. Afterwords we will convert the feature into a numeric variable. The missing values will be converted to zero.","9985afe6":"Women on port Q and on port S have a higher chance of survival. The inverse is true, if they are at port C. Men have a high survival probability if they are on port C, but a low probability if they are on port Q or S.","a62aa405":"K Nearest Neighbor:","0589f877":"Age features missing values: Creating an array that contains random numbers, which are computed based on the mean age value in regards to the standard deviation and is_null.","bb5e0e1d":"For the Embarked feature, as it is a categorical variable, we are going to fill the missing values with the most common one.","78fd5302":"a high probabilty of survival with 1 to 3 realitves, but a lower one if you had less than 1 or more than 3 (except for some cases with 6 relatives).","8fc4f52b":"Logistic Regression:","a9d40f18":"Random Forest:","e13d1e63":" men have a high probability of survival when they are between 18 and 30 years old, which is also a little bit true for women but not fully. For women the survival chances are higher between 14 and 40.\nFor men the probability of survival is very low between the age of 5 and 18, but that isn\u2019t true for women. Another thing to note is that infants also have a little bit higher probability of survival.","ef6eb9a9":"Perceptron:","b93af041":"Decision Tree","200fba7e":"Categorize Fare Feature","d2e07b46":"Linear Support Vector Machine:","ee4a4d7e":"survival:    Survival \nPassengerId: Unique Id of a passenger. \npclass:    Ticket class     \nsex:    Sex     \nAge:    Age in years     \nsibsp:    # of siblings \/ spouses aboard the Titanic     \nparch:    # of parents \/ children aboard the Titanic     \nticket:    Ticket number     \nfare:    Passenger fare     \ncabin:    Cabin number     \nembarked:    Port of Embarkation","54d90d3f":"Stochastic Gradient Descent (SGD):","e08f5823":"Pclass is contributing to a persons chance of survival, especially if this person is in class 1. We will create another pclass plot below.","1cde2906":"Gaussian Naive Bayes:","fca936e2":"Now we have no null values. (cavin will be dropped)","1052e727":"Categorize Age Features"}}