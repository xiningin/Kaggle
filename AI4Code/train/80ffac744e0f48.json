{"cell_type":{"82b6b2f9":"code","ed3d3966":"code","492a0398":"code","6d25e6ca":"code","380544fd":"code","cce6dec3":"code","ab622dd1":"code","c57a68f0":"code","90313e71":"code","8f4bf817":"code","2acc3c8e":"code","cc9c45ae":"markdown","4a87b82a":"markdown","db60bc91":"markdown","03e09bef":"markdown","f281c6a8":"markdown","6f33d1fe":"markdown"},"source":{"82b6b2f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ed3d3966":"import os\nimport json\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors","492a0398":"data_dir = '\/kaggle\/input\/abstraction-and-reasoning-challenge\/'\ntrain_dir = data_dir + 'training\/'\nevaluation_dir = data_dir + 'evaluation\/'\ntest_dir = data_dir + 'test\/'","6d25e6ca":"training_tasks = sorted(os.listdir(train_dir))\nevaluation_tasks = sorted(os.listdir(evaluation_dir))\ntest_tasks = sorted(os.listdir(test_dir))","380544fd":"train = []\nfor i in range(len(training_tasks)):\n    task_file = train_dir + training_tasks[i]\n    \n    with open(task_file, 'r') as f:\n        task = json.load(f)\n        train.append(task)","cce6dec3":"evaluation = []\nfor i in range(len(evaluation_tasks)):\n    task_file = evaluation_dir + evaluation_tasks[i]\n    \n    with open(task_file, 'r') as f:\n        task = json.load(f)\n        evaluation.append(task)","ab622dd1":"test = []\nfor i in range(len(test_tasks)):\n    task_file = test_dir + test_tasks[i]\n    \n    with open(task_file, 'r') as f:\n        task = json.load(f)\n        test.append(task)","c57a68f0":"print('Our dataset has {} training examples.'.format(len(train)))\nprint('Our dataset has {} evaluation examples.'.format(len(evaluation)))\nprint('Our dataset has {} test examples.'.format(len(test)))","90313e71":"train_count = 0\nfor i in range(len(train)):\n    train_count += len(train[i]['train'])\nprint('Our training dataset has {} training examples.'.format(train_count))","8f4bf817":"def plot_task(task):\n    \"\"\"\n    Plots the first train and test pairs of a specified task,\n    using same color scheme as the ARC app\n    \"\"\"\n    cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n    norm = colors.Normalize(vmin=0, vmax=9)\n    fig, axs = plt.subplots(1, 6, figsize=(10,10))\n    axs[0].imshow(task['train'][0]['input'], cmap=cmap, norm=norm)\n    axs[0].axis('off')\n    axs[0].set_title('Train Input')\n    axs[1].imshow(task['train'][0]['output'], cmap=cmap, norm=norm)\n    axs[1].axis('off')\n    axs[1].set_title('Train Output')\n    axs[5].imshow(task['test'][0]['input'], cmap=cmap, norm=norm)\n    axs[5].axis('off')\n    axs[5].set_title('Test Input')\n    axs[4].imshow(task['test'][0]['output'], cmap=cmap, norm=norm)\n    axs[4].axis('off')\n    axs[4].set_title('Test Output')\n    axs[2].imshow(task['train'][1]['input'], cmap=cmap, norm=norm)\n    axs[2].axis('off')\n    axs[2].set_title('Train Input')\n    axs[3].imshow(task['train'][1]['output'], cmap=cmap, norm=norm)\n    axs[3].axis('off')\n    axs[3].set_title('Train Output')\n    plt.tight_layout()\n    plt.show()","2acc3c8e":"plot_task(train[10])","cc9c45ae":"### Please upvote if you found this code useful!","4a87b82a":"## Kaggle Boilerplate code","db60bc91":"## Import libraries","03e09bef":"### Load the Data","f281c6a8":"# Introduction and EDA for Abstraction and Reasoning Challenge 2020","6f33d1fe":"## Written by Sergei Issaev"}}