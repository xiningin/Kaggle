{"cell_type":{"86e12edc":"code","df445e19":"code","a923aa72":"code","3463ec2a":"code","5297cdd1":"code","79e1dafc":"code","ea720876":"code","ad717018":"code","7c10f945":"code","55cb7174":"code","186e174d":"code","ad5c5c8a":"code","4fa159e0":"code","30827a1a":"code","ee190ff5":"code","3cd0faaf":"code","2cc5d387":"code","03516ac1":"code","51c44cfd":"code","909da663":"code","b2c7dd10":"code","da24253e":"code","a066ea8b":"code","8dec3bac":"code","045f7623":"code","bd56bcaa":"code","40f325c3":"code","1d8ecd70":"code","236ce01f":"code","eedbc2f9":"code","7e30c7dc":"code","45cef766":"code","13a267e6":"code","596efd9a":"code","c4df53a6":"code","1106215d":"code","bd97ed1d":"code","c7c239ab":"code","8051ff8d":"code","92bab71f":"code","b7072444":"code","b130ae6c":"code","fca36d9e":"code","be0ed060":"code","3b5b971f":"code","272aaa1f":"markdown","add2371a":"markdown","2c321e32":"markdown","ac6cfc9a":"markdown","361054cd":"markdown","77f4ad82":"markdown","d035cd40":"markdown","0eb0ec34":"markdown","0f1a29c6":"markdown","32297e73":"markdown","581a574a":"markdown","0b777994":"markdown","ff779c49":"markdown","c8b08738":"markdown","974c9645":"markdown","3a60fafc":"markdown","3d5dc68a":"markdown","4308093a":"markdown"},"source":{"86e12edc":"!pip3 install pyspark","df445e19":"import pyspark\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import functions as f\nfrom geopy.geocoders import Nominatim\nfrom pyspark.sql.window import Window\nimport pandas as pd\nimport missingno\nimport copy\nimport re\n\nfrom nltk.corpus import stopwords\nimport nltk","a923aa72":"INPUTFOLDER = \"\/kaggle\/input\/competitive-data-science-predict-future-sales\/\"\nspark = SparkSession.builder.config(\"spark.driver.memory\", \"15g\").getOrCreate()\nread_spark = lambda p : spark.read.csv(f'{INPUTFOLDER}{p}.csv', inferSchema=True, header=True)","3463ec2a":"hardcode_replacer = {'360, \u0430\u043d', '\u0441\"\", \u0438\u0433', ' (7,5 \u0433', '\u044f\"\", \u0430\u0440', '\u0438\"\", \u041a\u0440', 'PS3, \u0440\u0443', '\u0420\u0438\u0434, \u0422\u043e', '8\"\", \u0441\u0435', '\u043c\"\", \u0430\u0440', '\u0430\"\", De', '[PC, \u0426\u0438', '\u0432\"\", \u0430\u0440', 'k)\", \u0430\u0440', '\u043c\"\", \u0438\u044e', '\u0430\"\", \u0430\u0440', 'PS4, \u0430\u043d', '\"\" , \u0430\u0440', '\u0441\"\",\u041a\u0440\u0438', '\u0435\u043d\u044c, \u0440\u043e', '\u0430\u043b\u043b, \u0414\u044d', '\u0442\u0435\u0440, \u0414\u0436', '\u0438\u0436\u0443, \u043d\u0438', 'MP3, \u0413\u043e', '\u0435\u043d\u0438, 2 ', '\"\"9,8\"\"', '\u0438\"\", \u043a\u0440', ' PC, \u0426\u0438', '[PC, \u0440\u0443', '\u0430\"\", \u043c\u0430', '\u0438\"\", 3 ', '\u0443\u0438\u043d, \u0425\u043e', '\u0448\u0442., \u0440\u043e', 'm\"\", \u0430\u0440', '\u0432\u043e\u043c, \u0440\u0430', '\u0439\"\", 9*', '\u0430\u0443\u043a, \u041d\u043e', '\u0439\"\", \u0410.', 'MP3, \u0418\u0414', '(11,5 \u0433', 'e)\",\u0430\u0440\u0442', '\"\u041d\u0443, \u043f\u043e', 'y)\", \u0430\u0440', '\u0438\"\", \u0430\u0440', '\u0421\"\", N ', '- 4, 5 ', '\u041a\u0418), 25', '\u044f\"\", \u041c\u0430', '\u0440\u0442\u0441, \u043c\u044f', ')\"\", \u0430\u0440', '\u0438\u0437\u0434, \u0411\u0430', '\u0441\u043a\u0438, \u0411\u0430', '\u0433\"\", \u0430\u0440', '8\"\", \"\"', '\u043e\u0440\u0434, \u0413\u0430', '\u0430\u0445\", 7 ', ' 11,5 \u0433', '\u0438\"\", \u0436\u0435', '\u0438\"\", \u0447\u0435', '\u0437\u043a\u0438, \u0431\u0435','een, Re', '\u0430\u0445\", 7 ', 'PS4, \u0440\u0443', '\u043e\u0440\u0430, \u041b\u043e', '[PC, Je', '\u0442\u043a\u0430, 3 ', '\u041d.\u042e, \u0411\u0430', '\u043a\u0438\u043d, \u0424.', 'old, Gr', '9\u0441\u043c, \u0441\u0435', 'ack, Re', '\u043e\u0432\u0430, \u041b\u043e', '\u0439\u0441\u0435, \u0430\u0440', '\u043d\u0442\u043e, \u041b\u043e', '\u0441\u043a\u0430, \u0431\u0435', ' S4, \u0438\u0433', '\u044e\u043a\u0441, \u041b\u043e', '\u043e\u043d\u0441, \u0421\u0438', '\u0441\u0441\u0430, \u041c\u0438', '\u0440\u0438\u043a, \u043b\u0430', 'sen, MP', '\u0441\u0441\u0438, \u041b\u043e', 'e)\",\u0430\u0440\u0442', 'N 8, \u0430\u0432', '\u043b\u043a\u0438, 2 ', '\u0430\u0445\", 7 ', '\u0440\u044b\u0439, \u0430\u0440', 'wel, \u0440\u0443', 'e)\",\u0430\u0440\u0442','\u0430\u0445\", 7 ', 'e)\",\u0430\u0440\u0442', 's Blue)\"\",\u0430\u0440\u0442.', 'Black)\"\", \u0430', 'y)\"\", \u0430\u0440', 'en)\"\", \u0430\u0440','\u0442\u0430\u0445\"\", 7', '\u0432\u0435\u0442\u0430\u0445, 3 \u0438'}\nwith open(f'{INPUTFOLDER}items.csv','r') as file:\n    a = file.read()\n    for r in hardcode_replacer:\n        a = a.replace(r,r.replace(\",\",\".\"))\nwith open(f'.\/items.csv','w+') as file:\n    file.write(a)\nitems = spark.read.csv(f'.\/items.csv', inferSchema=True, header=True)","5297cdd1":"shops = read_spark(\"shops\")\ncat = read_spark(\"item_categories\")\ntrain = read_spark(\"sales_train\")\ntest = read_spark(\"test\")\nsample = read_spark(\"sample_submission\")","79e1dafc":"print(f\"Number of records in *shops* table : {shops.count()}\")\nshops.show(5,truncate=False)","ea720876":"print(f\"Number of records in *cat* table : {cat.count()}\")\ncat.show(5,truncate=False)","ad717018":"print(f\"Number of records in *items* table : {items.count()}\")\nitems.show(5,truncate=False)","7c10f945":"print(f\"Number of records in *train* table : {train.count()}\")\ntrain.show(5,truncate=False)\nprint(f\"Number of records in *test* table : {test.count()}\")\ntest.show(5,truncate=False)","55cb7174":"train = train.withColumn(\"date\",f.to_timestamp(train.date, 'dd.MM.yyyy'))\ntrain = train.withColumn(\"year\",f.year(train.date))\ntrain = train.withColumn(\"month\",f.month(train.date))\ntrain.show()","186e174d":"print(f\"Number of records in the train set before the monthly grouping: {train.count()}\")\ncol = [\"date_block_num\",\"year\",\"month\",\"shop_id\",\"item_id\"]\ntrain = train.groupby(col).sum(\"item_cnt_day\")\\\n             .select(col + [f.col(\"sum(item_cnt_day)\").alias(\"item_cnt_month\")])\nprint(f\"Number of records in train set after the monthly grouping: {train.count()}\")\ntrain.show()","ad5c5c8a":"print(f\"Number of unique items in Train dataset: {train.select('item_id').distinct().count()}\")\nitems_for_pred = [i[0] for i in test.select(\"item_id\").distinct().collect()]\nprint(f\"Number of unique items in Test dataset: {len(items_for_pred)}\")\nprint(f\"Filtering the train set & items set with such items ...\")\n\nprint(f\"Length of train set [{train.count()}] rec. -----> \", end=\"\")\ntrain = train.filter(train.item_id.isin(items_for_pred))\nprint(f\"[{train.count()}] rec.\")\n\nprint(f\"Length of items set [{items.count()}] rec. -----> \", end=\"\")\nitems = items.filter(items.item_id.isin(items_for_pred))\nprint(f\"[{items.count()}] rec.\")","4fa159e0":"print(f\"Number of unique shops in Train dataset: {train.select('shop_id').distinct().count()}\")\nshops_for_pred = [i[0] for i in test.select(\"shop_id\").distinct().collect()]\nprint(f\"Number of unique shops in Test dataset: {len(shops_for_pred)}\")\nprint(f\"Filtering the train set & shops set with such items ...\")\n\nprint(f\"Length of train set [{train.count()}] rec. -----> \", end=\"\")\ntrain = train.filter(train.shop_id.isin(shops_for_pred))\nprint(f\"[{train.count()}] rec.\")\n\nprint(f\"Length of items set [{shops.count()}] rec. -----> \", end=\"\")\nshops = shops.filter(shops.shop_id.isin(shops_for_pred))\nprint(f\"[{shops.count()}] rec.\")","30827a1a":"_shops = test.select(\"shop_id\").distinct()\n_items = test.select(\"item_id\").distinct()\n_blocks = train.select([\"date_block_num\",\"year\",\"month\"]).distinct()\nallcomb = _shops.crossJoin(_items).crossJoin(_blocks)\nprint(f\"The len of the dataset should be equel to {allcomb.count()}\") \nprint(\"to consider all combinations of shop_id & item_id for each month\")","ee190ff5":"train = \\\nallcomb.join(train.alias(\"t\"),(allcomb.item_id == f.col(\"t.item_id\")) & \n                              (allcomb.shop_id == f.col(\"t.shop_id\")) & \n                              (allcomb.date_block_num == f.col(\"t.date_block_num\")),\"left\")\\\n       .select([allcomb.item_id,allcomb.shop_id,allcomb.date_block_num,allcomb.month,\n                allcomb.year, f.col(\"t.item_cnt_month\")])\ntrain = train.na.fill({'item_cnt_month': 0})","3cd0faaf":"N,Y,M = 34, 2015, 11\ntest = test.withColumn(\"date_block_num\", f.lit(N))\\\n           .withColumn(\"year\", f.lit(Y))\\\n           .withColumn(\"month\", f.lit(M))\\\n           .withColumn(\"item_cnt_month\", f.lit(None))\\\n           .drop(\"ID\")","2cc5d387":"train = train.union(test.select(train.columns))","03516ac1":"train.filter(f.isnull(f.col(\"item_cnt_month\"))).count()","51c44cfd":"import plotly.express as px\nimport plotly.graph_objects as go","909da663":"a = train.groupby([\"year\",\"month\"]).agg({\"item_cnt_month\":\"sum\"}).toPandas()\npx.line(a.sort_values(\"month\"), x=\"month\", y=\"sum(item_cnt_month)\", color=\"year\")","b2c7dd10":"from pyspark.sql.window import Window\nwindowSpec = Window().partitionBy(['item_id','shop_id']).orderBy(['date_block_num'])\ntrain = train.withColumn(\"lag_1\",f.lag(\"item_cnt_month\", 1).over(windowSpec))\ntrain = train.withColumn(\"lag_2\",f.lag(\"item_cnt_month\", 2).over(windowSpec))\ntrain = train.withColumn(\"lag_3\",f.lag(\"item_cnt_month\", 3).over(windowSpec))\ntrain = train.withColumn(\"lag_4\",f.lag(\"item_cnt_month\", 3).over(windowSpec))\ntrain = train.withColumn(\"lag_5\",f.lag(\"item_cnt_month\", 3).over(windowSpec))\ntrain = train.withColumn(\"lag_6\",f.lag(\"item_cnt_month\", 3).over(windowSpec))","da24253e":"train = train.filter(f.col(\"date_block_num\")>5)","a066ea8b":"new_cat_labels = {\n    'PC - \u0413\u0430\u0440\u043d\u0438\u0442\u0443\u0440\u044b\/\u041d\u0430\u0443\u0448\u043d\u0438\u043a\u0438'                   : 'analog  - \u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b - PC         - \u0413\u0430\u0440\u043d\u0438\u0442\u0443\u0440\u044b\/\u041d\u0430\u0443\u0448\u043d\u0438\u043a\u0438 -',\n    '\u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b - PS2'                          : 'analog  - \u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b - PS         - PS2                -', \n    '\u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b - PS3'                          : 'analog  - \u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b - PS         - PS3                -',\n    '\u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b - PS4'                          : 'analog  - \u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b - PS         - PS4                -', \n    '\u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b - PSP'                          : 'analog  - \u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b - PS         - PSP                -', \n    '\u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b - PSVita'                       : 'analog  - \u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b - PS         - PSVita             -',\n    '\u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b - XBOX 360'                     : 'analog  - \u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b - XBOX       - 360                -', \n    '\u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b - XBOX ONE'                     : 'analog  - \u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b - XBOX       - ONE                -', \n    '\u0418\u0433\u0440\u043e\u0432\u044b\u0435 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 - PS2'                     : 'analog  - \u041a\u043e\u043d\u0441\u043e\u043b\u0438    - PS         - PS2                -',\n    '\u0418\u0433\u0440\u043e\u0432\u044b\u0435 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 - PS3'                     : 'analog  - \u041a\u043e\u043d\u0441\u043e\u043b\u0438    - PS         - PS2                -',\n    '\u0418\u0433\u0440\u043e\u0432\u044b\u0435 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 - PS4'                     : 'analog  - \u041a\u043e\u043d\u0441\u043e\u043b\u0438    - PS         - PS3                -',\n    '\u0418\u0433\u0440\u043e\u0432\u044b\u0435 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 - PSP'                     : 'analog  - \u041a\u043e\u043d\u0441\u043e\u043b\u0438    - PS         - PSP                -',\n    '\u0418\u0433\u0440\u043e\u0432\u044b\u0435 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 - PSVita'                  : 'analog  - \u041a\u043e\u043d\u0441\u043e\u043b\u0438    - PS         - PSVita             -',\n    '\u0418\u0433\u0440\u043e\u0432\u044b\u0435 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 - XBOX 360'                : 'analog  - \u041a\u043e\u043d\u0441\u043e\u043b\u0438    - XBOX       - 360                -', \n    '\u0418\u0433\u0440\u043e\u0432\u044b\u0435 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 - XBOX ONE'                : 'analog  - \u041a\u043e\u043d\u0441\u043e\u043b\u0438    - XBOX       - ONE                -', \n    '\u0418\u0433\u0440\u043e\u0432\u044b\u0435 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 - \u041f\u0440\u043e\u0447\u0438\u0435'                  : 'analog  - \u041a\u043e\u043d\u0441\u043e\u043b\u0438    - \u041a\u043e\u043d\u0441\u043e\u043b\u0438    - \u041a\u043e\u043d\u0441\u043e\u043b\u0438            -',\n    '\u0418\u0433\u0440\u044b - PS2'                                : 'analog  - \u0418\u0433\u0440\u044b       - PS         - PS2                -', \n    '\u0418\u0433\u0440\u044b - PS3'                                : 'analog  - \u0418\u0433\u0440\u044b       - PS         - PS3                -', \n    '\u0418\u0433\u0440\u044b - PS4'                                : 'analog  - \u0418\u0433\u0440\u044b       - PS         - PS4                -', \n    '\u0418\u0433\u0440\u044b - PSP'                                : 'analog  - \u0418\u0433\u0440\u044b       - PS         - PSP                -', \n    '\u0418\u0433\u0440\u044b - PSVita'                             : 'analog  - \u0418\u0433\u0440\u044b       - PS         - PSVita             -', \n    '\u0418\u0433\u0440\u044b - XBOX 360'                           : 'analog  - \u0418\u0433\u0440\u044b       - XBOX       - 360                -', \n    '\u0418\u0433\u0440\u044b - XBOX ONE'                           : 'analog  - \u0418\u0433\u0440\u044b       - XBOX       - ONE                -', \n    '\u0418\u0433\u0440\u044b - \u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b \u0434\u043b\u044f \u0438\u0433\u0440'                 : 'analog  - \u0418\u0433\u0440\u044b       - \u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b - \u0414\u043b\u044f \u0438\u0433\u0440            -', \n    '\u0418\u0433\u0440\u044b Android - \u0426\u0438\u0444\u0440\u0430'                      : 'digital - \u0418\u0433\u0440\u044b       - Android    - Android            -',  \n    '\u0418\u0433\u0440\u044b MAC - \u0426\u0438\u0444\u0440\u0430'                          : 'digital - \u0418\u0433\u0440\u044b       - MAC        - MAC                -',  \n    '\u0418\u0433\u0440\u044b PC - \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u0437\u0434\u0430\u043d\u0438\u044f'          : 'analog  - \u0418\u0433\u0440\u044b       - PC         - \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435     -',  \n    '\u0418\u0433\u0440\u044b PC - \u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0438\u0437\u0434\u0430\u043d\u0438\u044f'           : 'analog  - \u0418\u0433\u0440\u044b       - PC         - \u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u043e\u043d\u043d\u044b\u0435      -',  \n    '\u0418\u0433\u0440\u044b PC - \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u0438\u0437\u0434\u0430\u043d\u0438\u044f'             : 'analog  - \u0418\u0433\u0440\u044b       - PC         - \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435        -',\n    '\u0418\u0433\u0440\u044b PC - \u0426\u0438\u0444\u0440\u0430'                           : 'digital - \u0418\u0433\u0440\u044b       - PC         - \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435        -', \n    '\u041a\u0430\u0440\u0442\u044b \u043e\u043f\u043b\u0430\u0442\u044b (\u041a\u0438\u043d\u043e, \u041c\u0443\u0437\u044b\u043a\u0430, \u0418\u0433\u0440\u044b)'         : 'analog  - \u041a\u0430\u0440\u0442\u044b      - \u041a\u0430\u0440\u0442\u044b      - \u041a\u0438\u043d\u043e\/\u041c\u0443\u0437\u044b\u043a\u0430\/\u0418\u0433\u0440\u044b   -', \n    '\u041a\u0430\u0440\u0442\u044b \u043e\u043f\u043b\u0430\u0442\u044b - Live!'                      : 'analog  - \u041a\u0430\u0440\u0442\u044b      - XBOX       - Live!              -', \n    '\u041a\u0430\u0440\u0442\u044b \u043e\u043f\u043b\u0430\u0442\u044b - Live! (\u0426\u0438\u0444\u0440\u0430)'              : 'digital - \u041a\u0430\u0440\u0442\u044b      - XBOX       - Live!              -', \n    '\u041a\u0430\u0440\u0442\u044b \u043e\u043f\u043b\u0430\u0442\u044b - PSN'                        : 'analog  - \u041a\u0430\u0440\u0442\u044b      - PS         - PSN                -', \n    '\u041a\u0430\u0440\u0442\u044b \u043e\u043f\u043b\u0430\u0442\u044b - Windows (\u0426\u0438\u0444\u0440\u0430)'            : 'digita  - \u041a\u0430\u0440\u0442\u044b      - PC         - Windows            -', \n    '\u041a\u0438\u043d\u043e - Blu-Ray'                            : 'analog  - \u041a\u0438\u043d\u043e       - Blu_Ray    - \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435        -', \n    '\u041a\u0438\u043d\u043e - Blu-Ray 3D'                         : 'analog  - \u041a\u0438\u043d\u043e       - Blu_Ray    - 3D                 -', \n    '\u041a\u0438\u043d\u043e - Blu-Ray 4K'                         : 'analog  - \u041a\u0438\u043d\u043e       - Blu_Ray    - 4K                 -',\n    '\u041a\u0438\u043d\u043e - DVD'                                : 'analog  - \u041a\u0438\u043d\u043e       - DVD        - \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435        -',\n    '\u041a\u0438\u043d\u043e - \u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u043e\u043d\u043d\u043e\u0435'                      : 'analog  - \u041a\u0438\u043d\u043e       - \u041a\u0438\u043d\u043e       - \u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u043e\u043d\u043d\u044b\u0435      -', \n    '\u041a\u043d\u0438\u0433\u0438 - \u0410\u0440\u0442\u0431\u0443\u043a\u0438, \u044d\u043d\u0446\u0438\u043a\u043b\u043e\u043f\u0435\u0434\u0438\u0438'             : 'analog  - \u041a\u043d\u0438\u0433\u0438      - \u0410\u0440\u0442        - \u0410\u0440\u0442\u0431\u0443\u043a\u0438            -', \n    '\u041a\u043d\u0438\u0433\u0438 - \u0410\u0443\u0434\u0438\u043e\u043a\u043d\u0438\u0433\u0438'                        : 'analog  - \u041a\u043d\u0438\u0433\u0438      - \u0410\u0443\u0434\u0438\u043e\u043a\u043d\u0438\u0433\u0438 - \u0410\u0443\u0434\u0438\u043e\u043a\u043d\u0438\u0433\u0438         -',\n    '\u041a\u043d\u0438\u0433\u0438 - \u0410\u0443\u0434\u0438\u043e\u043a\u043d\u0438\u0433\u0438 (\u0426\u0438\u0444\u0440\u0430)'                : 'digital - \u041a\u043d\u0438\u0433\u0438      - \u0410\u0443\u0434\u0438\u043e\u043a\u043d\u0438\u0433\u0438 - \u0410\u0443\u0434\u0438\u043e\u043a\u043d\u0438\u0433\u0438         -', \n    '\u041a\u043d\u0438\u0433\u0438 - \u0410\u0443\u0434\u0438\u043e\u043a\u043d\u0438\u0433\u0438 1\u0421'                     : 'analog  - \u041a\u043d\u0438\u0433\u0438      - \u0410\u0443\u0434\u0438\u043e\u043a\u043d\u0438\u0433\u0438 - 1\u0421                 -', \n    '\u041a\u043d\u0438\u0433\u0438 - \u0411\u0438\u0437\u043d\u0435\u0441 \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430'                 : 'analog  - \u041a\u043d\u0438\u0433\u0438      - \u0420\u0430\u0437\u0432\u0438\u0442\u0438\u0435   - \u0411\u0438\u0437\u043d\u0435\u0441             -', \n    '\u041a\u043d\u0438\u0433\u0438 - \u041a\u043e\u043c\u0438\u043a\u0441\u044b, \u043c\u0430\u043d\u0433\u0430'                    : 'analog  - \u041a\u043d\u0438\u0433\u0438      - \u0410\u0440\u0442        - \u041a\u043e\u043c\u0438\u043a\u0441\u044b\/\u041c\u0430\u043d\u0433\u0430      -', \n    '\u041a\u043d\u0438\u0433\u0438 - \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430'           : 'analog  - \u041a\u043d\u0438\u0433\u0438      - \u0420\u0430\u0437\u0432\u0438\u0442\u0438\u0435   - \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u0430\u044f       -', \n    '\u041a\u043d\u0438\u0433\u0438 - \u041c\u0435\u0442\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b 1\u0421'         : 'analog  - \u041a\u043d\u0438\u0433\u0438      - \u0420\u0430\u0437\u0432\u0438\u0442\u0438\u0435   - 1\u0421                 -',\n    '\u041a\u043d\u0438\u0433\u0438 - \u041e\u0442\u043a\u0440\u044b\u0442\u043a\u0438'                          : 'analog  - \u041a\u043d\u0438\u0433\u0438      - \u041e\u0442\u043a\u0440\u044b\u0442\u043a\u0438   - \u041e\u0442\u043a\u0440\u044b\u0442\u043a\u0438           -',\n    '\u041a\u043d\u0438\u0433\u0438 - \u041f\u043e\u0437\u043d\u0430\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430'         : 'analog  - \u041a\u043d\u0438\u0433\u0438      - \u0420\u0430\u0437\u0432\u0438\u0442\u0438\u0435   - \u041f\u043e\u0437\u043d\u0430\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f     -', \n    '\u041a\u043d\u0438\u0433\u0438 - \u041f\u0443\u0442\u0435\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0438'                      : 'analog  - \u041a\u043d\u0438\u0433\u0438      - \u041a\u043d\u0438\u0433\u0438      - \u041f\u0443\u0442\u0435\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0438       -',\n    '\u041a\u043d\u0438\u0433\u0438 - \u0425\u0443\u0434\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430'         : 'analog  - \u041a\u043d\u0438\u0433\u0438      - \u041a\u043d\u0438\u0433\u0438      - \u0425\u0443\u0434\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f     -', \n    '\u041a\u043d\u0438\u0433\u0438 - \u0426\u0438\u0444\u0440\u0430'                             : 'digital - \u041a\u043d\u0438\u0433\u0438      - \u041a\u043d\u0438\u0433\u0438      - \u041a\u043d\u0438\u0433\u0438              -',\n    '\u041c\u0443\u0437\u044b\u043a\u0430 - CD \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430'       : 'analog  - \u041c\u0443\u0437\u044b\u043a\u0430     - CD         - \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0435          -',\n    '\u041c\u0443\u0437\u044b\u043a\u0430 - CD \u0444\u0438\u0440\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430'       : 'analog  - \u041c\u0443\u0437\u044b\u043a\u0430     - CD         - \u0424\u0438\u0440\u043c\u0435\u043d\u043d\u044b\u0435          -', \n    '\u041c\u0443\u0437\u044b\u043a\u0430 - MP3'                              : 'analog  - \u041c\u0443\u0437\u044b\u043a\u0430     - MP3        - MP3                -', \n    '\u041c\u0443\u0437\u044b\u043a\u0430 - \u0412\u0438\u043d\u0438\u043b'                            : 'analog  - \u041c\u0443\u0437\u044b\u043a\u0430     - \u0412\u0438\u043d\u0438\u043b      - \u0412\u0438\u043d\u0438\u043b              -',  \n    '\u041c\u0443\u0437\u044b\u043a\u0430 - \u041c\u0443\u0437\u044b\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0438\u0434\u0435\u043e'                : 'analog  - \u041c\u0443\u0437\u044b\u043a\u0430     - \u0412\u0438\u0434\u0435\u043e      - \u0412\u0438\u0434\u0435\u043e              -',\n    '\u041c\u0443\u0437\u044b\u043a\u0430 - \u041f\u043e\u0434\u0430\u0440\u043e\u0447\u043d\u044b\u0435 \u0438\u0437\u0434\u0430\u043d\u0438\u044f'               : 'analog  - \u041c\u0443\u0437\u044b\u043a\u0430     - \u041c\u0443\u0437\u044b\u043a\u0430     - \u041f\u043e\u0434\u0430\u0440\u043e\u0447\u043d\u044b\u0435         -', \n    '\u041f\u043e\u0434\u0430\u0440\u043a\u0438 - \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u043a\u0430'                      : 'analog  - \u041f\u043e\u0434\u0430\u0440\u043a\u0438    - \u041f\u043e\u0434\u0430\u0440\u043a\u0438    - \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u043a\u0430         -', \n    '\u041f\u043e\u0434\u0430\u0440\u043a\u0438 - \u0413\u0430\u0434\u0436\u0435\u0442\u044b, \u0440\u043e\u0431\u043e\u0442\u044b, \u0441\u043f\u043e\u0440\u0442'          : 'analog  - \u041f\u043e\u0434\u0430\u0440\u043a\u0438    - \u041f\u043e\u0434\u0430\u0440\u043a\u0438    - \u0413\u0430\u0434\u0436\u0435\u0442\u044b            -', \n    '\u041f\u043e\u0434\u0430\u0440\u043a\u0438 - \u041c\u044f\u0433\u043a\u0438\u0435 \u0438\u0433\u0440\u0443\u0448\u043a\u0438'                  : 'analog  - \u041f\u043e\u0434\u0430\u0440\u043a\u0438    - \u0418\u0433\u0440\u0443\u0448\u043a\u0438    - \u041c\u044f\u0433\u043a\u0438\u0435             -', \n    '\u041f\u043e\u0434\u0430\u0440\u043a\u0438 - \u041d\u0430\u0441\u0442\u043e\u043b\u044c\u043d\u044b\u0435 \u0438\u0433\u0440\u044b'                 : 'analog  - \u041f\u043e\u0434\u0430\u0440\u043a\u0438    - \u041d\u0430\u0441\u0442\u043e\u043b\u044c\u043d\u044b\u0435 - \u041e\u0431\u044b\u0447\u043d\u044b\u0435            -', \n    '\u041f\u043e\u0434\u0430\u0440\u043a\u0438 - \u041d\u0430\u0441\u0442\u043e\u043b\u044c\u043d\u044b\u0435 \u0438\u0433\u0440\u044b (\u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0435)'    : 'analog  - \u041f\u043e\u0434\u0430\u0440\u043a\u0438    - \u041d\u0430\u0441\u0442\u043e\u043b\u044c\u043d\u044b\u0435 - \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0435         -', \n    '\u041f\u043e\u0434\u0430\u0440\u043a\u0438 - \u041e\u0442\u043a\u0440\u044b\u0442\u043a\u0438, \u043d\u0430\u043a\u043b\u0435\u0439\u043a\u0438'              : 'analog  - \u041f\u043e\u0434\u0430\u0440\u043a\u0438    - \u041e\u0442\u043a\u0440\u044b\u0442\u043a\u0438   - \u041e\u0442\u043a\u0440\u044b\u0442\u043a\u0438\/\u041d\u0430\u043a\u043b\u0435\u0439\u043a\u0438  -',  \n    '\u041f\u043e\u0434\u0430\u0440\u043a\u0438 - \u0420\u0430\u0437\u0432\u0438\u0442\u0438\u0435'                        : 'analog  - \u041f\u043e\u0434\u0430\u0440\u043a\u0438    - \u0420\u0430\u0437\u0432\u0438\u0442\u0438\u0435   - \u0420\u0430\u0437\u0432\u0438\u0442\u0438\u0435           -',  \n    '\u041f\u043e\u0434\u0430\u0440\u043a\u0438 - \u0421\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u044b, \u0443\u0441\u043b\u0443\u0433\u0438'             : 'analog  - \u041f\u043e\u0434\u0430\u0440\u043a\u0438    - \u0423\u0441\u043b\u0443\u0433\u0438     - \u0421\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u044b        -',  \n    '\u041f\u043e\u0434\u0430\u0440\u043a\u0438 - \u0421\u0443\u0432\u0435\u043d\u0438\u0440\u044b'                        : 'analog  - \u041f\u043e\u0434\u0430\u0440\u043a\u0438    - \u0421\u0443\u0432\u0435\u043d\u0438\u0440\u044b   - \u0421\u0443\u0432\u0435\u043d\u0438\u0440\u044b           -',\n    '\u041f\u043e\u0434\u0430\u0440\u043a\u0438 - \u0421\u0443\u0432\u0435\u043d\u0438\u0440\u044b (\u0432 \u043d\u0430\u0432\u0435\u0441\u043a\u0443)'            : 'analog  - \u041f\u043e\u0434\u0430\u0440\u043a\u0438    - \u0421\u0443\u0432\u0435\u043d\u0438\u0440\u044b   - \u0412 \u043d\u0430\u0432\u0435\u0441\u043a\u0443          -',\n    '\u041f\u043e\u0434\u0430\u0440\u043a\u0438 - \u0421\u0443\u043c\u043a\u0438, \u0410\u043b\u044c\u0431\u043e\u043c\u044b, \u041a\u043e\u0432\u0440\u0438\u043a\u0438 \u0434\/\u043c\u044b\u0448\u0438'  : 'analog  - \u041f\u043e\u0434\u0430\u0440\u043a\u0438    - \u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b - \u0410\u043b\u044c\u0431\u043e\u043c\u044b\/\u041a\u043e\u0432\u0440\u0438\u043a\u0438    -', \n    '\u041f\u043e\u0434\u0430\u0440\u043a\u0438 - \u0424\u0438\u0433\u0443\u0440\u043a\u0438'                         : 'analog  - \u041f\u043e\u0434\u0430\u0440\u043a\u0438    - \u0418\u0433\u0440\u0443\u0448\u043a\u0438    - \u0424\u0438\u0433\u0443\u0440\u043a\u0438            -', \n    '\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b - 1\u0421:\u041f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u0435 8'              : 'analog  - \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b  - \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b  - 1\u0421                 -',    \n    '\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b - MAC (\u0426\u0438\u0444\u0440\u0430)'                   : 'digital - \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b  - MAC        - MAC                -',   \n    '\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b - \u0414\u043b\u044f \u0434\u043e\u043c\u0430 \u0438 \u043e\u0444\u0438\u0441\u0430'              : 'analog  - \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b  - \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b  - \u0414\u043b\u044f \u0434\u043e\u043c\u0430 \u0438 \u043e\u0444\u0438\u0441\u0430   -',  \n    '\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b - \u0414\u043b\u044f \u0434\u043e\u043c\u0430 \u0438 \u043e\u0444\u0438\u0441\u0430 (\u0426\u0438\u0444\u0440\u0430)'      : 'digital - \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b  - \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b  - \u0414\u043b\u044f \u0434\u043e\u043c\u0430 \u0438 \u043e\u0444\u0438\u0441\u0430   -',   \n    '\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b - \u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0435'                     : 'analog  - \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b  - \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b  - \u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0435          -', \n    '\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b - \u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0435 (\u0426\u0438\u0444\u0440\u0430)'             : 'digital - \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b  - \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b  - \u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0435          -',  \n    '\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435'                                 : 'analog  - \u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435  - \u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435  - \u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435          -',   \n    '\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435 - \u0411\u0438\u043b\u0435\u0442\u044b'                        : 'analog  - \u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435  - \u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435  - \u0411\u0438\u043b\u0435\u0442\u044b             -', \n    '\u0427\u0438\u0441\u0442\u044b\u0435 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u0438 (\u0448\u043f\u0438\u043b\u044c)'                   : 'analog  - \u041d\u043e\u0441\u0438\u0442\u0435\u043b\u0438   - \u041d\u043e\u0441\u0438\u0442\u0435\u043b\u0438   - \u0428\u043f\u0438\u043b\u044c              -',\n    '\u0427\u0438\u0441\u0442\u044b\u0435 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u0438 (\u0448\u0442\u0443\u0447\u043d\u044b\u0435)'                 : 'analog  - \u041d\u043e\u0441\u0438\u0442\u0435\u043b\u0438   - \u041d\u043e\u0441\u0438\u0442\u0435\u043b\u0438   - \u0428\u0442                 -',\n    '\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u0438\u0442\u0430\u043d\u0438\u044f'                          : 'analog  - \u042d\u043b.\u043f\u0438\u0442\u0430\u043d\u0438\u044f - \u042d\u043b.\u043f\u0438\u0442\u0430\u043d\u0438\u044f - \u042d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u0438\u0442\u0430\u043d\u0438\u044f   -',\n    '\u0411\u0438\u043b\u0435\u0442\u044b'                                    : 'analog  - \u0411\u0438\u043b\u0435\u0442\u044b     - \u0411\u0438\u043b\u0435\u0442\u044b     - \u0411\u0438\u043b\u0435\u0442\u044b             -',\n    '\u0411\u0438\u043b\u0435\u0442\u044b (\u0426\u0438\u0444\u0440\u0430)'                            : 'digital - \u0411\u0438\u043b\u0435\u0442\u044b     - \u0411\u0438\u043b\u0435\u0442\u044b     - \u0411\u0438\u043b\u0435\u0442\u044b             -',\n    '\u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430 \u0442\u043e\u0432\u0430\u0440\u0430'                           : 'analog  - \u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430   - \u0423\u0441\u043b\u0443\u0433\u0438     - \u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430           -',  \n}","8dec3bac":"cat = cat.na.replace(new_cat_labels)\nsplit_col = f.split(cat.item_category_name,'-')\ncat = cat.withColumn('is_digital', f.trim(split_col.getItem(0)))\\\n         .withColumn('class', f.trim(split_col.getItem(1)))\\\n         .withColumn('category', f.trim(split_col.getItem(2)))\\\n         .withColumn('sub-category', f.trim(split_col.getItem(3)))","045f7623":"cat = cat.select([\"item_category_id\",\"is_digital\",\"class\",\"category\",\"sub-category\"])\ncat.show(84)","bd56bcaa":"print(items.count())\nitems.show(truncate=False)","40f325c3":"def clean_text(txt):\n    txt = re.sub('[^+A-Za-z\u0410-\u042f\u0430-\u044f0-9]+', ' ', str(txt).lower()).strip()\n    txt = \" \".join([word for word in txt.split(\" \") if len(word)>1])\n    return txt\nspark_clean_text = f.UserDefinedFunction(clean_text)\nitems = items.withColumn('item_name', spark_clean_text(items[\"item_name\"]))\nitems.show(truncate=False)","1d8ecd70":"def drop_stopwords(txt):\n    from nltk.corpus import stopwords # stopwords load problem with spark\n    txt = \" \".join([s for s in txt.split() \\\n                    if (s not in stopwords.words('english')) \\\n                    and (s not in stopwords.words('russian'))])\n    return txt\nspark_drop_stopwords = f.UserDefinedFunction(drop_stopwords)\nitems = items.withColumn('item_name', spark_drop_stopwords(items[\"item_name\"]))\nitems.show(truncate=False)","236ce01f":"items = items.withColumn('item_name', f.split(f.col('item_name'), ' '))\nwords_freq = items.withColumn('word', f.explode('item_name')).groupBy('word').count()\n\n# More then 1% - stocastically\nextra_cat = words_freq.filter(words_freq[\"count\"]>items.count()\/100).select('word') \nextra_cat = [i[0] for i in extra_cat.collect()]\nprint(f\"number of extra features to add: {len(extra_cat)}\")","eedbc2f9":"for k in extra_cat:\n    spark_get_extra_cat = f.UserDefinedFunction(lambda x: 1 if k in x else 0)\n    items = items.withColumn(k, spark_get_extra_cat(items[\"item_name\"]).cast(pyspark.sql.types.IntegerType()))","7e30c7dc":"items = items.select([\"item_id\",\"item_category_id\"]+extra_cat)\nprint(items.columns)","45cef766":"shops.show(truncate=False)","13a267e6":"shops = shops.withColumn('shop_name', spark_clean_text(shops[\"shop_name\"]))\nshops = shops.withColumn('shop_name', spark_drop_stopwords(shops[\"shop_name\"]))\nshops.show(truncate=False)","596efd9a":"def get_city(shop_name):\n    return shop_name.split(\" \")[0]\nspark_get_city = f.UserDefinedFunction(get_city)\nshops = shops.withColumn('city', spark_get_city(shops[\"shop_name\"]))\nprint(shops.select(\"city\").distinct().count())\nshops.show(truncate=False)","c4df53a6":"geolocator = Nominatim(user_agent=\"Your_Name\")\ncity_to_latlon = {}\nfor city in shops.select(\"city\").distinct().collect():\n    city = city[0]\n    c = city if city!= '\u0440\u043e\u0441\u0442\u043e\u0432\u043d\u0430\u0434\u043e\u043d\u0443' else '\u0440\u043e\u0441\u0442\u043e\u0432-\u043d\u0430-\u0434\u043e\u043d\u0443'\n    if c not in [\"\u0446\u0438\u0444\u0440\u043e\u0432\u043e\u0439\",\"\u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\",\"\u0432\u044b\u0435\u0437\u0434\u043d\u0430\u044f\"]:\n        location = geolocator.geocode(c)\n        city_to_latlon[city] = (location.latitude, location.longitude)\n    else:\n        city_to_latlon[city] = (0,0)","1106215d":"spark_get_latlon = f.UserDefinedFunction(lambda k: city_to_latlon[k][0])\nshops = shops.withColumn('lat', spark_get_latlon(shops[\"city\"]))\nspark_get_latlon = f.UserDefinedFunction(lambda k: city_to_latlon[k][1])\nshops = shops.withColumn('lon', spark_get_latlon(shops[\"city\"]))\nshops.show(truncate=False)","bd97ed1d":"def get_type(shop_name):\n    for i in [\"\u0442\u0440\u043a\",\"\u0442\u0446\",\"\u0442\u0440\u0446\",\"\u0442\u043a\"]:\n        if i in shop_name:\n            return i\n    return 'no_shop_type'\nspark_get_type = f.UserDefinedFunction(get_type)\nshops = shops.withColumn('shop_type', spark_get_type(shops[\"shop_name\"]))\nshops.show(truncate=False)","c7c239ab":"shops = shops.select([\"shop_id\",\"lat\",\"lon\",\"shop_type\"])\nshops.show()","8051ff8d":"# \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0444\u0438\u0447\u0443 lonlat \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 - \u043d\u0430 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0435","92bab71f":"dataset = \\\nitems.join(cat,cat.item_category_id == items.item_category_id,\"left\")\\\n     .select(\n    [\n        items.item_category_id,\n        \"item_id\",\"is_digital\",\"class\",\"category\",\"sub-category\"\n    ] + extra_cat\n)","b7072444":"dataset = \\\ntrain.join(dataset,dataset.item_id == train.item_id,\"left\",)\\\n     .select(\n    [\n        train.item_id,\n        \"sub-category\",\"date_block_num\",\"item_cnt_month\",\"lag_1\",\"lag_2\",\"lag_3\",\"lag_4\",\"lag_5\",\"lag_6\",\n        \"is_digital\",\"class\",\"category\",\"shop_id\",\"month\",\"year\"\n    ] + extra_cat\n)","b130ae6c":"dataset = \\\ndataset.join(shops,shops.shop_id == dataset.shop_id,\"left\")\\\n       .select(\n      [\n          dataset.shop_id,\n          \"item_id\",\"date_block_num\",\"item_cnt_month\",\"lag_1\",\"lag_2\",\"lag_3\",\"lag_4\",\"lag_5\",\"lag_6\",\n          \"is_digital\",\"class\",\"category\",\"sub-category\",\n          \"lat\",\"lon\",\"shop_type\", \"month\",\"year\"\n      ] + extra_cat\n)","fca36d9e":"train.filter(f.isnull(f.col(\"item_cnt_month\"))).count()","be0ed060":"dataset.repartition(10).write.csv(\"dataset\", sep='|')","3b5b971f":"print(dataset.columns)","272aaa1f":"## 1.3 Shops features","add2371a":"# 1. ETL Process","2c321e32":"### 1.1.1 Monthly grouping","ac6cfc9a":"### 1.2.1 Categories features","361054cd":"## 1.1 Train + Test\n\nAs the first step we have to merge two datasets into one to simplify all further operations with the data.\nBefore this - we should cleane our data from unnecessary values (wich present only in train set), extend the data set with zero records (cases when no item in shops have been bought) and group the data monthly","77f4ad82":"# 0. Data owerview","d035cd40":"I do not like the names of the categories - they are a bit umbiques and need to be restructured. I tryed to do this analitically: All names has been replacet into several categories:\n* Analog \/ Digital\n* Category Groups \n* Category Type\n* Category Name\n\nSome of the values in Group-Type-Name can be equel, what refers to the illogical categories","0eb0ec34":"### 1.2.2 Main item features","0f1a29c6":"### 1.1.3 Extending Train dataset \nWe join all item-shop combinations from test set with train set - to get the full dataset","32297e73":"### 1.1.4 Putting all togather\nWe combine train and test set. 11.2015 is the month of the test set","581a574a":"We filter train values with only items and shops from the test dataset - to shrink the dimentionality. Extra we delete unnecessary items and shops from there tables, to simlify all other operations with them","0b777994":"## 1.2 Items features","ff779c49":"### 1.1.2 Shrinking Train dataset ","c8b08738":"We group our data per months end check the difference in a size of our data","974c9645":"## 1.4 Collecting everithing togather","3a60fafc":"We should extract date features first - for not to loose them","3d5dc68a":"There is a problem with commas in dataset,which has to be solved with the hardcode","4308093a":"### 1.1.5 Time deltas"}}