{"cell_type":{"645417a5":"code","33851d1e":"code","a1c6b8f4":"code","35d1be97":"code","d73ed31f":"code","4845b90c":"code","7a094975":"code","0c64cb90":"code","4173317f":"code","217432ff":"code","dc7d9f11":"code","9ee9bcf5":"code","47413353":"code","4186f8cf":"code","6c5c946b":"code","7813cdb1":"code","268502e7":"code","ce1d7f04":"code","6226d39a":"code","2eb98bbd":"code","f62002dc":"code","b44cd690":"code","fbc719bb":"code","ab87abdf":"code","b50e210e":"code","8df9fa5b":"code","baf343b2":"code","b7776d34":"code","a7fbd004":"code","e0251ed0":"code","10d8cbcb":"code","5e67815e":"code","5679838a":"code","2cb8d9e9":"code","bf1e3ef5":"code","2e783a93":"code","2b104261":"code","080ba32a":"code","3385fa4c":"code","644b9cd4":"code","f208d58b":"code","e11d4764":"code","541ba356":"code","749c8ae6":"code","4c238f0f":"code","69e94a4e":"code","01ff8ac1":"code","04fc2689":"code","b87f7acf":"code","d0aea749":"code","1210f589":"markdown","20232d86":"markdown","dcd97dde":"markdown","a30cfc21":"markdown","473a66a5":"markdown","f6c8938b":"markdown","bd57894c":"markdown","94001572":"markdown","3cfbce41":"markdown","60882c77":"markdown","7df0fcb0":"markdown","bc129211":"markdown","0c94b143":"markdown","9f6ce713":"markdown","89a9d5d8":"markdown","213da168":"markdown","f575ff81":"markdown","99be0b6b":"markdown","6260175d":"markdown","05e053d7":"markdown","15eecc18":"markdown","f9ff71aa":"markdown","29e8ba05":"markdown","28da505f":"markdown","8543af34":"markdown","5b77f909":"markdown","4662f4e0":"markdown","fa16851d":"markdown","52c0d1d9":"markdown","565b60e3":"markdown","abdfe5cb":"markdown","0ce87f00":"markdown","9cff6356":"markdown","6171fd5f":"markdown","162e343d":"markdown"},"source":{"645417a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns \nsns.set()\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","33851d1e":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')","a1c6b8f4":"train_data.head()","35d1be97":"train_data.info()","d73ed31f":"test_data.head()","4845b90c":"test_data.info()","7a094975":"full_data = pd.concat([train_data,test_data], axis = 0)","0c64cb90":"full_data.shape","4173317f":"full_data.head()","217432ff":"full_data.info()","dc7d9f11":"full_data.isna().sum()","9ee9bcf5":"full_data.describe()","47413353":"train_data.drop('PassengerId', axis=1, inplace=True)","4186f8cf":"num_data = train_data.select_dtypes(include=['int64', 'float64'])\ncat_data = train_data.select_dtypes(include=['object'])\n\nnum_features = num_data.columns\ncat_features = cat_data.columns","6c5c946b":"sns.set_theme(style='white')","7813cdb1":"display_cols = 2\ndisplay_rows = 3\n\nsns.set_theme(style='white')\nplt.figure(figsize=(20, 24))\n\nfor feature, plot_idx in zip(num_features, list(range(0, len(num_features)))):\n    plt.subplot(display_rows, display_cols, plot_idx + 1)\n    plt.subplots_adjust(hspace = 0.5, wspace = 0.5)\n    \n    sns.histplot(train_data[feature], kde=True)\n    plt.title(feature)\n    ","268502e7":"died = (train_data['Survived'] == 0).sum()\nsurvived = (train_data['Survived'] == 1).sum()\nproportions = [died, survived]\n\nplt.figure(figsize=(12,8))\nplt.pie(proportions, data=train_data, labels= ['Died', 'Survived'], explode = (0.05,0), startangle=90, autopct='%1.1f%%', shadow=False)\nplt.axis('equal')\nplt.title(\"Death\/Survival Proportion\")","ce1d7f04":"pd.DataFrame(zip(train_data.columns, train_data.count(), train_data.nunique(), train_data.dtypes), columns = ['Feature', 'Count', 'Unique values', 'Data type'])","6226d39a":"num_data = train_data.select_dtypes(include=['int64', 'float64'])\ncat_data = train_data.select_dtypes(include=['object'])\n\nnum_features = num_data.columns\ncat_features = cat_data.columns","2eb98bbd":"train_data['Age'].describe()","f62002dc":"plt.figure(figsize=(12, 8))\nsns.histplot(train_data['Age'], kde=True)\nplt.title('Age')","b44cd690":"g = sns.FacetGrid(train_data, col='Survived', sharey=False, ylim=(0,80), height=5, aspect=1.1)\ng.map_dataframe(sns.histplot, x='Age')\ng.set_axis_labels('Age', 'Count')\nplt.legend()","fbc719bb":"grouped_class_age = train_data.groupby(['Pclass']).Age.agg([len, min, max, 'mean'])\ngrouped_class_age","ab87abdf":"train_data['Sex'].value_counts()","b50e210e":"male = (train_data['Sex'] == 'male').sum()\nfemale = (train_data['Sex'] == 'female').sum()\nproportions = [male, female]\n\nplt.figure(figsize=(12,8))\nplt.pie(proportions, data=train_data, labels= ['Males', 'Females'], startangle=90, autopct='%1.1f%%', explode=(0.05, 0), shadow=False)\nplt.axis('equal')\nplt.title(\"Sex Proportion\")","8df9fa5b":"plt.figure(figsize=(10,8))\nsns.countplot(x=train_data['Sex'],hue=train_data['Survived'])\nplt.title(\"Survival by gender\")\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 12})\nplt.show()","baf343b2":"g = sns.FacetGrid(train_data, col='Survived', sharey=False, ylim=(0,80), hue='Sex', height=5, aspect=1.1)\ng.map_dataframe(sns.histplot, x='Age')\ng.set_axis_labels('Age', 'Count')\nplt.legend()","b7776d34":"train_data[\"WomenOrChildren\"] = np.where((train_data.Sex == 'female') | (train_data.Age < 18.0), 'Women or Children', 'Adult Male')\ntrain_data[\"WomenOrChildren\"].value_counts()","a7fbd004":"plt.figure(figsize=(12,8))\ntrain_data[\"WomenOrChildren\"].value_counts().plot(kind='pie', startangle=90, autopct='%1.1f%%', explode=(0.05, 0), shadow=False)\nplt.axis('equal')\nplt.title('Women or Children')","e0251ed0":"plt.figure(figsize=(10,5))\nax = sns.barplot(x=\"WomenOrChildren\", y=\"Survived\", data=train_data)\nplt.title('Chance of Survival for Women or Children')\nplt.xlabel('Women or Children')\nplt.show()","10d8cbcb":"first_class = (train_data['Pclass'] == 1).sum()\nsecond_class = (train_data['Pclass'] == 2).sum()\nthird_class = (train_data['Pclass'] == 3).sum()\nproportions = [first_class, second_class, third_class]\n\nplt.figure(figsize=(12,8))\nplt.pie(proportions, data=train_data, labels=['1st class', '2nd class', '3rd class'], startangle=90, explode=(0.05, 0.05, 0), autopct='%1.1f%%', shadow=False)\nplt.axis('equal')\nplt.title('Passanger ticket class')","5e67815e":"plt.figure(figsize=(10,5))\nsns.barplot(x=\"Pclass\", y=\"Survived\", data=train_data)\nplt.title(\"Chancer of survival per Ticket Class\")\nplt.show()","5679838a":"plt.figure(figsize=(10,8))\nsns.countplot(x=train_data['Pclass'], hue=train_data['Survived'])\nplt.title(\"Survivors by Ticket Class\")\nplt.legend(['Not Survived', 'Survived'], loc='upper left', prop={'size': 12})\nplt.show()","2cb8d9e9":"train_data.groupby(['Sex', 'Survived', 'Pclass']).Age.agg([len, 'mean', 'median','count'])","bf1e3ef5":"plt.figure(figsize=(10,5))\nsns.barplot(x=\"Parch\", y=\"Survived\", data=train_data)\nplt.title(\"Chance of Survival for Passengers with Parents or Children onboard\")\nplt.xlabel('Number of Parents \/ Children')\nplt.show()","2e783a93":"plt.figure(figsize=(10,5))\nsns.barplot(x=\"SibSp\", y=\"Survived\", data=train_data)\nplt.title(\"Chance of Survival for Passengers with Siblings \/ Spouses onboard\")\nplt.xlabel('Number of Siblings \/ Spouses')\nplt.show()","2b104261":"train_data['Relatives'] = train_data['SibSp'] + train_data['Parch']\ntrain_data['Alone'] = np.where(train_data['Relatives'] == 0, 'Alone', 'Not alone')\ntrain_data['Alone'].value_counts()","080ba32a":"plt.figure(figsize=(12,8))\ntrain_data['Alone'].value_counts().plot(kind='pie', startangle=90, autopct='%1.1f%%', explode=(0.05, 0), shadow=False)","3385fa4c":"plt.figure(figsize=(10, 6))\nsns.histplot(train_data['Relatives'], kde=True)\nplt.title('Relatives')","644b9cd4":"plt.figure(figsize=(10,5))\nax = sns.barplot(x=\"Relatives\", y=\"Survived\", data=train_data)\nplt.title('Chance of Survival in function of the number of relatives')\nplt.xlabel('Relatives')\nplt.show()","f208d58b":"plt.figure(figsize=(10,5))\nax = sns.barplot(x=\"Alone\", y=\"Survived\", data=train_data)\nplt.title('Chance of Survival in function being alone or not')\nplt.show()","e11d4764":"Southampton = (train_data['Embarked'] == 'S').sum()\nQueenstown = (train_data['Embarked'] =='Q').sum()\nCherbourg = (train_data['Embarked'] == 'C').sum()\nproportions = [Southampton, Queenstown, Cherbourg]\n\nplt.figure(figsize=(12,8))\nplt.pie(proportions, data=train_data, labels= ['Southampton', 'Queenstown', 'Cherbourg'], startangle=90, autopct='%1.1f%%', explode=(0.05, 0.05, 0), shadow=False)\nplt.axis('equal')\nplt.title('Passanger onboarding port')","541ba356":"plt.figure(figsize=(10,5))\nax = sns.barplot(x=\"Embarked\", y=\"Survived\", data=train_data)\nax.set_xticklabels(['Southampton', 'Cherbourg', 'Queenstown'])\nplt.title('Chance of Survival by Port of Embarkation')\nplt.xlabel('Port of Embarkation')\nplt.show()\n","749c8ae6":"plt.figure(figsize=(12,8))\nax = sns.stripplot(x=train_data['Embarked'], y=train_data['Age'])\nax.set_xticklabels(['Southampton', 'Cherbourg', 'Queenstown'])\nplt.xlabel('Port of Embarkation and Age')","4c238f0f":"plt.figure(figsize=(10,8))\n\nSouthampton = train_data[train_data['Embarked'] == 'S']['Pclass'].value_counts()\nCherbourg = train_data[train_data['Embarked'] == 'C']['Pclass'].value_counts()\nQueenstown = train_data[train_data['Embarked'] == 'Q']['Pclass'].value_counts()\n\ndf = pd.DataFrame([Southampton, Cherbourg,  Queenstown])\ndf.index = ['Southampton', 'Cherbourg', 'Queenstown']\ndf.plot(kind='bar', stacked=False, figsize=(10,5))\nplt.title('Port and passanger class')","69e94a4e":"plt.figure(figsize=(10,5))\nsns.boxplot(data=train_data).set(title='Outliers')","01ff8ac1":"train_data['AloneOrNotAlone'] = train_data[\"Alone\"].map({\"Alone\": 0, \"Not alone\": 1})\ntrain_data['WomanOrChildrenOrAdultMale'] = train_data[\"WomenOrChildren\"].map({\"Adult Male\": 0, \"Women or Children\": 1})","04fc2689":"correlation = train_data.corr()\ncorrelation","b87f7acf":"correlation['Survived'].sort_values(ascending=False)","d0aea749":"mask = np.transpose(np.tril(np.ones(correlation.shape)))\n\nplt.figure(figsize = (20, 15))\nplt.title('Correlation matrix')\nsns.heatmap(correlation, mask=mask, annot=True, linewidths=0, square=True, cbar_kws={\"shrink\": .60}, cmap = 'RdBu')\nplt.show()","1210f589":"# Exploratory Data Analisys","20232d86":"Passangers that embarked at Cherbourg seem to have benefited from higher surivability rates","dcd97dde":"Being alone seems to decrease the chances of survival ","a30cfc21":"First, let's convert `Alone` and `WomenOrChildren` to see if how they correlate","473a66a5":"## Distributions","f6c8938b":"# Age","bd57894c":"# Credits\n\n*standing on the shoulders of giants*\n\n* https:\/\/www.kaggle.com\/suprematism\/titanic-top-3-analysing-visualising-predicting\n* https:\/\/www.kaggle.com\/aymanlafaz\/titanic-feature-engineering-and-random-forests\n* https:\/\/www.kaggle.com\/petraneumann\/data-analysis-titanic-data-python\n* https:\/\/towardsdatascience.com\/predicting-the-survival-of-titanic-passengers-30870ccc7e8\n* https:\/\/www.kaggle.com\/maxdiazbattan\/titanic-top-5-eda-feat-eng-avg-5-models","94001572":"It seems that the survival chance is significanly higher for passangers that onboarded with one to three ascending\/descending family members","3cfbce41":"## Distribution","60882c77":"## Total relatives","7df0fcb0":"The data seems to confirm the reports","bc129211":"# Sex","0c94b143":"<div align=\"middle\">\n  <img alt=\"The RMS Titanic\" src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/8\/8f\/Grafick%C3%BD_n%C3%A1vrh_lod%C4%9B_TITANIIC.jpg\/1024px-Grafick%C3%BD_n%C3%A1vrh_lod%C4%9B_TITANIIC.jpg\">\n<\/div>","9f6ce713":"# Finally, let's have a look at general correlations","89a9d5d8":"## Parent\/child survival chances","213da168":"The chances of survival seem to be higher if you embarked with 1 to 3 relatives","f575ff81":"# Age and Sex","99be0b6b":"Also, **historical reports** state\n\n> The thoroughness of the muster was heavily dependent on the class of the passengers; the first-class stewards were in charge of only a few cabins, while those responsible for the second-class and third-class passengers had to manage large numbers of people.\n\nSource [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Sinking_of_the_Titanic)","6260175d":"# SibSp","05e053d7":"### Historical reports\n\nReports state that the women and children first protocol was followed. Let's look at the respective data.\n\nSource [wikipedia](https:\/\/en.wikipedia.org\/wiki\/Titanic#Sinking)","15eecc18":"# Load the data","f9ff71aa":"* Men survivability chances seem to be higher on the 20 to 30 years of age range. \n* Women on the 15 to 40 years of age range.\n* Children under 10 years of age of both genders have equal survivability chances.","29e8ba05":"### Age grouped per class","28da505f":"**Observations**\n\n* We have some missing values on the `Age` and `Cabin` and `Embarked` features.\n* Features `SibSp`, `Parch` and `Fare` are unbalanced.\n* The `Cabin` feature has very few entries making it a strong cadidate for being dropped.","8543af34":"# Titanic - Machine Learning from Disaster\n\nA Machine Learning classification exercise - Exploratory Data Analisys","5b77f909":"# Port of embarkation survival chances","4662f4e0":"Let's get rid of passengerId","fa16851d":"`Fare` and `Age` have some outlier data points","52c0d1d9":"# Outliers","565b60e3":"# Taking a quick look at the data structure","abdfe5cb":"Let's consider the full data for the remanider of this section","0ce87f00":"## Data Dictionary\n\n* **Survival**: 0 = No, 1 = Yes\n* **Pclass**: Ticket class 1 = 1st, 2 = 2nd, 3 = 3rd\n* **Sex**: Gender\n* **Age**: Age in years. Age is fractional if less than 1. \n* **SibSp**: # of siblings \/ spouses aboard the Titanic\n* **Parch**: # of parents \/ children aboard the Titanic\n* **Ticket**: Ticket number\n* **Fare**: Passenger fare\n* **Cabin**: Cabin number\n* **Embarked**: Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton","9cff6356":"The data confirms that the women and children first protocol was followed.","6171fd5f":"## Siblings\/spouses survival chances","162e343d":"# Parch"}}