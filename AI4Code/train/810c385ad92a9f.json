{"cell_type":{"29568227":"code","8d2c2bec":"code","234df252":"code","411e94c6":"code","602b4e91":"code","a06f1a73":"code","1ce8e47a":"code","9d8f72bb":"code","d79e7e0f":"code","eb93338a":"code","f2ba7a5f":"code","652a0b0f":"code","18804dfc":"code","4c7c29bf":"code","18848055":"code","74976398":"code","1dfcdadc":"code","cb9e1b1a":"code","e8cdd8a9":"markdown","ac156a0b":"markdown","1c5b956d":"markdown","7c92cf3a":"markdown","52d54a92":"markdown","efccd358":"markdown","f8d618f9":"markdown","26b878c5":"markdown","2ffe9634":"markdown"},"source":{"29568227":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.offline as py\ncolor = sns.color_palette()\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected=True)\nimport plotly.tools as tls\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport pandas as pd\nimport numpy as np\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nSMALL_SIZE = 10\nMEDIUM_SIZE = 12\n\nplt.rc('font', size=SMALL_SIZE)\nplt.rc('axes', titlesize=MEDIUM_SIZE)\nplt.rc('axes', labelsize=MEDIUM_SIZE)\nplt.rcParams['figure.dpi']=150\n# Any results you write to the current directory are saved as output.","8d2c2bec":"df=pd.read_csv('..\/input\/Skyserver_SQL2_27_2018 6_51_39 PM.csv')\ndf.head()","234df252":"df.describe()","411e94c6":"df.info()","602b4e91":"columns = df.columns\npercent_missing = df.isnull().sum() * 100 \/ len(df)\nmissing_value_df = pd.DataFrame({'column_name': columns,\n                                 'percent_missing': percent_missing})\nmissing_value_df.sort_values('percent_missing')","a06f1a73":"sns.heatmap(df.corr())\ndf.corr()","1ce8e47a":"df.drop(['specobjid','fiberid'],axis=1,inplace=True)","9d8f72bb":"fig, axes = plt.subplots(nrows=1, ncols=2,figsize=(16, 4))\nax = sns.distplot(df[df['class']=='STAR'].redshift, bins = 30, ax = axes[0], kde = False)\nax.set_title('Star')\nax = sns.distplot(df[df['class']=='GALAXY'].redshift, bins = 30, ax = axes[1], kde = False)\nax.set_title('Galaxy')\n","d79e7e0f":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(16, 4))\nax = sns.lvplot(x=df['class'], y=df['dec'], palette='coolwarm')\nax.set_title('dec')","eb93338a":"di={'STAR':1,'GALAXY':2,'QSO':3}\ndf.replace({'class':di},inplace=True)\n\ny=df['class']\ndf.drop(['objid','class'],axis=1,inplace=True)","f2ba7a5f":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nsdss = scaler.fit_transform(df)","652a0b0f":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(df, \n                                                    y, test_size=0.33)","18804dfc":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\npreds = knn.predict(X_test)\nacc_knn = (preds == y_test).sum().astype(float) \/ len(preds)*100\nprint(\"Accuracy of KNN: \", acc_knn)","4c7c29bf":"from sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\n\nparam_grid = {'C': [0.1,1, 10, 100, 1000], 'gamma': [1,0.1,0.01,0.001,0.0001], 'kernel': ['rbf']} \n\ngrid = GridSearchCV(SVC(),param_grid,refit=True,verbose=3)\n\ngrid.fit(X_train,y_train)","18848055":"grid_predictions = grid.predict(X_test)","74976398":"acc_gv_rbf = (grid_predictions == y_test).sum().astype(float) \/ len(grid_predictions)*100\nprint(\"Accuracy of SVM: \", acc_gv_rbf)","1dfcdadc":"from sklearn.naive_bayes import GaussianNB\n\ngnb=GaussianNB()\ngnb.fit(X_train,y_train)\npreds2=gnb.predict(X_test)\nacc_gnb=(preds2==y_test).sum().astype(float)\/len(preds)*100\nprint(\"Accuracy of Naive Bayes: \",acc_gnb)","cb9e1b1a":"from sklearn.ensemble import RandomForestClassifier\n\nrf=RandomForestClassifier()\nrf.fit(X_train,y_train)\npreds3=rf.predict(X_test)\nacc_rf=(preds3==y_test).sum().astype(float)\/len(preds)*100\nprint(\"Accuracy of Random Forest Classifier: \",acc_rf)","e8cdd8a9":"## Naive Bayes","ac156a0b":"## Lets begin with Data Analysis","1c5b956d":"So we don't have any missing values\n\n#### Next we will see if there are any highly correlated columns and drop it accordingly","7c92cf3a":"--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n### About the notebook\n\nSo here we are going to have some Explaratory Data Analysis along with creating a model which predicts whether it is a galaxy or a star  with a pretty good accuracy.\n\n\nSo lets get started","52d54a92":"#### KNN","efccd358":"#### Random Forest Classifier","f8d618f9":"#### Lets see if there are any null values in our dataset","26b878c5":"### SVM","2ffe9634":"# Sloan Digital Sky Survey Classification\n\n## Classification of Galaxies, Stars based on the RD14 from the SDSS\n"}}