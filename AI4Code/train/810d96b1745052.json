{"cell_type":{"1d7fd62b":"code","53866c8b":"code","44eff760":"code","9e33ab44":"code","442a9a32":"code","8fa01d6b":"code","f3b6cb5c":"code","1e667f39":"code","4b6b0814":"code","f5e43cbd":"code","855d31ce":"code","f7a50ac8":"code","e7d7c127":"code","0b647f67":"markdown","1562f8a8":"markdown","e29b29a0":"markdown","b80509aa":"markdown","c9d32cde":"markdown","261a4a1b":"markdown","cf711e1b":"markdown","327fe414":"markdown","035da7bc":"markdown"},"source":{"1d7fd62b":"import os,gc\nimport time\nimport pickle\nimport random\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom sklearn.metrics import log_loss, roc_auc_score\n\nimport torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\nfrom torch.utils.data import DataLoader\nfrom torch.nn import CrossEntropyLoss, MSELoss\nfrom torch.nn.modules.loss import _WeightedLoss\nimport torch.nn.functional as F\n","53866c8b":"\n\npd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 100)\n\nDATA_PATH = '..\/input\/jane-street-market-prediction\/'\n\nNFOLDS = 4\n\nTRAIN = False\nCACHE_PATH = '..\/input\/mlp012003weights'\n\ndef save_pickle(dic, save_path):\n    with open(save_path, 'wb') as f:\n    # with gzip.open(save_path, 'wb') as f:\n        pickle.dump(dic, f)\n\ndef load_pickle(load_path):\n    with open(load_path, 'rb') as f:\n    # with gzip.open(load_path, 'rb') as f:\n        message_dict = pickle.load(f)\n    return message_dict\n\nfeat_cols = [f'feature_{i}' for i in range(130)]\n\ntarget_cols = ['action', 'action_1', 'action_2', 'action_3', 'action_4']\n\nf_mean = np.load(f'{CACHE_PATH}\/f_mean_online.npy')\n\n##### Making features\nall_feat_cols = [col for col in feat_cols]\nall_feat_cols.extend(['cross_41_42_43', 'cross_1_2'])\n\n##### Model&Data fnc\nclass Model(nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.batch_norm0 = nn.BatchNorm1d(len(all_feat_cols))\n        self.dropout0 = nn.Dropout(0.2)\n\n        dropout_rate = 0.2\n        hidden_size = 256\n        self.dense1 = nn.Linear(len(all_feat_cols), hidden_size)\n        self.batch_norm1 = nn.BatchNorm1d(hidden_size)\n        self.dropout1 = nn.Dropout(dropout_rate)\n\n        self.dense2 = nn.Linear(hidden_size+len(all_feat_cols), hidden_size)\n        self.batch_norm2 = nn.BatchNorm1d(hidden_size)\n        self.dropout2 = nn.Dropout(dropout_rate)\n\n        self.dense3 = nn.Linear(hidden_size+hidden_size, hidden_size)\n        self.batch_norm3 = nn.BatchNorm1d(hidden_size)\n        self.dropout3 = nn.Dropout(dropout_rate)\n\n        self.dense4 = nn.Linear(hidden_size+hidden_size, hidden_size)\n        self.batch_norm4 = nn.BatchNorm1d(hidden_size)\n        self.dropout4 = nn.Dropout(dropout_rate)\n\n        self.dense5 = nn.Linear(hidden_size+hidden_size, len(target_cols))\n\n        self.Relu = nn.ReLU(inplace=True)\n        self.PReLU = nn.PReLU()\n        self.LeakyReLU = nn.LeakyReLU(negative_slope=0.01, inplace=True)\n        # self.GeLU = nn.GELU()\n        self.RReLU = nn.RReLU()\n\n    def forward(self, x):\n        x = self.batch_norm0(x)\n        x = self.dropout0(x)\n\n        x1 = self.dense1(x)\n        x1 = self.batch_norm1(x1)\n        # x = F.relu(x)\n        # x = self.PReLU(x)\n        x1 = self.LeakyReLU(x1)\n        x1 = self.dropout1(x1)\n\n        x = torch.cat([x, x1], 1)\n\n        x2 = self.dense2(x)\n        x2 = self.batch_norm2(x2)\n        # x = F.relu(x)\n        # x = self.PReLU(x)\n        x2 = self.LeakyReLU(x2)\n        x2 = self.dropout2(x2)\n\n        x = torch.cat([x1, x2], 1)\n\n        x3 = self.dense3(x)\n        x3 = self.batch_norm3(x3)\n        # x = F.relu(x)\n        # x = self.PReLU(x)\n        x3 = self.LeakyReLU(x3)\n        x3 = self.dropout3(x3)\n\n        x = torch.cat([x2, x3], 1)\n\n        x4 = self.dense4(x)\n        x4 = self.batch_norm4(x4)\n        # x = F.relu(x)\n        # x = self.PReLU(x)\n        x4 = self.LeakyReLU(x4)\n        x4 = self.dropout4(x4)\n\n        x = torch.cat([x3, x4], 1)\n\n        x = self.dense5(x)\n\n        return x\nif True:\n    device = torch.device(\"cuda:0\")\n\n    model_list = []\n    tmp = np.zeros(len(feat_cols))\n    for _fold in range(NFOLDS):\n        torch.cuda.empty_cache()\n        model = Model()\n        model.to(device)\n        model_weights = f\"{CACHE_PATH}\/online_model{_fold}.pth\"\n        model.load_state_dict(torch.load(model_weights))\n        \n        model.eval()\n        model_list.append(model)\n        del model","44eff760":"THRESHOLD = 0.5\ndef precision(y_true, y_pred, threshold_shift=0.5-THRESHOLD):\n\n    # just in case \n    y_pred = K.clip(y_pred, 0, 1)\n\n    # shifting the prediction threshold from .5 if needed\n    y_pred_bin = K.round(y_pred + threshold_shift)\n\n    tp = K.sum(K.round(y_true * y_pred_bin)) + K.epsilon()\n    fp = K.sum(K.round(K.clip(y_pred_bin - y_true, 0, 1)))\n\n    precision = tp \/ (tp + fp)\n    return precision\n\n","9e33ab44":"import os\nimport time\nimport pickle\nimport random\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom collections import namedtuple\nfrom sklearn.metrics import log_loss, roc_auc_score\n\nimport torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\nfrom torch.utils.data import DataLoader\nfrom torch.nn import CrossEntropyLoss, MSELoss\nfrom torch.nn.modules.loss import _WeightedLoss\nimport torch.nn.functional as F\nN_FEAT_TAGS = 29    # No of tags in features.csv\nDEVICE = device\nN_FEATURES = 130\nTHREE_HIDDEN_LAYERS = [400, 400, 400]\n\nclass FFN (nn.Module):\n    \n    def __init__(self, inputCount=130, outputCount=5, hiddenLayerCounts=[150, 150, 150], \n                 drop_prob=0.2, nonlin=torch.nn.SiLU(), isOpAct=False):\n        \n        super(FFN, self).__init__()\n        \n        self.nonlin     = nonlin\n        self.dropout    = nn.Dropout (drop_prob)\n        self.batchnorm0 = nn.BatchNorm1d (inputCount)\n        self.dense1     = nn.Linear (inputCount, hiddenLayerCounts[0])\n        self.batchnorm1 = nn.BatchNorm1d (hiddenLayerCounts[0])\n        self.dense2     = nn.Linear(hiddenLayerCounts[0], hiddenLayerCounts[1])\n        self.batchnorm2 = nn.BatchNorm1d (hiddenLayerCounts[1])\n        self.dense3     = nn.Linear(hiddenLayerCounts[1], hiddenLayerCounts[2])\n        self.batchnorm3 = nn.BatchNorm1d (hiddenLayerCounts[2])        \n        self.outDense   = None\n        if outputCount > 0:\n            self.outDense   = nn.Linear (hiddenLayerCounts[-1], outputCount)\n        self.outActivtn = None\n        if isOpAct:\n            if outputCount == 1 or outputCount == 2:\n                self.outActivtn = nn.Sigmoid ()\n            elif outputCount > 0:\n                self.outActivtn = nn.Softmax (dim=-1)\n        return\n\n    def forward (self, X):\n        \n        # X = self.dropout (self.batchnorm0 (X))\n        X = self.batchnorm0 (X)\n        X = self.dropout (self.nonlin (self.batchnorm1 (self.dense1 (X))))\n        X = self.dropout (self.nonlin (self.batchnorm2 (self.dense2 (X))))\n        X = self.dropout (self.nonlin (self.batchnorm3 (self.dense3 (X))))\n        if self.outDense:\n            X = self.outDense (X)\n        if self.outActivtn:\n            X = self.outActivtn (X)\n        return X\n    \n    \nclass Emb_NN_Model (nn.Module):\n    \n    def __init__(self, three_hidden_layers=THREE_HIDDEN_LAYERS, embed_dim=(N_FEAT_TAGS), csv_file='..\/input\/jane-street-market-prediction\/features.csv'):\n        \n        super (Emb_NN_Model, self).__init__()\n        global N_FEAT_TAGS\n        N_FEAT_TAGS = 29\n        \n        # store the features to tags mapping as a datframe tdf, feature_i mapping is in tdf[i, :]\n        dtype = {'tag_0' : 'int8'}\n        for i in range (1, 29):\n            k = 'tag_' + str (i)\n            dtype[k] = 'int8'\n        t_df = pd.read_csv (csv_file, usecols=range (1,N_FEAT_TAGS+1), dtype=dtype)\n        t_df['tag_29'] = np.array ([1] + ([0] * (t_df.shape[0]-1)) ).astype ('int8')\n        self.features_tag_matrix = torch.tensor (t_df.to_numpy ())\n        N_FEAT_TAGS += 1\n        \n        # print ('self.features_tag_matrix =', self.features_tag_matrix)\n        \n        # embeddings for the tags. Each feature is taken a an embedding which is an avg. of its' tag embeddings\n        self.embed_dim     = embed_dim\n        self.tag_embedding = nn.Embedding (N_FEAT_TAGS+1, embed_dim) # create a special tag if not known tag for any feature\n        self.tag_weights   = nn.Linear (N_FEAT_TAGS, 1)\n        \n        drop_prob          = 0.5\n        self.ffn           = FFN (inputCount=(130+embed_dim), outputCount=0, hiddenLayerCounts=[(three_hidden_layers[0]+embed_dim), (three_hidden_layers[1]+embed_dim), (three_hidden_layers[2]+embed_dim)], drop_prob=drop_prob)\n        self.outDense      = nn.Linear (three_hidden_layers[2]+embed_dim, 5)\n        return\n    \n    def features2emb (self):\n        \"\"\"\n        idx : int feature index 0 to N_FEATURES-1 (129)\n        \"\"\"\n        \n        all_tag_idxs = torch.LongTensor (np.arange (N_FEAT_TAGS)) #.to (DEVICE)              # (29,)\n        tag_bools    = self.features_tag_matrix                                # (130, 29)\n        # print ('tag_bools.shape =', tag_bools.size())\n        f_emb        = self.tag_embedding (all_tag_idxs).repeat (130, 1, 1)    #;print ('1. f_emb =', f_emb) # (29, 7) * (130, 1, 1) = (130, 29, 7)\n        # print ('f_emb.shape =', f_emb.size())\n        f_emb        = f_emb * tag_bools[:, :, None]                           #;print ('2. f_emb =', f_emb) # (130, 29, 7) * (130, 29, 1) = (130, 29, 7)\n        # print ('f_emb.shape =', f_emb.size())\n        \n        # Take avg. of all the present tag's embeddings to get the embedding for a feature\n        s = torch.sum (tag_bools, dim=1)                                       # (130,)\n        # print ('s =', s)              \n        f_emb = torch.sum (f_emb, dim=-2) \/ s[:, None]                         # (130, 7)\n        # print ('f_emb =', f_emb)        \n        # print ('f_emb.shape =', f_emb.shape)\n        \n        # take a linear combination of the present tag's embeddings\n        # f_emb = f_emb.permute (0, 2, 1)                                        # (130, 7, 29)\n        # f_emb = self.tag_weights (f_emb)                      #;print ('3. f_emb =', f_emb)                 # (130, 7, 1)\n        # f_emb = torch.squeeze (f_emb, dim=-1)                 #;print ('4. f_emb =', f_emb)                 # (130, 7)\n        return f_emb\n    \n    def forward (self, cat_featrs, features):\n        \"\"\"\n        when you call `model (x ,y, z, ...)` then this method is invoked\n        \"\"\"\n        \n        cat_featrs = None\n        features   = features.view (-1, N_FEATURES)\n        f_emb      = self.features2emb ()                                #;print ('5. f_emb =', f_emb); print ('6. features =', features) # (130, 7)\n        # print ('features.shape =', features.shape, 'f_emb.shape =', f_emb.shape)\n        features_2 = torch.matmul (features, f_emb)                      #;print ('7. features =', features) # (1, 130) * (130, 7) = (1, 7)\n        # print ('features.shape =', features.shape)\n        \n        # Concatenate the two features (features + their embeddings)\n        features   = torch.hstack ((features, features_2))        \n        \n        x          = self.ffn (features)                               #;print ('8. x.shape = ', x.shape, 'x =', x)   # (1, 7) -> (1, 7)\n        # x        = self.layer_normal (x + features)                  #;print ('9. x.shape = ', x.shape, 'x =', x)   # (1, 7) -> (1, 2)\n        out_logits = self.outDense (x)                                 #;print ('10. out_logits.shape = ', out_logits.shape, 'out_logits =', out_logits)        \n        # return sigmoid probs\n        # out_probs = F.sigmoid (out_logits)\n        return out_logits","442a9a32":"embNN_model = Emb_NN_Model ()\ntry:\n    embNN_model.load_state_dict (torch.load (\"..\/input\/janefastai-featinteraction-embeddingnn5-300x3\/Jane_EmbNN5_auc_400_400_400.pth\"))\nexcept:\n    embNN_model.load_state_dict (torch.load (\"..\/input\/janefastai-featinteraction-embeddingnn5-300x3\/Jane_EmbNN5_auc_400_400_400.pth\", map_location='cpu'))\n    \nembNN_model = embNN_model.eval ()","8fa01d6b":"import keras.backend as K\ndef profitable(y_true, y_pred):\n    a=K.constant(0.5,dtype='float32')\n    b=K.constant(1,dtype='float32')\n    c=K.constant(0,dtype='float32')\n    y_pred = K.greater(y_pred , a)\n    y_true= K.greater(y_true , a)\n    y_true_f = K.switch(K.equal(y_pred, y_true), c,K.switch(K.equal(y_pred, True), b, a))\n    #y_true_f=\n    return K.sum(y_true_f)\n","f3b6cb5c":"!ls ..\/input\/jane-street-with-keras-nn-overfit","1e667f39":"from tensorflow.keras.layers import Input, Dense, BatchNormalization, Dropout, Concatenate, Lambda, GaussianNoise, Activation\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.layers.experimental.preprocessing import Normalization\nimport tensorflow as tf\nimport tensorflow_addons as tfa\n\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom random import choices\n\n\nSEED = 1155\n\nnp.random.seed(SEED)\n\n# fit\ndef create_mlp(\n    num_columns, num_labels, hidden_units, dropout_rates, label_smoothing, learning_rate\n):\n\n    inp = tf.keras.layers.Input(shape=(num_columns,))\n    x = tf.keras.layers.BatchNormalization()(inp)\n    x = tf.keras.layers.Dropout(dropout_rates[0])(x)\n    for i in range(len(hidden_units)):\n        x = tf.keras.layers.Dense(hidden_units[i])(x)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n        x = tf.keras.layers.Dropout(dropout_rates[i + 1])(x)\n    \n    x = tf.keras.layers.Dense(num_labels)(x)\n    out = tf.keras.layers.Activation(\"sigmoid\")(x)\n\n    model = tf.keras.models.Model(inputs=inp, outputs=out)\n    model.compile(\n        optimizer=tfa.optimizers.RectifiedAdam(learning_rate=learning_rate),\n        loss=tf.keras.losses.BinaryCrossentropy(label_smoothing=label_smoothing),\n        metrics=tf.keras.metrics.AUC(name=\"AUC\"),\n    )\n\n    return model\n\nepochs = 200\nbatch_size = 4096\nhidden_units = [160, 160, 160]\ndropout_rates = [0.2, 0.2, 0.2, 0.2]\nlabel_smoothing = 1e-2\nlearning_rate = 1e-3\n\ntf.keras.backend.clear_session()\ntf.random.set_seed(SEED)\nclf = create_mlp(\n    len(feat_cols), 5, hidden_units, dropout_rates, label_smoothing, learning_rate\n    )\nclf.load_weights('..\/input\/jane-street-with-keras-nn-overfit\/model.h5')\n\nclf.call = tf.function(clf.call, experimental_relax_shapes=True)\n#tf_models = [clf]\n#del clf\n","4b6b0814":"'''\ntrain = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv')\nmaxim = train['date'].max(axis=0) \nif (maxim>400):\n    train = train.sample(frac=0.7).reset_index(drop = True) \ntrain = train[train['weight'] != 0]\nfeatures_mean = []\nfeatures = [c for c in train.columns if 'feature' in c]\nfor i in features:\n    x = train[i].mean()  \n    features_mean.append(x)\n    train[i] = train[i].fillna(x)\ntrain['action'] = ((train['resp'].values) *  np.sign(train['weight'])>0).astype(int)\n\ntrain.to_csv(\"newtraining.csv\")\n'''\ntrain = pd.read_csv('\/kaggle\/input\/reduced-jane\/newtraining.csv')\nresp_cols = ['resp_1','resp_2', 'resp_3','resp', 'resp_4']\nX_train = train.loc[:, train.columns.str.contains('feature')]\ny_train = np.stack([(train[c] > 0).astype('int') for c in resp_cols]).T\nnewModTrainY=train.loc[:, train.columns.str.contains('action')]\n#f_mean = np.mean(train[features[1:]].values,axis=0)\nmodels=[]\naddata =pd.DataFrame()\nweight =train['weight']\ndel train\n#aditional model \n\n\nepochs = 50\nbatch_size = 4098\nhidden_units = [160,160,160]\ndropout_rates = [0.2,0.2,0.2,0.2]\nlabel_smoothing = 1e-2\nlearning_rate = 1e-3\ntorch.cuda.empty_cache() \n\n\n\n\nj=0\nx_tt = X_train.values\ncross_41_42_43 = x_tt[:, 41] + x_tt[:, 42] + x_tt[:, 43]\ncross_1_2 = x_tt[:, 1] \/ (x_tt[:, 2] + 1e-5)\nfeature_inp = np.concatenate((\n    x_tt,\n    np.array(cross_41_42_43).reshape(x_tt.shape[0], 1),\n    np.array(cross_1_2).reshape(x_tt.shape[0], 1),\n    ), axis=1)\na=x_tt.shape[0]\ndel cross_41_42_43\ndel cross_1_2\n'''\nwith torch.no_grad():\n    torch_pred = np.zeros((a, len(target_cols)))\n    for model in model_list:\n        torch_pred += model(torch.tensor(feature_inp, dtype=torch.float).to(device)).sigmoid().detach().cpu().numpy() \/ NFOLDS\n            \n    addata['mod'+str(0)]=torch_pred[:,0]\n    addata['mod'+str(1)]=torch_pred[:,1]\n    addata['mod'+str(2)]=torch_pred[:,2]\n    addata['mod'+str(3)]=torch_pred[:,3]\n    addata['mod'+str(4)]=torch_pred[:,4]\n    del torch_pred\n    torch.cuda.empty_cache() \n'''\n'''\nans =clf.predict(X_train)\naddata['mod'+str(0)]=ans[:,0]\naddata['mod'+str(1)]=ans[:,1]\naddata['mod'+str(2)]=ans[:,2]\naddata['mod'+str(3)]=ans[:,3]\naddata['mod'+str(4)]=ans[:,4]\n#j+=1\n'''\n'''\ntf.config.optimizer.set_jit(True)\ndel j\ndel feature_inp\ntfmodels=[]\nfor j in range(1,4):\n    clf = tf.keras.models.load_model('..\/input\/models\/mod'+str(j))\n    clf.call = tf.function(clf.call, experimental_relax_shapes=True)\n    tfmodels.append(clf)\n    del clf\n    torch.cuda.empty_cache() \naddata['mod5'] ,addata['mod6'],addata['mod7']= [model(x_tt, training = False).numpy() for model in tfmodels]\ntorch.cuda.empty_cache() \ndel x_tt\ndel X_train\ndel y_train\n'''\n#train0 = pd.read_csv('\/kaggle\/input\/outputsfrommodelsontraining\/predictions2.csv').iloc[:,1:]\ntrain1 = pd.read_csv('\/kaggle\/input\/outputsfrommodelsontraining\/predictions1.csv').iloc[:,1:]\ntrain2 = pd.read_csv('\/kaggle\/input\/outputsfrommodelsontraining\/predictions2.csv').iloc[:,1:]\ntrain3=pd.concat([train1,train2],axis=1)\n\ntrain3['weight']=weight\n#train3=pd.concat([train3,train0],axis=1)\n\ndel train1\ndel train2\n\nepochs = 15\nbatch_size = 4098\nhidden_units = [5]\ndropout_rates = [0.2,0.2]\nlabel_smoothing = 1e-2\nlearning_rate = 1e-3\ntorch.cuda.empty_cache() \ndef create_mlp(\n    num_columns, num_labels, hidden_units, dropout_rates, label_smoothing, learning_rate\n):\n\n    inp = tf.keras.layers.Input(shape=(num_columns,))\n    x = tf.keras.layers.BatchNormalization()(inp)\n    x = tf.keras.layers.Dropout(dropout_rates[0])(x)\n    for i in range(len(hidden_units)):\n        x = tf.keras.layers.Dense(hidden_units[i])(x)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n        x = tf.keras.layers.Dropout(dropout_rates[i + 1])(x)\n    \n    x = tf.keras.layers.Dense(num_labels)(x)\n    out = tf.keras.layers.Activation(\"sigmoid\")(x)\n\n    model = tf.keras.models.Model(inputs=inp, outputs=out)\n    model.compile(\n        optimizer=tfa.optimizers.RectifiedAdam(learning_rate=learning_rate),\n        loss=tf.keras.losses.BinaryCrossentropy(label_smoothing=label_smoothing),\n        metrics=tf.keras.metrics.AUC(name=\"AUC\"),\n    )\n\n    return model\n#metrics\n#metrics=tf.keras.metrics.FalsePositives(thresholds=0.5),\nfinLayer = create_mlp(\n    14, 1, hidden_units, dropout_rates, label_smoothing, learning_rate\n    )\nfinLayer.fit(train3.to_numpy(), newModTrainY, epochs=epochs, batch_size=batch_size, verbose=2)\n\ndel newModTrainY\ntorch.cuda.empty_cache() \n\ntfmodels=[]\nfor j in range(1,4):\n    clf1 = tf.keras.models.load_model('..\/input\/models\/mod'+str(j))\n    clf1.call = tf.function(clf1.call, experimental_relax_shapes=True)\n    tfmodels.append(clf1)\n    del clf1\n    torch.cuda.empty_cache() \n\n","f5e43cbd":"\nfinLayer.call = tf.function(finLayer.call, experimental_relax_shapes=True)","855d31ce":"import numpy as np\nfrom numba import njit\n\n@njit\ndef fillna_npwhere_njit(array, values):\n    if np.isnan(array.sum()):\n        array = np.where(np.isnan(array), values, array)\n    return array","f7a50ac8":"from numba import jit\n@jit(forceobj=True)\ndef prepro(test_df,feat_cols,f_mean):\n    x_tt = test_df.loc[:, feat_cols].values\n    if np.isnan(x_tt.sum()):\n        x_tt = np.nan_to_num(x_tt) + np.isnan(x_tt) * f_mean\n    #fillna_npwhere_njit(x_tt, f_mean)\n    cross_41_42_43 = x_tt[:, 41] + x_tt[:, 42] + x_tt[:, 43]\n    cross_1_2 = x_tt[:, 1] \/ (x_tt[:, 2] + 1e-5)\n    feature_inp = np.concatenate((\n        x_tt,\n        np.array(cross_41_42_43).reshape(x_tt.shape[0], 1),\n        np.array(cross_1_2).reshape(x_tt.shape[0], 1),\n    ), axis=1)\n\n    return x_tt,feature_inp","e7d7c127":"data=np.zeros((1,14))\nK.set_learning_phase(False)\nif True:\n    import janestreet\n\n    env = janestreet.make_env()\n    env_iter = env.iter_test()\n\n    for (test_df, pred_df) in tqdm(env_iter):\n        if test_df['weight'].item() != 0:\n            data[0,13]=test_df['weight']\n            \n            x_tt = test_df.loc[:, feat_cols].values\n            if np.isnan(x_tt.sum()):\n                x_tt = np.nan_to_num(x_tt) + np.isnan(x_tt) * f_mean\n            #fillna_npwhere_njit(x_tt, f_mean)\n            cross_41_42_43 = x_tt[:, 41] + x_tt[:, 42] + x_tt[:, 43]\n            cross_1_2 = x_tt[:, 1] \/ (x_tt[:, 2] + 1e-5)\n            feature_inp = np.concatenate((\n                x_tt,\n                np.array(cross_41_42_43).reshape(x_tt.shape[0], 1),\n                np.array(cross_1_2).reshape(x_tt.shape[0], 1),\n            ), axis=1)\n            \n            #x_tt,feature_inp=prepro(test_df,feat_cols,f_mean)\n            # torch_pred\n            torch_pred = np.zeros((1, len(target_cols)))\n            for model in model_list:\n                torch_pred += model(torch.tensor(feature_inp, dtype=torch.float).to(device)).sigmoid().detach().cpu().numpy() \/ NFOLDS\n            data[0,0:5] =torch_pred\n            \n            # tf_pred\n            data[0,5:8] = [model(x_tt, training = False) for model in tfmodels]\n            data[0,8:13]=clf(x_tt, training = False)\n            # avg\n            \n            #x_tt1    = torch.tensor (x_tt[i,:]).float ().view (-1, 130)\n            #data[0,14]= np.median (torch.sigmoid (embNN_model (None,x_tt1)).detach ().cpu ().numpy ().reshape ((-1, 5)), axis=1)\n            pred = finLayer(data, training = False).numpy()\n            pred_df.action = (pred[0] >= 0.5).astype(int)\n        else:\n            pred_df.action = 0\n        env.predict(pred_df)","0b647f67":"new way of determining finalisation ","1562f8a8":"# **Don't forget to upvote if it helps \ud83d\ude0a**","e29b29a0":"will be adding aditional infor to aid future ","b80509aa":"# **adittional datasets used **\nhttps:\/\/www.kaggle.com\/jamespett\/outputsfrommodelsontraining\n\n\nreduced jane was an output file from the origional code in the  publicly avalible https:\/\/www.kaggle.com\/jamespett\/notebook857ba5a22d and itself is publicly avalible here - https:\/\/www.kaggle.com\/jamespett\/reduced-jane\n\n\nadditional models\nhttps:\/\/www.kaggle.com\/jamespett\/models","c9d32cde":"## tensorflow part","261a4a1b":"# Thank you","cf711e1b":"a new way of determing how the model is working ","327fe414":"## pytorch train code:\nhttps:\/\/www.kaggle.com\/a763337092\/neural-network-starter-pytorch-version<br \/>\nhttps:\/\/www.kaggle.com\/a763337092\/pytorch-resnet-starter-training\n\n## tensorflow training code:\nhttps:\/\/www.kaggle.com\/code1110\/jane-street-with-keras-nn-overfit\n\n## reference notebook:\nhttps:\/\/www.kaggle.com\/a763337092\/blending-tensorflow-and-pytorch","035da7bc":"embedings"}}