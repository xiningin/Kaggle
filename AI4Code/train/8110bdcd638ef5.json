{"cell_type":{"3548fc27":"code","27c01e6a":"code","bad6b702":"code","d46af4c4":"code","8015eb8a":"code","31f87644":"code","2a61994d":"code","6e5845ef":"code","bb5b41f0":"code","af30e4dc":"code","f7227f27":"code","8c8af974":"code","dc90b39e":"code","1dafe8b5":"code","74f53ce2":"code","de167b1d":"code","ebaa0649":"code","7c31d558":"code","d21536e5":"code","bcfbdbfd":"code","984969e7":"code","6217f326":"code","e5799027":"code","000eada5":"code","2353327d":"code","e7ecd6b5":"code","9551af1a":"code","4426d59f":"code","257f4870":"code","037f6a4f":"code","ae6cb9fa":"code","29c24dfd":"code","9f97e593":"code","f59da4bf":"code","e71ecd17":"markdown","c1cb232d":"markdown","a8276cb0":"markdown","6ec697a9":"markdown","67b96286":"markdown","f3efa0d1":"markdown","c4d0fbf5":"markdown","9e460a2d":"markdown","8f6a6a69":"markdown","40bef0e3":"markdown","2852c109":"markdown","57d0016a":"markdown","024d2c2a":"markdown","22e2ce50":"markdown","33f2de60":"markdown","533d7cdb":"markdown","871a0747":"markdown","18f7adee":"markdown","b442c9a6":"markdown","62d8ee19":"markdown","b76926af":"markdown","180da71b":"markdown","72a3b388":"markdown"},"source":{"3548fc27":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","27c01e6a":"data = pd.read_csv(\"\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")","bad6b702":"data.head()","d46af4c4":"data[\"class\"].value_counts()\ndata[\"class\"] = [1 if i==\"Abnormal\" else 0 for i in data[\"class\"]]","8015eb8a":"data[\"class\"]","31f87644":"y = data[\"class\"].values\nx = data.drop([\"class\"],axis=1)","2a61994d":"x_ = (x - np.min(x))\/(np.max(x)-np.min(x)).values","6e5845ef":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test = train_test_split(x_,y,test_size=0.2,random_state=40)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T","bb5b41f0":"def initialize_weights_bias(dimension):\n    \n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b\n\ndef sigmoid(z):\n    \n    y_head = 1\/(1+np.exp(-z))\n    return y_head","af30e4dc":"def forward_backward_propagation(w,b,x_teain,y_train):\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]      # x_train.shape[1]  is for scaling\n    \n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] # x_train.shape[1]  is for scaling\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                 # x_train.shape[1]  is for scaling\n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    \n    return cost,gradients","f7227f27":"def update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    for i in range(number_of_iterarion):\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","8c8af974":"def predict(w,b,x_test):\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","dc90b39e":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]  # that is 30\n    w,b = initialize_weights_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n\n    # Print test Errors\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 300)","1dafe8b5":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nprint(\"accurarcy {}\".format(lr.score(x_test.T,y_test.T)))","74f53ce2":"y = data[\"class\"].values \nx = data.drop([\"class\"],axis=1)","de167b1d":"# Normalization\nx_ = (x - np.min(x))\/(np.max(x)-np.min(x))\n# Train Test Split\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=21)\n\n# Knn Model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 5)\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\nprint(\" {} nn score: {} \".format(5,knn.score(x_test,y_test)))","ebaa0649":"# Find k value\nscore_list = []\nfor i in range(1,20):\n    knn2 = KNeighborsClassifier(n_neighbors = i)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\n    \nplt.plot(range(1,20),score_list)\nplt.xlabel(\"k values\")\nplt.ylabel(\"accuracy\")\nplt.show()\n    ","7c31d558":"y = data[\"class\"].values \nx = data.drop([\"class\"],axis=1)\n\n# Normalization\nx_ = (x - np.min(x))\/(np.max(x)-np.min(x))\n\n# Train Test Split\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=21)","d21536e5":"# SVM\nfrom sklearn.svm import SVC\nsvm = SVC(random_state = 1)\nsvm.fit(x_train,y_train)\nprint(\"print accuracy of svm algo: \",svm.score(x_test,y_test))\n\n","bcfbdbfd":"y = data[\"class\"].values \nx = data.drop([\"class\"],axis=1)\n\n# Normalization\nx_ = (x - np.min(x))\/(np.max(x)-np.min(x))\n\n# Train Test Split\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=21)","984969e7":"# Naive Bayes \nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train,y_train)\n\nprint(\"score: \", nb.score(x_test,y_test))","6217f326":"y = data[\"class\"].values \nx = data.drop([\"class\"],axis=1)\n\n# Normalization\nx_ = (x - np.min(x))\/(np.max(x)-np.min(x))\n\n# Train Test Split\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=21)","e5799027":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)\n\nprint(\"score: \", dt.score(x_test,y_test))","000eada5":"y = data[\"class\"].values \nx = data.drop([\"class\"],axis=1)\n\n# Normalization\nx_ = (x - np.min(x))\/(np.max(x)-np.min(x))\n\n# Train Test Split\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=21)","2353327d":"#%%  random forest\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators = 100,random_state = 1)\nrf.fit(x_train,y_train)\nprint(\"random forest algo result: \",rf.score(x_test,y_test))","e7ecd6b5":"y = data[\"class\"].values \nx = data.drop([\"class\"],axis=1)\n\n# Normalization\nx_ = (x - np.min(x))\/(np.max(x)-np.min(x))\n\n# Train Test Split\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=21)","9551af1a":"y_pred = rf.predict(x_test)\ny_true = y_test\n\n#%% confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true,y_pred)\n\n\n# %% cm visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()\n","4426d59f":"data = pd.read_csv(\"\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")\nplt.scatter(data['pelvic_radius'],data['degree_spondylolisthesis'])\nplt.xlabel('pelvic_radius')\nplt.ylabel('degree_spondylolisthesis')\nplt.show()","257f4870":"data2 = data.loc[:,['degree_spondylolisthesis','pelvic_radius']]\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters = 4)\nkmeans.fit(data2)\nlabels = kmeans.predict(data2)\nplt.scatter(data['pelvic_radius'],data['degree_spondylolisthesis'],c=labels)\nplt.xlabel('pelvic_radius')\nplt.ylabel('degree_spondylolisthesis')\nplt.show()","037f6a4f":"df = pd.DataFrame({'labels':labels,\"class\":data['class']})\nct = pd.crosstab(df['labels'],df['class'])\nprint(ct)","ae6cb9fa":"# inertia\ninertia_list = np.empty(8)\nfor i in range(1,8):\n    kmeans = KMeans(n_clusters=i)\n    kmeans.fit(data2)\n    inertia_list[i] = kmeans.inertia_\nplt.plot(range(0,8),inertia_list,'-o')\nplt.xlabel('Number of cluster')\nplt.ylabel('Inertia')\nplt.show()","29c24dfd":"data = pd.read_csv(\"\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")\ndata3 = data.drop('class',axis=1)","9f97e593":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\nscalar = StandardScaler()\nkmeans = KMeans(n_clusters=2)\npipe = make_pipeline(scalar,kmeans)\npipe.fit(data3)\nlabels = pipe.predict(data3)\ndf = pd.DataFrame({'labels':labels,\"class\":data[\"class\"]})\nct = pd.crosstab(df['labels'],df['class'])\nprint(ct)","f59da4bf":"from scipy.cluster.hierarchy import linkage,dendrogram\nmerg = linkage(data3.iloc[200:220,:],method = 'single')\ndendrogram(merg,leaf_rotation=90, leaf_font_size=6)\nplt.show()","e71ecd17":"<a id=\"10\"><\/a> <br>\n# Kmeans Clustering","c1cb232d":"<a id=\"13\"><\/a> <br>\n# Hierachy","a8276cb0":"<a id=\"2\"><\/a> <br>\n# Logistic Regression Classification","6ec697a9":"## Content:\n\n### A. [Supervised Learning](#1)\n\n  * [Logistic Regression Classification](#2)\n  * [K-Nearest Neighbour (KNN) Classification](#3)\n  * [Support Vector Machine (SVM) Classification](#4)\n  * [Naive Bayes Classification](#5)\n  * [Decision Tree Classification](#6)\n  * [Random Forest Classification](#7)\n  * [Evaluation Classification Models](#8)\n  \n### B. [Unsupervised Learning](#9)\n\n  * [Kmeans Clustering](#10)\n  * [Evaluation of Clustering](#11)\n  * [Standardization](#12)\n  * [Hierachy](#13)","67b96286":"<a id=\"9\"><\/a> <br>\n# B. Unsupervised Learning","f3efa0d1":"<a id=\"1\"><\/a> <br>\n# A. Supervised Learning","c4d0fbf5":"* so, we updated \"Abnornormal\" values to 1 \"Normal\" values to 0","9e460a2d":"# Machine Learning\n","8f6a6a69":"## Parameter Initialize and Sigmoid Function","40bef0e3":"## Normalization","2852c109":"<a id=\"12\"><\/a> <br>\n# Standardization","57d0016a":"<a id=\"6\"><\/a> <br>\n# Decision Tree Classification","024d2c2a":"## Forward and Backward Propagation","22e2ce50":"<a id=\"8\"><\/a> <br>\n# Evaluation Classification Models","33f2de60":"<a id=\"4\"><\/a> <br>\n# Support Vector Machine (SVM) Classification","533d7cdb":"<a id=\"7\"><\/a> <br>\n# Random Forest Classification","871a0747":"<a id=\"3\"><\/a> <br>\n# K-Nearest Neighbour (KNN) Classification","18f7adee":"## Prediction","b442c9a6":"<a id=\"11\"><\/a> <br>\n# Evaluation of Clustering","62d8ee19":"## Sklearn with Logistic Regression","b76926af":"## Updating Parameters","180da71b":"## Train Test Split","72a3b388":"<a id=\"5\"><\/a> <br>\n# Naive Bayes Classification"}}