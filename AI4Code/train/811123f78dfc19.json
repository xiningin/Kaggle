{"cell_type":{"aebc50a2":"code","ceb7374a":"code","1575842d":"code","df464d30":"code","366e892f":"code","e27ba468":"code","bced070d":"code","7817d831":"markdown","7ad85548":"markdown","033c26fb":"markdown","c7ef0c9c":"markdown","257e539d":"markdown"},"source":{"aebc50a2":"%%writefile submission.py","ceb7374a":"%%writefile submission.py\n#!\/usr\/bin\/env python3\nfrom __future__ import annotations\n\n##### \n##### .\/kaggle_compile.py games\/connectx\/agents\/AlphaBetaAgent.py\n##### \n##### 2020-06-24 12:38:03+01:00\n##### \n##### ai-pacman\tgit@github.com:JamesMcGuigan\/ai-pacman.git (fetch)\n##### ai-pacman\tgit@github.com:JamesMcGuigan\/ai-pacman.git (push)\n##### ecosystem-research\tgit@github.com:JamesMcGuigan\/ecosystem-research.git (fetch)\n##### ecosystem-research\tgit@github.com:JamesMcGuigan\/ecosystem-research.git (push)\n##### kaggle-arc\tgit@github.com:JamesMcGuigan\/kaggle-arc.git (fetch)\n##### kaggle-arc\tgit@github.com:JamesMcGuigan\/kaggle-arc.git (push)\n##### origin\tgit@github.com:JamesMcGuigan\/ai-games.git (fetch)\n##### origin\tgit@github.com:JamesMcGuigan\/ai-games.git (push)\n##### udacity-artificial-intelligence\thttps:\/\/github.com\/JamesMcGuigan\/udacity-artificial-intelligence (fetch)\n##### udacity-artificial-intelligence\thttps:\/\/github.com\/JamesMcGuigan\/udacity-artificial-intelligence (push)\n##### \n#####   kaggle-arc        583a4c1 kaggle_compile.py -> submission.py + submission.csv\n#####   knights-isolation 27d0916 3_Adversarial Search | udacity submit requires kaggle_compile.py\n#####   master            f296c88 refactor: AlphaBetaAgent.agent -> AlphaBetaAgent.agent(kwargs)(observation, configuration)\n#####   n-queens          ddb0d49 prolog | nqueens | print solution to nqueens.txt\n##### * numba             88fa481 [ahead 3] ConnectX | AlphaBetaAgent | exit loop via raise TimeoutError\n##### \n##### 88fa481f1803f20c88654ce21c5ce5dcea14aa95\n##### \n\n#####\n##### START util\/tuplize.py\n#####\n\nfrom struct import Struct\n\nimport numpy as np\n\n\n\n# noinspection PyTypeChecker\ndef tuplize(value):\n    \"\"\"\n    Recursively cast to an immutable tuple that can be hashed\n\n    >>> tuplize([])\n    ()\n    >>> tuplize({\"a\": 1})\n    (('a', 1),)\n    >>> tuplize({\"a\": 1})\n    (('a', 1),)\n    >>> tuplize(np.array([1,2,3]))\n    (1, 2, 3)\n    >>> tuplize(np.array([[1,2,3],[4,5,6]]))\n    ((1, 2, 3), (4, 5, 6))\n    >>> tuplize('string')\n    'string'\n    >>> tuplize(42)\n    42\n    \"\"\"\n    if isinstance(value, (list,tuple,set)): return tuple(tuplize(v) for v in value)\n    if isinstance(value, np.ndarray):\n        if len(value.shape) == 1: return tuple(value.tolist())\n        else:                     return tuple(tuplize(v) for v in value.tolist())\n    if isinstance(value, (dict,Struct)):    return tuple(tuplize(v) for v in value.items())\n    return value\n\n\nif __name__ == '__main__':\n    # python3 -m doctest -v util\/tuplize.py\n    import doctest\n    doctest.testmod()\n\n\n#####\n##### END   util\/tuplize.py\n#####\n\n#####\n##### START util\/vendor\/cached_property.py\n#####\n\n# -*- coding: utf-8 -*-\n# Source: https:\/\/github.com\/pydanny\/cached-property\/blob\/master\/cached_property.py\n\n# Simplified function for performance\nclass cached_property(object):\n    \"\"\"\n    A property that is only computed once per instance and then replaces itself\n    with an ordinary attribute. Deleting the attribute resets the property.\n    Source: https:\/\/github.com\/bottlepy\/bottle\/commit\/fa7733e075da0d790d809aa3d2f53071897e6f76\n    \"\"\"\n\n    def __init__(self, func):\n        self.__doc__ = getattr(func, \"__doc__\")\n        self.func = func\n        self.func_name = self.func.__name__\n\n    def __get__(self, obj, cls):\n        if obj is None: return self\n        value = obj.__dict__[self.func_name] = self.func(obj)\n        return value\n\n\n#####\n##### END   util\/vendor\/cached_property.py\n#####\n\n#####\n##### START games\/connectx\/core\/KaggleGame.py\n#####\n\n\nimport time\nfrom struct import Struct\nfrom typing import Dict\nfrom typing import List\n\n# from util.tuplize import tuplize\n# from util.vendor.cached_property import cached_property\n\n\n\nclass KaggleGame:\n    \"\"\"\n    This is a generic baseclass wrapper around kaggle_environments\n    def agent(observation, configuration):\n        game = KaggleGame(observation, configuration)\n        return random.choice(game.actions())\n    \"\"\"\n\n    def __init__(self, observation, configuration, heuristic_class, verbose=True):\n        self.time_start    = time.perf_counter()\n        self.observation   = observation\n        self.configuration = configuration\n        self.verbose       = verbose\n        self.player_id     = None\n        self._hash         = None\n        self.heuristic_class = heuristic_class\n\n\n    def __hash__(self):\n        \"\"\"Return an id for caching purposes \"\"\"\n        self._hash = self._hash or hash(tuplize((self.observation, self.configuration)))\n        # self._hash = self._hash or self.board.tobytes()\n        return self._hash\n\n\n    ### Result Methods\n\n    @cached_property\n    def actions( self ) -> List:\n        \"\"\"Return a list of valid actions\"\"\"\n        raise NotImplementedError\n\n    def result( self, action ) -> KaggleGame:\n        \"\"\"This returns the next KaggleGame after applying action\"\"\"\n        observation = self.result_observation(self.observation, action)\n        return self.__class__(observation, self.configuration, self.verbose)\n\n    def result_observation( self, observation: Struct, action ) -> Dict:\n        \"\"\"This returns the next observation after applying action\"\"\"\n        raise  NotImplementedError\n        # return copy(self.observation)\n\n\n\n    ### Heuristic Methods\n\n    @cached_property\n    def heuristic(self):\n        \"\"\"Delay resolution until after parentclass constructor has finished\"\"\"\n        return self.heuristic_class(self)\n\n    @cached_property\n    def gameover( self ) -> bool:\n        \"\"\"Has the game reached a terminal game?\"\"\"\n        if self.heuristic:\n            return self.heuristic.gameover\n        else:\n            return len( self.actions ) == 0\n\n    @cached_property\n    def score( self ) -> float:\n        return self.heuristic.score\n\n    @cached_property\n    def utility( self ) -> float:\n        return self.heuristic.utility\n\n\n#####\n##### END   games\/connectx\/core\/KaggleGame.py\n#####\n\n#####\n##### START games\/connectx\/core\/PersistentCacheAgent.py\n#####\n\nimport atexit\nimport gzip\nimport math\nimport os\nimport pickle\nimport time\nimport zlib\n\n\n\nclass PersistentCacheAgent:\n    persist = False\n    cache   = {}\n    verbose = True\n\n    def __new__(cls, *args, **kwargs):\n        # noinspection PyUnresolvedReferences\n        for parentclass in cls.__mro__:  # https:\/\/stackoverflow.com\/questions\/2611892\/how-to-get-the-parents-of-a-python-class\n            if cls is parentclass: continue\n            if cls.cache is getattr(parentclass, 'cache', None):\n                cls.cache = {}  # create a new cls.cache for each class\n                break\n        instance = object.__new__(cls)\n        return instance\n\n    def __init__(self, *args, **kwargs):\n        super().__init__()\n        if not self.persist: return  # disable persistent caching\n        self.load()\n        self.autosave()\n\n    def autosave( self ):\n        # Autosave on Ctrl-C\n        atexit.unregister(self.__class__.save)\n        atexit.register(self.__class__.save)\n\n    # def __del__(self):\n    #     self.save()\n\n    @classmethod\n    def filename( cls ):\n        return '.\/.cache\/' + cls.__name__ + '.zip.pickle'\n\n    @classmethod\n    def load( cls ):\n        if not cls.persist: return  # disable persistent caching\n        if cls.cache:       return  # skip loading if the file is already in class memory\n        try:\n            # class cache may be more upto date than the pickle file, so avoid race conditions with multiple instances\n            filename   = cls.filename()\n            start_time = time.perf_counter()\n            with gzip.GzipFile(filename, 'rb') as file:  # reduce filesystem cache_size\n                # print(\"loading: \"+cls.file )\n                data = pickle.load(file)\n                cls.cache.update({ **data, **cls.cache })\n                if cls.verbose:\n                    print(\"loaded: {:40s} | {:4.1f}MB in {:4.1f}s | entries: {}\".format(\n                        filename,\n                        os.path.getsize(filename)\/1024\/1024,\n                        time.perf_counter() - start_time,\n                        cls.cache_size(cls.cache),\n                    ))\n        except (IOError, TypeError, EOFError, zlib.error) as exception:\n            pass\n\n    @classmethod\n    def save( cls ):\n        if not cls.persist: return  # disable persistent caching\n        # cls.load()                # update any new information from the file\n        if cls.cache:\n            filename = cls.filename()\n            dirname  = os.path.dirname(filename)\n            if not os.path.exists(dirname): os.mkdir(dirname)\n            start_time = time.perf_counter()\n            # print(\"saving: \" + filename )\n            with gzip.GzipFile(filename, 'wb') as file:  # reduce filesystem cache_size\n                pickle.dump(cls.cache, file)\n                if cls.verbose:\n                    print(\"wrote:  {:40s} | {:4.1f}MB in {:4.1f}s | entries: {}\".format(\n                        filename,\n                        os.path.getsize(filename)\/1024\/1024,\n                        time.perf_counter() - start_time,\n                        cls.cache_size(cls.cache),\n                    ))\n\n    @staticmethod\n    def cache_size( data ):\n        return sum([\n            len(value) if isinstance(key, str) and isinstance(value, dict) else 1\n            for key, value in data.items()\n        ])\n\n    @classmethod\n    def reset( cls ):\n        cls.cache = {}\n        cls.save()\n\n\n    ### Caching\n    @classmethod\n    def cache_function( cls, function, game, player_id, *args, **kwargs ):\n        hash = (player_id, game)  # QUESTION: is player_id required for correct caching between games?\n        if function.__name__ not in cls.cache:   cls.cache[function.__name__] = {}\n        if hash in cls.cache[function.__name__]: return cls.cache[function.__name__][hash]\n\n        score = function(game, *args, **kwargs)\n        cls.cache[function.__name__][hash] = score\n        return score\n\n    @classmethod\n    def cache_infinite( cls, function, game, player_id, *args, **kwargs ):\n        # Don't cache heuristic values, only terminal states\n        hash = (player_id, game)  # QUESTION: is player_id required for correct caching between games?\n        if function.__name__ not in cls.cache:   cls.cache[function.__name__] = {}\n        if hash in cls.cache[function.__name__]: return cls.cache[function.__name__][hash]\n\n        score = function(game, player_id, *args, **kwargs)\n        if abs(score) == math.inf: cls.cache[function.__name__][hash] = score\n        return score\n\n\n#####\n##### END   games\/connectx\/core\/PersistentCacheAgent.py\n#####\n\n#####\n##### START games\/connectx\/core\/ConnectX.py\n#####\n\nfrom copy import copy\nfrom struct import Struct\nfrom typing import Callable\nfrom typing import List\nfrom typing import Tuple\nfrom typing import Union\n\nimport numpy as np\n\n# from games.connectx.core.KaggleGame import KaggleGame\n# from util.vendor.cached_property import cached_property\n\n\n\nclass ConnectX(KaggleGame):\n    players = 2\n\n    # observation   = {'mark': 1, 'board': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}\n    # configuration = {'columns': 7, 'rows': 6, 'inarow': 4, 'steps': 1000, 'timeout': 2}\n    def __init__( self, observation, configuration, heuristic_class: Callable=None, verbose=True, **kwargs ):\n        super().__init__(observation, configuration, heuristic_class, verbose)\n        self.rows:      int = configuration.rows\n        self.columns:   int = configuration.columns\n        self.inarow:    int = configuration.inarow\n        self.timeout:   int = configuration.timeout\n        self.player_id: int = observation.mark\n        self.board: np.ndarray = self.cast_board(observation.board)  # Don't modify observation.board\n        self.board.setflags(write=False)  # WARN: https:\/\/stackoverflow.com\/questions\/5541324\/immutable-numpy-array#comment109695639_5541452\n\n\n    ### Magic Methods\n\n    def __hash__(self):\n        return hash(self.board.tobytes())\n\n    def __eq__(self, other):\n        if not isinstance(other, self.__class__): return False\n        return self.board.tobytes() == other.board.tobytes()\n\n\n    ### Utility Methods\n\n    def cast_board( self, board: Union[np.ndarray,List[int]], copy=False ) -> np.ndarray:\n        if isinstance(board, np.ndarray):\n            if copy: return board.copy()\n            else:    return board\n        else:\n            board = np.array(board, dtype=np.int8).reshape(self.rows, self.columns)\n            return board\n\n\n\n\n    ### Result Methods\n\n    def result( self, action ) -> 'ConnectX':\n        \"\"\"This returns the next KaggleGame after applying action\"\"\"\n        if not hasattr(self, '_results_cache'): self._results_cache = {}\n        if action not in self._results_cache:\n            observation = self.result_observation(self.observation, action)\n            result      = self.__class__(observation, self.configuration, self.heuristic_class, self.verbose)\n            self._results_cache[action] = result\n        return self._results_cache[action]\n\n    def result_observation( self, observation: Struct, action: int ) -> Struct:\n        output = copy(observation)\n        output.board = self.result_board(observation.board, action, observation.mark)\n        output.mark  = 2 if observation.mark == 1 else 1\n        return output\n\n    def result_board( self, board: np.ndarray, action: int, mark: int ) -> np.ndarray:\n        \"\"\"This returns the next observation after applying an action\"\"\"\n        next_board = self.cast_board(board, copy=True)\n        coords     = self.get_coords(next_board, action)\n        if None not in coords:\n            next_board[coords] = mark\n        return next_board\n\n    def get_coords( self, board: np.ndarray, action: int ) -> Tuple[int,int]:\n        col = action if 0 <= action < self.columns else None\n        row = np.count_nonzero( board[:,col] == 0 ) - 1\n        if row < 0: row = None\n        return (row, col)\n\n    @cached_property\n    def actions(self) -> List[int]:\n        # rows are counted from sky = 0; if the top row is empty we can play\n        actions = np.nonzero(self.board[0,:] == 0)[0].tolist()   # BUGFIX: Kaggle wants List[int] not np.ndarray(int64)\n        return list(actions)\n\n\n#####\n##### END   games\/connectx\/core\/ConnectX.py\n#####\n\n#####\n##### START games\/connectx\/core\/Heuristic.py\n#####\n\nimport math\n\n# from games.connectx.core.KaggleGame import KaggleGame\n# from games.connectx.core.PersistentCacheAgent import PersistentCacheAgent\n# from util.vendor.cached_property import cached_property\n\n\n\nclass Heuristic(PersistentCacheAgent):\n    \"\"\" Returns heuristic_class scores relative to the self.game.player_id\"\"\"\n    cache = {}\n    def __new__(cls, game: KaggleGame, *args, **kwargs):\n        hash = game\n        if hash not in cls.cache:\n            cls.cache[hash] = object.__new__(cls)\n        return cls.cache[hash]\n\n    def __init__( self, game: KaggleGame, *args, **kwargs ):\n        super().__init__(*args, **kwargs)\n        self.game      = game\n        self.player_id = game.player_id\n\n    @cached_property\n    def gameover( self ) -> bool:\n        \"\"\"Has the game reached a terminal game?\"\"\"\n        return abs(self.utility) == math.inf\n\n    @cached_property\n    def score( self ) -> float:\n        \"\"\"Heuristic score\"\"\"\n        raise NotImplementedError\n\n    @cached_property\n    def utility(self ) -> float:\n        \"\"\" +inf for victory or -inf for loss else 0 \"\"\"\n        raise NotImplementedError\n\n\n#####\n##### END   games\/connectx\/core\/Heuristic.py\n#####\n\n#####\n##### START games\/connectx\/heuristics\/LinesHeuristic.py\n#####\n\nimport functools\nimport math\nfrom dataclasses import dataclass\nfrom enum import Enum\nfrom enum import unique\nfrom typing import FrozenSet\nfrom typing import List\nfrom typing import Set\nfrom typing import Tuple\nfrom typing import Union\n\nimport numpy as np\nfrom fastcache import clru_cache\nfrom numba import njit\n\n# from games.connectx.core.ConnectX import ConnectX\n# from games.connectx.core.Heuristic import Heuristic\n# from util.vendor.cached_property import cached_property\n\n\n\n# (1,0)  -> (-1,0)  = down -> up\n# (0,1)  -> (0,-1)  = left -> right\n# (1,1)  -> (-1,-1) = down+left -> up+right\n# (-1,1) -> (1,-1)  = up+left   -> down+right\n@unique\nclass Direction(Enum):\n    UP_DOWN       = (1,0)\n    LEFT_RIGhT    = (0,1)\n    DIAGONAL_UP   = (1,1)\n    DIAGONAL_DOWN = (1,-1)\nDirections = frozenset( d.value for d in Direction.__members__.values() )\n\n\n@functools.total_ordering\n@dataclass(init=True, frozen=True)\nclass Line:\n    game:          'ConnectX'\n    cells:         FrozenSet[Tuple[int,int]]\n    direction:     Direction\n    mark:          int\n\n\n\n    ### Factory Methods\n\n    @classmethod\n    @clru_cache(None)\n    def line_from_position( cls, game: 'ConnectX', coord: Tuple[int, int], direction: Direction ) -> Union['Line', None]:\n        # NOTE: This function doesn't improve with @jit\n        mark = game.board[coord]\n        if mark == 0: return None\n\n        cells = { coord }\n        for sign in [1, -1]:\n            next = cls.next_coord(coord, direction, sign)\n            while cls.is_valid_coord(next, game.rows, game.columns) and game.board[next] == mark:\n                cells.add(next)\n                next = cls.next_coord(next, direction, sign)\n\n        return Line(\n            game      = game,\n            cells     = frozenset(cells),\n            mark      = mark,\n            direction = direction,\n        )\n\n\n    ### Magic Methods\n\n    def __len__( self ):\n        return len(self.cells)\n\n    def __hash__(self):\n        return hash((self.direction, self.cells))\n\n    def __eq__(self, other):\n        if not isinstance(other, self.__class__): return False\n        return self.cells == other.cells and self.direction == other.direction\n\n    def __lt__(self, other):\n        return self.score < other.score\n\n    def __repr__(self):\n        args = {\"mark\": self.mark, \"direction\": self.direction, \"cells\": self.cells }\n        return f\"Line({args})\"\n\n\n\n    ### Navigation Methods\n\n    @staticmethod\n    @njit()\n    def next_coord( coord: Tuple[int, int], direction: Direction, sign=1 ) -> Tuple[int,int]:\n        \"\"\"Use is_valid_coord to verify the coord is valid \"\"\"\n        return ( coord[0]+(direction[0]*sign), coord[1]+(direction[1]*sign) )\n\n    @staticmethod\n    @njit()\n    def is_valid_coord( coord: Tuple[int, int], rows: int, columns: int ) -> bool:\n        x,y  = coord\n        if x < 0 or rows    <= x: return False\n        if y < 0 or columns <= y: return False\n        return True\n\n\n    ### Heuristic Methods\n\n    @cached_property\n    # @njit() ### throws exceptions\n    def gameover( self ) -> bool:\n        return len(self) == self.game.inarow\n\n    @njit()\n    def utility( self, player_id: int ) -> float:\n        if len(self) == self.game.inarow:\n            if player_id == self.mark: return  math.inf\n            else:                      return -math.inf\n        return 0\n\n    @cached_property\n    def score( self ):\n        # A line with zero liberties is dead\n        # A line with two liberties is a potential double attack\n        # A line of 2 with 2 liberties is worth more than a line of 3 with one liberty\n        if len(self) == self.game.inarow: return math.inf\n        if len(self.liberties) == 0:      return 0                         # line can't connect 4\n        if len(self) + self.extension_length < self.game.inarow: return 0  # line can't connect 4\n        score = ( len(self)**2 + self.extension_score ) * len(self.liberties)\n        if len(self) == 1: score \/= len(Directions)                                    # Discount duplicates\n        return score\n\n\n    @cached_property\n    def extension_length( self ):\n        return np.sum(list(map(len, self.extensions)))\n\n    @cached_property\n    def extension_score( self ):\n        # less than 1 - ensure center col is played first\n        return np.sum([ len(extension)**1.25 for extension in self.extensions ]) \/ ( self.game.inarow**2 )\n\n\n    @cached_property\n    def liberties( self ) -> Set[Tuple[int,int]]:\n        ### Numba doesn't like this syntax\n        cells = {\n            self.next_coord(coord, self.direction, sign)\n            for coord in self.cells\n            for sign in [1, -1]\n        }\n        cells = {\n            coord\n            for coord in cells\n            if  self.is_valid_coord(coord, self.game.rows, self.game.columns)\n                and self.game.board[coord] == 0\n        }\n        return cells\n\n    ### BUG: Numba optimized code returns zero scores\n    # @cached_property\n    # def liberties( self ) -> Set[Tuple[int,int]]:\n    #     return self._liberties(\n    #         direction=self.direction,\n    #         cells=tuple(self.cells),\n    #         board=self.game.board,\n    #         rows=self.game.rows,\n    #         columns=self.game.columns,\n    #         is_valid_coord=self.is_valid_coord,\n    #         next_coord=self.next_coord,\n    #     )\n    # @staticmethod\n    # @njit(parallel=True)\n    # def _liberties( direction, cells, board: np.ndarray, rows: int, columns: int, is_valid_coord, next_coord ) -> Set[Tuple[int,int]]:\n    #     coords = set()\n    #     for sign in [1, -1]:\n    #         for coord in cells:\n    #             next = next_coord(coord, direction, sign)\n    #             coords.add(next)\n    #     output = set()\n    #     for coord in coords:\n    #         if is_valid_coord(coord, rows, columns) and board[coord] == 0:\n    #             output.add(coord)\n    #     return output\n\n\n    @cached_property\n    def extensions( self ) -> List[FrozenSet[Tuple[int,int]]]:\n        extensions = []\n        for next in self.liberties:\n            extension = { next }\n            for sign in [1,-1]:\n                while len(extension) + len(self) < self.game.inarow:\n                    next = self.next_coord(next, self.direction, sign)\n                    if next in self.cells:                                               break\n                    if not self.is_valid_coord(next, self.game.rows, self.game.columns): break\n                    if self.game.board[next] not in (0, self.mark):                      break\n                    extension.add(next)\n            if len(extension):\n                extensions.append(frozenset(extension))\n        return extensions\n\n    ### BUG: Numba optimized code returns zero scores\n    # @cached_property\n    # def extensions( self ) -> List[Set[Tuple[int,int]]]:\n    #     return self._extensions(\n    #         length_self=len(self),\n    #         liberties=self.liberties,\n    #         cells=self.cells,\n    #         mark=self.mark,\n    #         direction=self.direction,\n    #         board=self.game.board,\n    #         inarow=self.game.inarow,\n    #         rows=self.game.rows,\n    #         columns=self.game.columns,\n    #         next_coord=self.next_coord,\n    #         is_valid_coord=self.is_valid_coord\n    #     )\n    # @staticmethod\n    # @njit(parallel=True)\n    # def _extensions( length_self, liberties, cells, mark, direction, board, inarow, rows, columns, next_coord, is_valid_coord ) -> List[Set[Tuple[int,int]]]:\n    #     extensions = []\n    #     for next in liberties:\n    #         extension = { next }\n    #         for sign in [1,-1]:\n    #             while len(extension) + length_self < inarow:\n    #                 next = next_coord(next, direction, sign)\n    #                 if next in cells:                           break\n    #                 if not is_valid_coord(next, rows, columns): break\n    #                 if board[next] not in (0, mark):            break\n    #                 extension.add(next)\n    #         if len(extension):\n    #             extensions.append(set(extension))\n    #     return extensions\n\n\n\nclass LinesHeuristic(Heuristic):\n    ### Heuristic Methods - relative to the current self.player_id\n    ## Heuristic Methods\n\n    cache = {}\n    def __new__(cls, game: ConnectX, *args, **kwargs):\n        hash = frozenset(( game.board.tobytes(), np.fliplr(game.board).tobytes() ))\n        if hash not in cls.cache:\n            cls.cache[hash] = object.__new__(cls)\n        return cls.cache[hash]\n\n    def __init__(self, game: ConnectX):\n        super().__init__(game)\n        self.game      = game\n        self.board     = game.board\n        self.player_id = game.player_id\n\n    @cached_property\n    def lines(self) -> List['Line']:\n        lines = set()\n        for (row,col) in zip(*np.where(self.board != 0)):\n            if self.board[row,col] == 0: continue\n            lines |= {\n                Line.line_from_position(self.game, (row, col), direction)\n                for direction in Directions\n            }\n        lines = { line for line in lines if line.score != 0 }\n        return sorted(lines, reverse=True, key=len)\n\n    @cached_property\n    def gameover( self ) -> bool:\n        \"\"\"Has the game reached a terminal game?\"\"\"\n        if len( self.game.actions ) == 0:                    return True\n        if np.any([ line.gameover for line in self.lines ]): return True\n        return False\n\n\n    @cached_property\n    def score( self ) -> float:\n        \"\"\"Heuristic score\"\"\"\n        # mark is the next player to move - calculate score from perspective of player who just moved\n        hero_score    = np.sum([ line.score for line in self.lines if line.mark != self.player_id ])\n        villain_score = np.sum([ line.score for line in self.lines if line.mark == self.player_id ])\n        return hero_score - villain_score\n\n    @cached_property\n    def utility(self) -> float:\n        \"\"\" +inf for victory or -inf for loss else 0 - calculated from the perspective of the player who made the previous move\"\"\"\n        for line in self.lines:\n            if len(line) == 4:\n                # mark is the next player to move - calculate score from perspective of player who just moved\n                return math.inf if line.mark != self.player_id else -math.inf\n            else:\n                break  # self.lines is sorted by length\n        return 0\n\n\n#####\n##### END   games\/connectx\/heuristics\/LinesHeuristic.py\n#####\n\n#####\n##### START games\/connectx\/agents\/AlphaBetaAgent.py\n#####\n\nimport math\nimport random\nimport time\nfrom queue import LifoQueue\nfrom struct import Struct\nfrom typing import Callable\n\n# from games.connectx.core.ConnectX import ConnectX\n# from games.connectx.core.KaggleGame import KaggleGame\n# from games.connectx.core.PersistentCacheAgent import PersistentCacheAgent\n# from games.connectx.heuristics.LinesHeuristic import LinesHeuristic\n\n\n\nclass AlphaBetaAgent(PersistentCacheAgent):\n    heuristic_class = LinesHeuristic\n    defaults = {\n        \"verbose_depth\":    True,\n        \"search_max_depth\": 100 # if \"pytest\" not in sys.modules else 3,\n    }\n\n    def __init__( self, game: ConnectX, *args, **kwargs ):\n        super().__init__(*args, **kwargs)\n        self.kwargs    = { **self.defaults, **kwargs }\n        self.game      = game\n        self.player_id = game.observation.mark\n        self.queue     = LifoQueue()\n        self.verbose_depth    = self.kwargs.get('verbose_depth')\n        self.search_max_depth = self.kwargs.get('search_max_depth')\n\n\n    ### Public Interface\n\n    def get_action( self, endtime: float ) -> int:\n        action = self.iterative_deepening_search(endtime=endtime)\n        return int(action)\n\n\n\n    ### Search Functions\n\n    def iterative_deepening_search( self, endtime=0.0 ) -> int:\n        # The real trick with iterative deepening is caching, which allows us to out-depth the default minimax Agent\n        if self.verbose_depth: print('\\n'+ self.__class__.__name__.ljust(20) +' | depth:', end=' ', flush=True)\n        best_action = random.choice(self.game.actions)\n        try:\n            for depth in range(1, self.search_max_depth+1):\n                action, score = self.alphabeta(self.game, depth=depth, endtime=endtime)\n                if endtime and time.perf_counter() >= endtime: break  # ignore results on timeout\n\n                best_action = action\n                if self.verbose_depth: print(depth, end=' ', flush=True)\n                if abs(score) == math.inf:\n                    if self.verbose_depth: print(score, end=' ', flush=True)\n                    break  # terminate iterative deepening on inescapable victory condition\n        except TimeoutError:\n            pass  # This is the fastest way to exit a loop: https:\/\/www.kaggle.com\/c\/connectx\/discussion\/158190\n        return int(best_action)\n        # if self.verbose_depth: print( depth, type(action), action, int((time.perf_counter() - time_start) * 1000), 'ms' )\n\n\n    def alphabeta( self, game, depth, endtime=0.0 ):\n        scores = []\n        best_action = random.choice(game.actions)\n        best_score  = -math.inf\n        for action in game.actions:\n            result = game.result(action)\n            score  = self.alphabeta_min_value(result, player_id=self.player_id, depth=depth-1, endtime=endtime)\n            if endtime and time.perf_counter() >= endtime: raise TimeoutError\n            if score > best_score:\n                best_score  = score\n                best_action = action\n            scores.append(score)  # for debugging\n\n        # action, score = max(zip(game.actions, scores), key=itemgetter(1))\n        return best_action, best_score  # This is slightly quicker for timeout purposes\n\n\n    def alphabeta_min_value( self, game: KaggleGame, player_id: int, depth: int, alpha=-math.inf, beta=math.inf, endtime=0.0):\n        return self.cache_infinite(self._alphabeta_min_value, game, player_id, depth, alpha, beta, endtime)\n    def _alphabeta_min_value( self, game: KaggleGame, player_id, depth: int, alpha=-math.inf, beta=math.inf, endtime=0.0 ):\n        sign = 1 if player_id != game.player_id else -1\n        if game.gameover:  return sign * game.heuristic.utility  # score relative to previous player who made the move\n        if depth == 0:     return sign * game.heuristic.score\n        scores = []\n        score  = math.inf\n        for action in game.actions:\n            result    = game.result(action)\n            score     = min(score, self.alphabeta_max_value(result, player_id, depth-1, alpha, beta, endtime))\n            if endtime and time.perf_counter() >= endtime: raise TimeoutError\n            if score <= alpha: return score\n            beta      = min(beta,score)\n            scores.append(score)  # for debugging\n        return score\n\n    def alphabeta_max_value( self, game: KaggleGame, player_id: int, depth, alpha=-math.inf, beta=math.inf, endtime=0.0  ):\n        return self.cache_infinite(self._alphabeta_max_value, game, player_id, depth, alpha, beta, endtime)\n    def _alphabeta_max_value( self, game: KaggleGame, player_id: int, depth, alpha=-math.inf, beta=math.inf, endtime=0.0  ):\n        sign = 1 if player_id != game.player_id else -1\n        if game.gameover:  return sign * game.heuristic.utility  # score relative to previous player who made the move\n        if depth == 0:     return sign * game.heuristic.score\n        scores = []\n        score  = -math.inf\n        for action in game.actions:\n            result    = game.result(action)\n            score     = max(score, self.alphabeta_min_value(result, player_id, depth-1, alpha, beta, endtime))\n            if endtime and time.perf_counter() >= endtime: raise TimeoutError\n            if score >= beta: return score\n            alpha     = max(alpha, score)\n            scores.append(score)  # for debugging\n        return score\n\n\n\n    ### Exported Interface\n\n    # observation   = {'mark': 1, 'board': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}\n    # configuration = {'columns': 7, 'rows': 6, 'inarow': 4, 'steps': 1000, 'timeout': 2}\n    @classmethod\n    def agent(cls, **kwargs) -> Callable[[Struct, Struct],int]:\n        heuristic_class = kwargs.get('heuristic_class', cls.heuristic_class)\n\n        def kaggle_agent(observation: Struct, configuration: Struct):\n            # Leave a small amount of time to return an answer - was 1.1, but try 0.25 now we exiting loop via exception\n            endtime = time.perf_counter() + configuration.timeout - 0.75\n            game    = ConnectX(observation, configuration, heuristic_class, **kwargs)\n            agent   = cls(game, **kwargs)\n            action  = agent.get_action(endtime)\n            # print(endtime - time.perf_counter(), 's')  # min -0.001315439000000751 s\n            return int(action)\n        return kaggle_agent\n\n\n\n# The last function defined in the file run by Kaggle in submission.csv\ndef agent(observation, configuration) -> int:\n    return AlphaBetaAgent.agent()(observation, configuration)\n\n\n#####\n##### END   games\/connectx\/agents\/AlphaBetaAgent.py\n#####\n\n##### \n##### .\/kaggle_compile.py games\/connectx\/agents\/AlphaBetaAgent.py\n##### \n##### 2020-06-24 12:38:03+01:00\n##### \n##### ai-pacman\tgit@github.com:JamesMcGuigan\/ai-pacman.git (fetch)\n##### ai-pacman\tgit@github.com:JamesMcGuigan\/ai-pacman.git (push)\n##### ecosystem-research\tgit@github.com:JamesMcGuigan\/ecosystem-research.git (fetch)\n##### ecosystem-research\tgit@github.com:JamesMcGuigan\/ecosystem-research.git (push)\n##### kaggle-arc\tgit@github.com:JamesMcGuigan\/kaggle-arc.git (fetch)\n##### kaggle-arc\tgit@github.com:JamesMcGuigan\/kaggle-arc.git (push)\n##### origin\tgit@github.com:JamesMcGuigan\/ai-games.git (fetch)\n##### origin\tgit@github.com:JamesMcGuigan\/ai-games.git (push)\n##### udacity-artificial-intelligence\thttps:\/\/github.com\/JamesMcGuigan\/udacity-artificial-intelligence (fetch)\n##### udacity-artificial-intelligence\thttps:\/\/github.com\/JamesMcGuigan\/udacity-artificial-intelligence (push)\n##### \n#####   kaggle-arc        583a4c1 kaggle_compile.py -> submission.py + submission.csv\n#####   knights-isolation 27d0916 3_Adversarial Search | udacity submit requires kaggle_compile.py\n#####   master            f296c88 refactor: AlphaBetaAgent.agent -> AlphaBetaAgent.agent(kwargs)(observation, configuration)\n#####   n-queens          ddb0d49 prolog | nqueens | print solution to nqueens.txt\n##### * numba             88fa481 [ahead 3] ConnectX | AlphaBetaAgent | exit loop via raise TimeoutError\n##### \n##### 88fa481f1803f20c88654ce21c5ce5dcea14aa95\n##### ","1575842d":"%run submission.py","df464d30":"from kaggle_environments import evaluate, make, utils\n\n%load_ext autoreload\n%autoreload 2","366e892f":"### Play against yourself without an ERROR or INVALID.\n### Note: The first episode in the competition will run this to weed out erroneous agents.\n\nenv = make(\"connectx\", debug=True)\nenv.run([\"\/kaggle\/working\/submission.py\", \"\/kaggle\/working\/submission.py\"])\nprint(\"\\nEXCELLENT SUBMISSION!\" if env.toJSON()[\"statuses\"] == [\"DONE\", \"DONE\"] else \"MAYBE BAD SUBMISSION?\")\nenv.render(mode=\"ipython\", width=500, height=450)","e27ba468":"env = make(\"connectx\", debug=True)\nenv.run([\"\/kaggle\/working\/submission.py\", \"negamax\"])\nprint(\"\\nEXCELLENT SUBMISSION!\" if env.toJSON()[\"statuses\"] == [\"DONE\", \"DONE\"] else \"MAYBE BAD SUBMISSION?\")\nenv.render(mode=\"ipython\", width=500, height=450)\n","bced070d":"env = make(\"connectx\", debug=True)\nenv.play([None, \"\/kaggle\/working\/submission.py\"], width=500, height=450)","7817d831":"Versus Human","7ad85548":"# ConnectX - AlphaBeta Minimax","033c26fb":"# Test your Agent","c7ef0c9c":"## Versus Negamax","257e539d":"## Versus Self"}}