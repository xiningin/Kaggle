{"cell_type":{"b49ecf2c":"code","c3301dd3":"code","2b012894":"code","e25e5690":"code","779d79f4":"code","f8b61c8a":"code","13ce7c8b":"code","e2966ce1":"code","0c16d58a":"code","dc91a652":"code","e15049c8":"code","e3e979c5":"code","da8ef415":"code","41e0c246":"code","f372211d":"code","5bee62ee":"code","7f04203c":"code","896313d8":"code","b4437c4f":"code","af2541f9":"code","13c551d9":"code","4755cc68":"code","2ab32031":"code","68f225ad":"code","cb6df07c":"code","afd5f105":"code","cf751c79":"code","72f50387":"code","86260117":"code","b67d9923":"code","bbfd2d1a":"code","c08795f5":"code","2b3f9398":"markdown","efd9adfc":"markdown"},"source":{"b49ecf2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport fnmatch\nimport random as rn\nfrom sklearn.preprocessing import LabelEncoder\nfrom keras.utils import to_categorical\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c3301dd3":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,roc_curve,roc_auc_score\nfrom sklearn.model_selection import GridSearchCV","2b012894":"#dl libraraies\nfrom keras import backend as K\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop\nfrom keras.utils import to_categorical\n\n# specifically for cnn\nfrom keras.layers import Dropout, Flatten,Activation\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization","e25e5690":"from tqdm import notebook \nfrom tqdm.notebook import tqdm as tqdm\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nsns.set_style('darkgrid')\n\nimport tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.metrics import Recall,AUC\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau","779d79f4":"Z=[]\nIMG_SIZE=150\nbatik_bali_DIR='..\/input\/indonesian-batik-motifs-corak-app\/DATASET\/DATASET\/TRAIN\/Batik Bali'\nbatik_betawi_DIR='..\/input\/indonesian-batik-motifs-corak-app\/DATASET\/DATASET\/TRAIN\/Batik Betawi'\nbatik_cendrawasih_DIR='..\/input\/indonesian-batik-motifs-corak-app\/DATASET\/DATASET\/TRAIN\/Batik Cendrawasih'\nbatik_lasem_DIR='..\/input\/indonesian-batik-motifs-corak-app\/DATASET\/DATASET\/TRAIN\/Batik Lasem'\nbatik_poleng_DIR='..\/input\/indonesian-batik-motifs-corak-app\/DATASET\/DATASET\/TRAIN\/Batik Poleng'","f8b61c8a":"def assign_label(img,batik_type):\n    return batik_type","13ce7c8b":"X=[]\ndef make_train_data(batik_type,DIR):\n    for img in tqdm(os.listdir(DIR)):\n        if fnmatch.fnmatch(img, '*.jpg'):     \n            label=assign_label(img,batik_type)\n            path = os.path.join(DIR,img)\n            img = cv2.imread(path,cv2.IMREAD_COLOR)\n            img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))\n\n            X.append(np.array(img))\n            Z.append(str(label))","e2966ce1":"make_train_data('Batik Bali',batik_bali_DIR)\nprint(len(X))","0c16d58a":"make_train_data('Batik Betawi',batik_betawi_DIR)\nprint(len(X))","dc91a652":"make_train_data('Batik Cendrawasih',batik_cendrawasih_DIR)\nprint(len(X))","e15049c8":"make_train_data('Batik Lasem',batik_lasem_DIR)\nprint(len(X))","e3e979c5":"make_train_data('Batik Poleng',batik_poleng_DIR)\nprint(len(X))","da8ef415":"fig,ax=plt.subplots(5,2)\nfig.set_size_inches(15,15)\nfor i in range(5):\n    for j in range (2):\n        l=rn.randint(0,len(Z))\n        ax[i,j].imshow(X[l])\n        ax[i,j].set_title('Batik: '+Z[l])\n        \nplt.tight_layout()","41e0c246":"le=LabelEncoder()\nY=le.fit_transform(Z)\nY=to_categorical(Y,5)  #from keras.utils import to_categorical\nX=np.array(X)\nX=X\/255","f372211d":"x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25)","5bee62ee":"np.random.seed(42)\nrn.seed(42)\ntf.random.set_seed(42)","7f04203c":"# # modelling starts using a CNN.\n\nmodel = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu', input_shape = (150,150,3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n \n\nmodel.add(Conv2D(filters =96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Conv2D(filters = 96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(512))\nmodel.add(Activation('relu'))\nmodel.add(Dense(5, activation = \"softmax\"))","896313d8":"batch_size=128\nepochs=50\n\nfrom keras.callbacks import ReduceLROnPlateau\nred_lr= ReduceLROnPlateau(monitor='val_acc',patience=3,verbose=1,factor=0.1)","b4437c4f":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(x_train)","af2541f9":"model.compile(optimizer=Adam(lr=0.001),loss='categorical_crossentropy',metrics=['accuracy'])","13c551d9":"model.summary()","4755cc68":"History = model.fit_generator(datagen.flow(x_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (x_test,y_test),\n                              verbose = 1, steps_per_epoch=x_train.shape[0] \/\/ batch_size)\n# model.fit(x_train,y_train,epochs=epochs,batch_size=batch_size,validation_data = (x_test,y_test))","2ab32031":"plt.plot(History.history['loss'])\nplt.plot(History.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","68f225ad":"plt.plot(History.history['accuracy'])\nplt.plot(History.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","cb6df07c":"# getting predictions on val set.\npred=model.predict(x_test)\npred_digits=np.argmax(pred,axis=1)","afd5f105":"# now storing some properly as well as misclassified indexes'.\ni=0\nprop_class=[]\nmis_class=[]\n\nfor i in range(len(y_test)):\n    if(np.argmax(y_test[i])==pred_digits[i]):\n        prop_class.append(i)\n    if(len(prop_class)==8):\n        break\n\ni=0\nfor i in range(len(y_test)):\n    if(not np.argmax(y_test[i])==pred_digits[i]):\n        mis_class.append(i)\n    if(len(mis_class)==8):\n        break","cf751c79":"warnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\ncount=0\nfig,ax=plt.subplots(4,2)\nfig.set_size_inches(15,15)\nfor i in range (4):\n    for j in range (2):\n        ax[i,j].imshow(x_test[prop_class[count]])\n        ax[i,j].set_title(\"Predicted Batik : \"\n                          +str(le.inverse_transform([pred_digits[prop_class[count]]]))\n                          +\"\\n\"+\"Actual Batik : \"\n                          +str(le.inverse_transform([np.argmax([y_test[prop_class[count]]])])))\n        plt.tight_layout()\n        count+=1","72f50387":"warnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\ncount=0\nfig,ax=plt.subplots(4,2)\nfig.set_size_inches(15,15)\nfor i in range (4):\n    for j in range (2):\n        ax[i,j].imshow(x_test[mis_class[count]])\n        ax[i,j].set_title(\"Predicted Batik : \"\n                          +str(le.inverse_transform([pred_digits[mis_class[count]]]))\n                          +\"\\n\"+\"Actual Batik : \"\n                          +str(le.inverse_transform([np.argmax([y_test[mis_class[count]]])])))\n        plt.tight_layout()\n        count+=1","86260117":"tf.saved_model.save(model, '\/kaggle\/working\/')","b67d9923":"import tensorflow as tf\n\n# Convert the model\nconverter = tf.lite.TFLiteConverter.from_saved_model('\/kaggle\/working\/') # path to the SavedModel directory\ntflite_model = converter.convert()\n\n# Save the model.\nwith open('model.tflite', 'wb') as f:\n  f.write(tflite_model)","bbfd2d1a":"#https:\/\/vittoriomazzia.com\/tflite-tfrt-conversion-summary\/\n# save model\n#tflite_model_file = pathlib.Path('\/kaggle\/input\/indonesian-batik-motifs-corak-app\/DATASET\/DATASET\/')\n#tflite_model_file.write_bytes(tflite_model)","c08795f5":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Thank you Muchamad Rifan @muchamadrifan, JARINGAN SYARAF TIRUAN, TEKNIK INFORMATIKA' )","2b3f9398":"#Code by MUCHAMAD RIF'AN https:\/\/www.kaggle.com\/muchamadrifan\/rifan-flower-batik-recognition-cnn-keras\/notebook\n\n#JARINGAN SYARAF TIRUAN 2020\n\n#TEKNIK INFORMATIKA","efd9adfc":"#Be prepared to wait "}}