{"cell_type":{"4a0eb602":"code","d8401590":"code","ae0989e1":"code","b258e4ca":"code","46ac066b":"code","d168d1b2":"code","fc9ce380":"code","db959cf7":"code","23c56878":"code","95492647":"code","41c50c8f":"code","fcea7675":"code","12554c8a":"code","30212ee7":"code","ba0886de":"code","6e52a84d":"code","c24c68ee":"code","b71255a2":"markdown","14aede87":"markdown","b72bb026":"markdown","e653244a":"markdown","09468bc5":"markdown","99e5d5f8":"markdown","dd9ba5be":"markdown","a20ce2a6":"markdown","b2bef36b":"markdown","89d88673":"markdown","376eeaab":"markdown","271e0c74":"markdown","ac1b2719":"markdown","5db45a35":"markdown","ceb115e3":"markdown","9d543a4f":"markdown"},"source":{"4a0eb602":"import numpy as np \nimport pandas as pd\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected = True)\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc\nfrom sklearn.metrics import roc_auc_score, precision_score, recall_score, f1_score\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom lightgbm import LGBMClassifier\n\n\npd.set_option('display.max_columns', None)\n#########################################################\nhrt = pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')","d8401590":"hrt.head(3)","ae0989e1":"hrt.info()","b258e4ca":"reoutput = {0: 'No heart disease', 1: 'Heart disease'}\nhrt['output'] = hrt['output'].map(reoutput)\n\nfig = px.pie(hrt['output'].value_counts().reset_index(), values = 'output', names = 'index', width = 700, height = 700)\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.8, \n                  marker = dict(colors = ['#8d230f','#1e434c'], line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = 'Distribution of <br> heart disease <br> in patients', \n                                      x = 0.5, y = 0.5, font_size = 28, showarrow = False, \n                                      font_family = 'monospace',\n                                      font_color = 'black')],\n                  showlegend = False)\n                  \nfig.show()","46ac066b":"plt.figure(figsize = (16, 10))\nsns.set_style(\"white\")\nplt.title('Age distribution of patients depending on heart disease', size = 20, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\na = sns.kdeplot(hrt.query(\"output == 'No heart disease'\")['age'], color = '#1e434c', shade = True, label = 'No heart disease', alpha = 0.8)\nsns.kdeplot(hrt.query(\"output == 'Heart disease'\")['age'], color = '#8d230f', shade = True, label = 'Heart disease', alpha = 0.8)\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\n\nfor j in ['right', 'left', 'top']:\n        a.spines[j].set_visible(False)\na.spines['bottom'].set_linewidth(1.2)\n\nplt.figtext(0.65, 0.65, '''mean\n56.6''', fontsize = 14, fontname = 'monospace', color = '#1e434c', ha = 'center')\nplt.figtext(0.45, 0.55, '''mean\n52.5''', fontsize = 14, fontname = 'monospace', color = '#8d230f', ha = 'center')\n\nplt.show()","d168d1b2":"fig = plt.figure(figsize = (15, 15))\n\nplt.subplot(221)\nsns.set_style(\"white\")\nplt.title('Resting blood pressure', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\na = sns.kdeplot(hrt.query(\"output == 'No heart disease'\")['trtbps'], color = '#1e434c', shade = True, label = 'No heart disease', alpha = 0.8)\nsns.kdeplot(hrt.query(\"output == 'Heart disease'\")['trtbps'], color = '#8d230f', shade = True, label = 'Heart disease', alpha = 0.8)\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\nplt.legend(['No heart disease', 'Heart disease'], bbox_to_anchor = (1.4, -0.1), ncol = 1, borderpad = 3, frameon = False, fontsize = 11)\n\nplt.subplot(222)\nplt.title('Oldpeak', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\nb = sns.kdeplot(hrt.query(\"output == 'No heart disease'\")['oldpeak'], color = '#1e434c', shade = True, alpha = 0.8)\nsns.kdeplot(hrt.query(\"output == 'Heart disease'\")['oldpeak'], color = '#8d230f', shade = True, alpha = 0.8)\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\n\nplt.subplot(223)\nplt.title('Cholesterol level', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\nc = sns.kdeplot(hrt.query(\"output == 'No heart disease'\")['chol'], color = '#1e434c', shade = True, alpha = 0.8)\nsns.kdeplot(hrt.query(\"output == 'Heart disease'\")['chol'], color = '#8d230f', shade = True, alpha = 0.8)\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\n\nplt.subplot(224)\nplt.title('Maximum heart rate ', size = 17, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', alpha = 0.8, zorder = 0,  dashes = (1,7))\nd = sns.kdeplot(hrt.query(\"output == 'No heart disease'\")['thalachh'], color = '#1e434c', shade = True, alpha = 0.8)\nsns.kdeplot(hrt.query(\"output == 'Heart disease'\")['thalachh'], color = '#8d230f', shade = True, alpha = 0.8)\nplt.ylabel('')\nplt.xlabel('')\nplt.xticks(fontname = 'monospace')\nplt.yticks([])\n\nfor i in [a,b,c,d]:\n    for j in ['right', 'left', 'top']:\n        i.spines[j].set_visible(False)\n        i.spines['bottom'].set_linewidth(1.2)\n        \nfig.tight_layout(pad = 1)\n\nplt.figtext(0.02, -0.04, 'Conclusions:', fontsize = 18, fontname = 'monospace', color = '#8d230f')\n\nplt.figtext(0.02, -0.1, '''Judging solely from the available data, blood pressure has no effect on the development of heart disease, but this is not true. \nHigh blood pressure provokes the development and progression of serious diseases such as coronary heart disease, chronic heart \nfailure and various types of heart rhythm disorders.''', fontsize = 13, fontname = 'monospace')\n\nplt.figtext(0.02, -0.14, '''ST depression induced by exercise relative to rest is checked by electrocardiography. Patients with an approximate value of \nzero have a higher risk of developing heart disease.''', fontsize = 13, fontname = 'monospace')\n\nplt.figtext(0.02, -0.2, '''If you do not go deep into medicine and understand a little what cholesterol is, then many people know that with an increased \namount of cholesterol, the walls of blood vessels become clogged, which leads to heart disease, however, based on the data on \navailable patients, cholesterol levels do not affect heart disease.''', fontsize = 13, fontname = 'monospace')\n\nplt.figtext(0.02, -0.23, '''Patients who have an increased maximum achieved heart rate of about 175 beats per minute have a greater risk of heart disease.''', fontsize = 13, fontname = 'monospace')\n\nplt.figtext(0.02, -0.27, '''And of course, age - here it is clear to anyone that the number of any diseases, including heart diseases, increases with age \nThe available data tells us quite the opposite - that's not true.''', fontsize = 13, fontname = 'monospace')\n\nplt.show()","fc9ce380":"resex = {0: 'female', 1: 'male'}\nhrt['sex'] = hrt['sex'].map(resex)\nsex_no = hrt.query(\"output == 'No heart disease'\").groupby(['sex']).agg({'sex': 'count'}).rename(columns = {'sex': 'count'}).reset_index()\nall_sex = hrt.groupby(['sex']).agg({'sex': 'count'}).rename(columns = {'sex': 'count'}).reset_index()\n##########################\nrecp = {0: 'asymptomatic', 1: 'typical angina', 2: 'atypical angina', 3: 'non-anginal pain'}\nhrt['cp'] = hrt['cp'].map(recp)\ncp_no = hrt.query(\"output == 'No heart disease'\").groupby(['cp']).agg({'cp': 'count'}).rename(columns = {'cp': 'count'}).reset_index()\nall_cp = hrt.groupby(['cp']).agg({'cp': 'count'}).rename(columns = {'cp': 'count'}).reset_index()\n##########################\nrefbs = {0: 'No diabetes', 1: 'Diabetes'}\nhrt['fbs'] = hrt['fbs'].map(refbs)\nfbs_no = hrt.query(\"output == 'No heart disease'\").groupby(['fbs']).agg({'fbs': 'count'}).rename(columns = {'fbs': 'count'}).reset_index()\nall_fbs = hrt.groupby(['fbs']).agg({'fbs': 'count'}).rename(columns = {'fbs': 'count'}).reset_index()\n##########################\nrerestecg = {0: 'hypertrophy', 1: 'normal', 2: 'abnormality'}\nhrt['restecg'] = hrt['restecg'].map(rerestecg)\nrestecg_no = hrt.query(\"output == 'No heart disease'\").groupby(['restecg']).agg({'restecg': 'count'}).rename(columns = {'restecg': 'count'}).reset_index()\nall_restecg = hrt.groupby(['restecg']).agg({'restecg': 'count'}).rename(columns = {'restecg': 'count'}).reset_index()\n##########################\nreexng = {0: 'No', 1: 'Yes'}\nhrt['exng'] = hrt['exng'].map(reexng)\nexng_no = hrt.query(\"output == 'No heart disease'\").groupby(['exng']).agg({'exng': 'count'}).rename(columns = {'exng': 'count'}).reset_index()\nall_exng = hrt.groupby(['exng']).agg({'exng': 'count'}).rename(columns = {'exng': 'count'}).reset_index()\n##########################\nreslp = {0: 'downsloping', 1: 'flat', 2: 'upsloping'}\nhrt['slp'] = hrt['slp'].map(reslp)\nslp_no = hrt.query(\"output == 'No heart disease'\").groupby(['slp']).agg({'slp': 'count'}).rename(columns = {'slp': 'count'}).reset_index()\nall_slp = hrt.groupby(['slp']).agg({'slp': 'count'}).rename(columns = {'slp': 'count'}).reset_index()\n##########################\nrecaa = {0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four'}\nhrt['caa'] = hrt['caa'].map(recaa)\ncaa_no = hrt.query(\"output == 'No heart disease'\").groupby(['caa']).agg({'caa': 'count'}).rename(columns = {'caa': 'count'}).reset_index()\nall_caa = hrt.groupby(['caa']).agg({'caa': 'count'}).rename(columns = {'caa': 'count'}).reset_index()\n##########################\nrethall = {1: 'fixed defect', 2: 'normal', 3: 'reversable defect'}\nhrt['thall'] = hrt['thall'].map(rethall)\nthall_no = hrt.query(\"output == 'No heart disease'\").groupby(['thall']).agg({'thall': 'count'}).rename(columns = {'thall': 'count'}).reset_index()\nall_thall = hrt.groupby(['thall']).agg({'thall': 'count'}).rename(columns = {'thall': 'count'}).reset_index()","db959cf7":"fig = plt.figure(figsize = (14, 70))\n################################################################### \nplt.subplot(811)\nsns.set_style(\"white\")\nplt.title('Sex', fontsize = 25, fontname = 'monospace', x = 0.5, y = 1.05)\na = sns.barplot(data = all_sex, x = 'count', y = 'sex', color = '#8d230f')\nb = sns.barplot(data = sex_no, x = 'count', y = 'sex', color = '#1e434c')\nplt.xticks([])\nplt.yticks(fontname = 'monospace', fontsize = 14)\nplt.ylabel('')\nplt.xlabel('')\n\na.spines['left'].set_linewidth(1.5)\nfor w in ['right', 'top', 'bottom']:\n    a.spines[w].set_visible(False)\n    \nfor p in b.patches[2:4]:\n    width = p.get_width()\n    plt.text(width\/2, p.get_y() + 0.55*p.get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 30, color = 'white')\n    \nfor p in range(2):\n    width = b.patches[p].get_width() - sex_no['count'][p]\n    plt.text((width + sex_no['count'][p]*2)\/2, b.patches[p].get_y() + 0.55*b.patches[p].get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 30, color = 'white')\n###################################################################    \nplt.subplot(812)\nsns.set_style(\"white\")\nplt.title('Chest pain type', fontsize = 25, fontname = 'monospace', x = 0.5, y = 1.05)\na = sns.barplot(data = all_cp, x = 'count', y = 'cp', color = '#8d230f')\nb = sns.barplot(data = cp_no, x = 'count', y = 'cp', color = '#1e434c')\nplt.xticks([])\nplt.yticks(fontname = 'monospace', fontsize = 14)\nplt.ylabel('')\nplt.xlabel('')\n\na.spines['left'].set_linewidth(1.5)\nfor w in ['right', 'top', 'bottom']:\n    a.spines[w].set_visible(False)\n\nfor p in b.patches[4:9]:\n    width = p.get_width()\n    plt.text(width\/2, p.get_y() + 0.55*p.get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 17, color = 'white')\n    \nfor p in range(4):\n    width = b.patches[p].get_width() - cp_no['count'][p]\n    plt.text((width + cp_no['count'][p]*2)\/2, b.patches[p].get_y() + 0.55*b.patches[p].get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 17, color = 'white')\n###################################################################   \nplt.subplot(813)\nsns.set_style(\"white\")\nplt.title('Fasting blood sugar', fontsize = 25, fontname = 'monospace', x = 0.5, y = 1.05)\na = sns.barplot(data = all_fbs, x = 'count', y = 'fbs', color = '#8d230f')\nb = sns.barplot(data = fbs_no, x = 'count', y = 'fbs', color = '#1e434c')\nplt.xticks([])\nplt.yticks(fontname = 'monospace', fontsize = 14)\nplt.ylabel('')\nplt.xlabel('')\n\na.spines['left'].set_linewidth(1.5)\nfor w in ['right', 'top', 'bottom']:\n    a.spines[w].set_visible(False)\n\nfor p in b.patches[2:4]:\n    width = p.get_width()\n    plt.text(width\/2, p.get_y() + 0.55*p.get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 30, color = 'white')\n    \nfor p in range(2):\n    width = b.patches[p].get_width() - fbs_no['count'][p]\n    plt.text((width + fbs_no['count'][p]*2)\/2, b.patches[p].get_y() + 0.55*b.patches[p].get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 30, color = 'white')\n################################################################### \nplt.subplot(814)\nsns.set_style(\"white\")\nplt.title('Electrocardiographic results', fontsize = 25, fontname = 'monospace', x = 0.5, y = 1.05)\na = sns.barplot(data = all_restecg, x = 'count', y = 'restecg', color = '#8d230f')\nb = sns.barplot(data = restecg_no, x = 'count', y = 'restecg', color = '#1e434c')\nplt.xticks([])\nplt.yticks(fontname = 'monospace', fontsize = 14)\nplt.ylabel('')\nplt.xlabel('')\n\na.spines['left'].set_linewidth(1.5)\nfor w in ['right', 'top', 'bottom']:\n    a.spines[w].set_visible(False)\n\nfor p in b.patches[3:7]:\n    width = p.get_width()\n    plt.text(width\/2, p.get_y() + 0.55*p.get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 17, color = 'white')\n    \nfor p in range(3):\n    width = b.patches[p].get_width() - restecg_no['count'][p]\n    plt.text((width + restecg_no['count'][p]*2)\/2, b.patches[p].get_y() + 0.55*b.patches[p].get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 17, color = 'white')\n################################################################### \nplt.subplot(815)\nsns.set_style(\"white\")\nplt.title('Exercise induced angina', fontsize = 25, fontname = 'monospace', x = 0.5, y = 1.05)\na = sns.barplot(data = all_exng, x = 'count', y = 'exng', color = '#8d230f')\nb = sns.barplot(data = exng_no, x = 'count', y = 'exng', color = '#1e434c')\nplt.xticks([])\nplt.yticks(fontname = 'monospace', fontsize = 14)\nplt.ylabel('')\nplt.xlabel('')\n\na.spines['left'].set_linewidth(1.5)\nfor w in ['right', 'top', 'bottom']:\n    a.spines[w].set_visible(False)\n\nfor p in b.patches[2:4]:\n    width = p.get_width()\n    plt.text(width\/2, p.get_y() + 0.55*p.get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 30, color = 'white')\n    \nfor p in range(2):\n    width = b.patches[p].get_width() - exng_no['count'][p]\n    plt.text((width + exng_no['count'][p]*2)\/2, b.patches[p].get_y() + 0.55*b.patches[p].get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 30, color = 'white')\n################################################################### \nplt.subplot(816)\nsns.set_style(\"white\")\nplt.title('Slope of the peak exercise ST segment', fontsize = 25, fontname = 'monospace', x = 0.5, y = 1.05)\na = sns.barplot(data = all_slp, x = 'count', y = 'slp', color = '#8d230f')\nb = sns.barplot(data = slp_no, x = 'count', y = 'slp', color = '#1e434c')\nplt.xticks([])\nplt.yticks(fontname = 'monospace', fontsize = 14)\nplt.ylabel('')\nplt.xlabel('')\n\na.spines['left'].set_linewidth(1.5)\nfor w in ['right', 'top', 'bottom']:\n    a.spines[w].set_visible(False)\n\nfor p in b.patches[3:7]:\n    width = p.get_width()\n    plt.text(width\/2, p.get_y() + 0.55*p.get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 17, color = 'white')\n    \nfor p in range(3):\n    width = b.patches[p].get_width() - slp_no['count'][p]\n    plt.text((width + slp_no['count'][p]*2)\/2, b.patches[p].get_y() + 0.55*b.patches[p].get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 17, color = 'white')\n################################################################### \nplt.subplot(817)\nsns.set_style(\"white\")\nplt.title('Major vessels colored by flourosopy', fontsize = 25, fontname = 'monospace', x = 0.5, y = 1.05)\na = sns.barplot(data = all_caa, x = 'count', y = 'caa', color = '#8d230f')\nb = sns.barplot(data = caa_no, x = 'count', y = 'caa', color = '#1e434c')\nplt.xticks([])\nplt.yticks(fontname = 'monospace', fontsize = 14)\nplt.ylabel('')\nplt.xlabel('')\n\na.spines['left'].set_linewidth(1.5)\nfor w in ['right', 'top', 'bottom']:\n    a.spines[w].set_visible(False)\n\nfor p in b.patches[5:11]:\n    width = p.get_width()\n    plt.text(width\/2, p.get_y() + 0.55*p.get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 17, color = 'white')\n    \nfor p in range(5):\n    width = b.patches[p].get_width() - caa_no['count'][p]\n    plt.text((width + caa_no['count'][p]*2)\/2, b.patches[p].get_y() + 0.55*b.patches[p].get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 17, color = 'white')\n################################################################### \nplt.subplot(818)\nsns.set_style(\"white\")\nplt.title('Thall', fontsize = 25, fontname = 'monospace', x = 0.5, y = 1.05)\na = sns.barplot(data = all_thall, x = 'count', y = 'thall', color = '#8d230f')\nb = sns.barplot(data = thall_no, x = 'count', y = 'thall', color = '#1e434c')\nplt.xticks([])\nplt.yticks(fontname = 'monospace', fontsize = 14)\nplt.ylabel('')\nplt.xlabel('')\n\na.spines['left'].set_linewidth(1.5)\nfor w in ['right', 'top', 'bottom']:\n    a.spines[w].set_visible(False)\n\nfor p in b.patches[3:7]:\n    width = p.get_width()\n    plt.text(width\/2, p.get_y() + 0.55*p.get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 17, color = 'white')\n    \nfor p in range(3):\n    width = b.patches[p].get_width() - thall_no['count'][p]\n    plt.text((width + thall_no['count'][p]*2)\/2, b.patches[p].get_y() + 0.55*b.patches[p].get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 17, color = 'white')\n################################################################### \n\nfig.tight_layout(h_pad = 30)\n\nplt.figtext(0.16, 0.918, 'Conclusion:', fontsize = 18, fontname = 'monospace', color = '#8d230f')\nplt.figtext(0.16, 0.908, '''Women have a higher risk of developing heart disease. However, it is scientifically proven that \nmen are more prone to heart disease.''', fontsize = 14, fontname = 'monospace')\n\nplt.figtext(0.16, 0.787, 'Conclusion:', fontsize = 18, fontname = 'monospace', color = '#8d230f')\nplt.figtext(0.16, 0.779, '''Patients with asymptomatic chest pain type have the lowest risk of heart disease.''', fontsize = 14, fontname = 'monospace')\n\nplt.figtext(0.16, 0.655, 'Conclusion:', fontsize = 18, fontname = 'monospace', color = '#8d230f')\nplt.figtext(0.16, 0.637, '''The presence of diabetes does not affect the risk of heart disease - a real misconception of \nthis small dataset. According to the American Heart Association, a third of all deaths \namong patients with diabetes are associated with disorders of the cardiovascular system. \nDiabetics develop heart attacks and strokes faster - and this is a fact!''', fontsize = 14, fontname = 'monospace')\n\nplt.figtext(0.16, 0.523, 'Conclusion:', fontsize = 18, fontname = 'monospace', color = '#8d230f')\nplt.figtext(0.16, 0.513, '''People with a normal result of electrocardiography are slightly more prone to heart disease - \nI think everyone understands that this is also not true, but data is data.''', fontsize = 14, fontname = 'monospace')\n\nplt.figtext(0.16, 0.391, 'Conclusion:', fontsize = 18, fontname = 'monospace', color = '#8d230f')\nplt.figtext(0.16, 0.381, '''Under certain circumstances, physical activity can cause heart problems, but not necessarily. \nIn our case, most of the patients did not perform physical activity.''', fontsize = 14, fontname = 'monospace')\n\nplt.figtext(0.16, 0.259, 'Conclusion:', fontsize = 18, fontname = 'monospace', color = '#8d230f')\nplt.figtext(0.16, 0.252, '''Patients who have upsloping of the peak exercise ST segment have a higher risk of heart disease''', fontsize = 14, fontname = 'monospace')\n\nplt.figtext(0.16, 0.127, 'Conclusion:', fontsize = 18, fontname = 'monospace', color = '#8d230f')\nplt.figtext(0.16, 0.117, '''Patients who have zero major vessels colored by fluoroscopy have a higher risk of risk of \nheart disease''', fontsize = 14, fontname = 'monospace')\n\nplt.figtext(0.16, -0.006, 'Conclusion:', fontsize = 18, fontname = 'monospace', color = '#8d230f')\nplt.figtext(0.16, -0.012, '''Patients who have normal thall have a higher risk of risk of heart disease''', fontsize = 14, fontname = 'monospace')\n\nplt.show()","23c56878":"reoutput = {'Heart disease': 1, 'No heart disease': 0}\nhrt['output'] = hrt['output'].map(reoutput)\n\nX = hrt.drop(['output'], axis = 1)\ny = hrt['output']\n\nnum_cols = X.select_dtypes(include = ['int64', 'float64']).columns.to_list()\ncat_cols = X.select_dtypes(include = ['object']).columns.to_list()","95492647":"def label_encoder(df):\n    for i in cat_cols:\n        le = LabelEncoder()\n        df[i] = le.fit_transform(df[i])\n    return df","41c50c8f":"sc = StandardScaler()\nX[num_cols] = sc.fit_transform(X[num_cols])\n\n# Label encoding\nX = label_encoder(X)\n\nX.head()","fcea7675":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 228)","12554c8a":"results = pd.DataFrame(columns = ['LR', 'RF', 'LGBM'], index = range(4))","30212ee7":"lg = LogisticRegression(random_state = 228)\nlg.fit(X_train, y_train)\ny_pred = lg.predict(X_test)\ny_prob = lg.predict_proba(X_test)[:,1]\n\n# Metrics\nresults.iloc[0, 0] = round(precision_score(y_test, y_pred), 2)\nresults.iloc[1, 0] = round(recall_score(y_test, y_pred), 2)\nresults.iloc[2, 0] = round(f1_score(y_test, y_pred), 2)\nresults.iloc[3, 0] = round(roc_auc_score(y_test, y_prob), 3)\nlg_cm = confusion_matrix(y_test, y_pred)\n\nprint(classification_report(y_test, y_pred))\nprint(f'ROC AUC score: {round(roc_auc_score(y_test, y_prob), 3)}')\nprint('')\nprint('-----------------------------------------------------')\nprint('')\nprint('Cross-validation scores with 5 folds:')\nprint('')\nprint(f\"ROC AUC: {round(cross_val_score(lg, X_train, y_train, cv = 5, scoring = 'roc_auc').mean(), 3)}\")\nprint(f\"precision: {round(cross_val_score(lg, X_train, y_train, cv = 5, scoring = 'precision').mean(), 2)}\")\nprint(f\"recall: {round(cross_val_score(lg, X_train, y_train, cv = 5, scoring = 'recall').mean(), 2)}\")\nprint(f\"f1: {round(cross_val_score(lg, X_train, y_train, cv = 5, scoring = 'f1').mean(), 2)}\")\n\n# Visualize confusion matrix\nplt.figure(figsize = (8, 5))\nsns.heatmap(lg_cm, cmap = 'Blues', annot = True, fmt = 'd', linewidths = 5, cbar = False, annot_kws = {'fontsize': 15}, \n            yticklabels = ['No heart disease', 'Heart disease'], xticklabels = ['Predicted no heart disease', 'Predicted heart disease'])\nplt.yticks(rotation = 0)\nplt.show()\n\n# Roc curve\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_prob)\nroc_auc = auc(false_positive_rate, true_positive_rate)\n\nsns.set_theme(style = 'white')\nplt.figure(figsize = (8, 8))\nplt.plot(false_positive_rate,true_positive_rate, color = '#b01717', label = 'AUC = %0.3f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1], linestyle = '--', color = '#174ab0')\nplt.axis('tight')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()\n\n# Feature importance\nf_imp = pd.DataFrame(columns = ['feature', 'importance (abs coef)'], index = range(13))\nfor i in range(len(f_imp.index)):\n    f_imp.iloc[i, 0] = X_train.columns.to_list()[i]\nf_imp['importance (abs coef)'] = abs(lg.coef_)[0]\nf_imp = f_imp.sort_values('importance (abs coef)', ascending = False)\nf_imp[0:12].style.background_gradient(cmap = 'Blues')","ba0886de":"rf = RandomForestClassifier(random_state = 228, max_depth = 5)\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\ny_prob = rf.predict_proba(X_test)[:,1]\n\n# Metrics\nresults.iloc[0, 1] = round(precision_score(y_test, y_pred), 2)\nresults.iloc[1, 1] = round(recall_score(y_test, y_pred), 2)\nresults.iloc[2, 1] = round(f1_score(y_test, y_pred), 2)\nresults.iloc[3, 1] = round(roc_auc_score(y_test, y_prob), 3)\nrf_cm = confusion_matrix(y_test, y_pred)\n\nprint(classification_report(y_test, y_pred))\nprint(f'ROC AUC score: {round(roc_auc_score(y_test, y_prob), 3)}')\nprint('')\nprint('-----------------------------------------------------')\nprint('')\nprint('Cross-validation scores with 5 folds:')\nprint('')\nprint(f\"ROC AUC: {round(cross_val_score(rf, X_train, y_train, cv = 5, scoring = 'roc_auc').mean(), 3)}\")\nprint(f\"precision: {round(cross_val_score(rf, X_train, y_train, cv = 5, scoring = 'precision').mean(), 2)}\")\nprint(f\"recall: {round(cross_val_score(rf, X_train, y_train, cv = 5, scoring = 'recall').mean(), 2)}\")\nprint(f\"f1: {round(cross_val_score(rf, X_train, y_train, cv = 5, scoring = 'f1').mean(), 2)}\")\n\n# Visualize confusion matrix\nplt.figure(figsize = (8, 5))\nsns.heatmap(rf_cm, cmap = 'Blues', annot = True, fmt = 'd', linewidths = 5, cbar = False, annot_kws = {'fontsize': 15},\n           yticklabels = ['No heart disease', 'Heart disease'], xticklabels = ['Predicted no heart disease', 'Predicted heart disease'])\nplt.yticks(rotation = 0)\nplt.show()\n\n# Roc curve\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_prob)\nroc_auc = auc(false_positive_rate, true_positive_rate)\n\nsns.set_theme(style = 'white')\nplt.figure(figsize = (8, 8))\nplt.plot(false_positive_rate,true_positive_rate, color = '#b01717', label = 'AUC = %0.3f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1], linestyle = '--', color = '#174ab0')\nplt.axis('tight')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()\n\n# Feature importance\nf_imp2 = pd.DataFrame(columns = ['feature', 'importance'], index = range(13))\nfor i in range(len(f_imp2.index)):\n    f_imp2.iloc[i, 0] = X_train.columns.to_list()[i]\nf_imp2['importance'] = rf.feature_importances_\nf_imp2 = f_imp2.sort_values('importance', ascending = False)\nf_imp2[0:12].style.background_gradient(cmap = 'Blues')","6e52a84d":"lgbm = LGBMClassifier(random_state = 228, max_depth = 5, num_leaves = 50, n_estimators = 20, learning_rate = 0.1)\nlgbm.fit(X_train, y_train)\ny_pred = lgbm.predict(X_test)\ny_prob = lgbm.predict_proba(X_test)[:,1]\n\n# Metrics\nresults.iloc[0, 2] = round(precision_score(y_test, y_pred), 2)\nresults.iloc[1, 2] = round(recall_score(y_test, y_pred), 2)\nresults.iloc[2, 2] = round(f1_score(y_test, y_pred), 2)\nresults.iloc[3, 2] = round(roc_auc_score(y_test, y_prob), 3)\nlgbm_cm = confusion_matrix(y_test, y_pred)\n\nprint(classification_report(y_test, y_pred))\nprint(f'ROC AUC score: {round(roc_auc_score(y_test, y_prob), 3)}')\nprint('')\nprint('-----------------------------------------------------')\nprint('')\nprint('Cross-validation scores with 5 folds:')\nprint('')\nprint(f\"ROC AUC: {round(cross_val_score(lgbm, X_train, y_train, cv = 5, scoring = 'roc_auc').mean(), 3)}\")\nprint(f\"precision: {round(cross_val_score(lgbm, X_train, y_train, cv = 5, scoring = 'precision').mean(), 2)}\")\nprint(f\"recall: {round(cross_val_score(lgbm, X_train, y_train, cv = 5, scoring = 'recall').mean(), 2)}\")\nprint(f\"f1: {round(cross_val_score(lgbm, X_train, y_train, cv = 5, scoring = 'f1').mean(), 2)}\")\n\n# Visualize confusion matrix\nplt.figure(figsize = (8, 5))\nsns.heatmap(lgbm_cm, cmap = 'Blues', annot = True, fmt = 'd', linewidths = 5, cbar = False, annot_kws = {'fontsize': 15},\n           yticklabels = ['No heart disease', 'Heart disease'], xticklabels = ['Predicted no heart disease', 'Predicted heart disease'])\nplt.yticks(rotation = 0)\nplt.show()\n\n# Roc curve\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_prob)\nroc_auc = auc(false_positive_rate, true_positive_rate)\n\nsns.set_theme(style = 'white')\nplt.figure(figsize = (8, 8))\nplt.plot(false_positive_rate,true_positive_rate, color = '#b01717', label = 'AUC = %0.3f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1], linestyle = '--', color = '#174ab0')\nplt.axis('tight')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()\n\n# Feature importance\nf_imp3 = pd.DataFrame(columns = ['feature', 'importance'], index = range(13))\nfor i in range(len(f_imp3.index)):\n    f_imp3.iloc[i, 0] = X_train.columns.to_list()[i]\nf_imp3['importance'] = lgbm.feature_importances_\nf_imp3 = f_imp3.sort_values('importance', ascending = False)\nf_imp3[0:12].style.background_gradient(cmap = 'Blues')","c24c68ee":"plt.figure(figsize = (7, 5))\nsns.heatmap(results[results.columns.to_list()].astype(float), cmap = 'Blues', annot = True, linewidths = 2, cbar = False, annot_kws = {'fontsize': 15},\n           yticklabels = ['Precision', 'Recall', 'F1', 'ROC AUC'])\nsns.set(font_scale = 1.2)\nplt.yticks(rotation = 0)\nplt.show()","b71255a2":"**Results**","14aede87":"# Preprocessing","b72bb026":"**Random forest**","e653244a":"# Modeling","09468bc5":"![](https:\/\/cdn.studenti.stbm.it\/images\/2017\/10\/23\/scorrimento-graduatorie-test-medicina-2017-orig.jpeg)","99e5d5f8":"The best result for the training sample was shown by the logistic regression, but it has the worst scores for cross-validation. Although I presented the results for the training sample, but we need to focus on cross-validation. Random forest showed the best precision, and LGBM the best recall.\n\nOf the three models, I would recommend LGBM. It would be interesting to make tuning models, but what can be tuning on data from 305 observations? :) This is a sure path to overfitting.","dd9ba5be":"Honestly, I don't know why this dataset is so popular. It contains many errors that are not specified by the author. There is no practical sense in building models based on this data. Firstly, this is a very small sample, and secondly, based on basic medical knowledge, the data shows completely incorrect trends, which were described by me in the analysis - all this is again due to the small size of the data. In principle, the models don't make sense to build on this data at all, because data is incorrect. If you look at this data as a training dataset, see how the models will learn on such a small sample-yes, it is interesting, but, I repeat, this data does not make any practical sense.","a20ce2a6":"**Conclusions on the basic information of the dataset:**\n1. We have very few observational objects (patients). The analysis can certainly be done, but how the models will predict such a small number of observations is a question\n2. The data does not require any preprocessing","b2bef36b":"**Conclusion**","89d88673":"**Let's explain what the abbreviated column names mean:**\n\n1. age - age in years\n2. sex - sex (1 = male; 0 = female)\n3. cp - chest pain type (1 = typical angina; 2 = atypical angina; 3 = non-anginal pain; 0 = asymptomatic)\n4. trestbps - resting blood pressure (in mm Hg on admission to the hospital)\n5. chol - serum cholestoral in mg\/dl\n6. fbs - fasting blood sugar > 120 mg\/dl (1 = true; 0 = false)\n7. restecg - resting electrocardiographic results (1 = normal; 2 = having ST-T wave abnormality; 0 = hypertrophy)\n8. thalach - maximum heart rate achieved\n9. exang - exercise induced angina (1 = yes; 0 = no)\n10. oldpeak - ST depression induced by exercise relative to rest\n11. slp - the slope of the peak exercise ST segment (2 = upsloping; 1 = flat; 0 = downsloping)\n12. caa - number of major vessels (0-4) colored by flourosopy\n13. thall - 2 = normal; 1 = fixed defect; 3 = reversable defect\n14. output - the predicted attribute - diagnosis of heart disease (angiographic disease status) (Value 0 = < diameter narrowing; Value 1 = > 50% diameter narrowing)","376eeaab":"**LGBM**","271e0c74":"**Logistic regression**","ac1b2719":"# Results and conclusion","5db45a35":"**Affect of age, level of blood presure, cholesterol level, ST depression and level of maximum heart rate on risk of heart disease**","ceb115e3":"# Basic information","9d543a4f":"# EDA"}}