{"cell_type":{"a051dee7":"code","ff08bca0":"code","275266ef":"code","690cb50e":"code","fbfa37aa":"code","78034fc3":"code","8c2660b9":"code","9e315abb":"code","088f6d39":"code","5749c94d":"code","e8c15ad5":"code","97eb260a":"code","67ca2849":"code","9447b79d":"code","e6e4074e":"code","798f0a48":"code","2c3f638d":"code","6fb423c1":"code","6854d1d0":"code","3d3a56fa":"code","4dad8357":"code","7b2ec256":"code","d5e33927":"code","2aa51401":"code","12ad1aff":"code","276504ed":"code","53c96eae":"code","43aa81d7":"code","ff28a589":"markdown","958b9a5f":"markdown"},"source":{"a051dee7":"import cv2\nimport pandas as pd\nimport numpy as np\nimport os\nimport random\nimport matplotlib.pylab as plt\n\nfrom tqdm.notebook import tqdm\nfrom glob import glob\nfrom sklearn.model_selection import train_test_split\nfrom skimage.io import imread\n\nimport tensorflow as tf\nfrom tensorflow import keras\n\nimport keras.backend as K\nfrom keras.utils.np_utils import to_categorical\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import SGD, RMSprop, Adam, Adagrad, Adadelta\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, BatchNormalization, Conv2D, MaxPool2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, ModelCheckpoint, EarlyStopping\nfrom tensorflow.keras.applications import VGG16\n%matplotlib inline","ff08bca0":"imagePatches = glob('..\/input\/breast-histopathology-images\/IDC_regular_ps50_idx5\/**\/*.png', recursive=True)","275266ef":"for filename in imagePatches[0:7]:\n    print(filename)","690cb50e":"# Two arrays holding images by class type\n\nclass0 = [] # 0 = no cancer\nclass1 = [] # 1 = cancer\n\nfor filename in imagePatches:\n    if filename.endswith(\"class0.png\"):\n        class0.append(filename)\n    else:\n        class1.append(filename)","fbfa37aa":"print(\"Class 0 :\", len(class0))\nprint(\"Class 1 :\", len(class1))","78034fc3":"from random import choice\nfig,axes = plt.subplots(figsize=(20,25))\n  \nran_sample = [choice(class0)for x in range(0,10) ]\nfor i in range(0,len(ran_sample)):\n    img = imread(ran_sample[i])\n    plt.imshow(img)\n    axes =plt.subplot(5,5,i+1)\n    axes.set_title('patientID:'+str(ran_sample[i].split('\/')[3])+'\\n'\n                   +'diagnosis:'+str(ran_sample[i].split('\/')[4]),fontsize=20)\n\n# There was a blank plot \n# so remove it via 'delaxes'\nfig.delaxes(axes)\nfig.suptitle('Random Samples ',fontsize=40)\nplt.show() ","8c2660b9":"img_sample = imread(class0[0])\nplt.title(\"class : 0\")\nplt.imshow(img_sample)","9e315abb":"img_sample = imread(class0[1])\nplt.title(\"class : 0\")\nplt.imshow(img_sample)","088f6d39":"sampled_class0 = random.sample(class0, len(class1))\nsampled_class1 = random.sample(class1, len(class1))\n\nprint(\"Class 0 :\", len(sampled_class0))\nprint(\"Class 1 :\", len(sampled_class1))","5749c94d":"def get_image_arrays(data, label):\n    img_arrays = []\n    for i in tqdm(range(len(data))):\n        image = data[i]\n        if image.endswith('.png'):\n            img = cv2.imread(image ,cv2.IMREAD_COLOR)\n            img_sized = cv2.resize(img, (50, 50), interpolation=cv2.INTER_LINEAR)\n            img_arrays.append([img_sized, label])\n    return img_arrays","e8c15ad5":"class0_array = get_image_arrays(sampled_class0, 0)\nclass1_array = get_image_arrays(sampled_class1, 1)\n\ndel sampled_class0\ndel sampled_class1\ndel class0\ndel class1\ndel imagePatches","97eb260a":"img_sample = class0_array[0][0]\nplt.title('class: 0')\nplt.imshow(img_sample)","67ca2849":"img_sample = class1_array[0][0]\nplt.title('class: 1')\nplt.imshow(img_sample)","9447b79d":"combined_data = np.concatenate((class0_array, class1_array))\n\nrandom.seed(18)\nrandom.shuffle(combined_data)","e6e4074e":"X = []\ny = []\n\nfor features,label in combined_data:\n    X.append(features)\n    y.append(label)\n    \ndel combined_data","798f0a48":"print(X[0])","2c3f638d":"X = np.array(X)\ny = np.array(y)\n\nprint(\" Shape X : \", X.shape)\nprint(\" Shape y : \", y.shape)","6fb423c1":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=18)\n\ny_train = to_categorical(y_train)\ny_val = to_categorical(y_val)\n\nnp.save(\"X_train.npy\" , X_train,)\nnp.save(\"X_val.npy\" , X_val,)\nnp.save(\"y_train.npy\" , y_train,)\nnp.save(\"y_val.npy\" , y_val,)\ndel X,y\n\nprint(\" X_train : \", X_train.shape)\nprint(\" y_train : \", y_train.shape)\nprint(\" X_val : \", y_train.shape)\nprint(\" y_tval : \", y_val.shape)","6854d1d0":"\"\"\"X_train = np.load(\".\/X_train.npy\")\nX_val = np.load(\".\/X_val.npy\")\ny_train = np.load(\".\/y_train.npy\")\ny_val = np.load('.\/y_val.npy')\n\nprint(\" X_train : \", X_train.shape)\nprint(\" y_train : \", y_train.shape)\nprint(\" X_val : \", X_val.shape)\nprint(\" y_tval : \", y_val.shape)\"\"\"","3d3a56fa":"base_model_VGG = tf.keras.applications.VGG16(\n    input_shape=(50,50,3),\n    include_top=False,\n    weights=\"imagenet\"\n)","4dad8357":"base_model_resnet = tf.keras.applications.ResNet50(\n    include_top=False,\n    weights=\"imagenet\",\n    input_shape=(50,50,3),\n)\n","7b2ec256":"base_models = [base_model_resnet, base_model_VGG]\n\nfor base_model in base_models:\n    for layer in base_model.layers[:-5]:\n        layer.trainable=False","d5e33927":"# Building Model\n\ndef build_model(base_model,METRICS):\n    model = tf.keras.Sequential([\n        #tf.keras.layers.Input(shape=(None,50,50,3)),\n        tf.keras.layers.Lambda(lambda x: x\/255),\n        #keras.layers.Lambda(lambda x: x\/255),\n        base_model,\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(2,activation='softmax')\n    ])\n    \n    \n    model.compile(optimizer='Adam', loss='binary_crossentropy',metrics=METRICS)\n#     try:\n#         model.summary()\n#     except: \n#         pass\n    return model\n    ","2aa51401":"#build_model(base_model_VGG,METRICS)","12ad1aff":"#%% PLOTTING RESULTS (Train vs Validation FOLDER 1)\n\ndef Train_Val_Plot(history):\n    \n    acc = history.history['accuracy']\n    val_acc = history.history['val_accuracy']\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n    auc = history.history['auc']\n    val_auc = history.history['val_auc']\n    precision = history.history['precision']\n    val_precision = history.history['val_precision']\n    \n    fig, (ax1, ax2, ax3,ax4) = plt.subplots(1,4, figsize= (20,4))\n    fig.suptitle(\" MODEL'S METRICS VISUALIZATION \")\n\n    ax1.plot(range(1, len(acc) + 1), acc)\n    ax1.plot(range(1, len(val_acc) + 1), val_acc)\n    ax1.set_title('History of Accuracy')\n    ax1.set_xlabel('Epochs')\n    ax1.set_ylabel('Accuracy')\n    ax1.legend(['training', 'validation'])\n\n\n    ax2.plot(range(1, len(loss) + 1), loss)\n    ax2.plot(range(1, len(val_loss) + 1), val_loss)\n    ax2.set_title('History of Loss')\n    ax2.set_xlabel('Epochs')\n    ax2.set_ylabel('Loss')\n    ax2.legend(['training', 'validation'])\n    \n    ax3.plot(range(1, len(auc) + 1), auc)\n    ax3.plot(range(1, len(val_auc) + 1), val_auc)\n    ax3.set_title('History of AUC')\n    ax3.set_xlabel('Epochs')\n    ax3.set_ylabel('AUC')\n    ax3.legend(['training', 'validation'])\n    \n    ax4.plot(range(1, len(precision) + 1), precision)\n    ax4.plot(range(1, len(val_precision) + 1), val_precision)\n    ax4.set_title('History of Precision')\n    ax4.set_xlabel('Epochs')\n    ax4.set_ylabel('Precision')\n    ax4.legend(['training', 'validation'])\n    \n    plt.show()","276504ed":"METRICS = [\n      tf.keras.metrics.BinaryAccuracy(name='accuracy'),\n      tf.keras.metrics.Precision(name='precision'),\n      tf.keras.metrics.Recall(name='recall'),  \n      tf.keras.metrics.AUC(name='auc'),\n]\n\nlrd = ReduceLROnPlateau(monitor = 'val_loss',patience = 5,verbose = 1,factor = 0.75, min_lr = 1e-10)\nmcp = ModelCheckpoint('model.h5')\nes = EarlyStopping(verbose=1, patience=5)\n\ndef fit_model(base, name, epochs,METRICS):\n    base_model = base_models[base]\n    print(f\"Training using {name} model\")\n    \n    model = build_model(base_model,METRICS)\n    \n    history = model.fit(X_train, y_train,\n                        batch_size=128,\n                        validation_data=(X_val, y_val),\n                        verbose = 1,epochs = 5,\n                        callbacks=[lrd,mcp,es]\n                       )\n    \n    model.summary()\n    \n    Train_Val_Plot(history)","53c96eae":"fit_model(0, \"RESNET50\", 5,METRICS)","43aa81d7":"fit_model(1, \"VGG\", 5, METRICS)","ff28a589":"# Prediction of breast cancer","958b9a5f":"# Using Generators"}}