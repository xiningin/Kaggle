{"cell_type":{"2f8287a0":"code","f6e03232":"code","bccdf06a":"code","7ef3fa88":"code","f098b10e":"code","6b5f5897":"code","c5d12849":"code","36f0c85a":"code","66a68645":"code","23bc0e47":"code","74bd37cd":"code","7733b397":"code","86450ee3":"code","03a7732a":"code","e195332f":"code","dad8e897":"code","0d364659":"code","aa350cc6":"code","f4a49082":"code","63a7fa8c":"code","5e4809bf":"markdown","b957a9ed":"markdown","49844b23":"markdown","eaae656f":"markdown","fbc5deb8":"markdown","db3d64c5":"markdown","52b03acb":"markdown","b112b6a4":"markdown","5da6df81":"markdown","9100aeac":"markdown","24ec39e5":"markdown","10ba8080":"markdown","06274c4b":"markdown","f23caa93":"markdown","21bf5a6b":"markdown","8fe96294":"markdown","df92d841":"markdown","61b5788b":"markdown","a1cbb245":"markdown"},"source":{"2f8287a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f6e03232":"#Data Processing\nimport pandas as pd\nimport numpy as np\n\n#Data Visulaisation\nimport plotly.express as px\n\n#Machine Learning Libraries\nimport sklearn \nfrom sklearn import linear_model\nfrom sklearn.utils import shuffle\n\n#Miscellaneous\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')","bccdf06a":"def read_data(path,file):\n     return pd.read_csv(path+\"\/\"+file)    \npath=r'..\/input\/corona-virus-report'\nworld =read_data(path,'worldometer_data.csv')\nindia=read_data('..\/input\/covid19-in-india','covid_19_india.csv')\nstate=pd.read_csv(\"..\/input\/covid19-in-india\/StatewiseTestingDetails.csv\")\ndaily = pd.read_csv('..\/input\/covid19-corona-virus-india-dataset\/nation_level_daily.csv')\nvac_data = pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')\npop_data = pd.read_csv('..\/input\/corona-virus-report\/worldometer_data.csv')\nvac_manu = pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations_by_manufacturer.csv')\nstate_vac=pd.read_csv('..\/input\/covid19-in-india\/covid_vaccine_statewise.csv')\ndaily_records=read_data(path,'day_wise.csv')","7ef3fa88":"# For world Vaccination Dataset\nusa_vac = vac_data[vac_data['country'] == 'United States']\nuk_vac = vac_data[vac_data['country'] == 'United Kingdom']\nger_vac = vac_data[vac_data['country'] == 'Germany']\nita_vac = vac_data[vac_data['country'] == 'Italy']\nfra_vac = vac_data[vac_data['country'] == 'France']\nchi_vac = vac_data[vac_data['country'] == 'China']\nrus_vac = vac_data[vac_data['country'] == 'Russia']\nisr_vac = vac_data[vac_data['country'] == 'Israel']\nuae_vac = vac_data[vac_data['country'] == 'United Arab Emirates']\ncan_vac = vac_data[vac_data['country'] == 'Canada']\njpn_vac = vac_data[vac_data['country'] == 'Japan']\nind_vac = vac_data[vac_data['country'] == 'India']\nino_vac = vac_data[vac_data['country'] == 'Indonesia']\nmal_vac = vac_data[vac_data['country'] == 'Malaysia']\nban_vac = vac_data[vac_data['country'] == 'Bangladesh']\nnig_vac = vac_data[vac_data['country'] == 'Nigeria']\nphi_vac = vac_data[vac_data['country'] == 'Phillipines']\nvie_vac = vac_data[vac_data['country'] == 'Vietnam']\negy_vac = vac_data[vac_data['country'] == 'Egypt']\npak_vac = vac_data[vac_data['country'] == 'Pakistan']\nusa_vac.drop(usa_vac[usa_vac['daily_vaccinations'].isnull()].index, inplace=True)\nuk_vac.drop(uk_vac[uk_vac['daily_vaccinations'].isnull()].index, inplace=True)\nger_vac.drop(ger_vac[ger_vac['daily_vaccinations'].isnull()].index, inplace=True)\nita_vac.drop(ita_vac[ita_vac['daily_vaccinations'].isnull()].index, inplace=True)\nfra_vac.drop(fra_vac[fra_vac['daily_vaccinations'].isnull()].index, inplace=True)\nchi_vac.drop(chi_vac[chi_vac['daily_vaccinations'].isnull()].index, inplace=True)\nrus_vac.drop(rus_vac[rus_vac['daily_vaccinations'].isnull()].index, inplace=True)\nisr_vac.drop(isr_vac[isr_vac['daily_vaccinations'].isnull()].index, inplace=True)\nuae_vac.drop(uae_vac[uae_vac['daily_vaccinations'].isnull()].index, inplace=True)\ncan_vac.drop(can_vac[can_vac['daily_vaccinations'].isnull()].index, inplace=True)\njpn_vac.drop(jpn_vac[jpn_vac['daily_vaccinations'].isnull()].index, inplace=True)\nind_vac.drop(ind_vac[ind_vac['daily_vaccinations'].isnull()].index, inplace=True)\nino_vac.drop(ino_vac[ino_vac['daily_vaccinations'].isnull()].index, inplace=True)\nmal_vac.drop(mal_vac[mal_vac['daily_vaccinations'].isnull()].index, inplace=True)\nban_vac.drop(ban_vac[ban_vac['daily_vaccinations'].isnull()].index, inplace=True)\nnig_vac.drop(nig_vac[nig_vac['daily_vaccinations'].isnull()].index, inplace=True)\nphi_vac.drop(phi_vac[phi_vac['daily_vaccinations'].isnull()].index, inplace=True)\nvie_vac.drop(vie_vac[vie_vac['daily_vaccinations'].isnull()].index, inplace=True)\negy_vac.drop(egy_vac[egy_vac['daily_vaccinations'].isnull()].index, inplace=True)\npak_vac.drop(pak_vac[pak_vac['daily_vaccinations'].isnull()].index, inplace=True)\n","f098b10e":"#For Indian Vaccination Dataset\ndf2=state_vac\ndf2 = df2.rename(columns= {'Updated On':'Date','Total Doses Administered':'TotalDoses','Male(Individuals Vaccinated)':'Male','Female(Individuals Vaccinated)':'Female', 'Total Individuals Vaccinated':'TotalVaccinated',' Covaxin (Doses Administered)':'Covaxin','CoviShield (Doses Administered)':'CoviShield','Sputnik V (Doses Administered)':'Sputnik'})\ndf2.Date = pd.to_datetime(df2.Date, format=\"%d\/%m\/%Y\")\ndf3=india\ndf1=state\ndf2 = df2[df2['State'] !='India']\ndf2 = df2.rename(columns= {'Updated On':'Date','Total Doses Administered':'TotalDoses','Male(Individuals Vaccinated)':'Male','Female(Individuals Vaccinated)':'Female', 'Total Individuals Vaccinated':'TotalVaccinated',' Covaxin (Doses Administered)':'Covaxin','CoviShield (Doses Administered)':'CoviShield','Sputnik V (Doses Administered)':'Sputnik'})\ndf2.Date = pd.to_datetime(df2.Date, format=\"%d\/%m\/%Y\")\ndf2_2=df2[df2['Date']==\"2021-08-9\"]\ndf2_2.dropna()\ndf2_1 = df3[df3['Date']=='2021-08-11']","6b5f5897":"features=['TotalCases','TotalDeaths','TotalRecovered','ActiveCases']\nfor i in features:\n    fig=px.treemap(world.iloc[0:25],\n               values=i,\n               path=['Country\/Region'],\n               template='plotly_dark',\n               title=\"Tree Map depicting Impact of Covid-19 w.r.t {}\".format(i))\n    fig.show()","c5d12849":"px.line(daily_records,\n       x='Date',\n       y=['Confirmed', 'Deaths', 'Recovered','Active'],\n       template='plotly_dark',\n       title='Daily trends of Covid-19 cases',\n       labels={'Date':'Month','value':'Statistics'})","36f0c85a":"fig2=px.bar(world.iloc[0:20][::-1],\n      y='Country\/Region',\n      x=['TotalCases','TotalRecovered', 'ActiveCases','TotalDeaths','Serious,Critical'],\n      template='plotly_dark',\n      title='Severly Hit Countries')\nfig2.update_xaxes(tickangle=270)\nfig2.show()","66a68645":"px.pie(world.iloc[0:20],\n       names='Country\/Region',\n       values='TotalCases',\n      template='plotly_dark',\n      title='Distribution of Total Cases ')","23bc0e47":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\ngrouped_data=read_data(path,'full_grouped.csv')\ngrouped_data.head()\n\ndef country_visualisations(df,country):\n    data_group=df[df['Country\/Region']==country]\n    data=data_group.loc[:,['Date','Confirmed','Deaths','Recovered','Active']]\n    figure1=make_subplots(rows=1,cols=4,subplot_titles=('Confirmed','Active','Recovered','Deaths'))\n    \n    figure1.add_trace(go.Scatter(name='Confirmed',x=data['Date'],y=data['Confirmed']),row=1,col=1)\n    \n    figure1.add_trace(go.Scatter(name='Active',x=data['Date'],y=data['Active']),row=1,col=2)\n        \n    figure1.add_trace(go.Scatter(name='Recovered',x=data['Date'],y=data['Recovered']),row=1,col=3)\n    \n    figure1.add_trace(go.Scatter(name='Deaths',x=data['Date'],y=data['Deaths']),row=1,col=4)\n    \n    figure1.update_layout(height=500,\n                         width=2000,\n                         title_text='Recorded Cases in {}'.format(country),\n                         template='plotly_dark')\n    figure1.show()","74bd37cd":"country_visualisations(grouped_data,'India')\ncountry_visualisations(grouped_data,'Peru')","7733b397":"\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=usa_vac['date'], y=usa_vac['daily_vaccinations'], mode='lines+markers', name='USA'))\nfig.add_trace(go.Scatter(x=uk_vac['date'],y=uk_vac['daily_vaccinations'], mode='lines+markers', name='UK'))\nfig.add_trace(go.Scatter(x=ger_vac['date'],y=ger_vac['daily_vaccinations'], mode='lines+markers', name='Germany'))\nfig.add_trace(go.Scatter(x=ind_vac['date'],y=ind_vac['daily_vaccinations'], mode='lines+markers', name='India'))\nfig.update_layout(title='Comparison of Daily Vaccinations' , template='plotly_dark' )\nfig.show()","86450ee3":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=ind_vac['date'],y=ind_vac['daily_vaccinations'], mode='lines+markers', name='India'))\nfig.add_trace(go.Scatter(x=chi_vac['date'],y=chi_vac['daily_vaccinations'], mode='lines+markers', name='China'))\nfig.add_trace(go.Scatter(x=pak_vac['date'],y=pak_vac['daily_vaccinations'], mode='lines+markers', name='Pakistan'))\nfig.update_layout(title='Comparison of Daily Vaccinations' , template='plotly_dark')\nfig.show()","03a7732a":"state.Date = pd.to_datetime(state.Date, format=\"%Y\/%m\/%d\")\nfig = px.line(state, x='Date', y='TotalSamples', color='State', title='Total number of samples collected for Covid-19 testing(Statewise)' , template=\"plotly_dark\")\n\nfig.show()","e195332f":"fig = px.bar(df2_1, x='State\/UnionTerritory', y=['Confirmed','Cured','Deaths'], template=\"plotly_dark\")\nfig.update_layout(xaxis={'categoryorder':'total descending'})\nfig.show()","dad8e897":"fig = px.bar(df2_2, x='State', y='TotalDoses',title='Total Doses (Jan-Aug)',template=\"plotly_dark\")\nfig.update_traces(textposition='outside')\nfig.update_layout(xaxis={'categoryorder':'total descending'})\nfig.update_xaxes(tickfont=dict(size=14))\nfig.update_yaxes(tickfont=dict(size=14))\nfig.show()","0d364659":"fig = px.bar(df2_2, x=\"State\", y=[\"Covaxin\", \"CoviShield\",'TotalDoses'], template=\"plotly_dark\")\n\nfig.update_layout(barmode='stack',legend_orientation=\"h\",legend=dict(x= 0.3, y=1.0),\n                  xaxis={'categoryorder':'total descending'},\n                 title_text='<b>Covid-19 Total Vaccinations in India according to type of vaccine<b>',\n                  title_x=0.5,\n                  width= 1100,\n                  height= 500\n                 )\nfig.update_xaxes(tickfont=dict(size=14))\nfig.update_yaxes(tickfont=dict(size=14))\nfig.show()","aa350cc6":"from sklearn import model_selection\nfrom sklearn.linear_model import LinearRegression\ndf2_1=df2_1[df2_1['State\/UnionTerritory']!='Maharashtra']\nstates_clubbed=df2_1[[\"Confirmed\",\"Cured\",\"Deaths\"]]\npredict=\"Deaths\"\nX=np.array(states_clubbed.drop(predict,1))\ny=np.array(states_clubbed[predict])\nX_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.25)\nlinear = LinearRegression()\nlinear.fit(X_train,y_train)\nY_pred = linear.predict(X_test)\nprint(linear.score(X_test, y_test))\nprint(linear.score(X_train,y_train))\n","f4a49082":"df2_1\nfig = px.scatter(df2_1, x='Cured', y='Deaths', template=\"plotly_dark\")\nfig.show()","63a7fa8c":"df2_1","5e4809bf":"## Indian Situation","b957a9ed":"# Data Visualization","49844b23":"## Overview \n*(Source: WHO)*\n\nCoronavirus disease (COVID-19) is an infectious disease caused by the SARS-CoV-2 virus.\n\nMost people infected with the virus will experience mild to moderate respiratory illness and recover without requiring special treatment. However, some will become seriously ill and require medical attention. Older people and those with underlying medical conditions like cardiovascular disease, diabetes, chronic respiratory disease, or cancer are more likely to develop serious illness. Anyone can get sick with COVID-19 and become seriously ill or die at any age. \n\nThe best way to prevent and slow down transmission is to be well informed about the disease and how the virus spreads. Protect yourself and others from infection by staying at least 1 metre apart from others, wearing a properly fitted mask, and washing your hands or using an alcohol-based rub frequently. Get vaccinated when it\u2019s your turn and follow local guidance.\n\nThe virus can spread from an infected person\u2019s mouth or nose in small liquid particles when they cough, sneeze, speak, sing or breathe. These particles range from larger respiratory droplets to smaller aerosols. It is important to practice respiratory etiquette, for example by coughing into a flexed elbow, and to stay home and self-isolate until you recover if you feel unwell.\n## We have attempted to show how this deadly virus attacked the world","eaae656f":"## Indian Dataset","fbc5deb8":"### Indian Vaccination Status","db3d64c5":"### Result of Testing\n","52b03acb":"## Pakistan may have won the cricket match but they did not win at vaccinations per day \n","b112b6a4":"## Indian Vs Pakistan (And China) \n### Not Cricket but Vaccinations  ","5da6df81":"## ","9100aeac":"# Machine Learning Part","24ec39e5":"## World Dataset","10ba8080":"# **College Python Project**\n## **CIA - COVID INFO AND ANALYSIS**","06274c4b":"# Initialization","f23caa93":"# Data Cleaning \n## Making the data more usable for working with it ","21bf5a6b":"### Testing Situation In India","8fe96294":"# Reading DataSet","df92d841":"## World Vaccination Situation ","61b5788b":"## Attempt At Linear Regression ","a1cbb245":"# Importing Libraries"}}