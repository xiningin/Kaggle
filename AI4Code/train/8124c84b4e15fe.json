{"cell_type":{"ae01e055":"code","513f8b7d":"code","3034058b":"code","e731de95":"code","7438250a":"code","9c4f0e88":"code","52582540":"code","fc66cfe1":"code","587a052c":"code","169e6cc4":"code","16a2dc3a":"code","cc8772d3":"markdown"},"source":{"ae01e055":"import sys\n!cp ..\/input\/rapids\/rapids.0.13.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz > \/dev\/null\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.6\/site-packages\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.6\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + sys.path \n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/","513f8b7d":"import numpy as np\nimport pandas as pd\nimport gc\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import StratifiedKFold\n\nimport cudf\nfrom cuml.ensemble import RandomForestRegressor","3034058b":"df      = pd.read_csv(\"..\/input\/remove-trends-giba-explained\/train_clean_giba.csv\").sort_values(\"time\").reset_index(drop=True)\ntest_df = pd.read_csv(\"..\/input\/remove-trends-giba-explained\/test_clean_giba.csv\").sort_values(\"time\").reset_index(drop=True)\n\ndf.signal        = df.signal.astype('float32')\ndf.open_channels = df.open_channels.astype('float32')\n\ntest_df.signal   = test_df.signal.astype('float32')","e731de95":"df[\"group\"] = np.arange(df.shape[0])\/\/500_000\ndf[\"mg\"]    = np.arange(df.shape[0])\/\/100_000\ndf[\"group\"].value_counts()","7438250a":"df[\"category\"] = 0\ntest_df[\"category\"] = 0\n\n# train segments with more then 9 open channels classes\ndf.loc[2_000_000:2_500_000-1, 'category'] = 1\ndf.loc[4_500_000:5_000_000-1, 'category'] = 1\n\n# test segments with more then 9 open channels classes (potentially)\ntest_df.loc[500_000:600_000-1, \"category\"] = 1\ntest_df.loc[700_000:800_000-1, \"category\"] = 1\n\ndf['category']      = df['category'].astype( np.float32 )\ntest_df['category'] = test_df['category'].astype( np.float32 )","9c4f0e88":"TARGET = \"open_channels\"\n\naug_df = df[df[\"group\"] == 5].copy()\naug_df[\"category\"] = 1\naug_df[\"group\"] = 10\n\nfor col in [\"signal\", TARGET]:\n    aug_df[col] += df[df[\"group\"] == 8][col].values\n    \naug_df['category'] = aug_df['category'].astype( np.float32 )\n    \n\ndf = df.append(aug_df, sort=False)","52582540":"NUM_SHIFT = 20\n\nfeatures = [\"signal\",\"signal\",\"category\"]\n\nfor i in range(1, NUM_SHIFT + 1):\n    f_pos = \"shift_{}\".format(i)\n    f_neg = \"shift_{}\".format(-i)\n    features.append(f_pos)\n    features.append(f_neg)\n    for data in [df, test_df]:\n        data[f_pos] = data[\"signal\"].shift(i).fillna(-3).astype( np.float32 ) # Groupby shift!!!\n        data[f_neg] = data[\"signal\"].shift(-i).fillna(-3).astype( np.float32 ) # Groupby shift!!!\n        \ndata.head()","fc66cfe1":"%%time\n\nNUM_FOLDS = 5\nskf = StratifiedKFold(n_splits=NUM_FOLDS, shuffle=True, random_state=42)\n\ntest_df = cudf.from_pandas( test_df )\n\noof_preds = np.zeros((len(df)))\ny_test = np.zeros((len(test_df)))\nfor fold, (train_ind, val_ind) in enumerate(skf.split(df, df[\"group\"])):\n    train_df, val_df = df.iloc[train_ind], df.iloc[val_ind]\n    print('Fold', fold )\n\n    train_df = cudf.from_pandas( train_df )\n    val_df   = cudf.from_pandas( val_df )\n\n    model = RandomForestRegressor(\n            n_estimators=35,\n            rows_sample = 0.35,\n            max_depth=18,\n            max_features=11,        \n            split_algo=0,\n            bootstrap=False, #Don't use repeated rows, this is important to set to False to improve accuracy\n        ).fit( train_df[features], train_df[TARGET] )\n        \n    pred = model.predict( val_df[features] ).to_array()\n    oof_preds[val_ind] = np.round( pred )\n        \n    y_test += model.predict( test_df[features] ).to_array() \/ NUM_FOLDS\n    del model; _=gc.collect()\n    \ny_test = np.round( y_test )","587a052c":"f1_score( df[\"open_channels\"], oof_preds, average=\"macro\")","169e6cc4":"test_df['time'] = [ \"{0:.4f}\".format(v) for v in test_df['time'].to_array() ]\ntest_df[TARGET] = y_test.astype(np.int32)\ntest_df.to_csv('submission.csv', index=False, columns=[\"time\", TARGET])","16a2dc3a":"print( test_df[[\"time\", TARGET]].tail() )","cc8772d3":"## Add this Dataset to you notebook:  https:\/\/www.kaggle.com\/cdeotte\/rapids\n## Install https:\/\/rapids.ai\/start.html"}}