{"cell_type":{"69433242":"code","b8831e6e":"code","07a9b514":"code","8955c601":"code","9de896e9":"code","3b58558c":"code","9a6f9344":"code","78c7b8ac":"code","3f3273dd":"code","3c22f465":"markdown","543ffafa":"markdown","68b636ba":"markdown","464e3c07":"markdown","ad2a69bf":"markdown","81c149a9":"markdown","04de4759":"markdown","ac4a8da3":"markdown","bbe94a03":"markdown","f7f5130a":"markdown","6891793e":"markdown"},"source":{"69433242":"#necessary libraries\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.resnet import ResNet50\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout, Flatten\nfrom tensorflow.keras.optimizers import Adam\nimport warnings\nwarnings.filterwarnings('ignore')","b8831e6e":"#load labels.csv and observe it\nlabels = pd.read_csv('..\/input\/appa-real-face-cropped\/labels.csv')\nlabels.head()","07a9b514":"plt.figure(figsize=(10, 6))\nsns.set_style('whitegrid')\nsns.set_palette('inferno')\nsns.distplot(labels['real_age'], rug=True, kde_kws={'shade':True, 'color':'r'})\nplt.xlabel('Age', fontsize=12, color='b')\nplt.ylabel('Frequency', fontsize=12, color='b')\nplt.title('Distribution of ages', fontsize=16, color='b')\nplt.show()","8955c601":"# create datagenerator object for training and validation datasets\n#rescale images using 1\/255\ntrain_datagen = ImageDataGenerator(\n            #we will do normalization for image pixel values as following\n            rescale=1 \/ 255\n            )\n\n#use flow_from_dataframe method to load images from directory and labels from dataframe\ntrain_datagen_flow = train_datagen.flow_from_dataframe(\n    dataframe = labels,\n    directory='..\/input\/appa-real-face-cropped\/final_files\/final_files',\n    x_col=\"file_name\", \n    y_col=\"real_age\",\n    #we are doing regression, so we will assign class_mode to 'raw'\n    class_mode=\"raw\",\n    #to convert all images to same pixel size, for neural networks, all images should have similar size\n    target_size=(224,224),\n    #we will load images batch by batch (every time 32 images will be loaded)\n    batch_size=32,\n    seed=12345,\n    )","9de896e9":"#get one batch from our datagenerator and display images in it\nfeatures, target = next(train_datagen_flow)\n\n# display 16 images\nfig = plt.figure(figsize=(12,12))\nfor i in range(32):\n    fig.add_subplot(4, 8, i+1)\n    plt.imshow(features[i])\n    plt.title(f'{target[i]}')\n\t# remove axes and place the images closer to one another for a more compact output\n    plt.xticks([])\n    plt.yticks([])\n    plt.suptitle('Photos with real ages',  y=0.9,fontsize=16, color='b')\n    plt.tight_layout()","3b58558c":"def load_train(path):\n    \n    \"\"\"\n    It loads the train part of dataset from path\n    \"\"\"\n    \n    labels = pd.read_csv(path + 'labels.csv')\n    train_datagen = ImageDataGenerator(validation_split=0.25, rescale=1 \/ 255)\n    train_gen_flow = train_datagen.flow_from_dataframe(\n        dataframe=labels,\n        directory=path + 'final_files\/final_files\/',\n        x_col='file_name',\n        y_col='real_age',\n        target_size=(224, 224),\n        batch_size=32,\n        class_mode='raw',\n        subset = 'training',\n        seed=12345)\n\n    return train_gen_flow\n\n\ndef load_test(path):\n    \n    \"\"\"\n    It loads the validation\/test part of dataset from path\n    \"\"\"\n    labels = pd.read_csv(path + 'labels.csv')\n    validation_datagen = ImageDataGenerator(validation_split=0.25, rescale=1\/255)\n    test_gen_flow = validation_datagen.flow_from_dataframe(\n    dataframe = labels,\n    directory=path +'final_files\/final_files\/',\n    x_col=\"file_name\",\n    y_col=\"real_age\", \n    class_mode=\"raw\", \n    target_size=(224,224), \n    batch_size=32,\n    subset = \"validation\",\n    seed=12345,\n    )\n\n    return test_gen_flow\n\n\ndef create_model(input_shape):\n    \n    \"\"\"\n    It defines the model\n    \"\"\"\n    # we will use ResNet50 architecture, with freezing top layers\n    backbone = ResNet50(input_shape=input_shape, weights='imagenet', include_top=False)\n    model = Sequential()\n    model.add(backbone)\n    \n    #now we will add our custom layers\n    #without drop layer, neural networks can easily overfit\n    model.add(Dropout(0.2))\n    model.add(GlobalAveragePooling2D())\n    \n    #final layer, since we are doing regression we will add only one neuron (unit)\n    model.add(Dense(1, activation='relu'))\n    optimizer = Adam(lr=0.0003)\n    model.compile(optimizer=optimizer, loss='mae', metrics=['mae'])\n    print(model.summary())\n\n    return model\n\n\ndef train_model(model, train_data, test_data, batch_size=None, epochs=20,\n                steps_per_epoch=None, validation_steps=None):\n\n    \"\"\"\n    Trains the model given the parameters\n    \"\"\"\n    \n    model.fit(train_data, validation_data=test_data, batch_size=batch_size, \n              epochs=epochs, steps_per_epoch=steps_per_epoch, \n              validation_steps=validation_steps, verbose=2)\n\n    return model","9a6f9344":"#assign data directory\npath = '..\/input\/appa-real-face-cropped\/'","78c7b8ac":"#load training and testing (actually this is validation data set)\ntrain_data = load_train(path)\ntest_data = load_test(path)\n\n#build a model\nmodel = create_model(input_shape = (224, 224, 3))","3f3273dd":"#train the model\nmodel = train_model(model, train_data, test_data)","3c22f465":"> Training model can take long time, especillay without GPU. Therefore, we strongly recommend to turn on your GPU before next step. By the way, there are more than 23 million trainable parameters in the ResNet50 model. This is the reason why using it without a GPU platform would cause a very, very long wait time for a model to be trained, even if it has been pre-trained.","543ffafa":"> Let's qucikly check the age distribution of photos","68b636ba":"## 2. Defining necessary functions for neural network","464e3c07":"As we can see, our dataset contains various face photos. Some of them rotated, shifted etc a little bit. Can you guess the age looking the photos :). Now, we will train a model, telling them what is the age, and then ask them to guess (using validation dataset).","ad2a69bf":"The dataset is stored in the `..\/input\/appa-real-face-cropped` folder, there you can find\n- The `..\/input\/appa-real-face-cropped\/null` folder with 7.6k photos\n- The `..\/input\/appa-real-face-cropped\/labels.csv` file with labels, with two columns: `file_name` and `real_age`","81c149a9":"## Calling functions","04de4759":"Given the fact that the number of image files is rather high, it is advisable to avoid reading them all at once, which would greatly consume computational resources. Hence, we will use the **ImageDataGenerator** generator: class from Keras, that forms batches with images and labels (class for classification, for instance) based on the photos in a directory.","ac4a8da3":"## We have achieved quite good MAE, which can predict age of person with $\\pm$ 6.4. \n\n## By the way, in [one article about this dataset](http:\/\/people.ee.ethz.ch\/~timofter\/publications\/Agustsson-FG-2017.pdf) we are working with, the lowest MAE value reached is 5.4. This paper was published in 2017 by ETH Computer Vision researhcer. We also did quite well by getting MAE of 6.4 compared to 5.4.\n\nSo our XYZ store, now can use this model just to idenify the age of person who is buying an alcohol products.","bbe94a03":"*As we can see from the above plot, we have images of people of various ages. However, the majority of the images belong to 20-40 years old people. And also we have pretty much cute baby photos (less than 10).*","f7f5130a":"## 1. Data loading and exploration","6891793e":"# Predict age from photo\n\nThe supermarket chain XYZ would like to explore whether Data Science can help them adhere to alcohol laws by making sure they do not sell alcohol to people underage. You are asked to conduct that evaluation, so as you set to work, keep the following in mind:\n- The shops are equipped with cameras in the checkout area which are triggered when a person is buying alcohol;\n- Computer vision methods can be used to determine age of a person from a photo;\n\n### 0.1 Goal\nThe task then is to build and evaluate a model for verifying people's age using deep neural network"}}