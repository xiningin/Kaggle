{"cell_type":{"913e98b7":"code","8d46eb85":"code","d9a15879":"code","6d77a672":"code","4a0ce3f5":"code","0aa5a41c":"code","dacfff54":"code","f156b0f5":"code","9cceed3b":"code","2a7717bf":"code","4a7c3986":"code","b2b8d6f6":"markdown"},"source":{"913e98b7":"tez_path = '..\/input\/tez-lib\/'\neffnet_path = '..\/input\/efficientnet-pytorch\/'\nimport sys\nsys.path.append(tez_path)\nsys.path.append(effnet_path)","8d46eb85":"import os\nimport albumentations\nimport pandas as pd\nimport numpy as np\n\nimport tez\nfrom tez.datasets import ImageDataset\n\nimport torch\nimport torch.nn as nn\nfrom torch.nn import functional as F\n\nfrom efficientnet_pytorch import EfficientNet","d9a15879":"INPUT_PATH = \"..\/input\/ranzcr-clip-catheter-line-classification\/\"\nIMAGE_PATH = \"..\/input\/ranzcr-clip-catheter-line-classification\/test\/\"\nMODEL_PATH = \"..\/input\/ranzcr-effnet5\/\"\nIMAGE_SIZE = 512","6d77a672":"df = pd.read_csv(os.path.join(INPUT_PATH, \"sample_submission.csv\"))","4a0ce3f5":"class RanzcrModel(tez.Model):\n    def __init__(self):\n        super().__init__()\n\n        self.effnet = EfficientNet.from_name(\"efficientnet-b5\")\n\n        self.effnet._conv_stem.in_channels = 1\n        weight = self.effnet._conv_stem.weight.mean(1, keepdim=True)\n        self.effnet._conv_stem.weight = torch.nn.Parameter(weight)\n\n        self.dropout = nn.Dropout(0.1)\n        self.out = nn.Linear(2048, 11)\n\n    def forward(self, image, targets=None):\n        batch_size, _, _, _ = image.shape\n\n        x = self.effnet.extract_features(image)\n        x = F.adaptive_avg_pool2d(x, 1).reshape(batch_size, -1)\n        outputs = self.out(self.dropout(x))\n        return outputs, None, {}","0aa5a41c":"test_aug = albumentations.Compose(\n    [\n        albumentations.Resize(IMAGE_SIZE, IMAGE_SIZE, p=1.0),\n        albumentations.HorizontalFlip(p=0.5),\n        albumentations.Normalize(\n            mean=[0.485],\n            std=[0.229],\n            max_pixel_value=255.0,\n            p=1.0,\n        ),\n    ],\n    p=1.0,\n)","dacfff54":"test_image_paths = [\n    os.path.join(IMAGE_PATH, x + \".jpg\") \n    for x in df.StudyInstanceUID.values\n]","f156b0f5":"model = RanzcrModel()\nmodel.load(os.path.join(MODEL_PATH, \"effnet5_fold_0.bin\"))","9cceed3b":"final_preds = None\nfor j in range(2):\n    test_dataset = ImageDataset(\n        image_paths=test_image_paths,\n        targets=[0]*len(test_image_paths),\n        augmentations=test_aug,\n        grayscale=True,\n    )\n    preds = model.predict(test_dataset, batch_size=32, n_jobs=-1, device=\"cuda\")\n    temp_preds = None\n    for p in preds:\n        if temp_preds is None:\n            temp_preds = p\n        else:\n            temp_preds = np.vstack((temp_preds, p))\n    if final_preds is None:\n        final_preds = temp_preds\n    else:\n        final_preds += temp_preds\nfinal_preds \/= 2","2a7717bf":"target_cols = df.columns[1:]\n\nfor i in range(final_preds.shape[1]):\n    df.loc[:, target_cols[i]] = final_preds[:, i]","4a7c3986":"df.to_csv('submission.csv', index=False)\ndf.head()","b2b8d6f6":"# Tez: A simple pytorch trainer\n\nCheck it out here: https:\/\/github.com\/abhishekkrthakur\/tez\n\nTraining kernel in first comment."}}