{"cell_type":{"bd2e6ea5":"code","6f0035bc":"code","2c2239c2":"code","0bf59644":"code","0df75979":"markdown","770c053a":"markdown","f690aac9":"markdown"},"source":{"bd2e6ea5":"# Importing Libraries \n\nimport os\nimport numpy as np  \nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing import image","6f0035bc":"# Initialising the CNN\nclassifier = Sequential()\n\n# Step 1 - Convolution\nclassifier.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))\n\n# Step 2 - Pooling\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\n\n# Adding a second convolutional layer\nclassifier.add(Conv2D(32, (3, 3), activation = 'relu'))\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\n\n# Step 3 - Flattening\nclassifier.add(Flatten())\n\n# Step 4 - Full connection\nclassifier.add(Dense(units = 128, activation = 'relu'))\nclassifier.add(Dense(units = 1, activation = 'sigmoid'))\n\n# Compiling the CNN\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","2c2239c2":"#PART 2 - FITTING CNN TO IMAGES \ntrain_datagen = ImageDataGenerator(\n        rescale=1.\/255,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntraining_set = train_datagen.flow_from_directory(\n        '.\/chest_xray\/train',\n        target_size=(64, 64),\n        batch_size=32,\n        class_mode='binary')\n\ntesting_set = test_datagen.flow_from_directory(\n        '.\/chest_xray\/test',\n        target_size=(64, 64),\n        batch_size=32,\n        class_mode='binary')\n\nclassifier.fit_generator(\n        training_set,\n        steps_per_epoch=2608,\n        epochs=20,\n        validation_data=testing_set,\n        validation_steps=624)","0bf59644":"#Validation\ntest_image = image.load_img('.\/chest_xray\/val\/NORMAL\/NORMAL2-IM-1436-0001.jpeg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = classifier.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n    prediction = 'Normal'\nelse:\n    prediction = 'Infected'\nprint(prediction)","0df75979":"# Building the CNN","770c053a":"* The model achieved a **94% accuracy on testing** and **99% on training**.\n* However, more training can take the training accuracy to approx. 99% and testing accuracy to approx. 94%. \n* I couldn't give the model a lot of training time since I didn't have a good GPU and because of the fact that I wanted to run everything locally. \n* Running this on more data and a GPU or TPU (if possible) can really take the model and it performance on another level.","f690aac9":"# This notebook posseses the ability to detect Pneumonia from a lung X-Ray image \n# **My model's results can potentially even give clues if the the patient is infected by the Novel Corona Virus**\n**The dataset I used is available on kaggle.**\n\nfind the dataset here - https:\/\/www.kaggle.com\/paultimothymooney\/chest-xray-pneumonia"}}