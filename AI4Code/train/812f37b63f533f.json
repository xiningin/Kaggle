{"cell_type":{"0af5cb2e":"code","a0ef1a9e":"code","efd9632e":"code","e5f329ab":"code","a2cc6687":"code","c1182773":"code","17781d4c":"code","a3e2ccc0":"code","de8ef8af":"code","0278d994":"code","61502f3a":"code","af6dd4e7":"code","c8132289":"code","2a9a5e34":"code","e48201a3":"code","74491609":"code","d513270b":"code","02d87aa8":"code","f86d0673":"code","6aff68c3":"code","c66094cb":"code","1e7d4038":"code","bb13f505":"code","36be0e2f":"code","1ee07c9f":"code","98510218":"code","fd903388":"code","b5795f32":"code","65c40f20":"code","c002c899":"code","c80523d4":"code","ae1b55b7":"code","af415daa":"code","3d1d2b38":"code","d28ed9a9":"code","c18094e4":"code","5f5ea4b1":"code","6cf774a8":"code","088f93d6":"code","92f83217":"code","baddef9b":"code","3ec2e30f":"code","ab6bfbd3":"code","523a6634":"code","997158d4":"code","53e0ca65":"code","d80a3fb2":"code","a3b0e035":"code","bb9b3e1f":"code","bfdcd54d":"code","3f219f21":"code","6ad26719":"code","70f7d6f8":"code","d960f229":"code","844f1d5a":"code","32579bd4":"code","d88de48e":"code","5761dcdb":"markdown","162b8316":"markdown","a95ed002":"markdown","83389a0e":"markdown","63cf0afa":"markdown","6f852a13":"markdown","c9eaa075":"markdown","b4a33714":"markdown","3681bb5b":"markdown","c8a616bb":"markdown","246577b5":"markdown","f5210756":"markdown"},"source":{"0af5cb2e":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport os\nimport sklearn\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline\nfrom sklearn.model_selection import KFold\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler","a0ef1a9e":"datapath = \"..\/input\/seoul-bike-rental-ai-pro-iti\/\"\ntrain_df = pd.read_csv(os.path.join(datapath,\"train.csv\"))\ntest_df = pd.read_csv(os.path.join(datapath,\"test.csv\"))","efd9632e":"train_df.describe().T","e5f329ab":"train_df['Date']=pd.to_datetime(train_df['Date'], dayfirst=True)\n# train_df['Date'].head(50)","a2cc6687":"sns.pairplot(train_df[[\"Humidity(%)\", \"Dew point temperature(\ufffdC)\", \"Temperature(\ufffdC)\"]], diag_kind=\"kde\",height=7.5,aspect=0.8)","c1182773":"corr_martix = train_df.drop('ID',axis=1).corr()\nplt.subplots(figsize=(15,10))\nplt.title('Correlation between Features', size=18)\nsns.heatmap(corr_martix,linewidths=0.01,cmap=\"Blues\" , annot=True)\nplt.show()","17781d4c":"train_df['Temperature(\ufffdC)'].hist(bins =50 , rwidth = 0.9 ,figsize=(15,5),grid=True )\nplt.title(\"Temperature(\ufffdC)\")\nplt.show()","a3e2ccc0":"train_df['Visibility (10m)'].hist(bins =50 , rwidth = 0.9 ,figsize=(15,5),grid=True )\nplt.title(\"Visibility (10m)\")\nplt.show()","de8ef8af":"train_df['Solar Radiation (MJ\/m2)'].hist(bins =50 , rwidth = 0.9 ,figsize=(15,5),grid=True )\nplt.title(\"Solar Radiation (MJ\/m2)\")\nplt.show()","0278d994":"sns.pairplot(train_df[[\"Hour\", \"Solar Radiation (MJ\/m2)\", \"Temperature(\ufffdC)\"]], diag_kind=\"kde\",height=7.5,aspect=0.8)","61502f3a":"def from_C_to_F(temp):\n    return ((temp * (9\/5))+32)\n\ntrain_df[\"Dew(F)\"]= train_df[\"Dew point temperature(\ufffdC)\"].apply(from_C_to_F)\ntrain_df[\"temp(F)\"] = train_df[\"Temperature(\ufffdC)\"].apply(from_C_to_F)","af6dd4e7":"train_df[\"comfort\"] = train_df[\"temp(F)\"]\nfor i in range(len(train_df[\"temp(F)\"])) :\n    if train_df[\"temp(F)\"][i] >= 70 and train_df[\"Dew(F)\"][i]>= 70:\n        train_df[\"comfort\"][i] = 1#\"Uncomfort sticky\"\n    elif 65<= train_df[\"temp(F)\"][i] <= 80 and train_df[\"Dew(F)\"][i] <50:\n        train_df[\"comfort\"][i] = 5 #\"Comfort\"\n    elif train_df[\"temp(F)\"][i] > 80 :\n        train_df[\"comfort\"][i] = 3#\"Uncomfort Hot\"\n    elif train_df[\"temp(F)\"][i] <= 60 :\n        train_df[\"comfort\"][i] = 0#\"Uncomfort cold\"\n    else :\n        train_df[\"comfort\"][i] = 4 #\"normal\"","c8132289":"train_df[\"fog\"] = train_df[\"temp(F)\"]\nfor i in range(len(train_df[\"Dew(F)\"])):\n    if train_df[\"temp(F)\"][i] < 60 and 55 <= train_df[\"Dew(F)\"][i] <= train_df[\"temp(F)\"][i]:\n        train_df[\"fog\"][i]=1\n#     if train_df[\"temp(F)\"][i] < 65 and 63 <= train_df[\"Dew(F)\"][i] <= train_df[\"temp(F)\"][i]:\n#         train_df[\"fog\"][i]=1\n#     elif train_df[\"temp(F)\"][i] < 70 and 68 <= train_df[\"Dew(F)\"][i] <= train_df[\"temp(F)\"][i]:\n#         train_df[\"fog\"][i]=1\n    else:\n        train_df[\"fog\"][i]=0","2a9a5e34":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\ntrain_df['Seasons']= le.fit_transform(train_df['Seasons'])\ntrain_df['Holiday']= le.fit_transform(train_df['Holiday'])\ntrain_df['Functioning Day']= le.fit_transform(train_df['Functioning Day'])\n# train_df['comfort']= le.fit_transform(train_df['comfort'])\n##############################################################################\ntrain_df[\"month\"]=train_df.Date.dt.month\ntrain_df[\"Day\"]=train_df.Date.dt.day\ntrain_df[\"year\"]=train_df.Date.dt.year\n# train_df['month'] = train_df['Date'].dt.month_name()\ntrain_df['dayofweek'] = train_df['Date'].dt.dayofweek\n##############################################################################\n# for indx, i in enumerate(list(train_df[\"month\"])):\n#     if i == \"February\":\n#         train_df[\"month\"][indx] = 1.0\n#     elif i == \"January\" :\n#         train_df[\"month\"][indx] = 2.0\n#     elif i == \"December\" :\n#         train_df[\"month\"][indx] = 3.0\n#     elif i == \"March\" :\n#         train_df[\"month\"][indx] = 4.0\n#     elif i == \"September\" :\n#         train_df[\"month\"][indx] = 5.0\n#     elif i == \"November\" :\n#         train_df[\"month\"][indx] = 6.0\n#     elif i == \"April\" :\n#         train_df[\"month\"][indx] = 7.0\n#     elif i == \"May\" :\n#         train_df[\"month\"][indx] = 8.0\n#     elif i == \"October\" :\n#         train_df[\"month\"][indx] = 9.0\n#     elif i == \"August\" :\n#         train_df[\"month\"][indx] = 10.0\n#     elif i == \"June\" :\n#         train_df[\"month\"][indx] = 11.0\n#     elif i == \"July\" :\n#         train_df[\"month\"][indx] = 12.0\n# train_df[\"month\"] = pd.to_numeric(train_df[\"month\"])\n#########################################################################\n","e48201a3":"def wind_chill(T,V):\n    wc = 13.12 + 0.6215*T - 11.37*(V**0.16) + 0.3965*T*(V**0.16)\n    return wc\ntrain_df['Wind speed (km\/h)'] = train_df['Wind speed (m\/s)']\/3.6\ntrain_df[\"wind chill\"] = train_df[[\"Temperature(\ufffdC)\",'Wind speed (km\/h)']].apply(lambda x: wind_chill(x[\"Temperature(\ufffdC)\"], x[\"Wind speed (km\/h)\"]), axis = 1)","74491609":"# train_df[[\"wind chill\",\"Temperature(\ufffdC)\",'Wind speed (km\/h)']]","d513270b":"x_test = test_df.drop(columns=['ID'])\nx_test","02d87aa8":"x_test[\"Dew(F)\"]= x_test[\"Dew point temperature(\ufffdC)\"].apply(from_C_to_F)\nx_test[\"temp(F)\"] = x_test[\"Temperature(\ufffdC)\"].apply(from_C_to_F)\n##############################################################################\nx_test[\"comfort\"] = x_test[\"temp(F)\"]\nfor i in range(len(x_test[\"temp(F)\"])) :\n    if x_test[\"temp(F)\"][i] >= 70 and x_test[\"Dew(F)\"][i]>= 70:\n        x_test[\"comfort\"][i] = 1#\"Uncomfort sticky\"\n    elif 65<= x_test[\"temp(F)\"][i] <= 80 and x_test[\"Dew(F)\"][i] <50:\n        x_test[\"comfort\"][i] = 5#\"Comfort\"\n    elif x_test[\"temp(F)\"][i] > 80 :\n        x_test[\"comfort\"][i] = 3#\"Uncomfort Hot\"\n    elif x_test[\"temp(F)\"][i] <= 60 :\n        x_test[\"comfort\"][i] = 0#\"Uncomfort cold\"\n    else :\n        x_test[\"comfort\"][i] = 4#\"normal\"\n##############################################################################       \nx_test[\"fog\"] = x_test[\"temp(F)\"]\nfor i in range(len(x_test[\"Dew(F)\"])):\n    if x_test[\"temp(F)\"][i] < 60 and 50 <= x_test[\"Dew(F)\"][i] <= x_test[\"temp(F)\"][i]:\n        x_test[\"fog\"][i]=1\n    else:\n        x_test[\"fog\"][i]=0\n##############################################################################        \nx_test['Seasons']= le.fit_transform(x_test['Seasons'])\nx_test['Holiday']= le.fit_transform(x_test['Holiday'])\nx_test['Functioning Day']= le.fit_transform(x_test['Functioning Day'])\n# x_test['comfort']= le.fit_transform(x_test['comfort'])\n##############################################################################\nx_test['Date']=pd.to_datetime(x_test['Date'], dayfirst=True)\nx_test[\"month\"]=x_test.Date.dt.month\n# x_test['month'] = x_test['Date'].dt.month_name()\nx_test[\"Day\"]=x_test.Date.dt.day\nx_test[\"year\"]=x_test.Date.dt.year\nx_test['dayofweek'] = x_test['Date'].dt.dayofweek\n##############################################################################\n# for indx, i in enumerate(list(x_test[\"month\"])):\n#     if i == \"February\":\n#         x_test[\"month\"][indx] = 1.0\n#     elif i == \"January\" :\n#         x_test[\"month\"][indx] = 2.0\n#     elif i == \"December\" :\n#         x_test[\"month\"][indx] = 3.0\n#     elif i == \"March\" :\n#         x_test[\"month\"][indx] = 4.0\n#     elif i == \"September\" :\n#         x_test[\"month\"][indx] = 5.0\n#     elif i == \"November\" :\n#         x_test[\"month\"][indx] = 6.0\n#     elif i == \"April\" :\n#         x_test[\"month\"][indx] = 7.0\n#     elif i == \"May\" :\n#         x_test[\"month\"][indx] = 8.0\n#     elif i == \"October\" :\n#         x_test[\"month\"][indx] = 9.0\n#     elif i == \"August\" :\n#         x_test[\"month\"][indx] = 10.0\n#     elif i == \"June\" :\n#         x_test[\"month\"][indx] = 11.0\n#     elif i == \"July\" :\n#         x_test[\"month\"][indx] = 12.0\n# x_test[\"month\"] = pd.to_numeric(x_test[\"month\"])\n##############################################################################\nx_test['Wind speed (km\/h)'] = x_test['Wind speed (m\/s)']\/3.6\nx_test[\"wind chill\"] = x_test[[\"Temperature(\ufffdC)\",'Wind speed (km\/h)']].apply(lambda x: wind_chill(x[\"Temperature(\ufffdC)\"], x[\"Wind speed (km\/h)\"]), axis = 1)\n##############################################################################\n\n\n# x_test[\"temp\"] = x_test[\"Temperature(\ufffdC)\"]\n# x_test[\"dew\"] = x_test[\"Dew point temperature(\ufffdC)\"]\n# x_test = x_test.drop([\"Date\",\"Dew(F)\",\"fog\",\"comfort\",\"temp(F)\",'Temperature(\ufffdC)','Dew point temperature(\ufffdC)'], axis = 1)","f86d0673":"display(train_df.describe().T)\ndisplay(x_test.describe().T)","6aff68c3":"display(train_df.groupby([\"Date\",\"year\",\"month\",\"Day\"]).mean().head(50))\ndisplay(x_test.groupby([\"month\",\"Day\"]).count())","c66094cb":"# corr_martix = train_df.drop('ID',axis=1).corr()\n# plt.subplots(figsize=(15,10))\n# plt.title('Correlation between Features', size=18)\n# sns.heatmap(corr_martix,linewidths=0.01,cmap=\"Blues\" , annot=True)\n# plt.show()","1e7d4038":"# nwe model mixed data \ntrain_df[\"data_type\"] = \"train\"\nx_test[\"data_type\"] = \"test\"\n\ntrain_new_model = train_df\ntest_new_model = x_test\n\n# train_new_model = train_df[[\"Hour\",\"Day\",\"month\",\"year\",\"Date\",'Temperature(\ufffdC)','Dew point temperature(\ufffdC)',\"Wind speed (m\/s)\",\"Solar Radiation (MJ\/m2)\",\"Humidity(%)\",\"data_type\"]]\n# test_new_model = x_test[[\"Hour\",\"Day\",\"month\",\"year\",\"Date\",'Temperature(\ufffdC)','Dew point temperature(\ufffdC)',\"Wind speed (m\/s)\",\"Solar Radiation (MJ\/m2)\",\"Humidity(%)\",\"data_type\"]]\ndf_new_model = pd.concat([train_new_model, test_new_model], ignore_index=True)","bb13f505":"df_new_model.describe()","36be0e2f":"df_new_model = df_new_model.sort_values(by=['Date',\"Hour\"],ignore_index=True)","1ee07c9f":"df_new_model[\"11 days later\"] = df_new_model[\"Day\"] +11","98510218":"temp_median=pd.DataFrame(df_new_model.groupby(\"Date\").median()['Temperature(\ufffdC)'])","fd903388":"temp_median['Date'] = temp_median.index\n# temp_median.head(50)","b5795f32":"import datetime \nd = datetime.timedelta(days = 11)","65c40f20":"for i in temp_median[\"Date\"]:\n#     print (i+d)\n#     date2 = (i+d)\n#     print(date2)\n    stoping = datetime.date(2018, 12,1)\n    if (i+d) < stoping:\n        temp_median.loc[i,\"new date temp\"] = temp_median.loc[i+d,\"Temperature(\ufffdC)\"]\n    else :\n        pass\n# # temp_median.tail(50)","c002c899":"df_new_model = df_new_model.join(temp_median[[\"Date\",\"new date temp\"]].set_index('Date'), on='Date')","c80523d4":"df_new_model_test_index = df_new_model[ df_new_model['data_type'] == 'test' ].index\ndf_new_model_test = df_new_model[ df_new_model['data_type'] == 'test' ]\n# drop these row indexes\n# from dataFrame\ndf_new_model.drop(df_new_model_test_index, inplace = True)","ae1b55b7":"display(df_new_model.info())\ndisplay(df_new_model_test.info())","af415daa":"#  = pd.merge(train_df,df_new_model[[\"Date\",\"new date temp\"]],on=[\"Date\"],how = \"inner\")\n# x_test = pd.merge(x_test,df_new_model_test[[\"Date\",\"new date temp\"]],on=[\"Date\"],how = \"inner\")\n\n# train_df = df_new_model\n# x_test = df_new_model_test\n# train_df.merge(df_new_model[[\"Date\",\"new date temp\"]],how='left')\n# x_test.merge(df_new_model_test[[\"Date\",\"new date temp\"]],how='left')\n\ntrain_df = train_df.join(df_new_model[[\"Date\",\"new date temp\"]].set_index('Date'),how='left', on='Date')\nx_test = x_test.join(df_new_model_test[[\"Date\",\"new date temp\"]].set_index('Date'),how='left', on='Date')","3d1d2b38":"x_test=x_test.drop_duplicates(subset=['Date','Hour'])\ntrain_df=train_df.drop_duplicates(subset=['Date','Hour'])","d28ed9a9":"train_df = train_df.drop([\"Date\",'Temperature(\ufffdC)','Dew point temperature(\ufffdC)',\"Wind speed (m\/s)\",\"Dew(F)\",'Wind speed (km\/h)',\"temp(F)\",\"data_type\"], axis = 1)","c18094e4":"x_test = x_test.drop([\"Date\",'Temperature(\ufffdC)','Dew point temperature(\ufffdC)',\"Wind speed (m\/s)\",\"Dew(F)\",'Wind speed (km\/h)',\"temp(F)\",\"data_type\"], axis = 1)","5f5ea4b1":"display(train_df.head(1))\ndisplay(x_test.head(1))","6cf774a8":"weather_df = train_df[[\"Seasons\",\"comfort\",\"fog\",\"Holiday\"]]\ndate_df =train_df [[\"month\",'Hour',\"dayofweek\"]]","088f93d6":"j = 0\nplt.figure(figsize=(25, 25))\nfor i in weather_df: \n    j=j+1\n    plt.subplot(3, 2, j+1)\n    sns.barplot(weather_df[i],train_df[\"y\"])\n    plt.show","92f83217":"j = 0\nplt.figure(figsize=(25, 10))\nfor i in date_df: \n    j=j+1\n    plt.subplot(2, 4, j+1)\n    sns.barplot(date_df[i],train_df[\"y\"])\n    plt.show","baddef9b":"pd.DataFrame(train_df.groupby(\"month\").y.sum()).sort_values(by=\"y\")","3ec2e30f":"x= train_df.drop(columns=['ID', 'y'])\ny = train_df['y']\n \nx[\"new date temp\"].fillna(value= x[\"new date temp\"].mean(), inplace=True)\n# df.fillna(df.mean())\nx_test[\"new date temp\"].fillna(value= x_test[\"new date temp\"].mean(), inplace=True)","ab6bfbd3":"from sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val = train_test_split(x , y , test_size = 0.05, random_state = 29)","523a6634":"from math import sqrt\ndef RMSLE(y_pred , y_actual):\n    n = y_pred.size \n    RMSLE = sqrt(((np.log(y_pred+1)-np.log(y_actual+1))**2).sum()\/n)\n    return RMSLE","997158d4":"from sklearn.metrics import make_scorer\nrmsle = make_scorer(RMSLE, greater_is_better=False)","53e0ca65":"from sklearn.ensemble import RandomForestRegressor\n\n\nRegressor = RandomForestRegressor(n_estimators=12, max_depth=32,random_state=100)\n\n\nRegressor = Regressor.fit(x_train, np.log1p(y_train))\ny_pred_RF = np.exp(Regressor.predict(x_val))-1\ny_1 =np.exp( Regressor.predict(x_train))-1\n\n\nR = RMSLE(y_pred_RF , y_val)\nR1 = RMSLE(y_1 , y_train)\nprint(\"RMSLE of RF :\",R)\nprint(\"RMSLE of what model learn :\",R1)","d80a3fb2":"from sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingRegressor","a3b0e035":"# from sklearn.experimental import enable_hist_gradient_boosting\n# from sklearn.ensemble import HistGradientBoostingRegressor\n\n# hist = HistGradientBoostingRegressor(max_bins=55, max_depth=5,max_iter=24,max_leaf_nodes=17)\n# params = {\"learning_rate\": uniform(0.01, 0.9)\n# }\n\n# search = RandomizedSearchCV(hist, param_distributions=params,\n#                             random_state=42, n_iter=200, cv=5, verbose=1,\n#                             n_jobs=1, return_train_score=True,scoring = rmsle)\n\n# search.fit(x_train, np.log1p(y_train))\n","bb9b3e1f":"# def report_best_scores(results, n_top=3):\n#     for i in range(1, n_top + 1):\n#         candidates = np.flatnonzero(results['rank_test_score'] == i)\n#         for candidate in candidates:\n#             print(\"Model with rank: {0}\".format(i))\n#             print(\"Mean validation score: {0:.3f} (std: {1:.3f})\".format(\n#                   results['mean_test_score'][candidate],\n#                   results['std_test_score'][candidate]))\n#             print(\"Parameters: {0}\".format(results['params'][candidate]))\n#             print(\"\")\n\n# from sklearn.metrics import auc, accuracy_score, confusion_matrix, mean_squared_error\n\n# report_best_scores(search.cv_results_, 1)","bfdcd54d":"x_train, x_val, y_train, y_val = train_test_split(x , y , test_size = 0.05, random_state = 270)\n\nhgb = HistGradientBoostingRegressor(scoring=rmsle,early_stopping=True ,max_bins=164,learning_rate=0.3372666421413646,\n                                    max_depth=5,max_iter=24,max_leaf_nodes=20,random_state=253)","3f219f21":"hgb = hgb.fit(x_train, np.log1p(y_train))\n\ny_pred_RF = np.exp(hgb.predict(x_val))-1\ny_1 = np.exp(hgb.predict(x_train))-1\n\n\nR = RMSLE(y_pred_RF , y_val)\nR1 = RMSLE(y_1 , y_train)\nprint(\" RMSLE of HGB  :\",R)\nprint(\"RMSLE of what model learn :\",R1)","6ad26719":"import lightgbm as lgbm","70f7d6f8":"x_train, x_val, y_train, y_val = train_test_split(x , y , test_size = 0.05, random_state = 138)\nreg = lgbm.sklearn.LGBMRegressor(num_leaves=17,learning_rate =0.2179, max_depth=9,n_estimators= 44,subsample_for_bin=5472)\n\nreg = reg.fit(x_train, np.log1p(y_train))\n\npred=np.expm1(reg.predict(x_val))\nR = RMSLE(pred,y_val)\nprint(\"RMSLE of HGB kaggle on y_val:\",R)\npred2=np.expm1(reg.predict(x_train))\nR2 = RMSLE(pred2,y_train)\nprint(\"RMSLE of HGB on y_train:\",R2)","d960f229":"y_test_predicted = np.exp(reg.predict(x_test))-1","844f1d5a":"test = pd.read_csv(\"\/kaggle\/input\/seoul-bike-rental-ai-pro-iti\/test.csv\")\n\nsubmission = pd.DataFrame({\n        \"ID\": test[\"ID\"],\n        \"y\": y_test_predicted\n    })","32579bd4":"submission.to_csv(\"submission.csv\", index = False)","d88de48e":"submission","5761dcdb":"# 2- HGBR","162b8316":"# take another look","a95ed002":"# spliting","83389a0e":"# visualization","63cf0afa":"# Submission","6f852a13":"# pre processing for testing","c9eaa075":"# preprocessing for train","b4a33714":"# 3- LGBM","3681bb5b":"# 1- RFG","c8a616bb":"# Working on data","246577b5":"# Models pre","f5210756":"# Dropping from train and test data"}}