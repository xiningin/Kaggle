{"cell_type":{"f3515325":"code","423ba095":"code","e8c462c5":"code","edf3d275":"code","89f74e8f":"code","c5dc9ed8":"code","1d7b428d":"code","63c9fa2f":"code","6f996b54":"code","df23d123":"code","ada350c7":"code","a29f21aa":"code","00123692":"code","55d42fcd":"code","6b9aeb2f":"code","61d8e058":"code","88c4df46":"code","657726f6":"code","e1bce9fc":"code","98949aaf":"code","405fb3b7":"code","80886cf6":"code","2fa46da3":"code","bc78b40a":"markdown","45a6242a":"markdown","dcef34ec":"markdown","80f3d5b3":"markdown","489e7ea6":"markdown","f5897b10":"markdown"},"source":{"f3515325":"import bq_helper\nfrom bq_helper import BigQueryHelper\nimport fuzzywuzzy\npatents = bq_helper.BigQueryHelper(active_project=\"patents-public-data\",\n                                   dataset_name=\"patents\")","423ba095":"# View table names under the patents data table\nbq_assistant = BigQueryHelper(\"patents-public-data\", \"patents\")\nbq_assistant.list_tables()","e8c462c5":"# View the first three rows of the publications data table\nbq_assistant.head(\"publications\", num_rows=3)","edf3d275":"# View information on all columns in the publications data table\nbq_assistant.table_schema(\"publications\")","89f74e8f":"import os\ncwd = os.getcwd()\n\nos.listdir(cwd)\n","c5dc9ed8":"#importing company names for future use\nimport pandas as pd\ncompany_df = pd.read_csv('..\/input\/Accounts_company_name.csv')\n\nreplace_list = ['Limited', 'Ltd', 'Inc', 'Corp', 'Corporation', 'Sas', 'Ug', 'Pty', 'Llc', 'Ptv', 'Org', 'Gmbh','LLC','Company']\n\ncompany_df['cleaned_name'] =company_df['Company Name'].str.replace(r'\\b|\\b'.join(replace_list),'',case=False)\\\n.str.replace(',','').str.strip()\n","1d7b428d":"# the companies are accessible here\ncompany_df.sample(5)","63c9fa2f":"# accepting dates; dates in the database are integers\n\nimport datetime\nprint('Enter the earliest date in YYYY-MM-DD format')\n# date_entry = input()\ndate_entry = '2011-01-01'\ndate1 = date_entry.replace('-','')\n\nprint('Enter the latest date in YYYY-MM-DD format')\n# date_entry = input()\ndate_entry = '2018-06-01'\ndate2 = date_entry.replace('-','')\n\n\n# accepting keywords; to be compared to the text nested in the descripton array\n# print('Enter a keyword you want to use:')\n# keyword = input()\n# keywords = ['retail', 'business to customer', 'software', 'e-commerce', 'database', 'computing', 'cloud']\nkeywords = ['gaming']\n# can add country code or other filters later","6f996b54":"print(date1)\nprint(date2)\nprint(keywords)\n","df23d123":"from fuzzywuzzy import fuzz\nfrom fuzzywuzzy import process\n\ndef highest_similarity_finder(word, company_name):\n    similarity = fuzz.token_set_ratio(word, company_name)\n    return similarity\n\n\nquery_list = []\n### query for finding top assignees\/companies in a given time period with a keyword\nfor keyword in keywords:\n    query1 = \"\"\"\n    WITH A AS \n        (WITH temp1 AS (\n            SELECT\n              DISTINCT\n              PUB.country_code,\n              PUB.application_number AS patent_number,\n              assignee_name,\n              PUB.publication_date\n\n            FROM\n              `patents-public-data.patents.publications` PUB,\n              UNNEST(PUB.title_localized) AS title\n            CROSS JOIN\n              UNNEST(PUB.assignee) AS assignee_name\n            WHERE\n              PUB.country_code IS NOT NULL\n              AND PUB.application_number IS NOT NULL\n              AND PUB.inventor IS NOT NULL\n              AND PUB.publication_date >= {}\n              AND PUB.publication_date <= {}\n              AND title.text LIKE '%{}%' \n        )\n        SELECT\n          *\n        FROM (\n            SELECT\n             temp1.country_code AS country,\n             temp1.assignee_name AS assignee_name,\n             COUNT(temp1.patent_number) AS count_of_patents,\n             MAX(temp1.publication_date) AS max_pub_date\n            FROM temp1\n            GROUP BY\n             temp1.country_code,\n             temp1.assignee_name\n             )\n        WHERE\n         count_of_patents > 10 # Can be adjusted\n        )\n    SELECT\n      A.assignee_name,\n      A.count_of_patents,\n      A.max_pub_date,\n      A.country\n    FROM\n        A\n    ORDER BY assignee_name\n    ;\n    \"\"\".format(date1,date2,keyword)\n\n    print('Amount of memory estimated to be used in query:',bq_assistant.estimate_query_size(query1) )\n    query_results = patents.query_to_pandas_safe(query1, max_gb_scanned=16)\n    query_results.columns = ['Company_Name', 'Total_Patents', 'Last_Patent_Date', 'Country']\n    print(\"Number of records from {} to {} for keyword '{}':\".format(date1,date2, keyword), len(query_results.index))\n    query_results.head(10)\n\n    ###\n    ### \n    query2 = \"\"\"\n    WITH B AS\n    (SELECT DISTINCT\n      assignee_name,\n      PUB.publication_date as publication_date,\n      title.text as title_text,\n      PUB.country_code as country\n    FROM\n      `patents-public-data.patents.publications` PUB,\n      UNNEST(PUB.title_localized) AS title\n    CROSS JOIN\n      UNNEST(PUB.assignee) AS assignee_name\n    WHERE\n      PUB.country_code IS NOT NULL\n      AND PUB.application_number IS NOT NULL\n      AND PUB.inventor IS NOT NULL\n      AND PUB.publication_date >= {}\n      AND PUB.publication_date <= {}\n      AND title.text LIKE '%{}%' \n      )\n    SELECT\n      b.assignee_name,\n      b.publication_date,\n      b.title_text,\n      b.country\n    FROM\n        B\n    ;\n    \"\"\".format(date1,date2,keyword)\n\n    print('Amount of memory estimated to be used in query:',bq_assistant.estimate_query_size(query2) )\n    query_results_2 = patents.query_to_pandas_safe(query2, max_gb_scanned=50)\n    print(\"Number of records from {} to {} for keyword '{}':\".format(date1,date2, keyword), len(query_results_2.index))\n    query_results_2.head(10)\n    print('---')\n    new_df = query_results_2.loc[query_results_2.groupby('assignee_name')['publication_date'].idxmax()].sort_values(by='assignee_name')\n    new_df.columns = ['Company_Name','Last_Patent_Date','Last_Patent_Name','Country']\n    final_df = pd.merge(query_results,new_df, on = ['Company_Name','Last_Patent_Date','Country'])\n    final_df = final_df[['Company_Name','Country','Total_Patents','Last_Patent_Date','Last_Patent_Name']]\n    for index,row in final_df.iterrows():\n        print(row['Company_Name'])\n        company_df['similarity_score'] = company_df.apply(lambda s: highest_similarity_finder(s['Company Name'],row['Company_Name']), axis=1)\n    #     print(company_df.sort_values(by=['similarity_score'],ascending=False).head())\n        similar_list = company_df.sort_values(by=['similarity_score'],ascending=False).nlargest(5,columns=['similarity_score'])[['Company Name','similarity_score']].values.tolist()\n        print(similar_list)\n        i=1\n        for company in similar_list:\n            final_df.loc[index,'company_{}'.format(i)] = company[0]\n            final_df.loc[index,'company_{}_similarity_score'.format(i)] = company[1]\n            i+=1\n    #     print('Most Similar Company Name:',company_df.loc[company_df['similarity_score'].idxmax(),'Company Name'])\n        print('\/\/\/')\n    print(final_df.head())\n    final_df.to_csv('{}_query_v1.csv'.format(keyword),encoding='utf-8-sig')","ada350c7":"final_df","a29f21aa":"# new_df = query_results_2.loc[query_results_2.groupby('assignee_name')['publication_date'].idxmax()].sort_values(by='assignee_name')\n# new_df.columns = ['Company_Name','Last_Patent_Date','Last_Patent_Name','Country']","00123692":"# new_df.head()","55d42fcd":"# query_results.head()","6b9aeb2f":"# #merging of dataframes\n# # company, country, count, date, name\n# final_df = pd.merge(query_results,new_df, on = ['Company_Name','Last_Patent_Date','Country'])\n# final_df = final_df[['Company_Name','Country','Total_Patents','Last_Patent_Date','Last_Patent_Name']]","61d8e058":"# final_df","88c4df46":"# from fuzzywuzzy import fuzz\n# from fuzzywuzzy import process\n\n# def highest_similarity_finder(word, company_name):\n#     similarity = fuzz.token_set_ratio(word, company_name)\n#     return similarity\n\n# for index,row in final_df.iterrows():\n#     print(row['Company_Name'])\n#     company_df['similarity_score'] = company_df.apply(lambda s: highest_similarity_finder(s['Company Name'],row['Company_Name']), axis=1)\n# #     print(company_df.sort_values(by=['similarity_score'],ascending=False).head())\n#     similar_list = company_df.sort_values(by=['similarity_score'],ascending=False).nlargest(5,columns=['similarity_score'])[['Company Name','similarity_score']].values.tolist()\n#     print(similar_list)\n#     i=1\n#     for company in similar_list:\n#         final_df.loc[index,'company_{}'.format(i)] = company[0]\n#         final_df.loc[index,'company_{}_similarity_score'.format(i)] = company[1]\n#         i+=1\n# #     print('Most Similar Company Name:',company_df.loc[company_df['similarity_score'].idxmax(),'Company Name'])\n#     print('\/\/\/')","657726f6":"# final_df_retail.head()","e1bce9fc":"# final_df_software.head()","98949aaf":"# final_df_e_commerce.head()","405fb3b7":"# final_df_computing.head()","80886cf6":"# final_df_retail = final_df\n# final_df_software = final_df\n# final_df_e_commerce = final_df\n# final_df_computing = final_df\n# final_df_cloud = final_df","2fa46da3":"# final_df.to_csv('cloud_query_v1.csv',encoding='utf-8-sig')","bc78b40a":"# Extra code Appendix\n","45a6242a":"**Data dictionary** - This describes each of the column names\n* publication_number: Patent publication number (DOCDB compatible), eg: 'US-7650331-B1'\n* application_number: Patent application number (DOCDB compatible), eg: 'US-87124404-A'. This may not always be set.\n* country_code: Country code, eg: 'US', 'EP', etc\n* kind_code: Kind code, indicating application, grant, search report, correction, etc. These are different for each country.\n* application_kind: High-level kind of the application: A=patent; U=utility; P=provision; W= PCT; F=design; T=translation.\n* application_number_formatted: Application number, formatted to the patent office format where possible.\n* pct_number: PCT number for this application if it was part of a PCT filing, eg: 'PCT\/EP2008\/062623'.\n* family_id: Family ID (simple family). Grouping on family ID will return all publications associated with a simple patent family (all publications share the same priority claims).\n* title_localized: The publication titles in different languages\n* abstract_localized: The publication abstracts in different languages\n* claims_localized: For US publications only, the claims\n* description_localized: For US publications only, the description, limited to the first 9 megabytes\n* publication_date: The publication date.\n* filing_date: The filing date.\n* grant_date: The grant date, or 0 if not granted.\n* priority_date: The earliest priority date from the priority claims, or the filing date.\n* priority_claim: The application numbers of the priority claims of this publication.\n* inventor: The inventors.\n* inventor_harmonized: The harmonized inventors and their countries.\n* assignee: The assignees\/applicants.\n* assignee_harmonized: The harmonized assignees and their countries.\n* 'examiner: The examiner of this publication and their countries.\n* uspc: The US Patent Classification (USPC) codes.\n* ipc: The International Patent Classification (IPC) codes.\n* cpc: The Cooperative Patent Classification (CPC) codes.\n* fi: The FI classification codes.\n* fterm: The F-term classification codes.\n* citation: The citations of this publication. Category is one of {CH2 = Chapter 2; SUP = Supplementary search report ; ISR = International search report ; SEA = Search report; APP = Applicant; EXA = Examiner; OPP = Opposition; 115 = article 115; PRS = Pre-grant pre-search; APL = Appealed; FOP = Filed opposition}, Type is one of {A = technological background; D = document cited in application; E = earlier patent document; 1 = document cited for other reasons; O = Non-written disclosure; P = Intermediate document; T = theory or principle; X = relevant if taken alone; Y = relevant if combined with other documents}\n* entity_status: The USPTO entity status (large, small).\nart_unit: The USPTO art unit performing the examination (2159, etc). # Patent application per country","dcef34ec":"# Actual Querying\nInputs are currently\n* Earliest Date\n* Latest Date (for publication date)\n* A keyword","80f3d5b3":"# Company Information\n","489e7ea6":"# MMG Querying Google Patents \n","f5897b10":"**The keyword is looked for in the title**\n\nUsing the description results in queries that are too large."}}