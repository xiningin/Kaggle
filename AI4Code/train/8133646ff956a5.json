{"cell_type":{"ba6a08dc":"code","db6160e6":"code","c8edfcca":"code","92302a72":"code","b1209f58":"code","33737ca1":"code","146bffd9":"code","90863fc7":"code","c1d1bc64":"code","fd60c73c":"code","72eddf3c":"code","1d620abf":"code","6ea37908":"code","0bc88bef":"code","e563ce1c":"code","4298cc5a":"code","e5bd7836":"code","ce0b77f2":"code","4ad9c1b2":"code","7345814b":"code","d533be14":"markdown","69309b3d":"markdown","98d381fa":"markdown","1176c22a":"markdown","51a0449f":"markdown","1350858c":"markdown","39ee97f9":"markdown","24d2b315":"markdown"},"source":{"ba6a08dc":"from IPython.display import Image\nImage(\"..\/input\/spotify-icon\/Spotify_Icon.png\")","db6160e6":"import numpy as np\nimport pandas as pd\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport re\n%matplotlib inline","c8edfcca":"def get_column_null_count(data_frame):\n    \"\"\"\n    Function prints all column names and count of null values in it\n    :param data_frame: a pandas DataFrame\n    :return: null\n    \"\"\"\n    for i in data_frame.columns:\n        print(\"{} : {}\".format(i, len(data_frame[pd.isnull(data_frame[i])])))\n\n\ndef update_column_names(data_frame):\n    \"\"\"\n    Function updates all the column names to lowercase \n    and spaces with underscore\n    :param data_frame: a pandas DataFrame\n    :return: null\n    \"\"\"\n    new_col = []\n    for name in data_frame.columns:\n        new_col.append(name.lower().replace(' ', '_'))\n    data_frame.columns = new_col\n\n\ndef get_data_info(data_frame):\n    \"\"\"\n    Function to print description of a Data Frame\n    It prints Shape, Index, Size, Column Names and column wise null count \n    :param data_frame: a pandas DataFrame\n    :return: null\n    \"\"\"\n    print(\"Shape : {}\".format(data_frame.shape))\n    print(\"Index : {}\".format(data_frame.index))\n    print(\"Size : {}\".format(data_frame.size))\n    print(\"Column Names : {}\".format(data_frame.columns))\n\n\ndef get_data(data_frame, head=3, tail=3, mid=6):\n    \"\"\"\n    Function to get a particular number of rows from a DataFrame\n    :param data_frame: a pandas DataFrame\n    :param head: count of rows from top\n    :param tail: count of rows from bottom\n    :param mid: count of rows from middle\n    :return: a pandas DataFrame\n    \"\"\"\n    df_head = data_frame.head(head)\n    df_tail = data_frame.tail(tail)\n    df_mid = data_frame.iloc[np.random.randint(3000, 7000, size=mid)]\n    df = df_head.append(df_mid).append(df_tail)\n    return df\n\n\ndef display(series):\n    \"\"\"\n    Function to print a series in a table\/frame format\n    :param series: a series\n    :return: series in a table format\n    \"\"\"\n    return series.to_frame()","92302a72":"data = pd.read_csv('\/kaggle\/input\/spotify-top-100-2019\/spotify_top_100_2019.csv')\ndata","b1209f58":"update_column_names(data)\ndata","33737ca1":"data.head(10)","146bffd9":"get_data_info(data)","90863fc7":"data.describe()","c1d1bc64":"# Checking the song with Max energy. \ndata[data.energy == np.max(data.energy)]","fd60c73c":"# Checking the song with Max Danceability. \ndata[data.danceability == np.max(data.danceability)]","72eddf3c":"# Checking the song with Max Loudness. \ndata[data['loudness'] == np.max(data['loudness'])]","1d620abf":"# Checking the song with Max Danceability. \ndata[data['liveness'] == np.max(data['liveness'])]","6ea37908":"# Checking the song with Max Danceability. \ndata[data['duration_s'] == np.max(data['duration_s'])]","0bc88bef":"# Checking the song with Max Danceability. \ndata[data['popularity_'] == np.max(data['popularity_'])]","e563ce1c":"# Checking Histogram of artist name. \nplt.figure(figsize=(20,10))\nsns.countplot(data['artist'])\nplt.show()","4298cc5a":"genre = data.top_genre.value_counts()\ndisplay(genre)","e5bd7836":"genre.plot(kind='barh',title='Bar Plot for the number of genres',rot=0)\nplt.show()","ce0b77f2":"# Let's check the correlation coefficients to see which variables are highly correlated\n\nplt.figure(figsize = (20, 10))\nsns.heatmap(data.corr(), annot = True, cmap=\"YlGnBu\")\nplt.show()","4ad9c1b2":"# Check the distribution of target variable. \nplt.figure(figsize=(20,10))\nsns.distplot(data.popularity_)\nplt.show()","7345814b":"x = \"danceability\"\ny = \"valence\"\n\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=False, sharex=False, figsize=(10, 5))\nfig.suptitle(\"Histograms\")\nh = ax2.hist2d(data[x], data[y], bins=20)\nax1.hist(data[\"energy\"])\n\nax2.set_xlabel(x)\nax2.set_ylabel(y)\n\nax1.set_xlabel(\"energy\")\n\nplt.colorbar(h[3], ax=ax2)\n\nplt.show()","d533be14":"# Analysis Based On Genre","69309b3d":"# Importing Data & Understanding It","98d381fa":"# Thank you!","1176c22a":"# Analysis Based On Artists","51a0449f":"# **Spotify Top 100 Songs**\n\n# **Purpose:**\n\nThe purpose of this notebook is to analyze the dataset in place for top 100 Songs in Spotify. Per the initial data analysis, we may think of using appropriate machine learning algorithms to see patterns in the data if any.\n\nOverall looking at the description of the data, it seems to be both a supervised as well as unsupervised learning problem, but we'll starting finding useful information first out of our data, post which we will focus on model building and its improvement.\n\nThe idea is to overall explore the data and find as much information as possible.","1350858c":"# **Importing Libraries**","39ee97f9":"# User Defined Functions","24d2b315":"The plot on the left illustrates the distribution of songs based on their energy levels, whereas the one on the right is a \"heatmap\" (histogram in two dimensions) that illustrates the number of songs found at all values of valence and danceability."}}