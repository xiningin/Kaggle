{"cell_type":{"41ef4b98":"code","a04b8120":"code","5174597d":"code","64f84615":"code","f833ac8b":"code","95b8b081":"code","dfb0811a":"code","904f069d":"code","b50dd919":"code","ffb0b1fd":"code","d66c5e18":"code","9d03fafe":"code","106aa9f5":"code","293f3445":"code","522d11d8":"code","f2db9237":"code","d5ac1dbb":"code","ca7a35e2":"code","44d25ca6":"code","f0002786":"code","f2ad8bac":"code","af4e5b31":"code","b478358a":"code","1ebb9fb2":"code","41bad662":"code","71628dd6":"code","9555f7b2":"code","b0425411":"markdown","ee4883a7":"markdown","0f77532a":"markdown","512379f8":"markdown","c095908c":"markdown","ec15ad6b":"markdown","d8791739":"markdown","a0e395d5":"markdown"},"source":{"41ef4b98":"# basic Libraries\nimport numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# visulations libraries\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\n\n# Data pre-processing libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n# Modelling Libraries\nfrom sklearn.ensemble import RandomForestRegressor\n\n# evalution & CV libraries\nfrom sklearn import metrics\nfrom sklearn.model_selection import RandomizedSearchCV","a04b8120":"df = pd.read_csv('\/kaggle\/input\/medical-insurance-premium-prediction\/Medicalpremium.csv')\ndf.head()","5174597d":"df.info()","64f84615":"# Premium Price\nplt.figure(figsize=(10, 6))\nplt.xticks(rotation=70)\nsns.countplot(x='PremiumPrice', data=df)","f833ac8b":"# age\nplt.figure(figsize=(10, 6))\nsns.histplot(x='Age', data=df, bins=20, kde=True, color='green')","95b8b081":"# Height\nplt.figure(figsize=(10, 6))\nsns.histplot(x='Height', data=df, bins=20, kde=True, color='red')","dfb0811a":"# weight\nplt.figure(figsize=(10, 6))\nsns.histplot(x='Weight', data=df, bins=20, kde=True, color='purple')","904f069d":"# plot countplot of categorical feature.\nfig, axes = plt.subplots(2, 3, figsize=(18, 10))\nfig.suptitle('categorical feature')\n\nsns.countplot(x='Diabetes', data=df, ax=axes[0,0], palette=['#17869E',\"#656d4a\"])\nsns.countplot(x='BloodPressureProblems', data=df, ax=axes[0,1], palette=['#9d6b53',\"#9e2a2b\"])\nsns.countplot(x='AnyTransplants', data=df, ax=axes[0,2], palette=['#8338ec',\"#e0afa0\"])\nsns.countplot(x='AnyChronicDiseases', data=df, ax=axes[1,0], palette=['#c1121f',\"#17c3b2\"])\nsns.countplot(x='KnownAllergies', data=df, ax=axes[1,1], palette=['#1982c4',\"#a98467\"])\nsns.countplot(x='HistoryOfCancerInFamily', data=df, ax=axes[1,2], palette=['#ffcb69',\"#fe6d73\"])","b50dd919":"fig, axes = plt.subplots(4, 3, figsize=(20, 20))\nsns.scatterplot(x='Age', y='Height', data=df, ax=axes[0, 0])\nsns.scatterplot(x='Age', y='Weight', data=df, ax=axes[0, 1])\nsns.scatterplot(x='Age', y='PremiumPrice', data=df, ax=axes[0, 2])\nsns.scatterplot(x='Height', y='Age', data=df, ax=axes[1, 0])\nsns.scatterplot(x='Height', y='Weight', data=df, ax=axes[1, 1])\nsns.scatterplot(x='Height', y='PremiumPrice', data=df, ax=axes[1, 2])\nsns.scatterplot(x='Weight', y='Age', data=df, ax=axes[2, 0])\nsns.scatterplot(x='Weight', y='Height', data=df, ax=axes[2, 1])\nsns.scatterplot(x='Weight', y='PremiumPrice', data=df, ax=axes[2, 2])\nsns.scatterplot(x='PremiumPrice', y='Age', data=df, ax=axes[3, 0])\nsns.scatterplot(x='PremiumPrice', y='Height', data=df, ax=axes[3, 1])\nsns.scatterplot(x='PremiumPrice', y='Weight', data=df, ax=axes[3, 2])","ffb0b1fd":"X = df.drop(['PremiumPrice'], axis=1)\ny = df['PremiumPrice']","d66c5e18":"plt.figure(figsize=(10, 8))\nsns.heatmap(X.corr(), annot=True, cmap='copper_r')","9d03fafe":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","106aa9f5":"scaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","293f3445":"reg_rf = RandomForestRegressor()\nreg_rf.fit(X_train, y_train)","522d11d8":"y_pred = reg_rf.predict(X_test)","f2db9237":"# score of train data\nreg_rf.score(X_train, y_train)","d5ac1dbb":"# score of test data\nreg_rf.score(X_test, y_test)","ca7a35e2":"plt.scatter(y_test, y_pred, alpha = 0.5)\nplt.xlabel(\"y_test\")\nplt.ylabel(\"y_pred\")\nplt.show()","44d25ca6":"print('MAE:', metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","f0002786":"metrics.r2_score(y_test, y_pred)","f2ad8bac":"rf = RandomForestRegressor()\n\nn_estimators = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200]\nmax_features = ['auto', 'sqrt']\nmax_depth = [5, 10, 15, 20, 25, 30]\nmin_samples_split = [2, 5, 10, 15, 100]\nmin_samples_leaf = [1, 2, 5, 10]\n\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}","af4e5b31":"rf_random = RandomizedSearchCV(estimator = rf, \n                               param_distributions = random_grid,\n                               scoring='neg_mean_squared_error', \n                               n_iter = 10, cv = 5, verbose=2, \n                               random_state=42, n_jobs = 1)","b478358a":"rf_random.fit(X_train,y_train)","1ebb9fb2":"rf_random.best_params_","41bad662":"y_pred = rf_random.predict(X_test)","71628dd6":"plt.scatter(y_test, y_pred, alpha = 0.5)\nplt.xlabel(\"y_test\")\nplt.ylabel(\"y_pred\")\nplt.show()","9555f7b2":"print('MAE:', metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","b0425411":"## Standardizing The Data","ee4883a7":"here, most people height is >160 and weight is <100","0f77532a":"## Hyperparameter Tuning","512379f8":"## Model creation","c095908c":"## Libraries","ec15ad6b":"most of the PremiumPrice range is >23000","d8791739":"## Visualizations","a0e395d5":"## Importing The Dataset"}}