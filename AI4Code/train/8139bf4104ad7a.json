{"cell_type":{"15942679":"code","aa1a9e43":"code","6b508d50":"code","d20fcc43":"code","d0ec5c23":"code","47fa67a3":"code","11323061":"code","0c65bbac":"code","a0f0edcb":"code","d6619ce4":"code","19d9615e":"code","85ef2cc1":"code","778c5544":"code","d5a76bd5":"code","b3cfe228":"code","766c8928":"code","13e2f939":"code","17c1156e":"code","e1ab4e34":"code","3c09cb4b":"code","33121150":"code","52484160":"code","d50ce872":"code","7d6c4e91":"code","8e0d3ee3":"code","48589413":"code","dfa32e62":"code","9b351ed0":"code","de2ce367":"code","00569736":"code","8245459f":"code","f7b301b5":"code","e122450a":"code","61e2f2c9":"code","25220ac8":"code","d1d2ade0":"code","d0ca8443":"code","8e0db72b":"code","3204d4f7":"code","0828f43d":"code","6111076d":"code","f01bf797":"code","53f62ec0":"code","a21c599e":"code","6a0ae8b1":"code","852336df":"code","d50807db":"code","d6d6488a":"code","0aeb5640":"code","96f107ee":"code","de0abb6c":"markdown","cb1bfecc":"markdown","c16f8241":"markdown","d516e3fa":"markdown","7a28aaf4":"markdown","8151f2a2":"markdown","3be843b9":"markdown","455c0107":"markdown","c020bb1e":"markdown","9a888c3c":"markdown","9cebd4b0":"markdown","c9a364ec":"markdown","693e667e":"markdown","2abcdb78":"markdown","837114d6":"markdown","29770f0d":"markdown","01ceba5c":"markdown","7d2e80f8":"markdown","42bea4d9":"markdown","627291ac":"markdown","5deaf843":"markdown","6925df18":"markdown","789c03da":"markdown","e5a4e432":"markdown","ffdeeb68":"markdown","9b05bfe4":"markdown","f0e0567a":"markdown","35e082b7":"markdown","d3971010":"markdown","debb8cb1":"markdown","5ce9ff27":"markdown","fbd5ad09":"markdown","9c50197c":"markdown","d9361163":"markdown"},"source":{"15942679":"import numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\nimport gc","aa1a9e43":"df_build = pd.read_csv('..\/input\/ashrae-energy-prediction\/building_metadata.csv')\ndf_weather_train = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_train.csv')\ndf_train = pd.read_csv('..\/input\/ashrae-energy-prediction\/train.csv')\n\ndf_weather_test = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_test.csv')\ndf_test = pd.read_csv('..\/input\/ashrae-energy-prediction\/test.csv')","6b508d50":"df_build.head()","d20fcc43":"df_weather_train.head()","d0ec5c23":"df_train.head()","47fa67a3":"print('Building Metadata', df_build.shape)\nprint('Train Data', df_train.shape)\nprint('Weather Train Data', df_weather_train.shape)\n\nprint('Test Data', df_test.shape)\nprint('Weather Test Data', df_weather_test.shape)","11323061":"df_train.dtypes","0c65bbac":"df_weather_train.dtypes","a0f0edcb":"def change_dtype(df):\n    df['timestamp'] = pd.to_datetime(df['timestamp'], format='%Y-%m-%d %H:%M:%S')\n    return df","d6619ce4":"df_train = change_dtype(df_train)\ndf_weather_train = change_dtype(df_weather_train)\ndf_test = change_dtype(df_test)\ndf_weather_test = change_dtype(df_weather_test)","19d9615e":"df_train = df_train.merge(df_build, on='building_id', how='left')\ndf_train = df_train.merge(df_weather_train, on=['site_id', 'timestamp'], how='left')","85ef2cc1":"df_test = df_test.merge(df_build, on='building_id', how='left')\ndf_test = df_test.merge(df_weather_test, on=['site_id', 'timestamp'], how='left')","778c5544":"del df_build, df_weather_test\ngc.collect()","d5a76bd5":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","b3cfe228":"df_train = reduce_mem_usage(df_train)\ndf_test = reduce_mem_usage(df_test)","766c8928":"df_weather_train = reduce_mem_usage(df_weather_train)","13e2f939":"df_train.head()","17c1156e":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\ncolor = sns.color_palette()\nsns.set_style(\"darkgrid\")","e1ab4e34":"df_train.shape","3c09cb4b":"df_train.isna().sum()","33121150":"len(df_train['building_id'].value_counts())","52484160":"print(f\"Max number of entries for is for building {df_train['building_id'].value_counts().keys()[0]}: \", df_train['building_id'].value_counts().values[0])\nprint(f\"Min number of entries for is for building {df_train['building_id'].value_counts().keys()[-1]}: \", df_train['building_id'].value_counts().values[-1])","d50ce872":"print(\"Data in the train set is from:\", df_train['timestamp'].min())\nprint(\"Data in the train set is till:\", df_train['timestamp'].max())","7d6c4e91":"df_test['building_id'].value_counts()","8e0d3ee3":"print(f\"Max number of entries for is for building {df_test['building_id'].value_counts().keys()[0]}: \", df_test['building_id'].value_counts().values[0])\nprint(f\"Min number of entries for is for building {df_test['building_id'].value_counts().keys()[-1]}: \", df_test['building_id'].value_counts().values[-1])\nprint(f\"Data in the train set is from:\", df_test['timestamp'].min())\nprint(f\"Data in the train set is till:\", df_test['timestamp'].max())","48589413":"df_train['meter'].value_counts().plot.bar(figsize=(8,4), color=color)\nplt.show()","dfa32e62":"fig = plt.figure(figsize=(16, 12))\n\nax1 = fig.add_subplot(221)\nsns.distplot(np.log1p(df_train[df_train['meter'] == 0]['meter_reading'].values),color='blue',ax=ax1, axlabel=\"Log of Electricity meter reading\")\nax2 = fig.add_subplot(222)\nsns.distplot(np.log1p(df_train[df_train['meter'] == 1]['meter_reading'].values),color='orange',ax=ax2, axlabel=\"Log of Chilledwater meter reading\")\nax3 = fig.add_subplot(223)\nsns.distplot(np.log1p(df_train[df_train['meter'] == 2]['meter_reading'].values),color='green',ax=ax3, axlabel=\"Log of Steam meter reading\")\nax4 = fig.add_subplot(224)\nsns.distplot(np.log1p(df_train[df_train['meter'] == 3]['meter_reading'].values),color='red',ax=ax4, axlabel=\"Log of Hotwater meter reading\")\n\nax1.title.set_text('Meter Reading Distribution for Electricity Meter')\nax2.title.set_text('Meter Reading Distribution for Chilledwater Meter')\nax3.title.set_text('Meter Reading Distribution for Steam Meter')\nax4.title.set_text('Meter Reading Distribution for Hotwater Meter')\n\nplt.show()","9b351ed0":"df_train.head()","de2ce367":"df_temp = df_train.groupby(['building_id']).agg({\"meter\": [\"nunique\", \"count\"]})\ndf_temp.columns = [\"_\".join(i) for i in df_temp.columns.ravel()]","00569736":"df_temp.sample(5)","8245459f":"df_temp['meter_nunique'].value_counts().plot.bar(figsize=(8,4), color=color)\nplt.show()","f7b301b5":"df_temp[df_temp['meter_nunique']==4]","e122450a":"df_temp = df_train[df_train['building_id']==1258]\nfig = plt.figure(figsize=(16, 16))\n\nax1 = fig.add_subplot(411)\ndf = df_temp[df_temp['meter']==0]\nsns.lineplot(x=df['timestamp'], y=df['meter_reading'], ax=ax1, color='green')\nax2 = fig.add_subplot(412)\ndf = df_temp[df_temp['meter']==1]\nsns.lineplot(x=df['timestamp'], y=df['meter_reading'], ax=ax2, color='green')\nax3 = fig.add_subplot(413)\ndf = df_temp[df_temp['meter']==2]\nsns.lineplot(x=df['timestamp'], y=df['meter_reading'], ax=ax3, color='green')\nax4 = fig.add_subplot(414)\ndf = df_temp[df_temp['meter']==3]\nsns.lineplot(x=df['timestamp'], y=df['meter_reading'], ax=ax4, color='green')\n\nplt.tight_layout()\nplt.subplots_adjust(top=1.5)\nax1.title.set_text('Meter Reading for Electricity Meter')\nax2.title.set_text('Meter Reading for Chilledwater Meter')\nax3.title.set_text('Meter Reading for Steam Meter')\nax4.title.set_text('Meter Reading for Hotwater Meter')\n\nplt.show()","61e2f2c9":"df_temp = df_train[df_train['building_id']==1331]\nfig = plt.figure(figsize=(16, 16))\n\nax1 = fig.add_subplot(411)\ndf = df_temp[df_temp['meter']==0]\nsns.lineplot(x=df['timestamp'], y=df['meter_reading'], ax=ax1)\nax2 = fig.add_subplot(412)\ndf = df_temp[df_temp['meter']==1]\nsns.lineplot(x=df['timestamp'], y=df['meter_reading'], ax=ax2)\nax3 = fig.add_subplot(413)\ndf = df_temp[df_temp['meter']==2]\nsns.lineplot(x=df['timestamp'], y=df['meter_reading'], ax=ax3)\nax4 = fig.add_subplot(414)\ndf = df_temp[df_temp['meter']==3]\nsns.lineplot(x=df['timestamp'], y=df['meter_reading'], ax=ax4)\n\nplt.tight_layout()\nplt.subplots_adjust(top=1.5)\nax1.title.set_text('Meter Reading for Electricity Meter')\nax2.title.set_text('Meter Reading for Chilledwater Meter')\nax3.title.set_text('Meter Reading for Steam Meter')\nax4.title.set_text('Meter Reading for Hotwater Meter')\n\nplt.show()","25220ac8":"fig = plt.figure(figsize=(22, 8))\ndf_train['year_built'].value_counts().sort_index().plot.bar(color=color)\nplt.show()","d1d2ade0":"fig = plt.figure(figsize=(16, 8))\ndf_train['primary_use'].value_counts(dropna=False).plot.bar(color=color)\nplt.show()","d0ca8443":"fig = plt.figure(figsize=(16, 8))\ndf_train['floor_count'].value_counts(normalize=True, dropna=False).plot.bar(color=color)\nplt.show()","8e0db72b":"print(\"Smallest building Area: \", df_train['square_feet'].min())\nprint(\"largetst building Area: \", df_train['square_feet'].max())\nprint(\"Mean building Area: \", df_train['square_feet'].mean())\nprint(\"Median building Area: \", df_train['square_feet'].median())","3204d4f7":"fig = plt.figure(figsize=(16, 8))\nsns.scatterplot(x=df_train['year_built'], y=df_train['square_feet'])\nplt.show()","0828f43d":"df_weather_train.shape","6111076d":"df_weather_train.isnull().sum()","f01bf797":"fig = plt.figure(figsize=(8,6))\nsns.distplot(df_weather_train['air_temperature'].dropna(), color='red', axlabel=\"Air Temprature\")\nplt.show()","53f62ec0":"fig = plt.figure(figsize=(8,6))\nsns.distplot(df_weather_train['dew_temperature'].dropna(), color='green', axlabel=\"Dew Temprature\")\nplt.show()","a21c599e":"fig = plt.figure(figsize=(8,6))\nsns.distplot(df_weather_train['sea_level_pressure'].dropna(), color='blue', axlabel=\"Sea Level Pressure\")\nplt.show()","6a0ae8b1":"fig = plt.figure(figsize=(8,6))\nsns.distplot(df_weather_train['wind_speed'].dropna(), color='purple', axlabel=\"Wind Speed\")\nplt.show()","852336df":"fig = plt.figure(figsize=(16,8))\ndf_train['site_id'].value_counts(normalize=True, dropna=False).plot.bar(color=color)\nplt.show()","d50807db":"fig = plt.figure(figsize=(22,11))\nsns.lineplot(x=df_weather_train['timestamp'], y=df_weather_train['air_temperature'], hue=df_weather_train['site_id'], \n             legend='full', palette=sns.color_palette('Paired',16))\nplt.show()","d6d6488a":"fig = plt.figure(figsize=(22,11))\nsns.lineplot(x=df_weather_train['timestamp'], y=df_weather_train['dew_temperature'], hue=df_weather_train['site_id'], \n             legend='full', palette=sns.color_palette('Paired',16))\nplt.show()","0aeb5640":"fig = plt.figure(figsize=(22,11))\nsns.lineplot(x=df_weather_train['timestamp'], y=df_weather_train['sea_level_pressure'], hue=df_weather_train['site_id'], \n             legend='full', palette=sns.color_palette('Paired',16))\nplt.show()","96f107ee":"fig = plt.figure(figsize=(22,11))\nsns.lineplot(x=df_weather_train['timestamp'], y=df_weather_train['wind_speed'], hue=df_weather_train['site_id'], \n             legend='full', palette=sns.color_palette('Paired',16))\nplt.show()","de0abb6c":"__Observations:__\n* The electricity meter readings are generally in the range of 800 to 1100 but becomes 0 at times in between which .\n* We can see an increase in the chill water meter from May to October of 2016 for this building and probably this might be summer time\n* We can see a dip in the steam meter from October till November\n* We can see a spike in the hot water meter from November till February, suggesting winter has come :P\n* Hot water meter reading is around 0 from May to October","cb1bfecc":"The test set has 2 years of data","c16f8241":"__Majority of entries in our dataset is from site 13, 9  & 2__","d516e3fa":"## Let's Proceed ahead with EDA","7a28aaf4":"__Dataset is huge we have around 20M datapoints__","8151f2a2":"__Cloud coverage information of majority of datapoints in the dataset is missing__.\n__Also, significantly large number of infomation regarding Precepitation Depth is missing__.","3be843b9":"Let's see the distribution of different meter readings across the dataset","455c0107":"__Observations:__\n\n* Their is sudden linear decrease in the electricity meter reading from Feburary mid to April mid, this suggest their might be a meter fault.\n* Chilled water reading meter reading reamains constant from Feburary mid to April mid\n* Steam meter reading again shows a linear decrease from Feburary mid to April mid\n* Their is sudden linear decrease in the hot water reading from Feburary mid to April mid.\n\nAbove points indicates their might be something going on in bulding 1331 from Feburary mid to April mid.\n","c020bb1e":"__Let's take a look on the age of buildings.__","9a888c3c":"__We can see some buildings are quite big__","9cebd4b0":"#### Let's check number of meters buildings are having","c9a364ec":"Let's change the datatype of timestamp column to datetime format","693e667e":"__Distribution of Sea Level Pressure over the entire weather dataset__","2abcdb78":"__Most of buildings in the dataset are built for Educational Purpose followed by Offical and Entetaniment use.__","837114d6":"__From the above two plots it is very clear thatt energy consumption pattern of different buildings are very different from each other__","29770f0d":"<b> Let's check energy consumption of some of the buildings to find energy consumtion is following a similar pattern<\/b>\n* We will take building 1258 as it has the maximum number of entries in the dataset and 1331","01ceba5c":"__We have the building built in the year 1900(OMG!! More than 110 years old), most of the buildings were made drring 60s and 70s__.","7d2e80f8":"We have the data for __1449__ buildings ","42bea4d9":"__Distribution of Wind Speed over the entire weather dataset__","627291ac":"__Sea Level range differs at different sites but all of them follows a common pattern it becomed minimal during the mid of year__.","5deaf843":"So we have one year of data in our train set.","6925df18":"#### For test set","789c03da":"We can see there are some features whose null count is quite high, we will deal with them later","e5a4e432":"<b> Most of the buildings have only 1 type of meter","ffdeeb68":"__Wind Speed among all the sites follows a similar trend__","9b05bfe4":"We can see most ereadings is for __Electricity meter__ followed by __Chilledwater, Steam and Hotwater__.","f0e0567a":"__Distribution of Dew Temprature over the entire weather dataset__","35e082b7":"__Temprature range differs at different sites but all of them follows a common pattern the temprature increases till the mid of year and then starts decreasing__.","d3971010":"__Similar to Temprature, Dew Point Temprature among all the sites follows similar rise and fall trend__","debb8cb1":"### Let's explore the weather data","5ce9ff27":"__Floor information for around 85% of the buildinds in our dataset dosen't have any floorr count__","fbd5ad09":"### Let's take a more deeper look on building data","9c50197c":"__We have around 0.13 M datapoints for weather dataset__.","d9361163":"__Let's check the didtribution of Air Temprature over the entire dataset.__"}}