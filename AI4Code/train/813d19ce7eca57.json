{"cell_type":{"030a39f3":"code","cdca864e":"code","5cd17be4":"code","1fda06f7":"code","deaf1a11":"code","fa625440":"code","6dcee5d9":"code","98ad66a2":"code","0e3c8c93":"code","36181636":"code","2942f2e9":"markdown","7c9460ad":"markdown","8c6955d2":"markdown"},"source":{"030a39f3":"import pandas as pd\nimport numpy as np\nimport random\nimport os\nimport gc\n\nimport tensorflow as tf\nfrom transformers import AutoTokenizer, TFAutoModelForSequenceClassification\nfrom sklearn.model_selection import train_test_split\n\nimport matplotlib.pyplot as plt","cdca864e":"# Plots display settings\nplt.rcParams['figure.figsize'] = 12, 8\nplt.rcParams.update({'font.size': 14})","5cd17be4":"# Seed everything\nseed_value = 5\nos.environ['PYTHONHASHSEED'] = str(seed_value)\nrandom.seed(seed_value)\nnp.random.seed(seed_value)\ntf.random.set_seed(seed_value)","1fda06f7":"# Paths to original data\ntrain_path = '..\/input\/commonlitreadabilityprize\/train.csv'\ntest_path = '..\/input\/commonlitreadabilityprize\/test.csv'","deaf1a11":"# Pretrained model from HugginFace Hub\n# Loaded from Kaggle dataset at https:\/\/www.kaggle.com\/sauravmaheshkar\/huggingface-bert-variants\nmodel_path = '..\/input\/huggingface-bert-variants\/distilbert-base-cased\/distilbert-base-cased'","fa625440":"# TensorFlow settings\nBATCH_SIZE = 32\nEPOCHS = 20\nSTART_LR = 1e-5\nEND_LR = 1e-7\nPATIENCE = 3\n\n# NLP model settings\nMAX_LEN = 256  # Number of words per text\n\n# Portion of data for validation\nVAL_SIZE = 0.1","6dcee5d9":"def get_data(path: str) -> pd.DataFrame:\n    \"\"\"Function loads data from the csv file\n    and creates a column with total number of characters.\n    :param path: Path to csv file with original data\n    :return: DataFrame with original data and generated features\n    \"\"\"\n    df = pd.read_csv(path)\n    df['n_chars'] = df['excerpt'].apply(len)\n\n    return df\n\n\ndef tokenize_texts(tokenizer, texts: pd.Series, labels):\n    \"\"\"Function converts texts into tokenized and batched datasets for the model.\n    Returns dataset with or without labels.\n    :param tokenizer: Tokenizer instance from transformers library\n    :param texts: pd.Series with raw texts\n    :param labels: Series of target values or None, if labels are not available\n    :return: Tensorflow Dataset object\n    \"\"\"\n    if labels is not None:  # Data is labeled\n        ds = tokenizer(texts.values.tolist(),\n                       return_tensors='tf', max_length=MAX_LEN,\n                       padding='max_length', truncation=True)\n        ds = tf.data.Dataset.from_tensor_slices(\n            (ds['input_ids'], ds['attention_mask'], labels.values)\n        ).map(lambda x1, x2, y: ({'input_ids': x1, 'attention_mask': x2}, y))\\\n            .batch(BATCH_SIZE)\n\n    else:  # If no labels are provided\n        ds = tokenizer(texts.values.tolist(),\n                       return_tensors='tf', max_length=MAX_LEN,\n                       padding='max_length', truncation=True)\n        ds = tf.data.Dataset.from_tensor_slices(\n            (ds['input_ids'], ds['attention_mask'])\n        ).map(lambda x1, x2: {'input_ids': x1, 'attention_mask': x2})\\\n            .batch(BATCH_SIZE)\n\n    return ds\n\n\ndef train_and_forecast() -> np.array:\n    \"\"\"Function fine-tunes pretrained transformer model\n    and produces a forecast for the test data.\n    :returns: Numpy array with readability scores for test data\n    \"\"\"\n    # Initialize pretrained model for classification task with 1 class\n    model = TFAutoModelForSequenceClassification.from_pretrained(model_path, num_labels=1)\n    tokenizer = AutoTokenizer.from_pretrained(model_path)\n\n    # Tokenize test texts and convert into tensorflow Dataset object\n    test_ds = tokenize_texts(tokenizer, data_test['excerpt'], labels=None)\n    print(f'Number of test text samples: {len(data_test)}')\n    print(f'Test texts tokenized. Number of batches: {len(test_ds)}')\n\n    # Split the samples of various text length proportionally\n    # between train and validation sets\n    groups = pd.cut(data_train['n_chars'],\n                    bins=[0, 800, 900, 1000, 1100, 1200, 1350],\n                    labels=[1, 2, 3, 4, 5, 6])\n\n    train_texts, val_texts, train_scores, val_scores = train_test_split(\n        data_train['excerpt'], data_train['target'], stratify=groups,\n        test_size=VAL_SIZE, shuffle=True, random_state=0)\n\n    # Tokenize train and validation texts\n    train_ds = tokenize_texts(tokenizer, train_texts, train_scores)\n    valid_ds = tokenize_texts(tokenizer, val_texts, val_scores)\n\n    print(f'Number of train text samples: {len(train_texts)}')\n    print(f'Train texts tokenized. Number of batches: {len(train_ds)}')\n\n    print(f'Number of validation text samples: {len(val_texts)}')\n    print(f'Validation texts tokenized. Number of batches: {len(valid_ds)}')\n\n    # Linearly decreasing learning rate\n    lr_scheduler = tf.keras.optimizers.schedules.PolynomialDecay(\n        initial_learning_rate=START_LR,\n        end_learning_rate=END_LR,\n        decay_steps=EPOCHS * len(train_ds)\n    )\n\n    # Compile the model with regression metrics\n    model.compile(optimizer=tf.optimizers.Adam(learning_rate=lr_scheduler, clipnorm=1.0),\n                  loss=tf.keras.losses.MeanSquaredError(),\n                  metrics=[tf.keras.metrics.RootMeanSquaredError()])\n\n    # To stop training when per-epoch validation RMSE starts growing\n    early_stop = tf.keras.callbacks.EarlyStopping(monitor='val_root_mean_squared_error',\n                                                  patience=PATIENCE,\n                                                  restore_best_weights=True)\n\n    history = model.fit(train_ds, validation_data=valid_ds,\n                        epochs=EPOCHS, verbose=2, callbacks=[early_stop],\n                        use_multiprocessing=True, workers=2)\n    plot_history(history)\n\n    loss, rmse = model.evaluate(valid_ds)\n    print(f'Training completed. Validation loss (MSE) = {loss}\\nValidation RMSE: {rmse}')\n\n    # Make a forecast for test data\n    forecast = model.predict(test_ds).logits.flatten()\n\n    gc.collect()\n    tf.keras.backend.clear_session()\n\n    return forecast\n\n\ndef plot_history(hist):\n    \"\"\"Function plots a chart with training and validation metrics.\n    :param hist: Tensorflow history object from model.fit()\n    \"\"\"\n    # Losses and metrics\n    mse = hist.history['loss']\n    val_mse = hist.history['val_loss']\n    rmse = hist.history['root_mean_squared_error']\n    val_rmse = hist.history['val_root_mean_squared_error']\n\n    # Epochs to plot along x axis\n    x_axis = range(1, len(mse) + 1)\n\n    fig, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True)\n\n    ax1.plot(x_axis, mse, 'bo', label='Training')\n    ax1.plot(x_axis, val_mse, 'ro', label='Validation')\n    ax1.set_title('Training and validation MSE')\n    ax1.set_ylabel('Loss (MSE)')\n    ax1.legend()\n\n    ax2.plot(x_axis, rmse, 'bo', label='Training')\n    ax2.plot(x_axis, val_rmse, 'ro', label='Validation')\n    ax2.set_title('Training and validation RMSE')\n    ax2.set_xlabel('Epochs')\n    ax2.set_ylabel('RMSE')\n    ax2.legend()\n\n    plt.tight_layout()\n    plt.show()","98ad66a2":"# Load train and test data\ndata_train = get_data(train_path)\ndata_test = get_data(test_path)","0e3c8c93":"# Train neural network and produce a forecast for the test set\ndata_test['target'] = train_and_forecast()","36181636":"# Save the result\ndata_test[['id', 'target']].to_csv('submission.csv', index=False)\nprint(data_test[['id', 'target']].head())","2942f2e9":"## Functions","7c9460ad":"# Neural Network for Estimating Text Readability\n\nPretrained DistilBERT model is initialized for classification task with just one class and compiled with regression metrics to produce readability scores. The model is fine-tuned with decreasing learning rate on the train samples until validation RMSE stops improving.\n\nOriginal text samples are split into train and validation subsets 90%\/10%. Texts are not preprocessed in any way before passing them to the tokenizer of cased model. When splitting data length of text samples is taken into account to observe proportional distribution of short, medium and long excerpts in train and validation sets because text length strongly correlates with readability score.","8c6955d2":"## Training the model"}}