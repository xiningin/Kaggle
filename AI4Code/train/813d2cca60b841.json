{"cell_type":{"eb9eb02d":"code","7d3be132":"code","f2e7f15e":"code","70f77bf8":"code","eb4f4a99":"code","de4b5086":"code","15046f1d":"code","7f741971":"code","d1706a55":"code","c57cbd75":"code","b5637208":"code","17bfbfa6":"code","1efe97ad":"code","a4c8c610":"code","bdd61afa":"code","d986ca38":"code","1336f05c":"code","b26a5ac9":"code","838b1309":"code","4447fb93":"code","ac441027":"code","75692033":"code","c0044f22":"code","bfe5a7d8":"code","3eeb1bf0":"code","bafcbfd1":"code","947c5fcb":"code","b8f61ce6":"code","bc16d64d":"code","d70383ff":"code","d910d0df":"code","444f7b99":"code","beaeb225":"code","6c04627e":"code","1aeab6ca":"code","3add2f99":"code","ff6f518c":"code","733d9742":"code","9c1144ae":"code","52227c47":"code","49b9384e":"code","cfaf8dbb":"code","ed304109":"markdown","4e5133b8":"markdown","178cdd17":"markdown","1526bb34":"markdown","274b78f0":"markdown","7bef61a4":"markdown","83095b3a":"markdown","1456e147":"markdown","cfcb9fc3":"markdown","cdaa385a":"markdown","d716bc9e":"markdown","3fb22e3b":"markdown"},"source":{"eb9eb02d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\n#importing Decision Tree from sklearn\nfrom sklearn.tree import DecisionTreeClassifier\n#importing Logistic regression \nfrom sklearn.linear_model import LogisticRegression\n#importing Support vector machine\nfrom sklearn.svm import SVC\n#importing Gaussian Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\n#importing random forest\nfrom sklearn.ensemble import RandomForestClassifier\n#importing K-Nearest classifier\nfrom sklearn.neighbors import KNeighborsClassifier","7d3be132":"#lets import the Dataset\ndf = pd.read_csv(\"..\/input\/crop-recommendation-dataset\/Crop_recommendation.csv\")","f2e7f15e":"#overview of the dataset\ndf.head()","70f77bf8":"#checking for the NAN value in the data\ndf.isnull().sum()","eb4f4a99":"#describing data or Statistical information of the data\ndf.describe()","de4b5086":"#checking datatype\ndf.dtypes","15046f1d":"#uniques in label column\nprint(df.label.unique())\nprint(\"Total unique vlaues in Label columns are: \",len(df.label.unique()))","7f741971":"#toatal counts of each unique value in label\ndf.label.value_counts()","d1706a55":"pip install dataprep","c57cbd75":"#importing create report\nfrom dataprep.eda import create_report","b5637208":"#creating automatic EDA using datapre\ncreate_report(df)","17bfbfa6":"X = df.drop([\"label\"], axis = 1)\ny = pd.DataFrame(df.label)\nprint(X.shape)\nprint(y.shape)","1efe97ad":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nfor col in X.columns:\n            x = np.array(X[col]).reshape(-1,1)\n            X[col]=scaler.fit_transform(x)","a4c8c610":"#Splitting training data and testing data using train_test_split\nX_train, X_test, y_train, y_test= train_test_split(X,y,random_state=42, test_size=0.2)","bdd61afa":"print(\"X_train: \",X_train.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"X_test: \",X_test.shape)\nprint(\"y_test: \",y_test.shape)","d986ca38":"#applying DT for Train data\ndt = DecisionTreeClassifier()\nmodel_dt = dt.fit(X_train, y_train)","1336f05c":"#Checking Score of the model\nscore_dt=model_dt.score(X_test, y_test)\nprint(\"Accuracy for Decision Tree: \",score_dt)","b26a5ac9":"#model prediction\ny_pred_dt = model_dt.predict(X_test)","838b1309":"# generating report for classification result\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred_dt))","4447fb93":"#applying Logistic regression for Training data\nreg = LogisticRegression()\ntry model_reg = reg.fit(X_train, y_train)","ac441027":"#Checking Score of the model\nscore_reg=model_reg.score(X_test, y_test)\nprint(\"Accuracy for Lofistic regression: \",score_reg)","75692033":"#model prediction\ny_pred_reg = model_reg.predict(X_test)","c0044f22":"# generating report for classification result\nprint(classification_report(y_test, y_pred_reg))","bfe5a7d8":"#applying SVM for Training data\nsvm= SVC(kernel = 'linear')\nmodel_svm = svm.fit(X_train, y_train)","3eeb1bf0":"#Checking Score of the model\nscore_svm=model_svm.score(X_test, y_test)\nprint(\"Accuracy for Lofistic regression: \",score_svm)","bafcbfd1":"#model prediction\ny_pred_svm = model_svm.predict(X_test)","947c5fcb":"# generating report for classification result\nprint(classification_report(y_test, y_pred_svm))","b8f61ce6":"#applying Gaussian NB for Training data\nnb = GaussianNB()\nmodel_nb = nb.fit(X_train, y_train)","bc16d64d":"#Checking Score of the model\nscore_nb=model_nb.score(X_test, y_test)\nprint(\"Accuracy for Lofistic regression: \",score_nb)","d70383ff":"#model prediction\ny_pred_nb = model_nb.predict(X_test)","d910d0df":"# generating report for classification result\nprint(classification_report(y_test, y_pred_nb))","444f7b99":"#applying KNeighbors for Training data\nkn = KNeighborsClassifier(n_neighbors=10, metric='minkowski', p=2)\nmodel_kn = kn.fit(X_train, y_train)","beaeb225":"#Checking Score of the model\nscore_kn=model_kn.score(X_test, y_test)\nprint(\"Accuracy for Lofistic regression: \",score_kn)","6c04627e":"#model prediction\ny_pred_kn = model_kn.predict(X_test)","1aeab6ca":"# generating report for classification result\nprint(classification_report(y_test, y_pred_kn))","3add2f99":"#applying KNeighbors for Training data\nrf = RandomForestClassifier(n_estimators=100, criterion = 'entropy')\nmodel_rf = rf.fit(X_train, y_train)","ff6f518c":"#Checking Score of the model\nscore_rf=model_rf.score(X_test, y_test)\nprint(\"Accuracy for Lofistic regression: \",score_rf)","733d9742":"#model prediction\ny_pred_rf = model_rf.predict(X_test)","9c1144ae":"# generating report for classification result\nprint(classification_report(y_test, y_pred_rf))","52227c47":"# creating dictionarries for scores\ntotal_score = {\"DT\":score_dt, \"Log_reg\":score_reg, \"SVM\":score_svm, \"GaussianNB\":score_nb, \"K-Niegh\":score_kn, \"Rand_forest\":score_rf}\ntotal_score","49b9384e":"model = list(total_score.keys())\nscore = list(total_score.values())","cfaf8dbb":"#ploting a Bar graph for different modes and its score\nplt.figure(figsize=(10, 5))\nplt.bar(model,score,color ='red',width=0.8)\nplt.xlabel(\"Model Name\")\nplt.ylabel(\"Score\")\nplt.title(\"Scores for different model\")\nplt.show()","ed304109":"### EDA from DATAPREP","4e5133b8":"### RandomForest","178cdd17":"## Deploying models","1526bb34":"### Logistic Regression","274b78f0":"### Gaussian NB","7bef61a4":"### Preprocessing and Splitting Data","83095b3a":"### Importing Necessary Libraries","1456e147":"#### Conclusion: Random forest and Gaussian algorithm give better accuracy","cfcb9fc3":"### KNeighbors","cdaa385a":"### Decision Tree","d716bc9e":"# Crop Prediction ","3fb22e3b":"### SVM"}}