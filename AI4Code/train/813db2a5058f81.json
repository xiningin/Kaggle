{"cell_type":{"c5c606cf":"code","fc4ac501":"code","8167ed4d":"code","9bf4ea77":"code","41ff0a23":"code","9cf702a3":"code","efb0d608":"code","7ad40042":"code","63c3137a":"code","9f3ebaa0":"code","a5569971":"code","6b1fad81":"code","b509dc35":"code","11d94642":"code","d9731180":"code","e7e62be3":"code","cf55e09f":"code","2f4844b2":"code","a70803c2":"code","54ffe979":"markdown","dd290542":"markdown","894dac3b":"markdown","9f3e4c86":"markdown","45418690":"markdown","a1e297b0":"markdown","555bffc3":"markdown"},"source":{"c5c606cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fc4ac501":"import matplotlib.pyplot as plt\nimport seaborn as sns \nimport itertools\nimport warnings\nwarnings.filterwarnings(\"ignore\")","8167ed4d":"Train_df =  pd.read_csv(\"\/kaggle\/input\/pubg-finish-placement-prediction\/train_V2.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/pubg-finish-placement-prediction\/test_V2.csv\")","9bf4ea77":"Train_df","41ff0a23":"Train_df.info() ","9cf702a3":"print(\"TRAIN \",Train_df.memory_usage().sum()\/1024**2)\nprint(\"TEST \",test_df.memory_usage().sum()\/1024**2)","efb0d608":"\"\"\"\nCheck Data Type \n\"\"\"\ncol = Train_df['assists'].dtype\ntype(col)","7ad40042":"'''\nAll type of min and max value in INT & floar\n'''\nprint('INT8 ',np.iinfo(np.int8))\nprint('INT16 ',np.iinfo(np.int16))\nprint('INT32 ',np.iinfo(np.int32))\nprint('INT64 ',np.iinfo(np.int64))\nprint('FLOAT32 ',np.finfo(np.float32))\nprint('FLOAT64 ',np.finfo(np.float64))","63c3137a":"\"\"\"\nReduce Memory function\n\"\"\"\ndef reduce_memory(df):\n    total_memoryIN_mebi = df.memory_usage().sum()\/1024**2 # Convert Bytes to Mebibyte\n    \n    for col in df.columns: # get column one by one\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()  # min value of column\n            c_max = df[col].max() # max value of column\n            \n            if str(col_type)[:3] == 'int': # convert numpy.dtype to string\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n\n    after_reduce = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB --> {:.2f} MB (Decreased by {:.1f}%)'.format(\n        total_memoryIN_mebi, after_reduce, 100 * (total_memoryIN_mebi - after_reduce) \/ total_memoryIN_mebi))\n    return df\n","9f3ebaa0":"%%time\n\ntrain = reduce_memory(Train_df)\ntest = reduce_memory(test_df)\nprint(train.shape,test.shape)","a5569971":"train.info()","6b1fad81":"train.columns","b509dc35":"for i in ['Id','groupId','matchId']:  # Name in List formate\n    print(f'unique [{i}] count:', train[i].nunique()) #Getting Unique Data from Data Sets","11d94642":"fig, ax = plt.subplots(1, 2, figsize=(12, 4))","d9731180":"fig, ax = plt.subplots(1, 2, figsize=(30,6))\ntrain.groupby('matchId')['matchType'].first().value_counts().plot.bar(ax=ax[0])\n\nmapper = lambda x: 'solo' if ('solo' in x) else 'duo' if ('duo' in x) or ('crash' in x) else 'squad'\ntrain['matchType'] = train['matchType'].apply(mapper)\ntrain.groupby('matchId')['matchType'].first().value_counts().plot.bar(ax=ax[1])","e7e62be3":"def mergeList(list1,list2):\n    return list(itertools.product(list1,list2))\nmatch = train.groupby(['matchType','matchId']).size().to_frame('players in match')\ngroup = train.groupby(['matchType','matchId','groupId']).size().to_frame('players in group')\npd.concat([match.groupby('matchType').describe()[mergeList(['players in match'],['min','mean','max'])], \n           group.groupby('matchType').describe()[mergeList(['players in group'],['min','mean','max'])]], axis=1)","cf55e09f":"print(group['players in group'].nlargest())","2f4844b2":"''' ex) matchId=='3e029737889ce9', groupId=='b8275198faa03b'\n'''\nsubset = train[train['matchId']=='3e029737889ce9']\nsub_grp = subset[subset['groupId']=='b8275198faa03b']\n\nprint('matchId ==\\'3e029737889ce9\\' & groupId ==\\'b8275198faa03b\\'')\nprint('-'*50)\nprint('players:',len(subset))\nprint('groups:',subset['groupId'].nunique())\nprint('numGroups:',subset['numGroups'].unique())\nprint('maxPlace:',subset['maxPlace'].unique())\nprint('-'*50)\nprint('max-group players:',len(sub_grp))\nprint('max-group winPlacePerc:',sub_grp['winPlacePerc'].unique())\nprint('-'*50)\nprint('winPlacePerc:',subset['winPlacePerc'].sort_values().unique())","a70803c2":"corr = train.corr()\nf,ax = plt.subplots(figsize=(20, 15))\nsns.heatmap(train.corr(), annot=True, fmt= '.1f',ax=ax, cmap=\"BrBG\")\nsns.set(font_scale=1.25)\nplt.show()","54ffe979":"#Unique Count of ID,Group, MatchID\n1. Why unique because of rejoining player","dd290542":"- **killPlace** - Your ranking in match in terms of number of enemy players killed.\n- **killPoints** - Kills-based external ranking of player. (Ranking where only winning matters).\n- **kills** - Number of enemy players killed.\n- **killStreaks** - Max number of enemy players killed in a short amount of time. A Killstreak is earned when a player acquires a certain number of kills in a row without dying.\n- **longestKill** - Longest distance between player and player killed at time of death. This may be misleading, as downing a - player and driving away may lead to a large longestKill stat.\n- **maxPlace** - Worst placement we have data for in the match. This may not match with numGroups, as sometimes the data skips over placements.\n- **numGroups** - Number of groups we have data for in the match.\n- **revives** - Number of times you revived your teammates.\n- **rideDistance** - Total distance traveled in vehicles (measured in meters).\n- **roadKills** - Number of enemy killed while travelling in a vehicle.\n- **swimDistance** - Total distance traveled by swimming (measured in meters).\n- **teamKills** - Number of times you are killed your teammate.\n- **vehicleDestroys** - Number of vehicles destroyed.\n- **walkDistance** - Total distance traveled on foot (measured in meters).\n- **weaponsAcquired** - Number of weapons picked up.\n- **winPoints** - Win-based external ranking of player. (Ranking where only winning matters).\n- **winPlacePerc** - The target of prediction **(Target Variable)**. This is a percentile winning placement, where 1 corresponds to 1st place, and 0 corresponds to last place in the match. It is calculated off of maxPlace, not numGroups, so it is possible to have missing chunks in a match.","894dac3b":" # before reduce Data","9f3e4c86":"### Exploring Different Match Type\nPUBG offers 3 different game modes:\n- Solo - One can play alone (solo,solo-fpp,normal-solo,normal-solo-fpp)\n- Duo - Play with a friend (duo,duo-fpp,normal-duo,normal-duo-fpp,crashfpp,crashtpp)\n- Squad - Play with 4 friends (squad,squad-fpp,normal-squad,normal-squad-fpp,flarefpp,flaretpp)","45418690":"# Function for reduce Data","a1e297b0":"###Player Analysis\n- players in match and group\n\nDuring a game, 100 players join the same server,  so in the case of duos the max teams are 50 and in the case of squads the max teams are 25.","555bffc3":"# After Redduce Data"}}