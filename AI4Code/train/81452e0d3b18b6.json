{"cell_type":{"930e2631":"code","06cae67f":"code","7f7cd988":"code","7113f48f":"code","211a4bfd":"code","553bf20e":"code","b86ee182":"code","fa06c105":"code","1ae25ee5":"code","c4a1161b":"code","462d7dea":"code","fb500c79":"code","45113e4f":"code","1723b659":"code","94b13f92":"code","68d50cc1":"code","fb222501":"code","58f1e952":"code","c938e1f4":"code","f5e04551":"code","57d09397":"code","8ddc9329":"code","1e4c0bd6":"code","235baec4":"code","c7627d76":"code","e435ce33":"code","7a359c94":"code","abfb86c5":"code","045905ce":"code","67b96f8b":"code","cfba8306":"code","f6cd4e91":"markdown","2a651e0c":"markdown","0f97ef4d":"markdown","4273735a":"markdown","0d155008":"markdown","6b2beed4":"markdown","7b801ca9":"markdown","15e85378":"markdown"},"source":{"930e2631":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\n%matplotlib inline\nimport numpy as np\n\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.tree import DecisionTreeRegressor, export_graphviz\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_squared_error\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","06cae67f":"data_dummis = pd.read_pickle('..\/input\/data-for-model\/data_dummis_dataframe_with_events.pkl')","7f7cd988":"data_dummis.info()","7113f48f":"X = data_dummis[['Week_Day_Friday', 'Week_Day_Monday',\n       'Week_Day_Saturday', 'Week_Day_Sunday', 'Week_Day_Thursday',\n       'Week_Day_Tuesday','is_local_event', 'is_bank_holiday']]\ny = data_dummis['Item']\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42,shuffle=True)\n\nprint(len(X_train), len(X_test))\nprint(len(y_train), len(y_test))","211a4bfd":"estimator = DecisionTreeRegressor()\n\ngrid = GridSearchCV(estimator,\n                    param_grid={'max_depth': range(1,10,1), 'min_samples_leaf': range(1,10,1)},\n                    scoring='neg_mean_squared_error',\n                    return_train_score=True,\n                    cv=5, \n                   iid=True)\n\ngrid.fit(X_train,y_train)","553bf20e":"grid.best_params_","b86ee182":"grid.best_score_","fa06c105":"dt_tuned = DecisionTreeRegressor(max_depth=4)\ndt_tuned.fit(X_train, y_train)\n#export_graphviz(dt_tuned, 'Data\/Bakery_dt_tuned.dot', feature_names=X.columns)","1ae25ee5":"dt = DecisionTreeRegressor()\ndt.fit(X_train, y_train)\n#export_graphviz(dt, 'Data\/Bakery.dot', feature_names=X.columns)","c4a1161b":"dt_half_tuned = DecisionTreeRegressor(max_depth=3)\ndt_half_tuned.fit(X_train, y_train)\n#export_graphviz(dt_half_tuned, 'Data\/Bakery_dt_half_tuned.dot', feature_names=X.columns)","462d7dea":"# Compute the feature importances (the Gini index at each node).\ndt_feature_importances = pd.DataFrame({'feature':X.columns, 'DT':dt.feature_importances_, 'DT_Tuned':dt_tuned.feature_importances_,'DT_half_Tuned':dt_half_tuned.feature_importances_}).sort_values(by='DT', ascending=False)\ndt_feature_importances","fb500c79":"dt_feature_importances.plot.bar()","45113e4f":"rf = RandomForestRegressor()\nrf.fit(X_train, y_train)\ny_pred_rf = rf.predict(X_train)","1723b659":"rf_grid = GridSearchCV(estimator=RandomForestRegressor(),\n                    param_grid={\"n_estimators\": [1, 3, 5, 7 ,9, 10, 11, 13, 15, 17, 19, 21],\n                                \"min_samples_split\": [2, 5, 10],\n                                \"min_samples_leaf\": [1, 5, 10, 25],\n                                \"max_depth\": [1, 3, 5, 7, 10, None],\n                                #\"max_features\": [0, 10],\n                                \"bootstrap\": [True, False]},\n                    scoring=\"neg_mean_squared_error\",\n                    cv=5)\n\nrf_grid.fit(X_train, y_train)\n","94b13f92":"rf_grid.best_params_","68d50cc1":"rf_tuned = RandomForestRegressor(bootstrap=True,max_depth=5,min_samples_leaf=1,min_samples_split=5,n_estimators=17)\nrf_tuned.fit(X_train, y_train)","fb222501":"y_pred_rf_tuned = rf_tuned.predict(X_train)\ny_pred_dt = dt.predict(X_train)\ny_pred_dt_tuned = dt_tuned.predict(X_train)","58f1e952":"#Get the RMSE and score of all models in a dataframe\nRMSE_SCORES_results = pd.DataFrame(columns=['Model', 'Train_RMSE', 'Test_RMSE', 'Train_Score','Test_Score'], index=range(5))\nmodel_list = [dt,dt_tuned,dt_half_tuned,rf,rf_tuned]\ny_pred_mean_train = [y_train.mean()] * len(y_train)\ny_pred_mean_test = [y_test.mean()] * len(y_test)\n\nfor i, item in enumerate(model_list):\n    rmse_train = np.sqrt(mean_squared_error(y_train, item.predict(X_train)))\n    rmse_test = np.sqrt(mean_squared_error(y_test, item.predict(X_test)))\n    score_train = item.score(X_train, y_train)\n    score_test = item.score(X_test, y_test)\n    item_str = str(item)\n    item_name = item_str[:16]\n    if i == 1 or i == 4:\n        item_name = item_name + '_Tuned'\n    elif i == 2:\n        item_name = item_name + '_half_Tuned'\n\n    RMSE_SCORES_results.loc[i] = [item_name, rmse_train, rmse_test, score_train,score_test]\n\nRMSE_SCORES_results.loc[5] = ['Baseline',  np.sqrt(metrics.mean_squared_error(y_train, y_pred_mean_train)), np.sqrt(metrics.mean_squared_error(y_test, y_pred_mean_test)),0.0, 0.0]\n\nRMSE_SCORES_results.index = RMSE_SCORES_results.Model","c938e1f4":"RMSE_SCORES_results","f5e04551":"fig, axes = plt.subplots(2, 2, figsize=(15,8), sharex=False, sharey=True, squeeze=False)\n\nfig.suptitle('RMSE and Score', fontsize=12)\nfig.text(0.06, 0.5, 'Total Item Sold', ha='center', va='center', rotation='vertical', )\n#fig.text(0.5, 0.04, 'Hours', ha='center', va='center', rotation=45)\n\nRMSE_train_graph = RMSE_SCORES_results['Train_RMSE']\nRMSE_train_graph.plot(ax=axes[0][0], grid=True, kind='barh', title='RMSE for train')\n\nRMSE_test_graph = RMSE_SCORES_results['Test_RMSE']\nRMSE_test_graph.plot(ax=axes[0][1], grid=True, kind='barh', title='RMSE for test')\n\nscore_train_graph = RMSE_SCORES_results['Train_Score']\nscore_train_graph.plot(ax=axes[1][0], grid=True, kind='barh', title='Score for train')\n\nscore_test_graph = RMSE_SCORES_results['Test_Score']\nscore_test_graph.plot(ax=axes[1][1], grid=True, kind='barh', title='Score for test')\n","57d09397":"def cross_validation_test(model_name, x_data, y_data, scoring_name, n):\n    cv_scores = cross_val_score(model_name, x_data, y_data, scoring=scoring_name, cv=n)\n    return np.sqrt(-cv_scores), np.sqrt(-cv_scores.mean())","8ddc9329":"RMSE_SCORES_results = pd.DataFrame(columns=['Model', 'RMSE', 'Average RMSE'], index=range(2))\nmodel_list = [dt,dt_half_tuned, dt_tuned,rf,rf_tuned]\n          \nfor item in model_list:\n    model_string = str(item)\n    print('Results for ' + model_string[:10])\n    print(cross_validation_test(item,  X, y, 'neg_mean_squared_error', 5))","1e4c0bd6":"results_dt_rf_pred_train = pd.DataFrame({'Actual': y_train, 'DT_Pred': y_pred_dt,'DT_Tuned_Pred': y_pred_dt_tuned,'RF_Pred': y_pred_rf, 'RF_Tuned_Pred': y_pred_rf_tuned})","235baec4":"results_dt_rf_pred_train[['Actual', 'DT_Pred', 'DT_Tuned_Pred','RF_Tuned_Pred', 'RF_Pred']].plot(figsize=(15,7), style={'Actual': '-or', 'DT_Pred': '-ob','DT_Tuned_Pred': '-oy','RF_Pred': '-og', 'RF_Tuned_Pred': '-om'})","c7627d76":"results_dt_rf_pred_train.boxplot()","e435ce33":"results_dt_rf_pred_test = pd.DataFrame({'Actual': y_test, 'DT_Pred': dt.predict(X_test),'DT_Tuned_Pred': dt_tuned.predict(X_test), 'RF_Pred': rf.predict(X_test), 'RF_Tuned_Pred': rf_tuned.predict(X_test)})","7a359c94":"results_dt_rf_pred_test.describe()","abfb86c5":"results_dt_rf_pred_test.boxplot()","045905ce":"results_dt_rf_pred_test[['Actual', 'DT_Pred', 'RF_Pred', 'RF_Tuned_Pred']].plot(figsize=(15,7), style={'Actual': '-or', 'DT_Pred': '-ob', 'RF_Pred': '-oy', 'RF_Tuned_Pred': '-og'}, grid=True)","67b96f8b":"results_dt_rf_pred_train.to_pickle('results_dt_rf_pred_train.pkl')","cfba8306":"results_dt_rf_pred_test.to_pickle('results_dt_rf_pred_test.pkl')","f6cd4e91":"### Let run cross validation\n- All models have a little of a variance problem","2a651e0c":"### Look at the results in graphs","0f97ef4d":"### Get the RMSE and scores for all model","4273735a":"### Used a grid search to tuned the decision tree regressor\n- Need to have in mind that when tuning a decision tree we can create an over fitter model","0d155008":"### Random forest and decision tree","6b2beed4":"### Let's also fit a model with Random Forest and compare","7b801ca9":"### Find the best parametors for the random forest","15e85378":"### Conclusion\n- The results for all the models are very similar\n- The decision tress and random forest tuned are able to predict correctly bank holidays\n- All models underestimates days with really high sales\n- In general results are very similar to the linear regression models"}}