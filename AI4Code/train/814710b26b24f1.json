{"cell_type":{"26865cb5":"code","2ffa8666":"code","307816f3":"code","44623270":"code","4a48c22e":"code","a075d5ef":"code","85c0d594":"code","cc6fa15c":"markdown","f25e0960":"markdown","c67d13d5":"markdown","300c1b10":"markdown","b78a1938":"markdown","9d15a744":"markdown","82b75669":"markdown"},"source":{"26865cb5":"import pandas as pd\nimport numpy  as np\n\nimport matplotlib.pyplot as plt\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.filterwarnings('ignore')","2ffa8666":"#===========================================================================\n# read in the data\n#===========================================================================\ntrain_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data  = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\n#===========================================================================\n# select the two most important features from Boruta-SHAP\n#===========================================================================\nfeatures = ['OverallQual' , 'GrLivArea']\n\nX_train = train_data[features]\ny_train = train_data[\"SalePrice\"]\nX_test  = test_data[features]","307816f3":"#===========================================================================\n# The model for OverallQual\n#===========================================================================\nfit = (np.polyfit(X_train['OverallQual'], np.log(y_train), 1))\nA = np.exp(fit[1])\nB = fit[0]\nOverallQual_fit = (A*np.exp(B*X_test['OverallQual']))","44623270":"#===========================================================================\n# The model for GrLivArea\n#===========================================================================\nfit = (np.polyfit(X_train['GrLivArea'], y_train, 1 ))\nc = fit[1]\nm = fit[0]\nGrLivArea_fit = (m*X_test['GrLivArea'] + c)","4a48c22e":"fig_1 = px.scatter(X_train, x=X_train['OverallQual'], y=y_train, marginal_y=\"violin\", marginal_x=\"box\",\n                   labels={\"x\": \"OverallQual\",\"y\": \"SalePrice\"},title=(\"House Prices data\"))\nx = np.linspace(0,10,20)\ny = A*np.exp(B*x)\nfig_1.add_scatter(x=x, y=y)\nfig_1.show()\nfig_2 = px.scatter(X_train, x=X_train['GrLivArea'], y=y_train, marginal_y=\"violin\", marginal_x=\"box\",\n                  labels={\"x\": \"GrLivArea\",\"y\": \"SalePrice\"})\nx = np.linspace(0,6000,2)\ny = m*x + c\nfig_2.add_scatter(x=x, y=y)\nfig_2.show();","a075d5ef":"fig = go.Figure()\n# scatter plot\nfig = px.scatter_3d(x=X_train['OverallQual'],y=X_train['GrLivArea'],z=y_train, \n                    title=\"House Prices data\",\n                    labels={\"x\": \"OverallQual\",\"y\": \"GrLivArea\",\"z\": \"SalePrice\"})\nfig.update_traces(marker=dict(size=1.5))\n# surface plot\nX = np.linspace(0,   10, 20)\nY = np.linspace(0, 6000, 20)\nX, Y = np.meshgrid(X, Y)\nZ = ((A*np.exp(B*X)) + (m*Y + c))\/2.0\nfig.add_traces(go.Surface(x=X, y=Y, z=Z, showscale=False, opacity=0.5))\n# set the initial camera location\ncamera = dict(up=dict(x=0, y=0, z=1),center=dict(x=0, y=0, z=0),eye=dict(x=1.3, y=-1.9, z=0.4))\nfig.update_layout(scene_camera=camera)\nfig.show()","85c0d594":"#===========================================================================\n# write out CSV submission file\n#===========================================================================\nX_test['y_pred'] = (OverallQual_fit + GrLivArea_fit)\/2\noutput = pd.DataFrame({\"Id\":test_data.Id, \"SalePrice\":X_test['y_pred']})\noutput.to_csv('submission.csv', index=False)","cc6fa15c":"## GrLivArea\nFor the `GrLivArea` variable we shall go with a fit to a straight line $(y = mx +c)$:","f25e0960":"## OverallQual\nFirst we shall make a simple fit to the `OverallQual` variable. I have studied this variable before in my notebook [\"House Prices: my score using only 'OverallQual'\"](https:\/\/www.kaggle.com\/carlmcbrideellis\/house-prices-my-score-using-only-overallqual) where we arrived at the conclusion that a simple exponential fit $(y = A\\exp(Bx))$ was not too bad:","c67d13d5":"giving us a score of \n![image.png](attachment:image.png)","300c1b10":"and let us take a look at the two variables together, along with the our fitted `SalePrice` surface, by using an interactive 3D plot (thanks to [Plotly Express](https:\/\/plotly.com\/python\/plotly-express\/))","b78a1938":"# House Prices: A simple two variable model\nAfter performing [feature selection using Boruta-SHAP](https:\/\/www.kaggle.com\/carlmcbrideellis\/feature-selection-using-borutashap) the two most influential features in the [House Prices dataset](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques) were deemed to be `OverallQual` and `GrLivArea`.\nHere we shall use these two features to produce a very simple model.","9d15a744":"## Plots\nLet us take a look at the training data along with our two fits:","82b75669":"Finally we shall produce a `submission.csv` for this simple two variable model"}}