{"cell_type":{"03ef113f":"code","8761e07e":"code","90fc85df":"code","c4fc50ed":"code","977e945b":"code","3024cbbf":"code","42c79481":"code","3a6378c3":"code","bf143662":"code","a0025562":"code","c02ca466":"code","0e404eb9":"code","598bd69c":"code","4649c0a9":"code","468926be":"code","87256685":"code","f44f3f68":"code","ac10b543":"code","6cb3a9cd":"code","0b034a29":"code","c7edd458":"code","39365d66":"code","a1502ff1":"code","d22c00bd":"code","b8dacb3d":"code","026fe16c":"code","73978f72":"code","fa0d3b84":"code","6becc926":"code","4f6b7664":"code","1abc4a35":"code","fae27550":"code","d8b24b44":"code","648779c1":"code","e5bcfcc8":"code","ea7a37f1":"code","e677b5a6":"code","99d7b241":"code","1fd8ec9b":"code","5c0d949f":"code","ef655efc":"code","f6a0a9dd":"code","f1eb7d5b":"code","52d365da":"code","2632493d":"code","5c41361b":"code","159ba270":"code","8a945700":"code","8fae3c88":"code","a205042c":"code","4b1b9185":"code","a266f834":"markdown","ad63b9ed":"markdown","6a736613":"markdown","1727f022":"markdown","ba332fb3":"markdown","69e56fa0":"markdown","df2112db":"markdown","4f820978":"markdown","3af4d347":"markdown","3d9174d3":"markdown","70db41dd":"markdown","6f95bbd8":"markdown","06cff373":"markdown","ab062850":"markdown","f3426895":"markdown","5b28db06":"markdown","d560419c":"markdown","ff426b52":"markdown","95481d9f":"markdown","eff92e8d":"markdown","858dea5d":"markdown","5d045013":"markdown","5c958925":"markdown","20748f45":"markdown","25929b0d":"markdown","eec71359":"markdown","4ae75cbf":"markdown","acfc1d11":"markdown","b2409692":"markdown","6c702c27":"markdown","436e36f5":"markdown","5e8dede9":"markdown","bcd83acb":"markdown","63d412af":"markdown"},"source":{"03ef113f":"# DATA HANDLING \nimport pandas as pd\nimport numpy as np\nimport datetime\nimport operator\nfrom math import pi\n\n#VISUALISATION\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport seaborn as sns\nimport folium\nfrom plotly.offline import init_notebook_mode,iplot\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.express as ex\nfrom bokeh.models import BoxAnnotation, LabelSet\nfrom bokeh.layouts import row,column\nfrom bokeh.palettes import Spectral4\nfrom bokeh.plotting import figure,show, output_notebook, ColumnDataSource\noutput_notebook()\nfrom IPython.core.display import HTML\nimport warnings\nwarnings.filterwarnings('ignore')\nsns.set_style('whitegrid')\n\n# LEARNING MODELS\nfrom statsmodels.tsa.stattools import acf,pacf\nimport statsmodels.tsa.stattools as ts\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.ar_model import AR\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split, train_test_split,RandomizedSearchCV\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.tree import DecisionTreeRegressor\n\nimport os\n","8761e07e":"def parser(x):\n    return datetime.datetime.strptime(x,'%d-%m-%Y')\n\ndata_frame =pd.read_csv( '..\/input\/covid19india\/covid_19_india.csv')\ndata_frame_horizontal = pd.read_csv('..\/input\/covid19india\/covid-hori.csv')\ndf_census =  pd.read_csv('..\/input\/covid19india\/population_india_census2011.csv')\ndf_labs = pd.read_csv('..\/input\/covid19india\/ICMRTestingLabs.csv')\ndf_age = pd.read_csv('..\/input\/covid19india\/AgeGroupDetails.csv')\ndf_hospitals = pd.read_csv('..\/input\/covid19india\/HospitalBedsIndia.csv')\ndf_MSE = pd.DataFrame()\ndf_future_predictions = pd.DataFrame()\narima_df = pd.read_csv('..\/input\/tempted\/new vertical.csv',index_col=[0],parse_dates=[0],date_parser=parser)\nworld_df = pd.read_csv('..\/input\/tempted\/covid_19_clean_complete.csv')\n\ndata_frame_vertical = pd.read_csv('..\/input\/tempted\/new vertical.csv',index_col=[0],parse_dates=[0],date_parser=parser)\nworld_data= pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/04-21-2020.csv')\ntime_series_df=pd.read_csv('..\/input\/tempted\/new vertical.csv')\n\ntable = data_frame.copy()\ntable.groupby('Date')['Confirmed','Deaths','Cured'].sum().reset_index()","90fc85df":"world_df.groupby('Date')['Confirmed','Deaths','Recovered'].sum().reset_index()\nworld_df['Active'] = world_df['Confirmed']- world_df['Deaths'] - world_df['Recovered']\nworld_df.groupby('Country\/Region').max().reset_index()\nworld_df['Mortality Rate'] = (world_df['Deaths']\/world_df['Confirmed'].sum())*100\nworld_df['Recovery Rate'] = (world_df['Recovered']\/world_df['Confirmed'].sum())*100\nunique_countries =  list(world_data['Country_Region'].unique())\n","c4fc50ed":"table['Active'] = table['Confirmed'] - table['Deaths'] - table['Cured']\n\ncurrent_date = table['Date'] > '2020-02-17'\nstate_wise_cases = table.groupby('State\/UnionTerritory').max().reset_index()\n\n\nstate_wise_cases =  state_wise_cases[state_wise_cases.Active!=77]\nstate_wise_cases =  state_wise_cases[state_wise_cases.Confirmed!=0]\nstate_wise_cases['Mortality Rate']= (state_wise_cases['Deaths']\/state_wise_cases['Confirmed'].sum())*100\nstate_wise_cases['Recovery Rate']= (state_wise_cases['Cured']\/state_wise_cases['Confirmed'].sum())*100\n","977e945b":"total_cases=[]\ntotal_deaths=[]\ntotal_cured=[]\ntotal_active=[]\n\nj=0\ndates = data_frame_horizontal.keys()\nfor i in dates:\n    total_cases.append(data_frame_horizontal.iat[0,j])\n    total_deaths.append(data_frame_horizontal.iat[1,j])\n    total_cured.append(data_frame_horizontal.iat[2,j])\n    total_active.append(data_frame_horizontal.iat[3,j])\n    \n    j+=1\n\n\ndays_since_1_30 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nindia_total_cases = np.array(total_cases).reshape(-1, 1)\nupcoming_days = 10\nfuture_forecast = np.array([i for i in range(len(dates)+upcoming_days)]).reshape(-1, 1)\nadjusted_dates = future_forecast[:-10]\n\nstart = '1\/30\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forecast_dates = []\nfor i in range(len(future_forecast)):\n    future_forecast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))\n","3024cbbf":"confirmed_world = []\ndeath_world = [] \nactive_world = []\nrecovery_world = []\nmortality_world = [] \n\nno_cases = []\nfor i in unique_countries:\n    cases = world_data[world_data['Country_Region']==i]['Confirmed'].sum()\n    if cases > 0:\n        confirmed_world.append(cases)\n    else:\n        no_cases.append(i)\n        \nfor i in no_cases:\n    unique_countries.remove(i)\n    \n# sort countries by the number of confirmed cases\nunique_countries = [k for k, v in sorted(zip(unique_countries,confirmed_world), key=operator.itemgetter(1), reverse=True)]\nfor i in range(len(unique_countries)):\n    confirmed_world[i] = world_data[world_data['Country_Region']==unique_countries[i]]['Confirmed'].sum()\n    death_world.append(world_data[world_data['Country_Region']==unique_countries[i]]['Deaths'].sum())\n    recovery_world.append(world_data[world_data['Country_Region']==unique_countries[i]]['Recovered'].sum())\n    active_world.append(confirmed_world[i] - death_world[i] - recovery_world[i])\n    mortality_world.append(death_world[i]\/confirmed_world[i])","42c79481":"HTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/2042788\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/2042788\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","3a6378c3":"\ncountry_df = pd.DataFrame({'Country Name': unique_countries, 'Number of Confirmed Cases': confirmed_world,\n                          'Number of Deaths': death_world, 'Number of Recoveries' : recovery_world, \n                          'Number of Active Cases' : active_world,\n                          'Mortality Rate': mortality_world})\ncountry_df.style.background_gradient(cmap=cm.get_cmap('Spectral'))","bf143662":"# TABLE REPRESENTATION\ntemp_df= state_wise_cases.sort_values('Confirmed', ascending=False)\ntemp_df.drop(['ConfirmedIndianNational','ConfirmedForeignNational','Sno', 'Date','Time'], axis=1, inplace=True) \ntemp_df.style.background_gradient(cmap='Purples', subset='Confirmed')\\\n    .background_gradient(cmap='Greens', subset='Deaths')\\\n    .background_gradient(cmap='BuPu', subset='Cured')\\\n    .background_gradient(cmap='Reds', subset='Active')\\\n    .background_gradient(cmap='PuBuGn', subset='Mortality Rate')\\\n    .background_gradient(cmap='YlOrBr', subset='Recovery Rate') ","a0025562":"print(\"Total Confirmed cases: \",state_wise_cases['Confirmed'].sum())\nprint(\"Total Number of Deaths: \", state_wise_cases['Deaths'].sum())\nprint(\"Total Number of patients Recovered: \", state_wise_cases['Cured'].sum())\nprint(\"Total Number of Active Cases: \", state_wise_cases['Active'].sum())","c02ca466":"# BARPLOTS FOR STATE WISE REPRESENTATION\nfig = px.bar(state_wise_cases.sort_values('Confirmed', ascending= False).sort_values('Confirmed', ascending=False), \n             color='State\/UnionTerritory',\n             x=\"Confirmed\", y=\"State\/UnionTerritory\", \n             title='Total Confirmed Cases', \n             text='Confirmed', \n             orientation='h', \n             width=800, height=1000,color_discrete_sequence = ex.colors.cyclical.Phase)\nfig.update_layout(plot_bgcolor='rgb(275, 260, 265)')\n#fig.update_traces(marker_color='#0077ff', opacity=0.8, textposition='inside')\n\n#fig.update_layout(template = 'plotly_white')\nfig.show()\n","0e404eb9":"fig = px.bar(state_wise_cases.sort_values('Deaths', ascending= False).sort_values('Deaths', ascending=False), \n             color='State\/UnionTerritory',\n             x=\"Deaths\", y=\"State\/UnionTerritory\", \n             title='Fatalities For Different States', \n             text='Deaths', \n             orientation='h', \n             width=800, height=1000,color_discrete_sequence = ex.colors.cyclical.Phase)\nfig.update_layout(plot_bgcolor='rgb(280, 270, 275)')\nfig.show()","598bd69c":"fig = px.bar(state_wise_cases.sort_values('Cured', ascending= False).sort_values('Cured', ascending=False), \n             color='State\/UnionTerritory',\n             x=\"Cured\", y=\"State\/UnionTerritory\", \n             title='Patients Recovered', \n             text='Cured', \n             orientation='h', \n             width=800, height=1000,color_discrete_sequence = ex.colors.cyclical.Phase)\nfig.update_layout(plot_bgcolor='rgb(275, 260, 265)')\nfig.show()","4649c0a9":"# BARPLOT\nfig = px.bar(state_wise_cases.sort_values('Recovery Rate', ascending= False).sort_values('Recovery Rate', ascending=False), \n             color='State\/UnionTerritory',\n             x=\"Recovery Rate\", y=\"State\/UnionTerritory\", \n             title='Recovery Rate For Different States', \n             text='Recovery Rate', \n             orientation='h', \n             width=800, height=1000,color_discrete_sequence = ex.colors.cyclical.Phase)\nfig.update_layout(plot_bgcolor='rgb(275, 260, 265)')\nfig.show()","468926be":"len(total_cases)\ns = '#442288'\nh = '#6CA2EA'\ne = '#B5D33D'\nm = '#FED23F'\nc = '#EB7D5B'\nsec = [s, e, c]\ndates = future_forecast_dates[0:84]\nfig = px.line(x=dates, y=total_cases, \n             title='No. of cases',\n             color_discrete_sequence = sec)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","87256685":"# LINE PLOT \nadjusted_dates = adjusted_dates.reshape(1, -1)[0]\nplt.figure(figsize=(16, 9))\nx=[20,25,30,35,40,45,50,55,60,65,70,75,80,85,90]\nplt.plot(adjusted_dates, india_total_cases,color='r',marker='*')\nplt.plot(adjusted_dates,total_active,marker='^')\nplt.plot(adjusted_dates, total_cured,marker='+')\nplt.plot(adjusted_dates,total_deaths)\nplt.title('Confirmed Cases over Time', size=30)\nplt.xlabel('Since 1\/30\/2020', size=30)\nplt.ylabel('No.of Cases', size=30)\nplt.legend(['Confirmed Cases', 'Active Cases','Deaths','Cured'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","f44f3f68":"# HORIZONTAL BAR PLOT\nplt.figure(figsize=(16, 9))\nplt.barh('Confirmed Cases',state_wise_cases['Confirmed'].sum())\nplt.barh('Active Cases', state_wise_cases['Active'].sum())\nplt.barh('Deaths',state_wise_cases['Deaths'].sum())\nplt.barh('Cured',state_wise_cases['Cured'].sum())\nplt.title('# of Coronavirus Confirmed Cases', size=20)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","ac10b543":"df_india=temp_df.copy()\nlat = {'Delhi':28.7041,\n       'Haryana':29.0588,\n       'Kerala':10.8505,\n       'Rajasthan':27.0238,\n       'Telengana':18.1124,\n       'Uttar Pradesh':26.8467,\n       'Ladakh':34.2996,\n       'Tamil Nadu':11.1271,\n       'Jammu and Kashmir':33.7782,\n       'Punjab':31.1471,\n       'Karnataka':15.3173,\n       'Maharashtra':19.7515,\n       'Andhra Pradesh':15.9129, \n       'Odisha':20.9517, \n       'Uttarakhand':30.0668, \n       'West Bengal':22.9868, \n       'Puducherry': 11.9416, \n       'Chandigarh': 30.7333, \n       'Chhattisgarh':21.2787, \n       'Gujarat': 22.2587, \n       'Himachal Pradesh': 31.1048, \n       'Madhya Pradesh': 22.9734, \n       'Bihar': 25.0961, \n       'Manipur':24.6637,\n       'Mizoram':23.1645,\n        'Goa':15.2993,\n     'Andaman and Nicobar Islands':11.7401,\n      \"Jharkhand\" : 23.6102,\n      'Arunachal Pradesh': 28.2180,\n      'Assam' : 26.2006,\n      'Tripura':23.9408,\n      'Meghalaya':25.4670,\n      'Nagaland':26.1584}\n\nlong = {'Delhi':77.1025,\n        'Haryana':76.0856,\n        'Kerala':76.2711,\n        'Rajasthan':74.2179,\n        'Telengana':79.0193,\n        'Uttar Pradesh':80.9462,\n        'Ladakh':78.2932,\n        'Tamil Nadu':78.6569,\n        'Jammu and Kashmir':76.5762,\n        'Punjab':75.3412,\n        'Karnataka':75.7139,\n        'Maharashtra':75.7139,\n        'Andhra Pradesh':79.7400, \n        'Odisha':85.0985, \n        'Uttarakhand':79.0193, \n        'West Bengal':87.8550, \n        'Puducherry': 79.8083, \n        'Chandigarh': 76.7794, \n        'Chhattisgarh':81.8661, \n        'Gujarat': 71.1924, \n        'Himachal Pradesh': 77.1734, \n        'Madhya Pradesh': 78.6569, \n        'Bihar': 85.3131, \n        'Manipur':93.9063,\n        'Mizoram':92.9376,\n         'Goa':74.1240,\n        \"Jharkhand\" : 85.2799,\n       'Andaman and Nicobar Islands':92.6586,\n       'Arunachal Pradesh' :94.7278,\n        'Assam' : 92.9376,\n        'Tripura':91.9882,\n        'Meghalaya':91.3662,\n        'Nagaland':94.5624\n       }","6cb3a9cd":"df_india['Lat'] = df_india['State\/UnionTerritory'].map(lat)\ndf_india['Long'] = df_india['State\/UnionTerritory'].map(long)\n#df_india.isnull()","0b034a29":"# INDIA MAP ANIMATION\ninit_notebook_mode(connected=True)\nmap_df = data_frame.copy()\nmap_df.head()\nmap_df['Lat'] = map_df['State\/UnionTerritory'].map(lat)\nmap_df['Long'] = map_df['State\/UnionTerritory'].map(long)\nmap_df.isnull()\nfig = px.scatter_geo(map_df,lat=\"Lat\", lon=\"Long\", color='Confirmed', size='Confirmed',\n                     projection=\"hammer\",\n                     hover_name=\"State\/UnionTerritory\", scope='asia', animation_frame=\"Date\",\n                     color_continuous_scale=px.colors.sequential.Plasma,\n                     center={'lat':26, 'lon':80}, \n                     range_color=[0, max(map_df['Confirmed'])]\n                    )\nfig.show()","c7edd458":"_map = folium.Map(location=[23,80], tiles=\"OpenStreetMap\",max_zoom=20,min_zoom=4,zoom_start=4)\n\nfor lat, lon, value, name in zip(df_india['Lat'], df_india['Long'], df_india['Confirmed'], df_india['State\/UnionTerritory']):\n    folium.CircleMarker([lat, lon],\n                        radius= (int((np.log(value+1.00001))))*3,\n                        popup = ('<strong>States<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='#ff6600',\n                        \n                        fill_color='#66FF03',\n                        fill_opacity=0.5 ).add_to(_map)\n  \n_map","39365d66":"# FLOURISH TIMELINE ANIMATION\nHTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1997709\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1997709\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')\n","a1502ff1":"val =df_age[\"Percentage\"]\nfor i in range(0,10):\n               val[i]=val[i][0:len(val[i])-1]\nval=np.array(val)              \nfig=px.pie(df_age,values=val,names='AgeGroup')\ncolors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen']\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(title='AGE DISTRIBUTION FOR CONFIRMED CASES')\nfig.show()","d22c00bd":"df_hospitals['Hospitals']=df_hospitals['NumSubDistrictHospitals_HMIS']+df_hospitals['NumRuralHospitals_NHP18']+df_hospitals['NumDistrictHospitals_HMIS'] + df_hospitals['NumUrbanHospitals_NHP18']\ndf_hospitals['Beds'] = df_hospitals['NumPublicBeds_HMIS']+df_hospitals['NumRuralBeds_NHP18']+df_hospitals['NumUrbanBeds_NHP18']\ndf_hospitals.drop(['NumSubDistrictHospitals_HMIS','NumRuralHospitals_NHP18','NumDistrictHospitals_HMIS','NumUrbanHospitals_NHP18','NumPublicBeds_HMIS','NumRuralBeds_NHP18','NumUrbanBeds_NHP18'],axis=1,inplace=True)\ndf_hospitals.head()             \ndf_hospitals.rename(columns = {'NumPrimaryHealthCenters_HMIS':'Primary Health Centers','NumCommunityHealthCenters_HMIS':'Community Health Centers','TotalPublicHealthFacilities_HMIS':'Other Public Facilities'}, inplace = True) \n\n\n","b8dacb3d":"\ndf_hospitals.dropna()\ndf_hospitals['Total']=df_hospitals['Primary Health Centers']+df_hospitals['Community Health Centers']+df_hospitals['Other Public Facilities']+df_hospitals['Hospitals']+df_hospitals['Beds']","026fe16c":"df_hospitals= df_hospitals.sort_values('Total', ascending=False)\ndf_hospitals=df_hospitals[0:36]\ndf_hospitals.style.background_gradient(cmap='Purples', subset='Hospitals')\\\n    .background_gradient(cmap='Greens', subset='Beds')\\\n    .background_gradient(cmap='BuPu', subset='Primary Health Centers')\\\n    .background_gradient(cmap='Reds', subset='Community Health Centers')\\\n    .background_gradient(cmap='PuBuGn', subset='Other Public Facilities')\\\n    .background_gradient(cmap='YlOrBr', subset='Total') ","73978f72":"df_census.rename(columns={\n    \"State \/ Union Territory\": \"state\",\n    \"Population\": \"population\",\n    \"Urban population\": \"urban_population\",\n    \"Gender Ratio\": \"gender_ratio\"}, inplace = True)\n\ndf_census['Area']= df_census.Area.astype(str).str.replace(\",\",\"\").str.split(\"km\").str[0].astype(int)\n\ndf_state = df_labs.groupby('state')['lab'].count().reset_index().rename(columns={'lab':'labs'}).merge(df_census, on ='state')\ndf_state['people_per_lab'] = df_state.population\/df_state.labs\ndf_state['area_per_lab'] = df_state.Area \/df_state.labs\n\ndf_state_lab = pd.pivot_table(df_labs, values ='lab', index = 'state', columns='type',aggfunc='count', fill_value=0).reset_index()\ndf_state_lab['labs']= df_state_lab.sum(axis=1)\ndf_state_lab=df_state_lab.sort_values('labs', ascending=False).head(10)\n\ndf_city_lab = pd.pivot_table(df_labs, values ='lab', index = 'city', columns='type',aggfunc='count', fill_value=0).reset_index()\ndf_city_lab['labs']= df_city_lab.sum(axis=1)\ndf_city_lab=df_city_lab.sort_values('labs', ascending=False).head(10)","fa0d3b84":"source_1 = {\n    \"state\": df_state_lab.state.values,\n    \"Government Laboratory\": df_state_lab[\"Government Laboratory\"].values,\n    \"Private Laboratory\": df_state_lab[\"Private Laboratory\"].values,\n    \"Collection Site\": df_state_lab[\"Collection Site\"].values\n}\n\ntypes = [\"Government Laboratory\", \"Private Laboratory\", \"Collection Site\"]\n\nv1 = figure(plot_width = 400, plot_height = 400, x_range = source_1[\"state\"], title = \"Top States with Testing Laboratories\")\nv1.vbar_stack(types, x = \"state\", width = 0.81, color = ['yellow','blue','red'], source = source_1, legend_label = types)\nv1.xaxis.major_label_orientation = pi \/ 6\nv1.legend.label_text_font_size = \"5pt\"\n\nsource_2 = {\n    \"city\": df_city_lab.city.values,\n    \"Government Laboratory\": df_city_lab[\"Government Laboratory\"].values,\n    \"Private Laboratory\": df_city_lab[\"Private Laboratory\"].values,\n    \"Collection Site\": df_city_lab[\"Collection Site\"].values\n}\n\nv2 = figure(plot_width = 400, plot_height = 400, x_range = source_2[\"city\"], title = \"Top Cities with Testing Laboratories\")\nv2.vbar_stack(types, x = \"city\", width = 0.81, color = ['yellow','blue','red'], source = source_2, legend_label = types)\nv2.xaxis.major_label_orientation = pi \/ 6\nv2.legend.label_text_font_size = \"5pt\"\n\nsource_3 = ColumnDataSource(data = dict(\n    state = df_state.state.values,\n    labs = df_state.labs.values,\n    people_per_lab = df_state.people_per_lab.values \/ 1000000,\n    area_per_lab = df_state.area_per_lab.values \/ 1000\n))\n\ntooltips_3 = [\n    (\"State\", \"@state\"),\n    (\"Labs\", \"@labs\"),\n    (\"People per Lab\", \"@people_per_lab{0.00} M\"),\n    (\"Area per Lab\", \"@area_per_lab{0.00} K\")\n]\n\nh_mid = max(df_state.area_per_lab.values \/ 1000) \/ 2\nv_mid = max(df_state.people_per_lab.values \/ 1000000) \/ 2\n\nsource_labels = ColumnDataSource(data = dict(\n    state = df_state[(df_state.people_per_lab >= v_mid * 1000000) | (df_state.area_per_lab >= h_mid * 1000)].state.values,\n    people_per_lab = df_state[(df_state.people_per_lab >= v_mid * 1000000) | (df_state.area_per_lab >= h_mid * 1000)].people_per_lab.values \/ 1000000,\n    area_per_lab = df_state[(df_state.people_per_lab >= v_mid * 1000000) | (df_state.area_per_lab >= h_mid * 1000)].area_per_lab.values \/ 1000\n))\n\nlabels = LabelSet(x = \"people_per_lab\", y = \"area_per_lab\", text = \"state\", source = source_labels, level = \"glyph\", x_offset = -19, y_offset = -23, render_mode = \"canvas\")\n\nv3 = figure(plot_width = 600, plot_height = 600, tooltips = tooltips_3, title = \"People and Area per Lab by State\")\nv3.circle(\"people_per_lab\", \"area_per_lab\", source = source_3, size = 13, color = \"red\", alpha = 0.41)\n\ntl_box = BoxAnnotation(right = v_mid, bottom = h_mid, fill_alpha = 0.1, fill_color = \"blue\")\ntr_box = BoxAnnotation(left = v_mid, bottom = h_mid, fill_alpha = 0.1, fill_color = \"green\")\nbl_box = BoxAnnotation(right = v_mid, top = h_mid, fill_alpha = 0.1, fill_color = \"pink\")\nbr_box = BoxAnnotation(left = v_mid, top = h_mid, fill_alpha = 0.1, fill_color = \"yellow\")\n\nv3.add_layout(tl_box)\nv3.add_layout(tr_box)\nv3.add_layout(bl_box)\nv3.add_layout(br_box)\n\nv3.add_layout(labels)\n\nv3.xaxis.axis_label = \"People per Lab (in Million)\"\nv3.yaxis.axis_label = \"Area per Lab (in Thousand sq km)\"\n\nshow(row(v1, v2))","6becc926":"HTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/2026973\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/2026973\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","4f6b7664":"show(v3)","1abc4a35":"X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_30, india_total_cases, test_size=0.15, shuffle=False) \n","fae27550":"# SUPPORT VECTOR REGRESSOR\n'''c = [0.01, 0.1,0.2,0.5, 1]\ngamma = [0.01, 0.1, 1]\nepsilon = [0.01, 0.1, 1]\nshrinking = [True, False]\ndegree = [3, 4, 5, 6, 7]\nsvm = SVR(kernel='poly')\nsvm_grid = {'C': c, 'gamma' : gamma, 'epsilon': epsilon, 'shrinking' : shrinking, 'degree': degree}\n\nsvm = SVR(kernel='poly')\nsvm_confirmed = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=5, verbose=1)\nsvm_confirmed.fit(X_train_confirmed, y_train_confirmed)'''\n# Above code if for finding best parametters and can take long time w.r.t size of dataset.\n\nsvm_confirmed = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=9, C=0.00001)\nsvm_confirmed.fit(X_train_confirmed, y_train_confirmed)\nsvm_pred = svm_confirmed.predict(future_forecast)","d8b24b44":"svm_test_pred = svm_confirmed.predict(X_test_confirmed)\n# mean squared and absolute error\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test_confirmed))\n","648779c1":"# FUTURE PREDICTION TABLE SVM\nplt.plot(y_test_confirmed)\nplt.plot(svm_test_pred)\nplt.legend(['Test Data', 'SVM Predictions'])\nsvm_df = pd.DataFrame({'Date': future_forecast_dates[-11:], 'SVM Predicted # of Confirmed Cases Worldwide': np.round(svm_pred[-11:])})\nprint(svm_df)\ndf_future_predictions['Dates'] = future_forecast_dates[-11:]\ndf_future_predictions['SVR Predcitions'] = np.round(svm_pred[-11:])\ndf_MSE['SVR']=mean_squared_error(svm_test_pred, y_test_confirmed)","e5bcfcc8":"# SVM PLOT (ORIGNAL VS PREDICTED) VALUE\nadjusted_dates = adjusted_dates.reshape(1, -1)[0]\nplt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, india_total_cases)\nplt.plot(future_forecast, svm_pred, linestyle='dashed', color='red')\nplt.title('Number of Covid Cases Over Time', size=30)\nplt.xlabel('Since 1\/30\/2020', size=30)\nplt.ylabel('Number of Cases', size=30)\nplt.legend(['Confirmed Cases', 'SVM predictions'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","ea7a37f1":"#POLYNOMIAL REGRESSION\npoly = PolynomialFeatures(degree=5)\npoly_X_train_confirmed = poly.fit_transform(X_train_confirmed)\npoly_X_test_confirmed = poly.fit_transform(X_test_confirmed)\npoly_future_forecast = poly.fit_transform(future_forecast)\n\nlinear_model = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model.fit(poly_X_train_confirmed, y_train_confirmed)\ntest_linear_pred = linear_model.predict(poly_X_test_confirmed)\nlinear_pred = linear_model.predict(poly_future_forecast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_confirmed))","e677b5a6":"#FUTURE PREDICTION TABLE\nprint(linear_model.coef_)\n\nplt.plot(y_test_confirmed)\nplt.plot(test_linear_pred)\nplt.legend(['Test Data', 'Polynomial Regression Predictions'])\n\nlinear_pred = linear_pred.reshape(1,-1)[0]\nLinear_reg_future = pd.DataFrame({'Date': future_forecast_dates[-11:], 'Polynomial Predicted # of Confirmed Cases Worldwide': np.round(linear_pred[-11:])})\nprint(Linear_reg_future)\ndf_future_predictions['Polynomial Regression'] = np.round(linear_pred[-11:])\n","99d7b241":"# POLYNOMIAL REGRESSION (ORGINAL VS FUTURE)PLOT\nplt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, total_cases)\nplt.plot(future_forecast, linear_pred, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'Polynomial Regression Predictions'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","1fd8ec9b":"#BAYESIAN RIDGE\ntol = [1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4]\n\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2}\n\nbayesian = BayesianRidge(fit_intercept=False, normalize=True)\nbayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search.fit(poly_X_train_confirmed, y_train_confirmed)\nbayesian_search.best_params_","5c0d949f":"bayesian_confirmed = bayesian_search.best_estimator_\ntest_bayesian_pred = bayesian_confirmed.predict(poly_X_test_confirmed)\nbayesian_pred = bayesian_confirmed.predict(poly_future_forecast)\nprint('MAE:', mean_absolute_error(test_bayesian_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_bayesian_pred, y_test_confirmed))\n\nplt.plot(y_test_confirmed)\nplt.plot(test_bayesian_pred)\nplt.legend(['Test Data', 'Bayesian Ridge Polynomial Predictions'])","ef655efc":"#FUTURE PREDICTIONS\nBayesian_future_df = pd.DataFrame({'Date': future_forecast_dates[-11:], 'Bayesian Ridge Predicted # of Confirmed Cases Worldwide': np.round(bayesian_pred[-11:])})\nprint(Bayesian_future_df)\ndf_future_predictions['Bayesian Ridge'] = np.round(bayesian_pred[-11:])","f6a0a9dd":"#BAYESIAN RIDGE (ORGINAL VS FUTURE) PLOT\nplt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, total_cases)\nplt.plot(future_forecast, bayesian_pred, linestyle='dashed', color='red')\nplt.title('Number of Covid Cases Over Time', size=30)\nplt.xlabel('Since 01\/30\/2020', size=30)\nplt.ylabel('Number of Cases', size=30)\nplt.legend(['Confirmed Cases', 'Bayesian Ridge Predictions'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n","f1eb7d5b":"print(df_future_predictions)\n","52d365da":"Confirmed_series = data_frame_vertical['Confirmed']\nConfirmed_series\nConfirmed_series =np.log(Confirmed_series)\nplt.plot(Confirmed_series)\nplt.title(\" log (Confirmed Cases )\")\nplt.show()","2632493d":"#AUTO CORRELATION\nacf_confirmed = acf(Confirmed_series)[1:20]\nacf_df =pd.DataFrame([acf_confirmed]).T # test_df=acf_df\nacf_df.columns = ['AutoCorrelation']\nacf_df.index +=1\nacf_df.plot(kind='bar', color='red')\nplt.show()\n\n\n#PARTIAL AUTOCORRELATION FUNCTION\npacf_confirmed = pacf(Confirmed_series)[1:20]\npacf_df = pd.DataFrame([pacf_confirmed]).T\npacf_df.columns = ['Partial AutoCorrelation']\npacf_df.index +=1\npacf_df.plot(kind='bar')\nplt.show()","5c41361b":"Confirmed_series_diff = Confirmed_series-Confirmed_series.shift()\nplt.plot(Confirmed_series_diff)\nplt.title(\"Shifted Series\")\nplt.show()\n\ndiff = Confirmed_series_diff.dropna()\nacf_diff = acf(diff)[1:30]\nacf_df = pd.DataFrame([acf_diff]).T\nacf_df.columns = ['First Difference Autocorrelation']\nacf_df.index +=1\nacf_df.plot(kind='bar')\npacf_diff = pacf(diff)[1:30]\nplt.plot(pacf_diff)\nplt.show()\n\nacf_df = pd.DataFrame([pacf_diff]).T\nacf_df.columns = ['First Difference Partial Autocorrelation']\nacf_df.index +=1\nacf_df.plot(kind='bar')\nplt.show()","159ba270":"# AUTOREGRESSIVE  MODEL (AR)\n\nX_train = arima_df.iloc[0:78]\nX_train=X_train['Confirmed']\nvalid= arima_df.iloc[78:]\ny_pred=valid.copy()\n#X_train = data_frame_vertical[0:70]\n#AR_prediction=[]\nAR_model = AR(X_train)\nAR_model_fit = AR_model.fit()\nprint(AR_model_fit.aic)\nAR_prediction = AR_model_fit.predict(start=70,end=80)\nplt.plot(AR_prediction,color='red')\nplt.plot(data_frame_vertical[70:])\nplt.ylim(2500,18000)\nplt.legend([\"AR MODEL PREDICTIONS\",\"ACTUAL CASES\"])\n","8a945700":"epidemic_cases = pd.DataFrame({\n    'Pandemic' : ['COVID-19', 'SARS', 'EBOLA', 'ZIKA', 'H1N1'],\n    'YEAR DISCOVERED(peak)' : [2019, 2003, 2014, 1947, 2009],\n    'Confirmed Cases' : [2416135, 8432, 28642, 58492, 6724149],\n    'FATALITIES' : [165939, 813, 11319, 11343, 19654],\n    'Countries Affected' : [210, 31, 10, 42, 178]\n})\n\nepidemic_cases['Mortality Rate'] = round((epidemic_cases['FATALITIES']\/epidemic_cases['Confirmed Cases'])*100, 2)\nepidemic_cases.head()","8fae3c88":"fig = px.bar(epidemic_cases.sort_values('FATALITIES',ascending=False), \n             y=\"FATALITIES\", x=\"Pandemic\", color='Pandemic', \n             text='FATALITIES', orientation='v', title='Deaths caused by each Pandemic',\n             #color='rgb(204,204, 205)'\n            )\nfig.update_traces(textposition='auto')\nfig.update_layout(uniformtext_minsize=10)\nfig.update_layout(paper_bgcolor='rgba(0,0,0,0)',plot_bgcolor='rgba(0,0,0,0)')\nfig.show()","a205042c":"fig = px.bar(epidemic_cases.sort_values('Countries Affected', ascending=False),\n             y=\"Pandemic\", x=\"Countries Affected\", color='Pandemic', \n             text='Countries Affected', orientation='h', title='Total Countries Affected', \n             range_x=[0,200])\nfig.update_traces(textposition='auto')\nfig.update_layout(uniformtext_minsize=10)\nfig.update_layout(paper_bgcolor='rgba(0,0,0,0)',plot_bgcolor='rgba(0,0,0,0)')\nfig.show()","4b1b9185":"HTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/2024423\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/2024423\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","a266f834":"# TESTING AND MEDICATION STATUS(*specific to india*)","ad63b9ed":"# VISUALISATION","6a736613":"**FUTURE PREDICTIONS USING BAYESIAN RIDGE**","1727f022":"**RESULT COMPARISION *SVM VS POLYNOMIAL REGRESSION VS BAYESIAN RIDGE***","ba332fb3":"**HOW MUCH COVID-19 AFFECTED DIFFERENT AGE GROUPS**","69e56fa0":"**HOW MANY TESTING EQUIPMENTS AND LABS ARE AVAILABLE FOR EACH STATE**","df2112db":"**CONFIRMED CASES STATE\/UNION-TERRITORY WISE**","4f820978":"![c5.jpg](attachment:c5.jpg)","3af4d347":"1. The *up-left* quadrant indicate that the states does not have ample number of labs as per the area distribution. Hence, having a test will \n2. The *up-right* quadrant indicate states having large  area as well as high number of labs per. They are badly affected by the virus but are well equipped to fight it.be much difficult for the people residing in states under this quadrant. \n3. The *bottom-right* quadrant indicate states with high population per lab. Carrying out rapid testing in states under this quadrant can be cumbersome.\n4. The *bottom-left* quadrant indicate states having low area as well as small number of lab. As for now they are going good but if these states are hit by large number of cases then testing them will be difficult. ","3d9174d3":"**IMPORTS**","70db41dd":"# CONCLUSION\nWith affecting more than 210 countries, Covid-19 currently have around 2.4 million cases worldwide. The precition via different machine learning models also support the argument that in the coming days the number of cases are likely to increase. There are very slight chances that INDIA may drift toward community spread but is the 3 week extension to the world's largest lockdown enough to stop the spread ?\n\nAnalysis and comparision with other pandemics shows that pandemics does not stay at their peak for much long but history also ponders light upon the fact that deleoping a effective vaccine for such pandemics is not an easy task. Fortunately every pandemic that attacked the human race was eventually washed out but we had to a price for that. So for the NOVEL COVID-19 the question that remains unanswered is-\n\n# **Are we any close in developing a vaccine for the virus or we just hope that the upcoming generation will automatically develop immunity against it as they land in this biological warfare ? **","6f95bbd8":"**How well equiped is each state in this fight againt COVID-19 in INDIA**","06cff373":"![c3.jpg](attachment:c3.jpg)","ab062850":"**The 2019\u201320 novel coronavirus pandemic is an ongoing pandemic of coronavirus disease 2019 (COVID-19) caused by severe acute respiratory syndrome coronavirus 2 (SARS\u2011CoV\u20112). The outbreak was identified in Wuhan, China, in December 2019. The World Health Organization declared the outbreak to be a Public Health Emergency of International Concern on 30 January 2020, and recognised it as a pandemic on 11 March 2020. As of 22 April 2020, more than 2.58 million cases of COVID-19 have been reported in 185 countries and territories, resulting in more than 178,000 deaths. More than 693,000 people have recovered, although there may be a possibility of relapse or reinfection.**\n\n**The first case of the 2019\u201320 coronavirus pandemic in India was reported on 30 January 2020. Experts suggest the number of infections could be much higher as India's testing rates are among the lowest in the world. The infection rate of COVID-19 in India is reported to be 1.7, significantly lower than in the worst affected countries.\nOn 24 March, the prime minister ordered a nationwide lockdown for 21 days, affecting the entire 1.3 billion population of India. On 14 April, the prime minister extended the ongoing nationwide lockdown till 3rd of May**","f3426895":"**RECOVERY RATE OF DIFFERENT STATES**","5b28db06":"# FUTURE PREDICTIONS VIA VARIOUS LEARNING MODELS","d560419c":"**ANIMATION FOR WORLD CONFIRMED CASES**","ff426b52":"**FUTURE PREDICTIONS USING POLYNOMIAL REGRESSION**","95481d9f":"**COMPLE WORLD STATISTICS**","eff92e8d":"**FITTING AUTOREGRESSION MODEL**","858dea5d":"# **IS COVID-19 THE ONLY EPIDEMIC THAT HUMANS HAVE ENCOUNTERED ?**\n\nWell it is not the case that the homo sapiens have encountered an epidemic for the first time. Covid-19 just marks the return of a very old \u2013 and familiar \u2013 enemy. Throughout history, nothing has killed more human beings than the viruses, bacteria and parasites that cause disease. Not natural disasters like earthquakes or volcanoes. Not war \u2013 not even close. Here is a breif insight on some of the most deadliest pandemic spreads of all time other than covid-19:\n\n# 1. **EBOLA virus**\n![ebola.jpg](attachment:ebola.jpg)\n\nIn 1976, Ebola (named after the Ebola River in Zaire) first emerged in Sudan and Zaire. The first outbreak of Ebola (Ebola-Sudan) infected over 284 people, with a mortality rate of 53%. The 2014\u20132016 outbreak in West Africa was the largest and most complex Ebola outbreak since the virus was first discovered in 1976, which resulted in at least 28,646 suspected cases and 11,323 confirmed deaths.\nIn December 2016, a study found the **VSV-EBOV** vaccine to be 70\u2013100% effective against the Ebola virus, making it the first vaccine against the disease.**VSV-EBOV** was approved by the U.S. Food and Drug Administration in December 2019.\n\n\n\n# 2. **SARS VIRUS**\n![sars.jpg](attachment:sars.jpg)\n\nSevere acute respiratory syndrome (SARS) is a viral respiratory disease of zoonotic origin that surfaced in the early 2000s caused by severe acute respiratory syndrome coronavirus (SARS-CoV or SARS-CoV-1). The syndrome caused the 2002\u20132004 SARS outbreak. In 2019, a related virus strain, severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2), was discovered. This new strain causes COVID-19, a disease which brought about the ongoing 2019\u201320 coronavirus pandemic.\nFortunately, No cases of the first SARS-CoV have been reported worldwide since 2004\n\n\n# 3. **ZIKA VIRUS**\n![zika.jpg](attachment:zika.jpg)\n\nThe rise in the spread of Zika virus has been accompanied by a rise in cases of microcephaly and Guillain-Barr\u00e9 syndrome. First identified in Uganda in 1947 in monkeys, Zika was later identified in humans in 1952. The first large outbreak of disease caused by Zika infection was reported from the Island of Yap in 2007. There are currently several countries experiencing Zika virus outbreaks.\nAs of March 2016, 18 companies and institutions were developing vaccines against Zika, but they state a vaccine is unlikely to be widely available for about 10 years.\n\n\n# 4. **SWINE FLU**\n![h1n1.jpg](attachment:h1n1.jpg)\n\n*\"Influenza A virus subtype H1N1 (A\/H1N1)\"* is the subtype of Influenza A virus that was the most common cause of human influenza (flu) in 2009, and is associated with the 1918 Spanish flu outbreak. In June 2009, the World Health Organization (WHO) declared the new strain of swine-origin H1N1 as a pandemic. \nWith a mortality rate of 0.96 the swine flu had around 6.7 million cases until 2019 and caused 19654 deaths.\nThe vaccine developed for H1N1 appeared both effective and safe,providing a strong protective immune response and having similar safety profile to the usual seasonal influenza vaccine.\n","5d045013":"**Initially, the labs tested samples only from those with a travel history to 12 countries designated as high-risk, or those who have come in contact with anyone testing positive for the coronavirus, or showing symptoms as per the government guidelines.\nTesting for community transmission began on 15 March. 65 laboratories of the Department of Health Research and the Indian Council of Medical Research (DHR-ICMR) have started testing random samples of people who exhibit flu-like symptoms and samples from patients without any travel history or contact with infected persons.**","5c958925":"**HOW COVID-19 ENTERED DIFFERENT STATES WITH TIME**\n(*ZOOM AVIALABLE*)","20748f45":"**TIMELINE FOR TESTING PERFORMED**","25929b0d":"**ANIMATION FOR TIMELINE OF COVID-19 IN INDIA**","eec71359":"# VISUAL ANALYSIS SPECIFIC TO INDIA","4ae75cbf":"**Tamilnadu having a number of cases is doing well in terms of medical arrangements and testing whereas several other states topping the charts for highest number of confirmed cases are not so well equipped in this fight against covid-19. States like Maharashtra and Indian Capital New Delhi need to gear up their speed for testing and providing medical support to their patients.**","acfc1d11":"**SLIDER LINE PLOT FOR CONFIRMED CASES**\n*(Slide the bar to view a number of cases for each day.)*","b2409692":"**Predicting the number of cases for coming days can help the authorities and individuals to setup their plans for the future. It can give a rough idea about whether the situation is going to improve or the massive 1.3 billion population still have to practise work from home for few more weeks.**\n\n","6c702c27":"**NUMBER OF CONFIRMED CASES THAT WERE REPORTED FOR DIFFERRENT PANDEMICS WHEN THEY WERE AT THEIR PEAK (Time span considered = 90 days)**","436e36f5":"**STATE WISE COMPLETE STATISTICS**","5e8dede9":"**FUTURE PREDICTIONS USING SUPPORT VECTOR MACHINE**","bcd83acb":"**DEMOGRAPHIC VISUALISATION FOR CONFIRMED CASES **\n*(ZOOM AVAILABLE)*","63d412af":"STATS BEHAVIOUR w.r.t TO DATES"}}