{"cell_type":{"d6397c9a":"code","92020324":"code","099baa30":"code","3df11cd7":"code","24dcf8e2":"code","f355fcaf":"code","3886850b":"code","89974de8":"code","79770550":"code","029c96b9":"code","50557cde":"code","33d2c4e5":"code","8d9a1262":"code","d9f51fb2":"code","b078552d":"code","dc1152e1":"code","9c127854":"code","6ddec37b":"code","d97d9f68":"code","8c27c8b8":"code","6cc4c99f":"markdown","c69cb940":"markdown","7b377485":"markdown","f11f1e34":"markdown"},"source":{"d6397c9a":"!pip install mtcnn","92020324":"import numpy as np\nimport pandas as pd\nimport os\nimport cv2\nfrom matplotlib import pyplot as plt\nfrom mtcnn import MTCNN\nfrom tqdm import tqdm\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","099baa30":"detector = MTCNN()","3df11cd7":"img0=cv2.imread('..\/input\/famous-iconic-women\/output\/train\/Nancy Pelosi\/000001.jpg')\nimg1= cv2.cvtColor(img0, cv2.COLOR_BGR2RGB)\nplt.imshow(img1,cmap=\"gray\")\nplt.axis(\"off\")  \nplt.show()","24dcf8e2":"img0a=cv2.imread('..\/input\/famous-iconic-women\/output\/train\/Madonna\/000001.jpg')\nimg1a= cv2.cvtColor(img0a, cv2.COLOR_BGR2RGB)\nplt.imshow(img1a,cmap=\"gray\")\nplt.axis(\"off\")  \nplt.show()","f355fcaf":"def mtcnn_box(image,BOX) : \n    result = detector.detect_faces(image)\n    return result","3886850b":"# prepare empty box\nBOX1=[]\nmtcnn_box(img1,BOX1)","89974de8":"paths=[]\nfor dirname, _, filenames in os.walk('..\/input\/famous-iconic-women\/output\/train'):\n    for filename in filenames:\n        paths+=[os.path.join(dirname, filename)]\n        \nprint(len(paths))\n\npaths0=[]\nfor item in paths:\n    if item.split('\/')[-2] in ['Nancy Pelosi','Madonna']:\n        paths0+=[item]\n        \nprint(paths0)","79770550":"BOX=[]\nfor i,path in enumerate(paths0):\n    img=cv2.imread(path)\n    BOX+=mtcnn_box(img,BOX)\n    name=path.split('\/')[-2]\n    print(i)\n    print(name)\n    print(mtcnn_box(img,BOX))","029c96b9":"print(len(BOX))","50557cde":"annotation=pd.DataFrame(columns=['ids','b1','b2','b3','b4','conf','le1','le2','re1','re2','ns1','ns2','lm1','lm2','rm1','rm2','class'],index=range(len(BOX)))\nannotation","33d2c4e5":"i=0\nfor path1 in paths0:\n    BOX2=[]\n    img=cv2.imread(path1)\n    BOX2+=mtcnn_box(img,BOX2)\n    for item2 in BOX2:\n        box=item2['box']\n        confidence=item2['confidence']\n        left_eye=item2['keypoints']['left_eye']\n        right_eye=item2['keypoints']['right_eye']\n        nose=item2['keypoints']['nose']\n        mouth_left=item2['keypoints']['mouth_left']\n        mouth_right=item2['keypoints']['mouth_right']\n        annotation.iloc[i,0:1]=path1.split('\/')[-1]\n        annotation.iloc[i,1:5]=box\n        annotation.iloc[i,5:6]=confidence\n        annotation.iloc[i,6:8]=left_eye\n        annotation.iloc[i,8:10]=right_eye\n        annotation.iloc[i,10:12]=nose\n        annotation.iloc[i,12:14]=mouth_left\n        annotation.iloc[i,14:16]=mouth_right      \n        annotation.iloc[i,16:17]=path1.split('\/')[-2]      \n        i+=1\n        \nannotation","8d9a1262":"from matplotlib import animation, rc\nrc('animation', html='jshtml')","d9f51fb2":"def create_animation(ims):\n    fig=plt.figure(figsize=(6,6))\n    plt.axis('off')\n    im=plt.imshow(cv2.cvtColor(ims[0],cv2.COLOR_BGR2RGB))\n    \n    def animate_func(i):\n        im.set_array(cv2.cvtColor(ims[i],cv2.COLOR_BGR2RGB))\n        return [im]\n\n    return animation.FuncAnimation(fig, animate_func, frames=len(ims), interval=1000\/\/2)","b078552d":"images0=[]\nfor i in tqdm(range(0,len(paths0),1)):\n    images0+=[cv2.imread(paths0[i])]\n    \nprint(len(images0))","dc1152e1":"create_animation(images0)","9c127854":"anno2=annotation\nanno2['le-re']=((anno2['le1']-anno2['re1'])**2+(anno2['le2']-anno2['re2'])**2)**0.5\nanno2['ce1']=(anno2['le1']+anno2['re1'])\/2\nanno2['ce2']=(anno2['le2']+anno2['re2'])\/2\nanno2['cm1']=(anno2['lm1']+anno2['rm1'])\/2\nanno2['cm2']=(anno2['lm2']+anno2['rm2'])\/2\nanno2['ce-ns']=((anno2['ce1']-anno2['ns1'])**2+(anno2['ce2']-anno2['ns2'])**2)**0.5\nanno2['ns-cm']=((anno2['ns1']-anno2['cm1'])**2+(anno2['ns2']-anno2['cm2'])**2)**0.5\nanno2['ce-ns-ratio']=anno2['ce-ns']\/anno2['le-re']\nanno2['ns-cm-ratio']=anno2['ns-cm']\/anno2['le-re']\nanno2","6ddec37b":"anno3=anno2[['ce-ns-ratio','ns-cm-ratio']]\nanno3['class']=anno2['class']\nanno3","d97d9f68":"sns.jointplot(data=anno3,x='ce-ns-ratio', y='ns-cm-ratio', hue=\"class\",kind=\"kde\")","8c27c8b8":"sns.relplot(data=anno3,x='ce-ns-ratio', y='ns-cm-ratio', hue=\"class\")","6cc4c99f":"# Create new parameters\n### 'eye center - nose distance ratio' and 'nose - mouth center distance ratio' to 'left eye - right eye distance'","c69cb940":"# Slide Show","7b377485":"https:\/\/github.com\/ipazc\/mtcnn","f11f1e34":"# detector = MTCNN()"}}