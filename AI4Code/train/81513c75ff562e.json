{"cell_type":{"22129f85":"code","31fbf5c0":"code","c86ca761":"code","031916eb":"code","4a430a03":"code","40bc6ec5":"code","30e30b15":"code","9718acab":"code","0c9d8572":"code","562d4e29":"code","69cbf0ee":"markdown","cd5b7650":"markdown","c85dcc34":"markdown","712a1d03":"markdown","683b6c8e":"markdown","eb5c5b9a":"markdown","b69d5593":"markdown","bee9715e":"markdown","afae2221":"markdown","fe29eeb5":"markdown","f3b5492c":"markdown"},"source":{"22129f85":"import os\nimport pandas as pd\nimport cv2\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud, STOPWORDS","31fbf5c0":"path = '\/kaggle\/input\/shopee-product-matching\/'\nos.listdir(path)","c86ca761":"train_data = pd.read_csv(path+'train.csv')\ntest_data = pd.read_csv(path+'test.csv')\nsamp_subm = pd.read_csv(path+'sample_submission.csv')","031916eb":"def plot_examples_by_label_group(label_group):\n    fig, axs = plt.subplots(1, 5, figsize=(20, 10))\n    fig.subplots_adjust(hspace = .1, wspace=.1)\n    df=train_data[train_data['label_group']==label_group]\n    df.index = range(len(df))\n    axs = axs.ravel()\n    for i in range(5):\n        img = cv2.imread(path+'train_images\/'+df.loc[i, 'image'])\n        axs[i].imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\n        axs[i].set_title('label_group:'+str(label_group))\n        axs[i].set_xticklabels([])\n        axs[i].set_yticklabels([])\n    plt.show()","4a430a03":"print('number train samples:', len(train_data.index))\nprint('number test samples:', len(test_data.index))\nprint('number train images:', len(os.listdir(path+'train_images')))\nprint('number test images:', len(os.listdir(path+'test_images')))","40bc6ec5":"train_data.head()","30e30b15":"samp_subm.head()","9718acab":"label_groups = train_data['label_group'].value_counts().keys()\nplot_examples_by_label_group(label_groups[0])\nplot_examples_by_label_group(label_groups[1])\nplot_examples_by_label_group(label_groups[2])\nplot_examples_by_label_group(label_groups[3])","0c9d8572":"stopwords = set(STOPWORDS)\ncomment_words = ''\nfor val in train_data['title']:\n    # Typecase Value To String\n    val = str(val)\n    # Split Values\n    tokens = val.split()\n    # Convert Token To Lower Case\n    for i in range(len(tokens)):\n        tokens[i] = tokens[i].lower()\n        \n    comment_words += \" \".join(tokens)+\" \"\nwordcloud = WordCloud(width=800, height=600,\n                      background_color='white',\n                      stopwords=stopwords,\n                      min_font_size=10).generate(comment_words)\nplt.figure(figsize=(8, 8), facecolor=None)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","562d4e29":"output = samp_subm.copy()\noutput.to_csv('submission.csv', index=False)","69cbf0ee":"## Images - Near-duplicates","cd5b7650":"# Oveview","c85dcc34":"## Title - Cloud Of Words","712a1d03":"# Path","683b6c8e":"# Functions\nWe define some helper functions.","eb5c5b9a":"We plot 5 images of label groups and select 4 of the groups with the most images:","b69d5593":"# Libraries","bee9715e":"# Export","afae2221":"# Load Data","fe29eeb5":"# Intro\nWelcome to the [Shopee - Price Match Guarantee](https:\/\/www.kaggle.com\/c\/shopee-product-matching) competition.\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/24286\/logos\/header.png)\n\nThe goal of this competition is to find near-duplicates in large datasets.  In Shopee's case, everyday users can upload their own images and write their own product descriptions, adding an extra layer of challenge. Our task is to identify which products have been posted repeatedly. The differences between related products may be subtle while photos of identical products may be wildly different!\n\n<span style=\"color: royalblue;\">Please vote the notebook up if it helps you. Feel free to leave a comment above the notebook. Thank you. <\/span>","f3b5492c":"# EDA"}}