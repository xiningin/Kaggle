{"cell_type":{"5a9ba51d":"code","d7de7e00":"code","6d3c5a4a":"code","d6b00e95":"code","9324956d":"code","158579d9":"code","a5011eb6":"code","50c90bf3":"code","db711436":"code","e9cac799":"code","00a5a166":"code","96c0bbe5":"code","11762781":"code","280a31ad":"code","33f16449":"code","493cb791":"code","57d11dc2":"code","104f2031":"code","bb658bfb":"code","0ebae89c":"code","33ea5f2c":"code","45cb81be":"code","f49f3cc1":"code","99f53361":"code","f42f110f":"code","9b93208a":"code","ef7bd299":"code","741c7b34":"code","3d750b33":"code","ce7d41f4":"code","1d6acaa6":"code","2648ab2d":"code","cba9ad2a":"code","8c5a1708":"code","dca1fce5":"code","05fae28b":"code","e6083121":"code","d1b13c68":"code","2a3850e8":"code","3290c7a3":"code","df0aca39":"code","6fa825d2":"code","d59d2d2b":"code","0ca4939b":"code","57215a86":"code","4201fa7a":"code","b342e83f":"code","c63723aa":"code","3692dde5":"code","29a52fd8":"code","868f64c9":"code","df176a12":"code","55f14ac3":"code","ba9c8847":"code","ab2c7ef6":"code","41587d65":"code","7c7ec0f1":"code","68b564b0":"code","2b2df1ce":"code","931b9b8f":"code","39d6ecf0":"code","a1b4109e":"code","03feb303":"code","370ca0aa":"code","30366d3b":"code","e1d4e461":"code","890a063c":"code","1d15e5b2":"code","f3734f46":"markdown","b3c4491e":"markdown","26e79e69":"markdown","445a3b27":"markdown","989870f4":"markdown","2503876f":"markdown","5a5c423e":"markdown","dbe0219e":"markdown","b2a7becf":"markdown","e015249d":"markdown","530f2c8e":"markdown","5fe8c63a":"markdown","4212ba64":"markdown","4b5af820":"markdown","bc7f1c6d":"markdown","15bce743":"markdown","cac1c7b0":"markdown","d4e47c58":"markdown","774a5c5e":"markdown","55973a9a":"markdown","1a283385":"markdown","8693208b":"markdown","0b16de37":"markdown","4596a2cb":"markdown","67ffa6f4":"markdown","48878f60":"markdown","d9cd6247":"markdown","d3a3241f":"markdown","8057ab09":"markdown","e8f93523":"markdown","ebe5555c":"markdown","655eea7e":"markdown","0a5782ed":"markdown","6ef684f8":"markdown","e0859ca9":"markdown","4f3785b5":"markdown","d708ee7c":"markdown","1755c33d":"markdown","ebdac0cb":"markdown","401d3b2b":"markdown","20fb06a1":"markdown","ede12e25":"markdown"},"source":{"5a9ba51d":"import os\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","d7de7e00":"df =  pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\",index_col=0)\ndf.head(10)","6d3c5a4a":"len(df.index)","d6b00e95":"f,ax=plt.subplots(1,3,figsize=(20,10))\n\ndf['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',shadow=True, ax=ax[0])\ndf['Survived'].loc[df['Sex']=='male'].value_counts(sort=False).plot.pie(explode=[0,0.1],autopct='%1.1f%%',shadow=True, ax=ax[1])\ndf['Survived'].loc[df['Sex']=='female'].value_counts(sort=False).plot.pie(explode=[0,0.1],autopct='%1.1f%%',shadow=True, ax=ax[2])\nax[0].set_title('Overall Survived')\nax[1].set_title('Men Survived')\nax[2].set_title('Female Survived')\n\nax[0].set_ylabel('')\nax[1].set_ylabel('')\nax[2].set_ylabel('')\n\nlabels = ['dead', 'survived'] \nplt.legend(labels)","9324956d":"plt.figure(figsize=(20,10))\nsns.heatmap(df.isnull(), yticklabels=False, cbar=False)","158579d9":"df.isnull().sum(axis = 0)","a5011eb6":"df.loc[df[\"Survived\"] == 0,\"Survived\"] = -1\ndf.loc[df[\"Survived\"] == 1,\"Survived\"] = 0\ndf.loc[df[\"Survived\"] == -1,\"Survived\"] = 1","50c90bf3":"df.head()","db711436":"pd.crosstab(df.Sex,df.Survived).apply(lambda r: r\/r.sum(), axis=1)","e9cac799":"df.loc[df[\"Sex\"] == \"male\",\"Sex\"] = 1\ndf.loc[df[\"Sex\"] == \"female\",\"Sex\"] = 0\ndf.head()","00a5a166":"df['Embarked'].value_counts() ","96c0bbe5":"df['Embarked'] = df.Embarked.fillna('S')","11762781":"pd.crosstab(df.Embarked,df.Survived).apply(lambda r: r\/r.sum(), axis=1)","280a31ad":"df['Embarked'] = df['Embarked'].map( {'S': 2, 'Q': 1, 'C': 0} ).astype(int)\ndf.head()","33f16449":"sns.set(style=\"whitegrid\")\n\ng = sns.catplot(x=\"Embarked\", y=\"Survived\", hue=\"Sex\", data=df, height=6, kind=\"bar\", palette=\"Set1\")\ng.despine(left=True)\ng.set_ylabels(\"death probability\")","493cb791":"#df.loc[df[\"Name\"].str.find('Mr.') >= 0, \"Type\"] = 0\n#df.loc[df[\"Name\"].str.find('Mrs.') >= 0, \"Type\"] = 1\n#df.loc[df[\"Name\"].str.find('Miss.') >= 0, \"Type\"] = 2\n#df.loc[df[\"Name\"].str.find('Master.') >= 0, \"Type\"] = 3\n#df.loc[df[\"Name\"].str.find('Don.') >= 0, \"Type\"] = 4\n#df.loc[df[\"Name\"].str.find('Rev.') >= 0, \"Type\"] = 4\n#df.loc[df[\"Name\"].str.find('Dr.') >= 0, \"Type\"] = 4\n#df['Type'] = df.Type.fillna(4)","57d11dc2":"#df['Type'].value_counts()","104f2031":"#pd.crosstab(df.Type,df.Survived).apply(lambda r: r\/r.sum(), axis=1)","bb658bfb":"#del df['Type']\ndf.loc[df[\"Name\"].str.find('Mr.') >= 0, \"Type\"] = 4\ndf.loc[df[\"Name\"].str.find('Mrs.') >= 0, \"Type\"] = 0\ndf.loc[df[\"Name\"].str.find('Miss.') >= 0, \"Type\"] = 1\ndf.loc[df[\"Name\"].str.find('Master.') >= 0, \"Type\"] = 2\ndf.loc[df[\"Name\"].str.find('Don.') >= 0, \"Type\"] = 3\ndf.loc[df[\"Name\"].str.find('Rev.') >= 0, \"Type\"] = 3\ndf.loc[df[\"Name\"].str.find('Dr.') >= 0, \"Type\"] = 3\ndf['Type'] = df.Type.fillna(3)","0ebae89c":"pd.crosstab(df.Type,df.Survived).apply(lambda r: r\/r.sum(), axis=1)","33ea5f2c":"df['Type'] = df['Type'].astype(int)","45cb81be":"sns.set(style=\"whitegrid\")\n\ng = sns.catplot(x=\"Type\", y=\"Survived\", hue=\"Sex\", data=df, height=6, kind=\"bar\", palette=\"Set1\")\ng.despine(left=True)\ng.set_ylabels(\"death probability\")","f49f3cc1":"df.head()","99f53361":"plt.figure(figsize=(20,5))\nsns.boxplot(y=\"Survived\", x=\"Fare\", data=df, palette=\"Set2\",  orient=\"h\");","f42f110f":"f,ax=plt.subplots(1,2,figsize=(20,10))\nsns.distplot(df[df['Survived']==0].Fare,ax=ax[0])\nsns.distplot(df[df['Survived']==1].Fare,ax=ax[1])\n","9b93208a":"df.loc[df[\"Fare\"] < 10,\"Fare\"] = 5\ndf.loc[(df[\"Fare\"] >= 10) & (df[\"Fare\"] < 25),\"Fare\"] = 3\ndf.loc[(df[\"Fare\"] >= 25) & (df[\"Fare\"] < 50),\"Fare\"] = 4\ndf.loc[(df[\"Fare\"] >= 50) & (df[\"Fare\"] < 100),\"Fare\"] = 2\ndf.loc[(df[\"Fare\"] >= 100), 'Fare'] = 0\ndf.head()","ef7bd299":"f,ax=plt.subplots(1,2,figsize=(15,7))\nsns.distplot(df[df['Survived']==0].Fare,ax=ax[0])\nsns.distplot(df[df['Survived']==1].Fare,ax=ax[1])","741c7b34":"pd.crosstab(df.Fare,df.Survived).apply(lambda r: r\/r.sum(), axis=1)","3d750b33":"df['Fare'] = df['Fare'].astype(int)","ce7d41f4":"df['Age'].isnull().sum()","1d6acaa6":"meanAge = df['Age'].mean()\nprint(meanAge)","2648ab2d":"df['Age'] = df.Age.fillna(meanAge)\ndf['Age'] = df['Age'].astype('int64')\ndf.head()","cba9ad2a":"df.loc[df[\"Age\"] < 15,\"Age\"] = 0\ndf.loc[(df[\"Age\"] >= 15) & (df[\"Age\"] < 30),\"Age\"] = 3\ndf.loc[(df[\"Age\"] >= 30) & (df[\"Age\"] < 45),\"Age\"] = 1\ndf.loc[(df[\"Age\"] >= 45) & (df[\"Age\"] < 60),\"Age\"] = 2\ndf.loc[(df[\"Age\"] >= 60), 'Age'] = 4\ndf.head()","8c5a1708":"f,ax=plt.subplots(1,2,figsize=(15,7))\nsns.distplot(df[df['Survived']==0].Age,ax=ax[0])\nsns.distplot(df[df['Survived']==1].Age,ax=ax[1])","dca1fce5":"pd.crosstab(df.Age,df.Survived).apply(lambda r: r\/r.sum(), axis=1)","05fae28b":"df.Cabin.value_counts()","e6083121":"df.loc[df[\"Cabin\"].str.find('A') >= 0, \"Deck\"] = 5\ndf.loc[df[\"Cabin\"].str.find('B') >= 0, \"Deck\"] = 3\ndf.loc[df[\"Cabin\"].str.find('C') >= 0, \"Deck\"] = 4\ndf.loc[df[\"Cabin\"].str.find('D') >= 0, \"Deck\"] = 1\ndf.loc[df[\"Cabin\"].str.find('E') >= 0, \"Deck\"] = 2\ndf.loc[df[\"Cabin\"].str.find('F') >= 0, \"Deck\"] = 0\ndf.loc[df[\"Cabin\"].str.find('G') >= 0, \"Deck\"] = 6","d1b13c68":"df['Deck'] = df.Deck.fillna(6)","2a3850e8":"df['Deck'] = df['Deck'].astype(int)","3290c7a3":"sns.set(style=\"whitegrid\")\n\ng = sns.catplot(x=\"Deck\", y=\"Survived\", hue=\"Sex\", data=df, height=6, kind=\"bar\", palette=\"Set1\")\ng.despine(left=True)\ng.set_ylabels(\"death probability\")","df0aca39":"pd.crosstab(df.Deck,df.Survived).apply(lambda r: r\/r.sum(), axis=1)","6fa825d2":"df.head()","d59d2d2b":"del df['Name']\ndel df['Ticket']\ndel df['Parch']\ndel df['SibSp']\ndel df['Cabin']","0ca4939b":"df.head()","57215a86":"sns.heatmap(df.corr(), annot = True)","4201fa7a":"df.dtypes","b342e83f":"y=df[\"Survived\"]\nx=df.iloc[:,1:]","c63723aa":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.05, random_state=4130)","3692dde5":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nrdclass=RandomForestClassifier()\nrdclass.fit(X_train,y_train)\nypred=rdclass.predict(X_test)\n\naccRFC = accuracy_score(y_test,ypred)\nprint(accRFC)","29a52fd8":"from sklearn import svm\nclf = svm.SVR()\nclf.fit(X_train,y_train)\n\nypred = clf.predict(X_test)\naccSVM_D = accuracy_score(y_test, ypred.round())\nprint(accSVM_D)","868f64c9":"val = []\neuc = []\n\nfor c in range(1,50):\n    for eps in range(0,10):\n        clf = svm.SVR(C=c, epsilon=(eps\/10))\n        clf.fit(X_train,y_train)\n\n        ypred = clf.predict(X_test)\n        euc.append([c,(eps\/10)])\n        val.append([accuracy_score(y_test, ypred.round()),c,eps])\n\naccSVM_A = max(val)\naccSVM_A = accSVM_A[0]\nprint(accSVM_A)","df176a12":"max(val)","55f14ac3":"clf = svm.SVR(C=49, epsilon=(4\/10))\nclf.fit(X_train,y_train)\n\nypred = clf.predict(X_test)\naccuracy_score(y_test, ypred.round())","ba9c8847":"ypred = pd.DataFrame(ypred)\nypred = pd.Series.round(ypred)\nypred = ypred.astype('int64')\naccuracy_score(y_test, ypred.round())","ab2c7ef6":"import numpy as np\nx_ntest = np.array(X_test)\ny_ntest = np.array(y_test)\nx_ntrain = np.array(X_train)\ny_ntrain = np.array(y_train)","41587d65":"print(x_ntrain.shape, y_ntrain.shape)","7c7ec0f1":"from xgboost import XGBClassifier\n\nmodel = XGBClassifier()\n\n# fit the model with the training data\nmodel.fit(x_ntrain,y_ntrain)\n\n# predict the target on the train dataset\npredict_train = model.predict(x_ntrain)\n\n# Accuray Score on train dataset\naccuracy_train = accuracy_score(y_ntrain,predict_train)\nprint('accuracy_score on train dataset : ', accuracy_train)\n\n# predict the target on the test dataset\npredict_test = model.predict(x_ntest)\n\n# Accuracy Score on test dataset\naccuracy_test = accuracy_score(y_ntest,predict_test)\nprint('\\naccuracy_score on test dataset : ', accuracy_test)","68b564b0":"\"\"\"\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV\n\n# make datasets\ndtrain = xgb.DMatrix(x_ntrain, label=y_train)\ndtest = xgb.DMatrix(x_ntest)\n\n# set up\nparam = {'max_depth':8, 'eta':0.1, 'objective':'binary:hinge' }\nnum_round = 10\n\n# fit the model with the training data\nbst = xgb.train(param, dtrain, num_round)\n\n# make prediction\npreds = bst.predict(dtest)\npreds = preds.astype('int64')\n\n# Accuracy Score on test dataset\naccuracy_test = accuracy_score(y_test,preds)\nprint('accuracy_score on test dataset : ', accuracy_test)\n\"\"\"","2b2df1ce":"from tensorflow import keras\nimport tensorflow as tf\nfrom keras.utils import to_categorical","931b9b8f":"modeltf = keras.Sequential([\n    keras.layers.Reshape(target_shape=(1,), input_shape=(7,)),\n    keras.layers.Dense(units= 7, activation='relu'),\n    keras.layers.Dense(units= 14, activation='relu'),\n    keras.layers.Dense(units= 7, activation='relu'),\n    keras.layers.Dense(units= 1, activation='softmax')\n])\n\nmodeltf.compile(optimizer='adam', loss=tf.losses.categorical_crossentropy, metrics=['accuracy'])\n","39d6ecf0":"modeltf.summary()","a1b4109e":"df =  pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\", index_col=0)\n\ndf.loc[df[\"Sex\"] == \"male\",\"Sex\"] = 1\ndf.loc[df[\"Sex\"] == \"female\",\"Sex\"] = 0\n\ndf['Embarked'] = df.Embarked.fillna('S')\ndf['Embarked'] = df['Embarked'].map( {'S': 2, 'Q': 1, 'C': 0} ).astype(int)\n\ndf.loc[df[\"Name\"].str.find('Mr.') >= 0, \"Type\"] = 4\ndf.loc[df[\"Name\"].str.find('Mrs.') >= 0, \"Type\"] = 0\ndf.loc[df[\"Name\"].str.find('Miss.') >= 0, \"Type\"] = 1\ndf.loc[df[\"Name\"].str.find('Master.') >= 0, \"Type\"] = 2\ndf.loc[df[\"Name\"].str.find('Don.') >= 0, \"Type\"] = 3\ndf.loc[df[\"Name\"].str.find('Rev.') >= 0, \"Type\"] = 3\ndf.loc[df[\"Name\"].str.find('Dr.') >= 0, \"Type\"] = 3\ndf['Type'] = df.Type.fillna(3)\ndf['Type'] = df['Type'].astype(int)\n\ndf.loc[df[\"Fare\"] < 10,\"Fare\"] = 5\ndf.loc[(df[\"Fare\"] >= 10) & (df[\"Fare\"] < 25),\"Fare\"] = 3\ndf.loc[(df[\"Fare\"] >= 25) & (df[\"Fare\"] < 50),\"Fare\"] = 4\ndf.loc[(df[\"Fare\"] >= 50) & (df[\"Fare\"] < 100),\"Fare\"] = 2\ndf.loc[(df[\"Fare\"] >= 100), 'Fare'] = 0\ndf['Fare'] = df.Type.fillna(3)\ndf['Fare'] = df['Fare'].astype(int)\n\ndf['Age'] = df.Age.fillna(meanAge)\ndf['Age'] = df['Age'].astype('int64')\n\ndf.loc[df[\"Age\"] < 15,\"Age\"] = 0\ndf.loc[(df[\"Age\"] >= 15) & (df[\"Age\"] < 30),\"Age\"] = 3\ndf.loc[(df[\"Age\"] >= 30) & (df[\"Age\"] < 45),\"Age\"] = 1\ndf.loc[(df[\"Age\"] >= 45) & (df[\"Age\"] < 60),\"Age\"] = 2\ndf.loc[(df[\"Age\"] >= 60), 'Age'] = 4\n\ndf.loc[df[\"Cabin\"].str.find('A') >= 0, \"Deck\"] = 5\ndf.loc[df[\"Cabin\"].str.find('B') >= 0, \"Deck\"] = 3\ndf.loc[df[\"Cabin\"].str.find('C') >= 0, \"Deck\"] = 4\ndf.loc[df[\"Cabin\"].str.find('D') >= 0, \"Deck\"] = 1\ndf.loc[df[\"Cabin\"].str.find('E') >= 0, \"Deck\"] = 2\ndf.loc[df[\"Cabin\"].str.find('F') >= 0, \"Deck\"] = 0\ndf.loc[df[\"Cabin\"].str.find('G') >= 0, \"Deck\"] = 6\ndf['Deck'] = df.Deck.fillna(6)\ndf['Deck'] = df['Deck'].astype(int)\n\ndel df['Name']\ndel df['Ticket']\ndel df['Parch']\ndel df['SibSp']\ndel df['Cabin']\n\ndf.head()\n","03feb303":"data = np.array(df)","370ca0aa":"dfinal = model.predict(data)   ##XGBoost","30366d3b":"preds = dfinal\npreds = preds.astype('int64')\npreds","e1d4e461":"preds[preds == 1] = 2\npreds[preds == 0] = 1\npreds[preds == 2] = 0\npreds","890a063c":"\nmy_submission = pd.DataFrame({'PassengerId': df.index, 'Survived': preds})\n\n\nmy_submission.to_csv('submission.csv', index=False)\n","1d15e5b2":"my_submission.head(20)","f3734f46":"just for today :)","b3c4491e":"## Embarked","26e79e69":"> # Titanic with Data Science for Beginners","445a3b27":"ok lets make some c and epsilon tests\n\ngamma='scale' (default) is passed then it uses 1 \/ (n_features * X.var()) as value of gamma","989870f4":"lets see in witch embarked the most people surived","2503876f":"# Age\n\nfirst we need to get rid of all the NaN's\n\nthe easiest way is to check the mean age and fill the NaNs with that value","5a5c423e":"so, how many people we got here?","dbe0219e":"# Name \nLets try to work with the names\n\nmap by title","b2a7becf":"i know not perfect.\ni will change it later but for today it should be okay","e015249d":"Actually i dont know if their is a reason for the tickets, parch and SibSp\n\nSibSp = (number of siblings on board) \/ (number of spouse on board)\n\nParCh = (number of Parents on board) \/ (number of Children on board)\n\nso lets drop it for the moment","530f2c8e":"* C = 0 = best\n* Q = 1\n* S = 2 = worsted \n","5fe8c63a":"So make some graphics by type","4212ba64":"# Cabin\n\nhttps:\/\/en.wikipedia.org\/wiki\/First_class_facilities_of_the_RMS_Titanic#\/media\/File:Titanic_cutaway_diagram.png\n\nso the decks are splittet from a(top) to g(bottom)","4b5af820":"first split in x and y values","bc7f1c6d":"## RandomForestClassifier\n\nallways try the easier stuff first","15bce743":"Replace NaN with 's' and map the values","cac1c7b0":"# let the magic happens","d4e47c58":"# Check the Values","774a5c5e":"switch back 'survived' value","55973a9a":"How many values are missing?","1a283385":"# Load Data\nload dataset in pandas, with first row as index","8693208b":"## Invert the 'Survived' Value\n","0b16de37":"## SVM\n\nsvm with default values","4596a2cb":"# Trash","67ffa6f4":"Ok lets see what we got","48878f60":"Hey,\n\ni got into Data Science at the beginning of 2020. So i'm kind of new to this kind of Workflow.\nNevertheless let's grab some coffee, give it a try and see what happens. :)\n\nfeel free to give feedback and if you have any suggestion please let me know\n\n\n# work is still in progress :)\n\n","d9cd6247":"# Includes\n\npretty basic python stuff. If you didn't heard from seaborn already, go and check it out","d3a3241f":"# Test","8057ab09":"## XG Boost","e8f93523":"mhh its ok butt...\n\nmy order is atm just for alle geanders may i should come back later and make a second model with serperatet gernders","ebe5555c":"in the future may ai will check some better way to bredigt the age ","655eea7e":"Lots of NaN's in the Cabin may we got a workaround? outherwise we need to del it","0a5782ed":"i like to split the data in a training and a test dataset just to be sure my AIs work","6ef684f8":"For my idea this means:\n\n* Female = 0\n* Male = 1\n","e0859ca9":"### Deep Learning (in progress****)","4f3785b5":"# Fare","d708ee7c":"aaaand again big diffrenc because of the geners","1755c33d":"And how many did survived?","ebdac0cb":"## Gender \n","401d3b2b":" For the embarked you see 2 NaNs in the upper graph so we replace them with the most commun value","20fb06a1":"# Map the values\n\ni would like to map the values in some order. \n\nIn my mind its easier to make one fixed value for survived. So we switch the 'Survived' values.\n\n* 0 = Survived\n* 1 = not Survied\n\nAll other values get sorted by change to survive. The highst value gets the lowest number.\n\nSo for example: \n* 1If you got by Sex, Pclasses and Age a 0 your changes are pretty good to survive.\n* If you land by 1,3,5 you may better watch out for some swimming wings.","ede12e25":"get the %'s"}}