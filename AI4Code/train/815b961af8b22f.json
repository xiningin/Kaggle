{"cell_type":{"f5e3be3f":"code","1be8fdde":"code","c5e0d1b8":"code","d5b9b3b0":"code","3f9b5275":"code","d5fbe607":"code","5d2744ef":"code","4d435f0d":"code","b38e38a4":"code","08b9670b":"code","0543660c":"code","122a0f57":"code","90a7451c":"code","c328861e":"code","559ba81f":"code","aad2ad14":"code","c65cb047":"code","647f8526":"code","a6ea2338":"code","88989932":"code","afbc40be":"code","15a49fcf":"code","cde1f66a":"code","1ed0ec05":"markdown","ec2ccf9b":"markdown","3d2bd537":"markdown","6364ffd8":"markdown","27abfd15":"markdown","f264ce48":"markdown","8c2c8e09":"markdown","8b8f41ce":"markdown","578ec48c":"markdown","1cadf607":"markdown","3e0a312a":"markdown","424d7930":"markdown","14ce1897":"markdown","fa2508a7":"markdown","40d65fb3":"markdown","4b26526b":"markdown","a62f7270":"markdown"},"source":{"f5e3be3f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1be8fdde":"\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c5e0d1b8":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-aug-2021\/train.csv\")\ntrain","d5b9b3b0":"test = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-aug-2021\/test.csv\")\ntest","3f9b5275":"submission = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-aug-2021\/sample_submission.csv\")\nsubmission","d5fbe607":"sns.displot(train['loss']);","5d2744ef":"train['loss'].describe()","4d435f0d":"target = train.loss\ntrain.drop(['loss'], axis=1, inplace=True)\ntrain","b38e38a4":"combi = train.append(test)\ncombi","08b9670b":"combi.drop(['id'], axis=1, inplace=True)\ncombi","0543660c":"combi.isnull().sum().sum()","122a0f57":"combi = (combi - combi.min()) \/ (combi.max() - combi.min())\ncombi.shape","90a7451c":"length = len(train)\n\ny = target.ravel()\nX = combi[: length]\nX_test = combi[length :]\ny.shape, X.shape, X_test.shape","c328861e":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=1, shuffle=True)\nX_train.shape, X_val.shape, y_train.shape,y_val.shape, X_test.shape","559ba81f":"from sklearn.cross_decomposition import CCA\n\ncca = CCA(n_components=10, max_iter=20000).fit(X_train, y_train)\n\nX_train = cca.transform(X_train)\nX_val = cca.transform(X_val)\nX_test = cca.transform(X_test)\n\nX_train.shape, X_val.shape, X_test.shape","aad2ad14":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression().fit(X_train, y_train)\nprint(\"Score: \",model.score(X_train, y_train))\nprint(\"\")\nprint(\"Coefgficient: \", model.coef_)\nprint(\"\")\nprint(\"Intercept: \", model.intercept_)","c65cb047":"y_pred = model.predict(X_val)\nprint(model.score(X_val, y_val))\nprint(\"\")\nprint(\"Coefgficient: \", model.coef_)\nprint(\"\")\nprint(\"Intercept: \", model.intercept_)","647f8526":"from sklearn import metrics\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_val, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_val, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_val, y_pred)))","a6ea2338":"compare = pd.DataFrame({'actual': y_val, 'predicted': y_pred})\nprint(compare)","88989932":"plt.figure(figsize=(10,10))\nplt.scatter(y_val, y_pred, c='crimson')\nplt.yscale('log')\nplt.xscale('log')\n\np1 = max(max(y_pred), max(y_val))\np2 = min(min(y_pred), min(y_val))\nplt.plot([p1, p2], [p1, p2], 'b-')\nplt.xlabel('Actual Values', fontsize=15)\nplt.ylabel('Predictions', fontsize=15)\nplt.axis('equal')\nplt.show()\n","afbc40be":"prediction = model.predict(X_test)\nprediction[prediction < 0] = 0\nprediction.shape","15a49fcf":"submission.loss = prediction\nsubmission","cde1f66a":"submission.to_csv('submission.csv', index=False)\nsubmission = pd.read_csv(\"submission.csv\")\nsubmission\n","1ed0ec05":"Normalise","ec2ccf9b":"Split","3d2bd537":"Check for null values","6364ffd8":"Import","27abfd15":"Define X and y","f264ce48":"CCA","8c2c8e09":"Predict on validation set","8b8f41ce":"Read","578ec48c":"Analyse target","1cadf607":"Combine","3e0a312a":"Problem Statement\n\nThe dataset is used for this competition is synthetic, but based on a real dataset and generated using a CTGAN. The original dataset deals with calculating the loss associated with a loan defaults. Although the features are anonymized, they have properties relating to real-world features.","424d7930":"Prepare submission","14ce1897":"Predict on test set","fa2508a7":"Compare","40d65fb3":"Evaluate","4b26526b":"Select Model","a62f7270":"Graph"}}