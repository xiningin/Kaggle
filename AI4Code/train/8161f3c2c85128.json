{"cell_type":{"e0dc3bf5":"code","c3f0d144":"code","6496385c":"code","3c9a656d":"code","45fae27e":"code","f1b09c9c":"code","b4851040":"code","607c55b3":"code","6efec580":"code","a26cd741":"code","c01bd46d":"code","7aeba265":"code","2b8338b6":"code","cf825766":"code","0b216ab8":"code","45235bd2":"code","f64572ef":"code","6080bfcd":"code","cee2ace9":"code","91f2d990":"code","7fc60d72":"code","7af25e50":"code","bbe7ffa8":"code","6ed70afe":"code","a752f013":"code","407600a5":"code","43d94eb9":"code","33423e7e":"code","e08c256e":"code","33499068":"code","f21bce49":"code","e698b9c2":"code","04e2d380":"code","79dcfad2":"code","09d811d3":"code","f1eeb806":"code","eeb63bb0":"code","2dc565c4":"code","027d2075":"code","258777cb":"code","8e5503c5":"code","6c2f0b47":"code","af707c94":"code","c23ffafe":"code","8ff2c7c6":"code","bc286cfe":"code","85d3fe4a":"code","f3f1bd7f":"code","51e88ba2":"code","6f798208":"code","65eaa4fa":"code","45c4e856":"code","5d7d4cf8":"code","22f6e18c":"code","99b3a499":"code","a295d936":"code","d359e9cc":"code","500c2513":"code","df6b6dc0":"code","a743395a":"code","91e8903f":"code","d3578449":"code","3fd62ed4":"code","cafa4090":"code","53a258d7":"markdown","ecff9a6e":"markdown","cf11fec0":"markdown","fa211b1a":"markdown","fed9cf02":"markdown","ce9363aa":"markdown","a8cf2781":"markdown","a3dedd58":"markdown","9157f38e":"markdown","4e8b1cc3":"markdown","9b70d5e9":"markdown","15822ec7":"markdown","cebf3ff0":"markdown","114bae1c":"markdown","8ebafc47":"markdown","ae5aa806":"markdown","4382daf7":"markdown","5db1c926":"markdown"},"source":{"e0dc3bf5":"#import libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport pandas_profiling\nimport seaborn as sns\nimport gc\nfrom scipy import stats","c3f0d144":"#importing IEEE dataset\nIEEE_data = pd.read_csv('..\/input\/ieee-fraud-detection\/train_transaction.csv')\nIEEE_Identity_data = pd.read_csv('..\/input\/ieee-fraud-detection\/train_identity.csv')\nIEEE_test_data = pd.read_csv('..\/input\/ieee-fraud-detection\/test_transaction.csv')\nIEEE_Identity_test_data = pd.read_csv('..\/input\/ieee-fraud-detection\/test_identity.csv')","6496385c":"pd.set_option('display.max_columns', None)\nIEEE_data.head()","3c9a656d":"\nIEEE_Identity_data.head()","45fae27e":"IEEE_test_data.head()","f1b09c9c":"IEEE_Identity_test_data.head()","b4851040":"IEEE_data.shape","607c55b3":"IEEE_Identity_data.shape","6efec580":"IEEE_test_data.shape","a26cd741":"IEEE_Identity_test_data.shape","c01bd46d":"# Merging datasets based on TransactionID\nIEEE_train = pd.merge(IEEE_data, IEEE_Identity_data, on = 'TransactionID', how = 'left')\nIEEE_test = pd.merge(IEEE_test_data, IEEE_Identity_test_data, on = 'TransactionID', how = 'left')","7aeba265":"del IEEE_data, IEEE_Identity_data, IEEE_test_data, IEEE_Identity_test_data\ngc.collect()","2b8338b6":"IEEE_train.shape","cf825766":"IEEE_test.shape","0b216ab8":"\npd.set_option('display.max_rows', None)\nIEEE_train.head(100)","45235bd2":"IEEE_test.head()","f64572ef":"IEEE_train.describe()","6080bfcd":"def resumetable(df):\n    summary = pd.DataFrame(df.dtypes,columns=['dtypes'])\n    summary = summary.reset_index()\n    summary['Name'] = summary['index']\n    summary = summary[['Name','dtypes']]\n    summary['Missing'] = df.isnull().sum().values    \n    summary['Uniques'] = df.nunique().values\n    summary['First Value'] = df.loc[0].values\n    summary['Second Value'] = df.loc[1].values\n    summary['Third Value'] = df.loc[2].values\n\n    for name in summary['Name'].value_counts().index:\n        summary.loc[summary['Name'] == name, 'Entropy'] = round(stats.entropy(df[name].value_counts(normalize=True), base=2),2) \n\n    return summary\n\n## Function to reduce the DF size\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df\n\ndef CalcOutliers(df_num): \n\n    # calculating mean and std of the array\n    data_mean, data_std = np.mean(df_num), np.std(df_num)\n\n    # seting the cut line to both higher and lower values\n    # You can change this value\n    cut = data_std * 3\n\n    #Calculating the higher and lower cut values\n    lower, upper = data_mean - cut, data_mean + cut\n\n    # creating an array of lower, higher and total outlier values \n    outliers_lower = [x for x in df_num if x < lower]\n    outliers_higher = [x for x in df_num if x > upper]\n    outliers_total = [x for x in df_num if x < lower or x > upper]\n\n    # array without outlier values\n    outliers_removed = [x for x in df_num if x > lower and x < upper]\n    \n    print('Identified lowest outliers: %d' % len(outliers_lower)) # printing total number of values in lower cut of outliers\n    print('Identified upper outliers: %d' % len(outliers_higher)) # printing total number of values in higher cut of outliers\n    print('Total outlier observations: %d' % len(outliers_total)) # printing total number of values outliers of both sides\n    print('Non-outlier observations: %d' % len(outliers_removed)) # printing total number of non outlier values\n    print(\"Total percentual of Outliers: \", round((len(outliers_total) \/ len(outliers_removed) )*100, 4)) # Percentual of outliers in points\n    \n    return","cee2ace9":"resumetable(IEEE_train)","91f2d990":"#Outliers in Training Data\nCalcOutliers(IEEE_train['TransactionAmt'])","7fc60d72":"# Number of Columns having Null values in train data\nprint(IEEE_train.isnull().any().sum())","7af25e50":"# Number of Columns having Null in Test Data\nprint(IEEE_test.isnull().any().sum())","bbe7ffa8":"#Taking Sample Data to Perform data visualization\nSample_train = IEEE_train.head(1000)","6ed70afe":"# Transaction amount for different service providers\nsns.catplot(x=\"card4\", y=\"TransactionAmt\", data=Sample_train, height = 8, aspect = 1.5)\nplt.show()","a752f013":"# Credit and Debit Transaction amount\nsns.catplot(x=\"card6\", y=\"TransactionAmt\", data=Sample_train, height = 8, aspect = 1.5)\nplt.show()","407600a5":"sns.relplot(x=\"TransactionAmt\", y=\"card2\", hue=\"card4\", style = \"card6\", data=Sample_train, height = 8, aspect = 1.5);","43d94eb9":"#Fraud data through diffrent cards\nsns.catplot(x=\"isFraud\", y=\"TransactionAmt\", hue=\"card4\", kind=\"swarm\", data=Sample_train, height = 8, aspect = 1.5)\nplt.show()","33423e7e":"sns.catplot(x=\"isFraud\", y=\"TransactionAmt\", hue=\"card6\", kind=\"swarm\", data=Sample_train, height = 8, aspect = 1.5)\nplt.show()","e08c256e":"# Credit and Debit amount through diffrent service providers\nsns.catplot(x=\"card4\", y=\"TransactionAmt\", hue=\"card6\", kind=\"swarm\", data=Sample_train, height = 8, aspect = 1.5)\nplt.show()","33499068":"sns.catplot(x=\"DeviceType\", y=\"TransactionAmt\", kind=\"boxen\",\n            data=Sample_train.sort_values(\"isFraud\"), height = 8, aspect = 1.5)\nplt.show()","f21bce49":"# Fraud transactions using Different devices\nsns.catplot(x=\"isFraud\", y=\"TransactionAmt\", hue=\"DeviceType\",\n            kind=\"violin\", inner=\"stick\", split=True,\n            palette=\"pastel\", data=Sample_train, height = 8, aspect = 1.5)\nplt.show()","e698b9c2":"#Relationship between card1 and Transaction amount\nsns.lmplot(x=\"card1\", y=\"TransactionAmt\", col=\"card4\", data=Sample_train,\n           aspect=1.0);","04e2d380":"# Use of Mobile and Desktop devices for service providers\nsns.catplot(x=\"DeviceType\", y=\"TransactionAmt\", hue=\"card4\", kind=\"bar\", data=Sample_train, height = 8, aspect = 1.5)\nplt.show()","79dcfad2":"# Fraud by Mobile and Desktop trasactions \nsns.catplot(x=\"isFraud\", y=\"TransactionAmt\", hue=\"card4\",\n            col=\"DeviceType\",height = 8, aspect=1.0,\n            kind=\"bar\", data=Sample_train)\nplt.show()","09d811d3":"# Found and Not Found Transaction\nsns.catplot(x=\"isFraud\", y=\"TransactionAmt\", hue=\"id_12\",\n            col=\"DeviceType\",height = 8, aspect=1.0,\n            kind=\"bar\", data=Sample_train)\nplt.show()","f1eeb806":"# Credit and Debit transactions where fraud has found or not\nsns.relplot(x=\"isFraud\", y=\"TransactionAmt\", hue=\"card6\",\n            col=\"id_12\", row=\"DeviceType\",\n            kind=\"line\", estimator=None, data=Sample_train, height = 6, aspect=1.0);","eeb63bb0":"#Reducing Memory uses\nIEEE_train = reduce_mem_usage(IEEE_train)\nIEEE_test = reduce_mem_usage(IEEE_test)","2dc565c4":"ID = IEEE_test.TransactionID","027d2075":"#column wise Number of Null values in training Data\nIEEE_train.isna().sum()","258777cb":"#Showing Categories in Categorical train Data\nprint (IEEE_train['M6'].unique())\nprint (IEEE_train['card4'].unique())\nprint (IEEE_train['ProductCD'].unique())\nprint (IEEE_train['id_12'].unique())\nprint (IEEE_train['DeviceType'].unique())","8e5503c5":"#Showing Categories in Categorical test Data\nprint (IEEE_test['M6'].unique())\nprint (IEEE_test['card4'].unique())\nprint (IEEE_test['ProductCD'].unique())\nprint (IEEE_test['id-12'].unique())\nprint (IEEE_test['DeviceType'].unique())","6c2f0b47":"# Handling Null value in Categorical Field\ndef impute_nan_create_category(DataFrame,ColName):\n    DataFrame.loc[:, ColName]=np.where(DataFrame.loc[:, ColName].isnull(),\"Unknown\",DataFrame.loc[:, ColName])","af707c94":"for Columns in ['card4','M6']:\n    impute_nan_create_category(IEEE_train,('card4', 'M6'))","c23ffafe":"for Columns in ['id_12', 'DeviceType']:\n    impute_nan_create_category(IEEE_train,('id_12','DeviceType'))","8ff2c7c6":"X_train = IEEE_train.iloc[:, np.r_[3:10,11:13,17:32, 40:41, 45:46,51:52,66:89, 333:376,405:406, 432:433]].values","bc286cfe":"Y_train = IEEE_train.iloc[:, 1].values","85d3fe4a":"del IEEE_train\ngc.collect()","f3f1bd7f":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\nimputer.fit(X_train[:, np.r_[3:5,6:9,23:26,27:93]])\nX_train[:, np.r_[3:5,6:9,23:26,27:93]] = imputer.transform(X_train[:, np.r_[3:5,6:9,23:26,27:93]])","51e88ba2":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1,5,26,93,94])], remainder='passthrough')\nX_train = np.array(ct.fit_transform(X_train))","6f798208":"#column wise Number of Null values in test Data\nIEEE_test.isna().sum()","65eaa4fa":"for Columns in ['card4','M6']:\n    impute_nan_create_category(IEEE_test,('card4', 'M6'))","45c4e856":"for Columns in ['id_12', 'DeviceType']:\n    impute_nan_create_category(IEEE_test,('id-12', 'DeviceType'))","5d7d4cf8":"X_test = IEEE_test.iloc[:, np.r_[2:9,10:12,16:31, 39:40, 44:45,50:51,65:88, 332:375,404:405, 431:432]].values","22f6e18c":"del IEEE_test\ngc.collect()","99b3a499":"imputer.fit(X_train[:, np.r_[3:5,6:26,27:93]])\nX_test[:, np.r_[3:5,6:26,27:93]] = imputer.transform(X_test[:, np.r_[3:5,6:26,27:93]])","a295d936":"ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1,5,26,93,94])], remainder='passthrough')\nX_test = np.array(ct.fit_transform(X_test))","d359e9cc":"X_train.shape","500c2513":"X_test.shape","df6b6dc0":"# Applying Feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","a743395a":"#Applying PCA\nfrom sklearn.decomposition import PCA\npca = PCA(n_components = 4)\nX_train = pca.fit_transform(X_train)\nX_test = pca.transform(X_test)","91e8903f":"from xgboost import XGBClassifier\nclassifier = XGBClassifier()\nXg_model = classifier.fit(X_train, Y_train)","d3578449":"Fraud = Xg_model.predict(X_test)","3fd62ed4":"#Submitting the Output\nFraud_prediction = pd.DataFrame({'TransactionID': ID, 'isFraud': Fraud})","cafa4090":"Fraud_prediction.to_csv('kapilv_IEEE_submission1.csv', index=False)","53a258d7":"# Handling Null values in Continuous data fields","ecff9a6e":"# Feature Engineering","cf11fec0":"above figure is explaining Fraud and Defraud Transactions based on Credit and Debit Cards\n","fa211b1a":"Here we can see that use of mobiles are almost same for all service providers where as American express has Highest desktop users","fed9cf02":"Very less Fraud transactions are found for both mobile and Desktop users\n","ce9363aa":"# Memory Reduction","a8cf2781":"Above figure is showing Relationship between Card2 and Transaction amount based on different card types where different shapes are showing Credit and Debit cards","a3dedd58":"# Submission","9157f38e":"# Exploring The Data","4e8b1cc3":"# Handling Null values in Categorical Fields","9b70d5e9":"# Data visualization","15822ec7":"# Training the XGBoost Classification model on the Training set","cebf3ff0":"We can clearly see that the number of Fraud transactions are very less","114bae1c":"# IEEE CIS Fraud Detection","8ebafc47":"# Encoding Categorical data","ae5aa806":"Mostly the transactions are made by Mastercard and Visa compare to other service providers\n","4382daf7":"***Categorical Features - Transaction***\n\nProductCD, emaildomain, card1 - card6, P_emaildomain, R_emaildomain, M1 - M9\n\n***Categorical Features - Identity***\n\nDeviceType, DeviceInfo, id_12 - id_38","5db1c926":"Only Mastercard and Visa trasactions are in fraud category"}}