{"cell_type":{"f4aeb083":"code","8ec514fc":"code","9d96a074":"code","175b8124":"code","1a6b1ccd":"code","e1301788":"code","8ef4f242":"code","cfe1b9f5":"code","e1106d23":"code","3713b786":"code","73e42857":"code","2f2ab146":"code","32c4cbb5":"code","ca487c8e":"code","0bb75cbf":"code","86e224d3":"code","5671ea89":"code","5ebae6b4":"code","cf4260a4":"code","00fbe6e0":"code","67812f53":"code","0d2e1ce3":"code","72c36db9":"markdown","dd622b32":"markdown","6c1d6c6d":"markdown","89e23346":"markdown","ff8c1875":"markdown","f3f62e77":"markdown","b923fc44":"markdown","f2048cdd":"markdown","5cdc166b":"markdown","142cf041":"markdown","85855a56":"markdown","18bcfba7":"markdown","04e70976":"markdown","d8ad493f":"markdown","40a77466":"markdown"},"source":{"f4aeb083":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8ec514fc":"import matplotlib.pyplot as plt\n%matplotlib inline","9d96a074":"house_df=pd.read_csv('..\/input\/neolen-house-price-prediction\/train.csv')\nhouse_test=pd.read_csv('..\/input\/neolen-house-price-prediction\/test.csv')","175b8124":"print(\"Shape of Train Data \",house_df.shape)\nprint(\"Shape of Test Data \",house_test.shape)","1a6b1ccd":"house_df.head()","e1301788":"house_df.describe()","8ef4f242":"house_df.info()","cfe1b9f5":"house_df.dropna(axis=0, subset=['SalePrice'], inplace=True) # droping any row without output \nplt.hist(house_df['SalePrice'],bins=80);\nplt.title(\"Price of the houses\");\nplt.xlabel(\"Prices\");\nplt.ylabel(\"Count\");","e1106d23":"house_df.isnull().sum()","3713b786":"# lotFrontage: Linear feet of street connected to property\nhouse_df['LotFrontage'].fillna((house_df['LotFrontage'].mean()), inplace=True) # fill with mean\n# It got confused between NA as No alley and NA not a number\nhouse_df['Alley'].fillna('No alley access', inplace=True) # replace with no alley\nhouse_df['FireplaceQu'].fillna('No Fireplace', inplace=True) # replace with no fireplace\nhouse_df['MasVnrType'].fillna('None', inplace=True) # None\nhouse_df['MasVnrArea'].fillna((0), inplace=True) # area of zero as it crrespond with a none in the previous col\nhouse_df['BsmtQual'].fillna('NB', inplace=True) # No basement\nhouse_df['BsmtCond'].fillna('NB', inplace=True) # No basement\nhouse_df['BsmtExposure'].fillna('NB', inplace=True) # No basement\nhouse_df['BsmtFinType1'].fillna('NB', inplace=True) # No basement\nhouse_df['BsmtFinType2'].fillna('NB', inplace=True) # No basement\nhouse_df['Electrical'].fillna(house_df['Electrical'].mode()[0], inplace=True) # one row can be filled with the mode\nhouse_df['GarageType'].fillna('NG', inplace=True) # No Garage\nhouse_df['GarageFinish'].fillna('NG', inplace=True) # No Garage\nhouse_df['GarageQual'].fillna('NG', inplace=True) # No Garage\nhouse_df['GarageCond'].fillna('NG', inplace=True) # No Garage\nhouse_df['GarageYrBlt'].fillna(house_df['GarageYrBlt'].mode()[0], inplace=True) # filling with mode\nhouse_df['PoolQC'].fillna('NP', inplace=True) # No Pool\nhouse_df['Fence'].fillna('NF', inplace=True) # No Fence\nhouse_df['MiscFeature'].fillna('None', inplace=True) # NONE\n","73e42857":"house_df.info()","2f2ab146":"house_df.isnull().sum()","32c4cbb5":"house_df.duplicated().sum()","ca487c8e":"house_df=pd.get_dummies(house_df)\nhouse_df.head()","0bb75cbf":"from sklearn.model_selection import train_test_split\nY=(house_df.SalePrice)\nX=house_df.copy()\nX.drop(['SalePrice'], axis=1,inplace=True)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X,Y, train_size=0.8, test_size=0.2,random_state=0)","86e224d3":"from sklearn.linear_model import LinearRegression\nfrom ml_metrics import rmse\n\nmodel_LR=LinearRegression()\n\nmodel_LR.fit(X_train, y_train)\n\npreds_valid = model_LR.predict(X_valid)\n\n\nprint(\"RMSE Score:\")\nprint(rmse(y_valid, preds_valid))","5671ea89":"from xgboost import XGBRegressor\nfrom ml_metrics import rmse\n\nmodel = XGBRegressor(n_estimators=350,max_depth=15,learning_rate=.1,random_state=1,\n                     n_jobs=10, subsample=1,min_child_weight=0.6) \n\n\nmodel.fit(X_train, y_train)\n\npreds_valid = model.predict(X_valid)\n\n\nprint(\"RMSE Score:\")\nprint(rmse(y_valid, preds_valid))","5ebae6b4":"house_test.info()","cf4260a4":"house_test1=pd.get_dummies(house_test)\nX_train, X_test = X_train.align(house_test1, join='left', axis=1)\nhouse_test1.head()","00fbe6e0":"preds_test = model.predict(X_test)\nprint(len(preds_test))","67812f53":"plt.hist(preds_test,bins=80);\nplt.title(\"Predicted Houses' Price\");","0d2e1ce3":"output = pd.DataFrame({'Id':house_test1.Id,\n                       'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)\n\nprint(\"Your submission was successfully saved!\")","72c36db9":"# Testing The model","dd622b32":"# Data Encoding","6c1d6c6d":"**No Duplicates**","89e23346":"#  Building the model","ff8c1875":"# Exploring The Train Data","f3f62e77":"## Using Linear Regression","b923fc44":"# Checking Duplicates","f2048cdd":"# Spliting Data into Train and validation","5cdc166b":"# Checking Missing Values","142cf041":"\n# Visualization of the Target Column","85855a56":"# Loading The Data","18bcfba7":"# Visualize the output","04e70976":"# Using XGBoost","d8ad493f":"# Saving the Output","40a77466":"# Dealing With Missing Values"}}