{"cell_type":{"07c02d4f":"code","1c6bff2c":"code","06f13cff":"code","eeda23d7":"code","cedb1ac7":"code","4ae7146e":"code","6575a2f7":"code","fcb9f394":"code","feb5bae4":"code","1967ea5d":"code","ebaa0433":"code","5099effa":"code","4b98b6b4":"code","744b0e79":"code","fd26a341":"markdown","637a7cd2":"markdown","e27fbbfa":"markdown","a5d6cabe":"markdown","d4236b61":"markdown","ada92bb9":"markdown","2de19d8e":"markdown","f3213a7d":"markdown","5e73830a":"markdown","ba8ceaec":"markdown","d9476074":"markdown","e67a17a7":"markdown","2af697f4":"markdown","851670c2":"markdown","8762165b":"markdown","9393a21a":"markdown","f2402298":"markdown","5bbae177":"markdown","05b0089b":"markdown"},"source":{"07c02d4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport matplotlib.pyplot as plt\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot # plotly offline mode\ninit_notebook_mode(connected=True) \n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1c6bff2c":"# for image read i used opencv to resize and east read png files \ndata1 = cv2.imread(\"..\/input\/cell_images\/cell_images\/Parasitized\/C100P61ThinF_IMG_20150918_144104_cell_162.png\") #parasitized malari cell path and call one image\ndata1 = cv2.resize(data1,(160,160)) \nplt.subplot(1,2,1)\nplt.imshow(data1)\nplt.axis(\"off\")\nplt.title(\"Parasitized\")\ndata1 = cv2.imread(\"..\/input\/cell_images\/cell_images\/Uninfected\/C100P61ThinF_IMG_20150918_144104_cell_128.png\") #uninfected malari cell path and call one image\ndata1 = cv2.resize(data1,(160,160))\nplt.subplot(1,2,2)\nplt.imshow(data1)\nplt.axis(\"off\")\nplt.title(\"Uninfected\")\nplt.show()","06f13cff":"x = list() #create x data\ny = list() # create y data\nfor i in os.listdir(\"..\/input\/cell_images\/cell_images\/Parasitized\"): #read all parasitized data \n    if \".png\" in i: #this if block for only read .png files\n        path = \"..\/input\/cell_images\/cell_images\/Parasitized\/\"+i # create path\n        img = plt.imread(path) # and read created path\n        img = cv2.resize(img,(40,40)) # resize image for lower processing power\n        x.append(img) # append image to x data\n        y.append(1) \nfor i in os.listdir(\"..\/input\/cell_images\/cell_images\/Uninfected\/\"):\n    if \".png\" in i:\n        path = \"..\/input\/cell_images\/cell_images\/Uninfected\/\"+i\n        img = plt.imread(path)\n        img = cv2.resize(img,(40,40))\n        x.append(img)\n        y.append(0)\nx = np.array(x)  ","eeda23d7":"# create 4 subplots and plot 4 random image \nplt.subplot(1,4,1)\nplt.imshow(x[2000]) # image 1\nplt.title(y[2000])\nplt.axis(\"off\")\nplt.subplot(1,4,2) # image 2\nplt.imshow(x[22000])\nplt.title(y[22000])\nplt.axis(\"off\")\nplt.subplot(1,4,3) #image 3\nplt.imshow(x[20000])\nplt.title(y[20000])\nplt.axis(\"off\")\nplt.subplot(1,4,4) #image 4 \nplt.imshow(x[200])\nplt.title(y[200])\nplt.axis(\"off\")\nplt.show()","cedb1ac7":"#reshapeing data\nx = x.reshape(x.shape[0],x.shape[1]*x.shape[2]*x.shape[3])\nx = x**8","4ae7146e":"# i used sklearn modul for splitting process\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state = 42)","6575a2f7":"img1 =x_train[970].reshape(40,40,3) #reshape for normal image shape\nimg2 =x_train[100].reshape(40,40,3)\nplt.subplot(1,2,1)\nplt.imshow(img1)\nplt.axis(\"off\")\nplt.title(y_train[900])\nplt.subplot(1,2,2)\nplt.imshow(img2)\nplt.axis(\"off\")\nplt.title(y_train[100])\nplt.show()","fcb9f394":"#import LogisticRegression and fit with out datas\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(solver=\"lbfgs\")\nlr.fit(x_train,y_train)","feb5bae4":"# Test my Logistic Regression Model\nprint(\"Logistic Regression Accuracy : {0:.2f}%\".format(100 * lr.score(x_test,y_test)))","1967ea5d":"#import modules i will use\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom keras.models import Sequential # initialize neural network library\nfrom keras.layers import Dense # build our layers library\n# build our model\ndef build_classifier():\n    classifier = Sequential() # initialize neural network\n    classifier.add(Dense(units = 64, kernel_initializer = 'uniform', activation = 'relu', input_dim = x_train.shape[1])) # firt hidden layer \n    classifier.add(Dense(units = 64, kernel_initializer = 'uniform', activation = 'relu'))\n    classifier.add(Dense(units = 32, kernel_initializer = 'uniform', activation = 'relu'))\n    classifier.add(Dense(units = 32, kernel_initializer = 'uniform', activation = 'relu'))\n    classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid')) # last layer\n    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n    return classifier # return our model","ebaa0433":"model = build_classifier()\nmodel.summary()","5099effa":"classifier = KerasClassifier(build_fn = build_classifier, epochs = 100)\nhistory = classifier.fit(x_train,y_train)","4b98b6b4":"history.history['acc']\nhistory.history['loss']\nx_ = np.array(range(len(history.history['loss'])))\ntrace1 = go.Scatter(\n        x = x_,\n        y = history.history['loss'],\n        mode = \"lines\",\n        marker = dict(color = \"rgba(0,255,0,0.9)\"),\n        text = \"Loss\"\n)\ntrace2 = go.Scatter(\n        x = x_,\n        y = history.history['acc'],\n        mode = \"lines\",\n        marker = dict(color = \"rgba(0,0,255,0.9)\"),\n        text = \"Accuracy\"\n)\ndata = [trace1,trace2]\nlayout = dict(title = \"Training Accuracy and Loss\")\nfig = dict(data = data,layout=layout)\niplot(fig)","744b0e79":"classifier.score(x_test,y_test)","fd26a341":"Showing two random image in prepared data","637a7cd2":"**And Read All Data**\nRead all data and resize per image to 40px,40px for lower processing power. And i created x and y datas. Images will be in x data and y data for this data parasitized or not information if y data value equal to 1 this data it means parasitized.","e27fbbfa":"Plotting Accuracu and loss values for per epochs ","a5d6cabe":"# 6. Conclusion\n* In this kernal i read and prepared the data and i did implement this data to Logistic Regression and ANN\n* Firstly i implemented Logistic Regression and this accuracy returned to 65% \n* Secondly i implemented ANN and this accuracy 97% while training but during testing this value dropping the 71%\n* I understood mine models not suitable for detection \u263a","d4236b61":"And fit ANN with my datas","ada92bb9":"The Logistic regression accuracy is quite low lets try with ANN","2de19d8e":"# Contents\n1. Introduction\n2. Read and Overview Data\n3. Data Preparation\n4. Logistic Regression\n5. ANN(Artificial Neural Network)\n6. Conclusion","f3213a7d":"# 4. Logistic Regression\nFirstly i will use logistic regression algorithm to have an idea about the accuracy rate. I will use sklearn for logistic regression and a simple work lets do it.","5e73830a":"**Overview**\nShowing one Parasitized Malaria Cell and one Uninfected malaria cell \nto see how it looks","ba8ceaec":"Better than Logistic Regression but not enough \u263a","d9476074":"# 3. Data Preparation \n\nData ready after a short preparation. Firstly reshape data to make one dimensional after split into the train and test.","e67a17a7":"# 5. ANN(Artificial Neural Network)\nFirstly create a ANN model for big image data and use this model with our data and let's see if it works\n","2af697f4":"# 2. Read and Overview Data","851670c2":"****Show random 4 data and their status****","8762165b":"Spliting to train and test ","9393a21a":"Lets see our models summary. My model have 4 hidden layer two of them have 64 units the other two have 32 .","f2402298":"* import modules I'll use","5bbae177":"Finnaly test my model according to this data ","05b0089b":"# 1.Introduction\n\nIn this kernel i'll do detection parasitized malaria cell with Logistic Regression and ANN(artificial Neural Network) algorithms. I'll use Malaria Cell Images dataset as data and using numpy, pandas, opencv, matplotlib, plotly, sklearn and keras modules. This kernel will be beginner level and my first neural network work therefore, efficient results may not. \nThank you for your interest"}}