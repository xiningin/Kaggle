{"cell_type":{"43b489e4":"code","f36d9bd2":"code","45e5e7c6":"code","8eca603e":"code","122f2a30":"code","3e44a0d8":"code","f207fbff":"code","975cd2d5":"code","783e2ad1":"code","ec9a3ca6":"code","dcfdf945":"code","7dee333e":"code","488aa090":"code","60869c83":"code","73220a0c":"code","d8b5547c":"code","a5df6632":"code","a6226442":"code","0d9938b0":"markdown","35eceb68":"markdown","b063e183":"markdown","70e55d77":"markdown","7a0b9c07":"markdown","584ee0d9":"markdown","7ab74876":"markdown","d8454bf2":"markdown","b76797d7":"markdown","59621c4c":"markdown","21b264ae":"markdown","49c30a8a":"markdown","b90a5861":"markdown","8db46315":"markdown","d0d55583":"markdown","a568b146":"markdown"},"source":{"43b489e4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\nimport os\nimport random\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Conv2D,Dense,Flatten,Dropout,MaxPooling2D\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.python.keras.callbacks import ReduceLROnPlateau\n\n%matplotlib inline","f36d9bd2":"total_images_train_normal = os.listdir('..\/input\/chest_xray\/chest_xray\/train\/NORMAL')\ntotal_images_train_pneumonia = os.listdir('..\/input\/chest_xray\/chest_xray\/train\/PNEUMONIA')","45e5e7c6":"sample_normal = random.sample(total_images_train_normal,6)\nf,ax = plt.subplots(2,3,figsize=(15,9))\n\nfor i in range(0,6):\n    im = cv2.imread('..\/input\/chest_xray\/chest_xray\/train\/NORMAL\/'+sample_normal[i])\n    ax[i\/\/3,i%3].imshow(im)\n    ax[i\/\/3,i%3].axis('off')\nf.suptitle('Normal Lungs')\nplt.show()","8eca603e":"sample_pneumonia = random.sample(total_images_train_pneumonia,6)\nf,ax = plt.subplots(2,3,figsize=(15,9))\n\nfor i in range(0,6):\n    im = cv2.imread('..\/input\/chest_xray\/chest_xray\/train\/PNEUMONIA\/'+sample_pneumonia[i])\n    ax[i\/\/3,i%3].imshow(im)\n    ax[i\/\/3,i%3].axis('off')\nf.suptitle('Pneumonia Lungs')\nplt.show()","122f2a30":"sns.set_style('whitegrid')\nsns.barplot(x=['Normal','Pneumonia'],y=[len(total_images_train_normal),len(total_images_train_pneumonia)])","3e44a0d8":"image_height = 200\nimage_width = 200\nbatch_size = 10\nno_of_epochs  = 50","f207fbff":"model = Sequential()\nmodel.add(Conv2D(32,(3,3),input_shape=(image_height,image_width,3),activation='relu'))\nmodel.add(Conv2D(32,(3,3),activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(64,(3,3),activation='relu'))\nmodel.add(Conv2D(64,(3,3),activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(128,(3,3),activation='relu'))\nmodel.add(Conv2D(128,(3,3),activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(units=128,activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units=1,activation='sigmoid'))\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","975cd2d5":"model.summary()","783e2ad1":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n                                   rotation_range=15,\n                                   shear_range=0.2,\n                                   zoom_range=0.2\n                                   )\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)","ec9a3ca6":"training_set = train_datagen.flow_from_directory('..\/input\/chest_xray\/chest_xray\/train',target_size=(image_width, image_height),batch_size=batch_size,class_mode='binary')\n\ntest_set = test_datagen.flow_from_directory('..\/input\/chest_xray\/chest_xray\/test',target_size=(image_width, image_height),batch_size=batch_size,class_mode='binary')","dcfdf945":"history = model.fit_generator(training_set,\n                    steps_per_epoch=5216\/\/batch_size,\n                    epochs=no_of_epochs,\n                    validation_data=test_set,\n                    validation_steps=624\/\/batch_size\n                   )","7dee333e":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc) + 1)\nfig = plt.figure(figsize=(16,9))\n\nplt.subplot(1, 2, 1)\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()","488aa090":"no_steps = len(test_set)\nresult = model.evaluate_generator(test_set, steps=no_steps)\nprint(\"Test-set classification accuracy: {0:.2%}\".format(result[1]))","60869c83":"# Preparing test data\nimport glob\nfrom pathlib import Path\nfrom keras.utils import to_categorical\n\nnormal_cases_dir = Path('..\/input\/chest_xray\/chest_xray\/test\/NORMAL')\npneumonia_cases_dir = Path('..\/input\/chest_xray\/chest_xray\/test\/PNEUMONIA')\n\nnormal_cases = normal_cases_dir.glob('*.jpeg')\npneumonia_cases = pneumonia_cases_dir.glob('*.jpeg')\n\ntest_data = []\ntest_labels = []\n\nfor img in normal_cases:\n    img = cv2.imread(str(img))\n    img = cv2.resize(img, (image_width,image_height))\n    if img.shape[2] ==1:\n        img = np.dstack([img, img, img])\n    else:\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = img.astype(np.float32)\/255.\n    label = [0]\n    test_data.append(img)\n    test_labels.append(label)\n                      \nfor img in pneumonia_cases:\n    img = cv2.imread(str(img))\n    img = cv2.resize(img, (image_width,image_height))\n    if img.shape[2] ==1:\n        img = np.dstack([img, img, img])\n    else:\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = img.astype(np.float32)\/255.\n    label = [1]\n    test_data.append(img)\n    test_labels.append(label)\n    \n\ntest_data = np.array(test_data)\ntest_labels = np.array(test_labels)\n\nprint(\"Total number of test examples: \", test_data.shape)\nprint(\"Total number of labels:\", test_labels.shape)","73220a0c":"# Evaluation on test dataset\ntest_loss, test_score = model.evaluate(test_data, test_labels, batch_size=16)\nprint(\"Loss on test set: \", test_loss)\nprint(\"Accuracy on test set: \", test_score)","d8b5547c":"# Get predictions\npreds = model.predict(test_data, batch_size=16,verbose=1)\npreds=np.around(preds)\norig_test_labels=test_labels\nprint(preds.shape)\nprint(orig_test_labels.shape)","a5df6632":"# Get the confusion matrix\nfrom sklearn.metrics import confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix\n\ncm  = confusion_matrix(orig_test_labels, preds)\nplt.figure()\nplot_confusion_matrix(cm,figsize=(12,8), hide_ticks=True,cmap=plt.cm.Blues)\nplt.xticks(range(2), ['Normal', 'Pneumonia'], fontsize=16)\nplt.yticks(range(2), ['Normal', 'Pneumonia'], fontsize=16)\nplt.show()","a6226442":"# Calculate Precision and Recall\ntn, fp, fn, tp = cm.ravel()\n\nprecision = tp\/(tp+fp)\nrecall = tp\/(tp+fn)\nspecificity=tn\/(tn+fp)\n\nprint(\"Sensitivity (Recall) of the model is {:.2f}\".format(recall))\nprint(\"Specificity of the model is {:.2f}\".format(specificity))\nprint(\"Precision of the model is {:.2f}\".format(precision))","0d9938b0":"# Automated Pneumonia Diagnosis based on Chest X-ray Images\nThe objective of the experiment (presented in this notebook) is to evaluate the performance of a self-designed *Convolutional Neral Network (CNN)* when employed to diagnose Pneumonia. The diagnosis process comprises of classifying Chest X-ray images into one of the two classes: (a) Normal, (b) Pneumonia.\n\nThe dataset is downloded from [kaggle.com](https:\/\/www.kaggle.com\/paultimothymooney\/chest-xray-pneumonia). The dataset contains 5,863 X-Ray images (JPEG) and 2 categories (Pneumonia\/Normal).\n\nFirst of all we import all the relevant packages.","35eceb68":"### Calculating Precision, Specificity and Sensitivity (Recall) values for the model\n*Precision-Recall* is a useful measure of success of prediction when the classes are very imbalanced. High *precision* relates to a low false positive rate, and high *recall* relates to a low false negative rate.\n\nPrecision is defined as the number of true positives over the number of true positives plus the number of false positives. Recall is defined as the number of true positives over the number of true positives plus the number of false negatives. Please see the [link](https:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_precision_recall.html) for details.\n\nAnother way of assessing a binary classification model is to compute the *sensitivity* (also called the true positive rate or the recall) and *specificity* (also called the true negative rate) of the model. Sensitivity indicates the percentage of sick people who are correctly identified as having the condition. Specificity indicates the percentage of healthy people who are correctly identified as not having the condition.\n\nBut first we prepare our test data, so that later we can draw the confusion matrix as well as calculate precision, specificity and sensitivity (recall) of the model.","b063e183":"Here we set our parameters for data augmentation.","70e55d77":"Now we compare and visualize the difference in the number of the two types of x-ray images.","7a0b9c07":"Some normal x-ray images are displayed.","584ee0d9":"Here all the pneumonia and normal x-ray image file names are retrieved and stored in two variables.","7ab74876":"### Visualization of Training and Validation Process\nThe following part of the code visualizes how the training and validation losses and accuracies evolved with the number of epochs.","d8454bf2":"**Confusion matrix** for the model is presented below.","b76797d7":"Finally, computing the sensitivity (recall), specificity and precision of the model.","59621c4c":"### Model Creation and Compilation\nHere we declare some variables for our convenience.","21b264ae":"Here a sequential model is created and compiled.","49c30a8a":"Here we view the details of the model that we have just created.","b90a5861":"### Computing the Final Test-Set Classification Accuracy\nHere we calculate our trained model's final classification accuracy.","8db46315":"Batches of training and testing data are read and stored in `training_set` and `test_set` variables, respectively. Training set consists of `5216` images, while test set consists of `624` images.","d0d55583":"### Model Training\nThe training phase comprises of 3 epochs.","a568b146":"Some Pneumonia X-ray images are displayed below."}}