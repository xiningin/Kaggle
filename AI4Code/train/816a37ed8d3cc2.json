{"cell_type":{"170ad1f6":"code","22d19c29":"code","b4a659ad":"code","72e53f28":"code","8d018a26":"code","33452899":"code","88e9ef9e":"code","3044d2b1":"code","c4383245":"code","b6696ed9":"code","82987795":"code","5e87e593":"markdown","c43d5117":"markdown","3206c106":"markdown","77cf69fd":"markdown","c43dc199":"markdown","02581edd":"markdown","b84ea58f":"markdown","ab5d0e63":"markdown","fdd9bffc":"markdown","9dde274a":"markdown"},"source":{"170ad1f6":"# Importing packages\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go \nimport seaborn as sns\nimport plotly\nimport plotly.express as px\nfrom fbprophet.plot import plot_plotly\nfrom fbprophet import Prophet\nfrom fbprophet.plot import add_changepoints_to_plot\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot, plot_mpl\nimport plotly.offline as py\ninit_notebook_mode(connected=True)\n\nplt.rcParams.update({'font.size': 14})\ndata = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv', parse_dates = ['ObservationDate','Last Update'])\ndata.shape","22d19c29":"# data = data.drop_duplicates()\ndata = data.drop(['SNo', 'Last Update'], axis=1)\ndata = data.rename(columns={'Country\/Region': 'Country', 'ObservationDate':'Date'})\n# To check null values\ndata.isnull().sum()","b4a659ad":"# data = data[['Country\/Region']=='US']\ndata = data[data['Country'].str.match('US')]\ndata","72e53f28":"#This creates a table that sums up every element in the Confirmed, Deaths, and recovered columns.\ntemp = data.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum()\n#Reset index coverts the index series, in this case date, into an index value. \ntemp = temp.reset_index()\ntemp = temp.sort_values('Date', ascending=False)\ntemp.head().style.background_gradient(cmap='PRGn')","8d018a26":"#Confirmed ALL\nfig = go.Figure()\nfig.update_layout(template='plotly_dark')\nfig.add_trace(go.Scatter(x=temp['Date'], \n                         y=temp['Confirmed'],\n                         mode='lines+markers',\n                         name='Confirmed',\n                         line=dict(color='Yellow', width=2)))\nfig.add_trace(go.Scatter(x=temp['Date'], \n                         y=temp['Deaths'],\n                         mode='lines+markers',\n                         name='Deaths',\n                         line=dict(color='Red', width=2)))\nfig.add_trace(go.Scatter(x=temp['Date'], \n                         y=temp['Recovered'],\n                         mode='lines+markers',\n                         name='Recovered',\n                         line=dict(color='Green', width=2)))\nfig.show()","33452899":"mortality = data.copy()\n\n\nmortality = mortality.groupby(['Date', 'Country']).agg({'Deaths': ['sum'],'Recovered': ['sum'],'Confirmed': ['sum']})\nmortality.columns = ['Deaths','Recovered','Confirmed']\nmortality = mortality.reset_index()\nmortality = mortality[mortality.Deaths != 0]\nmortality = mortality[mortality.Confirmed != 0]\n\nmortality['mortality_rate'] = mortality.apply(lambda row: ((row.Deaths+1)\/(row.Confirmed+1))*100, axis=1)\n\n#We filter out where mortality rate is above 10% \nd = mortality[mortality.mortality_rate < 10]\n\n#We wannt only to plot countries with more than 100 confirmed cases, as the situation evovles, more countries will enter this list.\ndd = d[d.Confirmed > 100]\n\nfig = px.line(dd, x=\"Date\", y=\"mortality_rate\", color=\"Country\",\n              line_group=\"Country\", hover_name=\"Country\")\nfig.update_layout(template='plotly_dark')\nfig.show()","88e9ef9e":"floorVar=0.8\nworldPop=25000\n\n#Modelling total confirmed cases \nconfirmed_training_dataset = pd.DataFrame(data.groupby('Date')['Confirmed'].sum().reset_index()).rename(columns={'Date': 'ds', 'Confirmed': 'y'})\n#confirmed_training_dataset.insert(0,'floor',1)\nconfirmed_training_dataset['floor'] = confirmed_training_dataset.y*floorVar\nconfirmed_training_dataset['cap'] = confirmed_training_dataset.y+worldPop\n\n#Modelling mortality rate\nmortality_training_dataset = pd.DataFrame(mortality.groupby('Date')['mortality_rate'].mean().reset_index()).rename(columns={'Date': 'ds', 'mortality_rate': 'y'})\n\n#Modelling deaths\ndeath_training_dataset = pd.DataFrame(data.groupby('Date')['Deaths'].sum().reset_index()).rename(columns={'Date': 'ds', 'Deaths': 'y'})","3044d2b1":"# Total dataframe model \nm = Prophet(\n    interval_width=0.90,\n    changepoint_prior_scale=0.05,\n    changepoint_range=0.9,\n    yearly_seasonality=False,\n    weekly_seasonality=False,\n    daily_seasonality=True,\n    seasonality_mode='additive'\n    )\n\nm.fit(confirmed_training_dataset)\nfuture = m.make_future_dataframe(periods=61)\nfuture['cap']=confirmed_training_dataset.y+worldPop\nfuture['floor']=confirmed_training_dataset.y*floorVar\nconfirmed_forecast = m.predict(future)\n\n# Mortality rate model\nm_mortality = Prophet ()\nm_mortality.fit(mortality_training_dataset)\nmortality_future = m_mortality.make_future_dataframe(periods=31)\nmortality_forecast = m_mortality.predict(mortality_future)\n\n# Deaths model\nm2 = Prophet(interval_width=0.95)\nm2.fit(death_training_dataset)\nfuture2 = m2.make_future_dataframe(periods=7)\ndeath_forecast = m2.predict(future2)","c4383245":"fig = plot_plotly(m, confirmed_forecast)\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Predictions for Total Confirmed cases in US',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig","b6696ed9":"fig = plot_plotly(m_mortality, mortality_forecast)\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Predictions for mortality rate',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig","82987795":"fig_death = plot_plotly(m2, death_forecast)  \nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Predictions for Deaths',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig_death.update_layout(annotations=annotations)\nfig_death","5e87e593":"# Mortality rate prediction","c43d5117":"## Plotly visualizations","3206c106":"# predictions for confirmed cases in US","77cf69fd":"Note that in the dataset, a place may have reported data more than once per day. For more effective analysis, we convert the data into daily. If the data for the latest day is not available, we will fill it with previous available data.","c43dc199":"# Visualizing Mortality rate in US ","02581edd":"Removing unessecary columns","b84ea58f":"Copying the dataframe into a new dataframe and deleting the columns for China, to get an image of what the status is for the coronavirus in the rest of the world. There has been a lot of talk about Chinese sources being unreliable. Thus modelling how the virus will progress based on Chinese data only can give a skewed result, and if the hypothesis is to be believed that the chinese government is lying about their numbers and artificially deflating them, then a predictive model will give a too low result and perhaps enact a false sense of security. Not providing an urgent response to an epidemic can be the thing that results in the epidemic progressing into a pandemic. ","ab5d0e63":"Worldpop is the variable that holds the cap rate nessecary for fb prophet algoritm to work. Prophet requires columns to be labelled ds and y. For the logaritmic model a cap rate and a floor is nessecary. These are inserted into the pandas dataframe. We are using a constant cap rate. Right now its set at 500k.","fdd9bffc":"## Machine learning with facebook prophet","9dde274a":"# COVID19 Prediction\n## Refenece\n Original code modified from Kaggle notebook by Andy yh https:\/\/www.kaggle.com\/andyyh\/coronavirus-analysis-and-predictions\n# Please compare the result with my other prediction \nhttps:\/\/www.kaggle.com\/myunghosim\/covid19-long-term-prediction-mar14-60days\n"}}