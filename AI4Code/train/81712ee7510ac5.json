{"cell_type":{"35e7350a":"code","f250fe86":"code","3dc60ca7":"code","1cecc52a":"code","cb45d7cf":"code","3bcad1b2":"code","e860bf0d":"code","609edba3":"code","b8312cd9":"code","6ef048ff":"code","c3e3aa25":"code","f44f3f43":"code","75e7ab6f":"code","14f06e9a":"code","b80d618a":"code","d074449d":"code","a6d62db8":"code","c56276c3":"code","e9de9692":"code","49f52447":"code","eaf0fc5a":"code","86a1afaf":"code","f3a5b6de":"code","d224b1cf":"code","fae5bb39":"code","42a9800d":"code","9979a1ea":"code","8b0d345f":"code","0f8dfac0":"code","ab66cbc7":"code","44339d41":"code","0fdd5c4f":"code","049a3118":"code","a657c6b8":"code","105c83db":"code","75360e60":"code","02351719":"code","a76e627e":"code","1526022a":"code","eaaf55a7":"code","ed419570":"code","21e3ae0b":"code","303abea1":"code","bc36349d":"code","086029df":"code","8bb084c9":"code","26e99995":"code","ed23f26e":"code","f94e3a18":"code","91f1fe72":"code","35a6b3ff":"code","2c6e2893":"code","89c6d11e":"code","86b79a53":"code","79c5f464":"code","a191cbea":"code","9460d487":"code","bd2da91e":"code","e4574147":"code","c039269e":"code","1eb0deed":"code","76a38bc5":"code","8dfd4849":"code","630c79aa":"code","65329387":"code","0976e3d8":"code","781914e9":"code","00679518":"code","9ac38b29":"code","19b04e3e":"code","a4ceefeb":"code","b11e5fff":"code","f9d41a53":"code","85883975":"code","2d05f8b9":"code","16b94f16":"code","a680cee8":"code","605d5f3d":"code","f8cb74eb":"code","6b625955":"code","640a2a5e":"code","aa49c3bd":"code","0af0ba1c":"code","8405d8be":"code","516932f5":"code","1c7822b2":"code","a105a84c":"code","55de4431":"code","f5686f92":"code","397dbe20":"code","653bb1c4":"code","13977958":"code","397adbc9":"code","3081fc46":"code","d3c81390":"code","81cc118e":"code","4f64c801":"code","6243bcf3":"code","34dd3e93":"code","78016b8c":"code","85075bf0":"code","d2d48d29":"code","165f150c":"code","aa9d7bd6":"code","f3bc6d2f":"code","d60f4b62":"code","5be5685e":"code","fb9484ee":"code","3d4f993d":"code","e6c1660b":"code","57840b8f":"code","e8d8e7a4":"code","717eac68":"code","1283d47c":"code","4dc54e63":"code","118890da":"code","4d9f4d37":"code","9028d116":"code","1c27398a":"code","d7dd8b02":"code","edc9fbb2":"code","e6c6f72d":"code","1f231141":"code","e573d099":"code","de32cdbc":"code","94bd3349":"code","b5054a10":"code","3f40fcc1":"code","c47f12ff":"code","c1dd453e":"code","1af132af":"code","7c461836":"code","2729a0bd":"code","c94b99c7":"code","c25146f2":"code","22c54de5":"code","e275c816":"code","5e8a9ba0":"code","2ea91fa3":"code","59658e7e":"code","5041fd45":"code","5a1a8b85":"code","0f040b79":"markdown","e0396051":"markdown","446bec0c":"markdown","2f5e6a2c":"markdown","f2f8ce66":"markdown","9b758282":"markdown","16c4347f":"markdown","f9ac84dd":"markdown","4ee532e0":"markdown","0274ce04":"markdown","0146a73d":"markdown","8c51b5a4":"markdown","ece5657a":"markdown","7fe5c2b6":"markdown","64653e2b":"markdown","551fad6d":"markdown","1ab35c66":"markdown","23ae00e9":"markdown","1b0ae264":"markdown","43897aec":"markdown","99dda3b0":"markdown","302d7c59":"markdown","8c5655a3":"markdown","87a7aeef":"markdown","fd4e431e":"markdown","4014a918":"markdown","b5ace777":"markdown","355d0d24":"markdown","db23928f":"markdown","37fefc00":"markdown","58f1bc96":"markdown","665f66c7":"markdown","9d767ff6":"markdown"},"source":{"35e7350a":"1","f250fe86":"1.0","3dc60ca7":"1+1","1cecc52a":"1+3","cb45d7cf":"1\/5","3bcad1b2":"1\/2","e860bf0d":"2**4  #2^4","609edba3":"2+3*5+5 #3*5","b8312cd9":"(2+3)*(5+5)","6ef048ff":"4%2 #%=mod","c3e3aa25":"5%2","f44f3f43":"8%2","75e7ab6f":"#can not start with number or spacial character\nvar = 2","14f06e9a":"var","b80d618a":"x=2\ny=3","d074449d":"x+y","a6d62db8":"x=x+x","c56276c3":"x","e9de9692":"x=x+x","49f52447":"x","eaf0fc5a":"#can't start with number\n12var = 1","86a1afaf":"#can't start with special symbols\n|var=1","f3a5b6de":"#we can use underscore to separate them\nvar_sourav=1","d224b1cf":"var_sourav","fae5bb39":"'Single quote'","42a9800d":"\"This is a doube quote string\"","9979a1ea":"\"I can't go\"","8b0d345f":"x= 'hello'","0f8dfac0":"x","ab66cbc7":"print(x) #there will be no out indicator and there will be no single quotes","44339d41":"num=12\nname = 'sourav' #I wanna print stuffs based on that variable","0fdd5c4f":"print('my number is {} and my name is {}'.format(num,name))","049a3118":"print('My number is {one} and my name is {two}, more {one}'.format(one=num,two=name)) \n# In this case we dont need to think about the format order","a657c6b8":"s='hello'","105c83db":"s[0]","75360e60":"s[4]","02351719":"s[5]","a76e627e":"s[-1]","1526022a":"s[-2]","eaaf55a7":"s='abcdefghijk'","ed419570":"s[0]","21e3ae0b":"s[0:]  #means starting at zero grab everything beyond it","303abea1":"s[:3] #grab everything upto a certain index without the mentioned number not including the number","bc36349d":"s[0:3]","086029df":"s[1:4]","8bb084c9":"# for 'def'\ns[3:6]","26e99995":"# we can make a list of numbers \n[1,2,3]","ed23f26e":"#we can make a list of strings also\n['a','b','c']","f94e3a18":"my_list=['a','b','c']","91f1fe72":"my_list.append('d')","35a6b3ff":"my_list","2c6e2893":"my_list[0]","89c6d11e":"my_list[0:]","86b79a53":"my_list[1:3]  #compared to strings index points are separeted by commas","79c5f464":"#How to replace the values of the list?\nmy_list[0]='NEW'","a191cbea":"my_list","9460d487":"#what about the strings???\ns='hell'","bd2da91e":"s[0]='n'  #'str' object does not support item assignment\n","e4574147":"nest=[1,2,[3,4]]","c039269e":"nest","1eb0deed":"nest[2]","76a38bc5":"nest[2][1]","8dfd4849":"nest=[1,2,3,[4,5,['target']]]","630c79aa":"nest[3]","65329387":"nest[3][2]","0976e3d8":"print(nest[3][2][0])","781914e9":"dic = {'key1': 'value','key2':'123'}","00679518":"dic['key1']","9ac38b29":"dic['key2']","19b04e3e":"#dictionary can take in any items as their values\nd={'k1':[1,2,3]}  #1,2,3 are items\n","a4ceefeb":"my_list=d['k1']  #for any strings dont forget to put apostphes ","b11e5fff":"my_list","f9d41a53":"my_list[0]","85883975":"d['k1'][1]","2d05f8b9":"d={'k1':{'innerkey':[1,2,3]}}","16b94f16":"d['k1']","a680cee8":"my_dic=d['k1']['innerkey']","605d5f3d":"my_dic","f8cb74eb":"my_dic[2]","6b625955":"True","640a2a5e":"False","aa49c3bd":"my_list=[1,2,3]","0af0ba1c":"my_list[1]  #tuples are similar to list\n#but instead of squre brackets it uses the parenthesis","8405d8be":"tuples=(1,2,3)","516932f5":"tuples[1]","1c7822b2":"my_list=[1,2,3]","a105a84c":"my_list[0] ='new'","55de4431":"my_list","f5686f92":"tuples","397dbe20":"tuples[0]='new'  #'tuple' object does not support item assignment","653bb1c4":"{1,2,3}","13977958":"{1,1,1,1,2,2,2,2,2,3,3,3,3,3,3}   #set is defined by only unique elements","397adbc9":"set([1,1,1,1,2,2,2,2,2,3,3,3,3])","3081fc46":"s={1,2,3}","d3c81390":"s.add(4)","81cc118e":"s","4f64c801":"1>2","6243bcf3":"1<2","34dd3e93":"1>=2","78016b8c":"1<=2","85075bf0":"1==1","d2d48d29":"1!=3","165f150c":"'hi'=='bye'","aa9d7bd6":"(1<2) and (2<3)","f3bc6d2f":"(1<2) and (2>3)","d60f4b62":"(1<2) or (2>3) or (1==1)","5be5685e":"True and True","fb9484ee":"True and False","3d4f993d":"True or False","e6c1660b":"if (1<=2):\n    print('yep')","57840b8f":"if True:\n    print('perform code')","e8d8e7a4":"if True:\n    x=2+2","717eac68":"x","1283d47c":"if (1==3):\n    print('first')\nelse:\n    print('Last')","4dc54e63":"if (1 != 2):\n    print('First')\nelse:\n    print('last')","118890da":"# now for multiple condtions\nif (1 == 2):\n    print('First')\nelif(4==4):\n    print('Second')\n    \n#only executes the first true conditions\nelif(3==3):\n    print('Middle')\nelse:\n    print('last')","4d9f4d37":"item=[1,2,3,4,5,6]\n#for item in item:\n   # print(item)","9028d116":"#in place of items there can be anything like\n#for jelly in (item):\n     #print(jelly)\n#int object dosent support iterations","1c27398a":"#In the case of item example the appropriate word after for must be num\n#item=[1,2,3,4,5,6]\n#for num in item:\n   # print (num)","d7dd8b02":"#we can print anything other than the elements inside the list\nitem=[1,2,3,4,5,6]\nfor num in item:\n    print('hello')","edc9fbb2":"seq = [1,2,3,4,5]\nfor jelly in seq:\n    print(jelly+jelly)","e6c6f72d":"i=1\nwhile i<5:\n    print('i is {}'.format(i))\n    i=i+1","1f231141":"range(0,5) #ITS A GENERATOR","e573d099":"for x in range(0,5):\n    print(x)","de32cdbc":"list(range(0,5))","94bd3349":"list(range(10))","b5054a10":"x=[1,2,3,4]\nout=[]\nfor num in x:\n   out.append(num**2) \nout","3f40fcc1":"[num**2 for num in x]","c47f12ff":"out=[num**2 for num in x]","c1dd453e":"out","1af132af":"# keyword for function is def\ndef my_func(param1):\n    print(param1)","7c461836":"my_func('hello')","2729a0bd":"def my_fun(name='default name'):\n    print('Hello '+name)","c94b99c7":"my_fun('Sourav')","c25146f2":"my_fun()","22c54de5":"my_fun(name='Sourav')","e275c816":"my_fun","5e8a9ba0":"def squre(num):\n    return num**2","2ea91fa3":"out=squre(2)\nout","59658e7e":"def squre(num):\n    \"\"\"\n    THIS IS A DOCUMENTATION STRING\n    \n    CAN GO MULTIPLE LINES\n    \n    THIS FUNCTION REQUIRES A NUMBER\n    \n    \"\"\"\n    return num**2","5041fd45":"squre(4)","5a1a8b85":"squre","0f040b79":"How to add elements to set???","e0396051":"**Boolean**","446bec0c":"We can also call the set function.   set()\nwhereas we can select the unique elements from the list","2f5e6a2c":"**How to Grab specific elements from the string**","f2f8ce66":"**Strings**","9b758282":"**I will  use tuple when I want a user cant change the value of the list.**\n**Tuple is immutable and list is mutable**","16c4347f":"**Dictionaries : Uses the curly brackets  {'key1': 'value'}**","f9ac84dd":"**For Loops**","4ee532e0":"**range()**","0274ce04":"**list comprehension**","0146a73d":"**Then whats the difference between tuples and list???**","8c51b5a4":"**Tuples**","ece5657a":"**Nested Dictionary**","7fe5c2b6":"**We can do with the strings also**","64653e2b":"**LIST: The sequence of elemens in a set of squre brackets separeted by commas**\n","551fad6d":"**How to grab the item of the list??**","1ab35c66":"**How to grab more than one element?**","23ae00e9":"**Numbers**","1b0ae264":"**MOD FUNCtion**","43897aec":"**Documantation String**","99dda3b0":"**if,elif, else Statements**","302d7c59":"**Print staff based on the variable**","8c5655a3":"**Comparison Operators**","87a7aeef":"**While loops**","fd4e431e":"WE can nest nest list inside of one another\n","4014a918":"**Logic Operators**","b5ace777":"**Variable Assignment**","355d0d24":"**Exponents**","db23928f":"**Set is a collection of unique elements. Uses the curly brackets like  dictionaries.**","37fefc00":"* Data types\n* Numbers\n* Strings\n* Printing\n* Lists\n* Dictionaries\n* Booleans\n* Tuples\n* Sets\n* Comparison Operators\n* if, elif, else Statements\n* for Loops\n* while Loops\n* range()\n* list comprehension\n* functions\n* lambda expressions\n* map and filter\n* methods","58f1bc96":"**Data Types**","665f66c7":"**functions**","9d767ff6":"**How to add element to the list???**\n**The answer is use the append method**"}}