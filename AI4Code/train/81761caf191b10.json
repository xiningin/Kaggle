{"cell_type":{"dfa3bb7c":"code","2f258f58":"code","8f1f68a7":"code","687702f9":"code","4d1c9e1b":"code","dd344ad7":"code","8783fd74":"code","4cd5056e":"code","2c60edb5":"code","668f15d8":"code","2b899e45":"code","ce7a86b4":"code","ed59b736":"code","54d99df4":"code","b2fe4664":"code","27089e8b":"code","fe71e500":"code","28c4e0c4":"code","f6f88d4b":"code","8f2674ae":"code","248a399a":"code","cf2d2683":"code","32231b3d":"code","2675ff46":"code","2cf9f3e8":"code","6c9dc36b":"code","338860e8":"code","3dcd74a0":"code","b9f892dd":"code","4c7eb5eb":"code","852bb31d":"code","f620708f":"code","807c6ae2":"code","939f2437":"code","c686df71":"code","99695a7c":"code","181d1d87":"code","2a8d5d08":"code","b98991df":"code","172b1a45":"code","c6bf9c56":"code","cc28028d":"code","7b602aeb":"code","db2c6a53":"code","2ae17286":"code","c72275c8":"code","1057c2e7":"code","dabb2f52":"code","29ab40c7":"code","cd88968d":"code","e407790e":"code","fa6a670f":"code","8e81161c":"code","e80b34e9":"code","2fd45595":"code","c1902349":"code","b9814078":"code","526b2932":"code","121cd3c4":"code","d8d37b87":"code","76077713":"code","c7e50df2":"code","758ac6b9":"markdown","2d65dd4c":"markdown","27af4238":"markdown","3927d8c2":"markdown","02f0707f":"markdown","071adc93":"markdown","fa30b087":"markdown","f6aaffe7":"markdown","03b7ac5e":"markdown","e58711e1":"markdown","e7a05fcd":"markdown","6e0e8ee2":"markdown","ff636c78":"markdown","1526ad2c":"markdown","ac5f3850":"markdown","85a9c169":"markdown","0dfe4d2d":"markdown","ba35d464":"markdown","1a6430e7":"markdown","9a687cf1":"markdown","9a9f1d83":"markdown","9c6be845":"markdown","e7608c5f":"markdown","bf7c6e8e":"markdown","b0aec444":"markdown","426b158f":"markdown","29e4cd70":"markdown","3d06a23e":"markdown","7b9fe910":"markdown","b16baeda":"markdown","346c46d9":"markdown","4d09d051":"markdown","33275304":"markdown","8d1c78e9":"markdown","190aea6c":"markdown","f0e2379c":"markdown","2c670ebd":"markdown","8658d271":"markdown","680ddbe2":"markdown","a51d63de":"markdown","a105617a":"markdown","ada00c8c":"markdown","27af9dc7":"markdown","ce231430":"markdown","37bacc10":"markdown"},"source":{"dfa3bb7c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f258f58":"# arrays and dataframes\nimport pandas as pd\nimport numpy as np\n\n# visualization imports\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# time series - statsmodels\nfrom statsmodels.tsa.filters.hp_filter import hpfilter  # Hodrick Prescott filter for cyclic & trend separation\nfrom statsmodels.tsa.seasonal import seasonal_decompose # Error Trend Seasonality decomposition\n\n# holt winters \nfrom statsmodels.tsa.holtwinters import SimpleExpSmoothing   # single exponential smoothing as in ewm of pandas\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing # double and triple exponential smoothing\n\n# consistent plot size wherever not specifiied\nfrom pylab import rcParams\nrcParams['figure.figsize'] = (12,5)\nrcParams['xtick.labelsize'] = 12\nrcParams['ytick.labelsize'] = 12\nrcParams['axes.labelsize'] = 12","8f1f68a7":"# US Macro economic data\nusmacro = pd.read_csv('\/kaggle\/input\/time-series-data-1\/macrodata.csv',index_col=0,parse_dates=True)","687702f9":"usmacro.head()","4d1c9e1b":"# visualize the realgdp --- > will use the capabilities of pandas plotting capability\nusmacro['realgdp'].plot(figsize=(12,5),title='US Macro Econmic Data').autoscale(axis='x',tight=True)","dd344ad7":"# tuple unpacking, lambda as 1600 to analyze the quarterly trend \ncycles,trend = hpfilter(usmacro['realgdp'],lamb=1600) ","8783fd74":"usmacro['gdp_trend'] = trend\nusmacro['gdp_cycles'] = cycles","4cd5056e":"usmacro[['realgdp','gdp_trend']].plot(figsize=(12,5),title='Hodrick Prescott Filter - Showing the Real GDP and Trend').autoscale(axis='x',tight=True)","2c60edb5":"# Plot the cyclic component\nusmacro[['realgdp','gdp_cycles']].plot(figsize=(12,5),title='Showing the Real GDP and Cyclic Component').autoscale(axis='x',tight=True)","668f15d8":"usmacro[['gdp_trend','realgdp']]['2000-03-31':].plot(figsize=(12,8),title='GDP & Trend since year 2000').autoscale(axis='x',tight=True);","2b899e45":"airline = pd.read_csv('\/kaggle\/input\/time-series-data-1\/airline_passengers.csv',index_col='Month', parse_dates=True)","ce7a86b4":"airline.head()","ed59b736":"# decompose the time series\ndecompose_result = seasonal_decompose(airline['Thousands of Passengers'],model='multiplicative')","54d99df4":"decompose_result.plot()","b2fe4664":"decompose_result.plot();","27089e8b":"airline.head()","fe71e500":"airline.dropna(inplace=True)","28c4e0c4":"airline['6-month-SMA'] = airline['Thousands of Passengers'].rolling(window=6).mean()","f6f88d4b":"airline['12-month-SMA'] = airline['Thousands of Passengers'].rolling(window=12).mean()","8f2674ae":"airline.plot(title='Simple Moving Averages');","248a399a":"airline.head(12) ","cf2d2683":"airline.head()","32231b3d":"airline['ewma12'] = airline['Thousands of Passengers'].ewm(span=12,adjust=False).mean()","2675ff46":"airline[['Thousands of Passengers','ewma12']].plot();","2cf9f3e8":"airline[['Thousands of Passengers','ewma12','6-month-SMA','12-month-SMA']].plot();","6c9dc36b":"# set the span and the smoothing factor alpha\nspan = 12\nalpha = 2\/(span+1)","338860e8":"airline.columns","3dcd74a0":"# Set the frequency of the date time index as Monthly start as indicated by the data\nairline.index.freq = 'MS' ","b9f892dd":"airline.head()","4c7eb5eb":"airline.index","852bb31d":"airline['SES12'] = SimpleExpSmoothing(airline['Thousands of Passengers']).fit(smoothing_level=alpha,optimized=False).fittedvalues.shift(-1)","f620708f":"airline.head()","807c6ae2":"airline[['Thousands of Passengers','ewma12','SES12']].plot(title='Pandas EWMA and Statsmodels Holt Winters Single Exponential Smoothing');","939f2437":"airline['DES12'] = ExponentialSmoothing(airline['Thousands of Passengers'],trend='add').fit().fittedvalues.shift(-1)","c686df71":"airline[['Thousands of Passengers','SES12','DES12']].plot(title='Holt Winters Single & Double Exponential Smoothing');","99695a7c":"airline[['Thousands of Passengers','SES12','DES12']].iloc[:24].plot(title='Holt Winters Single & Double Exponential Smoothing Last 24 months').autoscale(axis='x',tight=True);\n","181d1d87":"airline['DES12_mul'] = ExponentialSmoothing(airline['Thousands of Passengers'],trend='mul').fit().fittedvalues.shift(-1)","2a8d5d08":"airline[['Thousands of Passengers','DES12','DES12_mul']].iloc[:24].plot(title='Holt Winters Double Exponential Smoothing Last (Additive vs Multiplicative)').autoscale(axis='x',tight=True);","b98991df":"airline['TESadd12'] = ExponentialSmoothing(airline['Thousands of Passengers'],trend='add',seasonal='add',seasonal_periods=12).fit().fittedvalues","172b1a45":"airline.head()","c6bf9c56":"airline['TESmul12'] = ExponentialSmoothing(airline['Thousands of Passengers'],trend='mul',seasonal='mul',seasonal_periods=12).fit().fittedvalues","cc28028d":"airline[['Thousands of Passengers','TESadd12','TESmul12']].iloc[:24].plot(title='Holt Winters Triple Exponential Smoothing Last (Additive vs Multiplicative)').autoscale(axis='x',tight=True);","7b602aeb":"airline  = pd.read_csv('\/kaggle\/input\/time-series-data-1\/airline_passengers.csv',index_col='Month',\n                      parse_dates=True)","db2c6a53":"airline.index.freq = 'MS'","2ae17286":"airline.index","c72275c8":"airline.tail()","1057c2e7":"# Number of months of data \nlen(airline)","dabb2f52":"# Split into train and test set\ntrain_airline = airline[:108] \ntest_airline = airline[108:] ","29ab40c7":"len(test_airline)","cd88968d":"fitted_model = ExponentialSmoothing(train_airline['Thousands of Passengers'],trend='mul',seasonal='mul',seasonal_periods=12).fit()","e407790e":"test_predictions = fitted_model.forecast(36).rename('HW Test Forecast')","fa6a670f":"test_predictions[:10]","8e81161c":"train_airline['Thousands of Passengers'].plot(legend=True,label='TRAIN')\ntest_airline['Thousands of Passengers'].plot(legend=True,label='TEST',figsize=(12,8))\nplt.title('Train and Test Data');","e80b34e9":"train_airline['Thousands of Passengers'].plot(legend=True,label='TRAIN')\ntest_airline['Thousands of Passengers'].plot(legend=True,label='TEST',figsize=(12,8))\ntest_predictions.plot(legend=True,label='PREDICTION')\nplt.title('Train, Test and Predicted Test using Holt Winters');","2fd45595":"train_airline['Thousands of Passengers'].plot(legend=True,label='TRAIN')\ntest_airline['Thousands of Passengers'].plot(legend=True,label='TEST',figsize=(12,8))\ntest_predictions.plot(legend=True,label='PREDICTION',xlim=['1958-01-01','1961-01-01']);","c1902349":"from sklearn.metrics import mean_absolute_error,mean_squared_error","b9814078":"print(f'Mean Absolute Error = {mean_absolute_error(test_airline,test_predictions)}')","526b2932":"print(f'Mean Squared Error = {mean_squared_error(test_airline,test_predictions)}')","121cd3c4":"test_airline.describe()","d8d37b87":"final_model = ExponentialSmoothing(airline['Thousands of Passengers'],trend='mul',seasonal='mul',seasonal_periods=12).fit()","76077713":"forecast_predictions = final_model.forecast(steps=36)","c7e50df2":"airline['Thousands of Passengers'].plot(figsize=(12,8),legend=True,label='Current Airline Passengers')\nforecast_predictions.plot(legend=True,label='Forecasted Airline Passengers')\nplt.title('Airline Passenger Forecast');","758ac6b9":"Although minor, the multiplicative adjustment gives a better result compared to the additive adjustment for the trend.","2d65dd4c":"# Part II - Fit various smoothing models to existing data","27af4238":"We will add trend as an additional column in the data frame -- makes plotting easier with pandas","3927d8c2":"To demonstrate the seasonal decomposition capability of statsmodels, I will make use of the airline passenger data.\n\nRemember - Additive model is used when the trend component is more constant over time. Example, every year 20,000 passengers are added. Multiplicative model is used when the trend increases\/decreases at a non linear rate. example, every year the number of airline passengers doubles by 20,000.","02f0707f":"NOTE: For some reason, when optimized=False is passed into .fit(), the statsmodels SimpleExpSmoothing function shifts fitted values down one row. We fix this by adding .shift(-1) after .fittedvalues","071adc93":"Lets check this out since year 2000\n","fa30b087":"## Holt Winters - Simple, Double and Triple Exponential Smoothing","f6aaffe7":"Moving Averages and Single Exponential Smoothing does a poor job of forecasting when there is trend and seasonality in the data. Double and Triple exponential smoothing is best suited for this kind of timeseries data.Holt winters has all the three variations - Single, Double and Triple exponential smoothing. ","03b7ac5e":"Span corresponds to what is commonly called an \u201cN-day EW moving average\u201d.Alpha specifies the smoothing factor \ndirectly.\n\nRefer https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/computation.html#exponentially-weighted-windows","e58711e1":"The decomposition of a time series attempts to isolate individual components such as error, trend and seasonality. Statsmodels provided *seasonal decomposition* tool to separate out the different components.","e7a05fcd":"Lets read the airline data again to have a fresh copy","6e0e8ee2":"### Fit the model on the train set\nSeasonal periods with value 12 indicates the seasonality we expect in the data. for airline passenger we can safely assume that the seasonality would repeat every 12 months.","ff636c78":"## ETS - Error, Trend and Seasonality Decomposition","1526ad2c":"Next we will plot also the predicted test data","ac5f3850":"Now we have the GDP trend which is sensitive to the long term fluctuations and not to the short term fluctuations. This makes more sense for analysing the business life cycle over a well defined period. Similarly, the trend can be analyzed by varying the values of lambda to check for annual and monthly trend. ","85a9c169":"The predictions are not as bad as I thought earlier. The MAE is very less compared to the mean of the true test data. So not a bad job till now. ","0dfe4d2d":"### Import Libraries\nNote the statsmodels specific libraries used in this kernel. \n  ","ba35d464":"## Comparing SMA to EWMA","1a6430e7":"# Introduction","9a687cf1":"So here we see the original graph, the trend, seasonal and the resid or the error.","9a9f1d83":"Double Exponential smoothing uses a smoothing factor that addresses trend. \nTriple Exponential smoothing uses a smoothing factor that addresses seasonality.","9c6be845":"### Split into training and test set ","e7608c5f":"Plot for the recent rows","bf7c6e8e":"Tip: By default, the plot gets plotted twice. To get rid of this, just use a semi-colon at the end of the plot. ","b0aec444":"Any of the columns can be explored and used for time series analysis. But first we will visualize one of the columns - realgdp","426b158f":"## Triple Exponential Smoothing ","29e4cd70":"### Please leave your comment\/feedback and upvote if you liked this kernel and found it useful. ","3d06a23e":"Note that rolling introduces the NaN depending on the window size selected. However there are some disadvantages of simple moving average\n- Smaller windows will lead to more noise, rather than signal\n- It will always lag by the size of the window (see the MA starts after a certain lag above in the figure)\n- It will never reach to full peak or valley of the data due to the averaging.\n- Does not really inform you about possible future behavior, all it really does is describe trends in your data.\n- Extreme historical values can skew your SMA significantly\n\nTo help fix some of these problems, we have the EWMA or the Exponentially Weighted Moving Average","7b9fe910":"# Hodrick Prescott Filter\nThe Hodrick Prescott filter is used to separate the trend and cyclical component from the time series data. The components are determined by minimising the quadratic loss function where an important element is lambda which is the smoothing parameter. The recommended value of lambda is 1600 when analyzing quarterly data, 6.25 for yearly data and 129,600 for monthly data. Removing the cyclic component essentially, makes the data sensitive to long term fluctuations and not to the short term fluctuations. This is especially important for analyzing the GDP. \n\nRead more about Hodrick Prescott filter here https:\/\/en.wikipedia.org\/wiki\/Hodrick%E2%80%93Prescott_filter#:~:text=The%20Hodrick%E2%80%93Prescott%20filter%20(also,time%20series%20from%20raw%20data.\n","b16baeda":"Here the double exponential smoothing completely overlaps on the original data. Let's plot for the last 24 months.","346c46d9":"# Part I - Time Series Decomposition","4d09d051":"# Moving Averages","33275304":"### Evaluation metrics","8d1c78e9":"Lets replot the above using the multiplicative adjustment instead of additive.","190aea6c":"## Simple Exponential Smoothing - Using Holt Winters\nThis is same as ewm method in Pandas","f0e2379c":"In this kernel, the essentials of the time series analysis is demonstrated. The datasets used is the US macroeconmic data and Airline passengers data.  \n\n- Hodrick Prescott filter to separate the trend and cyclic components \n- Error, Trend and Seasonality Decomposition using Statsmodels Seasonal Decomposition\n- Exponential Smoothing using Pandas EWMA and Holt Winters method for Single, Double and Triple Exponential           Smoothing\n- Forecast into the real future using Holt Winters triple exponential method","2c670ebd":"The trend and cycles can be separated using tuple unpacking","8658d271":"To work with forecasting models like Holt Winters, ARIMA, SARIMA etc., the datetime index frequency needs to be set. The Airline passenger dataset index indicates dates on the start of the month. Hence we can set this as 'MS'","680ddbe2":"Both the EWMA and Holt Winters Single Exponential Smoothing curve fit each other completely. ","a51d63de":"### Forecast into the future\nTill now, we predicted the test values and compared with the true test values. The true forecast can only be once it is done for the real future !!","a105617a":"# Part III - Forecasting with Holt Winters Method","ada00c8c":"## EWMA - Exponentially Weighted Moving Average\nEWMA alows to reduce the lag by putting more weight to the recent readings or values. The amount of weight applied is dependent on the actual parameters in the EWMA and the number of periods given in a window size. \nMore information can be found here https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/computation.html#exponentially-weighted-windows\n\nNote that EWMA applies Single Exponential Smoothing","27af9dc7":"## Note\nThere are many other considerations to be taken while modeling with time series data like lagging, stationarity etc. Refer https:\/\/otexts.com\/fpp2\/stationarity.html\n\n","ce231430":"## SMA - Simple Moving Averages","37bacc10":"## Double Exponential Smoothing"}}