{"cell_type":{"35b77781":"code","73d046ef":"code","c1afbf8c":"code","ccd3bac6":"code","af042438":"code","d999e463":"code","a4640a48":"code","b315dd1f":"code","84c084c4":"code","fce933d5":"code","e64ca5fb":"code","fb567f1f":"code","185f4236":"code","2cecc5f4":"code","df3b0a8a":"code","6b5ab5e9":"code","8ac9e463":"code","5baf5fa7":"code","73b10dad":"code","8983923e":"code","7164cb9c":"markdown","8605debe":"markdown","b2ad83b3":"markdown"},"source":{"35b77781":"# Assigning features and label variables\nweather=['Sunny','Sunny','Overcast','Rainy','Rainy','Rainy','Overcast','Sunny','Sunny',\n'Rainy','Sunny','Overcast','Overcast','Rainy']\ntemp=['Hot','Hot','Hot','Mild','Cool','Cool','Cool','Mild','Cool','Mild','Mild','Mild','Hot','Mild']\n\nplay=['No','No','Yes','Yes','Yes','No','Yes','No','Yes','Yes','Yes','Yes','Yes','No']","73d046ef":"# Import LabelEncoder\nfrom sklearn import preprocessing\n#creating labelEncoder\nle = preprocessing.LabelEncoder()\n# Converting string labels into numbers.\nwheather_encoded=le.fit_transform(weather)\nprint (wheather_encoded)","c1afbf8c":"# Converting string labels into numbers\ntemp_encoded=le.fit_transform(temp)\nlabel=le.fit_transform(play)\nprint (\"Temp:\",temp_encoded)\nprint (\"Play:\",label)","ccd3bac6":"#Combinig weather and temp into single listof tuples\nfeatures=list(zip(wheather_encoded,temp_encoded))\nprint (features)","af042438":"#Import Gaussian Naive Bayes model\nfrom sklearn.naive_bayes import GaussianNB\n\n#Create a Gaussian Classifier\nmodel = GaussianNB()\n\n# Train the model using the training sets\nmodel.fit(features,label)","d999e463":"#Predict Output\npredicted= model.predict([[0,2]]) # 0:Overcast, 2:Mild\nprint(\"Predicted Value:\", predicted)","a4640a48":"from sklearn import datasets\n\n#Load dataset\nwine = datasets.load_wine()","b315dd1f":"# print the names of the 13 features\nprint (\"Features: \", wine.feature_names)\n\n# print the label type of wine(class_0, class_1, class_2)\nprint (\"Labels: \", wine.target_names)\n","84c084c4":"# print data(feature)shape\nwine.data.shape","fce933d5":"# print the wine data features (top 5 records)\nprint (wine.data[0:5])","e64ca5fb":"# print the wine labels (0:Class_0, 1:class_2, 2:class_2)\nprint (wine.target)","fb567f1f":"# Import train_test_split function\nfrom sklearn.model_selection import train_test_split","185f4236":"# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(wine.data, wine.target, test_size=30,random_state=109) # 70% training and 30% test\n\n\n#Import Gaussian Naive Bayes model\nfrom sklearn.naive_bayes import GaussianNB\n\n#Create a Gaussian Classifier\ngnb = GaussianNB()\n\n#Train the model using the training sets\ngnb.fit(X_train, y_train)\ny_pred1 = gnb.predict(X_train)\n\n#Predict the response for test dataset\ny_pred = gnb.predict(X_test)\n","2cecc5f4":"##Evaluating Model\n\n#Import scikit-learn metrics module for accuracy calculation\nfrom sklearn import metrics\n\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy Train:\",metrics.accuracy_score(y_train, y_pred1))","df3b0a8a":"# Model Accuracy Test, how often is the classifier correct?\nprint(\"Accuracy Test:\",metrics.accuracy_score(y_test, y_pred))","6b5ab5e9":"\n##Multinominal NB\nfrom sklearn.feature_extraction import DictVectorizer\n\ndata = [\n{'house': 100, 'street': 50, 'shop': 25, 'car': 100, 'tree': 20},\n\n{'house': 5, 'street': 5, 'shop': 0, 'car': 10, 'tree': 500, 'river': 1}\n] ","8ac9e463":"import numpy as np\n\ndv = DictVectorizer(sparse=False)\nX = dv.fit_transform(data)\nY = np.array([1, 0])","5baf5fa7":"X","73b10dad":"from sklearn.naive_bayes import MultinomialNB\n\nmnb = MultinomialNB()\nmnb.fit(X, Y)","8983923e":"test_data = data = [\n{'house': 80, 'street': 20, 'shop': 15, 'car': 70, 'tree': 10, 'river': \n1},\n\n]\n\nmnb.predict(dv.fit_transform(test_data))\n","7164cb9c":"# 1. Use the given dataset, which consists of weather, temp and play as attributes. Perform the \nfollowing task:\n- i. Apply data pre-processing and convert categorical values into numeric values.\n- ii. Use the list \u201cweather\u201d, \u201ctemp\u201d as features and \u201cplay\u201d as target. Try to create a model using \nNa\u00efve bayes classifier to predict whether a person plays the game depending upon the values \nof weather and temperature.\n- weather=['Sunny','Sunny','Overcast','Rainy','Rainy','Rainy','Overcast','Sunny','Sunny','Rainy','\nSunny','Overcast','Overcast','Rainy']\n- temp=['Hot','Hot','Hot','Mild','Cool','Cool','Cool','Mild','Cool','Mild','Mild','Mild','Hot','Mild']\n- play=['No','No','Yes','Yes','Yes','No','Yes','No','Yes','Yes','Yes','Yes','Yes','No']\n\n\n\n","8605debe":"**Example 2:**","b2ad83b3":"**Example 3:**"}}