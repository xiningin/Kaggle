{"cell_type":{"67886ba7":"code","e0f9ea02":"code","ed75c98b":"code","65a7e542":"code","b60e962b":"code","24fc3621":"code","bd9841c0":"code","bc953127":"code","74341638":"code","d9eee40a":"code","139947db":"code","1d367d6d":"code","13c3d28a":"code","193ecf7c":"code","32f1071a":"markdown","39184adc":"markdown","7f0b4db5":"markdown","d5076b00":"markdown"},"source":{"67886ba7":"!pip install kaggle-environments -U > \/dev\/null 2>&1\n!cp -r ..\/input\/lux-ai-2021\/* .","e0f9ea02":"import numpy as np\nimport json\nfrom pathlib import Path\nimport os\nimport random\nfrom tqdm.notebook import tqdm\nimport torch\nfrom torch import nn\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, DataLoader\nimport torch.optim as optim\nfrom sklearn.model_selection import train_test_split","ed75c98b":"def seed_everything(seed_value):\n    random.seed(seed_value)\n    np.random.seed(seed_value)\n    torch.manual_seed(seed_value)\n    os.environ['PYTHONHASHSEED'] = str(seed_value)\n    \n    if torch.cuda.is_available(): \n        torch.cuda.manual_seed(seed_value)\n        torch.cuda.manual_seed_all(seed_value)\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = True\n\nseed = 42\nseed_everything(seed)","65a7e542":"def to_label(action):\n    strs = action.split(' ')\n    unit_id = strs[1]\n    unit_pos = None\n    if strs[0] == 'm':\n        label = {'c': None, 'n': 0, 's': 1, 'w': 2, 'e': 3}[strs[2]]\n        #print(strs)\n        #unit_pos = (int(strs[4]),int(strs[5]))\n    elif strs[0] == 'bcity':\n        label = 4\n    else:\n        label = None\n    \n    return unit_id, label\n\n\ndef depleted_resources(obs):\n    for u in obs['updates']:\n        if u.split(' ')[0] == 'r':\n            return False\n    return True\n\n\ndef create_dataset_from_json(episode_dir, team_name='Toad Brigade'): \n    obses = {}\n    samples = []\n    append = samples.append\n    \n    episodes = [path for path in Path(episode_dir).glob('*.json') if 'output' not in path.name]\n    for filepath in tqdm(episodes): \n        with open(filepath) as f:\n            json_load = json.load(f)\n\n        ep_id = json_load['info']['EpisodeId']\n        index = np.argmax([r or 0 for r in json_load['rewards']])\n        if json_load['info']['TeamNames'][index] != team_name:\n            continue\n\n        for i in range(len(json_load['steps'])-1):\n            if json_load['steps'][i][index]['status'] == 'ACTIVE':\n                actions = json_load['steps'][i+1][index]['action']\n                obs = json_load['steps'][i][0]['observation']\n                \n                if depleted_resources(obs):\n                    break\n                \n                obs['player'] = index\n                obs = dict([\n                    (k,v) for k,v in obs.items() \n                    if k in ['step', 'updates', 'player', 'width', 'height']\n                ])\n                obs_id = f'{ep_id}_{i}'\n                obses[obs_id] = obs\n                                \n                for action in actions:\n                    unit_id, label = to_label(action)\n                    if label is not None:\n                        append((obs_id, unit_id,label))\n\n    return obses, samples","b60e962b":"episode_dir = '..\/input\/lux-ai-episodes'\nobses, samples = create_dataset_from_json(episode_dir)\nprint('obses:', len(obses), 'samples:', len(samples))","24fc3621":"labels = [sample[-1] for sample in samples]\nactions = ['north', 'south', 'west', 'east', 'bcity']\nfor value, count in zip(*np.unique(labels, return_counts=True)):\n    print(f'{actions[value]:^5}: {count:>3}')","bd9841c0":"def make_uid2pos(obs):\n    ret = {}\n    for update in obs['updates']:\n        strs = update.split(' ')\n        input_identifier = strs[0]\n        \n        if input_identifier == 'u':\n            x = int(strs[4]) \n            y = int(strs[5]) \n            ret[strs[3]] = (x,y)\n    return ret\n# Input for Neural Network\ndef make_array(obs):\n    width, height = obs['width'], obs['height']\n    x_shift = (32 - width) \/\/ 2\n    y_shift = (32 - height) \/\/ 2\n    cities = {}\n    \n    b = np.zeros((20, 32, 32), dtype=np.float32)\n    \n    for update in obs['updates']:\n        strs = update.split(' ')\n        input_identifier = strs[0]\n        \n        if input_identifier == 'u':\n            x = int(strs[4]) + x_shift\n            y = int(strs[5]) + y_shift\n            wood = int(strs[7])\n            coal = int(strs[8])\n            uranium = int(strs[9])\n#             if unit_id == strs[3]:\n#                 # Position and Cargo\n#                 b[:2, x, y] = (\n#                     1,\n#                     (wood + coal + uranium) \/ 100\n#                 )\n#             else:\n#                 # Units\n            team = int(strs[2])\n            cooldown = float(strs[6])\n            idx = 2 + (team - obs['player']) % 2 * 3\n            b[idx:idx + 3, x, y] = (\n                1,\n                cooldown \/ 6,\n                (wood + coal + uranium) \/ 100\n            )\n        elif input_identifier == 'ct':\n            # CityTiles\n            team = int(strs[1])\n            city_id = strs[2]\n            x = int(strs[3]) + x_shift\n            y = int(strs[4]) + y_shift\n            idx = 8 + (team - obs['player']) % 2 * 2\n            b[idx:idx + 2, x, y] = (\n                1,\n                cities[city_id]\n            )\n        elif input_identifier == 'r':\n            # Resources\n            r_type = strs[1]\n            x = int(strs[2]) + x_shift\n            y = int(strs[3]) + y_shift\n            amt = int(float(strs[4]))\n            b[{'wood': 12, 'coal': 13, 'uranium': 14}[r_type], x, y] = amt \/ 800\n        elif input_identifier == 'rp':\n            # Research Points\n            team = int(strs[1])\n            rp = int(strs[2])\n            b[15 + (team - obs['player']) % 2, :] = min(rp, 200) \/ 200\n        elif input_identifier == 'c':\n            # Cities\n            city_id = strs[2]\n            fuel = float(strs[3])\n            lightupkeep = float(strs[4])\n            cities[city_id] = min(fuel \/ lightupkeep, 10) \/ 10\n    \n    # Day\/Night Cycle\n    b[17, :] = obs['step'] % 40 \/ 40\n    # Turns\n    b[18, :] = obs['step'] \/ 360\n    # Map Size\n    b[19, x_shift:32 - x_shift, y_shift:32 - y_shift] = 1\n\n    return b\n\ndef getsize(obs):\n    return obs['width']\n\nclass LuxDataset(Dataset):\n    def __init__(self, obses, train_samples,val_samples, splt = \"train\"):\n        self.obses = obses\n        self.samples = {}\n        self.splt = splt\n        self.samples[\"train\"] = train_samples\n        self.samples[\"val\"] = val_samples\n        self.obses_array = {k:make_array(obs) for k,obs in obses.items()}\n        self.uid2pos = {k:make_uid2pos(obs) for k,obs in obses.items() }\n        self.obs_size = {k:getsize(obs) for k,obs in obses.items()}\n        del self.obses\n        \n    def __len__(self):\n        return len(self.samples[self.splt])\n\n    def __getitem__(self, idx):\n        obs_id, unit_id, action = self.samples[self.splt][idx]\n        unit_pos = self.uid2pos[obs_id][unit_id]\n        state = self.obses_array[obs_id]\n        #state = make_input(obs, unit_id)\n        size = self.obs_size[obs_id]\n        x_shift = (32 - size) \/\/ 2\n        y_shift = (32 - size) \/\/ 2 # map is always square\n        x = unit_pos[0] + x_shift\n        y = unit_pos[1] + y_shift\n        state[:2,:,:] = 0\n        state[0,x,y] = state[2,x,y]\n        state[1,x,y] = state[4,x,y]\n        \n        return state, action","bc953127":"# Neural Network for Lux AI\nclass BasicConv2d(nn.Module):\n    def __init__(self, input_dim, output_dim, kernel_size, bn):\n        super().__init__()\n        self.conv = nn.Conv2d(\n            input_dim, output_dim, \n            kernel_size=kernel_size, \n            padding=(kernel_size[0] \/\/ 2, kernel_size[1] \/\/ 2)\n        )\n        self.bn = nn.BatchNorm2d(output_dim) if bn else None\n\n    def forward(self, x):\n        h = self.conv(x)\n        h = self.bn(h) if self.bn is not None else h\n        return h\n\n\nclass LuxNet(nn.Module):\n    def __init__(self):\n        super().__init__()\n        layers, filters = 12, 32\n        self.conv0 = BasicConv2d(20, filters, (3, 3), True)\n        self.blocks = nn.ModuleList([BasicConv2d(filters, filters, (3, 3), True) for _ in range(layers)])\n        self.head_p = nn.Linear(filters, 5, bias=False)\n\n    def forward(self, x):\n        h = F.relu_(self.conv0(x))\n        for block in self.blocks:\n            h = F.relu_(h + block(h))\n        h_head = (h * x[:,:1]).view(h.size(0), h.size(1), -1).sum(-1)\n        p = self.head_p(h_head)\n        return p","74341638":"def train_model(model, dataloader, criterion, optimizer, num_epochs):\n    best_acc = 0.0\n\n    for epoch in range(num_epochs):\n        model.cuda()\n        \n        for phase in ['train', 'val']:\n            if phase == 'train':\n                model.train()\n            else:\n                model.eval()\n                \n            epoch_loss = 0.0\n            epoch_acc = 0\n            dataloader.dataset.splt = phase\n            for item in tqdm(dataloader, leave=False):\n                states = item[0].cuda().float()\n                actions = item[1].cuda().long()\n\n                optimizer.zero_grad()\n                \n                with torch.set_grad_enabled(phase == 'train'):\n                    policy = model(states)\n                    loss = criterion(policy, actions)\n                    _, preds = torch.max(policy, 1)\n\n                    if phase == 'train':\n                        loss.backward()\n                        optimizer.step()\n\n                    epoch_loss += loss.item() * len(policy)\n                    epoch_acc += torch.sum(preds == actions.data)\n\n            data_size = len(dataloader.dataset)\n            epoch_loss = epoch_loss \/ data_size\n            epoch_acc = epoch_acc.double() \/ data_size\n\n            print(f'Epoch {epoch + 1}\/{num_epochs} | {phase:^5} | Loss: {epoch_loss:.4f} | Acc: {epoch_acc:.4f}')\n        \n        if epoch_acc > best_acc:\n            traced = torch.jit.trace(model.cpu(), torch.rand(1, 20, 32, 32))\n            traced.save('model.pth')\n            best_acc = epoch_acc","d9eee40a":"model = LuxNet()\ntrain, val = train_test_split(samples, test_size=0.1, random_state=42, stratify=labels)\nbatch_size = 64\nds = LuxDataset(obses, train,val)\ntrain_val_loader = DataLoader(\n    ds, \n    batch_size=batch_size, \n    shuffle=True, \n    num_workers=2\n)\n# val_loader = DataLoader(\n#     ds, \n#     batch_size=batch_size, \n#     shuffle=False, \n#     num_workers=2\n# )\n#dataloaders_dict = {\"train\": train_loader, \"val\": val_loader}\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.AdamW(model.parameters(), lr=1e-3)","139947db":"train_model(model, train_val_loader, criterion, optimizer, num_epochs=15)","1d367d6d":"%%writefile agent.py\nimport os\nimport numpy as np\nimport torch\nfrom lux.game import Game\n\n\npath = '\/kaggle_simulations\/agent' if os.path.exists('\/kaggle_simulations') else '.'\nmodel = torch.jit.load(f'{path}\/model.pth')\nmodel.eval()\n\n\ndef make_input(obs, unit_id):\n    width, height = obs['width'], obs['height']\n    x_shift = (32 - width) \/\/ 2\n    y_shift = (32 - height) \/\/ 2\n    cities = {}\n    \n    b = np.zeros((20, 32, 32), dtype=np.float32)\n    \n    for update in obs['updates']:\n        strs = update.split(' ')\n        input_identifier = strs[0]\n        \n        if input_identifier == 'u':\n            x = int(strs[4]) + x_shift\n            y = int(strs[5]) + y_shift\n            wood = int(strs[7])\n            coal = int(strs[8])\n            uranium = int(strs[9])\n            if unit_id == strs[3]:\n                # Position and Cargo\n                b[:2, x, y] = (\n                    1,\n                    (wood + coal + uranium) \/ 100\n                )\n            #else:\n            # Units\n            team = int(strs[2])\n            cooldown = float(strs[6])\n            idx = 2 + (team - obs['player']) % 2 * 3\n            b[idx:idx + 3, x, y] = (\n                1,\n                cooldown \/ 6,\n                (wood + coal + uranium) \/ 100\n            )\n        elif input_identifier == 'ct':\n            # CityTiles\n            team = int(strs[1])\n            city_id = strs[2]\n            x = int(strs[3]) + x_shift\n            y = int(strs[4]) + y_shift\n            idx = 8 + (team - obs['player']) % 2 * 2\n            b[idx:idx + 2, x, y] = (\n                1,\n                cities[city_id]\n            )\n        elif input_identifier == 'r':\n            # Resources\n            r_type = strs[1]\n            x = int(strs[2]) + x_shift\n            y = int(strs[3]) + y_shift\n            amt = int(float(strs[4]))\n            b[{'wood': 12, 'coal': 13, 'uranium': 14}[r_type], x, y] = amt \/ 800\n        elif input_identifier == 'rp':\n            # Research Points\n            team = int(strs[1])\n            rp = int(strs[2])\n            b[15 + (team - obs['player']) % 2, :] = min(rp, 200) \/ 200\n        elif input_identifier == 'c':\n            # Cities\n            city_id = strs[2]\n            fuel = float(strs[3])\n            lightupkeep = float(strs[4])\n            cities[city_id] = min(fuel \/ lightupkeep, 10) \/ 10\n    \n    # Day\/Night Cycle\n    b[17, :] = obs['step'] % 40 \/ 40\n    # Turns\n    b[18, :] = obs['step'] \/ 360\n    # Map Size\n    b[19, x_shift:32 - x_shift, y_shift:32 - y_shift] = 1\n\n    return b\n\n\ngame_state = None\ndef get_game_state(observation):\n    global game_state\n    \n    if observation[\"step\"] == 0:\n        game_state = Game()\n        game_state._initialize(observation[\"updates\"])\n        game_state._update(observation[\"updates\"][2:])\n        game_state.id = observation[\"player\"]\n    else:\n        game_state._update(observation[\"updates\"])\n    return game_state\n\n\ndef in_city(pos):    \n    try:\n        city = game_state.map.get_cell_by_pos(pos).citytile\n        return city is not None and city.team == game_state.id\n    except:\n        return False\n\n\ndef call_func(obj, method, args=[]):\n    return getattr(obj, method)(*args)\n\n\nunit_actions = [('move', 'n'), ('move', 's'), ('move', 'w'), ('move', 'e'), ('build_city',)]\ndef get_action(policy, unit, dest):\n    for label in np.argsort(policy)[::-1]:\n        act = unit_actions[label]\n        pos = unit.pos.translate(act[-1], 1) or unit.pos\n        if pos not in dest or in_city(pos):\n            return call_func(unit, *act), pos \n            \n    return unit.move('c'), unit.pos\n\n\ndef agent(observation, configuration):\n    global game_state\n    \n    game_state = get_game_state(observation)    \n    player = game_state.players[observation.player]\n    actions = []\n    \n    # City Actions\n    unit_count = len(player.units)\n    for city in player.cities.values():\n        for city_tile in city.citytiles:\n            if city_tile.can_act():\n                if unit_count < player.city_tile_count: \n                    actions.append(city_tile.build_worker())\n                    unit_count += 1\n                elif not player.researched_uranium():\n                    actions.append(city_tile.research())\n                    player.research_points += 1\n    \n    # Worker Actions\n    dest = []\n    for unit in player.units:\n        if unit.can_act() and (game_state.turn % 40 < 30 or not in_city(unit.pos)):\n            state = make_input(observation, unit.id)\n            \n            with torch.no_grad():\n                p = model(torch.from_numpy(state).unsqueeze(0))\n\n            policy = p.squeeze(0).numpy()\n\n            action, pos = get_action(policy, unit, dest)\n            actions.append(action)\n            dest.append(pos)\n\n    return actions","13c3d28a":"from kaggle_environments import make\n\nenv = make(\"lux_ai_2021\", configuration={\"width\": 24, \"height\": 24, \"loglevel\": 2, \"annotations\": True}, debug=False)\nsteps = env.run(['agent.py', 'agent.py'])\nenv.render(mode=\"ipython\", width=1200, height=800)","193ecf7c":"!tar -czf submission.tar.gz *","32f1071a":"\n### This is a faster version of [Lux AI with Imitation Learning](https:\/\/www.kaggle.com\/shoheiazuma\/lux-ai-with-imitation-learning) by [sazuma](http:\/\/https:\/\/www.kaggle.com\/shoheiazuma), with the cost of consuming more RAM. The speed up is about 2x (~800s vs ~1628.7s)\n\n#### The \"states\" in the original code ((20,32,32) numpy array) is composed of general map information and the unit information highlighted in layers 0 and 1. I store the observations in the dataset, and only change the content in layers 0 and 1 while calling `__getitem__` in the dataset. The only difference to the original implementation is that I do not erase the content in layers2~4 for the selected unit.","39184adc":"# Submission","7f0b4db5":"# Training","d5076b00":"# Preprocessing"}}