{"cell_type":{"0c46d81f":"code","2d4a73ce":"code","41c5fdaa":"code","7009f7ba":"code","7f7a9b68":"code","9bee2753":"code","7097da10":"code","3a064c72":"code","39ef6909":"code","2d109ecb":"code","52bbf95d":"code","8b37538d":"code","643c95f1":"code","4ebad217":"code","accceb8b":"code","0cf508ec":"code","e3a15aa9":"code","169d634e":"code","e70ef5db":"code","e0e61d71":"code","e730038b":"code","c3242fac":"code","dcb5bdec":"code","883465bc":"code","9b2b8946":"code","3195c95b":"code","9f854b9e":"code","41f261bc":"code","507df481":"code","ec4d7414":"code","7e116dc6":"code","10bb71a4":"code","d3b159f6":"code","2d1ec4a0":"code","6e51d329":"code","c4b2d93d":"code","554138bc":"code","898b763d":"code","8c0a8c60":"code","63f003f0":"code","9b162e9d":"markdown","190f5b0f":"markdown","c7b1a3fb":"markdown","58c24a9f":"markdown","fd34d5c4":"markdown","b26683fd":"markdown","0eb5b98b":"markdown","572400b8":"markdown"},"source":{"0c46d81f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d4a73ce":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest =pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nss =pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","41c5fdaa":"test.head()","7009f7ba":"train.head()","7f7a9b68":"train.info()","9bee2753":"train.describe()","7097da10":"train.isnull().sum()","3a064c72":"test.isnull().sum()","39ef6909":"sns.countplot(x='Survived', data = train)","2d109ecb":"sns.countplot(x='Survived', data = train, hue='Sex')","52bbf95d":"sns.countplot(x='Survived', data = train, hue='Pclass')","8b37538d":"sns.countplot(x='SibSp', data = train)","643c95f1":"train['Age'].hist(bins=30,alpha=0.3)","4ebad217":"train['Fare'].hist(color='green',bins=40,figsize=(8,4))","accceb8b":"sns.set_theme(style=\"whitegrid\")\nsns.boxplot(x='Pclass', y='Age', data=train)","0cf508ec":"def impute_age(columns):\n    Age = columns[0]\n    Pclass = columns[1]\n    \n    if pd.isnull(Age):\n        if Pclass== 1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age\n            ","e3a15aa9":"train['Age'] = train[['Age','Pclass']].apply(impute_age, axis='columns')\ntest['Age'] = test[['Age','Pclass']].apply(impute_age, axis='columns')","169d634e":"train.isnull().sum()","e70ef5db":"test.isnull().sum()","e0e61d71":"train = train.drop(['PassengerId','Name','Ticket','Cabin','Embarked','Fare'], axis='columns')\ntest = test.drop(['PassengerId','Name','Ticket','Cabin','Embarked','Fare'], axis='columns')","e730038b":"dummies_train = pd.get_dummies(train['Sex'], drop_first=True)\ndummies_test = pd.get_dummies(test['Sex'], drop_first=True)","c3242fac":"train = pd.concat([train, dummies_train], axis='columns')\ntest = pd.concat([test, dummies_test], axis='columns')","dcb5bdec":"train.head()","883465bc":"test.head()","9b2b8946":"train.drop('Sex', axis='columns', inplace = True)\ntest.drop('Sex', axis='columns', inplace = True)","3195c95b":"X = train.drop('Survived',axis='columns')\nX.head()","9f854b9e":"y = train.Survived\ny","41f261bc":"from sklearn import svm\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.tree import DecisionTreeClassifier","507df481":"model_params = {\n    'svm' : {\n        'model' : svm.SVC(gamma='auto'),\n        'params' : {\n            'C' : [1,10,20,50, 100],\n            'kernel' : ['rbf','linear']\n        }\n    },\n    \n    'random forest' : {\n        'model' : RandomForestClassifier(),\n        'params' : {\n            'n_estimators': [1,5,10,50,100]\n        }\n    },\n    \n    'logistic regression' : {\n        'model' : LogisticRegression(solver='liblinear',multi_class='auto'),\n        'params' : {\n            'C' : [1,5,10,50,100]\n        }\n    },\n    \n    'naive bayes gausian' : {\n        'model' : GaussianNB(),\n        'params' : {}\n    },\n    \n    'naive bayes multinomial' : {\n        'model' : MultinomialNB(),\n        'params' : {}\n    },\n    \n    'decision tree' : {\n        'model' : DecisionTreeClassifier(),\n        'params' : {\n            'criterion' : ['gini', 'entropy']\n        }\n    }\n}","ec4d7414":"from sklearn.model_selection import GridSearchCV\nscores = []","7e116dc6":"for model_name, mp in model_params.items():\n    clf = GridSearchCV(mp['model'], mp['params'], cv = 5, return_train_score=False)\n    clf.fit(X,y)\n    scores.append({\n        'model' : model_name,\n        'best score' : clf.best_score_,\n        'best parameters' : clf.best_params_\n    })\n    \n    \ndf = pd.DataFrame(scores,columns=['model','best score','best parameters'])\ndf","10bb71a4":"model = RandomForestClassifier(n_estimators=100)\nmodel.fit(X,y)","d3b159f6":"model.predict(test)","2d1ec4a0":"y_predict = model.predict(test)","6e51d329":"ss.head()","c4b2d93d":"ss.shape","554138bc":"y_predict.shape","898b763d":"submit = pd.DataFrame({'PassengerId': ss['PassengerId'], 'Survived': y_predict})\nsubmit","8c0a8c60":"submit.shape","63f003f0":"submit.to_csv(\"titanic.csv\", index = False)","9b162e9d":"## **Exploratory data analysis**","190f5b0f":"### modeling","c7b1a3fb":"now we can drop the Cabin and also we can safely drop the PassengerId,name, Ticket, and Embarked as it doesn't crate any value","58c24a9f":"### Handling missing data","fd34d5c4":"now we can impute the missing age","b26683fd":"As it can be seen from the above data that in 'Cabin' most of the dats is missing so we can drop it later and 'Age' is having somewhat around 20% missing data which can be replaced ","0eb5b98b":"one hot encoding","572400b8":"now visualizing the data "}}