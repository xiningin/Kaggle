{"cell_type":{"1196ec80":"code","20a53d0c":"code","90a699ee":"code","023d5cef":"code","c40ed006":"code","b7b8e95b":"code","3581b622":"code","96afe98e":"code","1d514f09":"code","4dfd2947":"code","2c775cdd":"code","3dda0c88":"code","56d9edda":"code","c25a7c52":"markdown","14b21b87":"markdown","340d6147":"markdown","974af042":"markdown","f26a3cca":"markdown","9b10234d":"markdown","b5c497eb":"markdown","f60c2049":"markdown","6dc0f333":"markdown","8172c5e7":"markdown","d09bb23a":"markdown","bf927794":"markdown","d8db4343":"markdown","d60d9493":"markdown","9645f0de":"markdown","fe719067":"markdown","12682f77":"markdown"},"source":{"1196ec80":"# TensorFlow and tf.keras\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Helper libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nprint(tf.__version__)","20a53d0c":"fashion_mnist = keras.datasets.fashion_mnist\n\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()","90a699ee":"class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat', \n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n\nprint (train_images.shape)\nprint (len(train_labels))\nprint(train_labels)","023d5cef":"print (test_images.shape)\nprint (len(test_labels))","c40ed006":"#preprocess data\ntrain_images = train_images \/ 255.0\ntest_images = test_images \/ 255.0","b7b8e95b":"# display first image\nplt.figure()\nplt.imshow(train_images[0])\nplt.colorbar()\nplt.grid(False)\n\n# display 25 images with labels\nplt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[i], cmap=plt.cm.binary)\n    plt.xlabel(class_names[train_labels[i]])","3581b622":"model = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),\n    keras.layers.Dense(128, activation=tf.nn.relu),\n    keras.layers.Dense(10, activation=tf.nn.softmax)\n])","96afe98e":"model.compile(optimizer=tf.train.AdamOptimizer(), \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","1d514f09":"model.fit(train_images, train_labels, epochs=5)","4dfd2947":"test_loss, test_acc = model.evaluate(test_images, test_labels)\n\nprint('Test accuracy:', test_acc)","2c775cdd":"predictions = model.predict(test_images)\n\nprint(predictions[0])\nprint(np.argmax(predictions[0]))\nprint(test_labels[0])","3dda0c88":"def plot_image(i, predictions_array, true_label, img):\n  predictions_array, true_label, img = predictions_array[i], true_label[i], img[i]\n  plt.grid(False)\n  plt.xticks([])\n  plt.yticks([])\n  \n  plt.imshow(img, cmap=plt.cm.binary)\n\n  predicted_label = np.argmax(predictions_array)\n  if predicted_label == true_label:\n    color = 'blue'\n  else:\n    color = 'red'\n  \n  plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n                                100*np.max(predictions_array),\n                                class_names[true_label]),\n                                color=color)\n\ndef plot_value_array(i, predictions_array, true_label):\n  predictions_array, true_label = predictions_array[i], true_label[i]\n  plt.grid(False)\n  plt.xticks([])\n  plt.yticks([])\n  thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n  plt.ylim([0, 1]) \n  predicted_label = np.argmax(predictions_array)\n \n  thisplot[predicted_label].set_color('red')\n  thisplot[true_label].set_color('blue')\n\n# Plot the first X test images, their predicted label, and the true label\n# Color correct predictions in blue, incorrect predictions in red\nnum_rows = 5\nnum_cols = 3\nnum_images = num_rows*num_cols\nplt.figure(figsize=(2*2*num_cols, 2*num_rows))\nfor i in range(num_images):\n  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n  plot_image(i, predictions, test_labels, test_images)\n  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n  plot_value_array(i, predictions, test_labels)","56d9edda":"# Grab an image from the test dataset\nimg = test_images[0]\nprint(img.shape)\n\n# Add the image to a batch where it's the only member.\nimg = (np.expand_dims(img,0))\nprint(img.shape)\n\n# Make Prediction\npredictions_single = model.predict(img)\nprint(predictions_single)\n\n# Plot Prediction\nplot_value_array(0, predictions_single, test_labels)\n_ = plt.xticks(range(10), class_names, rotation=45)\nnp.argmax(predictions_single[0])\n","c25a7c52":"# Preprocess the data\n\nThe data must be preprocessed before training the network. If you inspect the first image in the training set, you will see that the pixel values fall in the range of 0 to 255:\n\nWe scale these values to a range of 0 to 1 before feeding to the neural network model. For this, cast the datatype of the image components from an integer to a float, and divide by 255. It's important that the training set and the testing set are preprocessed in the same way. Here's the function to preprocess the images:","14b21b87":"Finally, use the trained model to make a prediction about a single image.\n\ntf.keras models are optimized to make predictions on a batch, or collection, of examples at once. So even though we're using a single image, we need to add it to a list:\n\n","340d6147":"I will keep on adding new kernels corresponding to other tutorials and link them here as and when I add them. Please let me know if you found this kernel useful.","974af042":"Display the first 25 images from the training set and display the class name below each image. Verify that the data is in the correct format and we're ready to build and train the network.","f26a3cca":"## Disclaimer\n\nThis Kernel corresponds to official tutorials given on TensorFlow website. I make no claims over the content.\n\nThis tutorial given in this kernel can be accessed at: https:\/\/www.tensorflow.org\/tutorials\/keras\/basic_classification","9b10234d":"This guide trains a neural network model to classify images of clothing, like sneakers and shirts. It's okay if you don't understand all the details, this is a fast-paced overview of a complete TensorFlow program with the details explained as we go.\n\nThis guide uses tf.keras, a high-level API to build and train models in TensorFlow.","b5c497eb":"## Make predictions\n\nWith the model trained, we can use it to make predictions about some images.\n\nHere, the model has predicted the label for each image in the testing set. And we take a look at the first prediction.\n\nA prediction is an array of 10 numbers. These describe the \"confidence\" of the model that the image corresponds to each of the 10 different articles of clothing. We can see which label has the highest confidence value. So the model is most confident that this image is an ankle boot, or class_names[9]. And we can check the test label to see this is correct:","f60c2049":"Loading the dataset returns four NumPy arrays:\n\n* The train_images and train_labels arrays are the training set\u2014the data the model uses to learn.\n* The model is tested against the test set, the test_images, and test_labels arrays.\n\nThe images are 28x28 NumPy arrays, with pixel values ranging between 0 and 255. The labels are an array of integers, ranging from 0 to 9. These correspond to the class of clothing the image represents:\n\nLabel\tClass\n0\tT-shirt\/top\n1\tTrouser\n2\tPullover\n3\tDress\n4\tCoat\n5\tSandal\n6\tShirt\n7\tSneaker\n8\tBag\n9\tAnkle boot\n\nEach image is mapped to a single label. Since the class names are not included with the dataset, store them here to use later when plotting the images.","6dc0f333":"## Compile the model\n\nBefore the model is ready for training, it needs a few more settings. These are added during the model's compile step:\n\n* Loss function \u2014This measures how accurate the model is during training. We want to minimize this function to \"steer\" the model in the right direction.\n* Optimizer \u2014This is how the model is updated based on the data it sees and its loss function.\n* Metrics \u2014Used to monitor the training and testing steps. The following example uses accuracy, the fraction of the images that are correctly classified.","8172c5e7":"# Explore the data\n\nLet's explore the format of the dataset before training the model. The following shows there are 60,000 images in the training set, with each image represented as 28 x 28 pixels, and there are 60,000 labels in the training set. Each label is an integer between 0 and 9:","d09bb23a":"This guide uses the Fashion MNIST dataset which contains 70,000 grayscale images in 10 categories. The images show individual articles of clothing at low resolution (28 by 28 pixels).\n\nFashion MNIST is intended as a drop-in replacement for the classic MNIST dataset\u2014often used as the \"Hello, World\" of machine learning programs for computer vision. The MNIST dataset contains images of handwritten digits (0, 1, 2, etc) in an identical format to the articles of clothing we'll use here.\n\nThis guide uses Fashion MNIST for variety, and because it's a slightly more challenging problem than regular MNIST. Both datasets are relatively small and are used to verify that an algorithm works as expected. They're good starting points to test and debug code.\n\nWe will use 60,000 images to train the network and 10,000 images to evaluate how accurately the network learned to classify images. You can access the Fashion MNIST directly from TensorFlow, just import and load the data:","bf927794":"# Build the model\n\nBuilding the neural network requires configuring the layers of the model, then compiling the model.\n\n## Setup the layers\n\nThe basic building block of a neural network is the layer. Layers extract representations from the data fed into them. And, hopefully, these representations are more meaningful for the problem at hand.\n\nMost of deep learning consists of chaining together simple layers. Most layers, like tf.keras.layers.Dense, have parameters that are learned during training.\n\nThe first layer in this network, tf.keras.layers.Flatten, transforms the format of the images from a 2d-array (of 28 by 28 pixels), to a 1d-array of 28 * 28 = 784 pixels. Think of this layer as unstacking rows of pixels in the image and lining them up. This layer has no parameters to learn; it only reformats the data.\n\nAfter the pixels are flattened, the network consists of a sequence of two tf.keras.layers.Dense layers. These are densely-connected, or fully-connected, neural layers. The first Dense layer has 128 nodes (or neurons). The second (and last) layer is a 10-node softmax layer\u2014this returns an array of 10 probability scores that sum to 1. Each node contains a score that indicates the probability that the current image belongs to one of the 10 classes.","d8db4343":"We can graph predictions to look at the full set of 10 channels. Let's plot several images with their predictions. Correct prediction labels are blue and incorrect prediction labels are red. The number gives the percent (out of 100) for the predicted label. Note that it can be wrong even when very confident.","d60d9493":"Also there are 10,000 images in the test set. Again, each image is represented as 28 x 28 pixels. And the test set contains 10,000 images labels:","9645f0de":"## Evaluate accuracy\n\nNext, compare how the model performs on the test dataset. \n\nIt turns out, the accuracy on the test dataset is a little less than the accuracy on the training dataset. This gap between training accuracy and test accuracy is an example of overfitting. Overfitting is when a machine learning model performs worse on new data than on their training data.","fe719067":"# Import the Fashion MNIST dataset","12682f77":"## Train the model\n\nTraining the neural network model requires the following steps:\n\n1. Feed the training data to the model\u2014in this example, the train_images and train_labels arrays.\n2. The model learns to associate images and labels.\n3. We ask the model to make predictions about a test set\u2014in this example, the test_images array. We verify that the predictions match the labels from the test_labels array.\n\nTo start training, call the model.fit method\u2014the model is \"fit\" to the training data.\n\nAs the model trains, the loss and accuracy metrics are displayed. This model reaches an accuracy of about 0.83 (or 83%) on the training data"}}