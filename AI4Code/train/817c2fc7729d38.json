{"cell_type":{"6cb4d3d2":"code","2b209f46":"code","01ea470a":"code","0db4c85b":"code","cdd0ba4b":"code","718f81a2":"code","3bf8ee20":"code","1d01be7b":"code","46d4a56a":"code","19621820":"code","9da3e486":"code","775ad540":"code","76a4a6f0":"code","145645ea":"code","9f0c31a5":"code","bd28c878":"code","289bc490":"code","07d69bb8":"code","805456ca":"code","93fad700":"code","5dde761b":"code","9df5daa4":"code","3de2c593":"code","9e6fbdf1":"code","ca006e83":"code","6d06b49c":"code","7e992179":"code","91e7b502":"code","b6a225fb":"code","2ed49209":"code","06dbc361":"code","9950486b":"code","3fb0409f":"code","9b5c29e5":"code","57719f73":"code","c187bf59":"code","b3b75108":"code","989c9eb3":"code","c29c6f59":"code","fee55c44":"code","315cce7d":"markdown","285a0e40":"markdown"},"source":{"6cb4d3d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b209f46":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.pandas.set_option('display.max_columns', None)","01ea470a":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\n","0db4c85b":"train.shape","cdd0ba4b":"train.info()","718f81a2":"train.skew()","3bf8ee20":"#Plot histogram of numerical variables to validate pandas intuition.\ntrain.hist(figsize=(35,35), layout=(13,3), bins=20)","1d01be7b":"#Now we will check for outliers using boxplot\ntrain.plot(kind=\"box\",subplots=True,layout=(9,5),figsize=(15,15))","46d4a56a":"#outlier treatment\ntrain.drop(train[train.GrLivArea>4000].index, inplace = True)\ntrain.reset_index(drop = True, inplace = True)\n\ntrain.drop(train[train.TotalBsmtSF>3000].index, inplace = True)\ntrain.reset_index(drop = True, inplace = True)\n\ntrain.drop(train[train.YearBuilt<1900].index, inplace = True)\ntrain.reset_index(drop = True, inplace = True)","19621820":"train.isnull().sum().to_string()","9da3e486":"train['LotFrontage']=train['LotFrontage'].fillna(train['LotFrontage'].mean())","775ad540":"train.drop(['Alley','PoolQC','Fence','MiscFeature','FireplaceQu'],axis=1,inplace=True)","76a4a6f0":"train['GarageFinish']=train['GarageFinish'].fillna(train['GarageFinish'].mode()[0])\ntrain['GarageQual']=train['GarageQual'].fillna(train['GarageQual'].mode()[0])\ntrain['GarageCond']=train['GarageCond'].fillna(train['GarageCond'].mode()[0])\ntrain['BsmtCond']=train['BsmtCond'].fillna(train['BsmtCond'].mode()[0])\ntrain['BsmtQual']=train['BsmtQual'].fillna(train['BsmtQual'].mode()[0])\ntrain['GarageType']=train['GarageType'].fillna(train['GarageType'].mode()[0])\ntrain['GarageYrBlt']=train['GarageYrBlt'].fillna(train['GarageYrBlt'].mode()[0])\ntrain['MasVnrType']=train['MasVnrType'].fillna(train['MasVnrType'].mode()[0])\ntrain['MasVnrArea']=train['MasVnrArea'].fillna(train['MasVnrArea'].mode()[0])\ntrain['BsmtFinType2']=train['BsmtFinType2'].fillna(train['BsmtFinType2'].mode()[0])\ntrain['BsmtFinType1']=train['BsmtFinType1'].fillna(train['BsmtFinType1'].mode()[0])\ntrain['Electrical']=train['Electrical'].fillna(train['Electrical'].mode()[0])\ntrain['BsmtExposure']=train['BsmtExposure'].fillna(train['BsmtExposure'].mode()[0])\ntrain['GrLivArea']=train['GrLivArea'].fillna(train['GrLivArea'].mode()[0])\ntrain['TotalBsmtSF']=train['TotalBsmtSF'].fillna(train['TotalBsmtSF'].mode()[0])\ntrain['YearBuilt']=train['YearBuilt'].fillna(train['YearBuilt'].mode()[0])\n","145645ea":"train.isnull().sum().to_string()","9f0c31a5":"plt.figure(figsize=[58,48])\nsns.heatmap(train.corr(), annot = True,cmap = 'coolwarm')\nplt.xticks(fontsize=30,weight = 'bold')\nplt.yticks(fontsize=30,weight = 'bold')","bd28c878":"test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest.shape\n","289bc490":"test.head()","07d69bb8":"test.isnull().sum().to_string()","805456ca":"test.skew()","93fad700":"test.drop(['Alley','PoolQC','Fence','MiscFeature','FireplaceQu'],axis=1,inplace=True)","5dde761b":"test['LotFrontage']=train['LotFrontage'].fillna(train['LotFrontage'].mean())","9df5daa4":"test['MasVnrType']=test['MasVnrType'].fillna(test['MasVnrType'].mode()[0])\ntest['BsmtQual']=test['BsmtQual'].fillna(test['BsmtQual'].mode()[0])\ntest['BsmtFinType2']=test['BsmtFinType2'].fillna(test['BsmtFinType2'].mode()[0])\ntest['Functional']=test['Functional'].fillna(test['Functional'].mode()[0])\ntest['GarageFinish']=test['GarageFinish'].fillna(test['GarageFinish'].mode()[0])\ntest['MasVnrArea']=test['MasVnrArea'].fillna(test['MasVnrArea'].mode()[0])\ntest['BsmtCond']=test['BsmtCond'].fillna(test['BsmtCond'].mode()[0])\ntest['BsmtFinSF2']=test['BsmtFinSF2'].fillna(test['BsmtFinSF2'].mode()[0])\ntest['GarageCars']=test['GarageCars'].fillna(test['GarageCars'].mode()[0])\ntest['MSZoning']=test['MSZoning'].fillna(test['MSZoning'].mode()[0])\n","3de2c593":"test['BsmtExposure']=test['BsmtExposure'].fillna(test['BsmtExposure'].mode()[0])\ntest['BsmtUnfSF']=test['BsmtUnfSF'].fillna(test['BsmtUnfSF'].mode()[0])\ntest['BsmtFullBath']=test['BsmtFullBath'].fillna(test['BsmtFullBath'].mode()[0])\ntest['GarageArea']=test['GarageArea'].fillna(test['GarageArea'].mode()[0])\ntest['Exterior1st']=test['Exterior1st'].fillna(test['Exterior1st'].mode()[0])\ntest['BsmtFinType1']=test['BsmtFinType1'].fillna(test['BsmtFinType1'].mode()[0])\ntest['TotalBsmtSF']=test['TotalBsmtSF'].fillna(test['TotalBsmtSF'].mode()[0])\ntest['BsmtHalfBath']=test['BsmtHalfBath'].fillna(test['BsmtHalfBath'].mode()[0])\ntest['KitchenQual']=test['KitchenQual'].fillna(test['KitchenQual'].mode()[0])\ntest['GarageType']=test['GarageType'].fillna(test['GarageType'].mode()[0])","9e6fbdf1":"test['GarageQual']=test['GarageQual'].fillna(test['GarageQual'].mode()[0])\ntest['SaleType']=test['SaleType'].fillna(test['SaleType'].mode()[0])\ntest['Utilities']=test['Utilities'].fillna(test['Utilities'].mode()[0])\ntest['Exterior2nd']=test['Exterior2nd'].fillna(test['Exterior2nd'].mode()[0])\ntest['BsmtFinSF1']=test['BsmtFinSF1'].fillna(test['BsmtFinSF1'].mode()[0])\ntest['GarageYrBlt']=test['GarageYrBlt'].fillna(test['GarageYrBlt'].mode()[0])\ntest['GarageCond']=test['GarageCond'].fillna(test['GarageCond'].mode()[0])\n","ca006e83":"test.isnull().sum().to_string()","6d06b49c":"train['enc_street'] = pd.get_dummies(train.Street, drop_first=True)\ntest['enc_street'] = pd.get_dummies(train.Street, drop_first=True)","7e992179":"print (train.enc_street.value_counts())","91e7b502":"data = train.select_dtypes(include=[np.number]).interpolate().dropna()\nX = data.drop(['SalePrice', 'Id'], axis=1)\ny = np.log(train.SalePrice)","b6a225fb":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(\n                          X, y, random_state=42, test_size=.2)\nfrom sklearn.metrics import mean_squared_error","2ed49209":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr_model = lr.fit(X_train, y_train)\ny_predict_lr = lr_model.predict(X_test)\n\nprint ('RMSE is:', mean_squared_error(y_test, y_predict_lr))","06dbc361":"from sklearn.tree import DecisionTreeRegressor\ndtr =  DecisionTreeRegressor()\ndtr_model = dtr.fit(X_train, y_train)\ny_predict_dtr = dtr_model.predict(X_test)\n\nprint ('RMSE is:', mean_squared_error(y_test, y_predict_dtr))","9950486b":"from sklearn.neighbors import KNeighborsRegressor\nknr =  KNeighborsRegressor()\nknr_model = knr.fit(X_train, y_train)\ny_predict_knr = knr_model.predict(X_test)\n\nprint ('RMSE is:', mean_squared_error(y_test, y_predict_knr))","3fb0409f":"from sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor()\nrfr_model = rfr.fit(X_train, y_train)\ny_predict_rfr = rfr_model.predict(X_test)\n\nprint ('RMSE is:', mean_squared_error(y_test, y_predict_rfr))","9b5c29e5":"#Linear Regression gave us the least RMSE value","57719f73":"actual_values = y_test\nplt.scatter(y_predict_lr, actual_values, alpha = .7)\nplt.xlabel('Predicted Price')\nplt.ylabel('Actual Price')\nplt.title('Linear Regression Model')\nplt.show()","c187bf59":"submission = pd.DataFrame()\nsubmission['Id'] = test.Id","b3b75108":"feats = test.select_dtypes(include=[np.number]).drop(['Id'], axis=1).interpolate()","989c9eb3":"predictions = lr.predict(feats)\nfinal_predictions = np.exp(predictions)","c29c6f59":"submission['SalePrice'] = final_predictions\nsubmission.head()","fee55c44":"submission.to_csv('submission1.csv', index=False)","315cce7d":"**Observation**\n1. OverallQual, GrLivArea and TotalBsmtSF are strongly correlated with SalePrice\n2. GarageCars and GarageArea are also some of the most strongly correlated variables.  the number of cars that fit into the garage is a consequence of the garage area.Therefore, we just need one of these variables in our analysis (we can keep GarageCars since its correlation with SalePrice is higher).","285a0e40":"**Observation**\n1. There are two type of numerical variable in this data continuous (like LotFrontage, LotArea, and YearBuilt)\n2. and some are discrete (like MSSubClass, OverallQual, OverallCond, BsmtFullBath, and HalfBath etc.)"}}