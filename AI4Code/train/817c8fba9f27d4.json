{"cell_type":{"59a1d6e2":"code","ed75857a":"code","9e9c2941":"code","fe7dcc72":"code","9c7eaa04":"code","e7f29989":"code","1895e159":"code","97e78399":"code","bbe766b6":"code","af98ba82":"code","2d720dc7":"code","c9f53346":"code","e81a7495":"code","a3d57442":"code","fcbc1699":"code","a024cc46":"code","ec1cdb8e":"code","d3028d33":"code","aebf4025":"code","42b8fe70":"markdown","809cc4b8":"markdown","f7ea3f25":"markdown","a0f99002":"markdown","11ff9253":"markdown"},"source":{"59a1d6e2":"import rssi\nimport csv\nimport os.path\nimport time\nimport random\nimport numpy as np\nfrom tqdm import tqdm\n\ninterface = raw_input('Enter interface name: ')\nrssi_scanner = rssi.RSSI_Scan(interface)\nfileCheck = 'n'\n\nif (os.path.isfile(\"rss.csv\") and os.path.isfile(\"Data.npy\")):\n    fileCheck = raw_input(\"Do you want to continue with the exisitng files? [y\/n]: \")\n    if(fileCheck == 'y'):\n        Data = np.load('Data.npy', allow_pickle=True)\n        wh = Data[0]\n        Map = Data[1]\n        ssids = Data[2]\n\nif fileCheck == 'n':\n    wh = input('Enter height and width (h,w): ')\n    Map = np.ones(wh)\n    ssids = input(\"Enter AP SSIDS ['BBPFAP1','BBPFAP2','BBPFAP3','BBPFAP4', ...]: \")\n    ssids.sort()\n    \nvalues = []\n\n\nwhile 1:\n    if(raw_input('Do ypu want to take a measurement? [y\/n]: ') != 'y'):\n        break\n    sample = input('Enter number of samples to take: ')\n    xy = input('Enter Map coordinates b\/w (0,0) to (' + str(wh[0] - 1) + ',' + str(wh[1] - 1) + '): ')\n    loc = raw_input('Enter RSS name: ') + '=' + str(xy)\n    if (xy >= (0,0)) and (xy < wh):\n        raw_input(\"Press Enter to start training\")\n        for z in tqdm(range(sample)):\n            result = rssi_scanner.getAPinfo(sudo=True, networks=ssids)\n            for x in [item for item in ssids if item not in [i['ssid'] for i in result]]:\n                result.append({'ssid':x, 'quality':'0', 'signal':-1000})\n            result.sort(key=lambda i: i['ssid'])\n            value = {'LOC':loc}\n            for x in result:\n                value.update({x['ssid']:int(x['signal'])})\n            values.append(value)\n            time.sleep(0.3)\n        Map[xy] = 0\n    else:\n        print('Coordinates out of range.')\n\nkeys = ssids + ['LOC']\nif(fileCheck == 'y'):\n    with open('rss.csv', 'ab') as output_file:\n        dict_writer = csv.DictWriter(output_file, keys)\n        dict_writer.writerows(values)\nelse:\n    with open('rss.csv', 'wb') as output_file:\n        dict_writer = csv.DictWriter(output_file, keys)\n        dict_writer.writeheader()\n        dict_writer.writerows(values)\nnp.save('Data', np.array([wh, Map, ssids]))","ed75857a":"import rssi\nimport csv\nimport os.path\nimport time\nfrom tqdm import tqdm\n\ninterface = 'wlan0'\nloc = \"RSS01\"\ncount = 10\nvalues = []\nssids = ['BBPFAP1','BBPFAP2','BBPFAP3','BBPFAP4']\nrssi_scanner = rssi.RSSI_Scan(interface)\n\nfor i in tqdm(range(count)):\n    result = rssi_scanner.getAPinfo(sudo=True, networks=ssids)\n    result.sort(key=lambda i: i['ssid'])\n    value = {'LOC':loc}\n    for x in result:\n        value.update({x['ssid']:int(x['signal'])})\n    values.append(value)\n    time.sleep(0.3)\n    \nif(os.path.isfile(\"rss.csv\")):\n    with open('rss.csv', 'ab') as output_file:\n        dict_writer = csv.DictWriter(output_file, keys)\n        dict_writer.writerows(values)\nelse:\n    keys = values[0].keys()\n    with open('rss.csv', 'wb') as output_file:\n        dict_writer = csv.DictWriter(output_file, keys)\n        dict_writer.writeheader()\n        dict_writer.writerows(values)","9e9c2941":"\neval(loc.split('=')[1])","fe7dcc72":"import rssi\nimport csv\nimport os.path\nimport time\nimport random\nimport numpy as np\nfrom tqdm import tqdm","9c7eaa04":"wh = (3,3)\nMap = np.ones(wh) \nsample = 20\nvalues = []\nssids = ['BBPFAP1','BBPFAP2','BBPFAP3','BBPFAP4']","e7f29989":"xy = (1,2)\nloc = \"RSS06\" + '=' + str(xy)\nif (xy >= (0,0)) and (xy < wh):   \n    for z in tqdm(range(sample)):\n        result = [\n            {\n                'ssid':'BBPFAP2',\n                'quality':'43\/70',\n                'signal':random.randint(-45, -40)\n            },\n            {\n                'ssid':'BBPFAP4',\n                'quality':'30\/70',\n                'signal':random.randint(-45, -40)\n            },\n            {\n                'ssid':'BBPFAP3',\n                'quality':'30\/70',\n                'signal':random.randint(-65, -60)\n            },\n            {\n                'ssid':'BBPFAP1',\n                'quality':'30\/70',\n                'signal':random.randint(-65, -60)\n            }\n        ] \n        for x in [item for item in ssids if item not in [i['ssid'] for i in result]]:\n            result.append({'ssid':x, 'quality':'0', 'signal':-1000})\n        result.sort(key=lambda i: i['ssid'])\n        value = {'LOC':loc}\n        for x in result:\n            value.update({x['ssid']:int(x['signal'])})\n        values.append(value)\n    Map[xy] = 0\nelse:\n    print('Coordinates out of range.')","1895e159":"if(os.path.isfile(\"rss.csv\")):\n    keys = ssids + ['LOC']\n    with open('rss.csv', 'ab') as output_file:\n        dict_writer = csv.DictWriter(output_file, keys)\n        dict_writer.writerows(values)\nelse:\n    keys = ssids + ['LOC']\n    with open('rss.csv', 'wb') as output_file:\n        dict_writer = csv.DictWriter(output_file, keys)\n        dict_writer.writeheader()\n        dict_writer.writerows(values)","97e78399":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import metrics\nimport pickle\n\ndataset = pd.read_csv(\"rss.csv\")\nmodelName = raw_input(\"Enter model name: \")\nx = dataset.iloc[:,0:-1]\ny = dataset['LOC']\nX_train, X_test, y_train, y_test = train_test_split(x, y,stratify=y,test_size=0.2)\ngnb = GaussianNB()\ngnb.fit(X_train, y_train)\ny_pred = gnb.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\npickle.dump(gnb, open(modelName, 'wb'))","bbe766b6":"import numpy as np\nimport heapq\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\nimport pickle\nimport rssi\n\ndef heuristic(a, b):\n    return np.sqrt((b[0] - a[0]) ** 2 + (b[1] - a[1]) ** 2) \n\ndef astar(array, start, goal):\n\n    neighbors = [(0,1),(0,-1),(1,0),(-1,0)]\n\n    close_set = set()\n    came_from = {}\n    gscore = {start:0}\n    fscore = {start:heuristic(start, goal)}\n    oheap = []\n\n    heapq.heappush(oheap, (fscore[start], start))\n    \n    while oheap:\n\n        current = heapq.heappop(oheap)[1]\n\n        if current == goal:\n            data = []\n            while current in came_from:\n                data.append(current)\n                current = came_from[current]\n            return data\n\n        close_set.add(current)\n        for i, j in neighbors:\n            neighbor = current[0] + i, current[1] + j\n            tentative_g_score = gscore[current] + heuristic(current, neighbor)\n            if 0 <= neighbor[0] < array.shape[0]:\n                if 0 <= neighbor[1] < array.shape[1]:                \n                    if array[neighbor[0]][neighbor[1]] == 1:\n                        continue\n                else:\n                    # array bound y walls\n                    continue\n            else:\n                # array bound x walls\n                continue\n                \n            if neighbor in close_set and tentative_g_score >= gscore.get(neighbor, 0):\n                continue\n                \n            if  tentative_g_score < gscore.get(neighbor, 0) or neighbor not in [i[1]for i in oheap]:\n                came_from[neighbor] = current\n                gscore[neighbor] = tentative_g_score\n                fscore[neighbor] = tentative_g_score + heuristic(neighbor, goal)\n                heapq.heappush(oheap, (fscore[neighbor], neighbor))\n                \n    return False\n\ninterface = raw_input('Enter interface name: ')\nrssi_scanner = rssi.RSSI_Scan(interface)\nData = np.load('Data.npy', allow_pickle=True)\nmodel = pickle.load(open(raw_input('Enter model name: '), 'rb'))\ngrid =  Data[1]\nssids =  Data[2]\nprev = None\ncurr = None\nroute = [None]\nmove = None\n\nwhile(1):\n    goal = input('Enter goal (x, y): ')\n    while (1):\n        prev = curr\n        result = rssi_scanner.getAPinfo(sudo=True, networks=ssids)\n        into = into + 1\n        for x in [item for item in ssids if item not in [i['ssid'] for i in result]]:\n            result.append({'ssid':x, 'quality':'0', 'signal':-1000})\n        result.sort(key=lambda i: i['ssid'])\n        value = []\n        for x in result:\n            value.append(int(x['signal']))\n        curr = [value]\n        curr = eval(model.predict(curr)[0].split('=')[1])\n        #print curr\n        if(curr == goal):\n            break\n        if(curr not in route):\n            route = astar(grid, curr, goal)\n            route = route + [curr]\n            route = route[::-1]\n        #print(route)\n        nex = route[route.index(curr) + 1]\n        if (prev != None):\n            cal = (curr[1] - prev[1], -1 * (curr[0] - prev[0]))\n            calr = (curr[0] + cal[0], curr[1] + cal[1])\n            call = (curr[0] - cal[0], curr[1] - cal[1])\n            if(nex == calr):\n                move = 'right'\n            elif(nex == call):\n                move = 'left'\n            else:\n                move = 'straight'\n        else:\n            move = 'straight'\n        print(move)\n        \n    print('Goal Reached')\n    if(raw_input('Do you want to restart? [y\/n]: ') != 'y'):\n        break","af98ba82":"import numpy as np\nimport heapq\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\nimport pickle\n#import rssi\n\ndef heuristic(a, b):\n    return np.sqrt((b[0] - a[0]) ** 2 + (b[1] - a[1]) ** 2) \n\ndef astar(array, start, goal):\n\n    neighbors = [(0,1),(0,-1),(1,0),(-1,0)]\n\n    close_set = set()\n    came_from = {}\n    gscore = {start:0}\n    fscore = {start:heuristic(start, goal)}\n    oheap = []\n\n    heapq.heappush(oheap, (fscore[start], start))\n    \n    while oheap:\n\n        current = heapq.heappop(oheap)[1]\n\n        if current == goal:\n            data = []\n            while current in came_from:\n                data.append(current)\n                current = came_from[current]\n            return data\n\n        close_set.add(current)\n        for i, j in neighbors:\n            neighbor = current[0] + i, current[1] + j\n            tentative_g_score = gscore[current] + heuristic(current, neighbor)\n            if 0 <= neighbor[0] < array.shape[0]:\n                if 0 <= neighbor[1] < array.shape[1]:                \n                    if array[neighbor[0]][neighbor[1]] == 1:\n                        continue\n                else:\n                    # array bound y walls\n                    continue\n            else:\n                # array bound x walls\n                continue\n                \n            if neighbor in close_set and tentative_g_score >= gscore.get(neighbor, 0):\n                continue\n                \n            if  tentative_g_score < gscore.get(neighbor, 0) or neighbor not in [i[1]for i in oheap]:\n                came_from[neighbor] = current\n                gscore[neighbor] = tentative_g_score\n                fscore[neighbor] = tentative_g_score + heuristic(neighbor, goal)\n                heapq.heappush(oheap, (fscore[neighbor], neighbor))\n                \n    return False\n\n#interface = raw_input('Enter interface name: ')\n#rssi_scanner = rssi.RSSI_Scan(interface)\nData = np.load('..\/input\/Dataaa\/Data.npy', allow_pickle=True)\nmodel = pickle.load(open('..\/input\/Dataaa\/model.out', 'rb'))\ngrid =  Data[1]\nssids =  Data[2]\n","2d720dc7":"!pip install rssi","c9f53346":"result = [\n            {\n                'ssid':'BBPFAP2',\n                'quality':'43\/70',\n                'signal':random.randint(-45, -40)\n            },\n            {\n                'ssid':'BBPFAP4',\n                'quality':'30\/70',\n                'signal':random.randint(-45, -40)\n            },\n            {\n                'ssid':'BBPFAP3',\n                'quality':'30\/70',\n                'signal':random.randint(-65, -60)\n            },\n            {\n                'ssid':'BBPFAP1',\n                'quality':'30\/70',\n                'signal':random.randint(-35, -30)\n            }\n        ] \nfor x in [item for item in ssids if item not in [i['ssid'] for i in result]]:\n    result.append({'ssid':x, 'quality':'0', 'signal':-1000})\nresult.sort(key=lambda i: i['ssid'])\nvalue = []\nfor x in result:\n    value.append(int(x['signal']))\n\nstart = [value]\ngoal = [[-60,-57,-31,-70]]\n","e81a7495":"i = 0\nresults = [\n    [\n        {\n        'ssid':'BBPFAP1',\n        'quality':'43\/70',\n        'signal':-34\n        },\n        {\n            'ssid':'BBPFAP2',\n            'quality':'30\/70',\n            'signal':-55\n        },\n        {\n            'ssid':'BBPFAP3',\n            'quality':'30\/70',\n            'signal':-58\n        },\n        {\n            'ssid':'BBPFAP4',\n            'quality':'30\/70',\n            'signal':-68\n        }\n    ],\n    [\n        {\n        'ssid':'BBPFAP1',\n        'quality':'43\/70',\n        'signal':-40\n        },\n        {\n            'ssid':'BBPFAP2',\n            'quality':'30\/70',\n            'signal':-61\n        },\n        {\n            'ssid':'BBPFAP3',\n            'quality':'30\/70',\n            'signal':-45\n        },\n        {\n            'ssid':'BBPFAP4',\n            'quality':'30\/70',\n            'signal':-63\n        }\n    ],\n    [\n        {\n        'ssid':'BBPFAP1',\n        'quality':'43\/70',\n        'signal':-60\n        },\n        {\n            'ssid':'BBPFAP2',\n            'quality':'30\/70',\n            'signal':-67\n        },\n        {\n            'ssid':'BBPFAP3',\n            'quality':'30\/70',\n            'signal':-30\n        },\n        {\n            'ssid':'BBPFAP4',\n            'quality':'30\/70',\n            'signal':-57\n        }\n    ],\n    [\n        {\n        'ssid':'BBPFAP1',\n        'quality':'43\/70',\n        'signal':-60\n        },\n        {\n            'ssid':'BBPFAP2',\n            'quality':'30\/70',\n            'signal':-67\n        },\n        {\n            'ssid':'BBPFAP3',\n            'quality':'30\/70',\n            'signal':-30\n        },\n        {\n            'ssid':'BBPFAP4',\n            'quality':'30\/70',\n            'signal':-57\n        }\n    ],\n    [\n        {\n        'ssid':'BBPFAP1',\n        'quality':'43\/70',\n        'signal':-65\n        },\n        {\n            'ssid':'BBPFAP2',\n            'quality':'30\/70',\n            'signal':-63\n        },\n        {\n            'ssid':'BBPFAP3',\n            'quality':'30\/70',\n            'signal':-41\n        },\n        {\n            'ssid':'BBPFAP4',\n            'quality':'30\/70',\n            'signal':-40\n        }\n    ],\n    [\n        {\n        'ssid':'BBPFAP1',\n        'quality':'43\/70',\n        'signal':-65\n        },\n        {\n            'ssid':'BBPFAP2',\n            'quality':'30\/70',\n            'signal':-55\n        },\n        {\n            'ssid':'BBPFAP3',\n            'quality':'30\/70',\n            'signal':-55\n        },\n        {\n            'ssid':'BBPFAP4',\n            'quality':'30\/70',\n            'signal':-32\n        }\n    ]\n]","a3d57442":"prev = None\ncurr = None\nroute = [None]\nmove = None\n\nwhile(1):\n    goal = input('Enter goal (x, y): ')\n    into = 0\n    while (1):\n        prev = curr\n        result = results\n        into = into + 1\n        for x in [item for item in ssids if item not in [i['ssid'] for i in result]]:\n            result.append({'ssid':x, 'quality':'0', 'signal':-1000})\n        result.sort(key=lambda i: i['ssid'])\n        value = []\n        for x in result:\n            value.append(int(x['signal']))\n        curr = [value]\n        curr = eval(model.predict(curr)[0].split('=')[1])\n        #print curr\n        if(curr == goal):\n            break\n        if(curr not in route):\n            route = astar(grid, curr, goal)\n            route = route + [curr]\n            route = route[::-1]\n        #print(route)\n        nex = route[route.index(curr) + 1]\n        if (prev != None):\n            cal = (curr[1] - prev[1], -1 * (curr[0] - prev[0]))\n            calr = (curr[0] + cal[0], curr[1] + cal[1])\n            call = (curr[0] - cal[0], curr[1] - cal[1])\n            if(nex == calr):\n                move = 'right'\n            elif(nex == call):\n                move = 'left'\n            else:\n                move = 'straight'\n        else:\n            move = 'straight'\n        print(move)\n        \n    print('Goal Reached')\n    if(raw_input('Do you want to restart? [y\/n]: ') != 'y'):\n        break","fcbc1699":"ssids","a024cc46":"\nstart = eval(model.predict(start)[0].split('=')[1])\ngoal = eval(model.predict(goal)[0].split('=')[1])\n\ngoal = (2,2)\n\nroute = astar(grid, start, goal)\nroute = route + [start]\nroute = route[::-1]\nprint(route)","ec1cdb8e":"(0,0) in route","d3028d33":"\n##############################################################################\n# plot the path\n##############################################################################\n\n \n\n#extract x and y coordinates from route list\nx_coords = []\ny_coords = []\n\nfor i in (range(0,len(route))):\n    x = route[i][0]\n    y = route[i][1]\n    x_coords.append(x)\n    y_coords.append(y)\n\n# plot map and path\nfig, ax = plt.subplots(figsize=(10,10))\nax.imshow(grid, cmap=plt.cm.Dark2)\nax.scatter(start[1],start[0], marker = \"*\", color = \"yellow\", s = 200)\nax.scatter(goal[1],goal[0], marker = \"*\", color = \"red\", s = 200)\nax.plot(y_coords,x_coords, color = \"black\")\nplt.show()","aebf4025":"p = (1,1)\nc = (0,1)\nn = (0,0)\ncal = (c[1] - p[1], -1 * (c[0] - p[0]))\ncalr = (c[0] + cal[0], c[1] + cal[1])\ncall = (c[0] - cal[0], c[1] - cal[1])\n\nprint('Right = ' + str(calr == n) + ', Left = ' + str(call == n))","42b8fe70":"# Dataset preperation code","809cc4b8":"# Running Code","f7ea3f25":"# Training Code","a0f99002":"# Running Code (Experiments)","11ff9253":"# Dataset Preperation Code (Experiment)"}}