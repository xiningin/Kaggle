{"cell_type":{"b1d5576c":"code","f0a75989":"code","d4790022":"code","ecf4d520":"code","2e16dcd1":"code","4b4b5079":"code","92a43e7b":"code","5e3a2631":"code","1c940666":"code","b4435594":"code","23f7fe13":"code","00bb83bb":"code","e56548a5":"code","5116da9a":"code","1351065a":"code","5d3276a1":"code","a86991fc":"code","78072e1c":"code","fc292ca8":"code","d54a3ad2":"code","a4edc2c1":"code","b4f9541c":"code","a10833ca":"code","bc9e41b8":"code","d8119820":"code","d98782ad":"code","8ddc308b":"code","10b240fa":"code","18609d94":"code","6466b121":"code","d6f815f8":"code","e9210020":"code","b51f2b6f":"code","b97e1ba7":"code","a38424bd":"code","430e72e9":"code","9e59182e":"code","656f193c":"code","91b2eb2d":"code","bdb38686":"code","a6ef9e3c":"code","dfa1cb43":"code","d2b5005a":"code","8504a9eb":"code","2d1b3c21":"code","98ceea52":"code","3500d3da":"code","e124697c":"code","d9873406":"code","79d26e8d":"code","0c60d8a5":"code","592459a9":"code","c4b5b467":"code","da2469af":"code","a527c9bb":"code","e6b3b999":"code","ef1121e6":"code","85520ba5":"code","2958af1d":"code","5d3140fa":"code","1b0ac587":"code","b2d48554":"code","f12299a3":"code","d6350ce0":"code","8b61bebb":"code","be9033d3":"code","e713ffae":"code","92b7e2e5":"code","05f7e397":"code","95920f23":"code","f0f21d88":"code","ae143db5":"code","56b6beab":"code","1e1896a4":"code","21c7f639":"code","a8faca8f":"code","7eca0761":"code","4ff34342":"code","46d19944":"code","c4231070":"code","a02e442c":"code","53ecd23a":"code","c8de9785":"code","52650478":"code","e0e6b53c":"code","5f709102":"code","5cd46992":"code","8721a7ff":"code","7c2e8f2a":"code","f09e54aa":"code","92552194":"code","94c24841":"code","3d5fffe3":"code","d8077246":"code","1565a64b":"code","578ba3f1":"code","52d9994a":"code","4bb043cb":"code","1fb2a93d":"code","7c359179":"code","5c33954a":"code","9287eafc":"code","2a8c3a33":"code","d4012b00":"code","abf91008":"code","c0bd625c":"code","3d7fa111":"code","f04d26ea":"code","5f951b3b":"code","f8cef2cf":"code","35ebbe33":"code","008fbb1f":"code","85e49858":"code","98181c58":"code","2601cf88":"code","0a42bfa3":"code","22b7b1de":"code","287adf9c":"code","2c35fba6":"code","bdc9c172":"code","17a2a009":"code","20715212":"code","5441e8bc":"code","fa953d0e":"code","522eebc1":"code","1a35c00e":"code","1463dbaa":"code","eb192041":"code","7d49f7c0":"code","82d2ce5e":"code","a3d88e3a":"code","8bc00b98":"code","a153c795":"code","6da0f133":"code","849e06b9":"code","30679311":"code","3e4ee733":"code","2e267aac":"code","6f56ffe2":"code","f6804005":"code","bd2f976f":"code","97aa578c":"code","c97ec518":"code","3120ae96":"code","69472c88":"code","a6a6fe00":"code","8acbb8c8":"code","2d1dd09b":"code","731ff884":"code","37870353":"code","028907d9":"code","8a2afd6d":"code","671c8410":"code","a17d0660":"code","160a9ab4":"code","ba6437d9":"code","c072418c":"code","70f22aa2":"markdown","2061e7c6":"markdown","7c4730fd":"markdown","d0ba98a5":"markdown","9af31eab":"markdown","aa1ce01d":"markdown","37b3544e":"markdown","e71bdf2b":"markdown","cb1d7f40":"markdown","659b9f3a":"markdown","9e95c93e":"markdown","064e4dfd":"markdown","46fba573":"markdown","a3c109ee":"markdown","2251e32f":"markdown","d17a4168":"markdown","a24cd9e2":"markdown","dd13ec14":"markdown","f759f2a2":"markdown","e36857e8":"markdown","98420292":"markdown","bcf90b6c":"markdown","e21da10d":"markdown","6fe1259f":"markdown","5eb89a59":"markdown","b78cf507":"markdown","4af0f2df":"markdown","24daa97e":"markdown"},"source":{"b1d5576c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\nimport seaborn as sns\nimport matplotlib\nmatplotlib.rcParams['axes.unicode_minus'] = False\nplt.style.use('ggplot')\nfrom sklearn.preprocessing import scale, minmax_scale\nimport os\nimport xgboost as xgb\nfrom sklearn.ensemble import RandomForestRegressor as rf\nfrom sklearn.cluster import KMeans","f0a75989":"train_lab = pd.read_csv('..\/input\/bigcontest2019\/train_label.csv')\ntrain_act = pd.read_csv('..\/input\/bigcontest2019\/train_activity.csv')\ntrain_com = pd.read_csv('..\/input\/bigcontest2019\/train_combat.csv')\ntrain_ple = pd.read_csv('..\/input\/bigcontest2019\/train_pledge.csv')\ntrain_tra = pd.read_csv('..\/input\/bigcontest2019\/train_trade.csv')\ntrain_pay = pd.read_csv('..\/input\/bigcontest2019\/train_payment.csv')\nprint('train_label.shape :',train_lab.shape)\nprint('train_activity.shape :',train_act.shape)\nprint('train_combat.shape :',train_com.shape)\nprint('train_pledge.shape :',train_ple.shape)\nprint('train_trade.shape :',train_tra.shape)\nprint('train_payment.shape :',train_pay.shape)","d4790022":"train_valid = pd.read_csv('..\/input\/bigcontest2019\/train_valid_user_id.csv')\nprint(train_valid.shape)","ecf4d520":"test1_act = pd.read_csv('..\/input\/bigcontest2019\/test1_activity.csv')\ntest2_act = pd.read_csv('..\/input\/bigcontest2019\/test2_activity.csv')\ntest1_com = pd.read_csv('..\/input\/bigcontest2019\/test1_combat.csv')\ntest2_com = pd.read_csv('..\/input\/bigcontest2019\/test2_combat.csv')\ntest1_ple = pd.read_csv('..\/input\/bigcontest2019\/test1_pledge.csv')\ntest2_ple = pd.read_csv('..\/input\/bigcontest2019\/test2_pledge.csv')\ntest1_tra = pd.read_csv('..\/input\/bigcontest2019\/test1_trade.csv')\ntest2_tra = pd.read_csv('..\/input\/bigcontest2019\/test2_trade.csv')\ntest1_pay = pd.read_csv('..\/input\/bigcontest2019\/test1_payment.csv')\ntest2_pay = pd.read_csv('..\/input\/bigcontest2019\/test2_payment.csv')\nprint('test1_activity.shape :',test1_act.shape)\nprint('test1_combat.shape :',test1_com.shape)\nprint('test1_pledge.shape :',test1_ple.shape)\nprint('test1_trade.shape :',test1_tra.shape)\nprint('test1_payment.shape :',test1_pay.shape)\nprint(\"----------------------------------------\")\nprint('test2_activity.shape :',test2_act.shape)\nprint('test2_combat.shape :',test2_com.shape)\nprint('test2_pledge.shape :',test2_ple.shape)\nprint('test2_trade.shape :',test2_tra.shape)\nprint('test2_payment.shape :',test2_pay.shape)","2e16dcd1":"# train_act = train_act[train_act['day']>=8]\n# train_com = train_com[train_com['day']>=8]\n# train_ple = train_ple[train_ple['day']>=8]\n# train_tra = train_tra[train_tra['day']>=8]\n# train_pay = train_pay[train_pay['day']>=8]\n# \uc2e4\ud5d8\uccb4","4b4b5079":"ple = train_ple.drop(['acc_id','char_id'],axis=1)\nple.head()","92a43e7b":"ple2 = ple.drop_duplicates()\nple2.shape","5e3a2631":"ple2['pledge_id'] = ple2['pledge_id'].astype(str)\nple2['real_pledge_id'] = ple2['server'] + '_' + ple2['pledge_id']\nple2.drop(['server','pledge_id'],axis=1,inplace=True)\nple2.head()","1c940666":"ple2.drop('non_combat_play_time',axis=1,inplace=True)","b4435594":"ple2['real_pledge_id'].nunique()","23f7fe13":"ple2.columns","00bb83bb":"ple2 = ple2.groupby('real_pledge_id')[['play_char_cnt','combat_char_cnt',\n                                       'pledge_combat_cnt','random_attacker_cnt',\n                                       'random_defender_cnt','same_pledge_cnt',\n                                       'temp_cnt','etc_cnt',\n                                       'combat_play_time']].sum().reset_index()\nprint(ple2.shape)\nple2.head()","e56548a5":"sns.lmplot(x='combat_char_cnt',y='combat_play_time',data=ple2,fit_reg=False)","5116da9a":"dp = ple2.drop(['real_pledge_id'],axis=1).values","1351065a":"def elbow(x):\n    sse = []\n    for i in range(1,16):\n        km = KMeans(n_clusters=i, random_state=19)\n        km.fit(x)\n        sse.append(km.inertia_)\n    \n    plt.plot(range(1,16), sse, marker='o')\n    plt.xlabel('k')\n    plt.ylabel('SSE')\n    plt.show()\n\nelbow(dp)","5d3276a1":"km = KMeans(n_clusters=3)\nkm.fit(dp)\nkm.labels_[:5]","a86991fc":"ple2['cluster'] = km.labels_\nple2.head()","78072e1c":"sns.lmplot(x='play_char_cnt',y='combat_char_cnt',data=ple2,fit_reg=False,hue='cluster')","fc292ca8":"ple2 = ple2[['real_pledge_id','cluster']]\nple2.head()","d54a3ad2":"ple2['cluster'].value_counts()","a4edc2c1":"train_ple['pledge_id2'] = train_ple['pledge_id'].astype(str)\ntrain_ple['real_pledge_id'] = train_ple['server'] + '_' + train_ple['pledge_id2']\ntrain_ple.drop('pledge_id2',axis=1,inplace=True)\ntrain_ple.head()","b4f9541c":"test1_ple['pledge_id2'] = test1_ple['pledge_id'].astype(str)\ntest1_ple['real_pledge_id'] = test1_ple['server'] + '_' + test1_ple['pledge_id2']\ntest1_ple.drop('pledge_id2',axis=1,inplace=True)\ntest1_ple.head()","a10833ca":"test2_ple['pledge_id2'] = test2_ple['pledge_id'].astype(str)\ntest2_ple['real_pledge_id'] = test2_ple['server'] + '_' + test2_ple['pledge_id2']\ntest2_ple.drop('pledge_id2',axis=1,inplace=True)\ntest2_ple.head()","bc9e41b8":"# train_ple = pd.merge(train_ple, ple2, on='real_pledge_id', how='left')","d8119820":"train_act.head()","d98782ad":"act0 = train_act.groupby('acc_id')[['day','char_id','server']].nunique().reset_index()\nact1 = test1_act.groupby('acc_id')[['day','char_id','server']].nunique().reset_index()\nact2 = test2_act.groupby('acc_id')[['day','char_id','server']].nunique().reset_index()\nact0.head()","8ddc308b":"ps0 = train_act.groupby('acc_id')['playtime'].sum().reset_index(name='playtime_sum')\npm0 = train_act.groupby('acc_id')['playtime'].mean().reset_index(name='playtime_mean')\npst0 = train_act.groupby('acc_id')['playtime'].std(ddof=0).reset_index(name='playtime_std')\nact0_1 = pd.merge(ps0, pm0, on='acc_id', how='left')\nact0_1 = pd.merge(act0_1, pst0, on='acc_id', how='left')\nps1 = test1_act.groupby('acc_id')['playtime'].sum().reset_index(name='playtime_sum')\npm1 = test1_act.groupby('acc_id')['playtime'].mean().reset_index(name='playtime_mean')\npst1 = test1_act.groupby('acc_id')['playtime'].std(ddof=0).reset_index(name='playtime_std')\nact1_1 = pd.merge(ps1, pm1, on='acc_id', how='left')\nact1_1 = pd.merge(act1_1, pst1, on='acc_id', how='left')\nps2 = test2_act.groupby('acc_id')['playtime'].sum().reset_index(name='playtime_sum')\npm2 = test2_act.groupby('acc_id')['playtime'].mean().reset_index(name='playtime_mean')\npst2 = test2_act.groupby('acc_id')['playtime'].std(ddof=0).reset_index(name='playtime_std')\nact2_1 = pd.merge(ps2, pm2, on='acc_id', how='left')\nact2_1 = pd.merge(act2_1, pst2, on='acc_id', how='left')\nact0_1.head()","10b240fa":"train_act['game_money'] = abs(train_act['game_money_change'])\ntest1_act['game_money'] = abs(test1_act['game_money_change'])\ntest2_act['game_money'] = abs(test2_act['game_money_change'])\nact0_2 = train_act.groupby('acc_id')[['npc_kill','solo_exp','quest_exp','party_exp','fishing','death','revive','exp_recovery','enchant_count','game_money','rich_monster']].sum().reset_index()\nact1_2 = test1_act.groupby('acc_id')[['npc_kill','solo_exp','quest_exp','party_exp','fishing','death','revive','exp_recovery','enchant_count','game_money','rich_monster']].sum().reset_index()\nact2_2 = test2_act.groupby('acc_id')[['npc_kill','solo_exp','quest_exp','party_exp','fishing','death','revive','exp_recovery','enchant_count','game_money','rich_monster']].sum().reset_index()\nact0_2.head()","18609d94":"ss0 = train_act.groupby('acc_id')['private_shop'].sum().reset_index(name='private_shop_sum')\nsm0 = train_act.groupby('acc_id')['private_shop'].mean().reset_index(name='private_shop_mean')\nact0_3 = pd.merge(ss0, sm0, on='acc_id', how='left')\nss1 = test1_act.groupby('acc_id')['private_shop'].sum().reset_index(name='private_shop_sum')\nsm1 = test1_act.groupby('acc_id')['private_shop'].mean().reset_index(name='private_shop_mean')\nact1_3 = pd.merge(ss1, sm1, on='acc_id', how='left')\nss2 = test2_act.groupby('acc_id')['private_shop'].sum().reset_index(name='private_shop_sum')\nsm2 = test2_act.groupby('acc_id')['private_shop'].mean().reset_index(name='private_shop_mean')\nact2_3 = pd.merge(ss2, sm2, on='acc_id', how='left')\nact0_3.head()","6466b121":"activity0 = pd.merge(act0, act0_1, on='acc_id', how='left')\nactivity0 = pd.merge(activity0, act0_2, on='acc_id', how='left')\nactivity0 = pd.merge(activity0, act0_3, on='acc_id', how='left')\n\nactivity1 = pd.merge(act1, act1_1, on='acc_id', how='left')\nactivity1 = pd.merge(activity1, act1_2, on='acc_id', how='left')\nactivity1 = pd.merge(activity1, act1_3, on='acc_id', how='left')\n\nactivity2 = pd.merge(act2, act2_1, on='acc_id', how='left')\nactivity2 = pd.merge(activity2, act2_2, on='acc_id', how='left')\nactivity2 = pd.merge(activity2, act2_3, on='acc_id', how='left')\nactivity0.head()","d6f815f8":"activity1.head()","e9210020":"activity2.head()","b51f2b6f":"train_com.head()","b97e1ba7":"cd0 = pd.get_dummies(train_com['class'], prefix='class')\ncd1 = pd.get_dummies(test1_com['class'], prefix='class')\ncd2 = pd.get_dummies(test2_com['class'], prefix='class')\ncd0.head()","a38424bd":"train_com = train_com.join(cd0)\ntest1_com = test1_com.join(cd1)\ntest2_com = test2_com.join(cd2)\ntrain_com.head()","430e72e9":"com0 = train_com.groupby('acc_id')[['class_0','class_1','class_2','class_3','class_4','class_5','class_6','class_7']].sum().reset_index()\ncom1 = test1_com.groupby('acc_id')[['class_0','class_1','class_2','class_3','class_4','class_5','class_6','class_7']].sum().reset_index()\ncom2 = test2_com.groupby('acc_id')[['class_0','class_1','class_2','class_3','class_4','class_5','class_6','class_7']].sum().reset_index()\ncom0.head()","9e59182e":"com0_1 = train_com.groupby('acc_id')['level'].mean().reset_index()\ncom1_1 = test1_com.groupby('acc_id')['level'].mean().reset_index()\ncom2_1 = test2_com.groupby('acc_id')['level'].mean().reset_index()\ncom0_1.head()","656f193c":"cps0 = train_com.groupby('acc_id')['pledge_cnt'].sum().reset_index(name='pledge_cnt_sum')\ncpm0 = train_com.groupby('acc_id')['pledge_cnt'].mean().reset_index(name='pledge_cnt_mean')\ncom0_2 = pd.merge(cps0, cpm0, on='acc_id', how='left')\ncps1 = test1_com.groupby('acc_id')['pledge_cnt'].sum().reset_index(name='pledge_cnt_sum')\ncpm1 = test1_com.groupby('acc_id')['pledge_cnt'].mean().reset_index(name='pledge_cnt_mean')\ncom1_2 = pd.merge(cps1, cpm1, on='acc_id', how='left')\ncps2 = test2_com.groupby('acc_id')['pledge_cnt'].sum().reset_index(name='pledge_cnt_sum')\ncpm2 = test2_com.groupby('acc_id')['pledge_cnt'].mean().reset_index(name='pledge_cnt_mean')\ncom2_2 = pd.merge(cps2, cpm2, on='acc_id', how='left')\ncom0_2.head()","91b2eb2d":"crs0 = train_com.groupby('acc_id')['random_attacker_cnt'].sum().reset_index(name='random_attacker_cnt_sum')\ncrm0 = train_com.groupby('acc_id')['random_attacker_cnt'].mean().reset_index(name='random_attacker_cnt_mean')\ncom0_3 = pd.merge(crs0, crm0, on='acc_id', how='left')\ncrs1 = test1_com.groupby('acc_id')['random_attacker_cnt'].sum().reset_index(name='random_attacker_cnt_sum')\ncrm1 = test1_com.groupby('acc_id')['random_attacker_cnt'].mean().reset_index(name='random_attacker_cnt_mean')\ncom1_3 = pd.merge(crs1, crm1, on='acc_id', how='left')\ncrs2 = test2_com.groupby('acc_id')['random_attacker_cnt'].sum().reset_index(name='random_attacker_cnt_sum')\ncrm2 = test2_com.groupby('acc_id')['random_attacker_cnt'].mean().reset_index(name='random_attacker_cnt_mean')\ncom2_3 = pd.merge(crs2, crm2, on='acc_id', how='left')\ncom0_3.head()","bdb38686":"crds0 = train_com.groupby('acc_id')['random_defender_cnt'].sum().reset_index(name='random_defender_cnt_sum')\ncrdm0 = train_com.groupby('acc_id')['random_defender_cnt'].mean().reset_index(name='random_defender_cnt_mean')\ncom0_4 = pd.merge(crds0, crdm0, on='acc_id', how='left')\ncrds1 = test1_com.groupby('acc_id')['random_defender_cnt'].sum().reset_index(name='random_defender_cnt_sum')\ncrdm1 = test1_com.groupby('acc_id')['random_defender_cnt'].mean().reset_index(name='random_defender_cnt_mean')\ncom1_4 = pd.merge(crds1, crdm1, on='acc_id', how='left')\ncrds2 = test2_com.groupby('acc_id')['random_defender_cnt'].sum().reset_index(name='random_defender_cnt_sum')\ncrdm2 = test2_com.groupby('acc_id')['random_defender_cnt'].mean().reset_index(name='random_defender_cnt_mean')\ncom2_4 = pd.merge(crds2, crdm2, on='acc_id', how='left')\ncom0_4.head()","a6ef9e3c":"cts0 = train_com.groupby('acc_id')['temp_cnt'].sum().reset_index(name='temp_cnt_sum')\nctm0 = train_com.groupby('acc_id')['temp_cnt'].mean().reset_index(name='temp_cnt_mean')\ncom0_5 = pd.merge(cts0, ctm0, on='acc_id', how='left')\ncts1 = test1_com.groupby('acc_id')['temp_cnt'].sum().reset_index(name='temp_cnt_sum')\nctm1 = test1_com.groupby('acc_id')['temp_cnt'].mean().reset_index(name='temp_cnt_mean')\ncom1_5 = pd.merge(cts1, ctm1, on='acc_id', how='left')\ncts2 = test2_com.groupby('acc_id')['temp_cnt'].sum().reset_index(name='temp_cnt_sum')\nctm2 = test2_com.groupby('acc_id')['temp_cnt'].mean().reset_index(name='temp_cnt_mean')\ncom2_5 = pd.merge(cts2, ctm2, on='acc_id', how='left')\ncom0_5.head()","dfa1cb43":"css0 = train_com.groupby('acc_id')['same_pledge_cnt'].sum().reset_index(name='same_pledge_cnt_sum')\ncsm0 = train_com.groupby('acc_id')['same_pledge_cnt'].mean().reset_index(name='same_pledge_cnt_mean')\ncom0_6 = pd.merge(css0, csm0, on='acc_id', how='left')\ncss1 = test1_com.groupby('acc_id')['same_pledge_cnt'].sum().reset_index(name='same_pledge_cnt_sum')\ncsm1 = test1_com.groupby('acc_id')['same_pledge_cnt'].mean().reset_index(name='same_pledge_cnt_mean')\ncom1_6 = pd.merge(css1, csm1, on='acc_id', how='left')\ncss2 = test2_com.groupby('acc_id')['same_pledge_cnt'].sum().reset_index(name='same_pledge_cnt_sum')\ncsm2 = test2_com.groupby('acc_id')['same_pledge_cnt'].mean().reset_index(name='same_pledge_cnt_mean')\ncom2_6 = pd.merge(css2, csm2, on='acc_id', how='left')\ncom0_6.head()","d2b5005a":"ces0 = train_com.groupby('acc_id')['etc_cnt'].sum().reset_index(name='etc_cnt_sum')\ncem0 = train_com.groupby('acc_id')['etc_cnt'].mean().reset_index(name='etc_cnt_mean')\ncom0_7 = pd.merge(ces0, cem0, on='acc_id', how='left')\nces1 = test1_com.groupby('acc_id')['etc_cnt'].sum().reset_index(name='etc_cnt_sum')\ncem1 = test1_com.groupby('acc_id')['etc_cnt'].mean().reset_index(name='etc_cnt_mean')\ncom1_7 = pd.merge(ces1, cem1, on='acc_id', how='left')\nces2 = test2_com.groupby('acc_id')['etc_cnt'].sum().reset_index(name='etc_cnt_sum')\ncem2 = test2_com.groupby('acc_id')['etc_cnt'].mean().reset_index(name='etc_cnt_mean')\ncom2_7 = pd.merge(ces2, cem2, on='acc_id', how='left')\ncom0_7.head()","8504a9eb":"cns0 = train_com.groupby('acc_id')['num_opponent'].sum().reset_index(name='num_opponent_sum')\ncnm0 = train_com.groupby('acc_id')['num_opponent'].mean().reset_index(name='num_opponent_mean')\ncom0_8 = pd.merge(cns0, cnm0, on='acc_id', how='left')\ncns1 = test1_com.groupby('acc_id')['num_opponent'].sum().reset_index(name='num_opponent_sum')\ncnm1 = test1_com.groupby('acc_id')['num_opponent'].mean().reset_index(name='num_opponent_mean')\ncom1_8 = pd.merge(cns1, cnm1, on='acc_id', how='left')\ncns2 = test2_com.groupby('acc_id')['num_opponent'].sum().reset_index(name='num_opponent_sum')\ncnm2 = test2_com.groupby('acc_id')['num_opponent'].mean().reset_index(name='num_opponent_mean')\ncom2_8 = pd.merge(cns2, cnm2, on='acc_id', how='left')\ncom0_8.head()","2d1b3c21":"combat0 = pd.merge(com0, com0_1, on='acc_id', how='left')\ncombat0 = pd.merge(combat0, com0_2, on='acc_id', how='left')\ncombat0 = pd.merge(combat0, com0_3, on='acc_id', how='left')\ncombat0 = pd.merge(combat0, com0_4, on='acc_id', how='left')\ncombat0 = pd.merge(combat0, com0_5, on='acc_id', how='left')\ncombat0 = pd.merge(combat0, com0_6, on='acc_id', how='left')\ncombat0 = pd.merge(combat0, com0_7, on='acc_id', how='left')\ncombat0 = pd.merge(combat0, com0_8, on='acc_id', how='left')\n\ncombat1 = pd.merge(com1, com1_1, on='acc_id', how='left')\ncombat1 = pd.merge(combat1, com1_2, on='acc_id', how='left')\ncombat1 = pd.merge(combat1, com1_3, on='acc_id', how='left')\ncombat1 = pd.merge(combat1, com1_4, on='acc_id', how='left')\ncombat1 = pd.merge(combat1, com1_5, on='acc_id', how='left')\ncombat1 = pd.merge(combat1, com1_6, on='acc_id', how='left')\ncombat1 = pd.merge(combat1, com1_7, on='acc_id', how='left')\ncombat1 = pd.merge(combat1, com1_8, on='acc_id', how='left')\n\ncombat2 = pd.merge(com2, com2_1, on='acc_id', how='left')\ncombat2 = pd.merge(combat2, com2_2, on='acc_id', how='left')\ncombat2 = pd.merge(combat2, com2_3, on='acc_id', how='left')\ncombat2 = pd.merge(combat2, com2_4, on='acc_id', how='left')\ncombat2 = pd.merge(combat2, com2_5, on='acc_id', how='left')\ncombat2 = pd.merge(combat2, com2_6, on='acc_id', how='left')\ncombat2 = pd.merge(combat2, com2_7, on='acc_id', how='left')\ncombat2 = pd.merge(combat2, com2_8, on='acc_id', how='left')\n\ncombat0.head()","98ceea52":"combat1.head()","3500d3da":"combat2.head()","e124697c":"train_ple.head()","d9873406":"# pds = pd.get_dummies(train_ple['cluster'],prefix='pledge_clust')\n# pds.head()","79d26e8d":"# train_ple = train_ple.join(pds)\n# train_ple.drop('cluster',axis=1,inplace=True)\n# train_ple.head()","0c60d8a5":"# pdc = train_ple.groupby('acc_id')[['pledge_clust_0','pledge_clust_1','pledge_clust_2']].sum().reset_index()\n# pdc.head()","592459a9":"# pdc['pledge_clust_0'] = pdc['pledge_clust_0'].map(lambda x: 1 if x>0 else 0)\n# pdc['pledge_clust_1'] = pdc['pledge_clust_1'].map(lambda x: 1 if x>0 else 0)\n# pdc['pledge_clust_2'] = pdc['pledge_clust_2'].map(lambda x: 1 if x>0 else 0)\n# pdc.head()","c4b5b467":"pledge0 = train_ple.groupby(['acc_id'])['real_pledge_id'].nunique().reset_index()\npledge0.head()","da2469af":"pledge1 = test1_ple.groupby(['acc_id'])['real_pledge_id'].nunique().reset_index()\npledge1.head()","a527c9bb":"pledge2 = test2_ple.groupby(['acc_id'])['real_pledge_id'].nunique().reset_index()\npledge2.head()","e6b3b999":"train_tra.head()","ef1121e6":"train_sell = train_tra.drop(['target_acc_id','target_char_id'],axis=1)  # \ud310\ub9e4 \ub370\uc774\ud130\ntrain_buy = train_tra.drop(['source_acc_id','source_char_id'],axis=1)   # \uad6c\ub9e4 \ub370\uc774\ud130\n\ntest1_sell = test1_tra.drop(['target_acc_id','target_char_id'],axis=1)  # \ud310\ub9e4 \ub370\uc774\ud130\ntest1_buy = test1_tra.drop(['source_acc_id','source_char_id'],axis=1)   # \uad6c\ub9e4 \ub370\uc774\ud130\n\ntest2_sell = test2_tra.drop(['target_acc_id','target_char_id'],axis=1)  # \ud310\ub9e4 \ub370\uc774\ud130\ntest2_buy = test2_tra.drop(['source_acc_id','source_char_id'],axis=1)   # \uad6c\ub9e4 \ub370\uc774\ud130\ntrain_sell.head()","85520ba5":"train_buy.head()","2958af1d":"train_sell = train_sell.rename(columns = {'source_acc_id':'acc_id',\n                                          'source_char_id':'char_id',\n                                          'item_type':'sell_item_type',\n                                          'item_amount':'sell_item_amount',\n                                          'item_price':'sell_item_price',\n                                          'time':'sell_time',\n                                          'type':'sell_type'})\ntrain_buy = train_buy.rename(columns = {'target_acc_id':'acc_id',\n                                         'target_char_id':'char_id',\n                                         'item_type':'buy_item_type',\n                                         'item_amount':'buy_item_amount',\n                                         'item_price':'buy_item_price',\n                                         'time':'buy_time',\n                                         'type':'buy_type'})\ntest1_sell = test1_sell.rename(columns = {'source_acc_id':'acc_id',\n                                          'source_char_id':'char_id',\n                                          'item_type':'sell_item_type',\n                                          'item_amount':'sell_item_amount',\n                                          'item_price':'sell_item_price',\n                                          'time':'sell_time',\n                                          'type':'sell_type'})\ntest1_buy = test1_buy.rename(columns = {'target_acc_id':'acc_id',\n                                        'target_char_id':'char_id',\n                                        'item_type':'buy_item_type',\n                                        'item_amount':'buy_item_amount',\n                                        'item_price':'buy_item_price',\n                                        'time':'buy_time',\n                                        'type':'buy_type'})\ntest2_sell = test2_sell.rename(columns = {'source_acc_id':'acc_id',\n                                          'source_char_id':'char_id',\n                                          'item_type':'sell_item_type',\n                                          'item_amount':'sell_item_amount',\n                                          'item_price':'sell_item_price',\n                                          'time':'sell_time',\n                                          'type':'sell_type'})\ntest2_buy = test2_buy.rename(columns = {'target_acc_id':'acc_id',\n                                        'target_char_id':'char_id',\n                                        'item_type':'buy_item_type',\n                                        'item_amount':'buy_item_amount',\n                                        'item_price':'buy_item_price',\n                                        'time':'buy_time',\n                                        'type':'buy_type'})\ntrain_sell.head()","5d3140fa":"train_buy.head()","1b0ac587":"uniq_acc_id0 = train_lab['acc_id'].values\nprint(len(uniq_acc_id0))\nuniq_acc_id0[:10]","b2d48554":"uniq_acc_id1 = test1_act['acc_id'].unique()\nprint(len(uniq_acc_id1))\nuniq_acc_id1[:10]","f12299a3":"uniq_acc_id2 = test2_act['acc_id'].unique()\nprint(len(uniq_acc_id2))\nuniq_acc_id2[:10]","d6350ce0":"train_sell = train_sell[train_sell['acc_id'].isin(uniq_acc_id0)]\ntrain_buy = train_buy[train_buy['acc_id'].isin(uniq_acc_id0)]\n\ntest1_sell = test1_sell[test1_sell['acc_id'].isin(uniq_acc_id1)]\ntest1_buy = test1_buy[test1_buy['acc_id'].isin(uniq_acc_id1)]\n\ntest2_sell = test2_sell[test2_sell['acc_id'].isin(uniq_acc_id2)]\ntest2_buy = test2_buy[test2_buy['acc_id'].isin(uniq_acc_id2)]\nprint(train_sell.shape)\ntrain_sell.head()","8b61bebb":"print(train_buy.shape)\ntrain_buy.head()","be9033d3":"sid0 = pd.get_dummies(train_sell['sell_item_type'],prefix='sell')\nbid0 = pd.get_dummies(train_buy['buy_item_type'],prefix='buy')\n\nsid1 = pd.get_dummies(test1_sell['sell_item_type'],prefix='sell')\nbid1 = pd.get_dummies(test1_buy['buy_item_type'],prefix='buy')\n\nsid2 = pd.get_dummies(test2_sell['sell_item_type'],prefix='sell')\nbid2 = pd.get_dummies(test2_buy['buy_item_type'],prefix='buy')\n\nsid0.head()","e713ffae":"train_sell = train_sell.join(sid0)\ntrain_buy = train_buy.join(bid0)\ntest1_sell = test1_sell.join(sid1)\ntest1_buy = test1_buy.join(bid1)\ntest2_sell = test2_sell.join(sid2)\ntest2_buy = test2_buy.join(bid2)\ntrain_sell.head()","92b7e2e5":"si0 = train_sell.groupby('acc_id')[['sell_accessory','sell_adena','sell_armor','sell_enchant_scroll','sell_etc','sell_spell','sell_weapon']].sum().reset_index()\nbi0 = train_buy.groupby('acc_id')[['buy_accessory','buy_adena','buy_armor','buy_enchant_scroll','buy_etc','buy_spell','buy_weapon']].sum().reset_index()\n\nsi1 = test1_sell.groupby('acc_id')[['sell_accessory','sell_adena','sell_armor','sell_enchant_scroll','sell_etc','sell_spell','sell_weapon']].sum().reset_index()\nbi1 = test1_buy.groupby('acc_id')[['buy_accessory','buy_adena','buy_armor','buy_enchant_scroll','buy_etc','buy_spell','buy_weapon']].sum().reset_index()\n\nsi2 = test2_sell.groupby('acc_id')[['sell_accessory','sell_adena','sell_armor','sell_enchant_scroll','sell_etc','sell_spell','sell_weapon']].sum().reset_index()\nbi2 = test2_buy.groupby('acc_id')[['buy_accessory','buy_adena','buy_armor','buy_enchant_scroll','buy_etc','buy_spell','buy_weapon']].sum().reset_index()\nsi0.head()","05f7e397":"bi0.head()","95920f23":"std0 = pd.get_dummies(train_sell['sell_type'],prefix='sell')\nbtd0 = pd.get_dummies(train_buy['buy_type'],prefix='buy')\n\nstd1 = pd.get_dummies(test1_sell['sell_type'],prefix='sell')\nbtd1 = pd.get_dummies(test1_buy['buy_type'],prefix='buy')\n\nstd2 = pd.get_dummies(test2_sell['sell_type'],prefix='sell')\nbtd2 = pd.get_dummies(test2_buy['buy_type'],prefix='buy')\n\nstd0.head()","f0f21d88":"train_sell = train_sell.join(std0)\ntrain_buy = train_buy.join(btd0)\ntest1_sell = test1_sell.join(std1)\ntest1_buy = test1_buy.join(btd1)\ntest2_sell = test2_sell.join(std2)\ntest2_buy = test2_buy.join(btd2)\ntrain_sell.head()","ae143db5":"st0 = train_sell.groupby('acc_id')[['sell_0','sell_1']].sum().reset_index()\nbt0 = train_buy.groupby('acc_id')[['buy_0','buy_1']].sum().reset_index()\n\nst1 = test1_sell.groupby('acc_id')[['sell_0','sell_1']].sum().reset_index()\nbt1 = test1_buy.groupby('acc_id')[['buy_0','buy_1']].sum().reset_index()\n\nst2 = test2_sell.groupby('acc_id')[['sell_0','sell_1']].sum().reset_index()\nbt2 = test2_buy.groupby('acc_id')[['buy_0','buy_1']].sum().reset_index()\nst0.head()","56b6beab":"sas0 = train_sell.groupby('acc_id')['sell_item_amount'].sum().reset_index()\nbas0 = train_buy.groupby('acc_id')['buy_item_amount'].sum().reset_index()\n\nsas1 = test1_sell.groupby('acc_id')['sell_item_amount'].sum().reset_index()\nbas1 = test1_buy.groupby('acc_id')['buy_item_amount'].sum().reset_index()\n\nsas2 = test2_sell.groupby('acc_id')['sell_item_amount'].sum().reset_index()\nbas2 = test2_buy.groupby('acc_id')['buy_item_amount'].sum().reset_index()\nsas0.head()","1e1896a4":"trade0 = pd.merge(si0, bi0, on='acc_id', how='left')\ntrade0 = pd.merge(trade0, st0, on='acc_id', how='left')\ntrade0 = pd.merge(trade0, bt0, on='acc_id', how='left')\ntrade0 = pd.merge(trade0, sas0, on='acc_id', how='left')\ntrade0 = pd.merge(trade0, bas0, on='acc_id', how='left')\n\ntrade1 = pd.merge(si1, bi1, on='acc_id', how='left')\ntrade1 = pd.merge(trade1, st1, on='acc_id', how='left')\ntrade1 = pd.merge(trade1, bt1, on='acc_id', how='left')\ntrade1 = pd.merge(trade1, sas1, on='acc_id', how='left')\ntrade1 = pd.merge(trade1, bas1, on='acc_id', how='left')\n\ntrade2 = pd.merge(si2, bi2, on='acc_id', how='left')\ntrade2 = pd.merge(trade2, st2, on='acc_id', how='left')\ntrade2 = pd.merge(trade2, bt2, on='acc_id', how='left')\ntrade2 = pd.merge(trade2, sas2, on='acc_id', how='left')\ntrade2 = pd.merge(trade2, bas2, on='acc_id', how='left')\ntrade0.head()","21c7f639":"train_pay.head()","a8faca8f":"tp0 = train_pay.groupby('acc_id')['day'].nunique().reset_index(name='spent_day_count')\ntp1 = test1_pay.groupby('acc_id')['day'].nunique().reset_index(name='spent_day_count')\ntp2 = test2_pay.groupby('acc_id')['day'].nunique().reset_index(name='spent_day_count')\ntp0.head()","7eca0761":"sds0 = train_pay.groupby('acc_id')['amount_spent'].sum().reset_index(name='sum_spent')\nsds1 = test1_pay.groupby('acc_id')['amount_spent'].sum().reset_index(name='sum_spent')\nsds2 = test2_pay.groupby('acc_id')['amount_spent'].sum().reset_index(name='sum_spent')\nsds0.head()","4ff34342":"ds0 = pd.merge(act0[['acc_id','day']], sds0, on='acc_id')\nds1 = pd.merge(act1[['acc_id','day']], sds1, on='acc_id')\nds2 = pd.merge(act2[['acc_id','day']], sds2, on='acc_id')\nds0.head()","46d19944":"ds0['daily_spent'] = ds0['sum_spent'] \/ ds0['day']\nds1['daily_spent'] = ds1['sum_spent'] \/ ds1['day']\nds2['daily_spent'] = ds2['sum_spent'] \/ ds2['day']\nds0.drop('day',axis=1,inplace=True)\nds1.drop('day',axis=1,inplace=True)\nds2.drop('day',axis=1,inplace=True)\nds0.head()","c4231070":"payment0 = pd.merge(tp0, ds0, on='acc_id', how='left')\n\npayment1 = pd.merge(tp1, ds1, on='acc_id', how='left')\n\npayment2 = pd.merge(tp2, ds2, on='acc_id', how='left')\npayment0.head()","a02e442c":"train = pd.merge(activity0, combat0, on='acc_id', how='left')\ntrain = pd.merge(train, pledge0, on='acc_id', how='left')\ntrain = pd.merge(train, trade0, on='acc_id', how='left')\ntrain = pd.merge(train, payment0, on='acc_id', how='left')\ntrain = train.fillna(0)\ntrain = pd.merge(train, train_lab, on='acc_id', how='left')\nprint(train.shape)\ntrain.head()","53ecd23a":"test1 = pd.merge(activity1, combat1, on='acc_id', how='left')\ntest1 = pd.merge(test1, pledge1, on='acc_id', how='left')\ntest1 = pd.merge(test1, trade1, on='acc_id', how='left')\ntest1 = pd.merge(test1, payment1, on='acc_id', how='left')\ntest1 = test1.fillna(0)\nprint(test1.shape)\ntest1.head()","c8de9785":"test2 = pd.merge(activity2, combat2, on='acc_id', how='left')\ntest2 = pd.merge(test2, pledge2, on='acc_id', how='left')\ntest2 = pd.merge(test2, trade2, on='acc_id', how='left')\ntest2 = pd.merge(test2, payment2, on='acc_id', how='left')\ntest2 = test2.fillna(0)\nprint(test2.shape)\ntest2.head()","52650478":"tt = train.copy()\ntt = pd.merge(tt, train_valid, on='acc_id', how='left')\ntt.head()","e0e6b53c":"# tt['is_survival'] = 0\n# tt['is_survival'][tt['survival_time']==64] = 1\n# tt['is_spent'] = 0\n# tt['is_spent'][tt['amount_spent']>0] = 1\n# tt.head()","5f709102":"tt_train = tt[tt['set']=='Train']\ntt_valid = tt[tt['set']=='Validation']\nprint(tt_train.shape, tt_valid.shape)","5cd46992":"tt_train1 = tt_train[tt_train['survival_time']<64]\ntt_train2 = tt_train[tt_train['amount_spent']>0]\nprint(tt_train1.shape)\nprint(tt_train2.shape)","8721a7ff":"x_tt_train1 = tt_train1.drop(['acc_id','survival_time','amount_spent','set'],axis=1)\nx_tt_train2 = tt_train2.drop(['acc_id','survival_time','amount_spent','set'],axis=1)\nx_tt_valid = tt_valid.drop(['acc_id','survival_time','amount_spent','set'],axis=1)\ny1_tt_train = tt_train1['survival_time']\ny2_tt_train = tt_train2['amount_spent']","7c2e8f2a":"xgb_params={'eta':0.01,\n            'max_depth':6,\n            'objective':'reg:squarederror',\n            'eval_metric':'mae',\n            'min_child_samples':1,\n            'tree_method':'gpu_hist',\n            'predictor':'gpu_predictor'}","f09e54aa":"tt_dtrain = xgb.DMatrix(x_tt_train1, y1_tt_train)\ntt_dtest = xgb.DMatrix(x_tt_valid)\n\ncv_output = xgb.cv(xgb_params,\n                   tt_dtrain,\n                   num_boost_round = 5000,\n                   nfold = 5,\n                   early_stopping_rounds = 50,\n                   verbose_eval = 100,\n                   show_stdv = False)\n\nbest_rounds1 = cv_output.index.size\n\nprint('Best rounds :',best_rounds1)","92552194":"model1 = xgb.train(xgb_params,\n                   tt_dtrain,\n                   num_boost_round = best_rounds1)\ny1_tt_pred = model1.predict(tt_dtest)\ny1_tt_pred[:20]","94c24841":"fig, ax = plt.subplots(figsize=(10,10))\nxgb.plot_importance(model1,ax=ax)\nplt.show()","3d5fffe3":"tt_dtrain = xgb.DMatrix(x_tt_train2, y2_tt_train)\ntt_dtest = xgb.DMatrix(x_tt_valid)\n\ncv_output = xgb.cv(xgb_params,\n                   tt_dtrain,\n                   num_boost_round = 5000,\n                   nfold = 5,\n                   early_stopping_rounds = 50,\n                   verbose_eval = 100,\n                   show_stdv = False)\n\nbest_rounds2 = cv_output.index.size\n\nprint('Best rounds :',best_rounds2)","d8077246":"model2 = xgb.train(xgb_params,\n                   tt_dtrain,\n                   num_boost_round = best_rounds1)\ny2_tt_pred = model2.predict(tt_dtest)\ny2_tt_pred[:20]","1565a64b":"fig, ax = plt.subplots(figsize=(10,10))\nxgb.plot_importance(model2,ax=ax)\nplt.show()","578ba3f1":"tt_tt = pd.DataFrame({'acc_id':tt_valid['acc_id'],\n                      'survival_time':y1_tt_pred,\n                      'amount_spent':y2_tt_pred})\ntt_tt.head()","52d9994a":"tt_tt['survival_time'] = tt_tt['survival_time'].apply(lambda x: 64 if x>64 else x)\ntt_tt['survival_time'] = tt_tt['survival_time'].apply(lambda x: 1 if x<1 else x).round()\ntt_tt['amount_spent'] = tt_tt['amount_spent'].apply(lambda x: 0 if x<0 else x)\ntt_tt.head()","4bb043cb":"# x_cla_train = tt_train.drop(['acc_id','survival_time','amount_spent','set','is_survival','is_spent'],axis=1)\n# x_cla_valid = tt_valid.drop(['acc_id','survival_time','amount_spent','set','is_survival','is_spent'],axis=1)\n# y1_cla_train = tt_train['is_survival']\n# y2_cla_train = tt_train['is_spent']","1fb2a93d":"# xgb_params={'eta':0.05,\n#             'max_depth':6,\n#             'objective':'binary:logistic',\n#             'eval_metric':'auc',\n#             'min_child_samples':2,\n#             'tree_method':'gpu_hist',\n#             'predictor':'gpu_predictor'}","7c359179":"# cla_dtrain = xgb.DMatrix(x_cla_train,y1_cla_train)\n# cla_dtest = xgb.DMatrix(x_cla_valid)\n\n# cv_output = xgb.cv(xgb_params,\n#                    cla_dtrain,\n#                    num_boost_round = 5000,\n#                    nfold = 5,\n#                    early_stopping_rounds = 50,\n#                    verbose_eval = 100,\n#                    show_stdv = False)\n\n# best_rounds = cv_output.index.size\n\n# print('Best rounds :',best_rounds)","5c33954a":"# model = xgb.train(xgb_params,\n#                   cla_dtrain,\n#                   num_boost_round = best_rounds)\n# y1_cla_pred = model.predict(cla_dtest)\n# y1_cla_pred[:5]","9287eafc":"# tt_valid['surv_cla_pred'] = y1_cla_pred\n# tt_valid['surv_cla_pred'] = tt_valid['surv_cla_pred'].map(lambda x: 0 if x<0.5 else 1)\n# tt_valid.head()","2a8c3a33":"# tt_train2 = tt_train[tt_train['survival_time']<64]\n# tt_train2.head()","d4012b00":"# tt_valid2 = tt_valid[tt_valid['surv_cla_pred']==0]\n# tt_valid2.head()","abf91008":"# x_reg_train = tt_train2.drop(['acc_id','survival_time','amount_spent','set','is_survival','is_spent'],axis=1)\n# x_reg_valid = tt_valid2.drop(['acc_id','survival_time','amount_spent','set','is_survival','is_spent','surv_cla_pred'],axis=1)\n# y1_reg_train = tt_train2['survival_time']","c0bd625c":"# xgb_params={'eta':0.05,\n#             'max_depth':6,\n#             'objective':'reg:squarederror',\n#             'eval_metric':'mae',\n#             'min_child_samples':2,\n#             'tree_method':'gpu_hist',\n#             'predictor':'gpu_predictor'}","3d7fa111":"# reg_dtrain = xgb.DMatrix(x_reg_train, y1_reg_train)\n# reg_dtest = xgb.DMatrix(x_reg_valid)\n\n# cv_output = xgb.cv(xgb_params,\n#                    reg_dtrain,\n#                    num_boost_round = 5000,\n#                    nfold = 5,\n#                    early_stopping_rounds = 50,\n#                    verbose_eval = 100,\n#                    show_stdv = False)\n\n# best_rounds = cv_output.index.size\n\n# print('Best rounds :',best_rounds)","f04d26ea":"# model = xgb.train(xgb_params,\n#                   reg_dtrain,\n#                   num_boost_round = best_rounds)\n# y1_reg_pred = model.predict(reg_dtest)\n# y1_reg_pred[:5]","5f951b3b":"# tt_valid2['survival_time_pred'] = y1_reg_pred\n# tt_valid2['survival_time_pred'] = tt_valid2['survival_time_pred'].map(lambda x: 1 if x<0 else x)\n# tt_valid2['survival_time_pred'] = tt_valid2['survival_time_pred'].map(lambda x: 63 if x>63 else x).round()\n# tt_valid2.head()","f8cef2cf":"# prediction = pd.merge(tt_valid[['acc_id']], tt_valid2[['acc_id','survival_time_pred']], on='acc_id', how='left')\n# prediction['survival_time_pred'] = prediction['survival_time_pred'].fillna(64)\n# prediction.head()","35ebbe33":"# xgb_params={'eta':0.05,\n#             'max_depth':6,\n#             'objective':'binary:logistic',\n#             'eval_metric':'auc',\n#             'min_child_samples':2,\n#             'tree_method':'gpu_hist',\n#             'predictor':'gpu_predictor'}","008fbb1f":"# cla_dtrain = xgb.DMatrix(x_cla_train, y2_cla_train)\n# cla_dtest = xgb.DMatrix(x_cla_valid)\n\n# cv_output = xgb.cv(xgb_params,\n#                    cla_dtrain,\n#                    num_boost_round = 5000,\n#                    nfold = 5,\n#                    early_stopping_rounds = 50,\n#                    verbose_eval = 100,\n#                    show_stdv = False)\n\n# best_rounds = cv_output.index.size\n\n# print('Best rounds :',best_rounds)","85e49858":"# model = xgb.train(xgb_params,\n#                   cla_dtrain,\n#                   num_boost_round = best_rounds)\n# y2_cla_pred = model.predict(cla_dtest)\n# y2_cla_pred[:5]","98181c58":"# tt_valid['amou_cla_pred'] = y2_cla_pred\n# tt_valid['amou_cla_pred'] = tt_valid['amou_cla_pred'].map(lambda x: 0 if x<0.5 else 1)\n# tt_valid.head()","2601cf88":"# tt_train3 = tt_train[tt_train['amount_spent']>0]\n# tt_train3.head()","0a42bfa3":"# tt_valid3 = tt_valid[tt_valid['amou_cla_pred']==1]\n# tt_valid3.head()","22b7b1de":"# x_reg_train = tt_train3.drop(['acc_id','survival_time','amount_spent','set','is_survival','is_spent'],axis=1)\n# x_reg_valid = tt_valid3.drop(['acc_id','survival_time','amount_spent','set','is_survival','is_spent','surv_cla_pred','amou_cla_pred'],axis=1)\n# y2_reg_train = tt_train3['amount_spent']","287adf9c":"# xgb_params={'eta':0.05,\n#             'max_depth':6,\n#             'objective':'reg:squarederror',\n#             'eval_metric':'mae',\n#             'min_child_samples':2,\n#             'tree_method':'gpu_hist',\n#             'predictor':'gpu_predictor'}","2c35fba6":"# reg_dtrain = xgb.DMatrix(x_reg_train, y2_reg_train)\n# reg_dtest = xgb.DMatrix(x_reg_valid)\n\n# cv_output = xgb.cv(xgb_params,\n#                    reg_dtrain,\n#                    num_boost_round = 5000,\n#                    nfold = 5,\n#                    early_stopping_rounds = 50,\n#                    verbose_eval = 100,\n#                    show_stdv = False)\n\n# best_rounds = cv_output.index.size\n\n# print('Best rounds :',best_rounds)","bdc9c172":"# model = xgb.train(xgb_params,\n#                   reg_dtrain,\n#                   num_boost_round = best_rounds)\n# y2_reg_pred = model.predict(reg_dtest)\n# y2_reg_pred[:5]","17a2a009":"# tt_valid3['amount_spent_pred'] = y2_reg_pred\n# tt_valid3['amount_spent_pred'] = tt_valid3['amount_spent_pred'].map(lambda x: y2_reg_pred[y2_reg_pred>0].min() if x<0 else x)\n# tt_valid3.head()","20715212":"# prediction = pd.merge(prediction, tt_valid3[['acc_id','amount_spent_pred']], on='acc_id', how='left')\n# prediction['amount_spent_pred'] = prediction['amount_spent_pred'].fillna(0)\n# prediction.head()","5441e8bc":"# prediction = prediction.rename(columns = {'survival_time_pred':'survival_time',\n#                                           'amount_spent_pred':'amount_spent'})\n# prediction.head()","fa953d0e":"true = tt_valid[['acc_id','survival_time','amount_spent']]\ntrue.head()","522eebc1":"# tt_tt = pd.DataFrame({'acc_id':tt_valid['acc_id'],\n#                       'survival_time':y1_tt_pred,\n#                       'amount_spent':y2_tt_pred})\n# tt_tt.head()","1a35c00e":"# def ss(x):\n#     if x>64:\n#         return 64\n#     elif x<1:\n#         return 1\n#     else:\n#         return x","1463dbaa":"# tt_tt['survival_time'] = tt_tt['survival_time'].map(ss)\n# tt_tt['survival_time'] = np.round(tt_tt['survival_time'])\n# tt_tt['amount_spent'] = tt_tt['amount_spent'].map(lambda x: 0 if x<0 else x)\n# tt_tt.head()","eb192041":"# ttt = pd.merge(train_lab, train_valid, on='acc_id', how='left')\n# true_ = ttt[ttt['set']=='Validation']\n# true_.drop('set',axis=1,inplace=True)\n# true_.head()","7d49f7c0":"def score_function(predict, actual):\n    \n    # predict = pd.read_csv(predict_label, engine='python') # \uc608\uce21 \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\n    # actual = pd.read_csv(actual_label,engine='python') # \uc2e4\uc81c \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\n\n\n    predict.acc_id = predict.acc_id.astype('int')\n    predict = predict.sort_values(by =['acc_id'], axis = 0) # \uc608\uce21 \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c \n    predict = predict.reset_index(drop = True)\n    actual.acc_id = actual.acc_id.astype('int')\n    actual = actual.sort_values(by =['acc_id'], axis = 0) # \uc2e4\uc81c \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c\n    actual =actual.reset_index(drop=True)\n    \n    if predict.acc_id.equals(actual.acc_id) == False:\n        print('acc_id of predicted and actual label does not match')\n        sys.exit() # \uc608\uce21 \ub2f5\uc548\uc758 acc_id\uc640 \uc2e4\uc81c \ub2f5\uc548\uc758 acc_id\uac00 \ub2e4\ub978 \uacbd\uc6b0 \uc5d0\ub7ec\ucc98\ub9ac \n    else:\n            \n        S, alpha, L, sigma = 30, 0.01, 0.1, 15  \n        cost, gamma, add_rev = 0,0,0 \n        profit_result = []\n        survival_time_pred = list(predict.survival_time)\n        amount_spent_pred = list(predict.amount_spent)\n        survival_time_actual = list(actual.survival_time)\n        amount_spent_actual = list(actual.amount_spent)    \n        for i in range(len(survival_time_pred)):\n            if survival_time_pred[i] == 64 :                 \n                cost = 0\n                optimal_cost = 0\n            else:\n                cost = alpha * S * amount_spent_pred[i]                    #\ube44\uc6a9 \uacc4\uc0b0\n                optimal_cost = alpha * S * amount_spent_actual[i]          #\uc801\uc815\ube44\uc6a9 \uacc4\uc0b0 \n            \n            if optimal_cost == 0:\n                gamma = 0\n            elif cost \/ optimal_cost < L:\n                gamma = 0\n            elif cost \/ optimal_cost >= 1:\n                gamma = 1\n            else:\n                gamma = (cost)\/((1-L)*optimal_cost) - L\/(1-L)              #\ubc18\uc751\ub960 \uacc4\uc0b0\n            \n            if survival_time_pred[i] == 64 or survival_time_actual[i] == 64:\n                T_k = 0\n            else:\n                T_k = S * np.exp(-((survival_time_pred[i] - survival_time_actual[i])**2)\/(2*(sigma)**2))    #\ucd94\uac00 \uc0dd\uc874\uae30\uac04 \uacc4\uc0b0\n                \n            add_rev = T_k * amount_spent_actual[i]                         #\uc794\uc874\uac00\uce58 \uacc4\uc0b0\n    \n           \n            profit = gamma * add_rev - cost                                #\uc720\uc800\ubcc4 \uae30\ub300\uc774\uc775 \uacc4\uc0b0\n            profit_result.append(profit)\n            \n        score = sum(profit_result)                                         #\uae30\ub300\uc774\uc775 \ucd1d\ud569 \uacc4\uc0b0\n    return score","82d2ce5e":"pred_test = tt_tt.copy()","a3d88e3a":"pred_test['survival_time'] = 13\npred_test['amount_spent'] = 1","8bc00b98":"tt_test = tt_tt.copy()\nfrom sklearn.preprocessing import minmax_scale\ntt_test['amount_spent'] = minmax_scale(tt_test['amount_spent'], (0,95))\ntt_test['survival_time'] = minmax_scale(tt_test['survival_time'], (1,30)).round()\ntt_test.head()","a153c795":"mine_score = score_function(tt_tt, true)\noing_score = score_function(tt_test, true)\npred_test_score = score_function(pred_test, true)\ntrue_score = score_function(true, true)\n\nprint('mine score :', mine_score)\nprint('\ubf55\ub9db score :', pred_test_score)\nprint('\ubf55\ub9db \uce58\uc0ac\ub7c9 score :', oing_score)\nprint('true score :', true_score)","6da0f133":"for i in [j\/10 for j in range(1,11)]:\n    print('{} :'.format(i), tt_tt['amount_spent'].quantile(i))","849e06b9":"for i in [j\/10 for j in range(1,11)]:\n    print('{} :'.format(i), tt_test['amount_spent'].quantile(i))","30679311":"for i in [j\/10 for j in range(1,11)]:\n    print('{} :'.format(i), train_lab['amount_spent'].quantile(i))","3e4ee733":"train1 = train[train['survival_time']!=64]\ntrain2 = train[train['amount_spent']>0]\nprint(train1.shape)\nprint(train2.shape)\ntrain1.head()","2e267aac":"x_train1 = train1.drop(['acc_id','survival_time','amount_spent'],axis=1)\nx_train2 = train2.drop(['acc_id','survival_time','amount_spent'],axis=1)\ny1_train = train1['survival_time']\ny2_train = train2['amount_spent']\nx_test1 = test1.drop('acc_id',axis=1)\nx_test2 = test2.drop('acc_id',axis=1)","6f56ffe2":"xgb_params={'eta':0.01,\n            'max_depth':6,\n            'objective':'reg:squarederror',\n            'eval_metric':'mae',\n            'min_child_samples':1,\n            'tree_method':'gpu_hist',\n            'predictor':'gpu_predictor'}","f6804005":"dtrain = xgb.DMatrix(x_train1, y1_train)\ndtest = xgb.DMatrix(x_test1)\n\ncv_output = xgb.cv(xgb_params,\n                   dtrain,\n                   num_boost_round = 5000,\n                   nfold = 5,\n                   early_stopping_rounds = 50,\n                   verbose_eval = 100,\n                   show_stdv = False)\n\nbest_rounds1 = cv_output.index.size\n\nprint('Best rounds :',best_rounds1)","bd2f976f":"model1 = xgb.train(xgb_params,\n                   dtrain,\n                   num_boost_round = best_rounds1)\nt1_y1_pred = model1.predict(dtest)\nt1_y1_pred[:20]","97aa578c":"fig, ax = plt.subplots(figsize=(10,10))\nxgb.plot_importance(model1,ax=ax)\nplt.show()","c97ec518":"dtrain = xgb.DMatrix(x_train2, y2_train)\ndtest = xgb.DMatrix(x_test1)\n\ncv_output = xgb.cv(xgb_params,\n                   dtrain,\n                   num_boost_round = 5000,\n                   nfold = 5,\n                   early_stopping_rounds = 50,\n                   verbose_eval = 100,\n                   show_stdv = False)\n\nbest_rounds2 = cv_output.index.size\n\nprint('Best rounds :',best_rounds2)","3120ae96":"model2 = xgb.train(xgb_params,\n                   dtrain,\n                   num_boost_round = best_rounds2)\nt1_y2_pred = model2.predict(dtest)\nt1_y2_pred[:20]","69472c88":"fig, ax = plt.subplots(figsize=(10,10))\nxgb.plot_importance(model2,ax=ax)\nplt.show()","a6a6fe00":"test1_pred = pd.DataFrame({'acc_id':test1['acc_id'],\n                           'survival_time':t1_y1_pred,\n                           'amount_spent':t1_y2_pred})\ntest1_pred.head()","8acbb8c8":"test1_pred['survival_time'] = test1_pred['survival_time'].apply(lambda x: 64 if x>64 else x)\ntest1_pred['survival_time'] = test1_pred['survival_time'].apply(lambda x: 1 if x<1 else x).round()\ntest1_pred['amount_spent'] = test1_pred['amount_spent'].map(lambda x: 0 if x<0 else x)\ntest1_pred['amount_spent'] = minmax_scale(test1_pred['amount_spent'], (0,95))\ntest1_pred['survival_time'] = minmax_scale(test1_pred['survival_time'], (1,30)).round()\ntest1_pred.head()","2d1dd09b":"test1_pred.to_csv('test1_predict.csv', index=False)","731ff884":"dtrain = xgb.DMatrix(x_train1, y1_train)\ndtest = xgb.DMatrix(x_test2)\n\ncv_output = xgb.cv(xgb_params,\n                   dtrain,\n                   num_boost_round = 5000,\n                   nfold = 5,\n                   early_stopping_rounds = 50,\n                   verbose_eval = 100,\n                   show_stdv = False)\n\nbest_rounds1 = cv_output.index.size\n\nprint('Best rounds :',best_rounds1)","37870353":"model1 = xgb.train(xgb_params,\n                   dtrain,\n                   num_boost_round = best_rounds1)\nt2_y1_pred = model1.predict(dtest)\nt2_y1_pred[:20]","028907d9":"fig, ax = plt.subplots(figsize=(10,10))\nxgb.plot_importance(model1,ax=ax)\nplt.show()","8a2afd6d":"dtrain = xgb.DMatrix(x_train2, y2_train)\ndtest = xgb.DMatrix(x_test2)\n\ncv_output = xgb.cv(xgb_params,\n                   dtrain,\n                   num_boost_round = 5000,\n                   nfold = 5,\n                   early_stopping_rounds = 50,\n                   verbose_eval = 100,\n                   show_stdv = False)\n\nbest_rounds2 = cv_output.index.size\n\nprint('Best rounds :',best_rounds2)","671c8410":"model2 = xgb.train(xgb_params,\n                   dtrain,\n                   num_boost_round = best_rounds2)\nt2_y2_pred = model2.predict(dtest)\nt2_y2_pred[:20]","a17d0660":"fig, ax = plt.subplots(figsize=(10,10))\nxgb.plot_importance(model2,ax=ax)\nplt.show()","160a9ab4":"test2_pred = pd.DataFrame({'acc_id':test2['acc_id'],\n                           'survival_time':t2_y1_pred,\n                           'amount_spent':t2_y2_pred})\ntest2_pred.head()","ba6437d9":"test2_pred['survival_time'] = test2_pred['survival_time'].apply(lambda x: 64 if x>64 else x)\ntest2_pred['survival_time'] = test2_pred['survival_time'].apply(lambda x: 1 if x<1 else x).round()\ntest2_pred['amount_spent'] = test2_pred['amount_spent'].map(lambda x: 0 if x<0 else x)\ntest2_pred['amount_spent'] = minmax_scale(test2_pred['amount_spent'], (0,95))\ntest2_pred['survival_time'] = minmax_scale(test2_pred['survival_time'], (1,30)).round()\ntest2_pred.head()","c072418c":"test2_pred.to_csv('test2_predict.csv', index=False)","70f22aa2":"## merge","2061e7c6":"\uc704\uc5d0\uc11c \ub9cc\ub4e0 real_pledge_id \uc774\uc6a9\ud574  \n\uc720\uc800\ubcc4 real_pledge_id -> nunique","7c4730fd":"\uc720\uc800\ubcc4 day, char_id, server -> nunique()","d0ba98a5":"\uc720\uc800\ubcc4 npc_kill, solo_exp, quest_exp, party_exp, fishing, death, revive, exp_recovery, rich_monster, enchant_count -> sum  \n\uc720\uc800\ubcc4 game_money_change -> abs \ud6c4 sum (\uc544\ub370\ub098 \ubcc0\ud654\ub7c9)","9af31eab":"\uc720\uc800\ubcc4 pledge_cnt, random_attacker_cnt, random_defender_cnt, temp_cnt, same_pledge_cnt, etc_cnt, num_opponent -> sum, mean","aa1ce01d":"type -> \ub354\ubbf8 \ud6c4 sum","37b3544e":"## activity","e71bdf2b":"## test1","cb1d7f40":"item_type -> \ub354\ubbf8 \ud6c4 sum","659b9f3a":"# Data Field\n\n## activity\n- day : \ub0a0\uc9dc\n- acc_id : \uc720\uc800 \uc544\uc774\ub514\n- char_id : \uce90\ub9ad\ud130 \uc544\uc774\ub514\n- server : \uce90\ub9ad\ud130 \uc11c\ubc84\n- playtime : \uc77c\uc77c \ud50c\ub808\uc774\uc2dc\uac04\n- npc_kill : NPC\ub97c \uc8fd\uc778 \ud69f\uc218\n- solo_exp : \uc194\ub85c\uc0ac\ub0e5 \ud68d\ub4dd \uacbd\ud5d8\uce58\n- party_exp : \ud30c\ud2f0\uc0ac\ub0e5 \ud68d\ub4dd \uacbd\ud5d8\uce58\n- quest_exp : \ud018\uc2a4\ud2b8 \ud68d\ub4dd \uacbd\ud5d8\uce58\n- rich_monster : \ubcf4\uc2a4 \ubaac\uc2a4\ud130 \ud0c0\uaca9 \uc5ec\ubd80 (0 = \ubbf8\ud0c0\uaca9, 1 = \ud0c0\uaca9)\n- death : \uce90\ub9ad\ud130 \uc0ac\ub9dd \ud69f\uc218\n- revive : \ubd80\ud65c \ud69f\uc218\n- exp_recovery : \uacbd\ud5d8\uce58 \ubcf5\uad6c \ud69f\uc218(\uc131\ub2f9)\n- fishing : \uc77c\uc77c \ub09a\uc2dc \uc2dc\uac04\n- private_shop : \uc77c\uc77c \uac1c\uc778\uc0c1\uc810 \uc6b4\uc601 \uc2dc\uac04\n- game_money_change : \uc77c\uc77c \uc544\ub370\ub098 \ubcc0\ub3d9\ub7c9\n- enchant_count : 7\ub808\ubca8 \uc774\uc0c1 \uc544\uc774\ud15c \uc778\uccb8\ud2b8 \uc2dc\ub3c4 \ud69f\uc218\n\n## combat\n- day : \ub0a0\uc9dc\n- acc_id : \uc720\uc800 \uc544\uc774\ub514\n- char_id : \uce90\ub9ad\ud130 \uc544\uc774\ub514\n- server : \uce90\ub9ad\ud130 \uc11c\ubc84\n- class : \uc9c1\uc5c5 (\ubc11\uc5d0 \ucc38\uc870)\n- level :\ub808\ubca8 (\ubc11\uc5d0 \ucc38\uc870)\n- pledge_cnt : \ud608\ub9f9\uac04 \uc804\ud22c\uc5d0 \ucc38\uc5ec\ud55c \ud69f\uc218\n- random_attacker_cnt : \ubcf8\uc778\uc774 \ubb34\uc791\uc704\uacf5\uaca9(\ub9c9\ud53c) \uacf5\uaca9\uc744 \ud589\ud55c \ud69f\uc218\n- random_defender_cnt : \ubb34\uc791\uc704\uacf5\uaca9(\ub9c9\ud53c) \uacf5\uaca9\uc790\ub85c\ubd80\ud130 \uacf5\uaca9\uc744 \ubc1b\uc740 \ud69f\uc218\n- temp_cnt : \ub2e8\ubc1c\uc131 \uc804\ud22c \ud69f\uc218\n- same_pledge_cnt : \ub3d9\uc77c \ud608\ub9f9\uc6d0 \uac04\uc758 \uc804\ud22c \ud69f\uc218\n- etc_cnt : \uae30\ud0c0 \uc804\ud22c \ud69f\uc218\n- num_opponent : \uc804\ud22c \uc0c1\ub300 \uce90\ub9ad\ud130 \uc218\n\nclass -> 0: \uad70\uc8fc, 1: \uae30\uc0ac, 2: \uc694\uc815, 3: \ub9c8\ubc95\uc0ac, 4: \ub2e4\ud06c\uc5d8\ud504, 5: \uc6a9\uae30\uc0ac, 6: \ud658\uc220\uc0ac, 7: \uc804\uc0ac\n\nlevel -> 0: 1~4, 1: 5~9, 2: 10~14, 3: 15~19, 4: 20~24, 5: 25~29, 6: 30~34, 7: 35~39, 8: 40~44, 9: 45~49, 10: 50~54, 11: 55~59, 12: 60~64, 13: 65~69, 14: 70~74, 15: 75~79, 16: 80~84, 17: 85\uc774\uc0c1\n\n## pledge\n- day : \ub0a0\uc9dc\n- acc_id : \uc720\uc800 \uc544\uc774\ub514\n- char_id : \uce90\ub9ad\ud130 \uc544\uc774\ub514\n- server : \uce90\ub9ad\ud130 \uc11c\ubc84\n- pledge_id : \ud608\ub9f9 \uc544\uc774\ub514\n- play_char_cnt : \uac8c\uc784\uc5d0 \uc811\uc18d\ud55c \ud608\ub9f9 \uc6d0 \uc218\n- combat_char_cnt : \uc804\ud22c\uc5d0 \ucc38\uc5ec \ud55c \ud608\ub9f9 \uc6d0 \uc218\n- pledge_combat_cnt : \ud608\ub9f9\uac04 \uc804\ud22c \ud69f\uc218\uc758 \ud569\n- random_attacker_cnt : \ud608\ub9f9\uc6d0 \uc911 \ubb34\uc791\uc704\uacf5\uaca9(\ub9c9\ud53c) \uc804\ud22c\ub97c \ud589\ud55c \ud69f\uc218\uc758 \ud569\n- random_defender_cnt : \ud608\ub9f9\uc6d0 \uc911 \ubb34\uc791\uc704\uacf5\uaca9(\ub9c9\ud53c)\ub85c\ubd80\ud130 \ud53c\ud574 \ub97c \ubc1b\uc740 \ud69f\uc218\uc758 \ud569\n- same_pledge_cnt : \ub3d9\uc77c \ud608\ub9f9 \uc6d0 \uac04 \uc804\ud22c \ud69f\uc218\uc758 \ud569\n- temp_cnt : \ud608\ub9f9\uc6d0\ub4e4\uc758 \ub2e8\ubc1c\uc131 \uc804\ud22c \ud69f\uc218\uc758 \ud569\n- etc_cnt : \ud608\ub9f9\uc6d0\ub4e4\uc758 \uae30\ud0c0 \uc804\ud22c \ud69f\uc218\uc758 \ud569\n- combat_play_time : \ud608\ub9f9\uc758 \uc804\ud22c \uce90\ub9ad\ud130\ub4e4\uc758 \ud50c\ub808\uc774 \uc2dc\uac04\uc758 \ud569\n -non_combat_play_time : \ud608\ub9f9\uc758 \u975e\uc804\ud22c \uce90\ub9ad\ud130 \ud50c\ub808\uc774 \uc2dc\uac04\uc758 \ud569\n\n## trade\n- day : \uac70\ub798 \ubc1c\uc0dd \uc77c\n- time : \uac70\ub798 \ubc1c\uc0dd \uc2dc\uac04 (00:00:00 ~ 23:59:59)\n- type : \uac70\ub798 \uad6c\ubd84 (\uad50\ud658\ucc3d = 1, \uac1c\uc778\uc0c1\uc810 = 0)\n- server : \uac70\ub798 \ubc1c\uc0dd \uc11c\ubc84\n- source_acc_id : \uc8fc\ub294\/\ud310\ub9e4 \uc720\uc800 \uc544\uc774\ub514\n- source_char_id : \uc8fc\ub294\/\ud310\ub9e4 \uce90\ub9ad\ud130 \uc544\uc774\ub514\n- target_acc_id : \ubc1b\ub294\/\uad6c\ub9e4 \uc720\uc800 \uc544\uc774\ub514\n- target_char_id : \ubc1b\ub294\/\uad6c\ub9e4 \uce90\ub9ad\ud130 \uc544\uc774\ub514\n- item_type : \uc544\uc774\ud15c \uc885\ub958 weapon(\ubb34\uae30), armor(\ubc29\uc5b4\uad6c), accessory(\uc561\uc138\uc11c\ub9ac), adena(\uc544\ub370\ub098), spell(\uc2a4\ud0ac\ubd81), enchant_scroll(\uac15\ud654\uc8fc\ubb38\uc11c), etc(\uae30\ud0c0)\n- item_amount : \uac70\ub798 \uc544\uc774\ud15c \uc218\ub7c9\n- item_price : \uac70\ub798 \uac00\uaca9 - \uad50\ud658\ucc3d \uac70\ub798 (Type=1)\uc77c \uacbd\uc6b0 NA\n\n## payment\n- day : \ub0a0\uc9dc\n- acc_id : \uc720\uc800 \uc544\uc774\ub514\n- amount_spent : \uacb0\uc81c \uae08\uc561\n\n## label (target)\n- acc_id : \uc720\uc800 \uc544\uc774\ub514\n- survival_time : \uc0dd\uc874 \uae30\uac04(\uc77c)\n- amount_spent : \uc77c\ubcc4 \ud3c9\uade0 \uacb0\uc81c \uae08\uc561","9e95c93e":"item_amount -> sum","064e4dfd":"## test2","46fba573":"# pledge?","a3c109ee":"\uc0dd\uac01 \uc880 \ub354 \ud574\ubcf4\uace0 \ud560\uc9c0 \ub9d0\uc9c0 \uacb0\uc815\ud574\uc57c\uaca0\ub2e4.  \n\ud608\ub9f9 \ud074\ub7ec\uc2a4\ud130\ub9c1","2251e32f":"\uc720\uc800\ubcc4 level -> mean","d17a4168":"# preprocessing","a24cd9e2":"## payment","dd13ec14":"\uc720\uc800\ubcc4 \ud608\ub9f9 \uac1c\uc218  \n\ubcd1\ud569 \ud6c4 \uacb0\uce21\uac12\uc740 0\uc73c\ub85c \ucc98\ub9ac\ud574\uc57c\ud55c\ub2e4.  \n\ud608\ub9f9\uc758 \uc815\ubcf4\ub4e4\uc744 \ub9ce\uc774 \ubc84\ub9b0 \uac83 \uac19\uc544 \uc544\uc27d\uc9c0\ub9cc \uc77c\ub2e8 \uc9c4\ud589.","f759f2a2":"\uc720\uc800\ubcc4 day -> nunique","e36857e8":"# validation","98420292":"\uc720\uc800\ubcc4 amount_spent -> sum \ud6c4 activity\uc758 day.nunique()\ub97c \ub098\ub208\ub2e4","bcf90b6c":"## pledge","e21da10d":"\uc720\uc800\ubcc4 \uc9c1\uc5c5\uad70\uc744 \uba87 \uac1c \uac00\uc9c0\uace0\uc788\ub294\uc9c0 \uc54c \uc218 \uc788\ub294 \ubcc0\uc218\ub97c \ub9cc\ub4e0\ub2e4. -> \ub354\ubbf8 \ud6c4 sum","6fe1259f":"\uc720\uc800\ubcc4 private_shop -> sum, mean","5eb89a59":"## trade","b78cf507":"\uc720\uc800\ubcc4 playtime -> sum, mean, std(ddof=0)","4af0f2df":"## combat","24daa97e":"# modeling"}}