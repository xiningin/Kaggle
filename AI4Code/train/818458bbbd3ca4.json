{"cell_type":{"d37adcc5":"code","3f877fd7":"code","05e2c050":"code","f225c92d":"code","3e0a2781":"code","54a7230d":"code","3364b6de":"code","bbbbc173":"code","aef31e33":"code","0d2a82c6":"code","f0d1b0b3":"code","f7f336b6":"code","a7cddad8":"code","d26c6dc4":"code","d905b09c":"code","104dd16d":"code","82f74889":"code","ec462633":"code","601cee9f":"code","145298f7":"code","85ccdf5a":"code","382858cb":"code","8da2af81":"code","f165b64d":"code","c3f3749f":"code","de8cc649":"code","b21484e4":"code","b5f12df5":"code","4e48413f":"code","b3e85664":"code","69a78aeb":"markdown","588be13d":"markdown","35bf64d5":"markdown","cfc74e67":"markdown","5b2eccd9":"markdown","51344295":"markdown","6b93008e":"markdown","7d68f463":"markdown","e30d9551":"markdown","64e3a032":"markdown","9f169f52":"markdown","01a3d80b":"markdown","bc0c5d06":"markdown"},"source":{"d37adcc5":"# importing the necessary library\n%config Completer.use_jedi = False # if autocompletion doesnot work in kaggle notebook | hit tab\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nsns.set()\nplt.style.use('fivethirtyeight')\n%config InlineBackend.figure_format = 'retina'\nimport warnings\nwarnings.filterwarnings('ignore') # igoring any kind of warning if comes \n","3f877fd7":"import pandas_datareader as web\ndf = web.DataReader('AAPL', data_source='yahoo',start = '2013-01-01',end = '2018-01-01')\ndf","05e2c050":"df.head()","f225c92d":"df.info()","3e0a2781":"fig, ax = plt.subplots(figsize = (15,5))\nax.plot(df['Open'])\nax.set_title(\"Google Opening Prices\")\nax.set_xlabel(\"Time (oldest -> latest)\")\nax.set_ylabel(\"Stock Opening Price\")\nplt.show()\n","54a7230d":"\nplt.figure(figsize=(18, 8))\nplt.plot(df['Close'])\nplt.title(\"Google Closing Prices\")\nplt.xlabel(\"Time (oldest-> latest)\")\nplt.ylabel(\"Stock Hightest Points\")\nplt.show()\n# here between  graphs we have 180 days gap\n","3364b6de":"plt.figure(figsize=(18, 8))\nplt.plot(df['Volume'])\nplt.title(\"Volume of stocks sold\")\nplt.xlabel(\"Time (oldest-> latest)\")\nplt.ylabel(\"Volume of stocks traded\")\nplt.show()","bbbbc173":"import seaborn as sns\nplt.figure(figsize=(15,5))\nsns.lineplot(data=df[['High','Low']],linewidth=2)\nplt.grid(True)\nplt.show","aef31e33":"len(df)","0d2a82c6":"data = df['Close'].values\nlen(data)","f0d1b0b3":"# splitting the data for training and prediction purpose \ntrain_len = int(np.ceil(len(data)*0.9))\ntrain_data = data[0:train_len]\nlen(train_data)","f7f336b6":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0,1))\ntrain_data_scaled = scaler.fit_transform(train_data.reshape(-1,1))\n","a7cddad8":"# so far we have scaled our data for training and left one part for prediction \n# now lets prepare the data for lstm format \n# now lets make a lookup data for rnn with 100 days lookback \n# creating a lookback data of 100 days\nX_input = []\ny_input = []\n\nfor i in range(100, len(train_data_scaled)):\n    X_input.append(train_data_scaled[i-100:i,0])\n    y_input.append(train_data_scaled[i,0])","d26c6dc4":"X_input,y_input = np.array(X_input),np.array(y_input) # converting into arrays \nX_input.shape","d905b09c":"X_train = X_input[20:]\ny_train = y_input[20:]\nX_valid = X_input[:20] # validation data of 10 values \ny_valid = y_input[:20] # validation data of 10 samples which will be used while training","104dd16d":"print(X_train.shape,X_valid.shape)","82f74889":"X_train = np.reshape(X_train,(X_train.shape[0],X_train.shape[1],1)) # 1 means 1 feature we are taking\nX_valid = np.reshape(X_valid,(X_valid.shape[0],X_valid.shape[1],1))\nprint(X_train.shape,X_valid.shape)","ec462633":"# now creating L.S.T.M \nfrom keras import Sequential\nfrom keras.layers import Dense, LSTM\n\nmodel = Sequential()\nmodel.add(LSTM(50, return_sequences= True, activation='relu', input_shape=(X_train.shape[1], 1)))\nmodel.add(LSTM(50, return_sequences=True, activation='relu'))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\nmodel.summary()","601cee9f":"from keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n\ncallbacks = [\n    EarlyStopping(patience=10, verbose=1),\n    ReduceLROnPlateau(factor=0.1, patience=3, min_lr=0.00001, verbose=1),\n    ModelCheckpoint('model.h5', verbose=1, save_best_only=True, save_weights_only=True)\n]","145298f7":"model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])\n","85ccdf5a":"model.fit(X_train, y_train, epochs=100, batch_size=32, validation_data=(X_valid, y_valid), callbacks=callbacks)\n","382858cb":"# lets first predict for single point daata\nlen(data[:train_len][-100:]) # this is how we can access last 100 days from our training data ","8da2af81":"test_point =  train_data_scaled[-100:]","f165b64d":"X_test_point = np.array(test_point).reshape(1,100,1)","c3f3749f":"model.predict(X_test_point)","de8cc649":"y_predicted_point = scaler.inverse_transform(model.predict(X_test_point))\ny_predicted_point","b21484e4":"test_data  =  data[train_len-100:]\ntest_data_scaled = scaler.transform(np.array(test_data).reshape(-1,1))\nX_test = []\nfor i in range(100,len(test_data_scaled)):\n    X_test.append(test_data_scaled[i-100:i,0])\nX_test = np.array(X_test)\nX_test = X_test.reshape((X_test.shape[0],X_test.shape[1],1))","b5f12df5":"prediction = scaler.inverse_transform(model.predict(X_test))","4e48413f":"\n#Plot the data\ntrain = df[:train_len]\ntest = df[train_len:]\ntest['Prediction'] = prediction\n# visualisation \nplt.figure(figsize = (16,8))\nplt.title('Model')\nplt.ylabel('Close Price USD', fontsize = 18)\nplt.plot(train['Close'])\nplt.plot(test[['Close','Prediction']])\nplt.legend(['Train','Test','Prediction'], loc = 'lower right')\nplt.show()\n","b3e85664":"plt.figure(figsize = (16,8))\nplt.title('Model')\nplt.plot(test[['Close','Prediction']])\nplt.legend(['Test','Prediction'], loc = 'lower right')\nplt.show()\n","69a78aeb":"### Here we have to predict closing price so first we will train closing price sequence into lstm","588be13d":"From here we can see our data has 6 columns:\n\nDate: The date of recorded data\n\nOpen: The price when stock market open\n\nHigh: The highest price price of date\n\nLow: The lowest price point of date\n\nVolumn: Total Sale of stock on that date\n\nFrom this point we going to define our goal is to predict the close price of the given date from test data","35bf64d5":"#### from training data we are taking out 20 samples for validation data which we gonna use while training our model","cfc74e67":"### Stock Market Prediction And Forecasting Using Stacked LSTM","5b2eccd9":"#### for one data prediction of future we need 60 days of past \n#### if we will predict one day by 60 days and if we try to predict more days on the past 60 days error will get increased over prediction","51344295":"#### Testing on the test data\n","6b93008e":"## Now lets predict by our model \nbefore prediction we have to prepare our testing data which will be again with past 60 days lookback\n\nSteps involving for prediction of test data\n\nHere input data is just a past 100 days history \n\nwe will need past 100 days to predict one future day\n","7d68f463":"### Stock Price Prediction by using L.S.T.M  (univariate)\n1. #### Preparing the most Recent data for stock price prediction\n2. #### Understanding L.S.T.M\n3. #### Preparing the data in L.S.T.M format (with 60 days lookback)\n4. #### Creating L.S.T.M netword using Keras \n5. #### Creating a Training and Test and Validation Data\n6. #### Future prediction for 30 upcoming days \n\n##### Author - Abhishek Jaiswal","e30d9551":"#### lets suppose we have no future data and only we have past 100 days data and on the basic of past data we will predict future","64e3a032":"### Here training data is in 2D we have to convert into 3D for R.N.N lstm\n3rd axis will be the number of features are we taking","9f169f52":"#### Scaling the data by using min max scaler ","01a3d80b":"### Now lets create L.S.T.M model by using keras","bc0c5d06":"### Visualisation "}}