{"cell_type":{"5db94da1":"code","5042b9d1":"code","8c0d1d1b":"code","8123a58d":"code","adfa0147":"code","b7aaaeec":"code","f4a65804":"code","37685324":"code","39029961":"code","4be3feff":"code","dae196b0":"code","13ebec2b":"code","e321f1b9":"code","5595cce9":"code","dbc6a07c":"code","4dfa8881":"code","4e2883b6":"code","5f035282":"code","d8b001be":"code","7d812f5c":"code","56439525":"code","86b73df1":"code","f906d7a5":"code","b05ccee7":"code","8a3b2450":"code","d5ac75b1":"code","953adb3e":"code","70c77bea":"code","7bca6e57":"code","e7a8c2e9":"code","799a73be":"code","86be2b2c":"code","fe3ef833":"code","4d6e04c1":"code","f812f8a0":"code","beb94cc1":"code","f01fafa8":"code","d6b0eca7":"code","83361a9f":"code","750101b7":"code","2b6536da":"code","c5ddeb9e":"code","6c555785":"code","e1442de3":"code","2f603891":"code","46fb5051":"code","f929df61":"code","a05c8b39":"code","66472f36":"code","7e11b1c8":"code","97aefe9d":"code","be87abc2":"code","bbcb0a5b":"code","cff48b34":"code","a6576814":"code","8a25da7b":"code","e3953b44":"code","1c5664df":"code","be8f476e":"code","4cbf001f":"code","ce5033dd":"code","88e311d5":"code","f4566a4b":"code","b0c6844b":"code","5bd1db1e":"code","515f407a":"code","e3662d61":"code","e04b0b5b":"code","0fd21c83":"code","a7055752":"code","289844ba":"code","0b12614c":"code","2f2a5bb2":"code","b4d3693d":"code","a832a671":"markdown","95aa521f":"markdown","caf6b81b":"markdown","f664be68":"markdown","46f6eee7":"markdown","57b25d90":"markdown","70192bd1":"markdown","d17c336c":"markdown","3d5561d2":"markdown","6f65e47f":"markdown","07bd0893":"markdown","6a428469":"markdown","42ab50c7":"markdown","a0ab11b7":"markdown","97b9d4de":"markdown","46bda84c":"markdown","d1b4f596":"markdown","81f27628":"markdown","12c8057b":"markdown"},"source":{"5db94da1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib as mlp\nimport matplotlib.pyplot as plt\n%matplotlib inline","5042b9d1":"df = pd.read_csv('..\/input\/BlackFriday.csv')\nplt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(20,10))","8c0d1d1b":"df.head()","8123a58d":"df.info()","adfa0147":"df.describe()","b7aaaeec":"# Functions\ndef plt_plot(group, column, plot):\n    ax = plt.figure(figsize = (12, 6))\n    df.groupby(group)[column].sum().sort_values().plot(plot)\n    \ndef sns_plot(column):\n    sns.countplot(df[column])\n    \ndef sort_descending_df_head(group, column, count_head):\n    group.sort_values(column, ascending=False, inplace=True)\n    return group.head(count_head)","f4a65804":"# Total number of unique users.\ndf[\"User_ID\"].nunique()","37685324":"# Total amount of money raised.\ndf['Purchase'].sum()","39029961":"product_df = df.copy()\n# Total amount of unique products\nprint(\"Product amount: \", len(product_df[\"Product_ID\"].value_counts()))","4be3feff":"product_age_df = product_df[['Product_ID', 'Age', 'Purchase']].groupby(['Age', 'Product_ID']).count()\nproduct_age_df = product_age_df.sort_values(['Purchase'], ascending=False).reset_index()\nproduct_age_df.head()","dae196b0":"age_count = {'0-17': 0, '18-25': 0, '26-35': 0, '36-45': 0, '46-50': 0, '51-55': 0, '55+': 0}\nrows_to_drop = []\n\nfor i in range(len(product_age_df)):\n    age_range = product_age_df['Age'][i]\n    if age_count[age_range] == 0:\n        age_count[age_range] = 1\n    else:\n        rows_to_drop.append(i)","13ebec2b":"product_age_df = product_age_df.drop(product_age_df.index[rows_to_drop])\nproduct_age_df","e321f1b9":"product_purchase_mean = product_df[['Product_ID', 'Purchase']].groupby(\"Product_ID\").mean().reset_index()\nproduct_purchase_sum = product_df[['Product_ID', 'Purchase']].groupby(\"Product_ID\").sum().reset_index()\nproduct_purchase_count = product_df[['Product_ID', 'Purchase']].groupby(\"Product_ID\").count().reset_index()","5595cce9":"sort_descending_df_head(product_purchase_mean, \"Purchase\", 10)","dbc6a07c":"sort_descending_df_head(product_purchase_sum, \"Purchase\", 10)","4dfa8881":"sort_descending_df_head(product_purchase_count, \"Purchase\", 10)","4e2883b6":"# Total amount of unique men and women that bought a product. \ngender_df = df.copy()\ngender_unique = gender_df.groupby(['User_ID','Gender'])['Gender'].count().groupby(['Gender']).count()\ngender_unique","5f035282":"# Total amount of money collected by each gender.\nplt.figure(figsize  = (20,10))\ngender_purchase_total = gender_df[['Gender', 'Purchase']].groupby(\"Gender\").sum()\ngender_purchase_total.plot.bar()\nsns.barplot(\"Gender\", \"Purchase\", data = gender_df)\nplt.show()","d8b001be":"plt.figure(figsize = (20,8))\nsns_plot(\"Gender\")","7d812f5c":"# Cantidad de compras realizadas por Hombres (M) y Mujeres (F)\n# Total amount of purchases made by men (M) and women (F)\ndf['Gender'].value_counts()","56439525":"# Average money spent per gender\ngender_df = df.copy()\ngender_purchase_merge = gender_df[['Gender', 'Purchase']].groupby(\"Gender\").mean()\ngender_purchase_merge.plot.bar(figsize=(15,8))\nplt.figure(figsize = (20,8))\nsns.barplot(\"Gender\", \"Purchase\", data = gender_df)\nplt.show()","86b73df1":"gender_purchase_merge","f906d7a5":"age_data_frame = df.copy()\n# Number of purchase records by age.\nplt.figure(figsize = (20,8))\nsns.countplot(age_data_frame[\"Age\"])","b05ccee7":"# Quantity of purchase records by age separated by gender.\nplt.figure(figsize = (20,8))\nsns.countplot(age_data_frame[\"Age\"], hue=age_data_frame[\"Gender\"])","8a3b2450":"# Average purchase by age and gender.\nplt.figure(figsize = (20,8))\nsns.barplot(x=\"Age\", y=\"Purchase\", hue=\"Gender\", data=age_data_frame)","d5ac75b1":"# The total sum of purchases in dollars by age range.\nage_data_frame.pivot_table('Purchase', ['Age'], aggfunc=np.sum)","953adb3e":"# Unique number of users by age range.\nage_data_frame = age_data_frame.groupby('Age')['User_ID'].nunique()\nage_data_frame","70c77bea":"occupation_df = df.copy()","7bca6e57":"# Number of users per occupation.\nusers_in_occupation = occupation_df.groupby('Occupation')['User_ID'].nunique()\nusers_in_occupation.sort_values(ascending=False)","e7a8c2e9":"# The amount of purchases, the total dollars collected and the average purchase per occupation.\noccupation_purchases = occupation_df.groupby('Occupation')['Purchase'].agg(['sum', 'count', 'mean'])\noccupation_purchases.sort_values('sum', ascending=False)","799a73be":"# Number of users who bought by occupation and city.\nusers_in_occupation = occupation_df.groupby(['Occupation', 'City_Category'])['User_ID'].nunique()\nusers_in_occupation","86be2b2c":"# Number of records per occupation\ndf[\"Occupation\"].value_counts()","fe3ef833":"occupation_df.drop(['User_ID', 'Marital_Status', 'Product_Category_2', 'Product_Category_3', 'Stay_In_Current_City_Years', 'Product_ID', 'City_Category'], axis=1, inplace=True)\noccupation_df = occupation_df.groupby([\"Occupation\", \"Product_Category_1\"]).sum().reset_index()\noccupation_df","4d6e04c1":"# Amount of money spent per category, per occupation.\nplt.figure(figsize = (20,8))\nsns.catplot(x='Product_Category_1', y='Purchase', col=\"Occupation\", col_wrap=3, data=occupation_df, kind=\"bar\")","f812f8a0":"city_df = df.copy()","beb94cc1":"# Quantity of purchases made and amount of money collected by city.\ncity_purchase = city_df.groupby('City_Category')['Purchase'].agg(['sum', 'count'])\ncity_purchase","f01fafa8":"city_user = city_df.groupby('City_Category')['User_ID'].nunique()\ncity_user","d6b0eca7":"# Total number of purchases by age and city\nfig1, ax1 = plt.subplots(figsize = (20, 7))\nsns.countplot(df['City_Category'], hue = df[\"Age\"])","83361a9f":"plt.figure(figsize = (20,8))\nsns.boxplot('Age','Purchase', data = df)\nplt.show()","750101b7":"stay_years_df = df.copy()","2b6536da":"years_user = stay_years_df.groupby(['City_Category', 'Stay_In_Current_City_Years'])['User_ID'].nunique()\nyears_user","c5ddeb9e":"df[\"Stay_In_Current_City_Years\"].value_counts()","6c555785":"df[\"Marital_Status\"].value_counts()","e1442de3":"marital_status_df = df.copy()\nmarital_gender_df = marital_status_df.groupby(['Gender', 'Marital_Status']).size()\nmarital_gender_df","2f603891":"marital = marital_status_df.groupby(['Marital_Status', 'Gender']).sum()\nmarital.drop(['User_ID', 'Occupation', 'Product_Category_1', 'Product_Category_2', 'Product_Category_3'], axis=1)","46fb5051":"product_category_df = df.copy()\nproduct_category_df['Product_Category_2'].fillna(-1, inplace=True)\nproduct_category_df['Product_Category_3'].fillna(-1, inplace=True)\nproduct_category_df[\"Product_Category_2\"] = product_category_df[\"Product_Category_2\"].astype(np.int64)\nproduct_category_df[\"Product_Category_3\"] = product_category_df[\"Product_Category_3\"].astype(np.int64)\nproduct_category_df.drop(['User_ID', 'Product_ID', 'Gender', 'Age', 'Occupation', 'City_Category', 'Stay_In_Current_City_Years', 'Marital_Status', 'Stay_In_Current_City_Years'], axis=1, inplace=True)\nproduct_category_df.sort_values([\"Product_Category_1\", \"Product_Category_2\", \"Product_Category_3\"], inplace=True)\nproduct_category_df.head(15000)","f929df61":"# Amount of money spent for category 1\nplt.figure(figsize = (20,8))\nplt_plot(\"Product_Category_1\", \"Purchase\", \"bar\")","a05c8b39":"# Amount of money spent for category 2\nplt_plot(\"Product_Category_2\", \"Purchase\", \"bar\")","66472f36":"# Amount of money spent for category 3\nplt_plot(\"Product_Category_3\", \"Purchase\", \"bar\")","7e11b1c8":"product_category_1_df = product_category_df.drop([\"Product_Category_2\", \"Product_Category_3\"], axis=1)\nproduct_category_2_df = product_category_df.drop([\"Product_Category_1\", \"Product_Category_3\"], axis=1)\nproduct_category_3_df = product_category_df.drop([\"Product_Category_1\", \"Product_Category_2\"], axis=1)\n\nproduct_category_2_df = product_category_2_df[product_category_2_df[\"Product_Category_2\"] != -1]\nproduct_category_3_df = product_category_3_df[product_category_3_df[\"Product_Category_3\"] != -1]","97aefe9d":"category_sum = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0, 14: 0, 15: 0, 16: 0, 17: 0, 18: 0}\ncategory_count = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0, 14: 0, 15: 0, 16: 0, 17: 0, 18: 0}\n\ndef sum_category_purchases(dataframe, category_dict):\n    for i in range(len(dataframe)):\n        category_number = dataframe.iloc[i][0]\n        category_dict[category_number] = category_dict.get(category_number) + dataframe.iloc[i][1]","be87abc2":"# Quantity of products purchased by category.\ncount_product_category_1_df = product_category_1_df.groupby(\"Product_Category_1\").count().reset_index()\ncount_product_category_2_df = product_category_2_df.groupby(\"Product_Category_2\").count().reset_index()\ncount_product_category_3_df = product_category_3_df.groupby(\"Product_Category_3\").count().reset_index()\n\nsum_category_purchases(count_product_category_1_df, category_count)\nsum_category_purchases(count_product_category_2_df, category_count)\nsum_category_purchases(count_product_category_3_df, category_count)\n    \ncategory_count","bbcb0a5b":"# Amount of money spent per category.\nsum_product_category_1_df = product_category_1_df.groupby(\"Product_Category_1\").sum().reset_index()\nsum_product_category_2_df = product_category_2_df.groupby(\"Product_Category_2\").sum().reset_index()\nsum_product_category_3_df = product_category_3_df.groupby(\"Product_Category_3\").sum().reset_index()\n\nsum_category_purchases(sum_product_category_1_df, category_sum)\nsum_category_purchases(sum_product_category_2_df, category_sum)\nsum_category_purchases(sum_product_category_3_df, category_sum)\n    \ncategory_sum","cff48b34":"plt.figure(figsize = (20,10))\nsns.heatmap(df.isnull(), cbar=True)\ndf.isnull().sum()","a6576814":"df_pred = pd.read_csv('..\/input\/BlackFriday.csv')","8a25da7b":"# Transform categorical to numerical data","e3953b44":"cols = ['User_ID','Product_ID']\ndf_pred.drop(cols, inplace = True, axis =1)\ndf_pred.head()","1c5664df":"df_pred['Age'] = df_pred['Age'].map({'0-17': 0, '18-25': 1, '26-35': 2, '36-45': 3, '46-50': 4, '51-55': 5, '55+': 6})\ndf_pred['Gender'] = df_pred['Gender'].map({'M': 0,'F': 1})\ndf_pred['City_Category'] = df_pred['City_Category'].map({'A': 0,'B': 1,'C': 2})\ndf_pred['Stay_In_Current_City_Years'] = df_pred['Stay_In_Current_City_Years'].map({'0': 0, '1': 1, '2': 2, '3': 3, '4+': 4})","be8f476e":"prod_cat_1_2 = df_pred[['Product_Category_1', 'Product_Category_2']]\nprod_cat_1_2 = prod_cat_1_2.dropna()\nprod_cat_1_2.head()","4cbf001f":"df_pred = df_pred.dropna()\ndf_pred[\"Product_Category_2\"] = df_pred[\"Product_Category_2\"].astype(np.int64)\ndf_pred[\"Product_Category_3\"] = df_pred[\"Product_Category_3\"].astype(np.int64)\ndf_pred.head()","ce5033dd":"corrmat = df_pred.corr()\nfig,ax = plt.subplots(figsize = (20,10))\nsns.heatmap(corrmat, vmax=.8, square=True)","88e311d5":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LinearRegression, LogisticRegression","f4566a4b":"x = prod_cat_1_2['Product_Category_1'].values\ny = prod_cat_1_2['Product_Category_2'].values\n\nx = x.reshape(len(x), 1)\ny = y.reshape(len(y), 1)\n\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state=42)\n\nreg = LogisticRegression()\nreg.fit(X_train, y_train)\n\ny_pred = reg.predict(X_test)\n\nprint(\"Accuracy:\", reg.score(X_test, y_test))","b0c6844b":"age_aux = pd.read_csv('..\/input\/BlackFriday.csv')\nage_aux['Age'] = age_aux['Age'].map({'0-17': 0, '18-25': 1, '26-35': 2, '36-45': 3, '46-50': 4, '51-55': 5, '55+': 6})\n\nx = age_aux['Age'].values\ny = age_aux['Marital_Status'].values\n\nx = x.reshape(len(x), 1)\ny = y.reshape(len(y), 1)\n\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state=42)\n\nprint(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)","5bd1db1e":"reg = LogisticRegression()\nreg.fit(X_train, y_train)\n\ny_pred = reg.predict(X_test)","515f407a":"print(\"Accuracy:\", accuracy_score(y_test, y_pred))","e3662d61":"# K-Nearest Neighbor\nknn_df = df_pred[['Occupation', 'Gender', 'Purchase']]","e04b0b5b":"knn_df.head()\nknn_df.info()","0fd21c83":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n# Best K\nneighbors = np.arange(1, 40)\n\ntrain_accuracy = []\ntest_accuracy = []\n\nfor i, k in enumerate (neighbors):\n    clf = KNeighborsClassifier(n_neighbors = k)\n    \n    scaler = StandardScaler()  \n    scaler.fit(X_train)\n    x_train = scaler.transform(X_train)  \n    x_test = scaler.transform(X_test)\n    \n    clf.fit(x_train,y_train)\n    train_accuracy.append(clf.score(x_train,y_train))\n    test_accuracy.append(clf.score(x_test,y_test))\n\n# Plot\nplt.figure(figsize=(13, 8))\n\nplt.plot(neighbors, test_accuracy, label = 'Testing Accuracy')\nplt.plot(neighbors, train_accuracy, label = 'Training Accuracy')\n\nplt.xlabel('Neighbors')\nplt.ylabel('Accuracy')\n\nplt.xticks(neighbors)\n\nplt.show()\n\nprint('Best Accuracy is {} with K = {}'.format(np.max(test_accuracy), 1 + test_accuracy.index(np.max(test_accuracy))))","a7055752":"clf = KNeighborsClassifier(n_neighbors = 37)\n\n# X = Occupation, Purchase; Y = Gender\nx, y = knn_df.loc[:,knn_df.columns != 'Gender'], knn_df.loc[:,'Gender']\n\n# Create train and test datasets\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3)\n\nscaler = StandardScaler()  \nscaler.fit(x_train)\n\nx_train = scaler.transform(x_train)  \nx_test = scaler.transform(x_test)\n\nclf.fit(x_train, y_train)\n\ny_pred = clf.predict(x_test)\n\nprint('Accuracy: ', clf.score(x_test, y_test))","289844ba":"from sklearn.metrics import classification_report, confusion_matrix  \nprint(confusion_matrix(y_test, y_pred))  \nprint(classification_report(y_test, y_pred))  ","0b12614c":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification","2f2a5bb2":"clf = RandomForestClassifier(n_estimators=100, max_depth=2,random_state=0)\n\nclf.fit(x_train, y_train)\n\nRandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n            max_depth=2, max_features='auto', max_leaf_nodes=None,\n            min_impurity_decrease=0.0, min_impurity_split=None,\n            min_samples_leaf=1, min_samples_split=2,\n            min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=None,\n            oob_score=False, random_state=0, verbose=0, warm_start=False)\n\nprint(clf.feature_importances_)","b4d3693d":"print('Accuracy: ', clf.score(x_test, y_test))","a832a671":"# Variable Analysis","95aa521f":"We can deduce from the previous table that the most purchased products by age range is 'P00265242'.\n\nAs for people in the age range of 18-35 and 46+ are more likely to buy 'P00265242'.\n\nPeople with an age range of 0-17 is the product 'P00255842'.\n\nAnd finally, people with an age range of 36-45 is the product 'P00025442'.","caf6b81b":"# Data Exploration","f664be68":"## User","46f6eee7":"Regardless of age, the amount of money spent remains constant.","57b25d90":"We can see how age and marital status are quite related things, which is something very normal.\n\nBut we can also see some relation between the categories.\nRelationship between category 1:\n\u00a0\u00a0\u00a0\u00a0 - 2 is very strong\n\u00a0\u00a0\u00a0\u00a0 - 3 is very good too\n\nRelationship between category 2 and 3 is quite good as well, in fact more than the relationship between category 1 and 2.\n\nWe can say that these relationships tell us that depending on the category you buy, users will normally repeat the categories.\n\nWe could work with a classifier or some type of algorithm to predict what category you are going to buy from the one you have already chosen.\n\nIn the near future, we can use the aPriori algorithm to better work with the categories and get a better understanding of the relation between one and other. And ","70192bd1":"## Stay In Current City Years","d17c336c":"# Prediction ","3d5561d2":"## Marital Status","6f65e47f":"## Gender","07bd0893":"Category 1 products are the most expensive, that's why they put more money together, not because more is sold.","6a428469":"## Product Category","42ab50c7":"## Purchase","a0ab11b7":"## City Category","97b9d4de":"People of the age range of 17- and 55+ are more likely to see them buying in city C. While the rest prefer to buy in city B.","46bda84c":"## Age","d1b4f596":"## Product","81f27628":"We can see how the most popular occupations are the 4, 0 and 7. This are the ones that buy the most and give the highest money collection. So in the next black-friday, the store could build specific announcements for people with these occupations to increase more profits.\nIn addition we have the divisions of city with the amount of people and occupations that there is for each one so it can help to know in which occupation to focus by city.","12c8057b":"## Occupation"}}