{"cell_type":{"c62f56a6":"code","89722c21":"code","7d1812d3":"code","3b24d853":"code","151f3de9":"code","166f68f2":"code","44546f3f":"code","14fc3925":"code","90eeba7d":"code","60edef15":"code","1c03bc8d":"code","6e8180a6":"code","9585bcaf":"code","40b7325e":"markdown","feb20916":"markdown","c2b70572":"markdown","0d467c0f":"markdown","f0110cbc":"markdown","6d0de61e":"markdown","dad90c9f":"markdown","253d6d07":"markdown","6b8b60c1":"markdown","a55c2759":"markdown","a8a6254d":"markdown","f6f20791":"markdown"},"source":{"c62f56a6":"from mlxtend.plotting import plot_decision_regions\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","89722c21":"#Loading the dataset\ndiabetesData = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')\n\n#Print the first 5 rows of the dataframe.\ndiabetesData.head()","7d1812d3":"diabetesDatacopy = diabetesData.copy(deep = True) # creating the copy of the dataset\n# replacing the 0 values with Nan\ndiabetesDatacopy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = diabetesDatacopy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)\n\n## showing the count of Nans\nprint(diabetesDatacopy.isnull().sum())","3b24d853":"p = diabetesDatacopy.hist(figsize = (20,20))","151f3de9":"diabetesDatacopy['BloodPressure'].fillna(diabetesDatacopy['BloodPressure'].mean(), inplace = True)\ndiabetesDatacopy['SkinThickness'].fillna(diabetesDatacopy['SkinThickness'].median(), inplace = True)\ndiabetesDatacopy['Insulin'].fillna(diabetesDatacopy['Insulin'].median(), inplace = True)\ndiabetesDatacopy['BMI'].fillna(diabetesDatacopy['BMI'].median(), inplace = True)\ndiabetesDatacopy.isna().sum()","166f68f2":"p = diabetesDatacopy.hist(figsize = (20,20))","44546f3f":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom sklearn.model_selection import train_test_split\nimport numpy\nimport pandas as pd \ndiabetes_data = diabetesDatacopy.copy()","14fc3925":"X = diabetes_data[['Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']].values\nY = diabetes_data[['Outcome']].values","90eeba7d":"x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)","60edef15":"model = Sequential()\n\nmodel.add(Dense(12, input_dim=8, activation='relu')) # Input layer requires input_dim param\n\nmodel.add(Dense(10, activation='relu'))\n\nmodel.add(Dense(8, activation='relu'))\n\nmodel.add(Dropout(.2))\n\nmodel.add(Dense(1, activation='sigmoid')) # Sigmoid instead of relu for final probability between 0 and 1\n\n# Compile the model, adam gradient descent (optimized)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=['accuracy'])","1c03bc8d":"# training the network\nhistory  = model.fit(x_train, y_train, epochs = 1000, batch_size=1, validation_data=(x_test, y_test),verbose=0)","6e8180a6":"import matplotlib.pyplot as plt\nn = len(history.history[\"loss\"])\nfig, ax = plt.subplots(figsize=(16, 8))\nax.plot(range(n), history.history[\"loss\"],'r', marker='.', label=\"Train Loss\")\nax.legend()","9585bcaf":"results = model.evaluate(x_test, y_test)\nprint(f\"Accuracy: {results[1]*100}%\")","40b7325e":"## Evaluate","feb20916":"**The Question creeping out of this summary**\n*Can minimum value of below listed columns be zero (0)?*\nOn these columns, a value of zero does not make sense and thus indicates missing value.\n\nFollowing columns or variables have an invalid zero value:\n\n* Glucose\n* BloodPressure\n* SkinThickness\n* Insulin\n* BMI\n\nIt is better to replace zeros with nan since after that counting them would be easier and zeros need to be replaced with suitable values","c2b70572":"# Nerual Network","0d467c0f":"Finally we have imputated all the missing values","f0110cbc":"## Build Neural Network","6d0de61e":"To fill these Nan values the data distribution needs to be understood","dad90c9f":"## Plotting after filling NaN values","253d6d07":"## Split Dataset","6b8b60c1":"# EDA","a55c2759":"## Loss Graph","a8a6254d":"Aiming to impute nan values for the columns in accordance with their distribution","f6f20791":"## Initializing Libs"}}