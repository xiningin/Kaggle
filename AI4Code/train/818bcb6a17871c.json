{"cell_type":{"7ac653ed":"code","fb16022b":"code","28923496":"code","6bff1b66":"code","273e4506":"code","1246bb6c":"code","2775a86e":"code","506f6f26":"code","725965be":"code","ed688024":"code","afc7014c":"code","2d2a71f0":"code","90e33e7a":"code","722405d5":"code","5e95939c":"code","e2083644":"code","b17d5a1a":"code","896e6be7":"code","203f78df":"code","5be01e60":"code","38074989":"code","6ab9de4b":"code","0f9c3090":"code","2933f626":"code","f68f2281":"code","5d011e20":"code","8541adcf":"code","e917f96d":"code","e7765dfc":"code","c5a9006a":"markdown"},"source":{"7ac653ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fb16022b":"filepath = '\/kaggle\/input\/stock-time-series-20050101-to-20171231\/AMZN_2006-01-01_to_2018-01-01.csv'\ndata = pd.read_csv(filepath)\ndata = data.sort_values('Date')\ndata.head()","28923496":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style(\"darkgrid\")\nplt.figure(figsize = (15,9))\nplt.plot(data[['Close']])\nplt.xticks(range(0,data.shape[0],500),data['Date'].loc[::500],rotation=45)\nplt.title(\"Amazon Stock Price\",fontsize=18, fontweight='bold')\nplt.xlabel('Date',fontsize=18)\nplt.ylabel('Close Price (USD)',fontsize=18)\nplt.show()","6bff1b66":"price = data[['Close']]\nprice.info()","273e4506":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler(feature_range=(-1, 1))\nprice['Close'] = scaler.fit_transform(price['Close'].values.reshape(-1,1))","1246bb6c":"def split_data(stock, lookback):\n    data_raw = stock.to_numpy() # convert to numpy array\n    data = []\n    \n    # create all possible sequences of length seq_len\n    for index in range(len(data_raw) - lookback): \n        data.append(data_raw[index: index + lookback])\n    \n    data = np.array(data);\n    test_set_size = int(np.round(0.2*data.shape[0]));\n    train_set_size = data.shape[0] - (test_set_size);\n    \n    x_train = data[:train_set_size,:-1,:]\n    y_train = data[:train_set_size,-1,:]\n    \n    x_test = data[train_set_size:,:-1]\n    y_test = data[train_set_size:,-1,:]\n    \n    return [x_train, y_train, x_test, y_test]","2775a86e":"lookback = 20 # choose sequence length\nx_train, y_train, x_test, y_test = split_data(price, lookback)\nprint('x_train.shape = ',x_train.shape)\nprint('y_train.shape = ',y_train.shape)\nprint('x_test.shape = ',x_test.shape)\nprint('y_test.shape = ',y_test.shape)","506f6f26":"import torch\nimport torch.nn as nn\n\nx_train = torch.from_numpy(x_train).type(torch.Tensor)\nx_test = torch.from_numpy(x_test).type(torch.Tensor)\ny_train_lstm = torch.from_numpy(y_train).type(torch.Tensor)\ny_test_lstm = torch.from_numpy(y_test).type(torch.Tensor)\ny_train_gru = torch.from_numpy(y_train).type(torch.Tensor)\ny_test_gru = torch.from_numpy(y_test).type(torch.Tensor)","725965be":"input_dim = 1\nhidden_dim = 32\nnum_layers = 2\noutput_dim = 1\nnum_epochs = 100","ed688024":"class LSTM(nn.Module):\n    def __init__(self, input_dim, hidden_dim, num_layers, output_dim):\n        super(LSTM, self).__init__()\n        self.hidden_dim = hidden_dim\n        self.num_layers = num_layers\n        \n        self.lstm = nn.LSTM(input_dim, hidden_dim, num_layers, batch_first=True)\n        self.fc = nn.Linear(hidden_dim, output_dim)\n\n    def forward(self, x):\n        h0 = torch.zeros(self.num_layers, x.size(0), self.hidden_dim).requires_grad_()\n        c0 = torch.zeros(self.num_layers, x.size(0), self.hidden_dim).requires_grad_()\n        out, (hn, cn) = self.lstm(x, (h0.detach(), c0.detach()))\n        out = self.fc(out[:, -1, :]) \n        return out","afc7014c":"model = LSTM(input_dim=input_dim, hidden_dim=hidden_dim, output_dim=output_dim, num_layers=num_layers)\ncriterion = torch.nn.MSELoss(reduction='mean')\noptimiser = torch.optim.Adam(model.parameters(), lr=0.01)","2d2a71f0":"import time\n\nhist = np.zeros(num_epochs)\nstart_time = time.time()\nlstm = []\n\nfor t in range(num_epochs):\n    y_train_pred = model(x_train)\n\n    loss = criterion(y_train_pred, y_train_lstm)\n    print(\"Epoch \", t, \"MSE: \", loss.item())\n    hist[t] = loss.item()\n\n    optimiser.zero_grad()\n    loss.backward()\n    optimiser.step()\n    \ntraining_time = time.time()-start_time\nprint(\"Training time: {}\".format(training_time))","90e33e7a":"predict = pd.DataFrame(scaler.inverse_transform(y_train_pred.detach().numpy()))\noriginal = pd.DataFrame(scaler.inverse_transform(y_train_lstm.detach().numpy()))","722405d5":"import seaborn as sns\nsns.set_style(\"darkgrid\")    \n\nfig = plt.figure()\nfig.subplots_adjust(hspace=0.2, wspace=0.2)\n\nplt.subplot(1, 2, 1)\nax = sns.lineplot(x = original.index, y = original[0], label=\"Data\", color='royalblue')\nax = sns.lineplot(x = predict.index, y = predict[0], label=\"Training Prediction (LSTM)\", color='tomato')\nax.set_title('Stock price', size = 14, fontweight='bold')\nax.set_xlabel(\"Days\", size = 14)\nax.set_ylabel(\"Cost (USD)\", size = 14)\nax.set_xticklabels('', size=10)\n\n\nplt.subplot(1, 2, 2)\nax = sns.lineplot(data=hist, color='royalblue')\nax.set_xlabel(\"Epoch\", size = 14)\nax.set_ylabel(\"Loss\", size = 14)\nax.set_title(\"Training Loss\", size = 14, fontweight='bold')\nfig.set_figheight(6)\nfig.set_figwidth(16)","5e95939c":"import math, time\nfrom sklearn.metrics import mean_squared_error\n\n# make predictions\ny_test_pred = model(x_test)\n\n# invert predictions\ny_train_pred = scaler.inverse_transform(y_train_pred.detach().numpy())\ny_train = scaler.inverse_transform(y_train_lstm.detach().numpy())\ny_test_pred = scaler.inverse_transform(y_test_pred.detach().numpy())\ny_test = scaler.inverse_transform(y_test_lstm.detach().numpy())\n\n# calculate root mean squared error\ntrainScore = math.sqrt(mean_squared_error(y_train[:,0], y_train_pred[:,0]))\nprint('Train Score: %.2f RMSE' % (trainScore))\ntestScore = math.sqrt(mean_squared_error(y_test[:,0], y_test_pred[:,0]))\nprint('Test Score: %.2f RMSE' % (testScore))\nlstm.append(trainScore)\nlstm.append(testScore)\nlstm.append(training_time)","e2083644":"# shift train predictions for plotting\ntrainPredictPlot = np.empty_like(price)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[lookback:len(y_train_pred)+lookback, :] = y_train_pred\n\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(price)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(y_train_pred)+lookback-1:len(price)-1, :] = y_test_pred\n\noriginal = scaler.inverse_transform(price['Close'].values.reshape(-1,1))\n\npredictions = np.append(trainPredictPlot, testPredictPlot, axis=1)\npredictions = np.append(predictions, original, axis=1)\nresult = pd.DataFrame(predictions)","b17d5a1a":"import plotly.express as px\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(go.Scatter(x=result.index, y=result[0],\n                    mode='lines',\n                    name='Train prediction')))\nfig.add_trace(go.Scatter(x=result.index, y=result[1],\n                    mode='lines',\n                    name='Test prediction'))\nfig.add_trace(go.Scatter(go.Scatter(x=result.index, y=result[2],\n                    mode='lines',\n                    name='Actual Value')))\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=True,\n        showticklabels=False,\n        linecolor='white',\n        linewidth=2\n    ),\n    yaxis=dict(\n        title_text='Close (USD)',\n        titlefont=dict(\n            family='Rockwell',\n            size=12,\n            color='white',\n        ),\n        showline=True,\n        showgrid=True,\n        showticklabels=True,\n        linecolor='white',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Rockwell',\n            size=12,\n            color='white',\n        ),\n    ),\n    showlegend=True,\n    template = 'plotly_dark'\n\n)\n\n\n\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Results (LSTM)',\n                              font=dict(family='Rockwell',\n                                        size=26,\n                                        color='white'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\n\nfig.show()","896e6be7":"#!pip install chart-studio","203f78df":"import chart_studio.plotly as py\nimport chart_studio\n\nchart_studio.tools.set_credentials_file(username='rodolfo_saldanha', api_key='zWJIVWJs23wfiAp516Mh')\npy.iplot(fig, filename='stock_prediction_lstm')","5be01e60":"class GRU(nn.Module):\n    def __init__(self, input_dim, hidden_dim, num_layers, output_dim):\n        super(GRU, self).__init__()\n        self.hidden_dim = hidden_dim\n        self.num_layers = num_layers\n        \n        self.gru = nn.GRU(input_dim, hidden_dim, num_layers, batch_first=True)\n        self.fc = nn.Linear(hidden_dim, output_dim)\n\n    def forward(self, x):\n        h0 = torch.zeros(self.num_layers, x.size(0), self.hidden_dim).requires_grad_()\n        out, (hn) = self.gru(x, (h0.detach()))\n        out = self.fc(out[:, -1, :]) \n        return out","38074989":"model = GRU(input_dim=input_dim, hidden_dim=hidden_dim, output_dim=output_dim, num_layers=num_layers)\ncriterion = torch.nn.MSELoss(reduction='mean')\noptimiser = torch.optim.Adam(model.parameters(), lr=0.01)","6ab9de4b":"hist = np.zeros(num_epochs)\nstart_time = time.time()\ngru = []\n\nfor t in range(num_epochs):\n    y_train_pred = model(x_train)\n\n    loss = criterion(y_train_pred, y_train_gru)\n    print(\"Epoch \", t, \"MSE: \", loss.item())\n    hist[t] = loss.item()\n\n    optimiser.zero_grad()\n    loss.backward()\n    optimiser.step()\n\ntraining_time = time.time()-start_time    \nprint(\"Training time: {}\".format(training_time))","0f9c3090":"predict = pd.DataFrame(scaler.inverse_transform(y_train_pred.detach().numpy()))\noriginal = pd.DataFrame(scaler.inverse_transform(y_train_gru.detach().numpy()))","2933f626":"import seaborn as sns\nsns.set_style(\"darkgrid\")    \n\nfig = plt.figure()\nfig.subplots_adjust(hspace=0.2, wspace=0.2)\n\nplt.subplot(1, 2, 1)\nax = sns.lineplot(x = original.index, y = original[0], label=\"Data\", color='royalblue')\nax = sns.lineplot(x = predict.index, y = predict[0], label=\"Training Prediction (GRU)\", color='tomato')\nax.set_title('Stock price', size = 14, fontweight='bold')\nax.set_xlabel(\"Days\", size = 14)\nax.set_ylabel(\"Cost (USD)\", size = 14)\nax.set_xticklabels('', size=10)\n\n\nplt.subplot(1, 2, 2)\nax = sns.lineplot(data=hist, color='royalblue')\nax.set_xlabel(\"Epoch\", size = 14)\nax.set_ylabel(\"Loss\", size = 14)\nax.set_title(\"Training Loss\", size = 14, fontweight='bold')\nfig.set_figheight(6)\nfig.set_figwidth(16)","f68f2281":"import math, time\nfrom sklearn.metrics import mean_squared_error\n\n# make predictions\ny_test_pred = model(x_test)\n\n# invert predictions\ny_train_pred = scaler.inverse_transform(y_train_pred.detach().numpy())\ny_train = scaler.inverse_transform(y_train_gru.detach().numpy())\ny_test_pred = scaler.inverse_transform(y_test_pred.detach().numpy())\ny_test = scaler.inverse_transform(y_test_gru.detach().numpy())\n\n# calculate root mean squared error\ntrainScore = math.sqrt(mean_squared_error(y_train[:,0], y_train_pred[:,0]))\nprint('Train Score: %.2f RMSE' % (trainScore))\ntestScore = math.sqrt(mean_squared_error(y_test[:,0], y_test_pred[:,0]))\nprint('Test Score: %.2f RMSE' % (testScore))\ngru.append(trainScore)\ngru.append(testScore)\ngru.append(training_time)","5d011e20":"# shift train predictions for plotting\ntrainPredictPlot = np.empty_like(price)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[lookback:len(y_train_pred)+lookback, :] = y_train_pred\n\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(price)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(y_train_pred)+lookback-1:len(price)-1, :] = y_test_pred\n\noriginal = scaler.inverse_transform(price['Close'].values.reshape(-1,1))\n\npredictions = np.append(trainPredictPlot, testPredictPlot, axis=1)\npredictions = np.append(predictions, original, axis=1)\nresult = pd.DataFrame(predictions)","8541adcf":"import plotly.express as px\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(go.Scatter(x=result.index, y=result[0],\n                    mode='lines',\n                    name='Train prediction')))\nfig.add_trace(go.Scatter(x=result.index, y=result[1],\n                    mode='lines',\n                    name='Test prediction'))\nfig.add_trace(go.Scatter(go.Scatter(x=result.index, y=result[2],\n                    mode='lines',\n                    name='Actual Value')))\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=True,\n        showticklabels=False,\n        linecolor='white',\n        linewidth=2\n    ),\n    yaxis=dict(\n        title_text='Close (USD)',\n        titlefont=dict(\n            family='Rockwell',\n            size=12,\n            color='white',\n        ),\n        showline=True,\n        showgrid=True,\n        showticklabels=True,\n        linecolor='white',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Rockwell',\n            size=12,\n            color='white',\n        ),\n    ),\n    showlegend=True,\n    template = 'plotly_dark'\n\n)\n\n\n\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Results (GRU)',\n                              font=dict(family='Rockwell',\n                                        size=26,\n                                        color='white'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\n\nfig.show()","e917f96d":"lstm = pd.DataFrame(lstm, columns=['LSTM'])\ngru = pd.DataFrame(gru, columns=['GRU'])\nresult = pd.concat([lstm, gru], axis=1, join='inner')\nresult.index = ['Train RMSE', 'Test RMSE', 'Train Time']\nresult","e7765dfc":"py.iplot(fig, filename='stock_prediction_gru')","c5a9006a":"## Normalize data"}}