{"cell_type":{"becab52b":"code","35eaa441":"code","e229e946":"code","970ff5ec":"code","43fe368c":"markdown"},"source":{"becab52b":"import tensorflow as tf\nimport tensorflow_addons as tfa\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Input, Conv2D, BatchNormalization, Activation,Multiply,Dense,Add\nfrom tensorflow.keras.layers import UpSampling2D, Flatten,add, Concatenate, MaxPooling2D, AveragePooling2D,GlobalAveragePooling2D,Dropout\nfrom tensorflow.keras.layers import TimeDistributed\n","35eaa441":"\n# Squeeze and Excitation\ndef se_block(input_t, channels, r=4):\n    # Squeeze\n    x = GlobalAveragePooling2D()(input_t)\n    # Excitation\n    x = Dense(channels\/\/r, activation=\"relu\")(x)\n    x = Dense(channels, activation=\"sigmoid\")(x)\n    return Multiply()([input_t, x])\n","e229e946":"\n\nNUM_CLASSES = 5\nIMG_SIZE=200\n\ndef patch_wise_extractor():\n    \n    input_img= Input( shape= (IMG_SIZE, IMG_SIZE, 3))\n    \n    act = tf.nn.swish\n    #Block1\n    id_x1 = Conv2D(24,kernel_size=3, strides=1, padding=\"same\")(input_img)\n    x = BatchNormalization()(id_x1)\n    x = Activation(act)(x)\n    x = Conv2D(24,kernel_size=3, strides=1, padding=\"same\")(x)\n    x = Add()([id_x1,x])\n    x = BatchNormalization()(x)\n    x = Activation(act)(x)\n    x = Conv2D(24,kernel_size=2, strides=2, padding=\"valid\")(x)\n    x = BatchNormalization()(x)\n    x = Activation(act)(x)\n    x = se_block(x,int(x.shape[-1]))\n    \n    #Block2\n    id_x2 = Conv2D(48,kernel_size=3, strides=1, padding=\"same\")(x)\n    x = BatchNormalization()(id_x2)\n    x = Activation(act)(x)\n    x = Conv2D(48,kernel_size=3, strides=1, padding=\"same\")(x)\n    x = Add()([id_x2,x])\n    x = BatchNormalization()(x)\n    x = Activation(act)(x)\n    x = Conv2D(48,kernel_size=2, strides=2, padding=\"valid\")(x)\n    x = BatchNormalization()(x)\n    x = Activation(act)(x)    \n    x = se_block(x,int(x.shape[-1]))\n\n    #Block3\n    id_x3 = Conv2D(64,kernel_size=3, strides=1, padding=\"same\")(x)\n    x = BatchNormalization()(x)\n    x = Activation(act)(x)\n    x = Conv2D(64,kernel_size=3, strides=1, padding=\"same\")(x)\n    x = Add()([id_x3,x])\n    x = BatchNormalization()(x)\n    x = Activation(act)(x)\n    x = Conv2D(64,kernel_size=2, strides=2, padding=\"valid\")(x)\n    x = BatchNormalization()(x)\n    x = Activation(act)(x)  \n    x = se_block(x,int(x.shape[-1]))\n\n    \n    #Block4\n    id_x4 = Conv2D(128,kernel_size=3, strides=1, padding=\"same\")(x)\n    x = BatchNormalization()(x)\n    x = Activation(act)(x)\n    x = Conv2D(128,kernel_size=3, strides=1, padding=\"same\")(x)\n    x = Add()([id_x4,x])\n    x = BatchNormalization()(x)\n    x = Activation(act)(x)\n    x = Conv2D(128,kernel_size=3, strides=1, padding=\"same\")(x)\n    x = BatchNormalization()(x)\n    x = Activation(act)(x)  \n    x = se_block(x,int(x.shape[-1]))\n\n    \n    #Block5\n    id_x5 = Conv2D(256,kernel_size=3, strides=1, padding=\"same\")(x)\n    x = BatchNormalization()(x)\n    x = Activation(act)(x)\n    x = Conv2D(256,kernel_size=3, strides=1, padding=\"same\")(x)\n    x = Add()([id_x5,x])\n    x = BatchNormalization()(x)\n    x = Activation(act)(x)\n    x = Conv2D(256,kernel_size=3, strides=1, padding=\"same\")(x)\n    x = BatchNormalization()(x)\n    x = Activation(act)(x) \n    x = se_block(x,int(x.shape[-1]))\n    \n    #final point-wise convolution\n    x = Conv2D(256,kernel_size=1, strides=1, padding=\"same\")(x)\n    x = se_block(x,int(x.shape[-1]))\n    \n    ext_out = GlobalAveragePooling2D()(x)\n    \n    #x = Dropout(0.3)(x)\n    \n    #out = Dense(NUM_CLASSES,activation=\"softmax\")(x)\n    \n    model = Model(input_img, ext_out, name=\"patch_wise\")\n \n\n    return model\n\npw_ext = patch_wise_extractor()\npw_ext.summary()","970ff5ec":"input_stack= Input( shape= (12,IMG_SIZE, IMG_SIZE, 3))\n\next_stack = TimeDistributed(pw_ext)(input_stack)\n\nflat = Flatten()(ext_stack)\n\ndrop = Dropout(0.5)(flat)\n\nout = Dense(NUM_CLASSES,\"softmax\")(drop)\n\nmodel = Model(input_stack,out)\n\nmodel.summary()","43fe368c":"<center><h1>Two stage image classifier to utilize full size image information<\/h1><\/center>"}}