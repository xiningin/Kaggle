{"cell_type":{"5d2a6190":"code","10cdac8d":"code","a894568c":"code","291bbc7e":"code","4e441492":"code","fee3773c":"code","049cdd2c":"code","47cf5570":"code","55ecfb96":"code","5a6cc43b":"code","f98a31ed":"code","881bf613":"code","944df6cb":"code","2cd4d009":"code","5e0dc376":"code","702fce01":"code","2b0425ad":"code","8216289d":"code","1b756fd2":"code","410c99c7":"code","8615f279":"code","30a474d9":"code","6b147f3f":"code","0e763f0f":"code","23279e82":"code","95620a5d":"code","606b7c55":"code","4d95db74":"code","dfb78440":"code","c226abec":"code","5a493c28":"code","bb650346":"code","6e027f56":"code","22ada2b7":"code","29b34afd":"code","e3d28490":"code","69e3b9df":"code","49c534dd":"code","f3eb9cbd":"code","6809b444":"code","a8739c90":"code","ff6b4e77":"code","0ae59e9d":"code","cc65550d":"code","c0b3bf00":"code","d0b7e7e2":"code","2ee44b61":"code","4769e2c4":"code","b8176c93":"code","01dd69ea":"code","bb356aac":"code","2c04c5bb":"code","9e0edd53":"code","cf0a1cfa":"code","c18e5f08":"code","292218d7":"code","e632c058":"code","301b71cb":"code","7afc2101":"code","eb352ac9":"code","6986b154":"code","769a7baa":"code","30fc9201":"markdown","8043fa47":"markdown","794b1571":"markdown","0fd81bda":"markdown","f304a218":"markdown","67fc4066":"markdown","88419a56":"markdown","cadd5f8a":"markdown","013fe407":"markdown","0b2de939":"markdown"},"source":{"5d2a6190":"!pip install openpyxl","10cdac8d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('ggplot')\n\nimport pandas_profiling\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a894568c":"data=pd.read_excel('..\/input\/delivery-truck-trips-data\/Delivery truck trip data.xlsx')\ndata.shape","291bbc7e":"data.head(5)","4e441492":"data.tail(5)","fee3773c":"data=data.iloc[:6880, :]\ndata.shape","049cdd2c":"pd.set_option('max_columns', 50)\ndata.head(5)","47cf5570":"data.info()","55ecfb96":"#making a copy of data before preprocessing\ndata_raw=data.copy()","5a6cc43b":"pandas_profiling.ProfileReport(data)","f98a31ed":"data.sort_values('trip_start_date').head(5)","881bf613":"#6868,6264 index rows having years as 1899 in all datetime features, may be it's a mistake\n#As we have mistake in those 2 rows let's remove those\ndata.drop(data.index[[6868,6264]], inplace=True)","944df6cb":"#let's create as a single column 'ontime\/delay' from 'ontime' and 'delay' columns\ndata['ontime\/delay']=data.ontime.replace({np.NaN, 'G'}, {0, 1})","2cd4d009":"data['vehicle_states'] = data.vehicle_no.astype(str).str[:2]\ndata['Origin_states'] = data['Origin_Location'].str.split(',').apply(lambda x: x[-1])\ndata['Dest_states'] = data['Destination_Location'].str.split(',').apply(lambda x: x[-1])","5e0dc376":"data['vehicle_states']=data['vehicle_states'].replace(('tn', 'hr'), ('TN', 'HR'))\n\ndata['Origin_states']=data['Origin_states'].replace((' Maharashtra', 'TAMIL NADU', ' Gujarat', ' Tamil Nadu',\n                                                     'RAJASTHAN', ' Haryana', 'PONDICHERRY',\n                                                     ' Karnataka', 'KARNATAKA', 'GUJARAT', 'HARYANA', ' Rajasthan', \n                                                     ' Uttar Pradesh', ' Pondicherry', ' West Bengal', ' Odisha',\n                                                     ' Jharkhand', ' Bihar', ' Assam', ' Andhra Pradesh', ' Telangana',\n                                                     ' Chattisgarh', ' Delhi', ' Kerala', ' Chandigarh', ' India', \n                                                     'UTTAR PRADESH'),\n                                                    ('Maharashtra', 'Tamil Nadu', 'Gujarat', 'Tamil Nadu',\n                                                     'Rajasthan', 'Haryana', 'Pondicherry',\n                                                     'Karnataka', 'Karnataka', 'Gujarat', 'Haryana', 'Rajasthan',\n                                                     'Uttar Pradesh', 'Pondicherry', 'West Bengal', 'Odisha',\n                                                     'Jharkhand', 'Bihar', 'Assam', 'Andhra Pradesh', 'Telangana',\n                                                     'Chattisgarh', 'Delhi', 'Kerala', 'Chandigarh', 'India',\n                                                     'Uttar Pradesh'))\n\ndata['Dest_states']=data['Dest_states'].replace((' Tamil Nadu', 'TAMIL NADU', 'RAJASTHAN', ' Maharashtra',\n       'KARNATAKA', 'PONDICHERRY', 'MAHARASHTRA', ' Haryana', ' Gujarat',\n       'GUJARAT', 'JHARKHAND', 'Haryana', ' Himachal Pradesh',\n       ' Karnataka', ' Assam', 'HARYANA', ' Uttar Pradesh',\n       'HIMACHAL PRADESH', ' West Bengal', ' Odisha', ' Rajasthan',\n       ' Andhra Pradesh', ' Jharkhand', ' Telangana', ' Punjab', ' Delhi',\n       ' Central Development Region', ' Madhya Pradesh', ' Meghalaya',\n       ' Chattisgarh', ' Jammu & Kashmir', ' Uttarakhand', ' Chandigarh',\n       ' Bihar', ' Pondicherry', ' Kerala', ' Dadra & Nagar Haveli',\n       ' Goa', ' Sikkim', ' India'),\n       ('Tamil Nadu', 'Tamil Nadu', 'Rajasthan', 'Maharashtra',\n       'Karnataka', 'Pondicherry', 'Maharashtra', 'Haryana', 'Gujarat',\n       'Gujarat', 'Jharkhand', 'Haryana', 'Himachal Pradesh',\n       'Karnataka', 'Assam', 'Haryana', 'Uttar Pradesh',\n       'Himachal Pradesh', 'West Bengal', 'Odisha', 'Rajasthan',\n       'Andhra Pradesh', 'Jharkhand', 'Telangana', 'Punjab', 'Delhi',\n       'Central Development Region', 'Madhya Pradesh', 'Meghalaya',\n       'Chattisgarh', 'Jammu & Kashmir', 'Uttarakhand', 'Chandigarh',\n       'Bihar', 'Pondicherry', 'Kerala', 'Dadra & Nagar Haveli',\n       'Goa', 'Sikkim', 'India'))","702fce01":"for i in data.index:\n  if data['Origin_states'][i]=='India':\n    if data['Origin_Location'][i]=='Sedarapet, India':\n      data['Origin_states'][i]='Pondicherry'\n    elif data['Origin_Location'][i]=='Kanchipuram, Tamil Nadu, India':\n      data['Origin_states'][i]='Tamil Nadu'\n    elif data['Origin_Location'][i]=='Karnataka 562114, India':\n      data['Origin_states'][i]='Karnataka'\n    elif data['Origin_Location'][i]=='Sedarapet, Pondicherry, India':\n      data['Origin_states'][i]='Pondicherry'\n    elif data['Origin_Location'][i]=='Pondicherry, Puducherry, India':\n      data['Origin_states'][i]='Pondicherry'","2b0425ad":"for i in data.index:\n  if data['Dest_states'][i]=='India':\n    if data['Destination_Location'][i]=='Gaya, Bihar, India':\n      data['Origin_states'][i]='Bihar'\n    elif data['Destination_Location'][i]=='Nizamabad, Telangana, India':\n      data['Origin_states'][i]='Telangana'\n    elif data['Destination_Location'][i]=='Bhogipur, Uttar Pradesh, India':\n      data['Origin_states'][i]='Uttar Pradesh'\n    elif data['Destination_Location'][i]=='Pondicherry, Puducherry, India':\n      data['Origin_states'][i]='Pondicherry'\n    elif data['Destination_Location'][i]=='Sheikhpura, Bihar, India':\n      data['Origin_states'][i]='Bihar'\n    elif data['Destination_Location'][i]=='Bhagalpur, Bihar, India':\n      data['Origin_states'][i]='Bihar'\n    elif data['Destination_Location'][i]=='Kothamangalam, Kerala, India':\n      data['Origin_states'][i]='Kerala'\n    elif data['Destination_Location'][i]=='Kanchipuram, Tamil Nadu, India':\n      data['Origin_states'][i]='Tamil Nadu'","8216289d":"from geopy import distance\n\n#let's find the distance between origin and destination\ndistances_km = []\nfor row in data.itertuples(index=False):\n   distances_km.append(\n       distance.distance(row.Org_lat_lon, row.Des_lat_lon).km\n   )\n\ndata['Org_Dest_distance'] = distances_km\n#df_dist.head()\n\n#data=pd.concat([data, df_dist])","1b756fd2":"#let's check the percentage of null values in each feature\nfor col in data.columns:\n    if data[col].isna().sum()>0:\n        print(col, data[col].isna().mean().round(4)*100)","410c99c7":"#let's name unkown for null values in driver name\ndata['Driver_Name']=data['Driver_Name'].fillna('Unknown')\n\n#let's impute transportation distence with mean value\ndata['TRANSPORTATION_DISTANCE_IN_KM']= data[\"TRANSPORTATION_DISTANCE_IN_KM\"].rolling(min_periods=1, center=True, window=12).mean()\n\n#let's name unkown for null values in vehicle type\ndata['vehicleType']=data['vehicleType'].fillna('Unknown')\n\n#let's fill pervious date for actual.eta\ndata['actual_eta']=data['actual_eta'].fillna(method='ffill')","8615f279":"#let's impute null values in trip_end_date\nimport datetime\nimport random\ndf_sub=data[data['trip_end_date'].isna()]\nfor i in df_sub.index:\n  if df_sub['ontime\/delay'][i]==0:\n    df_sub['trip_end_date'][i]=df_sub['actual_eta'][i]\n  else:\n    df_sub['trip_end_date'][i]=df_sub['Planned_ETA'][i]-datetime.timedelta(random.randint(0,3))\n\ndata=pd.concat([data, df_sub])\n\n#as we have concatinationg those null in trip_end_date related rows are duplicates so let's remove those\ndata.dropna(subset=['trip_end_date'], inplace=True)","30a474d9":"#feature like gps provider, data ping time, current location, curr_lat, curr_lon having null values in same rows\n#all the above mentioned features are dependent on each other and it's not feasible to impute those, so let's drop those rows\n\ndata.dropna(subset=['Current_Location'], inplace=True)","6b147f3f":"plt.rcParams['figure.figsize']=(5,5)\n#explode = (0, 0.1, 0.2, 0.3, 0.4)\nplt.pie(data['ontime\/delay'].value_counts(), explode = (0, 0.05), autopct='%1.1f%%')\nplt.title('percentage og ontime and delay deliveries')\nplt.legend(['Delay', 'Ontime'])\nplt.show()","0e763f0f":"print('star supliers with more no. of ontime delivery')\ndata[data['ontime\/delay']==1][['supplierNameCode', 'TRANSPORTATION_DISTANCE_IN_KM']].groupby(['supplierNameCode']).agg('count').sort_values('TRANSPORTATION_DISTANCE_IN_KM', \n                                                                                                                   ascending=False).head(10).style.background_gradient(cmap='Wistia')","23279e82":"print('star supliers with more no. of ontime delivery')\ndata[data['ontime\/delay']==1][['supplierNameCode', 'TRANSPORTATION_DISTANCE_IN_KM']].groupby(['supplierNameCode']).agg('sum').sort_values('TRANSPORTATION_DISTANCE_IN_KM', \n                                                                                                                   ascending=False).head(10).style.background_gradient(cmap='Wistia')","95620a5d":"print('star supliers with more no. of delay delivery')\ndata[data['ontime\/delay']==0][['supplierNameCode', 'TRANSPORTATION_DISTANCE_IN_KM']].groupby(['supplierNameCode']).agg('sum').sort_values('TRANSPORTATION_DISTANCE_IN_KM', \n                                                                                                                   ascending=False).head(10).style.background_gradient(cmap='cool')","606b7c55":"print('star supliers with more no. of delay delivery')\ndata[data['ontime\/delay']==0][['supplierNameCode', 'TRANSPORTATION_DISTANCE_IN_KM']].groupby(['supplierNameCode']).agg('count').sort_values('TRANSPORTATION_DISTANCE_IN_KM', \n                                                                                                                   ascending=False).head(10).style.background_gradient(cmap='cool')","4d95db74":"#Let's check the supplier code for the unknown suppliers\ndata[data['supplierNameCode']=='Unknown']['supplierID'].value_counts()","dfb78440":"# Let's check whether having driver's mobile number making any impact on ontime delivery\ndata['Driver_MobileNo'].values[data['Driver_MobileNo'].values>0]=1\ndata['Driver_MobileNo'].fillna(0, inplace=True)\ndata[data['Driver_MobileNo']==1]['ontime\/delay'].value_counts()","c226abec":"data[data['Driver_MobileNo']==0]['ontime\/delay'].value_counts()","5a493c28":"#let's check the pattern of 'transportation in km' vs 'distance between origin and destination'\nplt.rcParams['figure.figsize']=15,5\nplt.subplot(121)\nsns.distplot(data['TRANSPORTATION_DISTANCE_IN_KM'], color='black')\n\nplt.subplot(122)\nsns.distplot(data['Org_Dest_distance'], color='blue')\n\nplt.suptitle('TRANSPORTATION_DISTANCE_IN_KM Vs Org_Dest_distance')\nplt.show()","bb650346":"#fraudulant entries by suppliers\ndata[data['Org_Dest_distance']==0][['TRANSPORTATION_DISTANCE_IN_KM', 'supplierNameCode']].groupby(['supplierNameCode']).agg('sum').sort_values('TRANSPORTATION_DISTANCE_IN_KM', \n                                                                                                                   ascending=False).head(10).style.background_gradient(cmap='plasma')","6e027f56":"plt.rcParams['figure.figsize']=10,5\nsns.countplot(data[data['ontime\/delay']==1]['vehicleType'],\n             order=data[data['ontime\/delay']==1]['vehicleType'].value_counts().head(10).index,\n             palette='viridis')\nplt.xticks(rotation=90)\nplt.title('Vehicle with most successful ontime delivery')\nplt.show()","22ada2b7":"plt.rcParams['figure.figsize']=10,5\nsns.countplot(data[data['ontime\/delay']==1]['supplierNameCode'],\n             order=data[data['ontime\/delay']==1]['supplierNameCode'].value_counts().head(10).index,\n             palette='viridis')\nplt.xticks(rotation=90)\nplt.title('suppliers with most successful ontime delivery')\nplt.show()","29b34afd":"plt.rcParams['figure.figsize']=10,5\nsns.countplot(data['vehicle_states'],\n             order=data['vehicle_states'].value_counts().head(10).index,\n             palette='viridis')\nplt.xticks(rotation=90)\nplt.title('which state vehicles are mostly used by TVS')\nplt.show()","e3d28490":"plt.rcParams['figure.figsize']=10,5\nsns.countplot(data['vehicle_states'],\n             order=data['vehicle_states'].value_counts().head(10).index,\n              hue=data['ontime\/delay'],\n             palette='magma')\nplt.xticks(rotation=90)\nplt.title('which state vehicles having most successfull ontime delivery')\nplt.legend(['Delay', 'Ontime'])\nplt.show()","69e3b9df":"plt.rcParams['figure.figsize']=15,5\n\nplt.subplot(121)\nsns.countplot(data['Dest_states'],\n             order=data['Dest_states'].value_counts().head(10).index,\n             palette='dark')\nplt.xticks(rotation=90)\nplt.title('Most of the destination location')\n\nplt.subplot(122)\nsns.countplot(data['Origin_states'],\n             order=data['Origin_states'].value_counts().head(10).index,\n             palette='plasma')\nplt.xticks(rotation=90)\nplt.title('Most of the Origin location')\n\nplt.show()","49c534dd":"plt.subplot(121)\nsns.boxplot(data['TRANSPORTATION_DISTANCE_IN_KM'])\n\nplt.subplot(122)\nsns.boxplot(data['Org_Dest_distance'])\nplt.show()","f3eb9cbd":"#let's filter usefull data alone\ndf_cln=data[['Market\/Regular ',\n       'vehicle_no',\n       'Current_Location',\n       'TRANSPORTATION_DISTANCE_IN_KM',\n       'vehicleType', 'Driver_Name',\n       'Driver_MobileNo', 'customerID', 'supplierID',\n       'Material Shipped', 'ontime\/delay',\n       'vehicle_states', 'Origin_states', 'Dest_states', 'Org_Dest_distance']]","6809b444":"#let's make a copy of filtered data\ndf_copy=df_cln.copy()","a8739c90":"#df_cln['GpsProvider']=df_cln.GpsProvider.astype(\"category\").cat.codes\n#df_cln['BookingID']=df_cln.BookingID.astype(\"category\").cat.codes\ndf_cln['vehicle_no']=df_cln.vehicle_no.astype(\"category\").cat.codes\ndf_cln['customerID']=df_cln.customerID.astype(\"category\").cat.codes\ndf_cln['supplierID']=df_cln.supplierID.astype(\"category\").cat.codes\n#df_cln['Origin_Location']=df_cln.Origin_Location.astype(\"category\").cat.codes\n#df_cln['Destination_Location']=df_cln.Destination_Location.astype(\"category\").cat.codes\ndf_cln['Current_Location']=df_cln.Current_Location.astype(\"category\").cat.codes\ndf_cln['vehicleType']=df_cln.vehicleType.astype(\"category\").cat.codes\n#df_cln['customerNameCode']=df_cln.customerNameCode.astype(\"category\").cat.codes\n#df_cln['supplierNameCode']=df_cln.supplierNameCode.astype(\"category\").cat.codes\ndf_cln['Material Shipped']=df_cln['Material Shipped'].astype(\"category\").cat.codes\ndf_cln['Market\/Regular ']=df_cln['Market\/Regular '].astype(\"category\").cat.codes\ndf_cln['Driver_Name']=df_cln['Driver_Name'].astype(\"category\").cat.codes\ndf_cln['vehicle_states']=df_cln.vehicle_states.astype(\"category\").cat.codes\ndf_cln['Origin_states']=df_cln['Origin_states'].astype(\"category\").cat.codes\ndf_cln['Dest_states']=df_cln['Dest_states'].astype(\"category\").cat.codes","ff6b4e77":"corr_matrix=df_cln.corr()\ncorr_matrix[\"ontime\/delay\"].sort_values(ascending=False)","0ae59e9d":"x=df_cln.drop('ontime\/delay', axis=1)\ny=df_cln['ontime\/delay'].values","cc65550d":"from sklearn.preprocessing import StandardScaler\n\n#to_scale=df_cln.select_dtypes(include='number').columns.tolist()[1:-1]\nsc=StandardScaler()\nscaled=sc.fit_transform(x)\nx_scl=pd.DataFrame(scaled, columns=x.columns)","c0b3bf00":"#check weathear data is standardized or not\nplt.subplot(121)\nplt.ylim(-1,1)\n\nmeans=[]\nfor i in range(x_scl.shape[1]):\n    means.append(np.mean(x_scl.iloc[:,i]))\nplt.plot(means, scaley=False)\nplt.title('Means of scaled features')\n\nplt.subplot(122)\nplt.ylim(0,2)\nvars=[]\nfor i in range(x_scl.shape[1]):\n    vars.append(np.var(x_scl.iloc[:,i]))\nplt.plot(vars, scaley=False)\nplt.title('Varience of scaled features')\nplt.show()","d0b7e7e2":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x_scl, y, test_size=0.25)","2ee44b61":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, roc_curve, auc, roc_auc_score","4769e2c4":"LR=LogisticRegression()\nLR.fit(X_train, y_train)","b8176c93":"LR.score(X_test, y_test)","01dd69ea":"y_pred_LR=LR.predict(X_test)","bb356aac":"plt.rcParams['figure.figsize']=5,5\nax= plt.subplot()\ncm = confusion_matrix(y_test, y_pred_LR)\nsns.heatmap(cm, annot=True, ax = ax); #annot=True to annotate cells\n\n# labels, title and ticks\nax.set_xlabel('Predicted labels');ax.set_ylabel('True labels'); \nax.set_title('Confusion Matrix'); \nax.xaxis.set_ticklabels(['delay', 'ontime']); ax.yaxis.set_ticklabels(['delay', 'ontime']);","2c04c5bb":"fpr, tpr, thres = roc_curve(y_test, LR.predict_proba(X_test)[:,1])\nroc_auc = auc(fpr, tpr)","9e0edd53":"plt.rcParams['figure.figsize']=10,7\nplt.plot(fpr, tpr, label = 'ROC Curve' %roc_auc)\nplt.plot([0, 1], [0, 1], '--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend()\nplt.title('ROC-AUC graph')\nplt.show()","cf0a1cfa":"from sklearn.ensemble import RandomForestClassifier\n#from sklearn.feature_selection import SelectFromModel","c18e5f08":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.25)","292218d7":"RF =RandomForestClassifier()\nRF.fit(X_train, y_train)","e632c058":"RF.score(X_test, y_test)","301b71cb":"y_pred_RF=RF.predict(X_test)","7afc2101":"plt.rcParams['figure.figsize']=5,5\nax= plt.subplot()\ncm = confusion_matrix(y_test, y_pred_RF)\nsns.heatmap(cm, annot=True, ax = ax); #annot=True to annotate cells\n\n# labels, title and ticks\nax.set_xlabel('Predicted labels');ax.set_ylabel('True labels'); \nax.set_title('Confusion Matrix'); \nax.xaxis.set_ticklabels(['delay', 'ontime']); ax.yaxis.set_ticklabels(['delay', 'ontime']);","eb352ac9":"fpr, tpr, thres = roc_curve(y_test, RF.predict_proba(X_test)[:,1])\nroc_auc = auc(fpr, tpr)","6986b154":"plt.rcParams['figure.figsize']=10,7\nplt.plot(fpr, tpr, label = 'ROC Curve' %roc_auc)\nplt.plot([0, 1], [0, 1], '--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend()\nplt.title('ROC-AUC graph')\nplt.show()","769a7baa":"plt.rcParams['figure.figsize']=15,7\nplt.style.use('ggplot')\nweights=pd.Series(LR.coef_[0], index=['Market\/Regular ', 'vehicle_no', 'Current_Location',\n       'TRANSPORTATION_DISTANCE_IN_KM', 'vehicleType', 'Driver_Name',\n       'Driver_MobileNo', 'customerID', 'supplierID', 'Material Shipped',\n       'vehicle_states', 'Origin_states', 'Dest_states', 'Org_Dest_distance'])\n\nparams_weight =weights.plot(kind='bar', title='feature going to help us for successfull ontime deliveries ')\nfig=params_weight.get_figure()\nplt.show()","30fc9201":"##### Random Forest","8043fa47":"dataset is well standardised\n### Model Building\n##### Logistic Refression","794b1571":"### Let's explore the dataset","0fd81bda":"### Feature Encoding","f304a218":"**Parameters that impact on ontime delivery**\n* Current location\n* Transportation distance\n* Vehicle state\n* Vehicle type\n* Driver mobile number\n* Supplier\n* material shipped\n* Destination state","67fc4066":"By this result, we can see that we don't have vehicletype data for most of the record. Definetly we shoud have record of vehicle type to get the suppliers having star vehicle. By this we can see the second most successful star vehicle which making more number of ontime delivery is '*32 FT Multi-Axle 14MT - HCV*'","88419a56":"we don't have major outliers in our data","cadd5f8a":"### Missing value Treatment","013fe407":"##### Selecting most helping Parametes","0b2de939":"### Scaling Treatment"}}