{"cell_type":{"71d37f75":"code","6802c82a":"code","9c5905db":"code","28e29a8e":"code","051784ce":"code","c86d138c":"code","7a1a30ab":"code","1518f11b":"code","f1cbe923":"code","e16da9b1":"code","dc7d3bdc":"code","e00e9bee":"code","b72b1ed6":"code","9da362aa":"markdown","e9a74d23":"markdown","b76668e2":"markdown","81e9ca35":"markdown","cc0b4123":"markdown","0388cba9":"markdown","9415981d":"markdown"},"source":{"71d37f75":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n%config Completer.use_jedi = False\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6802c82a":"dataset = \"..\/input\/affinity-dataset\/affinity_dataset.txt\"\nx = np.loadtxt(dataset)\n\nnSamples, nFeatures = x.shape","9c5905db":"x[:5]","28e29a8e":"features = [\"bread\", \"milk\", \"cheese\", \"apples\", \"bananas\"]","051784ce":"#how many rows contain 1 for banana ie column no. 3\nnumApplePurchase = 0\nfor sample in x:\n    if sample[3] ==1:\n        numApplePurchase +=1\n        \nprint(\"{0} people bought Apples.\".format(numApplePurchase))","c86d138c":"# for banana\nnumBananaPurchase = 0\nfor sample in x:\n    if sample[4] == 1:\n        numBananaPurchase +=1\n        \nprint(\"{0} people bought Bananas.\".format(numBananaPurchase))","7a1a30ab":"#how many person bought apple as well as banana\nruleValid = 0\nruleInvalid = 0\nfor sample in x:\n    if sample[3] == 1:   #apples yes\n        if sample[4] == 1:    #bought banana\n            ruleValid +=1   #bought apple and banana both\n            \n        else:  #bought apple but not banana\n            ruleInvalid += 1\n            \nprint(\"{0} cases people bought both banan and apple\".format(ruleValid))\nprint(\"{0} cases people bought  apple but not banana\".format(ruleInvalid))","1518f11b":"#compute support and confidence\nsupport = ruleValid\nconfidence = ruleValid \/ numApplePurchase\nprint(\"The support is {0} and the confidence is {1:.3f}\".format(support, confidence))\n\nprint(\"Confidence in Percentage: {0:.1f}%\".format(100*confidence))","f1cbe923":"#setup some dicitonary to store result.\nfrom collections import defaultdict\nvalidRules = defaultdict(int)\ninvalidRules = defaultdict(int)\nnumOccurances = defaultdict(int)\n\n#compute values in loop \nfor sample in x:\n    for premise in range(nFeatures):\n        if sample[premise] == 0:\n            continue\n            \n        numOccurances[premise] +=1\n        \n        for conclusion in range(nFeatures):\n            #it will skip if person buys A then they buys A\n            if premise == conclusion: continue\n                \n            #if conclusion exist then increment\n            if sample[conclusion] == 1:\n                validRules[(premise, conclusion)] +=1\n            else:\n                #bought premise but not conclusion\n                invalidRules[(premise, conclusion)] +=1 \n\nsupport = validRules\nconfidence = defaultdict(float)\nfor premise, conclusion in validRules.keys():\n    rule = (premise, conclusion)\n    confidence[rule] = validRules[rule]\/numOccurances[premise]","e16da9b1":"#create a function to print the result\ndef printRule(premise, conclusion, support, confidence, features):\n    premiseName = features[premise]\n    conclusionName = features[conclusion]\n    print(\"Rule: If a person buys {0}, they will also buy {1}\".format(premiseName, conclusionName))\n    \n    #print suppport and confidence\n    print(\" - Support: {0}\".format(support[(premise, conclusion)]))\n    print(\" - Confidence: {0:.3f}\".format(confidence[(premise, conclusion)]))","dc7d3bdc":"#test the code\npremise =1\nconclusion = 3\nprintRule(premise, conclusion, support, confidence, features)","e00e9bee":"#sort the dictionary using itemgetter\nfrom operator import itemgetter\nsortedSupport = sorted(support.items(), key = itemgetter(1),reverse=True)\n\n#print top 5 rules\nfor index in range(5):\n    print(\"Rule #{0}\".format(index+1))\n    premise, conclusion = sortedSupport[index][0]\n    printRule(premise, conclusion, support, confidence, features)","b72b1ed6":"#print based on confidence\n#sort the dictionary using itemgetter\nfrom operator import itemgetter\nsortedConfidence = sorted(confidence.items(), key = itemgetter(1),reverse=True)\n\n#print top 5 rules\nfor index in range(5):\n    print(\"Rule #{0}\".format(index+1))\n    premise, conclusion = sortedConfidence[index][0]\n    printRule(premise, conclusion, support, confidence, features)","9da362aa":"we wish to find `if person buys product X, then they are likely to purchase product Y.`","e9a74d23":"In the dataset each column represents each of the item.\n- bread, milk, cheese, apples, bananas\n\n1--> if person buys\n\n0--> not buy","b76668e2":"# CONCLUSION\n\n**A Store manager use these ranks to put the sale on his\/her store.**","81e9ca35":"This type of rule can be measuerd by -> Support and Confidence\n\nSupport: `number of times that a rule occures in a dataset`.\n --> Calculated by *counting number of samples that the rule is valid for.*\n\nConfidence: `measures how accurate they are when they can be used.`\n --> Calculated by *percentage of times the rule applies when the condition applies*\n ","cc0b4123":"### Compute the support and confidence for *if a person buys apples then also banana*","0388cba9":"### Ranking to find the best rules\n\nLets print the best rules with highest values firt","9415981d":"NOw we will caclulate support and confidence for all possible rules."}}