{"cell_type":{"69ed0398":"code","8c9b28d0":"code","2cea0b7f":"code","afe120f9":"code","53af1a48":"code","9d964b7c":"code","84654c5c":"code","6e09ee30":"code","676a41b1":"code","182dae77":"code","e265a067":"code","516c8383":"code","6c4ce644":"code","938e4160":"code","afb11c96":"code","27cd3c92":"code","f4badf8f":"markdown","902f351a":"markdown","c990ad65":"markdown","6b38e03a":"markdown","5db0df7e":"markdown","3998624c":"markdown"},"source":{"69ed0398":"import pandas as pd\nimport os","8c9b28d0":"dataset_path = '\/kaggle\/input\/car-crashes-severity-prediction\/'\n\ndf = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\nprint(\"The shape of the dataset is {}.\\n\\n\".format(df.shape))\ndf.head()","2cea0b7f":"df.drop(columns='ID').describe()","afe120f9":"df_weather = pd.read_csv(os.path.join(dataset_path, 'weather-sfcsv.csv'))\nprint(\"The shape of the dataset is {}.\\n\\n\".format(df.shape))\ndf.head()\ndf_weather\nimport xml.etree.ElementTree as et","53af1a48":"xtree = et.parse(os.path.join(dataset_path, 'holidays.xml'))\nxroot = xtree.getroot() \n\ndf_cols = [\"date\", \"description\"]\nrows = []\n\nfor node in xroot: \n    s_description = node.find(\"description\").text \n    s_date = node.find(\"date\").text \n    \n    rows.append({\"description\": s_description, \"date\": s_date})\n\nxml_df = pd.DataFrame(rows, columns = df_cols)\n\nxml_df['Day'] = pd.DatetimeIndex(xml_df['date']).day\nxml_df['Month'] = pd.DatetimeIndex(xml_df['date']).month\nxml_df['Year'] = pd.DatetimeIndex(xml_df['date']).year\nxml_df.drop(columns='date').describe()\n# xml_df\n","9d964b7c":"import datetime as dt\n# le = LabelEncoder()\n# df = df[df.columns[:]].apply(le.fit_transform)\n\ndf['Railway']=df['Railway'].astype('int')\ndf['Amenity']=df['Amenity'].astype('int')\ndf['Stop']=df['Stop'].astype('int')\ndf['Roundabout']=df['Roundabout'].astype('int')\ndf['No_Exit']=df['No_Exit'].astype('int')\ndf['Junction']=df['Junction'].astype('int')\ndf['Give_Way']=df['Give_Way'].astype('int')\ndf['Crossing']=df['Crossing'].astype('int')\ndf['Bump']=df['Bump'].astype('int')\n\ndf['Day'] = pd.DatetimeIndex(df['timestamp']).day\ndf['Month'] = pd.DatetimeIndex(df['timestamp']).month\ndf['Year'] = pd.DatetimeIndex(df['timestamp']).year\ndf['Hour'] = pd.DatetimeIndex(df['timestamp']).hour\ndf['timestamp'] = pd.DatetimeIndex(df['timestamp']).date\ndf['weekday'] = df[['timestamp']].apply(lambda x: dt.datetime.strftime(x['timestamp'], '%A'), axis=1)\n\ndays = df['weekday'].unique()\ndays_dict={}\ncount=1\nfor i in days:\n    days_dict[i]=count\n    count+=1\n\ndf['weekday']=df['weekday'].replace(days_dict)\ndf","84654c5c":"\ndf_weather=df_weather.drop_duplicates(['Year','Day','Month'], keep='last')\nprint(\"The shape of the Weather After removing dublicate is {}.\\n\\n\".format(df_weather.shape))\n\ny=df.merge(df_weather,how='left',on=['Year','Month','Day','Hour'])\n# x=pd.concat([df, df_weather],keys=['Year','Month','Day','Hour'], axis=1, join=\"inner\")\n# y=pd.concat([xml_df,x ],keys=['Day','Month'], join=\"inner\")\n# y=x.merge(xml_df,how='left',on=['Month','Day'])\n# y=pd.merge( xml_df,x, right_index=True, left_index=True)\ny[\"Wind_Speed(mph)\"].fillna(y['Wind_Speed(mph)'].mean(), inplace = True)\ny[\"Visibility(mi)\"].fillna(y['Visibility(mi)'].mean(), inplace = True)\ny[\"Temperature(F)\"].fillna(y['Temperature(F)'].mean(), inplace = True)\ny[\"Humidity(%)\"].fillna(y['Humidity(%)'].mean(), inplace = True)\n\n# y['Weather_Condition'].isna().sum()\n# y['Weather_Condition'].fillna('Clear', inplace = True)\n# y['Weather_Condition'] = pd.Categorical(y['Weather_Condition'], categories=y['Weather_Condition'].unique()).codes\n\n# conditions = y['Weather_Condition'].unique()\n# conditions_dict={}\n# count=1\n# for i in y:\n#     if i['']\n#     conditions_dict[i]=count\n#     count+=1\n\n# df['weekday']=df['weekday'].replace(days_dict)\n# days","6e09ee30":"y[\"Weather_Condition\"].fillna('Partly Cloudy', inplace = True)\ny[\"Weather_Condition\"].value_counts()\n# df_weather['Weather_Condition'] = pd.Categorical(df_weather['Weather_Condition'], categories=df_weather['Weather_Condition'].unique()).codes","676a41b1":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\n\ntrain_df, val_df = train_test_split(y, test_size=0.2, random_state=42) # Try adding `stratify` here\nX_train = train_df.drop(columns=['ID', 'Severity'])\ny_train = train_df['Severity']\nX_val = val_df.drop(columns=['ID', 'Severity'])\ny_val = val_df['Severity']\n\nX_train['Side']=X_train['Side'].replace({'L': 0, 'R': 1})\n\nX_train","182dae77":"from sklearn.feature_selection import RFE\nfrom sklearn.ensemble import RandomForestClassifier\n# estimator = RandomForestClassifier(max_depth=2, random_state=0)\n# selector = RFE(estimator, n_features_to_select=7, step=1)\n# selector = selector.fit(X_train, y_train)\n# selector.support_","e265a067":"# This cell is used to select the numerical features. IT SHOULD BE REMOVED AS YOU DO YOUR WORK.\nX_train = X_train[['Lat', 'Lng','weekday','Year','Wind_Speed(mph)','Visibility(mi)','Month','Distance(mi)']]\nX_val = X_val[['Lat', 'Lng','weekday','Year','Wind_Speed(mph)','Visibility(mi)','Month','Distance(mi)']]\n\n\n# df_weather['Weather_Condition'] = pd.Categorical(df_weather['Weather_Condition'], categories=df_weather['Weather_Condition'].unique()).codes","516c8383":"\n\n# Create an instance of the classifier\nclassifier = RandomForestClassifier(max_depth=2, random_state=0)\n\n# Train the classifier\nclassifier = classifier.fit(X_train, y_train)","6c4ce644":"print(\"The accuracy of the classifier on the validation set is \", (classifier.score(X_val, y_val)))","938e4160":"test_df = pd.read_csv(os.path.join(dataset_path, 'test.csv'))\ntest_df['Year']=X_train['Year']\ntest_df['weekday']=X_train['weekday']\ntest_df['Wind_Speed(mph)']=X_train['Wind_Speed(mph)']\ntest_df['Visibility(mi)']=X_train['Visibility(mi)']\ntest_df['Month']=X_train['Month']\ntest_df[\"Year\"].fillna(test_df['Year'].max(), inplace = True)\ntest_df[\"Month\"].fillna(test_df['Month'].max(), inplace = True)\ntest_df[\"Wind_Speed(mph)\"].fillna(test_df['Wind_Speed(mph)'].mean(), inplace = True)\ntest_df[\"Visibility(mi)\"].fillna(test_df['Visibility(mi)'].mean(), inplace = True)\ntest_df[\"weekday\"].fillna(test_df['weekday'].mean(), inplace = True)\ntest_df.isna().sum()","afb11c96":"X_test = test_df.drop(columns=['ID'])\n# You should update\/remove the next line once you change the features used for training\nX_test = X_test[['Lat', 'Lng','weekday','Year','Wind_Speed(mph)','Visibility(mi)','Month','Distance(mi)']]\n\ny_test_predicted = classifier.predict(X_test)\n\ntest_df['Severity'] = y_test_predicted\n\ntest_df.head()","27cd3c92":"test_df[['ID', 'Severity']].to_csv('submission.csv', index=False)","f4badf8f":"## Import the libraries\n\nWe'll use `pandas` to load and manipulate the data. Other libraries will be imported in the relevant sections.","902f351a":"## Data Splitting\n\nNow it's time to split the dataset for the training step. Typically the dataset is split into 3 subsets, namely, the training, validation and test sets. In our case, the test set is already predefined. So we'll split the \"training\" set into training and validation sets with 0.8:0.2 ratio. \n\n*Note: a good way to generate reproducible results is to set the seed to the algorithms that depends on randomization. This is done with the argument `random_state` in the following command* ","c990ad65":"## You're here! \nWelcome to your first competition in the [ITI's AI Pro training program](https:\/\/ai.iti.gov.eg\/epita\/ai-engineer\/)! We hope you enjoy and learn as much as we did prepairing this competition.\n\n\n## Introduction\n\nIn the competition, it's required to predict the `Severity` of a car crash given info about the crash, e.g., location.\n\nThis is the getting started notebook. Things are kept simple so that it's easier to understand the steps and modify it.\n\nFeel free to `Fork` this notebook and share it with your modifications **OR** use it to create your submissions.\n\n### Prerequisites\nYou should know how to use python and a little bit of Machine Learning. You can apply the techniques you learned in the training program and submit the new solutions! \n\n### Checklist\nYou can participate in this competition the way you perefer. However, I recommend following these steps if this is your first time joining a competition on Kaggle.\n\n* Fork this notebook and run the cells in order.\n* Submit this solution.\n* Make changes to the data processing step as you see fit.\n* Submit the new solutions.\n\n*You can submit up to 5 submissions per day. You can select only one of the submission you make to be considered in the final ranking.*\n\n\nDon't hesitate to leave a comment or contact me if you have any question!","6b38e03a":"The output shows desciptive statistics for the numerical features, `Lat`, `Lng`, `Distance(mi)`, and `Severity`. I'll use the numerical features to demonstrate how to train the model and make submissions. **However you shouldn't use the numerical features only to make the final submission if you want to make it to the top of the leaderboard.**","5db0df7e":"We've got 6407 examples in the dataset with 14 featues, 1 ID, and the `Severity` of the crash.\n\nBy looking at the features and a sample from the data, the features look of numerical and catogerical types. What about some descriptive statistics?","3998624c":"## Exploratory Data Analysis\nIn this step, one should load the data and analyze it. However, I'll load the data and do minimal analysis. You are encouraged to do thorough analysis!\n\nLet's load the data using `pandas` and have a look at the generated `DataFrame`."}}