{"cell_type":{"f6321a5e":"code","b040729f":"code","5518dbec":"code","e6655b28":"code","cb44deda":"code","a8217092":"code","3812f26b":"code","298a0653":"code","67ff6ea3":"code","07be7708":"code","62612793":"code","49355f3a":"code","85696ce5":"markdown","c5e5faee":"markdown","18956814":"markdown","8acf7ea5":"markdown","828d3d85":"markdown","c6685a7a":"markdown"},"source":{"f6321a5e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b040729f":"\nimport pandas as pd ## Data Processing CSV file I\/O\n\nimport numpy as np ## Linear Algebra\n\nimport matplotlib.pyplot as plt ## Visualization\n\nimport seaborn as sns ## Visualization\n\nimport tensorflow as tf\n\nimport re","5518dbec":"df_train = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ndf_test = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')","e6655b28":"df_train.head()","cb44deda":"## size of the plot\nplt.figure(figsize = (8,5))\n\n## grab data from the DataFrame\nsns.countplot(x = 'target', data = df_train, palette = 'dark', linewidth = 5)\n\n## Display the plot\nplt.show()","a8217092":"plt.figure(figsize = (9,6))\n\nsns.countplot(y = df_train.keyword,order = df_train['keyword'].value_counts()\n              .sort_values(ascending=False).iloc[0:20].index)\nplt.title(\"Keywords Count\")","3812f26b":"## Setting paremeters for disaster tweets\ndis_tweet = df_train.groupby('keyword')['target'].mean().sort_values(ascending = False).head(15)\n\n## Setting paremeters for non disaster tweets\nnon_dis_tweet = df_train.groupby('keyword')['target'].mean().sort_values().head(15)\n\n## Setting up the bar plot\nplt.figure(figsize = (9,6))\n## for disaster keyword\nsns.barplot(dis_tweet, dis_tweet.index, color = 'red')\nplt.title('Words with highest % of disaster')\n## for non disaster keywords\nsns.barplot(non_dis_tweet, non_dis_tweet.index, color = 'blue')\nplt.title('Words with lowest % disaster')\n\nplt.show()","298a0653":"plt.figure(figsize = (14,7))\n\ntweet_loc = df_train.location.value_counts()\ntop_loc_dis = list(tweet_loc[tweet_loc >= 10].index)\ntop_dis = df_train[df_train.location.isin(top_loc_dis)]\n\ntop_loc = top_dis.groupby('location')['target'].mean().sort_values(ascending = False)\nsns.barplot( x = top_loc.index, y = top_loc)\nplt.xticks(rotation = 90)\n\nplt.show()\n","67ff6ea3":"df_train.keyword.fillna('None', inplace = True)\n\ndf_train.location.fillna('None', inplace = True)\n\ndf_train.isnull().sum()","07be7708":"def deconstruction(phrase):\n    \n    \n    phrase = re.sub(r\"won\/'t\", \"will not\", phrase)\n    phrase = re.sub(r\"can\/'t\", \"can not\", phrase)\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    phrase = re.sub('\\[.*?\\]', ' ', phrase) \n    phrase = re.sub('https?:\/\/\\S+|www\\.\\S+', ' ', phrase)\n    phrase = re.sub('<.*?>+', ' ', phrase)\n    phrase = re.sub('\\n', ' ', phrase)\n    phrase = re.sub('\\w*\\d\\w*', ' ', phrase)\n    \n    phrase = phrase.lower()\n    \n    return phrase\n\ndf_train.text = [deconstruction(tweet) for tweet in df_train.text]\n    \n    ","62612793":"import nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.stem import PorterStemmer\n\nlemmatizer = WordNetLemmatizer()\n\nps = PorterStemmer()","49355f3a":"nltk.download('stopwords')\nnltk.download('punkt')\nnltk.download('wordnet')","85696ce5":"# Importing labraries","c5e5faee":"# Data Cleaning","18956814":"# Taking a quick peak at the data","8acf7ea5":"# Reading the data with pandas","828d3d85":"This particular challenge is perfect for data scientists looking to get started with Natural Language Processing. The competition dataset is not too big, and even if you don\u2019t have much personal computing power, you can do all of the work in our free, no-setup, Jupyter Notebooks environment called Kaggle Notebooks.\n\nCompetition Description\nTwitter has become an important communication channel in times of emergency.\nThe ubiquitousness of smartphones enables people to announce an emergency they\u2019re observing in real-time. Because of this, more agencies are interested in programatically monitoring Twitter (i.e. disaster relief organizations and news agencies).\n\nBut, it\u2019s not always clear whether a person\u2019s words are actually announcing a disaster.","c6685a7a":"# Lets visualize some data xD"}}