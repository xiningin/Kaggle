{"cell_type":{"73588e36":"code","bb9d51d1":"code","e2227345":"code","1831834b":"code","ab601eb2":"code","db79e783":"code","4263b888":"code","8e193078":"code","95ac61a1":"code","2a8f1260":"code","d51a0d64":"code","c5c90d6e":"code","93a8c7b9":"code","3610bc7e":"code","b196403e":"code","fd0aa9a9":"code","388f88f9":"code","2fc19f5d":"code","c4161e17":"code","3d4f8ca3":"code","32c2b932":"code","0c440876":"markdown","940a15b2":"markdown","db06a353":"markdown","604de72e":"markdown","e5401761":"markdown","e72c586b":"markdown","1fea1b39":"markdown","0409b9af":"markdown","2eda52a5":"markdown","23651742":"markdown","a7bc2fa7":"markdown","8cbd5446":"markdown","8c9fdf94":"markdown"},"source":{"73588e36":"import tensorflow as tf\nimport tensorflow_datasets as tfds\n!pip install -q git+https:\/\/github.com\/tensorflow\/examples.git\nfrom tensorflow_examples.models.pix2pix import pix2pix\nfrom IPython.display import clear_output\nimport matplotlib.pyplot as plt","bb9d51d1":"dataset, info = tfds.load('oxford_iiit_pet', data_dir='..\/input\/oxfordiiit-petsdataset\/OxfordIIIT_Petsdataset\/', download=False, with_info=True)","e2227345":"def normalize(input_image, input_mask):\n    input_image = tf.cast(input_image, tf.float32) \/ 255.0\n    input_mask -= 1\n    return input_image, input_mask","1831834b":"@tf.function\ndef load_image_train(datapoint):\n    input_image = tf.image.resize(datapoint['image'], (128, 128))\n    input_mask = tf.image.resize(datapoint['segmentation_mask'], (128, 128))\n\n    if tf.random.uniform(()) > 0.5:\n        input_image = tf.image.flip_left_right(input_image)\n        input_mask = tf.image.flip_left_right(input_mask)\n\n    input_image, input_mask = normalize(input_image, input_mask)\n\n    return input_image, input_mask","ab601eb2":"def load_image_test(datapoint):\n    input_image = tf.image.resize(datapoint['image'], (128, 128))\n    input_mask = tf.image.resize(datapoint['segmentation_mask'], (128, 128))\n\n    input_image, input_mask = normalize(input_image, input_mask)\n\n    return input_image, input_mask","db79e783":"TRAIN_LENGTH = info.splits['train'].num_examples\nBATCH_SIZE = 64\nBUFFER_SIZE = 1000\nSTEPS_PER_EPOCH = TRAIN_LENGTH \/\/ BATCH_SIZE","4263b888":"train = dataset['train'].map(load_image_train, num_parallel_calls=tf.data.AUTOTUNE)\ntest = dataset['test'].map(load_image_test)","8e193078":"train_dataset = train.cache().shuffle(BUFFER_SIZE).batch(BATCH_SIZE).repeat()\ntrain_dataset = train_dataset.prefetch(buffer_size=tf.data.AUTOTUNE)\ntest_dataset = test.batch(BATCH_SIZE)","95ac61a1":"def display(display_list):\n    plt.figure(figsize=(15, 15))\n\n    title = ['Input Image', 'True Mask', 'Predicted Mask']\n\n    for i in range(len(display_list)):\n        plt.subplot(1, len(display_list), i+1)\n        plt.title(title[i])\n        plt.imshow(tf.keras.preprocessing.image.array_to_img(display_list[i]))\n        plt.axis('off')\n    plt.show()","2a8f1260":"for image, mask in train.take(3):\n    sample_image, sample_mask = image, mask\ndisplay([sample_image, sample_mask])","d51a0d64":"OUTPUT_CHANNELS = 3\n\nbase_model = tf.keras.applications.MobileNetV2(input_shape=[128, 128, 3], include_top=False)\n\n# Use the activations of these layers\nlayer_names = [\n    'block_1_expand_relu',   # 64x64\n    'block_3_expand_relu',   # 32x32\n    'block_6_expand_relu',   # 16x16\n    'block_13_expand_relu',  # 8x8\n    'block_16_project',      # 4x4\n]\nbase_model_outputs = [base_model.get_layer(name).output for name in layer_names]\n\n# Create the feature extraction model\ndown_stack = tf.keras.Model(inputs=base_model.input, outputs=base_model_outputs)\ndown_stack.trainable = False","c5c90d6e":"up_stack = [\n    pix2pix.upsample(512, 3),  # 4x4 -> 8x8\n    pix2pix.upsample(256, 3),  # 8x8 -> 16x16\n    pix2pix.upsample(128, 3),  # 16x16 -> 32x32\n    pix2pix.upsample(64, 3),   # 32x32 -> 64x64\n]","93a8c7b9":"def unet_model(output_channels):\n    inputs = tf.keras.layers.Input(shape=[128, 128, 3])\n\n    # Downsampling through the model\n    skips = down_stack(inputs)\n    x = skips[-1]\n    skips = reversed(skips[:-1])\n\n    # Upsampling and establishing the skip connections\n    for up, skip in zip(up_stack, skips):\n        x = up(x)\n        concat = tf.keras.layers.Concatenate()\n        x = concat([x, skip])\n\n    # This is the last layer of the model\n    last = tf.keras.layers.Conv2DTranspose(\n        output_channels, 3, strides=2,\n        padding='same')  #64x64 -> 128x128\n\n    x = last(x)\n    return tf.keras.Model(inputs=inputs, outputs=x)","3610bc7e":"model = unet_model(OUTPUT_CHANNELS)\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","b196403e":"def create_mask(pred_mask):\n    pred_mask = tf.argmax(pred_mask, axis=-1)\n    pred_mask = pred_mask[..., tf.newaxis]\n    return pred_mask[0]","fd0aa9a9":"def show_predictions(dataset=None, num=1):\n    if dataset:\n        for image, mask in dataset.take(num):\n            pred_mask = model.predict(image)\n            display([image[0], mask[0], create_mask(pred_mask)])\n    else:\n        display([sample_image, sample_mask,\n             create_mask(model.predict(sample_image[tf.newaxis, ...]))])","388f88f9":"show_predictions(num=4)","2fc19f5d":"class DisplayCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs=None):\n        clear_output(wait=True)\n        show_predictions()\n        print ('\\nSample Prediction after epoch {}\\n'.format(epoch+1))","c4161e17":"EPOCHS = 10\nVAL_SUBSPLITS = 5\nVALIDATION_STEPS = info.splits['test'].num_examples\/\/BATCH_SIZE\/\/VAL_SUBSPLITS\n\nmodel_history = model.fit(train_dataset, epochs=EPOCHS,\n                          steps_per_epoch=STEPS_PER_EPOCH,\n                          validation_steps=VALIDATION_STEPS,\n                          validation_data=test_dataset,\n                          callbacks=[DisplayCallback()])","3d4f8ca3":"loss = model_history.history['loss']\nval_loss = model_history.history['val_loss']\n\nepochs = range(EPOCHS)\n\nplt.figure()\nplt.plot(epochs, loss, 'r', label='Training loss')\nplt.plot(epochs, val_loss, 'bo', label='Validation loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss Value')\nplt.ylim([0, 1])\nplt.legend()\nplt.show()","32c2b932":"show_predictions(test_dataset, 3)","0c440876":"## Datasets","940a15b2":"## Normalize and Load Functions","db06a353":"<h1 id=\"model\" style=\"color:#261b23; background:#a0bfb9; border:0.5px dotted;\"> \n    <center>Model\n        <a class=\"anchor-link\" href=\"#model\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","604de72e":"## Import Dataset","e5401761":"<h1 id=\"mask\" style=\"color:#261b23; background:#a0bfb9; border:0.5px dotted;\"> \n    <center>Mask\n        <a class=\"anchor-link\" href=\"#mask\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","e72c586b":"## Parameters","1fea1b39":"<h1 id=\"dataset\" style=\"color:#261b23; background:#a0bfb9; border:0.5px dotted;\"> \n    <center>Dataset\n        <a class=\"anchor-link\" href=\"#dataset\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","0409b9af":"Tensorflow [Image Segmentation Tutorial](https:\/\/www.tensorflow.org\/tutorials\/images\/segmentation)","2eda52a5":"<h1 id=\"reference\" style=\"color:#261b23; background:#a0bfb9; border:0.5px dotted;\"> \n    <center>Reference\n        <a class=\"anchor-link\" href=\"#reference\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","23651742":"<h1 id=\"predictions\" style=\"color:#261b23; background:#a0bfb9; border:0.5px dotted;\"> \n    <center>Predictions\n        <a class=\"anchor-link\" href=\"#predictions\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","a7bc2fa7":"<h1 id=\"training\" style=\"color:#261b23; background:#a0bfb9; border:0.5px dotted;\"> \n    <center>Training\n        <a class=\"anchor-link\" href=\"#training\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","8cbd5446":"<h1 id=\"display\" style=\"color:#261b23; background:#a0bfb9; border:0.5px dotted;\"> \n    <center>Display\n        <a class=\"anchor-link\" href=\"#display\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","8c9fdf94":"<div>\n    <img src=\"https:\/\/storage.googleapis.com\/kaggle-datasets-images\/112480\/268736\/795318437613c536d06f3e92f546e1ef\/dataset-cover.jpg\"\/>\n<\/div>"}}