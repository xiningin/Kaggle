{"cell_type":{"c91c2f8e":"code","f79aa2c2":"code","2657eb8c":"code","845fd0dc":"code","14ea6f7d":"code","6dd6e770":"code","fa716619":"code","b432220e":"code","8a66f995":"code","7d166339":"code","9770a4de":"code","cf14ef2d":"code","0c131309":"code","e59fbcac":"code","092e7760":"code","2afe5d41":"code","0fbaee35":"code","870811d7":"code","21653331":"code","6a27ea32":"code","1341717d":"code","0b6e0447":"code","d04dc5e4":"code","c79b149f":"code","e4d6fcad":"code","7a8c4cfc":"code","86c576e7":"code","211723a5":"code","ab12debd":"code","f42b92d9":"code","777a102c":"code","3c32d7b6":"code","e83215c1":"code","948df714":"code","379de69d":"code","fe676dc6":"code","19dcc34c":"code","9ce2aeba":"code","4395b827":"code","cf31cabd":"code","6baf7a57":"code","399949b1":"code","553348c7":"code","170d7010":"code","591c2c47":"code","ea1b4dfd":"code","6a05ddd6":"code","e3adf3cc":"code","967fb0e6":"code","77ff79a9":"code","536c2c29":"code","b9f98a8e":"code","6420e0ed":"code","de85140f":"code","6187320b":"code","2ba278dd":"code","79ab519b":"code","e0980d23":"markdown","1148f84a":"markdown","97bd8cf4":"markdown","2d40bf65":"markdown","c05e0e18":"markdown","dc115f7e":"markdown","7a960145":"markdown","f21590c0":"markdown","333addd9":"markdown","8f1c12bb":"markdown","37a158e3":"markdown","6df1f06c":"markdown","605d7cce":"markdown","abc42a07":"markdown","b28378ae":"markdown","2e8ec5ce":"markdown","4389b26c":"markdown","abf389ff":"markdown","865eb6f0":"markdown","6ff860be":"markdown","3cc930ae":"markdown","13081f0e":"markdown","f8939b4d":"markdown","f42d21c7":"markdown","2ad9f2d8":"markdown","d4bf1640":"markdown","7016bbbf":"markdown","9f363f94":"markdown","5e34cca3":"markdown","ebcec9cf":"markdown"},"source":{"c91c2f8e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f79aa2c2":"print(\"You've successfully run some Python code\")\nprint(\"Congratulations! you can run python on kaggle \")","2657eb8c":"from learntools.core import binder; binder.bind(globals())\nfrom learntools.python.ex1 import *\nprint(\"Setup complete! You're ready to start question 0.\")","845fd0dc":"# create a variable called color with an appropriate value on the line below\n# (Remember, strings in Python must be enclosed in 'single' or \"double\" quotes)\n# Check your answer\ncolor = \"blue\"\nq0.check()","14ea6f7d":"#q0.hint()\n#q0.solution()","6dd6e770":"pi = 3.14159 # approximate\ndiameter = 3\n\n# Create a variable called 'radius' equal to half the diameter\nradius = 0.5 * diameter\n\n# Create a variable called 'area', using the formula for the area of a circle: pi times the radius squared\narea = pi * (radius*radius) \n\n# Check your answer\nq1.check()","fa716619":"# Uncomment and run the lines below if you need help.\n#q1.hint()\n#q1.solution()","b432220e":"########### Setup code - don't touch this part ######################\n# If you're curious, these are examples of lists. We'll talk about \n# them in depth a few lessons from now. For now, just know that they're\n# yet another type of Python object, like int or float.\na = [1, 2, 3]\nb = [3, 2, 1]\nq2.store_original_ids()\n######################################################################\n\n# Your code goes here. Swap the values to which a and b refer.\n# If you get stuck, you can always uncomment one or both of the lines in\n# the next cell for a hint, or to peek at the solution.\na, b = b, a\n\n######################################################################\n\n# Check your answer\nq2.check()","8a66f995":"(5 - 3) \/\/ 2","7d166339":"#q3.a.hint()","9770a4de":"# Check your answer (Run this code cell to receive credit!)\nq3.a.solution()","cf14ef2d":"8 - (3 * 2) - (1 + 1)","0c131309":"#q3.b.hint()","e59fbcac":"# Check your answer (Run this code cell to receive credit!)\nq3.b.solution()","092e7760":"# Variables representing the number of candies collected by alice, bob, and carol\nalice_candies = 121\nbob_candies = 77\ncarol_candies = 109\n\n# Your code goes here! Replace the right-hand side of this assignment with an expression\n# involving alice_candies, bob_candies, and carol_candies\nto_smash = (alice_candies + bob_candies + carol_candies)% 2\n\n# Check your answer\nq4.check()","2afe5d41":"#q4.hint()\n#q4.solution()","0fbaee35":"from learntools.core import binder; binder.bind(globals())\nfrom learntools.python.ex6 import *\nprint('Setup complete.')","870811d7":"a = \"\"\nlength = len(a)\nq0.a.check()","21653331":"b = \"it's ok\"\nlength = len(b)\nq0.b.check()","6a27ea32":"c = 'it\\'s ok'\nlength = len(c)\nq0.c.check()","1341717d":"d = \"\"\"hey\"\"\"\nlength = len(d)\nq0.d.check()","0b6e0447":"e = '\\n'\nlength = len(e)\nq0.e.check()","d04dc5e4":"def is_valid_zip(zip_code):\n    \"\"\"Returns whether the input string is a valid (5 digit) zip code\n    \"\"\"\n    if len(zip_code) == 5 and zip_code.isdecimal():\n        return True\n    return False\n# Check your answer\nq1.check()","c79b149f":"def word_search(documents, keyword):\n    # list to hold the indices of matching documents\n    indices = [] \n    # Iterate through the indices (i) and elements (doc) of documents\n    for i, doc in enumerate(documents):\n        # Split the string doc into a list of words (according to whitespace)\n        tokens = doc.split()\n        # Make a transformed list where we 'normalize' each word to facilitate matching.\n        # Periods and commas are removed from the end of each word, and it's set to all lowercase.\n        normalized = [token.rstrip('.,').lower() for token in tokens]\n        # Is there a match? If so, update the list of matching indices.\n        if keyword.lower() in normalized:\n            indices.append(i)\n    return indices\n\n# Check your answer\nq2.check()","e4d6fcad":"q2.hint()\nq2.solution()","7a8c4cfc":"def multi_word_search(doc_list, keywords):\n\n    keyword_to_indices = {}\n    for keyword in keywords:\n        keyword_to_indices[keyword] = word_search(doc_list, keyword)\n    return keyword_to_indices\n\n# Check your answer\nq3.check()","86c576e7":"q3.solution()","211723a5":"from learntools.core import binder; binder.bind(globals())\nfrom learntools.python.ex3 import *\nprint('Setup complete.')","ab12debd":"# Your code goes here. Define a function called 'sign'\ndef sign(num):\n    if num < 0:\n        return -1\n    elif num > 0:\n        return 1\n    else:\n        return 0\n# Check your answer\nq1.check()","f42b92d9":"def to_smash(total_candies):\n    \"\"\"Return the number of leftover candies that must be smashed after distributing\n    the given number of candies evenly between 3 friends.\n    \n    >>> to_smash(91)\n    1\n    \"\"\"\n    print(\"Splitting\", total_candies, \"candies\")\n    return total_candies % 3\n\nto_smash(91)","777a102c":"to_smash(1)\n","3c32d7b6":"def to_smash(total_candies):\n    \"\"\"Return the number of leftover candies that must be smashed after distributing\n    the given number of candies evenly between 3 friends.\n    \n    >>> to_smash(91)\n    1\n    \"\"\"\n    if total_candies == 1:\n        print(\"Splitting\", total_candies, \"candy\")\n        return total_candies % 3\n    else:\n        print(\"Splitting\", total_candies, \"candies\")\n        return total_candies % 3\n\nto_smash(91)\nto_smash(1)","e83215c1":"# Check your answer (Run this code cell to receive credit!)\nq2.solution()","948df714":"def prepared_for_weather(have_umbrella, rain_level, have_hood, is_workday):\n    # Don't change this code. Our goal is just to find the bug, not fix it!\n    return have_umbrella or rain_level < 5 and have_hood or not rain_level > 0 and is_workday\n\n# Change the values of these inputs so they represent a case where prepared_for_weather\n# returns the wrong answer.\nhave_umbrella = False\nrain_level = 0.0\nhave_hood = False\nis_workday = False\n\n# Check what the function returns given the current values of the variables above\nactual = prepared_for_weather(have_umbrella, rain_level, have_hood, is_workday)\nprint(actual)\n\n# Check your answer\nq3.check()","379de69d":"def is_negative(number):\n    if number < 0:\n        return True\n    else:\n        return False\n\ndef concise_is_negative(number):\n    return number < 0\n\n# Check your answer\nq4.check()","fe676dc6":"def onionless(ketchup, mustard, onion):\n    \"\"\"Return whether the customer doesn't want onions.\n    \"\"\"\n    return not onion\ndef ketchupless(ketchup, mustard, onion):\n    \"\"\"Return whether the customer doesn't want onions.\n    \"\"\"\n    return not ketchup\ndef mustardless(ketchup, mustard, onion):\n    \"\"\"Return whether the customer doesn't want onions.\n    \"\"\"\n    return not mustard","19dcc34c":"def wants_all_toppings(ketchup, mustard, onion):\n    \"\"\"Return whether the customer wants \"the works\" (all 3 toppings)\n    \"\"\"\n\n    return ketchup and mustard and onion\n\n# Check your answer\nq5.a.check()","9ce2aeba":"#q5.a.hint()\nq5.a.solution()","4395b827":"#q5.a.hint()\nq5.a.solution()","cf31cabd":"def wants_plain_hotdog(ketchup, mustard, onion):\n    \"\"\"Return whether the customer wants a plain hot dog with no toppings.\n    \"\"\"\n    return not ketchup and not mustard and not onion\n\n# Check your answer\nq5.b.check()","6baf7a57":"def exactly_one_sauce(ketchup, mustard, onion):\n    \"\"\"Return whether the customer wants either ketchup or mustard, but not both.\n    (You may be familiar with this operation under the name \"exclusive or\")\n    \"\"\"\n    return (ketchup and not mustard) or (mustard and not ketchup)\n\n# Check your answer\nq5.c.check()","399949b1":"def exactly_one_topping(ketchup, mustard, onion):\n    \"\"\"Return whether the customer wants exactly one of the three available toppings\n    on their hot dog.\n    \"\"\"\n    return (int(ketchup) + int(mustard) + int(onion)) == 1\n\n# Check your answer\nq6.check()","553348c7":"from learntools.core import binder; binder.bind(globals())\nfrom learntools.python.ex4 import *\nprint('Setup complete.')","170d7010":"def select_second(L):\n    \"\"\"Return the second element of the given list. If the list has no second\n    element, return None.\n    \"\"\"\n    if len(L) < 2:\n        return None\n    else:\n        return L[1]\n\n# Check your answer\nq1.check()","591c2c47":"def losing_team_captain(teams):\n    \"\"\"Given a list of teams, where each team is a list of names, return the 2nd player (captain)\n    from the last listed team\n    \"\"\"\n    return teams[-1][1]\n\n# Check your answer\nq2.check()","ea1b4dfd":"def purple_shell(racers):\n    \"\"\"Given a list of racers, set the first place racer (at the front of the list) to last\n    place and vice versa.\n    \n    >>> r = [\"Mario\", \"Bowser\", \"Luigi\"]\n    >>> purple_shell(r)\n    >>> r\n    [\"Luigi\", \"Bowser\", \"Mario\"]\n    \"\"\"\n    racers[-1] , racers[0] = racers[0] , racers [-1]\n\n# Check your answer\nq3.check()","6a05ddd6":"a = [1, 2, 3]\nb = [1, [2, 3]]\nc = []\nd = [1, 2, 3][1:]\n\n# Put your predictions in the list below. Lengths should contain 4 numbers, the\n# first being the length of a, the second being the length of b and so on.\nlengths = [3,2,0,2]\n\n# Check your answer\nq4.check()","e3adf3cc":"def fashionably_late(arrivals, name):\n    \"\"\"Given an ordered list of arrivals to the party and a name, return whether the guest with that\n    name was fashionably late.\n    \"\"\"\n    order = arrivals.index(name)\n    return order >= len(arrivals)\/2 and order != len(arrivals) - 1\n        \n\n# Check your answer\nq5.check()","967fb0e6":"def round_to_two_places(num):\n    \"\"\"Return the given number rounded to two decimal places. \n    \n    >>> round_to_two_places(3.14159)\n    3.14\n    \"\"\"\n    return round(num, 2)\n    # (\"pass\" is a keyword that does literally nothing. We used it as a placeholder\n    # because after we begin a code block, Python requires at least one line of code)\n    pass\n\n# Check your answer\nq1.check()","77ff79a9":"# Put your test code here\nround(338424, -1)\n","536c2c29":"# Check your answer (Run this code cell to receive credit!)\nq2.solution()\n","b9f98a8e":"def to_smash(total_candies, n_friends=3):\n    return total_candies % n_friends\nq3.check()\n","6420e0ed":"#q3.hint()","de85140f":"#q3.solution()\n","6187320b":"#ruound_to_two_places(9.9999)","2ba278dd":"#x = -10\n#y = 5\n# # Which of the two variables above has the smallest absolute value?\n#smallest_abs = min(abs(x, y))","79ab519b":"# def f(x):\n#     y = abs(x)\n# return y\n\n# print(f(5))","e0980d23":"# 0c","1148f84a":"# 6.","97bd8cf4":"# 3.","2d40bf65":"# 3.","c05e0e18":"# 1.","dc115f7e":"# 2.","7a960145":"# 5c.","f21590c0":"# 1.","333addd9":"# 2","8f1c12bb":"# 1.","37a158e3":"# 2.","6df1f06c":"# Exercise 4 : Lists in python","605d7cce":"# Exercise 5: Functions and Getting Help in python ","abc42a07":"# 0e","b28378ae":"# 1","2e8ec5ce":"# Exercise 3: Booleans and Conditional statement in python","4389b26c":"# 2.","abf389ff":"# 3.","865eb6f0":"# 0a.","6ff860be":"# 5.\n","3cc930ae":"# 5a.","13081f0e":"# 4.","f8939b4d":"# Exercise 1 : Syntax, Variables, and Numbers in python","f42d21c7":"# Exercise 2: Strings and Dictionaries in python","2ad9f2d8":"# 4.\n","d4bf1640":"# 3.","7016bbbf":"# 4.","9f363f94":"# 0d","5e34cca3":"# 0b","ebcec9cf":"# 5b."}}