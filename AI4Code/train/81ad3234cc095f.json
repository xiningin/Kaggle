{"cell_type":{"41114b58":"code","36320ebd":"code","f20d389f":"code","ad7f8bd2":"code","74674d55":"code","1e01a9b7":"code","7c6b9dc4":"code","93c931a2":"code","1e2fe322":"code","a7732291":"code","8bf5752b":"code","d971fb08":"code","c869448a":"code","8ca1c514":"code","9858c3ca":"code","0260dbde":"code","4614b6e2":"code","a820092d":"code","5b07b95d":"code","b2ce8b48":"code","ec27bfb2":"code","0e29cd7e":"code","1a6356de":"code","bae400f7":"code","c34cabff":"code","3b518f34":"code","27bf9b18":"code","528ecfed":"code","4a54ca8a":"code","60ce086f":"code","486633e7":"code","e9e4bcd6":"code","05dfbc97":"code","df6c8323":"code","a63bdb91":"code","f6733d26":"code","57ace0e6":"code","588cbed2":"code","89df9f8d":"code","15dbf8da":"markdown","2b367bf6":"markdown","d2e657ea":"markdown","369b6f95":"markdown","462b1767":"markdown"},"source":{"41114b58":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","36320ebd":"from sklearn import datasets\nimport matplotlib.pyplot as plt\nimport numpy as np, pandas as pd, math\nfrom sklearn.linear_model import LogisticRegression ","f20d389f":"np.random.seed(22)\n\nmeans = [[2, 2], [4, 2]]\ncov = [[.3, .2], [.2, .3]]\nN = 20\nX0 = np.random.multivariate_normal(means[0], cov, N) # class 1\nX1 = np.random.multivariate_normal(means[1], cov, N) # class -1 \nX = np.concatenate((X0.T, X1.T), axis = 1) # all data \ny = np.concatenate((np.ones((1, N)), -1*np.ones((1, N))), axis = 1) # labels ","ad7f8bd2":"y","74674d55":"X","1e01a9b7":"plt.figure(figsize=(10,10))","7c6b9dc4":"plt.plot(X0[:, 0], X0[:, 1], 'b^', markersize = 4, alpha = .8)\nplt.plot(X1[:, 0], X1[:, 1], 'go', markersize = 4, alpha = .8)\nplt.plot([3, 3.1], [0, 3.5], lw=10, color=\"darkorange\")\n\nplt.plot([1.18070687, 4.28018474], [0, 3.8], lw=1, color=\"green\") # Run 1\nplt.plot([1.35426177, 3.87462372], [0, 3.8], lw=1, color=\"blue\") # Run 2\nplt.axis('equal')\nplt.xlabel('x1')\nplt.ylabel('x2')\nplt.plot()\nplt.show()","93c931a2":"# Xbar \nX = np.concatenate((np.ones((1, 2*N)), X), axis = 0)\nX","1e2fe322":"def h(w, x):    \n    return np.sign(np.dot(w.T, x))\n\ndef has_converged(X, y, w):    \n    return np.array_equal(h(w, X), y) \n\ndef perceptron(X, y, w_init):\n    w = [w_init]\n    N = X.shape[1]\n    d = X.shape[0]\n    mis_points = []\n    n_iteration = 0\n    while True:\n        # mix data \n        mix_id = np.random.permutation(N)\n        for i in range(N):\n            xi = X[:, mix_id[i]].reshape(d, 1)\n            yi = y[0, mix_id[i]]\n            if h(w[-1], xi)[0] != yi: # misclassified point\n                mis_points.append(mix_id[i])\n                w_new = w[-1] + yi*xi \n                w.append(w_new)\n            n_iteration = n_iteration + 1\n                \n        if has_converged(X, y, w[-1]) or n_iteration > 100:\n            print(\"Converged at {} iteration\".format(n_iteration))\n            break\n    return (w, mis_points)","a7732291":"d = X.shape[0]\nw_init = np.random.randn(d, 1)\n(w, m) = perceptron(X, y, w_init)","8bf5752b":"print(w[-1])","d971fb08":"w0 = w[-1][0]\nw1 = w[-1][1]\nw2 = w[-1][2]\nx2 = np.array([0, 3.8])\nx1 = (-w0 - w2*x2)\/w1\nprint(x1, x2)","c869448a":"X = np.array([[0.50, 0.75, 1.00, 1.25, 1.50, 1.75, 1.75, 2.00, 2.25, 2.50, \n              2.75, 3.00, 3.25, 3.50, 4.00, 4.25, 4.50, 4.75, 5.00, 5.50]])\ny = np.array([0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1])\n\n# extended data \nX = np.concatenate((np.ones((1, X.shape[1])), X), axis = 0)\nX","8ca1c514":"def sigmoid(s):\n    return 1\/(1 + np.exp(-s))\n\ndef logistic_sigmoid_regression(X, y, w_init, eta, tol = 1e-4, max_count = 10000):\n    w = [w_init]    \n    it = 0\n    N = X.shape[1]\n    d = X.shape[0]\n    count = 0\n    check_w_after = 20\n    while count < max_count:\n        # mix data \n        mix_id = np.random.permutation(N)\n        for i in mix_id:\n            xi = X[:, i].reshape(d, 1)\n            yi = y[i]\n            zi = sigmoid(np.dot(w[-1].T, xi))\n            w_new = w[-1] + eta*(yi - zi)*xi\n            count += 1\n            # stopping criteria\n            if count%check_w_after == 0:                \n                if np.linalg.norm(w_new - w[-check_w_after]) < tol:\n                    return w\n            w.append(w_new)\n    return w\neta = .05 \nd = X.shape[0]\nw_init = np.random.randn(d, 1)\n\nw = logistic_sigmoid_regression(X, y, w_init, eta)\nprint(w[-1])","9858c3ca":"X0 = X[1, np.where(y == 0)][0]\ny0 = y[np.where(y == 0)]\nX1 = X[1, np.where(y == 1)][0]\ny1 = y[np.where(y == 1)]\n\nprint(X0, y0)\nprint(X1, y1)","0260dbde":"plt.plot(X0, y0, 'ro', markersize = 8)\nplt.plot(X1, y1, 'bs', markersize = 8)\n\nxx = np.linspace(0, 6, 1000)\nw0 = w[-1][0][0]\nw1 = w[-1][1][0]\nthreshold = -w0\/w1\nyy = sigmoid(w0 + w1*xx)\nplt.axis([-2, 8, -1, 2])\nplt.plot(xx, yy, 'g-', linewidth = 2)\nplt.plot(threshold, .5, 'y^', markersize = 8)\nplt.xlabel('studying hours')\nplt.ylabel('predicted probability of pass')\nplt.grid()\nplt.show()","4614b6e2":"pdfBreast = pd.read_csv(\"\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv\")","a820092d":"pdfBreast.shape","5b07b95d":"pdfBreast.head()","b2ce8b48":"pdfBreast.describe()","ec27bfb2":"pdfBreast.columns","0e29cd7e":"lsCol = pdfBreast.columns\nftCol = [c for c in lsCol if c not in [\"id\", \"diagnosis\", \"Unnamed: 32\"]]\nlbCol = \"diagnosis\"","1a6356de":"ftCol","bae400f7":"data = pdfBreast[ftCol].values\nlabel = (pdfBreast[lbCol]=='M').values","c34cabff":"# Area Mean vs Label\ntumorSize = pdfBreast[\"radius_mean\"].values","3b518f34":"plt.figure(figsize=(10, 5))\nplt.plot(tumorSize, label, 'bo')\n# plt.axis([140, 190, 45, 75])\nplt.xlabel('Tumor Size')\nplt.ylabel('Malignant')\nplt.grid(True)\nplt.show()","27bf9b18":"# TODO:\nlogReg = LogisticRegression()\nlogReg.fit(tumorSize.reshape(-1, 1), label)","528ecfed":"X_new = np.linspace(0, 30, 100).reshape(-1, 1)\ny_proba = logReg.predict_proba(X_new)\nplt.plot(X_new, y_proba[:, 1], \"g-\", label=\"Predicting\")\nplt.plot(tumorSize, label, 'bo')\n# plt.axis([140, 190, 45, 75])\nplt.xlabel('Tumor Size')\nplt.ylabel('Malignant')\nplt.grid(True)\nplt.show()","4a54ca8a":"pdfTitanic = pd.read_csv(\"\/kaggle\/input\/titanic\/train_and_test2.csv\")","60ce086f":"pdfTitanic.shape","486633e7":"pdfTitanic.head()","e9e4bcd6":"pdfTitanic.describe()","05dfbc97":"lsCol = [c for c in pdfTitanic.columns if \"zero\" not in c]\nlsCol","df6c8323":"pdfData = pdfTitanic[lsCol]\npdfData","a63bdb91":"data = pdfData[[c for c in lsCol if c != '2urvived']].values\nlabel = pdfData[['2urvived']]","f6733d26":"predictCol = 'Sex'\nX = pdfData[[predictCol]]\n\npredictCols = ['Sex', 'Age']\nXs = pdfData[predictCols]","57ace0e6":"plt.figure(figsize=(10, 5))\nplt.plot(X, label, 'bo')\n# plt.axis([140, 190, 45, 75])\nplt.xlabel(predictCol)\nplt.ylabel('Survivided')\nplt.grid(True)\nplt.show()","588cbed2":"logReg = LogisticRegression()\n#logReg.fit(X, label)\nlogReg.fit(Xs, label)","89df9f8d":"#X_new = np.linspace(0, np.max(X), 100).reshape(-1, 1)\n#y_proba = logReg.predict_proba(X_new)\n#plt.plot(X_new, y_proba[:, 1], \"g-\", label=\"Predicting\")\nplt.plot(Xs, label, 'bo')\n\nX_one = [[1, 60]]\ny_predict_one = logReg.predict(X_one)\n\n#plt.plot(X_one, y_predict_one)\n\n# plt.axis([140, 190, 45, 75])\nplt.xlabel(predictCol)\nplt.ylabel('Survivided')\nplt.grid(True)\nplt.show()\n\nprint(y_predict_one)","15dbf8da":"### 1. Perceptron Learning Algorithm","2b367bf6":"### 2. Titanic Survivor","d2e657ea":"### 1. Breast Cancer","369b6f95":"## Practice","462b1767":"### 2. Logistic Regression"}}