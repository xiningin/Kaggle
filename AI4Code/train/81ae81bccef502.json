{"cell_type":{"6da55533":"code","07129756":"code","ed800e15":"code","3e0db0e2":"code","8fb09bb9":"code","516ecd48":"code","6f46fbb7":"code","f6a6727f":"code","deba4df1":"code","6489b6d9":"markdown","ed66ff3b":"markdown"},"source":{"6da55533":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07129756":"import pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import GridSearchCV","ed800e15":"data= pd.read_csv(\"..\/input\/titanic-data\/train.csv\")\ntest1= pd.read_csv(\"..\/input\/titanic-data\/test.csv\")\nprint('train1: %s, test1 %s' %(str(data.shape), str(test1.shape)) )\nprint(data.info())\ndata.head()","3e0db0e2":"# feature engineering\ndata.drop(['Cabin','Name','Ticket'],inplace=True,axis=1)\n","8fb09bb9":"# missing value\ndata['Age']=data['Age'].fillna(data['Age'].mean())\ndata=data.dropna()# drop Embarked 2 missing row.\ndata.info()","516ecd48":"# changing object into int64\nlabels=data['Embarked'].unique().tolist()\ndata.loc[:,'Embarked']=data['Embarked'].apply(lambda x : labels.index(x))# s=0,c=1,q=2\ndata.loc[:,'Sex']=(data['Sex']=='male').astype('int')# male=1,female=0\ndata.head()","6f46fbb7":"x=data.iloc[:,data.columns !='Survived']\ny=data.iloc[:,data.columns =='Survived']\ny.head()","f6a6727f":"xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.3)\nfor i in [xtrain,xtest,ytrain,ytest]:\n    i.index=range(i.shape[0])# range(len(i))","deba4df1":"xtrain.head()","6489b6d9":"# manipulate data","ed66ff3b":"# input data"}}