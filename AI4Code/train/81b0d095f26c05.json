{"cell_type":{"367a21e2":"code","621e4364":"code","1267d64e":"code","3ebdcf6e":"code","7778e114":"code","d0907d49":"code","9474efd2":"code","0a6c436e":"code","4835392c":"code","37d49304":"code","a160d485":"code","431b7915":"code","8606414e":"code","2f7a03cb":"code","4f82284c":"code","29d5af05":"code","a2963f9e":"code","9528b47d":"code","24e13328":"code","3a2d5366":"code","93450ea0":"code","4bd9e2f6":"code","3af2d64b":"code","c5bfdb6d":"code","f34096fa":"code","0419af0b":"code","ce0c86fb":"code","b7579aa3":"code","6cf798ef":"code","1c2e7ba6":"code","11910d3b":"code","d8febb8c":"code","e450c03c":"code","fbdcc4b6":"code","b4414f40":"code","4fd1d7f1":"code","149ec27d":"code","3346152c":"code","ce81a174":"code","ce796968":"code","ef605f5d":"code","c5e4e5ab":"code","6f90a68f":"code","cf8819bd":"code","b5e93c02":"code","df9479d6":"code","329fc766":"code","d6d49d0e":"code","0b2688e0":"code","566dfa51":"code","a9679197":"code","fe77e78f":"code","61377eb7":"code","b2588b42":"code","19b2e10e":"code","406b5d27":"code","91fe8cb9":"code","b45f69ef":"code","5b3c34e1":"code","dc7d7ceb":"code","74ef6b9f":"code","50e77a94":"code","a589e998":"code","52b1a479":"code","fa7fd57a":"code","e596eacb":"code","fdd507e8":"code","9a02fa9a":"code","1702cd00":"code","8e64f0c9":"code","dc40267c":"code","dea52cd5":"code","00b11a7b":"code","13ddcedc":"code","c92fdfa2":"code","21595fe4":"code","0f3e99d6":"code","367facae":"code","98560176":"code","3854e05f":"code","73a5b8d5":"code","34c35dfa":"code","2f8d82b3":"code","721bbb0d":"code","db3dc8ed":"code","13d4d0dc":"code","062c1e84":"code","79a6584a":"code","5ad7e04f":"code","403209ef":"code","e26791bf":"code","feb78c5e":"code","ebff3202":"code","c7ea74ce":"code","bc289d4f":"code","3caf21d3":"code","957df46d":"code","60f94354":"code","bb61b0cf":"code","21b4dc2b":"code","2fd7486e":"code","d97b61a2":"code","153f33f7":"code","b755a683":"code","f4103d30":"code","cbfc5fac":"code","15269a15":"code","4ccb03cb":"code","3e77c805":"code","2c2ba2c9":"code","13d34d93":"code","ae2c8252":"code","861e48d4":"code","7878a690":"code","7bbdc583":"code","1435b697":"code","c20f2d7f":"code","31bebe65":"code","db8b244c":"code","0c9c5867":"code","48821443":"code","05ae9a57":"code","f02cbb5b":"code","72212aca":"code","38632e68":"code","61f705c7":"code","b61da45e":"code","12626644":"code","af7209ef":"code","c67ed2a6":"code","c9ec9a16":"code","36c85bd7":"markdown","db1f980a":"markdown","6c83ddf3":"markdown","1f293bc9":"markdown","7b5dd019":"markdown","1b3a690a":"markdown"},"source":{"367a21e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","621e4364":"import matplotlib.pyplot as plt","1267d64e":"import seaborn as sns","3ebdcf6e":"from sklearn.preprocessing import RobustScaler, StandardScaler, MinMaxScaler","7778e114":"from datetime import datetime","d0907d49":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u043c IQR\ndef IQR_outliers(i):\n    Q1=data[i].quantile(0.25)\n    Q3=data[i].quantile(0.75)\n    IQR=Q3-Q1\n    low=Q1-1.5*IQR\n    high=Q3+1.5*IQR\n    return (low,high)","9474efd2":"# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\nDATA_DIR = '\/kaggle\/input\/sf-scoring\/'\ndf_train = pd.read_csv(DATA_DIR +'\/train.csv')\ndf_test = pd.read_csv(DATA_DIR +'\/test.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","0a6c436e":"sample_submission.shape","4835392c":"df_test.shape","37d49304":"df_train.info()","a160d485":"df_train.head(5)","431b7915":"df_test.info()","8606414e":"sample_submission.head(5)\n","2f7a03cb":"sample_submission.info()","4f82284c":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0  # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['default'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","29d5af05":"import pandas_profiling","a2963f9e":"# pandas_profiling.ProfileReport(data)","9528b47d":"# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 education\ndata.info()","24e13328":"# \u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 client_id \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435\ndata.nunique(dropna=False)","3a2d5366":"# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 WOE (Weight of Evidence) \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 sex \n# female_non_default=data.groupby('sex')['default'].value_counts()[0]\n# female_default=data.groupby('sex')['default'].value_counts()[1]\n# male_non_default=data.groupby('sex')['default'].value_counts()[2]\n# male_default=data.groupby('sex')['default'].value_counts()[3]","93450ea0":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c WOE\n# df3=pd.DataFrame(np.array([[female_non_default,female_default],[male_non_default,male_default]]),columns=['non_default','default'],index=['female','male'])","4bd9e2f6":"# df3['percent_non_default']=df3['non_default']\/df3['non_default'].sum()\n# df3['percent_default']=df3['default']\/df3['default'].sum()\n# df3['WOE']=np.log(df3['percent_non_default']\/df3['percent_default'])","3af2d64b":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a IV (Information Value) \u0432 \u043d\u0430\u0448 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\n# df3['IV']=(df3['percent_non_default']-df3['percent_default'])*df3['WOE']\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0432\u0430 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 WOE \u0438 IV\n# dict_of_woe_sex=dict(df3['WOE'])\n# dict_of_iv_sex=dict(df3['IV'])","c5bfdb6d":"# \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 WOE \u0438 IV \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\n\n# def add_woe_sex(string):\n#     if string=='F':\n#         return dict_of_woe_sex['female']\n#     elif string=='M':\n#         return dict_of_woe_sex['male']\n\n# def add_iv_sex(string):\n#     if string=='F':\n#         return dict_of_iv_sex['female']\n#     elif string=='M':\n#         return dict_of_iv_sex['male']\n        ","f34096fa":"# \u042f \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 WOE \u0438 IV \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 sex \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442, \u0442.\u043a. \n# \u044d\u0442\u043e \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438\n# data['WOE_sex']=data['sex'].apply(add_woe_sex)\n# data['IV_sex']=data['sex'].apply(add_iv_sex)","0419af0b":"# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0434\u0430\u0442\u0443 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 datetime\ndata['app_date']=data['app_date'].apply(lambda x: datetime.strptime(x,'%d%b%Y')) ","ce0c86fb":"# \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043c \u0438\u0437 \u0434\u0430\u0442\u044b \u0433\u043e\u0434, \u043c\u0435\u0441\u044f\u0446 \u0438 \u0434\u0435\u043d\u044c\ndata['app_year']=data['app_date'].apply(lambda x: x.year)\ndata['app_month']=data['app_date'].apply(lambda x: x.month)\ndata['app_day']=data['app_date'].apply(lambda x: x.day)\ndata['app_day_of_week']=data['app_date'].apply(lambda x: x.weekday())","b7579aa3":"# \u0412\u0432\u0435\u0434\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043e\u0442 \u043f\u0435\u0440\u0432\u043e\u0439 \u0434\u0430\u0442\u044b \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0434\u043e \u0434\u0430\u0442\u044b \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438 \ndata['timedelta']=data['app_date']-data['app_date'].min()\ndata['timedelta']=data['timedelta'].apply(lambda x: x.days)\n","6cf798ef":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0432\u0430 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u044d\u0442\u043e\u0442 \u0434\u0435\u043d\u044c\nnumber_of_clients=dict(data.groupby('app_date')['client_id'].count())\ndictionary_of_defaults=dict(data.groupby('app_date')['default'].value_counts()[:,1])","1c2e7ba6":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0432\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u0434\u0435\u043d\u044c \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u0434\u0435\u043d\u044c\ndata['number_of_clients']=data['app_date'].apply(lambda x: number_of_clients[x])\ndata['number_of_default']=data['app_date'].apply(lambda x: dictionary_of_defaults[x])","11910d3b":"# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c\ndata['percent_of_default']=(data['number_of_default']\/data['number_of_clients'])*100","d8febb8c":"# \u0413\u043e\u0434 \u0432\u043e \u0432\u0441\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 (2014), \u0443\u0434\u0430\u043b\u0438\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \ndata.drop(columns=['app_year'], axis=1, inplace=True)","e450c03c":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043a \u0440\u0430\u0441\u0447\u0435\u0442\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 WOE \u0438 IV \u0434\u043b\u044f \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 age (\u044d\u0442\u0443 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043d\u0443\u0436\u043d\u043e\n# \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 \u0431\u0438\u043d\u044b)\ndf=data[['age','default']].sort_values('age',ascending=True)\n\nlen1=len(df[(df['age']>=21)&(df['age']<=27)])\nlen2=len(df[(df['age']>=28)&(df['age']<=35)])\nlen3=len(df[(df['age']>=36)&(df['age']<=44)])\nlen4=len(df[(df['age']>=45)&(df['age']<=52)])\nlen5=len(df[(df['age']>=53)&(df['age']<=60)])\nlen6=len(df[df['age']>=61])\nsum=len1+len2+len3+len4+len5+len6\n\nprint(\"Len1={},Len2={},Len3={},Len4={},Len5={},Len6={},Sum={}\".format(len1,len2,len3,len4,len5,len6,sum))\n\ngroup1=[df.query('21<=age<=27')['default'].value_counts()[0],df.query('21<=age<=27')['default'].value_counts()[1]]\ngroup2=[df.query('28<=age<=35')['default'].value_counts()[0],df.query('28<=age<=35')['default'].value_counts()[1]]\ngroup3=[df.query('36<=age<=44')['default'].value_counts()[0],df.query('36<=age<=44')['default'].value_counts()[1]]\ngroup4=[df.query('45<=age<=52')['default'].value_counts()[0],df.query('45<=age<=52')['default'].value_counts()[1]]\ngroup5=[df.query('53<=age<=60')['default'].value_counts()[0],df.query('53<=age<=60')['default'].value_counts()[1]]\ngroup6=[df.query('61<=age')['default'].value_counts()[0],df.query('61<=age')['default'].value_counts()[1]]\n\ndf2=pd.DataFrame(np.array([group1,group2,group3,group4,group5,group6]),columns=['non-default','default'])\n\ndf2['percent_of_non_default']=df2['non-default']\/(df2['non-default'].sum())\ndf2['percent_of_default']=df2['default']\/(df2['default'].sum())\ndf2['WOE']=np.log(df2['percent_of_non_default']\/df2['percent_of_default'])\n\ndf2['IV']=(df2['percent_of_non_default']-df2['percent_of_default'])*df2['WOE']","fbdcc4b6":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0432\u0430 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 WOE \u0438 IV \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 age\ndict_of_woe=dict(df2['WOE'])\ndict_of_iv=dict(df2['IV'])","b4414f40":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 WOE \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 age \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndef age_woe(some_age):\n    if 21<=some_age<=27:\n        return dict_of_woe[0]\n    elif 28<=some_age<=35:\n        return dict_of_woe[1]\n    elif 36<=some_age<=44:\n        return dict_of_woe[2]\n    elif 45<=some_age<=52:\n        return dict_of_woe[3]\n    elif 53<=some_age<=60:\n        return dict_of_woe[4]\n    elif 61<=some_age:\n        return dict_of_woe[5] ","4fd1d7f1":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 IV \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 age \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndef age_iv(some_age):\n    if 21<=some_age<=27:\n        return dict_of_iv[0]\n    elif 28<=some_age<=35:\n        return dict_of_iv[1]\n    elif 36<=some_age<=44:\n        return dict_of_iv[2]\n    elif 45<=some_age<=52:\n        return dict_of_iv[3]\n    elif 53<=some_age<=60:\n        return dict_of_iv[4]\n    elif 61<=some_age:\n        return dict_of_iv[5] ","149ec27d":"# \u042f \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 WOE \u0438 IV \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 age \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442, \n# \u0442.\u043a. \u044d\u0442\u043e \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c\n# data['WOE_age']=data['age'].apply(age_woe)\n# data['age_iv']=data['age'].apply(age_iv)","3346152c":"# \u0424\u0443\u043d\u043a\u0438\u044f \u0441 \u0441\u0430\u0439\u0442\u0430 listendata.com \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 WOE \u0438 IV. \u0412 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u044f \u0431\u0443\u0434\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\n# \u0438\u043c\u0435\u043d\u043d\u043e \u044d\u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u044e\ndef iv_woe(data, target, bins=10, show_woe=False):\n    \n    #Empty Dataframe\n    newDF,woeDF = pd.DataFrame(), pd.DataFrame()\n    \n    #Extract Column Names\n    cols = data.columns\n    \n    #Run WOE and IV on all the independent variables\n    for ivars in cols[~cols.isin([target])]:\n        if (data[ivars].dtype.kind in 'bifc') and (len(np.unique(data[ivars]))>10):\n            binned_x = pd.qcut(data[ivars], bins,  duplicates='drop')\n            d0 = pd.DataFrame({'x': binned_x, 'y': data[target]})\n        else:\n            d0 = pd.DataFrame({'x': data[ivars], 'y': data[target]})\n        d = d0.groupby(\"x\", as_index=False).agg({\"y\": [\"count\", \"sum\"]})\n        d.columns = ['Cutoff', 'N', 'Events']\n        d['% of Events'] = np.maximum(d['Events'], 0.5) \/ d['Events'].sum()\n        d['Non-Events'] = d['N'] - d['Events']\n        d['% of Non-Events'] = np.maximum(d['Non-Events'], 0.5) \/ d['Non-Events'].sum()\n        d['WoE'] = np.log(d['% of Events']\/d['% of Non-Events'])\n        d['IV'] = d['WoE'] * (d['% of Events'] - d['% of Non-Events'])\n        d.insert(loc=0, column='Variable', value=ivars)\n        print(\"Information value of \" + ivars + \" is \" + str(round(d['IV'].sum(),6)))\n        temp =pd.DataFrame({\"Variable\" : [ivars], \"IV\" : [d['IV'].sum()]}, columns = [\"Variable\", \"IV\"])\n        newDF=pd.concat([newDF,temp], axis=0)\n        woeDF=pd.concat([woeDF,d], axis=0)\n\n        #Show WOE Table\n        if show_woe == True:\n            print(d)\n    return newDF, woeDF","ce81a174":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0432\u0430 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0439 \u0432\u044b\u0448\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\nDF_IV,DF_WOE=iv_woe(data,'default')","ce796968":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 WOE \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 sna \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndict_of_woe_sna=dict(DF_WOE[DF_WOE['Variable']=='sna']['WoE'])","ef605f5d":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 WOE \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 score_bki \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndict_of_woe_score_bki=dict(DF_WOE[DF_WOE['Variable']=='score_bki']['WoE'])\ndict_of_cut_off_score_bki=dict(DF_WOE[DF_WOE['Variable']=='score_bki']['Cutoff'])","c5e4e5ab":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440a WOE \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 sna \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndef add_woe_sna(n):\n    if n==1:\n        return dict_of_woe_sna[0]\n    elif n==2:\n        return dict_of_woe_sna[1]\n    elif n==3:\n        return dict_of_woe_sna[2]\n    elif n==4:\n        return dict_of_woe_sna[3]","6f90a68f":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440a WOE \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 score_bki \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndef add_woe_score_bki(k):\n    if dict_of_cut_off_score_bki[0].left<=k<=dict_of_cut_off_score_bki[0].right:\n        return dict_of_woe_score_bki[0]\n    elif dict_of_cut_off_score_bki[1].left<k<=dict_of_cut_off_score_bki[1].right:\n        return dict_of_woe_score_bki[1]\n    elif dict_of_cut_off_score_bki[2].left<k<=dict_of_cut_off_score_bki[2].right:\n        return dict_of_woe_score_bki[2]\n    elif dict_of_cut_off_score_bki[3].left<k<=dict_of_cut_off_score_bki[3].right:\n        return dict_of_woe_score_bki[3]\n    elif dict_of_cut_off_score_bki[4].left<k<=dict_of_cut_off_score_bki[4].right:\n        return dict_of_woe_score_bki[4]\n    elif dict_of_cut_off_score_bki[5].left<k<=dict_of_cut_off_score_bki[5].right:\n        return dict_of_woe_score_bki[5]\n    elif dict_of_cut_off_score_bki[6].left<k<=dict_of_cut_off_score_bki[6].right:\n        return dict_of_woe_score_bki[6]\n    elif dict_of_cut_off_score_bki[7].left<k<=dict_of_cut_off_score_bki[7].right:\n        return dict_of_woe_score_bki[7]\n    elif dict_of_cut_off_score_bki[8].left<k<=dict_of_cut_off_score_bki[8].right:\n        return dict_of_woe_score_bki[8]\n    elif dict_of_cut_off_score_bki[9].left<k<=dict_of_cut_off_score_bki[9].right:\n        return dict_of_woe_score_bki[9]","cf8819bd":"# \u042f \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0430 \u044d\u0442\u043e\u0442 \u043a\u0443\u0441\u043e\u043a \u043a\u043e\u0434\u0430, \u0442.\u043a. \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c\n# data['WOE_sna']=data['sna'].apply(add_woe_sna)","b5e93c02":"data['WOE_score_bki']=data['score_bki'].apply(add_woe_score_bki)","df9479d6":"data.head()","329fc766":"# data.drop(columns=['app_day_of_week'], inplace=True)","d6d49d0e":"data.drop(columns=['age'], inplace=True)","0b2688e0":"data.info()","566dfa51":"# \u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0435, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435\nnum_cols = ['score_bki', 'decline_app_cnt', 'bki_request_cnt', 'income','timedelta','number_of_clients','percent_of_default','number_of_default']\ncat_cols = ['education', 'first_time', 'sna', 'work_address', 'home_address', 'region_rating','app_day','app_month','app_day_of_week']\nbin_cols = ['sex','car', 'car_type', 'good_work', 'foreign_passport']","a9679197":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0442\u0435\u043f\u043b\u043e\u0432\u0443\u044e \u043a\u0430\u0440\u0442\u0443 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e, \u0447\u0442\u043e timedelta \u0441\u0438\u043b\u044c\u043d\u043e \n# \u0441\u043a\u043e\u0440\u0435\u043b\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043e \u0441 percent_of_default (\u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 -0.62). \n# \u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0441 \u0442\u0435\u0447\u0435\u043d\u0438\u0435\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0430\u0434\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n# \u041f\u0440\u0438\u0437\u043d\u0430\u043a number_of_clients \u0441\u0438\u043b\u044c\u043d\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d \u0441 number_of_default (0.87), \u0430 number_of_default \u0441\u0438\u043b\u044c\u043d\u043e \n# \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d \u0441 percent_of_default (0.52). \u0415\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u044d\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \n# \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442\u0441\u044f. \u041c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043d\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u044d\u0442\u043e\u0433\u043e \u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u043c\u0435\u0442\u043e\u0434 \u0433\u043b\u0430\u0432\u043d\u044b\u0445\n# \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (PCA).\nsns.heatmap(data[num_cols].corr().abs(), vmin=0, vmax=1)","fe77e78f":"# \u0421\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043a\u0430\u0442\u044c \u0433\u043b\u0430\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b\npca_columns=['number_of_clients','number_of_default','percent_of_default']\ncorrelation_matrix=data[pca_columns].corr().values","61377eb7":"# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u0430\nB=np.linalg.eig(correlation_matrix)\nB","b2588b42":"# \u0426\u0435\u043d\u0442\u0440\u0438\u0440\u0443\u0435\u043c \u0438 \u043d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nmean_1=data['number_of_clients'].mean()\nlen_1=np.linalg.norm(data['number_of_clients'])\ndata['number_of_clients']=data['number_of_clients'] - mean_1\ndata['number_of_clients']=data['number_of_clients']\/len_1\n\nmean_2=data['number_of_default'].mean()\nlen_2=np.linalg.norm(data['number_of_default'])\ndata['number_of_default']=data['number_of_default'] - mean_2\ndata['number_of_default']=data['number_of_default']\/len_2\n\nmean_3=data['percent_of_default'].mean()\nlen_3=np.linalg.norm(data['percent_of_default'])\ndata['percent_of_default']=data['percent_of_default'] - mean_3\ndata['percent_of_default']=data['percent_of_default']\/len_3","19b2e10e":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\ndata['pca_component']=B[1][0][0]*data['number_of_clients']+B[1][1][0]*data['number_of_default']+B[1][2][0]*data['percent_of_default']","406b5d27":"# data.drop(columns=['pca_component'], inplace=True)","91fe8cb9":"data.drop(columns=['percent_of_default','number_of_default','number_of_clients'],axis=1,inplace=True)","b45f69ef":"# data[num_cols].corr()","5b3c34e1":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u0442\u0430\u0440\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n# data.drop(columns=['percent_of_default','number_of_default','number_of_clients'],axis=1,inplace=True)","dc7d7ceb":"# \u041d\u0430\u0440\u0438\u0441\u0443\u0435\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfor i in ['score_bki','decline_app_cnt','bki_request_cnt','income','timedelta','pca_component']:\n    plt.figure()\n    sns.distplot(data[i].dropna(), kde = False, rug=False)\n    plt.title(i)\n    plt.show()","74ef6b9f":"# \u041f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \"\u0442\u044f\u0436\u0435\u043b\u044b\u0439\" \u043f\u0440\u0430\u0432\u044b\u0439 \u0445\u0432\u043e\u0441\u0442\ndata['decline_app_cnt']=data['decline_app_cnt'].apply(lambda x: np.log(x+1))\ndata['bki_request_cnt']=data['bki_request_cnt'].apply(lambda x: np.log(x+1))\ndata['income']=data['income'].apply(lambda x: np.log(x+1))","50e77a94":"from sklearn.preprocessing import PolynomialFeatures","a589e998":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n# pf=PolynomialFeatures(2)\n# poly_features=pf.fit_transform(data[['age','decline_app_cnt', 'income']])\n# poly_features.shape","52b1a479":"# \u0420\u0430\u0431\u043e\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430, \u0447\u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c. \n# \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u044f \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0430 \u044d\u0442\u043e\u0442 \u043a\u0443\u0441\u043e\u043a \u043a\u043e\u0434\u0430\n# index=data.index\n# right=pd.DataFrame(poly_features, columns=['1','2','3','4','5','6','7','8','9','10'], index=index)\n# data=data.join(right, how='inner')\n# data.drop(columns=['1','2','3','4','6','7','8','9','10'], inplace=True)","fa7fd57a":"data.columns","e596eacb":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c Polynomial Features  \u0432\u0440\u0443\u0447\u043d\u0443\u044e\n# \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443\u0445\u0443\u0434\u0448\u0430\u044e\u0442 \u043c\u043e\u0434\u0435\u043b\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u044f \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0430 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u0443\u0441\u043a\u0438 \u043a\u043e\u0434\u0430.\ndata['n1']=data['decline_app_cnt']*data['bki_request_cnt']*data['score_bki']\n# data['n2']=data['decline_app_cnt']**2 + data['bki_request_cnt']*data['score_bki']\n# data['n3']=data['decline_app_cnt']*data['bki_request_cnt'] + data['score_bki']**2\n# data['n4']=data['decline_app_cnt']*data['score_bki'] + data['bki_request_cnt']**2\n# data['n5']=data['decline_app_cnt']**2 + data['score_bki']**2 + data['bki_request_cnt']**2\n\n# data['n6']=data['home_address']**2 - data['work_address']*data['region_rating']\n# data['n7']=data['region_rating']**2 - data['home_address']*data['work_address']\n# data['n8']=data['work_address']**2 - data['home_address']*data['region_rating']\n\ndata['n9']=data['sna']*data['first_time']\ndata['n10']=data['sna'] - data['first_time']\n\n\n# data['n11']=data['income']\/data['region_rating']\n# data['n12']=data['timedelta']\/data['first_time']","fdd507e8":"data.columns","9a02fa9a":"# polynomial_columns=['score_bki', 'bki_request_cnt','income','timedelta', 'pca_component', 'n1',\n#        'n3', 'n9', 'n10']\n\npoly_columns=['score_bki','decline_app_cnt', 'bki_request_cnt','income','timedelta', 'pca_component','n1','n9','n10']\nsns.heatmap(data[poly_columns].corr().abs(), vmin=0, vmax=1)","1702cd00":"# data.drop(columns=['age'],axis=1,inplace=True)","8e64f0c9":"data.info()","dc40267c":"# \u041d\u0430\u0440\u0438\u0441\u0443\u0435\u043c boxplot \u0434\u043b\u044f \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 (\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u0438 \u0434\u043b\u044f \u043d\u0435\u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432)\nfor i in ['decline_app_cnt','bki_request_cnt','income', 'score_bki','pca_component']:\n    fig, ax = plt.subplots(figsize = (8, 4))\n    box_plot1 = sns.boxplot(x=data[\"default\"], y=data[i], data=data,ax=ax)","dea52cd5":"# \u0422\u0435\u043f\u0435\u0440\u044c \u043d\u0430\u0440\u0438\u0441\u0443\u0435\u043c \u0442\u0435 \u0436\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0434\u043b\u044f \u043e\u0431\u043e\u0438\u0445 \u0442\u0438\u043f\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438.\nfor i in ['decline_app_cnt','bki_request_cnt','income', 'score_bki','pca_component']:\n    plt.figure(figsize=(8, 4))\n    sns.boxplot(data=data[i], orient=\"h\")\n    plt.title(i)\n    plt.show()","00b11a7b":"# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445\ncount_outliers=[]\npercent_outliers=[]\nfor j in ['score_bki', 'bki_request_cnt', 'income','pca_component']:\n    borders=IQR_outliers(j)\n#     print(j,':',borders)\n    count=0\n    for i in range(0,len(data)):\n        if data[j][i]<borders[0] or data[j][i]>borders[1]:\n            count+=1\n    percent=(count\/data.shape[0])*100\n    print(j,':',count, ',',percent)\n    count_outliers.append(count)\n    percent_outliers.append(percent)\nprint(count_outliers,'\\n')\nprint(percent_outliers)","13ddcedc":"# medians=[data['score_bki'].median(),data['bki_request_cnt'].median(),data['income'].median()]\n# outliers1=IQR_outliers('score_bki')\n# outliers2=IQR_outliers('bki_request_cnt')\n# outliers3=IQR_outliers('income')\n# print('score_bki:',outliers1,'\\n','bki_request_cnt:',outliers2,'\\n','income:',outliers3)\n# borders={'score_bki':outliers1,'bki_request_cnt':outliers2,'income':outliers3}\n# data['score_bki']=data['score_bki'].apply(lambda x: medians[0] if x<borders['score_bki'][0] or x>borders['score_bki'][1] else x)\n# data['bki_request_cnt']=data['bki_request_cnt'].apply(lambda x: medians[1] if x<borders['bki_request_cnt'][0] or x>borders['bki_request_cnt'][1] else x)\n# data['income']=data['income'].apply(lambda x: medians[2] if x<borders['income'][0] or x>borders['income'][1] else x)","c92fdfa2":"data.shape","21595fe4":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443 \u043d\u0430\u0441 \u0432\u0441\u0435\u0433\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u0438 \u043d\u0435\u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u044f\u0432\u043d\u043e \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043e.\ndata['default'].value_counts(ascending=True).plot(kind='barh')","0f3e99d6":"# \u0418\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 client_id \u0438 app_date\ndata.drop(['client_id','app_date',], axis = 1, inplace=True)","367facae":"# \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043c\u0435\u0442\u043e\u0434 get_dummies \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 education. \u0412 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0432\u044b\u043d\u0435\u0441\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n# data = pd.get_dummies(data, columns=['education'], dummy_na=True)","98560176":"data.head()","3854e05f":"import random","73a5b8d5":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 education. \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430, \u0447\u0442\u043e \u044d\u0442\u0443 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u043b\u0443\u0447\u0448\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0435 \n# \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e get_dummies, \u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e OneHotEncoder. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\nprob = data['education'].value_counts(normalize=True)\nind = data[data['education'].isna()==True].index\nfill_list = pd.Series(random.choices(prob.index, prob, k=data['education'].isna().sum()))\nfill_list.index = ind\ndata['education']=data['education'].fillna(fill_list)","34c35dfa":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 education \u043d\u0430 \u0447\u0438\u0441\u043b\u0430 (\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438). \u041e\u0442\u043c\u0435\u0447\u0443, \u0447\u0442\u043e \u0443 \u043c\u0435\u043d\u044f\n# \u0435\u0441\u0442\u044c \u0441\u043e\u043c\u043d\u0435\u043d\u0438\u044f \u043d\u0430 \u0441\u0447\u0435\u0442 \u044d\u0442\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u041a\u0430\u043a \u044f \u043c\u043e\u0433\u0443 \u0431\u044b\u0442\u044c \u0443\u0432\u0435\u0440\u0435\u043d\u0430, \u0447\u0442\u043e 'UGR' \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e \u0443\u0440\u043e\u0432\u043d\u044e \u043d\u0438\u0436\u0435\n# 'GRD', \u0430 'PGR' \u0432\u044b\u0448\u0435 'GRD'? \u042f \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043b\u0430 \u0442\u0430\u043a, \u043a\u0430\u043a \u043c\u043d\u0435 \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432\u0435\u0440\u043d\u044b\u043c, \u043d\u043e \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043d\u0435\u0442.\ndef replace_values(string):\n    if string=='SCH':\n        return 0\n    elif string=='UGR':\n        return 1\n    elif string=='GRD':\n        return 2\n    elif string=='PGR':\n        return 3\n    elif string=='ACD':\n        return 4","2f8d82b3":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 education\ndata['education']=data['education'].apply(replace_values)","721bbb0d":"data.info()","db3dc8ed":"# \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c Label_Encoder \u0434\u043b\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n# binary_cols = ['sex','car', 'car_type', 'good_work', 'foreign_passport']\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\n# ohe=preprocessing.OneHotEncoder(sparse=False)\n\nfor column in bin_cols:\n    data[column] = le.fit_transform(data[column])\n    \n# \u0414\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c OneHotEncoder. \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u044d\u0442\u043e \u0447\u0443\u0442\u044c \u043f\u043e\u0437\u0436\u0435","13d4d0dc":"data.sample(10)","062c1e84":"data.info()","79a6584a":"data.columns","5ad7e04f":"from sklearn.model_selection import train_test_split","403209ef":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.linear_model import LogisticRegression # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","e26791bf":"from itertools import combinations","feb78c5e":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \u0411\u0443\u0434\u0435\u043c \u043a\u043e\u043c\u0431\u0438\u0440\u0438\u043d\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u043c\n# \u0442\u0438\u043f\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0442\u0440\u0438 \u0448\u0442\u0443\u043a\u0438 \u0438 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u0430 \u0438\u0445 \u043e\u0441\u043d\u043e\u0432\u0435 Polynomial Features. \u041a\u0430\u043a \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438,\n# \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u043d\u0438\u0436\u0435 \u0432 \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u043a\u0443\u0441\u043a\u0435 \u043a\u043e\u0434\u0430.\ndef find_polynomial_features(df,cols):\n    pf=PolynomialFeatures(2)\n    poly_features=pf.fit_transform(df[cols])\n    index=df.index\n    right=pd.DataFrame(poly_features, columns=['1','2','3','4','5','6','7','8','9','10'], index=index)\n    right.drop(columns=['1','2','3','4'], inplace=True)\n    df=df.join(right, how='inner')\n    \n    train_data = df.query('sample == 1').drop(['sample'], axis=1)\n#     test_data = data.query('sample == 0').drop(['sample', 'default'], axis=1)\n    y = train_data['default'].values  # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\n    X = train_data.drop(['default'], axis=1)\n    \n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    \n    X1=X_train[['age','decline_app_cnt','bki_request_cnt','income', 'score_bki','number_of_clients','timedelta','5','6','7','8','9','10']].values\n    X2=X_test[['age','decline_app_cnt','bki_request_cnt','income', 'score_bki','number_of_clients','timedelta','5','6','7','8','9','10']].values\n    \n    scaler=RobustScaler()\n    X1_transformed=scaler.fit_transform(X1)\n    X2_transformed=scaler.transform(X2)\n    X_train[['age','decline_app_cnt','bki_request_cnt','income', 'score_bki','number_of_clients','timedelta','5','6','7','8','9','10' ]]=X1_transformed\n    X_test[['age','decline_app_cnt','bki_request_cnt','income', 'score_bki','number_of_clients','timedelta','5','6','7','8','9','10']]=X2_transformed\n    \n    model = LogisticRegression(solver='saga', max_iter=1000, class_weight='balanced', penalty='l2', tol=0.001, multi_class='ovr')\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test) \n    return metrics.f1_score(y_test,y_pred)","ebff3202":"# \u0412 \u0445\u043e\u0434\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u044d\u0442\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 \u0431\u044b\u043b\u043e \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043e, \u0447\u0442\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 f1_score \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438\n# \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 ['age', 'decline_app_cnt', 'income'] \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \n# \u042f \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0430 \u044d\u0442\u043e\u0442 \u043a\u0443\u0441\u043e\u043a \u043a\u043e\u0434\u0430, \u0442.\u043a. \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0435\u0433\u043e \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437. \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \n# \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0448\u0430\u0433\u0435 \u0446\u0438\u043a\u043b\u0430 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438.\n# \u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e, \u0431\u044b\u043b\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e, \u0447\u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0431\u044b\u043b\u043e \n# \u0440\u0435\u0448\u0435\u043d\u043e \u043e\u0442 \u043d\u0438\u0445 \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f.\n# columns=['age','decline_app_cnt',\n#        'score_bki', 'bki_request_cnt', 'income',\n#        'timedelta', 'number_of_clients']\n# cand=find_polynomial_features(data,['age', 'decline_app_cnt', 'score_bki'])\n# columns_best=['age', 'decline_app_cnt', 'score_bki']\n# for i in combinations(columns,3):    \n#     f1_score_current=find_polynomial_features(data,list(i))\n#     print('For the following columns: ',i,' f1_score=', f1_score_current,'\\n')\n#     if f1_score_current>cand:\n#         cand=f1_score_current\n#         columns_best=i\n# print(cand)\n# print(columns_best)","c7ea74ce":"from sklearn.feature_selection import f_classif","bc289d4f":"# \u0423 \u043c\u0435\u043d\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0439 \u043e\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0432 \u043c\u043e\u0434\u0443\u043b\u0435. \u0421\u0430\u043c\u044b\u043c \u0432\u0430\u0436\u043d\u044b\u043c \u0441\u0440\u0435\u0434\u0438 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445\n# \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f score_bki\ncols=['score_bki', 'decline_app_cnt', 'bki_request_cnt', 'income','timedelta','pca_component', 'n1','n9','n10']\nimp_num = pd.Series(f_classif(data[cols], data['default'])[0], index = cols)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","3caf21d3":"from sklearn.feature_selection import mutual_info_classif","957df46d":"# \u0423 \u043c\u0435\u043d\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0439 \u043e\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0432 \u043c\u043e\u0434\u0443\u043b\u0435. \u0421\u0430\u043c\u044b\u043c \u0432\u0430\u0436\u043d\u044b\u043c \u0441\u0440\u0435\u0434\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \n# \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f sna\nother_cols = ['first_time', 'sna', 'work_address', 'home_address', 'region_rating','app_day','app_month','sex', 'car', 'car_type', 'good_work', 'foreign_passport', 'app_day_of_week']\n\nimp_cat = pd.Series(mutual_info_classif(data[other_cols], data['default'],\n                                     discrete_features =True), index = other_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","60f94354":"\n# data.drop(columns=['sna','sex','age'],axis=1, inplace=True)","bb61b0cf":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = data.query('sample == 1').drop(['sample'], axis=1)\ntest_data = data.query('sample == 0').drop(['sample', 'default'], axis=1)","21b4dc2b":"from sklearn.model_selection import StratifiedShuffleSplit","2fd7486e":"# \u042f \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e StratifiedShuffleSplit. \u042d\u0442\u043e \u043d\u0435 \u043f\u0440\u0438\u0432\u0435\u043b\u043e \u043a\n# \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u044f \u0432\u0435\u0440\u043d\u0443\u043b\u0430\u0441\u044c \u043a train_test_split.\n# sss = StratifiedShuffleSplit(n_splits=1, test_size=0.2)\n# train_indices, valid_indices = [split for split in sss.split(train_data.drop(['default'],axis=1), train_data['default'])][0]\n\n# X1=train_data[['age','decline_app_cnt','bki_request_cnt','income', 'score_bki','pca_component','timedelta']].values\n# X2=test_data[['age','decline_app_cnt','bki_request_cnt','income', 'score_bki','pca_component','timedelta']].values\n\n# scaler=RobustScaler()\n# X1_transformed=scaler.fit_transform(X1)\n# X2_transformed=scaler.transform(X2)\n\n# train_data[['age','decline_app_cnt','bki_request_cnt','income', 'score_bki','pca_component','timedelta']]=X1_transformed\n# test_data[['age','decline_app_cnt','bki_request_cnt','income', 'score_bki','pca_component','timedelta']]=X2_transformed\n\n# s_train = train_data.iloc[train_indices]\n# s_valid = train_data.iloc[valid_indices]\n\n# numeric_cols=['age','decline_app_cnt','bki_request_cnt','income', 'score_bki','pca_component','timedelta']\n\n# from sklearn.preprocessing import OneHotEncoder\n\n# columns = ['education','first_time', 'sna', 'work_address', 'home_address', 'region_rating','app_day','app_month','app_day_of_week']\n# ohe_train_train=OneHotEncoder(sparse=False)\n# X_cat_train_train = ohe_train_train.fit_transform(s_train[columns].values)\n\n# ohe_train_test=OneHotEncoder(sparse=False)\n# X_cat_train_test = ohe_train_test.fit_transform(s_valid[columns].values)\n\n# ohe_test=OneHotEncoder(sparse=False)\n# X_cat_test=ohe_test.fit_transform(test_data[columns].values)\n\n# X_train=np.hstack([s_train[numeric_cols].values, s_train[bin_cols].values, X_cat_train_train])\n# X_test=np.hstack([s_valid[numeric_cols].values, s_valid[bin_cols].values, X_cat_train_test])\n\n# y_train=s_train['default'].values\n# y_test=s_valid['default'].values\n\n# X_train=pd.DataFrame(X_train, columns=[i for i in range(0,80)], index=[j for j in range(0,59039)])\n# X_test=pd.DataFrame(X_test, columns=[i for i in range(0,80)], index=[j for j in range(0,14760)])\n# X=X_train.append(X_test,sort=False).reset_index(drop=True)\n\n# y_train=pd.DataFrame(y_train, columns=['0'], index=[j for j in range(0,59039)])\n# y_test=pd.DataFrame(y_test, columns=['0'], index=[j for j in range(0,14760)])\n# y=y_train.append(y_test,sort=False).reset_index(drop=True)\n\n# X_valid=np.hstack([X2_transformed,test_data[bin_cols], X_cat_test])","d97b61a2":"# \u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0432 test \u0438 train. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \n# OneHotEncoder. \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430, \u0447\u0442\u043e \u044d\u0442\u043e \u0434\u0430\u0435\u0442 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \n# \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\n\nfrom sklearn.preprocessing import OneHotEncoder\n\ncolumns = ['education','first_time','sna', 'work_address', 'home_address', 'region_rating','app_day','app_month','app_day_of_week']\nohe_train=OneHotEncoder(sparse=False)\nX_cat_train = ohe_train.fit_transform(train_data[columns].values)\n\nohe_test=OneHotEncoder(sparse=False)\nX_cat_test=ohe_test.fit_transform(test_data[columns].values)","153f33f7":"# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 c \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u043c \u0442\u0438\u043f\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 train \u0438 test\nX1=train_data[['decline_app_cnt','bki_request_cnt','income','score_bki', 'timedelta','pca_component','n1','n9','n10']].values\nX2=test_data[['decline_app_cnt','bki_request_cnt','income','score_bki', 'timedelta','pca_component','n1','n9','n10']].values","b755a683":"# \u041f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u043c \u0447\u0435\u0440\u0435\u0437 RobustScaler \u0432\u0441\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u043c \u0442\u0438\u043f\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445. \u042f \u0432\u044b\u0431\u0440\u0430\u043b\u0430 RobustScaler, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e\n# \u043e\u043d \u043d\u0435\u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d \u043a \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c \u0438 \u0434\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 Kaggle, \u0447\u0435\u043c StandardScaler. \n# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0438\u0437 test \u0438 train\nscaler=RobustScaler()\nX1_transformed=scaler.fit_transform(X1)\nX2_transformed=scaler.transform(X2)","f4103d30":"# \u0417\u0430\u043f\u0438\u0448\u0435\u043c \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u043e\u043d\u043e\u043a\ntrain_data[['decline_app_cnt','bki_request_cnt','income','score_bki', 'timedelta','pca_component','n1','n9','n10']]=X1_transformed\ntest_data[['decline_app_cnt','bki_request_cnt','income','score_bki', 'timedelta','pca_component','n1','n9','n10']]=X2_transformed","cbfc5fac":"array_of_values=train_data['WOE_score_bki'].values\nwoe_score_bki_values_train=array_of_values.reshape(73799,1)","15269a15":"array_of_values=test_data['WOE_score_bki'].values\nwoe_score_bki_values_test=array_of_values.reshape(36349,1)","4ccb03cb":"# \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0434\u043b\u044f train \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\nX=np.hstack([X1_transformed, train_data[bin_cols].values, X_cat_train])\nX_valid=np.hstack([X2_transformed,test_data[bin_cols], X_cat_test])","3e77c805":"y = train_data['default'].values  # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\n# X = train_data.drop(['default'], axis=1)","2c2ba2c9":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nfrom sklearn.model_selection import train_test_split\n\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","13d34d93":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","ae2c8252":"# scaler=RobustScaler()\n# X_train=scaler.fit_transform(X_train)\n# X_test=scaler.transform(X_test)","861e48d4":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.linear_model import LogisticRegression # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","7878a690":"data.info()","7bbdc583":"# C_list =np.arange(0.01, 1.01, 0.01)\n# max_f1 = -1\n# max_C = -1\n# for c in C_list:\n#     model = LogisticRegression(solver='saga', max_iter=1000, class_weight='balanced', penalty='l2', tol=0.001, multi_class='ovr', C=c)\n#     model.fit(X_train, y_train)\n#     y_pred = model.predict(X_test)\n#     f1 = metrics.f1_score(y_test, y_pred)\n#     if f1 > max_f1:\n#         max_f1 = f1\n#         max_C= c\n# print(max_C, max_f1)","1435b697":"# from hpsklearn import HyperoptEstimator, any_classifier\n# from hyperopt import tpe\n\n# Download the data and split into training and test sets\n\n# estim = HyperoptEstimator( classifier=LogisticRegression('l2'),  \n#                             algo=tpe.suggest, trial_timeout=300)\n\n# estim.fit(X_train, y_train)\n\n# print(estim.score(X_test, y_test))\n# <<show score here>>\n# print( estim.best_model() )\n# <<show model here>>","c20f2d7f":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0432 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u043c\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430 GridSearchCV\n# \u041d\u0438\u0436\u0435 \u044f \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0430 \u0437\u0430\u043f\u0443\u0441\u043a \u043a\u043e\u0434\u0430 \u0441 GridSearchCV, \u0442.\u043a. \u043e\u043d \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438.\n# \u041d\u0430\u0439\u0442\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043e\u0434\u0438\u043d \u0440\u0430\u0437. \u041d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043a\u0443\u0441\u043e\u043a \u043a\u043e\u0434\u0430 \n# \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0430. \u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435, \u0447\u0442\u043e \u044f \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0430 - \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439. GridSearchCV\n# \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u043b\u0441\u044f \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 50. \u042f \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0430 \u044d\u0442\u043e \u0447\u0438\u0441\u043b\u043e \u043d\u0430 1000 \u0432 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.\n# \u042d\u0442\u043e \u0434\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\nlogreg = LogisticRegression(solver='saga', max_iter=1000, class_weight='balanced', penalty='l2', C=0.01, tol=0.001, multi_class='ovr')\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test) \nY_pred=logreg.predict(X_train)\ny_pred_proba=logreg.predict_proba(X_test)\ny_pred_proba=y_pred_proba[:,1]\nY_pred_proba=logreg.predict_proba(X_train)\nY_pred_proba=Y_pred_proba[:,1]","31bebe65":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438\nfrom sklearn.metrics import classification_report, f1_score, accuracy_score, precision_score, roc_auc_score, recall_score, confusion_matrix","db8b244c":"# \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u043d\u0430\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439\ndef show_metrics(y_pred_train, Y_train, y_pred_test, Y_test, y_pred_proba_train, y_pred_proba_test):\n    f1_score_train=f1_score(y_pred_train,Y_train)\n    f1_score_test=f1_score(y_pred_test,Y_test)\n    print('[train] f1_score {0:.2f}, [test] f1_score {1:.2f}\\n'.format(f1_score_train,f1_score_test))\n    precision_score_train=precision_score(y_pred_train,Y_train)\n    precision_score_test=precision_score(y_pred_test,Y_test)\n    print('[train] precision_score {0:.2f}, [test] precision_score {1:.2f}\\n'.format(precision_score_train,precision_score_test))\n    recall_score_train=recall_score(y_pred_train,Y_train)\n    recall_score_test=recall_score(y_pred_test,Y_test)\n    print('[train] recall_score {0:.2f}, [test] recall_score {1:.2f}\\n'.format(recall_score_train,recall_score_test))\n    accuracy_score_train=accuracy_score(y_pred_train,Y_train)\n    accuracy_score_test=accuracy_score(y_pred_test,Y_test)\n    print('[train] accuracy_score {0:.2f}, [test] accuracy_score {1:.2f}\\n'.format(accuracy_score_train,accuracy_score_test))\n    roc_auc_score_train=roc_auc_score(Y_train,y_pred_proba_train)\n    roc_auc_score_test=roc_auc_score(Y_test,y_pred_proba_test)\n    print('[train] roc_auc_score {0:.2f}, [test] roc_auc_score {1:.2f}\\n'.format(roc_auc_score_train,roc_auc_score_test))\n    confusion_matrix_train=confusion_matrix(y_pred_train,Y_train)\n    confusion_matrix_test=confusion_matrix(y_pred_test,Y_test)\n    print('[train] confusion_matrix \\n {0}, \\n[test] confusion_matrix \\n {1}\\n'.format(confusion_matrix_train,confusion_matrix_test))","0c9c5867":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043d\u0435\u0442 \u043b\u0438 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nshow_metrics(Y_pred,y_train,y_pred,y_test,Y_pred_proba,y_pred_proba)","48821443":"# \u041a\u0430\u0436\u0435\u0442\u0441\u044f, \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u0442. \u0427\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u044d\u0442\u043e, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 cross_validate \n# \u0438\u0437 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n\nfrom sklearn.model_selection import cross_validate\ncv_metrics = cross_validate(logreg, X, y, cv=5, scoring='f1_micro', return_train_score=True)\n\ndef plot_cv_metrics(cv_metrics):\n    avg_f1_train, std_f1_train = cv_metrics['train_score'].mean(), cv_metrics['train_score'].std()\n    avg_f1_valid, std_f1_valid = cv_metrics['test_score'].mean(), cv_metrics['test_score'].std()\n    print('[train] F1-score = {:.2f} +\/- {:.2f}'.format(avg_f1_train, std_f1_train))\n    print('[valid] F1-score = {:.2f} +\/- {:.2f}'.format(avg_f1_valid, std_f1_valid))\n    \n    plt.figure(figsize=(15, 5))\n\n    plt.plot(cv_metrics['train_score'], label='train', marker='.')\n    plt.plot(cv_metrics['test_score'], label='valid', marker='.')\n\n    plt.ylim([0., 1.]);\n    plt.xlabel('CV iteration', fontsize=15)\n    plt.ylabel('F1-score', fontsize=15)\n    plt.legend(fontsize=15)","05ae9a57":"plot_cv_metrics(cv_metrics)\n# \u041f\u043e\u0445\u043e\u0436\u0435, \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435\u0442","f02cbb5b":"from sklearn.model_selection import GridSearchCV","72212aca":"# \u0417\u0430\u043f\u0443\u0442\u0438\u043c \u043f\u043e\u0434\u0431\u043e\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438, \u043a\u0430\u043a \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u043c\u043e\u0434\u0443\u043b\u0435\n# model=LogisticRegression()\n\n# iter_ = 50\n# epsilon_stop = 1e-3\n\n# param_grid = [   {'penalty': ['l1'], \n#      'solver': ['liblinear', 'lbfgs'], \n#      'class_weight':['none', 'balanced'], \n#      'multi_class': ['auto','ovr'], \n#      'max_iter':[iter_],\n#      'tol':[epsilon_stop]},\n#     {'penalty': ['l2'], \n#      'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'], \n#      'class_weight':['none', 'balanced'], \n#      'multi_class': ['auto','ovr'], \n#      'max_iter':[iter_],\n#      'tol':[epsilon_stop]},\n#     {'penalty': ['none'], \n#      'solver': ['newton-cg', 'lbfgs', 'sag', 'saga'], \n#      'class_weight':['none', 'balanced'], \n#      'multi_class': ['auto','ovr'], \n#      'max_iter':[iter_],\n#      'tol':[epsilon_stop]},\n# ]\n\n## model \u0432\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438\n# gridsearch = GridSearchCV(model, param_grid, scoring='f1', n_jobs=-1, cv=5)\n# gridsearch.fit(X_train, y_train)\n# model = gridsearch.best_estimator_\n\n##\u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n# best_parameters = model.get_params()\n# for param_name in sorted(best_parameters.keys()):\n#         print('\\t%s: %r' % (param_name, best_parameters[param_name]))","38632e68":"# \u0435\u0441\u043b\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0441 \u0443\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442, \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0432\u0441\u0435\u0445 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\nlogreg_final = LogisticRegression(solver='saga', max_iter=1000, class_weight='balanced', penalty='l2',tol=0.001, multi_class='ovr')\n# logreg_final = LogisticRegression(solver='liblinear', max_iter=1000, class_weight='balanced')\nlogreg_final.fit(X, y)","61f705c7":"# \u042d\u0442\u043e \u043b\u0438\u0448\u043d\u0435\u0435! test_data \u0443\u0436\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u0430\n# test_data['decline_app_cnt']=test_data['decline_app_cnt'].apply(lambda x: np.log(x+1))\n# test_data['bki_request_cnt']=test_data['bki_request_cnt'].apply(lambda x: np.log(x+1))\n# test_data['income']=test_data['income'].apply(lambda x: np.log(x+1))","b61da45e":"# \u042d\u0442\u043e \u043b\u0438\u0448\u043d\u0435\u0435! test_data \u0443\u0436\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u0430\n# mean_score_test=test_data['score_bki'].mean()\n# test_data['score_bki']=(test_data['score_bki'] - mean_score_test)\/np.linalg.norm(test_data['score_bki'])","12626644":"predict_submission = logreg_final.predict(X_valid)","af7209ef":"sample_submission['default'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","c67ed2a6":"sample_submission.describe()","c9ec9a16":"!kaggle competitions submit -c sf-scoring -f ssubmission.csv -m \"Message\"\n# !kaggle competitions submit your-competition-name -f submission.csv -m 'My submission message'","36c85bd7":"**\u0412\u044b\u0432\u043e\u0434\u044b:**\n* \u0420\u0430\u0437\u0432\u0435\u0434\u044b\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043a\u0430\u0437\u0430\u043b, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0447\u0438\u0441\u0442\u044b\u0435. \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u043c\u043d\u043e\u0433\u043e (\u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 education). \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 education \u0431\u044b\u043b\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0438\u0437 \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445.\n* \u041a\u043e\u043b\u043e\u043d\u043a\u0438 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u0441 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u043c \u0442\u0438\u043f\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445. \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0431\u044b\u043b\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e LabelEncoder, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 - \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e OneHotEncoder.\n* \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u043c \u0442\u0438\u043f\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445 ('decline_app_cnt','bki_request_cnt','income') \u0438\u043c\u0435\u044e\u0442 \"\u0442\u044f\u0436\u0435\u043b\u044b\u0439\" \u043f\u0440\u0430\u0432\u044b\u0439 \u0445\u0432\u043e\u0441\u0442. \u042d\u0442\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0431\u044b\u043b\u0438 \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u044b. \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0431\u044b\u043b\u0430 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430\u0434 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u043c\n* \u0411\u044b\u043b\u0438 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (4 \u043a\u043e\u043b\u043e\u043d\u043a\u0438) \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (3 \u043a\u043e\u043b\u043e\u043d\u043a\u0438). \u041d\u043e\u0432\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u043e\u0432\u044b\u0448\u0430\u044e\u0442 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438. \u041d\u043e\u0432\u044b\u0435 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u0438\u043b\u044c\u043d\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u044b, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438. \u0422\u0440\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0431\u044b\u043b\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442. \u042d\u0442\u043e \u0434\u0430\u043b\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438.\n* \u0411\u044b\u043b\u0430 \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u043d\u044f\u0442\u0430 \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 Polynomial Features). \u041f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443\u0445\u0443\u0434\u0448\u0430\u044e\u0442 \u043c\u043e\u0434\u0435\u043b\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0431\u044b\u043b\u043e \u043f\u0440\u0438\u043d\u044f\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u0442 \u043d\u0438\u0445 \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f. \u041d\u043e: \u043f\u043e\u0437\u0434\u043d\u0435\u0435 \u0432\u044b\u044f\u0441\u043d\u0438\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0431\u044b\u043b\u0438 \u0441\u0438\u043b\u044c\u043d\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u044b. \u042f \u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0438\u0445, \u044d\u0442\u043e \u0434\u0430\u043b\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438.\n* \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043d\u0435 \u043f\u0440\u0438\u043d\u0435\u0441\u043b\u0430 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438. \u0412\u044b\u0431\u0440\u043e\u0441\u044b \u0431\u044b\u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u043e\u043c IQR. \u0422.\u043a. \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0443\u0445\u0443\u0434\u0448\u0435\u043d\u0438\u044e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438, \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0431\u044b\u043b\u043e \u0440\u0435\u0448\u0435\u043d\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c.\n* \u0411\u044b\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d RobustScaler \u0434\u043b\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\n* \u041d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 score_bki \u0438 sna.\n* \u0411\u044b\u043b\u0430 \u0441\u0434\u0435\u043b\u0430\u043d\u0430 \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u0437 \u0447\u0438\u0441\u043b\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 (app_day_of_week) \u043d\u0435 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0438. \u041e\u0434\u043d\u0430\u043a\u043e, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0433\u043e \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 (age) \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043c\u0435\u0442\u0440\u0438\u043a\u0443. \u0415\u0441\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u043e \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a (pca_component), \u0442\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u0443\u0445\u0443\u0434\u0448\u0438\u0442\u0441\u044f.\n* \u0411\u044b\u043b\u043e \u0438\u0441\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 WOE \u0438 IV \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 age, sex \u0438 sna. \u042d\u0442\u043e \u043d\u0435 \u043f\u0440\u0438\u043d\u0435\u0441\u043b\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0442 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0431\u044b\u043b\u043e \u043f\u0440\u0438\u043d\u044f\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f.\n* \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e  \u043c\u0435\u0442\u043e\u0434\u0430 GridSerchCV \u0431\u044b\u043b\u0438 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u044b \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438. \u041e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c - \u044d\u0442\u043e Logistic Regression Balanced. \n* \u0411\u044b\u043b \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0421=0.01, \u0447\u0442\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0432\u043a\u043b\u0430\u0434\u0443 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u042d\u0442\u043e \u0434\u0430\u043b\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0421=1.0 (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e).\n* \u0411\u044b\u043b\u043e \u0438\u0441\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043d\u043e \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e StratifiedShuffleSplit (\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u0447\u0430\u0441\u0442\u0438 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0434\u043e\u043b\u0435\u0439 \u043a\u043b\u0430\u0441\u0441\u043e\u0432). \u042d\u0442\u043e \u043d\u0435 \u0434\u0430\u043b\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438. \u041e\u0442 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0431\u044b\u043b\u043e \u043f\u0440\u0438\u043d\u044f\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u0432 \u043f\u043e\u043b\u044c\u0437\u0443 train_test_split.\n* \u041d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0431\u044b\u043b\u0438 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 (f1_score, precision_score, recall_score, accuracy_score). \u0422.\u043a. \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f, \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435\u0442.","db1f980a":"**\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430, \u0447\u0442\u043e \u0437\u0430\u043c\u0435\u043d\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c (\u0441\u043c. \u043a\u043e\u0434 \u043d\u0438\u0436\u0435). \u0412 \u044d\u0442\u043e\u0439 \u0441\u0432\u044f\u0437\u0438 \u044f \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u0443\u0441\u043e\u043a \u043a\u043e\u0434\u0430. \u0412\u0441\u0435 \u0442\u043e\u0447\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u0435\u0442\u043e\u0434 IQR \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b \u043a\u0430\u043a \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u043d\u0443\u0436\u043d\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c. \u0412 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043d\u043e\u043c \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u043c\u043d\u043e\u0433\u043e (\u043e\u0442 0.01 \u0434\u043e 2.4%)**","6c83ddf3":"**\u041f\u0440\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438**","1f293bc9":"**\u0420\u0430\u0437\u0432\u0435\u0434\u044b\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 (EDA)**","7b5dd019":"**\u0412\u043e\u0442 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u043c GridSearchCV \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438:**\n* C: 1.0 (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e)\n* class_weight: 'balanced' (\u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043e, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e None)\n* dual: False (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e)\n* fit_intercept: True (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e)\n* intercept_scaling: 1 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e)\n* l1_ratio: None (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e)\n* max_iter: 50 (\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u043d\u0430\u043c\u0438)\n* multi_class: 'ovr' (\u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043e, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e auto)\n* n_jobs: None (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e)\n* penalty: 'l2' (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e)\n* random_state: None (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e)\n* solver: 'saga' (\u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043e, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e lbfgs)\n* tol: 0.001 (\u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043e, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 0.0001)\n* verbose: 0 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e)\n* warm_start: False (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e)","1b3a690a":"**\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**"}}