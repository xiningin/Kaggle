{"cell_type":{"1973e876":"code","c6bd1486":"code","9e7342f8":"code","c013fab1":"code","cbd9adf7":"code","a1eb80ea":"code","08129e73":"code","f1d5a302":"code","b16e8621":"code","1f87082c":"code","f108ea37":"code","18be56ee":"code","7f7ae18c":"code","40b2b5c1":"code","6c1389b1":"code","6ed417f0":"code","7cafae99":"code","cbacbed7":"code","e29f2a14":"code","d3bf3760":"code","efe3c4d4":"code","d045ec67":"code","dc8ffc22":"code","e164c4d7":"code","4d95d910":"code","d24fec69":"code","effcaa50":"code","aaf405d2":"code","0c3faaee":"code","21e60fed":"code","8af7c58d":"code","c6705c5d":"code","4be288cf":"code","610ab2e5":"code","df2a9aed":"markdown","28e2621c":"markdown","280da122":"markdown","e0ba6087":"markdown","a9b981ac":"markdown","40d1c62a":"markdown","938d0b11":"markdown","f833cffc":"markdown"},"source":{"1973e876":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","c6bd1486":"train_df = pd.read_csv('..\/input\/train.csv')\n","9e7342f8":"test_df = pd.read_csv('..\/input\/test.csv')","c013fab1":"display(train_df.head())\nprint('Shape of Data : ',train_df.shape)","cbd9adf7":"train_df.describe()","a1eb80ea":"train_df.isnull().sum()","08129e73":"train_df['Initial']=0\nfor i in train_df:\n    train_df['Initial']=train_df.Name.str.extract('([A-Za-z]+)\\.')\n    \npd.crosstab(train_df.Initial,train_df.Sex).T.style.background_gradient(cmap='gist_rainbow')    ","f1d5a302":"train_df['Initial'].replace(['Dr','Mlle','Mme','Ms','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],\n                            ['Other','Miss','Miss','Miss','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],\n                            inplace=True)\npd.crosstab(train_df.Initial,train_df.Sex).T.style.background_gradient(cmap='gist_rainbow')    ","b16e8621":"train_df.groupby('Initial')['Age'].mean()\n","1f87082c":"train_df.loc[(train_df.Age.isnull())&(train_df.Initial=='Mr'),'Age']=32.5\ntrain_df.loc[(train_df.Age.isnull())&(train_df.Initial=='Mrs'),'Age']=36\ntrain_df.loc[(train_df.Age.isnull())&(train_df.Initial=='Master'),'Age']=4.5\ntrain_df.loc[(train_df.Age.isnull())&(train_df.Initial=='Miss'),'Age']=22\ntrain_df.loc[(train_df.Age.isnull())&(train_df.Initial=='Other'),'Age']=44.5","f108ea37":"f,ax=plt.subplots()\ntrain_df['Survived'].value_counts().plot.pie(explode=[0,0.05],autopct='%1.1f%%',shadow=True)\nax.set_title('Survived')\nax.set_ylabel('')\nplt.show()","18be56ee":"sns.barplot(x= 'Sex', y= 'Survived' , data = train_df);","7f7ae18c":"sns.violinplot(x= 'Sex',y='Age',data = train_df, hue = 'Survived', split = True);","40b2b5c1":"sns.stripplot(x= 'Initial',y='Age',data = train_df, jitter = True , hue = 'Survived');","6c1389b1":"sns.factorplot(x= 'Embarked',y='Age',data = train_df, kind = 'bar', hue = 'Survived');","6ed417f0":"f,ax=plt.subplots(1,1,figsize=(6,5))\ntrain_df['Embarked'].value_counts().plot.pie(explode=[0,0,0],autopct='%1.1f%%',ax=ax)\nplt.show()","7cafae99":"train_df['Embarked'].fillna('S',inplace=True)","cbacbed7":"train_df['FamilySize'] = train_df['Parch'] + train_df['SibSp']\nsns.barplot(x= 'FamilySize', y= 'Survived' , data = train_df);","e29f2a14":"sns.pairplot(train_df, hue = 'Sex',palette='coolwarm');","d3bf3760":"train_df['Age_cat']=0\ntrain_df.loc[train_df['Age']<=12,'Age_cat']=0\ntrain_df.loc[(train_df['Age']>12)&(train_df['Age']<=18),'Age_cat']=1\ntrain_df.loc[(train_df['Age']>18)&(train_df['Age']<=40),'Age_cat']=2\ntrain_df.loc[(train_df['Age']>40)&(train_df['Age']<=50),'Age_cat']=3\ntrain_df.loc[(train_df['Age']>50)&(train_df['Age']<=70),'Age_cat']=4\ntrain_df.loc[train_df['Age']>70,'Age_cat']=5","efe3c4d4":"train_df['Sex'].replace(['male','female'],[0,1],inplace=True)\ntrain_df['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)\ntrain_df['Initial'].replace(['Mr','Mrs','Miss','Master','Other'],[0,1,2,3,4],inplace=True)","d045ec67":"train_df['Fare_cat']=0\ntrain_df.loc[train_df['Fare']<=7.775,'Fare_cat']=0\ntrain_df.loc[(train_df['Fare']>7.775)&(train_df['Fare']<=8.662),'Fare_cat']=1\ntrain_df.loc[(train_df['Fare']>8.662)&(train_df['Fare']<=14.454),'Fare_cat']=2\ntrain_df.loc[(train_df['Fare']>14.454)&(train_df['Fare']<=26.0),'Fare_cat']=3\ntrain_df.loc[(train_df['Fare']>26.0)&(train_df['Fare']<=52.369),'Fare_cat']=4\ntrain_df.loc[train_df['Fare']>52.369,'Fare_cat']=5","dc8ffc22":"train_df.drop(['Name','Age','Ticket','Cabin','SibSp','Parch','Fare','PassengerId'],axis=1,inplace=True)","e164c4d7":"train_df.head(15)","4d95d910":"sns.heatmap(train_df.corr(),annot=True,cmap='BuPu',linewidths=0.2)\nfig=plt.gcf()\nfig.set_size_inches(10,8)\nplt.show()","d24fec69":"\ntest_df['Initial']=0\nfor i in test_df:\n    test_df['Initial']=test_df.Name.str.extract('([A-Za-z]+)\\.')\n\ntest_df['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don','Dona'],\n                           ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr','Other'],inplace=True)\n\ntest_df.loc[(test_df.Age.isnull())&(test_df.Initial=='Mr'),'Age']=32.5\ntest_df.loc[(test_df.Age.isnull())&(test_df.Initial=='Mrs'),'Age']=36\ntest_df.loc[(test_df.Age.isnull())&(test_df.Initial=='Master'),'Age']=4.5\ntest_df.loc[(test_df.Age.isnull())&(test_df.Initial=='Miss'),'Age']=22\ntest_df.loc[(test_df.Age.isnull())&(test_df.Initial=='Other'),'Age']=44.5\n\n\ntest_df['Embarked'].fillna('S',inplace=True)\n\n\ntest_df['FamilySize'] = test_df['Parch'] + test_df['SibSp']\n\ntest_df['Age_cat']=0\ntest_df.loc[test_df['Age']<=12,'Age_cat']=0\ntest_df.loc[(test_df['Age']>12)&(test_df['Age']<=18),'Age_cat']=1\ntest_df.loc[(test_df['Age']>18)&(test_df['Age']<=40),'Age_cat']=2\ntest_df.loc[(test_df['Age']>40)&(test_df['Age']<=50),'Age_cat']=3\ntest_df.loc[(test_df['Age']>50)&(test_df['Age']<=70),'Age_cat']=4\ntest_df.loc[test_df['Age']>70,'Age_cat']=5\n\n\n\ntest_df['Sex'].replace(['male','female'],[0,1],inplace=True)\ntest_df['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)\ntest_df['Initial'].replace(['Mr','Mrs','Miss','Master','Other'],[0,1,2,3,4],inplace=True)\n\n\ntest_df['Fare_cat']=0\ntest_df.loc[test_df['Fare']<=7.775,'Fare_cat']=0\ntest_df.loc[(test_df['Fare']>7.775)&(test_df['Fare']<=8.662),'Fare_cat']=1\ntest_df.loc[(test_df['Fare']>8.662)&(test_df['Fare']<=14.454),'Fare_cat']=2\ntest_df.loc[(test_df['Fare']>14.454)&(test_df['Fare']<=26.0),'Fare_cat']=3\ntest_df.loc[(test_df['Fare']>26.0)&(test_df['Fare']<=52.369),'Fare_cat']=4\ntest_df.loc[test_df['Fare']>52.369,'Fare_cat']=5\n\n\ntest_df.drop(['Name','Age','Ticket','Cabin','SibSp','Parch','Fare'],axis=1,inplace=True)\n","effcaa50":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn import metrics\n\n\n\nfrom sklearn.ensemble import RandomForestClassifier #Random Forest\nfrom sklearn.naive_bayes import GaussianNB #Naive bayes\nfrom sklearn.tree import DecisionTreeClassifier #Decision Tree\nfrom sklearn.metrics import confusion_matrix #for confusion matrix","aaf405d2":"X_train, X_test, y_train, y_test = train_test_split(train_df.drop('Survived',axis=1), train_df['Survived'], test_size=0.30,random_state=1801)\n\n#X_train=train_df[train_df.columns[1:]]\n#y_train=train_df[train_df.columns[:1]]\n#X_test=test_df[test_df.columns[1:]]\n#y_test=test_df[test_df.columns[:1]]","0c3faaee":"train_df.info()","21e60fed":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)\npredictions = logmodel.predict(X_test)\nprint(classification_report(y_test,predictions))","8af7c58d":"print('The Logistic Regression model accuracy \\t',metrics.accuracy_score(predictions,y_test))","c6705c5d":"# Naive Bayes\nNaivemodel=GaussianNB()\nNaivemodel.fit(X_train,y_train.values.ravel())\nNB_prediction=Naivemodel.predict(X_test)\nprint('The accuracy of the NaiveBayes model is\\t\\t\\t',metrics.accuracy_score(NB_prediction,y_test))\n\n# Decision Tree\nmodelTree=DecisionTreeClassifier()\nmodelTree.fit(X_train,y_train)\nDT_prediction=modelTree.predict(X_test)\nprint('The accuracy of the Decision Tree is \\t\\t\\t',metrics.accuracy_score(DT_prediction,y_test))","4be288cf":"logmodel_predictions = logmodel.predict(test_df[test_df.columns[1:]])\nNaiveBayes_predictions = Naivemodel.predict(test_df[test_df.columns[1:]])\nDecisionTree_predictions =modelTree.predict(test_df[test_df.columns[1:]])","610ab2e5":"logsubmission = pd.DataFrame({\"PassengerId\": test_df[\"PassengerId\"],\"Survived\": logmodel_predictions})\nlogsubmission.to_csv('titanic logistic.csv', index=False)\n\nNaiveBayessubmission = pd.DataFrame({\"PassengerId\": test_df[\"PassengerId\"],\"Survived\": NaiveBayes_predictions})\nNaiveBayessubmission.to_csv('titanic NaiveBayes.csv', index=False)\n\n\nDecisionTree_submission = pd.DataFrame({\"PassengerId\": test_df[\"PassengerId\"],\"Survived\": DecisionTree_predictions})\nDecisionTree_submission.to_csv('titanic DecisionTree.csv', index=False)\n","df2a9aed":"Survived rate by gender","28e2621c":"We will fill the missing age base on an initals of the passengers","280da122":"**Lest look at the data**","e0ba6087":"We will group by the initials base on the most common","a9b981ac":"Surviving by age and gender","40d1c62a":"**Logistic Regression**","938d0b11":"The \"Nulls\"","f833cffc":"Fill the missing ages base on the mean of initials"}}