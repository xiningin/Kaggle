{"cell_type":{"e88511d4":"code","0b4553d0":"code","ff523167":"code","34ac5bab":"code","801233ca":"code","c8819314":"code","05986df7":"code","b4405aca":"code","79771383":"code","43d4e325":"code","d2120bf0":"code","2b555b91":"code","5161592b":"code","45f74d02":"code","646b3a97":"code","f11489ab":"code","de0c8ac7":"code","2ef8a764":"code","22d2eef2":"code","d8ced2e9":"code","53feaa1f":"code","68216ac7":"code","0a0f3f1d":"code","19ac239c":"code","68a2ae86":"code","eed24c5d":"code","e8b202ee":"code","f3669476":"code","880471ea":"code","4b9d521d":"code","aa60386d":"code","a27f080f":"code","a5f05602":"code","c75a228a":"code","b803c435":"markdown","f8a7b567":"markdown","d5eeb320":"markdown","cfbc3ed8":"markdown","0bea0242":"markdown"},"source":{"e88511d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('https:\/\/www.kaggle.com\/c\/covid19-global-forecasting-week-4\/data'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0b4553d0":"import numpy as np\nimport pandas as pd\nimport scipy as sp\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\nimport warnings \nwarnings.filterwarnings('ignore')\nimport matplotlib.pylab as plt\nfrom matplotlib.pylab import rcParams\n\nfrom datetime import datetime","ff523167":"df = pd.DataFrame([11,184], index=['Non-affected Countries', 'Affected Countries'])\ndf.plot(kind='pie', subplots=True,colors=['skyblue','pink'], figsize=(7, 8))","34ac5bab":"train=pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/train.csv')\ndf3 = train.groupby('Country_Region')[['ConfirmedCases', 'Fatalities']].sum().reset_index()\ncountries = df3['Country_Region'].unique()\nprint(f'{len(countries)} countries are in dataset:\\n{countries}')","801233ca":"dfc = train.groupby(['Date', 'Country_Region'])[['ConfirmedCases', 'Fatalities']].sum().reset_index()\ntoday = dfc['Date'].max()\nprint('Date: ', today)\nfor i in [1, 10, 100, 1000, 10000]:\n    n_countries = len(dfc.query('(Date == @today) & ConfirmedCases > @i'))\n    print(f'{n_countries} countries have more than {i} ConfirmedCases')","c8819314":"top_countries = train.groupby('Country_Region')[['ConfirmedCases']].sum().reset_index()\nless_than_100 = len(top_countries.query('(ConfirmedCases<=100)'))\ncases_100to1000 = len(top_countries.query('(ConfirmedCases>=100) & (ConfirmedCases <=1000)'))\ncases_1000to5000=len(top_countries.query('(ConfirmedCases>=1000) & (ConfirmedCases <=5000)'))\ncases_5000to10000=len(top_countries.query('(ConfirmedCases>=5000) & (ConfirmedCases <=10000)'))\ncases_10000to50000=len(top_countries.query('(ConfirmedCases>=10000) & (ConfirmedCases <=50000)'))\nabove_50000=len(top_countries.query('(ConfirmedCases>=50000)'))\nnames='less_than_100', 'cases_100to1000', 'cases_1000to5000', 'cases_5000to10000','cases_10000to50000','above_50000'\nsize=[16,48,31,23,37,29]\nmy_circle=plt.Circle( (0,0), 0.5, color='white')\n\nplt.pie(size, labels=names, colors=['orange','purple','blue','skyblue','pink','yellow'])\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","05986df7":"dfc = train.groupby(['Date', 'Country_Region'])[['ConfirmedCases', 'Fatalities']].sum().reset_index()\nall_country_df = dfc.query('Date == @today')\nall_country_df['casedensity'] = np.log10(all_country_df['ConfirmedCases'] + 1)\nfig = px.choropleth(all_country_df, locations=\"Country_Region\", \n                    locationmode='country names', color=\"casedensity\", \n                    hover_name=\"Country_Region\", hover_data=[\"ConfirmedCases\"],\n                    range_color=[all_country_df['casedensity'].min(), all_country_df['casedensity'].max()], \n                    color_continuous_scale=\"purples\", \n                    title=f'Confirmed Case Density {today}')\n\ntrace1 = list(fig.select_traces())[0]\ntrace1.colorbar = go.choropleth.ColorBar(\n    tickvals=[0, 1, 2, 3, 4, 5],\n    ticktext=['1', '10', '100', '1000','10000'])\nfig.show()","b4405aca":"top_country_df = dfc.query('(Date == @today) & (ConfirmedCases > 1000)').sort_values('ConfirmedCases', ascending=False)\n\ntop_country_melt_df = pd.melt(top_country_df, id_vars='Country_Region', value_vars='ConfirmedCases')\n\nfig = px.bar(top_country_melt_df, x=\"Country_Region\", y=\"value\", color='variable',\n              title=f'Confirmed Cases as on {today}')\nfig.show()","79771383":"top10_countries = top_countries.sort_values('ConfirmedCases', ascending=False).iloc[:10]['Country_Region'].unique()\ntop10_countries_df = dfc[dfc['Country_Region'].isin(top10_countries)]\nfig = px.line(top10_countries_df,\n              x='Date', y='ConfirmedCases', color='Country_Region',\n              title=f'Confirmed Cases for top 10 country as on {today}')\nfig.show()","43d4e325":"data=pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/train.csv')\ndata.head()","d2120bf0":"data1= data.groupby(['Date','Country_Region'])[['ConfirmedCases','Fatalities']].sum().reset_index()\ndata2= data1[data1['Country_Region']=='India']\ndata2.drop(data2[data2['ConfirmedCases']==0].index,inplace=True)\ndata2['Newcases']=data2['ConfirmedCases']-data2['ConfirmedCases'].shift(1)\ndata2['New']= data2['Newcases'].rolling(window=3).mean()\ndata2.drop(data2[data2['Date']<='2020-03-01'].index,inplace=True)\ntrain1=data2.drop(['Country_Region','ConfirmedCases','Fatalities','Newcases'], axis = 1)\ntrain1.head()","2b555b91":"train1['Date']= pd.to_datetime(train1['Date'])\ntrain2=train1.set_index('Date')\nplt.xlabel('Date')\nplt.ylabel('NewCases')\nplt.plot(train2['New'])","5161592b":"train2.dropna(inplace=True)\nrolmean = train2['New'].rolling(window=5).mean()\nrolstd = train2['New'].rolling(window =5).std()","45f74d02":"from statsmodels.tsa.stattools import adfuller\nprint('Dicky fuller taste')\ndftest = adfuller(train2['New'],autolag='AIC')\ndfout = pd.Series(dftest[0:4],index=['Test statistics','P-value','#Lags used','Number of observations'])\nfor key,values in dftest[4].items():\n    dfout['Critical values(%s)'%key]=values\nprint(dfout)","646b3a97":"train2_logscale = np.log(train2['New'])\ntrain2_logscale.dropna(inplace=True)\nplt.plot(train2_logscale)","f11489ab":"movingAverage = train2_logscale.rolling(window=5).mean()\nmovingSTD = train2_logscale.rolling(window =5).std()\nplt.plot(train2_logscale)\nplt.plot(movingAverage,color='red')","de0c8ac7":"tm_log_avg = train2_logscale-movingAverage\ntm_log_avg.dropna(inplace=True)\ndef test_stationary(timeseries):\n    movingAverage =timeseries.rolling(window=5).mean()\n    movingSTD = timeseries.rolling(window=5).std()\n    orig = plt.plot(timeseries,color='blue',label='Orginal')\n    avg = plt.plot(movingAverage,color='black',label='Moving Average')\n    std = plt.plot(movingSTD,color='red',label='Rollong std')\n    plt.legend(loc='best')\n    plt.title('Rolling mean and rolling std')\n    plt.show()\n    \n    print('Dicky fuller taste')\n    dftest = adfuller(train2['New'],autolag='AIC')\n    dfout = pd.Series(dftest[0:4],index=['Test statistics','P-value','#Lags used','Number of observations'])\n    for key,values in dftest[4].items():\n        dfout['Critical values(%s)'%key]=values\n        print(dfout)","2ef8a764":"test_stationary(tm_log_avg)","22d2eef2":"exponential= train2_logscale.ewm(halflife=1,min_periods=0,adjust=True).mean()\nplt.plot(train2_logscale)\nplt.plot(exponential, color='red')","d8ced2e9":"mexponential = train2_logscale-exponential\ntest_stationary(mexponential)","53feaa1f":"datashifting = train2_logscale-train2_logscale.shift(1)\nplt.plot(datashifting)","68216ac7":"datashifting.dropna(inplace=True)\ntest_stationary(datashifting)","0a0f3f1d":"train2_logscale.dropna(inplace=True)\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nimport statsmodels.api as sm\n\ndecompose = seasonal_decompose(train2_logscale)\n\ntrend = decompose.trend\nseasonal=decompose.seasonal\nresidual=decompose.resid\n\nplt.subplot(411)\nplt.plot(train2_logscale,label='original')\nplt.legend(loc='best')\n\nplt.subplot(412)\nplt.plot(trend,label='trend')\nplt.legend(loc='best')\n\nplt.subplot(413)\nplt.plot(seasonal,label='seasonal')\nplt.legend(loc='best')\nplt.subplot(414)\nplt.plot(residual,label='residual')\nplt.legend(loc='best')\nplt.tight_layout()\n\ndecomposelog= residual\ndecomposelog.dropna(inplace=True)\ntest_stationary(decomposelog)","19ac239c":"decomposedlogdata = residual\ndecomposedlogdata.dropna(inplace=True)\ntest_stationary(decomposedlogdata)","68a2ae86":"from statsmodels.tsa.arima_model import ARIMA\nmodel =ARIMA(train2_logscale,order=(2,1,0))\nresults_AR=model.fit(disp=-1)\nplt.plot(datashifting)\nplt.plot(results_AR.fittedvalues,color='red')\nplt.title('RSS:%4F'%sum(results_AR.fittedvalues - datashifting**2))\nprint('Plotting AR model')","eed24c5d":"model =ARIMA(train2_logscale,order=(2,2,1))\nresults_MA =model.fit(disp=-1)\nplt.plot(datashifting)\nplt.plot(results_MA.fittedvalues,color='red')\nprint('Plotting MR model') ","e8b202ee":"model = ARIMA(train2_logscale,order=(2,0,1))\nresults_ARIMA= model.fit(disp=-1)\nplt.plot(datashifting)\nplt.plot(results_ARIMA.fittedvalues,color='red')","f3669476":"predictions_ARIMA_diff= pd.Series(results_ARIMA.fittedvalues,copy=True)\nprint(predictions_ARIMA_diff.head())","880471ea":"prediction_ARIMA_log=pd.Series(train2_logscale.ix[0],index= train2_logscale.index)\nprediction_ARIMA_log=prediction_ARIMA_log.add(predictions_ARIMA_diff,fill_value=0)\nprediction_ARIMA_log.head()","4b9d521d":"sns.set(rc={'figure.figsize':(16, 8)})\npredictions_ARIMA = np.exp(prediction_ARIMA_log)\nplt.plot(train2)\nplt.plot(predictions_ARIMA)","aa60386d":"results_ARIMA.plot_predict(1,70)\nx=results_ARIMA.forecast(steps=70)","a27f080f":"values0=x[0][::-1]\nvalues0=np.exp(values0)\nvalues1=x[1]\nvalues1=np.exp(values1)\nvalues= np.concatenate((values1,values0)) \nvalues","a5f05602":"ts = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/train.csv')\nts= ts[ts['Country_Region']=='India']\nts.drop(ts[ts['ConfirmedCases']==0].index,inplace=True)\nts['New']=ts['ConfirmedCases']-ts['ConfirmedCases'].shift(1)\nts.drop(ts[ts['Date']<= '2020-03-05'].index,inplace=True)\nts1= ts.groupby('Date')[['New']].sum().reset_index()\nts2 = np.array(ts1['New'])","c75a228a":"sns.distplot(values,hist=False,kde= True,kde_kws = {'shade': True, 'linewidth': 3})\nsns.distplot(ts2, hist= False,kde=True,kde_kws = {'shade': True, 'linewidth': 3})\nplt.title('Prediction')\nplt.xlabel('Days')\nplt.ylabel('Range')","b803c435":"# ARIMA MODEL","f8a7b567":"Corona virus disease (COVID-19) is an infectious\nrespiratory disease caused by a newly discovered\ncorona virus.\nIt has caused pandemic over *185 countries* around the\nworld i.e. 95.38% countries of the world have been\naffected more or less.\n\n**How does the corona disease spread?**\n\nThe corona virus spreads through the droplets of saliva\nor nasal discharge. When the patient sneezes or coughs\nthe virus transmits and affect the healthy person. The\nonly closely contact with the patient could be able to\nspread the disease.\n\nLet's forcast covid-19 situation in India with ARIMA (Auto Regressive Moving Average) model. With historical data analysis the model could be able to learn the pattern and could be able to forecast\/predict the data point for upcoming days\/months.","d5eeb320":"The KDE plot comprises the original daily new cases vs the predicted daily new cases according to the growth rate. As per the 21st lock down the number of new cases has been decreased a lot.\nAs per the research the COVID has affected **0.17% of the total population in US**, **0.15% of the total population of Germany**, **0.14% of the total population of France** and** 0.24% of the total popualtion of Itally**.\nIf we consider the total population of India, **27lkhs+** people would have been affected by COVID.","cfbc3ed8":"If we devide the countries in 0 to 6 range:( Africa: Low to negligeble cases density),(Europe: hight to severly affected cases), (Asia: heigh to moderaate case density),(Ociania: moderate case density),(North America: high to severly affected cases), (South America: moderate case density), (The caribbean: low case density), (Central America:low case density)","0bea0242":"The pick value is showing around 27th April to 4th may.And no new cases would be found near mid of June. And the maximum daily cases will reach 924+ which could be visualized from predicted data range given below. The gray shaded part is the min-max range of the predictable region. The ARIMA model could be able to find the decling portion properly once the growth rate start declining. "}}