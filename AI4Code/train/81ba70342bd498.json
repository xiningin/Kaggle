{"cell_type":{"9e0fbe0c":"code","a29caca0":"code","3fbaba89":"code","ffcf175a":"code","2687a52e":"code","0e0c8667":"code","435f07d6":"code","0b27bade":"code","75cc9bb0":"code","b6e93f1c":"code","7ddbdbb1":"code","0e0392ce":"code","2d3aa182":"code","5988d924":"code","c7be76d7":"code","5af68ee8":"code","086adf5d":"code","3d136e3b":"code","93e6ff66":"code","e23d7bad":"code","fb523999":"code","c0d0afae":"code","de86797d":"code","8fc369f4":"code","06eb8c62":"code","bcf8862e":"code","550bb32a":"code","af54b1bd":"code","3458c8eb":"code","c44b5d4e":"code","89eb0404":"markdown","a9d7ab75":"markdown","a35b589e":"markdown","e515fb05":"markdown","5f6084e8":"markdown","8d0febff":"markdown","47792b62":"markdown","10d9cd9e":"markdown","0e784c7f":"markdown","2118f03e":"markdown","3a190eb0":"markdown","f6932644":"markdown","03fc570f":"markdown","ef42299c":"markdown","ccfc08df":"markdown","c16e5095":"markdown","ba1e7ae9":"markdown","4d912cc8":"markdown"},"source":{"9e0fbe0c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nfrom collections import Counter\nimport math\n\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.utils import shuffle\n\nimport matplotlib.pyplot as plt\nimport seaborn \nseaborn.set()\n\nfrom IPython.core.display import display, HTML\nfrom collections import defaultdict\nfrom sklearn.decomposition import TruncatedSVD\nfrom scipy.sparse import csr_matrix\n\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a29caca0":"ratings = pd.read_csv('..\/input\/train.csv') #\u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nmovies = pd.read_csv('..\/input\/movies.csv') #\u0444\u0430\u0439\u043b \u0441 \u043c\u0435\u0442\u0430-\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0444\u0438\u043b\u044c\u043c\u0430\u0445\ntags = pd.read_csv('..\/input\/tags.csv') #\u0444\u0430\u0439\u043b \u0441 \u043c\u0435\u0442\u0430-\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0442\u0435\u0433\u0430\u0445","3fbaba89":"##\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0442\u044d\u0433\u043e\u0432\n#un_tags = pd.unique(tags.tag)\n#for i in range(len(un_tags)):\n#    tagsi = tags[tags.tag == un_tags[i]]\n#    for j in range(tagsi.shape[0]):\n#        c1 = np.where(ratings.userId - tagsi.userId.values[j] == 0)\n#        c2 = np.where(ratings.movieId - tagsi.movieId.values[j] == 0)\n#        a = np.intersect1d(c1, c2)\n#        if a:\n#            print(i,j)","ffcf175a":"print(ratings.shape)\nratings.tail()","2687a52e":"print(movies.shape)\nmovies.tail()","0e0c8667":"movies.loc[movies['genres'] == '(no genres listed)']","435f07d6":"vec = CountVectorizer()\nxv = vec.fit_transform(movies.genres)    \nmovies_vec = pd.DataFrame(xv.toarray(),columns = vec.get_feature_names())\nprint(movies_vec.shape)\nmovies_vec.tail()","0b27bade":"movies_vec_drop = movies_vec.drop(columns=['no','genres', 'listed'])\nprint(movies_vec_drop.shape)\nmovies_vec_drop.tail()","75cc9bb0":"movies_all = pd.concat([movies,movies_vec_drop],axis=1)\nmovies_all = movies_all.drop('genres',axis=1);\nprint(movies_all.shape)\nmovies_all.tail()","b6e93f1c":"ratings_part2 = movies_all.set_index('movieId').loc[ratings.movieId].reset_index().drop(['movieId','title'],axis=1);\nprint(ratings_part2.shape)\nratings_part2","7ddbdbb1":"ratings_new = pd.concat([ratings,ratings_part2],axis=1)\nprint(ratings_new.shape)\nratings_new","0e0392ce":"ratings_new2 = ratings_new.copy()\nfor i in range(len(ratings_part2.columns)):\n    ratings_new2[ratings_part2.columns[i]] = ratings_new[ratings_part2.columns[i]].mul(ratings_new.rating-3)","2d3aa182":"userId_un = pd.unique(ratings_new.userId)\nmatrix_userId_un = np.zeros([len(userId_un),len(ratings_part2.columns)])\nk=0\nfor i in userId_un:\n   matrix_userId_un[k,:] = np.sum(ratings_new2[ratings_new.userId==i][ratings_part2.columns],axis=0)\n   k+=1","5988d924":"rows=[];\ncols=[];\nvals=[];\nfor i in range(matrix_userId_un.shape[0]):\n    for j in range(matrix_userId_un.shape[1]):\n        if matrix_userId_un[i,j]>0:\n            rows.append(i)\n            cols.append(j+movies.shape[0])\n            #cols.append(j)\n            vals.append(matrix_userId_un[i,j])","c7be76d7":"ratings = ratings_new2.copy()","5af68ee8":"with open('..\/input\/test_user_id.list', 'r') as file:\n    test_user_id = file.read()\ntest_user_id = [int(user_id) for user_id in test_user_id.split(',')]","086adf5d":"sorted_timestamps = sorted(ratings['timestamp'])\ntotal_actions = len(sorted_timestamps)\nborder_timestamp = sorted_timestamps[int(total_actions*0.75)]\ntrain = ratings[ratings.timestamp <= border_timestamp]\nvalidation = ratings[ratings.timestamp > border_timestamp]\ntrain.shape, validation.shape","3d136e3b":"#train = ratings[:int(ratings.shape[0] * 0.75)]\n#validation = ratings[int(ratings.shape[0] * 0.75):]\n#train.shape, validation.shape","93e6ff66":"K = 30\nmax_n = 35\n\nx = [i for i in range(1, max_n)]\ny = [(i <= K) * 1\/math.log2(i + 1) for i in range(1, max_n)]\n\nplt.figure(figsize=(10, 6))\nplt.title(\"\u041e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438 \u043d\u0430 i-\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 NDCG@{}\".format(K))\nplt.xlabel(\"\u041d\u043e\u043c\u0435\u0440 \u043f\u043e\u0437\u0438\u0446\u0438\u0438\")\nplt.ylabel(\"\u041e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438\")\nplt.text(5, 0.1, \"\"\"\u043f\u043e\u0441\u043b\u0435 {}\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0440\u0435\u0437\u043a\u0438\u0439 \u0441\u043a\u0430\u0447\u043e\u043a \u0432 \u043d\u043e\u043b\u044c,\n\u0442\u0430\u043a \u043a\u0430\u043a \u043c\u0435\u0442\u0440\u0438\u043a\u0430 NDCG@{} \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0432\u0441\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 > {} \u043d\u0435\u0432\u0430\u0436\u043d\u044b\u043c\u0438\"\"\".format(K, K, K), bbox=dict(facecolor='white', alpha=0.5))\n\nplt.plot(x, y);\nplt.show();","e23d7bad":"def dcg_at_k(r, k, method=0):\n    \"\"\"\n    Args:\n        r: Relevance scores (list or numpy) in rank order\n            (first element is the first item)\n        k: Number of results to consider\n        method: If 0 then weights are [1.0, 1.0, 0.6309, 0.5, 0.4307, ...]\n                If 1 then weights are [1.0, 0.6309, 0.5, 0.4307, ...]\n    Returns:\n        Discounted cumulative gain\n    \"\"\"\n    r = np.asfarray(r)[:k]\n    if r.size:\n        if method == 0:\n            return r[0] + np.sum(r[1:] \/ np.log2(np.arange(2, r.size + 1)))\n        elif method == 1:\n            return np.sum(r \/ np.log2(np.arange(2, r.size + 2)))\n        else:\n            raise ValueError('method must be 0 or 1.')\n    return 0.\n\n\n\ndef ndcg_at_k(r, k, method=0):\n    \"\"\"\n    Args:\n        r: Relevance scores (list or numpy) in rank order\n            (first element is the first item)\n        k: Number of results to consider\n        method: If 0 then weights are [1.0, 1.0, 0.6309, 0.5, 0.4307, ...]\n                If 1 then weights are [1.0, 0.6309, 0.5, 0.4307, ...]\n    Returns:\n        Normalized discounted cumulative gain\n    \"\"\"\n    dcg_max = dcg_at_k(sorted(r, reverse=True), k, method)\n    if not dcg_max:\n        return 0.\n    return dcg_at_k(r, k, method) \/ dcg_max","fb523999":"class TopRecommender(object):\n    def fit(self, train_data):\n        counts = Counter(train_data['movieId'])\n        self.predictions = counts.most_common()\n        \n    def predict(self, user_id, n_recommendations=10):\n        return [movie_id for movie_id, frequency in self.predictions[:n_recommendations]]","c0d0afae":"class SVDRecommender(object):\n    \n    def create_viewed_matrix(self,data):\n        self.users = defaultdict(lambda: len(self.users))\n        self.movies = defaultdict(lambda: len(self.movies))\n        rows = data.userId.apply(lambda userId: self.users[userId])\n        cols = data.movieId.apply(lambda movieId: self.movies[movieId])\n        vals = [1.0]* len(cols)\n        print(len(rows))\n        self.viewed_matrix = csr_matrix((vals, (rows, cols)))\n        \n    def fit(self, data, n_components = 30):    \n        \n        self.top_recommender = TopRecommender()\n        self.top_recommender.fit(data)\n        \n        #\u0418\u043c\u0438\u0442\u0430\u0446\u0438\u044f \u043d\u0435\u044f\u0432\u043d\u043e\u0439 \u043e\u0431\u0440\u043a\u0442\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438\n        data_implicit = data\n        \n        #\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u0438\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0438\u044f\n        #UserID -> \u041d\u043e\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0435\n        #MovieId -> \u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0435\n        self.users = defaultdict(lambda: len(self.users))\n        self.movies = defaultdict(lambda: len(self.movies))\n       \n        #\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c -> \u0444\u0438\u043b\u044c\u043c\n        rows = data.userId.apply(lambda userId: self.users[userId])\n        cols = data.movieId.apply(lambda movieId: self.movies[movieId])\n        #vals = [1.0]* len(cols)\n        vals = data.rating-3\n        self.interactions_matrix = csr_matrix((vals, (rows, cols)))\n        \n        #\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c SVD\n        self.model = TruncatedSVD(n_components = n_components, algorithm='arpack') #algorithm='randomized'\n        self.model.fit(self.interactions_matrix)\n        \n        #\u041e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043a\u043e\u043b\u043e\u043d\u043a\u0430 -> ID \u0444\u0438\u043b\u044c\u043c\u0430. \u041f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \n        self.movies_reverse = {}\n        for movie_id in self.movies:\n            movie_idx = self.movies[movie_id]\n            self.movies_reverse[movie_idx] = movie_id\n            \n    def fit_huge(self, data, rows_add, cols_add, vals_add, n_components = 30,lys=5):    \n        \n        self.top_recommender = TopRecommender()\n        self.top_recommender.fit(data)\n        \n        #\u0418\u043c\u0438\u0442\u0430\u0446\u0438\u044f \u043d\u0435\u044f\u0432\u043d\u043e\u0439 \u043e\u0431\u0440\u043a\u0442\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438\n        data_implicit = data\n        \n        #\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u0438\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0438\u044f\n        #UserID -> \u041d\u043e\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0435\n        #MovieId -> \u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0435\n        self.users = defaultdict(lambda: len(self.users))\n        self.movies = defaultdict(lambda: len(self.movies))\n       \n        #\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c -> \u0444\u0438\u043b\u044c\u043c\n        rows = data.userId.apply(lambda userId: self.users[userId])\n        cols = data.movieId.apply(lambda movieId: self.movies[movieId])\n        #vals = [1.0]* len(cols)\n        #vals = data.rating-3\n        \n        def wtime(times,maxw,maxtime,stdt):\n            return maxw*np.exp(-(times-maxtime)**2\/(2*stdt*stdt))\n        maxtime=max(data.timestamp)\n        stdt=lys*(365*3600*24)#YEARS\n        vals = (data.rating-3)* wtime(data.timestamp,1,maxtime,stdt)\n        \n        rows = np.array(rows)\n        rows_add = np.array(rows_add)\n        cols = np.array(cols)\n        cols_add = np.array(cols_add)\n        vals = np.array(vals)\n        vals_add = np.array(vals_add)\n        rows_new = np.concatenate([rows,rows_add])\n        cols_new = np.concatenate([cols,cols_add])\n        vals_new = np.concatenate([vals,vals_add])\n        \n        self.interactions_matrix = csr_matrix((vals_new, (rows_new, cols_new)))\n        \n        #\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c SVD\n        self.model = TruncatedSVD(n_components = n_components, algorithm='arpack') #algorithm='randomized'\n        self.model.fit(self.interactions_matrix)\n        \n        #\u041e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043a\u043e\u043b\u043e\u043d\u043a\u0430 -> ID \u0444\u0438\u043b\u044c\u043c\u0430. \u041f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \n        self.movies_reverse = {}\n        for movie_id in self.movies:\n            movie_idx = self.movies[movie_id]\n            self.movies_reverse[movie_idx] = movie_id           \n        \n    def predict(self, user_id, n_recommendations=10):  \n        if user_id not in self.users:\n            return self.top_recommender.predict(user_id,n_recommendations)\n        \n        #\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0441\u043d\u0438\u0436\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438     \n        user_interactions = self.interactions_matrix.getrow(self.users[user_id])    \n        user_low_dimensions = self.model.transform(user_interactions)  \n        return self.predict_low_dimension(user_low_dimensions, user_interactions, n_recommendations)\n    \n    def predict_low_dimension(self, user_low_dimensions, user_interactions, max_n=10):\n        #\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n        user_predictions = self.model.inverse_transform(user_low_dimensions)[0]\n        recommendations = []\n        \n        #\u041f\u0440\u043e\u0431\u0435\u0433\u0430\u0435\u043c \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n        for movie_idx in reversed(np.argsort(user_predictions)):\n            #\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0444\u0438\u043b\u044c\u043c \u043a \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0435\u0433\u043e \u0435\u0449\u0435 \u043d\u0435 \u0441\u043c\u043e\u0442\u0440\u0435\u043b\n            if user_interactions[0, movie_idx] == 0.0:\n                movie = self.movies_reverse[movie_idx]\n                score = user_predictions[movie_idx]\n                #recommendations.append((movie, score))\n                recommendations.append(movie)\n            if (len(recommendations) >= max_n):\n                return recommendations","de86797d":"#recommender_train = SVDRecommender()\n#recommender_train.create_viewed_matrix(train)\n#viewed_matrix_dense = recommender_train.viewed_matrix.todense()\n#usrs = recommender_train.users\n#movs = recommender_train.movies\n#print(len(usrs))\n#print(len(movs))","8fc369f4":"#recommender_train = TopRecommender()\nrecommender_train = SVDRecommender()\nrecommender_train.fit_huge(train, rows, cols, vals,n_components = 30,lys=0.1)","06eb8c62":"#from lightgbm import LGBMRanker\n#lgbranker = LGBMRanker()\n#csrmatrix = recommender_train.return_inter_matrix(train)\n#lgbranker.fit(csrmatrix,train.userId)","bcf8862e":"verbose = True\nnum_to_print = 10\ntotal_ndcg = 0\n\nfor user_id, group in validation.groupby('userId'):\n    ground_truth_films = [int(data.movieId) for row, data in group.iterrows()]\n    recommendations = recommender_train.predict(user_id, n_recommendations=10)\n    relevance_scores = []\n    for rec in recommendations:\n        if rec in ground_truth_films:\n            relevance_scores.append(len(ground_truth_films) - ground_truth_films.index(rec))\n        else:\n            relevance_scores.append(0)\n    total_ndcg += ndcg_at_k(relevance_scores, k=10)\n    \n    if verbose and np.random.random() > 0.999:\n        user_films_train = train[train.userId == user_id].movieId.values\n        print('\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: ', user_id)\n        print(\n            '\u0424\u0438\u043b\u044c\u043c\u044b \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:',\n            [movies[movies.movieId == movie_id].title.values[0] for movie_id in user_films_train[:num_to_print]],\n            '\\n'\n        )\n        print(\n            '\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043d\u044b\u0435 \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u0444\u0438\u043b\u044c\u043c\u044b: ', \n            [movies[movies.movieId == movie_id].title.values[0] for movie_id in ground_truth_films[:num_to_print]],\n            '\\n'\n        )\n        print(\n            '\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0442\u043e\u043f-\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0435\u0440\u0430: ', \n            [movies[movies.movieId == rec_id].title.values[0] for rec_id in recommendations],\n            '\\n'\n        )\n        print('\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 NDCG@10 = ', ndcg_at_k(relevance_scores, k=10), '\\n\\n')","550bb32a":"total_ndcg \/ validation.shape[0]","af54b1bd":"#recommender = TopRecommender()\nrecommender = SVDRecommender()\nrecommender.fit_huge(ratings, rows, cols, vals,n_components = 30,lys=0.1)","3458c8eb":"recommender.predict(user_id=test_user_id[0], n_recommendations=10)","c44b5d4e":"with open('submity.csv', 'w') as f:\n    f.write('userId,movieId\\n')\n    for user_id in test_user_id:\n        recommendations = recommender.predict(user_id=user_id, n_recommendations=10)\n        for rec in recommendations:\n            f.write(str(user_id) + ',' + str(int(rec)) + '\\n')\n    print('\u041e\u0442\u043b\u0438\u0447\u043d\u043e! \u0412\u0440\u0435\u043c\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0444\u0430\u0439\u043b submit.csv \u043d\u0430 kaggle!')","89eb0404":"### \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SVDRecommender","a9d7ab75":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438\n\u0417\u0430\u0434\u0430\u0447\u0430 - \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u044c \u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u0442\u043e\u043c\u0443 \u0438\u043b\u0438 \u0438\u043d\u043e\u043c\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e. \u0420\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u044c - \u044d\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0435\u0437\u0443\u044e\u0449\u0430\u044f \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u044a\u0435\u043a\u0442(\u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 - \u0444\u0438\u043b\u044c\u043c) \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e. \u0427\u0435\u043c \u0432\u044b\u0448\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u0438, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0444\u0438\u043b\u044c\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e.\n\n\u041f\u0440\u0438 \u044d\u0442\u043e\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u044b \u0441\u0442\u0440\u043e\u0438\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043d\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 - \u043d\u0430\u0439\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u043c\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430\u043c \u043d\u0435 \u0432\u0430\u0436\u043d\u043e \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u0438, \u0430 \u0432\u0430\u0436\u0435\u043d \u043f\u043e\u0440\u044f\u0434\u043e\u043a, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043c\u044b \u0432\u044b\u0441\u0442\u0440\u043e\u0438\u043b\u0438 \u0444\u0438\u043b\u044c\u043c\u044b \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u0438.\n\n\u0422\u0430\u043a\u0430\u044f (\u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u043c \u0432\u0430\u0436\u043d\u043e \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b) \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0447\u0435\u0439 \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438. \u041a\u0440\u043e\u043c\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0437\u0430\u0434\u0430\u0447\u0443 \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0448\u0430\u0435\u0442 \u043f\u043e\u0438\u0441\u043a\u043e\u0432\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430: \u0435\u0435 \u0437\u0430\u0434\u0430\u0447\u0430 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0438\u0442\u044c web-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.\n\n\u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u043c\u0435\u0440\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430: NDCG (Normalized Discounted Cummulative Gain). \u0415\u0435\u0435 \u0438\u0434\u0435\u044f \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u043d\u0430 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043c\u044b \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0438\u043b\u0438 \u0444\u0438\u043b\u044c\u043c\u044b \u0441 \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u043c (\u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0442\u043e\u044f\u0442 \u0441\u0430\u043c\u044b\u0435 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u043c\u044b, \u0430 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0430\u043c\u044b\u0435 \u043d\u0435\u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435). \u0415\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u0442\u043e\u0438\u0442 \u0434\u0430\u043b\u044c\u0448\u0435 \u0442\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430 \u0433\u0434\u0435 \u0435\u043c\u0443 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043e \u0441\u0442\u043e\u044f\u0442\u044c - NDCG \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442 \u0441\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043e\u043d\u0430 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043d\u043e\u043c\u0435\u0440 \u043d\u043e\u043c\u0435\u0440 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u043d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u0435 \u043f\u043e\u0440\u044f\u0434\u043a\u0430: \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u0447\u0442\u043e \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0435\u0441\u0442\u0430\u043c\u0438 1-\u0439 \u0438 10\u0439 \u0444\u0438\u043b\u044c\u043c\u044b \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0445\u0443\u0436\u0435 \u0447\u0435\u043c 101-\u0439 \u0438 110-\u0439. \u041d\u0430 \u043f\u0435\u0440\u0432\u0443\u044e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u0442 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e (\u0438 \u0442\u0430\u043c \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u043b \u0431\u044b \u0431\u044b\u0438\u0442\u044c 10\u043c), \u0430 \u0434\u0430 101-\u0433\u043e \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0435 \u0434\u043e\u0439\u0434\u0435\u0442.\n\n\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0432 NDCG \u0443\u0431\u044b\u0432\u0430\u0435\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u043c \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0437\u0430\u043a\u043e\u043d\u043e\u043c.\n\n\u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 NDCG@K, \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0435\u043c \u0447\u0435\u043c K \u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0432\u043d\u043e\u0439 \u043d\u0443\u043b\u044e.\n\n\u0411\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u043f\u0440\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0443 NDCG (\u0441 \u0444\u043e\u0440\u043c\u0443\u043b\u0430\u043c\u0438!) \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435: https:\/\/habr.com\/company\/econtenta\/blog\/303458\/","a35b589e":"### \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0441 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c","e515fb05":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 NDCG@10 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u043c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435","5f6084e8":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0442\u0435\u0441\u0442\u0435","8d0febff":"### \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e","47792b62":"\u0422\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e - \u043d\u0430\u0431\u043e\u0440 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f. \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0438\u0445 \u0432 \u043b\u0438\u0441\u0442 test_user_id. ","10d9cd9e":"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u0441 \u043c\u0435\u0442\u0430-\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0444\u0438\u043b\u044c\u043c\u0430\u0445 movies \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a:","0e784c7f":"\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0436\u0430\u043d\u0440\u044b \u043a \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 ratings:","2118f03e":"## \u0421\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0435 kaggle\n\nhttps:\/\/www.kaggle.com\/c\/recommendations-skill-factory-mlo-11\/leaderboard\n\n - \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u0435\u043b\u0430\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043e\u043d\u043b\u0430\u0439\u043d-\u043a\u0438\u043d\u043e\u0442\u0435\u0430\u0442\u0440\u0430. \n - \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u043e\u0432, \u0430 \u0442\u0430\u043a \u0436\u0435 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043c\u0435\u0442\u0430-\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0444\u0438\u043b\u044c\u043c\u0430\u0445. \n - \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430: NDCG@10","3a190eb0":"\u0412 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u044b \u0436\u0430\u043d\u0440\u044b:","f6932644":"\u0423\u043c\u043d\u043e\u0436\u0438\u043c \u0436\u0430\u043d\u0440\u044b \u043d\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438:","03fc570f":"\u041a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0436\u0430\u043d\u0440\u044b \u0438 \u0443\u0431\u0435\u0440\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b  \"no\", \"genres\" ,\"listed\"","ef42299c":"### \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","ccfc08df":"### \u041e\u0431\u0443\u0447\u0438\u043c \u0441\u0432\u0434-\u0440\u0435\u043a\u043e\u043c\u043c\u0435\u043d\u0434\u0435\u0440 \u043d\u0430 \u0432\u0441\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\n","c16e5095":"\u0421\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0436\u0430\u043d\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c:","ba1e7ae9":"\u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0438 \u0441\u0442\u0440\u043e\u043a \u0441\u0436\u0430\u0442\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b:","4d912cc8":"### \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u043e\u043f-\u0440\u0435\u043a\u043e\u043c\u043c\u0435\u043d\u0434\u0435\u0440\u0430"}}