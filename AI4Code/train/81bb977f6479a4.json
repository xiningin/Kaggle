{"cell_type":{"a8d0a3c9":"code","a981cc1a":"code","1ad5c9a3":"code","187b158e":"code","03720cda":"code","c8f701c7":"code","ed43be0d":"code","d8839657":"code","b75f227b":"code","e47710b8":"code","09ba66dd":"code","53f382d8":"code","7d04897b":"code","f0cd728f":"code","d8db56c1":"code","b46def25":"code","3a75d13b":"code","bb9c60de":"markdown","04c30c07":"markdown","d7b30b48":"markdown","7523aa57":"markdown","aaeacf71":"markdown","239c5989":"markdown","d8b55472":"markdown","b925df6e":"markdown","8d46899e":"markdown","224b2317":"markdown","b71d359f":"markdown","11823c16":"markdown","aeeffe57":"markdown"},"source":{"a8d0a3c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a981cc1a":"import glob\n\ndef get_labels_images(filepath):\n    data_dict = {}\n    for directory in glob.glob(filepath):\n        images = []\n        for file in glob.glob(directory+'\/color_*.png'):\n            images.append(file)\n        data_dict.setdefault(directory[-1], images)\n        \n    return data_dict","1ad5c9a3":"dataset_dir = os.path.abspath('..\/input\/asl-rgb-depth-fingerspelling-spelling-it-out\/fingerspelling5\/dataset5\/*\/*')\ndata_dict = get_labels_images(dataset_dir)","187b158e":"import cv2\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize = (25,20))\n\nfor i, (k,v) in enumerate(data_dict.items()):\n    img = cv2.imread(v[0])\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = cv2.resize(img, (64,64))\n    plt.subplot(4,6,i+1)\n    plt.imshow(img)\n    plt.title(k + \":\" + os.path.basename(v[0]))\n    \nplt.show()","03720cda":"def preprocess_images(dictionary, height = 64, width = 64):\n    images = []\n    labels = []\n    for k,v in dictionary.items():\n        for file in v:\n            img = cv2.imread(file)\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n            img = cv2.resize(img, (height, width))\n            img = img \/ 255.\n            images.append(img)\n            labels.append(k)\n    \n    return (np.array(images), np.array(labels).reshape(-1,1))\n\nimages, labels = preprocess_images(data_dict)","c8f701c7":"from sklearn.preprocessing import LabelBinarizer\n\nlbl_binarizer = LabelBinarizer()\nlabels = lbl_binarizer.fit_transform(labels)","ed43be0d":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, Y_train, Y_test = train_test_split(images, labels, test_size = 0.2, random_state = 1)\nX_train, X_dev, Y_train, Y_dev = train_test_split(X_train, Y_train, test_size = 0.25, random_state = 1)\n\nprint('Number of training samples:{}, Shape: {}'.format(len(X_train), X_train.shape))\nprint('Number of dev samples:{}, Shape: {}'.format(len(X_dev), X_dev.shape))\nprint('Number of test samples:{}, Shape: {}'.format(len(X_test), X_test.shape))","d8839657":"plt.figure(figsize = (25,15))\n\nfor i in range(5):\n    plt.subplot(3,5,i+1)\n    plt.imshow(X_train[i])\n    plt.title('Train Set: {}'.format(lbl_binarizer.classes_[np.argmax(Y_train[i], axis = -1)]))\n\nfor i in range(5,10):\n    plt.subplot(3,5,i+1)\n    plt.imshow(X_dev[i])\n    plt.title('Dev Set: {}'.format(lbl_binarizer.classes_[np.argmax(Y_dev[i], axis = -1)]))\n\nfor i in range(10,15):\n    plt.subplot(3,5,i+1)\n    plt.imshow(X_test[i])\n    plt.title('Test Set: {}'.format(lbl_binarizer.classes_[np.argmax(Y_test[i], axis = -1)]))\n\nplt.show()","b75f227b":"import keras\nfrom keras.applications.vgg19 import VGG19\n\nimg_height = 64\nimg_width = 64\nimg_channels = 3\nnum_classes = labels.shape[1]\nlearning_rate = 1e-5\nweights = '..\/input\/vgg19\/vgg19_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\ndef build_model():\n    base = VGG19(include_top = False, weights = weights, input_shape = (img_height, img_width, img_channels))\n    X = base.output\n    X = keras.layers.Flatten()(X)\n    X = keras.layers.Dense(512, activation = 'relu')(X)\n    X = keras.layers.Dropout(0.4)(X)\n    X = keras.layers.BatchNormalization()(X)\n    X = keras.layers.Dense(512, activation = 'relu')(X)\n    X = keras.layers.Dropout(0.3)(X)\n    X = keras.layers.BatchNormalization()(X)\n    preds = keras.layers.Dense(num_classes, activation = 'softmax')(X)\n    \n    model = keras.models.Model(inputs = base.input, outputs = preds)\n    model.compile(optimizer = keras.optimizers.RMSprop(lr = learning_rate), loss = 'categorical_crossentropy', metrics = ['accuracy'])\n    \n    return model","e47710b8":"model = build_model()\nmodel.summary()","09ba66dd":"callbacks = [keras.callbacks.EarlyStopping(monitor='val_loss', patience = 5, verbose = 0, restore_best_weights = True)]\n\nhistory = model.fit(X_train, Y_train,\n                    epochs = 25,\n                    batch_size = 128,\n                    validation_data = (X_dev, Y_dev),\n                    callbacks = callbacks)","53f382d8":"acc = history.history['acc']\nval_acc = history.history['val_acc']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc) + 1)\n\nplt.figure(figsize = (10, 7))\n\nplt.subplot(1,2,1)\nplt.plot(epochs, acc, c = 'b', label = 'Training Accuracy')\nplt.plot(epochs, val_acc, c = 'g', label = 'Validation Accuracy')\nplt.title('Training vs. Validation Accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.legend()\n\nplt.subplot(1,2,2)\nplt.plot(epochs, loss, c = 'b', label = 'Training Loss')\nplt.plot(epochs, val_loss, c = 'g', label = 'Validation Loss')\nplt.title('Training vs. Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","7d04897b":"eval_loss, eval_acc = model.evaluate(X_test, Y_test)\nprint('Evaluation Loss: {:.4f}, Evaluation Accuracy: {:.2f}'.format(eval_loss, eval_acc * 100))","f0cd728f":"preds = model.predict(X_test)\n\nplt.figure(figsize = (25,20))\nfor i in range(20):\n    plt.subplot(4,5,i+1)\n    plt.imshow(X_test[i])\n    plt.title('true: {} - pred: {}'.format(lbl_binarizer.classes_[np.argmax(Y_test[i], axis = -1)], lbl_binarizer.classes_[np.argmax(preds[i], axis = -1)]))\n    \nplt.show()","d8db56c1":"custom_images_path = '..\/input\/custom-images\/'\n\ndef prepare_custom_images(filepath, height = 64, width = 64):\n    images = []\n    for file in os.listdir(filepath):\n        img = cv2.imread(os.path.join(filepath,file))\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        img = cv2.resize(img, (height, width))\n        img = img \/ 255.\n        images.append(img)\n    \n    return np.array(images)\n\ncustom_images = prepare_custom_images(custom_images_path)","b46def25":"custom_preds = model.predict(custom_images)\n\nplt.figure(figsize = (25,20))\nfor i in range(len(custom_preds)):\n    plt.subplot(1,2,i+1)\n    plt.imshow(custom_images[i])\n    plt.title('pred: {}'.format(lbl_binarizer.classes_[np.argmax(custom_preds[i], axis = -1)]))\n    \nplt.show()","3a75d13b":"model_path = 'models'\nif not os.path.isdir(model_path): os.mkdir(model_path)\n\nmodel.save('models\/my_model.h5')","bb9c60de":"### Save model","04c30c07":"### Evaluate model on test set","d7b30b48":"### Define our callbacks and train our model","7523aa57":"### Plot our metrics","aaeacf71":"### Encode our labels","239c5989":"### Define function to preprocess images","d8b55472":"### Make predictions","b925df6e":"### Test with custom images","8d46899e":"### Define function to store labels and images into a dictionary","224b2317":"### Define function to create train, dev, test split","b71d359f":"### Display some images for sanity","11823c16":"### Display some images for sanity","aeeffe57":"### Build our model"}}