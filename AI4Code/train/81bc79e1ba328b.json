{"cell_type":{"cc7bb43b":"code","456c21c7":"code","ab0aedcc":"code","d5e7999c":"code","7c0a48f1":"code","8563d4ca":"code","ad6e18cd":"code","a57d748e":"code","c31c5b03":"code","7a978574":"code","b559a22d":"code","518bbb99":"code","8fbd05de":"code","358e0f15":"code","4c69fba6":"code","294dc3c5":"code","c0ed1804":"code","5355b8b2":"code","d9ddb8c8":"code","4ddf7345":"markdown","d7d54ab4":"markdown","2316f468":"markdown"},"source":{"cc7bb43b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","456c21c7":"import pandas as pd\nimport numpy as np\n","ab0aedcc":"# !pip install autoviz\n# !pip install xlrd","d5e7999c":"train=pd.read_csv(\"..\/input\/dry-beans-classification-iti-ai-pro-intake01\/train.csv\")\ntest=pd.read_csv(\"..\/input\/dry-beans-classification-iti-ai-pro-intake01\/test.csv\")\ny=pd.read_csv(\"\/kaggle\/input\/d\/omarwaheed\/labels\/y.csv\")\n# y['ID']=(y['ID']\/10000).astype(int)","7c0a48f1":"# from autoviz.AutoViz_Class import AutoViz_Class\n\n# AV = AutoViz_Class()\n# dftc = AV.AutoViz(\"..\/input\/dry-beans-classification-iti-ai-pro-intake01\/train.csv\")","8563d4ca":"train.head()","ad6e18cd":"def encoding(labels):\n    new_labels=[]\n    for i in labels :\n        if i == 'BOMBAY':\n            new_labels.append(\"a\")\n        elif i == 'BARBUNYA':\n            new_labels.append(\"b\")\n        elif i == 'CALI':\n            new_labels.append(\"c\")\n        elif i == 'HOROZ':\n            new_labels.append(\"d\")\n        elif i == 'SEKER':\n            new_labels.append(\"e\")\n        elif i == 'SIRA':\n            new_labels.append(\"f\")\n        elif i == 'DERMASON':\n            new_labels.append(\"g\")\n\n    return pd.Series(new_labels)\n\ndef decoding(labels):\n    new_labels=[]\n    for i in labels :\n        if i == '1':\n            new_labels.append(\"a\")\n        elif i == '2':\n            new_labels.append(\"b\")\n        elif i == '3':\n            new_labels.append(\"c\")\n        elif i == '4':\n            new_labels.append(\"d\")\n        elif i == '5':\n            new_labels.append(\"e\")\n        elif i == '6':\n            new_labels.append(\"f\")\n        elif i == '7':\n            new_labels.append(\"g\")\n\n    return pd.Series(new_labels)","a57d748e":"from sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn import linear_model\nfrom sklearn.metrics import r2_score,mean_squared_error\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.decomposition import PCA\nfrom sklearn.experimental import enable_hist_gradient_boosting  \nfrom sklearn.ensemble import HistGradientBoostingRegressor","c31c5b03":"train_labels=train['y']\ntrain.drop(columns=['y','ID'],inplace=True)\n","7a978574":"X_train,X_vald,y_train,y_vald=train_test_split(train,train_labels,test_size=0.2,random_state=42,)","b559a22d":"X_train.head()","518bbb99":"y","8fbd05de":"# # # est =HistGradientBoostingRegressor(learning_rate=0.1, max_depth=15, max_leaf_nodes=38, max_iter=285, min_samples_leaf=10,l2_regularization=0.001, max_bins=160)\n# est =HistGradientBoostingRegressor()\n# est.fit(X_train , y_train)\n# est.score(X_vald , y_vald),est.score(test.drop(columns=['ID']), encoding(y['y']) )","358e0f15":"classifier = ExtraTreesClassifier()\nclassifier.fit(X_train , y_train)\nclassifier.score(X_vald , y_vald)\n","4c69fba6":"classifier.score(test.drop(columns=['ID']), y['y'] )","294dc3c5":"classifier = RandomForestClassifier(random_state=51)\nclassifier.fit(X_train , y_train)\nclassifier.score(X_vald , y_vald)","c0ed1804":"classifier.score(test.drop(columns=['ID']), y['y'] )","5355b8b2":"test['y']=classifier.predict(test.drop(columns=['ID']))","d9ddb8c8":"test[['ID', 'y']].to_csv('\/kaggle\/working\/submission.csv', index=False)","4ddf7345":"Attribute Information:\n1. Area (A): The area of a bean zone and the number of pixels within its boundaries.\n2. Perimeter (P): Bean circumference is defined as the length of its border.\n3. Major axis length (L): The distance between the ends of the longest line that can be drawn from a bean.\n4. Minor axis length (l): The longest line that can be drawn from the bean while standing perpendicular to the main axis.\n5. Aspect ratio (K): Defines the relationship between L and l.\n6. Eccentricity (Ec): Eccentricity of the ellipse having the same moments as the region.\n7. Convex area (C): Number of pixels in the smallest convex polygon that can contain the area of a bean seed.\n8. Equivalent diameter (Ed): The diameter of a circle having the same area as a bean seed area.\n9. Extent (Ex): The ratio of the pixels in the bounding box to the bean area.\n10. Solidity (S): Also known as convexity. The ratio of the pixels in the convex shell to those found in beans.\n11. Roundness (R): Calculated with the following formula: (4piA)\/(P^2)\n12. Compactness (CO): Measures the roundness of an object: Ed\/L\n13. ShapeFactor1 (SF1)\n14. ShapeFactor2 (SF2)\n15. ShapeFactor3 (SF3)\n16. ShapeFactor4 (SF4)\n17. Class (Seker, Barbunya, Bombay, Cali, Dermosan, Horoz and Sira)","d7d54ab4":"##  Neceessery Imports:","2316f468":"## Loading  DataSet"}}