{"cell_type":{"ea33eec8":"code","5d0e6bad":"code","a8d3b8d2":"code","add7b453":"code","848be0c5":"markdown","4dcc0bf3":"markdown","22d7cd44":"markdown","b2f0ca28":"markdown","88e3def3":"markdown","24271eed":"markdown"},"source":{"ea33eec8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction import DictVectorizer as DV\nfrom sklearn.model_selection import train_test_split","5d0e6bad":"def Data_clean_func (Data, Drop_col, Date_col, Y_column, Data_Variable_fill=True, Encoder = 'OHE'):\n\n    Data = Data.drop(Drop_col, axis = 1)\n\n    for col in Date_col:\n        Data[col + '_year'] = pd.DatetimeIndex(Data[col]).year\n        Data[col + '_month'] = pd.DatetimeIndex(Data[col]).month\n        Data[col + '_day'] = pd.DatetimeIndex(Data[col]).day\n        Data.drop(col, axis=1, inplace=True)\n\n    Columns_integer_data = Data.describe().columns\n    Columns_variable_data = Data.columns[~Data.columns.isin(Data.describe().columns)]\n    Data1=Data[Columns_integer_data]\n    Data1=Data1.fillna(Data1.mean())\n\n    for col in Date_col:\n        Data1[col + '_year'] = Data1[col + '_year'].astype('int32')\n        Data1[col + '_month'] = Data1[col + '_month'].astype('int32')\n        Data1[col + '_day'] = Data1[col + '_day'].astype('int32')\n\n    if Data_Variable_fill == True:\n        for col in Columns_variable_data:\n            Data[col] = Data[col].fillna(Data[col].value_counts().index[0])\n\n    Result = pd.concat([Data1, Data[Columns_variable_data]], axis=1)\n    Result = Result.dropna()\n    Columns_integer_data = Data.describe().columns\n    Columns_variable_data = Data.columns[~Data.columns.isin(Data.describe().columns)]\n\n    if Encoder == 'Label':\n        labelencoder = LabelEncoder()\n        for col in Columns_variable_data:\n            Result[col] = labelencoder.fit_transform(Result[col])\n    elif Encoder == 'OHE':\n        Result = pd.get_dummies(Result, prefix_sep='_', drop_first=True)\n    elif Encoder == 'Dict_Vect':\n        vectorizer = DV(sparse = False)\n        Result1 = Result[Columns_variable_data].T.to_dict().values()\n        Result1 = pd.DataFrame(vectorizer.fit_transform(Result1))\n        Result = pd.concat([Result[Columns_integer_data], Result1], axis=1)\n    else:\n        print('Wrong Encoder option')\n\n\n    X_column = Result.columns[~Result.columns.isin(Y_column)]\n    X_train, X_test, Y_train, Y_test  = train_test_split(Result[X_column], Result[Y_column], test_size=0.3,random_state=42)\n    \n    return X_train, X_test, Y_train, Y_test","a8d3b8d2":"Data =  pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\n\nDrop_col = ['name','host_id','host_name']\nDate_col = ['last_review']\nY_column = ['price']\n\nX_train, X_test, Y_train, Y_test = Data_clean_func(Data,Drop_col,Date_col,Y_column,True,'Dict_Vect')","add7b453":"Drop_col = ['name','host_id','host_name']\nDate_col = ['last_review']\nY_column = ['price']\n\nX_train, X_test, Y_train, Y_test = Data_clean_func(Data,Drop_col,Date_col,Y_column,True,'OHE')","848be0c5":"![](http:\/\/dataladder.com\/wp-content\/uploads\/2020\/03\/data-cleaning-tool-1024x617.jpg)","4dcc0bf3":"<div class=\"alert alert-block alert-info\"> <span style=\"color:green;font-family:cursive;font-size:18px;\"> \n\nThis notebook is a humble attempt to bring all methods to cleanup the data in one function \n\nJust call the function with the Encoding method and details of columns and the function will create clean X and Y values for Test and Train.\n\nThis is to help deploy ML algorithms faster and to help you test quickly. \n\nI am a novice and thought this would help beginners such as me to help deploy and try out algorithms faster. \n    \n\nHOW TO USE THIS FUNCTION\n***\n    \ndef Data_clean_func (Data, Drop_col, Date_col, Y_column, Data_Variable_fill=True, Encoder = 'OHE'):\n\n1. Data :  Data to be passed\n2. Drop_col : Which columns need to be dropped (For example Names of people etc.)\n3. Date_col : Which columns have dates that need to split\n4. Y_column : Which is the Y column (outcome column) in the data\n5. Data_Variable_fill : Should Categorical columns with NAN be filled with common values (True\/False)\n6. Encoder : OHE (One Hot Encoder), Label (Label Encoder), Dict_Vect (DictVectorizer)\n\n<\/span> <\/div>\n\n***","22d7cd44":"# Example 2","b2f0ca28":"# Encoder\n\n## OHE\nWe apply OHE when:\n1. When the values that are close to each other in the label encoding correspond to target values that aren't close (non - linear data).\n2. When the categorical feature is not ordinal (dog,cat,mouse).\n\n\n\n## Label\nWe apply Label encoding when:\n1. The categorical feature is ordinal (Jr. kg, Sr. kg, Primary school, high school ,etc).\n2. Decision trees and random forests. When we can come up with a label encoder that assigns close labels to similar categories. This leads to less splits in the tress hence reducing the execution time.\n3. When the number of categorical features in the dataset is huge\n\n\n## Dict_Vect","88e3def3":"# Example 1","24271eed":"# \ud83c\udf87\ud83c\udf87 Data_clean_func \ud83c\udf87\ud83c\udf87"}}