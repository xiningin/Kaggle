{"cell_type":{"ef2d8f15":"code","2c1a8e2e":"code","44d974bb":"code","15c4824a":"code","bd68909e":"code","19236e9a":"code","d96002b2":"code","462e2b6c":"code","a749236d":"code","3c36b4e3":"code","7c7f24f9":"code","1016cbaa":"code","a4232632":"code","8462daf2":"code","bf679269":"code","9f2a3aea":"code","6ba20d5c":"code","097fe2c2":"code","0ae6483b":"code","8de6f68e":"code","d2d65af0":"code","5f78be94":"code","b671c981":"code","8ec7d9cf":"code","38c408bc":"code","5f6f845f":"code","51b5550d":"markdown","3becaade":"markdown","64f65682":"markdown","dd773dfe":"markdown","9af63c98":"markdown","85556051":"markdown"},"source":{"ef2d8f15":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","2c1a8e2e":"data = pd.read_csv('..\/input\/googleplaystore_user_reviews.csv')","44d974bb":"data.head()","15c4824a":"data.App.unique()","bd68909e":"data.isnull().sum()","19236e9a":"len(data)","d96002b2":"data = data.dropna()","462e2b6c":"data.isnull().sum()","a749236d":"len(data)","3c36b4e3":"data.columns","7c7f24f9":"data.Sentiment.unique()","1016cbaa":"print('No. of Positive: ', (data.Sentiment=='Positive').sum())\nprint('No. of Neutral: ', (data.Sentiment=='Neutral').sum())\nprint('No. of Negative: ', (data.Sentiment=='Negative').sum())","a4232632":"sns.countplot(x='Sentiment', data=data)\nplt.xlabel('Sentiment')\nplt.ylabel('Count')","8462daf2":"from wordcloud import WordCloud","bf679269":"# Word Cloud for positive reviews\n\ntext = data[data['Sentiment']=='Positive']['Translated_Review']\ntext = str(text)\nwordcloud = WordCloud(max_font_size=100, max_words=200, background_color=\"white\").generate(text)\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")","9f2a3aea":"# Word Cloud for the negative reviews\n\ntext = data[data['Sentiment']=='Negative']['Translated_Review']\ntext = str(text)\nwordcloud = WordCloud(max_font_size=100, max_words=200, background_color=\"white\").generate(text)\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")","6ba20d5c":"# Word Cloud for the Neutral reviews\n\ntext = data[data['Sentiment']=='Neutral']['Translated_Review']\ntext = str(text)\nwordcloud = WordCloud(max_font_size=100, max_words=200, background_color=\"white\").generate(text)\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")","097fe2c2":"import re\nimport pyLDAvis.gensim\nfrom nltk.tokenize import RegexpTokenizer\nfrom nltk.corpus import stopwords\nfrom stemming.porter2 import stem\nfrom nltk.stem import WordNetLemmatizer\nfrom gensim import corpora\nfrom gensim.models.ldamodel import LdaModel\nfrom string import punctuation","0ae6483b":"negative_reviews = data[(data.Sentiment=='Negative') | (data.Sentiment=='Neutral')]['Translated_Review']","8de6f68e":"negative_reviews.head()","d2d65af0":"tokenizer = RegexpTokenizer(r'\\w+')\nen_stop = set(stopwords.words('english'))\nen_stop.add('error')\nexclude = set(punctuation)\nlemma = WordNetLemmatizer()\n\ntexts = []\n\nfor rev in negative_reviews:\n    review = re.sub('[^a-zA-Z]', ' ', rev)\n    raw = review.lower()\n    tokens = tokenizer.tokenize(raw)\n    stop_free = [rev for rev in tokens if not rev in en_stop]\n    punc_free = [rev for rev in stop_free if not rev in exclude]\n    normalized = [lemma.lemmatize(rev) for rev in punc_free]\n    stemmed_tokens = [stem(rev) for rev in normalized]\n    texts.append(stemmed_tokens)","5f78be94":"dictionary = corpora.Dictionary(texts)\n\ncorpus = [dictionary.doc2bow(text) for text in texts]\n\nlda = LdaModel(corpus, num_topics=5, id2word=dictionary, passes=50, iterations=20, minimum_probability=0.5)\n\nvis_data = pyLDAvis.gensim.prepare(lda, corpus, dictionary, mds='tsne')\npyLDAvis.display(vis_data)","b671c981":"positive_reviews = data[data.Sentiment=='Positive']['Translated_Review']","8ec7d9cf":"tokenizer = RegexpTokenizer(r'\\w+')\nen_stop = set(stopwords.words('english'))\nen_stop.add('error')\nexclude = set(punctuation)\nlemma = WordNetLemmatizer()\n\ntexts = []\n\nfor rev in positive_reviews:\n    review = re.sub('[^a-zA-Z]', ' ', rev)\n    raw = review.lower()\n    tokens = tokenizer.tokenize(raw)\n    stop_free = [rev for rev in tokens if not rev in en_stop]\n    punc_free = [rev for rev in stop_free if not rev in exclude]\n    normalized = [lemma.lemmatize(rev) for rev in punc_free]\n    stemmed_tokens = [stem(rev) for rev in normalized]\n    texts.append(stemmed_tokens)","38c408bc":"pyLDAvis.enable_notebook()","5f6f845f":"dictionary = corpora.Dictionary(texts)\n\ncorpus = [dictionary.doc2bow(text) for text in texts]\n\nlda = LdaModel(corpus, num_topics=5, id2word=dictionary, passes=50, iterations=20, minimum_probability=0.5)\n\nvis_data = pyLDAvis.gensim.prepare(lda, corpus, dictionary, mds='tsne')\npyLDAvis.display(vis_data)","51b5550d":"Generating topic models for the positive reviews.","3becaade":"In this notebook I've analyzed the user reviews for the apps and generate word clouds, also topic modelling has been done, topic modelling is very much useful for understanding the customer needs, the problems they are facing regarding the app, by seeing and visualizing the topic models one can understand what are issues regarding the app, the issues which need to be fixed to get better ratings. Also by visualizing the topic models from positive reviews we can understand the features that users liked.\n\nFor getting the topic models here the googleplaystore_user_reviews.csv dataset is used. It has the follwing attributes:\n     App,\n     Translated_Review,\n     Sentiment,\n     Sentiment_Polarity,\n     Sentiment_Subjectivity.\n     \nFirst the missing entries has been removed, the rows containing missing data has been removed from the dataset.\n\nThen the dataset is filtered using specific sentiment values, and the reviews are visualized using wordclouds.\n\nFinally the topic modelling has been done, LDA algorithm is used for topic modelling.","64f65682":"Generating topic models from the negative and neutral reviews. For generating topic models LDA algorithm is using, which is implemented using gensim library and the topic models are visualized using pyLDAvis library.","dd773dfe":"Generating word clouds for the reviews","9af63c98":"Filtering the dataframe, taking only the negative and neutral reviews.","85556051":"Preprocess the text reviews. Filtering the reviews and taking only the words using reguler expressions then removing the stopwords and the punctuations."}}