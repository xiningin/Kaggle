{"cell_type":{"1f16fa16":"code","ee5392f3":"code","02a77621":"code","2cb7d97f":"code","59fd5a58":"code","ccfadc7f":"code","0a97ef9b":"code","d19661a3":"code","34a738b9":"code","0a00c81d":"code","b91d2039":"code","177863b6":"code","7b2fb78a":"code","95e06c69":"code","8dfa3cd4":"markdown","0b6c9623":"markdown","7e47eb5b":"markdown","721440dc":"markdown","a3b66ac2":"markdown","19e8b3a7":"markdown","c7a2305f":"markdown","656e6c55":"markdown","d73cea7f":"markdown","643b4260":"markdown","04785aaf":"markdown","9ec4b8d7":"markdown","9d77b490":"markdown","6470234e":"markdown","194039e5":"markdown","e47ffae9":"markdown"},"source":{"1f16fa16":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nimport cv2\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Convolution2D, MaxPooling2D\nfrom keras.utils import np_utils\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# path to images\npath = '\/kaggle\/input\/animal-image-datasetdog-cat-and-panda\/animals\/'\n\n# animal categories\ncategories = ['dogs', 'panda', 'cats']\n    ","ee5392f3":"# let's display some of the pictures\n\nfor category in categories:\n    fig, _ = plt.subplots(3,4)\n    fig.suptitle(category)\n    fig.patch.set_facecolor('xkcd:white')\n    for k, v in enumerate(os.listdir(path+category)[:12]):\n        img = plt.imread(path+category+'\/'+v)\n        plt.subplot(3, 4, k+1)\n        plt.axis('off')\n        plt.imshow(img)\n    plt.show()","02a77621":"shape0 = []\nshape1 = []\n\nfor category in categories:\n    for files in os.listdir(path+category):\n        shape0.append(plt.imread(path+category+'\/'+ files).shape[0])\n        shape1.append(plt.imread(path+category+'\/'+ files).shape[1])\n    print(category, ' => height min : ', min(shape0), 'width min : ', min(shape1))\n    print(category, ' => height max : ', max(shape0), 'width max : ', max(shape1))\n    shape0 = []\n    shape1 = []\n","2cb7d97f":"# initialize the data and labels\ndata = []\nlabels = []\nimagePaths = []\nHEIGHT = 32\nWIDTH = 55\nN_CHANNELS = 3\n\n# grab the image paths and randomly shuffle them\nfor k, category in enumerate(categories):\n    for f in os.listdir(path+category):\n        imagePaths.append([path+category+'\/'+f, k]) # k=0 : 'dogs', k=1 : 'panda', k=2 : 'cats'\n\nimport random\nrandom.shuffle(imagePaths)\nprint(imagePaths[:10])\n\n# loop over the input images\nfor imagePath in imagePaths:\n    # load the image, resize the image to be HEIGHT * WIDTH pixels (ignoring\n    # aspect ratio) and store the image in the data list\n    image = cv2.imread(imagePath[0])\n    image = cv2.resize(image, (WIDTH, HEIGHT))  # .flatten()\n    data.append(image)\n    \n    # extract the class label from the image path and update the\n    # labels list\n    label = imagePath[1]\n    labels.append(label)\n\n","59fd5a58":"# scale the raw pixel intensities to the range [0, 1]\ndata = np.array(data, dtype=\"float\") \/ 255.0\nlabels = np.array(labels)","ccfadc7f":"# Let's check everything is ok\nfig, _ = plt.subplots(3,4)\nfig.suptitle(\"Sample Input\")\nfig.patch.set_facecolor('xkcd:white')\nfor i in range(12):\n    plt.subplot(3,4, i+1)\n    plt.imshow(data[i])\n    plt.axis('off')\n    plt.title(categories[labels[i]])\nplt.show()","0a97ef9b":"# partition the data into training and testing splits using 80% of\n# the data for training and the remaining 20% for testing\n(trainX, testX, trainY, testY) = train_test_split(data, labels, test_size=0.2, random_state=42)","d19661a3":"# Preprocess class labels\ntrainY = np_utils.to_categorical(trainY, 3)\n\nprint(trainX.shape)\nprint(testX.shape)\nprint(trainY.shape)\nprint(testY.shape)","34a738b9":"model = Sequential()\n\nmodel.add(Convolution2D(32, (2, 2), activation='relu', input_shape=(HEIGHT, WIDTH, N_CHANNELS)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Convolution2D(32, (2, 2), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(3, activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nprint(model.summary())","0a00c81d":"model.fit(trainX, trainY, batch_size=32, epochs=25, verbose=1)","b91d2039":"from numpy import argmax\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\npred = model.predict(testX)\npredictions = argmax(pred, axis=1) # return to label\n\ncm = confusion_matrix(testY, predictions)\n\nfig = plt.figure()\nfig.patch.set_facecolor('xkcd:white')\nax = fig.add_subplot(111)\ncax = ax.matshow(cm)\nplt.title('Model confusion matrix')\nfig.colorbar(cax)\nax.set_xticklabels([''] + categories)\nax.set_yticklabels([''] + categories)\n\nfor i in range(3):\n    for j in range(3):\n        ax.text(i, j, cm[j, i], va='center', ha='center')\n\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.show()\n\n\naccuracy = accuracy_score(testY, predictions)\nprint(\"Accuracy : %.2f%%\" % (accuracy*100.0))","177863b6":"test_data=[]\ntest_image_o = cv2.imread('\/kaggle\/input\/animal-image-datasetdog-cat-and-panda\/animals\/cats\/cats_00885.jpg')\ntest_image = cv2.resize(test_image_o, (WIDTH, HEIGHT))  # .flatten()\ntest_data.append(test_image)\n\n# scale the raw pixel intensities to the range [0, 1]\ntest_data = np.array(test_image, dtype=\"float\") \/ 255.0\ntest_data=test_data.reshape([-1,32, 55, 3])\npred = model.predict(test_data)\npredictions = argmax(pred, axis=1) # return to label\nprint ('Prediction : '+categories[predictions[0]])\n\n#Imersing into the plot\nfig = plt.figure()\nfig.patch.set_facecolor('xkcd:white')\nplt.title(categories[predictions[0]])\nplt.imshow(test_image_o)","7b2fb78a":"test_data=[]\ntest_image_o = cv2.imread('\/kaggle\/input\/animal-image-datasetdog-cat-and-panda\/animals\/panda\/panda_00638.jpg')\ntest_image = cv2.resize(test_image_o, (WIDTH, HEIGHT))  # .flatten()\ntest_data.append(test_image)\n\n# scale the raw pixel intensities to the range [0, 1]\ntest_data = np.array(test_image, dtype=\"float\") \/ 255.0\ntest_data=test_data.reshape([-1,32, 55, 3])\npred = model.predict(test_data)\npredictions = argmax(pred, axis=1) # return to label\nprint ('Prediction : '+categories[predictions[0]])\n\n#Imersing into the plot\nfig = plt.figure()\nfig.patch.set_facecolor('xkcd:white')\nplt.title(categories[predictions[0]])\nplt.imshow(test_image_o)","95e06c69":"test_data=[]\ntest_image_o = cv2.imread('\/kaggle\/input\/animal-image-datasetdog-cat-and-panda\/animals\/dogs\/dogs_00396.jpg')\ntest_image = cv2.resize(test_image_o, (WIDTH, HEIGHT))  # .flatten()\ntest_data.append(test_image)\n\n# scale the raw pixel intensities to the range [0, 1]\ntest_data = np.array(test_image, dtype=\"float\") \/ 255.0\ntest_data=test_data.reshape([-1,32, 55, 3])\npred = model.predict(test_data)\npredictions = argmax(pred, axis=1) # return to label\nprint ('Prediction : '+categories[predictions[0]])\n\n#Imersing into the plot\nfig = plt.figure()\nfig.patch.set_facecolor('xkcd:white')\nplt.title(categories[predictions[0]])\nplt.imshow(test_image_o)","8dfa3cd4":"<h1>7. Evaluate model on test data<\/h1>","0b6c9623":"# Test the Cat image","7e47eb5b":"<h1>6. Fit model on training data<\/h1>","721440dc":"# Testing the Panda image","a3b66ac2":"# Are you excited ??","19e8b3a7":"<h1>5. Define model architecture<\/h1>","c7a2305f":"# importing required libraries","656e6c55":"#                           Dog-Cat-Pandas image classifier","d73cea7f":"<h1>3. Preprocess data and label inputs<\/h1>","643b4260":"\n![Cat-dog.png](attachment:Cat-dog.png)\n\n**Prob statement : Predict the image input as Dog  cat or pandas.**\n\n**Steps :**\n1. create the dataset.\n2. CNN\n3. Build the model\n4. Train the model\n5. Make predictions.\n\n**Convolutional Neural Network(or CNN)** : So basically what is CNN \u2013 as we know its a machine learning algorithm for machines to understand the features of the image with foresight and remember the features to guess whether the name of the new image fed to the machine. CNN:-https:\/\/towardsdatascience.com\/all-the-steps-to-build-your-first-image-classifier-with-code-cf244b015799\n\n","04785aaf":"<h1>1. Display some pictures<\/h1>","9ec4b8d7":"# Testing the Dog image","9d77b490":"<h1>2. Pictures shape<\/h1>","6470234e":"# Check the labeling","194039e5":"Since images have different shapes, let's resize pictures to height = 32 and width = 55.","e47ffae9":"<h1>4. Split dataset into train and test set<\/h1>"}}