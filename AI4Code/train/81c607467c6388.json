{"cell_type":{"9f440041":"code","c5449096":"code","3bef8e04":"code","9e0cb3a2":"code","9830b906":"code","18bbb45e":"code","3c30a010":"code","3a639a8f":"code","4dd5c921":"code","3df58b2e":"code","d11b3f3b":"code","7725f251":"code","9b3aab7c":"code","f4ef8ac1":"code","9eae55df":"code","c9e05b10":"code","03d0b9e8":"markdown","7d935571":"markdown"},"source":{"9f440041":"# Import libraries\nimport os, PIL\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","c5449096":"# Set visualization style\nplt.rcParams[\"patch.force_edgecolor\"] = True\nplt.rc('xtick', labelsize=20) \nplt.rc('ytick', labelsize=20)","3bef8e04":"ls ..\/input","9e0cb3a2":"# Read Data\ndf = pd.read_csv('..\/input\/airbus-ship-detection\/train_ship_segmentations.csv')\ndf.head()","9830b906":"# Features Engineering - We will use EncodedPixels in a second DataFrame bellow\ndf['Ships'] = df['EncodedPixels'].notnull()\ndf = df.groupby('ImageId').sum().reset_index()\ndf['ShipPresent'] = df['Ships'] > 0\n\ndf.head()","18bbb45e":"df.info()","3c30a010":"# Features Engineering - Second DataFrame with EncodedPixels and only images with ships\n\ndf_box = pd.read_csv('..\/input\/airbus-ship-detection\/train_ship_segmentations.csv')\ndf_box = df_box.dropna().groupby(\"ImageId\")[['EncodedPixels']].agg(lambda rle_code: ' '.join(rle_code)).reset_index()\ndf_box['Path'] = df_box['ImageId'].apply(lambda filename: os.path.join('..\/input\/airbus-ship-detection\/train\/', filename))\ndf_box.info()","3a639a8f":"df_box.head()","4dd5c921":"def rle_to_pixels(rle_code):\n    ''' This function decodes Run Lenght Encoding into pixels '''\n    rle_code = [int(i) for i in rle_code.split()]\n    \n    pixels = [(pixel_position % 768, pixel_position \/\/ 768) \n              for start, length in list(zip(rle_code[0:-1:2], rle_code[1::2])) \n              for pixel_position in range(start, start + length)]\n        \n    return pixels\n\ndef apply_mask(image, mask):\n    ''' This function saturates the Red and Green RGB colors in the image \n        where the coordinates match the mask'''\n    for x, y in mask:\n        image[x, y, [0, 1, 2]] = (255, 255, 0)\n    return image","3df58b2e":"# Plots with masked ships on random images from the dataset\n\nh, w = 3, 3\nload_img = lambda path: np.array(PIL.Image.open(path))\nfig, axes_list = plt.subplots(h, w, figsize=(4*h, 4*w))\n\nfor axes in axes_list:\n    for ax in axes:\n        ax.axis(\"off\")\n        path = np.random.choice(df_box['Path'])\n        img = apply_mask(load_img(path), \\\n                rle_to_pixels(df_box[df_box['Path'] == path]['EncodedPixels'].iloc[0]))\n        ax.imshow(img)\n        ax.set_title(df_box[df_box['Path'] == path]['ImageId'].iloc[0])","d11b3f3b":"df_box.info()","7725f251":"# Imbalanced Dataset | Ship\/No-Ship Ratio\n\ntotal_images = len(df)\nships = df['Ships'].sum()\nships_images = len(df[df['Ships'] > 0])\nno_ship = total_images - ships_images\n\nprint(f\"Images: {total_images} \\nShips:  {ships}\")\nprint(f\"Images with ships:    {round(ships_images\/total_images,2)} ({ships_images})\")\nprint(f\"Images with no ships: {round(no_ship\/total_images,2)} ({no_ship})\")","9b3aab7c":"# Engineering Features for the graphs\n\nship_ratio = df['ShipPresent'].value_counts()\/total_images\nship_ratio = ship_ratio.rename(index={True:'Ship', False:'No Ship'})\n\ntotal_ship_distribution = df['Ships'].value_counts()[1::]\/ships_images","f4ef8ac1":"# Plotting\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(30, 12), gridspec_kw={'width_ratios':[1,5]})\n\nship_ratio.plot.bar(ax=axes[0], title=\"Ship\/No-Ship distribution\")\ntotal_ship_distribution.plot.bar(ax=axes[1], title=\"Total Ship Distribution\")\n\naxes[0].title.set_size(30)\naxes[1].title.set_size(30)","9eae55df":"# The operation bellow is expensive, if possible just load the pre-calculated dataset\n\n# df_box['Pixels'] = df_box['EncodedPixels'].apply(rle_to_pixels).str.len() # EXPENSIVE\n# df_box.to_csv('train_box_pixels.csv', encoding='utf-8', index=False)\ndf_box = pd.read_csv('..\/input\/airbus-challenge\/train_box_pixels.csv')\ndf_box.head()","c9e05b10":"# Imbalanced Dataset | Ship\/No-Ship Pixels Ratio\n# Due to the heavy imbalance of the dataset, we'll conduct our analysis only with ship images\n\nn_images = df_box['ImageId'].nunique()\nship_pixels = df_box['Pixels'].sum()\ntotal_pixels = n_images * 768 * 768\nratio = ship_pixels\/total_pixels\n\nprint(f'Ship Pixels:   {round(ratio, 3)*100}%    ({ship_pixels})')\nprint(f'Total Pixels: {round(1 - ratio, 3)*100}% ({total_pixels - ship_pixels})')","03d0b9e8":"### A simple take on Kaggle's Airbus Ship Detection Challenge\n\nFor more detailed explanations, please refer to Juli\u00e1n Peller excellent kernel series at:\nhttps:\/\/www.kaggle.com\/julian3833\/3-basic-exploratory-analysis","7d935571":"List Files in Directory"}}