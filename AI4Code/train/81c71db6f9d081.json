{"cell_type":{"f1cd1d8f":"code","5ddd6e4b":"code","24350b14":"code","64204281":"code","ea6df25b":"code","9a5347ad":"code","ce27c466":"code","13ab9f2c":"code","dff65b48":"code","0863f4bc":"code","109466d4":"code","34a4c2c1":"code","26c1e647":"markdown","b4e2a9ac":"markdown","0936cac6":"markdown","997137d1":"markdown","3a4c6557":"markdown"},"source":{"f1cd1d8f":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')","5ddd6e4b":"ls ..\/input\/titanic","24350b14":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\nsample_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","64204281":"train.head()","ea6df25b":"# Sex\u3068Embarked\u306eOne-Hot\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\ntrain = pd.get_dummies(train, columns=['Sex', 'Embarked'])\ntest = pd.get_dummies(test, columns=['Sex', 'Embarked'])\n\n# \u4e0d\u8981\u306a\u5217\u306e\u524a\u9664\ntrain.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1, inplace=True)\ntest.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1, inplace=True)\n\n# train\u306e\u8868\u793a\ndisplay(train.head())","9a5347ad":"X_train = train.drop(['Survived'], axis=1)  # X_train\u306ftrain\u306eSurvived\u5217\u4ee5\u5916\ny_train = train['Survived']  # Y_train\u306ftrain\u306eSurvived\u5217","ce27c466":"import lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# X_train\u3068Y_train\u3092train\u3068valid\u306b\u5206\u5272\ntrain_x, valid_x, train_y, valid_y = train_test_split(X_train, y_train, test_size=0.33, random_state=0)\n\n# lab.Dataset\u3067train\u3068valid\u3092\u4f5c\u3063\u3066\u304a\u304f\nlgb_train = lgb.Dataset(train_x, train_y)\nlgb_eval = lgb.Dataset(valid_x, valid_y)\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9a\u7fa9\nlgbm_params = {'objective': 'binary'}\n\n# lgb.train\u3067\u5b66\u7fd2\nevals_result = {}\ngbm = lgb.train(params = lgbm_params,\n                train_set = lgb_train,\n                valid_sets= [lgb_train, lgb_eval],\n                early_stopping_rounds=20,\n                evals_result=evals_result,\n                verbose_eval=10);","13ab9f2c":"# valid_x\u306b\u3064\u3044\u3066\u63a8\u8ad6\noof = (gbm.predict(valid_x) > 0.5).astype(int)\nprint('score', round(accuracy_score(valid_y, oof)*100,2)) ","dff65b48":"import matplotlib.pyplot as plt\n\nplt.plot(evals_result['training']['binary_logloss'], label='train_loss')\nplt.plot(evals_result['valid_1']['binary_logloss'], label='valid_loss')\nplt.legend()","0863f4bc":"test_pred = (gbm.predict(test) > 0.5).astype(int)\nsample_submission['Survived'] = test_pred\nsample_submission.to_csv('train_test_split.csv', index=False) ","109466d4":"# 3\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3092\u6307\u5b9a\u3057\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=3, shuffle=True, random_state=0)\n\n# \u30b9\u30b3\u30a2\u3068\u30e2\u30c7\u30eb\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nscore_list = []\nmodels = []\n\nfor fold_, (train_index, valid_index) in enumerate(kf.split(X_train, y_train)):    \n    print(f'fold{fold_ + 1} start')\n    train_x = X_train.iloc[train_index]\n    valid_x = X_train.iloc[valid_index]\n    train_y = y_train[train_index]\n    valid_y = y_train[valid_index]\n\n    # lab.Dataset\u3092\u4f7f\u3063\u3066\u3001train\u3068valid\u3092\u4f5c\u3063\u3066\u304a\u304f\n    lgb_train= lgb.Dataset(train_x, train_y)\n    lgb_valid = lgb.Dataset(valid_x, valid_y)\n\n    # \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9a\u7fa9\n    lgbm_params = {'objective': 'binary'}\n\n    # lgb.train\u3067\u5b66\u7fd2\n    gbm = lgb.train(params=lgbm_params,\n                    train_set=lgb_train,\n                    valid_sets=[lgb_train, lgb_valid],\n                    early_stopping_rounds=20,\n                    verbose_eval=-1\n                    )\n    oof = (gbm.predict(valid_x) > 0.5).astype(int)\n    score_list.append(round(accuracy_score(valid_y, oof)*100,2))\n    models.append(gbm)  # \u5b66\u7fd2\u304c\u7d42\u308f\u3063\u305f\u30e2\u30c7\u30eb\u3092\u30ea\u30b9\u30c8\u306b\u5165\u308c\u3066\u304a\u304f\n    print(f'fold{fold_ + 1} end\\n' )\nprint(score_list, '\u5e73\u5747score', round(np.mean(score_list), 2))","34a4c2c1":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u3092\u683c\u7d0d\u3059\u308b\u3001418\u884c3\u5217\u306enumpy\u884c\u5217\u3092\u4f5c\u6210\ntest_pred = np.zeros((len(test), 3))\n\nfor fold_, gbm in enumerate(models):\n    test_pred[:, fold_] = gbm.predict(test) # test\u3092\u4e88\u6e2c\n\npred = (np.mean(test_pred, axis=1) > 0.5).astype(int)\nsample_submission['Survived'] = pred\nsample_submission.to_csv('3-fold_cross-validation.csv',index=False)","26c1e647":"## 5.3 3\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3067\u306e\u5b66\u7fd2","b4e2a9ac":"## 5.1 \u524d\u51e6\u7406\n## 5.1.1 \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u5909\u63db\n","0936cac6":"## 5.2 \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u3067\u306e\u5b66\u7fd2\u30fb\u63a8\u8ad6","997137d1":"# \u7b2c\uff15\u7ae0 LightGBM\u3067\u306e\u30bf\u30a4\u30bf\u30cb\u30c3\u30af","3a4c6557":"<img src=\"https:\/\/cdn.discordapp.com\/attachments\/507208726864855060\/622684935702183948\/5.png\" width=\"600\">"}}