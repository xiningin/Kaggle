{"cell_type":{"a730ee61":"code","8a428d07":"code","980c2683":"code","bf05c46d":"code","1ed49ce1":"code","9a0a6a49":"code","baa75b7c":"code","c5e717d2":"code","f332de74":"code","8cffdbf9":"code","98622172":"code","5664c57b":"code","b1028ee4":"code","e5a799fc":"code","b2edd47f":"code","446c922f":"code","042ecbc7":"code","2fb49d27":"code","f91162d4":"code","8f86ed96":"code","110479be":"code","35005eb9":"code","de0381e3":"code","c1648056":"code","af157dd3":"code","f4aeec9a":"markdown","83b7d364":"markdown","d0a3cc46":"markdown","19672a4f":"markdown","39ca41e4":"markdown","80a7d2d9":"markdown","47eff6e3":"markdown"},"source":{"a730ee61":"# TensorFlow and tf.keras\nimport tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models\n\n# Helper libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nprint(tf.__version__)\n","8a428d07":"test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntrain = pd.read_csv('..\/input\/digit-recognizer\/train.csv')","980c2683":"train.describe()","bf05c46d":"train.head()","1ed49ce1":"test.describe()","9a0a6a49":"test.head()","baa75b7c":"train.shape, train.shape","c5e717d2":"#train[n:n+1].values[0][0]","f332de74":"i_splt = int(len(train)*0.80);\nprint(i_splt)\n\ntrain_data = train.iloc[:i_splt,1:]\n#train_data = train_data\/255\ntrain_label = train.iloc[:i_splt,0:1]\n\ntrain_data = train_data.values.reshape(len(train_data),28,28,1)\n\n\ndisplay(train_data.max().max() , train_data.min().min())\n\n\ntest_data = train.iloc[i_splt:,1:]\n#test_data = test_data\/255\ntest_label = train.iloc[i_splt:,0:1]\ntest_data = test_data.values.reshape(len(test_data),28,28,1)\n\n\ndisplay(test_data.max().max() , test_data.min().min())\n","8cffdbf9":"eval_data = test\n#test_data = test_data\/255\neval_label = test\neval_data = eval_data.values.reshape(len(eval_data),28,28,1)\n\neval_data.shape","98622172":"eval_data[0].shape","5664c57b":"print(f'training size: {train_data.shape}')\nplt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_data[i:i+1][0].reshape(28,28), cmap=plt.cm.binary)\n    plt.xlabel(train_label[i:i+1].values[0][0])\nplt.show()\n","b1028ee4":"print(f'test size: {test_data.shape}')\nplt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(test_data[i:i+1][0].reshape(28,28), cmap=plt.cm.binary)\n    plt.xlabel(test_label[i:i+1].values[0][0])\nplt.show()","e5a799fc":"model = models.Sequential()\nmodel.add(tf.keras.layers.experimental.preprocessing.RandomRotation(\n    factor=0.08, fill_mode='constant', interpolation='bilinear', seed=None, name=None, input_shape=(28, 28, 1)\n))\nmodel.add(layers.experimental.preprocessing.RandomTranslation(\n    height_factor=0.10, width_factor=0.10, fill_mode='constant', interpolation='bilinear',\n    seed=None, name=None\n))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D())\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D())\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\n\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10))\n\nmodel.summary()","b2edd47f":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n","446c922f":"train_data.shape, train_label.shape, test_data.shape, test_label.shape","042ecbc7":"dig_rcg = model.fit(train_data, train_label, epochs=20, \n                    validation_data=(test_data, test_label))\n\n","2fb49d27":"plt.plot(dig_rcg.history['accuracy'], label='accuracy')\nplt.plot(dig_rcg.history['val_accuracy'], label = 'val_accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.ylim([0.96, 1])\nplt.legend(loc='lower right')\n\ntest_loss, test_acc = model.evaluate(test_data,  test_label, verbose=2)\n","f91162d4":"predictions = model.predict(eval_data)\n","8f86ed96":"result = pd.DataFrame([np.argmax(_) for _ in predictions], columns = ['Label'])\nresult.index.name = 'ImageId'\nresult.index = result.index +1","110479be":"result","35005eb9":"result.to_csv('submission.csv')","de0381e3":"pd.read_csv('submission.csv')","c1648056":"!echo \"qid,prediction\" > submission.csv","af157dd3":"from IPython.display import FileLink\nFileLink('submission.csv')","f4aeec9a":"### 75%-25% split for training data and test data.","83b7d364":"# MODELLLLL ","d0a3cc46":"# Preprocess train and test data","19672a4f":"### Evaluation data for the submission","39ca41e4":"### Check data before feeding it to the model ","80a7d2d9":"### Compile Model","47eff6e3":"### Also check eval data"}}