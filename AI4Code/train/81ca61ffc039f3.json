{"cell_type":{"f2f59b74":"code","9146d1ef":"code","078254ce":"code","f21d2309":"code","34b5fc63":"code","afce8dcf":"code","5e5c1658":"code","8d20b6af":"code","c84cf250":"code","0aff291d":"code","a42b335f":"code","ded7cb89":"code","25c469c7":"code","4acd1ff3":"code","b0608b5b":"code","5963d6e3":"code","3fb63c7b":"code","238860d1":"code","cef9a5f3":"code","68a2c692":"code","f607d485":"code","d68f3b7e":"code","8503ffb8":"code","674c403d":"code","ed3c4080":"code","2394b90c":"code","a5079c7f":"code","17d6c685":"code","a3a09379":"code","77f06714":"code","e509c23f":"code","ad4e08a2":"code","1ad28a81":"code","832e54b0":"code","3b26f59d":"code","f5e04006":"code","481bfc85":"code","e96de019":"code","e68d984c":"markdown","e0f4391e":"markdown","9a81674f":"markdown","a0898ac5":"markdown","267d1c52":"markdown","efc2c628":"markdown","03e3ced8":"markdown","a61a017f":"markdown","7ce4dfe2":"markdown","b99f5250":"markdown","eeba82e1":"markdown","02a86f72":"markdown","856e60f2":"markdown","e01111da":"markdown","0d00e3b6":"markdown","0cef68fe":"markdown","7e592124":"markdown","43d76c59":"markdown","32104f1d":"markdown","c9d81cba":"markdown","c0dfaed5":"markdown","3ad35673":"markdown","fc812bc3":"markdown"},"source":{"f2f59b74":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9146d1ef":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import pearsonr\n%matplotlib inline","078254ce":"df = pd.read_csv('..\/input\/top2018.csv')\ndf.info()","f21d2309":"df['Duration_min']=df['duration_ms']\/60000","34b5fc63":"df.drop(columns='duration_ms', inplace=True)","afce8dcf":"sns.heatmap(df.corr(), cmap = 'YlGnBu')","5e5c1658":"df['artists'].value_counts().head(10)","8d20b6af":"sns.set_style(style='darkgrid')\nsns.distplot(df['danceability'],hist=True,kde=True)","c84cf250":"#Set conditions\nVd=df['danceability']>=0.75\nLd=(df['danceability']>=0.5) & (df['danceability']<0.75)\nNd=df['danceability']<0.5","0aff291d":"#Create dataframe\ndata = [Vd.sum(), Ld.sum(), Nd.sum()]\nDance = pd.DataFrame(data, columns=['percent'], index=['Very', 'Regular', 'Instrumental'])","a42b335f":"sns.distplot(df['energy'])","ded7cb89":"#Set conditions \nVe=df['energy']>=0.75\nRe=(df['energy']>=0.5) & (df['energy']<0.75)\nLe=df['energy']<0.5","25c469c7":"#Create dataframe\ndata = [Ve.sum(), Re.sum(), Le.sum()]\nEnergy=pd.DataFrame(data, columns=['percent'], index=['Very Energy', 'Regular Energy', 'Low Energy'])","4acd1ff3":"Energy","b0608b5b":"Correlation=df[['danceability', 'energy', 'valence', 'loudness', 'tempo']]","5963d6e3":"sns.heatmap(Correlation.corr(), annot=True, cmap='YlGnBu')\nsns.jointplot(data=Correlation,y='energy',x='loudness',kind='reg',stat_func=pearsonr)","3fb63c7b":"df['Rhythm'] = df['tempo']","238860d1":"df.loc[df['tempo']>168,'Rhythm']='Presto'\ndf.loc[(df['tempo']>=110) & (df['tempo']<=168),'Rhythm']='Allegro'\ndf.loc[(df['tempo']>=76) & (df['tempo']<=108),'Rhythm']='Andante'\ndf.loc[(df['tempo']>=66) & (df['tempo']<=76),'Rhythm']='Adagio'\ndf.loc[df['tempo']<65,'Rhythm']='Length'","cef9a5f3":"df['Rhythm'].value_counts()","68a2c692":"sns.set_style(style='darkgrid')\nRhy=df['Rhythm'].value_counts()\nRhy_DF=pd.DataFrame(Rhy)\nsns.barplot(x=Rhy_DF.Rhythm, y=Rhy_DF.index, palette=\"viridis\")\nplt.title('Popular keys')","f607d485":"df[['name', 'artists', 'danceability', 'valence', 'tempo', 'Rhythm']].sort_values(by='danceability', ascending=False).head(10)","d68f3b7e":"df[['name', 'artists', 'energy', 'valence', 'tempo', 'Rhythm']].sort_values(by='energy', ascending=False).head(10)","8503ffb8":"df[['name', 'artists', 'energy', 'valence', 'tempo', 'Rhythm']].sort_values(by='valence', ascending=False).head(10)","674c403d":"df['artists'].value_counts().head(4)","ed3c4080":"XXXTENT = df[df['artists'] == 'XXXTENTACION']","2394b90c":"XXXTENT[['name', 'danceability', 'energy', 'loudness', 'valence', 'tempo', 'Rhythm']]","a5079c7f":"PMalone = df[df['artists'] == 'Post Malone']\nPMalone[['name', 'danceability', 'energy', 'loudness', 'valence', 'tempo', 'Rhythm']]","17d6c685":"Drake = df[df['artists'] == 'Drake']\nDrake[['name', 'danceability', 'energy', 'energy', 'loudness', 'valence', 'tempo', 'Rhythm']]","a3a09379":"Edshe = df[df['artists'] == 'Ed Sheeran']\nEdshe[['name', 'danceability', 'energy', 'loudness', 'valence', 'acousticness', 'tempo', 'Rhythm']]","77f06714":"Mayores = df[df['mode'] == 1]\nMenores = df[df['mode'] == 0]\n\n#variables seperation according to the scale to which Major or Minor belong.\nMayoresD = Mayores[Mayores['danceability'] >= 0.5]\nMenoresD = Menores[Menores['danceability'] >= 0.5]\n\n#Eliminate columns that say nothing in the study\nMayoresD = Mayores.drop(columns=['mode', 'time_signature'])\nMenoresD = Menores.drop(columns=['mode', 'time_signature'])","e509c23f":"#Heat map for major scales\nsns.heatmap(MayoresD.corr(), cmap=\"YlGnBu\")","ad4e08a2":"# Heat map for less scales\nsns.heatmap(MenoresD.corr(), cmap='YlGnBu')","1ad28a81":"#We create the variables and assign the colums that we want to correlate\nMaycorD = MayoresD[['danceability', 'energy', 'valence', 'loudness', 'tempo']]\nMencorD = MenoresD[['danceability', 'energy', 'valence', 'loudness', 'tempo']]","832e54b0":"#Major scale correlation\nsns.heatmap(MaycorD.corr(), annot=True, cmap='YlGnBu')","3b26f59d":"sns.heatmap(MencorD.corr(), annot=True, cmap=\"YlGnBu\")","f5e04006":"df.loc[df['key'] == 0, 'key'] = 'C'\ndf.loc[df['key'] == 1, 'key'] = 'C#'\ndf.loc[df['key'] == 2, 'key'] = 'D'\ndf.loc[df['key'] == 3, 'key'] = 'D#'\ndf.loc[df['key'] == 4, 'key'] = 'E'\ndf.loc[df['key'] == 5, 'key'] = 'F'\ndf.loc[df['key'] == 6 ,'key']= 'F#'    \ndf.loc[df['key'] == 7 ,'key'] = 'G'    \ndf.loc[df['key'] == 8 ,'key'] = 'G#'    \ndf.loc[df['key'] == 9 ,'key'] = 'A'    \ndf.loc[df['key'] == 10 ,'key'] = 'A#' \ndf.loc[df['key'] == 11 ,'key'] = 'B'","481bfc85":"sns.set_style(style='darkgrid')\nkeys=df['key'].value_counts()\nkey_DF=pd.DataFrame(keys)\nsns.barplot(x=key_DF.key, y=key_DF.index, palette=\"viridis\")\nplt.title('Popular keys')","e96de019":"df[['danceability', 'energy', 'valence', 'key']].groupby(by='key').mean().sort_values(by='danceability', ascending=False)","e68d984c":"**Top 10 artists with the largest presence in the Top 100**","e0f4391e":"# Energy Tracks","9a81674f":"# top 10 songs with the most energy\nEnergy is a measure from 0.0 to 1.0 and represents a perpetual measure of intensity and activity. typical, energetic tracks feel fast, loud and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate and general entropy.","a0898ac5":"**NOTE** As we can see these songs are influenced by the intermediate rhythms offered by the following genres: \n* Hip-Hop\n* Reggaeton\n* Pop\n* Rap\n\n# Top 10 of the most danceable songs","267d1c52":"**Note** In this case we can observe the same tendency with respect to the rhythm 'Allegro'.","efc2c628":"**ANALYSIS:** We can clearly observe that as values of loudness are closer to zero, the probability that our song has a high content of rythms is higher. In general these values should be kept below zero but not very far away.  ","03e3ced8":"**Analysis:** In this graph we can see that most of the tracks are considered danceable from values higher than 0.5, but to make a better analysis we are going to divide them into 3 groups:\n* Greater than 75% - Very danceable\n* Between 50% and 74% - Regularly danceable \n* Minor 50% - Non Danceable or instrumental music","a61a017f":"** Analysis ** As we can observe the tracks with minor scales show us correlation between the most important variables.\n\n# Keys\nThe key the track is in. integers map to pitches using standard pitch class notation. E.g: 0 = C, 1=C#\/D# Keys\nkeyThe key the track is in. Integers map to pitches using standard Pitch Class notation. E.g. 0 = C, 1 = C\u266f\/D\u266d, 2 = D, and so on.\n","7ce4dfe2":"# Data tratment regarding the 'MODE' column\nWe will analyse the data in such a way that we consider values higher than 0.5 in the danceability and energy columns because most of the data are concentrated in these ranges and we do not want values lower than 0.5, affecting a possible correlation between columns.\n\n**Mode Column**\nMode indicates the modality (Major or Minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor 0.","b99f5250":"**NOTE:** Although according to the data presented the artist is characterized by having more danceable tracks one could say that his influence in this ranking is due to the Hip Hop genre due to the speed belongs to the rhythm \"ALLEGRO\".","eeba82e1":"Convert the column duration to place in standard format (minutes:seg)\n","02a86f72":"# Analysis of artists with greater presence in the top 100 most played songs of 2018.\nresearch on user preferences.","856e60f2":"**Analysis:** We can observe in the strongest tones the existing correlatons between the different columns, at first glance the \"loudness and energy\" columns call our attention but our duty is to explore the behavior of each one of the variables.","e01111da":"# Artist: Drake","0d00e3b6":"# Conclusion:\nThere was only a correlation between energy and noise, on the other hand, you can see that the main reason for people to like these songs is in relation to the time of the track, let's say that most of the tracks were within the range \"Allegro\" and \"Andante\" that are characteristic of the genres:\n* hip Hop\n* Reggaeton \n* Pop\n* Rap","0cef68fe":"# Parameter relationship by key\nAs we can see the most danceable tracks go by the key \"G and C#\" and those that have more energy have \"F#, C# and D\"","7e592124":"# Artist: Post Malone\n","43d76c59":"# Correlations\nIn this section we will take into account the most important variables according to the preliminary analysis of the heatmaps previously seen.","32104f1d":"# Identification of correlations between columns\nin this step we will help you with the corr() function of pandas and then we will make a heat map that will clearly show the correlations between certain columns, although the ideal thing before this step is to have an idea of the columns that will have a possibile correlation. ","c9d81cba":"# Atrist: XXXTENTACION","c0dfaed5":"# Top 10 songs more likely ot create positive feelings\nA measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).","3ad35673":"# Artist Ed Sheeran","fc812bc3":"# What is the musical tempo?\nAt first the musical scores did not give us indications about the tempo or they were very scarce, so each interpreter performed it at ease, but the idea of the tempo begins to change from the eighteenth and nineteenth century, possibly as a consequence of the fact that composers will be tired of listeningto interpretations of their works with completely arbitraty times. Then came a notaion that expressed the \"speed\" or form that the works should be executed.\n\nThe 5 Most usual ones were:\n* length: Very slow (20 bpm)\n* Adagio: Slow & Majestic (66 to 76 bpm)\n* Andante: At the pace, quiet (76 to 108 bpm)\n* Allegro: animated and fast. (110 to 168 bpm)\n* Presto: Very fast (168 to 200 bpm)"}}