{"cell_type":{"c953df5b":"code","16b70fe9":"code","add0b0a4":"code","916e9589":"code","0da8f8be":"code","863e69b0":"code","d703f0a9":"code","d346b542":"code","eb1dde20":"code","b88b5c82":"code","ca0eddc6":"code","59eef800":"markdown","3eb95ac3":"markdown","a85b43fb":"markdown","66dadc25":"markdown","c2da1b0b":"markdown","91a035e0":"markdown","c34ffaa5":"markdown","a4d1bc43":"markdown","ebfd077d":"markdown","e892c3cc":"markdown","95515726":"markdown","d927a0b0":"markdown"},"source":{"c953df5b":"import re # as usual we need to import `re` for general regex operations","16b70fe9":"my_string = \"the 80s music hits were the 70s much better that the 90s\"\n\nprint(re.findall(r\"the\\s\\d+s$\", my_string)) #pattern to find the Xs from string\n\nprint(\"\\nIt will not return either first or middle 'the Xs' but will return only last one\")","add0b0a4":"my_string = \"the 80s music hits were the 70s much better that the 90s\"\n\nprint(re.findall(r\"^the\\s\\d+s\", my_string)) #pattern to find the Xs from string\n\nprint(\"\\nIt will not return either last or middle 'the Xs' but will return only first one\")","916e9589":"my_string = \"the 80s music hits were the 70s much better that the 90s\"\n\nprint(re.findall(r\"the\\s\\d+s\", my_string)) #Not using either ^ or $\n\nprint(\"\\nIt will every matched string :)\")","0da8f8be":"my_string = \"Elephants are the world's largest land animal! I would love to see an elephant one day\"\n\nprint(re.findall(r\"Elephant|elephant\", my_string))","863e69b0":"vowels = []\nno_vowels = []\nnames = [\"Rishabh\",\"Tridev\",\"Arihant\",\"umang\",\"aniket\",\"ojash\",\"Praful\",\"rahul\"]\nprint(names)\n#find all names starting with vowels(Upper and lowercase both)\n\nprint(\"******************Names starting with vowels********************\")\n\nregex_pattern = r\"^[aeiouAEIOU].*\" #starting letter should be one of the letter mentioned in square bracket\nfor name in names:\n    if re.findall(regex_pattern,name):\n        vowels.append(name)\nprint(vowels)\n    \n#find all names that don't start with vowels(Upper and lowercase both)\n\nprint(\"******************Names not starting with vowels********************\")\n\nregex_pattern = r\"^[^aeiouAEIOU].*\" #starting letter anything except these characters mentioned in square brackets\nfor name in names:\n    if re.findall(regex_pattern,name):\n        no_vowels.append(name)\n        \nprint(no_vowels)","d703f0a9":"links = [\"visit this link www.hdtyfdtrxukuyof=+donalsd+trump.com \",\"i'm giving my google drive link www.gdrive-rishabh.com\"]\n\nprint(emails)\n\nprint(\"links extracted using dot(.)\")\nfor link in links:\n    print(re.findall(r\"www.*com\",link)) #dot(.) matchs everything","d346b542":"emails = ['n.john.smith@gmail.com', '87victory@hotmail.com', '!#mary-=@msca.net']","eb1dde20":"#As per constraints given by company\n\nregex_pattern = r\"[a-zA-z0-9!#%&*$]*@\\w+.com\"\n\nfor email in emails:\n    if re.findall(regex_pattern,email):\n        print(\"{} is a valid email\".format(email))\n    else:\n        print(\"{} is not a valid email\".format(email))","b88b5c82":"passwords =  ['Apple34!rose', 'My87hou#4$', 'abc123']","ca0eddc6":"regex_pattern = r\"[a-zA-z0-9*#$%!&]{8,20}\"\n\nfor password in passwords:\n    if re.findall(regex_pattern,password):\n        print(\"The password {pass_example} is a valid password\".format(pass_example=password))\n    else:\n        print(\"The password {pass_example} is invalid\".format(pass_example=password))   ","59eef800":"<h3>This is the 2nd part of regex series. If you haven't gone through first part of it, I am providing link of first part.<\/h3>\n\n**Link for first_part_of regex_journey :** https:\/\/www.kaggle.com\/rishabh6377\/start-your-regex-journey-part1","3eb95ac3":"<h3>^<\/h3>","a85b43fb":"<h3>$<\/h3>","66dadc25":"<h3>pipe\/OR (|)<\/h3>","c2da1b0b":"# Thank You","91a035e0":"# More Symbols\n\n> **$** use to match pattern at the end of the string\n\n> **^** Use to match pattern at the start of the string\n\n> **.** Match any character (except new line)\n\n> **[]** Use to match a single character(anything) out of many\n\n> **|** It works like OR","c34ffaa5":"**if you want to find all `the Xs` pattern then don't use either ^ or $**","a4d1bc43":"**Combinations of ^ and []**","ebfd077d":"<h3>Objective :<\/h3>\n\n**You have to write a regex script which will check whether a email address, entered by company user is valid or not.**\n\n**The company puts some rules in place to verify that the given email address is valid:**\n\n**The first part can contain:**\n\nUpper A-Z and lowercase letters a-z\n\nNumbers\n\nCharacters: !, #, %, &, *, $, .\n\n**Must have** @\n\n**Domain:**\n\nCan contain any word characters\nBut only .com ending is allowed","e892c3cc":"<h3>Objective :<\/h3> \n\n**write a script that validates the password entered by the user.**\n\n**The company also puts some rules in order to verify valid passwords:**\n\nIt can contain lowercase a-z and uppercase letters A-Z\n\nIt can contain numbers\n\nIt can contain the symbols: *, #, $, %, !, &, .\n\nIt must be at least 8 characters long but not more than 20","95515726":"<h4>In first part, we discussed about regex and it's basics operations. We learnt how to use quantifier and metacharacters as per requirement. We also talked about some functions such as replace(sub),split etc.<\/h4>\n\n<h3>In this notebook we will talk about some more functions of `re` module and will talk about some more symbols.<\/h3>","d927a0b0":"<h3>dot(.)<\/h3>"}}