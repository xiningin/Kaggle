{"cell_type":{"beef8a5d":"code","358e4875":"code","eec23c5c":"code","d4de2a41":"code","8311b167":"code","b455db44":"code","0dd41ee0":"code","9540963d":"code","3f0a7ad1":"code","e0cb65b2":"code","d70e9cd7":"code","7c98fb95":"code","824a8003":"code","94dc619b":"code","8b9292cf":"code","9877c0e8":"code","29298ca6":"code","ab0aad12":"code","b63d481a":"code","afc8d37c":"code","f23abc57":"code","a978771f":"code","a69aefd6":"code","8e8798ac":"code","99d7eee0":"code","6a21fa1c":"code","7f46aa42":"code","1b1591a7":"code","cfb1d0fb":"code","bb4925cd":"code","b00fb85a":"code","dd8630aa":"code","3ce55d0b":"code","7803dd5e":"code","b8d46020":"code","656c0350":"code","1c38743e":"code","18ff609a":"code","130caeab":"code","41aa9100":"code","506142a6":"code","c550a0ea":"code","f4729eae":"code","6230ed0e":"code","80b7e3e7":"code","12ba96ec":"code","5724f06a":"code","909a9aed":"code","4facec71":"code","f514d5da":"code","e18fad53":"code","f5da8d2f":"code","4e86e3a8":"code","be7507e8":"markdown","c4e88c52":"markdown","33fca102":"markdown","bc0968c2":"markdown","58d6cfbd":"markdown","af74867d":"markdown","0832ce6a":"markdown","d1858e7a":"markdown","db4b68f3":"markdown","76b703a5":"markdown","7b5657bf":"markdown","46388ba5":"markdown","5bc298d3":"markdown","fe4b1726":"markdown","94de5a4c":"markdown","0fa20653":"markdown","2ba12c48":"markdown","e4a210e3":"markdown","637629ef":"markdown","32f30d96":"markdown","aeef1d28":"markdown","d322a33d":"markdown","7683d8b7":"markdown","caefb301":"markdown","a4f6d94e":"markdown","93dce31e":"markdown","de596e24":"markdown","2aa1cbaf":"markdown","a1dab66c":"markdown"},"source":{"beef8a5d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nimport plotly.express as px\nfrom PIL import Image\n\nimport warnings\nwarnings.filterwarnings('ignore')\nplt.style.use('seaborn')\n\n%matplotlib inline","358e4875":"pip install haversine","eec23c5c":"from haversine import haversine\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\nimport lightgbm as lgb","d4de2a41":"train_df = pd.read_csv(\"\/kaggle\/input\/new-york-city-taxi-fare-prediction\/train.csv\", nrows= 50000, parse_dates=[\"pickup_datetime\"])\ntest_df = pd.read_csv('\/kaggle\/input\/new-york-city-taxi-fare-prediction\/test.csv', parse_dates=[\"pickup_datetime\"])\ntrain_df.head()","8311b167":"train_df.shape","b455db44":"train_df.info()","0dd41ee0":"train_df.describe()","9540963d":"Spectral_palette = sns.color_palette(\"Spectral\", 10)\nsns.palplot(Spectral_palette)","3f0a7ad1":"train_df.head()","e0cb65b2":"f, ax = plt.subplots(1,1, figsize=(8,6))\nmsno.bar(train_df, ax=ax, color=Spectral_palette[7])\nplt.title('Null Values')\nplt.show()","d70e9cd7":"pd.DataFrame(train_df.isnull().sum(), columns=[\"Train Null Count\"])","7c98fb95":"pd.DataFrame(test_df.isnull().sum(), columns=[\"Test Null Count\"])","824a8003":"train_df.head()","94dc619b":"def get_total_distance(df):\n    a1 = df['pickup_latitude']\n    a2 = df['dropoff_latitude']\n    \n    b1 = df['pickup_longitude']\n    b2 = df['dropoff_longitude']\n\n    pick_up = (a1, b1) \n    drop_off = (a2, b2)\n    return haversine(pick_up, drop_off)\n    # haversine function : Get Distance to use x(latitude, longitude), y(latitude, longitude)","8b9292cf":"train_df['total_distance'] = train_df.apply(lambda x: get_total_distance(x),axis=1)\ntest_df['total_distance'] = test_df.apply(lambda x: get_total_distance(x),axis=1)\ntrain_df.head()","9877c0e8":"Spectral_palette","29298ca6":"fig = plt.figure(figsize=(8,9))\n\nfor i in range(2):\n    plt.subplot(2, 1, i+1)\n    plt.title(\"Train Data index {} | Distance :{:.3f}\".format(i, train_df['total_distance'][i]))\n    plt.scatter(train_df['pickup_longitude'][i], train_df['pickup_latitude'][i], color=Spectral_palette[1], label=\"Pick up location\")\n    plt.scatter(train_df['dropoff_longitude'][i], train_df['dropoff_latitude'][i], color=Spectral_palette[-1], label=\"Drop off location\")\n    plt.plot([train_df['pickup_longitude'][i],train_df['dropoff_longitude'][i]],[train_df['pickup_latitude'][i],train_df['dropoff_latitude'][i]],'k:')\n    plt.axis('off')\n    plt.legend()\n    \nfig.text(0.05,0.95,\"Length by pickup location and drop off location\", fontweight=\"bold\", fontfamily='serif', fontsize=20)\nplt.show()","ab0aad12":"f = px.scatter_3d(train_df[:10000], x='pickup_latitude', y='pickup_longitude', z='total_distance',\n                    color='fare_amount')\nf.show()","b63d481a":"f = px.scatter_3d(train_df[:10000], x='dropoff_latitude', y='dropoff_longitude', z='total_distance',\n                    color='fare_amount')\nf.show()","afc8d37c":"train_df['pickup_datetime_year'] = train_df['pickup_datetime'].dt.year\ntrain_df.head()","f23abc57":"train_df['pickup_datetime_year'].value_counts()","a978771f":"fig, ax = plt.subplots(1,1, figsize=(6, 4), constrained_layout=True)\n\nax = sns.countplot(train_df['pickup_datetime_year'], palette=Spectral_palette)\nax.patch.set_alpha(0)\nax.set_xlabel(\"\")\nax.set_ylabel(\"\")\nfig.text(0.08,1.03,\"Count of data by year\", fontweight=\"bold\", fontfamily='serif', fontsize=18)\nplt.show()","a69aefd6":"df_index =[1,3,4,5,6,7]\nfig = plt.figure(figsize=(10,8))\n\nfor num, i in enumerate(df_index):\n    plt.subplot(3,2,num+1)\n    plt.title(\"{} Column\".format(train_df.columns[i]))\n    plt.boxplot(train_df.iloc[:,i])\n\nfig.text(0.08,0.94,\"Boxplot the each columns\", fontweight=\"bold\", fontfamily='serif', fontsize=18)\nplt.show()","8e8798ac":"df_index =[1,3,4,5,6,7]\nfig = plt.figure(figsize=(12,8))\n\nfor num, i in enumerate(df_index):\n    plt.subplot(2, 3,num+1)\n    plt.title(\"{} Column\".format(train_df.columns[i]))\n    plt.hist(train_df.iloc[:,i], color=Spectral_palette[num])\n\nfig.text(0.08,0.94,\"Histogram the each columns\", fontweight=\"bold\", fontfamily='serif', fontsize=18)\nplt.show()","99d7eee0":"df_index =[1,3,4,5,6,7]\nfig = plt.figure(figsize=(14,10))\n\nfor num, i in enumerate(df_index):\n    plt.subplot(2,3,num+1)\n    plt.title(\"{} Column\".format(train_df.columns[i]))\n    sns.kdeplot(train_df.iloc[:,i], fill=True, lw=1.7, alpha=0.7, color=Spectral_palette[num+4])\n\nfig.text(0.08,0.94,\"KdePlot the each columns\", fontweight=\"bold\", fontfamily='serif', fontsize=18)\nplt.show()","6a21fa1c":"def data_cleansing(df, data=\"Train\"):\n    \n    print(\"Before cleansing shape : {}\".format(df.shape))\n    print(\"----- CLEANSING -----\")\n    \n    if data==\"Train\":\n        df = df.drop(df[df['fare_amount'] <= 2].index)\n        df = df.drop(df[df['fare_amount'] >= 100].index)\n        print(df.shape)\n    \n    df = df.drop(df[df['pickup_longitude'] <= -74.5].index)\n    df = df.drop(df[df['pickup_longitude'] >= -73.5].index)\n    print(df.shape)\n   \n    df = df.drop(df[df['pickup_latitude'] <= 40.4].index)\n    df = df.drop(df[df['pickup_latitude'] >= 41].index)\n    print(df.shape)\n   \n    df = df.drop(df[df['dropoff_longitude'] <= -74.5].index)\n    df = df.drop(df[df['dropoff_longitude'] >= -73.5].index)\n    print(df.shape)\n   \n    df = df.drop(df[df['dropoff_latitude'] <= 40.4].index)\n    df = df.drop(df[df['dropoff_latitude'] >= 41].index)\n    print(df.shape)\n       \n    # No more than 7 passengers are allowed on board.\n    df = df.drop(df[df['passenger_count'] <= 0].index)\n    df = df.drop(df[df['passenger_count'] >= 7].index)\n    \n    print(\"----- CLEANSING -----\")\n    print(\"After cleansing shape : {}\".format(df.shape))\n    \n    return df","7f46aa42":"train_df['fare_amount'].sort_values(ascending=False)","1b1591a7":"train_df = data_cleansing(train_df, \"Train\")","cfb1d0fb":"f = px.scatter_3d(train_df[:10000], x='pickup_latitude', y='pickup_longitude', z='total_distance',\n                    color='fare_amount')\nf.show()","bb4925cd":"f = px.scatter_3d(train_df[:10000], x='dropoff_latitude', y='dropoff_longitude', z='total_distance',\n                    color='fare_amount')\nf.show()","b00fb85a":"map_img = plt.imread('..\/input\/google-map-nyc-40474541735-kor-version\/google_map_NYC_(40.4-74.541-73.5)_KOR_VERSION.png')","dd8630aa":"plt.imshow(map_img)\nplt.show()","3ce55d0b":"def plot_map(df, map_img, s=10, alpha=0.2):\n    f, ax = plt.subplots(1, 2, figsize=(16,8))\n    ax[0].scatter(df.pickup_longitude, df.pickup_latitude, zorder=1, alpha=alpha, c='r', s=s)\n    ax[0].set_xlim(-74.5, -73.5)\n    ax[0].set_ylim((40.4, 41))\n    ax[0].set_title('Pickup locations')\n    ax[0].axis('off')\n    ax[0].imshow(map_img, zorder=0, extent=(-74.5, -73.5, 40.4, 41))\n\n    ax[1].scatter(df.dropoff_longitude, df.dropoff_latitude, zorder=1, alpha=alpha, c='r', s=s)\n    ax[1].set_xlim(-74.5, -73.5)\n    ax[1].set_ylim((40.4, 41))\n    ax[1].set_title('Dropoff locations')\n    ax[1].axes.xaxis.set_visible(False)\n    ax[1].axes.yaxis.set_visible(False)\n    ax[1].imshow(map_img, zorder=0, extent=(-74.5, -73.5, 40.4, 41))","7803dd5e":"plot_map(train_df[:1000], map_img)","b8d46020":"train_df.head()","656c0350":"train_df[\"year\"] = train_df[\"pickup_datetime\"].dt.year\ntrain_df[\"weekday\"] = train_df[\"pickup_datetime\"].dt.weekday\ntrain_df[\"hour\"] = train_df[\"pickup_datetime\"].dt.hour\n\ntest_df[\"year\"] = test_df[\"pickup_datetime\"].dt.year\ntest_df[\"weekday\"] = test_df[\"pickup_datetime\"].dt.weekday\ntest_df[\"hour\"] = test_df[\"pickup_datetime\"].dt.hour","1c38743e":"train_df.head()","18ff609a":"test_df.head()","130caeab":"train_df.drop(['key','pickup_datetime','pickup_datetime_year'], axis=1, inplace=True)\ntest_df.drop(['key','pickup_datetime'], axis=1, inplace=True)\ntrain_df.head()","41aa9100":"train_df.info()","506142a6":"x = train_df.drop('fare_amount', axis=1)\ny = train_df['fare_amount']","c550a0ea":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)\nprint(\"X train data shape : {}\".format(x_train.shape))\nprint(\"Y train data shape : {}\".format(y_train.shape))\n\nprint(\"X test data shape : {}\".format(x_test.shape))\nprint(\"Y test data shape : {}\".format(y_test.shape))","f4729eae":"x_test, x_val, y_test, y_val = train_test_split(x_test, y_test, test_size=0.6)\nprint(\"X validation data shape : {}\".format(x_val.shape))\nprint(\"Y validation data shape : {}\".format(y_val.shape))\n\nprint(\"X test data shape : {}\".format(x_test.shape))\nprint(\"Y test data shape : {}\".format(y_test.shape))","6230ed0e":"train_data = lgb.Dataset(x_train, label=y_train)\nval_data = lgb.Dataset(x_val, label=y_val)","80b7e3e7":"params = {\n    'n_estimators': 5000,\n    'num_leaves': 500,\n    'max_depth': -1,\n    'min_data_in_leaf': 1000,\n    'learning_rate': 0.003,\n    'boosting': 'gbdt',\n    'objective': 'regression',\n    'metric': 'mse',\n    'Is_training_metric': True,\n    'n_jobs': -1\n}","12ba96ec":"model = lgb.train(params,\n                  train_data,\n                  valid_sets=val_data, \n                  valid_names=['train','valid'],\n                  early_stopping_rounds=100)","5724f06a":"print('Starting predicting...')\n# predict\ny_pred = model.predict(x_test)\n# eval\nprint('The rmse of prediction is:', mean_squared_error(y_test, y_pred))","909a9aed":"submission = pd.read_csv('..\/input\/new-york-city-taxi-fare-prediction\/sample_submission.csv')\nsubmission.head()","4facec71":"submission.shape","f514d5da":"pred = model.predict(test_df)","e18fad53":"print(pred[:10])","f5da8d2f":"submission['fare_amount'] = pred","4e86e3a8":"submission.to_csv(\"submission.csv\", index=False)","be7507e8":"### 6-2) Drop useful Columns","c4e88c52":"### 7-3) Evaluating","33fca102":"##### Reference\n* https:\/\/www.kaggle.com\/breemen\/nyc-taxi-fare-data-exploration\n* http:\/\/egloos.zum.com\/incredible\/v\/7479081\n\n###  If this notebook is useful for your kaggling, \"UPVOTE\" for it \ud83d\udc40\n#### THX to Reading My Notebook\ud83c\udf08","bc0968c2":"# 6. Feature Enginnering\n* Encoding to Datetime type columns\n* Drop unuseful columns","58d6cfbd":"![taxi_illustration.jpg](attachment:85eaa9b8-b281-4daa-af8f-d559e45bfbec.jpg)\n\n# New York City Taxi Fare Prediction\n\n## Overview\nThis Notebook will be completed in two main ways.\nFirst, find and visualize useful data or meaningful relationships within the data.\nSecond, select a model based on the visualization of the previous process. Transform or refine the data into the appropriate form for the model to be used.\n<br\/><br\/>\n\nThis is a competition to predict taxi fares in New York. given data contains latitude and longitude. We will predict the result through the boarding position and the disembarkation position. In addition, you can make additional predictions considering the boarding time or boarding date.We need to get New York's latitude and longitude, and remove other values.\n\n\n##### \"In this notebook, New York's longitude and latitude are designated as (40.489707, -74.262378) => (40.937760, -73.698009)\"\n<br\/><br\/>\n\n#### My opinion :\n1) These data can be visualized as coordinates. So I'm going to visualize where I get in and where I get off a taxi, and then I'm going to visualize a map of New York.<br\/>\n2) Since taxi time and cost vary from day to day, I think it is better to consider the day of the boarding date to learn about it. ex) Mon, Tue, Wed...","af74867d":"### 7-1) Divide the data into training, testing and evaluation","0832ce6a":"### 3-2)  Get \"Total Distance\" Columns (Useing haversine libaray) and Plot it","d1858e7a":"### 3-1) Plot the null values\n","db4b68f3":"# 7. Modeling\n* LightGBM Regressor Modeling\n* Divide the data into training, testing and evaluation\n* Training\n* Evaluating","76b703a5":"### 3-4) Plot the each rows year","7b5657bf":"### 6-1) Encoding to Datetime type columns","46388ba5":"### 5-2) Plot New York's longitude and latitude against the backdrop of the New York map.\n##### You can use this img\n* Add data => Search the \"google_mapNYC(40.4-74.541-73.5)_KOR_VERSION.png\"","5bc298d3":"### 5-1) Plot the longitude and latitude per total_distance with [3d interactive Plot]","fe4b1726":"# 5. EDA with Visualization [After Preprocessing]\n* Plot the longitude and latitude per total_distance with [3d interactive Plot]\n* Plot New York's longitude and latitude against the backdrop of the New York map.","94de5a4c":"# 4. Prepocessing Data\n* Processing Outlier Values (Out of New York's longitude and latitude)\n\n=>In this notebook, New York's longitude and latitude are designated as (40.489707, -74.262378) => (40.937760, -73.698009)","0fa20653":"# 8. Submission\n* Submit the predictions","2ba12c48":"#### - Lgbm Regressor","e4a210e3":"### 4-1) Processing Outlier Values","637629ef":"-> When you need Total Distance, Then you can use this function","32f30d96":"# 1. Import & Install libray\n* Import basic libray\n* Import Enginnering libray\n* Install \"haversine\" libray that, a function to find the distance.","aeef1d28":"#### => Looking at the graph above, no significant results can be found. <br\/> So after the preprocessing process, I plan to visualize it again.","d322a33d":"# 2. Check out my data\n* Check Shape \/ Info \/ Describe","7683d8b7":"### 3-5) Plot the each columns Histogram \/ Boxplot \/ Kdeplot","caefb301":"Spectral_palette","a4f6d94e":"### 7-2) Training","93dce31e":"***\n## My workflow\n#### 1. Import & Install libray\n* Import basic libray\n* Import Enginnering libray\n\n#### 2. Check out my data\n* Check Shape \/ Info \/ Describe\n\n#### 3. Exploratory Data Analysis(EDA) with Visualization [Before Preprocessing]\n* Plot the null values\n* Get \"Total Distance\" Columns (Useing haversine libaray) and Plot it\n* Plot the each rows year\n* Plot the longitude and latitude per total_distance with [3d interactive Plot]\n* Plot the each columns Histogram \/ Boxplot \/ Kdeplot\n\n\n#### 4. Prepocessing Data\n* Processing Outlier Values (Out of New York's longitude and latitude)\n* In this notebook, New York's longitude and latitude are designated as (40.489707, -74.262378) => (40.937760, -73.698009)\n\n#### 5. Visualization [After Preprocessing]\n* Plot the longitude and latitude per total_distance with [3d interactive Plot]\n* Plot New York's longitude and latitude against the backdrop of the New York map.\n\n#### 6. Feature Enginnering\n* Encoding to Datetime type columns\n* Drop unuseful columns\n\n#### 7. Modeling\n* * LightGBM Regressor Modeling\n\n#### 8. Submission\n* Submit the predictions","de596e24":"# 3. Exploratory Data Analysis(EDA) with Visualization [Before Preprocessing]\n* Plot the null values\n* Get \"Total Distance\" Columns (Useing haversine libaray) and Plot it\n* Plot the each rows year\n* Plot the longitude and latitude per total_distance with [3d interactive Plot]\n* Plot the each columns Histogram \/ Boxplot \/ Kdeplot","2aa1cbaf":"##### About New York's latitude \/ longitude <br\/>\n* latitude  \t40\u00b029'40\"N - 45\u00b00'42\"N (~40.6643)\n* longitude \t71\u00b047'25\"W - 79\u00b045'54\"W (~-73.9385)\n* This notebook will use (latitude, longitude) \/ (40.489707, -74.262378) => (40.937760, -73.698009)","a1dab66c":"### 3-3) Plot the longitude and latitude per total_distance with [3d interactive Plot]\n\n* (pickup_longitude, dropoff_longitude) per fare_amount"}}