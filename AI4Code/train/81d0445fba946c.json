{"cell_type":{"7fd6a0ff":"code","65465199":"code","941926f5":"code","123ea796":"code","64b7e72b":"code","05ff3fb9":"code","4801a253":"code","1a1ace46":"code","9e9b0260":"code","f44f2e6b":"code","12dbddf2":"code","3102d697":"code","6d37b92c":"code","75e3b5d2":"code","931dc76d":"code","8d2a8404":"code","88aafba5":"code","726d4988":"markdown","3ee623b4":"markdown"},"source":{"7fd6a0ff":"!pip install -U transformers","65465199":"import os\nos.environ[\"TOKENIZERS_PARALLELISM\"] = \"false\"\nimport gc\ngc.enable()\nimport math\nimport json\nimport time\nimport random\nimport multiprocessing\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm, trange\nfrom sklearn import model_selection\nfrom string import punctuation\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.nn import Parameter\nimport torch.optim as optim\nfrom torch.utils.data import (\n    Dataset, DataLoader,\n    SequentialSampler, RandomSampler\n)\nfrom torch.utils.data.distributed import DistributedSampler\n\ntry:\n    from apex import amp\n    APEX_INSTALLED = True\nexcept ImportError:\n    APEX_INSTALLED = False\n\nimport transformers\nfrom transformers import (\n    WEIGHTS_NAME,\n    AdamW,\n    AutoConfig,\n    AutoModel,\n    AutoTokenizer,\n    get_cosine_schedule_with_warmup,\n    get_linear_schedule_with_warmup,\n    logging,\n    MODEL_FOR_QUESTION_ANSWERING_MAPPING,\n)\nlogging.set_verbosity_warning()\nlogging.set_verbosity_error()\n\ndef fix_all_seeds(seed):\n    np.random.seed(seed)\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n\ndef optimal_num_of_loader_workers():\n    num_cpus = multiprocessing.cpu_count()\n    num_gpus = torch.cuda.device_count()\n    optimal_value = min(num_cpus, num_gpus*4) if num_gpus else num_cpus - 1\n    return optimal_value\n\nprint(f\"Apex AMP Installed :: {APEX_INSTALLED}\")\nMODEL_CONFIG_CLASSES = list(MODEL_FOR_QUESTION_ANSWERING_MAPPING.keys())\nMODEL_TYPES = tuple(conf.model_type for conf in MODEL_CONFIG_CLASSES)","941926f5":"print(MODEL_TYPES)","123ea796":"class Config:\n    # model\n#     model_type = 'xlm_roberta'\n    model_name_or_path = \"..\/input\/xlm-roberta-squad2\/deepset\/xlm-roberta-large-squad2\"\n    config_name = \"..\/input\/xlm-roberta-squad2\/deepset\/xlm-roberta-large-squad2\"\n    fp16 = True if APEX_INSTALLED else False\n    fp16_opt_level = \"O1\"\n    gradient_accumulation_steps = 2\n\n    # tokenizer\n    tokenizer_name = \"..\/input\/xlm-roberta-squad2\/deepset\/xlm-roberta-large-squad2\"\n    max_seq_length = 400\n    doc_stride = 135\n\n    # train\n    epochs = 1\n    train_batch_size = 4\n    eval_batch_size = 128\n\n    # optimzer\n    optimizer_type = 'AdamW'\n    learning_rate = 1e-5\n    weight_decay = 1e-2\n    epsilon = 1e-8\n    max_grad_norm = 1.0\n\n    # scheduler\n    decay_name = 'linear-warmup'\n    warmup_ratio = 0.1\n\n    # logging\n    logging_steps = 10\n\n    # evaluate\n    output_dir = 'output'\n    seed = 2021","64b7e72b":"class DatasetRetriever(Dataset):\n    def __init__(self, features, mode='train'):\n        super(DatasetRetriever, self).__init__()\n        self.features = features\n        self.mode = mode\n        \n    def __len__(self):\n        return len(self.features)\n    \n    def __getitem__(self, item):   \n        feature = self.features[item]\n        if self.mode == 'train':\n            return {\n                'input_ids':torch.tensor(feature['input_ids'], dtype=torch.long),\n                'attention_mask':torch.tensor(feature['attention_mask'], dtype=torch.long),\n                'offset_mapping':torch.tensor(feature['offset_mapping'], dtype=torch.long),\n                'start_position':torch.tensor(feature['start_position'], dtype=torch.long),\n                'end_position':torch.tensor(feature['end_position'], dtype=torch.long)\n            }\n        else:\n            return {\n                'input_ids':torch.tensor(feature['input_ids'], dtype=torch.long),\n                'attention_mask':torch.tensor(feature['attention_mask'], dtype=torch.long),\n                'offset_mapping':feature['offset_mapping'],\n                'sequence_ids':feature['sequence_ids'],\n                'id':feature['example_id'],\n                'context': feature['context'],\n                'question': feature['question']\n            }","05ff3fb9":"class Model(nn.Module):\n    def __init__(self, modelname_or_path, config):\n        super(Model, self).__init__()\n        self.config = config\n        self.xlm_roberta = AutoModel.from_pretrained(modelname_or_path, config=config)\n        self.qa_outputs = nn.Linear(config.hidden_size, 2)\n        self.dropout = nn.Dropout(config.hidden_dropout_prob)\n        self._init_weights(self.qa_outputs)\n        \n    def _init_weights(self, module):\n        if isinstance(module, nn.Linear):\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.bias is not None:\n                module.bias.data.zero_()\n\n    def forward(\n        self, \n        input_ids, \n        attention_mask=None, \n        # token_type_ids=None\n    ):\n        outputs = self.xlm_roberta(\n            input_ids,\n            attention_mask=attention_mask,\n        )\n\n        sequence_output = outputs[0]\n        pooled_output = outputs[1]\n        \n        # sequence_output = self.dropout(sequence_output)\n        qa_logits = self.qa_outputs(sequence_output)\n        \n        start_logits, end_logits = qa_logits.split(1, dim=-1)\n        start_logits = start_logits.squeeze(-1)\n        end_logits = end_logits.squeeze(-1)\n    \n        return start_logits, end_logits","4801a253":"def make_model(args):\n    config = AutoConfig.from_pretrained(args.config_name)\n    tokenizer = AutoTokenizer.from_pretrained(args.tokenizer_name)\n    model = Model(args.model_name_or_path, config=config)\n    return config, tokenizer, model","1a1ace46":"def prepare_test_features(args, example, tokenizer):\n    example[\"question\"] = example[\"question\"].lstrip()\n    \n    tokenized_example = tokenizer(\n        example[\"question\"],\n        example[\"context\"],\n        truncation=\"only_second\",\n        max_length=args.max_seq_length,\n        stride=args.doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    features = []\n    for i in range(len(tokenized_example[\"input_ids\"])):\n        feature = {}\n        feature[\"example_id\"] = example['id']\n        feature['context'] = example['context']\n        feature['question'] = example['question']\n        feature['input_ids'] = tokenized_example['input_ids'][i]\n        feature['attention_mask'] = tokenized_example['attention_mask'][i]\n        feature['offset_mapping'] = tokenized_example['offset_mapping'][i]\n        feature['sequence_ids'] = [0 if i is None else i for i in tokenized_example.sequence_ids(i)]\n        features.append(feature)\n    return features","9e9b0260":"import collections\n\ndef postprocess_qa_predictions(examples, features, raw_predictions, n_best_size = 20, max_answer_length = 64):\n    all_start_logits, all_end_logits = raw_predictions\n    \n    example_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\n    features_per_example = collections.defaultdict(list)\n    for i, feature in enumerate(features):\n        features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)\n\n    predictions = collections.OrderedDict()\n\n    print(f\"Post-processing {len(examples)} example predictions split into {len(features)} features.\")\n\n    for example_index, example in examples.iterrows():\n        feature_indices = features_per_example[example_index]\n\n        min_null_score = None\n        valid_answers = []\n        \n        context = example[\"context\"]\n        for feature_index in feature_indices:\n            start_logits = all_start_logits[feature_index]\n            end_logits = all_end_logits[feature_index]\n\n            sequence_ids = features[feature_index][\"sequence_ids\"]\n            context_index = 1\n\n            features[feature_index][\"offset_mapping\"] = [\n                (o if sequence_ids[k] == context_index else None)\n                for k, o in enumerate(features[feature_index][\"offset_mapping\"])\n            ]\n            offset_mapping = features[feature_index][\"offset_mapping\"]\n            cls_index = features[feature_index][\"input_ids\"].index(tokenizer.cls_token_id)\n            feature_null_score = start_logits[cls_index] + end_logits[cls_index]\n            if min_null_score is None or min_null_score < feature_null_score:\n                min_null_score = feature_null_score\n\n            start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            for start_index in start_indexes:\n                for end_index in end_indexes:\n                    if (\n                        start_index >= len(offset_mapping)\n                        or end_index >= len(offset_mapping)\n                        or offset_mapping[start_index] is None\n                        or offset_mapping[end_index] is None\n                    ):\n                        continue\n                    # Don't consider answers with a length that is either < 0 or > max_answer_length.\n                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:\n                        continue\n\n                    start_char = offset_mapping[start_index][0]\n                    end_char = offset_mapping[end_index][1]\n                    valid_answers.append(\n                        {\n                            \"score\": start_logits[start_index] + end_logits[end_index],\n                            \"text\": context[start_char: end_char]\n                        }\n                    )\n        \n        if len(valid_answers) > 0:\n            best_answer = sorted(valid_answers, key=lambda x: x[\"score\"], reverse=True)[0]\n        else:\n            best_answer = {\"text\": \"\", \"score\": 0.0}\n        \n        predictions[example[\"id\"]] = best_answer[\"text\"]\n        \n        \n    return predictions","f44f2e6b":"def jaccard(str1, str2): \n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))\n","12dbddf2":"def get_predictions(checkpoint_path):\n    config, tokenizer, model = make_model(Config())\n    model.cuda();\n    model.load_state_dict(\n        torch.load(checkpoint_path)\n    );\n    \n    start_logits = []\n    end_logits = []\n    for batch in tqdm(test_dataloader):\n        with torch.no_grad():\n            outputs_start, outputs_end = model(batch['input_ids'].cuda(), batch['attention_mask'].cuda())\n            start_logits.append(outputs_start.cpu().numpy().tolist())\n            end_logits.append(outputs_end.cpu().numpy().tolist())\n            del outputs_start, outputs_end\n    del model, tokenizer, config\n    gc.collect()\n    return np.vstack(start_logits), np.vstack(end_logits)","3102d697":"BASE = '..\/input\/cv-folds\/'\n\n# MODEL_BASE=['..\/input\/10-epochs\/results_2','..\/input\/10-epochs\/results_2','..\/input\/10-epochs\/results_2','..\/input\/10-epochs\/results','..\/input\/10-epochs\/results']\n\nfinal_df=pd.DataFrame()\nanswers=[]\npreds=[]\njac=[] \nall_cv=[]\nhindi_cv=[]\ntamil_cv=[]\nfor fold in range(5):\n    cv_scores=[]\n    small_df=pd.DataFrame()\n    print('='*50)\n    print('fold :', fold)\n    print('='*50)\n\n    test_all = pd.read_csv(BASE + f'cv_fold_{fold}.csv')\n    tamil = pd.read_csv(f'..\/input\/hinid-tamil-folds\/tamil_fold_{fold}.csv')\n    hindi = pd.read_csv(f'..\/input\/hinid-tamil-folds\/hindi_fold_{fold}.csv')\n\n    all_df = [test_all, tamil, hindi]\n    scri= ['All', 'Tamil', 'Hindi']\n\n    for o, test in (enumerate(all_df)):\n        print('Language :', scri[o])\n\n        tokenizer = AutoTokenizer.from_pretrained(Config().tokenizer_name)\n        test_features = []\n        for i, row in test.iterrows():\n            test_features += prepare_test_features(Config(), row, tokenizer)\n\n        args = Config()\n        test_dataset = DatasetRetriever(test_features, mode='test')\n        test_dataloader = DataLoader(\n            test_dataset,\n            batch_size=args.eval_batch_size, \n            sampler=SequentialSampler(test_dataset),\n            num_workers=optimal_num_of_loader_workers(),\n            pin_memory=True, \n            drop_last=False\n        )\n        checkpoint_path = '..\/input\/077-wala-dataset\/output\/checkpoint-fold-{}\/pytorch_model.bin'.format(fold)\n        start_logits, end_logits = get_predictions(checkpoint_path)\n\n\n        fin_preds = postprocess_qa_predictions(test, test_features, (start_logits, end_logits))\n\n        submission = []\n        for p1, p2 in fin_preds.items():\n            p2 = \" \".join(p2.split())\n            p2 = p2.strip(punctuation)\n            submission.append((p1, p2))\n\n        sample = pd.DataFrame(submission, columns=[\"id\", \"PredictionString\"])\n\n        test_data =pd.merge(left=test,right=sample,on='id')\n\n\n\n        bad_starts = [\".\", \",\", \"(\", \")\", \"-\", \"\u2013\",  \",\", \";\"]\n        bad_endings = [\"...\", \"-\", \"(\", \")\", \"\u2013\", \",\", \";\"]\n\n        tamil_ad = \"\u0b95\u0bbf.\u0baa\u0bbf\"\n        tamil_bc = \"\u0b95\u0bbf.\u0bae\u0bc1\"\n        tamil_km = \"\u0b95\u0bbf.\u0bae\u0bc0\"\n        hindi_ad = \"\u0908\"\n        hindi_bc = \"\u0908.\u092a\u0942\"\n\n\n        cleaned_preds = []\n        for pred, context in test_data[[\"PredictionString\", \"context\"]].to_numpy():\n            if pred == \"\":\n                cleaned_preds.append(pred)\n                continue\n            while any([pred.startswith(y) for y in bad_starts]):\n                pred = pred[1:]\n            while any([pred.endswith(y) for y in bad_endings]):\n                if pred.endswith(\"...\"):\n                    pred = pred[:-3]\n                else:\n                    pred = pred[:-1]\n            if pred.endswith(\"...\"):\n                    pred = pred[:-3]\n\n            if any([pred.endswith(tamil_ad), pred.endswith(tamil_bc), pred.endswith(tamil_km), pred.endswith(hindi_ad), pred.endswith(hindi_bc)]) and pred+\".\" in context:\n                pred = pred+\".\"\n\n            cleaned_preds.append(pred)\n\n\n           \n\n        \n        kac=[]\n        for i in range(len(test)):\n            jac.append(jaccard(cleaned_preds[i], test.answer_text.values[i]))\n            answers.append(test.answer_text.values[i])\n            preds.append(cleaned_preds[i])\n\n        \n        \n#     print('All cv:', cv_scores[0])\n#     all_cv.append(cv_scores[0])\n#     print('Tamil cv:', cv_scores[1])\n#     tamil_cv.append(cv_scores[1])\n#     print('Hindi cv:', cv_scores[2])\n#     hindi_cv.append(cv_scores[2])","6d37b92c":"final_df['answer'] = answers\nfinal_df['preds'] = preds\nfinal_df['jaccard'] = jac","75e3b5d2":"final_df.to_csv('77wala.csv', index=False)","931dc76d":"# print('all:', all_cv)\n# print('tamil:', tamil_cv)\n# print('hindi:', hindi_cv)","8d2a8404":"# train_folds = pd.read_csv('..\/input\/chaii-train-folds\/train_folds.csv')\n\n# cv_scores=[]\n# for fold in range(5):\n    \n#     test = train_folds[train_folds['kfold'] == fold]\n#     test.to_","88aafba5":"# import  pandas as pd\n# train_folds = pd.read_csv('..\/input\/chaii-train-folds\/train_folds.csv')\n\n# cv_scores=[]\n# for fold in range(5):\n    \n#     test = train_folds[train_folds['kfold'] == fold]\n#     test.to_csv(f'cv_fold_{fold}.csv', index=False)\n#     print(len(test))","726d4988":"# ","3ee623b4":"# Cross validation framework for the models:\n### Note: the data used here was chaii data stratified into 5 folds with a random state of 69\n\n### Model building:\n\n<ul>  \n    <li>Using the datasets : chaii, mlqa, squad, tamil_xquad <\/li>\n    <li>Training for 2 epochs : <a href=\"https:\/\/www.kaggle.com\/kishalmandal\/chaii-fit-2-epochs-mlqa-xquad-chaii\/\">chaii | FIT - 2 epochs | mlqa, xquad, chaii<\/a> <\/li>\n    <li>Training for 7 epochs with tamil_xquad: <a href=\"https:\/\/www.kaggle.com\/kishalmandal\/chaii-fit-7-epochs-extra-tamil-data\/\">chaii | FIT - 7 epochs | Extra Tamil Data<\/a> <\/li>\n    <li>Inferencing from 5 folds | fold-0 and fold-1 (7-epochs) | fold-2, fold-3 and fold-4 (2-epochs)| based on cross validation scores and a little bit of experimentation \ud83d\ude1c: <a href=\"https:\/\/www.kaggle.com\/kishalmandal\/5-epochs-infer-combined-model-0-792\/\">5 epochs | INFER | combined model (0.792)<\/a><\/li>\n    \n    \n<\/ul>\n\n### References : \n\n<ul> \n    <li>For training: <a href=\"https:\/\/www.kaggle.com\/rhtsingh\/chaii-qa-5-fold-xlmroberta-torch-fit\">chaii QA - 5 Fold XLMRoberta Torch | FIT<\/a> by <a href=\"https:\/\/www.kaggle.com\/rhtsingh\">torch<\/a><\/li>\n    <li>For Inference: <a href=\"https:\/\/www.kaggle.com\/rhtsingh\/chaii-qa-5-fold-xlmroberta-torch-infer\">chaii QA - 5 Fold XLMRoberta Torch | Infer<\/a> by <a href=\"https:\/\/www.kaggle.com\/rhtsingh\">torch<\/a><\/li>\n    <li>For post processing outputs: <a href=\"https:\/\/www.kaggle.com\/nbroad\/chaii-qa-torch-5-fold-with-post-processing-765\">chaii QA-Torch 5 fold with post-processing (.765)<\/a> by <a href=\"https:\/\/www.kaggle.com\/nbroad\">Nicholas Broad \ud83d\udfe2<\/a><\/li>\n<\/ul>\n\n\n### Important Notes:\n\n<ul>\n    <li>Some one experimented with the max_seq_length and doc_stride to bring my previous 0.785 to 0.792. Then I performed some more experiments and saw more than 400 decreases the score (~0.3-0.4) while decreasing below 400 upto around 384 does not change the score by much (~0.2)<\/li>\n    <li>Vigourous change or lr and decay rates reduces the performance.<\/li>\n    <li>I took weighted average based on the validation loss increased score by (~0.01)<\/li>\n<\/ul>"}}