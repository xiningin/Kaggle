{"cell_type":{"047f3035":"code","99a4997c":"code","b8e6743b":"code","9d485693":"code","ef79827e":"code","da49cc09":"code","1b8a86da":"code","cea47c67":"code","15e351e4":"code","d36692c5":"code","a93160d8":"code","cea11e88":"code","832cac2b":"code","526e672b":"code","7612c21c":"code","ffc5d229":"code","661a259b":"code","af8aa21e":"markdown","d05ce816":"markdown","aac70272":"markdown","cfcd6569":"markdown","39e02f0d":"markdown","948f31f8":"markdown","eb55e593":"markdown","849a6a0b":"markdown"},"source":{"047f3035":"#@title Map : Daily Spread of Coronavirus\nimport pandas as pd\nimport plotly.express as px\nimport numpy as np\ndf=pd.read_csv(\"..\/input\/covid19-data\/owid-covid-data.csv\")\ndf1=df[df[\"location\"].isin([\"India\",\"Italy\",\"Australia\",\n                            \"Canada\",\"United States\"])]\nfig = px.choropleth(df, \n                    locations=\"location\", \n                    locationmode = \"country names\",\n                    color=\"new_cases\", \n                    hover_name=\"location\", \n                    animation_frame=\"date\"\n                   )\n\nfig.update_layout(\n    title_text = 'Daily Spread of Coronavirus',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nfig.show()","99a4997c":"#@title Graph : stringency_index\n\n\nfig = px.line(df1, x=\"date\", y=\"stringency_index\", color='location',\n              title='stringency_index')\nfig.show()","b8e6743b":"\nfig = px.line(df1, x=\"date\", y=\"new_cases_per_million\", color='location',\n              title='No of cases per million')\nfig.show()","9d485693":"fig = px.line(df1, x=\"date\", y=\"new_cases\", color='location',\n              title='New Cases')\nfig.show()","ef79827e":"#@title Grath : Death_rate\ndf1['death_rate']=(df1['total_deaths']\/df1['total_cases'])*100\n\n\n","da49cc09":"fig = px.line(df1, x=\"date\", y=\"death_rate\", color='location',\n              title='Death Rate')\nfig.show()","1b8a86da":"#@title Pie Chart : Percentage of total cases\nfig = px.pie(df1, values = 'new_cases',names='location', height=600,\n             title = 'Percentage of total cases')\nfig.update_traces(textposition='inside', textinfo='percent+label')\n\nfig.update_layout(\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n\nfig.show()","cea47c67":"#@title Graph : Daily New_Cases of covid19 in India\n\ny=df[df[\"location\"].isin([\"India\"])][['new_cases','date']]\n\ntrain=y[:(len(y['new_cases'])-10)]\nvalid=y[(len(y['new_cases'])-10):]\n\nfig = px.line(y, x=\"date\", y=\"new_cases\",\n              title='New_Cases of covid19 in India')\nfig.show()","15e351e4":"#@title Forecasting new cases in india for next 10 days using Arima Model\nfrom statsmodels.tsa.arima_model import ARIMA\n\nmodel = ARIMA(train['new_cases'],order=(8,1,1))\n#model.fit(train['new_cases'])\nmodel_fit=model.fit()\n\n\n\n#forecast1 = model_fit.predict(start=(len(y['new_cases'])-10),end=len(y['new_cases'])-1)\nforecast1 = np.round_(model_fit.forecast(steps =10)[0])\nprint(forecast1)","d36692c5":"forecast = pd.DataFrame()\nforecast['date']=valid['date']\nforecast['new_cases']=(list(forecast1))\n\nforecast2 = pd.DataFrame()\nforecast2['date']=valid['date']\nforecast2['new_cases(actual)']=valid['new_cases']\nforecast2['new_cases(forecasted)']=(list(forecast1))\nforecast2\n","a93160d8":"import matplotlib.pyplot as plt\nplt.plot(valid['date'],valid['new_cases'])\nplt.plot(forecast['date'],forecast['new_cases'],color='red')","cea11e88":"#@title Display Forecased and Actual Value using line plot\nimport plotly.graph_objs as go\nimport matplotlib. pyplot as plt\n#plot the predictions for validation set\n\n\ntrain['Line']=np.repeat(\"Data\", len(train['new_cases']))\n\nforecast['Line']=np.repeat(\"Forecasted\", len(forecast['new_cases']))\n\nvalid['Line']=np.repeat(\"Actual\", len(valid['new_cases']))\n\n\n\ndf3=valid.append(forecast, ignore_index=True)\n\n","832cac2b":"fig = px.line(df3, x=\"date\", y=\"new_cases\", color='Line',\n              title='forecasted new cases of covid19')\n\nfig1 = go.Figure(fig.add_traces(\n                 data=px.line(train, x='date', y='new_cases')._data,))\n\nfig1.show()\n","526e672b":"#@title Accuracy & Error\n#calculate rmse\nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error\n\n\nac=[]\nfor i in range(1,len(valid)):\n  ac.append(min(forecast['new_cases'].iloc[i],valid['new_cases'].iloc[i])\/max(forecast['new_cases'].iloc[i],valid['new_cases'].iloc[i]))\n\nprint(\"Min-Max accuracy of model is : \",np.mean(ac)*100)\n\nrms = sqrt(mean_squared_error(valid['new_cases'],forecast['new_cases']))\nprint(\"Error: \",rms)","7612c21c":"#@title Forecasting for next 15 days\n\n\n\n\nmodel = ARIMA(y['new_cases'],order=(8,2,2))\nmodel_fit=model.fit()\nforecast1 = np.round_(model_fit.forecast(steps =15)[0])\n\nforecast = pd.DataFrame()\n\n\n\n","ffc5d229":"#forecast=pd.DataFrame()\ndate=pd.date_range(start=y['date'].iloc[-1], periods=16, freq='D')\nforecast['date']=date[1:]\nforecast['new_cases']=list(forecast1)\nforecast","661a259b":"#@title Forecased and Actual Value using line plot\n\ny['Line']=np.repeat(\"Actual\", len(y['new_cases']))\nforecast['Line']=np.repeat(\"Forecasted\", 15)\n\ndf3=y.append(forecast, ignore_index=True)\n\nfig = px.line(df3, x=\"date\", y=\"new_cases\", color='Line',\n              title='forecasted new cases of covid19')\n\nfig1 = go.Figure(fig.add_traces(\n                 data=px.line(train, x='date', y='new_cases')._data,))\n\nfig1.show()","af8aa21e":"**To check the preciseness of our fitted model we have fitted the model over the complete data except last 10 observation and\nlater we predicted these remaining 10 observation and compared with actual observation,  \nso by using this we can study Accuracy of prediction and error.**","d05ce816":"**Forecasting the new cases by using model for next 15 days**","aac70272":"**As we can see from the above values that the accuracy of model is 95%. Hence there can be approximately 5% of variation in forecasted values. Therefore this model can be used for the further prediction purpose.**","cfcd6569":"**We have use arima model for forecasting purpose becasuse out data is time oriented data\nalso there is absence of linear trend in the response variable and regressor,\nso we try to fit our model using arima (autoregressive integrated moving average) instead linear regression model.**","39e02f0d":"**Displaying line plot along with actual and forecsted observation**","948f31f8":" **Visualizing the forecsted values by using line plot**","eb55e593":"# **Comparitive study between countries handling corona**","849a6a0b":"# Forecasting the new cases per day of covid-19 for india"}}