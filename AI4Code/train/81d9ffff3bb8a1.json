{"cell_type":{"9a7865c0":"code","b44ff370":"code","27076c29":"code","b5fe288c":"code","98a810ec":"code","182648ab":"code","b6c87126":"code","c581e903":"code","7b37a2e9":"code","ecbc3e2c":"code","949baf99":"code","8743198f":"code","e03973a1":"code","2c202990":"code","2092f3d5":"code","8c275857":"code","0b79a608":"code","cfaa33da":"code","575fa42e":"code","4a428ca9":"markdown","4123d401":"markdown","2c80d206":"markdown","38fd86fd":"markdown","1aceabef":"markdown","967058bb":"markdown","c95a26e5":"markdown","940f4987":"markdown"},"source":{"9a7865c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b44ff370":"import plotly.express as px\n\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.tree import DecisionTreeRegressor\nimport xgboost as XGB\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","27076c29":"pd.options.display.width = 80\ntrain = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntrain.info()\ntrain","b5fe288c":"train['LotFrontage'] = train['LotFrontage'].fillna(train['LotFrontage'].mean()) # filling NAN of LotFrontage\n\ntrain['Alley'] = train['Alley'].fillna('No alley access')  # filling NAN of Alley\n\ntrain['MasVnrType'] = train['MasVnrType'].fillna('None') # drop NAN\ntrain['MasVnrArea'] = train['MasVnrType'].fillna('None') \n\ntrain['BsmtQual'] = train['BsmtQual'].fillna('No_basement') # Basement NAN\ntrain['BsmtCond'] = train['BsmtCond'].fillna('No_basement')\ntrain['BsmtExposure'] = train['BsmtExposure'].fillna('No_basement')\ntrain['BsmtFinType1'] = train['BsmtFinType1'].fillna('No_basement')\ntrain['BsmtFinType2'] = train['BsmtFinType2'].fillna('No_basement')\ntrain['BsmtFinType2'] = train['BsmtFinType2'].fillna('No_basement')\n\ntrain['Electrical'] = train['Electrical'].fillna('SBrkr') # Electrical NAN\n\ntrain['FireplaceQu'] = train['FireplaceQu'].fillna('No_fireplace') # Fireplace NAN\n\ntrain['GarageType'] = train['GarageType'].fillna('No_garage') # Garage NAN\ntrain['GarageYrBlt'] = train['GarageYrBlt'].fillna(0)\ntrain['GarageFinish'] = train['GarageFinish'].fillna('No_garage')\ntrain['GarageFinish'] = train['GarageFinish'].fillna('No_garage')\ntrain['GarageQual'] = train['GarageQual'].fillna('No_garage')\ntrain['GarageCond'] = train['GarageCond'].fillna('No_garage')\n\ntrain['PoolQC'] = train['PoolQC'].fillna('No_pool') # pool NAN\n\ntrain['Fence'] = train['Fence'].fillna('No_fence') # fence NAN\n\ntrain['MiscFeature'] = train['MiscFeature'].fillna('No') # features NAN\n\ntrain.info()","98a810ec":"test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest.info()\ntest","182648ab":"test.info()","b6c87126":"test['LotFrontage'] = test['LotFrontage'].fillna(test['LotFrontage'].mean()) # filling NAN of LotFrontage\n\ntest['Alley'] = test['Alley'].fillna('No alley access')  # filling NAN of Alley\n\ntest['MasVnrType'] = test['MasVnrType'].fillna('None') # drop NAN\ntest['MasVnrArea'] = test['MasVnrType'].fillna('None') \n\ntest['BsmtQual'] = test['BsmtQual'].fillna('No_basement') # Basement NAN\ntest['BsmtCond'] = test['BsmtCond'].fillna('No_basement')\ntest['BsmtExposure'] = test['BsmtExposure'].fillna('No_basement')\ntest['BsmtFinType1'] = test['BsmtFinType1'].fillna('No_basement')\ntest['BsmtFinType2'] = test['BsmtFinType2'].fillna('No_basement')\ntest['BsmtFinType2'] = test['BsmtFinType2'].fillna('No_basement')\n\ntest['Electrical'] = test['Electrical'].fillna('SBrkr') # Electrical NAN\n\ntest['FireplaceQu'] = test['FireplaceQu'].fillna('No_fireplace') # Fireplace NAN\n\ntest['GarageType'] = test['GarageType'].fillna('No_garage') # Garage NAN\ntest['GarageYrBlt'] = test['GarageYrBlt'].fillna(0)\ntest['GarageFinish'] = test['GarageFinish'].fillna('No_garage')\ntest['GarageFinish'] = test['GarageFinish'].fillna('No_garage')\ntest['GarageQual'] = test['GarageQual'].fillna('No_garage')\ntest['GarageCond'] = test['GarageCond'].fillna('No_garage')\n\ntest['PoolQC'] = test['PoolQC'].fillna('No_pool') # pool NAN\n\ntest['Fence'] = test['Fence'].fillna('No_fence') # fence NAN\n\ntest['MiscFeature'] = test['MiscFeature'].fillna('No') # features NAN\n\ntest['MSZoning'] = test['MSZoning'].fillna('RL') # MSZoning NAN\n\ntest['Utilities'] = test['Utilities'].fillna('AllPub') # Utilities NAN, maybe better to drop column\n\ntest['Exterior1st'] = test['Exterior1st'].fillna('Other') # Exterior NAN\ntest['Exterior2nd'] = test['Exterior2nd'].fillna('Other')\n\ntest['BsmtFinSF1'] = test['BsmtFinSF1'].fillna('0') # Basment sqft NAN\ntest['BsmtFinSF1'] = test['BsmtFinSF1'].astype('float')\ntest['BsmtFinSF2'] = test['BsmtFinSF2'].fillna('0')\ntest['BsmtFinSF2'] = test['BsmtFinSF2'].astype('float')\ntest['BsmtUnfSF'] = test['BsmtUnfSF'].fillna(0)\ntest['TotalBsmtSF'] = test['TotalBsmtSF'].fillna(0)\ntest['BsmtFullBath'] = test['BsmtFullBath'].fillna(0)\ntest['BsmtHalfBath'] = test['BsmtHalfBath'].fillna(0)\n\ntest['Functional'] = test['Functional'].fillna('Typ') # Func NAN\n\ntest['KitchenQual'] = test['KitchenQual'].fillna('TA') # KitchenQ NAN\n\ntest['GarageCars'] = test['GarageCars'].fillna(0) # Garage capac NAN\ntest['GarageArea'] = test['GarageArea'].fillna(0) # Garage area NAN\n\ntest['SaleType'] = test['SaleType'].fillna('Oth') # Garage area NAN\n\ntest.info()","c581e903":"for feat in train.columns:\n    fig = px.histogram(train, x = feat)\n    fig.show()","7b37a2e9":"features_cat = [col for col in train.columns if train[col].dtypes == \"object\"]\nlen(features_cat)","ecbc3e2c":"le = LabelEncoder()\nfor col in features_cat:\n    le.fit(train[col].append(test[col]))\n    train[col] = le.transform(train[col])\n    test[col] = le.transform(test[col])","949baf99":"y_train = train['SalePrice']\ntest_id = test['Id']\nall_data = pd.concat([train, test], axis=0, sort=False)\nall_data = all_data.drop(['Id', 'SalePrice'], axis=1)\n#all_data = pd.get_dummies(all_data)","8743198f":"x_train = all_data[:len(y_train)]\nx_test = all_data[len(y_train):]\nx_test.shape , x_train.shape","e03973a1":"#sc = StandardScaler()\n#x_train = sc.fit_transform(x_train)\n#x_test = sc.fit_transform(x_test)","2c202990":"model = XGB.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, random_state =7, nthread = -1)\nmodel.fit(x_train, y_train)","2092f3d5":"y_pred = model.predict(x_test)\ny_pred","8c275857":"sub = pd.DataFrame()\nsub['Id'] = test_id\nsub['SalePrice'] = y_pred\nsub.to_csv('GBR.csv',index=False)","0b79a608":"model = DecisionTreeRegressor()\nmodel.fit(x_train, y_train)","cfaa33da":"y_pred = model.predict(x_test)\ny_pred","575fa42e":"sub = pd.DataFrame()\nsub['Id'] = test_id\nsub['SalePrice'] = y_pred\nsub.to_csv('DTR.csv',index=False)","4a428ca9":"# Preprocessing:","4123d401":"## Test:\n","2c80d206":"#### DecisionTreeRegressor:","38fd86fd":"# Model:","1aceabef":"## Train:","967058bb":"# EDA:","c95a26e5":"#### Gradient Boosting","940f4987":"#### Label Encoding:"}}