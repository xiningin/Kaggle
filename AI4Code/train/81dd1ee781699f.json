{"cell_type":{"d30e80d7":"code","f538f740":"code","03f851eb":"code","783e5494":"code","e353a12c":"code","ac9b1135":"code","bf8cf383":"code","507ed916":"code","962951ce":"code","81d797ed":"code","90fc31fe":"code","67b5d4c0":"code","44403c16":"code","68ea51c6":"code","12a07a40":"code","8d0603fd":"code","3edc10ed":"code","812c3966":"code","1407eae0":"code","cfefebe9":"code","495bfe76":"code","141f1aee":"code","b7f4f9ee":"code","21db0ce7":"code","902353cc":"code","3cd453b9":"code","05b5b711":"code","a41d98ad":"code","6a18242e":"code","a0da564c":"code","9535d9fb":"code","072bee0d":"code","97967a9e":"code","12a62db4":"code","c8f0c66e":"code","5fe1529d":"code","980c8b99":"code","53230add":"code","2c71ba81":"code","e7a2d580":"code","a7e44fb9":"code","c16a210b":"code","22e5e958":"code","1e4cfa31":"code","fd86fb48":"code","f35a786b":"code","820fc0a1":"code","4dcf6cd4":"code","cca11098":"code","e59a1904":"code","d1a07e30":"code","50c9b542":"markdown","93b3ce3f":"markdown","ada4e1a3":"markdown","ad0f4adb":"markdown","d175b88b":"markdown","d18a6717":"markdown","1d6fed73":"markdown","13d3cbfe":"markdown","45650b1f":"markdown","f803ef98":"markdown","0a0fd97b":"markdown","b3cc8eb2":"markdown","b8077085":"markdown","834dcfa8":"markdown","b10fa237":"markdown","5fb46f2b":"markdown","90e5a53b":"markdown","c31b3a42":"markdown","61b25c44":"markdown","fe53e250":"markdown","8bf37c03":"markdown","3daba498":"markdown","0dbdf153":"markdown","12d770ad":"markdown","e0568f3c":"markdown","4bd1e758":"markdown","75615a12":"markdown","4a88cb6b":"markdown","3bdedba7":"markdown","35e87698":"markdown","09e2ef0b":"markdown","968dfe50":"markdown"},"source":{"d30e80d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\n\nimport cv2\nimport matplotlib.pyplot as plt\nimport matplotlib\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    #for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f538f740":"print(os.listdir('\/kaggle\/input\/aptos2019-blindness-detection\/'))","03f851eb":"root = '\/kaggle\/input\/aptos2019-blindness-detection\/'\ntrain_df = pd.read_csv(os.path.join(root, 'train.csv'))","783e5494":"train_df.shape","e353a12c":"train_df.head(10)","ac9b1135":"train_df['diagnosis'].value_counts()","bf8cf383":"fig=plt.figure(figsize=(8, 5))\ntrain_df['diagnosis'].value_counts().plot.bar()","507ed916":"#%%time\n\n\n\nSEED = 125\nfig = plt.figure(figsize=(25, 16))\nimg_list = []\nimg_size = []\n# display 10 images from each class\n#for class_id in sorted(train_y.unique()):\nfor class_id in [0, 1, 2, 3, 4]:\n    for i, (idx, row) in enumerate(train_df.loc[train_df['diagnosis'] == class_id].sample(5, random_state=SEED).iterrows()):\n        ax = fig.add_subplot(5, 5, class_id * 5 + i + 1, xticks=[], yticks=[])\n        path = os.path.join(root, 'train_images', '{}.png'.format(row['id_code']))\n        image = cv2.imread(path)\n        img_size.append(image.shape)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        #image = cv2.resize(image, (IMG_SIZE, IMG_SIZE))\n        img_list.append(row['id_code'])\n        \n        plt.imshow(image)\n        ax.set_title('Label: %d ' % (class_id) )","962951ce":"IMAGE_SIZE = 256\n\ndef info_image(im):\n    # Compute the center (cx, cy) and radius of the eye\n    cy = im.shape[0]\/\/2\n    midline = im[cy,:]\n    midline = np.where(midline>midline.mean()\/3)[0]\n    if len(midline)>im.shape[1]\/\/2:\n        x_start, x_end = np.min(midline), np.max(midline)\n    else: # This actually rarely happens p~1\/10000\n        x_start, x_end = im.shape[1]\/\/10, 9*im.shape[1]\/\/10\n    cx = (x_start + x_end)\/2\n    r = (x_end - x_start)\/2\n    return cx, cy, r\n\ndef resize_image(im, augmentation=False):\n    # Crops, resizes and potentially augments the image to IMAGE_SIZE\n    cx, cy, r = info_image(im)\n    scaling = IMAGE_SIZE\/(2*r)\n    rotation = 0\n    if augmentation:\n        scaling *= 1 + 0.3 * (np.random.rand()-0.5)\n        rotation = 360 * np.random.rand()\n    M = cv2.getRotationMatrix2D((cx,cy), rotation, scaling)\n    M[0,2] -= cx - IMAGE_SIZE\/2\n    M[1,2] -= cy - IMAGE_SIZE\/2\n    return cv2.warpAffine(im,M,(IMAGE_SIZE,IMAGE_SIZE)) # This is the most important line\n\ndef subtract_median_bg_image(im):\n    k = np.max(im.shape)\/\/20*2+1\n    bg = cv2.medianBlur(im, k)\n    return cv2.addWeighted (im, 4, bg, -4, 128)\n\n#def subtract_gaussian_bg_image(im):\n#    k = np.max(im.shape)\/10\n#    bg = cv2.GaussianBlur(im ,(0,0) ,k)\n#    return cv2.addWeighted (im, 4, bg, -4, 128)","81d797ed":"# To remove irregularities along the circular boundary of the image\nPARAM = 96\ndef Radius_Reduction(img,PARAM):\n    h,w,c=img.shape\n    Frame=np.zeros((h,w,c),dtype=np.uint8)\n    cv2.circle(Frame,(int(math.floor(w\/2)),int(math.floor(h\/2))),int(math.floor((h*PARAM)\/float(2*100))), (255,255,255), -1)\n    Frame1=cv2.cvtColor(Frame, cv2.COLOR_BGR2GRAY)\n    img1 =cv2.bitwise_and(img,img,mask=Frame1)\n    return img1","90fc31fe":"image = cv2.imread(os.path.join(root, 'train_images', '{}.png'.format(img_list[0])))\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nfig=plt.figure(figsize=(8, 8))\nplt.imshow(image)","67b5d4c0":"fig=plt.figure(figsize=(8, 8))\nres_image = resize_image(image)\nplt.imshow(res_image)","44403c16":"fig=plt.figure(figsize=(8, 8))\nsub_med = subtract_median_bg_image(res_image)\nplt.imshow(sub_med)","68ea51c6":"fig=plt.figure(figsize=(8, 8))\nimg_rad_red=Radius_Reduction(sub_med, PARAM)\nplt.imshow(img_rad_red)","12a07a40":"w=10\nh=10\nfig=plt.figure(figsize=(20, 20))\ncolumns = 5\nrows = 5\nfor i in range(1, columns*rows +1):\n    #img = np.random.randint(10, size=(h,w))\n    img = cv2.imread(os.path.join(root, 'train_images', '{}.png'.format(img_list[i-1])))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    res_image = resize_image(img)\n    sub_med = subtract_median_bg_image(res_image)\n    img_rad_red=Radius_Reduction(sub_med, PARAM)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(img_rad_red)\nplt.show()","8d0603fd":"image = cv2.imread(os.path.join(root, 'train_images', '{}.png'.format(img_list[0])))\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nres_image = resize_image(image)\n\nmatplotlib.rc('figure', figsize=[7, 7])\nplt.imshow(res_image)","3edc10ed":"def adjust_gamma(image, gamma):\n    # build a lookup table mapping the pixel values [0, 255] to\n    # their adjusted gamma values\n    invGamma = 1.0 \/ gamma\n    table = np.array([((i \/ 255.0) ** invGamma) * 255\n                for i in np.arange(0, 256)]).astype(\"uint8\")\n    \n    # apply gamma correction using the lookup table\n    return cv2.LUT(image, table)","812c3966":"adjusted = adjust_gamma(res_image, gamma=0.5)\nadjusted_75 = adjust_gamma(res_image, gamma=0.75)\nadjusted_15 = adjust_gamma(res_image, gamma=1.5)\nadjusted_3 = adjust_gamma(res_image, gamma=2.5)","1407eae0":"matplotlib.rc('figure', figsize=[15, 15])\n\nfig, axarr = plt.subplots(2,2)\naxarr[0,0].imshow(adjusted)\naxarr[0,1].imshow(adjusted_75)\naxarr[1,0].imshow(adjusted_15)\naxarr[1,1].imshow(adjusted_3)","cfefebe9":"Parameter = 95\n\ndef Redius_Reduction(img, Parameter):\n    h,w,c=img.shape\n    Frame=np.zeros((h,w,c),dtype=np.uint8)\n    cv2.circle(Frame,(int(math.floor(w\/2)),int(math.floor(h\/2))),int(math.floor((h*Parameter)\/float(2*100))), (255,255,255), -1)\n    Frame1=cv2.cvtColor(Frame, cv2.COLOR_BGR2GRAY)\n    img1 =cv2.bitwise_and(img,img,mask=Frame1)\n    return img1, Frame1","495bfe76":"w=10\nh=10\nfig=plt.figure(figsize=(20, 20))\ncolumns = 5\nrows = 5\nfor i in range(1, columns*rows +1):\n    #img = np.random.randint(10, size=(h,w))\n    img = cv2.imread(os.path.join(root, 'train_images', '{}.png'.format(img_list[i-1])))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    res_image = resize_image(img)\n    #sub_med = subtract_median_bg_image(res_image)\n    img_rad_red, mask = Redius_Reduction(res_image, Parameter)\n    \n    \n    fig.add_subplot(rows, columns, i)\n    plt.imshow(img_rad_red)\n    \nplt.show()","141f1aee":"\nw=10\nh=10\nfig=plt.figure(figsize=(20, 20))\ncolumns = 5\nrows = 5\nfor i in range(1, columns*rows +1):\n    \n    img = cv2.imread(os.path.join(root, 'train_images', '{}.png'.format(img_list[i-1])))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    res_image = resize_image(img)\n    \n    \n    \n    img_rad_red, mask = Redius_Reduction(img, Parameter)\n    pixel_list = img_rad_red[:,:,1][np.where(mask == 255)].tolist()\n    \n    print('Median:', np.median(pixel_list))\n    adjusted_img = None\n    \n    if (np.median(pixel_list) < 70):\n        print('Inside')\n        adjusted_img = adjust_gamma(res_image, gamma = 1.65)\n        \n    elif (np.median(pixel_list) > 180):\n        adjusted_img = adjust_gamma(res_image, gamma = 0.75)\n        \n    \n    else:\n        \n        adjusted_img = res_image\n    \n    fig.add_subplot(rows, columns, i)\n    plt.imshow(adjusted_img)\n    \nplt.show()\n","b7f4f9ee":"#-----Converting image to LAB Color model----------------------------------- \nlab= cv2.cvtColor(res_image, cv2.COLOR_BGR2LAB)\nmatplotlib.rc('figure', figsize=[7, 7])\nplt.imshow(lab)","21db0ce7":"\n\n#-----Splitting the LAB image to different channels-------------------------\nl, a, b = cv2.split(lab)\n#cv2.imshow('l_channel', l)\n#cv2.imshow('a_channel', a)\n#cv2.imshow('b_channel', b)\n\n#-----Applying CLAHE to L-channel-------------------------------------------\nclahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))\ncl = clahe.apply(l)\nmatplotlib.rc('figure', figsize=[7, 7])\nplt.imshow(cl)\n\n","902353cc":"#-----Merge the CLAHE enhanced L-channel with the a and b channel-----------\nlimg = cv2.merge((cl,a,b))\nmatplotlib.rc('figure', figsize=[7, 7])\nplt.imshow(limg)\n\n","3cd453b9":"#-----Converting image from LAB Color model to RGB model--------------------\nfinal = cv2.cvtColor(limg, cv2.COLOR_LAB2BGR)\nmatplotlib.rc('figure', figsize=[7, 7])\nplt.imshow(final)","05b5b711":"w=10\nh=10\nfig=plt.figure(figsize=(20, 20))\ncolumns = 5\nrows = 5\nfor i in range(1, columns*rows +1):\n    #img = np.random.randint(10, size=(h,w))\n    img = cv2.imread(os.path.join(root, 'train_images', '{}.png'.format(img_list[i-1])))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    res_image = resize_image(img)\n    lab= cv2.cvtColor(res_image, cv2.COLOR_BGR2LAB)\n    l, a, b = cv2.split(lab)\n    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))\n    cl = clahe.apply(l)\n    limg = cv2.merge((cl,a,b))\n    final = cv2.cvtColor(limg, cv2.COLOR_LAB2BGR)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(final)\nplt.show()","a41d98ad":"def contrast_stretching(img):        \n    rr, gg, bb = cv2.split(img)    \n    imgray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)    \n    im = imgray    \n    ih, iw = imgray.shape    \n    (minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(imgray)    \n    for i in range(ih):        \n        for j in range(iw):            \n            im[i, j] = 255 * ((gg[i, j] - minVal) \/ (maxVal - minVal))        \n    limg = cv2.merge((rr, im, bb))    \n    return limg","6a18242e":"contrast_image = contrast_stretching(res_image)\n\nmatplotlib.rc('figure', figsize=[15, 15])\nfig, axarr = plt.subplots(1,2)\naxarr[0].imshow(res_image)\naxarr[1].imshow(contrast_image)","a0da564c":"def histogram_normalization(image):    \n    hist,bins = np.histogram(image.flatten(),256,[0,256])    \n    cdf = hist.cumsum()   \n    # cdf_normalized = cdf * hist.max()\/ cdf.max()    \n    cdf_m = np.ma.masked_equal(cdf,0)    \n    cdf_m = (cdf_m - cdf_m.min())*255\/(cdf_m.max()-cdf_m.min())    \n    cdf = np.ma.filled(cdf_m,0).astype('uint8')     \n    img2 = cdf[image]    \n    return img2","9535d9fb":"hist_norm_image = histogram_normalization(res_image)\n\nmatplotlib.rc('figure', figsize=[15, 15])\nfig, axarr = plt.subplots(1,2)\naxarr[0].imshow(res_image)\naxarr[1].imshow(hist_norm_image)","072bee0d":"def matching(source,template):    \n    oldshape = source.shape    \n    source1 = source.ravel()    \n    template1 = template.ravel()    \n    s_values, bin_idx, s_counts = np.unique(source1, return_inverse=True,return_counts=True)    \n    t_values, t_counts = np.unique(template1, return_counts=True)    \n    s_quantiles = np.cumsum(s_counts).astype(np.float64)    \n    s_quantiles \/= s_quantiles[-1]    \n    t_quantiles = np.cumsum(t_counts).astype(np.float64)    \n    t_quantiles \/= t_quantiles[-1]    \n    interp_t_values = np.interp(s_quantiles, t_quantiles, t_values)    \n    interp_t_values1=interp_t_values.astype(np.uint8)    \n    sub=interp_t_values-interp_t_values1    \n    interp_t_values1[sub>.5]+=1    \n    match_v1=interp_t_values1[bin_idx].reshape(oldshape).astype(np.uint8)    \n    #match_v2=Radius_Reduction(match_v1, PARAM)    \n    return match_v1","97967a9e":"def Histo_Specification(source, template):    \n    #source_v5=Ychannel_Stretch(source_v4)    \n    #source_v6 = cv2.resize(source,(IMAGE_SIZE, IMAGE_SIZE)) \n    #template_v6 = cv2.resize(template,(IMAGE_SIZE, IMAGE_SIZE)) \n    source_v6 = resize_image(source)\n    template_v6 = resize_image(template)\n    f=[]    \n    for x in range(0,3):        \n        f.append(matching(source_v6[:,:,x], template_v6[:,:,x]))    \n    img = cv2.merge((f[0],f[1],f[2]))     \n    return img","12a62db4":"source = cv2.imread(os.path.join(root, 'train_images', '{}.png'.format(img_list[3])))\nsource = cv2.cvtColor(source, cv2.COLOR_BGR2RGB)\n#source = contrast_stretching(source)\n#source = histogram_normalization(source)\nfig=plt.figure(figsize=(5, 5))\nplt.imshow(source)","c8f0c66e":"template = cv2.imread(os.path.join(root, 'train_images', '{}.png'.format(img_list[13])))\ntemplate = cv2.cvtColor(template, cv2.COLOR_BGR2RGB)\nfig=plt.figure(figsize=(5, 5))\nplt.imshow(template)","5fe1529d":"histo_matched_image = Histo_Specification(source, template)\nfig=plt.figure(figsize=(5, 5))\nplt.imshow(histo_matched_image)","980c8b99":"w=10\nh=10\nfig=plt.figure(figsize=(20, 20))\ncolumns = 5\nrows = 5\nfor i in range(1, columns*rows +1):\n    #img = np.random.randint(10, size=(h,w))\n    img = cv2.imread(os.path.join(root, 'train_images', '{}.png'.format(img_list[i-1])))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    #res_image = resize_image(img)\n    #sub_med = subtract_median_bg_image(res_image)\n    #img_rad_red=Radius_Reduction(sub_med, PARAM)\n    histo_matched_image = Histo_Specification(img, template)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(histo_matched_image)\nplt.show()","53230add":"def Root_Channel_SQUR(crop):    \n    blu=crop[:,:,0].astype(np.int64)    \n    gre=crop[:,:,1].astype(np.int64)    \n    red=crop[:,:,2].astype(np.int64)      \n    lll=(((blu**2)+(gre**2)+(red**2))\/float(3))**0.5    \n    lll=lll.astype(np.uint8)#1st version of image    \n    return lll","2c71ba81":"Root_Channel_SQUR_image = Root_Channel_SQUR(res_image)\n\nmatplotlib.rc('figure', figsize=[15, 15])\nfig, axarr = plt.subplots(1,2)\naxarr[0].imshow(res_image)\naxarr[1].imshow(Root_Channel_SQUR_image)","e7a2d580":"SEED = 125\nfig = plt.figure(figsize=(25, 16))\nimg_list = []\nimg_size = []\n# display 10 images from each class\n#for class_id in sorted(train_y.unique()):\nfor class_id in [0, 1, 2, 3, 4]:\n    for i, (idx, row) in enumerate(train_df.loc[train_df['diagnosis'] == class_id].sample(5, random_state=SEED).iterrows()):\n        ax = fig.add_subplot(5, 5, class_id * 5 + i + 1, xticks=[], yticks=[])\n        path = os.path.join(root, 'train_images', '{}.png'.format(row['id_code']))\n        image = cv2.imread(path)\n        img_size.append(image.shape)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        #image = cv2.resize(image, (IMG_SIZE, IMG_SIZE))\n        img_list.append(row['id_code'])\n        \n        print(row['id_code'])\n        \n        \n        plt.imshow(image)\n        ax.set_title('Label: %d ' % (class_id) )","a7e44fb9":"def Krish(crop):    \n    Input=crop[:,:,1]    \n    a,b=Input.shape    \n    Kernel=np.zeros((3,3,8))#windows declearations(8 windows)    \n    Kernel[:,:,0]=np.array([[5,5,5],[-3,0,-3],[-3,-3,-3]])     \n    Kernel[:,:,1]=np.array([[-3,5,5],[-3,0,5],[-3,-3,-3]])    \n    Kernel[:,:,2]=np.array([[-3,-3,5],[-3,0,5],[-3,-3,5]])    \n    Kernel[:,:,3]=np.array([[-3,-3,-3],[-3,0,5],[-3,5,5]])    \n    Kernel[:,:,4]=np.array([[-3,-3,-3],[-3,0,-3],[5,5,5]])    \n    Kernel[:,:,5]=np.array([[-3,-3,-3],[5,0,-3],[5,5,-3]])    \n    Kernel[:,:,6]=np.array([[5,-3,-3],[5,0,-3],[5,-3,-3]])    \n    Kernel[:,:,7]=np.array([[5,5,-3],[5,0,-3],[-3,-3,-3]])    \n    #Kernel=(1\/float(15))*Kernel    \n    #Convolution output    \n    dst=np.zeros((a,b,8))    \n    for x in range(0,8):        \n        dst[:,:,x] = cv2.filter2D(Input,-1,Kernel[:,:,x])    \n    Out=np.zeros((a,b))    \n    for y in range(0,a-1):        \n        for z in range(0,b-1):            \n            Out[y,z]=max(dst[y,z,:])    \n    Out=np.uint8(Out)            \n    return Out\n\n","c16a210b":"Krish_image = Krish(res_image)\n\nmatplotlib.rc('figure', figsize=[15, 15])\nfig, axarr = plt.subplots(1,2)\naxarr[0].imshow(res_image)\naxarr[1].imshow(Krish_image)","22e5e958":"def illumination_correction(image, factor):       \n    hls= cv2.cvtColor(image, cv2.COLOR_BGR2HLS)    \n    hh,ll,ss = cv2.split(hls)    \n    final_v = cv2.medianBlur(ss, factor)    \n    conv = cv2.merge((hh,final_v,ll))    \n    fin = cv2.cvtColor(conv, cv2.COLOR_HSV2BGR)\n    return fin","1e4cfa31":"illum_image = illumination_correction(res_image, factor = 31)\n\nmatplotlib.rc('figure', figsize=[15, 15])\nfig, axarr = plt.subplots(1,2)\naxarr[0].imshow(res_image)\naxarr[1].imshow(illum_image)","fd86fb48":"from skimage.feature import hog\n\ndef HOG_Image(crop):    \n    image=crop[:,:,1]    \n    fd, hog_image = hog(image, orientations=8, pixels_per_cell=(4, 4),cells_per_block=(2, 2), visualise=True)    \n    return hog_image","f35a786b":"image = cv2.imread(os.path.join(root, 'train_images', '{}.png'.format(img_list[0])))\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nres_image = resize_image(image)\n\nhog_image = HOG_Image(res_image)\n#matplotlib.rc('figure', figsize=[7, 7])\n#plt.imshow(hog_image)\n\nmatplotlib.rc('figure', figsize=[15, 15])\nfig, axarr = plt.subplots(1,2)\naxarr[0].imshow(res_image)\naxarr[1].imshow(hog_image)","820fc0a1":"def Tan_inv(crop):    \n    gre=crop[:,:,1].astype(np.float64)    \n    red=crop[:,:,2].astype(np.float64)        \n    red[red==0]=0.000001    \n    m=gre\/red# n=((np.arctan(m))*180)\/3.14#n=((np.arctan(m))*255)\/3.14    \n    n=np.arctan(m)#j=n.astype(np.uint8)    \n    ij=(n*255)\/3.14    \n    j=ij.astype(np.uint8)    \n    equ = cv2.equalizeHist(j)    \n    return equ\n\n ","4dcf6cd4":"Tan_inv_image = Tan_inv(res_image)\n\nmatplotlib.rc('figure', figsize=[15, 15])\nfig, axarr = plt.subplots(1,2)\naxarr[0].imshow(res_image)\naxarr[1].imshow(Tan_inv_image)","cca11098":"def Cos_inv(crop):    \n    blu=crop[:,:,0].astype(np.float64)    \n    gre=crop[:,:,1].astype(np.float64)    \n    red=crop[:,:,2].astype(np.float64)     \n    l=((blu**2)+(gre**2)+(red**2))**0.5    \n    l=l.astype(np.float64)    \n    l[l==0]=0.0000000001    \n    m=blu\/l    \n    Max=np.max(m)    \n    Min=np.min(m)    \n    j=((m-float(Min)\/(float(Max)-float(Min)))*2)-1    \n    n=((np.arccos(j))*255)\/3.14    \n    nm=n.astype(np.uint8)    \n    equ1 = cv2.equalizeHist(nm)    \n    return equ1","e59a1904":"Cos_inv_image = Cos_inv(res_image)\n\nmatplotlib.rc('figure', figsize=[15, 15])\nfig, axarr = plt.subplots(1,2)\naxarr[0].imshow(res_image)\naxarr[1].imshow(Cos_inv_image)","d1a07e30":"#In progress\n'''\ntemplate = cv2.imread(os.path.join(root, ''))\ntemplate1 = cv2.imread(os.path.join(root, ''))\ntemplate2 = cv2.imread(os.path.join(root, ''))\ntemplate3 = cv2.imread(os.path.join(root, ''))\ntemplate4 = cv2.imread(os.path.join(root, ''))\ntemplate5 = cv2.imread(os.path.join(root, ''))\ntemplate6 = cv2.imread(os.path.join(root, ''))\ntemplate7 = cv2.imread(os.path.join(root, ''))\n\ndef matching(source, template):    \n    oldshape = source.shape    \n    source1 = source.ravel()    \n    template1 = np.asarray(template)   \n    s_values, bin_idx, s_counts = np.unique(source1, return_inverse=True,return_counts=True)    \n    t_values, t_counts = np.unique(template1, return_counts=True)    \n    s_quantiles = np.cumsum(s_counts).astype(np.float64)    \n    s_quantiles \/= s_quantiles[-1]    \n    t_quantiles = np.cumsum(t_counts).astype(np.float64)    \n    t_quantiles \/= t_quantiles[-1]    \n    interp_t_values = np.interp(s_quantiles, t_quantiles, t_values)    \n    interp_t_values1=interp_t_values.astype(np.uint8)    \n    sub=interp_t_values-interp_t_values1    \n    interp_t_values1[sub>.5]+=1    \n    match_v1=interp_t_values1[bin_idx].reshape(oldshape).astype(np.uint8)    \n    #match_v2=Radius_Reduction(match_v1, PARAM)    \n    return match_v1\n\ntemplates_list = [template, template1, template2, template3, template4, template5, template6, template7]\n\nr_l = []\ng_l= []\nb_l = []\nfor t in templates_list:\n    t = cv2.resize(t, (IMAGE_SIZE, IMAGE_SIZE))\n    r_l.append(list(t[:,:,0].ravel()))\n    g_l.append(list(t[:,:,1].ravel()))\n    b_l.append(list(t[:,:,2].ravel()))\n\nr_list = [item for sublist in r_l for item in sublist]\ng_list = [item for sublist in g_l for item in sublist]\nb_list = [item for sublist in b_l for item in sublist]\n\nr_list = list(set(r_list))\ng_list = list(set(g_list))\nb_list = list(set(b_list))\n\nsource = cv2.imread(os.path.join(root, ''))\nsource = cv2.resize(source, (IMAGE_SIZE, IMAGE_SIZE))\n\nmatch_r = matching(source[:,:,0], r_list)\nmatch_g = matching(source[:,:,1], g_list)\nmatch_b = matching(source[:,:,2], b_list)\n\nfin = cv2.merge((match_r, match_g, match_b))\n'''","50c9b542":"                             **-----*-----*-----**","93b3ce3f":"## 1. Median subtraction\n\nBorrowed the following from https:\/\/www.kaggle.com\/joorarkesteijn\/fast-cropping-preprocessing-and-augmentation","ada4e1a3":"## 6. Histogram matching (**UPDATE**)","ad0f4adb":"### Additional functions that might be useful.","d175b88b":"# Various possible Pre-processing options","d18a6717":"**Source image**","1d6fed73":"## 2. Gamma Correction\n\nThe Gamma value builds a relation between the pixel value and its actual brightness in an image. Gamma correction is highly used in image editing.\n\nhttps:\/\/www.cambridgeincolour.com\/tutorials\/gamma-correction.htm","13d3cbfe":"Applying the above operations for the list of images.","45650b1f":"A value **< 1.0** will make the image **darker** while values **> 1.0** makes the image **brighter**","f803ef98":"Randomly pick 5 images from each of the five labels","0a0fd97b":"Class label distribution","b3cc8eb2":"## 3. Adaptive Histogram Equalization\n\nhttps:\/\/stackoverflow.com\/questions\/24341114\/simple-illumination-correction-in-images-opencv-c\n","b8077085":"### Selective Gamma correction\n\nGet the median of all the pixel values of the grayscaled image within the mask","834dcfa8":"**Note:** `clipLimit` and `tileGridSize` are parameters that can be tweaked","b10fa237":"## 5. Histogram Normalization","5fb46f2b":"This post is to highlight some useful preprocessing steps.\n\n1. Median subtraction\n2. Gamma Correction\n3. Adaptive Histogram Equalization\n4. Contrast Stretching\n5. Histogram Normalization\n6. Histogram Matching\/Specification (**UPDATE**)","90e5a53b":"Kindly send me your suggestions.","c31b3a42":"* Subtracting the median blur image from the original","61b25c44":"Highly skewed distribution of labels","fe53e250":"**Template image**","8bf37c03":"The above collection of pre-processing was done for 5 images belonging to each of the five classes.","3daba498":"* Resizing the image","0dbdf153":"### Merging multiple outputs","12d770ad":"## Some Preprocessing steps","e0568f3c":"This notebook has been updated with histogram matching technique. In histogram matching\/specification an image is transformed such that its histogram matches another specified histogram. In other words, you choose a template image and then you want a source image to look like the template. In this case, I chose a source and a templateby going through a few images. The results are not upto to the mark though.","4bd1e758":"### HOG","75615a12":"## Krisch filter","4a88cb6b":"* Removing the circular boundary to remove irregularities","3bdedba7":"* Read image","35e87698":"List of files in the directory.","09e2ef0b":"## 4. Contrast stretching","968dfe50":"**Note:** Clearly some of the images have not been processed as expected. This highly depends on the choice of the template image."}}