{"cell_type":{"a2cce119":"code","54625aa0":"code","0d8ce139":"code","4b3410ce":"code","a6e22afb":"code","5b7191e4":"code","5c25ef11":"code","54c925f7":"code","80553a2a":"code","ae4647c5":"code","9db36af3":"code","d047ff1b":"code","f151a187":"code","7e8481a0":"code","899a7fc0":"code","7967e016":"markdown","167c0f11":"markdown","f786add7":"markdown","c52fa9b5":"markdown","22ce43de":"markdown"},"source":{"a2cce119":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","54625aa0":"import pandas as pd\nimport numpy as np\nimport os\nimport re\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom plotly.subplots import make_subplots\nimport matplotlib","0d8ce139":"df = pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndf.head()","4b3410ce":"df2 = df.copy()\not = {0: \"Less chance of HA\",1:'More chance of HA'}\ndf2.output = [ot[item] for item in df2.output]","a6e22afb":"df.isnull().any()","5b7191e4":"ax = sns.countplot(data=df, x='output',palette=['#85bfdc','#f64c72'])\nax.set(xticklabels=['less chance of heart attack', 'more chance of heart attack'],title=\"Target Distribution\")\nax.tick_params(bottom=False)","5c25ef11":"fig = px.histogram(df2, x=\"age\",color=\"output\",\n                   marginal=\"box\",\n                   hover_data=df.columns,\n                  color_discrete_sequence=['#f64c72','#85bfdc'])\nfig.update_layout(\n    title=\"Heart attack chance corresponding to age\"\n)\nfig.show()","54c925f7":"more = df[df['output']==1]['trtbps']\nless = df[df['output']==0]['trtbps']\nfig = ff.create_distplot([less, more],['less chance of heart attack', 'more chance of heart attack']\n                         , show_hist=False, \n                        colors=['#85bfdc','#f64c72'])\nfig.update_layout(\n    title=\"Heart Attack chance corresponding to resting heart rate\",\n    xaxis_title=\"Resting heart rate\",\n)\nfig.show()","80553a2a":"more = df[df['output']==1]['thalachh']\nless = df[df['output']==0]['thalachh']\nfig = ff.create_distplot([less, more],['less chance of heart attack', 'more chance of heart attack']\n                         , bin_size=5,\n                        colors=['#85bfdc','#f64c72'])\nfig.update_layout(\n    title=\"Heart Attack chance corresponding to maximum heart rate achieved\",\n    xaxis_title=\"Maximum heart rate achieved\",\n)\nfig.show()","ae4647c5":"fig = px.box(df2, x=\"cp\", y=\"chol\",color='output',color_discrete_map={'Less chance of HA':'#85bfdc','More chance of HA':'#f64c72'})\nfig.update_layout(title=\"Effects of cholestrol corresponding to chest pain type on chances of heart attack\")\nfig.show()","9db36af3":"temp = df.drop(['sex','cp','fbs','exng','restecg','exng','thall','caa','slp'], axis=1)\nfig, ax = plt.subplots(1, 1, figsize=(6,6))\ndf_cor = temp.corr()\nhalf = np.triu(np.ones_like(df_cor, dtype=np.bool))\n\nmy_colors = ['#85bfdc','#f64c72']\ncmap = matplotlib.colors.LinearSegmentedColormap.from_list('Custom', my_colors)\n\nheatmap = sns.heatmap(df_cor, \n            square=True, \n            mask=half,\n            linewidth=2.5, \n            vmax=0.4, vmin=0, \n            cmap=cmap, \n            cbar=False, \n            ax=ax,annot=True)\n\nheatmap.set(title=\"Heatmap of continous variables\")\nheatmap.set_yticklabels(heatmap.get_xticklabels(), rotation = 0)\nheatmap.spines['top'].set_visible(True)\nfig.text(1.2, 0.85, '''* thalachh(Maximum heart rate achieved) is positively correlated while,\n* oldpeak is negatively correlated with the output ''', \n         fontweight='light', fontfamily='serif', fontsize=11, va='top', ha='right') \n\nplt.tight_layout()","d047ff1b":"# Create dimensions\nexng = go.parcats.Dimension(\n    values=df.exng,label=\"exng\"\n)\n\ncp = go.parcats.Dimension(\n    values=df.cp,label=\"cp\"\n)\n\nfbs = go.parcats.Dimension(\n    values=df.fbs,label=\"fbs\"\n)\n\ngender_dim = go.parcats.Dimension(values=df.sex, label=\"sex\")\n\nrestecg = go.parcats.Dimension(values=df.sex, label=\"restecg\")\nthall = go.parcats.Dimension(values=df.sex, label=\"thall\")\ncaa = go.parcats.Dimension(values=df.sex, label=\"caa\")\nslp = go.parcats.Dimension(values=df.sex, label=\"slp\")\n\nsurvival_dim = go.parcats.Dimension(\n    values=df.output, label=\"Outcome\", categoryarray=[0, 1],\n    ticktext=['Less chance', 'More chance']\n)\n\n# Create parcats trace\ncolor = df.output;\ncolorscale = [[0, '#85bfdc'], [1, '#f64c72']];\n\nfig = go.Figure(data = [go.Parcats(dimensions=[exng,slp,restecg,fbs,thall,caa,cp,\n                                              gender_dim,survival_dim],\n        line={'color': color, 'colorscale': colorscale},\n        hoveron='color', hoverinfo='count+probability',\n        labelfont={'size': 18, 'family': 'Times'},\n        tickfont={'size': 16, 'family': 'Times'},\n        arrangement='freeform')])\nfig.update_layout(title=\"Plotly parallel categorical plot for all the categorical labels\", )\nfig.show()","f151a187":"lbs = ['sex','cp','fbs','exng','restecg','thall','caa','slp']\n\nrows = 3\ncols = 3\n\nsubplot_titles = [l for l in lbs]\n\nspecs=[[{\"type\": \"bar\"},{\"type\": \"bar\"},{\"type\": \"bar\"}],\n       [{\"type\": \"bar\"},{\"type\": \"bar\"},{\"type\": \"bar\"}],\n       [{\"type\": \"bar\"},{\"type\": \"bar\"},None]]\n\n\nfig = make_subplots(\n        rows=rows,\n        cols=cols,\n        subplot_titles=subplot_titles,\n        specs=specs,  \n        print_grid=False\n)\n\nfor i, b in enumerate(lbs):\n    row = i \/\/ cols + 1\n    col = (i % rows) + 1\n    name = lbs[i]\n    l = [(100)*df[df[name]==x]['output'].sum()\/len(df[df[name]==x]['output']) \n         for x in range(len(df[name].value_counts().tolist()))]\n    fig.add_trace(go.Bar(\n    x = [x for x in range(len(df[name].value_counts().tolist()))],\n    y = l,\n    marker_color=['#85bfdc','#9999c9','#aa77aa','#cc6397','#f64c72'],\n    ),row=row,col=col)\n\nfig.update_layout(autosize = True,\n                  title=\"Percertage of people having 'more chance of heart attack' for each type\", \n                  title_x=0.5,\n                 showlegend=False)\nfig.show()","7e8481a0":"fig = px.scatter_3d(df2, x='oldpeak', y='thalachh', z='age',\n              color='output',size='trtbps',color_discrete_sequence=['#f64c72','#85bfdc'])\nfig.show()","899a7fc0":"fig = px.scatter(df2,\nx='thalachh',\ny= 'chol',\ncolor='output',\nfacet_col='cp', \nfacet_row='sex',\ncolor_discrete_sequence=['#f64c72','#85bfdc'], \n)\n\nfig.show()","7967e016":"# Heart Attack Prediction Data","167c0f11":"Important Insights\n\n1. This comes as a surprise that in this data the mean age is lesser for higher chance of heart attack\n\n2. Some, features like resting heart rate are indifferent to chances of heart attack\n\n3. Maximum heart rate is directly proportional to the chances of heart attack\n\n4. Oldpeak is negatively correlated with the output\n\n5. For certain categories the chances of heart attack was found high:-\n\nAge = 0\ncp = 2,3\nthall = 2\ncaa = 0,4\nslp = 2","f786add7":"Dataset Details:\n\nAge : Age of the patient\n\nSex : Sex of the patient\n\nexang: exercise induced angina (1 = yes; 0 = no)\n\nca: number of major vessels (0-3)\n\ncp : Chest Pain type chest pain type\n\nValue 1: typical angina\n\nValue 2: atypical angina\n\nValue 3: non-anginal pain\n\nValue 4: asymptomatic\n\ntrtbps : resting blood pressure (in mm Hg)\n\nchol : cholestoral in mg\/dl fetched via BMI sensor\n\nfbs : (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n\nrestecg : resting electrocardiographic results\n\nValue 0: normal\n\nValue 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\n\nValue 2: showing probable or definite left ventricular hypertrophy by Estes' criteria\n\nthalachh : maximum heart rate achieved\n\noutput : 0= less chance of heart attack 1= more chance of heart attack","c52fa9b5":"For certain categories the chances of heart attack was found high:-\n\nAge = 0\ncp = 2,3\nthall = 2\ncaa = 0,4\nslp = 2","22ce43de":"#  Your suggestions will be highly appreciated. Please upvote if you like it..."}}