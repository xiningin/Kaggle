{"cell_type":{"69f5574e":"code","5395f2ba":"code","99ab0156":"code","643f597c":"code","51a88c66":"code","bdcd4d61":"code","f22bc439":"code","f0092988":"code","449d3c25":"code","55cd334e":"code","d4782ab3":"code","c2f6a494":"code","d1a86410":"code","71b33cb9":"code","faf352e6":"code","c76558bf":"code","b3301d83":"code","06be2510":"code","737e1c64":"code","ed8376f9":"code","980e6684":"code","fc38893c":"code","899f7fb7":"code","03e973ad":"code","7096529b":"code","2d7f0027":"code","a382b941":"code","f6d96a62":"code","7d047985":"code","ed16d751":"code","38775a17":"code","3e9707e0":"code","35b9cb3e":"code","27e00800":"code","313f2b8c":"code","8f4609d4":"code","3b4b61b7":"code","a3cefc49":"code","65114e25":"code","ad7a3ccf":"code","1ab9e4b9":"code","7a6ab2d1":"code","10cacd34":"code","610227cc":"code","2d207a3e":"code","eae9d9dd":"code","80cc66c3":"code","7208b8e4":"code","15de7a9b":"code","308f545e":"code","dafb0374":"code","362a56b6":"code","c46f832b":"code","c496e6e7":"code","51a89571":"code","6d8f872b":"code","22bac779":"code","8a4afcf5":"code","1ee1a811":"code","d78eeb1e":"markdown","04dedd5c":"markdown","0fab28ad":"markdown","dc5a696c":"markdown","0d05a8cc":"markdown","1a4366f5":"markdown","00dd5917":"markdown","9b55c9d8":"markdown","330b7aa1":"markdown","7e5d2b03":"markdown","61e39873":"markdown","3926e320":"markdown","98c4b03e":"markdown","7284a109":"markdown","27a38aec":"markdown"},"source":{"69f5574e":"import pandas as pd","5395f2ba":"housing = pd.read_csv(\"..\/input\/housing\/data.csv\")","99ab0156":"housing.head","643f597c":"housing.info()","51a88c66":"housing['CHAS'].value_counts()","bdcd4d61":"housing.describe()","f22bc439":"%matplotlib inline","f0092988":"import matplotlib.pyplot as plt","449d3c25":"#plotting histogram\nhousing.hist(bins=50, figsize=(20,15))","55cd334e":"# For learning purpose\nimport numpy as np\ndef split_train_test(data, test_ratio):\n    np.random.seed(42)\n    shuffled =  np.random.permutation(len(data))\n    test_set_size = int(len(data)*test_ratio)\n    test_indices = shuffled[:test_set_size]\n    train_indices = shuffled[test_set_size:]\n    return data.iloc[train_indices],data.iloc[test_indices]","d4782ab3":"# train_set, test_set = split_train_test(housing,0.2)","c2f6a494":"# print(f\"Rows in train set: {len(train_set)}\\n Rows in test set: {len(test_set)}\\n\")","d1a86410":"from sklearn.model_selection import train_test_split\ntrain_set , test_set = train_test_split(housing,test_size=0.2,random_state=42)\nprint(f\"Rows in train set: {len(train_set)}\\n Rows in test set: {len(test_set)}\\n\")","71b33cb9":"from sklearn.model_selection import StratifiedShuffleSplit\nsplit = StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)\nfor train_index,test_index in split.split(housing,housing['CHAS']):\n    strat_train_set = housing.loc[train_index]\n    strat_test_set = housing.loc[test_index]","faf352e6":"strat_test_set['CHAS'].value_counts()","c76558bf":"strat_train_set['CHAS'].value_counts()","b3301d83":"95\/7","06be2510":"376\/28","737e1c64":"housing = strat_train_set.copy()","ed8376f9":"corr_matrix = housing.corr()","980e6684":"corr_matrix['MEDV'].sort_values(ascending=False)","fc38893c":"from pandas.plotting import scatter_matrix\nattributes = [\"MEDV\",\"RM\",\"ZN\",\"LSTAT\"]\nscatter_matrix(housing[attributes], figsize=(12,8))","899f7fb7":"#remove outliers\nhousing.plot(kind=\"scatter\",x = \"RM\",y=\"MEDV\",alpha = 0.8)","03e973ad":"housing[\"TAXRM\"] = housing['TAX']\/housing['RM']","7096529b":"housing[\"TAXRM\"]","2d7f0027":"corr_matrix = housing.corr()\ncorr_matrix['MEDV'].sort_values(ascending=False)","a382b941":"housing.plot(kind=\"scatter\",x = \"TAXRM\",y=\"MEDV\",alpha = 0.8)","f6d96a62":"housing = strat_train_set.drop(\"MEDV\",axis = 1)\nhousing_labels =  strat_train_set[\"MEDV\"].copy()","7d047985":"housing.dropna(subset=[\"RM\"]).shape #option 1\n# Note that the original housing dataframe will remain unchanged","ed16d751":"housing.drop(\"RM\",axis=1).shape #option 2\n# Note there is no RM coloumn and also not that the original housing will remain unchanged","38775a17":"median = housing[\"RM\"].median() # computer median for option 3","3e9707e0":"median","35b9cb3e":"housing[\"RM\"].fillna(median) # option 3\n# Note that the original housing dataframe will remain unchanged","27e00800":"housing.shape","313f2b8c":"housing.describe() # before we started imputer ","8f4609d4":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy = \"median\")\nimputer.fit(housing)","3b4b61b7":"imputer.statistics_","a3cefc49":"x = imputer.transform(housing)","65114e25":"housing_tr = pd.DataFrame(x, columns=housing.columns)","ad7a3ccf":"housing_tr.describe()","1ab9e4b9":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nmy_pipeline = Pipeline([\n('imputer',SimpleImputer(strategy = \"median\")),\n# ....... add as many as you want in your pipeline\n('std_scaler', StandardScaler()),\n])","7a6ab2d1":"housing_num_tr = my_pipeline.fit_transform(housing)","10cacd34":"housing_num_tr.shape","610227cc":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = LinearRegression()\n# model = DecisionTreeRegressor()\n# model = RandomForestRegressor()\nmodel.fit(housing_num_tr, housing_labels)","2d207a3e":"some_data = housing.iloc[:5]","eae9d9dd":"some_labels = housing_labels.iloc[:5]","80cc66c3":"prepared_data = my_pipeline.transform(some_data)","7208b8e4":"model.predict(prepared_data)","15de7a9b":"list(some_labels)","308f545e":"from sklearn.metrics import mean_squared_error\nhousing_predictions = model.predict(housing_num_tr)\nmse = mean_squared_error(housing_labels, housing_predictions)\nrmse = np.sqrt(mse)","dafb0374":"rmse","362a56b6":"# 1 2 3 4 5 6 7 8 9 10\nfrom sklearn.model_selection import cross_val_score\nscores = cross_val_score(model, housing_num_tr, housing_labels, scoring=\"neg_mean_squared_error\",cv=10)\nrmse_scores = np.sqrt(-scores)\n","c46f832b":"rmse_scores","c496e6e7":"def print_scores(scores):\n    print(\"Scores:\",scores)\n    print(\"Mean:\",scores.mean())\n    print(\"Standard deviation: \",scores.std())","51a89571":"print_scores(rmse_scores)","6d8f872b":"from joblib import dump,load\ndump(model,\"Dragon.joblib\")","22bac779":"x_test = strat_test_set.drop(\"MEDV\",axis=1)\ny_test = strat_test_set[\"MEDV\"].copy()\nx_test_prepared = my_pipeline.transform(x_test)\nfinal_predictions = model.predict(x_test_prepared)\nfinal_mse = mean_squared_error(y_test,final_predictions)\nfinal_rmse =np.sqrt(final_mse)\n# print(final_predictions,list(y_test))","8a4afcf5":"final_rmse","1ee1a811":"prepared_data[0]","d78eeb1e":"## Scikit-learn Design","04dedd5c":"## Missing attributes","0fab28ad":"## Feature Scaling","dc5a696c":"To take care of missing attributes, you have three options:\n1. Get rid of the missing data points.\n2. Get rid of the whole attribute.\n3. Set the value to some value(0,mean or median)","0d05a8cc":"## Evaluating the model","1a4366f5":"## Looking for Correlations","00dd5917":"## Creating a Pipeline","9b55c9d8":"## Trying out attribute combinations","330b7aa1":"## Testing the model on test data","7e5d2b03":"## Train-Test Splitting","61e39873":"## Using better evaluation technique - Cross Validation","3926e320":"## Saving the model","98c4b03e":"Primarily, three types of objects\n1. Estimators - It estimates some parameter based on a dataset. Eg. imputer It has a fit method and transform method.\nFit method - Fits the datasets and calculate internal parameters.\n\n2. Transformers - transform method takes input and return output based on the learnings from fit(). It also has a convenience function called fit_transform() which fits and then transforms.\n\n3. Predictors - LinearRegression model is an example of predictor. fit() and predict() are two common functions. It also gives score() function which will evaluate the predictions.","7284a109":"## Selecting  a desired model for Dragon Real Estates","27a38aec":"Primarily, two types of feature scaling methods:\n1. Min-max scaling (Normalization)\n   (value - min)\/(max - min)\n   Sklearn provides a class called MinMaxScaler for this\n\n2. Standardization\n   (value - mean)\/std\n   sklearn provide a class called Standard Scaler for this"}}