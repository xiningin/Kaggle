{"cell_type":{"e8dfca21":"code","28ef0b5f":"code","4becbcbe":"code","06bb2841":"code","6da263cc":"code","7cf88130":"code","b07bfc1b":"code","f4ddc437":"code","6043212b":"code","2ec4275d":"code","0e2af758":"code","0bd1e53e":"code","88e1226e":"code","9574e0e5":"code","4d985954":"code","0b30c3a0":"markdown","5e264c6e":"markdown","312533d6":"markdown","a7e4a8c7":"markdown"},"source":{"e8dfca21":"#\u9019\u662fjupyter notebook\u7684magic word\u02d9\n%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom IPython import display","28ef0b5f":"import os\n#\u5224\u65b7\u662f\u5426\u5728jupyter notebook\u4e0a\ndef is_in_ipython():\n    \"Is the code running in the ipython environment (jupyter including)\"\n    program_name = os.path.basename(os.getenv('_', ''))\n\n    if ('jupyter-notebook' in program_name or # jupyter-notebook\n        'ipython'          in program_name or # ipython\n        'jupyter' in program_name or  # jupyter\n        'JPY_PARENT_PID'   in os.environ):    # ipython-notebook\n        return True\n    else:\n        return False\n\n\n#\u5224\u65b7\u662f\u5426\u5728colab\u4e0a\ndef is_in_colab():\n    if not is_in_ipython(): return False\n    try:\n        from google import colab\n        return True\n    except: return False\n\n#\u5224\u65b7\u662f\u5426\u5728kaggke_kernal\u4e0a\ndef is_in_kaggle_kernal():\n    if 'kaggle' in os.environ['PYTHONPATH']:\n        return True\n    else:\n        return False\n\nif is_in_colab():\n    from google.colab import drive\n    drive.mount('\/content\/gdrive')","4becbcbe":"os.environ['TRIDENT_BACKEND'] = 'pytorch'\n\nif is_in_kaggle_kernal():\n    os.environ['TRIDENT_HOME'] = '.\/trident'\n    \nelif is_in_colab():\n    os.environ['TRIDENT_HOME'] = '\/content\/gdrive\/My Drive\/trident'\n\n#\u70ba\u78ba\u4fdd\u5b89\u88dd\u6700\u65b0\u7248 \n\n!pip uninstall tridentx -y\n!pip install ..\/input\/trident\/tridentx-0.7.3.20-py3-none-any.whl --upgrade\n#!pip install cupy\n\nimport json\nimport copy\nimport numpy as np\n#\u8abf\u7528trident api\nimport trident as T\nfrom trident import *\n\nfrom trident.layers.pytorch_initializers import orthogonal\nimport random\nfrom tqdm import tqdm\nimport glob\nimport scipy\nimport time","06bb2841":"make_dir_if_need('.\/train-faces')\n!unzip ..\/input\/recognizing-faces-in-the-wild\/train-faces.zip -d .\/train-faces","6da263cc":"family_labels=glob.glob('.\/train-faces\/F*')\nfamily_labels=list(sorted(set([f.replace('.\/train-faces\/','') for f in family_labels])))\nprint(len(family_labels))\nprint(family_labels[:10])\n\nperson_labels=glob.glob('.\/train-faces\/F*\/MID*')\nperson_labels=list(sorted(set([f.replace('.\/train-faces\/','') for f in person_labels])))\nprint(len(person_labels))\nprint(person_labels[:10])","7cf88130":"images=[]\nfamilies=[]\npersons=[]\ntrain_faces=glob.glob('.\/train-faces\/F*\/MID*\/*.jpg')\nprint(len(train_faces))\nfor i in tqdm(range(len(train_faces))):\n    im_path=train_faces[i]\n    cols=im_path.split('\/')\n    images.append(im_path)\n    families.append(family_labels.index(cols[-3]))\n    persons.append(person_labels.index(cols[-3]+'\/'+cols[-2]))\n\nprint(images[:10])\nprint(families[:10])\nprint(persons[:10])\n    ","b07bfc1b":"ds1=ImageDataset(images,object_type=ObjectType.rgb, symbol='images')\nds2=LabelDataset(families,object_type=ObjectType.classification_label, symbol='families_label')\nds3=LabelDataset(persons, object_type=ObjectType.classification_label,symbol='persons_label')\n\n\nzipdata=ZipDataset(ds2,ds3)\ndata_provider=DataProvider(traindata=Iterator(data=ds1,label=zipdata))\ndata_provider.image_transform_funcs=[\n    Resize(output_size=(112,112)),\n    RandomTransform(rotation_range= 15, zoom_range= 0.02, shift_range= 0.00,shear_range = 0.02,random_flip= 0.15),\n    RandomAdjustGamma(gamma_range=(0.6,1.4)),\n    RandomAdjustContrast(value_range=(0.6,1.4)),\n    RandomAdjustHue(scale=(-0.3,0.3)),#\u8abf\u6574\u8272\u76f8\n    RandomAdjustSaturation(scale=(0.6,1.4)),#\u8abf\u6574\u98fd\u548c\u5ea6\n    RandomBlur(scale=(3,7)),#\u96a8\u6a5f\u6a21\u7cca\n    SaltPepperNoise(prob=0.001),#\u6912\u9e7d\u566a\u97f3\n    RandomErasing(size_range=(0.08,0.2),transparency_range=(0.4,0.6),transparancy_ratio=0.8),\n    Normalize(127.5,127.5)]\n","f4ddc437":"img_data,label1,label2=data_provider.next()\nprint(img_data.shape)\nprint(label1.shape)\nprint(label2.shape)","6043212b":"data_provider.preview_images()","2ec4275d":"from trident.models import arcfacenet\nnum_faces=10575\n#\u6a19\u6e96\u751f\u6210\u7d50\u69cb\n#\u4e0d\u5305\u542b\u539f\u6709\u5206\u985e\u5668\nse_resnet50 =arcfacenet.SEResNet_IR_50_512(include_top=False,\n             pretrained=True,\n             freeze_features=True,\n             input_shape=(3,112,112))\n\n#\u52a0\u5165output_layer\nse_resnet50.model.add_module('output_layer', \n    Sequential(\n        Dropout(dropout_rate=0.4),\n        Flatten(),\n        Dense((512),use_bias=False,keep_output=True),\n    ))\n\n#se_resnet50.model.output_layer[0].inplace = False\n#\u5f9e\u4e4b\u524d\u9810\u8a13\u7df4\u7684\u4eba\u81c9\u8b58\u5225arcFace\u9084\u539f\u6b0a\u91cd\nse_resnet50.model.add_module('l2norm',L2Norm())\nse_resnet50.model.add_module('fc',Dense((num_faces),use_bias=False,weights_norm='l2'))\nif os.path.exists('..\/input\/face-recognition\/Models\/arcface.pth.tar'):\n    se_resnet50.load_model('..\/input\/face-recognition\/Models\/arcface.pth.tar')\n\nse_resnet50.summary()","0e2af758":"se_resnet50.model.trainable=False\nse_resnet50.model.body[23].trainable=True\nse_resnet50.model.remove_at(-1)\nresults=ModuleDict({'family':Dense(786),'person':Dense(3965),'features':Identity()},is_multicasting=True)\nse_resnet50.model.add_module('results',results)\n\n\nse_resnet50.summary()","0bd1e53e":"\nclass Family_ArcMarginProductLoss(Layer):\n    def __init__(self, scale=64.0, margin=1, easy_margin=False, name='ArcMarginProductLoss'):\n        super(Family_ArcMarginProductLoss, self).__init__()\n        self._name=name\n        self.scale = scale\n        self.m = margin\n        self.easy_margin = easy_margin\n        self.cos_m = math.cos(margin)\n        self.sin_m = math.sin(margin)\n\n        # make the function cos(theta+m) monotonic decreasing while theta in [0\u00b0,180\u00b0]\n        self.th = math.cos(math.pi - margin)\n        self.mm = math.sin(math.pi - margin) * margin\n    \n        self.base_loss=CrossEntropyLoss(reduction='mean')\n\n\n    def forward(self, family, families_label,**kwargs):\n        # cos(theta)\n        try:\n            cosine=family\n            target=families_label\n            # cos(theta + m)\n            sine = sqrt(1.0 - pow(cosine, 2))\n            phi = cosine * self.cos_m - sine * self.sin_m\n\n            if self.easy_margin:\n                phi = where(cosine > 0, phi, cosine)\n            else:\n                phi = where((cosine - self.th) > 0, phi, cosine - self.mm)\n\n            one_hot = zeros_like(cosine,requires_grad=True)\n            one_hot.scatter(1, target.view(-1, 1), 1)\n\n            output = (one_hot * phi) + ((1.0 - one_hot) * cosine)\n            output = output * self.scale\n        except Exception as e:\n            print(e)\n            PrintException()\n\n        loss = self.base_loss(output, target)\n        return loss\n    \n    \nclass Person_ArcMarginProductLoss(Layer):\n    def __init__(self, scale=32.0, margin=0.50, easy_margin=False, name='ArcMarginProductLoss'):\n        super(Person_ArcMarginProductLoss, self).__init__()\n        self._name=name\n        self.scale = scale\n        self.m = margin\n        self.easy_margin = easy_margin\n        self.cos_m = math.cos(margin)\n        self.sin_m = math.sin(margin)\n\n        # make the function cos(theta+m) monotonic decreasing while theta in [0\u00b0,180\u00b0]\n        self.th = math.cos(math.pi - margin)\n        self.mm = math.sin(math.pi - margin) * margin\n    \n        self.base_loss=CrossEntropyLoss(reduction='mean')\n\n\n    def forward(self, person, persons_label,**kwargs):\n        # cos(theta)\n        try:\n            cosine=person\n            target=persons_label\n            # cos(theta + m)\n            sine = sqrt(1.0 - pow(cosine, 2))\n            phi = cosine * self.cos_m - sine * self.sin_m\n\n            if self.easy_margin:\n                phi = where(cosine > 0, phi, cosine)\n            else:\n                phi = where((cosine - self.th) > 0, phi, cosine - self.mm)\n\n            one_hot = zeros_like(cosine,requires_grad=True)\n            one_hot.scatter(1, target.view(-1, 1), 1)\n\n            output = (one_hot * phi) + ((1.0 - one_hot) * cosine)\n            output = output * self.scale\n        except Exception as e:\n            print(e)\n            PrintException()\n\n        loss = self.base_loss(output, target)\n        return loss\n    \ndef center_loss(features,families_label):\n    return CenterLoss(num_classes=786, feat_dim=512)(features,families_label)\n    \ndef family_accuracy(family, families_label):\n    return accuracy(family, families_label)\n\n    \ndef person_accuracy(person, persons_label):\n    return accuracy(person, persons_label)","88e1226e":"se_resnet50.with_optimizer(optimizer=AdaBelief, lr=1e-3, betas=(0.9, 0.999)) \\\n    .with_loss(Family_ArcMarginProductLoss(scale=64.0, margin=1.00, easy_margin=False)) \\\n    .with_loss(Person_ArcMarginProductLoss(scale=32.0, margin=0.50, easy_margin=False)) \\\n    .with_loss(center_loss) \\\n    .with_metric(family_accuracy, name='family_accuracy') \\\n    .with_metric(person_accuracy, name='person_accuracy') \\\n    .with_regularizer('l2',reg_weight=1e-5) \\\n    .with_accumulate_grads(10)\\\n    .with_model_save_path('.\/Models\/arcface_family.pth')\\\n    .with_automatic_mixed_precision_training()","9574e0e5":"plan=TrainingPlan()\\\n    .add_training_item(se_resnet50, name='arcface')\\\n    .with_data_loader(data_provider)\\\n    .repeat_epochs(20)\\\n    .with_batch_size(64)\\\n    .print_progress_scheduling(10,unit='batch')\\\n    .out_sample_evaluation_scheduling(100,unit='batch')\\\n    .display_loss_metric_curve_scheduling(200,unit='batch',imshow=True)\\\n    .save_model_scheduling(50,unit='batch')","4d985954":"plan.start_now()","0b30c3a0":"# \u8996\u89ba\u89aa\u7de3\u9451\u5b9a","5e264c6e":"\u5728\u640d\u5931\u51fd\u6578\u4e0a\u4ecd\u7136\u662f\u4f7f\u7528arcFace\uff0c\u53ea\u4e0d\u904e\u9019\u908a\u7684\u5206\u985e\u8981\u8b8a\u6210\u5169\u500b\u968e\u5c64\uff0c\u4e00\u500b\u662f\u5224\u65b7\u662f\u54ea\u4e00\u500b\u5bb6\u65cf\uff0c\u518d\u4f86\u624d\u662f\u5224\u65b7\u662f\u54ea\u4e00\u500b\u500b\u4eba\u3002\u7531\u65bc\u5169\u8005\u5c64\u7d1a\u4e0d\u540c\uff0c\u6839\u64da\u7d44\u5167\u5dee\u8ddd\u5c0f\u3001\u7d44\u9593\u5dee\u8ddd\u5927\u7684\u539f\u5247\uff0c\u53ef\u4ee5\u5f97\u77e5\u5bb6\u65cf\u9593\u7684\u5dee\u7570\u61c9\u8a72\u8981\u5927\u65bc\u500b\u4eba\u9593\u7684\u5dee\u7570\u3002\u56e0\u6b64\u6211\u5011\u628a\u540c\u6a23\u7684arcFace\u7684\u640d\u5931\u51fd\u6578\u8907\u88fd\u5169\u4efd\uff0c\u4fee\u6539\u5169\u8005\u7684Forward\u90e8\u5206\uff0c\u540c\u6642\u6211\u5011\u628a\u5bb6\u65cf\u7684\u640d\u5931\u51fd\u6578\u7684Margin\u4ee5\u53caScale\u90fd\u653e\u5927\u4e00\u500d\u3002  \n\u540c\u6642\u4e5f\u5728\u6b64\u5b9a\u7fa9\u4e86\u5bb6\u65cf\u8207\u500b\u4eba\u5206\u985e\u7684\u6e96\u78ba\u7387\u51fd\u6578\u3002","312533d6":"\u6240\u4ee5\u63a5\u4e0b\u4f86\u6211\u5011\u8981\u7a0d\u5fae\u6539\u88dd\u4e00\u4e0b\u6211\u5011\u9810\u8a13\u7df4\u597d\u7684arcface\uff0c\u9996\u5148\u6211\u5011\u7684\u8f38\u51fa\u5fc5\u9808\u6539\u6210\u5169\u7d44\uff0c\u4e00\u500b\u662f\u89aa\u5c6c\u95dc\u4fc2\uff0c\u53e6\u4e00\u500b\u662f\u500b\u4eba\uff0c\u7b49\u65bc\u662f\u6211\u5011\u7684\u4eba\u81c9\u8b58\u5225\u6a21\u578b\u540c\u6642\u8981\u8b58\u5225\u9019\u5169\u8005\u5dee\u7570\u3002","a7e4a8c7":"\u5728\u9019\u908a\u6211\u5011\u4ecd\u7136\u4f7f\u7528AdaBelief\u512a\u5316\u5668\uff0c\u5b78\u7fd2\u901f\u7387\u57281e-3\uff0c\u5b9a\u4e14\u52a0\u5165\u525b\u624d\u5b9a\u7fa9\u597d\u7684\u640d\u5931\u51fd\u6578\u8207\u8a55\u4f30\u51fd\u6578\u3002"}}