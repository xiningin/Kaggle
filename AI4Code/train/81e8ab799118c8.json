{"cell_type":{"ed9c6e36":"code","ef8684ca":"code","d04a492a":"code","e2fe8880":"code","da2b4eb0":"code","8bd62465":"code","4f9e0e18":"code","d7b305e5":"code","60a8585d":"code","98ece423":"code","453e752d":"code","ae768342":"code","f16f970f":"code","14f10053":"code","7e29476c":"code","61cd5afe":"code","0569aac6":"code","c91e4e2a":"code","6eb94c5e":"code","9715d228":"code","a819b398":"code","f29da400":"code","868850f1":"code","d343608d":"code","38df5629":"code","17aad797":"code","c5b6d95d":"code","fcf26796":"code","bdafe9b1":"code","f3c59b11":"code","997fa0e7":"code","77964fcb":"code","2bd2d71e":"code","09405131":"code","2ccec58d":"code","21bdad68":"code","7aaa76bc":"code","f830b0f5":"code","9e158728":"code","a07ac74f":"code","bf591d20":"code","1b427c73":"code","7a95992b":"code","f23f2435":"code","be9dfe4b":"code","2afd57df":"code","c5e7af4b":"code","c9d60a6c":"code","98d3505e":"code","0cf4c66a":"code","f170af82":"code","f50feddd":"code","ad57cf47":"code","8a4ccdbc":"code","c50d8fd3":"code","0b4d1429":"code","bc00c626":"code","8938df31":"code","845482f1":"code","9916efa7":"code","ff8a72bc":"code","6df5f287":"code","353216b6":"code","b274ee4f":"code","1f730511":"code","948b7a38":"code","318096f7":"code","cd19b098":"code","5454943d":"code","2254305e":"code","36aa9b8f":"code","b7af3922":"code","fb90c974":"code","a2642194":"code","d0f73d74":"markdown","70fca9e1":"markdown","641c23e2":"markdown","bd267521":"markdown","86c30cb7":"markdown","04c9ff3b":"markdown","5014e989":"markdown","cba6d338":"markdown","efc5309f":"markdown","9e6d627a":"markdown","4c1d29a0":"markdown","4900141c":"markdown","62e6444e":"markdown","c940ffd1":"markdown","8c2ddb9b":"markdown","5b4a4202":"markdown","af690775":"markdown","2539c9b2":"markdown","f9410b10":"markdown","9c375494":"markdown","3861e353":"markdown","10dcec6e":"markdown","edf9302e":"markdown","b5917dc1":"markdown"},"source":{"ed9c6e36":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn')\nsns.set(font_scale = 2.5)\n\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","ef8684ca":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')","d04a492a":"df_train.head(10)","e2fe8880":"df_test.head()","da2b4eb0":"df_train.describe()","8bd62465":"df_test.describe()","4f9e0e18":"for col in df_train.columns:\n    msg = \"column: {:>10}\\t Percent of NaN Value: {:.2f}%\".format(col, 100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0]))\n    print(msg)","d7b305e5":"for col in df_test.columns:\n    msg = \"column: {:>10}\\t Percent of NaN Value: {:.2f}%\".format(col, 100 * (df_test[col].isnull().sum() \/ df_test[col].shape[0]))\n    print(msg)","60a8585d":"msno.matrix( df = df_train.iloc[:,:], figsize = (8,8), color = (0, 0, 0.2))","98ece423":"msno.bar( df = df_train.iloc[:,:], figsize = (8,8), color = (0, 0, 0.3))","453e752d":"msno.matrix( df = df_test.iloc[:,:], figsize = (8,8), color = (0, 0, 0.2))","ae768342":"msno.bar( df = df_test.iloc[:,:], figsize = (8,8), color = (0, 0, 0.2))","f16f970f":"f, ax = plt.subplots(1, 2, figsize=(18,8))\n\ndf_train['Survived'].value_counts().plot.pie(explode = [0, 0.05], autopct = '%1.1f%%', ax = ax[0], shadow = True)\nax[0].set_title('Pie plot - Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived', data = df_train, ax = ax[1])\nax[1].set_title('Count plot - Survived')\n\nplt.show()","14f10053":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).count().style.background_gradient(cmap = 'summer_r')","7e29476c":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).sum().style.background_gradient(cmap = 'summer_r')","61cd5afe":"pd.crosstab(df_train['Pclass'], df_train['Survived'], margins=False).style.background_gradient(cmap = 'summer_r')","0569aac6":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index = True).mean().sort_values(by = 'Survived', ascending = False).plot.bar()","c91e4e2a":"y_position = 1.02\nf, ax = plt.subplots(1, 2, figsize = (18, 8))\n\ndf_train['Pclass'].value_counts().plot.bar(color = ['#CD7F32','#FFDF00','#D3D3D3'], ax=ax[0])\nax[0].set_title('Number of Passengers By Pcalss', y = y_position)\nax[0].set_ylabel('Count')\n\nsns.countplot('Pclass', hue = 'Survived', data = df_train, ax=ax[1])\nax[1].set_title('Pclass: Survived vs Dead', y= y_position)\n\nplt.show()","6eb94c5e":"f, ax = plt.subplots(1, 2, figsize = (18,8))\n\ndf_train[['Sex', 'Survived']].groupby(['Sex'], as_index = True).mean().plot.bar(color = ['#CD7F32','#FFDF00'], ax=ax[0])\nax[0].set_title('Survived vs  Sex', y = y_position)\nax[0].set_ylabel('Count')\n\nsns.countplot('Sex', hue = 'Survived', data = df_train, ax=ax[1])\nax[1].set_title('Sex: Survived vs Dead', y= y_position)\n\nplt.show()","9715d228":"df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by = 'Survived', ascending = False)","a819b398":"pd.crosstab(df_train['Sex'], df_train['Survived'], margins = True).style.background_gradient(cmap = 'summer_r')","f29da400":"sns.factorplot('Pclass', 'Survived', hue = 'Sex', data = df_train, size = 6, aspect = 1.5)","868850f1":"sns.factorplot(x = 'Sex', y = 'Survived', col = 'Pclass', data = df_train, satureation = .5, size =9, aspect = 1)","d343608d":"print('\uc81c\uc77c \ub098\uc774 \ub9ce\uc740 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].max()))\nprint('\uc81c\uc77c \uc5b4\ub9b0 \ud0d1\uc2b9\uac1d  : {:.1f} Years'.format(df_train['Age'].min()))\nprint('\ud0d1\uc2b9\uac1d \ud3c9\uade0 \ub098\uc774 : {:.1f} Years'.format(df_train['Age'].mean()))","38df5629":"fig, ax = plt.subplots(1, 1, figsize = (9, 5))\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax = ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax = ax)\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","17aad797":"fig, ax = plt.subplots(1, 1, figsize = (9, 5))\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax = ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax = ax)\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","c5b6d95d":"plt.figure(figsize = (8, 6))\ndf_train['Age'][df_train['Pclass'] == 1].plot(kind = 'kde')\ndf_train['Age'][df_train['Pclass'] == 2].plot(kind = 'kde')\ndf_train['Age'][df_train['Pclass'] == 3].plot(kind = 'kde')\n\nplt.xlabel('Age')\nplt.title('Age Distribution within classes')\nplt.legend(['1st Class', '2nd Class', '3rd Class'])","fcf26796":"cummulate_survival_ratio = []\nfor i in range(1, 80):\n    cummulate_survival_ratio.append(df_train[df_train['Age'] < i]['Survived'].sum() \/ len(df_train[df_train['Age'] < i]['Survived']))\n    \nplt.figure(figsize = (7,7))\nplt.plot(cummulate_survival_ratio)\nplt.title('Survival rate change depending on range of Age', y = 1.02)\nplt.ylabel('Survival rate')\nplt.xlabel('Range of Age(0-x)')\n\nplt.show()","bdafe9b1":"f, ax = plt.subplots(1, 2, figsize = (18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue = \"Survived\", data = df_train, scale = 'count', split = True, ax = ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0, 110, 10))\n\nsns.violinplot(\"Sex\",\"Age\", hue = \"Survived\", data = df_train, scale = 'count', split = True, ax = ax[1])\nax[1].set_title('Sex and Age bs Survived')\nax[1].set_yticks(range(0, 110, 10))\n\nplt.show()","f3c59b11":"f, ax = plt.subplots(1,1, figsize = (7,7))\n\ndf_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index = True).mean().sort_values(by = 'Survived', ascending = False).plot.bar(ax = ax)","997fa0e7":"f, ax = plt.subplots(2,2, figsize = (20,15))\n\nsns.countplot('Embarked', data = df_train, ax = ax[0, 0])\nax[0,0].set_title('(1) No, Of Passengers Boarded')\n\nsns.countplot('Embarked', hue = 'Sex', data = df_train, ax= ax[0,1])\nax[0,1].set_title('(2) Male - Female Split for Embarked')\n\nsns.countplot('Embarked', hue = 'Survived', data = df_train, ax = ax[1,0])\nax[1,0].set_title('(3) Embarked vs Survived')\n\nsns.countplot('Embarked', hue = 'Pclass', data = df_train, ax = ax[1,1])\nax[1,1].set_title('(4) Embarked vs Pclass')\n\nplt.subplots_adjust(wspace = 0.2, hspace = 0.5)\nplt.show()","77964fcb":"df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1\ndf_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1","2bd2d71e":"print(\"Maximum size of Family\", df_train['FamilySize'].max())\nprint(\"Minimum size of Family\", df_train['FamilySize'].min())","09405131":"f, ax = plt.subplots(1, 3, figsize = (40, 10))\n\nsns.countplot('FamilySize', data  = df_train, ax = ax[0])\nax[0].set_title('(1) No. Of Passengers Boarded', y = 1.02)\n\nsns.countplot('FamilySize', hue = 'Survived', data = df_train, ax = ax[1])\nax[1].set_title('(2) Survived countplot depending on FamilySize', y = 1.02 )\n\ndf_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index = True).mean().sort_values(by = 'Survived', ascending = False).plot.bar(ax = ax[2])\nax[2].set_title('(3) Survived rate depending on FamilySize', y = 1.02 )\n\nplt.subplots_adjust(wspace = 0.2, hspace = 0.5)\nplt.show()","2ccec58d":"fig, ax = plt.subplots(1, 1, figsize = (8,8))\n\ng = sns.distplot(df_train['Fare'], color = 'b', label = 'Skewness : {:.2f}'.format(df_train['Fare'].skew()),ax=ax)\ng = g.legend(loc='best')","21bdad68":"df_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean()\n\ndf_train['Fare'] = df_train['Fare'].map(lambda i : np.log(i) if i > 0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i : np.log(i) if i > 0 else 0)","7aaa76bc":"fig, ax = plt.subplots(1,1, figsize  = (8,8))\ng = sns.distplot(df_train['Fare'], color = 'b', label = 'Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax = ax)\ng = g.legend(loc = 'best')","f830b0f5":"df_train.head()","9e158728":"df_train['Initial'] = df_train.Name.str.extract('([A-Za-z]+)\\.')\n\ndf_test['Initial'] = df_test.Name.str.extract('([A-Za-z]+)\\.')","a07ac74f":"pd.crosstab(df_train['Initial'], df_train['Sex']).T.style.background_gradient(cmap='summer_r')","bf591d20":"df_train['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)\n\ndf_test['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)","1b427c73":"df_train.groupby('Initial')['Survived'].mean().plot.bar()","7a95992b":"df_train.groupby('Initial').mean()","f23f2435":"df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'), 'Age'] = 33\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mrs'),'Age'] = 36\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Master'),'Age'] = 5\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Miss'),'Age'] = 22\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Other'),'Age'] = 46\n\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mr'),'Age'] = 33\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mrs'),'Age'] = 36\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Master'),'Age'] = 5\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Miss'),'Age'] = 22\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Other'),'Age'] = 46","be9dfe4b":"print('Embarked has ', sum(df_train['Embarked'].isnull()), ' Null Values')","2afd57df":"df_train['Embarked'].fillna('S', inplace=True)","c5e7af4b":"df_train['Age_cat'] = 0\ndf_train.loc[df_train['Age'] < 10, 'Age_cat'] = 0\ndf_train.loc[(10 <= df_train['Age']) & (df_train['Age'] < 20), 'Age_cat'] = 1\ndf_train.loc[(20 <= df_train['Age']) & (df_train['Age'] < 30), 'Age_cat'] = 2\ndf_train.loc[(30 <= df_train['Age']) & (df_train['Age'] < 40), 'Age_cat'] = 3\ndf_train.loc[(40 <= df_train['Age']) & (df_train['Age'] < 50), 'Age_cat'] = 4\ndf_train.loc[(50 <= df_train['Age']) & (df_train['Age'] < 60), 'Age_cat'] = 5\ndf_train.loc[(60 <= df_train['Age']) & (df_train['Age'] < 70), 'Age_cat'] = 6\ndf_train.loc[70 <= df_train['Age'], 'Age_cat'] = 7\n\ndf_test['Age_cat'] = 0\ndf_test.loc[df_train['Age'] < 10, 'Age_cat'] = 0\ndf_test.loc[(10 <= df_test['Age']) & (df_test['Age'] < 20), 'Age_cat'] = 1\ndf_test.loc[(20 <= df_test['Age']) & (df_test['Age'] < 30), 'Age_cat'] = 2\ndf_test.loc[(30 <= df_test['Age']) & (df_test['Age'] < 40), 'Age_cat'] = 3\ndf_test.loc[(40 <= df_test['Age']) & (df_test['Age'] < 50), 'Age_cat'] = 4\ndf_test.loc[(50 <= df_test['Age']) & (df_test['Age'] < 60), 'Age_cat'] = 5\ndf_test.loc[(60 <= df_test['Age']) & (df_test['Age'] < 70), 'Age_cat'] = 6\ndf_test.loc[70 <= df_test['Age'], 'Age_cat'] = 7\n","c9d60a6c":"def category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3\n    elif x < 50:\n        return 4\n    elif x < 60:\n        return 5\n    elif x < 70:\n        return 6\n    else:\n        return 7\n\ndf_train['Age_cat_2'] = df_train['Age'].apply(category_age)","98d3505e":"print('1\ubc88 \ubc29\ubc95, 2\ubc88 \ubc29\ubc95 \ub458\ub2e4 \uac19\uc740 \uacb0\uacfc\ub97c \ub0b4\uba74 True \uc918\uc57c\ud568 ->', (df_train['Age_cat'] == df_train['Age_cat_2']).all())","0cf4c66a":"df_train.drop(['Age', 'Age_cat_2'], axis = 1, inplace = True)\ndf_test.drop(['Age'], axis = 1, inplace = True)","f170af82":"df_train['Initial'] = df_train['Initial'].map({'Master' : 0, 'Miss' : 1, 'Mr' : 2, 'Mrs' : 3, 'Other' : 4})\ndf_test['Initial'] = df_test['Initial'].map({'Master' : 0, 'Miss' : 1, 'Mr' : 2, 'Mrs' : 3, 'Other' : 4})","f50feddd":"df_train['Embarked'].unique()","ad57cf47":"df_train['Embarked'].value_counts()","8a4ccdbc":"df_train['Embarked'] = df_train['Embarked'].map({'C' : 0, 'Q' : 1, 'S' : 2})\ndf_test['Embarked'] = df_test['Embarked'].map({'C' : 0, 'Q' : 1, 'S' : 2})","c50d8fd3":"df_train['Embarked'].isnull().any()","0b4d1429":"df_train['Sex'] = df_train['Sex'].map({'female' : 0, 'male' : 1})\ndf_test['Sex'] = df_test['Sex'].map({'female' : 0, 'male' : 1})","bc00c626":"heatmap_data = df_train[['Survived', 'Pclass', 'Sex', 'Fare', 'Embarked', 'FamilySize', 'Initial', 'Age_cat']]\n\ncolor_map = plt.cm.RdBu\nplt.figure(figsize = (14,12))\nplt.title('Pearson Correlation of Features', y = 1.05, size = 15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths = 0.1, vmax = 1.0, square = True, cmap = color_map, linecolor = 'white', annot = True, annot_kws = {\"size\": 16})\n\ndel heatmap_data","8938df31":"df_train = pd.get_dummies(df_train, columns = ['Initial'], prefix = 'Initial')\ndf_test = pd.get_dummies(df_test, columns = ['Initial'], prefix = 'Initial')","845482f1":"df_train.head()","9916efa7":"df_train = pd.get_dummies(df_train, columns=['Embarked'], prefix='Embarked')\ndf_test = pd.get_dummies(df_test, columns=['Embarked'], prefix='Embarked')","ff8a72bc":"df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis = 1, inplace = True)\ndf_test.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis = 1, inplace = True)","6df5f287":"df_train.head()","353216b6":"df_test.head()","b274ee4f":"#importing all the required ML packages\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split","1f730511":"X_train = df_train.drop('Survived', axis = 1).values\ntarget_label = df_train['Survived'].values\nX_test = df_test.values","948b7a38":"X_tr, X_vld, Y_tr, Y_vld = train_test_split(X_train, target_label, test_size = 0.3, random_state = 2018)","318096f7":"model = RandomForestClassifier()\nmodel.fit(X_tr, Y_tr)\nprediction = model.predict(X_vld)","cd19b098":"print('\ucd1d {}\uba85 \uc911 {:.2f} \uc815\ud655\ub3c4\ub85c \uc0dd\uc874\uc744 \ub9de\ucda4'.format(Y_vld.shape[0], 100 * metrics.accuracy_score(prediction, Y_vld)))","5454943d":"from pandas import Series\n\nfeature_importance = model.feature_importances_\nSeries_feat_imp = Series(feature_importance, index = df_test.columns)","2254305e":"plt.figure(figsize = (8,8))\n\nSeries_feat_imp.sort_values(ascending = True).plot.barh()\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()","36aa9b8f":"submission = pd.read_csv('..\/input\/gender_submission.csv')","b7af3922":"submission.head()","fb90c974":"prediction = model.predict(X_test)\nsubmission['Survived'] = prediction","a2642194":"submission.to_csv('.\/my_first_submission.csv', index = False)","d0f73d74":"## 3. Feature engineering\n### 3.1 Fill Null\n#### 3.1.1 Fill Null in Age using title","70fca9e1":"#### 3.1.2 Fill Null in Embarked","641c23e2":"### 3.3 Change Initial, Embarked and Sex ( string to numerical )","bd267521":"### 2.6 Embarked","86c30cb7":"### 2.9 Cabin","04c9ff3b":"### 2.7 Family -Sibsp(\ud615\uc81c \uc790\ub9e4) -Parch(\ubd80\ubaa8, \uc790\ub140)","5014e989":"#### 3.1.3 Change Age( Continuous to categorical)","cba6d338":"### 1.2 Target Label \ud655\uc778","efc5309f":"## 2. Exploratory data analysis","9e6d627a":"### 2.4 Age","4c1d29a0":"# Thank You!","4900141c":"### 2.5 Pclass, Sex, Age","62e6444e":"## 4. Building machine learning model and prediction using the trained model","c940ffd1":"### 4.4 Prediction on Test set","8c2ddb9b":"### 4.1 Preparation - Split dataset into train, valid, test set","5b4a4202":"### 4.3 Feature importance","af690775":"### 1.1 Null Data Check","2539c9b2":"### 2.8 Fare","f9410b10":"### 2.3 Both Sex and Plass","9c375494":"### 3.4 One-hot encoding on Initial and Embarked","3861e353":"### 4.2 Model generation and prediction","10dcec6e":"### 2.1 Pclass","edf9302e":"### 3.5 Drop columns","b5917dc1":"### 2.2 Sex"}}