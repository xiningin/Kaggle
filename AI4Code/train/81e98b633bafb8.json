{"cell_type":{"7ddfe46a":"code","181691cc":"code","b3c00a67":"code","4b6a1c42":"code","e3a6bc4d":"code","f6c117e5":"code","2777be58":"code","14f37de4":"code","9aaed32f":"code","77e5b846":"code","729512ba":"code","68feb6cb":"code","4dc5f439":"code","eb497784":"code","ac6c840b":"code","b92d7883":"code","018b9c46":"code","957482dc":"markdown","5d486ef0":"markdown","c0ad881f":"markdown"},"source":{"7ddfe46a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","181691cc":"from keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPool2D\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np","b3c00a67":"train_data = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/test.csv')","4b6a1c42":"test_data","e3a6bc4d":"if not test_data.get('label'):\n    print('Brak y_test')","f6c117e5":"y_train = train_data['label']\nprint(\"Labels: \", np.unique(y_train))\nprint(\"y_train shape: \", y_train.shape)","2777be58":"# one-hot encoding\ny_train = to_categorical(y_train, 10)\nprint(y_train.shape)","14f37de4":"x_train = train_data.iloc[:,1:].values\nx_test = test_data.iloc[:,1:].values\nprint(\"x_train shape: \", x_train.shape)","9aaed32f":"x_train = x_train.reshape(x_train.shape[0], 28, 28)\nx_test = x_test.reshape(x_test.shape[0], 28, 28)\nprint(\"x_train shape: \", x_train.shape)\nprint(\"x_test shape: \", x_test.shape)","77e5b846":"plt.figure()\nplt.imshow(x_train[0])\nplt.show()\ny_train[0]","729512ba":"x_train = np.expand_dims(x_train, axis=3)\nx_test = np.expand_dims(x_test, axis=3)\nx_train.shape","68feb6cb":"model = Sequential([\n    Conv2D(32, input_shape=x_train[0].shape, kernel_size=(4,4), activation='relu'),\n    MaxPool2D(),\n    Conv2D(64, kernel_size=(2,2), activation='relu'),\n    MaxPool2D(),\n    Flatten(),\n    Dense(128, activation='relu'),\n    Dropout(0.2),\n    Dense(64, activation='relu'),\n    Dense(10, activation='softmax')\n])\nmodel.summary()","4dc5f439":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","eb497784":"history = model.fit(x=x_train, y=y_train, epochs=16, batch_size=32)","ac6c840b":"plt.plot(history.history['accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.show()\n","b92d7883":"predictions = model.predict_classes(x_test)\npredictions\nsubmission = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/sample_submission.csv')\nsubmission['label'] = predictions\nprint(submission.head(5))\nsubmission.to_csv('submission.csv', index=False)","018b9c46":"model.save('model.h5')","957482dc":"Images are in gray scale so the shape of the particular one should be (29, 28, 1)","5d486ef0":"Plot he sample image","c0ad881f":"<pre>\nProcess the y_train to one-hot encoding.\ne.g\n    for label=2 => [0,0,1,0,0,0,0,0,0,0]\n<\/pre>"}}