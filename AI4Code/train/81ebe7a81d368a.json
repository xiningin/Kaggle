{"cell_type":{"cf6ea695":"code","5fd4c586":"code","6bc73fdf":"code","64ced49d":"code","fbe3b440":"code","a3a9e172":"code","c18e53b6":"code","c4ad796a":"code","788743b8":"code","a33cd2af":"code","47b7cfb6":"code","ee5aeddd":"code","a4cf25fa":"code","fd0f5752":"code","4860b50b":"code","a28991ca":"code","5fbc5b39":"code","05de4e5a":"code","1bd71b54":"code","539ea652":"code","4da74214":"code","5650b340":"markdown","238d3ff8":"markdown","2ba8864e":"markdown","faa9acbe":"markdown","ce2346fd":"markdown","b9f8f8b8":"markdown"},"source":{"cf6ea695":"# Import packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","5fd4c586":"# Import train and test datasets\ntrain = pd.read_csv('..\/input\/train.csv')\n#test = pd.read_csv('..\/input\/test.csv')","6bc73fdf":"# Check the first five rows of train\ntrain.head()","64ced49d":"# Dimension of train\nprint('Train data number of rows and columns: ', train.shape)","fbe3b440":"# Replace Yes and No values with 1 and 0 \ntrain = train.replace(['no', 'yes'], [0, 1])\n#test = test.replace(['no', 'yes'], [0, 1])","a3a9e172":"# Target labels\ndlab = {1:'extreme poverty', 2:'moderate poverty', 3:'vulnerable households', 4:'non vulnerable households'}\n\n# Whole observation targets\ntarget_tot = train.Target.value_counts().to_frame()\nidx = pd.Series(target_tot.index)\ntarget_tot.index = idx.apply(lambda x:dlab[x])","c18e53b6":"# Resample for household head\ntrain_hh = train.loc[train.parentesco1 == 1]\ntarget_hh = train_hh.Target.value_counts().to_frame()\nidx = pd.Series(target_hh.index)\ntarget_hh.index = idx.apply(lambda x:dlab[x])","c4ad796a":"# Two plots together\nexplode = (0, .05, .1, .15)\n\nplt.subplot(1, 2, 1)\nplt.pie(target_tot, explode = explode, autopct = '%1.1f%%', shadow = True, startangle = 90, center = (-3, 0))\nplt.title('Target total')\nplt.axis('equal')\n\nplt.subplot(1, 2, 2)\nplt.pie(target_hh, explode = explode, autopct = '%1.1f%%', shadow = True, startangle = 90, center = (3, 0))\nplt.title('Target for housholds')\nplt.legend(target_tot.index, loc = 'center left', bbox_to_anchor = (1.1, .5))\nplt.axis('equal')\n\nplt.show()","788743b8":"# Dimension of household level data\ntrain_hh.shape","a33cd2af":"# Percent og missing data\ntrain_hh_na = (train_hh.isnull().sum() \/ len(train_hh)) * 100\ntrain_hh_na = train_hh_na[train_hh_na != 0].sort_values(ascending = False)\npd.DataFrame({'Percent of missing' :train_hh_na})","47b7cfb6":"# Delete columns with over 70% of missing\ntrain_hh = train_hh.drop(['rez_esc', 'v18q1', 'v2a1'], axis = 1)\ntrain_hh.shape","ee5aeddd":"# Function for plot of violin and strip plots together \ndef ViolinStrip(xvar, yvar, data, ylab):\n    import seaborn as sns\n    sns.violinplot(x = xvar, y = yvar, data = data, inner = None, color = 'lightgray')\n    sns.stripplot(x = xvar, y = yvar, data = data, size = 2, jitter = True)\n    plt.ylabel(ylab)\n    return plt.show()","a4cf25fa":"# Number of childern younger than 12Y\nViolinStrip(xvar = 'Target', yvar = 'r4t1', data = train_hh, ylab = 'Number of childern younger than 12Y')","fd0f5752":"# Number of childre under 19\nViolinStrip(xvar = 'Target', yvar = 'hogar_nin', data = train_hh, ylab = 'Number of childre under 19')","4860b50b":"# Total number of household\nViolinStrip(xvar = 'Target', yvar = 'r4t3', data = train_hh, ylab = 'Total number of household')","a28991ca":"# Number of rooms vs target\nsns.jointplot(x = 'rooms', y = 'Target', data = train_hh, kind = 'kde')\nplt.show()","5fbc5b39":"# Average education vs target\nsns.jointplot(x = 'meaneduc', y = 'Target', data = train_hh, kind = 'kde')\nplt.show()","05de4e5a":"# Age vs target\nsns.jointplot(x = 'age', y = 'Target', data = train_hh, kind = 'kde')\nplt.show()","1bd71b54":"# Mean education vs age\nsns.jointplot(x = 'meaneduc', y = 'age', data = train_hh, kind = 'kde')\nplt.show()","539ea652":"# Correlation with target\ncor = pd.DataFrame(train_hh.dropna().corr()['Target'].drop('Target'))\ncor['cor_abs'] = cor.abs()\ncor.columns = ['CORR', 'CORR_abs']\ncor = cor.sort_values('CORR_abs', ascending = False)\ncor = cor[cor.CORR_abs >= .2]\ncor[:10]","4da74214":"# Plot correlation\nsns.barplot(x=cor.index, y=cor.CORR)\nplt.xticks(rotation = 60)\nplt.show()","5650b340":"### Correlalation with target","238d3ff8":"### Distribution of target variable for total sample and household heads","2ba8864e":"### Preparation  ","faa9acbe":"### Bivariate plots","ce2346fd":"### Missing data","b9f8f8b8":"### Distribution of continuous variables by target"}}