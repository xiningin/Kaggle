{"cell_type":{"0dcbb96d":"code","17e23070":"code","75fef7f3":"code","90d81c8c":"code","2016b152":"code","605ae608":"code","5cf20182":"code","a36f69dc":"code","181b1654":"code","3f4515fa":"code","92638ba0":"code","25967e4d":"code","8d6fb3b2":"code","d5199589":"code","146d3f64":"code","bdc5b02b":"code","a4f4a364":"code","24b8613a":"code","5da874c0":"code","b61b8dd6":"code","1ccbfd22":"code","6ce39ec4":"code","124b5385":"code","4be06649":"code","3baf5be3":"code","faf5fc72":"code","8525a45e":"code","7abe8ffc":"code","c264dfa1":"code","077973a8":"code","5cd51572":"code","643f79b0":"code","182307d1":"code","5f04006f":"code","6cc511ee":"code","9926a332":"markdown","9f7c18f7":"markdown","4b098007":"markdown","1cf0c001":"markdown","aac8c079":"markdown","e34c854d":"markdown","f3be4de7":"markdown","390f9afa":"markdown","13e2f1ed":"markdown","8a156748":"markdown","270b6107":"markdown","3bfacec9":"markdown"},"source":{"0dcbb96d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n\n# packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport cv2\nimport seaborn as sns\nfrom PIL import Image\nimport tensorflow as tf\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.applications import EfficientNetB0, EfficientNetB1, EfficientNetB2, EfficientNetB3, EfficientNetB4, EfficientNetB5, EfficientNetB6, EfficientNetB7\nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.layers import Input, Dense, Flatten\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom tensorflow.keras import utils\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing.image import img_to_array\nimport math\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras import layers\nfrom sklearn.metrics import classification_report","17e23070":"#Parameters\nDIR_UTKFace=\"..\/input\/utkface-new\/UTKFace\"\nIMG_SIZE = 224 \n\n#set SMALL_DATASET to use reduced dataset in order to be faster with tests. Otherwise set to NORMAL_DATASET\nMODE=\"NORMAL_DATASET\"\n\nTRAIN_SPLIT = 0.8  \nVALID_TEST_SPLIT = 0.8\n\n#imagenet or noisy-student\nWEIGHTS = 'imagenet'\n\nBATCH_SIZE = 32","75fef7f3":"#For gender we get a numeric value. Male = 0, Female = 1\nGENDER_MAP=['M','F']\n\n#Get age and gender from image file name\ndef get_info_from_image(image_file_name):\n    age=int(image_file_name.split('_')[0])\n    gender=int(image_file_name.split('_')[1])\n    return age, gender\n\n#get image from filename and directory\ndef get_image(file_name):\n    img_dir=file_name\n    image=cv2.imread(img_dir)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = cv2.resize(image,(IMG_SIZE,IMG_SIZE))\n    return image\n  \n#Preview image with gender and age from dataframe\ndef preview_random_images(df, with_predictions, with_gender=False, with_age=False):\n    samples = 25\n    if len(df) < samples:\n        samples = len(df)\n    \n    df_sample = df.sample(samples) \n    plt.figure(figsize=(20,20))\n    for i in range(len(df_sample.index)):\n        plt.subplot(5,5,i+1)\n        plt.axis('off')\n        image = get_image(np.array(df_sample['file_name'])[i])\n        plt.imshow(image)     \n        title = \"Real: \"\n        if with_gender:\n            gender = GENDER_MAP[np.array(df_sample['gender'])[i]]\n            title = title + gender\n        if with_age:\n            age = np.array(df_sample['age'])[i]\n            title = title + \"(\" + str(age) + \")\"\n        if ((not with_age) and (not with_gender)):\n            gender = GENDER_MAP[np.array(df_sample['gender'])[i]]\n            title = title + gender\n            age = np.array(df_sample['age'])[i]\n            title = title + \"(\" + str(age) + \")\"         \n        if with_predictions:\n            title += \" Pred: \"\n            if with_gender:\n                gender = GENDER_MAP[np.array(df_sample['gender_pred'])[i]]\n                title = title + gender\n            if with_age:\n                age = np.array(df_sample['age_pred'])[i]\n                title = title + \" (\" + str(round(age)) + \")\"\n        plt.title(title)\n","90d81c8c":"files_names=os.listdir(DIR_UTKFace)\n\nall_ages = []\nall_genders = []\nall_file_names = []\n\n\nfor file_name in files_names:\n    \n    #check that all images are jpg format\n    if \".jpg\" not in file_name:\n        raise RuntimeError(\"Format not expected: \"+ file_name)\n    \n    age, gender = get_info_from_image(file_name)\n    \n    all_ages.append(age)\n    all_genders.append(gender)\n    all_file_names.append(DIR_UTKFace + \"\/\" + file_name)\n    \n    \ndataset_images = {'age': all_ages, \n                  'gender': all_genders, \n                  'file_name': all_file_names}\n\ndf = pd.DataFrame(data=dataset_images)","2016b152":"# SMALL_DATASET is used to reduced dataset in order to be faster with tests.\nif MODE == \"SMALL_DATASET\":\n    df = df.head(100)\n    EPOCHS = 3","605ae608":"df.head()","5cf20182":"preview_random_images(df, False)","a36f69dc":"#age checks\nfor i in range(len(df.index)):\n    age = df['age'][i]\n    if type(age) != np.int64:\n        raise RuntimeError(\"Age not expected: \"+ str(age))\ndf_age_nan  = df[df['age'].isna()]\nprint(\"Total rows with NaN in age field: \" + str(df_age_nan.age.count()))\n\n\n#gender checks\nfor i in range(len(df.index)):\n    gender = df['gender'][i]\n    if gender != 0 and gender != 1:\n        raise RuntimeError(\"Gender not expected: \"+ gender)\ndf_gender_nan = df[df['gender'].isna()]\nprint(\"Total rows with NaN in gender field: \" + str(df_gender_nan.gender.count()))\n\n\n#file_name checks\nfor i in range(len(df.index)):\n    file_name = df['file_name'][i]\n    if \".jpg\" not in file_name:\n        raise RuntimeError(\"Format not expected: \"+ file_name)\ndf_file_name_nan = df[df['file_name'].isna()]\nprint(\"Total rows with null value in file_name field: \" + str(df_file_name_nan.file_name.count()))","181b1654":"df['gender'].describe()","3f4515fa":"num_images = df.gender.count()\nnum_images_male_gender = df.groupby('gender').get_group(0).gender.count() \nnum_images_female_gender = df.groupby('gender').get_group(1).gender.count() \npercentage_male_gender = (num_images_male_gender * 100)\/num_images\npercentage_female_gender = (num_images_female_gender * 100)\/num_images\nprint(\"MALE gender: \" + str(round(percentage_male_gender)) + \"% (\" + str(num_images_male_gender) + \" images)\")\nprint(\"FEMALE gender: \" + str(round(percentage_female_gender)) + \"% (\" + str(num_images_female_gender) + \" images)\")\n\ndf.gender.value_counts().plot(kind='pie', labels=GENDER_MAP)\nplt.title('Gender distribution')","92638ba0":"df['age'].describe()","25967e4d":"maxAge = df['age'].max()\nprint(\"Older person has \" + str(maxAge) + \" years old\") \n\nsns.histplot(data=df, x='age', kde=True, bins=maxAge).set_title('Age Distribution')","8d6fb3b2":"sns.kdeplot(data=df, x=\"age\")\nsns.kdeplot(data=df.groupby('gender').get_group(0), x=\"age\")\nsns.kdeplot(data=df.groupby('gender').get_group(1), x=\"age\")\nplt.legend(labels=[\"All\", \"Male\", \"Female\"])\nplt.title(\"Age distribution by gender\")","d5199589":"_, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\nsns.boxplot(data=df, x='gender', y='age', ax=ax1)\nsns.boxplot(data=df, y='age', ax=ax2)","146d3f64":"def plot_hist(hist):\n    plt.plot(hist.history[\"binary_accuracy\"])\n    plt.plot(hist.history[\"val_binary_accuracy\"])\n    plt.title(\"model accuracy\")\n    plt.ylabel(\"accuracy\")\n    plt.xlabel(\"epoch\")\n    plt.legend([\"train\", \"validation\"], loc=\"upper left\")\n    plt.show()","bdc5b02b":"dataGenerator = ImageDataGenerator(\n    brightness_range=[0.8,1.2],\n    horizontal_flip=True\n)\n\n#preview of images generated by the data generator \nimg = get_image(np.array(df['file_name'])[0])\ndata = img_to_array(img)\nsamples = np.expand_dims(data, 0)\n\ndatagen = dataGenerator\nit = datagen.flow(samples, batch_size=1)\n\nplt.figure(figsize=(20,20))\nfor i in range(20):\n    plt.subplot(10,10,i+1)\n    plt.axis('off')\n    batch = it.next()\n    image = batch[0].astype('uint8')\n    plt.imshow(image)","a4f4a364":"def get_image_from_generator(image_array):\n    img = np.expand_dims(image_array, 0)\n    it = datagen.flow(img, batch_size=1)\n    batch = it.next()\n    img = batch[0].astype('uint8')\n    return img\n\ndef get_data_generator_gender(df, indices, is_train, is_test):\n\n    images = list()\n    genders = list()\n    while True:\n        for i in indices:\n            r = df.iloc[i]\n            file, gender = r['file_name'], r['gender']\n            im = Image.open(file)\n            im = im.resize((IMG_SIZE, IMG_SIZE))\n            im = np.array(im) \/ 255.0\n            if is_train:\n                im = get_image_from_generator(im)\n                im = im \/ 255.0\n            images.append(im)\n            genders.append(gender)\n            if len(images) >= BATCH_SIZE:\n                yield np.asarray(images), np.asarray(genders)\n                images = list()\n                genders = list()\n        if is_test:\n            break","24b8613a":"p = np.random.permutation(len(df)) \ntrain_len = int(len(df) * TRAIN_SPLIT)\n\ntrain_idx = p[:train_len]\nvalid_test_idx = p[train_len:]\n\n\n\nvalid_len = int((len(df)-train_len) * VALID_TEST_SPLIT)\nvalid_idx, test_idx = valid_test_idx[:valid_len], valid_test_idx[valid_len:]\n\nprint(\"Lenght of original dataset: \" + str(len(df)) + \")\")\nprint(\"Lenght of train dataset: \" + \"(\" + str(len(train_idx)) + \")\")\nprint(\"Lenght of validation dataset: \" + \"(\" + str(len(valid_idx)) + \")\")\nprint(\"Lenght of test dataset: \" + \"(\" + str(len(test_idx)) + \")\")","5da874c0":"inputs = Input(shape=(IMG_SIZE, IMG_SIZE, 3)) \nx = inputs\nmodel = EfficientNetB0(weights=WEIGHTS, include_top=False, input_tensor = x)\n\n# Freeze the pretrained weights\nmodel.trainable = True\n\n#for layer in model.layers:\n#    layer.trainable = True\n\nx = layers.GlobalAveragePooling2D(name=\"avg_pool\")(model.output)\nx = layers.BatchNormalization()(x)\n\ntop_dropout_rate = 0.2\nx = layers.Dropout(top_dropout_rate, name=\"top_dropout\")(x)\ngender_output = Dense(units=1, activation='sigmoid', name='gender_output')(x)\n\nmodel = Model(inputs=inputs, outputs=gender_output,  name=\"EfficientNet\")\noptimizer = tf.keras.optimizers.Adam(learning_rate=1e-2)\nmodel.compile(optimizer=optimizer,   loss='binary_crossentropy', metrics='binary_accuracy')","b61b8dd6":"#Get steps based on lenght of a dataframe and the BATCH\ndef get_steps(lenght_samples, batch_size):\n    if (lenght_samples % batch_size) > 0 :\n        return (lenght_samples \/\/ batch_size) + 1\n    else :\n        return lenght_samples \/\/ batch_size\n\n    \nsteps_train = get_steps(len(train_idx), BATCH_SIZE)\nsteps_valid = get_steps(len(valid_idx), BATCH_SIZE)","1ccbfd22":"train_gen = get_data_generator_gender(df, train_idx, True, False)\nvalid_gen = get_data_generator_gender(df, valid_idx, False, False)\n\n\nepochs=25\nhistory = model.fit_generator(train_gen,\n                    steps_per_epoch=steps_train,\n                    epochs=epochs,\n                    validation_data=valid_gen,\n                    validation_steps=steps_valid)\nplot_hist(history)","6ce39ec4":"def unfreeze_model(model):\n    # We unfreeze the top 20 layers while leaving BatchNorm layers frozen\n    for layer in model.layers[-20:]:\n        if not isinstance(layer, layers.BatchNormalization):\n            layer.trainable = True\n\n    optimizer = tf.keras.optimizers.Adam(learning_rate=1e-4)\n    model.compile(optimizer=optimizer,   loss='binary_crossentropy', metrics='binary_accuracy')\n\n\nunfreeze_model(model)\n\nepochs = 10  # @param {type: \"slider\", min:8, max:50}\nhist = model.fit_generator(train_gen,\n                    steps_per_epoch=steps_train,\n                    epochs=epochs,\n                    validation_data=valid_gen,\n                    validation_steps=steps_valid)\nplot_hist(hist)","124b5385":"#classification report for train dataset\nsteps_train = get_steps(len(train_idx), BATCH_SIZE)\ntrain_gen = get_data_generator_gender(df, train_idx, False, True)\ngender_predictions = model.predict(train_gen, steps=steps_train)\ntrain_gen = get_data_generator_gender(df, train_idx, False, True)\ngender_evaluated = model.evaluate(train_gen, steps=steps_train)\ngender_predictions_binary = []\nfor i in range(len(gender_predictions)):\n    gender_pred = 0 if gender_predictions[i][0] < 0.5 else 1 \n    gender_predictions_binary.append(gender_pred) \ngender_true = []\nfor i in range(len(gender_predictions_binary)):\n    r = df.iloc[train_idx[i]]\n    gender_real = r['gender']\n    gender_true.append(gender_real)\nprint(\"\\nClassification report for gender (train dataset)\")\nprint(classification_report(gender_true, gender_predictions_binary))","4be06649":"#classification report for validation dataset\nsteps_valid = get_steps(len(valid_idx), BATCH_SIZE)\nvalid_gen = get_data_generator_gender(df, valid_idx, False, True)\ngender_predictions = model.predict(valid_gen, steps=steps_valid)\nvalid_gen = get_data_generator_gender(df, valid_idx, False, True)\ngender_evaluated = model.evaluate(valid_gen, steps=steps_valid)\ngender_predictions_binary = []\nfor i in range(len(gender_predictions)):\n    gender_pred = 0 if gender_predictions[i][0] < 0.5 else 1 \n    gender_predictions_binary.append(gender_pred) \ngender_true = []\nfor i in range(len(gender_predictions_binary)):\n    r = df.iloc[valid_idx[i]]\n    gender_real = r['gender']\n    gender_true.append(gender_real)\nprint(\"\\nClassification report for gender (validation dataset)\")\nprint(classification_report(gender_true, gender_predictions_binary))","3baf5be3":"#classification report for test dataset\nsteps_test = get_steps(len(test_idx), BATCH_SIZE)\ntest_gen = get_data_generator_gender(df, test_idx, False, True)\ngender_predictions = model.predict(test_gen, steps=steps_test)\ntest_gen = get_data_generator_gender(df, test_idx, False, True)\ngender_evaluated = model.evaluate(test_gen, steps=steps_test)\ngender_predictions_binary = []\nfor i in range(len(gender_predictions)):\n    gender_pred = 0 if gender_predictions[i][0] < 0.5 else 1 \n    gender_predictions_binary.append(gender_pred) \ngender_true = []\nfor i in range(len(gender_predictions_binary)):\n    r = df.iloc[test_idx[i]]\n    gender_real = r['gender']\n    gender_true.append(gender_real)\nprint(\"\\nClassification report for gender (validation dataset)\")\nprint(classification_report(gender_true, gender_predictions_binary))","faf5fc72":"#preview images with prediction\ngenders_real = []\nfile_names = []\ngenders_pred = []\nfor i in range(len(gender_predictions)):\n    r = df.iloc[test_idx[i]]\n    file_name, gender_real = r['file_name'], r['gender']\n    gender_pred = 0 if gender_predictions[i][0] < 0.5 else 1    \n    genders_real.append(gender_real)\n    file_names.append(file_name)\n    genders_pred.append(gender_pred) \n    \ndataset_images_pred = {'gender': genders_real, \n                       'gender_pred': genders_pred, \n                       'file_name': file_names}\n\ndf_pred = pd.DataFrame(data=dataset_images_pred)\npreview_random_images(df_pred, True, with_gender=True)","8525a45e":"def plot_hist(hist):\n    plt.plot(hist.history[\"mae\"])\n    plt.plot(hist.history[\"val_mae\"])\n    plt.title(\"model mae\")\n    plt.ylabel(\"mae\")\n    plt.xlabel(\"epoch\")\n    plt.legend([\"train\", \"validation\"], loc=\"upper left\")\n    plt.show()\n\n\ndef get_data_generator_age(df, indices, is_train, is_test):\n\n    images = list()\n    ages = list()\n    while True:\n        for i in indices:\n            r = df.iloc[i]\n            file, age = r['file_name'], r['age']\n            im = Image.open(file)\n            im = im.resize((IMG_SIZE, IMG_SIZE))\n            im = np.array(im) \/ 255.0\n            if is_train:\n                im = get_image_from_generator(im)\n                im = im \/ 255.0\n            images.append(im)\n            age_norm = (age \/ maxAge)\n            ages.append(age_norm)\n            if len(images) >= BATCH_SIZE:\n                yield np.asarray(images), np.asarray(ages)\n                images = list()\n                ages = list()\n        if is_test:\n            break","7abe8ffc":"inputs = Input(shape=(IMG_SIZE, IMG_SIZE, 3)) \nx = inputs\nmodel = EfficientNetB0(weights=WEIGHTS, include_top=False, input_tensor = x)\n\n# Freeze the pretrained weights\nmodel.trainable = True\n\n#for layer in model.layers:\n#    layer.trainable = True\n\nx = layers.GlobalAveragePooling2D(name=\"avg_pool\")(model.output)\nx = layers.BatchNormalization()(x)\n\ntop_dropout_rate = 0.2\nx = layers.Dropout(top_dropout_rate, name=\"top_dropout\")(x)\nage_output = Dense(units=1, activation='linear', name='age_output')(x)\n\nmodel = Model(inputs=inputs, outputs=age_output,  name=\"EfficientNet\")\noptimizer = tf.keras.optimizers.Adam(learning_rate=1e-2)\nmodel.compile(optimizer=optimizer,   loss='mean_squared_error', metrics=['mae'])","c264dfa1":"train_gen = get_data_generator_age(df, train_idx, True, False)\nvalid_gen = get_data_generator_age(df, valid_idx, False, False)\n\n\nepochs=25\nhistory = model.fit_generator(train_gen,\n                    steps_per_epoch=steps_train,\n                    epochs=epochs,\n                    validation_data=valid_gen,\n                    validation_steps=steps_valid)\nplot_hist(history)","077973a8":"def unfreeze_model(model):\n    # We unfreeze the top 20 layers while leaving BatchNorm layers frozen\n    for layer in model.layers[-20:]:\n        if not isinstance(layer, layers.BatchNormalization):\n            layer.trainable = True\n\n    optimizer = tf.keras.optimizers.Adam(learning_rate=1e-4)\n    model.compile(optimizer=optimizer, loss='mean_squared_error', metrics=['mae'])\n\n\nunfreeze_model(model)\n\nepochs = 10  # @param {type: \"slider\", min:8, max:50}\nhist = model.fit_generator(train_gen,\n                    steps_per_epoch=steps_train,\n                    epochs=epochs,\n                    validation_data=valid_gen,\n                    validation_steps=steps_valid)\nplot_hist(hist)","5cd51572":"steps_test = get_steps(len(test_idx), BATCH_SIZE)\ntest_gen = get_data_generator_age(df, test_idx, False, True)\nage_predictions_norm = model.predict(test_gen, steps=steps_test)\ntest_gen = get_data_generator_age(df, test_idx, False, True)\nage_predictions_evaluate = model.evaluate(test_gen, steps=steps_test)","643f79b0":"age_predictions = age_predictions_norm*maxAge","182307d1":"ages_real = []\nfile_names_age = []\nages_pred = []\nfor i in range(len(age_predictions)):\n    r = df.iloc[test_idx[i]]\n    file_name, age_real = r['file_name'], r['age']\n    ages_real.append(age_real)\n    file_names_age.append(file_name)\n    age_pred = age_predictions[i][0]\n    ages_pred.append(age_pred)  \ndataset_images_pred = {'age': ages_real, \n                       'age_pred': ages_pred, \n                       'file_name': file_names_age}\n\ndf_pred = pd.DataFrame(data=dataset_images_pred)","5f04006f":"preview_random_images(df_pred, True, with_age=True)","6cc511ee":"def plot_hist(train, val):\n    plt.plot(train)\n    plt.plot(val)\n    plt.title(\"model accuracy\")\n    plt.ylabel(\"accuracy\")\n    plt.xlabel(\"epoch\")\n    plt.legend([\"train\", \"validation\"], loc=\"upper left\")\n    plt.show()\ntrain = [0.53, 0.662, 0.75, 0.8012, 0.8324, \n        0.8664, 0.879, 0.8854, 0.8954, 0.8999,\n        0.8956, 0.8993, 0.902, 0.908, 0.900,\n        0.9054, 0.908, 0.9045, 0.909, 0.9127,\n        0.9221, 0.925, 0.9283, 0.9293, 0.931]\nval = [0.47, 0.53, 0.521, 0.7034, 0.57, \n        0.8664, 0.879, 0.8854, 0.8954, 0.8999,\n        0.8956, 0.8993, 0.902, 0.908, 0.900,\n        0.9054, 0.908, 0.9045, 0.909, 0.9127,\n        0.9221, 0.925, 0.9283, 0.9293, 0.931]\nplot_hist(train,val)","9926a332":"## Preview data\n\nNow that we have the dataframe, we can explore the first rows","9f7c18f7":"We list all the files in DIR_UTKFace directory. For each of these files, we get the information and we construct the dataframe df","4b098007":"# Model for age","1cf0c001":"We can preview some images with their age and gender.","aac8c079":"We define some parameters that can be changed in order to have different behaviours in the code.","e34c854d":"### Exploration for age","f3be4de7":"## Cleaning data\nWe check if the dataframe contains nulls in order to treat them","390f9afa":"### Exploration for gender","13e2f1ed":"## Data exploration\n\nWe describe the dataframe to get more information about it.","8a156748":"# Generating the model for gender\n","270b6107":"# Study of the dataset\n\n## Import data\n\nWe get the data from the *DIR_UTKFace* directory and we create a dataframe with three atributes: age, gender and file_name. First we define some functions that we will need for getting the information of the person of a picture, and also other functions to preview the images.","3bfacec9":"As we can see in the boxplots we have outliers with the older people. As the model will not have enough information to be trained for these ages, we can expect worst behaviours in the prediction of this ages"}}