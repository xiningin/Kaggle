{"cell_type":{"0f369825":"code","b2cf029a":"code","77ffa22a":"code","736e23be":"code","fac529e0":"code","c3c97aa2":"code","d02c0924":"code","869c8f83":"code","219e41a1":"code","718811e2":"code","4c696462":"code","27c31e67":"code","8d07a612":"code","2579b1d4":"code","ffc4f82c":"code","1a20354b":"markdown","b0cb320f":"markdown","038058ba":"markdown","42309fb9":"markdown","6c6e9fb0":"markdown","2711d360":"markdown","6710ea99":"markdown","a43d382c":"markdown"},"source":{"0f369825":"from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nprint(os.listdir(\"..\/input\/jigsaw-toxic-comment-classification-challenge\"))\nprint(os.listdir(\"..\/input\/nlpword2vecembeddingspretrained\"))\nprint(os.listdir(\"..\/input\/fasttext-wikinews\"))\nprint(os.listdir(\"..\/input\/fasttext-crawl-300d-2m\"))\nprint(os.listdir(\"..\/input\/glove-global-vectors-for-word-representation\"))\n\n\n#print(os.listdir(\"..\/input\/jigsaw-unintended-bias-in-toxicity-classification\"))\n\n# Any results you write to the current directory are saved as output.","b2cf029a":"import datetime\nimport os, codecs\nimport pandas as pd\nimport numpy as np\nimport pkg_resources\nimport seaborn as sns\nimport time\nimport scipy.stats as stats\n\nfrom sklearn import metrics\nfrom sklearn import model_selection\n\n# Loads word2vec.bin embeddings.\nimport gensim\nfrom gensim.models import Word2Vec\nfrom gensim.utils import simple_preprocess\nfrom gensim.models.keyedvectors import KeyedVectors\n\n# Loads Fastext Embeddings\nfrom tqdm import tqdm\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.utils import to_categorical\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Embedding\nfrom keras.layers import Input\nfrom keras.layers import Conv1D\nfrom keras.layers import MaxPooling1D\nfrom keras.layers import Flatten\nfrom keras.layers import Dropout\nfrom keras.layers import Dense\nfrom keras.optimizers import RMSprop\nfrom keras.models import Model\nfrom keras.models import load_model","77ffa22a":"train = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/train.csv')\n\n# Make sure all comment_text values are strings\ntrain['comment_text'] = train['comment_text'].astype(str) \n\n# List all identities\nidentity_columns = [\n    'male', 'female', 'homosexual_gay_or_lesbian', 'christian', 'jewish',\n    'muslim', 'black', 'white', 'psychiatric_or_mental_illness']\n\n# Convert taget and identity columns to booleans\ndef convert_to_bool(df, col_name):\n    df[col_name] = np.where(df[col_name] >= 0.5, True, False)\n    \ndef convert_dataframe_to_bool(df):\n    bool_df = df.copy()\n    for col in ['target'] + identity_columns:\n        convert_to_bool(bool_df, col)\n    return bool_df\n\ntrain = convert_dataframe_to_bool(train)\n#train.head(5)","736e23be":"# #####################\n# ADDS WEIGHTS TO LABELS\n# #####################\n# x_train = preprocess(train['comment_text'])\n# weights = np.ones((len(x_train),)) \/ 4\n# # Subgroup\n# weights += (train[identity_columns].fillna(0).values>=0.5).sum(axis=1).astype(bool).astype(np.int) \/ 4\n# # Background Positive, Subgroup Negative\n# weights += (( (train['target'].values>=0.5).astype(bool).astype(np.int) +\n#    (train[identity_columns].fillna(0).values<0.5).sum(axis=1).astype(bool).astype(np.int) ) > 1 ).astype(bool).astype(np.int) \/ 4\n# # Background Negative, Subgroup Positive\n# weights += (( (train['target'].values<0.5).astype(bool).astype(np.int) +\n#    (train[identity_columns].fillna(0).values>=0.5).sum(axis=1).astype(bool).astype(np.int) ) > 1 ).astype(bool).astype(np.int) \/ 4\n# loss_weight = 1.0 \/ weights.mean()\n\n# y_train = np.vstack([(train['target'].values>=0.5).astype(np.int),weights]).T\n# y_aux_train = train[['target', 'severe_toxicity', 'obscene', 'identity_attack', 'insult', 'threat']].values\n# #####################\n# END OF WEIGHTS TO LABELS\n# #####################","fac529e0":"train_df, validate_df = model_selection.train_test_split(train, test_size=0.2)\nprint('%d train comments, %d validate comments' % (len(train_df), len(validate_df)))\ntrain_df.head()","c3c97aa2":"# #####################\n# Data Augmentation and Weights\n# #####################\n# Expands data set in the following ways:\n#     NOTE: comment out to use one at a time.\n\n# #######################################\n# 1.) Adds previous competitions data to the training set. (done - tested)\n# #######################################\n# train_old = pd.read_csv('..\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv')\n\n# # Obtains columns\n# id_col = train_old['id'].tolist()\n# toxic_col = train_old['toxic'].tolist()\n# comment_col = train_old['comment_text'].tolist()\n\n# # creates frame (values already bool)\n# old_lists = list(zip(id_col, toxic_col, comment_col))\n# old_frame = pd.DataFrame(old_lists, columns =['id', 'target', 'comment_text']) \n# # old_frame.head(10)\n\n# # appends frame\n# train_df = train_df.append(old_frame, ignore_index=True, sort=False)\n# train_df.fillna(0, inplace=True)\n# #train.tail(10)\n\n# #######################################\n# end\n# #######################################\n\n# #######################################\n# 2.) Removes subgroup positives. (tested)\n# #######################################\n# toxic = train_df.loc[train_df['target'] >= 0.5]\n\n# # obtains toxic subgroups\n# sub_pos_df = pd.DataFrame()\n# for ident in identity_columns:\n#     sub_pos_df = pd.concat([ sub_pos_df, toxic.loc[toxic[ident] >= 0.5] ], axis=0)\n    \n# # removes from train_df based on columns.\n# train_df = train_df.drop(sub_pos_df.index.values)\n\n# # # Sanity check\n# print('# Toxic Identities')\n# toxic = train_df[train_df['target'] >= 0.5]\n# for ident in identity_columns:\n#     print(ident, toxic.loc[toxic[ident] >= 0.5].shape[0])\n# #######################################\n# end\n# #######################################\n\n# #######################################\n# 3.) Balance subgroup negatives via oversampling. (test)\n# #######################################\nnon_toxic = train_df[train_df['target'] < 0.5]\n\n# Finds the maximum subgroup negative group.\nmax_val = 0\nfor ident in identity_columns:\n    val = non_toxic.loc[non_toxic[ident] >= 0.5].shape[0]\n    if val >= max_val:\n        max_val = val\nprint('balancing subgroup negatives to max value: ', max_val)\nprint('starting... ', train_df.shape[0])\n\n# Over samples data and appends data.\na = 0\nfor ident in identity_columns:\n    # Creates local, deep copy for replacing.\n    ident_df = non_toxic[non_toxic[ident] >= 0.5].copy(deep=True)\n    val = max_val - ident_df.shape[0]\n    ident_oversampled = ident_df.sample(n=val, replace=True)\n    train_df = pd.concat([train_df, ident_oversampled], axis=0)\n    a = a + ident_oversampled.shape[0]\n    print('size   : ', ident_df.shape[0])\n    print('adding : ', ident_oversampled.shape[0])\n    print('total  : ', train_df.shape[0], '\\n')\n\n# Shuffles data\ntrain_df = train_df.sample(frac=1)\n    \n# Sanity check\nprint('added... ', a)\nprint('final... ', train_df.shape[0])\nnon_toxic = train_df[train_df['target'] < 0.5]\nfor ident in identity_columns:\n    print(ident, non_toxic.loc[non_toxic[ident] >= 0.5].shape[0])\n# #######################################\n# end\n# #######################################\n\n# #######################################\n# 4.)  Oversample subgroup negatives (extreme). (todo)\n# #######################################\n# non_toxic = train_df[train_df['target'] < 0.5]\n\n# # Over samples data and appends data.\n# max_val = 100000\n# a = 0\n# for ident in identity_columns:\n#     # Creates local, deep copy for replacing.\n#     ident_df = non_toxic[non_toxic[ident] >= 0.5].copy(deep=True)\n#     val = max_val - ident_df.shape[0]\n#     ident_oversampled = ident_df.sample(n=val, replace=True)\n#     train_df = pd.concat([train_df, ident_oversampled], axis=0)\n#     a = a + ident_oversampled.shape[0]\n#     print('size   : ', ident_df.shape[0])\n#     print('adding : ', ident_oversampled.shape[0])\n#     print('total  : ', train_df.shape[0], '\\n')\n\n# # Shuffles data\n# train_df = train_df.sample(frac=1)\n    \n# # Sanity check\n# print('added... ', a)\n# print('final... ', train_df.shape[0])\n# non_toxic = train_df[train_df['target'] < 0.5]\n# for ident in identity_columns:\n#     print(ident, non_toxic.loc[non_toxic[ident] >= 0.5].shape[0])\n\n# #######################################\n# end\n# #######################################\n\n# #######################################\n# 5.) Over sample subgroup positives (fine-tuned). \n# #######################################\n\n\n# #######################################\n# end\n# #######################################","d02c0924":"# Augment: Remove Subgroup Pos.\n# subgroup pos = identity > 0.5 && target > 0.5\n# = full data w\/o subgroups appended to subgroups non toxic.\n\n# obtains subgroup negatives.\n# s_neg = pd.DataFrame(data=None, columns=train_df.columns, index=train_df.index)\n# non_toxic = complete.loc[complete['target'] < 0.5]\n# for ident in identity_columns:\n#     s_neg = s_neg.append(train_df.loc[non_toxic[ident >= 0.5]])\n\n# # obtain background pos\/neg\n# background = pd.DataFrame(data=None, columns=train_df.columns, index=train_df.index)\n# for ident in identity_columns:\n#     background = background.append(train_df.loc[train_df[ident < .5]])\n","869c8f83":"MAX_NUM_WORDS = 10000\nTOXICITY_COLUMN = 'target'\nTEXT_COLUMN = 'comment_text'\n\n# Create a text tokenizer.\ntokenizer = Tokenizer(num_words=MAX_NUM_WORDS)\ntokenizer.fit_on_texts(train_df[TEXT_COLUMN])\n\n# All comments must be truncated or padded to be the same length.\nMAX_SEQUENCE_LENGTH = 250\ndef pad_text(texts, tokenizer):\n    return pad_sequences(tokenizer.texts_to_sequences(texts), maxlen=MAX_SEQUENCE_LENGTH)","219e41a1":"# IMPORTANT # ###########################\n# Ensure that the desired embedding is loaded and that the correct dimensions are set.\n# Different embedding files require various methods to be loaded. Ensure correct loading is uncommented.\n\nEMBEDDINGS_PATH = '..\/input\/fasttext-wikinews\/wiki-news-300d-1M.vec'\n#EMBEDDINGS_PATH = '..\/input\/fasttext-crawl-300d-2m\/crawl-300d-2M.vec'\n#EMBEDDINGS_PATH = '..\/input\/nlpword2vecembeddingspretrained\/glove.6B.300d.txt'\n#EMBEDDINGS_PATH = '..\/input\/nlpword2vecembeddingspretrained\/glove.6B.200d.txt'\n#EMBEDDINGS_PATH = '..\/input\/glove-global-vectors-for-word-representation\/glove.twitter.27B.200d.txt'\nEMBEDDINGS_DIMENSION = 300\n# #######################################\n\nDROPOUT_RATE = 0.3\nLEARNING_RATE = 0.00005\nNUM_EPOCHS = 10\nBATCH_SIZE = 128\n\ndef train_model(train_df, validate_df, tokenizer):\n    # Prepare data\n    train_text = pad_text(train_df[TEXT_COLUMN], tokenizer)\n    train_labels = to_categorical(train_df[TOXICITY_COLUMN])\n    validate_text = pad_text(validate_df[TEXT_COLUMN], tokenizer)\n    validate_labels = to_categorical(validate_df[TOXICITY_COLUMN])\n    \n# #####################\n# LOAD EMBEDDINGS\n# #####################\n# Commet out undesired embeddings. Only one embedding may be loaded at a time (with this model).\n    embeddings_index = {}\n    embedding_matrix = np.zeros((len(tokenizer.word_index) + 1,\n                                 EMBEDDINGS_DIMENSION))\n\n# FASTEXT EMBEDDINGS ############################ (.vec)\n    print('Loading word embeddings.')\n    f = codecs.open(EMBEDDINGS_PATH, encoding='utf-8')\n    for line in tqdm(f):\n        values = line.rstrip().rsplit(' ')\n        word = values[0]\n        coefs = np.asarray(values[1:], dtype='float32')\n        embeddings_index[word] = coefs\n    f.close()\n    print('Preparing embedding matrix.')\n    words_not_found = []\n    for word, i in tokenizer.word_index.items():\n        embedding_vector = embeddings_index.get(word)\n        if (embedding_vector is not None) and len(embedding_vector) > 0:\n            # words not found in embedding index will be all-zeros.\n            embedding_matrix[i] = embedding_vector\n        else:\n            words_not_found.append(word)\n    print('number of null word embeddings: %d' % np.sum(np.sum(embedding_matrix, axis=1) == 0))\n# #################################################\n\n# GLOVE EMBEDDINGS # ############################## (.txt)\n#     print('Loading Glove embeddings.')\n#     with open(EMBEDDINGS_PATH) as f:\n#         for line in f:\n#             values = line.split()\n#             word = values[0]\n#             coefs = np.asarray(values[1:], dtype='float32')\n#             embeddings_index[word] = coefs\n#     print('Preparing embedding matrix.')\n#     num_words_in_embedding = 0\n#     for word, i in tokenizer.word_index.items():\n#         embedding_vector = embeddings_index.get(word)\n#         if embedding_vector is not None:\n#             num_words_in_embedding += 1\n#             # words not found in embedding index will be all-zeros.\n#             embedding_matrix[i] = embedding_vector\n# # ################################################\n\n# WORD2VEC EMBEDDINGS ############################ (.bin)\n#     word_vectors = KeyedVectors.load_word2vec_format(EMBEDDINGS_PATH, binary=True)\n#     num_words_in_embedding = 0\n#     for word, i in tokenizer.word_index.items():\n#         if i >= MAX_NUM_WORDS:\n#             continue\n#         try:\n#             embedding_vector = word_vectors[word]\n#             embedding_matrix[i] = embedding_vector\n#         except KeyError:\n#             embedding_matrix[i] = np.zeros((EMBEDDINGS_DIMENSION))\n# ############################################### \n# #####################\n# END OF LOAD EMBEDDINGS\n# #####################    \n    \n\n    # Create model layers.\n    def get_convolutional_neural_net_layers():\n        \"\"\"Returns (input_layer, output_layer)\"\"\"\n        sequence_input = Input(shape=(MAX_SEQUENCE_LENGTH,), dtype='int32')\n                               \n        embedding_layer_static = Embedding(len(tokenizer.word_index) + 1,\n                                    EMBEDDINGS_DIMENSION,\n                                    weights=[embedding_matrix],\n                                    input_length=MAX_SEQUENCE_LENGTH,\n                                    trainable=False)   \n                               \n#         embedding_layer_non_static = Embedding(len(tokenizer.word_index) + 1,\n#                                          EMBEDDINGS_DIMENSION,\n#                                          weights=[embedding_matrix],\n#                                          input_length=MAX_SEQUENCE_LENGTH,\n#                                          trainable=True)\n\n        # Hybrid: Nonstatic and Static\n#         xs = embedding_layer_static(sequence_input)\n#         xns = embedding_layer_non_static(sequence_input)\n#         xs= Conv1D(128, 2, activation='relu', padding='same')(xs)\n#         xns = Conv1D(128, 2, activation='relu', padding='same')(xns)   \n#         xs = MaxPooling1D(40, padding='same')(xs)\n#         xns = MaxPooling1D(40, padding='same')(xns)\n#         xs = Conv1D(128, 3, activation='relu', padding='same')(xs)\n#         xns = Conv1D(128, 3, activation='relu', padding='same')(xns)\n#         xs = MaxPooling1D(40, padding='same')(xs)\n#         xns = MaxPooling1D(40, padding='same')(xns)\n#         xs = Conv1D(128, 4, activation='relu', padding='same')(xs)\n#         xns = Conv1D(128, 4, activation='relu', padding='same')(xns)\n#         xs = MaxPooling1D(40, padding='same')(xs)\n#         xns = MaxPooling1D(40, padding='same')(xns)\n#         xs = Conv1D(128, 5, activation='relu', padding='same')(xs)\n#         xns = Conv1D(128, 5, activation='relu', padding='same')(xns)\n#         x = Maximum()([xs,xns])\n#         x = MaxPooling1D(40, padding='same')(x)\n#         x = Flatten()(x)\n#         x = Dropout(DROPOUT_RATE)(x)\n#         x = Dense(128, activation='relu')(x)\n#         preds = Dense(2, activation='softmax')(x)\n        # End of Hybrid: Static and Non Static\n\n        # Static\n        xs = embedding_layer_static(sequence_input)\n        xs = Conv1D(128, 2, activation='relu', padding='same')(xs)   \n        xs = MaxPooling1D(40, padding='same')(xs)\n        xs = Conv1D(128, 3, activation='relu', padding='same')(xs)\n        xs = MaxPooling1D(40, padding='same')(xs)\n        xs = Conv1D(128, 4, activation='relu', padding='same')(xs)\n        xs = MaxPooling1D(40, padding='same')(xs)\n        xs = Conv1D(128, 5, activation='relu', padding='same')(xs)\n        xs = MaxPooling1D(40, padding='same')(xs)\n        x = Flatten()(xs)\n        x = Dropout(DROPOUT_RATE)(x)\n        x = Dense(128, activation='relu')(x)\n        preds = Dense(2, activation='softmax')(x)\n        # End of Static\n        \n        # Non Static\n#         xns = embedding_layer_non_static(sequence_input)\n#         xns = Conv1D(128, 2, activation='relu', padding='same')(xns)   \n#         xns = MaxPooling1D(40, padding='same')(xns)\n#         xns = Conv1D(128, 3, activation='relu', padding='same')(xns)\n#         xns = MaxPooling1D(40, padding='same')(xns)\n#         xns = Conv1D(128, 4, activation='relu', padding='same')(xns)\n#         xns = MaxPooling1D(40, padding='same')(xns)\n#         xns = Conv1D(128, 5, activation='relu', padding='same')(xns)\n#         xns = MaxPooling1D(40, padding='same')(xns)\n#         x = Flatten()(xns)\n#         x = Dropout(DROPOUT_RATE)(x)\n#         x = Dense(128, activation='relu')(x)\n#         preds = Dense(2, activation='softmax')(x)\n        # End of Nonstatic\n        \n        return sequence_input, preds\n\n    # Compile model.\n    print('compiling model')\n    input_layer, output_layer = get_convolutional_neural_net_layers()\n    model = Model(input_layer, output_layer)\n    model.compile(loss='categorical_crossentropy',\n                  optimizer=RMSprop(lr=LEARNING_RATE), \n                  metrics=['acc'])\n\n    # Train model.\n    print('training model')\n    model.fit(train_text,\n              train_labels,\n              batch_size=BATCH_SIZE,\n              epochs=NUM_EPOCHS,\n              validation_data=(validate_text, validate_labels),\n              verbose=2)\n\n    return model\n\nmodel = train_model(train_df, validate_df, tokenizer)","718811e2":"MODEL_NAME = 'my_model'\nvalidate_df[MODEL_NAME] = model.predict(pad_text(validate_df[TEXT_COLUMN], tokenizer))[:, 1]","4c696462":"validate_df.head()","27c31e67":"SUBGROUP_AUC = 'subgroup_auc'\nBPSN_AUC = 'bpsn_auc'  # stands for background positive, subgroup negative\nBNSP_AUC = 'bnsp_auc'  # stands for background negative, subgroup positive\n\ndef compute_auc(y_true, y_pred):\n    try:\n        return metrics.roc_auc_score(y_true, y_pred)\n    except ValueError:\n        return np.nan\n\ndef compute_subgroup_auc(df, subgroup, label, model_name):\n    subgroup_examples = df[df[subgroup]]\n    return compute_auc(subgroup_examples[label], subgroup_examples[model_name])\n\ndef compute_bpsn_auc(df, subgroup, label, model_name):\n    \"\"\"Computes the AUC of the within-subgroup negative examples and the background positive examples.\"\"\"\n    subgroup_negative_examples = df[df[subgroup] & ~df[label]]\n    non_subgroup_positive_examples = df[~df[subgroup] & df[label]]\n    examples = subgroup_negative_examples.append(non_subgroup_positive_examples)\n    return compute_auc(examples[label], examples[model_name])\n\ndef compute_bnsp_auc(df, subgroup, label, model_name):\n    \"\"\"Computes the AUC of the within-subgroup positive examples and the background negative examples.\"\"\"\n    subgroup_positive_examples = df[df[subgroup] & df[label]]\n    non_subgroup_negative_examples = df[~df[subgroup] & ~df[label]]\n    examples = subgroup_positive_examples.append(non_subgroup_negative_examples)\n    return compute_auc(examples[label], examples[model_name])\n\ndef compute_bias_metrics_for_model(dataset,\n                                   subgroups,\n                                   model,\n                                   label_col,\n                                   include_asegs=False):\n    \"\"\"Computes per-subgroup metrics for all subgroups and one model.\"\"\"\n    records = []\n    for subgroup in subgroups:\n        record = {\n            'subgroup': subgroup,\n            'subgroup_size': len(dataset[dataset[subgroup]])\n        }\n        record[SUBGROUP_AUC] = compute_subgroup_auc(dataset, subgroup, label_col, model)\n        record[BPSN_AUC] = compute_bpsn_auc(dataset, subgroup, label_col, model)\n        record[BNSP_AUC] = compute_bnsp_auc(dataset, subgroup, label_col, model)\n        records.append(record)\n    return pd.DataFrame(records).sort_values('subgroup_auc', ascending=True)\n\nbias_metrics_df = compute_bias_metrics_for_model(validate_df, identity_columns, MODEL_NAME, TOXICITY_COLUMN)\nbias_metrics_df","8d07a612":"def calculate_overall_auc(df, model_name):\n    true_labels = df[TOXICITY_COLUMN]\n    predicted_labels = df[model_name]\n    return metrics.roc_auc_score(true_labels, predicted_labels)\n\ndef power_mean(series, p):\n    total = sum(np.power(series, p))\n    return np.power(total \/ len(series), 1 \/ p)\n\ndef get_final_metric(bias_df, overall_auc, POWER=-5, OVERALL_MODEL_WEIGHT=0.25):\n    bias_score = np.average([\n        power_mean(bias_df[SUBGROUP_AUC], POWER),\n        power_mean(bias_df[BPSN_AUC], POWER),\n        power_mean(bias_df[BNSP_AUC], POWER)\n    ])\n    return (OVERALL_MODEL_WEIGHT * overall_auc) + ((1 - OVERALL_MODEL_WEIGHT) * bias_score)\n    \nget_final_metric(bias_metrics_df, calculate_overall_auc(validate_df, MODEL_NAME))","2579b1d4":"test = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/test.csv')\nsubmission = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/sample_submission.csv', index_col='id')","ffc4f82c":"submission['prediction'] = model.predict(pad_text(test[TEXT_COLUMN], tokenizer))[:, 1]\nsubmission.to_csv('submission.csv')","1a20354b":"## Generate model predictions on the validation set","b0cb320f":"## Define bias metrics, then evaluate our new model for bias using the validation set predictions","038058ba":"## Calculate the final score","42309fb9":"## Load and pre-process the data set","6c6e9fb0":"## Define and train a Convolutional Neural Net for classifying toxic comments","2711d360":"## Create a text tokenizer","6710ea99":"## Split the data into 80% train and 20% validate sets","a43d382c":"## Prediction on Test data"}}