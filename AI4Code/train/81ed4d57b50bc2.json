{"cell_type":{"6244a8f7":"code","8b6b49e1":"code","483c4dcf":"code","70f6753f":"code","81334d1b":"code","8cd0e0f0":"code","334fb470":"code","1a62d213":"code","037daacb":"code","43c10603":"code","572e9282":"code","82916729":"code","7a7590c9":"code","4f29771e":"code","12732ce7":"code","d5470783":"code","5e3a91ef":"code","c60fbc4c":"code","48e0fe4b":"code","c180a232":"code","7063d264":"code","70bc6ed1":"code","3e199977":"code","dbbf0a6f":"code","619c533a":"code","1251f7b3":"code","46f5e0ec":"code","1e6553ff":"code","10da2a51":"code","6013d058":"code","99bf2708":"code","983c8695":"code","fee39e3c":"code","9f3715da":"code","e1f10603":"code","fab3f156":"code","e0aee7ee":"code","68cf98d7":"code","7d417543":"code","212ef114":"code","86bd30cd":"code","1a14c955":"markdown","73828040":"markdown","360a46d3":"markdown","fe83b3fb":"markdown","efa156a1":"markdown","e767b398":"markdown","317324d2":"markdown","fdef61ad":"markdown","5a74a728":"markdown","98be1c56":"markdown","dfc5a7ff":"markdown","39059467":"markdown","b6242799":"markdown","4101c6e2":"markdown","835929ee":"markdown","b5753be8":"markdown","769eb95d":"markdown","82108179":"markdown"},"source":{"6244a8f7":"import pandas as pd\nimport statistics as stats\nimport os\ngames = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/games.csv')\nplayers = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/players.csv')\nplays = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv')\nweek1 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week1.csv')\nweek2 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week2.csv')\nweek3 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week3.csv')\nweek4 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week4.csv')\nweek5 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week5.csv')\nweek6 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week6.csv')\nweek7 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week7.csv')\nweek8 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week8.csv')\nweek9 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week9.csv')\nweek10 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week10.csv')\nweek11 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week11.csv')\nweek12 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week12.csv')\nweek13 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week13.csv')\nweek14 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week14.csv')\nweek15 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week15.csv')\nweek16 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week16.csv')\nweek17 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week17.csv')\ntargeted_receiver = pd.read_csv('..\/input\/nfl-big-data-bowl-2021-bonus\/targetedReceiver.csv')\n\n# TODO: add coverage data?\n\nframes = [week1, week2, week3, week4, week5, week6, week7, week8, week9, week10, week11, week12, week13, week14, week15, week16, week17]\ntracking_original = pd.concat(frames, ignore_index = True)\ntracking_original","8b6b49e1":"tracking_df = tracking_original.copy()\ntracking_df.loc[tracking_df['playDirection'] == 'left', 'x'] = 120 - tracking_df['x']\ntracking_df.loc[tracking_df['playDirection'] == 'left', 'y'] = 53.33 - tracking_df['y']\ntracking_df.loc[(tracking_df['playDirection'] == 'left') & (tracking_original['o'] <= 180), 'o'] = tracking_df['o'] + 180\ntracking_df.loc[(tracking_df['playDirection'] == 'left') & (tracking_original['o'] > 180), 'o'] = tracking_df['o'] - 180\ntracking_df.loc[(tracking_df['playDirection'] == 'left') & (tracking_original['dir'] <= 180), 'dir'] = tracking_df['dir'] + 180\ntracking_df.loc[(tracking_df['playDirection'] == 'left') & (tracking_original['dir'] > 180), 'dir'] = tracking_df['dir'] - 180","483c4dcf":"def filter_tracking_frames_by_event(df, event_types):\n    \"\"\"\n    General function for filtering tracking data by event type\n    :param df: Pandas dataframe containing tracking data by frame\n    :param event_types: List of event types to filter for\n    :return: Pandas Dataframe containing frames corresponding to event_types\n    \"\"\"\n    frame_indices = df['event'].isin(event_types)\n    return df[frame_indices]\n\n\ndef drop_fumble_plays(tracking_df):\n    \"\"\"\n    Drop plays where the ball is fumbled and recovered by the defense.\n    :param tracking_df: Dataframe containing tracking player-frame data (used to identify plays with 'fumble_defense_recovered' events)\n    :return: Returns dataframe of tracking player-frame data filtered to not consider plays where the fumble is recovered by the defense. \n    \"\"\"\n    fumble_df = filter_tracking_frames_by_event(tracking_df, ['fumble_defense_recovered'])\n    \n    # Sanity check\n    display(fumble_df.sort_values(['gameId', 'playId']))\n    \n    # Find playIds in which a player-frame with a fumble occurs and don't consider it\n    play_ids = pd.Series(fumble_df['playId']).unique()\n    display(play_ids)\n    game_ids = pd.Series(fumble_df['gameId']).unique()\n    display(game_ids)\n    frame_indices = ~(plays['playId'].isin(play_ids) & plays['gameId'].isin(game_ids))\n    \n    return plays[frame_indices]\n\n# Drop player-frames corresponding to plays in which a fumble recovered by defense occurs\nplays = drop_fumble_plays(tracking_df)\ndisplay(plays)","70f6753f":"# Add week 1 coverages\n# plays = pd.merge(plays, coverages_week1, how='left')\n\n# Add targeted receiver for each play\nplays = pd.merge(plays, targeted_receiver, how='left')\nplays = pd.merge(plays, players, how='left', left_on='targetNflId', right_on='nflId')\nplays.iloc[0]","81334d1b":"plays_expanded = plays[['gameId', 'playId', 'down', 'yardsToGo', 'penaltyCodes', 'penaltyJerseyNumbers', 'passResult', 'offensePlayResult', 'playResult', 'epa', 'nflId', 'displayName']]\nplays_expanded","8cd0e0f0":"# Filter tracking data for the exact moments at which the ball is released for each play\nrelease_df = filter_tracking_frames_by_event(tracking_df, ['pass_forward'])\nrelease_df","334fb470":"# TODO: Scott write some comments here about how this works\nplays_expanded = pd.merge(plays_expanded, release_df, how='left', on = ['gameId', 'playId', 'nflId'], suffixes=('', '_y'))\nplays_expanded.drop(plays_expanded.filter(regex='_y$').columns.tolist(),axis=1, inplace=True)\nplays_expanded.drop(columns = ['time', 'dis', 'event'], inplace = True)\nplays_expanded.rename(columns = {'team': 'team_o', 'nflId': 'nflId_o', 'displayName': 'displayName_o', 'x': 'x_o', 'y': 'y_o', 's': 'speed_o', 'a': 'acceleration_o', 'o': 'orientation_o', 'dir': 'dir_o', 'jerseyNumber': 'jerseyNumber_o', 'position': 'position_o'}, inplace = True)\nplays_expanded.columns","1a62d213":"def football_filter(df):\n    \"\"\"\n    Function for filtering ball release frame data for only ball tracking data\n    :param df: Pandas dataframe containing tracking data by frame filtered for ball release event\n    :return: Pandas Dataframe containing frames corresponding to ball tracking data\n    \"\"\"\n    df = df[df.displayName.isin(['Football'])]\n    return df\n\nfootball_df = football_filter(release_df)\n\n# TODO: Scott write some comments here about how this works\nplays_expanded = pd.merge(plays_expanded, football_df, how='left', on=['gameId', 'playId'], suffixes=('', '_y'))\nplays_expanded.drop(plays_expanded.filter(regex='_y$').columns.tolist(),axis=1, inplace=True)\nplays_expanded.drop(columns = ['team', 'time', 'dis', 'event', 'o', 'dir', 'nflId', 'jerseyNumber', 'position', 'displayName'], inplace=True)\nplays_expanded.rename(columns = {'x': 'x_b', 'y': 'y_b', 's': 'speed_b', 'a': 'acceleration_b'}, inplace=True)\nplays_expanded.iloc[0]","037daacb":"temp_df = []\nimport math\n\ndef find_DTR_at_release():\n    \"\"\"\n    Calculates DTR (Distance to Targeted Receiver) for each defender at the time of release\n    :return: Returns dataframe of defenders and their distances to the targeted receiver at time of release\n    \"\"\"\n    # Filter for defensive positions only\n    def_pos = ['DL', 'FS', 'DB', 'DE', 'OLB', 'SS', 'CB', 'ILB', 'S', 'MLB', 'NT', 'LB']\n    \n    temp_df = pd.merge(plays_expanded, release_df, how='right', on = ['gameId', 'playId'], suffixes=('', '_y'))\n    temp_df.drop(plays_expanded.filter(regex='_y$').columns.tolist(),axis=1, inplace=True)\n    temp_df = temp_df[temp_df.position.isin(def_pos)]\n    \n    # Calculate DTR for each defender\n    temp_df['distance_from_receiver'] = (((temp_df['x']-temp_df['x_o'])**2)+((temp_df['y']-temp_df['y_o'])**2))**(1\/2)\n    \n    # Create new dataframe consisting only of relevant defender distance data\n    DTR_release_df = pd.DataFrame()\n    DTR_release_df['defender_id'] = temp_df['nflId']\n    DTR_release_df['defender_name'] = temp_df['displayName']\n    DTR_release_df['defender_dist_to_target_receiver'] = temp_df['distance_from_receiver']\n    DTR_release_df['gameId'] = temp_df['gameId']\n    DTR_release_df['playId'] = temp_df['playId']\n    DTR_release_df['frameId'] = temp_df['frameId']\n    \n    return temp_df, DTR_release_df\n    \ntemp_df, DTR_release_df = find_DTR_at_release()\ndisplay(DTR_release_df)","43c10603":"# DEBUG: Display DTR (ascending) per ball release frame for all defenders in chronological order\ndisplay(DTR_release_df.sort_values(['gameId', 'playId', 'frameId', 'defender_dist_to_target_receiver']))\n\n# Keep only the closest defender by DTR per ball release frame (at moment of release)\nclosest_DTR_release_df = DTR_release_df.sort_values(['gameId', 'playId', 'frameId', 'defender_dist_to_target_receiver']).drop_duplicates(subset=['gameId', 'playId', 'frameId'], keep='first')\nclosest_DTR_release_df = closest_DTR_release_df.reset_index(drop=True)\ndisplay(closest_DTR_release_df)","572e9282":"# TODO: Write comments explaining this?\nplays_expanded = pd.merge(plays_expanded, closest_DTR_release_df, how='left', on=['gameId', 'playId', 'frameId'])\nplays_expanded = pd.merge(plays_expanded, release_df, how='left', right_on=['gameId', 'playId', 'nflId'], left_on=['gameId', 'playId', 'defender_id'], suffixes=('', '_y'))\n\nplays_expanded.drop(plays_expanded.filter(regex='_y$').columns.tolist(),axis=1, inplace=True)\nplays_expanded.drop(columns = ['time', 'dis', 'event', 'nflId'], inplace=True)\n\nplays_expanded.rename(columns = {'team': 'team_d', 'displayName': 'displayName_d', 'x': 'x_d', 'y': 'y_d', 's': 'speed_d', 'a': 'acceleration_d', 'o': 'orientation_d', 'dir': 'dir_d', 'jerseyNumber': 'jerseyNumber_d', 'position': 'position_d'}, inplace = True)\nplays_expanded.iloc[0]","82916729":"# DEBUG FUNCTION TO HELP VIEW ALL INFO FOR A FRAME \nimport numpy as np\n\ndef display_info(df, game_id, play_id, frame_id):\n    frame_indices = np.where((df['gameId'] == game_id) & (df['playId'] == play_id) & (df['frameId'] == frame_id))\n    display(df.loc[frame_indices])\n\ndisplay_info(tracking_df, 2018102110, 1710, 1)","7a7590c9":"def drop_duplicate_arrive_incomplete(df):\n    \"\"\"\n    Handles the case where 'pass_arrived' and 'pass_outcome_incomplete' occur on the same play (we only want to assess the game state at the point of 'pass arrived').\n    Sort by player, then gameId, then playId to group any events occurring to the same player on the same play and then event ('pass_arrived' takes precedence over 'pass_outcome_incomplete')\n    If there are duplicate rows (considering only the same player in the same game in the same play), then it must be 'pass_arrived' and 'pass_outcome_incomplete' events, and we remove the second one since it will be 'pass_outcome_incomplete'.\n    :param df: Dataframe containing tracking player-frame data filtered for only player-frames with 'pass_arrived' or 'pass_outcome_incomplete' events.\n    :return: Returns dataframe of tracking player-frame data filtered to only consider player-frames 'pass_arrived' events if a 'pass_outcome_incomplete' event occurs on the same play. \n    \"\"\"\n    # Sanity checks\n    display(df.sort_values(['nflId', 'gameId','playId']))\n    # Displays all the duplicated rows\n    display(df[df.duplicated(['gameId', 'playId', 'nflId'], keep=False)].sort_values(['nflId', 'gameId','playId']))\n    \n    # Remove duplicates after sorting\n    fixed_df = df.sort_values(['nflId', 'gameId','playId','event']).drop_duplicates(subset=['gameId', 'playId', 'nflId'], keep='first')\n    \n    # Sanity check, we should see both types at beginning and end hopefully\n    display(fixed_df.sort_values('event'))\n    \n    return fixed_df\n\n\n# Filter all tracking data frames for 'pass_arrived' events and 'pass_outcome_incomplete' events\npass_arrived_incomplete_df = filter_tracking_frames_by_event(tracking_df, ['pass_arrived', 'pass_outcome_incomplete'])\n\n# Sanity check (don't delete)\ndisplay(pass_arrived_incomplete_df)\n# print(set(pass_arrived_incomplete_df['event']))\n\n# For any rows\/frames which have a 'pass_arrived' event and a 'pass_outcome_incomplete' event occur on the same play, drop the frame in which the 'pass_outcome_incomplete' event occurs\npass_arrived_df = drop_duplicate_arrive_incomplete(pass_arrived_incomplete_df)\n\n# Convert all 'pass_outcome_incomplete' events to 'pass_arrived' events\npass_arrived_df.loc[pass_arrived_df.event == 'pass_outcome_incomplete', 'event'] = 'pass_arrived'\n\n# Sanity check (don't delete)\ndisplay(pass_arrived_df)\n#print(set(fixed_df['event']))","4f29771e":"def find_DTR_at_arrival(plays_expanded, df):\n    \"\"\"\n    Calculates DTR (Distance to Targeted Receiver) for each defender at the time of arrival\n    :return: Returns dataframe of defenders and their distances to the targeted receiver at time of arrival\n    \"\"\"\n    temp_df = []\n    \n    def_pos = ['DL', 'FS', 'DB', 'DE', 'OLB', 'SS', 'CB', 'ILB', 'S', 'MLB', 'NT', 'LB']\n    \n    temp_df = pd.merge(plays_expanded, df, how='right', on = ['gameId', 'playId'], suffixes=('', '_y'))\n    temp_df.drop(plays_expanded.filter(regex='_y$').columns.tolist(),axis=1, inplace=True)\n    temp_df = temp_df[temp_df.position.isin(def_pos)]\n    \n    temp_df['distance_from_receiver'] = (((temp_df['x'] - temp_df['x_o']) ** 2)\n                                        + ((temp_df['y'] - temp_df['y_o']) ** 2)\n                                        ) ** (1\/2)\n    \n    DTR_arrival_df = pd.DataFrame()\n    DTR_arrival_df['defender_id'] = temp_df['nflId']\n    DTR_arrival_df['defender_name'] = temp_df['displayName']\n    DTR_arrival_df['defender_dist_to_target_receiver'] = temp_df['distance_from_receiver']\n    DTR_arrival_df['gameId'] = temp_df['gameId']\n    DTR_arrival_df['playId'] = temp_df['playId']\n    DTR_arrival_df['frameId'] = temp_df['frameId']\n    return temp_df, DTR_arrival_df\n\ntemp_df, DTR_arrival_df = find_DTR_at_arrival(plays_expanded, pass_arrived_df)\ndisplay(temp_df)\ndisplay(DTR_arrival_df)","12732ce7":"# Get DTR (ascending) for all defenders at the moment of ball arrival for each play in chronological order\nsorted_DTR_arrival_df = DTR_arrival_df.sort_values(['gameId', 'playId', 'frameId', 'defender_dist_to_target_receiver'])\ndisplay(sorted_DTR_arrival_df)\n\n# DEBUG: Display DTR (ascending) for all defenders at the moment of release for each play in chronological order\ndisplay(DTR_release_df.sort_values(['gameId', 'playId', 'frameId', 'defender_dist_to_target_receiver']))\n\n# Get the closest defender by DTR at the moment of release for each play in chronological order\nsorted_closest_DTR_release_df = closest_DTR_release_df.sort_values(['gameId', 'playId', 'frameId', 'defender_dist_to_target_receiver'])\ndisplay(sorted_closest_DTR_release_df)\n\n# Append the list of closest defenders by DTR at the moment of release for each play to the list of all defenders at the moment of arrival for each play\n# Then remove any duplicates (both of them) in order to ensure we get the closest three defenders at arrival time who were NOT the closest defender at release time\nsorted_closest_defenders_arrival_with_exclusion_df = sorted_DTR_arrival_df.append(sorted_closest_DTR_release_df).drop_duplicates(subset=['gameId', 'playId', 'frameId', 'defender_id'],keep=False)\ndisplay(sorted_closest_defenders_arrival_with_exclusion_df)\n\ndef get_defender_rank(x):\n    x['defender_rank'] = np.arange(1,len(x)+1)\n    return x\n\n# Group defenders by each play\ngrouped_df = sorted_closest_defenders_arrival_with_exclusion_df.groupby(['gameId', 'playId', 'frameId']) #as_index=False\ngrouped_df_apply = grouped_df.apply(get_defender_rank).drop_duplicates(keep='last').groupby(['gameId', 'playId', 'frameId'])\n#display(grouped_df_apply[(grouped_df_apply['gameId'] == 2018123015) & (grouped_df_apply['playId'] == 4104)])\n# DEBUG: View groups representing each frame formed by players sorted in ascending order of DTR\n# count = 0\n# for key, item in grouped_df_apply:\n# #     print(key)\n# #     print(item)\n#     if key == (2018123015, 4104, 52.0):\n#         print(key)\n#         print(item)\n#     if count > 5: break\n#     else: count += 1\n\n\n# TODO: CHECK CORRECTNESS\n# Keep only the three closest defenders by DTR for each play at the moment of arrival\ntop_three_defenders_arrival_with_exclusion = grouped_df_apply.head(3)\ndisplay(top_three_defenders_arrival_with_exclusion)","d5470783":"top_three_defenders_arrival_with_exclusion[top_three_defenders_arrival_with_exclusion['playId'] == 4104]","5e3a91ef":"len(top_three_defenders_arrival_with_exclusion)","c60fbc4c":"# def arrival_filter(df):\n#     arrival = df['event'] == 'pass_arrived'\n#     return df[arrival]\n\n# arrival_df = arrival_filter(pass_arrived_df)\n\nplays_expanded = pd.merge(plays_expanded, pass_arrived_df, how='left', left_on = ['gameId', 'playId', 'nflId_o'], right_on = ['gameId', 'playId', 'nflId'],suffixes=('', '_y'))\nplays_expanded.drop(plays_expanded.filter(regex='_y$').columns.tolist(),axis=1, inplace=True)\nplays_expanded.drop(columns = ['time', 'dis', 'event', 'team', 'displayName', 'jerseyNumber', 'position', 'nflId'], inplace = True)\nplays_expanded.rename(columns = {'x': 'x_o_a', 'y': 'y_o_a', 's': 'speed_o_a', 'a': 'acceleration_o_a', 'o': 'orientation_o_a', 'dir': 'dir_o_a'}, inplace = True)\nplays_expanded.iloc[0]","48e0fe4b":"def football_arrival_filter(df):\n    football_arrival_df = df[df.displayName.isin(['Football'])]\n    return football_arrival_df\n\nfootball_arrival_df = football_filter(pass_arrived_df)\n\nplays_expanded = pd.merge(plays_expanded, football_arrival_df, how='left', on = ['gameId', 'playId'], suffixes=('', '_y'))\nplays_expanded.drop(plays_expanded.filter(regex='_y$').columns.tolist(),axis=1, inplace=True)\nplays_expanded.drop(columns = ['team', 'time', 'dis', 'event', 'o', 'dir', 'nflId', 'jerseyNumber', 'position', 'displayName'], inplace = True)\nplays_expanded.rename(columns = {'x': 'x_b_a', 'y': 'y_b_a', 's': 'speed_b_a', 'a': 'acceleration_b_a'}, inplace = True)\nplays_expanded.loc[0]","c180a232":"plays_expanded = plays_expanded[~plays_expanded['displayName_o'].isnull()]\n# drop plays with multiple penalties\nupdate = plays_expanded['penaltyJerseyNumbers'].str.split(' ', expand = True)\nplays_expanded['penaltyJerseyNumbers_update'] = update[1]\nplays_expanded = plays_expanded[~plays_expanded['penaltyJerseyNumbers_update'].str.contains(';', na = False)]\nplays_expanded","7063d264":"plays_expanded = plays_expanded[plays_expanded['penaltyCodes'].isnull() | (plays_expanded['penaltyCodes'].isin(['DPI'])) & ((plays_expanded['penaltyJerseyNumbers_update'].astype('float')) == plays_expanded['jerseyNumber_d'])]\nplays_expanded","70bc6ed1":"display(top_three_defenders_arrival_with_exclusion)","3e199977":"temp_df = top_three_defenders_arrival_with_exclusion.pivot_table('defender_dist_to_target_receiver', ['gameId', 'playId'], 'defender_rank')","dbbf0a6f":"temp_df.reset_index(drop = False, inplace = True)\ntemp_df.reindex(['gameId', 'playId', 'defender_1', 'defender_2', 'defender_3'], axis = 1)\ntemp_df","619c533a":"plays_expanded = pd.merge(plays_expanded, temp_df, how='left', on = ['gameId', 'playId'], suffixes=('', '_y'))\nplays_expanded.drop(plays_expanded.filter(regex='_y$').columns.tolist(),axis=1, inplace=True)\nplays_expanded.rename(columns = {1: 'dist_defender_1_a', 2: 'dist_defender_2_a', 3: 'dist_defender_3_a'}, inplace = True)\nplays_expanded","1251f7b3":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score,mean_squared_error\nimport seaborn as sns","46f5e0ec":"# drop_columns = ['']\n# x = plays_expanded.drop(['epa'], axis=1)\nx = plays_expanded[['down', 'yardsToGo','x_o', 'y_o', 'speed_o', 'acceleration_o', 'orientation_o', 'dir_o', 'x_b','y_b','speed_b','acceleration_b','defender_dist_to_target_receiver','x_d','y_d','speed_d','acceleration_d','orientation_d','dir_d','x_o_a','y_o_a','speed_o_a','acceleration_o_a','orientation_o_a', 'dir_o_a','x_b_a','y_b_a','speed_b_a','acceleration_b_a','dist_defender_1_a','dist_defender_2_a','dist_defender_3_a', 'playResult']]\nx = x.dropna()\ndisplay(x)\nprint(x.describe())\ny = x.playResult.values.ravel()\ndisplay(y)\n\nx = x.drop(['playResult'], axis=1)\ndisplay(x)","1e6553ff":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.15, random_state=42)","10da2a51":"model = RandomForestRegressor()\nmodel.fit(x_train, y_train)","6013d058":"y_pred = model.predict(x_test)\ny_pred","99bf2708":"mse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nrmse","983c8695":"import matplotlib.pyplot as plt\n\nplt.scatter(y_test, y_pred)\nplt.show()","fee39e3c":"from sklearn.metrics import r2_score\nscore = r2_score(y_test, y_pred)\nscore","9f3715da":"expected_yards = model.predict(x)\nmse = mean_squared_error(y, expected_yards)\nrmse = np.sqrt(mse)\nrmse","e1f10603":"defenders_df = plays_expanded[['defender_name', 'down', 'yardsToGo','x_o', 'y_o', 'speed_o', 'acceleration_o', 'orientation_o', 'dir_o', 'x_b','y_b','speed_b','acceleration_b','defender_dist_to_target_receiver','x_d','y_d','speed_d','acceleration_d','orientation_d','dir_d','x_o_a','y_o_a','speed_o_a','acceleration_o_a','orientation_o_a', 'dir_o_a','x_b_a','y_b_a','speed_b_a','acceleration_b_a','dist_defender_1_a','dist_defender_2_a','dist_defender_3_a', 'playResult']]\ndefenders_df = defenders_df.dropna()\n# display(defenders_df)\n\nyards_pred = list(expected_yards)\ndefenders_df['yards_pred'] = yards_pred\n# display(defenders_df)\n\ndefenders_df = defenders_df.rename(columns={'playResult':'yards_actual'})\ndefenders_df = defenders_df[['defender_name','yards_actual', 'yards_pred']]\n# display(defenders_df)\n\ngrouped_defenders = defenders_df.groupby('defender_name', sort=False).filter(lambda x: len(x) > 50)\ngrouped_defenders = grouped_defenders.groupby('defender_name', sort=False)\n\n# for key, item in grouped_defenders:\n#     print(grouped_defenders.get_group(key), \"\\n\\n\")\n    \nbest_defenders = grouped_defenders.aggregate(np.mean)\nbest_defenders['yards_saved'] = best_defenders.yards_pred - best_defenders.yards_actual\nbest_defenders = best_defenders.sort_values(by=['yards_saved'], ascending=False)\ndisplay(best_defenders)\n\nworst_defenders = best_defenders.sort_values(['yards_saved'], ascending=True)\ndisplay(worst_defenders)","fab3f156":"import xgboost as xgb\nfrom sklearn.model_selection import cross_val_score, KFold\nfrom sklearn.metrics import mean_squared_error\nimport matplotlib.pyplot as plt \nxgbr = xgb.XGBRegressor(verbosity=0)\nxgbr.fit(x_train, y_train)\nkfold = KFold(n_splits=10, shuffle=True)\nkf_cv_scores = cross_val_score(xgbr, x_train, y_train, cv=kfold )\nprint(\"K-fold CV average score: %.2f\" % kf_cv_scores.mean())\ny_pred = xgbr.predict(x_test)\nmse = mean_squared_error(y_test, y_pred)\nprint(\"RMSE: %.2f\" % (mse**(1\/2.0))) ","e0aee7ee":"score = r2_score(y_test, y_pred)\nscore","68cf98d7":"expected_yards = xgbr.predict(x)\nmse = mean_squared_error(y, expected_yards)\nrmse = np.sqrt(mse)\nrmse","7d417543":"plt.scatter(y_test, y_pred)\nplt.show()","212ef114":"from xgboost import plot_importance\nfrom matplotlib import pyplot\nplot_importance(xgbr)\npyplot.show()","86bd30cd":"defenders_df = plays_expanded[['defender_name', 'down', 'yardsToGo','x_o', 'y_o', 'speed_o', 'acceleration_o', 'orientation_o', 'dir_o', 'x_b','y_b','speed_b','acceleration_b','defender_dist_to_target_receiver','x_d','y_d','speed_d','acceleration_d','orientation_d','dir_d','x_o_a','y_o_a','speed_o_a','acceleration_o_a','orientation_o_a', 'dir_o_a','x_b_a','y_b_a','speed_b_a','acceleration_b_a','dist_defender_1_a','dist_defender_2_a','dist_defender_3_a', 'playResult']]\ndefenders_df = defenders_df.dropna()\n# display(defenders_df)\n\nyards_pred = list(expected_yards)\ndefenders_df['yards_pred'] = yards_pred\n# display(defenders_df)\n\ndefenders_df = defenders_df.rename(columns={'playResult':'yards_actual'})\ndefenders_df = defenders_df[['defender_name','yards_actual', 'yards_pred']]\n# display(defenders_df)\n\ngrouped_defenders = defenders_df.groupby('defender_name', sort=False).filter(lambda x: len(x) > 50)\ngrouped_defenders = grouped_defenders.groupby('defender_name', sort=False)\n\n# for key, item in grouped_defenders:\n#     print(grouped_defenders.get_group(key), \"\\n\\n\")\n    \nbest_defenders = grouped_defenders.aggregate(np.mean)\nbest_defenders['yards_saved'] = best_defenders.yards_pred - best_defenders.yards_actual\nbest_defenders = best_defenders.sort_values(by=['yards_saved'], ascending=False)\ndisplay(best_defenders)\n\nworst_defenders = best_defenders.sort_values(['yards_saved'], ascending=True)\ndisplay(worst_defenders)","1a14c955":"# Merge ball tracking data with plays_expanded:","73828040":"# Adding receiver and ball at arrival","360a46d3":"# Begin constructing plays_expanded, our pre-processed training data:","fe83b3fb":"# Filter tracking data for only the frames where ball is released:","efa156a1":"# XGBOOST","e767b398":"# drop all penalties expcept for DPI against player being graded","317324d2":"# Add week 1 coverages and targeted receiver for each play:","fdef61ad":"# Calculate DTR (Distance to Targeted Receiver) at time of release for each defender:","5a74a728":"# Calculate DTR for defenders on ball arrival (as opposed to release):","98be1c56":"# Load data and combine tracking data:","dfc5a7ff":"We want to get the closest three defenders to the targeted receiver at the moment of ball arrival who were NOT the closest defender to the targeted receiver at the moment of ball release.\n\nTODO: Explain why this is the case some more.","39059467":"# Drop Fumbles Recovered by the Defense","b6242799":"# Merge receiver tracking data with plays_expanded:","4101c6e2":"# Reorient tracking data to all face the same way:","835929ee":"# Merge closest defender DTR at release data into plays_expanded:","b5753be8":"# Pre-processing the data\n\nEvery 'pass_outcome_complete' play should result in a 'pass_arrived' event, but some 'pass_outcome_incomplete' plays result in a 'pass_arrived' event never being triggered because the ball was never passed close enough to the receiver. As a result, we want to consider the frame at which 'pass_outcome_incomplete' is triggered as the 'pass_arrived' event frame. For plays where 'pass_arrived' and 'pass_outcome_incomplete' are both triggered (maybe at different frames), we only want to consider the 'pass_arrived' event.\n\nTODO: Explain more on why we only consider 'pass_arrived' as the important event.\n        List the three cases out (pass complete, pass incomplete and arrived, pass incomplete but not arrived)","769eb95d":"# Random Forest","82108179":"# Drop plays with no intended receiver and multiple penalties"}}