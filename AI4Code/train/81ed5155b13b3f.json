{"cell_type":{"2a579201":"code","d07085c6":"code","6316d34a":"code","dedbfedf":"code","d0e18ed5":"code","f89e972a":"code","0ea87c1c":"code","1c48b1c8":"code","55227632":"code","cde0710b":"code","f10b1fb4":"code","e9980afe":"code","af9b3018":"code","c9315288":"code","24a7099a":"code","7750975e":"code","50851966":"code","0382482e":"markdown","0ae4d40c":"markdown","e7002780":"markdown","5ca6be61":"markdown","8950bca5":"markdown","c6b2f6ca":"markdown","917fc226":"markdown","49ac15e7":"markdown"},"source":{"2a579201":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\nfiles = [file for file in os.listdir('..\/input\/pandastasks\/Pandas-Data-Science-Tasks-master\/SalesAnalysis\/Sales_Data\/')]\n\n#concatenate all files into a single CSV file\nall_months_data = pd.DataFrame()\nfor file in files:\n    df=pd.read_csv(\"..\/input\/pandastasks\/Pandas-Data-Science-Tasks-master\/SalesAnalysis\/Sales_Data\/\"+file)\n    all_months_data=pd.concat([all_months_data,df])\nall_months_data.to_csv('all_data', index= False)","d07085c6":"#Read in updated dataframe\nall_data=pd.read_csv('all_data')\nall_data.head()","6316d34a":"#finds nan values across dataframe\nnan_df = all_data[all_data.isna().any(axis=1)] # []Returns whether any element is True, over an axis 1\nnan_df.head()\n\n#drops all nan values in dataframe\nall_data=all_data.dropna(how='all')\nall_data.head()\n\n## filters out wrong values 'Or'in 'Order Date' to avoid previous error\nall_data = all_data[all_data['Order Date'].str[0:2]!='Or']\n\n# Convert columns to the correct type\nall_data['Quantity Ordered'] = pd.to_numeric(all_data['Quantity Ordered']) #Make int\nall_data['Price Each']= pd.to_numeric(all_data['Price Each']) #Make float\n\n","dedbfedf":"# Add Month Column\nall_data['Month']= all_data['Order Date'].str[0:2] #it access to the first two character of the string\nall_data['Month']=all_data['Month'].astype('int32')\nall_data.head()","d0e18ed5":"# add a sales column\nall_data['Sales']=all_data['Quantity Ordered']*all_data['Price Each']\nall_data.head()","f89e972a":"#add a city column\ndef get_city(address):\n    return address.split(',')[1]\n\ndef get_state (address):\n    return address.split(',')[2].split(' ')[1]\nall_data['City'] = all_data['Purchase Address'].apply(lambda x:get_city(x) + ' '+ get_state(x)) #it apply an aribtrary function to a specific column\/row\nall_data.head()","0ea87c1c":"#groups by month and sums sales\nresults= all_data.groupby('Month').sum()\nresults","1c48b1c8":"import matplotlib.pyplot as plt #lets plot the results\nmonths =range(1,13)\nplt.bar(months, results['Sales'])\nplt.xticks(months)\nplt.ylabel('Sales in USD ($)')\nplt.xlabel('Month number')\nplt.show()\n\n","55227632":"results= all_data.groupby('City').sum()\nresults","cde0710b":"import matplotlib.pyplot as plt #lets plot the results\n\ncities = [city for city, df in all_data.groupby('City')]  #it returns cities in the same order that they are grouped, otherwise there will appear  \n\nplt.bar(cities, results['Sales'])\nplt.xticks(cities, rotation='vertical', size=8)\nplt.ylabel('Sales in USD ($)')\nplt.xlabel('City name')\nplt.show()","f10b1fb4":"all_data['Order Date'] = pd.to_datetime(all_data['Order Date'])","e9980afe":"all_data['Hour']= all_data['Order Date'].dt.hour #pandas return Hour from Datetime column\nall_data['Minute']=all_data['Order Date'].dt.minute\nall_data.head()","af9b3018":"hours = [hour for hour, df in all_data.groupby('Hour')]\n\nplt.plot(hours, all_data.groupby(['Hour']).count())\nplt.xticks(hours)\nplt.xlabel ('Hour')\nplt.ylabel ('Number of Orders')\nplt.grid()\nplt.show()","c9315288":"# new dataframe only including duplicated order IDs\ndf=all_data[all_data['Order ID'].duplicated(keep=False)]\n\n#new column concatenates products with same order ID\ndf['Grouped']=df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))\n\n#drop out those duplicated occurrences of the same order\ndf=df[['Order ID', 'Grouped']].drop_duplicates()\ndf.head()","24a7099a":"#finding the most common combinations of two products\nfrom itertools import combinations\nfrom collections import Counter\n\ncount = Counter()\n\nfor row in df['Grouped']:\n    row_list = row.split(',')\n    count.update(Counter(combinations(row_list, 2))) #combination of 2 products\n    \ncount.most_common(10)\n    \n","7750975e":"#sum up the quantity ordered based on grouping by the product\nproduct_group = all_data.groupby('Product')\nquantity_ordered= product_group.sum()['Quantity Ordered']\n\nproducts = [product for product, df in product_group] \nplt.bar(products, quantity_ordered)\nplt.ylabel('Quantity Ordered')\nplt.xlabel('Product')\nplt.xticks(products, rotation='vertical', size=8)\nplt.show()","50851966":"#lets overlap the prices of the products in order to figure out if there is any correlation with the most sold products\nprices = all_data.groupby('Product').mean()['Price Each']\nprint(prices)\n\n#plot another data in x axis \nfig, ax1 = plt.subplots()\n\nax2 = ax1.twinx()\nax1.bar(products, quantity_ordered, color='g')\nax2.plot(products, prices, 'b-')\n\nax1.set_xlabel('Product Name')\nax1.set_ylabel('Quantity Ordered', color='g')\nax2.set_ylabel('Price($)', color='b')\nax1.set_xticklabels(products, rotation='vertical', size=8)\n\nplt.show()","0382482e":"## Q1: What was the best month for sales? How much was earned that month?","0ae4d40c":"## Q3: What time should we display advertisements to maximize likelihood of customers buying products?","e7002780":"### Clean up the data","5ca6be61":"## Q4: What products are more often sold together?","8950bca5":"### Augment data with additional columns","c6b2f6ca":"## General Insights\n1. The best month for sales is December (probably related with Christmas) with 4.6 million dollars and he second one is April (Eastern) with 3.36 million dollars.\n2. San Francisco had the highest number of sales (8.2 million dollars). It is considered one of the American cities with the highest income so it is expected that people there are more likely to buy.\n3. The number of orders increases between 11-12H and at 19H. These hours match with meal times (lunch and dinner), so those are good hours to show ads.\n4. It could be interesting to show suggestions to the customers based on the combination of the products most commonly sold together: \n    'iPhone', 'Lightning Charging Cable' (1005),\n    'Google Phone', 'USB-C Charging Cable' (987),\n    'iPhone', 'Wired Headphones'(447),\n    'Google Phone', 'Wired Headphones'(414),\n    'Vareebadd Phone', 'USB-C Charging Cable' (361),\n5. The AAA and AA batteries are the most sold products (around 30000 and 27000 orders). This could be related with the lowest prices, consequently they are more affordable. Despite of Mackbook Laptop is one of the most used products worldwide, it has only more than 5000 orders. It can be related with a higher price and also with the fact that it is a product that is changed much less frequently than batteries.  ","917fc226":"## Q2:What city had the highest number of sales? ","49ac15e7":"## Q5: What product sold the most? Why do you think it sold the most? "}}