{"cell_type":{"d929fa18":"code","07ffabec":"code","747f526d":"code","d348ba2e":"code","8ed7cf67":"code","3489b013":"code","0b2ede03":"code","05578945":"code","0be84edc":"code","c8c9102b":"code","03b7bf41":"code","c77fe13c":"code","56a8c874":"code","0a1225cb":"code","5c603b5c":"code","c0b7a42b":"code","8d203e89":"code","7733e38d":"code","13132007":"code","2295bc0d":"code","6f40e7cb":"code","d9a32e89":"code","95844036":"code","71d99eb6":"code","d8fe7866":"code","349dae02":"code","09ccb771":"code","34227a73":"code","edc18992":"code","74fa619f":"code","82e10ae8":"code","d67428c3":"code","2a33dd3c":"code","846991b7":"code","8b4b8d73":"code","2c64522f":"code","c39a9d8b":"code","0d2608b1":"code","44b6c14b":"code","420ea42e":"code","5eda3490":"code","17f8022c":"code","f21f5e4d":"code","509e0dbb":"code","97b045a9":"code","a2d7d53a":"code","cc46e9bc":"code","ba453e57":"code","b71253b4":"code","6e607723":"code","c0408314":"code","2c1ff60b":"code","b66732aa":"code","6379c855":"code","538993a4":"code","9691cb89":"code","a70e1c87":"code","c6d7e12c":"code","e52fb5c6":"code","aeaa0f6a":"code","f9d8aaad":"markdown","be0b2aa0":"markdown","d3618608":"markdown","6aefee36":"markdown"},"source":{"d929fa18":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","07ffabec":"!unzip \/kaggle\/input\/sberbank-russian-housing-market\/train.csv.zip","747f526d":"dataset = pd.read_csv(r'.\/train.csv')\npd.set_option('display.max_columns', 300)\ndataset.head()","d348ba2e":"dataset.shape","8ed7cf67":"pd.set_option('display.max_rows', 300)\ndataset.isnull().sum()","3489b013":"dataset.dtypes","0b2ede03":"dataset['timestamp'] = pd.to_datetime(dataset['timestamp'])\ndataset['year'] = dataset['timestamp'].dt.year","05578945":"dataset.drop(['id','timestamp','sub_area'],axis=1,inplace=True)","0be84edc":"numerical_feature = [feature for feature in dataset.columns if dataset[feature].dtypes != \"O\"]\nnumerical_feature\n","c8c9102b":"for feature in numerical_feature:\n    print(\"{} has null values :   {}\".format(feature,dataset[feature].isnull().sum()))","03b7bf41":"categorical_feature = [feature for feature in dataset.columns if dataset[feature].dtypes == \"O\"]\ncategorical_feature","c77fe13c":"for feature in categorical_feature:\n    print(\"{} has categorical features :   {}\".format(feature,len(dataset[feature].unique())))","56a8c874":"for feature in categorical_feature:\n    print(\"{} has null values :   {}\".format(feature,dataset[feature].isnull().sum()))","0a1225cb":"continuous_feature = [feature for feature in numerical_feature if len(dataset[feature].unique()) > 40]\ncontinuous_feature","5c603b5c":"discrete_feature = [feature for feature in numerical_feature if len(dataset[feature].unique()) <= 40]\ndiscrete_feature","c0b7a42b":"for feature in discrete_feature:\n    print(\"{} feature has null values : {}\".format(feature,dataset[feature].isnull().sum()))","8d203e89":"for feature in categorical_feature:\n    sns.barplot(x = dataset[feature],y = dataset['price_doc'])\n    plt.xlabel(feature)\n    plt.ylabel('price_doc')\n    plt.show()\n","7733e38d":"for feature in discrete_feature:\n    sns.barplot(x = dataset[feature],y = dataset['price_doc'])\n    plt.xlabel(feature)\n    plt.ylabel('price_doc')\n    plt.show()\n","13132007":"for feature in continuous_feature:\n    dataset[feature].hist(bins=30)\n    plt.xlabel(feature)\n    plt.ylabel('Count')\n    plt.show()","2295bc0d":"missing_column = [feature for feature in dataset.columns if dataset[feature].isnull().sum() > 0 ]\nmissing_column","6f40e7cb":"for feature in missing_column:\n    sns.boxplot(dataset[feature])\n    plt.xlabel(feature)\n    plt.show()","d9a32e89":"dataset['build_year']","95844036":"missing_column_numerical = [feature for feature in numerical_feature if dataset[feature].isnull().sum() > 0 ]\nmissing_column_numerical","71d99eb6":"missing_column_discrete = [feature for feature in numerical_feature if dataset[feature].isnull().sum() > 0 ]\nmissing_column_discrete","d8fe7866":"for feature in missing_column_numerical:\n    value = dataset[feature].median()\n    dataset[feature].fillna(value,inplace=True)","349dae02":"for feature in missing_column_discrete:\n    value = dataset[feature].mode()\n    dataset[feature].fillna(value,inplace=True)","09ccb771":"dataset.isnull().sum()","34227a73":"for feature in continuous_feature:\n    if 0 in dataset[feature].unique():\n        pass\n    else:\n        dataset[feature] = np.log(dataset[feature])\n        dataset[feature].hist(bins=30)\n        plt.xlabel(feature)\n        plt.ylabel('Count')\n        plt.show()","edc18992":"dataset.describe()","74fa619f":"import matplotlib.pyplot as plt \nplt.rcParams[\"figure.figsize\"] = (20,3)\nsns.heatmap(dataset.corr(),annot= True,cmap= 'coolwarm')","82e10ae8":"data = dataset.drop(\"price_doc\",axis=1)","d67428c3":"def correlation(dataset,threshold):\n    col_corr = set()\n    corr_matrix = data.corr()\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if (corr_matrix.iloc[i,j] >= threshold):\n                colname = corr_matrix.columns[i]\n                col_corr.add(colname)\n    return col_corr","2a33dd3c":"correlation_features = correlation(dataset,0.8)\ncorrelation_features","846991b7":"dataset.drop(correlation_features,axis=1,inplace=True)","8b4b8d73":"dataset.head()","2c64522f":"dataset.shape","c39a9d8b":"categorical_feature","0d2608b1":"feat = dataset[categorical_feature]\nfeat","44b6c14b":"for feature in categorical_feature:\n    if feature == 'ecology':\n        pass\n    else:\n        dataset[feature] = pd.get_dummies(dataset[feature],drop_first=True)","420ea42e":"dataset","5eda3490":"dataset.isnull().sum()","17f8022c":"cor = dataset.corr()\ncor","f21f5e4d":"a = abs(cor['price_doc'])\nresult = abs(a[a>0.5])\nresult","509e0dbb":"imp_feature = []\nfor i in range(0,len(result)):\n  if result.iloc[i] > 0.1:\n    print(result[i])\n    imp_feature.append(result[i])","97b045a9":"len(imp_feature)","a2d7d53a":"data = dataset.copy()","cc46e9bc":"X = data.drop('price_doc',axis=1)\nY = data['price_doc']","ba453e57":"X.drop('ecology',inplace=True,axis=1)","b71253b4":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.3,random_state=50)","6e607723":"from xgboost import XGBRegressor\nfrom xgboost import plot_importance\n\n# fit model to training data\nxgb_model = XGBRegressor(n_estimators=100)\nxgb_model.fit(X_train, Y_train)\n\nprint(\"Feature Importances : \", xgb_model.feature_importances_)\n\n# plot feature importance\nplt.rcParams[\"figure.figsize\"] = (20,50)\nplot_importance(xgb_model)\nplt.show()","c0408314":"sorted_idx = np.argsort(xgb_model.feature_importances_)[::-1]","2c1ff60b":"temp = []\nfor index in sorted_idx:\n    print([X_train.columns[index], xgb_model.feature_importances_[index]])\n    temp.append([X_train.columns[index], xgb_model.feature_importances_[index]])","b66732aa":"temp","6379c855":"not_imp_feature = []\nfor i in range(50,len(temp)):\n  not_imp_feature.append(temp[i][0])","538993a4":"len(not_imp_feature)","9691cb89":"X_train.drop(not_imp_feature,axis=1,inplace=True)","a70e1c87":"X_test.drop(not_imp_feature,axis=1,inplace=True)","c6d7e12c":"X_test.shape","e52fb5c6":"X_train.to_csv('train_data.csv')\nX_test.to_csv('test_data.csv')","aeaa0f6a":"Y_train.to_csv('ytrain_data.csv')\nY_test.to_csv('ytest_data.csv')\n","f9d8aaad":"## Reading data","be0b2aa0":"# Feature Engineering","d3618608":"# Descriptive Statistics","6aefee36":"##  Univariate\/Bivariate Analysis"}}