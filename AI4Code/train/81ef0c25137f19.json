{"cell_type":{"aa0fe06f":"code","3af08dc0":"code","dd6cc582":"code","08261cc5":"code","b98d4052":"code","60ffa62a":"code","5124bbc1":"code","e1035850":"code","d2e58e9a":"code","a0120d8d":"code","9627f185":"code","383fbb44":"code","900c98c0":"code","21295a5f":"markdown"},"source":{"aa0fe06f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3af08dc0":"import gc \nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom wordcloud import WordCloud\nfrom scipy.stats import norm\nimport matplotlib.font_manager as fm\nfrom matplotlib.offsetbox import TextArea, DrawingArea, OffsetImage, AnnotationBbox\nimport matplotlib.image as mpimg\n\n# To Avoid unnecessary warnings\nimport warnings\nwarnings.filterwarnings('ignore')","dd6cc582":"df = pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\",skiprows=1)\ndf\n","08261cc5":"def plot_chart_important(X,Y,Xlabel,Ylabel,header,dis,theam_color):\n    #plot chart\n    plt.rcParams['figure.dpi'] = 1000\n    fig = plt.figure(figsize=(3, 6), facecolor='#f5f4ed')\n    gs = fig.add_gridspec(3, 1)\n    gs.update(wspace=0.4, hspace=0.1)\n\n    background_color = \"#f5f4ed\"\n    #sns.set_palette(['#ffd36b','#787774','#787774','#787774','#787774','#787774','#787774','#787774','#787774','#787774','#787774']*2)\n    #color =['#ffd36b','#787774','#787774','#787774','#787774','#787774','#787774','#787774','#787774','#787774','#787774','#787774']\n    ax0 = fig.add_subplot(gs[0, 0])\n    for s in [\"right\", \"top\"]:\n        ax0.spines[s].set_visible(False)\n    ax0.set_facecolor(background_color) #set \u0e2a\u0e35\u0e43\u0e19\u0e01\u0e23\u0e32\u0e1f\n    ax0_sns = sns.barplot(ax=ax0, y=X, x=Y ,zorder=2,linewidth=0.5,saturation=1, alpha=1 ,orient='h' ,palette = theam_color, edgecolor=\".1\") # x and y must be list\n    ax0_sns.set_xlabel(Xlabel,fontsize=4, weight='bold')  # set x name label\n    ax0_sns.set_ylabel(Ylabel,fontsize=4, weight='bold')  # set y name label\n    ax0_sns.tick_params(labelsize=3, width=0.5, length=1.5)  #set  name variable\n    ax0_sns.grid(which='major', axis='x', zorder=0, color='#dedcdc', linewidth=0.4)  #set grid on garph\n    ax0_sns.grid(which='major', axis='y', zorder=0, color='#dedcdc', linewidth=0.4)  #set grid on garph\n    ax0.text(0, -2.5, header, fontsize=6, ha='left', va='top', weight='bold',bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.5)) #\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e43\u0e19\u0e01\u0e25\u0e48\u0e2d\u0e07\u0e27\u0e07\u0e01\u0e25\u0e21\n    #ax0.text(0, -2, 'test position', fontsize=3, ha='left', va='top') #\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e43\u0e15\u0e49\u0e01\u0e25\u0e48\u0e2d\u0e07\u0e27\u0e07\u0e01\u0e25\u0e21\n    #plt.title('highest level of formal education',fontsize=4, weight='bold',ha='right',loc='center')\n    # data label\n    for p in ax0.patches:\n        value= f'{p.get_width():.0f} | {(p.get_width()\/sum(Y)):,.1%}'\n        # f'{p.get_width():.0f} | {(p.get_width()\/country.shape[0]):,.1%}'\n        x = p.get_x() + p.get_width() + dis\n        y = p.get_y() + p.get_height() \/ 2 \n        ax0.text(x, y, value, ha='left', va='center', fontsize=3,           \n                bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\n    ax0.set_anchor('C')  \n    plt.show()\n    return()","b98d4052":"courses_cols = [col for col in df.columns \n            if \"On which platforms have you begun or completed data science courses? (Select all that apply) \" in col]\n#print(ide_cols)\nmapper = [col.split('-')[-1].lstrip() for col in courses_cols]\n#print(mapper)\nmapping_dict = dict(zip(courses_cols,mapper))\n#print(mapping_dict)\ndf_courses = df[courses_cols].rename(columns=mapping_dict)\ndf_courses\n#print(df_courses)\ndict_courses= {}\nfor i in df_courses.columns :\n  dict_courses[i] = int(df_courses[[i]].value_counts())\ndict_courses\nlists = sorted(dict_courses.items(), key=lambda x: x[1], reverse=True)\nx, y = zip(*lists) # unpack a list of pairs into two tuples\nx =list(x)\ny =list(y)\nprint\n\"--------------------------------------------------------------------------------------------------------------------------------------\"\n\nname_variable = x[0:4]+[\"Other\"]\nvalue = y[0:4]+[sum(y[4:])]\n\n# # colors\ncolors = ['#304D63', '#B2E7E8','#ED8975', \n          '#F2D096', '#8FB9AA','#E6E6E6',\n          '#4747fc','#fc8d8d','#8dfcc3','#8de8fc','#f475ff','#ff7595']\n\n# # explosion\nexplode = (0.0, 0.0,0.0, 0.0, 0.1)\n\n#size grap    \nplt.figure(figsize=[12,15],facecolor='#f5f4ed')    \n#Pie Chart\nwedgeprops = {'width':0.3, 'edgecolor':'black', 'linewidth':3}\nplt.pie(value, colors=colors,wedgeprops=wedgeprops,explode=explode,\n        autopct='%0.1f%%', pctdistance=1.1)\n\n#draw circle\ncentre_circle = plt.Circle((0, 0), 0.70, fc='#f5f4ed')\nfig = plt.gcf()\n#fig = plt.figure(facecolor='#f5f4ed')\nplt.legend(name_variable, loc =\"lower left\",title=\"Poppula_Course\", prop={'size': 12})\n     \n# Adding Circle in Pie chart\nfig.gca().add_artist(centre_circle)\n  \nplt.rcParams['font.size'] = 16   #\u0e40\u0e25\u0e02\u0e40\u0e1b\u0e2d\u0e23\u0e4c\u0e40\u0e0b\u0e19\u0e15\u0e4c\n# Adding Title of chart\nplt.text(s=\"Poppula_Course\",x=0.01,y=1.2, fontsize=30,va='bottom',ha='center',color='black',weight='bold')\n  \ngc.collect()    \n# Displaing Chart\nplt.show\n","60ffa62a":"programming_language_index = df[\"What programming language would you recommend an aspiring data scientist to learn first? - Selected Choice\"].value_counts().index.to_list()#.to_frame()\nprogramming_language_values = df[\"What programming language would you recommend an aspiring data scientist to learn first? - Selected Choice\"].value_counts().to_list()\n# programming_language = df[[\"What programming language would you recommend an aspiring data scientist to learn first? - Selected Choice\"]].value_counts().index.to_list()\n# #print(list(programming_language))\nprogramming_language_index\nprogramming_language_values\n\"--------------------------------------------------------------------------------------------------------------------------------------------------\"\nX= programming_language_index\nY= programming_language_values\nplot_chart_important(X,Y,\"Xlabel\",\"Ylabel\",\"programming_language\",300,\"YlOrBr\")","5124bbc1":"#Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (Select all that apply)\ndatabases_cols = [col for col in df.columns \n            if \"Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (Select all that apply)\" in col]\n#print(frameworks_cols)\nmapper = [col.split('-')[-1].lstrip()  for col in databases_cols]\n#print(mapper)\nmapping_dict = dict(zip(databases_cols,mapper))\n#print(mapping_dict)\ndf_databases = df[databases_cols].rename(columns=mapping_dict)\n# df_databases.rename(columns={'learn ':'Scikit-learn'}, inplace=True)\n#print(df_frameworks)\ndict_databases= {}\nfor i in df_databases.columns :\n  dict_databases[i] = int(df_databases[[i]].value_counts())\n#dict_frameworks\nlists = sorted(dict_databases.items(), key=lambda x: x[1], reverse=True)\n\nX, Y = zip(*lists) # unpack a list of pairs into two tuples\nX_databases = list(X)\nY_databases = list(Y)\n#df_frameworks.shape[0]\n\"-----------------------------------------------------------------------------------\"\nplot_chart_important(X_databases,Y_databases,\"Xlabel\",\"Ylabel\",\"database\",50,\"YlOrBr\")","e1035850":"frameworks_cols = [col for col in df.columns \n            if \"Which of the following machine learning frameworks do you use on a regular basis? (Select all that apply)\" in col]\n#print(frameworks_cols)\nmapper = [col.split('-')[-1].lstrip()  for col in frameworks_cols]\n#print(mapper)\nmapping_dict = dict(zip(frameworks_cols,mapper))\n#print(mapping_dict)\ndf_frameworks = df[frameworks_cols].rename(columns=mapping_dict)\ndf_frameworks.rename(columns={'learn ':'Scikit-learn'}, inplace=True)\n#print(df_frameworks)\ndict_frameworks= {}\nfor i in df_frameworks.columns :\n  dict_frameworks[i] = int(df_frameworks[[i]].value_counts())\ndict_frameworks\nlists = sorted(dict_frameworks.items(), key=lambda x: x[1], reverse=True)\n\nX, Y = zip(*lists) # unpack a list of pairs into two tuples\nX_frameworks = list(X)\nY_frameworks = list(Y)\n\"--------------------------------------------------------------------------------------------------------------------------\"\nplot_chart_important(X_frameworks,Y_frameworks,\"Xlabel\",\"Ylabel\",\"frameworks\",200,\"YlOrBr\")","d2e58e9a":"#Which of the following ML algorithms do you use on a regular basis? (Select all that apply):\nML_algorithms_cols = [col for col in df.columns \n            if \"Which of the following ML algorithms do you use on a regular basis? (Select all that apply)\" in col]\n#print(ML_algorithms_cols)\nmapper = [col.split('-')[-1].lstrip()  for col in ML_algorithms_cols]\n#print(mapper)\nmapping_dict = dict(zip(ML_algorithms_cols,mapper))\n#print(mapping_dict)\ndf_ML_algorithms= df[ML_algorithms_cols].rename(columns=mapping_dict)\n#df_frameworks.columns\n# o=df_frameworks[['learn ']]\ndf_ML_algorithms.rename(columns={'3, etc)': 'Transformer Networks'}, inplace=True)\n#print(df_frameworks)\ndict_ML_algorithms= {}\nfor i in df_ML_algorithms.columns :\n  dict_ML_algorithms[i] = int(df_ML_algorithms[[i]].value_counts())\ndict_ML_algorithms\nlists = sorted(dict_ML_algorithms.items(), key=lambda x: x[1], reverse=True)\n#lists = sorted(dict_ide.items()) # sorted by key, return a list of tuples\nlists\nX, Y = zip(*lists) # unpack a list of pairs into two tuples\nX_ML_algorithms = list(X)\nY_ML_algorithms = list(Y)\n\"--------------------------------------------------------------------------------------------------------------------------------------------------\"\nX= X_ML_algorithms\nY= Y_ML_algorithms\n\"--------------------------------------------------------------------------------------------------------------------------\"\nplot_chart_important(X_ML_algorithms,Y_ML_algorithms,\"Xlabel\",\"Ylabel\",\"ML_algorithms\",200,\"YlOrBr\")","a0120d8d":"#Which of the following business intelligence tools do you use most often? - Selected Choice\nbusiness_intelligence_tools_index = df[\"Which of the following business intelligence tools do you use most often? - Selected Choice\"].value_counts().index.to_list()#.to_frame()\nbusiness_intelligence_tools_values = df[\"Which of the following business intelligence tools do you use most often? - Selected Choice\"].value_counts().to_list()\n# programming_language = df[[\"What programming language would you recommend an aspiring data scientist to learn first? - Selected Choice\"]].value_counts().index.to_list()\n# #print(list(programming_language))\nbusiness_intelligence_tools_index\nbusiness_intelligence_tools_values\n\"--------------------------------------------------------------------------------------------------------------------------------------------------\"\nX_business_intelligence= business_intelligence_tools_index\nY_business_intelligence= business_intelligence_tools_values\nplot_chart_important(X_business_intelligence,Y_business_intelligence,\"Xlabel\",\"Ylabel\",\"ML_algorithms\",10,\"YlOrBr\")","9627f185":"#Which of the following business intelligence tools do you use most often? - Selected Choice\nbusiness_intelligence_tools_index = df[\"Which of the following business intelligence tools do you use most often? - Selected Choice\"].value_counts().index.to_list()#.to_frame()\nbusiness_intelligence_tools_values = df[\"Which of the following business intelligence tools do you use most often? - Selected Choice\"].value_counts().to_list()\n# programming_language = df[[\"What programming language would you recommend an aspiring data scientist to learn first? - Selected Choice\"]].value_counts().index.to_list()\n# #print(list(programming_language))\nbusiness_intelligence_tools_index\nbusiness_intelligence_tools_values\n\"--------------------------------------------------------------------------------------------------------------------------------------------------\"\nX_business_intelligence= business_intelligence_tools_index\nY_business_intelligence= business_intelligence_tools_values\nplot_chart_important(X_business_intelligence,Y_business_intelligence,\"Xlabel\",\"Ylabel\",\"business_intelligence\",10,\"YlOrBr\")","383fbb44":"#In what industry is your current employer\/contract (or your most recent employer if retired)? - Selected Choice\nindustry_index = df[\"In what industry is your current employer\/contract (or your most recent employer if retired)? - Selected Choice\"].value_counts().index.to_list()#.to_frame()\nindustry_values = df[\"In what industry is your current employer\/contract (or your most recent employer if retired)? - Selected Choice\"].value_counts().to_list()\n# programming_language = df[[\"What programming language would you recommend an aspiring data scientist to learn first? - Selected Choice\"]].value_counts().index.to_list()\n# #print(list(programming_language))\nindustry_index\nindustry_values \n\"--------------------------------------------------------------------------------------------------------------------------------------------------\"\nX_industry= industry_index\nY_industry= industry_values \nplot_chart_important(X_industry,Y_industry,\"Xlabel\",\"Ylabel\",\"industry\",100,'mako_r')","900c98c0":"#Select any activities that make up an important part of your role at work: (Select all that apply)\nimportant_part_cols = [col for col in df.columns \n            if \"Select any activities that make up an important part of your role at work: (Select all that apply)\" in col]\n#print(ML_algorithms_cols)\nmapper = [col.split('-')[-1].lstrip()  for col in important_part_cols]\n#print(mapper)\nmapping_dict = dict(zip(important_part_cols,mapper))\n#print(mapping_dict)\ndf_important_part= df[important_part_cols].rename(columns=mapping_dict)\n# df_important_part.rename(columns={'3, etc)': 'Transformer Networks'}, inplace=True)\n# #print(df_frameworks)\ndict_important_part= {}\nfor i in df_important_part.columns :\n  dict_important_part[i] = int(df_important_part[[i]].value_counts())\ndict_important_part\nlists = sorted(dict_important_part.items(), key=lambda x: x[1], reverse=True)\nlists\nX, Y = zip(*lists) # unpack a list of pairs into two tuples\nX_important_part = list(X)\nY_important_part = list(Y)\n\"--------------------------------------------------------------------------------------------------------------------------------------------------\"\nplot_chart_important(X_important_part,Y_important_part,\"Xlabel\",\"Ylabel\",\"activities that make up an important part of your role at work\",200,'Purples')","21295a5f":"> "}}