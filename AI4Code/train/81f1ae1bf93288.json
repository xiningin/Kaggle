{"cell_type":{"e76e1bf7":"code","9315c885":"code","3c057973":"code","d72c965e":"code","fd46b940":"code","42656bad":"code","a033c3d2":"code","0776279f":"code","cf69eb7a":"code","77cf389e":"code","c9183e94":"code","407b2f7f":"code","41bc3970":"code","066fa4f7":"code","2a1d90e5":"code","5954aee6":"code","486ee905":"code","4189f095":"code","5844f6b8":"code","61a2d91b":"code","f874032e":"code","59da2c4a":"code","2cae86ae":"code","ec15b06b":"code","d9cf9ab3":"code","afc0c406":"code","0624dc88":"code","d6968e44":"code","445b111e":"code","7feb347c":"code","e823dc26":"code","776d8ecf":"code","060db77b":"markdown","2ce45bf6":"markdown","ac3a4080":"markdown","75ef24b4":"markdown","1cd831c7":"markdown","8b280639":"markdown","dd1db7ac":"markdown"},"source":{"e76e1bf7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","9315c885":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n\n\ndef import_data(file):\n    \"\"\"create a dataframe and optimize its memory usage\"\"\"\n    df = pd.read_csv(file, parse_dates=True, keep_date_col=True)\n    df = reduce_mem_usage(df)\n    return df","3c057973":"print('-' * 80)\nprint('sr')\nsr = import_data(\"..\/input\/trendyol-coderspace-datathon\/supplier_return.csv\")\n\nprint('-' * 80)\nprint('defec')\ndefec = import_data(\"..\/input\/trendyol-coderspace-datathon\/supplier_defective_return.csv\")\n\nprint('-' * 80)\nprint('disput')\ndisput = import_data(\"..\/input\/trendyol-coderspace-datathon\/supplier_disputed_return.csv\")\n\nprint('-' * 80)\nprint('tra')\ntra = import_data(\"..\/input\/trendyol-coderspace-datathon\/transactions.csv\")","d72c965e":"defec.rename({'returnRate': 'defecreturn'}, axis=1, inplace=True)","fd46b940":"print(disput[\"supplier_id\"].shape)","42656bad":"print(sr.head())\nprint(sr[\"supplier_id\"].shape)\nprint(defec.head())\nprint(defec[\"supplier_id\"].shape)\nprint(disput.head())\nprint(disput[\"supplier_id\"].shape)","a033c3d2":"print(sr.isnull().sum())\nprint(defec.isnull().sum())","0776279f":"df = pd.merge(sr, defec, on=\"supplier_id\")","cf69eb7a":"df.head(3)","77cf389e":"df = pd.merge(disput, df,how=\"outer\", on='supplier_id')\ndf.head()","c9183e94":"df.describe(include='all') ","407b2f7f":"q = \"(returnRate > 0.141113) & (total_claim > 9.100000e+01) & (defecreturn > 0.001527)\"\n\nprint(df.query(q))\n","41bc3970":"print(df.isnull().sum(axis = 1))\nprint(df.isnull().sum(axis = 0))","066fa4f7":"df.fillna(0, inplace=True)","2a1d90e5":"print(df.isnull().sum(axis = 0))","5954aee6":"tra = pd.merge(df, tra,how=\"outer\", on='supplier_id')","486ee905":"tra[\"promotion_award_value\"].fillna(0, inplace=True)\ntra[\"is_saved_card_trx\"] = tra[\"is_saved_card_trx\"].astype(int)\ntra[\"ship_cost\"].fillna(0, inplace=True)","4189f095":"(tra['discounted_price'] > tra['original_price']).value_counts()","5844f6b8":"tra['order_date'] = pd.to_datetime(tra['order_date'], errors='coerce')\ntra['is_returned'] = tra['is_returned'].astype(str).apply(lambda x: x.replace('.0',''))\ntra['order_date'] = tra['order_date'].dt.floor('1h')\nlistt = tra.iloc[:,7]","61a2d91b":"tarihler = listt.dt.tz_localize(None)\ntra['datehour'] = tarihler\ntra['datehour'] = tra['datehour'].dt.hour\ntra.datehour.value_counts()","f874032e":"tra.columns","59da2c4a":"tra = tra.drop(tra.columns[[0,2,3,4,7,8,10,11,12,13,16,17,18,19]], axis=1)","2cae86ae":"tra.head()","ec15b06b":"tra.dropna(how='any', inplace=True)","d9cf9ab3":"ax = sns.boxplot(x='datehour', y='is_returned' ,data=tra)","afc0c406":"pd.crosstab(tra['datehour'],tra['is_returned']).plot.bar(stacked=True);","0624dc88":"pd.crosstab(tra['is_elite_user'],tra['is_returned']).plot.bar(stacked=True);","d6968e44":"tra.head(1)","445b111e":"f, ax = plt.subplots(figsize=(7, 3))\nsns.countplot(y=\"is_saved_card_trx\", data=tra, color=\"c\");","7feb347c":"f, ax = plt.subplots(figsize=(7, 3))\nsns.countplot(y=\"is_wallet_trx\", data=tra, color=\"c\");","e823dc26":"sns.catplot(y=\"is_saved_card_trx\", hue=\"is_returned\", kind=\"count\",\n            palette=\"pastel\", edgecolor=\".6\",\n            data=tra);","776d8ecf":"sns.catplot(y=\"is_wallet_trx\", hue=\"is_returned\", kind=\"count\",\n            palette=\"pastel\", edgecolor=\".6\",\n            data=tra);","060db77b":"# ANALYSIS OF (supplier_return.csv) + (supplier_defective_return.csv) + (supplier_disputed_return.csv)","2ce45bf6":"### Subset Dataframes by using query()","ac3a4080":"## Grafikler","75ef24b4":"Kar\u0131\u015fmamas\u0131 i\u00e7in Supplier Defective Return dosyas\u0131ndaki returnRate kolon ismini 'defecreturn' olarak de\u011fi\u015ftirelim.","1cd831c7":"# Tarih De\u011fi\u015fkenini D\u00fczenleme","8b280639":"## SORUNLU SATICILAR","dd1db7ac":"B\u00fct\u00fcn indirimli fiyatlar normal fiyatlardan k\u00fc\u00e7\u00fck "}}