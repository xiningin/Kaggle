{"cell_type":{"caa070b7":"code","6f00fb7c":"code","7c924960":"code","f3feae76":"code","809d23fb":"code","21cad8b9":"code","06b9d608":"code","b0d0d637":"code","c3cd9795":"code","35b2176d":"code","0fac415b":"code","0bf37e0c":"code","2e56a63b":"code","e7b51a06":"code","ebe3ea78":"code","74838732":"code","6f75b154":"code","043b8475":"code","9e7efa55":"code","d288e743":"code","984c278d":"code","76efadf9":"markdown","857d1756":"markdown","cb3e72ae":"markdown","5ce68383":"markdown","8c7040ad":"markdown"},"source":{"caa070b7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport missingno as msno\nimport plotly.express as px\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\n\nimport warnings \nwarnings.simplefilter('ignore')\n\nplt.style.use(\"dark_background\")","6f00fb7c":"df = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\ndf.head(10)","7c924960":"df.shape","f3feae76":"df.isnull().sum()","809d23fb":"msno.dendrogram(df, figsize=(11,7))\nplt.grid()","21cad8b9":"df.describe()","06b9d608":"sb.countplot(df['Gender'], saturation=.66, palette='Accent')","b0d0d637":"income = px.bar(df, x=\"Annual Income (k$)\", y=\"Spending Score (1-100)\", template=\"plotly_dark\")\nincome.update_layout(title_text=\"Spending Score against Annual Income\")\nincome.show()","c3cd9795":"plt.hist(df['Age'], density=True, color=\"white\",orientation=\"horizontal\")\nplt.xlabel(\"Density\")\nplt.ylabel(\"Age\")\nplt.title(\"Ages\")","35b2176d":"female_expen = df[df['Gender'].str.contains(\"Female\")]\nfem_exp = px.scatter(female_expen, x=\"Annual Income (k$)\", y=\"Spending Score (1-100)\", template=\"plotly_dark\", color=\"Age\")\nfem_exp.update_layout(title_text=\"Expenditure of Female\")\nfem_exp.show()","0fac415b":"male_expen = df[df['Gender'].str.contains(\"Male\")]\nmale_exp = px.scatter(male_expen, x=\"Annual Income (k$)\", y=\"Spending Score (1-100)\", template=\"plotly_dark\", color=\"Age\",)\nmale_exp.update_layout(title_text=\"Expenditure of Male\")\nmale_exp.show()","0bf37e0c":"exp = px.violin(df, x=\"Age\", y=\"Spending Score (1-100)\", template=\"plotly_dark\", color=\"Gender\")\nexp.update_layout(title_text=\"Expenditure by Ages\")\nexp.show()","2e56a63b":"sb.pairplot(df, vars=['Spending Score (1-100)','Annual Income (k$)','Age'], hue=\"Gender\")","e7b51a06":"income_score = df.iloc[:,[False,False,False,True,True]].values\nscaler = MinMaxScaler()\nscaled_income_score = scaler.fit_transform(income_score)","ebe3ea78":"elbow = []\nk = range(1,10)\nfor i in k:\n  KModel = KMeans(n_clusters=i, init='k-means++')\n  KModel.fit(scaled_income_score)\n  elbow.append(KModel.inertia_)\n\npx.line(k,elbow,template=\"plotly_dark\", labels={\"x\":\"Number of Clusters\", \"y\":\"Distortion\"}, title=\"Elboe Method\")","74838732":"silhouette_score(income_score,KModel.labels_)","6f75b154":"kmeans_per_k = [KMeans(n_clusters=k, random_state=42).fit(income_score) for k in range(1,10)]\nsilhouette_scores =[silhouette_score(income_score, model.labels_) for model in kmeans_per_k[1:]]","043b8475":"plt.figure(figsize=(12,8))\nplt.plot(range(2,10), silhouette_scores,\"bo-\", color=\"white\", label='Silhouette Curve')\nplt.xlabel(\"Number of Clusters\")\nplt.ylabel(\"Silhouette Curve\")\nplt.grid(linestyle='--')\nplt.title(\"Silhouette Curve for optimal number of clusters\")\n\nk = np.argmax(silhouette_scores)+2\n\nplt.axvline(x=k, c=\"yellow\", linestyle='--', linewidth=3, label='Optimal number of clusters({})'.format(k))\nplt.scatter(k, silhouette_scores[k-2], s=400)\nplt.legend(shadow=True)\nplt.show()","9e7efa55":"print(\"Optimal number of cluster is : {}\".format(k))","d288e743":"plt.figure(figsize=(12,8))\ndef decision_boundaries(clusterer, x, resolution = 2000, show_centroids = True, show_xlabels = True, show_ylabels = True, shadow=True):\n  mins = income_score.min(axis=0) - 0.1\n  maxs = income_score.max(axis=0) + 0.1\n  plt.style.use(\"fivethirtyeight\")\n\n  xx, yy = np.meshgrid(np.linspace(mins[0], maxs[0], resolution),\n                       np.linspace(mins[1], maxs[1], resolution))\n  Z = clusterer.predict(np.c_[xx.ravel(), yy.ravel()])\n  Z = Z.reshape(xx.shape)\n  plt.contour(Z, extent=(mins[0], maxs[0], mins[1], maxs[1]), cmap='RdYlBu_r')\n  plt.contour(Z, extent=(mins[0], maxs[0], mins[1], maxs[1]), linewidths=1, colors='k')\n  plot_data(income_score)\n  if show_centroids:\n    plot_centroids(clusterer.cluster_centers_)\n  if show_xlabels:\n    plt.xlabel(\"$x_1$\", fontsize=14)\n  else:\n    plt.tick_params(labelbottom=False)  \n  if show_ylabels:\n    plt.ylabel(\"$x_2$\", fontsize=14, rotation=0)\n  else:\n    plt.tick_params(labelleft=False)  \n\n\ndef plot_data(income_score):\n  plt.plot(income_score[:,0], income_score[:,1], 'k.')\n\ndef plot_centroids(centroids, weights=None, circle_color='red', cross_color='k', shadow=True):\n  if weights is not None:\n    centroids = centroids[weights>weights.max() \/ 10]\n    plt.scatter(centroids[:,0], centroids[:,1], marker='o', s=50, linewidths=9 ,color=circle_color, zorder = 10, alpha=0.9, shadow=True)\n    plt.scatter(centroids[:,0], centroids[:,1], marker='x', s=80,linewidths=60, color=cross_color, zorder = 11, alpha=1, shadow=True)\n\n\ndecision_boundaries(kmeans_per_k[k-1], income_score)\n\nplt.show()","984c278d":"kmeanModel = KMeans(n_clusters=4,init='k-means++',max_iter=300,n_init=10,random_state=0)\ny_kmeans= kmeanModel.fit_predict(income_score)\nplt.figure(figsize=(8,8))\nplt.scatter(income_score[y_kmeans == 0, 0], income_score[y_kmeans == 0, 1], s = 60, c = 'g', label = 'Cluster 1')\nplt.scatter(income_score[y_kmeans == 1, 0], income_score[y_kmeans == 1, 1], s = 60, c = 'b', label = 'Cluster 2')\nplt.scatter(income_score[y_kmeans == 2, 0], income_score[y_kmeans == 2, 1], s = 60, c = 'r', label = 'Cluster 3')\nplt.scatter(income_score[y_kmeans == 3, 0], income_score[y_kmeans == 3, 1], s = 60, c = 'yellow', label = 'Cluster 4')\nplt.scatter(kmeanModel.cluster_centers_[:, 0], kmeanModel.cluster_centers_[:, 1], s = 80, c = 'black', marker='x', label = 'Centroids')\nplt.title('Clusters of customers')\nplt.xlabel('Annual Income (k$)')\nplt.ylabel('Spending Score (1-100)')\nplt.legend()\nplt.show()","76efadf9":"**EDA**","857d1756":"**Elbow Method to find optimal K cluster**","cb3e72ae":"**Customer Segmentation**","5ce68383":"**Importing Libraries**","8c7040ad":"**Silhouette Method**"}}