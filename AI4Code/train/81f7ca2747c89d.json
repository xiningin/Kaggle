{"cell_type":{"bb5af102":"code","d1893745":"code","d5bf233f":"code","8e210872":"code","00f6786d":"code","77d12847":"code","26a0bc49":"code","8a5102a6":"code","c759b9ce":"code","bbaa1b88":"code","3a29edef":"code","9e86078d":"code","54ffec4d":"code","93effd38":"code","dc26de56":"code","5f3a50db":"code","54ab22df":"code","10026616":"code","bc3a60d9":"code","ba315085":"code","8b9939b2":"code","61c1e87a":"code","494a65c3":"code","b124128c":"code","3d5bc362":"code","b56490d3":"code","38b8f6c0":"code","479b72a5":"code","9e92c117":"code","5ee2e9a9":"code","91093db6":"code","b4eabbc5":"code","176ce995":"code","7a1519f6":"code","948514c1":"code","fb88c123":"code","a62fa824":"code","9fce5861":"code","567f53bd":"code","cf5feac1":"code","2751876a":"code","eba8d45b":"code","306ac9c4":"code","82697270":"code","65803172":"code","9bdee48b":"code","aad9093e":"markdown","da640662":"markdown","d8da85de":"markdown","67f157b4":"markdown","e8a2f758":"markdown","c2a0ac8d":"markdown","5c005758":"markdown","65576820":"markdown","b11cdbd9":"markdown","721e4076":"markdown","685ed905":"markdown","6e9e6ab8":"markdown","8144faea":"markdown","43d0f50c":"markdown","d722a866":"markdown","77794a6e":"markdown","cd076e65":"markdown","5c59b0f9":"markdown","c7f8ef5f":"markdown","d77198e5":"markdown","25be4e5e":"markdown","d7d2f0cf":"markdown","81935aff":"markdown","76ab6863":"markdown","3fc70cc1":"markdown","b5f7b7db":"markdown","17a67339":"markdown","6cbc063c":"markdown","932e2dd5":"markdown","133e0110":"markdown","36f2f3e5":"markdown","8abe39ca":"markdown","68d30228":"markdown","cbeeff2e":"markdown","e4d293a2":"markdown","435fa99a":"markdown","adbe3597":"markdown","02a4dac0":"markdown","770397fc":"markdown","e8aa86ca":"markdown","aa1a8c4f":"markdown","b010196c":"markdown","fdb17eb4":"markdown","3a9c97b8":"markdown","63068e11":"markdown","f770b4c6":"markdown","33e9440f":"markdown","3ccfb61c":"markdown","c4f895aa":"markdown","a1138b08":"markdown","3bcc3d70":"markdown","dfeda0b1":"markdown","ee60e3fd":"markdown","d1d486d8":"markdown","e948068e":"markdown","fd39ef97":"markdown","694b105d":"markdown","14ea1655":"markdown","f1c77f9f":"markdown"},"source":{"bb5af102":"\n# Project packages.\nimport pandas as pd\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\nimport numpy as np\n\n# Visualisations.\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\n# Statistics.\nfrom scipy import stats\nfrom scipy.stats import norm, skew\nfrom statistics import mode\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\n\n# Machine Learning.\nfrom sklearn.linear_model import Lasso, Ridge\nfrom sklearn import metrics\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\n\n# Filter out warnings when fitting.\nimport sys\nimport warnings\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")","d1893745":"#Dictionary containing the descriptions of all columns in the data set.\ndesc = {\n 'SalePrice': \"The property's sale price in dollars. This is the target variable to be predicted\",\n 'MSSubClass': \"The building class\",\n 'MSZoning': \"The general zoning classification\",\n 'LotFrontage': \"Linear feet of street connected to property\",\n 'LotArea': \"Lot size in square feet\",\n 'Street': \"Type of road access\",\n 'Alley': \"Type of alley access\",\n 'LotShape': \"General shape of property\",\n 'LandContour': \"Flatness of the property\",\n 'Utilities': \"Type of utilities available\",\n 'LotConfig': \"Lot configuration\",\n 'LandSlope': \"Slope of property\",\n 'Neighborhood': \"Physical locations within Ames city limits\",\n 'Condition1': \"Proximity to main road or railroad\",\n 'Condition2': \"Proximity to main road or railroad (if a second is present)\",\n 'BldgType': \"Type of dwelling\",\n 'HouseStyle': \"Style of dwelling\",\n 'OverallQual': \"Overall material and finish quality\",\n 'OverallCond': \"Overall condition rating\",\n 'YearBuilt': \"Original construction date\",\n 'YearRemodAdd': \"Remodel date\",\n 'RoofStyle': \"Type of roof\",\n 'RoofMatl': \"Roof material\",\n 'Exterior1st': \"Exterior covering on house\",\n 'Exterior2nd': \"Exterior covering on house (if more than one material)\",\n 'MasVnrType': \"Masonry veneer type\",\n 'MasVnrArea': \"Masonry veneer area in square feet\",\n 'ExterQual': \"Exterior material quality\",\n 'ExterCond': \"Present condition of the material on the exterior\",\n 'Foundation': \"Type of foundation\",\n 'BsmtQual': \"Height of the basement\",\n 'BsmtCond': \"General condition of the basement\",\n 'BsmtExposure': \"Walkout or garden level basement walls\",\n 'BsmtFinType1': \"Quality of basement finished area\",\n 'BsmtFinSF1': \"Type 1 finished square feet\",\n 'BsmtFinType2': \"Quality of second finished area (if present)\",\n 'BsmtFinSF2': \"Type 2 finished square feet\",\n 'BsmtUnfSF': \"Unfinished square feet of basement area\",\n 'TotalBsmtSF': \"Total square feet of basement area\",\n 'Heating': \"Type of heating\",\n 'HeatingQC': \"Heating quality and condition\",\n 'CentralAir': \"Central air conditioning\",\n 'Electrical':\" Electrical system\",\n '1stFlrSF': \"First Floor square feet\",\n '2ndFlrSF': \"Second floor square feet\",\n 'LowQualFinSF': \"Low quality finished square feet (all floors)\",\n 'GrLivArea': \"Above grade (ground) living area square feet\",\n 'BsmtFullBath': \"Basement full bathrooms\",\n 'BsmtHalfBath': \"Basement half bathrooms\",\n 'FullBath': \"Full bathrooms above grade\",\n 'HalfBath': \"Half baths above grade\",\n 'Bedroom': \"Number of bedrooms above basement level\",\n 'Kitchen': \"Number of kitchens\",\n 'KitchenQual': \"Kitchen quality\",\n 'TotRmsAbvGrd': \"Total rooms above grade (does not include bathrooms)\",\n 'Functional': \"Home functionality rating\",\n 'Fireplaces': \"Number of fireplaces\",\n 'FireplaceQu': \"Fireplace quality\",\n 'GarageType': \"Garage location\",\n 'GarageYrBlt': \"Year garage was built\",\n 'GarageFinish': \"Interior finish of the garage\",\n 'GarageCars': \"Size of garage in car capacity\",\n 'GarageArea': \"Size of garage in square feet\",\n 'GarageQual': \"Garage quality\",\n 'GarageCond': \"Garage condition\",\n 'PavedDrive': \"Paved driveway\",\n 'WoodDeckSF': \"Wood deck area in square feet\",\n 'OpenPorchSF': \"Open porch area in square feet\",\n 'EnclosedPorch': \"Enclosed porch area in square feet\",\n '3SsnPorch': \"Three season porch area in square feet\",\n 'ScreenPorch': \"Screen porch area in square feet\",\n 'PoolArea': \"Pool area in square feet\",\n 'PoolQC': \"Pool quality\",\n 'Fence': \"Fence quality\",\n 'MiscFeature': \"Miscellaneous feature not covered in other categories\",\n 'MiscVal': \"Value of miscellaneous feature\",\n 'MoSold': \"Month Sold\",\n 'YrSold': \"Year Sold\",\n 'SaleType': \"Type of sale\",\n 'SaleCondition': \"Condition of sale\"\n}","d5bf233f":"#Reading from and Dumping to outfile for description dictionary\nimport json\njson.dump(desc, open(\"desc.json\",'w'))\n\nwith open(\"desc.json\", \"r\") as read_file:\n    d= json.load(read_file)","8e210872":"\"\"\"\nCustom function that yields a dictionary of missing data in a DataFrame \n\"\"\"\ndef percent_missing(df):    \n    cols = list(df.columns)\n    outputDict = {}\n    for x in range(len(cols)):\n        key = cols[x]\n        if (df[cols[x]].isnull().sum()) > 0:\n            outputDict[key] = round(((df[cols[x]].isnull().sum()) \/ len(df)*100),2)\n    return outputDict\n\n\"\"\"\nCustom function that yields an overview of missing data in a DataFrame or a list \nof column names with missing data based on data type (Dependant on 'return_' parameter input, 'N'-numerical, 'C'-categorical)\n\"\"\"\ndef percent_missing_overview(df,return_ = 'None'):\n    \n    \n    numerical = [x for x in df.columns if df.dtypes[x] != 'object']\n    categorical = [x for x in df.columns if df.dtypes[x] == 'object']\n    missing_keys = percent_missing(df).keys()\n    \n    if return_ == 'None':\n        #numerical = [x for x in df.columns if df.dtypes[x] != 'object']\n        #categorical = [x for x in df.columns if df.dtypes[x] == 'object']\n        print(\"---\")\n        #missing_keys = list(percent_missing(train).keys())\n        print(\"Missing Data:\")\n        print(\"---\")\n        print(\"Numerical : \",\"(\",len([x for x in numerical if x in missing_keys]),\")\")\n        for x in numerical:\n            if x in missing_keys:\n                print(\" (\",percent_missing(df)[x],\"%)\",x,\":\",desc[x])\n        print(\"---\")\n        print(\"Categorical : \",\"(\",len([x for x in categorical if x in missing_keys]),\")\")\n        for x in categorical:\n            if x in missing_keys:\n                print(\" (\",percent_missing(df)[x],\"%)\",x,\":\",desc[x])\n        print(\"---\")        \n    if return_ == 'N':\n        return [x for x in numerical if x in missing_keys]\n    if return_ == 'C':\n        return [x for x in categorical if x in missing_keys]","00f6786d":"#Prints out a bried overview of the shape and column data types of a DataFrame\ndef data_overview(df):\n    print(\"---\")\n    print(\"Data Overview\")\n    print(\"---\")\n    numerical = [x for x in df.columns if df.dtypes[x] != 'object']\n    print(\"There are\" , len(numerical) , \"numerical features\")\n    categorical = [x for x in df.columns if df.dtypes[x] == 'object']\n    print(\"There are\" , len(categorical) , \"categorical features\")\n    print(\"---\")\n    print(\"Shape : \")\n    print(df.shape)","77d12847":"#Reading in Train and Test data from CSV files.\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","26a0bc49":"#The ID column is retained in temporary variables before being dropped.\ntrain_ID = train['Id']\ntest_ID = test['Id']\ntrain.drop(['Id'], axis=1, inplace=True)\ntest.drop(['Id'], axis=1, inplace=True)\n\n#Lists of column names of predictor variables whether numerical or categorical\nnumerical = [x for x in train.columns if train.dtypes[x] != 'object']\n#Dropping the target variable as it is not a predictor\nnumerical.remove('SalePrice')\ncategorical = [x for x in train.columns if train.dtypes[x] == 'object']\n\n#Retaining the predictor variable before dropping.\ny = train.SalePrice.reset_index(drop=True)\n\n#Creating variables to hold our features before EDA.\ntrain_features = train.drop(['SalePrice'], axis=1)\ntest_features = test\n\n#Combining features from test and train set to perform uniform preprocessing later.\nfeatures = pd.concat([train_features, test_features]).reset_index(drop=True)\n\ndata_overview(features)","8a5102a6":"# Checking for outliers in GrLivArea as indicated in dataset documentation\nplt.figure(figsize=(10,8))\nax = sns.regplot(x=train['GrLivArea'], y=train['SalePrice'], fit_reg=True)\nplt.show()","c759b9ce":"# Removing two very extreme outliers in the bottom right hand corner\nfeatures = features.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)\ntrain = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)\ntrain.reset_index(drop=True, inplace=True)\n\n# Re-check graph\nplt.figure(figsize=(10,8))\nax = sns.regplot(x=train['GrLivArea'], y=train['SalePrice'], fit_reg=True)\nplt.show()","bbaa1b88":"#Acquiring mu and sigma for normal distribution plot of 'SalePrice'\n(mu, sigma) = norm.fit(train['SalePrice'])\n\n#Plotting distribution plot of 'SalePrice'\nplt.figure(figsize=(8,8))\nax = sns.distplot(train['SalePrice'] , fit=norm);\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.show()","3a29edef":"#Plotting Q-Q plot\nplt.figure(figsize=(8,8))\nax = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","9e86078d":"fig, ax = plt.subplots(figsize=(16,16), ncols=2, nrows=2)\n\nsns.distplot(y, kde=False,color = 'green', ax=ax[0][0], fit=stats.norm)\nsns.distplot(y, kde=False,color = 'green', ax=ax[0][1], fit=stats.johnsonsu)\nsns.distplot(y, kde=False,color = 'green', ax=ax[1][0], fit=stats.lognorm)\nsns.distplot(y, kde=False,color = 'green', ax=ax[1][1], fit=stats.johnsonsb)\n\nax[0][0].set_title(\"Normal\",fontsize=24)\nax[0][1].set_title(\"Johnson SU\",fontsize=24)\nax[1][0].set_title(\"Log Normal\",fontsize=24)\nax[1][1].set_title(\"Johnson SB\",fontsize=24)\nplt.show()","54ffec4d":"# Applying a log(1+x) transformation to SalePrice\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\ny = train.SalePrice.reset_index(drop=True)","93effd38":"#Plotting distribution plot of 'SalePrice'\nplt.figure(figsize=(8,8))\nax = sns.distplot(train['SalePrice'] , fit=stats.johnsonsu);\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\nplt.legend(['Johnson SU'],\n            loc='best')\nplt.show()","dc26de56":"#Plotting Q-Q plot\nplt.figure(figsize=(8,8))\nax = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","5f3a50db":"# Creating a correlation matrix to plot.\ncorr = train.corr()\n# Creating a mask to filter out unnecessary correlations\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nplt.figure(figsize=(16, 10))\nplt.title('Correlation Matrix', fontsize=18)\n# Plotting the correlation matrix\nsns.heatmap(corr, mask=mask, annot=False,cmap='RdYlGn', linewidths=0.4, annot_kws={'size':20})\nplt.show()","54ab22df":"# show higher correlations between predictor variables and the response variable\ncorr_dict = train.corr()['SalePrice'][(train.corr()['SalePrice'] > 0.5) & (train.corr()['SalePrice'] < 1.0)].sort_values(ascending=False).to_dict()\nprint(\"Higher correlations between predictor variables and the response variable \")\nprint(\"-------------------------------------------------------------------------\")\nfor x in corr_dict.keys():\n    print(\"(\" , round(corr_dict[x],3), \")\",x, \":\" , \"  -\",desc[x])","10026616":"data_overview(features)","bc3a60d9":"# Visualising missing data.\nf, ax = plt.subplots(figsize = (10, 6))\nplt.xticks(rotation = '90')\nsns.barplot(x = list(percent_missing(features).keys()), y = list(percent_missing(features).values()))\nplt.xlabel('Features', fontsize = 15)\nplt.ylabel('Percentage of missing values (%)', fontsize = 15)\nplt.title('Missing Data', fontsize = 15)\nplt.show()\n\n# Generate missing data report using a custom function.\npercent_missing_overview(features) ","ba315085":"#Converting categorical predictors that are stored as numbers to strings\nfeatures['MSSubClass'] = features['MSSubClass'].apply(str)\nfeatures['YrSold'] = features['YrSold'].astype(str)\nfeatures['MoSold'] = features['MoSold'].astype(str)","8b9939b2":"# Imputing above mentioned categorical features to 'None'.\nfor f in ('MasVnrType','Alley','PoolQC', 'Fence', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',):\n    features[f] = features[f].fillna('None')","61c1e87a":"# Imputing 'MiscFeature' to 'None'.\nfeatures['MiscFeature'] = features['MiscFeature'].fillna('None')","494a65c3":"# Imputing remaining categorical features to mode.\nfor f in ('Exterior1st', 'Exterior2nd', 'SaleType','Utilities'):\n    features[f] = features[f].fillna(features[f].mode()[0])\nfeatures['Functional'] = features['Functional'].fillna('Typ')\nfeatures['Electrical'] = features['Electrical'].fillna(\"SBrkr\")\nfeatures['KitchenQual'] = features['KitchenQual'].fillna(\"TA\")    \n# Grouping property class features and imputing with the most frequent entry.\nfeatures['MSZoning'] = features.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))\n\n# Final imputation of categorical features\nobjects = []\nfor i in features.columns:\n    if features[i].dtype == object:\n        objects.append(i)\n\nfeatures.update(features[objects].fillna('None'))","b124128c":"features[percent_missing_overview(features,'N')].describe().T.round(3)","3d5bc362":"features[features['GarageYrBlt'] == 2207][['YearBuilt','YearRemodAdd','GarageYrBlt']]","b56490d3":"# Changing entry from 2207 to 2007.\nfeatures.GarageYrBlt.iloc[2592] = 2007","38b8f6c0":"# Imputing other Garage features to 0.\nfor f in ['GarageYrBlt', 'GarageArea', 'GarageCars']:\n    features[f] = features[f].fillna(0)","479b72a5":"# Imputing Basement features to 0.\nfor f in ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath']:\n    features[f] = features[f].fillna(0)","9e92c117":"# Imputing 'MasVnrArea' feature to 0.\nfeatures['MasVnrArea'] = features['MasVnrArea'].fillna(0)","5ee2e9a9":"features['LotFrontage'] = features.groupby('Neighborhood')['LotFrontage'].apply(lambda x: x.fillna(x.median()))","91093db6":"# Checking for missing data after imputation.\npercent_missing_overview(features) ","b4eabbc5":"# Recreating list of numerical features\nnumerical = [x for x in features.columns if features.dtypes[x] != 'object']\n# Calculating skewness\nskewed = features[numerical].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nskewness = pd.DataFrame({'Skew' :skewed})\nskewness","176ce995":"numeric_dtypes = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumerics2 = []\nfor i in features.columns:\n    if features[i].dtype in numeric_dtypes:\n        numerics2.append(i)\nskew_features = features[numerics2].apply(lambda x: stats.skew(x)).sort_values(ascending=False)\n\nhigh_skew = skew_features[skew_features > 0.5]\nskew_index = high_skew.index\n\nfor i in skew_index:\n    features[i] = boxcox1p(features[i], boxcox_normmax(features[i] + 1))","7a1519f6":"# Creating simplified features\nfeatures['HasPool'] = features['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['Has2ndfloor'] = features['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['HasGarage'] = features['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['HasBsmt'] = features['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['HasFireplace'] = features['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\n\nfeatures['YrBltAndRemod']=features['YearBuilt']+features['YearRemodAdd']\nfeatures['TotalSF']=features['TotalBsmtSF'] + features['1stFlrSF'] + features['2ndFlrSF']\n\nfeatures['Total_SQR_Footage'] = (features['BsmtFinSF1'] + features['BsmtFinSF2'] +\n                                 features['1stFlrSF'] + features['2ndFlrSF'])\n\nfeatures['Total_Bathrooms'] = (features['FullBath'] + (0.5 * features['HalfBath']) +\n                               features['BsmtFullBath'] + (0.5 * features['BsmtHalfBath']))\n\nfeatures['Total_Porch_SF'] = (features['OpenPorchSF'] + features['3SsnPorch'] +\n                              features['EnclosedPorch'] + features['ScreenPorch'] +\n                              features['WoodDeckSF'])\n\nfeatures = features.drop(['Utilities', 'Street', 'PoolQC',], axis=1)","948514c1":"final_features = pd.get_dummies(features).reset_index(drop=True)\nprint(final_features.shape)","fb88c123":"# Splitting up features for training and prediction.\nX = final_features.iloc[:len(y), :]\nX_pred = final_features.iloc[len(X):, :]\n\nX_train = X\nX_test = X_pred\ny_train = y\n\nprint('X', X.shape, 'y', y.shape, 'X_pred', X_pred.shape)","a62fa824":"# RMSE scoring function with cross validation\ndef rmse_cv(model):\n    rmse = np.sqrt(-cross_val_score(model, X_train, y_train, scoring=\"neg_mean_squared_error\", cv = 10))\n    return(rmse)","9fce5861":"# Possible list of alpha values.\nalphas = [5,10,15,20,25,30]\n\n# Iterate over alpha's\ncv_ridge = [rmse_cv(Ridge(alpha = alpha)).mean() for alpha in alphas]\n# Plot findings\ncv_ridge = pd.Series(cv_ridge, index = alphas)\ncv_ridge.plot(title = \"Validation\")\nplt.xlabel(\"Alpha\")\nplt.ylabel(\"Rmse\")\nplt.show()","567f53bd":"# Creating Ridge Regression Model with estimated alpha\nmodel_ridge = Ridge(alpha = 10)","cf5feac1":"# Setting up list of alpha's\nalphas = [5e-05, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008]\n\n# Iterate over alpha's\ncv_lasso = [rmse_cv(Lasso(alpha = alpha)).mean() for alpha in alphas]\n\n# Plot findings\ncv_lasso = pd.Series(cv_lasso, index = alphas)\ncv_lasso.plot(title = \"Validation\")\nplt.xlabel(\"Alpha\")\nplt.ylabel(\"Rmse\")","2751876a":"# Creating Lasso Regression Model with estimated alpha\nmodel_lasso = make_pipeline(RobustScaler(), Lasso(alpha = 0.0004))","eba8d45b":"# Calculating RMSE score with estimated alpha values\ncv_ridge = rmse_cv(model_ridge).mean()\ncv_lasso = rmse_cv(model_lasso).mean()","306ac9c4":"# Creating a table of results, ranked highest to lowest\nresults = pd.DataFrame({\n    'Model': ['Ridge','Lasso'],\n    'Score': [cv_ridge,cv_lasso]})\n\n# Build dataframe of values\nresult_df = results.sort_values(by='Score', ascending=True).reset_index(drop=True)\nresult_df.head()","82697270":"# Fitting models and calculating predictions.\nmodel_lasso.fit(X_train, y_train)\nlasso_pred = np.expm1(model_lasso.predict(X_test))\n\nmodel_ridge.fit(X_train, y_train)\nridge_pred = np.expm1(model_ridge.predict(X_test))\n","65803172":"#Stacking\nStack = (lasso_pred + ridge_pred) \/ 2","9bdee48b":"submission = pd.DataFrame({'Id':test_ID, 'SalePrice':lasso_pred})\nsubmission.to_csv('Stack.csv', index=False)","aad9093e":"The 'MasVnrArea' feature which represents the Masonry veneer area in square feet only has 0.79 % data missing which is a small amount relative to the overall size of the dataset.\nHence this feature will also be imouted to 0.","da640662":"### Missing Data","d8da85de":"From the above plot selecting an alpha value of 10 would be sufficient.","67f157b4":"### Getting Dummies","e8a2f758":"###  Outliers\n\nThe Ames dataset documentation reveals two outliers in the feature GrLivArea (Above grade (ground) living area square feet)","c2a0ac8d":"After dropping the 'ID' and target variable 'SalePrice' columns,\nthe data set contains 79 features and 2917 entries.","5c005758":"## Exploratory Data Analysis","65576820":"### Simplified features","b11cdbd9":"# Model Building","721e4076":"### Feature Engineering","685ed905":"The cross_val_score function from sklearn.model_selection will be used to calculate the RMSE score for the models. The fucntion will be scoring the mean squared error with a cross validation splitting strategy of 10 folds.\n\nRoot Mean Square Error (RMSE) is the standard deviation of the residuals (prediction errors). \nResiduals are a measure of how far from the regression line data points are.\n\nThis function will also aid in finding the optimal alpha value when building the models.","6e9e6ab8":"Ridge and Lasso are regularized linear regression methods. They are both simple techniques which reduce model complexity and prevent over-fitting. The difference between the ridge and lasso regression lies in how the regularization term is calculated.\n\nLasso penalizes the absolute size of coefficients which leads to coefficients that can be exactly 0. It also offers automatic feature selection because it can completely remove some features.\n\nRidge regression penalizes the squared size of coefficients which leads to smaller coefficients, but it doesn't force them to 0.  It will not get rid of irrelevant features but will instead minimize their impact on the trained model.","8144faea":"Whilst doing a log('SalePrice') transformation will yield satisfactory results, the more optimal choice would be a log1p('SalePrice') transformation.\n\nThe log1p(x) calculates log(1 + x) and returns the natural logarithm of one plus the input array, element-wise.\n\nSince for real-valued input, log1p is accurate also for x so small that 1 + x == 1 in floating-point accuracy.\nThis will help getting the target variable to follow an unbounded Johnson distribution better accounting for the fact that the distribution goes to infinity in both upper or lower tail.","43d0f50c":"## Data pre-processing","d722a866":"The MiscFeature feature that describes a miscellaneous feature not covered in other categories has 96.4 % missing data, it would be safe to also impute this feature to 'None'.","77794a6e":"In order to find the optimal alpha value for this model, a number of models will be created iteratively using various alpha values with their RMSE scores being plotted against one another , allowing for the alpha value of the model with the lowest RMSE score to be selected.\n\nThe alpha parameter needs to greater than 0 as alpha = 0 will yield the same coefficients as simple linear regression.","cd076e65":"The 'LotFrontage' feature which describes the linear number feet of street connected to the property\nhas 16.65 % of data missing. This feature will be imputed with median after grouping the data by neighbourhood as each neighbourhood would have an allocated amount of street connected to properties depending on the neighbourhood.","5c59b0f9":"## Custom Functions and Variables","c7f8ef5f":"# House Prices Regression","d77198e5":"## EDSA - Team 7","25be4e5e":"It can be seen that both Ridge and Lasso score very similarly on this data.","d7d2f0cf":"### Transformation of Target Variable ('SalePrice')","81935aff":"The majority of numerical features with missing pertain to features regarding the Basement and Garage.\n","76ab6863":"It can be seen above that the 'SalePrice' does not follow a Normal Distribution.\nThis indicates that the target variable ('SalePrice') is right skewed.","3fc70cc1":"The remaining categorical features have very low percentages of missing data (<1%).\nIt would be better to impute these would the mode of their respective columns as these features don't show a lack of some attribute such as a Basement or Garage.","b5f7b7db":"### Data Shape","17a67339":"<img src=\"https:\/\/kimcranehomes.com\/wp-content\/uploads\/sites\/20\/2018\/02\/market-stats.jpg\" style=\"width: 600px\">","6cbc063c":"###  Q\u2013Q (quantile-quantile) plot","932e2dd5":"There are some numerical features that would serve better as categorical features as they represent various categories pertaining to condition and quality as well as building class.\n\nThe aforementioned features are : \n- MSSubClass  : (The building class)\n- YrSold      : (Year Sold)\n- MoSold      : (Month Sold)\nAs such these features will have their data type changed to string (object).","133e0110":"Looking at the descriptive statistics of these numerical features with missing data will allow a better decision being made as to impute these features with a mean or median or zero.","36f2f3e5":"## Models","8abe39ca":"A Q-Q plot can also be used to determine the presence of skew.\nIn statistics, a Q\u2013Q (quantile-quantile) plot is a probability plot, which is a graphical method for comparing two probability distributions by plotting their quantiles against each other. ","68d30228":"It is clear to see that the overall quality of the house and the amount of living area above ground are the highest correlated predictors to the target variable.","cbeeff2e":"### Ridge","e4d293a2":"### ->Imputation (Numerical Features)","435fa99a":"The above Q-Q plot confirms a skewness in the target variable ('SalePrice').\nThis entails a transformation being done before an accurate regression model can be built.\n\nBy mapping the target variable to various distributions a decision can be made on what kind of transformation to select.","adbe3597":"### ->Imputation (Categorical Features)","02a4dac0":"## Package Imports","770397fc":"The features pertaining to the Garage will be imputed to zero as their missing values most likely indicate a lack of a Garage.\n\nThere is however a house with 'GarageYrBlt' set to 2207, this is obvisouly an error.\nLooking at that partiuclar entry it can be seen the house was built in 2006 and a remodel was done in 2007.\nThe remodel most likely included the addition of a garage.\nSo the 'GarageYrBlt' entry for this house will be changed to 2007.","e8aa86ca":"### Lasso","aa1a8c4f":"## Preliminary Data Overview","b010196c":"Applying a power transformation to these numerical features will allow the data to become more Gaussian-like.\n\nThe Box-Cox transformation will be applied on features with a skewness greater than 0.5 using a lambda value obtained from boxcox_normmax(1+x).","fdb17eb4":"## Data Import","3a9c97b8":"### Skewness","63068e11":"### Correlation","f770b4c6":"###  Target variable ('SalePrice')","33e9440f":"Evaluation of the target variable is important as it will allow us to gain a better understanding of how it relates to the predictor variables as well as detecting any possible skew.","3ccfb61c":"### Model Scoring","c4f895aa":"## Predictions","a1138b08":"Finding the correlation between the target variable and other predictor varibles is crucial to model development when it comes to feature selection impacting the overall quality of the model.","3bcc3d70":"These features are intended to show that a house has certain attributes based on its other features. \nSuch as having a Garage, Basement or Pool.","dfeda0b1":"Features with missing data most likely relay the fact that those particular house entries lack the attribute that these features describe.\n\nFor instance, the 'FireplaceQu' feature which describes Fireplace quality with 48.65 % data missing would entail that those houses most likely lack a fireplace.","ee60e3fd":"###  Distribution Plot","d1d486d8":"It can be seen above that the 'SalePrice' does not follow a Normal Distribution.\nWhilst the LogNormal and Johnson SB (Bounded) Distributions are fit quite well,\nThe Johnson SU (Unbounded) Distribution is fit more optimally.\n\nThe Johnson's SU distribution (Unbounded) is a distribution that goes to infinity in both the upper or lower tail.","e948068e":"For the categorical features with missing data pertaining to toward the Garage, Basement, Fence, Fireplace, Alley access and Pool. These features will be changed to 'None' as the houses most likely lack these attributes.","fd39ef97":"From the above Heatmap we can see that there are a decent amount of predictor variables highly correlated with the target variable.","694b105d":"The skewness for the numerical features will be calculated using scipy.stats.skew(x), as for normally distributed data, the skewness should be about 0. Since a log(1+x) transformation was done to the target variable the same needs to be done for the predictor variables depending on their skewness.","14ea1655":"\nIt is clear that the 2 data points in the bottom right are outliers,\nIt's not always appropriate to delete outliers - removing too many can detriment the model's quality.\n\nHowever with backing from the data set author's documentation,\nWe shall remove these and compare the new plot.\n\n","f1c77f9f":"Based on the above distribution and Q-Q plots, the target variable now looks ready for modelling."}}