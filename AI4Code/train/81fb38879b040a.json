{"cell_type":{"ea060a5f":"code","a50386a0":"code","b73b5b6b":"code","06ff6bed":"code","111d2f66":"code","30754086":"code","bea85b12":"code","23aaf2e7":"code","4c79846c":"code","cbb6acb1":"code","2b947aed":"markdown"},"source":{"ea060a5f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nnp.random.seed(42)","a50386a0":"data = np.random.rand(1000, 2) * 2 - 1\nX = data\ny = (data[:, 1] > 0.5) | (data[:, 1] < -0.5).astype(int)","b73b5b6b":"import matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\n\ncm_bright = ListedColormap([\"#0000FF\", \"#FF0000\"])\nplt.scatter(X[:, 0], X[:, 1], c=y, cmap=cm_bright)\nplt.show()","06ff6bed":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","111d2f66":"from sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nSVC_model = SVC(random_state=42) \nSVC_model.fit(X_train, y_train)\nSVC_prediction = SVC_model.predict(X_test)\nplt.scatter(X_test[:, 0], X_test[:, 1], c=SVC_prediction, cmap=cm_bright)\nplt.show()\nprint('accuracy_score:', accuracy_score(SVC_prediction, y_test))","30754086":"from sklearn.tree import DecisionTreeClassifier\ntree_model = DecisionTreeClassifier(max_depth=2, random_state=42)\ntree_model.fit(X_train, y_train)\ntree_prediction = tree_model.predict(X_test)\nplt.scatter(X_test[:, 0], X_test[:, 1], c=tree_prediction, cmap=cm_bright)\nplt.show()\nprint('accuracy_score:', accuracy_score(tree_prediction, y_test))","bea85b12":"from sklearn.ensemble import RandomForestClassifier\nforest_model = RandomForestClassifier(max_depth=1, n_estimators=10, max_features=2, random_state=42) # \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c max_depth > 1 \u043d\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\nforest_model.fit(X_train, y_train)\nforest_prediction = forest_model.predict(X_test)\nplt.scatter(X_test[:, 0], X_test[:, 1], c=forest_prediction, cmap=cm_bright)\nplt.show()\nprint('accuracy_score:', accuracy_score(forest_prediction, y_test))","23aaf2e7":"from sklearn.ensemble import AdaBoostClassifier\nada_model = AdaBoostClassifier(random_state=42)\nada_model.fit(X_train, y_train)\nada_prediction = ada_model.predict(X_test)\nplt.scatter(X_test[:, 0], X_test[:, 1], c=ada_prediction, cmap=cm_bright)\nplt.show()\nprint('accuracy_score:', accuracy_score(ada_prediction, y_test))","4c79846c":"X = np.array([\n    [1, 1],\n    [1, 2],\n    [2, 3],\n    [1, 3],\n    [2, 0]\n])\n\nclasses = [1, -1, -1, -1, 1]\nplt.scatter(X[:, 0], X[:, 1], c=classes, cmap=cm_bright)\nplt.show()","cbb6acb1":"for i in range(1, 10):\n    c = i \/ 4\n\n    clf = SVC(kernel=\"linear\", C=c)\n    clf.fit(X, classes)\n\n    plt.scatter(X[:, 0], X[:, 1], c=classes, s=30, cmap=plt.cm.Paired)\n\n    ax = plt.gca()\n    xlim = ax.get_xlim()\n    ylim = ax.get_ylim()\n\n    xx = np.linspace(xlim[0], xlim[1], 30)\n    yy = np.linspace(ylim[0], ylim[1], 30)\n    YY, XX = np.meshgrid(yy, xx)\n    xy = np.vstack([XX.ravel(), YY.ravel()]).T\n    Z = clf.decision_function(xy).reshape(XX.shape)\n\n    ax.contour(\n        XX, YY, Z, colors=\"k\", levels=[-1, 0, 1], alpha=0.5, linestyles=[\"--\", \"-\", \"--\"]\n    )\n\n    ax.scatter(\n        clf.support_vectors_[:, 0],\n        clf.support_vectors_[:, 1],\n        s=100,\n        linewidth=1,\n        facecolors=\"none\",\n        edgecolors=\"k\",\n    )\n\n    print('C =', c)\n    plt.show()","2b947aed":"# \u0417\u0430\u0434\u0430\u0447\u0430 2"}}