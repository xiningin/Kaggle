{"cell_type":{"094d530c":"code","9e4c941b":"code","d36d31fd":"code","68305747":"code","7472e2d5":"code","69c686f6":"code","1d91a246":"code","7481cf85":"code","cd7eb65c":"code","320f144d":"code","5f2316e9":"code","4a72f463":"code","6c277075":"code","4019f43c":"code","8412321d":"code","4eb19825":"code","7f26b480":"code","eed0ced6":"code","fd356dee":"code","391d1a25":"markdown","3f0d4c11":"markdown","daaaece5":"markdown","37d06aea":"markdown","de025a03":"markdown","a85e31d1":"markdown","d8aec588":"markdown","6343f60c":"markdown","69f04f5b":"markdown","a98f9600":"markdown","8917b82b":"markdown","74a87f40":"markdown","235743c3":"markdown","c23454da":"markdown","8787eec4":"markdown","f2bed624":"markdown","02aecd92":"markdown","c881fddd":"markdown","5fbbb350":"markdown","d828f2a8":"markdown","5efc426e":"markdown","d6c8cd07":"markdown","4bb93e21":"markdown","e6b71920":"markdown","bcaeb9f9":"markdown","0629a33f":"markdown","8f99b2d2":"markdown","26719f30":"markdown","11651bc7":"markdown","556a660e":"markdown","ae5b9550":"markdown"},"source":{"094d530c":"# Importing the necessary modules (Hidden Input\/Output)\n\nimport gc # For Memory Optimization\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns # Not sure if I used this\nfrom wordcloud import WordCloud\nfrom scipy.stats import norm\n\n# Some more necessary libraries (These are for drawing the image on the bar charts)\nimport matplotlib.font_manager as fm\nfrom matplotlib.offsetbox import TextArea, DrawingArea, OffsetImage, AnnotationBbox\nimport matplotlib.image as mpimg\n\n# To Avoid unnecessary warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Since there are many columns, I would like to view them all\npd.set_option('display.max_rows', 100)\npd.set_option('display.max_columns', 400)","9e4c941b":"# Importing the dataset (Hidden Input)\n\ndf = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv')\ndf = df.iloc[1:,:] # The first row was describing the columns. Better to look at the description from the Metadata file provided\ndf.head(3).style.set_properties(**{\"background-color\": \"#76c5d6\",\"color\": \"black\", \"border-color\": \"black\"})","d36d31fd":"# Checking the number of rows and columns\n\nprint('Number of rows:', df.shape[0])\nprint('Number of columns:', df.shape[1])","68305747":"# Visualizing the Age among Kagglers. (Hidden Input)\n\nfig, ax = plt.subplots(figsize=(25,10), facecolor=\"w\")\n\n# Method for image\ndef make_img(img,zoom, x, y):\n    img = mpimg.imread(img)\n    imagebox = OffsetImage(img, zoom=zoom)\n    ab = AnnotationBbox(imagebox, (x,y),frameon=False)\n    ax.add_artist(ab)\n\nimg_file = \"https:\/\/www.freeiconspng.com\/thumbs\/crown-icon\/queen-crown-icon-4.png\"\nzoom = 1\nimg_y= 4.8\n\n# Creating a DataFrame to get the values and their counts (this was for my purpose)\n# new_df = pd.DataFrame(df['Q1'].value_counts())\n\n# I wanted to have the highest value in the middle, so i wrote the following two code lines\nage_bucket = ['70+','55-59','45-49','35-39','22-24','25-29','18-21','30-34','40-44','50-54','60-69']   #new_df.index\nage_bucket_cnt = [128,592,1375,2504,4694,4931,4901,3441,1890,964,553]   #list(new_df.Q1.values)\n\ncolor = ['#E6E6E6', '#189AB4','#E6E6E6','#189AB4','#E6E6E6','#189AB4','#E6E6E6','#189AB4','#E6E6E6','#189AB4','#E6E6E6'] # Deciding the color\nwidth = [0.8, 0.8, 0.8, 0.8, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8] # The Width\nalpha = [0.3, 0.45, 0.5, 0.6, 0.75, 1.0, 0.75, 0.6, 0.5, 0.45, 0.3] # The Opacity\n\nfontsize= [20, 20, 20, 20, 25, 35, 30, 20, 20, 20, 20]\nx_num = [0,1,2,3,4,5,6,7,8,9,10]\n\nfor i in range(11):\n    plt.bar(x=age_bucket[i],height=age_bucket_cnt[i], width=width[i], color=color[i], alpha=alpha[i])\n    plt.text(s=age_bucket[i],x=x_num[i],y=age_bucket_cnt[i],va='bottom',ha='center',font='Comic Sans MS',fontsize=fontsize[i], alpha=alpha[i])\n    plt.text(s=\"Age Bucket of all Kagglers\",x=5,y=5500,font='Comic Sans MS', fontsize=50,va='bottom',ha='center',color='#189AB4')\n\n# Placing the image\nmake_img(img_file,0.2, 5, 4700)    \n    \ngc.collect() # For Memory Optimization\n\nplt.axis('off')\nplt.show()","7472e2d5":"# Setting labels for items in Chart (Hidden Input)\nGender = ['Man', 'Woman', 'Others']\n  \n# Setting size in Chart based on \n# given values\nGender_cnt = [20598, 4890, 485]\n  \n# colors\ncolors = ['#E6E6E6', '#189AB4', '#FFFF00', \n          '#ADFF2F', '#FFA500']\n# explosion\nexplode = (0.05, 0.05, 0.2)\n  \n    \nplt.figure(figsize=[20,10])    \n# Pie Chart\nplt.pie(Gender_cnt, colors=colors,\n        autopct='%1.1f%%', pctdistance=1.2,\n        explode=explode,)\n  \n# draw circle\ncentre_circle = plt.Circle((0, 0), 0.70, fc='white')\nfig = plt.gcf()\n\nplt.legend(Gender, loc = \"upper right\",title=\"Genders\", prop={'size': 15})\n     \n# Adding Circle in Pie chart\nfig.gca().add_artist(centre_circle)\n  \nplt.rcParams['font.size'] = 25    \n# Adding Title of chart\nplt.text(s=\"Gender Diversity in Kaggle\",x=0,y=1.3,font='Comic Sans MS', fontsize=50,va='bottom',ha='center',color='#189AB4')\n  \ngc.collect()    \n# Displaing Chart\nplt.show()","69c686f6":"# Importing the module Geopandas (Hidden Input) \nimport geopandas as gpd\n\n# List of countries we are interested in\nlis_countries = [\"Algeria\",\"Argentina\",\"Australia\",\"Austria\",\"Bangladesh\",\"Belarus\",\"Belgium\",\"Brazil\",\"Canada\",\"Chile\",\"China\",\"Colombia\",\n                 \"Czechia\",\"Denmark\",\"Ecuador\",\"Egypt\",\"Ethiopia\",\"France\",\"Germany\",\"Ghana\",\"Greece\",\"India\",\"Indonesia\",\"Iraq\",\"Ireland\",\n                 \"Israel\",\"Italy\",\"Japan\",\"Kazakhstan\",\"Kenya\",\"Malaysia\",\"Mexico\",\"Morocco\",\"Nepal\",\"Netherlands\",\"Nigeria\",\"Norway\",\"Pakistan\",\n                 \"Peru\",\"Philippines\",\"Poland\",\"Portugal\",\"Romania\",\"Russia\",\"Saudi Arabia\",\"South Africa\",\"South Korea\",\"Spain\",\"Sri Lanka\",\n                 \"Sweden\",\"Switzerland\",\"Taiwan\",\"Thailand\",\"Tunisia\",\"Turkey\",\"Uganda\",\"Ukraine\",\"United Arab Emirates\",\"United Kingdom\",\n                 \"United States of America\",\"Vietnam\"]\n\n# Reading the geopandas data \nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n\ncountry_data = lis_countries # Passing the list of countries here\ncountry_geo = list(world['name']) # The country list from the geopandas dataset\n\n# List of all the values of population of Kagglers from each country\nlis_pop = [44,182,264,51,317,51,65,751,331,102,814,225,63,48,50,482,43,401,470,99,102,7434,444,43,84,138,311,921,45,248,156,279,140,75,153,\n           702,45,530,117,108,219,119,61,742,89,146,359,454,106,81,71,334,123,109,416,47,186,111,550,2650,277]\n\n# Next we need to create a dataframe with lis_countries and lis_pop\nour_country_analysis = pd.DataFrame(lis_countries, columns=['Country'])\nour_country_analysis['KagglePopulation'] = lis_pop\n\n# Next, we are going to visualize this...\nmapped = world.set_index('name').join(our_country_analysis.set_index('Country')).reset_index()\n\nto_be_mapped = 'KagglePopulation'\nvmin, vmax = 0,10000\nfig, ax = plt.subplots(1, figsize=(25,30))\n\nmapped.dropna().plot(column=to_be_mapped, cmap='cividis', linewidth=0.8, ax=ax, edgecolors='1', alpha=0.7)\n\nax.text(s=\"Kagglers All Around the Globe\",x=0,y=100,font='Comic Sans MS', fontsize=50,va='bottom',ha='center',color='#189AB4')\nax.set_axis_off()\n\nsm = plt.cm.ScalarMappable(cmap='cividis', norm=plt.Normalize(vmin=vmin, vmax=vmax))\nsm._A = []\n\ngc.collect()\ncbar = fig.colorbar(sm, orientation='vertical', shrink= .25)","1d91a246":"# Visualizing the Formal Level of Education. (Hidden Input)\n\nfig, ax = plt.subplots(figsize=(25,10), facecolor=\"w\")\n\n# Method for image\ndef make_img(img,zoom, x, y):\n    img = mpimg.imread(img)\n    imagebox = OffsetImage(img, zoom=zoom)\n    ab = AnnotationBbox(imagebox, (x,y),frameon=False)\n    ax.add_artist(ab)\n\nimg_file = \"https:\/\/www.freeiconspng.com\/thumbs\/crown-icon\/queen-crown-icon-4.png\"\nzoom = 1\nimg_y= 4.8\n\n# Creating a DataFrame to get the values and their counts (this was for my purpose)\n# new_df = pd.DataFrame(df['Q1'].value_counts())\n\n# I wanted to have the highest value in the middle, so i wrote the following two code lines\nage_bucket = ['Professional Doctorate','High School','Bachelor\u2019s degree','Master\u2019s degree','Doctoral degree','Others','No Answer']   #new_df.index\nage_bucket_cnt = [360,417,9907,10132,2795,1735,627]   #list(new_df.Q1.values)\n\ncolor = ['#E6E6E6','#189AB4','#E6E6E6','#189AB4','#E6E6E6','#189AB4','#E6E6E6'] # Deciding the color\nwidth = [0.8, 0.8, 0.9, 0.9, 0.9, 0.8, 0.8,] # The Width\nalpha = [0.5, 0.6, 0.75, 1.0, 0.75, 0.6, 0.5] # The Opacity\n\nfontsize= [12, 16, 18, 21, 16, 16, 16]\nx_num = [0,1,2,3,4,5,6]\n\nfor i in range(7):\n    plt.bar(x=age_bucket[i],height=age_bucket_cnt[i], width=width[i], color=color[i], alpha=alpha[i])\n    plt.text(s=age_bucket[i],x=x_num[i],y=age_bucket_cnt[i],va='bottom',ha='center',font='Comic Sans MS',fontsize=fontsize[i], alpha=alpha[i])\n    plt.text(s=\"Educational Qualifications of all Kagglers\",x=3,y=11000,font='Comic Sans MS', fontsize=50,va='bottom',ha='center',color='#189AB4')\n\n# Placing the image\nmake_img(img_file,0.25, 3, 9500)      \n    \ngc.collect() # For Memory Optimization\n\nplt.axis('off')\nplt.show()","7481cf85":"# Visualizing the Current Role (Hidden Input)\n\n# Method for image\ndef make_img(img,zoom, x, y):\n    img = mpimg.imread(img)\n    imagebox = OffsetImage(img, zoom=zoom)\n    ab = AnnotationBbox(imagebox, (x,y),frameon=False)\n    ax.add_artist(ab)\n\nimg_file = \"https:\/\/www.freeiconspng.com\/thumbs\/crown-icon\/queen-crown-icon-4.png\"\nzoom = 1\nimg_y= 4.8\n\nfig, ax = plt.subplots(figsize=(25,10), facecolor=\"w\")\n\n# Creating a DataFrame to get the values and their counts (this was for my purpose)\n# new_df = pd.DataFrame(df['Q1'].value_counts())\n\n# I wanted to have the highest value in the middle, so i wrote the following two code lines\nage_bucket = ['Developer\\n Relations\\n\/Advocacy','Statistician','Data\\n Engineer','Business\\n Analyst','Research\\n Scientist','Data\\n Analyst','Software\\n Engineer','Student',\n              'Data\\n Scientist','Other','Unemployed','ML\\n Engineer','Project\\n Manager','Product\\n Manager','DB\\n Engineer']   #new_df.index\nage_bucket_cnt = [99,313,668,968,1538,2301,2449,6804,3414,2393,1986,1499,849,319,171]   #list(new_df.Q1.values)\n\ncolor = ['#E6E6E6', '#189AB4', '#E6E6E6', '#189AB4','#E6E6E6','#189AB4','#E6E6E6','#189AB4','#E6E6E6','#189AB4','#E6E6E6','#189AB4','#E6E6E6','#189AB4', '#E6E6E6'] # Deciding the color\nwidth = [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8] # The Width\nalpha = [0.3, 0.45, 0.3, 0.45, 0.5, 0.6, 0.75, 1.0, 0.75, 0.6, 0.5, 0.45, 0.3, 0.3, 0.45] # The Opacity\n\nfontsize= [12, 12, 14, 14, 14, 14, 18, 20, 16, 14, 12, 14, 14, 12, 12]\nx_num = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n\nfor i in range(15):\n    plt.bar(x=age_bucket[i],height=age_bucket_cnt[i], width=width[i], color=color[i], alpha=alpha[i])\n    plt.text(s=age_bucket[i],x=x_num[i],y=age_bucket_cnt[i],va='bottom',ha='center',font='Comic Sans MS',fontsize=fontsize[i], alpha=alpha[i])\n    plt.text(s=\"Current Role of all Kagglers\",x=7.5,y=7500,font='Comic Sans MS', fontsize=50,va='bottom',ha='center',color='#189AB4')\n\n# Placing the image\nmake_img(img_file,0.15, 7, 6500)        \n    \ngc.collect() # For Memory Optimization\n\nplt.axis('off')\nplt.show()","cd7eb65c":"# Visualizing the \"For how long have you been programming\" (Hidden Input)\n\nyears_bin = ['1-3years','<1years','3-5years','5-10years','10-20years','20+years','Never Coded']\nyears_cnt = [7874, 5881, 4061, 3099, 2166, 1860, 1032]\n\nfig = plt.figure(figsize=(20,10))\nplt.barh(width=years_cnt, y=years_bin, height=0.7, color = ['#189AB4', '#189AB4','#189AB4','#E6E6E6','#E6E6E6', '#E6E6E6', '#E6E6E6'], alpha=0.8)\n\n##################### For the Years of Experience ###################################\ns1 = ['1-3years','<1years','3-5years','5-10years','10-20years','20+years','Never Coded']\nx1 = [8874, 6881, 5061, 4099, 3366, 2860, 2432]\ny1 = [0,1,2,3,4,5,6]\n\n\nfor i in range(7):\n    plt.text(s = s1[i], x=x1[i], y=y1[i] ,font = 'Comic Sans MS', fontsize=25,va='center',ha='right',alpha=0.8)\n\nplt.title(\"Average Years of Programming Experience of Kagglers\",font='Comic Sans MS', fontsize=42, pad=20, color='#189AB4')\nplt.axis('off')\nplt.gca().invert_yaxis()\nplt.show()","320f144d":"# Setting labels for items in Chart (Hidden Input)\nTool = ['Python', 'R']\n  \n# Setting size in Chart based on \n# given values\nTool_cnt = [21860, 5334]\n  \n# colors\ncolors = ['#E6E6E6', '#189AB4']\n\n# explosion\nexplode = (0.05, 0.05)\n  \n\nplt.figure(figsize=[20,10])   \n\n# Pie Chart\nplt.pie(Tool_cnt, colors=colors,\n        autopct='%1.1f%%', pctdistance=1.2,\n        explode=explode,)\n  \n# draw circle\ncentre_circle = plt.Circle((0, 0), 0.70, fc='white')\nfig = plt.gcf()\n\nplt.legend(Tool, loc = \"upper right\",title=\"Programming Languages\", prop={'size': 15})\n     \n# Adding Circle in Pie chart\nfig.gca().add_artist(centre_circle)\n  \nplt.rcParams['font.size'] = 25    \n# Adding Title of chart\nplt.text(s=\"Which Programming Tool do they Prefer?\",x=0,y=1.3,font='Comic Sans MS', fontsize=50,va='bottom',ha='center',color='#189AB4')\n  \ngc.collect()    \n# Displaing Chart\nplt.show()","5f2316e9":"# Fixing the values for 'Q8'\ndf['Q8'] = df['Q8'].apply(lambda x: 'Others' if x not in ['Python','R','SQL'] else x)\ndf['Q8'].value_counts()\n\n# Setting labels for items in Chart (Hidden Input)\nTool = ['Python', 'R', 'SQL', 'Others']\n  \n# Setting size in Chart based on \n# given values\nTool_cnt = [20213, 1445, 1338, 2977]\n  \n# colors\ncolors = ['#E6E6E6', '#189AB4', '#FFFF00', '#ADFF2F']\n\n# explosion\nexplode = (0.05, 0.05, 0.05, 0.05)\n  \n\nplt.figure(figsize=[20,10])   \n\n# Pie Chart\nplt.pie(Tool_cnt, colors=colors,\n        autopct='%1.1f%%', pctdistance=1.2,\n        explode=explode,)\n  \n# draw circle\ncentre_circle = plt.Circle((0, 0), 0.70, fc='white')\nfig = plt.gcf()\n\nplt.legend(Tool, loc = \"upper right\",title=\"Programming Languages\", prop={'size': 15})\n     \n# Adding Circle in Pie chart\nfig.gca().add_artist(centre_circle)\n  \nplt.rcParams['font.size'] = 25    \n# Adding Title of chart\nplt.text(s=\"What do they Recommend for Data Science?\",x=0,y=1.3,font='Comic Sans MS', fontsize=50,va='bottom',ha='center',color='#189AB4')\n  \ngc.collect()    \n# Displaing Chart\nplt.show()","4a72f463":"# Getting all the names and their values (Hidden Input)\nname = ['JupyterLab','RStudio','Visual Studio','VS Code','PyCharm','Spyder','Notepad++','Sublime Text','Vim\/Emacs','MATLAB','Jupyter Notebook','None','Other']\nvalue = [5488,4771,4110,10040,7468,3794,3937,2839,1646,2203,16233,526,1491]\n\n# Creating a dataframe to store this information\ndf_nine_ = pd.DataFrame(name, columns=['IDE'])\ndf_nine_['Values'] = value\ndf_nine_ = df_nine_.sort_values(by=\"Values\", ascending=False)\ndf_nine_\n\nfig = plt.figure(figsize=(20,10))\nplt.barh(width=list(df_nine_['Values'].unique()), y=list(df_nine_['IDE'].unique()), height=0.7, color = ['#189AB4', '#189AB4', '#189AB4', '#E6E6E6','#E6E6E6','#E6E6E6','#E6E6E6', '#E6E6E6', '#E6E6E6', '#E6E6E6', '#E6E6E6', '#E6E6E6', '#E6E6E6'], alpha=0.8)\n\n##################### For the Years of Experience ###################################\ns1 = list(df_nine_['IDE'].unique())\nx1 = [19833,12040,9468,7788,6471,6810,6437,5294,5539,4003,3946,2691,1726]\ny1 = [0,1,2,3,4,5,6,7,8,9,10,11,12]\n\n\nfor i in range(13):\n    plt.text(s = s1[i], x=x1[i], y=y1[i] ,font = 'Comic Sans MS', fontsize=25,va='center',ha='right',alpha=0.8)\n\n\nplt.title(\"Preferred IDE of Kagglers\",font='Comic Sans MS', fontsize=42, pad=20, color='#189AB4')\nplt.axis('off')\nplt.gca().invert_yaxis()\ngc.collect()\nplt.show()","6c277075":"# Method for image\ndef make_img(img,zoom, x, y):\n    img = mpimg.imread(img)\n    imagebox = OffsetImage(img, zoom=zoom)\n    ab = AnnotationBbox(imagebox, (x,y),frameon=False)\n    ax.add_artist(ab)\n\nimg_file = \"https:\/\/www.freeiconspng.com\/thumbs\/crown-icon\/queen-crown-icon-4.png\"\nzoom = 1\nimg_y= 4.8\n\n\n# Visualizing the Hosted Notebooks. (Hidden Input)\n\nfig, ax = plt.subplots(figsize=(25,10), facecolor=\"w\")\n\n# Creating a DataFrame to get the values and their counts (this was for my purpose)\n# new_df = pd.DataFrame(df['Q1'].value_counts())\n\n# I wanted to have the highest value in the middle, so i wrote the following two code lines\nage_bucket = ['None','Colab Notebook','Kaggle Notebook']   #new_df.index\nage_bucket_cnt = [7174,9792,9507]   #list(new_df.Q1.values)\n\ncolor = ['#E6E6E6','#189AB4','#E6E6E6'] # Deciding the color\nwidth = [0.9, 0.9, 0.9] # The Width\nalpha = [0.55, 1.0, 0.75] # The Opacity\n\nfontsize= [25, 45, 30]\nx_num = [0,1,2]\n\nfor i in range(3):\n    plt.bar(x=age_bucket[i],height=age_bucket_cnt[i], width=width[i], color=color[i], alpha=alpha[i])\n    plt.text(s=age_bucket[i],x=x_num[i],y=age_bucket_cnt[i],va='bottom',ha='center',font='Comic Sans MS',fontsize=fontsize[i], alpha=alpha[i])\n    plt.text(s=\"Preferred Hosted Notebooks\",x=1,y=11000,font='Comic Sans MS', fontsize=50,va='bottom',ha='center',color='#189AB4')\n\n# Placing the image\nmake_img(img_file,0.3, 1, 9000)    \n    \ngc.collect() # For Memory Optimization\n\nplt.axis('off')\nplt.show()","4019f43c":"# Fixing the column data before making a Word Cloud (Hidden Input)\ndf['Q11']=df['Q11'].map({\"A laptop\":\"Laptop\",\"A personal computer \/ desktop\":\"Personal Computer\",\n                         \"A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc)\":\"Cloud Platform\",\n                         \"A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)\":\"DeepLearning Workstation\",\"None\":\"None\",\"Other\":\"Other\"})\ndf['Q11']=df['Q11'].astype(str)\n\ndf['Q11'].value_counts()\n\n# Word Cloud inspired by Girish Kumar Sahoo's notebook : https:\/\/www.kaggle.com\/girishkumarsahu\/learnplatform-covid-19-impact\n\n# get unique Name\nname= df['Q11'].unique()\n\n# convert numpy array to string\nname_str = \",\".join(name)\n\n# create WordCloud with converted string\nwordcloud = WordCloud(width = 1000, height = 500, random_state=1, background_color='white', collocations=False).generate(name_str)\nplt.figure(figsize=(20, 10))\nplt.imshow(wordcloud) \nplt.axis(\"off\")\nplt.show()","8412321d":"# Getting the values and their counts (Hidden Input)\nname = [\"None\",\"NVIDIA GPUs\",\"Google Cloud TPUs\",\"Other\",\"AWS Inferentia Chips\",\"AWS Trainium Chips\"]\ncount = [13234,8036,3451,867,416,414]\n\n# Visualizing using a barh:\nfig = plt.figure(figsize=(20,10))\nplt.barh(width=count, y=name, height=0.7, color = ['#E6E6E6', '#189AB4', '#189AB4', '#E6E6E6','#E6E6E6','#E6E6E6'], alpha=0.8)\n\n##################### For the Years of Experience ###################################\ns1 = name\nx1 = [14234,10236,6651,2067,3916,3714]\ny1 = [0,1,2,3,4,5]\n\n\nfor i in range(6):\n    plt.text(s = s1[i], x=x1[i], y=y1[i] ,font = 'Comic Sans MS', fontsize=25,va='center',ha='right',alpha=0.8)\n\nplt.title(\"Specialized Hardware\",font='Comic Sans MS', fontsize=42, pad=20, color='#189AB4')\nplt.axis('off')\nplt.gca().invert_yaxis()\ngc.collect()\nplt.show()","4eb19825":"# Visualizing using a barh: (Hidden Input)\nname = ['Never','2-5 times','Once','6-25 times','More than 25 times']\ncount = list(df['Q13'].value_counts())\n\nfig = plt.figure(figsize=(20,10))\nplt.barh(width=count, y=name, height=0.7, color = ['#E6E6E6', '#189AB4', '#189AB4', '#E6E6E6','#E6E6E6'], alpha=0.8)\n\n##################### For the TPU ###################################\ns1 = name\nx1 = [17734,5436,4151,3167,4516]\ny1 = [0,1,2,3,4]\n\n\nfor i in range(5):\n    plt.text(s = s1[i], x=x1[i], y=y1[i] ,font = 'Comic Sans MS', fontsize=25,va='center',ha='right',alpha=0.8)\n\nplt.title(\"TPU Usage of Kagglers\",font='Comic Sans MS', fontsize=42, pad=20, color='#189AB4')\nplt.axis('off')\nplt.gca().invert_yaxis()\ngc.collect()\nplt.show()","7f26b480":"# Creating subplots this time: (Hidden Input)\nfig, axis = plt.subplots(6, 1, figsize=(20, 50))\n\n# Declaring all the values and their counts:\n# For Q14:\nname14 = ['Matplotlib','Seaborn','Plotly','GGplot','None','Shiny','Geoplotlib','Bokeh','D3 js','Other','Folium','Altair',]\nval14 = [17595,12586,5778,5100,3479,1322,1148,1050,978,776,716,309]\n\n# For Q15:\nname15 = ['<1 year','1-2 years','No ML usage','2-3 years','3-4 years','5-10 years','4-5 years','10-20 years','20+ years']\nval15 = [9163,4675,3889,2305,1171,1033,945,362,211]\n\n# For Q16:\nname16 = ['Scikit-Learn','TensorFlow','Keras','PyTorch','XGBoost','LightGBM','None','CatBoost','Higgingface','Pytorch Lightning','Caret',\n          'Fast.ai','Prophet','Tidymodels','H20 3','Other','MXNet','JAX']\nval16 = [13987,9371,7975,6088,5974,2635,1916,1512,1122,1060,1009,824,800,678,488,439,252,190]\n\n# For Q17:\nname17 = ['Linear Models','Tree Models','CNN','Dense Neural Net','Bayesian Approch','RNN','Transformer Networks','None','GAN','Evolutionary Approaches']\nval17 = [13952,11863,7410,4468,4392,4228,2273,1470,1353,963]\n\n# For Q18:\nname18 = ['VGG\/Inception\/ResNet','Image Segmentation Method','Object Detection Method','General Purpose Img\/Vid Tools','GAN','None','Other']\nval18 = [4373,2740,2716,2662,1492,1439,119]\n\n# For Q19:\nname19 = ['Word Embeddings\/Vectors','Transformer Lang Tools','Encoder-Decoder Models','None','Contextualized Embeddings']\nval19 = [2643,2351,2023,1331,748]\n\n##### Visualization Begins Here #####\n\n# Visualizing using a barh Q14:\n\naxis[0].barh(width=val14, y=name14, height=0.7, color = ['#189AB4', '#189AB4', '#189AB4', '#E6E6E6','#E6E6E6','#E6E6E6','#E6E6E6','#E6E6E6'\n                                                    ,'#E6E6E6','#E6E6E6','#E6E6E6','#E6E6E6'], alpha=0.8)\n\n##################### For the Visualization Tool ###################################\ns1 = name14\nx1 = [18695,13586,6578,6000,4279,2122,2248,1850,1578,1376,1416,909]\ny1 = [0,1,2,3,4,5,6,7,8,9,10,11]\n\n\nfor i in range(12):\n    axis[0].text(s = s1[i], x=x1[i], y=y1[i] ,font = 'Comic Sans MS', fontsize=12,va='center',ha='right',alpha=0.8)\n\naxis[0].title.set_text(\"Favourite Visualization Module\")\naxis[0].title.set_color(\"#189AB4\")\naxis[0].axis('off')\naxis[0].invert_yaxis()\ngc.collect()\n\n#################################################################################################################################\n# Visualizing using a barh Q15:\n\naxis[1].barh(width=val15, y=name15, height=0.7, color = ['#189AB4', '#189AB4', '#189AB4', '#E6E6E6','#E6E6E6','#E6E6E6','#E6E6E6','#E6E6E6'\n                                                    ,'#E6E6E6'], alpha=0.8)\n\n##################### For the ML Experience ###################################\ns2 = name15\nx2 = [9663,5275,4689,2905,1771,1633,1490,1062,811]\ny2 = [0,1,2,3,4,5,6,7,8]\n\n\nfor i in range(9):\n    axis[1].text(s = s2[i], x=x2[i], y=y2[i] ,font = 'Comic Sans MS', fontsize=12,va='center',ha='right',alpha=0.8)\n\n\naxis[1].title.set_text(\"Machine Learning Usage\")\naxis[1].title.set_color(\"#189AB4\")\naxis[1].axis('off')\naxis[1].invert_yaxis()\ngc.collect()\n#################################################################################################################################\n# Visualizing using a barh Q16:\n\naxis[2].barh(width=val16, y=name16, height=0.7, color = ['#189AB4', '#189AB4', '#189AB4', '#E6E6E6','#E6E6E6','#E6E6E6','#E6E6E6','#E6E6E6'\n                                                    ,'#E6E6E6','#E6E6E6','#E6E6E6','#E6E6E6','#E6E6E6','#E6E6E6','#E6E6E6','#E6E6E6'\n                                                        ,'#E6E6E6','#E6E6E6','#E6E6E6'], alpha=0.8)\n\n##################### For the Fav SKLearn Tool ###################################\ns3 = name16\nx3 = [14987,10271,8475,6788,6674,3435,2416,2312,2122,2480,1509,1424,1450,1648,988,939,852,490]\ny3 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\n\n\nfor i in range(18):\n    axis[2].text(s = s3[i], x=x3[i], y=y3[i] ,font = 'Comic Sans MS', fontsize=12,va='center',ha='right',alpha=0.8)\n\n\naxis[2].title.set_text(\"Popular ML Frameworks\")\naxis[2].title.set_color(\"#189AB4\")\naxis[2].axis('off')\naxis[2].invert_yaxis()\ngc.collect()\n#################################################################################################################################\n# Visualizing using a barh Q17:\n\naxis[3].barh(width=val17, y=name17, height=0.7, color = ['#189AB4', '#189AB4', '#189AB4', '#E6E6E6','#E6E6E6','#E6E6E6','#E6E6E6','#E6E6E6'\n                                                    ,'#E6E6E6','#E6E6E6'], alpha=0.8)\n\n##################### For the ML Algorithms ###################################\ns3 = name17\nx3 = [15152,12863,7810,5868,5902,4628,4073,1970,1753,2963]\ny3 = [0,1,2,3,4,5,6,7,8,9]\n\n\nfor i in range(10):\n    axis[3].text(s = s3[i], x=x3[i], y=y3[i] ,font = 'Comic Sans MS', fontsize=12,va='center',ha='right',alpha=0.8)\n\n\naxis[3].title.set_text(\"Most Popular ML Algorithms\")\naxis[3].title.set_color(\"#189AB4\")\naxis[3].axis('off')\naxis[3].invert_yaxis()\ngc.collect()\n#################################################################################################################################\n# Visualizing using a barh Q18:\n\naxis[4].barh(width=val18, y=name18, height=0.7, color = ['#189AB4', '#189AB4', '#189AB4', '#E6E6E6','#E6E6E6','#E6E6E6','#E6E6E6'], alpha=0.8)\n\n##################### For the Computer Vision ###################################\ns4 = name18\nx4 = [4973,3490,3346,3450,1632,1579,269]\ny4 = [0,1,2,3,4,5,6]\n\n\nfor i in range(7):\n    axis[4].text(s = s4[i], x=x4[i], y=y4[i] ,font = 'Comic Sans MS', fontsize=12,va='center',ha='right',alpha=0.8)\n\n\naxis[4].title.set_text(\"Popular Computer Vision Tools\")\naxis[4].title.set_color(\"#189AB4\")\naxis[4].axis('off')\naxis[4].invert_yaxis()\ngc.collect()\n#################################################################################################################################\n# Visualizing using a barh Q19:\n\naxis[5].barh(width=val19, y=name19, height=0.7, color = ['#189AB4', '#189AB4', '#189AB4', '#E6E6E6', '#E6E6E6'], alpha=0.8)\n\n##################### For the NLP Methods ###################################\ns5 = name19\nx5 = [3043,2721,2423,1431,1188]\ny5 = [0,1,2,3,4]\n\n\nfor i in range(5):\n    axis[5].text(s = s5[i], x=x5[i], y=y5[i] ,font = 'Comic Sans MS', fontsize=12,va='center',ha='right',alpha=0.8)\n\n\naxis[5].title.set_text(\"Popular NLP Methods\")\naxis[5].title.set_color(\"#189AB4\")\naxis[5].axis('off')\naxis[5].invert_yaxis()\ngc.collect()\n\nplt.show()","eed0ced6":"# Command to install circlify (Hidden Input\/Output)\n!pip install circlify","fd356dee":"# import the circlify library (Hidden Input)\nimport circlify\n\nQ20 = df['Q20'].value_counts().tolist()\n\n\nQ20_labels = ['Hospitality\/\\nEntertainment\/\\nSports','Military\/\\nSecurity\/\\nDefense','Online Business\/\\nInternet-based\\n Sales','Non-profit\/Service','Shipping\/\\nTransportation','Broadcasting\/\\nCommunications',\n'Marketing\/CRM','Insurance\/\\nRisk Assessment','Retail\/Sales','Energy\/Mining','Online Service\/\\nInternet-based\\n Services','Government\/Public Service','Medical\/Pharmaceutical',\n'Manufacturing\/Fabrication','Other','Accounting\/Finance','Academics\/Education','Computers\/Technology']\n\n# compute circle positions:\ncircles = circlify.circlify(\n    Q20, \n    show_enclosure=False, \n    target_enclosure=circlify.Circle(x=0, y=0, r=4)\n)\n\n# Create just a figure and only one subplot\nfig, ax = plt.subplots(figsize=(30,30))\n\n# Remove axes\nax.axis('off')\n\n# Find axis boundaries\nlim = max(\n    max(\n        abs(circle.x) + circle.r,\n        abs(circle.y) + circle.r,\n    )\n    for circle in circles\n)\nplt.xlim(-lim, lim)\nplt.ylim(-lim, lim)\n\n# list of labels\nlabels = Q20_labels\n\n# print circles\nfor circle, label in zip(circles, labels):\n    x, y, r = circle\n    if label in ['Computers\/Technology','Academics\/Education','Accounting\/Finance']:\n        ax.add_patch(plt.Circle((x, y), r*0.95, alpha=0.6, facecolor=\"#189AB4\", edgecolor=\"#189AB4\"))\n        plt.annotate(label, (x,y ) ,va='center', ha='center',  fontsize=30)\n    else:\n        ax.add_patch(plt.Circle((x, y), r*0.95, alpha=0.5, facecolor='#E6E6E6', edgecolor='#E6E6E6'))\n        plt.annotate(label, (x,y ) ,va='center', ha='center',  fontsize=15)\n\nplt.title(\"Type of Industry\",font='Comic Sans MS', fontsize=80, color='#189AB4')\nplt.show()","391d1a25":"<h1 style=\"color:#189AB4\"><strong>The First Question!<\/strong> What is your age?<\/h1>","3f0d4c11":"<h1 style=\"color:#189AB4\"><strong>Dad... I need an Nvdia RTX 3090Ti for School\ud83d\udc49\ud83d\udc48<\/strong><\/h1>\n\n<p style=\"font-size:120%\">Ofcourse I need a 3090Ti for studies. Kidding. <strong>Nvdia GPUs<\/strong> are preferred by many for <mark>it's ability to process ML models and especially DL models faster!<\/mark><\/p>\n<p style=\"font-size:120%\">That is followed by <strong>Google Cloud TPUs<\/strong> <mark>due to it's easy availability.<\/mark><\/p>\n<p style=\"font-size:120%\">Also, if you notice, there are many Kagglers that do not use any specialized Hardware. Now there is a reason for that. <mark>Not everyone knows Deep Learning and Scikit Learn does not support GPUs.<\/mark> Therefore, for most Kagglers, they do not require any hardware as such to increase their computing power!<\/p>\n<p style=\"font-size:120%\">Now this is not the case for people using TPUs and GPUs. As of now, I am speculating <mark>these <strong>Kagglers participate in Competitions a lot!<\/strong> And performing large number of cross-validations\/training on several models takes <strong>a lot of time and effort<\/strong> if there is no GPUs or TPUs.<\/mark><\/p>","daaaece5":"<h1 style=\"color:#189AB4\"><strong>I spy... A nimbus in the sky!<\/strong><\/h1>\n\n<p style=\"font-size:120%\">From the word cloud, it is evident that most Kagglers like to use their own <strong>Laptop<\/strong>, followed by <strong>Cloud Platform<\/strong> and <strong>Personal Computer<\/strong>.<\/p>\n<p style=\"font-size:120%\">Remember, that from our previous analysis, we saw how <mark>most of the individuals on Kaggle are Students?<\/mark> They might not have the money for fancy Deep Learning Platforms and cool gadgets like that. Hence, a <strong>Laptop is a very popular choice<\/strong>.<\/p>\n<p style=\"font-size:120%\">Another thing noticing here is that, the next best choice are the cloud computing platforms. <mark>Usually this is the case for people who's Laptops or Personal Computers are not compatible enough to run Machine Learning libraries.<\/mark><\/p>","37d06aea":"<h1 style=\"color:#189AB4;font-size:60px;\"><strong>User<\/strong> <strong style=\"color:black\">Resource Preferences:<\/strong><\/h1>","de025a03":"<h1 style=\"color:#189AB4\"><strong>Let me just paste this one from StackOverflow...<\/strong><\/h1>\n\n<p style=\"font-size:120%\">Now this is what I was expecting atleast. If you see the graphs above, you will realise that <strong><i>\"Our Kaggle Community is very young!\"<\/i><\/strong> like <a href=\"https:\/\/www.kaggle.com\/vivek468\/what-s-up-kaggle-clean-eda\/comments\" style=\"text-decoration:none\">Mar\u00edlia Prata<\/a> put it in her words.<\/p>\n<p style=\"font-size:120%\">Therefore, there are many Kagglers who's Experience in Programming is just <strong>1-3 years<\/strong>.<\/p>\n<p style=\"font-size:120%\">We see that, <mark>as the years of experience increases, the number of Kagglers in our community decreases.<\/mark><\/p>\n<p style=\"font-size:120%\">Kaggle is a great place for anyone willing to step into the World of Data. There is, or at-least I would say, that there are good proportion of skilled and novice Kagglers on the platform!<\/p>","a85e31d1":"<h1 style=\"color:#189AB4\"><strong>A Quick Peek, at Professional Role\/Job Titles of Kagglers<\/strong><\/h1>","d8aec588":"<h1 style=\"color:#189AB4\"><strong>\u221e Power <\/strong><\/h1>\n\n<p style=\"font-size:120%\"><strong>TPUs<\/strong> are now available on Kaggle and are <mark>mainly used during Competitions or for other Deep Learning and Computer Vision purposes.<\/mark><\/p>\n<p style=\"font-size:120%\">The reason why most people do not use TPUs remains almost the same as why people do not use GPUs<\/p>\n<p style=\"font-size:120%\">Mostly Kagglers tend to use it <strong>2-5 times a week<\/strong> or maybe <strong>once in a while.<\/strong><\/p>","6343f60c":"<h1 style=\"color:#189AB4\"><a href=\"https:\/\/colab.research.google.com\/\" style=\"text-decoration:none;color:#189AB4\"><strong>https:\/\/colab.research.google.com\/<\/strong><\/a><\/h1>\n\n<p style=\"font-size:120%\">Google colab just barely edges out Kaggle Hosted Notebook services. Just like the Kaggle hosted interface, it is simple to use and has <strong>no limits on the GPU usage<\/strong>. Maybe that is one of the reason why people prefer this? Or is it because, <strong>users can directly get their datasets from the google drive?<\/strong> The fact that <strong>we can connect to our local runtime?<\/strong> Who knows.<\/p>\n<p style=\"font-size:120%\">Whatever might be the case, it is worth to notice that a decent number of people still prefer to run their codes on their local machine. Probably, <mark>in my opinion if Kaggle Kernels can be made more user friendly and provide more features similar to that of Google colab, it might turn out to be a popular choice by next year!<\/mark><\/p>","69f04f5b":"<h1 style=\"color:#189AB4;font-size:80px;\"><strong>Kaggle Survey <strong style=\"color:black\">2021<\/strong><\/strong><\/h1>\n\n<p style=\"font-size:120%\">In the fifth year running this survey, Kaggle staffs are once again awed by the global, diverse, and dynamic nature of the data science and machine learning industry. This survey data EDA provides an overview of the industry on an aggregate scale, but it also leaves them wanting to know more about the many specific communities comprised within the survey. For that reason, they\u2019re inviting the Kaggle community to dive deep into the survey datasets and help them tell the diverse stories of data scientists from around the world.<\/p>\n\n<p style=\"font-size:120%\"><strong>The challenge objective:<\/strong> tell a data story about a subset of the data science community represented in this survey, through a combination of both narrative text and data exploration. A \u201cstory\u201d could be defined any number of ways, and that\u2019s deliberate. The challenge is to deeply explore (through data) the impact, priorities, or concerns of a specific group of data science and machine learning practitioners. That group can be defined in the macro (for example: anyone who does most of their coding in Python) or the micro (for example: female data science students studying machine learning in masters programs). This is an opportunity to be creative and tell the story of a community you identify with or are passionate about!<\/p>","a98f9600":"<h1 style=\"color:#189AB4\"><strong>We like it SIMPLE!<\/strong><\/h1>\n\n<p style=\"font-size:120%\"><strong>Jupyter Notebook<\/strong> is very user friendly! We simply type the codes in the cell and press <strong>Shift+Enter<\/strong> to execute. Simple! And the result is also displayed just below.<\/p>\n<p style=\"font-size:120%\">Similar case for <strong>VS Code<\/strong> and <strong>PyCharm<\/strong>. They are very user friendly! Also, there are several plugins available to make the user experience even better! <mark>Therefore, Jupyter Notebook, PyCharm and VS Code are favourite among many developers.<\/mark><\/p>","8917b82b":"<h1 style=\"color:#189AB4\"><strong>I am Studying here...<\/strong><\/h1>\n\n<p style=\"font-size:120%\">Well, I'll be honest with you guys. I thought most of the Kagglers were gonna be Data Scientists or ML Enginneers, however, after this analysis, we can see that <mark>majority of the Kagglers are <strong>Students!<\/strong>. That is DOUBLE! the amount of <strong>Data Scientists<\/strong> we have here.<\/mark><\/p>\n<p style=\"font-size:120%\">Therefore, <strong>Students<\/strong>, followed by <strong>Data Scientists<\/strong>, <strong>Software Engineers<\/strong> and <strong>Data Analysts<\/strong> are pre-dominantly the main professions here on this platform.<\/p>\n<p style=\"font-size:120%\">There is also an interesting CATCH here! Notice how <strong>'Others'<\/strong> bar is pretty high? This goes to show that, ML, AI and working with Data is clearly attracting people from various different professions onto Kaggle! Now this is good news!<\/p>\n<p style=\"font-size:120%\">This is expected as we are moving into a whole new generation where we have loads of devices, sensors etc that generate BIG! data every second. <mark>With more and more availablility of data, it opens the ground to train various machine learning models and opens up a lot of opportunities to seek and explore.<\/mark> This has proved to be  very essential for people working in any domain!<\/p>","74a87f40":"<h1 style=\"color:#189AB4\"><strong>What do we see here?<\/strong><\/h1>\n\n<p style=\"font-size:120%\"><mark>Kaggle community mostly comprises of <strong>Male ML Enthusiasts<\/strong><\/mark>. They consists of <strong>almost 80%<\/strong> of the people here on Kaggle.<\/p>\n<p style=\"font-size:120%\">There are also <strong>18% Female Kagglers<\/strong>. The ratio is not that bad, but it can be improved upon.<\/p>\n<p style=\"font-size:120%\">Finally, about <strong>2% are either Non-Bianary, Do not wish to disclose or Prefer to self explain<\/strong>.<\/p>","235743c3":"<h1 style=\"color:#189AB4;font-size:60px;\"><strong>A Kaggler's<\/strong> <strong style=\"color:black\">Secret Ingredient:<\/strong><\/h1>\n\n<p style=\"font-size:120%\">Kaggle provides free access to <strong>NVIDIA TESLA P100 GPUs.<\/strong> <mark>These GPUs are useful for training deep learning models<\/mark>, though they do not accelerate most other workflows (i.e. <mark>libraries like pandas and scikit-learn do not benefit from access to GPUs<\/mark>).<\/p>\n\n<p style=\"font-size:120%\">You can use up to a quota limit per week of GPU. The quota resets weekly and is <strong>30 hours or sometimes higher depending on demand and resources<\/strong><\/p>\n\n<p style=\"font-size:120%\">Read more about GPUs <a href=\"https:\/\/www.kaggle.com\/docs\/efficient-gpu-usage\" style=\"text-decoration:none\">here.<\/a><\/p>","c23454da":"<h1 style=\"color:#189AB4\"><strong>print(\"Python is better!\")<\/strong><\/h1>\n\n<p style=\"font-size:120%\">This is not a surprise at all! From our previous analysis, we had concluded that <mark>most of the Kagglers are Students<\/mark>. They have <mark>barely started to code<\/mark>. Therefore, for beginners, Python is a very friendly coding language to pick up and learn.<\/p>\n<p style=\"font-size:120%\">Because of this, most of the newbies love to use Python. Not only that, <mark>Python has a large number of modules that make life easier for any developer, analyst etc!<\/mark><\/p>\n\n![meme](https:\/\/i.pinimg.com\/originals\/a4\/31\/4a\/a4314a37a2a0a1ce775d55b4c8b1383d.png)\n\n<p style=\"font-size:120%\"><strong>Python therefore, wins this battle against R<\/strong> on Kaggle by a large margin! <strong>Python:80% and R:20%<\/strong><\/p>","8787eec4":"<h1 style=\"color:#189AB4;font-size:60px;\"><strong>Tools<\/strong> <strong style=\"color:black\">of Trade:<\/strong><\/h1>\n\n<p style=\"text-align:center; font-size:150%\"><strong><i> \u201cThrough all of your snares, Blade Fury cuts like silk.\u201d <\/i>\u2013 Juggernaut (DOTA 2) <\/strong><\/p>\n\n<p style=\"font-size:120%\">The above quote is one of my favourite quotes from the online MOBA game Defense of The Ancients a.k.a DOTA 2. The reason why I put this quote here is because, the data that we get most of the time are unexplored with many small traps! If we understand a data incorrectly or interpret it differently, it may lead us astray. Hence, these are similar to snares in this case. Blade Fury are the tools that we have at our disposal to cut through these snares!<\/p>\n\n<p style=\"font-size:120%\">Come, let's find out, the popular tools used by every Kaggler.<\/p>","f2bed624":"<h1 style=\"color:#189AB4\"><strong>Understanding Industry Requirement <\/strong><\/h1>\n\n<p style=\"font-size:120%\">Since the occupation of the Kagglers are also an indicator of which Industry is demanding more of ML and AI, it is easy to co-relate both and say conclude that <strong>Computer & Technology, Academics & Education and Accounting & Finance<\/strong> benefit the most! then any other industries out there.<\/p>\n<p style=\"font-size:120%\">The above Industries are followed by the <strong>Pharmaceutical, Energy and Manufacturing Industries.<\/strong> These are the new emerging sectors which are employing Machine Learning in their production activities.<\/p>\n<p style=\"font-size:120%\">As more and more data is available to us humans, <mark>there will always be a possibility to understand these data to drive better business decision and improve the quality of life for people all over the world<\/mark>.<\/p>","02aecd92":"<h1 style=\"color:#189AB4;font-size:60px;\"><strong>User<\/strong> <strong style=\"color:black\">Demographics:<\/strong><\/h1>","c881fddd":"<h1 style=\"color:#189AB4\"><strong>Next Question,<\/strong> What is your gender?<\/h1>","5fbbb350":"<h1 style=\"color:#189AB4\"><strong>Let's look at Kaggler's TPU usage next: <\/strong><\/h1>\n\n<p style=\"font-size:120%\"><strong>TPUs<\/strong> are now available on Kaggle, for free. <mark>TPUs are hardware accelerators specialized in deep learning tasks.<\/mark> They are supported in Tensorflow 2.1 both through the Keras high-level API and, at a lower level, in models using a custom training loop.<\/p>\n\n<p style=\"font-size:120%\">You can use <strong>up to 30 hours per week<\/strong> of TPUs and <strong>up to 9h at a time in a single session.<\/strong><\/p>\n\n<p style=\"font-size:120%\">Read more about TPUs <a href=\"https:\/\/www.kaggle.com\/docs\/tpu\" style=\"text-decoration:none\">here.<\/a><\/p>","d828f2a8":"<h1 style=\"color:#189AB4\"><strong>Let's take a look at Kaggler's Highest Level of Formal Education...<\/strong><\/h1>","5efc426e":"<h1 style=\"color:#189AB4;text-align:center\"><strong>Work in Progress \ud83d\udc77\u200d\u2642\ufe0f <\/strong><\/h1>\n<h2 style=\"color:#189AB4;text-align:center\"><strong>Drop an Upvote if you like\/fork. Thanks for Reading. <\/strong><\/h2>\n<h2 style=\"color:#189AB4;text-align:center\"><strong>Do read my other notebooks <\/strong><\/h2>","d6c8cd07":"<h1 style=\"color:#189AB4\"><strong>It is widely used everywhere...<\/strong><\/h1>\n\n<p style=\"font-size:120%\">Though in a life of a Data Scientist, several programming languages like <strong>Java, C++, C<\/strong> etc are used, <mark>Python still holds a distinct place in most organizations across the globe<\/mark><\/p>\n<p style=\"font-size:120%\">Also, as per our previous analysis, we can clearly see that many Kagglers prefer Python over several other programming languages. Hence, we can safely conclude that <mark><strong>7\/10 people<\/strong> will always recommend Python over any other programming languages.<\/mark><\/p>","4bb93e21":"<h1 style=\"color:#189AB4\"><strong>Okay, but for how long have they been programming?<\/strong><\/h1>","e6b71920":"<h1 style=\"color:#189AB4\"><strong>Everyone's Favourite <\/strong><\/h1>\n\n<p style=\"font-size:120%\"><strong>Matplotlib, Seaborn and Plotly<\/strong> continues to be the popular choice among many Kagglers followed by <strong>GGPlot<\/strong> for R users. Especially because they are so easy to implement. We can also see that there are other libraries like <strong>Geoplotlib, Bokeh and Folium<\/strong> trending these days on kaggle.<\/p>\n<p style=\"font-size:120%\">Moving onto the Machine Learning usage of Kagglers, we notice the correlation again that since there are more number of Students on this platform, we have more number of kagglers who's ML experiece ranges from <strong>less than 1 year to 3 years.<\/strong> Another interesting thing to notice here is that a lot of people here on Kaggle do not use Machine Learning. They work on <mark>Data Analysis or Descriptive Statistical Analysis, but are not actively involved with Predictive Analystics.<\/mark><\/p>\n<p style=\"font-size:120%\"><strong>SkLearn<\/strong> continues to be the top ML framework used by many Kagglers followed by <strong>Tensor-flow and Keras.<\/strong> It is also worth noticing that <strong>Pytorch, XGBoost, LightGBM and CatBoost<\/strong> also have decent popularity among Kagglers. On the other hand, <strong>JAX, MXNET and H2O 3<\/strong> continue to be at the bottom of the list.<\/p>\n<p style=\"font-size:120%\">Moving onto the popular ML Algorithms, we can clearly see that <strong>Linear Models, Tree Models and CNN<\/strong> are the most widely preferred Algorithms here on Kaggle. This is followed by <strong>Dense Neural Net, RNN and Bayesian Approaches.<\/strong> Now this is expected since <mark>most of the population of Kagglers are students and they start usually by learning about Linear and Tree models.<\/mark><\/p>\n<p style=\"font-size:120%\"><strong>Image classification and other general purpose networks (VGG, Inception, ResNet, ResNeXt, NASNet, EfficientNet, etc), Image segmentation methods (U-Net, Mask R-CNN, etc) and Object detection methods (YOLOv3, RetinaNet, etc)<\/strong> are the most popular Computer Vision Modules used by Kagglers here. Now this is not used by many Kagglers. These are only used by a little proportion of people.<\/p>\n<p style=\"font-size:120%\">NLP methods are also used by a certain part of the population. Not everyone uses this. But for those that do - <strong>Word embeddings\/vectors (GLoVe, fastText, word2vec), Transformer language models (GPT-3, BERT, XLnet, etc) and Encoder-decoder models (seq2seq, vanilla transformers)<\/strong> are the most popular among them.<\/p>","bcaeb9f9":"<h1 style=\"color:#189AB4;font-size:60px;\"><strong>User<\/strong> <strong style=\"color:black\">Qualifications & Experience:<\/strong><\/h1>","0629a33f":"<h1 style=\"color:#189AB4\"><strong>Very Qualified Professionals here<\/strong><\/h1>\n\n![image.png](attachment:289e12ba-674d-40c6-bf5a-9c6d1a830d71.png)\n\n<p style=\"font-size:120%\">Most of the Kagglers either hold a <strong>Master's degree or a Bachelor's degree<\/strong><\/p>\n<p style=\"font-size:120%\">Few people have <strong>a Professional Doctorate or No Formal education past High School.<\/strong><\/p>\n<p style=\"font-size:120%\">A decent amount of people have <strong>Doctoral Degree<\/strong>.<\/p>\n<p style=\"font-size:120%\">We have diversity in terms of qualifications, however, <mark>it is dominated by people holding a Bachelor's, Master's or Doctoral degrees.<\/mark><\/p>","8f99b2d2":"<h1 style=\"color:#189AB4\"><strong>A lot of Kagglers are from India!<\/strong><\/h1>\n\n<p style=\"font-size:120%\">The higher the saturation, the more the number of people from that country. Therefore, it is clearly visible that <mark>most of the Kagglers live in <strong>India, USA, Japan and China<\/strong><\/mark>.<\/p>\n<p style=\"font-size:120%\"><mark>Very less number of people can be found from- <strong>Kazakhstan, Norway, Algeria, Ehiopia and Iraq<\/strong>.<\/mark><\/p>\n<p style=\"font-size:120%\">This maybe due to the fact that people from that Demography, probably prefer some other profession rather than ML, AI, DataScience or Machine Learning.<\/p>\n<p style=\"font-size:120%\">Efforts can be made to introduce students and working professionals of those countries to the world of Data! This will encourage them to explore more datasets and ML problem statements. Who knows, maybe one day, these essential skills might help solve a serious problem in the country or even the whole wide world. Think big!<\/p>","26719f30":"<h1 style=\"color:#189AB4;font-size:60px;\"><strong>Our<\/strong> <strong style=\"color:black\">Data:<\/strong><\/h1>","11651bc7":"<h1 style=\"color:#189AB4\"><strong>What did we find?<\/strong><\/h1>\n\n<p style=\"font-size:120%\">Here, we can clearly see that <strong>majority of Kagglers are <mark>between 21 to 29 years of age<\/mark><\/strong>.<\/p>\n<p style=\"font-size:120%\">Very few Kagglers are <strong>over the age of 50<\/strong>.<\/p>\n<p style=\"font-size:120%\">This is not very unexpected, as many students who like to explore Machine Learning(ML) or Data Science(DS) usually start off with Kaggle. But! we are not sure about this claim as of now. This is just a speculation. Let's explore further to find out, if this is really the case.<\/p>","556a660e":"<h1 style=\"color:#189AB4;font-size:60px;\"><strong>Where<\/strong> <strong style=\"color:black\">We Work:<\/strong><\/h1>\n\n<img src=\"https:\/\/imgur.com\/Kdp1Hak.gif\" style=\"width:80%\"><\/img>","ae5b9550":"<h1 style=\"color:#189AB4\"><strong>Where is everyone from?<\/strong><\/h1>"}}