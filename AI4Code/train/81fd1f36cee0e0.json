{"cell_type":{"c6d8cc59":"code","bd9d32c9":"code","25718277":"code","dbc37194":"code","2585dc65":"code","daaf9c53":"code","8f5b30a6":"code","b8c941c5":"code","01b61fb9":"code","45fa5412":"code","e18a271c":"code","90f22b63":"code","52966568":"code","7ffc01d5":"code","29398412":"code","18cf0e57":"code","b50af538":"code","65bcbbaf":"code","c06bbea5":"code","45e56d0d":"code","37c14565":"code","1c222215":"code","d8b5a6e6":"code","c4ec2262":"code","1e9d2afa":"code","89f518cc":"code","93b43ba1":"code","51e1b018":"code","f5fb7764":"code","a54e72ad":"code","d598b79c":"code","0dfba101":"code","f2f0335e":"code","59bdf091":"code","14a53c7f":"code","a62fc1c5":"code","bf381d45":"code","926b61d5":"code","6ad75a1f":"code","312ff8ec":"code","ab018ec0":"code","155ee072":"code","5914081a":"code","e54a123f":"code","964198b5":"code","2bfebcfa":"code","b94b566b":"code","2cc12ed2":"code","d191a8db":"code","b17441a4":"code","346b6c5f":"code","dac04848":"code","87dbfb49":"code","7d0eca21":"code","115e35b0":"code","7c272799":"code","24e68c46":"markdown","b98df89b":"markdown","04ca522d":"markdown","1b0b59cd":"markdown","02fe7255":"markdown","cae0148f":"markdown","82ae9087":"markdown","fad4636e":"markdown","11ffc65d":"markdown","899e7e69":"markdown","2def0d7d":"markdown","5b104233":"markdown","8527b621":"markdown","e71ffa9b":"markdown","a9321c1a":"markdown","00fbc092":"markdown","7fd0fdc9":"markdown","42fafcc8":"markdown","e3ab07c0":"markdown"},"source":{"c6d8cc59":"import numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nimport seaborn as sns\nsns.set()","bd9d32c9":"raw_data = pd.read_csv('..\/input\/1.04. Real-life example.csv')\nraw_data.head()","25718277":"raw_data.describe(include='all')","dbc37194":"data = raw_data.drop(['Model'], axis=1)\ndata.describe(include='all')","2585dc65":"data.isnull().sum()","daaf9c53":"data_no_mv = data.dropna(axis=0)","8f5b30a6":"data_no_mv.describe(include='all')","b8c941c5":"sns.distplot(data_no_mv['Price'])","01b61fb9":"q = data_no_mv['Price'].quantile(0.99)\ndata_1 = data_no_mv[data_no_mv['Price']<q]\ndata_1.describe(include='all')","45fa5412":"sns.distplot(data_1['Price'])","e18a271c":"sns.distplot(data_no_mv['Mileage'])","90f22b63":"q = data_1['Mileage'].quantile(0.99)\ndata_2 = data_1[data_1['Mileage']<q]","52966568":"sns.distplot(data_2['Mileage'])","7ffc01d5":"sns.distplot(data_no_mv['EngineV'])","29398412":"data_3 = data_2[data_2['EngineV']<6.5]","18cf0e57":"sns.distplot(data_3['EngineV'])","b50af538":"sns.distplot(data_no_mv['Year'])","65bcbbaf":"q = data_3['Year'].quantile(0.01)\ndata_4 = data_3[data_3['Year']>q]","c06bbea5":"sns.distplot(data_4['Year'])","45e56d0d":"data_cleaned = data_4.reset_index(drop=True)","37c14565":"data_cleaned.describe(include='all')","1c222215":"f, (ax1, ax2, ax3) = plt.subplots(1,3, sharey=True, figsize =(15,3))\nax1.scatter(data_cleaned['Year'], data_cleaned['Price'])\nax1.set_title('Price and Year')\nax2.scatter(data_cleaned['EngineV'], data_cleaned['Price'])\nax2.set_title('EngineV and Year')\nax3.scatter(data_cleaned['Mileage'], data_cleaned['Price'])\nax3.set_title('Mileage and Year')\n\nplt.show()","d8b5a6e6":"log_price = np.log(data_cleaned['Price'])\ndata_cleaned['log_price'] = log_price\ndata_cleaned","c4ec2262":"f, (ax1, ax2, ax3) = plt.subplots(1,3, sharey=True, figsize =(15,3))\nax1.scatter(data_cleaned['Year'], data_cleaned['log_price'])\nax1.set_title('Log Price and Year')\nax2.scatter(data_cleaned['EngineV'], data_cleaned['log_price'])\nax2.set_title('EngineV and Log Price')\nax3.scatter(data_cleaned['Mileage'], data_cleaned['log_price'])\nax3.set_title('Mileage and Log Price')\n\nplt.show()","1e9d2afa":"data_cleaned = data_cleaned.drop(['Price'], axis=1)","89f518cc":"data_cleaned.columns.values","93b43ba1":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nvariables = data_cleaned[['Mileage', 'Year', 'EngineV']]\nvif = pd.DataFrame()\nvif['VIF'] = [variance_inflation_factor(variables.values, i)for i in range(variables.shape[1])]\nvif['Faeture'] = variables.columns\nvif","51e1b018":"data_no_multicollinearity = data_cleaned.drop(['Year'], axis=1)","f5fb7764":"data_with_dummies = pd.get_dummies(data_no_multicollinearity, drop_first=True)","a54e72ad":"data_with_dummies.head()","d598b79c":"data_with_dummies.columns.values","0dfba101":"cols = ['log_price','Mileage', 'EngineV',  'Brand_BMW',\n       'Brand_Mercedes-Benz', 'Brand_Mitsubishi', 'Brand_Renault',\n       'Brand_Toyota', 'Brand_Volkswagen', 'Body_hatch', 'Body_other',\n       'Body_sedan', 'Body_vagon', 'Body_van', 'Engine Type_Gas',\n       'Engine Type_Other', 'Engine Type_Petrol', 'Registration_yes']","f2f0335e":"data_preprocessed = data_with_dummies[cols]\ndata_preprocessed.head()","59bdf091":"targets = data_preprocessed['log_price']\ninputs = data_preprocessed.drop(['log_price'],axis=1)","14a53c7f":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(inputs)","a62fc1c5":"inputs_scaled = scaler.transform(inputs)","bf381d45":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(inputs_scaled, targets, test_size=0.2, random_state=365)","926b61d5":"reg = LinearRegression()\nreg.fit(x_train, y_train)","6ad75a1f":"y_hat = reg.predict(x_train)","312ff8ec":"plt.scatter(y_train, y_hat)\nplt.xlabel('Targets (y_train)', size=18)\nplt.ylabel('Predictions (y_hat)', size=18)\nplt.xlim(6,13)\nplt.ylim(6,13)\nplt.show()","ab018ec0":"sns.distplot(y_train - y_hat)\nplt.title('Residuals PDF', size=18)","155ee072":"reg.score(x_train, y_train)","5914081a":"reg.intercept_","e54a123f":"reg.coef_","964198b5":"reg_summary = pd.DataFrame(inputs.columns.values, columns=['Features'])\nreg_summary['Weights'] = reg.coef_\nreg_summary","2bfebcfa":"data_cleaned['Brand'].unique()","b94b566b":"y_hat_test = reg.predict(x_test)","2cc12ed2":"plt.scatter(y_test, y_hat_test, alpha=0.2)\nplt.xlabel('Targets (y_test)', size=18)\nplt.ylabel('Predictions (y_hat_test)', size=18)\nplt.xlim(6,13)\nplt.ylim(6,13)\nplt.show()","d191a8db":"df_pf = pd.DataFrame(np.exp(y_hat_test), columns=['Predictions'])\ndf_pf.head()","b17441a4":"df_pf['Targets'] = np.exp(y_test)\ndf_pf.head()","346b6c5f":"y_test = y_test.reset_index(drop=True)","dac04848":"df_pf['Targets'] = np.exp(y_test)\ndf_pf.head()","87dbfb49":"df_pf['Residual'] = df_pf['Targets'] - df_pf['Predictions']","7d0eca21":"df_pf['Difference%'] = np.absolute(df_pf['Residual']\/df_pf['Targets']*100)\ndf_pf","115e35b0":"df_pf.describe()","7c272799":"pd.options.display.max_rows = 999\npd.set_option('display.float_format', lambda x: '%.2f' % x)\ndf_pf.sort_values(by=['Difference%'])","24e68c46":"### Train test split","b98df89b":"### Scale the data","04ca522d":"## Checking OLS assumptions","1b0b59cd":"# Preprocessing","02fe7255":"# Import Library","cae0148f":"## Determining the variables of interest","82ae9087":"### Declare the inputs and the targets","fad4636e":"## Exploring the descriptive statistics of the variables","11ffc65d":"## Create dummy variables","899e7e69":"## Multicollinearity","2def0d7d":"## Dealing with missing values","5b104233":"## Dealing with outliers","8527b621":"### Create the regressions","e71ffa9b":"## Relaxing assumptions","a9321c1a":"## Rearrange a bit","00fbc092":"### Findeing weights and bias","7fd0fdc9":"## Linear regression model","42fafcc8":"## Exploring PDFs","e3ab07c0":"## Testing"}}