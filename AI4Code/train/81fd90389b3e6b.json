{"cell_type":{"6609f18a":"code","bef3eb96":"code","98b2d418":"code","cb021ab6":"code","4ea852b9":"code","02de6916":"code","57c58983":"code","ae8a77f9":"code","fb8a61ac":"code","9a72acdb":"code","b8881ea7":"code","a0119260":"code","3a9638ae":"code","d89fb73a":"code","464d8bbc":"code","36f0bde2":"code","419b5a5d":"code","7e0ba750":"markdown","a0c0c623":"markdown","33441295":"markdown","8e001078":"markdown","c3f63397":"markdown"},"source":{"6609f18a":"%cd ..\/input\/efficientnet-pytorch\/EfficientNet-PyTorch\/EfficientNet-PyTorch-master\nfrom efficientnet_pytorch import EfficientNet\n%cd -","bef3eb96":"from fastai.vision.all import *\nimport albumentations","98b2d418":"set_seed(42)","cb021ab6":"class AlbumentationsTransform(RandTransform):\n    \"A transform handler for multiple `Albumentation` transforms\"\n    split_idx,order=None,2\n    def __init__(self, train_aug, valid_aug): store_attr()\n    \n    def before_call(self, b, split_idx):\n        self.idx = split_idx\n    \n    def encodes(self, img: PILImage):\n        if self.idx == 0:\n            aug_img = self.train_aug(image=np.array(img))['image']\n        else:\n            aug_img = self.valid_aug(image=np.array(img))['image']\n        return PILImage.create(aug_img)","4ea852b9":"def get_x(row): return data_path\/row['image_id']\ndef get_y(row): return row['label']","02de6916":"class CassavaModel(Module):\n    def __init__(self, num_classes):\n\n        self.effnet = EfficientNet.from_pretrained(\"efficientnet-b3\")\n        self.dropout = nn.Dropout(0.1)\n        self.out = nn.Linear(1536, num_classes)\n\n    def forward(self, image):\n        batch_size, _, _, _ = image.shape\n\n        x = self.effnet.extract_features(image)\n        x = F.adaptive_avg_pool2d(x, 1).reshape(batch_size, -1)\n        outputs = self.out(self.dropout(x))\n        return outputs","57c58983":"Path('\/kaggle\/input').ls()","ae8a77f9":"learn = load_learner(Path('\/kaggle\/input\/effnet-inference\/inference(1)'), cpu=False)","fb8a61ac":"learn.to_fp16()","9a72acdb":"path = Path(\"..\/input\")\ndata_path = path\/'cassava-leaf-disease-classification'","b8881ea7":"test_df = pd.read_csv(data_path\/'sample_submission.csv')\ntest_df.head()","a0119260":"test_copy = test_df.copy()\ntest_copy['image_id'] = test_copy['image_id'].apply(lambda x: f'test_images\/{x}')","3a9638ae":"test_dl = learn.dls.test_dl(test_copy)","d89fb73a":"preds, _ = learn.get_preds(dl=test_dl)","464d8bbc":"test_df['label'] = preds.argmax(dim=-1).numpy()","36f0bde2":"test_df.to_csv('submission.csv', index=False)","419b5a5d":"test_df.head()","7e0ba750":"# Submission","a0c0c623":"## Every function and class used to create the model from [the training notebook](https:\/\/www.kaggle.com\/hubertwojewoda\/cassava-efficientnet-b3) needs to be redefined here","33441295":"# Load the model","8e001078":"# Library","c3f63397":"## Setting a seed"}}