{"cell_type":{"75548659":"code","7396cc31":"code","ae9bd8ec":"code","8b880396":"code","fa694837":"code","cda666b2":"code","35075d3e":"code","5b974dac":"code","275ab26f":"code","e84ad55e":"code","43151004":"code","18641b1f":"code","cbf02362":"code","c3b78281":"code","564edf8d":"markdown","83cdbbfc":"markdown"},"source":{"75548659":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport cv2\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\n\nimport tensorflow_datasets as tfds\nfrom tensorflow_examples.models.pix2pix import pix2pix\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nos.listdir('\/kaggle\/input\/gan-getting-started')     \n\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7396cc31":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)\n\nAUTOTUNE = tf.data.experimental.AUTOTUNE\n    \nprint(tf.__version__)","ae9bd8ec":"path, dirs, files = next(os.walk(\"..\/input\/gan-getting-started\/monet_jpg\"))\nprint(f\"Monet:{len(files)}\")\npath, dirs, files = next(os.walk(\"..\/input\/gan-getting-started\/monet_tfrec\"))\nprint(f\"Monet_tfrec:{len(files)}\")\npath, dirs, files = next(os.walk(\"..\/input\/gan-getting-started\/photo_tfrec\"))\nprint(f\"Photo_tfrec:{len(files)}\")\npath, dirs, files = next(os.walk(\"..\/input\/gan-getting-started\/photo_jpg\"))\nprint(f\"Photo:{len(files)}\")","8b880396":"def getImagePaths(path):\n    image_names = []\n    for dirname, _, filenames in os.walk(path):\n        for filename in filenames:\n            fullpath = os.path.join(dirname, filename)\n            image_names.append(fullpath)\n    return image_names","fa694837":"photo_files=getImagePaths(\"..\/input\/gan-getting-started\/photo_jpg\")\nmonet_files=getImagePaths(\"..\/input\/gan-getting-started\/monet_jpg\")","cda666b2":"from PIL import Image   \n# creating a object  \nim = Image.open(r\"..\/input\/gan-getting-started\/monet_jpg\/00068bc07f.jpg\")  \nim.show() ","35075d3e":"print(cv2.imread(photo_files[0]).shape)\nprint(cv2.imread(monet_files[0]).shape)","5b974dac":"def displayImages(images_paths, rows, cols):\n    figure, ax = plt.subplots(nrows=rows,ncols=cols,figsize=(16,8) )\n    for ind,image_path in enumerate(images_paths):\n        image=cv2.imread(image_path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) \n        try:\n            ax.ravel()[ind].imshow(image)\n            ax.ravel()[ind].set_axis_off()\n        except:\n            continue;\n    plt.tight_layout()\n    plt.show()","275ab26f":"displayImages(photo_files,2,4)","e84ad55e":"displayImages(monet_files,2,4)","43151004":"tf.__version__","18641b1f":"IMAGE_SIZE = (256, 256)\nmonet = []\nphotos=[]\nfor files in tqdm(monet_files):\n    image = cv2.imread(files)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = cv2.resize(image, IMAGE_SIZE) \n    monet.append(image)","cbf02362":"for files in tqdm(photo_files):\n    image = cv2.imread(files)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = cv2.resize(image, IMAGE_SIZE) \n    photos.append(image)","c3b78281":"photos = np.array(photos, dtype = 'float32')\nmonet = np.array(monet, dtype = 'float32')","564edf8d":"<b>References:<\/b>\nhttps:\/\/www.tensorflow.org\/tutorials\/generative\/cyclegan","83cdbbfc":"<h2><center>In Progress<\/center><\/h2>"}}