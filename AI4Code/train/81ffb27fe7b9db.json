{"cell_type":{"15b1694c":"code","4fd943ee":"code","9368042d":"code","ff9d77ac":"code","e53b9f1d":"code","fd3485ec":"code","c759ee16":"code","c3e325d7":"code","287be77e":"code","dec0dc36":"code","30cbde08":"code","57ebcd6f":"code","d8041b81":"code","2ffa3706":"code","85ff80ce":"code","f9aa1915":"code","86bcc5ee":"code","9f867793":"code","5b6db199":"code","2e3e1f81":"code","34fd70b5":"code","0eb7121a":"code","291c66ba":"code","20ba7591":"code","66c41de1":"code","61b8a3c3":"code","ba660f73":"code","78791e72":"code","f9e34b7a":"code","41184f01":"code","b97e5874":"code","08684d76":"code","bc492ea3":"code","c2f61a3f":"code","840fd28e":"code","4526df43":"code","f712325d":"code","80aa3533":"code","97581030":"code","71ef3d84":"code","01819c47":"code","70b8c976":"code","a8135209":"code","972ab2f1":"code","eb3e37f8":"code","cb86bc21":"code","76608967":"code","2bb9f024":"code","05b5d6b9":"code","ba20157c":"code","71d2c6c6":"code","5366690e":"code","01e74b8c":"code","dd8a65a2":"code","145a3faa":"code","b0168c60":"code","850ceb10":"code","dde57d8c":"code","cd75d8a5":"code","e0d7f38c":"markdown","e235e9a1":"markdown","5aa225d1":"markdown","e58dc2bf":"markdown","29225440":"markdown","4f8b6e80":"markdown","5cae726c":"markdown","7933074f":"markdown","98142d80":"markdown","515b61e7":"markdown","bb2d3d5e":"markdown","95f178ad":"markdown","8f6b04f2":"markdown","547270a4":"markdown","c512cedc":"markdown","12815043":"markdown","b9221647":"markdown","963466b0":"markdown","03dc8f78":"markdown","80965a17":"markdown","86257533":"markdown","9d81dc25":"markdown","f203e07a":"markdown","41000c9c":"markdown","78a9da1d":"markdown","c314918c":"markdown","6a1bf86c":"markdown","52bf0351":"markdown","3d2e8a61":"markdown","5243fb0a":"markdown","090fce06":"markdown","55470cd1":"markdown","0d0a3672":"markdown","077e97fc":"markdown","51a4e4b7":"markdown","f2a49e93":"markdown","2b3fdedc":"markdown","79d2f42e":"markdown","f03e2243":"markdown","54a9b0b6":"markdown","e161a895":"markdown","fceed17a":"markdown","2f1c2815":"markdown"},"source":{"15b1694c":"import pandas as pd \nimport numpy as np \nimport seaborn as sns \nimport matplotlib.pyplot as plt \nfrom ipywidgets import interact, interactive, fixed, interact_manual\nimport ipywidgets as widgets","4fd943ee":"def simple_function(x):\n    return x ","9368042d":"\n_ = interact(simple_function,x = (10,20))","ff9d77ac":"\n_ = interact(simple_function,x = True)","e53b9f1d":"_ = interact(simple_function, x = 'hello')","fd3485ec":"_ = interact(simple_function, x = (0.0,10.0))","c759ee16":"# consider this sample form a normal distribution\nvalues = np.random.standard_normal(size = 1000)\ncat_values = np.random.choice(a = ['one','two','three'],size = 1000)\ncat_values2 = np.random.choice(a = ['alpha','beta','gamma'],size = 1000)\nsample_df = pd.DataFrame({'values': values,\n                          'categories': cat_values,\n                          'other categories': cat_values2\n                         })\nsample_df.head(5)","c3e325d7":"# consider this histogram, lets convert this into a function which takes arguments \n# of histogram and plots a histogram\nplt.figure(dpi = 120)\nsns.histplot(data = sample_df, x = 'values',palette='BuPu')","287be77e":"def plot_histogram(bins = 10, hue = 'categories', kde = False, palette = 'Blues', x_range_1 = (-3,3)): \n    \"\"\"plots histogram\n    params:\n    =======\n    bins: int\n        histogram bins\n    hue: str\n        categorical columns to color \n    kde: bool \n        wether to show kde plot \n    palette: str\n        palette of histogram\n    x_range_1: tuple(int,int)\n        x range of the plot \n    returns:\n        histogram\n    \"\"\"\n    plt.figure(dpi = 120)\n    sns.histplot(data = sample_df, \n                        x = 'values',\n                        palette=palette, \n                        bins = bins, \n                        hue = hue, \n                        kde = kde,\n                 \n                        \n                       )\n    plt.xlim(x_range_1)\n    ","dec0dc36":"plot_histogram()","30cbde08":"_ = interact(plot_histogram,\n         bins = widgets.IntSlider(\n             value = 10,\n             min = 5,\n             max = 200,\n             step = 10\n         )\n        )","57ebcd6f":"_ = interact(plot_histogram,\n        x_range_1 = widgets.FloatRangeSlider(\n            value = [-3,3], \n            min = -5,\n            max = 5,\n            step = 0.2,\n            readout_format='.1f',\n        )\n        )","d8041b81":"_ = interact(plot_histogram,\n        hue = widgets.ToggleButtons(\n            options = ['categories','other categories'],\n            tooltip = ['categories','other categories'],\n            disabled=False,\n            button_style = 'success') )","2ffa3706":"_ = interact(plot_histogram,\n             kde = widgets.RadioButtons(\n                 options = [True,False],\n                 disabled = False)\n            )","85ff80ce":"_ = interact(plot_histogram,\n             palette = widgets.Dropdown(\n                 options = ['pastel','husl','Set2','flare','crest','magma','icefire']\n             )\n            )","f9aa1915":"_ = interact(plot_histogram,\n             palette = widgets.Dropdown(\n                 options = ['pastel','husl','Set2','flare','crest','magma','icefire']\n                 ),\n             kde = widgets.RadioButtons(\n                     options = [True,False],\n                     disabled = False),\n            hue = widgets.ToggleButtons(\n                options = ['categories','other categories'],\n                tooltip = ['categories','other categories'],\n                disabled=False,\n                button_style = 'success'),\n             bins = widgets.IntSlider(\n                 value = 10, # intilal value \n                 min = 5,\n                 max = 200,\n                 step = 10\n         ),\n        x_range_1 = widgets.FloatRangeSlider(\n            value = [-3,3], \n            min = -5,\n            max = 5,\n            step = 0.2,\n            readout_format='.1f',\n        ),\n            )","86bcc5ee":"b1 = widgets.Button(description='button 1')\nb2 = widgets.Button(description='button 2')\nb3 = widgets.Button(description='button 3')\nb4 = widgets.Button(description='button 4')\nb5 = widgets.Button(description='button 5')\nb6 = widgets.Button(description='button 6')\n# arrange (b1 b2) (b3 b4) (b5 b5) horizontally and \n# all this groups vertically \n\nhbox1 = widgets.HBox([b1,b2])\nhbox2 = widgets.HBox([b3,b4])\nhbox3 = widgets.HBox([b5,b6]) \nhbox1","9f867793":"widgets.VBox([hbox1,hbox2, hbox3])","5b6db199":"companies = pd.read_csv('https:\/\/raw.githubusercontent.com\/kshirsagarsiddharth\/ipywidgets_data\/main\/stocks.csv', index_col='Date', parse_dates=True)\n# resampling daily data to annual data in this case BY means business start year \ncompanies = companies.resample('BY').mean()\ncompanies.head()","2e3e1f81":"companies.style.background_gradient()","34fd70b5":"color_palette = sns.cubehelix_palette(start=.5, rot=-.5, as_cmap=True)\ncompanies.style.background_gradient(color_palette)","0eb7121a":"color_palette = sns.color_palette(\"vlag\", as_cmap=True)\ncompanies.style.background_gradient(color_palette)","291c66ba":"color_palette = sns.color_palette(\"coolwarm\", as_cmap=True)\ncompanies.style.background_gradient(color_palette)","20ba7591":"# highliting minimum\n# this understandable given 2002 tech bubble\ncompanies.style.highlight_min(color = '#ff8a8a')","66c41de1":"# highliting maximum \ncompanies.style.highlight_max(color = '#4fc277')","61b8a3c3":"companies_returns = companies.pct_change().dropna()\ncompanies_returns.head()","ba660f73":"## Highliting losses in the dataframe \ndef color_negative_values(value): \n    \"\"\"\n    This function takes in values of dataframe \n    if particular value is negative it is colored as redwhich implies loss\n    if value is greater than one it implies higher profit\n    \"\"\"\n    if value < 0:\n        color = '#ff8a8a'\n    elif value > 1:\n        color = '#4fc277'\n    else:\n        color = 'black'\n    return f\"color: {color}\"\ncompanies_returns.style.applymap(color_negative_values)","78791e72":"companies_returns.style.applymap(lambda x: 'font-size:23.2px; background-color: #d9e0ff')","f9e34b7a":"companies_returns.style.applymap(color_negative_values).applymap(lambda x: 'font-size:23.2px; background-color: #d9e0ff')","41184f01":"# using the subset argument\ncompanies.style.applymap(lambda x: 'font-size:23.2px; background-color: #ccd8ff', subset=['IBM','WMT'])","b97e5874":"def find_max(values):\n    return np.where(values == np.max(values),'color: red; font-size:20.2px','font-size:20.2px')\n\ndef find_min(values):\n    return np.where(values == np.min(values),'color: green; font-size:20.2px','font-size:20.2px')\n\n# the function of apply should take a series and should return an object of same length\ncompanies_returns.style.apply(find_max, axis = 1).apply(find_min, axis = 1)","08684d76":"# give border if the value in columns lie betwen 0.5 and 1 \ncompanies_returns.style.apply(lambda x : ['color:#66de70; border-style: inset;font-size:20.2px' if (val > 0.5 and val < 1) else None for val in x], axis = 1)","bc492ea3":"# give border color if the value is greater than 1 \ncompanies_returns.style.apply(lambda x : ['color:#87a9ff; border-style: ridge; border-width:7px;font-size:20.2px' if (val > 1) else 'opacity:0.2;' for val in x], axis = 0)","c2f61a3f":"companies_returns.style.bar(subset = ['AMZN','IBM'], color = ['#d65f5f', '#5fba7d'], align = 'mid')","840fd28e":"companies_returns.style.text_gradient(subset = ['AAPL','AMZN'], cmap = 'icefire').applymap(lambda x : 'font-size:22.2px; font-weight:bold')","4526df43":"df = pd.read_csv('https:\/\/raw.githubusercontent.com\/kshirsagarsiddharth\/ipywidgets_data\/main\/loan_data_raw.csv')","f712325d":"df.isnull().sum()","80aa3533":"df['loan_int_rate'].isnull().sum() * 100 \/ df.shape[0]","97581030":"df['loan_int_rate'] = df['loan_int_rate'].fillna(df['loan_int_rate'].median())","71ef3d84":"df['person_emp_length'] = df['person_emp_length'].fillna(df['person_emp_length'].median())","01819c47":"df.isnull().sum()","70b8c976":"df.select_dtypes(include = 'number').columns","a8135209":"numeric_cols = ['person_age', 'person_income', 'person_emp_length', 'loan_amnt',\n       'loan_int_rate','loan_percent_income',\n       'cb_person_cred_hist_length']\nnumeric_cols","972ab2f1":"def scatter_plot_int(x = 'person_age',y = 'person_income'):\n    plt.figure(dpi = 120)\n    sns.set_style('whitegrid')\n    return sns.scatterplot(data = df, x = x,y = y, alpha = 0.6)","eb3e37f8":"scatter_plot_int()","cb86bc21":"_ = interact(scatter_plot_int,\n             x = widgets.Dropdown(\n                 options = ['person_age','person_income','person_emp_length','loan_amnt','loan_int_rate','loan_percent_income','cb_person_cred_hist_length']\n                 ),\n             y = widgets.Dropdown(\n                 options = ['person_age','person_income','person_emp_length','loan_amnt','loan_int_rate','loan_percent_income','cb_person_cred_hist_length']\n                 )\n            )","76608967":"df = df[~(df['person_age'] > 80)]\n#df = df[~(df['person_income'] > 5)]\n#df = df[~(df['person_emp_length'] > 70)]\n\n","2bb9f024":"def scatter_plot_int(x = 'person_age',y = 'person_income'):\n    plt.figure(dpi = 120)\n    sns.set_style('whitegrid')\n    return sns.scatterplot(data = df, x = x,y = y, alpha = 0.6, ).set_title('Visualize Relation Between 2 Quantative Variables')\nA = interact(scatter_plot_int,\n             x = widgets.Dropdown(\n                 options = ['person_age','person_income','person_emp_length','loan_amnt','loan_int_rate','loan_percent_income','cb_person_cred_hist_length']\n                 ),\n             y = widgets.Dropdown(\n                 options = ['person_age','person_income','person_emp_length','loan_amnt','loan_int_rate','loan_percent_income','cb_person_cred_hist_length']\n                 )\n            )","05b5d6b9":"def scatter_plot_int_with_hue(x = 'person_age',y = 'person_income', hue = 'loan_grade'):\n    plt.figure(dpi = 120)\n    sns.set_style('whitegrid')\n    return sns.scatterplot(data = df, x = x,y = y, alpha = 0.6, hue = hue, cmap = 'Set2').set_title('Visualize Relation Between 2 Quantative Variables with Hue')\n\nB = interact(scatter_plot_int_with_hue,\n             x = widgets.Dropdown(\n                 options = ['person_age','person_income','person_emp_length','loan_amnt','loan_int_rate','loan_percent_income','cb_person_cred_hist_length']\n                 ),\n             y = widgets.Dropdown(\n                 options = ['person_age','person_income','person_emp_length','loan_amnt','loan_int_rate','loan_percent_income','cb_person_cred_hist_length']\n                 ),\n              hue = widgets.Dropdown(\n                 options = ['person_home_ownership', 'loan_intent', 'loan_grade','cb_person_default_on_file','loan_status']\n                 ) \n            )","ba20157c":"def univariate_hist(x = 'person_age'):\n    plt.figure(dpi = 130)\n    sns.set_style('whitegrid')\n    return sns.kdeplot(x = x, data = df, fill=True, palette = 'crest').set_title('Univariate visualization of Quantative Variable')\n\n\nC = interact(univariate_hist,\n             x = widgets.Dropdown(\n                 options = ['person_age','person_income','person_emp_length','loan_amnt','loan_int_rate','loan_percent_income','cb_person_cred_hist_length']\n                 )\n            )","71d2c6c6":"def univariate_hist_with_hue(x = 'person_age', hue = 'person_income'):\n    plt.figure(dpi = 130)\n    sns.set_style('whitegrid')\n    return sns.kdeplot(x = x, data = df, fill=True, palette = 'crest', hue = hue).set_title('Univariate visualization of Quantative Variable with hue')\n\n\nD = interact(univariate_hist_with_hue,\n             x = widgets.Dropdown(\n                 options = ['person_age','person_income','person_emp_length','loan_amnt','loan_int_rate','loan_percent_income','cb_person_cred_hist_length']\n                 ),\n             hue = widgets.Dropdown(\n                 options = ['person_home_ownership', 'loan_intent', 'loan_grade','cb_person_default_on_file','loan_status']\n                 ) \n             \n            )","5366690e":"def visualize_pivot_tables(index = 'person_home_ownership', column = 'loan_grade', values = 'loan_amnt', axis = 0):\n    color_palette = sns.color_palette(\"vlag_r\", as_cmap=True)\n    t = pd.pivot_table(data = df, index = index, columns = column, values = values)\n    return t.style.background_gradient(color_palette,axis = axis).applymap(lambda x : 'font-size:17.2px; font-weight:bold; opacity:0.9')\n    ","01e74b8c":"E = interact(visualize_pivot_tables,\n             \n             index = widgets.Dropdown(\n                 options = ['person_home_ownership', 'loan_intent', 'loan_grade','cb_person_default_on_file','loan_status']\n                 ),\n             column = widgets.Dropdown(\n                 options = ['person_home_ownership', 'loan_intent', 'loan_grade','cb_person_default_on_file','loan_status'],\n                 index = 1\n                 ),\n             values = widgets.Dropdown(\n                 options = ['person_age','person_income','person_emp_length','loan_amnt','loan_int_rate','loan_percent_income','cb_person_cred_hist_length'],\n                 index = 3\n                 ),\n             axis = widgets.RadioButtons(options = [('Row',0),('Columns',1)])\n                 \n             \n            )\n","dd8a65a2":"def interactive_crosstab(index = 'loan_grade', column = 'loan_intent'):\n    crosstab = pd.crosstab(df[index], df[column]).style.text_gradient(cmap = 'icefire').applymap(lambda x : 'font-size:22.2px; font-weight:bold')\n    return (crosstab.set_table_styles([\n                    {\n                        \"selector\":\"thead\",\n                        \"props\": [(\"background-color\", \"#d0d0df\"), \n                                  (\"color\", \"black\"),\n                                  (\"font-size\", \"20px\"), (\"font-style\", \"bold\")]\n                    },\n                    {\n                        \"selector\":\"th.row_heading\",\n                        \"props\": [(\"background-color\", \"#7ebecc\"), \n                                  (\"color\", \"black\"), \n                                  (\"font-size\", \"2rem\"), \n                                  (\"font-style\", \"bold\")\n                                 ]\n                    },\n                        ]))\n        \n        ","145a3faa":"F = interact(interactive_crosstab,\n             \n             index = widgets.Dropdown(\n                 options = ['person_home_ownership', 'loan_intent', 'loan_grade','cb_person_default_on_file','loan_status']\n                 ),\n             column = widgets.Dropdown(\n                 options = ['person_home_ownership', 'loan_intent', 'loan_grade','cb_person_default_on_file','loan_status'],\n                 index = 1\n                 )\n            )\n","b0168c60":"A = interactive(scatter_plot_int,\n             x = widgets.Dropdown(\n                 options = ['person_age','person_income','person_emp_length','loan_amnt','loan_int_rate','loan_percent_income','cb_person_cred_hist_length']\n                 ),\n             y = widgets.Dropdown(\n                 options = ['person_age','person_income','person_emp_length','loan_amnt','loan_int_rate','loan_percent_income','cb_person_cred_hist_length']\n                 )\n            )\n\nB = interactive(scatter_plot_int_with_hue,\n             x = widgets.Dropdown(\n                 options = ['person_age','person_income','person_emp_length','loan_amnt','loan_int_rate','loan_percent_income','cb_person_cred_hist_length']\n                 ),\n             y = widgets.Dropdown(\n                 options = ['person_age','person_income','person_emp_length','loan_amnt','loan_int_rate','loan_percent_income','cb_person_cred_hist_length']\n                 ),\n              hue = widgets.Dropdown(\n                 options = ['person_home_ownership', 'loan_intent', 'loan_grade','cb_person_default_on_file','loan_status']\n                 ) \n            )\n\nC = interactive(univariate_hist,\n             x = widgets.Dropdown(\n                 options = ['person_age','person_income','person_emp_length','loan_amnt','loan_int_rate','loan_percent_income','cb_person_cred_hist_length']\n                 )\n            )\n\n\nD = interactive(univariate_hist_with_hue,\n             x = widgets.Dropdown(\n                 options = ['person_age','person_income','person_emp_length','loan_amnt','loan_int_rate','loan_percent_income','cb_person_cred_hist_length']\n                 ),\n             hue = widgets.Dropdown(\n                 options = ['person_home_ownership', 'loan_intent', 'loan_grade','cb_person_default_on_file','loan_status']\n                 ) \n             \n            )\n","850ceb10":"hbox1 = widgets.HBox([widgets.Label('One'), A,B])\nhbox2 = widgets.HBox([widgets.Label('Two'),C,D])\nwidgets.VBox([hbox1, hbox2])","dde57d8c":"F = interact(interactive_crosstab,\n             \n             index = widgets.Dropdown(\n                 options = ['person_home_ownership', 'loan_intent', 'loan_grade','cb_person_default_on_file','loan_status']\n                 ),\n             column = widgets.Dropdown(\n                 options = ['person_home_ownership', 'loan_intent', 'loan_grade','cb_person_default_on_file','loan_status'],\n                 index = 1\n                 )\n            )","cd75d8a5":"\nE = interact(visualize_pivot_tables,\n             \n             index = widgets.Dropdown(\n                 options = ['person_home_ownership', 'loan_intent', 'loan_grade','cb_person_default_on_file','loan_status']\n                 ),\n             column = widgets.Dropdown(\n                 options = ['person_home_ownership', 'loan_intent', 'loan_grade','cb_person_default_on_file','loan_status'],\n                 index = 1\n                 ),\n             values = widgets.Dropdown(\n                 options = ['person_age','person_income','person_emp_length','loan_amnt','loan_int_rate','loan_percent_income','cb_person_cred_hist_length'],\n                 index = 3\n                 ),\n             axis = widgets.RadioButtons(options = [('Row',0),('Columns',1)])            \n            )","e0d7f38c":"<a id = 'section_1.2.6'><\/a>\n### Visualizing all widgets","e235e9a1":"#### interact intro implicit widgets. \nWhen we pass particular data structures to interact those displays different widgets based on those inputs. ","5aa225d1":"<a id='section_1.2.2'><\/a>\n#### FloatRangeSlider\n1. Say we want to form minimum value to maximum value, in this case setting the x limit \n   we can leverage the power of float slider. ","e58dc2bf":"<a id = 'section_3.3'><\/a>\n#### Visualize Relation Between 2 Quantitative Variables","29225440":"#### Suppose we want to increase the size of text and add some background color","4f8b6e80":"<a id = 'section_2.4'><\/a>\n### 4. Apply: Suppose we want to find maximum and minimum on a row i.e which asset performed best and worst on a given day, we can do this using apply function this method takes the function and axis on which we want to apply the function \n```\napply(\n    func: 'Callable[..., Styler]',\n    axis: 'Axis | None' = 0,\n    subset: 'Subset | None' = None,\n    **kwargs,\n) -> 'Styler'\nDocstring:\nApply a CSS-styling function column-wise, row-wise, or table-wise.\n\nUpdates the HTML representation with the result.\n```\n","5cae726c":"<a id = 'section_1.2.5'><\/a>\n#### Dropdown\n1. Dropdown widget can be used to get a dropdown list. In our case we will vary paletts of out plot to visualize various color schemes.\n","7933074f":"<a id = 'section_3.6'><\/a>\n#### Univariate visualization of Quantitative Variable with hue ","98142d80":"<a id = 'section_3'><\/a>\n## III. Applying ipywidgets and pandas styler to perform loan default analysis analysis.","515b61e7":"<a id='section_1.1.4'><\/a>\n#### passing a float we get float slider ","bb2d3d5e":"#### After using above interactive plot I found these outliers \n1. person age > 80 outliers\n2. person income > 5 outliers\n3. person employment length > 60 outliers ","95f178ad":"## Model building (to be continued.. )","8f6b04f2":"<a id='section_1.1.3'><\/a>\n#### passing a string we get text box","547270a4":"less than 10 percent of data is null hence we can replace this with median. This is not recommended but for sake of simplicity we can do this. ","c512cedc":"<a id = 'section_1.2.7'><\/a>\n#### Say we want to arrange our widgets in horizontally or vertically we can do this using HBox and VBox ","12815043":"<a id='section_1'><\/a>\n## I. ipywidgets interact\n<a id='section_1.1'><\/a>\n### a. implicit interact\n1. At most basic level interact auto-generates UI controls for function arguments, and then calls the function with those arguments when you manipulate the controls interactively. \n2. Or speaking simply interact takes the function and arguments of the function to create a interactive plot, this plot can be manipulated by changing the value of function arguments. So let's take look at example. \n","b9221647":"<a id = 'section_3.2'><\/a>\n### Outlier detection and removal \nGenerally outliers lie with quantitative data hence we want to perform interactive visualization of all quantitative variables. ","963466b0":"## II. Now lets take a look at pandas table styling with stock data.","03dc8f78":"#### lets consider the below data frame which calculates returns of a stock\n1. Returns(https:\/\/www.investopedia.com\/terms\/r\/return.asp)\n    1. A return is the change in price of an asset, investment, or project over time, which may be represented in terms of price change or percentage change.\n    2. A positive return represents a profit while a negative return marks a loss\n\n![image.png](attachment:19220509-74af-409c-a847-813681c1817b.png)","80965a17":"<a id='section_1.1.1'><\/a>\n#### passing a integer we get a integer slider ","86257533":"<a id='section_1.2'><\/a>\n## Interact explicit widgets","9d81dc25":"<a id = 'section_2.6'><\/a>\n#### 6. Using text gradient to highlight text \n```\ntext_gradient(\n    cmap='PuBu',\n    low: 'float' = 0,\n    high: 'float' = 0,\n    axis: 'Axis | None' = 0,\n    subset: 'Subset | None' = None,\n    vmin: 'float | None' = None,\n    vmax: 'float | None' = None,\n    gmap: 'Sequence | None' = None,\n) -> 'Styler'\nDocstring:\nColor the text in a gradient style.\n\nThe text color is determined according\nto the data in each column, row or frame, or by a given\ngradient map. Requires matplotlib.\n```","f203e07a":"<a id = 'section_2.1'><\/a>\n#### 1. Using Background Gradient function to visualize heatmap of the dataframe\n```\nbackground_gradient(\n    cmap='PuBu',\n    low: 'float' = 0,\n    high: 'float' = 0,\n    axis: 'Axis | None' = 0,\n    subset: 'Subset | None' = None,\n    text_color_threshold: 'float' = 0.408,\n    vmin: 'float | None' = None,\n    vmax: 'float | None' = None,\n    gmap: 'Sequence | None' = None,\n) -> 'Styler'\nDocstring:\nColor the background in a gradient style.\n\nThe background color is determined according\nto the data in each column, row or frame, or by a given\ngradient map. Requires matplotlib.\n```","41000c9c":"<a id = 'section_3.1'><\/a>\n#### 1. Handling Null Values","78a9da1d":"# Create Interactive Fast and beautiful dashboards using ipywidgets. \n\n## We will look into how we can interactively visualize data frames using ipywidgets. \nI have divided this kernel into three parts first two parts are simple introductions to concepts and last part is application of those concepts.","c314918c":"<a id = 'section_3.9'><\/a>\n## Create Dashboard\nfrom data acquired from above plots we create a dashboard using interactive class","6a1bf86c":"<a id='section_1.2.1'><\/a>\n#### IntSlider\n1. The slider is displayed with a specified, initial value. Lower and upper bounds are defined by min and max, and the value can be incremented according to the step parameter.\n2. The first argument of plot_histogram is bins which can be changed with the int slider. And other values will be set as default values as described above.","52bf0351":"<a id = 'section_2.3'><\/a>\n#### 3. Using Apply Map \n1. This function will take first argument as function and second argument as label,array-like\n```\napplymap(\n    func: 'Callable',\n    subset: 'Subset | None' = None,\n    **kwargs,\n) -> 'Styler'\nDocstring:\nApply a CSS-styling function elementwise.\n\nUpdates the HTML representation with the result.\n```","3d2e8a61":"<a id = 'section_2.2'><\/a>\n#### 2. Highlighting minimum and maximum values\n```\nhighlight_min(\n    subset: 'Subset | None' = None,\n    color: 'str' = 'yellow',\n    axis: 'Axis | None' = 0,\n    props: 'str | None' = None,\n) -> 'Styler'\nDocstring:\nHighlight the minimum with a style.\n```","5243fb0a":"<a id='section_1.2.3'><\/a>\n#### ToggleButton \n1. Suppose we want to visualize some categorical features and we want button like widget, toggle button widget can be leveraged. \n2. In this example we want button for hue parameter. ","090fce06":"<a id = 'section_3.4'><\/a>\n#### 'Visualize Relation Between 2 Quantitative Variables with Hue'","55470cd1":"<a id = 'section_3.7'><\/a>\n#### Pivoting \nLets say you want to perform some pivoting with categorical data being in index and columns and, values being numerical data, this can be done using pivot tables.\nin simple words we want to perform some pivoting.","0d0a3672":"lets fill person employment length data frame with median value ","077e97fc":"### Visualizations are best way to communicate results with stake holders but sometimes looking at tabular data makes more sense. But there is always limitations in python visualization eco-system, not any more stick with kernel and you will be able to interactively visualize pandas Data Frame with amazing colors and interactions. \n## Contents:\n1.  [Ipywidgets interact](#section_1).\n    1. [Implicit Interact](#section_1.1)\n        1. [Integer widget](#section_1.1.1)\n        2. [Boolean widget](#section_1.1.2)\n        3. [String widget](#section_1.1.3)\n        4. [Float widget](#section_1.1.4)    \n    2. [Explicit Interact](#section_1.2)\n        1. [IntSlider](#section_1.2.1)\n        2. [FloatRangeSlider](#section_1.2.2)\n        3. [ToggleButton](#section_1.2.3)\n        4. [RadioButton](#section_1.2.4)\n        5. [DropDown](#section_1.2.5)\n        6. [Visualize All Widgets](#section_1.2.6)\n        7. [Using Layout Templates](#section_1.2.7)\n2. [Data Frame Style](#section_2)\n    1. [Using background Gradient](#section_2.1)\n    2. [Highlight Minimum and Maximum Value](#section_2.2) \n    3. [Using Apply Map](#section_2.3)\n    4. [Using Apply](#section_2.4)\n    5. [Using DataFrame bar](#section_2.5)\n    6. [Using Text Gradient](#section_2.6)\n3. [Project Application](#section_3)\n    1. [Handling Null Values](#section_3.1)\n    2. [Outlier Removal](#section_3.2)\n    3. [Visualize Relation Between 2 Quantitative Variables](#section_3.3)\n    4. [Visualize Relation Between 2 Quantitative Variables with Hue](#section_3.4)\n    5. [Univariate visualization of Quantitative Variable](#section_3.5)\n    6. [Univariate visualization of Quantitative Variable with hue](#section_3.6)\n    7. [Pivoting](#section_3.7)\n    8. [Crosstab](#section_3.8)\n    9. [Dash Board](#section_3.9)\n4. [Data Preparation (to be continiued... )]\n5. [Machine Learning Model (to be continued.. )]\n  \n  \n  ","51a4e4b7":"#### using profit loss and font and background function together","f2a49e93":"<a id='section_1.1.2'><\/a>\n#### passing a boolean we get boolean radio buttons ","2b3fdedc":"consider this histogram, lets convert this into a function which takes arguments of histogram and plots a histogram","79d2f42e":"<a id = 'section_1.2.4'><\/a>\n#### Radio Buttons \n1. Lets create radio buttons to visualize kde plot of the hostogra,  ","f03e2243":"#### now we are rid of null values. ","54a9b0b6":"<a id = 'section_3.5'><\/a>\n#### Univariate visualization of Quantitative Variable","e161a895":"<a id = 'section_3.8'><\/a>\n#### Analyze data between two categorical variables.","fceed17a":"<a id = 'section_2.5'><\/a>\n#### 5. bar: Lets say we are interested in only two assets and we want to compare both asset performance for each year side by side. We can leverage bar method of pandas style.  \n```\nbar(\n    subset: 'Subset | None' = None,\n    axis: 'Axis | None' = 0,\n    color='#d65f5f',\n    width: 'float' = 100,\n    align: 'str' = 'left',\n    vmin: 'float | None' = None,\n    vmax: 'float | None' = None,\n) -> 'Styler'\n```","2f1c2815":"using color palettes from seaborne\nhttps:\/\/seaborn.pydata.org\/tutorial\/color_palettes.html"}}