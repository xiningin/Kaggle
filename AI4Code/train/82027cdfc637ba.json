{"cell_type":{"52e92992":"code","af846dc7":"code","79211a21":"code","90885ba0":"code","897e358a":"code","b4529ab1":"code","cdd127cc":"code","86657924":"code","ec74511b":"code","4589051f":"code","a589e59b":"code","65b9685f":"code","03661079":"code","29c5514c":"code","83bb3960":"code","7e9d5636":"code","81aa0796":"code","8b99f917":"code","1c5dd182":"code","e03b91ad":"code","a0e5f0b4":"code","1a4478b1":"code","669b58ed":"code","6c7876b9":"code","e0d83f08":"markdown","c2f3c522":"markdown","cfaee75a":"markdown","9e13b75f":"markdown","6f320ded":"markdown","342b9ede":"markdown","1b3d4cd9":"markdown","42e253b6":"markdown","250b5b63":"markdown","0bcb7bc0":"markdown","8b39595e":"markdown","87cc159c":"markdown","475d2c7d":"markdown","c7c05b11":"markdown","b7b2a247":"markdown","2c03384a":"markdown","3850aca9":"markdown","d6f56ae8":"markdown","419c8186":"markdown","6cfce263":"markdown","d4b5d991":"markdown","b95472a3":"markdown","80b6c1e2":"markdown","4b48bbfd":"markdown","a3901df3":"markdown","4c854da1":"markdown","7efd77d2":"markdown","39f6bd45":"markdown","fdd9d310":"markdown","d8702486":"markdown","51c1783b":"markdown","1f8a7e5b":"markdown","8647dbe6":"markdown"},"source":{"52e92992":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math as math\nimport matplotlib.pyplot as plt\nimport datetime as dt\nimport seaborn as sns\nimport fbprophet as fb\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","af846dc7":"dfGeneration_1 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\ndfWeatherSensor_1 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')\ndfGeneration_2 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv')\ndfWeatherSensor_2 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv')","79211a21":"# SPLITTING DATETIME INTO DATE, TIME, HOURS AND MINUTES\ndfGeneration_1['DATE_TIME'] = pd.to_datetime(dfGeneration_1['DATE_TIME'], format ='%d-%m-%Y %H:%M')\ndfGeneration_1['DATE'] = dfGeneration_1['DATE_TIME'].dt.date\ndfGeneration_1['DATE'] = pd.to_datetime(dfGeneration_1['DATE'],format = '%Y-%m-%d')\ndfGeneration_1['TIME'] = dfGeneration_1['DATE_TIME'].dt.time\ndfGeneration_1['TIME'] = pd.to_datetime(dfGeneration_1['TIME'], format = '%H:%M:%S')\ndfGeneration_1['HOUR'] = pd.to_datetime(dfGeneration_1['TIME'],format='%H:%M:%S').dt.hour\ndfGeneration_1['MINUTES'] = pd.to_datetime(dfGeneration_1['TIME'],format='%H:%M:%S').dt.minute\ndfGeneration_1.info()\n\ndfGeneration_2['DATE_TIME'] = pd.to_datetime(dfGeneration_2['DATE_TIME'], format ='%Y-%m-%d %H:%M')\ndfGeneration_2['DATE'] = dfGeneration_2['DATE_TIME'].dt.date\ndfGeneration_2['DATE'] = pd.to_datetime(dfGeneration_2['DATE'],format = '%Y-%m-%d')\ndfGeneration_2['TIME'] = dfGeneration_2['DATE_TIME'].dt.time\ndfGeneration_2['TIME'] = pd.to_datetime(dfGeneration_2['TIME'], format = '%H:%M:%S')\ndfGeneration_2['HOUR'] = pd.to_datetime(dfGeneration_2['TIME'],format='%H:%M:%S').dt.hour\ndfGeneration_2['MINUTES'] = pd.to_datetime(dfGeneration_2['TIME'],format='%H:%M:%S').dt.minute\ndfGeneration_2.info()\n\ndfWeatherSensor_1['DATE_TIME'] = pd.to_datetime(dfWeatherSensor_1['DATE_TIME'], format ='%Y-%m-%d %H:%M')\ndfWeatherSensor_1['DATE'] = dfWeatherSensor_1['DATE_TIME'].dt.date\ndfWeatherSensor_1['DATE'] = pd.to_datetime(dfWeatherSensor_1['DATE'],format = '%Y-%m-%d')\ndfWeatherSensor_1['TIME'] = dfWeatherSensor_1['DATE_TIME'].dt.time\ndfWeatherSensor_1['TIME'] = pd.to_datetime(dfWeatherSensor_1['TIME'], format = '%H:%M:%S')\ndfWeatherSensor_1['HOUR'] = pd.to_datetime(dfWeatherSensor_1['TIME'],format='%H:%M:%S').dt.hour\ndfWeatherSensor_1['MINUTES'] = pd.to_datetime(dfWeatherSensor_1['TIME'],format='%H:%M:%S').dt.minute\ndfWeatherSensor_1.info()\n\ndfWeatherSensor_2['DATE_TIME'] = pd.to_datetime(dfWeatherSensor_2['DATE_TIME'], format ='%Y-%m-%d %H:%M')\ndfWeatherSensor_2['DATE'] = dfWeatherSensor_2['DATE_TIME'].dt.date\ndfWeatherSensor_2['DATE'] = pd.to_datetime(dfWeatherSensor_2['DATE'],format = '%Y-%m-%d')\ndfWeatherSensor_2['TIME'] = dfWeatherSensor_2['DATE_TIME'].dt.time\ndfWeatherSensor_2['TIME'] = pd.to_datetime(dfWeatherSensor_2['TIME'], format = '%H:%M:%S')\ndfWeatherSensor_2['HOUR'] = pd.to_datetime(dfWeatherSensor_2['TIME'],format='%H:%M:%S').dt.hour\ndfWeatherSensor_2['MINUTES'] = pd.to_datetime(dfWeatherSensor_2['TIME'],format='%H:%M:%S').dt.minute\ndfWeatherSensor_2.info()","90885ba0":"# How many inverters\n#Plant 1\nprint(\"The number of inverters in plant 1-\", dfGeneration_1['SOURCE_KEY'].nunique())\n#Plant 2\nprint(\"The number of inverters in plant 2-\", dfGeneration_2['SOURCE_KEY'].nunique())\n","897e358a":"# IRRADIATION VS DC\n# PLANT 1\ndf_plant1 = pd.merge(dfGeneration_1, dfWeatherSensor_1, on='DATE_TIME', how='left')\nplt.figure(figsize=(20,10))\nplt.title(\"Irradiation vs DC Power Plant 1\")\nplt.scatter(df_plant1['IRRADIATION'], df_plant1['DC_POWER'], c='c', alpha=0.5)\nplt.xlabel(\"Irradiation\")\nplt.ylabel(\"DC Power\")\nplt.grid()\nplt.show()","b4529ab1":"# PLANT 2\ndf_plant2 = pd.merge(dfGeneration_2, dfWeatherSensor_2, on='DATE_TIME', how='left')\nplt.figure(figsize=(20,10))\nplt.title(\"Irradiation vs DC Power Plant 2\")\nsns.lineplot(x='IRRADIATION', y='DC_POWER', data=df_plant2, color='magenta')\nplt.grid()\nplt.show()","cdd127cc":"#Heat Map Amb Temp\n# PLANT 1\ndf_amb1 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv\")\ndf_amb1 = df_amb1.drop(['DATE_TIME', 'PLANT_ID', 'SOURCE_KEY', 'MODULE_TEMPERATURE', 'IRRADIATION'], axis=1)\ndf_amb1['DATE'] = dfWeatherSensor_1['DATE'].dt.date\ndf_amb1['HOUR'] = dfWeatherSensor_1['TIME'].dt.hour\ndf_amb1 = df_amb1.groupby(['HOUR', 'DATE']).mean()\ndf_amb1 = df_amb1.unstack(level=0)\n\nx_labels = list()\nfor i in range(24):\n    x_labels.append(i)\nplt.figure(figsize=(20, 10))\nplt.title(\"AMBIENT TEMPERATURE PLANT 1\")\nsns.heatmap(df_amb1, cmap=\"coolwarm\", linewidth=0.3, annot=True)\nplt.xticks(np.arange(24)+0.5, labels=x_labels)\nplt.xticks(rotation=0)\nplt.xlabel('HOURS')\nplt.ylabel('DATE')\nplt.show()\n","86657924":"# Plant 2\ndf_amb2 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv\")\ndf_amb2 = df_amb2.drop(['DATE_TIME', 'PLANT_ID', 'SOURCE_KEY', 'MODULE_TEMPERATURE', 'IRRADIATION'], axis=1) \ndf_amb2['DATE'] = dfWeatherSensor_2['DATE'].dt.date\ndf_amb2['HOUR'] = dfWeatherSensor_2['TIME'].dt.hour\ndf_amb2 = df_amb2.groupby(['HOUR', 'DATE']).mean()\ndf_amb2 = df_amb2.unstack(level=0)\n\nx_labels = list()\nfor i in range(24):\n    x_labels.append(i)\nplt.figure(figsize=(20, 10))\nplt.title(\"AMBIENT TEMPERATURE PLANT 2\")\nsns.heatmap(df_amb2, cmap=\"coolwarm\", linewidth=0.3, annot=True)\nplt.xticks(np.arange(24)+0.5, labels=x_labels)\nplt.xticks(rotation=0)\nplt.xlabel('HOURS')\nplt.ylabel('DATE')\nplt.show()\n","ec74511b":"# 2) Heat Map Mod Temp\n# PLANT 1\ndf_mod1 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv\")\ndf_mod1 = df_mod1.drop(['DATE_TIME', 'PLANT_ID', 'SOURCE_KEY', 'AMBIENT_TEMPERATURE', 'IRRADIATION'], axis=1)\ndf_mod1['DATE'] = dfWeatherSensor_1['DATE'].dt.date\ndf_mod1['HOUR'] = dfWeatherSensor_1['TIME'].dt.hour\ndf_mod1 = df_mod1.groupby(['HOUR', 'DATE']).mean()\ndf_mod1 = df_mod1.unstack(level=0)\n\nx_labels = list()\nfor i in range(24):\n    x_labels.append(i)\nplt.figure(figsize=(20, 10))\nplt.title(\"MODULE TEMPERATURE PLANT 1\")\nsns.heatmap(df_mod1, cmap=\"coolwarm\", linewidth=0.3, annot=True)\nplt.xticks(np.arange(24)+0.5, labels=x_labels)\nplt.xticks(rotation=0)\nplt.xlabel('HOURS')\nplt.ylabel('DATE')\nplt.show()","4589051f":"# Plant 2\ndf_mod2 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv\")\ndf_mod2 = df_mod2.drop(['DATE_TIME', 'PLANT_ID', 'SOURCE_KEY', 'AMBIENT_TEMPERATURE', 'IRRADIATION'], axis=1) \ndf_mod2['DATE'] = dfWeatherSensor_2['DATE'].dt.date\ndf_mod2['HOUR'] = dfWeatherSensor_2['TIME'].dt.hour\ndf_mod2 = df_mod2.groupby(['HOUR', 'DATE']).mean()\ndf_mod2 = df_mod2.unstack(level=0)\n\nx_labels = list()\nfor i in range(24):\n    x_labels.append(i)\nplt.figure(figsize=(20, 9))\nplt.title(\"MODULE TEMPERATURE PLANT 2\")\nsns.heatmap(df_mod2, cmap=\"coolwarm\", linewidth=0.3, annot=True)\nplt.xticks(np.arange(24)+0.5, labels=x_labels)\nplt.xticks(rotation=0)\nplt.xlabel('HOURS')\nplt.ylabel('DATE')\nplt.show()","a589e59b":"df_plant1 = pd.merge(dfGeneration_1, dfWeatherSensor_1, on='DATE_TIME', how='left')\nplt.figure(figsize=(20,10))\nplt.title(\"Ambient Temperature vs DC Power Plant 1\")\nplt.scatter(df_plant1['AMBIENT_TEMPERATURE'], df_plant1['DC_POWER'], c='c', alpha=0.5)\nplt.xlabel(\"Ambient Temperature\")\nplt.ylabel(\"DC Power\")\nplt.grid()\nplt.show()","65b9685f":"# The LINEAR REGRESSION MODEL\nDC_POW1 = dfGeneration_1.iloc[:,[3]].values\nAC_POW1 = dfGeneration_1.iloc[:,[4]].values\nDC_POW2 = dfGeneration_2.iloc[:,[3]].values\nAC_POW2 = dfGeneration_2.iloc[:,[4]]\nplt.figure(figsize = (20, 10))\nplt.scatter(DC_POW1, AC_POW1, color = 'Purple', label = 'Plant 1')\nplt.scatter(DC_POW2, AC_POW2, color = 'Green', label = 'Plant 2')\nplt.legend(loc = 'lower right')\nplt.xlabel('DC POWER (in kW)')\nplt.ylabel('AC POWER (in kW)')\nplt.title('DC POWER vs AC POWER')\nplt.show()\n","03661079":"from sklearn.model_selection import train_test_split as tts\nfrom sklearn.linear_model import LinearRegression\n\nx_train, x_test, y_train, y_test = tts(DC_POW1, AC_POW1, test_size = 0.2, random_state = 1)\n#Create\nmodel1 = LinearRegression()\n#Train\nmodel1.fit(x_train, y_train)\n#Test\nplt.figure(figsize = (20, 10))\nplt.plot(x_test, y_test, color = 'Blue', linewidth = 1, label = 'Actual Outcome')\nplt.plot(x_test, model1.predict(x_test), color = 'red', linewidth = 1, label = 'Predicted Outcome')\nplt.legend(loc = 'lower right')\nplt.xlabel('DC POWER (in kW)')\nplt.ylabel('AC POWER (in kW)')\nplt.title('DC POWER vs AC POWER MODEL TEST PLANT 1')\nplt.grid()\nplt.show()\n\nx_test1 = x_test\ny_test1 = y_test","29c5514c":"x_train, x_test, y_train, y_test = tts(DC_POW2, AC_POW2, test_size = 0.2, random_state = 18)\nmodel2 = LinearRegression()   #create\nmodel2.fit(x_train, y_train)   #train\n\nplt.figure(figsize = (20, 10))\nplt.plot(x_test, y_test, color = 'purple', label = 'Actual Values', linewidth = 2)\nplt.plot(x_test, model2.predict(x_test), color = 'orange', label = 'Predicted Values', linewidth = 2)\nplt.legend(loc = 'lower right')\nplt.xlabel('DC POWER (in kW)')\nplt.ylabel('AC POWER (in kW)')\nplt.title('DC POWER vs AC POWER MODEL TEST PLANT 2')\nplt.show()\n","83bb3960":"dataP1 = pd.DataFrame({'DC_POWER':np.random.randint(0, 14000, 150)})\ndataP1 = dataP1.iloc[:, [0]].values\nprediction1 = model1.predict(dataP1)\nplt.figure(figsize = (20, 10))\nplt.plot(x_test1, y_test1, color = 'Blue', label = 'Expected Line')\nplt.plot(dataP1, prediction1, color = 'red', label = 'Model Predictions')\nplt.legend(loc = 'lower right')\nplt.xlabel('DC POWER (Random Values) in kW')\nplt.ylabel('AC POWER (Predicted Values) in kW')\nplt.title('MODEL PREDICTION PLANT 1')\nplt.grid()\nplt.show()","7e9d5636":"dataP2 = pd.DataFrame({'DC_POWER':np.random.randint(0, 1400, 150)})\ndataP2 = dataP2.iloc[:, [0]].values\nprediction2 = model2.predict(dataP2)\nplt.figure(figsize = (21, 12))\nplt.plot(x_test, y_test, color = 'Purple', label = 'Expected Line')\nplt.plot(dataP2, prediction2, color = 'Orange', label = 'Model Predictions', linewidth = 2)\nplt.legend(loc = 'lower right')\nplt.xlabel('DC POWER (Random Values) in kW')\nplt.ylabel('AC POWER (Predicted Values) in kW')\nplt.title('MODEL PREDICTION PLANT 2')\nplt.grid()\nplt.show()","81aa0796":"# Consistent \n#PLANT 1\n\na = dfGeneration_1.groupby('SOURCE_KEY')['DC_POWER'].sum()\npowList = list()\nsource_list = dfGeneration_1['SOURCE_KEY'].unique()\nsource_valcounts = dfGeneration_1['SOURCE_KEY'].value_counts()\nfor i in range(0,22):\n    counts = source_valcounts[source_list[i]]\n    powList.append(a[i]\/counts)\nnum = max(powList)\nfor o in range(0,22):\n    if num == powList[o]:\n        print(\"The most consistent generator in plant 1 is\", source_list[o])","8b99f917":"#Plant 2\na2 = dfGeneration_2.groupby('SOURCE_KEY')['DC_POWER'].sum()\npowList = list()\nsource_list = dfGeneration_2['SOURCE_KEY'].unique()\nsource_valcounts = dfGeneration_2['SOURCE_KEY'].value_counts()\nfor i in range(0,22):\n    counts = source_valcounts[source_list[i]]\n    powList.append(a2[i]\/counts)\nnum2 = max(powList)\nfor o in range(0,22):\n    if num2 == powList[o]:\n        print(\"The most consistent generator in plant 2 is\", source_list[o])","1c5dd182":"#GRAPHING OVER 24 HRS\n#Plant 1(bvBOhCH3iADSZry)\n\nplant1m = pd.DataFrame({'SOURCE_KEY': dfGeneration_1['SOURCE_KEY'], 'TIME': dfGeneration_1['TIME'], 'DC_POWER': dfGeneration_1['DC_POWER']})\nplant1m = plant1m.groupby(['SOURCE_KEY', 'TIME']).mean()\nStartInv = int()\nsource_key_check = dfGeneration_1['SOURCE_KEY'].unique()\n\np = dfGeneration_1['DATE_TIME'].dt.time\nuniqueTime = p.unique()\nfor o in range(0,24*4):\n    uniqueTime[o] = str(uniqueTime[o])\nTimeList = list()\nfor i in range(0,24*4, 4):\n    TimeList.append(uniqueTime[i])\n#SINCE EACH SOURCE KEY HAS 24*4 = 96 ROWS, Whichever Value of source_key_check the invertor is, it starts at the 96*(i+1) position of the new plant1m and ends at the 96*(i+1) + 95th position\nfor i in range(0,22):\n    if source_key_check[i] == 'bvBOhCH3iADSZry':\n        StartInv = 96*(i+1)\n        \nplt.figure(figsize = (21, 12))\nplt.bar(uniqueTime,plant1m[StartInv:StartInv+96]['DC_POWER'], color = 'red')\nplt.xticks(TimeList, rotation = 90)\nplt.xlabel('TIME OF THE DAY')\nplt.ylabel('DC POWER PRODUCED (in kW)')\nplt.title('DC POWER BY THE MOST CONSISTENT INVERTER OF PLANT 1 ON AN AVERAGE DAY')\nplt.show()","e03b91ad":"plant2m = pd.DataFrame({'SOURCE_KEY': dfGeneration_2['SOURCE_KEY'], 'TIME': dfGeneration_2['TIME'], 'DC_POWER': dfGeneration_2['DC_POWER']})\nplant2m = plant2m.groupby(['SOURCE_KEY', 'TIME']).mean()\nStartInv = int()\nsource_key_check = dfGeneration_2['SOURCE_KEY'].unique()\n\np = dfGeneration_2['DATE_TIME'].dt.time\nuniqueTime = p.unique()\nfor o in range(0,24*4):\n    uniqueTime[o] = str(uniqueTime[o])\nTimeList = list()\nfor i in range(0,24*4, 4):\n    TimeList.append(uniqueTime[i])\n#SINCE EACH SOURCE KEY HAS 24*4 = 96 ROWS, Whichever Value of source_key_check the invertor is, it starts at the 96*(i) position of the new plant1m and ends at the 96*(i) + 95th position\nfor i in range(0,22):\n    if source_key_check[i] == 'IQ2d7wF4YD8zU1Q':\n        StartInv = 96*(i)\nplt.figure(figsize = (21, 12))\nplt.bar(uniqueTime,plant2m[StartInv:StartInv+96]['DC_POWER'], color = 'orange')\nplt.xticks(TimeList, rotation = 90)\nplt.xlabel('TIME')\nplt.ylabel('DC POWER GENERATED (in kW)')\nplt.title('DC POWER BY THE MOST CONSISTENT INVERTER OF PLANT 2 ON AN AVERAGE DAY')\nplt.show()","a0e5f0b4":"#Most consistent inverter using FBProphet\ndates = list()\nil = list()\nfor i in range (0,68778):\n    if dfGeneration_1['SOURCE_KEY'][i] == 'bvBOhCH3iADSZry':\n        il.append(i)\ndf3 = dfGeneration_1.iloc[il,:]\ndc = df3.groupby('DATE')['DC_POWER'].sum()\ndf3 = pd.DataFrame({'ds':df3['DATE'].unique(), 'y':dc})\n\nop3 = fb.Prophet(changepoint_prior_scale = 0.25)\nop3.fit(df3)\nprediction3 = op3.make_future_dataframe(periods = 30, freq = 'D')\nprediction3 = op3.predict(prediction3)\nop3.plot(prediction3, xlabel = 'DATE', ylabel = 'DC POWER', figsize = (20,10))\nplt.title(\"DC POWER FORECAST FOR MOST CONSISTENT INVERTER OF PLANT 1\")\nplt.show()","1a4478b1":"dates2 = list()\nil2 = list()\nfor i in range (0,67698):\n    if dfGeneration_2['SOURCE_KEY'][i] == 'IQ2d7wF4YD8zU1Q':\n        il2.append(i)\ndf4 = dfGeneration_2.iloc[il2,:]\ndc = df4.groupby('DATE')['DC_POWER'].sum()\ndf4 = pd.DataFrame({'ds':df4['DATE'].unique(), 'y':dc})\n\nop4 = fb.Prophet(changepoint_prior_scale = 0.25)\nop4.fit(df4)\nprediction4 = op4.make_future_dataframe(periods = 30, freq = 'D')\nprediction4 = op4.predict(prediction4)\nop4.plot(prediction4, xlabel = 'DATE', ylabel = 'DC POWER', figsize = (20,10))\nplt.title(\"DC POWER FORECAST FOR MOST CONSISTENT INVERTER OF PLANT 2\")\nplt.show()","669b58ed":"#FBProphet\nds = dfGeneration_1['DATE'].unique()\ny = dfGeneration_1.groupby('DATE')['DC_POWER'].sum()\ndf = pd.DataFrame({'ds':ds, 'y':y})\nop1 = fb.Prophet(changepoint_prior_scale = 1)\nop1.fit(df)\nprediction1 = op1.make_future_dataframe(periods = 30, freq = 'D')\nprediction1 = op1.predict(prediction1)\nop1.plot(prediction1, xlabel = 'DATE', ylabel = 'DC POWER (x10^6)', figsize = (20,10))\nplt.title(\"DC POWER FORECAST FOR PLANT 1\")\nplt.show()","6c7876b9":"#FBProphet\nds2 = dfGeneration_2['DATE'].unique()\ny2 = dfGeneration_2.groupby('DATE')['DC_POWER'].sum()\ndf2 = pd.DataFrame({'ds':ds2, 'y':y2})\nop2 = fb.Prophet(changepoint_prior_scale = 1)\nop2.fit(df2)\nprediction2 = op2.make_future_dataframe(periods = 30, freq = 'D')\nprediction2 = op2.predict(prediction2)\nop2.plot(prediction2, xlabel = 'DATE', ylabel = 'DC POWER', figsize = (20,10))\nplt.title(\"DC POWER FORECAST FOR PLANT 2\")\nplt.show()","e0d83f08":"\"Greetings Mr. Bason. So predictions, what we do here is that we use a very interesting concept of Machine Learning to predict. I'll take you through the whole process of Linear Regression.\" Said Mahi. \"Yes sure!\" Exclaimed Bason.","c2f3c522":"\nIt was June, and Tamil Nadu was all glowed up. The fields were shining and the villages were waiting for electrcity to reach them. At this moment, Munshi Prathaman, an environmental professor at Tamil Nadu University of Applied Sciences, was in his residence waiting for his breakfast at the table.\nAs the strong smell of cardamom made its way out of the sambar through the kitchen to Munshi, he received a call. It was Mr. Bason Mount, a multi millionaire from the United States of America, requesting for a meeting with Munshi at a cafe near the university.","cfaee75a":"\"So as of now i think there's nothing you guys don't have to crack any deal! I'm pretty sure that you might have found out the most consistent inverter too!\" Exclaimed Bason. \"Yes we have sir!\" Mahi replied. \"I knew it! Please take me through that too!\" Asked Bason. \"Sure sir!\"","9e13b75f":"\"Okay, so there are 2 plants with 22 inverters each sir.\" Munshi replied. \"That's impressive Munshi!\" \"With there being so many inverters with each generating some power, can you tell me how you would corelate the irradiation with DC power?\" Bason questioned.    \"Yes sir, just a moment.\" ","6f320ded":"\"Here sir! This is the heat map for the 1st plant for Ambient Temperature, and for the 2nd it is...\"","342b9ede":"The clock struck 6 and Munshi reached his field for his daily check but this time with Mr. Bason. The field was huge, with multiple solar panels spread across the field. Mr. Bason was in awe and was excited to see what Munshi had to offer. \nMunshi took Mr. Bason to his main solar plant and asked him if he wanted to know anything before forming a deal.\nMr Bason being a businessman had some questions in his mind. ","1b3d4cd9":"\"So as you can see that the model can accurately predict DC power to AC power conversions in plant 1. Now we will do the same for Plant 2.\"","42e253b6":"\"Here you go! This is for the 2nd plant.\" Munshi replied. \"I must say this Munshi, this is quite impressive! You're not only a good scientist but a pretty good business man too!\" Bason exclaimed. \"Okay, so can you tell me about the corelation between Ambient temperature and DC power?\" Bason requested. \"Why not sir, just a moment...\" ","250b5b63":"\"Then we go onto creating testing and training the model\"","0bcb7bc0":"\"Here you go sir! You can have a look!\" Munshi exclaimed. \"For plant 2?\" Bason asked. \"Yes sure, just a moment.\" ","8b39595e":"\"We can clearly see that the predictions of the model to random values of DC power are accurate to the Expected Line.\" Explained Mahi. \"Amazing, I'm not quite sure about what to say. This is just amazing.\" Replied Bason.","87cc159c":"\"From this we can clearly see that our model for plant 2 is also working accurately.\"","475d2c7d":"\"Here it is sir! This is a scatter plot showing the corelation between Ambient temperature and DC power. I know it's a bit messy but these datasets are just too big! Take your time sir, we have plenty of time.\" Munshi replied","c7c05b11":"> \"Okay, so as you can see here in my book, we have a scatter plot corelating irradiation and DC power for plant 1. Here on this x-axis we have irradiation and on the y-axis we have DC power.\"","b7b2a247":"\"You have everything ready!\" \"I was wondering if you can tell me about the Ambient and Module temperature? My team is very curious to know.\" Bason replied. \"Yes sure sir. I know a way through which I can explain it to you the best. I have a heat map, let me just show it to you.\" Munshi replied.","2c03384a":"Munshi being an extraordinary brain had planted solar plants across his 5 acre field. He was a kind hearted person who had devoted his whole life to research and supplying electricity to the villagers, who are in need. ","3850aca9":"here!\" Replied Mahi. \"Perfect! I'm just out of words. This trip was just perfect for me, the deal is done and my team will contact you by the next week. I'm impressed! Thank you so much Munshi, and you too Mahi!\" Bason exclaimed. \"No issues sir.\" Munshi replied.","d6f56ae8":"\"So sir as you can see we first start by checking the relation between DC power and AC power\"","419c8186":"it is IQ2d7wF4YD8zU1Q sir.\" \"Let me just show you our 24hr graphing, i guess that will be enough for you to go ahead with the deal.\" ","6cfce263":"It was 2 in the afternoon and Mr. Bason and Munshi were sipping coffee when Bason came up with his request. He asked Munshi to supply his company with inverters which would yield great amounts of solar energy for his multiple offices and fields back in the States. Munshi being a generous person couldn\u2019t say no and scheduled a meeting at his field at 6 in the evening.","d4b5d991":"\"Absolutely sir! I'll just call an expert, he'll take you through the whole process.\" Replied Munshi.","b95472a3":"\"Here! This is the 2nd heat map for plant 2 for Ambient temperature.\" Said Munshi. \"Impresive! Can i have a look at the Module temperature map?\" Bason asked. \"Sure sir! Just a moment.\" Munshi replied.","80b6c1e2":"\"And for the most consistent inverter in plant 2\"","4b48bbfd":"\"Here you go sir for plant 1.\" \"For plant 2 it is..","a3901df3":"\"Well done Mr Munshi. I am impressed. Would you by any chance also forecast how your plants will perform in the near future?\"inquired Mr. Bason\n\"Yes Sir. We have that too.\"\n\"Here it is for plant 1\"","4c854da1":"\"This is huge! How many inverters are there Munshi?\" Bason questioned. \"To be honest sir, I don't know the exact number but give me a minute I'll just look into my books.\"","7efd77d2":"\"So as you can see sir, our most consistent inverter for plant 1 is bvBOhCH3iADSZry. For plant 2 it is..","39f6bd45":"Munshi intoduces Mahi to Mr. Bason.","fdd9d310":"\"Yes thank you, just give me a moment to look at the plot.\" \"Okay, so I'm quite happy with this Munshi but i want to be completely sure before I proceed with the deal. I would like to know about the predictions, i mean can you predict the outcomes? I want to know if my investment will be beneficial for my company or not. I hope you understand.\" Said Bason. ","d8702486":"\"Here is the plot for plant 2. Same as the 1st one, irradiation on the x-axis and DC power on the y-axis.\" Munshi replied.","51c1783b":"\"And for plant 2\"","1f8a7e5b":"\"Sir we have also forecasted how well these inverters will do in the near future\" \n\"This one is for plant 1\"","8647dbe6":"\"Now what we do is that we input random values into our models.\""}}