{"cell_type":{"cf1767ca":"code","5d0eb4a4":"code","5bbc8da2":"code","26309274":"code","5424b908":"code","3d13f995":"code","2add366e":"code","4aa2e716":"code","cf6735ca":"code","be239b45":"code","cfdf89da":"code","a0b4c4e4":"code","19aafc93":"code","568ed9a8":"code","5ef67116":"code","2d050067":"code","ef1b63b6":"code","11110ec9":"code","e9efe69c":"code","d4c0f504":"code","a4a29ed7":"code","5cd47965":"code","7b9bed60":"code","10454c53":"code","d2c17d2c":"code","03726eb0":"markdown","c607b388":"markdown","93207caa":"markdown","42d67e1d":"markdown","f6438ff2":"markdown","81daac59":"markdown"},"source":{"cf1767ca":"# libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nstyle.use('fivethirtyeight')\n\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nimport torch\nfrom torch.utils.data import TensorDataset, DataLoader,Dataset\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torchvision\nimport torchvision.transforms as transforms\nimport torch.optim as optim\nfrom torch.optim import lr_scheduler\nimport time \nimport tqdm\nfrom PIL import Image\ntrain_on_gpu = True\nfrom torch.utils.data.sampler import SubsetRandomSampler\nfrom torch.optim.lr_scheduler import StepLR, ReduceLROnPlateau, CosineAnnealingLR\n\n\n\n# five_thirty_eight = [\n#     \"#30a2da\",\n#     \"#fc4f30\",\n#     \"#e5ae38\",\n#     \"#6d904f\",\n#     \"#8b8b8b\",\n# ]\n\n# sns.set_palette(five_thirty_eight)","5d0eb4a4":"labels = pd.read_csv('..\/input\/train_labels.csv')","5bbc8da2":"print(f'{len(os.listdir(\"..\/input\/train\"))} pictures in train.')\nprint(f'{len(os.listdir(\"..\/input\/test\"))} pictures in test.')","26309274":"sns.countplot('label',data=labels).set_title(\"Class Distribution\")","5424b908":"fig = plt.figure(figsize=(25, 4))\n# display 20 images\ntrain_imgs = os.listdir(\"..\/input\/train\")\nfor idx, img in enumerate(np.random.choice(train_imgs, 20)):\n    ax = fig.add_subplot(2, 20\/\/2, idx+1, xticks=[], yticks=[])\n    im = Image.open(\"..\/input\/train\/\" + img)\n    plt.imshow(im)\n    lab = labels.loc[labels['id'] == img.split('.')[0], 'label'].values[0]\n    ax.set_title(f'Label: {lab}')","3d13f995":"data_transforms = transforms.Compose([\n    #transforms.CenterCrop(32),\n    transforms.Grayscale(num_output_channels=3),\n    #transforms.RandomRotation(degrees=160,expand=True),\n    transforms.Pad(64, padding_mode='reflect'),\n    transforms.RandomHorizontalFlip(),\n    transforms.RandomVerticalFlip(),\n    transforms.ToTensor(),\n    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n    ])\ndata_transforms_test = transforms.Compose([\n    #transforms.CenterCrop(32),\n    transforms.Grayscale(num_output_channels=3),\n    #transforms.RandomRotation(degrees=160,expand=True),\n    transforms.Pad(64, padding_mode='reflect'),\n    transforms.ToTensor(),\n    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n    ])","2add366e":"# indices for validation\ntr, val = train_test_split(labels.label, stratify=labels.label, test_size=0.1)","4aa2e716":"# dictionary with labels and ids of train data\nimg_class_dict = {k:v for k, v in zip(labels.id, labels.label)}","cf6735ca":"class CancerDataset(Dataset):\n    def __init__(self, datafolder, datatype='train', transform = transforms.Compose([transforms.CenterCrop(32),transforms.ToTensor()]), labels_dict={}):\n        self.datafolder = datafolder\n        self.datatype = datatype\n        self.image_files_list = [s for s in os.listdir(datafolder)]\n        self.transform = transform\n        self.labels_dict = labels_dict\n        if self.datatype == 'train':\n            self.labels = [labels_dict[i.split('.')[0]] for i in self.image_files_list]\n        else:\n            self.labels = [0 for _ in range(len(self.image_files_list))]\n\n    def __len__(self):\n        return len(self.image_files_list)\n\n    def __getitem__(self, idx):\n        img_name = os.path.join(self.datafolder, self.image_files_list[idx])\n        image = Image.open(img_name)\n        image = self.transform(image)\n        img_name_short = self.image_files_list[idx].split('.')[0]\n\n        if self.datatype == 'train':\n            label = self.labels_dict[img_name_short]\n        else:\n            label = 0\n        return image, label","be239b45":"%%time\n# Load train data \ndataset = CancerDataset(datafolder='..\/input\/train\/', datatype='train', transform=data_transforms, labels_dict=img_class_dict)","cfdf89da":"%%time\n# Load test data \ntest_set = CancerDataset(datafolder='..\/input\/test\/', datatype='test', transform=data_transforms_test)","a0b4c4e4":"dataset = CancerDataset(datafolder='..\/input\/train\/', datatype='train', transform=data_transforms, labels_dict=img_class_dict)\ntest_set = CancerDataset(datafolder='..\/input\/test\/', datatype='test', transform=data_transforms_test)\ntrain_sampler = SubsetRandomSampler(list(tr.index))\nvalid_sampler = SubsetRandomSampler(list(val.index))\nbatch_size = 512\nnum_workers = 0","19aafc93":"# prepare data loaders (combine dataset and sampler)\ntrain_loader = torch.utils.data.DataLoader(dataset, batch_size=batch_size, sampler=train_sampler, num_workers=num_workers)\nvalid_loader = torch.utils.data.DataLoader(dataset, batch_size=batch_size, sampler=valid_sampler, num_workers=num_workers)\ntest_loader = torch.utils.data.DataLoader(test_set, batch_size=batch_size, num_workers=num_workers)","568ed9a8":"model_conv = torchvision.models.resnet101(pretrained=True)\nfor i, param in model_conv.named_parameters():\n    param.requires_grad = False","5ef67116":"model_conv","2d050067":"num_ftrs = model_conv.fc.in_features\nmodel_conv.fc = nn.Linear(num_ftrs, 2)","ef1b63b6":"model_conv.cuda()\ncriterion = nn.BCEWithLogitsLoss()\n\n# specify optimizer (stochastic gradient descent) and learning rate = 0.001\noptimizer = optim.SGD(model_conv.fc.parameters(), lr=10**-3, momentum=0.9)\n#scheduler = CyclicLR(optimizer, base_lr=lr, max_lr=0.01, step_size=5, mode='triangular2')\nexp_lr_scheduler = lr_scheduler.StepLR(optimizer, step_size=5, gamma=0.1)","11110ec9":"valid_loss_min = np.Inf\npatience = 10\n# current number of epochs, where validation loss didn't increase\np = 0\n# whether training should be stopped\nstop = False\n\n# number of epochs to train the model\nn_epochs = 5\nfor epoch in range(1, n_epochs+1):\n    print(time.ctime(), 'Epoch:', epoch)\n\n    train_loss = []\n    exp_lr_scheduler.step()\n    train_auc = []\n\n    for batch_i, (data, target) in enumerate(train_loader):\n\n        data, target = data.cuda(), target.cuda()\n\n        optimizer.zero_grad()\n        output = model_conv(data)\n        loss = criterion(output[:,1], target.float())\n        train_loss.append(loss.item())\n        \n        a = target.data.cpu().numpy()\n        b = output[:,-1].detach().cpu().numpy()\n        train_auc.append(roc_auc_score(a, b))\n\n        loss.backward()\n        optimizer.step()\n    \n    model_conv.eval()\n    val_loss = []\n    val_auc = []\n    for batch_i, (data, target) in enumerate(valid_loader):\n        data, target = data.cuda(), target.cuda()\n        output = model_conv(data)\n\n        loss = criterion(output[:,1], target.float())\n\n        val_loss.append(loss.item()) \n        a = target.data.cpu().numpy()\n        b = output[:,-1].detach().cpu().numpy()\n        val_auc.append(roc_auc_score(a, b))\n\n    print(f'Epoch {epoch}, train loss: {np.mean(train_loss):.4f}, valid loss: {np.mean(val_loss):.4f}, train auc: {np.mean(train_auc):.4f}, valid acc: {np.mean(val_auc):.4f}')\n    \n    valid_loss = np.mean(val_loss)\n    if valid_loss <= valid_loss_min:\n        print('Validation loss decreased ({:.6f} --> {:.6f}).  Saving model ...'.format(\n        valid_loss_min,\n        valid_loss))\n        torch.save(model_conv.state_dict(), 'model.pt')\n        valid_loss_min = valid_loss\n        p = 0\n\n    # check if validation loss didn't improve\n    if valid_loss > valid_loss_min:\n        p += 1\n        print(f'{p} epochs of increasing val loss')\n        if p > patience:\n            print('Stopping training')\n            stop = True\n            break        \n            \n    if stop:\n        break","e9efe69c":"model_conv.eval()","d4c0f504":"preds = []\nfor batch_i, (data, target) in enumerate(test_loader):\n    data, target = data.cuda(), target.cuda()\n    output = model_conv(data)\n\n    pr = output[:,1].detach().cpu().numpy()\n    for i in pr:\n        preds.append(i)","a4a29ed7":"test_preds = pd.DataFrame({'imgs': test_set.image_files_list, 'preds': preds})","5cd47965":"test_preds['imgs'] = test_preds['imgs'].apply(lambda x: x.split('.')[0])","7b9bed60":"sub = pd.read_csv('..\/input\/sample_submission.csv')","10454c53":"sub = pd.merge(sub, test_preds, left_on='id', right_on='imgs')\nsub = sub[['id', 'preds']]\nsub.columns = ['id', 'label']\nsub.head()","d2c17d2c":"sub.to_csv('ResNet.csv', index=False)","03726eb0":"# 4.Normalize Images <a id=\"4\"><\/a>","c607b388":"## 2.Class Distribution <a id=\"2\"><\/a>","93207caa":"## 3. Data Visulization <a id=\"3\"><\/a>","42d67e1d":"## 1.Load Library <a id=\"1\"><\/a>","f6438ff2":"## 5.Prepare data loaders <a id=\"5\"><\/a>","81daac59":"## HISTOPATHOLOGIC CANCER DETECTION\n> ***Identify metastatic tissue in histopathologic scans of lymph node sections***\n\n---\n> ### INTRODUCTION OF COMPETITION (Histopathologic Cancer Detection)\n> <div class=\"competition-overview__content\"><div><div class=\"markdown-converter__text--rendered\"><p><img src=\"https:\/\/storage.googleapis.com\/kaggle-media\/competitions\/playground\/Microscope\" alt=\"Microscope\" width=\"350\" style=\"float: right;\">\n> In this competition, you must create an algorithm to identify metastatic cancer in small image patches taken from larger digital pathology scans. The data for this competition is a slightly modified version of the PatchCamelyon (PCam) <a href=\"https:\/\/github.com\/basveeling\/pcam\" rel=\"nofollow\">benchmark dataset<\/a> (the original PCam dataset contains duplicate images due to its probabilistic sampling, however, the version presented on Kaggle does not contain duplicates).\n> <\/p><p>PCam is highly interesting for both its size, simplicity to get started on, and approachability. In the authors' words:<\/p>\n> <p><\/p><blockquote> [PCam] packs the clinically-relevant task of metastasis detection into a straight-forward binary image classification task, akin to CIFAR-10 and MNIST. Models can easily be trained on a single GPU in a couple hours, and achieve competitive scores in the Camelyon16 tasks of tumor detection and whole-slide image diagnosis. Furthermore, the balance between task-difficulty and tractability makes it a prime suspect for fundamental machine learning research on topics as active learning, model uncertainty, and explainability. <\/blockquote><p><\/p>\n> #### Solution which we have given in the pytorch with resnet 101.\n\n> ### Evaluation\n> <div class=\"competition-overview__content\"><div><div class=\"markdown-converter__text--rendered\"><p>Submissions are evaluated on <a href=\"http:\/\/en.wikipedia.org\/wiki\/Receiver_operating_characteristic\" rel=\"nofollow\">area under the ROC curve<\/a> between the predicted probability and the observed target.<\/p>\n> <h4>Submission File<\/h4>\n> <p>For each <code>id<\/code> in the test set, you must predict a probability that center 32x32px region of a patch contains at least one pixel of tumor tissue. The file should contain a header and have the following format:<\/p>\n> <pre><code>id,label\n0b2ea2a822ad23fdb1b5dd26653da899fbd2c0d5,0\n95596b92e5066c5c52466c90b69ff089b39f2737,0\n248e6738860e2ebcf6258cdc1f32f299e0c76914,0\netc.\n>  <\/code><\/pre><\/div><\/div><\/div>\n\n> ## Outline of the Notebook\n> 1. [***Load Library***](#1)\n> 1. [***Class Distribution***](#2)\n> 1. [***Data Visulization***](#3)\n> 1. [***Normalize Images***](#4)\n> 1. [***Prepare data loaders***](#5)\n> 1. [***Model Training***](#6)\n> 1. [***Predication***](#7)\n> 1. [***Submission***](#8)\n\n---"}}