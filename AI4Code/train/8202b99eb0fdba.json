{"cell_type":{"43c1a614":"code","7d21f35e":"code","b4e653c5":"code","a37942c9":"code","a07ea9c3":"code","4f506fde":"code","16beef86":"code","30280d5a":"code","fcb04953":"code","e7fb162a":"code","371bf926":"code","4f850ec0":"code","1f5f0bf7":"code","27e3cea7":"code","9730ddf2":"code","d5d3b6cb":"code","319a08f6":"code","d08ad44c":"code","06049155":"code","ac0d77b5":"code","48ed1666":"code","8df4eca2":"code","846dcb95":"code","931fe5c7":"code","27fa7af9":"code","faa52e3a":"code","3a30a98b":"code","8b63c2c5":"code","747bdcd9":"code","4df97594":"code","cdc6047b":"code","b0a6e0eb":"code","bc3aad87":"code","243df089":"code","14a77e11":"code","66149620":"code","722b2daa":"code","6f489df0":"code","1f800c38":"code","58ce86ce":"code","efcb56fe":"code","6f467d83":"code","fb574a18":"code","54e1a2c2":"code","d8efd768":"code","253b8c50":"code","fd09929b":"code","41399d4b":"code","942c0120":"code","1a501adb":"code","867eee3d":"code","1db13476":"code","52173cff":"code","03de01e1":"markdown","cacfff5f":"markdown","5cdd7c62":"markdown","3e04ed2b":"markdown","2a1861cb":"markdown","9acc6887":"markdown","4c96a92b":"markdown","4ed77d09":"markdown","9c138552":"markdown","42cd8d18":"markdown","e8f33069":"markdown","7a38c5b0":"markdown","26410578":"markdown","be5218c5":"markdown","72aec597":"markdown"},"source":{"43c1a614":"# Author       : AKASH DIXIT\n# E-Mail       : akashdixit453@gmail.com\n# Contact      : +91-7415770162\n# Designation  : Robotics Engineer\n# Decision Tree for Financial Loam EMI default detection\n# Data : bank.csv","7d21f35e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\nfrom sklearn import datasets\nfrom io import StringIO\nfrom sklearn.tree import export_graphviz\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nfrom sklearn import metrics\n%matplotlib inline","b4e653c5":"#Load the dataset\ndata = pd.read_csv('\/kaggle\/input\/bankcsv\/bank.csv')\ndata.head()","a37942c9":"#check if the data set contains any null value\ndata[data.isnull().any(axis=1)].count()","a07ea9c3":"data.describe()","4f506fde":"#Box plot of 'age'\ng = sns.boxplot(data['age'])","16beef86":"#Distribution plot of 'age'\nsns.distplot(data['age'], bins=100)","30280d5a":"#Box plot of 'duration'\ng = sns.boxplot(data['duration'])","fcb04953":"#Distribution plot of 'duration'\nsns.distplot(data['duration'], bins = 100)","e7fb162a":"#Make a copy of data\ndata = data.copy()","371bf926":"#Different types of job categories and their counts\ndata.job.value_counts()","4f850ec0":"#Explore People who made a deposit Vs Job category\njobs = ['management','blue-collar','technician','admin','services',\n       'retired','self-employed','student','unemployed','entrepreneur',\n       'housemaid','unknown']\n\nfor j in jobs:\n    print(\"{:15} : {:5}\". format(j, len(data[(data.deposit == \"yes\") & (data.job ==j)])))","1f5f0bf7":"#combine similar jobs into categiroes\ndata['job'] = data['job'].replace(['management','admin'],'white-collar')\ndata['job'] = data['job'].replace(['services','housemaid'],'pink-collar')\ndata['job'] = data['job'].replace(['retired','student','unemployed',\n                                  'unknown'],'other')","27e3cea7":"#New Value counts\ndata.job.value_counts()","9730ddf2":"# Combine 'unknown' and 'other' as 'other' isn't really match with either 'success' or 'failure'\ndata['poutcome'] = data['poutcome'].replace(['other'],'unknown')\n\ndata.poutcome.value_counts()","d5d3b6cb":"# Drop 'contact', as every participant has been contacted.\ndata.drop('contact', axis = 1, inplace= True)","319a08f6":"#values for \"default\" :yes\/no\ndata['default']\ndata['default_cat'] = data['default'].map({'yes':1 , 'no':0})\ndata.drop('default', axis=1,inplace = True)","d08ad44c":"#values for \"housing\": yes\/no\ndata['housing_cat'] = data['housing'].map({'yes':1, 'no':0})\ndata.drop('housing', axis=1, inplace = True)","06049155":"#values for \"loan\": yes\/no\ndata['loan_cat'] = data['loan'].map({'yes':1, 'no':0})\ndata.drop('loan', axis=1, inplace = True)","ac0d77b5":"#day: last contact day of the month\n#moth: last contact month of the year\n#Drop 'month' and 'day' as they don't have any intrinsic meaning\n\ndata.drop('month', axis=1, inplace = True)\ndata.drop('day', axis=1, inplace = True)","48ed1666":"#values for \"deposit\" : yes\/no\ndata[\"deposit_cat\"] = data['deposit'].map({'yes':1, 'no':0})\ndata.drop('deposit', axis=1, inplace =True)","8df4eca2":"# pdays: number of days that passed by after the client was last contacted from a previous campaign\n# -1 means client was not previously contacted\n\nprint(\"Customers that have not been contacted before:\", len(data[data.pdays==-1]))\nprint(\"Maximum values on pdays:\", data['pdays'].max())","846dcb95":"# Map padys=-1 into a large value (10000 is used) to indicate that it is so far in the past that it has no effect\ndata.loc[data['pdays']==-1, 'pdays'] = 10000","931fe5c7":"#create a new column : recent_pdays\ndata['recent_pdays'] = np.where(data['pdays'],1\/data.pdays,1\/data.pdays)\nprint(data['recent_pdays'])\n\n#Drop 'pdays'\ndata.drop('pdays', axis=1, inplace = True)","27fa7af9":"data.tail()","faa52e3a":"# Convert categorical variables to dummies\ndata_with_dummies = pd.get_dummies(data=data, columns=['job','marital','education',\n                                                      'poutcome'],\n                                  prefix=['job','marital','education','poutcome'])\n\ndata_with_dummies.head()","3a30a98b":"data_with_dummies.describe()","8b63c2c5":"#Scatterplot showing age and balance\ndata_with_dummies.plot(kind='scatter', x='age', y='balance')\n\n#Across all ages, majority of peoples have savings of less than 20000","747bdcd9":"data_with_dummies.plot(kind='hist', x='poutcome_success', y='duration')","4df97594":"#People who sign up to a term deposit\ndata_with_dummies[data.deposit_cat==1].describe()","cdc6047b":"#People signed up to a term deposit having a personal loan (loan_cat) and housing loan(housing_cat)\nlen(data_with_dummies[(data_with_dummies.deposit_cat == 1) & (data_with_dummies.loan_cat) & (data_with_dummies.housing_cat)])","b0a6e0eb":"#People Signed up to a term deposit with a credit default\nlen(data_with_dummies[(data_with_dummies.deposit_cat == 1) & (data_with_dummies.default_cat==1)])","bc3aad87":"#Bar chart of Job Vs deposit\nplt.figure(figsize=(10,6))\nsns.barplot(x='job',y='deposit_cat', data= data)","243df089":"# Bar chart of \"previous outcome\" Vs \"call duration\"\n\nplt.figure(figsize=(10,6))\nsns.barplot(x='poutcome', y = 'duration', data = data)","14a77e11":"#make a copy\ndata_cl = data_with_dummies","66149620":"#The correlation matrix\ncorr = data_cl.corr()\ncorr","722b2daa":"#Heatmap\nplt.figure(figsize=(10,10))\ncmap = sns.diverging_palette(300,80, as_cmap=True)\nsns.heatmap(corr, xticklabels = corr.columns.values,\n           yticklabels=corr.columns.values, cmap = cmap, vmax = 1,\n           center = 0, square = True, linewidths=.8, cbar_kws={\"shrink\":.82})\nplt.title(\"Heatmap of correlation matrix\")","6f489df0":"#Extract the deposit_cat column (the dependent variable)\ncorr_deposit = pd.DataFrame(corr['deposit_cat'].drop('deposit_cat'))\ncorr_deposit.sort_values(by = 'deposit_cat', ascending = False)","1f800c38":"# Train-Test split: 20% test data\ndata_drop_deposit = data_cl.drop('deposit_cat', 1)\nlabel = data_cl.deposit_cat\ndata_train, data_test, label_train, label_test = train_test_split(data_drop_deposit, label, test_size = 0.2, random_state = 50)","58ce86ce":"# Decision tree with depth = 2\ndt2 = tree.DecisionTreeClassifier(random_state=1, max_depth=2)\ndt2.fit(data_train, label_train)\n\ndt2_score_train = dt2.score(data_train, label_train)\nprint(\"Training score: \",dt2_score_train)\n\ndt2_score_test = dt2.score(data_test, label_test)\nprint(\"Testing score: \",dt2_score_test)","efcb56fe":"#Decision Tree with Depth = 3\ndt3 = tree.DecisionTreeClassifier(random_state=1, max_depth=3)\ndt3.fit(data_train, label_train)\n\ndt3_score_train = dt3.score(data_train, label_train)\nprint(\"Training score: \",dt3_score_train)\n\ndt3_score_test = dt3.score(data_test, label_test)\nprint(\"Testing score: \",dt3_score_test)","6f467d83":"# Decision tree with depth = 4\ndt4 = tree.DecisionTreeClassifier(random_state=1, max_depth=4)\ndt4.fit(data_train, label_train)\n\ndt4_score_train = dt4.score(data_train, label_train)\nprint(\"Training score: \",dt4_score_train)\n\ndt4_score_test = dt4.score(data_test, label_test)\nprint(\"Testing score: \",dt4_score_test)","fb574a18":"# Decision tree with depth = 5\ndt5 = tree.DecisionTreeClassifier(random_state=1, max_depth=5)\ndt5.fit(data_train, label_train)\ndt5_score_train = dt5.score(data_train, label_train)\nprint(\"Training score: \",dt5_score_train)\ndt5_score_test = dt5.score(data_test, label_test)\nprint(\"Testing score: \",dt5_score_test)","54e1a2c2":"# Decision tree with depth = 6\ndt6 = tree.DecisionTreeClassifier(random_state=1, max_depth=6)\ndt6.fit(data_train, label_train)\n\ndt6_score_train = dt6.score(data_train, label_train)\nprint(\"Training score: \",dt6_score_train)\n\ndt6_score_test = dt6.score(data_test, label_test)\nprint(\"Testing score: \",dt6_score_test)","d8efd768":"#Decision Tree: TO full depth\ndt1 = tree.DecisionTreeClassifier()\ndt1.fit(data_train, label_train)\n\ndt1_score_train = dt1.score(data_train, label_train)\nprint(\"Training score :\", dt1_score_train)\n\ndt1_score_test = dt1.score(data_test, label_test)\nprint(\"Testing score: \", dt1_score_test)","253b8c50":"print('{:10} {:20} {:20}'.format('depth','Training score','Testing score'))\nprint('{:10} {:20} {:20}'.format('-----', '--------------','-------------'))\nprint('{:1} {:>25} {:>20}'.format(2, dt2_score_train, dt2_score_test))\nprint('{:1} {:>25} {:>20}'.format(3, dt3_score_train, dt3_score_test))\nprint('{:1} {:>25} {:>20}'.format(4, dt4_score_train, dt4_score_test))\nprint('{:1} {:>25} {:>20}'.format(5, dt5_score_train, dt5_score_test))\nprint('{:1} {:>25} {:>20}'.format(6, dt6_score_train, dt6_score_test))\nprint('{:1} {:>23} {:>20}'.format(\"max\", dt1_score_train, dt1_score_test))","fd09929b":"#Let's generate the decision tree for depth = 2\n#create a feature vector\n\nfeatures = data_cl.columns.tolist()\n","41399d4b":"#Two classes:0 = not signed up, 1 = signed up\ndt2.classes_","942c0120":"#create a feature vector\nfeatures = data_drop_deposit.columns.tolist()\n\nfeatures","1a501adb":"#Investigate most important features with depth = 2\n\ndt2 = tree.DecisionTreeClassifier(random_state=1, max_depth=2)\n\n#Fit the decision tree classifier\ndt2.fit(data_train, label_train)\n\nfi = dt2.feature_importances_\n\nl = len(features)\nfor i in range(0,l):\n    print('{:.<20} {:3}'.format(features[i],fi[i]))","867eee3d":"# According to feature importance results, most importtant feature is the \"Duration\"\n# Let's calculte statistics on Duration\n\nprint(\"Mean duration: \", data_drop_deposit.duration.mean())\nprint(\"Maximum duration: \", data_drop_deposit.duration.max())\nprint(\"minimum duration: \", data_drop_deposit.duration.min())","1db13476":"# Get a row with poutcome_success = 1\n#data_with_dummies[(bank_with_dummies.poutcome_success == 1)]\ndata_drop_deposit.iloc[985]","52173cff":"#make prediction in the test set\n\npreds = dt2.predict(data_test)\n\n#calculate accuracy\nprint(\"\\nAccuracy score: \\n{}\".format(metrics.accuracy_score(label_test,preds)))\n\n#make preidiction on the test set using predict_proba\nprobs = dt2.predict_proba(data_test)[:,1]\n\n#calculate the AUC metric\nprint(\"\\nArea Under Curve: \\n{}\".format(metrics.roc_auc_score(label_test,probs)))","03de01e1":"-------deposit------","cacfff5f":"# Build the data model","5cdd7c62":"Predicitons","3e04ed2b":"Analysis of people who signs up fro a term deposit","2a1861cb":"--------motth,day-------","9acc6887":"-----contact----","4c96a92b":"Classification","4ed77d09":"Comparing Training and Testing scores for various tree depths used","9c138552":"-----------observation on whole population--------","42cd8d18":"convert categorical data","e8f33069":"-------loan-------","7a38c5b0":"------housing------","26410578":"--------convert to dummy values--------","be5218c5":"------default------","72aec597":"----------pdays-------"}}