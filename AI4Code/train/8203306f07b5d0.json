{"cell_type":{"61f27e43":"code","4a91fa84":"code","0c3c8abb":"code","bcf5197c":"code","2032a732":"code","e9631cb0":"code","cc5f6f59":"code","9bd2ffa9":"code","050e7b80":"code","84c2d26a":"code","e7f2dd0f":"markdown","4bac7281":"markdown","b0fe732c":"markdown","07817865":"markdown","67a4d4a4":"markdown","68bc1164":"markdown","21d0383c":"markdown"},"source":{"61f27e43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4a91fa84":"import datetime\nimport matplotlib.pyplot as plt\ntweets = pd.read_csv('\/kaggle\/input\/bert-transfer-learning-from-s140\/tweets_sentiment.csv')\nmarketvals = pd.read_csv(\"\/kaggle\/input\/values-of-top-nasdaq-copanies-from-2010-to-2020\/CompanyValues.csv\")","0c3c8abb":"marketvals = marketvals[marketvals['day_date'] >= '2015-01-01']\nmarketvals = marketvals.reset_index(drop=True)\ntweets['date'] = pd.to_datetime(tweets['post_date'], unit='s').dt.strftime('%Y\/%m\/%d')","bcf5197c":"stockdaycount = tweets[[\"date\",\"ticker_symbol\", \"sentiment\"]].groupby([\"date\", \"ticker_symbol\"], as_index=False).agg({'sentiment': ['sum', 'count']})\nstockdaycount.columns = list(map(''.join, stockdaycount.columns.values))\nstockdaycount['sentiment_rat'] = stockdaycount['sentimentsum'] \/ stockdaycount['sentimentcount']\nstockdaycount['sentiment_rat'] = stockdaycount['sentiment_rat'].astype(np.float32)","2032a732":"import matplotlib.dates as mdates\naapltwt = stockdaycount.iloc[stockdaycount.ticker_symbol.values == \"AAPL\"]\napplclose = marketvals.iloc[marketvals.ticker_symbol.values == \"AAPL\"]\nfig, (ax1, ax2, ax3) = plt.subplots(3, sharex=True)\nax1.plot('date', 'sentiment_rat', data=aapltwt)\nax2.plot('date', 'sentimentcount', data=aapltwt)\nax3.plot('day_date', 'close_value', data=applclose)\nyears = mdates.YearLocator()   # every year\nmonths = mdates.MonthLocator()  # every month\nyears_fmt = mdates.DateFormatter('%Y')\nax1.xaxis.set_major_locator(years)\nax1.xaxis.set_major_formatter(years_fmt)\nax1.xaxis.set_minor_locator(months)\nax1.set_title('Ratio of positive to negative tweets for AAPL')\n\nax2.xaxis.set_major_locator(years)\nax2.xaxis.set_major_formatter(years_fmt)\nax2.xaxis.set_minor_locator(months)\nax2.set(ylabel='no of tweets')\nax3.xaxis.set_major_locator(years)\nax3.xaxis.set_major_formatter(years_fmt)\nax3.xaxis.set_minor_locator(months)\nax3.set(ylabel='closing price')\n\nplt.show()","e9631cb0":"lowest_day = stockdaycount[stockdaycount.sentimentcount>200]\nlowest_day = lowest_day[lowest_day.sentiment_rat==lowest_day.sentiment_rat.min()]\nlowest_day","cc5f6f59":"lowest_sentiment = stockdaycount[(stockdaycount.ticker_symbol=='AAPL') & (stockdaycount.date>='2016\/08\/27')& (stockdaycount.date<='2016\/09\/03')]\nlowest_price = marketvals[(marketvals.ticker_symbol=='AAPL') & (marketvals.day_date>='2016-08-27')& (marketvals.day_date<='2016-09-03')]\nlowest_price = lowest_price.sort_values(by='day_date')\nlowest_sentiment['close_value'] = lowest_price['close_value'].values\nlowest_sentiment","9bd2ffa9":"marketvals[(marketvals.ticker_symbol=='AAPL') & (marketvals.day_date>='2016-06-01')& (marketvals.day_date<='2016-09-01')]['close_value'].describe()","050e7b80":"marketvals[(marketvals.ticker_symbol=='AAPL') & (marketvals.day_date>='2016-09-01')& (marketvals.day_date<='2017-01-01')]['close_value'].describe()","84c2d26a":"lowestaapltweets = tweets[(tweets.ticker_symbol=='AAPL') & (tweets.date>='2016\/08\/30')& (tweets.date<='2016\/08\/31')]\nlowestaapltweets = lowestaapltweets[lowestaapltweets.sentiment==0]\nlowestaapltweets.sort_values(by='like_num', ascending=False).head(n=10)['body'].values","e7f2dd0f":"Pull data from the week of the lowest day and compare it to the lowest stock price.","4bac7281":"To do this analysis, I am only going to analyze Apple stock and do a little feature engineering to make it easier to find the lowest public opinion on Twitter.","b0fe732c":"There aren't any obvious trends from public sentiment and their stock price except for maybe a couple dips because there is a sinusoidal trend for public opinion, but a clear negative trend for Apple in the first couple years of data given. I'm going to check the lowest sentiment day in the dataset","07817865":"![screenshot](https:\/\/i.imgur.com\/3yZleyB.png)\nThere was an [article in the NY times](\nhttps:\/\/www.nytimes.com\/2016\/08\/31\/technology\/apple-tax-eu-ireland.html) around this time that sparked an outrage on Twitter and the corresponds to both the lowest sentiment and the lowest stock price (if only a little bit) for that 2 week period, but as the the article suggests, the price went up from Apple Inc. not paying their taxes in the EU.","67a4d4a4":"If only by a few cents, the lowest sentiment does correspond with the lowest closing price for their stock. Lets check the price for the preceeding and following quarter.","68bc1164":"Sentiment analysis for this kernel was completed by using transfer learning after fine tuning BERT on the s140 sentiment analysis dataset in [this kernel](https:\/\/www.kaggle.com\/stevenknguyen\/bert-transfer-learning-from-s140\/).","21d0383c":"Their stock price actually increases because of this event, but lets look at the actual tweets to see what the topic is."}}