{"cell_type":{"9fe94fd9":"code","6a6ac90b":"code","91c5f5e8":"code","fc05b459":"code","b16e2e7e":"code","87962f04":"code","5414803b":"code","113c1577":"code","31808b84":"code","7956d338":"code","fb64854f":"code","8c13e4a7":"markdown","cc51dcdb":"markdown","36c6a48e":"markdown","49aaca61":"markdown","21854a77":"markdown","66e0ec66":"markdown","088b5856":"markdown","d25a2542":"markdown","d1e97477":"markdown","2de77bcb":"markdown","f9fb3282":"markdown","bc7a1c9d":"markdown","235dc45e":"markdown","48352afe":"markdown","2adc6949":"markdown","ca0bf304":"markdown","b4fad3c5":"markdown","801ea3e5":"markdown","d636eb3d":"markdown"},"source":{"9fe94fd9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6a6ac90b":"data = pd.read_csv(\"..\/input\/top50spotify2019\/top50.csv\",encoding='ISO-8859-1')\ndata.head()","91c5f5e8":"data.rename(columns={\"Beats.Per.Minute\":\"BPM\",\n                     \"Valence.\":\"Valence\",\n                     \"Acousticness..\":\"Acousticness\",\n                     \"Loudness..dB..\":\"Loudness\",\n                     \"Speechiness.\":\"Speechiness\",\n                     \"Track.Name\":\"Track\",\n                     \"Artist.Name\":\"Artist\"},inplace=True)","fc05b459":"data.drop([\"Unnamed: 0\",\"Length.\"], axis=1,inplace=True)\n\ndata.head()","b16e2e7e":"import re \n\nfor genre in data['Genre']:\n    if re.search('pop', genre):\n        data.loc[data.Genre == genre, 'Genre'] = 'pop'\n        \ndata.head()\n","87962f04":"from sklearn.preprocessing import LabelEncoder \n  \nle = LabelEncoder() \n  \ndata['Genre']= le.fit_transform(data['Genre']) \n\ndata.head()","5414803b":"X = data.copy()\nX.drop([\"Track\",\"Artist\"], axis=1,inplace=True)\nX.head()","113c1577":"from sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\nwcss = []\n\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 29)\n    kmeans.fit(X)\n    wcss.append(kmeans.inertia_)\n    \nplt.plot(range(1, 11), wcss)\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS')\nplt.show()","31808b84":"kmeans = KMeans(n_clusters = 5, init = 'k-means++', random_state = 29)\ny_kmeans = kmeans.fit_predict(X)","7956d338":"data['ClusterID'] = y_kmeans\ndata.head()","fb64854f":"data.sort_values(by=['ClusterID'], inplace=True)\n\nfor clusternumber in data.ClusterID.unique():\n    print(\"\\nPlaylist Number: \" + str(clusternumber+1))\n    print(data.loc[data.ClusterID == clusternumber, ['Track', 'Artist']])","8c13e4a7":"A lot of these genres are variations of the 'pop' genre. It would be easier to just club them all together into one genre called 'pop':","cc51dcdb":"We have done the same to curate the Top 50 songs in our dataset into 5 playlists based on the features of the song, i.e. genre, energy, danceability, loudness etc.","36c6a48e":"The optimal number of clusters seems to be 5, so let us proceed with that.","49aaca61":"Let's remove the track name and artist name (trivial to the track) from the data and store the features of the song in another variable:","21854a77":"Our cluster labels are now stored in y_kmeans. We will add that as a column to our `data` variable:","66e0ec66":"I'll drop the `Unnamed: 0` and `Length.` features because it seems irrelevant for a recommender system:**","088b5856":"Now let's encode all genres using Label Encoding:","d25a2542":"### Building the recommender model","d1e97477":"### Thank you for reading! If you liked my notebook, please leave an upvote!","2de77bcb":"This is a dataset containing Top 50 songs on 2019, along with a few features. Let's have a look at it:","f9fb3282":"Let's rename the labels for better understanding:","bc7a1c9d":"### Loading the data","235dc45e":"Spotify's playlist recommendations look something like this:\n\n","48352afe":"Spotify apps have a feature called \"Made for you\" which shows a few playlists curated upon the songs that you already liked and added to your library. In this notebook, we will try to build a simple recommender using K-Means clustering to predict which song should play after the one that you've already selected.","2adc6949":"# Playing next...","ca0bf304":"Our curated playlist generator is now ready.","b4fad3c5":"### Implementation","801ea3e5":"Since we are using K-Means clustering, we need to figure out the number of clusters we wish to divide our data into. We use the elbow method to find the optimal number of clusters. ","d636eb3d":"![My daily playlist recommendation](https:\/\/rainnews.com\/wp-content\/uploads\/2016\/09\/spotify-daily-mix.png)"}}