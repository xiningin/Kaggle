{"cell_type":{"3bd7ca73":"code","eef3dee6":"code","b0cbe9ff":"code","619aec75":"code","67895994":"code","e442698d":"code","f1219c52":"code","9fd481e9":"code","56e6e72a":"code","d56be9d7":"code","80638647":"code","b4b1eed9":"code","974b0311":"markdown","6a15f1c6":"markdown"},"source":{"3bd7ca73":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","eef3dee6":"import pyarrow.parquet as pq\nimport matplotlib.pyplot as plt","b0cbe9ff":"HEIGHT = 137\nWIDTH = 236\ndf = pd.read_parquet('\/kaggle\/input\/bengaliai-cv19\/train_image_data_0.parquet')","619aec75":"train_labels = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/train.csv')\ntrain_labels.head()","67895994":"# most represented in train data\ntrain_labels.groupby('grapheme_root').agg('count').reset_index()[['grapheme_root','grapheme']].sort_values('grapheme', ascending=False).head()","e442698d":"# least represented in train data\ntrain_labels.groupby('grapheme_root').agg('count').reset_index()[['grapheme_root','grapheme']].sort_values('grapheme').head()","f1219c52":"## We can now filter a small df with the graphene we want to further explore (lets try graphene = 72)\nfiltered_df = train_labels[train_labels['grapheme_root'] == 72]\nimg_ids =  filtered_df['image_id'].values\nprint(\"There are {} images in train0 of grapehene root = 72\".format(len(filtered_df)))","9fd481e9":"## filter the images to the ones of interest:\nfiltered_imgs = df[df['image_id'].isin(img_ids)]\n#check how many we have in our subset of images (train0)\nprint(\"Number of images in train0 with graphene root = 72: {}\".format(len(filtered_imgs)))","56e6e72a":"images_72 = filtered_imgs.iloc[:, 1:].values.reshape(-1, HEIGHT, WIDTH)","d56be9d7":"f, ax = plt.subplots(4, 4, figsize=(16, 8))\nax = ax.flatten()\nfor i in range(16):\n    ax[i].imshow(images_72[i], cmap='Greys')","80638647":"## We can now filter a small df with the graphene we want to further explore (lets try graphene = 73)\nfiltered_df = train_labels[train_labels['grapheme_root'] == 73]\nimg_ids =  filtered_df['image_id'].values\nprint(\"There are {} images in train0 of grapehene root = 73\".format(len(filtered_df)))\n######\n## filter the images to the ones of interest:\nfiltered_imgs = df[df['image_id'].isin(img_ids)]\n#check how many we have in our subset of images (train0)\nprint(\"Number of images in train0 with graphene root = 73: {}\".format(len(filtered_imgs)))\nimages_73 = filtered_imgs.iloc[:, 1:].values.reshape(-1, HEIGHT, WIDTH)","b4b1eed9":"f, ax = plt.subplots(4, 4, figsize=(16, 8))\nax = ax.flatten()\nfor i in range(16):\n    ax[i].imshow(images_73[i], cmap='Greys')","974b0311":"#### Simple script to start to explore graphene roots by group.\n\nAs someone with no previous exposure to Bengali, I wasted to do some quick visual EDA by graphene root so start to get an idea how similar images in a graphene root might be.\n\n","6a15f1c6":"What are some of the graphene roots with the most images?"}}