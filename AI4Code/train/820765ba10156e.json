{"cell_type":{"485d12dc":"code","785be5ae":"code","2a4d721d":"code","de66bc2e":"code","4189687b":"code","d5e5a754":"code","0cb55c0f":"code","5ab29434":"code","fbfc9432":"code","9f68ce09":"code","8073c485":"code","bdfe1424":"code","6f35157a":"code","b0954600":"code","1137b34f":"code","2e740b16":"code","c94a6fd2":"code","440dc96c":"code","a65151f5":"code","56ccd4f4":"code","c35abf64":"code","bc06d828":"code","94251ddb":"code","56b7a288":"code","7bee3da0":"markdown","90f5c7ff":"markdown","c6ea36be":"markdown"},"source":{"485d12dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","785be5ae":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV","2a4d721d":"FILEPATH = '\/kaggle\/input\/heart-disease-uci\/heart.csv'","de66bc2e":"df = pd.read_csv(FILEPATH)","4189687b":"df.sample(2)","d5e5a754":"X = df.drop(['target'], axis = 1)\ny = df['target']","0cb55c0f":"from sklearn.svm import SVC","5ab29434":"results = pd.DataFrame(columns = ['train_score', 'test_score'])","fbfc9432":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 23)\n\nmodel = SVC()\nmodel.fit(X_train, y_train)\n\nscore_train = model.score(X_train, y_train)\nscore_test = model.score(X_test, y_test)\n\n#print('training score : ', score_train)\n#print('testing score : ', score_test)\n\ncol_name = 'SVC - '\n\nresults.loc[col_name] = (score_train, score_test)","9f68ce09":"results","8073c485":"# Param 1\nparam_grid = {\n    'C' : [1, 10],\n    'gamma' : [0.1, 0.01],\n    'kernel' : ['rbf', 'linear']\n}\n\n# Param 2\nfrom sklearn.utils.fixes import loguniform\n\n# param_grid = {\n#     'C': loguniform(1e0, 1e3),\n#     'gamma': loguniform(1e-4, 1e-3),\n#     'kernel': ['rbf']\n# }","bdfe1424":"param_grid","6f35157a":"grid_model = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3, cv = 5, return_train_score = False)\n\ngrid_model.fit(X_train, y_train)\n\nbest_params = grid_model.best_params_\nbest_estimator = grid_model.best_estimator_\n\nprint('\\nbest_params : ', best_params)\nprint('\\nbest_estimator : ', best_estimator)\n\nscore_train = grid_model.score(X_train, y_train)\nscore_test = grid_model.score(X_test, y_test)\n\nprint('\\ntraining score : ', score_train)\nprint('\\ntesting score : ', score_test)","b0954600":"grid_model.cv_results_","1137b34f":"cv_results = pd.DataFrame(grid_model.cv_results_)","2e740b16":"cv_results","c94a6fd2":"df_min_results = cv_results[['param_C', 'param_kernel', 'mean_test_score']]","440dc96c":"df_min_results","a65151f5":"grid_model.best_score_","56ccd4f4":"grid_model.best_params_","c35abf64":"from sklearn.metrics import classification_report","bc06d828":"y_pred = grid_model.predict(X_test)","94251ddb":"# classification_report(y_test, y_pred)","56b7a288":"print(classification_report(y_test, y_pred))","7bee3da0":"Note:\n* I will add some basic documentation so you can understand better.\n* I will do some code cleanup for better understanding","90f5c7ff":"**About this Notebook:**\n\n* I have played with GridSearchCV in this notebook to let the newcomers get to know how to use GridSearch and improve the accuracy score.\n\n* No cleanup work is done in this dataset.\n\n* Just used the basic GridSearchCV params.\n\n* This is not production ready. Created this only for education and experiment purpose.","c6ea36be":"Resources:\n\n* https:\/\/www.youtube.com\/watch?v=HdlDYng8g9s\n* https:\/\/www.kaggle.com\/vigneshsharma99\/heart-disease-classification"}}