{"cell_type":{"2d768666":"code","3f66c67e":"code","4be0e3e9":"code","a3ce01f5":"code","569381c3":"code","5f2b1e94":"code","ddc29c99":"code","23295120":"code","68967397":"code","15f17646":"code","d1fc6638":"code","4f51855d":"code","8e66d73b":"code","f423ba87":"code","94b6f47a":"code","affaacce":"code","dabc0ea9":"code","a90a8f15":"code","beb29e29":"code","4c8b1f76":"code","a22d3c98":"code","15373580":"code","98476a06":"code","19e45b56":"markdown"},"source":{"2d768666":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f66c67e":"train_df=pd.read_csv('\/kaggle\/input\/sign-language-mnist\/sign_mnist_train\/sign_mnist_train.csv')\ntest_df=pd.read_csv('\/kaggle\/input\/sign-language-mnist\/sign_mnist_test\/sign_mnist_test.csv')","4be0e3e9":"train_df","a3ce01f5":"train_df.info()","569381c3":"train_df.shape, test_df.shape","5f2b1e94":"plt.figure(figsize=(10,10))\nsns.countplot(data=train_df,x='label')","ddc29c99":"num2alpha={0:'A',1:'B',2:'C',3:'D',4:'E',5:'F',6:'G',7:'H',8:'I',10:'K',11:'L',12:'M',13:'N',14:'O',15:'P',16:'Q',17:'R',18:'S',19:'T',20:'U',21:'V',22:'W',23:'X',24:'Y'}","23295120":"fig=plt.figure(figsize=(10,10))\nfor i in range(1,10):\n    x=np.random.randint(1000)\n    fig.add_subplot(3,3,i)\n    plt.title('Label: {}, Letter: {}'.format(train_df.iloc[x,0],num2alpha[train_df.iloc[x,0]]))\n    plt.imshow(train_df.iloc[x,1:].values.reshape(28,28),cmap='gray')\n    plt.show()","68967397":"x=train_df.iloc[:,1:].values\ny=train_df.iloc[:,0]","15f17646":"from sklearn.preprocessing import MinMaxScaler\nnorm=MinMaxScaler()\nnorm.fit(x)\ntransnorm=norm.transform(x)","d1fc6638":"x.shape,y.shape","4f51855d":"from keras.utils import to_categorical\nx=x.reshape(-1,28,28,1)\ny=to_categorical(y,num_classes=25)","8e66d73b":"x.shape","f423ba87":"from sklearn.model_selection import train_test_split\nx_train,x_valid,y_train,y_valid=train_test_split(x,y,test_size=0.2,random_state=4)","94b6f47a":"from keras.preprocessing.image import ImageDataGenerator as ImgDataGen\naugmentData=ImgDataGen(rescale=1.\/255,\n                        rotation_range=20,\n                         height_shift_range=0.2,\n                         width_shift_range=0.2,\n                         horizontal_flip=False,\n                         zoom_range=0.10)","affaacce":"from keras.models import Sequential\nfrom keras.layers import Dropout,BatchNormalization,MaxPooling2D,Dense,Flatten,Conv2D","dabc0ea9":"model=Sequential()\nmodel.add(Conv2D(128,(5,5),input_shape=(28,28,1),activation='relu',name='conv1'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128,(5,5),activation='relu',name='conv2'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2),name='max1'))\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(64,(3,3),activation='relu',name='conv3'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64,(3,3),activation='relu',name='conv4'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2),name='max2'))\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(32,(3,3),activation='relu',name='conv5'))\nmodel.add(BatchNormalization())\n#model.add(MaxPooling2D(pool_size=(2,2),name='max3'))\nmodel.add(Dropout(0.3))\n\nmodel.add(Flatten())\nmodel.add(Dense(256,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(25,activation='softmax'))","a90a8f15":"model.summary()","beb29e29":"from tensorflow.keras.utils import plot_model\nplot_model(model,to_file='model.png',show_shapes=True)","4c8b1f76":"model.compile(optimizer=\"adam\",loss='categorical_crossentropy',metrics=['accuracy'])","a22d3c98":"from tensorflow.keras.callbacks import EarlyStopping\nearlystop=EarlyStopping(monitor=\"val_accuracy\",min_delta=0,patience=10,mode='max',restore_best_weights=True)","15373580":"history=model.fit_generator(augmentData.flow(x_train, y_train, batch_size = 64),steps_per_epoch = (len(x_train)*0.8 \/\/ 64),\n validation_data = augmentData.flow(x_valid, y_valid), validation_steps=(len(x_valid)*0.2)\/\/64,epochs = 100,callbacks=[earlystop])\n","98476a06":"loss, acc = model.evaluate(augmentData.flow(x_valid, y_valid, batch_size=64, seed=2))\nprint(\"Loss: {}\\nAccuracy: {}\".format(loss, acc))","19e45b56":"## Prepared a Dictionary to store the letters so that we can understand the alphabet of corresponding sign\nIt is also to make a note that the cases J=9 and Z=25 are not to be considered.\nThe key and corresponding value pairs are taken based on the count plot shown above."}}