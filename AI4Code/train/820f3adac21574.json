{"cell_type":{"9a1c03c8":"code","d058facd":"code","2faf415f":"code","24b3f092":"code","ab0d6a5a":"code","dc25318a":"code","cb57bd05":"code","aede5157":"code","8e13fd44":"code","92504722":"code","bccb525b":"code","6c1ef844":"code","fa24e265":"code","1ab69d60":"code","02f5c2ec":"code","afef40f5":"code","72e4bbdf":"code","bca9e84a":"code","546682a8":"code","7564ceee":"code","9eb930af":"code","fdf931de":"code","daec72e2":"code","dabd60ec":"code","756f83fa":"code","b7861090":"code","064a377a":"code","ff97359b":"code","8c65b4c9":"code","0df38ed2":"code","3ccf75fb":"code","03e6ce1e":"code","8a449889":"code","99c5d78f":"code","7b6969ae":"code","942a7839":"code","96bbdfd2":"code","29f891b4":"code","0c232308":"code","33d13ba4":"code","1e051008":"code","e2e68475":"code","9282653e":"code","34bb6054":"code","925f4a26":"code","20e0ad49":"code","074568ca":"code","5971b0a4":"code","cb5ef782":"code","72160213":"code","05c87b4f":"code","633a744d":"code","b3533b65":"code","937bb401":"code","6da5d301":"markdown","d7ec412b":"markdown","fd202354":"markdown","4e092650":"markdown","f4ff86b9":"markdown","3972ba75":"markdown","9786a061":"markdown","9bf75689":"markdown","87f01c3c":"markdown","001f5055":"markdown","a713d82c":"markdown","c1e5c685":"markdown","6c7ff894":"markdown","93381a10":"markdown","615d1ce7":"markdown"},"source":{"9a1c03c8":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_rows', 50000)\n","d058facd":"data = pd.read_csv(\"..\/input\/adult-census-dataset\/adult.csv\")","2faf415f":"data.head()","24b3f092":"data.shape","ab0d6a5a":"data.describe()","dc25318a":"data.info()","cb57bd05":"## Finding null values \ndata.isnull().sum().sort_values(ascending=False)\n","aede5157":"data['salary'].value_counts()","8e13fd44":"income_all = data['salary'].value_counts(normalize = True)\nincome_all*100","92504722":"data['sex'].value_counts()","bccb525b":"sex = data['sex'].value_counts(normalize=True)\nsex * 100","6c1ef844":"plt.figure(figsize=(12,4))\nsns.countplot(data = data, x = 'sex', hue=\"salary\", palette = 'nipy_spectral')\nplt.xlabel(\"Sex\", fontsize= 12)\nplt.ylabel(\"No of people\", fontsize= 12)\nplt.ylim(0,20000) \nplt.xticks([0,1],['Male', 'Female'], fontsize = 11)\nplt.show()","fa24e265":"plt.figure(figsize=(10,8))\n\neducation = data[\"education\"].value_counts()\nsns.barplot(education.values, education.index, palette='nipy_spectral')\nplt.title('Education')\nplt.xlabel('Number of people')\nplt.ylabel('Education vs Number of people')\nplt.tick_params(labelsize=12)\nplt.show()","1ab69d60":"plt.figure(figsize=(20,5))\nsns.countplot(data = data, x = 'education', hue=\"salary\", palette = 'nipy_spectral')\nplt.xlabel(\"Education\", fontsize= 12)\nplt.ylabel(\"No of people\", fontsize= 12)\nplt.ylim(0,20000) \nplt.show()","02f5c2ec":"data['race'].value_counts()","afef40f5":"plt.figure(figsize=(12,6))\nsns.countplot(data = data, x = 'race', hue=\"salary\", palette = 'nipy_spectral')\nplt.xlabel(\"race\", fontsize= 12)\nplt.ylabel(\"No of people\", fontsize= 12)\nplt.ylim(0,20000) \nplt.show()","72e4bbdf":"data['marital-status'].value_counts()","bca9e84a":"plt.figure(figsize=(12,6))\nsns.countplot(data = data, x = 'marital-status', hue=\"salary\", palette = 'nipy_spectral')\nplt.xlabel(\"marital-status\", fontsize= 12)\nplt.ylabel(\"No of people\", fontsize= 12)\nplt.ylim(0,20000) \nplt.show()","546682a8":"data['occupation'].value_counts()","7564ceee":"data['workclass'].value_counts()","9eb930af":"data['country'].value_counts()","fdf931de":"data.isin([' ?']).sum()","daec72e2":"data.replace(' ?',0,inplace=True)","dabd60ec":"data['occupation'].value_counts()","756f83fa":"data['occupation'].value_counts()","b7861090":"data = data.replace(0,np.nan)","064a377a":"data[\"workclass\"] = data[\"workclass\"].fillna(data[\"workclass\"].mode()[0])\ndata[\"occupation\"] = data[\"occupation\"].fillna(data[\"occupation\"].mode()[0])\ndata[\"country\"] = data[\"country\"].fillna(data[\"country\"].mode()[0])","ff97359b":"data['occupation'].value_counts()","8c65b4c9":"data.head()","0df38ed2":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndata['salary'] = le.fit_transform(data['salary'])","3ccf75fb":"from sklearn.preprocessing import LabelEncoder\nfor col in data.columns:\n    if data[col].dtypes == 'object':\n        le = LabelEncoder()        \n        data[col] = le.fit_transform(data[col].astype(str))","03e6ce1e":"data = data.replace(np.nan,0)","8a449889":"data.head(10)","99c5d78f":"data.corr()","7b6969ae":"X = data.drop(\"salary\",axis=1)\ny = data.salary","942a7839":"plt.subplots(figsize=(20,15))\nsns.heatmap(X.corr(), annot=True, cmap=\"nipy_spectral\")\nplt.show()","96bbdfd2":"from imblearn.over_sampling import RandomOverSampler \nrandom_sampler = RandomOverSampler(random_state=30)","29f891b4":"random_sampler.fit(X,y)","0c232308":"X_new,y_new = random_sampler.fit_resample(X, y)","33d13ba4":"y_new.value_counts(normalize=True)","1e051008":"from sklearn import metrics\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error","e2e68475":"X_train, X_test, y_train, y_test = train_test_split(X_new,y_new, test_size=0.30)","9282653e":"clf = DecisionTreeClassifier( max_depth=3)\nclf = clf.fit(X_train,y_train)\ny_pred = clf.predict(X_test)\n# acc_clf = round(clf.score(X_train, y_train) * 100, 2)\nacc_clf = round(metrics.accuracy_score(y_test, y_pred) * 100, 2)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","34bb6054":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, y_train)\ny_pred = random_forest.predict(X_test)\n# acc_rf = round(random_forest.score(X_train, y_train) * 100, 2)\nacc_rf = round(metrics.accuracy_score(y_test, y_pred) * 100, 2)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","925f4a26":"sgd = linear_model.SGDClassifier(max_iter=5, tol=None)\nsgd.fit(X_train, y_train)\ny_pred = sgd.predict(X_test)\nsgd.score(X_train, y_train)\n# acc_sgd = round(sgd.score(X_train, y_train) * 100, 2)\nacc_sgd = round(metrics.accuracy_score(y_test, y_pred)* 100, 2)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","20e0ad49":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)\n# acc_log = round(logreg.score(X_train, y_train) * 100, 2)\nacc_log = round(metrics.accuracy_score(y_test, y_pred) * 100, 2)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","074568ca":"knn = KNeighborsClassifier(n_neighbors = 3) \nknn.fit(X_train, y_train) \ny_pred = knn.predict(X_test) \n# acc_knn = round(knn.score(X_train, y_train) * 100, 2)\nacc_knn = round(metrics.accuracy_score(y_test, y_pred) * 100, 2)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","5971b0a4":"gaussian = GaussianNB() \ngaussian.fit(X_train, y_train) \ny_pred = gaussian.predict(X_test) \n# acc_gaussian = round(gaussian.score(X_train, y_train) * 100, 2)\nacc_gaussian = round(metrics.accuracy_score(y_test, y_pred) * 100, 2)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","cb5ef782":"results = pd.DataFrame({\n    'Model': ['Decision Tree','Random Forest','Stochastic Gradient Decent', 'Logistic Regression', 'KNN', \n              'Naive Bayes'],\n    'Score': [acc_clf,\n              acc_rf,acc_sgd,acc_log,acc_knn,acc_gaussian]})                \nresult_df = results.sort_values(by='Score', ascending=False)\nresult_df = result_df.set_index('Score')\nresult_df.head(9)","72160213":"importances = pd.DataFrame({'feature':X_train.columns,'importance':np.round(random_forest.feature_importances_,3)})\nimportances = importances.sort_values('importance',ascending=False).set_index('feature')\nimportances","05c87b4f":"importances.plot.bar()","633a744d":"random_forest = RandomForestClassifier(n_estimators=100, oob_score = True)\nrandom_forest.fit(X_train, y_train)\nY_prediction = random_forest.predict(X_test)\nrandom_forest.score(X_train, y_train)\nacc_random_forest = round(random_forest.score(X_train, y_train) * 100, 2)","b3533b65":"print(\"oob score:\", round(random_forest.oob_score_, 4)*100, \"%\")\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, Y_prediction))\nprint(\"F1 Score: \", round(f1_score(y_test,Y_prediction) * 100,3))\nprint(\"MSE: \", round(mean_squared_error(y_test,Y_prediction) * 100,3))","937bb401":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, Y_prediction)\nplt.figure(figsize=(10,7))\nsns.heatmap(cm,annot=True,fmt='d',cmap=\"Blues\")\nplt.xlabel(\"Predicted Value\")\nplt.ylabel(\"Truth\")\nplt.show()","6da5d301":"## Random forest can be selected as final model with  92.07 % accuracy","d7ec412b":"We have 66 % of the data with male and only 33 % female. so plotting the data for analysis for only 20,000","fd202354":"## Analysing the data based on Gender","4e092650":"### Based on marital status","f4ff86b9":"## Exploratory data analysis ","3972ba75":"## Picking up final model as Random Forest","9786a061":"## Based on Education","9bf75689":"### Based on Race ","87f01c3c":"### Picking up important features","001f5055":"### Feature Engineering ","a713d82c":"### Education Vs Salary ","c1e5c685":"#### The data is skewed because we have 75% of the data for people who has less than 50 k salary and only 25 % of the data of people with greater than 50k ","6c7ff894":"## Balancing the data set ","93381a10":"### Modelling ","615d1ce7":"### The people who has masters , Doctorate, Prof-school tend to be earning more than 50k that the other degrees \n\n### Obviously !!! "}}