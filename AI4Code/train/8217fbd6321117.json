{"cell_type":{"ba7d41c7":"code","79ba21d5":"code","de79cbb7":"code","a8efefb4":"code","ee3965b5":"code","450c812c":"code","3df152f9":"code","afb4149f":"code","f0208a07":"code","46ede467":"code","1b52af82":"code","42461414":"code","2c1917a2":"code","fd67a310":"code","3b513ec2":"code","118b534e":"code","72168e30":"code","f46313b4":"code","61eebda4":"code","f23363d0":"code","7c40f38a":"code","cca946e4":"markdown","a48a119e":"markdown","73db59c8":"markdown","67b8aea7":"markdown","222ec1ef":"markdown","fa3d6d10":"markdown"},"source":{"ba7d41c7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom geopy.geocoders import Nominatim\nfrom geopy.extra.rate_limiter import RateLimiter\nimport matplotlib.pyplot as plt\n\nimport folium\nimport branca\nfrom scipy.interpolate import griddata","79ba21d5":"!pip install geojsoncontour\nimport geojsoncontour","de79cbb7":"first_bloom = pd.read_csv('\/kaggle\/input\/japanese-cherry-blossom-data\/sakura_first_bloom_dates.csv')","a8efefb4":"test = first_bloom.loc[0,'Site Name']\n\nlocator = Nominatim(user_agent=\"myGeocoder\")\nlocation = locator.geocode(test)\n\n\nprint(location.address)\nprint(f\"Latitude = {location.latitude}, Longitude = {location.longitude}\")","ee3965b5":"first_bloom.loc[:,'Site Name'] = first_bloom.loc[:,'Site Name'] + ', Japan'","450c812c":"geocode = RateLimiter(locator.geocode, min_delay_seconds=1)\nfirst_bloom['Location'] = first_bloom['Site Name'].apply(geocode)\nfirst_bloom['Latitude'] = first_bloom['Location'].apply(lambda x: x.latitude if x else None)\nfirst_bloom['Longitude'] = first_bloom['Location'].apply(lambda x: x.longitude if x else None)","3df152f9":"first_bloom.loc[first_bloom['Latitude'].isnull()]","afb4149f":"first_bloom['2020'] = first_bloom['2020'].astype('datetime64')\n\nconverted_dates = first_bloom['2020'].apply(lambda entry: entry.timestamp() if entry == entry else entry)\n\nconverted_df = pd.DataFrame()\nconverted_df['Site Name'] = first_bloom['Site Name']\nconverted_df['Dates'] =  first_bloom['2020'].apply(lambda entry: entry.timestamp() if entry == entry else entry)\nconverted_df['Longitude'] = first_bloom.Longitude\nconverted_df['Latitude'] = first_bloom.Latitude\nconverted_df['Deltas'] = (first_bloom['2020'] - first_bloom['2020'].min()).dt.days\n\nconverted_df.dropna(inplace=True)\nconverted_df['Text Dates'] = first_bloom['2020'].dt.strftime(\"%b %d\").dropna()\n\ndate_dict = converted_df.set_index('Dates').to_dict()['Text Dates']","f0208a07":"faux_dates = pd.DataFrame({\n    'Longitude':   np.random.normal(converted_df.Longitude.mean(), converted_df.Longitude.mean(),     1000),\n    'Latitude':    np.random.normal(converted_df.Latitude.mean(), converted_df.Latitude.mean(),     1000),\n    'Dates': np.random.normal(converted_df.Deltas.mean(), converted_df.Deltas.std() , 1000)})\n\nlong_arr = np.linspace(converted_df.Longitude.min(),converted_df.Longitude.max(),500)\nlat_arr = np.linspace(converted_df.Latitude.min(),converted_df.Latitude.max(),500)\n\nlong_mesh, lat_mesh = np.meshgrid(long_arr,lat_arr)\n\ndate_mesh = griddata((converted_df.Longitude, converted_df.Latitude), \n                     converted_df.Deltas, (long_mesh, lat_mesh), method='cubic')\n\ncontourf = plt.contourf(long_mesh, lat_mesh, date_mesh, alpha=0.75)","46ede467":"# Convert matplotlib contourf to geojson\ngeojson = geojsoncontour.contourf_to_geojson(\n    contourf=contourf,\n    min_angle_deg=3.0,\n    ndigits=5,\n    stroke_width=1,\n    fill_opacity=0.5)\n\n# Set up the folium plot\ngeomap = folium.Map([converted_df.Latitude.mean(), converted_df.Longitude.mean()], zoom_start=5, tiles=\"cartodbpositron\")\n\n# Plot the contour plot on folium\nfolium.GeoJson(\n    geojson,\n    style_function=lambda x: {\n        'color':     x['properties']['stroke'],\n        'weight':    x['properties']['stroke-width'],\n        'fillColor': x['properties']['fill'],\n        'opacity':   0.6,\n    }).add_to(geomap)\n\n# Add the colormap to the folium map\n#cm.caption = 'Temperature'\n#geomap.add_child(cm)\n\nfirst_bloom.apply(lambda row:folium.Marker(location=[row[\"Latitude\"], row[\"Longitude\"]], tooltip=f\"{row['Site Name']}<br>{row['2020']}\").add_to(geomap), axis=1)\n\ngeomap","1b52af82":"fig, ax = plt.subplots(1,1)\nn, bins, patches = ax.hist(converted_df['Deltas'],bins=5)\nticks = ax.get_xticks()\nax.set_xticklabels(ticks, rotation=90)","42461414":"print(first_bloom['2020'].min() + np.round(bins) * pd.Timedelta(days=1))\n\nfirst_bloom['2020'].max()","2c1917a2":"levels = 8\ncolors = ['blue', 'green', 'yellow']\nvmin = converted_df['Deltas'].min()\nvmax = converted_df['Deltas'].max()\n\ncmap = branca.colormap.LinearColormap(colors, vmin=vmin,vmax=vmax).to_step(levels)\ncmap","fd67a310":"from plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go","3b513ec2":"dir(contourf)","118b534e":"for item in contourf.collections:\n    print(item)","72168e30":"derp_geojson = eval(geojson)\n\narr_temp=np.ones([len(derp_geojson[\"features\"]),2])\n\nfor i in range(0, len(derp_geojson[\"features\"])):\n    derp_geojson[\"features\"][i][\"id\"]=i\n\n#Filling array with price and Id for each geojson spatial object. Z value from contour plot will be stored as title\n    arr_temp[i,0]=i\n    arr_temp[i,1]=derp_geojson[\"features\"][i][\"properties\"][\"title\"]\n    \n#Transforming array to df\ndf_contour=pd.DataFrame(arr_temp, columns=[\"Id\",\"Date\"])","f46313b4":"\n#fig = go.Figure(data = go.Choroplethmapbox( \n#    geojson = derp_geojson,\n#    locations =  None\n#    ) )\n\n\n#fig.show()","61eebda4":"date_array = np.empty((first_bloom['2020'].size,first_bloom['2020'].size),dtype='datetime64[D]')\ndate_array[:] = 'NaT'\nnp.fill_diagonal(date_array,first_bloom['2020'])","f23363d0":"plt.contourf(first_bloom.Longitude, first_bloom.Latitude,date_array)","7c40f38a":"import plotly.graph_objects as go\n\nfig = go.Figure(data =\n    go.Contour(\n        z= date_array\n    )\n)\n\nfig.show()","cca946e4":"# Visualizations\n\nBased on code from here:\nhttps:\/\/github.com\/python-visualization\/folium\/issues\/958\n\nI've had limited success getting a color map legend for this contour map. I'm still working the issue, but if anyone has any suggestions, please comment below. \n\n","a48a119e":"We need to ensure that all of our sites had their Latitudes and Longitudes looked up correctly. ","73db59c8":"## Latitude and Longitude Lookups","67b8aea7":"The geocode that looks up the latitude and longitude works fairly well, but needs the country to actually pull in everything correctly.","222ec1ef":"# Troubleshooting\nThis is just a section where I'm working on changes to my current visualizations. That way I can work on them without interrupting the organization of the main part of the notebook.\n\nNotes:\n* Currently trying to get a color map for folium work and\/or recreate the geojson contour map in plotly.\n","fa3d6d10":"This notebook is intended to be a quick look at the Sakura Data that I compiled. I plan on gathering additional data, but I wanted to ensure the data I compiled is useable first before moving on to additonal data to help make predictions."}}