{"cell_type":{"e1611044":"code","0ef094c2":"code","9b0e5e46":"code","a6a5c5f5":"code","796cfef3":"code","540991d3":"code","44baa697":"code","157ee2ed":"code","9903bd2c":"code","d03bbb69":"code","0417a58a":"code","9f6692d6":"code","05e0f467":"code","80f46bc1":"code","e1977c50":"code","f7634e07":"code","e30b0c0f":"markdown","058e2d9f":"markdown","839b59f2":"markdown","01b71ea7":"markdown","2c977211":"markdown","fa23e6f7":"markdown","45ec513f":"markdown","606b36ff":"markdown","ef7528bd":"markdown"},"source":{"e1611044":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.set_option('display.max_columns', 10)\npd.set_option('display.max_rows', 50)\n\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0ef094c2":"train_set = pd.read_csv('..\/input\/train.csv')\n# test_set = pd.read_csv('..\/input\/test.csv')\nprint(train_set)","9b0e5e46":"train_set.info()","a6a5c5f5":"missing_set = train_set.isnull().sum(axis=0).reset_index()\nmissing_set.columns = ['column', 'count']\nmissing_set.sort_values(by=[\"count\"], inplace=True, ascending=False)\nmissing_set","796cfef3":"desc = train_set.describe().T\nconstant_index = desc[desc['std'] == 0].index\nconstant_index","540991d3":"train_set = train_set.drop(columns=list(constant_index))","44baa697":"fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12, 12))\nsns.distplot(train_set[\"target\"], ax=axes[0,0])\nsns.distplot(np.log(train_set[\"target\"]), ax=axes[0, 1])\nsns.boxplot(data=train_set[\"target\"], ax=axes[1, 0])\nsns.boxplot(data=np.log(train_set[\"target\"]), ax=axes[1, 1])","157ee2ed":"corr = abs(train_set.corr())","9903bd2c":"count = corr == 1\ncount = count.sum(axis=0).reset_index()\ncount.columns = ['column', 'count']\ncount.sort_values(by=[\"count\"], inplace=True, ascending=False)\ncount","d03bbb69":"lg_1 = count['count'] > 1\nlg_1.sum()","0417a58a":"n_largest = corr.nlargest(n=1000, columns='target')\nn_largest","9f6692d6":"heat = corr.nlargest(n=10, columns='target')\ncolumns = list(heat.index)\nheat = heat[heat.index]\nf, ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(heat, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=heat.columns, xticklabels=heat.index, ax=ax)","05e0f467":"from sklearn.decomposition import PCA\ntrain_set = train_set.drop(columns=\"ID\")\ntarget = train_set['target']\ntrain_set = train_set.drop(columns=\"target\")\ntrain_set","80f46bc1":"pca = PCA(n_components=500)\nnew_set = pca.fit_transform(train_set)\nnew_set","e1977c50":"from sklearn.model_selection import cross_validate\nfrom sklearn.linear_model import LinearRegression\nnew_target = np.log(target)\nlinear_model = LinearRegression()\nlinear_scores = cross_validate(linear_model, new_set, new_target, cv=5, return_train_score=True)\nlinear_scores\n","f7634e07":"import lightgbm as lgb \nfrom sklearn.model_selection import train_test_split\nlgb_train, lgb_test, lgb_target_train, lgb_target_test = train_test_split(new_set, new_target, test_size=0.20, shuffle = True, random_state = 42)\nparam =  {\n    'task': 'train',\n    'boosting_type': 'gbdt',\n    'objective': 'binary',\n    'metric': 'auc',\n    'num_leaves': 32,\n    'learning_rate': 0.02,\n    'verbose': 0,\n    'lambda_l1': 1,\n    'scale_pos_weight': 8 \n} \nlgtrain = lgb.Dataset(lgb_train, lgb_target_train)\nlgvalid = lgb.Dataset(lgb_test, lgb_target_test)\nlgb_clf = lgb.train(\n    param,\n    lgtrain,\n    num_boost_round=10000,\n    valid_sets=[lgtrain, lgvalid],\n    valid_names=['train','valid'],\n    early_stopping_rounds=100,\n    verbose_eval=100\n    )\n# lgb.cv(param, lgb_train, 5, nfold=5)","e30b0c0f":"PCA is applied to our data and a new data set  which has only 500 features has been created, next, we will use LR and LGB model to predict the target value according to this new data set.","058e2d9f":"Apparently,  out target is right skew distributed, if we display it in hist and box graph, we can see that it has a long tail which can even be regarded as outliers, most of its value are concentrated among a narrow area\u3002 But after log transfermation, our target has a much better distribution, very close to normal distribution.","839b59f2":"Now we can say there are no missing values in this dataset, so, wo do not need to do precessing for missing values in the following analysis. \nNext, let's dive deeper into our data.","01b71ea7":"We have 256 columns whose standard deviation equal to 0, meaning that both these columns have a constant value and they have nothing to do with out target. So, in the coming analysis, we will remove these columns to make our data less scalable.","2c977211":"It shows that more than 3000 features  has a correlation  coefficient less than 0.036, which means they nearly has nothing to do with our target, so in our PCA analysis, 500 components may be enough to be reserved.","fa23e6f7":"We draw a hear map to show the ten largest features correlated to our target. And now, we will apply PCA to our data.","45ec513f":"Firstly,  let us simply explore the dateset to have to basic expression of our data","606b36ff":"We can see that in the correlation matrix, not only the value in the digonal equal to 1, but also there are some values equal to 1 in other position. We can summarize that many columns in our data must be the same or linear dependent to each other. So, we have to remove those duplicated columns, as we have a 4736*4736 correlation coefficient matrix, to find those value equal to 1 and then remove the column in our data one by one can be a tough work. So PCA can be apply to our data to remove redundant features\uff0cbefore that\uff0c we will calculate  the 1000 largest correlation coefficient and decide how many principal component to reserve in our new data.","ef7528bd":"There are 4459 samples in our data, each sample has 4993 columns, in which 4991 columns can be regarded as features , ID has no special meaning and target is the value wo are going to predict.\nThen,, let's see if there are missing values in this dataset"}}