{"cell_type":{"b0875864":"code","59d93bc9":"code","d48e6fc9":"code","b45da97d":"code","83d34e54":"code","9157ee6a":"code","fe607f03":"code","830f502c":"code","5c9131d4":"code","f8b07558":"code","bf43d467":"code","e90d704c":"code","f6137b20":"code","8c9c98f2":"code","b425091d":"code","f080ae66":"code","c4ae94ea":"code","1c443110":"code","fd7cfab6":"code","a783fd7a":"code","c77271f6":"code","87c53b9a":"code","6933b2b6":"code","623fcbd8":"code","ac2defd3":"code","89fb6eca":"code","59b5ec13":"code","d68caf3e":"code","1d248f6f":"code","590e9798":"code","2f2c8b59":"code","c1b4f61d":"code","fbd54012":"code","30ab96cf":"code","69629e65":"code","396a2837":"code","6292370a":"code","bf14ab70":"markdown","ee2d3d97":"markdown","fb525597":"markdown","9b75affa":"markdown","5c18cbad":"markdown","eb495724":"markdown","b346643b":"markdown","0674dc89":"markdown","12664aa3":"markdown","96f72750":"markdown","99e62df8":"markdown","e6fad9e9":"markdown","fec709ce":"markdown","f663d56f":"markdown","512dff38":"markdown","595ad54e":"markdown","c37d4568":"markdown","736d8c7a":"markdown","b8dc6cb7":"markdown","cbb827ca":"markdown","d2c1fce1":"markdown","8d993fb9":"markdown","45b885f7":"markdown","07d60104":"markdown"},"source":{"b0875864":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","59d93bc9":"import missingno as msno\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier,AdaBoostClassifier,StackingClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report,confusion_matrix","d48e6fc9":"df=pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv')\ndf.head()","b45da97d":"X_test=pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')\nX_test.head()","83d34e54":"msno.matrix(df)","9157ee6a":"df.info()","fe607f03":"cols=['Survived','Pclass','Sex','SibSp',\n      'Parch','Embarked']\n\nfor col in cols:\n    print(f'Unique values in {col}:\\n',df[col].dropna().unique())\n    print('\\n')","830f502c":"cols=['Pclass','Sex','SibSp',\n      'Parch','Embarked']\n\nplt.style.use('seaborn')\nfig=plt.figure()\nfor i,col in enumerate(cols):\n    fig.add_subplot(3,2,i+1)\n    fig.set_size_inches(10,11)\n    sns.countplot(x=col,data=df,hue='Survived',palette='tab10')\n    plt.xlabel(col,fontsize=14)\n    plt.ylabel('count',fontsize=14)\n    plt.tight_layout()","5c9131d4":"px.density_heatmap(x='Pclass',y='Age',data_frame=df,width=550,height=450)","f8b07558":"px.density_heatmap(x='Sex',y='Age',data_frame=df,width=550,height=450)","bf43d467":"px.density_heatmap(x='Parch',y='Age',data_frame=df,width=550,height=450)","e90d704c":"px.density_heatmap(x='SibSp',y='Age',data_frame=df,width=550,height=450)","f6137b20":"px.density_heatmap(x='Survived',y='Age',data_frame=df,width=550,height=450)","8c9c98f2":"px.density_heatmap(x='Pclass',y='Fare',data_frame=df,width=550,height=450)","b425091d":"px.density_heatmap(x='Embarked',y='Fare',data_frame=df,width=550,height=450)","f080ae66":"plt.subplot(1,2,1)\ndf['Age'].hist(figsize=(11,6),bins=20,edgecolor='white')\nplt.xlabel('Age',fontsize=14)\nplt.ylabel('count',fontsize=14)\n\nplt.subplot(1,2,2)\ndf['Age'].plot.box(figsize=(11,6),boxprops={'linewidth':1.5,'color':'red'},\n                   whiskerprops={'linewidth':1.5,'color':'red'},\n                   medianprops={'linewidth':1.5,'color':'blue'})","c4ae94ea":"plt.subplot(1,2,1)\ndf['Fare'].hist(figsize=(11,6),bins=20,edgecolor='white')\nplt.xlabel('Fare',fontsize=14)\nplt.ylabel('count',fontsize=14)\n\nplt.subplot(1,2,2)\ndf['Fare'].plot.box(figsize=(11,6),boxprops={'linewidth':1.5,'color':'red'},\n                   whiskerprops={'linewidth':1.5,'color':'red'},\n                   medianprops={'linewidth':1.5,'color':'blue'})","1c443110":"X_test_copy=X_test.copy()","fd7cfab6":"cat_cols=['Pclass','Sex','SibSp','Parch',\n          'Ticket','Cabin','Embarked']\nfor cols in cat_cols:\n    df[col]=df[col].replace(np.nan,df[col].mode()[0])\n    X_test_copy[col]=X_test_copy[col].replace(np.nan,X_test_copy[col].mode()[0])\n    \nnum_cols=['Age','Fare']\nfor col in num_cols:\n    df[col]=df[col].replace(np.nan,df[col].mean())\n    X_test_copy[col]=X_test_copy[col].replace(np.nan,X_test_copy[col].mean())","a783fd7a":"q75,q25 = np.percentile(df['Age'],[75,25])\nintr_qr = q75-q25\n \nmax = q75+(1.5*intr_qr)\nmin = q25-(1.5*intr_qr)\noutlier_age=[]\ncount=0\nfor age in df['Age']:\n    if age < min or age > max:\n        outlier_age.append(age)\n        count+=1\n    \nprint('No of outliers in Age column:',count)\n        ","c77271f6":"q75,q25 = np.percentile(df['Fare'].dropna(),[75,25])\nintr_qr = q75-q25\n \nmax = q75+(1.5*intr_qr)\nmin = q25-(1.5*intr_qr)\noutlier_fare=[]\ncount=0\nfor fare in df['Fare'].dropna():\n    if fare < min or fare > max:\n        outlier_fare.append(fare)\n        count+=1\n    \nprint('No of outliers in Fare column:',count)","87c53b9a":"for fare in outlier_fare:\n    df['Fare']=df['Fare'].replace(fare,df['Fare'].mean())","6933b2b6":"df['Fare'].plot.box(figsize=(9,5),boxprops={'linewidth':1.5,'color':'red'},\n                   whiskerprops={'linewidth':1.5,'color':'red'},\n                   medianprops={'linewidth':1.5,'color':'blue'})\n\nx=[x for x in df['Fare'] if x< min or x > max]\nprint('Outliers after imputing:',len(x))","623fcbd8":"cols=['Ticket','Cabin']\nfor col in cols:\n    df[col]=df[col].fillna(method='ffill')\n    X_test_copy[col]=X_test_copy[col].fillna(method='ffill')","ac2defd3":"codes=df['Cabin'].str.split('(?<=\\D)(?=\\d)')\n\ndf['Cabin_code']=[code[0] for code in codes]\nX_test_copy['Cabin_code']=[code[0] for code in codes]\n\ndf['Cabin_number']=[code[1] for code in codes]\nX_test_copy['Cabin_number']=[code[1] for code in codes]","89fb6eca":"df['Cabin_number']=df['Cabin_number'].astype('int')\nX_test_copy['Cabin_number']=X_test_copy['Cabin_number'].astype('int')","59b5ec13":"df=df.drop(['Ticket','Cabin'],axis=1)","d68caf3e":"df.head()","1d248f6f":"X=df.drop(['Survived','Name'],axis=1)\ny=df.Survived","590e9798":"X_test_copy=X_test_copy.drop(['Ticket','Cabin','Name'],axis=1)","2f2c8b59":"le=LabelEncoder()\n#train data\nX['Sex']=le.fit_transform(X['Sex'])\nX['Embarked']=le.fit_transform(X['Embarked'])\nX['Cabin_code']=le.fit_transform(X['Cabin_code'])\n\n#test data\nX_test_copy['Sex']=le.fit_transform(X_test_copy['Sex'])\nX_test_copy['Embarked']=le.fit_transform(X_test_copy['Embarked'])\nX_test_copy['Cabin_code']=le.fit_transform(X_test_copy['Cabin_code'])","c1b4f61d":"X=(X-X.mean())\/X.std()\nX_test_copy=(X_test_copy - X_test_copy.mean())\/X_test_copy.std()","fbd54012":"X_train,X_val,y_train,y_val=train_test_split(X,y,test_size=0.3,random_state=42)","30ab96cf":"models=[RandomForestClassifier,GradientBoostingClassifier,\n        AdaBoostClassifier,LGBMClassifier]\nfor model in models:\n    modell=model()\n    modell.fit(X_train,y_train)\n    preds=modell.predict(X_val)\n    print(modell)\n    print(classification_report(y_val,preds))\n    print('-'*25)\n    print('\\n\\n')","69629e65":"step0=[]\nstep0.append(('rf',RandomForestClassifier()))\nstep0.append(('gb',GradientBoostingClassifier()))\nstep0.append(('ada',AdaBoostClassifier()))\nstep0.append(('lgbm',LGBMClassifier()))\n\n\nstep1=LogisticRegression()\n\nmodel=StackingClassifier(estimators=step0,final_estimator=step1,cv=5)\n\nmodel.fit(X_train,y_train)\npreds=model.predict(X_val)\nprint('classification report:\\n',classification_report(y_val,preds))\nprint('confusion matrix:\\n',confusion_matrix(y_val,preds))","396a2837":"predictions=model.predict(X_test_copy)","6292370a":"submission=pd.DataFrame({'PassengerId':X_test['PassengerId'],\n                        'Survived':predictions})\nsubmission.to_csv('my_submissions.csv',index=False)","bf14ab70":"* <font size=4><b>Checking for No. Sibling\/Spouse of passengers across all age groups<\/b><\/font>","ee2d3d97":"* <font size=4><b>How does the Fare vary region to region?<\/b><\/font>","fb525597":"* <font size=4><b>Checking for No. of parent\/children of passengers across all age groups<\/b><\/font>","9b75affa":"<font size=5><b>Age<\/b><\/font>","5c18cbad":"<font size=4><b>Encoding Categorical features<\/b><\/font>","eb495724":"<font size=4><b>Detecting and removing outliers in Age and Fare features using Inter-Quartile Range<\/b><\/font>","b346643b":"<font size=4><b>Checking for unique values<\/b><\/font>","0674dc89":"<font size=4><b>Let's analyze the categorical columns and how does the Survival affect it<\/b><\/font>","12664aa3":"<font size=4><b>Imputing missing values in categorical features with the most frequent occurrences. Imputing missing values in numerical features with mean.<\/b><\/font>","96f72750":"<font size=5><b>Stacking models<\/b><\/font>","99e62df8":"* <font size=4><b>Checking for frequency of a particular age group for each gender<\/b><\/font>","e6fad9e9":"<font size=5><b>Age<\/b><\/font>","fec709ce":"<font size=5><b>Fare<\/b><\/font>","f663d56f":"* <font size=4><b>Checking for Survival rate for each of the age groups.<\/b><\/font>","512dff38":"<font size=5><b>Statistical Analysis<\/b><\/font>","595ad54e":"<font size=5><b>Scaling<\/b><\/font>","c37d4568":"<font size=4><b>Splitting the Cabin attribute and creating features Cabin code and Cabin number<\/b><\/font>","736d8c7a":"* <font size=4><b>How does the Fare vary across the Ticket Class ? <\/b><\/font>","b8dc6cb7":"<font size=4><b>Checking for outliers after imputing the Fare column<\/b><\/font>","cbb827ca":"<font size=5><b>Attributes<\/b><\/font>\n\n* <font size=3>survival-Survival-0 = No, 1 = Yes<\/font>\n* <font size=3>pclas-Ticket class-1 = 1st, 2 = 2nd, 3 = 3rd<\/font>\n* <font size=3>sex-Sex<\/font>\n* <font size=3>Age-Age in years<\/font>\n* <font size=3>sibsp-# of siblings \/ spouses aboard the Titanic<\/font>\n* <font size=3>parch-# of parents \/ children aboard the Titanic<\/font>\n* <font size=3>ticket-Ticket number<\/font>\n* <font size=3>fare-Passenger fare<\/font>\n* <font size=3>cabin-Cabin number<\/font>\n* <font size=3>embarked-Port of Embarkation-C = Cherbourg, Q = Queenstown, S = Southampton<\/font>","d2c1fce1":"<font size=5><b>Fare<\/b><\/font>","8d993fb9":"* <font size=4><b>Exploring the class of travel and analysing age range for particular class<\/b><\/font>","45b885f7":"<font size=4><b>Below we replace outliers in Fare feature with the mean of Fare feature<\/b><\/font>","07d60104":"<font size=5><b>checking for missing values<\/b><\/font>"}}