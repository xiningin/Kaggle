{"cell_type":{"c6e4e87c":"code","37ac18fc":"code","cca00921":"code","9e8d49a3":"code","19630a86":"code","ea19cb50":"code","6b24b13b":"code","bbd10d4e":"code","24d09056":"code","24e2cdfa":"code","6d8c94e4":"code","20e60eff":"code","e4eb9b03":"code","3291c2f6":"code","94e9ab07":"code","cd2981b2":"code","55991dc7":"code","4b2bc1d3":"code","e7f6a74e":"code","ef6a951a":"code","d28661f4":"code","3e946de2":"code","519a63ba":"code","f691a6a8":"code","e3d39a28":"code","32006a9c":"code","e8224083":"code","94413cd9":"code","887e8024":"code","7bbd3634":"code","19829af9":"code","8ecb5a04":"code","bc8f7f02":"code","b6f8bdfd":"code","c6323215":"code","e1150be3":"code","71951c30":"code","76c3fd45":"code","fc8b7e64":"code","b3d6f4a2":"code","2f34fafc":"code","3dbbeafd":"code","11a09c25":"markdown","a9d2235b":"markdown","f7c56b49":"markdown","d5614bd6":"markdown","64de1570":"markdown","94165fc2":"markdown","2243bc57":"markdown","576ab11b":"markdown","a64c8d98":"markdown","045fad78":"markdown","76551e87":"markdown","e16337bf":"markdown","282d9276":"markdown","d685872c":"markdown","31049ae6":"markdown","63a0cc90":"markdown","eadf2f10":"markdown","b11ba5ac":"markdown","83733156":"markdown","25c8cd3a":"markdown","8e351312":"markdown","a124ef00":"markdown","ae6f8ffa":"markdown","303f5db8":"markdown","895b4c2b":"markdown","99c80110":"markdown","a57bec4b":"markdown","96752627":"markdown","5fea869b":"markdown","93308e12":"markdown","4611af8a":"markdown","9673a55a":"markdown","d75e0f4d":"markdown","76c37596":"markdown","dcc98916":"markdown","97d66738":"markdown","61736973":"markdown","d26e674c":"markdown","15e2efd6":"markdown"},"source":{"c6e4e87c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings('ignore')\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","37ac18fc":"df = pd.read_csv('..\/input\/amsterdam-house-price-prediction\/HousingPrices-Amsterdam-August-2021.csv')\ndf.head()","cca00921":"for i in df.columns:\n    fig_dims = (12,8)\n    fig, ax = plt.subplots(figsize = fig_dims)\n    sns.histplot(x=i, data = df)","9e8d49a3":"sns.heatmap(df.corr())","19630a86":"df.info()","ea19cb50":"df = df.dropna(axis = 0, inplace = False)","6b24b13b":"df.info()","bbd10d4e":"sns.boxplot(x='Price', data = df)","24d09056":"df.describe()","24e2cdfa":"# Finding the maximum tolerance for the boxplot\nq1 = df.describe()['Price']['25%']\nq3 = df.describe()['Price']['75%']\niqr = q3 - q1\nmax_price = q3 + 1.5 * iqr ","6d8c94e4":"# We create an outliers dataset so that we can find the count of outliers\noutliers = df[df['Price'] >= max_price]\n\n#Outlier and dataset count followed by percentage of dataset removed\noutliers_count = outliers['Price'].count()\ndf_count = df['Price'].count()\nprint('Percentage removed: ' + str(round(outliers_count\/df_count * 100, 2)) + '%')","20e60eff":"# Repalcing the old dataframe with the new one  \ndf = df[df['Price'] <= max_price]","e4eb9b03":"df['Zip No'] = df['Zip'].apply(lambda x:x.split()[0])\ndf['Letters'] = df['Zip'].apply(lambda x:x.split()[-1])","3291c2f6":"df['Address']","94e9ab07":"df['Address'] = df['Address'].apply(lambda x:x.split(',')[0]) ","cd2981b2":"def word_separator(string):\n    list = string.split()\n    word = []\n    number = [] \n    for element in list:\n        if element.isalpha() == True: \n            word.append(element)\n        else:\n            break\n    word = ' '.join(word)\n    return word","55991dc7":"df['Street'] = df['Address'].apply(lambda x:word_separator(x))","4b2bc1d3":"df.head()","e7f6a74e":"numerical = ['Price', 'Area', 'Room', 'Lon', 'Lat']\ncategorical = ['Address', 'Zip No', 'Letters', 'Street']","ef6a951a":"from sklearn.preprocessing import LabelEncoder\nfor c in categorical:\n    lbl = LabelEncoder() \n    lbl.fit(list(df[c].values)) \n    df[c] = lbl.transform(list(df[c].values))","d28661f4":"df.drop(['Zip', 'Unnamed: 0', 'Address'], axis =1, inplace = True)","3e946de2":"sns.heatmap(df.corr())","519a63ba":"from sklearn.model_selection import train_test_split\nX = df.drop('Price', axis =1)\ny = df['Price']\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.4)","f691a6a8":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","e3d39a28":"from sklearn.linear_model import LinearRegression\nlinreg = LinearRegression()\nlinreg.fit(X_train, y_train)\npredictions = linreg.predict(X_test)","32006a9c":"cv = cross_val_score(linreg, X_train, y_train, cv=20, scoring = 'neg_mean_squared_error')\nprint(cv)\nprint(abs(cv.mean())**0.5)","e8224083":"from sklearn.linear_model import Lasso\nlasso = Lasso()\nlasso.fit(X_train, y_train)\npredictions = lasso.predict(X_test)","94413cd9":"cv = cross_val_score(lasso, X_train, y_train, cv=20, scoring = 'neg_mean_squared_error')\nprint(cv)\nprint(abs(cv.mean())**0.5)","887e8024":"from sklearn.linear_model import ElasticNet\nelasticnet = ElasticNet()\nelasticnet.fit(X_train, y_train)\npredictions = elasticnet.predict(X_test)","7bbd3634":"cv = cross_val_score(elasticnet, X_train, y_train, cv=20, scoring = 'neg_mean_squared_error')\nprint(cv)\nprint(abs(cv.mean())**0.5)","19829af9":"from sklearn.linear_model import Ridge\nridge = Ridge()\nridge.fit(X_train, y_train)\npredictions = ridge.predict(X_test)","8ecb5a04":"cv = cross_val_score(ridge, X_train, y_train, cv=20, scoring = 'neg_mean_squared_error')\nprint(cv)\nprint(abs(cv.mean())**0.5)","bc8f7f02":"from sklearn.ensemble import RandomForestRegressor\nrandom_forest = RandomForestRegressor()\nrandom_forest.fit(X_train, y_train)\npredictions = random_forest.predict(X_test)","b6f8bdfd":"cv = cross_val_score(random_forest, X_train, y_train, cv=20, scoring = 'neg_mean_squared_error')\nprint(cv)\nprint(abs(cv.mean())**0.5)","c6323215":"from xgboost import XGBRegressor\nxgb = XGBRegressor()\nxgb.fit(X_train, y_train)\npredictions = xgb.predict(X_test)","e1150be3":"cv = cross_val_score(xgb, X_train, y_train, cv=20, scoring = 'neg_mean_squared_error')\nprint(cv)\nprint(abs(cv.mean())**0.5)","71951c30":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n\nrandom_grid = {'bootstrap': [True, False],\n 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n 'max_features': ['auto', 'sqrt'],\n 'min_samples_leaf': [1, 2, 4],\n 'min_samples_split': [2, 5, 10],\n 'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]}\n\nrandom_cv = RandomizedSearchCV(estimator = random_forest, param_distributions = random_grid, n_iter = 100, cv = 10, verbose = 2, n_jobs = -1)\nrandom_cv.fit(X_train, y_train)","76c3fd45":"random_cv.best_params_ ","fc8b7e64":"param_grid = {'bootstrap': [True, False],\n'max_depth': [60,65,70,75,80],\n'min_samples_leaf':[1,2,3],\n'min_samples_split': [1,2,3],\n'n_estimators': [1750,1760,1770,1780,1790,1800,1810,1820,1830,1840,1850]}\ngrid_search = GridSearchCV(estimator = random_forest, param_grid = param_grid, cv = 3, n_jobs = -1, verbose = 2)\n\ngrid_search.fit(X_train,y_train)","b3d6f4a2":"grid_search.best_params_","2f34fafc":"tuned_random_forest = RandomForestRegressor(n_estimators = 1750, max_depth = 80, min_samples_leaf = 1, min_samples_split = 2)\nrandom_forest.fit(X_train, y_train)\npredictions = random_forest.predict(X_test)","3dbbeafd":"cv = cross_val_score(tuned_random_forest, X_train, y_train, cv=20, scoring = 'neg_mean_squared_error')\nprint(\"The Random Forest Regressor with tuned parameters has a RMSE of: \" + str(abs(cv.mean())**0.5))","11a09c25":"There we go!\n","a9d2235b":"# Feature Engineering\nFrom the data analysis above, you can tell that there are only 5 features, so we definitely need to do some feature engineering to create more features, which is important for training the model. ","f7c56b49":"# Data Cleaning\nLet's start off with looking at if there is any missing data. ","d5614bd6":"If we look at the Zip column, we realise that there are 4 digits in the front, and 2 letters at the back. We can split it such that we get 2 new features from the Zip column. ","64de1570":"To be honest, that's a small chunk of data being removed. However, since linear regressions are rather sensitive to outliers, it is best that we remove those. However, if we had more info about housing with the prices close to the outliers, we would definitely be able to train the model better.","94165fc2":"Great! We've got a slight idea of what parameters would optimize the model itself.","2243bc57":"Oh wow - there are a lot of outliers in this dataset. I would remove most of these data points to have a more accurate regression, but just for fun, let's see how much of the dataset we're removing.","576ab11b":"We can tell that there is a strong correlation between the price and area of the house itself, and a slightly weaker (but still strong) correlation between the price and rooms features and the price and area features. \nAight, let's start the data cleaning and feature engineering stages. ","a64c8d98":"# Ridge Regression Cross Validation\nLasso regression is a type of regression that only uses L2 regularisation.\n","045fad78":"# Random Forest Cross Validation\nFor this case, we'll be using Random Forest regression as it is a regression task.","76551e87":"We know that the back part of the address isn't important as it is just stating that the address is in Amsterdam. We replace the address column with a less redundant version instead :) ","e16337bf":"Looks great to me, don't you think?\n","282d9276":"And there we have it! The best parameters for the model itself. ","d685872c":"# The End\nThank you so much for reading my notebook! I appreciate it :) \n","31049ae6":"# Amsterdam House Prices\nI will be predicting the House Prices in the Amsterdam House Prices Predictions dataset with the regression models that I am familiar with in this notebook.\n\nTable of Contents:\n- Data Preprocessing\n- Data Cleaning\n- Feature Engineering\n- Optional: Suggestions\n- More Feature Engineering \n- Modeling (Train Test Split + Model Cross Validation)\n- Parameter Tuning & Final Model\n","63a0cc90":"# RandomizedSearchCV Tuning \nWe will start with a RandomizedSearchCV so that we are able to get a general direction for the parameters.","eadf2f10":"We can tell that there are outliers in some of the features - we might want to remove those outliers. Let's decide later on and look at the correlation of the features first.","b11ba5ac":"# Parameter Tuning\n- We first use a RandomizedSearchCV so that we are able to get a rough estimate for a range of parameters. \n- After getting the best parameters, we will use GridSearchCV to further tune the parameters itself before finally taking the best parameters for the model.","83733156":"# Final Model\nWe've come to the final step of the notebook itself. We will be implementing the best parameters into the model, and training the model with the training data. We will use cross validation again to get a RMSE value and see if there is any improvement to the model itself.","25c8cd3a":"# XGBoost Cross Validation\n","8e351312":"# Data Preprocessing\nOkay - first things first. Let's take a small look at the data.","a124ef00":"# Elastic Net Regression Cross Validation\nElastic Net Regression is a type of regression that uses a ratio of L1 and L2 regularisation. ","ae6f8ffa":"# Correlation of features\nLet's do a heatmap to see the correlation between these features. ","303f5db8":"# Optional: Suggestions\nThe above features are things that I thought by myself, but there are definitely some other features that you can consider in the model that I believe would make the model more accurate!\n- I personally did not think of using [Price per meter square](https:\/\/www.kaggle.com\/lennarthaupts\/prediction-based-on-the-10-closest-neighbors) but Lennart thought of it, which I thought was pretty impressive! \n- I also did not think of[ putting the districts into bins](https:\/\/www.kaggle.com\/laetitiafrost\/amsterdam-house-price-linreg-randomforest-knn) but Letitia thought of using that, which I thought was a really innovative idea as well. ","895b4c2b":"We drop the more obvious 'features' that we do not need as they're either an index to the dataset or features have been extracted from the dataset. ","99c80110":"There are missing data points - mainly in the price column. I wouldn't necessarily fill in the prices as it is the metric we are predicting, therefore we will be removing the rows with no price instead.","a57bec4b":"There are a few encoders that I considered using:\n- Label Encoding\n- One Hot Encoding\n- Ordinal Encoding\n\nOne Hot Encoding would not be effective if there were too many features and Ordinal Encoding would be useful if you had to preserve some order ofcategorical data but useless otherwise. Therefore, Label Encoding would be the best choice here. ","96752627":"# Linear Regression Cross Validation","5fea869b":"# Lasso Regression Cross Validation\nLasso regression is a type of regression that only uses L1 regularisation.\n","93308e12":"We can tell that there aren't a lot of features that are created here - but we can definitely create some features out of this - namely from the Address and Zip features. Let's look at the features at a deeper level! ","4611af8a":"Great! We now have a complete dataset. However, if you remember, we were looking at the outliers and considering removing it. Let's take a look at the boxplot first before we decide on anything! ","9673a55a":"# Train Test Split\nWe will split the dataset into two datasets, the train dataset and the test dataset. We will then use cross-validation with negative mean squared error as the scoring feature. We will then make the value positive and square root it to derive the Root Mean Squared Error, which is smaller. ","d75e0f4d":"This is definitely not enough as the addresses are too varied. I decided that I will take the street of the address itself as a feature instead. \nHowever, the separation is more complicated than it seems, so I have created a function that allows me to extract the street name from the address itself. ","76c37596":"Seems like we've got a slight improvement with the model itself! We can optimise it even further, but with the amount of time it took for GridSearchCV, it might not necessarily be a good idea. ","dcc98916":"From the different cross validation data, we can deduce that the Random Forest Regression model is the best model for this dataset. Of course, XGBoost is something else that we can also consider, since the RMSE differs by approximately 2000. We will continue with hyperparameter tuning using a random search before using GridSearchCV for parameter tuning. ","97d66738":"Let's do a correlation between our new features!","61736973":"# GridSearchCV \nNow, we will use GridSearchCV so that we are able to get a more specific set of parameters for the model itself.","d26e674c":"# Further Feature Engineering and Data Processing\nWe split the features into numerical and categorical features so that we are able to convert the categorical features into numerical ones, before training the model with it.","15e2efd6":"There is now a strong and negative correlation beteen the Zip numbers and the Latitude features!"}}