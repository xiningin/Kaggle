{"cell_type":{"d1bdb982":"code","b8cb533a":"code","f4f02b23":"code","4d6ff4df":"code","dec52883":"code","1d57afc6":"code","6f004708":"code","9b24d971":"code","35b60c0c":"code","530b680b":"code","c7c2b0be":"code","533ceeed":"code","5843f34e":"code","52a4aae3":"code","cd1ab36b":"code","a90eaf17":"code","6f86401e":"code","df97c75e":"code","7d2c6360":"code","48d82ff8":"code","a91a86d2":"code","c9c9a6a0":"code","1b38add0":"code","73a9f6d3":"code","4cd70b77":"code","56b6c6d0":"code","581b25f7":"code","ff1dc600":"code","c545249c":"code","0167b565":"code","9478a453":"code","8afb3949":"code","2efa50a7":"code","6e03454f":"code","c0f09d17":"code","06ce90a3":"code","f9023072":"code","e976d8d9":"code","f0c026f6":"code","ba20f56c":"code","ed85850f":"code","b739645c":"code","15488d8e":"code","8c44579d":"code","c58491ef":"code","948c335a":"code","5c4ef3c6":"code","fd4ce130":"code","b4ce3600":"code","9f63f6af":"code","46f9820b":"code","5fe89c3d":"code","bcb83f3f":"code","ddc99c86":"markdown","c3b12909":"markdown","ac089219":"markdown","eb6ed619":"markdown","7c3d109f":"markdown","f8c5a3e3":"markdown","010ccaea":"markdown","649b302f":"markdown","4bea03f1":"markdown","fa4dc3e9":"markdown","5bd796b9":"markdown","defffd03":"markdown","d3c1ca5a":"markdown","4b98c999":"markdown","f601c96b":"markdown","216e8fdd":"markdown","8de626f1":"markdown","ada6e7de":"markdown","e89b1052":"markdown","47407707":"markdown","90bf6efd":"markdown","62255c8a":"markdown","78debe13":"markdown","c90e9a1a":"markdown","b47c09aa":"markdown","d2ab3661":"markdown","b41fc4e2":"markdown","302b3b58":"markdown","3dcdb730":"markdown","0084195c":"markdown","a8d4bf58":"markdown","b5bbfc72":"markdown","3ef15aae":"markdown","45f2b546":"markdown","9758a67c":"markdown","b885c77f":"markdown","a746b954":"markdown"},"source":{"d1bdb982":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b8cb533a":"#import necessary modules\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nsns.set()","f4f02b23":"credit= pd.read_csv('\/kaggle\/input\/credit-risk\/original.csv')\ncredit.head()        ","4d6ff4df":"print(credit.shape)","dec52883":"credit.info()","1d57afc6":"credit.describe(include='all')","6f004708":"#lets replace this negative values with nan values\ncredit.loc[~(credit['age'] > 0), 'age']=np.nan","9b24d971":"unique_vals= {\n    k: credit[k].unique()\n    for k in credit.columns\n    \n}\n\nunique_vals","35b60c0c":"#drop clientid from dataset\ncredit= credit.drop('clientid', axis=1)","530b680b":"credit.isnull().sum()","c7c2b0be":"# 6 missing values in 2000 records is roughly 1.2% of total records. we will drop null values\ncredit= credit.dropna()\ncredit.shape","533ceeed":"credit['default']= credit['default'].astype('category')\ncredit['age']=credit['age'].astype('int')","5843f34e":"credit.describe()","52a4aae3":"credit.corr()","cd1ab36b":"credit.var()","a90eaf17":"credit['default'].value_counts()","6f86401e":"credit.groupby('default').mean()","df97c75e":"credit.groupby('age').mean()","7d2c6360":"plt.figure(figsize=(20,10))\ncredit.hist()\nplt.show()","48d82ff8":"fig, (ax1, ax2, ax3)= plt.subplots(1,3)\ncredit['age'].plot(kind='box', ax=ax1, figsize=(12,6))\ncredit['income'].plot(kind='box', ax=ax2, figsize=(12,6))\ncredit['loan'].plot(kind='box', ax=ax3, figsize=(12,6))\nplt.show()","a91a86d2":"sns.barplot(y='age', x='default', data=credit)\nplt.xlabel('Defaults')\nplt.ylabel('age of defaulters')\nplt.title('Average age of defaulters on Loan', fontsize=12)\nplt.show()","c9c9a6a0":"sns.pairplot(data=credit, hue='default',diag_kind='kde')","1b38add0":"# Find the mean and standard dev\nstd = credit['loan'].std()\nmean = credit['loan'].mean()\n# Calculate the cutoff\ncut_off = std * 3\nlower, upper = mean - cut_off, mean + cut_off\n# Trim the outliers\ntrimmed_df = credit[(credit['loan'] < upper) \\\n                           & (credit['loan'] > lower)]\ntrimmed_df.shape","73a9f6d3":"# The trimmed box plot\ntrimmed_df[['loan']].boxplot()\nplt.show()","4cd70b77":"#Split the independent and outcome variable\nX= credit.iloc[:,0:3]\ny=credit.iloc[:,3]\ny.value_counts()","56b6c6d0":"#lets split to training and test set for training the model and validating the model\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test= train_test_split(X, y, random_state=9999, stratify=y)\n#stratify is used since the target class distribution is imbalanced\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","581b25f7":"#lets perform scaling. all our features are numerical columns\n#it is important that we need to have our features to be in same scale.\n\nfrom sklearn.preprocessing import StandardScaler\n\nsc= StandardScaler()\nX_train= sc.fit_transform(X_train)\nX_test=sc.fit_transform(X_test)","ff1dc600":"from sklearn.linear_model import LogisticRegression\n\n#instantiate LogisticRegression model\nlogreg= LogisticRegression(solver='lbfgs')","c545249c":"#perform cross validation to ensure the model is good model\nfrom sklearn.model_selection import cross_val_score\n\ncv_scores= cross_val_score(logreg, X, y, cv=5)\n\n# Print the 5-fold cross-validation scores\nprint(cv_scores)\nprint(\"Average 5-Fold CV Score: {}\".format(np.mean(cv_scores)))","0167b565":"#Fit the linear regression model to training data\nlogreg.fit(X_train, y_train)\n\n# Predict the test set\ny_pred = logreg.predict(X_test)\ny_pred","9478a453":"# Making the confusion matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n\ncm = confusion_matrix(y_test,y_pred)\nacc_score = accuracy_score(y_test, y_pred)\n\nprint(f\"Accuracy = {acc_score*100:.2f}%\")\nprint(f\"Confusion matrix = \\n{cm}\")","8afb3949":"#Check Training and Test Set Accuracy\n\ntraining_accuracy= logreg.score(X_train, y_train)\ntest_accuracy= logreg.score(X_test, y_test)\n\nprint(f\"Training Set accuracy = {training_accuracy*100:.2f}%\")\nprint(f\"Test Set accuracy = {test_accuracy*100:.2f}%\")","2efa50a7":"# Complete classification report\nprint(classification_report(y_test,y_pred))","6e03454f":"# Coefficients of the model and its intercept\nprint(dict(zip(X.columns, abs(logreg.coef_[0]).round(2))))\nprint(logreg.intercept_)","c0f09d17":"from sklearn.feature_selection import RFE\nfrom sklearn.metrics import accuracy_score\n\n# Create the RFE with a LogisticRegression estimator and 2 features to select\nrfe = RFE(estimator=logreg, n_features_to_select=2, verbose=1)\n# Fits the eliminator to the data\nrfe.fit(X_train, y_train)\n# Print the features and their ranking (high = dropped early on)\nprint(dict(zip(X.columns, rfe.ranking_)))\n# Print the features that are not eliminated\nprint(X.columns[rfe.support_])\n# Calculates the test set accuracy\nacc = accuracy_score(y_test, rfe.predict(X_test))\nprint(\"{0:.1%} accuracy on test set.\".format(acc))","06ce90a3":"from sklearn.metrics import roc_curve, auc\n\n#compute predicted probabilities: y_pred_prob\ny_pred_prob= logreg.predict_proba(X_test)[:,1]\n\n#Generate ROC curve values: fpr, tpr, thresholds\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\n\n# Calculate the AUC\n\nroc_auc = auc(fpr, tpr)\nprint ('ROC AUC: %0.3f' % roc_auc )\n\n#Plot ROC curve\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr)\nplt.plot(fpr, tpr, label='ROC curve (area = %0.3f)' % roc_auc)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.legend(loc=\"lower right\")\nplt.show()","f9023072":"#instantiate RandomForestClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nrfc= RandomForestClassifier(n_estimators=10, max_depth=3)\n\n#Fit the RandomForest model to training data\nrfc.fit(X_train, y_train)\n\n# Predict the test set\ny_pred_rfc = rfc.predict(X_test)\ny_pred_rfc","e976d8d9":"# Making the confusion matrix\ncm_rfc = confusion_matrix(y_test,y_pred_rfc)\nacc_score_rfc = accuracy_score(y_test, y_pred_rfc)\n\nprint(f\"Accuracy = {acc_score_rfc*100:.2f}%\")\nprint(f\"Confusion matrix = \\n{cm_rfc}\")","f0c026f6":"#Check Training and Test Set Accuracy\n\ntraining_accuracy_rfc= rfc.score(X_train, y_train)\ntest_accuracy_rfc= rfc.score(X_test, y_test)\n\nprint(f\"Training Set accuracy = {training_accuracy_rfc*100:.2f}%\")\nprint(f\"Test Set accuracy = {test_accuracy_rfc*100:.2f}%\")","ba20f56c":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.metrics import make_scorer\n\n\n#lets get hyperparameters defined in our model\nrfc.get_params()","ed85850f":"param_grid= {\"max_depth\": [2, 4, 6, 8, 10],\n            \"max_leaf_nodes\": [2, 4, 6],\n            \"min_samples_split\":[2, 4, 6, 8],\n            \"n_estimators\": [10, 50, 100, 150]}\n\n#create scoring parameter as accuracy_score. There are some default scoring methods defined. however if we want to create we can create using make_Scorer\n#Here i am using Accuracy score as scorring method. we can also use recall_score etc\nscorer= make_scorer(accuracy_score)","b739645c":"rcv =RandomizedSearchCV(estimator=rfc,param_distributions=param_grid,n_iter=10,cv=5,scoring=scorer)\nrcv.fit(X, y)\n\n# print the mean test scores:\nprint('The accuracy for each run was: {}.'.format(rcv.cv_results_['mean_test_score']))\n# print the best model score:\nprint('The best accuracy for a single model was: {}'.format(rcv.best_params_))","15488d8e":"#Use the best params and reinstantiate RandomForestClassifier model\nmodel=RandomForestClassifier(n_estimators= 50, min_samples_split= 2, max_leaf_nodes= 6, max_depth= 10)\n\n#fit the training set to model\nmodel.fit(X_train, y_train)\n\n# Making the confusion matrix\ncm_rfc2 = confusion_matrix(y_test,model.predict(X_test))\nacc_score_rfc2 = accuracy_score(y_test, model.predict(X_test))\n\nprint(f\"Accuracy = {acc_score_rfc2*100:.2f}%\")\nprint(f\"Confusion matrix = \\n{cm_rfc2}\")","8c44579d":"#Check Training and Test Set Accuracy\n\ntraining_accuracy_rfc2= model.score(X_train, y_train)\ntest_accuracy_rfc2= model.score(X_test, y_test)\n\nprint(f\"Training Set accuracy = {training_accuracy_rfc2*100:.2f}%\")\nprint(f\"Test Set accuracy = {test_accuracy_rfc2*100:.2f}%\")","c58491ef":"from sklearn.metrics import roc_curve, auc\n\n#compute predicted probabilities: y_pred_prob\ny_pred_prob_rfc= model.predict_proba(X_test)[:,1]\n\n#Generate ROC curve values: fpr, tpr, thresholds\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob_rfc)\n\n# Calculate the AUC\n\nroc_auc = auc(fpr, tpr)\nprint ('ROC AUC: %0.3f' % roc_auc )\n\n#Plot ROC curve\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr)\nplt.plot(fpr, tpr, label='ROC curve (area = %0.3f)' % roc_auc)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve of RandomForest Model')\nplt.legend(loc=\"lower right\")\nplt.show()","948c335a":"#Instantiate Decision Tree Classifier\nfrom sklearn.tree import DecisionTreeClassifier\n\ndt= DecisionTreeClassifier(max_depth=4, random_state=9999)\n\ndt.fit(X_train, y_train)\n\n#fit the training set to model\ndt.fit(X_train, y_train)","5c4ef3c6":"# Making the confusion matrix\ncm_dt = confusion_matrix(y_test,dt.predict(X_test))\nacc_score_dt = accuracy_score(y_test, dt.predict(X_test))\n\nprint(f\"Accuracy = {acc_score_dt*100:.2f}%\")\nprint(f\"Confusion matrix = \\n{cm_dt}\")","fd4ce130":"#Check Training and Test Set Accuracy\n\ntraining_accuracy_dt= dt.score(X_train, y_train)\ntest_accuracy_dt= dt.score(X_test, y_test)\n\nprint(f\"Training Set accuracy = {training_accuracy_dt*100:.2f}%\")\nprint(f\"Test Set accuracy = {test_accuracy_dt*100:.2f}%\")","b4ce3600":"# Complete classification report\nprint(classification_report(y_test,dt.predict(X_test)))","9f63f6af":"#compute predicted probabilities: y_pred_prob\ny_pred_prob_dt= dt.predict_proba(X_test)[:,1]\n\n#Generate ROC curve values: fpr, tpr, thresholds\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob_dt)\n\n# Calculate the AUC\n\nroc_auc = auc(fpr, tpr)\nprint ('ROC AUC: %0.3f' % roc_auc )\n\n#Plot ROC curve\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr)\nplt.plot(fpr, tpr, label='ROC curve (area = %0.3f)' % roc_auc)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve of Decision Tree Model')\nplt.legend(loc=\"lower right\")\nplt.show()","46f9820b":"#lets draw decision tree\n\nfrom sklearn import tree\n\ndecision_tree= tree.export_graphviz(dt, out_file='tree.dot', feature_names=credit.iloc[:, :3].columns, \n                                    max_depth=4, filled=True, rounded=True)","5fe89c3d":"!dot -Tpng tree.dot -o tree.png","bcb83f3f":"image= plt.imread('tree.png')\nplt.figure(figsize=(20, 20))\nplt.imshow(image)","ddc99c86":"Based on CV score, We have our benchmark accuracy score for our Logistic Regression model. if our test set accuracy is between 90-96, we can safely assume that our model is best model","c3b12909":"#### Model Validation","ac089219":"### Model Building- Decision Tree Classifier","eb6ed619":"#### Model Validation- Logistic Regression","7c3d109f":"### Model Building- RandomForestClassifier","f8c5a3e3":"We couldnt find any pairwise relationships between features. ","010ccaea":"as stated above, variance is high in income and loan.","649b302f":"The AUC for both the test and train samples when run on my logistic regression demonstrates relatively strong power of separation between positive and negative occurences (repay - 1, default - 0)","4bea03f1":"Out of all people defaulted to loan, most of them are above age 40. Because of their extended lifetime, People of age around 20-30 are very keen on repaying loan","fa4dc3e9":"#### Model Validation","5bd796b9":"Though the Test set accuracy is lower than base model, Training set accuracy subsequently increases with hyper parameter tuning","defffd03":"Training and Test Set accuracy are high and they are almost same. Thus, there is no chance of Overfitting and Underfitting","d3c1ca5a":"#### Model Estimation","4b98c999":"#### Exploratory Data Analytics","f601c96b":"#### missing values","216e8fdd":"## Conclusion: \n    By all means, Decision Tree performs better than LogisticRegression and RandomForest Classifier models","8de626f1":"Target labels have uneven distribution; test and training sets might not be representative samples of our data and could bias the model we are trying to train. We will use stratified Sampling to split up the dataset according to the y dataset","ada6e7de":"Model underfits on test set. we will perform hyperparameter tuning to get best params to fit our model","e89b1052":"1. Clientid has unique values for each observations. keeping it for modeling will make our model complex. we will ignore this column\n2. income, age, loan looks like numerical columns\n3. default have only two values. The objective is to create model if the customer is default or not. This column is our output variable. Since we know the Target value and target variable is discrete. We need to build a Supervised Learning model\n4. Convert the default column to category","47407707":"None of feature coefficients are close to zero. So, There is no need to drop any of these features.\n\nHowever, we can perform RFE to understand if the accuracy is improved by dropping any features ","90bf6efd":"looks like there are outliers present in loan","62255c8a":"youngsters will repay their loan soon. \nbecause of their repayment power, they are offered with higher loans","78debe13":"## Comparing with other ML models\n\nWe will build our data with other Classifier models and compare which model best fit to dataset","c90e9a1a":"### Model Building- Logistic Regression","b47c09aa":"##### Understanding the dataset","d2ab3661":"#### Model Estimation","b41fc4e2":"#### Model Evaluation:\n\nEvaluate model performance by plotting an ROC curve","302b3b58":"income and loan have high variance between them compared to age. we need to scale them before we fit our model","3dcdb730":"##### Hyperparameter Tuning","0084195c":"There is no statistically differnce in removing outlier value from dataframe","a8d4bf58":"# Credit Risk \n\n## Objective:\n\nThe objective is to build machine learning models based on given dataset to predict whether a particular customer will repay the loan or not. \n\n### Applicability:\n* Target Label is known before Supervised Learning Models could build upon dataset.\n* Target classes are discrete so any Classifier model can be built\n* Here, we considered traditional Classifer models- Logistic Regression, Decision Tree Classifer, RandomForestClassifier\n    \n \n","b5bbfc72":"age cannot be negative. some of the values in age column is negative. we need to make this negative values to either '0' or 'NaN'","3ef15aae":"We will use all the features of original dataframe to build our base model","45f2b546":"Dropping features doesnot improve our model accuracy","9758a67c":"##### Visual EDA","b885c77f":"So, age is important feature for outcome variable","a746b954":"We have 18 hyperparameters present in rfc model. We can use most important hyperparameter which affects model accuracy.\nWe will tune four parameters out of 18 parameters\n        * max_depth\n        * max_leaf_nodes\n        * min_samples_split\n        * n_estimators"}}