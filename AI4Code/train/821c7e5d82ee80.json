{"cell_type":{"95861242":"code","67f4ed53":"code","0e6a4cbd":"code","200f096f":"code","38dfdbc4":"code","a6c77633":"code","368a21ac":"code","f72b7360":"code","6870eb80":"code","6d0994c5":"code","7d5b9f84":"code","26cc4d81":"code","6dbd0fb3":"code","f2aa1b0d":"code","c2789096":"code","c02db660":"code","a4423066":"code","499d10cf":"code","3f972d12":"code","8e9be377":"code","c6c8fdd2":"code","5005729f":"code","f283fcfc":"code","59637db1":"code","a1b4f209":"code","85c4f760":"code","f9a3c5ba":"code","7a38fa8c":"code","b040fb57":"code","36818b70":"code","c3c91bba":"code","a78ddeee":"code","506eb9c1":"code","b54c64e3":"code","93cd25fa":"code","1362c142":"code","63490c1d":"code","e6c88348":"code","fd327766":"code","b57ebba2":"code","ee71a350":"code","62e968b3":"code","f2ef5a93":"code","6413267f":"markdown","efab4df8":"markdown","147dd053":"markdown","5a6a6689":"markdown","2f637fa6":"markdown","ddcb7907":"markdown","1883eadb":"markdown","d85a2dee":"markdown","4b6849c3":"markdown","e3756d76":"markdown","78f08571":"markdown","2779d7e0":"markdown","3780a5a5":"markdown","28f42bd7":"markdown","77fef8d5":"markdown"},"source":{"95861242":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nimport seaborn as sns\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.feature_selection import SelectKBest, f_regression\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.svm import SVR\n\nimport statsmodels.api as sm\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max.columns', None)","67f4ed53":"df = pd.read_csv('..\/input\/insurance\/insurance.csv')\ndf","0e6a4cbd":"df.info()","200f096f":"df.isnull().sum()","38dfdbc4":"df.describe()","a6c77633":"df.head()","368a21ac":"sns.distplot(df['age'])","f72b7360":"sns.distplot(df['bmi'])","6870eb80":"sns.distplot(df['children'])","6d0994c5":"sns.distplot(df['charges'])","7d5b9f84":"sns.barplot(x = 'sex', y = 'charges', data = df)","26cc4d81":"sns.barplot(x = 'region', y = 'charges', data = df)","6dbd0fb3":"sns.barplot(x = 'smoker', y = 'charges', data = df)","f2aa1b0d":"sns.countplot(x = 'smoker', data = df)","c2789096":"sns.countplot(x = 'sex', data = df)","c02db660":"sns.countplot(x = 'region', data = df)","a4423066":"sns.boxplot(x = 'smoker', y = 'bmi', hue = 'sex', data = df)","499d10cf":"sns.boxplot(x = 'smoker', y = 'age', hue = 'sex', data = df)","3f972d12":"sns.boxplot(x = 'smoker', y = 'charges', hue = 'sex',data = df)","8e9be377":"age_groups = []\nfor i in df['age']:\n    if i <= 30:\n        age_groups.append('0-30')\n    if i > 30 and i <= 40:\n        age_groups.append('30-40')\n    if i > 40 and i <= 50:\n        age_groups.append('40-50')\n    if i > 50 and i <= 60:\n        age_groups.append('50-60')\n    if i > 60:\n        age_groups.append('60+')\n        \ndf['age_group'] = age_groups","c6c8fdd2":"sns.countplot(x = 'age_group', data = df)","5005729f":"bmi_groups = []\nfor i in df['bmi']:\n    if i <= 10:\n       bmi_groups.append('5-10')\n    if i > 10 and i <= 15:\n        bmi_groups.append('10-15')\n    if i > 15 and i <= 20:\n        bmi_groups.append('15-20')\n    if i > 20 and i <= 25:\n        bmi_groups.append('20-25')\n    if i > 25 and i <= 30:\n        bmi_groups.append('25-30')\n    if i > 30 and i <= 35:\n        bmi_groups.append('30-35')\n    if i > 35:\n        bmi_groups.append('35+')\n        \ndf['bmi_group'] = bmi_groups","f283fcfc":"sns.countplot(x = 'bmi_group', data = df)","59637db1":"children_groups = []\nfor i in df['children']:\n    if i <= 1:\n       children_groups.append('0')\n    if i > 1 and i <= 2:\n        children_groups.append('1-2')\n    if i > 2 and i <= 3:\n        children_groups.append('2-3')\n    if i > 3 and i <= 4:\n        children_groups.append('3-4')\n    if i > 4:\n        children_groups.append('4+')\n        \ndf['children_group'] = children_groups","a1b4f209":"sns.countplot(x = 'children_group', data = df)","85c4f760":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n","f9a3c5ba":"df['sex'] = le.fit_transform(df['sex'])\ndf['smoker'] = le.fit_transform(df['smoker'])","7a38fa8c":"df = pd.get_dummies(df, columns = ['age_group'])\ndf = pd.get_dummies(df, columns = ['bmi_group'])\ndf = pd.get_dummies(df, columns = ['children_group'])\ndf = pd.get_dummies(df, columns = ['region'])\n","b040fb57":"df.corr()['charges'].sort_values()","36818b70":"df = df.drop(['age', 'bmi', 'children'], axis = 1)","c3c91bba":"mm = MinMaxScaler()\ndf_mm = mm.fit_transform(df)\ndf_mm = pd.DataFrame(df_mm, columns = df.columns)","a78ddeee":"std = StandardScaler()\ndf_std = std.fit_transform(df)\ndf_std = pd.DataFrame(df_std, columns = df.columns)","506eb9c1":"df_std.head()","b54c64e3":"X = df_std.drop(['charges'], axis = 1)\ny = df_std.charges","93cd25fa":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","1362c142":"regressor = sm.OLS(y_train, X_train).fit()\nprint(regressor.summary())\n\nX_train_dropped = X_train.copy()","63490c1d":"while True:\n    if max(regressor.pvalues) > 0.05:\n        drop_variable = regressor.pvalues[regressor.pvalues == max(regressor.pvalues)]\n        print(\"Dropping \" + drop_variable.index[0] + \" and running regression again because pvalue is: \" + str(drop_variable[0]))\n        X_train_dropped = X_train_dropped.drop(columns = [drop_variable.index[0]])\n        regressor = sm.OLS(y_train, X_train_dropped).fit()\n    else:\n        print(\"All p values less than 0.05\")\n        break\n","e6c88348":"print(regressor.summary())\n","fd327766":"X_train_dropped.shape","b57ebba2":"column_names = df.drop(columns = ['charges']).columns\n\nno_of_features = []\nr_squared_train = []\nr_squared_test = []\n\n# Look at X_train_dropped shape\nfor k in range(1, 13):\n    selector = SelectKBest(f_regression, k = k)\n    X_train_transformed = selector.fit_transform(X_train, y_train)\n    X_test_transformed = selector.transform(X_test)\n    regressor = LinearRegression()\n    regressor.fit(X_train_transformed, y_train)\n    no_of_features.append(k)\n    r_squared_train.append(regressor.score(X_train_transformed, y_train))\n    r_squared_test.append(regressor.score(X_test_transformed, y_test))\n    \nsns.lineplot(x = no_of_features, y = r_squared_train, legend = 'full')\nsns.lineplot(x = no_of_features, y = r_squared_test, legend = 'full')","ee71a350":"# Best score k = 8, look at orange line\nselector = SelectKBest(f_regression, k = 8)\nX_train_transformed = selector.fit_transform(X_train, y_train)\nX_test_transformed = selector.transform(X_test)\ncolumn_names[selector.get_support()]\n","62e968b3":"def regression_model(model):\n    \"\"\"\n    Will fit the regression model passed and will return the regressor object and the score\n    \"\"\"\n    regressor = model\n    regressor.fit(X_train_transformed, y_train)\n    score = regressor.score(X_test_transformed, y_test)\n    return regressor, score","f2ef5a93":"model_performance = pd.DataFrame(columns = [\"Features\", \"Model\", \"Score\"])\n\nmodels_to_evaluate = [LinearRegression(), Ridge(), Lasso(), SVR(), RandomForestRegressor(), MLPRegressor()]\n\nfor model in models_to_evaluate:\n    regressor, score = regression_model(model)\n    model_performance = model_performance.append({\"Features\": \"Linear\",\"Model\": model, \"Score\": round(score, 2)}, ignore_index=True)\n\nmodel_performance","6413267f":"# Preprocessing\n## Grouping data\n### Age groups\n\n* Under 30s\n* 30 - 40\n* 40 - 50\n* 50 - 60\n* Over 60s\n\n### bmi groups\n\n* 5 - 10\n* 10 - 15\n* 15 - 20\n* 20 - 25\n* 25 - 30\n* 30 - 35\n* 35 +\n\n### Children groups\n\n* 0 \n* 1 - 2\n* 2 - 3\n* 3 - 4\n* 4 +\n","efab4df8":"# EDA\n### Distplot\nWe look at the destribution","147dd053":"### Uses SelectKBest","5a6a6689":"Smokers spend a lot more money","2f637fa6":"Feature distribution is not normal","ddcb7907":"### The fuction removes features with high p-value","1883eadb":"### Boxplot\nWe look at outliers and insights","d85a2dee":"### Countplot","4b6849c3":"# Import Libs","e3756d76":"# Data loading and overview","78f08571":"### Train split test","2779d7e0":"We uses scalling","3780a5a5":"# Thanks for watching!\n## If you liked notebook then upvoted it or write your opinion","28f42bd7":"### Barplot","77fef8d5":"# Modeling"}}