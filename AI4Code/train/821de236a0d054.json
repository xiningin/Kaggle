{"cell_type":{"e7715b1c":"code","6581037a":"markdown","52ac111a":"markdown","b9db17be":"markdown","c4dd0efb":"markdown"},"source":{"e7715b1c":"# import the necessary packages\n%matplotlib inline\n\nfrom matplotlib import pyplot as plt\n\nfrom imutils import contours\nfrom skimage import measure\nimport numpy as np\nimport imutils\nimport cv2\n\n# load the image, convert it to grayscale, and blur it\nimage = cv2.imread(\"..\/input\/report-070.ppm.jpg\")\nprint(\"Original Image\")\nplt.imshow(image)\nplt.show()\n\nprint(\"Grayscale Image\")\ngray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\nplt.imshow(gray)\nplt.show()\n\nblurred = cv2.GaussianBlur(gray, (11, 11), 0)\nprint(\"Blurred Image\")\nplt.imshow(blurred)\nplt.show()\n\n# threshold the image to reveal redacted regions in the image\nthresh = cv2.threshold(blurred, 100, 255, cv2.THRESH_BINARY)[1]\nthresh = cv2.erode(thresh, None, iterations=2)\nthresh = cv2.dilate(thresh, None, iterations=4)\n\nprint(\"Redactions highlighted\")\nplt.imshow(thresh)\nplt.show()\n\nlabels = measure.label(thresh, neighbors=8, background=0)\nmask = np.zeros(thresh.shape, dtype=\"uint8\")\n\ntotalRedactedArea = 0\n\n# loop over the unique components\nfor label in np.unique(labels):\n    # if this is the background label, ignore it\n    if label != 0:\n        continue\n\n    # otherwise, construct the label mask and count the\n    # number of pixels\n    labelMask = np.zeros(thresh.shape, dtype=\"uint8\")\n    labelMask[labels == label] = 255\n    numPixels = cv2.countNonZero(labelMask)\n    # print(numPixels)\n    # if the number of pixels in the component is sufficiently\n    # large, then add it to our mask of \"large blobs\"\n    if numPixels > 300:\n        mask = cv2.add(mask, labelMask)\n\n# find the contours in the mask, then sort them from left to right\ncnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,\n                        cv2.CHAIN_APPROX_SIMPLE)\ncnts = imutils.grab_contours(cnts)\ncnts = contours.sort_contours(cnts)[0]\n\n# loop over the contours\nfor (i, c) in enumerate(cnts):\n    # draw the bright spot on the image\n    (x, y, w, h) = cv2.boundingRect(c)\n    print(\"Redacted Zone:\", i, \"Area: \", w*h)\n    totalRedactedArea = totalRedactedArea + w*h\n    cv2.rectangle(image, (x,y), (x+w,y+h), (0,0,255), 5)\n    cv2.putText(image, \"#{}\".format(w*h), (x, y - 15),\n                cv2.FONT_HERSHEY_SIMPLEX, 0.45, (0, 0, 255), 2)\n\n\n\n(height, width, channels) = image.shape\ncX = 210\ncY = 210\n\ncv2.rectangle(image, (cX,cY), (width-cX,height-cY), (0,255,0), 5)\n# show the output image\nprint(\"Final Result\")\nplt.imshow(image)\nplt.show()\n\ntotalArea = (width-cX) * (height-cY)\npctRedacted = (totalRedactedArea \/ totalArea)*100\n\nprint(\"Summary:\")\nprint(\"Total Area of Document:\", totalArea)\nprint(\"Total redacted Area:\", totalRedactedArea)\nprint(\"%Redaction:\",pctRedacted)","6581037a":"**Conclusion**: Some pages are heavily redacted. Especially towards the end of the report. But the overall redaction % is 6.05% and it surprisingly low when compared the attention it is getting.","52ac111a":"Wanted to find out how much of Muller's report is redacted. \n\nBuilt using openCV and scikit image. Code identifies the redacted blocks of text using grayscale conversion and applying threshold for brightness. Redacted areas pop out as dark regions after erode \/ dilate operations. \n\nThis notebook is for a sample page : Page 70","b9db17be":"Results across all pages:\nPage\tRedaction %\n0\t0.03%\n1\t0.00%\n2\t0.00%\n3\t1.41%\n4\t0.00%\n5\t0.00%\n6\t4.67%\n7\t0.00%\n8\t0.00%\n9\t0.00%\n10\t0.00%\n11\t11.25%\n12\t5.52%\n13\t0.00%\n14\t0.00%\n15\t0.00%\n16\t14.19%\n17\t0.00%\n18\t0.00%\n19\t0.73%\n20\t0.00%\n21\t5.80%\n22\t26.27%\n23\t47.68%\n24\t52.85%\n25\t59.45%\n26\t47.91%\n27\t62.80%\n28\t38.93%\n29\t24.36%\n30\t54.32%\n31\t42.77%\n32\t1.78%\n33\t25.52%\n34\t21.12%\n35\t23.34%\n36\t7.20%\n37\t73.25%\n38\t26.03%\n39\t27.63%\n40\t28.89%\n41\t8.18%\n42\t11.94%\n43\t6.89%\n44\t9.08%\n45\t10.90%\n46\t41.19%\n47\t18.54%\n48\t4.53%\n49\t1.15%\n50\t2.79%\n51\t9.40%\n52\t3.26%\n53\t13.57%\n54\t15.18%\n55\t16.44%\n56\t7.20%\n57\t16.37%\n58\t33.21%\n59\t28.67%\n60\t44.89%\n61\t31.83%\n62\t44.62%\n63\t44.23%\n64\t54.78%\n65\t29.82%\n66\t30.24%\n67\t0.28%\n68\t0.00%\n69\t0.00%\n70\t1.42%\n71\t0.00%\n72\t8.16%\n73\t0.00%\n74\t3.51%\n75\t1.20%\n76\t1.05%\n77\t0.57%\n78\t0.00%\n79\t1.36%\n80\t0.00%\n81\t0.00%\n82\t0.45%\n83\t0.43%\n84\t0.00%\n85\t0.00%\n86\t0.00%\n87\t0.00%\n88\t0.00%\n89\t0.57%\n90\t8.57%\n91\t0.00%\n92\t3.85%\n93\t16.09%\n94\t0.00%\n95\t0.50%\n96\t0.00%\n97\t0.66%\n98\t28.03%\n99\t0.00%\n100\t9.06%\n101\t3.79%\n102\t0.77%\n103\t9.87%\n104\t4.31%\n105\t7.61%\n106\t0.53%\n107\t3.79%\n108\t26.01%\n109\t7.63%\n110\t5.79%\n111\t0.51%\n112\t0.00%\n113\t0.00%\n114\t0.00%\n115\t0.00%\n116\t6.34%\n117\t0.99%\n118\t20.51%\n119\t3.16%\n120\t0.55%\n121\t6.82%\n122\t0.00%\n123\t1.71%\n124\t24.78%\n125\t10.82%\n126\t0.60%\n127\t20.20%\n128\t15.32%\n129\t5.98%\n130\t0.60%\n131\t0.00%\n132\t0.00%\n133\t0.44%\n134\t0.00%\n135\t0.00%\n136\t0.00%\n137\t6.35%\n138\t0.00%\n139\t0.00%\n140\t0.00%\n141\t1.13%\n142\t0.01%\n143\t5.67%\n144\t5.64%\n145\t0.54%\n146\t2.36%\n147\t16.72%\n148\t0.00%\n149\t1.23%\n150\t30.58%\n151\t3.08%\n152\t0.00%\n153\t4.35%\n154\t4.46%\n155\t23.50%\n156\t26.84%\n157\t6.91%\n158\t10.47%\n159\t5.79%\n160\t13.71%\n161\t27.13%\n162\t8.16%\n163\t0.42%\n164\t0.00%\n165\t0.00%\n166\t0.00%\n167\t0.00%\n168\t0.56%\n169\t0.00%\n170\t2.26%\n171\t1.11%\n172\t5.31%\n173\t21.05%\n174\t10.19%\n175\t0.90%\n176\t0.42%\n177\t1.74%\n178\t0.00%\n179\t0.89%\n180\t0.00%\n181\t4.85%\n182\t0.00%\n183\t34.87%\n184\t68.21%\n185\t64.84%\n186\t50.14%\n187\t3.97%\n188\t0.00%\n189\t0.00%\n190\t10.60%\n191\t0.83%\n192\t0.00%\n193\t0.00%\n194\t0.00%\n195\t22.13%\n196\t57.06%\n197\t48.10%\n198\t23.50%\n199\t0.00%\n200\t0.00%\n201\t23.39%\n202\t0.00%\n203\t20.29%\n204\t52.54%\n205\t0.00%\n206\t47.18%\n207\t0.04%\n208\t0.00%\n209\t0.00%\n210\t0.70%\n211\t0.00%\n212\t0.00%\n213\t0.00%\n214\t0.59%\n215\t0.00%\n216\t0.00%\n217\t4.93%\n218\t0.00%\n219\t0.00%\n220\t0.00%\n221\t0.00%\n222\t0.00%\n223\t0.00%\n224\t4.70%\n225\t0.00%\n226\t0.29%\n227\t0.00%\n228\t6.03%\n229\t6.73%\n230\t0.00%\n231\t0.00%\n232\t0.00%\n233\t0.00%\n234\t0.00%\n235\t0.00%\n236\t0.00%\n237\t0.00%\n238\t0.00%\n239\t0.00%\n240\t0.00%\n241\t0.00%\n242\t0.00%\n243\t0.00%\n244\t0.00%\n245\t0.00%\n246\t0.00%\n247\t0.00%\n248\t0.00%\n249\t0.00%\n250\t0.00%\n251\t0.00%\n252\t0.00%\n253\t0.00%\n254\t0.00%\n255\t0.00%\n256\t0.00%\n257\t0.83%\n258\t0.00%\n259\t0.00%\n260\t0.00%\n261\t0.00%\n262\t0.00%\n263\t0.35%\n264\t0.00%\n265\t0.00%\n266\t0.00%\n267\t0.00%\n268\t0.00%\n269\t0.00%\n270\t0.00%\n271\t0.00%\n272\t0.00%\n273\t0.00%\n274\t0.00%\n275\t0.00%\n276\t0.00%\n277\t0.00%\n278\t0.00%\n279\t0.00%\n280\t0.00%\n281\t0.00%\n282\t0.00%\n283\t0.00%\n284\t0.00%\n285\t0.00%\n286\t0.00%\n287\t0.00%\n288\t1.45%\n289\t0.00%\n290\t0.00%\n291\t4.50%\n292\t0.00%\n293\t0.00%\n294\t0.00%\n295\t0.00%\n296\t0.00%\n297\t0.00%\n298\t0.00%\n299\t0.00%\n300\t0.00%\n301\t0.00%\n302\t4.42%\n303\t0.00%\n304\t0.00%\n305\t0.00%\n306\t0.00%\n307\t0.00%\n308\t4.83%\n309\t0.00%\n310\t0.00%\n311\t0.00%\n312\t0.00%\n313\t0.00%\n314\t0.00%\n315\t0.00%\n316\t1.43%\n317\t0.00%\n318\t0.00%\n319\t0.00%\n320\t0.00%\n321\t0.00%\n322\t0.00%\n323\t0.00%\n324\t0.00%\n325\t0.00%\n326\t0.00%\n327\t0.00%\n328\t0.00%\n329\t0.00%\n330\t0.00%\n331\t3.59%\n332\t0.00%\n333\t0.00%\n334\t0.00%\n335\t0.00%\n336\t0.00%\n337\t0.00%\n338\t0.00%\n339\t26.01%\n340\t50.58%\n341\t57.02%\n342\t0.16%\n343\t6.63%\n344\t33.40%\n345\t0.00%\n346\t0.00%\n347\t0.00%\n348\t0.00%\n349\t0.00%\n350\t0.00%\n351\t0.00%\n352\t0.00%\n353\t0.00%\n354\t0.00%\n355\t0.00%\n356\t0.00%\n357\t1.89%\n358\t3.07%\n359\t0.00%\n360\t0.00%\n361\t0.00%\n362\t7.78%\n363\t0.00%\n364\t0.00%\n365\t0.00%\n366\t0.00%\n367\t0.00%\n368\t0.00%\n369\t0.00%\n370\t0.00%\n371\t0.00%\n372\t0.00%\n373\t0.00%\n374\t0.00%\n375\t0.00%\n376\t0.00%\n377\t0.00%\n378\t0.00%\n379\t0.00%\n380\t0.00%\n381\t0.00%\n382\t0.00%\n383\t0.00%\n384\t0.00%\n385\t0.00%\n386\t0.00%\n387\t0.00%\n388\t0.00%\n389\t0.00%\n390\t0.00%\n391\t0.00%\n392\t0.00%\n393\t0.00%\n394\t0.81%\n395\t0.00%\n396\t0.00%\n397\t0.00%\n398\t0.71%\n399\t0.00%\n400\t0.00%\n401\t0.00%\n402\t5.97%\n403\t0.00%\n404\t4.18%\n405\t0.00%\n406\t1.19%\n407\t0.00%\n408\t0.00%\n409\t3.61%\n410\t0.00%\n411\t0.00%\n412\t0.00%\n413\t0.00%\n414\t0.75%\n415\t0.00%\n416\t0.00%\n417\t9.59%\n418\t0.00%\n419\t0.00%\n420\t0.00%\n421\t0.00%\n422\t0.00%\n423\t0.00%\n424\t0.00%\n425\t0.00%\n426\t0.00%\n427\t0.00%\n428\t0.00%\n429\t0.00%\n430\t0.00%\n431\t0.00%\n432\t0.00%\n433\t0.00%\n434\t0.00%\n435\t0.00%\n436\t0.00%\n437\t0.00%\n438\t3.71%\n439\t0.00%\n440\t0.77%\n441\t0.00%\n442\t0.00%\n443\t2.40%\n444\t19.39%\n445\t28.66%\n446\t51.31%\n447\t15.56%![image.png](attachment:image.png)\n\n\n","c4dd0efb":"Credits: Logic is similar but inverse of the sample from here - \nhttps:\/\/www.pyimagesearch.com\/2016\/10\/31\/detecting-multiple-bright-spots-in-an-image-with-python-and-opencv\/"}}