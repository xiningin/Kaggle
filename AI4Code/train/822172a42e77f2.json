{"cell_type":{"ad8f0c5e":"code","7057de21":"code","cb818c2c":"code","d9d8b394":"code","8826de8a":"code","401f0bac":"code","4743f07b":"code","3cf7f540":"code","59f57ae6":"code","4a52182c":"code","5ec27375":"code","a6a7fbaf":"code","6a5f752b":"code","6da166bb":"code","8de5396d":"code","5c3c05db":"code","af40b799":"code","c9e722b0":"code","c61702cd":"code","63c1cf0e":"code","9123d71e":"code","6c0f8494":"code","eee2d43a":"markdown","c2c12a50":"markdown","bd34439b":"markdown","0e922d6c":"markdown","3024682e":"markdown"},"source":{"ad8f0c5e":"import tensorflow as tf\nfrom tensorflow import keras\nimport sklearn.model_selection as ms\nimport sklearn.preprocessing as pp\nimport sklearn.tree as tree\nimport sklearn.ensemble as ensemble\n\nimport numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","7057de21":"data = pd.read_csv(r'..\/input\/video-games-rating-by-esrb\/Video_games_esrb_rating.csv')\ndata.head()","cb818c2c":"test_data = pd.read_csv(r'..\/input\/video-games-rating-by-esrb\/test_esrb.csv')\ntest_data.head()","d9d8b394":"data.info()","8826de8a":"X = data.copy()\nX.drop(['title', 'esrb_rating'], axis=1, inplace=True)\n\ny = data['esrb_rating'].copy()\ny","401f0bac":"X_test = test_data.copy()\nX_test.drop(['title', 'esrb_rating'], axis=1, inplace=True)\n\ny_test = test_data['esrb_rating'].copy()\ny_test","4743f07b":"y_total = y.append(y_test, ignore_index=True)\ny_total","3cf7f540":"y_total.unique()","59f57ae6":"y_encoder = pp.LabelEncoder()\ny_transform = y_encoder.fit_transform(y_total)\ny_transform","4a52182c":"y = y_transform[:1895]\ny_test = y_transform[1895:]\n\nprint(len(y))\nprint(len(y_test))","5ec27375":"# checking that values in all the columns are binary\nfor col in X.columns:\n    print(col)\n    print(X[col].unique())\n    print()","a6a7fbaf":"# checking that values in all the columns are binary\nfor col in X_test.columns:\n    print(col)\n    print(X_test[col].unique())\n    print()","6a5f752b":"X_train, X_validation, y_train, y_validation = ms.train_test_split(X, y, random_state=42, train_size=0.8)","6da166bb":"X_input_shape = X_train.shape[1:]\nX_input_shape","8de5396d":"base_model = keras.models.Sequential([\n                    keras.layers.Input(shape= X_input_shape, name='input_layer'),\n                    keras.layers.Dense(100, activation='relu'),\n                    keras.layers.Dense(50, activation='relu'),\n                    keras.layers.Dense(25, activation='relu'),\n                    keras.layers.Dense(4, activation='softmax', name='output_layer'),\n    \n])\n\nbase_model.summary()","5c3c05db":"base_model.compile(\n            loss='sparse_categorical_crossentropy',\n            optimizer='sgd',\n            metrics= [keras.metrics.sparse_categorical_accuracy])\n\nhistory = base_model.fit(X_train, y_train, epochs=30, validation_data=(X_validation, y_validation))","af40b799":"base_model.evaluate(X_test, y_test)","c9e722b0":"new_model = keras.models.Sequential([\n                    keras.layers.Input(shape= X_input_shape, name='input_layer'),\n                    keras.layers.Dense(100, activation='elu', kernel_initializer='he_normal'),\n                    keras.layers.Dense(50, activation='elu', kernel_initializer='he_normal'),\n                    keras.layers.Dense(25, activation='elu', kernel_initializer='he_normal'),\n                    keras.layers.Dense(4, activation='softmax', name='output_layer'),\n])\n\nnew_model.summary()","c61702cd":"new_model.compile(\n            loss='sparse_categorical_crossentropy',\n            optimizer='sgd',\n            metrics= [keras.metrics.sparse_categorical_accuracy])\n\nnew_history = new_model.fit(X_train, y_train, epochs=30, validation_data=(X_validation, y_validation))","63c1cf0e":"new_model.evaluate(X_test, y_test)","9123d71e":"tree_clf = tree.DecisionTreeClassifier(random_state=42)\nrf_clf = ensemble.RandomForestClassifier(random_state=42)\ngb_clf = ensemble.GradientBoostingClassifier(random_state=42)\next_clf = ensemble.ExtraTreesClassifier(random_state=42)\n\nvoting_classifier = ensemble.VotingClassifier([\n                        ('tree_clf', tree.DecisionTreeClassifier(random_state=42)),\n                        ('rf_clf', ensemble.RandomForestClassifier(random_state=42)),\n                        ('gb_clf', ensemble.GradientBoostingClassifier(random_state=42)),\n                        ('ext_clf', ensemble.ExtraTreesClassifier(random_state=42))\n                        ], voting='hard')\n\nlist_of_classifier = [tree_clf, rf_clf, gb_clf, ext_clf, voting_classifier]","6c0f8494":"for estimator in list_of_classifier:\n    estimator.fit(X_train, y_train)\n    print(estimator.__class__.__name__)\n    print('Score on train data')\n    print(round(estimator.score(X_train, y_train)*100,1))\n    print('Score on validation data')\n    print(round(estimator.score(X_validation, y_validation)*100,1))\n    print('Score on test data')\n    print(round(estimator.score(X_test, y_test)*100,1))\n    print()","eee2d43a":"# Data Preparation","c2c12a50":"# Neural Network Model with ReLU activation function","bd34439b":"# Traditional Models","0e922d6c":"# Neural Network Model with ELU activation function","3024682e":"# Summary and Commentary\n\n* NN model with ELU activation function perform better than the NN model with ReLU activation function\n* RandomForest model perform the best with an accuracy score of 85% on the testing data though the NN model with with ELU activation score perform the best on the validation data\n\n\n| Models             \t| Score on Train Data \t| Score on Validation Data \t| Score on Testing Data \t|\n|--------------------\t|---------------------\t|--------------------------\t|-----------------------\t|\n| NN model with ReLU \t| 81.1                \t| 83.1                     \t| 75.6                  \t|\n| NN model with ELU  \t| 85.5                \t| 87.1                     \t| 79.6                  \t|\n| DecisionTree       \t| 92.5                \t| 85.2                     \t| 83.2                  \t|\n| RandomForest       \t| 92.5                \t| 85.2                     \t| 85.0                  \t|\n| GradientBoosting   \t| 88.7                \t| 84.4                     \t| 79.2                  \t|\n| ExtraTrees         \t| 92.5                \t| 86.3                     \t| 84.6                  \t|\n| VotingClassifier   \t| 92.5                \t| 85.5                     \t| 84.2                  \t|\n"}}