{"cell_type":{"bd154167":"code","83e4e6b1":"code","3e8849ab":"code","2b9901b8":"code","fdc1a3d3":"code","36bc7a80":"code","d6768211":"code","06e43638":"code","bb40c2b0":"code","9e787f8e":"code","4a5a9544":"code","a8233df4":"code","adb89a83":"code","420fb434":"code","316c0c5c":"code","807b5441":"code","da16a02a":"code","3894bfb4":"code","dec14bf4":"code","f21953c8":"code","bf511af6":"code","65590c28":"code","2efe32c8":"code","88409e39":"code","3afb8d52":"code","94fabb8c":"code","b90aa932":"code","c158ac34":"code","4078644a":"code","9de0ff1b":"code","4bc103e6":"code","dabef871":"code","99271997":"code","fce4c736":"code","b644226e":"code","e667d53b":"code","0e859d05":"code","9e009449":"code","c72e8d64":"code","376dbfd1":"code","7a509c98":"code","70948340":"code","f15cbc0d":"code","979dec1e":"code","f3712a6f":"code","f2225503":"code","46bfbdca":"code","10b381b7":"code","3c727b6a":"code","d0e91a48":"code","bae2414c":"code","459be799":"markdown","0ad4f161":"markdown","16f1bf89":"markdown","4c207717":"markdown","f7769bf4":"markdown","478670b6":"markdown","8881928a":"markdown","08c82339":"markdown","800407de":"markdown","f19ee869":"markdown","f0ddf8ea":"markdown","71e67f8c":"markdown","3e521fee":"markdown","7f902209":"markdown","cb038232":"markdown","9e7e5d63":"markdown","6b65855b":"markdown","d0fe4af4":"markdown","2aced74b":"markdown","f18bdda1":"markdown","89b0e064":"markdown","997c195f":"markdown","90f37f5b":"markdown","45a84669":"markdown","f64584a2":"markdown","694da91c":"markdown","a16cfecb":"markdown","3a644005":"markdown","dc82997f":"markdown","fcf3943e":"markdown","809009af":"markdown","93b1e17a":"markdown","4b2d36df":"markdown","cd6e31d0":"markdown"},"source":{"bd154167":"# Block range in the original article: 4605167 to 5374870\n# Filtering by block_timestamp is more cost efficient than by block_number because the tables are partitioned by block_timestamp\n# block_number = 4605167 -> block_timestamp == \"2017-11-23 05:41:19\" \n# block_number = 5374870 -> block_timestamp == \"2018-04-03 19:53:46\" \n\nFROM_BLOCK = 4605167\nTO_BLOCK = 5374870\nFROM_BLOCK_TIMESTAMP = \"'2018-01-01 05:41:19'\" # \"'2017-11-23 05:41:19'\"\nTO_BLOCK_TIMESTAMP = \"'2018-04-03 19:53:46'\"\nMY_TIMEOUT = 300\n\n# relevant Events signatures\nevents_signatures = {\n    'AuctionCreated' : 'AuctionCreated(uint256,uint256,uint256,uint256)', # AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\n    'AuctionSuccessful' : 'AuctionSuccessful(uint256,uint256,address)', # AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\n    'AuctionCancelled' : 'AuctionCancelled(uint256)', # AuctionCancelled(uint256 tokenId);\n    'Pause' : 'Pause()',\n    'Unpause' : 'Unpause()',\n    'Transfer' : 'Transfer(address,address,uint256)', # Transfer(address from, address to, uint256 tokenId);\n    'Approval' : 'Approval(address,address,uint256)', # Approval(address owner, address approved, uint256 tokenId);\n    'ContractUpgrade' : 'ContractUpgrade(address)',\n    'Birth' : 'Birth(address,uint256,uint256,uint256,uint256)', # Birth(address owner, uint256 kittyId, uint256 matronId, uint256 sireId, uint256 genes);\n    'Pregnant' : 'Pregnant(address,uint256,uint256,uint256)' # Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 cooldownEndBlock);\n}\nevents_hashes = {'0a5311bd2a6608f08a180df2ee7c5946819a649b204b554bb8e39825b2c50ad5': 'Birth',\n '241ea03ca20251805084d27d4440371c34a0b85ff108f6bb5611248f73818b80': 'Pregnant',\n '2809c7e17bf978fbc7194c0a694b638c4215e9140cacc6c38ca36010b45697df': 'AuctionCancelled',\n '450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa446199305': 'ContractUpgrade',\n '4fcc30d90a842164dd58501ab874a101a3749c3d4747139cefe7c876f4ccebd2': 'AuctionSuccessful',\n '6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625': 'Pause',\n '7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33': 'Unpause',\n '8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925': 'Approval',\n 'a9c8dfcda5664a5a124c713e386da27de87432d5b668e79458501eb296389ba7': 'AuctionCreated',\n 'ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef': 'Transfer'}\ncoreContract = '0x06012c8cf97bead5deae237070f9587f8e7a266d'\ncontracts = {\n    coreContract : 'core',\n    '0xc7af99fe5513eb6710e6d5f44f9989da40f27f26' : 'siringAuction',\n    '0xb1690c08e213a35ed9bab7b318de14420fb57d8c' : 'saleAuction',\n}","83e4e6b1":"from google.cloud import bigquery\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\npd.set_option('max_colwidth', 70)","3e8849ab":"#events = pd.read_pickle('ck-data\/events_4605167-to-5374870.pickle.gz')\nclient = bigquery.Client()\nquery = \"\"\"\nSELECT \n  transaction_hash AS transactionHash,\n  address,\n  data,\n  topics,\n  block_timestamp,\n  block_number AS blockNumber_dec\nFROM\n  `bigquery-public-data.ethereum_blockchain.logs` AS events\nWHERE TRUE\n  AND block_timestamp >= {from_block_ts} \n  AND block_timestamp <= {to_block_ts}\n  AND address IN ({contract_list})\n\"\"\".format(from_block_ts=FROM_BLOCK_TIMESTAMP, to_block_ts=TO_BLOCK_TIMESTAMP, contract_list=\"'0x06012c8cf97bead5deae237070f9587f8e7a266d','0xc7af99fe5513eb6710e6d5f44f9989da40f27f26','0xb1690c08e213a35ed9bab7b318de14420fb57d8c'\")\nprint(query)\nquery_job = client.query(query)\niterator = query_job.result(timeout=MY_TIMEOUT)\nrows = list(iterator)\nevents = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\nevents['contract'] = events['address'].apply(lambda x: contracts[x])\nevents['event'] = events['topics'].apply(lambda x: events_hashes[x[0][2:]])\nevents.head(10)","2b9901b8":"print('Block range: ' + str(events.blockNumber_dec.min()) + ' to ' + str(events.blockNumber_dec.max()))","fdc1a3d3":"events.groupby(['contract','event']).transactionHash.count()","36bc7a80":"event_counts = events.groupby(['contract','event']).transactionHash.count()\nevent_counts.sort_values().plot(kind='barh', figsize=(8, 6))","d6768211":"event_counts_df = event_counts.reset_index()\nevent_counts_df.columns = ['contract', 'event', 'count']\nevent_counts_df","06e43638":"transfer_count = event_counts_df[event_counts_df['event']=='Transfer'].iloc[0]['count']\n\nsale_auction_cancelled_count = event_counts_df[(event_counts_df['event']=='AuctionCancelled') & \\\n                                             (event_counts_df['contract']=='saleAuction')].iloc[0]['count']\n\nsiring_auction_cancelled_count = event_counts_df[(event_counts_df['event']=='AuctionCancelled') & \\\n                                             (event_counts_df['contract']=='siringAuction')].iloc[0]['count']\n\nsale_auction_created_count = event_counts_df[(event_counts_df['event']=='AuctionCreated') & \\\n                                             (event_counts_df['contract']=='saleAuction')].iloc[0]['count']\n\nsiring_auction_created_count = event_counts_df[(event_counts_df['event']=='AuctionCreated') & \\\n                                             (event_counts_df['contract']=='siringAuction')].iloc[0]['count']\n\nsale_auction_successful_count = event_counts_df[(event_counts_df['event']=='AuctionSuccessful') & \\\n                                             (event_counts_df['contract']=='saleAuction')].iloc[0]['count']\n\nsiring_auction_successful_count = event_counts_df[(event_counts_df['event']=='AuctionSuccessful') & \\\n                                             (event_counts_df['contract']=='siringAuction')].iloc[0]['count']\n\nbirth_count = event_counts_df[(event_counts_df['event']=='Birth')].iloc[0]['count']\n\npregnant_count = event_counts_df[(event_counts_df['event']=='Pregnant')].iloc[0]['count']","bb40c2b0":"(transfer_count - \\\nsale_auction_cancelled_count - \\\nsiring_auction_cancelled_count - \\\nsale_auction_created_count - \\\nsiring_auction_created_count - \\\nsale_auction_successful_count - \\\nbirth_count ) \/ \\\ntransfer_count","9e787f8e":"pregnant_count\/siring_auction_successful_count","4a5a9544":"events['contract-event'] = events['contract'] + events['event']\nevents['block-group'] = events['blockNumber_dec'].apply(lambda x: int(x\/1000))","a8233df4":"areaplot = events.groupby(['block-group','contract-event']).transactionHash.count().reset_index().pivot(index='block-group', columns='contract-event', values='transactionHash')#.plot.area()\nareaplot.plot.area()\nplt.legend(loc=1)","adb89a83":"areaplot.divide(areaplot.sum(axis=1), axis=0).plot.area(figsize=(16, 9))\nplt.legend(loc=1)","420fb434":"transaction_birthcount = (events[events['event']=='Birth'])[['transactionHash','event']].groupby(['transactionHash']).count().reset_index()\ntransaction_birthcount[transaction_birthcount['event']>1].head()","316c0c5c":"#births = pd.read_pickle('ck-data\/births_4605167-to-5374870.pickle.gz')\nclient = bigquery.Client()\nquery = \"\"\"\nSELECT \n  events.transaction_hash AS transactionHash,\n  events.data,\n  events.block_timestamp,\n  events.block_number AS blockNumber_dec,\n  txns.from_address AS midwife, \n  txns.to_address AS midwife_smartcontract, \n  txns.gas_price AS gasPrice, \n  txns.receipt_gas_used AS gasUsed\nFROM\n  `bigquery-public-data.ethereum_blockchain.logs` AS events\nINNER JOIN\n  `bigquery-public-data.ethereum_blockchain.transactions` AS txns\nON\n  events.transaction_hash = txns.hash\nWHERE TRUE\n  AND events.block_timestamp >= {from_block_ts} \n  AND events.block_timestamp <= {to_block_ts}\n  AND txns.block_timestamp >= {from_block_ts} --might seem redundant, but because of partitioning this reduces cost\n  AND txns.block_timestamp <= {to_block_ts} --might seem redundant, but because of partitioning this reduces cost\n  AND events.address = '0x06012c8cf97bead5deae237070f9587f8e7a266d'\n  AND events.topics[OFFSET(0)] = '0x0a5311bd2a6608f08a180df2ee7c5946819a649b204b554bb8e39825b2c50ad5'\n\"\"\".format(from_block_ts=FROM_BLOCK_TIMESTAMP, \n           to_block_ts=TO_BLOCK_TIMESTAMP)\nprint(query)\nquery_job = client.query(query)\niterator = query_job.result(timeout=MY_TIMEOUT)\nrows = list(iterator)\nbirths = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\nbirths.head(10)","807b5441":"births['owner'] = '0x' + births['data'].apply(lambda x: x[26:66])\nbirths['kittyId'] = births['data'].apply(lambda x: x[66:130])\nbirths['kittyId_dec'] = births['kittyId'].apply(lambda x: int(x,16))\nbirths['matronId'] = births['data'].apply(lambda x: x[130:194])\nbirths['matronId_dec'] = births['matronId'].apply(lambda x: int(x,16))\nbirths['sireId'] = births['data'].apply(lambda x: x[194:258])\nbirths['sireId_dec'] = births['sireId'].apply(lambda x: int(x,16))\nbirths['kittyGenes'] = births['data'].apply(lambda x: x[258:322])\nbirths['block-group'] = births['blockNumber_dec'].apply(lambda x: int(x\/1000))","da16a02a":"maxBirths = births.groupby(['transactionHash']).transactionHash.count().max()\nbirths.groupby(['transactionHash']).transactionHash.count().hist(bins=range(maxBirths+2))","3894bfb4":"#this was in the original notebook; no longer needed because we now query this field on SELECT\n#births['midwife'] = births['transaction'].apply(lambda x: eval(x)['from'])","dec14bf4":"#this was in the original notebook; no longer needed because we now query this field on SELECT\n#births['midwife_smartcontract'] = births['transaction'].apply(lambda x: eval(x)['to'])","f21953c8":"#this was in the original notebook; no longer needed because we now query this field on SELECT\n#births['gasPrice'] = births['transaction'].apply(lambda x: int(eval(x)['gasPrice'],16))","bf511af6":"births['fee'] = births['gasUsed'] * births['gasPrice'] * 1E-18","65590c28":"AxiomZenAccounts = ['0xa21037849678af57f9865c6b9887f4e339f6377a','0xba52c75764d6f594735dc735be7f1830cdf58ddf']","2efe32c8":"allTimeTopMidwives = births.groupby(['midwife']).data.count().\\\n                sort_values(ascending=False)\nlen(allTimeTopMidwives)","88409e39":"allTimeTopMidwives = set(allTimeTopMidwives.head(10).index.values)\nallTimeTopMidwives","3afb8d52":"births['midwife-group'] = births['midwife'].apply(lambda x: '1- AxiomZen' \\\n                                                if x in AxiomZenAccounts \\\n                                                else '2- All Time Top 10' if x in allTimeTopMidwives \\\n                                                else '3- Other')\nareaplot = births.groupby(['block-group','midwife-group']).transactionHash.count().reset_index().pivot(index='block-group', columns='midwife-group', values='transactionHash')\nareaplot.divide(areaplot.sum(axis=1), axis=0).plot.area(figsize=(16, 9))\nplt.legend(loc=1)","94fabb8c":"areaplot.plot.area(figsize=(16, 9))\nplt.legend(loc=1)","b90aa932":"movingTopFiveMidwives = births.groupby(['block-group','midwife']).data.count().reset_index().\\\n                sort_values(by=['block-group','data'],ascending=False).groupby(['block-group']).head(5)\nmovingTopFiveMidwives = set(movingTopFiveMidwives.midwife.values)\nlen(movingTopFiveMidwives)","c158ac34":"births['midwife-group'] = births['midwife'].apply(lambda x: '1- AxiomZen' \\\n                                                if x in AxiomZenAccounts \\\n                                                else '2- Moving Top 5' if x in movingTopFiveMidwives \\\n                                                else '3- Other')\nareaplot = births.groupby(['block-group','midwife-group']).transactionHash.count().reset_index().pivot(index='block-group', columns='midwife-group', values='transactionHash')\nareaplot.divide(areaplot.sum(axis=1), axis=0).plot.area(figsize=(16, 9))\nplt.legend(loc=1)","4078644a":"births['type-of-call'] = births['midwife_smartcontract'].apply(lambda x: 'Direct call' \\\n                                                if x == '0x06012c8cf97bead5deae237070f9587f8e7a266d' \\\n                                                else 'Intermediary smart-contract')\nareaplot = births.groupby(['block-group','type-of-call']).transactionHash.count().reset_index().pivot(index='block-group', columns='type-of-call', values='transactionHash')\nareaplot.divide(areaplot.sum(axis=1), axis=0).plot.area(figsize=(16, 9))\nplt.legend(loc=1)","9de0ff1b":"areaplot.plot.area(figsize=(16, 9))\nplt.legend(loc=1)","4bc103e6":"births[births['midwife'].isin(allTimeTopMidwives)].groupby(['midwife']).data.count().sort_values().plot(kind='barh')\nplt.xlabel('kitties delivered')","dabef871":"#4832686 first block of the year 2018\nbirths_2018 = births[births['blockNumber_dec']>=4832686]","99271997":"TopMidwives_2018 = births_2018.groupby(['midwife']).data.count().\\\n                sort_values(ascending=False).head(10)\nTopMidwives_2018 = set(TopMidwives_2018.index.values)\nTopMidwives_2018","fce4c736":"births_2018[births_2018['midwife'].isin(TopMidwives_2018)].groupby(['midwife']).data.count().sort_values().plot(kind='barh')\nplt.xlabel('Number of kitties delivered')","b644226e":"count = pd.DataFrame(births_2018.groupby(['transactionHash']).transactionHash.count())\nfees = births_2018.groupby(['transactionHash']).fee.max()\nmidwife = births_2018.groupby(['transactionHash']).midwife.max()\nmidwife_smartcontract = births_2018.groupby(['transactionHash']).midwife_smartcontract.max()\ngasUsed = births_2018.groupby(['transactionHash']).gasUsed.max()\ngasPrice = births_2018.groupby(['transactionHash']).gasPrice.max()\ndf_profitability = count.join(fees).join(midwife).join(midwife_smartcontract).join(gasUsed).join(gasPrice)\ndf_profitability.columns = ['kitties_delivered','fee','midwife','midwife_smartcontract','gasUsed','gasPrice']\ndf_profitability['revenue'] = df_profitability['kitties_delivered'] * 0.008\ndf_profitability['profit'] = df_profitability['revenue'] - df_profitability['fee']\ndf_profitability['code_efficiency'] = df_profitability['kitties_delivered']\/df_profitability['gasUsed']*1e6\ndf_profitability['efficiency'] = df_profitability['profit']\/df_profitability['kitties_delivered']\nlen(df_profitability)","e667d53b":"MY_TIMEOUT=6000\n#births = pd.read_pickle('ck-data\/births_4605167-to-5374870.pickle.gz')\nclient = bigquery.Client()\nquery = \"\"\"\n\nSELECT DISTINCT\n  failed_txns.hash AS transactionHash, \n  failed_txns.from_address AS midwife, \n  failed_txns.to_address AS midwife_smartcontract, \n  failed_txns.gas_price AS gasPrice, \n  failed_txns.receipt_gas_used AS gasUsed\nFROM\n  `bigquery-public-data.ethereum_blockchain.logs` AS events\nINNER JOIN\n  `bigquery-public-data.ethereum_blockchain.transactions` AS events_txns\nON\n  events.transaction_hash = events_txns.hash\nINNER JOIN\n  `bigquery-public-data.ethereum_blockchain.transactions` AS failed_txns\nON\n  events_txns.from_address = failed_txns.from_address\n  AND events_txns.to_address = failed_txns.to_address\nWHERE TRUE\n  AND events.block_timestamp >= {from_block_ts} \n  AND events.block_timestamp <= {to_block_ts}\n  AND events_txns.block_timestamp >= {from_block_ts} --might seem redundant, but because of partitioning this reduces cost\n  AND events_txns.block_timestamp <= {to_block_ts} --might seem redundant, but because of partitioning this reduces cost\n  AND failed_txns.block_timestamp >= {from_block_ts} --might seem redundant, but because of partitioning this reduces cost\n  AND failed_txns.block_timestamp <= {to_block_ts} --might seem redundant, but because of partitioning this reduces cost\n  AND events.address = '0x06012c8cf97bead5deae237070f9587f8e7a266d'\n  AND events.topics[OFFSET(0)] = '0x0a5311bd2a6608f08a180df2ee7c5946819a649b204b554bb8e39825b2c50ad5'\n  AND (\n    (\n    failed_txns.to_address = '0x06012c8cf97bead5deae237070f9587f8e7a266d' \n    AND \n    SUBSTR(failed_txns.input,0,10) = '0x88c2a0bf'\n    )\n    OR\n    failed_txns.to_address <> '0x06012c8cf97bead5deae237070f9587f8e7a266d' \n  )\n\nEXCEPT DISTINCT\n(\nSELECT DISTINCT\n  txns.hash AS transactionHash, \n  txns.from_address AS midwife, \n  txns.to_address AS midwife_smartcontract, \n  txns.gas_price AS gasPrice, \n  txns.receipt_gas_used AS gasUsed\nFROM\n  `bigquery-public-data.ethereum_blockchain.logs` AS events\nINNER JOIN\n  `bigquery-public-data.ethereum_blockchain.transactions` AS txns\nON\n  events.transaction_hash = txns.hash\nWHERE TRUE\n  AND events.block_timestamp >= {from_block_ts} \n  AND events.block_timestamp <= {to_block_ts}\n  AND txns.block_timestamp >= {from_block_ts} --might seem redundant, but because of partitioning this reduces cost\n  AND txns.block_timestamp <= {to_block_ts} --might seem redundant, but because of partitioning this reduces cost\n  AND events.address = '0x06012c8cf97bead5deae237070f9587f8e7a266d'\n  AND events.topics[OFFSET(0)] = '0x0a5311bd2a6608f08a180df2ee7c5946819a649b204b554bb8e39825b2c50ad5'\n)\n\n\"\"\".format(from_block_ts=\"'2018-01-01 00:00:00'\", \n           to_block_ts=TO_BLOCK_TIMESTAMP)\nprint(query)\nquery_job = client.query(query)\niterator = query_job.result(timeout=MY_TIMEOUT)\nrows = list(iterator)\ndf_failed_midwifing_txns = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\ndf_failed_midwifing_txns.head(10)","0e859d05":"# #dataset of all transactions from midwife to midwife-smartcontract\n# #this includes transactions to the core game smart contract that are not calls to giveBirth, so we remove those\n# df_all_midwifing_txns = pd.read_pickle('ck-data\/midwives-txns_4605167-to-5374870.pickle.gz')\n# #drop transactions to the core game that are not calls to giveBirth\n# df_all_midwifing_txns = df_all_midwifing_txns[((df_all_midwifing_txns['to']=='0x06012c8cf97bead5deae237070f9587f8e7a266d') & \\\n#                                                (df_all_midwifing_txns['input'].apply(lambda x: x[:10]=='0x88c2a0bf'))) | \\\n#                                                (df_all_midwifing_txns['to']!='0x06012c8cf97bead5deae237070f9587f8e7a266d')]\n# df_all_midwifing_txns['blockNumber_dec'] = df_all_midwifing_txns['blockNumber'].apply(lambda x: int(x,16))\n\n#SELECT ONLY 2018\n#df_all_midwifing_txns = df_all_midwifing_txns[df_all_midwifing_txns['blockNumber_dec']>=4832686]\n#df_all_midwifing_txns.head(2)","9e009449":"#df_failed_midwifing_txns = (df_all_midwifing_txns[~df_all_midwifing_txns['hash'].isin(df_profitability.index)])[['hash','from','to','gasUsed','gasPrice']]\n#df_failed_midwifing_txns.columns = ['transactionHash','midwife','midwife_smartcontract','gasUsed','gasPrice']\n#df_failed_midwifing_txns = df_failed_midwifing_txns[df_failed_midwifing_txns['midwife'].isin(allTimeTopMidwives)]\n#df_failed_midwifing_txns['gasPrice'] = df_failed_midwifing_txns['gasPrice'].apply(lambda x: int(x,16))\ndf_failed_midwifing_txns['kitties_delivered'] = 0\ndf_failed_midwifing_txns['revenue'] = 0\ndf_failed_midwifing_txns['fee'] = df_failed_midwifing_txns['gasUsed'] * df_failed_midwifing_txns['gasPrice'] * 1e-18\ndf_failed_midwifing_txns['profit'] = -df_failed_midwifing_txns['fee']\ndf_failed_midwifing_txns = df_failed_midwifing_txns.set_index('transactionHash')\nlen(df_failed_midwifing_txns)","c72e8d64":"df_profitability = df_profitability.append(df_failed_midwifing_txns, sort=True)\nlen(df_profitability)","376dbfd1":"df_profitability[df_profitability['midwife'].isin(TopMidwives_2018)].groupby(['midwife']).revenue.sum().sort_values().plot(kind='barh')\nplt.xlabel('Revenue (ETH)')","7a509c98":"df_profitability[df_profitability['midwife'].isin(TopMidwives_2018)].groupby(['midwife']).profit.sum().sort_values().plot(kind='barh')\nplt.xlabel('Profit (ETH)')","70948340":"efficiency_plot = df_profitability[df_profitability['midwife'].isin(TopMidwives_2018)].groupby(['midwife_smartcontract']).code_efficiency.mean().sort_values()\nefficiency_plot.divide(efficiency_plot.max(),axis=0).plot(kind='barh')\nplt.xlabel('Code efficiency')","f15cbc0d":"efficiency_plot = df_profitability[df_profitability['midwife'].isin(TopMidwives_2018)].groupby(['midwife']).efficiency.mean().sort_values()\nefficiency_plot.divide(efficiency_plot.max(),axis=0).plot(kind='barh')\nplt.xlabel('Efficiency')","979dec1e":"df_profitability[(df_profitability['midwife']=='0x05be6e1f661dacd4630e1ebe2ffce5bfb962076f') & \\\n                 (df_profitability['kitties_delivered']==0) & \\\n                 (df_profitability['midwife_smartcontract']=='0x39243a59d34169eeb0cac2752a21b982408a0194') & \\\n                 (df_profitability['gasUsed']>55000)].head()","f3712a6f":"df_profitability[(df_profitability['midwife']=='0x05be6e1f661dacd4630e1ebe2ffce5bfb962076f') & \\\n                 (df_profitability['kitties_delivered']==0) & \\\n                 (df_profitability['midwife_smartcontract']=='0x39243a59d34169eeb0cac2752a21b982408a0194') & \\\n                 (df_profitability['gasUsed']>55000)].profit.sum()","f2225503":"births_2018[births_2018['midwife'].isin(TopMidwives_2018)].groupby(['midwife_smartcontract']).data.count().sort_values().plot(kind='barh')\nplt.xlabel('Number of kitties delivered')","46bfbdca":"TopMidwivesSmartContracts_2018 = births_2018[births_2018['midwife'].isin(TopMidwives_2018)].\\\n                groupby(['midwife_smartcontract']).data.count().\\\n                sort_values(ascending=False).head(10)\nTopMidwivesSmartContracts_2018 = set(TopMidwivesSmartContracts_2018.index.values)\nTopMidwivesSmartContracts_2018","10b381b7":"import seaborn as sns\nheatmap = pd.DataFrame(births_2018[(births_2018['midwife'].isin(TopMidwives_2018)) & \\\n                                   (births_2018['midwife_smartcontract'].isin(TopMidwivesSmartContracts_2018))]\\\n                       .groupby(['midwife','midwife_smartcontract']).data.count()).reset_index().pivot(index='midwife', columns='midwife_smartcontract', values='data')\nheatmap = heatmap.fillna(0)","3c727b6a":"#reorder rows and columns to make clusters more evident\nheatmap = heatmap[['0x06012c8cf97bead5deae237070f9587f8e7a266d',\n '0x39243a59d34169eeb0cac2752a21b982408a0194',\n '0x79b2f239bc75755a6bf38f55e697356fe7c61bec',\n '0x7449fe237fc0873481230380af32a73910ad2afd',\n '0xb81e1c30149813d743d495f68341c5129eb73e88',\n '0x903625318d13a3529fb4309fd57dd8d105fcd39c',\n '0xd18785571ae7f3b100e5b8788e3827120282f170',\n '0xc5f60fa4613493931b605b6da1e9febbdeb61e16',\n '0xa08f3503933d050ce415ca1db26ddba6a2231e3e',\n '0xdc969012dcc40402316a1964dc77ae85cbb33e2d'\n]]\nheatmap = heatmap.reindex([ '0xa21037849678af57f9865c6b9887f4e339f6377a',\n '0x05be6e1f661dacd4630e1ebe2ffce5bfb962076f',\n '0x74f42f97a229213343cbe0be747dfe4b705876cb',\n '0xb7f819b983e0cbb0316786d7fba12e3b1e58da5f',\n '0x6fc9bcb6091c01d6d2a530955e633b894ae48256',\n '0x80cfd274937d40c5e3d0e910a81d3330f3c10898',\n '0xc5b373618d4d01a38f822f56ca6d2ff5080cc4f2',\n '0xed9878336d5187949e4ca33359d2c47c846c9dd3',\n '0xd294209c4132b227902b03cf8c7c8d4d4a780eb4',\n '0xf3461cc074cd21b60cbf393050c4990332215186'])","d0e91a48":"sns.heatmap(heatmap, linewidths=.5, cmap=\"YlGnBu\")","bae2414c":"plt.subplots(figsize=(11.7, 8.27))\nsns.heatmap(heatmap, linewidths=.5, cmap=\"YlGnBu\")","459be799":"Only 869 accounts have given birth to kitties","0ad4f161":"But some accounts, like the one ranking second in profits (ed9878) are less efficient in terms of profit; meaning they are paying higher gas prices","16f1bf89":"First we calculate the rewards and costs of successful birth transactions","4c207717":"Those \"maintenance\" transactions account for 11 ether of all the costs incurred by 0x05be6e1. If it were not for these transactions, it would lead the profitability ranking","f7769bf4":"See how AxiomZen is no longer leading the ranking","478670b6":"And join sucessful and unsucessful transactions in a single dataframe","8881928a":"How much that means in fees","08c82339":"Interesting to see that many of the zero-birth-transactions by 0x05be6e1 are not acutal attempts to giveBirth to kitties, but rather some other interaction with their smart-contract. We assume that is a required operation for their process, and count those transactions as cost","800407de":"Based on my understanding of the game dynamics, I expected every transaction to cause one event to happen, or at most two in case of a successful siring or sale auction, which would be followed by a pregnancy or a transfer.\nBut when we group the events by the transaction that caused them to happen, we see sometimes a single transaction causes more than one event to happen, eg 0x00001491cb7e109fcb9adb9341d9802675820ddd818b7ebd5ac96054502764ff","f19ee869":"# CryptoKitties Analysis","f0ddf8ea":"The top ranking midwife is an AxiomZen account. As we'll see, this is due to the December peak.","71e67f8c":"The top 10 of all time don't dominate the market so much, but it's still very concentrated. 151 accounts were top 5 in at least one 1000-blocks-period.","3e521fee":"What smart-contract are they sending the transaction to","7f902209":"Let's take a look at the profitability of this activity. We'll work with 2018 data only, where the reward is constant (0.008 ETH) and to ignore the effects of the network congestion of December","cb038232":"We remove from the transaction dataset the sucessful birth transactions","9e7e5d63":"### Who is calling giveBirth?","6b65855b":"But in fact thos maintenance transactions are storing information for later deletion, in order to save gas (like gastoken)","d0fe4af4":"Code efficiency is very similar among the smart-contracts used by the top midwives","2aced74b":"When you breed two cats, you must provide a birthing fee (0.008 ETH as of now), to be collected by the account that calls the giveBirth method on the matron cat at or after the block when the pregnancy ends. *Anyone* can call that method and thus collect the fee, but the new cat always goes to the owner of the matron.\n\nI did not see the reasoning behind this fee, as it seemed to only make the game more expensive to be played. The giveBirth method could have been integrated into some other action of the game in such a way that the player would naturally call it whenever givingBirth suited their needs. Then I found [this](https:\/\/medium.com\/cryptokitties\/cryptokitties-birthing-fees-increases-in-order-to-accommodate-demand-acc314fcadf5):\n>Because this giveBirth() function includes a random element, it is critical that it is called quickly after the expected birthing time (within 250 blocks, or about 30 minutes). If the call takes any longer, it provides the opportunity for bad actors to \u201cre-roll\u201d the random element of their genetic combination and gain an unfair advantage against other breeders. To keep this from happening, we allow anyone to call giveBirth() and we give the entire birthing fee to the first midwife that successfully births the new kitten. This ensures that ... there is an incentive for other people in the community to ensure that all births are happening quickly.\n\nSo the game creates an incentive for people - who might not even be players of the game themselves - to call the giveBirth method on other people's pregnant cats. Sure enough, bots (offchain scripts + smart-contracts) seem to have been coded to do just that.","f18bdda1":"^ Only 6% of transfers happen outside of the context of game auction smart-contracts","89b0e064":"Most transactions only give birth to one cat; but some give birth to more","997c195f":"Next we get all the transactions between midwives and their smart-contract (data was collected previously and saved for offline use)","90f37f5b":"^ As expected, the core game smart-contract is reponsible for logging the births, pregnancies, transfers and approvals of kitties. The auctioning smart-contracts log events referring to creation, completion and cancellation of auctions.","45a84669":"Revenues are linearly proportional to births","f64584a2":"Let's take a deeper look at the Birth events","694da91c":"Future work: do accounts that use the same smart-contracts belong to the same person?","a16cfecb":"So the midwife accounts are not directly calling the giveBirth method on the core game smart-contract (0x06012...). Instead, they are sending transactions to other accounts. A quick look at those accounts on Etherscan shows us that those are smart-contracts. So people are calling intermediary smart-contracts that in turn call giveBirth on a series of pregnant kitties.","3a644005":"Profits depend on code efficiency and transaction broadcasting strategy. The account ranking fifth in revenue ranks third in profits","dc82997f":"AxiomZen was the only one givingbirth to kitties in the early days. External agents soon responded to the incentives. AxiomZen had to act during network congestion periods.","fcf3943e":"Soon after the advent of the cryptomidwives, the use of intermediary smart-contracts to cal giveBirth increased greatly.","809009af":"^ The Pregnant event is a lot more frequent than the AuctionSuccessful event by the siring auction smart-contract. Bcause every successful siring auction results in a pregancy, this means that most breeding is being done between cats that belong to the same player.","93b1e17a":"How much are they paying for gas","4b2d36df":"Who is making the transaction","cd6e31d0":"Midwife accounts associated with AxiomZen: 0xba52 created the game smart contract; 0xa210 is mentioned in a [blog post](https:\/\/medium.com\/cryptokitties\/cryptokitties-birthing-fees-increases-in-order-to-accommodate-demand-acc314fcadf5)"}}