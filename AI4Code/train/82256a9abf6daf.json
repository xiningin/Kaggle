{"cell_type":{"365a2f85":"code","faca23b3":"code","888104f3":"code","0444bebc":"code","b222597d":"code","7a2a8e4b":"code","916f8182":"code","b2fa3784":"code","910a81a7":"code","5e32a4a7":"code","3428835b":"code","72df7617":"code","abe939eb":"code","327db028":"code","6efeedea":"code","2868ed9c":"code","cbf256ec":"code","0ff0399e":"code","c278bac7":"code","c395cfcf":"code","a366fd51":"markdown","6675ed47":"markdown","2dd1380b":"markdown","b1f4524b":"markdown","a1969252":"markdown","94154372":"markdown","9d21289f":"markdown","86719c7a":"markdown","65bf59d1":"markdown","3ceea21e":"markdown","98c58953":"markdown","a6c37e0a":"markdown","7af2d40c":"markdown","cc2f83be":"markdown"},"source":{"365a2f85":"import numpy as np \nimport pandas as pd\nimport lightgbm as lgb\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.metrics import roc_auc_score","faca23b3":"train = pd.read_csv('..\/input\/train.csv', index_col=0)\ntest = pd.read_csv('..\/input\/test.csv', index_col=0)\n\ntarget = train.target.values\ntrain.drop('target', axis=1, inplace=True)\ntrain.shape, target.shape, test.shape, ","888104f3":"pos_idx = (target == 1)\nneg_idx = (target == 0)\nstats = []\nfor col in train.columns:\n    stats.append([\n        train.loc[pos_idx, col].mean(),\n        train.loc[pos_idx, col].std(),\n        train.loc[neg_idx, col].mean(),\n        train.loc[neg_idx, col].std()\n    ])\n    \nstats_df = pd.DataFrame(stats, columns=['pos_mean', 'pos_sd', 'neg_mean', 'neg_sd'])\nstats_df.head()","0444bebc":"npos = pos_idx.sum()\nnneg = neg_idx.sum()\n\nsim_feats = []\nfor pos_mean, pos_sd, neg_mean, neg_sd in stats:\n    pos_feat = np.random.normal(loc=pos_mean, scale=pos_sd, size=npos)\n    neg_feat = np.random.normal(loc=neg_mean, scale=neg_sd, size=nneg)\n    sim_feats.append(np.hstack([pos_feat, neg_feat]))\n    \nsim_feats = np.column_stack(sim_feats)\nsim_target = np.hstack([np.ones(npos), np.zeros(nneg)])","b222597d":"sim_feats.shape, sim_target.shape","7a2a8e4b":"param = {\n    'bagging_freq': 5,\n    'bagging_fraction': 0.335,\n    'boost_from_average':'false',\n    'boost': 'gbdt',\n    'feature_fraction': 0.041,\n    'learning_rate': 0.0083,\n    'max_depth': -1,\n    'metric':'auc',\n    'min_data_in_leaf': 80,\n    'min_sum_hessian_in_leaf': 10.0,\n    'num_leaves': 13,\n    'tree_learner': 'serial',\n    'objective': 'binary', \n    'verbosity': -1\n}","916f8182":"trn_data = lgb.Dataset(sim_feats, sim_target)\ncv = lgb.cv(param, trn_data, 100000, shuffle=True, early_stopping_rounds=600, verbose_eval=600)\nprint(cv['auc-mean'][-1], len(cv['auc-mean']))","b2fa3784":"plt.figure(figsize=(20, 10))\n# var_0\nplt.subplot(2, 2, 1)\nsns.distplot(train.loc[pos_idx, 'var_0'], hist=False, label='pos', color='blue')\nsns.distplot(train.loc[neg_idx, 'var_0'], hist=False, label='neg', color='orange')\nplt.vlines(x=[stats_df.loc[0, 'pos_mean'], stats_df.loc[0, 'neg_mean']], ymin=0, ymax=0.15, colors=['blue', 'orange'])\nplt.xlabel('var_0')\nplt.title('Real data')\nplt.legend()\nplt.subplot(2, 2, 2)\nsns.distplot(sim_feats[pos_idx, 0], hist=False, label='pos', color='blue')\nsns.distplot(sim_feats[neg_idx, 0], hist=False, label='neg', color='orange')\nplt.vlines(x=[stats_df.loc[0, 'pos_mean'], stats_df.loc[0, 'neg_mean']], ymin=0, ymax=0.15, colors=['blue', 'orange'])\nplt.title('Simulated data')\nplt.legend()\nplt.xlabel('var_0')\n\n# var_1\nplt.subplot(2, 2, 3)\nsns.distplot(train.loc[pos_idx, 'var_1'], hist=False, label='pos', color='blue')\nsns.distplot(train.loc[neg_idx, 'var_1'], hist=False, label='neg', color='orange')\nplt.vlines(x=[stats_df.loc[1, 'pos_mean'], stats_df.loc[1, 'neg_mean']], ymin=0, ymax=0.15, colors=['blue', 'orange'])\nplt.xlabel('var_1')\nplt.legend()\nplt.subplot(2, 2, 4)\nsns.distplot(sim_feats[pos_idx, 1], hist=False, label='pos', color='blue')\nsns.distplot(sim_feats[neg_idx, 1], hist=False, label='neg', color='orange')\nplt.vlines(x=[stats_df.loc[1, 'pos_mean'], stats_df.loc[1, 'neg_mean']], ymin=0, ymax=0.15, colors=['blue', 'orange'])\nplt.legend()\nplt.xlabel('var_1')","910a81a7":"zval1 = (train.values - stats_df.neg_mean.values) \/ stats_df.neg_sd.values\nzval1.shape","5e32a4a7":"pval1 = (1 - norm.cdf(np.abs(zval1))) * 2","3428835b":"pval1","72df7617":"prob1 = pval1.prod(axis=1)","abe939eb":"roc_auc_score(target, 1\/prob1)","327db028":"zval2 = (train.values - stats_df.pos_mean.values) \/ stats_df.pos_sd.values\npval2 = (1 - norm.cdf(np.abs(zval2))) * 2","6efeedea":"prob2 = pval2.prod(axis=1)","2868ed9c":"roc_auc_score(target, prob2 \/ prob1)","cbf256ec":"te_zval1 = (test.values - stats_df.neg_mean.values) \/ stats_df.neg_sd.values\nte_pval1 = (1 - norm.cdf(np.abs(te_zval1))) * 2\nte_prob1 = te_pval1.prod(axis=1)","0ff0399e":"te_zval2 = (test.values - stats_df.pos_mean.values) \/ stats_df.pos_sd.values\nte_pval2 = (1 - norm.cdf(np.abs(te_zval2))) * 2\nte_prob2 = te_pval2.prod(axis=1)","c278bac7":"pred = te_prob2 \/ te_prob1","c395cfcf":"pd.DataFrame({\n    'ID_code': test.index,\n    'target': pred\n}).to_csv('sub.csv', index=False)","a366fd51":"### Conclusion\n\nBranden Murray's hypothesis **For each feature they had a distribution for target==0 and a distribution for target==1 and they randomly sampled from each and then put it together** is a wonderful explanation of shuffling also works and weak interaction between features.\n\nWe can even use tranditional Probability theory to calculate the P(target==1) value to achive 0.874 local cv. But this model is still too naive, the feature is not normal distribution(I try normality test, none of the 200 features passed), and the positive samples and negative samples is not variance homogeneity(2\/3 of the features failed variance homogeneity test).\n\nHope this kernal can help, thanks!","6675ed47":"### Synthetic data using normal distribution with train's mean\/sd","2dd1380b":" ### Use this mothed to predict test.csv","b1f4524b":"**We can get 0.874 just using Probability theory, It's quite good I think.**","a1969252":"The smaller the prob1, the more likely a sample is positive. let's see the performance.","94154372":"We can achieve 0.885 just using train data's mean and sd, this is not bad! Maybe the data is generated using this way!","9d21289f":"### Test the synthetic data","86719c7a":"Since we have 200 feats, we get 200 pvalue for each sample, we can multiply them together.","65bf59d1":"### Calculate probability use hypothetical test\n\nIf each feature is generated by sample positive samples and negtive samples, then we can use hypothetical test to distinguish them. The positive samples and negative samples of each feature are slightly different. Let's take `var_0` and `var_1` as an example. ","3ceea21e":"This kernel is inspired by [@Branden Murray](https:\/\/www.kaggle.com\/brandenkmurray)'s thoughts about [Any explanation why shuffling augmentation works?](https:\/\/www.kaggle.com\/c\/santander-customer-transaction-prediction\/discussion\/84847). I quote his hypothesis:\n\n>Well, one explanation could be that it's how they generated the dataset in the first place. For each feature they had a distribution for target==0 and a distribution for target==1 and they randomly sampled from each and then put it together.\n\nI'm going to generate positive(target==1) and negative(target==0) samples for each feature, then combine the 200 simulated features together, I can get a synthetic data. With this simulated data, I can test Brander Murray's hypothesis.  \n\nIf his hypothesis is true, then we can calculate the probability of positive sample(i.e. P(target=1|features)) using traditional Probability theory.","98c58953":"### Calculate the mean\/sd of postive and negative samples for each feature","a6c37e0a":"Combine the two prob together:","7af2d40c":"Let's use Z-test:\n- Null hypothesis: a sample is negative(target == 0)\n- Alternative hypothesis: a sample is not negative(target == 1)\n\nIf we get a small pvalue(< 0.05), we reject the null hypothesis, i.e. the smaller the pvalue, the more likely a sample is positive.","cc2f83be":"If we test whether a sample is positive, we can get another hypothetical test:\n- Null hypothesis: a sample is positive(target == 1)\n- Alternative hypothesis: a sample is not positive(target == 0)\n\nIf we get a small pvalue(< 0.05), we reject the null hypothesis, i.e. the bigger the pvalue, the more likely a sample is positive."}}