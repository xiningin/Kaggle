{"cell_type":{"3c9e3bcf":"code","d6c1215e":"code","76f13f3c":"code","82ac68e7":"code","f72e250c":"code","f707f12d":"code","3303e616":"code","b1488dc5":"code","2997a096":"code","3e910027":"code","f9549530":"code","bd7b6c53":"code","31acdd17":"code","ed89e79d":"code","1fe9c80e":"code","52340293":"code","ced5ae9a":"code","4ffdd4d4":"code","85e4950c":"code","59fef7cd":"code","fcfea36c":"code","92c00b69":"code","50289338":"code","840f8164":"code","74b4d95d":"code","800791aa":"markdown","ff4bb597":"markdown","ac42e619":"markdown","f07118c5":"markdown","398fb99f":"markdown","f46f1cba":"markdown","b0f5bc5f":"markdown"},"source":{"3c9e3bcf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d6c1215e":"df_tr=pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv',nrows=200000)\ndf_te=pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')","76f13f3c":"df_tr.head()","82ac68e7":"(df_tr.isnull().sum()*100\/len(df_tr)).sort_values(ascending=False)","f72e250c":"df_tr = df_tr.replace({pd.NA: np.nan})\ndf_te = df_te.replace({pd.NA: np.nan})","f707f12d":"features = df_tr.columns.drop(['id','claim'])","3303e616":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy = \"median\")\nfor col in features:\n    df_tr[col] = imputer.fit_transform(np.array(df_tr[col]).reshape(-1,1))\n    df_te[col] = imputer.transform(np.array(df_te[col]).reshape(-1,1))","b1488dc5":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nfor col in features:\n    df_tr[col] = scaler.fit_transform(np.array(df_tr[col]).reshape(-1,1))\n    df_te[col] = scaler.transform(np.array(df_te[col]).reshape(-1,1))","2997a096":"X = df_tr.drop(['id','claim'], axis=1)\nXte = df_te.drop('id', axis=1)\nY = df_tr[\"claim\"]","3e910027":"from sklearn.feature_selection import mutual_info_classif","f9549530":"mi_scores = mutual_info_classif(X,Y)\nmi_scores = pd.Series(mi_scores, name=\"MI Scores\",index=X.columns)\nmi_scores = mi_scores.sort_values(ascending=False)","bd7b6c53":"mi_scores.head(50).index","31acdd17":"mi_fea=['f5', 'f51', 'f57', 'f31', 'f34', 'f99', 'f42', 'f6', 'f44', 'f74',\n       'f46', 'f81', 'f40', 'f13', 'f70', 'f111', 'f50', 'f94', 'f32', 'f35',\n       'f114', 'f102', 'f64', 'f87', 'f48', 'f106', 'f8', 'f12', 'f118',\n       'f109', 'f18', 'f14', 'f71', 'f30', 'f72', 'f21', 'f117', 'f95', 'f25',\n       'f110', 'f54', 'f68', 'f7', 'f86', 'f33', 'f36', 'f93', 'f90', 'f10',\n       'f98']","ed89e79d":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import callbacks, layers","1fe9c80e":"from sklearn.model_selection import train_test_split\nxtr,xval,ytr,yval=train_test_split(X[mi_fea],Y,random_state=108,test_size=0.3)","52340293":"model=keras.Sequential([\n    layers.Dense(units=512,input_shape=(50,),activation='relu'),\n    layers.Dropout(0.3),\n    layers.BatchNormalization(),\n    layers.Dense(units=512,activation='relu'),\n    layers.Dropout(0.32),\n    layers.BatchNormalization(),\n    layers.Dense(units=824,activation='relu'),\n    layers.Dropout(0.3),\n    layers.BatchNormalization(),\n    layers.Dense(units=1224,activation='relu'),\n    layers.Dropout(0.32),\n    layers.BatchNormalization(),\n    layers.Dense(units=1024,activation='relu'),\n    layers.Dropout(0.3),\n    layers.BatchNormalization(),\n    layers.Dense(units=1,activation='sigmoid')\n])\nadam=keras.optimizers.Adam(\n    learning_rate=0.001, beta_1=0.7, beta_2=0.977, epsilon=1e-07, amsgrad=True,\n    name='Adam'\n)\nauc=keras.metrics.AUC(num_thresholds=25,summation_method='interpolation', curve='ROC')\nmodel.compile(optimizer=adam,loss='binary_crossentropy',metrics=[auc,'binary_crossentropy'])\ncall=callbacks.EarlyStopping(patience=15,min_delta=0.0001,restore_best_weights=True)\nhistory=model.fit(xtr,ytr,validation_data=(xval,yval),batch_size=50,callbacks=[call],epochs=50)","ced5ae9a":"ypred=model.predict(Xte[mi_fea])","4ffdd4d4":"sub=pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')","85e4950c":"sub","59fef7cd":"ypred=pd.DataFrame(ypred)","fcfea36c":"df_te['id']=np.array(df_te['id']).reshape(-1,1)","92c00b69":"ypred=ypred.reset_index()","50289338":"df_te['id'].shape","840f8164":"submission=pd.DataFrame({'id':df_te['id'],'claim':ypred[0]})","74b4d95d":"submission.reset_index()\nsubmission.to_csv('submission.csv',index=False)","800791aa":"# Feature-selection!","ff4bb597":"# Predicting the claims","ac42e619":"# Exploring the dataset","f07118c5":"# Submitting!","398fb99f":"# Creating Training datasets and Imputing null-values","f46f1cba":"# Scaling the datasets","b0f5bc5f":"# Building *ANN*"}}