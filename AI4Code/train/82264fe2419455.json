{"cell_type":{"31ab4f1e":"code","7464d9f1":"code","83c7e3ab":"code","4a520196":"code","d26699ab":"code","00438334":"code","73b4183c":"code","b9606eb9":"code","f2828504":"code","792b43b4":"code","cdb5948b":"code","31a953c2":"code","ed92c7e8":"code","fdc44ac4":"code","79fd2578":"code","d1c97ebb":"code","55b8b340":"code","e0597801":"code","9e4039a4":"code","dfd7ca8b":"code","8d1e7dea":"code","8cb73da8":"code","a5e928d2":"code","db45eaa0":"code","9c907341":"code","19ecc528":"code","e8239421":"code","7a186047":"code","02704ba5":"code","7d1348ee":"code","37135fe5":"code","15561fc3":"code","91562db0":"code","c119d42f":"code","efadb309":"code","f15be220":"code","9305fd35":"code","9cca31c4":"code","7236537b":"code","e43dd44b":"code","62db4c81":"code","a954bf12":"code","a5ee1c9d":"code","67d840bf":"code","801fa8f0":"code","1cc9e3f8":"code","f6a897b4":"code","2a94cb64":"code","4d868729":"code","e864bb0b":"code","a3cf4528":"code","ba216ba4":"code","a502b517":"code","f8d9aa2b":"code","ec24a322":"code","4a0a0028":"code","b266fb8a":"code","0f06d49c":"code","c584f5c3":"code","376d36a1":"code","e227b326":"code","c6e1cccf":"code","cbd6345f":"code","c231703c":"code","34cc7bb4":"code","c7b1d451":"code","bc57896c":"code","82575530":"code","e0ae3461":"code","40e4607c":"code","ba7ba3c4":"code","2c29c545":"code","0f112c2a":"code","6269ed21":"code","cff72744":"code","21072b95":"markdown","0217148e":"markdown","61c92169":"markdown","29a96f3f":"markdown","486f6c4a":"markdown","50ca63ab":"markdown","0d459fe1":"markdown","bab59441":"markdown","c529ff3d":"markdown","9abcc341":"markdown","5267c4c8":"markdown","30b71601":"markdown","5b93211a":"markdown","2503e95b":"markdown","39a879ff":"markdown","950c84a7":"markdown","179b699e":"markdown","03ec3c5d":"markdown","8f7a574f":"markdown"},"source":{"31ab4f1e":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","7464d9f1":"df_info=pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')\ndf_info.head()","83c7e3ab":"df_info.sample(5)","4a520196":"df_info.tail()","d26699ab":"df_info.columns","00438334":"print('App:')\nprint(df_info['App'].describe())\nprint()\nprint('Category:')\nprint(df_info['Category'].describe())\nprint()\nprint('Rating:')\nprint(df_info['Rating'].describe())\nprint()\nprint('Reviews:')\nprint(df_info['Reviews'].describe())\nprint()\nprint('Size:')\nprint(df_info['Size'].describe())\nprint()\nprint('Installs:')\nprint(df_info['Installs'].describe())\nprint()\nprint('Type:')\nprint(df_info['Type'].describe())\nprint()\nprint('Price:')\nprint(df_info['Price'].describe())\nprint()\nprint('Content Rating:')\nprint(df_info['Content Rating'].describe())\nprint()\nprint('Genres:')\nprint(df_info['Genres'].describe())\nprint()\nprint('Last Updated:')\nprint(df_info['Last Updated'].describe())\nprint()\nprint('Current Ver:')\nprint(df_info['Current Ver'].describe())\nprint()\nprint('Android Ver:')\nprint(df_info['Android Ver'].describe())\nprint()","73b4183c":"df_info.loc[df_info.App=='Tiny Scanner - PDF Scanner App']\ndf_info[df_info.duplicated(keep='first')]\nprint(len(df_info))\ndf_info.drop_duplicates(subset='App', inplace=True)\nif(df_info.App=='Life Made WI-Fi Touchscreen Photo Frame').any():\n    df_info.drop(10472,inplace=True)\nif(df_info.App=='Command & Conquer: Rivals').any():\n    df_info.drop(9148,inplace=True)\nprint(len(df_info))","b9606eb9":"#App\ndf_info.App = df_info.App.apply(lambda x: str(x))\n#Category\ndf_info.Category = df_info.Category.apply(lambda x: str(x))\n#Rating\ndf_info.Rating = df_info.Rating.apply(lambda x: float(x))\nprint('NaN Ratings:')\nprint(len(df_info.loc[pd.isna(df_info.Rating)]))\n#Reviews\ndf_info.Reviews = df_info.Reviews.apply(lambda x: int(x))\n#Size : Remove 'M', Convert 'k'\ndf_info.Size = df_info.Size.apply(lambda x: str(x))\nprint('Apps having Varies with device as size:')\nprint(len(df_info.loc[df_info.Size=='Varies with device']))\ndf_info.Size = df_info.Size.apply(lambda x: str(x).replace('Varies with device', 'NaN') if 'Varies with device' in str(x) else x)\ndf_info.Size = df_info.Size.apply(lambda x: str(x).replace('M', '') if 'M' in str(x) else x)\ndf_info.Size = df_info.Size.apply(lambda x: str(x).replace(',', '') if 'M' in str(x) else x)\ndf_info.Size = df_info.Size.apply(lambda x: float(str(x).replace('k', '')) \/ 1000 if 'k' in str(x) else x)\ndf_info.Size = df_info.Size.apply(lambda x: round(float(x),2))\n#Installs: Remove + and ,\ndf_info.Installs = df_info.Installs.apply(lambda x: x.replace('+', '') if '+' in str(x) else x)\ndf_info.Installs = df_info.Installs.apply(lambda x: x.replace(',', '') if ',' in str(x) else x)\ndf_info.Installs = df_info.Installs.apply(lambda x: int(x))\n#Type\ndf_info.Type = df_info.Type.apply(lambda x: str(x))\n#Price\ndf_info.Price = df_info.Price.apply(lambda x: x.replace('$', '') if '$' in str(x) else x)\ndf_info.Price = df_info.Price.apply(lambda x: int(round(float(x))))\n#Content Rating\ndf_info['Content Rating'] = df_info['Content Rating'].apply(lambda x: str(x))\ndf_info['Content Rating'] = df_info['Content Rating'].apply(lambda x: x.replace('Everyone 10+', '10+') if 'Everyone 10+' in str(x) else x)\ndf_info['Content Rating'] = df_info['Content Rating'].apply(lambda x: x.replace('Teen', '13+') if 'Teen' in str(x) else x)\ndf_info['Content Rating'] = df_info['Content Rating'].apply(lambda x: x.replace('Mature 17+', '17+') if 'Mature 17+' in str(x) else x)\ndf_info['Content Rating'] = df_info['Content Rating'].apply(lambda x: x.replace('Adults only 18+', '18+') if 'Adults only 18+' in str(x) else x)\ndf_info.Genres.astype('str')\npd.to_datetime(df_info['Last Updated'])\nprint('Data shape:')\nprint(df_info.shape)\ndf_info.sample(5)\n","f2828504":"df_info.describe(include=[np.object]).round(1).transpose()","792b43b4":"df_reviews=pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv')\ndf_reviews.head()","cdb5948b":"df_reviews.sample(5)","31a953c2":"df_reviews.tail()","ed92c7e8":"print('App:')\nprint(df_reviews['App'].describe())\nprint()\nprint('Translated_Review:')\nprint(df_reviews['Translated_Review'].describe())\nprint()\nprint('Sentiment:')\nprint(df_reviews['Sentiment'].describe())\nprint()\nprint('Sentiment_Polarity:')\nprint(df_reviews['Sentiment_Polarity'].describe())\nprint()\nprint('Sentiment_Subjectivity:')\nprint(df_reviews['Sentiment_Subjectivity'].describe())\nprint()","fdc44ac4":"df_reviews.columns","79fd2578":"print(df_reviews.shape)\nprint('NaN Translated_Review:')\nprint(len(df_reviews.loc[pd.isna(df_reviews.Translated_Review)]))","d1c97ebb":"df_reviews=df_reviews.dropna()\nprint(df_reviews.shape)","55b8b340":"df_reviews.sample(5)","e0597801":"round(df_reviews.describe(),0)","9e4039a4":"df_reviews.describe(include=[np.object]).round(1)","dfd7ca8b":"import math\nimport scipy.stats as stats\nimport plotly\nimport plotly.graph_objs as go\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nplotly.offline.init_notebook_mode(connected=True)\n%matplotlib inline\nimport matplotlib.style\nimport matplotlib as mpl\nmpl.style.use('default')","8d1e7dea":"df=df_info['Category'].value_counts()\ndf","8cb73da8":"df_info['Category'].value_counts().plot(kind='barh',figsize=(4,8))\nplt.title('No of apps in each category')\nplt.xlabel('No of apps')\nplt.ylabel('Category')\nplt.show()","a5e928d2":"df.describe()","db45eaa0":"df_info['Category'].describe()","9c907341":"df_info['Rating'].hist()\nplt.xlabel('Rating')\nplt.show()","19ecc528":"df_info['Rating'].describe()","e8239421":"mean=df_info.Rating.mean()\nvariance=df_info.Rating.var()\nstdDev = math.sqrt(variance)\nx = np.linspace(mean - stdDev, mean + stdDev, 100)\nplt.plot(x, stats.norm.pdf(x, mean, stdDev))\nplt.show()","7a186047":"df_info['Reviews'].hist()","02704ba5":"df=df_info[df_info['Reviews']>=10000000]\ndf['Reviews'].hist()","7d1348ee":"df_info['Size'].describe()","37135fe5":"df_info.Size.hist()","15561fc3":"df_info.Size.value_counts(bins=[0,20,40,60,80,100])","91562db0":"df_info.Installs.hist()","c119d42f":"df_info.Installs.value_counts(bins=[0,100000000,500000000,1000000000])","efadb309":"df_info.Type.value_counts()","f15be220":"df=df_info[df_info['Price']>0]\ndf.Price.describe()","9305fd35":"df.Price.hist()","9cca31c4":"df_info['Content Rating'].value_counts()","7236537b":"df_info.Genres.value_counts()","e43dd44b":"df_info['Android Ver'].value_counts()","62db4c81":"np.warnings.filterwarnings('ignore')\nsns.set()\nsns.pairplot(df_info,hue='Type')\nplt.show()","a954bf12":"number_of_apps_in_category = df_info['Category'].value_counts().sort_values(ascending=True)\n\ndata = [go.Pie(\n        labels = number_of_apps_in_category.index,\n        values = number_of_apps_in_category.values,\n        hoverinfo = 'label+value'    \n)]\nplotly.offline.iplot(data, filename='active_category')","a5ee1c9d":"groups = df_info.groupby('Category').filter(lambda x: len(x) > 292).reset_index()\narray = groups['Rating'].hist(by=groups['Category'], sharex=True, figsize=(20,20))","67d840bf":"df=df_info.groupby(['Category']).filter(lambda x: len(x) > 292).reset_index()\ndf=df.groupby(['Category']).mean()\ndf","801fa8f0":"groups = df_info.groupby('Category').filter(lambda x: len(x) >= 292).reset_index()\nprint('Average rating = ', np.nanmean(list(groups.Rating)))\nc = ['hsl('+str(h)+',50%'+',50%)' for h in np.linspace(0, 720, len(set(groups.Category)))]\n\nlayout = {'title' : 'App ratings across major categories',\n        'xaxis': {'tickangle':-40},\n        'yaxis': {'title': 'Rating'},\n          'plot_bgcolor': 'rgb(250,250,250)',\n          'shapes': [{\n              'type' :'line',\n              'x0': -.5,\n              'y0': np.nanmean(list(groups.Rating)),\n              'x1': 19,\n              'y1': np.nanmean(list(groups.Rating)),\n              'line': { 'dash': 'dashdot'}\n          }]\n          }\n\ndata = [{\n    'y': df_info.loc[df_info.Category==category]['Rating'], \n    'type':'violin',\n    'name' : category,\n    'showlegend':False,\n    #'marker': {'color': 'Set2'},\n    } for i,category in enumerate(list(set(groups.Category)))]\n\nplotly.offline.iplot({'data': data, 'layout': layout})","1cc9e3f8":"df['Rating'].sort_values(ascending=True).plot(kind='barh',figsize=(4,4))\nplt.title('Average Rating in each category')\nplt.xlabel('Average Rating')\nplt.ylabel('Category')\nplt.show()","f6a897b4":"df['Price'].sort_values(ascending=True).plot(kind='barh',figsize=(5,5))\nplt.title('Average Price in each category')\nplt.xlabel('Average Price')\nplt.ylabel('Category')\nplt.show()","2a94cb64":"df['Size'].sort_values(ascending=True).plot(kind='barh',figsize=(5,5))\nplt.title('Average Size in each category')\nplt.xlabel('Average Size')\nplt.ylabel('Category')\nplt.show()","4d868729":"df['Installs'].sort_values(ascending=True).plot(kind='barh',figsize=(5,5))\nplt.title('Average Installs in each category')\nplt.xlabel('Average Installs')\nplt.ylabel('Category')\nplt.show()","e864bb0b":"df['Reviews'].sort_values(ascending=True).plot(kind='barh',figsize=(5,5))\nplt.title('Average Reviews in each category')\nplt.xlabel('Average Reviews')\nplt.ylabel('Category')\nplt.show()","a3cf4528":"fig, ax = plt.subplots(figsize=(5,8))\ns=sns.scatterplot(x=\"Rating\", y=\"Category\", hue=\"Type\", data=df_info, ax=ax);\nplt.title('Rating in each category')\nplt.draw()\nplt.show()","ba216ba4":"fig, ax = plt.subplots(figsize=(4,8))\ns=sns.scatterplot(x=\"Installs\", y=\"Category\", hue=\"Type\", data=df_info, ax=ax);\nplt.title('No of Installs in each category')\nplt.xlabel('No of Installs')\nplt.draw()\nplt.show()","a502b517":"fig, ax = plt.subplots(figsize=(5,5))\ns=sns.scatterplot(x=\"Price\", y=\"Rating\", hue=\"Type\", data=df_info, ax=ax)\nplt.title('Price vs Rating')\nplt.draw()\nplt.show()","f8d9aa2b":"fig, ax = plt.subplots(figsize=(5,5))\ns=sns.scatterplot(x=\"Size\", y=\"Rating\", hue=\"Type\", data=df_info);\nplt.title('Size vs Rating')\nplt.draw()\nplt.show()","ec24a322":"fig, ax = plt.subplots(figsize=(5,3))\ns=sns.scatterplot(x=\"Rating\", y=\"Reviews\", hue=\"Type\", data=df_info, ax=ax);\nplt.title('Reviews vs Rating')\nplt.draw()\nplt.show()","4a0a0028":"df_info_rating=df_info[df_info.Rating<=2.5]\nnumber_of_apps_in_category = df_info_rating['Category'].value_counts().sort_values(ascending=True)\n\ndata = [go.Pie(\n        labels = number_of_apps_in_category.index,\n        values = number_of_apps_in_category.values,\n        hoverinfo = 'label+value'    \n)]\n\nplotly.offline.iplot(data, filename='active_category')","b266fb8a":"fig, ax = plt.subplots(figsize=(5,8))\ns=sns.scatterplot(x=\"Reviews\", y=\"Category\", hue=\"Type\", data=df_info, ax=ax);\nplt.draw()\nplt.show()","0f06d49c":"fig, ax = plt.subplots(figsize=(5,8))\ns=sns.scatterplot(x=\"Installs\", y=\"Category\", hue=\"Type\", data=df_info, ax=ax);\nplt.draw()\nplt.show()","c584f5c3":"fig, ax = plt.subplots(figsize=(5,3))\ns=sns.scatterplot(x=\"Price\", y=\"Installs\", hue=\"Type\", data=df_info, ax=ax);\nplt.title('Price vs Installs')\nplt.draw()\nplt.show()","376d36a1":"df_info['Size']=df_info['Size'].astype(float)\nfig, ax = plt.subplots(figsize=(5,3))\ns=sns.scatterplot(x=\"Size\", y=\"Installs\", hue=\"Type\", data=df_info, ax=ax);\nplt.title('Size vs Installs')\nplt.draw()\nplt.show()","e227b326":"df_info['Size']=df_info['Size'].astype(float)\nfig, ax = plt.subplots(figsize=(5,3))\ns=sns.scatterplot(x=\"Rating\", y=\"Installs\", hue=\"Type\", data=df_info, ax=ax);\nplt.title('Installs vs Ratings')\nplt.draw()\nplt.show()","c6e1cccf":"fig, ax = plt.subplots(figsize=(5,3))\ns=sns.scatterplot(x=\"Reviews\", y=\"Installs\", hue=\"Type\", data=df_info, ax=ax);\nplt.title('Reviews vs Installs')\nplt.draw()\nplt.show()","cbd6345f":"df_reviews['Sentiment'].value_counts()","c231703c":"df_reviews['Sentiment'].value_counts().plot(kind='bar',figsize=(3,3))\nplt.title('Sentiment Count')\nplt.xlabel('Sentiment')\nplt.ylabel('Count')","34cc7bb4":"df_reviews['Sentiment_Polarity'].hist()\nplt.title('Sentiment_Polarity Count')\nplt.xlabel('Sentiment_Polarity')\nplt.ylabel('Count')\nplt.show()","c7b1d451":"df_reviews['Sentiment_Subjectivity'].hist()\nplt.title('Sentiment_Subjectivity Count')\nplt.xlabel('Sentiment_Subjectivity')\nplt.ylabel('Count')\nplt.show()\nplt.show()","bc57896c":"text = \" \".join(review for review in df_reviews.Translated_Review)\nprint (\"There are {} words in the combination of all review.\".format(len(text)))","82575530":"wordcloud = WordCloud(max_words=50, background_color=\"white\").generate(text)\nplt.figure(figsize=(5,5))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","e0ae3461":"df=df_reviews[df_reviews['Sentiment']=='Positive']\ntextP = \" \".join(review for review in df.Translated_Review)\nprint (\"There are {} words in the combination of all review.\".format(len(textP)))","40e4607c":"wordcloud = WordCloud(max_words=50, background_color=\"white\").generate(textP)\nplt.figure(figsize=[5,5])\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","ba7ba3c4":"df=df_reviews[df_reviews['Sentiment']=='Neutral']\ntextU = \" \".join(review for review in df.Translated_Review)\nprint (\"There are {} words in the combination of all review.\".format(len(textU)))","2c29c545":"wordcloud = WordCloud(max_words=50, background_color=\"white\").generate(textU)\nplt.figure(figsize=[5,5])\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","0f112c2a":"df=df_reviews[df_reviews['Sentiment']=='Negative']\ntextN = \" \".join(review for review in df.Translated_Review)\nprint (\"There are {} words in the combination of all review.\".format(len(textN)))","6269ed21":"wordcloud = WordCloud(max_words=50, background_color=\"white\").generate(textN)\nplt.figure(figsize=[5,5])\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","cff72744":"fig, ax = plt.subplots(figsize=(15,7))\ns=sns.scatterplot(x=\"Sentiment_Subjectivity\", y=\"Sentiment_Polarity\", hue=\"Sentiment\", data=df_reviews, ax=ax);\nplt.draw()\ns.set_xticklabels(ax.get_xticklabels(),rotation=90)\nax.ticklabel_format(style='plain', axis='y')\nplt.show()","21072b95":"Upon manual analysis i found some garbage records, so i dropped them","0217148e":"Remove *NaN Translated_Review*","61c92169":"Import googleplaystore_user_reviews.csv file into *df_reviews* data frame.","29a96f3f":"* Category vise mean is *292*.\n* So catyegories with no of apps greater than 292 are considered.","486f6c4a":"**Useful Insights from Google Play Store Reviews file**","50ca63ab":"Import googleplaystore.csv file into *df_info* data frame.","0d459fe1":"*Top 5 Words in Reviews are:*\n1. game\n1. good\n1. app\n1. time\n1. greate","bab59441":"*Categories with least apps:*\n5. Arts & Design\n4. Events\n3. Parenting\n2. Comics\n1. Beauty","c529ff3d":"Necessary libraries needed:\n* Numpy is needed for mathematical operations\n* Pandas is used for data set manipulation and analysis\n* Matplotlib and seaborn is used for graphical representation","9abcc341":"Basic Info using describe()","5267c4c8":"For analysis we need to pre process data, encode and normalize attributes, change their data types.\n* NaN and null records of \"Ratings\" attributes has been removed.\n* All Apps \"Size\" has been converted to KB and sign has been removed to allow numerical analysis.\n* Classes are defined for \"Content Rating\" attribute.","30b71601":"*Top categories with most apps:*\n1. Family\n2. Game\n3. Tools\n4. Business\n5. Medical","5b93211a":"Basic info using *describe()*","2503e95b":"This notebook is divided into following sections:\n\n1. Preprocessing of data\n2. EDA (Exploratory data analysis)\n3. Useful Insights from Google Play Store Info file\n4. Useful Insights from Google Play Store Reviews file","39a879ff":"Remove *null* records","950c84a7":"**Preprocessing**","179b699e":"If you visit this kernel, and interested in this topic, please spare a moment to appreciate my effort by having a look at the research paper. You may find some very interesting and useful results: https:\/\/dx.doi.org\/10.14569\/IJACSA.2019.0100644","03ec3c5d":"*Basic correlogram shows:*\n\n* Free apps has higher reviews and ratings\n* Paid apps with higher size has higher ratings\n* Paid Apps has very less reviews\n* Free apps with higher size also has higher reviews\n* No of installs are higher for free apps\n* Higher no of installs has higher reviews\n* Size of paid apps is much more than free apps\n* Free apps also has higher size","8f7a574f":"**Useful Insights from Google Play Store Info file**"}}