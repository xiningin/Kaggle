{"cell_type":{"1e4dd3a3":"code","7c7709a5":"code","17072461":"code","7e57d244":"code","be5361ab":"code","d4fea508":"code","d1ce61db":"code","a0d35ed7":"code","ef1a894b":"code","c957a88d":"code","17471b8f":"code","591fb712":"code","d9fae636":"code","dd48c022":"code","a49cc818":"code","16af25d7":"code","bbec8767":"code","cb36c9b3":"code","90f52baa":"code","3105b4e4":"code","4a4a99e3":"code","415b6051":"code","cdc77ded":"code","53d5d4e6":"code","4f33e82c":"code","d9c9e18b":"code","f24a9d78":"code","75cc8f1e":"code","1ad6ec72":"code","0cbda5ae":"code","a7c4682c":"code","c4520e60":"code","d1801db2":"code","0daec60f":"code","ae46ffeb":"code","acc2db5f":"code","97eb38d6":"code","e1def28e":"code","2baeb8de":"markdown","d3cc4eb2":"markdown","affcf080":"markdown","3e9d43f2":"markdown","01e42dc8":"markdown","88b89142":"markdown","3d18d760":"markdown","1d6d6713":"markdown","a36ab18e":"markdown","1a021321":"markdown","e90e1d0e":"markdown","d4fe3ef3":"markdown","5ef2a986":"markdown","cf8040eb":"markdown","e6a51289":"markdown","b8bd75f4":"markdown","9954d8c5":"markdown","943d51e4":"markdown","0724e624":"markdown","b850d75b":"markdown","37813845":"markdown","c69883a4":"markdown","7054d33c":"markdown","cc6096d3":"markdown","c4dfdd70":"markdown","d669abd0":"markdown","9322bce9":"markdown","f06a1029":"markdown"},"source":{"1e4dd3a3":"import numpy as np\nimport pandas as pd\nimport re\nimport matplotlib.pyplot as plt","7c7709a5":"data = pd.read_csv(\"..\/input\/used-bike-price-in-india\/bikes.csv\")\ndata.head()","17072461":"data.isna().sum()","7e57d244":"cc = []\nfor veh in data.model_name:\n        models = veh.split(\" \")\n        models = \" \".join(models[:len(models)-1]).lower()\n        if re.search('[0-9]*cc',models,flags=re.I) != None:\n                if models[re.search('[0-9]*cc',models,flags=re.I).start():re.search('[0-9]*cc',models,flags=re.I).end()] not in ['cc']:\n                    cc.append(models[re.search('[0-9]*cc',models,flags=re.I).start():re.search('[0-9]*cc',models,flags=re.I).end()])\n                else:\n                    cc.append(models)\n        elif re.search('[0-9]* (cc)',models,flags=re.I) != None:\n                cc.append(models[re.search('[0-9]* (cc)',models,flags=re.I).start():re.search('[0-9]* (cc)',models,flags=re.I).end()] )\n        elif  \"hyosung\" in models:\n                cc.append(models)\n        else:\n                cc.append(models)","be5361ab":"for i in range(len(cc)):\n    if \"1000\" in cc[i]:\n        cc[i] = \"1000cc\"\n    elif \"310\" in cc[i]:\n        cc[i] = \"310cc\"\n    elif \"apache rtr 200\" in cc[i]:\n        cc[i] = \"200cc\"\n    elif \"ns200\" in cc[i]:\n        cc[i] = \"200cc\"\n    elif \"rs200\" in cc[i]:\n        cc[i] = \"200cc\"\n    elif \"220\" in cc[i]:\n        cc[i] = \"220cc\"\n    elif \"400\" in cc[i]:\n        cc[i] = \"400cc\"\n    elif \"250\" in cc[i]:\n        cc[i] = \"250cc\"\n    elif \"125\" in cc[i]:\n        cc[i] = \"125cc\"\n    elif \"160\" in cc[i]:\n        cc[i] = \"160cc\"\n    elif \"150\" in cc[i]:\n        cc[i] = \"150cc\"\n    elif \"350\" in cc[i]:\n        cc[i] = \"350cc\"\n    elif \"200\" in cc[i]:\n        cc[i] = \"200cc\"\n    elif \"100\" in cc[i]:\n        cc[i] = \"100cc\"\n    elif \"180\" in cc[i]:\n        cc[i] = \"180cc\"\n    elif \"110\" in cc[i]:\n        cc[i] = \"110cc\"\n    elif \"390\" in cc[i]:\n        cc[i] = \"390cc\"\n    elif \"135\" in cc[i]:\n        cc[i] = \"135cc\"\n    elif \"r15\" in cc[i]:\n        cc[i] = \"150cc\"\n    elif \"650\" in cc[i]:\n        cc[i] = \"650cc\"\n    elif \"750\" in cc[i]:\n        cc[i] = \"750cc\"\n    elif \"800\" in cc[i]:\n        cc[i] = \"800cc\"\n    elif \"300\" in cc[i]:\n        cc[i] = \"300cc\"\n    elif \"765\" in cc[i]:\n        cc[i] = \"765cc\"\n    elif \"883\" in cc[i]:\n        cc[i] = \"883cc\"\n    elif \"797\" in cc[i]:\n        cc[i] = \"797cc\"\n    elif \"810\" in cc[i]:\n        cc[i] = \"810cc\"\n    elif \"321\" in cc[i]:\n        cc[i] = \"321cc\"\n    elif \"821\" in cc[i]:\n        cc[i] = \"821cc\"\n    elif \"120\" in cc[i]:\n        cc[i] = \"120cc\"\n    elif \"1745\" in cc[i]:\n        cc[i] = \"1745cc\"\n    elif \"899\" in cc[i]:\n        cc[i] = \"899cc\"\n    elif \"900\" in cc[i]:\n        cc[i] = \"900cc\"\n    elif \"302\" in cc[i]:\n        cc[i] = \"302cc\"\n    elif \"959\" in cc[i]:\n        cc[i] = \"959cc\"\n    elif \"600\" in cc[i]:\n        cc[i] = \"600cc\"\n    elif \"502\" in cc[i]:\n        cc[i] = \"502cc\"\n    elif \"um renegade\" in cc[i]:\n        cc[i] = \"279cc\"\n    elif \"hero splendor\" in cc[i]:\n        cc[i] = \"97cc\"\n    elif \"hero passion plus\" in cc[i]:\n        cc[i] = \"97cc\"\n    elif \"yamaha fz\" in cc[i]:\n        cc[i] = \"150cc\"\n    elif \"honda hornet\" in cc[i]:\n        cc[i] = \"184cc\"\n    elif \"royal enfield interceptor\" in cc[i]:\n        cc[i] = \"650cc\"\n    elif \"hero passion pro\" in cc[i]:\n        cc[i] = \"113cc\"\n    elif \"hero passion xpro\" in cc[i]:\n        cc[i] = \"109cc\"\n    elif \"harley-davidson street bob\" in cc[i]:\n        cc[i] = \"1868cc\"\n    elif \"harley-davidson fat bob\" in cc[i]:\n        cc[i] = \"1868cc\"\n    elif \"harley-davidson fat boy\" in cc[i]:\n        cc[i] = \"1868cc\"\n    elif \"harley-davidson street rod\" in cc[i]:\n        cc[i] = \"749cc\"\n    elif \"zx-10r\" in cc[i]:\n        cc[i] = \"1000cc\"\n    elif \"rsv4\" in cc[i]:\n        cc[i] = \"1099cc\"\n    elif \"tvs sport\" in cc[i]:\n        cc[i] = \"109cc\"\n    elif \"tvs star city\" in cc[i]:\n        cc[i] = \"109cc\"\n    elif \"harley-davidson superlow\" in cc[i]:\n        cc[i] = \"883cc\"\n    elif \"harley-davidson roadster\" in cc[i]:\n        cc[i] = \"1202cc\"\n    elif \"harley-davidson forty eight\" in cc[i]:\n        cc[i] = \"1202cc\"\n    elif \"harley-davidson night rod special\" in cc[i]:\n        cc[i] = \"1247cc\"\n    elif \"triumph rocket iii roadster\" in cc[i]:\n        cc[i] = \"2458cc\"\n    elif \"triumph thunderbird lt\" in cc[i]:\n        cc[i] = \"1699cc\"\n    elif \"kawasaki vulcan s black\" in cc[i]:\n        cc[i] = \"649cc\"\n    elif \"mahindra mojo black pearl\" in cc[i]:\n        cc[i] = \"300cc\"\n    elif \"ducati diavel carbon\" in cc[i]:\n        cc[i] = \"1198cc\"\n    elif \"triumph tiger explorer\" in cc[i]:\n        cc[i] = \"1215cc\"\n    elif \"royal enfield continental\" in cc[i]:\n        cc[i] = \"650cc\"\n    elif \"triumph street triple s\" in cc[i]:\n        cc[i] = \"765cc\"\n    elif \"harley-davidson breakout\" in cc[i]:\n        cc[i] = \"1868cc\"\n    elif \"harley-davidson cvo\" in cc[i]:\n        cc[i] = \"1923cc\"","d4fea508":"cc[cc.index('hero karizma 223 cc')] = '223cc'\ncc = [int(i.replace('cc','')) for i in cc]","d1ce61db":"data['cc'] = cc\ndata","a0d35ed7":"np.unique([i.split()[0] for i in data.model_name])","ef1a894b":"data[data.model_name.str.contains(\"BenelliImperiale\") > 0]","c957a88d":"data.model_name.replace('BenelliImperiale 400 2020','Benelli Imperiale 400 2020',inplace=True)\ndata.model_name.replace('BenelliImperiale 400 BS6 2020','Benelli Imperiale 400 BS6 2020',inplace=True)","17471b8f":"data[data.model_name.str.contains(\"Benelli\") > 0]","591fb712":"brands = [i.split()[0] for i in data.model_name]\ndata['brand'] = brands","d9fae636":"data","dd48c022":"data.replace('Ideal',\"Jawa\",inplace=True)\ndata.replace(\"yamaha\",\"Yamaha\",inplace=True)","a49cc818":"mil = data.mileage.to_list()\nmil = [str(i).lower().replace('kmpl','').split(\"-\")[0] for i in mil ]\nmil = [str(i).lower().replace('kms','') for i in mil ]\nmil = [str(i).replace('\\n','') for i in mil ]\nmil = [str(i).strip() for i in mil]\ndata.mileage = mil","16af25d7":"data[data.mileage == 'liquid cooled']","bbec8767":"data.replace('liquid cooled','37.6',inplace=True)","cb36c9b3":"np.unique(data.mileage)","90f52baa":"data[data.mileage == 'nan']","3105b4e4":"data.iloc[144,data.columns.get_loc('mileage')] = \"54\"\ndata.iloc[193,data.columns.get_loc('mileage')] = \"45\"\ndata.iloc[422,data.columns.get_loc('mileage')] = \"62\"\ndata.iloc[1376,data.columns.get_loc('mileage')] = \"25\"\ndata.iloc[1488,data.columns.get_loc('mileage')] = \"40\"\ndata.iloc[1640,data.columns.get_loc('mileage')] = \"25\"\ndata.iloc[2160,data.columns.get_loc('mileage')] = \"18\"\ndata.iloc[2277,data.columns.get_loc('mileage')] = \"35\"\ndata.iloc[4646,data.columns.get_loc('mileage')] = \"65\"\ndata.iloc[4655,data.columns.get_loc('mileage')] = \"45\"\ndata.iloc[7394,data.columns.get_loc('mileage')] = \"40\"","4a4a99e3":"data.replace('','0',inplace=True)","415b6051":"null_brands = np.unique(data[data.mileage == '0'].brand)\nfor brand in null_brands:\n    values = data[data.brand == brand].mileage.to_numpy()\n    values = np.delete(values,np.where(values == '0'))\n    if(len(values) == 0):\n        print(brand)\n        mean=0\n    else:\n        mean = values.astype(\"float32\").mean()\n        \n    for index,rows in data[data.brand == brand].iterrows():\n        if data.iloc[index,data.columns.get_loc(\"mileage\")] == '0':\n            data.iloc[index,data.columns.get_loc(\"mileage\")] = mean","cdc77ded":"data.iloc[2023,data.columns.get_loc(\"mileage\")] = \"30\"\ndata.iloc[2832,data.columns.get_loc(\"mileage\")] = \"30\"\ndata.iloc[3400,data.columns.get_loc(\"mileage\")] = \"30\"\ndata.iloc[3827,data.columns.get_loc(\"mileage\")] = \"30\"\ndata.iloc[4154,data.columns.get_loc(\"mileage\")] = \"30\"\ndata.iloc[4392,data.columns.get_loc(\"mileage\")] = \"30\"\ndata.iloc[5435,data.columns.get_loc(\"mileage\")] = \"30\"\ndata.iloc[5586,data.columns.get_loc(\"mileage\")] = \"17\"\ndata.iloc[5727,data.columns.get_loc(\"mileage\")] = \"30\"\ndata.iloc[6561,data.columns.get_loc(\"mileage\")] = \"30\"","53d5d4e6":"data.iloc[3773,data.columns.get_loc(\"mileage\")] = \"26\"\ndata.iloc[5031,data.columns.get_loc(\"mileage\")] = \"26\"","4f33e82c":"data.iloc[5584,data.columns.get_loc(\"mileage\")] = \"35\"","d9c9e18b":"for index,rows in data[data.location.isna()].iterrows():\n    data.iloc[index,data.columns.get_loc(\"location\")] = data[data.brand == rows.brand].dropna().location.mode()","f24a9d78":"val=  data.power.isna()\nnp.where(val == True)","75cc8f1e":"data.iloc[135,data.columns.get_loc(\"power\")] = \"28\"\ndata.iloc[1627,data.columns.get_loc(\"power\")] = \"14\"\ndata.iloc[1691,data.columns.get_loc(\"power\")] = \"18\"\ndata.iloc[1716,data.columns.get_loc(\"power\")] = \"18\"\ndata.iloc[2442,data.columns.get_loc(\"power\")] = \"87\"\ndata.iloc[2487,data.columns.get_loc(\"power\")] = \"18\"\ndata.iloc[2638,data.columns.get_loc(\"power\")] = \"16\"\ndata.iloc[2659,data.columns.get_loc(\"power\")] = \"64\"\ndata.iloc[2714,data.columns.get_loc(\"power\")] = \"18\"\ndata.iloc[2819,data.columns.get_loc(\"power\")] = \"87\"\ndata.iloc[3088,data.columns.get_loc(\"power\")] = \"18\"\ndata.iloc[3977,data.columns.get_loc(\"power\")] = \"37.5\"\ndata.iloc[4393,data.columns.get_loc(\"power\")] = \"18\"\ndata.iloc[4425,data.columns.get_loc(\"power\")] = \"111\"\ndata.iloc[4591,data.columns.get_loc(\"power\")] = \"75.1\"\ndata.iloc[4760,data.columns.get_loc(\"power\")] = \"18\"\ndata.iloc[5626,data.columns.get_loc(\"power\")] = \"65\"\ndata.iloc[5673,data.columns.get_loc(\"power\")] = \"89.2\"\ndata.iloc[5694,data.columns.get_loc(\"power\")] = \"64\"\ndata.iloc[5788,data.columns.get_loc(\"power\")] = \"11\"\ndata.iloc[5950,data.columns.get_loc(\"power\")] = \"26.21\"\ndata.iloc[6155,data.columns.get_loc(\"power\")] = \"15.2\"\ndata.iloc[6321,data.columns.get_loc(\"power\")] = \"26.21\"\ndata.iloc[6781,data.columns.get_loc(\"power\")] = \"28.15\"\ndata.iloc[6853,data.columns.get_loc(\"power\")] = \"15.2\"\ndata.iloc[7306,data.columns.get_loc(\"power\")] = \"10.70\"\ndata.iloc[7442,data.columns.get_loc(\"power\")] = \"7.4\"\ndata.iloc[7513,data.columns.get_loc(\"power\")] = \"23.17\"\ndata.iloc[7783,data.columns.get_loc(\"power\")] = \"24.13\"\ndata.iloc[7796,data.columns.get_loc(\"power\")] = \"7.4\"\ndata.iloc[7801,data.columns.get_loc(\"power\")] = \"8.24\"","1ad6ec72":"for index,rows in data.iterrows():\n    if \"bhp\" in str(data.iloc[index,data.columns.get_loc(\"power\")]).lower():\n        data.iloc[index,data.columns.get_loc(\"power\")] = data.iloc[index,data.columns.get_loc(\"power\")].replace(\"bhp\",'')\n    if \"hp\" in str(data.iloc[index,data.columns.get_loc(\"power\")]).lower():\n        data.iloc[index,data.columns.get_loc(\"power\")] = float(data.iloc[index,data.columns.get_loc(\"power\")].split(\" \")[0].replace(\"hp\",\"\").split(\"-\")[0]) * 0.986\n    if \"kw\" in str(data.iloc[index,data.columns.get_loc(\"power\")]).lower():\n        data.iloc[index,data.columns.get_loc(\"power\")] = float(data.iloc[index,data.columns.get_loc(\"power\")].split(\" \")[0].lower().replace(\"kw\",\"\")) * 1.341\n    if \"ps\" in str(data.iloc[index,data.columns.get_loc(\"power\")]).lower():\n        data.iloc[index,data.columns.get_loc(\"power\")] = float(data.iloc[index,data.columns.get_loc(\"power\")].split(\" \")[0].lower().replace(\"ps\",\"\")) * 0.99\n    if \"@\" in str(data.iloc[index,data.columns.get_loc(\"power\")]).lower():\n        data.iloc[index,data.columns.get_loc(\"power\")] = data.iloc[index,data.columns.get_loc(\"power\")].split(\"@\")[0].strip()","0cbda5ae":"data.isna().sum()","a7c4682c":"data","c4520e60":"kms = data.kms_driven.to_numpy()\nfor i in range(len(kms)):\n    kms[i] = kms[i].split(\" \")[0]","d1801db2":"for i in range(len(kms)):\n    if str(kms[i]).lower() in [\"mileage\",\"yes\"]:\n        kms[i] = np.nan\ndata['kms_driven'] = kms\nmean = kms[~np.isnan(kms.astype('float'))].astype('float').mean()\ndata.kms_driven.fillna(value = mean,inplace=True)","0daec60f":"data.isna().sum()","ae46ffeb":"data = data.astype({\"model_name\" : str, \n                \"model_year\" : int,\n                \"kms_driven\" : int,\n                \"owner\"      : str,\n                \"location\"   : str,\n                \"mileage\"    : float,\n                \"power\"      : float,\n                \"price\"      : int,\n                \"cc\"         : int,\n                \"brand\"      : str})","acc2db5f":"data.info()","97eb38d6":"pd.set_option(\"display.float\",str)\ndata.describe().drop([\"model_year\"],axis=1).round(2)","e1def28e":"\nplt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nx,count = np.unique(data.model_year,return_counts=True)\nplt.bar(x,count)\nplt.title(\"Year wise split up of Bikes\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Count\")\n\nplt.subplot(1,2,2)\nx,count = np.unique(data.brand,return_counts=True)\nplt.bar(x,count)\nplt.title(\"Brand wise Split up of Bikes\")\nplt.xlabel(\"Brand\")\nplt.xticks(rotation=90)\nplt.ylabel(\"Count\")\n\n\nplt.figure(figsize=(20,4))\nx,count = np.unique(data.owner,return_counts=True)\nplt.bar(x,count)\nplt.title(\"Owner type of Bikes\")\nplt.xlabel(\"Owner Type\")\nplt.ylabel(\"Count\")\nplt.tight_layout()\nplt.show()\n\nplt.figure(figsize=(20,5))\nx,count = np.unique(data.cc,return_counts=True)\nplt.bar([str(i) for i in x],count)\nplt.title(\"CC of Bikes\")\nplt.xlabel(\"CC\")\nplt.xticks(rotation=90)\nplt.ylabel(\"Count\")\nplt.show()\n","2baeb8de":"<h1>Used Bike Prices - EDA and Modelling<\/h1>\n<p>Used Bike Price prediction using Machine Learning.<\/p>\n<img src=\"https:\/\/www.bajajfinservmarkets.in\/discover\/wp-content\/uploads\/2019\/09\/Buyers-Guide-2-wheeler-finance-8.png\">","d3cc4eb2":"<h2>CC from Model name<\/h2>\n<p>From the model name, following can be extracted : \n<ul>\n    <li>CC of the bike<\/li>\n    <li>Brand and Model name<\/li>\n<\/ul>\n<\/p>","affcf080":"<p>Mileage values taken from internet<\/p>","3e9d43f2":"<h2>Fixing Data Types<\/h2>","01e42dc8":"<p>Replace missing location entries with mode values<\/p>","88b89142":"<h2>Preprocessing KMS driven<\/h2>","3d18d760":"<h2>Preprocessing Mileage<\/h2>","1d6d6713":"<p>Split the model name by spaces and take first split as the brand name<\/p>","a36ab18e":"<p>There are inconsistent entries within the kms_drive column - few are given as mileage value and otheres are just \"yes\" strinngs. Replace them with average distance driven for a standard used bike.<\/p>","1a021321":"<h2>Statistics<\/h2>","e90e1d0e":"<p>Depending on column, cast each one to respective data type like float, int or string.<\/p>","d4fe3ef3":"<h1 style=\"margin:auto;text-align:center;background-color:rgb(232, 230, 223);border-radius : 5px;padding-top : 25px;padding-bottom : 25px; width : 80%;font-size : 25px;\">Thank you for reading! Upvote and share my notebook if you liked it<\/h1>","5ef2a986":"<p>Benelli has inconsistent naming convetion shows repeating values. Preprocess them to generate spacing between brand and model name<\/p>","cf8040eb":"<p>Few power entries does not have any value - enter them manually using values from internet.<\/p>","e6a51289":"<h1>Data Engineering<\/h1>","b8bd75f4":"<p>Few values have no mileage given to taken mean, so input them manually - values taken from internet.<\/p>","9954d8c5":"<h2>Preprocessing Vehicle Power<\/h2>","943d51e4":"<h1>Data Loading<\/h1>","0724e624":"<p>Few entires have just an empty string as the input. Replace them to 0 and further modify it as teh average mileage of that brand bikes.<\/p>","b850d75b":"<h1>Exploratory Data Analysis<\/h1>","37813845":"<p>Remove the CC from names and convert all to integer<\/p>","c69883a4":"<p>Few entries require manual processing because of their different naming convention and non availability of engine cc information in their naming<\/p>","7054d33c":"<p>Replacing wrong values with their correct ones.<\/p>","cc6096d3":"<h2>Extracing Brand from model name<\/h2>","c4dfdd70":"<p>Distance driven is represented as a string with units. Remove the units and keep only the distance value.<\/p>","d669abd0":"<p><b>Inference : <\/b>The year wise split up shows a skewed graph with the number of models rising from the year <b>2000<\/b> with <b>2015<\/b> being the highest and the number getting floored from there onwards until 2020. Brands belonging to <b>Bajaj<\/b> and <b>Royal Enfield<\/b> are the highest in stock followed by <b>Yamaha<\/b> and <b>Hero<\/b>. The majority of bikes belong to <b>First Owner<\/b> which means it has been owned only by one customer. <b>150 cc<\/b> and <b>350 cc<\/b> bikes are the highest in number followed by other common capacities like <b>200 cc<\/b> and below. <b>500 cc<\/b> stands out in the mid range power. Superbikes ( 1000 cc and above) are very less in count comparatively.<\/p>","9322bce9":"<h2>Preprocessing Location<\/h2>","f06a1029":"<p>Resolve inconsistent naming conventions in power column by removing character values like units -bhp, kw, ps etc. Similarly, few entries are in different units - Kw and PS, convert them to bhp for consistency<\/p>"}}