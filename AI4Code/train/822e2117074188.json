{"cell_type":{"39785062":"code","e8c0ca64":"code","8b01e7a2":"code","a6303c59":"code","d20df28b":"code","0c948702":"code","49bd236d":"code","1fbaafe3":"code","2e90cc97":"code","be5d507f":"code","b9926c93":"code","53960419":"code","353a1ce2":"code","453ca717":"code","0bcc24fa":"code","c9c3f13c":"code","2924ba51":"markdown","aa786f2f":"markdown","7fcc7843":"markdown","12508452":"markdown"},"source":{"39785062":"#here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nfrom  tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport os\nfrom tensorflow.keras.callbacks import EarlyStopping","e8c0ca64":"#  path of train,test,validation dir\nsrc_dir = '..\/input\/chest-xray-pneumonia\/chest_xray\/'\nTraindir=os.path.join(src_dir,'train')\nTestdir=os.path.join(src_dir,'test')\nValdir=os.path.join(src_dir,'val')\n\nTraindirNo= os.path.join(Traindir,'NORMAL')\nTraindirp= os.path.join(Traindir,'PNEUMONIA')\n","8b01e7a2":"print('Normal:',len(os.listdir(TraindirNo)) ,'pneumonia:',len(os.listdir(Traindirp)))","a6303c59":"#imagedatagenerator for rescaling the pixel of image between[0,1] and increasing dataset\n#class mode (binary) as we have two output class\ntrain_data_generator= ImageDataGenerator(rescale=1.\/255,zoom_range=0.2,vertical_flip=True)\ntrain_generator=train_data_generator.flow_from_directory(directory=Traindir, \n                                         batch_size=100,\n                                         target_size =(150,150),\n                                         shuffle=True,\n\n                                                         class_mode = 'binary')\nVal_data_generator= ImageDataGenerator(rescale=1.\/255)\ntest_generator = Val_data_generator.flow_from_directory(\n       directory = Testdir,\n       target_size = (150, 150),\n       batch_size = 100,\n       class_mode = 'binary')\n\nVal_generator = Val_data_generator.flow_from_directory(\n       directory = Valdir,\n       target_size = (150, 150),\n       batch_size = 100,\n       class_mode = 'binary')","d20df28b":"from sklearn.utils import class_weight\nimport numpy as np\n\nclass_weights = class_weight.compute_class_weight(\n           'balanced',\n            np.unique(train_generator.classes), \n            train_generator.classes)","0c948702":"class_weights","49bd236d":"#fit_generator parameter take dict of class weights\nclass_weights = dict(enumerate(class_weights))\n","1fbaafe3":"#model\nmodel= tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(16, (3,3), activation='relu',input_shape=(150, 150, 3)),\n                                   tf.keras.layers.MaxPooling2D(2,2),\n                                   \n                                   tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n                                   tf.keras.layers.MaxPooling2D(2,2),\n                                   \n                                   tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n                                   tf.keras.layers.MaxPooling2D(2,2),\n                                   tf.keras.layers.Dropout(0.3),\n                                    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n                                   tf.keras.layers.MaxPooling2D(2,2),\n    \n                                   tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n                                   tf.keras.layers.MaxPooling2D(2,2),\n                                   \n                                   tf.keras.layers.Dropout(0.3),\n                                   tf.keras.layers.Flatten(),\n                                   tf.keras.layers.Dense(512, activation='relu'), \n                                   tf.keras.layers.Dense(2,activation='softmax')\n                                  \n                                  ])\nmodel.summary()\n\nmodel.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n    ,optimizer='adam',metrics=['accuracy'])","2e90cc97":"from tensorflow.keras.callbacks import EarlyStopping\nes = EarlyStopping(monitor='val_loss',mode='min')\nhistory=model.fit_generator(train_generator,epochs=30,class_weight=class_weights,validation_data = Val_generator, callbacks=[es])","be5d507f":"import matplotlib.pyplot as plt\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range=range(3)\nplt.figure(figsize=(8,8))\nplt.subplot(1,2,1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","b9926c93":"test_generator.reset()\nmetric=model.evaluate_generator(test_generator)","53960419":"print('loss rate at evaluation data :', metric[0])\nprint('accuracy rate at evaluation data :', metric[1])","353a1ce2":"# softmax classifier generates the probablity for each class , class having higher value will be\n#result\npred=model.predict_generator(test_generator)","453ca717":"predicted_class = np.argmax(pred,axis=1)","0bcc24fa":"l = dict((v,k) for k,v in test_generator.class_indices.items())\nprednames = [l[k] for k in predicted_class]\nfilenames = test_generator.filenames\nfinaldf = pd.DataFrame({'Filename': filenames,'Prediction': prednames})","c9c3f13c":"#  prediction for test data\nfinaldf","2924ba51":"**Evaluation on testing data**","aa786f2f":"This Notebook analyze the x-ray and specify whether person has pneumonia or not.  ImageDataGenerator has been used for increasing the training data set.. Do upvote!","7fcc7843":"Check the length of images in both normal and pneumonia ,","12508452":"As data is unblances will be computing weightage of each class  , so that data will become balanced "}}