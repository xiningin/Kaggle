{"cell_type":{"de05e158":"code","b7f738ba":"code","19a1ae6c":"code","7fb46ee1":"code","2a9d5617":"code","4b7af219":"code","99f1322e":"code","3119058f":"code","5fc360a5":"code","00193d2f":"code","ff82f455":"code","9a75a70c":"code","6ecd492b":"code","145f1007":"code","0c497782":"code","519bac73":"code","d3319d70":"code","b45869d3":"code","d4e7acab":"code","61654bfa":"code","6382c313":"code","7aa91b93":"code","894a111a":"code","1a3666be":"code","135bb987":"code","cd14a941":"code","b3957ad3":"code","d923ee38":"code","14d1d61c":"code","efe9c2f4":"code","a157417a":"code","6fe2787f":"code","a3cf32ea":"code","04c8768d":"code","4fee3b6d":"code","3626d717":"code","c8fc3ec9":"code","a95aaaca":"code","9f0c0b47":"code","e878d751":"code","8d65ccb7":"code","bb81e8e9":"code","95c0a5dc":"code","8bc5bb50":"code","175f3d4a":"code","0b371ec8":"code","eec1617a":"code","2a996dd8":"code","df9023e3":"code","e9e18813":"code","7f8db959":"code","371a7f55":"code","2532494b":"code","d31d85f0":"code","7c162349":"code","6801185f":"code","17f1cc95":"code","ab384fb2":"code","b2aa529a":"code","af442265":"code","8fe794ac":"code","df65612a":"code","0419fb3b":"code","580e5204":"code","de82a5be":"code","fa6aac31":"code","e55c85a8":"code","710701d8":"markdown","5b221cf5":"markdown","36a6ab5e":"markdown","b7c9557d":"markdown","7e09d4a0":"markdown","86f1e095":"markdown","36aeffa1":"markdown","62e82b92":"markdown","811c9e86":"markdown","8c9a0418":"markdown","0645a9ed":"markdown","020572b8":"markdown","290b96ef":"markdown","fd3103d8":"markdown","0401e6fb":"markdown","85e69733":"markdown","51a2cff5":"markdown","44c6c7bb":"markdown","fb3eb7ea":"markdown","ab9455d4":"markdown","29716c56":"markdown","3fe036e2":"markdown","3c357af4":"markdown","dbf65d5b":"markdown","2df75035":"markdown","9f064da2":"markdown","ed4b7b03":"markdown","38001222":"markdown","ca550078":"markdown","e031f6c0":"markdown"},"source":{"de05e158":"# import all necessary libraries\nimport pandas as pd\nimport numpy as np\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#\nfrom sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.utils import resample\n\n# model metrics \nfrom sklearn.model_selection import cross_val_score, cross_val_predict\nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import f1_score\n\n# import models\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import LinearSVC\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.linear_model import LinearRegression, LogisticRegression, SGDClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.ensemble import AdaBoostClassifier\n\nimport os\n\nimport warnings\nwarnings.filterwarnings('ignore')","b7f738ba":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","19a1ae6c":"# load the data\ndf = pd.read_csv('\/kaggle\/input\/bank-marketing-dataset\/bank.csv')","7fb46ee1":"df.head()","2a9d5617":"df.shape","4b7af219":"# get a description of our features\ndf.info()","99f1322e":"df.describe()","3119058f":"# create an additional dataframe that holds features upon exploration\ndf_features = pd.DataFrame()","5fc360a5":"# check the datatypes of our features\ndf.dtypes","00193d2f":"# describe our numerical data\ndf.describe()","ff82f455":"# describe our categorical data\ndf.describe(include=['O'])","9a75a70c":"df.head()","6ecd492b":"# used to convert columns with values (no, yes) into numerical values of (0, 1)\ndef yes_no_encoder(data):\n    if 'no' in data:\n        data = 0\n    elif 'yes' in data:\n        data = 1\n    \n    return data","145f1007":"# convert our categorical target to numeric\ndf['deposit'] = df['deposit'].apply(yes_no_encoder)","0c497782":"df_features['deposit'] = df['deposit']","519bac73":"fig = plt.figure(figsize=(20, 1))\nsns.countplot(y='deposit', data=df)\nprint(df.deposit.value_counts())","d3319d70":"df_features['age'] = df['age']","b45869d3":"sns.distplot(df_features['age'], kde=False)","d4e7acab":"df_features['job'] = df['job']","61654bfa":"plt.figure(figsize=(15, 5))\nsns.countplot(y='job', data=df_features)","6382c313":"df_features['marital'] = df['marital']","7aa91b93":"# returns percentage distribution of all categorical items in a specified column\ndef value_perc(feature):\n    perc = feature.value_counts(normalize=True).reset_index()\n    perc.columns = ['value', 'perc']\n    perc['perc'] = round( perc['perc'] * 100 , 2)\n    return perc","894a111a":"sns.countplot(y='marital', data=df_features)\nprint(value_perc(df_features.marital))","1a3666be":"df_features['education'] = df['education']","135bb987":"sns.countplot(y='education', data=df_features)","cd14a941":"df_features['default'] = df['default']","b3957ad3":"# conver categorical default values to numeric values\ndf_features['default'] = df_features['default'].apply(yes_no_encoder)","d923ee38":"sns.countplot(y='default', data=df_features)\nprint(value_perc(df['default']))","14d1d61c":"df_features['balance'] = df['balance']","efe9c2f4":"sns.distplot(df_features['balance'])\nprint(\"The mean balance: \", round(df_features['balance'].mean(), 2))\nprint(\"The mean balance: \", round(df_features['balance'].std(), 2))","a157417a":"df.head()","6fe2787f":"df_features['housing'] = df['housing']","a3cf32ea":"df_features['housing'] = df_features['housing'].apply(yes_no_encoder) # convert yes\/no to numeric equivalent","04c8768d":"sns.countplot(y='housing', data=df)\nprint(value_perc(df['housing']))","4fee3b6d":"df_features['loan'] = df['loan']","3626d717":"df_features['loan'] = df_features['loan'].apply(yes_no_encoder)","c8fc3ec9":"sns.countplot(y='loan', data=df)","a95aaaca":"df_features['contact'] = df['contact']","9f0c0b47":"sns.countplot(y='contact', data=df_features)","e878d751":"df_features['day'] = df['day']","8d65ccb7":"sns.distplot(df_features['day'], kde=False)\nprint(\"Mean number of day: \", df_features['day'].mean())\nprint(\"Mean number of day: \", df_features['day'].std())","bb81e8e9":"df_features['month'] = df['month']","95c0a5dc":"sns.countplot(y='month', data=df_features)\nprint(value_perc(df_features['month']))","8bc5bb50":"df_features['duration'] = df['duration']","175f3d4a":"sns.distplot(df_features['duration'])\nprint(\"Mean duration: \", df_features['duration'].mean())\nprint(\"Std.Dev duration: \", df_features['duration'].std())","0b371ec8":"df_features['campaign'] = df['campaign']","eec1617a":"sns.distplot(df_features['campaign'])","2a996dd8":"df_features['pdays'] = df['pdays']","df9023e3":"sns.distplot(df_features['pdays'])","e9e18813":"df_features['previous'] = df['previous']","7f8db959":"sns.distplot(df_features['previous'])","371a7f55":"df_features['poutcome']=  df['poutcome']","2532494b":"sns.countplot(y='poutcome', data=df_features)","d31d85f0":"# check for missing values\ndef missing_values(data):\n    return data.isnull().sum()\n\nmissing_values(df_features)","7c162349":"# get all categorical feature\nobj_cols = df_features.select_dtypes(include=['object']).columns","6801185f":"# get dummies for string features\ndf_features = pd.get_dummies(df_features, columns=obj_cols, drop_first=True)","17f1cc95":"y = df_features['deposit']\nX = df_features.drop(['deposit'], axis=1)","ab384fb2":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nX_cols = X_train.columns","b2aa529a":"from sklearn.preprocessing import StandardScaler","af442265":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","8fe794ac":"# train the model and use it to predict the label for unseen data\ndef fit_ml_algo(algo, X_train, y_train, X_test, y_test):\n    \n    model = algo.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    \n    acc = round(accuracy_score(y_pred, y_test) * 100, 2)\n    cf_matrix = confusion_matrix(y_test, y_pred)\n    precision = precision_score(y_test, y_pred)\n    recall = precision_score(y_pred, y_test)\n    f1 = f1_score(y_test, y_pred)\n     \n    return acc, cf_matrix, precision, recall, f1, model","df65612a":"acc, cf_matrix, precision, recall, f1, model = fit_ml_algo(LogisticRegression(), X_train, y_train, X_test, y_test)\nax = sns.heatmap(cf_matrix, annot=True, fmt='g') #notation: \"annot\" not \"annote\"\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\nprint(\"Accuracy: \", acc)\nprint(\"Precision: \", precision)\nprint(\"Recall: \", recall)\nprint(\"F1 Score: \", f1)","0419fb3b":"acc, cf_matrix, precision, recall, f1, model = fit_ml_algo(RandomForestClassifier(), X_train, y_train, X_test, y_test)\nax = sns.heatmap(cf_matrix, annot=True, fmt='g') #notation: \"annot\" not \"annote\"\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\nprint(\"Accuracy: \", acc)\nprint(\"Precision: \", precision)\nprint(\"Recall: \", recall)\nprint(\"F1 Score: \", f1)","580e5204":"acc, cf_matrix, precision, recall, f1, model = fit_ml_algo(LinearSVC(), X_train, y_train, X_test, y_test)\nax = sns.heatmap(cf_matrix, annot=True, fmt='g') #notation: \"annot\" not \"annote\"\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\nprint(\"Accuracy: \", acc)\nprint(\"Precision: \", precision)\nprint(\"Recall: \", recall)\nprint(\"F1 Score: \", f1)","de82a5be":"acc, cf_matrix, precision, recall, f1, model = fit_ml_algo(GradientBoostingClassifier(), X_train, y_train, X_test, y_test)\nax = sns.heatmap(cf_matrix, annot=True, fmt='g') #notation: \"annot\" not \"annote\"\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\nprint(\"Accuracy: \", acc)\nprint(\"Precision: \", precision)\nprint(\"Recall: \", recall)\nprint(\"F1 Score: \", f1)","fa6aac31":"acc, cf_matrix, precision, recall, f1, model = fit_ml_algo(AdaBoostClassifier(n_estimators=100), X_train, y_train, X_test, y_test)\nax = sns.heatmap(cf_matrix, annot=True, fmt='g') #notation: \"annot\" not \"annote\"\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\nprint(\"Accuracy: \", acc)\nprint(\"Precision: \", precision)\nprint(\"Recall: \", recall)\nprint(\"F1 Score: \", f1)","e55c85a8":"pd.DataFrame({'feature': X_cols, 'Importance': model.feature_importances_})","710701d8":"# Bank-Marketing-Prediction","5b221cf5":"**Feature: Pdays**","36a6ab5e":"# Building the machine learning model","b7c9557d":"**Feature: Previous**","7e09d4a0":"**Feature: Job**","86f1e095":"**Feature: Housing**","36aeffa1":"**Support Vector Machine**","62e82b92":"# Prepare the data","811c9e86":"# Get the data","8c9a0418":"**Feature: Duration**","0645a9ed":"**Random Forest**","020572b8":"**Feature: Education**","290b96ef":"**Feature: default**","fd3103d8":"**Feature: Campaign**","0401e6fb":"**Feature: Day**","85e69733":"**Target variable: y**","51a2cff5":"**Train\/test split**","44c6c7bb":"**Logistic regression**","fb3eb7ea":"**Feature: Loan**","ab9455d4":"**Feature Scaling**","29716c56":"**Feature: marital**","3fe036e2":"**Feature: Age**","3c357af4":"**Feature: Balance**","dbf65d5b":"# Explore and visualize the data","2df75035":"**Feature: Contract**","9f064da2":"**Feature: Poutcome**","ed4b7b03":"**Feature: month**","38001222":"**Feature encoding**","ca550078":"**Adaboost**","e031f6c0":"**Gradient Boosting**"}}