{"cell_type":{"a088f1dc":"code","a44aee9f":"code","84851278":"code","2df71e7c":"code","8bf557f5":"code","3d5a4b50":"code","bc4930ce":"markdown","beba6078":"markdown","79f253d6":"markdown","a4a6de19":"markdown","356bb906":"markdown","994461ec":"markdown","52cd059b":"markdown"},"source":{"a088f1dc":"import random\nimport timeit\nimport time\n\n#**************************************************#\n            ## ~ELEMANLARI RASTGELE~ ##\n    \nstart=time.time()\n\nlist1=[]\nfor r1 in range(100):\n\n    r1=random.randint(1,100)\n    list1.append(r1)\n\nprint(\"\\t\\t\\t ELEMANLARI RASTGELE \\n\")\nprint(list1,\"\\n\")\n\nstop=time.time()\nprint(\"Work Time: \",stop-start,\"\\n\")\n\n#**************************************************#\n            ## ~ELEMANLARI SIRALI~ ##\n\nstart=time.time()\n\nlist2=[]\nfor r2 in range(100):\n\n    r2=random.randint(1,100)\n    list2.append(r2)\n    \nlist2.sort()\nprint(\"\\t\\t\\t ELEMANLARI SIRALI \\n\")\nprint(list2,\"\\n\")\n\nstop=time.time()\nprint(\"Work Time: \",stop-start,\"\\n\")\n\n#**************************************************#\n            ## ~ELEMANLARI TERS SIRALI~ ##\n\nstart=time.time()\n\nlist3=[]\nfor r3 in range(100):\n    \n    r3=random.randint(1,100)\n    list3.append(r3)\n\nlist3.sort(reverse=True)\nprint(\"\\t\\t\\t ELEMANLARI TERS SIRALI \\n\")\nprint(list3,\"\\n\")\n\nstop=time.time()\nprint(\"Work Time: \",stop-start,\"\\n\")\n\n\n\nkeep1=list1\nkeep2=list2\nkeep3=list3\n","a44aee9f":"long=100;\n#**************************************************#\n            ## ~\u0130NSERT\u0130ON SORT~ ##\nstart=time.time()\n\ndef insertion_sort(List):\n    for i in range(1,long):\n        key=List[i]\n        j=i-1\n        while j >=0 and key < List[j]:\n            List[j+1] = List[j]\n            j-=1\n        List[j+1] = key\n        \nstop=time.time()\nprint(\"Creation Time: \",stop-start,\"\\t \u0130nsertion Sort\",\"\\n\")        \n#**************************************************#\n            ## ~SELECT\u0130ON SORT~ ##\nstart=time.time()\n\ndef selection_sort(List):\n    for i in range(long): \n        min_index = i \n        for j in range(i+1,long): \n            if List[min_index] > List[j]: \n                min_index = j \n              \n    # Swap the found minimum element with  \n    # the first element         \n        List[i], List[min_index] = List[min_index], List[i]\n        \nstop=time.time()\nprint(\"Creation Time: \",stop-start,\"\\t Selection Sort\",\"\\n\")        \n#**************************************************#\n            ## ~BUBBLE SORT~ ##\nstart=time.time()\n\ndef bubble_Sort(List):\n    for i in range(long):\n        for j in range(0, long-i-1):\n            if List[j] > List[j+1] :\n                List[j], List[j+1] = List[j+1], List[j]\n                \nstop=time.time()\nprint(\"Creation Time: \",stop-start,\"\\t Bubble Sort\",\"\\n\")        \n#**************************************************#\n            ## ~HEAP SORT~ ##\nstart=time.time()\n\ndef heapify(List,long, i): \n    largest = i  # Initialize largest as root \n    l = 2 * i + 1     # left = 2*i + 1 \n    r = 2 * i + 2     # right = 2*i + 2 \n  \n    # See if left child of root exists and is \n    # greater than root \n    if l < long and List[i] < List[l]: \n        largest = l \n  \n    # See if right child of root exists and is \n    # greater than root \n    if r < long and List[largest] < List[r]: \n        largest = r \n  \n    # Change root, if needed \n    if largest != i: \n        List[i],List[largest] = List[largest],List[i]  # swap \n  \n        # Heapify the root. \n        heapify(List, long, largest) \n\ndef heap_Sort(List): \n    for i in range(long, -1, -1): \n        heapify(List, long, i) \n    for i in range(long-1, 0, -1): \n        List[i], List[0] = List[0], List[i]   \n        heapify(List, i, 0)\n        \nstop=time.time()\nprint(\"Creation Time: \",stop-start,\"\\t Heap Sort\",\"\\n\")        \n","84851278":"print(\"\\t\\t  \u0130nsertion Sort\")\nstart=time.time()\ninsertion_sort(list1)\nstop=time.time()\nprint(\"List 1\\n   Sort Time: \",stop-start,\"\\n\")\n\nstart=time.time()\ninsertion_sort(list2)\nstop=time.time()\nprint(\"List 2\\n   Sort Time: \",stop-start,\"\\n\")\n\nstart=time.time()\ninsertion_sort(list3)\nstop=time.time()\nprint(\"List 3\\n   Sort Time: \",stop-start,\"\\n\")","2df71e7c":"print(\"\\t\\t  Selection Sort\")\nstart=time.time()\nselection_sort(list1)\nstop=time.time()\nprint(\"List 1\\n   Sort Time: \",stop-start,\"\\n\")\n\nstart=time.time()\nselection_sort(list2)\nstop=time.time()\nprint(\"List 2\\n   Sort Time: \",stop-start,\"\\n\")\n\nstart=time.time()\nselection_sort(list3)\nstop=time.time()\nprint(\"List 3\\n   Sort Time: \",stop-start,\"\\n\")","8bf557f5":"print(\"\\t\\t  Bubble Sort\")\nstart=time.time()\nbubble_Sort(list1)\nstop=time.time()\nprint(\"List 1\\n   Sort Time: \",stop-start,\"\\n\")\n\nstart=time.time()\nbubble_Sort(list2)\nstop=time.time()\nprint(\"List 2\\n   Sort Time: \",stop-start,\"\\n\")\n\nstart=time.time()\nbubble_Sort(list3)\nstop=time.time()\nprint(\"List 3\\n   Sort Time: \",stop-start,\"\\n\")","3d5a4b50":"print(\"\\t\\t  Heap Sort\")\nstart=time.time()\nheap_Sort(list1)\nstop=time.time()\nprint(\"List 1\\n   Sort Time: \",stop-start,\"\\n\")\n\nstart=time.time()\nheap_Sort(list2)\nstop=time.time()\nprint(\"List 2\\n   Sort Time: \",stop-start,\"\\n\")\n\nstart=time.time()\nheap_Sort(list3)\nstop=time.time()\nprint(\"List 3\\n   Sort Time: \",stop-start,\"\\n\")","bc4930ce":"### S\u0131ralama Algoritmalar\u0131 Olu\u015fturuluyor.. ###","beba6078":"## ~ Selection Sort ~ ##\n","79f253d6":"## ~ Heap Sort ~ ##","a4a6de19":"### Random Say\u0131 Dizisi Olu\u015fturuluyor.. ###\n\nHere I sorted the mixed data that exists with the Python Language codes. This sorting algorithm, I was able to reduce the processing load of the computer to a very short time. To this, access to data has become simpler.","356bb906":"## ~ Bubble Sort ~ ##","994461ec":"#     Veri Yap\u0131lar\u0131 S\u0131ralama Algoritmalar\u0131     #","52cd059b":"## ~ \u0130nsertion Sort ~ ##"}}