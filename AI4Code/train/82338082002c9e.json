{"cell_type":{"7494b8dd":"code","379d2af5":"code","51d90067":"code","323427c9":"code","a60eee80":"code","2df4758a":"code","bb7d32c7":"code","7ec14f8c":"code","2266eeeb":"code","3cdeae4c":"code","e0aafca2":"code","8487caff":"code","6b01a941":"code","3ba362c3":"code","73778e1e":"code","fc91c188":"code","6c994d68":"code","1026f51b":"code","c47c0eb3":"code","f3bd6f1d":"code","e335bc26":"code","c96b97b4":"code","28ead107":"code","51fd17c8":"code","7e571836":"code","6f32fe93":"code","fbb713f6":"markdown","2c2a01d5":"markdown"},"source":{"7494b8dd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import SimpleRNN,LSTM,Dense\nfrom tensorflow.keras.callbacks import EarlyStopping","379d2af5":"x=np.linspace(0,50,501)\ny=np.sin(x)\nplt.plot(x,y)","51d90067":"df=pd.DataFrame(data=y,index=x,columns=['sin'])\ndf.head(5)","323427c9":"test_percent=0.1\ntest_point=np.round(len(df)*test_percent)\ntest_index=int(len(df)-test_point)\ntest_index","a60eee80":"train=df.iloc[:451]\ntest=df.iloc[451:]","2df4758a":"sc=MinMaxScaler()\nsc.fit(train)\nscaled_train=sc.transform(train)\nscaled_test=sc.transform(test)","bb7d32c7":"length=50\nbatch_size=1\ngenerator=TimeseriesGenerator(scaled_train,scaled_train,length=length,batch_size=batch_size)","7ec14f8c":"len(generator)","2266eeeb":"# Model definition\nn_features=1\nmodel=Sequential()\nmodel.add(SimpleRNN(50,input_shape=(length,n_features)))\nmodel.add(Dense(1))\n\nmodel.compile(optimizer='adam',loss='mse')","3cdeae4c":"model.summary()","e0aafca2":"model.fit_generator(generator,epochs=5)","8487caff":"losses=pd.DataFrame(model.history.history)\nlosses.plot()","6b01a941":"# evaluation batch\nfirst_eval_batch= scaled_train[-length:]\nprint(first_eval_batch.shape)\nfirst_eval_batch=first_eval_batch.reshape(1,length,1)\nprint(first_eval_batch.shape)","3ba362c3":"print(model.predict(first_eval_batch))\nprint(scaled_test[0])","73778e1e":"test_predictions = []\n\nfirst_eval_batch = scaled_train[-length:]\ncurrent_batch = first_eval_batch.reshape((1, length, n_features))\n\nfor i in range(len(test)):\n    \n    # get prediction 1 time stamp ahead ([0] is for grabbing just the number instead of [array])\n    current_pred = model.predict(current_batch)[0] \n    \n    # store prediction \n    test_predictions.append(current_pred) \n    \n    # update batch to now include prediction and drop first value\n    current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)","fc91c188":"test_predictions","6c994d68":"true_pred=sc.inverse_transform(test_predictions)\nprint(true_pred.shape)\nprint(test.shape)","1026f51b":"test['rnn_predictions']=true_pred\ntest.head(5)","c47c0eb3":"test.plot(figsize=(10,5))","f3bd6f1d":"early_stop = EarlyStopping(monitor='val_loss',patience=2)","e335bc26":"length=49\n\ngenerator = TimeseriesGenerator(scaled_train,scaled_train,\n                               length=length,batch_size=1)\n\nvalidation_generator= TimeseriesGenerator(scaled_test,scaled_test,length=length,batch_size=batch_size)","c96b97b4":"model=Sequential()\nmodel.add(LSTM(50,input_shape=(length,n_features)))\nmodel.add(Dense(1))\n\nmodel.compile(optimizer='adam',loss='mse')","28ead107":"model.fit_generator(generator,epochs=5,validation_data=validation_generator,callbacks=[early_stop])","51fd17c8":"test_predictions = []\n\nfirst_eval_batch = scaled_train[-length:]\ncurrent_batch = first_eval_batch.reshape((1, length, n_features))\n\nfor i in range(len(test)):\n    \n    # get prediction 1 time stamp ahead ([0] is for grabbing just the number instead of [array])\n    current_pred = model.predict(current_batch)[0] \n    \n    # store prediction \n    test_predictions.append(current_pred) \n    \n    # update batch to now include prediction and drop first value\n    current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)","7e571836":"test_predictions","6f32fe93":"true_pred=sc.inverse_transform(test_predictions)\nprint(true_pred.shape)\ntest['LSTM Predictions'] = true_pred\ntest.plot(figsize=(14,5))","fbb713f6":"# The End","2c2a01d5":"# LSTM"}}