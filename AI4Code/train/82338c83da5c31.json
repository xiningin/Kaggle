{"cell_type":{"378b031f":"code","e00ec4db":"code","c9d8d60b":"code","4bb56b01":"code","d1b23942":"code","d5dc4099":"code","0b6210aa":"code","b75158c6":"code","53eb0107":"code","18055a98":"code","cca97526":"code","fe6f9b4c":"code","7d7f5cd4":"code","497e813b":"code","98bf6150":"code","c9cb4249":"code","d36b84fa":"code","6ee4b66a":"code","9d624df0":"code","312b411c":"code","8f8c6a3f":"code","e3b1cfe2":"code","00e26680":"code","05b711ce":"code","a01d70e6":"code","a6ffa68b":"code","51fb841f":"code","a10c36ce":"code","d35f07a7":"code","cd49baf5":"code","d3d9be98":"code","379f163c":"code","88a6339c":"code","62fefc1e":"code","8a7ead34":"code","3fe31f8f":"code","6c4852ac":"code","d4a0d650":"code","4a7256c3":"code","459f8d59":"code","5c09febe":"code","8e771a21":"code","aab6715d":"code","7e1e0fdb":"code","86dbaf23":"code","d057a885":"code","899905a1":"markdown","3d57b491":"markdown","c22ff508":"markdown","bb84dff1":"markdown","6d72db38":"markdown","bf37971c":"markdown","daf4bbe1":"markdown","7d5e5db0":"markdown","6912d94b":"markdown","606474c2":"markdown","0480a05e":"markdown","4cdba0f7":"markdown","b165619a":"markdown"},"source":{"378b031f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom scipy import stats\nstats.chisqprob=lambda chisq,df:stats.chi2.sf(chisq,df)","e00ec4db":"train=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')","c9d8d60b":"train.head()","4bb56b01":"data_list=[train,test]\n\ndef remove_col(data_list):\n    trans_data=[]\n    col_list=['PassengerId','Name','Ticket','Cabin']\n    for data in data_list:\n        Data=data.drop(col_list,axis=1)\n        trans_data.append(Data)\n    Data1=trans_data[0]\n    Data2=trans_data[1]\n    return Data1,Data2\n\nTrain,Test=remove_col(data_list)","d1b23942":"Train","d5dc4099":"data_list2=[Train,Test]\ndef sex(data_list):\n    trans_data=[]\n    for data in data_list:\n        data['Sex']=data['Sex'].map({'male':0,'female':1})\n        trans_data.append(data)\n    data1=trans_data[0]\n    data2=trans_data[1]\n        \n    return data1,data2\n\nTrain,Test=sex(data_list2)","0b6210aa":"Train.info()","b75158c6":"Test.info()","53eb0107":"x_test=Test","18055a98":"sns.countplot(train['Survived'])","cca97526":"sns.countplot(train['Survived'],hue=train['Pclass'])","fe6f9b4c":"sns.countplot(train['Sex'],hue=train['Survived'])","7d7f5cd4":"sns.distplot(train['Age'])","497e813b":"sns.catplot(x='Survived',y='Age',data=train,kind='box',hue='Pclass',col='Sex')","98bf6150":"sns.catplot(x='Survived',kind='count',data=train,height=5,hue='Pclass',col='Sex')","c9cb4249":"sns.countplot(train['Pclass'])","d36b84fa":"sns.boxplot(x=train['Pclass'],y=train['Age'])","6ee4b66a":"a=train.groupby('Pclass')['Age']\nb=train.groupby('Pclass')['Fare']\nprint('Median Age of people in Pclass 1 is : {} years \\t Mean Fare of people in Pclass 1 is : {:.2f} '.format(a.get_group(1).median(),b.get_group(1).mean()))\nprint('Median Age of people in Pclass 2 is : {} years \\t Mean Fare of people in Pclass 2 is : {:.2f} '.format(a.get_group(2).median(),b.get_group(2).mean()))\nprint('Median Age of people in Pclass 3 is : {} years \\t Mean Fare of people in Pclass 3 is : {:.2f} '.format(a.get_group(3).median(),b.get_group(3).mean()))","9d624df0":"def impute(cols):\n    age=cols[0]\n    pclass=cols[1]\n    if pd.isnull(age):\n        if pclass==1:\n            return 37\n        elif pclass==2:\n            return 29\n        else:\n            return 24\n    else:\n        return age\n    \nTrain['Age'] = Train[['Age','Pclass']].apply(impute,axis=1)\nTest['Age'] = Test[['Age','Pclass']].apply(impute,axis=1)","312b411c":"sns.countplot(train['Embarked'])","8f8c6a3f":"Train['Embarked']= Train['Embarked'].fillna('S')","e3b1cfe2":"Train.info()","00e26680":"print(Test[Test['Fare'].isnull()])\nprint('\\nFor Pclass =3 ,The mean fare was 13.68')","05b711ce":"Test['Fare']=Test['Fare'].fillna(13.68)","a01d70e6":"train_with_dummies=pd.get_dummies(Train,drop_first=True)\ntest_with_dummies=pd.get_dummies(Test,drop_first=True)","a6ffa68b":"train_with_dummies.head()","51fb841f":"x_train=train_with_dummies.drop('Survived',axis=1)\ny_train=train_with_dummies['Survived']","a10c36ce":"x_test=test_with_dummies","d35f07a7":"lda=LDA()\nx_train_lda=lda.fit_transform(x_train,y_train)\nx_test_lda=lda.transform(x_test)","cd49baf5":"from sklearn.linear_model import LogisticRegression\nclassifier=LogisticRegression()\nclassifier.fit(x_train_lda,y_train)\nprediction=classifier.predict(x_test_lda)\n","d3d9be98":"results=pd.read_csv('..\/input\/titanic\/gender_submission.csv')","379f163c":"y_test=results['Survived']","88a6339c":"from sklearn.metrics import confusion_matrix,accuracy_score\ncm=confusion_matrix(y_test,prediction)\nsns.heatmap(cm,annot=True)\nprint('Accurcay score is : {:.2f}%'.format(accuracy_score(y_test,prediction)*100))","62fefc1e":"classifier_tree=DecisionTreeClassifier(max_leaf_nodes=70000)\nclassifier_tree.fit(x_train_lda,y_train)\nprediction_tree=classifier_tree.predict(x_test_lda)\ncm=confusion_matrix(y_test,prediction_tree)\nsns.heatmap(cm,annot=True)\naccuracy_score(y_test,prediction_tree)","8a7ead34":"classifier_forest=RandomForestClassifier()\nclassifier_forest.fit(x_train_lda,y_train)\nprediction_forest=classifier_forest.predict(x_test_lda)\ncm=confusion_matrix(y_test,prediction_forest)\nsns.heatmap(cm,annot=True)\naccuracy_score(y_test,prediction_forest)","3fe31f8f":"from sklearn.svm import SVC\nclassifier_svc=SVC()\nparam_grid=[\n    {'C':[0.25,0.5,0.75,1],'kernel':['linear','poly','rbf'],'gamma':np.linspace(0.1,0.9,10)}\n]\ngrid_search=GridSearchCV(estimator=classifier_svc,\n                         param_grid=param_grid,\n                         scoring='accuracy',\n                         cv=10,\n                         n_jobs=-1\n)","6c4852ac":"grid_search.fit(x_train_lda,y_train)\nbest_accuracy=grid_search.best_score_\nbest_parameter=grid_search.best_params_","d4a0d650":"print(\"Best Accuracy: {:.2f} %\".format(best_accuracy*100))\nprint(\"Best Parameters:\", best_parameter)","4a7256c3":"from sklearn.ensemble import AdaBoostClassifier\nclassifier_ada=AdaBoostClassifier(LogisticRegression(),\n                                 n_estimators=200,\n                                 algorithm='SAMME.R',\n                                 learning_rate=0.5)\nclassifier_ada.fit(x_train_lda,y_train)","459f8d59":"prediction_ada=classifier_ada.predict(x_test_lda)","5c09febe":"cm=confusion_matrix(y_test,prediction_ada)\nsns.heatmap(cm,annot=True)\naccuracy_score(y_test,prediction_ada)","8e771a21":"from xgboost import XGBClassifier\nclassifier_xgb=XGBClassifier()\nclassifier_xgb.fit(x_train_lda,y_train)\nprediction_xgb=classifier_xgb.predict(x_test_lda)","aab6715d":"cm=confusion_matrix(y_test,prediction_xgb)\nsns.heatmap(cm,annot=True)\naccuracy_score(y_test,prediction_xgb)","7e1e0fdb":"passenger=test['PassengerId']\nprediction=pd.DataFrame(prediction)","86dbaf23":"final_prediction=pd.concat([passenger,prediction],axis=1)","d057a885":"final_prediction=final_prediction.rename(columns={0:'Survived'})\nfinal_prediction","899905a1":"### Logistic regression","3d57b491":"### Dimensionality Reduction using LDA","c22ff508":"### Random Forest Classifier","bb84dff1":"### EDA","6d72db38":"From above data we can say that people who survived more were from 1st class and 3rd Class.\nPeople who didnt survived were from 3rd class","bf37971c":"From the data we can say that most of casualty were from 3rd class as more passenger were travelling from 3rd class.\nMost of the casualty suffered were male from 3rd Class. and the age of the males died were 20 - 34yrs.","daf4bbe1":"### XGB classifier","7d5e5db0":"### Adaptive Boosting","6912d94b":"### Filling Null Values","606474c2":"### Support Vector Classifier","0480a05e":"### Creating the dummies","4cdba0f7":"### Allocating ","b165619a":"### Decision Tree Classifier"}}