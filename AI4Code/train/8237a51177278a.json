{"cell_type":{"62819946":"code","d14d3729":"code","61b4c519":"code","80d68789":"code","4e2cea50":"code","983d6b64":"code","73354f91":"code","311413bb":"code","ef67efed":"markdown","9fa7ee9c":"markdown","6f47ea88":"markdown","724551c0":"markdown","907aa673":"markdown","6a8d6b8e":"markdown","8a085440":"markdown","49d2216a":"markdown","daa1c471":"markdown","1c790a09":"markdown","0e8fbb88":"markdown","4e582c7c":"markdown","97298f86":"markdown","e64a7422":"markdown","abbc4a6e":"markdown","44c97169":"markdown","20023721":"markdown","3257a01a":"markdown","b4c56997":"markdown","9e47bfec":"markdown","e556d13b":"markdown","74e4e91e":"markdown","ac101446":"markdown","32c20bfd":"markdown","631c6c3d":"markdown","2a93d136":"markdown","fa2e0414":"markdown","5f71f4c3":"markdown","82404f26":"markdown","3d0065ef":"markdown","0f1ba5bd":"markdown","afdeffe7":"markdown","0bc7fa85":"markdown","6cdd3168":"markdown","0af22659":"markdown","7dadca0a":"markdown","437ceb14":"markdown","81812a1f":"markdown","60ce3f29":"markdown","d387a032":"markdown","f84ceb09":"markdown","e9c966fa":"markdown","36701a44":"markdown","b563afec":"markdown","3119f29d":"markdown","fa73645d":"markdown","c3adb637":"markdown","56a6e2b3":"markdown","c8fcfe3d":"markdown","04e05fac":"markdown","39b48183":"markdown","0c2b1fd7":"markdown","f3d609b3":"markdown"},"source":{"62819946":"%%html\n<style>\n@import url('https:\/\/fonts.googleapis.com\/css?family=Ewert|Roboto&effect=3d|ice|');\nbody {background-color: gainsboro;} \na {color: #37c9e1; font-family: 'Roboto';} \nh1 {color: #37c9e1; font-family: 'Orbitron'; text-shadow: 4px 4px 4px #aaa;} \nh2, h3 {color: slategray; font-family: 'Orbitron'; text-shadow: 4px 4px 4px #aaa;}\nh4 {color: #818286; font-family: 'Roboto';}\nspan {font-family:'Roboto'; color:black; text-shadow: 5px 5px 5px #aaa;}  \ndiv.output_area pre{font-family:'Roboto'; font-size:110%; color:lightblue;}      \n<\/style>","d14d3729":"import numpy as np\nimport pandas as pd\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.neural_network import MLPClassifier\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix, roc_curve, roc_auc_score\nfrom sklearn.model_selection import train_test_split, GridSearchCV\n#deep lerning libraries\nimport keras\nfrom keras import backend as K\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\n\nimport pickle # Read\/Write with Serialization\nimport requests # Makes HTTP requests\nfrom io import BytesIO # Use When expecting bytes-like objects","61b4c519":"# Classes we will load\ncategories = ['cannon','eye', 'face', 'nail', 'pear','piano','radio','spider','star','sword']\n\n# Dictionary for URL and class labels\nURL_DATA = {}\nfor category in categories:\n    URL_DATA[category] = 'https:\/\/storage.googleapis.com\/quickdraw_dataset\/full\/numpy_bitmap\/' + category +'.npy'","80d68789":"classes_dict = {}\nfor key, value in URL_DATA.items():\n    response = requests.get(value)\n    classes_dict[key] = np.load(BytesIO(response.content))","4e2cea50":"for i, (key, value) in enumerate(classes_dict.items()):\n    value = value.astype('float32')\/255.\n    if i == 0:\n        classes_dict[key] = np.c_[value, np.zeros(len(value))]\n    else:\n        classes_dict[key] = np.c_[value,i*np.ones(len(value))]\n\n# Create a dict with label codes\nlabel_dict = {0:'cannon',1:'eye', 2:'face', 3:'nail', 4:'pear', \n              5:'piana',6:'radio', 7:'spider', 8:'star', 9:'sword'}","983d6b64":"lst = []\nfor key, value in classes_dict.items():\n    lst.append(value[:3000])\ndoodles = np.concatenate(lst)","73354f91":"# Split the data into features and class labels (X & y respectively)\ny = doodles[:,-1].astype('float32')\nX = doodles[:,:784]\n\n# Split each dataset into train\/test splits\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=1)","311413bb":"# Save X_train dataset as a pickle file\nwith open('xtrain_doodle.pickle', 'wb') as f:\n    pickle.dump(X_train, f)\n    \n# Save X_test dataset as a pickle file\nwith open('xtest_doodle.pickle', 'wb') as f:\n    pickle.dump(X_test, f)\n    \n# Save y_train dataset as a pickle file\nwith open('ytrain_doodle.pickle', 'wb') as f:\n    pickle.dump(y_train, f)\n    \n# Save y_test dataset as a pickle file\nwith open('ytest_doodle.pickle', 'wb') as f:\n    pickle.dump(y_test, f)","ef67efed":"We then tuned the max_features parameters, which are the maximum number of\nfeatures Random Forest can try in individual tree. By limiting the max features to\nthe square root of total features we improved the model and made it computationally\nless expensive.\nWe then plotted the pixel importances and saw that the edges of the doodles tend to\nbe the most important.","9fa7ee9c":"# Conclusion:\nThis notebook a demon for this compitions. I will only use around 5000 doodles for each label since the full dataset would be too much for my computer to handle. Then I will explore the drawings and graph random sketches of each\ncategory. Finally, I will test the dataset with Random Forest, Support-Vector Machine (SVM), KNearest\nNeighbors (KNN) and Multi-Layer Perceptron (MLP) classifiers in scikit-learn as well as\na Convolutional Neural Network (CNN) in Karas.\n\nHere is some reference :\n1. [Quick Draw's Article](https:\/\/towardsdatascience.com\/quick-draw-the-worlds-largest-doodle-dataset-823c22ffce6b)\n2. [Quick Draw's Demo video](https:\/\/www.youtube.com\/watch?list=PLIivdWyY5sqJxnwJhe3etaK7utrBiPBQ2&time_continue=2&v=8DEjphIfeYw)\n3. [ Quick Draw's Paper](https:\/\/github.com\/nolanadams1230\/Doodle_Classification\/blob\/master\/Final_Report.pdf)\n\nIf you enjoyed reading the kernel , hit the upvote button !","6f47ea88":"## 3.2. Non-Linear SVM (Radial Basis Function)","724551c0":"# &#128220; Overview Of Quick Draw DataSet\nThe team has open sourced this data, and in a variety of formats. You can learn more at their [GitHub page.](https:\/\/github.com\/googlecreativelab\/quickdraw-dataset)Now we can get this dataset easily from [Our Data Science House Kaggle.](https:\/\/www.kaggle.com)\n\n**Here is Orginal Google DataSet  demo picture.This picture collect from github. &#128071;** ![Imgur](https:\/\/i.imgur.com\/MOziCCc.png)\n\n**Another picture of Kaggle DataSet picture. &#128071; **![Imgur](https:\/\/i.imgur.com\/36cyzNX.png)","907aa673":"### Output:\n![Imgur](https:\/\/i.imgur.com\/wKOndoI.png)","6a8d6b8e":"### Output:\n```\nTest Loss: 41.8\nTest Accuracy: 91\n```","8a085440":"### &#128210; Note:\nThe random forest had an accuracy score very close to the k-nn model. The features that are most important are on the edge and in the middle of each side.","49d2216a":"There are 4 formats: First up are the raw files stored in (.ndjson) format. These files encode the full set of information for each doodle. It contains timing information for each stroke of every picture drawn.\n\nThere is also a simplified version, stored in the same format (.ndjson), which has some preprocessing applied to normalize the data. The simplified version is also available as a binary format for more efficient storage and transfer. There are examples of how to read the files using both Python and NodeJS.\n\n**This picture  Google Cloud Platfrom of Quick Draw Datasets. &#128071;** ![Imgur](https:\/\/i.imgur.com\/eYoCpkA.png)\n\n\nThe fourth format takes the simplified data and renders it into a 28x28 grayscale bitmap in numpy .npy format, which can be loaded using np.load().\n\nWhy is it 28x28? Well, it\u2019s a perfect replacement for any existing code you might have for processing MNIST data. So if you\u2019re looking for something fancier than 10 handwritten digits, you can try processing over 300 different classes of doodles.","daa1c471":"### &#128210; Note:\nSVM classification uses planes in space to divide data points. We can compared a linear divider a non-linear divider.","1c790a09":"### &#128210; Note:\nRandom forests is an ensemble model which means that it uses the results from many different models to calculate a label","0e8fbb88":"### Output:\n```\naccuracy:80.5\n```","4e582c7c":"# Lets Play With Quick Draw!!","97298f86":"#  &#128202; Data exploration and visualization of Quick Draw Game\nIf you want to explore the dataset some more, you can visualize the quickdraw dataset using Facets. The Facets team has even taken the liberty of hosting it online and giving us some presets to play around with! You can [access the page here.](https:\/\/pair-code.github.io\/facets\/quickdraw.html) We can load up some random chairs and see how different players drew chairs from around the world.\n\n![Quick Draw gift](https:\/\/i.imgur.com\/q1h49cE.gif)\n\n","e64a7422":"### Output:\n**Seeing what pixels are the most important in deciding the label\n**![Imgur](https:\/\/i.imgur.com\/aJMgZJi.png)","abbc4a6e":"### Output:\n```\nmlp accuracy:  84.6\n```","44c97169":"## &#128295; Tuning max features","20023721":"# &#128218;  4. Multi-Layer Perceptron\n\n![Imgur](https:\/\/i.imgur.com\/HyPUqwF.png)\n\n![Imgur](https:\/\/i.imgur.com\/1wtN0Ln.png)\n\n![Imgur](https:\/\/i.imgur.com\/1S9bC75.jpg)","3257a01a":"## &#128290; Tuning number of neighbors\nThe KNN classifier looks promising, let's test different values of K:","b4c56997":"### Output:\n![Imgur](https:\/\/i.imgur.com\/DBn5Cyj.png)","9e47bfec":"### Output:\nFinal result of all\n```\nKNN accuracy:  0.819555555556 \n Random forest accuracy:  0.804555555556 \n Linear SVC accuracy:  0.717777777778 \n Gaussian Radial Basis Function SVC Accuracy:  0.781555555556 \n Multi-Layer Perceptron accuracy:  0.845666666667 \n Convolutional Neural Network Score: 0.909555555556 \n```\n ","e556d13b":"# &#128208; 3.Support Vector Machine\n![Imgur](https:\/\/i.imgur.com\/HyPUqwF.png)\n![Imgur](https:\/\/i.imgur.com\/JHwkkBg.jpg)\n![Imgur](https:\/\/i.imgur.com\/mILrxTO.png)\n","74e4e91e":"## &#128295; Tuning number of estimators in the ensemble method\n","ac101446":"![Imgur](https:\/\/i.imgur.com\/vwadkbv.png)","32c20bfd":"### &#128210;  Note:\nFrom examining our plot and using the elbow-method using 3 neighbors seems like the best choice to avoid overfitting. The main advantage of the KNN algorithm is that it performs well with multi-modal classes because the basis of its decision is based on a small neighborhood of similar objects. This is why its results were fairly high with 80%. The main disadvantage is the computational cost are very high and the results take far too long.**","631c6c3d":"### Output:\n\n```Accuracy:80.5 ```","2a93d136":"# \ud83d\udcd1 Import Libraries","fa2e0414":"### Output:\n**Mean Test Score of MLP:\n**![Imgur](https:\/\/i.imgur.com\/lINgGl4.png)","5f71f4c3":"# &#128225; 5.Convolutional Neural Networks (CNN \/ ConvNet)\nThe Convolutional Neural Network architectures make the explicit assumption that the inputs are images, which allows us to encode certain properties into the architecture. These then make the forward function more efficient to implement and vastly reduce the amount of parameters in the network.\n\n![Imgur](https:\/\/i.imgur.com\/HyPUqwF.png)\n![Imgur](https:\/\/i.imgur.com\/jR5naeg.png)\n\n### How Work Convolutional Neural Networks (CNN)\n![Imgur](https:\/\/i.imgur.com\/q5BBj8p.png)\n","82404f26":"## &#128201; Plot results of grid search\n","3d0065ef":"![Imgur](https:\/\/i.imgur.com\/HyPUqwF.png)\n![Imgur](https:\/\/i.imgur.com\/lREy3CV.jpg)\n![Imgur](https:\/\/i.imgur.com\/lEuwiKK.jpg)","0f1ba5bd":"# &#127966; 2. Random Forest","afdeffe7":"### Output:\n![Imgur](https:\/\/i.imgur.com\/IbOqyhQ.png)","0bc7fa85":"### Output:\n```\naccuracy:74.4\n```","6cdd3168":"### Output:\n```\nGaussian Radial Basis Function SVC Accuracy:  77.15\n```","0af22659":"# 8. Results","7dadca0a":"# &#128225; What is Quick Draw?\n![Imgur](https:\/\/i.imgur.com\/HyPUqwF.png)\n\u201cQuick, Draw!\u201d was a game that was initially featured at Google I\/O in 2016, as a game where one player would be prompted to draw a picture of an object, and the other player would need to guess what it was. Just like pictionary.\nIn 2017, the Magenta team at Google Research took that idea a step further by using this labeled dataset to train the [Sketch-RNN](https:\/\/magenta.tensorflow.org\/assets\/sketch_rnn_demo\/index.html) model, to try to predict what the player was drawing, in real time, instead of requiring a second player to do the guessing. The game is [available online,](https:\/\/quickdraw.withgoogle.com) and has now collected over 1 billion hand-drawn doodles!","437ceb14":"## &#128295; Base RFC model\n","81812a1f":"# &#128229; Load and Read DataSets","60ce3f29":"# &#128204; 1. K-Nearest Neighbors\n![Imgur](https:\/\/i.imgur.com\/HyPUqwF.png)\n![Imgur](https:\/\/i.imgur.com\/IO58pDy.jpg)","d387a032":"### Output:\n**Model accuracy & Model loss plot:\n**![Imgur](https:\/\/i.imgur.com\/csePWWo.png)","f84ceb09":"![Imgur](https:\/\/i.imgur.com\/l7LgSGy.png)","e9c966fa":"### Output:\n```\nLinear SVC accuracy:71.7\n```","36701a44":"# &#128187; Predictive Modeling ","b563afec":"## 3.1.LinearSVC","3119f29d":"### Output:\n```\nmlp accuracy:  81.9\n```","fa73645d":"## &#128201; Plot results of grid search\n","c3adb637":"##  Modeling RFC with best hyper-parameters","56a6e2b3":"### &#128210;  Note:\nBy simply randomly guessing, one should be able to reach ~10% accuracy (since there are only ten class labels). A machine learning algorithm will need to obtain > 10% accuracy in order to demonstrate that it has in fact \u201clearned\u201d something (or found an underlying pattern in the data).\n\nTo start, we\u2019ll model the data with the k-Nearest Neighbor (k-NN) classifier, arguably the most simple, easy to understand machine learning algorithm. The k-NN algorithm classifies unknown data points by finding the most common class among the k-closest examples. Each data point in the k closest examples casts a vote and the category with the most votes is chosen.","c8fcfe3d":"### Output:\n**Train on 21000 samples, validate on 9000 samples\n**![Imgur](https:\/\/i.imgur.com\/QoB4Bft.png)","04e05fac":"## &#128295;  Base model Of KNN\n\nNext, I will try out a KNN classifier:","39b48183":"### Output:\n![Imgur](https:\/\/i.imgur.com\/Ds6OVNz.png)","0c2b1fd7":"### &#128210; Note\n\nA perceptron is a neural network with a very basic architecture. This will be good to compare against the convolutional neural network. Neural Networks receive an input (a single vector), and transform it through a series of hidden layers. Each hidden layer is made up of a set of neurons, where each neuron is fully connected to all neurons in the previous layer, and where neurons in a single layer function completely independently and do not share any connections. The last fully-connected layer is called the \u201coutput layer\u201d and in classification settings it represents the class scores.\n\nFor tuning the hyper-parameters for a Multi-Layer Perceptron, we can try different number of layers and number of neurons in each layer. The default activiation function (ReLu) is the most effective choice from sklearn and the the defualt optimization algorithm (adam) is the best choice due to the size of our dataset.","f3d609b3":"### Output:\n![Imgur](https:\/\/i.imgur.com\/MhH5Wnz.png)"}}