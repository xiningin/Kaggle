{"cell_type":{"c8d3231b":"code","3cd37d6a":"code","f0d491f2":"code","79328197":"code","c4164353":"code","a64fbfb9":"code","2f377209":"code","8c07593c":"code","fc4047d6":"code","d91b061c":"code","1591ef72":"code","2ad2bd26":"code","c0a39e42":"code","e9606328":"code","5c6adbe8":"code","3679006a":"code","cf7cb7c7":"code","16b76991":"code","56182e58":"code","d29ff159":"code","b962f8b9":"code","5b857864":"code","75c0ed19":"code","d911c495":"code","f40ff217":"markdown","5b946ba6":"markdown","efbff8eb":"markdown","e76485ed":"markdown","5845d899":"markdown","5d456086":"markdown"},"source":{"c8d3231b":"from fastai import *\nfrom fastai.vision import *\nimport PIL","3cd37d6a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nnames = []\nlabels = []\nbroken_images = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        folder = (dirname.split('\/')[5]).split('_')[1]\n        if(folder == 'pred'):\n            continue\n        label = dirname.split('\/')[6]\n        try:\n            img = PIL.Image.open(os.path.join(dirname, filename)) \n            if (not (img.size == (150, 150))):\n                continue\n            names.append(os.path.join(dirname[14:], filename))\n            labels.append(label)\n        except (IOError, SyntaxError) as e:\n            print('Bad file:', os.path.join(dirname, filename))\n            broken_images.append(os.path.join(dirname, filename))\n        \n\n# Any results you write to the current directory are saved as output.","f0d491f2":"df = pd.DataFrame({\n    \"names\": names,\n    \"labels\": labels})\ndf.head()","79328197":"data = ImageDataBunch.from_df('\/kaggle\/input', df)\ndata.normalize()","c4164353":"data.show_batch(rows=3, figsize=(5,5))","a64fbfb9":"print(data.classes)\nlen(data.classes),data.c","2f377209":"learn = cnn_learner(data, models.resnet34, metrics=error_rate)","8c07593c":"learn.model","fc4047d6":"learn.fit_one_cycle(4)","d91b061c":"learn.save('stage-1')","1591ef72":"interp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_top_losses(9, figsize=(15,11))","2ad2bd26":"interp.plot_confusion_matrix(figsize=(12,12), dpi=60)","c0a39e42":"interp.most_confused(min_val=2)","e9606328":"learn.lr_find()","5c6adbe8":"learn.recorder.plot()","3679006a":"learn.unfreeze()\nlearn.fit_one_cycle(4, max_lr=slice(1e-6,1e-4))","cf7cb7c7":"learn = cnn_learner(data, models.resnet50, metrics=accuracy)","16b76991":"learn.lr_find()\nlearn.recorder.plot()","56182e58":"learn.fit_one_cycle(8)","d29ff159":"learn.save('stage-1-50')","b962f8b9":"learn.unfreeze()\nlearn.fit_one_cycle(4, max_lr=slice(1e-6,1e-4))","5b857864":"interp = ClassificationInterpretation.from_learner(learn)","75c0ed19":"interp.plot_confusion_matrix(figsize=(12,12), dpi=60)","d911c495":"interp.most_confused(min_val=2)","f40ff217":"*Unfreeze* our model and train some more.","5b946ba6":"## Results","efbff8eb":"Let's see what results we have got.\n\nWe will first see which were the categories that the model most confused with one another. We will try to see if what the model predicted was reasonable or not. ","e76485ed":"## Training: resnet34\nUsed a convolutional neural network backbone and a fully connected head with a single hidden layer as a classifier.\n\nTrain for 4 epochs (4 cycles through all our data).","5845d899":"## Unfreezing, fine-tuning, and learning rates","5d456086":"## Training: resnet50"}}