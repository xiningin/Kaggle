{"cell_type":{"58fd6235":"code","ff860355":"code","9cead1d1":"code","f9d6fde7":"code","110928aa":"code","6448b4fc":"code","7c059af2":"code","fce8b708":"code","92b2fcbd":"code","101e3cb4":"code","a2266682":"code","95a1e197":"code","3136d5e7":"code","d2e91df5":"code","e1ecdb79":"code","225070a6":"code","0cbb921b":"code","f990030d":"code","5f0871f7":"code","100fd609":"code","cfe3a1c1":"code","f561a4f5":"code","8aae6718":"code","064243fc":"markdown","73187027":"markdown","2b9b3a51":"markdown","eace05ea":"markdown","79bc6044":"markdown","4ce16b32":"markdown","07c3fb29":"markdown","88539be1":"markdown","5166a8b0":"markdown","f25d5b9c":"markdown","bfbca001":"markdown","b334c145":"markdown","9716780c":"markdown","2c92c256":"markdown","49228c2f":"markdown","6b7b22ad":"markdown","a452f8e4":"markdown","8df0a739":"markdown","43ca050a":"markdown","bdbe1a2a":"markdown","fb0acd3b":"markdown","381424f5":"markdown","f49b7b7a":"markdown","57f6da6b":"markdown","c136e604":"markdown","e8c7ac0d":"markdown","ecdcada6":"markdown","f535ceaf":"markdown","18fbf4a8":"markdown","cc60e582":"markdown","08d23e89":"markdown","b84c4837":"markdown","a99c3477":"markdown"},"source":{"58fd6235":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np","ff860355":"India_covid19 = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv', parse_dates=['Date'], dayfirst=True)\nprint(India_covid19.head())\nprint(India_covid19.tail())","9cead1d1":"India_covid19.columns","f9d6fde7":"India_covid19.drop([\"Sno\"], axis = 1, inplace = True)\nIndia_covid19.rename(columns = {\"State\/UnionTerritiry\": \"States\"}, inplace=True)\nprint(India_covid19.head())\nprint(India_covid19.tail())","110928aa":"India_per_day = India_covid19.groupby([\"Date\"])[\"Confirmed\"].sum().reset_index().sort_values(\"Date\", ascending = True)\nprint(India_per_day.head())\nprint(India_per_day.tail())\nprint(India_per_day.shape)","6448b4fc":"India_per_day.shape[0]","7c059af2":"India_per_day['Date']=pd.to_datetime(India_per_day.Date,dayfirst=True)\nIndia_daily= India_per_day.groupby(['Date'])['Confirmed'].sum().reset_index().sort_values('Date',ascending=True)\nIndia_daily[\"day_count\"] = np.arange(0, India_daily.shape[0])\n\ndaily_infection = India_daily.loc[:, [\"day_count\", \"Confirmed\"]]\nprint(daily_infection.head())\nprint(daily_infection.tail())","fce8b708":"plt.scatter(daily_infection[\"day_count\"], daily_infection[\"Confirmed\"], alpha=0.3, c=\"red\")\nplt.plot(daily_infection[\"day_count\"], daily_infection[\"Confirmed\"])\nplt.title(\"Daily Infection Plot\")\nplt.xlabel(\"Day\")\nplt.ylabel(\"Infections\")\nplt.show()","92b2fcbd":"# Taking log of dependent variable\ndaily_infection[\"logConfirmed\"] = np.log(daily_infection.Confirmed)\ndaily_infection.head(4)","101e3cb4":"plt.scatter(daily_infection[\"day_count\"], daily_infection[\"logConfirmed\"], alpha=0.3, c=\"red\")\nplt.plot(daily_infection[\"day_count\"], daily_infection[\"logConfirmed\"])\nplt.title(\"Daily Infection Plot\")\nplt.xlabel(\"Day\")\nplt.ylabel(\"log_Infections\")\nplt.show()","a2266682":"import statsmodels.api as sm\n\nX = daily_infection.day_count\nX = sm.add_constant(X)\ny = daily_infection.logConfirmed","95a1e197":"model = sm.OLS(y, X)\nreg = model.fit()\nprint(reg.summary())","3136d5e7":"x0 = np.exp(reg.params[0])\nb = np.exp(reg.params[1])\nx0, b","d2e91df5":"t1 = np.arange(India_daily.shape[0])\ny = (x0 + b**t1).round()\ny","e1ecdb79":"upto_now = pd.DataFrame({'day_count': t1, \"Actual\": daily_infection[\"Confirmed\"], \"Predicted\": y, })\nupto_now","225070a6":"plt.plot(upto_now.day_count, upto_now.Actual, alpha=0.4, c=\"green\")\nplt.plot(upto_now.day_count, upto_now.Predicted, alpha=0.4, c=\"red\")\n\nplt.title(\"Actual vs Predicted Plot\")\nplt.legend([\"Actual Count\", \"Predicted Count\"])\nplt.xlabel(\"Day\")\nplt.ylabel(\"Infections\")\nplt.show()","0cbb921b":"from sklearn.metrics import mean_squared_error\n\nmean_squared_error(upto_now.Actual, upto_now.Predicted, squared=False)","f990030d":"India_daily.shape[0] + 14","5f0871f7":"t = np.arange(India_daily.shape[0], India_daily.shape[0] + 14)\nt","100fd609":"xt = (x0 + b**t).round()\nxt","cfe3a1c1":"next2weeks = pd.DataFrame({'day_count': t, \"Confirmed\": xt})\nnext2weeks","f561a4f5":"X = daily_infection.day_count\ny = daily_infection.Confirmed\n\nX1 = next2weeks.day_count\ny1 = next2weeks.Confirmed","8aae6718":"plt.scatter(X, y, alpha=0.2, c=\"blue\")\nplt.scatter(X1, y1, alpha=0.1, c=\"blue\")\nplt.plot(X, y)\nplt.plot(X1, y1)\nplt.title(\"Future Infection Prediction\")\nplt.legend([\"Up to the Present Day\", \"Next 14 Days Prediction\"])\nplt.xlabel(\"Day\")\nplt.ylabel(\"Infections\")\nplt.show()","064243fc":"Loading library and adding a constant","73187027":"The first step is to load libraries","2b9b3a51":"### This note book is just a trial from my end to see if exponetial growth model can be used to predict next few weeks infection growth in India. As the infection spread in India is at initial stage thus it is expected to have a exponential growth rate.","eace05ea":"Fitting OLS model the data","79bc6044":"References\n    \n    [1] Joos Korstanje (2020). \"Modeling Exponential Growth\", medium.com (TDataScience), https:\/\/towardsdatascience.com\/modeling-exponential-growth-49a2b6f22e1f.","4ce16b32":"# Fitting an Exponential Growth Model for Predicting Infection Spread in India","07c3fb29":"Calculating the next two weeks possible infection count","88539be1":"Transformation makes it linear though error will be present","5166a8b0":"We can fit linear regression (ordinary least square regression) to estimate the coefficients using the statsmodels package.","f25d5b9c":"Estimated coefficients are in log term so we need to take exponent to the actual parameter values","bfbca001":"### Prediction upto present date","b334c145":"Setting next two weeks data sequence in \"t\" varible","9716780c":"### Actual vs Predicted Data Frame","2c92c256":"To obtain the x0 and b we can fit a linear regression. But due to the exponential nature of the data we need to take logarithm of the confirmed cases and then fitting a linear regression. This kind of transformation is required.","49228c2f":"### Exponential growth function could be only applicable for intial outbreak as after some time, healed people will not spread the virus anymore and when (almost) everyone is or has been infected, the growth will stop [1]. Thus on such situation logistic growth could be the best representation.","6b7b22ad":"## Prediction plot","a452f8e4":"# Data Cleaning","8df0a739":"## Infection Plot","43ca050a":"# Model Fitting","bdbe1a2a":"### Prediction rmse","fb0acd3b":"## Model Coefficients ","381424f5":"## Predictions for next two week","f49b7b7a":"### Actual vs Predicted Plot","57f6da6b":"## Prediction for existing days","c136e604":"Plotting the projection of next two weeks with exiting data","e8c7ac0d":"> ## Fitting Exponential Growth Model","ecdcada6":"For the initial phase of outbrake, epidemiologist usually express the growth as exponetial growth.\nExponential growth can be expresed by the following formula:\n\n$x(t) = x_0 + b^t$\n\nwhere,\n* x(t) is the number of cases at any given time t\n* x0 is the number of cases at the beginning, also called initial value\n* b is the number of people get infected by each infected person, the growth factor","f535ceaf":"### SOURSES: \n* Individual level data comes from [covid19india](https:\/\/www.covid19india.org\/)\n* State level data comes from [Ministry of Health & Family Welfare](https:\/\/www.mohfw.gov.in\/)","18fbf4a8":"Checking the column names","cc60e582":"# Loading COVID-19 dataset","08d23e89":"### Estimate daily count","b84c4837":"# Load relavant libraries","a99c3477":"# Content :\n* [Load relavant libraries](#Load-relavant-libraries)\n* [Load dataset](#Load-dataset)\n* [Data Cleaning](#Data-Cleaning)\n * [Estimate daily count](#Estimate-daily-count)\n * [Infection Plot](#Infection-Plot)\n* [Model Fitting](#Model-Fitting)\n * [Model Coefficients](#Model-Coefficients)\n* [Prediction for existing days](#Prediction-for-existing-days)\n * [Prediction upto present date](#Prediction-upto-present-date)\n * [Actual vs Predicted Data Frame](#Actual-vs-Predicted-Data-Frame)\n * [Actual vs Predicted Plot](#Actual-vs-Predicted-Plot)\n* [Predictions for next two week](#Predictions-for-next-two-week)\n* [Prediction Plot](#Prediction-plot)\n"}}