{"cell_type":{"9b3f1984":"code","002c3798":"code","56338be6":"code","5d174545":"code","1d072e27":"code","3cf79b9a":"code","c4a110a6":"code","167e7711":"code","23455d44":"code","699f0f05":"code","cecc2592":"code","4281f85a":"code","96f21aca":"code","1808f523":"code","e0265e60":"code","4ad614e3":"code","d45c92c1":"code","d5e05551":"code","040b3eab":"code","827e160c":"code","d35ef2f4":"code","e9ce6f58":"code","2987cc48":"code","170bf9f5":"code","8db1cf80":"code","e8336e5a":"code","b8f827dc":"markdown","e9e0f886":"markdown","2dc63df9":"markdown","f7a1ef6c":"markdown","fac4e758":"markdown","8d423257":"markdown","c1185020":"markdown","34b9712a":"markdown","04d9f20a":"markdown","264e4cd4":"markdown","32ea8578":"markdown","3ab42b56":"markdown","b0738d58":"markdown","f35e384a":"markdown","1b9126e1":"markdown","f957e630":"markdown"},"source":{"9b3f1984":"import numpy as np\nimport datetime\nimport tensorflow as tf\nfrom tensorflow.keras.datasets import fashion_mnist","002c3798":"(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()","56338be6":"X_train","5d174545":"X_train[0]","1d072e27":"y_train","3cf79b9a":"y_train[0]","c4a110a6":"X_train = X_train \/ 255.0","167e7711":"X_test = X_test \/ 255.0","23455d44":"X_train[0]","699f0f05":"X_train.shape","cecc2592":"# As the dimension of each image is 28x28, we changed the entire database to the format [-1 (all elements), height * width]\nX_train = X_train.reshape(-1, 28*28)","4281f85a":"X_train.shape","96f21aca":"X_train[0]","1808f523":"# We also changed the test base dimension\nX_test = X_test.reshape(-1, 28*28)","e0265e60":"X_test.shape","4ad614e3":"model = tf.keras.models.Sequential()","d45c92c1":"model","d5e05551":"model.add(tf.keras.layers.Dense(units=128, activation='relu', input_shape=(784, )))","040b3eab":"model.add(tf.keras.layers.Dropout(0.2))","827e160c":"model.add(tf.keras.layers.Dense(units=10, activation='softmax'))","d35ef2f4":"model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['sparse_categorical_accuracy'])","e9ce6f58":"model.summary()","2987cc48":"model.fit(X_train, y_train, epochs=5)","170bf9f5":"test_loss, test_accuracy = model.evaluate(X_test, y_test)","8db1cf80":"print(\"Test accuracy: {}\".format(test_accuracy))","e8336e5a":"test_loss","b8f827dc":"# Preprocessing\n\n","e9e0f886":"0 0 0 0 0 1 0 0 0 0","2dc63df9":"# Normalizing images\n\nWe divide each pixel of the images from the training and test bases, using the largest value which is 255\n\nWith this, each pixel will be in the range between 0 and 1. This way, the neural network will train faster","f7a1ef6c":"# Adding the output layer\n\n- units: number of classes (10 in the Fashion MNIST database)\n- activation function: softmax","fac4e758":"# Adding Dropout\n\nDropout is a regularization technique in which some neurons in the layer have their value changed to zero, that is, during training these neurons will not be updated. As a result, we have less chance of overfitting","8d423257":"# Model evaluation and forecast","c1185020":"# Loading database","34b9712a":"# Database reshaping\n\nAs we are working with a dense neural network, we changed the dimension of the databases to be in vector format","04d9f20a":"# Compiling the model\n\n- Optimizer: Adam\n- Loss (error function): Sparse softmax (categorical) crossentropy","264e4cd4":"# Defining the model\n\nWe define an object of type Sequential (sequence of layers)","32ea8578":"# If you find this notebook useful, support with an upvote \ud83d\udc4d","3ab42b56":"# Adding the first dense (fully-connected) layer\n\nLayer hyper-parameters:\n- number of units\/neurons: 128\n- activation function: ReLU\n- input_shape (input layer): (784, )","b0738d58":"# Building the Artificial Neural Network","f35e384a":"# Training the model","1b9126e1":"\n<p align=\"center\">\n  <img src=\"https:\/\/storage.googleapis.com\/kaggle-datasets-images\/2243\/3791\/9384af51de8baa77f6320901f53bd26b\/dataset-cover.png\" \/>\n\n<\/p>","f957e630":"# libraries and the Database"}}