{"cell_type":{"dc6c1809":"code","86a4531b":"code","55ab7a8b":"code","af715049":"code","89cb5b59":"code","746a3f0e":"code","776689cc":"code","83377763":"code","f3192e17":"code","089cb280":"code","3130745f":"code","cf7f8489":"code","fb7d300f":"code","8cca359e":"code","500290de":"code","791e15ba":"code","e35525c6":"code","fca99167":"code","f1a1e978":"code","9035c874":"code","155d0fa5":"code","c6e79bf8":"code","44a395ca":"code","6ebff5a9":"code","dc4325eb":"code","59c10738":"code","c9ca0226":"code","2710218a":"code","03c3df41":"code","7dd6cd43":"code","217aefc9":"code","63552e52":"code","1dc1a9ea":"code","1424c32d":"code","ef62920d":"code","bbc9c6cc":"code","d1bc1988":"code","94ae8d52":"code","ae1855dd":"code","bd3ee0fa":"code","91470616":"code","b82fa237":"code","f5205e03":"markdown","728210eb":"markdown","90465c39":"markdown"},"source":{"dc6c1809":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\nimport datetime as dt\nimport matplotlib.pyplot as plt  \nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import BaggingRegressor, RandomForestRegressor, AdaBoostRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split, TimeSeriesSplit, GridSearchCV,cross_val_score \nimport os\nimport time\nimport datetime\nfrom sklearn.metrics import mean_absolute_error,r2_score, mean_squared_log_error,mean_squared_error, make_scorer\nplt.style.use('fivethirtyeight')\nsns.set_style(\"whitegrid\")\npd.set_option('display.max_columns', 500)","86a4531b":"dataset_path = '\/kaggle\/input\/seoul-bike-rental-ai-pro-iti'\ndf = pd.read_csv(os.path.join(dataset_path, 'train.csv'))","55ab7a8b":"df.rename(columns={\"ID\": \"ID\",\n                   \"Date\": \"date\",\n                   'y':'count',\n                   'Hour':'hour',\n                   'Temperature(\ufffdC)':'temperature',\n                  'Humidity(%)':'humidity',\n                  'Wind speed (m\/s)':'wind_speed',\n                  'Visibility (10m)':'visibility',\n                  'Dew point temperature(\ufffdC)':'dew_temperature',\n                  'Solar Radiation (MJ\/m2)':'solar_radiation',\n                  'Rainfall(mm)':'rainfall',\n                  'Snowfall (cm)':'snowfall',\n                  'Seasons':'season',\n                  'Holiday':'is_holiday',\n                  'Functioning Day':'functional_day'},inplace=True)","af715049":"df[\"date\"] = pd.to_datetime(df[\"date\"], dayfirst=True)\ndf['season']=df[\"season\"].map({'Winter':1,'Spring':2,'Autumn':3,'Summer':4})","89cb5b59":"def cyclic_encode(data, column, max_value):\n    data[column + '_sin'] = np.sin(2 * np.pi * data[column] \/ max_value)\n    data[column + '_cos'] = np.cos(2 * np.pi * data[column] \/ max_value)\n    data.drop(column,axis=1,inplace=True)\n    return data","746a3f0e":"def break_fun(x):\n    result=[]\n    if np.quantile(x,0)> 0:\n        result=[round(np.quantile(x,item),2) for item in np.linspace(0,1,5)]\n    else:\n        result=[round(np.quantile(x,item),2) for item in np.linspace(0,1,5)]\n    return result","776689cc":"def hour_group(x):\n    if x in range(0,7):\n        return 0\n    elif x in range(7,13):\n        return 2\n    elif x in range(13,19):\n        return 4\n    else:\n        return 3","83377763":"def month_group(x):\n    if x in [1,1,12,3,11,4]:\n        return 0\n    else:\n        return 1","f3192e17":"import math\ndef date_features(data):\n    # Date Features\n    data['year'] = data.date.dt.year\n    data['month'] = data.date.dt.month\n#     data['hour_group']=data['hour'].map(lambda x:hour_group(x))\n#     data['month_group']=data['month'].map(lambda x:month_group(x))\n    data['day'] = data.date.dt.day\n    data['dayofyear'] = data.date.dt.dayofyear\n    data['dayofweek'] = data.date.dt.dayofweek\n    data['day_name']=data.date.dt.day_name()\n    data['label_day_night']=data['hour'].apply(lambda x : 0 if (x >20 or x<5) else 1)\n    data['weekofyear'] = data.date.dt.weekofyear\n    data.drop(['date','day_name'], axis=1, inplace=True)\n    return data","089cb280":"df.head()","3130745f":"hourly_temp = list(range(1,13))\ncut_bins1 = [-18, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40]\ndf['hourly_temp'] = pd.cut(df['temperature'], bins=cut_bins1, labels=hourly_temp)\ncols_reg = ['hourly_temp']\ndf[cols_reg] = df[cols_reg].apply(pd.to_numeric, errors='coerce', axis=1)","cf7f8489":"cut_bins1d = [-30, -25,-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30]\ndf['hourly_tempd'] = pd.cut(df['dew_temperature'], bins=cut_bins1d, labels=hourly_temp)\ndf[['hourly_tempd']] = df[['hourly_tempd']].apply(pd.to_numeric, errors='coerce', axis=1)","fb7d300f":"df=date_features(df)","8cca359e":"df['is_holiday'] = [0 if item == 'No Holiday' else 1 for item in df['is_holiday']]\ndf['functional_day'] = [0 if item == 'No' else 1 for item in df['functional_day']]\ndf[\"work_day\"] = [0 if int(x)>4 else 1 for x in df[\"day\"]]","500290de":"from sklearn.cluster import KMeans\ncx=df[['temperature','humidity','wind_speed','visibility','solar_radiation','rainfall','snowfall']]\nkmeans = KMeans(n_clusters=4, random_state=0).fit(cx)\nkmeans.labels_\ncluster_pred=kmeans.predict(df[['temperature','humidity','wind_speed','visibility','solar_radiation','rainfall','snowfall']])\nkmeans.cluster_centers_,cluster_pred\ndf['weath']=cluster_pred","791e15ba":"shift_roll_cols=['temperature', 'humidity', 'wind_speed', 'visibility','solar_radiation', 'rainfall','hour']","e35525c6":"def add_rolls_time_series(df):\n    for col in shift_roll_cols:\n            for i in range(1,3):\n                shifted = df[col].shift(i)\n                window = shifted.rolling(window=1 if col not in ('rainfall', 'snowfall') else 2)\n                means = window.mean()\n                df[col+'_roll_'+str(i)]=means\n                df[col+'_roll_'+str(i)].fillna(means)\n    return df","fca99167":"def add_shifts_time_series(df):\n    for col in shift_roll_cols:\n        for i in range(1,3):\n            shifted = df[col].shift(i)\n            df[col+'_shift_'+str(i)]=shifted\n            df[col+'_shift_'+str(i)].fillna(shifted)\n    return df","f1a1e978":"df=add_rolls_time_series(df)","9035c874":"df=add_shifts_time_series(df)","155d0fa5":"df=cyclic_encode(df,'month',12)\ndf=cyclic_encode(df,'hour',23)","c6e79bf8":"df=df.fillna(0)","44a395ca":"df['count_log'] = np.log1p(df['count'])","6ebff5a9":"df.sample(5)","dc4325eb":"def rmsle(y, y_pred):\n    y = np.expm1(y)\n    y_pred=y_pred.clip(min=0,max=10)\n    y_pred = np.expm1(y_pred)\n    return np.sqrt(mean_squared_log_error(y, y_pred))","59c10738":"train = df[df['day']<=16]\ntest = df[df['day']>16]\ndrop_cols=['ID','count','count_log','day', 'dew_temperature','hourly_tempd','hourly_temp','year','work_day','weath','label_day_night','wind_speed_shift_1']\nX_train = train.drop(drop_cols,axis=1)\ny_train = train['count_log']\nX_test = test.drop(drop_cols,axis=1)\ny_test = test['count_log']","c9ca0226":"cols=X_train.columns\ncols","2710218a":"from catboost import Pool, CatBoostRegressor\n\n\ntrain_dataset = Pool(data=X_train,\n                     label=y_train)\n\ntest_dataset = Pool(data=X_test,\n                    label=y_test)\n\nmodel = CatBoostRegressor(iterations=30000,\n                          learning_rate=0.025,\n                          depth=4,\n                          loss_function='MAE',\n                          random_seed = 42,\n                          random_strength = 4 ,\n                          l2_leaf_reg=0.2,\n                          od_type='Iter',\n                          metric_period = 5000,\n                          od_wait=6000,\n                          use_best_model=True)\nmodel.fit(train_dataset,eval_set=test_dataset,use_best_model=True)\npred_1 = model.predict(X_train)\npred = model.predict(X_test) \n\nmet1 = rmsle(y_train, pred_1)\nprint('RMSLE : ', met1) \n\nmet2 = rmsle(y_test, pred)\nprint('RMSLE : ', met2) ","03c3df41":"\ndef plot_feature_importance(importance,names,model_type):\n    #Create arrays from feature importance and feature names\n    feature_importance = np.array(importance)\n    feature_names = np.array(names)\n\n    #Create a DataFrame using a Dictionary\n    data={'feature_names':feature_names,'feature_importance':feature_importance}\n    fi_df = pd.DataFrame(data)\n\n    #Sort the DataFrame in order decreasing feature importance\n    fi_df.sort_values(by=['feature_importance'], ascending=False,inplace=True)\n    print(fi_df.tail(10))\n    #Define size of bar plot\n    plt.figure(figsize=(10,12))\n    #Plot Searborn bar chart\n    \n    sns.barplot(x=fi_df['feature_importance'], y=fi_df['feature_names'])\n    #Add chart labels\n    plt.title(model_type + ' FEATURE IMPORTANCE')\n    plt.xlabel('FEATURE IMPORTANCE')\n    plt.ylabel('FEATURE NAMES')\n\nplot_feature_importance(model.get_feature_importance(),X_train.columns,'CATBOOST')\n","7dd6cd43":"test_df = pd.read_csv(os.path.join(dataset_path, 'test.csv'))","217aefc9":"test_df.describe()","63552e52":"test_df.rename(columns={\n                   \"Date\": \"date\",\n                   'y':'count',\n                   'Hour':'hour',\n                   'Temperature(\ufffdC)':'temperature',\n                  'Humidity(%)':'humidity',\n                  'Wind speed (m\/s)':'wind_speed',\n                  'Visibility (10m)':'visibility',\n                  'Dew point temperature(\ufffdC)':'dew_temperature',\n                  'Solar Radiation (MJ\/m2)':'solar_radiation',\n                  'Rainfall(mm)':'rainfall',\n                  'Snowfall (cm)':'snowfall',\n                  'Seasons':'season',\n                  'Holiday':'is_holiday',\n                  'Functioning Day':'functional_day'},inplace=True)","1dc1a9ea":"test_df[\"date\"] = pd.to_datetime(test_df[\"date\"], dayfirst=True)\ntest_df=date_features(test_df)","1424c32d":"cluster_test_pred=kmeans.predict(test_df[['temperature','humidity','wind_speed','visibility','solar_radiation','rainfall','snowfall']])\ntest_df['weath']=cluster_test_pred","ef62920d":"test_df=add_rolls_time_series(test_df)","bbc9c6cc":"test_df=add_shifts_time_series(test_df)","d1bc1988":"test_df=test_df.fillna(0)","94ae8d52":"test_df['hourly_temp'] = pd.cut(test_df['temperature'], bins=cut_bins1, labels=hourly_temp)\ntest_df[cols_reg] = test_df[cols_reg].apply(pd.to_numeric, errors='coerce', axis=1)","ae1855dd":"cut_bins1d = [-30, -25,-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30]\ntest_df['hourly_tempd'] = pd.cut(df['dew_temperature'], bins=cut_bins1d, labels=hourly_temp)\ntest_df[['hourly_tempd']] = test_df[['hourly_tempd']].apply(pd.to_numeric, errors='coerce', axis=1)","bd3ee0fa":"test_df['season']=test_df[\"season\"].map({'Winter':1,'Spring':2,'Autumn':3,'Summer':4})\ntest_df['is_holiday'] = [0 if item == 'No Holiday' else 1 for item in test_df['is_holiday']]\ntest_df['functional_day'] = [0 if item == 'No' else 1 for item in test_df['functional_day']]\ntest_df[\"work_day\"] = [0 if int(x)>4 else 1 for x in test_df[\"day\"]]\ntest_df=cyclic_encode(test_df,'month',12)\ntest_df=cyclic_encode(test_df,'hour',23)","91470616":"y_test_pred = model.predict(test_df[cols])\ny_test_pred=y_test_pred.clip(min=0,max=10)\ny_test_pred = np.expm1(y_test_pred)\ntest_df['y']=y_test_pred\ntest_df.loc[(test_df['functional_day']==0),'y'] = 0","b82fa237":"submit_path='\/kaggle\/working\/submission.csv'\ntest_df[['ID', 'y']].to_csv(submit_path, index=False)","f5205e03":"### Setup Enviroment","728210eb":"<p> The dataset has no null values and no duplicate rows<\/p>","90465c39":"## Seoul Bike Rental Prediction - AI-Pro - ITI\n\n### Problem Statement:\n\nIn the competition, it's required to predict the bike count per hour to stabilize the supply of rental bikes all the time.\n\n### Dataset Features Decription:\n\nThe dataset contains weather information (Temperature, Humidity, Windspeed, ..) also it includes the number of bikes rented per hour and date of rent information.\n\nFeatures Information:\n\n\n    ID - an ID for this instance\n    Date - year-month-day\n    Hour - Hour of he day\n    Temperature - Temperature in Celsius\n    Humidity - %\n    Windspeed - m\/s\n    Visibility - 10m\n    Dew point temperature - Celsius\n    Solar radiation - MJ\/m2\n    Rainfall - mm\n    Snowfall - cm\n    Seasons - Winter, Spring, Summer, Autumn\n    Holiday - Holiday\/No holiday\n    Functional Day - NoFunc(Non Functional Hours), Fun(Functional hours)\n    y - Rented Bike count (Target), Count of bikes rented at each hour\n\n\n\n"}}