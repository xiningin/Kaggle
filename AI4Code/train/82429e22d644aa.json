{"cell_type":{"94a6e879":"code","dd250d7e":"code","5732a68e":"code","1b189bd2":"code","6c781613":"code","ea567978":"code","404ff0be":"code","01c947a4":"code","40ef1161":"code","3d8ecc69":"code","e9ee41c6":"code","00942470":"code","8c881c10":"code","0bb8c502":"code","eedbf2be":"code","ec72ed05":"code","f47e81b9":"code","bfb78b8c":"code","fc62980d":"code","826644ec":"code","a8a23a3b":"code","3e652242":"code","d2bac6a5":"code","c0d72e24":"code","11272049":"code","410e4fdf":"code","25abe54b":"code","29ee6710":"code","d6c1a069":"code","8a7b11a3":"code","c4af706d":"code","2bde1d22":"code","9c31cae9":"code","27239f38":"code","73946e6a":"code","d1492d68":"code","5e73232b":"markdown","a0ce0ccc":"markdown","0cc3664e":"markdown"},"source":{"94a6e879":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd250d7e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport warnings\n\nwarnings.filterwarnings('ignore')\n%matplotlib inline","5732a68e":"terror_df = pd.read_csv(\"\/kaggle\/input\/gtd\/globalterrorismdb_0718dist.csv\", encoding ='latin1')\nterror_df.head()","1b189bd2":"terror_df.columns.to_list()","6c781613":"terror_df.rename(columns={'iyear':'Year','imonth':'Month','iday':'Day', 'country_txt':'Country','provstate':'state',\n                         'region_txt':'Region','attacktype1_txt':'AttackType','target1':'Target','nkill':'Killed',\n                       'nwound':'Wounded','summary':'Summary','gname':'Group','targtype1_txt':'Target_type',\n                       'weaptype1_txt':'Weapon_type','motive':'Motive'},inplace=True)","ea567978":"terror_df.columns","404ff0be":"#now we donot need all 135 columns, we'll just select the important ones\nterror_df = terror_df[['Year','Month','Day','Country','state','Region','city','latitude','longitude','AttackType','Killed',\n                      'Wounded','Target','Summary','Group','Target_type','Weapon_type','Motive']]\nterror_df.head()","01c947a4":"terror_df.shape","40ef1161":"#check for missing values\nterror_df.isnull().sum()","3d8ecc69":"terror_df.info()","e9ee41c6":"terror_df.describe(include='all')","00942470":"print('Country with most attacks: ',terror_df['Country'].value_counts().idxmax())\nprint('City with most attacks: ',terror_df['city'].value_counts().index[1])\nprint(\"Region with the most attacks:\",terror_df['Region'].value_counts().idxmax())\nprint(\"Year with the most attacks:\",terror_df['Year'].value_counts().idxmax())\nprint(\"Month with the most attacks:\",terror_df['Month'].value_counts().idxmax())\nprint(\"Group with the most attacks:\",terror_df['Group'].value_counts().index[1])\nprint(\"Most Attack Types:\",terror_df['AttackType'].value_counts().idxmax())","8c881c10":"terror_df['Year'].value_counts(dropna=False).sort_index()","0bb8c502":"#Barplot\nimport seaborn as sns\n\nx_year = terror_df['Year'].unique()\ny_year = terror_df['Year'].value_counts(dropna=False).sort_index()\nplt.figure(figsize=(15,10))\nplt.title(\"Attack in Years\")\nplt.xlabel(\"Attack Years\")\nplt.ylabel(\"Number of attacks each year\")\nplt.xticks(rotation=45)\nsns.barplot(x=x_year, y=y_year, palette= 'rocket')\nplt.show()","eedbf2be":"#Countplot\nplt.subplots(figsize=(15,6))\nsns.countplot('Year', data=terror_df, palette='RdYlGn_r',edgecolor=sns.color_palette(\"YlOrBr\", 5))\nplt.xticks(rotation=45)\nplt.title('CountPLot of Number Of Terrorist Activities Each Year')\nplt.show()","ec72ed05":"#Area plot\npd.crosstab(terror_df.Year,terror_df.Region).plot(kind='area',figsize=(15,6))\nplt.title('Terrorist activites by Region in each year')\nplt.ylabel(\"Number of attacks\")\nplt.show()","f47e81b9":"from wordcloud import WordCloud\nfrom scipy import signal\ncities=terror_df.state.dropna(False)\nplt.subplots(figsize=(10,10))\nwordcloud= WordCloud(background_color='white', width=500, height = 250).generate(' '.join(cities))\nplt.axis('off')\nplt.imshow(wordcloud)\nplt.show()","bfb78b8c":"terror_df['Wounded'] = terror_df['Wounded'].fillna(0).astype(int)\nterror_df['Killed'] = terror_df['Killed'].fillna(0).astype(int)\nterror_df['casualities'] = terror_df['Killed'] + terror_df['Wounded']","fc62980d":"#Taking only 30 countries for visualization of heatmap properly\nterror_copy = terror_df.sort_values(by='casualities',ascending=False)[:30]","826644ec":"terror_copy.corr()","a8a23a3b":"#Generating heatmap for correlation ploy\nplt.figure(figsize=[15,8])\nsns.heatmap(terror_copy.corr(),cmap='RdYlGn', linewidths=0.4)\nplt.show()","3e652242":"attack_country = terror_df.Country.value_counts()[:15]\nattack_country","d2bac6a5":"## Countries affected by terrorism\nplt.subplots(figsize=(12,6))\nsns.barplot(attack_country.index,attack_country.values,palette='Blues_d')\nplt.title('Top Countries Affected')\nplt.xlabel('Countries')\nplt.ylabel('Count')\nplt.xticks(rotation= 45)\nplt.show()","c0d72e24":"attack_groups = terror_df.Group.value_counts()[1:15]\nattack_groups","11272049":"## Groups involving most in terrorism\nplt.subplots(figsize=(12,6))\nsns.barplot(attack_groups.index,attack_groups.values,palette=sns.color_palette(\"hls\", 8))\nplt.title('Groups involving most in terrorism')\nplt.xlabel('Groups')\nplt.ylabel('Count')\nplt.xticks(rotation= 50)\nplt.show()","410e4fdf":"#Terrorist group names and killed each year\ngroup_killed= terror_df[['Group','Killed']].groupby(['Group'],axis=0).sum().sort_values('Killed', ascending=False).head(15)\ngroup_killed","25abe54b":"## People Killed by each group in terrorist activity\nplt.subplots(figsize=(12,6))\nsns.barplot(group_killed.index, group_killed.Killed.values,palette=\"crest\")\nplt.title('Number of People Killed by each terroris group')\nplt.xlabel('Terrorist Groups')\nplt.ylabel('Number of people killed')\nplt.xticks(rotation= 45)\nplt.show()","29ee6710":"died_people = terror_df[['Year','Killed']].groupby(['Year']).sum()\nplt.subplots(figsize=(12,6))\nsns.barplot(died_people.index, died_people.Killed.values,palette=\"rocket_r\")\nplt.title(\"Number of people died in each year\",fontsize=15)\nplt.ylabel(\"Number of People Died\")\nplt.xlabel('Year')\nplt.xticks(rotation = 45)\nplt.show()","d6c1a069":"attack_cities = terror_df.city.value_counts()[:15]\nattack_cities","8a7b11a3":"## Top Countries affected\nplt.subplots(figsize=(12,6))\nsns.barplot(attack_cities.index,attack_cities.values,palette=\"mako\")\nplt.title('Top Countries Affected')\nplt.xlabel('Cities')\nplt.ylabel('Number of attacks')\nplt.xticks(rotation= 45)\nplt.show()","c4af706d":"attack_type = terror_df.AttackType.value_counts()[:15]\nattack_type","2bde1d22":"## Attack types \nplt.subplots(figsize=(12,6))\nsns.barplot(attack_type.index,attack_type.values,palette=\"flare\")\nplt.title('Attack Types')\nplt.xlabel('Types ot attacks')\nplt.ylabel('Number of attacks')\nplt.xticks(rotation= 45)\nplt.show()","9c31cae9":"attack_killed = terror_df[['AttackType','Killed']].groupby([\"AttackType\"],axis=0).sum()\nattack_killed\n","27239f38":"## People Killed in each attack type\nplt.subplots(figsize=(12,6))\nsns.barplot(attack_killed.index, attack_killed.Killed.values,palette=\"cubehelix\")\nplt.title('Number of People Killed in each attack type')\nplt.xlabel('Types ot attacks')\nplt.ylabel('Number of people killed')\nplt.xticks(rotation= 45)\nplt.show()","73946e6a":"attack_wounded = terror_df[['AttackType','Wounded']].groupby([\"AttackType\"],axis=0).sum()\nattack_wounded\n","d1492d68":"## People Wounded in each attack type\nplt.subplots(figsize=(12,6))\nsns.barplot(attack_wounded.index, attack_wounded.Wounded.values,palette=\"viridis\")\nplt.title('Number of People wounded in each attack type')\nplt.xlabel('Types ot attacks')\nplt.ylabel('Number of people wounded')\nplt.xticks(rotation= 45)\nplt.show()","5e73232b":"## Author: Ashmal Vayani","a0ce0ccc":"## Exploratory Data Analysis","0cc3664e":"## Visualization"}}