{"cell_type":{"f2dee463":"code","94a22cf3":"code","42407b4c":"code","80946aad":"code","aa4a0807":"code","c5ef4911":"code","e93aef6d":"code","c4cabc8f":"code","deb0583e":"code","7a0578fe":"code","f1e4e6e6":"code","0992f818":"code","d3f78f31":"code","f2837873":"code","82f0a0e1":"code","93de3ea6":"code","ab2365dd":"code","11857d2f":"code","8fdb12f1":"code","e56e0c78":"code","d3565fd5":"code","8f1c2881":"code","6806acad":"code","0adf0a6c":"code","c62d19bb":"code","d3a596a7":"code","9b6dd491":"code","e14862f2":"code","845a2776":"code","1c528dab":"code","ae838931":"code","d9cf6645":"markdown","60ca1d16":"markdown","cf8ae310":"markdown","f2d85daa":"markdown","7fc56e96":"markdown","97a20cd3":"markdown","59bd5dcc":"markdown","370c246d":"markdown","80c7d301":"markdown","85d29733":"markdown","eb5e8cd9":"markdown","d5f30490":"markdown","ce663155":"markdown","ff484302":"markdown","45fcb1eb":"markdown","fab817a6":"markdown","6bee2619":"markdown","7e689355":"markdown","7a58bb07":"markdown","f9e92289":"markdown","a648c666":"markdown","29603c8f":"markdown","3ee15058":"markdown","07c79936":"markdown","73b2bd10":"markdown","58a9dd12":"markdown","6b43c769":"markdown","27f9e380":"markdown","e5cf6ff2":"markdown"},"source":{"f2dee463":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","94a22cf3":"import pandas as pd\ndf = pd.read_csv('\/kaggle\/input\/datasetsmaster\/temporal.csv')\ndf.head(10) #View first 10 data row\n","42407b4c":"df.describe()\n","80946aad":"df.describe().T","aa4a0807":"df.info()","c5ef4911":"print(f'Number of rows: {df.shape[0]};  Number of columns: {df.shape[1]}; No of missing values: {sum(df.isna().sum())}')","e93aef6d":"df.dtypes","c4cabc8f":"df.isnull().sum()","deb0583e":"import seaborn as sns\nfrom matplotlib import pyplot as plt\ndf.isnull().sum()\nsns.heatmap(df.isnull(), cbar = True).set_title(\"Missing values heatmap\")\nplt.gcf().set_size_inches(16,6)","7a0578fe":"format_dict = {'data science':'${0:,.2f}', 'Mes':'{:%m-%Y}', 'machine learning':'{:.2%}'}\n#We make sure that the Month column has datetime format\ndf['Mes'] = pd.to_datetime(df['Mes'])\n#We apply the style to the visualization\ndf.head().style.format(format_dict)","f1e4e6e6":"format_dict = {'Mes':'{:%m-%Y}'} #Simplified format dictionary with values that do make sense for our data\ndf.head().style.format(format_dict).highlight_max(color='darkgreen').highlight_min(color='#ff0000')","0992f818":"df.head(10).style.format(format_dict).background_gradient(subset=['data science', 'machine learning'], cmap='BuGn')","d3f78f31":"df.head().style.format(format_dict).bar(color='red', subset=['data science', 'deep learning'])","f2837873":"df.head(10).style.format(format_dict).background_gradient(subset=['data science', 'machine learning'], cmap='BuGn').highlight_max(color='blue')","82f0a0e1":"from pandas_profiling import ProfileReport\nprof = ProfileReport(df)\nprof.to_file(output_file='report.html')","93de3ea6":"import matplotlib.pyplot as plt\nplt.plot(df['Mes'], df['data science'], label='data science') #The parameter label is to indicate the legend. This doesn't mean that it will be shown, we'll have to use another command that I'll explain later.\n","ab2365dd":"plt.plot(df['Mes'], df['data science'], label='data science')\nplt.plot(df['Mes'], df['machine learning'], label='machine learning')\nplt.plot(df['Mes'], df['deep learning'], label='deep learning')","11857d2f":"plt.plot(df['Mes'], df['data science'], label='data science')\nplt.plot(df['Mes'], df['machine learning'], label='machine learning')\nplt.plot(df['Mes'], df['deep learning'], label='deep learning')\nplt.xlabel('Date')\nplt.ylabel('Popularity')\nplt.title('Popularity of AI terms by date')\nplt.grid(True)\nplt.legend()","8fdb12f1":"fig, axes = plt.subplots(2,2)\naxes[0, 0].hist(df['data science'])\naxes[0, 1].scatter(df['Mes'], df['data science'])\naxes[1, 0].plot(df['Mes'], df['machine learning'])\naxes[1, 1].plot(df['Mes'], df['deep learning'])\n","e56e0c78":"plt.plot(df['Mes'], df['data science'], 'r-')\nplt.plot(df['Mes'], df['data science']*2, 'bs')\nplt.plot(df['Mes'], df['data science']*3, 'g^')","d3565fd5":"plt.scatter(df['data science'], df['machine learning'])","8f1c2881":"plt.bar(df['Mes'], df['machine learning'], width=20)","6806acad":"plt.hist(df['deep learning'], bins=15)","0adf0a6c":"import seaborn as sns\nsns.set()\nsns.scatterplot(df['Mes'], df['data science'])","c62d19bb":"sns.relplot(x='Mes', y='deep learning', hue='data science', size='machine learning', col='categorical', data=df)","d3a596a7":"sns.heatmap(df.corr(), annot=True, fmt='.2f')\n","9b6dd491":"sns.pairplot(df)\n","e14862f2":"sns.pairplot(df, hue='categorical')\n","845a2776":"fig, axes = plt.subplots(1, 2, sharey=True, figsize=(8, 4))\nsns.scatterplot(x=\"Mes\", y=\"deep learning\", hue=\"categorical\", data=df, ax=axes[0])\naxes[0].set_title('Deep Learning')\nsns.scatterplot(x=\"Mes\", y=\"machine learning\", hue=\"categorical\", data=df, ax=axes[1])\naxes[1].set_title('Machine Learning')","1c528dab":"import folium\nm1 = folium.Map(location=[41.38, 2.17], tiles='openstreetmap', zoom_start=18)\nm1.save('map1.html')","ae838931":"m2 = folium.Map(location=[41.38, 2.17], tiles='openstreetmap', zoom_start=16)\nfolium.Marker([41.38, 2.176], popup='<i>You can use whatever HTML code you want<\/i>', tooltip='click here').add_to(m2)\nfolium.Marker([41.38, 2.174], popup='<b>You can use whatever HTML code you want<\/b>', tooltip='dont click here').add_to(m2)\nm2.save('map2.html')","d9cf6645":"* Matplotlib\nMatplotlib is the most basic library for visualizing data graphically. It includes many of the graphs that we can think of. Just because it is basic does not mean that it is not powerful, many of the other data visualization libraries we are going to talk about are based on it.\nMatplotlib\u2019s charts are made up of two main components, the axes (the lines that delimit the area of the chart) and the figure (where we draw the axes, titles and things that come out of the area of the axes). Now let\u2019s create the simplest graph possible:","60ca1d16":"Gallery of examples:\nIn this link, we can see examples of everything that can be done with Seaborn.","cf8ae310":"Using Pandas styles, we can get much more information when viewing the table. First, we define a format dictionary so that the numbers are shown in a legible way (with a certain number of decimals, date and hour in a relevant format, with a percentage, with a currency, \u2026) Don\u2019t panic, this is only a display and does not change the data, you will not have any problem to process it later.\nTo give an example of each type, I have added currency and percentage symbols even though they do not make any sense for this data.","f2d85daa":"Now let\u2019s see a few examples of the different graphics we can do with Matplotlib. We start with a scatterplot:","7fc56e96":"Another of the most popular is the pairplot that shows us the relationships between all the variables. Be careful with this function if you have a large dataset, as it has to show all the data points as many times as there are columns, it means that by increasing the dimensionality of the data, the processing time increases exponentially.","97a20cd3":"Now let\u2019s do the pairplot showing the charts segmented according to the values of the categorical variable","59bd5dcc":"# Check the data","370c246d":"**Pandas Profiling\n**Pandas profiling is a library that generates interactive reports with our data, we can see the distribution of the data, the types of data, possible problems it might have. It is very easy to use, with only 3 lines we can generate a report that we can send to anyone and that can be used even if you do not know programming.","80c7d301":"* **Pandas**\nBefore we move on to more complex methods, let\u2019s start with the most basic way of visualizing data. We will simply use pandas to take a look at the data and get an idea of how it is distributed.\nThe first thing we must do is visualize a few examples to see what columns there are, what information they contain, how the values are coded\u2026","85d29733":"We can make the graphs of multiple variables in the same graph and thus compare them.","eb5e8cd9":"One of the most popular graphics provided by Seaborn is the heatmap. It is very common to use it to show all the correlations between variables in a dataset:","d5f30490":"With the command describe we will see how the data is distributed, the maximums, the minimums, the mean, \u2026","ce663155":"Seaborn\nSeaborn is a library based on Matplotlib. Basically what it gives us are nicer graphics and functions to make complex types of graphics with just one line of code.\nWe import the library and initialize the style of the graphics with sns.set(), without this command the graphics would still have the same style as Matplotlib. We show one of the simplest graphics, a scatterplot","ff484302":"Moreover, we also can combine the above functions and generate a more complex visualization.","45fcb1eb":"We can also display the data values with bars.","fab817a6":"**We can highlight maximum and minimum values with colours.**","6bee2619":"Gallery of examples:\nIn this link: https:\/\/matplotlib.org\/gallery\/index.html we can see examples of all types of graphics that can be done with Matplotlib.","7e689355":"We can make multiple graphics in one figure. This goes very well for comparing charts or for sharing data from several types of charts easily with a single image.","7a58bb07":"Folium\nFolium is a library that allows us to draw maps, markers and we can also draw our data on them. Folium lets us choose the map supplier, this determines the style and quality of the map. In this article, for simplicity, we\u2019re only going to look at OpenStreetMap as a map provider.\nWorking with maps is quite complex and deserves its own article. Here we\u2019re just going to look at the basics and draw a couple of maps with the data we have.\nLet\u2019s begin with the basics, we\u2019ll draw a simple map with nothing on it.","f9e92289":"We use a color gradient to display the data values.","a648c666":"Learn more about styling visualizations with Pandas here: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/style.html","29603c8f":"We can add information of more than two variables in the same graph. For this we use colors and sizes. We also make a different graph according to the value of the category column:","3ee15058":"We can draw the graph with different styles for the points of each variable:","07c79936":"Let\u2019s see the main libraries for data visualization with Python and all the types of charts that can be done with them. We will also see which library is recommended to use on each occasion and the unique capabilities of each library.\nWe will start with the most basic visualization that is looking at the data directly, then we will move on to plotting charts and finally, we will make interactive charts.","73b2bd10":"It is not very clear which variable each color represents. We\u2019re going to improve the chart by adding a legend and titles.","58a9dd12":"We can add markers to the map:\n","6b43c769":"With the info command we will see what type of data each column includes. We could find the case of a column that when viewed with the head command seems numeric but if we look at subsequent data there are values in string format, then the variable will be coded as a string.","27f9e380":"We can create multiple graphics in one image just like we did with Matplotlib:","e5cf6ff2":"thank you [Albert Sanchez Lafuente](https:\/\/towardsdatascience.com\/complete-guide-to-data-visualization-with-python-2dd74df12b5e)"}}