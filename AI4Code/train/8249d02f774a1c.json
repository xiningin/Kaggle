{"cell_type":{"c76196ce":"code","49253bd8":"code","d373c514":"code","867fd657":"code","f755d6c4":"code","12d30237":"code","400bfeef":"code","54f7e602":"code","de0030fc":"code","ad9ec82b":"code","4816b326":"code","affb9ab3":"code","069da3b0":"code","003bfcaa":"code","3ff9f3c9":"code","ec237dfa":"code","dc8bcd8e":"code","b16f1959":"code","be7a1548":"code","bc6ac773":"code","ae265c52":"code","df4ced31":"code","d7884418":"code","e5f9cbfa":"code","422be44d":"code","10bc098d":"code","9409a453":"code","686693f7":"code","aee150d1":"code","c521c8df":"code","44d47a47":"code","6400b536":"code","106bffe9":"code","086b79c5":"code","a795c02c":"code","1acf59d2":"code","b80a22d4":"code","84bf1fff":"markdown","60170432":"markdown","8ee8b16f":"markdown","17920db9":"markdown","69da1cfb":"markdown"},"source":{"c76196ce":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC  \nimport lightgbm as lgb\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import StandardScaler\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import roc_curve, auc\nfrom mlxtend.feature_selection import SequentialFeatureSelector\nfrom sklearn.feature_selection import RFE\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Keras Specific\nimport tensorflow as tf\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom tensorflow import keras\nfrom tensorflow.keras import layers, callbacks\n\n","49253bd8":"train = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv')\n","d373c514":"test = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv')\n","867fd657":"test = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv')\ntest1 = test.copy()\ntest1.head()","f755d6c4":"train_df1 =  train.iloc[:100000,:]\ntrain_df2 = train.iloc[100000: 200000, :]\ntrain_df3 = train.iloc[200000: 300000, :]\ntrain_df4 = train.iloc[300000: 400000, :]\ntrain_df5 = train.iloc[400000: 500000, :]\ntrain_df6 = train.iloc[500000: 600000, :]","12d30237":"## for train_df1\nX1 = train_df1.drop(['target', 'id'], axis = 1)\ny1= train_df1.target\n\n## for train_df2\nX2 = train_df2.drop(['target', 'id'], axis = 1)\ny2= train_df2.target\n\n## for train_df3\nX3 = train_df3.drop(['target', 'id'], axis = 1)\ny3= train_df3.target\n\n## for train_df4\nX4 = train_df4.drop(['target', 'id'], axis = 1)\ny4= train_df4.target\n\n## for train_df5\nX5 = train_df5.drop(['target', 'id'], axis = 1)\ny5= train_df5.target\n\n## for train_df6\nX6 = train_df6.drop(['target', 'id'], axis = 1)\ny6= train_df6.target\n\n","400bfeef":"#model = RandomForestClassifier(n_estimators = 340)\n#model.fit(X1, y1)\n\n#importances = model.feature_importances_\n\n#std = np.std([tree.feature_importances_ for tree in model.estimators_], axis=0)\n#forest_importances = pd.Series(importances, index=X1.columns)\n\n#fig, ax = plt.subplots(figsize=(20,20))\n#forest_importances.plot.bar(yerr=std, ax=ax)\n#ax.set_title(\"Feature importances using MDI\")\n#ax.set_ylabel(\"Mean decrease in impurity\")\n#fig.tight_layout()","54f7e602":"X1.f34","de0030fc":"#imp_features = ['f98', 'f97', 'f96', 'f91', 'f82', 'f81', 'f80', 'f71', 'f66', 'f57', 'f55', 'f50', 'f43', 'f41', 'f34', 'f27', 'f25', 'f20', 'f16', 'f8']","ad9ec82b":"# Scaling the data\nscaler = StandardScaler()\n\nX1[:] = scaler.fit_transform(X1.values)\nX2[:] = scaler.fit_transform(X2.values)\nX3[:] = scaler.fit_transform(X3.values)\nX4[:] = scaler.fit_transform(X4.values)\nX5[:] = scaler.fit_transform(X5.values)\nX6[:] = scaler.fit_transform(X6.values)\n","4816b326":"# performing train-test split \nX_train1, X_val1, y_train1, y_val1 =  train_test_split(X1, y1, test_size=0.1, random_state=15)\nX_train2, X_val2, y_train2, y_val2 =  train_test_split(X2, y2, test_size=0.1, random_state=15)\nX_train3, X_val3, y_train3, y_val3 =  train_test_split(X3, y3, test_size=0.1, random_state=15)\nX_train4, X_val4, y_train4, y_val4 =  train_test_split(X4, y4, test_size=0.1, random_state=15)\nX_train5, X_val5, y_train5, y_val5 =  train_test_split(X5, y5, test_size=0.1, random_state=15)\nX_train6, X_val6, y_train6, y_val6 =  train_test_split(X6, y6, test_size=0.1, random_state=15)","affb9ab3":"print(X_train1.shape)\nprint(X_val1.shape)\nprint(y_train1.shape)\nprint(y_val1.shape)","069da3b0":"##params = { 'learning_rate' :[0.01, 0.05, 0.1, 0.2, 0.3],\n   # 'min_child_weight': [1 , 3, 5, 7],\n    #'max_depth' : [5, 7, 9, 11, 13],\n    #'n_estimators': [100, 300, 500],}\n\n#model1 = LGBMClassifier()\n\n#random_search = RandomizedSearchCV(model1, params, scoring = 'roc_auc_ovr', cv = 5, verbose = 10, n_iter = 10, n_jobs = -1)\n#random_search.fit(X_train1, y_train1)\n#random_search.best_params_\n\n","003bfcaa":"model_1 = LGBMClassifier(n_estimators=100,\n min_child_weight = 3,\n max_depth =  9,\n learning_rate =  0.1)\n\nmodel_1.fit(X_train1, y_train1 )","3ff9f3c9":"p1 = model_1.predict(X_val1)\nscore1 = roc_auc_score(y_val1, p1, multi_class = 'ovr')\nprint(score1)","ec237dfa":"#params = { 'learning_rate' :[0.01, 0.05, 0.1, 0.2, 0.3],\n    #'min_child_weight': [1 , 3, 5, 7],\n    #'max_depth' : [5, 7, 9, 11, 13],\n    #'n_estimators': [100, 300, 500],}\n\n#model2 = LGBMClassifier()\n\n#random_search = RandomizedSearchCV(model2, params, scoring = 'roc_auc_ovr', cv = 5, verbose = 10, n_iter = 10, n_jobs = -1)\n#random_search.fit(X_train2, y_train2)\n#random_search.best_params_\n","dc8bcd8e":"model_2 = LGBMClassifier(n_estimators =  300,\n min_child_weight = 5,\n max_depth= 5,\n learning_rate= 0.1)\n\n\nmodel_2.fit(X_train2, y_train2)\n\np2 = model_2.predict(X_val2)\nscore2 = roc_auc_score(y_val2, p2, multi_class = 'ovr')\nprint(score2)","b16f1959":"#params = { 'learning_rate' :[0.01, 0.05, 0.1, 0.2, 0.3],\n    #'min_child_weight': [1 , 3, 5, 7],\n    #'max_depth' : [5, 7, 9, 11, 13],\n    #'n_estimators': [100, 300, 500],}\n\n#model3 = LGBMClassifier()\n\n#random_search = RandomizedSearchCV(model3, params, scoring = 'roc_auc_ovr', cv = 5, verbose = 10, n_iter = 10, n_jobs = -1)\n#random_search.fit(X_train3, y_train3)\n#random_search.best_params_\n","be7a1548":"model_3 = LGBMClassifier(n_estimators=500,\n min_child_weight = 1,\n max_depth =  5,\n learning_rate =  0.1)\n\nmodel_3.fit(X_train3, y_train3)\n\np3 = model_3.predict(X_val3)\nscore3 = roc_auc_score(y_val3, p3, multi_class = 'ovr')\nprint(score3)","bc6ac773":"print(score3)","ae265c52":"#params = { 'learning_rate' :[0.01, 0.05, 0.1, 0.2, 0.3],\n    #'min_child_weight': [1 , 3, 5, 7],\n    #'max_depth' : [5, 7, 9, 11, 13],\n    #'n_estimators': [100, 300, 500],}\n\n#model4 = LGBMClassifier()\n\n#random_search = RandomizedSearchCV(model4, params, scoring = 'roc_auc_ovr', cv = 5, verbose = 10, n_iter = 10, n_jobs = -1)\n#random_search.fit(X_train4, y_train4)\n#random_search.best_params_\n","df4ced31":"model_4 = LGBMClassifier(n_estimators=300,\n min_child_weight = 3,\n max_depth =  7,\n learning_rate =  0.05)\n\nmodel_4.fit(X_train4, y_train4)\n\np4 = model_4.predict(X_val4)\nscore4 = roc_auc_score(y_val4, p4, multi_class = 'ovr')\nprint(score4)","d7884418":"#params = { 'learning_rate' :[0.01, 0.05, 0.1, 0.2, 0.3],\n    #'min_child_weight': [1 , 3, 5, 7],\n    #'max_depth' : [5, 7, 9, 11, 13],\n    #'n_estimators': [100, 300, 500],}\n\n#model5 = LGBMClassifier()\n\n#random_search = RandomizedSearchCV(model5, params, scoring = 'roc_auc_ovr', cv = 5, verbose = 10, n_iter = 10, n_jobs = -1)\n#random_search.fit(X_train5, y_train5)\n#random_search.best_params_","e5f9cbfa":"model_5 = LGBMClassifier(n_estimators=500,\n min_child_weight = 5,\n max_depth =  7,\n learning_rate =  0.1)\n\n\nmodel_5.fit(X_train4, y_train4)\n\np5 = model_5.predict(X_val5)\nscore5 = roc_auc_score(y_val5, p5, multi_class = 'ovr')\nprint(score5)","422be44d":"#params = { 'learning_rate' :[0.01, 0.05, 0.1, 0.2, 0.3],\n   # 'min_child_weight': [1 , 3, 5, 7],\n    #'max_depth' : [5, 7, 9, 11, 13],\n    #'n_estimators': [100, 300, 500],}\n\n#model6 = LGBMClassifier()\n\n#random_search = RandomizedSearchCV(model6, params, scoring = 'roc_auc_ovr', cv = 5, verbose = 10, n_iter = 10, n_jobs = -1)\n#random_search.fit(X_train6, y_train6)\n#random_search.best_params_","10bc098d":"model_6 = LGBMClassifier(n_estimators=500,\n min_child_weight = 7,\n max_depth =  7,\n learning_rate =  0.05)\n\n\nmodel_6.fit(X_train6, y_train6)\n\np6 = model_6.predict(X_val6)\nscore6 = roc_auc_score(y_val6, p6, multi_class = 'ovr')\nprint(score6)","9409a453":"\nmodel_xgb1 = XGBClassifier(n_estimators=100,\n min_child_weight = 3,\n max_depth =  9,\n learning_rate =  0.1)\n\nmodel_xgb1.fit(X_train1, y_train1 )\n\npx1 = model_xgb1.predict(X_val1)\nscore1 = roc_auc_score(y_val1, px1, multi_class = 'ovr')\nprint(score1)","686693f7":"\nmodel_xgb2 = XGBClassifier(n_estimators =  300,\n min_child_weight = 5,\n max_depth= 5,\n learning_rate= 0.1)\n\n\nmodel_xgb2.fit(X_train2, y_train2)\n\npx2 = model_xgb2.predict(X_val2)\nscore2 = roc_auc_score(y_val2, px2, multi_class = 'ovr')\nprint(score2)","aee150d1":"\nmodel_xgb3 = XGBClassifier(n_estimators=500,\n min_child_weight = 1,\n max_depth =  5,\n learning_rate =  0.1)\n\nmodel_xgb3.fit(X_train3, y_train3)\n\npx3 = model_xgb3.predict(X_val3)\nscore3 = roc_auc_score(y_val3, p3, multi_class = 'ovr')\nprint(score3)","c521c8df":"\nmodel_xgb4 = XGBClassifier(n_estimators=300,\n min_child_weight = 3,\n max_depth =  7,\n learning_rate =  0.05)\n\nmodel_xgb4.fit(X_train4, y_train4)\n\np4 = model_xgb4.predict(X_val4)\nscore4 = roc_auc_score(y_val4, p4, multi_class = 'ovr')\nprint(score4)","44d47a47":"\nmodel_xgb5 = XGBClassifier(n_estimators=500,\n min_child_weight = 5,\n max_depth =  7,\n learning_rate =  0.1)\n\n\nmodel_xgb5.fit(X_train4, y_train4)\n\np5 = model_xgb5.predict(X_val5)\nscore5 = roc_auc_score(y_val5, p5, multi_class = 'ovr')\nprint(score5)","6400b536":"model_xgb6 = XGBClassifier(n_estimators=500,\n min_child_weight = 7,\n max_depth =  7,\n learning_rate =  0.05)\n\n\nmodel_xgb6.fit(X_train6, y_train6)\n\np6 = model_xgb6.predict(X_val6)\nscore6 = roc_auc_score(y_val6, p6, multi_class = 'ovr')\nprint(score6)","106bffe9":"# Preprocessing test data\ntest1.drop(['id'], inplace = True, axis=1)\ntest1[:] = scaler.fit_transform(test1.values)","086b79c5":"# making prediction\ntp1 = model_1.predict(test1)\ntp_xgb1 = model_xgb1.predict(test1)\nfp1 = (tp1+ tp_xgb1)\/2\n\ntp2 = model_2.predict(test1)\ntp_xgb2 = model_xgb2.predict(test1)\nfp2 = (tp2+ tp_xgb2)\/2\n\ntp3 =model_3.predict(test1)\ntp_xgb3 = model_xgb3.predict(test1)\nfp3 = (tp3+ tp_xgb3)\/2\n\ntp4 = model_4.predict(test1)\ntp_xgb4 = model_xgb4.predict(test1)\nfp4 = (tp4+ tp_xgb4)\/2\n\ntp5 = model_5.predict(test1)\ntp_xgb5 = model_xgb5.predict(test1)\nfp5 = (tp5+ tp_xgb5)\/2\n\ntp6 = model_6.predict(test1)\ntp_xgb6 = model_xgb6.predict(test1)\nfp6 = (tp6+ tp_xgb6)\/2\n\nfinal_pred = (fp1+fp2+fp3+fp4+fp5+fp6)\/6","a795c02c":"result  = pd.DataFrame(final_pred, columns = ['target'])\nresult['id'] = test['id']\nprint(result.head())","1acf59d2":"result = result[['id', 'target']]","b80a22d4":"result.to_csv('tab7.csv', index = False)","84bf1fff":"# # # # XGB","60170432":"Creating a list of important features as shown by graph","8ee8b16f":"since our datasset is large we will split it into six equal parts so that fitting model does not take time","17920db9":"# # LGBM","69da1cfb":"# # # Feature Selection"}}