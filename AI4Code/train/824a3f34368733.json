{"cell_type":{"248969ef":"code","712068c2":"code","4e518c48":"code","ccb2ab63":"code","79377d05":"code","aaf4b4ed":"code","c0aa20f0":"code","99b04c5e":"code","a62ed7a5":"code","3e4b727f":"code","d65dd3d1":"code","4109d710":"code","ff55af33":"code","55c5b767":"code","10cc7326":"code","3a1d3fe4":"markdown","82a86944":"markdown","ace1d6bc":"markdown","73550fcc":"markdown","c1bea0fc":"markdown","6d348b6c":"markdown","8eddcd61":"markdown","9d27d79f":"markdown","c794e14a":"markdown","f0de0a11":"markdown","8d30c46b":"markdown","538bae3d":"markdown","e52b3433":"markdown"},"source":{"248969ef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport matplotlib.pyplot as plt # visualizing data\nimport seaborn as sns \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\ndf = pd.read_csv('..\/input\/BlackFriday.csv')","712068c2":"df.head(10)","4e518c48":"#update NaN values with 0 for Product_Category_1 , Product_Category_2 , Product_Category_3\ndf[\"Product_Category_1\"].fillna(0, inplace=True)\ndf[\"Product_Category_2\"].fillna(0, inplace=True)\ndf[\"Product_Category_3\"].fillna(0, inplace=True)\n","ccb2ab63":"df.info()","79377d05":"# this method draws plot by using dataframe's own plot method. get counts of df[column] for df[group]\ndef plot(group,column,plot):\n    ax=plt.figure(figsize=(6,4))\n    df.groupby(group)[column].sum().plot(plot)\n\n# this method draws plot by using sns library. get counts of df[column] for df[group]\ndef plotUsingSns(group,column):\n    fig1, ax1 = plt.subplots(figsize=(8,5))\n    sns.countplot(df[group],hue=df[column])\n    \n# this method draws piechart for counts of df[column]\ndef pieChartByCounts(df, column):\n    fig1, ax1 = plt.subplots(figsize=(8,5))\n    sf = df[column].value_counts() #Produces Pandas Series\n    explode =()\n    for i in range(len(sf.index)):\n        if i == 0:\n            explode += (0.1,)\n        else:\n            explode += (0,)\n    ax1.pie(sf.values, explode=explode,labels=sf.index, autopct='%1.1f%%', shadow=True, startangle=90)\n    # Equal aspect ratio ensures that pie is drawn as a circle\n    ax1.axis('equal')  \n    plt.tight_layout()\n    plt.legend()\n    plt.show()\n\n# this method draws piechart for sf.values for sf.indexes\ndef pieChartByValues(sf, title, legentTitle):\n    \n    from matplotlib.font_manager import FontProperties\n    fontP = FontProperties()\n    fontP.set_size('small')\n    cmap = plt.get_cmap(\"magma_r\")\n    colors = [cmap(i) for i in np.linspace(0, 1, 20)]\n\n    fig1, ax1 = plt.subplots(figsize=(8,5))\n    \n    explode =()\n    \n    for i in range(len(sf.values)):\n        if sf.index[i] == sf.idxmax():\n            explode += (0.1,)\n        else:\n            explode += (0,)\n    ax1.pie(sf.values, explode=explode,labels=sf.index, autopct='%1.1f%%', shadow=True, startangle=90, colors=colors, radius =1)\n    # Equal aspect ratio ensures that pie is drawn as a circle\n    ax1.axis('equal')  \n    plt.tight_layout()\n    plt.legend(loc='upper center',prop=fontP, bbox_to_anchor=(1.2, 1),title=legentTitle)\n    plt.title(title)\n    plt.show()","aaf4b4ed":"pieChartByCounts(df, 'Gender' )","c0aa20f0":"plot('Gender','Purchase','bar')","99b04c5e":"#Filter data \ndf_by_occupation_and_categories = df.groupby(['Gender','Product_Category_1']).count().reset_index('Product_Category_1')\n\n#use filtered data to draw graphs for each index \nfor i in list(df_by_occupation_and_categories.index.unique()):\n    sf = pd.Series (df_by_occupation_and_categories['Purchase'][i].get_values() , index = df_by_occupation_and_categories['Product_Category_1'][i].get_values())\n    pieChartByValues(sf , \"Gender {0}\".format(i), \"Product Category\")","a62ed7a5":"plotUsingSns('Age','Gender')","3e4b727f":"plot('Age','Purchase','bar')","d65dd3d1":"pieChartByCounts(df,'Age')","4109d710":"pieChartByCounts(df,'City_Category')","ff55af33":"plotUsingSns ('City_Category', 'Stay_In_Current_City_Years')","55c5b767":"plotUsingSns ('Marital_Status', 'Product_Category_1')","10cc7326":"#Filter data\ndf_by_occupation_and_categories = df.groupby(['Occupation','Product_Category_1']).count().reset_index('Product_Category_1')\n\n# draw on filtered data for each index value of data \nfor i in range (len(df_by_occupation_and_categories.index.unique())):\n    sf = pd.Series (df_by_occupation_and_categories['Gender'][i].get_values() , index = df_by_occupation_and_categories['Product_Category_1'][i].get_values())\n    pieChartByValues(sf , \"Occupation {0}\".format(i), \"Product Category\")","3a1d3fe4":"Fpr city category, who are most interested according to \"staying in city for years\"?","82a86944":"I create procedures here which I will use to analyze data in the next steps ","ace1d6bc":"**Conclusion**<br>\nWe can say that age between **26-35** are **most** interestered in Black Friday and ages between **0-17** and **55+** are **least** interested in Black Friday","73550fcc":"# <div id=\"1\"> 1. Gender<div\/>\n    \nI will search following :\n*  Which gender are more interested in Balck Friday , Female or Male   ?\n*  Which gender interested in which product most ?","c1bea0fc":"# <div id=\"3\"> 3. City Category<div\/>","6d348b6c":"# <div id=\"4\"> 4.  Marial Status<div\/>\n    * Which marial status buys which Product most?","8eddcd61":"# <div id=\"5\"> 5.  Occupation<div\/>\n    * In which occupation , which Product is sold most?","9d27d79f":"**Conclusion**<br>\nProduct_Category_1 product saled in Occupation areas are as : <br>\n* Category 1 is saled in 7 occupation areas\n* Category 5 is saled in 13 occupation areas\n* Category 8 is saled in 1 occupation areas<br>\n\nThe **most populer product category** for Product_Category_1  for Occupations is number  **5**","c794e14a":"**Conclusion ** : <br>\nWe can say that **men** have **more attendency** to buy product on Black Friday <br>\n**Men** are more interested in **Product 1** of Product Category 1 and **Women** are more interested in **Product 5** of Product Category 1","f0de0a11":"**Conlusion** <br>\n* City category **B** is **most** interested and city category **A** is **least** interested in Black Friday\n* People staying for **1 year** definitely are most interested in all city_categories . For other years there is no so much difference","8d30c46b":"**Conclusion**<br>\n**Marial status does not effect**  of buying 'product category 1' habbit . For two marial status Product 5 is #1 , Product 1 is #2 and product 8 is #3","538bae3d":"<div id=\"0\">\nIn this homework , I will analyze and visualize human behaviours for Black Friday days. Which gender, age , city has most attandency to buy which product  <br>\n\n1. [Gender](#1)\n2. [Age](#2)\n3. [City Category](#3)\n4. [Marial Status](#4)\n5. [Occupation](#5)","e52b3433":"# <div id=\"2\"> 2. Age<div\/>"}}