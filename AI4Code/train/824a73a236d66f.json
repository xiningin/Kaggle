{"cell_type":{"86d31808":"code","7aa388ca":"code","d616a1f2":"code","5e96a889":"code","cc7e138e":"code","8874118a":"code","2ffde001":"code","1ca30c80":"code","2d296488":"code","403118d9":"code","f665d4f9":"code","e24e16e0":"code","28b2a60d":"code","63416f56":"code","5fa5f24b":"code","a86657c9":"code","3d4f60b6":"code","22fd229c":"code","c5c4ad42":"code","66fe4944":"code","2c4c16b8":"code","953a9685":"code","6c0a7e57":"code","c7de3cee":"code","3b973931":"code","ca82810e":"code","9eacafb0":"code","ee0f2ada":"code","ca6ce04d":"code","cdf05d92":"code","f0976b34":"code","81eb543c":"code","5a4e8c99":"code","6ce7080a":"code","dfcdc97a":"code","2748ca9e":"code","d6791005":"code","61424d90":"code","53ab0d5e":"code","dcb1d64a":"code","54e61e67":"code","bbe19c8a":"code","5af59605":"code","4a04c738":"code","6cea563e":"code","72784b3e":"code","cd214597":"code","fec63e48":"code","959d5bd8":"code","d708f769":"markdown","ae647b45":"markdown","252480ac":"markdown","970ed7bc":"markdown","05c33022":"markdown","25c2300d":"markdown","18e6c96e":"markdown","5c3eb0c2":"markdown","e3012ff1":"markdown","6075db1e":"markdown","8fac0628":"markdown","b16cf446":"markdown","66835492":"markdown","d89c3719":"markdown","72e00629":"markdown","63b69a4c":"markdown","a37254e4":"markdown","a9887bb7":"markdown","d62d4ba4":"markdown"},"source":{"86d31808":"from IPython.display import Image\nImage(filename='..\/input\/studentpreformance\/skynews-exams-stock_4388943.jpg', width=\"800\", height='50')","7aa388ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport cufflinks as cf \n  \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\n%matplotlib inline\nsns.set_style(\"whitegrid\")\nplt.style.use(\"fivethirtyeight\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d616a1f2":"data = pd.read_csv(\"\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv\")\ndata.head()","5e96a889":"data.tail()","cc7e138e":"data.info()","8874118a":"data.describe().T","2ffde001":"#### Visualizing the null values using missingo function\n\nimport missingno as msno\nmsno.matrix(data)","1ca30c80":"# visualising the number of male and female in the dataset\nplt.subplots(figsize=(15,5))\ndata['gender'].value_counts(normalize = True)\ndata['gender'].value_counts(dropna = False).plot.bar(color = 'cyan')\nplt.title('Comparison of Males and Females')\nplt.xlabel('gender')\nplt.ylabel('count')\nplt.show()","2d296488":"data['race\/ethnicity'].value_counts()","403118d9":"# visualizing the different groups in the dataset\nplt.subplots(figsize=(15,5))\ndata['race\/ethnicity'].value_counts(normalize = True)\ndata['race\/ethnicity'].value_counts(dropna = False).plot.bar(color=['black', 'red', 'green', 'blue', 'cyan'])\nplt.title('Comparison of various groups')\nplt.xlabel('Groups')\nplt.ylabel('count')\nplt.show()","f665d4f9":"# Prepare Data\ndf = data.groupby('race\/ethnicity').size()\n\n# Make the plot with pandas\ndf.plot(kind='pie', subplots=True, figsize=(15, 8))\nplt.title(\"Pie Chart of Vehicle Class - Bad\")\nplt.ylabel(\"\")\nplt.show()","e24e16e0":"# visualizing the differnt parental education levels\nplt.subplots(figsize=(15,5))\ndata['parental level of education'].value_counts(normalize = True)\ndata['parental level of education'].value_counts(dropna = False).plot.bar(color=['black', 'red', 'green', 'blue', 'cyan'])\nplt.title('Comparison of Parental Education')\nplt.xlabel('Degree')\nplt.ylabel('count')\nplt.show()","28b2a60d":"# visualizing different types of lunch \nplt.subplots(figsize=(15,5))\ndata['lunch'].value_counts(normalize = True)\ndata['lunch'].value_counts(dropna = False).plot.bar(color = 'yellow')\nplt.title('Comparison of different types of lunch')\nplt.xlabel('types of lunch')\nplt.ylabel('count')\nplt.show()","63416f56":"# visualizing different types of lunch \nplt.subplots(figsize=(15,5))\ndata['test preparation course'].value_counts(normalize = True)\ndata['test preparation course'].value_counts(dropna = False).plot.bar(color = ['red', 'green'])\nplt.title('Comparison of different types of Test Prepration like Test Completed or Not')\nplt.xlabel('Test Completed or Not')\nplt.ylabel('count')\nplt.show()","5fa5f24b":"# visualizing maths score\nplt.subplots(figsize=(15,5))\ndata['math score'].value_counts(normalize = True)\ndata['math score'].value_counts(dropna = False).plot.bar(figsize = (18, 10))\nplt.title('Comparison of math scores')\nplt.xlabel('Maths Marks \/ score')\nplt.ylabel('count')\nplt.show()","a86657c9":"# visualizing reading score score\nplt.subplots(figsize=(15,5))\ndata['reading score'].value_counts(normalize = True)\ndata['reading score'].value_counts(dropna = False).plot.bar(figsize = (18, 10), color = 'orange')\nplt.title('Comparison of Reading Scores')\nplt.xlabel('Reading Marks \/ Score')\nplt.ylabel('Sount')\nplt.show()","3d4f60b6":"# visualizing writing score\nplt.subplots(figsize=(15,5))\ndata['writing score'].value_counts(normalize = True)\ndata['writing score'].value_counts(dropna = False).plot.bar(figsize = (18, 10), color = 'green')\nplt.title('Comparison of Writing scores')\nplt.xlabel('Writing marks \/ Score')\nplt.ylabel('Count')\nplt.show()","22fd229c":"plt.figure(figsize = (16,5))\n#sns.distplot(data['writing score'])\n\nplt.subplot(1, 3, 1)\nsns.distplot(data['math score'])\n\nplt.subplot(1, 3, 2)\nsns.distplot(data['reading score'])\n\nplt.subplot(1, 3, 3)\nsns.distplot(data['writing score'])\n\nplt.show()","c5c4ad42":"# lets take seed so that everytime the random values come out to be constant\nnp.random.seed(6)\n\n# lets take 100 sample values from the dataset of 1000 values\nsample_math_marks = np.random.choice(a= data['math score'], size=100)\n\n# getting the sample mean\nprint (\"Sample mean for Math Scores:\", sample_math_marks.mean() )          \n\n# getting the population mean\nprint(\"Population mean for Math Scores:\", data['math score'].mean())\n\n# lets take 100 sample values from the dataset of 1000 values\nsample_reading_marks = np.random.choice(a= data['reading score'], size=100)\n\n# getting the sample mean\nprint (\"\\nSample mean for Reading Scores:\", sample_reading_marks.mean() )          \n\n# getting the population mean\nprint(\"Population mean for Reading Scores:\", data['reading score'].mean())\n\n# lets take 100 sample values from the dataset of 1000 values\nsample_writing_marks = np.random.choice(a= data['writing score'], size=100)\n\n# getting the sample mean\nprint (\"\\nSample mean for Writing Scores:\", sample_math_marks.mean() )          \n\n# getting the population mean\nprint(\"Population mean for Writing Scores:\", data['writing score'].mean())","66fe4944":"# lets import the scipy package\nimport scipy.stats as stats\nimport math\n\n# lets seed the random values\nnp.random.seed(10)\n\n# lets take a sample size\nsample_size = 1000\nsample = np.random.choice(a= data['math score'],\n                          size = sample_size)\nsample_mean = sample.mean()\n\n# Get the z-critical value*\nz_critical = stats.norm.ppf(q = 0.95)  \n\n # Check the z-critical value  \nprint(\"z-critical value: \",z_critical)                                \n\n# Get the population standard deviation\npop_stdev = data['math score'].std()  \n\n# checking the margin of error\nmargin_of_error = z_critical * (pop_stdev\/math.sqrt(sample_size)) \n\n# defining our confidence interval\nconfidence_interval = (sample_mean - margin_of_error,\n                       sample_mean + margin_of_error)  \n\n# lets print the results\nprint(\"Confidence interval:\",end=\" \")\nprint(confidence_interval)\nprint(\"True mean: {}\".format(data['math score'].mean()))","2c4c16b8":"# lets import the scipy package\nimport scipy.stats as stats\nimport math\n\n# lets seed the random values\nnp.random.seed(10)\n\n# lets take a sample size\nsample_size = 1000\nsample = np.random.choice(a= data['reading score'],\n                          size = sample_size)\nsample_mean = sample.mean()\n\n# Get the z-critical value*\nz_critical = stats.norm.ppf(q = 0.95)  \n\n # Check the z-critical value  \nprint(\"z-critical value: \",z_critical)                                \n\n# Get the population standard deviation\npop_stdev = data['reading score'].std()\n\n# checking the margin of error\nmargin_of_error = z_critical * (pop_stdev\/math.sqrt(sample_size)) \n\n# defining our confidence interval\nconfidence_interval = (sample_mean - margin_of_error,\n                       sample_mean + margin_of_error)  \n\n# lets print the results\nprint(\"Confidence interval:\",end=\" \")\nprint(confidence_interval)\nprint(\"True mean: {}\".format(data['reading score'].mean()))","953a9685":"# lets take a sample size\nsample_size = 1000\nsample = np.random.choice(a= data['writing score'],\n                          size = sample_size)\nsample_mean = sample.mean()\n\n# Get the z-critical value*\nz_critical = stats.norm.ppf(q = 0.95)  \n\n # Check the z-critical value  \nprint(\"z-critical value: \",z_critical)                                \n\n# Get the population standard deviation\npop_stdev = data['writing score'].std()  \n\n# checking the margin of error\nmargin_of_error = z_critical * (pop_stdev\/math.sqrt(sample_size)) \n\n# defining our confidence interval\nconfidence_interval = (sample_mean - margin_of_error,\n                       sample_mean + margin_of_error)  \n\n# lets print the results\nprint(\"Confidence interval:\",end=\" \")\nprint(confidence_interval)\nprint(\"True mean: {}\".format(data['writing score'].mean()))","6c0a7e57":"# comparison of parental degree and test course\nplt.subplots(figsize=(15,5))\nsns.countplot(x = 'parental level of education', data = data, hue = 'test preparation course', palette = 'dark')\nplt.show()","c7de3cee":"# comparison of race\/ethnicity and test preparation course\nplt.subplots(figsize=(15,5))\nsns.countplot(x = 'race\/ethnicity', data = data,  hue = 'test preparation course', palette = 'bright')\nplt.show()\n","3b973931":"# feature engineering on the data to visualize and solve the dataset more accurately\n\n# setting a passing mark for the students to pass on the three subjects individually\nplt.subplots(figsize=(15,8))\npassmarks = 40\n\n# creating a new column pass_math, this column will tell us whether the students are pass or fail\ndata['pass_math'] = np.where(data['math score']< passmarks, 'Fail', 'Pass')\ndata['pass_math'].value_counts(dropna = False).plot.bar(color = 'black', figsize = (5, 3))\n\nplt.title('Comparison of students passed or failed in maths')\nplt.xlabel('status')\nplt.ylabel('count')\nplt.show()","ca82810e":"# creating a new column pass_math, this column will tell us whether the students are pass or fail\ndata['pass_reading'] = np.where(data['reading score']< passmarks, 'Fail', 'Pass')\ndata['pass_reading'].value_counts(dropna = False).plot.bar(color = 'brown', figsize = (5, 3))\n\nplt.title('Comparison of students passed or failed in maths')\nplt.xlabel('status')\nplt.ylabel('count')\nplt.show()","9eacafb0":"# creating a new column pass_math, this column will tell us whether the students are pass or fail\ndata['pass_writing'] = np.where(data['writing score']< passmarks, 'Fail', 'Pass')\ndata['pass_writing'].value_counts(dropna = False).plot.bar(color = 'blue', figsize = (5, 3))\n\nplt.title('Comparison of students passed or failed in maths')\nplt.xlabel('status')\nplt.ylabel('count')\nplt.show()","ee0f2ada":"# computing the total score for each student\nplt.subplots(figsize=(15,8))\ndata['total_score'] = data['math score'] + data['reading score'] + data['writing score']\n\ndata['total_score'].value_counts(normalize = True)\ndata['total_score'].value_counts(dropna = True).plot.bar(color = 'cyan', figsize = (40, 8))\n\nplt.title('comparison of total score of all the students')\nplt.xlabel('total score scored by the students')\nplt.ylabel('count')\nplt.show()","ca6ce04d":"# computing percentage for each of the students\n# importing math library to use ceil\nfrom math import * \n\ndata['percentage'] = data['total_score']\/3\n\nfor i in range(0, 1000):\n  data['percentage'][i] = ceil(data['percentage'][i])\n\ndata['percentage'].value_counts(normalize = True)\ndata['percentage'].value_counts(dropna = False).plot.bar(figsize = (16, 8), color = 'red')\n\nplt.title('Comparison of percentage scored by all the students')\nplt.xlabel('percentage score')\nplt.ylabel('count')\nplt.show()","cdf05d92":"# checking which student is fail overall\n\ndata['status'] = data.apply(lambda x : 'Fail' if x['pass_math'] == 'Fail' or \n                           x['pass_reading'] == 'Fail' or x['pass_writing'] == 'Fail'\n                           else 'pass', axis = 1)\n\ndata['status'].value_counts(dropna = False).plot.bar(color = 'gray', figsize = (15, 5))\nplt.title('overall results')\nplt.xlabel('status')\nplt.ylabel('count')\nplt.show()","f0976b34":"# setting a passing mark for the students to pass on the three subjects individually\npassmarks = 40\nplt.rcParams['figure.figsize'] = (18, 12)\n\n# creating a new column pass_math, this column will tell us whether the students are pass or fail\ndata['pass_math'] = np.where(data['math score']< passmarks, 'Fail', 'Pass')\ndata['pass_reading'] = np.where(data['reading score']< passmarks, 'Fail', 'Pass')\ndata['pass_writing'] = np.where(data['writing score']< passmarks, 'Fail', 'Pass')\n\n# pie chart to represent the ratio of pass and fail status between the students\n\nsize = data['pass_math'].value_counts()\ncolors = plt.cm.Reds(np.linspace(0, 1, 3))\nlabels = \"pass\", \"fail\"\nexplode = [0, 0.2]\n\nplt.subplot(1, 3, 1)\nplt.pie(size, colors = colors, labels = labels, autopct = '%.2f%%', explode = explode, shadow = True)\nplt.title('Students Result for Maths', fontsize = 20)\nplt.legend()\n\nsize = data['pass_reading'].value_counts()\ncolors = plt.cm.Greens(np.linspace(0, 1, 2))\nlabels = \"pass\", \"fail\"\nexplode = [0, 0.2]\n\nplt.subplot(1, 3, 2)\nplt.pie(size, colors = colors, labels = labels, autopct = '%.2f%%', explode = explode, shadow = True)\nplt.title('Students Result for Reading', fontsize = 20)\nplt.legend()\n\nsize = data['pass_writing'].value_counts()\ncolors = plt.cm.Blues(np.linspace(0, 1, 3))\nlabels = \"pass\", \"fail\"\nexplode = [0, 0.2]\n\nplt.subplot(1, 3, 3)\nplt.pie(size, colors = colors, labels = labels, autopct = '%.2f%%', explode = explode, shadow = True)\nplt.title('Students Result for Writing', fontsize = 20)\nplt.legend()\n\nplt.show()","81eb543c":"# Assigning grades to the grades according to the following criteria :\n# 0  - 40 marks : grade E\n# 41 - 60 marks : grade D\n# 60 - 70 marks : grade C\n# 70 - 80 marks : grade B\n# 80 - 90 marks : grade A\n# 90 - 100 marks : grade O\n\ndef getgrade(percentage, status):\n  if status == 'Fail':\n    return 'E'\n  if(percentage >= 90):\n    return 'O'\n  if(percentage >= 80):\n    return 'A'\n  if(percentage >= 70):\n    return 'B'\n  if(percentage >= 60):\n    return 'C'\n  if(percentage >= 40):\n    return 'D'\n  else :\n    return 'E'\n\ndata['grades'] = data.apply(lambda x: getgrade(x['percentage'], x['status']), axis = 1 )\n\ndata['grades'].value_counts()","5a4e8c99":"# plotting a pie chart for the distribution of various grades amongst the students\n\n\nplt.subplots(figsize=(15,8))\nlabels = ['Grade 0', 'Grade A', 'Grade B', 'Grade C', 'Grade D', 'Grade E']\nsizes = [58, 156, 260, 252, 223, 51]\ncolors = ['yellow', 'gold', 'lightskyblue', 'lightcoral', 'pink', 'cyan']\nexplode = (0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001)\n\npatches, texts = plt.pie(sizes, colors=colors, shadow=True, startangle=90)\nplt.legend(patches, labels)\nplt.axis('equal')\nplt.tight_layout()\nplt.show()","6ce7080a":"# for better visualization we will plot it again using seaborn\nplt.subplots(figsize=(15,8))\nsns.countplot(x = data['parental level of education'], data = data, hue = data['grades'], palette = 'pastel')\nplt.show()","dfcdc97a":"# comparing the distribution of grades among males and females\nplt.subplots(figsize=(15,8))\nsns.countplot(x = data['grades'], data = data, hue = data['gender'], palette = 'cubehelix')\n#sns.palplot(sns.dark_palette('purple'))\nplt.show()","2748ca9e":"# heatmap\n\nplt.rcParams['figure.figsize'] = (18, 16)\nsns.heatmap(data.corr(), cmap = 'rainbow', annot = True)\nplt.title('Correlations between the attributes', fontsize = 20)","d6791005":"data.head()","61424d90":"from sklearn.preprocessing import LabelEncoder\n\n# creating an encoder\nle = LabelEncoder()\n\n# label encoding for test preparation course\ndata['test preparation course'] = le.fit_transform(data['test preparation course'])\n\n# label encoding for lunch\n\ndata['lunch'] = le.fit_transform(data['lunch'])","53ab0d5e":"# label encoding for race\/ethnicity\n# we have to map values to each of the categories\n\ndata['race\/ethnicity'] = data['race\/ethnicity'].replace('group A', 1)\ndata['race\/ethnicity'] = data['race\/ethnicity'].replace('group B', 2)\ndata['race\/ethnicity'] = data['race\/ethnicity'].replace('group C', 3)\ndata['race\/ethnicity'] = data['race\/ethnicity'].replace('group D', 4)\ndata['race\/ethnicity'] = data['race\/ethnicity'].replace('group E', 5)\n\ndata['race\/ethnicity'].value_counts()","dcb1d64a":"# label encoding for parental level of education\n\ndata['parental level of education'] = le.fit_transform(data['parental level of education'])\ndata['parental level of education'].value_counts()","54e61e67":"# label encoding for gender\n\ndata['gender'] = le.fit_transform(data['gender'])\n\n# label encoding for pass_math\ndata['pass_math'] = le.fit_transform(data['pass_math'])\n\n# label encoding for pass_reading\n\ndata['pass_reading'] = le.fit_transform(data['pass_reading'])\n\n# label encoding for pass_writing\n\ndata['pass_writing'] = le.fit_transform(data['pass_writing'])\n\n# label encoding for status\n\ndata['status'] = le.fit_transform(data['status'])","bbe19c8a":"# label encoding for grades\n# we have to map values to each of the categories\n\ndata['grades'] = data['grades'].replace('O', 0)\ndata['grades'] = data['grades'].replace('A', 1)\ndata['grades'] = data['grades'].replace('B', 2)\ndata['grades'] = data['grades'].replace('C', 3)\ndata['grades'] = data['grades'].replace('D', 4)\ndata['grades'] = data['grades'].replace('E', 5)\n\ndata['race\/ethnicity'].value_counts()","5af59605":"# splitting the dependent and independent variables\n\nx = data.iloc[:,:14]\ny = data.iloc[:,14]\n\nprint(x.shape)\nprint(y.shape)","4a04c738":"# splitting the dataset into training and test sets\n\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 45)\n\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","6cea563e":"# importing the MinMaxScaler\nfrom sklearn.preprocessing import MinMaxScaler\n\n# creating a scaler\nmm = MinMaxScaler()\n\n# feeding the independent variable into the scaler\nx_train = mm.fit_transform(x_train)\nx_test = mm.transform(x_test)","72784b3e":"from sklearn.ensemble import RandomForestClassifier\n\n# creating a model\nmodel = RandomForestClassifier()\n\n# feeding the training data to the model\nmodel.fit(x_train, y_train)\n\n# predicting the x-test results\ny_pred = model.predict(x_test)\n\n# calculating the accuracies\nprint(\"Training Accuracy :\", model.score(x_train, y_train))\nprint(\"Testing Accuracy :\", model.score(x_test, y_test))","cd214597":"# printing the confusion matrix\nplt.subplots(figsize=(15,8))\nfrom sklearn.metrics import confusion_matrix\n\n# creating a confusion matrix\ncm = confusion_matrix(y_test, y_pred)\n\n# printing the confusion matrix\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, cmap = 'Purples')","fec63e48":"from sklearn.metrics import classification_report\n\ncr = classification_report(y_test, y_pred)\nprint(cr)","959d5bd8":"## Reference\n\n### https:\/\/www.kaggle.com\/roshansharma\/student-performance-analysis\n### https:\/\/www.kaggle.com\/rpsuraj\/outlier-detection-techniques-simplified","d708f769":"#### <font color='blue'>1. Importing Library<\/font>\n#### <font color='blue'>2. Reading the Dataset<\/font>\n#### <font color='blue'>3. Data Visualization<\/font>\n#### <font color='blue'>4. Detecting Outliers<\/font>\n#### <font color='blue'>5. Data Preprocessing<\/font>\n#### <font color='blue'>6. Data Modeling<\/font>","ae647b45":"# <font color='purple'> Data Preprocessing<\/font>","252480ac":"# <font size=\"+3\" color=red ><b> <center><u>Student Performance Analysis, Visualization & Prediction<\/u><\/center><\/b><\/font><br><a id=\"top\"><\/a>","970ed7bc":"**Let check the Confidence Interval for Writing Score**","05c33022":"**Let check the Confidence Interval for Math Score**","25c2300d":"- It is very much clear, that there is no skewness in the Target Columns,","18e6c96e":"### <font color='purple'> Classification Report<\/font>","5c3eb0c2":"# <font color='purple'> Detecting Outliers <\/font>","e3012ff1":"# <font color='purple'> Data Visualization <\/font>","6075db1e":"**Lets check the Inference**","8fac0628":"### If these kernels impress you,give them an <font size=\"+2\" color=\"red\"><b>Upvote<\/b><\/font>.<br>","b16cf446":"<font size=\"+3\" color=\"blue\"><b>Table of Content<\/b><\/font>","66835492":"# <font color='purple'> Modeling <\/font>","d89c3719":"# <font color='purple'>Importing Library<\/font>","72e00629":"### <font color='purple'> Random Forest Classifier Algorithm<\/font>","63b69a4c":"**Let check the Confidence Interval for Reading Score**","a37254e4":"### <font color='purple'> Confustion Matrix<\/font>","a9887bb7":"<a href=\"#top\" class=\"btn btn-success btn-lg active\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to Colors\">Go to TOP<\/a>","d62d4ba4":"## <font color='purple'> Loading Dataset<\/font>"}}