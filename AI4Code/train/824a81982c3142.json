{"cell_type":{"dbfd54e8":"code","ef5f454c":"code","c98e1fb6":"code","c9ae702e":"code","b43a81d4":"code","29e16002":"code","5b0bf90a":"code","8404679f":"code","23892830":"code","2fd61081":"code","1bed64f3":"code","b17fb54b":"code","32a2231a":"code","ff48bc03":"code","6abbc748":"code","0fde6461":"code","d7734c00":"code","b26ebfa3":"code","a5ec5ea7":"code","4f845ecf":"code","44a871ee":"code","bc6d1a37":"code","9680b582":"code","b6361e42":"code","1514ece7":"code","f66e9556":"code","32ffeffd":"code","756f8ce7":"code","8c4cc74f":"code","fe9a025b":"code","c90358fd":"code","f6d1422f":"code","ac8d9594":"code","e148b0a1":"code","ff698ae0":"code","d0a45b72":"code","3bd5539e":"code","35eab409":"code","dcb01576":"code","71766b37":"code","4abe1ef9":"code","44e2f16f":"code","ea4c28f1":"code","9104e1f0":"code","69b2495f":"code","40e5e78e":"code","7a7032d3":"code","d9d08123":"code","bfde43b6":"code","71e809b5":"code","97517c0b":"code","3664578d":"code","7664e404":"code","69cc62b6":"code","5f2797e6":"code","235cae4d":"code","69e16ffb":"code","2863f472":"code","26605293":"code","c0870866":"code","d693546a":"code","b9f42633":"code","0a5c5d28":"code","29555d06":"code","316b9ff3":"code","b2b200dc":"code","7202feb7":"code","29b117ca":"code","56112ec4":"code","37548969":"code","03abad29":"markdown","48503317":"markdown","c5f994ae":"markdown","47658a2d":"markdown","61d1855b":"markdown","2b135ead":"markdown","c9455ade":"markdown","608e6a50":"markdown","8a481623":"markdown","a2140330":"markdown","6e4396ed":"markdown","e4a2f3eb":"markdown","66aef148":"markdown","ceb778a1":"markdown","77dc0b25":"markdown","66871b1f":"markdown","b098359f":"markdown","87a4c549":"markdown","2864323a":"markdown","63e2fd21":"markdown","a2f5d08c":"markdown","65a21173":"markdown","1bcfa88d":"markdown","8904675f":"markdown","af84725a":"markdown","9a75d486":"markdown"},"source":{"dbfd54e8":"import pandas as pd\npd.set_option('display.max_colwidth', -1)  \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib\nmatplotlib.rcParams['animation.html'] = 'jshtml'\nimport seaborn as sns\n\nimport tensorflow as tf\nimport tensorflow.keras as keras\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.models import *\nfrom kaggle_datasets import KaggleDatasets\n\nfrom sklearn.model_selection import train_test_split\nimport pydicom\nimport os, re, gc, glob, cv2\nimport imageio\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","ef5f454c":"# import wandb\n# print('W&B version: ', wandb.__version__)\n# from wandb.keras import WandbCallback\n\n# wandb.login()","c98e1fb6":"gpus = tf.config.list_physical_devices('GPU')\nif gpus:\n  try:\n    # Currently, memory growth needs to be the same across GPUs\n    for gpu in gpus:\n      tf.config.experimental.set_memory_growth(gpu, True)\n    logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n    print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\n  except RuntimeError as e:\n    # Memory growth must be set before GPUs have been initialized\n    print(e)","c9ae702e":"root_dir = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/'\ndf = pd.read_csv(root_dir+'train_labels.csv')\nsns.countplot(data=df, x='MGMT_value')","b43a81d4":"# Add the full paths for each id for different types of sequences to the csv \ndef full_ids(data):\n    zeros = 5 - len(str(data))\n    if zeros > 0:\n        prefix = ''.join(['0' for i in range(zeros)])\n    \n    return prefix+str(data)\n        \n\ndf['BraTS21ID_full'] = df['BraTS21ID'].apply(full_ids)\n\n# Add all the paths to the df for easy access\ndf['flair'] = df['BraTS21ID_full'].apply(lambda file_id : root_dir+'train\/'+file_id+'\/FLAIR\/')\ndf['t1w'] = df['BraTS21ID_full'].apply(lambda file_id : root_dir+'train\/'+file_id+'\/T1w\/')\ndf['t1wce'] = df['BraTS21ID_full'].apply(lambda file_id : root_dir+'train\/'+file_id+'\/T1wCE\/')\ndf['t2w'] = df['BraTS21ID_full'].apply(lambda file_id : root_dir+'train\/'+file_id+'\/T2w\/')\ndf","29e16002":"data = pydicom.dcmread('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00000\/T1w\/Image-24.dcm')\ndata","5b0bf90a":"def get_image(data):\n    if np.max(data.pixel_array)==0:\n        img = data.pixel_array\n    else:\n        img = data.pixel_array\/np.max(data.pixel_array)   \n    return img\ndata = pydicom.dcmread('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00000\/T1w\/Image-24.dcm')\nimg = get_image(data)\nplt.imshow(img, cmap='gray')","8404679f":"def sorted_image_dirs(path: str):\n    '''\n    Sorts the list of image directories by image number in a path\n    '''\n    dirs = glob.glob(path+'*')\n    dirs.sort(key=lambda x: int(x.split('\/')[-1].split('-')[-1].split('.')[0]))\n    \n    return dirs\n\n\ndef get_all_images(path: str):\n    '''\n    Returns a list of images (non empty) from a given path\n    '''\n    image_dirs = sorted_image_dirs(path)\n    images = []\n    \n    for dir in image_dirs:\n        data = pydicom.dcmread(dir)\n        img = get_image(data)\n        \n        # Exclude the blank images\n        if np.max(img)!=0:\n            images.append(img)\n        else:\n            pass\n    \n    return images\n        \n    \ndef show_animation(images: list):\n    '''\n    Displays an animation from the list of images.\n    \n    set: matplotlib.rcParams['animation.html'] = 'jshtml'\n    \n    '''\n    fig = plt.figure(figsize=(6, 6))\n    plt.axis('off')\n    im = plt.imshow(images[0], cmap='gray')\n    \n    def animate_func(i):\n        im.set_array(images[i])\n        return [im]\n    \n    return matplotlib.animation.FuncAnimation(fig, animate_func, frames = len(images), interval = 20)","23892830":"# flair_images = get_all_images(df['flair'][0])\n    \n# print('No of images:', len(flair_images))\n# flair_animation = show_animation(flair_images)\n# flair_animation\n# # flair_animation.save('.\/a.mp4')","2fd61081":"# t2w_images = get_all_images(df['t2w'][0])\n    \n# print('No of images:', len(t2w_images))\n# show_animation(t2w_images)","1bed64f3":"def get_image_plane(data):\n    x1,y1,_,x2,y2,_ = [round(j) for j in data.ImageOrientationPatient]\n    cords = [x1,y1,x2,y2]\n\n    if cords == [1,0,0,0]:\n        return 'coronal'\n    if cords == [1,0,0,1]:\n        return 'axial'\n    if cords == [0,1,0,0]:\n        return 'sagittal'","b17fb54b":"fig = plt.figure(figsize=(35,20))\n\nseq_types = ['flair', 't1w', 't1wce', 't2w']\n\nfor i in range(16):\n    \n    index = np.random.randint(low=0, high=len(df))\n    seq_type = np.random.choice(seq_types)\n\n    # path for the randomly selected image and sequence type\n    seq_path = df[seq_type][index]\n\n    # list of images in the seq_path\n    tmp = sorted_image_dirs(seq_path)\n\n    # Get the middle image dicom\n    dicom = pydicom.dcmread(tmp[len(tmp)\/\/2])\n    \n    patient_id, mgmt, plane = df['BraTS21ID_full'][index], df['MGMT_value'][index], get_image_plane(dicom)\n    \n    ax = fig.add_subplot(4,5,i+1)\n    ax.imshow(get_image(dicom), cmap='gray')\n    plt.title(f'ID: {patient_id}, MGMT_value: {mgmt}, Plane: {plane}, Seq_type: {seq_type}')","32a2231a":"fig = plt.figure(figsize=(35,20))\n\nindex = 0\n\nfor i in range(4):\n    \n    seq_type = seq_types[i]\n    seq_path = df[seq_type][index]\n\n    tmp = sorted_image_dirs(seq_path)\n\n    # Get the middle image dicom\n    dicom = pydicom.dcmread(tmp[len(tmp)\/\/2])\n    \n    patient_id, mgmt, plane = df['BraTS21ID_full'][index], df['MGMT_value'][index], get_image_plane(dicom)\n    \n    ax = fig.add_subplot(1,4,i+1)\n    ax.imshow(get_image(dicom), cmap='gray')\n    plt.title(f'ID: {patient_id}, MGMT_value: {mgmt}, Plane: {plane}, Seq_type: {seq_type}')","ff48bc03":"submission = pd.read_csv(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/sample_submission.csv\")\n# submission.to_csv(\"submission.csv\", index=False)\nsubmission","6abbc748":"# Load training csv file\ndf = pd.read_csv('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv')\n\ndef get_patient_id(patient_id):\n    if patient_id < 10:\n        return '0000'+str(patient_id)\n    elif patient_id >= 10 and patient_id < 100:\n        return '000'+str(patient_id)\n    elif patient_id >= 100 and patient_id < 1000:\n        return '00'+str(patient_id)\n    else:\n        return '0'+str(patient_id)\n\ndef get_path(row):\n    patient_id = get_patient_id(row.BraTS21ID)\n    return f'..\/input\/rsna-miccai-png\/train\/{patient_id}\/FLAIR\/'\n\ndf['path'] = df.apply(lambda row: get_path(row), axis=1)\n\n# Removing two patient ids from the dataframe since there are not FLAIR directories for these ids. \ndf = df.loc[df.BraTS21ID!=109]\ndf = df.loc[df.BraTS21ID!=709]\ndf = df.reset_index(drop=True)\n\ndf.head()\n\n","0fde6461":"sample = pd.read_csv(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/sample_submission.csv\")\nsample","d7734c00":"train = pd.read_csv(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv\")\ntrain","b26ebfa3":"dataset = pydicom.filereader.dcmread('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00000\/FLAIR\/Image-109.dcm')\nimg = dataset.pixel_array\n\nfig, ax = plt.subplots()\nax.imshow(img, cmap='gray')\nax.set_axis_off()\nplt.show()","a5ec5ea7":"def makeimg(path):\n    dataset = pydicom.filereader.dcmread(path)\n    img = dataset.pixel_array\n    return img","4f845ecf":"train[\"imfolder\"] = ['{0:05d}'.format(s) for s in train[\"BraTS21ID\"]]\ntrain","44a871ee":"train_path = \"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\"\n\ntrain[\"path\"] = [os.path.join(train_path,s) for s in train[\"imfolder\"]  ]\ntrain","bc6d1a37":"Scans = [\"FLAIR\",\"T1w\",\"T1wCE\",\"T2w\"]","9680b582":"Scans[1]","b6361e42":"from tqdm import tqdm","1514ece7":"train.head(3)","f66e9556":"os.path.join(train[\"path\"].iloc[0],\"FLAIR\")","32ffeffd":"os.listdir(os.path.join(train[\"path\"].iloc[0],\"FLAIR\"))[:10]","756f8ce7":"def sorted_nicely(l):\n   \"\"\" Sort the given iterable in the way that humans expect.\"\"\"\n   convert = lambda text: int(text) if text.isdigit() else text\n   alphanum_key = lambda key: [ convert(c) for c in re.split('([0-9]+)', key) ]\n   print(alphanum_key)\n   return sorted(l, key = alphanum_key)\npatient_ids = os.listdir('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train')\nIDX = np.random.choice(len(patient_ids))","8c4cc74f":"patient_id = patient_ids[IDX]\nflair_filenames = os.listdir(f'..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/{patient_id}\/FLAIR\/')\nflair_filenames = sorted_nicely(flair_filenames)\n\npatient_id = patient_ids[IDX]\nT1w_filenames = os.listdir(f'..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/{patient_id}\/T1w\/')\nT1w_filenames = sorted_nicely(T1w_filenames)\n\npatient_id = patient_ids[IDX]\nT1wCE_filenames = os.listdir(f'..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/{patient_id}\/T1wCE\/')\nT1wCE_filenames = sorted_nicely(T1w_filenames)\n\npatient_id = patient_ids[IDX]\nT2w_filenames = os.listdir(f'..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/{patient_id}\/T2w\/')\nT2w_filenames = sorted_nicely(T2w_filenames)","fe9a025b":"flair_filenames[:5]","c90358fd":"T1w_filenames[:5]","f6d1422f":"len(os.listdir(os.path.join(train[\"path\"].iloc[0],\"FLAIR\")))","ac8d9594":"for scan in Scans:\n    train[scan +\"_count\"] = [ len(os.listdir(os.path.join(train[\"path\"].iloc[s],scan))) for s in tqdm(range(len(train))) ]","e148b0a1":"train","ff698ae0":"allsame = [train[\"FLAIR_count\"].iloc[s] ==   train[\"T1w_count\"].iloc[s] ==train[\"T1wCE_count\"].iloc[s] ==train[\"T2w_count\"].iloc[s] \n          for s in range(len(train))]","d0a45b72":"train[\"allsame\"] = allsame\ntrain","3bd5539e":"train[\"allsame\"].sum()","35eab409":"train[\"allsame\"].sum()\/len(train) * 100","dcb01576":"train[\"allsame\"]","71766b37":"train[train[\"allsame\"]]","4abe1ef9":"train[\"BraTS21ID\"]","44e2f16f":"row_id = 64","ea4c28f1":"train[\"BraTS21ID\"].iloc[row_id]","9104e1f0":"temp_folder = train[\"path\"].iloc[row_id]\ntemp_folder","69b2495f":"temp_folder2 = os.path.join(temp_folder,\"FLAIR\")\ntemp_files = os.listdir(temp_folder2)\ntemp_files[:3]","40e5e78e":"imagenum = [s.split(\"-\")[1] for s in temp_files] # Image\/4.dcm\nimagenum = [s.split(\".\")[0] for s in imagenum] # 4\/dcm -> [0] index \ub2c8\uae4c -> 4 \nimagenum[:3]","7a7032d3":"temp_path = [os.path.join(temp_folder2,s) for s in temp_files]\ntemp_path[:3]","d9d08123":"tempdf = pd.DataFrame()\ntempdf[\"image_num\"] = imagenum\ntempdf[\"image_num\"] = tempdf[\"image_num\"].astype(\"int\")\n\ntempdf[\"temp_path\"] = temp_path\ntempdf.head(5)","bfde43b6":"tempdf = tempdf.sort_values(\"image_num\").reset_index(drop=True)\ntempdf.head(5)","71e809b5":"finpath = tempdf[\"temp_path\"]\nfinpath","97517c0b":"def makepath(row_ID,scan):\n    \n    temp_folder = train[\"path\"].iloc[row_ID]\n    temp_folder2 = os.path.join(temp_folder,scan)\n    temp_files = os.listdir(temp_folder2)\n    imagenum = [s.split(\"-\")[1] for s in temp_files]\n    imagenum = [s.split(\".\")[0] for s in imagenum]\n    temp_path = [os.path.join(temp_folder2,s) for s in temp_files]\n    tempdf = pd.DataFrame()\n    tempdf[\"image_num\"] = imagenum\n    tempdf[\"image_num\"] = tempdf[\"image_num\"].astype(\"int\")\n    tempdf[\"temp_path\"] = temp_path\n    tempdf = tempdf.sort_values(\"image_num\").reset_index(drop=True)\n    finpath = tempdf[\"temp_path\"]\n    return finpath","3664578d":"Scans","7664e404":"row_id=64\n\nsampledf = pd.DataFrame()\nfor scan in Scans:\n    sampledf[scan + \"_path\"] = makepath(row_id,scan)","69cc62b6":"row_id=64\n\nsampledf2 = pd.DataFrame()\nfor scan in Scans:\n    sampledf2[scan + \"_path\"] = makepath(row_id+1,scan)","5f2797e6":"sampledf.head(5)","235cae4d":"print(\"MGMT_value = \" + str(train[\"MGMT_value\"].iloc[row_id]))\n\n\nfor row in range(len(sampledf)):\n    plt.figure(figsize=(80,10))\n    for num,scan in enumerate(Scans):\n        img = makeimg(sampledf[scan + \"_path\"].iloc[row])\n        plt.subplot(4,25,num+1)\n        #plt.axis(\"off\")\n        plt.imshow(img)\n        \n        if row==0:\n            plt.title(scan,fontsize=18)\n        if num==0:\n            plt.ylabel(\"row=\" + str(row),fontsize=18)","69e16ffb":"print(\"MGMT_value = \" + str(train[\"MGMT_value\"].iloc[row_id+1]))\n\n\nfor row in range(len(sampledf2)):\n    plt.figure(figsize=(80,10))\n    for num,scan in enumerate(Scans):\n        img = makeimg(sampledf2[scan + \"_path\"].iloc[row])\n        plt.subplot(4,25,num+1)\n        #plt.axis(\"off\")\n        plt.imshow(img)\n        \n        if row==0:\n            plt.title(scan,fontsize=18)\n        if num==0:\n            plt.ylabel(\"row=\" + str(row),fontsize=18)","2863f472":"train","26605293":"row_id=0\n\nsampledf3 = pd.DataFrame()\nfor scan in Scans:\n    sampledf3[scan + \"_path\"] = makepath(row_id,scan)","c0870866":"row_id2 = 0\n\nsampledf3 = pd.DataFrame()\nfor scan in Scans:\n    sampledf3[scan + \"_path\"] = makepath(row_id2,scan)","d693546a":"sampledf3","b9f42633":"sampledf3[\"T1w_path\"].iloc[32]","0a5c5d28":"print(\"MGMT_value = \" + str(train[\"MGMT_value\"].iloc[row_id2]))\n\nfor row in range(33):\n    plt.figure(figsize=(80,5))\n    for num,scan in enumerate(Scans):\n        img = makeimg(sampledf3[scan + \"_path\"].iloc[row])\n        plt.subplot(4,33,num+1)\n        #plt.axis(\"off\")\n        plt.imshow(img)\n        \n        if row==0:\n            plt.title(scan,fontsize=18)\n        if num==0:\n            plt.ylabel(\"row=\" + str(row),fontsize=18)","29555d06":"sample[\"imfolder\"] = ['{0:05d}'.format(s) for s in sample[\"BraTS21ID\"]]\n\ntest_path = \"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/test\"\n\nsample[\"path\"] = [os.path.join(test_path,s) for s in sample[\"imfolder\"]  ]\n\n\nallres = []\n\nfor scan in Scans:\n    sample[scan +\"_count\"] = [ len(os.listdir(os.path.join(sample[\"path\"].iloc[s],scan))) for s in tqdm(range(len(sample))) ]","316b9ff3":"sample","b2b200dc":"allsame = [sample[\"FLAIR_count\"].iloc[s] ==   sample[\"T1w_count\"].iloc[s] ==sample[\"T1wCE_count\"].iloc[s] ==sample[\"T2w_count\"].iloc[s] \n          for s in range(len(sample))]\n\nsample[\"allsame\"] = allsame\n\nsample","7202feb7":"sample[\"allsame\"].sum()","29b117ca":"sample[\"allsame\"].sum()\/len(sample) * 100","56112ec4":"root_dir = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/'\ndf = pd.read_csv(root_dir+'train_labels.csv')\nsns.countplot(data=df, x='MGMT_value')","37548969":" pip install efficientnet_pytorch","03abad29":"## DICOM\nDICOM is the international standard to communicate and manage medical images and data. Its mission is to ensure the interoperability of systems used to produce, store, share, display, send, query, process, retrieve and print medical images, as well as to manage related workflows.\n\n","48503317":"# MRI(MAGNETIC RESONANCE IMAGING)\nA magnetic resonance imaging (MRI) scan is a common procedure around the world. <br>\nN.B. This excerpt is taken from https:\/\/m.blog.naver.com\/PostView.naver?isHttpsRedirect=true&blogId=meryang63&logNo=221163428141\n\n\n#### MRI uses a strong magnetic field and radio waves to create detailed images of the organs and tissues within the body.\n\n\n","c5f994ae":"## Results 4 type of Sequences for the Same Patient are Not the Same!","47658a2d":"## Let's look at typical examples of images of FLAIR, T1w, T1wCE, and T2w.\n#### After issuing the path, use this function to see typical examples of FLAIR, T1w, T1wCE, and T2w images.\n\n#### Before that, I made sure whether the same number of dcm files in each folder or not.","61d1855b":"## Display Sequence of MRIs as Animation <br>\nUsing Matplotlib to display the sequence of images as animation. This animations can be saved in video format.","2b135ead":"## What is the 'MGMT_value'? <br>\n\nO[6]-methylguanine-DNA methyltransferase (MGMT) is a protein in cells, including tumour cells, that repairs damage to the cell\u2019s DNA. For example, the damage caused by chemotherapy drugs to tumour cells. The more MGMT protein that the tumour produces, the less effective the chemotherapy drug is expected to be, as the protein will repair the damage to the tumour. Thus, determination of MGMT promoter methylation status in newly diagnosed GBM can influence treatment decision making.\n\nIn this dataset the MGMT promoter methylation status data is defined as a binary label (0: unmethylated, 1: methylated)","c9455ade":"## Create dcm folder path\nFirst, let's think about putting out the path of the dcm image.","608e6a50":"## Check how much the number of test data is the same.\n#### The code is the same as the basic train, so I will put it together.","8a481623":"#### First of all, the FLAIR path on the 0th line of train can be expressed as follows.","a2140330":"## Comparison of Different Sequences <br>\n<img src=\"https:\/\/github.com\/Kevinlee49\/MRI_images\/blob\/main\/mri2.png?raw=true\">","6e4396ed":"## MRI IMAGING SEQUENCES\n### The most commons MRI imaging sequences are \n\n1. T1-weighted (T1w)\n2. T2-weighted (T2w)\n3. Fluid Attenuated Inversion Recovery (FLAIR)\n4. T1-weighted Gadolinium Post Contrast (T1wCE\/T1Gd)","e4a2f3eb":"## Show the T2w Sequence ","66aef148":"### Cross-sections and divisions <br>\n<img src=\"https:\/\/github.com\/Kevinlee49\/MRI_images\/blob\/main\/mri3.png?raw=true\">\n","ceb778a1":"## Let's take a look at one dcm file.\nTo see what a dcm file looks like, firstly open one dcm file.","77dc0b25":"The person with ID 100 on line 64 : MGMT_values 1(the person with the methylation of the MGMT promoter) and\n\nLet's take a look at all the images of the person with ID 102 : MGMT_values 0 (the person who does not have) on the 65th line.\n\nFirst, do the person on line 64, then make it a function to see the person on line 65.","66871b1f":"## Show the FLAIR Sequence ","b098359f":"## The one with MGMT_value = 1\n#### Visualize the person with gene methylation = people with favorable prognostic factors and strong predictors of responsiveness to chemotherapy","87a4c549":"## Deepen your understanding by looking at the images of people who have the same number of images\n#### For an easy-to-understand image, let's try a person who has all the images.\n\n#### Moreover, let's look at the images of MGMT_value is 1 or 0 in each.","2864323a":"## Plot of MRIs with Their respective Sequence, plane & MGMT_value","63e2fd21":"You can see that some IDs are the same and some are different.\n\nCheck if they are all the same","a2f5d08c":"BraTS21ID is the patient's Id,\n\nClass 0 refers to people who do not have the methylation of the MGMT promoter.\n\nClass 1 seems to be someone who has the methylation of the MGMT promoter.","65a21173":"## When the number of files in each scan is not complete (this is about 90%)\n#### When the number of data is not the same for 4 types, are the numbers the same in chronological order, or are they just serial numbers? Let's look at the person with id = 0","1bcfa88d":"## The one with MGMT_value = 0\n#### Visualize the person who does not have gene methylation = those who do not have favorable prognostic and strong predictors of responsiveness to chemotherapy","8904675f":"This table is from https:\/\/m.blog.naver.com\/PostView.naver?isHttpsRedirect=true&blogId=meryang63&logNo=221163428141 <br>\n\n<div class=\"se_component se_table default\">\n        <div class=\"se_sectionArea se_align-left\">\n            <div class=\"se_editArea\">\n                <div id=\"SEDOC-1513275760453--243951851_table_0\" data-attachment-id=\"\" class=\"se_table_wrap __se-component\">\n                    <div class=\"se_table_innerWrap\">\n                        <table class=\"se_table_col\" style=\"width:100%; border-width: 0px; border-color: rgb(212, 212, 212);\">\n                            <tbody>\n                                <tr>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:25.119541%;height:42.0px;background-color:;border: 1px solid rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <b><span lang=\"EN-US\">&nbsp;<\/span><\/b><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:24.322601%;height:42.0px;background-color:#e2e2e2;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <b><span lang=\"EN-US\">T1<\/span><\/b><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:20.975454%;height:42.0px;background-color:#e2e2e2;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <b><span lang=\"EN-US\">T2<\/span><\/b><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:29.582403%;height:42.0px;background-color:#e2e2e2;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <b><span lang=\"EN-US\">FLAIR<\/span><\/b><br>\n  <\/div>\n                                    <\/td>\n                                <\/tr>\n                                <tr>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:25.119541%;height:84.0px;background-color:;border: 1px solid rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\"><\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:24.322601%;height:84.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\"><span lang=\"EN-US\" style=\"color: rgb(0, 0, 0);\" class=\"se_fs_T5\">-<span class=\"se_fs_T5\">&nbsp;<\/span><\/span><span style=\"color: rgb(0, 0, 0);\" class=\"se_fs_T5\">video before contrast<span lang=\"EN-US\" class=\"se_fs_T5\">.<span class=\"se_fs_T5\">&nbsp;<\/span><br><\/span><span lang=\"EN-US\"><span class=\"se_fs_T5\"><\/span><\/span>image<span class=\"se_fs_T5\">&nbsp;<\/span><span lang=\"EN-US\" class=\"se_fs_T5\">T2<\/span>which is for comparison<span lang=\"EN-US\" class=\"se_fs_T5\"><span class=\"se_fs_T5\">&nbsp;<\/span>with T2 image.<\/span><\/span><\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:20.975454%;height:84.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\"><span lang=\"EN-US\" style=\"color: rgb(0, 0, 0);\" class=\"se_fs_T5\">-<span class=\"se_fs_T5\">&nbsp;<\/span><\/span><span style=\"color: rgb(0, 0, 0);\" class=\"se_fs_T5\">video after contrast<span lang=\"EN-US\" class=\"se_fs_T5\">,<span class=\"se_fs_T5\">&nbsp;<\/span><br><\/span><span lang=\"EN-US\" class=\"se_fs_T5\"><span class=\"se_fs_T5\"><\/span><\/span>Brain lesions can be closely monitored<\/span><\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:29.582403%;height:84.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\"><span class=\"se_fs_T5\" style=\"color: rgb(0, 0, 0);\"><span lang=\"EN-US\"><span lang=\"EN-US\" style=\" color: rgb(0, 0, 0)\" class=\"se_fs_T5\"><span lang=\"EN-US\"><span>-<span>&nbsp; <\/span><\/span><\/span><span lang=\"EN-US\">T2<\/span><span>video <span lang=\"EN-US\">+ dark CSF <\/span><\/span><\/span><br><\/span><span lang=\"EN-US\"><span lang=\"EN-US\" style=\" color: rgb(0, 0, 0)\" class=\"se_fs_T5\">-<span class=\"se_fs_T5\">&nbsp;<\/span><\/span><span style=\" color: rgb(0, 0, 0)\" class=\"se_fs_T5\"> lesions are brightly monitored<span class=\"se_fs_T5\">&nbsp;<\/span><span lang=\"EN-US\" class=\"se_fs_T5\"><span class=\"se_fs_T5\">&nbsp;<\/span><\/span><\/span><\/span><br><\/span><span class=\"se_fs_T4\" style=\"color: rgb(0, 0, 0);\"><span lang=\"EN-US\" class=\"se_fs_T5\">-  Unlike T2, CSF space can be observed <\/span><span class=\"se_fs_T5\"><span class=\"se_fs_T5\">&nbsp;<\/span><span lang=\"EN-US\" class=\"se_fs_T5\"><span class=\"se_fs_T5\">&nbsp;<\/span><\/span><span class=\"se_fs_T5\">&nbsp;<\/span><br><\/span><span class=\"se_fs_T5\"><span class=\"se_fs_T5\"><\/span><span lang=\"EN-US\" class=\"se_fs_T5\">-&gt; Around ventricle, sulci<span class=\"se_fs_T5\">&nbsp;<\/span><\/span><span class=\"se_fs_T5\">&nbsp;<\/span><span lang=\"EN-US\" class=\"se_fs_T5\">lesion<span class=\"se_fs_T5\">&nbsp;<\/span><\/span>easily can be observed<\/span><\/span><\/div>\n                                    <\/td>\n                                <\/tr>\n                                <tr>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:25.119541%;height:42.0px;background-color:;border: 1px solid rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <b><span lang=\"EN-US\">CSF<\/span><\/b><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:24.322601%;height:42.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <span lang=\"EN-US\">Dark<\/span><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:20.975454%;height:42.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <span lang=\"EN-US\">Bright<\/span><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:29.582403%;height:42.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <span lang=\"EN-US\">Dark<\/span><br>\n  <\/div>\n                                    <\/td>\n                                <\/tr>\n                                <tr>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:25.119541%;height:42.0px;background-color:;border: 1px solid rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <b><span lang=\"EN-US\">White\n  matter<\/span><\/b><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:24.322601%;height:42.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <span lang=\"EN-US\">Light<\/span><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:20.975454%;height:42.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <span lang=\"EN-US\">Darkgray<\/span><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:29.582403%;height:42.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <span lang=\"EN-US\">Darkgray<\/span><br>\n  <\/div>\n                                    <\/td>\n                                <\/tr>\n                                <tr>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:25.119541%;height:42.0px;background-color:;border: 1px solid rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <b><span lang=\"EN-US\">Cortex<\/span><\/b><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:24.322601%;height:42.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <span lang=\"EN-US\">Gray<\/span><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:20.975454%;height:42.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <span lang=\"EN-US\">Light gray<\/span><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:29.582403%;height:42.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <span lang=\"EN-US\">Light gray<\/span><br>\n  <\/div>\n                                    <\/td>\n                                <\/tr>\n                                <tr>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:25.119541%;height:42.0px;background-color:;border: 1px solid rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <b><span lang=\"EN-US\">Fat(B.M)<\/span><\/b><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:24.322601%;height:42.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <span lang=\"EN-US\">Bright<\/span><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:20.975454%;height:42.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <span lang=\"EN-US\">Light<\/span><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:29.582403%;height:42.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <span lang=\"EN-US\">Light<\/span><br>\n  <\/div>\n                                    <\/td>\n                                <\/tr>\n                                <tr>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:25.119541%;height:42.0px;background-color:;border: 1px solid rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <b><span lang=\"EN-US\">Inflammation<br>\n  (infection, demyelination)<\/span><\/b><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:24.322601%;height:42.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <span lang=\"EN-US\">Dark<\/span><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:20.975454%;height:42.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <span lang=\"EN-US\">Bright<\/span><br>\n  <\/div>\n                                    <\/td>\n                                    <td class=\"se_cell se_align-left\" colspan=\"1\" rowspan=\"1\" style=\"width:29.582403%;height:42.0px;background-color:;border-width: 1px; border-style: solid; border-color: rgb(212, 212, 212); padding: 0cm 5.4pt;\">\n                                        <div class=\"se_cellArea\">\n  <span lang=\"EN-US\">Bright <\/span><br>\n  <\/div>\n                                    <\/td>\n                                <\/tr>\n                            <\/tbody>\n                        <\/table>\n                    <\/div>\n                <\/div>\n            <\/div>\n        <\/div>\n    <\/div>","af84725a":"I confirmed that the bottom is Nan. The numbers are sorted in ascending order, and the 32nd line is 33th, so the file names are serial numbers.","9a75d486":"## Check the number of dcm files\n#### In the first place, check whether the number of dcm of these Scans is the same for each patient."}}