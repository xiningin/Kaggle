{"cell_type":{"37f6c821":"code","ceaaad9e":"code","c59c4f7e":"code","2f79228d":"code","608e4374":"code","50aa4778":"code","5e043c43":"code","fe817aba":"code","4a0e6c32":"code","c761d413":"code","b026fb89":"code","518ae245":"code","b3637cbc":"code","07730b19":"code","beda3ed9":"code","3732b541":"code","2818a9d4":"code","116259d0":"code","63ee657a":"code","98cc64ca":"code","586c7fe9":"code","60e4b783":"code","a545b439":"code","02413e4c":"code","18973f09":"code","9b1d9402":"code","61b98b02":"code","c76da65c":"code","e8cd2ffa":"code","ca305dfe":"code","b26751d8":"code","c031c509":"code","6877dac8":"code","fdf977bb":"markdown","e6fa0a0e":"markdown","a836dd0e":"markdown","ea86c7fd":"markdown","0d35865a":"markdown","12d2abbb":"markdown","47773abb":"markdown","4a231d66":"markdown","1e264014":"markdown"},"source":{"37f6c821":"import numpy as np\nimport pandas as pd\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set_style('whitegrid')\nmatplotlib.rcParams['figure.figsize'] = (12,8)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn import metrics","ceaaad9e":"# Importing data set from sklearn\nfrom sklearn.datasets import load_boston\nboston = load_boston()","c59c4f7e":"# Exploring boston data set\nprint(boston.keys())","2f79228d":"# About dataset\nprint(boston.DESCR)","608e4374":"# Creating a DataFrame of Data\ndf = pd.DataFrame(boston.data, columns=boston.feature_names)\ndf.head(5)","50aa4778":"# Check target of dataset\nprint(boston.target)","5e043c43":"# Add MEDV(target) to df\ntarget = pd.Series(boston.target, name='Target')\ndf['MEDV'] = target","fe817aba":"df.info()","4a0e6c32":"df.describe().T","c761d413":"# Get numeric columns\nprint('Numeric cols :',df.select_dtypes(include=[np.number]).columns.values)","b026fb89":"# Get Non-numeric columns\nprint('Categorical cols :',df.select_dtypes(exclude=[np.number]).columns.values)","518ae245":"# Number of missing values\nprint(df.isnull().sum().sort_values(ascending=False))","b3637cbc":"# Univariate Analysis\nfig, axes = plt.subplots(4,3, figsize=(12,15), gridspec_kw={'hspace':0.5,})\nfig.suptitle('Distributions of Boston Features')\nfor ax, cols in zip(axes.flatten(), df.columns[:-1]):\n  sns.distplot(df[cols], ax=ax, bins=30, kde_kws={'bw':1.5})\n  ax.set(title=cols.upper(), xlabel='')","07730b19":"df.columns[:-1]","beda3ed9":"# Correlation plot\nsns.heatmap(df.corr(), annot=True, cmap='coolwarm')\nplt.tight_layout()","3732b541":"# Correlation with Target\ndf.corr()['MEDV'].sort_values(ascending=False)[1:]","2818a9d4":"# As rooms increases price increases\n# Notice there are some outliers, ex: when MEDV = 50\nsns.scatterplot('RM', 'MEDV', data=df)","116259d0":"# As % lower status of the population increases Target decreases\n# Notice there are some outliers\nsns.scatterplot( 'LSTAT','MEDV', data=df)","63ee657a":"#  Distribution of MEDV\ndf['MEDV'].plot.hist()","98cc64ca":"X = df.drop('MEDV', axis=1)\ny = df['MEDV']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","586c7fe9":"# Removing outliers using IsolationForest\nfrom sklearn.ensemble import IsolationForest\niso = IsolationForest(contamination=0.2)\nyhat = iso.fit_predict(X_train)","60e4b783":"# select all rows that are not outliers\nmask = yhat != -1\nX_train_iso, y_train_iso = X_train.loc[mask, :], y_train.loc[mask]\nprint('Before: ',X_train.shape, y_train.shape)\nprint('Updated: ',X_train_iso.shape, y_train_iso.shape)","a545b439":"fig, (ax1,ax2) = plt.subplots(1, 2, sharey=True, sharex=True, figsize=(15,8))\nsns.scatterplot(X_train['RM'],y_train, ax=ax1)\nsns.scatterplot(X_train_iso['RM'],y_train_iso, ax=ax2)\nax1.set(title='Before')\nax2.set(title='Updated')","02413e4c":"fig, (ax1,ax2) = plt.subplots(1, 2, sharey=True, sharex=True, figsize=(15,8))\nsns.scatterplot(X_train['LSTAT'],y_train, ax=ax1)\nsns.scatterplot(X_train_iso['LSTAT'],y_train_iso, ax=ax2)\nax1.set(title='Before')\nax2.set(title='Updated')","18973f09":"# Function to compare models and parameters\ndef find_best_model(X,y):\n  models = {\n      'Linear Regression':{\n          'model':LinearRegression(),\n          'parameters':{\n              'normalize':[True,False]\n              }\n          },\n        'Ridge':{\n            'model':Ridge(),  # L2 Reguralization\n            'parameters':{\n                'normalize':[True,False],\n                'alpha':[0.1,0.5,1,10,100]\n                }\n          },\n        'Lasso':{\n            'model':Lasso(),  # L1 Regularization\n            'parameters':{\n                'normalize':[True,False],\n                'alpha':[0.1,0.5,1,10,100]\n                }\n        }\n  }\n\n  scores = []\n  for model_name, model_params in models.items():\n    gs = GridSearchCV(estimator = model_params['model'],\n                      param_grid = model_params['parameters'],\n                      scoring='r2',\n                      cv=10,\n                      n_jobs = -1)\n    gs.fit(X,y)   # Search for best model and parameters\n    scores.append({\n        'Model' : model_name,\n        'Best_params':gs.best_params_,\n        'R^2':gs.best_score_,\n         })\n  result = pd.DataFrame(scores)  # Result obatined after searching \n  return result.sort_values('R^2', ascending=False) # Higher values the better","9b1d9402":"# Performance on training set after parameter hypertuning without removing outliers\nfind_best_model(X_train,y_train)","61b98b02":"# Performance on training set after parameter hypertuning by removing outliers\nfind_best_model(X_train_iso,y_train_iso)","c76da65c":"# Ridge and Linear Regression r2 scores are same\n# R\u00b2 value of 0.75 means that the model is accounting for 75% of the variability in the data\n\nrid = Ridge(alpha=0.1, normalize=True) # selecting ridge and best parameters\nrid.fit(X_train_iso, y_train_iso)","e8cd2ffa":"# Coefficients\ncoeff_df = pd.DataFrame(rid.coef_, X.columns, columns=['Coefficient'])    \ncoeff_df","ca305dfe":"# Predictions\ny_pred = rid.predict(X_test)\nprint(y_pred)","b26751d8":"# DataFrame temp with Actual and Predicted values\ntemp = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred.flatten()})\ntemp","c031c509":"# MSE and RMSE\nprint('MSE :',metrics.mean_absolute_error(y_test,y_pred))\nprint('RMSE :',np.sqrt(metrics.mean_absolute_error(y_test,y_pred)))","6877dac8":"# Plotting \"Actual v\/s Predicted\"\nsns.regplot(y_test, y_pred, scatter=True)\nplt.title(\"Actual v\/s Predicted\")\nplt.xlabel(\"Actual\")\nplt.ylabel(\"Predicted\")","fdf977bb":"## Removing Outliers","e6fa0a0e":"  # Boston Housing using Regression Models\n\n  ---\n\n  **Problem Statement**: Predicting median value of owner-occupied homes in $1000's from dataset using given features.\n\n\n  &nbsp;\n\n\n  **Solution by**: *Aditya Karanth*.\n\n  **GitHub Profile**: https:\/\/github.com\/Aditya-Karanth\n\n  **Kaggle Profile**: https:\/\/www.kaggle.com\/adityakaranth\n\n---\n\n **<h3>Project Planning :<\/h3>**\n\n  - **Imports :**\n    - Contains the necessary Imports\n    - Loading Data set and its description\n\n  - **Exploratory Data Analysis (EDA) :**\n    - Understand nature of the data *.info()*, *.describe()*\n    - Univariate Analysis by plotting histograms.\n    - Understand the correlation between features using heatmaps.\n    - Plotting scatterplots for bivariate numeric data.\n    \n  - **Data Preprocessing :**\n\n    - **Removing Outliers :**\n      - Removing outliers present in data using *IsolationForest*.\n      - Plotting scatterplots for features *before* and *after* removing outliers.\n    \n  - **Model Selection :**  \n    - *GridSearchCV* - selecting best algorithm among *LinearRegression*, *Ridge (L2 Regularization)*, *Lasso (L1 Regularization)* and best params with hyperparameter tuning using *r2 score*.\n\n    - **Training and Testing the Model**:\n      - Regression using best algorithm from GridSearchCV.\n      - Obtaining *coefficients* of the model.\n      - Evaluation of Regression model with **MSE** and **RMSE**.\n      - Plotting  *Actual v\/s Predicted* values.","a836dd0e":"# Imports","ea86c7fd":"## Data set","0d35865a":"Model Evaluation -","12d2abbb":"# Data Preprocessing","47773abb":"## Training and Testing the Model","4a231d66":"# Model Selection","1e264014":"# Exploratory Data Analysis"}}