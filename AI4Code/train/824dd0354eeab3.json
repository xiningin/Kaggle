{"cell_type":{"dfc5aff3":"code","70ba4930":"code","b25e2fb1":"code","f870cf9c":"code","d7ca0bf7":"code","3bc61597":"code","924ee319":"code","362a00cc":"code","537c0481":"code","0931ef29":"code","f736b93b":"code","02e9308b":"code","b1d8fe6d":"code","72d38aef":"code","5685c653":"code","2a397f31":"code","286f3afd":"markdown","fd995d20":"markdown","5c558e0b":"markdown"},"source":{"dfc5aff3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))","70ba4930":"# Do this to support SHAP\n!pip install 'tensorflow==1.14.0'","b25e2fb1":"variables_name = pd.read_csv(\"..\/input\/variables_name.csv\")\nfeatures = variables_name.values[:,1]","f870cf9c":"features","d7ca0bf7":"import json\nwith open(\"..\/input\/X_train_HPCC_1_20.json\") as of:\n    X_train = np.array(json.load(of))\nwith open(\"..\/input\/y_train_HPCC_1_20.json\") as of:\n    y_train = np.array(json.load(of))\nwith open(\"..\/input\/X_test_HPCC_1_20.json\") as of:\n    X_test = np.array(json.load(of))\nwith open(\"..\/input\/y_test_HPCC_1_20.json\") as of:\n    y_test = np.array(json.load(of))    ","3bc61597":"from keras import regularizers\nfrom keras.models import Sequential\nfrom keras.layers import LSTM\nfrom keras.layers import Dense\nfrom keras.layers import Activation\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten\nfrom keras.optimizers import Adam\n\n\ndef createModel(l1Nodes, l2Nodes, d1Nodes, d2Nodes, inputShape):\n    # input layer\n    lstm1 = LSTM(l1Nodes, input_shape=inputShape, return_sequences=True)\n    lstm2 = LSTM(l2Nodes, return_sequences=True)\n    flatten = Flatten()\n    dense1 = Dense(d1Nodes)\n    dense2 = Dense(d2Nodes)\n\n    # output layer\n    outL = Dense(1, activation='relu')\n    # combine the layers\n    layers = [lstm1, lstm2, flatten,  dense1, dense2, outL]\n    # create the model\n    model = Sequential(layers)\n    opt = Adam(learning_rate=0.005)\n    model.compile(optimizer=opt, loss='mse')\n    return model","924ee319":"# create model\nmodel = createModel(8, 8, 8, 4, (X_train.shape[1], X_train.shape[2]))\nmodel.fit(X_train, y_train, batch_size=8, epochs=30)","362a00cc":"import shap","537c0481":"# Use the training data for deep explainer => can use fewer instances\nexplainer = shap.DeepExplainer(model, X_train)\n# explain the the testing instances (can use fewer instanaces)\n# explaining each prediction requires 2 * background dataset size runs\nshap_values = explainer.shap_values(X_test)\n# init the JS visualization code\nshap.initjs()\nshap.force_plot(explainer.expected_value[0], shap_values[0][0], features)","0931ef29":"# X_train_outlier\nwith open(\"..\/input\/X_train_outlier.json\") as of:\n    X_train_outlier = np.array(json.load(of))\nwith open(\"..\/input\/y_train_outlier.json\") as of:\n    y_train_outlier = np.array(json.load(of))\n\n    # X_train_normal\nwith open(\"..\/input\/X_train_not_outlier.json\") as of:\n    X_train_not_outlier = np.array(json.load(of))\nwith open(\"..\/input\/y_train_not_outlier.json\") as of:\n    y_train_not_outlier = np.array(json.load(of))","f736b93b":"# explain the the testing instances (can use fewer instanaces)\n# explaining each prediction requires 2 * background dataset size runs\nshap_values = explainer.shap_values(X_train_outlier)\n# init the JS visualization code\nshap.initjs()\nshap.force_plot(explainer.expected_value[0], shap_values[0][0], features)","02e9308b":"# explain the the testing instances (can use fewer instanaces)\n# explaining each prediction requires 2 * background dataset size runs\nshap_values = explainer.shap_values(X_train_not_outlier)\n# init the JS visualization code\nshap.initjs()\nshap.force_plot(explainer.expected_value[0], shap_values[0][0], features)","b1d8fe6d":"# explain the the testing instances (can use fewer instanaces)\n# explaining each prediction requires 2 * background dataset size runs\nshap_values = explainer.shap_values(X_train_outlier[:1])\n# init the JS visualization code\nshap.initjs()\nshap.force_plot(explainer.expected_value[0], shap_values[0][0], features)","72d38aef":"# explain the the testing instances (can use fewer instanaces)\n# explaining each prediction requires 2 * background dataset size runs\nshap_values = explainer.shap_values(X_train_not_outlier[:1])\n# init the JS visualization code\nshap.initjs()\nshap.force_plot(explainer.expected_value[0], shap_values[0][0], features)","5685c653":"y_train_not_outlier[0]","2a397f31":"y_train_outlier[0]","286f3afd":"# Model","fd995d20":"# Data","5c558e0b":"# SHAP"}}