{"cell_type":{"b98ddff5":"code","47f03be5":"code","230ff06c":"code","81a55687":"code","690854f3":"code","000bb46d":"code","132d2ff7":"code","d23edff6":"code","247e7c06":"code","0daa9f46":"code","4607cffd":"code","7074c7ba":"code","f98cc049":"code","ce384bc7":"code","d852b3ac":"code","6cbd4133":"code","9231446a":"markdown","9454bf8b":"markdown","0ff1affb":"markdown","97c49396":"markdown","99cacb68":"markdown","e574d415":"markdown","aabdc824":"markdown"},"source":{"b98ddff5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, f1_score\nimport tensorflow as tf\nimport keras\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfilepath= '\/kaggle\/input\/m5-forecasting-accuracy\/'\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","47f03be5":"subs_df=pd.read_csv('..\/input\/m5-forecasting-accuracy\/sample_submission.csv')\nsales_train_df=pd.read_csv(filepath + '\/sales_train_validation.csv')\nsell_df=pd.read_csv(filepath + '\/sell_prices.csv')\ncalender_df=pd.read_csv(filepath + '\/calendar.csv')","230ff06c":"sales_train_df.head(5)","81a55687":"sales_train_df.isnull().sum().sum()","690854f3":"sales_train_df.describe()","000bb46d":"sales_train = pd.get_dummies(sales_train_df)\nsales_train.head()","132d2ff7":"window_len = 10\nvalue = sales_train_df.loc[sales_train_df['id'] == 'HOBBIES_1_001_CA_1_validation'].iloc[:,1919-window_len:1919].head()\n#print(value.iloc[0])\nvalue=list(value.iloc[0])\nprint('---',value)","d23edff6":"window_len = 10\npred_values = {}\npred_values1 = {}\nimport statistics \nfor i in sales_train_df['id']:\n    value = sales_train_df.loc[sales_train_df['id'] == i].iloc[:,1919-window_len:1919]\n    value = list(value.iloc[0])\n    #print(i[0])\n    for j in range(0,28):\n        ans = statistics.mean(value[j:])\n        value.append(ans)\n        if i in pred_values:\n            pred_values[i].append(int(round(ans)))\n        else:\n            pred_values[i] = [i,int(round(ans))]\n    \n    for j in range(0,28):\n        ans = statistics.mean(value[j+28:])\n        value.append(ans)\n        ii = i.replace('validation','evaluation')\n        if ii in pred_values1:\n            pred_values1[ii].append(int(round(ans)))\n        else:\n            pred_values1[ii] = [ii,int(round(ans))]\n            \n        \n        ","247e7c06":"#print(pred_values1)","0daa9f46":"#print(write_csv1)","4607cffd":"from statsmodels.tsa.arima_model import ARIMA\nfrom pandas.plotting import autocorrelation_plot\nfrom matplotlib import pyplot\n\nwindow_len = 50\nvalue = sales_train_df.loc[sales_train_df['id'] == 'HOBBIES_1_001_CA_1_validation'].iloc[:,1919-window_len:1919].head()\n#print(value.iloc[0])\nvalue=list(value.iloc[0])\n\nautocorrelation_plot(value)\npyplot.show()","7074c7ba":"window_len = 50\npred_values = {}\npred_values1 = {}\nimport statistics \nfor i in sales_train_df['id']:\n    value = sales_train_df.loc[sales_train_df['id'] == i].iloc[:,1919-window_len:1919]\n    value = list(value.iloc[0])\n    #print(i[0])\n    for j in range(0,28):\n        model = ARIMA(value, order=(5,0,7))\n        model_fit = model.fit(disp=0)\n        ans = model_fit.forecast()\n        print(ans,'-sadasdasd-')\n        value.append(ans)\n        if i in pred_values:\n            pred_values[i].append(int(round(ans)))\n        else:\n            pred_values[i] = [i,int(round(ans))]\n    \n    for j in range(0,28):\n        ans = statistics.mean(value[j+28:])\n        value.append(ans)\n        ii = i.replace('validation','evaluation')\n        if ii in pred_values1:\n            pred_values1[ii].append(int(round(ans)))\n        else:\n            pred_values1[ii] = [ii,int(round(ans))]\n            ","f98cc049":"from sklearn.preprocessing import MinMaxScaler\nmms= MinMaxScaler()\nmms.fit_transform(categorical_feat)\nmms","ce384bc7":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\n\n# Initialising the RNN\nregressor = Sequential()\n\n# Adding the first LSTM layer and some Dropout regularisation\nlayer_1_units=40\nregressor.add(LSTM(units = layer_1_units, return_sequences = True, input_shape = (X_train.shape[1], X_train.shape[2])))\nregressor.add(Dropout(0.2))\n\n# Adding a second LSTM layer and some Dropout regularisation\nlayer_2_units=300\nregressor.add(LSTM(units = layer_2_units, return_sequences = True))\nregressor.add(Dropout(0.2))\n\n# Adding a third LSTM layer and some Dropout regularisation\nlayer_3_units=300\nregressor.add(LSTM(units = layer_3_units))\nregressor.add(Dropout(0.2))\n\n# Adding the output layer\nregressor.add(Dense(units = 30490))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nepoch_no=32\nbatch_size_RNN=44\nregressor.fit(X_train, y_train, epochs = epoch_no, batch_size = batch_size_RNN)","d852b3ac":"write_csv = []\nwrite_csv1 = []\nfor key, value in pred_values.items():\n        write_csv.append(value)\nfor key, value in pred_values1.items():\n        write_csv1.append(value)","6cbd4133":"import csv\nfilename = \"submission.csv\"\nwith open(filename, 'w') as csvfile:\n    csvwriter = csv.writer(csvfile)\n    csvwriter.writerows(write_csv)\n    csvwriter.writerows(write_csv1)\n    ","9231446a":"# LSTM using keras","9454bf8b":"**Converting to all numeric values**","0ff1affb":"# Submission","97c49396":"***Score : 1.12462***","99cacb68":"# Auto-Regressive Integrated Moving Averages (ARIMA) model","e574d415":"**So our training data does not have any missing values as of now**","aabdc824":"# Simple moving average model for forecasting"}}