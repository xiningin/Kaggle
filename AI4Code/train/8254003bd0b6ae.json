{"cell_type":{"f0339691":"code","a1082655":"code","c988f291":"code","334769ba":"code","8ef5109a":"code","ceceb78e":"code","70083da3":"code","6c33ff3b":"code","48d95402":"code","282f142d":"code","b6fa13dd":"code","af1a0005":"code","dbdf573d":"code","30136da9":"code","9624bf3d":"code","a8fc1a69":"code","cd6ead96":"code","c3118ddc":"code","dc514060":"code","33559ad5":"code","3e2e0f01":"code","4ef4c4f7":"code","7cea89b8":"code","e032b386":"code","7d2b5f00":"code","f4f76863":"code","eb8c391d":"code","4c2345c3":"code","454e8df4":"code","e2727853":"code","c3ace5ee":"code","1d597e8c":"code","cd125755":"code","6d852e00":"code","44d97123":"code","c57fdce6":"code","5af36e16":"code","f5c214b2":"code","09f8dae7":"code","73a49fd7":"code","7a2f6111":"markdown","9d9190e4":"markdown","feb22225":"markdown","f8209596":"markdown","e8af5c5b":"markdown"},"source":{"f0339691":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a1082655":"import pandas as pd\nimport tensorflow as tf\nimport keras\nfrom keras.preprocessing.image import load_img, img_to_array, ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten,BatchNormalization, Dropout, Lambda, Conv2D, MaxPool2D\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cv2\nfrom tensorflow.keras.utils import to_categorical\n\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.layers import Dense, Flatten,BatchNormalization, Dropout, Lambda\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cv2\n\n\n\n\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')","c988f291":"data = pd.read_pickle(\"..\/input\/traffic-signs-preprocessed\/data8.pickle\")\n","334769ba":"print(\"x train shape:\", data[\"x_train\"].shape)\nprint(\"y train shape:\", data[\"y_train\"].shape)\nprint(\"x test shape:\", data[\"x_test\"].shape)\nprint(\"y test shape:\", data[\"y_test\"].shape)\nprint(\"x validation shape:\", data[\"x_validation\"].shape)\nprint(\"y validation shape:\", data[\"y_validation\"].shape)","8ef5109a":"x_train = data[\"x_train\"]\nx_test = data[\"x_test\"]\nx_val = data[\"x_validation\"]\ny_train = data[\"y_train\"]\ny_val = data[\"y_validation\"]","ceceb78e":"x_train = x_train.swapaxes(1,2)\nx_train = x_train.swapaxes(2,3)\n\nx_train.shape","70083da3":"x_val = x_val.swapaxes(1,2)\nx_val = x_val.swapaxes(2,3)\nprint(\"x val shape:\", x_val.shape)","6c33ff3b":"plt.figure(figsize=(10,10)) \n\nfor i in range(16):\n    plt.subplot(4,4,i+1)   \n    plt.imshow(x_train[i], cmap = \"gray\")\n    plt.axis(\"off\")\n\nplt.show()","48d95402":"plt.imshow(x_train[2][:,:,0],cmap='gray')\nplt.show()","282f142d":"plt.imshow(x_train[18][:,:,0],cmap='gray')\nplt.show()","b6fa13dd":"def resize(img):\n    numberofImage = img.shape[0]\n    new_array = np.zeros((numberofImage,64,64,1))\n    for i in range(numberofImage):\n        new_array[i] = tf.image.resize(img[i],(64,64))\n    return new_array","af1a0005":"x_train = resize(x_train)\nx_val = resize(x_val)\nprint(\"x train resized shape:\", x_train.shape)\nprint(\"x validation resized shape:\", x_val.shape)","dbdf573d":"NumberofClass = 43\ny_train = to_categorical(y_train, num_classes = NumberofClass)\ny_val = to_categorical(y_val, num_classes = NumberofClass)","30136da9":"model = Sequential()\n\n\nmodel.add(Conv2D(filters = 128, kernel_size = (4,4), padding = \"Same\", activation = \"relu\", input_shape = (64,64,1)))\n\nmodel.add(MaxPool2D(pool_size = (2,2)))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (4,4), padding = \"Same\", activation = \"relu\" ))\n\nmodel.add(MaxPool2D(pool_size = (2,2)))\n\nmodel.add(Conv2D(filters = 32, kernel_size = (4,4), padding = \"Same\", activation = \"relu\" ))\n\nmodel.add(MaxPool2D(pool_size = (2,2)))\n\nmodel.add(Conv2D(filters = 16, kernel_size = (4,4), padding = \"Same\", activation = \"relu\" ))\n\nmodel.add(MaxPool2D(pool_size = (2,2)))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(units = 512, activation = \"relu\"))\n\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(units = NumberofClass, activation = \"softmax\"))\n\nmodel.compile(optimizer = \"rmsprop\", loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])\n\nmodel.summary()","9624bf3d":"epochs = 10  # for better result increase the epochs\nbatch_size = 250","a8fc1a69":"# data augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=5,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.1, # Randomly zoom image 10%  0,1 best\n        width_shift_range=0.1,  # randomly shift images horizontally 10%  +++\n        height_shift_range=0.1,  # randomly shift images vertically 10%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(x_train)","cd6ead96":"history = model.fit_generator(datagen.flow(x_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (x_val,y_val))","c3118ddc":"plt.style.use('seaborn')\nplt.figure(figsize=(6,6))\nplt.plot(history.history['loss'], color='b', label=\"Training loss\")\nplt.plot(history.history['val_loss'], color='r', label=\"Validation loss\")\nplt.legend()\nplt.show()\n\nplt.figure()\n\nplt.figure(figsize=(6,6))\nplt.plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nplt.plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nplt.legend()\nplt.show()","dc514060":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(x_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(26, 26))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","33559ad5":"data = pd.read_pickle('\/kaggle\/input\/traffic-signs-preprocessed\/data0.pickle')","3e2e0f01":"x_train = data['x_train']\nx_validation = data['x_validation']","4ef4c4f7":"numberOfClass = 43\n\ndef preprocess_data(x,y):\n    x_data = preprocess_input(x)\n    y_data = to_categorical(y, numberOfClass)\n    return x_data, y_data","7cea89b8":"x_train = x_train.swapaxes(1,2)\nx_train = x_train.swapaxes(2,3)","e032b386":"x_validation = x_validation.swapaxes(1,2)\nx_validation = x_validation.swapaxes(2,3)","7d2b5f00":"x_train, y_train = preprocess_data(x_train, data['y_train'])\nx_validation, y_validation = preprocess_data(x_validation, data['y_validation'])","f4f76863":"import warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n\n\nresnet_model = ResNet50(include_top = False, weights = \"imagenet\", input_shape = (224,224,3))\n","eb8c391d":"print(resnet_model.summary())","4c2345c3":"for layer in resnet_model.layers:\n    layer.trainable = False","454e8df4":"img_size = (224,224)\n\nmodel = Sequential() \nmodel.add(Lambda(lambda image: tf.image.resize(image,img_size)))\nmodel.add(resnet_model)\n\n# Fully connected layer\nmodel.add(Flatten()) \nmodel.add(Dense(512, activation=\"relu\"))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(256, activation=\"relu\"))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(128, activation=\"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(numberOfClass, activation='softmax'))\n\n\nmodel.compile(loss = \"categorical_crossentropy\",\n              optimizer = \"rmsprop\",\n              metrics = [\"accuracy\"])\n","e2727853":"epochs = 10  # for better result increase the epochs\nbatch_size = 1000","c3ace5ee":"import warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n\nhist = model.fit(x_train, y_train, validation_data =(x_validation,y_validation), epochs = epochs, batch_size = batch_size)","1d597e8c":"plt.style.use('seaborn')\nplt.figure(figsize=(6,6))\nplt.plot(hist.history['loss'], color='b', label=\"Training loss\")\nplt.plot(hist.history['val_loss'], color='r', label=\"Validation loss\")\nplt.legend()\nplt.show()\n\nplt.figure()\n\nplt.figure(figsize=(6,6))\nplt.plot(hist.history['accuracy'], color='b', label=\"Training accuracy\")\nplt.plot(hist.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nplt.legend()\nplt.show()","cd125755":"loss,accuracy=model.evaluate(x_validation,y_validation)\n","6d852e00":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(x_validation)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(26, 26))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","44d97123":"from sklearn.metrics import classification_report\n\nprint(classification_report(Y_true, Y_pred_classes))","c57fdce6":"def img_plot(arr,index=0):\n    plt.title('Test Image')\n    plt.imshow(arr[index])","5af36e16":"index1 = 70\n\nimg_plot(x_validation, index1)","f5c214b2":"input1 = x_validation[index1:index1+1]\nprint('Input Index =',index1)","09f8dae7":"pred1 = model.predict(input1)[0].argmax()\nlabel1 = y_validation[index1].argmax()","73a49fd7":"print('Predicted Value using  cnn model',pred1)\nprint(\"True Value\",label1)","7a2f6111":"# DATA PRE-PROCESSING","9d9190e4":"# ResNet50","feb22225":"# ResNet50","f8209596":"# CNN","e8af5c5b":"# DATA PRE-PROCESSING"}}