{"cell_type":{"9f38fefe":"code","e1235ceb":"code","83dcf0af":"code","d79b63f9":"code","40f8787d":"code","c8988e3e":"code","92323296":"code","9ed54d93":"code","92239634":"code","332ae476":"code","972cb81d":"code","3cb18cfc":"code","870c256d":"code","a741bd27":"code","b8ecbf63":"code","e6d97704":"code","24772fdd":"code","344d160b":"code","70d86332":"code","296d500b":"code","de573f53":"code","9a13af96":"code","4c525f47":"code","8ea7e0e6":"code","858e63c8":"code","57414685":"code","4d29e780":"code","bee3932c":"code","413f573a":"code","49b140e0":"code","bd8d3590":"code","3d3175dc":"code","908a45bd":"code","820aef75":"code","7c03f95c":"code","f8e14125":"code","35e85b4a":"code","61c706b4":"code","ed4c0fbc":"code","c6262ece":"code","245dbb21":"code","404523ce":"code","5378809d":"code","bc7f891a":"code","62a5079e":"code","b0c6f24c":"code","6ca84622":"code","f70b45be":"code","f2edeb74":"code","e988084a":"code","d1dfd539":"code","7f113012":"code","1d7601c3":"code","397e83e9":"code","4a89a775":"code","10892128":"code","16702974":"code","bd82321f":"code","24ad6875":"code","b0c8f68b":"code","9168e78f":"code","cdf8e9ca":"code","a9ad2c9d":"code","5e6b31c8":"code","0750f022":"code","791a317b":"code","8f10e89e":"code","90ee0b70":"code","9eb5bbff":"code","2b6ecb16":"code","18c7118c":"code","424b33a3":"code","22fcb289":"code","f8c327c0":"code","e0f81efc":"code","c53169a4":"code","e8dc9de1":"code","0f963aac":"code","f8e3f394":"code","3463ed6e":"code","872f2c13":"code","1aeb91b2":"code","52e1cf6f":"markdown","7b3a1542":"markdown","c746a575":"markdown","36f25dbc":"markdown","6f4c1504":"markdown","e5a417a0":"markdown","44e5372c":"markdown","d36aaf7c":"markdown","c9825e62":"markdown","f901a6b3":"markdown","ec3e74b6":"markdown","b05fd2c1":"markdown","78c913af":"markdown","8fe3cbe8":"markdown","a0faf0f8":"markdown","4f915583":"markdown","f04ff378":"markdown","fb1fb841":"markdown","861bdda7":"markdown","773dfe90":"markdown","c4e50b19":"markdown","b8831fd9":"markdown","8a962af4":"markdown","0bfa41f4":"markdown","67aefd87":"markdown","c68f4bd9":"markdown","e64780bf":"markdown","0860c262":"markdown","3bc6e70b":"markdown","746dce95":"markdown","4d29fee0":"markdown","62772c98":"markdown","0d1aa861":"markdown","290b0450":"markdown","5830ba08":"markdown","6605aae1":"markdown","d0229823":"markdown","0ee337c1":"markdown","cdc957db":"markdown","02ed655f":"markdown","83317305":"markdown","c27e2504":"markdown","87e75af6":"markdown","ffc973d0":"markdown","d496bbf2":"markdown","53393dd5":"markdown","57aaf053":"markdown","4be018e3":"markdown","8a53c46d":"markdown","f81bed43":"markdown","ec14e795":"markdown","24b8f5be":"markdown","9749c29f":"markdown","b844ceec":"markdown","7332bd60":"markdown","4a1dd9a2":"markdown","f7819d70":"markdown","afd5d047":"markdown","b1c32840":"markdown","d45fc778":"markdown","30112696":"markdown","fa3d27cc":"markdown","e2baa9d3":"markdown","11786a1c":"markdown","3d357129":"markdown","a20c092c":"markdown","825acb6a":"markdown","b5f485b3":"markdown","6092ea63":"markdown","234f0374":"markdown","af3d0835":"markdown","e1c971d2":"markdown","e1aa29b2":"markdown","5cf6c5d6":"markdown","d42d1e5a":"markdown","8a471f7b":"markdown","a444c411":"markdown","0b8136d9":"markdown","a0fce2b7":"markdown","7ed208a6":"markdown","0be82aca":"markdown","5ef6933b":"markdown","51558a5e":"markdown","13cf1294":"markdown","a101eea2":"markdown","7f14d1d0":"markdown","f0a0babe":"markdown","e451ad5f":"markdown","f36263c8":"markdown","13027946":"markdown","2b03147c":"markdown","34d7c275":"markdown","13de020b":"markdown"},"source":{"9f38fefe":"# linear algebra\nimport numpy as np \n\n# data processing\nimport pandas as pd \n\n# data visualization(for EDA)\nimport seaborn as sns\n%matplotlib inline\nfrom matplotlib import pyplot as plt\nfrom matplotlib import style\n\n#We will use the popular scikit-learn library to develop our machine learning algorithms\n\n# Model Helpers\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler\nfrom sklearn.metrics import roc_curve, auc\n\n# Models\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB\n\nimport string\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')","e1235ceb":"# link --->https:\/\/www.geeksforgeeks.org\/python-read-csv-using-pandas-read_csv\/\ndf_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ndf_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\n\n# link---> w3resource.com\/pandas\/concat.php\ndef concat_df(train_data, test_data):\n    # Returns a concatenated df of training and test set\n    return pd.concat([train_data, test_data], sort=True).reset_index(drop=True)\n\ndef divide_df(all_data):\n    # Use DataFrame.loc attribute to access a particular cell in the given Dataframe using the index and column labels.\n    return all_data.loc[:890], all_data.loc[891:].drop(['Survived'], axis=1)\n    # Returns divided dfs of training and test set \n\ndf_all = concat_df(df_train, df_test)\n\ndf_train.name = 'Training Set'\ndf_test.name = 'Test Set'\ndf_all.name = 'All Set' \n\ndfs = [df_train, df_test]  # List consisting of both Train and Test set\n\n# Pls note:- df_all and dfs is not same (df_all is a Dataframe and dfs is a list)","83dcf0af":"# Pandas sample() is used to generate a sample random row or column from the function caller data frame.\ndf_all.sample(10)","d79b63f9":"#preview data\nprint (df_train.info()) # link ---> https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.info.html","40f8787d":"#df_train.head() # link --> https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.head.html\n#df_train.tail() # link --> https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.tail.html\n\ndf_train.sample(10) # link --> https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.sample.html\n\n#If u look at the 'cabin' Feature , u can see 'NAN' depicting missing values. ","c8988e3e":"df_test.info()\ndf_test.sample(10) #https:\/\/www.geeksforgeeks.org\/python-pandas-dataframe-sample\/","92323296":"df_train.describe() #link --> https:\/\/www.geeksforgeeks.org\/python-pandas-dataframe-describe-method\/","9ed54d93":"# link --> https:\/\/www.geeksforgeeks.org\/matplotlib-pyplot-subplots-in-python\/\n# link --> https:\/\/www.geeksforgeeks.org\/plot-a-pie-chart-in-python-using-matplotlib\/\n# link --> https:\/\/www.geeksforgeeks.org\/countplot-using-seaborn-in-python\/\n\nf,ax=plt.subplots(1,2,figsize=(18,8)) # 1 row , 2 columns subplots \ndf_train['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\n\nax[0].set_title('Survived') \nax[0].set_ylabel('')\n\nsns.countplot('Survived',data=df_train,ax=ax[1])\n\nax[1].set_title('Survived') # ax[0] & ax[1] are different axis for different plots.\n\nplt.show()","92239634":"# Counting the total missing values in respective features\ntotal_missing_train = df_train.isnull().sum().sort_values(ascending=False)\n\n# Calculating the percent of missing values in respective features\npercent_1 = df_train.isnull().sum()\/df_train.isnull().count()*100\npercent_2 = (round(percent_1, 1)).sort_values(ascending=False) # Rounding the percent calculated in percent_1 to one decimal.\n\n#w3resource.com\/pandas\/concat.php\ntrain_missing_data = pd.concat([total_missing_train, percent_2], axis=1, keys=['Total', '%'])\n\nprint(total_missing_train)\n\nprint('_'*25)\n\ntrain_missing_data.head(5) # prints\/shows top 5 rows of dataframe","332ae476":"total_missing_test = df_test.isnull().sum().sort_values(ascending=False)\n\npercent_3 = df_test.isnull().sum()\/df_test.isnull().count()*100\npercent_4 = (round(percent_3, 1)).sort_values(ascending=False) \n\ntest_missing_data = pd.concat([total_missing_test, percent_4], axis=1, keys=['Total', '%']) #w3resource.com\/pandas\/concat.php\n\nprint(total_missing_test)\n\nprint('_'*25)\n\ntest_missing_data.head(5)","972cb81d":"# link --> https:\/\/www.geeksforgeeks.org\/matplotlib-pyplot-subplots-in-python\/\nf,ax=plt.subplots(figsize=(18,8))\n\n# link --> https:\/\/seaborn.pydata.org\/generated\/seaborn.violinplot.html\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=df_train,split=True,ax=ax)\n\nax.set_title('Pclass and Age vs Survived')\n\nax.set_yticks(range(0,110,10)) # set_yticks() function in axes module is used to Set the y ticks with list of ticks.\n\nplt.show()","3cb18cfc":"# link --> https:\/\/www.geeksforgeeks.org\/python-pandas-dataframe-corr\/\ndf_all_corr = df_all.corr().abs().unstack().sort_values(kind=\"quicksort\", ascending=False).reset_index()\n\ndf_all_corr.rename(columns={\"level_0\": \"Feature 1\", \"level_1\": \"Feature 2\", 0: 'Correlation Coefficient'}, inplace=True)\n\ndf_all_corr[df_all_corr['Feature 1'] == 'Pclass'] ","870c256d":"f,ax=plt.subplots(figsize=(18,8))\n\n# link --> http:\/\/alanpryorjr.com\/visualizations\/seaborn\/violinplot\/violinplot\/\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=df_train,split=True,ax=ax)\n\nax.set_title('Sex and Age vs Survived') # setting the title of plot\n\nax.set_yticks(range(0,110,10))\n\nplt.show()","a741bd27":"# link ---> https:\/\/www.geeksforgeeks.org\/python-pandas-dataframe-groupby\/\nage_by_pclass_sex = df_all.groupby(['Sex', 'Pclass']).median()['Age']\n\nfor pclass in range(1, 4):\n    for sex in ['female', 'male']:\n        print('Median age of Pclass {} {}s: {} '.format(pclass, sex, age_by_pclass_sex[sex][pclass].astype(int)))\n\n# Filling the missing values in Age with the medians of Sex and Pclass groups\ndf_all['Age'] = df_all.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))\n# link --> https:\/\/www.w3schools.com\/python\/python_lambda.asp","b8ecbf63":"# link --> https:\/\/www.geeksforgeeks.org\/python-seaborn-factorplot-method\/\nsns.factorplot('Embarked','Survived',data=df_train)\nfig=plt.gcf() # pyplot. gcf() is primarily used to get the current figure. \nfig.set_size_inches(5,3)\nplt.show()","e6d97704":"df_all[df_all['Embarked'].isnull()]","24772fdd":"# Filling the missing values in Embarked with S\ndf_all['Embarked'] = df_all['Embarked'].fillna('S')\n# link --> https:\/\/www.geeksforgeeks.org\/python-pandas-dataframe-fillna-to-replace-null-values-in-dataframe\/","344d160b":"# link --> https:\/\/www.kaggle.com\/residentmario\/faceting-with-seaborn\nFacetGrid = sns.FacetGrid(df_train, row='Embarked', size=4.5, aspect=1.6)\n\n# link --> https:\/\/www.geeksforgeeks.org\/python-seaborn-pointplot-method\/\nFacetGrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex')\n\nFacetGrid.add_legend() # Draw a legend, maybe placing it outside axes and resizing the figure.","70d86332":"df_all[df_all['Fare'].isnull()]","296d500b":"med_fare = df_all.groupby(['Pclass', 'Parch', 'SibSp'])['Fare'].median()[3][0][0]\n# Median of a Fare satisying condition([3][0][0] -- 3=Pclass,0=Parch,SibSp) \n\n# Filling the missing value in Fare with the median Fare of 3rd class alone passenger\ndf_all['Fare'] = df_all['Fare'].fillna(med_fare)","de573f53":"# link --> https:\/\/www.geeksforgeeks.org\/seaborn-barplot-method-in-python\/\nsns.barplot(x='Pclass', y='Survived',hue='Sex',data=df_train)","9a13af96":"grid = sns.FacetGrid(df_train, col='Survived', row='Pclass', size=2.2, aspect=1.6)\n\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\n\ngrid.add_legend();","4c525f47":"data1=df_train.copy() # shallow copy\ndata1['Family_size'] = data1['SibSp'] + data1['Parch'] +1\n# 1 is considered 'Alone'\n\ndata1['Family_size'].value_counts().sort_values(ascending=False)","8ea7e0e6":"axes = sns.factorplot('Family_size','Survived', data=data1, aspect = 2.5, )","858e63c8":"# Creating Deck column by extracting the first letter of the Cabin(string s) column M stands for Missing\ndf_all['Deck'] = df_all['Cabin'].apply(lambda s: s[0] if pd.notnull(s) else 'M')\n\n\ndf_all_decks = df_all.groupby(['Deck', 'Pclass']).count().drop(columns=['Survived', 'Sex', 'Age', 'SibSp', 'Parch', \n                                                                        'Fare', 'Embarked', 'Cabin', 'PassengerId', \n                                                                        'Ticket']).rename(columns={'Name': 'Count'})\n\ndf_all_decks","57414685":"# Transpose is done for accessbility\ndf_all_decks=df_all_decks.transpose()","4d29e780":"def get_pclass_dist(df):\n    \n    # Creating a dictionary for every passenger class count in every deck\n    deck_counts = {'A': {}, 'B': {}, 'C': {}, 'D': {}, 'E': {}, 'F': {}, 'G': {}, 'M': {}, 'T': {}}\n    \n    #Deck column is extracted from df_all_decks \n    decks = df.columns.levels[0]    \n    \n    # Creating a new dataframe just a copy of df_all_decks with 0 in respective Pclass if empty ... See Output below.\n    # Start\n    for deck in decks:\n        for pclass in range(1, 4):\n            try:\n                count = df[deck][pclass][0]\n                deck_counts[deck][pclass] = count \n            except KeyError:\n                deck_counts[deck][pclass] = 0\n                \n    df_decks = pd.DataFrame(deck_counts) \n    # End\n    \n    deck_percentages = {}\n   \n    # Creating a dictionary for every passenger class percentage in every deck\n    for col in df_decks.columns:\n        deck_percentages[col] = [(count \/ df_decks[col].sum()) * 100 for count in df_decks[col]]\n        \n    return deck_counts, deck_percentages,df_decks\n\n\nall_deck_count, all_deck_per,df_decks_return = get_pclass_dist(df_all_decks)\n\nprint(df_decks_return)\n\nprint(\"_\"*25)\n\nall_deck_per","bee3932c":"def display_pclass_dist(percentages):\n    \n    #converting dictionary to dataframe and then transpose\n    df_percentages = pd.DataFrame(percentages).transpose()\n    deck_names = ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'M', 'T')\n    bar_count = np.arange(len(deck_names))  \n    bar_width = 0.85\n    \n    pclass1 = df_percentages[0]\n    pclass2 = df_percentages[1]\n    pclass3 = df_percentages[2]\n    \n    plt.figure(figsize=(20, 10))\n    \n    # link --> https:\/\/www.tutorialspoint.com\/matplotlib\/matplotlib_bar_plot.htm\n    plt.bar(bar_count, pclass1,width=bar_width,edgecolor='white',label='Passenger Class 1')\n    plt.bar(bar_count, pclass2, bottom=pclass1, color='#f9bc86', edgecolor='white', width=bar_width, label='Passenger Class 2')\n    plt.bar(bar_count, pclass3, bottom=pclass1 + pclass2, color='#a3acff', edgecolor='white', width=bar_width, label='Passenger Class 3')\n\n    plt.xlabel('Deck', size=15, labelpad=20)\n    plt.ylabel('Passenger Class Percentage', size=15, labelpad=20)\n    plt.xticks(bar_count, deck_names)    \n    plt.tick_params(axis='x', labelsize=15)\n    plt.tick_params(axis='y', labelsize=15)\n    \n    plt.legend(loc='best',bbox_to_anchor=(1, 1),prop={'size': 15})\n    plt.title('Passenger Class Distribution in Decks',size=18, y=1.05)   \n    \n    plt.show()    \n    \ndisplay_pclass_dist(all_deck_per)    ","413f573a":"# Passenger in the T deck is changed to A\nidx = df_all[df_all['Deck'] == 'T'].index\ndf_all.loc[idx, 'Deck'] = 'A'","49b140e0":"# Same Method is applied as above just this time , deck is grouped with 'Survived' Feature\n\ndf_all_decks_survived = df_all.groupby(['Deck', 'Survived']).count().drop(columns=['Sex', 'Age', 'SibSp', 'Parch', 'Fare', \n                                                                                   'Embarked', 'Pclass', 'Cabin', 'PassengerId', 'Ticket']).rename(columns={'Name':'Count'}).transpose()\n\ndef get_survived_dist(df):\n    \n    # Creating a dictionary for every survival count in every deck\n    surv_counts = {'A':{}, 'B':{}, 'C':{}, 'D':{}, 'E':{}, 'F':{}, 'G':{}, 'M':{}}\n    decks = df.columns.levels[0]    \n\n    for deck in decks:\n        for survive in range(0, 2):\n            surv_counts[deck][survive] = df[deck][survive][0]\n            \n    df_surv = pd.DataFrame(surv_counts)\n    surv_percentages = {}\n\n    for col in df_surv.columns:\n        surv_percentages[col] = [(count \/ df_surv[col].sum()) * 100 for count in df_surv[col]]\n        \n    return surv_counts, surv_percentages\n\ndef display_surv_dist(percentages):\n    \n    df_survived_percentages = pd.DataFrame(percentages).transpose()\n    deck_names = ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'M')\n    bar_count = np.arange(len(deck_names))  \n    bar_width = 0.85    \n\n    not_survived = df_survived_percentages[0]\n    survived = df_survived_percentages[1]\n    \n    plt.figure(figsize=(20, 10))\n    plt.bar(bar_count, not_survived, color='#b5ffb9', edgecolor='white', width=bar_width, label=\"Not Survived\")\n    plt.bar(bar_count, survived, bottom=not_survived, color='#f9bc86', edgecolor='white', width=bar_width, label=\"Survived\")\n \n    plt.xlabel('Deck', size=15, labelpad=20)\n    plt.ylabel('Survival Percentage', size=15, labelpad=20)\n    plt.xticks(bar_count, deck_names)    \n    plt.tick_params(axis='x', labelsize=15)\n    plt.tick_params(axis='y', labelsize=15)\n    \n    plt.legend(loc='upper left', bbox_to_anchor=(1, 1), prop={'size': 15})\n    plt.title('Survival Percentage in Decks', size=18, y=1.05)\n    \n    plt.show()\n\nall_surv_count, all_surv_per = get_survived_dist(df_all_decks_survived)\ndisplay_surv_dist(all_surv_per)","bd8d3590":"df_all['Deck'] = df_all['Deck'].replace(['A', 'B', 'C'], 'ABC')\ndf_all['Deck'] = df_all['Deck'].replace(['D', 'E'], 'DE')\ndf_all['Deck'] = df_all['Deck'].replace(['F', 'G'], 'FG')\n\ndf_all['Deck'].value_counts()","3d3175dc":"# Dropping the Cabin feature\ndf_all.drop(['Cabin'], inplace=True, axis=1)\n\ndf_train, df_test = divide_df(df_all)\ndfs = [df_train, df_test]\n\nfor df in dfs:\n    print(df_test.isnull().sum())\n    print('-'*25)","908a45bd":"cont_features = ['Age', 'Fare']\nsurv = df_train['Survived'] == 1\n\nfig, axs = plt.subplots(ncols=2, nrows=2, figsize=(20, 20))\nplt.subplots_adjust(right=1.5)\n\nfor i, feature in enumerate(cont_features): # link --> https:\/\/www.geeksforgeeks.org\/enumerate-in-python\/   \n    # Distribution of survival in feature\n    sns.distplot(df_train[~surv][feature], label='Not Survived', hist=True, color='#e74c3c', ax=axs[0][i]) \n    # [-surv] means \"Not Survived\"\n    sns.distplot(df_train[surv][feature], label='Survived', hist=True, color='#2ecc71', ax=axs[0][i])\n    \n    # Distribution of feature in dataset\n    sns.distplot(df_train[feature], label='Training Set', hist=False, color='#e74c3c', ax=axs[1][i])\n    sns.distplot(df_test[feature], label='Test Set', hist=False, color='#2ecc71', ax=axs[1][i])\n    \n    axs[0][i].set_xlabel('')\n    axs[1][i].set_xlabel('')\n     \n    # just providing the ticks for x & y axis in respective plots    \n    for j in range(2):        \n        axs[i][j].tick_params(axis='x', labelsize=20)\n        axs[i][j].tick_params(axis='y', labelsize=20)\n    \n    axs[0][i].legend(loc='upper right', prop={'size': 20})\n    axs[1][i].legend(loc='upper right', prop={'size': 20})\n    axs[0][i].set_title('Distribution of Survival in {}'.format(feature), size=20, y=1.05)\n\naxs[1][0].set_title('Distribution of {} Feature'.format('Age'), size=20, y=1.05)\naxs[1][1].set_title('Distribution of {} Feature'.format('Fare'), size=20, y=1.05)\n        \nplt.show()","820aef75":"cat_features = ['Embarked', 'Parch', 'Pclass', 'Sex', 'SibSp', 'Deck']\n\nfig, axs = plt.subplots(ncols=2, nrows=3, figsize=(20, 20))\nplt.subplots_adjust(right=1.5, top=1.25)\n\nfor i, feature in enumerate(cat_features, 1):    \n    plt.subplot(2, 3, i)\n    sns.countplot(x=feature, hue='Survived', data=df_train)\n    \n    plt.xlabel('{}'.format(feature), size=20, labelpad=15)\n    plt.ylabel('Passenger Count', size=20, labelpad=15)    \n    plt.tick_params(axis='x', labelsize=20)\n    plt.tick_params(axis='y', labelsize=20)\n    \n    plt.legend(['Not Survived', 'Survived'], loc='upper center', prop={'size': 18})\n    plt.title('Count of Survival in {} Feature'.format(feature), size=20, y=1.05)\n\nplt.show()","7c03f95c":"df_all = concat_df(df_train, df_test)\ndf_all.head()","f8e14125":"# link ---> https:\/\/likegeeks.com\/seaborn-heatmap-tutorial\/\nsns.heatmap(df_all.corr(),annot=True,cmap='RdYlGn',linewidths=0.2) #data.corr()-->correlation matrix\nfig=plt.gcf()\nfig.set_size_inches(10,8)\nplt.show()","35e85b4a":"df_all['Fare'] = pd.qcut(df_all['Fare'], 13) # visit the link above","61c706b4":"fig, axs = plt.subplots(figsize=(22, 9))\nsns.countplot(x='Fare', hue='Survived', data=df_all)\n\nplt.xlabel('Fare', size=15, labelpad=20)\nplt.ylabel('Passenger Count', size=15, labelpad=20)\nplt.tick_params(axis='x', labelsize=10)\nplt.tick_params(axis='y', labelsize=15)\n\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 15})\nplt.title('Count of Survival in {} Feature'.format('Fare'), size=15, y=1.05)\n\nplt.show()","ed4c0fbc":"df_all['Age'] = pd.qcut(df_all['Age'], 10)","c6262ece":"fig, axs = plt.subplots(figsize=(22, 9))\nsns.countplot(x='Age', hue='Survived', data=df_all)\n\nplt.xlabel('Age', size=15, labelpad=20)\nplt.ylabel('Passenger Count', size=15, labelpad=20)\nplt.tick_params(axis='x', labelsize=15)\nplt.tick_params(axis='y', labelsize=15)\n\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 15})\nplt.title('Survival Counts in {} Feature'.format('Age'), size=15, y=1.05)\n\nplt.show()","245dbb21":"df_all['Family_Size'] = df_all['SibSp'] + df_all['Parch'] + 1\n\nfig, axs = plt.subplots(figsize=(20, 20), ncols=2, nrows=2)\nplt.subplots_adjust(right=1.5)\n\nsns.barplot(x=df_all['Family_Size'].value_counts().index, y=df_all['Family_Size'].value_counts().values, ax=axs[0][0])\nsns.countplot(x='Family_Size', hue='Survived', data=df_all, ax=axs[0][1])\n\naxs[0][0].set_title('Family Size Feature Value Counts', size=20, y=1.05)\naxs[0][1].set_title('Survival Counts in Family Size ', size=20, y=1.05)\n\n# Mapping Family Size\nfamily_map = {1: 'Alone', 2: 'Small', 3: 'Small', 4: 'Small', 5: 'Medium', 6: 'Medium', 7: 'Large', 8: 'Large', 11: 'Large'}\ndf_all['Family_Size_Grouped'] = df_all['Family_Size'].map(family_map)\n\nsns.barplot(x=df_all['Family_Size_Grouped'].value_counts().index, y=df_all['Family_Size_Grouped'].value_counts().values, ax=axs[1][0])\nsns.countplot(x='Family_Size_Grouped', hue='Survived', data=df_all, ax=axs[1][1])\n\naxs[1][0].set_title('Family Size Feature Value Counts After Grouping', size=20, y=1.05)\naxs[1][1].set_title('Survival Counts in Family Size After Grouping', size=20, y=1.05)\n\n\nfor i in range(2):\n    axs[i][1].legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 20})\n    for j in range(2):\n        axs[i][j].tick_params(axis='x', labelsize=20)\n        axs[i][j].tick_params(axis='y', labelsize=20)\n        axs[i][j].set_xlabel('')\n        axs[i][j].set_ylabel('')\n\nplt.show()","404523ce":"df_all['Ticket_Frequency'] = df_all.groupby('Ticket')['Ticket'].transform('count')","5378809d":"fig, axs = plt.subplots(figsize=(12, 9))\nsns.countplot(x='Ticket_Frequency', hue='Survived', data=df_all)\n\nplt.xlabel('Ticket Frequency', size=15, labelpad=20)\nplt.ylabel('Passenger Count', size=15, labelpad=20)\nplt.tick_params(axis='x', labelsize=15)\nplt.tick_params(axis='y', labelsize=15)\n\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 15})\nplt.title('Count of Survival in {} Feature'.format('Ticket Frequency'), size=15, y=1.05)\n\nplt.show()","bc7f891a":"df_all['Title'] = df_all['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\n# https:\/\/www.w3schools.com\/python\/ref_string_split.asp\n\ndf_all['Is_Married'] = 0\ndf_all['Is_Married'].loc[df_all['Title'] == 'Mrs'] = 1","62a5079e":"fig, axs = plt.subplots(nrows=2, figsize=(20, 20))\nsns.barplot(x=df_all['Title'].value_counts().index, y=df_all['Title'].value_counts().values, ax=axs[0])\n\naxs[0].tick_params(axis='x', labelsize=10)\naxs[1].tick_params(axis='x', labelsize=15)\n\nfor i in range(2):    \n    axs[i].tick_params(axis='y', labelsize=15)\n\naxs[0].set_title('Title Feature Value Counts', size=20, y=1.05)\n\ndf_all['Title'] = df_all['Title'].replace(['Miss', 'Mrs','Ms', 'Mlle', 'Lady', 'Mme', 'the Countess', 'Dona'], 'Miss\/Mrs\/Ms')\ndf_all['Title'] = df_all['Title'].replace(['Dr', 'Col', 'Major', 'Jonkheer', 'Capt', 'Sir', 'Don', 'Rev'], 'Dr\/Military\/Noble\/Clergy')\n\nsns.barplot(x=df_all['Title'].value_counts().index, y=df_all['Title'].value_counts().values, ax=axs[1])\naxs[1].set_title('Title Feature Value Counts After Grouping', size=20, y=1.05)\n\nplt.show()","b0c6f24c":"df_train,df_test= divide_df(df_all)\ndfs=[df_train,df_test]","6ca84622":"df_all['Name'].sample(10)","f70b45be":"def extract_surname(data):    \n    \n    families = []\n    \n    for i in range(len(data)):  \n        name = data.iloc[i]\n\n        if '(' in name:\n            name_no_bracket = name.split('(')[0] \n        else:\n            name_no_bracket = name\n            \n        family = name_no_bracket.split(',')[0]\n        title = name_no_bracket.split(',')[1].strip().split(' ')[0]\n        \n        for c in string.punctuation:\n            family = family.replace(c, '').strip()\n            \n        families.append(family)\n            \n    return families\n\ndf_all['Family'] = extract_surname(df_all['Name'])\ndf_train = df_all.loc[:890]\ndf_test = df_all.loc[891:]\ndfs = [df_train, df_test]","f2edeb74":"# Creating a list of families and tickets that are occuring in both training and test set\nnon_unique_families = [x for x in df_train['Family'].unique() if x in df_test['Family'].unique()]\nnon_unique_tickets = [x for x in df_train['Ticket'].unique() if x in df_test['Ticket'].unique()]\n\ndf_family_survival_rate = df_train.groupby('Family')['Survived', 'Family','Family_Size'].median()\ndf_ticket_survival_rate = df_train.groupby('Ticket')['Survived', 'Ticket','Ticket_Frequency'].median()\n\nfamily_rates = {}\nticket_rates = {}\n\nfor i in range(len(df_family_survival_rate)):\n    # Checking a family exists in both training and test set, and has members more than 1\n    if df_family_survival_rate.index[i] in non_unique_families and df_family_survival_rate.iloc[i, 1] > 1:\n        family_rates[df_family_survival_rate.index[i]] = df_family_survival_rate.iloc[i, 0]\n\nfor i in range(len(df_ticket_survival_rate)):\n    # Checking a ticket exists in both training and test set, and has members more than 1\n    if df_ticket_survival_rate.index[i] in non_unique_tickets and df_ticket_survival_rate.iloc[i, 1] > 1:\n        ticket_rates[df_ticket_survival_rate.index[i]] = df_ticket_survival_rate.iloc[i, 0]","e988084a":"mean_survival_rate = np.mean(df_train['Survived'])\n\ntrain_family_survival_rate = []\ntrain_family_survival_rate_NA = []\ntest_family_survival_rate = []\ntest_family_survival_rate_NA = []\n\nfor i in range(len(df_train)):\n    if df_train['Family'][i] in family_rates:\n        train_family_survival_rate.append(family_rates[df_train['Family'][i]])\n        train_family_survival_rate_NA.append(1)\n    else:\n        train_family_survival_rate.append(mean_survival_rate)\n        train_family_survival_rate_NA.append(0)\n        \nfor i in range(len(df_test)):\n    if df_test['Family'].iloc[i] in family_rates:\n        test_family_survival_rate.append(family_rates[df_test['Family'].iloc[i]])\n        test_family_survival_rate_NA.append(1)\n    else:\n        test_family_survival_rate.append(mean_survival_rate)\n        test_family_survival_rate_NA.append(0)\n        \ndf_train['Family_Survival_Rate'] = train_family_survival_rate\ndf_train['Family_Survival_Rate_NA'] = train_family_survival_rate_NA\ndf_test['Family_Survival_Rate'] = test_family_survival_rate\ndf_test['Family_Survival_Rate_NA'] = test_family_survival_rate_NA\n\ntrain_ticket_survival_rate = []\ntrain_ticket_survival_rate_NA = []\ntest_ticket_survival_rate = []\ntest_ticket_survival_rate_NA = []\n\nfor i in range(len(df_train)):\n    if df_train['Ticket'][i] in ticket_rates:\n        train_ticket_survival_rate.append(ticket_rates[df_train['Ticket'][i]])\n        train_ticket_survival_rate_NA.append(1)\n    else:\n        train_ticket_survival_rate.append(mean_survival_rate)\n        train_ticket_survival_rate_NA.append(0)\n        \nfor i in range(len(df_test)):\n    if df_test['Ticket'].iloc[i] in ticket_rates:\n        test_ticket_survival_rate.append(ticket_rates[df_test['Ticket'].iloc[i]])\n        test_ticket_survival_rate_NA.append(1)\n    else:\n        test_ticket_survival_rate.append(mean_survival_rate)\n        test_ticket_survival_rate_NA.append(0)\n        \ndf_train['Ticket_Survival_Rate'] = train_ticket_survival_rate\ndf_train['Ticket_Survival_Rate_NA'] = train_ticket_survival_rate_NA\ndf_test['Ticket_Survival_Rate'] = test_ticket_survival_rate\ndf_test['Ticket_Survival_Rate_NA'] = test_ticket_survival_rate_NA","d1dfd539":"for df in [df_train, df_test]:\n    df['Survival_Rate'] = (df['Ticket_Survival_Rate'] + df['Family_Survival_Rate']) \/ 2\n    df['Survival_Rate_NA'] = (df['Ticket_Survival_Rate_NA'] + df['Family_Survival_Rate_NA']) \/ 2    ","7f113012":"non_numeric_features = ['Embarked', 'Sex', 'Deck', 'Title', 'Family_Size_Grouped', 'Age', 'Fare']\n\nfor df in dfs:\n    for feature in non_numeric_features:        \n        df[feature] = LabelEncoder().fit_transform(df[feature])","1d7601c3":"onehot_features = ['Pclass', 'Sex', 'Deck', 'Embarked', 'Title', 'Family_Size_Grouped']\nencoded_features = []\n\nfor df in dfs:\n    for feature in onehot_features:\n        encoded_feat = OneHotEncoder().fit_transform(df[feature].values.reshape(-1, 1)).toarray()\n        n = df[feature].nunique()\n        cols = ['{}_{}'.format(feature, n) for n in range(1, n + 1)]\n        encoded_df = pd.DataFrame(encoded_feat, columns=cols)\n        encoded_df.index = df.index\n        encoded_features.append(encoded_df)\n\n# *encoded_features gives all encoded features of each of Six onehot_features         \ndf_train = pd.concat([df_train, *encoded_features[:6]], axis=1)\ndf_test = pd.concat([df_test, *encoded_features[6:]], axis=1)","397e83e9":"df_all = concat_df(df_train, df_test)\n\n# Dropping Un-needed feature\ndrop_cols = ['Deck', 'Embarked', 'Family', 'Family_Size', 'Family_Size_Grouped', 'Survived',\n             'Name', 'Parch', 'PassengerId', 'Pclass', 'Sex', 'SibSp', 'Ticket', 'Title',\n            'Ticket_Survival_Rate', 'Family_Survival_Rate', 'Ticket_Survival_Rate_NA', 'Family_Survival_Rate_NA']\n\ndf_all.drop(columns=drop_cols, inplace=True)\ndf_all.head()","4a89a775":"X = df_train.drop(columns=drop_cols)","10892128":"X_train = StandardScaler().fit_transform(X)\nY_train = df_train['Survived'].values\nX_test = StandardScaler().fit_transform(df_test.drop(columns=drop_cols))\n\nprint('X_train shape: {}'.format(X_train.shape))\nprint('Y_train shape: {}'.format(Y_train.shape))\nprint('X_test shape: {}'.format(X_test.shape))","16702974":"sgd = linear_model.SGDClassifier(max_iter=5, tol=None)\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\n\nsgd.score(X_train, Y_train)\n\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)","bd82321f":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\n\nY_prediction = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)","24ad6875":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\n\nY_pred = logreg.predict(X_test)\n\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)","b0c8f68b":"# KNN \nknn = KNeighborsClassifier(n_neighbors = 3) \nknn.fit(X_train, Y_train)  \nY_pred = knn.predict(X_test)  \nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)","9168e78f":"gaussian = GaussianNB() \ngaussian.fit(X_train, Y_train)  \nY_pred = gaussian.predict(X_test)  \nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)","cdf8e9ca":"perceptron = Perceptron(max_iter=5)\nperceptron.fit(X_train, Y_train)\n\nY_pred = perceptron.predict(X_test)\n\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)","a9ad2c9d":"linear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\n\nY_pred = linear_svc.predict(X_test)\n\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)","5e6b31c8":"decision_tree = DecisionTreeClassifier() \ndecision_tree.fit(X_train, Y_train)  \nY_pred = decision_tree.predict(X_test)  \nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)","0750f022":"results = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', \n              'Decision Tree'],\n    'Score': [acc_linear_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_decision_tree]})\nresult_df = results.sort_values(by='Score', ascending=False)\nresult_df = result_df.set_index('Score')\nresult_df.head(9)","791a317b":"# Link ---> ttps:\/\/stackoverflow.com\/questions\/25006369\/what-is-sklearn-cross-validation-cross-val-score\nfrom sklearn.model_selection import cross_val_score\nrf = RandomForestClassifier(n_estimators=100,oob_score=True)\nscores = cross_val_score(rf, X_train, Y_train, cv=10, scoring = \"accuracy\")\nprint(\"Scores:\", scores)\nprint(\"Mean:\", scores.mean())\nprint(\"Standard Deviation:\", scores.std())","8f10e89e":"rf.fit(X_train, Y_train)\nY_prediction = rf.predict(X_test)\n\nrf.score(X_train, Y_train)\n\nacc_random_forest = round(rf.score(X_train, Y_train) * 100, 2)\nprint(round(acc_random_forest,2,), \"%\")","90ee0b70":"importances = pd.DataFrame({'feature':X.columns,'importance':np.round(rf.feature_importances_,3)})\nimportances = importances.sort_values('importance',ascending=False).set_index('feature')\nimportances.head(26)","9eb5bbff":"importances.plot.bar()","2b6ecb16":"random_forest = RandomForestClassifier(n_estimators=100, oob_score = True)\nrandom_forest.fit(X_train, Y_train)\nY_prediction = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, Y_train)\n\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nprint(round(acc_random_forest,2,), \"%\")","18c7118c":"print(\"oob score:\", round(random_forest.oob_score_, 4)*100, \"%\")","424b33a3":"print(\"oob score:\", round(rf.oob_score_, 4)*100, \"%\")","22fcb289":"random_forest = RandomForestClassifier(criterion='gini',\n                                           n_estimators=1750,\n                                           max_depth=7,\n                                           min_samples_split=6,\n                                           min_samples_leaf=6,\n                                           max_features='auto',\n                                           oob_score=True,\n                                           random_state=42,\n                                           n_jobs=-1,\n                                           verbose=1) \nrandom_forest.fit(X_train, Y_train)\nY_prediction = (random_forest.predict(X_test)).astype(int)\n\nrandom_forest.score(X_train, Y_train)\n\nprint(\"oob score:\", round(random_forest.oob_score_, 4)*100, \"%\")","f8c327c0":"from sklearn.model_selection import StratifiedKFold\nN = 5\noob = 0\nprobs = pd.DataFrame(np.zeros((len(X_test), N * 2)), columns=['Fold_{}_Prob_{}'.format(i, j) for i in range(1, N + 1) for j in range(2)])\nfprs, tprs, scores = [], [], []\n\nskf = StratifiedKFold(n_splits=N, random_state=N, shuffle=True)\n\nfor fold, (trn_idx, val_idx) in enumerate(skf.split(X_train, Y_train), 1):\n    print('Fold {}\\n'.format(fold))\n    \n    # Fitting the model\n    random_forest.fit(X_train[trn_idx], Y_train[trn_idx])\n    \n    # Computing Train AUC score\n    trn_fpr, trn_tpr, trn_thresholds = roc_curve(Y_train[trn_idx], random_forest.predict_proba(X_train[trn_idx])[:, 1])\n    trn_auc_score = auc(trn_fpr, trn_tpr)\n    # Computing Validation AUC score\n    val_fpr, val_tpr, val_thresholds = roc_curve(Y_train[val_idx],random_forest.predict_proba(X_train[val_idx])[:, 1])\n    val_auc_score = auc(val_fpr, val_tpr)  \n      \n    scores.append((trn_auc_score, val_auc_score))\n    fprs.append(val_fpr)\n    tprs.append(val_tpr)\n    \n    # X_test probabilities\n    probs.loc[:, 'Fold_{}_Prob_0'.format(fold)] = random_forest.predict_proba(X_test)[:, 0]\n    probs.loc[:, 'Fold_{}_Prob_1'.format(fold)] = random_forest.predict_proba(X_test)[:, 1]\n        \n    oob += random_forest.oob_score_ \/ N\n    print('Fold {} OOB Score: {}\\n'.format(fold, random_forest.oob_score_))   \n    \nprint('Average OOB Score: {}'.format(oob))","e0f81efc":"from sklearn.model_selection import cross_val_score\nrf = RandomForestClassifier(n_estimators=100,oob_score=True)\nscores = cross_val_score(random_forest, X_train, Y_train, cv=10, scoring = \"accuracy\")\nprint(\"Scores:\", scores)\nprint(\"Mean:\", scores.mean())\nprint(\"Standard Deviation:\", scores.std())","c53169a4":"from sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import confusion_matrix\npredictions = cross_val_predict(random_forest, X_train, Y_train, cv=3)\nconfusion_matrix(Y_train, predictions)","e8dc9de1":"from sklearn.metrics import precision_score, recall_score\n\nprint(\"Precision:\", precision_score(Y_train, predictions))\nprint(\"Recall:\",recall_score(Y_train, predictions))","0f963aac":"from sklearn.metrics import f1_score\nf1_score(Y_train, predictions)","f8e3f394":"from sklearn.metrics import roc_curve\n\n# getting the probabilities of our predictions\ny_scores = random_forest.predict_proba(X_train)\ny_scores = y_scores[:,1]\n\n# compute true positive rate and false positive rate\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(Y_train, y_scores)\n# plotting them against each other\ndef plot_roc_curve(false_positive_rate, true_positive_rate, label=None):\n    plt.plot(false_positive_rate, true_positive_rate, linewidth=2, label=label)\n    plt.plot([0, 1], [0, 1], 'r', linewidth=4)\n    plt.axis([0, 1, 0, 1])\n    plt.xlabel('False Positive Rate (FPR)', fontsize=16)\n    plt.ylabel('True Positive Rate (TPR)', fontsize=16)\n\nplt.figure(figsize=(14, 7))\nplot_roc_curve(false_positive_rate, true_positive_rate)\nplt.show()","3463ed6e":"from sklearn.metrics import roc_auc_score\nr_a_score = roc_auc_score(Y_train, y_scores)\nprint(\"ROC-AUC-Score:\", r_a_score)","872f2c13":"submission = pd.DataFrame({\n        \"PassengerId\": df_test[\"PassengerId\"],\n        \"Survived\": Y_prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","1aeb91b2":"data=pd.read_csv(\"submission.csv\")\ndata.head(10)","52e1cf6f":"Here we see clearly, that `Pclass` is contributing to a persons chance of survival, especially if this person is in class 1. \n\nLooking at the BarPlot , we can easily infer that survival for Women from Pclass1 is about 95-96%, as only 3 out of 94 Women from Pclass1 died.\n\nIt is evident that irrespective of Pclass, Women were given first priority while rescue. Even Men from Pclass1 have a very low survival rate.\n\nLooks like Pclass is also an important feature. ","7b3a1542":"Now that we have a proper model, we can start evaluating it\u2019s performace in a more accurate way. Previously we only used accuracy and the oob score, which is just another form of accuracy. The problem is just, that it\u2019s more complicated to evaluate a classification model than a regression model. We will talk about this in the following section.","c746a575":"**The training-set has 891 examples and 11 features + the target variable (survived).** 2 of the features are floats, 5 are integers and 5 are objects. Below I have listed the features with a short description:","36f25dbc":"`Embarked` is a categorical feature and there are only **2** missing values in whole data set. Both of those passengers are female, upper class and they have the same ticket number. This means that they know each other and embarked from the same port together. The mode `Embarked` value for an upper class female passenger is **C (Cherbourg)**, but this doesn't necessarily mean that they embarked from that port.","6f4c1504":"### How many Survived??","e5a417a0":"As I suspected, every deck has different survival rates and that information can't be discarded. Deck **B**, **C**, **D** and **E** have the highest survival rates. Those decks are mostly occupied by 1st class passengers. **M** has the lowest survival rate which is mostly occupied by 2nd and 3rd class passengers. To conclude, cabins used by 1st class passengers have higher survival rates than cabins used by 2nd and 3rd class passengers. In my opinion **M** (Missing `Cabin` values) has the lowest survival rate because they couldn't retrieve the cabin data of the victims. That's why I believe labeling that group as **M** is a reasonable way to handle the missing data. It is a unique group with shared characteristics. `Deck` feature has high-cardinality right now so some of the values are grouped with each other based on their similarities.\n* **A**, **B** and **C** decks are labeled as **ABC** because all of them have only 1st class passengers\n* **D** and **E** decks are labeled as **DE** because both of them have similar passenger class distribution and same survival rate\n* **F** and **G** decks are labeled as **FG** because of the same reason above\n* **M** deck doesn't need to be grouped with other decks because it is very different from others and has the lowest survival rate.","44e5372c":"`Embarked` seems to be correlated with `survival`, depending on the `Sex` and `Pclass`.\nWomen on port Q and on port S have a higher chance of survival. The inverse is true, if they are at port C. Men have a high survival probability if they are on port C, but a low probability if they are on port Q or S.","d36aaf7c":"### **Frequency Encoding**\n`Family_Size` is created by adding `SibSp`, `Parch` and **1**. `SibSp` is the count of siblings and spouse, and `Parch` is the count of parents and children. Those columns are added in order to find the total size of families. Adding **1** at the end, is the current passenger. Graphs have clearly shown that family size is a predictor of survival because different values have different survival rates.\n* Family Size with **1** are labeled as **Alone**\n* Family Size with **2**, **3** and **4** are labeled as **Small**\n* Family Size with **5** and **6** are labeled as **Medium**\n* Family Size with **7**, **8** and **11** are labeled as **Large**","c9825e62":"### Convert Formats\n\nWe will convert categorical data to dummy variables for mathematical analysis. There are multiple ways to encode categorical variables; we will use the sklearn and pandas functions.\n\nIn this step, we will also define our x (independent\/features\/explanatory\/predictor\/etc.) and y (dependent\/target\/outcome\/response\/etc.) variables for data modeling.\n\n** Developer Documentation: **\n* [Categorical Encoding](http:\/\/pbpython.com\/categorical-encoding.html)\n* [Sklearn LabelEncoder](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.LabelEncoder.html)\n* [Sklearn OneHotEncoder](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.OneHotEncoder.html)\n* [Label Encoder vs OneHot Encoder](https:\/\/www.analyticsvidhya.com\/blog\/2020\/03\/one-hot-encoding-vs-label-encoding-using-scikit-learn\/)\n* [Pandas Categorical dtype](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/categorical.html)\n* [pandas.get_dummies](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.get_dummies.html)","f901a6b3":"### Decision Tree","ec3e74b6":"**Chances for Survival by Port Of Embarkation --**","b05fd2c1":"# **4. Reading the Data**","78c913af":"### **Age**\n`Age` feature has a normal distribution with some spikes and bumps and **10** quantile based bins are used for `Age`. The first bin has the highest survival rate and 4th bin has the lowest survival rate. Those were the biggest spikes in the distribution. There is also an unusual group **(34.0, 40.0]** with high survival rate that is captured in this process.","8fe3cbe8":"Nice ! I think that score is good enough to submit the predictions for the test-set to the Kaggle leaderboard.","a0faf0f8":"Our random forest model predicts as good as it did before. A general rule is that, the more features you have, **the more likely your model will suffer from overfitting** and vice versa. But I think our data looks fine for now and hasn't too much features.\nThere is also another way to evaluate a random-forest classifier, which is probably much more accurate than the score we used before. What I am talking about is the **out-of-bag samples** to estimate the generalization accuracy. I will not go into details here about how it works. Just note that out-of-bag estimate is as accurate as using a test set of the same size as the training set. Therefore, using the out-of-bag error estimate removes the need for a set aside test set.","4f915583":"Now we will train several Machine Learning models and compare their results. Note that because the dataset does not provide labels for their testing-set, we need to use the predictions on the training set to compare the algorithms with each other. Later on, we will use cross validation.","f04ff378":"### Logistic Regression:","fb1fb841":"**Line 1:** s is Cabin name and **s[0]**  gives the Cabin alphabet like 'C' , if S[0] is missing then it goes to category 'M'\n\n**Line 2:** Various columns are dropped from df_all , 'deck' is grouped with 'pclass' and the 'Name' column is renamed to 'Count'","861bdda7":"#### **Fare**\nThere is only one passenger with missing `Fare` value. We can assume that `Fare` is related to family size (`Parch` and `SibSp`) and `Pclass` features. Median `Fare` value of a male with a third class ticket and no family is a logical choice to fill the missing value.","773dfe90":"`SibSp` and `Parch` would make more sense as a combined feature, that shows the total `Family Size`, a person has on the Titanic. I will create it below and also a feature that sows if someone is not alone.","c4e50b19":"There are too many unique `Ticket` values to analyze, so grouping them up by their frequencies makes things easier.\n\n**How is this feature different than `Family_Size`?** Many passengers travelled along with groups. Those groups consist of friends, nannies, maids and etc. They weren't counted as family, but they used the same ticket.\n\n**Why not grouping tickets by their prefixes?** If prefixes in `Ticket` feature has any meaning, then they are already captured in `Pclass` or `Embarked` features because that could be the only logical information which can be derived from the `Ticket` feature.\n\nAccording to the graph below, groups with **2**,**3** and **4** members had a higher survival rate. Passengers who travel alone has the lowest survival rate. After **4** group members, survival rate decreases drastically. This pattern is very similar to `Family_Size` feature but there are minor differences. `Ticket_Frequency` values are not grouped like `Family_Size` because that would basically create the same feature with perfect correlation. This kind of feature wouldn't provide any additional information gain.","b8831fd9":"StratifiedKFold is used for stratifying the target variable. The folds are made by preserving the percentage of samples for each class in target variable (Survived).","8a962af4":"`Family_Survival_Rate` is calculated from families in training set since there is no `Survived` feature in test set. A list of family names that are occuring in both training and test set (`non_unique_families`), is created. The survival rate is calculated for families with more than 1 members in that list, and stored in `Family_Survival_Rate` feature.\n\nAn extra binary feature `Family_Survival_Rate_NA` is created for families that are unique to the test set. This feature is also necessary because there is no way to calculate those families' survival rate. This feature implies that family survival rate is not applicable to those passengers because there is no way to retrieve their survival rate.\n\n`Ticket_Survival_Rate` and `Ticket_Survival_Rate_NA` features are also created with the same method. `Ticket_Survival_Rate` and `Family_Survival_Rate` are averaged and become `Survival_Rate`, and `Ticket_Survival_Rate_NA` and `Family_Survival_Rate_NA` are also averaged and become `Survival_Rate_NA`.","0bfa41f4":"### **Continuous Features**\nBoth of the continuous features (`Age` and `Fare`) have good split points and spikes for a decision tree to learn. One potential problem for both features is, the distribution has more spikes and bumps in training set, but it is smoother in test set. Model may not be able to generalize to test set because of this reason.\n\n* Distribution of `Age` feature clearly shows that children younger than 15 has a higher survival rate than any of the other age groups\n* In distribution of `Fare` feature, the survival rate is higher on distribution tails. The distribution also has positive skew because of the extremely large outliers","67aefd87":"You can see that men have a high probability of survival when they are between 18 and 30 years old, which is also a little bit true for women but not fully.\n\nFor women the survival chances are higher between 14 and 40.\n\nFor men the probability of survival is very low between the age of 5 and 18, but that isn\u2019t true for women. \n\nAnother thing to note is that infants also have a little bit higher probability of survival.\n\nWhen passenger class increases, the median age for both males and females also increases. However, females tend to have slightly lower median Age than males. The median ages below are used for filling the missing values in Age feature.","c68f4bd9":"### **K-Fold Cross Validation:**\n\n**[Introduction to K-Fold Cross Validation](https:\/\/medium.com\/datadriveninvestor\/k-fold-cross-validation-6b8518070833)**\n\nK-Fold Cross Validation randomly splits the training data into **K subsets called folds**. Let\u2019s image we would split our data into 4 folds (K = 4). Our random forest model would be trained and evaluated 4 times, using a different fold for evaluation everytime, while it would be trained on the remaining 3 folds.\nThe image below shows the process, using 4 folds (K = 4). Every row represents one training + evaluation process. In the first row, the model get\u2019s trained on the first, second and third subset and evaluated on the fourth. In the second row, the model get\u2019s trained on the second, third and fourth subset and evaluated on the first. K-Fold Cross Validation repeats this process till every fold acted once as an evaluation fold.\n\n![alt text](https:\/\/miro.medium.com\/max\/875\/1*HzpaubLj_o-zt1klnB81Yg.png)\n\nThe result of our K-Fold Cross Validation example would be an array that contains 4 different scores. We then need to compute the mean and the standard deviation for these scores.\nThe code below perform K-Fold Cross Validation on our random forest model, using 10 folds (K = 10). Therefore it outputs an array with 10 different scores.","e64780bf":"* **[What are Hyperparameters ?](https:\/\/machinelearningmastery.com\/difference-between-a-parameter-and-a-hyperparameter\/)**\n* **[Ml-hyperparameter-tuning](https:\/\/www.geeksforgeeks.org\/ml-hyperparameter-tuning\/)**\n\nBelow you can see the code of the hyperparamter tuning for the parameters criterion, min_samples_leaf, min_samples_split and n_estimators.\nI put this code into a markdown cell and not into a code cell, because it takes a long time to run it.","0860c262":"param_grid = { \"criterion\" : [\"gini\", \"entropy\"], \"min_samples_leaf\" : [1, 5, 10,], \"min_samples_split\" : [2, 4, 10,], \"n_estimators\": [100,500,11000,1500]}\n\n\ngd=GridSearchCV(estimator=RandomForestClassifier(random_state=42),param_grid=param_grid,verbose=True)\n\n\ngd.fit(X,Y)\n\n\nprint(gd.best_score_)\nprint(gd.best_estimator_)","3bc6e70b":"# **Random Forest**\n\n\n\n* **[What is Random Forest ?](https:\/\/builtin.com\/data-science\/random-forest-algorithm)**\n* **[What is Feature Importance ?](https:\/\/towardsdatascience.com\/explaining-feature-importance-by-example-of-a-random-forest-d9166011959e)**","746dce95":"\nAs seen from below, some columns have missing values. `df_test.isnull().sum()` function shows the count of missing values in every column in both training and test set.\n* Training set have missing values in `Age`, `Cabin` and `Embarked` columns\n* Test set have missing values in `Age`, `Cabin` and `Fare` columns\n\nIt is convenient to work on concatenated training and test set while dealing with missing values, otherwise filled data may overfit to training or test set samples. The count of missing values in `Age`, `Embarked` and `Fare` are smaller compared to total sample, but roughly **78%** of the `Cabin` is missing. Missing values in `Age`, `Embarked` and `Fare` can be filled with descriptive statistical measures but that wouldn't work for `Cabin`.","4d29fee0":"#### **Cabin**\n`Cabin` feature is little bit tricky and it needs further exploration. The large portion of the `Cabin` feature is missing and the feature itself cant be ignored completely because some the cabins might have higher survival rates. It turns out to be the first letter of the `Cabin` \nvalues are the decks in which the cabins are located. \nThose decks were mainly separated for one passenger class, but some of them were used by multiple passenger classes.\n![alt text](https:\/\/vignette.wikia.nocookie.net\/titanic\/images\/f\/f9\/Titanic_side_plan.png\/revision\/latest?cb=20180322183733)\n* On the Boat Deck there were **6** rooms labeled as **T, U, W, X, Y, Z** but only the **T** cabin is present in the dataset\n* **A**, **B** and **C** decks were only for 1st class passengers\n* **D** and **E** decks were for all classes\n* **F** and **G** decks were for both 2nd and 3rd class passengers","62772c98":"### Linear Support Vector Machine:","0d1aa861":"### Random Forest:","290b0450":"#### ROC AUC Curve\n\n**[What is an ROC AUC Curve ?](https:\/\/www.analyticsvidhya.com\/blog\/2020\/06\/auc-roc-curve-machine-learning\/)**","5830ba08":"### Perceptron:","6605aae1":"Our model predicts 84% of the time, a passengers survival correctly (precision). The recall tells us that it predicted the survival of 74 % of the people who actually survived.","d0229823":" **Links**\n* [Binning Continuous Features](https:\/\/www.geeksforgeeks.org\/python-binning-method-for-data-smoothing\/)\n* [How to use pandas cut() and qcut() for Binnning?](https:\/\/www.geeksforgeeks.org\/how-to-use-pandas-cut-and-qcut\/)","0ee337c1":"# Correlation Between The Features","cdc957db":"#### **Label Encoding Non-Numerical Features**\n`Embarked`, `Sex`, `Deck` , `Title` and `Family_Size_Grouped` are object type, and `Age` and `Fare` features are category type. They are converted to numerical type with `LabelEncoder`. `LabelEncoder` basically labels the classes from **0** to **n**. This process is necessary for models to learn from those features.","02ed655f":"#### **Categorical Features**\nEvery categorical feature has at least one class with high mortality rate. Those classes are very helpful to predict whether the passenger is a survivor or victim. Best categorical features are `Pclass` and `Sex` because they have the most homogenous distributions.\n\n* Passengers boarded from **Southampton** has a lower survival rate unlike other ports. More than half of the passengers boarded from **Cherbourg** had survived. This observation could be related to `Pclass` feature\n* `Parch` and `SibSp` features show that passengers with only one family member has a higher survival rate","83317305":"### Interpreting The Heatmap\n\nThe first thing to note is that only the numeric features are compared as it is obvious that we cannot correlate between alphabets or strings. Before understanding the plot, let us see what exactly correlation is.\n\n**POSITIVE CORRELATION:** If an **increase in feature A leads to increase in feature B, then they are positively correlated**. A value **1 means perfect positive correlation**.\n\n**NEGATIVE CORRELATION:** If an **increase in feature A leads to decrease in feature B, then they are negatively correlated**. A value **-1 means perfect negative correlation**.\n\nNow lets say that two features are highly or perfectly correlated, so the increase in one leads to increase in the other. This means that both the features are containing highly similar information and there is very little or no variance in information. This is known as **MultiColinearity** as both of them contains almost the same information.\n\nSo do you think we should use both of them as **one of them is redundant**. While making or training models, we should try to eliminate redundant features as it reduces training time and many such advantages.\n\nNow from the above heatmap,we can see that the features are not much correlated. The highest correlation is between **SibSp and Parch i.e 0.37**. So we can carry on with all features.","c27e2504":"## **5.1 Missing Values**\n**Let\u2019s take a more detailed look at what data is actually missing:**","87e75af6":"**Observations:**\n\n1)The number of children increases with Pclass and the survival rate for passenegers below Age 10(i.e children) looks to be good irrespective of the Pclass.\n\n2)Survival chances for Passenegers aged 20-50 from Pclass1 is high.\n","ffc973d0":"### **Ticket**","d496bbf2":"# Hyperparameter Tuning","53393dd5":"#### Testing new Parameters:","57aaf053":"The Accuracy of this model on kaggle leaderboard = **81.1%**. Quite Reasonable Score for so much HardWork .","4be018e3":"### Gaussian Naive Bayes:","8a53c46d":"### K Nearest Neighbor:","f81bed43":"# **3. Import Libraries**\n\nThe following code is written in Python 3.x. Libraries provide pre-written functionality to perform necessary tasks.","ec14e795":"* `PassengerId` is the unique id of the row and it doesn't have any effect on target\n* `Survived` is the target variable we are trying to predict (**0** or **1**):\n    - **1 = Survived**\n    - **0 = Not Survived**\n* `Pclass` (Passenger Class) is the socio-economic status of the passenger and it is a categorical ordinal feature which has **3** unique values (**1**,  **2 **or **3**):\n    - **1 = Upper Class**\n    - **2 = Middle Class**\n    - **3 = Lower Class**\n* `Name`, `Sex` and `Age` are self-explanatory\n* `SibSp` is the total number of the passengers' siblings and spouse\n* `Parch` is the total number of the passengers' parents and children\n* `Ticket` is the ticket number of the passenger\n* `Fare` is the passenger fare\n* `Cabin` is the cabin number of the passenger\n* `Embarked` is port of embarkation and it is a categorical feature which has **3** unique values (**C**, **Q** or **S**):\n    - **C = Cherbourg**\n    - **Q = Queenstown**\n    - **S = Southampton**","24b8f5be":"### **Target Encoding**\n`extract_surname` function is used for extracting surnames of passengers from the `Name` feature. `Family` feature is created with the extracted surname. This is necessary for grouping passengers in the same family.","9749c29f":"#### **Fare**\n`Fare` feature is positively skewed and survival rate is extremely high on the right end. **13** quantile based bins are used for `Fare` feature. Even though the bins are too much, they provide decent amount of information gain. The groups at the left side of the graph has the lowest survival rate and the groups at the right side of the graph has the highest survival rate. This high survival rate was not visible in the distribution graph. There is also an unusual group **(15.742, 23.25]** in the middle with high survival rate that is captured in this process.","b844ceec":"The red line in the middel represents a purely random classifier (e.g a coin flip) and therefore your classifier should be as far away from it as possible. Our Random Forest model seems to do a good job.\nOf course we also have a tradeoff here, because the classifier produces more false positives, the higher the true positive rate is.","7332bd60":"### **Conclusion(EDA)**\nMost of the features are correlated with each other. This relationship can be used to create new features with feature transformation and feature interaction. Target encoding could be very useful as well because of the high correlations with `Survived` feature.\n\nSplit points and spikes are visible in continuous features. They can be captured easily with a decision tree model, but linear models may not be able to spot them.\n\nCategorical features have very distinct distributions with different survival rates. Those features can be one-hot encoded. Some of those features may be combined with each other to make new features.\n\nCreated a new feature called `Deck` and dropped `Cabin` feature at the **Exploratory Data Analysis** part.","4a1dd9a2":"**Two Missing members ---**","f7819d70":"### Feature Importance\n\nAnother great quality of random forest is that they make it very easy to measure the relative importance of each feature using random_forest.feature_importances_ function. ","afd5d047":"#### F-Score","b1c32840":"There we have it, a 79 % F-score. The score is not that high, because we have a recall of 74%. But unfortunately the F-score is not perfect, because it favors classifiers that have a similar precision and recall. This is a problem, because you sometimes want a high precision and sometimes a high recall. The thing is that an increasing precision, sometimes results in an decreasing recall and vice versa (depending on the threshold). This is called the precision\/recall tradeoff.","d45fc778":"### Further Evaluation:\n\n#### Confusion Matrix:\n \n**[What is Confusion Matrix?](https:\/\/www.geeksforgeeks.org\/confusion-matrix-machine-learning\/)** ","30112696":"#### **One-Hot Encoding the Categorical Features**\nThe categorical features (`Pclass`, `Sex`, `Deck`, `Embarked`, `Title`) are converted to one-hot encoded features with `OneHotEncoder`. `Age` and `Fare` features are not converted because they are ordinal unlike the previous ones.","fa3d27cc":"## **Feature Transformation**","e2baa9d3":"As we can see, the Random Forest classifier goes on the first place. But first, let us check, how random-forest performs, when we use cross validation.","11786a1c":"It is evident that not many passengers survived the accident.\n\nOut of 891 passengers in training set, only around 350 survived i.e Only 38.4% of the total training set survived the crash. We need to dig down more to get better insights from the data and see which categories of the passengers did survive and who didn't.\n\nWe will try to check the survival rate by using the different features of the dataset. Some of the features being Sex, Port Of Embarcation, Age,etc.\n\nFirst let us understand the different types of features.","3d357129":"## Types Of Features\n\n### Categorical Features:\nA categorical variable is one that has two or more categories and each value in that feature can be categorised by them.For example, gender is a categorical variable having two categories (male and female). Now we cannot sort or give any ordering to such variables. They are also known as **Nominal Variables**.\n\n**Categorical Features in the dataset: Sex,Embarked.**\n\n### Ordinal Features:\nAn ordinal variable is similar to categorical values, but the difference between them is that we can have relative ordering or sorting between the values. For eg: If we have a feature like **Height** with values **Tall, Medium, Short**, then Height is a ordinal variable. Here we can have a relative sort in the variable.\n\n**Ordinal Features in the dataset: PClass**\n\n### Continous Feature:\nA feature is said to be continous if it can take values between any two points or between the minimum or maximum values in the features column.\n\n**Continous Features in the dataset: Age**","a20c092c":"Above we can see that 38% out of the training-set survived the Titanic. \n\nWe can also see that the passenger ages range from 0.4 to 80. \n\nOn top of that we can already detect some features, that contain missing values, like the \u2018Age\u2019 and 'Cabin' feature.","825acb6a":"The plot above confirms our assumption about pclass 1, but we can also spot a high probability that a person in pclass 3 will not survive.","b5f485b3":"## **1. Define The Problem**\n\n**Project Summary:**\nThe RMS Titanic was a British passenger liner that sank in the North Atlantic Ocean in the early morning hours of 15 April 1912, after it collided with an iceberg during its maiden voyage from Southampton to New York City. There were an estimated 2,224 passengers and crew aboard the ship, and more than 1,500 died, making it one of the deadliest commercial peacetime maritime disasters in modern history.\n\nI have tried my best to explain every complex code written and even given links in between for Reference.\n\nIn this challenge, we ask you to complete the analysis of what sorts of people were likely to survive. In particular, we ask you to apply the tools of machine learning to predict which passengers survived the tragedy.\n\nPractice Skills\n* Binary classification\n* Python\n\n![alt text](https:\/\/vignette.wikia.nocookie.net\/titanic\/images\/f\/f9\/Titanic_side_plan.png\/revision\/latest?cb=20180322183733)\n\n# **2. Gather the Data**\n\n Test and train data at [Kaggle's Titanic: Machine Learning from Disaster](https:\/\/www.kaggle.com\/c\/titanic\/data)\n\n\n","6092ea63":"* **100%** of **A**, **B** and **C** decks are 1st class passengers\n* Deck **D** has **87%** 1st class and **13%** 2nd class passengers\n* Deck **E** has **83%** 1st class, **10%** 2nd class and **7%** 3rd class passengers\n* Deck **F** has **62%** 2nd class and **38%** 3rd class passengers\n* **100%** of **G** deck are 3rd class passengers\n* There is one person on the boat deck in **T** cabin and he is a 1st class passenger. **T** cabin passenger has the closest resemblance to **A** deck passengers so he is grouped with **A** deck\n* Passengers labeled as **M** are the missing values in `Cabin` feature. I don't think it is possible to find those passengers' real `Deck` so I decided to use **M** like a deck","234f0374":"#### ROC AUC Score:\n\nThe ROC AUC Score is the corresponding score to the ROC AUC Curve. It is simply computed by measuring the area under the curve, which is called AUC.\nA classifiers that is 100% correct, would have a ROC AUC Score of 1 and a completely random classiffier would have a score of 0.5.","af3d0835":"Missing values in Age are filled with median age, but using median age of the whole data set is not a good choice. Median age of `Pclass` groups is the best choice because of its **high correlation** `Age` (0.408106) and `Survived` (0.338481). It is also more logical to group ages by passenger classes instead of other features.","e1c971d2":"### **SibSp and Parch:**","e1aa29b2":"This looks much more realistic than before. Our model has a average accuracy of **84%** with a standard deviation of **4 %**. The standard deviation shows us, how precise the estimates are .\nThis means in our case that the accuracy of our model can differ + \u2014 4%.\nI think the accuracy is still really good and since random forest is an easy to use model, we will try to increase it\u2019s performance even further in the following section.","5cf6c5d6":"# **5. Exploratory Data Analysis**\n\n** Developer Documentation: **\n* [pandas.DataFrame](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.html)\n* [pandas.DataFrame.info](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.info.html)\n* [pandas.DataFrame.describe](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.describe.html)\n* [Indexing and Selecting Data](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/indexing.html)\n* [pandas.isnull](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.isnull.html)\n* [pandas.DataFrame.sum](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.sum.html)\n* [pandas.DataFrame.mode](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.mode.html)\n* [pandas.DataFrame.copy](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.copy.html)\n* [pandas.DataFrame.fillna](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.fillna.html)\n* [pandas.DataFrame.drop](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.drop.html)\n* [pandas.Series.value_counts](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.value_counts.html)\n* [pandas.DataFrame.loc](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.loc.html)","d42d1e5a":"#### Precision and Recall:\n\n**[What's Precision And Recall ?](https:\/\/towardsdatascience.com\/precision-vs-recall-386cf9f89488)**","8a471f7b":"### **Age and Sex:**","a444c411":"When I googled **Stone, Mrs. George Nelson (Martha Evelyn)**, I found that she embarked from **S (Southampton)** with her maid **Amelie Icard**, in this page [Martha Evelyn Stone: Titanic Survivor](https:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/martha-evelyn-stone.html).","0b8136d9":"Random forest builds multiple decision trees and merges them together to get a more accurate and stable prediction.\nOne big advantage of random forest is, that it can be used for both classification and regression problems, which form the majority of current machine learning systems. With a few exceptions a random-forest classifier has all the hyperparameters of a decision-tree classifier and also all the hyperparameters of a bagging classifier, to control the ensemble itself.","a0fce2b7":"In order to be more accurate, Sex feature is used as the second level of groupby while filling the missing Age values.\n\n**Let's see why**","7ed208a6":"# **7.Building Machine Learning Models**","0be82aca":"### Stochastic Gradient Descent (SGD):","5ef6933b":"## **0. Introduction**\n\n###  \"81.1%\" score on Kaggle Leaderboard! This Notebook is written keeping in mind the basics.\n\nHello Fellow Kagglers,I decided to write this kernel because **Titanic: Machine Learning from Disaster** is one of the Well-Known competition on Kaggle. This is a beginner level kernel which tests your **Exploratory Data Analysis** and **Feature Engineering** skills. Most beginners get lost in the field, because they fall into the black box approach, using libraries and algorithms they don't understand. At first this kernel would look Quite large , but if u stick to it to it , to the very end u will truly learn a lot.\n\n**Titanic: Machine Learning from Disaster** is a great competition to apply domain knowledge for feature engineering, so I made a research and learned a lot about **Exploratory Data Analysis** and **Feature Engineering** from other kernels available here , that can help Improve the accuracy of the model.\n\n**If you have any idea that might improve this kernel, please be sure to comment, or fork and experiment as you like.**\n\nI have researched and learned a lot from other kernels to provide better results. I just want to **`Thank`** the kaggle community for being so generous.    ","51558a5e":"### **Embarked**","13cf1294":"After filling the missing values in `Age`, `Embarked`, `Fare` and `Deck` features, there is no missing value left in both training and test set. `Cabin` is dropped because `Deck` feature is used instead of it.","a101eea2":"# **6. Feature Engineering**","7f14d1d0":"### **Pclass**","f0a0babe":"The first row is about the not-survived-predictions: **500 passengers were correctly classified as not survived** (called true negatives) and **49 where wrongly classified as not survived** (false positives).\nThe second row is about the survived-predictions: **88 passengers where wrongly classified as survived** (false negatives) and **254 where correctly classified as survived** (true positives).\nA confusion matrix gives you a lot of information about how well your model does, but theres a way to get even more, like computing the classifiers precision.","e451ad5f":"### Which is the best Model ?","f36263c8":"Here we can see that you had a high probabilty of survival with 2 to 4 Family Size, but a lower one if you had less than 2 or more than 4 (except for some cases with 7 ).","13027946":"### Training random forest again:","2b03147c":"### **Conclusion(F.E.)**\n`Age` and `Fare` features are binned. Binning helped dealing with outliers and it revealed some homogeneous groups in those features. `Family_Size` is created by adding `Parch` and `SibSp` features and **1**. `Ticket_Frequency` is created by counting the occurence of `Ticket` values.\n\n`Name` feature is very useful. First, `Title` and `Is_Married` features are created from the title prefix in the names. Second, `Family_Survival_Rate` and `Family_Survival_Rate_NA`  features are created by target encoding the surname of the passengers. `Ticket_Survival_Rate` is created by target encoding the `Ticket` feature. `Survival_Rate` feature is created by averaging the `Family_Survival_Rate` and `Ticket_Survival_Rate` features.\n\nFinally, the non-numeric type features are label encoded and categorical features are one-hot encoded. Created **5** new features (`Family_Size`, `Title`, `Is_Married`, `Survival_Rate` and `Survival_Rate_NA`) and dropped the useless features after encoding.","34d7c275":"### **Title & IsMarried**\n`Title` is created by extracting the prefix before `Name` feature. According to graph below, there are many titles that are occuring very few times. Some of those titles doesn't seem correct and they need to be replaced. **Miss**, **Mrs**, **Ms**, **Mlle**, **Lady**, **Mme**, **the Countess**, **Dona** titles are replaced with **Miss\/Mrs\/Ms** because all of them are female. Values like **Mlle**, **Mme** and **Dona** are actually the name of the passengers, but they are classified as titles because `Name` feature is split by comma. **Dr**, **Col**, **Major**, **Jonkheer**, **Capt**, **Sir**, **Don** and **Rev** titles are replaced with **Dr\/Military\/Noble\/Clergy** because those passengers have similar characteristics. **Master** is a unique title. It is given to male passengers below age **26**. They have the highest survival rate among all males.\n\n`Is_Married` is a binary feature based on the **Mrs** title. **Mrs** title has the highest survival rate among other female titles. This title needs to be a feature because all female titles are grouped with each other.\n","13de020b":"Now we can start tuning the hyperameters of random forest."}}