{"cell_type":{"4b82d8d0":"code","3e548a7a":"code","e28f2fad":"code","956b4f61":"code","b5b4601a":"code","104bd976":"code","4bd26749":"code","f4739ba7":"code","5244a0f9":"code","199d97c7":"code","77262a7f":"code","3aab3b1c":"code","f60e9049":"code","bad7b240":"code","bf6b5272":"code","202f40c0":"code","c8ff66e1":"code","fb45c5dd":"code","ac9a9386":"code","4cb9d418":"code","7de52e0c":"code","a9c7581a":"code","1804cff7":"code","dc11ba66":"code","61d10d87":"code","7b9593c9":"code","e2f8b2fa":"code","097f864e":"code","93dbd7fd":"code","f37ff018":"code","c76bae74":"code","5532f73c":"code","1d2d7beb":"code","0aa898ec":"code","4501d35d":"code","d3ea8d25":"code","f4a9a33b":"code","8a93cc5c":"code","3977b6b0":"code","48812395":"code","1c31a856":"code","299fb531":"code","b30ebcb8":"code","726dd194":"code","4fba1088":"code","1676ba17":"code","3b750334":"code","20cc9192":"code","6c80eeff":"code","8e87c9df":"code","f21b1ad1":"code","0895f7e0":"code","5d03f8a7":"code","372a709c":"code","79083d7a":"code","6323d59c":"code","14900f77":"code","f5a12315":"code","d78800f3":"code","530d247b":"code","c2cc165a":"code","6b0449bb":"code","fbaf1df4":"code","f1fadee8":"code","007fb875":"code","19e70923":"code","5ab7ce22":"code","6077255d":"code","bcb89edb":"code","32e51d3f":"code","534036af":"code","222d2cba":"code","cb7ffe28":"code","7f94a1de":"code","f18b4b45":"code","00538678":"code","b825811d":"code","7854441f":"code","a5b6a4b3":"code","c65f04b3":"code","9fe6e431":"code","6334321c":"code","a1ada5fe":"code","1c4aaa78":"code","76cb54fe":"code","599df04a":"code","1f797d42":"code","c1d65a34":"code","279548c6":"code","fb922f50":"code","d88bd9d5":"code","293cf46b":"code","c19d0a8d":"code","2bde8bb0":"code","943d7aa5":"code","c76b25e6":"code","cd587327":"code","3e6927bf":"code","44957526":"code","7e802e9e":"code","4e85d092":"code","59e47ac0":"code","762c86b4":"code","30de717f":"code","dcf8b114":"code","ddc80160":"code","3af82e1b":"code","33800671":"code","70a1c4ed":"code","99f7948f":"code","f34489ff":"code","44e9021c":"code","3d90b116":"code","57db4b51":"code","3cdbc427":"code","808cd353":"code","0bca6fc5":"code","90edecff":"code","04b1e3a1":"code","757e050d":"markdown","1aeb03b7":"markdown","db68d451":"markdown","2b7bff33":"markdown","fbea42bf":"markdown","be24d57a":"markdown","3d2321a3":"markdown","6f19455e":"markdown","8cbe67a3":"markdown","86607e73":"markdown","d8c578f3":"markdown","6c351d50":"markdown","8e6bd6b0":"markdown","6b5ca49b":"markdown","f447f09c":"markdown","5c407d68":"markdown","d15372f4":"markdown","b2a7623c":"markdown","238dc19e":"markdown","98b6e6fc":"markdown","60610630":"markdown","f1f6c426":"markdown","efc0ab4c":"markdown","52d98f8f":"markdown","506859b5":"markdown","dee4b32b":"markdown","390d8c39":"markdown","52d29b14":"markdown","f400bedd":"markdown","dfcb3b9f":"markdown","26a93e32":"markdown","a8040db3":"markdown","96a5af81":"markdown","32003080":"markdown","7a6953e3":"markdown","62987a65":"markdown","7a595c61":"markdown","f04b2444":"markdown","2e8d4448":"markdown","26960169":"markdown","1d14fb21":"markdown","49990bd3":"markdown","af617ea5":"markdown","629389aa":"markdown","ce030565":"markdown","b72cfd0b":"markdown","96347116":"markdown","a00401e6":"markdown","f4d7c5e5":"markdown","61e57110":"markdown","4e4aa5da":"markdown","f0b8b327":"markdown","7a5941c1":"markdown"},"source":{"4b82d8d0":"import numpy as np\n\n# Generate random 2x3 dimensional array\ndata = np.random.randn(2,3)\n\ndata","3e548a7a":"data * 100","e28f2fad":"print(\"Data shape = \", data.shape)\n\nprint(\"Data type = \", data.dtype)","956b4f61":"my_list = [1, 2, 3, 4]\n\nmy_array = np.array(my_list)\n\nprint(\"Array: \", my_array)\n\nprint(\"Array shape = \", my_array.shape)\n\nprint(\"Array type = \", my_array.dtype)","b5b4601a":"my_nested_list = [[1, 2, 3, 4], [5, 6, 7, 8]]\n\nmy_nd_array = np.array(my_nested_list)\n\nmy_nd_array","104bd976":"print(\"#Dimensions = \", my_nd_array.ndim)\n\nprint(\"Shape = \", my_nd_array.shape)","4bd26749":"np.zeros(3)","f4739ba7":"np.zeros((2,3))","5244a0f9":"np.empty((2,3))","199d97c7":"np.arange(10)","77262a7f":"np.arange(1, 5)","3aab3b1c":"np.arange(1, 5, 2)","f60e9049":"arr1 = np.array([1, 2, 3], dtype=np.float64)\narr2 = np.array([10.58, 2.5 ,34.99], dtype=np.int32)\n\nprint(arr1)\nprint(arr2)","bad7b240":"print(arr1.dtype)\nprint(arr2.dtype)","bf6b5272":"float_arr = np.array([1.5, 2.9, 3.7])\n\nprint(float_arr)\nprint(float_arr.dtype)","202f40c0":"int_arr = float_arr.astype(np.int32)\n\n\nprint(int_arr)\nprint(int_arr.dtype)","c8ff66e1":"str_arr = np.array([\"1.5\",\"2.25\",\"3.98\",\"4.2134\"], dtype=np.string_)\n\nprint(str_arr)\nprint(str_arr.dtype)","fb45c5dd":"float_arr = str_arr.astype(np.float64)\n\nprint(float_arr)\nprint(float_arr.dtype)","ac9a9386":"arr1 = np.array([[1,2,3],[4,5,6]])\narr2 = np.array([[10,20,30],[40,50,60]])\n\nprint(arr1)\nprint(\"=\"*50)\nprint(arr2)","4cb9d418":"arr1 + arr2","7de52e0c":"arr2 \/ arr1","a9c7581a":"arr1","1804cff7":"10 * arr1","dc11ba66":"arr1 + 2","61d10d87":"arr1 == arr2","7b9593c9":"arr1+9 == arr2","e2f8b2fa":"arr2 > arr1","097f864e":"arr = np.arange(2,16)\n\narr","93dbd7fd":"arr[0]","f37ff018":"arr[0:5:2]","c76bae74":"arr = np.arange(11)\n\narr","5532f73c":"arr[0::2] = -10\n\narr","1d2d7beb":"arr = np.arange(11)\n\narr","0aa898ec":"arr_shallow_copy = arr[0::2]\n\narr_shallow_copy","4501d35d":"arr_shallow_copy[0] = -555\n\narr_shallow_copy","d3ea8d25":"arr","f4a9a33b":"arr = np.arange(11)\n\narr","8a93cc5c":"arr_copy = arr[0::2].copy()\n\narr_copy","3977b6b0":"arr_copy[0] = -555\n\narr_copy","48812395":"arr","1c31a856":"arr = np.array([[1,2,3],[4,5,6],[7,8,9]])\n\narr","299fb531":"arr[0]","b30ebcb8":"arr[-1]","726dd194":"print(arr[0][1])\nprint(arr[0, 1])","4fba1088":"arr3dim = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])\n\narr3dim","1676ba17":"print(\"#Dimensions = \", arr3dim.ndim)\n\nprint(\"Shape = \", arr3dim.shape)","3b750334":"arr3dim[0]","20cc9192":"arr3dim[0, 0]","6c80eeff":"arr3dim[0, 0, 1]","8e87c9df":"arr3dim[0]","f21b1ad1":"arr3dim[0] = 5\n\narr3dim","0895f7e0":"arr2dim = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])\n\narr2dim","5d03f8a7":"arr2dim[0:2]","372a709c":"arr2dim[0::2]","79083d7a":"arr2dim","6323d59c":"arr2dim[0:2, 1:]","14900f77":"names   = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])\n\nnumbers = np.arange(len(names))\n\nprint(names)\n\nprint(\"=\"*50)\n\nprint(numbers)","f5a12315":"is_bob = names == 'Bob'\n\nis_bob","d78800f3":"numbers[is_bob]","530d247b":"~is_bob","c2cc165a":"numbers[~is_bob]","6b0449bb":"is_bob_or_Joe = (names == 'Bob') | (names == 'Joe')\n\nis_bob_or_Joe","fbaf1df4":"numbers[is_bob_or_Joe]","f1fadee8":"numbers = np.arange(-10,10)\n\nnumbers","007fb875":"numbers[numbers < 0] = 0\n\nnumbers","19e70923":"arr = np.empty((8,4))\n\nfor i in range(8):\n    arr[i] = i\n    \narr    ","5ab7ce22":"arr[[0,4,6,7]]","6077255d":"arr = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]])\n\narr","bcb89edb":"arr[[0,1,4],[1,0,2]]","32e51d3f":"arr = np.arange(15).reshape((3, 5))\n\narr","534036af":"arr.T","222d2cba":"arr","cb7ffe28":"arr.swapaxes(0,1)","7f94a1de":"arr.swapaxes(1,0)","f18b4b45":"arr = np.arange(10)\n\narr","00538678":"np.sqrt(arr)","b825811d":"np.exp(arr)","7854441f":"arr1 = np.array([10, 20, 70, 80])\narr2 = np.array([50, 60, 30, 40])\n\nprint(arr1)\nprint(\"=\"*50)\nprint(arr2)","a5b6a4b3":"np.maximum(arr1, arr2)","c65f04b3":"x = np.arange(11)\ny = np.arange(11,22)\n\nprint(x)\nprint(\"=\"*50)\nprint(y)","9fe6e431":"np.sqrt(x**2 + y**2)","6334321c":"arr1 = np.array([1.1, 1.2, 1.3, 1.4, 1.5])\narr2 = np.array([2.1, 2.2, 2.3, 2.4, 2.5])\ncond = np.array([True, False, True, True, False])\n\nprint(arr1)\nprint(\"=\"*50)\nprint(arr2)\nprint(\"=\"*50)\nprint(cond)","a1ada5fe":"result = [(x if z else y) for x, y, z in zip(arr1, arr2, cond)]\n\nresult","1c4aaa78":"result = np.where(cond, arr1, arr2)\n\nresult","76cb54fe":"arr = np.random.randn(4,4)\n\narr","599df04a":"result = np.where(arr>0, 2, -2)\n\nresult","1f797d42":"arr = np.array([10, 20, 30, 40, 50, 60]).reshape(2, 3)\n\narr","c1d65a34":"print(\"Mean = \", arr.mean())\nprint(\"Mean (using numpy) = \", np.mean(arr))\n\nprint(\"=\"*50)\n\nprint(\"Sum = \", arr.sum())\nprint(\"Sum (using numpy) = \", np.sum(arr))","279548c6":"arr","fb922f50":"np.sum(arr, axis=0)","d88bd9d5":"np.sum(arr, axis=1)","293cf46b":"arr = np.random.randn(2, 2)\n\narr","c19d0a8d":"(arr > 0).sum()","2bde8bb0":"bools = np.array([False, False, True, False])\n\nbools","943d7aa5":"bools.any()","c76b25e6":"bools.all()","cd587327":"arr = np.round(np.random.randn(5), 1)\n\narr","3e6927bf":"arr.sort()\n\narr","44957526":"arr = np.round(np.random.randn(5), 1)\n\narr","7e802e9e":"arr = np.sort(arr)\n\narr","4e85d092":"arr_1 = np.round(np.random.randn(2, 3), 1)\narr_2 = arr_1.copy()\n\nprint(arr_1)\nprint(\"=\"*50)\nprint(arr_2)","59e47ac0":"#sorting via rows\narr_1.sort(1)\n\narr_1","762c86b4":"#sorting via cols\narr_2.sort(0)\n\narr_2","30de717f":"names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])\nnums  = np.array([10, 5, -2, 0, 10, 3, -5, 5])\n\nprint(names)\nprint(\"=\"*50)\nprint(nums)","dcf8b114":"np.unique(names)","ddc80160":"np.unique(nums)","3af82e1b":"x = np.array([[1., 2., 3.], [4., 5., 6.]])\ny = np.array([[6., 23.], [-1, 7], [8, 9]])\n\nprint(x)\nprint(\"=\"*50)\nprint(y)","33800671":"print(\"x shape = \", x.shape)\nprint(\"=\"*50)\nprint(\"y shape = \", y.shape)","70a1c4ed":"z = x.dot(y)\n\nz","99f7948f":"print(\"z shape = \", z.shape)","f34489ff":"z = np.dot(x, y)\n\nz","44e9021c":"x @ y","3d90b116":"from numpy.linalg import inv\n\nx = np.round(np.random.randn(3, 3))\n\nx","57db4b51":"x.T","3cdbc427":"z = np.dot(x.T, x)\n\nz","808cd353":"try:\n    z_inverse = inv(z)\n    print(z_inverse)\n    print(\"=\"*50)\n    print(np.dot(z, z_inverse))\nexcept:\n    print(\"An error occurred when trying inverse matrix\")","0bca6fc5":"normal_sample = np.random.normal(size = (4, 4))\n\nnormal_sample","90edecff":"np.random.seed(555)","04b1e3a1":"random_state = np.random.RandomState(555)\n\nrandom_state.randn(4)","757e050d":"<hr \/>\n\n## 3.3 Methods for Boolean Arrays\n\nBoolean values are coerced to 1 (True) and 0 (False) in the preceding methods.<br>\nThus, sum is often used as a means of counting True values in a boolean array.","1aeb03b7":"<hr \/>\n\n## 3.5 Unique and Other Set Logic\n\nNumPy has some basic set operations for one-dimensional ndarrays. A commonly used one is\n`np.unique`,<br>Which returns the sorted unique values in an array.","db68d451":"<hr \/>\n\nswapaxes similarly returns a view on the data without making a copy.\n\n# 2. Universal Functions: Fast Element-Wise Array Functions\n\nA universal function, or ufunc, is a function that performs element-wise operations on data in ndarrays.\n\nYou can think of them as fast vectorized wrappers for simple functions that take one or more scalar\nvalues and produce one or more scalar results.\n\nMany ufuncs are simple element-wise transformations, like `sqrt` or `exp`:","2b7bff33":"<hr \/>\n\nThe ~ operator can be useful when you want to invert a general condition","fbea42bf":"<hr \/>\n\nAn ndarray is a generic multidimensional container for homogeneous data. that is, all of the\nelements must be the same type.\n\nEvery array has a **shape**, a tuple indicating the size of each dimension,and a **dtype**, an object\ndescribing the data type of the array:","be24d57a":"<hr \/>\n\nYou can pass multiple slices just like you can pass multiple indexes: `arr2dim[rows slice, columns slice]`\n<br><br>\n\n<img src='https:\/\/www.oreilly.com\/library\/view\/python-for-data\/9781449323592\/httpatomoreillycomsourceoreillyimages2172114.png' width=\"500px\">\n\n[image source](https:\/\/www.oreilly.com\/library\/view\/python-for-data\/9781449323592\/ch04.html)","3d2321a3":"<hr \/>\n\n**Alert**\n\nIt\u2019s not safe to assume that np.empty will return an array of all zeros. In some cases, it may return\nuninitialized \u201cgarbage\u201d values.\n\n<hr \/>\n\n**arange** is an array-valued version of the built-in Python range function.","6f19455e":"<hr \/>\n\nOthers, such as `add` or `maximum`, take two arrays (thus, binary ufuncs) and return a single array\nas the result","8cbe67a3":"<hr \/>\n\n## 1.4 Basic Indexing and Slicing\n\nNumPy array indexing is a rich topic, as there are many ways you may want to select a subset of\nyour data or individual elements.\n\nOne-dimensional arrays are simple; on the surface they act similarly to Python lists.","86607e73":"<hr \/>\n\nNow, when I change values in **arr_shallow_copy**, the mutations are reflected in the original array **arr**.","d8c578f3":"<hr \/>\n\n**Note**\n\nAt `dot` product we must make sure that:\n\n1. The #cols of first array must equal to #rows of second array.\n2. Result shape will equal (**#rows of first array** X **#cols of second array**).\n\n<hr \/>\n\nThe `@` symbol (as of Python 3.5) also works as an infix operator that performs matrix multiplication","6c351d50":"<hr \/>\n\nThe second and third arguments to `np.where` don\u2019t need to be arrays. one or both of them can be scalars.<br>\nA typical use of `where` in **data analysis** is to produce a new array of values based on another array.\n\nSuppose you had a matrix of randomly generated data and you wanted to replace all positive\nvalues with 2 and all negative values with \u20132.\n\nThis is very easy to do with `np.where`.","8e6bd6b0":"<hr \/>\n\n## 1.2 Data Types for ndarrays\n\nThe data type or dtype is a special object containing the information (or metadata, data about data)<br>\nThe ndarray needs to interpret a chunk of memory as a particular type of data.","6b5ca49b":"<hr \/>\n\n## 1.5 Boolean Indexing\n\nLet\u2019s consider an example where we have some data in an array and an array of names with\nduplicates.","f447f09c":"<hr \/>\n\n# 3. Array-Oriented Programming with Arrays\n\nUsing NumPy arrays enables you to express many kinds of data processing tasks as concise array\nexpressions that might otherwise require writing loops.\n\nThis practice of replacing explicit loops with array expressions is commonly referred to as\n`vectorization`.<br>In general, vectorized array operations will often be one or two (or more) orders of\nmagnitude faster than their pure Python equivalents, with the biggest impact in any kind of\nnumerical computations.\n\nAs a simple example, suppose we wished to evaluate the function sqrt(x^2 + y^2) across a regular\ngrid of values.","5c407d68":"<hr \/>\n\nPassing multiple index arrays does something slightly different; it selects a onedimensional array\nof elements corresponding to each tuple of indices:\n\n`arr[[row_i, row_j, row_k,....],[col_i, col_j, col_k, ....]]`","d15372f4":"## 1.1 Creating ndarrays\n\nThe easiest way to create an array is to use the array function.<br>\nThis accepts any sequence-like object (including other arrays) and produces a new NumPy array\ncontaining the passed data.\n\nFor example, a list is a good candidate for conversion:","b2a7623c":"<hr \/>\n\nThere are two additional methods, `any` and `all`, useful especially for boolean arrays.\n\n* any : tests whether one or more values in an array is True\n* all : checks if every value is True","238dc19e":"<hr \/>\n\n## 3.1 Expressing Conditional Logic as Array Operations\n\nThe `numpy.where` function is a vectorized version of the ternary expression: `x if condition else y`.\n\nSuppose we had a boolean array and two arrays of values.","98b6e6fc":"<hr \/>\n\nThus, individual elements can be accessed recursively. But that is a bit too much work, so you can\npass a comma-separated list of indices to select individual elements.\n\nSo these are equivalent:","60610630":"<hr \/>\n\n**Note**\n\nThese methods also work with non-boolean arrays, where non-zero elements evaluate to True.\n\n## 3.4 Sorting\n\nLike Python\u2019s built-in list type, NumPy arrays can be sorted in-place with the sort method.","f1f6c426":"<hr \/>\n\n**Alert**\n\nIt\u2019s important to be cautious when using the numpy.string_ type, as string data in NumPy is fixed\nsize and may truncate input without warning.<br>\npandas has more intuitive out-of-the-box behavior on non-numeric data.\n\n**Note**\n\nCalling astype always creates a new array (a copy of the data), even if the new dtype is the same\nas the old dtype.\n\n## 1.3 Arithmetic with NumPy Arrays\n\nArrays are important because they enable you to express batch operations on data without writing\nany for loops.<br>NumPy users call this **vectorization**.\nAny arithmetic operations between equal-size arrays applies the operation **element-wise**.","efc0ab4c":"<hr \/>\n\nWe say that these are **pseudorandom** numbers because they are generated by an algorithm with\ndeterministic behavior.\n\nBased on the seed of the random number generator. You can change NumPy\u2019s random number\ngeneration seed using `np.random.seed`.","52d98f8f":"<hr \/>\n\n## 3.2 Mathematical and Statistical Methods\n\nA set of mathematical functions that compute statistics about an entire array or about the data\nalong an axis are accessible as methods of the array class.\n\nYou can use aggregations (often called reductions) like `sum`, `mean`, and `std` (standard deviation)\neither by calling the array instance method or using the top-level NumPy function.","506859b5":"<hr \/>\n\nKeep in mind that fancy indexing, unlike slicing, always copies the data into a new array.\n\n## 1.7 Transposing Arrays and Swapping Axes\n\nTransposing is a special form of reshaping that similarly returns a view on the underlying data\nwithout copying anything.\n\nArrays have the transpose method and also the special T attribute.","dee4b32b":"<hr \/>\n\nArithmetic operations with scalars propagate the scalar argument to each element in the array.","390d8c39":"<hr \/>\n\nYou can sort each one-dimensional section of values in a multidimensional array inplace along an\naxis by passing the axis number to sort.","52d29b14":"# Gentle Introduction To Numpy\n\n<hr \/>\n\n![numpy](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/31\/NumPy_logo_2020.svg\/1200px-NumPy_logo_2020.svg.png)\n\n[image source](https:\/\/en.wikipedia.org\/wiki\/NumPy)\n\nFirstly I want to thank **Wes McKinney** for his awesome **Python for Data Analysis** book which introduced core building blocks for data analysis using the Python programming language.\n\nI will based on his awesome book for my gentle introduction series notebooks.\n\nIn this notebook, I will try to introduce a gentle introduction to the NumPy library with the help of some content of this book.\n\n## NumPy Basics: Arrays and Vectorized Computation\n\nMost computational packages providing scientific functionality use NumPy\u2019s array objects as the\nlingua franca for data exchange.\n\n**Here are some of the things you\u2019ll find in NumPy:**\n\n* ndarray, an efficient multidimensional array providing fast array-oriented arithmetic operations\n  and flexible broadcasting capabilities\n  \n* Mathematical functions for fast operations on entire arrays of data without having to write\n  loops.\n  \n* Tools for reading\/writing array data to disk and working with memory-mapped files. \n\n* Linear algebra, random number generation, and Fourier transform capabilities.\n\n* A C API for connecting NumPy with libraries written in C, C++, or FORTRAN.\n\nOne of the reasons NumPy is so important for numerical computations in Python is because it is\ndesigned for efficiency on large arrays of data.\n\n**There are a number of reasons for this:**\n\n* NumPy internally stores data in a contiguous block of memory, independent of other built-in\n  Python objects.\n  \n* NumPy\u2019s library of algorithms written in the C language can operate on this memory without\n  any type checking or other overhead.\n  \n* NumPy arrays also use much less memory than built-in Python sequences.\n\n* NumPy operations perform complex computations on entire arrays without the need for\n  Python for loops.\n  \nNumPy-based algorithms are generally 10 to 100 times faster (or more) than their pure Python\ncounterparts and use significantly less memory.\n\n# 1. The NumPy ndarray: A Multidimensional Array Object\n\nOne of the key features of NumPy is its N-dimensional array object, or ndarray, which is a fast,<br>\nflexible container for large datasets in Python.\n\nArrays enable you to perform mathematical operations on whole blocks of data using similar<br>\nsyntax to the equivalent operations between scalar elements.\n\nTo give you a flavor of how NumPy enables batch computations with similar syntax to scalar values<br>\non built-in Python objects,\n\nI first import NumPy and generate a small array of random data.","f400bedd":"<hr \/>\n\n## 1.6 Fancy Indexing\n\nFancy indexing is a term adopted by NumPy to describe indexing using integer arrays.\nSuppose we had an 8 \u00d7 4 array","dfcb3b9f":"<hr \/>\n\nThe data generation functions in **numpy.random** use a global random seed. To avoid global state,\nyou can use `numpy.random.RandomState` To create a random number generator isolated from others.","26a93e32":"<hr \/>\n\nThe top-level method np.sort returns a sorted copy of an array instead of modifying the array in-\nplace.","a8040db3":"<hr \/>\n\n**Note**\n\nSelecting data from an array by boolean indexing always creates a copy of the data, even if the\nreturned array is unchanged.\n\n**Alert**\n\nThe Python keywords `and` and `or` do not work with boolean arrays. Use `&` sign for (and) and `|` sign for (or) instead.","96a5af81":"<hr \/>\n\n# 5. Pseudorandom Number Generation\n\n\nThe numpy.random module supplements the built-in Python random with functions for efficiently\ngenerating whole arrays of sample values from many kinds of probability distributions.\n\nFor example, you can get a **4 \u00d7 4** array of samples from the standard normal distribution using `normal`.","32003080":"<hr \/>\n\nIn addition to np.array, there are a number of other functions for creating new arrays. As examples:\n* zeros and ones create arrays of 0s or 1s, respectively, with a given length or shape.\n* empty creates an array without initializing its values to any particular value.\n\nTo create a higher dimensional array with these methods, pass a tuple for the shape.","7a6953e3":"<hr \/>\n\nI then write mathematical operations with data.","62987a65":"<hr \/>\n\nNested sequences, like a list of equal-length lists, will be converted into a multidimensional array.","7a595c61":"<hr \/>\n\n**This has multiple problems:**\n\n* First, it will not be very fast for large arrays (because all the work is being done in interpreted Python         code).\n\n* Second, it will not work with multidimensional arrays. With `np.where` you can write this very\n  concisely.","f04b2444":"<hr \/>\n\n`numpy.linalg` has a standard set of matrix decompositions and things like inverse and determinant.\nThese are implemented under the hood via the same industry standard linear algebra libraries used\nin other languages like **MATLAB** and **R**, such as BLAS, LAPACK, or possibly (depending on your NumPy build) the proprietary Intel MKL(Math Kernel Library).","2e8d4448":"<hr \/>\n\nSimple transposing with .T is a special case of swapping axes. ndarray has the method swapaxes,\nwhich takes a pair of axis numbers and switches the indicated axes to rearrange the data.","26960169":"<hr \/>\n\nSince **my_nested_list** was a list of lists, the NumPy array **my_nd_array** has two dimensions\nwith shape\n\ninferred from the data. We can confirm this by inspecting the ndim and shape attributes.","1d14fb21":"<hr \/>\n\nSuppose each **name** corresponds to a row in the **numbers** array and we wanted to select all the rows\nwith corresponding name 'Bob'.","49990bd3":"<hr \/>\n\nThe numerical dtypes are named the same way: a type name, like float or int, followed by a\nnumber indicating the number of bits per element.\n\nA standard double precision floating-point value (what\u2019s used under the hood in Python\u2019s float\nobject) takes up 8 bytes or 64 bits. Thus, this type is known in NumPy as float64.\n\n<hr \/>\nYou can explicitly convert or cast an array from one dtype to another using ndarray\u2019s astype method","af617ea5":"<hr \/>\n\n**Indexing with slices**","629389aa":"<hr \/>\n\nSuppose we wanted to take a value from `arr1` whenever the corresponding value in `cond` is True,\nand otherwise take the value from `arr2`.","ce030565":"<hr \/>\n\nFunctions like `mean` and `sum` take an optional axis argument that computes the statistic over the\ngiven axis, resulting in an array with one fewer dimension.","b72cfd0b":"<hr \/>\n\nWith higher dimensional arrays, you have many more options.<br>\nIn a two-dimensional array, the elements at each index are no longer scalars but rather one-dimensional arrays","96347116":"<hr \/>\n\n# 4. Linear Algebra\n\nLinear algebra, like matrix `multiplication`, `decompositions`, `determinants`, and `other square matrix math`,<br>Is an important part of any array library.\n\nUnlike some languages like **MATLAB**, multiplying two two-dimensional arrays with `*` is an element-\nwise product instead of a **matrix dot product**.<br>\nThus, there is a function `dot`, both an array method and a function in the numpy namespace, for\nmatrix multiplication.","a00401e6":"<hr \/>\n\nAs you can see, if you assign a scalar value to a slice, as in <code>arr[0::2] = -10<\/code>, the value is propagated (or broadcasted henceforth) to the entire selection.\n\nAn important first distinction from Python\u2019s built-in lists is that array slices are views on the original\narray.<br>This means that the data is not copied, and any modifications to the view will be reflected in the\nsource array.","f4d7c5e5":"## Please If you find this Notebook useful, Upvote it to help others see it \ud83d\ude42","61e57110":"**Note**\n\nComparisons between arrays of the same size yield boolean arrays","4e4aa5da":"<hr \/>\n\nIf you have an array of strings representing numbers, you can use astype to convert them to\nnumeric form:","f0b8b327":"<hr>\n\nSee image for an illustration of indexing on a two-dimensional array.<br>\n\nI find it helpful to think of `axis 0 as the \u201crows\u201d` of the array and `axis 1 as the \u201ccolumns\u201d`\n    \n<img src='https:\/\/slideplayer.com\/slide\/13118328\/79\/images\/63\/Indexing+elements+in+a+NumPy+array.jpg' width=\"500px\">\n\n[image source](https:\/\/slideplayer.com\/slide\/13118328\/)\n\nIn multidimensional arrays, if you omit later indices, the returned object will be a lower dimensional\nndarray consisting of<br> All the data along the higher dimensions.","7a5941c1":"<hr \/>\n\n**Alert**\n\nIf you want a copy of a slice of an ndarray instead of a view, you will need to explicitly copy the\narray \u2014for example, `arr[0::2].copy()`"}}