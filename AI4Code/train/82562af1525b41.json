{"cell_type":{"61d377ec":"code","2f18d4a4":"code","ed3f4786":"code","b3d4cb4d":"code","3381ec0a":"code","2e7207b1":"code","0bb85cb3":"code","efe6f775":"code","db073f5a":"code","c55e8808":"code","24ff966a":"code","8637e85a":"code","7bb67797":"code","117f3814":"code","7af14ab2":"code","e9c1f74a":"code","67ffc1e6":"markdown","a6369afe":"markdown","0c8220f2":"markdown","e8041b38":"markdown","09e1c5b4":"markdown","404eccc9":"markdown","889648da":"markdown"},"source":{"61d377ec":"import os\nfrom PIL import Image\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras import models, layers, losses\nfrom keras.optimizers import Adam","2f18d4a4":"train_dir = \"\/kaggle\/input\/gtsrb-german-traffic-sign\/train\"","ed3f4786":"# ImageDataGenerator from keras.preprocessing\ndatagen = ImageDataGenerator(validation_split=0.2, rescale=1.\/255)\n\ntrain_generator = datagen.flow_from_directory(\n    train_dir,\n    subset='training',\n    target_size=(30,30),\n    batch_size=32,\n    color_mode='rgb',    \n    shuffle=True,\n    seed=42,\n    class_mode='categorical')\n\nval_generator = datagen.flow_from_directory(\n    train_dir,\n    subset='validation',\n    target_size=(30,30),\n    batch_size=32,\n    color_mode='rgb',    \n    shuffle=True,\n    seed=42,\n    class_mode='categorical')","b3d4cb4d":"input_shape = (30,30,3) # img_rows, img_colums, color_channels\nnum_classes = 43","3381ec0a":"## Build Model\ninputs = layers.Input(shape=input_shape)\n# 1st Conv layer \nx = layers.Conv2D(32, kernel_size = (3, 3), activation = 'relu', padding = 'same')(inputs)\nx = layers.Conv2D(32, kernel_size = (3, 3), activation = 'relu', padding = 'same')(x)\nx = layers.MaxPool2D(pool_size = (2, 2))(x)\n# 2nd Conv layer        \nx = layers.Conv2D(64, kernel_size = (3, 3), activation = 'relu', padding = 'same')(x)\nx = layers.Conv2D(64, kernel_size = (3, 3), activation = 'relu', padding = 'same')(x)\nx = layers.MaxPool2D(pool_size = (2, 2))(x)\n# Fully Connected layer        \nx = layers.Flatten()(x)\nx = layers.Dense(256)(x)\nx = layers.Dropout(0.5)(x)\noutputs = layers.Dense(num_classes, activation=\"softmax\")(x)\n\nmodel = models.Model(inputs=inputs, outputs=outputs)\n\nmodel.summary()","2e7207b1":"# Compile Model\nopt = Adam(lr=0.001)\nmodel.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])","0bb85cb3":"STEP_SIZE_TRAIN=train_generator.n\/\/train_generator.batch_size\nSTEP_SIZE_VAL =val_generator.n\/\/val_generator.batch_size","efe6f775":"# Train Model\nhistory = model.fit_generator(train_generator,steps_per_epoch=STEP_SIZE_TRAIN,epochs=10, validation_data=val_generator, validation_steps=STEP_SIZE_VAL) #, callbacks=[checkpoint])","db073f5a":"plt.plot(history.history[\"accuracy\"])\nplt.plot(history.history['val_accuracy'])\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title(\"model accuracy\")\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"Epoch\")\nplt.legend([\"Accuracy\",\"Validation Accuracy\",\"loss\",\"Validation Loss\"])\nplt.show()","c55e8808":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title(\"epoch vs error\")\nplt.ylabel(\"Error\")\nplt.xlabel(\"Epoch\")\nplt.legend([\"train\",\"validation\"])\nplt.show()","24ff966a":"score = model.evaluate_generator(val_generator, steps=STEP_SIZE_VAL)\nprint('VAL loss :', score[0])\nprint('VAL accuracy:', score[1])","8637e85a":"import pandas as pd\ndf = pd.read_csv('\/kaggle\/input\/gtsrb-german-traffic-sign\/Test.csv')\ndf.head()","7bb67797":"from shutil import copyfile\nsrc_dir  = \"\/kaggle\/input\/gtsrb-german-traffic-sign\/\"\ntest_dir = \".\/Dataset\/Test\/\"\nfor i in range(len(df)):\n    if not os.path.exists(test_dir+str(df.iloc[i].ClassId)):\n        os.makedirs(test_dir+str(df.iloc[i].ClassId))\n    copyfile(src_dir+df.iloc[i].Path, test_dir+str(df.iloc[i].ClassId)+'\/'+df.iloc[i].Path[5:])","117f3814":"!mkdir -p Dataset\/Test","7af14ab2":"test_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntest_generator = test_datagen.flow_from_directory(\n    test_dir,\n    target_size=(30,30),\n    batch_size=32,\n    color_mode='rgb',    \n    shuffle=True,\n    seed=42,\n    class_mode='categorical')","e9c1f74a":"STEP_SIZE_TEST =test_generator.n\/\/test_generator.batch_size\n\nscore = model.evaluate_generator(test_generator, steps=STEP_SIZE_TEST)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","67ffc1e6":"## Evaluate Model","a6369afe":"## Data Augmentation","0c8220f2":"## GTSRB Dataset\nThe dataset features 43 different signs under various sizes, lighting conditions, occlusions and is very similar to real-life data. Training set includes about 39000 images while test set has around 12000 images. <br \/>\n![GTSRB](https:\/\/chsasank.github.io\/assets\/images\/traffic\/classes.jpg)","e8041b38":"## Build Model","09e1c5b4":"## Test Model","404eccc9":"# German Traffic Sign Recognition","889648da":"## Train Model"}}