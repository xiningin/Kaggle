{"cell_type":{"538ce8d4":"code","8e32afc0":"code","bbc566be":"code","fc5f8160":"code","b710e57c":"code","d4b3e74a":"code","88ebb6ad":"code","b719c36b":"code","c990f941":"code","d2315265":"code","aff58c4c":"code","00f56a95":"code","867432fe":"code","63292c91":"code","f015dd79":"code","0b7ecd8c":"code","c81f0586":"code","77afdb3f":"code","9058452e":"code","95d7aaee":"code","56e8f95f":"code","4ec71bcb":"code","2181ea53":"code","d3299eb2":"markdown","c9957751":"markdown"},"source":{"538ce8d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8e32afc0":"from PIL import Image\nimport os\nimport glob\nimport matplotlib.pyplot as plt\nimport cv2\nfrom keras.utils import to_categorical\nimport keras\n","bbc566be":"train = pd.read_csv(\"..\/input\/aptos2019-blindness-detection\/train.csv\")","fc5f8160":"\ndef convert_img(img):\n    desired_size = 224\n    im_pth = img\n\n    im = Image.open(im_pth)\n    old_size = im.size  # old_size[0] is in (width, height) format\n\n    ratio = float(desired_size)\/max(old_size)\n    new_size = tuple([int(x*ratio) for x in old_size])\n    # use thumbnail() or resize() method to resize the input image\n\n    # thumbnail is a in-place operation\n\n    # im.thumbnail(new_size, Image.ANTIALIAS)\n\n    im = im.resize(new_size, Image.ANTIALIAS)\n    # create a new image and paste the resized on it\n\n    new_im = Image.new(\"RGB\", (desired_size, desired_size))\n    new_im.paste(im, ((desired_size-new_size[0])\/\/2,\n                        (desired_size-new_size[1])\/\/2))\n\n    new_im.show()","b710e57c":"def convert_img(img):    \n    desired_size = 224\n    im_pth = img\n    im = Image.open(im_pth)\n    old_size = im.size  # old_size[0] is in (width, height) format\n\n    ratio = float(desired_size)\/max(old_size)\n    new_size = tuple([int(x*ratio) for x in old_size])\n    # use thumbnail() or resize() method to resize the input image\n\n    # thumbnail is a in-place operation\n\n    # im.thumbnail(new_size, Image.ANTIALIAS)\n\n    im = im.resize(new_size, Image.ANTIALIAS)\n    # create a new image and paste the resized on it\n\n    new_im = Image.new(\"RGB\", (desired_size, desired_size))\n    new_im.paste(im, ((desired_size-new_size[0])\/\/2,\n                        (desired_size-new_size[1])\/\/2))\n    return new_im","d4b3e74a":"x_train = [np.array(convert_img(\"..\/input\/aptos2019-blindness-detection\/train_images\/\"+i+\".png\")) for i in train.id_code]  ","88ebb6ad":"x_train = np.array(x_train)","b719c36b":"y_train = train.diagnosis","c990f941":"train.groupby(train.diagnosis).count()","d2315265":"y_train = to_categorical(y_train)","aff58c4c":"model = keras.applications.densenet.DenseNet121(include_top=True, weights=None)","00f56a95":"model.load_weights(\"..\/input\/densenet121\/densenet121.h5\")","867432fe":"x = model.layers[-2].output\nd = keras.layers.Dense(512,activation='relu')(x)\ne = keras.layers.Dense(5,activation='softmax')(d)","63292c91":"model1 = keras.models.Model(model.input,e)","f015dd79":"model1.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n","0b7ecd8c":"model1.fit(x_train,y_train,validation_split=0.10,epochs=20,class_weight={0:0.1,1:0.5,2:0.4,3:0.8,4:0.6})","c81f0586":"model1.fit(x_train,y_train,validation_split=0.10,epochs=10)\n","77afdb3f":"testdf = pd.read_csv(\"..\/input\/aptos2019-blindness-detection\/test.csv\")\ntestx = []\nfor i in testdf.id_code:\n    temp = np.array(cv2.resize(np.array(Image.open('..\/input\/aptos2019-blindness-detection\/test_images\/'+i+\".png\")),(224,224)))\n    testx.append(temp)\ntestx = np.array(testx)","9058452e":"result = model1.predict(testx)","95d7aaee":"res = []\nfor i in result:\n    res.append(np.argmax(i))","56e8f95f":"df_test = pd.DataFrame({\"id_code\": testdf[\"id_code\"].values, \"diagnosis\": res})\ndf_test.head()","4ec71bcb":"len(testdf)","2181ea53":"df_test.to_csv('submission.csv', index=False)\n","d3299eb2":"test_list = [[Image.open('..\/input\/aptos2019-blindness-detection\/train_images\/'+i+\".png\"),j] for i,j in zip(train.id_code[0:6],train.diagnosis[0:6])]    \nfor i,j in test_list:\n    plt.figure(figsize=(5,5))\n    i = cv2.resize(np.asarray(i),(224,224))\n    plt.title(j)\n    plt.imshow(i)\n    plt.show \n    convert_img(img)","c9957751":"import keras.backend as K\nimport tensorflow as tf\ndef _cohen_kappa(y_true, y_pred, num_classes, weights=None, metrics_collections=None, updates_collections=None, name=None):\n    kappa, update_op = tf.contrib.metrics.cohen_kappa(y_true, y_pred, num_classes, weights, metrics_collections, updates_collections, name)\n    K.get_session().run(tf.local_variables_initializer())\n    with tf.control_dependencies([update_op]):\n        kappa = tf.identity(kappa)\n    return kappa\n\ndef cohen_kappa_loss(num_classes, weights=None, metrics_collections=None, updates_collections=None, name=None):\n    def cohen_kappa(y_true, y_pred):\n        return -_cohen_kappa(y_true, y_pred, num_classes, weights, metrics_collections, updates_collections, name)\n    return cohen_kappa\nmodel_cohen_kappa = cohen_kappa_loss(num_classes=5,weights='quadratic')"}}