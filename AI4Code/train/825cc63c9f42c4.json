{"cell_type":{"737a35c6":"code","b058b120":"code","930441dd":"code","c044e770":"code","eaf2f4a6":"code","b6013970":"code","f9310a63":"code","0ca637c7":"code","121370f7":"code","beff9281":"code","97e2396a":"code","22a969f2":"code","bd675d7a":"code","5781fd65":"code","35bedb61":"code","f524e6ce":"code","a0c7f151":"code","3ea29bfd":"code","b8c3a5e6":"code","90aabe21":"code","6398298a":"code","7e186e29":"code","3aca1d12":"code","fda25ee2":"code","ad49e510":"code","fd025b83":"code","07b27497":"code","3ebc5ac1":"code","7551f677":"code","52619dba":"code","fe400399":"code","adfb45af":"code","ee8bcfe4":"code","61ef2d59":"markdown","9c5a5e34":"markdown","10fe327b":"markdown","0a5d0aba":"markdown","f5e932e2":"markdown","55ba1261":"markdown","b304b10e":"markdown","80ac2185":"markdown","b8a2e402":"markdown","feb8183f":"markdown","1c32757c":"markdown","8b2e6542":"markdown","0a2f7f55":"markdown","0ce6f818":"markdown","44d2090d":"markdown","9f2b6037":"markdown","dc0793be":"markdown","b0708f02":"markdown","d0b83730":"markdown","8f3d9c9f":"markdown","3c15231b":"markdown","9415dd08":"markdown","311f16d6":"markdown","72da3cdb":"markdown","435111b8":"markdown","dac37e09":"markdown","00d10b0f":"markdown","b24cecca":"markdown","dd4830ac":"markdown","0ec645eb":"markdown","24e46b8c":"markdown","76e9ab41":"markdown","76c63b7c":"markdown","fa4bfc1a":"markdown","ab25da66":"markdown","efbb2824":"markdown","ead10288":"markdown"},"source":{"737a35c6":"!pip install qiskit --upgrade","b058b120":"import qiskit\nqiskit.__qiskit_version__","930441dd":"from qiskit import IBMQ\n\n# use your account credentials instead\nIBMQ.update_account()","c044e770":"# loading your account\nIBMQ.load_account()","eaf2f4a6":"# Do the necessary imports\nimport numpy as np\nfrom qiskit.extensions import Initialize\nfrom qiskit import QuantumCircuit, QuantumRegister\nfrom qiskit import ClassicalRegister, execute, BasicAer, IBMQ\nfrom qiskit_textbook.tools import random_state, array_to_latex\nfrom qiskit.visualization import plot_histogram, plot_bloch_multivector","b6013970":"## SETUP\n# Protocol uses 3 qubits and 2 classical bits in 2 different registers\n\nqr = QuantumRegister(3, name=\"q\")    # Protocol uses 3 qubits\ncrz = ClassicalRegister(1, name=\"crz\") # and 2 classical bits\ncrx = ClassicalRegister(1, name=\"crx\") # in 2 different registers\nteleportation_circuit = QuantumCircuit(qr, crz, crx)\nteleportation_circuit.draw('mpl')","f9310a63":"def create_bell_pair(qc, a, b):\n    \"\"\"Creates a bell pair in qc using qubits a & b\"\"\"\n    qc.h(a) # Put qubit a into state |+>\n    qc.cx(a,b) # CNOT with a as control and b as target","0ca637c7":"qr = QuantumRegister(3, name=\"q\")\ncrz, crx = ClassicalRegister(1, name=\"crz\"), ClassicalRegister(1, name=\"crx\")\nqc = QuantumCircuit(qr, crz, crx)\n\nqc.h(1) # Put qubit a into state |+>\nqc.cx(1,2) # CNOT with a as control and b as target\n\nprint(qc.qasm())","121370f7":"## SETUP\n# Protocol uses 3 qubits and 2 classical bits in 2 different registers\nqr = QuantumRegister(3, name=\"q\")\ncrz, crx = ClassicalRegister(1, name=\"crz\"), ClassicalRegister(1, name=\"crx\")\nteleportation_circuit = QuantumCircuit(qr, crz, crx)\n\n## STEP 1\n# In our case, Telamon entangles qubits q1 and q2\n# Let's apply this to our circuit:\ncreate_bell_pair(teleportation_circuit, 1, 2)\n# And view the circuit so far:\nteleportation_circuit.draw()","beff9281":"print(teleportation_circuit.qasm())","97e2396a":"def alice_gates(qc, psi, a):\n    qc.cx(psi, a)\n    qc.h(psi)","22a969f2":"## SETUP\n# Protocol uses 3 qubits and 2 classical bits in 2 different registers\nqr = QuantumRegister(3, name=\"q\")\ncrz, crx = ClassicalRegister(1, name=\"crz\"), ClassicalRegister(1, name=\"crx\")\nteleportation_circuit = QuantumCircuit(qr, crz, crx)\n\n## STEP 1\ncreate_bell_pair(teleportation_circuit, 1, 2)\n\n## STEP 2\nteleportation_circuit.barrier() # Use barrier to separate steps\nalice_gates(teleportation_circuit, 0, 1)\nteleportation_circuit.draw()","bd675d7a":"def measure_and_send(qc, a, b):\n    \"\"\"Measures qubits a & b and 'sends' the results to Bob\"\"\"\n    qc.barrier()\n    qc.measure(a,0)\n    qc.measure(b,1)","5781fd65":"## SETUP\n# Protocol uses 3 qubits and 2 classical bits in 2 different registers\nqr = QuantumRegister(3, name=\"q\")\ncrz, crx = ClassicalRegister(1, name=\"crz\"), ClassicalRegister(1, name=\"crx\")\nteleportation_circuit = QuantumCircuit(qr, crz, crx)\n\n## STEP 1\ncreate_bell_pair(teleportation_circuit, 1, 2)\n\n## STEP 2\nteleportation_circuit.barrier() # Use barrier to separate steps\nalice_gates(teleportation_circuit, 0, 1)\n\n## STEP 3\nmeasure_and_send(teleportation_circuit, 0 ,1)\nteleportation_circuit.draw()","35bedb61":"# This function takes a QuantumCircuit (qc), integer (qubit)\n# and ClassicalRegisters (crz & crx) to decide which gates to apply\ndef bob_gates(qc, qubit, crz, crx):\n    # Here we use c_if to control our gates with a classical\n    # bit instead of a qubit\n    qc.x(qubit).c_if(crx, 1) # Apply gates if the registers \n    qc.z(qubit).c_if(crz, 1) # are in the state '1'","f524e6ce":"## SETUP\n# Protocol uses 3 qubits and 2 classical bits in 2 different registers\nqr = QuantumRegister(3, name=\"q\")\ncrz, crx = ClassicalRegister(1, name=\"crz\"), ClassicalRegister(1, name=\"crx\")\nteleportation_circuit = QuantumCircuit(qr, crz, crx)\n\n## STEP 1\ncreate_bell_pair(teleportation_circuit, 1, 2)\n\n## STEP 2\nteleportation_circuit.barrier() # Use barrier to separate steps\nalice_gates(teleportation_circuit, 0, 1)\n\n## STEP 3\nmeasure_and_send(teleportation_circuit, 0, 1)\n\n## STEP 4\nteleportation_circuit.barrier() # Use barrier to separate steps\nbob_gates(teleportation_circuit, 2, crz, crx)\nteleportation_circuit.draw()","a0c7f151":"print(teleportation_circuit.qasm())","3ea29bfd":"# Create random 1-qubit state\npsi = random_state(1)\n\n# Display it nicely\narray_to_latex(psi, pretext=\"|\\\\psi\\\\rangle =\")\n# Show it on a Bloch sphere\nplot_bloch_multivector(psi)","b8c3a5e6":"init_gate = Initialize(psi)\ninit_gate.label = \"init\"","90aabe21":"## SETUP\nqr = QuantumRegister(3, name=\"q\")   # Protocol uses 3 qubits\ncrz = ClassicalRegister(1, name=\"crz\") # and 2 classical registers\ncrx = ClassicalRegister(1, name=\"crx\")\nqc = QuantumCircuit(qr, crz, crx)\n\n## STEP 0\n# First, let's initialize Alice's q0\nqc.append(init_gate, [0])\nqc.barrier()\n\n## STEP 1\n# Now begins the teleportation protocol\ncreate_bell_pair(qc, 1, 2)\nqc.barrier()\n\n## STEP 2\n# Send q1 to Alice and q2 to Bob\nalice_gates(qc, 0, 1)\n\n## STEP 3\n# Alice then sends her classical bits to Bob\nmeasure_and_send(qc, 0, 1)\n\n## STEP 4\n# Bob decodes qubits\nbob_gates(qc, 2, crz, crx)\n\n# Display the circuit\nqc.draw()","6398298a":"backend = BasicAer.get_backend('statevector_simulator')\nout_vector = execute(qc, backend).result().get_statevector()\nplot_bloch_multivector(out_vector)","7e186e29":"inverse_init_gate = init_gate.gates_to_uncompute()","3aca1d12":"## SETUP\nqr = QuantumRegister(3, name=\"q\")   # Protocol uses 3 qubits\ncrz = ClassicalRegister(1, name=\"crz\") # and 2 classical registers\ncrx = ClassicalRegister(1, name=\"crx\")\nqc = QuantumCircuit(qr, crz, crx)\n\n## STEP 0\n# First, let's initialize Alice's q0\nqc.append(init_gate, [0])\nqc.barrier()\n\n## STEP 1\n# Now begins the teleportation protocol\ncreate_bell_pair(qc, 1, 2)\nqc.barrier()\n\n## STEP 2\n# Send q1 to Alice and q2 to Bob\nalice_gates(qc, 0, 1)\n\n## STEP 3\n# Alice then sends her classical bits to Bob\nmeasure_and_send(qc, 0, 1)\n\n## STEP 4\n# Bob decodes qubits\nbob_gates(qc, 2, crz, crx)\n\n## STEP 5\n# reverse the initialization process\nqc.append(inverse_init_gate, [2])\n\n# Display the circuit\nqc.draw()","fda25ee2":"# Need to add a new ClassicalRegister\n# to see the result\ncr_result = ClassicalRegister(1)\nqc.add_register(cr_result)\nqc.measure(2,2)\nqc.draw()","ad49e510":"backend = BasicAer.get_backend('qasm_simulator')\ncounts = execute(qc, backend, shots=1024).result().get_counts()\nplot_histogram(counts)","fd025b83":"print(qc.qasm())","07b27497":"#IBMQ.load_account()\n\nmy_provider = IBMQ.get_provider()\nmy_provider.backends()","3ebc5ac1":"def new_bob_gates(qc, a, b, c):\n    qc.cz(a, c)\n    qc.cx(b, c)","7551f677":"qc = QuantumCircuit(3,1)\n\n# First, let's initialize Alice's q0\nqc.append(init_gate, [0])\nqc.barrier()\n\n# Now begins the teleportation protocol\ncreate_bell_pair(qc, 1, 2)\nqc.barrier()\n# Send q1 to Alice and q2 to Bob\nalice_gates(qc, 0, 1)\nqc.barrier()\n# Alice sends classical bits to Bob\nnew_bob_gates(qc, 0, 1, 2)\n\n# We undo the initialization process\nqc.append(inverse_init_gate, [2])\n\n# See the results, we only care about the state of qubit 2\nqc.measure(2,0)\n\n# View the results:\nqc.draw()","52619dba":"# First, see what devices we are allowed to use by loading our saved accounts\nIBMQ.load_account()\nprovider = IBMQ.get_provider(hub='ibm-q')\nprovider.backends()","fe400399":"# get the least-busy backend at IBM and run the quantum circuit there\nfrom qiskit.providers.ibmq import least_busy\nbackend = least_busy(provider.backends(filters=lambda b: b.configuration().n_qubits >= 3 and\n                                   not b.configuration().simulator and b.status().operational==True))\njob_exp = execute(qc, backend=backend, shots=8192)","adfb45af":"# Get the results and display them\nexp_result = job_exp.result()\nexp_measurement_result = exp_result.get_counts(qc)\nprint(exp_measurement_result)\nplot_histogram(exp_measurement_result)","ee8bcfe4":"error_rate_percent = sum([exp_measurement_result[result] for result in exp_measurement_result.keys() if result[0]=='1']) \\\n                    * 100.\/ sum(list(exp_measurement_result.values()))\nprint(\"The experimental error rate : \", error_rate_percent, \"%\")","61ef2d59":"## 2. The Quantum Teleportation Protocol <a id='how'><\/a>\nTo transfer a quantum bit, Alice and Bob must use a third party (Telamon) to send them an entangled qubit pair. Alice then performs some operations on her qubit, sends the results to Bob over a classical communication channel, and Bob then performs some operations on his end to receive Alice\u2019s qubit.\n\n![teleportation_doodle](images\/tele1.jpg)\n\nWe will describe the steps on a quantum circuit below. Here, no qubits are actually \u2018sent\u2019, you\u2019ll just have to imagine that part!\n\nFirst we set up our session:","9c5a5e34":"#### Step 4\n\nBob, who already has the qubit $q_2$, then applies the following gates depending on the state of the classical bits:\n\n00 $\\rightarrow$ Do nothing\n\n01 $\\rightarrow$ Apply $X$ gate\n\n10 $\\rightarrow$ Apply $Z$ gate\n\n11 $\\rightarrow$ Apply $ZX$ gate\n\n(*Note that this transfer of information is purely classical*.)","10fe327b":"Again, there is a rendering issue with the `inverse_init_gate` (called 'disentangler' on the circuit diagram), but we can clearly see the gate appearing in the image. Finally, we measure the third qubit and store the result in the third classical bit:","0a5d0aba":"## 3. Simulating the Teleportation Protocol <a id='simulating'><\/a>","f5e932e2":"#### Step 3\n\nAlice measures the first two qubit (which she owns) and sends them as two classical bits to Bob. The result she obtains is always one of the four standard basis states $|00\\rangle, |01\\rangle, |10\\rangle,$ and $|11\\rangle$ with equal probability.  \n\nOn the basis of her measurement, Bob's state will be projected to, \n$$ |00\\rangle \\rightarrow (a|0\\rangle + b|1\\rangle)\\\\\n|01\\rangle \\rightarrow (a|1\\rangle + b|0\\rangle)\\\\\n|10\\rangle \\rightarrow (a|0\\rangle - b|1\\rangle)\\\\\n|11\\rangle \\rightarrow (a|1\\rangle - b|0\\rangle)$$.","55ba1261":"If the quantum teleportation circuit works, then at the end of the circuit the qubit $|q_2\\rangle$ will be in this state. We will check this using the statevector simulator.","b304b10e":"As you have worked with the Quantum Teleportation's implementation, it is time to understand the mathematics behind the protocol.\n\n#### Step 1\n\nQuantum Teleportation begins with the fact that Alice needs to transmit $|q\\rangle = a|0\\rangle + b|1\\rangle$ (a random qubit) to Bob. She doesn't know the state of the qubit. For this, Alice and Bob take the help of a third party (Telamon). Telamon prepares a pair of entangled qubits for Alice and Bob. The entangled qubits could be written in Dirac Notation as:\n\n$$ |\\psi \\rangle = \\frac{1}{\\sqrt{2}} (|00\\rangle + |11\\rangle) $$\n\nAlice and Bob each possess one qubit of the entangled pair (denoted as A and B respectively),\n\n$$|\\psi\\rangle = \\frac{1}{\\sqrt{2}} (|0\\rangle_A |0\\rangle_B + |1\\rangle_A |1\\rangle_B) $$\n\nThis creates a three qubit quantum system where Alice has the first two qubits and Bob the last one.\n\n$$ \\begin{align*}\n|q\\rangle \\otimes |\\psi\\rangle &= \\frac{1}{\\sqrt{2}} (a |0\\rangle \\otimes (|00\\rangle + |11\\rangle) + b |1\\rangle \\otimes (|00\\rangle + |11\\rangle))\\\\\n&= \\frac{1}{\\sqrt{2}} (a|000\\rangle + a|011\\rangle + b|100\\rangle + b|111\\rangle) \n\\end{align*}$$","80ac2185":"And voila! At the end of this protocol, Alice's qubit has now teleported to Bob.","b8a2e402":"This notebook demonstrates quantum teleportation. We first use Qiskit's built-in simulators to test our quantum circuit, and then try it out on a real quantum computer.\n\n## Contents\n\n1. [Overview](#overview)    \n2. [The Quantum Teleportation Protocol](#how)       \n3. [Simulating the Teleportation Protocol](#simulating)   \n    3.1 [How will we Test this Result on a Real Quantum Computer?](#testing)   \n    3.2 [Using the Statevector Simulator](#simulating-sv)     \n    3.3 [Using the QASM Simulator](#simulating-qs)  \n4. [Understanding Quantum Teleportation](#understanding-qt)\n5. [Teleportation on a Real Quantum Computer](#real_qc)    \n    5.1 [IBM hardware and Deferred Measurement](#deferred-measurement)    \n    5.2 [Executing](#executing)    \n6. [References](#references)\n\n","feb8183f":"### 5.1 IBM hardware and Deferred Measurement <a id='deferred-measurement'><\/a>\n\nThe IBM quantum computers currently do not support instructions after measurements, meaning we cannot run the quantum teleportation in its current form on real hardware. Fortunately, this does not limit our ability to perform any computations due to the _deferred measurement principle_ discussed in chapter 4.4 of [1]. The principle states that any measurement can be postponed until the end of the circuit, i.e. we can move all the measurements to the end, and we should see the same results.\n\n![deferred_measurement_gates](images\/defer_measurement.svg)\n\nAny benefits of measuring early are hardware related: If we can measure early, we may be able to reuse qubits, or reduce the amount of time our qubits are in their fragile superposition. In this example, the early measurement in quantum teleportation would have allowed us to transmit a qubit state without a direct quantum communication channel.\n\nWhile moving the gates allows us to demonstrate the \"teleportation\" circuit on real hardware, it should be noted that the benefit of the teleportation process (transferring quantum states via classical channels) is lost.\n\nLet us re-write the `bob_gates` function to `new_bob_gates`:","1c32757c":"In this notebook, we will initialize Alice's qubit in a random state $\\vert\\psi\\rangle$ (`psi`). This state will be created using an `Initialize` gate on $|q_0\\rangle$. In this chapter we use the function `random_state` to choose `psi` for us, but feel free to set `psi` to any qubit state you want.","8b2e6542":"Let's say Alice owns $q_1$ and Bob owns $q_2$ after they part ways.\n\n#### Step 2 \n\nAlice applies a CNOT gate to $q_1$, controlled by $\\vert\\psi\\rangle$ (the qubit she is trying to send Bob). Then Alice applies a Hadamard gate to $|\\psi\\rangle$. In our quantum circuit, the qubit ($|\\psi\\rangle$) Alice is trying to send is $q_0$:","0a2f7f55":"Let's create our initialization gate to create $|\\psi\\rangle$ from the state $|0\\rangle$:","0ce6f818":"You can run this cell a few times to make sure. You may notice that the qubits 0 & 1 change states, but qubit 2 is always in the state $|\\psi\\rangle$.","44d2090d":"#### Step 1\nA third party, Telamon, creates an entangled pair of qubits and gives one to Bob and one to Alice.\n\nThe pair Telamon creates is a special pair called a Bell pair. In quantum circuit language, the way to create a Bell pair between two qubits is to first transfer one of them to the X-basis ($|+\\rangle$ and $|-\\rangle$) using a Hadamard gate, and then to apply a CNOT gate onto the other qubit controlled by the one in the X-basis. ","9f2b6037":"## 6. References <a id='references'><\/a>\n[1] M. Nielsen and I. Chuang, Quantum Computation and Quantum Information, Cambridge Series on Information and the Natural Sciences (Cambridge University Press, Cambridge, 2000).\n\n[2] Eleanor Rieffel and Wolfgang Polak, Quantum Computing: a Gentle Introduction (The MIT Press Cambridge England, Massachusetts, 2011).","dc0793be":"## 4. Understanding Quantum Teleportation <a id=\"understanding-qt\">","b0708f02":"### 3.2 Using the Statevector Simulator <a id='simulating-sv'><\/a>\n\nWe can use the statevector simulator to verify our qubit has been teleported.","d0b83730":"And create our new circuit:","8f3d9c9f":"and create our quantum circuit:","3c15231b":"### Updating your IBM Quantum Experience credentials","9415dd08":"We can see we have a 100% chance of measuring $q_2$ (the leftmost bit in the string) in the state $|0\\rangle$. This is the expected result, and indicates the teleportation protocol has worked properly.","311f16d6":"This operation has the property:\n\n$$ |\\psi\\rangle \\xrightarrow{\\text{Inverse Initialize}} |0\\rangle $$\n\nTo prove the qubit $|q_0\\rangle$ has been teleported to $|q_2\\rangle$, if we do this inverse initialization on $|q_2\\rangle$, we expect to measure $|0\\rangle$ with certainty. We do this in the circuit below:","72da3cdb":"### 3.1 How Will We Test the Protocol on a Quantum Computer? <a id='testing'><\/a>","435111b8":"![Summary](https:\/\/raw.githubusercontent.com\/praveentn\/ml-repos\/master\/Quantum\/images\/qtele-11.png)","dac37e09":"#### Step 4\n\nBob, on receiving the bits from Alice, knows he can obtain the original state $|q\\rangle$ by applying appropriate transformations on his qubit that was once part of the entangled pair.\n\nThe transformations he needs to apply are:\n\n![title](images\/teleportation-transformation.png)\n\nAfter this step Bob will have successfully reconstructed Alice's state.","00d10b0f":"#### Step 3\n\nNext, Alice applies a measurement to both qubits that she owns, $q_1$ and $\\vert\\psi\\rangle$, and stores this result in two classical bits. She then sends these two bits to Bob.","b24cecca":"#### Step 2\n\nNow according to the protocol Alice applies CNOT gate on her two qubits followed by Hadamard gate on the first qubit. This results in the state:\n\n$$ \n\\begin{align*} (H \\otimes I \\otimes I) (CNOT \\otimes I) (|q\\rangle \\otimes |\\psi\\rangle)\n&=(H \\otimes I \\otimes I) (CNOT \\otimes I) \\frac{1}{\\sqrt{2}} (a|000\\rangle + a|011\\rangle + b|100\\rangle + b|111\\rangle) \\\\\n&= (H \\otimes I \\otimes I) \\frac{1}{\\sqrt{2}} (a|000\\rangle + a|011\\rangle + b|110\\rangle + b|101\\rangle) \\\\\n&= \\frac{1}{2}  (a(|000\\rangle + |011\\rangle + |100\\rangle + |111\\rangle) + b(|010\\rangle + |001\\rangle - |110\\rangle - |101\\rangle)) \\\\\n\\end{align*}\n$$\n\nWhich can then be separated and written as: \n\n$$\n\\begin{align*}\n= \\frac{1}{2}(\n & \\phantom{+} |00\\rangle (a|0\\rangle + b|1\\rangle) \\hphantom{\\quad )} \\\\\n & + |01\\rangle (a|1\\rangle + b|0\\rangle) \\hphantom{\\quad )}\\\\[4pt]\n & + |10\\rangle (a|0\\rangle - b|1\\rangle) \\hphantom{\\quad )}\\\\[4pt]\n & + |11\\rangle (a|1\\rangle - b|0\\rangle) \\quad )\\\\\n\\end{align*}\n$$","dd4830ac":"### 5.2 Executing <a id='executing'><\/a> ","0ec645eb":"# Quantum Teleportation","24e46b8c":"As we see here, there are a few results in which we measured $|1\\rangle$. These arise due to errors in the gates and the qubits. In contrast, our simulator in the earlier part of the notebook had zero errors in its gates, and allowed error-free teleportation.","76e9ab41":"## 1. Overview <a id='overview'><\/a>","76c63b7c":"At the time of writing, there is a rendering issue with the `Initialize` gate in the image above, but the circuit operates just fine. We can see below, using our statevector simulator, that the state of $|q_2\\rangle$ is the same as the state $|\\psi\\rangle$ we created above, while the states of $|q_0\\rangle$ and $|q_1\\rangle$ have been collapsed to either $|0\\rangle$ or $|1\\rangle$. The state $|\\psi\\rangle$ has been teleported from qubit 0 to qubit 2.","fa4bfc1a":"and we run our experiment:","ab25da66":"### 3.3 Using the QASM Simulator <a id='simulating-qs'><\/a>\n\nQuantum teleportation is designed to send qubits between two parties. We do not have the hardware to demonstrate this, but we can demonstrate that the gates perform the correct transformations on a single quantum chip. Here we use the QASM simulator to simulate how we might test our protocol.\n\nOn a real quantum computer, we would not be able to sample the statevector, so if we wanted to check our teleportation circuit is working, we need to do things slightly differently. You will remember that we used `Initialize` to turn our $|0\\rangle$ qubit into the state $|\\psi\\rangle$:\n\n$$ |0\\rangle \\xrightarrow{\\text{Initialize}} |\\psi\\rangle $$\n\nSince all quantum gates are reversible, we can find the inverse of Initialize using:","efbb2824":"## 5. Teleportation on a Real Quantum Computer <a id='real_qc'><\/a>","ead10288":"Alice wants to send quantum information to Bob. Specifically, suppose she wants to send the qubit state\n$\\vert\\psi\\rangle = \\alpha\\vert0\\rangle + \\beta\\vert1\\rangle$. \nThis entails passing on information about $\\alpha$ and $\\beta$ to Bob.\n\nThere exists a theorem in quantum mechanics which states that you cannot simply make an exact copy of an unknown quantum state. This is known as the no-cloning theorem. As a result of this we can see that Alice can't simply generate a copy of $\\vert\\psi\\rangle$ and give the copy to Bob. We can only copy classical states (not superpositions).\n\nHowever, by taking advantage of two classical bits and an entangled qubit pair, Alice can transfer her state $\\vert\\psi\\rangle$ to Bob. We call this teleportation because, at the end, Bob will have $\\vert\\psi\\rangle$ and Alice won't anymore."}}