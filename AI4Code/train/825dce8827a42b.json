{"cell_type":{"c8d70017":"code","347d1607":"code","5b2f8ef9":"code","23110621":"code","fe780ce9":"code","a01d3774":"markdown","7c37b7bd":"markdown","e5f53d97":"markdown","29e0ebb6":"markdown"},"source":{"c8d70017":"!pip install keras-tuner","347d1607":"import tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\nimport warnings\nwarnings.simplefilter(\"ignore\")\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \nprint('TensorFlow version: ',tf.__version__)","5b2f8ef9":"#dataset\nfashion_mnist=keras.datasets.fashion_mnist\n(train_images,train_labels),(test_images,test_labels)=fashion_mnist.load_data()\n\n#Scaling Images\ntrain_images=train_images\/255.0\ntest_images=test_images\/255.0\nprint('\\n','#'*50)\nprint('\\nTotal train images %s of shape %s'%(str(train_images.shape[0]),str(train_images[0].shape)))\nprint('\\nTotal test images %s of shape %s\\n'%(str(test_images.shape[0]),str(test_images[0].shape)))\n\n# Reshaping Data\ns=train_images.shape\ns1=test_images.shape\ntrain_images=train_images.reshape(s[0],s[1],s[2],1)#gray image\ntest_images=test_images.reshape(s1[0],s1[1],s1[2],1)#gray image\n\ndef build_model(hp):\n    # create model object\n    model = keras.Sequential([\n    #adding first convolutional layer    \n    keras.layers.Conv2D(\n        #adding filter \n        filters=hp.Int('conv_1_filter', min_value=32, max_value=128, step=16),\n        # adding filter size or kernel size\n        kernel_size=hp.Choice('conv_1_kernel', values = [3,5]),\n        #activation function\n        activation='relu',\n        input_shape=(28,28,1)),\n    # adding second convolutional layer \n    keras.layers.Conv2D(\n        #adding filter \n        filters=hp.Int('conv_2_filter', min_value=32, max_value=64, step=16),\n        #adding filter size or kernel size\n        kernel_size=hp.Choice('conv_2_kernel', values = [3,5]),\n        #activation function\n        activation='relu'\n    ),\n    # adding flatten layer  \n    # The Flatten layer flatten the input, \n    # Example: if the input is (batch_size,4,4)  then output is (batch_size,8).  \n    keras.layers.Flatten(),\n    # adding dense layer    \n    keras.layers.Dense(\n        units=hp.Int('dense_1_units', min_value=32, max_value=128, step=16),\n        activation='relu'\n    ),\n    # output layer    \n    keras.layers.Dense(10, activation='softmax')\n    ])\n    #compilation of model\n    model.compile(optimizer=keras.optimizers.Adam(hp.Choice('learning_rate', values=[1e-2, 1e-3])),\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n    return model\n\n#importing random search\nfrom kerastuner import RandomSearch\n\n#creating randomsearch object\ntuner = RandomSearch(build_model,\n                    objective='val_accuracy',\n                    max_trials = 5)\n\n# search best parameter\ntuner.search(train_images,train_labels,epochs=3,validation_data=(train_images,train_labels))","23110621":"model=tuner.get_best_models(num_models=1)[0]\n#summary of best model\nmodel.summary()","fe780ce9":"from tensorflow.keras.models import load_model\nmodel.fit(test_images,test_labels,\n          epochs=10,\n          validation_split=0.1,initial_epoch=3)\n# save model\nmodel.save('Model.h5')\nprint('\\nModel Saved!\\n')\n \n# load model\nsavedModel=load_model('Model.h5')\nprint('\\nModel loaded!\\n')\nsavedModel.summary()","a01d3774":"# Import ","7c37b7bd":"![Plot-of-a-Subset-of-Images-from-the-Fashion-MNIST-Dataset.png](data:image\/png;base64,UklGRtorAABXRUJQVlA4TM4rAAAv\/8TvALenoG0bpi1\/3GcHgICgRCIgKJHMv4AkoQN2A5UYp2cJG7yFi7H3HatnEBxIbtsIkiT\/\/9flSmpmdu8RMQF0\/+lQKJwtALNEoDChThJlw6FHb9wyQQM4Z29lk5t15szbPvBAbQ50pwGHzRf0BlipD6zsJ9FbVEA1urI9f+J5WHeZ0d8oUy37dj0oPg6AnXphbI3K9FGUqtrQqDmcsgwvSy6qdDW7OJ54eAFVAKUndM+L\/3U8Tv\/\/3kqzbdvee+8E2xiK5TSk2FI0dsaCnMauGMbeOBlD7EpiO\/G0dz2DvTEGC50AbqQPFtoGNtgrxYp\/wDmfY31+a29cv42zcq6I\/nuCZFuWJEmSDsboMchl+cyXY7jwvvyBeeErkiTbtm3bavy5DBSDxKthmChmk1ZbzWphkT5q7x7Rf0+sbcuSJEnSegABRPhs3QbJiPibkTx7dyDt2vZCkp617cbatm3btm3btm1198zatm3b7vyA7iTzntrJeafmU0T\/4TCSpEjKso757mE5VWf8UPen4X\/qv\/qv\/qv\/6r\/6r\/6r\/+q\/+q\/+q\/\/qv\/qv\/qv\/6r\/6r\/6r\/+q\/+q\/+q\/\/qv\/qv\/qv\/6r\/6r\/6r\/xrG5Em\/bHGTFJr6LXL3UY0ObyJIyfogcvdRDY7LcRF\/\/MmDHYFsXyN3H9XcKIvoJ0UgU4AxkbuPamycBTqLIP+yI8lvCsubm1taS0pLc\/P\/slt1i4YCp+VrMBHYR3tul5o\/s1t1i0oh3h+Zk8BIfrnLqqmRHHmEzAegIYWWcstfPlU7Y3B0MrpjL+yOo6I7cQU2Rsdhq26BvtgqarO4sY\/Gmmj\/rbpEP4Dq6nWIh6I6nilpLrd8Dlp1NVSdPTEsOhf7w5\/yc\/SKnsD12BQlsFVfxtbwfWnbqM3ixj4Ja6H9t+oSvQEaq6RELh1QU3IZoKqcAd4zCfEUaKniRkZ+oVX1NcB7JjAP\/O4YoOoqH3yfLPVlQlpL7h8eoKrcywO8Z+Ts9Mf4hVbVF+0942unnzvklwGqHvtztjtuwmy8g9boY\/xQrXfxNlbgvegRdEHN2qqvKD7OxgxMil7FEDyL1zA6motbcQJWFTJEP+z+Xn6hVdVQs7ZqapzRjruZ+De\/0KpqqFlbNTVEKc20OzBK8AutqoaatVVj42IcxJ9w6lAnIMsXhoFV9VCrtmpuiN0JISXLPcEwsKoeatVWDQ7xuG+WuIkLTv4mOIZVVUSN2qrK9rlYBlXVRG3aqv\/hajMb44VoHubDjjAR46KxmAAb65tojt4obFo0Cz7Ix1ETs7KwUx6J8dECfAUf7qdYGD2I3+NYNPxP2\/f8z9dthMOj4uW22S68VsvU5AzD7MhGOg7NsI7xGRupfXhcZkK1rNo67Dd7QtDJ+AMow+3h+5LbYxoein6DU\/BHNPxP\/fc2aA2YXXETrooOxP6our\/6aPwTnwo+2NVrY\/bFbIyPJqacu3bk96voGyzF11iG5dF3cID4I0yJJqYc+r4Zgo5Bb9BIf41eOB9HoEfktPYZOJz\/WaLhf+q\/t0Frw\/SBK4O+EN2A23EltonabAey66OmdobLsBCTIzfLFFjHOTgi6gZf6t2xD7pENveDcAnmRc2YjDlwHVZBNlJzbOZ3cLO5lY+LLO90OHfd8D\/1Xz1VYOt+fIwp0Us4Dw\/g0egCHIxtcBSujXzGbxJsVBszAc46T4scgX4blme5h0aO+lrOuXBi+PfRYbAtW+bsyH77FqbDqe7dozKLT9+TQBnmuGr1xGlwDrvhf+q\/dBfAf4CDdC2YFb2TehxXRf1Tg3ALeL08g0OCX9bGLMcszIhsfcaWaFZES\/B3+HCfw7eR5UyC4UG9CzMVzh+eFpVZnDd0cjDttz1xPE4oyjdBy2v4n\/qv\/i6rFZXPF7+f+iBahJbU29FMVGjHcHnCsZHV18TO0AUL8VbGfuvSf3nH3CvqjN9gU2yGDaONcCjM8Mg3uxlwDts6HojKLKfAztkzsqHm\/bYXToos6yxYVsP\/1H\/1VIGsoVgAX+stUSs+gnXMj\/LD8J0L2\/PS6FnUxPgO4i\/azIgceXbzvIH9cFjkwPCpcFL4aBwauRLon2BnmBw5C+\/W9V1uNqZGZZbT4PagkVbor6iQjHGr\/ntPXntGVE0GtNYTWtcZ01k3lGlAVa2BsuaE9EQKA38ndYk3\/CyDquoMlTUo3JXDYCiQb8PZDfmAYSyDquoMlTUlRnpeiUd67kVHwe9CiG8FEf0+x7CqKmNlzcklYdENOCVdgVNAD46PwqqqfAkra2j4ncgm5GSFy88wsKrGYFkz4wHQWaET8NBkRsOGOgu8xMdhCGZk649ahh3Bfmt7WhI1o1IGq9oXr8Pf5CfRV\/AX7nb5Dt9ElrcU1mF530ffwHI+wxuRD873RIe+fa5cEhUKLOsrc966V8Y+a3plirfl87BqEC8wU2EG4GMYWFVjsKyZsRDYorAFWCRI29295DJA1bILLOtD75mAmAKow6yGANP0AzmoKbkMULXsgs368XUFxFjgoMJBYBzDwKoag2V9SF4eGN4xQNUO5b946EleXmb4KANU7VD+w5m5xBPBPZlnuz82pNb\/l62yzh0+7SsBp6c22BleO6Wv9VnRKDwJ2\/PUKD8zfla9EP+KpmG\/oGtT0+egVTfD\/tHDcBTaFjgVbKZ\/oc1OLMxEjMX06H9RdWcoo7nDJDgbhRtshRTtyw6\/H4UrsG60\/d87cWgG3c8Gp59hYFWNwbKGhZqu2lE3uwmGgVU1BssaGneUSXd8L4jodzmGVVUZK2tIHF+5cuVUoMTKQORrMhjIt\/HcxnzAEMExrKrKWFlDojU0gcy\/dpDT\/h\/LoKo6Q2WNDCW+2o6YjtohQrAMqqozVFZlS16tK\/uBtp6FJbCR+FNIhfNJjLlI9zucV+28Xb9oMHoEezc1fc5dtRscBfR96S2wmSZ7mK6pSUjL8u3Kds1Gd1CupnWGVxUXp6BXYdX24fxoXc8Fc4f1X\/1XR5fCp8DuF\/gYDlQvBmV8jvdho50VteBDvJuaFv0JNbUzrIb07aor7JROSltHeqZM7LNtFuexycnIz5We18K1xBIHp6PNU3gsu+F\/6r96sHjJK2BHWAerR01t5RMshJ3STjovmg0Hq5275q8TNIvwNmbhh+go1OTOkPa4DeCE9HjYUEnaXyfnSc\/a3aQUyTdXfuH0xWwI4x8WWDh5WWmcv3YVV16g9V\/9Vw+VIpfIop0ciP8GL3XnrKfAgWob66xoKtwde7qjdWN7zg\/Ld0n0MGppim\/01TES4\/AG0n47SWk90yLLsHtPA1vRC0VRwtkSp+F4FD7OkJMyeb+1DpcaZr\/r9V\/9VxeVqm2OLugZubPu4bDBzsG8yDlr564nwA4xI3IZVhvph3ghGoZv0uPt+ACfRrbj2pq00Ra+HLf5H1g5JVPhMl2kpke+q9m9LWtu5IWiyJfQLcFshXzuuvBxhxRPynAROOq\/pq4HXo98sebnuoQyLMuXfH7ShqdFNoqHsRSjMTlysPCH1NzINuxjdzzRJv9+tAxlEt9J7JgTsz840I3sOoNVxydBM+ZFR6CEsy0Kp\/q5w3Te8GT0ATc3ZP1X\/9VHZfU1Al+N2Smvm1+h12Xss5MKmxN9jmNxF3zYiyIfnHPG92FkNB02eRfOm4fWaAFq+n6H0+Tn3WRatpJghTLSPmzSE2nscyI9uhNvlKZ8AcoSzHY4Bem6g73aivPW5lzsFNV\/9V99VE48I\/gA4yJ7nb1tUcZR6K\/hCPQYpNd07AscgsPRN7ocT2A2PPzg9FG0pOZH\/k52CrYrhfhGU2F\/w0j7a7qK7QzrmJ6xTY8Fcey4hLMzTkPhhVafxjKdu941WrYL46u6YsbL3PoYxQyANFBVa6CsMVFap5LkF8UMgDJUVWeorCGREY7eW8+emuEEmlLMAChDVXWGyhoS1Tf9FcG8zQIco5gBMMaqqoyVNSQvazfZaC+KGQDjS1hVlS9hZQ2Lr0B1khkAYbCqxmBZs+I9UJO0ZWCFwaoag2XNiu3AAAvNAPz2iCA9Ol3LcIXU9LWdX0CLV\/EvTI4c8Z0J57B96bdGS\/EZ0styaz\/J561t9nMj997+u+DX\/xdY1ZfkLHyeaVEet66D1mm\/9af43vhu1Bf5GrBtEVjWV\/Qz+MZTodG2seLX35bblWDn\/hUGzllmBqDkMkBVO7CsD\/29k+fCNKCudWYASi4DVLWDzfrxdcXCkehI+YpmBkAYrKoxWNaguJ4EsY5YaAag5DJAVTuwrDl58tCBaNutNANQchmgqh1Y1phc8jwDoqwmmwEQBqtqDJY1Jd7mAOaJIBYOGbdX92Aihka+OH0t21BfjUbA8kbBTvFWVGGAEHbKj5F27\/GwcbwWvYwX8QysJz3chEuDPv+XV65K+9yhR85a9dyh85mF9zvs25dvpTOjS9EegWV9RXvC826SdtI2T379ubjJT7btU35gkhBkMwDCYFWNwbJmxLcS8iQ6yGYAhMGqGoNljYhflYHeIgDVDIAxVlVlrKwZUQ8or0qauUMxA2CMVVUZK2tGQJt0BDMAylBVnaGyJgbBDIAyVFVnqKzKtrmkgaoag1XNFvXH7MgX5xA8jaGRg9N2BGd6bdPZnm9nWNYEWPaYaCQsJz3eVJv6C3gAg0E79sHF533PUugMxQ8ohExOmemZKemTIL3uFleghNMVp+E4eN1Z25pJ66j\/6r+6qOQOj4bDF6ut8PnI0efn4Qi0668Oi6x+GOzm45D+IYHTUzOiYal82Pud6CnQGUph7trNM7WovC3PSFUdyvENN\/8dlGCqwv0OpxPU1V931t5RPn9t9z4oqv\/qv\/qorFblmO0hSO+Qzk\/gntK\/xDIsyeTrrvpTaOZD8M\/Uy5Hz1v\/AEzgLv4rsDGUUJ6gLz137tuXQ+4xMhWVY4RK65C8o4ZTF2Ugnp+23xc8\/TDpnbb+1i+8X1X\/1Xz1U2n2f1b9BFzjLSlmd0bSSKsHO4HS7mYg3ovFw\/jrfD3vhoxZJ\/zbOq1Di1922D\/wpJ2d6I9\/Beprz0Recd5j6rwBKwbkj7LBlGBzbfAsfRh\/jUywp6nNYh9XPjx5DTd7v8MpiXRyOU6I\/4zycm+ob2bWPQPrpd6j\/6r9fH\/z4Xn9\/xyBcixszAzEAfwFl9Ec\/XIJro+IfFIgSy9NusLg59kKPVKfIrl34UdV\/vz\/VUm5pqf1b9Upcg0vxXxkb60W4EJTh4IgrQrm+1KXR71CTt+qLr02xG\/ZO7Ritg5XvNbNTvrOr46fdrfprikdn10lzU1Nza61y9D+Slubm5avMW3W0rKfnLsqi\/wFaa9qvJCFVpbLWf\/VfkL39rfqv\/qtT7mW2gxmkNy\/\/Va9ltoMZpTcv\/lVvZbaDGaU3L\/5Vb2W2g5mlNy+7VVcGN9vBTi2z9OZlt+rK0GY72DGG6c3LbtWNoc12pmMM05uX3aobQ5vtUccYpjcvu1U3hjbbrY4xTG9edqtuDG22bx1jmN687FbdGNpsBzvGML152a16rQ+G6c3LbtVrfdkwvXnZrXqtP2aY3rzsVr3Wzx0apjcvu1U3hjbbwY4xTG9edqtuDG22gx1jlt687Fbd\/n1VnzLbwY4xS29edquu\/76qT5jtYOcYpTcvu1Uv4L6qP5\/tYOcYpTcvu1Uv4L6qP57tYAcZpDcvu1Xv4L6qj353i8\/p1tFvxpHdqju9r6rvd\/fJbtWdfq7aV3arbvn36v46zqWkoZKlSqbI6YEN0R398XL0DP4TK8+xOw5QdQjbpF\/fHB2PrboFjsbg6F5choswAC9GV8Hjby3D486c\/HfTX\/H\/uwDplbRRskPJMjkHY2Psj4F4MxqDPlhp8jlA1SFsD4\/quAS36tP\/Bmm3xkkYFj2D62C\/vQXjo9uwHqr+HTyx6nbvq\/XxdckZoOpQSmSrytnpfVV90arOqUS2amAefJ8MUHWVD75Ptnxf1U+5lweoOtTLJbJV5ez0x3zRqs6pVm9VXzv93OFLODx6DS9iKMyw6H04KpHfQdVjoiHw0czEoKgdQ6v6ioZjMl5Hp6j6Rpve9LNjsQHI5FXbvt9uGdlI86s87nZpjr7ED6lvMC+qcBZXMQx\/jTZDO2zVnd5X1Ret6tjGrOprp\/dV9UWrOrYxqwbEU+5N6YtWdWxjVk2IJ9ybUhis6tymrJoRP783pTBY1blNWTUjfnxvSmOsqoMbsqqyfS5lqKqTm7FqAnXG49HNuAv3wDoGRc+nnsXTeCCy6jtwDSjLb4CqEs4otOJDLIkWw82VXwQhqpyFafCsvpVg8tfMW9FIDMVL8MXxRORL6DE8DF8kD0VD4KPwvXJs9Cp6ouF\/ijufhbdGxifhI3gA5FZchRtxPW7ODIRlDYiehHcIdYnGt6n8IzH+QbQCljkGn+PdaC5GoEzSZp7CiMgFBZ2ZfQFP48nIfns\/fHe7D5T3HJ5PpQO5jiNuiIb\/qf\/qsbI\/BkeD4IS0DXZg5jrckTLXFTUAN0clPnf9dyxC+oFLz\/8QDTuF9cyM8g+9SYlmO4zJlrd0ztqO+Qpc1XF4ZBmW9TIcrGYruu7gaPjulg5z+9h7o+F\/6r+6orS5CyPHSG2g9mHnsB2chnPX\/WC7pjzLscH6U+6K\/KsFSzhn4H2Yt6Ov0RVmGd6KXJ71NZRo9sIsjIzslPntu5Pe3rQVbn6ewh85gPRDsV7hq9Ml4yKvvuk9hIb\/qf\/qitJe5sKnkYPWLqx6ZXRh6hKcj4ujy2F7dor724MELOxQtMLX+JxoPvIv1JbZeDd6D0+jRHMSfJGkt++\/m8cW+Sruiq7AeTgLPprjIgepfcWZidEU+CBdQ7jhf4q6wp9Gt+2Qx0HDfhlzeYpyLM\/cji9\/Mojrgnlwti39ut6r8DW1lzaW5sj2\/AxKeL\/DO4BG6njmnqj6ttTZAjtiD3SLdi38AQMhDn3OwUQ0\/E\/9V0+UlebOsHgALih4cWS\/7YOLcTb6R7Zhq3Y829+2WAGTroiXf13tpaO\/jh0PRonmb7gJh0V\/wP7w7cu3KzaX+xt+Ao\/Dtk0ZL8Gt+xp2j7ZHfnteNPxP\/VdHlgHpoYGkOxjuC9dZ\/TNOBbHPGr8KWgysLIwdwvnq1DupydEC3IUSze9wA+6LnEP3WX4IeiL9HwKuxnVI\/6ZGyzsRh+PB6G742H1ObI5fTLz2jKiaDGgtKM24lAaqag2UNScQjAylGZfKUFWdobIGhbuyDKUZl8pQVZ2hsqbESM8rzVcXGqUZl8ZYVZWxsubkEg2UZlwaX8KqqnwJK2tgkJpxKQxW1Rgsq5b7mrt46U2JeAaeRjp3bZ+1sdqHncNOy7seB+Pbk3B+gMdUy1sO81aU91v\/9L107nohHD8uHKO5i5d\/nVs9Ew3FZBQ+sXb5bbvoXu0\/QnqzL1r1p3glegS2ZV+oTjUtFqkZl8JgVY3BsuaFZc24lDNA1b2xqneY2WBdMy7lDFDVDjbrx9eVDbRmXAqDVTUGy\/qQvDwIPxmg6iofHnqSl5eFLxmg6ipfzswlfyz3xzzb\/TEPkye7vs8dOrP6LG7ENZHPMtdZ7QdzfmR5Vv0b7OFzh0uRJl8wNF939c3IuWtn5Et07rA\/hmF+5Ch0X1yF9EViWZfg8hTlnAurvgi3Ro7Mj4S\/NK9A1lJ\/74TcjEthsKrGYFmzgtyMS2GwqsZgWbOC2oxLY6yqylhZQ+L4ypUrpwIlVgZCacalMVZVZaysIdEamoDQjEtlqKrOUFkTg9CMS2Woqs5QWZVtc72sHnDu0FwV2W9dd9Dn7AnoG10IYzc\/\/zKsKvlzh3NgHTMxMZqHO1D4Hzaq6p6Ch2BCdBrug2OJFb7dXDJ5WdYxPmqGZb6AEyOHGx+Eey329qyu\/+q\/uqCcXvvBfdq67uCFUf5RFnHe2v0OHxe57uCV6HjkK6T7HZ4FG2u+\/uCUyPJsPyUaO+UbWBQdhtsxBi9jaJR\/GJaGFDUC+Sdv\/choNizL38HPUP\/Vf\/U0efn7rg7Gzbgj49KWA3EPBmUs06+CjLQzlHi+hgutpifOxTh3nR6eSL4ca4lmPEZjYfQrOHc9Cun5N7aM12AddtChkVXnJ9iuR2QmpuchxqWF67\/6rw4gHn8zLk5MO1D958gG2g\/90RdnRBejFzoOxx28O3wc6XmHMfPhgHWFRpt5DyUaZ5wdrGbz7AmXZXVy+rWoij4L81KUfwMnNKNT5Ea3HU+G3\/Z79V\/9VwcWG2hvONO6T7Qr9oFj2j1AOUekHM\/eOso\/EXQlmmPQimmYnbEs6zDp1xDMCvjcKNG4FOq8aDM8gzyvR\/+E5dhvX8eQyDIc7jbbR8ZynL\/2045V\/xV0hXveTnClwPzAWgdEtuOzcT0uR9XXnfXiqMTnDl2PcSHSL9y9PPnc4TvRJFim83YlGGf9TEtkWS9iONJBw5dgOc4dWkfh+83Exto5GouJKT+2wPVf\/VcXlFPr7MIHZ3syBkYHog9srOnFCnPdQXM+KMtLG1HCaUb+uQOmDOOCgnkoI\/86LpiD8k8+SJ3WMQTGOez0dnXKy\/Fdrkv0MKbAWfATUP\/Vf3VcGYT8wILPwO2RsT2bXrg++jMegWPZ\/aPfo4TzIfITbJfOXeflpbHaFiwHHxhiMzbUcVgQ5bfp0zCkc9cVbii7VIX70CTjFPdkdI2uQb7\/4ZMgYcRjjyUNVNUaKOsFmfHYYylDVXWGyno\/Rjz2WMpQVZ2hst6PGY89ljFWVWWsrPfz8ojHHsv4ElZV5UtYWe\/HjMceSxisqjFY1usx47HHEgaragyW9XrMeOyxXkOnqD\/st6fDPnxzdBjyU7zn1CnlmbtwMy6JvFeX2iGwqi9lM6yAL9rZGQeoP4Bj2Tba9LBE7sWnYPfrJ8GyPtXaeA32uvS4S8ajwrqrGcewHazOk5b1PJy73ic6Az4XnAE\/BR5mPPZYj\/3NiMsZoKodWNaHqq5aZNxjj\/XxdckZoKodbNaPr2vVIjMeeyxhsKrGYFmvx4zHHkv4yQBV7cCyXs+TGY89lvAlA1S1A8t6PZfMeOyxhMGqGoNlvR4zHnus13Bg1A+uGNgHF2JgdATM7egJyshPy919oAzbstfqqg0zb9X8aGYrfACFYKNNG+oXsKxZRY3Clzjr\/9dJsKxPtRbsnG+Chpmv6ujc4T8zxecN0\/NwYp6Dj+ag6NfwOTEWp8LDjMceSxisqjFY1usx47HHEgaragyW9XbMeOyxjLGqKmNlvR4zHnssY6yqylhZb8eMxx5LGaqqM1TWxCCYAVCGquoMlVXZNpc0UFUXNWmrRtEhkXPX+QXlT\/+gwMNh53wARyG9W52OwxBcE\/kg\/RYPKsHcio8wEbOylQTfg410AZzDnh3l49jOXXNzn5RZ7JTpuS\/Ov9X3Xk8Nj3ybGpEaCcqwWtuzOTryteJ7pHPXp6H+q\/\/qsXJC5AKqDlAPwPXZnZR5DFyO9UnYYK+Jnsdv8DhujAZhD5Rg3IftV2hFev8F+\/DyY9hdDj+eEamv8XpUZrEVOraefsFY2QL\/AdelvTOTnxQ+67kruhsPwbbcO1oXLXDu2rvYrv6r\/+qx0je6BgfiZtyeraR6AuyzPjmtJ013+FS\/PnIs28vRX4I5By6o2pqaE\/n5rM23xxJ8Ehmr9tHcGpVR1oZz1yY9m3tv4lk8iiHRC3gGz6aeiyzvMTTj0sgH6VvmeLgScf1X\/9Vj5fKoXzpYnX8Oc\/pEvVFhd+w4HXdFDqPanu3e6ac0x9Vaa2ram\/W7sOo8zIoqHLIgKnxmkfFp5HKsrrdqubtEZZT18BJssGkr7A\/f1tMbbOCS1OW4Av2iy9MyHc8+KDJufF9i56H+K+zui3zO9oK5DxdHp2I\/3ArXITwusls7jvgIro+s0s9sVommC\/Kf8lFk8nM4twxptZZ5KErsvJtsjiGYjOuiph+n+XCxwyvR8D\/1X11VsmvAX\/xSWHQG5fmxvC\/x7x3AV1vul7lP9AS2Q\/5x5Xo08hJnlfBWvQV3I90982qplTzXYzC87lwN\/\/P7Ty1tnzWi4h\/x411AeTvix5qWGrBVX85\/4D+jO+EXh0J+M4TfFrm7vhLeqgNwA34XNf04uVrX\/6D6J0NLxzS+s6vjp92t+u8peXR2nTQ3NTW31irt+itpaW5evsq8VUtos7Y0Ny+v\/\/ve7Wv4n\/rvJ+TU\/Wn4n\/qvFJprtoOdBNrevOxW3YPJZjvYQajtzctu1S0YbbaDnYPa3rzsVt2B4WY72Dms7c3LbtWVwc12sFOLtb152a26MrTZDnYMbHvzslvVkvDsuoNtb152q1oSnl18sO3Ny27VjaHNdqtjYNubl92qG0Ob7VvHwLY3L7tVN4Y228GOgW1vXnarXusDbHvzslv1Wl+GbW9edqte64\/Btjcvu1Wv9XOHsO3Ny27VjaHNdrBjYNubl92qG0Ob7WDHsLY3L7tVt39f1afMdrBjWNubl92q67+v6hNmO9g5qO3Ny27VC7iv6s9nO9g5qO3Ny27VC7iv6o9nO9hBoO3Ny27VO7iv6qPf3eJzunX0m3H8tLtVd3pfVd\/v7vPT7lbd6eeqff20u1W3\/Ht1f7lpKa+t2iPaFsWzY+TXNdHKt1W3+57Z6X0VHjoZg25aa+hWffo34D0oqv6oZjtF3uJCK99W3e57Zrv31YKakssAVUsu233PdEzXVeUXWtX5lNBWDcwDv7+7DFC15P7Fdt8zHeV1VVtL7h8eoGrJ\/cPbfc90TP\/L+H3uDli16jvK1cb6V3yBH9rYd\/gKF6Hq30HN2aq+OqZzh\/xCq+pru++Zjum6qvxCq+pru++Zjum6qvxCq6qj5mzVgHjKvSn5fe7SquqoOVs1IZ5wb0qGgVX1UWu2akb8\/N6UDD93YVV91JqtmhE\/vjclx89dVlVj633PdDxFyJ+7re3WbydjCb6FWRx9irmYhMX4PLKMz+Cj+CD6XxT\/KTNUZXIIfg2kQ\/HtdvbG8pveeo\/Iqhv+p\/4TVfxFOj6yM7biQ3yAj6OPsBTL8Qmo1n67OJWevfIXUPh3tABN7eRgXIBBGIXRkV9LFw3\/U\/+9o2szPbEiWghj57ShEtvx+7Atf5T5GHn1VLkAy1D4NOWbqbC357Z2arQ7zsI0DI0WwT57Kwp\/7sYb\/qf+e4dXeIa3wlGbRnbIFthgXWiVVGjDzmFXKy\/vw8gx7Pfg78C\/6vzbw88rbk90wUORg9SP4xLsG\/mg9kNf7AVuqf2G\/6n\/3ti13Q3WlTbaFTAOVn+Y+RgV0lYs+73Iae15cP7aO+P+2z+djFT9vXP2e9hvd8avo2fgT7Hs9FpIboRzcREoo+F\/6j9xtkCzKLLuOcgXFkzbcJv327T6\/LbEsunfjG+rGin8hwVujd\/A96F78EN0GJqq1Rkn4GK8EdnUG\/6n\/nur8uNvX0F\/Sn87SS5Of\/XTtVDL\/zK+BfgcC6MKpy0XtkR\/CmW4UmDeORchLytFHO622iUo\/DH1Fr3v4EY4EPehwl3u1cb2x1mwm\/eN9sUWwaYN\/1P\/1dnkRVfeX9v8UzxuCyixuetuWAp73IfR1\/D370+xjgWRZdhIK\/y5gtVKy52PZfA9wDJrWuBrvaj4XovTco5BT\/jM6xRln1fzLv9vc157RlRNBrQWlGZcSgNVtQbKmhMIRobSjEtlqKrOUFmDwl1ZhtKMS2Woqs5QWVNipOeV5qsLjdKMS2OsqspYWXNyiQZKMy6NL2FVVb6ElTUwLG\/GJe1\/w11v\/C1y9PctTMPgqPr7y\/kvUZEMVtUx26\/gaPTSyBZoOTbUdILaMvKfYh2F561t8gsiy\/kSn8DTnF1NYFmJyOMOWAfxsISrztlw9dbu6Bwdiv2D7iUa2GTAEwaragyWNS9IzbgUBqtqDJY1LyxrxqWcAap23GJV7zCzwbpmXMoZoGrZBZv14+vKBlozLoXBqhqDZX1IXh6EnwxQtUP5Lx56kpeXhS8ZoGqH8h\/OzCV\/POPHXv3P2V3RH0PgYPFb0Vi8jJn4IqriyG9R\/PtU6nOwqufge9gpl0dfwHnrD1B8gLowk7bpD5FOb3+LfP3VX0Q\/wnisONkMy1T9SrwIvsT6YafIuesuwR4d1blDYbCqen78c4dZQW7GpTBYVWOwrFlBbsalMFhVY7CsWUFtxqUxVlVlrKwhcXzlypVTgRIrA6E049IYq6oyVtaQ0LdYjNCMS2Woqs5QWRPDumZcPu2\/+ndtNFVrU9wZfQwH596Az74J0Zu4H84dXhaZrXEB7BSdI4f5KmWwqn3gKHE6+5fHTul8ZtpQ30OF\/Q1n8jbto5od+dxYgQX4Bgx\/Fgo+6+fxz8a+3D9LKs3JGISnsWl0CuIraJeO6H7npIGqqvpxbtX6r\/6jaeuzDfw73IXPMTcagxGwwb6FSZFteApexeTIseP5GALfG9aPvP2oa2J6o8LNSoKPIzvmPNgaTdpnLcPNthSzIuerP4NlWs\/zUW1KTeT6gl3g6\/kY9IrOwtrBWg3\/U\/\/V2aTNXRjZOD+Bk9J20FHR26mZqSnRaLyG8SDPF37p\/wWLownYNehU2zIDzjY760zyvzvQrdtecb1Vp7htqDzWfN\/HNnmHvX+InFbueKT4\/4DSLxqITjgdR2GjKD3u4Ib\/qf\/qdLIP+kUP4R8YhTejcXgd+ddq2YzI9uy8te15OijnX\/AjDZ5+xMEr\/B19+BI+qtGRj3lg0L+2xdFnW+D7oIxZcAT6UziH3V6x6k8y38Gqnb92hL4l6vjMXdtYH8Hj0a24DPnxh+yRafif+q9OJ6efH9jrxkcOMY+Bo9CU4Xz1+LTM4Xg9spFajg3Wtj0pmpCaipmRU9tOKzu1bRdvjt5BbcsOUYXrbIH0mD\/8Deaj0K6cmv69la\/JSXfPbtXpQY4sRz6W7U\/5LqrJce3glWWwek2sj\/RyXAyBjfbpyJ28F1+P9fBoUzT8T+e20SbBL3BJ9CCGYQr85n\/Cu5gNX7xfRs6u+Vr+Gt9H+eFk5GN4CyMH5nxQ5m2Mi2zDBwa\/qFE5KTL+gl377+PI950KV8gCLUjPs0mFE2mcypP6KLJqH6R9+KPsuvSXwtxhtZ+zurbv4jtE9+MSPImmanXDkZF\/1mPD\/9R\/dTrZeNNgAzRl1oHjpUdG5+MGOG16G\/47sowrcRH+BB7Fb9AFnbFdZhd0Sm0Y1cY94x4XeV9R58f48UlkZ3TeusL5tsvYUO2Q+bqDizOW6dk8Tstwztrfgdehtfblx3sKge6ProHrDbb5R6r39Mit2vA\/9V99TmS2i7ZPbY0Noy2xSWpzbBZtgR2wM3bFnpGLUPbAITgmOh7H4DicgmOjI8C5W6lRYXNVuK8w4dz1h5ED1Q5QO3huqNbO6G6Jqz49d\/nfH5g2c4fe85N+V8vS9p1z02gPtNvnMdhGe3fkH8VY\/Mwzp\/J1Vzm05nrvjHjssZgGVNUaKKsNYsZjj8UyqKrOUFntDyMeeyyWQVV1hspqf5jx2GNxDKuqMlZW+7P3iMcei+OjsKoqX8LKan+Y8dhjMQysqjFYVtvDjMce6\/8Ou7oeNo42gw31Z9gjsxecMt0z9fPI\/By2510ix7Ct1q6d1uFbRKXn7kRVT4vMLKRfjQUV1p1Fur\/1RUUvoNn7ha+7mcuy5o9mbuSDqvBt9QMfRTXBZ33W1OZ+FfXC4XBH6lXHl9jrGBs1FVb1lWfrBu7WgRLIjMcei2FgVY3Bstoehjz2WKRt911yGaBq2QWWlbTdyVctMu6xx4KakssAVcsu2KxQs2qRGY89FsPAqhqDZbU9zHjssRjeMUDVsgssq+3ZMeOxx2L4KANULbvAstqeo8x47LEY9s4\/UdXBkZmJdB+\/PbEU3yK975Ly685QuI58PPFz+L\/pwt+F598kzTaoGHzWZxVGC38kJ9juZTinmR0pa9vPQHbBa1EJZMZjjyUMVtUYLOv1mPHYYwmDVTUGy3o9Zjz2WMJgVY3Bst6OGY89ljFWVWWsrNdjxmOPZYxVVRkr6+2Y8dhjKUNVdYbKmhgEMwDKUFWdobIq62iSNlHVZyPnrJ15djQ67UE3wUlpW2J+tu5S6Q1mYgO1e7vI4YTIJl9h3SvYX8g5qE1bta1731BMR28Uzl\/xPdzFdnvvxbg7JkYN\/1P\/vdN7JvKzVeaRg+RpK+tiK2wN69gy2hhN1TKOZ9vVl0Uvocakx8FBhatWFu2ATeGaweR5ONX+JtLztnwofDcbgQpXoKOd7QNWb234n\/rvnd6mkfE1ba\/zHL\/8OM3DEljHiqgfakxOOD24GndGj+Mh3Iy\/RYNwH86H89d3RKPxItzbf3pELsfsiQFRw\/\/Uf+\/sCtsZ+T1fQsOoPqtHa8JJ4LVSa2byS6mbrgR6N77FR6jirnaoga+ZLdANh0Sn4FQMwD8wJKpwZwxgZT1Nx59GDf9TBP1kf98FW+jIKD8WWoTTpEeCei6WYTn+GNWmKCy+C\/Ia\/qf+e8O3Gk7DUdgvym9bzfBKeh6Je+ITvIdDoyLpWL5mGv7nt5l8Z3dFDdyqx+P36BrlFw4qvJIuw\/VHTMckFL\/NvFs6uq+Zjml8Z7fGT7tb9d9T8ujsJmluampurVWO\/kfS0ty8fJV5qwplbWluXl7\/972z1\/A\/9V+Q1f2p\/+q\/+u+\/CnPNdrCTQNubl92qezDZbAc7CLW9edmtugWjzXawc1Dbm5fdqjsw3GwHO4e1vXnZrboyuNkOdmqxtjcvu1VXhjbbwY6BbW9edqtaEp5dd7DtzctuVUvCs4sPtr152a26MbTZbnUMbHvzslt1Y2izfesY2PbmZbfqxtBmO9gxsO3Ny27Va32AbW9edqte68uw7c3LbtVr\/THY9uZlt+q1fu4Qtr152a26MbTZDnYMbHvzslt1Y2izHewY1vbmhbfqxhZttoMdw9revOxWXRnYbAc7B7W9eeGturIFm+1g56C2Ny+8VVe2WLMd7CDQ9uaFt+rb36r\/6r\/6r\/6r\/+q\/+q\/+q\/\/qv\/qv\/qv\/6r\/6r\/6r\/+q\/+u83+QQ=)\n\nhttps:\/\/machinelearningmastery.com\/how-to-develop-a-cnn-from-scratch-for-fashion-mnist-clothing-classification\/","e5f53d97":"# Part 1","29e0ebb6":"# Reference \n\nhttps:\/\/keras.io\/guides\/keras_tuner\/getting_started\/\n\nhttps:\/\/colab.research.google.com\/github\/tensorflow\/docs\/blob\/master\/site\/en\/tutorials\/keras\/keras_tuner.ipynb\n\nhttps:\/\/www.analyticsvidhya.com\/blog\/2021\/06\/create-convolutional-neural-network-model-and-optimize-using-keras-tuner-deep-learning\/\n"}}