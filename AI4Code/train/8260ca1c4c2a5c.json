{"cell_type":{"0b112070":"code","502dd5e0":"code","ea5d2621":"code","b2de9f63":"code","426173bf":"code","d95ff01d":"code","ca80d97f":"code","85bf6a2b":"code","b3b39741":"code","19898f91":"code","e4b6ff02":"code","e7e19846":"code","cd3fe33b":"code","825fe2f8":"code","01209a16":"code","8755bed7":"code","2e817ab4":"code","8245c592":"code","bd47c69b":"code","027c4954":"code","dbc901f3":"code","e6af7e79":"code","de44ed03":"code","abed2fc7":"code","85ef085f":"code","e27f2a3f":"code","e0b66750":"code","4586dd79":"code","a782bb79":"code","1879fcf8":"code","c758f884":"markdown"},"source":{"0b112070":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","502dd5e0":"data0 = pd.read_csv(\"..\/input\/forbes-billionaires-2021-30\/forbes_billionaires_geo.csv\")\ndata0[0:5]","ea5d2621":"data0.columns","b2de9f63":"print(data0['Residence'].value_counts()[0:20])","426173bf":"print(data0['Education'].value_counts()[0:20])","d95ff01d":"list_cols = ['Name','Country','Source','Residence','Citizenship', \n             'Status','Education','Self_made','geometry']\nce_ohe = ce.OrdinalEncoder(cols=list_cols,handle_unknown='impute')\ndata1 = ce_ohe.fit_transform(data0)\ndata1[0:3].T","ca80d97f":"data2=data1.drop(['Name','geometry','Source','Rank'],axis=1)\ndata2[0:3].T","85bf6a2b":"n=len(data0)\nprint(n)","b3b39741":"N=[]\nfor i in range(n):\n    N+=[i]\nrandom.shuffle(N)","19898f91":"datax=data2.drop('NetWorth',axis=1)\ndatay=data2['NetWorth']","e4b6ff02":"data3=np.array(datax)\ndatay3=np.array(datay)","e7e19846":"train=data3[N[0:(n\/\/10)*8]]\ntest=data3[N[(n\/\/10)*8:]]\ntrainy=datay3[N[0:(n\/\/10)*8]]\ntesty=datay3[N[(n\/\/10)*8:]]","cd3fe33b":"df_columns = list(datax.columns.values)\ndf_columns","825fe2f8":"train_df=pd.DataFrame(train)\ntest_df=pd.DataFrame(test)","01209a16":"train_df.columns=df_columns\ntest_df.columns=df_columns","8755bed7":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","2e817ab4":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","8245c592":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]   \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","bd47c69b":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","027c4954":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, \n             y, \n             cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","dbc901f3":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n}","e6af7e79":"y = trainy","de44ed03":"from sklearn.model_selection import KFold\n\nfold = KFold(n_splits=5, shuffle=True, random_state=71)\ncv = list(fold.split(train_feat_df, y))\noof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)","abed2fc7":"fig,ax = plt.subplots(figsize=(8,8))\nax.set_xlabel('oof',fontsize=20)\nax.set_ylabel('train_y',fontsize=20)\nax.scatter(oof,y)","85ef085f":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    ax.tick_params(axis='x', rotation=0)\n    ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    return fig,ax\n\nfig, ax = visualize_importance(models, train_feat_df)","e27f2a3f":"def revert_to_real(preda):\n    predb = preda.apply(lambda x:round(x))\n    return predb","e0b66750":"pred0 = np.array([model.predict(test_feat_df.values) for model in models])\npred1 = np.mean(pred0, axis=0)\npred2 = revert_to_real(pd.Series(pred1))\nlist(pred2)[0:10]","4586dd79":"testy2=revert_to_real(pd.Series(testy))\nlist(testy2)[0:10]","a782bb79":"from sklearn.metrics import classification_report, log_loss, accuracy_score\naccuracy=accuracy_score(testy2,pred2)\nprint(accuracy)","1879fcf8":"fig, ax = plt.subplots(figsize=(8,8))\nsns.histplot(np.log1p(pred1),label='Log1p Test Predict',ax=ax,color='black')\nsns.histplot(np.log1p(oof),label='Log1p Train Predict',ax=ax,color='C1')\nax.legend()\nax.grid()","c758f884":"'Education' is the most importnat factor for 'NetWorth'.\n"}}