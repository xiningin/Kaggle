{"cell_type":{"e6baef49":"code","46334e51":"code","ed73e63a":"code","43a4796e":"code","9d7d3a4b":"code","15d7aa74":"code","68551d42":"code","13ae3302":"code","1efa8eee":"code","23e4ce1e":"code","c6659f47":"code","1fe77bf7":"code","440b5ad0":"code","a922dbde":"code","c312d505":"code","e1182b74":"markdown"},"source":{"e6baef49":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import NuSVR\nfrom sklearn.metrics import mean_absolute_error\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","46334e51":"TrainData = pd.read_csv(\n    filepath_or_buffer = '..\/input\/train.csv', # file path\n    # nrows = 1500000, # number of rows 150,000\n    dtype = {\n        'acoustic_data ' : np.int16,\n        'time_to_failure' : np.float16\n    }\n)\nTrainData.rename({\n    'acoustic_data':'signal',\n    'time_to_failure':'time'\n},\naxis = 'columns',\ninplace = True\n)","ed73e63a":"fig, ax1 = plt.subplots(figsize=(16, 8))\nsns.lineplot(\n    data = TrainData['signal'].values[0:10000],\n)\nax2 = ax1.twinx()\nsns.lineplot(\n    data = TrainData['time'].values[0:10000],\n    color = 'orange'\n)\n\n","43a4796e":"fig, ax1 = plt.subplots(figsize=(16, 8))\nsns.lineplot(\n    data = TrainData['signal'].values[0:150000],\n)\nax2 = ax1.twinx()\nsns.lineplot(\n    data = TrainData['time'].values[0:150000],\n    color = 'orange'\n)","9d7d3a4b":"segment_size = 150_000 # segement size rows\nsegment_count = int(TrainData.shape[0]\/segment_size) # shape[0] means row count\n\nSignalData = pd.DataFrame(\n    index = range(segment_count),\n    dtype = np.float16,\n    columns = [\n        'mean', # average\n        'stdev', # standard deviation\n        'max', #maximum value\n        'min' #minimum value\n    ]\n)\n\nTimeData = pd.DataFrame(\n    index = range(segment_count),\n    dtype = np.float16,\n    columns = [\n        'time', # average\n    ]\n)\n\n","15d7aa74":"for segment in tqdm(range(segment_count)):\n    slice_from = segment * segment_size\n    slice_to  = slice_from + segment_size\n    \n    slicing = TrainData.iloc[slice_from : slice_to]\n    \n    Signal = slicing['signal'].values\n    Time = slicing['time'].values[-1]\n    \n    SignalData.loc[segment, 'mean'] = Signal.mean()\n    SignalData.loc[segment, 'stdev'] = Signal.std()\n    SignalData.loc[segment, 'max'] = Signal.max()\n    SignalData.loc[segment, 'min'] = Signal.min()\n    \n    TimeData.loc[segment, 'time'] = Time","68551d42":"data = pd.DataFrame(SignalData.stdev, SignalData.index)\nsns.lineplot(data=data, palette=\"tab10\", linewidth=2.5)","13ae3302":"plt.scatter(SignalData.stdev, SignalData.index) \nplt.xlabel('x') \nplt.xlabel('y') \nplt.title(\"Training Data\") \nplt.show() ","1efa8eee":"def build_model():\n  model = keras.Sequential([\n    layers.Dense(64, activation=tf.nn.relu, input_shape=[64]),\n    layers.Dense(64, activation=tf.nn.relu),\n    layers.Dense(1)\n  ])\n\n  optimizer = tf.train.RMSPropOptimizer(0.001)\n\n  model.compile(loss='mse',\n                optimizer=optimizer,\n                metrics=['mae', 'mse'])\n  return model","23e4ce1e":"model = build_model()\nmodel.summary()","c6659f47":"plt.figure(figsize=(6, 6))\nplt.scatter(TimeData.values.flatten(), TimePredict)\nplt.xlim(0, 20)\nplt.ylim(0, 20)\nplt.xlabel('actual', fontsize=12)\nplt.ylabel('predicted', fontsize=12)\nplt.plot([(0, 0), (20, 20)], [(0, 0), (20, 20)])\nplt.show()","1fe77bf7":"Score = mean_absolute_error(TimeData.values.flatten(), TimePredict)\nprint(f'Score: {Score:0.3f}')","440b5ad0":"Submission = pd.read_csv('..\/input\/sample_submission.csv', index_col='seg_id')","a922dbde":"SignalDataTest = pd.DataFrame(columns=SignalData.columns, dtype=np.float64, index=Submission.index)","c312d505":"for seg_id in SignalDataTest.index:\n    seg = pd.read_csv('..\/input\/test\/' + seg_id + '.csv')\n    \n    x = seg['acoustic_data'].values\n    \n    SignalDataTest.loc[seg_id, 'ave'] = x.mean()\n    SignalDataTest.loc[seg_id, 'std'] = x.std()\n    SignalDataTest.loc[seg_id, 'max'] = x.max()\n    SignalDataTest.loc[seg_id, 'min'] = x.min()","e1182b74":"![](https:\/\/1.bp.blogspot.com\/-MQsmXC1vIXE\/XEGw7tLb_nI\/AAAAAAAACEQ\/p4mZ4JiaoFMaact12BUREkn7NPcV0ajJACLcBGAs\/s1600\/cascades-alpine-tarns-20120819_0135.jpg)"}}