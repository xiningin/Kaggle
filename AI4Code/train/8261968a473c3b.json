{"cell_type":{"c39d390c":"code","5fe53844":"code","4c041183":"code","dea875c4":"code","43b3c8da":"code","7099a4bf":"code","a795b934":"code","9cb62e5b":"code","2964136a":"code","f050416e":"code","f2d945f6":"code","4781b1d2":"code","5faa1518":"code","7811499c":"code","c7f833eb":"code","067deabc":"code","9cde7080":"code","dc634cdf":"code","5e6189a0":"code","4705c73b":"code","46e72ed0":"code","a8705f45":"code","f57040cb":"code","8bfea04e":"code","56227731":"code","7c20cc8b":"code","897fd846":"code","a14fab88":"code","5865a099":"markdown","c4e1d014":"markdown","b51bb276":"markdown","6921ddfd":"markdown","833840ec":"markdown","89f7f03e":"markdown","e6ed037a":"markdown","ab1fff12":"markdown","b204fe06":"markdown","6d5dc0f1":"markdown","f0541faa":"markdown"},"source":{"c39d390c":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport plotly.express as px\n\npd.set_option('display.max_columns', None)\n##\uc9c0\uc218\uc2dd \uc5c6\uc560\uae30(e \uc81c\uac70)\nnp.set_printoptions(precision=6, suppress=True)\npd.options.display.float_format = '{:.5f}'.format","5fe53844":"train = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/test.csv')\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv')","4c041183":"train_df = train.drop(['Id'],axis=1)\ntest_df = test.drop(['Id'],axis=1)\n\ndel test\ndel train\n","dea875c4":"train_df.head(20)","43b3c8da":"train_df.isna().sum()","7099a4bf":"# Mask training set\ntrain_df['Slope'][train_df['Slope'] < 0]=0\ntrain_df['Horizontal_Distance_To_Hydrology'][train_df['Horizontal_Distance_To_Hydrology'] < 0]=0\ntrain_df['Vertical_Distance_To_Hydrology'][train_df['Vertical_Distance_To_Hydrology'] < 0]=0\ntrain_df['Horizontal_Distance_To_Roadways'][train_df['Horizontal_Distance_To_Roadways'] < 0]=0\ntrain_df['Horizontal_Distance_To_Fire_Points'][train_df['Horizontal_Distance_To_Fire_Points'] < 0]=0\n\n# Mask test set\ntest_df['Slope'][test_df['Slope'] < 0]=0\ntest_df['Horizontal_Distance_To_Hydrology'][test_df['Horizontal_Distance_To_Hydrology'] < 0]=0\ntest_df['Vertical_Distance_To_Hydrology'][test_df['Vertical_Distance_To_Hydrology'] < 0]=0\ntest_df['Horizontal_Distance_To_Roadways'][test_df['Horizontal_Distance_To_Roadways'] < 0]=0\ntest_df['Horizontal_Distance_To_Fire_Points'][test_df['Horizontal_Distance_To_Fire_Points'] < 0]=0","a795b934":"# Project training aspect angles onto [0,360]\ntrain_df['Aspect'][train_df['Aspect'] < 0] += 360\ntrain_df['Aspect'][train_df['Aspect'] >= 360] -= 360\n\n# Project test aspect angles onto [0,360]\ntest_df['Aspect'][test_df['Aspect'] < 0] += 360\ntest_df['Aspect'][test_df['Aspect'] >= 360] -= 360","9cb62e5b":"# Euclidean distance to Hydrology (training set)\ntrain_df[\"ED_to_Hydrology\"] = np.sqrt(train_df['Horizontal_Distance_To_Hydrology']**2 + train_df['Vertical_Distance_To_Hydrology']**2)\n\n# Euclidean distance to Hydrology (test set)\ntest_df[\"ED_to_Hydrology\"] = np.sqrt(test_df['Horizontal_Distance_To_Hydrology']**2 + test_df['Vertical_Distance_To_Hydrology']**2)","2964136a":"# Mask training set from below\ntrain_df.loc[train_df['Hillshade_9am'] < 0, 'Hillshade_9am'] = 0\ntrain_df.loc[train_df['Hillshade_Noon'] < 0, 'Hillshade_Noon'] = 0\ntrain_df.loc[train_df['Hillshade_3pm'] < 0, 'Hillshade_3pm'] = 0\n\n# Mask training set from above\ntrain_df.loc[train_df['Hillshade_9am'] > 255, 'Hillshade_9am'] = 255\ntrain_df.loc[train_df['Hillshade_Noon'] > 255, 'Hillshade_Noon'] = 255\ntrain_df.loc[train_df['Hillshade_3pm'] > 255, 'Hillshade_3pm'] = 255\n\n# Mask test set from below\ntest_df.loc[test_df['Hillshade_9am'] < 0, 'Hillshade_9am'] = 0\ntest_df.loc[test_df['Hillshade_Noon'] < 0, 'Hillshade_Noon'] = 0\ntest_df.loc[test_df['Hillshade_3pm'] < 0, 'Hillshade_3pm'] = 0\n\n# Mask test set from above\ntest_df.loc[test_df['Hillshade_9am'] > 255, 'Hillshade_9am'] = 255\ntest_df.loc[test_df['Hillshade_Noon'] > 255, 'Hillshade_Noon'] = 255\ntest_df.loc[test_df['Hillshade_3pm'] > 255, 'Hillshade_3pm'] = 255","f050416e":"new_names = {\n    \"Horizontal_Distance_To_Hydrology\": \"x_dist_hydrlgy\",\n    \"Vertical_Distance_To_Hydrology\": \"y_dist_hydrlgy\",\n    \"Horizontal_Distance_To_Roadways\": \"x_dist_rdwys\",\n    \"Horizontal_Distance_To_Fire_Points\": \"x_dist_firepts\"\n}\n\ntrain_df.rename(new_names, axis=1, inplace=True)\ntest_df.rename(new_names, axis=1, inplace=True)","f2d945f6":"# Manhhattan distance to Hydrology\ntrain_df[\"mnhttn_dist_hydrlgy\"] = np.abs(train_df[\"x_dist_hydrlgy\"]) + np.abs(train_df[\"y_dist_hydrlgy\"])\ntest_df[\"mnhttn_dist_hydrlgy\"] = np.abs(test_df[\"x_dist_hydrlgy\"]) + np.abs(test_df[\"y_dist_hydrlgy\"])\n\n# Euclidean distance to Hydrology\ntrain_df[\"ecldn_dist_hydrlgy\"] = (train_df[\"x_dist_hydrlgy\"]**2 + train_df[\"y_dist_hydrlgy\"]**2)**0.5\ntest_df[\"ecldn_dist_hydrlgy\"] = (test_df[\"x_dist_hydrlgy\"]**2 + test_df[\"y_dist_hydrlgy\"]**2)**0.5","4781b1d2":"from sklearn.metrics import accuracy_score\nfrom tqdm import tqdm\n\nfeature = train_df.drop(['Cover_Type'], axis = 1)\nHillshade = train_df[['Hillshade_9am', 'Hillshade_Noon', 'Hillshade_3pm']].columns\nWilderness_Area = train_df[['Wilderness_Area1','Wilderness_Area2','Wilderness_Area3','Wilderness_Area4']].columns\nHorizontal = train_df[['x_dist_firepts', 'x_dist_rdwys', 'x_dist_hydrlgy','y_dist_hydrlgy']].columns\nSoil_Type = train_df[['Soil_Type1','Soil_Type2','Soil_Type3','Soil_Type4','Soil_Type5','Soil_Type6','Soil_Type8','Soil_Type9','Soil_Type10',\n                      'Soil_Type11','Soil_Type12','Soil_Type13','Soil_Type14','Soil_Type16','Soil_Type17','Soil_Type18','Soil_Type19','Soil_Type20',\n                      'Soil_Type21','Soil_Type22','Soil_Type23','Soil_Type24','Soil_Type25','Soil_Type26','Soil_Type27','Soil_Type28','Soil_Type29','Soil_Type30',\n                      'Soil_Type31','Soil_Type32','Soil_Type33','Soil_Type34','Soil_Type35','Soil_Type36','Soil_Type37','Soil_Type38','Soil_Type39','Soil_Type40']].columns\nnum_cols = ['Wilderness_Area1','Wilderness_Area2','Wilderness_Area3','Wilderness_Area4','Soil_Type1','Soil_Type2','Soil_Type3','Soil_Type4','Soil_Type5','Soil_Type6','Soil_Type8','Soil_Type9','Soil_Type10',\n                      'Soil_Type11','Soil_Type12','Soil_Type13','Soil_Type14','Soil_Type16','Soil_Type17','Soil_Type18','Soil_Type19','Soil_Type20',\n                      'Soil_Type21','Soil_Type22','Soil_Type23','Soil_Type24','Soil_Type25','Soil_Type26','Soil_Type27','Soil_Type28','Soil_Type29','Soil_Type30',\n                      'Soil_Type31','Soil_Type32','Soil_Type33','Soil_Type34','Soil_Type35','Soil_Type36','Soil_Type37','Soil_Type38','Soil_Type39','Soil_Type40']\n\n\n\ndef classifier_eval(y_valid , y_pred) :\n  print('\uc815\ud655\ub3c4(accuracy_score) : ', accuracy_score(y_valid, y_pred))\n\ndef add_statistics(df) :\n  df['mean'] = df.mean(axis=1)\n  df['min'] = df.min(axis=1)\n  df['max'] = df.max(axis=1)\n\ndef add_Statistic_by_section(df) :\n  ## MEAN\n  df['HillShade_mean'] = df[Hillshade].mean(axis=1)\n  df['Wilderness_Area_mean'] = df[Wilderness_Area].mean(axis=1)\n  df['Horizontal_mean'] = df[Horizontal].mean(axis=1)\n  df['Soil_Type_mean'] = df[Soil_Type].mean(axis = 1)\n\n  ## MIN\n  df['HillShade_min'] = df[Hillshade].min(axis=1)\n  df['Wilderness_Area_min'] = df[Wilderness_Area].min(axis=1)\n  df['Horizontal_min'] = df[Horizontal].min(axis=1)\n  df['Soil_Type_min'] = df[Soil_Type].min(axis = 1)\n\n  ## MAX\n  df['HillShade_max'] = df[Hillshade].max(axis=1)\n  df['Wilderness_Area_max'] = df[Wilderness_Area].max(axis=1)\n  df['Horizontal_max'] = df[Horizontal].max(axis=1)\n  df['Soil_Type_max'] = df[Soil_Type].max(axis = 1)\n\n  ## VAR\n  df['HillShade_var'] = df[Hillshade].var(axis=1)\n  df['Wilderness_Area_var'] = df[Wilderness_Area].var(axis=1)\n  df['Horizontal_var'] = df[Horizontal].var(axis=1)\n  df['Soil_Type_var'] = df[Soil_Type].var(axis = 1)\n\n  ## SUM\n  df['HillShade_sum'] = df[Hillshade].sum(axis=1)\n  df['Wilderness_Area_sum'] = df[Wilderness_Area].sum(axis=1)\n  df['Horizontal_sum'] = df[Horizontal].sum(axis=1)\n  df['Soil_Type_sum'] = df[Soil_Type].sum(axis = 1)\n\n  ## KURT     \n  df['Wilderness_Area_kurt'] = df[Wilderness_Area].kurt(axis=1)\n  df['Soil_Type_kurt'] = df[Soil_Type].kurt(axis = 1) \n\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df    \n\ntrain_df = reduce_mem_usage(train_df)\ntest_df = reduce_mem_usage(test_df)\n","5faa1518":"train_df = reduce_mem_usage(train_df)\ntest_df = reduce_mem_usage(test_df)","7811499c":"#Remove only 0\n\ntrain_df = train_df.drop(['Soil_Type15','Soil_Type7'] , axis=1)\ntest_df = test_df.drop(['Soil_Type15','Soil_Type7'] , axis=1)","c7f833eb":"sns.countplot(x=train_df.Cover_Type, data=train_df)","067deabc":"#### before outier boxplot\n\n\nfig, axes = plt.subplots(2,5 , figsize=(20, 10))\ngreen_diamond = dict(markerfacecolor='g', marker='D')\naxes[0, 0].boxplot(train_df['Elevation'], flierprops=green_diamond)\naxes[0, 0].set_title(\"Elevation\")\n\naxes[0, 1].boxplot(train_df['Slope'], flierprops=green_diamond)\naxes[0, 1].set_title(\"Slope\")\n\naxes[0, 2].boxplot(train_df['x_dist_hydrlgy'], flierprops=green_diamond)\naxes[0, 2].set_title(\"x_dist_hydrlgy\")\n\naxes[0, 3].boxplot(train_df['y_dist_hydrlgy'], flierprops=green_diamond)\naxes[0, 3].set_title(\"y_dist_hydrlgy\")\n\naxes[0, 4].boxplot(train_df['x_dist_rdwys'], flierprops=green_diamond)\naxes[0, 4].set_title(\"x_dist_rdwys\")\n\naxes[1, 0].boxplot(train_df['Hillshade_9am'], flierprops=green_diamond)\naxes[1, 0].set_title(\"Hillshade_9am\")\n\naxes[1, 1].boxplot(train_df['Hillshade_Noon'], flierprops=green_diamond)\naxes[1, 1].set_title(\"Hillshade_Noon\")\n\naxes[1, 2].boxplot(train_df['Hillshade_3pm'], flierprops=green_diamond)\naxes[1, 2].set_title(\"Hillshade_3pm\")\n\naxes[1, 3].boxplot(train_df['x_dist_firepts'], flierprops=green_diamond)\naxes[1, 3].set_title(\"x_dist_firepts\")\n\naxes[1, 4].boxplot(train_df['Aspect'], flierprops=green_diamond)\naxes[1, 4].set_title(\"Aspect\")\n\nfig.suptitle('before outier remove boxplot', fontsize = 20)\n\n\nplt.show()\n\n\n### outier col: 'Elevation', 'Slope', 'x_dist_hydrlgy', 'y_dist_hydrlgy', 'x_dist_rdwys', 'Hillshade_9am', 'Hillshade_Noon', 'Hillshade_3pm', 'x_dist_firepts'   ","9cde7080":"Outier_col = ['Elevation', 'Slope', 'x_dist_hydrlgy', 'y_dist_hydrlgy', 'x_dist_rdwys', 'Hillshade_9am', 'Hillshade_Noon', 'Hillshade_3pm', 'x_dist_firepts' ]","dc634cdf":"# Check 1%, 99% points of training data per column\np01 = train_df[Outier_col].quantile(0.01)\np99 = train_df[Outier_col].quantile(0.99)\n\np01\np99","5e6189a0":"# Values \u200b\u200bbelow 1% point are clipped to 1% point, and values \u200b\u200babove 99% point are clipped to 99% point.\ntrain_df[Outier_col] = train_df[Outier_col].clip(p01, p99, axis=1)\ntest_df[Outier_col] = test_df[Outier_col].clip(p01, p99, axis=1)\n\ndel p01\ndel p99","4705c73b":"#### after outier boxplot\n\nfig, axes = plt.subplots(2,5 , figsize=(20, 10))\ngreen_diamond = dict(markerfacecolor='g', marker='D')\naxes[0, 0].boxplot(train_df['Elevation'], flierprops=green_diamond)\naxes[0, 0].set_title(\"Elevation\")\n\naxes[0, 1].boxplot(train_df['Slope'], flierprops=green_diamond)\naxes[0, 1].set_title(\"Slope\")\n\naxes[0, 2].boxplot(train_df['x_dist_hydrlgy'], flierprops=green_diamond)\naxes[0, 2].set_title(\"x_dist_hydrlgy\")\n\naxes[0, 3].boxplot(train_df['y_dist_hydrlgy'], flierprops=green_diamond)\naxes[0, 3].set_title(\"y_dist_hydrlgy\")\n\naxes[0, 4].boxplot(train_df['x_dist_rdwys'], flierprops=green_diamond)\naxes[0, 4].set_title(\"x_dist_rdwys\")\n\naxes[1, 0].boxplot(train_df['Hillshade_9am'], flierprops=green_diamond)\naxes[1, 0].set_title(\"Hillshade_9am\")\n\naxes[1, 1].boxplot(train_df['Hillshade_Noon'], flierprops=green_diamond)\naxes[1, 1].set_title(\"Hillshade_Noon\")\n\naxes[1, 2].boxplot(train_df['Hillshade_3pm'], flierprops=green_diamond)\naxes[1, 2].set_title(\"Hillshade_3pm\")\n\naxes[1, 3].boxplot(train_df['x_dist_firepts'], flierprops=green_diamond)\naxes[1, 3].set_title(\"x_dist_firepts\")\n\naxes[1, 4].boxplot(train_df['Aspect'], flierprops=green_diamond)\naxes[1, 4].set_title(\"Aspect\")\n\nfig.suptitle('after outier remove boxplot', fontsize = 20)\n\n\nplt.show()","46e72ed0":"TARGET = 'Cover_Type'\n\ntarget_df = pd.DataFrame(train_df[TARGET].value_counts()).reset_index()\ntarget_df.columns = [TARGET, 'count']\nfig = px.bar(data_frame =target_df, \n             x = 'Cover_Type',\n             y = 'count' , \n             color = \"count\",\n             color_continuous_scale=\"Emrld\") \nfig.show()\ntarget_df.sort_values(by =TARGET , ignore_index = True)","a8705f45":"X = train_df.drop('Cover_Type', axis=1)\ny = train_df['Cover_Type']\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.15, random_state=42) # train, valid 8.5:1.5 \ubd84\ud560\n\ndel train_df","f57040cb":"add_Statistic_by_section(X_train)\nadd_Statistic_by_section(X_valid)\nadd_Statistic_by_section(test_df)","8bfea04e":"!pip install catboost\nfrom catboost import CatBoostClassifier","56227731":"cat_params = {\n    'iterations': 15000,\n    'learning_rate': 0.03,\n    'od_wait': 1000,\n    'depth': 7,\n    'task_type' : 'GPU',\n    'devices' : '0',\n    'verbose' : 1000\n}\ncat = CatBoostClassifier(**cat_params)\ncat.fit(X_train, y_train, eval_set=(X_valid, y_valid))\n","7c20cc8b":"from sklearn.metrics import classification_report,confusion_matrix\n\ny_pred = cat.predict(X_valid)\nprint(classification_report(y_valid,y_pred))\nprint(classifier_eval(y_valid , y_pred))","897fd846":"sample_submission = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/test.csv')\nCatBoost_prediction = cat.predict(test_df)\nsample_submission['Id'] = test['Id']\nsample_submission['Cover_Type'] = CatBoost_prediction","a14fab88":"sample_submission.to_csv('.\/Cat_Boost.csv', index=False)","5865a099":"#### 1st Elimination Outliers","c4e1d014":"#### Submission","b51bb276":"Normalization was not performed because performance was better before and after normalization.","6921ddfd":"<div style=\"background-color:rgba(0, 255, 255, 0.6);border-radius:5px;display:fill;\">\n    <h1><center style =\"margin-left : 20px;\">Import Data<\/center><\/h1>\n<\/div>","833840ec":"<div style=\"background-color:#F261AA;border-radius:5px;display:fill;\">\n    <h1><center style =\"margin-left : 20px;\">Data Segmentation<\/center><\/h1>\n<\/div>","89f7f03e":"# Cliping","e6ed037a":"<div style=\"background-color:#47C832;border-radius:5px;display:fill;\">\n    <h1><center style =\"margin-left : 20px;\">Modeling<\/center><\/h1>\n<\/div>","ab1fff12":"#### function definition","b204fe06":"<div style=\"background-color: #FFBB00; border-radius:5px;display:fill;\">\n    <h1><center style =\"margin-left : 20px;\">Feature Engineering<\/center><\/h1>\n<\/div>","6d5dc0f1":"**Visualize data distribution**","f0541faa":"**function application**"}}