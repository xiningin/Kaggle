{"cell_type":{"de6396c6":"code","a8a43188":"code","f27647fa":"code","5f37e571":"code","300a8250":"code","5198dca2":"code","3560a56a":"code","7a7f0660":"code","e8769bd0":"code","0e9b14b1":"code","88eb45f1":"code","b6fe12e0":"markdown","2bd9f650":"markdown","1f158ead":"markdown","97b94d62":"markdown","43d9728a":"markdown","d35a0fa4":"markdown","2717cd86":"markdown"},"source":{"de6396c6":"import os\n\n# import efficientnet.tfkeras as efn\nimport numpy as np\nimport pandas as pd\nfrom kaggle_datasets import KaggleDatasets\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nimport tensorflow.keras.applications.efficientnet as efn\nimport keras.backend as K","a8a43188":"def auto_select_accelerator():\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n        print(\"Running on TPU:\", tpu.master())\n    except ValueError:\n        strategy = tf.distribute.get_strategy()\n    print(f\"Running on {strategy.num_replicas_in_sync} replicas\")\n    \n    return strategy\n\n\ndef build_decoder(with_labels=True, target_size=(300, 300), ext='jpg'):\n    def decode(path):\n        file_bytes = tf.io.read_file(path)\n        if ext == 'png':\n            img = tf.image.decode_png(file_bytes, channels=3)\n        elif ext in ['jpg', 'jpeg']:\n            img = tf.image.decode_jpeg(file_bytes, channels=3)\n        else:\n            raise ValueError(\"Image extension not supported\")\n\n        img = tf.cast(img, tf.float32) \/ 255.0\n        img = tf.image.resize(img, target_size)\n\n        return img\n    \n    def decode_with_labels(path, label):\n        return decode(path), label\n    \n    return decode_with_labels if with_labels else decode\n\n\ndef build_augmenter(with_labels=True):\n    def augment(img):\n        img = tf.image.random_flip_left_right(img)\n        img = tf.image.random_flip_up_down(img)\n        return img\n    \n    def augment_with_labels(img, label):\n        return augment(img), label\n    \n    return augment_with_labels if with_labels else augment\n\n\ndef build_dataset(paths, labels=None, bsize=32, cache=True,\n                  decode_fn=None, augment_fn=None,\n                  augment=True, repeat=True, shuffle=1024, \n                  cache_dir=\"\"):\n    if cache_dir != \"\" and cache is True:\n        os.makedirs(cache_dir, exist_ok=True)\n    \n    if decode_fn is None:\n        decode_fn = build_decoder(labels is not None)\n    \n    if augment_fn is None:\n        augment_fn = build_augmenter(labels is not None)\n    \n    AUTO = tf.data.experimental.AUTOTUNE\n    slices = paths if labels is None else (paths, labels)\n    \n    dset = tf.data.Dataset.from_tensor_slices(slices)\n    dset = dset.map(decode_fn, num_parallel_calls=AUTO)\n    dset = dset.cache(cache_dir) if cache else dset\n    dset = dset.map(augment_fn, num_parallel_calls=AUTO) if augment else dset\n    dset = dset.repeat() if repeat else dset\n    dset = dset.shuffle(shuffle) if shuffle else dset\n    dset = dset.batch(bsize).prefetch(AUTO)\n    \n    return dset","f27647fa":"COMPETITION_NAME = \"ranzcr-clip-catheter-line-classification\"\nstrategy = auto_select_accelerator()\nBATCH_SIZE = strategy.num_replicas_in_sync * 16\n# GCS_DS_PATH = KaggleDatasets().get_gcs_path(COMPETITION_NAME)","5f37e571":"load_dir = f\"\/kaggle\/input\/{COMPETITION_NAME}\/\"\ndf = pd.read_csv(load_dir + 'train.csv')\npaths = load_dir + \"train\/\" + df['StudyInstanceUID'] + '.jpg'\n\nsub_df = pd.read_csv(load_dir + 'sample_submission.csv')\ntest_paths = load_dir + \"test\/\" + sub_df['StudyInstanceUID'] + '.jpg'\n\n# Get the multi-labels\nlabel_cols = sub_df.columns[1:]\nlabels = df[label_cols].values","300a8250":"#\u3053\u3053\u306e\u8ffd\u52a0\n# Train test split\n(\n    train_paths, valid_paths, \n    train_labels, valid_labels\n) = train_test_split(paths, labels, train_size=0.1,test_size=0.1, random_state=42)","5198dca2":"# Build the tensorflow datasets\nIMSIZES = (224, 240, 260, 300, 380, 456, 528, 600)\n# index i corresponds to b-i\nsize = IMSIZES[2]\n\ndecoder = build_decoder(with_labels=True, target_size=(size, size))\ntest_decoder = build_decoder(with_labels=False, target_size=(size, size))\n\n# Build the tensorflow datasets\ndtrain = build_dataset(\n    train_paths, train_labels, bsize=BATCH_SIZE, \n    cache_dir='\/kaggle\/tf_cache', decode_fn=decoder\n)\n\ndvalid = build_dataset(\n    valid_paths, valid_labels, bsize=BATCH_SIZE, \n    repeat=False, shuffle=False, augment=False, \n    cache_dir='\/kaggle\/tf_cache', decode_fn=decoder\n)\n\ndtest = build_dataset(\n    test_paths, bsize=BATCH_SIZE, repeat=False, \n    shuffle=False, augment=False, cache=False, \n    decode_fn=test_decoder\n)","3560a56a":"def create_model(activation,drop_connect_rate):\n    model_path = '..\/input\/tfkeras-efficientnet-weights\/efficientnetb7_notop.h5'  # imagenet\n    n_labels = labels.shape[1]\n    model = tf.keras.Sequential([\n        efn.EfficientNetB7(\n            input_shape=(size, size, 3),\n            weights=model_path,\n            include_top=False,\n            drop_connect_rate=drop_connect_rate), ##\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(n_labels, activation=activation) ##\n    ])\n    return model","7a7f0660":"import optuna\ndef objective(trial):\n    #\u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u30af\u30ea\u30a2\n    K.clear_session()\n    \n    #\u6700\u9069\u5316\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\n    #drop_connect_rate\n    drop_connect_rate=trial.suggest_uniform('drop_connect_rate', 0.0, 1.0)\n    \n    #\u6d3b\u6027\u5316\u95a2\u6570\n    activation = trial.suggest_categorical(\"activation\", [\"relu\", \"sigmoid\", \"tanh\"])\n    \n    #optimizer\n    optimizer = trial.suggest_categorical(\"optimizer\", [\"sgd\", \"adam\", \"rmsprop\"])\n                                          \n    model = create_model(activation,drop_connect_rate)\n    \n    model.compile(\n        optimizer=optimizer,\n        loss='binary_crossentropy',\n        metrics=[tf.keras.metrics.AUC(multi_label=True)])\n    # ############### Train the model ###############\n    steps_per_epoch = train_paths.shape[0] \/\/ BATCH_SIZE\n    checkpoint = tf.keras.callbacks.ModelCheckpoint(\n        'model.h5', save_best_only=True, monitor='val_auc', mode='max')\n    lr_reducer = tf.keras.callbacks.ReduceLROnPlateau(\n        monitor=\"val_auc\", patience=3, min_lr=1e-6, mode='max')\n    \n    history = model.fit(\n        dtrain, \n        epochs=10,\n        verbose=1,\n        callbacks=[checkpoint, lr_reducer],\n        steps_per_epoch=steps_per_epoch,\n    )\n    \n    #\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u6b63\u7b54\u7387\u304c\u6700\u5927\u3068\u306a\u308b\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c42\u3081\u308b\n    return 1 - history.history[\"val_acc\"][-1]","e8769bd0":"study = optuna.create_study()\nstudy.optimize(objective, n_trials=1)","0e9b14b1":"study.best_params","88eb45f1":"study.best_value","b6fe12e0":"The following functions are hidden:\n```python\nauto_select_accelerator()\n\nbuild_decoder(with_labels=True, target_size=(256, 256), ext='jpg')\n\nbuild_augmenter(with_labels=True)\n\nbuild_dataset(paths, labels=None, bsize=32, cache=True,\n              decode_fn=None, augment_fn=None,\n              augment=True, repeat=True, shuffle=1024, \n              cache_dir=\"\")\n```\n\nUnhide below to see:","2bd9f650":"## Modeling","1f158ead":"## check the best parames","97b94d62":"## Helper functions","43d9728a":"## Variables and configurations","d35a0fa4":"### Loading and preprocess CSVs","2717cd86":"## Preparing dataset"}}