{"cell_type":{"9a6cd483":"code","6c231d22":"code","d61752be":"code","e1bacce9":"code","fd9f158d":"code","92fa05f8":"code","b2ca4267":"code","204813c5":"code","8e80e455":"code","c7a05ecd":"code","248fe7a0":"code","e9876340":"code","eadd1580":"code","c1331cfd":"code","9553faee":"code","b988e71c":"code","634844c6":"code","62c30d75":"code","e76d3993":"code","f2ac6aae":"code","103a5c39":"code","81beaf1c":"code","16e022be":"markdown","1b8daa9a":"markdown","b160e0bc":"markdown","a147b1fb":"markdown","df5c4038":"markdown","35788567":"markdown","6cef0746":"markdown","b10d7ca2":"markdown"},"source":{"9a6cd483":"import pandas as pd \nimport numpy as np \n\nfrom sklearn.datasets import load_boston\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn.decomposition import PCA \nfrom sklearn.pipeline import Pipeline \n#from sklearn.externals import joblib \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression, Lasso, ElasticNet\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\n\n\nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn.ensemble import RandomForestClassifier","6c231d22":"from sklearn.model_selection import train_test_split \nfrom sklearn.model_selection import cross_val_score, KFold\nfrom sklearn.model_selection import GridSearchCV","d61752be":"# ensure all numbers display in a consistent manner\npd.options.display.float_format = '{:.5f}'.format","e1bacce9":"boston_data = load_boston()","fd9f158d":"boston_data.data","92fa05f8":"boston_data.feature_names","b2ca4267":"df = pd.concat([pd.DataFrame(boston_data.data, columns=boston_data.feature_names), pd.DataFrame(boston_data.target, columns=['MEDV'])], axis=1)","204813c5":"df.head()","8e80e455":"X = df.iloc[:, :-1]\ny = df.iloc[:, -1]","c7a05ecd":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=0)","248fe7a0":"models = []\n\nmodels.append((\"LR\", LinearRegression()))\nmodels.append((\"Lasso\", Lasso()))\nmodels.append((\"ElasticNet\", ElasticNet()))\nmodels.append((\"KNN\", KNeighborsRegressor()))\nmodels.append((\"CART\", DecisionTreeRegressor()))\nmodels.append(('SVR', SVR()))\nmodels.append(('RandomForestRegressor', RandomForestRegressor()))","e9876340":"\"\"\"# pipeline Logistic Regression\n\npipeline_lr = Pipeline([('stdscaler',StandardScaler()),\n                     ('pca2',PCA(n_components=2)),\n                     ('lr_classifier',LogisticRegression(random_state=0))])\"\"\"","eadd1580":"\"\"\"# Pipeline Decision Tree\n\n\npipeline_dt = Pipeline([('stdscaler',StandardScaler()),\n                     ('pca2',PCA(n_components=2)),\n                     ('dt_clf',DecisionTreeClassifier(random_state=0))])\"\"\"","c1331cfd":"\"\"\"# Pipeline Random Forest\n\npipeline_rf = Pipeline([('stdscaler',StandardScaler()),\n                     ('pca2',PCA(n_components=2)),\n                     ('rf_clf',RandomForestClassifier())])\"\"\"","9553faee":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\n","b988e71c":"for name, model in models:\n    pipelined = Pipeline([('minmax', MinMaxScaler()), \n                         ('pca', PCA(n_components = 3)),\n                         (name, model)])\n    \n    \n    pipelined.fit(X_train, y_train)\n    \n    y_hat = pipelined.predict(X_test)\n    RMSE = np.sqrt(mean_squared_error(y_test, y_hat))\n    print(f\"RMSE Score for model, {name} -> {RMSE}\")","634844c6":"rf_pipeline = Pipeline([('minmax', MinMaxScaler()),\n                       ('pca', PCA(n_components = 3)),\n                       (\"RF\", RandomForestRegressor())])\n\ngrid = {\n    'RF__n_estimators' : [100,200,300,400,500],\n    'RF__max_depth' : [10,20,30,40,50],\n    'RF__min_samples_leaf' : [10,15,20,25,30]\n\n}\n\n\ngrid_search_cv = GridSearchCV(rf_pipeline, grid, cv = KFold(n_splits = 10), \n                             scoring = 'neg_mean_squared_error', n_jobs = -1)","62c30d75":"results = grid_search_cv.fit(X_train, y_train)\n\nprint(\"Best Score -> \", results.best_score_)\nprint(\"Best Params -> \", results.best_params_)","e76d3993":"best_pipeline_model = Pipeline([('minmax', MinMaxScaler()), \n                                ('pca',PCA(n_components = 3) ),\n                               ('RF', RandomForestRegressor(n_estimators = results.best_params_['RF__n_estimators'],\n                                                           max_depth = results.best_params_['RF__max_depth'],\n                                                            min_samples_leaf = results.best_params_['RF__min_samples_leaf']\n                                                           ))])","f2ac6aae":"best_pipeline_model.fit(X_train, y_train)","103a5c39":"ypreds = best_pipeline_model.predict(X_test)\n\nRMSE = np.sqrt(mean_squared_error(y_test, ypreds))\n\nprint(f\"Best Model Random Forest has RMSE : {RMSE}\")","81beaf1c":"model = best_pipeline_model['RF']\nmodel.feature_importances_","16e022be":"#### Model Declaration","1b8daa9a":"### Pipeline Creation <br><br><br>\n\n* Data Preprocessing using Standard Scaler\n* Reduce dimension using PCA\n* Apply Classifier","b160e0bc":"Let's perform hyper-parameter tuning on RandomForestRegressor using GridSearchCV","a147b1fb":"Now, we can obtain the best model using the above parameters. ","df5c4038":"RandomForestRegressor gives the best performance on this dataset as per the above configuration","35788567":"## Feature Importances","6cef0746":"### Summary -> <br>\nIn this notebook, we shall learn how to \n* make pipelines\n* perform hyperparameter search using GridSearchCV on pipelines","b10d7ca2":"### GridSearch followed by final pipeline"}}