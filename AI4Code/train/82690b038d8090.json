{"cell_type":{"8a649c8b":"code","e1245d83":"code","58e76823":"code","3a4bf1ab":"code","097a74bc":"code","7dcfc1e9":"code","1de924b8":"code","c2e670c1":"code","797b4e97":"code","05863335":"code","549b4af5":"markdown","007a2bab":"markdown","00fa55f6":"markdown","565124b7":"markdown","3783aa0d":"markdown","89dd91ab":"markdown","272c2c43":"markdown"},"source":{"8a649c8b":"# Imports\nimport numpy as np\nimport pandas as pd\nimport os\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\ndf_main = pd.read_excel('\/kaggle\/input\/ad-blockers-to-use-or-not-to-use\/Research data.xlsx')\ndf_main['used_ad_block'] = df_main['Current users of ad blockers'] | df_main['Past users of ad blockers']","e1245d83":"print(df_main.head())\nprint(df_main.info())","58e76823":"fig, ax = plt.subplots()\n\nplt.style.use('fivethirtyeight')\n\ncurrent = df_main['Current users of ad blockers'].value_counts()[1]\npast = df_main['Past users of ad blockers'].value_counts()[1]\nnever = df_main['used_ad_block'].value_counts()[0]\n\nsize = 0.7\nvals = np.array([[current, past], [never, 0]])\ncmap = plt.get_cmap(\"tab20c\")\nouter_colors = cmap(np.arange(2)*4)\ninner_colors = cmap(np.array([1, 3, 5]))\n\nwedges,_ = ax.pie(vals.sum(axis=1), radius=2, colors=outer_colors, wedgeprops=dict(width=size, edgecolor='w'))\nleg1 = ax.legend(wedges, ['Used an Ad Blocker', 'Never Used an Ad Blocker'],\n          title='Outer',\n          loc=\"center left\",\n          bbox_to_anchor=(-1.4, 0, 0.5, 1))\n\nwedges,_ = ax.pie(vals.flatten(), radius=2-size, colors=inner_colors, wedgeprops=dict(width=size, edgecolor='w'))\nleg2 = ax.legend(wedges, ['Currently Uses an Ad Blocker', 'Used an Ad Blocker, but not now', 'Never Used an Ad Blocker'],\n          title='Inner',\n          loc=\"center right\",\n          bbox_to_anchor=(2.2, 0, 0.5, 1))\n\nax.set(aspect='equal')\nax.add_artist(leg1)\nplt.title('Respondents Ad Blocker Usage', pad = 100)\nplt.show()\n\n","3a4bf1ab":"plt.figure(figsize=(20,10))\nsns.distplot(df_main['Age'], kde=False)\nplt.title('Age Distribution')\nplt.ylabel('Number of Respondents')\nplt.show()\n\ndef assign_age_bin(row):\n    age = row.Age\n    if age <= 17:\n        return \"17 and Under\"\n    elif age >= 18 and age <= 24:\n        return \"18 to 24\"\n    elif age >= 25 and age <= 34:\n        return \"25 to 34\"\n    elif age >= 35 and age <= 44:\n        return \"35 to 44\"\n    elif age >= 45 and age <= 54:\n        return \"45 to 54\"\n    elif age >= 55 and age <= 64:\n        return \"55 to 64\"\n    elif age >= 65:\n        return \"65+\"\n\n    \ndf_main['age_bin'] = df_main.apply(lambda row: assign_age_bin(row), axis=1)\ncol_order = ['17 and Under', '18 to 24', '25 to 34', '35 to 44', '45 to 54', '55 to 64', '65+']\n\nax = sns.catplot(x='used_ad_block', y=None, col=\"age_bin\", data=df_main,saturation=.5,col_order=col_order,kind='count', ci=None, aspect=.6)\nplt.show()\n\nprob = []\nfor age_bin_lab in col_order:\n    vc = df_main[df_main.age_bin == age_bin_lab]['used_ad_block'].value_counts()\n    prob.append(vc[1]\/(vc[0] + vc[1]))\n\nplt.figure(figsize=(20,10))\nsns.lineplot(x = col_order, y = prob)\nsns.scatterplot(x = col_order, y = prob, s = 200)\nplt.title('Age Group vs. Ad Blocker Usage')\nplt.xlabel('Age Group')\nplt.ylabel('Percentage of Respondents who have used Ad Blockers')\nplt.show()","097a74bc":"ax = sns.catplot(x='used_ad_block', y=None, col=\"Sex\", data=df_main,saturation=.5,col_order=['female','male'],kind='count', ci=None, aspect=.6)\nplt.show()\n\ncols = ['female', 'male']\nprob = []\nfor sex in cols:\n    vc = df_main[df_main.Sex == sex]['used_ad_block'].value_counts()\n    prob.append(vc[1]\/(vc[0] + vc[1]))\n    \nplt.figure(figsize=(6,6))\nsns.barplot(x = cols, y = prob)\nplt.title('Sex vs. Ad Blocker Usage')\nplt.ylim((0.25, 0.5))\nplt.xlabel('Sex')\nplt.ylabel('Percentage of Respondents who have used Ad Blockers')\nplt.show()\n","7dcfc1e9":"df_female = df_main[df_main[\"Sex\"] == 'female']\ndf_male = df_main[df_main[\"Sex\"] == 'male']\ncol_order = ['17 and Under', '18 to 24', '25 to 34', '35 to 44', '45 to 54', '55 to 64', '65+']\n\nax = sns.catplot(x='used_ad_block', y=None, col=\"age_bin\", data=df_female,saturation=.5,col_order=col_order,kind='count', ci=None, aspect=.6)\nax.fig.suptitle('Female Respondents', y=1.1)\nplt.show()\n\nax = sns.catplot(x='used_ad_block', y=None, col=\"age_bin\", data=df_male,saturation=.5,col_order=col_order,kind='count', ci=None, aspect=.6)\nax.fig.suptitle('Male Respondents', y =1.1)\nplt.show()\n\nprob_female = []\nprob_male = []\nfor age_bin_lab in col_order:\n    vc = df_female[df_female.age_bin == age_bin_lab]['used_ad_block'].value_counts()\n    prob_female.append(vc[1]\/(vc[0] + vc[1]))\n    vc = df_male[df_male.age_bin == age_bin_lab]['used_ad_block'].value_counts()\n    prob_male.append(vc[1]\/(vc[0] + vc[1]))\n    \nplt.figure(figsize=(20,10))\nsns.lineplot(x = col_order, y = prob_female, color='m')\nsns.scatterplot(x = col_order, y = prob_female, s = 200, color='m', label='female')\nsns.lineplot(x = col_order, y = prob_male, color='g')\nsns.scatterplot(x = col_order, y = prob_male, s = 200,color = 'g', label='male')\nplt.title('Age Group and Sex vs. Ad Blocker Usage')\nplt.xlabel('Age Group')\nplt.ylabel('Percentage of Respondents who have used Ad Blockers')\nplt.legend()\nplt.show()","1de924b8":"df_main['Sex'] = df_main['Sex'].astype('category')\ndf_main['Sex_Cat'] = df_main['Sex'].cat.codes\ndf_data = df_main.copy()\ntarget = df_data[\"used_ad_block\"]\ndf_data = df_data.drop(columns=['Sex','Current users of ad blockers', 'Past users of ad blockers', 'used_ad_block'])","c2e670c1":"import xgboost as xgb\nfrom xgboost import XGBClassifier\n\n\ndef warn(*args, **kwargs):\n    pass\nimport warnings\nwarnings.warn = warn\nfrom sklearn import model_selection\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import  f1_score\nfrom sklearn import preprocessing ,decomposition, model_selection,metrics,pipeline\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn import tree\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score, precision_score, recall_score, plot_confusion_matrix\nfrom sklearn.svm import LinearSVC, SVC, NuSVC\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.naive_bayes import MultinomialNB, BernoulliNB\nimport random\n\nX_train, X_test, y_train, y_test = train_test_split(df_data, target, random_state = 1, shuffle = True)","797b4e97":"def show_cm(classifier, X_test, y_test):\n    plt.style.use('default')\n    class_names = ['Never Used Ad Blocker', 'Has Used Ad Blocker']\n    titles_options = [(\"Confusion matrix, without normalization\", None),\n                  (\"Normalized confusion matrix\", 'true')]\n    for title, normalize in titles_options:\n        disp = plot_confusion_matrix(classifier, X_test, y_test,\n                                 display_labels=class_names,\n                                 cmap=plt.cm.Blues,\n                                 normalize=normalize,\n                                 xticks_rotation = 30)\n        plt.title(title)\n        plt.show()","05863335":"# Logistic Regression\nlr = LogisticRegression()\nlr.fit(X_train ,y_train)\nlr_pred = lr.predict(X_test)\nlr_score = accuracy_score(y_test, lr_pred)\nprint('LogisticRegression Score: ', lr_score)\nshow_cm(lr, df_data, target)\n\n# XGBoost\nxgb_classifier=xgb.XGBClassifier(objective='binary:logistic',learning_rate = 0.1,gamma=0.01,max_depth = 10,booster=\"gbtree\")\nxgb_classifier.fit(X_train ,y_train)\nxgb_pred = xgb_classifier.predict(X_test)\nxgb_score = accuracy_score(y_test,xgb_pred)\nprint('XGBoost Score: ',xgb_score)\nshow_cm(xgb_classifier, df_data, target)\n\n# Decision Tree\ndt_clf = tree.DecisionTreeClassifier()\ndt_clf.fit(X_train ,y_train)\ndt_pred = dt_clf.predict(X_test)\ndt_score = accuracy_score(y_test,dt_pred)\nprint('Decision Tree Score: ',dt_score)\nshow_cm(dt_clf, df_data, target)\n\n# AdaBoost\nfrom sklearn.ensemble import AdaBoostClassifier\nada_clf = AdaBoostClassifier(n_estimators=1500,learning_rate=1,algorithm='SAMME.R')\nada_clf.fit(X_train ,y_train)\nada_pred = ada_clf.predict(X_test)\nada_score = accuracy_score(y_test,ada_pred)\nprint('AdaBoost Decision Tree Score: ',ada_score)\nshow_cm(ada_clf, df_data, target)\n\n# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nrf_clf = RandomForestClassifier(max_depth=10, random_state=0)\nrf_clf.fit(X_train ,y_train)\nrf_pred = rf_clf.predict(X_test)\nrf_score = accuracy_score(y_test,rf_pred)\nprint('Random Forest Score: ',rf_score)\nshow_cm(rf_clf, df_data, target)\n\n# Linear Support Vector Classification\nlsvc = LinearSVC()\nlsvc.fit(X_train ,y_train)\nlsvc_pred = lsvc.predict(X_test)\nlsvc_score = accuracy_score(y_test,lsvc_pred)\nprint('LinearSVC Score: ', lsvc_score)\nshow_cm(lsvc, df_data, target)\n\n# Support Vector Classification\nsvc = SVC()\nsvc.fit(X_train ,y_train)\nsvc_pred = svc.predict(X_test)\nsvc_score = accuracy_score(y_test,svc_pred)\nprint('SVC Score: ', svc_score)\nshow_cm(svc, df_data, target)\n\n# Nu-Support Vector Classification\nnusvc = NuSVC()\nnusvc.fit(X_train ,y_train)\nnusvc_pred = count_nusvc.predict(X_test)\nnusvc_score = accuracy_score(y_test, nusvc_pred)\nprint('NuSVC Score: ', nusvc_score)\nshow_cm(nusvc, df_data, target)\n\n# Stochastic Gradient Descent\nsgd = SGDClassifier()\nsgd.fit(X_train ,y_train)\nsgd_pred = count_sgd.predict(X_test)\nsgd_score = accuracy_score(y_test,sgd_pred)\nprint('SGD Score: ', sgd_score)\nshow_cm(sgd, df_data, target)\n\n\nmodels = pd.DataFrame({\n    'Model': ['Linear Support Vector Classification', 'Support vector Classification', 'Nu-Support Vector Classification', \n              'Stochastic Gradient Decent', 'Logistic Regression','XGBoost','AdaBoost', 'Decision Tree', 'Random Forest'],\n    'Score': [ \n              lsvc_score, svc_score, nusvc_score, \n              sgd_score, lr_score, xgb_score, ada_score, dt_score, rf_score]})\nmodels = models.sort_values(by=\"Score\",ascending=False)\nprint(models.to_string())","549b4af5":"We observe that the 25-34 years old and male demographic is the most likely to have experience using an Ad Blocker; over 73% of those surveyed in that demographic report so. Conversely, the least likely demo are 65+ and female; less than 0.1% of those surveyed report having experience using an Ad Blocker.","007a2bab":"# Exploratory Data Analysis\n","00fa55f6":"From here we can see that age is correlated with Ad Blocker Usage. Ad Blocker Usage peaks around 18-24 years old and then decreases as age increases.\n\n","565124b7":"# Models\nBefore we do any prediction, let's encode the Sex column with Label Encoding.","3783aa0d":"We observe that the male respondents in the survey were more likely to have used an Ad Blocker then the female respondents. Now let's combine Age Group and Sex to gain insight on more specific demographics.","89dd91ab":"The first thing I did was add a new column 'used_ad_block', which equals 1 if the respondent was a current user or past user of ad block and 0 otherwise. I didn't realize that the columns 'Current users of ad blockers' and 'Past users of ad blockers' were mutually exclusive, so I could've just added them, but I used the logical OR join instead.\n\nNow let's do some general data surveying and create some visualizations.","272c2c43":"From the pie chart, we can see that most users of Ad Blockers don't abandon the service; of those who reported using Ad Blockers, roughly 21% used it in the past but not currently. Most respondents don't use an Ad Blocker; roughly 61% reported never using an Ad Blocker."}}