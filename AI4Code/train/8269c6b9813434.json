{"cell_type":{"504d9f7c":"code","d538255c":"code","4faa3983":"code","6bca5a23":"code","c70f4d39":"code","a6694570":"code","baa1052c":"code","a7004841":"code","f8bd8992":"code","71df1791":"code","a321ae59":"code","88875115":"code","3e114fdf":"code","9a4b1340":"code","625ecec5":"code","ef59c0bd":"code","9f134f45":"code","96257430":"markdown"},"source":{"504d9f7c":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom keras.utils.np_utils import to_categorical\n%matplotlib inline","d538255c":"train_dir=pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest_dir=pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","4faa3983":"train_dir.head()","6bca5a23":"X_train=train_dir.drop(labels = [\"label\"],axis = 1)\nX_train.head()","c70f4d39":"y_train=train_dir['label']\ny_train.head()","a6694570":"sns.countplot(y_train,data=train_dir)","baa1052c":"y_train= to_categorical(y_train, num_classes = 10)\n","a7004841":"X_train = X_train \/ 255.0\ntest_dir = test_dir \/ 255.0\n","f8bd8992":"#RESHAPING\nX_train = X_train.values.reshape(-1, 28 , 28, 1)\ntest_dir = test_dir.values.reshape(-1, 28 , 28, 1)","71df1791":"from sklearn.model_selection import train_test_split\n\nX, X_val, y, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=7)","a321ae59":"from tensorflow.keras import regularizers\nmodel=tf.keras.models.Sequential([tf.keras.layers.Conv2D(32,(5,5),activation='relu',input_shape=(28,28,1),padding='Same'),\n                                           tf.keras.layers.MaxPooling2D(2,2),\n                                           tf.keras.layers.Dropout(0.2),\n                                           tf.keras.layers.Conv2D(32,(3,3),activation='relu',padding='Same'),\n                                           tf.keras.layers.MaxPooling2D(2,2),\n                                           tf.keras.layers.Conv2D(64,(3,3),activation='relu',padding='Same'),\n                                           tf.keras.layers.MaxPooling2D(2,2),\n                                           tf.keras.layers.Conv2D(64,(3,3),activation='relu',padding='Same'),\n                                           tf.keras.layers.MaxPooling2D(2,2),\n                                           tf.keras.layers.Flatten(),\n                                           tf.keras.layers.Dense(512,activation='relu'),\n                                           tf.keras.layers.Dropout(0.3),\n                                           tf.keras.layers.Dense(10,activation='softmax')])\n\nmodel.summary()","88875115":"from keras.utils import plot_model\nplot_model(model, show_shapes=True)","3e114fdf":"model.compile(optimizer=tf.keras.optimizers.RMSprop(lr=0.001),\n             loss='categorical_crossentropy',\n             metrics=['accuracy'])","9a4b1340":"class mycallbacks(tf.keras.callbacks.Callback):\n    def on_epoch_end(self,epochs,logs={}):\n        if(logs.get('accuracy')>0.99):\n            self.model.stop_training=True\n            \ncallbacks=mycallbacks()\n\nhistory=model.fit(X,y,validation_data=(X_val,y_val),epochs=30,verbose=1,callbacks=[callbacks])","625ecec5":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\n\nplt.figure()\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()\n","ef59c0bd":"results =[]\nfor index in range(28000):\n    img = test_dir[index].reshape(1, 28, 28, 1)\n    pred = np.argmax(model.predict(img))\n    results.append(pred)","9f134f45":"submission = pd.DataFrame()\nsubmission['ImageId'] = [i for i in range(1, 28001)]\nsubmission['Label'] = results\n\nsubmission.to_csv('.\/DR.csv', index=False)\n","96257430":"# NORMALIZATION"}}