{"cell_type":{"5404b603":"code","a5bd4150":"code","edc1f235":"code","4f1afebb":"code","c1c93f9e":"code","ac028352":"code","ea17eeac":"code","8c9aa95c":"code","9ef83169":"code","00f15940":"code","61d40554":"code","0e542b68":"code","d5ea029f":"code","68c0fe65":"code","9dfcab45":"code","6af32616":"code","c29d27cc":"code","5ea34ac3":"code","5330eef8":"code","3ddd4dba":"code","72471170":"code","ba140dd1":"code","4469382d":"code","a4b1f2fe":"code","6b8fb5c8":"code","02bf4940":"code","cff9dcce":"code","63264b8e":"code","8a2ac0ff":"code","ad3b283d":"code","f0797113":"code","fbde6d4a":"code","8da16eae":"code","c83df582":"code","71fa8eb5":"code","5baae33f":"code","260e8f86":"code","77772059":"code","7c06d8b6":"code","24137a6e":"code","b2528380":"code","9f4d9a49":"code","87a76770":"code","7a46c8cd":"code","1dee2766":"code","ba7cafb7":"code","7d6cf4b2":"markdown","e0b18789":"markdown","7bada94e":"markdown","87952bee":"markdown","de500d83":"markdown","38bd1fe4":"markdown","83141861":"markdown","10eadf17":"markdown","4d56e8d1":"markdown","d327fb5f":"markdown","7ba6cb7b":"markdown","6be6c157":"markdown","a615c67c":"markdown","3536d174":"markdown"},"source":{"5404b603":"import numpy as np \nimport pandas as pd \nfrom IPython.display import Markdown\nfrom datetime import timedelta\nfrom datetime import datetime\n\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport pycountry\nfrom plotly.offline import init_notebook_mode, iplot \nimport plotly.offline as py\nimport plotly.express as ex\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\nimport matplotlib.pyplot as plt\npy.init_notebook_mode(connected=True)\nplt.style.use(\"seaborn-talk\")\nplt.rcParams['figure.figsize'] = 8, 5\nplt.rcParams['image.cmap'] = 'viridis'\nimport folium\n\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly\n\npd.set_option('display.max_rows', None)\nfrom math import sin, cos, sqrt, atan2, radians\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\nfrom sklearn import preprocessing\nfrom xgboost import XGBRegressor\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","a5bd4150":"# Load Data\ndf = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv',parse_dates=['ObservationDate'])\ndf.drop(['SNo','Last Update'],axis =1, inplace = True)\ndf['Active'] = df['Confirmed'] - (df['Recovered'] + df['Deaths'])\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\n#train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv')\n#test = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv')\n#submission = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv')\nweek5_train = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/train.csv')\nweek5_test = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/test.csv')\nweek5_sub = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/submission.csv')","edc1f235":"full_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n# replacing Mainland china with just China\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[['Confirmed', 'Deaths', 'Recovered', 'Active']] = full_table[['Confirmed', 'Deaths', 'Recovered', 'Active']].fillna(0)\n# fixing datatypes\nfull_table['Recovered'] = full_table['Recovered'].astype(int)","4f1afebb":"full_grouped = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\n# new cases ======================================================\ntemp = full_grouped.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n# renaming columns\ntemp.columns = ['Country\/Region', 'Date', 'New cases', 'New deaths', 'New recovered']\n# =================================================================\n# merging new values\nfull_grouped = pd.merge(full_grouped, temp, on=['Country\/Region', 'Date'])\n# filling na with 0\nfull_grouped = full_grouped.fillna(0)\n# fixing data types\ncols = ['New cases', 'New deaths', 'New recovered']\nfull_grouped[cols] = full_grouped[cols].astype('int')\nfull_grouped['New cases'] = full_grouped['New cases'].apply(lambda x: 0 if x<0 else x)","c1c93f9e":"country_wise = full_grouped[full_grouped['Date']==max(full_grouped['Date'])].reset_index(drop=True).drop('Date', axis=1)\n# group by country\ncountry_wise = country_wise.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases'].sum().reset_index()\n# per 100 cases\ncountry_wise['Deaths \/ 100 Cases'] = round((country_wise['Deaths']\/country_wise['Confirmed'])*100, 2)\ncountry_wise['Recovered \/ 100 Cases'] = round((country_wise['Recovered']\/country_wise['Confirmed'])*100, 2)\ncountry_wise['Deaths \/ 100 Recovered'] = round((country_wise['Deaths']\/country_wise['Recovered'])*100, 2)\ncols = ['Deaths \/ 100 Cases', 'Recovered \/ 100 Cases', 'Deaths \/ 100 Recovered']\ncountry_wise[cols] = country_wise[cols].fillna(0)\n\n\ntoday = full_grouped[full_grouped['Date']==max(full_grouped['Date'])].reset_index(drop=True).drop('Date', axis=1)[['Country\/Region', 'Confirmed']]\nlast_week = full_grouped[full_grouped['Date']==max(full_grouped['Date'])-timedelta(days=7)].reset_index(drop=True).drop('Date', axis=1)[['Country\/Region', 'Confirmed']]\ntemp = pd.merge(today, last_week, on='Country\/Region', suffixes=(' today', ' last week'))\n# temp = temp[['Country\/Region', 'Confirmed last week']]\ntemp['1 week change'] = temp['Confirmed today'] - temp['Confirmed last week']\ntemp = temp[['Country\/Region', 'Confirmed last week', '1 week change']]\ncountry_wise = pd.merge(country_wise, temp, on='Country\/Region')\ncountry_wise['1 week % increase'] = round(country_wise['1 week change']\/country_wise['Confirmed last week']*100, 2)","ac028352":"day_wise = full_grouped.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases'].sum().reset_index()\n# number cases per 100 cases\nday_wise['Deaths \/ 100 Cases'] = round((day_wise['Deaths']\/day_wise['Confirmed'])*100, 2)\nday_wise['Recovered \/ 100 Cases'] = round((day_wise['Recovered']\/day_wise['Confirmed'])*100, 2)\nday_wise['Deaths \/ 100 Recovered'] = round((day_wise['Deaths']\/day_wise['Recovered'])*100, 2)\n# no. of countries\nday_wise['No. of countries'] = full_grouped[full_grouped['Confirmed']!=0].groupby('Date')['Country\/Region'].unique().apply(len).values\n# fillna by 0\ncols = ['Deaths \/ 100 Cases', 'Recovered \/ 100 Cases', 'Deaths \/ 100 Recovered']\nday_wise[cols] = day_wise[cols].fillna(0)","ea17eeac":"'''\ntrain.rename(columns={'Country_Region':'Country','Province_State':'State'}, inplace=True)\ntest.rename(columns={'Country_Region':'Country','Province_State':'State'}, inplace=True)\ntrain.rename(columns={'Province_State':'State'}, inplace=True)\ntest.rename(columns={'Province_State':'State'}, inplace=True)\ntrain['Date'] = pd.to_datetime(train['Date'], infer_datetime_format=True)\ntest['Date'] = pd.to_datetime(test['Date'], infer_datetime_format=True)\n'''","8c9aa95c":"'''\ny1_xTrain = train.iloc[:, -2]\ny1_xTrain.head()\ny2_xTrain = train.iloc[:, -1]\ny2_xTrain.head()\n\nmissing_value = \"empty\"\ndef fillState(state, country):\n    if state == missing_value: return country\n    return state\n    \n'''","9ef83169":"'''\ntrain_x = train.copy()\ntrain_x['State'].fillna(missing_value, inplace=True)\ntrain_x['State'] = train_x.loc[:, ['State', 'Country']].apply(lambda x : fillState(x['State'], x['Country']), axis=1)\ntrain_x.loc[:, 'Date'] = train_x.Date.dt.strftime(\"%m%d\")\ntrain_x[\"Date\"]  = train_x[\"Date\"].astype(int)\n\ntest_x = test.copy()\ntest_x['State'].fillna(missing_value, inplace=True)\ntest_x['State'] = test_x.loc[:, ['State', 'Country']].apply(lambda x : fillState(x['State'], x['Country']), axis=1)\ntest_x.loc[:, 'Date'] = test_x.Date.dt.strftime(\"%m%d\")\ntest_x[\"Date\"]  =test_x[\"Date\"].astype(int')\n'''","00f15940":"week5_train = week5_train.drop(columns = ['County' , 'Province_State'])\nweek5_test = week5_test.drop(columns = ['County' , 'Province_State'])\nweek5_train['Date']= pd.to_datetime(week5_train['Date']).dt.strftime(\"%Y%m%d\").astype(int)\nweek5_test['Date'] = pd.to_datetime(week5_test['Date']).dt.strftime(\"%Y%m%d\").astype(int)","61d40554":"date_wise_data = df[['Country\/Region',\"ObservationDate\",\"Confirmed\",\"Deaths\",\"Recovered\",'Active']]\ndate_wise_data['Date'] = date_wise_data['ObservationDate'].apply(pd.to_datetime, dayfirst=True)\ndate_wise_data = date_wise_data.groupby([\"ObservationDate\"]).sum().reset_index()\ndate_wise_data.rename({\"ObservationDate\": 'Date','Recovered':'Cured'}, axis=1,inplace= True) \ndef formatted_text(string):\n    display(Markdown(string))\n#date_wise_data.to_csv('date_wise_data.csv')","0e542b68":"# Converting columns into numberic for Train ======================================================\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\nw5_X = week5_train.iloc[:,1].values\nweek5_train.iloc[:,1] = labelencoder.fit_transform(w5_X.astype(str))\nw5_X = week5_train.iloc[:,5].values\nweek5_train.iloc[:,5] = labelencoder.fit_transform(w5_X)\n\n#Converting columns into numberic Test ======================================================\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\nw5te_X = week5_test.iloc[:,1].values\nweek5_test.iloc[:,1] = labelencoder.fit_transform(w5te_X)\nw5te_X = week5_test.iloc[:,5].values\nweek5_test.iloc[:,5] = labelencoder.fit_transform(w5te_X)\n\n#Train & Test ======================================================\nx = week5_train.iloc[:,1:6]\ny = week5_train.iloc[:,6]\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test =train_test_split(x,y, test_size = 0.2, random_state = 0 )","d5ea029f":"#Adding Population Data\npop = pd.read_csv(\"..\/input\/population-by-country-2020\/population_by_country_2020.csv\")\n# select only population\npop = pop.iloc[:, :2]\n# rename column names\npop.columns = ['Country\/Region', 'Population']\n# merged data\ncountry_wise = pd.merge(country_wise, pop, on='Country\/Region', how='left')\n# update population\ncols = ['Burma', 'Congo (Brazzaville)', 'Congo (Kinshasa)', \"Cote d'Ivoire\", 'Czechia', \n        'Kosovo', 'Saint Kitts and Nevis', 'Saint Vincent and the Grenadines', \n        'Taiwan*', 'US', 'West Bank and Gaza']\npops = [54409800, 89561403, 5518087, 26378274, 10708981, 1793000, \n        53109, 110854, 23806638, 330541757, 4543126]\nfor c, p in zip(cols, pops):\n    country_wise.loc[country_wise['Country\/Region']== c, 'Population'] = p\ncountry_wise['Cases \/ Million People'] = round((country_wise['Confirmed'] \/ country_wise['Population']) * 1000000)","68c0fe65":"temp = country_wise.copy()\ntemp = temp.iloc[:,:6]\ntemp = temp.sort_values('Confirmed',ascending=False).reset_index()\ntemp.style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Active\"])\\\n                        .background_gradient(cmap='PuBu',subset=[\"New cases\"])\n                        ","9dfcab45":"sir_data = country_wise.copy()\nsir_data[\"Susceptible\"] = sir_data['Population'] - sir_data['Confirmed']\nsir_data[\"Infected\"] = sir_data['Confirmed'] - sir_data['Recovered'] - sir_data['Deaths']\n#sir_data[\"Recovered\"] = sir_data['Recovered']\nsir_data[\"Fatal\"] = sir_data.loc[:, 'Deaths']\nresponse_variables = [\"Susceptible\", \"Infected\", \"Recovered\", \"Fatal\"]","6af32616":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\ntemp1 = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\nfig = px.pie(temp1,\n             values= 'value',labels=['Active Cases','Cured','Death'],\n             names=\"variable\",\n             title=\"Current Situation of COVID-19 in the world\",\n             template=\"seaborn\")\nfig.update_traces(hoverinfo='label+percent',textinfo='value', textfont_size=14,\n                  marker=dict(colors=['#263fa3','#cc3c2f','#2fcc41'], line=dict(color='#FFFFFF', width=2)))\nfig.update_traces(textposition='inside')\n#fig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","c29d27cc":"temp = date_wise_data.copy()\nfig = go.Figure(data=[\ngo.Bar(name='Deaths', x=temp['Date'], y=temp['Deaths'],marker_color='#ff0000'),\ngo.Bar(name='Recovered Cases', x=temp['Date'], y=temp['Cured'],marker_color='#2bad57'),\ngo.Bar(name='Confirmed Cases', x=temp['Date'], y=temp['Confirmed'],marker_color='#326ac7')])\nfig.update_layout(barmode='stack')\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_layout(title_text='Distribution of COVID-19 Confirmed Cases,Recovered Cases and Deaths',\n                  plot_bgcolor='rgb(275, 270, 273)')\nfig.show()","5ea34ac3":"perday2 = date_wise_data.groupby(['Date'])['Confirmed','Cured','Deaths','Active'].sum().reset_index().sort_values('Date',ascending = True)\nperday2['New Daily Confirmed Cases'] = perday2['Confirmed'].sub(perday2['Confirmed'].shift())\nperday2['New Daily Confirmed Cases'].iloc[0] = perday2['Confirmed'].iloc[0]\nperday2['New Daily Confirmed Cases'] = perday2['New Daily Confirmed Cases'].astype(int)\nperday2['New Daily Cured Cases'] = perday2['Cured'].sub(perday2['Cured'].shift())\nperday2['New Daily Cured Cases'].iloc[0] = perday2['Cured'].iloc[0]\nperday2['New Daily Cured Cases'] = perday2['New Daily Cured Cases'].astype(int)\nperday2['New Daily Deaths Cases'] = perday2['Deaths'].sub(perday2['Deaths'].shift())\nperday2['New Daily Deaths Cases'].iloc[0] = perday2['Deaths'].iloc[0]\nperday2['New Daily Deaths Cases'] = perday2['New Daily Deaths Cases'].astype(int)\nperday2.to_csv('perday_daily_cases.csv')","5330eef8":"import plotly.express as px\nfig = px.bar(perday2, x=\"Date\", y=\"New Daily Confirmed Cases\", barmode='group',height=500)\nfig.update_layout(title_text='New COVID-19 cases reported daily all over the World',plot_bgcolor='rgb(275, 270, 273)')\nfig.show()","3ddd4dba":"import plotly.express as px\nfig = px.bar(perday2, x=\"Date\", y=\"New Daily Cured Cases\", barmode='group',height=500,\n            color_discrete_sequence = ['#319146'])\nfig.update_layout(title_text='New COVID-19 Recovered cases reported daily all over the world',plot_bgcolor='rgb(275, 270, 273)')\nfig.show()","72471170":"import plotly.express as px\nfig = px.bar(perday2, x=\"Date\", y=\"New Daily Deaths Cases\", barmode='group',height=500,\n             color_discrete_sequence = ['#e31010'])\nfig.update_layout(title_text='New COVID-19 Deaths reported daily all over the India',plot_bgcolor='rgb(275, 270, 273)')\nfig.show()","ba140dd1":"temp = date_wise_data.copy()\ntemp = date_wise_data.groupby('Date')['Confirmed', 'Deaths', 'Cured'].sum().reset_index()\nfig = px.scatter(temp, x=\"Date\", y=\"Confirmed\", color=\"Confirmed\",\n                 size='Confirmed', hover_data=['Confirmed'],\n                 color_discrete_sequence = ex.colors.cyclical.IceFire)\nfig.update_layout(title_text='Trend of Daily Coronavirus Cases in India',\n                  plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()","4469382d":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=date_wise_data['Date'], y=date_wise_data['Confirmed'],\n                    mode='lines+markers',marker_color='blue',name='Confimed Cases'))\nfig.add_trace(go.Scatter(x=date_wise_data['Date'],y=date_wise_data['Active'], \n                mode='lines+markers',marker_color='purple',name='Active Cases'))\nfig.add_trace(go.Scatter(x=date_wise_data['Date'], y=date_wise_data['Cured'],\n                mode='lines+markers',marker_color='green',name='Recovered'))\nfig.add_trace(go.Scatter(x=date_wise_data['Date'], y=date_wise_data['Deaths'], \n                mode='lines+markers',marker_color='red',name='Deaths'))\nfig.update_layout(title_text='Trend of Novel Coronavirus Cases Globaly',plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()","a4b1f2fe":"cnf = '#263fa3' # confirmed - blue\nact = '#fe9801' # active case - yellow\nrec = '#21bf73' # recovered - green\ndth = '#de260d' # death - red\ntmp = date_wise_data.melt(id_vars=\"Date\",value_vars=['Deaths','Cured' ,'Active','Confirmed'],\n                 var_name='Case',value_name='Count')\nfig = px.area(tmp, x=\"Date\", y=\"Count\",color='Case',\n              title='Trend Over Weeks',color_discrete_sequence = [dth,rec,act,cnf])\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=550, height=600)\nfig.show()","6b8fb5c8":"temp = date_wise_data.copy()\ntemp['Recovery Rate'] = temp['Cured']\/temp['Confirmed']*100\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Recovery Rate'],\n                    mode='lines+markers',marker_color='green'))\nfig.update_layout(title_text = 'Trend of Recovery Rate')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()","02bf4940":"temp = date_wise_data.copy()\ntemp['Mortality Rate'] = temp['Deaths']\/temp['Confirmed']*100\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Mortality Rate'],mode='lines+markers',marker_color='red'))\nfig.update_layout(title_text = 'Trend of Mortality Rate')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()","cff9dcce":"temp = country_wise.sort_values('Active').tail(15).reset_index()\ntemp = temp.sort_values('Active',ascending=True)\nfig = go.Figure(data=[\ngo.Bar(name='Active', y=temp['Country\/Region'], x=temp['Active'], \n       orientation='h',marker_color='#0f5dbd'),\n    go.Bar(name='Cured', y=temp['Country\/Region'], x=temp['Recovered'], \n       orientation='h',marker_color='#319146'),\ngo.Bar(name='Death', y=temp['Country\/Region'], x=temp['Deaths'], \n       orientation='h',marker_color='#e03216')])\nfig.update_layout(barmode='stack',width=600, height=800)\n#fig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_layout(title_text='Active Cases,Cured,Deaths in Top 15 countries',\n                  plot_bgcolor='rgb(275, 270, 273)')\nfig.show()","63264b8e":"temp = country_wise.sort_values('New cases').tail(15).reset_index()\ntemp = temp.sort_values('New cases', ascending=False)\nstate_order = temp['Country\/Region']\nfig = px.bar(temp,x=\"New cases\", y=\"Country\/Region\", color='Country\/Region',color_discrete_sequence = ex.colors.cyclical.Edge,\n             title=' Top 15 Countries by New Cases', orientation='h', text='New cases')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)')\nfig.update_layout(template = 'plotly_white')\nfig.show()","8a2ac0ff":"temp = country_wise.sort_values('Confirmed').tail(15).reset_index()\ntemp = temp.sort_values('Confirmed', ascending=False)\nstate_order = temp['Country\/Region']\nfig = px.bar(temp,x=\"Confirmed\", y=\"Country\/Region\", color='Country\/Region',color_discrete_sequence = ex.colors.cyclical.IceFire,\n             title=' Top 15 Countries by Number Confirmed cases', orientation='h', text='Confirmed')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)')\nfig.update_layout(template = 'plotly_white')\nfig.show()","ad3b283d":"temp = country_wise.sort_values('Recovered').tail(15).reset_index()\ntemp = temp.sort_values('Recovered', ascending=False)\nstate_order = temp['Country\/Region']\nfig = px.bar(temp,x=\"Recovered\", y=\"Country\/Region\", color='Country\/Region',color_discrete_sequence = ex.colors.cyclical.Twilight, \n             title=' Top 15 Countries by Number Recovered cases', orientation='h', text='Recovered')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)')\nfig.update_layout(template = 'plotly_white')\nfig.show()","f0797113":"temp = country_wise.sort_values('Deaths').tail(15).reset_index()\ntemp = temp.sort_values('Deaths', ascending=False)\nstate_order = temp['Country\/Region']\nfig = px.bar(temp,x=\"Deaths\", y=\"Country\/Region\", color='Country\/Region',\n             title=' Top 15 Countries by Number Deaths', orientation='h', text='Deaths')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)')\nfig.update_layout(template = 'plotly_white')\nfig.show()","fbde6d4a":"fig = px.choropleth(country_wise, locations=\"Country\/Region\", \n                    locationmode='country names', color=\"Confirmed\",\n                    hover_name=\"Country\/Region\", hover_data=['Confirmed','Recovered','Deaths','Active'],\n                    color_continuous_scale=\"peach\", \n                    title='Current situation of COVID-19 Worldwide')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","8da16eae":"temp = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths'].max()\ntemp = temp.reset_index()\ntemp['Date'] = pd.to_datetime(temp['Date'])\ntemp['Date'] = temp['Date'].dt.strftime('%m\/%d\/%Y')\ntemp['size'] = temp['Confirmed'].pow(0.3)\nfig = px.scatter_geo(temp,locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='size', hover_name=\"Country\/Region\",\n                     range_color= [0, max(temp['Confirmed'])], animation_frame=\"Date\", \n                     title='Spread of COVID-19 all over the world over time',\n                     color_continuous_scale=px.colors.diverging.curl)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","c83df582":"from folium.plugins import HeatMap, HeatMapWithTime\nm = folium.Map(location=[54,15], zoom_start=2,tiles='cartodbpositron',height = 500,width = '95%')\nHeatMap(data=full_table[['Lat', 'Long']], radius=15).add_to(m)\nm","71fa8eb5":"'''\nle = preprocessing.LabelEncoder()\n\ntrain_x.Country = le.fit_transform(train_x.Country)\ntrain_x['State'] = le.fit_transform(train_x['State'])\n\ntest_x.Country = le.fit_transform(test_x.Country)\ntest_x['State'] = le.fit_transform(test_x['State'])\n\ncountries = train_x.Country.unique()\n'''","5baae33f":"'''\noutput = pd.DataFrame({'ForecastId': [], 'ConfirmedCases': [], 'Fatalities': []})\n\nfor country in countries:\n    states = train_x.loc[train_x.Country == country, :].State.unique()\n    \n    for state in states:\n        # Train ======================================================\n        train_X = train_x.loc[(train_x.Country == country) & (train_x.State == state), ['State', 'Country', 'Date', 'ConfirmedCases', 'Fatalities']]\n        \n        train_y1 = train_X.loc[:, 'ConfirmedCases']\n        train_y2 = train_X.loc[:, 'Fatalities']\n        \n        train_X = train_X.loc[:, ['State', 'Country', 'Date']]\n        \n        train_X.Country = le.fit_transform(train_X.Country)\n        train_X['State'] = le.fit_transform(train_X['State'])\n        \n        # Test ======================================================\n        \n        test_X = test_x.loc[(test_x.Country == country) & (test_x.State == state), ['State', 'Country', 'Date', 'ForecastId']]\n        \n        test_X_Id = test_X.loc[:, 'ForecastId']\n        test_X = test_X.loc[:, ['State', 'Country', 'Date']]\n        \n        test_X.Country = le.fit_transform(test_X.Country)\n        test_X['State'] = le.fit_transform(test_X['State'])\n        \n        # Data Fitting ======================================================\n        xmodel1 = XGBRegressor(n_estimators=1000)\n        xmodel1.fit(train_X,train_y1)\n        y1_xpred = xmodel1.predict(test_X)\n        \n        xmodel2 = XGBRegressor(n_estimators=1000)\n        xmodel2.fit(train_X, train_y2)\n        y2_xpred = xmodel2.predict(test_X)\n        \n        data = pd.DataFrame({'ForecastId': test_X_Id, 'ConfirmedCases': y1_xpred, 'Fatalities': y2_xpred})\n        output = pd.concat([output,data], axis=0)\n        \noutput.ForecastId = output.ForecastId.astype('int')\n#output.to_csv('submission.csv', index=False)\n#output.head()\n'''","260e8f86":"#Creating Pipleline ======================================================\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\n\npipeline_dt = Pipeline([('scaler2' , StandardScaler()),\n                        ('RandomForestRegressor: ', RandomForestRegressor())])\npipeline_dt.fit(x_train , y_train)\nprediction = pipeline_dt.predict(x_test)\n\n#score\nscore = pipeline_dt.score(x_test,y_test)\nprint('Score: ' + str(score))\n\n#Error\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_absolute_error\nval_mae = mean_absolute_error(prediction,y_test)\nprint('error value: ' + str(val_mae))\n\n#predict\nX_test = week5_test.iloc[:,1:6]\npredictor = pipeline_dt.predict(X_test)\nprediction_list = [x for x in predictor]\n\n#submission\nsub = pd.DataFrame({'ForecastId': week5_test.index , 'TargetValue': prediction_list})\n\np=sub.groupby(['ForecastId'])['TargetValue'].quantile(q=0.05).reset_index()\nq=sub.groupby(['ForecastId'])['TargetValue'].quantile(q=0.5).reset_index()\nr=sub.groupby(['ForecastId'])['TargetValue'].quantile(q=0.95).reset_index()\n\np.columns = ['ForecastId' , 'q0.05']\nq.columns = ['ForecastId' , 'q0.5']\nr.columns = ['ForecastId' , 'q0.95']\n\np = pd.concat([p,q['q0.5'] , r['q0.95']],1)\n\np['q0.05']=p['q0.05'].clip(0,10000)\np['q0.05']=p['q0.5'].clip(0,10000)\np['q0.05']=p['q0.95'].clip(0,10000)\n\np['ForecastId'] =p['ForecastId']+ 1\n\nsub=pd.melt(p, id_vars=['ForecastId'], value_vars=['q0.05','q0.5','q0.95'])\nsub['variable']=sub['variable'].str.replace(\"q\",\"\", regex=False)\nsub['ForecastId_Quantile']=sub['ForecastId'].astype(str)+'_'+sub['variable']\nsub['TargetValue']=sub['value']\nsub=sub[['ForecastId_Quantile','TargetValue']]\nsub.reset_index(drop=True,inplace=True)\nsub.to_csv(\"submission.csv\",index=False)\nsub.head()","77772059":"import scipy\ndef logistic(x, L, k, x0):\n    return L \/ (1 + np.exp(-k * (x - x0))) + 1\nd_df = date_wise_data.copy()\np0 = (0,0,0)\ndef plot_logistic_fit_data(d_df, title, p0=p0):\n    d_df = d_df.sort_values(by=['Date'], ascending=True)\n    d_df['x'] = np.arange(len(d_df)) + 1\n    d_df['y'] = d_df['Confirmed']\n\n    x = d_df['x']\n    y = d_df['y']\n\n    c2 = scipy.optimize.curve_fit(logistic,  x,  y,  p0=p0 )\n    #y = logistic(x, L, k, x0)\n    popt, pcov = c2\n\n    x = range(1,d_df.shape[0] + int(popt[2]))\n    y_fit = logistic(x, *popt)\n    \n    p_df = pd.DataFrame()\n    p_df['x'] = x\n    p_df['y'] = y_fit.astype(int)\n    \n    print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\n    print(\"Predicted k (growth rate): \" + str(float(popt[1])))\n    print(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")\n\n    x0 = int(popt[2])\n    \n    traceC = go.Scatter(\n        x=d_df['x'], y=d_df['y'],\n        name=\"Confirmed\",\n        marker=dict(color=\"Red\"),\n        mode = \"markers+lines\",\n        text=d_df['Confirmed'],\n    )\n\n    traceP = go.Scatter(\n        x=p_df['x'], y=p_df['y'],\n        name=\"Predicted\",\n        marker=dict(color=\"blue\"),\n        mode = \"lines\",\n        text=p_df['y'],\n    )\n    \n    trace_x0 = go.Scatter(\n        x = [x0, x0], y = [0, p_df.loc[p_df['x']==x0,'y'].values[0]],\n        name = \"X0 - Inflexion point\",\n        marker=dict(color=\"black\"),\n        mode = \"lines\",\n        text = \"X0 - Inflexion point\"\n    )\n\n    data = [traceC, traceP, trace_x0]\n\n    layout = dict(title = 'Cumulative Conformed cases and logistic curve projection',\n          xaxis = dict(title = 'Day since first case', showticklabels=True), \n          yaxis = dict(title = 'Number of cases'),\n          hovermode = 'closest',plot_bgcolor='rgb(275, 270, 273)'\n         )\n    fig = dict(data=data, layout=layout)\n    iplot(fig, filename='covid-logistic-forecast')\n    \nL = 250000\nk = 0.25\nx0 = 100\np0 = (L, k, x0)\nplot_logistic_fit_data(d_df,'ALL')","7c06d8b6":"import datetime\nimport scipy\np0 = (0,0)\ndef plot_exponential_fit_data(d_df, title, delta, p0):\n    d_df = d_df.sort_values(by=['Date'], ascending=True)\n    d_df['x'] = np.arange(len(d_df)) + 1\n    d_df['y'] = d_df['Confirmed']\n\n    x = d_df['x'][:-delta]\n    y = d_df['y'][:-delta]\n\n    c2 = scipy.optimize.curve_fit(lambda t,a,b: a*np.exp(b*t),  x,  y,  p0=p0)\n\n    A, B = c2[0]\n    print(f'(y = Ae^(Bx)) A: {A}, B: {B}')\n    x = range(1,d_df.shape[0] + 1)\n    y_fit = A * np.exp(B * x)\n    \n    traceC = go.Scatter(\n        x=d_df['x'][:-delta], y=d_df['y'][:-delta],\n        name=\"Confirmed (included for fit)\",\n        marker=dict(color=\"Red\"),\n        mode = \"markers+lines\",\n        text=d_df['Confirmed'],\n    )\n\n    traceV = go.Scatter(\n        x=d_df['x'][-delta-1:], y=d_df['y'][-delta-1:],\n        name=\"Confirmed (validation)\",\n        marker=dict(color=\"blue\"),\n        mode = \"markers+lines\",\n        text=d_df['Confirmed'],\n    )\n    \n    traceP = go.Scatter(\n        x=np.array(x), y=y_fit,\n        name=\"Projected values (fit curve)\",\n        marker=dict(color=\"green\"),\n        mode = \"lines\",\n        text=y_fit,\n    )\n\n    data = [traceC, traceV, traceP]\n\n    layout = dict(title = 'Cumulative Conformed cases and exponential curve projection',\n          xaxis = dict(title = 'Day since first case', showticklabels=True), \n          yaxis = dict(title = 'Number of cases'),plot_bgcolor='rgb(275, 270, 273)',\n          hovermode = 'closest'\n         )\n    fig = dict(data=data, layout=layout)\n    iplot(fig, filename='covid-exponential-forecast')\np0 = (40, 0.2)\nplot_exponential_fit_data(d_df, 'I', 7, p0)","24137a6e":"cnf = date_wise_data.copy()\nConfirmed = cnf[['Date','Confirmed']]\nConfirmed = date_wise_data.groupby('Date').sum()['Confirmed'].reset_index()\nConfirmed.columns = ['ds','y']\nConfirmed['ds'] = pd.to_datetime(Confirmed['ds'])\ndth = date_wise_data.copy()\ndeaths = dth[['Date','Deaths']]\ndeaths = date_wise_data.groupby('Date').sum()['Deaths'].reset_index()\ndeaths.columns = ['ds','y']\ndeaths['ds'] = pd.to_datetime(deaths['ds'])","b2528380":"m= Prophet(interval_width=0.99)\nm.fit(Confirmed)\nfuture = m.make_future_dataframe(periods=14)\nfuture_confirmed = future.copy() # for non-baseline predictions later on\nforecast = m.predict(future)\nforecast = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]","9f4d9a49":"fig = plot_plotly(m,forecast)\nfig.update_layout(title_text = 'Confirmed cases Prediction using prophet')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\npy.iplot(fig) ","87a76770":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=date_wise_data['Date'], y=date_wise_data['Confirmed'],\n                    mode='lines+markers',marker_color='blue',name='Actual'))\nfig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['yhat_upper'],\n                    mode='lines+markers',marker_color='Orange',name='Predicted'))\nfig.update_layout(title_text = 'Confirmed cases Predicted vs Actual using prophet')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()","7a46c8cd":"md= Prophet(interval_width=0.99)\nmd.fit(deaths)\nfutured = md.make_future_dataframe(periods=14)\nfuture_confirmed = futured.copy()\nforecastd = md.predict(futured)\nforecastd = forecastd[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]","1dee2766":"fig = plot_plotly(md, forecastd)\nfig.update_layout(title_text = 'Deaths Prediction using prophet')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\npy.iplot(fig) ","ba7cafb7":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=date_wise_data['Date'], y=date_wise_data['Deaths'],\n                    mode='lines+markers',marker_color='blue',name='Actual'))\nfig.add_trace(go.Scatter(x=forecastd['ds'], y=forecastd['yhat_upper'],\n                    mode='lines+markers',marker_color='red',name='Predicted'))\nfig.update_layout(title_text = 'Deaths Predicted vs Actual using prophet')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()","7d6cf4b2":"# Country Wise","e0b18789":"# Library","7bada94e":"### XGBRegressor","87952bee":"# Overview","de500d83":"# Data Cleaning","38bd1fe4":"# Trends","83141861":"### Random Forest Regressor","10eadf17":"# Demographics","4d56e8d1":"# Forecasting","d327fb5f":"### Forecasting Deaths with Prophet (Baseline)","7ba6cb7b":"### Fit a logistic curve\n\nLet's try to fit a Logistic curve for predicting future behavior of the cumulative number of confirmed cases.\n\n* L (the maximum number of confirmed cases) = 250000 taken from the US example (this is from long time obsolete now)\n* k (growth rate) = 0.25 approximated value from most of the countries\n* x0 (the day of the inflexion) = 80 approximated\nThe curve being:\n\n$$y = \\frac{L}{1 + e^{-k (x-x_0)}} + 1$$","6be6c157":"### Forecasting Confirmed Cases with Prophet (Baseline)**","a615c67c":"### Fitting an exponential curve\n\nThe parameters for the curve are:\n* A - the constant multiplier for the exponential\n* B - the multiplier for the exponent\n\nThe curve is thus:\n$$y = Ae^{Bx}$$","3536d174":"## Load Data"}}