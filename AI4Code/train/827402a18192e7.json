{"cell_type":{"dc671a58":"code","cd8e8e6f":"code","63e8ab52":"code","09f5a36b":"code","91380959":"code","7f41b18a":"code","bc5ce873":"code","e7317b42":"code","42026a67":"code","619f0f3d":"code","2308263f":"code","7f46a83b":"code","ab9e5f18":"code","bc14c4fd":"code","b3915a36":"code","25510b77":"code","dd47e4bd":"code","b7a44eef":"code","bf32cfa9":"code","7d3e4b24":"code","14cbb291":"code","b30fe6b8":"code","649b96fe":"code","0781b46e":"code","4d82eda0":"code","563c878a":"code","91670272":"code","9400e153":"code","e0143710":"code","88610742":"code","c226620c":"code","43f61f56":"code","42454132":"code","919debe2":"code","89e2631f":"code","973393c4":"code","21a96364":"code","a3653d63":"code","2a306a12":"code","9e8831e2":"code","faa3f547":"code","19f2d6f1":"code","5c820e23":"code","86ad6978":"code","6a306e55":"code","2f9fc641":"code","1f3bbebe":"code","68c4610e":"code","18d1aca4":"code","ac823933":"code","af410dc1":"code","8684cb2e":"code","d629af6f":"code","3713a8b4":"code","e899b993":"code","4486de55":"code","80171267":"code","ea0955ce":"code","5289780f":"markdown","c4de5cea":"markdown","6a802180":"markdown","ada2c639":"markdown","253933f1":"markdown","ad0f9eb4":"markdown","602356b9":"markdown","dfd1a945":"markdown","1c6f98d3":"markdown","4b6cb033":"markdown"},"source":{"dc671a58":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","cd8e8e6f":"df = pd.read_csv('..\/input\/iris-dataset\/iris.data.csv', header=None)","63e8ab52":"df.head()","09f5a36b":"df.tail()","91380959":"y = df.iloc[:,4].values","7f41b18a":"np.unique(y)","bc5ce873":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()","e7317b42":"le = le.fit(y)","42026a67":"y = le.transform(y)","619f0f3d":"y","2308263f":"le.classes_","7f46a83b":"X = df.iloc[:,[2,3]].values","ab9e5f18":"X","bc14c4fd":"X.shape, y.shape","b3915a36":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1, stratify=y)","25510b77":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","dd47e4bd":"print('Labels counts in y:', np.bincount(y))\nprint('Labels counts in y_train:', np.bincount(y_train))\nprint('Labels counts in y_test:', np.bincount(y_test))","b7a44eef":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nsc.fit(X_train)\nX_train_std = sc.transform(X_train)\nX_test_std = sc.transform(X_test)","bf32cfa9":"X_train_std","7d3e4b24":"X_test_std","14cbb291":"from sklearn.linear_model import Perceptron\n\nppn = Perceptron(max_iter=40, eta0=0.1, random_state=1)\nppn.fit(X_train_std, y_train)","b30fe6b8":"y_pred = ppn.predict(X_test_std)","649b96fe":"y_pred","0781b46e":"print('Misclassified samples: %d' % (y_test != y_pred).sum())","4d82eda0":"from sklearn.metrics import accuracy_score\n\nprint('Accuracy: %.2f' % accuracy_score(y_test, y_pred))","563c878a":"from matplotlib.colors import ListedColormap\nimport matplotlib.pyplot as plt\n\n\ndef plot_decision_regions(X, y, classifier, test_idx=None, resolution=0.02):\n\n    # setup marker generator and color map\n    markers = ('s', 'x', 'o', '^', 'v')\n    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')\n    cmap = ListedColormap(colors[:len(np.unique(y))])\n\n    # plot the decision surface\n    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),\n                           np.arange(x2_min, x2_max, resolution))\n    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)\n    Z = Z.reshape(xx1.shape)\n    plt.contourf(xx1, xx2, Z, alpha=0.3, cmap=cmap)\n    plt.xlim(xx1.min(), xx1.max())\n    plt.ylim(xx2.min(), xx2.max())\n\n    for idx, cl in enumerate(np.unique(y)):\n        plt.scatter(x=X[y == cl, 0], \n                    y=X[y == cl, 1],\n                    alpha=0.8, \n                    c=colors[idx],\n                    marker=markers[idx], \n                    label=cl, \n                    edgecolor='black')\n\n    # highlight test samples\n    if test_idx:\n        # plot all samples\n        X_test, y_test = X[test_idx, :], y[test_idx]\n\n        plt.scatter(X_test[:, 0],\n                    X_test[:, 1],\n                    c='',\n                    edgecolor='black',\n                    alpha=1.0,\n                    linewidth=1,\n                    marker='o',\n                    s=100, \n                    label='test set')","91670272":"X_combined_std = np.vstack((X_train_std, X_test_std))\ny_combined = np.hstack((y_train, y_test))","9400e153":"X_combined_std.shape, y_combined.shape","e0143710":"y_train.shape, y_test.shape","88610742":"plot_decision_regions(X=X_combined_std, y=y_combined,\n                      classifier=ppn, test_idx=range(105, 150))\nplt.xlabel('petal length [standardized]')\nplt.ylabel('petal width [standardized]')\nplt.legend(loc='upper left')\nplt.show()","c226620c":"x1_min, x1_max = X_combined_std[:, 0].min() - 1, X_combined_std[:, 0].max() + 1\nx2_min, x2_max = X_combined_std[:, 1].min() - 1, X_combined_std[:, 1].max() + 1","43f61f56":"x1_min, x1_max, x2_min, x2_max","42454132":"xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, 0.02),np.arange(x2_min, x2_max, 0.02))","919debe2":"xx1.shape, xx2.shape","89e2631f":"nx, ny = (3, 3)\nx = np.linspace(0, 2, nx)\ny = np.linspace(0, 1, ny)","973393c4":"x","21a96364":"y","a3653d63":"xv, yv = np.meshgrid(x, y)","2a306a12":"xv","9e8831e2":"yv","faa3f547":"xv.ravel()","19f2d6f1":"(np.array([xx1.ravel(), xx2.ravel()]).T).shape","5c820e23":"from io import StringIO\ncsv_data = \\\n'''A,B,C,D\n1.0,2.0,3.0,4.0\n5.0,6.0,,8.0\n10.0,11.0,12.0,'''\ndf = pd.read_csv(StringIO(csv_data))\ndf","86ad6978":"# remove rows that contain missing values\n\ndf.dropna(axis=0)","6a306e55":"# remove columns that contain missing values\n\ndf.dropna(axis=1)","2f9fc641":"# only drop rows where all columns are NaN\n\ndf.dropna(how='all')","1f3bbebe":"# drop rows that have less than 3 real values \n\ndf.dropna(thresh=4)","68c4610e":"# only drop rows where NaN appear in specific columns (here: 'C')\n\ndf.dropna(subset=['C'])","18d1aca4":"# impute missing values via the column mean\n\nfrom sklearn.preprocessing import Imputer\n\nimr = Imputer(missing_values='NaN', strategy='mean', axis=0)\nimr = imr.fit(df.values)\nimputed_data = imr.transform(df.values)\nimputed_data","ac823933":"import pandas as pd\n\ndf = pd.DataFrame([['green', 'M', 10.1, 'class2'],\n                   ['red', 'L', 13.5, 'class1'],\n                   ['blue', 'XL', 15.3, 'class2']])\n\ndf.columns = ['color', 'size', 'price', 'classlabel']\ndf","af410dc1":"from sklearn.preprocessing import LabelEncoder\nX = df[['color', 'size', 'price']].values\n\ncolor_le_1 = LabelEncoder()\nX[:, 0] = color_le_1.fit_transform(X[:, 0])\nX","8684cb2e":"color_le_2 = LabelEncoder()\nX[:, 1] = color_le_2.fit_transform(X[:, 1])\nX","d629af6f":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(\n    [('oh_enc', OneHotEncoder(sparse=False), [0, 1]),], remainder='passthrough')","3713a8b4":"ct.fit_transform(X)","e899b993":"df_wine = pd.read_csv('..\/input\/wine-quality\/winequalityN.csv')","4486de55":"df_wine","80171267":"np.unique(df_wine['type'])","ea0955ce":"from IPython.display import Image\nImage(\"..\/input\/percetron-image\/Perceptron.PNG\")","5289780f":"# Encoding (One Hot Encoding)","c4de5cea":"# Eliminating samples or features with missing values","6a802180":"# Task 1 Use Classifiers: Logistic Regression, SVM and Decision Tree from sklearn","ada2c639":"# Wine Dataset","253933f1":"# Part-2 Data Manipulation","ad0f9eb4":"# Training a perceptron via scikit-learn","602356b9":"# Task 2 Apply different kind of filtering to clean the data","dfd1a945":"# Part-1 Applying Different Estimators For Simple Classification Problem","1c6f98d3":"# Assignment - Implement a perceptron from scratch and apply it to iris dataset given here.","4b6cb033":"# Imputing missing values"}}