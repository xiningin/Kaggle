{"cell_type":{"528c4a34":"code","abc767e0":"code","6037721f":"code","3a51c2ae":"code","9f18c08c":"code","afb80e92":"code","c437e1b8":"code","1ccc0257":"code","ce316b58":"markdown","26ebb267":"markdown","60c4a21b":"markdown","bbb2cfad":"markdown","32fab59c":"markdown","13e9fb98":"markdown","5ff74ed3":"markdown"},"source":{"528c4a34":"# TODO: get z3 installed in the default kaggle-docker image\n!pip3 install -q z3-solver","abc767e0":"import re\nimport time\n\nfrom z3 import *\n\n\ndef cryptarithmetic(input: str, limit=None, unique=True):\n    start_time  = time.perf_counter()\n    solver      = Solver()\n    token_words = re.findall(r'\\b[a-zA-Z]\\w*\\b', input)  # words must start with a letter\n\n    letters = { l: Int(l) for l in list(\"\".join(token_words)) }\n    words   = { w: Int(w) for w in list(token_words)          }\n\n    # Constraint: convert letters to numbers\n    for l,s in letters.items(): solver.add(0 <= s, s <= 9)\n\n    # Constraint: letters must be unique (optional)\n    if unique and len(letters) <= 10:\n        solver.add(Distinct(*letters.values()))\n\n    # Constraint: words must be unique\n    solver.add(Distinct(*words.values()))\n\n    # Constraint: first letter of words must not be zero\n    for word in words.keys():\n        solver.add( letters[word[0]] != 0 )\n\n    # Constraint: convert words to decimal values\n    for word, word_symbol in words.items():\n        solver.add(word_symbol == Sum(*[\n            letter_symbol * 10**index\n            for index,letter_symbol in enumerate(reversed([\n                letters[l] for l in list(word)\n                ]))\n            ]))\n\n    # Constraint: problem definition as defined by input\n    solver.add(eval(input, None, words))\n\n    solutions = []\n    print(input)\n    while str(solver.check()) == 'sat':\n        solutions.append({ str(s): solver.model()[s] for w,s in words.items() })\n        print(solutions[-1])\n        solver.add(Or(*[ s != solver.model()[s] for w,s in words.items() ]))\n        if limit and len(solutions) >= limit: break\n\n    run_time = round(time.perf_counter() - start_time, 1)\n    print(f'== {len(solutions)} solutions found in {run_time}s ==\\n')\n    return solutions","6037721f":"cryptarithmetic('XY - X == YX')\ncryptarithmetic('TWO + TWO == FOUR')\ncryptarithmetic('EIGHT - FOUR == FOUR', limit=4)\npass","3a51c2ae":"cryptarithmetic('X \/ Y == 2')  # Division by 2 is rounded\ncryptarithmetic('ONE * TWO == THREE', limit=1)\ncryptarithmetic(\"Y == A * X + B\")\ncryptarithmetic('( FOUR - TWO ) * ( NINE - ONE ) + TWO == EIGHTEEN', limit=1)\npass","9f18c08c":"cryptarithmetic(\"A**2 + B**2 == C**2\",  unique=False)\ncryptarithmetic(\"A**2 - B**2 == C**2\",  unique=False)\ncryptarithmetic(\"A**2 * B**2 == CD**2\", unique=False)\npass","afb80e92":"challenges = [\n    \"WHAT + WAS + THY == CAUSE\",\n    \"HIS + HORSE + IS == SLAIN\",\n    \"HERE + SHE == COMES\",\n    \"FOR + LACK + OF == TREAD\",\n    \"I + WILL + PAY + THE == THEFT\",\n]\nfor challenge in challenges:\n    cryptarithmetic(challenge, limit=1)\npass","c437e1b8":"\nchallenges = [\n    \" \".join([\n        \"TEN + HERONS + REST + NEAR + NORTH + SEA + SHORE + AS + TAN + TERNS + SOAR + TO + ENTER + THERE + AS + \",\n        \"HERONS + NEST + ON + STONES + AT + SHORE + THREE + STARS + ARE + SEEN + TERN + SNORES + ARE + NEAR == SEVVOTH\",        \n    ]),\n    \" \".join([\n        \"SO + MANY + MORE + MEN + SEEM + TO + SAY + THAT + THEY + MAY + SOON + TRY + TO + STAY + AT + HOME + \",\n        \"SO + AS + TO + SEE + OR + HEAR + THE + SAME + ONE + MAN + TRY + TO + MEET + THE + TEAM + ON + THE + \",\n        \"MOON + AS + HE + HAS + AT + THE + OTHER + TEN == TESTS\",\n    ]),\n]\nfor challenge in challenges:\n    cryptarithmetic(challenge, limit=1)\npass","1ccc0257":"longest = \" \".join([\n    \"THIS + A + FIRE + THEREFORE + FOR + ALL + HISTORIES + I + TELL + A + TALE + THAT + FALSIFIES + \",\n    \"ITS + TITLE + TIS + A + LIE + THE + TALE + OF + THE + LAST + FIRE + HORSES + LATE + AFTER + \",\n    \"THE + FIRST + FATHERS + FORESEE + THE + HORRORS + THE + LAST + FREE + TROLL + TERRIFIES + THE + \",\n    \"HORSES + OF + FIRE + THE + TROLL + RESTS + AT + THE + HOLE + OF + LOSSES + IT + IS + THERE + \",\n    \"THAT + SHE + STORES + ROLES + OF + LEATHERS + AFTER + SHE + SATISFIES + HER + HATE + OFF + \",\n    \"THOSE + FEARS + A + TASTE + RISES + AS + SHE + HEARS + THE + LEAST + FAR + HORSE + THOSE + \",\n    \"FAST + HORSES + THAT + FIRST + HEAR + THE + TROLL + FLEE + OFF + TO + THE + FOREST + THE + \",\n    \"HORSES + THAT + ALERTS + RAISE + THE + STARES + OF + THE + OTHERS + AS + THE + TROLL + ASSAILS + \",\n    \"AT + THE + TOTAL + SHIFT + HER + TEETH + TEAR + HOOF + OFF + TORSO + AS + THE + LAST + HORSE + \",\n    \"FORFEITS + ITS + LIFE + THE + FIRST + FATHERS + HEAR + OF + THE + HORRORS + THEIR + FEARS + \",\n    \"THAT + THE + FIRES + FOR + THEIR + FEASTS + ARREST + AS + THE + FIRST + FATHERS + RESETTLE + \",\n    \"THE + LAST + OF + THE + FIRE + HORSES + THE + LAST + TROLL + HARASSES + THE + FOREST + HEART + \",\n    \"FREE + AT + LAST + OF + THE + LAST + TROLL + ALL + OFFER + THEIR + FIRE + HEAT + TO + THE + \",\n    \"ASSISTERS + FAR + OFF + THE + TROLL + FASTS + ITS + LIFE + SHORTER + AS + STARS + RISE + THE + \", \n    \"HORSES + REST + SAFE + AFTER + ALL + SHARE + HOT + FISH + AS + THEIR + AFFILIATES + TAILOR + \",\n    \"A + ROOFS + FOR + THEIR + SAFE == FORTRESSES\"    \n])\n# cryptarithmetic(longest, limit=0)","ce316b58":"# Cryptarithmetic Addition","26ebb267":"This last one takes too long to run on Kaggle, but runs in 7h on localhost","60c4a21b":"# Cryptarithmetic Solver\n\n> Verbal arithmetic, also known as alphametics, cryptarithmetic, cryptarithm or word addition, is a type of mathematical game consisting of a mathematical equation among unknown numbers, whose digits are represented by letters. The goal is to identify the value of each letter. The name can be extended to puzzles that use non-alphabetic symbols instead of letters.\n>\n> <img src='https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/60eeaf958fa73a6a989f00725cf7d4c3f516e929' style='text-align:left' alt=\"SEND + MORE = MONEY\"\/>\n> - https:\/\/en.wikipedia.org\/wiki\/Verbal_arithmetic\n\nThis is a general purpose solver that can handle addition, subtraction, multiplication, integer division and rasing to powers.\n\nThis implementation uses the z3 constraint satisfaction solver \n- https:\/\/github.com\/Z3Prover\/z3\/wiki","bbb2cfad":"```\n{\n  'THIS': 9874,\n  'A': 1,\n  'FIRE': 5730,\n  'THEREFORE': 980305630,\n  'FOR': 563,\n  'ALL': 122,\n  'HISTORIES': 874963704,\n  'I': 7,\n  'TELL': 9022,\n  'TALE': 9120,\n  'THAT': 9819,\n  'FALSIFIES': 512475704,\n  'ITS': 794,\n  'TITLE': 97920,\n  'TIS': 974,\n  'LIE': 270,\n  'THE': 980,\n  'OF': 65,\n  'LAST': 2149,\n  'HORSES': 863404,\n  'LATE': 2190,\n  'AFTER': 15903,\n  'FIRST': 57349,\n  'FATHERS': 5198034,\n  'FORESEE': 5630400,\n  'HORRORS': 8633634,\n  'FREE': 5300,\n  'TROLL': 93622,\n  'TERRIFIES': 903375704,\n  'RESTS': 30494,\n  'AT': 19,\n  'HOLE': 8620,\n  'LOSSES': 264404,\n  'IT': 79,\n  'IS': 74,\n  'THERE': 98030,\n  'SHE': 480,\n  'STORES': 496304,\n  'ROLES': 36204,\n  'LEATHERS': 20198034,\n  'SATISFIES': 419745704,\n  'HER': 803,\n  'HATE': 8190,\n  'OFF': 655,\n  'THOSE': 98640,\n  'FEARS': 50134,\n  'TASTE': 91490,\n  'RISES': 37404,\n  'AS': 14,\n  'HEARS': 80134,\n  'LEAST': 20149,\n  'FAR': 513,\n  'HORSE': 86340,\n  'FAST': 5149,\n  'HEAR': 8013,\n  'FLEE': 5200,\n  'TO': 96,\n  'FOREST': 563049,\n  'ALERTS': 120394,\n  'RAISE': 31740,\n  'STARES': 491304,\n  'OTHERS': 698034,\n  'ASSAILS': 1441724,\n  'TOTAL': 96912,\n  'SHIFT': 48759,\n  'TEETH': 90098,\n  'TEAR': 9013,\n  'HOOF': 8665,\n  'TORSO': 96346,\n  'FORFEITS': 56350794,\n  'LIFE': 2750,\n  'THEIR': 98073,\n  'FIRES': 57304,\n  'FEASTS': 501494,\n  'ARREST': 133049,\n  'RESETTLE': 30409920,\n  'HARASSES': 81314404,\n  'HEART': 80139,\n  'OFFER': 65503,\n  'HEAT': 8019,\n  'ASSISTERS': 144749034,\n  'FASTS': 51494,\n  'SHORTER': 4863903,\n  'STARS': 49134,\n  'RISE': 3740,\n  'REST': 3049,\n  'SAFE': 4150,\n  'SHARE': 48130,\n  'HOT': 869,\n  'FISH': 5748,\n  'AFFILIATES': 1557271904,\n  'TAILOR': 917263,\n  'ROOFS': 36654,\n  'FORTRESSES': 5639304404\n}\n== 1 solutions found in 26153.0s ==\n```","32fab59c":"# Cryptarithmetic Challenges\n- https:\/\/www.reddit.com\/r\/dailyprogrammer\/comments\/7p5p2o\/20180108_challenge_346_easy_cryptarithmetic_solver\/","13e9fb98":"# Cryptarithmetic Multiplication","5ff74ed3":"# Cryptarithmetic Powers"}}