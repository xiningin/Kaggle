{"cell_type":{"36a7518f":"code","02cd935c":"code","98235e55":"code","43571d7c":"code","a8645542":"code","33fc3cc4":"code","7c92d7ac":"code","84a4dcb1":"code","72232089":"code","dde7aaa8":"code","2ee8655c":"code","5ed62f03":"code","df4caef6":"code","bb616ab9":"code","de855fd9":"code","12a60f3e":"code","12f1a4c8":"code","aa6acf00":"code","e4936fe3":"code","ba0ef0a6":"code","8b3f6fe2":"code","813baa60":"code","8e0bf689":"code","00ae091f":"markdown"},"source":{"36a7518f":"import pandas as pd, numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nimport seaborn as sns\nimport re","02cd935c":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsubm = pd.read_csv('..\/input\/sample_submission.csv')","98235e55":"train.head()","43571d7c":"len_tr=train.comment_text.str.len()\nsns.distplot(len_tr)","a8645542":"labeled_cols = ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']\ntrain['none'] = 1-train[labeled_cols].max(axis=1)\ntrain.describe()","33fc3cc4":"train.isnull().sum()","7c92d7ac":"test.isnull().sum()","84a4dcb1":"def clean_text(text):\n    text = text.lower()\n    text = re.sub(r\"what's\", \"what is \", text)\n    text = re.sub(r\"\\'s\", \" \", text)\n    text = re.sub(r\"\\'ve\", \" have \", text)\n    text = re.sub(r\"can't\", \"cannot \", text)\n    text = re.sub(r\"n't\", \" not \", text)\n    text = re.sub(r\"i'm\", \"i am \", text)\n    text = re.sub(r\"\\'re\", \" are \", text)\n    text = re.sub(r\"\\'d\", \" would \", text)\n    text = re.sub(r\"\\'ll\", \" will \", text)\n    text = re.sub(r\"\\'scuse\", \" excuse \", text)\n    text = re.sub('\\W', ' ', text)\n    text = re.sub('\\s+', ' ', text)\n    text = text.strip(' ')\n    return text","72232089":"train['comment_text'] = train['comment_text'].map(lambda com : clean_text(com))","dde7aaa8":"test['comment_text'] = test['comment_text'].map(lambda com : clean_text(com))","2ee8655c":"X = train.comment_text\ntest_X = test.comment_text","5ed62f03":"from sklearn.feature_extraction.text import TfidfVectorizer\nvect = TfidfVectorizer(max_features=5000,stop_words='english')\nX_dtm = vect.fit_transform(X)\ntest_X_dtm = vect.transform(test_X)","df4caef6":"# import and instantiate the Logistic Regression model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nlogreg = LogisticRegression(C=12.0)\n\n# create submission file\nsubmission_binary = pd.read_csv('..\/input\/sample_submission.csv')\n\nfor label in labeled_cols:\n    print('... Processing {}'.format(label))\n    y = train[label]\n    # train the model using X_dtm & y\n    logreg.fit(X_dtm, y)\n    # compute the training accuracy\n    y_pred_X = logreg.predict(X_dtm)\n    print('Training accuracy is {}'.format(accuracy_score(y, y_pred_X)))\n    # compute the predicted probabilities for X_test_dtm\n    test_y_prob = logreg.predict_proba(test_X_dtm)[:,1]\n    submission_binary[label] = test_y_prob","bb616ab9":"submission_binary.head()","de855fd9":"submission_binary.to_csv('submission_binary.csv',index=False)","12a60f3e":"# create submission file\nsubmission_chains = pd.read_csv('..\/input\/sample_submission.csv')\n# create a function to add features\ndef add_feature(X, feature_to_add):\n    '''\n    Returns sparse feature matrix with added feature.\n    feature_to_add can also be a list of features.\n    '''\n    from scipy.sparse import csr_matrix, hstack\n    return hstack([X, csr_matrix(feature_to_add).T], 'csr')","12f1a4c8":"for label in labeled_cols:\n    print('... Processing {}'.format(label))\n    y = train[label]\n    # train the model using X_dtm & y\n    logreg.fit(X_dtm,y)\n    # compute the training accuracy\n    y_pred_X = logreg.predict(X_dtm)\n    print('Training Accuracy is {}'.format(accuracy_score(y,y_pred_X)))\n    # make predictions from test_X\n    test_y = logreg.predict(test_X_dtm)\n    test_y_prob = logreg.predict_proba(test_X_dtm)[:,1]\n    submission_chains[label] = test_y_prob\n    # chain current label to X_dtm\n    X_dtm = add_feature(X_dtm, y)\n    print('Shape of X_dtm is now {}'.format(X_dtm.shape))\n    # chain current label predictions to test_X_dtm\n    test_X_dtm = add_feature(test_X_dtm, test_y)\n    print('Shape of test_X_dtm is now {}'.format(test_X_dtm.shape))","aa6acf00":"submission_chains.head()","e4936fe3":"# generate submission file\nsubmission_chains.to_csv('submission_chains.csv', index=False)","ba0ef0a6":"# create submission file\nsubmission_combined = pd.read_csv('..\/input\/sample_submission.csv')","8b3f6fe2":"for label in labeled_cols:\n    submission_combined[label] = 0.5*(submission_chains[label]+submission_binary[label])","813baa60":"submission_combined.head()","8e0bf689":"# generate submission file\nsubmission_combined.to_csv('submission_combined.csv', index=False)","00ae091f":"<a href=\".\/submission_combined.csv\"> Download File <\/a>"}}