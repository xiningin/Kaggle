{"cell_type":{"2eab9a60":"code","ea367c62":"code","656f2486":"code","6342c7d9":"code","25d66304":"code","3d12d6d1":"code","1529495f":"code","5c62739c":"code","601ccefe":"code","bc14ba36":"code","63a8e696":"code","8cb93ebb":"markdown","7194a5dd":"markdown","e33164d2":"markdown","51809b96":"markdown","2c0f2be2":"markdown","319f7e93":"markdown","84732736":"markdown","6084b90e":"markdown"},"source":{"2eab9a60":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom glob import glob\nfrom PIL import Image\nimport matplotlib.pylab as plt\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras import backend as K\nfrom keras.preprocessing.image import ImageDataGenerator","ea367c62":"train_images = glob(\"..\/input\/train\/*jpg\")\ntest_images = glob(\"..\/input\/test\/*jpg\")\ndf = pd.read_csv(\"..\/input\/train.csv\")\n\ndf[\"Image\"] = df[\"Image\"].map( lambda x : \"..\/input\/train\/\"+x)\nImageToLabelDict = dict( zip( df[\"Image\"], df[\"Id\"]))","656f2486":"SIZE = 64\n#image are imported with a resizing and a black and white conversion\ndef ImportImage( filename):\n    img = Image.open(filename).convert(\"LA\").resize( (SIZE,SIZE))\n    return np.array(img)[:,:,0]\ntrain_img = np.array([ImportImage( img) for img in train_images])\nx = train_img","6342c7d9":"print( \"%d training images\" %x.shape[0])\n\nprint( \"Nbr of samples\/class\\tNbr of classes\")\nfor index, val in df[\"Id\"].value_counts().value_counts().sort_index().iteritems():\n    print( \"%d\\t\\t\\t%d\" %(index,val))","25d66304":"class LabelOneHotEncoder():\n    def __init__(self):\n        self.ohe = OneHotEncoder()\n        self.le = LabelEncoder()\n    def fit_transform(self, x):\n        features = self.le.fit_transform( x)\n        return self.ohe.fit_transform( features.reshape(-1,1))\n    def transform( self, x):\n        return self.ohe.transform( self.la.transform( x.reshape(-1,1)))\n    def inverse_tranform( self, x):\n        return self.le.inverse_transform( self.ohe.inverse_tranform( x))\n    def inverse_labels( self, x):\n        return self.le.inverse_transform( x)\n\ny = list(map(ImageToLabelDict.get, train_images))\nlohe = LabelOneHotEncoder()\ny_cat = lohe.fit_transform(y)","3d12d6d1":"#constructing class weights\nWeightFunction = lambda x : 1.\/x**0.75\nClassLabel2Index = lambda x : lohe.le.inverse_tranform( [[x]])\nCountDict = dict( df[\"Id\"].value_counts())\nclass_weight_dic = { lohe.le.transform( [image_name])[0] : WeightFunction(count) for image_name, count in CountDict.items()}\ndel CountDict","1529495f":"def plotImages( images_arr, n_images=4):\n    fig, axes = plt.subplots(n_images, n_images, figsize=(12,12))\n    axes = axes.flatten()\n    for img, ax in zip( images_arr, axes):\n        if img.ndim != 2:\n            img = img.reshape( (SIZE,SIZE))\n        ax.imshow( img, cmap=\"Greys_r\")\n        ax.set_xticks(())\n        ax.set_yticks(())\n    plt.tight_layout()","5c62739c":"#plotting training images from training set after resizing and BW conversion\nplotImages( x)","601ccefe":"#use of an image generator for preprocessing and data augmentation\nx = x.reshape( (-1,SIZE,SIZE,1))\ninput_shape = x[0].shape\nx_train = x.astype(\"float32\")\ny_train = y_cat\n\nimage_gen = ImageDataGenerator(\n    #featurewise_center=True,\n    #featurewise_std_normalization=True,\n    rescale=1.\/255,\n    rotation_range=15,\n    width_shift_range=.15,\n    height_shift_range=.15,\n    horizontal_flip=True)\n\n#training the image preprocessing\nimage_gen.fit(x_train, augment=True)\n\n#visualization of some images out of the preprocessing\n#augmented_images, _ = next( image_gen.flow( x_train, y_train.toarray(), batch_size=4*4))\n#plotImages( augmented_images)","bc14ba36":"batch_size = 128\nnum_classes = len(y_cat.toarray()[0])\nepochs = 9\n\nprint('x_train shape:', x_train.shape)\nprint(x_train.shape[0], 'train samples')\n\nmodel = Sequential()\nmodel.add(Conv2D(48, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=input_shape))\nmodel.add(Conv2D(48, (3, 3), activation='sigmoid'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(48, (5, 5), activation='sigmoid'))\nmodel.add(MaxPooling2D(pool_size=(3, 3)))\nmodel.add(Dropout(0.33))\nmodel.add(Flatten())\nmodel.add(Dense(36, activation='sigmoid'))\nmodel.add(Dropout(0.33))\nmodel.add(Dense(36, activation='sigmoid'))\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])\nmodel.summary()\nmodel.fit_generator(image_gen.flow(x_train, y_train.toarray(), batch_size=batch_size),\n          steps_per_epoch=  x_train.shape[0]\/\/batch_size,\n          epochs=epochs,\n          verbose=1,\n          class_weight=class_weight_dic)\n\n#score = model.evaluate(x_train, y_train, verbose=0)\n#print('Training loss: {0:.4f}\\nTraining accuracy:  {1:.4f}'.format(*score))","63a8e696":"import warnings\nfrom os.path import split\n\nwith open(\"sample_submission.csv\",\"w\") as f:\n    with warnings.catch_warnings():\n        f.write(\"Image,Id\\n\")\n        warnings.filterwarnings(\"ignore\",category=DeprecationWarning)\n        for image in test_images:\n            img = ImportImage( image)\n            x = img.astype( \"float32\")\n            #applying preprocessing to test images\n            x = image_gen.standardize( x.reshape(1,SIZE,SIZE))\n            \n            y = model.predict_proba(x.reshape(1,SIZE,SIZE,1))\n            predicted_args = np.argsort(y)[0][::-1][:5]\n            predicted_tags = lohe.inverse_labels( predicted_args)\n            image = split(image)[-1]\n            predicted_tags = \" \".join( predicted_tags)\n            f.write(\"%s,%s\\n\" %(image, predicted_tags))","8cb93ebb":"### Training sample distribution","7194a5dd":"### Image augmentation with Keras prebuilt","e33164d2":"### Predictions on test samples and export for submission","51809b96":"#### One hot encoding on the labels\n\nUsing a composition of a LabelEncoder and OneHotEncoder to one hot encode the target tail kinds.","2c0f2be2":"#### Some visualization","319f7e93":"## Importing the data","84732736":"We read that the classes are very unbalanced: one class has ~800 samples while ~2000 have only one example in the training set. This calls for a lot of data augmentation. ","6084b90e":"## Building and training model"}}