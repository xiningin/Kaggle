{"cell_type":{"7499ee0d":"code","d0a22be0":"code","c9da02ef":"code","67bc5ebe":"code","af22b99a":"code","1f205a42":"code","585836b4":"code","0b6d1571":"code","4cfb218c":"code","f51cc62c":"markdown","70e8d909":"markdown","be43b624":"markdown","03084b07":"markdown","6c32f5d3":"markdown"},"source":{"7499ee0d":"import pathlib\n\nimport pandas as pd","d0a22be0":"def read_data(data_path):\n    # dtypes are borrowed from https:\/\/www.kaggle.com\/konradb\/shrinking-the-data\n    dtypes = {\n        \"MachineIdentifier\": \"category\",\n        \"ProductName\": \"category\",\n        \"EngineVersion\": \"category\",\n        \"AppVersion\": \"category\",\n        \"AvSigVersion\": \"category\",\n        \"IsBeta\": \"int8\",\n        \"RtpStateBitfield\": \"float16\",\n        \"IsSxsPassiveMode\": \"int8\",\n        \"DefaultBrowsersIdentifier\": \"float16\",\n        \"AVProductStatesIdentifier\": \"float32\",\n        \"AVProductsInstalled\": \"float16\",\n        \"AVProductsEnabled\": \"float16\",\n        \"HasTpm\": \"int8\",\n        \"CountryIdentifier\": \"int16\",\n        \"CityIdentifier\": \"float32\",\n        \"OrganizationIdentifier\": \"float16\",\n        \"GeoNameIdentifier\": \"float16\",\n        \"LocaleEnglishNameIdentifier\": \"int16\",\n        \"Platform\": \"category\",\n        \"Processor\": \"category\",\n        \"OsVer\": \"category\",\n        \"OsBuild\": \"int16\",\n        \"OsSuite\": \"int16\",\n        \"OsPlatformSubRelease\": \"category\",\n        \"OsBuildLab\": \"category\",\n        \"SkuEdition\": \"category\",\n        \"IsProtected\": \"float16\",\n        \"AutoSampleOptIn\": \"int8\",\n        \"PuaMode\": \"category\",\n        \"SMode\": \"float16\",\n        \"IeVerIdentifier\": \"float16\",\n        \"SmartScreen\": \"category\",\n        \"Firewall\": \"float16\",\n        \"UacLuaenable\": \"float32\",\n        \"Census_MDC2FormFactor\": \"category\",\n        \"Census_DeviceFamily\": \"category\",\n        \"Census_OEMNameIdentifier\": \"float16\",\n        \"Census_OEMModelIdentifier\": \"float32\",\n        \"Census_ProcessorCoreCount\": \"float16\",\n        \"Census_ProcessorManufacturerIdentifier\": \"float16\",\n        \"Census_ProcessorModelIdentifier\": \"float16\",\n        \"Census_ProcessorClass\": \"category\",\n        \"Census_PrimaryDiskTotalCapacity\": \"float32\",\n        \"Census_PrimaryDiskTypeName\": \"category\",\n        \"Census_SystemVolumeTotalCapacity\": \"float32\",\n        \"Census_HasOpticalDiskDrive\": \"int8\",\n        \"Census_TotalPhysicalRAM\": \"float32\",\n        \"Census_ChassisTypeName\": \"category\",\n        \"Census_InternalPrimaryDiagonalDisplaySizeInInches\": \"float16\",\n        \"Census_InternalPrimaryDisplayResolutionHorizontal\": \"float16\",\n        \"Census_InternalPrimaryDisplayResolutionVertical\": \"float16\",\n        \"Census_PowerPlatformRoleName\": \"category\",\n        \"Census_InternalBatteryType\": \"category\",\n        \"Census_InternalBatteryNumberOfCharges\": \"float32\",\n        \"Census_OSVersion\": \"category\",\n        \"Census_OSArchitecture\": \"category\",\n        \"Census_OSBranch\": \"category\",\n        \"Census_OSBuildNumber\": \"int16\",\n        \"Census_OSBuildRevision\": \"int32\",\n        \"Census_OSEdition\": \"category\",\n        \"Census_OSSkuName\": \"category\",\n        \"Census_OSInstallTypeName\": \"category\",\n        \"Census_OSInstallLanguageIdentifier\": \"float16\",\n        \"Census_OSUILocaleIdentifier\": \"int16\",\n        \"Census_OSWUAutoUpdateOptionsName\": \"category\",\n        \"Census_IsPortableOperatingSystem\": \"int8\",\n        \"Census_GenuineStateName\": \"category\",\n        \"Census_ActivationChannel\": \"category\",\n        \"Census_IsFlightingInternal\": \"float16\",\n        \"Census_IsFlightsDisabled\": \"float16\",\n        \"Census_FlightRing\": \"category\",\n        \"Census_ThresholdOptIn\": \"float16\",\n        \"Census_FirmwareManufacturerIdentifier\": \"float16\",\n        \"Census_FirmwareVersionIdentifier\": \"float32\",\n        \"Census_IsSecureBootEnabled\": \"int8\",\n        \"Census_IsWIMBootEnabled\": \"float16\",\n        \"Census_IsVirtualDevice\": \"float16\",\n        \"Census_IsTouchEnabled\": \"int8\",\n        \"Census_IsPenCapable\": \"int8\",\n        \"Census_IsAlwaysOnAlwaysConnectedCapable\": \"float16\",\n        \"Wdft_IsGamer\": \"float16\",\n        \"Wdft_RegionIdentifier\": \"float16\",\n        \"HasDetections\": \"int8\",\n    }\n    return pd.read_csv(data_path, dtype=dtypes)","c9da02ef":"DATA_PATH = pathlib.Path(\"..\/input\")","67bc5ebe":"train_data = read_data(DATA_PATH \/ \"train.csv\")","af22b99a":"train_data.agg(['size', 'count', 'nunique']).transpose().head(10)","1f205a42":"class CustomPandasDisplayOptions:\n    import pandas.io.formats.format as pf\n\n    _INT_FORMAT = \"{:,d}\".format\n    _FLOAT_FORMAT = \"{:,}\".format\n\n    @classmethod\n    def enable(cls):\n        \"\"\"Sets custom options.\"\"\"\n        class _IntArrayFormatter(cls.pf.GenericArrayFormatter):\n            def _format_strings(self):\n                formatter = self.formatter or cls._INT_FORMAT\n                fmt_values = [formatter(x) for x in self.values]\n                return fmt_values\n        # Save the original options for later.\n        cls.orig_int_format = cls.pf.IntArrayFormatter\n        cls.orig_float_format = pd.options.display.float_format\n        # Set custom options.\n        cls.pf.IntArrayFormatter = _IntArrayFormatter\n        pd.options.display.float_format = cls._FLOAT_FORMAT\n\n    @classmethod\n    def disable(cls):\n        \"\"\"Restores the original options.\"\"\"\n        cls.pf.IntArrayFormatter = cls.orig_int_format\n        pd.options.display.float_format = cls.orig_float_format\n\n\nCustomPandasDisplayOptions.enable()","585836b4":"train_data.agg(['size', 'count', 'nunique']).transpose().head(10)","0b6d1571":"CustomPandasDisplayOptions.disable()","4cfb218c":"train_data.agg(['size', 'count', 'nunique']).transpose().head(10)","f51cc62c":"By default, pandas does not apply any number formats when DataFrames are displayed. As shown below, long integers are printed without any commas:","70e8d909":"Hope that's useful!","be43b624":"If you want, you can always disable the custom fomratting rules and revert back to the original settings:","03084b07":"Applying a proper format can greatly enhance readability of the output. For instance, if the numbers of four or more digits are displayed with commas, we can easily recognize their orders of magnitude at a glace.\n\nSurely pandas has options for customizing number formats, right? Well, turns out that the answer is: yes and no. Pandas does indeed expose an easy to use settings for [float formatting](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/options.html), but there is no corresponding option for integers (as far as I know). Fortunately, in Python almost everytihng can be customized with a little bit of monkey-patching. `CustomPandasDisplayOptions` class defined below allows to set custom formats for both floats and integers. All you need to do is to paste the following cell into your Kaggle kernel, or Jupyter notebook:","6c32f5d3":"From now on, all floats and integers should be formatted nicely:"}}