{"cell_type":{"8be0ddd0":"code","cea1fd81":"code","71e5c94e":"code","2d8af3f9":"code","ad79eab9":"code","cd48d159":"code","0bbd56b9":"code","8a7f3e1b":"code","a443ca6a":"code","90fa2d88":"code","a8862d75":"code","de9ef4ba":"code","15cb254d":"code","c1c77b21":"markdown","5661f1d9":"markdown","e43f1bff":"markdown","ad0ddb7d":"markdown","403bc94b":"markdown","c5fbca0d":"markdown","ddd2de84":"markdown"},"source":{"8be0ddd0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cea1fd81":"#data load and look up\nimport pandas as pd\nimport numpy as np\n\ndata = pd.read_csv('\/kaggle\/input\/insurance\/insurance.csv')\ndata.head()","71e5c94e":"data.describe()\ndata.info()","2d8af3f9":"data.isnull().sum() #there is no missing data()","ad79eab9":"import matplotlib.pyplot as plt\nimport seaborn as sns\ncorrelation = data.corr()\nplt.figure()\nsns.heatmap(correlation, annot = True)","cd48d159":"data_categ = data.select_dtypes(include=object)\ndata_categ.head()","0bbd56b9":"#converting categorical data\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\nfor col in data_categ.head():\n    data[col]=le.fit_transform(data_categ[col])\ndata.head()","8a7f3e1b":"data.info()","a443ca6a":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nX = data.iloc[:,:-1].values\ny = data.iloc[:,-1].values\n\nx_train, x_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state = 42)\nlinReg=LinearRegression()\nlinReg.fit(x_train,y_train)","90fa2d88":"from sklearn.metrics import r2_score\n\ny_pred=linReg.predict(x_test)\nprint(r2_score(y_test,y_pred))","a8862d75":"from sklearn.preprocessing import PolynomialFeatures\n\npoly = PolynomialFeatures(degree=2)\nx_poly = poly.fit_transform(X)\n\nx_train1, x_test1, y_train1, y_test1 = train_test_split(x_poly,y, test_size=0.2, random_state = 42)\npolyLR = linReg.fit(x_train1,y_train1)\n\ny_pred1 = polyLR.predict(x_test1)\nprint(r2_score(y_test1,y_pred))\nprint(polyLR.score(x_test1,y_test))","de9ef4ba":"from sklearn.tree import DecisionTreeRegressor\ntree_reg = DecisionTreeRegressor()\ntree_reg.fit(x_train,y_train)\n\nprint(tree_reg.score(x_test,y_test))","15cb254d":"from sklearn.ensemble import RandomForestRegressor\nrf_reg = RandomForestRegressor()\nrf_reg.fit(x_train,y_train)\n\nprint(rf_reg.score(x_test,y_test))","c1c77b21":"there is no clear relationship between numerical features. Let's include categorical features in the game!","5661f1d9":"r2score not bad. Let's see other methods","e43f1bff":"Now we have obtained better score. As you see above, you can use both method. r2 score and score is the same****","ad0ddb7d":"**Random Forest**","403bc94b":"# Linaer Regression","c5fbca0d":"# Decision Tree","ddd2de84":"I like to see correlation of features. "}}