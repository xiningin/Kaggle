{"cell_type":{"55f3bad5":"code","8022c39c":"code","4b10909a":"code","bf47dc80":"code","ffc34028":"code","82e11830":"code","ac73b5fd":"code","fd24b729":"code","9054d36c":"code","4fe5d86d":"code","bf6806da":"code","1e42cc40":"code","5a351365":"code","f9f50c71":"code","5719a0e4":"code","081a6ae7":"code","b303542e":"code","754e492f":"code","236182ca":"code","4d1e4cbc":"code","afe775fc":"code","ff21beb8":"code","306f0b85":"code","c6f37ad1":"code","46cecca1":"code","ef485662":"code","794934b1":"code","3bd36db7":"code","51644ef7":"code","b84b87c6":"code","358f55fe":"code","5fa16883":"code","822af720":"code","c0f11bf7":"code","8d4b91bd":"markdown","c67ef7d8":"markdown"},"source":{"55f3bad5":"# Import the main libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n% matplotlib inline","8022c39c":"# Let's read the 'train' file which countais all the informations that we use to predict the result.\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntrain.head()","4b10909a":"# I will adjuste the chart only with the essencial informations to our model.\n# We don't need the following columns: 'PassengerId', 'Name', 'Ticket', 'Cabin'\n\nnew_train = train.drop(labels=['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)\nnew_train.head()","bf47dc80":"# I will see if there is some 'Nan' informations.\n\nplt.figure(figsize=(12,8))\nsns.heatmap(data=pd.isnull(new_train))\n\n# I relized that in 'Age' column there is a lot of missing informations. \n# For this reason is not a good idea delete these inforations.\n# On the other hand, in 'Embarked' column there are only two spaces without information.\n# So it's a good idea delete these info.","ffc34028":"# First, let's complete the missing informations in \"Age\" column.\n# Let's build some graphs to predict how the \"Age\" can be fill.\n\nsns.barplot(x='Pclass', y='Age', data=new_train)","82e11830":"sns.barplot(x='Sex', y='Age', data=new_train)","ac73b5fd":"sns.barplot(x='SibSp', y='Age', data=new_train)","fd24b729":"sns.barplot(x='Parch', y='Age', data=new_train)","9054d36c":"sns.barplot(x='Embarked', y='Age', data=new_train)","4fe5d86d":"# Looking these charts I can realize that \"SibSp\" could give me a good informations to fill the missing info in \"Age\" columns, because I have in this graph a lot of variables.\n# Let's see the age means.\n\nplt.figure(figsize=(12,8))\nsns.boxplot(x='SibSp', y='Age', data=new_train)\n\n# Now I'm realizing that the mean in many parameters are almost the same.","bf6806da":"# I will try the second better graph: \"Parch\"\n\nplt.figure(figsize=(12,8))\nsns.boxplot(x='Parch', y='Age', data=new_train)\n\n# I can see here that in four of them has good mean, but others one are very bad.","1e42cc40":"# Let's try now the third better: \"Pclass\"\n\nplt.figure(figsize=(12,8))\nsns.boxplot(x='Pclass', y='Age', data=new_train)\n\n# Now I can see pretty avarages to put in \"Age\" columns.","5a351365":"# I will code a function to complete the missing informations in \"Age\" column with the age mean in this last chart.\n\ndef fill_age(col):\n    age = col[0]\n    pclass = col[1]\n    \n    if pd.isnull(age):\n        if pclass == 1:\n            return 37\n        elif pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return age\n\n# Now put this function inside of the data.\n\nnew_train['Age'] = new_train[['Age', 'Pclass']].apply(fill_age, axis=1)","f9f50c71":"# Let's check if it worked!\n\nplt.figure(figsize=(12,8))\nsns.heatmap(data=pd.isnull(new_train))\n\n# Great!","5719a0e4":"# Now I will delete the two missing informations in \"Embarked\" column.\n\nnew_train.dropna(inplace=True)","081a6ae7":"# Let's check again!\n\nplt.figure(figsize=(12,8))\nsns.heatmap(data=pd.isnull(new_train), cmap='inferno')\n\n# Good job!","b303542e":"# Now I will change categorical values to number values.\n# It will happen to help fitting correctly.\n\n# They will be the \"Sex\" and \"Embarked\" columns.\nsex = pd.get_dummies(new_train['Sex'], drop_first=True)\nembarked = pd.get_dummies(new_train['Embarked'], drop_first=True)","754e492f":"# Now I will delete the old columns and add the new columns.\n\nnew_train.drop(['Sex', 'Embarked'], axis=1, inplace=True)\n\nnew_train = pd.concat([new_train, sex, embarked], axis=1)","236182ca":"# Let's check!\n\nnew_train.head()","4d1e4cbc":"# Now it's time to see how all the informations correlate between themselves.\n\nsns.pairplot(data=new_train, hue='Survived', kind='scatter', palette='inferno')","afe775fc":"# The first thing that we can realize with this pairplot is that it's a Classification Algorithm.\n# The first Classification Algorithm that I will use will be the Logistic\n\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression()","ff21beb8":"# Now I will set \"X\" and \"y\" within the \"train\" file.\n\nX_train = new_train.iloc[:,1:].values\ny_train = new_train.iloc[:,0].values","306f0b85":"# Let's check!\n\nX_train","c6f37ad1":"y_train","46cecca1":"# Fitting...\n\nclassifier.fit(X_train, y_train)","ef485662":"# Now that I already train the data, I will test him.\n# First I will read the \"test\" file and delete the same columns than before.\n\ntest = pd.read_csv('..\/input\/test.csv')\ntest.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)\n\n# Let's see about the missing info.\n\nplt.figure(figsize=(12,8))\nsns.heatmap(test.isnull())","794934b1":"# Again we have to fill the missing info in \"Age\" column with the function.\n\ntest['Age'] = test[['Age', 'Pclass']].apply(fill_age, axis=1)\n\n# Let's Check!\n\nplt.figure(figsize=(12,8))\nsns.heatmap(test.isnull())\n\n# Great!","3bd36db7":"# The numbers of \"test\" file row and \"gender_submission\" file are the same. \n# For this reason, We can't delete any row.\n\n# Let's fill the missing info in the \"Fare\" column.\n# First I will see the informations that can help me to predict a fare value.\n\ntest[test.Fare.isnull()==True]","51644ef7":"# Let me see if I can found other passenger who had the same main features and almost the same age.\n\ntest[(test.Pclass==3) & (test.Sex=='male') & (test.Age>45) & (test.Embarked=='S')]\n\n# I got it!","b84b87c6":"# Now I will fill the \"Fare\" info with the same value from other passenger.\n\ntest.Fare.fillna(value=14.5, inplace=True)\n\n# Check!\n\ntest.iloc[152]\n\n# Done!","358f55fe":"# Now go ahead and tap dummie code.\n\nsex_test = pd.get_dummies(test['Sex'], drop_first=True)\nembarked_test = pd.get_dummies(test['Embarked'], drop_first=True)\n\ntest.drop(['Sex', 'Embarked'], axis=1, inplace=True)\nnew_test = pd.concat([test, sex_test, embarked_test], axis=1)\n\nX_test = new_test.iloc[:, 0:8].values\n\n# Let's check!\n\nX_test\n","5fa16883":"# It's time to predict.\n\ny_pred = classifier.predict(X_test)\ny_pred","822af720":"# Let's compare the results!\n\ncompare = pd.read_csv('..\/input\/gender_submission.csv')\ny_test = compare.iloc[:,1].values\ny_test","c0f11bf7":"from sklearn.metrics import classification_report, confusion_matrix\n\nprint(classification_report(y_test, y_pred))\nprint('\\n')\nprint(confusion_matrix(y_test, y_pred))","8d4b91bd":"# We had a lot of work, but it was worth it!!!\n\n# See you in the next Project!!! \ud83d\udea2\ud83c\udf89\ud83d\ude0e","c67ef7d8":"# Titanic: Machine Learning from Disaster.\n# Predict survival on the Titanic and get familiar with ML basics."}}