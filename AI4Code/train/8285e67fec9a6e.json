{"cell_type":{"3400324f":"code","1c502c97":"code","6b6dc2be":"code","80348781":"code","b36181f1":"code","2a840af3":"code","d7286b2d":"code","606e0c87":"code","709d1fc7":"code","dbb85525":"code","cf2f002b":"code","a82f070e":"code","e04c2303":"code","1c5ed20a":"code","582e6d58":"code","94bb1b90":"code","e25ba34d":"code","4a3e8dc3":"code","0ada3890":"code","c8cf766a":"code","12ae4339":"markdown","10e034fc":"markdown","0f1668b7":"markdown","05114646":"markdown","f02557d2":"markdown","25e4bab0":"markdown","bc6dde7d":"markdown","5b505dc0":"markdown","c60cd8e6":"markdown","6c2f5657":"markdown","d25db4f6":"markdown","a3e41a3c":"markdown","d685f3d7":"markdown","c8864d58":"markdown","552d4694":"markdown","38e4ca30":"markdown","f29e4bb6":"markdown","dad6ee3b":"markdown"},"source":{"3400324f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.neighbors import KNeighborsRegressor\nimport xgboost\nimport matplotlib. pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1c502c97":"df = pd.read_csv(\"\/kaggle\/input\/housesalesprediction\/kc_house_data.csv\")\n","6b6dc2be":"df.head()","80348781":"df.drop(columns=['id','date'],inplace=True)","b36181f1":"df.columns","2a840af3":"sns.scatterplot(x=df['sqft_living'],y=df['price'])\n\n","d7286b2d":"fig, (sp1,sp2,sp3,sp4,sp5,sp6) = plt.subplots(1, 6, figsize=(10, 6)) \nsp1.scatter(df['sqft_living'], df['price']) \nsp2.scatter(df['sqft_lot'], df['price']) \nsp3.scatter(df['sqft_above'], df['price'])\nsp4.scatter(df['sqft_basement'],df['price'])\nsp5.scatter(df['sqft_living15'],df['price'])\nsp6.scatter(df['sqft_lot15'],df['price'])\n\nsp1.set_xlabel('sqft_living', fontsize=8) \nsp1.set_ylabel('price', fontsize=8)\n\nsp2.set_xlabel('sqft_lot', fontsize=8) \nsp2.set_ylabel('price', fontsize=8)\n\nsp3.set_xlabel('sqft_above', fontsize=8) \nsp3.set_ylabel('price', fontsize=8)\n\nsp4.set_xlabel('sqft_basement',fontsize=8)\nsp4.set_ylabel('price',fontsize=8)\n\nsp5.set_xlabel('sqft_living15',fontsize=8)\nsp5.set_ylabel('price',fontsize=8)\n\nsp6.set_xlabel('sqft_lot15',fontsize=8)\nsp6.set_ylabel('price',fontsize=8)\n\n\nsp3.set_title('Correlation of house area based features', fontsize=15, pad=40)\nplt.tight_layout()\nplt.show()","606e0c87":"sns.scatterplot(x=df['bedrooms'],y=df['price'])","709d1fc7":"sns.scatterplot(x=df['bathrooms'],y=df['price'])","dbb85525":"sns.countplot(x=df['grade'])","cf2f002b":"sns.scatterplot(x=df['grade'],y=df_target)","a82f070e":"sns.countplot(x=df['view'])\nsns.countplot(x=df['waterfront'])","e04c2303":"df.drop(columns=['waterfront','view'],inplace=True)","1c5ed20a":"df_corr = df.corr()\ndf.corr().T\n\n","582e6d58":"sns.heatmap(df_corr)","94bb1b90":"df_target = df['price']\ndf.drop(columns=['price'],inplace=True)","e25ba34d":"features = ['price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors',\n       'waterfront', 'view', 'condition', 'grade', 'sqft_above',\n       'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long',\n       'sqft_living15', 'sqft_lot15']","4a3e8dc3":"X_train, X_test, y_train, y_test = train_test_split(df1[features],df_target,test_size=0.3)","0ada3890":"regressors = [[LinearRegression(),'Linear Regression'],[KNeighborsRegressor(),'KNeighborsRegressor'],[xgboost.XGBRegressor(),'XGB Regressor']]","c8cf766a":"for regressor in regressors:\n    model = regressor[0]\n    model.fit(X_train,y_train)\n    model_name = regressor[1]\n    score_list = []\n    \n    pred = model.predict(X_test)\n    score = model.score(X_test,y_test)\n    score_list.append(score)\n    \n    print(model_name, 'model score: ' + str(round(score*100, 2)) + '%')\n    ","12ae4339":"We have 16 features left, all of which appear important so let's do some quick EDA to determine what to prioritize. All features relating to the size of the house should show a sufficiently linear releationship with our target, i.e the price, so let's see if that's the case ","10e034fc":"Only very few houses have a \"view\" and a \"waterfront\", so they can be safely ignored and dropped from the dataset.","0f1668b7":"Splitting our dataset","05114646":"The trend seems to hold, so let's move on to the next most important features, the number of bedrooms and bathrooms","f02557d2":"Grade parameter is very important as it directly gives us information on the overall quality of the house, which means it will play an important role in our predictor, so let's check it out.","25e4bab0":"Let's examine the no_of_bedrooms and bathrooms, to see how they are correlated with the target","bc6dde7d":"It's the same with bathrooms, although we see higher priced houses almost exclusively in houses with 3 or more bathrooms","5b505dc0":"Put all features in one single list","c60cd8e6":"Let's see the available features that we can work with","6c2f5657":"As expected, higher grades houses have many more expensive houses","d25db4f6":"Let's load the data into a Pandas DataFrame","a3e41a3c":"Create a 'regressors' list, items will be the regressor model we will fit to our data","d685f3d7":"Our intution seems right, let's do it for the rest of area based features just to confirm","c8864d58":"Let's plot a correlation table and a heatmap to get a general idea on how the features are correlated","552d4694":"We have 21 features to work with, but the columns of 'id, 'date' won't be of much use, let's discard them ","38e4ca30":"As expected, having more bedrooms increases the chance of shifting the price higher but it cannot be exactly called a strong predictor, neverthless there is usab;e information, so let's proceed","f29e4bb6":"Let's use the head method to get a brief overview","dad6ee3b":"Let's begin building the model now, first we sperate the target and the dataset into training and test sets."}}