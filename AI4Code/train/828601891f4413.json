{"cell_type":{"a3ebef1d":"code","803b6ec2":"code","8fd704e5":"code","d51c385a":"code","127c3495":"code","a9940dbb":"code","b8d1d35f":"code","d06d1fe1":"code","1e82cba1":"code","12c31284":"code","175dbbfb":"code","49361300":"code","dca830b5":"code","63f8c54e":"code","128e8848":"markdown","df49e295":"markdown","486cfef9":"markdown","ba5568f1":"markdown","b6c12f86":"markdown","14034268":"markdown","6ce0b2f5":"markdown","50a2a3a0":"markdown","7e2d8211":"markdown","04ac0766":"markdown","8590b294":"markdown","a704be8c":"markdown","60292b03":"markdown","93503b25":"markdown","7a136a86":"markdown","4a2cd3cb":"markdown"},"source":{"a3ebef1d":"import os\nimport pickle\n\nimport pandas as pd\nimport numpy as np\nfrom tqdm.auto import tqdm\nfrom matplotlib import pyplot as plt","803b6ec2":"df_ad = pd.read_csv('..\/input\/g-research-crypto-forecasting\/asset_details.csv').sort_values('Asset_ID')\nid2name = {}\n\nfor row in df_ad.itertuples():\n    id2name[row.Asset_ID] = row.Asset_Name\n    \nid2name","8fd704e5":"if not os.path.exists('df.p'):\n    df = pd.read_csv('..\/input\/g-research-crypto-forecasting\/train.csv')\n\n    df['trade_date'] = pd.to_datetime(df['timestamp'], unit='s')\n    df.drop('timestamp', axis=1, inplace=True)\n    df = df.set_index(['Asset_ID', 'trade_date']).sort_index().astype(np.float32)\n    df.to_pickle('df.p')\nelse:\n    df = pd.read_pickle('df.p')\n\ndf","d51c385a":"df2y = df.query('trade_date > \"2020-01-01\"')\ndf2y.head()","127c3495":"for k, v in id2name.items():\n    _df = df2y.loc[k]\n    _df['Close'].plot(logy=True, figsize=(12, 9))\n\nplt.legend([v for k, v in id2name.items()])","a9940dbb":"from sklearn.linear_model import LinearRegression\nimport statsmodels.tsa.stattools as ts","b8d1d35f":"k1 = 1 # btc\nk2 = 7 # eth classic\ndf_price = pd.merge(df2y.loc[k1][['Close']], df2y.loc[k2][['Close']], on='trade_date', how='inner')\ndf_price.plot(logy=True, figsize=(12, 9))","d06d1fe1":"x = np.log(df_price['Close_x'].values)\ny = np.log(df_price['Close_y'].values)\n\nlm_model = LinearRegression(fit_intercept=True, normalize=False, n_jobs=1)\nlm_model.fit(x.reshape(-1, 1), y)        # fit() expects 2D array\n\nlm_model.coef_, lm_model.intercept_","1e82cba1":"yfit = lm_model.coef_ * x + lm_model.intercept_\ny_residual = y - yfit\ndf_res = df_price[[]].copy()\ndf_res['res'] = y_residual\ndf_res.plot(figsize=(12, 9))","12c31284":"rst = ts.adfuller(y_residual, 1)\nrst","175dbbfb":"def CADF(x, y):\n    lm_model = LinearRegression(fit_intercept=True, normalize=False, n_jobs=1)\n    lm_model.fit(x.reshape(-1, 1), y)        # fit() expects 2D array\n    yfit = lm_model.coef_ * x + lm_model.intercept_\n    y_residual = y - yfit\n    rst = ts.adfuller(y_residual, 1)           # lag = 1\n    \n    return rst[1] # p","49361300":"tmp = []\nfor k1, v1 in tqdm(id2name.items()):\n    for k2, v2 in id2name.items():\n        if k1 != k2:\n            df_price = pd.merge(df2y.loc[k1][['Close']], df2y.loc[k2][['Close']], on='trade_date', how='inner')\n\n            x = np.log(df_price['Close_x'].values)\n            y = np.log(df_price['Close_y'].values)\n            p = CADF(x, y)\n            \n            tmp.append((k1, v1, k2, v2, p))\n            \ndfp = pd.DataFrame(tmp, columns=['k1', 'v1', 'k2', 'v2', 'p'])\ndfp.sort_values('p')","dca830b5":"from sklearn.metrics import ConfusionMatrixDisplay","63f8c54e":"m = np.zeros((len(id2name), len(id2name)))\n\nfor k1, v1, k2, v2, p in tmp:\n    m[k1, k2] = p\n\nf = plt.figure(figsize=(16, 16))\nConfusionMatrixDisplay(m, display_labels=[v for k, v in id2name.items()], ).plot(include_values=False, ax=f.gca())","128e8848":"# Cointegration test of BTC and ETH classic","df49e295":"The we use an 'confusion matrix' to visualize the result","486cfef9":"This also suggests that there may be some arbitrage opportunities between these two assets. We may be able to get some excess return by going long and short over the two assets respectively depending on the spread of the residuals","ba5568f1":"Here we perform cointegration tests for all asset pairs and obtain their p-values.","b6c12f86":"The result above means that log(eth) = log(btc) * 0.92 - 6.6 + c, and c is a stationary random variable.","14034268":"Prices in log form","6ce0b2f5":"Prices of BTC and ETH classic in log form","50a2a3a0":"The above figure shows that there is a strong cointegration relationship between eth classic and all other assets. While BTC only has this relationship with a few.","7e2d8211":"# Pair wise cointegration test","04ac0766":"From Wikipedia, the free encyclopedia\n\nCointegration is a statistical property of a collection (X1, X2, ..., Xk) of time series variables. First, all of the series must be integrated of order d (see Order of integration). Next, if a linear combination of this collection is integrated of order less than d, then the collection is said to be co-integrated. Formally, if (X,Y,Z) are each integrated of order d, and there exist coefficients a,b,c such that aX + bY + cZ is integrated of order less than d, then X, Y, and Z are cointegrated. \n\nA common example is where the individual series are first-order integrated but some (cointegrating) vector of coefficients exists to form a stationary linear combination of them. For instance, a stock market index and the price of its associated futures contract move through time, each roughly following a random walk. \n\nIf the prices of two assets are said to be cointegrated, then their prices can be expressed in the linear form of y = ax + b. b denotes the residual, which is stationary in time.\n\nHere we perform a cointegration test for each pair of assets in the dataset to determine whether there is a cointegration relationship between them","8590b294":"# Read Data","a704be8c":"Then we calc the residual","60292b03":"First we fit a linear regression model","93503b25":"## Engle\u2013Granger two-step test\nIf x and y are non-stationary and Order of integration d=1, then a linear combination of them must be stationary for some value of a and b . In other words:\n\ny - ax = b\n\nwhere b is stationary.\n\nIf we knew a , we could just test it for stationarity with something like a Dickey\u2013Fuller test, Phillips\u2013Perron test and be done. But because we don't know a , we must estimate this first, generally by using ordinary least squares and then run our stationarity test on the estimated b series.","7a136a86":"Here is the Dickey\u2013Fuller test result. the t-value is -3.8 and p is 0.002, which is pretty significant. That is, there is a high probability that there is a cointegration relationship between the two assets.","4a2cd3cb":"Here we use data after 2020"}}