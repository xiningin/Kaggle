{"cell_type":{"a6dd2032":"code","a6b377bd":"code","04865f47":"code","154747c5":"code","7a31f771":"code","8a66e2c4":"code","6238a90f":"code","45477f4c":"code","89cc8c66":"code","174ed0e3":"code","54ce3b97":"code","d35fabb3":"code","39a9ebd6":"code","3ae17893":"markdown","e7756905":"markdown","bf0e0908":"markdown"},"source":{"a6dd2032":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom sklearn import model_selection, preprocessing, linear_model, metrics, compose","a6b377bd":"path = \"..\/input\/telecom-users-dataset\/telecom_users.csv\"\ndf = pd.read_csv(path)\ndf.info()","04865f47":"df = df.drop([\"Unnamed: 0\", \"customerID\"], axis=1)\ndf.head()","154747c5":"# map target to {0, 1} then plot histogram of label in order to decide the emtric to use\nlabel_map = {\n    \"No\": 0,\n    \"Yes\": 1\n}\ndf.loc[:, \"Churn\"] = df.Churn.map(label_map)\ndf.hist(\"Churn\")","7a31f771":"for col in df.columns:\n    print(df[col].value_counts(), df[col].dtype)","8a66e2c4":"# col \"TotalCharges\" contains \" \" transform this cell to NAN\ndf.loc[:, \"TotalCharges\"] = df[\"TotalCharges\"].replace(\" \", np.NaN)","6238a90f":"df.isna().sum()","45477f4c":"# for noew remove it\ndf = df.dropna()\ndf.isna().sum()","89cc8c66":"# fist of all we will create 5 fold to run cv\ndf[\"kfold\"] = -1\n\n# randomize rows\ndf = df.sample(frac=1.).reset_index(drop=True)\ny = df.Churn.values\n\nkf = model_selection.StratifiedKFold(n_splits=5)\n\nfor f, (t_, v_) in enumerate(kf.split(X=df, y=y)):\n    df.loc[v_, \"kfold\"] = f\n\ndf.to_csv(\".\/fold.csv\", index=False)","174ed0e3":"df.kfold.value_counts()","54ce3b97":"# check distribution of tager in each fold\nfor i in range(5):\n    counts = df[df.kfold==i].Churn.value_counts()\n    print(counts)","d35fabb3":"def run(fold):\n    df = pd.read_csv(\".\/fold.csv\")\n    numerical_col = [\"tenure\", \"MonthlyCharges\", \"TotalCharges\"]\n    categorical_col = [\n        f for f in df.columns if f not in [\"Churn\", \"kfold\"] + numerical_col\n    ]\n    for col in categorical_col:\n        df.loc[:, col] = df[col].astype(str).fillna(\"NONE\")\n    for col in numerical_col:\n        df.loc[:, col] = pd.to_numeric(df[col])\n    \n    # get training data\n    df_train = df[df.kfold != fold].reset_index(drop=True)\n    df_valid = df[df.kfold == fold].reset_index(drop=True)\n    \n    # compose preprocessing\n    transformer = compose.ColumnTransformer(transformers = [\n        (\"categorical\", preprocessing.OneHotEncoder(), categorical_col),\n        (\"numerica\", preprocessing.StandardScaler(), numerical_col)\n    ])\n    \n    transformer.fit(df_train)\n    x_train = transformer.transform(df_train)\n    x_valid = transformer.transform(df_valid)\n    \n    model = linear_model.LogisticRegression(max_iter=1000)\n    \n    model.fit(x_train, df_train.Churn.values)\n    \n    valid_preds = model.predict_proba(x_valid)[:, 1]\n    \n    auc = metrics.roc_auc_score(df_valid.Churn.values, valid_preds)\n    \n    metrics.plot_roc_curve(model, x_valid, df_valid.Churn.values)  \n    plt.show()      \n    \n    print(f\"fold = {fold}, AUC = {auc}\")\n    \n    return auc","39a9ebd6":"aucs = []\nfor fold in range(5):\n    auc = run(fold)\n    aucs.append(auc)\nprint(f\"Mean AUC = {np.array(aucs).mean()}\")","3ae17893":"The target distribution is very skewed, we will use AUC as metric to evaluate the model","e7756905":" Create 5 folder and save the data","bf0e0908":"It is apply only a simple transformation based on teh type of the feature:\n* **categorical** variables are ont-hot encoded\n* **numerical** variables are standardized"}}