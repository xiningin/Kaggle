{"cell_type":{"3828bc1a":"code","f87a803d":"code","fef0c951":"code","96ffa04f":"code","e3609670":"code","980ace4a":"code","80e43f6c":"code","108fb07b":"code","a9cc0ab3":"code","cb409708":"code","e09a98d1":"code","5032fad5":"code","80e197d8":"code","ca176c3f":"code","91d11c33":"code","074fc7da":"code","a2309a6f":"code","97833ce6":"code","8f4c3cb1":"code","60ae5609":"code","4ecb16f9":"code","0fbc6cf6":"code","cc503d43":"code","93c7264f":"code","8580be80":"markdown","8f7bbe49":"markdown","aecd7932":"markdown","c1ef92eb":"markdown","ce7599bc":"markdown","00035804":"markdown","361d8735":"markdown","ad4047e9":"markdown","ef6e63ea":"markdown","a659732f":"markdown"},"source":{"3828bc1a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\ntrainData = pd.read_csv(\"..\/input\/train.csv\")\ntestData = pd.read_csv(\"..\/input\/test.csv\")\n\nimport json\nfrom pandas.io.json import json_normalize\n\ncols = [\"device\",\"geoNetwork\",\"totals\",\"trafficSource\"]\n\nfor col in cols:\n    trainData = trainData.join(json_normalize(\n        trainData[col].map(json.loads).tolist())\n                               .add_prefix(col+\".\")).drop([col], axis=1)\n    testData = testData.join(json_normalize(\n        testData[col].map(json.loads).tolist())\n                               .add_prefix(col+\".\")).drop([col], axis=1)\n","f87a803d":"per = (trainData.isnull().sum()\/trainData.shape[0])*100\npercents = per.iloc[per.nonzero()[0]]\n\nfrom matplotlib import pyplot as plt\npercents.plot.barh()\nplt.show()","fef0c951":"plt.figure()\nplt.tight_layout()\nplt.subplots_adjust(left=49, bottom=49, right=50, top=50,\n                wspace=0.5, hspace=0.5)\n\nplt.subplot(221)\ntrainData[\"device.browser\"].value_counts().nlargest(10).plot(\"barh\",width = 1).invert_yaxis()\nplt.title(\"Browser\")\nplt.xlabel('Count')\nplt.ylabel('Browser')\n\nplt.subplot(222)\ntrainData[\"device.deviceCategory\"].value_counts().plot(\"barh\",width = 1).invert_yaxis()\nplt.title(\"DeviceCategory\")\nplt.xlabel('Count')\nplt.ylabel('Category')\n\nplt.subplot(223)\ntrainData[\"device.operatingSystem\"].value_counts().nlargest(10).plot(\"barh\",width = 1).invert_yaxis()\nplt.title(\"OperatingSystem\")\nplt.xlabel('Count')\nplt.ylabel('Operating System')\n\nplt.subplot(224)\ntrainData[\"device.isMobile\"].value_counts().plot(\"barh\",width = 1).invert_yaxis()\nplt.title(\"Device is Mobile or Not\")\nplt.xlabel('Count')\nplt.ylabel('Is Mobile or Not?')\n\nplt.show()\n\n","96ffa04f":"trainData = trainData.drop([\"device.browserSize\",\"device.browserVersion\",\"device.flashVersion\",\n               \"device.language\",\"device.mobileDeviceBranding\",\"device.mobileDeviceInfo\",\n               \"device.mobileDeviceMarketingName\",\"device.mobileDeviceModel\",\"device.mobileInputSelector\",\n               \"device.operatingSystemVersion\",\"device.screenColors\",\"device.screenResolution\"],axis=1)\ntestData = testData.drop([\"device.browserSize\",\"device.browserVersion\",\"device.flashVersion\",\n               \"device.language\",\"device.mobileDeviceBranding\",\"device.mobileDeviceInfo\",\n               \"device.mobileDeviceMarketingName\",\"device.mobileDeviceModel\",\"device.mobileInputSelector\",\n               \"device.operatingSystemVersion\",\"device.screenColors\",\"device.screenResolution\"],axis=1)","e3609670":"plt.figure()\nplt.tight_layout()\nplt.subplots_adjust(left=49, bottom=49, right=50, top=50,\n                wspace=0.5, hspace=1)\n\nplt.subplot(311)\ntrainData[\"geoNetwork.continent\"].value_counts().plot(\"barh\",width = 1).invert_yaxis()\nplt.title(\"Continent\")\nplt.xlabel('Count')\nplt.ylabel('Continent')\n\nplt.subplot(312)\ntrainData[\"geoNetwork.subContinent\"].value_counts().nlargest(10).plot(\"barh\",width = 1).invert_yaxis()\nplt.title(\"Sub-Continent\")\nplt.xlabel('Count')\nplt.ylabel('subContinent')\n\nplt.subplot(313)\ntrainData[\"geoNetwork.country\"].value_counts().nlargest(10).plot(\"barh\",width = 1).invert_yaxis()\nplt.title(\"Country\")\nplt.xlabel('Count')\nplt.ylabel('country')\n\nplt.show()\n","980ace4a":"trainData = trainData.drop([\"geoNetwork.city\",\"geoNetwork.cityId\",\"geoNetwork.latitude\",\"geoNetwork.longitude\",\n                \"geoNetwork.metro\",\"geoNetwork.networkDomain\",\"geoNetwork.networkLocation\",\n                \"geoNetwork.region\"],axis=1)\ntestData = testData.drop([\"geoNetwork.city\",\"geoNetwork.cityId\",\"geoNetwork.latitude\",\"geoNetwork.longitude\",\n                \"geoNetwork.metro\",\"geoNetwork.networkDomain\",\"geoNetwork.networkLocation\",\n                \"geoNetwork.region\"],axis=1)","80e43f6c":"trainData.dtypes","108fb07b":"trainData[\"totals.bounces\"] = trainData[\"totals.bounces\"].astype(np.float64)\ntrainData[\"totals.hits\"] = trainData[\"totals.hits\"].astype(np.float64)\ntrainData[\"totals.newVisits\"] = trainData[\"totals.newVisits\"].astype(np.float64)\ntrainData[\"totals.pageviews\"] = trainData[\"totals.pageviews\"].astype(np.float64)\ntrainData[\"totals.transactionRevenue\"] = trainData[\"totals.transactionRevenue\"].astype(np.float64)\ntrainData[\"totals.visits\"] = trainData[\"totals.visits\"].astype(np.float64)","a9cc0ab3":"testData[\"totals.bounces\"] = testData[\"totals.bounces\"].astype(np.float64)\ntestData[\"totals.hits\"] = testData[\"totals.hits\"].astype(np.float64)\ntestData[\"totals.newVisits\"] = testData[\"totals.newVisits\"].astype(np.float64)\ntestData[\"totals.pageviews\"] = testData[\"totals.pageviews\"].astype(np.float64)\ntestData[\"totals.visits\"] = testData[\"totals.visits\"].astype(np.float64)","cb409708":"print(trainData[\"totals.bounces\"].isnull().sum())\nprint(trainData[\"totals.bounces\"].unique())\ntrainData[\"totals.bounces\"].fillna(0, inplace=True)\ntestData[\"totals.bounces\"].fillna(0, inplace=True)\n","e09a98d1":"print(trainData[\"totals.hits\"].isnull().sum())\nprint(trainData[\"totals.hits\"].unique())\n\nprint(testData[\"totals.hits\"].isnull().sum())\nprint(testData[\"totals.hits\"].unique())","5032fad5":"print(trainData[\"totals.newVisits\"].isnull().sum())\ntrainData[\"totals.newVisits\"].unique()\n\ntrainData[\"totals.newVisits\"].fillna(0, inplace=True)\ntestData[\"totals.newVisits\"].fillna(0, inplace=True)\n\nprint(trainData[\"totals.newVisits\"].unique())\nprint(testData[\"totals.newVisits\"].unique())","80e197d8":"print(trainData[\"totals.pageviews\"].isnull().sum())\nprint(trainData[\"totals.pageviews\"].unique())\n\ntrainData[\"totals.pageviews\"].fillna(0, inplace=True)\ntestData[\"totals.pageviews\"].fillna(0, inplace=True)\n\nprint(trainData[\"totals.pageviews\"].unique())\nprint(testData[\"totals.pageviews\"].unique())","ca176c3f":"print(trainData[\"totals.visits\"].isnull().sum())\ntrainData[\"totals.visits\"].unique()\n\n","91d11c33":"trainData = trainData.drop([\"totals.visits\"],axis=1)\ntestData = testData.drop([\"totals.visits\"],axis=1)","074fc7da":"print(trainData[\"totals.transactionRevenue\"].isnull().sum())\nprint(trainData[\"totals.transactionRevenue\"].unique())\n\ntrainData[\"totals.transactionRevenue\"].fillna(1, inplace=True)\nprint(trainData[\"totals.transactionRevenue\"].unique())","a2309a6f":"trainData.dtypes","97833ce6":"trainData[\"trafficSource.adContent\"].value_counts().nlargest(10).plot(\"barh\",width = 1).invert_yaxis()\n#plt.title(\"Continent\")\n#plt.xlabel('Count')\n#plt.ylabel('Continent')","8f4c3cb1":"trainData[\"trafficSource.adwordsClickInfo.adNetworkType\"].value_counts().nlargest(10).plot(\"barh\",width = 1).invert_yaxis()\n","60ae5609":"trainData[\"trafficSource.adwordsClickInfo.criteriaParameters\"].value_counts().nlargest(10).plot(\"barh\",width = 1).invert_yaxis()\n","4ecb16f9":"trainData[\"trafficSource.adwordsClickInfo.gclId\"].value_counts().nlargest(10).plot(\"barh\",width = 1).invert_yaxis()\n","0fbc6cf6":"trainData[\"trafficSource.adwordsClickInfo.isVideoAd\"].value_counts().nlargest(10).plot(\"barh\",width = 1).invert_yaxis()\n","cc503d43":"trainData[\"trafficSource.adwordsClickInfo.page\"].value_counts().nlargest(10).plot(\"barh\",width = 1).invert_yaxis()\n","93c7264f":"trainData[\"trafficSource.adwordsClickInfo.slot\"].value_counts().nlargest(10).plot(\"barh\",width = 1).invert_yaxis()\n","8580be80":"## 1.3 Univariate Exploration\n\n### Variable: Device","8f7bbe49":"### Variable: Totals\nAll totals colums are in object datatype but needts to be in int or float64 datatype. Hence converting.","aecd7932":"### Variable: trafficSource","c1ef92eb":"In this notebook, I will go through the GStore Revenue Prediction problem step by step. The steps to be followed are:\n1. Data Cleaning\n2. Model Building\n3. Prediction\n4. Creating Submission File\n\nSo here we go ...\n\n# Step 1: Data Cleaning\n## 1.1 Flattening the Data\nSince there are json objects in the data, we need to first flatten out our both dataframes - train and test.","ce7599bc":"Since there is only one value in the totals.visits column it is useless. Hence droping it.","00035804":"## 1.2 Missing Values","361d8735":"Apart from above shown parameters for device variable, all others do not contain any information. Hence we will drop those columns.","ad4047e9":"### Variable: geoNetwork","ef6e63ea":"Here we notice that transactionRevenue column is only present in the train data frame. It is our target column as given in the description of the dataset.","a659732f":"Most of the geoNetwork variable's parameters are not set in the demo dataset. So I am droping those columns from the test and train dataframes."}}