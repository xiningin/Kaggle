{"cell_type":{"27bbe4e8":"code","f8d6163d":"code","89147533":"code","6d6b1197":"code","ae90552d":"code","9772786f":"code","4ce7093f":"code","ea965e2f":"code","6672fdfe":"code","3a72bc5a":"code","ce6e93ac":"code","9d7e72f8":"code","b081a049":"code","d2a2c7fd":"code","e1c5affa":"code","2e48bee2":"code","f0e6017b":"code","388d2cf2":"code","a22bed1a":"code","067671ee":"markdown","0686d0bc":"markdown","71b4add3":"markdown","e0782807":"markdown","c60edbdb":"markdown","852f3d5c":"markdown","f8c61846":"markdown","ef4bd6d5":"markdown","2c725f6a":"markdown","c329a2ed":"markdown","1c5f28cf":"markdown","55d37d8d":"markdown","3e8cde7a":"markdown","8fac9f0e":"markdown"},"source":{"27bbe4e8":"import os\nimport cv2\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D,MaxPooling2D,Dense,Flatten,Dropout\nfrom keras.layers.normalization import BatchNormalization\n\nprint(\"Loaded required libraries...\")","f8d6163d":"fpath = \"..\/input\/plantdisease\/PlantVillage\/\"\nrandom_seed = 111\n\ncategories = os.listdir(fpath)\nprint(\"List of categories = \",categories,\"\\n\\nNo. of categories = \", len(categories))","89147533":"def load_images_and_labels(categories):\n    img_lst=[]\n    labels=[]\n    for index, category in enumerate(categories):\n        for image_name in os.listdir(fpath+\"\/\"+category)[:300]:\n            file_ext = image_name.split(\".\")[-1]\n            if (file_ext.lower() == \"jpg\") or (file_ext.lower() == \"jpeg\"):\n                #print(f\"\\nCategory = {category}, Image name = {image_name}\")\n                img = cv2.imread(fpath+\"\/\"+category+\"\/\"+image_name)\n                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n                img_array = Image.fromarray(img, 'RGB')\n\n                #resize image to 227 x 227 because the input image resolution for AlexNet is 227 x 227\n                resized_img = img_array.resize((227, 227))\n\n                img_lst.append(np.array(resized_img))\n\n                labels.append(index)\n    return img_lst, labels\n\nimages, labels = load_images_and_labels(categories)\nprint(\"No. of images loaded = \",len(images),\"\\nNo. of labels loaded = \",len(labels))\nprint(type(images),type(labels))","6d6b1197":"images = np.array(images)\nlabels = np.array(labels)\n\nprint(\"Images shape = \",images.shape,\"\\nLabels shape = \",labels.shape)\nprint(type(images),type(labels))","ae90552d":"def display_rand_images(images, labels):\n    plt.figure(1 , figsize = (19 , 10))\n    n = 0 \n    for i in range(9):\n        n += 1 \n        r = np.random.randint(0 , images.shape[0] , 1)\n        \n        plt.subplot(3 , 3 , n)\n        plt.subplots_adjust(hspace = 0.3 , wspace = 0.3)\n        plt.imshow(images[r[0]])\n        \n        plt.title('Plant label : {}'.format(labels[r[0]]))\n        plt.xticks([])\n        plt.yticks([])\n        \n    plt.show()\n    \ndisplay_rand_images(images, labels)","9772786f":"#1-step in data shuffling\n\n#get equally spaced numbers in a given range\nn = np.arange(images.shape[0])\nprint(\"'n' values before shuffling = \",n)\n\n#shuffle all the equally spaced values in list 'n'\nnp.random.seed(random_seed)\nnp.random.shuffle(n)\nprint(\"\\n'n' values after shuffling = \",n)","4ce7093f":"#2-step in data shuffling\n\n#shuffle images and corresponding labels data in both the lists\nimages = images[n]\nlabels = labels[n]\n\nprint(\"Images shape after shuffling = \",images.shape,\"\\nLabels shape after shuffling = \",labels.shape)","ea965e2f":"images = images.astype(np.float32)\nlabels = labels.astype(np.int32)\nimages = images\/255\nprint(\"Images shape after normalization = \",images.shape)","6672fdfe":"display_rand_images(images, labels)","3a72bc5a":"x_train, x_test, y_train, y_test = train_test_split(images, labels, test_size = 0.2, random_state = random_seed)\n\nprint(\"x_train shape = \",x_train.shape)\nprint(\"y_train shape = \",y_train.shape)\nprint(\"\\nx_test shape = \",x_test.shape)\nprint(\"y_test shape = \",y_test.shape)","ce6e93ac":"display_rand_images(x_train, y_train)","9d7e72f8":"model=Sequential()\n\n#1 conv layer\nmodel.add(Conv2D(filters=96,kernel_size=(11,11),strides=(4,4),padding=\"valid\",activation=\"relu\",input_shape=(227,227,3)))\n\n#1 max pool layer\nmodel.add(MaxPooling2D(pool_size=(3,3),strides=(2,2)))\n\nmodel.add(BatchNormalization())\n\n#2 conv layer\nmodel.add(Conv2D(filters=256,kernel_size=(5,5),strides=(1,1),padding=\"valid\",activation=\"relu\"))\n\n#2 max pool layer\nmodel.add(MaxPooling2D(pool_size=(3,3),strides=(2,2)))\n\nmodel.add(BatchNormalization())\n\n#3 conv layer\nmodel.add(Conv2D(filters=384,kernel_size=(3,3),strides=(1,1),padding=\"valid\",activation=\"relu\"))\n\n#4 conv layer\nmodel.add(Conv2D(filters=384,kernel_size=(3,3),strides=(1,1),padding=\"valid\",activation=\"relu\"))\n\n#5 conv layer\nmodel.add(Conv2D(filters=256,kernel_size=(3,3),strides=(1,1),padding=\"valid\",activation=\"relu\"))\n\n#3 max pool layer\nmodel.add(MaxPooling2D(pool_size=(3,3),strides=(2,2)))\n\nmodel.add(BatchNormalization())\n\n\nmodel.add(Flatten())\n\n#1 dense layer\nmodel.add(Dense(4096,input_shape=(227,227,3),activation=\"relu\"))\n\nmodel.add(Dropout(0.4))\n\nmodel.add(BatchNormalization())\n\n#2 dense layer\nmodel.add(Dense(4096,activation=\"relu\"))\n\nmodel.add(Dropout(0.4))\n\nmodel.add(BatchNormalization())\n\n#3 dense layer\nmodel.add(Dense(1000,activation=\"relu\"))\n\nmodel.add(Dropout(0.4))\n\nmodel.add(BatchNormalization())\n\n#output layer\nmodel.add(Dense(20,activation=\"softmax\"))\n\nmodel.summary()","b081a049":"model.compile(optimizer=\"adam\", loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])","d2a2c7fd":"model.fit(x_train, y_train, epochs=100)","e1c5affa":"loss, accuracy = model.evaluate(x_test, y_test)\n\nprint(loss,accuracy)","2e48bee2":"pred = model.predict(x_test)\n\npred.shape","f0e6017b":"plt.figure(1 , figsize = (19 , 10))\nn = 0 \n\nfor i in range(9):\n    n += 1 \n    r = np.random.randint( 0, x_test.shape[0], 1)\n    \n    plt.subplot(3, 3, n)\n    plt.subplots_adjust(hspace = 0.3, wspace = 0.3)\n    \n    plt.imshow(x_test[r[0]])\n    plt.title('Actual = {}, Predicted = {}'.format(y_test[r[0]] , y_test[r[0]]*pred[r[0]][y_test[r[0]]]) )\n    plt.xticks([]) , plt.yticks([])\n\nplt.show()","388d2cf2":"# save model in JSON format\nmodel_json = model.to_json()\njson_file = open(\"..\/working\/model1.json\", \"w\")\njson_file.write(model_json)\nprint(\"Model saved in JSON format!\")\n    \n# save training weights in h5 file\nmodel.save_weights(\"..\/working\/model1.h5\")\nprint(\"\\nModel weights saved!\")","a22bed1a":"%cd \/kaggle\/working\nfrom IPython.display import FileLink\nFileLink(r'model1.h5')\n#ref - https:\/\/www.kaggle.com\/getting-started\/168312","067671ee":"### 5) Train the model\n\n- Fit the model using training data","0686d0bc":"- Split dataset for training and testing","71b4add3":"- Display few random images with actual vs predicted values of labels","e0782807":"### 6) Predicting values using trained model","c60edbdb":"## Plant village image classification\nReferences are mentioned at the end of the notebook\n\n### 1) Import required libraries","852f3d5c":"### 2) Data loading and exploration","f8c61846":"- Step 2 - Data normalization","ef4bd6d5":"### 3) Prepare data for CNN model training\n- Step 1 - shuffle the data loaded from the dataset","2c725f6a":"### 4) Define CNN model (AlexNet)","c329a2ed":"- Display few random images from dataset with their label","1c5f28cf":"- Compile the defined CNN model","55d37d8d":"### 7) Save trained model, weights","3e8cde7a":"- Metrics to evaluate accuracy and loss in test dataset","8fac9f0e":"- Display few random images after normalization"}}