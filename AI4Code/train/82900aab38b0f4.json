{"cell_type":{"8b79bea8":"code","163ac281":"code","61a6baac":"code","81655d09":"code","6ecd8871":"code","3134314d":"code","fd6afba2":"code","0e9740ce":"code","f06e190c":"code","9e4247ff":"code","bae1cb6a":"code","a4cecc8b":"code","d0849e4d":"code","a84326a9":"code","f5e8b8ca":"code","5f63bace":"code","1e880742":"code","1a97e7d8":"code","ffe9d0a6":"code","f723596e":"code","b5078032":"code","214d471e":"code","912317b4":"code","389c4867":"markdown","f1f3c89a":"markdown","d8d296bd":"markdown","91d31e4f":"markdown","4afc306f":"markdown","9d59f8ff":"markdown","bb97e7c9":"markdown","9af62733":"markdown","66e90f83":"markdown","fd1b562e":"markdown","5f04310b":"markdown","a39ed3e6":"markdown","23f1cf86":"markdown","2d2a1397":"markdown","51109c84":"markdown","cdf642f8":"markdown","73eb6dee":"markdown","870faafb":"markdown","80718f44":"markdown","e7144671":"markdown"},"source":{"8b79bea8":"# import library\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","163ac281":"# import data\ndf = pd.read_csv('\/kaggle\/input\/stocknews\/upload_DJIA_table.csv')","61a6baac":"# look at the top 5 rows in the data\ndf.head()","81655d09":"# let's drop date column by syntax 1\ndf.drop(['Date'], axis = 1)","6ecd8871":"# let's drop open column by syntax 2\ndf.drop(columns = ['Open'])","3134314d":"# check for the condition if Dataframe\ndf.head()","fd6afba2":"df.drop([0, 1])","0e9740ce":"# let's make a multiIndex Dataframe\nmidx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n                             ['speed', 'weight', 'length']],\n                     codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n                            [0, 1, 2, 0, 1, 2, 0, 1, 2]])\ndf1 = pd.DataFrame(index=midx, columns=['big', 'small'],\n                  data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n                        [250, 150], [1.5, 0.8], [320, 250],\n                        [1, 0.8], [0.3, 0.2]])\ndf1","f06e190c":"# to drop the whole 'cow' row and 'small' column\ndf1.drop(index='cow', columns='small')","9e4247ff":"# to drop the subindex 'length'\ndf1.drop(index='length', level=1)","bae1cb6a":"df2 = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n                   \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n                   \"born\": [pd.NaT, \"1940-04-25\",\n                            pd.NaT]})\ndf2","a4cecc8b":"df2.dropna()","d0849e4d":"df2.dropna(axis = 'columns')","a84326a9":"df2.dropna(how = 'all')","f5e8b8ca":"df2.dropna(thresh = 2)","5f63bace":"df2.dropna(subset=['name', 'born'])","1e880742":"df2.dropna(inplace = True)\ndf2","1a97e7d8":"# let's see the datatype of each column\ndf.dtypes","ffe9d0a6":"d = {'col1': [1, 2], 'col2': [3, 4]}\ndf3 = pd.DataFrame(data=d)\ndf3.dtypes","f723596e":"df3.astype('int32').dtypes","b5078032":"df3.astype({'col1': 'float'}).dtypes","214d471e":"def method1(x):\n    return x * 2\ndf.Open.apply(method1).head(5)","912317b4":"df.Open.apply(lambda x : x * 2).head()","389c4867":"### Method 2<a id='17'><\/a>","f1f3c89a":"Yeahhhh!!! Here we finish our tutorial in pandas! So far we have learnt many things. So keep practicing guys! ","d8d296bd":"### Method 1<a id='16'><\/a>","91d31e4f":"### 6. Keep the DataFrame with valid entries in the same variable<a id='11'><\/a>","4afc306f":"### 2. Cast single column to data type<a id='14'><\/a>\nSyntax : `df.astype({'column_name' : 'datatype'}).dtypes`","9d59f8ff":"### 3. Drop the rows where all the elements are missing<a id='8'><\/a>\nSyntax : `df.dropna(how = 'all')`","bb97e7c9":"# Pandas Tutorial : Day 5\nHere's is what we are going to learn today : \n* [Drop not-null data](#1)\n 1. [Drop columns](#2)\n 2. [Drop a row by index](#3)\n 3. [Drop columns and\/or rows of MultiIndex DataFrame](#4)\n* [Drop null data](#5)\n 1. [Drop the rows where at least one element is missing](#6)\n 2. [Drop the columns where atleast one element is missing](#7)\n 3. [Drop the rows where all the elements are missing](#8)\n 4. [Keep only the rows with atleast 2 non-NA values](#9)\n 5. [Define in which columns to look for missing values](#10)\n 6. [Keep the DataFrame with valid entries in the same variable](#11)\n* [Convert data types](#12)\n 1. [Cast all the columns to one data type](#13)\n 2. [Cast single column to data type](#14)\n* [apply function](#15)\n 1. [Method 1](#16)\n 2. [Method 2](#17)\n\nLet's get started!\n\n[Data for daily news for stock market prediction](https:\/\/www.kaggle.com\/aaron7sun\/stocknews)","9af62733":"The first two rows are dropped.","66e90f83":"### 1. Drop columns<a id='2'><\/a>\nSyntax 1: `df.drop(['column_name1', 'column_name2', ...], axis = 1)`\n\nIf you permanently want to drop column use `inplace = true`. The default value of inplace is False\n\nSyntax 2 : `df.drop(columns = ['column_name1', 'column_name2', ...])`","fd1b562e":"## Apply Function<a id='15'><\/a>\nPandas.apply allow the users to pass a function and apply it on every single value of the Pandas series. It comes as a huge improvement for the pandas library as this function helps to segregate data according to the conditions required due to which it is efficiently used in data science and machine learning.\n\nSyntax : `s.apply(func, convert_dtype=True, args=())`\n\nParameters:\n\n* **func:** .apply takes a function and applies it to all values of pandas series.\n* **convert_dtype:** Convert dtype as per the function\u2019s operation.\n* **args=():** Additional arguments to pass to function instead of series.\n* **Return Type:** Pandas Series after applied function\/operation.","5f04310b":"### 1. Cast all the columns to one data type<a id='13'><\/a>\nSyntax : `df.astype('data_type').dtypes`","a39ed3e6":"## Convert Data types<a id='12'><\/a>","23f1cf86":"### 5. Define in which columns to look for missing values<a id='10'><\/a>\nSyntax : `df.dropna(subset = ['column_name'])`","2d2a1397":"### 2. Drop the columns where atleast one element is missing<a id='7'><\/a>\nSyntax : `df.dropna(axis = 'columns')`","51109c84":"### 2. Drop a row by index<a id='3'><\/a>\nSyntax : `df.drop(['index'])`","cdf642f8":"## Drop not-null Data<a id='1'><\/a>\nDrop specified labels from rows or columns.\n\nRemove rows or columns by specifying label names and corresponding axis, or by specifying directly index or column names. When using a multi-index, labels on different levels can be removed by specifying the level.","73eb6dee":"### 3. Drop columns and\/or rows of MultiIndex DataFrame<a id='4'><\/a>\nSyntax 1: `df.drop(index = 'first_index', columns = 'column_name')`\n\nSyntax 2 : `df.drop(index = 'second_index', level = 1)`","870faafb":"## Drop null data<a id='5'><\/a>\nLet's see how to remove missing values from tha dataset. \n\n**Note :** We don't have any missing values in this dataset. Therefore we'll use our own data that has missing values.","80718f44":"### 4. Keep only the rows with atleast 2 non-NA values<a id='9'><\/a>\nSyntax : `df.dropna(thresh = 2)`","e7144671":"### 1. Drop the rows where at least one element is missing<a id='6'><\/a>\nSyntax : `df.dropna()`"}}