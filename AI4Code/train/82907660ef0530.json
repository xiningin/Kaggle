{"cell_type":{"a7f11f15":"code","d52e7b4e":"code","b47608b2":"code","914b26be":"code","19eda502":"code","1265c579":"code","5f1dc055":"code","f9b28aee":"code","cefcd747":"code","25df232a":"code","7cdf6962":"code","3c612338":"code","65232206":"code","d666e5cc":"code","6f5a252c":"code","7d549ca2":"code","f9152338":"code","68d9dcf6":"code","58805d5c":"code","575fb1b9":"code","8f8d4d29":"code","5801bb02":"code","1c35b777":"code","b5e68ac9":"code","1e3bc957":"code","93675633":"code","80fd4652":"code","7d16dfca":"code","c1940d54":"code","979e010d":"code","a956f58c":"code","01154420":"code","863f8f5e":"markdown","49299fec":"markdown","58d2a53d":"markdown","29036f5f":"markdown","47f55803":"markdown","9a6fa477":"markdown","b134fce9":"markdown","f1b220e0":"markdown","f4e5eac3":"markdown","c1367ae1":"markdown","ee7ed2ff":"markdown","8f233018":"markdown","52331780":"markdown","a6e7d761":"markdown","8c285870":"markdown","5c9977f2":"markdown","372e5bfe":"markdown","d64a4c08":"markdown","ffedd19f":"markdown","087500d5":"markdown","6e6f32a7":"markdown","3dde6400":"markdown","7a16ef42":"markdown","ea5d7ed0":"markdown"},"source":{"a7f11f15":"!pip install -q tensorflow_decision_forests","d52e7b4e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# ---- visualization ---- #\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\n# ---- Tensorflow ---- #\nimport tensorflow as tf\nfrom tensorflow_decision_forests.keras import pd_dataframe_to_tf_dataset\nfrom tensorflow_decision_forests.keras import GradientBoostedTreesModel\nfrom tensorflow_decision_forests.keras import Task\n# ---- Sklearn ---- #\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n# ---- Evaluation ---- #\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report","b47608b2":"plt.xkcd(True)\nmpl.rcParams['figure.figsize'] = [11.0, 6.0]\nsns.set_palette('pastel')","914b26be":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","19eda502":"train_data.head()","1265c579":"sns.countplot(y='Survived',data=train_data)","5f1dc055":"sns.countplot(y='Sex',data=train_data)","f9b28aee":"sns.countplot(x='Survived', data=train_data, hue='Sex')","cefcd747":"sns.countplot(x='Survived', data=train_data, hue='Pclass')","25df232a":"sns.histplot(\n    data=train_data,\n    x='Age',\n    hue='Survived',\n    bins=30,\n    kde=True,\n    element=\"step\",\n    common_norm=False\n)","7cdf6962":"sns.heatmap(train_data.isnull(), yticklabels=False, cbar=False)","3c612338":"train_data.drop('PassengerId', axis=1, inplace=True)","65232206":"train_data.drop('Cabin', axis=1, inplace=True)","d666e5cc":"sns.boxplot(x='Pclass',y='Age',data=train_data)","6f5a252c":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age\n\n# Fill miss value\ntrain_data['Age'] = train_data[['Age','Pclass']].apply(impute_age,axis=1)","7d549ca2":"train_data['Embarked'].fillna(train_data['Embarked'].mode()[0], inplace = True)","f9152338":"train_data['FamilySize'] = train_data['SibSp'] + train_data['Parch'] + 1\n\ntrain_data['IsAlone'] = 1 #initialize to yes\/1 is alone\ntrain_data['IsAlone'].loc[train_data['FamilySize'] > 1] = 0","68d9dcf6":"train_data['Title'] = train_data['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\n\nstat_min = 10 \ntitle_names = (train_data['Title'].value_counts() < stat_min)\n\ntrain_data['Title'] = train_data['Title'].apply(lambda x: 'Misc' if title_names.loc[x] == True else x)","58805d5c":"train_data['FareBin'] = pd.qcut(train_data['Fare'], 4)\n\ntrain_data['AgeBin'] = pd.cut(train_data['Age'].astype(int), 5)","575fb1b9":"le = LabelEncoder()\n\n\ntrain_data['Sex'] = le.fit_transform(train_data['Sex'])\ntrain_data['AgeBin_Code'] = le.fit_transform(train_data['AgeBin'])\ntrain_data['FareBin_Code'] = le.fit_transform(train_data['FareBin'])","8f8d4d29":"drop_cols = ['Name', 'Ticket', 'Fare', 'FareBin', 'AgeBin', 'Age', 'SibSp', 'Parch']\n\ntrain_data.drop(drop_cols, axis=1, inplace=True)","5801bb02":"label = 'Survived'\ny = train_data[label]","1c35b777":"col_to_onehot = ['Pclass', 'Embarked', 'FamilySize', 'Title', 'AgeBin_Code', 'FareBin_Code']\nfor col in col_to_onehot:\n    encod = pd.get_dummies(train_data[col], prefix=col, dtype=int)\n    train_data.drop(col, axis=1, inplace=True)\n    train_data = pd.concat([train_data, encod], axis=1)","b5e68ac9":"train_data.drop(label, inplace=True, axis=1)\n#split data for evaluate before final answer (test model)\nX_train, X_validation, y_train, y_validation = train_test_split(train_data, y, random_state=42)\n\n# Convert data into tensorflow dataset \ntrain_ds = pd_dataframe_to_tf_dataset(\n    pd.concat([X_train, y_train], axis=1),\n    label=label,\n    task=Task.CLASSIFICATION,\n)\n\nvalidation_ds = pd_dataframe_to_tf_dataset(\n    pd.concat([X_validation, y_validation], axis=1),\n    label=label,\n    task=Task.CLASSIFICATION,\n)","1e3bc957":"train_data.head()","93675633":"passenger_id = test_data.PassengerId # need for send answer in kaggle\n\n\ntest_data['Age'] = test_data[['Age','Pclass']].apply(impute_age,axis=1)\n\ntest_data['Embarked'].fillna(test_data['Embarked'].mode()[0], inplace = True)\ntest_data['FamilySize'] = test_data['SibSp'] + test_data['Parch'] + 1\n\ntest_data['IsAlone'] = 1 #initialize to yes\/1 is alone\ntest_data['IsAlone'].loc[test_data['FamilySize'] > 1] = 0\n\ntest_data['Title'] = test_data['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\n\ntitle_names = (test_data['Title'].value_counts() < stat_min)\n\ntest_data['Title'] = test_data['Title'].apply(lambda x: 'Misc' if title_names.loc[x] == True else x)\n\ntest_data['FareBin'] = pd.qcut(test_data['Fare'], 4)\n\ntest_data['AgeBin'] = pd.cut(test_data['Age'].astype(int), 5)\n\ntest_data['Sex'] = le.fit_transform(test_data['Sex'])\ntest_data['AgeBin_Code'] = le.fit_transform(test_data['AgeBin'])\ntest_data['FareBin_Code'] = le.fit_transform(test_data['FareBin'])\n\ndrop_cols = ['Name', 'Ticket', 'Fare', 'FareBin', 'AgeBin', 'Age', 'SibSp', 'Parch']\ntest_data.drop(drop_cols, axis=1, inplace=True)\n\ncol_to_onehot = ['Pclass', 'Embarked', 'FamilySize', 'Title', 'AgeBin_Code', 'FareBin_Code']\nfor col in col_to_onehot:\n    encod = pd.get_dummies(test_data[col], prefix=col, dtype=int)\n    test_data.drop(col, axis=1, inplace=True)\n    test_data = pd.concat([test_data, encod], axis=1)\n\n# Convert data into tensorflow dataset \ntest_ds = pd_dataframe_to_tf_dataset(test_data, task=Task.CLASSIFICATION)","80fd4652":"# object for calculate AUC in evaluate\nauc = tf.metrics.AUC()","7d16dfca":"model = GradientBoostedTreesModel(\n    task=Task.CLASSIFICATION,\n    hyperparameter_template=\"benchmark_rank1\",\n    early_stopping_num_trees_look_ahead=10,\n    forest_extraction='DART',\n    subsample=0.8,\n    max_depth=3,\n    num_trees=25,\n)\n\n\nmodel.compile(metrics=[auc, tf.metrics.binary_accuracy])\n\nhistory = model.fit(train_ds, validation_data=validation_ds)","c1940d54":"plt.rcdefaults()","979e010d":"val_pred = model.predict(validation_ds)\n# Convert probability to binary answer\nval_pred = val_pred > .5\nval_pred = val_pred.astype('int')\n\nconf_mtrx = confusion_matrix(y_validation, val_pred)\nsns.heatmap(conf_mtrx, annot=True, cbar=False, fmt='g')\nplt.title('confusion matrix')\nplt.xlabel('predicted')\nplt.ylabel('actual')","a956f58c":"clf_report = classification_report(y_validation, val_pred, labels=[0, 1], output_dict=True)\nsns.heatmap(pd.DataFrame(clf_report).iloc[:-1, :-2].T, annot=True, cbar=False)","01154420":"predictions = model.predict(test_ds)\n\n# Convert probability to binary answer\npredictions = predictions >= 0.5\npredictions = predictions.astype('int')\n\n\noutput = pd.DataFrame({'PassengerId': passenger_id, 'Survived': predictions.reshape((418))})\noutput.to_csv('tfgb_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","863f8f5e":"# Install the modules","49299fec":"I have one row miss in **Embarked** so fill this with mode of the column","58d2a53d":"# Data cleaning\n\nStop! before deleting data check the missing rows and coulmns \\\nnext step is normaliztion the data \\\nand last step is remove useless columns and keep good features \\\n**Note:** apply all train data in test data","29036f5f":"Let's check model accuracy in test set ","47f55803":"# Import the modules ","9a6fa477":"# The last word\n\n### the notebook is useful? please like :)\n### the notebook isn't useful? please comment why and how I can be better :)\n","b134fce9":"# Create model","f1b220e0":"also you can Separate survived by sex","f4e5eac3":"# Import the data","c1367ae1":"**Cabin** column have very miss value and I can't use it and fill miss value, so drop this column with `dataframe.drop()`","ee7ed2ff":"before predict apply train data changing to test data","8f233018":"let's look at the first five rows using the `head()` function","52331780":"# Change visualization settings","a6e7d761":"write a function that take the Pclass and return near age for miss value \\\nwith `dataframe.apply()` i can change all miss value very simple and minimal","8c285870":"**PassengerId** don't contain any information and it'is like index of rows, , so drop this column with `dataframe.drop()`","5c9977f2":"and last check Pclass of passengers that survived.","372e5bfe":"let's look at the count of each label and check it's balance or isn't, for the work use `sns.countplot()`","d64a4c08":"Alright, now time to keep usefull columns, after convert categorical columns to One-hot","ffedd19f":"* challenge: How you can fill age miss value? \n        One solution is that I can use each Pclass average \nlet's find the average with boxplot","087500d5":"and see count of male\/female in titanic","6e6f32a7":"See age distribute in data with `sns.histplot()` that create a histogram of data ","3dde6400":"# Feature Engineering","7a16ef42":"# Data visualization\n\nbest way to understand data ","ea5d7ed0":"Save the model predictions in to a `csv` file for check in kaggle"}}