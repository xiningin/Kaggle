{"cell_type":{"b7a1b644":"code","1c6a7d55":"code","62439636":"code","228b23ce":"code","536a66e7":"code","efa1046c":"code","55374c4e":"code","7a472835":"code","ae8e56c2":"code","17455cf0":"code","396b44d3":"code","b00d07ac":"code","3e42e032":"code","a4c72c1c":"code","4f80f981":"code","1d7579f4":"code","1a64e4a2":"code","62fde95a":"markdown","c06787cc":"markdown","3bc07fe1":"markdown","1c11e780":"markdown","9c0aabf7":"markdown"},"source":{"b7a1b644":"from __future__ import print_function\nimport torch","1c6a7d55":"x=torch.empty(5, 3)\nprint(x)","62439636":"x=torch.rand(5,3) # It will create a randomly initialized matrix\nprint(x)","228b23ce":"x=torch.zeros(5,3) \nx\nx1=torch.zeros(5,3,dtype=torch.long)# matrix with the datatype long\nx1","536a66e7":"x1","efa1046c":"x=torch.tensor([5.5,3]) # crating tensor from the data, its a direct method\nprint(x)","55374c4e":"# tensor can be created based on the existing tensor. The new command will use the same datatype unless it is defined newly.\n\nx1=x.new_ones(5,3, dtype=torch.double)\nx=torch.randn_like(x1, dtype=torch.float)\nprint(x)","7a472835":"print(x1)","ae8e56c2":"print(x.size())","17455cf0":"y=torch.zeros(5,3)\ny\nprint(x+y) # it can also be written as print(torch.add(x,y))","396b44d3":"print(torch.add(x,y))","b00d07ac":"print(x[3,]) # printing the 3rd row; (a,b), here a represent rows and b columns","3e42e032":"#converting tensor into numpy and vice versa\na=torch.ones(5)\nprint(a)","a4c72c1c":"b=a.numpy()\nprint(b)","4f80f981":"a.add_(0.5) # adding 0.5 to a\nprint(a)\nprint(b)","1d7579f4":"import numpy as np\na=np.ones(5)\nb=torch.from_numpy(a)\nnp.add(a,1,out=a)\nprint(a)\nprint(b)","1a64e4a2":"# moving tensor is very easy. It can be done by using .to method\nif torch.cuda.is_available():\n    device = torch.device(\"cuda\")          \n    y = torch.ones_like(x, device=device)  \n    x = x.to(device)                    \n    z = x + y\n    print(z)\n    print(z.to(\"cpu\", torch.double)) \n    ","62fde95a":"torch.size is a tuple, it support all the tuple operation.","c06787cc":"I have use the x1 for creating x. Here the datatype for the x is defined as float.","3bc07fe1":"Tensors are similar to NumPy ndarray, with the addition being that Tensors can also be used on a GPU to accelerate computing.","1c11e780":"Everytime I run the above command 'torch.empty' it will give different results as its uninitialised","9c0aabf7":"there are various ways to create the matrix using PyTorch as shown below,"}}