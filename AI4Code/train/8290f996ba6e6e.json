{"cell_type":{"24769222":"code","7cd192c0":"code","d9d28546":"code","4ad635a8":"code","3b8a43f8":"code","dee28f1a":"code","ce1f8524":"code","855cb168":"code","cffeebc3":"code","fff0e48e":"code","f2f9c119":"code","aaaf7336":"code","cd94d3f9":"code","15bc2a3e":"code","4819a20f":"code","d9993030":"code","50f6a83b":"code","a9e92e0b":"markdown"},"source":{"24769222":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import model_selection, preprocessing, metrics\nimport warnings\nimport datetime\nwarnings.filterwarnings(\"ignore\")\nimport os\nimport gc\nprint(os.listdir(\"..\/input\"))","7cd192c0":"print(os.listdir(\"..\/input\/microsoft-malware-prediction\"))","d9d28546":"print(os.listdir(\"..\/input\/malware-feature-engineering-full-train-and-test\/\"))","4ad635a8":"columns_to_use = ['ProductName', 'EngineVersion', 'AppVersion', 'AvSigVersion', 'IsBeta',\n       'RtpStateBitfield', 'IsSxsPassiveMode', 'DefaultBrowsersIdentifier',\n       'AVProductStatesIdentifier', 'AVProductsInstalled', 'AVProductsEnabled',\n       'HasTpm', 'CountryIdentifier', 'CityIdentifier',\n       'OrganizationIdentifier', 'GeoNameIdentifier',\n       'LocaleEnglishNameIdentifier', 'Platform', 'Processor', 'OsVer',\n       'OsBuild', 'OsSuite', 'OsPlatformSubRelease', 'OsBuildLab',\n       'SkuEdition', 'IsProtected', 'AutoSampleOptIn', 'SMode',\n       'IeVerIdentifier', 'SmartScreen', 'Firewall', 'UacLuaenable',\n       'Census_MDC2FormFactor', 'Census_DeviceFamily',\n       'Census_OEMNameIdentifier', 'Census_OEMModelIdentifier',\n       'Census_ProcessorCoreCount', 'Census_ProcessorManufacturerIdentifier',\n       'Census_ProcessorModelIdentifier', 'Census_ProcessorClass',\n       'Census_PrimaryDiskTotalCapacity', 'Census_PrimaryDiskTypeName',\n       'Census_SystemVolumeTotalCapacity', 'Census_HasOpticalDiskDrive',\n       'Census_TotalPhysicalRAM', 'Census_ChassisTypeName',\n       'Census_InternalPrimaryDiagonalDisplaySizeInInches',\n       'Census_InternalPrimaryDisplayResolutionHorizontal',\n       'Census_InternalPrimaryDisplayResolutionVertical',\n       'Census_PowerPlatformRoleName', 'Census_InternalBatteryType',\n       'Census_InternalBatteryNumberOfCharges', 'Census_OSVersion',\n       'Census_OSArchitecture', 'Census_OSBranch', 'Census_OSBuildNumber',\n       'Census_OSBuildRevision', 'Census_OSEdition', 'Census_OSSkuName',\n       'Census_OSInstallTypeName', 'Census_OSInstallLanguageIdentifier',\n       'Census_OSUILocaleIdentifier', 'Census_OSWUAutoUpdateOptionsName',\n       'Census_IsPortableOperatingSystem', 'Census_GenuineStateName',\n       'Census_ActivationChannel', 'Census_IsFlightingInternal',\n       'Census_IsFlightsDisabled', 'Census_FlightRing',\n       'Census_ThresholdOptIn', 'Census_FirmwareManufacturerIdentifier',\n       'Census_FirmwareVersionIdentifier', 'Census_IsSecureBootEnabled',\n       'Census_IsWIMBootEnabled', 'Census_IsVirtualDevice',\n       'Census_IsTouchEnabled', 'Census_IsPenCapable',\n       'Census_IsAlwaysOnAlwaysConnectedCapable', 'Wdft_IsGamer',\n       'Wdft_RegionIdentifier']","3b8a43f8":"new_train = pd.read_csv('..\/input\/malware-feature-engineering-full-train-and-test\/new_train.csv', \n                        nrows=1000000, usecols = columns_to_use)","dee28f1a":"new_train.shape","ce1f8524":"new_train.head()","855cb168":"cat_features = ['PuaMode']","cffeebc3":"new_test = pd.read_csv('..\/input\/malware-feature-engineering-full-train-and-test\/new_test.csv', \n                       nrows=1000000, usecols = columns_to_use)","fff0e48e":"new_test.shape","f2f9c119":"new_train['target'] = 0\nnew_test['target'] = 1","aaaf7336":"new_train = pd.concat([new_train, new_test], axis =0)\n\ntarget = new_train['target'].values","cd94d3f9":"del new_train['target']\ndel new_test","15bc2a3e":"new_train, new_val, target_train, target_val = train_test_split(new_train, target, \n                                                               test_size=0.2, random_state=42)","4819a20f":"param = {'num_leaves': 200,\n         'min_data_in_leaf': 60, \n         'objective':'binary',\n         'max_depth': -1,\n         'learning_rate': 0.1,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.8,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.8 ,\n         \"bagging_seed\": 17,\n         \"metric\": 'auc',\n         \"lambda_l1\": 0.1,\n         \"verbosity\": -1,\n         \"n_jobs\":-1}\n\n\nnew_train = lgb.Dataset(new_train.values, label=target_train)\nnew_val = lgb.Dataset(new_val.values, label=target_val)\n\nnum_round = 1000\nclf = lgb.train(param, new_train, num_round, valid_sets = [new_train, new_val], verbose_eval=10, early_stopping_rounds = 25)","d9993030":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nfeature_imp = pd.DataFrame(sorted(zip(clf.feature_importance(),columns_to_use), reverse=True), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False))\nplt.title('LightGBM Features (avg over folds)')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-01.png')","50f6a83b":"feature_imp.head()","a9e92e0b":"Adveserial Validation seems like it will play a major role in this competition. In this kernel we build a simple adveserial classifier to estimate the impact of this. Even with a very limited datast and restriced number of features, we are able to get AUC of 0.97 \n\n*** Update ***\n\nNew set of LightGBM hyperparameters gets AUC of 0.98 with the same set of features and rows. "}}