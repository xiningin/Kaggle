{"cell_type":{"8e74d8e3":"code","d1020797":"code","8feae6d5":"code","d463ea99":"code","5a1d8149":"code","b1374577":"code","f132e3ae":"code","fac6853f":"code","f50a3eb4":"code","24bf120c":"code","14fbdf67":"code","ce10c5ac":"code","39904f74":"code","a60b6755":"code","4ac8e498":"code","82e074a8":"code","ed1a4aac":"code","ac468dd6":"code","cbe6c7aa":"code","565bfe6c":"code","f59d5dbe":"code","64c59bdf":"code","810db495":"code","7a6e3aba":"code","07d2a4c0":"code","cb20c2eb":"code","b6257172":"code","524a41dd":"markdown","285ec8a3":"markdown","7a876873":"markdown","473c4df5":"markdown","3a2da03d":"markdown","f1a7cfd0":"markdown","a12bf12f":"markdown","5ba15b90":"markdown","d45fe201":"markdown","352bfb66":"markdown","acdc0f39":"markdown","6914af13":"markdown","2dd0643f":"markdown","20adcdf1":"markdown","0b8cac8f":"markdown","da9c6b45":"markdown","5722d4c6":"markdown","20d0170c":"markdown","0dd2c362":"markdown","6f5a157e":"markdown","84743304":"markdown","6840dfe1":"markdown","d0a02d50":"markdown","63559845":"markdown","dcb31a64":"markdown","23b02481":"markdown"},"source":{"8e74d8e3":"import os\nfrom datetime import date\nimport pandas as pd\nimport numpy as np\n\nfrom folium import plugins\nimport folium\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#To visualise the trend and analyse.\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\n# from plotly.subplots import make_subplots\n\nimport pycountry\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode \n\n\npy.init_notebook_mode(connected=True)\n%matplotlib inline","d1020797":"covid_19_data = pd.read_csv(\n    \"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ncovid_19_data.drop(\"SNo\", inplace=True, axis=1)\ncovid_19_data.rename(columns={\n    'Country\/Region': 'Country',\n    'Province\/State': 'Province',\n    'Last Update': 'UpdatedOn'\n},\n    inplace=True)\ncovid_19_data['Country'].replace({'Mainland China': 'China'}, inplace=True)\ncovid_19_data['Date'] = covid_19_data['ObservationDate'].apply(pd.to_datetime)","8feae6d5":"# To get statistical analysis of numerical dimensions\ncovid_19_data.describe()","d463ea99":"covid_19_data.head()","5a1d8149":"data = covid_19_data['Date'][-1:].astype('str')\nyear = int(data.values[0].split('-')[0])\nmonth = int(data.values[0].split('-')[1])\nday = int(data.values[0].split('-')[2].split()[0])\n\nlatest_data = covid_19_data[covid_19_data['Date'] >= pd.Timestamp(date(year, month, day))]\nlatest_data.head()","b1374577":"observational_data = latest_data[['Date',\"Country\", \"Confirmed\", \"Deaths\", \"Recovered\"]]\nobservational_data.head()","f132e3ae":"Country_grouped = covid_19_data.groupby(by=['Date', 'Country'],as_index=False)['Confirmed', 'Deaths','Recovered'].sum()\nCountry_grouped.head()","fac6853f":"date_grouped = covid_19_data.groupby(by=['Date'],as_index=False)['Confirmed', 'Deaths','Recovered'].sum()\ndate_grouped.head()","f50a3eb4":"topcountries=covid_19_data.groupby(by=['Country'],as_index=False)['Confirmed','Deaths','Recovered'].max()\ntopcountries = topcountries.sort_values(by=['Confirmed'],ascending=False)[:10][::-1]\ntopcountries.head(n=10)","24bf120c":"df = px.data.gapminder()\ntidy_data = covid_19_data.groupby(by=['Date', 'Country'],\n                                  as_index=False)['Confirmed', 'Deaths',\n                                                  \"Recovered\"].max()\n\ntidy_data['Date'] = pd.to_datetime(tidy_data['Date'])\ntidy_data['Date'] = tidy_data['Date'].dt.strftime('%m\/%d\/%Y')\ntidy_data['Size'] = tidy_data['Confirmed'].pow(1)\n\nfig = px.scatter_geo(tidy_data,\n                     locations=\"Country\",\n                     locationmode='country names',\n                     color=\"Confirmed\",\n                     size='Size',\n                     hover_name=\"Country\",\n                     range_color=[0, 1500],\n                     projection=\"natural earth\",\n                     animation_frame=\"Date\",\n                     title='COVID-19: World Wide  Deaseas Spread Over Time',\n                     color_continuous_scale=\"amp\")\n\nfig.show()","14fbdf67":"dates = Country_grouped['Date']\nconfirmed = date_grouped['Confirmed']\n\nplt.figure(figsize=(21,12))\nplt.title('Confirmed cases per day worldwide', weight='bold', fontsize=18)\nplt.xticks(rotation=70)\nsns.set(style=\"dark\", rc={\"lines.linewidth\":3.4,})\nsns.lineplot(x=dates,y=confirmed,label=\"confirmed\",marker='o', color=\"black\",legend=\"full\")","ce10c5ac":"fig = px.bar(data_frame=topcountries,\n             x='Confirmed',\n             y='Country',\n             title='Confirmed Cases Top-Countries',\n             opacity=0.9,\n             text='Confirmed',\n             height=1000,\n             orientation='h',\n             color_discrete_sequence=['white'])\nfig.show()","39904f74":"fig = px.scatter_geo(tidy_data,\n                     locations=\"Country\",\n                     locationmode='country names',\n                     color=\"Deaths\",\n                     size='Size',\n                     hover_name=\"Country\",\n                     range_color=[0, 1500],\n                     projection=\"natural earth\",\n                     animation_frame=\"Date\",\n                     title='COVID-19: World Wide  fatality Over Time',\n                     color_continuous_scale=\"Reds\")\n\nfig.show()","a60b6755":"dates = Country_grouped['Date']\ndeaths = date_grouped['Deaths']\n\nplt.figure(figsize=(21,12))\nplt.title('Fatal cases per day : Worldwide', weight='bold', fontsize=18)\nplt.xticks(rotation=70)\nsns.set(style=\"ticks\", rc={\"lines.linewidth\":3.4,})\n\nsns.lineplot(x=dates,y=deaths,label=\"Deaths\",marker='o', color=\"#e74c3c\",legend=\"full\")","4ac8e498":"fig = px.bar(data_frame=topcountries,\n             x='Deaths',\n             y='Country',\n             title='Fatal Cases Top-Countries',\n             opacity=0.9,\n             text='Deaths',\n             height=1000,\n             orientation='h',\n             color_discrete_sequence=['Red'])\nfig.show()","82e074a8":"fig = px.scatter_geo(tidy_data,\n                     locations=\"Country\",\n                     locationmode='country names',\n                     color=\"Recovered\",\n                     size='Size',\n                     hover_name=\"Country\",\n                     range_color=[0, 1500],\n                     projection=\"natural earth\",\n                     animation_frame=\"Date\",\n                     title='COVID-19: World wide recovery over time',\n                     color_continuous_scale=\"BuGn\")\n\nfig.show()","ed1a4aac":"dates = Country_grouped['Date']\nrecovered = date_grouped['Recovered']\n\nplt.figure(figsize=(21,12))\nplt.title('Recovered cases per day : Worldwide', weight='bold', fontsize=18)\nplt.xticks(rotation=70)\nsns.set(style=\"ticks\", rc={\"lines.linewidth\":3.4,})\n\nsns.lineplot(x=dates,y=recovered,label=\"Recovered\",marker='o', color=\"green\",legend=\"full\")","ac468dd6":"fig = px.bar(data_frame=topcountries,\n             x='Recovered',\n             y='Country',\n             title='Recovered Cases Top-Countries',\n             opacity=0.9,\n             text='Deaths',\n             height=1000,\n             orientation='h',\n             color_discrete_sequence=['Green'])\nfig.show()","cbe6c7aa":"# Importing the world_coordinates dataset\ndata = Country_grouped.sort_values(by=['Date'], ascending=False)[:75][::-1]\ncoordinates = pd.read_csv('..\/input\/worldcoordinates\/world_coordinates.csv')\n\n# coordinates = pd.read_csv('.\/input\/novel-corona-virus-2019-dataset\/world_coordinates.csv')\n\n# Merging the world coordinates dataframe with original dataframe\npandemic_data = pd.merge(coordinates, data, on='Country')\npandemic_data.head()","565bfe6c":"# create World Geographical Map.\nGeographics = folium.Map(location=[2, -2],\n                         width='100%',\n                         height='100%',\n                         left='0%',\n                         top='0%',\n                         position='relative',\n                         zoom_start=2.5)\n\nfolium.TileLayer('cartodbdark_matter').add_to(Geographics)\n\nfor lat, lon, confirmed, deaths, recovered, name in zip(\n        pandemic_data['latitude'], pandemic_data['longitude'],\n        pandemic_data['Confirmed'], pandemic_data['Deaths'],\n        pandemic_data['Recovered'], pandemic_data['Country']):\n    folium.CircleMarker(\n        [lat, lon],\n        radius=10,\n        popup=('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n               '<strong>Confirmed Cases<\/strong>: ' + str(confirmed) + '<br>'\n               '<strong>Fatal Cases<\/strong>: ' + str(deaths) + '<br>'\n               '<strong>Recovered Cases<\/strong>: ' + str(recovered) + '<br>'),\n        color='yellow',\n        fill_color='yellow',\n        fill_opacity=0.5).add_to(Geographics)\nGeographics","f59d5dbe":"# create World Geographical Map.\nGeographics = folium.Map(location=[2, -2],\n                         width='100%',\n                         height='100%',\n                         left='0%',\n                         top='0%',\n                         position='relative',\n                         zoom_start=2.5)\n\nfolium.TileLayer('cartodbdark_matter').add_to(Geographics)\n\nfor i in range(0,len(pandemic_data)):\n    folium.Circle(\n        location=[pandemic_data.iloc[i]['latitude'], pandemic_data.iloc[i]['longitude']],\n        popup=pandemic_data.iloc[i]['Country'],\n        radius=pandemic_data.iloc[i]['Deaths']*170,\n        color='red',\n        fill_color='red',\n        fill_opacity=0.5).add_to(Geographics)\nGeographics","64c59bdf":"# create World Geographical Map.\nGeographics = folium.Map(location=[2, -2],\n                         width='100%',\n                         height='100%',\n                         left='0%',\n                         top='0%',\n                         position='relative',\n                         zoom_start=2.5)\n\nfolium.TileLayer('cartodbdark_matter').add_to(Geographics)\n\nfor i in range(0,len(pandemic_data)):\n    folium.Circle(\n        location=[pandemic_data.iloc[i]['latitude'], pandemic_data.iloc[i]['longitude']],\n        popup=pandemic_data.iloc[i]['Country'],\n        radius=pandemic_data.iloc[i]['Recovered']*20,\n        color='green',\n        fill_color='green',\n        fill_opacity=0.5).add_to(Geographics)\nGeographics","810db495":"def barPlotter(Country):\n    data = covid_19_data.groupby(by=['Country','Date'],as_index=False)['Confirmed', 'Deaths','Recovered'].sum()\n    data = data[data.Country == Country]\n    fig = px.bar(data, x='Date', y='Confirmed',height=1000,text=\"Confirmed\",title=Country)\n    fig.show()","7a6e3aba":"barPlotter(\"China\")","07d2a4c0":"barPlotter(\"Italy\")","cb20c2eb":"barPlotter(\"US\")","b6257172":"barPlotter(\"Iran\")","524a41dd":"### **COVID-19: Wordlwide Presence**","285ec8a3":"### **COVID-19: Wordlwide Recovery**","7a876873":"### **Iran**","473c4df5":"### **Italy**","3a2da03d":"### **China**","f1a7cfd0":"### **COVID-19: Fatal Worldwide**","a12bf12f":"### **How top countries got infected over time period**","5ba15b90":"### **COVID-19: Confirmed Spread** ","d45fe201":"### **Countrywise Data**","352bfb66":"**If you find it useful please upvote and share the kernel.\nI will be waiting for your valuable feedbacks as well as will be adding Inferential Statistics to this existing work.**","acdc0f39":"## COVID-19 Dataset","6914af13":"### **COVID-19: Wordlwide Fatality**","2dd0643f":"### **Data Description**","20adcdf1":"### **Top Recovered cases so far**\n","0b8cac8f":"### **Top Confirmed cases so far**","da9c6b45":"<br><br><br><br><br><br><br><br><br>","5722d4c6":"###  **Top 10 Worst Affected Countries**","20d0170c":"### **COVID-19: Confirmed Worldwide**","0dd2c362":"### **COVID-19: Fatality Spread**","6f5a157e":"### **Date wise Data**","84743304":"### **COVID-19: Recovered Spread**","6840dfe1":"### **USA**","d0a02d50":"### **Top Fatal cases so far**","63559845":"![COVID-19.png](attachment:COVID-19.png)","dcb31a64":"### **COVID-19: Recovered Worldwide**","23b02481":"## Data Preprocessing"}}