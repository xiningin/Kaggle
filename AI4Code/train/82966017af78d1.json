{"cell_type":{"e7e0ac0b":"code","7096fd95":"code","2414d224":"code","5fc63ceb":"code","20386478":"code","4f2b01e2":"code","64f37b31":"code","ecb13267":"code","2a3e8297":"code","9f3a0bc5":"code","dc8bca2e":"code","e7857ce7":"code","7b24f76e":"code","68378ca4":"code","8b2dae66":"code","a0189861":"code","0ea5a488":"code","cc49bcaf":"code","6ee52058":"code","81bfa53f":"code","cf5dd92b":"code","ccbc2a6c":"code","c9b5c0b2":"code","22a85e9b":"code","36b4f838":"code","1e7d059e":"code","ebced4e7":"code","67672448":"code","45cd80ed":"code","c6aa7c20":"code","27d1aa12":"code","259c9975":"code","ba0ff8c4":"markdown","8220ab2f":"markdown","21a4fcb2":"markdown"},"source":{"e7e0ac0b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7096fd95":"!pip install pandas --update --quiet","2414d224":"housing_df = pd.read_csv('..\/input\/california-housing-prices\/housing.csv')","5fc63ceb":"housing_df.head()","20386478":"housing_df.info()","4f2b01e2":"housing_df.describe()","64f37b31":"housing_df.isnull().sum()","ecb13267":"housing_df.total_bedrooms=housing_df.total_bedrooms.fillna(housing_df.total_bedrooms.mean())\nhousing_df.isnull().sum()","2a3e8297":"import plotly.express as px\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","9f3a0bc5":"sns.set_style('darkgrid')\nmatplotlib.rcParams['font.size'] = 14\nmatplotlib.rcParams['figure.figsize'] = (10,6)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'","dc8bca2e":"fig = px.histogram(housing_df,\n                   x='total_rooms',\n                   marginal='box',\n                   title='Distribusstion of Rooms')\nfig.update_layout(bargap=0.1)\nfig.show()","e7857ce7":"fig = px.histogram(housing_df,\n                   x='total_bedrooms',\n                   marginal='box',\n                   color_discrete_sequence=['red'],\n                   title='Distribution of Bedrooms')\nfig.update_layout(bargap=0.1)\nfig.show()","7b24f76e":"fig = px.histogram(housing_df,\n                   x='median_house_value',\n                   marginal='box',\n                   title='Value of the House')\nfig.update_layout(bargap=0.1)\nfig.show()","68378ca4":"sns.heatmap(housing_df.corr(), cmap='Reds', annot=True)\nplt.title('Correlation Matrix');","8b2dae66":"input_cols=['longitude', 'latitude', 'housing_median_age', 'total_rooms',\n       'total_bedrooms', 'population', 'households', 'median_income',\n       'ocean_proximity']\ninput_df=housing_df[input_cols]\ntarget_df=housing_df['median_house_value']\nprint(type(input_df))\nprint(type(target_df))","a0189861":"from sklearn.model_selection import train_test_split\ntrain_input,test_input,train_targets,test_targets=train_test_split(input_df,target_df,test_size=0.2,random_state=42)\n\nprint (train_input.shape, train_targets.shape)\nprint (test_input.shape, test_targets.shape)","0ea5a488":"def estimate_charges(income, w, b):\n    return w* income+b","cc49bcaf":"def rmse(targets, predictions):\n    return np.sqrt(np.mean(np.square(targets - predictions)))","6ee52058":"w = 50\nb = 100","81bfa53f":"targets = train_targets\npredicated = estimate_charges(train_input.median_income, w, b)","cf5dd92b":"rmse(targets, predicated)","ccbc2a6c":"def try_parameters(w, b):\n    income = housing_df.median_income\n    target = housing_df.median_house_value\n    predictions = estimate_charges(income, w, b)\n    \n    plt.plot(income, predictions, 'r', alpha=0.9);\n    plt.scatter(income, target, s=8,alpha=0.8);\n    plt.xlabel('income');\n    plt.ylabel('House_value')\n    plt.legend(['Prediction', 'Actual']);\n    \n    loss = rmse(target, predictions)\n    print(\"RMSE Loss: \", loss)","c9b5c0b2":"try_parameters(1000, 2000)","22a85e9b":"from sklearn.linear_model import LinearRegression","36b4f838":"model = LinearRegression()","1e7d059e":"inputs = train_input[['median_income']]\ntarget = train_targets\nprint('inputs.shape :', inputs.shape)\nprint('targes.shape :', target.shape)","ebced4e7":"model.fit(inputs, target)","67672448":"predictions = model.predict(inputs)\nprint(predictions)","45cd80ed":"rmse(target, predictions)","c6aa7c20":"# w\nmodel.coef_","27d1aa12":"# b\nmodel.intercept_","259c9975":"try_parameters(model.coef_, model.intercept_)","ba0ff8c4":"Looks like \"longitude\",\"latitlude\",\" housing_median_age\",\"total_rooms\",\"population\" and etc. are numbers, whereas \"ocean_proximity\" is string (possibly categories).None of the column contain any missing values.\n","8220ab2f":"## Exploratory Analysis and Visualization","21a4fcb2":"Let's visualize the line created by the above parameters."}}