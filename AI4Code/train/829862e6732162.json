{"cell_type":{"491fefac":"code","4e18bb17":"code","40b16fbf":"code","e79207e9":"code","0ac0d6f2":"code","7d5b3d1f":"code","c6895cc2":"code","4efade60":"code","59a6cf94":"code","24295b79":"code","cdf5dae4":"code","84954503":"code","b99b517b":"code","62db73bb":"code","c39204f3":"code","d2131908":"code","dde844b6":"code","fa1b88a6":"code","bf51f05b":"markdown","bf78abac":"markdown","975fd0a8":"markdown","b599591f":"markdown","e6d7de41":"markdown","54c732c7":"markdown","88d4254e":"markdown","0cce015e":"markdown","9b74c84c":"markdown","49cdf8c9":"markdown","82a921d8":"markdown","c9563df9":"markdown"},"source":{"491fefac":"import numpy as np \nimport pandas as pd \npd.set_option(\"max_colwidth\", -1)\n\nimport os\nimport sys\nimport math\nimport threading\nimport logging\nimport time\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4e18bb17":"from fuzzywuzzy import fuzz\nfrom fuzzywuzzy import process","40b16fbf":"bank = pd.read_csv('\/kaggle\/input\/payment-id-ndsc-2020\/bank_statement.csv')\ncheckout = pd.read_csv('\/kaggle\/input\/payment-id-ndsc-2020\/checkout.csv')","e79207e9":"bank.head()","0ac0d6f2":"checkout.head()","7d5b3d1f":"print(\"Bank shape \", bank.shape); print(\"Checkout shape\", checkout.shape)\nassert len(checkout) == len(bank)","c6895cc2":"def compare_fuzzy(desc,buyer_name):\n    return fuzz.partial_ratio(desc,buyer_name)\n\n# example\ncompare_fuzzy(\"rakka\", \"rakka alhazimi\")","4efade60":"def find_match(stmt_amount, desc):\n    potential_match = checkout[checkout['ckt_amount']==stmt_amount]\n    result = []\n    for ckt_id, buyer_name in zip(potential_match['ckt_id'], potential_match['buyer_name']):\n        score = compare_fuzzy(desc, buyer_name)\n        if score > 0:\n            result.append((ckt_id,score))\n    return result\n\n# examples\nmatches = find_match(100., \"INSTANT TRANSFER BAW CGANBAWI YIWHI * LEZC HXA * ZLLEZC FUNDSHXA -\")\nmatch_id = [tup[0] for tup in matches]\nscores = [tup[1] for tup in matches]","59a6cf94":"# examples for how the function works\n\n# Show matches ckt_id\ncompare_df = checkout[checkout[\"ckt_id\"].isin(match_id)]\ncompare_df.loc[:, (\"score\")] = scores\ncompare_df.sort_values(\"score\", ascending=False)","24295b79":"def get_max(list_of_tuple):\n    max_score = 0\n    final_id = -1\n    for stmt_id, score in list_of_tuple:\n        if score > max_score:\n            max_score = score\n            final_id = stmt_id\n    return final_id\n\n# example\n# Previous \"matches\" variable\nget_max(matches)","cdf5dae4":"def index_marks(nrows, chunk_size):\n    return range(chunk_size, math.ceil(nrows \/ chunk_size) * chunk_size, chunk_size)\n\ndef split(dfm, chunk_size):\n    indices = index_marks(dfm.shape[0], chunk_size)\n    return np.split(dfm, indices)\n\n# Split banks dataframe into 10 parts\nbank_chunks = split(bank, bank.shape[0] \/\/ 10)\nbank_chunks","84954503":"final_result = []\n\ndef payment_pairing(df):\n    \n    for stmt_id, stmt_amount, desc in zip(df['stmt_id'], df['stmt_amount'], df['desc']):\n        ckt_id = get_max(find_match(stmt_amount, desc))\n        final_result.append((stmt_id,ckt_id))\n    \n    return final_result","b99b517b":"bags = []\n\ndef worker(i):\n    print(f\"working {i}\")\n    bags.append(\"carrot\")\n    \nfor i in range(10):\n    t = threading.Thread(target=worker, args=(i,))\n    t.start()\n    \nbags","62db73bb":"for chunk in bank_chunks:\n    t = threading.Thread(target=payment_pairing, args=(chunk,))\n    t.start()","c39204f3":"# Run this if you want to know the progress\n\nwhile len(final_result) < bank.shape[0]:\n    print(f\"Current Progress : {len(final_result)}\", end=\"\\r\", flush=True)\n    time.sleep(1.0)\n    ","d2131908":"len(final_result)","dde844b6":"stmt_id = [a for a,b in final_result]\nckt_id = [b for a,b in final_result]\ndf = pd.DataFrame({'stmt_id':stmt_id, 'ckt_id': ckt_id})","fa1b88a6":"df.to_csv('threading_fuzzy.csv', index=False)","bf51f05b":"### Start Threading (10 thread)","bf78abac":"Output to the same line while print\n\nref: https:\/\/stackoverflow.com\/questions\/26584003\/output-to-the-same-line-overwriting-previous\/26584483","975fd0a8":"# Submission","b599591f":"# Import Libraries","e6d7de41":"# Read CSV","54c732c7":"# Threading\n\nExplanation about threading:\n\n\n\"The threading module provides APIs for managing several threads of execution, which\nallows a program to run multiple operations concurrently in the same process space.\"\n\n(DougHellman, 2017, \"The Python 3 Standard Library by Example by Doug Hellmann\")","88d4254e":"### Monitor pairing progress\nWhile waiting for the pairing function, you can still do anything else in this notebook because the works is getting done by the daemon process. (I'm still not sure)","0cce015e":"# Introduction\nWe're from TENET team, and we're unable to complete this competition because of some unexpected conditions. Thanks to Rank 3 Submission for the solution. Anyway I will try to improve rank 3 submission notebook with some threading. Hope you enjoy my coding :).","9b74c84c":" ### Simple threading example","49cdf8c9":"# Split Dataframe into Chunks\nBefore goint into threading, I need to split the dataframe into n parts. In this notebook I choose 10 parts.\n\nref: http:\/\/yaoyao.codes\/pandas\/2018\/01\/23\/pandas-split-a-dataframe-into-chunks","82a921d8":"### Reassure final result length (must be the same with df rows)","c9563df9":"# Fuzzy Functions - (done by Rank 3 Submission)"}}