{"cell_type":{"58379382":"code","dcdc7b3a":"code","77649992":"code","f71c6823":"code","75c75310":"code","5b1a40ad":"code","5a98fd33":"code","90fc5c71":"markdown","d231afa8":"markdown","c2a3740a":"markdown","f3f6c052":"markdown","e6c4c269":"markdown","75bf4bec":"markdown","03d98c6b":"markdown","8af226e3":"markdown"},"source":{"58379382":"import pandas as pd \n\nresults = pd.read_csv('..\/input\/stage2datafiles\/RegularSeasonCompactResults.csv')\ntourney = pd.read_csv('..\/input\/stage2datafiles\/NCAATourneyCompactResults.csv')\nseeds = pd.read_csv('..\/input\/stage2datafiles\/NCAATourneySeeds.csv')\nteams = pd.read_csv('..\/input\/stage2datafiles\/Teams.csv')\n","dcdc7b3a":"from trueskill import Rating, rate_1vs1\nfrom collections import defaultdict\n\ndef get_ratings(season):         \n    # start all teams with a default rating\n    ratings = defaultdict(Rating)         \n    # get data for season\n    current_results = results[results['Season'] == season]                                           \n    # at the start, all teams are equal which is not realistic so we loop\n    # through the season's games several times to get better starting ratings\n    for epoch in range(10):                                 \n        # loop through the games in order\n        for _, row in current_results.sort_values('DayNum').iterrows():                                                    \n            wteamid = row['WTeamID']                                                                 \n            lteamid = row['LTeamID']    \n            # have TrueSkill compute new ratings based on the game result\n            ratings[wteamid], ratings[lteamid] = rate_1vs1(ratings[wteamid], ratings[lteamid])       \n    # just keep the mean rating\n    return {team_id: rating.mu for team_id, rating in ratings.items()}","77649992":"from multiprocessing import Pool\n\np = Pool()    \nseasons = results['Season'].unique()\nratings = p.map(get_ratings, seasons)                                                                \np.close()                                                                                            \np.join() \n\n# put ratings into a dict for easy access\nratings = dict(zip(seasons, ratings))\n\n# lets take a look at 2019 rankings\nteam_names = dict(zip(teams['TeamID'], teams['TeamName']))\nratings_2019 = [(team_names[t], r) for t, r in ratings[2019].items()]\npd.DataFrame(ratings_2019, columns=['TeamID', 'Rating']).sort_values('Rating', ascending=False)\n","f71c6823":"train = []                                                                                           \ntarget = []              \n# create training data with past tournament results\nfor _, row in tourney.iterrows():                                                                    \n    season = row['Season']                                                                           \n    wteamid = row['WTeamID']                                                                         \n    lteamid = row['LTeamID']                                                                         \n    # we add two rows per game so the target is not all '0' or '1'\n    # it might be better to randomly choose winner or loser first\n    # or always have higher ratings first\n    train.append([ratings[season][wteamid], ratings[season][lteamid]])                               \n    target.append(1)                                                                                 \n    train.append([ratings[season][lteamid], ratings[season][wteamid]])                               \n    target.append(0)     \ntrain = pd.DataFrame(train, columns=['Team1', 'Team2'])\ntarget = pd.Series(target, name='Target')\npd.concat((train, target), axis=1)\n","75c75310":"from sklearn.linear_model import LogisticRegression                                                  \nfrom sklearn.preprocessing import StandardScaler \n\nss = StandardScaler()                                                                                                                                \ntrain = ss.fit_transform(train)                                                            \nlr = LogisticRegression()                                                                            \nlr.fit(train, target) \n'intercept: {} coefficients: {}'.format(lr.intercept_[0], lr.coef_[0])","5b1a40ad":"# get seeds for 2019 tournament\nseeds2019 = seeds['TeamID'][seeds['Season'] == 2019].unique() \n# loop though every possible matchup\npredictions = []\nfor team1 in seeds2019:                                                                                  \n    for team2 in seeds2019:                                                                              \n        if team1 < team2:\n            # we're going to get probabilites for team1 vs team2 and team2 vs team1 and average them\n            test_rows = [                                                                            \n                [ratings[2019][team1], ratings[2019][team2]],                                        \n                [ratings[2019][team2], ratings[2019][team1]],                                        \n            ]                                                                                        \n            test_rows = ss.transform(test_rows)                                                      \n            prob = lr.predict_proba(test_rows)[:, 1]                                                 \n            avg_prob = (prob[0] + (1 - prob[1])) \/ 2     \n            predictions.append([team_names[team1], team_names[team2], avg_prob])\n","5a98fd33":"pd.DataFrame(predictions, columns=['Team1', 'Team2', 'Team1 Win Prob'])","90fc5c71":"So now that we have ratings we can try to turn them into probabilities for the 2019 tournament games.  We will do this by using results from past NCAA tournament games with the ratings as features and training a logistic regression model.","d231afa8":"Any now we can look at the results.","c2a3740a":"Now that we have our model, we can predict winning probabilities for 2019 tournament games.  First we need to build a test set similar to the training set.","f3f6c052":"OK, now we can train a model to give winning probability given two ratings.","e6c4c269":"First we read in the data files we need.","75bf4bec":"The above function is a bit slow, so we'll use multiprocessing to compute ratings for each season in parallel.","03d98c6b":"Next we define the function which actually uses TrueSkill to rank the teams in a given season.","8af226e3":"Microsoft has created an algorithm called *TrueSkill* for the purpose of ranking players using its video game platform.  It is basically a probabalistic algorithm based on the *Elo* algorithm used to rank chess players.  It can be used to rank players in any activity where there is some concept of win\/lose\/draw.  The algorithm itself is somewhat hard to understand but fortunately someone has created a Python package which makes it easy to use without understanding the theory behind it. "}}