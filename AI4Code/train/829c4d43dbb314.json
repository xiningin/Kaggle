{"cell_type":{"17f4187a":"code","39b831c7":"code","a5ab9f18":"markdown"},"source":{"17f4187a":"while True:\n    verb = input (\"Enter an English verb ('q' to quit): \")\n    verb = verb.lower()\n    if verb == \"q\":\n        break\n    else:\n            print(verb)\n            print(\"\\t\" + \"gerund: \" + ing(verb))\n            print(\"\\t\" + \"third person singular: \" + thirdps(verb))\n            print(\"\\t\" + \"simple past: \" + ed1(verb))\n            print(\"\\t\" + \"past participle: \" + ed2(verb))","39b831c7":"#gerund\ndef ing(verb):\n    if verb in modal_verbs:\n        ing = verb + \" \"\n    elif verb in exceptions2:\n        ing = verb + \"ring\"\n    elif verb in exceptions3:\n        ing = verb + \"p\" + \"ing\"\n    elif verb[-1] == \"e\" and verb[-2] ==\"i\":\n        ing = verb[:-2] + \"y\" + \"ing\"\n    elif verb[-1] == \"y\":\n            if len (verb) > 2:\n                ing = verb + \"ing\"\n    elif verb[-1] == \"x\":\n            if len(verb) > 2:\n                ing = verb + \"ing\"\n    elif verb [-1] == \"w\":\n            if len(verb) > 2:\n                ing = verb + \"ing\"\n    elif verb [-1] == \"r\":\n            if len(verb) > 2:\n                ing = verb + \"ing\"\n    elif verb [-1] == \"p\":\n            if len(verb) > 2:\n                ing = verb + \"ing\"\n    elif verb [-1] == \"c\":\n            if len(verb) > 2:\n                ing = verb + \"k\" +\"ing\"\n    elif not is_vowel(verb[-1]) and is_vowel(verb[-2]) and not is_vowel(verb[-3]):\n        ing = verb + verb[-1] + \"ing\"\n    elif verb[-1] == \"e\" and not verb ==\"see\" and not verb == \"be\":\n            if len(verb) > 2:\n                ing = verb[:-1] + \"ing\"\n    elif verb[-1] ==\"jsflj\u00f1gjghdsg\":\n            if len(verb) > 3:\n                ing = verb[:-1] + \"ing\"\n    else:\n        ing = verb + \"ing\"\n    return ing\n\ndef is_vowel(letter):\n    if letter in \"aeiou\":\n        return True\n    else:\n        return False\n\n#past simple \ndef ed1(verb):\n    if verb in irreg_verbs:\n        ed1 = irreg_verbs[verb][0]\n    elif verb in modal_verbs:\n        ed1 = verb + \" \"\n    elif verb in exceptions2:\n        ed1 = verb + \"r\" + \"ed\"\n    elif verb in exceptions3:\n        ed1 = verb + \"p\" + \"ed\"\n   \n    elif verb[-1] == \"y\" and is_vowel(verb[-2]):\n        ed1 = verb + \"ed\"\n    \n    elif verb[-1] == \"y\" and not is_vowel(verb[-2]):\n        ed1 = verb[:-1] + \"ied\"\n\n    elif verb[-1] == \"y\":\n            if len (verb) > 2:\n                ed1 = verb + \"ed\"\n    elif verb [-1] == \"r\":\n            if len(verb) > 2:\n                ed1 = verb + \"ed\"\n    elif verb[-1] == \"x\":\n            if len(verb) > 2:\n                ed1 = verb + \"ed\"\n    elif verb [-1] == \"p\":\n            if len(verb) > 2:\n                ed1 = verb + \"ed\"\n    elif verb [-1] == \"w\":\n            if len(verb) > 2:\n                ed1 = verb + \"ed\"\n    elif verb [-1] == \"c\":\n            if len(verb) > 2:\n                ed1 = verb + \"k\" +\"ed\"    \n    elif not is_vowel(verb[-1]) and is_vowel(verb[-2]) and not is_vowel(verb[-3]):\n        ed1 = verb + verb[-1] + \"ed\"\n    elif verb[-1] == \"e\":\n        ed1 = verb + \"d\"\n    else:\n        ed1 = verb + \"ed\" \n    return ed1\n\n#past participle\ndef ed2(verb):\n    \n    if verb in irreg_verbs:\n        ed2 = irreg_verbs[verb][1]\n    \n    elif verb in modal_verbs:\n        ed2 = verb + \" \"\n    elif verb in exceptions2:\n        ed2 = verb + \"r\" + \"ed\"\n    elif verb in exceptions3:\n        ed2 = verb + \"p\" + \"ed\"\n    elif verb[-1] == \"y\" and not is_vowel(verb[-2]):\n        ed2 = verb[:-1] + \"ied\"\n    elif verb[-1] == \"y\":\n            if len (verb) > 2:\n                ed2 = verb + \"ed\"\n    elif verb [-1] == \"r\":\n            if len(verb) > 2:\n                ed2 = verb + \"ed\"\n    elif verb[-1] == \"x\":\n            if len(verb) > 2:\n                ed2 = verb + \"ed\"\n    elif verb [-1] == \"p\":\n            if len(verb) > 2:\n                ed2 = verb + \"ed\"\n    elif verb [-1] == \"w\":\n            if len(verb) > 2:\n                ed2 = verb + \"ed\"\n    elif verb [-1] == \"c\":\n            if len(verb) > 2:\n                ed2 = verb + \"k\" +\"ed\"\n    elif not is_vowel(verb[-1]) and is_vowel(verb[-2]) and not is_vowel(verb[-3]):\n        ed2 = verb + verb[-1] + \"ed\"\n    elif verb[-1] == \"e\":\n        ed2 = verb + \"d\"\n    else:\n        ed2 = verb + \"ed\" \n    return ed2\n\n#third person singular\ndef thirdps(verb):\n    if verb in modal_verbs:\n        thirdps = verb + \" \"\n    elif verb in exceptions:\n        thirdps = exceptions[verb][0]\n    elif verb[-1] == \"h\" and verb[-2] == \"c\":\n        thirdps = verb + \"es\"\n    elif verb[-1] == \"x\":\n                thirdps = verb + \"es\"\n    elif verb[-1] == \"s\":\n        thirdps = verb + \"es\"\n    elif verb[-1] == \"z\":\n        thirdps = verb + \"es\"\n    elif verb[-1] == \"h\" and verb[-2] == \"s\":\n        thirdps = verb + \"es\"\n    elif verb[-1] == \"o\":\n        thirdps = verb + \"es\"\n    elif verb[-1] == \"y\" and not is_vowel(verb[-2]):\n        thirdps = verb[:-1] + \"ies\"\n    else:\n        thirdps = verb + \"s\"\n    return thirdps\n\nexceptions3 = [\"flip\",\"stop\"]\nexceptions2 = [\"occur\", \"refer\", \"transfer\"]\nexceptions = {\"do\":[\"does\"], \"have\":[\"has\"], \"be\":[\"is\"]}\n\nmodal_verbs = [\"can\", \"could\", \"may\", \"might\", \"shall\", \"will\",\"would\",\"should\", \"must\"]\nirreg_verbs = {\"arise\": [\"arose \", \"arisen \"], \n                \"awake\": [\"awakened\/awoke\", \"awakened\/awoken\"], \n                \"bear\": [\"bore\", \"born\/borne\"],\n                \"beat\": [\"beat\", \"beaten\/beat\"],\n                \"become\": [\"became\", \"become\"],\n                \"begin\": [\"began\", \"begun\"],\n                \"bend\": [\"bent\", \"bent\"],\n                \"bet\": [\"bet\/betted\", \"bet\/betted\"],\n                \"bid\": [\"bid\/bade\", \"bidden\"],\n                \"bind\": [\"bound\", \"bound\"],\n                \"bite\": [\"bit\", \"bitten\"],\n                \"bleed\": [\"bled\", \"bled\"],\n                \"blow\": [\"blew\", \"blown\"],\n                \"break\": [\"broke\", \"broken\"],\n                \"breed\": [\"bred\", \"bred\"],\n                \"bring\": [\"brought\", \"brought\"],\n                \"build\": [\"built\", \"built\"],\n                \"burn\": [\"burned\/burnt\", \"burned\/burnt\"],\n                \"burst\": [\"burst\", \"burst\"],\n                \"bust\": [\"busted\/bust\", \"busted\/bust\"],\n                \"go\":[\"went\", \"gone\"],\n                \"be\":[\"was\/were\", \"been\"], \n                \"come\": [\"came\", \"come\"], \n                \"win\":[\"won\",\"won\"], \n                \"write\":[\"wrote\", \"written\"], \n                \"see\":[\"saw\",\"seen\"], \n                \"put\":[\"put\", \"put\"], \n                \"ride\":[\"rode\", \"ridden\"],\n                \"catch\": [\"caught\", \"caught\"],\n               \"deal\": [\"dealt\", \"dealt\"],\n                \"dig\": [\"dug\", \"dug\"],\n                \"dive\": [\"dove\/dived\", \"dived\"],\n                \"do\": [\"did\", \"done\"],\n                \"draw\": [\"drew\", \"drawn\"],\n                \"dream\": [\"dreamed\/dreamt\", \"dreamed\/dreamt\"],\n                \"drink\": [\"drank\", \"drunk\"],\n                \"drive\": [\"drove\", \"driven\"],\n                \"dwell\": [\"dwelt\/dwelled\", \"dwelt\/dwelled\"],\n                \"eat\": [\"ate\", \"eaten\"],\n                \"fall\": [\"fell\", \"fallen\"],\n                \"feed\": [\"fed\", \"fed\"],\n                \"feel\": [\"felt\", \"felt\"],\n                \"fight\": [\"fought\", \"fought\"],\n                \"find\": [\"found\", \"found\"],\n                \"fit\": [\"fitted\/fit\", \"fitted\/fit\"],\n                \"flee\": [\"fled\", \"fled\"],\n                \"fling\": [\"flung\", \"flung\"],\n                \"cut\": [\"cut\", \"cut\" ],\n                \"choose\": [\"chose\", \"chosen\"], \n                \"deal\": [\"dealt\", \"dealt\"],\n                \"sing\": [\"sang\", \"sung\"],\n                \"have\":[\"had\", \"had\"],\n                \"shoot\":[\"shot\", \"shot\"],\n                \"drive\": [\"drove\", \"driven\"],\n                \"speak\":[\"spoke\", \"spoken\"],\n                \"bring\": [\"brought\", \"brought\"],\n                \"take\":[\"took\", \"taken\"],\n                \"sweep\":[\"swept\",\"swept\"],\n                \"forget\":[\"forgot\",\"forgotten\"],\n                \"wake\":[\"woke\", \"woken\"],\n                \"understand\":[\"understood\",\"understood\"],\n                \"swim\":[\"swam\",\"swum\"],\n                \"swing\":[\"swung\", \"swung\"],\n                \"spit\":[\"spat\", \"spat\"],\n                \"lay\": [\"laid\", \"laid\"],\n                \"lie\": [\"lay\/lied\", \"lain\/lied\"],\n                \"stink\":[\"stank\/stunk\",\"stunk\"],\n                \"string\": [\"strung\", \"strung\"],  \n                \"tread\": [\"trod\", \"trodden\"],\n                \"slay\":[\"slew\",\"slain\"],\n                \"shed\":[\"shed\",\"shed\"],\n                \"fling\":[\"flung\",\"flung\"],\n                \"teach\":[\"taught\",\"taught\"],\n                \"think\":[\"thought\",\"thought\"],\n                \"swear\":[\"swore\",\"sworn\"],\n                \"sew\":[\"sewed\",\"sewn\"],\n                \"slit\":[\"slit\",\"slit\"],\n                \"shine\":[\"shone\",\"shone\"],\n                \"sink\":[\"sank\",\"sunk\"],\n                \"forgive\":[\"forgave\",\"forgiven\"],\n                \"do\":[\"did\",\"done\"],\n                \"rise\":[\"rose\", \"risen\"],\n                \"hear\": [\"heard\", \"heard\"],\n                \"fly\": [\"flew\", \"flown\"],\n                \"stick\":[\"stuck\",\"stuck\"],\n                \"throw\":[\"threw\",\"thrown\"]\n                    }\n","a5ab9f18":"Name: Antonio Gonjar Verdejo 4\u00ba A EE.II. \n\nUMA e-mail: 0619716630@uma.es"}}