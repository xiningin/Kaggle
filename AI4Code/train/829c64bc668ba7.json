{"cell_type":{"d89aa04f":"code","ef75222e":"code","ac248ac4":"code","f36caf17":"code","74fd4275":"code","023c74f9":"code","2df22fab":"code","368cea7c":"code","cc0fb967":"code","197891d7":"code","e7c202b6":"code","64a17904":"code","ad6c8675":"code","7424f341":"code","c8a86e37":"code","ae2fcdfa":"code","50d87a5b":"code","8a41631e":"code","d5e1d76d":"code","326f6216":"code","82217716":"code","8335fb3f":"code","e5c6419f":"code","29ed4900":"code","7fae42b4":"code","54040c77":"code","eb79394a":"code","9660d1f1":"code","07193914":"markdown","7873d092":"markdown","c000893e":"markdown","dd0bb303":"markdown","ce55ff8d":"markdown","45674804":"markdown","06ff3803":"markdown","2c6a08bc":"markdown","82b75a6a":"markdown","15a62895":"markdown","d614b00f":"markdown","7135b454":"markdown","a35ac2bc":"markdown","f764e5d4":"markdown","7a425331":"markdown","597158a2":"markdown","a616b79c":"markdown","452b009a":"markdown","1d8da4ee":"markdown","6187a46b":"markdown","843425eb":"markdown"},"source":{"d89aa04f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","ef75222e":"loan_data = pd.read_csv(\"loan_data.csv\")","ac248ac4":"loan_data.head()","f36caf17":"loan_data.describe()","74fd4275":"plt.figure(figsize=(15,9))\nloan_data[loan_data['credit.policy']==1]['fico'].hist(alpha=0.5,color='blue',\n                                              bins=30,label='Credit.Policy=1')\nloan_data[loan_data['credit.policy']==0]['fico'].hist(alpha=0.5,color='red',\n                                              bins=30,label='Credit.Policy=0')\nplt.legend()\nplt.xlabel('FICO')","023c74f9":"plt.figure(figsize=(15,9))\nloan_data[loan_data['not.fully.paid']==1]['fico'].hist(alpha=0.5,color='blue',\n                                              bins=30,label='not.fully.paid=1')\nloan_data[loan_data['not.fully.paid']==0]['fico'].hist(alpha=0.5,color='red',\n                                              bins=30,label='not.fully.paid=0')\nplt.legend()\nplt.xlabel('FICO')","2df22fab":"plt.figure(figsize=(15,9))\nsns.countplot(x=\"purpose\",hue='not.fully.paid',data=loan_data, palette=\"Paired\")","368cea7c":"sns.set(style=\"whitegrid\")\nsns.jointplot(x='fico', y='int.rate', data=loan_data, color=\"purple\")","cc0fb967":"# call regplot on each axes\n#fig, (ax1, ax2) = plt.subplots(ncols=2, sharey=True)\nsns.set(style=\"darkgrid\")\nsns.lmplot(\"fico\", \"int.rate\", data=loan_data,hue= 'credit.policy',col='not.fully.paid', palette= 'Set1')\n#sns.regplot(x=idx, y=df['x'], ax=ax1)\n#sns.regplot(x=idx, y=df['y'], ax=ax2)","197891d7":"loan_data.info()","e7c202b6":"purpose = pd.get_dummies(loan_data['purpose'],drop_first=True)\n","64a17904":"loan_data.drop(['purpose'],axis=1,inplace=True)","ad6c8675":"final_data = pd.concat([loan_data,purpose],axis=1)","7424f341":"final_data.head()","c8a86e37":"from sklearn.model_selection import train_test_split","ae2fcdfa":"X = loan_data.drop('not.fully.paid',axis=1)\ny = loan_data['not.fully.paid']","50d87a5b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)","8a41631e":"from sklearn.tree import DecisionTreeClassifier","d5e1d76d":"dtree = DecisionTreeClassifier()","326f6216":"dtree.fit(X_train,y_train)\n","82217716":"predictions = dtree.predict(X_test)","8335fb3f":"from sklearn.metrics import classification_report,confusion_matrix","e5c6419f":"print(classification_report(y_test,predictions))","29ed4900":"print(confusion_matrix(y_test,predictions))","7fae42b4":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train, y_train)","54040c77":"rfc_pred = rfc.predict(X_test)","eb79394a":"print(classification_report(y_test,rfc_pred))","9660d1f1":"print(confusion_matrix(y_test,rfc_pred))","07193914":"___\n\n<a href='http:\/\/www.pieriandata.com'> <img src='..\/Pierian_Data_Logo.png' \/><\/a>\n___\n# Random Forest Project \n\nFor this project we will be exploring publicly available data from [LendingClub.com](www.lendingclub.com). Lending Club connects people who need money (borrowers) with people who have money (investors). Hopefully, as an investor you would want to invest in people who showed a profile of having a high probability of paying you back. We will try to create a model that will help predict this.\n\nLending club had a [very interesting year in 2016](https:\/\/en.wikipedia.org\/wiki\/Lending_Club#2016), so let's check out some of their data and keep the context in mind. This data is from before they even went public.\n\nWe will use lending data from 2007-2010 and be trying to classify and predict whether or not the borrower paid back their loan in full. You can download the data from [here](https:\/\/www.lendingclub.com\/info\/download-data.action) or just use the csv already provided. It's recommended you use the csv provided as it has been cleaned of NA values.\n\nHere are what the columns represent:\n* credit.policy: 1 if the customer meets the credit underwriting criteria of LendingClub.com, and 0 otherwise.\n* purpose: The purpose of the loan (takes values \"credit_card\", \"debt_consolidation\", \"educational\", \"major_purchase\", \"small_business\", and \"all_other\").\n* int.rate: The interest rate of the loan, as a proportion (a rate of 11% would be stored as 0.11). Borrowers judged by LendingClub.com to be more risky are assigned higher interest rates.\n* installment: The monthly installments owed by the borrower if the loan is funded.\n* log.annual.inc: The natural log of the self-reported annual income of the borrower.\n* dti: The debt-to-income ratio of the borrower (amount of debt divided by annual income).\n* fico: The FICO credit score of the borrower.\n* days.with.cr.line: The number of days the borrower has had a credit line.\n* revol.bal: The borrower's revolving balance (amount unpaid at the end of the credit card billing cycle).\n* revol.util: The borrower's revolving line utilization rate (the amount of the credit line used relative to total credit available).\n* inq.last.6mths: The borrower's number of inquiries by creditors in the last 6 months.\n* delinq.2yrs: The number of times the borrower had been 30+ days past due on a payment in the past 2 years.\n* pub.rec: The borrower's number of derogatory public records (bankruptcy filings, tax liens, or judgments).","7873d092":"** Check out the info(), head(), and describe() methods on loans.**","c000893e":"## Training the Random Forest model\n\nNow its time to train our model!\n\n**Create an instance of the RandomForestClassifier class and fit it to our training data from the previous step.**","dd0bb303":"**Create an instance of DecisionTreeClassifier() called dtree and fit it to the training data.**","ce55ff8d":"** Create a countplot using seaborn showing the counts of loans by purpose, with the color hue defined by not.fully.paid. **","45674804":"## Training a Decision Tree Model\n\nLet's start by training a single decision tree first!\n\n** Import DecisionTreeClassifier**","06ff3803":"# Exploratory Data Analysis\n\n\n** Create a histogram of two FICO distributions on top of each other, one for each credit.policy outcome.**\n","2c6a08bc":"## Predictions and Evaluation\n\nLet's predict off the y_test values and evaluate our model.\n\n** Predict the class of not.fully.paid for the X_test data.**","82b75a6a":"# Setting up the Data\n\nLet's get ready to set up our data for our Random Forest Classification Model!","15a62895":"** Let's see the trend between FICO score and interest rate. Recreate the following jointplot.**","d614b00f":"**Show the Confusion Matrix for the predictions.**","7135b454":"## Get the Data\n\n** Use pandas to read loan_data.csv as a dataframe called loans.**","a35ac2bc":"**Now use pd.get_dummies(loans,columns=cat_feats,drop_first=True) to create a fixed larger dataframe that has new feature columns with dummy variables. Set this dataframe as final_data.**","f764e5d4":"## Categorical Features\n\nNotice that the **purpose** column as categorical\n\nThat means we need to transform them using dummy variables so sklearn will be able to understand them. Let's do this in one clean step using pd.get_dummies.\n\nLet's show you a way of dealing with these columns that can be expanded to multiple categorical features if necessary.\n\n**Create a list of 1 element containing the string 'purpose'. Call this list cat_feats.**","7a425331":"# Import Libraries\n\n**Import the usual libraries for pandas and plotting. You can import sklearn later on.**","597158a2":"**Now create a classification report from the results. Do you get anything strange or some sort of warning?**","a616b79c":"## Train Test Split\n\nNow its time to split our data into a training set and a testing set!\n\n** Use sklearn to split your data into a training set and a testing set as we've done in the past.**","452b009a":"** Create a similar figure, except this time select by the not.fully.paid column.**","1d8da4ee":"Random forest performance was better.","6187a46b":"## Predictions and Evaluation of Decision Tree\n**Create predictions from the test set and create a classification report and a confusion matrix.**","843425eb":"** Create the following lmplots to see if the trend differed between not.fully.paid and credit.policy. Check the documentation for lmplot() if you can't figure out how to separate it into columns.**"}}