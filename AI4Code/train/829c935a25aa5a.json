{"cell_type":{"0ecb8ea9":"code","4efd7869":"code","f36d6fd5":"code","973ff49d":"code","d7499f93":"code","6c61cee5":"code","5503c135":"code","fad3bb4c":"code","32fc0f56":"code","da9759e6":"code","7ac42220":"code","c713c353":"code","5e2b8cd7":"code","6a21ddc8":"code","01534078":"code","39d5d1cb":"code","3a5c5375":"code","e4212087":"code","0494d3d2":"code","976c6811":"code","03b4f801":"code","61fd7449":"code","762d6629":"markdown","e314421e":"markdown","fe3b1bb7":"markdown","4219f1c6":"markdown","e393e20a":"markdown","114bc364":"markdown"},"source":{"0ecb8ea9":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import style \nstyle.use('ggplot')","4efd7869":"#Reading Training Data\ndf = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","f36d6fd5":"#Looking at the data\ndf","973ff49d":"#Checking the Null values, and stats of the data\ndf.info()\ndf.describe(include = 'all')","d7499f93":"df['Title'] = df['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\ndf['Title'].unique()","6c61cee5":"survivedPercentages = []\nsurvivedCounts = []\nfig, ax = plt.subplots()\nfor idx, i in enumerate(df['Title'].unique()):\n    #print(i)\n    tempdf = df[df['Title'] == i]\n    totalCount = len(tempdf)\n    survivedPercentages.append(len(tempdf[tempdf['Survived'] == 1])\/totalCount*100)\n    survivedCounts.append(len(tempdf[tempdf['Survived'] == 1]))\n    \nxrange = range(len(df['Title'].unique()))\nax.bar(xrange, survivedPercentages, color = \"green\")    \nax.set_xticks(xrange)\nax.set_xticklabels(df['Title'].unique(), rotation = 90)\nax.set_yticks(range(-5, 111, 5))\nfor idx, val in enumerate(survivedCounts):\n    ax.text(idx, survivedPercentages[idx]+2, str(survivedCounts[idx]), horizontalalignment = 'center')\nplt.title(\"Title vs Survived Percentage\")\nplt.xlabel(\"Title\")\nplt.ylabel(\"Survived Percentage (and Count)\")\nplt.show()\n#df","5503c135":"#0\/B - Boy, 1\/G - Girl, 2\/W - Woman, 3\/M - Man (M to be filled as default)\n#TitleDict = {'Master' : 'B', 'Miss' : 'G','Ms' : 'G', 'Mlle' : 'G', 'Mrs' : 'W', 'Mme' : 'W', 'Lady' : 'W', 'the Countess' : 'W'}\nTitleDict = {'Master' : 1, 'Miss' : 1,'Ms' : 1, 'Mlle' : 1, 'Mrs' : 2, 'Mme' : 2, 'Lady' : 2, 'the Countess' : 2}\nCabinDict = {'A':1, 'B':2, 'C':3, 'D':4, 'E':5, 'F':6, 'G':7, 'T':8,}\nEmbarkedDict = {'C' : 1, 'S' : 2, 'Q' : 3}\nSexDict = {'female' : 0, 'male' : 1}","fad3bb4c":"#Average of Mean and Median\nfillAge = (df['Age'].mean() + df['Age'].median())\/2\nfillFare = (df['Fare'].mean() + df['Fare'].median())\/2\nprint(f\"Fill Age: {fillAge} \\tFill Fare: {fillFare}\")","32fc0f56":"df['Age'].fillna(fillAge, inplace = True)\ndf['Sex'] = df['Sex'].map(SexDict)\n\ndf['Title'] = df['Title'].map(TitleDict)\ndf['Title'].fillna(3, inplace = True)\n\ndf['Cabin'].fillna('C', inplace = True)\ndf['Cabin'] = df['Cabin'].apply(lambda x: x[0])\ndf['Cabin'] = df['Cabin'].map(CabinDict)\n\ndf['Embarked'].fillna('S', inplace = True)\ndf['Embarked'] = df['Embarked'].map(EmbarkedDict)","da9759e6":"plt.figure(figsize = (10, 7))\nplt.title('Correlation Matrix')\nsns.heatmap(df.corr(), annot = True, fmt = \".2f\")","7ac42220":"X = df.drop(['Survived', 'PassengerId', 'Name', 'Ticket'], axis = 1) \ny = df['Survived'].values\n\n#Dummies to simulate One-Hot Encoding\nX = pd.get_dummies(X)\ncolumns = X.columns","c713c353":"#Scaling\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX = scaler.fit_transform(X)","5e2b8cd7":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier \n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)\nclf = RandomForestClassifier(n_estimators = 100, max_depth=7, min_samples_split=3, n_jobs=-1)\nclf.fit(X_train, y_train)\nacc = clf.score(X_test, y_test)\nprint(f\"Accuracy on Validation Set: {acc*100}\")","6a21ddc8":"featureimp = []\nfor i in range(len(X[0])):\n    Xtemp = X_test\n    Xtemp[:][i] = 0\n    score = clf.score(Xtemp, y_test)\n    #featureimp.append(score)\n    featureimp.append(acc - score)\n#featureimp","01534078":"plt.barh(columns, featureimp)\nplt.title(\"Feature Importance\")\nplt.show()","39d5d1cb":"X_Test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","3a5c5375":"X_Test['Age'].fillna(fillAge, inplace = True)\nX_Test['Sex'] = X_Test['Sex'].map(SexDict)\n\nX_Test['Title'] = X_Test['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\nX_Test['Title'] = X_Test['Title'].map(TitleDict)\nX_Test['Title'].fillna(3, inplace = True)\n\nX_Test['Cabin'].fillna('C', inplace = True)\nX_Test['Cabin'] = X_Test['Cabin'].apply(lambda x: x[0])\nX_Test['Cabin'] = X_Test['Cabin'].map(CabinDict)\n\nX_Test['Embarked'].fillna('S', inplace = True)\nX_Test['Embarked'] = X_Test['Embarked'].map(EmbarkedDict)\n\nX_Test['Fare'].fillna(fillFare, inplace = True)\n\n#Changing from float64 to float32 since RF implicitly converts while fitting to float32\n#Which doesn't happen during predicting\nX_Test['Age'] = X_Test['Age'].astype(np.float32)\nX_Test['Fare'] = X_Test['Fare'].astype(np.float32)\nX_Test['Title'] = X_Test['Title'].astype(np.float32)","e4212087":"PID = X_Test['PassengerId']\nX_Test.drop(['PassengerId', 'Name', 'Ticket'], axis = 1, inplace = True) \nX_Test","0494d3d2":"X_Test.info()","976c6811":"X_Test = pd.get_dummies(X_Test)\nX_Test = scaler.fit_transform(X_Test)\nypred = clf.predict(X_Test)\n#ypred","03b4f801":"submission = pd.DataFrame({'PassengerId': PID, 'Survived': ypred})\nsubmission.to_csv(\"TitanicRF.csv\", index = False)","61fd7449":"submission.head()","762d6629":"# **Feature Engineering**","e314421e":"# **Feature Importance**","fe3b1bb7":"# **Importing Modules**","4219f1c6":"# **Model Fitting**","e393e20a":"# **Viewing Data**","114bc364":"# **Test Data**"}}