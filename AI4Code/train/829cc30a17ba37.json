{"cell_type":{"f54ee00e":"code","f0f1cac7":"code","7f97e6a5":"code","21061e02":"code","456744f3":"code","5e258e7c":"code","1727d47f":"code","94f82c23":"code","5eccb826":"code","74782301":"code","ab8cc59a":"code","165f51d7":"code","2b357850":"code","8bb306cb":"code","c7c4c9f3":"code","62f15335":"code","78dad4a2":"code","d70365bb":"code","a29a9d04":"code","b5adff8c":"code","91bd8cf3":"code","36f1eef3":"code","06de7275":"code","210e856e":"code","0708096d":"code","18bb4b1a":"code","56598309":"code","4add1fa6":"code","3bc479c5":"code","565e2bae":"markdown","16b604ba":"markdown","b05cb805":"markdown","9a32052c":"markdown","4a3305cc":"markdown","536301a0":"markdown","fe9acc23":"markdown","056b9e5b":"markdown","8e0c650a":"markdown","18829041":"markdown","a92f8954":"markdown"},"source":{"f54ee00e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f0f1cac7":"import pandas as pd\ntext = '''Management is the process of designing and maintaining an environment in which individuals, working together\nin groups, effectively accomplish selected aims. As managers, people carry out the managerial functions of planning,\norganizing, staffing, leading and controlling. Managers are entrusted with the responsibility of taking actions that\nwill make it possible for individuals to make their best contribution to group objectives. Management thus applies to\nsmall and large organizations, to profit and not-for-profit enterprises, to manufacturing as well as service industries. \nSo, the term \u201cManagement\u201d refers to business, government agencies, hospitals, universities, churches, temples, and in \nits broad sense covers all business and non-business organizations. Effective managing is the concern of \nthe Corporation President, the hospital administrator, the government first line executives and the heads of all\ninstitutions and enterprises, big or small.'''\n\nprint(text)","7f97e6a5":"# !pip install nltk\nimport nltk\nfrom nltk import word_tokenize,sent_tokenize\nfrom nltk.stem import PorterStemmer,WordNetLemmatizer","21061e02":"sent_tokenize(text)","456744f3":"import re\ntext=re.sub(r'\\d|\\.|\\,','',text) # Removing numbers and additional spaces\ntokens = word_tokenize(text)\nprint(tokens)","5e258e7c":"print(nltk.pos_tag(tokens))","1727d47f":"from nltk.corpus import stopwords\nstopwords = stopwords.words(\"english\")\nprint(stopwords)","94f82c23":"tokens = [token for token in tokens if token not in stopwords]\nprint(tokens)","5eccb826":"stemmer = PorterStemmer()\nstemmer_words=[stemmer.stem(token) for token in tokens if token not in stopwords]\nprint(stemmer_words)","74782301":"lmtzr = WordNetLemmatizer()\nlmtzr_words = [lmtzr.lemmatize(token) for token in tokens if token not in stopwords]\nprint(lmtzr_words)","ab8cc59a":"!pip install polyglot\n!pip install pyicu\n!pip install pycld2\n!pip install morfessor\nimport polyglot\nfrom polyglot.text import Text","165f51d7":"## Word tokenizaiton using Poly Glot\n\nglot_text = Text(text)\nprint(glot_text.words)","2b357850":"## Sentence Tokenization using PolyGlot\n\nglot_text.sentences","8bb306cb":"## Extracting Parts of Speech tags (POS Tags) \n\nprint(glot_text.pos_tags)","c7c4c9f3":"!pip install textblob\nfrom textblob import TextBlob\nblob_text = TextBlob(text)\n\n## Word tokenization using text blob\nprint(blob_text.words)","62f15335":"## Sentence tokenization using TEXT BLOB\nblob_text.sentences","78dad4a2":"## Extracting Parts of Speech tags (POS Tags)\n\nprint(blob_text.pos_tags)","d70365bb":"from nltk.corpus import stopwords\nstopwords_german = stopwords.words(\"german\")\nstopwords_english = stopwords.words(\"english\")","a29a9d04":"print(stopwords_german)","b5adff8c":"### Text \ntext = '''Zu meiner Familie geh\u00f6ren vier Personen. Die Mutter bin ich und dann geh\u00f6rt nat\u00fcrlich mein Mann dazu. Wir haben zwei Kinder, einen Sohn, der sechs Jahre alt ist und eine dreij\u00e4hrige Tochter.\n\nWir wohnen in einem kleinen Haus mit einem Garten. Dort k\u00f6nnen die Kinder ein bisschen spielen. Unser Sohn kommt bald in die Schule, unsere Tochter geht noch eine Zeit lang in den Kindergarten. Meine Kinder sind am Nachmittag zu Hause. So arbeite ich nur halbtags.\n\nEigentlich geh\u00f6ren zu unserer Familie auch noch die Gro\u00dfeltern. Sie wohnen nicht bei uns. Sie haben ein Haus in der N\u00e4he. Die Kinder gehen sie oft besuchen.'''","91bd8cf3":"from nltk import word_tokenize,sent_tokenize","36f1eef3":"tokens = word_tokenize(text)","06de7275":"count_english = 0\ncount_german = 0\nfor token in tokens:\n    if token in stopwords_english:\n        count_english=count_english+1\n    if token in stopwords_german:\n        count_german = count_german+1\nprint(\"There are \",count_english,\"english and \",count_german,\"german words in the given document.\")\nif count_english < count_german:\n    print(\"So, This is german language document\")\nelif count_english > count_german:\n    print(\"So, This is english language document\")","210e856e":"print(count_english)\nprint(count_german)","0708096d":"import os\nos.listdir('\/Users\/ise\/nltk_data\/corpora\/stopwords\/')","18bb4b1a":"from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\nsample_text = ['problem of mathematics','mathematics is base for all','all will have different problems']","56598309":"cv=CountVectorizer(stop_words='english',lowercase=True)\n\ntdm_train = cv.fit_transform(sample_text)\nMat = tdm_train.todense()\n\ncount_vec_data = pd.DataFrame(Mat,columns = sorted(cv.get_feature_names()),index=['doc1','doc2','doc3'])\ncount_vec_data","4add1fa6":"tfidf_transformer = TfidfVectorizer(stop_words='english',lowercase=True,norm=None)\ntfidf = tfidf_transformer.fit_transform(sample_text)","3bc479c5":"tfidf = pd.DataFrame(tfidf.todense(),columns = tfidf_transformer.get_feature_names(),index=['doc1','doc2','doc3'])\ntfidf","565e2bae":"# Lemmatization","16b604ba":"# TextBlob","b05cb805":"# Sentence Tokenization","9a32052c":"# Stop words - Removal","4a3305cc":"# Stemming","536301a0":"## Extracting Parts of Speech tags (POS Tags)","fe9acc23":"## Language Classification\n","056b9e5b":"# Count Vectorzer","8e0c650a":"# Word tokenization","18829041":"## TFIDR VECTORIZER","a92f8954":"# Activity\n### Explore polyglot and textblob libraries and do following tasks\n1. Sentence tokenization\n2. Word tokennization\n3. Extraction of POS Tags(Parts of Speech) tags"}}