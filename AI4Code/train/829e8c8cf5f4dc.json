{"cell_type":{"0fae347a":"code","81ee499e":"code","eb1025bc":"code","fbf2e2a9":"code","754e6ea7":"code","76552c1e":"code","612f2eaf":"code","2472231d":"code","01276f96":"code","f386dc74":"code","3e9f2327":"code","347ce760":"code","38a4f69d":"code","8e2cadf7":"code","22371ff0":"code","bec21464":"code","2bc2199d":"code","d3e249b4":"code","9baffa85":"code","9b12964e":"code","ccae7d4b":"code","cb44cc0f":"code","b10a10e3":"code","23a78d53":"code","3c68b664":"code","976dcc8d":"code","51adda18":"code","7afe091a":"code","7e79200e":"code","01bacb3d":"code","8b63b6e6":"code","23014cf8":"code","0bd15d97":"code","dbf93d1b":"code","13942e2c":"code","de42a112":"code","57da7cc8":"code","d4b52dc7":"code","d1489a36":"code","2cf3502f":"code","25369ca1":"code","4ee636bc":"code","e9a880dd":"code","209d4a9b":"code","a05865a7":"code","d80942a9":"code","ea132144":"code","fac3621d":"code","347ae43f":"code","2f40c5b3":"code","48e0a863":"code","03415178":"code","0cd9e0de":"code","0ccb4b6a":"code","f4fe5690":"code","6e3e0f9e":"code","278965cc":"code","1639adc6":"code","1831f54d":"code","cf5b6aa0":"code","1784023c":"code","9361adaf":"code","5dc646f0":"code","9044e273":"code","646f6b6b":"code","dfd1778e":"code","8288a1dd":"code","2a573bcb":"code","9d92e274":"code","b8cfde46":"code","ca8879bb":"code","5fde6f3c":"code","851e8bb6":"code","86627b1b":"code","9537afce":"code","101e94ce":"code","0610c346":"code","bf312c6e":"code","80fdf0f6":"code","3ce05a14":"code","05f234d5":"code","7f0e187a":"code","e8116128":"code","21bd2f4a":"code","52a28de9":"markdown","34d4c43a":"markdown","bbc1c85f":"markdown","41bb9ec5":"markdown","7f5fa77b":"markdown","7ad7cbc0":"markdown","04e3c01d":"markdown","6ac1a4b6":"markdown"},"source":{"0fae347a":"import numpy as np\nimport pandas as pd","81ee499e":"df = pd.read_csv(\"..\/input\/recomend-data\/rating_final.csv\")\ncuisine = pd.read_csv(\"..\/input\/recomend-data\/chefmozcuisine.csv\")","eb1025bc":"df.head()","fbf2e2a9":"cuisine.head()","754e6ea7":"### recomendation based on counting\nworking_df = df[['userID','placeID','rating']]","76552c1e":"working_df.head()","612f2eaf":"import matplotlib.pyplot as plt\nr = pd.DataFrame(working_df.rating.value_counts())\nlabels = list(r.index)\ndata = list(r['rating'])\nexplode = (0, 0.1, 0)\nfig1, ax1 = plt.subplots()\nax1.pie(data, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.legend()\nplt.show()","2472231d":"## take the data and geoup the place(which in this case a resturant)\n## then groupby the number of rating count\nrating_count = pd.DataFrame(df.groupby('placeID')['rating'].count())","01276f96":"## and sort them based on the assending order\nmost_rated = rating_count.sort_values('rating',ascending=False)","f386dc74":"top = most_rated.head()\ntop","3e9f2327":"top.plot(kind='bar')","347ce760":"## in order to merge the coumn you need\nfinal = pd.merge(top,cuisine,on='placeID')","38a4f69d":"final","8e2cadf7":"final2 = pd.DataFrame(final.groupby('Rcuisine')['rating'].count())","22371ff0":"final2.plot(kind='bar')","bec21464":"### so we can see the maxican food get the most rating in the top resturant\n### so we can recomend the mexican food","2bc2199d":"import numpy as np\nimport pandas as pd","d3e249b4":"df = pd.read_csv(\"..\/input\/recomend-data\/rating_final.csv\")\ncuisine = pd.read_csv(\"..\/input\/recomend-data\/chefmozcuisine.csv\")\ngeodata = pd.read_csv(\"..\/input\/recomend-data\/geoplaces2.csv\", engine='python')","9baffa85":"df.head()","9b12964e":"cuisine.head()","ccae7d4b":"geodata.head()","cb44cc0f":"geodata = geodata[['placeID','name']]","b10a10e3":"geodata.head()","23a78d53":"new_rating = pd.DataFrame(df.groupby('placeID')['rating'].mean())","3c68b664":"new_rating.head()","976dcc8d":"new_rating['rating_count'] = pd.DataFrame(df.groupby('placeID')['rating'].count())","51adda18":"new_rating","7afe091a":"## sort the new_rating based on the assending value\nfinal1 = new_rating.sort_values('rating_count',ascending=False).head()","7e79200e":"final1","01bacb3d":"#### now merge the data to get the \nfinal = pd.merge(final1,geodata,on='placeID')","8b63b6e6":"final","23014cf8":"final = pd.merge(final,cuisine,on='placeID')","0bd15d97":"final","dbf93d1b":"## doing a cross_tab analysis for the df data frame\ndf.head() ### this is the data frame we are doing crosstab analysis","13942e2c":"places_crosstab = pd.pivot_table(data=df,values='rating',index='userID',columns='placeID')","de42a112":"places_crosstab","57da7cc8":"### this data actiually shows the raing is given by different user to different places\n## there is null value because not all user give rating  to all places","d4b52dc7":"places_crosstab.head()","d1489a36":"first = final['placeID'][0] ## this is the first that has the highest rating","2cf3502f":"first","25369ca1":"## so now from the crosstab we can find all the rating \n## of this place that user give\n## and we can fin dit on clumn\n## becase the cross tab the places is in the column\ntortas_rating = places_crosstab[first]","4ee636bc":"tortas_rating","e9a880dd":"tortas_rating\n## now remove the NAN\ntortas_rating = tortas_rating[tortas_rating >= 0]\n","209d4a9b":"tortas_rating","a05865a7":"tortas_rating.plot(kind=\"bar\")","d80942a9":"tortas_rating","ea132144":"similler_tortas = places_crosstab.corrwith(tortas_rating)\ncorr_tortus = pd.DataFrame(similler_tortas,columns=[\"pearson_r\"])\ncorr_tortus.dropna(inplace=True)","fac3621d":"corr_tortus","347ae43f":"corr_tortus.plot(kind='bar')","2f40c5b3":"## we slao need to know that the similler places rating count\ncorr_tortus['rating_count'] = new_rating['rating_count']","48e0a863":"corr_smry_w_tortas=pd.DataFrame(corr_tortus)","03415178":"## target\n    ## we want to find the resturant that has best positive corrlation\n    ## and has god rating [rating greater than 10]","0cd9e0de":"similler = corr_smry_w_tortas[corr_smry_w_tortas['rating_count']>10].sort_values('pearson_r',ascending=False)","0ccb4b6a":"similler.head()","f4fe5690":"## for those in pearson r has 1 means that it has only one rating\n## so we throw out them\nfinal = pd.merge(similler,cuisine,on='placeID')\n","6e3e0f9e":"final2 = pd.merge(final,geodata,on='placeID')","278965cc":"final2.head()","1639adc6":"final2[final2['Rcuisine']=='Fast_Food']","1831f54d":"import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression","cf5b6aa0":"df = pd.read_csv(\"..\/input\/recomend-data\/bank_full_w_dummy_vars.csv\")","1784023c":"df.head()","9361adaf":"df.info()","5dc646f0":"df.columns","9044e273":"X = df.iloc[:,18:36]","646f6b6b":"X.head()","dfd1778e":"Y = df[['y_binary                    ']]","8288a1dd":"X.head()","2a573bcb":"Y.head()","9d92e274":"Logreg1 = LogisticRegression()\n","b8cfde46":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(X,Y)","ca8879bb":"print(len(x_train))\nprint(len(y_train))\nprint(len(x_test))\nprint(len(y_test))","5fde6f3c":"Logreg1.fit(x_train,y_train)","851e8bb6":"Logreg1.score(x_test,y_test)","86627b1b":"x_test.values[0]","9537afce":"Logreg1.predict([x_test.values[0]])","101e94ce":"import numpy as np\nimport pandas as pd\nimport sklearn\nfrom sklearn.neighbors import NearestNeighbors","0610c346":"df = pd.read_csv(\"..\/input\/recomend-data\/mtcars.csv\")","bf312c6e":"df.head()","80fdf0f6":"X = df[['mpg','cyl','disp','hp','drat','wt','qsec']]","3ce05a14":"nbrc = NearestNeighbors(n_neighbors=1).fit(X)","05f234d5":"nbrc","7f0e187a":"nbrc.kneighbors([[15.0 ,9,260.0 ,90 ,2.90 ,1.620 ,20.46]])","e8116128":"df[df.index==3]","21bd2f4a":"## so we can see that it finds the related property car","52a28de9":"## Correlation based Algorithm (user to user filtering) (form of collaborative filtering)\n    * use the pearson r cofieient the <br>\n    * for r =1 positive linear relationship\n    * r = 0 no relation shop\n    * r = -1 negative relation\n    \n    ","34d4c43a":"## CONTENT BASED RECOMENDATION SYSTEM (USING MEMORY BASED CLASSIFIER) (KNN)\n## RECOMENDATION IS DONE BASED ON THE FEATURES\n## NOT THE USER RATING","bbc1c85f":"# Tortas serve Fast_food\n# so we will find which serve fast food\n","41bb9ec5":"## now make a test data properties of the car engine and usig knn find which row of the car properties is similler to the test data","7f5fa77b":"### now the tortas resturant does the best now from the cross tab analysis we will find which resturant is simmiler to the tortas based on the user simillar rating .it will create a pearson r coeffieient between the tortas resturant and other resturant\n","7ad7cbc0":"# Recommendation System\n--------------------------------------------\n* Collaborative Filtering\n  * user based (logistic regression)\n  * item based (using Pearson coefficient)\n  * popularity based recommendation system( KNN Algorithm)\n* Content Based Filtering\n  * content based (KNN recommendation)\n","04e3c01d":"## so the most similler resturant like Tortas is \"Restaurante El Reyecito\" ","6ac1a4b6":"# User Based Colaborative Filtering"}}