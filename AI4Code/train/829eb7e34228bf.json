{"cell_type":{"079ab1e3":"code","03bcfea8":"code","9406a44c":"code","077b1c05":"code","2ac9d701":"code","f2e8c5fd":"code","7428bb25":"code","f2dd4cfb":"code","21470d27":"code","b89a5c41":"code","e94c318a":"code","588b2f07":"code","a8b73a54":"code","80e75e40":"markdown","b939a33d":"markdown","bbf821e0":"markdown","d9feab69":"markdown","2219e729":"markdown"},"source":{"079ab1e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport trueskill # trueskill ranking\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","03bcfea8":"df = pd.read_csv('..\/input\/english-premier-league-results\/EPL.csv')\ndf.head().append(df.tail())","9406a44c":"df.columns","077b1c05":"df = df[['Date', 'HomeTeam', 'AwayTeam','FTR']].copy()\ndf.head()","2ac9d701":" set(df['AwayTeam'].unique())==set(df['HomeTeam'].unique())","f2e8c5fd":"df['Result_HomeTeam'] = df['FTR']\ndf['Result_AwayTeam'] = df['FTR']\n\ndf.replace({'Result_HomeTeam': {'H':0,'D':0,'A':1}},inplace=True)\ndf.replace({'Result_AwayTeam': {'H':1,'D':0,'A':0}},inplace=True)\ndf.head()","7428bb25":"df.isna().sum()","f2dd4cfb":"teams = df['HomeTeam'].unique().tolist()\nts = trueskill.TrueSkill()\n\nranking = []\n\n# Create Default ratings(mu=25, sigma=8.33)\nfor team in teams:\n       ranking.append(ts.create_rating())\n\n# create dictionary with all teams and initial ratings\nall_ranks_dict = dict(zip(teams,ranking))\nall_ranks_dict","21470d27":"home_team_rank = df['Result_HomeTeam'].values\naway_team_rank = df['Result_AwayTeam'].values\nts_ranks = np.stack((home_team_rank,away_team_rank), axis=-1) # create array of arrays with results\n\nhome_team = df['HomeTeam'].values\naway_team = df['AwayTeam'].values\nmatch_array = np.stack((home_team,away_team), axis=-1) # create array of arrays with all matches","b89a5c41":"def rating(mu,sigma):\n    \"\"\"\n    mu and sigma from TrueSkill: \n    mu = ts_rating.mu;\n    sigma = ts_rating.sigma\n    \n    Function returns trueskill rating value ('real score' is with 97.1% confidence not below that value)\n    \"\"\"\n    return mu-2*sigma","e94c318a":"# Create lists: with current ranks(before the game) and new ranks(after the game)\ncurr_ranks_list=[]\nnew_ranks_list=[]\nfor i in range(len(match_array)):\n    \n    # current ranks:\n    home_team_rank = all_ranks_dict[match_array[i][0]]\n    away_team_rank = all_ranks_dict[match_array[i][1]]\n\n    curr_ranks_list.append([rating(home_team_rank.mu,\n                                   home_team_rank.sigma),\n                            rating(away_team_rank.mu,\n                                   away_team_rank.sigma)])\n    \n    # new ranks:\n    new_ranks = ts.rate([(home_team_rank,),\n                         (away_team_rank,)],\n                        ranks = ts_ranks[i])\n    \n    new_home_team_rank = new_ranks[0][0]\n    new_away_team_rank = new_ranks[1][0]\n    \n    new_ranks_list.append([rating(new_home_team_rank.mu,\n                                  new_home_team_rank.sigma),\n                           rating(new_away_team_rank.mu,\n                                  new_away_team_rank.sigma)])        \n    \n    # update dictionary with changed\/new ranks:\n    all_ranks_dict[match_array[i][0]] = new_home_team_rank\n    all_ranks_dict[match_array[i][1]] = new_away_team_rank","588b2f07":"### Combine results in one dataframe \ndf = pd.concat([df,\n                pd.DataFrame(curr_ranks_list,columns=['Rank_HT_Before', 'Rank_AT_Before']),\n                pd.DataFrame(new_ranks_list, columns= ['Rank_HT_After', 'Rank_AT_After'])],\n               axis=1)\n\ndf.drop(columns=['Result_HomeTeam','Result_AwayTeam'],inplace=True)\ndf.head().append(df.tail(10))","a8b73a54":"### Get the latest TrueSkill Ranks.\nlatest = pd.DataFrame(all_ranks_dict).transpose()\nlatest.columns = ['mu','sigma']\nlatest['rank']=rating(latest['mu'],latest['sigma'])\nlatest.sort_values(by='rank', ascending=False)","80e75e40":"### Read in data.","b939a33d":"### 'FTR' - Full Time Result (H=Home Win, D=Draw, A=Away Win)\n#### For TrueSkill Win=0,Draw=0,Loose=1. Implement this accordingly.  ","bbf821e0":"### Leave columns required for TrueSkill ranking implementation   ","d9feab69":"# TrueSkill Ranking on English Premier League Dataset","2219e729":"In this notebook, I applied [TrueSkill](https:\/\/trueskill.org\/) rating system to calculate ranks of English Premiere League teams. The data is sourced from the [Kaggle datasets](https:\/\/www.kaggle.com\/irkaal\/english-premier-league-results#EPL.csv). \nMy objevtive was to learn and implement TrueSkill ranking using real data.\n\nTrueSkill is a rating system which was developed by Microsoft to rank and match players. It is based on ELO ranking system, but gives more flexibility, like multiplayer games ranking.\n\nRanking starts with 0 and goes up to 50 points.The TrueSkill rank is calculated based on the Score = mu - 3* sigma and could be considered as conservative estimation of the players' skills, as system is 99% confident that players' skills are higher than calculated Scores. \n\nStarting scores by default: mu = 25, sigma=8.33. For this exercise I will use score = (mu - 2*sigma) instead, so starting scores will be 8.33, and not 0."}}