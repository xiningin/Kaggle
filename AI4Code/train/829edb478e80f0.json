{"cell_type":{"88feb2f6":"code","18bc19f5":"code","72317ed0":"code","88cb1af1":"code","868f3ee9":"code","7f5f8950":"code","3614fa4e":"code","86fdf93f":"code","58e2db04":"code","e8476e83":"code","89ba707a":"code","d979a739":"code","1c4f373b":"code","f0e4c701":"code","72500046":"code","95446503":"code","37e138a4":"code","9a662eb3":"code","5bcf3f13":"code","81cfa3f6":"code","a81e98da":"code","f356d2b6":"code","e9965b1e":"code","815ce48e":"code","effa950a":"code","3d15b457":"code","b4c16cee":"code","d757a3df":"code","c28b62cd":"code","19cdef13":"markdown","0bcf34a6":"markdown","38ebc9ad":"markdown","5a168c08":"markdown"},"source":{"88feb2f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport itertools\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18bc19f5":"df = pd.read_csv('..\/input\/malawi-news-classification-challenge\/Train.csv',index_col=0)\ndf.head()","72317ed0":"test = pd.read_csv('..\/input\/malawi-news-classification-challenge\/Test.csv',index_col=0)\ntest.head()","88cb1af1":"sub = pd.read_csv('..\/input\/malawi-news-classification-challenge\/SampleSubmission.csv',index_col=0)\nsub.head()","868f3ee9":"df.isnull().sum()","7f5f8950":"df[\"Label\"].value_counts()","3614fa4e":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Label)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='GnBu', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","86fdf93f":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Text)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Pastel1', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","58e2db04":"#Alaa Sedeeq https:\/\/www.kaggle.com\/alaasedeeq\/commonlit-readability-eda\/execution\n#Define a function to plot a bar plot easily\n\ndef bar_plot(df,x,x_title,y,title,colors=None,text=None):\n    fig = px.bar(x=x,\n                 y=y,\n                 text=text,\n                 labels={x: x_title.title()},          # replaces default labels by column name\n                 data_frame=df,\n                 color=colors,\n                 barmode='group',\n                 template=\"simple_white\",\n                 color_discrete_sequence=px.colors.qualitative.Prism)\n    \n    texts = [df[col].values for col in y]\n    for i, t in enumerate(texts):\n        fig.data[i].text = t\n        fig.data[i].textposition = 'inside'\n        \n    fig['layout'].title=title\n\n    for trace in fig.data:\n        trace.name = trace.name.replace('_',' ').title()\n\n    fig.update_yaxes(tickprefix=\"\", showgrid=True)\n\n    fig.show()","e8476e83":"#Code by Alaa Sedeeq https:\/\/www.kaggle.com\/alaasedeeq\/commonlit-readability-eda\/comments#1292516\n\n#Find words spreading (each word frequency)\nfreq_d = pd.Series(' '.join(df['Text']).split()).value_counts()\n#Plot the words distribution\nfig = px.line(freq_d,\n              title='The word frequency visualization')\nfig.update_layout(showlegend=False) ","89ba707a":"import nltk \nimport string\nfrom wordcloud import WordCloud\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nstop = stopwords.words('english')\nfrom nltk.stem import WordNetLemmatizer\nfrom textblob import TextBlob,Word\nfrom collections import Counter","d979a739":"#Code by Alaa Sedeeq https:\/\/www.kaggle.com\/alaasedeeq\/commonlit-readability-eda\/comments#1292516\n#Bigrams\nfrom nltk.util import ngrams    \n\ndef get_n_grans_count(text, n_grams, min_freq):\n    output = {}\n    tokens = nltk.word_tokenize(text)\n\n    #Create the n_gram\n    if n_grams == 2:\n        gs = nltk.bigrams(tokens)\n        \n    elif n_grams == 3:\n        gs = nltk.trigrams(tokens)\n\n    else:\n        return 'Only 2_grams and 3_grams are supported'\n    #compute frequency distribution for all the bigrams in the text\n    fdist = nltk.FreqDist(gs)\n    for k,v in fdist.items():\n        if v > min_freq:\n            index = ' '.join(k)\n            output[index] = v\n    \n    return output","1c4f373b":"two_grams = get_n_grans_count(text, n_grams=2, min_freq=10)\ntwo_grams_df = pd.DataFrame(data=two_grams.items())\ntwo_grams_df = two_grams_df.sort_values(by=1,ascending=False).rename(columns={0:'Two grams',1:'Count'})\ntwo_grams_df","f0e4c701":"bar_plot(two_grams_df.iloc[:20],\n         'Two grams',\n         'Two grams',\n         ['Count'],\n         title='Top 20 frequent bigram')","72500046":"three_grams = get_n_grans_count(text, n_grams=3, min_freq=0)\nthree_grams_df = pd.DataFrame(data=three_grams.items())\nthree_grams_df = three_grams_df.sort_values(by=1,ascending=False).rename(columns={0:'Three grams',1:'Count'})\nthree_grams_df","95446503":"#Code by Alaa Sedeeq https:\/\/www.kaggle.com\/alaasedeeq\/commonlit-readability-eda\/comments#1292516\n\nbar_plot(three_grams_df.iloc[:20],\n         'Three grams',\n         'Three grams',\n         ['Count'],\n         title='Top 20 frequent trigram')","37e138a4":"prepared_as_text = [line for line in df['Label']]\ntext_prepared_results = '\/n'.join(prepared_as_text)\n\ntext= ' '.join(t for t in df['Label'])\nwords_list= text.split()","9a662eb3":"#Code by Alaa Sedeeq https:\/\/www.kaggle.com\/alaasedeeq\/commonlit-readability-eda\/comments#1292516\nwords_length = {}\n\nfor word in set(words_list):\n    words_length[word] = len(word)\n    \nwords_length = dict(sorted(words_length.items(), reverse=True, key=lambda item: item[1]))\n#sort the data and put it in a data frame for the visualization\nword_length_temp = dict(itertools.islice(words_length.items(), 25))\nwords_length_df = pd.DataFrame(words_length.items(),columns=['word','count']).sort_values('count',ascending=False)","5bcf3f13":"df['sentence_len']= df['Text'].str.len()\nprint('Max length     : {} \\nMin length     : {} \\nAverage Length : {}'.\\\n      format(max(df['sentence_len']),min(df['sentence_len']),df['sentence_len'].mean()))","81cfa3f6":"#the longest sentence we have\ndf[df['sentence_len']==max(df['sentence_len'])]['Text'].values[0]","a81e98da":"#the shortest sentence we have\ndf[df['sentence_len']==min(df['sentence_len'])]['Text'].values[0]","f356d2b6":"#Code by Alaa Sedeeq https:\/\/www.kaggle.com\/alaasedeeq\/commonlit-readability-eda\/comments#1292516\n# lets define a function to plot a histogram plot easily\n\ndef hist_plot(df,x,title):\n    fig = px.histogram(x=df[x],\n                       color_discrete_sequence=colors,\n                       opacity=0.8)\n\n    fig['layout'].title=title\n    fig.update_yaxes(tickprefix=\"\", showgrid=True)\n    fig.show()","e9965b1e":"colors = px.colors.qualitative.Prism\n\nhist_plot(df,\n          'sentence_len',\n          title='Sentences lenght distribution with spaces')","815ce48e":"#Code by Alaa Sedeeq https:\/\/www.kaggle.com\/alaasedeeq\/commonlit-readability-eda\/comments#1292516\n\n#Find words spreading (each word frequency)\nfreq_d = pd.Series(' '.join(df['Label']).split()).value_counts()\n#Plot the words distribution\nfig = px.line(freq_d,\n              title='The word frequency visualization')\nfig.update_layout(showlegend=False)","effa950a":"prepared_as_text = [line for line in df['Label']]\ntext_prepared_results = '\/n'.join(prepared_as_text)\n\ntext= ' '.join(t for t in df['Label'])\nwords_list= text.split()","3d15b457":"word_freq= {}\n\nfor word in set(words_list):\n    word_freq[word]= words_list.count(word)\n    \n#sorting the dictionary \nword_freq = dict(sorted(word_freq.items(), reverse=True, key=lambda item: item[1]))","b4c16cee":"#sort the data and put it in a data frame for the visualization\nword_freq_temp = dict(itertools.islice(word_freq.items(), 25))\nword_freq_df = pd.DataFrame(word_freq_temp.items(),columns=['word','count']).sort_values('count',ascending=False)","d757a3df":"#Code by Alaa Sedeeq https:\/\/www.kaggle.com\/alaasedeeq\/commonlit-readability-eda\/comments#1292516\n\nbar_plot(word_freq_df.reset_index(),\n         'word',\n         'Words',\n         ['count'],\n         title='Top 20 frequent words')","c28b62cd":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Thank you Again Alaa Sedeeq @alaasedeeq for the script.' )","19cdef13":"#Bigrams","0bcf34a6":"#Sentence level analysis","38ebc9ad":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSN3iSRq6PKtqeEW5JuXMwJ9xaRAyIebwzRCg&usqp=CAU)apkmodgame.org","5a168c08":"#Trigram"}}