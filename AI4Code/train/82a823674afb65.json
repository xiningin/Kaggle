{"cell_type":{"3ec55b22":"code","31b48b96":"code","23729130":"code","e8fa94b0":"code","eeb1891c":"code","d3739102":"code","6b9a16ca":"code","5e2ed37b":"code","00b93c25":"code","c8de20e9":"code","d8161dc1":"code","77b47246":"code","ef78bff9":"code","847c160a":"code","cedf7feb":"code","06c120b0":"code","f250dec6":"code","76a368e7":"code","cba8278e":"code","da6afb1a":"code","871db245":"code","ffd62dbb":"code","7abb6cac":"code","aa1d0d3f":"code","7397fe31":"code","3b080882":"code","3c67ae9c":"code","c2436844":"code","492e6f82":"code","daf425b7":"code","b1448d2d":"code","5c07ebac":"code","7d4932ec":"code","baf954dd":"code","c1de0cf4":"code","d0a8358b":"code","2d201557":"code","67d9270d":"code","9844879e":"code","1ce90cdd":"code","a8385cb4":"code","b98f0ec4":"code","3856bbb5":"code","75e0a953":"code","b9c5a141":"code","bd4e242d":"code","55156211":"code","199e8e96":"code","6ef415bc":"code","feb754ac":"code","eaee8532":"code","59213b0e":"code","d5c76d18":"code","ef4a3389":"code","e9f4cfb2":"code","49194058":"code","12d374d1":"code","73d2f7f0":"code","d17061b0":"code","2bd894fe":"code","9a153487":"code","c134fd3d":"code","74917c0a":"code","be56f343":"code","84e350cd":"markdown","8ca8bd95":"markdown","31e8d231":"markdown","9bdb2204":"markdown","0b702125":"markdown","7b95abd1":"markdown","567621c8":"markdown","04c059b0":"markdown"},"source":{"3ec55b22":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31b48b96":"data=pd.read_csv('\/kaggle\/input\/machine-learning-24-hrs-hackathon\/train_SJC.csv')","23729130":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n","e8fa94b0":"data.head()","eeb1891c":"df1=data.rename(columns={\"Unnamed: 0\":\"ClaimNumber\",\"Unnamed: 1\":\"DateTimeOfAccident\",\"Unnamed: 3\":\"Age\",\"Unnamed: 4\":\"Gender\",\"Unnamed: 5\":\"MaritalStatus\",\"Unnamed: 6\":\"DependentChildren\",\"Unnamed: 8\":\"WeeklyWages\",\"Unnamed: 9\":\"PartTimeFullTime\",\"Unnamed: 10\":\"HoursWorkedPerWeek\",\"Unnamed: 12\":\"ClaimDescription\",\"Unnamed: 13\":\"InitialIncurredCalimsCost\",\"Unnamed: 14\":'UltimateIncurredClaimCost'},inplace=False)","d3739102":"df1.head()","6b9a16ca":"df=df1.drop(df1.index[0])\ndf.head()","5e2ed37b":"df.shape","00b93c25":"df.columns","c8de20e9":"df.info()","d8161dc1":"df.describe()","77b47246":"df.isnull().sum()","ef78bff9":"df['MaritalStatus'].value_counts()\n","847c160a":"##writing a function to replace all the missing values\ndef fill_na_cols(data,col):\n    if data[str(col)].dtypes=='float64':\n        data[str(col)].fillna(data[str(col)].mean(),inplace=True)\n    elif data[str(col)].dtypes=='O':\n        data[str(col)].fillna(data[str(col)].value_counts()[0],inplace=True)\n    \n\nfill_na_cols(df,'HoursWorkedPerWeek')","cedf7feb":"##writing a function to replace all the missing values\ndef fill_na_cols(data,col):\n    if data[str(col)].dtypes=='float64':\n        data[str(col)].fillna(data[str(col)].mean(),inplace=True)\n    elif data[str(col)].dtypes=='O':\n        data[str(col)].fillna(data[str(col)].value_counts()[0],inplace=True)\n    \n\nfill_na_cols(df,'DaysWorkedPerWeek')","06c120b0":"##writing a function to replace all the missing values\ndef fill_na_cols(data,col):\n    if data[str(col)].dtypes=='float64':\n        data[str(col)].fillna(data[str(col)].mean(),inplace=True)\n    elif data[str(col)].dtypes=='O':\n        data[str(col)].fillna(data[str(col)].value_counts()[0],inplace=True)\n    \n\nfill_na_cols(df,'WeeklyWages')","f250dec6":"df.isnull().sum()","76a368e7":"df","cba8278e":"df.shape","da6afb1a":"df=df.dropna()","871db245":"df['MaritalStatus'].mode()","ffd62dbb":"df=df.dropna()","7abb6cac":"df.shape","aa1d0d3f":"df.isnull().sum()","7397fe31":"df['Gender'].value_counts()","3b080882":"LE = LabelEncoder()\ndf['Gender'] = LE.fit_transform(df['Gender'])# 0 for Female, 1 for Male\ndf['MaritalStatus'] = LE.fit_transform(df['MaritalStatus'])# 0 for Married  1 for Single ,2 for Unknown.\ndf['PartTimeFullTime']=LE.fit_transform(df['PartTimeFullTime'])# 0 for FullTime and 1 for PartTime  ","3c67ae9c":"df.head()","c2436844":"df['UltimateIncurredClaimCost']=df['UltimateIncurredClaimCost'].astype(np.float64)\nlog_UltimateIncurredClaimCost=np.log(df['UltimateIncurredClaimCost'])\n\n","492e6f82":"sns.set_theme(style=\"whitegrid\")\nplt.figure(figsize = (10, 10))\nsns.boxplot(x = 'Gender', y = log_UltimateIncurredClaimCost,  data =df)","daf425b7":"df['Gender'].value_counts()\nindex_names = df[ df['Gender'] == 'U' ].index\ndf.drop(index_names, inplace = True)\nplt.figure(figsize=(12,10))\nsns.barplot(x='MaritalStatus',y='UltimateIncurredClaimCost',data=df)\nplt.show()","b1448d2d":"plt.figure(figsize=(18,12))\nsns.barplot(x='Age',y='UltimateIncurredClaimCost',data=df)\nplt.show()","5c07ebac":"plt.figure(figsize=(18,12))\nsns.barplot(x='PartTimeFullTime',y='UltimateIncurredClaimCost',data=df)\nplt.show()","7d4932ec":"plt.figure(figsize=(18,12))\nsns.barplot(x='DaysWorkedPerWeek',y='UltimateIncurredClaimCost',data=df)\nplt.show()","baf954dd":"df['HoursWorkedPerWeek']=df['HoursWorkedPerWeek'].astype(np.float64)\ndf['HoursWorkedPerWeek']=df['HoursWorkedPerWeek'].astype(np.int64)\nplt.figure(figsize=(18,12))\nsns.scatterplot(x='HoursWorkedPerWeek',y='UltimateIncurredClaimCost',data=df)\nplt.show()","c1de0cf4":"plt.figure(figsize=(18,12))\nsns.heatmap(df.corr(),annot=True,cmap='Blues')\nplt.show()","d0a8358b":"feature_cols=['Age', 'Gender', 'MaritalStatus','WeeklyWages', 'PartTimeFullTime','InitialIncurredCalimsCost']\nX=df[feature_cols]\ny=df['UltimateIncurredClaimCost']\nX.head()","2d201557":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state =30)\n\nprint(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","67d9270d":"\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.fit_transform(x_test)\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nLR = LinearRegression()","9844879e":"LR.fit(x_train, y_train)","1ce90cdd":"y_pred = LR.predict(x_test)\n\n# Calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2 score :\", r2)","a8385cb4":"\ny_pred = LR.predict(x_test)\n\n# Calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2 score :\", r2)","b98f0ec4":"\n    from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 10, random_state = 0)\nregressor.fit(x_train, y_train)\n\n# Predicting a new result\ny_pred = regressor.predict(x_test)\nregressor.score(x_train,y_train)\n","3856bbb5":"best_model=regressor.fit(x_train, y_train)\nbest_model.feature_importances_","75e0a953":"from sklearn.tree import DecisionTreeRegressor\n\nmodel = DecisionTreeRegressor()\nmodel.fit(x_train, y_train)\ny_pred = model.predict(x_test)\nr2 = r2_score(y_test, y_pred)\nprint(\"r2 score :\", r2)","b9c5a141":"df_test=pd.read_csv('\/kaggle\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv')\ndf_test.head()","bd4e242d":"df_test.shape","55156211":"df_test.isnull().sum()","199e8e96":"df_test=df_test.dropna()","6ef415bc":"df_test['Gender'].value_counts()","feb754ac":"df_test['Gender'].value_counts()\nindex_names = df_test[ df_test['Gender'] == 'U' ].index\ndf_test.drop(index_names, inplace = True)","eaee8532":"df_test['MaritalStatus'].value_counts()","59213b0e":"df_test.columns","d5c76d18":"import datetime as dt\ndf_test['DateTimeOfAccident']=pd.to_datetime(df_test['DateTimeOfAccident'],format=\"%Y-%m-%dT%H:%M:%S\")\ndf_test[\"yearofAccident\"] =df_test[\"DateTimeOfAccident\"].dt.year\ndf_test[\"dayofweekAccident\"] = df_test[\"DateTimeOfAccident\"].dt.weekday\ndf_test['monthOfAccident'] =df_test['DateTimeOfAccident'].dt.month","ef4a3389":"df_test['DateReported']=pd.to_datetime(df_test['DateReported'],format=\"%Y-%m-%dT%H:%M:%S\")\ndf_test[\"yearofReported\"] =df_test[\"DateReported\"].dt.year\ndf_test[\"dayofweekReported\"] = df_test[\"DateReported\"].dt.weekday\ndf_test['monthOfReported'] =df_test['DateReported'].dt.month\n","e9f4cfb2":"\ndf_test['Difference_month_accident_and_reported']=(df_test['yearofReported']-df_test['yearofAccident'])*12+(df_test['monthOfReported']-df_test['monthOfAccident'])","49194058":"df_test.columns","12d374d1":"df_test['WeeklyWages']=df_test['WeeklyWages'].astype(np.float64)\ndf_test['WeeklyWages']=df_test['WeeklyWages'].astype(np.int64)","73d2f7f0":"# importing label encoder\nfrom sklearn.preprocessing import LabelEncoder\n\n# creating a label encoder\nLE = LabelEncoder()\n\n# label encoding for Gender\n# 0 for females, 1 for males\ndf_test['Gender'] = LE.fit_transform(df_test['Gender'])\n\n# label encoding for MaritalStatus\n# 0 for Married  1 for Single ,2 for unknown.\ndf_test['MaritalStatus'] = LE.fit_transform(df_test['MaritalStatus'])\n\n# lebel encoding for PartTimeFullTime\n# 0 for FullTime and 1 for partTime                                      \ndf_test['PartTimeFullTime']=LE.fit_transform(df_test['PartTimeFullTime'])  ","d17061b0":"x1=df_test['Age']\nx2=df_test['Gender']\nx3=df_test['MaritalStatus']\nx4=df_test['WeeklyWages']\nx5=df_test['PartTimeFullTime']\nx6=df_test['InitialIncurredCalimsCost']\n","2bd894fe":"UltimateIncurredClaimCost=0.15*x1+0.12*x2+0.04*x3+0.33*x4+0.008*x5+0.32*x6","9a153487":"Prediction=UltimateIncurredClaimCost","c134fd3d":"Prediction","74917c0a":"csv = pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv\")\ncsv[\"UltimateIncurredClaimCost\"]=Prediction","be56f343":"csv.to_csv(\"Sample Submission.csv\", index = False)","84e350cd":"**DATA PREPROCESSING**","8ca8bd95":"**CHECKING FOR MISSING VALUES**","31e8d231":"**EXPLORATORY DATA ANALYSIS\n**","9bdb2204":"While comparing with married and single, Married person has the highest incurred claim cost(0-Married,1-Single,2-Unknown)","0b702125":"From the chart it is clear that the part time jobers have more charges(0-Fulltime,1-Parttime)","7b95abd1":"Almost for every person below age 30 the claim is less than 10000","567621c8":"In this plot we can see that Female has the highest amount than male(0-Female,1-Male)","04c059b0":"People worked 6 days\/week can claim more insurance"}}