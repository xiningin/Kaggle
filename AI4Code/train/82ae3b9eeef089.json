{"cell_type":{"ddc0a3f5":"code","c81fa675":"code","d9a3afcb":"code","701de2da":"code","a6e8109e":"code","67ae0eb3":"code","47179adc":"code","8e69f008":"code","a2bff849":"code","1d8ed1d7":"code","5f8fb219":"code","c800b860":"code","7eb2c659":"code","e0d066a5":"markdown"},"source":{"ddc0a3f5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c81fa675":"\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n# prepare the bg\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D,BatchNormalization\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\n\nsns.set(style='white', context='notebook', palette='deep')\n\n\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\n\n\n\nOX_train=train.drop('label',axis=1)\nOy_train=train.label\n\nX_train, X_val, y_train, y_val = train_test_split(OX_train, Oy_train, test_size=0.3, random_state=0)\n","d9a3afcb":"print(X_train.shape)\nprint(X_val.shape)\nprint(y_train.shape)\nprint(y_val.shape)","701de2da":"#normalization\nX_train = X_train \/ 255.0\nX_val = X_val \/ 255.0\ntest = test \/ 255.0\n#reshape\nX_train = X_train.values.reshape(-1,28,28,1)\nX_val = X_val.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\n\n\n# Some examples\ng = plt.imshow(X_train[8][:,:,0])","a6e8109e":"#categorical\ny_train = to_categorical(y_train, num_classes = 10)\ny_val = to_categorical(y_val,num_classes = 10)","67ae0eb3":"#padding\nimport numpy as np\n \n# Pad images with 0s\n# X_train = np.pad(X_train, ((0,0),(2,2),(2,2),(0,0)), 'constant')\n# X_test = np.pad(X_test, ((0,0),(2,2),(2,2),(0,0)), 'constant')\n    \n# print(\"Updated Image Shape: {}\".format(X_train[0].shape))","47179adc":"#augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","8e69f008":"#modeling\nfrom keras.layers import BatchNormalization\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization(momentum=.15))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization(momentum=0.15))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization(momentum=.15))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(10, activation = \"softmax\"))","a2bff849":"from keras.optimizers import Adam\noptimizer=Adam(lr=0.001,beta_1=0.9,beta_2=0.999)","1d8ed1d7":"#model complile\nmodel.compile(optimizer=optimizer,loss=['categorical_crossentropy'],metrics=['accuracy'])","5f8fb219":"# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\nepochs=5 #change this to 30 if you need to get better score\nbatch_size=64","c800b860":"#fit the model\n# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data =(X_val,y_val) ,\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","7eb2c659":"y_pre_test1=model.predict(test)\ny_pre_test=np.argmax(y_pre_test1,axis=1)\ncsv_to_submit = pd.DataFrame(y_pre_test,columns=['Label'])\n#csv_to_submit.to_csv('result.csv',index = True)","e0d066a5":"###\u8fdb\u884c\u5f52\u4e00\u5316"}}