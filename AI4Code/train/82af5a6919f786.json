{"cell_type":{"19c68e7f":"code","55f6a78b":"code","a769d1c1":"code","560c5052":"code","0e6bdb03":"code","9c15f869":"code","f75e772d":"code","d7406262":"code","66e07633":"code","719b0811":"code","5ec545c2":"code","c59364be":"code","f6e8f667":"code","59d898d0":"code","b7497585":"code","08ffd7dd":"code","166a617e":"code","7d5e4fa8":"markdown","f9dbb178":"markdown","1a23ae3d":"markdown","7f1642e3":"markdown","5b3543e4":"markdown","645120bc":"markdown","9cd91ecf":"markdown","b86834d9":"markdown"},"source":{"19c68e7f":"!pip install apyori","55f6a78b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\nfrom pandas_profiling import ProfileReport\n\nimport time\nfrom apyori import apriori as apriori1\n\nfrom mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import apriori as apriori2\nfrom mlxtend.frequent_patterns import association_rules\nfrom mlxtend.frequent_patterns import fpgrowth\n\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\nfrom PIL import Image","a769d1c1":"data = pd.read_csv('\/kaggle\/input\/basket-optimisation\/Market_Basket_Optimisation.csv')","560c5052":"data_profile_report = ProfileReport(data, 'Data Set Profiling Report', html={'style':{'full_width':True}})","0e6bdb03":"data_profile_report.to_notebook_iframe()","9c15f869":"data.fillna(0, inplace=True)","f75e772d":"def get_apriori_statistics(rules):\n    df = pd.DataFrame(list(rules))\n    first_items = []\n    second_items = []\n    support = []\n    confidence = []\n    lift = []\n    for i in range(df.shape[0]):\n        for idx, order_stat in enumerate(df['ordered_statistics'][i]):\n            if idx == 0:\n                sup = df['support'][i]\n                continue\n            first_items.append(str(list(order_stat[0])).lstrip(\"['\").rstrip(\"']\"))\n            second_items.append(str(list(order_stat[1])).lstrip(\"['\").rstrip(\"']\"))\n            support.append(sup)\n            confidence.append(order_stat[2])\n            lift.append(order_stat[3])\n    fitems = pd.DataFrame(first_items, columns=['item1'])\n    sitems = pd.DataFrame(second_items, columns=['item2'])\n    dsupport = pd.DataFrame(support, columns=['support'])\n    dconfidence = pd.DataFrame(confidence, columns=['confidance'])\n    dlift = pd.DataFrame(lift, columns=['lift'])\n    return pd.concat([fitems, sitems, dsupport, dconfidence, dlift], axis=1)","d7406262":"def get_transactions(df):\n    transactions = []\n    for i in range(0, len(df)):\n        transactions.append([df.iloc[i,j] for j in range(0, df.shape[1]) if df.iloc[i,j] != 0])\n    return transactions","66e07633":"now = time.time()\nrules = apriori1(get_transactions(data), min_support=0.003, min_confidance=0.2, min_left=3)\nprint(time.time() - now)","719b0811":"get_apriori_statistics(rules)","5ec545c2":"te = TransactionEncoder()\nte_ary = te.fit_transform(get_transactions(data))\ndf = pd.DataFrame(te_ary, columns=te.columns_)\nfrequent_itemsets = apriori2(df, min_support=0.003, use_colnames=True)","c59364be":"association_rules(frequent_itemsets, metric=\"confidence\", min_threshold=0.2)","f6e8f667":"association_rules(frequent_itemsets, metric=\"lift\", min_threshold=3)","59d898d0":"now = time.time()\nfrequent_itemsets = fpgrowth(df, min_support=0.003, use_colnames=True)\nprint(time.time() - now)","b7497585":"association_rules(frequent_itemsets, metric=\"confidence\", min_threshold=0.2)","08ffd7dd":"def get_word_cloud(df, top=10):\n    sentences = list(df.values)\n    words = []\n    for sentence in sentences:\n        for word in sentence:\n            if word != 0:\n                words.append(word)\n    text = ' '.join(words)\n    wc = WordCloud(max_words=top, width=4000, height=2400)\n    wordcloud = wc.generate(text)\n    plt.imshow(wordcloud)\n    return wordcloud","166a617e":"get_word_cloud(data, top=10)","7d5e4fa8":"### Package apyori","f9dbb178":"## Motivation\n- Assocition rules\n    - Support: how popular an itemset is, statistics the number of each item appears in the all transactions, i.e., frequency of item. \n    $$support(X)=\\frac{occurance\\  of\\ item}{total\\ nb\\ of\\ transaction}$$\n    - Confidence: how likely item Y is purchased when item X is purchased, expressed as {X -> Y}\n    $$confidence(X,Y)=\\frac{support(X \\cup Y)}{support(X)}=\\frac{P(XY)}{P(X)}=P(Y|X)$$\n    - Lift: This says how likely item $Y$ is purchased when item $X$ is purchased, while controlling for how popular item $Y$ is. i.e., the lift of {apple -> beer} is $1$,which implies no association between items. A lift value greater than $1$ means that item $Y$ is likely to be bought if item $X$ is bought, while a value less than $1$ means that item $Y$ is unlikely to be bought if item $X$ is bought.\n    $$left(X,Y)=\\frac{support(X \\cup Y)}{support(X) \\times support(Y)}=\\frac{confidence(X,Y)}{support(Y)}=\\frac{P(Y|X)}{P(Y)}$$\n- Word cloud","1a23ae3d":"### Package mlxtend","7f1642e3":"## Reference\n[1. association-rules-apriori-algorithm-tutorial](https:\/\/www.kdnuggets.com\/2016\/04\/association-rules-apriori-algorithm-tutorial.html)\n\n[2. apyori](https:\/\/github.com\/ymoch\/apyori)\n\n[3. mlxtend](http:\/\/rasbt.github.io\/mlxtend\/user_guide\/frequent_patterns\/association_rules\/)\n\n[4. word_cloud](http:\/\/amueller.github.io\/word_cloud\/)\n\n[5. https:\/\/www.kaggle.com\/zhangwx95\/marketbasket-analysis](https:\/\/www.kaggle.com\/zhangwx95\/marketbasket-analysis)\n\n[6. https:\/\/www.kaggle.com\/kks96500\/apriori-model](https:\/\/www.kaggle.com\/kks96500\/apriori-model)\n\n[7. https:\/\/www.kaggle.com\/yugagrawal95\/market-basket-analysis-apriori-in-python](https:\/\/www.kaggle.com\/yugagrawal95\/market-basket-analysis-apriori-in-python)","5b3543e4":"## Association Rules","645120bc":"## Exploratory Data Analysis (EDA)","9cd91ecf":"## Word Cloud","b86834d9":"## Model\n- Apriori\n- FPGrowth\n- Word Frequent"}}