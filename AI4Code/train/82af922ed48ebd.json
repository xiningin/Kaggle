{"cell_type":{"b5305f64":"code","c0c6899e":"code","f025ae86":"code","f7317516":"code","a401ab24":"code","9192bf1e":"code","bf93fd4d":"markdown","b00d487d":"markdown","58529c67":"markdown"},"source":{"b5305f64":"# impor pustaka yang diperlukan\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import MobileNetV2\nfrom tensorflow.keras.layers import AveragePooling2D\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.models import load_model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import img_to_array\nfrom tensorflow.keras.preprocessing.image import load_img\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.preprocessing import MultiLabelBinarizer\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport cv2\nimport time","c0c6899e":"# download imutils\n!pip install imutils\nfrom imutils import paths\nfrom imutils.video import VideoStream","f025ae86":"# buat argparse class\n# karena pada kaggle tidak dapat menginstall argparse\nclass ap:\n    # untuk training model \n    dataset_1 = '..\/input\/pascal-voc-cropping'\n    dataset_2 = \"..\/input\/face-mask-detection-data\"\n    plot = 'plot.png'\n    model = 'hardhat_detector.model'\n    \n    # untuk implementasi model\n    image = []\n    face = 'face_detector'\n    confidence = 0.5","f7317516":"# load model face detektor\nprint(\"[INFO] loading face detector model...\")\nprototxtPath = \"..\/input\/face-detection-ssd-model\/CAFFE_DNN\/deploy.prototxt.txt\"\nweightsPath = \"..\/input\/face-detection-ssd-model\/CAFFE_DNN\/res10_300x300_ssd_iter_140000.caffemodel\"\nfaceNet = cv2.dnn.readNet(prototxtPath, weightsPath)\nfaceNet.setPreferableBackend(cv2.dnn.DNN_BACKEND_OPENCV)\nfaceNet.setPreferableTarget(cv2.dnn.DNN_TARGET_OPENCL_FP16)\n\n# load model face-mask detector\nprint(\"[INFO] loading face mask detector model...\")\nmaskNet = load_model(\"..\/input\/face-mask-training\/hardhat_detector.model\")\n\nhardHatNet = load_model(\"..\/input\/hardhat-training\/hardhat_detector.model\")","a401ab24":"# buat fungsi untuk mendeteksi mask\n# frame : video\n# faceNet : model pendeteksi face\n# maskNet : model pendeteksi mask\ndef detect_and_predict_hardhat_mask(frame, faceNet, hardHatNet, maskNet):\n    # buat blob\n    (h, w) = frame.shape[:2]\n    blob = cv2.dnn.blobFromImage(frame, 1.0, (300, 300),\n                                (104.0, 177.0, 123.0))\n    # lewatkan blob pada face detection\n    faceNet.setInput(blob)\n    detections = faceNet.forward()\n    \n    # initialize list dari face, lokasi, dan prediksi\n    faces = []\n    locs = []\n    preds_hardhat = []\n    preds_mask = []\n    \n    # loop pada detections\n    for i in range(0, detections.shape[2]):\n        # extract confidence (probabilitas) pada detections\n        confidence = detections[0, 0, i, 2]\n        \n        # filter weak detections yang kurang dari\n        # confidence minimum\n        if confidence > ap.confidence:\n            # buat bounding box pada face yang terdeteksi\n            box = detections[0, 0, i, 3:7]*np.array([w, h, w, h])\n            (startX, startY, endX, endY) = box.astype(\"int\")\n            \n            startX = startX - 15\n            startY = startY - 20\n            endX = endX + 15\n            endY = endY + 20\n            \n            # pastikan bounding box berada dalam frame\n            (startX, startY) = (max(0, startX), max(0, startY))\n            (endX, endY) = (min(w - 1, endX), min(h - 1, endY))\n            \n            # extract face ROI (Region of Interest)\n            # convert dari BGR to RGB\n            # ordering, resize (224x224) dan preprocess\n            face = frame[startY:endY, startX:endX]\n            face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)\n            face = cv2.resize(face, (224, 224))\n            face = img_to_array(face)\n            face = preprocess_input(face)\n            \n            # append face dan bounding box pada list yg telah dibuat\n            faces.append(face)\n            locs.append((startX, startY, endX, endY))\n    \n    # run faces yang telah didapat ke face mask detector\n    # buat prediksi saat ada face terdeteksi\n    if len(faces)>0:\n        # buat batch predictions untuk mendeteksi semua face secara bersamaan\n        faces = np.array(faces, dtype=\"float32\")\n        preds_hardhat = hardHatNet.predict(faces, batch_size=32)\n        preds_mask = maskNet.predict(faces, batch_size=32)\n        \n    # return 2-tuple, face locations dan nilai prediksi\n    return (locs, preds_hardhat, preds_mask)","9192bf1e":"\nprint(\"[INFO] loading video stream...\")\nvideo_path = \"..\/input\/hardhat-v2\/Wearing a Mask with the Hard Hat Librarian.mp4\"\nvs = cv2.VideoCapture(video_path)\n\n# ambil variable height, width, dan fps dari video\nheight = int(vs.get(cv2.CAP_PROP_FRAME_HEIGHT))\nwidth = int(vs.get(cv2.CAP_PROP_FRAME_WIDTH))\nfps = int(vs.get(cv2.CAP_PROP_FPS))\n\n# simpan video output\nfourcc = cv2.VideoWriter_fourcc(*\"MJPG\")\noutput = cv2.VideoWriter(\"face-mask-detections.avi\", \n                               fourcc, fps, (width, height), True)\n\n# inisiasi elapsed time dan fps\nt1 = cv2.getTickCount()\nf = 0\n\n# loop pada frame video\nwhile True:\n    \n    (grabbed, frame) = vs.read()\n\n    if not grabbed:\n        print(\"[INFO] video process has been done...\")\n        break\n    \n    # deteksi face pada video\n    # dan tentukan apakah memakai masker atau tidak\n    (locs, preds_hardhat, preds_mask) = detect_and_predict_hardhat_mask(frame, faceNet, hardHatNet, maskNet)\n    \n    # loop pada lokasi face yang terdeteksi\n    for (box, pred_hardhat, pred_mask) in zip(locs, preds_hardhat, preds_mask):\n        # unpack bounding box dan nilai prediksi\n        (startX, startY, endX, endY) = box\n        (hardhat, withoutHardhat) = pred_hardhat\n        (mask, withoutMask) = pred_mask\n        \n        # tentukan label yang digunakan -\n        # dan warna untuk label tersebut (hijau, dan merah)\n        if hardhat > withoutHardhat and mask > withoutMask:\n            label = \"Hardhat + Mask\"\n            color = (0, 255, 0) # green\n        elif hardhat > withoutHardhat and mask < withoutMask:\n            label = \"Hardhat\"\n            color = (255, 0, 0) # blue\n        elif hardhat < withoutHardhat and mask > withoutMask:\n            label = \"Mask\"\n            color = (0, 255, 255) # yellow\n        elif hardhat < withoutHardhat and mask < withoutMask:\n            label = \"No-Hardhat-Mask\"\n            color = (0, 0, 255) # red\n        \n#         label = \"Helmet\" if harhat > withoutHardhat else \"No-Helmet\"\n#         color = (0, 255, 0) if label == \"Helmet\" else (0,0,255)\n\n#         # sertakan nilai probabilitas pada label\n#         label = \"{}: {:.2f}%\".format(label, max(mask, withoutMask)*100)\n\n        # tampilkan label dan bounding box pada frame\n        cv2.putText(frame, label, (startX, startY-10),\n                   cv2.FONT_HERSHEY_SIMPLEX, 0.45, color, 2)\n        cv2.rectangle(frame, (startX, startY), (endX, endY), color, 2)\n    \n    # increment fps\n    f = f + 1\n    \n    # write video yang telah di proses ke output\n    output.write(frame)\n    \nt2 = cv2.getTickCount()\ntime = (t2 - t1) \/ cv2.getTickFrequency()\nfps = f \/ time\n\nprint(\"[INFO] elapsed time : {} second\".format(time))\nprint(\"[INFO] fps :\", fps)","bf93fd4d":"# load image\nimg_path = \"..\/input\/test-hardhatmask-detector\/no-mask-hardhat.jpg\"\n# img_path = \"..\/input\/hardhat-v2\/Hard Hat\/Images\/005325_jpg.rf.45a2fcd397555b21cb09401d1a044d25.jpg\"\n\nimage = cv2.imread(img_path)\n\n# plt.figure()\n# plt.imshow(image)\n# plt.show()\n\norig = image.copy()\n(h, w) = image.shape[:2]\n\n# buat blob dari image\nblob = cv2.dnn.blobFromImage(image, 1.0, (300, 300), \n                            (104.0, 177.0, 123.0))\n\n# lewatkan blob pada face detection\nprint(\"[INFO] computing face detections...\")\nfaceNet.setInput(blob)\ndetections = faceNet.forward()\n\n# loop pada detections\nfor i in range(0, detections.shape[2]):\n    # extract confidence (probabilitas)\n    confidence = detections[0, 0, i, 2]\n    \n    # filter weak detections yang kurang dari\n    # confidence minimum\n    if confidence > ap.confidence:\n        # buat bounding box pada face yang terdeteksi\n        box = detections[0, 0, i, 3:7]*np.array([w, h, w, h])\n        (startX, startY, endX, endY) = box.astype(\"int\")\n        \n        startX = startX - 15\n        startY = startY - 20\n        endX = endX + 15\n        endY = endY + 20\n        \n            \n        # pastikan bounding box berada dalam frame\n        (startX, startY) = (max(0, startX), max(0, startY))\n        (endX, endY) = (min(w - 1, endX), min(h - 1, endY))\n        \n        # extract face ROI (Region of Interest)\n        # convert dari BGR to RGB\n        # ordering, resize (224x224) dan preprocess\n        face = image[startY:endY, startX:endX]\n        face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)\n        face = cv2.resize(face, (224, 224))\n        face = img_to_array(face)\n        face = preprocess_input(face)\n        face1 = np.expand_dims(face, axis=0)\n        \n        (mask, withoutMask) = maskNet.predict(face1)[0]\n        (hardhat, withoutHardhat) = hardHatNet.predict(face1)[0]\n        \n        \n        # tentukan label yang digunakan -\n        # dan warna untuk label tersebut (hijau, dan merah)\n        if hardhat > withoutHardhat and mask > withoutMask:\n            label = \"Hardhat + Mask\"\n            color = (0, 255, 0) # green\n        elif hardhat > withoutHardhat and mask < withoutMask:\n            label = \"Hardhat\"\n            color = (255, 0, 0) # blue\n        elif hardhat < withoutHardhat and mask > withoutMask:\n            label = \"Mask\"\n            color = (0, 255, 255) # yellow\n        elif hardhat < withoutHardhat and mask < withoutMask:\n            label = \"No-Hardhat-Mask\"\n            color = (0, 0, 255) # red\n            \n        # tampilkan label dan bounding box pada frame\n        cv2.putText(image, label, (startX, startY-10),\n                   cv2.FONT_HERSHEY_SIMPLEX, 0.45, color, 2)\n        cv2.rectangle(image, (startX, startY), (endX, endY), color, 2)\n\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)        \n\nplt.figure()\nplt.imshow(image)\nplt.show()","b00d487d":"# for video","58529c67":"# for images"}}