{"cell_type":{"f5967a31":"code","dfd8a390":"code","c7b9d0ff":"code","68686568":"code","2c690f52":"code","fd10e782":"code","e299d4ad":"code","9e647e4a":"code","eec2d2bf":"code","31e75ff7":"code","ca8b8d4c":"code","aebe30d4":"code","af616448":"code","c4f970b7":"code","676e0274":"code","b34a2aa9":"code","8c58f340":"code","a4ab0c3a":"code","e2069454":"code","c2f18d3a":"code","05d7cd8b":"code","a8bc2206":"code","9b732231":"code","adbcf779":"code","df2f813c":"code","84e348a2":"code","d8a91582":"code","75e621c5":"code","eca129a9":"code","b5439f17":"code","488e7117":"code","176594c2":"code","36ba3d2c":"code","f4508bc5":"code","c23ba5e5":"code","5b24ca4c":"code","d3610216":"markdown","2cfd1ae6":"markdown","39a93148":"markdown","65fcd91c":"markdown","73b5466b":"markdown","bd1bd009":"markdown","c862421a":"markdown","3e2587a1":"markdown","eb086b20":"markdown","72febf94":"markdown","52cf16bd":"markdown","b6e9c396":"markdown","0f6b89ef":"markdown","015e30da":"markdown","68d75ac7":"markdown","002e1f42":"markdown"},"source":{"f5967a31":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport warnings\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.dates as mdates\nimport matplotlib.pyplot as plt\nimport time\nimport matplotlib.ticker as ticker\nfrom matplotlib.ticker import MultipleLocator\nfrom datetime import timedelta\nfrom datetime import datetime\n\nwarnings.filterwarnings('ignore')\nplt.rcParams.update({'font.size': 15})\npd.options.display.max_rows = 100\n# pd.options.display.float_format = '{:.2f}'.format\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","dfd8a390":"# Dataset: https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset\/data\n\ninput_data_path = \"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\"\ndf_raw = pd.read_csv(input_data_path)\nprint(f'Last observation: {max(df_raw.ObservationDate)}')\nprint(f'Number of rows: {len(df_raw)}')\nprint('Columns: ' + ', '.join([f'{k} ({v})' for k, v in df_raw.dtypes.to_dict().items()]))\ndf_raw.head()","c7b9d0ff":"df_timna = pd.read_csv(\"..\/input\/timna-april-15\/corona_lab_tests_ver002_april_15.csv\")\ndf_timna['corona_result'] = df_timna['corona_result'].map({\n    '\u05e9\u05dc\u05d9\u05dc\u05d9': 'Negative',\n    '\u05d7\u05d9\u05d5\u05d1\u05d9': 'Positive',\n    '\u05dc\u05d0 \u05d1\u05d5\u05e6\u05e2': 'Not done',\n    '\u05d1\u05e2\u05d1\u05d5\u05d3\u05d4': 'In progress',\n    '\u05dc\u05d0 \u05d5\u05d3\u05d0\u05d9': 'Unknown'\n})\n\ndf_timna = pd.crosstab(df_timna['result_date'], df_timna['corona_result']).reset_index(inplace=False)\ndf_timna['result_date'] = pd.to_datetime(df_timna['result_date'], dayfirst=True).dt.date\ndf_timna.sort_values('result_date', ascending=False, inplace=True)\ndf_timna.set_index('result_date', inplace=True)\ndf_timna['total_tests'] = df_timna.sum(axis=1)\ndf_timna['Confirmed'] = df_timna['Positive']\ndf_timna['TPR'] = 100. * df_timna['Confirmed'] \/ df_timna['total_tests']\ndf_timna[1:]","68686568":"\nisrael_daily_tests = {\n'26\/01\/2020': 3,\n'27\/01\/2020': 4,\n'28\/01\/2020': 4,\n'29\/01\/2020': 7,\n'30\/01\/2020': 11,\n'31\/01\/2020': 11,\n'01\/02\/2020': 11,\n'02\/02\/2020': 17,\n'03\/02\/2020': 23,\n'04\/02\/2020': 29,\n'05\/02\/2020': 29,\n'06\/02\/2020': 29,\n'07\/02\/2020': 29,\n'08\/02\/2020': 29,\n'09\/02\/2020': 68,\n'10\/02\/2020': 97,\n'11\/02\/2020': 172,\n'12\/02\/2020': 210,\n'13\/02\/2020': 247,\n'14\/02\/2020': 275,\n'15\/02\/2020': 277,\n'16\/02\/2020': 305,\n'17\/02\/2020': 348,\n'18\/02\/2020': 393,\n'19\/02\/2020': 429,\n'20\/02\/2020': 457,\n'21\/02\/2020': 472,\n'22\/02\/2020': 485,\n'23\/02\/2020': 560,\n'24\/02\/2020': 618,\n'25\/02\/2020': 722,\n'26\/02\/2020': 845,\n'27\/02\/2020': 979,\n'28\/02\/2020': 1094,\n'29\/02\/2020': 1252,\n'01\/03\/2020': 1412,\n'02\/03\/2020': 1585,\n'03\/03\/2020': 1811,\n'04\/03\/2020': 1934,\n'05\/03\/2020': 2111,\n'06\/03\/2020': 2413,\n'07\/03\/2020': 2800,\n'08\/03\/2020': 3275,\n'09\/03\/2020': 3863,\n'10\/03\/2020': 4381,\n'11\/03\/2020': 4892,\n'12\/03\/2020': 5614,\n'13\/03\/2020': 6399,\n'14\/03\/2020': 7044,\n'15\/03\/2020': 8186,\n'16\/03\/2020': 9464,\n'17\/03\/2020': 11599,\n'18\/03\/2020': 14255,\n'19\/03\/2020': 16758,\n'20\/03\/2020': 19401,\n'21\/03\/2020': 21375,\n'22\/03\/2020': 24734,\n'23\/03\/2020': 28599,\n'24\/03\/2020': 33666,\n'25\/03\/2020': 38906,\n'26\/03\/2020': 44461,\n'27\/03\/2020': 49475,\n'28\/03\/2020': 54436,\n'29\/03\/2020': 60925,\n'30\/03\/2020': 66606,\n'31\/03\/2020': 74457,\n'01\/04\/2020': 82670,\n'02\/04\/2020': 91752,\n'03\/04\/2020': 101655,\n'04\/04\/2020': 108302,\n'05\/04\/2020': 117581,\n'06\/04\/2020': 124831,\n'07\/04\/2020': 131423,\n'08\/04\/2020': 136993,\n'09\/04\/2020': 142514,\n'10\/04\/2020': 148494,\n'11\/04\/2020': 154579,\n'12\/04\/2020': 163072,\n'13\/04\/2020': 172063,\n'14\/04\/2020': 187250,\n'15\/04\/2020': 198002,\n'16\/04\/2020': 207509,\n'17\/04\/2020': 221572,\n\n}\n\n\ndf_israel_tests = pd.DataFrame(list(israel_daily_tests.items()), columns=['ObservationDate', 'Tested'])\ndf_israel_tests['Country\/Region'] = 'Israel'\ndf_israel_tests['ObservationDate'] = pd.to_datetime(df_israel_tests['ObservationDate'], dayfirst=True).dt.date\ndf_israel_tests = df_israel_tests.loc[df_israel_tests['ObservationDate'] > pd.to_datetime('2020, 2, 20').date()]","2c690f52":"def add_death_rate_col(df):\n    df['Death Rate'] = 100 * df['Deaths'] \/ (df['Confirmed'] + df['Recovered'])\n    df[['Death Rate']] = df[['Death Rate']].fillna(0.)\n    return df\n\ndef add_sick_col(df):\n    df['Sick'] = df['Confirmed'] - df['Deaths'] - df['Recovered']\n    return df\n\ndef add_location_col(df):\n    df['Location'] = df['Country\/Region'] + ' ' + df['Province\/State']\n    df['Location'] = df['Location'].str.strip()\n    return df\n\ndf = df_raw.copy(deep=True)\ndf = add_sick_col(df)\ndf = add_death_rate_col(df)\ndf = add_location_col(df)\ndf[['Province\/State']] = df[['Province\/State']].fillna('')\ndf['ObservationDate'] = pd.to_datetime(df['ObservationDate']).dt.date\ndf = pd.merge(df, df_israel_tests, on=['ObservationDate', 'Country\/Region'], how='outer')\n\ndf.head()","fd10e782":"df_latest_date = df[df['ObservationDate'] == max(df.loc[df['Country\/Region'] != 'Israel', 'ObservationDate'])]\ndf_latest_date = add_location_col(df_latest_date)\ndf_latest_date = df_latest_date.loc[:, ['ObservationDate', 'Country\/Region', 'Confirmed', 'Deaths', 'Recovered', 'Sick', 'Tested', 'Death Rate']]\n# print(f'Number of rows: {len(df_latest_date)}')\n\ndf_summary = df_latest_date.groupby(['ObservationDate'])[['Confirmed', 'Deaths', 'Recovered', 'Sick']].sum()\ndf_latest_date_per_country = df_latest_date.groupby(['Country\/Region'])[['Confirmed', 'Deaths', 'Recovered', 'Sick', 'Tested']].sum()\ndf_latest_date_per_country = add_death_rate_col(df_latest_date_per_country).sort_values(by='Confirmed', ascending=False)","e299d4ad":"df_summary_p = df_summary.copy(deep=True)\nfor col in df_summary_p:\n    df_summary_p[col] = df_summary_p.apply(lambda x: \"{:,.0f}\".format(x[col]), axis=1)\n    \ndisplay(df_summary_p.style.background_gradient(cmap='Reds'))","9e647e4a":"display(df_latest_date_per_country[df_latest_date_per_country.Confirmed > 100].drop('Tested', axis=1).style.background_gradient(cmap='Reds'))","eec2d2bf":"display(df_latest_date_per_country[df_latest_date_per_country.Recovered <= 0][df_latest_date_per_country.Confirmed > 10].sort_values(by='Confirmed', ascending=False).style.background_gradient(cmap='Reds'))","31e75ff7":"df_daily_summary = df.groupby('ObservationDate')[['Recovered', 'Sick', 'Deaths']].sum().reset_index()\ndf_daily_summary['ObservationDate'] = pd.to_datetime(df_daily_summary['ObservationDate'])\ndf_daily_summary.set_index('ObservationDate', inplace=True)\nax = df_daily_summary.plot(kind='bar', stacked=True, figsize=(20,7), grid=True, color=['seagreen', 'cornflowerblue', 'red'], title=\"COVID-19 sick, recovered and dead people over the world\")\nax.yaxis.set_major_formatter(matplotlib.ticker.StrMethodFormatter('{x:,.0f}'))\nplt.xticks(rotation=60, ha='right');\nallowed_remainder = max(df['ObservationDate']).day % 2\nlabels = [item.get_text().replace(' 00:00:00', '') if i % 2 == allowed_remainder else '' for i, item in enumerate(ax.get_xticklabels())]\nax.set_xticklabels(labels);\n","ca8b8d4c":"avg_window=5\npos_rate_col = 'True Positive Rate (TPR)'\nsmooth_growth_col_name = f'TPR Simple Moving Average ({avg_window}d)'\nexp_smooth_growth_col_name = f'TPR Exponential Moving Average ({avg_window}d)'\n\ndf_isr_tests_all = df_timna[1:-1]\ndf_isr_tests_all = df_isr_tests_all.iloc[::-1]\ndf_isr_tests_all[pos_rate_col] = df_isr_tests_all['TPR']\ndf_isr_tests_all[smooth_growth_col_name] = df_isr_tests_all[pos_rate_col].rolling(window=avg_window, min_periods=avg_window).mean()\ndf_isr_tests_all[exp_smooth_growth_col_name] = df_isr_tests_all[pos_rate_col].ewm(span=avg_window, min_periods=avg_window).mean()\n# df_isr_tests_all = df_isr_tests_all.reset_index()\n\ndf_annotations = df_isr_tests_all.loc[:, ['total_tests']].dropna().to_dict()['total_tests']\ndf_isr_tests = df_isr_tests_all[['In progress', 'Not done', 'Unknown', 'Positive', 'Negative']]\nfig, ax = plt.subplots(figsize=(18,8))\ndf_isr_tests.plot(ax=ax, kind='bar', stacked=True, grid=True, color=['orange', 'cornflowerblue', 'blue', 'red', 'mediumseagreen' ], title=\"https:\/\/data.gov.il\/dataset\/covid-19\/\")\nax2 = ax.twinx()\nax2.spines['right'].set_position(('axes', 1.0))\ndf_isr_tests_all = df_isr_tests_all.reset_index()\ndf_isr_tests_all.loc[:, ['TPR']].plot(ax=ax2, alpha=0.6, color='gray', linestyle='--')\n# df_isr_tests_all.loc[:, [smooth_growth_col_name]].plot(ax=ax2, alpha=0.99, color='blue', linestyle='--')\ndf_isr_tests_all.loc[:, [exp_smooth_growth_col_name]].plot(ax=ax2, alpha=0.99, color='navy', linestyle=':')\nax.yaxis.set_major_formatter(matplotlib.ticker.StrMethodFormatter('{x:,.0f}'))\nax2.yaxis.set_major_formatter(ticker.PercentFormatter())\nlines, labels = ax.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax2.legend(lines + lines2, labels + labels2, loc='upper left')\nax.set_ylabel(f'Number of Tests')\nax2.set_ylabel('True Positive Rate (TPR) [%]')\nax.set_xlabel(f'Test Result Date')\nax.legend(loc='upper left')\nplt.suptitle(f'    Daily Corona Tests Results in Israel',fontsize=24, y=0.98)\nstyle = dict(size=11, color='black')\nannotations = {}\nannotations.update(df_annotations)\nx_coord = 0\nfor k, v in annotations.items():\n    annotate_val = f'{v\/1000000.:,.2f}M' if v >= 1000000 else (f'{v\/1000.:,.2f}K' if v >= 1000 else f'{v:,.0f}')\n#     print(f'{annotate_val}: ({k}, {v})')\n    ax.text(x_coord, v, annotate_val, ha='center', va='bottom', **style)\n    x_coord += 1\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\");\n","aebe30d4":"def y_fmt(tick_val, pos):\n    if tick_val >= 1000:\n        val = int(tick_val) \/ 1000\n        return '{:.0f}k'.format(val)\n    else:\n        return int(tick_val)\n\nnrow=9\nncol=5\ncol = 'Sick'\nnum_countries = nrow * ncol\nselected_countries = dict(enumerate(df.groupby(['Country\/Region'])[['Confirmed']].sum().reset_index().sort_values('Confirmed', ascending=False)['Country\/Region'].values[:num_countries+1], start=0))\ndf_selected_countries = df[df['Country\/Region'].isin(selected_countries.values())]\ndf_selected_countries = df_selected_countries.groupby(['ObservationDate', 'Country\/Region'])[['Recovered', 'Deaths', 'Sick', 'Confirmed']].sum().reset_index().sort_values('Confirmed', ascending=False)\n\nfig, axes = plt.subplots(nrow, ncol,figsize=(20,14))\nfig.suptitle(f'{col} Curve in each Country ({max(df[\"ObservationDate\"])})', y=1.025, fontsize=30)\nfor r in range(nrow):\n    for c in range(ncol):\n        country = selected_countries[r * ncol + c]\n        country_df = df_selected_countries[df_selected_countries['Country\/Region'] == country].set_index('ObservationDate')[col].sort_index(ascending=False)\n        ax = country_df.plot(ax=axes[r,c], title=f'{country}', color='r')\n        ax.set_xticks([]) \n        ax.set_xticklabels([])\n        ax.set_xlabel('')\n        ax.yaxis.set_major_formatter(ticker.FuncFormatter(y_fmt))\n        ax.fill_between(country_df.index, country_df.values, facecolor='red', alpha=0.2)\n        ax.axis('off')\n\nfig.tight_layout()\n","af616448":"country_min_dates_support = 1\ndf_daily_per_country = df.groupby(['Country\/Region', 'ObservationDate'])[['Confirmed', 'Deaths', 'Recovered', 'Sick', 'Tested']].sum().reset_index()\ndf_daily_per_country = df_daily_per_country[df_daily_per_country['Country\/Region'].map(df_daily_per_country['Country\/Region'].value_counts()) >= country_min_dates_support]\ndf_daily_per_country = df_daily_per_country.sort_values(['Country\/Region', 'ObservationDate'], ascending=[True, True])","c4f970b7":"def add_new_cases_col(df, col):\n    new_cases_col_name = f'New {col}'\n    df[new_cases_col_name] = df[col] - df[col].shift(1)\n    return df, new_cases_col_name\n\ndef plot_new_per_total(data, col, countries=None, figsize=(17,7), log_scale=True, xticks_interval=2, days_to_sum=5):\n    if countries is not None:\n        data = data[data['Country\/Region'].isin(countries)]\n    \n    data = data[data['Confirmed'] >= 30]\n    \n    fig, ax = plt.subplots(figsize = (20,10))\n    country_to_df = {}\n    cmap = plt.get_cmap('jet_r')\n    for i, country in enumerate(countries, start=0):\n        color = cmap(float(i)\/len(countries))\n        country_to_df[country] = data.loc[data['Country\/Region'] == country, [col]]\n        country_to_df[country], new_cases_col_name = add_new_cases_col(country_to_df[country], col)\n        new_cases_sum_col_name = f'{new_cases_col_name} (last {days_to_sum} days)'\n        country_to_df[country][new_cases_sum_col_name] = country_to_df[country][new_cases_col_name].rolling(window=days_to_sum).sum()\n        country_to_df[country].plot(x=col, y=new_cases_sum_col_name, ax=ax, grid=True, linewidth=0.45, marker='o', markersize=4, label=country)#, c=color)\n    \n    for line, name in zip(ax.lines, countries):\n        y = line.get_ydata()[-1]\n        x = line.get_xdata()[-1]\n        x_offset = x \/ 20 if name is not 'US' else x_offset\n        ax.annotate(name, xy=(x+x_offset,y), xytext=(x+x_offset,y), color=line.get_color(), size=14, va=\"top\", ha='left')\n    \n    ax.set_ylabel(f'{new_cases_col_name} (log scale)')\n    ax.set_xlabel(f'Accumulated {col} (log scale)')\n    ax.legend(loc='upper left')\n    ax.set_yscale('log')\n    ax.set_xscale('log')\n    plt.suptitle(f'COVID-19 New Confirmed Cases against Accumulated Confirmed Cases on Log-Scale',fontsize=24, y=0.95)\n    plt.title(f'Johns Hopkins University Data ({max(df[\"ObservationDate\"])})')\n    ax.yaxis.set_major_formatter(matplotlib.ticker.StrMethodFormatter('{x:,.0f}'))\n    ax.xaxis.set_major_formatter(matplotlib.ticker.StrMethodFormatter('{x:,.0f}'))\n\nnum_countries = 20\nselected_countries = df_latest_date_per_country.reset_index().sort_values('Confirmed', ascending=False)['Country\/Region'].values[:num_countries+1]\nselected_countries = [c for c in selected_countries if c != 'Others']\ncountries_to_plot = ['Mainland China', 'South Korea', 'Japan', 'US', 'France', 'Germany', 'Italy','Spain', 'Israel', 'Greece', 'UK', 'Iran', 'Russia', 'India']#, 'Brazil', 'Russia']\nplot_new_per_total(df_daily_per_country, col='Confirmed', countries=countries_to_plot, log_scale=False, xticks_interval=2)","676e0274":"def plot_col_per_country(data, col, countries=None, figsize=(15,7), log_scale=True, xticks_interval=2, alignment_val=None):\n    if countries is not None:\n        data = data[data['Country\/Region'].isin(countries)]\n        \n    if alignment_val is not None:\n        data = data[data['Confirmed'] >= alignment_val]\n        \n    pivot_df = data.pivot_table(index='ObservationDate', columns='Country\/Region', values=col)\n    \n    if alignment_val is not None:\n        pivot_df = pd.concat([pivot_df[x].dropna().reset_index(drop=True) for x in pivot_df], axis=1)\n        pivot_df.index.name = f\"Days Since {alignment_val} {col} Cases\"\n    \n    ax = pivot_df.plot(xticks=pivot_df.index, figsize=figsize, grid=True, ls='--' if alignment_val else '-')\n    ax.set_ylabel(col)\n    \n    if alignment_val is None:\n        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\n        ax.xaxis.set_major_locator(mdates.DayLocator(interval=xticks_interval))\n    \n    ax.legend(loc='upper left')\n    \n    if log_scale:\n        ax.set_yscale('log')\n        \n    ax.yaxis.set_major_formatter(matplotlib.ticker.StrMethodFormatter('{x:,.0f}'))\n    alignment_text = f' since {alignment_val} {col} Cases' if alignment_val else \"\"\n    plt.title(f'Number of {col} Cases ({\"Log scale\" if log_scale else \"Linear scale\"}){alignment_text}')\n    \n    if alignment_val is None:\n        plt.xticks(rotation=60, ha='right');\n\ncountries_to_plot = ['South Korea', 'Japan', 'US', 'France', 'Germany', 'Italy','Spain', 'Israel', 'UK', 'Greece', 'Russia']\n# countries_to_plot = ['US', 'Italy', 'Israel']\nplot_col_per_country(df_daily_per_country, col='Confirmed', countries=countries_to_plot, log_scale=False, xticks_interval=2, alignment_val=100)","b34a2aa9":"countries = ['South Korea', 'Japan', 'Thailand', 'Mainland China', 'US', 'France', 'Germany', 'Italy','Spain', 'Israel']","8c58f340":"plot_col_per_country(df_daily_per_country, col='Confirmed', countries=countries)","a4ab0c3a":"plot_col_per_country(df_daily_per_country, col='Confirmed', countries=['US', 'Germany', 'Spain', 'France', 'Israel'], log_scale=False)","e2069454":"plot_col_per_country(df_daily_per_country, col='Recovered', countries=countries)","c2f18d3a":"plot_col_per_country(df_daily_per_country, col='Deaths', countries=countries)","05d7cd8b":"def plot_daily_new_cases(data, country, col='Confirmed', xticks_interval = None, yticks_interval=None, avg_window=7, max_ylim=None, x_offset=0, y_offset=0, num_days_to_skip=0):\n    df_g = data.loc[data['Country\/Region'] == country]\n    df_g, new_cases_col_name = add_new_cases_col(df_g, col)\n    smooth_growth_col_name = f'Simple moving average ({avg_window}d)'\n    exp_smooth_growth_col_name = f'Exponential moving average ({avg_window}d)'\n    df_g[smooth_growth_col_name] = df_g[new_cases_col_name].rolling(window=avg_window, min_periods=avg_window).mean()\n    df_g[exp_smooth_growth_col_name] = df_g[new_cases_col_name].ewm(span=avg_window, min_periods=avg_window).mean()\n    df_g = df_g.reset_index().sort_values('ObservationDate', ascending=False)\n    df_g = df_g.drop(df_g.tail(num_days_to_skip).index, inplace=False)\n    df_g['ObservationDate'] = df_g['ObservationDate'].astype(str)\n    df_g = df_g.set_index('ObservationDate')[::-1]\n    \n    fig, ax = plt.subplots(figsize = (15,7))\n    df_g.plot(y=new_cases_col_name, kind = 'bar', color='lightcoral', ax = ax, grid=True)\n    df_g.plot(y=smooth_growth_col_name, kind = 'line', linewidth=2.0, marker='o', color='black', ax=ax, grid=True)\n    df_g.plot(y=exp_smooth_growth_col_name, kind = 'line', linewidth=2.0, marker='o', color='red', ax=ax, grid=True)\n    ax.set_ylabel(new_cases_col_name)\n    ax.legend(loc='upper left')\n    ax.yaxis.set_major_formatter(matplotlib.ticker.StrMethodFormatter('{x:,.0f}'))\n    \n    if max_ylim is not None and max_ylim < df_g[new_cases_col_name].max():\n        ax.set_ylim([0.9, max_ylim])\n    \n    style = dict(size=14, color='dimgray')\n    for p in ax.patches:\n        b = p.get_bbox()\n        annotate_val = f'{b.y1\/1000.:,.1f}K' if b.y1 >= 1000 else f'{b.y1:,.0f}'\n        ax.annotate(annotate_val, ((b.x0 + b.x1)\/2 + x_offset, b.y1 + y_offset), ha='center', va='bottom', **style)\n    \n    plt.title(f'{new_cases_col_name} Cases in {country}')\n    plt.xticks(rotation=60, ha='right');\n    ax.set_xlim(ax.get_xlim()[0], ax.get_xlim()[1] + 1);\n    \n\n# plot_daily_new_cases(df_daily_per_country, 'US', num_days_to_skip=30)\n# plot_daily_new_cases(df_daily_per_country, 'Greece', col='Confirmed', num_days_to_skip=0)","a8bc2206":"plot_daily_new_cases(df_daily_per_country, 'Israel', col='Confirmed', num_days_to_skip=10)","9b732231":"plot_daily_new_cases(df_daily_per_country, 'US', num_days_to_skip=30)","adbcf779":"plot_daily_new_cases(df_daily_per_country, 'Italy', num_days_to_skip=18)","df2f813c":"plot_daily_new_cases(df_daily_per_country, 'Greece', col='Confirmed', num_days_to_skip=0)","84e348a2":"def plot_daily_pos_rate(data, country, xticks_interval = None, yticks_interval=None, avg_window=5, max_ylim=None, x_offset=0, y_offset=0, num_days_to_skip=0):\n    pos_rate_col = 'True Positive Rate (TPR)'\n    df_g = data.loc[data['Country\/Region'] == country]\n    df_g, new_tested_col_name = add_new_cases_col(df_g, 'Tested')\n    df_g, new_confirmed_col_name = add_new_cases_col(df_g, 'Confirmed')\n    df_g[pos_rate_col] = 100. * df_g[new_confirmed_col_name] \/ df_g[new_tested_col_name].astype(float)\n    smooth_growth_col_name = f'TPR Simple Moving Average ({avg_window}d)'\n    exp_smooth_growth_col_name = f'TPR Exponential Moving Average ({avg_window}d)'\n    df_g[smooth_growth_col_name] = df_g[pos_rate_col].rolling(window=avg_window, min_periods=avg_window).mean()\n    df_g[exp_smooth_growth_col_name] = df_g[pos_rate_col].ewm(span=avg_window, min_periods=avg_window).mean()\n    df_g = df_g.reset_index().sort_values('ObservationDate', ascending=False)\n    df_g = df_g.drop(df_g.tail(num_days_to_skip).index, inplace=False)\n    df_g = df_g[df_g['ObservationDate'] <= max([pd.to_datetime(d, dayfirst=True).date() for d in israel_daily_tests.keys()])]\n    df_g['ObservationDate'] = df_g['ObservationDate'].astype(str)\n    df_g = df_g.set_index('ObservationDate')[::-1]\n    fig, ax = plt.subplots(figsize=(20,10))\n    title = 'Daily True Positive Rate of Corona Tests in Israel (with simple and exponential averages)'\n#     df_g[new_tested_col_name] -= df_g[new_confirmed_col_name]\n#     df_g[new_tested_col_name] -= df_g[new_confirmed_col_name]\n    ax = df_g.loc[:, [new_confirmed_col_name, new_tested_col_name]].plot(ax=ax, kind='bar', stacked=True, grid=True, color=['Blue', 'lightsteelblue'], title=title)\n    ax2 = ax.twinx()\n    ax2.spines['right'].set_position(('axes', 1.0))\n    df_g.loc[:, [pos_rate_col]].plot(ax=ax2, alpha=0.6, color='gray', linestyle='--')\n    df_g.loc[:, [smooth_growth_col_name]].plot(ax=ax2, alpha=0.99, color='blue', linestyle='--')\n    df_g.loc[:, [exp_smooth_growth_col_name]].plot(ax=ax2, alpha=0.99, color='navy', linestyle=':')\n    \n    ax.yaxis.set_major_formatter(matplotlib.ticker.StrMethodFormatter('{x:,.0f}'))\n    labels = [item.get_text().replace(' 00:00:00', '') for i, item in enumerate(ax.get_xticklabels())]\n    ax.set_xticklabels(labels);\n    \n    lines, labels = ax.get_legend_handles_labels()\n    lines2, labels2 = ax2.get_legend_handles_labels()\n#     ax.legend()\n    ax2.legend(lines + lines2, labels + labels2, loc='upper left')\n\n    ax.set_xlim(ax.get_xlim()[0], ax.get_xlim()[1] + 1)\n    ax.set_ylabel('Number of Tests and Confirmed Cases')\n    ax2.set_ylabel('True Positive Rate (TPR) [%]')\n    \n    colors = ['blue','royalblue']\n    for i, p in enumerate(ax.patches):\n        style = dict(size=14, color=colors[int(i\/(len(ax.patches)\/2))])\n        b = p.get_bbox()\n        annotate_val = f'{b.y1\/1000.:,.2f}K' if b.y1 >= 1000 else f'{b.y1:,.0f}'\n        ax.annotate(annotate_val, ((b.x0 + b.x1)\/2 + x_offset, b.y1 + y_offset), ha='center', va='bottom', **style)\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n#     display(df_g[['New Confirmed', 'New Tested','Confirmed', 'Tested', 'True Positive Rate (TPR)']].tail(n=20))\n    \nplot_daily_pos_rate(df_daily_per_country, 'Israel', num_days_to_skip=4)\n# print(\"Not available yet, the data is not reliable.\")","d8a91582":"def add_growth_col(df, col):\n    growth_col_name = f'{col} Growth'\n    df[growth_col_name] = df[col] \/ df[col].shift(1)\n    return df, growth_col_name\n\ndef plot_growth_factor(data, country, xticks_interval = 2, yticks_interval=None, avg_window=7, max_ylim=None, num_days_to_skip=0):\n    df_g = data.loc[data['Country\/Region'] == country]\n    df_g, growth_col_name = add_growth_col(df_g, 'Confirmed')\n    smooth_growth_col_name = f'Simple moving average ({avg_window}d)'\n    exp_smooth_growth_col_name = f'Exponential moving average ({avg_window}d)'\n    df_g[smooth_growth_col_name] = df_g[growth_col_name].rolling(window=avg_window, min_periods=avg_window).mean()\n    df_g[exp_smooth_growth_col_name] = df_g[growth_col_name].ewm(span=avg_window, min_periods=avg_window).mean()\n    df_g = df_g.reset_index().sort_values('ObservationDate', ascending=False)\n    df_g = df_g.drop(df_g.tail(num_days_to_skip).index, inplace=False)\n    df_g = df_g.set_index('ObservationDate')\n    ax = df_g[[growth_col_name]].plot(linewidth=1.5, figsize=(15,7), grid=True, style = 'r--')\n    df_g[[smooth_growth_col_name]].plot(linewidth=1.0, ax=ax, grid=True)\n    df_g[[exp_smooth_growth_col_name]].plot(linewidth=1.0, ax=ax, grid=True)\n    ax.set_ylabel(growth_col_name)\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m.2020'))\n    ax.xaxis.set_major_locator(mdates.DayLocator(interval=xticks_interval))\n    ax.legend(loc='upper left')\n    \n    if max_ylim is not None and max_ylim < df_g[growth_col_name].max():\n        ax.set_ylim([0.9, max_ylim])\n    \n    if yticks_interval is not None:\n        ax.yaxis.set_major_locator(MultipleLocator(yticks_interval))\n        \n    plt.title(f'{growth_col_name} Factor in {country}')\n    plt.gca().xaxis.set_minor_locator(plt.NullLocator())\n    plt.xticks(rotation=60, ha='right');\n\n\n# plot_growth_factor(df_daily_per_country, 'US', num_days_to_skip=6)","75e621c5":"plot_growth_factor(df_daily_per_country, 'Israel')","eca129a9":"plot_growth_factor(df_daily_per_country, 'US', max_ylim=2., xticks_interval=1, num_days_to_skip=50)","b5439f17":"plot_growth_factor(df_daily_per_country, 'Italy', max_ylim=2.)","488e7117":"plot_growth_factor(df_daily_per_country, 'Greece', max_ylim=2.)","176594c2":"def plot_daily_new_cases(data, country, xticks_interval = None, yticks_interval=None, avg_window=7, max_ylim=None, x_offset=0, y_offset=0, num_days_to_skip=0):\n    df_g = data.loc[data['Country\/Region'] == country]\n    df_g, new_cases_col_name = add_new_cases_col(df_g, 'Confirmed')\n    smooth_growth_col_name = f'Simple moving average ({avg_window}d)'\n    exp_smooth_growth_col_name = f'Exponential moving average ({avg_window}d)'\n    df_g[smooth_growth_col_name] = df_g[new_cases_col_name].rolling(window=avg_window, min_periods=avg_window).mean()\n    df_g[exp_smooth_growth_col_name] = df_g[new_cases_col_name].ewm(span=avg_window, min_periods=avg_window).mean()\n    df_g = df_g.reset_index().sort_values('ObservationDate', ascending=False)\n    df_g = df_g.drop(df_g.tail(num_days_to_skip).index, inplace=False)\n\ndef pred_with_avg_growth_factor(data, country, days_for_avg = 2, days_for_prediction = 7, xticks_interval = 2, factor_penalty=0.0, \n                                yticks_interval=None, print_pred_vals=False, num_days_to_skip=0, lockdown_date=None):\n    df_c = data.loc[data['Country\/Region'] == country] \n    df_c, growth_col_name = add_growth_col(df_c, 'Confirmed') \n    avg_growth_7d = df_c.sort_values('ObservationDate', ascending=False)[growth_col_name][:days_for_avg].mean() \n    avg_growth_7d -= factor_penalty \n    df_c = df_c.sort_values('ObservationDate', ascending=False) \n    df_c = df_c.drop(df_c.tail(num_days_to_skip).index, inplace=False) \n    df_c = df_c.set_index('ObservationDate') \n    \n    max_date = max(df_c.index) \n    first_pred_day = max_date + timedelta(days=1) \n    df_c.loc[max_date, 'Prediction'] = df_c.loc[max_date, 'Confirmed']\n\n    for new_date in pd.date_range(start=first_pred_day, periods=days_for_prediction, freq='D'):\n        df_c.loc[new_date, 'Prediction'] = df_c.loc[max_date, 'Prediction'] * avg_growth_7d\n        max_date = new_date\n        \n    df_c = df_c.reset_index().sort_values('ObservationDate', ascending=False)\n    df_c = df_c.set_index('ObservationDate')\n    ax = df_c[['Confirmed', 'Prediction']].plot(style=['r-','ko--'], linewidth=2.0, figsize=(15,7), grid=True)\n    ax.set_ylabel('Confirmed')\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m.2020'))\n    ax.xaxis.set_major_locator(mdates.DayLocator(interval=xticks_interval))\n    ax.yaxis.set_major_formatter(matplotlib.ticker.StrMethodFormatter('{x:,.0f}'))\n    ax.legend(loc='upper left')\n\n    if yticks_interval is not None:\n        ax.yaxis.set_major_locator(MultipleLocator(yticks_interval))\n\n    ax.set_ylim(0, int(max(df_c['Prediction']) * 1.1))\n    plt.title(f'Predicted number of confirmed cases (factor {avg_growth_7d:.2f}) in {country}')\n    plt.gca().xaxis.set_minor_locator(plt.NullLocator())\n    plt.xticks(rotation=60, ha='right');\n\n    style = dict(size=11, color='dimgray')\n    annotations = {}\n    annotations.update(df_c.loc[:, ['Prediction']].dropna().to_dict()['Prediction'])\n#     annotations.update(df_c.loc[:, ['Confirmed']].dropna().to_dict()['Confirmed'])\n#     print(annotations)\n    for k, v in annotations.items():\n        annotate_val = f'{v\/1000000.:,.2f}M' if v >= 1000000 else (f'{v\/1000.:,.2f}K' if v >= 1000 else f'{v:,.0f}')\n        ax.text(k, v, annotate_val, ha='right', va='bottom', **style)\n    \n    if lockdown_date is not None:\n        arrowprops=dict(arrowstyle='->', color='red', linewidth=3, mutation_scale=50, ls='-')\n        lockdown_yval = df_c.loc[lockdown_date, 'Confirmed'].values[0]\n        time_since_lockdown = (max(df_c.loc[:, ['Confirmed']].dropna().index) - datetime.strptime(lockdown_date, \"%Y-%m-%d\")).days\n        lockdown_x = datetime.strptime(lockdown_date, \"%Y-%m-%d\") - timedelta(days=5)\n        lockdown_y = (ax.get_ylim()[1] - ax.get_ylim()[0]) * 0.4\n        arrow_text = f\"{country} Lockdown ({lockdown_date})\\n{time_since_lockdown} days ago\"\n        plt.annotate(arrow_text, xy=(lockdown_date, lockdown_yval), xytext=(lockdown_x, lockdown_y), arrowprops=arrowprops, va='top', ha='center')\n    \n    if print_pred_vals:\n        display(df_c.loc[:, ['Prediction']].dropna().astype(int))\n        \n#     display(df_c)\n        \ncountry = 'US'\npred_with_avg_growth_factor(df_daily_per_country, country=country, days_for_prediction=1, num_days_to_skip=45, factor_penalty=0.01, xticks_interval=1, lockdown_date='2020-03-20')","36ba3d2c":"country = 'Israel'\npred_with_avg_growth_factor(df_daily_per_country, country=country, factor_penalty=0.03, xticks_interval=1, lockdown_date='2020-03-16', days_for_prediction=1)","f4508bc5":"country = 'US'\npred_with_avg_growth_factor(df_daily_per_country, country=country, days_for_prediction=1, num_days_to_skip=45, xticks_interval=1, factor_penalty=0.015, lockdown_date='2020-03-20')","c23ba5e5":"country = 'Italy'\npred_with_avg_growth_factor(df_daily_per_country, country=country, days_for_prediction=1, lockdown_date='2020-03-09')","5b24ca4c":"country = 'Greece'\npred_with_avg_growth_factor(df_daily_per_country, country=country, days_for_prediction=1, lockdown_date=None, num_days_to_skip=10)","d3610216":"Dataset: https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset\/data","2cfd1ae6":"# Prediction","39a93148":"### World status","65fcd91c":"### Growth factor","73b5466b":"# Spread rate","bd1bd009":"### New cases","c862421a":"# Load raw data","3e2587a1":"### Sick curve in each country","eb086b20":"### Global spread rate","72febf94":"### Naive baseline model based on exponential growth","52cf16bd":"### Spread rate per country","b6e9c396":"### Countries without recovered people","0f6b89ef":"### Daily True Positive Rate of Corona Tests in Israel (with simple and exponential averages)","015e30da":"### Daily Corona Tests Results in Israel","68d75ac7":"# Current Status","002e1f42":"### Countries status"}}