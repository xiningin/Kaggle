{"cell_type":{"a192a56d":"code","a575da4c":"code","3502ea37":"code","0939f62c":"code","fdf4dce6":"code","f08a559f":"code","189aeb4c":"code","dff08ac2":"code","9c95c845":"code","8699fd70":"code","5bea0518":"code","ccf4b734":"code","36a6f70e":"code","191b062d":"code","a7af2d57":"code","e3a621be":"code","ec2e4a4a":"code","4740ee86":"code","c492f4ad":"code","9dd0d50c":"code","707ef91b":"code","df872798":"code","131c198d":"code","c669cbeb":"code","03238821":"code","feb5cd7c":"code","dc409af2":"code","d3525fe1":"code","6eb13824":"code","8a73d0da":"code","10303089":"code","086838b3":"code","794268c2":"code","2e1e45f6":"code","ec2e2045":"code","425113ca":"code","af921e8a":"code","3f929ae6":"code","6c5cbd93":"code","6ac89b64":"code","76c55403":"code","665e1aab":"code","70a17163":"code","8d6aa72b":"code","f466905e":"code","9e840bcb":"code","de3eec78":"code","752f2147":"code","026c64fc":"code","617cc923":"code","ae05caff":"code","d675d7ac":"code","7b90efda":"code","1513a3fb":"code","1d26efdf":"code","0a595a11":"code","1b734317":"code","0979500e":"code","8351180e":"code","80aa0d9a":"markdown","97cbdfda":"markdown","9c36740a":"markdown","6d700ddf":"markdown","9b793751":"markdown","9f323892":"markdown","7c29e0ff":"markdown","a8a20276":"markdown","ba2878cf":"markdown","e50f73be":"markdown","b3afd70e":"markdown","e2249fa5":"markdown","e6ef835e":"markdown","18643b9d":"markdown","a31985c4":"markdown","300dd019":"markdown","243ad36f":"markdown","76bcb70e":"markdown","4a23cff9":"markdown","ef2e4be5":"markdown","fa2513e5":"markdown","ba0d9971":"markdown","2384276e":"markdown","d7d0b297":"markdown","c223b0b2":"markdown","28bd7227":"markdown"},"source":{"a192a56d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a575da4c":"mydateparser = lambda x: pd.datetime.strptime(x, \"%d-%m-%Y %H:%M\")\n","3502ea37":"gen_data = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv\",index_col = \"DATE_TIME\",parse_dates = [\"DATE_TIME\"] , date_parser = mydateparser)","0939f62c":"gen_data.head()","fdf4dce6":"gen_data[\"Date\"] = pd.to_datetime(gen_data.index.map(lambda x : x.date()))\ngen_data[\"Time\"] = gen_data.index.map(lambda x : x.time())","f08a559f":"gen_data.loc[(gen_data[\"DC_POWER\"] == 0) & (gen_data[\"AC_POWER\"] != 0)]","189aeb4c":"gen_data.loc[(gen_data[\"DC_POWER\"] != 0) & (gen_data[\"AC_POWER\"] == 0)]","dff08ac2":"[any(pd.isnull(gen_data[column])) for column in gen_data.columns]","9c95c845":"numeric_columns = [column for column in gen_data.columns if gen_data[column].dtype in ['int64','float64']]\nother_columns = [column for column in gen_data.columns if column not in numeric_columns]","8699fd70":"[any(np.isnan(gen_data[column])) for column in numeric_columns]","5bea0518":"gen_data[\"Date\"].head()","ccf4b734":"gen_data.columns","36a6f70e":"len(gen_data[\"SOURCE_KEY\"].unique())","191b062d":"inverters = gen_data[\"SOURCE_KEY\"].unique()","a7af2d57":"fig = plt.figure(figsize = (25,16))\nfor i,inverter in enumerate(inverters,1):\n    plt.subplot(6,4,i)\n    plt.yscale(\"log\")\n    gen_data.loc[(gen_data[\"Date\"] == \"2020-05-15\") &  (gen_data[\"SOURCE_KEY\"] == inverter),\"DC_POWER\"].plot(label = inverter + \" DC\")\n    gen_data.loc[(gen_data[\"Date\"] == \"2020-05-15\") & (gen_data[\"SOURCE_KEY\"] == inverter),\"AC_POWER\"].plot(label = inverter + \" AC\")\n    plt.legend()","e3a621be":"gen_data.groupby(\"SOURCE_KEY\").count()","ec2e4a4a":"34 * 24 * 4 #Number of data points required","4740ee86":"gen_data[\"Date\"].unique()","c492f4ad":"gen_data.groupby(\"SOURCE_KEY\").sum()[\"DC_POWER\"]","9dd0d50c":"#split the dataframes by inverter IDs first\nsplit_by_inverters = {}\nfor inverter in inverters:\n    split_by_inverters[inverter] = gen_data.loc[gen_data[\"SOURCE_KEY\"] == inverter]","707ef91b":"unique_dates = gen_data.index.map(lambda x : x.date()).unique()","df872798":"temp = split_by_inverters['1BY6WEcLGh8j5v7']","131c198d":"fig = plt.figure(figsize = (30,25))\ninverter_daily_power = {}\nfor i,(inverter,data) in enumerate(split_by_inverters.items(),1):\n    plt.subplot(6,4,i)\n    inverter_daily_power[inverter] = data.groupby(\"Date\").sum()[\"DC_POWER\"]\n    inverter_daily_power[inverter].plot(label = inverter)\n    plt.legend()","c669cbeb":"weather_data = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv\",index_col = \"DATE_TIME\",parse_dates = True)","03238821":"weather_data[\"Date\"] = pd.to_datetime(weather_data.index.map(lambda x : x.date()))\nweather_data[\"Time\"] = weather_data.index.map(lambda x : x.time())","feb5cd7c":"weather_data.head()","dc409af2":"fig = plt.figure(figsize = (18,4))\nplt.subplot(131)\nweather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"), \"IRRADIATION\"].plot(legend = True)\n#plt.legend()\nplt.subplot(132)\nweather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"),\"AMBIENT_TEMPERATURE\"].plot(legend = True)\nplt.subplot(133)\nweather_data.loc[(weather_data[\"Date\"] == \"2020-05-15 00:00:00\"),\"MODULE_TEMPERATURE\"].plot(legend = True)","d3525fe1":"sns.scatterplot(x = weather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"),\"AMBIENT_TEMPERATURE\"], y =weather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"),\"MODULE_TEMPERATURE\"])","6eb13824":"#Timestamp of maximum irradiation on the 15th of May\nweather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"),\"IRRADIATION\"].idxmax()","8a73d0da":"#Timestamp of maximum ambient temperature on the 15th of May\nweather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"),\"AMBIENT_TEMPERATURE\"].idxmax()","10303089":"weather_data.loc[(weather_data[\"Date\"] == \"2020-05-15\"),\"MODULE_TEMPERATURE\"].idxmax()","086838b3":"inverter_daily_power.keys()","794268c2":"weather_data[\"date\"] = weather_data.index.map(lambda x : x.date())\ndaily_irradiation = weather_data.groupby(\"date\").sum()[\"IRRADIATION\"]\nsns.scatterplot(x = daily_irradiation, y = inverter_daily_power[\"1BY6WEcLGh8j5v7\"])","2e1e45f6":"max_temps = weather_data.groupby(\"date\").max()[\"AMBIENT_TEMPERATURE\"]\nmin_temps = weather_data.groupby(\"date\").min()[\"AMBIENT_TEMPERATURE\"]","ec2e2045":"plt.figure(figsize = (12,6))\nmax_temps.plot(label = \"Maximum Temperature\")\nmin_temps.plot(label = \"Minimum Temperature\")\nplt.legend()","425113ca":"max_temps = weather_data.groupby(\"date\").max()[\"AMBIENT_TEMPERATURE\"]\nmin_temps = weather_data.groupby(\"date\").min()[\"AMBIENT_TEMPERATURE\"]\ndiff_temps = max_temps - min_temps\ndaily_irradiation = weather_data.groupby(\"date\").sum()[\"IRRADIATION\"]","af921e8a":"sns.scatterplot(daily_irradiation,diff_temps)","3f929ae6":"temp_before_sunrise = weather_data.loc[(weather_data[\"Time\"] < pd.to_datetime(\"07:00\").time()) & (weather_data[\"IRRADIATION\"] > 0)].groupby(\"date\")[\"AMBIENT_TEMPERATURE\"].min()","6c5cbd93":"diff_temps = max_temps - temp_before_sunrise","6ac89b64":"sns.scatterplot(daily_irradiation,diff_temps)","76c55403":"average_power = gen_data.reset_index().groupby(\"DATE_TIME\").mean()[[\"DC_POWER\",\"AC_POWER\"]]","665e1aab":"total_power = average_power * gen_data[\"PLANT_ID\"].nunique()","70a17163":"total_power[\"Date\"] = total_power.index.map(lambda x : x.date())\nfig = plt.figure()\ntotal_power.groupby(\"Date\").sum().plot()\nplt.yscale(\"log\")","8d6aa72b":"sns.regplot(x = weather_data.groupby(\"Date\")[\"IRRADIATION\"].sum(), y = total_power.groupby(\"Date\")[\"DC_POWER\"].sum())","f466905e":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(weather_data.groupby(\"Date\")[\"IRRADIATION\"].sum().values.reshape(-1,1),total_power.groupby(\"Date\")[\"DC_POWER\"].sum())\nmodel.intercept_,model.coef_","9e840bcb":"sns.regplot(x = total_power.groupby(\"Date\")[\"DC_POWER\"].sum(),y = total_power.groupby(\"Date\")[\"AC_POWER\"].sum())","de3eec78":"from sklearn.linear_model import LinearRegression","752f2147":"a = LinearRegression()\na.fit(total_power.groupby(\"Date\")[\"DC_POWER\"].sum().values.reshape(-1,1),total_power.groupby(\"Date\")[\"AC_POWER\"].sum())\na.intercept_,a.coef_","026c64fc":"gen_data_2 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv\",index_col = \"DATE_TIME\",parse_dates = [\"DATE_TIME\"])","617cc923":"gen_data_2[\"Date\"] = gen_data_2.index.map(lambda x : x.date())\ngen_data_2[\"Time\"] = gen_data_2.index.map(lambda x : x.time())","ae05caff":"gen_data_2.groupby(\"SOURCE_KEY\").count()","d675d7ac":"[any(pd.isnull(gen_data_2[column])) for column in gen_data_2.columns]","7b90efda":"inverters = gen_data_2[\"SOURCE_KEY\"].unique()\nfig = plt.figure(figsize = (25,16))\nfor i,inverter in enumerate(inverters,1):\n    plt.subplot(6,4,i)\n    plt.yscale(\"log\")\n    gen_data_2.loc[(gen_data_2[\"Date\"] == pd.to_datetime(\"2020-05-15\")) &  (gen_data_2[\"SOURCE_KEY\"] == inverter),\"DC_POWER\"].plot(label = inverter + \" DC\")\n    gen_data_2.loc[(gen_data_2[\"Date\"] == pd.to_datetime(\"2020-05-15\")) & (gen_data_2[\"SOURCE_KEY\"] == inverter),\"AC_POWER\"].plot(label = inverter + \" AC\")\n    plt.legend()","1513a3fb":"inverters","1d26efdf":"average_power_2 = gen_data_2.reset_index().groupby(\"DATE_TIME\").mean()[[\"DC_POWER\",\"AC_POWER\"]]\ntotal_power_2 = average_power_2 * gen_data_2[\"SOURCE_KEY\"].nunique()\ntotal_power_2[\"Date\"] = total_power_2.index.map(lambda x : x.date())","0a595a11":"weather_data_2 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv\",index_col = \"DATE_TIME\",parse_dates = True)\nweather_data_2[\"Date\"] = weather_data_2.index.map(lambda x : x.date())\nweather_data_2[\"Time\"] = weather_data_2.index.map(lambda x : x.time())","1b734317":"sns.regplot(x = weather_data_2.groupby(\"Date\")[\"IRRADIATION\"].sum(),y = total_power_2.groupby(\"Date\").sum()[\"DC_POWER\"])","0979500e":"sns.regplot(x = total_power_2.groupby(\"Date\").sum()[\"DC_POWER\"], y = total_power_2.groupby(\"Date\").sum()[\"AC_POWER\"])","8351180e":"model_2 = LinearRegression()\nmodel_2.fit(total_power_2.groupby(\"Date\").sum()[\"DC_POWER\"].values.reshape(-1,1), y = total_power_2.groupby(\"Date\").sum()[\"AC_POWER\"])\nmodel_2.coef_,model_2.intercept_","80aa0d9a":"Checking the above assertion that the ambient temperature peaks a while after maximum irradiation\/module temperature for all days","97cbdfda":"#### Max and Min temperature vs data taking period","9c36740a":"97% efficiency! (too good to be true!), compared to 10% in case of the other plant","6d700ddf":"Since not all inverters have readings for all intervals of time, we \"impute\" entries for the inverters (and subsequently calculate the total power produced in any instance of time) by using the average DC\/AC power produced in that time period as the power produced by an inverter with a missing reading. This implies the total power produced in an interval of time is just the average for that time interval multiplied by the total number of inverters. ","9b793751":"Irradiation vs (Maximum - Minimum) temperature","9f323892":"Calculate the average DC and AC power produced for a given timestamp","7c29e0ff":"### Let's concentrate on plant 1 for the time being","a8a20276":"The fit is not as good as the first power plant. Maybe the nonlinearities play a bigger role here, but hey, we have 100% efficiency!","ba2878cf":"Rough plot of net solar irradiation vs Power produced in a given inverter over the data taking period","e50f73be":"The first plant has an efficiency of 9.74%","b3afd70e":"Check for NaNs","e2249fa5":"* DC and AC seem to follow each other i.e., inverter seems to produce DC and convert it to AC (sanity check)\n* Inverters run from roughly 6AM to roughly 6PM","e6ef835e":"Excellent, no NaNs or empty entries","18643b9d":"The thing with temperatures is that they're not instantaneous (i.e., a change in ambient temperature or irradiation will not immediately change the module temperature). The ambient temperature for example is sort of a delayed response to solar irradiation (because ground takes some time to heat up, and a lot of time to cool down). The module temperature gets complicated because it's influenced by the sun during the day and the cooling ground at night","a31985c4":"Plot power production as a function of time for a few inverters","300dd019":" #### Irradiation vs Different temperature metrics ","243ad36f":"Temperature and irradiation profile in a given day (15-05-2020)","76bcb70e":"Visualizing a time lapse of power production for all inverters on a given day (15\/05\/2020 in this case)","4a23cff9":"So not all plants have data at all points in time within a data taking period. I'm going to assume the plant is compact enough that the inverters are quite close to each other and get the same amount of solar irradiation at any point in time (the distribution plots roughly attest to this). So an imputing strategy will be to use the average for that day and that hour to fill a missing entry. This means the total power produced in a given time interval is given by the average produced multiplied by the total number of inverters","ef2e4be5":"We see a very rough pattern in the daily power production. Let us try to correlate this with the weather data we have","fa2513e5":"The above temperature metric doesn't seem to be a very good indicator of irradiation. Temperature and irradiation seem to have a complicated relationship that could not be modelled linearly","ba0d9971":"The first hint of nonzero radiation is when the sun appears in Line of Sight of the solar panels. The temperature at this point is our \"baseline\" temperature before any solar irradiation, and the maximum temperature is, well, the maximum. The difference between these two temperatures should tell us a measure of irradiation","2384276e":"### Exploration","d7d0b297":"### Repeating these with plant 2 and cross-checking the plants","c223b0b2":"The above plot is only an estimate because we have issues with data taking over the course of days (i.e., some intervals don't have data). We need to take the intersection of timestamps of the inverter output data and the irradiation data to get a better estimate","28bd7227":"#### Day totals over the entire period of 34 days for each inverter"}}