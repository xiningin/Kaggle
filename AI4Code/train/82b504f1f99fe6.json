{"cell_type":{"51f7b274":"code","74452942":"code","0e78bdb4":"code","55a62cd2":"code","55a8c286":"code","e3a8e5a9":"code","3bdd2d38":"code","87568dd5":"code","820b0fd7":"code","ac5d55d1":"code","b74e1aa5":"code","aa86f56d":"markdown","78a16b25":"markdown","6fe9093d":"markdown","89783f62":"markdown"},"source":{"51f7b274":"import numpy as np\nimport pandas as pd\nfrom sklearn import tree\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_validate\nimport seaborn as sns\nimport shap\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\n%matplotlib inline  ","74452942":"dataset = pd.read_excel('..\/input\/covid19\/dataset.xlsx')\nprint(f\"Num rows: {len(dataset)}\")\nprint(f\"Num columns: {len(dataset.columns)}\")","0e78bdb4":"print(f\"Num positive cases: {len(dataset[dataset['SARS-Cov-2 exam result'] == 'positive'])}\")\nprint(f\"Num negative cases: {len(dataset[dataset['SARS-Cov-2 exam result'] == 'negative'])}\")","55a62cd2":"# Drop columns with all NaNs\ndataset.dropna(axis=1, how='all', inplace=True)","55a8c286":"# Predict confirmed COVID-19 cases\nX = dataset.iloc[:,[1] + list(range(6,106))]\nY = dataset.iloc[:,2].apply(lambda result: 1 if result == 'positive' else 0)\n\n# Transform object columns in categories\ntransform_columns = X.select_dtypes(['object']).columns\nfor col in transform_columns:\n    X[col] = X[col].astype('category')\n    X[col] = X[col].cat.codes\n    \n# Replacing NaNs with mean or 0.0\nX = X.fillna(X.median())\n# X = X.fillna(0.0)","e3a8e5a9":"# Model DecisionTreeClassifier\nclf = tree.DecisionTreeClassifier()\nclf_rf = RandomForestClassifier(random_state=42)","3bdd2d38":"scores = cross_validate(clf, X.values, Y.values, cv=5, scoring=('accuracy','precision'))\nprint(\"Test accuracy: %.2f%%\" % (scores['test_accuracy'].mean() * 100.0))\nprint(\"Test precision: %.2f%%\" % (scores['test_precision'].mean() * 100.0))","87568dd5":"scores = cross_validate(clf_rf, X.values, Y.values, cv=5, scoring=('accuracy','precision'))\nprint(\"Test accuracy: %.2f%%\" % (scores['test_accuracy'].mean() * 100.0))\nprint(\"Test precision: %.2f%%\" % (scores['test_precision'].mean() * 100.0))","820b0fd7":"# Feature importance\nclf_rf.fit(X.values, Y.values)\nfeat_importances = pd.Series(clf_rf.feature_importances_, index=X.columns)\nfeat_importances.nlargest(20).plot(kind='barh', figsize=(6, 8), alpha=0.5)","ac5d55d1":"TOP_N_FEATURES = 5\ntop_features = feat_importances.sort_values(ascending=False)[:TOP_N_FEATURES].index\n\nsns.set(style=\"white\", palette=\"muted\", color_codes=True)\nf, axes = plt.subplots(TOP_N_FEATURES, 2, figsize=(10,TOP_N_FEATURES*2))\nsns.despine(left=True)\n\nfor i, feature in enumerate(top_features):\n    sns.distplot(dataset[dataset['SARS-Cov-2 exam result'] == 'negative'][feature], kde=False, ax=axes[i, 0], color='r');\n    axes[i][0].set_title(f'{feature} for negative exams')\n\n    sns.distplot(dataset[dataset['SARS-Cov-2 exam result'] == 'positive'][feature], kde=False, ax=axes[i, 1]);\n    axes[i][1].set_title(f'{feature} for positive exams')\n\nplt.setp(axes, yticks=[])\nplt.tight_layout()","b74e1aa5":"# Same vision in the same plot\nfor i, feature in enumerate(top_features):\n    plt.figure(figsize=(6,2))    \n    plt.title(f'{feature} for SARS-Cov-2 exam result')\n    plt.hist([\n        dataset[dataset['SARS-Cov-2 exam result'] == 'negative'][feature], \n        dataset[dataset['SARS-Cov-2 exam result'] == 'positive'][feature]\n    ], color=['r','b'], alpha=0.5)\n","aa86f56d":"### Data Processing <a class=\"anchor\" id=\"data-processing\"><\/a>","78a16b25":"# Diagnosis of COVID-19 and its clinical spectrum\n### Summary:\n* [Data processing](#data-processing)\n* [Task 1 - Models: Decision Tree, Random Forest](#models)\n* [Visualizations: Feature importance, Hist](#visualization)","6fe9093d":"### Models: Decision Tree, Random Forest <a class=\"anchor\" id=\"models\"><\/a>","89783f62":"### Visualizations: Feature importance, Hist <a class=\"anchor\" id=\"visualization\"><\/a>"}}