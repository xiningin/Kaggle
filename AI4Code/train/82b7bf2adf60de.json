{"cell_type":{"ded4e049":"code","8aff5053":"code","985594e3":"code","d23efa05":"code","e9f09422":"code","82b9e3a7":"code","46e4c41b":"code","d97a3458":"code","cfbd5927":"code","7431c504":"code","83c6b6d5":"code","3598e198":"code","1d72e270":"code","1b255ca7":"code","bd959c79":"code","216481cb":"code","655e91d2":"code","237d5eb4":"code","04df45f9":"code","7cd3133f":"code","e7a47d7c":"code","4f352d0b":"code","e3634ef5":"code","f846af3e":"markdown","32a2f000":"markdown","fd064274":"markdown","8db323a3":"markdown","fdb338e7":"markdown","d94e8e83":"markdown","cce05163":"markdown","f4561682":"markdown","b967ff24":"markdown","19eeeddf":"markdown","ee444cbd":"markdown","4582a3b5":"markdown","ccda4147":"markdown","4422aee6":"markdown","b5519862":"markdown","a27dbdda":"markdown","d3669e04":"markdown","213692d3":"markdown","e9767937":"markdown","06b47954":"markdown","4a541418":"markdown","b48a27a2":"markdown","abcd6a52":"markdown","aa294c33":"markdown","c2061dbb":"markdown","ec654f31":"markdown"},"source":{"ded4e049":"#import the required libraries\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns \nimport matplotlib.ticker as mtick  \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os\nprint(\"Input data file:  \",os.listdir(\"..\/input\"))\n\nsns.set(style = 'white')\n\n","8aff5053":"telco_base_data = pd.read_csv('..\/input\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","985594e3":"print(\"\\n\".join(telco_base_data.columns.values))","d23efa05":"telco_base_data.head()","e9f09422":"telco_base_data.shape","82b9e3a7":"telco_base_data.dtypes","46e4c41b":"\ntelco_base_data.describe()","d97a3458":"telco_data = telco_base_data.copy()","cfbd5927":"telco_data.TotalCharges = pd.to_numeric(telco_data.TotalCharges, errors='coerce')\ntelco_data.isnull().sum()","7431c504":"telco_data.loc[telco_data ['TotalCharges'].isnull() == True]","83c6b6d5":"mean_value_totalcharge = telco_data['TotalCharges'].mean()\ntelco_data.loc[telco_data ['TotalCharges'].isna() == True ,'TotalCharges'] = mean_value_totalcharge\ntelco_data.loc[telco_data ['TotalCharges'] == mean_value_totalcharge]","3598e198":"telco_data.tenure.describe()\nsns.lmplot(x=\"tenure\",y=\"MonthlyCharges\", data=telco_data.head(250), hue=\"Churn\", aspect=2\/1, height=7, fit_reg=False)","1d72e270":"# Get the max tenure\nprint(telco_data['tenure'].max()) #72\n\n# Group the tenure in bins of years\nlabels = [\"{0} y\".format(i) for i in range(0, 6, 1)]\n\ntelco_data['tenure_group'] = pd.cut(telco_data.tenure, range(1, 80, 12), right=False, labels=labels)","1b255ca7":"telco_data['tenure_group'].head(10)","bd959c79":"#drop column customerID and old tenure values\ntelco_data.drop(columns= ['customerID','tenure'], axis=1, inplace=True)\ntelco_data.head()","216481cb":"for i, predictor in enumerate(telco_data.drop(columns=['Churn', 'TotalCharges', 'MonthlyCharges'])):\n    plt.figure(i)\n    sns.countplot(data=telco_data, x=predictor, hue='Churn')","655e91d2":"telco_data['Churn'] = np.where(telco_data.Churn == 'Yes',1,0)","237d5eb4":"telco_data.head()","04df45f9":"telco_data_dummies = pd.get_dummies(telco_data)\ntelco_data_dummies.head()","7cd3133f":"sns.lmplot(data=telco_data_dummies, x='MonthlyCharges', y='TotalCharges', fit_reg=False)","e7a47d7c":"Mth = sns.kdeplot(telco_data_dummies.MonthlyCharges[(telco_data_dummies[\"Churn\"] == 0) ],\n                color=\"Red\", shade = True)\nMth = sns.kdeplot(telco_data_dummies.MonthlyCharges[(telco_data_dummies[\"Churn\"] == 1) ],\n                ax =Mth, color=\"Blue\", shade= True)\nMth.legend([\"No Churn\",\"Churn\"],loc='upper right')\nMth.set_ylabel('Density')\nMth.set_xlabel('Monthly Charges')\nMth.set_title('Monthly charges by churn')","4f352d0b":"Tot = sns.kdeplot(telco_data_dummies.TotalCharges[(telco_data_dummies[\"Churn\"] == 0) ],\n                color=\"Red\", shade = True)\nTot = sns.kdeplot(telco_data_dummies.TotalCharges[(telco_data_dummies[\"Churn\"] == 1) ],\n                ax =Tot, color=\"Blue\", shade= True)\nTot.legend([\"No Churn\",\"Churn\"],loc='upper right')\nTot.set_ylabel('Density')\nTot.set_xlabel('Total Charges')\nTot.set_title('Total charges by churn')","e3634ef5":"#determine correlations\ncorrelations = telco_data_dummies.corr()['Churn']\n# now show the values except for column 'Churn' because correlation of Churn to Churn is 1.0\nplt.figure(figsize=(20,10))\ncorrelations.drop('Churn').sort_values(ascending = False).plot(kind='bar')","f846af3e":"Look at the top 5 records of data","32a2f000":"First we need to load the data into a pandas DataFrame object we call \"telco_base_data\".<br>\nSee the pandas reference for explanation, what a DataFrame is.<br>\nAdditionally, this is a good introduction tutorial on DataFrames:<br> https:\/\/www.datacamp.com\/community\/tutorials\/pandas-tutorial-dataframe-python","fd064274":"## Data Exploration \/ Visualization\n1. Plot distribution of individual predictors by churn using seaborn's *countplot*.\nThis function is automatically counting the values in a column *x* and showing them in relation to the target value 'Churn'  ","8db323a3":"**2.** Convert the target variable 'Churn'  in a binary numeric variable i.e. Yes=1 ; No = 0","fdb338e7":"Check the data types of all the columns. int64 is a number data type (integer values) same as float64 (floating decimal values), object can be complex object or like in our case it is String.","d94e8e83":"**4. Missing Value Imputation**","cce05163":"**2.** Total Charges should be numeric amount. Let's convert it to numerical data type","f4561682":"**11. Build a correlation of all predictors with 'Churn' **\n\nWe determine the correlation of the different variables to 'Churn' by using the DataFrame method *corr* and finally visualize those correlations.","b967ff24":"Check the shape (rows, cols) of the data frame ","19eeeddf":"**Surprising insight ** as higher Churn at lower Total Charges\n\nHowever if we combine the insights of 3 parameters i.e. Tenure, Monthly Charges & Total Charges then the picture is bit clear :- Higher Monthly Charge at lower tenure results into lower Total Charge. Hence, all these 3 factors viz **Higher Monthly Charge**,  **Lower tenure** and **Lower Total Charge** are linkd to **High Churn**.","ee444cbd":"### First Findings \n\nSeniorCitizen is actually a categorical (0 or 1) hence the 25%-50%-75% distribution is not proper\n\n75% customers have tenure less than 55 months\n\nAverage Monthly charges are USD 64.76 whereas 25% customers pay more than USD 89.85 per month","4582a3b5":"**Derived Insight: **\n\n**HIGH** Churn seen in case of  **Month to month contracts**, **No online security**, **No Tech support**, **First year of subscription** and **Fibre Optics Internet**\n\n**LOW** Churn is seens in case of **Long term contracts**, **Subscriptions without internet service** and **The customers engaged for 5+ years**\n\nFactors like **Gender**, **Availability of PhoneService** and **# of multiple lines** have alomost **NO** impact on Churn\n","ccda4147":"**3.** As we can see there are 11 missing values in TotalCharges column. Let's check these records ","4422aee6":"**1.** Create a copy of base data for manipulation & processing","b5519862":"## Check the descriptive statistics of numeric variables\n\nA DataFrame has the method *describe* that applies some basic descriptive statistic functions on the __numeric__ data in the DataFrame.\n","a27dbdda":"**3.** Convert all the categorical variables into dummy variables","d3669e04":"**9. ** Relationship between Monthly Charges and Total Charges","213692d3":"## Data Cleaning\n","e9767937":"# Example of an Exploratory Data Analysis on the example of the Telco Churn Data Set\n\n\nThis notebook demonstrates how to perform a basic EDA on the example of a sample data set containing Telco customer data and showing the customers that left in the last month.\n\nWe will perform the EDA in Python programming language by using common libraries like\n- __NumPy__ for basic operations on numerical data\n- __pandas__: for data reading, analysis and transformation in DataFrames\n- __seaborn__: for visualizing data in charts and plots\n","06b47954":"Since the % of these records compared to total dataset is very low ie 0.15%, we could just drop them from further processing.\nDropping missing values is done with the method *dropna*, e.g. telco_data.dropna(how = 'any', inplace = True)<br><br>\nAlternatively, we can impute the missing values and replace them with the mean of Total Charges.<br>\nFor this, we select the rows where TotalCharges is NaN (Not a Number = missing number value) with the method *isna* and assign the mean of all other values in that column instead.\n\n","4a541418":"**Insight:** Churn is high when Monthly Charges are high","b48a27a2":"Total Charges increase as Monthly Charges increase - as expected.","abcd6a52":"## Get basic information on the shape and nature of the data\nShow the variables included in the data set, which is now the columns in our DataFrame >> telco_base_data.columns","aa294c33":"**6.** Remove columns not required for processing","c2061dbb":"**5.** Data Binning\n\nLet's look at tenure data and recognize the distribution of those values and the correlation to MonthlyCharges.\nWe will do so by plotting them in a scatterplot, here implemented with seaborn function *lmplot*.\n\nFinally we will divide customers into bins based on tenure e.g. for tenure < 12 months: assign a tenure group 0 years, for tenure between 12 to 24 month = 1 Yr, tenure group of 25-36 = 2 Yrs; and so on...","ec654f31":"**10. ** Churn by Monthly Charges and Total Charges\n\nHere we will use Kernel Density Estimate (KDE) plot, a method *kdeplot* for visualizing the distribution of observations in a dataset, analogous to a histogram"}}