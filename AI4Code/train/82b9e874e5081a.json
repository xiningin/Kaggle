{"cell_type":{"fba2c83e":"code","68d1c231":"code","efae07a4":"code","4ff3039b":"code","417636ab":"code","75de61a0":"code","70052df6":"code","24bb8c1d":"code","c61c084c":"code","d59e5056":"code","24bcef6d":"code","68937428":"code","c0836a09":"code","e17cc8f3":"markdown"},"source":{"fba2c83e":"import pandas as pd\n\nComcast_Dataset = pd.read_csv('..\/input\/comcast-telecom-complaints\/Comcast.csv')\nComcast_Dataset = Comcast_Dataset.rename(columns={'Ticket #':'Ticket'})\n\nComcast_Dataset","68d1c231":"#adding new column DateTime\n\nimport datetime\nimport numpy as np\n\nDateTime=[0]*Comcast_Dataset.shape[0]\n\nfor i in range(Comcast_Dataset.shape[0]):\n    D = Comcast_Dataset.Date[i]\n    t = Comcast_Dataset.Time[i]\n    Dtj = D + t  \n    DateTime[i] = datetime.datetime.strptime(Dtj, '%d-%m-%y%I:%M:%S %p')\n\nComcast_Dataset.insert(11, 'DateTime', DateTime)","efae07a4":"#plotting monthly complaints frequency\n\nimport matplotlib.pyplot as plt\n\nfrom collections import Counter\nMonths=[0]*Comcast_Dataset.shape[0]\nfor i in range(Comcast_Dataset.shape[0]):\n    Months[i]=Comcast_Dataset.DateTime[i].month\n    \nMonth=Counter(Months)\nf=[0]*12\n\nfor i in range(12):\n    f[i]=Month[i+1]\nM = ['Jan','Feb','March','April','May','June','July','August','September','October','November','December']\n\nplt.figure(figsize=(10,6))\nplt.title(\"Comcast Monthly Complaints 2015\")\nplt.bar(M,f, color='g')\nplt.xticks(rotation=45)\nplt.xlabel(\"Months\")\nplt.ylabel(\"Number of Complaints\")\nplt.show()","4ff3039b":"#plotting daily complaints\n\nDays=[0]*Comcast_Dataset.shape[0]\nfor i in range(Comcast_Dataset.shape[0]):\n    Days[i] = Comcast_Dataset.DateTime[i].month*30+Comcast_Dataset.DateTime[i].day\n    \nDay=Counter(Days)\nf=[0]*370\ng=[0]*370\n\nfor i in Day:\n    f[i]=Day[i]\n    g[i]=i\n    #print(Day[i])\n\nm = np.arange(30,365,30)\nM = ['Jan','Feb','March','April','May','June','July','August','September','October','November','December']\n\nplt.figure(figsize=(16,6))\nplt.title(\"Comcast Daily Complaints 2015\")\nplt.bar(g,f, color='r')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Number of Complaints\")\nplt.xticks(m,M)#, rotation=45)\nplt.show()","417636ab":"#Creating new status with just two categories - Open & Closed\n\nStatus_New=[0]*Comcast_Dataset.shape[0]\n#Comcast_Dataset.Status.value_counts()\nfor i in range(Comcast_Dataset.shape[0]):\n    if Comcast_Dataset.Status[i]=='Open' or Comcast_Dataset.Status[i]=='Pending':\n        Status_New[i]='Open'\n    else:\n        Status_New[i]='Closed'\nComcast_Dataset.insert(12, 'Status_New', Status_New)\nComcast_Dataset","75de61a0":"#Plotting statewise complaints from Q3\n\nDT=[0]*Comcast_Dataset.shape[0]\nMonth=[0]*Comcast_Dataset.shape[0]\n\nfor i in range(Comcast_Dataset.shape[0]):\n    D = Comcast_Dataset.Date[i]\n    t = Comcast_Dataset.Time[i]\n    Dtj = D + t  \n    DT[i] = datetime.datetime.strptime(Dtj, '%d-%m-%y%I:%M:%S %p')\n    Month[i] = DT[i].month\n\nComcast_Dataset.insert(13, 'Month', Month)\n\nComcast_Dataset_Q3_Q4 = Comcast_Dataset[Comcast_Dataset.Month>=7]\n\nStatewise_Grouping=Comcast_Dataset_Q3_Q4.groupby(['State','Status_New']).size().unstack().fillna(0).sort_values(ascending=False, by='Closed')\nStatewise_Grouping.plot(kind='barh', stacked=True, figsize=(15,10))\nplt.title('Statewise Complaint Status from Q3')\nplt.xlabel('Number of complaints')\nplt.ylabel('States')\nplt.show()\n\nx=Comcast_Dataset_Q3_Q4.State.value_counts()\nprint(\"As seen in the above graph, Florida has maximum number of complaints from Quater 3, having \\\ntotal {} complaints\".format(x['Florida']))","70052df6":"#Plotting Statewise Complaints [Open]\nCG=Comcast_Dataset_Q3_Q4.groupby(['State','Status_New']).size().unstack().fillna(0).Open.sort_values(ascending=False)\nCG.plot.pie(radius=2,autopct='%1.1f%%')\nplt.title(\"Open Complaints\")\nplt.show()\nprint(\"The above pie plot represents the statewise percentage of complaints that aren't resolved yet.\")","24bb8c1d":"#Percentage of Complaints resolved till date, which are recived via Internet and Calls\n\nComcast_Dataset['Received Via'][Comcast_Dataset.Status_New=='Closed'].value_counts().plot.pie(radius=2,autopct='%1.1f%%', startangle = 125)\nplt.show()","c61c084c":"#Providing table with frequency of type of complaints\n\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nss=stopwords.words('english')\nss.append('comcast')\n\ndef StringCleanup(s):\n    z=' '.join(i for i in s.lower().split() if i not in ss)\n    z=''.join(i for i in z if i not in string.punctuation)\n    z=''.join(i for i in z if i not in string.digits)\n    z=' '.join(WordNetLemmatizer().lemmatize(i) for i in z.split())\n    return (z)\n\nCleaned_C = [StringCleanup(i).split() for i in Comcast_Dataset['Customer Complaint']]","d59e5056":"from gensim import corpora\nfrom gensim.models import LdaModel\n\nD = corpora.Dictionary(Cleaned_C)\nDM = [D.doc2bow(i) for i in Cleaned_C]\nLM = LdaModel(DM, num_topics=10, id2word=D, passes=30)","24bcef6d":"# Testing the gensim model to get word similarity values\n\npd.DataFrame(LM.show_topic(0,topn=10), columns=('Complaint Subject', 'Word Similarity Value'))","68937428":"# Retreiving Top Complaint Categories\n\ntop_complaints = pd.DataFrame([[j[0] for j in LM.show_topic(k,topn=5)] for k in range(10)]).T\ntop_complaints.columns = [f'Top-{i}' for i in range(1,11)]\ntop_complaints","c0836a09":"#<<<---------------------------------THE END----------------------------------------->>>","e17cc8f3":"# Improving customer experience for Comcast"}}