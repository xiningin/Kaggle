{"cell_type":{"f93ef91f":"code","ce9d1690":"code","8be9679c":"code","b852b4f5":"code","d0f4a99f":"code","7d638c28":"code","220c01ce":"code","3fd3c46e":"code","6a2e73fe":"code","4d733325":"code","65683a1d":"code","bf8f9d45":"code","4716f858":"code","0facc6b1":"code","c750b30e":"markdown"},"source":{"f93ef91f":"import numpy as np                      #for numerical computation\nimport pandas as pd                     #for data analysis and data manipulation\nimport matplotlib.pyplot as plt         #for data visualization\nimport seaborn as sns                   #for data visualization\nimport tensorflow as tf                 #for machine learning and deep neural network","ce9d1690":"#Import Keras\nfrom tensorflow import keras","8be9679c":"# Create synthetic dataset\ndef synthetic_data(beta, beta0, sample_size, noise_sigma, seed):  \n    #Model: y = X beta + beta0 + noise\n    X = tf.zeros((sample_size, beta.shape[0]))\n    X = tf.random.normal(shape = X.shape, mean = 0, stddev = 1.0, seed = seed)\n    y = tf.matmul(X, tf.reshape(beta, (-1, 1))) + beta0 + tf.random.normal(shape = (sample_size, 1), mean = 0, stddev = noise_sigma, seed = seed)\n    return X, y\n\nbeta  = tf.constant([6.2, 5, 9])\nbeta0 = tf.constant(6.1)\nsample_size = 1000\nnoise_sigma = 0.1\nseed = 123\nfeatures, response = synthetic_data(beta, beta0, sample_size, noise_sigma, seed)","b852b4f5":"n_features = features.shape[1]\nn_features","d0f4a99f":"#Define the model architecture\nmodel = keras.Sequential()\nmodel.add(keras.layers.Dense(1, activation = 'linear', input_dim = n_features))\nmodel.summary() ","7d638c28":"#Configure the model\nmodel.compile(optimizer = 'SGD', loss = 'mean_squared_error', metrics = ['mean_squared_error'])","220c01ce":"#Train the model w\/ epochs = 10\nmodel.fit(features, response, epochs = 10)","3fd3c46e":"model.get_weights()","6a2e73fe":"beta","4d733325":"beta0","65683a1d":"#Predict on Train Dataset\npred_value = model.predict(features)\n","bf8f9d45":"#Absolute Error of Prediction on Train Dataset\nabs_err = abs(response - pred_value)\nabs_err = pd.Series(abs_err.numpy()[:, 0])\nabs_err","4716f858":"#Absolute error mean, median, sd, IQR, max, min\nimport pandas as pd\nfrom scipy.stats import iqr\nmodel_summary = pd.DataFrame({'Mean of AbsErrors':    abs_err.mean(),\n                              'Median of AbsErrors' : abs_err.median(),\n                              'SD of AbsErrors' :     abs_err.std(),\n                              'IQR of AbsErrors':     iqr(abs_err),\n                              'Min of AbsErrors':     abs_err.min(),\n                              'Max of AbsErrors':     abs_err.max()}, \n                             index = ['Linear Reg'])\nmodel_summary","0facc6b1":"#Actual vs. Prediction\nplt.scatter(x = response, y = pred_value, alpha = 0.3)\nplt.xlabel('Actual')\nplt.ylabel('Prediction')\nplt.title('Actual vs. Prediction')\n\n#Add 45 degree line\nxp = np.linspace(response.numpy().min(), response.numpy().max(), 100)\nplt.plot(xp, xp, 'k', alpha = 0.9, linewidth = 2, color = 'red')","c750b30e":"### In this notebook I want to show you How can we build Regression Task With Keras"}}