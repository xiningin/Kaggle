{"cell_type":{"c8a9e51f":"code","e5ee6721":"code","2b738aef":"code","9bf5430a":"code","7656bacb":"code","f2f698e5":"code","646466c3":"code","af0178f7":"code","1c5e1298":"code","d35d66d1":"code","48d69030":"code","29c885f6":"code","d8feec6b":"code","1a8e89b4":"code","724f28cd":"code","aa380ed0":"code","b1f5c372":"code","107a6944":"code","b3434099":"code","e4a5015c":"code","671608ff":"code","8a041731":"code","2e21bc6f":"code","4280025a":"code","9588da32":"code","73b7f5aa":"code","31a86420":"code","ff92b549":"code","f4f58e30":"code","22381722":"code","c77e78c8":"code","7150e6ca":"code","30d65b64":"code","461fa5cc":"code","34102425":"code","ed716d8b":"markdown","d2dd31cd":"markdown","42b3aeec":"markdown","a700da77":"markdown","fcd266a5":"markdown","8a9f5151":"markdown","a36f004b":"markdown","932f4c0d":"markdown"},"source":{"c8a9e51f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n### Visualization ###\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n### Utils ###\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e5ee6721":"movement_cols = ['orientation_X', 'orientation_Y', 'orientation_Z',\n                 'orientation_W', 'angular_velocity_X', 'angular_velocity_Y',\n                 'angular_velocity_Z', 'linear_acceleration_X', 'linear_acceleration_Y', 'linear_acceleration_Z']\nlabel = ['surface']\n\ntrain = pd.read_csv('..\/input\/carrercon-join-of-x-and-y-train\/x_y_train\/x_y_train.csv')","2b738aef":"surface_distribution = (train\n                       .groupby('surface')\n                       .size()\n                       .to_frame('count')\n                       .reset_index()\n                       .sort_values('count', ascending=True))\n\ndata = [go.Bar(\n            y=surface_distribution['surface'],\n            x=surface_distribution['count'],\n            orientation = 'h',\n            text=surface_distribution['count']\n    )]\n\nlayout = go.Layout(\n    title='Distribution of surfaces',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","9bf5430a":"metrics = (train[movement_cols+label]\n                   .groupby('surface')\n                   .agg(['min','max','mean', 'std'])\n              )","7656bacb":"surfaces = list(surface_distribution.sort_values('surface').surface)\nsurfaces","f2f698e5":"metrics","646466c3":"metrics.columns","af0178f7":"def bars(df, col_x, col_y):\n    return go.Bar(\n            y=df[col_y],\n            x=df[col_x],\n            orientation = 'h',\n            text=df[col_x],\n            name=col_x\n    )","1c5e1298":"metrics_name = ['std', 'mean', 'max', 'min']","d35d66d1":"orientation_x = metrics.orientation_X\norientation_x['surface'] = surfaces\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(orientation_x, m, 'surface'))\n\nlayout = go.Layout(\n    title='Orientation X',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","48d69030":"orientation_y = metrics.orientation_Y\norientation_y['surface'] = surfaces\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(orientation_y, m, 'surface'))\n\nlayout = go.Layout(\n    title='Orientation Y',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","29c885f6":"orientation_Z = metrics.orientation_Z\norientation_Z['surface'] = surfaces\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(orientation_Z, m, 'surface'))\n\nlayout = go.Layout(\n    title='Orientation Z',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","d8feec6b":"orientation_W = metrics.orientation_W\norientation_W['surface'] = surfaces\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(orientation_W, m, 'surface'))\n\nlayout = go.Layout(\n    title='Orientation W',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","1a8e89b4":"angular_velocity_X = metrics.angular_velocity_X\nangular_velocity_X['surface'] = surfaces\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(angular_velocity_X, m, 'surface'))\n\nlayout = go.Layout(\n    title='Angular velocity X',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","724f28cd":"angular_velocity_Y = metrics.angular_velocity_Y\nangular_velocity_Y['surface'] = surfaces\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(angular_velocity_Y, m, 'surface'))\n\nlayout = go.Layout(\n    title='Angular velocity Y',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","aa380ed0":"angular_velocity_Z = metrics.angular_velocity_Z\nangular_velocity_Z['surface'] = surfaces\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(angular_velocity_Z, m, 'surface'))\n\nlayout = go.Layout(\n    title='Angular velocity Z',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","b1f5c372":"linear_acceleration_X = metrics.linear_acceleration_X\nlinear_acceleration_X['surface'] = surfaces\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(linear_acceleration_X, m, 'surface'))\n\nlayout = go.Layout(\n    title='Linear Acceleration X',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","107a6944":"linear_acceleration_Y = metrics.linear_acceleration_Y\nlinear_acceleration_Y['surface'] = surfaces\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(linear_acceleration_Y, m, 'surface'))\n\nlayout = go.Layout(\n    title='Linear Acceleration Y',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","b3434099":"linear_acceleration_Z = metrics.linear_acceleration_Z\nlinear_acceleration_Z['surface'] = surfaces\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(linear_acceleration_Z, m, 'surface'))\n\nlayout = go.Layout(\n    title='Linear Acceleration Z',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","e4a5015c":"new_cat = {'carpet': 'bad', 'concrete': 'good', 'fine_concrete': 'good',\n           'hard_tiles': 'good', 'hard_tiles_large_space': 'bad','soft_pvc': 'medium',\n           'soft_tiles': 'medium', 'tiled': 'bad', 'wood': 'good'}","671608ff":"train['type_surface'] = train['surface'].map(new_cat)","8a041731":"train.head()","2e21bc6f":"metrics_new_cat = (train[movement_cols+['type_surface']]\n                   .groupby('type_surface')\n                   .agg(['min','max','mean', 'std'])\n              )","4280025a":"type_surface = ['bad', 'good', 'medium']","9588da32":"metrics_new_cat","73b7f5aa":"orientation_x = metrics_new_cat.orientation_X\norientation_x['type_surface'] = type_surface\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(orientation_x, m, 'type_surface'))\n\nlayout = go.Layout(\n    title='Orientation X',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","31a86420":"orientation_Y = metrics_new_cat.orientation_Y\norientation_Y['type_surface'] = type_surface\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(orientation_Y, m, 'type_surface'))\n\nlayout = go.Layout(\n    title='Orientation Y',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","ff92b549":"orientation_Z = metrics_new_cat.orientation_Z\norientation_Z['type_surface'] = type_surface\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(orientation_Z, m, 'type_surface'))\n\nlayout = go.Layout(\n    title='Orientation Z',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","f4f58e30":"orientation_W = metrics_new_cat.orientation_W\norientation_W['type_surface'] = type_surface\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(orientation_W, m, 'type_surface'))\n\nlayout = go.Layout(\n    title='Orientation W',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","22381722":"angular_velocity_X = metrics_new_cat.angular_velocity_X\nangular_velocity_X['type_surface'] = type_surface\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(angular_velocity_X, m, 'type_surface'))\n\nlayout = go.Layout(\n    title='Angular velocity X',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","c77e78c8":"angular_velocity_Y = metrics_new_cat.angular_velocity_Y\nangular_velocity_Y['type_surface'] = type_surface\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(angular_velocity_Y, m, 'type_surface'))\n\nlayout = go.Layout(\n    title='Angular velocity Y',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","7150e6ca":"angular_velocity_Z = metrics_new_cat.angular_velocity_Z\nangular_velocity_Z['type_surface'] = type_surface\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(angular_velocity_Z, m, 'type_surface'))\n\nlayout = go.Layout(\n    title='Angular velocity Z',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","30d65b64":"linear_acceleration_X = metrics_new_cat.linear_acceleration_X\nlinear_acceleration_X['type_surface'] = type_surface\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(linear_acceleration_X, m, 'type_surface'))\n\nlayout = go.Layout(\n    title='Linear Acceleration X',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","461fa5cc":"linear_acceleration_Y = metrics_new_cat.linear_acceleration_Y\nlinear_acceleration_Y['type_surface'] = type_surface\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(linear_acceleration_Y, m, 'type_surface'))\n\nlayout = go.Layout(\n    title='Linear Acceleration Y',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","34102425":"linear_acceleration_Z = metrics_new_cat.linear_acceleration_Y\nlinear_acceleration_Z['type_surface'] = type_surface\n\ndata = []\n\nfor m in metrics_name:\n    data.append(bars(linear_acceleration_Z, m, 'type_surface'))\n\nlayout = go.Layout(\n    title='Linear Acceleration Z',\n    titlefont=dict(size=20),\n    width=800,\n    height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","ed716d8b":"# CareerCon 2019 - Help Navigate Robots\n\nRobots are smart\u2026 by design. To fully understand and properly navigate a task, however, they need input about their environment.\n\n**Objective:** Improve the navigation of robots without assistance across many different surfaces, so they won\u2019t fall down on the job.\n\n**Study:** In this notebook I do an analysis with the data to show that there are different patterns for different surfaces, I also purpose a new categorization based in how easy is to move in a given surface.\n\n### Content:\n1. [Information about the surface](#Information-about-the-surface);\n2. [Surface distribution](#Surface-distribution);\n3. [Correlation between surface and speed](#Correlation-between-surface-and-speed);\n4. [New surface categories](#New-surface-categories)\n5. [Results](#Results)","d2dd31cd":"## Correlation between surface and speed\nIn order to prove the hypothesis that the floor is correlated of how well will the robot move.","42b3aeec":"There's a significant difference for the mean value of *good* surfaces in : orientation_Y, orientation_Z, angular_velocity_X, angular_velocity_Y, \nangular_velocity_Z, linear_acceleration_X.\n","a700da77":"## Results\n\nAs expected, it was provode that the kind of surface impacts the movement metrics. Besides that, those surfaces can be futher classified in *good*, *medium* and *bad*.","fcd266a5":"## New surface categories\n\nNow let's try and creat new categories based in how hard is to move in each floor.","8a9f5151":"## Information about the surface\n\n**Carpet:** It's really bad.\n![image](https:\/\/images-na.ssl-images-amazon.com\/images\/I\/61%2B2hk3eDRL.jpg)\n\n**Concrete:** Best floor.\n![image](https:\/\/www.floormastervt.com\/wp-content\/uploads\/2016\/05\/polish1.jpg?x40097)\n\n**Fine concrete:** Good superficies to work with.\n![image](https:\/\/flowingstone.co.nz\/wp-content\/uploads\/2016\/08\/Concrete-Types-1.jpeg)\n\n**Hard tiles:** Can be difficult depending of how the tittle can be organized.\n* Good: ![image](https:\/\/previews.123rf.com\/images\/mehaniq\/mehaniq1704\/mehaniq170400385\/75713143-the-texture-of-solid-granite-tiles-hard-and-slippery-gray-granite-surface-with-a-relief-discharge-wh.jpg)\n* Bad: ![image](https:\/\/www.cmmonline.com\/images\/content\/magazines\/2015\/06-2015\/06-2015-tips-detail.jpg?Action=thumbnail&Width=750&Height=392&algorithm=fill_proportional)\n\n**Hard tiles large:** Fits[](http:\/\/) in the *bad* case for surface hard tile.\n\n**Soft PVC:** Better than soft tiles but depending of the weight of the robot.\n![image](https:\/\/sc01.alicdn.com\/kf\/HTB1N.KJKpXXXXbfXFXXq6xXFXXX9\/Soft-PVC-kindergarten-flooring-in-bright-color.jpg_350x350.jpg)\n\n**Soft tiles:** Not as bad as the carpet but it's lower and can have irregularities.\n![image](https:\/\/assets.incstores.com\/products\/reviews\/5-8%20Soft%20Tiles-6.jpg)\n\n**Tiled:** Bad since there will be many space.\n![image](https:\/\/us.123rf.com\/450wm\/ericmilos\/ericmilos1102\/ericmilos110200013\/8713937-tiled-concrete-pavement.jpg?ver=6)\n\n**Wood:** Very good surface, except in cases that the join is uneven.\n![image](https:\/\/static.flooringsupplies.co.uk\/images\/grain\/CAS1472.jpg)","a36f004b":"## Surface distribution\n\n* Most surfaces are concrete, what is a good surface for the robot to move.","932f4c0d":"The charts above prove that the metrics are different for each kind of surface."}}