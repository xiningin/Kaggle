{"cell_type":{"83e20056":"code","bfc571cc":"code","ab886dba":"code","5f9025f8":"code","d8c15a05":"code","36f957f6":"code","e6234972":"code","8773cf1c":"code","40c3d84c":"code","2ae386e2":"code","f2225e90":"code","530d3d8b":"code","d4b7401f":"code","e50994d2":"code","b95fb513":"code","381e3a71":"code","3b036649":"code","dccee669":"code","d0a42ded":"code","bc5a0077":"code","98c8d003":"code","82e8e584":"code","bb06c7b0":"code","429d971e":"code","f093ab89":"code","dcc9f827":"code","5043b630":"code","26341bfa":"markdown","2d06aaa3":"markdown","f3000519":"markdown","dd2c6174":"markdown","787589bb":"markdown","5b294ead":"markdown","5d61b8f3":"markdown"},"source":{"83e20056":"import random\nimport nltk\nimport pandas as pd\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.stem import WordNetLemmatizer","bfc571cc":"## Reading the given dataset\nspam = pd.read_csv(\"SMSSpamCollection.txt\", sep = \"\\t\", names=[\"label\", \"message\"])","ab886dba":"print(spam.head())","5f9025f8":"## Converting the read dataset in to a list of tuples, each tuple(row) contianing the message and it's label\ndata_set = []\nfor index,row in spam.iterrows():\n    data_set.append((row['message'], row['label']))","d8c15a05":"print(data_set[:5])","36f957f6":"print(len(data_set))","e6234972":"## initialise the inbuilt Stemmer and the Lemmatizer\nstemmer = PorterStemmer()\nwordnet_lemmatizer = WordNetLemmatizer()","8773cf1c":"def preprocess(document, stem=True):\n    'changes document to lower case, removes stopwords and lemmatizes\/stems the remainder of the sentence'\n\n    # change sentence to lower case\n    document = document.lower()\n\n    # tokenize into words\n    words = word_tokenize(document)\n\n    # remove stop words\n    words = [word for word in words if word not in stopwords.words(\"english\")]\n\n    if stem:\n        words = [stemmer.stem(word) for word in words]\n    else:\n        words = [wordnet_lemmatizer.lemmatize(word, pos='v') for word in words]\n\n    # join words to make sentence\n    document = \" \".join(words)\n\n    return document","40c3d84c":"## - Performing the preprocessing steps on all messages\nmessages_set = []\nfor (message, label) in data_set:\n    words_filtered = [e.lower() for e in preprocess(message, stem=False).split() if len(e) >= 3]\n    messages_set.append((words_filtered, label))","2ae386e2":"print(messages_set[:5])","f2225e90":"## - creating a single list of all words in the entire dataset for feature list creation\n\ndef get_words_in_messages(messages):\n    all_words = []\n    for (message, label) in messages:\n      all_words.extend(message)\n    return all_words","530d3d8b":"## - creating a final feature list using an intuitive FreqDist, to eliminate all the duplicate words\n## Note : we can use the Frequency Distribution of the entire dataset to calculate Tf-Idf scores like we did earlier.\n\ndef get_word_features(wordlist):\n\n    #print(wordlist[:10])\n    wordlist = nltk.FreqDist(wordlist)\n    word_features = wordlist.keys()\n    return word_features","d4b7401f":"## - creating the word features for the entire dataset\nword_features = get_word_features(get_words_in_messages(messages_set))\nprint(len(word_features))","e50994d2":"## - creating slicing index at 80% threshold\nsliceIndex = int((len(messages_set)*.8))","b95fb513":"## - shuffle the pack to create a random and unbiased split of the dataset\nrandom.shuffle(messages_set)","381e3a71":"train_messages, test_messages = messages_set[:sliceIndex], messages_set[sliceIndex:]","3b036649":"len(train_messages)\nlen(test_messages)","dccee669":"## creating a LazyMap of feature presence for each of the 8K+ features with respect to each of the SMS messages\ndef extract_features(document):\n    document_words = set(document)\n    features = {}\n    for word in word_features:\n        features['contains(%s)' % word] = (word in document_words)\n    return features","d0a42ded":"## - creating the feature map of train and test data\n\ntraining_set = nltk.classify.apply_features(extract_features, train_messages)\ntesting_set = nltk.classify.apply_features(extract_features, test_messages)","bc5a0077":"print(training_set[:5])","98c8d003":"print('Training set size : ', len(training_set))\nprint('Test set size : ', len(testing_set))","82e8e584":"## Training the classifier with NaiveBayes algorithm\nspamClassifier = nltk.NaiveBayesClassifier.train(training_set)","bb06c7b0":"## - Analyzing the accuracy of the test set\nprint(nltk.classify.accuracy(spamClassifier, training_set))","429d971e":"## Analyzing the accuracy of the test set\nprint(nltk.classify.accuracy(spamClassifier, testing_set))","f093ab89":"## Testing a example message with our newly trained classifier\nm = 'CONGRATULATIONS!! As a valued account holder you have been selected to receive a \u00a3900 prize reward! Valid 12 hours only.'\nprint('Classification result : ', spamClassifier.classify(extract_features(m.split())))","dcc9f827":"## Priting the most informative features in the classifier\nprint(spamClassifier.show_most_informative_features(50))","5043b630":"## storing the classifier on disk for later usage\nimport pickle\nf = open('nb_spam_classifier.pickle', 'wb')\npickle.dump(spamClassifier,f)\nprint('Classifier stored at ', f.name)\nf.close()","26341bfa":"### Preparing to create feature maps for train and test data","2d06aaa3":"### Preparing to create features","f3000519":"### Training","dd2c6174":"### Evaluation","787589bb":"### SPAM Ham Detection","5b294ead":"### Preprocessing","5d61b8f3":"### Preparing to create a train and test set"}}