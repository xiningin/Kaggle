{"cell_type":{"0da48b4d":"code","141f53e6":"code","a3ac762c":"code","7b8846fb":"code","feab7ec4":"code","91e4ae0c":"code","27a250a1":"code","4e2e7f79":"code","7c832f35":"code","af6900e4":"code","71f334d6":"code","5f1c96e6":"code","dee9e443":"code","f4aa6e89":"code","6ad7fa36":"code","190ad72d":"code","7721847e":"code","43174654":"code","321edaec":"code","af945394":"code","096cbe84":"code","35e78776":"code","4abfc02d":"code","a27d6c68":"code","a50088ab":"code","059e2cb8":"code","29baaf33":"code","6db8b99b":"code","df835c07":"code","53529cac":"code","16937afe":"markdown","3fcd8801":"markdown","c561feb0":"markdown","92ebda51":"markdown","80df2ca5":"markdown","36caa445":"markdown","65375145":"markdown","175eb0b4":"markdown","a28a81b8":"markdown","d35d8789":"markdown","fc46997f":"markdown","c0492910":"markdown","6557e843":"markdown","5959e80e":"markdown","ed27328a":"markdown","1939d95c":"markdown","21416481":"markdown","0f42da53":"markdown","d3f25251":"markdown","a4531dd4":"markdown"},"source":{"0da48b4d":"import numpy as np\nimport pandas as pd\nimport random as rnd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.model_selection import train_test_split","141f53e6":"df=pd.read_csv('..\/input\/Iris.csv')\ndf.head()","a3ac762c":"df.info()","7b8846fb":"df.describe()","feab7ec4":"species_map={'Iris-versicolor':0,'Iris-setosa':1,'Iris-virginica':2}\ndf['Species']=df['Species'].replace(species_map)\ndf.head()","91e4ae0c":"train=df.sample(frac=0.7,random_state=200)\ntest=df.drop(train.index)\n","27a250a1":"train=train.reset_index()\ntrain=train[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm','Species']]\ntrain.info()","4e2e7f79":"test=test.reset_index()\ntest=test[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm','Species']]\ntest.info()","7c832f35":"train.head()","af6900e4":"train.groupby(['Species']).count()","71f334d6":"sns.set(style=\"whitegrid\", color_codes=True)\nnp.random.seed(sum(map(ord, \"categorical\")))\nsns.boxplot(data=train[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']], orient=\"h\");","5f1c96e6":"sns.violinplot(x=train['Species'], y=train['SepalLengthCm']);","dee9e443":"sns.violinplot(x=train['Species'], y=train['SepalWidthCm']);","f4aa6e89":"sns.violinplot(x=train['Species'], y=train['PetalLengthCm']);","6ad7fa36":"sns.violinplot(x=train['Species'], y=train['PetalWidthCm']);","190ad72d":"sns.FacetGrid(train, hue=\"Species\", size=5).map(plt.scatter, \"SepalLengthCm\", \"SepalWidthCm\").add_legend()","7721847e":"sns.FacetGrid(train, hue=\"Species\", size=5).map(plt.scatter, \"PetalLengthCm\", \"PetalWidthCm\").add_legend()","43174654":"train.columns","321edaec":"X_train=train[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']]\n#X_train=train[[ 'PetalLengthCm', 'PetalWidthCm']]\n\nY_train=train['Species']\n\nX_test=test[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']]\n#X_test=test[[ 'PetalLengthCm', 'PetalWidthCm']]\n\nY_test=test['Species']\n\nX_train.shape, Y_train.shape, X_test.shape, Y_test.shape","af945394":"# Logistic Regression\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_test,Y_test) * 100, 2)\nacc_log\n","096cbe84":"coeff_df = pd.DataFrame(X_train.columns)\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\ncoeff_df.sort_values(by='Correlation', ascending=False)\n#coeff_df","35e78776":"# Support Vector Machines\n\nsvc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_test,Y_test) * 100, 2)\nacc_svc","4abfc02d":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_test,Y_test) * 100, 2)\nacc_knn","a27d6c68":"# Gaussian Naive Bayes\n\ngaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_test,Y_test) * 100, 2)\nacc_gaussian","a50088ab":"# Perceptron\n\nperceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_test,Y_test) * 100, 2)\nacc_perceptron","059e2cb8":"# Linear SVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_test,Y_test) * 100, 2)\nacc_linear_svc","29baaf33":"# Stochastic Gradient Descent\n\nsgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_test,Y_test) * 100, 2)\nacc_sgd","6db8b99b":"# Decision Tree\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_test,Y_test) * 100, 2)\nacc_decision_tree","df835c07":"# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_test,Y_test) * 100, 2)\nacc_random_forest","53529cac":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree'],\n    'Test Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_linear_svc, acc_decision_tree]})\nmodels.sort_values(by='Test Score', ascending=False)","16937afe":"**LINEAR SVC**","3fcd8801":"## 4.2 Modelling","c561feb0":"**NAIVE BAYES**","92ebda51":" **As till now , we have divided our dataset into test and train.Now we will work on train dataset only.**","80df2ca5":"**DECISION TREE**","36caa445":"# 1. Loading Libraries","65375145":"# **2. Reading Data**","175eb0b4":"## 4.3 Comparison of Models","a28a81b8":"**PERCEPTRON**","d35d8789":"**RANDOM FOREST**","fc46997f":"**LOGISTIC REGRESSION**","c0492910":"## 4.1 Splitting Dataset in train and test","6557e843":"**SUPPORT VECTOR MACHINE**","5959e80e":"# **4. Various Models and Predictions**","ed27328a":"**We can see that length in directly related to corresponding classes while width is inversely related.**","1939d95c":"# 3. Data Analysis & Visualisation","21416481":"**SGD**","0f42da53":"# KNN is giving the best accuracy for this dataset.","d3f25251":"# Accuracy=95.56%","a4531dd4":"**KNN**"}}