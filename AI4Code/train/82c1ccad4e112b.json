{"cell_type":{"789f593c":"code","e9281d0c":"code","460b3911":"code","2e973dcc":"code","028ed5a5":"code","df509fd0":"code","da0e8312":"code","51d09c36":"code","d3c75af2":"code","049a00b2":"code","668863fe":"code","801bdd9e":"markdown","4f34e45f":"markdown","e9a7e2c8":"markdown","c8b4bd28":"markdown","d224b744":"markdown","1a7bc7d3":"markdown"},"source":{"789f593c":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.ensemble import RandomForestRegressor","e9281d0c":"data = pd.read_csv('..\/input\/predicting-heat-flux\/Data_CHF_Zhao_2020_ATE.csv')","460b3911":"data","2e973dcc":"data.info()","028ed5a5":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Drop id and author columns\n    df = df.drop(['id', 'author'], axis=1)\n    \n    # Shuffle the dataset\n    df = df.sample(frac=1.0, random_state=1)\n    \n    # Split df into X and y\n    y = df['chf_exp [MW\/m2]']\n    X = df.drop('chf_exp [MW\/m2]', axis=1)\n    \n    return X, y","df509fd0":"X, y = preprocess_inputs(data)","da0e8312":"X","51d09c36":"y","d3c75af2":"def build_model():\n    \n    nominal_transformer = Pipeline(steps=[\n        ('onehot', OneHotEncoder(sparse=False, handle_unknown='ignore'))\n    ])\n    \n    preprocessor = ColumnTransformer(transformers=[\n        ('nominal', nominal_transformer, ['geometry'])\n    ], remainder='passthrough')\n    \n    model = Pipeline(steps=[\n        ('preprocessor', preprocessor),\n        ('regressor', RandomForestRegressor(random_state=1))\n    ])\n    \n    return model","049a00b2":"kf = KFold(n_splits=5)\n\nrmses = []\n\nfor train_idx, test_idx in kf.split(X):\n    \n    X_train = X.iloc[train_idx, :]\n    X_test = X.iloc[test_idx, :]\n    y_train = y.iloc[train_idx]\n    y_test = y.iloc[test_idx]\n    \n    model = build_model()\n    model.fit(X_train, y_train)\n    \n    y_pred = model.predict(X_test)\n    \n    rmse = np.sqrt(np.mean((y_test - y_pred)**2))\n    \n    rmses.append(rmse)\n\nfinal_rmse = np.mean(rmses)","668863fe":"print(\"RMSE: {:.2f}\".format(final_rmse))","801bdd9e":"# Task for Today  \n\n***\n\n## Critical Heat Flux Prediction  \n  \nGiven *data about various experimental conditions*, let's try to predict the **critical heat flux** for a given experiment.  \n  \nWe will use a random forest regression model to make our predictions.","4f34e45f":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/rK_Y9DjQ8js","e9a7e2c8":"# Training","c8b4bd28":"# Getting Started","d224b744":"# Building Pipeline","1a7bc7d3":"# Preprocessing"}}