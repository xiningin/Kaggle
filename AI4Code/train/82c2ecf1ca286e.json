{"cell_type":{"4c45969b":"code","e40b5ba2":"code","bd9f1696":"code","ff46b6f5":"code","74079d78":"code","1757a666":"code","03ee6a11":"code","0a606aee":"code","1946e990":"code","a996fe39":"code","891c4be7":"code","7e067301":"code","894df4d6":"code","436d947c":"code","4b721dcd":"code","954cc860":"code","e64464ee":"code","521f810f":"code","7c415184":"code","f05f480c":"code","1b23d001":"code","316cd1c3":"code","96e94669":"code","48052f96":"code","025a87d1":"code","45f39ae1":"code","b0de215e":"code","83a1724b":"code","2d61fb0b":"code","d46f4a85":"code","971faf8d":"code","0dcbecb0":"code","8a8fc895":"code","e81154f9":"code","7b0df3ed":"code","7408b98a":"code","52e68bad":"code","f6b1ca61":"code","a80f29aa":"code","1e596115":"code","1b495447":"code","13812b57":"code","952b7512":"code","8f2f03f5":"code","b396d70c":"code","56df6650":"code","f53bfa5a":"code","240ba837":"markdown","6673f87c":"markdown","8b8ee841":"markdown","d7e7a5b8":"markdown","87cc5a6c":"markdown","3213458b":"markdown","45b3a74c":"markdown","e279bb37":"markdown","e6a03d31":"markdown","42ceb690":"markdown","15a558e7":"markdown","ba5ef171":"markdown","ad165299":"markdown","ad51ac68":"markdown"},"source":{"4c45969b":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/titanic\/train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, \n                                                  target='Survived', \n                                                  id_name='PassengerId')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","e40b5ba2":"### \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\nimport pandas as pd\nimport numpy as np\nimport sklearn\nfrom sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier, RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier","bd9f1696":"X_train.head()","ff46b6f5":"X_test.head()","74079d78":"y_train.head()","1757a666":"X_train.info()","03ee6a11":"X_train.describe()","0a606aee":"X_test.info()","1946e990":"temp = X_train.copy()\ntemp['target'] = y_train.iloc[:,1]","a996fe39":"temp.head()","891c4be7":"temp['Embarked'].describe()","7e067301":"temp['Embarked'] = temp['Embarked'].fillna('S') # \ucd5c\ube48\uac12 \ub300\uccb4","894df4d6":"temp.groupby(['Pclass', 'Sex']).median()['Age'] # \ud074\ub798\uc2a4\ubcc4 \ucc28\uc774\uac00 \uc788\uc73c\ubbc0\ub85c \ud574\ub2f9 \uc911\uc704\uac12\uc73c\ub85c \ub300\uccb4","436d947c":"temp.loc[(temp['Pclass']==1)&(temp['Sex']=='female')&(temp['Age'].isna()),'Age'] = 35\ntemp.loc[(temp['Pclass']==1)&(temp['Sex']=='male')&(temp['Age'].isna()),'Age'] = 38\ntemp.loc[(temp['Pclass']==2)&(temp['Sex']=='female')&(temp['Age'].isna()),'Age'] = 30\ntemp.loc[(temp['Pclass']==2)&(temp['Sex']=='male')&(temp['Age'].isna()),'Age'] = 30\ntemp.loc[(temp['Pclass']==3)&(temp['Sex']=='female')&(temp['Age'].isna()),'Age'] = 19\ntemp.loc[(temp['Pclass']==3)&(temp['Sex']=='male')&(temp['Age'].isna()),'Age'] = 25","4b721dcd":"temp = pd.concat([temp, pd.get_dummies(temp.Sex).iloc[:,:-1]], axis = 1)\ntemp = pd.concat([temp, pd.get_dummies(temp.Embarked).iloc[:,:-1]], axis = 1)\n\ntemp.drop(['Name', 'Cabin', 'Sex', 'Embarked', 'Ticket'],axis=1, inplace=True)","954cc860":"X_test['Embarked'] = X_test['Embarked'].fillna('S')\n\nX_test.loc[(X_test['Pclass']==1)&(X_test['Sex']=='female')&(X_test['Age'].isna()),'Age'] = 35\nX_test.loc[(X_test['Pclass']==1)&(X_test['Sex']=='male')&(X_test['Age'].isna()),'Age'] = 38\nX_test.loc[(X_test['Pclass']==2)&(X_test['Sex']=='female')&(X_test['Age'].isna()),'Age'] = 30\nX_test.loc[(X_test['Pclass']==2)&(X_test['Sex']=='male')&(X_test['Age'].isna()),'Age'] = 30\nX_test.loc[(X_test['Pclass']==3)&(X_test['Sex']=='female')&(X_test['Age'].isna()),'Age'] = 19\nX_test.loc[(X_test['Pclass']==3)&(X_test['Sex']=='male')&(X_test['Age'].isna()),'Age'] = 25\n\nX_test = pd.concat([X_test, pd.get_dummies(X_test.Sex).iloc[:,:-1]], axis = 1)\nX_test = pd.concat([X_test, pd.get_dummies(X_test.Embarked).iloc[:,:-1]], axis = 1)\n\nX_test.drop(['Name', 'Cabin', 'Sex', 'Embarked' ,'Ticket'], axis=1, inplace=True)","e64464ee":"temp.info()","521f810f":"X_test.info()","7c415184":"temp.describe()","f05f480c":"X_test.describe()","1b23d001":"temp.groupby('target').mean()","316cd1c3":"from sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier, RandomForestClassifier, ExtraTreesClassifier\nfrom xgboost import XGBRFClassifier, XGBClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier","96e94669":"X_tra, X_val, y_tra, y_val = train_test_split(temp.drop('target',axis=1), temp.target, test_size=0.2, random_state=42)","48052f96":"list_ml = [AdaBoostClassifier(random_state=42), GradientBoostingClassifier(random_state=42), \n           RandomForestClassifier(random_state=42), ExtraTreesClassifier(random_state=42),\n           SVC(random_state=42), DecisionTreeClassifier(random_state=42), XGBRFClassifier(random_state=42), XGBClassifier(random_state=42)]","025a87d1":"for i in range(len(list_ml)):\n    clf = list_ml[i]\n    clf.fit(X_tra, y_tra)\n    print(list_ml[i],':', clf.score(X_val, y_val))","45f39ae1":"X_train = temp.drop('target',axis=1)\ny_train = temp.target","b0de215e":"parameters = {'learning_rate':[0.01, 0.005], 'n_estimators':[100,300,500]}\nclf = GridSearchCV(GradientBoostingClassifier(random_state=42), parameters)\nclf.fit(X_train, y_train)\nprint(clf.best_estimator_)\nprint(clf.best_score_)","83a1724b":"parameters = {'max_depth':[-1,5,10], 'n_estimators':[100,300,500]}\nclf = GridSearchCV(RandomForestClassifier(random_state=42), parameters)\nclf.fit(X_train, y_train)\nprint(clf.best_estimator_)\nprint(clf.best_score_)","2d61fb0b":"parameters = {'max_depth':[-1,5,10], 'learning_rate':[0.01, 0.005], 'n_estimators':[100,300,500]}\nclf = GridSearchCV(XGBRFClassifier(random_state=42), parameters)\nclf.fit(X_train, y_train)\nprint(clf.best_estimator_)\nprint(clf.best_score_)","d46f4a85":"clf = RandomForestClassifier(max_depth=10, n_estimators=500, random_state=42)\nclf.fit(X_train, y_train)\npred = y_test.copy()\npred.iloc[:,1] = clf.predict(X_test)","971faf8d":"print('\ucd5c\uc885 \uc2a4\ucf54\uc5b4 :', accuracy_score(pred.iloc[:,1], y_test.iloc[:,1]))","0dcbecb0":"# pred.to_csv('titanic.csv', index = False)","8a8fc895":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/titanic\/train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, \n                                                  target='Survived', \n                                                  id_name='PassengerId')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","e81154f9":"# \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30\nimport pandas as pd","7b0df3ed":"# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 (\uc0dd\ub7b5)\nX_train.shape, y_train.shape, X_test.shape","7408b98a":"X_train.head()","52e68bad":"# float64(2), int64(3), object(5)\nX_train.info()","f6b1ca61":"y_train.head()","a80f29aa":"# \uc0dd\uc874 \ube44\uc728\ny_train['Survived'].value_counts()","1e596115":"y = y_train[\"Survived\"]\n\n# sex\ub9cc \uc6d0\ud56b\uc778\ucf54\ub529 \ub428\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX_train = pd.get_dummies(X_train[features])\nX_test = pd.get_dummies(X_test[features])","1b495447":"X_train.shape, X_test.shape","13812b57":"X_train.head()","952b7512":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=200, max_depth=7, random_state=2021)\nmodel.fit(X_train, y)\npredictions = model.predict(X_test)","8f2f03f5":"model.score(X_train, y)","b396d70c":"output = pd.DataFrame({'PassengerId': y_test.PassengerId, 'Survived': predictions})\noutput.head()","56df6650":"# \uc218\ud5d8\ubc88\ud638.csv\ub85c \ucd9c\ub825\noutput.to_csv('1234567.csv', index=False)","f53bfa5a":"model.score(X_test, y_test['Survived'])","240ba837":"### \uc804\ucc98\ub9ac \ubc0f EDA","6673f87c":"## Start\n### \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\n","8b8ee841":"## \ubaa8\ub378 \ubc0f \ud3c9\uac00","d7e7a5b8":"- GradientBoostingClassifier(random_state=42) : 0.8671328671328671\n- RandomForestClassifier(random_state=42) : 0.8391608391608392\n- XGBRFClassifier() : 0.8461538461538461\n\n\uc0c1\uc704 3\uac1c\uc758 \ubaa8\ub378\uc758 \ucd5c\uc801 \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130\ub97c \ucc3e\uae30\ub85c \ud55c\ub2e4.","87cc5a6c":"## \uc0dd\uc874\uc5ec\ubd80 \uc608\uce21\ubaa8\ub378 \ub9cc\ub4e4\uae30\n### \ud559\uc2b5\uc6a9 \ub370\uc774\ud130 (X_train, y_train)\uc744 \uc774\uc6a9\ud558\uc5ec \uc0dd\uc874 \uc608\uce21 \ubaa8\ud615\uc744 \ub9cc\ub4e0 \ud6c4, \uc774\ub97c \ud3c9\uac00\uc6a9 \ub370\uc774\ud130(X_test)\uc5d0 \uc801\uc6a9\ud558\uc5ec \uc5bb\uc740 \uc608\uce21\uac12\uc744 \ub2e4\uc74c\uacfc \uac19\uc740 \ud615\uc2dd\uc758 CSV\ud30c\uc77c\ub85c \uc0dd\uc131\ud558\uc2dc\uc624(\uc81c\ucd9c\ud55c \ubaa8\ub378\uc758 \uc131\ub2a5\uc740 accuracy \ud3c9\uac00\uc9c0\ud45c\uc5d0 \ub530\ub77c \ucc44\uc810)\n\n(\uac00) \uc81c\uacf5 \ub370\uc774\ud130 \ubaa9\ub85d\n- y_train: \uc0dd\uc874\uc5ec\ubd80(\ud559\uc2b5\uc6a9)\n- X_trian, X_test : \uc2b9\uac1d \uc815\ubcf4 (\ud559\uc2b5\uc6a9 \ubc0f \ud3c9\uac00\uc6a9)\n\n(\ub098) \ub370\uc774\ud130 \ud615\uc2dd \ubc0f \ub0b4\uc6a9\n- y_trian (712\uba85 \ub370\uc774\ud130)\n\n**\uc2dc\ud5d8\ud658\uacbd \uc138\ud305\uc740 \uc608\uc2dc\ubb38\uc81c\uc640 \ub3d9\uc77c\ud55c \ud615\ud0dc\uc758 X_train, y_train, X_test \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uae30 \uc704\ud568\uc784**\n\n### \uc720\uc758\uc0ac\ud56d\n- \uc131\ub2a5\uc774 \uc6b0\uc218\ud55c \uc608\uce21\ubaa8\ud615\uc744 \uad6c\ucd95\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc801\uc808\ud55c \ub370\uc774\ud130 \uc804\ucc98\ub9ac, \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1, \ubd84\ub958\uc54c\uace0\ub9ac\uc998, \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd, \ubaa8\ud615 \uc559\uc0c1\ube14 \ub4f1\uc774 \uc218\ubc18\ub418\uc5b4\uc57c \ud55c\ub2e4.\n- \uc218\ud5d8\ubc88\ud638.csv\ud30c\uc77c\uc774 \ub9cc\ub4e4\uc5b4\uc9c0\ub3c4\ub85d \ucf54\ub4dc\ub97c \uc81c\ucd9c\ud55c\ub2e4.\n- \uc81c\ucd9c\ud55c \ubaa8\ub378\uc758 \uc131\ub2a5\uc740 accuracy\ub85c \ud3c9\uac00\ud568\n\ncsv \ucd9c\ub825\ud615\ud0dc\n\n![image.png](attachment:de1920de-121e-47c3-a61f-e905386713bf.png)","3213458b":"0.8483305426967398\uc73c\ub85c \uac00\uc7a5 \uc810\uc218\uac00 \ub192\uc740 RandomForestClassifier(max_depth=10, n_estimators=500, random_state=42)\uc744 \ucd5c\uc885\ubaa8\ub378 \uc120\uc815","45b3a74c":"- \uc0ac\ub9dd : \ub0a8\uc131, \ud074\ub798\uc2a4\uac00 \ub0ae\uc744\uc218\ub85d, \uc694\uae08\uc774 \uc300\uc218\ub85d \uc0ac\ub9dd\ube44\uc728\uc774 \ub192\ub2e4.\n- \uc0dd\uc874 : \uc5ec\uc131, \ud074\ub798\uc2a4\uac00 \ub192\uc744\uc218\ub85d, \uc694\uae08\uc774 \ube44\uc300\uc218\ub85d \uc0dd\uc874\ube44\uc728\uc774 \ub192\ub2e4.","e279bb37":"## \ub370\uc774\ud130 \uc804\ucc98\ub9ac","e6a03d31":"Age, Cabin, Embarked\uc5d0 \uacb0\uce21\uce58 \uc874\uc7ac\n\n\uacb0\uce21\uce58\uac00 \ub108\ubb34 \ub9ce\uc740 Cabin\uc740 \uc81c\uac70","42ceb690":"## [\ucc38\uace0]\uc791\uc5c5\ud6152 \ubb38\uad6c\n- \ucd9c\ub825\uc744 \uc6d0\ud558\uc2e4 \uacbd\uc6b0 print() \ud568\uc218 \ud65c\uc6a9\n- \uc608\uc2dc) print(df.head())\n- getcwd(), chdir() \ub4f1 \uc791\uc5c5 \ud3f4\ub354 \uc124\uc815 \ubd88\ud544\uc694\n- \ud30c\uc77c \uacbd\ub85c \uc0c1 \ub0b4\ubd80 \ub4dc\ub77c\uc774\ube0c \uacbd\ub85c(C: \ub4f1) \uc811\uadfc \ubd88\uac00\n\n### \ub370\uc774\ud130 \ud30c\uc77c \uc77d\uae30 \uc608\uc81c\n- import pandas as pd\n- X_test = pd.read_csv(\"data\/X_test.csv\")\n- X_train = pd.read_csv(\"data\/X_train.csv\")\n- y_train = pd.read_csv(\"data\/y_train.csv\")\n\n### \uc0ac\uc6a9\uc790 \ucf54\ub529\n\n### \ub2f5\uc548 \uc81c\ucd9c \ucc38\uace0\n- \uc544\ub798 \ucf54\ub4dc \uc608\uce21\ubcc0\uc218\uc640 \uc218\ud5d8\ubc88\ud638\ub97c \uac1c\uc778\ubcc4\ub85c \ubcc0\uacbd\ud558\uc5ec \ud65c\uc6a9\n- pd.DataFrame({'cust_id': X_test.cust_id, 'gender': pred}).to_csv('003000000.csv', index=False)","15a558e7":"## kaggle code","ba5ef171":"## \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","ad165299":"## EDA","ad51ac68":"## \uacb0\uacfc \uccb4\uc810 (\uc218\ud5d8\uc790\ub294 \uc54c \uc218 \uc5c6\ub294 \ubd80\ubd84\uc784)"}}