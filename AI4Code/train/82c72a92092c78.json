{"cell_type":{"4192f94b":"code","76bc023c":"code","815ab822":"code","76dcd504":"code","928d1822":"code","5a1ec850":"code","de0e595c":"code","379945cd":"code","925245b8":"code","7fa585d6":"code","01c235d3":"code","8e262541":"code","3f0b5022":"code","65c4e496":"code","617d22dc":"code","8c10e0c0":"code","49b6a9eb":"code","458b0c8d":"code","5610a889":"code","e8dcb5ca":"code","af80279b":"code","450ecd3a":"code","0683f41d":"code","93c3f143":"code","c56fb5f4":"code","466bbd64":"markdown","e02d932b":"markdown","ca5db599":"markdown","dbbdcc6e":"markdown","a4eac723":"markdown","cde799f2":"markdown","e86cb3d4":"markdown","7441aa10":"markdown","20db354d":"markdown","d51926e3":"markdown","3f6429da":"markdown","46767963":"markdown","4b5ec234":"markdown"},"source":{"4192f94b":"import pandas as pd\nimport numpy as np\nimport pylab as py\nimport matplotlib.pyplot as plt\nimport scipy.optimize as opt\nfrom sklearn import preprocessing\n%matplotlib inline","76bc023c":"train_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain_data.head()","815ab822":"test_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest_data.head()","76dcd504":"# label encoding the data \nfrom sklearn.preprocessing import LabelEncoder \nhe = LabelEncoder() \ntrain_data['Sex']= he.fit_transform(train_data['Sex'])","928d1822":"test_data['Sex']= he.fit_transform(test_data['Sex'])","5a1ec850":"test_data.isnull().sum()","de0e595c":"train_data = train_data.dropna()","379945cd":"train_data.shape","925245b8":"test_data.shape","7fa585d6":"my_train = train_data[[\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]]","01c235d3":"X = np.asanyarray(my_train[[\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]])\nX[0:5]","8e262541":"X = preprocessing.StandardScaler().fit(X).transform(X)\nX[0:5]","3f0b5022":"y = np.asanyarray(train_data[\"Survived\"])\ny[0:5]","65c4e496":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train,y_test = train_test_split(X,y,test_size = 0.5, random_state = 1)","617d22dc":"print(\"Training Set: \", X_train.shape, y_train.shape)\nprint(\"Testing Set: \", X_test.shape, y_test.shape)","8c10e0c0":"from sklearn.linear_model import LogisticRegression\nLR = LogisticRegression(C = 0.01, solver = \"liblinear\").fit(X_train,y_train)\nLR","49b6a9eb":"y_hat = LR.predict(X_test)\ny_hat","458b0c8d":"y_hat_prob = LR.predict_proba(X_test)\ny_hat_prob","5610a889":"#evaluation by Jaccard Index\nfrom sklearn.metrics import jaccard_score\njaccard_score(y_test,y_hat)","e8dcb5ca":"from sklearn.metrics import classification_report,confusion_matrix\nimport itertools\ndef plot_confusion_matrix(cm,classes,\n                        normalize=True,\n                        title='confusion matrix',\n                        cmap=plt.cm.Blues):\n    if normalize:\n        cm=cm.astype('float')\/cm.sum(axis=1)[:,np.newaxis]\n        print(\"The normalized Confusion matrix\")\n    else:\n        print(\"Without Normalization\")\n    print(cm)\n    plt.imshow(cm,interpolation='nearest',cmap=cmap)\n    plt.title(title,color='white')\n    plt.colorbar()\n    tick_marks=np.arange(len(classes))\n    plt.xticks(tick_marks,classes,rotation=False,color='white',size=15)\n    plt.yticks(tick_marks,classes,rotation=True,color='white',size=15)\n    tmt='.2f'if normalize else 'd'\n    thresh=cm.max()\/2\n    for i,j in itertools.product(range(cm.shape[0]),range(cm.shape[1])):\n        plt.text(j,i,format(cm[i,j],tmt),\n        horizontalalignment='center',\n        color='white' if cm[i,j]>thresh else 'black')\n    plt.tight_layout()\n    plt.ylabel(\"True Label\",color='white',size=20)\n    plt.xlabel(\"False Label\",color='white',size=20)\nprint(confusion_matrix(y_test,y_hat,labels=[1,0]))","af80279b":"cnf_matrix=confusion_matrix(y_test,y_hat,labels=[1,0])\nnp.set_printoptions(precision=2)\nplt.figure()\nplot_confusion_matrix(cnf_matrix,classes=['Died = 0','Survived = 1'],normalize=True,title='Confusion Matrix')","450ecd3a":"#log loss\nfrom sklearn.metrics import log_loss\nlog_loss(y_test,y_hat_prob)","0683f41d":"print(classification_report(y_test,y_hat))","93c3f143":"X_test_data = test_data[[\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]]\npred = LR.predict(X_test_data)","c56fb5f4":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': pred})\noutput.to_csv('submission.csv', index=False)","466bbd64":"# Preprocessing Before Logistic Regression","e02d932b":"# Creating Logistic Regression Model","ca5db599":"## Confusion Matrix ","dbbdcc6e":"# Output Submission","a4eac723":"## Classification Report","cde799f2":"# Cleaning Training Dataset","e86cb3d4":"# Predicting and Evaluation","7441aa10":"# Importing Training and Testing Data ","20db354d":"## Log Loss","d51926e3":"# Label Encoding Column \"SEX\"","3f6429da":"# Spliting the Data Set","46767963":"# Prediction for test.csv","4b5ec234":"# Importing Important Libraries"}}