{"cell_type":{"555b90bd":"code","1c04ee46":"code","68baf4ca":"code","a233634a":"code","8ab6716b":"code","7a0ebd14":"code","c0d20674":"code","cf800305":"code","47e91316":"code","932e7a1c":"code","90c04969":"code","a9b1d7f3":"code","d9607bc2":"code","c1e80bd6":"code","c8449659":"code","927acdab":"code","b7a38e00":"code","3384df45":"code","935a2a42":"markdown","4be31996":"markdown","fd369a49":"markdown","5e926cea":"markdown","cd24e188":"markdown","c6391e86":"markdown","2945af3c":"markdown","3d752449":"markdown","fa0c11e7":"markdown","37c7a26c":"markdown","0454b00f":"markdown"},"source":{"555b90bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1c04ee46":"from keras.models import Sequential\nfrom keras.layers import Dense , Dropout , Lambda, Flatten\nfrom keras.optimizers import Adam ,RMSprop\nfrom sklearn.model_selection import train_test_split\nfrom keras import  backend as K\nfrom keras.preprocessing.image import ImageDataGenerator","68baf4ca":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nprint(train.shape)\ntrain.head()","a233634a":"from PIL import Image\n\nfig = plt.figure(figsize=(5, 5))\n\nrows = 3\ncolumns = 3\n\nfor i in range(9):\n    j=np.random.randint(0,28000)\n    fig.add_subplot(rows, columns, i+1)\n    img_arr=train.iloc[j,1:].values.reshape(28,28)\n    label=str(train.iloc[j,0])\n    plt.imshow(img_arr)\n    plt.axis('off')\n    plt.title(\"Label\"+' '+label)","8ab6716b":"X_train = (train.iloc[:,1:].values).astype('float32')\ny_train = train.iloc[:,0].values.astype('int32')\nX_test = test.values.astype('float32')\nX_train.shape","7a0ebd14":"'''\ndivided all of the data by 255.0, is meant for normalize the dataset value\nif its not divied by 255.0, then the neural network will be constant,\n\nreshaping it to 28,28,1 from x, 784. is meant for inputing it to Conv2D\n'''\nX_train\/=255.0\nX_train=X_train.reshape(-1,28,28,1)\nX_train.shape","c0d20674":"X_test\/=255.0\nX_test=X_test.reshape(-1,28,28,1)\nX_test.shape","cf800305":"from tensorflow import keras\n'''\nConv2D will read the shape of 4D dimension (num, height, weight, channels)\nMaxPooling2D will project it to lower dimension, to accerelate the process\nFlatten will reduce the size to 1D array\nDense is a normal neuron point\nDropout will throw away all the unneccesary neuron\n\n'''\nmodel = keras.models.Sequential([\n    keras.layers.Conv2D(filters=64, kernel_size=7, input_shape=[28, 28, 1]),\n    keras.layers.MaxPooling2D(pool_size=2),\n    keras.layers.Conv2D(filters=128, kernel_size=3, activation='relu', padding=\"SAME\"),\n    keras.layers.Conv2D(filters=128, kernel_size=3, activation='relu', padding=\"SAME\"),\n    keras.layers.MaxPooling2D(pool_size=2),\n    keras.layers.Conv2D(filters=128, kernel_size=3, activation='relu', padding=\"SAME\"),\n    keras.layers.Conv2D(filters=128, kernel_size=3, activation='relu', padding=\"SAME\"),\n    keras.layers.MaxPooling2D(pool_size=2),\n    keras.layers.Flatten(),\n    keras.layers.Dense(units=128, activation='relu'),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(units=64, activation='relu'),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(units=10, activation='softmax'),\n])","47e91316":"model.summary()","932e7a1c":"model.compile(\n    loss=\"sparse_categorical_crossentropy\", # multyclass classification\n    optimizer = 'nadam', # optimizer\n    metrics=['accuracy']\n)","90c04969":"X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.1, random_state=42)","a9b1d7f3":"history = model.fit(X_train,y_train,\n                   validation_data=(X_valid,y_valid),\n                   epochs=10)","d9607bc2":"pd.DataFrame(history.history).plot()","c1e80bd6":"pred = model.predict(X_test)\npred","c8449659":"# select the index with the maximum probability\npred = np.argmax(pred,axis = 1)\npred","927acdab":"submission=pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\nsubmission.head()","b7a38e00":"submission['Label'] = pred\nsubmission.head()","3384df45":"submission.to_csv('digit_recognition.csv',index=False)","935a2a42":"### Predictions","4be31996":"### Creating the training data","fd369a49":"### Fitting the model","5e926cea":"### Importing libraries","cd24e188":"### Submission","c6391e86":"### Creating the model","2945af3c":"### Compiling the model","3d752449":"### Loading the datasets","fa0c11e7":"The data files train.csv and test.csv contain gray-scale images of hand-drawn digits, from zero through nine.\n\nEach image is 28 pixels in height and 28 pixels in width, for a total of 784 pixels in total. Each pixel has a single pixel-value associated with it, indicating the lightness or darkness of that pixel, with higher numbers meaning darker. This pixel-value is an integer between 0 and 255, inclusive.\n\nThe training data set, (train.csv), has 785 columns. **The first column**, called **\"label\"**, is the digit that was drawn by the user. The rest of the columns contain the pixel-values of the associated image.","37c7a26c":"### Data visualisation","0454b00f":"### Cross validation"}}