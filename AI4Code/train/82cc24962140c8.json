{"cell_type":{"4a7a0253":"code","cf50f65b":"code","3356a55d":"code","866a87af":"code","f8d83991":"code","466c8e8b":"code","9c7ccb74":"code","9ae59819":"code","bbc51bbb":"code","4745a798":"code","2aa1004b":"code","5ca06321":"code","94c4b89d":"code","2ab5b811":"code","be8d6392":"code","35b86a17":"code","d66bf1c1":"code","3c752e75":"code","52af7862":"code","65794fc6":"code","2eea88c6":"code","09b1bd51":"code","cbfa715b":"code","23feffa3":"code","ecfad4e9":"code","eb7adf1f":"markdown","d50d8707":"markdown","bfc3f072":"markdown"},"source":{"4a7a0253":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cf50f65b":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\nimport plotly.express as px\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn import metrics\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler","3356a55d":"train = pd.read_csv('..\/input\/heart-disease-health-indicators-dataset\/heart_disease_health_indicators_BRFSS2015.csv')\ntrain.head(2)","866a87af":"plt.figure(figsize=(8,5))\nsns.heatmap(train.corr(), cmap='cool')\nplt.title('Correlation between features')\nplt.show()","f8d83991":"train.describe()","466c8e8b":"train.isnull().sum()","9c7ccb74":"plt.figure(figsize=(12,5))\nsns.heatmap(train.isnull(), cmap='cool')\nplt.title('Null Values in Training Data')\nplt.show()","9ae59819":"fig, ax = plt.subplots(1, 2, figsize=(15,5))\nsns.distplot(train['Age'], ax=ax[0])\nsns.boxplot(train['Age'], ax=ax[1])\nax[1].set_title(\"Box plot of 'Age' Feature\")\nax[0].set_title(\"Distibution plot of 'Age' Feature\")\nfig.show()","bbc51bbb":"train['Age'].fillna(train['Age'].mean(), inplace=True)","4745a798":"train['Diabetes'].unique()","2aa1004b":"plt.figure(figsize=(8,5))\nsns.countplot(train['Diabetes'], palette='cool', orient='v')\nplt.title('Counting of all unique values of \"Diabetes\" feature')\nplt.show()","5ca06321":"train['Diabetes'].fillna('S', inplace=True)","94c4b89d":"fig, ax = plt.subplots(1, 2, figsize=(15,5))\nsns.distplot(train['BMI'], ax=ax[0])\nsns.boxplot(train['BMI'], ax=ax[1])\nax[1].set_title(\"Box plot of 'BMI' Feature\")\nax[0].set_title(\"Distibution plot of 'BMI' Feature\")\nfig.show()","2ab5b811":"med = train['BMI'].median()\nQ = np.quantile(train['BMI'], 0.945)\ntrain['BMI'] = train['BMI'].apply(lambda x:med if x > Q else x)\nprint('Outliers Removed...')","be8d6392":"fig, ax = plt.subplots(1, 2, figsize=(15,5))\nsns.distplot(train['BMI'], ax=ax[0])\nsns.boxplot(train['BMI'], ax=ax[1])\nax[1].set_title(\"Box plot of 'BMI' Feature\")\nax[0].set_title(\"Distibution plot of 'BMI' Feature\")\nfig.show()","35b86a17":"fig, ax = plt.subplots(1,3, figsize=(18,5))\nsns.countplot(train['Smoker'], palette='cool', ax=ax[0])\nsns.countplot(train['Stroke'], palette='cool', ax=ax[1])\nsns.countplot(train['PhysActivity'], palette='cool', ax=ax[2])\nplt.show()","d66bf1c1":"smoker   = pd.get_dummies(train['Smoker'])\nstroke      = pd.get_dummies(train['Stroke'])\nphysActivity = pd.get_dummies(train['PhysActivity'])\n\nsmoker.columns   = ['smoker1', 'smoker0']\nstroke.columns      = ['stroke1', 'stroke0']\nphysActivity.columns = ['physActivity1', 'physActivity0']","3c752e75":"data = pd.concat([train, smoker, stroke, physActivity], axis=1)\ndata.drop(['Smoker', 'Stroke', 'PhysActivity'], axis=1, inplace=True)\n#data.drop(['Name', 'Ticket'], axis=1, inplace=True)\ndata.head(1)","52af7862":"X = data.drop('Diabetes', axis=1)\ny = data['Diabetes']","65794fc6":"scale = StandardScaler()\nX_scaled = scale.fit_transform(X)","2eea88c6":"scaled = pd.DataFrame(X_scaled)\nscaled.columns = X.columns\nscaled.head(2)","09b1bd51":"X_train, X_test, y_train, y_test = train_test_split(scaled, y, test_size=0.25)\nprint('Data Splitting Successful...')","cbfa715b":"model = LogisticRegression()\nmodel.fit(X_train, y_train)\nprint('Model Trained...')\nprint(f'Training Accuracy - {(model.score(X_train, y_train) * 100).round(2)}%')","23feffa3":"y_pred = model.predict(X_test)\nscore = metrics.accuracy_score(y_test, y_pred)\nprint(f'Testing Accuracy - {(score * 100).round(2)}%')","ecfad4e9":"plt.figure(figsize=(8,5))\nsns.heatmap(metrics.confusion_matrix(y_test, y_pred), cmap='cool', annot=True, fmt='g', linecolor='black')\nplt.title('Confusion Matrix')\nplt.show()","eb7adf1f":"graficos\nhttps:\/\/www.kaggle.com\/kartik2khandelwal\/titanic-complete-model-training-testing","d50d8707":"Age\n* \"1\":string\"\"Age 18 to 24\"\"\n* \"2\":string\"\"Age 25 to 29\"\"\n* \"3\":string\"\"Age 30 to 34\"\"\n* \"4\":string\"\"Age 35 to 39\"\"\n* \"5\":string\"\"Age 40 to 44\"\"\n* \"6\":string\"\"Age 45 to 49\"\"\n* \"7\":string\"\"Age 50 to 54\"\"\n* \"8\":string\"\"Age 55 to 59\"\"\n* \"9\":string\"\"Age 60 to 64\"\"\n* \"10\":string\"\"Age 65 to 69\"\"\n* \"11\":string\"\"Age 70 to 74\"\"\n* \"12\":string\"\"Age 75 to 79\"\"\n* \"13\":string\"\"Age 80 or older\"\"\n","bfc3f072":"Dataset Escolhido\nhttps:\/\/www.kaggle.com\/alexteboul\/heart-disease-health-indicators-dataset"}}