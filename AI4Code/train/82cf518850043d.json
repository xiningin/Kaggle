{"cell_type":{"efb305dd":"code","ef2be486":"code","ff2a5e13":"code","c77ffca5":"code","08cf6c38":"code","fead652f":"code","a6f237ce":"code","2a8b15ca":"code","af19561f":"code","eb03e7b9":"code","af3edea7":"code","560360ad":"code","d82f4240":"code","4c2a57d1":"code","34a5337c":"code","dbc26cb7":"code","f816e621":"code","a9b9352e":"code","acbfbb96":"code","0a62a708":"code","b80e0da7":"code","e1e46acc":"code","2d192037":"code","b090f9aa":"code","3b4ace84":"code","8800f328":"code","0490b7cc":"code","adc51482":"code","ee665b37":"code","37b8f631":"code","50fce590":"code","fdcdd855":"code","6071bea7":"code","1923019c":"code","11ccb0c8":"code","9e0e6175":"code","43141d2f":"code","3dea671e":"code","014e7d58":"code","5a7c872f":"code","7ccc7f4a":"markdown","a6388886":"markdown","22538d1e":"markdown","7ca58233":"markdown","ac21d5f6":"markdown","96120b45":"markdown","b7822e65":"markdown","0056e707":"markdown","0a794103":"markdown","fb50114a":"markdown","8cb4ad29":"markdown","61360af7":"markdown","aa45fb26":"markdown","76ef081f":"markdown","f20914b6":"markdown","3ce7f4b8":"markdown","5b625dfc":"markdown","7d7cd150":"markdown","807e4503":"markdown","d745f042":"markdown","a3f06a0b":"markdown","a9913f20":"markdown","23d81a61":"markdown","feb72b83":"markdown","f4289ec9":"markdown","dc521271":"markdown"},"source":{"efb305dd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport re\n\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, make_scorer\n\nfrom plotly.offline import iplot\nimport plotly as py\nimport plotly.tools as tls\n\nimport pickle","ef2be486":"heart = pd.read_csv('..\/input\/heart-data\/data.csv')\nheart.head()","ff2a5e13":"heart.shape\n#270 observations and 14 columns\/variables in the dataset.","c77ffca5":"heart.info()\n#there are 270 observations in the datsets: with nearly all variables in numeric format.","08cf6c38":"heart.describe()","fead652f":"#checking missing values\nheart.isnull().sum()","a6f237ce":"#distribution of outcome variable 'target': '1' means No and '2' means Yes for heart disease.\nheart['target'].value_counts()","2a8b15ca":"#% of patients who have heart disease\nheart['target'].value_counts()\/heart.shape[0]*100","af19561f":"#Pie-chart for visualization of heart disease (1: No, 2: Yes)\nlabels=['Yes','No']\nvalues=heart['target'].value_counts().values\n\nsns.set_theme(context='poster')\nplt.figure(figsize=(7,7))\nplt.title('Heart Diseases', color=\"Black\",fontsize=40)\n\nplt.pie(values, labels=labels, autopct='%1.0f%%')\nplt.show()","eb03e7b9":"#Correlation between variables\nsns.set_theme(context='poster')\nplt.figure(figsize=(25,25))\nplt.title('Correlation between variables', color=\"Black\",fontsize=15)\nsns.heatmap(heart.corr(),annot=True,cmap=\"hot\")\nplt.show()","af3edea7":"# Min, max and average of the age variable\nprint('Min age: ', min(heart['age']))\nprint('Max age: ', max(heart['age']))\nprint('Average age: ', heart['age'].mean())","560360ad":"sns.set_theme(context='poster')\nplt.figure(figsize=(12,7))\nplt.title('Age distribution', color=\"Black\",fontsize=25)\nheart['age'].plot(kind = 'hist',color='orangered')\nplt.show()","d82f4240":"#Age distribution for those with and without heart disease","4c2a57d1":"sns.set_theme(context='poster')\nplt.figure(figsize=(10,7))\nplt.title('Age distribution based on heart disease', color=\"Black\",fontsize=25)\n\nsns.distplot(heart[heart['target'] == 1]['age'], label='Do not have heart disease')\nsns.distplot(heart[heart['target'] == 2]['age'], label = 'Have heart disease')\nplt.xlabel('Frequency')\nplt.ylabel('Age')\nplt.legend()\nplt.show()","34a5337c":"sns.set_theme(context='poster')\n# Number of males and females\nF = heart[heart['sex'] == 0].count()['target']\nM = heart[heart['sex'] == 1].count()['target']\n\n# Create a plot\nfigure, ax = plt.subplots(figsize = (10, 7))\nax.bar(x = ['Female', 'Male'], height = [F, M],color='orangered')\nplt.xlabel('Gender')\nplt.title('Gender distribution', color=\"Black\",fontsize=25)\nplt.show()","dbc26cb7":"heart['cp'].value_counts()","f816e621":"# Chest pain types in bar chart\nimport matplotlib\n\nmatplotlib.rc('xtick', labelsize=15) \nxs =[1,2,3,4]\nlabels = ['typical angina', 'atypical angina', 'non-anginal pain', 'asymptomatic']\n\nheart.groupby(heart['cp']).count()['target'].plot(kind = 'bar', figsize = (12, 6),color='orangered')\nplt.xlabel('Chest pain types')\nplt.xticks(np.arange(4), ('typical angina', 'atypical angina', 'non-anginal pain', 'asymptomatic'), rotation = 0)\nplt. xticks(xs,labels)\nplt.show()","a9b9352e":"# Blood pressure distribution\nheart['trestbps'].plot(kind = 'hist', title = 'Blood Pressure in mm Hg', figsize = (12, 6), color='orangered')\nplt.show()","acbfbb96":"# Display cholestoral distribution\nheart['chol'].plot(kind = 'hist', title = 'Serum Cholestoral in mg\/dl', figsize = (12, 6), color='orangered')\nplt.show()","0a62a708":"# Display fasting blood sugar in bar chart\nheart.groupby(heart['fbs']).count()['target'].plot(kind = 'bar', title = 'Fasting blood sugar', figsize = (12, 6), color='orangered')\nplt.xticks(np.arange(2), ('fbs < 120 mg\/dl', 'fbs > 120 mg\/dl'), rotation = 0)\nplt.show()","b80e0da7":"# Display electrocardiographic results in bar chart\nheart.groupby(heart['restecg']).count()['target'].plot(kind = 'bar', title = 'Resting electrocardiographic results', figsize = (12, 6), color='orangered')\nplt.xticks(np.arange(3), ('normal', 'ST-T wave abnormality', 'probable or left ventricular hypertrophy'))\nplt.show()","e1e46acc":"# Display maximum heart rate distribution\nheart['thalach'].plot(kind = 'hist', title = 'Maximum Heart Rate Achieved', figsize = (12, 6), color='orangered')\nplt.show()","2d192037":"# Display exercise induced angina in bar chart\nheart.groupby(heart['exang']).count()['target'].plot(kind = 'bar', title = 'Exercise induced angina',  figsize = (12, 6), color='orangered')\nplt.xticks(np.arange(2), ('No', 'Yes'), rotation = 0)\nplt.show()","b090f9aa":"# Display ST depression induced by exercise relative to rest distribution\nheart['oldpeak'].plot(kind = 'hist', title = 'ST Depression Induced by Exercise Relative to Rest', figsize = (12, 6), color='orangered')\nplt.show()","3b4ace84":"heart['slope'].value_counts()","8800f328":"# Display slope of the peak exercise ST segment in bar chart\nmatplotlib.rc('xtick', labelsize=15) \nxs =[1,2,3]\nlabels = ['upsloping', 'flat', 'downsloping']\n\nheart.groupby(heart['slope']).count()['target'].plot(kind = 'bar', title = 'Slope of the peak exercise ST segment', figsize = (12, 6), color='orangered')\nplt.xticks(np.arange(3), ('upsloping', 'flat', 'downsloping'), rotation = 0)\nplt. xticks(xs,labels)\nplt.show()","0490b7cc":"# Display number of major vessels in bar chart\nheart.groupby(heart['ca']).count()['target'].plot(kind = 'bar', title = 'Number of major vessels colored by flourosopy', figsize = (12, 6), color='orangered')\nplt.show()","adc51482":"heart['thal'].value_counts()","ee665b37":"# Display thalassemia in bar chart\nmatplotlib.rc('xtick', labelsize=12) \nxs =[3,7,6]\nlabels = ['normal', 'fixed defect', 'reversible defect']\n\nheart.groupby(heart['thal']).count()['target'].plot(kind = 'bar', title = 'Thalassemia', figsize=(15,6), color='orangered')\nplt.xticks(np.arange(3), ('normal', 'fixed defect', 'reversible defect'), rotation = 0)\nplt.xticks(xs,labels)\nplt.autoscale(enable=True)\nplt.show()","37b8f631":"# Age and heart rate\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(20,8.27)})\n\nsns.relplot(x = 'age', y = 'thalach', data = heart, hue = 'target', legend=\"full\", palette=\"Set2\",marker=\"+\",color=\"g\",height=5.27, aspect=11.7\/8.27)\nplt.title('The correlation between age and heart rate')\nplt.show()","50fce590":"# Age and CA\ng = sns.catplot(x = 'ca', y = 'age', hue = 'target', data = heart, palette=\"Set2\",height=5.27, aspect=11.7\/8.27)\ng.fig.suptitle('The correlation between number of major vessels colored by flourosopy and age', y = 1.1)\nplt.show()","fdcdd855":"# Target, slope and oldpeak\nsns.catplot(x = \"slope\", y = \"oldpeak\", hue = \"target\", data = heart, height=5.27, palette=\"Set2\",kind=\"swarm\",aspect=11.7\/8.27)\nplt.title('The correlation between oldpeak and slope')\nplt.xticks(np.arange(3), ('upsloping', 'flat', 'downsloping'), rotation = 0)\nplt.show()","6071bea7":"# 1.1 Initialize data and target\ntarget = heart['target']\nfeatures = heart.drop(['target'], axis = 1)","1923019c":"# 1.2 Split the data into training set and testing set\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size = 0.2, random_state = 0)","11ccb0c8":"# 2.1 Train and evaluate model\ndef fit_eval_model(model, train_features, y_train, test_features, y_test):\n    \n    \"\"\"\n    Function: train and evaluate a machine learning classifier.\n    Args:\n      model: machine learning classifier\n      train_features: train data extracted features\n      y_train: train data lables\n      test_features: train data extracted features\n      y_test: train data lables\n    Return:\n      results(dictionary): a dictionary of classification report\n    \"\"\"\n    results = {}\n    \n    # Train the model\n    model.fit(train_features, y_train)\n    \n    # Test the model\n    train_predicted = model.predict(train_features)\n    test_predicted = model.predict(test_features)\n    \n     # Classification report and Confusion Matrix\n    results['classification_report'] = classification_report(y_test, test_predicted)\n    results['confusion_matrix'] = confusion_matrix(y_test, test_predicted)\n        \n    return results","9e0e6175":"# 2.2 Initialize the models\nsv = SVC(random_state = 1)\nrf = RandomForestClassifier(random_state = 1)\nab = AdaBoostClassifier(random_state = 1)\ngb = GradientBoostingClassifier(random_state = 1)\n\n\n# Fit and evaluate models\nresults = {}\nfor cls in [sv, rf, ab, gb]:\n    cls_name = cls.__class__.__name__\n    results[cls_name] = {}\n    results[cls_name] = fit_eval_model(cls, X_train, y_train, X_test, y_test)","43141d2f":"# 2.3 Print classifiers results\nfor result in results:\n    print (result)\n    print()\n    for i in results[result]:\n        print (i, ':')\n        print(results[result][i])\n        print()\n    print ('-----')\n    print()","3dea671e":"# 3.1 Initialize the models\nsv = SVC(random_state = 1)\nrf = RandomForestClassifier(random_state = 1)\nab = AdaBoostClassifier(random_state = 1)\ngb = GradientBoostingClassifier(random_state = 1)\n\n\n# Fit and evaluate models\nresults = {}\nfor cls in [sv, rf, ab, gb]:\n    cls_name = cls.__class__.__name__\n    results[cls_name] = {}\n    results[cls_name] = fit_eval_model(cls, X_train, y_train, X_test, y_test)","014e7d58":"# 3.2 Get the important features \nimportance = gb.feature_importances_\n# summarize feature importance\nfor i,v in enumerate(importance):\n    print('Feature: %s, Score: %.5f' % (features.columns[i], v))\n# plot feature importance\nplt.bar([x for x in range(len(importance))], importance, color='r')\nplt.tight_layout()\nplt.show()","5a7c872f":"# 4. Save the model as serialized object pickle\nwith open('model_heart.pkl', 'wb') as file:\n    pickle.dump(gb, file)","7ccc7f4a":"1. [Introduction](#1)\n1. [Data cleaning, exploration and preprocessing](#2)\n1. [Basic model building](#3)\n1. [Web development](#4)\n1. [Acknowledgements](#5)","a6388886":"#Loading dependencies <br>\n    import numpy as np\n    import pickle\n    from flask import Flask, request, render_template\n\n#Load ML model <br>\n    model = pickle.load(open('model_heart.pkl', 'rb')) \n\n#Create application <br>\n    app = Flask(__name__)\n\n#Bind home function to URL <br>\n    @app.route('\/')\n    def home():\n        return render_template('Heart Disease Classifier.html')\n \n#Bind predict function to URL <br>\n    @app.route('\/predict', methods =['POST'])\n    def predict():\n\n    # Put all form entries values in a list \n    features = [float(i) for i in request.form.values()]\n    # Convert features to array\n    array_features = [np.array(features)]\n    # Predict features\n    prediction = model.predict(array_features)\n    \n    output = prediction\n    \n    # Check the output values and retrive the result with html tag based on the value\n    if output == 1:\n        return render_template('Heart Disease Classifier.html', \n                               result = 'Heart disease - Unlikely!')\n    else:\n        return render_template('Heart Disease Classifier.html', \n                               result = 'Heart disease - Likely!')\n\nif __name__ == '__main__':\n#Run the application\n    app.run()","22538d1e":"<a id=\"4\"><\/a><h1 style='background:#6daa9f; border:3; color:white'><center> Web application for cardiovascular disease modelling: beginner's guide <\/center><\/h1>","7ca58233":"**Dataset** <br> <br>\n**Age**: age in years.<br>\n**Sex**: sex (1=male; 0=female).<br>\n**Cp**: chest pain type (0 = typical angina; 1 = atypical angina; 2 = non-anginal pain; 3: asymptomatic).<br>\n**Trestbps**: resting blood pressure in mm Hg on admission to the hospital.<br>\n**Chol**: serum cholesterol in mg\/dl.\nfbs: fasting blood sugar > 120 mg\/dl (1=true; 0=false).<br>\n**Restecg**: resting electrocardiographic results ( 0=normal; 1=having ST-T wave abnormality; 2=probable or definite left ventricular hypertrophy).<br>\n**Thalach**: maximum heart rate achieved.\nExang: exercise-induced angina (1=yes; 0=no).<br>\n**Oldpeak**: ST depression induced by exercise relative to rest.<br>\n**Slope**: the slope of the peak exercise ST segment (0=upsloping; 1=flat; 2=downsloping).<br>\n**Ca**: number of major vessels (0\u20133) colored by fluorosopy.<br>\n**Thal**: thalassemia (3=normal; 6=fixed defect; 7=reversable defect).<br>\n**Target**: heart disease (1=no, 2=yes).<br>","ac21d5f6":"**Correlation between variables**","96120b45":"**Other variables**\n<br>\nChest pain\n<br>\nBlood pressure\n<br>\nCholesterol\n<br>\nFasting blood sugar\n<br>\nElectrocardiographic results\n<br>\nMaximum heart rate\n<br>\nExercise induced angina\n<br>\nST depression\n<br>\nSlope\n<br>\nMajor vessels\n<br>\nThalassemia","b7822e65":"<a id=\"1\"><\/a><h1 style='background:#7ad16d; border:0; color:black'><center> Introduction <\/center><\/h1>","0056e707":"**Gender**","0a794103":"**Import libraries**","fb50114a":"<center><img \nsrc=\"https:\/\/github.com\/shivarajmishra\/cvdwebapp-py\/raw\/main\/screenrecording%20(3).gif\" width=\"900\" height=\"900\"><\/img><\/center>\n\n<br>","8cb4ad29":"<a id=\"5\"><\/a><h1 style='background:#7ad16d; border:0; color:black'><center> Acknowledgements<\/center><\/h1>","61360af7":"<a id=\"3\"><\/a><h1 style='background:#7ad16d; border:0; color:black'><center> Basic model building <\/center><\/h1>","aa45fb26":"**Age**","76ef081f":"**Correlations**\n* Age and heart rate\n* Age and CA\n* Target, slope and oldpeak","f20914b6":"Cardiovascular disease (CVD) is the most common cause of morbidity and mortality among men and women globally. An estimated 18 million deaths are reported from CVDs annually, representing nearly a third of all global deaths. Most of these deaths (85%) are due to heart attack and stroke. Every three in four CVD deaths happen in low and middle income countries. Heart failure is a commong CVD condition. \n\n[World Health Organization](https:\/\/www.who.int\/news-room\/fact-sheets\/detail\/cardiovascular-diseases-(cvds)) defines CVDs as a group of disorders of the heart and blood vascular system including but not limited to: <br>\n    * Coronary heart disease\n    * Cerebrovascular disease \n    * Peripheral heart disease\n    * Rheumatic heart disease\n    * Congential heart disease\n    * Deep vein thrombosis and pulmonary embolism ","3ce7f4b8":"**Modeling** <br>\nFor the model development part, I will use the following models: i) support vector macine, ii) random forest, iii) Ada Boost, iv) Gradient boosting for evaluating cardiovacular risk prediction using set of predictor variables defined\/examined above.\n\n> Steps to go:\n> 1. Prepare data for ML \n> 2. Train and evaludate model\n> 3. Examine the important features of the model\n> 4. Save the model","5b625dfc":"<center><img \nsrc=\"https:\/\/cdn.dribbble.com\/users\/1277402\/screenshots\/4180449\/heartwalk.gif\" width=\"900\" height=\"900\"><\/img><\/center>\n\n<br>","7d7cd150":"Using the model developed above I will now develop a web application to show the best predicted model.I have included the codes - written for web development in markdown (below)","807e4503":"> Based on the results presented above,I am happy to pick gradient boosting classifier for further development.","d745f042":"<a id=\"2\"><\/a><h1 style='background:#7ad16d; border:0; color:black'><center> Data cleaning, exploration and preprocessing <\/center><\/h1>","a3f06a0b":"<a id=\"4\"><\/a><h1 style='background:#7ad16d; border:0; color:black'><center> Web development <\/center><\/h1>","a9913f20":"Click \ud83d\udc49 [**Web Application**](https:\/\/cvdwebapp-py.herokuapp.com\/) ","23d81a61":"<center><img \nsrc=\"https:\/\/www.verywellhealth.com\/thmb\/RTA0B0j5XCAn0rNbL98bfimDBms=\/800x450\/filters:fill(87E3EF,1)\/Anim_HeartDisease-053487127daf48fd98162dfdb84206b6.gif\" width=\"900\" height=\"900\"><\/img><\/center>\n\n<br>","feb72b83":"<a id=\"4\"><\/a><h1 style='background:#7ad16d; border:0; color:black'><center> Table of contents <\/center><\/h1>","f4289ec9":"I would like to thank my fellow Kagglers [@rahulgulia](https:\/\/www.kaggle.com\/rahulgulia\/datascience-tackling-heart-diseases) and @[taylormartin94](https:\/\/www.kaggle.com\/taylormartin94\/cardio-disease-model-w-web-application) for inspiration in conducting the analysis. Also much thanks to [Analytics Vidhya](https:\/\/www.analyticsvidhya.com\/blog\/2020\/09\/web-application\/) for providing amazing resources for conducting the analysis.","dc521271":"\ud83d\udccc For full codes and HTML template for web application please check my [Github Repository](https:\/\/github.com\/shivarajmishra\/cvdwebapp-py) for further details."}}