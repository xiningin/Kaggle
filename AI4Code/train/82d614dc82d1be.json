{"cell_type":{"bc455c33":"code","ca97c2ac":"code","9be8008a":"code","532e91d9":"code","03f05784":"code","40bc5ddc":"code","f3699589":"code","98b546c8":"code","afeaca6d":"code","ad067f91":"code","dd446d3e":"markdown","57c8b76e":"markdown","5a179fd8":"markdown","2f82bc1b":"markdown","35a1279f":"markdown","3afe4386":"markdown","108fb1a8":"markdown","455d483b":"markdown","c7bef0ac":"markdown","39b18140":"markdown","3d31c94a":"markdown","77d36883":"markdown","ee6b654a":"markdown","fb596fe8":"markdown","4ad650ce":"markdown","8e7af457":"markdown","d834c52d":"markdown","451cb6ca":"markdown","f16e3f56":"markdown","97496e6f":"markdown","b820d01e":"markdown","2d12eaab":"markdown","4595772d":"markdown","599f8994":"markdown","4823204c":"markdown","2a781324":"markdown","bf82ad44":"markdown","c75019fa":"markdown","472deb47":"markdown","0c5f556b":"markdown"},"source":{"bc455c33":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport pylab as pl\nimport numpy as np\n%matplotlib inline","ca97c2ac":"!wget -O FuelConsumption.csv https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/ML0101ENv3\/labs\/FuelConsumptionCo2.csv","9be8008a":"df = pd.read_csv(\"FuelConsumption.csv\")\n\n# take a look at the dataset\ndf.head()","532e91d9":"cdf = df[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY','FUELCONSUMPTION_HWY','FUELCONSUMPTION_COMB','CO2EMISSIONS']]\ncdf.head(9)","03f05784":"plt.scatter(cdf.ENGINESIZE, cdf.CO2EMISSIONS,  color='blue')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")\nplt.show()","40bc5ddc":"msk = np.random.rand(len(df)) < 0.8\ntrain = cdf[msk]\ntest = cdf[~msk]","f3699589":"plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")\nplt.show()","98b546c8":"from sklearn import linear_model\nregr = linear_model.LinearRegression()\nx = np.asanyarray(train[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB']])\ny = np.asanyarray(train[['CO2EMISSIONS']])\nregr.fit (x, y)\n# The coefficients\nprint ('Coefficients: ', regr.coef_)","afeaca6d":"y_hat= regr.predict(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB']])\nx = np.asanyarray(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB']])\ny = np.asanyarray(test[['CO2EMISSIONS']])\nprint(\"Residual sum of squares: %.2f\"\n      % np.mean((y_hat - y) ** 2))\n\n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % regr.score(x, y))","ad067f91":"# write your code here\n\nfrom sklearn import linear_model\nregr = linear_model.LinearRegression()\nx = np.asanyarray(train[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY','FUELCONSUMPTION_HWY']])\ny = np.asanyarray(train[['CO2EMISSIONS']])\nregr.fit (x, y)\n# The coefficients\nprint ('Coefficients: ', regr.coef_)\n\ny_hat= regr.predict(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY','FUELCONSUMPTION_HWY']])\nx = np.asanyarray(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY','FUELCONSUMPTION_HWY']])\ny = np.asanyarray(test[['CO2EMISSIONS']])\nprint(\"Residual sum of squares: %.2f\"\n      % np.mean((y_hat - y) ** 2))\n\n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % regr.score(x, y))","dd446d3e":"__explained variance regression score:__  \nIf $\\hat{y}$ is the estimated target output, y the corresponding (correct) target output, and Var is Variance, the square of the standard deviation, then the explained variance is estimated as follow:\n\n$\\texttt{explainedVariance}(y, \\hat{y}) = 1 - \\frac{Var\\{ y - \\hat{y}\\}}{Var\\{y\\}}$  \nThe best possible score is 1.0, lower values are worse.","57c8b76e":"<h1>Table of contents<\/h1>\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n    <ol>\n        <li><a href=\"#understanding-data\">Understanding the Data<\/a><\/li>\n        <li><a href=\"#reading_data\">Reading the Data in<\/a><\/li>\n        <li><a href=\"#multiple_regression_model\">Multiple Regression Model<\/a><\/li>\n        <li><a href=\"#prediction\">Prediction<\/a><\/li>\n        <li><a href=\"#practice\">Practice<\/a><\/li>\n    <\/ol>\n<\/div>\n<br>\n<hr>","5a179fd8":"# Calculation of the parameters using Normal Equation and fitting the model","2f82bc1b":"# using plt.scatter and selecting the x axis by cdf.ENGINESIZE and the y axis by cdf.CO2EMISSIONS, a graph is plotted \n","35a1279f":"# Predicting values of CO2 emissions by using the model fitted so far and using the training set(20% of the original dataset)","3afe4386":"Lets plot Emission values with respect to Engine size:","108fb1a8":"# A description of the dataset we will be working on","455d483b":"<h2 id=\"reading_data\">Reading the data in<\/h2>","c7bef0ac":"# Splitting the dataset into training(80%) and test(20%)","39b18140":"Lets select some features that we want to use for regression.","3d31c94a":"<h2 id=\"practice\">Practice<\/h2>\nTry to use a multiple linear regression with the same dataset but this time use __FUEL CONSUMPTION in CITY__ and \n__FUEL CONSUMPTION in HWY__ instead of FUELCONSUMPTION_COMB. Does it result in better accuracy?","77d36883":"#### Train data distribution","ee6b654a":"# A graph plot showing  the training set","fb596fe8":"In reality, there are multiple variables that predict the Co2emission. When more than one independent variable is present, the process is called multiple linear regression. For example, predicting co2emission using FUELCONSUMPTION_COMB, EngineSize and Cylinders of cars. The good thing here is that Multiple linear regression is the extension of simple linear regression model.","4ad650ce":"### Importing Needed packages","8e7af457":"<h2>Want to learn more?<\/h2>\n\nIBM SPSS Modeler is a comprehensive analytics platform that has many machine learning algorithms. It has been designed to bring predictive intelligence to decisions made by individuals, by groups, by systems \u2013 by your enterprise as a whole. A free trial is available through this course, available here: <a href=\"http:\/\/cocl.us\/ML0101EN-SPSSModeler\">SPSS Modeler<\/a>\n\nAlso, you can use Watson Studio to run these notebooks faster with bigger datasets. Watson Studio is IBM's leading cloud solution for data scientists, built by data scientists. With Jupyter notebooks, RStudio, Apache Spark and popular libraries pre-packaged in the cloud, Watson Studio enables data scientists to collaborate on their projects without having to install anything. Join the fast-growing community of Watson Studio users today with a free account at <a href=\"https:\/\/cocl.us\/ML0101EN_DSX\">Watson Studio<\/a>\n\n<h3>Thanks for completing this Lab !<\/h3>\n\n","d834c52d":"#### Creating train and test dataset\nTrain\/Test Split involves splitting the dataset into training and testing sets respectively, which are mutually exclusive. After which, you train with the training set and test with the testing set. \nThis will provide a more accurate evaluation on out-of-sample accuracy because the testing dataset is not part of the dataset that have been used to train the data. It is more realistic for real world problems.\n\nThis means that we know the outcome of each data point in this dataset, making it great to test with! And since this data has not been used to train the model, the model has no knowledge of the outcome of these data points. So, in essence, it\u2019s truly an out-of-sample testing.\n\n","451cb6ca":"# the ' !wget ' function downloads the dataset from the given source \/ link. ","f16e3f56":"<h2 id=\"multiple_regression_model\">Multiple Regression Model<\/h2>\n","97496e6f":"\n<h2 id=\"understanding_data\">Understanding the Data<\/h2>\n\n### `FuelConsumption.csv`:\nWe have downloaded a fuel consumption dataset, **`FuelConsumption.csv`**, which contains model-specific fuel consumption ratings and estimated carbon dioxide emissions for new light-duty vehicles for retail sale in Canada. [Dataset source](http:\/\/open.canada.ca\/data\/en\/dataset\/98f1a129-f628-4ce4-b24d-6f16bf24dd64)\n\n- **MODELYEAR** e.g. 2014\n- **MAKE** e.g. Acura\n- **MODEL** e.g. ILX\n- **VEHICLE CLASS** e.g. SUV\n- **ENGINE SIZE** e.g. 4.7\n- **CYLINDERS** e.g 6\n- **TRANSMISSION** e.g. A6\n- **FUELTYPE** e.g. z\n- **FUEL CONSUMPTION in CITY(L\/100 km)** e.g. 9.9\n- **FUEL CONSUMPTION in HWY (L\/100 km)** e.g. 8.9\n- **FUEL CONSUMPTION COMB (L\/100 km)** e.g. 9.2\n- **CO2 EMISSIONS (g\/km)** e.g. 182   --> low --> 0\n","b820d01e":"# Training and predicting using highway and city as features instead of just combined","2d12eaab":"__Did you know?__ When it comes to Machine Learning, you will likely be working with large datasets. Is such cases we need to use the the cloud based datasets. There are various cloud service providers for big data. Like MS Azure, GCP, and IBM Cloud.  As a business, where can you host your data? IBM is offering a unique opportunity for businesses, with 10 Tb of IBM Cloud Object Storage: [Sign up now for free](http:\/\/cocl.us\/ML0101EN-IBM-Offer-CC)","4595772d":"# Feature Selection is done in the above code","599f8994":"np.random.rand(x) returns x random numbers with uniforms distribution over 0 to 1 (exclusive). When we apply the condition < 0.8 it returns True for every number which is less than 0.8 This will make sure that approximately 80 percent of values are True and rest are False. So, in essence you can have a 80\/20 train test split when you apply this mask to your original df. df[msk] will return every index for which the msk value is True. And ~msk means \"not equal to\" in df indexing.","4823204c":"<h2 id=\"prediction\">Prediction<\/h2>","2a781324":"# the above block of code will import the required libraries and the 'as' keyword creates an object that can be used to access the required functions present in the library","bf82ad44":"### Downloading Data\nTo download the data, we will use <a href=\"https:\/\/www.gnu.org\/software\/wget\/manual\/wget.html\"> !wget <\/a>to download it from IBM Object Storage.","c75019fa":"As mentioned before, __Coefficient__ and __Intercept__ , are the parameters of the fit line. \nGiven that it is a multiple linear regression, with 3 parameters, and knowing that the parameters are the intercept and coefficients of hyperplane, sklearn can estimate them from our data. Scikit-learn uses plain Ordinary Least Squares method to solve this problem.\n\n#### Ordinary Least Squares (OLS)\nOLS is a method for estimating the unknown parameters in a linear regression model. OLS chooses the parameters of a linear function of a set of explanatory variables by minimizing the sum of the squares of the differences between the target dependent variable and those predicted by the linear function. In other words, it tries to minimizes the sum of squared errors (SSE) or mean squared error (MSE) between the target variable (y) and our predicted output ($\\hat{y}$) over all samples in the dataset.\n\nOLS can find the best parameters using of the following methods:\n    - Solving the model parameters analytically using closed-form equations\n    - Using an optimization algorithm (Gradient Descent, Stochastic Gradient Descent, Newton\u2019s Method, etc.)","472deb47":"# Name - Alankar Uniyal\n# Roll No - A252\n# SAP ID - 70011118068","0c5f556b":"\n\n<h1><center>Machine Learning(IT) Sem V <\/center><\/h1>\n<h1><center>Lab on Multiple Linear Regression<\/center><\/h1>\n\n<h4>About this Notebook<\/h4>\nIn this notebook, we will learn how to use scikit-learn to implement Multiple linear regression. You need to download a dataset that is related to fuel consumption and Carbon dioxide emission of cars. Then, we split our data into training and test sets, create a model using training set, Evaluate your model using test set, and finally use model to predict unknown value\n"}}