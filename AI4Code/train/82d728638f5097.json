{"cell_type":{"0add8440":"code","8d99936c":"code","9d883dac":"code","8288a47d":"code","ef269bc0":"code","8f7b4a2e":"code","f8167c62":"code","349d4a07":"markdown","9a337975":"markdown","ef0125ab":"markdown","e1c163ec":"markdown","9509fa25":"markdown"},"source":{"0add8440":"# \uc124\uce58 \uc2e4\ud328\uc2dc, Internet On\/Off \ud655\uc778\n!pip install easydict","8d99936c":"import os, random, pickle\nfrom os.path import join\nfrom glob import glob\nfrom time import time\n\nfrom tqdm.notebook import tqdm\n\nfrom easydict import EasyDict as edict\n\nimport numpy as np\nfrom PIL import Image\n\nfrom sklearn.svm import OneClassSVM\n\nfrom sklearn.decomposition import PCA, KernelPCA\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nfrom IPython.display import HTML, display\n","9d883dac":"class MVTec_AD():\n    def __init__(self, DB_PATH, OUT_PATH, size=(86,86), flatten=True):\n        '''\n        DB_PATH : str. e.g. {workspace}\/dataset\n        size : (int, int). default (86, 86)\n        flatten : bool. [num_of_img_per_class, h*w]\/[num_of_img_per_class, h, w]\n        '''\n        self.DB_PATH = DB_PATH\n        self.out_path = OUT_PATH\n        self.size, self.flatten = size, flatten\n\n        self.class_names = ['bottle', 'cable', 'capsule', 'carpet', 'grid',\n                            'hazelnut', 'leather', 'metal_nut', 'pill', 'screw',\n                            'tile', 'transistor', 'wood', 'zipper']\n\n\n    def read_mvtec(self, cls=\"bottle\", mode='train'):\n        '''\n        input\n          cls : str. class name.\n          mode : str. {train, test, val}\n        output\n          db_dict : dict. \n                  if val in mode\n                   {'imgs':[num_of_img_per_class, h*w or h, w], 'labels':gt, 'class_name':class_name}\n                  else\n                   {'imgs':[num_of_img_per_class, h*w or h, w], 'class_name':class_name}\n        '''\n\n        # Load cache data.\n        CACHE_PATH = self.out_path + '\/cache'\n        cache_ = join(CACHE_PATH, mode)\n        if self.flatten: cache_+= 't_'\n        cache_+=f'{str(self.size)}_{cls}.pkl'\n\n        # if exist cache data return data\n        if os.path.isfile(cache_):\n            with open(cache_, 'rb') as f:\n                data = pickle.load(f)\n            return data\n        # else load imgs and cache data\n        else:\n            if os.path.isdir(CACHE_PATH)!=True:\n                os.mkdir(CACHE_PATH)\n\n            # load imgs\n            data = edict()  \n            if mode == 'val':\n                csv = pd.read_csv(join(self.DB_PATH, cls, 'val.csv'))\n                data.imgs = [f'{self.DB_PATH}\/{cls}\/test\/{csv.iloc[id, 0]:03d}.png' for id in csv.index]\n                data.labels = [csv.iloc[id, 1] for id in csv.index]\n            else:\n                data.imgs = sorted(glob(join(self.DB_PATH, cls, mode, '*.png')))\n\n            data.class_name = cls\n\n            data = self.read_img(data)\n\n            # cache data\n            with open(cache_, \"wb\") as f:\n                pickle.dump(data, f)\n\n            return data\n        \n    def read_img(self, db_dict):\n        im_path = db_dict.imgs\n        len_imgs = len(im_path)\n\n        db_dict.imgs = np.array([np.array(Image.open(im).convert(\"L\").resize(self.size)) for im in im_path])\n        if self.flatten:\n            db_dict.imgs = db_dict.imgs.reshape(len_imgs,-1)\n      \n        return db_dict","8288a47d":"import matplotlib.pyplot as plt\n\ndef plot_gallery(images, titles, h, w, n_row=3, n_col=4):\n    plt.figure(figsize=(1.8 * n_col, 2.4 * n_row))\n    plt.subplots_adjust(bottom=0, left=.01, right=.99, top=.90, hspace=.35)\n    for i in range(n_row * n_col):\n        plt.subplot(n_row, n_col, i + 1)\n        plt.imshow(images[i].reshape((h, w)), cmap=plt.cm.gray)\n        plt.title(titles[i], size=12)\n        plt.xticks(())\n        plt.yticks(())\n\ndef title(y_pred, y_test, target_names, i):\n    pred_name = target_names[y_pred[i]].rsplit(' ', 1)[-1]\n    true_name = target_names[y_test[i]].rsplit(' ', 1)[-1]\n    return 'predicted: %s\\ntrue:      %s' % (pred_name, true_name)","ef269bc0":"# load val, train data\nDB_PATH = \"..\/input\/2021-ml-tp2\/MVTecAD\"\nOUT_PATH = \".\/\"\n\nsize = (256, 256)\ncls = 'bottle'\ndataset = MVTec_AD(DB_PATH, OUT_PATH, flatten=True, size=size)\n\nval = dataset.read_mvtec(cls=cls, mode='val')\ntrain = dataset.read_mvtec(cls=cls, mode='train')\ntest = dataset.read_mvtec(cls=cls, mode='test')\n\n# \ud574\ub2f9 \ub370\uc774\ud130 \uc14b\uc740 \ube44\uc9c0\ub3c4 \ud559\uc2b5\uc744 \uc704\ud55c \ub370\uc774\ud130 \uc14b\uc774\uae30 \ub54c\ubb38\uc5d0,\n# train data\ub294 \uc815\uc0c1 \ucf00\uc774\uc2a4\uc758 \uc601\uc0c1\ub4e4\ub85c\ub9cc \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n# \ubca0\uc774\uc2a4 \ucf54\ub4dc\uc5d0\uc11c\ub294 train\uc758 key \uc815\ubcf4\uc640 \uac19\uc774 train\uc758 \ub77c\ubca8\uc744 \uc8fc\uc5b4\uc8fc\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n# \ub370\uc774\ud130 \uad6c\uc131\uc5d0 \ub300\ud55c \ub0b4\uc6a9\uc740 https:\/\/colab.research.google.com\/drive\/1pdgvoPs3KDLq6pV9oLxkXDh6waEp76HT?usp=sharing\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \ud574\ub2f9 \ubd80\ubd84\ub3c4 \ubcf4\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.\n# \uc704\uc758 URL \uc8fc\uc18c\ub294 Dataset \uc124\uba85\ub780\uc758 MVTecAD_colab\uacfc \ub3d9\uc77c\ud55c \uc8fc\uc18c\uc785\ub2c8\ub2e4.\n# ++ \ub9cc\uc57d\uc5d0 train\uc758 \ub77c\ubca8\uc774 \ud544\uc694\ud558\uc2e0 \ubd84\ub4e4\uc740 \uac01 \ud074\ub798\uc2a4\uc758 train \ud3f4\ub354\uc758 data.csv\ub97c \uc0ac\uc6a9\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.\nprint(train.keys())\nprint(val.keys())\nprint(test.keys())","8f7b4a2e":"# -------------------------------------\n# [Empty Module #1] Reconstruction based anomaly detection\n# -------------------------------------\n# \n# ------------------------------------------------------------\n# \uad6c\ud604 \uac00\uc774\ub4dc\ub77c\uc778 \n# ------------------------------------------------------------\n# [1] train.imgs\uc640 val.imgs \uc815\uaddc\ud654.\n# [2] PCA \ucd08\uae30\ud654 \ubc0f train imgs\ub97c \ud559\uc2b5\n# Baseline : PCA(n_components=n_components), random_state=777\n# [3] val imgs\ub97c transform.\n# [4] [3]\ub85c \uc5bb\uc740 val_pca\ub97c inverse_transform\uc744 \ud1b5\ud574 \ubcf5\uc6d0. scaler\uc758 \n# inverse_transform\uc744 \uc9c4\ud589 \ud6c4, (num_data_imgs, img_width, img_height)\ub85c reshape.\n# [5] Reconstruction_error = Original imgs - Reconstruction imgs\n# Original imgs : reshape (num_data_imgs, img_width, img_height)\ub97c \ud574\uc57c\ud569\ub2c8\ub2e4.\n # ------------------------------------------------------------\n\nn_components = 0.8\n    \n# [1]\n\n# [2]\n# pca = \n# pca.fit()\n\n# [3] val_pca = pca.transform(\uc815\uaddc\ud654\ub41c val.imgs)\n\n# [4] Reconstruction imgs = \n# hint. pca.inverse_transfrom()\n# hint. scaler.inverse_transfrom()\n# hint. reshape [num_of_img, width, height] \n\n# [5] \n# \ubcc0\uc218\uba85\n# ori = Original imgs ~ reshape [n_sample, w, h]\n# Reconstruction imgs\n\n# Reconstruction_error = Original imgs - Reconstruction_imgs\n\n\n#____________________\n# score & predict normal\/abnormal\nmin_max_scaler = MinMaxScaler()\n\ncls_score = Reconstruction_error.sum(axis=1).sum(axis=1)\ncls_score = min_max_scaler.fit_transform(cls_score.reshape(-1, 1))\n\ny_pred = cls_score\n\nth = 0.5\ny_pred[cls_score < th] = -1\ny_pred[cls_score > th] = 1\ny_pred = y_pred.reshape(-1)\n\n#____________________\n# metric. ROC_AUC\ngt_list = np.asarray(val.labels)\nfpr, tpr, _ = roc_curve(gt_list, cls_score)\nimg_roc_auc = roc_auc_score(gt_list, cls_score)\n\nplt.plot(fpr, tpr, label='%s ROCAUC: %.3f' % (cls, img_roc_auc))\nplt.title(f'{cls} ROCAUC: {img_roc_auc:.3f}')\n\nprint(f'{cls} ROCAUC: {img_roc_auc:.3f}')\n\n#____________________\n# Visualize\n# original\ntarget_names = {-1:'abnormal', 1:'normal'}\norginal_title = [f'{cls}_{target_names[label]}' for label in gt_list]\nplot_gallery(ori, orginal_title, size[0], size[1])\n\n\nprediction_titles = [title(y_pred, gt_list, target_names, i)\n                     for i in range(y_pred.shape[0])]\n# Reconstruction img                     \nplot_gallery(Reconstruction_imgs, prediction_titles, size[0], size[1])\n# Reconstruction error img                     \nplot_gallery(Reconstruction_error, prediction_titles, size[0], size[1])\n\n\nplt.show()\n#____________________","f8167c62":"DB_PATH = \"..\/input\/2021-ml-tp2\/MVTecAD\"\n\nOUT_PATH = '.\/'\nFIG_PATH = join(OUT_PATH, \"fig\")\nif os.path.isdir(FIG_PATH)!=True:\n    os.mkdir(FIG_PATH)\n\n# -------------------------------------\n# [Empty Module #2]\n# -------------------------------------\n# ------------------------------------------------------------\n# \uad6c\ud604 \uac00\uc774\ub4dc\ub77c\uc778 \n# ------------------------------------------------------------\n# Empty Module\n# [0] classification module\uacfc pca \ubaa8\ub378 \ucd08\uae30\ud654\n#  \uc0ac\uc6a9\ub41c PCA. e.g. PCA, RandomizePCA, KernelPCA...\n# Baseline : sklearn.svm.OneClassSVM, kernel=\"rbf\", gamma=0.001, nu=0.01\n# Baseline : PCA(n_components=n_components), random_state=777\n# RandomizePCA ~(svd_solver='randomized') \uc0ac\uc6a9\uc2dc, whiten=True\ub85c \uc0ac\uc6a9.\n# [1] train.imgs\uc640 val.imgs \uc815\uaddc\ud654.\n# [2] PCA \ucd08\uae30\ud654\uc640 \uc815\uaddc\ud654\ub41c train.imgs\ub97c \ud559\uc2b5 \ud6c4, \uc815\uaddc\ud654\ub41c train.imgs, val imgs\ub97c transform.\n# [3] OneClassSVM\uc744 \uc774\uc6a9\ud558\uc5ec \ucc28\uc6d0 \ucd95\uc18c\ub41c train \ud559\uc2b5 \ud6c4 val data \ucd94\ub860. \n# hint. OneClassSVM.predict, OneClassSVM.score_samples \uc0ac\uc6a9.\n# [4] test.imgs\uc5d0 [1]~[3]\uacfc \ub3d9\uc77c\ud55c \uacfc\uc815\uc744 \uc801\uc6a9. \ub2e8, \ucd94\ub860 \uc2dc score\uc5d0 \ub300\ud574\uc11c\ub9cc \uacc4\uc0b0\n\n\ndataset = MVTec_AD(DB_PATH, OUT_PATH, flatten=True, size=size)\n\nn_components=180\nsize = (86, 86)\n\n\ny_preds = []\ny_test = []\n\nroc_auc = dict()\ntotal_roc_auc = []\n\nplt.figure(figsize=[10, 10])\n# print(f'\\n=====clf:{clf_name}, DA:{dr_name}=====')\n# total_roc_auc = []\n\npbar = tqdm(dataset.class_names)\n\nsample_submit = pd.read_csv('..\/input\/2021-ml-tp2\/sample_submit.csv', index_col=0)\ni=0\nfor cls in pbar:\n\n    train = dataset.read_mvtec(cls=cls, mode='train')\n    val = dataset.read_mvtec(cls=cls, mode='val')\n    test = dataset.read_mvtec(cls=cls, mode='test')\n    \n    # [0]\n    # clf = ??\n    # pca = ??\n    \n    # [1]\n\n    # [2]\n\n    ## val\n    # [3]\n    # \ubcc0\uc218\uba85\n    # y_pred : clf.predict\n    # cls_score_val : clf.score_samples\n\n    ## test\n    #[4]\n    # \ubcc0\uc218\uba85\n    # cls_score : clf.score_samples\n\n    #####################\n    # eval~valid data\n    y_preds.append(y_pred)\n    gt_list = np.array(val.labels)\n    fpr, tpr, _ = roc_curve(gt_list, cls_score_val)\n    img_roc_auc = roc_auc_score(gt_list, cls_score_val)\n    total_roc_auc.append(img_roc_auc)\n    plt.plot(fpr, tpr, label='%s ROCAUC: %.3f' % (cls, img_roc_auc))\n\n\n    #=======================================================================\n    # Submit & prdict test data\n    sample_submit['score'][i:i+cls_score.shape[0]] = scaler.fit_transform(cls_score.reshape(-1,1)).reshape(-1)\n    i = i+cls_score_val.shape[0]\n    #=======================================================================\n\nprint('Average ROCAUC: %.3f' % np.mean(total_roc_auc))\nclf_name = type(clf).__name__\npca_name = type(pca).__name__\nplt.title(f'{clf_name}_{pca_name}_{n_components}\\nAverage image ROCAUC: {np.mean(total_roc_auc):.3f}' )\n\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc='lower right')\n\n# Result Figure\nplt.savefig(f'{FIG_PATH}\/{clf_name}_{pca_name}_{n_components}.jpg')\n\n# Submit CSV\nsample_submit.to_csv(f'.\/{clf_name}_{pca_name}_{n_components}.csv')","349d4a07":"#### Embedding feature based anomaly detection\n\n\uc774\ubc88 \ud140\ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\uc758 embedding feature based anomaly detection\uc740 randomized PCA\uc640 one-class SVM\uc744 \uc774\uc6a9\ud569\ub2c8\ub2e4.\n\ud30c\uc774\ud504\ub77c\uc778\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\n1. Randomized PCA\ub97c \uc774\uc6a9\ud558\uc5ec \uc815\uc0c1 \uc601\uc0c1\uc758 feature f\ub97c \ucd94\ucd9c\n2.  one-class SVM\uc744 \uc774\uc6a9\ud558\uc5ec f\uc758 support vector\ub97c \ud559\uc2b5\ud569\ub2c8\ub2e4.\n3. 1\uc5d0\uc11c \uc0ac\uc6a9\ub41c randomized PCA \uc774\uc0c1\/\uc815\uc0c1 \uc601\uc0c1\uc758 feature f_ts\ub97c \ucd94\ucd9c\ub2c8\ub2e4.\n4. one-class SVM\ub85c f_ts\uac00 \uc815\uc0c1 \ubd84\ud3ec \uacbd\uacc4\uc5d0 \ud3ec\ud568 \uc5ec\ubd80\ub85c \uc815\uc0c1\/\uc774\uc0c1\uc744 \ubd84\ub958\ud569\ub2c8\ub2e4.\n\n\nMetric : ROC_AUC [\uc704\ud0a4\ud53c\ub514\uc544](https:\/\/en.wikipedia.org\/wiki\/Receiver_operating_characteristic)","9a337975":"#### Reconstruction based anomaly detection\n\n\uc774\ubc88 \ud140\ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\uc758 Reconstruction based anomaly detection\uc740 PCA\ub85c \uc774\ub904\uc9c4 encoder\uc640 decoder\ub97c \uc774\uc6a9\ud569\ub2c8\ub2e4. \n\ud30c\uc774\ud504\ub77c\uc778\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\n1. PCA\ub97c \uc774\uc6a9\ud558\uc5ec \uc815\uc0c1 \uc601\uc0c1\uc73c\ub85c \uad6c\uc131\ub41c train data\uc758 \uc8fc\uc131\ubd84\uc744 \ucd94\ucd9c\ud558\uc5ec train data\ub97c  feature f\ub85c n_component \ud06c\uae30\uac00 \ub418\ub3c4\ub85d \ucc28\uc6d0 \ucd95\uc18c(feature \ucd94\ucd9c)\n2. \uc815\uc0c1\/\uc774\uc0c1 \uc601\uc0c1\uc774 \ud3ec\ud568\ub41c test data\uc5d0 1\uc5d0\uc11c \uc801\uc6a9\ub41c PCA\ub85c featrue f_test \ucd94\ucd9c\n3. featrue f_test\ub97c \ubcf5\uc6d0\n4. \uc6d0\ubcf8 \uc601\uc0c1\uacfc \ubcf5\uc6d0 \uc601\uc0c1\uc758 \ucc28\ub97c \uad6c\ud558\uc5ec socre\ub97c \ucd94\ucd9c\n\n","ef0125ab":"## Dataloader\n\n### MVTEC AD\n\uc774\ubc88 \ud140\ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub294 \uc0b0\uc5c5 \ubd84\uc57c \uc911 \uc81c\uc870\uc5c5 \ubd84\uc57c\uc5d0\uc11c\uc758 \ube44\uc9c0\ub3c4 \ud559\uc2b5 \uae30\ubc18 \uc774\uc0c1 \uac80\ucd9c \ub370\uc774\ud130 \uc14b MVTEC AD([homepage](https:\/\/www.mvtec.com\/company\/research\/datasets\/mvtec-ad), [pdf](https:\/\/www.mvtec.com\/fileadmin\/Redaktion\/mvtec.com\/company\/research\/datasets\/mvtec_ad.pdf))\ub97c \uc774\uc6a9\ud558\uc5ec \uc774\uc0c1 \uc0c1\ud669 \uac80\ucd9c\uc744 \ud480\uc5b4\ubcf4\uace0\uc790\ud569\ub2c8\ub2e4.  \ud574\ub2f9 \ub370\uc774\ud130 \uc14b\uc740 \uc544\ub798\uc640 \uac19\uc774 \ucd1d 15\uac00\uc9c0\uc758 \ud074\ub798\uc2a4\ub97c \uac00\uc9c4 \uc601\uc0c1\uc744 \uc81c\uacf5\ud558\uba70,  \uac01 \ud074\ub798\uc2a4\uc5d0 \ud574\ub2f9\ud558\ub294 \uc81c\uc870\uc5c5\uc5d0\uc11c \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \uc774\uc0c1 \uc0c1\ud669(\ud488\uc9c8 \ubd88\ub7c9)\uc744 \uc778\uc704\uc801\uc73c\ub85c \uc0dd\uc131\ud558\uc600\uc73c\uba70, \uc601\uc0c1\uc5d0\uc11c\uc758 \uc81c\uc870\ud488\uc774 \uba85\ud655\ud558\ub3c4\ub85d \uc124\uacc4\ub41c \uc870\uba85\uacfc \ubc30\uacbd\uacfc \uc601\uc0c1 \uac00\uc6b4\ub370\uc5d0 \uc704\uce58\ud558\ub3c4\ub85d \ucd2c\uc601\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uac01 \ud074\ub798\uc2a4\uc758 \uc608\uc81c \uc601\uc0c1\ub4e4\uc740 Overview-Description Fig 1\uc5d0\uc11c \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ub370\uc774\ud130 \uc14b \uad6c\uc131\uc740 [MVTecAD_colab](https:\/\/colab.research.google.com\/drive\/1pdgvoPs3KDLq6pV9oLxkXDh6waEp76HT?usp=sharing)\uc5d0\uc11c\ub3c4 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n<br>\n\n#### \ub370\uc774\ud130 \uc14b \uad6c\uc131\n\n\ub370\uc774\ud130 \uc14b\uc758 \uc601\uc0c1 \uac2f\uc218\ub294 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\ntrain : 3629\uc7a5 -> \uc815\uc0c1 \uc0c1\ud669\uc5d0 \ud574\ub2f9\ud558\ub294 \uc601\uc0c1\ub9cc \uc874\uc7ac.<br>\ntest : 467(good) + 1258(fault case) -> \uc815\uc0c1 \uc0c1\ud669\uc5d0\uc11c\uc758 \uc601\uc0c1(good)\uacfc \uc774\uc0c1 \uc0c1\ud669\uc5d0\uc11c\uc758 \uc601\uc0c1(failt case)\ub85c \uad6c\uc131. <br>\nall : 5354\uc7a5 <br>\n\n\ub370\uc774\ud130 \ud30c\uc77c\uc758 \uad6c\uc870\ub294 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\n{ClassName} Original dataset\uacfc \ub3d9\uc77c <br>\n|--val.csv : col1 : ID. test \uc601\uc0c1 \ud30c\uc77c\uba85, col2 : label. good:1, fault:-1 <br>\n|--train <br>\n|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|---good <br>\n|__test <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|--- good&fault case <br>","e1c163ec":"## \uc0b0\uc5c5 \ud658\uacbd \uc0c1\uc758  \uc601\uc0c1 \uae30\ubc18 \ube44\uc815\uc0c1 \ucf00\uc774\uc2a4 \uac80\ucd9c\n\n\uc774\uc0c1 \uc0c1\ud669 \uac80\ucd9c\uc774\ub780, \ub370\uc774\ud130\uc5d0\uc11c \uc608\uc0c1\uacfc\ub294 \ub2e4\ub978 \ud328\ud134\uc744 \ubcf4\uc774\ub294 \uac1c\uccb4 \ub610\ub294 \uc790\ub8cc\ub97c \ucc3e\ub294 \uac83\uc744 \ub9d0\ud569\ub2c8\ub2e4. \n\ub2e4\uc591\ud55c \ubd84\uc57c\uc5d0\uc11c \uc0ac\uc6a9\ub418\uc5b4\uc9c0\uba70, \uac01 \ubd84\uc57c \ubcc4 \uc0ac\uc6a9 \uc608\uc2dc\ub294 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\n-  \uc0ac\uc774\ubc84 \ubcf4\uc548. e.g. \ube44\uc815\uc0c1\uc801\uc778 \ud2b8\ub798\ud53d \ud328\ud134\uc744 \uac10\uc9c0\n-  \uc758\ud559 \ubd84\uc57c. e.g. MRI \uc774\ubbf8\uc9c0\ub85c\ubd80\ud130\uc758 \uc545\uc131 \uc885\uc591 \uac80\ucd9c\n-  \uae08\uc735 \ubd84\uc57c. e.g. \uc2e0\uc6a9\uce74\ub4dc \uac70\ub798 \ub0b4\uc5ed\uc758 \uc774\uc0c1 \uac80\ucd9c\uc744 \ud1b5\ud55c \ubd84\uc2e4 \ubc0f \ub3c4\ub09c \uac10\uc9c0\n-  \ud589\ub3d9 \ud328\ud134 \ubd84\uc57c. e.g. CCTV\ub97c \ud1b5\ud55c \uc774\uc0c1 \ud328\ud134 \uac10\uc9c0\ub97c \ud1b5\ud55c \uc0ac\uace0 \ubc29\uc9c0\n-  \uc0b0\uc5c5 \ubd84\uc57c. e.g.  \uc0dd\uc0b0\ub41c \uc81c\ud488\uc758 \ud488\uc9c8 \uac80\uc0ac   <br>\n\n \uc774\uc0c1 \uc0c1\ud669\uc740 \uc704\uc758 \uc608\uc2dc\uc640 \uac19\uc774 \ub4dc\ubb3c\uac8c \ub098\ud0c0\ub098\uba70 \ud2b9\uc815\ud558\uae30 \ud798\ub4e0 \ud615\ud0dc\ub85c \ub098\ud0c0\ub098\ub294 \uacbd\uc6b0\uac00 \ub9ce\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \ud2b9\uc131\uc0c1 \ud2b9\uc815 \ubd84\ud3ec\ub85c \uc815\uc758\ud558\uae30 \ud798\ub4e4\uc5b4, \uc815\uc0c1 \ub370\uc774\ud130\uc640 \ub2e4\ub978 \ubd84\ud3ec\ub97c \uac00\uc9c4 \ub370\uc774\ud130\ub97c \uc774\uc0c1 \uc0c1\ud669\uc774\ub77c\uace0 \uce6d\ud569\ub2c8\ub2e4. \ud639\uc740 \ub2e4\ub978 \uad00\uc810\uc73c\ub85c\ub294 \uae30\uc874 \ub370\uc774\ud130 \ubd84\ud3ec\uc640 \ub2e4\ub978 \uc0c8\ub85c\uc6b4 \ubd84\ud3ec\ub97c \uac00\uc9c4 \ub370\uc774\ud130\ub97c \ucc3e\ub294\ub2e4\uace0 \ud558\uc5ec novelty detection\ub77c\uace0\ub3c4 \ubd88\ub9ac\uae30\ub3c4 \ud569\ub2c8\ub2e4. \uc774\ucc98\ub7fc \ud2b9\uc815 \ubd84\ud3ec\ub97c \uc815\uc758\ud558\uae30 \ud798\ub4e0 \ud2b9\uc131\uc0c1  \uc774\uc0c1\uc0c1\ud669\uc5d0 \ub300\ud55c \ub370\uc774\ud130 \uc14b\uc744 \uad6c\ucd95\ud558\uae30 \ub9e4\uc6b0 \ud798\ub4ed\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc0ac\uc720\ub85c \ub300\ubd80\ubd84\uc758 \uc774\uc0c1\uc0c1\ud669 \uac80\ucd9c\ub4e4\uc740 \uc774\uc0c1\uc0c1\ud669\uc5d0 \ub300\ud55c \ub370\uc774\ud130\uc640 \ub77c\ubca8\uc774 \ud544\uc694\ud55c \uc9c0\ub3c4\ud559\uc2b5\ubcf4\ub2e4\ub294 \ub77c\ubca8\uc774 \ubd88\ud544\uc694\ud55c \ube44\uc9c0\ub3c4 \ud559\uc2b5 \ud639\uc740 \uc900 \ube44\uc9c0\ub3c4 \ud559\uc2b5\uc744 \uae30\ubc18\uc73c\ub85c \ubb38\uc81c\ub97c \ud574\uacb0\ud569\ub2c8\ub2e4. \n\n \uc774\ubc88 \ud140\ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub294 \ub2e4\uc591\ud55c \ubd84\uc57c \uc911 \uc0b0\uc5c5 \ud658\uacbd \uc0c1\uc758 \uc774\uc0c1 \uc0c1\ud669 \uac80\ucd9c \ubb38\uc81c\ub97c \ub2e4\ub8f0 \uc608\uc815\uc785\ub2c8\ub2e4. \ud574\ub2f9 \ubb38\uc81c\ub294 MVTec AD \ub370\uc774\ud130 \uc14b\uc744 \uc774\uc6a9\ud558\uc5ec \ube44\uc9c0\ub3c4 \ud559\uc2b5 \uae30\ubc18\uc758 \uc774\uc0c1 \uc0c1\ud669 \uac80\ucd9c\uc744 \uad6c\ud604\ud569\ub2c8\ub2e4. \ube44\uc9c0\ub3c4 \ud559\uc2b5 \uae30\ubc18 \uac80\ucd9c\uae30\ub294 \uc218\uc5c5\uc5d0\uc11c \ub2e4\ub8ec \ucc28\uc6d0 \ucd95\uc18c \uc54c\uace0\ub9ac\uc998 PCA(Principal Compoent Analysis)\uc640  \ubd84\ub958\uae30\uc778 SVM(Support-Vector Machine)\ub958\uc758 \ubaa8\ub378 One-class SVM\uc744 \ub2e4\ub904\ubcfc \uc608\uc815 \uc785\ub2c8\ub2e4.","9509fa25":"## \uc774\uc0c1 \uc0c1\ud669 \uac80\ucd9c(Anomaly Detection)\n\n \uc774\ubc88 \ud140\ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub294 \uc774\uc0c1 \uc0c1\ud669 \uac80\ucd9c\uc744 \uc704\ud55c \ud3c9\uac00 \ubc29\ubc95 \uc911 \ud558\ub098\uc758 \ud074\ub798\uc2a4\uc5d0\uc11c \uc774\uc0c1\uce58\ub97c \ucc3e\ub294 \uac83\uc744 \ubaa9\uc801\uc73c\ub85c\ud55c One-classification \ubc29\ubc95\uc744 \uc774\uc6a9\ud558\uc5ec \uc774\uc0c1 \uc0c1\ud669\uc744 \ud3c9\uac00\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. One-classification\uc744 \uac04\ub2e8\ud558\uac8c \uc124\uba85\ub4dc\ub9ac\uc790\uba74 \uac01 \ud074\ub798\uc2a4 \ubcc4 \ud559\uc2b5\uacfc \ud3c9\uac00\ub97c \ubcc4\ub3c4\ub85c \uc9c4\ud589\ud569\ub2c8\ub2e4. \uc989, MVTecAD\uc758 14\uac00\uc9c0 \ud074\ub798\uc2a4 \ubcc4 \ucd94\ub860\uacfc \ud3c9\uac00\ub97c \uc9c4\ud589\ud569\ub2c8\ub2e4.  \uc0ac\uc6a9\ub418\ub294 \ud3c9\uac00 \uba54\ud2b8\ub9ad\uc740 ROC\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\n\uc774\ubc88 \ud140\ud504\uc5d0\uc11c\ub294 \uc601\uc0c1 \uae30\ubc18\uc758 \uc774\uc0c1 \uc0c1\ud669 \uac80\ucd9c\uc744 \uc801\uc6a9\ub418\uba70 \ud06c\uac8c \ub450\uac00\uc9c0\ub85c \ubd84\ub958\ub418\uc5b4\uc9d1\ub2c8\ub2e4.\n\n- Reconstruction based anomaly detection\n  - \uc815\uc0c1 \uc601\uc0c1\uc73c\ub85c\ubd80\ud130 \uc815\uc0c1\uc801 \ud2b9\uc131\uc744 \uc798\ud45c\ud604\ud558\ub294 feature\ub97c \ucd94\ucd9c\ud558\ub294 encoder\uc640\n  - \ucd94\ucd9c\ub41c feature\ub97c \uc6d0\ubcf8 \uc601\uc0c1\uacfc \uc720\uc0ac\ud558\uac8c \ubcf5\uc6d0\ud558\ub294 Decoder\ub85c \uad6c\uc131\n  - \uc815\uc0c1\uc801\uc778 \ub370\uc774\ud130\ub85c \ud559\uc2b5\ub41c encoder-decoder\ub85c \uc774\uc0c1 \uc601\uc0c1\uc744 \ubcf5\uc6d0 \uc2dc, \uc815\uc0c1 \uc601\uc0c1\uacfc \uc720\uc0ac\ud558\ub3c4\ub85d \ubcf5\uc6d0 \uc601\uc0c1\uc744 \uc0dd\uc131\ub420 \uac83\uc774\ub77c\uace0 \uac00\uc815\uc744 \ud568.\n  - \uc785\ub825 \uc601\uc0c1 I\uacfc encoder-decoder\ub85c \ubcf5\uc6d0\ub41c \uc601\uc0c1 I'\uc758 \ucc28\uc774\ub97c \uc815\uc0c1\/\uc774\uc0c1\uc5d0 \ub300\ud55c \ubd84\ub958 \uc810\uc218\ub85c \uc0ac\uc6a9.\n  - \uc774\uc0c1 \uc601\uc0c1\uacfc \ubcf5\uc6d0 \uc601\uc0c1(\uc774\uc0c1)\uc758 \ucc28\uc774\ub294 \ud06c\uace0, \uc815\uc0c1 \uc601\uc0c1\uacfc \ubcf5\uc6d0 \uc601\uc0c1(\uc815\uc0c1)\uc758 \ucc28\uc774\ub294 \uc791\uc74c\n- Embedding feature based anomaly detection\n  - \uc815\uc0c1 \uc601\uc0c1\uc758 \uc815\uc0c1\uc801\uc778 \ud2b9\uc131\uc744 \ud559\uc2b5\ud55c feature extrator\ub97c \uc774\uc6a9\ud558\uc5ec  \uc815\uc0c1\/\uc774\uc0c1 \uc601\uc0c1\uc758 feature\ub97c \ucd94\ucd9c\n  - \uc815\uc0c1 feature\uc758 \ubd84\ud3ec \uacbd\uacc4\ub97c \uc798 \ubc30\uc6b0\ub3c4\ub85d \ubaa8\ub378\uc744 \ud559\uc2b5\n  - \uc815\uc0c1 feature\uc758 \ubd84\ud3ec \uacbd\uacc4\uc5d0 \ubc97\uc5b4\ub098\ub294 \uacbd\uc6b0 \uc774\uc0c1\uce58\ub85c \uac80\ucd9c\n\n\ud140\ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub294 PCA\ub97c \ud65c\uc6a9\ud558\uc5ec \uc704\uc758 \ub450 \uac00\uc9c0 \ubc29\ubc95\uc744 \uc801\uc6a9\ud558\ub294 \uac83\uc774 \ubaa9\ud45c\uc785\ub2c8\ub2e4. "}}