{"cell_type":{"76780994":"code","5f4a3183":"code","f2540aa1":"code","468aafff":"code","c5de4fef":"code","4e5afea6":"code","59de9aab":"code","1e30389a":"code","b34a9bfc":"code","b6bcf320":"code","f2d277ff":"code","e384cb63":"code","96d67324":"code","b91e1a93":"code","9f6d78b5":"code","ca4ce790":"code","c9329f92":"code","69a1732e":"code","5b0cbf64":"code","138ac599":"code","92d3c5c2":"code","5c875178":"code","e06017fa":"code","8527d986":"markdown","cf4b10ba":"markdown","acaa1b56":"markdown","2db308d2":"markdown","ca16116e":"markdown","28905b7a":"markdown","6c23c0e9":"markdown"},"source":{"76780994":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf","5f4a3183":"data = pd.read_csv('..\/input\/xAPI-Edu-Data\/xAPI-Edu-Data.csv')","f2540aa1":"data","468aafff":"data.info()","c5de4fef":"data.isna().sum()","4e5afea6":"def get_uniques(df, columns):\n    return {column: list(df[column].unique()) for column in columns}\n\ndef get_categorical_columns(df):\n    return [column for column in df.columns if df.dtypes[column] == 'object']","59de9aab":"get_uniques(data, get_categorical_columns(data))","1e30389a":"binary_features = ['gender', 'Semester', 'Relation', 'ParentAnsweringSurvey', 'ParentschoolSatisfaction', 'StudentAbsenceDays']\n\nordinal_features = ['StageID', 'GradeID']\n\nnominal_features = ['NationalITy', 'PlaceofBirth', 'SectionID', 'Topic']\n\n\ntarget_column = 'Class'","b34a9bfc":"binary_positive_values = ['M', 'S', 'Father', 'Yes', 'Good', 'Above-7']\n\nstage_ordering = ['lowerlevel', 'MiddleSchool', 'HighSchool']\ngrade_ordering = [\n    'G-02',\n    'G-04',\n    'G-05',\n    'G-06',\n    'G-07',\n    'G-08',\n    'G-09',\n    'G-10',\n    'G-11',\n    'G-12'\n]\n\nnominal_prefixes = ['N', 'B', 'S', 'T']","b6bcf320":"def binary_encode(df, column, positive_value):\n    df = df.copy()\n    df[column] = df[column].apply(lambda x: 1 if x == positive_value else 0)\n    return df\n\ndef ordinal_encode(df, column, ordering):\n    df = df.copy()\n    df[column] = df[column].apply(lambda x: ordering.index(x))\n    return df\n\ndef onehot_encode(df, column, prefix):\n    df = df.copy()\n    dummies = pd.get_dummies(df[column], prefix=prefix)\n    df = pd.concat([df, dummies], axis=1)\n    df = df.drop(column, axis=1)\n    return df","f2d277ff":"for feature, positive_value in zip(binary_features, binary_positive_values):\n    data = binary_encode(data, feature, positive_value)","e384cb63":"data = ordinal_encode(data, 'StageID', stage_ordering)\ndata = ordinal_encode(data, 'GradeID', grade_ordering)","96d67324":"for feature, prefix in zip(nominal_features, nominal_prefixes):\n    data = onehot_encode(data, feature, prefix)","b91e1a93":"target_ordering = ['L', 'M', 'H']\ndata = ordinal_encode(data, target_column, target_ordering)","9f6d78b5":"data","ca4ce790":"y = data[target_column]\nX = data.drop(target_column, axis=1)","c9329f92":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)","69a1732e":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8)","5b0cbf64":"X.shape","138ac599":"inputs = tf.keras.Input(shape=(55,))\nx = tf.keras.layers.Dense(64, activation='relu')(inputs)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\noutputs = tf.keras.layers.Dense(3, activation='softmax')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)\n\n\nbatch_size = 64\nepochs = 16\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=batch_size,\n    epochs=epochs,\n    verbose=0\n)","92d3c5c2":"fig = px.line(\n    history.history,\n    y=['loss', 'val_loss'],\n    labels={'index': \"Epoch\", 'value': \"Loss\"},\n    title=\"Training and Validation Loss\"\n)\n\nfig.show()","5c875178":"np.argmin(history.history['val_loss'])","e06017fa":"model.evaluate(X_test, y_test)","8527d986":"# Getting Started","cf4b10ba":"# Preprocessing","acaa1b56":"## Splitting and Scaling","2db308d2":"## Encoding","ca16116e":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/ZuoBlgioKO0","28905b7a":"# Training","6c23c0e9":"# Task for Today  \n\n***\n\n## Predicting Academic Performance  \n\nGiven *data about students' performances in school*, let's try to predict whether a given student will have a **high, medium, or low grade**.\n\nWe will use a TensorFlow ANN to make our predictions."}}