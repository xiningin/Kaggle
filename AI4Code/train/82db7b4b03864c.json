{"cell_type":{"e70d6c22":"code","66ed20f5":"code","2ab4bae9":"code","bcbf5ef6":"code","e297a062":"code","37dd71ba":"code","50a3b77d":"code","f9db6489":"code","a7d61d0c":"code","2b90a098":"code","2a88b4e9":"code","83fa624b":"code","7f4c9509":"code","b5cedfc7":"code","ceade9c2":"code","c3fb35db":"code","11a2bff1":"code","5ca872b5":"code","4bc04fc4":"code","d21945d6":"code","a1549364":"code","cb1a27a6":"code","1a95b251":"code","ad5c430c":"code","f0d4ad7d":"code","d6a770bc":"code","eb4a0ccf":"code","af43708d":"code","25f76832":"code","8bae55ce":"code","73e2dbf9":"code","0273184a":"code","17dfa47d":"code","f8948d81":"code","11a803a6":"code","3e55820f":"code","32ff6849":"code","141b4089":"code","808fe5d1":"code","0bcd6689":"markdown","e06a81dc":"markdown"},"source":{"e70d6c22":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","66ed20f5":"data = pd.read_csv(\"\/kaggle\/input\/student-alcohol-consumption\/student-mat.csv\")","2ab4bae9":"data.head()","bcbf5ef6":"sns.countplot(x = data.G3)\nplt.show()","e297a062":"plt.figure(figsize = (14,14))\nsns.heatmap(data.corr(),annot = True)\nplt.show()","37dd71ba":"data.columns","50a3b77d":"data.sex=[1 if i == \"M\" else 0 for i in data.sex]","f9db6489":"data.famsize=[1 if i == \"GT3\" else 0 for i in data.famsize]","a7d61d0c":"data.address=[1 if i == \"U\" else 0 for i in data.address]","2b90a098":"data.internet=[1 if i == \"yes\" else 0 for i in data.internet]","2a88b4e9":"data.romantic=[1 if i == \"yes\" else 0 for i in data.romantic]","83fa624b":"data.Pstatus=[1 if i == \"A\" else 0 for i in data.Pstatus]","7f4c9509":"data.schoolsup=[1 if i == \"yes\" else 0 for i in data.schoolsup]","b5cedfc7":"data.famsup=[1 if i == \"yes\" else 0 for i in data.famsup]","ceade9c2":"data.paid=[1 if i == \"yes\" else 0 for i in data.paid]","c3fb35db":"data.activities=[1 if i == \"yes\" else 0 for i in data.activities]","11a2bff1":"data.nursery=[1 if i == \"yes\" else 0 for i in data.nursery]","5ca872b5":"data.higher=[1 if i == \"yes\" else 0 for i in data.higher]","4bc04fc4":"data.school=[1 if i == \"yes\" else 0 for i in data.school]","d21945d6":"data = pd.get_dummies(data,columns = [\"famsize\"])","a1549364":"data = pd.get_dummies(data,columns = [\"Mjob\"])","cb1a27a6":"data = pd.get_dummies(data,columns = [\"Fjob\"])","1a95b251":"data = pd.get_dummies(data,columns = [\"reason\"])","ad5c430c":"data = pd.get_dummies(data,columns = [\"guardian\"])","f0d4ad7d":"#data = pd.get_dummies(data,columns = [\"traveltime\"])\n#data = pd.get_dummies(data,columns = [\"famrel\"])\n#data = pd.get_dummies(data,columns = [\"studytime\"])\n#data = pd.get_dummies(data,columns = [\"failures\"])\n#data = pd.get_dummies(data,columns = [\"freetime\"])\n#data = pd.get_dummies(data,columns = [\"goout\"])\n#data = pd.get_dummies(data,columns = [\"Dalc\"])\n#data = pd.get_dummies(data,columns = [\"Walc\"])\n#data = pd.get_dummies(data,columns = [\"health\"])\n#data = pd.get_dummies(data,columns = [\"Medu\"])\n#data = pd.get_dummies(data,columns = [\"Fedu\"])","d6a770bc":"data.absences = (data.absences-data.absences.min())\/(data.absences.max()-data.absences.min())\ndata.age = (data.age-data.age.min())\/(data.age.max()-data.age.min())\ndata.Fedu = (data.Fedu-data.Fedu.min())\/(data.Fedu.max()-data.Fedu.min())\ndata.Medu = (data.Medu-data.Medu.min())\/(data.Medu.max()-data.Medu.min())\ndata.health = (data.health-data.health.min())\/(data.health.max()-data.health.min())\ndata.traveltime = (data.traveltime-data.traveltime.min())\/(data.traveltime.max()-data.traveltime.min())\ndata.famrel = (data.famrel-data.famrel.min())\/(data.famrel.max()-data.famrel.min())\ndata.studytime = (data.studytime-data.studytime.min())\/(data.studytime.max()-data.studytime.min())\ndata.failures = (data.failures-data.failures.min())\/(data.failures.max()-data.failures.min())\ndata.freetime = (data.freetime-data.freetime.min())\/(data.freetime.max()-data.freetime.min())\ndata.goout = (data.goout-data.goout.min())\/(data.goout.max()-data.goout.min())\ndata.Dalc = (data.Dalc-data.Dalc.min())\/(data.Dalc.max()-data.Dalc.min())\ndata.Walc = (data.Walc-data.Walc.min())\/(data.Walc.max()-data.Walc.min())","eb4a0ccf":"data.drop(labels=\"G1\",axis = 1,inplace = True)","af43708d":"data.drop(labels=\"G2\",axis = 1,inplace = True)","25f76832":"data.columns","8bae55ce":"data.G3","73e2dbf9":"data.G3=[1 if i > 9  else 0 for i in data.G3]","0273184a":"data.G3","17dfa47d":"y = data[\"G3\"].values\nx=data.drop([\"G3\"],axis=1)\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 31)","f8948d81":"from sklearn.neighbors import KNeighborsClassifier\nneig = np.arange(1, 25)\ntrain_accuracy = []\ntest_accuracy = []\nfor i, k in enumerate(neig):\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(x_train,y_train)\n    train_accuracy.append(knn.score(x_train, y_train))\n    test_accuracy.append(knn.score(x_test, y_test))\nprint(\"Best accuracy is {} with K = {}\".format(np.max(test_accuracy),1+test_accuracy.index(np.max(test_accuracy))))","11a803a6":"from sklearn.svm import SVC\nsvclassifier = SVC(kernel='linear')\nsvclassifier.fit(x_train, y_train)\ny_pred = svclassifier.predict(x_test)\nsvclassifier.score(x_test,y_test)","3e55820f":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train,y_train)\nprint(lr.score(x_test,y_test)*100)","32ff6849":"y_pred = lr.predict(x_test)\ny_true = y_test\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_true,y_pred)\nf, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.title(\"Confision Matrix\")\nplt.show()","141b4089":"from sklearn.ensemble import RandomForestClassifier\nrt=RandomForestClassifier(n_estimators=38,random_state=1)\nrt.fit(x_train,y_train)\n\nprint(\"score: \",rt.score(x_test,y_test)) ","808fe5d1":"score_list2=[]\nfor i in range(1,50):\n    rt2=RandomForestClassifier(n_estimators=i,random_state=1)\n    rt2.fit(x_train,y_train)\n    score_list2.append(rt2.score(x_test,y_test))\n\nplt.figure(figsize=(12,8))\nplt.plot(range(1,50),score_list2)\nplt.xlabel(\"Esimator values\")\nplt.ylabel(\"Acuuracy\")\nplt.show()","0bcd6689":"# Best accuracy is 72% for now \n# If I play heads or tails, I get more accurate results\n## But i will improve\n","e06a81dc":"Effective: medu-fedu-failures-age-traveltime  \nage-abseces  \ntraveltime\/failrules-walc\/dalc  "}}