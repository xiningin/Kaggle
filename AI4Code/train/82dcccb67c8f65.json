{"cell_type":{"8a29f0e8":"code","4ebdc2d2":"code","782d3d9b":"code","92874ecb":"code","638213d5":"code","30e8f3c1":"code","b323d4a3":"code","a9948048":"code","80b3fa2d":"code","f59b6a02":"code","7692b13d":"code","65bc226f":"code","eb3195b9":"code","0845cafd":"code","38c5e458":"code","09531fc2":"code","7562217f":"code","31de873c":"code","d2d5a74d":"code","68d60310":"code","0beb315b":"code","72d0b1cc":"code","e97d8e4e":"code","7f5b484b":"code","025f6a65":"code","f548db1a":"code","bbce55eb":"code","cca50c23":"code","2b744b7e":"code","a92b1b9c":"code","ec9cd15d":"code","15ffe23d":"code","8ff3c8a6":"code","ff185715":"code","dec7798f":"code","e4fecef8":"code","e5469183":"code","6429dfc1":"code","8c69180b":"code","4cd780c7":"code","c5e2c4eb":"code","e0b32432":"markdown","a1d19353":"markdown","e93c72f2":"markdown","3b44c6f8":"markdown","e670e12e":"markdown","39ef63f7":"markdown","a3ab0f65":"markdown","a2f18b96":"markdown","e4cb529b":"markdown","26a05e57":"markdown","ee069c48":"markdown","9462281a":"markdown","02809bce":"markdown","b0e2b0b0":"markdown","c545a1b2":"markdown","10fa4d00":"markdown","2642800a":"markdown","4333e94c":"markdown","82799869":"markdown","54e5092a":"markdown","bea36cae":"markdown","9a367805":"markdown","41fb0567":"markdown","011f259c":"markdown","9cc2a620":"markdown","9f182b60":"markdown","43a9192d":"markdown","2917c7c0":"markdown"},"source":{"8a29f0e8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings('ignore') \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4ebdc2d2":"df = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')\ndf.head()","782d3d9b":"#make the Id column as index\ndf = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv', index_col='Id')\ndf.tail()","92874ecb":"#Rename columns\ndf.rename({'SepalLengthCm': 'sepal_length',\n           'SepalWidthCm': 'sepal_width',\n           'PetalLengthCm': 'petal_length',\n           'PetalWidthCm': 'petal_width',\n           'Species': 'species'          \n          }, inplace=True,axis=1)\ndf.sample(5)","638213d5":"#calculate median of each species\nx = df.groupby('species').median()\nx","30e8f3c1":"#Statistics of this dataset\nstats = df.describe()\nstats","b323d4a3":"#calculate range, and move columns 25%,50%,75%  and mean values into a dataframe\nstats.loc['range'] = stats.loc['max'] - stats.loc['min']\nnew_df = stats.loc[['mean', 'range', '25%', '50%', '75%']]\nnew_df.rename({'50%': 'median'}, inplace=True)\nnew_df","a9948048":"#Calculate mean and median or others using multiple functions at once - 2 methods\n\ndf.groupby('species').agg(['mean', 'median'])  # passing a list of recognized strings\ndf.groupby('species').agg([np.mean, np.median]) ","80b3fa2d":"#If we want an explicit aggr function like max for a column\nagg_dict={field: ['mean', 'median'] for  field in df.columns.tolist() if field != 'species'}\nagg_dict['petal_length'] = 'max'\ndf.groupby('species').agg(agg_dict)","f59b6a02":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","7692b13d":"sns.distplot(a=df['petal_width'], bins=40, color='m')\nplt.title('Distribution of petal-width')","65bc226f":"sns.countplot(x='species',data=df, palette=\"OrRd\")","eb3195b9":"plt.figure(figsize=(10,7))\nsns.boxplot(x='species',y='sepal_width',data=df ,palette='YlGnBu')","0845cafd":"sns.violinplot(x='species', y='petal_length', data=df, palette='OrRd')","38c5e458":"sns.heatmap(df.corr(),cmap=\"YlGnBu\", linecolor='white', linewidths=1)","09531fc2":"#Cluster map takes only quantitative variables, so we need to do some processing here.\nx = df.drop('species',axis=1)\ng = sns.clustermap(x, cmap=\"magma\")","7562217f":"sns.regplot(x='petal_width', y='petal_length', data=df)","31de873c":"sns.lmplot(x = 'sepal_width', y = 'sepal_length', data = df, col = 'species', hue = 'species', palette = 'YlGnBu')","d2d5a74d":"sns.jointplot(x=\"sepal_width\", y=\"petal_length\", data=df, kind=\"kde\", color=\"g\")","68d60310":"ax = plt.axes()\n\nax.scatter(df.sepal_length, df.sepal_width)\n\n# Label the axes\nax.set(xlabel='Sepal Length (cm)',\n       ylabel='Sepal Width (cm)',\n       title='Sepal Length vs Width');","0beb315b":"ax = plt.axes()\nax.hist(df.petal_length, bins=25);\n\nax.set(xlabel='Petal Length (cm)', \n       ylabel='Frequency',\n       title='Distribution of Petal Lengths');","72d0b1cc":"ax = plt.axes()\nax.hist(df.petal_width, bins=25);\n\nax.set(xlabel='Petal width (cm)', \n       ylabel='Frequency',\n       title='Distribution of Petal Widths');","e97d8e4e":"ax = plt.axes()\nax.hist(df.sepal_length, bins=25);\n\nax.set(xlabel='Sepal Length (cm)', \n       ylabel='Frequency',\n       title='Distribution of Sepal Lengths');","7f5b484b":"ax = plt.axes()\nax.hist(df.sepal_width, bins=25);\n\nax.set(xlabel='Sepal width (cm)', \n       ylabel='Frequency',\n       title='Distribution of Sepal Widths');","025f6a65":"ax = df.petal_length.plot.hist(bins=25)\n\nax.set(xlabel='Petal Length (cm)', \n       ylabel='Frequency',\n       title='Distribution of Petal Lengths');","f548db1a":"import seaborn as sns\nsns.set_context('notebook')\n\n\nax = df.plot.hist(bins=25, alpha=0.5)\nax.set_xlabel('Size (cm)');","bbce55eb":"axList = df.hist(bins=25, figsize=(8,8))\n\n# Add some x- and y- labels to first column and last row\nfor ax in axList.flatten():\n    if ax.is_last_row():\n        ax.set_xlabel('Size (cm)')\n        \n    if ax.is_first_col():\n        ax.set_ylabel('Frequency')","cca50c23":"# First we have to reshape the data so there is \n# only a single measurement in each column\n\nplot_data = (df\n             .set_index('species')\n             .stack()\n             .to_frame()\n             .reset_index()\n             .rename(columns={0:'size', 'level_1':'measurement'})\n            )\n\nplot_data.head()","2b744b7e":"sns.set_style('white')\nsns.set_context('notebook')\nsns.set_palette('dark')\n\nf = plt.figure(figsize=(6,4))\nsns.boxplot(x='measurement', y='size', \n            hue='species', data=plot_data);","a92b1b9c":"sns.set_context('talk')\nsns.pairplot(df, hue='species');","ec9cd15d":"from sklearn import datasets \nfrom sklearn.cluster import KMeans\n#load the data\niris = datasets.load_iris()\n\nprint(iris.data)","15ffe23d":"#Iris data Ground Truth result\nprint(iris.target)\n","8ff3c8a6":"print(iris.DESCR)","ff185715":"samples = iris.data\nx = samples[:,0]\ny = samples[:,1]\n\nsepal_length_width = np.array(list(zip(x, y)))\nplt.scatter(x, y, alpha=0.5)\n\nplt.xlabel('sepal length (cm)')\nplt.ylabel('petal length (cm)')\n\nplt.show()","dec7798f":"k=3\nmodel = KMeans(n_clusters = k)","e4fecef8":"#use .fit() method to fit the model to the samples\nmodel.fit(samples)","e5469183":"# Use .predict() to determine the labels of samples \nlabels = model.predict(samples)\n# Print the labels\nprint(labels)","6429dfc1":"data = df.copy()\ndata.head()","8c69180b":"from sklearn.model_selection import train_test_split\n\ntarget = 'species'\nX = data[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]\ny = data[target]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 11)\n# it shows 80% of data is split for training and 20% of the data goes to testing.\nprint(X_train.shape)\nprint(X_test.shape)","4cd780c7":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nlr = LogisticRegression()\nlr.fit(X_train, y_train)\ny_pred = lr.predict(X_test)\nprint('Test Accuracy for Scikit-Learn model:', metrics.accuracy_score(y_test, y_pred)* 100,'%')","c5e2c4eb":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","e0b32432":"![](https:\/\/cdn-images-1.medium.com\/max\/1000\/1*gwmXliaxIBkY4NQBhoe9JQ.png)","a1d19353":"*Import the necessary libraries from sciki-learn package*","e93c72f2":"# **Pairplot to examine the correlations**","3b44c6f8":"# Dataset overview\nThe data set consists of 50 samples from each of three species Iris setosa, Iris virginica and Iris versicolor. 4 features were measured from each sample: the length and the width of the sepals and petals, in centimeters. ","e670e12e":"# plot histogram using pandas","39ef63f7":"# Count plot\n**displays the number of observations for a categorical variable using bars.**","a3ab0f65":"# LM Plots","a2f18b96":"# plotting all histograms","e4cb529b":"# Distribution Plot","26a05e57":"# Box Plot\n**shows the distribution of quantitative data across a categorical variable.**","ee069c48":"# Scatterplot","9462281a":"# Axis Grids - These are graphs that combine various plots using FacetGrid to realize complex visualizations.","02809bce":"# Train-test splits","b0e2b0b0":"# TAKE-AWAY From the histograms, we observe that Petal length and petal width are influencing variables for the different species","c545a1b2":"**Logistic Regression  is similar to Linear Regression but the target variable is categorical. It predicts the probability of an observation belonging to a category of the target variable. Sigmoid Function = ey \/ (1+ey) where ey = [co-efficients-matrix][feature-vector]**\n![](https:\/\/lh3.googleusercontent.com\/proxy\/p9PrwtbztSEpP-KezpfM3HQBBOe0xqZAu_eAtlBgw-PnCzfgZhRoeysYkHyVjV8DppFcKT7ZaJTQ88SHXMfAU0PkdpXptmPuqWsjk0vSUKAclOYMBDMQVE9jm3U)","10fa4d00":"# Logistic Regression","2642800a":"# Joint Plot\n**Used to draw a plot of two variables with bivariate and univariate graphs.**","4333e94c":"# **all features in single boxplot**","82799869":"# Aggregation functions","54e5092a":"# Clustering using k-means from scikit-learn library","bea36cae":"# Histograms","9a367805":"# Regression Plots","41fb0567":"Source- https:\/\/www.google.com\/url?sa=i&url=http%3A%2F%2Fjuangabrielgomila.com%2Fen%2Flogistic-regression-derivation%2F&psig=AOvVaw0NnEbsC6SfeEZ5QqseuWbG&ust=1617370255285000&source=images&cd=vfe&ved=0CAkQjhxqFwoTCMj2rO-T3e8CFQAAAAAdAAAAABAD","011f259c":"# Matrix plots\n1. HeatMap -  It provides the graph of the correlation matrix.\n2. Cluster Map - It is a plot of matrix dataset as a hierarchically clustered heatmap.","9cc2a620":"# violin plot\nThis is a variation of box plot. It shows the distribution of quantitative data across several levels of categorical variables. The violin plot also features a kde of the underlying distribution","9f182b60":"**REFERENCES - Some of the graph ideas in this kernel are taken from https:\/\/avinashkz.com\/data\/visualization\/2017\/09\/28\/seaborn.html** ","43a9192d":"# Visualisations","2917c7c0":"# Evaluation Metrics\n1. \tJaccard-index\n2.\tConfusion matrix\n3.\tLogloss\n4.  F1-Score"}}