{"cell_type":{"32ccac5c":"code","c750e26c":"code","c90cddc3":"code","eb325370":"code","91ec0dd4":"code","743085b1":"code","e8c22a01":"code","96c722b9":"code","105cf44b":"code","2377dad8":"code","710cfae4":"code","1cbf0dab":"code","54980b92":"code","b9c84441":"code","a5630b30":"code","633362b6":"code","8c114b26":"code","a6181e90":"code","66d15359":"code","249f06b5":"code","c35abdad":"code","aebc77c3":"code","1036ccc9":"code","1dee0efc":"code","f6f2993e":"code","551febd0":"code","85657fc5":"code","c2206c93":"markdown","e7e5db77":"markdown","e69a4b6a":"markdown","fafc2368":"markdown","5950e546":"markdown","85afa799":"markdown","0ed3573f":"markdown","efb260d2":"markdown","e271cd50":"markdown"},"source":{"32ccac5c":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\n# from lightgbm import LGBMRegressor\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_absolute_error\nimport optuna\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c750e26c":"train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\nsubmission = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')","c90cddc3":"train.head()","eb325370":"train.info()","91ec0dd4":"train.describe()","743085b1":"train.isnull().sum()","e8c22a01":"train['breath_id'].value_counts()","96c722b9":"train['breath_id'].nunique()","105cf44b":"sns.countplot(x=train['R'])","2377dad8":"sns.countplot(x=train['C'])","710cfae4":"sns.distplot(train['u_in'], kde=False, bins=10, color='blue')","1cbf0dab":"sns.distplot(train['u_out'], kde=False, bins=10, color='blue')","54980b92":"sns.distplot(train['pressure'], kde=False, bins=10, color='blue')","b9c84441":"test.head()","a5630b30":"train['u_in_cumsum'] = train['u_in'].groupby(train['breath_id']).cumsum()\ntest['u_in_cumsum'] = test['u_in'].groupby(test['breath_id']).cumsum()","633362b6":"train['u_in_lag'] = train['u_in'].shift(2)\ntrain = train.fillna(0)\n\ntest['u_in_lag'] = test['u_in'].shift(2)\ntest = test.fillna(0)","8c114b26":"X = train.drop(['id', 'breath_id', 'u_out', 'pressure'], axis = 1)\nX_test = test.drop(['id', 'breath_id', 'u_out'], axis = 1)\ny = train['pressure']","a6181e90":"def objective(trial,data=X,target=y):\n    \n    X_train, X_valid, y_train, y_valid = train_test_split(data, target, train_size=0.8, test_size=0.2,random_state=0)\n        \n    params = {\n        'objective': 'regression',\n        'metric': 'mae', \n        'boosting_type': 'gbdt',\n        'n_estimators': 1000,\n        'random_state': 42,\n        'learning_rate': trial.suggest_categorical('learning_rate', [0.006,0.008,0.01,0.014,0.017,0.02]),\n        'subsample': trial.suggest_loguniform('subsample', 0.4, 1.0),\n        'subsample_freq': trial.suggest_loguniform('subsample_freq', 0.4, 1.0),\n        'colsample_bytree': trial.suggest_uniform('colsample_bytree', 0.4, 1.0),\n        'reg_alpha': trial.suggest_loguniform('reg_alpha', 1e-3, 10.0),\n        'reg_lambda': trial.suggest_loguniform('reg_lambda', 1e-3, 10.0),\n        'min_child_weight': trial.suggest_int('min_child_weight', 5, 256),\n        'min_child_samples': trial.suggest_int('min_child_samples', 5, 100),\n        'bagging_fraction': trial.suggest_uniform('bagging_fraction', 0.4, 1.0),\n        'bagging_freq': trial.suggest_int('bagging_freq', 1, 7),\n    }\n    model = lgb.LGBMRegressor(**params) \n    model.fit(X_train, y_train)\n    \n    preds = model.predict(X_valid)\n    mae = mean_absolute_error(y_valid, preds)\n    \n    return mae","66d15359":"# study = optuna.create_study(direction='minimize')\n# study.optimize(objective, n_trials=10)\n# print('Number of finished trials:', len(study.trials))\n# print('Best trial:', study.best_trial.params)","249f06b5":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,random_state=0)","c35abdad":"lgb_params = {\n    'objective': 'regression',\n    'metric': 'mae', \n    'boosting_type': 'gbdt',\n    'n_estimators': 1000,\n    'random_state': 42,\n    'learning_rate': 0.017,\n    'subsample': 0.6706735076307812,\n    'subsample_freq': 0.9731836936473381,\n    'colsample_bytree': 0.7981147731267384,\n    'reg_alpha': 0.29250836566881794,\n    'reg_lambda': 0.0032438602599939702,\n    'min_child_weight': 134,\n    'min_child_samples': 26,\n    'bagging_fraction': 0.6263245217964235,\n    'bagging_freq': 1,\n}","aebc77c3":"model = lgb.LGBMRegressor(**lgb_params)\nmodel","1036ccc9":"model.fit(X_train, y_train)","1dee0efc":"pred_valid = model.predict(X_valid)\nprint('Mean Absolute Error: ', mean_absolute_error(y_valid, pred_valid))","f6f2993e":"preds = model.predict(X_test)","551febd0":"submission.pressure = preds\nsubmission.head()","85657fc5":"submission.to_csv('submission.csv', index=False)","c2206c93":"## If you like this kernel, please upvote:)","e7e5db77":"## References\n- https:\/\/www.kaggle.com\/c\/ventilator-pressure-prediction\/discussion\/273974\n- https:\/\/www.kaggle.com\/susnato\/lgbm-starter\n- https:\/\/www.kaggle.com\/ryanbarretto\/tensorflow-lstm-baseline\n- https:\/\/www.kaggle.com\/akihironomura\/tps-lightgbm-optuna-kfold","e69a4b6a":"## Evaluation","fafc2368":"## Import Modules","5950e546":"## Feature Engineering","85afa799":"## Make Submission","0ed3573f":"## Model Training","efb260d2":"## Hyperparameter Tuning using Optuna","e271cd50":"## EDA"}}