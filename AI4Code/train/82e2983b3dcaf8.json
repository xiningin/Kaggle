{"cell_type":{"a8b48b1a":"code","83041b3a":"code","c83f80f6":"code","85787b93":"code","89ea098d":"code","2170301a":"code","3ae22569":"code","4b6a41bf":"code","c70945ac":"code","6919d3e6":"code","69f8be8a":"code","ee1839b0":"code","7f9e3e3e":"code","2ff5d0a9":"code","d1dc8520":"code","c00ba5e1":"code","0459944e":"code","9ddbaeca":"code","7397f515":"code","5fcdb856":"code","00ed5c56":"code","3c3c5b2e":"code","22bb6c5f":"code","44e4149c":"code","0b114705":"code","f4878adf":"code","8fc188ba":"code","7c9490ba":"code","633dbf54":"code","a0692937":"code","56166777":"code","26f9502b":"code","15e913fa":"code","63ae039b":"code","2dfc8a60":"code","115c58cc":"code","5c61a0a6":"code","91394cc5":"code","7c876b1d":"code","d333f92c":"code","d9af3fbe":"code","c09ca9e0":"code","909d079f":"code","e91d5e60":"code","38bc28c6":"code","bd3bdd4b":"code","6c95d961":"markdown","8f828c6a":"markdown","f13beded":"markdown","83e38859":"markdown","ce24fe04":"markdown","095a9632":"markdown","d0a392f0":"markdown","ed513b1c":"markdown","4c6fbdf3":"markdown","257ac6ff":"markdown","dbaba723":"markdown","f4e8e61d":"markdown","c0f95cb3":"markdown","88e1ec17":"markdown","c22505f7":"markdown","dc68ae7f":"markdown","685cb9f2":"markdown","3c68fc94":"markdown","c5e6caf7":"markdown","ce0fb653":"markdown","98ca985a":"markdown","b76cfe34":"markdown","032b140e":"markdown","1f8dcf9a":"markdown"},"source":{"a8b48b1a":"import numpy as np      # for supporting large, multi-dimensional arrays and matrices\nimport pandas as pd     # for data manipulation and analysis \nimport matplotlib.pyplot as plt ","83041b3a":"import plotly.offline as py            # Plotly is a graphing python library that offers more than 40 charts\npy.init_notebook_mode(connected=True)  # This method is called from the offline method that require plotly.js to be loaded into the notebook dom","c83f80f6":"import plotly.graph_objs as go         # This package imports definitions for all of Plotly's graph objects\n# import chart_studio.grid_objs as go","85787b93":"import plotly.express as px                      # High-level API for rapid data exploration and figure generation","89ea098d":"from plotly.figure_factory import create_table   # figure_factory includes many wrapper functions that create unique chart types that are not yet included in plotly.js\ngm = px.data.gapminder()                         # Loading data into gm, gm is a dataframe\n\ntable = create_table(gm.head(10))\ntable","2170301a":"type(gm) # gm is a dataframe as stated above","3ae22569":"gm.shape","4b6a41bf":"gm.columns","c70945ac":"gm.info()","6919d3e6":"gm.describe()","69f8be8a":"from pandas_profiling import ProfileReport # open source python module that helps to return in depth EDA report with a couple of lines of code\nreport = ProfileReport(gm)\nreport","ee1839b0":"gm.isnull()","7f9e3e3e":"gm.isnull().sum()","2ff5d0a9":"import seaborn as sns\nsns.heatmap(gm.isnull(), yticklabels = False, cmap = \"Greens\")","d1dc8520":"gm.columns","c00ba5e1":"unique_continent = gm.continent.unique()\nunique_continent = unique_continent.tolist()\nunique_continent","0459944e":"type(unique_continent)","9ddbaeca":"gm_edit = gm.copy()","7397f515":"gm_edit.drop(['year', 'lifeExp', 'gdpPercap','iso_alpha', 'iso_num'], axis = 1, inplace = True)\ngm_edit.head()","5fcdb856":"gm.pivot_table(index=['continent'], aggfunc='size')","00ed5c56":"ctr1 = gm['country'].loc[gm['continent'] == 'Africa'].unique()\nprint(\"Countries in Africa: \", ctr1)\nprint(\"\\nTotal number of countries in Africa: \", len(ctr1))","3c3c5b2e":"ctr2 = gm['country'].loc[gm['continent'] == 'Americas'].unique()\nprint(\"Countries in Americas: \", ctr2)\nprint(\"\\nTotal number of countries in Americas: \", len(ctr2))","22bb6c5f":"ctr3 = gm['country'].loc[gm['continent'] == 'Asia'].unique()\nprint(\"Countries in Asia: \", ctr3)\nprint(\"\\nTotal number of countries in Asia: \", len(ctr3))","44e4149c":"ctr4 = gm['country'].loc[gm['continent'] == 'Europe'].unique()\nprint(\"Countries in Europe: \", ctr4)\nprint(\"\\nTotal number of countries in Europe: \", len(ctr4))","0b114705":"ctr5 = gm['country'].loc[gm['continent'] == 'Oceania'].unique()\nprint(\"Countries in Oceania: \", ctr5)\nprint(\"\\nTotal number of countries in Oceania: \", len(ctr5))","f4878adf":"plt.figure(figsize = (15,10))\nfig = px.sunburst(gm, path=['continent', 'country', 'year'], values='pop', color='continent',\n                  color_discrete_map={'Asia':'blue', 'Europe':'green', 'Africa':'red', 'Americas':'orange', 'Oceania':'black'}, \n                  title = \"Population Distribution\")\nfig.show()\n","8fc188ba":"# Hover over the bar to get the exact data\ndf_asia =gm.query(\"continent == 'Asia'\")  # query() method queries the columns of a DataFrame with a boolean expression.\nfig = px.bar(df_asia, x='year', y='pop', height=450, title = \"Population of Asia\", color = 'country')\nfig.show()","7c9490ba":"# Hover over the bar to get the exact data\ndf_india = gm.query(\"country == 'India'\")\nfig = px.bar(df_india, x='year', y='pop',\n             hover_data=['lifeExp', 'gdpPercap', 'iso_alpha', 'iso_num'], height=450, title = \"Population of India\", color = 'country')\nfig.show()","633dbf54":"df_china = gm.query(\"country == 'China'\")\nfig = px.bar(df_china, x='year', y='pop',\n             hover_data=['lifeExp', 'gdpPercap', 'iso_alpha', 'iso_num'], color='pop',\n             labels={'pop':'Population'}, height=500, title = \"Population of China\")\nfig.show()","a0692937":"# Hover over the bar to get the exact data\ndf_americas =gm.query(\"continent == 'Americas'\")\nfig = px.bar(df_americas, x='year', y='pop', height=450, title = \"Population of Americas\", color = 'country')\nfig.show()","56166777":"# Hover over the bar to get the exact data\ndf_us = gm.query(\"country == 'United States'\")\nfig = px.bar(df_us, x='year', y='pop',\n             hover_data=['lifeExp', 'gdpPercap', 'iso_alpha', 'iso_num'], height=450, title = \"Population of United States\", color = 'country')\nfig.show()","26f9502b":"df_brazil = gm.query(\"country == 'Brazil'\")\nfig = px.bar(df_brazil, x='year', y='pop',\n             hover_data=['lifeExp', 'gdpPercap', 'iso_alpha', 'iso_num'], color='pop',\n             labels={'pop':'Population'}, height=500, title = \"Population of Brazil\")\nfig.show()","15e913fa":"# Hover over the bar to get the exact data\ndf_africa =gm.query(\"continent == 'Africa'\")\nfig = px.bar(df_africa, x='year', y='pop', height=450, title = \"Population of Africa\", color = 'country')\nfig.show()","63ae039b":"# Hover over the bar to get the exact data\ndf_nigeria = gm.query(\"country == 'Nigeria'\")\nfig = px.bar(df_nigeria, x='year', y='pop',\n             hover_data=['lifeExp', 'gdpPercap', 'iso_alpha', 'iso_num'], height=450, title = \"Population of Nigeria\", color = 'country')\nfig.show()","2dfc8a60":"df_egypt = gm.query(\"country == 'Egypt'\")\nfig = px.bar(df_egypt, x='year', y='pop',\n             hover_data=['lifeExp', 'gdpPercap', 'iso_alpha', 'iso_num'], color='pop',\n             labels={'pop':'Population'}, height=500, title = \"Population of Egypt\")\nfig.show()","115c58cc":"# Hover over the bar to get the exact data\ndf_europe =gm.query(\"continent == 'Europe'\")\nfig = px.bar(df_europe, x='year', y='pop', height=450, title = \"Population of Europe\", color = 'country')\nfig.show()","5c61a0a6":"# Hover over the bar to get the exact data\ndf_germany = gm.query(\"country == 'Germany'\")\nfig = px.bar(df_germany, x='year', y='pop',\n             hover_data=['lifeExp', 'gdpPercap', 'iso_alpha', 'iso_num'], height=450, title = \"Population of Germany\", color = 'country')\nfig.show()","91394cc5":"df_uk = gm.query(\"country == 'United Kingdom'\")\nfig = px.bar(df_uk, x='year', y='pop',\n             hover_data=['lifeExp', 'gdpPercap', 'iso_alpha', 'iso_num'], color='pop',\n             labels={'pop':'Population'}, height=500, title = \"Population of 'United Kingdom\")\nfig.show()","7c876b1d":"# Hover over the bar to get the exact data\ndf_oceania =gm.query(\"continent == 'Oceania'\")\nfig = px.bar(df_oceania, x='year', y='pop', height=450, title = \"Population of Oceania\", color = 'country')\nfig.show()","d333f92c":"# Hover over the bar to get the exact data\ndf_australia = gm.query(\"country == 'Australia'\")\nfig = px.bar(df_australia, x='year', y='pop',\n             hover_data=['lifeExp', 'gdpPercap', 'iso_alpha', 'iso_num'], height=450, title = \"Population of Australia\", color = 'country')\nfig.show()","d9af3fbe":"df_nz = gm.query(\"country == 'New Zealand'\")\nfig = px.bar(df_nz, x='year', y='pop',\n             hover_data=['lifeExp', 'gdpPercap', 'iso_alpha', 'iso_num'], color='pop',\n             labels={'pop':'Population'}, height=500, title = \"Population of 'New Zealand\")\nfig.show()","c09ca9e0":"df_nz","909d079f":"pip install bubbly","e91d5e60":"pip install chart-studio ","38bc28c6":"pip install plotly==4.6.0","bd3bdd4b":"from bubbly.bubbly import bubbleplot \n#from plotly.plotly import iplot  \nfrom plotly.offline import iplot\n#from chart_studio.plotly import  iplot\n\nfigure = bubbleplot(dataset=gm, x_column='gdpPercap', y_column='lifeExp', \n    bubble_column='country', time_column='year', size_column='pop', color_column='continent', \n    x_title=\"GDP per Capita\", y_title=\"Life Expectancy\", title='Global Statistical Indicators',\n    x_logscale=True, scale_bubble=3, height=650)\n\niplot(figure, config={'scrollzoom': True})\n","6c95d961":"========================================================================================================================","8f828c6a":"# NOTE: \nplotly.plotly has been deprecated and be updated to chart_studio","f13beded":"# Loading data","83e38859":"# Bar plot Visualisation","ce24fe04":"Understanding the data in a better way","095a9632":"To understand in depth information like population of a continent or a country in a particular year.... click on the respective tag\nFor example. if you wish to know more about Asia, click on Asia.\nTo visualize the plot in a better way, say you wish to know more about India, then click on India. This will return you all info of population in India. \nAlso you can hover the mouse pointer over any of the required field and you will get the information for the same.\n\nTo go back to the previous chart, click again on the same field you chose earlier. Like click again on India and then Asia and you are back to the original chart...","d0a392f0":"On seeing the above two plots, it is observed that the population growth rate in the above two countries is quite stable and not increasing steeply. It seems like the number of birthd rate and death rate is approximately equal keeping the total population growth over years to be seemingly quite stagnant.","ed513b1c":"In the above plot, hover the mouse pointer over various colored blocks where each coloured block represent a country of Asia. Year by year the population of most of the countries have been observed to be increasing. ","4c6fbdf3":"# Gapminder Dataset","257ac6ff":"# The upcoming parts of this series will include more sophiticated and dynamic visualisations to play around with... \nIf you wish to receive the notification about the same, do follow me and if you liked the work then surely give an upvote. \n\nAlso please give suggestions on what type of work do you wish me to make public and also suggestions on how to improve my work will be much appreciated...\\\\\n","dbaba723":"==========================================================================================================================\n","f4e8e61d":"Also from the report we get to know that there are three categorical data i.e. country, continent, iso_alpha. ","c0f95cb3":"Understanding the data in a better way using cross tabulation","88e1ec17":"In the Overview part of the report, it says that the number of missing values is zero. So our half of the work is done. Still showing other ways to check the missing values by python code as well as visualisation.","c22505f7":"# Exploratory Data Analysis","dc68ae7f":"=======================================================================================================================","685cb9f2":"# This notebook is Part 1 of Processes performed over Gapminder dataset. Basically population distribution and trend has been observed.","3c68fc94":"# Part 2 - to be contd......\nComing Soon\n","c5e6caf7":"========================================================================================================================","ce0fb653":"The plotly.plotly module is deprecated, so for resolving it please install the chart-studio package and use the chart_studio.plotly module instead. or you can even install the latest version of plotly )","98ca985a":"Oobserving the trend in population change in the continents individually and the top two countries with highest population according to the data set!","b76cfe34":"The below projections are dynamic where you can \n\n1) Download Plot as a png<\/br>\n\n2) Zoom<\/br>\n\n3) Pan <\/br>\n\n4) Box Select<\/br>\n\n5) Lasso Select<\/br>\n\n6) Zoom in <\/br>\n\n7) Zoom out<\/br>\n\n8) Autoscale<\/br>\n\n9) Reset Axis<\/br>\n\n10) Toggle Spike Lines<\/br>\n\n11) Show Closest Data on Hover<\/br>\n\n12) Compare data on hover<\/br>","032b140e":"It was already known that the dataset do not have any null value.... this is just an another way to check the null values as at times, with huge datasets, the columns in the middle having null values are not printed out. In such cases the visualisation used above proves to be really good.","1f8dcf9a":"Importing Required Libraries "}}