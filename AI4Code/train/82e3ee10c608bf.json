{"cell_type":{"73d13e69":"code","d5d6ba1c":"code","38185af6":"code","1f78bb18":"code","c961c3b6":"code","e6013adc":"code","3744d766":"code","25330d54":"markdown"},"source":{"73d13e69":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d5d6ba1c":"# ResNet50\n\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras.applications.resnet50 import decode_predictions\nfrom keras.applications.resnet50 import preprocess_input\n\nfrom keras.preprocessing import image\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nfrom os import listdir\nfrom PIL import Image as PImage","38185af6":"os.getcwd()","1f78bb18":"img_width, img_height = 224, 224\n\nmodel_pretrained = ResNet50(weights='imagenet',\n                            include_top=True,\n                            input_shape=(img_height, img_width, 3))\n\n# Insert correct path of your image below\nimg_path = '\/kaggle\/input\/resnet-dataset\/images\/Image1.jpg'\nimg = image.load_img(img_path, target_size=(img_width, img_height))\nimg_data = image.img_to_array(img)\nimg_data = np.expand_dims(img_data, axis=0)\nimg_data = preprocess_input(img_data)\n\n","c961c3b6":"# predict the result\ncnn_feature = model_pretrained.predict(img_data, verbose=0)\n# decode the results into a list of tuples (class, description, probability)\nlabel = decode_predictions(cnn_feature)\nlabel = label[0][0]\n\nplt.imshow(img)\n\nstringprint = \"%.1f\" % round(label[2] * 100, 1)\nplt.title(label[1] + \" \" + str(stringprint) + \"%\", fontsize=20)\nplt.axis('off')\nplt.show()\n\n# decode the results into a list of tuples (class, description, probability)\n# (one such list for each sample in the batch)\nprint('Predicted:', decode_predictions(cnn_feature, top=3)[0])\n\n","e6013adc":"\n# Insert correct path of your image below\nimg_path = '\/kaggle\/input\/resnet-dataset\/images\/Image3.jpg'\nimg = image.load_img(img_path, target_size=(img_width, img_height))\nimg_data = image.img_to_array(img)\nimg_data = np.expand_dims(img_data, axis=0)\nimg_data = preprocess_input(img_data)\n\n# predict the result\ncnn_feature = model_pretrained.predict(img_data, verbose=0)\n# decode the results into a list of tuples (class, description, probability)\nlabel = decode_predictions(cnn_feature)\nlabel = label[0][0]\n\nplt.imshow(img)\n\nstringprint = \"%.1f\" % round(label[2] * 100, 1)\nplt.title(label[1] + \" \" + str(stringprint) + \"%\", fontsize=20)\nplt.axis('off')\nplt.show()\n\n# decode the results into a list of tuples (class, description, probability)\n# (one such list for each sample in the batch)\nprint('Predicted:', decode_predictions(cnn_feature, top=3)[0])\n","3744d766":"\n# Insert correct path of your image folder below\n\nfolder_path = '\/kaggle\/input\/resnet-dataset\/images\/'\nimages = os.listdir(folder_path)\nfig = plt.figure(figsize=(16, 20))\ni = 0\nrows = 4\ncolumns = 3\n\nfor image1 in images:\n    if image1 == \".ipynb_checkpoints\":\n      continue\n    i += 1\n\n    \n    img = image.load_img(folder_path + image1, target_size=(img_width, img_height))\n    img_data = image.img_to_array(img)\n    img_data = np.expand_dims(img_data, axis=0)\n    img_data = preprocess_input(img_data)\n\n    cnn_feature = model_pretrained.predict(img_data, verbose=0)\n    label = decode_predictions(cnn_feature)\n    label = label[0][0]\n\n    fig.add_subplot(rows, columns, i)\n    fig.subplots_adjust(hspace=.5)\n\n    plt.imshow(img)\n    stringprint = \"%.1f\" % round(label[2] * 100, 1)\n    plt.title(label[1] + \" \" + str(stringprint) + \"%\", fontsize=20)\n    plt.axis('off')\nplt.show()","25330d54":"**Thank You!**"}}