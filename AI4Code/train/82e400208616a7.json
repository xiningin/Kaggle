{"cell_type":{"74568dfd":"code","74a05f10":"code","59ed46c8":"code","21c2f4e2":"code","29d4f6d0":"code","0b644b6a":"code","426ccbfb":"code","0f3b449c":"code","51e60df8":"code","3f5fdb2f":"code","0863fa43":"code","402b1936":"code","82828eb0":"code","4b938690":"code","28f7c038":"code","ecaa5bb0":"code","74347823":"code","ba1e6fe5":"code","d8c6d66e":"code","518179b5":"code","14e52312":"code","aa72b99b":"code","16e3d3eb":"code","e4110fbe":"code","fa7892b9":"code","227fba12":"markdown","3ce12a08":"markdown","fd6793d3":"markdown","40f2c8d5":"markdown","b3912612":"markdown","9680956c":"markdown","9270d88e":"markdown","b3b7a984":"markdown","3eba2da7":"markdown","d3aa4bb8":"markdown","e67971da":"markdown","db9e62b5":"markdown","a1d0de9b":"markdown","077b99d6":"markdown","a4753bf7":"markdown","90f4178b":"markdown","d5be7b6b":"markdown","f1e724b8":"markdown","768c6bb4":"markdown","5f8bd734":"markdown","996880e8":"markdown","cc64b1d9":"markdown"},"source":{"74568dfd":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","74a05f10":"df = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')\ndf.head()","59ed46c8":"df.info()","21c2f4e2":"df.columns","29d4f6d0":"df['class'].replace(to_replace=['e','p'], value=['edible','poisonous'],inplace=True)\ndf['cap-shape'].replace(to_replace=['b', 'c','f','x','k','s'], value=['bell','conical','convex','flat','knobbed','sunken'],inplace=True)\ndf['cap-surface'].replace(to_replace=['f','g','y','s'], value=['fibrous','grooves','scaly','smooth'],inplace=True)\ndf['cap-color'].replace(to_replace=['n','b','c','g','r','p','u','e','w','y'], value=['brown','buff','cinnamon','gray','green','pink','purple','red','white','yellow'],inplace=True)\ndf['bruises'].replace(to_replace=['t', 'f'], value=['bruises','no'],inplace=True)\ndf['odor'].replace(to_replace=['a','l','c','y','f','m','n','p','s'], value=['almond','anise','creosote','fishy','foul','musty','none','pungent','spicy'],inplace=True)\ndf['gill-attachment'].replace(to_replace=['a','d','f','n'], value=['attached','descending','free','notched'],inplace=True)\ndf['gill-spacing'].replace(to_replace=['c','w','d'], value=['close','crowded','distant'],inplace=True)\ndf['gill-size'].replace(to_replace=['b', 'n'], value=['broad','narrow'],inplace=True)\ndf['gill-color'].replace(to_replace=['k','n','b','h','g','r','o','p','u','e','w','y'], value=['black','brown','buff','chocolate','gray','green','orange','pink','purple','red','white','yellow'],inplace=True)\ndf['stalk-shape'].replace(to_replace=['e', 't'], value=['enlarging','tapering'],inplace=True)\ndf['stalk-root'].replace(to_replace=['b','c','u','e','z','r','?'], value=['bulbous','club','cup','equal','rhizomorphs','rooted','missing'],inplace=True)\ndf['stalk-surface-above-ring'].replace(to_replace=['f','y','k','s'], value=['fibrous','scaly','silky','smooth'],inplace=True)\ndf['stalk-surface-below-ring'].replace(to_replace=['f','y','k','s'], value=['fibrous','scaly','silky','smooth'],inplace=True)\ndf['stalk-color-above-ring'].replace(to_replace=['n','b','c','g','o','p','e','w','y'], value=['brown','buff','cinnamon','gray','orange','pink','red','white','yellow'],inplace=True)\ndf['stalk-color-below-ring'].replace(to_replace=['n','b','c','g','o','p','e','w','y'], value=['brown','buff','cinnamon','gray','orange','pink','red','white','yellow'],inplace=True)\ndf['veil-type'].replace(to_replace=['p', 'u'], value=['partial','universal'],inplace=True)\ndf['veil-color'].replace(to_replace=['n','o','w','y'], value=['brown','orange','white','yellow'],inplace=True)\ndf['ring-number'].replace(to_replace=['n','o','t'], value=['none','one','two'],inplace=True)\ndf['ring-type'].replace(to_replace=['c','e','f','l','n','p','s','z'], value=['cobwebby','evanescent','flaring','large','none','pendant','sheathing','zone'],inplace=True)\ndf['spore-print-color'].replace(to_replace=['k','n','b','h','r','o','u','w','y'], value=['black','brown','buff','chocolate','green','orange','purple','white','yellow'],inplace=True)\ndf['population'].replace(to_replace=['a','c','n','s','v','y'], value=['abundant','clustered','numerous','scattered','several','solitary'],inplace=True)\ndf['habitat'].replace(to_replace=['g','l','m','p','u','w','d'], value=['grasses','leaves','meadows','paths','urban','waste','woods'],inplace=True)","0b644b6a":"df.head()","426ccbfb":"corr = df.apply(lambda x : pd.factorize(x)[0]).corr(method='pearson', min_periods=1)\nplt.figure(figsize=(16,16))\nsns.heatmap(corr, cmap = \"RdBu_r\", vmax=0.9, square=True)","0f3b449c":"df['veil-type'].value_counts()","51e60df8":"IF = corr['class'].sort_values(ascending=False).head(10).to_frame()\nIF.head(8)","3f5fdb2f":"print(df.groupby('gill-size')['class'].value_counts())\ndf.groupby('gill-size')['class'].value_counts().unstack().plot.barh()","0863fa43":"print(df.groupby('gill-spacing')['class'].value_counts())\ndf.groupby('gill-spacing')['class'].value_counts().unstack().plot.barh()","402b1936":"print(df.groupby('cap-surface')['class'].value_counts())\ndf.groupby('cap-surface')['class'].value_counts().unstack().plot.barh()","82828eb0":"print(df.groupby('ring-number')['class'].value_counts())\ndf.groupby('ring-number')['class'].value_counts().unstack().plot.barh()","4b938690":"print(df.groupby('gill-attachment')['class'].value_counts())\ndf.groupby('gill-attachment')['class'].value_counts().unstack().plot.barh()","28f7c038":"print(df.groupby('veil-color')['class'].value_counts())\ndf.groupby('veil-color')['class'].value_counts().unstack().plot.barh()","ecaa5bb0":"print(df.groupby('stalk-shape')['class'].value_counts())\ndf.groupby('stalk-shape')['class'].value_counts().unstack().plot.barh()","74347823":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","ba1e6fe5":"## Feature engineering\n\ndf['class'].replace(to_replace=['edible','poisonous'], value=['0','1'],inplace=True)\ndf.head()","d8c6d66e":"# Split the data\n\nX = df.drop('class', axis=1)\ny = df['class']","518179b5":"# handling categorical features\n\nX = pd.get_dummies(X)\nX.head()","14e52312":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=44)","aa72b99b":"from sklearn.ensemble import RandomForestClassifier\n\n# Fitting Random Forest Classification\nclassifier = RandomForestClassifier(n_estimators = 200)\nclassifier.fit(X_train, y_train)\n\n# predict\nRF_pred = classifier.predict(X_test)\naccuracy = accuracy_score(y_test, RF_pred)\naccuracy","16e3d3eb":"from sklearn.linear_model import SGDClassifier\n\n# fit to SGDClassifier\nsgd= SGDClassifier()\nsgd.fit(X_train, y_train)\n\n# predict\nSGD_pred = sgd.predict(X_test)\nacc = accuracy_score(y_test, SGD_pred)\nprint(acc)","e4110fbe":"from sklearn.linear_model import LogisticRegression\n\n#fit to LogReg\nlr = LogisticRegression()\nlr.fit(X_train, y_train)\n\n# Predict\nLR_pred = lr.predict(X_test)\nacc = accuracy_score(y_test, LR_pred)\nprint(acc)","fa7892b9":"## Distribution Comparison\n\nf = plt.figure(figsize=(15,12))\n\n# Basic Distribution\nax = f.add_subplot(221)\nax = sns.distplot(y_test)\nax.set_title('Basic Distribution')\n\n# Random Forest Predicted result\nax = f.add_subplot(222)\nxx = pd.DataFrame(RF_pred)\nax = sns.distplot(RF_pred, label=\"Predicted Values\")\nax.set_title('Random Forest Predicted result')\n\n# SGDClassifier Predicted result\nax = f.add_subplot(223)\nax = sns.distplot(SGD_pred, label=\"Predicted Values\")\nax.set_title('SGDClassifier Predicted result')\n\n# Logistic Regression Predicted result\nax = f.add_subplot(224)\nax = sns.distplot(LR_pred, label=\"Predicted Values\")\nax.set_title('Logistic Regression Predicted result')","227fba12":"## Modeling","3ce12a08":"### SGDClassifier","fd6793d3":"### Logistic Regression","40f2c8d5":"## Import Modules","b3912612":"## End\n\nThose models we made is perfect models, mostly 100% accuracy, and i put the distribution comparison as well, but there is hardly any difference. Well in the end of the day we knew what kind of mushroom is edible and posionous, i'm not a mushroom expert and all the data is form the dataset itself, i'm sorry if there is anything wrong with this kernel.\n\nHope you like it, have a good day kagglers","9680956c":"## Opitional\n\nIn this dataset, everything was display on their initial words. For me, it is much easier to understand when we can get their full words since we are going to do some EDA, if you want to keep it as it is, thats fine. This is just my personal prefrence.","9270d88e":"Let's see how the data looks like.","b3b7a984":"### Gill-attachment\n\nin Gill-attachment, almost all the mushroom with attached gill is 100% edible than the other, while free is also edible but the chance is quite low since it's only 50% of them safe to consume,","3eba2da7":"Those are some columns that has a high correlation with class columns, even most of them are quite low on their correlation value, it is worth to check.","d3aa4bb8":"Veil-type only has 1 kind of value in its columns, that is why we cant see variation of veil type in heat map.\nWell, that is fine i guess. Let's just dig a little but deeper on those column with high correlation on class columns.","e67971da":"### Gill-Spacing\n\nHow about gill spacing,\nin gill-spacing, the second correlation with class column say almost all crowded gill spacing mushroom are edible and around 40% of close gill-spacing are edible, it's better to play it safe and only eat crowded gill spacing mushroom.","db9e62b5":"### Random Forest Classifier","a1d0de9b":"Some column that has strong correlation with class is gill-size and gill-spacing. \n\nBUT WAIT...\n\nSomething is wrong with veil-type, let's check what's in veil type","077b99d6":"### Gill-size\n\nin gill-size, the highest correlation with class column say almost all mushroom with narrow gill zise are posionous and around 60% of broad gill-size are edible, i guess it is safe to say that broad gill size mushroom are highly edible than narrow gill size mushroom.","a4753bf7":"### Veil Color\n\nUnlike veil type, veil color has a lot of variation, another easy thing to notice i guess. The data say all the mushroom with orange or brown are highly edible than the others, while white veil colored is also edible but the chance is quite low since it's only 50% of them safe to consume, and yellow veil colored mushroom (another rare mushroom) is not the option, it's 100% posionous.","90f4178b":"## EDA","d5be7b6b":"## Introduction\n\nHai kagglers, here is another dataest to explore. Mushroom Classification Dataset.\nIn this kernel, i'm going to do some exploratory data analysis, build the models and run prediction as well.\nLer's get started...","f1e724b8":"Perfect, let's move on to correlation. I love to use heatmap, but you can use anything you want","768c6bb4":"### Ring Number\n\nRing number in mushroom, the easiest thing to notice say all the mushroom with two ring number is highly edible than the other, while one is also edible but the chance is quite low since it's only 50% of them safe to consume, and mushroom with no ring number are not the option, it's 100% posionous.","5f8bd734":"### Stalk Shape\n\nStalk shape, the last one, say all mushroom with tapering stalk shape is highly edible while on the other side enlarging stalk shape is highky posionous.","996880e8":"## Quick Look\n\nWe got 8124 row and 22 columns on this dataset, with no missing value at all, we are good to go.","cc64b1d9":"### Cap-surface\n\nin Cap surface, data show that almost all mushroom with smooth and scaly cap surface are highly posionous, while mushroom with grooves cap surface is also posionous (since the data only have a few record of it, i guess this is the rare mushroom), and fibrous cap surface are highly edible, i think only fibrous cap surfaced mushroom are safe to consume."}}