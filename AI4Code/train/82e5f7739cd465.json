{"cell_type":{"b22919ae":"code","37934c2a":"code","c6b7d145":"code","d7472bff":"code","38559e41":"code","3648c0e6":"code","ac4ff780":"code","490a3a97":"code","0d5aa224":"code","4fac1c90":"code","80c04518":"code","d4f70431":"markdown","e7097d23":"markdown","3564cbea":"markdown","c56574c0":"markdown","c7b79fa9":"markdown","5e7c5637":"markdown","9064cd0b":"markdown","27113835":"markdown","4cad6a62":"markdown","e1f0caa8":"markdown","86064b1c":"markdown","865182c3":"markdown"},"source":{"b22919ae":"import numpy as np \nimport pandas as pd \nimport os\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Flatten, Dense\nfrom keras.callbacks import EarlyStopping \nfrom sklearn.model_selection import train_test_split \nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras import models\nfrom keras import layers\nfrom keras.applications import resnet50\nfrom keras.models import *\nfrom keras.layers import *\nimport keras\nimport warnings\nimport matplotlib.pyplot as plt\nimport cv2\nfrom tensorflow.keras.applications.vgg19 import VGG19\nfrom keras.applications.inception_v3 import InceptionV3, preprocess_input\nwarnings.filterwarnings('ignore')\n","37934c2a":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c6b7d145":"def data_prep(parasitized,uninfected):\n\n    parasitized= [\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/Parasitized\" + '\/' +  parasitize for parasitize in parasitized]\n    uninfected= [\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/Uninfected\" + '\/' +  uninfect for uninfect in uninfected]\n\n    labels = len(parasitized)*['parasitized'] + len(uninfected)*['uninfected']\n    data = parasitized + uninfected\n\n    return pd.DataFrame({'Image_Path': data , 'Labels': labels})\n\n\ndf = data_prep(os.listdir('..\/input\/cell-images-for-detecting-malaria\/cell_images\/Parasitized\/'), os.listdir('..\/input\/cell-images-for-detecting-malaria\/cell_images\/Uninfected\/'))\ndf.head()","d7472bff":"\nprint(\"Displaying 5 Parasitized Images: \")\nprint()\nplt.figure(figsize = (12,12))\nfor i in range(5):\n    plt.subplot(1, 5, i+1)\n    img = cv2.imread(df[df['Labels'] == 'parasitized']['Image_Path'][i])\n    plt.imshow(img)\n    plt.tight_layout()\nplt.show()\n\n\nprint()\nprint(\"Displaying 5 Uninfected Images: \")\nprint()\nplt.figure(figsize = (12,12))\nfor i in range(5):\n    plt.subplot(1, 5, i+1)\n    img = cv2.imread(df[df['Labels'] == 'uninfected']['Image_Path'].reset_index(drop=True)[i])\n    plt.imshow(img)\n    plt.tight_layout()\nplt.show()\n","38559e41":"df['Labels'].value_counts().plot(kind = 'bar', color = ['red', 'green'])\nplt.title('Distribution of samples according to the categories')","3648c0e6":"\ntrain, test = train_test_split(df, test_size = .20)\n\nimg_datagen = ImageDataGenerator(rotation_range=20,\n                              width_shift_range=0.1,\n                              height_shift_range=0.1,\n                              shear_range=0.1,\n                              zoom_range=0.1,\n                              horizontal_flip=True,\n                              fill_mode='nearest', validation_split=0.2)\n                               \n                               \nmy_callbacks = [\n    tf.keras.callbacks.EarlyStopping(patience=2),\n    tf.keras.callbacks.ModelCheckpoint(filepath='model.{epoch:02d}-{val_loss:.2f}.h5'),\n    tf.keras.callbacks.TensorBoard(log_dir='.\/logs'),\n]","ac4ff780":"def plot_loss_and_accuracy(mo_fit):\n    accuracy = mo_fit.history['accuracy']\n    loss = mo_fit.history['loss']\n    validation_loss = mo_fit.history['val_loss']\n    validation_accuracy = mo_fit.history['val_accuracy']\n\n\n\n    plt.figure(figsize=(15, 7))\n    plt.subplot(2, 2, 1)\n    plt.plot(range(len(accuracy)), accuracy, label='Training Accuracy')\n    plt.plot(range(len(accuracy)), validation_accuracy, label='Validation Accuracy')\n    plt.legend(loc='upper left')\n    plt.title('Accuracy : Training Vs Validation ')\n\n\n\n    plt.subplot(2, 2, 2)\n    plt.plot(range(len(accuracy)), loss, label='Training Loss')\n    plt.plot(range(len(accuracy)), validation_loss, label='Validation Loss')\n    plt.title('Loss : Training Vs Validation ')\n    plt.legend(loc='upper right')\n    plt.show()\n","490a3a97":"def cnn_model(df, train, test, my_callbacks):\n    \n    x_train =  img_datagen.flow_from_dataframe(dataframe = train,  x_col='Image_Path', y_col='Labels',  class_mode='binary',target_size=(134,134), shuffle=False, batch_size=10, seed=10, subset='training')\n    x_test = img_datagen.flow_from_dataframe(dataframe = test,  x_col='Image_Path', y_col='Labels',class_mode='binary',  target_size=(134,134), shuffle=False, batch_size=10, seed=10, subset='validation')\n    \n    model = tf.keras.Sequential(\n        [\n          tf.keras.layers.Conv2D(kernel_size=(3,3), input_shape=(130,130,3) ,filters=32, activation='relu', padding='same'),\n          tf.keras.layers.MaxPool2D(pool_size=(2,2)),\n\n          tf.keras.layers.Conv2D(kernel_size=(3,3), input_shape=(130,130,3) ,filters=32, activation='relu', padding='same'),\n          tf.keras.layers.MaxPool2D(pool_size=(2,2)),\n\n          tf.keras.layers.Conv2D(kernel_size=(3,3), input_shape=(130,130,3) ,filters=32, activation='relu', padding='same'),\n          tf.keras.layers.MaxPool2D(pool_size=(2,2)),\n\n          tf.keras.layers.Conv2D(kernel_size=(3,3), input_shape=(130,130,3) ,filters=64, activation='relu', padding='same'),\n          tf.keras.layers.MaxPool2D(pool_size=(2,2)),\n\n          tf.keras.layers.Flatten(),\n          tf.keras.layers.Dense(128, activation='relu'),\n          tf.keras.layers.Dropout(rate=0.5),\n          tf.keras.layers.Dense(1, activation='sigmoid')\n  ])\n    model.compile(optimizer=tf.keras.optimizers.Adam(),\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n    model_history = model.fit_generator(generator = x_train, \n                   steps_per_epoch = 100,\n                   epochs = 4 ,\n                   validation_data = x_test,\n                   validation_steps = 100, callbacks=my_callbacks)\n    \n    return model_history\n\n    \nplot_loss_and_accuracy(cnn_model(df, train, test, my_callbacks))\n","0d5aa224":"def resnet_model(df, train, test, my_callbacks):\n    x_train =  img_datagen.flow_from_dataframe(dataframe = train,  x_col='Image_Path', y_col='Labels',  class_mode='binary',target_size=(64,64), shuffle=False, batch_size=10, seed=10, subset='training')\n    x_test = img_datagen.flow_from_dataframe(dataframe = test,  x_col='Image_Path', y_col='Labels',class_mode='binary',  target_size=(64,64), shuffle=False, batch_size=10, seed=10, subset='validation')\n    \n    resnet_model=resnet50.ResNet50(weights='imagenet',include_top=False,input_shape=(64,64,3))\n    model=Sequential()\n    model.add(resnet_model)\n    model.add(Flatten())\n    model.add(Dense(1024,activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(1,activation='sigmoid'))\n    model.compile(optimizer=keras.optimizers.RMSprop(lr=1e-4),loss='binary_crossentropy',metrics=['accuracy'])\n    \n    \n    model_history = model.fit(\n    x_train,\n    steps_per_epoch=100,\n    validation_data=x_test,\n    validation_steps=100,\n    epochs = 4, callbacks=my_callbacks)\n    \n    \n    return model_history\n    \nplot_loss_and_accuracy(resnet_model(df, train, test, my_callbacks))","4fac1c90":"def vgg19_model(df, train, test, my_callbacks):\n    x_train =  img_datagen.flow_from_dataframe(dataframe = train,  x_col='Image_Path', y_col='Labels',  class_mode='binary',target_size=(224,224), shuffle=False, batch_size=10, seed=10, subset='training')\n    x_test = img_datagen.flow_from_dataframe(dataframe = test,  x_col='Image_Path', y_col='Labels',class_mode='binary',  target_size=(224,224), shuffle=False, batch_size=10, seed=10, subset='validation')\n    \n    vgg19_model = VGG19(input_shape=(224,224,3), weights='imagenet',include_top=False)\n    model=Sequential()\n    model.add(vgg19_model)\n    model.add(Flatten())\n    model.add(Dense(1024,activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(1,activation='sigmoid'))\n    model.compile(optimizer=keras.optimizers.RMSprop(lr=1e-4),loss='binary_crossentropy',metrics=['accuracy'])\n    \n    model_history = model.fit(\n    x_train,\n    steps_per_epoch=100,\n    validation_data=x_test,\n    validation_steps=100, \n    epochs = 4 , callbacks=my_callbacks)\n    \n    return model_history\n    \nplot_loss_and_accuracy(vgg19_model(df, train, test, my_callbacks))","80c04518":"def inception_v3_model(df, train, test, my_callbacks):\n    x_train =  img_datagen.flow_from_dataframe(dataframe = train,  x_col='Image_Path', y_col='Labels',  class_mode='binary',target_size=(299, 299), shuffle=False, batch_size=10, seed=10, subset='training')\n    x_test = img_datagen.flow_from_dataframe(dataframe = test,  x_col='Image_Path', y_col='Labels',class_mode='binary',  target_size=(299, 299), shuffle=False, batch_size=10, seed=10, subset='validation')\n    \n    vgg19_model = VGG19(input_shape=(299, 299,3), weights='imagenet',include_top=False)\n    model=Sequential()\n    model.add(vgg19_model)\n    model.add(Flatten())\n    model.add(Dense(1024,activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(1,activation='sigmoid'))\n    model.compile(optimizer=keras.optimizers.RMSprop(lr=1e-4),loss='binary_crossentropy',metrics=['accuracy'])\n    \n    model_history = model.fit(\n    x_train,\n    steps_per_epoch=100,\n    validation_data=x_test,\n    validation_steps=100, \n    epochs = 4 , callbacks=my_callbacks)\n    \n    return model_history\n    \nplot_loss_and_accuracy(inception_v3_model(df, train, test, my_callbacks))\n","d4f70431":"\n# Reading The File Names","e7097d23":"# Importing The Modules","3564cbea":"# Building CNN","c56574c0":"# Data Preparation","c7b79fa9":"# Distribution Of Samples","5e7c5637":"# Building ResNet50","9064cd0b":"# Augmenting The Data","27113835":"# Conclusion\n\n> **It can be seen VGG19 is performing the best in all the 4 models worked on here.**\n\n> **InceptionV3 is performing the worst whereas the other two models are performing almost the same.**","4cad6a62":"# Displaying 5 Images For Each Of The Two Labels","e1f0caa8":"# Building VGG 19","86064b1c":"\n<h1 style=\" text-align:center; color:Red; font-size:40px; display: block;\"> <u><b><i>Malaria Image Clasification with CNN, ResNet50 and VGG19 \ud83e\udd9f\ud83e\udd9f<\/i><\/b><\/u> <\/h1>\n<p style=\"text-align:center; \">\n<img src=\"https:\/\/cdn-prod.medicalnewstoday.com\/content\/images\/articles\/150\/150670\/malaria-is-passed-on-by-the-anopheles-mosquito.jpg\" style='width: 400px;'>\n<\/p>\n","865182c3":"# Building InceptionV3"}}