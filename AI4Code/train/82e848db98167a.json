{"cell_type":{"302baa33":"code","263d7b92":"code","32ab5ff5":"code","a2287a3e":"code","808a7da9":"code","4c9cfcb2":"code","bb2bd281":"code","9cf5b837":"code","886e4585":"code","844e08d8":"code","cf71c177":"code","9295f8ba":"code","9ffbe291":"code","8f59b735":"code","d22fbee2":"code","c2f78c13":"code","86ea9477":"code","02a1e48b":"code","16ac6657":"code","6f4b8ddf":"code","01013f70":"code","139c807f":"code","5c563d1b":"code","77e3d5ff":"code","fbe127c4":"code","a92ffbd2":"code","ff1b32c0":"code","8a99da00":"code","d16214d1":"code","7010b8b5":"code","486b11dc":"code","518588c3":"code","0e93a3b8":"code","6866e4c8":"code","c8634de4":"code","86d23c01":"code","bf90b5e3":"markdown","ea0926d3":"markdown","dabe5879":"markdown","829faa1b":"markdown","4e2edd63":"markdown","bf6f338b":"markdown","b6f24f74":"markdown","b3e710e1":"markdown","f93e1208":"markdown","a3f6199d":"markdown","bc5010bf":"markdown","13b33e98":"markdown","a9ff6adb":"markdown","12892c23":"markdown"},"source":{"302baa33":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","263d7b92":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom scipy import stats\nfrom datetime import date,timedelta\n\nimport plotly.express as px\n\nfrom yellowbrick.cluster import KElbowVisualizer,SilhouetteVisualizer,InterclusterDistance\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans","32ab5ff5":"df_orders = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_orders_dataset.csv')\ndf_payments = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_order_payments_dataset.csv')","a2287a3e":"#columns and rows\ndf_orders.shape","808a7da9":"#list columns\ndf_orders.columns","4c9cfcb2":"#data types\ndf_orders.dtypes","bb2bd281":"#sample for dataset\ndf_orders.head(5)","9cf5b837":"#convert ['order_purchase_timestamp','order_approved_at', 'order_delivered_carrier_date','order_delivered_customer_date', 'order_estimated_delivery_date'] to datetime\ndate_columns = ['order_purchase_timestamp','order_approved_at', 'order_delivered_carrier_date','order_delivered_customer_date', 'order_estimated_delivery_date']\nfor col in date_columns:\n    df_orders[col] = pd.to_datetime(df_orders[col])\ndf_orders.dtypes","886e4585":"#view date range\ndf_orders[date_columns].describe()","844e08d8":"df_orders.isna().sum()","cf71c177":"df_orders['order_status'].value_counts()","9295f8ba":"#filter orders\ndf_delivered = df_orders.query('order_status == \"delivered\"')","9ffbe291":"#check nan values in new dataframe\ndf_delivered.isna().sum()","8f59b735":"#list columns\ndf_payments.columns","d22fbee2":"#show sample\ndf_payments.head(5)","c2f78c13":"#size and columns\ndf_payments.shape","86ea9477":"#check if exists duplicated orders\ndf_payments.duplicated().value_counts()","02a1e48b":"sns.distplot(df_payments['payment_value'],bins=20)","16ac6657":"#check statistical data\ndf_payments.describe()","6f4b8ddf":"#check outliers\nsns.boxplot(df_payments['payment_value'])","01013f70":"#remove outliers\nz = np.abs(stats.zscore(df_payments['payment_value']))\ndf_payments_so = df_payments[(z < 3)]\ndf_outliers = df_payments[(z > 3)]\nsns.boxplot(df_payments_so['payment_value'])","139c807f":"#outliers distribution\nsns.boxplot(df_outliers['payment_value'])","5c563d1b":"#verify outliers count dropped\ndf_outliers.shape","77e3d5ff":"#outliers stats\ndf_outliers.describe()","fbe127c4":"#convert order_id to index in both datasets\ndf_payments = df_payments.set_index('order_id')\n","a92ffbd2":"df_orders = df_orders.set_index('order_id')","ff1b32c0":"#Join datasets\norder_payment = df_orders.join(df_payments)","8a99da00":"#create RFM Data set\nlast_date = order_payment['order_delivered_carrier_date'].max() + timedelta(days=1)\n#order_payment = order_payment.reset_index()\nrfm = order_payment.groupby('customer_id').agg({\n    'order_delivered_carrier_date': lambda x: (last_date - x.max()).days,\n    'order_id': lambda x: len(x),\n    'payment_value': 'sum'\n})","d16214d1":"rfm.dropna(inplace=True)","7010b8b5":"std = StandardScaler()\nx_std = std.fit_transform(rfm)","486b11dc":"model = KMeans()\nvisualizer = KElbowVisualizer(model, k=(4,12))\n\nvisualizer.fit(x_std)        # Fit the data to the visualizer\nvisualizer.show()  ","518588c3":"model_k = KMeans(n_clusters=7)\nkmeans = model_k.fit(x_std)\nrfm['cluster'] = kmeans.labels_","0e93a3b8":"rfm.columns = ['Recency','Frequency','MonetaryValue','cluster']","6866e4c8":"rfm.head()","c8634de4":"px.scatter_3d(rfm,x='Recency',y='Frequency',z='MonetaryValue',color='cluster')","86d23c01":"rfm.groupby('cluster').mean()","bf90b5e3":"## Filter delivered orders","ea0926d3":"## Order status check ","dabe5879":"## Data transformation - Datetime columns","829faa1b":"- We consider delivered orders for this analysis","4e2edd63":"## Import orders and order payments dataset","bf6f338b":"For this analisys we consider delivered order date for Recency column\n- Max Date - 2018-05-09\n- Min date - 2016-10-08","b6f24f74":"## The outliers orders can represent a significant group of clients, so we keep this registers for the analysis","b3e710e1":"## Check distribuition for the payment value","f93e1208":"## Create RFM Dataframe","a3f6199d":"### Not exists duplicated orders in payments dataset","bc5010bf":"## Verify null values","13b33e98":"## Join payments and orders","a9ff6adb":"## Explore DataSet Orders","12892c23":"## Check payments dataset"}}