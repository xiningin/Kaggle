{"cell_type":{"a0c5d37b":"code","ed100b50":"code","db4b149c":"code","48f427bf":"code","3575a148":"code","00921c73":"code","f531384a":"code","aad201c0":"code","fea057b0":"code","fafc7d82":"code","36c0eebc":"code","c14a2de6":"code","27f5c558":"code","4c0124b1":"code","bf80cbeb":"code","92ac3927":"code","8e06bf51":"code","45ee02b4":"code","5fd6d4ee":"code","5c485ae5":"code","e66f9cd2":"code","02818ab5":"code","d4c5c737":"code","13ab7f62":"code","7abc2ac2":"code","ee6707aa":"markdown","54687a8d":"markdown","07e91648":"markdown","580e7c4c":"markdown","c29d0361":"markdown","1f33d4b1":"markdown","fba12f38":"markdown","8466de31":"markdown","36411e08":"markdown","209126f9":"markdown","0e86648f":"markdown","0a5c7e1f":"markdown","6d65a2dd":"markdown","dad51957":"markdown","cf89a1c6":"markdown"},"source":{"a0c5d37b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nimport folium\nfrom folium import plugins\nimport matplotlib.pyplot as plt\n\nimport math\nimport random\nfrom datetime import timedelta\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n#Color Palletes\n\ncnf = '#393e46'\ndth = '#ff2e63'\nrec = '#21bf73'\nact = '#fe9801'\nnew ='#25af83'\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ed100b50":"covid_cases_india_df= pd.read_csv(\"\/kaggle\/input\/coronavirus-cases-in-india\/Covid cases in India.csv\")\ncovid_perday_df=pd.read_excel(\"\/kaggle\/input\/coronavirus-cases-in-india\/per_day_cases.xlsx\")\ncovid_coordinates =pd.read_csv(\"\/kaggle\/input\/coronavirus-cases-in-india\/Indian Coordinates.csv\")","db4b149c":"covid_cases_india_df.head()","48f427bf":"print(covid_cases_india_df.shape)\nprint(covid_perday_df.shape)\nprint(covid_coordinates.shape)","3575a148":"# Total Confirmed Cases \n\nconfirmed = covid_cases_india_df.groupby('Name of State \/ UT').sum()['Total Confirmed cases'].reset_index()\nconfirmed","00921c73":"figure = px.bar(confirmed.sort_values('Total Confirmed cases', ascending= False).sort_values('Total Confirmed cases', ascending=True),x='Total Confirmed cases',y = 'Name of State \/ UT',title='Total Confirmed Cases',orientation='h',color_discrete_sequence=[cnf])\nfigure.update_layout(height=700)\nfigure.show()","f531384a":"#Total Active cases\n\nactive = covid_cases_india_df.groupby('Name of State \/ UT').sum()['Active'].reset_index()\nactive","aad201c0":"figure = px.bar(active.sort_values('Active', ascending= False).sort_values('Active', ascending=True),x='Active',y = 'Name of State \/ UT',title='Total Active Cases',orientation='h',color_discrete_sequence=[act])\nfigure.update_layout(height=700)\nfigure.show()","fea057b0":"deaths= covid_cases_india_df.groupby('Name of State \/ UT').sum()['Deaths'].reset_index()\ndeaths","fafc7d82":"figure = px.bar(deaths.sort_values('Deaths', ascending= False).sort_values('Deaths', ascending=True),x='Deaths',y = 'Name of State \/ UT',title='Total Death Cases',orientation='h',color_discrete_sequence=[dth])\nfigure.update_layout(height=700)\nfigure.show()","36c0eebc":"recovered= covid_cases_india_df.groupby('Name of State \/ UT').sum()['Cured\/Discharged\/Migrated'].reset_index()\nrecovered","c14a2de6":"figure = px.bar(recovered.sort_values('Cured\/Discharged\/Migrated', ascending= False).sort_values('Cured\/Discharged\/Migrated', ascending=True),x='Cured\/Discharged\/Migrated',y = 'Name of State \/ UT',title='Total Recovered Cases',orientation='h',color_discrete_sequence=[rec])\nfigure.update_layout(height=700)\nfigure.show()","27f5c558":"#Confirmed Vs Recovered\n\nfig = go.Figure(\n    data=[\n        go.Bar(\n            name=\"Confirmed\",\n            x=covid_cases_india_df[\"Name of State \/ UT\"],\n            y=covid_cases_india_df[\"Total Confirmed cases\"],\n            offsetgroup=0,\n        ),\n        go.Bar(\n            name=\"Recovered\",\n            x=covid_cases_india_df[\"Name of State \/ UT\"],\n            y=covid_cases_india_df[\"Cured\/Discharged\/Migrated\"],\n            offsetgroup=0,\n            base=covid_cases_india_df[\"Cured\/Discharged\/Migrated\"],\n        )\n    ],\n    layout=go.Layout(\n        title=\"Confirmed Vs Recovered\",\n        yaxis_title=\"Number of Cases\"\n    )\n)\nfig.show()","4c0124b1":"#Confirmed Vs Deaths\n\nfig = go.Figure(\n    data=[\n        go.Bar(\n            name=\"Confirmed\",\n            x=covid_cases_india_df[\"Name of State \/ UT\"],\n            y=covid_cases_india_df[\"Total Confirmed cases\"],\n            offsetgroup=0,\n        ),\n        go.Bar(\n            name=\"Deaths\",\n            x=covid_cases_india_df[\"Name of State \/ UT\"],\n            y=covid_cases_india_df[\"Deaths\"],\n            offsetgroup=0,\n            base=covid_cases_india_df[\"Deaths\"],\n        )\n    ],\n    layout=go.Layout(\n        title=\"Confirmed Vs Deaths\",\n        yaxis_title=\"Number of Cases\"\n    )\n)\nfig.show()","bf80cbeb":"covid_coordinates.head()","92ac3927":"covid_coordinates.drop('Unnamed: 3', axis=1,inplace=True)","8e06bf51":"covid_coordinates.head()","45ee02b4":"center_lat = covid_coordinates.mean().Latitude\ncenter_long = covid_coordinates.mean().Longitude","5fd6d4ee":"laMap = folium.Map(location=[center_lat, center_long], tiles='Stamen Toner', zoom_start=5)\nfor i,row in covid_coordinates.iterrows():\n    folium.CircleMarker((row.Latitude,row.Longitude), radius=3, weight=2, color='red', fill_color='red', fill_opacity=.5).add_to(laMap)\nlaMap","5c485ae5":"laMap = folium.Map(location=[center_lat, center_long], tiles='Stamen Toner', zoom_start=5)\nfor i,row in covid_coordinates.iterrows():\n    folium.CircleMarker((row.Latitude,row.Longitude), radius=3, weight=2, color='red', fill_color='red', fill_opacity=.5).add_to(laMap)\nlaMap.add_children(plugins.HeatMap(data=covid_coordinates[['Latitude', 'Longitude']].to_numpy (), radius=25, blur=10))\nlaMap","e66f9cd2":"covid_perday_df.head()","02818ab5":"fig =go.Figure()\nfig.add_trace(go.Scatter(x=covid_perday_df['Date'],y =covid_perday_df['Total Cases'], mode='lines+markers',name= 'Total Cases',line=dict(color=\"Black\",width=2)))\nfig.add_trace(go.Scatter(x=covid_perday_df['Date'],y =covid_perday_df['New Cases'], mode='lines+markers',name= 'New Cases',line=dict(color=\"Orange\",width=2)))\nfig.update_layout(title='India Covid-19 cases',xaxis_tickfont_size =14,yaxis=dict(title=\"No of cases\"))\nfig.show()","d4c5c737":"temp = covid_perday_df.groupby('Date')['Total Cases','New Cases'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop= True)\ntm = temp.melt(id_vars='Date',value_vars=['Total Cases','New Cases'])\nfig = px.treemap(tm,path=[\"variable\"],values='value',height=250,width = 800,color_discrete_sequence=[cnf,new])\nfig.data[0].textinfo ='label+text+value'\nfig.show()","13ab7f62":"temp = covid_perday_df.groupby('Date')['Total Cases','New Cases'].sum().reset_index()\ntemp = temp.melt(id_vars= \"Date\",value_vars= ['Total Cases','New Cases'],var_name='Case',value_name=\"Count\")\nfig = px.area(temp,x=\"Date\",y=\"Count\",color=\"Case\",height=400,title=\"Cases Over time\",color_discrete_sequence=[cnf,new])\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","7abc2ac2":"fig_t = px.bar(covid_perday_df,x='Date',y = 'Total Cases',color_discrete_sequence=[cnf])\nfig_n = px.bar(covid_perday_df,x='Date',y = 'New Cases',color_discrete_sequence=[new])\nfig = make_subplots(rows=1,cols=2,shared_xaxes=False,horizontal_spacing=0.1,\n                   subplot_titles=('Total Cases','New Cases'))\nfig.add_trace(fig_t['data'][0],row=1,col=1)\nfig.add_trace(fig_n['data'][0],row=1,col=2)\n\nfig.update_layout(height=400)\nfig.show()","ee6707aa":"### Total Cases vs New Cases","54687a8d":"# Confirmed Cases Statewise","07e91648":"# Confirmed Vs Recovered","580e7c4c":"## Folium Maps (Circle Marker) ","c29d0361":"## HeatMap","1f33d4b1":"# Cases on Indian Map ","fba12f38":"# Loading Data","8466de31":"# Import Libraries","36411e08":"# Total Recovered Cases Statewise","209126f9":"# Confirmed Vs Deaths","0e86648f":"# Total Deaths Statewise","0a5c7e1f":"# Date wise Analysis","6d65a2dd":"# Active Cases Statewise","dad51957":"### Cases Over the time","cf89a1c6":"### India Covid-19 cases datewise "}}