{"cell_type":{"86bfa5eb":"code","7a314586":"code","778b93e6":"code","f203bcf4":"code","6c272c8f":"code","61a52408":"code","c64d4b2a":"code","3f1c5087":"code","cd454de7":"code","b5a58c6f":"code","633b9be6":"code","b869e057":"code","1de7a1d1":"code","f8c27950":"code","b891ceca":"code","ac07664a":"code","79a0b915":"code","c6816e18":"code","07bc1f90":"code","e33d6c00":"code","a26bf141":"code","1f68b4b6":"code","aa8dd38c":"code","350a02b1":"code","73cfbda2":"code","67f410b0":"markdown","21cace65":"markdown","3306f5b9":"markdown","35ee87c8":"markdown","9ec6be30":"markdown","c748c8aa":"markdown","42954cf9":"markdown","e2a0c5af":"markdown","669947d4":"markdown","38464b21":"markdown","e6bf0364":"markdown","58faa71d":"markdown","d55c0f6d":"markdown","8d8110c7":"markdown","6fd07e68":"markdown","c1e55d0f":"markdown","7b908182":"markdown","2a8bc3c1":"markdown","fbd70c4b":"markdown","900af788":"markdown"},"source":{"86bfa5eb":"# learning from https:\/\/www.kaggle.com\/robikscube\/m5-forecasting-starter-data-exploration\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\nfrom itertools import cycle\npd.set_option('max_columns', 50)\nplt.style.use('bmh')\ncolor_pal = plt.rcParams['axes.prop_cycle'].by_key()['color']\ncolor_cycle = cycle(plt.rcParams['axes.prop_cycle'].by_key()['color'])\n","7a314586":"cal = pd.read_csv('..\/input\/m5-forecasting-accuracy\/calendar.csv')\ntrain = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')\nsubmission = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sample_submission.csv')\nsellprice = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sell_prices.csv')\n\ndays = [d for d in train.columns if 'd_' in d]","778b93e6":"# total sales over 1913 days of a product\ntrain['total_sale'] = train.loc[:,days].sum(axis=1)\n\n# sort items by sale\nprint(train['total_sale'].sort_values())\nprint('\\n')\n\n\n# index of an item\nprint(train.index[train.id == 'FOODS_3_090_CA_3_validation'][0])\nprint('\\n')","f203bcf4":"# item most sold\nprint('Top 5:')\nprint(train.loc[8412,'id'].replace('_validation',''), ':', train.loc[8412,'total_sale'])\nprint(train.loc[18055,'id'].replace('_validation',''), ':', train.loc[18055,'total_sale'])\nprint(train.loc[21104,'id'].replace('_validation',''), ':', train.loc[21104,'total_sale'])\nprint(train.loc[8908,'id'].replace('_validation',''), ':', train.loc[8908,'total_sale'])\nprint(train.loc[2314,'id'].replace('_validation',''), ':', train.loc[2314,'total_sale'])\n\nprint('\\n')\n\n# item least sold\nprint('Bottom 5:')\nprint(train.loc[6682,'id'].replace('_validation',''), ':', train.loc[6682,'total_sale'])\nprint(train.loc[6048,'id'].replace('_validation',''), ':', train.loc[6048,'total_sale'])\nprint(train.loc[27606,'id'].replace('_validation',''), ':', train.loc[27606,'total_sale'])\nprint(train.loc[20192,'id'].replace('_validation',''), ':', train.loc[20192,'total_sale'])\nprint(train.loc[26276,'id'].replace('_validation',''), ':', train.loc[26276,'total_sale'])","6c272c8f":"# function to plot sale of any item, given 'id'\n# matchs days in actual date\ndef plot_item(item_name):\n        \n    sale = train.loc[train.id == item_name, days].T # get daily sales, then transpose\n    \n    item_index = train.index[train.id == item_name][0] # index of this item\n   \n    item_name = item_name.replace('_validation','') # remove _validation\n           \n    sale = sale.rename(columns={item_index:item_name}) # rename column to item name\n    sale = sale.reset_index().rename(columns={'index':'d'}) #re name column to d\n    sale = sale.merge(cal, how='left', validate='1:1') # merge\n    sale = sale.set_index('date')[item_name] # just keep the columns we need\n    \n    sale.plot(figsize=(22,9),lw=2)\n    plt.title(f'{item_name} sale over time')\n    plt.legend([item_name])\n    plt.show()\n\n# top 3\nplot_item('FOODS_3_090_CA_3_validation')\n# plot_item('FOODS_3_586_TX_2_validation')\n# plot_item('FOODS_3_586_TX_3_validation')     \n\n# bottom 3\n#plot_item('HOUSEHOLD_1_020_CA_3_validation')\n#plot_item('FOODS_3_778_CA_2_validation')\n#plot_item('HOBBIES_1_170_WI_3_validation')","61a52408":"# function to plot sale of any item, given 'id'\n# by week\/month\/year\n\ndef plot_by_wmy(item_name):\n\n    # one row, 3 column\n    fig, (ax1,ax2,ax3) = plt.subplots(1,3,figsize=(16,3))\n    \n    sale = train.loc[train.id == item_name, days].T # get daily sales, then transpose\n\n    item_index = train.index[train.id == item_name][0] # index of this item\n\n    item_name = item_name.replace('_validation','') # remove _validation\n\n    sale = sale.rename(columns={item_index:item_name}) # rename column to item name\n    sale = sale.reset_index().rename(columns={'index':'d'}) #re name column to d\n    sale = sale.merge(cal, how='left', validate='1:1') # merge\n\n    sale_day = sale.groupby('wday')[item_name].mean() # mean sale by day of week\n    sale_month = sale.groupby('month')[item_name].mean() # mean sale by day of week\n    sale_year = sale.groupby('year')[item_name].mean() # mean sale by day of week\n\n    sale_day.plot(kind='line',lw=8,title='average sale, day of week',color='blue',ax=ax1) # plot by day\n    sale_month.plot(kind='line',lw=8,title='average sale, by month', color='red',ax=ax2) # plot by month\n    sale_year.plot(kind='line',lw=8,title='average sale, by year',color='green',ax=ax3) # plot by year\n    \n    ax1.set_xlabel('day')\n\n    fig.suptitle(f'Trend for: {item_name}' ,size=20,y=1.2) # title\n\n    plt.show()\n\nplot_by_wmy('FOODS_3_090_CA_3_validation')\nplot_by_wmy('FOODS_3_586_TX_2_validation')\nplot_by_wmy('FOODS_3_586_TX_3_validation')","c64d4b2a":"# total number of goods in each category\n\na = pd.DataFrame(train.groupby('cat_id').count()['id'])\na = a.rename(columns={'id':'Count'})\n\na.plot.pie(y='Count', figsize=(10,10))\nplt.legend(loc='upper left')\nplt.show()","3f1c5087":"# Sale of each Category each day\n\na =train.set_index('id')[days].T  # d, item1, item2 ...\nb =cal.set_index('d')['date']     # d, date\n\npast_sales = a.merge(b, left_index=True, right_index=True, validate='1:1').set_index('date') # date, item1, item2 ...\n\n\nitems_col = [c for c in past_sales.columns if 'HOBBIES' in c]\npast_sales[items_col].sum(axis=1).plot(kind='line',figsize=(20,5))\n\nitems_col = [c for c in past_sales.columns if 'FOOD' in c]\npast_sales[items_col].sum(axis=1).plot(kind='line',figsize=(20,5))\n\nitems_col = [c for c in past_sales.columns if 'HOUSEHOLD' in c]\npast_sales[items_col].sum(axis=1).plot(kind='line',figsize=(20,5))\n\nplt.title('Sale by category',y=1.1, size=25)\nplt.legend(['HOBBIES','FOOD','HOUSEHOLD'])\n\nplt.show()","cd454de7":"# rolling mean sales by store\nstore_list = train.store_id.unique()\nstore_list\n\na = train.groupby('store_id')[days].sum().T # d, store\nb =cal.set_index('d')['date']     # d, date\n\nstore_sales = a.merge(b, left_index=True, right_index=True, validate='1:1').set_index('date') # date, store\n\n\n# rolling 30 days\nplt.figure(figsize=(24,5))\n\nfor store in store_list:\n    \n    store_sales[store].rolling(30).mean().plot(kind='line')\n\nplt.title('Rolling 30 days sale for all stores')\nplt.legend(store_list)\nplt.show()\n\n\n# rolling 90 days\nplt.figure(figsize=(24,5))\n\nfor store in store_list:\n    \n    store_sales[store].rolling(90).mean().plot(kind='line')\n\nplt.title('Rolling 90 days sale for all stores')\nplt.legend(store_list)\nplt.show()","b5a58c6f":"# Rolling 7 day sales by store\n\nfig, axes = plt.subplots(5,2,figsize=(25,10), sharex=True)\n\naxes = axes.flatten()\n\nax_idx = 0\n\nfor store in store_list:\n    \n    store_sales[store].rolling(7).mean().plot(kind='line',title=store, lw = 2, color=next(color_cycle), ax=axes[ax_idx])\n    \n    ax_idx += 1\n\nplt.suptitle('Rolling 7 days sale by store', size=30, y=1.2)\nplt.tight_layout()\nplt.show()","633b9be6":"# sort days by sales, min to max\na = pd.DataFrame(store_sales.sum(axis=1).sort_values(),columns=['Sale'])\na","b869e057":"# preping for heatmap 52weeks\n\na = train.groupby('cat_id')[days].sum().T # d, store\nb = cal.set_index('d').loc[:,['date','wday','month','weekday']]     # d, date\n\nstore_sales = a.merge(b, left_index=True, right_index=True, validate='1:1').set_index('date') # date, store\n\nstore_sales.index = pd.to_datetime(store_sales.index) # make index date format\n","1de7a1d1":"# everyday sale by weekdays, (FOODS HOBBIES HOUSEHOLD), (start date), (year), rolling 364 day\n\ndef heatmap_52weeks(cat_id,start_date,year):\n    \n    # pick the dates, then reset index so can add columns in new DF\n    sale = store_sales.loc[store_sales.index.isin(pd.date_range(start=start_date, periods=364))]\n    sale = sale.reset_index()\n    \n    # new df used for plot\n    # intialize a DF\n    sale_week = pd.DataFrame({'day':['Mon','Tue','Wed','Thu','Fri','Sat','Sun'],'week 1':sale[cat_id][0:7]})\n\n    # add columns week 2:52\n    for i in range(1,52):\n         sale_week[f'week {i+1}'] = sale.loc[i*7 : i*7+7,cat_id].reset_index()[cat_id]\n\n    \n    sale_week = sale_week.set_index('day')\n \n    plt.figure(figsize=(25,5))\n    sns.heatmap(sale_week, square=True, cmap='seismic')\n    plt.title(f'{cat_id}: Year {year}')\n    plt.show()\n","f8c27950":"# food \nheatmap_52weeks('FOODS','2012-01-02', '2012')\nheatmap_52weeks('FOODS','2012-12-31', '2013')\nheatmap_52weeks('FOODS','2013-12-30', '2014')\nheatmap_52weeks('FOODS','2014-12-29', '2015')","b891ceca":"# hobby\nheatmap_52weeks('HOBBIES','2012-01-02', '2012')\nheatmap_52weeks('HOBBIES','2012-12-31', '2013')\nheatmap_52weeks('HOBBIES','2013-12-30', '2014')\nheatmap_52weeks('HOBBIES','2014-12-29', '2015')","ac07664a":"# household\nheatmap_52weeks('HOUSEHOLD','2012-01-02', '2012')\nheatmap_52weeks('HOUSEHOLD','2012-12-31', '2013')\nheatmap_52weeks('HOUSEHOLD','2013-12-30', '2014')\nheatmap_52weeks('HOUSEHOLD','2014-12-29', '2015')","79a0b915":"store_list = train.store_id.unique()\nstore_list\n\n# function that produce trend of price over time, given 'item name', list of stores\n\ndef price_over_time(item_name,store_names):\n    fig, ax = plt.subplots(figsize=(22, 5))\n    \n    for SS in store_names:\n\n        prices = sellprice.loc[sellprice.item_id == item_name].loc[sellprice.store_id == SS]\n        prices = prices.loc[:,['wm_yr_wk','sell_price']]\n\n        prices.plot(x='wm_yr_wk',\n                  y='sell_price',\n                  style='.',\n                  color=next(color_cycle),\n                  figsize=(15, 5),\n                  title=f'{item_name} sale price over time',\n                  ax=ax\n                )\n    \n    plt.legend(store_names)\n    plt.show()\n\nprice_over_time('FOODS_3_586',['TX_1','TX_2','TX_3'])","c6816e18":"# preping for holiday effect\n\na = train.groupby('cat_id')[days].sum().T # d, store\nb = cal.set_index('d').loc[:,['date','wday','month','weekday','event_name_1','event_type_1']] # d, date\n\nstore_sales = a.merge(b, left_index=True, right_index=True, validate='1:1').set_index('date') # date, store\n\nstore_sales.index = pd.to_datetime(store_sales.index) # make index date format\n\nss = store_sales\n\n# list all of holiday, remove NaN\nevents = ss.event_name_1.unique()\nevents = events[1:len(events)]\nevents","07bc1f90":"# FOOD sale on holiday\nfig, axes = plt.subplots(10,3,figsize=(25,60))\n\naxes = axes.flatten()\nax_idx = 0\n\n\nfor ee in events:\n    \n    normal_day_sales = ss.loc[(ss.event_name_1.isnull()) & (ss.weekday != 'Saturday') & (ss.weekday != 'Sunday')] # sales on normal day\n    nm = normal_day_sales['FOODS'].mean()  \n\n    event_day = ss.loc[(ss.event_name_1 == ee)] # sale on the holiday\n    em = event_day['FOODS'].mean()\n\n    df = pd.DataFrame({'Type':[ee,'Normal day'],'Sale':[em,nm]}) # make new df\n    \n    df.plot(kind='bar',x='Type',y='Sale', title= ee, legend='', rot=0, color=['green','black'], ax=axes[ax_idx])\n    \n    axes[ax_idx].set_title(ee, fontsize=20)\n    axes[ax_idx].tick_params(axis='both', which='major', labelsize=20) # x y tick font size\n    axes[ax_idx].set_xlabel('') # remove x label\n    axes[ax_idx].grid(False) # remove grid\n    \n    ax_idx +=1\n    \nplt.tight_layout()\nplt.suptitle('Food Sales on Holidays', size=40, y=1.02)\nplt.subplots_adjust(hspace=0.25, wspace=0.25)\nplt.show()\n    \n    ","e33d6c00":"# Hobbies sale on holiday\nfig, axes = plt.subplots(10,3,figsize=(25,60))\n\naxes = axes.flatten()\nax_idx = 0\n\nfor ee in events:\n    \n    normal_day_sales = ss.loc[(ss.event_name_1.isnull()) & (ss.weekday != 'Saturday') & (ss.weekday != 'Sunday')] # sales on normal day\n    nm = normal_day_sales['HOBBIES'].mean()  \n\n    event_day = ss.loc[(ss.event_name_1 == ee)] # sale on the holiday\n    em = event_day['HOBBIES'].mean()\n\n    df = pd.DataFrame({'Type':[ee,'Normal day'],'Sale':[em,nm]}) # make new df\n    \n    df.plot(kind='bar',x='Type',y='Sale', title= ee, legend='', rot=0, color=['dodgerblue','black'], ax=axes[ax_idx])\n    \n    axes[ax_idx].set_title(ee, fontsize=20)\n    axes[ax_idx].tick_params(axis='both', which='major', labelsize=20) # x y tick font size\n    axes[ax_idx].set_xlabel('') # remove x label\n    axes[ax_idx].grid(False) # remove grid\n    \n    ax_idx +=1\n    \nplt.tight_layout()\nplt.suptitle('Hobbies Sales on Holidays', size=40, y=1.02)\nplt.subplots_adjust(hspace=0.25, wspace=0.25)\nplt.show()\n    \n    ","a26bf141":"# Household sale on holiday\nfig, axes = plt.subplots(10,3,figsize=(25,60))\n\naxes = axes.flatten()\nax_idx = 0\n\nfor ee in events:\n    \n    normal_day_sales = ss.loc[(ss.event_name_1.isnull()) & (ss.weekday != 'Saturday') & (ss.weekday != 'Sunday')] # sales on normal day\n    nm = normal_day_sales['HOUSEHOLD'].mean()  \n\n    event_day = ss.loc[(ss.event_name_1 == ee)] # sale on the holiday\n    em = event_day['HOUSEHOLD'].mean()\n\n    df = pd.DataFrame({'Type':[ee,'Normal day'],'Sale':[em,nm]}) # make new df\n    \n    df.plot(kind='bar',x='Type',y='Sale', title= ee, legend='', rot=0, color=['peru','black'], ax=axes[ax_idx])\n\n    axes[ax_idx].set_title(ee, fontsize=20)\n    axes[ax_idx].tick_params(axis='both', which='major', labelsize=20) # x y tick font size\n    axes[ax_idx].set_xlabel('') # remove x label\n    axes[ax_idx].grid(False) # remove grid\n    \n    ax_idx +=1\n    \nplt.tight_layout()\nplt.suptitle('Household Sales on Holidays', size=40, y=1.02)\nplt.subplots_adjust(hspace=0.25, wspace=0.25)\nplt.show()\n    \n","1f68b4b6":"# event types, 'Sporting', 'Cultural', 'National', 'Religious'\nevent_types = ss.event_type_1.unique()\nevent_types = event_types[1:len(event_types)]","aa8dd38c":"# Food sale on type holiday\nfig, axes = plt.subplots(2,2,figsize=(10,10))\n\naxes = axes.flatten()\nax_idx = 0\n\nfor ep in event_types:\n    \n    normal_day_sales = ss.loc[(ss.event_type_1.isnull()) & (ss.weekday != 'Saturday') & (ss.weekday != 'Sunday')] # sales on normal day\n    nm = normal_day_sales['FOODS'].mean()  \n\n    event_day = ss.loc[(ss.event_type_1 == ep)] # sale on the holiday\n    em = event_day['FOODS'].mean()\n\n    df = pd.DataFrame({'Type':[ee,'Normal day'],'Sale':[em,nm]}) # make new df\n    \n    df.plot(kind='bar',x='Type',y='Sale', title= ep, legend='', rot=0, color=['green','black'], ax=axes[ax_idx])\n    \n    axes[ax_idx].set_xlabel('') # remove x label\n    axes[ax_idx].grid(False) # remove grid\n    \n    ax_idx +=1\n    \nplt.tight_layout()\nplt.suptitle('Food Sales on Holidays', size=30, y=1.05)\nplt.subplots_adjust(hspace=0.25, wspace=0.25)\nplt.show()\n    \n","350a02b1":"# Hobby sale on type holiday\nfig, axes = plt.subplots(2,2,figsize=(10,10))\n\naxes = axes.flatten()\nax_idx = 0\n\nfor ep in event_types:\n    \n    normal_day_sales = ss.loc[(ss.event_type_1.isnull()) & (ss.weekday != 'Saturday') & (ss.weekday != 'Sunday')] # sales on normal day\n    nm = normal_day_sales['HOBBIES'].mean()  \n\n    event_day = ss.loc[(ss.event_type_1 == ep)] # sale on the holiday\n    em = event_day['HOBBIES'].mean()\n\n    df = pd.DataFrame({'Type':[ee,'Normal day'],'Sale':[em,nm]}) # make new df\n    \n    df.plot(kind='bar',x='Type',y='Sale', title= ep, legend='', rot=0, color=['dodgerblue','black'], ax=axes[ax_idx])\n    \n    axes[ax_idx].set_xlabel('') # remove x label\n    axes[ax_idx].grid(False) # remove grid\n    \n    ax_idx +=1\n    \nplt.tight_layout()\nplt.suptitle('Hobbies Sales on Holidays', size=30, y=1.05)\nplt.subplots_adjust(hspace=0.25, wspace=0.25)\nplt.show()\n    \n","73cfbda2":"# Household sale on type holiday\nfig, axes = plt.subplots(2,2,figsize=(10,10))\n\naxes = axes.flatten()\nax_idx = 0\n\nfor ep in event_types:\n    \n    normal_day_sales = ss.loc[(ss.event_type_1.isnull()) & (ss.weekday != 'Saturday') & (ss.weekday != 'Sunday')] # sales on normal day\n    nm = normal_day_sales['HOUSEHOLD'].mean()  \n\n    event_day = ss.loc[(ss.event_type_1 == ep)] # sale on the holiday\n    em = event_day['HOUSEHOLD'].mean()\n\n    df = pd.DataFrame({'Type':[ee,'Normal day'],'Sale':[em,nm]}) # make new df\n    \n    df.plot(kind='bar',x='Type',y='Sale', title= ep, legend='', rot=0, color=['peru','black'], ax=axes[ax_idx])\n    \n    axes[ax_idx].set_xlabel('') # remove x label\n    axes[ax_idx].grid(False) # remove grid\n    \n    ax_idx +=1\n    \nplt.tight_layout()\nplt.suptitle('Household Sales on Holidays', size=30, y=1.05)\nplt.subplots_adjust(hspace=0.25, wspace=0.25)\nplt.show()\n    \n","67f410b0":"# Effect of holidays on 'Hobbies'\n* Noticeable differences: Superbowl, Purim End, OrthodoxEaster, Pesach End, Father's Day\n* Noticeable lower on the holiday: Independence Day, Thanks Giving, Christmas, New Year, Orthodox Christmas","21cace65":"# 'Food' sales by type of holiday\n* More 'Food' sales on Sports, Cultural, Religious holidays\n* Less 'Food' sales on National holidays","3306f5b9":"* For example, on 2016-03-06, Seventh Democratic presidential candidates debate hosted by CNN and held in Flint, Michigan\n* on 2016-02-06 Eighth Republican presidential candidates debate hosted by ABC, held in Goffstown, New Hampshire","35ee87c8":"# Effect of holidays on 'Household'\n* Noticeable differences: SuperBowl, President Day, St Paricks Day, Purim End, Orthodox Easter, Pesach, Father's Day, Ramadan Starts, Eid al-Fitr, Labor Day,  Eid Al Adha, Martin Luther King day, Easter\n* Noticeable lower on the holiday: Thanks Giving, Christmas, New Year, Orthodox Christmas","9ec6be30":"# 'Hobbies' sales by type of holiday\n* Slightly more 'Hobbies' sales on Sports, Cultural, Religious holidays\n* Less 'Hobbies' sales on National holidays","c748c8aa":"# 'Food' sale per day from year 2012-2015\n* It is clear that Saturday and Sunday are days with high demands, this trend carries over a bit to Monday and Friday\n* In the middle of the week, there tends to be few sales\n* There is always less sale around week 4 and week 48\n* There seems to be some cyclis pattern as well, maybe people make big shopping roughly every 4 weeks?","42954cf9":"# Rolling 7 days sale by store\n## These show the same pattern as observed above","e2a0c5af":"# Proportion of goods in Walmart\n* Nearly 50% of Walmart commodities are in the 'Food' category\n* Around 30% are 'Household' \n* Around 20% are 'Hobbies'","669947d4":"# Effect of holidays on 'Food'\n* Noticeable differences: Superbowl, Purim End, OrthodoxEaster, Mother's day, Father's day, IndependenceDay, Ramadan starts, Eid al-Fitr, LaborDay, ColumbusDay, VeteransDay, OrthodoxChristmas, Easter\n* Noticeable lower on the holiday: Halloween, Thanksgiving, Christmas, NewYear","38464b21":"# Item with the most and least sales\n* Top 5 are all in the 'Food' category, highest sale is over 20k\n* Bottom 5 are extremely low consider the time frame is over 5 years. The product might only be recently added or only existed for a short period of time\n","e6bf0364":"# Min and Max daily sales\n* The lowest sales are on Christmas Day, no suprise\n* The highest days are worth more investigation, includes days before the date","58faa71d":"# Sales by Store Name over time\n* All store experience cycles in sales over the course of a year\n* *CA_3* has the highest overall\n* *CA_2* saw a sharp raise after April 2015\n* *WI_2* saw a sharp raise after May 2012\n* *WI_2* saw a sharp raise in the end of 2012\n* Texas stores are fairly steady","d55c0f6d":"# Visualizing data for Walmart Sales\n* The data contains sales divided into 3 categories: food, hobby and household\n* It is further divided base on location of the store, there are 3 stores each in CA, TX and WI\n* The sales data contains date from 2011-01-29 through 2016-06-19\n* There is a 'calender' file that labels holidays throughout the year","8d8110c7":"# 'Household' sales by type of holiday\n* Somewhat more 'Household' sales on Sports, Cultural, Religious holidays\n* Less 'Household' sales on National holidays","6fd07e68":"# Daily sale of an item\n* *FOODS_3_090_CA* is the highest sale item\n* The sale goes up and down and sometimes zero, maybe this is due to product out of stock","c1e55d0f":"# 'Household' sale per day from year 2012-2015\n* High sales over the weekend\n* Lower sales on weekdays\n* Usually low sales in the beginning of a year, this trend persisted very long in year 2012 all the way til week 23\n* Very low sale on Thanks Giving","7b908182":"# Sale by each category over time\n\n* Overall, all three categories sees a raise over time\n* 'Food' raised a lot from year 2011-2012\n* 'Household' saw a sharp raise in June 2012\n* 'Hobbies' growing slowly","2a8bc3c1":"# Price of an item over time\n* The price changes over time\n* Usually it is an upward trend, but it can vary from product to product, and also different by the stores","fbd70c4b":"# Sale of an item by day\/month\/year\n## Take a look at the top 3 items\n* It is clear the sale peaks at day = 1,2 (Saturday and Sunday), then drops and raise again as towards end of a week\n* The peak for month is in August, while this might differ from item to item\n* The items had really high sales in year 2011-2012, it reduced dramatically in recent years","900af788":"# 'Hobbies' sale per day from year 2012-2015\n* High sales over the weekend, already see the raise on Friday\n* Always very low sale on a Thursday in week 47\/48, due to Thanks Giving\n* Very low sale in early year of 2013\n* In year 2014 and 2015, the sales are fairly high everyday in the last few weeks of the year"}}