{"cell_type":{"2a019dbc":"code","e26494e2":"code","5c9f9d8c":"code","1fd95b89":"code","0317f75b":"code","4e1db53d":"code","42fbd03b":"code","04a5ca57":"code","77c83b25":"code","23a43cbf":"code","53574c5b":"code","8031dd8e":"code","780ecc64":"code","8747fe02":"code","a16e8c56":"code","f6c7108e":"code","e64400f8":"code","129a176d":"code","fc2821ed":"code","a1fae3d8":"code","a90d5fed":"code","4fe0ccfc":"code","572d1aa6":"code","1e15279f":"markdown","d8eee42b":"markdown","b1c8ce00":"markdown","399109bd":"markdown","ad31a64b":"markdown","14dbc620":"markdown","cb8b5c37":"markdown","efdcd4af":"markdown","bcb5db46":"markdown","9da25c11":"markdown"},"source":{"2a019dbc":"!git clone https:\/\/github.com\/rkuo2000\/yolov5\n%cd yolov5","e26494e2":"!mkdir -p Dataset\/FaceMask\/Images\n!mkdir -p Dataset\/FaceMask\/Labels","5c9f9d8c":"# copy image files\n!cp -rf \/kaggle\/input\/face-mask-detection\/images\/* Dataset\/FaceMask\/Images","1fd95b89":"!mkdir -p Dataset\/images Dataset\/labels","0317f75b":"import os\nimport numpy as np\nfrom pathlib import Path\nfrom xml.dom.minidom import parse\nfrom shutil import copyfile","4e1db53d":"FILE_ROOT = \"\/kaggle\/input\/face-mask-detection\/\"\nIMAGE_PATH = FILE_ROOT + \"images\"  \nANNOTATIONS_PATH = FILE_ROOT + \"annotations\"\n\nDATA_ROOT = \"Dataset\/\"\nLABELS_ROOT = DATA_ROOT + \"FaceMask\/Labels\"\nIMAGES_ROOT = DATA_ROOT + \"FaceMask\/Images\"  \n\nDEST_IMAGES_PATH = \"images\"\nDEST_LABELS_PATH = \"labels\" ","42fbd03b":"classes = ['with_mask', 'without_mask', 'mask_weared_incorrect']","04a5ca57":"def cord_converter(size, box):\n    \"\"\"\n    convert xml annotation to darknet format coordinates\n    :param size\uff1a [w,h]\n    :param box: anchor box coordinates [upper-left x,uppler-left y,lower-right x, lower-right y]\n    :return: converted [x,y,w,h]\n    \"\"\"\n    x1 = int(box[0])\n    y1 = int(box[1])\n    x2 = int(box[2])\n    y2 = int(box[3])\n\n    dw = np.float32(1. \/ int(size[0]))\n    dh = np.float32(1. \/ int(size[1]))\n\n    w = x2 - x1\n    h = y2 - y1\n    x = x1 + (w \/ 2)\n    y = y1 + (h \/ 2)\n\n    x = x * dw\n    w = w * dw\n    y = y * dh\n    h = h * dh\n    return [x, y, w, h]\n\ndef save_file(img_jpg_file_name, size, img_box):\n    save_file_name = LABELS_ROOT + '\/' + img_jpg_file_name + '.txt'\n    print(save_file_name)\n    file_path = open(save_file_name, \"a+\")\n    for box in img_box:\n\n        cls_num = classes.index(box[0])\n\n        new_box = cord_converter(size, box[1:])\n\n        file_path.write(f\"{cls_num} {new_box[0]} {new_box[1]} {new_box[2]} {new_box[3]}\\n\")\n\n    file_path.flush()\n    file_path.close()\n    \ndef get_xml_data(file_path, img_xml_file):\n    img_path = file_path + '\/' + img_xml_file + '.xml'\n    print(img_path)\n\n    dom = parse(img_path)\n    root = dom.documentElement\n    img_name = root.getElementsByTagName(\"filename\")[0].childNodes[0].data\n    img_size = root.getElementsByTagName(\"size\")[0]\n    objects = root.getElementsByTagName(\"object\")\n    img_w = img_size.getElementsByTagName(\"width\")[0].childNodes[0].data\n    img_h = img_size.getElementsByTagName(\"height\")[0].childNodes[0].data\n    img_c = img_size.getElementsByTagName(\"depth\")[0].childNodes[0].data\n    # print(\"img_name:\", img_name)\n    # print(\"image_info:(w,h,c)\", img_w, img_h, img_c)\n    img_box = []\n    for box in objects:\n        cls_name = box.getElementsByTagName(\"name\")[0].childNodes[0].data\n        x1 = int(box.getElementsByTagName(\"xmin\")[0].childNodes[0].data)\n        y1 = int(box.getElementsByTagName(\"ymin\")[0].childNodes[0].data)\n        x2 = int(box.getElementsByTagName(\"xmax\")[0].childNodes[0].data)\n        y2 = int(box.getElementsByTagName(\"ymax\")[0].childNodes[0].data)\n        # print(\"box:(c,xmin,ymin,xmax,ymax)\", cls_name, x1, y1, x2, y2)\n        img_jpg_file_name = img_xml_file + '.jpg'\n        img_box.append([cls_name, x1, y1, x2, y2])\n    # print(img_box)\n\n    # test_dataset_box_feature(img_jpg_file_name, img_box)\n    save_file(img_xml_file, [img_w, img_h], img_box)","77c83b25":"files = os.listdir(ANNOTATIONS_PATH)\nfor file in files:\n    print(\"file name: \", file)\n    file_xml = file.split(\".\")\n    get_xml_data(ANNOTATIONS_PATH, file_xml[0])","23a43cbf":"from sklearn.model_selection import train_test_split\nimage_list = os.listdir('Dataset\/FaceMask\/Images')\ntrain_list, test_list = train_test_split(image_list, test_size=0.2, random_state=7)\nval_list, test_list = train_test_split(test_list, test_size=0.5, random_state=8)\n\nprint('total =',len(image_list))\nprint('train :',len(train_list))\nprint('val   :',len(val_list))\nprint('test  :',len(test_list))","53574c5b":"def copy_data(file_list, img_labels_root, imgs_source, type):\n\n    root_file = Path(DATA_ROOT + DEST_IMAGES_PATH + '\/' + type)\n    if not root_file.exists():\n        print(f\"Path {root_file} is not exit\")\n        os.makedirs(root_file)\n\n    root_file = Path(DATA_ROOT + DEST_LABELS_PATH + '\/' + type)\n    if not root_file.exists():\n        print(f\"Path {root_file} is not exit\")\n        os.makedirs(root_file)\n\n    for file in file_list:\n        img_name = file.replace('.png', '')\n        img_src_file = imgs_source + '\/' + img_name + '.png'\n        label_src_file = img_labels_root + '\/' + img_name + '.txt'\n\n        # print(img_sor_file)\n        # print(label_sor_file)\n        # im = Image.open(rf\"{img_sor_file}\")\n        # im.show()\n\n        # Copy image\n        DICT_DIR = DATA_ROOT + DEST_IMAGES_PATH + '\/' + type\n        img_dict_file = DICT_DIR + '\/' + img_name + '.png'\n\n        copyfile(img_src_file, img_dict_file)\n\n        # Copy label\n        DICT_DIR = DATA_ROOT + DEST_LABELS_PATH + '\/' + type\n        img_dict_file = DICT_DIR + '\/' + img_name + '.txt'\n        copyfile(label_src_file, img_dict_file)","8031dd8e":"copy_data(train_list, LABELS_ROOT, IMAGES_ROOT, \"train\")\ncopy_data(val_list,   LABELS_ROOT, IMAGES_ROOT, \"val\")\ncopy_data(test_list,  LABELS_ROOT, IMAGES_ROOT, \"test\")","780ecc64":"!echo \"train: Dataset\/images\/train\\n\" > data\/facemask.yaml\n!echo \"val:   Dataset\/images\/val\\n\" >> data\/facemask.yaml\n!echo \"nc : 3\\n\" >> data\/facemask.yaml\n!echo \"names: ['With_Mask', 'Without_Mask', 'Incorrect_Mask']\\n\" >> data\/facemask.yaml\n\n!cat data\/facemask.yaml","8747fe02":"!ls","a16e8c56":"# Train with default Yolov5.weight\n#!python train.py --img 320 --batch 16 --epochs 50 --data data\/facemask.yaml --cfg models\/yolov5s.yaml --weights yolov5s.pt\n\n# Train with pretrained weight >>> upload newest file to folder weights\n!python train.py --img 320 --batch 16 --epochs 50 --data data\/facemask.yaml --cfg models\/yolov5s.yaml --weights weights\/pretrained.pt\n","f6c7108e":"# save trained weights for detection\n!cp runs\/train\/exp\/weights\/pretrained.pt weights","e64400f8":"!python detect.py --source Dataset\/images\/test --img-size 320 --conf 0.4 --weights weights\/pretrained.pt ","129a176d":"# display detected images\nfrom IPython.display import Image","fc2821ed":"from glob import glob\nimport matplotlib.pyplot as plt\ntestfiles = glob('runs\/detect\/exp\/*')\n\nimg = plt.imread(testfiles[0]) \nplt.imshow(img)    \nplt.show","a1fae3d8":"!python detect.py --source \/kaggle\/input\/input-images\/facemask.jpg --img-size 320 --conf 0.4 --weights weights\/pretrained.pt ","a90d5fed":"Image('runs\/detect\/exp2\/facemask.jpg')","4fe0ccfc":"!python detect.py --source \/kaggle\/input\/input-images\/facemask1.jpg --img-size 320 --conf 0.4 --weights weights\/pretrained.pt ","572d1aa6":"Image('runs\/detect\/exp3\/facemask1.jpg')","1e15279f":"<h2>DOWNLOAD<\/h2>\n\n<a href=\"https:\/\/kkb-production.jupyter-proxy.kaggle.net\/k\/54994990\/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwidHlwIjoiSldUIn0..BSWsiW8jGQTSeityClU6XQ.0zu6Bt6JSZJPCQpitQEeamc-PdEpBAyG7SYqhfSzXRaJFuqRU1HMLt9djHClz9Xygk07I4cuZxK-vAa0GjjDMQP0be1F-spgZh9WfyzQQmVPzW0eqHp8XWYRX11NiYowwjEzjCumyMKFesrvXvo_801PSCNTnbjzPrQ5aOIIjxsXf5vdBVSdRRdGtN20DOxyC2zBKpW_o583tVIYs5xxmg.JGIUJ6JicuYOERIlQcA72A\/proxy\/tree\/yolov5\/weights\/best.pt\"> Download BEST weight <\/a>","d8eee42b":"## Create Dataset","b1c8ce00":"## Dataset: [Face Mask Detection](https:\/\/www.kaggle.com\/andrewmvd\/face-mask-detection)","399109bd":"## split Images dataset","ad31a64b":"## Repro [YOLOv5](https:\/\/github.com\/ultralytics\/yolov5)","14dbc620":"## Test YOLOv5","cb8b5c37":"### detect facemask","efdcd4af":"### convert annotations (from COCO .xml to YOLO format .txt)","bcb5db46":"## Create data\/facemask.yaml","9da25c11":"## Train YOLOv5\n<a href=\"..\/tree\/yolov5\/weights\">link to weight folder to upload pretrained model<\/a>"}}