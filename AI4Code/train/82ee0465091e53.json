{"cell_type":{"d9276450":"code","bf543eb6":"code","3153bf16":"code","0b8e7b5c":"code","95499f7d":"code","9345078a":"code","0a2b388c":"code","2657ed0d":"code","3c29a65c":"code","a4573f8a":"code","e38e6558":"code","677d8673":"code","70122823":"code","40902cca":"code","f2aa99c7":"code","d0cdec05":"markdown","15cce9a9":"markdown","cc75c412":"markdown","9d9679cd":"markdown","9f83ef31":"markdown","28497f6e":"markdown","e11c73d7":"markdown","34e53a3d":"markdown","7b17b2d8":"markdown"},"source":{"d9276450":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom catboost import CatBoostClassifier,cv,Pool\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","bf543eb6":"train_orig = pd.read_csv('..\/input\/agriculture-prediction-av\/train (1).csv')\ntest_orig = pd.read_csv('..\/input\/agriculture-prediction-av\/test (1).csv')\ntrain_orig.head()","3153bf16":"train_orig.shape,test_orig.shape","0b8e7b5c":"train_orig.isna().sum(),test_orig.isna().sum()","95499f7d":"train_orig.info(),test_orig.info()","9345078a":"#Imputing the values of crop_damage as 99 in the test data\ntest_orig['Crop_Damage'] = 99","0a2b388c":"df = pd.merge(train_orig,test_orig,on=[x for x in train_orig.columns],how='outer')\ndf['ID'] = df['ID'].apply(lambda x: int(x.strip('F')))\ndf.sort_values('ID',inplace=True)","2657ed0d":"plt.figure(figsize=(15,6))\nplt.subplot(1,3,1)\nplt.plot(df['ID'][0:2000],df['Estimated_Insects_Count'][0:2000])\nplt.title('Insects Count')\nplt.subplot(1,3,2)\nplt.plot(df['ID'][0:1500],df['Number_Weeks_Used'][0:1500])\nplt.title('Weeks Used')\nplt.subplot(1,3,3)\nplt.plot(df['ID'][0:5000],df['Number_Weeks_Quit'][0:5000])\nplt.title('Weeks Quit')","3c29a65c":"#While performing EDA we also found that the number doses week and estimated insects count columns were not Normally distributed\n#so performing basic operations to convert them to normal distribution\ndf['Number_Weeks_Used'].fillna(value=int(df['Number_Weeks_Used'].mean()),inplace=True)\n\ndf['sqrt_no_doses_week'] = np.sqrt(df['Number_Doses_Week'])\n\ndf['sqrt_insects'] = np.sqrt(df['Estimated_Insects_Count'])\n#Though this doesn't produce effect much to the Decision Tree Models, it provided some significant features","a4573f8a":"def feature_extract(data):\n  for i in ['Crop_Type','Soil_Type','Pesticide_Use_Category','Season']:\n    group = data[['Estimated_Insects_Count','Number_Doses_Week','Number_Weeks_Used','Number_Weeks_Quit',i]].groupby([i]).agg(['mean','min','max','std'])\n    group.columns = ['_'.join(x) + f'_{i}' for x in group.columns.ravel()]\n    data = pd.merge(data,group,on=i,how='left')\n  return data","e38e6558":"df = feature_extract(df)","677d8673":"#Average insects per crop per soil\ndf['avg_insects_per_crop_soil'] = df[['Estimated_Insects_Count','Crop_Type','Soil_Type']].groupby(['Soil_Type','Crop_Type'])['Estimated_Insects_Count'].transform('mean')\n\n#Average insects per soil per crop\ndf['avg_insects_per_soil_crop'] = df[['Estimated_Insects_Count','Crop_Type','Soil_Type']].groupby(['Crop_Type','Soil_Type'])['Estimated_Insects_Count'].transform('mean')\n\n#Average insects per pesticide per crop per soil\ndf['avg_insects_per_pest_crop_soil'] = df[['Estimated_Insects_Count','Crop_Type','Soil_Type','Pesticide_Use_Category']].groupby(['Soil_Type','Crop_Type','Pesticide_Use_Category'])['Estimated_Insects_Count'].transform('mean')\n\n#Average insects per pesticide per soil per crop\ndf['avg_insects_per_pest_soil_crop'] = df[['Estimated_Insects_Count','Crop_Type','Soil_Type','Pesticide_Use_Category']].groupby(['Crop_Type','Soil_Type','Pesticide_Use_Category'])['Estimated_Insects_Count'].transform('mean')\n\n#Average insects per season per crop per soil\ndf['avg_insects_per_season_crop_soil'] = df[['Estimated_Insects_Count','Crop_Type','Soil_Type','Season']].groupby(['Soil_Type','Crop_Type','Season'])['Estimated_Insects_Count'].transform('mean')\n\n#Average insects per season per soil per crop\ndf['avg_insects_per_season_crop_soil'] = df[['Estimated_Insects_Count','Crop_Type','Soil_Type','Season']].groupby(['Crop_Type','Soil_Type','Season'])['Estimated_Insects_Count'].transform('mean')","70122823":"#Extracting rolling mean features from Estimated Insects Count\ndf['rolmean_insects_weeks_used'] = df[['Estimated_Insects_Count','Number_Weeks_Used']].groupby(['Number_Weeks_Used'])['Estimated_Insects_Count'].transform(lambda x: x.rolling(5).mean())\n\ndf['rolmean_insects_weeks_quit'] = df[['Estimated_Insects_Count','Number_Weeks_Quit']].groupby(['Number_Weeks_Quit'])['Estimated_Insects_Count'].transform(lambda x: x.rolling(window=1).mean())\n\n#Rolling mean specifically on insects count,number of weeks used, number weeks quit and number of doses week\ndf['rolmean_insects'] = df['Estimated_Insects_Count'].transform(lambda x: x.rolling(window=5).mean())\n\ndf['rolmean_weeks_used'] = df['Number_Weeks_Used'].transform(lambda x: x.rolling(window=5).mean())\n\ndf['rolmean_weeks_quit'] = df['Number_Weeks_Quit'].transform(lambda x: x.rolling(window=5).mean())\n\ndf['rolmean_doses_week'] = df['Number_Doses_Week'].transform(lambda x: x.rolling(window=5).mean())\n\ndf['rolmean_season'] = df['Season'].transform(lambda x: x.rolling(window=5).mean())\n\ndf.fillna(0,inplace=True)","40902cca":"X = df[df['Crop_Damage'] != 99]\nX_valid = df[df['Crop_Damage'] == 99]","f2aa99c7":"#XGBboost Model\nxgb1 = xgb.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.8, gamma=0,\n              learning_rate=0.1, max_delta_step=0, max_depth=5,\n              min_child_weight=1, missing=None, n_estimators=686, n_jobs=-1,\n              nthread=4, num_class=3, objective='multi:softprob',\n              random_state=0, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,\n              seed=27, silent=None, subsample=0.8, verbosity=1)\n\nmodel_xgb = xgb1.fit(X.drop(['ID','Crop_Damage'],axis=1),X['Crop_Damage'],eval_metric='merror')\ny_pred_xgb1 = model_xgb.predict(X_valid.drop(['ID','Crop_Damage'],axis=1))\n\npredicted_res_xgb1 = pd.DataFrame(y_pred_xgb1,columns=['Crop_Damage'])\ntest_res_xgb1 = pd.concat([test_orig[['ID']],predicted_res_xgb1],axis=1)\ntest_res_xgb1 = test_res_xgb1[['ID','Crop_Damage']]\ntest_res_xgb1.set_index(['ID'],inplace=True)\ntest_res_xgb1.to_csv('test_xgb1.csv')","d0cdec05":"This notebook is about the agriculture prediction competition held on Analytics Vidhya.The dataset can be found [here](https:\/\/datahack.analyticsvidhya.com\/contest\/janatahack-machine-learning-in-agriculture\/#About).<br><br>The competition was to predict whether a crop, from the provided categories, will be damaged or not. And if yes, then will it be damaged by the use of pesticide or some other cause.<br><br>The prediction has been made by using the ensemble technique XGBoost and involves some important EDA.","15cce9a9":"As is visible from the above plots that the insects count,number of weeks used and number of weeks quit columns show a very similar type of pattern. All the three variables rise to a peak value and fall back to zero showing some sort of seasonality in the data.<br>So we will calculate the rolling mean of the data to extract features of high importance from these columns.","cc75c412":"### Feature Engineering","9d9679cd":"The 'F' in the ID column is preventing us from arranging the IDs in the ascending order.<br>Strip the letter 'F' from the column and sort the values in the ID column to find some pattern.","9f83ef31":"Since the base model gave us an accuracy of around 82-83%, we decided to carry out some EDA on the data provided to extract some trends.","28497f6e":"### EDA","e11c73d7":"Other features like lags can also be introduced to improve the accuracy of the model.","34e53a3d":"Models like LightGBM and CatBoost were also used for training but they produced lower accuracy on the test set than the XGBoost model here.","7b17b2d8":"### Model Training"}}