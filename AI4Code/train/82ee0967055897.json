{"cell_type":{"7a269f0a":"code","1f6808e7":"code","4c550e84":"code","96eefbbb":"code","d3ceaf1a":"code","de03a344":"code","1b47d062":"code","1e8e980a":"code","f9ed3f85":"code","9688246e":"code","b6834374":"code","1c826fc0":"code","586b2988":"code","d0cb6994":"code","8ab3eded":"code","3474a323":"code","648e6c11":"code","b558c0b0":"code","c6ae4134":"code","8c6c3577":"code","586e84f0":"code","9eaca31a":"code","bbdccf19":"code","da40a576":"code","d59fe81e":"code","3e62b968":"code","d4115003":"markdown","afc5f894":"markdown","bc440d68":"markdown","6f3319f6":"markdown","751d248c":"markdown","36a77e7a":"markdown","a8f0deef":"markdown","6dd14eb1":"markdown","0a9f528c":"markdown"},"source":{"7a269f0a":"! pip install -q \/kaggle\/input\/readability\/readability-0.3.1-py3-none-any.whl\nfrom textblob import TextBlob\nimport readability\n\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_absolute_error\n\nimport pandas as pd","1f6808e7":"train_data = pd.read_csv('\/kaggle\/input\/commonlitreadabilityprize\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/commonlitreadabilityprize\/test.csv')","4c550e84":"train_data.info()\ntrain_data.head()","96eefbbb":"test_data.info()\ntest_data.head()","d3ceaf1a":"pd.read_csv('\/kaggle\/input\/commonlitreadabilityprize\/sample_submission.csv')","de03a344":"def readability_analysis(text):\n    rd = readability.getmeasures(text, lang='en')\n    return rd['readability grades']['FleschReadingEase']","1b47d062":"def length_analysis_words(text):\n    return len(text.split())","1e8e980a":"def length_analysis_chars(text):\n    return len(text)","f9ed3f85":"def sentiment_analysis(text):\n    return TextBlob(text).sentiment.polarity","9688246e":"X = pd.DataFrame(train_data['id'])\nX.loc[:,'readability'] = train_data.apply(lambda row: readability_analysis(row.excerpt), axis=1)\nX.loc[:,'len_words'] = train_data.apply(lambda row: length_analysis_words(row.excerpt), axis=1)\nX.loc[:,'len_chars'] = train_data.apply(lambda row: length_analysis_chars(row.excerpt), axis=1)\nX.loc[:,'sentiment'] = train_data.apply(lambda row: sentiment_analysis(row.excerpt), axis=1)","b6834374":"X.info()\nX.head()","1c826fc0":"X = X[['readability', 'len_words', 'len_chars', 'sentiment']]","586b2988":"y = train_data['target']","d0cb6994":"y.describe()","8ab3eded":"from sklearn.model_selection import train_test_split\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=0)","3474a323":"errors = pd.DataFrame(columns=['train_error', 'val_error', 'num_leaf'])\nfor max_leaf_nodes in range(2, 100):\n    model = DecisionTreeRegressor(random_state=0, max_leaf_nodes=max_leaf_nodes)\n    model.fit(train_X, train_y)\n    \n    train_preds = model.predict(train_X)\n    train_e = mean_absolute_error(train_y, train_preds)\n    val_preds = model.predict(val_X)\n    val_e = mean_absolute_error(val_y, val_preds)\n    \n    errors.loc[max_leaf_nodes-2] = [train_e, val_e, model.get_n_leaves()]\n    \nerrors","648e6c11":"import matplotlib.pyplot as plt\n\nplt.plot(errors['train_error'], errors['num_leaf'])\nplt.plot(errors['val_error'], errors['num_leaf'])\nplt.show()","b558c0b0":"model = DecisionTreeRegressor(random_state=0, max_leaf_nodes=20)\n\nmodel.fit(train_X, train_y)","c6ae4134":"train_preds = model.predict(train_X)\nmean_absolute_error(train_y, train_preds)","8c6c3577":"val_preds = model.predict(val_X)\nmean_absolute_error(val_y, val_preds)","586e84f0":"X_test = pd.DataFrame(test_data['id'])\nX_test.loc[:,'readability'] = test_data.apply(lambda row: readability_analysis(row.excerpt), axis=1)\nX_test.loc[:,'len_words'] = test_data.apply(lambda row: length_analysis_words(row.excerpt), axis=1)\nX_test.loc[:,'len_chars'] = test_data.apply(lambda row: length_analysis_chars(row.excerpt), axis=1)\nX_test.loc[:,'sentiment'] = test_data.apply(lambda row: sentiment_analysis(row.excerpt), axis=1)","9eaca31a":"X_test.info()\nX_test.head()","bbdccf19":"val_preds = model.predict(X_test[['readability', 'len_words', 'len_chars', 'sentiment']])","da40a576":"solution = pd.DataFrame(X_test['id'])\nsolution.loc[:, 'target'] = val_preds","d59fe81e":"solution.info()","3e62b968":"solution.to_csv('submission.csv', index=False)","d4115003":"# Initilization","afc5f894":"# Functions","bc440d68":"# Creating features for test set and predicting results","6f3319f6":"I am using the [readability Python package](https:\/\/pypi.org\/project\/readability\/) to evaluate readability of each excerpt and [textblob](https:\/\/pypi.org\/project\/textblob\/) for sentiment analysis.","751d248c":"# Creating Features","36a77e7a":"# Training","a8f0deef":"# Evaluating the result","6dd14eb1":"This is a simple solution to start the competition and get a feel of the problem.\n\nI will be training a Decision Tree by evaluation the below features for each excerpt.\n - Readability\n - Length\n - Sentiment","0a9f528c":"Currently, I am using **FleschReadingEase** but I will be testing with various options and other possible features which can be used later when I work on more complex models."}}