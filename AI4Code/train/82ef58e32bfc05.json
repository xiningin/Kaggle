{"cell_type":{"2200ffea":"code","f0f09574":"code","02aec710":"code","c3380677":"code","b296f9bd":"code","03b3435c":"code","39f87582":"code","9a703a1f":"markdown","943b7075":"markdown","3ff99328":"markdown","a4c5e2e3":"markdown","088d78c6":"markdown","ec07cd0e":"markdown","f910efd8":"markdown"},"source":{"2200ffea":"import tensorflow as tf\nimport numpy as np\n","f0f09574":"def fx(coeffs,x):\n    a0=coeffs[0]\n    a1=coeffs[1]\n    a2=coeffs[2]\n    a3=coeffs[3]\n    a4=coeffs[4]\n    result=(a0  +tf.multiply(a1,tf.math.pow(x,1))\n                +tf.multiply(a2,tf.math.pow(x,2))\n                +tf.multiply(a3,tf.math.pow(x,3))\n                +tf.multiply(a4,tf.math.pow(x,4))\n             )\n    return result","02aec710":"\n\ndef fxd(coeffs,x):\n    a0=coeffs[0]\n    a1=coeffs[1]\n    a2=coeffs[2]\n    a3=coeffs[3]\n    a4=coeffs[4]\n    \n    result=(a1  +2.0*tf.multiply(a2,tf.math.pow(x,1))\n                +3.0*tf.multiply(a3,tf.math.pow(x,2))\n                +4.0*tf.multiply(a4,tf.math.pow(x,3))\n             )\n    return result\n    \n  \n    \n    ","c3380677":"def fxdd(coeffs,x):\n    a0=coeffs[0]\n    a1=coeffs[1]\n    a2=coeffs[2]\n    a3=coeffs[3]\n    a4=coeffs[4]\n    \n    result=(2.0*a2\n                +6.0*tf.multiply(a3,tf.math.pow(x,1))\n                +12.0*tf.multiply(a4,tf.math.pow(x,2))\n             )\n    return result\n","b296f9bd":"\ndef hx(coeffs,x):\n    result=x-(\n                (2.0*fx(coeffs,x)*fxd(coeffs,x))\n                \/\n                (\n                    2.0*fxd(coeffs,x)*fxd(coeffs,x)\n                    -fxd(coeffs,x)*fxdd(coeffs,x)\n                )\n            )\n    return result\n    ","03b3435c":"coeffs = tf.placeholder(dtype=tf.float64, shape=(5,))\nx = tf.placeholder(dtype=tf.float64)\nfinaloutcome = hx(coeffs, x)\nwith tf.Session() as sess:\n    a=[-2.0,0.0,1.0,0.0,0.0]\n    r=sess.run(finaloutcome,feed_dict={coeffs:a,x:2})\n    print(r)\n    for i in range(10):\n        r=sess.run(finaloutcome,feed_dict={coeffs:a,x:r})\n        print(r)\n","39f87582":"coeffs = tf.placeholder(dtype=tf.float64, shape=(5,))\nx = tf.placeholder(dtype=tf.float64)\nfinaloutcome = hx(coeffs, x)\nwith tf.Session() as sess:\n    a=[-27.0,0.0,0.0,1.0,0.0]\n    r=sess.run(finaloutcome,feed_dict={coeffs:a,x:2})\n    print(r)\n    for i in range(10):\n        r=sess.run(finaloutcome,feed_dict={coeffs:a,x:r})\n        print(r)\n","9a703a1f":"<h2>$f(x)$<\/h2>","943b7075":"$f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3 + a_4 x^4$\n<p>\n Trying to test for 3nd degree equestion\n $a_0=-27,\n   a_1=0,\n   a_2=0 ,\n   a_3=1,\n   a_4 =0,\n   $\n   <p>\n$f(x) = -27 +   x^3$","3ff99328":"<h1> Challenge Exercise with TensorFlow <\/h1>\n\n<h1>Halley's Method<\/h1>\n\n\n\nUse TensorFlow to find the roots of a fourth-degree polynomial using [Halley's Method](https:\/\/en.wikipedia.org\/wiki\/Halley%27s_method).  The five coefficients (i.e. $a_0$ to $a_4$) of \n<p>\n$f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3 + a_4 x^4$\n<p>\nwill be fed into the program, as will the initial guess $x_0$. Your program will start from that initial guess and then iterate one step using the formula:\n<img src=\"https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/142614c0378a1d61cb623c1352bf85b6b7bc4397\" \/>\n<p>\nIf you got the above easily, try iterating indefinitely until the change between $x_n$ and $x_{n+1}$ is less than some specified tolerance. Hint: Use [tf.while_loop](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/while_loop)","a4c5e2e3":"<h2>$h(x)$<\/h2>","088d78c6":"<h2>$f''(x)$<\/h2>","ec07cd0e":"\n$f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3 + a_4 x^4$\n<p>\n Trying to test for 2nd degree equestion\n $a_0=-2,\n   a_1=0,\n   a_2=1 ,\n   a_3=0,\n   a_4 =0,\n   $\n   <p>\n$f(x) = -2 +   x^2 $\n    \n   ","f910efd8":"<h2>$f'(x)$<\/h2>"}}