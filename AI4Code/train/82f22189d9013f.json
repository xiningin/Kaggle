{"cell_type":{"c664d1fd":"code","d791552f":"code","0c3e99ea":"code","10e8a316":"code","907a90e7":"markdown","713df1de":"markdown","ede22dfb":"markdown","03f185b8":"markdown","84cac559":"markdown","c100a1f2":"markdown","446af6c6":"markdown","4db40269":"markdown"},"source":{"c664d1fd":"# Get the required packages\nimport numpy as np\nimport matplotlib.pyplot as plt","d791552f":"n = np.array(np.arange(1, 10)) # inputs\nfn = ((2 * (n**2)) + n)        # Given f(n)\nC = 3\ngn = C * (n**2)                # Lowest Upper Bound\n\n# plot the data for better visualization\nplt.plot(n,fn,'-b',)\nplt.plot(n,gn,'-r')\nplt.scatter(1,fn[0])\nplt.legend(['fn','Worst Case'])\nplt.xlabel('Inputs')\nplt.ylabel('Time')\nplt.title('Big O(n)')\nplt.show()","0c3e99ea":"n = np.array(np.arange(1, 10)) # inputs\nfn = ((2 * (n**2)) + n)        # Given f(n)\nC = 2\ngn = C * (n**2)                # Lowest Upper Bound\n\n# plot the data for better visualization\nplt.plot(n,fn,'-b',)\nplt.plot(n,gn,'-k')\nplt.legend(['fn','Best Case'])\nplt.xlabel('Inputs')\nplt.ylabel('Time')\nplt.title('Big Omega(n)')\nplt.show()","10e8a316":"n = np.array(np.arange(1, 10)) # inputs\nfn = ((2 * (n**2)) + n)        # Given f(n)\nC1 = 3\nC2 = 2\ngn1 = C1 * (n**2)                # Lowest Upper Bound\ngn2 = C2 * (n**2)\n\n# plot the data for better visualization\nplt.plot(n,fn,'-b',)\nplt.plot(n,gn1,'-r')\nplt.plot(n,gn2,'-k')\nplt.legend(['fn','Worst Case','Best Case'])\nplt.xlabel('Inputs')\nplt.ylabel('Time')\nplt.title('Big Theta(n)')\nplt.show()","907a90e7":"# Asymptotic Notations","713df1de":"Big O represents the worst case possible for a running Algorithm. So, it forms the upper bound for the time complexity of the function. Mathematically, it can be defined in the following way:\n\n**`f(n) <= C * g(n)`**\n\nIn the previous section, we have already defined f(n) and g(n). **C** is a constant value that makes sure that the equation holds true. Note that C>0. Also, note that the **n** represents the number of inputs. For lower values of n, the equation may not hold true. However, after a particular value of n, say k, the equation holds true. Note that n>=k, k>=0. The point plotted in the following plot, represents the value of k.\n\nIn layman terms, for example, if you are looking for a topic in a notebook, the worst case will imply that you get the topic on the last page","ede22dfb":"## Big Omega","03f185b8":"Big Theta represents the average case possible for a running Algorithm. So, it gives a general idea about the avergae running time of the Algorithm. Mathematically, it can be defined in the following way:\n\n**`C1 * g(n) <= f(n) <= C2 * g(n)`**\n\nHere, the constants C1 and C2 should be chosen carefully so that the equation holds true. \n\nContinuing with the example in the previous section, the average case will be finding the topic somewhere in the middle of the notebook.","84cac559":"In this notebook, we will try to go through the various Asymptotic Notations viz. Big O, Big Omega, Big Theta. We use Asymptotic Notations to understand the time complexity of a given algorithm without actually implementing it on any hardware and to compare various Algorithms irrespective of the hardware. Let us define f(n) that represents the given for time complexity, then we define g(n) that will represent the best or worst case time complexity function. We will discuss the following:\n\n* Big O\n\n* Big Omega\n\n* Big Theta","c100a1f2":"Big Omega represents the best case possible for a running Algorithm. So, it forms the lower bound for the time complexity of the function. Mathematically, it can be defined in the following way:\n\n**`f(n) >= C * g(n)`**\n\nContinuing with the example in the previous section, the best case will be finding the topic on the very first page of the notebook.","446af6c6":"## Big O","4db40269":"## Big Theta"}}