{"cell_type":{"69888b86":"code","7d2f9fd5":"code","7cf15bb4":"code","2143c3f7":"code","8a5c042f":"code","7dc91450":"code","bd260bb9":"code","d0f6d9c1":"code","5947ee6d":"code","8521608d":"code","f57bf966":"code","8b86e53a":"code","19e9ec08":"code","a8de7de0":"code","4450a13d":"code","ed4d0355":"code","b15553fc":"code","5fd2c8f2":"code","0299696f":"code","618dd5f4":"code","7a21fbc0":"code","d03add2b":"markdown","e75eaaf5":"markdown","3c688c8e":"markdown","561f4cd6":"markdown","3e447aed":"markdown","3a387946":"markdown","2fea7811":"markdown","5d9b681a":"markdown","ed38bd07":"markdown","6c589860":"markdown","7b70aa58":"markdown","dbebb0c4":"markdown","29650155":"markdown","776a453b":"markdown","bd2e0f9d":"markdown","cd12da4f":"markdown","df9659fa":"markdown","c0588dc3":"markdown","8683adfa":"markdown","1979fc97":"markdown","ddd816e5":"markdown","ce3181b8":"markdown","cae93f49":"markdown","361f0921":"markdown"},"source":{"69888b86":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7d2f9fd5":"#IMPORTING LIBRARIES\nimport tensorflow as tf\nimport numpy as np\nfrom keras.preprocessing.image import ImageDataGenerator","7cf15bb4":"#train_data is used for feature scaling and image augmentation (image augmentation is applied to avoid overfitting).\ntrain_data = ImageDataGenerator(rescale = 1.\/255,shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)\n\n#defining training set, here size of image is reduced to 64x64, batch of images is kept as 64 and class is defined as 'binary'.\ntraining_set = train_data.flow_from_directory('..\/input\/cat-and-dog\/training_set\/training_set', batch_size = 64, target_size = (64,64), class_mode = 'binary')","2143c3f7":"#applying same scale as training set, but only feature scaling is applied. image augmentation is avoided to prevent leakage of testing data.\ntest_data = ImageDataGenerator(rescale = 1.\/255)\n\n#defining testing set\ntesting_set = test_data.flow_from_directory('..\/input\/cat-and-dog\/test_set\/test_set', batch_size = 64, target_size = (64,64), class_mode = 'binary')","8a5c042f":"#defining the CNN as a sequence of layers.\ncnn = tf.keras.models.Sequential()","7dc91450":"#adding 1st Convolutional layer\n#note that in image augmentation we kept the image size as 64x64, therefore input_shape should also be same [64,64,3] (here 3 signifies that this is a colorful image (R,G,B))\ncnn.add(tf.keras.layers.Conv2D(filters = 32,kernel_size = 3, input_shape = [64,64,3],activation = 'relu'))\n#activation function relu is applied to decrease any linearity that might have arrised while applying filters.","bd260bb9":"# applying max pooling\ncnn.add(tf.keras.layers.MaxPool2D(pool_size = 2, strides = 2))\n","d0f6d9c1":"#adding 2nd Convolutional layer\ncnn.add(tf.keras.layers.Conv2D(filters = 32,kernel_size = 3, activation = 'relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size = 2, strides = 2))","5947ee6d":"#adding 3rd Convolutional layer\ncnn.add(tf.keras.layers.Conv2D(filters = 32,kernel_size = 3, activation = 'relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size = 2, strides = 2))","8521608d":"#the input of step 4 is an flattened array,\ncnn.add(tf.keras.layers.Flatten())","f57bf966":"#forming an ann with 128 input neurons\ncnn.add(tf.keras.layers.Dense(units = 128, activation = 'relu'))","8b86e53a":"#adding ouput layer of the ann\ncnn.add(tf.keras.layers.Dense(units = 1, activation = 'sigmoid'))","19e9ec08":"#compiling the CNN\ncnn.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","a8de7de0":"#training the model\ncnn.fit(x = training_set, validation_data = testing_set, epochs = 25)","4450a13d":"cnn.save('catdog_cnn_model.h5')","ed4d0355":"from keras.models import load_model \nclassifier = load_model('catdog_cnn_model.h5')","b15553fc":"import numpy as np\nfrom keras.preprocessing import image\ntraining_set.class_indices","5fd2c8f2":"image.load_img('..\/input\/cat-and-dog\/training_set\/training_set\/cats\/cat.1021.jpg')","0299696f":"#importing images\ntest_img = image.load_img('..\/input\/cat-and-dog\/test_set\/test_set\/cats\/cat.4014.jpg',target_size = (64,64))\n#converting image to array\ntest_img = image.img_to_array(test_img)\ntest_img = np.expand_dims(test_img,axis = 0)\nresult = classifier.predict(test_img)\nif result[0][0] >= 0.5:\n    prediction = 'dog'\nelse:\n    prediction = 'cat'\nprint(prediction)","618dd5f4":"image.load_img('..\/input\/cat-and-dog\/training_set\/training_set\/dogs\/dog.1020.jpg')","7a21fbc0":"#importing images\ntest_img = image.load_img('..\/input\/cat-and-dog\/test_set\/test_set\/dogs\/dog.4030.jpg',target_size = (64,64))\n#converting image to array\ntest_img = image.img_to_array(test_img)\ntest_img = np.expand_dims(test_img,axis = 0)\nresult = classifier.predict(test_img)\nif result[0][0] >= 0.5:\n    prediction = 'dog'\nelse:\n    prediction = 'cat'\nprint(prediction)","d03add2b":"**STEP - 4 ) FULL CONNECTION**","e75eaaf5":"Addition of 2nd convolution layer.","3c688c8e":"CNN IS DIVIDED INTO 4 STEPS\n1. CONVOLUTION\n2. POOLING\n3. FLATTENING\n4. FULL CONNECTION\n\n**STEP - 1) ADDING CONVOLUTIONAL LAYER**","561f4cd6":"**IT'S A CAT**(the test image given is a Cat's image)","3e447aed":"Here we will apply the max pooling.Max pooling is a pooling operation that selects the maximum element from the region of the feature map covered by the filter. Thus, the output after max-pooling layer would be a feature map containing the most prominent features of the previous feature map.","3a387946":" An ann is formed with 128 input neurons and relu is used as the activation function.","2fea7811":"**PREDICTING VALUES**","5d9b681a":"Now we will load the test image.","ed38bd07":"Flattening is converting the data into a 1-dimensional array for inputting it to the next layer. We flatten the output of the convolutional layers to create a single long feature vector. And it is connected to the final classification model, which is called a fully-connected layer.","6c589860":"**#Defining the CNN as a sequence of layers.**","7b70aa58":"**STEP - 2) APPLYING MAX POOLING**","dbebb0c4":"The convolutional neural network (CNN) is a class of deep learning neural networks. CNNs represent a huge breakthrough in image recognition. They're most commonly used to analyze visual imagery and are frequently working behind the scenes in image classification.","29650155":"**IT'S A DOG**(the given test image is a dog's image)","776a453b":"# Classifying whether the given image is a DOG or a CAT using CNN.","bd2e0f9d":"Now we will add the 3rd convolution layer.","cd12da4f":"Now we will train the model and there are 25 iteration done in this.","df9659fa":"Now we will save the model.","c0588dc3":"An ouput layer of the ann is added and sigmoid is used as the activation function.","8683adfa":"0 MEANS CATS AND 1 MEANS DOGS","1979fc97":"Now the CNN is compiled","ddd816e5":"Fully Connected Layer is simply, feed forward neural networks. Fully Connected Layers form the last few layers in the network. The input to the fully connected layer is the output from the final Pooling or Convolutional Layer, which is flattened and then fed into the fully connected layer","ce3181b8":"**STEP -3 ) FLATTENING******","cae93f49":"**Import the necessary packages**","361f0921":"#  Defining Train and Test Data****"}}