{"cell_type":{"351b4155":"code","1a94ded5":"code","82100c93":"code","cca385a3":"code","bb597001":"code","a2be0083":"code","55ffe56e":"code","bc7ed2e9":"code","ff472419":"code","917fa715":"code","2709c94f":"code","bb38aa8d":"code","bf91aecc":"code","a2502d0e":"code","0eea8951":"code","2355a8f1":"code","7f41d6c3":"code","450f161c":"code","dc3e28b6":"code","21ecea1b":"code","805b8197":"code","2834c471":"code","d89488ec":"code","9ecc3c25":"code","e717fbea":"code","3271dc5b":"code","7d0fd772":"code","e59cabf1":"code","01b1afdf":"code","38d950fd":"code","e74b9f53":"code","f2553d06":"markdown","3079d409":"markdown","6bacdbec":"markdown","f025f35b":"markdown","5d4a5880":"markdown","14b43dcd":"markdown","0bced3f5":"markdown","ef6db147":"markdown","dde76dde":"markdown","d1eb8de8":"markdown","f377c1e0":"markdown","cfd425ee":"markdown","d8c1432a":"markdown","c4b9a973":"markdown","47d5e551":"markdown","7f233c1e":"markdown","f9f4e252":"markdown","86b0c1a0":"markdown"},"source":{"351b4155":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1a94ded5":"import numpy as np # linear algebra\nimport pandas as pd\n\n\nimport matplotlib\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline ","82100c93":"# checking the first 5 rows of dataset\ndata= pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ndata.head()","cca385a3":"# Total no of rows and columns \ndata.shape","bb597001":"#observation date and last update is in object form so can again import data with datetime object\ndata.info() ","a2be0083":"# Import dataset with date columns in form of datetime object\n\ndata = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\",parse_dates=['ObservationDate','Last Update'])","55ffe56e":"# can check the total no of daily cases\ndaily_cases = data.groupby(['ObservationDate'])['Country\/Region'].nunique()\n\n# Print head of daily_cases\nprint(daily_cases.head())","bc7ed2e9":"#Visualizing daily cases\n\n# Plot daily_cases\ndaily_cases.plot()\n\n# Include a title and y-axis label\nplt.title('Daily cases')\nplt.ylabel('countries')\n\n# Rotate the x-axis labels by 45 degrees\nplt.xticks(rotation = 45)\n\n# Display the plot\nplt.show()  ","ff472419":"# Total No of countries in dataset \ndata['Country\/Region'].nunique() ","917fa715":"# Convert belows as datatype float to int types  \n\ndata['Confirmed']=data['Confirmed'].astype('int')\ndata['Deaths']=data['Deaths'].astype('int')\ndata['Recovered']=data['Recovered'].astype('int')","2709c94f":"#To check any country confirmed cases like US # Isolate US data \nUS = data[data['Country\/Region'] == 'US']","bb38aa8d":"# Calculate the total number of confirmed cases in US\ntotal = US['Confirmed'].sum()\nprint(total)","bf91aecc":"mortality = US[\"Deaths\"].sum()\nprint(mortality)","a2502d0e":"date_arr = data['ObservationDate'].to_numpy()  ","0eea8951":"confirmed_arr1 = data['Confirmed'].to_numpy()  ","2355a8f1":"death_arr1 = data['Deaths'].to_numpy()  ","7f41d6c3":"recover_arr1 = data['Recovered'].to_numpy()  ","450f161c":"# Plotting for entire dataset for visualization of confirmed ,death and recovered cases .\n\n# Create a figure with 2x2 subplot layout and make the top left subplot active  # \nfig = plt.figure(figsize=(10,7))\nplt.subplot(2, 2, 1) \n\n\n# Plot in blue date to confirmed cases \nplt.plot(date_arr,confirmed_arr1, color='blue')\nplt.title('confirmed cases')\n\n# Make the top right subplot active in the current 2x2 subplot grid \nplt.subplot(2, 2, 2)\n\n# Plot in red dates to deaths \nplt.plot(date_arr,death_arr1, color='red')\nplt.title('death cases')\n\n# Make the bottom left subplot active in the current 2x2 subplot grid\nplt.subplot(2, 2,3) \n\n# Plot in green dates to recovered cases \nplt.plot(date_arr, recover_arr1, color='green')\nplt.title('recovered cases')\n\n\n# Improve the spacing between subplots and display them\nplt.tight_layout()\nplt.show()","dc3e28b6":"# Compute the maximum confirmed: cs_max\nfig = plt.figure(figsize=(7,7))\n\ncs_max = confirmed_arr1.max()\n\n# Calculate the date in which there was maximum cases: date_max\ndate_max = date_arr[confirmed_arr1.argmax()]\n\n# Plot with legend as before\nplt.plot(date_arr, confirmed_arr1, color='red', label='Confirmed') \nplt.plot(date_arr, recover_arr1, color='green', label='recover')\nplt.legend(loc='upper left')\n\n# Add a black arrow annotation\nplt.annotate('Maximum', xy=(date_max, cs_max), xytext=(date_max+5, cs_max+5), arrowprops=dict(facecolor='black'))\n\n# Add axis labels and title\nplt.xlabel('date')\nplt.ylabel('cases')\nplt.title('confirmed cases vs recovered')\nplt.show()","21ecea1b":"# Generate a 2-D histogram\nplt.hist2d(confirmed_arr1,death_arr1,bins=(20, 20),range=((100, 20000), (40, 200)))\n\n# Add a color bar to the histogram\nplt.colorbar() \n\n# Add labels, title, and display the plot\nplt.xlabel('confirmed cases')\nplt.ylabel('mortality')\nplt.title('hist2d() plot')\nplt.show()\n","805b8197":"#Import plotting modules\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Plot a linear regression between 'confirmed' and 'death' cases \nsns.lmplot(x = 'Confirmed', y ='Deaths', data=data)\n\n# Display the plot\nplt.show()   \n\n#plot shows a linear correlation btw these two variable","2834c471":"# Generate a green residual plot of the regression between 'confirmed' and 'deaths'\nsns.residplot(x='Confirmed', y='Deaths', data=data, color='green')\n\n# Display the plot   # think require transformation seems to be no correlation btw residuals \nplt.show()","d89488ec":"# selected only top countries in terms of confirmed cases \n\ndf_1 = data.loc[data['Country\/Region'].isin(['US','Spain','Italy','UK','Germany'])]","9ecc3c25":"df_1.shape","e717fbea":"# Plot a linear regression between 'confirmed' and 'death', with a hue of 'origin country' and palette of 'Set1' ,only top 5 countries\n\nsns.lmplot(x='Confirmed', y='Deaths', data=df_1, hue='Country\/Region',palette='Set1')\n\n# Display the plot\nplt.show()\n","3271dc5b":"#Make the strip plot again using jitter and a smaller point size to compare the cases \nplt.subplot(2,1,2)\nsns.stripplot(x = 'Country\/Region', y = 'Confirmed', data = df_1, size = 5, jitter= True)\n\n# Display the plot\nplt.show()","7d0fd772":"# Generate a violin plot of 'countries' grouped horizontally by 'confirmed cases', c \n\nfig = plt.figure(figsize=(12,10))\nplt.subplot(2,1,1)\nsns.violinplot(x='Country\/Region', y='Confirmed', data= df_1)\n\n# Generate the same violin plot again with a color of 'lightgray' and without inner annotations\nplt.subplot(2,1,2)\nsns.violinplot(x='Country\/Region', y='Confirmed', data=df_1,inner=None,color = 'lightgray')\n\n# Overlay a strip plot on the violin plot\nsns.stripplot(x='Country\/Region', y='Confirmed', data= df_1, size=3,jitter=True)\n\n# Display the plot\nplt.show()","e59cabf1":"# Can drop SNo col from data as it not much useful\ndf_1.drop([\"SNo\"],axis = 1,inplace = True)","01b1afdf":"#Seaborn's pairplots are an excellent way of visualizing the relationship between all continuous variables in a dataset.\n\nsns.pairplot(df_1)\n\n# Display the plot\nplt.show()","38d950fd":"# there is strong correlation btwn confirmed cases and deaths 0.86\ncorr= df_1.corr()\nsns.heatmap(corr,annot=True)","e74b9f53":"# pie chart for to check no of deaths in 5 countries\nfig = plt.figure(figsize=(7,7))\nconf_per_country = df_1.groupby('Country\/Region')['Deaths'].sum().sort_values(ascending=False)\nconf_sum= df_1['Deaths'].sum()\ndef absolute_value(val):\n    a  = val\n    return (np.round(a,2))\nconf_per_country.plot(kind=\"pie\",title='No of deaths per country',autopct=absolute_value)\n\nplt.show ()\n","f2553d06":"Lowest no of deaths in Germany and Highest in Italy followed by Spain","3079d409":"* Using dataset with considering top 5 countries having highest no of confirmed case\n\n* With respect to confirmed cases Italy followed by UK and Spain have higher death rates and at lower side  cases is in Germany ,curve is slightly flat as compared to other countries\n","6bacdbec":"Plot the pairwise joint distributions from the DataFrame of non categorical col","f025f35b":"From above plot it seems after mid of March confirmed cases are rising at faster rate pointing maximum arrow at worlwide and Recovered cases also rising but at slow rate  ","5d4a5880":"* Using annotate().Annotations like text and arrows can be used to emphasize specific observations.\n* Annotations are extremely useful to help make more complicated plots easier to understand.","14b43dcd":"For the purpose of data vizualisation using matplotlib for (entire data set) columns has to be converted in to numpy arrary","0bced3f5":"There is strong correlation btwn confirmed cases and deaths 0.87 and Recovered and Confirmed cases of 0.74","ef6db147":"The plot of residual are fan shaped dipicting pattern and heteroscedasticity condition","dde76dde":"It seems like a regression of order 2 is necessary to properly capture the relationship between two variable ","d1eb8de8":"* Simple linear regressions using seaborn.\n* Using seaborn is to fit and visualize a simple linear regression between two variables .\n* One difference between seaborn and regular matplotlib plotting can pass pandas DataFrames directly to the     plot and refer to each column by name","f377c1e0":"Can see that total no of cases per day rising and in Feb end the curve rising upward direction quite steep","cfd425ee":"* In this notebook, will visualize COVID-19 data from the first several weeks of the outbreak.\n* The data used here  should not be considered to be the most up to date data available as last dates April 6   data is being used for data visualization purposes using mainly seaborn and matplotlib library","d8c1432a":"* Higher-order regressions\n* As there are more complex relationships between two variables, as simple first order regression is often     not sufficient to accurately capture the relationship between the variables.\n* Therefore plot a second order regression ","c4b9a973":"* Grouping linear regressions by hue \n* Often it is useful to compare and contrast trends between different groups\n* Seaborn makes it possible to apply linear regressions separately for subsets of the data by applying a    groupby operation.","47d5e551":"Other way of visualization can be zoom in to dated 6 april data and different countrywise \n","7f233c1e":"* Visualizing correlations with a heatmap\n* Useful to compute covariances between the variables \n* The covariance matrix can then easily be visualized as a heatmap.\n* important point is that its diagonal entries are all 1s, and the off-diagonal entries are between -1 and +1 ","f9f4e252":"* Constructing violin plots: sophisticated extension of the standard box plot, called a violin plot.\n* It is often useful to use plot types which reduce a dataset to more descriptive statistics and provide a   good summary of the data\n","86b0c1a0":"As can see from above two plots US and Germany also have large no of confirmed cases but there mortality is less as compared to Italy and Spain"}}