{"cell_type":{"17fc29d6":"code","dc434191":"code","c497dc69":"code","4fb1edb5":"code","c1da40d5":"code","de4e965c":"code","15a5962f":"code","acf2f44f":"code","3f2a71e0":"code","1d4d8f60":"code","b1c80b4b":"code","51245d6f":"code","cc3ba4e2":"code","31bf1ddd":"code","762b1794":"code","e3f121d2":"code","9c378ef6":"code","1c95d377":"code","614734c9":"code","fbec6c52":"code","21bf606f":"code","25d27a50":"code","51eb42f2":"code","f65db798":"code","8d1f5d86":"code","16253499":"code","d4694a35":"code","195240d4":"code","785e072a":"markdown"},"source":{"17fc29d6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\npd.set_option('display.max_row',1000)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","dc434191":"train=pd.read_csv('..\/input\/titanic\/train.csv',index_col='PassengerId')\ntest=pd.read_csv('..\/input\/titanic\/test.csv',index_col='PassengerId')\ntrain.info();test.info()","c497dc69":"train.corr()","4fb1edb5":"train.sample(5)","c1da40d5":"train['FamilySize']=train.SibSp+train.Parch\ntrain.drop(['SibSp','Parch'],axis=1,inplace=True)\ntest['FamilySize']=test.SibSp+test.Parch+1\ntest.drop(['SibSp','Parch'],axis=1,inplace=True)\ntrain.info();test.info()","de4e965c":"x=train.Name.str.split(',')\nfirst=[]\nfor i in x:\n    first.append(i[1])\npre=[]\nfor i in first:\n    pre.append(i.split()[0])\nplt.figure(figsize=(14,8))\nsns.countplot(pre)\nplt.xticks(rotation=90)\nplt.show()\n","15a5962f":"train['prefix']=pre\ntrain.info()","acf2f44f":"x=test.Name.str.split(',')\nfirst=[]\nfor i in x:\n    first.append(i[1])\npre=[]\nfor i in first:\n    pre.append(i.split()[0])\nplt.figure(figsize=(14,8))\nsns.countplot(pre)\nplt.xticks(rotation=90)\nplt.show()\ntest['prefix']=pre","3f2a71e0":"plt.figure(figsize=(14,8))\nsns.distplot(train[train.prefix=='Mr.'].Age.dropna(),color='blue',label='Mr.',hist=False)\nsns.distplot(train[train.prefix=='Mrs.'].Age.dropna(),color='maroon',label='Mrs.',hist=False)\nsns.distplot(train[train.prefix=='Miss.'].Age.dropna(),color='black',label='Miss.',hist=False)\nsns.distplot(train[train.prefix=='Master.'].Age.dropna(),color='grey',label='Master.',hist=False)","1d4d8f60":"print('Median age of people with Mr. prefix: ' + str(train[train.prefix=='Mr.'].Age.median()))\nprint('Median age of people with Mrs. prefix: ' + str(train[train.prefix=='Mrs.'].Age.median()))\nprint('Median age of people with Miss. prefix: ' + str(train[train.prefix=='Miss.'].Age.median()))\nprint('Median age of people with Master. prefix: ' + str(train[train.prefix=='Master.'].Age.median()))\nprint('Median age of people with Don. prefix: ' + str(train[train.prefix=='Don.'].Age.median()))\nprint('Median age of people with Rev. prefix: ' + str(train[train.prefix=='Rev.'].Age.median()))\nprint('Median age of people with Dr. prefix: ' + str(train[train.prefix=='Dr.'].Age.median()))","b1c80b4b":"train.loc[train.prefix=='Mr.','Age']=train.loc[train.prefix=='Mr.','Age'].fillna(30.0)\ntrain.loc[train.prefix=='Mrs.','Age']=train.loc[train.prefix=='Mrs.','Age'].fillna(35.0)\ntrain.loc[train.prefix=='Miss.','Age']=train.loc[train.prefix=='Miss.','Age'].fillna(21.0)\ntrain.loc[train.prefix=='Master.','Age']=train.loc[train.prefix=='Master.','Age'].fillna(3.5)\ntrain.loc[train.prefix=='Dr.','Age']=train.loc[train.prefix=='Dr.','Age'].fillna(46.5)\n\ntest.loc[test.prefix=='Mr.','Age']=test.loc[test.prefix=='Mr.','Age'].fillna(30.0)\ntest.loc[test.prefix=='Mrs.','Age']=test.loc[test.prefix=='Mrs.','Age'].fillna(35.0)\ntest.loc[test.prefix=='Miss.','Age']=test.loc[test.prefix=='Miss.','Age'].fillna(21.0)\ntest.loc[test.prefix=='Master.','Age']=test.loc[test.prefix=='Master.','Age'].fillna(3.5)\ntest.loc[test.prefix=='Dr.','Age']=test.loc[test.prefix=='Dr.','Age'].fillna(46.5)\ntrain.info();test.info()","51245d6f":"test.Age.fillna(21,inplace=True)\ntest[test.Age.isna()]","cc3ba4e2":"train.Age.isna().sum()","31bf1ddd":"train[train.Embarked.isna()]","762b1794":"train.Embarked.fillna('S',inplace=True)\ntrain.Embarked.unique()","e3f121d2":"train.Cabin=train.Cabin.str[0]\ntrain.Cabin.sample(5)","9c378ef6":"train.Cabin.unique()","1c95d377":"x=train['Name'].str.split()\nlastname=[]\nfor i in x:\n    lastname.append(i[-1])\ncount={}\nfor i in lastname:\n    if i in count:\n        count[i]+=1\n    else:\n        count[i]=1\nfor key in count.keys():\n    if count[key]>1:\n        print(key,count[key])","614734c9":"train[train.Pclass==3].Fare.median()","fbec6c52":"test.Fare.fillna(8.05,inplace=True)","21bf606f":"train.info();test.info()","25d27a50":"sns.countplot(train.Survived)","51eb42f2":"data=[train,test]\nfor dataset in data:\n    dataset['Age'] = dataset['Age'].astype(int)\n    dataset.loc[ dataset['Age'] <= 11, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 11) & (dataset['Age'] <= 18), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 18) & (dataset['Age'] <= 22), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 22) & (dataset['Age'] <= 27), 'Age'] = 3\n    dataset.loc[(dataset['Age'] > 27) & (dataset['Age'] <= 33), 'Age'] = 4\n    dataset.loc[(dataset['Age'] > 33) & (dataset['Age'] <= 40), 'Age'] = 5\n    dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 66), 'Age'] = 6\n    dataset.loc[ dataset['Age'] > 66, 'Age'] = 6\n\nfor dataset in data:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[(dataset['Fare'] > 31) & (dataset['Fare'] <= 99), 'Fare']   = 3\n    dataset.loc[(dataset['Fare'] > 99) & (dataset['Fare'] <= 250), 'Fare']   = 4\n    dataset.loc[ dataset['Fare'] > 250, 'Fare'] = 5\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ntitles = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n\nfor dataset in data:\n    # extract titles\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n    # replace titles with a more common title or as Rare\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr',\\\n                                            'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    # convert titles into numbers\n    dataset['Title'] = dataset['Title'].map(titles)\n    # filling NaN with 0, to get safe\n    dataset['Title'] = dataset['Title'].fillna(0)\n\nfor dataset in data:\n    dataset['Age_Class']= dataset['Age']* dataset['Pclass']\n\nfor dataset in data:\n    dataset['Fare_Per_Person'] = dataset['Fare']\/(dataset['FamilySize']+1)\n    dataset['Fare_Per_Person'] = dataset['Fare_Per_Person'].astype(int)","f65db798":"to_drop=['Name','Ticket','Cabin','prefix']\nfor col in to_drop:\n    train.drop(col,axis=1,inplace=True)\n    test.drop(col,axis=1,inplace=True)\ntrain.info();test.info()","8d1f5d86":"to_cat=['Pclass','Sex','Embarked']\nfor col in to_cat:\n    dummies=pd.get_dummies(train[col])\n    train=pd.concat([train,dummies],axis=1)\n    train.drop(col,axis=1,inplace=True)\n    dummies=pd.get_dummies(test[col])\n    test=pd.concat([test,dummies],axis=1)\n    test.drop(col,axis=1,inplace=True)\ntrain.info();test.info()","16253499":"train.Fare.head(5)","d4694a35":"X=train.drop('Survived',axis=1)\nY=train.Survived\n\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xgb\nmodel_xgb=xgb.XGBClassifier(learning_rate=0.001,n_estimators=1000)\nmodel_xgb.fit(X,Y)\nmodel=RandomForestClassifier(criterion = \"gini\", \n                                       min_samples_leaf = 1, \n                                       min_samples_split = 10,   \n                                       n_estimators=100, \n                                       max_features='auto', \n                                       oob_score=True, \n                                       random_state=1, \n                                       n_jobs=-1)\nmodel.fit(X,Y)\nmodel.score(X,Y),model_xgb.score(X,Y)","195240d4":"pred=model.predict(test)\nl=pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nans=pd.DataFrame({'PassengerId':l.PassengerId,'Survived':pred})\nans.to_csv('rf.csv',index=False)\n\npred=model_xgb.predict(test)\nans=pd.DataFrame({'PassengerId':l.PassengerId,'Survived':pred})\nans.to_csv('xgb.csv',index=False)","785e072a":"<center><h2>Titanic<\/h2><\/center>\n<img src='https:\/\/www.thoughtco.com\/thmb\/N05WCxpYhmxXUrgMpT8kkKQAEac=\/768x0\/filters:no_upscale():max_bytes(150000):strip_icc()\/R.M.S.Titanic-5baae8d6c9e77c0025e53f86.jpg'><\/img>"}}