{"cell_type":{"92952945":"code","438b0ed2":"code","553a8ba3":"code","25d8cf1c":"code","3b476f99":"code","32ffc03c":"code","d39fcd70":"code","9fadc622":"code","cd39409f":"code","e6597cc8":"markdown","b38398f4":"markdown","d32b0c13":"markdown","8995cd19":"markdown","a099c6e1":"markdown","a07c01b4":"markdown","7dece960":"markdown"},"source":{"92952945":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","438b0ed2":"%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom pandas import DataFrame\nfrom sklearn import ensemble\nfrom sklearn.model_selection import train_test_split\n\n\npath_train = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv'\npath_test = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv'\ndata_train = pd.read_csv(path_train)\ndata_test = pd.read_csv(path_test)\n# data_train.describe()","553a8ba3":"data_train.iloc[0:5, [0,1,2,3,4,-3,-2,-1]]","25d8cf1c":"data_all_features = pd.concat((data_train.iloc[:,1:-1], data_test.iloc[:,1:-1]), sort=False)","3b476f99":"numeric_features = data_all_features.dtypes[data_all_features.dtypes != 'object'].index\n\nnonnum_features = data_all_features.dtypes[data_all_features.dtypes == 'object'].index\n\ndata_all_features[numeric_features] = data_all_features[numeric_features].apply(lambda x: (x - x.mean()) \/ (x.std())).fillna(0)","32ffc03c":"all_data_afterfixed = pd.get_dummies(data_all_features)\nall_data_afterfixed.shape\n\nn_train, n_test = data_train.shape[0], data_test.shape[0]\n(n_train, n_test)\n\nall_data_afterfixed.dtypes\n\nx_train = all_data_afterfixed[:n_train]\nx_train.shape\n\nx_train.head()\n\nx_train = all_data_afterfixed[:n_train].values\nx_train.shape\ntype(x_train)","d39fcd70":"all_data_afterfixed.head()","9fadc622":"X_train, X_test, y_train, y_test = train_test_split(x_train, data_train['SalePrice'], test_size=0.2)\nmodel_randomforest_regressor = ensemble.RandomForestRegressor(n_estimators=20) ","cd39409f":"model_randomforest_regressor.fit(X_train, y_train)\nscore = model_randomforest_regressor.score(X_test, y_test)\ny_pred = model_randomforest_regressor.predict(X_test)\nplt.figure()\nplt.xlabel('true sales value')\nplt.ylabel('predict sales value')\nplt.scatter(y_test, y_pred, c = 'green')\nplt.title(\"True value vs predicted value : Linear Regression\") \nplt.legend()\nplt.show()\nprint('model accuracy: %f' %score)","e6597cc8":"y_true = data_train['SalePrice']","b38398f4":"\u4e0b\u9762\u8fd9\u4e00\u6b65\u662f\u6a21\u578b\u7684\u6784\u5efa\uff0c\u4e4b\u540e\u518d\u5199\u4e00\u4e2a\u51fd\u6570\u53bb\u8fdb\u884c\u6a21\u578b\u7684\u8bad\u7ec3","d32b0c13":"\u6570\u636e\u9884\u5904\u7406\uff1a\n1. \u5c06\u6570\u636e\u7c7b\u4fe1\u606f\u6807\u51c6\u5316\n2. \u5c06\u975e\u6570\u636e\u4fe1\u606f\u6570\u636e\u5316","8995cd19":"\u6570\u636e\u6982\u62ec","a099c6e1":"af = (data_train.iloc[:,1:-1], data_test.iloc[:,1:-1])\ncount = 0\nfor i in af:\n    print(i)\n    count += 1\n    if count == 5:\n        break","a07c01b4":"\u4f7f\u7528\u6240\u6784\u5efa\u7684\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u53ca\u9a8c\u8bc1\uff0c\u5e76\u5bf9\u6a21\u578b\u9a8c\u8bc1\u6570\u636e\u53ef\u89c6\u5316","7dece960":"X_train.shape # 1168 0.8\n\nX_test.shape # 292 0.2"}}