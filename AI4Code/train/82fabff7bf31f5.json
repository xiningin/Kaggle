{"cell_type":{"57643911":"code","5a8ad16c":"code","3d89d72e":"code","4d242ab2":"code","baa511bd":"code","172a391d":"code","8cb0aae5":"code","57b6fd28":"code","37801d30":"code","2ad62930":"code","cf7907c1":"code","058d4abf":"code","9340c7d4":"code","d3effa46":"code","9a232002":"code","9cde02ca":"code","91f4cecd":"code","8132ded7":"code","8d51089c":"code","be8294bc":"code","683a739d":"code","1216c319":"code","b4f106a8":"code","a62c31db":"code","5235e168":"code","619e334d":"markdown","f823ee90":"markdown","830516dc":"markdown","67f35380":"markdown","a8b33551":"markdown","c428a995":"markdown","1071d2f2":"markdown","fa040660":"markdown","670984d1":"markdown","50fb05f5":"markdown","3442521b":"markdown","97f08c4b":"markdown"},"source":{"57643911":"!pip install spotipy","5a8ad16c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport spotipy\nfrom spotipy.oauth2 import SpotifyClientCredentials","3d89d72e":"#these values are copied from My Spotify for Developers dashboard. They are unique for every user\ncid='f4f89ff9de5343c5a974bcdf9054d889'\ncsecretid='58f126ee711c4fd8a6ea26776599022f'","4d242ab2":"credmanager=SpotifyClientCredentials(client_id=cid,client_secret=csecretid)","baa511bd":"sp=spotipy.Spotify(client_credentials_manager=credmanager) #spotify object to access api","172a391d":"tosearch='Eminem' #term you want to run search for","8cb0aae5":"#run search and store the results\nsearchresults=sp.search(tosearch,1)","57b6fd28":"#only selected\/required features\ndisplay(searchresults['tracks']['items'][0]['artists'])","37801d30":"#Extract Artist's uri \nsearchresults['tracks']['items'][0]['artists'][0]['uri']\n#extract the value of 'uri' feature which is a category\/feature at index 0 of 'artists' list, which is a category\/feature at index 0 of 'items' list, which is an element of 'tracks' array\n\n#Store the uri in a variable\nartisturi=searchresults['tracks']['items'][0]['artists'][0]['uri']\ndisplay(artisturi)","2ad62930":"#Pull all of the artist's albums\nalbums=sp.artist_albums(artisturi, album_type='album')","cf7907c1":"#Display the album name at index 0\ndisplay(albums['items'][0]['name']) #display value of feature 'name' which is at index 0 of 'items' in 'albums'","058d4abf":"#Extract and Store album names and their uris in seperate lists\nalbumnames = []\nalbumuris = []\n\nalbumslistlen=len(albums['items'])\n\nfor i in range(albumslistlen):     #run a loop that'll iterate for each 'item' of albums\n    albumnames.append(albums['items'][i]['name'])\n    albumuris.append(albums['items'][i]['uri'])\n\n#display album names and their uris\ndisplay(albumnames)\ndisplay(albumuris)\n\n#display length of both the lists to check if we have the same number of albums and ablum URIs\ndisplay(len(albumnames))\ndisplay(len(albumuris))\n#Keep names and uris in same order to keep track of duplicate albums","9340c7d4":"#Function for extracting album songs and other details\n\ndef albumSongs(uri):\n    album = uri #assign album uri to a_name\n    spotify_albums[album] = {} #Creates dictionary for that specific album\n    \n#Create keys-values of empty lists inside nested dictionary for album\n    spotify_albums[album]['Album'] = [] #create empty list\n    spotify_albums[album]['Track_Number'] = []\n    spotify_albums[album]['ID'] = []\n    spotify_albums[album]['Song_Name'] = []\n    spotify_albums[album]['URI'] = []\n    \n    albumtracks = sp.album_tracks(album) #pull data on album tracks\n    for x in range(len(albumtracks['items'])): #for each song track\n        spotify_albums[album]['Album'].append(albumnames[album_count]) #append album name tracked via album_count\n        spotify_albums[album]['Track_Number'].append(albumtracks['items'][x]['track_number'])\n        spotify_albums[album]['ID'].append(albumtracks['items'][x]['id'])\n        spotify_albums[album]['Song_Name'].append(albumtracks['items'][x]['name'])\n        spotify_albums[album]['URI'].append(albumtracks['items'][x]['uri'])","d3effa46":"spotify_albums = {}\nalbum_count = 0\nfor i in albumuris: #each album\n    albumSongs(i)\n    print(\"Album, \" + str(albumnames[album_count]) + \", songs has been added to spotify_albums dictionary\")\n    album_count+=1 #Updates album count once all tracks have been added","9a232002":"dic_df = {}\ndic_df['Song_Name'] = []\ndic_df['Album'] = []\ndic_df['Track_Number'] = []\ndic_df['ID'] = []\ndic_df['URI'] = []\n\nfor album in spotify_albums: \n    for feature in spotify_albums[album]:\n        dic_df[feature].extend(spotify_albums[album][feature])\n        \nlen(dic_df['Album'])","9cde02ca":"df=pd.DataFrame.from_dict(dic_df)\ndisplay(df)","91f4cecd":"df.describe()","8132ded7":"#checking if there are any columns that contain null values\ndisplay(df.isnull())\ndf.info()","8d51089c":"#count of duplicates, if any\ndf.duplicated('Song_Name').sum()","be8294bc":"#displaying duplicates\ndf[df.duplicated('Song_Name')==True]","683a739d":"#displaying non-duplicates\ndf[df.duplicated('Song_Name')==False]","1216c319":"#dropping duplicates\nfinal_df=df.drop_duplicates('Song_Name').sort_index()\ndisplay(final_df)","b4f106a8":"final_df[final_df['Song_Name']=='Untitled']","a62c31db":"final_df.to_csv(\"EminemSpotifyData.csv\")","5235e168":"#IGNORE THIS CELL\n\n#searchresults[available_markets]\n#display(np.unique(albumnames))\n#display(np.unique(albumuris))","619e334d":"# Importing Necessary Libraries","f823ee90":"# Exploratory Data Analysis of the Dataframe","830516dc":"# Investigating and Dealing with Duplicate Entries","67f35380":"# Running Search for Spotify Data ","a8b33551":"# Setup for Accessing Spotify API","c428a995":"# Storing Extracted Data","1071d2f2":"# Creating a new Dictionary and Storing Extracted Data in it","fa040660":"# Writing Final Dataframe to CSV","670984d1":"# Investigating and Dealing with Faulty Entries","50fb05f5":"# Analyzing Search Results","3442521b":"# Creating Dataframe from the Dictionary","97f08c4b":"## This is not the final version of this notebook, further data evaluations will be made in the coming versions of this notebook."}}