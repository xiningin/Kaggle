{"cell_type":{"39fb8c52":"code","2dd60cb3":"code","205de8ed":"code","08525485":"code","062da4f6":"code","584fd074":"code","0e7c5a91":"code","dbf1be34":"code","c22b7688":"code","cd18f332":"code","f6889333":"code","25dd383c":"code","c30dc2b0":"code","ebf38be4":"code","d507944c":"code","ad0da94b":"code","18287e85":"markdown","777107ba":"markdown","ced032e8":"markdown","193c06e8":"markdown","3f10bc90":"markdown","486f1c63":"markdown","cd0be006":"markdown","06fcd77b":"markdown","3523aa71":"markdown","411d3a65":"markdown","466dbaa3":"markdown"},"source":{"39fb8c52":"!pip install daal4py","2dd60cb3":"import pandas as pd\nimport numpy as np\nimport json\nimport re\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n\nfrom sklearn.metrics import f1_score, make_scorer\nfrom sklearn.feature_selection import chi2, SelectKBest, VarianceThreshold\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\n%matplotlib inline\nimport seaborn as sns\nimport matplotlib.pyplot as plt","205de8ed":"def Scopes(clf, X, y, cv=3):\n    scope = model_select.cross_val_score(clf, X, y,\n                                         scoring=make_scorer(f1_score, average='samples'),\n                                         cv=cv, n_jobs=-1)\n    print(scope)\n    return np.mean(scope)","08525485":"x_train = pd.read_csv(\"..\/input\/data-analytics-challenge-part-2\/X_train.csv\")\nx_test  = pd.read_csv(\"..\/input\/data-analytics-challenge-part-2\/X_test.csv\")\ny_train = pd.read_csv(\"..\/input\/data-analytics-challenge-part-2\/Y_train.csv\")","062da4f6":"train = x_train['title'] + x_train['body']\ntest = x_test['title'] + x_test['body']","584fd074":"def remove_urls(text):\n    url_remove = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return url_remove.sub(r'', text)\n\ndef remove_html(text):\n    html=re.compile(r'<.*?>')\n    return html.sub(r'',text)\n\ntrain=train.apply(lambda x:remove_urls(x))\ntest=test.apply(lambda x:remove_urls(x))\n\ntrain=train.apply(lambda x:remove_html(x))\ntest=test.apply(lambda x:remove_html(x))","0e7c5a91":"genre_new=[]\nfor cell in y_train['Expected']:\n    genre_new.append(cell.split(\" \"))\n    \ny_train['genre_new'] = genre_new \nmlb = MultiLabelBinarizer() \n\nbinary_labels=pd.DataFrame(mlb.fit_transform(y_train['genre_new']),columns=mlb.classes_) \nbinary_labels=binary_labels.sort_index(axis=1) \n\nprint(mlb.classes_)","dbf1be34":"plt.figure(figsize=(20,15))\n\n\ncategories = list(binary_labels.columns.values)\nax= sns.barplot(binary_labels.sum().values, categories)\n\n\nplt.title(\"Movies for each genre\", fontsize=24)\nplt.ylabel('Genre', fontsize=18)\nplt.xlabel('Number of movies tagged with genre', fontsize=18)\nrects = ax.patches\nlabels = binary_labels.sum().values\nplt.show()","c22b7688":"%%time\ntfv = TfidfVectorizer(min_df=3,  max_features=100000, \n            strip_accents='unicode', analyzer='word', token_pattern=r'\\w{1,}',\n            ngram_range=(1, 3), use_idf=1, smooth_idf=1, sublinear_tf=1,\n            stop_words = 'english')\n\ntfv.fit(train)\nxtrain_tfv =  tfv.transform(train) \nxtest_tfv =  tfv.transform(test) \n\nxtrain_tfv.shape, xtrain_tfv[:10]","cd18f332":"%%time\nchi2_selector = SelectKBest(chi2, k=50000)\nchi2_selector.fit(xtrain_tfv, binary_labels)\nx_train_f = chi2_selector.transform(xtrain_tfv)\nx_test_f = chi2_selector.transform(xtest_tfv)\nx_train_f.shape","f6889333":"from daal4py.sklearn import patch_sklearn, unpatch_sklearn\npatch_sklearn()","25dd383c":"from skmultilearn.problem_transform import LabelPowerset\nfrom sklearn.svm import SVC","c30dc2b0":"%%time\n\nclf = LabelPowerset(SVC(C=1000), require_dense=False)\nclf.fit(x_train_f, binary_labels)","ebf38be4":"%%time\nsvm_predict = clf.predict(x_test_f)","d507944c":"inverse = mlb.inverse_transform(svm_predict)\nlabels_res = [ \" \".join(i) for i in inverse]\nres_test = pd.DataFrame()\nres_test[\"Id\"] = x_test[\"id\"]\nres_test[\"Predicted\"] = labels_res\nres_test.head()","ad0da94b":"res_test.to_csv(\"submission.csv\", index=False)","18287e85":"\u041a\u043b\u0430\u0441\u0441\u0438\u043a\u0430 - TfidfVectorizer. \u0421\u0438\u043b\u044c\u043d\u043e \u043d\u0435 \u0437\u0430\u043f\u0430\u0440\u0438\u0432\u0430\u043b\u0441\u044f, \u0432\u0441\u0435 \u043f\u043e\u0447\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0435 (\u0434\u0443\u043c\u0430\u044e \u0435\u0441\u043b\u0438 \u043f\u043e\u0434\u0442\u044f\u043d\u0443\u0442\u044c, \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u0441\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u043b\u0435\u0442\u0435\u0442\u044c)","777107ba":"\u041a\u043e\u0440\u043e\u043d\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c - **SVM \u0441 RBF \u043a\u0435\u0440\u043d\u0435\u043b\u043e\u043c**! \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u043b\u0438 \u0445\u0443\u0436\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043d\u0430\u043c\u043d\u043e\u0433\u043e. \u041d\u0443 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c **LabelPowerset** - \u043e\u043d \u0434\u0435\u043b\u0430\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044f \u043a\u0430\u0436\u0434\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 label \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441. \u0422\u0430\u043a\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f \u0443 \u043c\u0435\u043d\u044f \u0432\u0437\u043b\u0435\u0442\u0435\u043b\u0430 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e. \u0421\u0430\u043c SVM \u043e\u0431\u0447\u0430\u043b\u0441\u044f \u0437\u0430 20-30 \u043c\u0438\u043d\u0443\u0442, \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u043b\u0441\u044f \u043f\u0430\u0440\u0443 \u0447\u0430\u0441\u043e\u0432.","ced032e8":"**\u0412\u0430\u0436\u043d\u043e!** \u041f\u0430\u0442\u0447\u0438\u043c scikit-learn \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e **daal4py**! \u0418\u043d\u0430\u0447\u0435 \u043d\u0435 \u0434\u043e\u0436\u0434\u0435\u043c\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438","193c06e8":"\u0412\u0438\u0434\u043d\u044b \u0443\u0436\u0435 \u0441\u0435\u0439\u0447\u0430\u0441 \u0431\u043e\u043b\u043b\u0435 \u043c\u0435\u043d\u0435\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0442\u0435\u0433\u0438. \u041d\u0435 \u043e\u0447\u0435\u043d\u044c \u044f \u044d\u0442\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b, \u043d\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430 \u043a\u0440\u0430\u0441\u0438\u0432\u0430\u044f\n\n![image.png](attachment:image.png)","3f10bc90":"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e - \u0442\u0438\u0442\u0443\u0430\u043b \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0432 \u043e\u0434\u043d\u043e \u0438 \u0434\u0430\u043b\u044c\u0448\u0435 \u0441 \u044d\u0442\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u044e","486f1c63":"## \u041c\u043e\u0434\u0435\u043b\u044c","cd0be006":"\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c DAAL4py - \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u0441\u044f :)","06fcd77b":"## \u041f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433","3523aa71":"\u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u044d\u0442\u043e \u043b\u0438\u0448\u043d\u0435\u0435, \u0442\u0430\u043a\u0438\u0435 \u0442\u0435\u0433\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u043b\u0438 \u0438\u0441\u0447\u0435\u0437\u043d\u0443\u0442\u044c \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 - *TfidfVectorizer*. \u041d\u043e \u043f\u0443\u0441\u043a\u0430\u0439 \u0431\u0443\u0434\u0435\u0442 ","411d3a65":"MultiLabelBinarizer - \u0448\u0442\u0443\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043c\u043e\u0433\u043b\u0430 \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u0441\u043b\u043e\u0432\u0430 \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043c\u0443\u043b\u044c\u0442\u0438\u043b\u0435\u0431\u043b \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432","466dbaa3":"\u0412\u044b\u0440\u0435\u0437\u0430\u0435\u043c \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Chi2 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f - \u043c\u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u043c\u043e\u0433 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u0438\u0437\u0438\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c, \u043d\u0435 \u043f\u043e\u0442\u0435\u0440\u044f\u0432 \u0432\u0430\u0436\u043d\u044b\u0435 \u0441\u043b\u043e\u0432\u0430"}}