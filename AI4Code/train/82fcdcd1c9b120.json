{"cell_type":{"c35d71f2":"code","d4fe5eec":"code","6e2f352e":"code","49c2f23e":"code","71feab09":"code","0471e0c8":"code","305f77e5":"code","e378f205":"code","45794026":"code","7b4dd89e":"code","98b038f7":"code","e5afdf04":"code","7f1d61bb":"code","a603a523":"code","bc243396":"code","739ec98f":"code","59002af1":"code","8da460b0":"code","9fb32c02":"code","96b850bf":"code","537bf9f0":"code","9ea471ed":"code","fb92168a":"code","73e9fb6b":"code","eb9e36fc":"code","af31795f":"code","9e2d0205":"code","4279a89f":"code","e1d9d189":"code","30f406c5":"code","39f4dccc":"markdown","955d5c41":"markdown","31bec1db":"markdown","8f087b4b":"markdown","ea9b5853":"markdown","973d5c51":"markdown","588535b8":"markdown","89cb728e":"markdown","a69aa16e":"markdown","0aaffc7a":"markdown","cf8b0a10":"markdown","a74e2c9f":"markdown","79044a7e":"markdown","cf203840":"markdown","4b1e6613":"markdown","1bbebada":"markdown"},"source":{"c35d71f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d4fe5eec":"df = pd.read_csv(\"..\/input\/googleplaystore.csv\")\ndf.head(2)","6e2f352e":"plt.figure(figsize=(16,4))\ndf.Genres.value_counts()[:50].plot(kind=\"bar\")\nplt.show()","49c2f23e":"df.Rating.max()","71feab09":"df.Rating.min()","0471e0c8":"df.Rating.unique()","305f77e5":"df1 =df[df.Rating.notnull()][[\"Rating\",\"Type\"]]\nplt.figure(figsize=(16,4))\nsns.boxplot(df1.Type,df1.Rating,)","e378f205":"# ABove figure tell that we have one value which is completely outlier for this data (i.e Rating 19). Lets remove them and plot again\ndf1 =df[(df.Rating.notnull()) & (df.Rating <19)][[\"Rating\",\"Type\"]]\nplt.figure(figsize=(16,4))\nsns.boxplot(df1.Type,df1.Rating)","45794026":"plt.figure(figsize=(16,4))\ndf.Category.value_counts().plot(kind=\"bar\")\nplt.show()","7b4dd89e":"df.head(1)","98b038f7":"df.Category.value_counts()[:5]","e5afdf04":"Family_4_star = df[(df.Category == \"FAMILY\") & (df.Rating >= 3)].Category.count()\nGAME_4_star = df[(df.Category == \"GAME\") & (df.Rating >= 3)].Category.count()\nTOOLS_4_star = df[(df.Category == \"TOOLS\") & (df.Rating >= 3)].Category.count()\nMEDICAL_4_star = df[(df.Category == \"MEDICAL\") & (df.Rating >= 3)].Category.count()\nBUSINESS_4_star = df[(df.Category == \"BUSINESS\") & (df.Rating >= 3)].Category.count()\nplt.figure(figsize=(16,4))\nplt.bar(\"Family_4_star\",Family_4_star)\nplt.bar(\"GAME_4_star\",GAME_4_star)\nplt.bar(\"TOOLS_4_star\",TOOLS_4_star)\nplt.bar(\"MEDICAL_4_star\",MEDICAL_4_star)\nplt.bar(\"BUSINESS_4_star\",BUSINESS_4_star)\nplt.show()","7f1d61bb":"df.Reviews.dtype","a603a523":"# pd.to_numeric(df.Reviews) \n\n# After analyzing thsi data, we see that their are some numbers \n# which has \"M\" for million, so it is not feasible to convert all of them to numeric. \n# !!!Someone can try here to add extra logic !!!","bc243396":"df.Type.unique()","739ec98f":"df.Type.value_counts()","59002af1":"plt.figure(figsize=(16,4))\ndf.Type.value_counts().plot(kind=\"bar\")","8da460b0":"df.head(1)","9fb32c02":"rating_price_var = df[df.Rating >=3]","96b850bf":"rating_price_var.Price.unique()","537bf9f0":"rating_price_var.Price.replace({\"Everyone\":0},inplace=True)\n# Ignore the warning","9ea471ed":"rating_price_var.Price.unique()\n# Now we can see \"Everyone\" is not present","fb92168a":"rating_price_var.Price.replace({\"\\$\":\"\"},regex=True,inplace=True)\n# Now we can see \"Everyone\" is not present","73e9fb6b":"rating_price_var.Price.unique()\n# Now no $ sign present","eb9e36fc":"rating_price_var.Price = pd.to_numeric(rating_price_var.Price)\n# Now no $ sign present","af31795f":"rating_price_var.Price.dtype","9e2d0205":"plt.figure(figsize=(16,4))\nrating_price_var.Rating.sort_values().value_counts().plot(kind=\"bar\")\nplt.show()","4279a89f":"# plt.figure(figsize=(16,4))\nrate_price = rating_price_var[[\"Rating\",\"Price\"]].sort_values(by=\"Rating\",ascending=False)\nrate_price.head(2)\n# plt.show()","e1d9d189":"plt.figure(figsize=(16,4))\nplt.scatter(rate_price.Rating[1:],rate_price.Price[1:],alpha = .2,color=\"g\")\nplt.xticks(np.linspace(3,5,len(rate_price.Rating[1:]))[::400])\nplt.show()","30f406c5":"plt.figure(figsize=(16,4))\nrating = rate_price.Rating[1:].tolist()\nprice = rate_price.Price[1:].tolist()\nfor i in range(rate_price.Rating[1:].size):\n    plt.scatter(rating[i],price[i],alpha = .2,color=\"g\")\n    if price[i] >=250:\n        plt.scatter(rating[i],price[i],alpha = .2,s=.012*price[i]**2,color=\"m\",marker=\"*\")\n        plt.text(rating[i],price[i]+3,(rating[i],price[i]))\n# plt.xticks(np.linspace(3,5,len(rate_price.Rating[1:]))[::400])\nplt.show()","39f4dccc":"### Lets find out total Paid and free apps","955d5c41":"## Lets find out the price variations based on ratings of Apps (considering only 3 and above rated Apps)","31bec1db":"#### Find unique (categorical values and latyer their counts)","8f087b4b":"### Lets find out the ratings of Top category Apps","ea9b5853":"### Check the type of data, it is not float64 (as expected)","973d5c51":"### find min and max rated value","588535b8":"#### Find unique values in rating","89cb728e":"### Category counts","a69aa16e":"# Get the top rated apps count","0aaffc7a":"### Now, convert all to integet type","cf8b0a10":"### This plot will highlight the apps which are highly priced. It show their rating as well","a74e2c9f":"# Get the count of app for various Generes","79044a7e":"#### We will filter out Ratings values for those top rated (first 5 Category) Apps","cf203840":"### We have to replace all \"$\" symbols and convert all teh string values to Integer type to proceed further","4b1e6613":"### Above uniq values tell that we have some strings present in price columns, Since some apps price  shows it is for everyone then we will replace \"Everyone\" -> 0","1bbebada":"### Analyze Reviews of app (find the highly reviewed app)\nThis column data type is Object hence we need to convert to Integer so that we can do further processing"}}