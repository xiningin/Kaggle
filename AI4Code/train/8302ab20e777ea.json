{"cell_type":{"ca50b40f":"code","c0ef1b48":"code","f10c9ba1":"code","91a33bd4":"code","e4780db6":"code","5a8838fe":"code","320d8876":"code","da10fc7c":"code","1bd8410f":"code","67b40ee7":"code","fedc2f65":"code","6ca87efe":"code","a63ae02e":"code","fb8e9896":"code","4f5fa948":"code","44643ddb":"code","3c7bcd09":"code","12cf82dd":"code","9d9a6904":"code","f07783b5":"code","e7286d8a":"code","bbff6a03":"code","3456d43a":"code","498ebbfe":"code","b715ed88":"code","6e8a5d82":"code","6f2231bd":"code","88f53f44":"code","59b6642c":"code","4a534d25":"code","5fc59097":"code","9862ea19":"code","8a38bcd2":"code","312faf27":"code","aac35d4f":"markdown","77df4e7b":"markdown","ff18ba1b":"markdown","28c0db3d":"markdown","0f9b6a6e":"markdown","0fc6b1a2":"markdown","de33fee1":"markdown","35aa589f":"markdown","e77c0583":"markdown","68987538":"markdown","ff58e33b":"markdown","63c526f3":"markdown","51db12b6":"markdown"},"source":{"ca50b40f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler, StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n\nfrom sklearn.linear_model import LinearRegression, ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, VotingRegressor\n\nfrom xgboost import XGBRegressor","c0ef1b48":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 20)","f10c9ba1":"sample_submission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")","91a33bd4":"train.head()","e4780db6":"print(train.shape)","5a8838fe":"test.head()","320d8876":"print(test.shape)","da10fc7c":"plt.figure(figsize=[12,4])\n\nplt.subplot(1,2,1)\nplt.hist(train.SalePrice, bins=20, color='plum', edgecolor='k')\n\nplt.subplot(1,2,2)\nplt.hist(np.log(train.SalePrice), bins=20, color='plum', edgecolor='k')\n\nplt.show()","1bd8410f":"X_train = train.drop(['Id','SalePrice'], axis=1)\ny_train = np.log(train.SalePrice)\nX_test = test.drop(['Id'], axis=1)\n\nprint('X_train shape:', X_train.shape)\nprint('y_train shape:', y_train.shape)\nprint('X_test shape: ', X_test.shape)","67b40ee7":"X_train.isna().sum().sort_values(ascending=False)[:20]","fedc2f65":"print(np.unique(X_train.dtypes.values))","6ca87efe":"sel_num = (X_train.dtypes.values == 'int64') | (X_train.dtypes.values == 'float64')\nnum_idx = np.arange(0, len(X_train.columns))[sel_num]\nX_train_num = X_train.iloc[:, num_idx]\n\nprint('Number of Numerical Columns:  ', np.sum(sel_num), '\\n')\nprint('Indices for Numerical Columns:', num_idx, '\\n')\nprint('Names of Numerical Columns:\\n', X_train_num.columns.values)","a63ae02e":"sel_cat = (X_train.dtypes.values == 'O')\ncat_idx = np.arange(0, len(X_train.columns))[sel_cat]\nX_train_cat = X_train.iloc[:, cat_idx]\n\nprint('Number of Categorical Columns:  ', np.sum(sel_cat), '\\n')\nprint('Indices for Categorical Columns:', cat_idx, '\\n')\nprint('Names of Categorical Columns:\\n', X_train_cat.columns.values)","fb8e9896":"num_transformer = Pipeline(\n    steps=[\n        ('imputer', SimpleImputer(strategy='mean')),\n        #('scaler', StandardScaler())  \n    ]\n)\n\ncat_transformer = Pipeline(\n    steps=[\n        ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n        ('onehot', OneHotEncoder(handle_unknown='ignore', sparse=False))\n    ]\n)\n\npreprocessor = ColumnTransformer(\n    transformers = [\n        ('num', num_transformer, num_idx),\n        ('cat', cat_transformer, cat_idx)\n    ]\n)\n\npreprocessor.fit(X_train)\ntrain_proc = preprocessor.transform(X_train)\nprint(train_proc.shape, '\\n')\n#print(train_proc[1,:])","4f5fa948":"encoded_names = preprocessor.transformers_[1][1].named_steps['onehot'].get_feature_names(X_train_cat.columns.values)\nprint(encoded_names[:20])\n\nfeature_names = np.concatenate([X_train_num.columns.values, encoded_names])\nprint(len(feature_names))","44643ddb":"lr_pipe = Pipeline(\n    steps = [\n        ('preprocessor', preprocessor),\n        ('regressor', LinearRegression())\n    ]\n)\n\nlr_pipe.fit(X_train, y_train)\nlr_pipe.score(X_train, y_train)","3c7bcd09":"cv_results = cross_val_score(lr_pipe, X_train, y_train, cv=10, scoring='r2')\n\nprint('Results by fold:\\n', cv_results, '\\n')\nprint('Mean CV Score:', np.mean(cv_results))","12cf82dd":"cv_results = cross_val_score(lr_pipe, X_train, y_train, cv=10, scoring='neg_root_mean_squared_error')\n\nprint('Results by fold:\\n', cv_results, '\\n')\nprint('Mean CV Score:', np.mean(cv_results))","9d9a6904":"%%time \n\nen_pipe = Pipeline(\n    steps = [\n        ('preprocessor', preprocessor),\n        ('regressor', ElasticNet(max_iter=1000))\n    ]\n)\n\nparam_grid = {\n    'regressor__alpha': [0.0001, 0.001, 0.01, 0.1],\n    'regressor__l1_ratio': [0, 0.25, 0.5, 0.75, 1.0],\n}\n\nnp.random.seed(1)\nen_grid_search = GridSearchCV(en_pipe, param_grid, cv=10, scoring='neg_root_mean_squared_error',\n                              refit='True', verbose = 10, n_jobs=-1)\nen_grid_search.fit(X_train, y_train)\n\nprint(en_grid_search.best_score_)\nprint(en_grid_search.best_params_)\n","f07783b5":"en_model = en_grid_search.best_estimator_.steps[1][1]\nprint('Number of Features Kept:   ', np.sum(en_model.coef_ != 0))\nprint('Number of Features Dropped:', np.sum(en_model.coef_ == 0))","e7286d8a":"cv_results = cross_val_score(en_grid_search.best_estimator_, X_train, y_train, cv=10, scoring='r2')\n\nprint('Results by fold:\\n', cv_results, '\\n')\nprint('Mean CV Score:', np.mean(cv_results))","bbff6a03":"%%time \n\ndt_pipe = Pipeline(\n    steps = [\n        ('preprocessor', preprocessor),\n        ('regressor', DecisionTreeRegressor())\n    ]\n)\n\nparam_grid = {\n    'regressor__min_samples_leaf': [8, 16, 32, 64],\n    'regressor__max_depth': [8, 16, 32, 64],\n}\n\nnp.random.seed(1)\ndt_grid_search = GridSearchCV(dt_pipe, param_grid, cv=10, scoring='neg_root_mean_squared_error',\n                              refit='True', verbose = 10, n_jobs=-1)\ndt_grid_search.fit(X_train, y_train)\n\nprint(dt_grid_search.best_score_)\nprint(dt_grid_search.best_params_)\n","3456d43a":"%%time \n\nrf_pipe = Pipeline(\n    steps = [\n        ('preprocessor', preprocessor),\n        ('regressor', RandomForestRegressor(n_estimators=100))\n    ]\n)\n\nparam_grid = {\n    'regressor__min_samples_leaf': [8, 16, 32],\n    'regressor__max_depth': [4, 8, 16, 32],\n}\n\nnp.random.seed(1)\nrf_grid_search = GridSearchCV(rf_pipe, param_grid, cv=10, scoring='neg_root_mean_squared_error',\n                              refit='True', verbose = 10, n_jobs=-1)\nrf_grid_search.fit(X_train, y_train)\n\nprint(rf_grid_search.best_score_)\nprint(rf_grid_search.best_params_)\n","498ebbfe":"rf_model = rf_grid_search.best_estimator_.steps[1][1]","b715ed88":"feat_imp = rf_model.feature_importances_\nfeat_imp_df = pd.DataFrame({\n    'feature':feature_names,\n    'feat_imp':feat_imp\n})\n\nfeat_imp_df.sort_values(by='feat_imp', ascending=False).head(10)","6e8a5d82":"feat_imp_df.sort_values(by='feat_imp').head(10)","6f2231bd":"sorted_feat_imp_df = feat_imp_df.sort_values(by='feat_imp', ascending=True)\nplt.figure(figsize=[6,6])\nplt.barh(sorted_feat_imp_df.feature[-20:], sorted_feat_imp_df.feat_imp[-20:])\nplt.show()","88f53f44":"%%time \n\nxgd_pipe = Pipeline(\n    steps = [\n        ('preprocessor', preprocessor),\n        ('regressor', XGBRegressor(n_estimators=50, subsample=0.5))\n    ]\n)\n\nparam_grid = {\n    'regressor__learning_rate' : [0.1, 0.5, 0.9],\n    'regressor__alpha' : [0, 1, 10],\n    'regressor__max_depth': [4, 8, 16]\n    \n}\n\nnp.random.seed(1)\nxgd_grid_search = GridSearchCV(xgd_pipe, param_grid, cv=10, scoring='neg_root_mean_squared_error',\n                              refit='True', verbose = 10, n_jobs=-1)\nxgd_grid_search.fit(X_train, y_train)\n\nprint(xgd_grid_search.best_score_)\nprint(xgd_grid_search.best_params_)","59b6642c":"xgb_model = xgd_grid_search.best_estimator_.steps[1][1]","4a534d25":"ensemble = VotingRegressor(\n    estimators = [\n        ('en', en_grid_search.best_estimator_),\n        ('rf', rf_grid_search.best_estimator_),\n        ('xgb', xgd_grid_search.best_estimator_),\n    ]\n)\n\ncv_results = cross_val_score(ensemble, X_train, y_train, cv=10, scoring='neg_root_mean_squared_error')\n\nprint('Results by fold:\\n', cv_results, '\\n')\nprint('Mean CV Score:', np.mean(cv_results))","5fc59097":"cv_results = cross_val_score(ensemble, X_train, y_train, cv=10, scoring='r2')\n\nprint('Results by fold:\\n', cv_results, '\\n')\nprint('Mean CV Score:', np.mean(cv_results))","9862ea19":"ensemble.fit(X_train, y_train)\nensemble.score(X_train, y_train)","8a38bcd2":"sample_submission.head()","312faf27":"submission = sample_submission.copy()\nsubmission.SalePrice = np.exp(ensemble.predict(X_test))\n\nsubmission.to_csv('my_submission.csv', index=False)\nsubmission.head()","aac35d4f":"# Exploratory Analysis","77df4e7b":"# Load Packages","ff18ba1b":"# Linear Regression \n\n","28c0db3d":"# Ensemble","0f9b6a6e":"# Gradient Boosting Trees","0fc6b1a2":"# Test Predictions","de33fee1":"# Decision Tree","35aa589f":"# Random Forest Regressor","e77c0583":"# Column Data Types","68987538":"# ElasticNet","ff58e33b":"# Missing Values","63c526f3":"# Preprocessing Pipelines\n\n","51db12b6":"# Load Data"}}