{"cell_type":{"485796d5":"code","a3a2860b":"code","518fafba":"code","027c5a03":"code","4aed7136":"code","681d6219":"code","6eb9d949":"code","833737df":"code","945232c3":"code","4356999b":"code","b0c044ce":"code","b4030a7d":"code","e66a6af2":"code","02c19f1b":"code","dd625e67":"code","12627b6d":"code","171952d3":"code","de12b50a":"code","c71525ee":"code","7d438bc1":"markdown","951639f2":"markdown","4297d9db":"markdown"},"source":{"485796d5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a3a2860b":"#lots of question marks in the data so used the argument na_values =['?']\n#object dtypes except the first 2 column gets converted to float type\ndf = pd.read_csv(\"..\/input\/electrity-prices\/electricity_prices.csv\", na_values=['?'])\ndf.head()","518fafba":"df.info()","027c5a03":"df.isnull().sum()","4aed7136":"df.shape","681d6219":"df = df.dropna()\ndf.info()","6eb9d949":"#we can drop datetime because it is already separated as day week month in the data\n\ndf = df.drop(['DateTime'], axis = 1)","833737df":"#checking correlation of target values with others\ndf.corr().abs()['SMPEP2'].sort_values(ascending = False)","945232c3":"X = df[['ActualWindProduction', 'SystemLoadEP2', 'SMPEA', 'SystemLoadEA', 'ForecastWindProduction', \n     'DayOfWeek', 'Year', 'ORKWindspeed', 'CO2Intensity', 'PeriodOfDay']]\ny = df['SMPEP2']","4356999b":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom sklearn.preprocessing import StandardScaler","b0c044ce":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 42)\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","b4030a7d":"model = keras.Sequential([\n        keras.layers.Dense(512, activation=\"relu\", input_shape=[10]),\n        keras.layers.Dense(800, activation=\"relu\"),\n        keras.layers.Dropout(0.3),\n        keras.layers.Dense(1024, activation=\"relu\"),\n        keras.layers.Dropout(0.3),\n        keras.layers.Dense(1, activation = 'linear'),\n        ])\nmodel.summary()","e66a6af2":"model.compile(loss='mse', optimizer='adam', metrics=['mse','mae'])","02c19f1b":"early_stopping = keras.callbacks.EarlyStopping(patience = 10, min_delta = 0.001, \n                                               restore_best_weights =True )\nhistory = model.fit(\n    X_train, y_train,\n    validation_data=(X_test, y_test),\n    batch_size=50,\n    epochs=500,\n    callbacks=[early_stopping],\n    verbose=1, \n)","dd625e67":"from sklearn.metrics import mean_absolute_error,r2_score\npredictions = model.predict(X_test)\nprint(f\"MAE: {mean_absolute_error(y_test, predictions)}\")\n\nprint(f\"R2_score: {r2_score(y_test, predictions)}\")\n","12627b6d":"from xgboost import XGBRegressor\nmodel2 = XGBRegressor(n_estimators = 8000, max_depth=17, eta=0.1, subsample=0.7, colsample_bytree=0.8)\nmodel2.fit(X_train, y_train)\npred = model2.predict(X_test)\nr2_score(y_test, pred)","171952d3":"mean_absolute_error(y_test, pred)","de12b50a":"pred[:5]  #xgboost","c71525ee":"predictions[:5]  #keras","7d438bc1":"Column Description:\n* DateTime: String, defines date and time of sample\n* Holiday: String, gives name of holiday if day is a bank holiday\n* HolidayFlag: integer, 1 if day is a bank holiday, zero otherwise\n* DayOfWeek: integer (0-6), 0 monday, day of week\n* WeekOfYear: integer, running week within year of this date\n* Day integer: day of the date\n* Month integer: month of the date\n* Year integer: year of the date\n* PeriodOfDay integer: denotes half hour period of day (0-47)\n* ForecastWindProduction: the forecasted wind production for this period\n* SystemLoadEA: the national load forecast for this period\n* SMPEA: the price forecast for this period\n* ORKTemperature: the actual temperature measured at Cork airport\n* ORKWindspeed: the actual windspeed measured at Cork airport\n* CO2Intensity: the actual CO2 intensity in (g\/kWh) for the electricity produced\n* ActualWindProduction: the actual wind energy production for this period\n* SystemLoadEP2: the actual national system load for this period\n* SMPEP2: the actual price of this time period, the value to be forecasted","951639f2":"61.37% accuracy xgboost","4297d9db":"58.4% accuracy Neural network"}}