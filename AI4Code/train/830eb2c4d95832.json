{"cell_type":{"1192efe5":"code","5ebab3f3":"code","0a878589":"code","240acee6":"code","c487dc88":"code","90ffc7cc":"code","224bebc5":"code","dda2b447":"code","d99c1c20":"code","610a637a":"code","b19f53b4":"code","ebba8821":"code","dedcf15d":"code","5c0b157f":"code","0b5dd85d":"code","ce2dff58":"code","6ed1ebab":"code","cb18d00f":"code","221d69be":"code","434b8d2a":"code","6b27d0a4":"code","5d813dde":"code","02f6ddb0":"markdown","4669d413":"markdown","495a241a":"markdown","62fadc42":"markdown","23871eeb":"markdown"},"source":{"1192efe5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5ebab3f3":"import pandas as pd\nimport numpy as np\n%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport seaborn as sns\nimport plotly.express as px\nimport json\nimport re\nimport string\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer,SnowballStemmer\nfrom string import punctuation\nfrom wordcloud import WordCloud\nfrom collections import Counter\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score,confusion_matrix,accuracy_score,precision_score,recall_score\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding,Dense,LSTM,Dropout,Bidirectional,GlobalMaxPool1D,SpatialDropout1D\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import regularizers\nimport tensorflow.keras.utils as ku ","0a878589":"data = pd.read_json(\"..\/input\/news-headlines-dataset-for-sarcasm-detection\/Sarcasm_Headlines_Dataset.json\",lines=True)\ndata['source'] = data['article_link'].apply(lambda x: re.findall(r'\\w+', x)[2])\ndata = data.drop(['article_link'],axis=1)\ndata.head()","240acee6":"#Stopwords\nstop = (stopwords.words('english'))\npunctuation = list(string.punctuation)\nfor i in punctuation:\n    stop.append(i)","c487dc88":"#Cleaning Data\nstemmer = SnowballStemmer(\"english\",ignore_stopwords=True)\nlemmatizer = WordNetLemmatizer()\ndef remove_stopwords(text):\n    final = []\n    for word in text.split():\n        if word.lower().strip() not in stop:\n            st_word = stemmer.stem(word)\n            final.append(st_word.strip())\n    return \" \".join(final)\ndef remove_urls(text):\n    return re.sub(r'http\\S+', '', text)\ndef clean(text):\n    text = remove_urls(text)\n    text = remove_stopwords(text)\n    return text\n\ndata['headline'] = data['headline'].apply(clean)\n","90ffc7cc":"stemmer.stem(\"happyness\")","224bebc5":"#Non-Sarcastic vs Sarcastic\nsns.countplot(data['is_sarcastic'],palette=\"RdBu_r\")\nplt.title(\"Non-Sarcastic vs Sarcastic\")\nprint(\"No of Non-Sarcastic news: \",data['is_sarcastic'].value_counts()[0])\nprint(\"No of Sarcastic news: \",data['is_sarcastic'].value_counts()[1])","dda2b447":"#Source\nsns.countplot(data['source'],hue=data['is_sarcastic'],palette=\"RdBu_r\")","d99c1c20":"#Wordcloud\nfig,ax = plt.subplots(figsize=(12,20))\nplt.axis('off')\n\nplt.subplot(2,1,1)\ntext = \" \".join(data[data['is_sarcastic']==0]['headline'])\nwordcloud = WordCloud(max_font_size = None,background_color='white',width=1200,height=1000).generate(text)\nplt.title(\"WordCloud for Non-Sarcastic text\")\nplt.axis('off')\nplt.imshow(wordcloud)\n\nplt.subplot(2,1,2)\ntext = \" \".join(data[data['is_sarcastic']==1]['headline'])\nwordcloud = WordCloud(max_font_size = None,background_color='white',width=1200,height=1000).generate(text)\nplt.title(\"WordCloud for Sarcastic text\")\nplt.axis('off')\nplt.imshow(wordcloud)","610a637a":"#Average word length in text\nfig,ax = plt.subplots(figsize=(16,8))\nfig.suptitle(\"AVERAGE WORD LENGTH IN A TEXT\")\n\nplt.subplot(1,2,1)\nplt.title(\"Non-Sarcastic Text\")\nword_length = data[data['is_sarcastic']==0]['headline'].str.split().apply(lambda x : [len(i) for i in x] )\nsns.distplot(word_length.map(lambda x: np.mean(x)),kde=True)\n\nplt.subplot(1,2,2)\nplt.title(\"Sarcastic Text\")\nword_length = data[data['is_sarcastic']==1]['headline'].str.split().apply(lambda x : [len(i) for i in x] )\nsns.distplot(word_length.map(lambda x: np.mean(x)),kde=True)\n","b19f53b4":"x_train,x_test,y_train,y_test = train_test_split(data['headline'],data['is_sarcastic'],test_size=0.2,random_state=0)","ebba8821":"#Tokenizer\nvocab_size=20000\nembedding_dim=200\nmax_length=200\ntrunc_type=\"post\"\npad_type=\"post\"\noov_tok=\"<OOV>\"\n\ntokenizer = Tokenizer(num_words=vocab_size,oov_token=oov_tok)\ntokenizer.fit_on_texts(list(x_train) + list(x_test))\nword_index = tokenizer.word_index\n\ntrain_sequences = tokenizer.texts_to_sequences(x_train)\ntrain_padded = pad_sequences(train_sequences,maxlen=max_length,truncating = trunc_type,padding=pad_type)\n\ntest_sequences = tokenizer.texts_to_sequences(x_test)\ntest_padded = pad_sequences(test_sequences,maxlen=max_length,truncating = trunc_type,padding=pad_type)\n","dedcf15d":"len(word_index)","5c0b157f":"print(len(train_padded))\nprint(len(test_padded))","0b5dd85d":"#GloVe Embeddings\nembeddings_index={}\nwith open(\"..\/input\/glove6b\/glove.6B.200d.txt\",'r',encoding='utf-8') as f:\n    for line in f:\n        values = line.split()\n        word = values[0]\n        coefs = np.asarray(values[1:], dtype='float32')\n        embeddings_index[word] = coefs\n        \nembeddings_matrix = np.zeros((len(word_index)+1, embedding_dim))\nfor word, i in word_index.items():\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None:\n        embeddings_matrix[i] = embedding_vector\n","ce2dff58":"#Neural Network\nmodel = Sequential()\nmodel.add(Embedding(len(word_index)+1,embedding_dim, input_length=max_length, weights=[embeddings_matrix]))\nmodel.add(SpatialDropout1D(0.4))\nmodel.add(Bidirectional(LSTM(128,return_sequences=True,recurrent_dropout = 0.5,dropout = 0.5)))\nmodel.add(GlobalMaxPool1D())\nmodel.add(Dense(32,kernel_regularizer=regularizers.l2(0.01),activation='relu'))\nmodel.add(Dense(1, activation=\"sigmoid\"))\n\nmodel.compile(optimizer='adam',loss='binary_crossentropy',metrics=['acc'])\nmodel.summary()","6ed1ebab":"#Callbacks\nearlystop = EarlyStopping(monitor='val_loss',patience=1,verbose=1)\nlearning_reduce = ReduceLROnPlateau(patience=1,monitor=\"val_acc\",verbose=1,min_lr=0.00001,factor=0.5,cooldown=1)\ncallbacks = [earlystop,learning_reduce]","cb18d00f":"epoch=10\nhistory = model.fit(train_padded,y_train,epochs=epoch,validation_data=(test_padded,y_test),\n                   callbacks=callbacks)","221d69be":"#Plot\ndef plot_graphs(history, string):\n    plt.plot(history.history[string])\n    plt.plot(history.history[\"val_\"+string])\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(string)\n    plt.legend([string,\"val_\"+string])\n    plt.show()\nplot_graphs(history,'acc')\nplot_graphs(history,'loss')\n","434b8d2a":"y_pred = model.predict_classes(test_padded)\nprint(\"Accuracy: \",accuracy_score(y_test,y_pred).round(3))\nprint(\"Precision: \",precision_score(y_test,y_pred).round(3))\nprint(\"Recall: \",recall_score(y_test,y_pred).round(3))\nprint(\"F1-Score: \",f1_score(y_test,y_pred).round(3))","6b27d0a4":"#Confusion Matrix\ncm = confusion_matrix(y_test,y_pred)\ncm = pd.DataFrame(cm , index = ['Acclaim','Sarcastic'] , columns = ['Acclaim','Sarcastic'])\nsns.heatmap(cm,cmap= \"Blues\",annot=True,fmt='')\nplt.title(\"Confusion Matrix\")","5d813dde":"#Save the model \nmodel.save_weights(\"model.h5\")","02f6ddb0":"# Detecting Sarcasm in News Headlines","4669d413":"# Exploratory Data Analysis","495a241a":"# Importing Libraries","62fadc42":"# Classification Model","23871eeb":"# Preparing Data"}}