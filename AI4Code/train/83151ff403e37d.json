{"cell_type":{"a904ceb9":"code","318ca575":"code","b5bbc546":"code","011ed270":"code","1488346e":"code","3c59fec4":"code","6a040cee":"code","8541700a":"code","5984018e":"code","248e0689":"code","89ec6905":"code","caa4be7d":"code","78a12ddf":"code","9d7e3fee":"code","923feeea":"code","b69e2a25":"code","1dcf45fc":"code","9d907eb9":"code","54d6e0ee":"code","91695340":"code","4eb4cca6":"code","b54915d4":"code","12a659e5":"code","10a3c760":"code","dbb591b4":"code","e225ee21":"code","2bc7f47d":"code","ca34ba04":"code","8258d847":"code","8ac71a96":"code","4f367919":"code","0bb88ef2":"code","6c0e9680":"code","f8ed2fe7":"code","2b230dc3":"code","2a429388":"code","db53d305":"markdown","8735a21b":"markdown","996da567":"markdown","ccd17062":"markdown","3d3bfba8":"markdown","b96b8a28":"markdown","99ee32d0":"markdown","f792e605":"markdown","5f7a3684":"markdown","369a2bf2":"markdown","802d0caf":"markdown","f0f503e4":"markdown","8a259c2f":"markdown","24be2ece":"markdown","3f7057d7":"markdown","79efedc4":"markdown","2b6670b6":"markdown","da01eff4":"markdown","99699fbe":"markdown","6397d1e3":"markdown","06507c63":"markdown","35d47364":"markdown","c98f497e":"markdown","73050ec0":"markdown","9ec363cf":"markdown","abb03ecd":"markdown","2ab16e2e":"markdown","2a22defc":"markdown","2249ed04":"markdown"},"source":{"a904ceb9":"import os \nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport plotly.graph_objects as go\n","318ca575":"anime_info = pd.read_csv('..\/input\/anime-recommendation-database-2020\/anime.csv')\nanime_list = pd.read_csv('..\/input\/anime-recommendation-database-2020\/animelist.csv')\nanime_synop = pd.read_csv('..\/input\/anime-recommendation-database-2020\/anime_with_synopsis.csv')","b5bbc546":"anime_info.shape,anime_list.shape,anime_synop.shape","011ed270":"anime_info.head().T","1488346e":"anime_info.info()","3c59fec4":"anime_info.describe()","6a040cee":"anime_list.head()","8541700a":"anime_list.info()","5984018e":"anime_list.describe()","248e0689":"anime_synop.head()","89ec6905":"\ndef description(data):\n    no_rows=data.shape[0]\n    types=data.dtypes\n    col_null = data.columns[data.isna().any()].to_list()\n    counts=data.apply(lambda x: x.count())\n    uniques=data.apply(lambda x: x.unique())\n    nulls=data.apply(lambda x: x.isnull().sum())\n    distincts=data.apply(lambda x: x.unique().shape[0])\n    nan_percent=(data.isnull().sum()\/no_rows)*100\n    cols={'dtypes':types, 'counts':counts, 'distincts':distincts, 'nulls':nulls,  \n          'missing_percent':nan_percent, 'uniques':uniques}\n    table=pd.DataFrame(data=cols)\n    return table","caa4be7d":"details_tr = description(anime_info)\ndetails_tr.reset_index(level=[0],inplace =True)\ndetails_tr.sort_values(by='missing_percent', ascending=False)","78a12ddf":"anime_info.duplicated().sum()","9d7e3fee":"details_tr = description(anime_list)\ndetails_tr.reset_index(level=[0],inplace =True)\ndetails_tr.sort_values(by='missing_percent', ascending=False)","923feeea":"details_tr = description(anime_synop)\ndetails_tr.reset_index(level=[0],inplace =True)\ndetails_tr.sort_values(by='missing_percent', ascending=False)","b69e2a25":"anime_synop.duplicated().sum()","1dcf45fc":"anime_synop['sypnopsis'].fillna('Unknown',inplace=True)\nanime_info['Score'] = anime_info['Score'].replace('Unknown', 0).astype(float)","9d907eb9":"anime_synop.drop(['MAL_ID','Score','Genres'],axis = 1,inplace =True)\nanime_info.rename(columns = {'MAL_ID':'anime_id'},inplace=True)","54d6e0ee":"plt.figure(figsize=(8,6))\nsns.heatmap(anime_info.isnull())\nplt.title(\"Missing values in anime?\", fontsize = 15)\nplt.show()","91695340":"edacol = ['anime_id', 'Name','English name', 'Score', 'Genres', 'Type', 'Aired', 'Premiered','Rating','Source','Episodes','Dropped'] \neda = anime_info[edacol]\neda.set_index('anime_id',inplace=True)\n","4eb4cca6":"anime_info.sort_values('Score',ascending=False).head(5)","b54915d4":"\nlabels = eda['Type'].value_counts().index\nvalues = eda['Type'].value_counts().values\ncolors = [\"ff9f1c\",\"ffbf69\",\"ffffff\",\"cbf3f0\",\"2ec4b6\"]\nfig = go.Figure(data=[go.Pie(labels=labels,\n                             values=values)],layout=go.Layout(height=600, width=800))\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\n\nfig.update_layout(\n    title={\n        'text': \"Medium of Streaming\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()","12a659e5":"labels = eda['Source'].value_counts().index\nvalues = eda['Source'].value_counts().values\ncolors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen']\nfig = go.Figure(data=[go.Pie(labels=labels,\n                             values=values)],layout=go.Layout(height=600, width=800))\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\n\nfig.update_layout(\n    title={\n        'text': \"Sources of Engagement\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()","10a3c760":"sour = anime_info.sort_values(by= 'Popularity').groupby('Source')[['Name','Popularity']]\n\nfor i in  eda['Source'].value_counts().index:\n    bar = sour.get_group(i)\n    bar.set_index('Name',inplace=True)\n    bar.head(10).plot(kind='barh',legend =False,color = 'lightseagreen')\n    plt.xlabel([i])\n    plt.grid()\n    \nplt.show()","dbb591b4":"typ = anime_info.sort_values(by= 'Popularity').groupby('Type')[['Name','Popularity']]\n\nfor i in  eda['Type'].value_counts().index:\n    bar = typ.get_group(i)\n    bar.set_index('Name',inplace=True)\n    bar.head(10).plot(kind='barh',legend =False,color = 'cornflowerblue')\n    plt.xlabel([i])\n    plt.grid()\n    \nplt.show()\n","e225ee21":"df = anime_list.iloc[:18522589,:]\ndf.info()","2bc7f47d":"anime_fulldata=pd.merge(anime_info,df,on='anime_id')","ca34ba04":"anime_ratingCount = (anime_fulldata.\n     groupby(by = ['Name'])['rating'].count().reset_index()[['Name', 'rating']])","8258d847":"top10_animerating=anime_ratingCount[['Name', 'rating']].sort_values(by = 'rating',ascending = False).head(10)\nax=sns.barplot(x=\"Name\", y=\"rating\", data=top10_animerating, palette=\"YlOrBr\")\nax.set_xticklabels(ax.get_xticklabels(), fontsize=11, rotation=40, ha=\"right\")\nax.set_title('Top 10 Anime based on rating counts',fontsize = 22)\nax.set_xlabel('Anime',fontsize = 20) \nax.set_ylabel('User Rating count', fontsize = 20)","8ac71a96":"drop = eda[['Name','Dropped']].sort_values(by = 'Dropped',ascending =False).head(10)\nplt.figure(figsize=(10,4), dpi = 100)\nsns.barplot(x=drop['Name'].unique(),y=drop['Dropped'].unique(), data=drop)\nplt.xticks(rotation=40, ha = 'right')\nplt.show()","4f367919":"labels = eda['Rating'].value_counts().index\nvalues = eda['Rating'].value_counts().values\ncolors = [\"007f5f\",\"2b9348\",\"55a630\",\"80b918\",\"aacc00\",\"bfd200\",\"d4d700\",\"dddf00\",\"eeef20\",\"ffff3f\"]\nfig = go.Figure(data=[go.Pie(labels=labels,\n                             values=values)],layout=go.Layout(height=600, width=800))\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\n\nfig.update_layout(\n    title={\n        'text': \"Rating based Anime\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()","0bb88ef2":"eda['Episodes'] = eda['Episodes'].replace('Unknown', 0).astype(str).astype(int)\nepi = eda[['Name','Episodes']].sort_values(by = 'Episodes',ascending =False).head(10)\nplt.figure(figsize=(10,4), dpi = 100)\nsns.barplot(x=epi['Name'].unique(),y=epi['Episodes'].unique(), data=epi)\nplt.xticks(rotation=40, ha = 'right')\nplt.show()","6c0e9680":"anime_info['Studios'] = anime_info['Studios'].replace('Unknown', 0)\nstu = anime_info['Studios'].value_counts().reset_index()\nstu.rename(columns={\"index\": \"Studio\", \"Studios\": \"No of animes\"})\nstu = stu.drop(0).head(10)","f8ed2fe7":"labels = stu['index'].unique()\nvalues = stu['Studios'].unique()\ncolors = ['f72585','b5179e','7209b7','560bad','480ca8','3a0ca3','3f37c9','4361ee','4895ef','4cc9f0']\nfig = go.Figure(data=[go.Pie(labels=labels,\n                             values=values)],layout=go.Layout(height=600, width=800))\nfig.update_traces(hole = .4,hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\n\nfig.update_layout(\n    title={\n        'text': \"Anime Production by Studio\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()","2b230dc3":"# nonull_anime=anime_fulldata.copy()\n# nonull_anime.dropna(inplace=True)\n# from collections import defaultdict\n\n# all_genres = defaultdict(int)\n\n# for genres in nonull_anime['Genres']:\n#     for genre in genres.split(','):\n#         all_genres[genre.strip()] += 1\n        \n# from wordcloud import WordCloud\n\n# genres_cloud = WordCloud(width=800, height=400, background_color='white', colormap='gnuplot').generate_from_frequencies(all_genres)\n# plt.imshow(genres_cloud, interpolation='bilinear')\n# plt.axis('off')","2a429388":"import matplotlib.image as mpimg\n\n\nimg = mpimg.imread('..\/input\/wordcloud-output\/__results___29_1.png')\nplt.figure(figsize= (15,10))\nplt.imshow(img)\n","db53d305":"# 2.1 Data Preprocessing","8735a21b":"* #### Here we have categorized animes according to Rating and displayed there count","996da567":"* #### I'm sensing the top anime's based on their rating counts provided by the user id's","ccd17062":"* #### Top 10 anime based on popularity in different Types","3d3bfba8":"#### Insights:\n\n* 28.4% of the anime's were aired on TV followed by 22.2% through OVA\n* 17.3% of anime's are streamed as Movie which is greater than Special(12.6%) and ONA(10.9%)","b96b8a28":"#### Insights: The above pie chart gives a count of sources of engagement of anime\n\n","99ee32d0":"* #### We are taking a sample of 50,000 user ratings as processing on the full dataset is memory consuming","f792e605":"### 2.1.3   Exploring anime_synop","5f7a3684":"* #### Inorder to build a recommendation engine, we have to understand our dataset","369a2bf2":"**2. Anime_list**","802d0caf":"#### We can see there are many Comedy genre anime's followd by action, romance,drama in our dataset","f0f503e4":"# 3 EDA and Visualization","8a259c2f":"* So as we can see from above exploration ,Only Sypnopsis column has NAN Values so we will update there status as 'Unknown'","24be2ece":"### 2.1.2   Exploring anime_list","3f7057d7":"> **Function for printing null_values and related info**","79efedc4":" # 1. Importing Libraries","2b6670b6":"# 2.3 Removing NAN values","da01eff4":"* #### Here are some animes which were dropped by many user's","99699fbe":"* #### Top 10 Anime based on popularity in different source (eg Original,Manga,etc)","6397d1e3":"* #### Here we have listed Top 10 animes based on their No. of Episodes","06507c63":"#### As the above code consumes too much Memory ,So we have uploaded the image of the result by running it in a new notebook","35d47364":"**3. Anime_synop**","c98f497e":"* #### Here we have displayed the Genre Cloud of Animes","73050ec0":"### 2.1.1  Exploring anime_info","9ec363cf":"#### As we can see from the above exploration ,only anime_synop has NAN values .We will remove them in next step","abb03ecd":"**1. Anime_info**","2ab16e2e":"# 2.2 Checking for NAN and Duplicate values","2a22defc":"*  #### Here we have categorized animes based on their Production Studio and displayed there count","2249ed04":"* #### Top 5 animes based on Score\/Rating"}}