{"cell_type":{"603ff6da":"code","0bd07c62":"code","cea7f82a":"code","4aa1603d":"code","4e9bea13":"code","2a4f35d3":"code","1b2408c2":"code","45b02744":"code","d0636bec":"code","329c5b7f":"code","51d69102":"code","fe71e9f8":"code","f087a2a3":"code","a55ffe43":"code","b34839cf":"code","08ab86f4":"code","b142650f":"code","c9f9403a":"code","d5cb8c01":"code","5ff21673":"code","02cf91d4":"code","3b4be177":"code","fca2ca0b":"code","b91033f8":"code","0f47df26":"code","02e87c21":"code","ee12344f":"code","2266ba44":"code","c2d26445":"code","73f07daa":"code","115da24d":"code","1150bddf":"code","21f23f4a":"code","656370ae":"code","dde993c0":"code","65b07612":"code","5aa6fc22":"code","0f5890de":"code","e73dbceb":"code","1293582c":"code","5ea085d6":"code","4e99e64a":"code","f12d0c72":"code","7239b7fd":"code","beb55c18":"code","8b77c3be":"code","a08beb61":"code","466b9fd8":"code","481f81d3":"code","0103520f":"code","a9498ee6":"code","d5d57ae4":"markdown","dd14b718":"markdown","25a6b57a":"markdown","4aaebeda":"markdown","1fee3ccf":"markdown","bbd61ac2":"markdown","99755e93":"markdown","b83ecf9c":"markdown","1068752e":"markdown","72506a5f":"markdown","74927633":"markdown","94893990":"markdown","738c6676":"markdown","dfc0140d":"markdown","15583316":"markdown","2e5289ea":"markdown","9e4dd801":"markdown","c005416c":"markdown","181a282e":"markdown","37220605":"markdown","22abf490":"markdown","0e6b2bbd":"markdown","82465e44":"markdown","b69c77c2":"markdown","e6a4c28e":"markdown","dc695919":"markdown","5d1e0af6":"markdown","eed0bb55":"markdown","17cf17e7":"markdown","0a16ebe4":"markdown","15fbbe53":"markdown","951888e0":"markdown","9d0f385c":"markdown","c5572d96":"markdown","bcbbc817":"markdown","2fe71b23":"markdown","2c0bea73":"markdown","b58ebd5a":"markdown","304b2c57":"markdown","40d1302d":"markdown","3c04818e":"markdown","aa8e45c9":"markdown","aa44dcd6":"markdown","d564a39d":"markdown","16218675":"markdown","6d5af3b7":"markdown","842938da":"markdown","f7e62fb3":"markdown","9d0e43de":"markdown"},"source":{"603ff6da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0bd07c62":"# install xlrd\n!pip install xlrd\n\nprint('xlrd installed!')","cea7f82a":"df_can = pd.read_excel('..\/input\/Canada.xlsx',\n                       sheet_name='Canada by Citizenship',\n                       skiprows=range(20),\n                       skip_footer=2\n                      )\n\nprint('Data read into a dataframe!')","4aa1603d":"df_can.drop(['AREA', 'REG', 'DEV', 'Type', 'Coverage'], axis=1, inplace=True)\n\n# let's view the first five elements and see how the dataframe was changed\ndf_can.head()","4e9bea13":"df_can.rename(columns={'OdName':'Country','AreaName':'Continent','RegName':'Region'},inplace=True)\ndf_can.head()","2a4f35d3":"# let's examine the types of the column labels\nall(isinstance(column, str) for column in df_can.columns)","1b2408c2":"df_can.columns = list(map(str, df_can.columns))\n\n# let's check the column labels types now\nall(isinstance(column, str) for column in df_can.columns)","45b02744":"df_can.set_index('Country', inplace=True)\n\n# let's view the first five elements and see how the dataframe was changed\ndf_can.head()","d0636bec":"df_can['Total'] = df_can.sum(axis=1)\n\n# let's view the first five elements and see how the dataframe was changed\ndf_can.head()","329c5b7f":"print(df_can.shape)","51d69102":"# finally, let's create a list of years from 1980 - 2013\n# this will come in handy when we start plotting the data\nyears = list(map(str, range(1980, 2014)))\n\nyears","fe71e9f8":"# use the inline backend to generate the plots within the browser\n%matplotlib inline \n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nprint(plt.style.available)\nmpl.style.use('bmh') # optional: for bmh-like style\n\n# check for latest version of Matplotlib\nprint ('Matplotlib version: ', mpl.__version__) # >= 2.0.0","f087a2a3":"df_can_max=df_can.sort_values('Total',ascending=False)\ndf_can_max.head()","a55ffe43":"df_can_max=df_can.loc[['India','China','United Kingdom of Great Britain and Northern Ireland','Philippines','Pakistan'],years]\ndf_can_max = df_can_max.transpose()\ndf_can_max.head()","b34839cf":"df_can_max.plot( kind='Area',stacked=False,figsize=(14, 8))\nplt.title('Immigration Trend of Top 5 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()","08ab86f4":"df_can_max=df_can.sort_values('Total',ascending=False)\ndf_can_max.head()","b142650f":"df_can_India=df_can.loc[\"India\",years]\ndf_can_China=df_can.loc[\"China\",years]\ndf_can_Uk=df_can.loc[\"United Kingdom of Great Britain and Northern Ireland\",years]\ndf_can_Philippines=df_can.loc[\"Philippines\",years]\ndf_can_Pakistan=df_can.loc[\"Pakistan\",years]\n\ndf_can_India.plot(kind='area', stacked=False,figsize=(20, 10))\ndf_can_China.plot(kind='area', stacked=False,figsize=(20, 10))\ndf_can_Uk.plot(kind='area', stacked=False,figsize=(20, 10))\ndf_can_Philippines.plot(kind='area', stacked=False,figsize=(20, 10))\ndf_can_Pakistan.plot(kind='area', stacked=False,figsize=(20, 10))\nplt.title('Immigration Trend of Top 5 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()","c9f9403a":"df_can.loc[\"India\",years].plot(kind='area', stacked=False,figsize=(20, 10))\ndf_can.loc[\"China\",years].plot(kind='area', stacked=False,figsize=(20, 10))\ndf_can.loc[\"United Kingdom of Great Britain and Northern Ireland\",years].plot(kind='area', stacked=False,figsize=(20, 10))\ndf_can.loc[\"Philippines\",years].plot(kind='area', stacked=False,figsize=(20, 10))\ndf_can.loc[\"Pakistan\",years].plot(kind='area', stacked=False,figsize=(20, 10))\nplt.title('Immigration Trend of Top 5 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()\n","d5cb8c01":"df_can.sort_values(['Total'], ascending=False, axis=0, inplace=True)\n\n# get the top 5 entries\ndf_top5 = df_can.head()\n\n# transpose the dataframe\ndf_top5 = df_top5[years].transpose() \n\ndf_top5.head()","5ff21673":"df_top5.index = df_top5.index.map(int) # let's change the index values of df_top5 to type integer for plotting\ndf_top5.plot(kind='area', \n             stacked=False,\n             figsize=(20, 10), # pass a tuple (x, y) size\n             )\n\nplt.title('Immigration Trend of Top 5 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()","02cf91d4":"## my answer\ndf_least=df_can.sort_values(['Total'])\ndf_least.head()\ndf_least=df_least.loc[['San Marino','New Caledonia','Marshall Islands','Western Sahara','Palau'],years]\ndf_least=df_least.transpose()\ndf_least.plot(kind='area', alpha=0.35, figsize=(20, 10))\n\n\nplt.title('Immigration Trend of 5 Countries with Least Contribution to Immigration')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\nplt.show()","3b4be177":"###ibm's answer\ndf_least5 = df_can.tail(5)\ndf_least5 = df_least5[years].transpose() \ndf_least5.head()\n","fca2ca0b":"df_least5.index = df_least5.index.map(int) # let's change the index values of df_least5 to type integer for plotting\ndf_least5.plot(kind='area', alpha=0.45, figsize=(20, 10)) \nplt.title('Immigration Trend of 5 Countries with Least Contribution to Immigration')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\nplt.show()","b91033f8":"##my answer\nax = df_least.plot(kind='area', alpha=0.55, stacked=False, figsize=(20, 10))\n\nax.set_title('Immigration Trend of Least 5 Countries')\nax.set_ylabel('Number of Immigrants')\nax.set_xlabel('Years')\n","0f47df26":"##Ibm's Answer\nax = df_least5.plot(kind='area', alpha=0.55, stacked=False, figsize=(20, 10))\nax.set_title('Immigration Trend of 5 Countries with Least Contribution to Immigration')\nax.set_ylabel('Number of Immigrants')\nax.set_xlabel('Years')","02e87c21":"# let's quickly view the 2013 data\ndf_can['2013'].head()","ee12344f":"# np.histogram returns 2 values\ncount, bin_edges = np.histogram(df_can['2013'])\n\nprint(count) # frequency count\nprint(bin_edges) # bin ranges, default = 10 bins","2266ba44":"df_can['2013'].plot(kind='hist',figsize=(8,5))\nplt.title('Histogram of Immigration from 195 countries in 2013') # add a title to the histogram\nplt.ylabel('Number of Countries') # add y-label\nplt.xlabel('Number of Immigrants') # add x-label\n\nplt.show()","c2d26445":"df_can['2013'].plot(kind='hist',xticks=bin_edges,figsize=(8,5),legend=True)\nplt.title('Histogram of Immigration from 195 countries in 2013') # add a title to the histogram\nplt.ylabel('Number of Countries') # add y-label\nplt.xlabel('Number of Immigrants') # add x-label\n\nplt.show()","73f07daa":"##my answer\ndf_trilla=df_can.loc[['Denmark','Norway','Sweden'],years]\ncount, bin_edges = np.histogram(df_trilla)\ndf_trilla=df_trilla.transpose()\ndf_trilla.head()","115da24d":"df_trilla.plot(kind='hist',xticks=bin_edges,figsize=(8,5))\nplt.title('Histogram of Immigration from Denmark,Norway,Sweden in 2013') # add a title to the histogram\nplt.ylabel('Number of Countries') # add y-label\nplt.xlabel('Number of Immigrants') # add x-label\n\nplt.show()","1150bddf":"##Ibm's answer\n# let's quickly view the dataset \ndf_can.loc[['Denmark', 'Norway', 'Sweden'], years]","21f23f4a":"# generate histogram\ndf_can.loc[['Denmark', 'Norway', 'Sweden'], years].plot.hist()","656370ae":"# transpose dataframe\ndf_t = df_can.loc[['Denmark', 'Norway', 'Sweden'], years].transpose()\ndf_t.head()","dde993c0":"# generate histogram\ndf_t.plot(kind='hist', figsize=(10, 6))\n\nplt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\n\nplt.show()","65b07612":"# let's get the x-tick values\ncount, bin_edges = np.histogram(df_t, 15)\n\n# un-stacked histogram\ndf_t.plot(kind ='hist', \n          figsize=(10, 6),\n          bins=15,\n          alpha=0.6,\n          xticks=bin_edges,\n          color=['coral', 'darkslateblue', 'mediumseagreen']\n         )\n\nplt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\n\nplt.show()","5aa6fc22":"count, bin_edges = np.histogram(df_t, 15)\nxmin = bin_edges[0] - 10   #  first bin value is 31.0, adding buffer of 10 for aesthetic purposes \nxmax = bin_edges[-1] + 10  #  last bin value is 308.0, adding buffer of 10 for aesthetic purposes\n\n# stacked Histogram\ndf_t.plot(kind='hist',\n          figsize=(10, 6), \n          bins=15,\n          xticks=bin_edges,\n          color=['coral', 'darkslateblue', 'mediumseagreen'],\n          stacked=True,\n          xlim=(xmin, xmax)\n         )\n\nplt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants') \n\nplt.show()","0f5890de":"##my answer\ndf_westeurope=df_can.loc[['Greece','Albania','Bulgaria'],years]\ndf_westeurope=df_westeurope.transpose()\ndf_westeurope.head()","e73dbceb":"\ncount,bin_edges=np.histogram(df_westeurope,15)\nxmin=bin_edges[0]-10\nxmax=bin_edges[-1]+10\ndf_westeurope.plot(kind='hist',alpha=0.35,xlim=(xmin,xmax),xticks=bin_edges,bins=15,figsize=(10,6))\nplt.title('Histogram of Immigration from Greece, Albania, and Bulgaria from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants') \n\nplt.show()","1293582c":"##Ibm's answer\ndf_cof = df_can.loc[['Greece', 'Albania', 'Bulgaria'], years]\ndf_cof = df_cof.transpose() \ncount, bin_edges = np.histogram(df_cof, 15)\ndf_cof.plot(kind ='hist',\n            figsize=(10, 6),\n            bins=15,\n            alpha=0.35,\n            xticks=bin_edges,\n            color=['coral', 'darkslateblue', 'mediumseagreen']\n            )\nplt.title('Histogram of Immigration from Greece, Albania, and Bulgaria from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\nplt.show()","5ea085d6":"##my answer\ndf_icel=df_can.loc[[\"Iceland\"],years]\ndf_icel=df_icel.transpose()\ndf_icel.plot(kind='bar',figsize=(10,5))\nplt.xlabel('Year') # add to x-label to the plot\nplt.ylabel('Number of immigrants') # add y-label to the plot\nplt.title('Icelandic immigrants to Canada from 1980 to 2013') # add title to the plot\n\nplt.show()","4e99e64a":"##Ibm's Answer\n# step 1: get the data\ndf_iceland = df_can.loc['Iceland', years]\ndf_iceland.head()","f12d0c72":"# step 2: plot data\ndf_iceland.plot(kind='bar', figsize=(10, 6))\n\nplt.xlabel('Year') # add to x-label to the plot\nplt.ylabel('Number of immigrants') # add y-label to the plot\nplt.title('Icelandic immigrants to Canada from 1980 to 2013') # add title to the plot\n\nplt.show()","7239b7fd":"df_iceland.plot(kind='bar', figsize=(10, 6), rot=90) # rotate the bars by 90 degrees\n\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\nplt.title('Icelandic Immigrants to Canada from 1980 to 2013')\n\n# Annotate arrow\nplt.annotate('',                      # s: str. Will leave it blank for no text\n             xy=(32, 70),             # place head of the arrow at point (year 2012 , pop 70)\n             xytext=(28, 20),         # place base of the arrow at point (year 2008 , pop 20)\n             xycoords='data',         # will use the coordinate system of the object being annotated \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2)\n            )\n\nplt.show()","beb55c18":"df_iceland.plot(kind='bar', figsize=(10, 6), rot=90) \n\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\nplt.title('Icelandic Immigrants to Canada from 1980 to 2013')\n\n# Annotate arrow\nplt.annotate('',                      # s: str. will leave it blank for no text\n             xy=(32, 70),             # place head of the arrow at point (year 2012 , pop 70)\n             xytext=(28, 20),         # place base of the arrow at point (year 2008 , pop 20)\n             xycoords='data',         # will use the coordinate system of the object being annotated \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2)\n            )\n\n# Annotate Text\nplt.annotate('2008 - 2011 Financial Crisis', # text to display\n             xy=(28, 30),                    # start the text at at point (year 2008 , pop 30)\n             rotation=72.5,                  # based on trial and error to match the arrow\n             va='bottom',                    # want the text to be vertically 'bottom' aligned\n             ha='left',                      # want the text to be horizontally 'left' algned.\n            )\n\nplt.show()","8b77c3be":"#my answer\ndf_most15=df_can.sort_values(['Total'],ascending=False)\ndf_most15=df_most15.head(15)\ndf_most15=df_most15['Total']\ndf_most15.head()","a08beb61":"df_most15.plot(kind='barh',figsize=(12,12))\nfor index, value in enumerate(df_most15): \n    plt.annotate(label, xy=(value, index), color='black')\nplt.xlabel('Number of Immigrants')\nplt.title('Top 15 Conuntries Contributing to the Immigration to Canada between 1980 - 2013')\nplt.show()","466b9fd8":"#IBM's answer\n\n\n\n# sort dataframe on 'Total' column (descending)\ndf_can.sort_values(by='Total', ascending=True, inplace=True)\n\n\n# get top 15 countries\ndf_top15 = df_can['Total'].tail(15)\ndf_top15\n","481f81d3":"\n# generate plot\ndf_top15.plot(kind='barh', figsize=(12, 12), color='steelblue')\nplt.xlabel('Number of Immigrants')\nplt.title('Top 15 Conuntries Contributing to the Immigration to Canada between 1980 - 2013')\n\n\n\n# annotate value labels to each country\nfor index, value in enumerate(df_top15): \n    label = format(int(value), ',') # format int with commas\n    \n    # place text at the end of bar (subtracting 47000 from x, and 0.1 from y to make it fit within the bar)\n    plt.annotate(label, xy=(value - 47000, index - 0.10), color='white')\n\n\n\nplt.show()\n","0103520f":"df_least20=df_can.sort_values('Total')\ndf_least20=df_least20['Total']\ndf_least20=df_least20.head(20)\ndf_least20","a9498ee6":"df_least20.plot(kind='barh',figsize=(15,15))\nfor index, value in enumerate(df_least20): \n    plt.annotate(label,xy=(value,index),color='black')\nplt.title('Immigration Trend of 20 Countries with Least Contribution to Immigration')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\nplt.show()","d5d57ae4":"*Side Note:* We could use `df_can['2013'].plot.hist()`, instead. In fact, throughout this lesson, using `some_data.plot(kind='type_plot', ...)` is equivalent to `some_data.plot.type_plot(...)`. That is, passing the type of the plot as argument or method behaves the same. \n\nSee the *pandas* documentation for more info  http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.plot.html.","dd14b718":"**Question**: Use the scripting layer to display the immigration distribution for Greece, Albania, and Bulgaria for years 1980 - 2013? Use an overlapping plot with 15 bins and a transparency value of 0.35.","25a6b57a":"**Question**: Use the scripting layer to create a stacked area plot of the 5 countries that contributed the least to immigration to Canada **from** 1980 to 2013. Use a transparency value of 0.45.","4aaebeda":"Now the dataframe has an extra column that presents the total number of immigrants from each country in the dataset from 1980 - 2013. So if we print the dimension of the data, we get:","1fee3ccf":"The bar plot above shows the total number of immigrants broken down by each year. We can clearly see the impact of the financial crisis; the number of immigrants to Canada started increasing rapidly after 2008. \n\nLet's annotate this on the plot using the `annotate` method of the **scripting layer** or the **pyplot interface**. We will pass in the following parameters:\n- `s`: str, the text of annotation.\n- `xy`: Tuple specifying the (x,y) point to annotate (in this case, end point of arrow).\n- `xytext`: Tuple specifying the (x,y) point to place the text (in this case, start point of arrow).\n- `xycoords`: The coordinate system that xy is given in - 'data' uses the coordinate system of the object being annotated (default).\n- `arrowprops`: Takes a dictionary of properties to draw the arrow:\n    - `arrowstyle`: Specifies the arrow style, `'->'` is standard arrow.\n    - `connectionstyle`: Specifies the connection type. `arc3` is a straight line.\n    - `color`: Specifes color of arror.\n    - `lw`: Specifies the line width.\n\nI encourage you to read the Matplotlib documentation for more details on annotations: \nhttp:\/\/matplotlib.org\/api\/pyplot_api.html#matplotlib.pyplot.annotate.","bbd61ac2":"## Introduction\n\nIn this lab, we will continue exploring the Matplotlib library and will learn how to create additional plots, namely area plots, histograms, and bar charts.","99755e93":"let's do it for 20 country with the least immigration","b83ecf9c":"There are multiple solutions I think. Now I'm going to try it.","1068752e":"The Solutions above are my solutions.Now let's see the Ibm's solution and check if I made it right.","72506a5f":"#### 4. Set the country name as index - useful for quickly looking up countries using .loc method.","74927633":"<hr>\nCopyright &copy; 2018 [Cognitive Class](https:\/\/cognitiveclass.ai\/?utm_source=bducopyrightlink&utm_medium=dswb&utm_campaign=bdu). This notebook and its source code are released under the terms of the [MIT License](https:\/\/bigdatauniversity.com\/mit-license\/).","94893990":"Area plots are stacked by default. And to produce a stacked area plot, each column must be either all positive or all negative values (any NaN values will defaulted to 0). To produce an unstacked plot, pass `stacked=False`. ","738c6676":"In the above plot, the x-axis represents the population range of immigrants in intervals of 3412.9. The y-axis represents the number of countries that contributed to the aforementioned population. \n\nNotice that the x-axis labels do not match with the bin size. This can be fixed by passing in a `xticks` keyword that contains the list of the bin sizes, as follows:","dfc0140d":"# Histograms<a id=\"8\"><\/a>\n\nA histogram is a way of representing the *frequency* distribution of numeric dataset. The way it works is it partitions the x-axis into *bins*, assigns each data point in our dataset to a bin, and then counts the number of data points that have been assigned to each bin. So the y-axis is the frequency or the number of data points in each bin. Note that we can change the bin size and usually one needs to tweak it so that the distribution is displayed nicely.","15583316":"By default, the `histrogram` method breaks up the dataset into 10 bins. The figure below summarizes the bin ranges and the frequency distribution of immigration in 2013. We can see that in 2013:\n* 178 countries contributed between 0 to 3412.9 immigrants \n* 11 countries contributed between 3412.9 to 6825.8 immigrants\n* 1 country contributed between 6285.8 to 10238.7 immigrants, and so on..","2e5289ea":"This notebook was originally created by [Jay Rajasekharan](https:\/\/www.linkedin.com\/in\/jayrajasekharan) with contributions from [Ehsan M. Kermani](https:\/\/www.linkedin.com\/in\/ehsanmkermani), and [Slobodan Markovic](https:\/\/www.linkedin.com\/in\/slobodan-markovic).\n\nThis notebook was recently revamped by [Alex Aklson](https:\/\/www.linkedin.com\/in\/aklson\/). I hope you found this lab session interesting. Feel free to contact me if you have any questions!","9e4dd801":"Before we proceed with creating the histogram plot, let's first examine the data split into intervals. To do this, we will us **Numpy**'s `histrogram` method to get the bin ranges and frequency counts as follows:","c005416c":"Clean up data. We will make some modifications to the original dataset to make it easier to create our visualizations. Refer to `Introduction to Matplotlib and Line Plots` lab for the rational and detailed description of the changes.","181a282e":"#### 3. For consistency, ensure that all column labels of type string.","37220605":"All 4 plots are the same but created in other ways.I'm sure that there are much more ways to create plots. 3 of them is my solution. The other Ibm's solution.","22abf490":"## Table of Contents\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n\n1. [Exploring Datasets with *pandas*](#0)<br>\n2. [Downloading and Prepping Data](#2)<br>\n3. [Visualizing Data using Matplotlib](#4) <br>\n4. [Area Plots](#6) <br>\n5. [Histograms](#8) <br>\n6. [Bar Charts](#10) <br>\n<\/div>\n<hr>","0e6b2bbd":"**Option 2: Artist layer (Object oriented method) - using an `Axes` instance from Matplotlib (preferred) **\n\nYou can use an `Axes` instance of your current plot and store it in a variable (eg. `ax`). You can add more elements by calling methods with a little change in syntax (by adding \"*set_*\" to the previous methods). For example, use `ax.set_title()` instead of `plt.title()` to add title,  or `ax.set_xlabel()` instead of `plt.xlabel()` to add label to the x-axis. \n\nThis option sometimes is more transparent and flexible to use for advanced plots (in particular when having multiple plots, as you will see later). ","82465e44":"That does not look right! \n\nDon't worry, you'll often come across situations like this when creating plots. The solution often lies in how the underlying dataset is structured.\n\nInstead of plotting the population frequency distribution of the population for the 3 countries, *pandas* instead plotted the population frequency distribution for the `years`.\n\nThis can be easily fixed by first transposing the dataset, and then plotting as shown below.","b69c77c2":"### Two types of plotting\n\nThere are two styles\/options of ploting with `matplotlib`. Plotting using the Artist layer and plotting using the scripting layer.\n\n**Option 1: Scripting layer (procedural method) - using matplotlib.pyplot as 'plt' **\n\nYou can use `plt` i.e. `matplotlib.pyplot` and add more elements by calling different methods procedurally; for example, `plt.title(...)` to add title or `plt.xlabel(...)` to add label to the x-axis.\n```python\n    # Option 1: This is what we have been using so far\n    df_top5.plot(kind='area', alpha=0.35, figsize=(20, 10)) \n    plt.title('Immigration trend of top 5 countries')\n    plt.ylabel('Number of immigrants')\n    plt.xlabel('Years')\n```","e6a4c28e":"If we do no want the plots to overlap each other, we can stack them using the `stacked` paramemter. Let's also adjust the min and max x-axis labels to remove the extra gap on the edges of the plot. We can pass a tuple (min,max) using the `xlim` paramater, as show below.","dc695919":"Let's make a few modifications to improve the impact and aesthetics of the previous plot:\n* increase the bin size to 15 by passing in `bins` parameter\n* set transparency to 60% by passing in `alpha` paramemter\n* label the x-axis by passing in `x-label` paramater\n* change the colors of the plots by passing in `color` parameter","5d1e0af6":"# Bar Charts (Dataframe) <a id=\"10\"><\/a>\n\nA bar plot is a way of representing data where the *length* of the bars represents the magnitude\/size of the feature\/variable. Bar graphs usually represent numerical and categorical variables grouped in intervals. \n\nTo create a bar plot, we can pass one of two arguments via `kind` parameter in `plot()`:\n\n* `kind=bar` creates a *vertical* bar plot\n* `kind=barh` creates a *horizontal* bar plot","eed0bb55":"Now the dataframe has an extra column that presents the total number of immigrants from each country in the dataset from 1980 - 2013. So if we print the dimension of the data, we get:","17cf17e7":"**Question**: Use the artist layer to create an unstacked area plot of the 5 countries that contributed the least to immigration to Canada **from** 1980 to 2013. Use a transparency value of 0.55.","0a16ebe4":"We can also plot multiple histograms on the same plot. For example, let's try to answer the following questions using a histogram.\n\n**Question**: What is the immigration distribution for Denmark, Norway, and Sweden for years 1980 - 2013?","15fbbe53":"Notice how the columns Type, Coverage, AREA, REG, and DEV got removed from the dataframe. ","951888e0":"# Visualizing Data using Matplotlib<a id=\"4\"><\/a>","9d0f385c":"**Question:** What is the frequency distribution of the number (population) of new immigrants from the various countries to Canada in 2013?","c5572d96":"his notebook is part of the free course on **Cognitive Class** called *Data Visualization with Python*. If you accessed this notebook outside the course, you can take this free self-paced course online by clicking [here](https:\/\/cocl.us\/DV0101EN_Lab2).","bcbbc817":"Tip:\nFor a full listing of colors available in Matplotlib, run the following code in your python shell:\n```python\nimport matplotlib\nfor name, hex in matplotlib.colors.cnames.items():\n    print(name, hex)\n```","2fe71b23":"We can easily graph this distribution by passing `kind=hist` to `plot()`.","2c0bea73":"#### 1. Clean up the dataset to remove columns that are not informative to us for visualization (eg. Type, AREA, REG).","b58ebd5a":"Import `Matplotlib` and **Numpy**.","304b2c57":"In the last module, we created a line plot that visualized the top 5 countries that contribued the most immigrants to Canada from 1980 to 2013. With a little modification to the code, we can visualize this plot as a cumulative plot, also knows as a **Stacked Line Plot** or **Area plot**.","40d1302d":"# Area Plots<a id=\"6\"><\/a>","3c04818e":"\n\n<h1 align=center><font size = 5>Area Plots, Histograms, and Bar Plots<\/font><\/h1>","aa8e45c9":"Area plots are stacked by default. And to produce a stacked area plot, each column must be either all positive or all negative values (any NaN values will defaulted to 0). To produce an unstacked plot, pass `stacked=False`. ","aa44dcd6":"#### 5. Add total column.","d564a39d":"#### 2. Rename some of the columns so that they make sense.","16218675":"*Vertical bar plot**\n\nIn vertical bar graphs, the x-axis is used for labelling, and the length of bars on the y-axis corresponds to the magnitude of the variable being measured. Vertical bar graphs are particuarly useful in analyzing time series data. One disadvantage is that they lack space for text labelling at the foot of each bar. \n\n**Let's start off by analyzing the effect of Iceland's Financial Crisis:**\n\nThe 2008 - 2011 Icelandic Financial Crisis was a major economic and political event in Iceland. Relative to the size of its economy, Iceland's systemic banking collapse was the largest experienced by any country in economic history. The crisis led to a severe economic depression in 2008 - 2011 and significant political unrest.\n\n**Question:** Let's compare the number of Icelandic immigrants (country = 'Iceland') to Canada from year 1980 to 2013. ","6d5af3b7":"Notice how the above line of code returned *False* when we tested if all the column labels are of type **string**. So let's change them all to **string** type.","842938da":"Let's also annotate a text to go over the arrow.  We will pass in the following additional parameters:\n- `rotation`: rotation angle of text in degrees (counter clockwise)\n- `va`: vertical alignment of text [\u2018center\u2019 | \u2018top\u2019 | \u2018bottom\u2019 | \u2018baseline\u2019]\n- `ha`: horizontal alignment of text [\u2018center\u2019 | \u2018right\u2019 | \u2018left\u2019]","f7e62fb3":"Notice how the column names now make much more sense, even to an outsider.","9d0e43de":"**Horizontal Bar Plot**\n\nSometimes it is more practical to represent the data horizontally, especially if you need more room for labelling the bars. In horizontal bar graphs, the y-axis is used for labelling, and the length of bars on the x-axis corresponds to the magnitude of the variable being measured. As you will see, there is more room on the y-axis to  label categetorical variables.\n\n\n**Question:** Using the scripting layer and the `df_can` dataset, create a *horizontal* bar plot showing the *total* number of immigrants to Canada from the top 15 countries, for the period 1980 - 2013. Label each country with the total immigrant count."}}