{"cell_type":{"b38c6d82":"code","1ed3695c":"code","8068147d":"code","f21191ae":"code","a147803a":"code","f5132b95":"code","458e03a7":"code","06706a00":"code","52815209":"code","8fcdf6c8":"code","1b91c67c":"code","55bfc777":"code","985d4168":"code","1e38c84d":"code","de3b2f69":"code","1f6db517":"code","8382bea2":"code","2ea31f9e":"code","4fb0f147":"code","8e4cf1f7":"code","5e05cd70":"code","9387f385":"code","df327000":"code","7c97e978":"code","415d2f80":"code","a24ff1bd":"code","751211ff":"code","cad85a01":"code","b3d0307c":"code","f28de1b1":"code","af4b614c":"code","83f0bb62":"code","6ea361e9":"code","20a80d9d":"code","ceb8bfa4":"code","81f0fd30":"code","625cb575":"code","da9c6208":"code","133a5401":"code","0504ce24":"code","82d61bb5":"code","bb65a95a":"code","e2269572":"code","5c5b99e7":"code","2680445f":"code","a2606fe0":"code","6c53efc9":"code","ee9bd439":"code","d922a6e9":"code","d946d118":"code","7725ee95":"code","f3fce1e6":"code","adda6a86":"code","7e0a2004":"code","098c0018":"code","939f7e40":"code","571b0602":"code","13796c10":"code","dff3d616":"code","77ff7026":"code","df951b31":"markdown","810dc925":"markdown","dcbfd524":"markdown","44497ce6":"markdown","98eb25fd":"markdown","05691876":"markdown","49ecf06e":"markdown","d13d87c3":"markdown","7a08a242":"markdown","cfe7307d":"markdown","c89e1ecb":"markdown","ea8feba5":"markdown","0af262a0":"markdown","ba13e0e4":"markdown","ff5ee0e4":"markdown","6ee6f34c":"markdown","b08d5512":"markdown","d28baa77":"markdown","12b42046":"markdown","ae2f9414":"markdown","8b400841":"markdown","46d66a6b":"markdown","1cd652c8":"markdown","eb513e63":"markdown","8ea17299":"markdown","fa873d73":"markdown","96a4e124":"markdown","264bb7ac":"markdown","215ba2e1":"markdown","a59707cf":"markdown","ac90902b":"markdown","2aa65619":"markdown","30b2b42a":"markdown","caf7c4a9":"markdown","c297cfcc":"markdown","5c90f7eb":"markdown"},"source":{"b38c6d82":"import os\n\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport seaborn as sns\n\nmatplotlib.rcParams['axes.unicode_minus'] = False # \uadf8\ub798\ud504\uc5d0\uc11c \ub9c8\uc774\ub108\uc2a4 \ud3f0\ud2b8 \uae68\uc9c0\ub294 \ubb38\uc81c\uc5d0 \ub300\ud55c \ub300\ucc98\nmatplotlib.rcParams[\"font.family\"] = \"Malgun Gothic\" \n\nimport warnings\nwarnings.filterwarnings('ignore')","1ed3695c":"train_trade = pd.read_csv('..\/input\/train_trade.csv')\ntest1_trade = pd.read_csv('..\/input\/test1_trade.csv')\ntest2_trade = pd.read_csv('..\/input\/test2_trade.csv')\n\nlabel = pd.read_csv('..\/input\/train_label.csv')","8068147d":"print('train_trade.shape :', train_trade.shape)\nprint('test1_trade.shape :', test1_trade.shape)\nprint('test2_trade.shape :', test2_trade.shape)\nprint()\nprint('label.shape :', label.shape)","f21191ae":"train_trade['data'] = 'train'\ntest1_trade['data'] = 'test1'\ntest2_trade['data'] = 'test2'","a147803a":"trade = pd.concat([train_trade, test1_trade, test2_trade], axis = 0)","f5132b95":"trade.isnull().sum()","458e03a7":"trade.loc[trade['item_price'].isnull()].head()","06706a00":"trade.loc[trade['item_price'].isnull()]['type'].value_counts()","52815209":"print('trade.day.nunique() : ', trade.day.nunique())\nprint('trade.day.unique() : ', trade.day.unique())","8fcdf6c8":"print('trade.time.nunique() : ', trade.time.nunique())\nprint('trade.time.unique() : ', trade.time.unique())","1b91c67c":"trade['hour'] = trade['time'].str.split(':', expand = True)[0]","55bfc777":"print('trade.hour.nunique() : ', trade.hour.nunique())\nprint('trade.hour.unique() : ', trade.hour.unique())","985d4168":"print('trade.server.nunique() : ', trade.server.nunique())\nprint('trade.server.unique() : ', trade.server.unique())","1e38c84d":"print('trade.type.nunique() : ', trade.type.nunique())\nprint('trade.type.unique() : ', trade.type.unique())","de3b2f69":"print('trade.item_type.nunique() : ', trade.item_type.nunique())\nprint('trade.item_type.unique() : ', trade.item_type.unique())","1f6db517":"plt.figure(figsize= (15,4))\nsns.kdeplot(trade['item_amount'], shade = True)","8382bea2":"trade['item_amount'].describe(percentiles= [0.8, 0.9, 0.95, 0.99]).round(2)","2ea31f9e":"trade.columns","4fb0f147":"category = ['server', 'day', 'hour', 'type', 'item_type']\ncontinous = ['item_amount', 'item_price']","8e4cf1f7":"m = [0,0,1,1,2,2]\nn = [0,1,0,1,0,1]\n\nf, ax = plt.subplots(3, 2,figsize = (18,12))\nfor m, n, feature in zip(m, n, category):\n    sns.countplot(x = feature, data = trade, ax = ax[m][n])\n    ax[m][n].set_title('Trade_{} countplot'.format(feature), fontsize = 15)\nplt.xticks(rotation = 45, ha = \"right\")\nplt.tight_layout()","5e05cd70":"m = [0,0,1,1,2,2]\nn = [0,1,0,1,0,1]\n\nf, ax = plt.subplots(3, 2,figsize = (18,12))\nfor m, n, feature in zip(m, n, category):\n    sns.pointplot(x = feature, y = 'item_amount', data = trade, ax = ax[m][n], color='blue')\n    sns.pointplot(x = feature, y = 'item_price', data = trade, ax = ax[m][n], color='red')\n    ax[m][n].set_title('pointplot of Trade_{} \\n blue : item_amount, red : item_price'.format(feature), fontsize = 15)\nplt.xticks(rotation = 45, ha = \"right\")\nplt.tight_layout()","9387f385":"print('source_acc_id \uc758 \uc218 : ', trade['source_acc_id'].nunique())\nprint('source_char_id \uc758 \uc218 : ', trade['source_char_id'].nunique())\nprint('target_acc_id \uc758 \uc218 : ', trade['target_acc_id'].nunique())\nprint('targer_char_id \uc758 \uc218 : ', trade['target_char_id'].nunique())","df327000":"trade_buy = trade.copy()\ntrade_sell = trade.copy()\n\ntrade_buy['trade_type'] = 'buy'\ntrade_sell['trade_type'] = 'sell'\n\ntrade_buy.drop(['source_acc_id', 'source_char_id'], axis = 1, inplace = True)\ntrade_sell.drop(['target_acc_id', 'target_char_id'], axis = 1, inplace = True)\n\ntrade_buy = trade_buy.rename(columns = {'target_acc_id' : 'acc_id' , 'target_char_id' : 'char_id'})\ntrade_sell = trade_sell.rename(columns = {'source_acc_id' : 'acc_id', 'source_char_id' : 'char_id'})\n\ntotal_trade = pd.concat([trade_buy, trade_sell], axis = 0)","7c97e978":"total_trade.drop(['time'], axis = 1, inplace = True)","415d2f80":"data = pd.merge(label, total_trade, on = 'acc_id', how = 'left')","a24ff1bd":"data['isSurvival'] = data['survival_time'].apply(lambda x : 1 if x == 64 else 0)","751211ff":"data.head()","cad85a01":"data.shape","b3d0307c":"print((data.isnull().sum() \/ len(data)))","f28de1b1":"category = ['server', 'day', 'hour', 'trade_type', 'type', 'item_type']\n\ncontinous = ['item_amount', 'item_price']\n\ntarget= ['survival_time', 'amount_spent', 'isSurvival']","af4b614c":"data.loc[data['item_amount'] > 3.9, 'isSurvival']","83f0bb62":"plt.figure(figsize= (5,5))\n\ndata.loc[data['item_amount'] > 3.9, 'isSurvival'].value_counts().plot.pie(autopct = '%1.1f')","6ea361e9":"m = [0,0,1,1,2,2]\nn = [0,1,0,1,0,1]\n\nf, ax = plt.subplots(3, 2,figsize = (18,12))\nfor m, n, feature in zip(m, n, category):\n    sns.countplot(x = feature, data = data, ax = ax[m][n], hue = 'isSurvival')\n    ax[m][n].set_title('countplot of Trade_{} by isSurvival '.format(feature), fontsize = 15)\nplt.xticks(rotation = 45, ha = \"right\")\nplt.tight_layout()","20a80d9d":"m = [0,0,1,1,2,2]\nn = [0,1,0,1,0,1]\n\nf, ax = plt.subplots(3, 2,figsize = (18,12))\nfor m, n, feature in zip(m, n, category):\n    sns.pointplot(x = feature, y = 'item_amount', data = data, ax = ax[m][n], hue = 'isSurvival')\n    ax[m][n].set_title('pointplot of Trade_{} by isSurvival '.format(feature), fontsize = 15)\nplt.xticks(rotation = 45, ha = \"right\")\nplt.tight_layout()","ceb8bfa4":"data[['survival_time', 'amount_spent','item_amount', 'item_price', 'isSurvival']].describe().round(3)","81f0fd30":"data.loc[data['server'] == 'bg'][['survival_time', 'amount_spent','item_amount', 'item_price', 'isSurvival']].describe().round(3)","625cb575":"m = [0,0,1,1,2,2]\nn = [0,1,0,1,0,1]\n\nf, ax = plt.subplots(3, 2,figsize = (18,12))\nfor m, n, feature in zip(m, n, category):\n    sns.pointplot(x = feature, y = 'item_price', data = data, ax = ax[m][n], hue = 'isSurvival')\n    ax[m][n].set_title('pointplot of Trade_{} by isSurvival'.format(feature), fontsize = 15)\nplt.xticks(rotation = 45, ha = \"right\")\nplt.tight_layout()","da9c6208":"f, ax = plt.subplots(1, 2,figsize = (16,4))\n\nsns.kdeplot(data.loc[data['isSurvival'] == 1, 'item_amount'], ax = ax[0], label = '\uc0dd\uc874')\nsns.kdeplot(data.loc[data['isSurvival'] == 0, 'item_amount'], ax = ax[0], label = '\uc774\ud0c8')\n\nsns.kdeplot(data.loc[data['isSurvival'] == 1, 'item_price'], ax = ax[1], label = '\uc0dd\uc874')\nsns.kdeplot(data.loc[data['isSurvival'] == 0, 'item_price'], ax = ax[1], label = '\uc774\ud0c8')\n\nax[0].set_title('distribution of Trade_item_amount by isSurvival', fontsize = 15)\nax[1].set_title('distribution of Trade_item_price by isSurvival', fontsize = 15)\n\nplt.xticks(rotation = 45, ha = \"right\")\nplt.tight_layout()\nplt.legend()","133a5401":"# model\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nimport lightgbm as lgb\n\n# evaluation\nfrom sklearn.metrics import mean_squared_error","0504ce24":"validation_acc = pd.read_csv('..\/input\/train_valid_user_id.csv')\nprint('validation_acc shape: ',validation_acc.shape)","82d61bb5":"data_gr = data.groupby(['acc_id'])['survival_time', 'amount_spent','item_amount', 'item_price'].mean().reset_index()","bb65a95a":"data_gr.shape","e2269572":"seed = 223","5c5b99e7":"train_idx = validation_acc[validation_acc.set=='Train'].acc_id\nvalid_idx = validation_acc[validation_acc.set=='Validation'].acc_id\n\ntrain_set = data_gr[data_gr.acc_id.isin(train_idx)]\nvalid_set = data_gr[data_gr.acc_id.isin(valid_idx)]\n\nprint('train set: ',train_set.shape)\nprint('valid set: ',valid_set.shape)","2680445f":"train_set.fillna(0, inplace = True)\nvalid_set.fillna(0, inplace = True)","a2606fe0":"def survival64(y_pred, dataset):\n    y_true = dataset.get_label()\n    y_pred = np.array([64 if x > 64 else x for x in y_pred])\n    y_pred = np.array([0 if x < 0 else x for x in y_pred])\n    y_pred = np.round(y_pred)\n    error = np.sqrt(mean_squared_error(y_true, y_pred))\n    return 'error', error, False","6c53efc9":"lr_amount = RandomForestRegressor()\nlr_amount.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1), train_set.amount_spent)\nlr_amount_pred = lr_amount.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlr_amount_pred = pd.Series(lr_amount_pred).apply(lambda x: 0 if x < 0 else x)","ee9bd439":"lr_survival = RandomForestRegressor()\nlr_survival.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n          train_set.survival_time)\nlr_survival_pred = lr_survival.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlr_survival_pred = pd.Series(lr_survival_pred).apply(lambda x: 64 if x > 64 else x)\nlr_survival_pred = lr_survival_pred.apply(lambda x: 0 if x < 0 else x).round()","d922a6e9":"lr_pred_df = pd.DataFrame({'acc_id':valid_set.acc_id.values,\n                           'survival_time':lr_survival_pred,\n                           'amount_spent':lr_amount_pred})\nprint('lr_pred_df shape: ',lr_pred_df.shape)","d946d118":"rf_params = {\n    'n_estimators':1000,\n    'max_depth':10,\n    'n_jobs':-1\n}","7725ee95":"rf_amount = RandomForestRegressor(**rf_params)\nrf_amount.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n              train_set.amount_spent)\nrf_amount_pred = rf_amount.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nrf_amount_pred = pd.Series(rf_amount_pred).apply(lambda x: 0 if x < 0 else x)","f3fce1e6":"rf_survival = RandomForestRegressor(**rf_params)\nrf_survival.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n                train_set.survival_time)\nrf_survival_pred = rf_survival.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nrf_survival_pred = pd.Series(rf_survival_pred).apply(lambda x: 64 if x > 64 else x)\nrf_survival_pred = rf_survival_pred.apply(lambda x: 0 if x < 0 else x).round()","adda6a86":"rf_pred_df = pd.DataFrame({'acc_id':valid_set.acc_id.values,\n                           'survival_time':rf_survival_pred,\n                           'amount_spent':rf_amount_pred})\nprint('rf_pred_df shape: ',rf_pred_df.shape)","7e0a2004":"lgb_params = {\n    'n_estimators':800,\n    'sees':seed\n}","098c0018":"lgb_train_amount = lgb.Dataset(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n                               train_set.amount_spent)\nlgb_train_survival = lgb.Dataset(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n                                 train_set.survival_time)","939f7e40":"lgb_amount = lgb.train(lgb_params, \n                       lgb_train_amount,\n                       feval=survival64,\n                       valid_sets=[lgb_train_amount],\n                       verbose_eval=100)\n\nlgb_amount_pred = lgb_amount.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlgb_amount_pred = pd.Series(lgb_amount_pred).apply(lambda x: 0 if x < 0 else x)","571b0602":"lgb_survival = lgb.train(lgb_params, \n                         lgb_train_survival,\n                         feval=survival64,\n                         valid_sets=[lgb_train_survival],\n                         verbose_eval=100)\n\nlgb_survival_pred = lgb_survival.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlgb_survival_pred = pd.Series(lgb_survival_pred).apply(lambda x: 64 if x > 64 else x)\nlgb_survival_pred = lgb_survival_pred.apply(lambda x: 0 if x < 0 else x).round()","13796c10":"lgb_pred_df = pd.DataFrame({'acc_id':valid_set.acc_id.values,\n                           'survival_time':lgb_survival_pred,\n                           'amount_spent':lgb_amount_pred})\nprint('lgb_pred_df shape: ',lgb_pred_df.shape)","dff3d616":"def score_function(predict, actual):\n    \n    # predict = pd.read_csv(predict_label, engine='python') # \uc608\uce21 \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\n    # actual = pd.read_csv(actual_label,engine='python') # \uc2e4\uc81c \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\n\n\n    predict.acc_id = predict.acc_id.astype('int')\n    predict = predict.sort_values(by =['acc_id'], axis = 0) # \uc608\uce21 \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c \n    predict = predict.reset_index(drop = True)\n    actual.acc_id = actual.acc_id.astype('int')\n    actual = actual.sort_values(by =['acc_id'], axis = 0) # \uc2e4\uc81c \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c\n    actual =actual.reset_index(drop=True)\n    \n    if predict.acc_id.equals(actual.acc_id) == False:\n        print('acc_id of predicted and actual label does not match')\n        sys.exit() # \uc608\uce21 \ub2f5\uc548\uc758 acc_id\uc640 \uc2e4\uc81c \ub2f5\uc548\uc758 acc_id\uac00 \ub2e4\ub978 \uacbd\uc6b0 \uc5d0\ub7ec\ucc98\ub9ac \n    else:\n            \n        S, alpha, L, sigma = 30, 0.01, 0.1, 15  \n        cost, gamma, add_rev = 0,0,0 \n        profit_result = []\n        survival_time_pred = list(predict.survival_time)\n        amount_spent_pred = list(predict.amount_spent)\n        survival_time_actual = list(actual.survival_time)\n        amount_spent_actual = list(actual.amount_spent)    \n        for i in range(len(survival_time_pred)):\n            if survival_time_pred[i] == 64 :                 \n                cost = 0\n                optimal_cost = 0\n            else:\n                cost = alpha * S * amount_spent_pred[i]                    #\ube44\uc6a9 \uacc4\uc0b0\n                optimal_cost = alpha * S * amount_spent_actual[i]          #\uc801\uc815\ube44\uc6a9 \uacc4\uc0b0 \n            \n            if optimal_cost == 0:\n                gamma = 0\n            elif cost \/ optimal_cost < L:\n                gamma = 0\n            elif cost \/ optimal_cost >= 1:\n                gamma = 1\n            else:\n                gamma = (cost)\/((1-L)*optimal_cost) - L\/(1-L)              #\ubc18\uc751\ub960 \uacc4\uc0b0\n            \n            if survival_time_pred[i] == 64 or survival_time_actual[i] == 64:\n                T_k = 0\n            else:\n                T_k = S * np.exp(-((survival_time_pred[i] - survival_time_actual[i])**2)\/(2*(sigma)**2))    #\ucd94\uac00 \uc0dd\uc874\uae30\uac04 \uacc4\uc0b0\n                \n            add_rev = T_k * amount_spent_actual[i]                         #\uc794\uc874\uac00\uce58 \uacc4\uc0b0\n    \n           \n            profit = gamma * add_rev - cost                                #\uc720\uc800\ubcc4 \uae30\ub300\uc774\uc775 \uacc4\uc0b0\n            profit_result.append(profit)\n            \n        score = sum(profit_result) \n    return score","77ff7026":"lr_valid_score = score_function(lr_pred_df, valid_set[['acc_id','survival_time','amount_spent']])\nrf_valid_score = score_function(rf_pred_df, valid_set[['acc_id','survival_time','amount_spent']])\nlgb_valid_score = score_function(lgb_pred_df, valid_set[['acc_id','survival_time','amount_spent']])\ntrue_score = score_function(valid_set[['acc_id','survival_time','amount_spent']],\n                            valid_set[['acc_id','survival_time','amount_spent']])\n\nprint('Linear Regression score: ',lr_valid_score)\nprint('Random Forest score: ',rf_valid_score)\nprint('Light GBM score: ',lgb_valid_score)\nprint('true score: ',true_score)","df951b31":"server\n- 'bd', 'ay', 'az' \uc11c\ubc84 \uc21c\uc73c\ub85c \uac70\ub798\ub7c9\uc774 \ub9ce\uc558\uace0 'bg', 'bs'\uc11c\ubc84\uac00 \uac70\ub798\ub7c9\uc774 \uc81c\uc77c \uc801\uc5c8\ub2e4.\n\nhour\n-  3\uc2dc \ubd80\ud130 8\uc2dc \uae4c\uc9c0\uc758 \uc2dc\uac04\ub300\uc5d0 \uac70\ub798\ub7c9\uc774 \uc801\uc5c8\uace0 17\uc2dc \uc774\ud6c4\ubd80\ud130 \uac70\ub798\ub7c9\uc774 \uc99d\uac00\ud558\ub294\uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.","810dc925":"## item_amount","dcbfd524":"sever\n- 'ao', 'aw', 'bg', 'ag' \uc11c\ubc84\ub294 \uc774\ud0c8 \uc720\uc800\uc758 \uc544\uc774\ud15c\uac70\ub798 \uac00\uaca9\uc774 \uc0dd\uc874 \uc720\uc800\ubcf4\ub2e4 \ub192\uc740 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.","44497ce6":"## server","98eb25fd":"## Data check","05691876":"\uc544\uc774\ud15c \uac70\ub798 \uc218\ub7c9\uc740 \ub300\ubd80\ubd84 0\uc5d0 \ubd84\ud3ec\ud574 \uc788\uc73c\uba70 \uc544\uc774\ud15c \uac70\ub798 \uc218\ub7c9\uc758 \ucd5c\ub300\uac12\uc740 92.61\uc774\ub2e4\n\nlabel \uacfc merge \ud55c \ud6c4 3.94\uc774\uc0c1\uc758 \uc544\uc774\ud15c \uac70\ub798\uc218\ub7c9\ub370\uc774\ud130 \ubd84\ud3ec \ud655\uc778","49ecf06e":"## Split data","d13d87c3":"# EDA","7a08a242":"## Modeling","cfe7307d":"item_price feature\uc5d0\ub294 \uacb0\uce21\uac12\uc774 \uc874\uc7ac\n   - adena\ub294 \ubb34\uc870\uac74 \uad50\ud658\ucc3d\uc73c\ub85c\ub9cc \uac70\ub798\uac00 \uc774\ub8e8\uc5b4\uc9c0\ub294\ub370, \uad50\ud658\ucc3d(Type = 1) \ub0b4 \uac70\ub798\uac00\uaca9\uc740 \uc54c \uc218\uac00 \uc5c6\ub2e4.","c89e1ecb":"## day","ea8feba5":"##  Trade column countplot","0af262a0":"# Data Load","ba13e0e4":"server\n- 'bd'\uc11c\ubc84\ub294 \uac70\ub798\ub7c9\uc774 \uc81c\uc77c \ub9ce\uc558\uc9c0\ub9cc item_amount(\uac70\ub798\uc544\uc774\ud15c \uc218\ub7c9), item_price(\uac70\ub798 \uac00\uaca9) \ub2e4\ub978 \uc11c\ubc84\uc5d0 \ube44\ud574 \ud720\uc52c \ub0ae\ub2e4\n- \ubc18\uba74 'bg'\uc11c\ubc84\ub294 \uac70\ub798\ub7c9\uc774 \uc81c\uc77c \uc801\uc5c8\uc9c0\ub9cc item_amount(\uac70\ub798\uc544\uc774\ud15c \uc218\ub7c9), item_price(\uac70\ub798 \uac00\uaca9) \ub2e4\ub978 \uc11c\ubc84\uc5d0 \ube44\ud574 \ud720\uc52c \ub192\ub2e4.","ff5ee0e4":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Data-Field\" data-toc-modified-id=\"Data-Field-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Data Field<\/a><\/span><\/li><li><span><a href=\"#Data-Load\" data-toc-modified-id=\"Data-Load-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Data Load<\/a><\/span><\/li><li><span><a href=\"#EDA\" data-toc-modified-id=\"EDA-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>EDA<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Missing-value\" data-toc-modified-id=\"Missing-value-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;<\/span>Missing value<\/a><\/span><\/li><li><span><a href=\"#day\" data-toc-modified-id=\"day-3.2\"><span class=\"toc-item-num\">3.2&nbsp;&nbsp;<\/span>day<\/a><\/span><\/li><li><span><a href=\"#time\" data-toc-modified-id=\"time-3.3\"><span class=\"toc-item-num\">3.3&nbsp;&nbsp;<\/span>time<\/a><\/span><\/li><li><span><a href=\"#server\" data-toc-modified-id=\"server-3.4\"><span class=\"toc-item-num\">3.4&nbsp;&nbsp;<\/span>server<\/a><\/span><\/li><li><span><a href=\"#type\" data-toc-modified-id=\"type-3.5\"><span class=\"toc-item-num\">3.5&nbsp;&nbsp;<\/span>type<\/a><\/span><\/li><li><span><a href=\"#item_type\" data-toc-modified-id=\"item_type-3.6\"><span class=\"toc-item-num\">3.6&nbsp;&nbsp;<\/span>item_type<\/a><\/span><\/li><li><span><a href=\"#item_amount\" data-toc-modified-id=\"item_amount-3.7\"><span class=\"toc-item-num\">3.7&nbsp;&nbsp;<\/span>item_amount<\/a><\/span><\/li><li><span><a href=\"#Trade-column-countplot\" data-toc-modified-id=\"Trade-column-countplot-3.8\"><span class=\"toc-item-num\">3.8&nbsp;&nbsp;<\/span>Trade column countplot<\/a><\/span><\/li><li><span><a href=\"#Trade-column-pointplot\" data-toc-modified-id=\"Trade-column-pointplot-3.9\"><span class=\"toc-item-num\">3.9&nbsp;&nbsp;<\/span>Trade column pointplot<\/a><\/span><\/li><li><span><a href=\"#id\" data-toc-modified-id=\"id-3.10\"><span class=\"toc-item-num\">3.10&nbsp;&nbsp;<\/span>id<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#trade,-label-merge\" data-toc-modified-id=\"trade,-label-merge-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>trade, label merge<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#EDA\" data-toc-modified-id=\"EDA-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;<\/span>EDA<\/a><\/span><\/li><li><span><a href=\"#corr\" data-toc-modified-id=\"corr-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;<\/span>corr<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Simple-Score\" data-toc-modified-id=\"Simple-Score-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;<\/span>Simple Score<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Preprocessiong\" data-toc-modified-id=\"Preprocessiong-5.1\"><span class=\"toc-item-num\">5.1&nbsp;&nbsp;<\/span>Preprocessiong<\/a><\/span><\/li><li><span><a href=\"#Split-data\" data-toc-modified-id=\"Split-data-5.2\"><span class=\"toc-item-num\">5.2&nbsp;&nbsp;<\/span>Split data<\/a><\/span><\/li><li><span><a href=\"#Modeling\" data-toc-modified-id=\"Modeling-5.3\"><span class=\"toc-item-num\">5.3&nbsp;&nbsp;<\/span>Modeling<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Model-1:-Linear-Regression\u00b6\" data-toc-modified-id=\"Model-1:-Linear-Regression\u00b6-5.3.1\"><span class=\"toc-item-num\">5.3.1&nbsp;&nbsp;<\/span>Model 1: Linear Regression\u00b6<\/a><\/span><\/li><li><span><a href=\"#Model-2:-Random-Forest\" data-toc-modified-id=\"Model-2:-Random-Forest-5.3.2\"><span class=\"toc-item-num\">5.3.2&nbsp;&nbsp;<\/span>Model 2: Random Forest<\/a><\/span><\/li><li><span><a href=\"#Model3:-Light-GBM\" data-toc-modified-id=\"Model3:-Light-GBM-5.3.3\"><span class=\"toc-item-num\">5.3.3&nbsp;&nbsp;<\/span>Model3: Light GBM<\/a><\/span><\/li><li><span><a href=\"#Evaluation\" data-toc-modified-id=\"Evaluation-5.3.4\"><span class=\"toc-item-num\">5.3.4&nbsp;&nbsp;<\/span>Evaluation<\/a><\/span><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/div>","6ee6f34c":"## Preprocessiong","b08d5512":"server\n- 'ap', 'aj', 'av', 'ac', 'bg', 'ag' \uc11c\ubc84\ub294 \uc774\ud0c8 \uc720\uc800\uc758 \uc544\uc774\ud15c \uac70\ub798 \uc218\ub7c9\uc774 \uc0dd\uc874 \uc720\uc800\ubcf4\ub2e4 \ub192\uc740 \uac83\uc744 \ud655\uc778\ud560\uc218\uc788\ub2e4.\n\ud2b9\ud788 'bg'\uc11c\ubc84\uac00 \ucc28\uc774\uac00 \ub9ce\uc774 \ub09c\ub2e4.\n    - 'bg' \uc11c\ubc84 \uac19\uc740 \uacbd\uc6b0 \ub2e4\ub978 dataset\uacfc merge \ud55c \ud6c4 \ub370\uc774\ud130\ub97c \ud655\uc778","d28baa77":"label (target)\n\n- acc_id : \uc720\uc800 \uc544\uc774\ub514\n- survival_time : \uc0dd\uc874 \uae30\uac04(\uc77c)\n- amount_spent : \uc77c\ubcc4 \ud3c9\uade0 \uacb0\uc81c \uae08\uc561\n\ntrade\n\n- day : \uac70\ub798 \ubc1c\uc0dd \uc77c\n- time : \uac70\ub798 \ubc1c\uc0dd \uc2dc\uac04 (00:00:00 ~ 23:59:59)\n- type : \uac70\ub798 \uad6c\ubd84 (\uad50\ud658\ucc3d = 1, \uac1c\uc778\uc0c1\uc810 = 0)\n- server : \uac70\ub798 \ubc1c\uc0dd \uc11c\ubc84\n- source_acc_id : \uc8fc\ub294\/\ud310\ub9e4 \uc720\uc800 \uc544\uc774\ub514\n- source_char_id : \uc8fc\ub294\/\ud310\ub9e4 \uce90\ub9ad\ud130 \uc544\uc774\ub514\n- target_acc_id : \ubc1b\ub294\/\uad6c\ub9e4 \uc720\uc800 \uc544\uc774\ub514\n- target_char_id : \ubc1b\ub294\/\uad6c\ub9e4 \uce90\ub9ad\ud130 \uc544\uc774\ub514\n- item_type : \uc544\uc774\ud15c \uc885\ub958 weapon(\ubb34\uae30), armor(\ubc29\uc5b4\uad6c), accessory(\uc561\uc138\uc11c\ub9ac), adena(\uc544\ub370\ub098), spell(\uc2a4\ud0ac\ubd81), enchant_scroll(\uac15\ud654\uc8fc\ubb38\uc11c), etc(\uae30\ud0c0)\n- item_amount : \uac70\ub798 \uc544\uc774\ud15c \uc218\ub7c9\n- item_price : \uac70\ub798 \uac00\uaca9 - \uad50\ud658\ucc3d \uac70\ub798 (Type=1)\uc77c \uacbd\uc6b0 NA","12b42046":"## type","ae2f9414":"## EDA","8b400841":"# trade, label merge","46d66a6b":"Custom Metric\n\n- survival time\uc758 \uacbd\uc6b0 64\uc774\uc0c1\uc778 \uac12\uc740 64\ub85c \ubcc0\ud658\ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4.\n- Boosting model\ub4e4\uc740 \ud559\uc2b5\uacfc\uc815\uc5d0 \ud3c9\uac00\uc9c0\ud45c\ub97c \uc0ac\uc6a9\ud558\uc5ec error\ub97c \ud559\uc2b5\ud558\uae30 \ub54c\ubb38\uc5d0 \ubb38\uc81c \ud574\uacb0\uc5d0 \uc801\ud569\ud55c \ud3c9\uac00\uc9c0\ud45c\ub97c \uc0ac\uc6a9\ud574\uc57c\ud55c\ub2e4.","1cd652c8":"# Data Field","eb513e63":"### Model3: Light GBM","8ea17299":"### Model 1: Linear Regression\u00b6\n","fa873d73":"## item_type","96a4e124":"# Simple Score","264bb7ac":"\uc544\uc774\ud15c \uac70\ub798\uc218\ub7c9\uc774 3.9 \uc774\ud558\uc778 \uc720\uc800\ub4e4\uc740 14.7% \uc774\ud0c8 \uc720\uc800\ub85c \ubd84\ub958 \ub418\uc5c8\ub2e4.","215ba2e1":"- Linear Regression\n- Random Forest Regression\n- Light GBM","a59707cf":"unique \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec data\uc5d0 \uc624\ub958\uac00 \uc788\ub294\uc9c0 \ud655\uc778","ac90902b":"## Missing value","2aa65619":"## id","30b2b42a":"## Trade column pointplot","caf7c4a9":"## time","c297cfcc":"### Model 2: Random Forest","5c90f7eb":"### Evaluation"}}