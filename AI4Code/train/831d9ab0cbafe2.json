{"cell_type":{"7bf98f24":"code","d68fb3c4":"code","dc715f0d":"code","2e32c5bd":"code","188cd3b4":"code","c8846440":"code","a7c34a42":"code","84055633":"code","d3259f50":"code","6f5c3064":"code","9ea0a278":"code","48769029":"code","78e35614":"code","8ba2ed4b":"markdown","935a9753":"markdown"},"source":{"7bf98f24":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d68fb3c4":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\nsns.set(style='whitegrid', palette=\"deep\", font_scale=0.7, rc={\"figure.figsize\": [16, 8]})","dc715f0d":"# declare global variables\nROOT=\"\/kaggle\/input\/m5-forecasting-accuracy\/\"","2e32c5bd":"sell_prices_df = pd.read_csv(ROOT+\"sell_prices.csv\")\ncalendar_df = pd.read_csv(ROOT+\"calendar.csv\")\nsales_train_eval_df = pd.read_csv(ROOT+\"sales_train_validation.csv\")\n\npredicted_df = pd.read_csv(\"\/kaggle\/input\/m5-final-models\/submission_LGBM.csv\")","188cd3b4":"d_cols = [c for c in sales_train_eval_df.columns if 'd_' in c]\np_cols = []\nfor i in range(1914, 1942):\n    p_cols.append('d_{}'.format(i))\n    \nstates = sales_train_eval_df['state_id'].unique()","c8846440":"sales_train_eval_df.head()","a7c34a42":"# df transform\npast_sales = sales_train_eval_df.set_index('id')[d_cols].T.merge(calendar_df.set_index('d')['date'],\n                                                                 left_index=True,right_index=True,\n                                                                 validate='1:1').set_index('date')\npast_sales.head()","84055633":"# consider only validation data and rename columns\npredicted_df = predicted_df[predicted_df['id'].str.contains(\"validation\")]\npredicted_df.columns = ['id'] + p_cols","d3259f50":"# df transform\npredicted_sales = predicted_df.set_index('id')[p_cols].T.merge(calendar_df.set_index('d')['date'],\n                                                                 left_index=True,right_index=True,\n                                                                 validate='1:1').set_index('date')\npredicted_sales.head()","6f5c3064":"xt = ['2011-10-06', '2012-06-12', '2013-02-17', '2013-10-25',  '2014-07-02', '2015-03-09', '2015-11-14']","9ea0a278":"items_col = [c for c in past_sales.columns if states[0] in c]\npast_ca = past_sales[items_col].sum(axis=1).tolist()\npast_ca\nitems_col = [c for c in predicted_sales.columns if states[0] in c]\npred_ca = predicted_sales[items_col].sum(axis=1).tolist()\npast_dates = past_sales.index.tolist()\npred_dates = predicted_sales.index.tolist()\n\nplt.plot(past_dates, past_ca, label='ground truth')\nplt.plot(pred_dates, pred_ca, label='predicted forecast')\nplt.title('Predicted Forecast for last 28 days: CA')\nplt.xticks(xt)\nplt.legend()\nplt.show()","48769029":"items_col = [c for c in past_sales.columns if states[1] in c]\npast_ca = past_sales[items_col].sum(axis=1).tolist()\npast_ca\nitems_col = [c for c in predicted_sales.columns if states[1] in c]\npred_ca = predicted_sales[items_col].sum(axis=1).tolist()\npast_dates = past_sales.index.tolist()\npred_dates = predicted_sales.index.tolist()\n\nplt.plot(past_dates, past_ca, label='ground truth')\nplt.plot(pred_dates, pred_ca, label='predicted forecast')\nplt.title('Predicted Forecast for last 28 days: TX')\nplt.xticks(xt)\nplt.legend()\nplt.show()","78e35614":"items_col = [c for c in past_sales.columns if states[2] in c]\npast_ca = past_sales[items_col].sum(axis=1).tolist()\npast_ca\nitems_col = [c for c in predicted_sales.columns if states[2] in c]\npred_ca = predicted_sales[items_col].sum(axis=1).tolist()\npast_dates = past_sales.index.tolist()\npred_dates = predicted_sales.index.tolist()\n\nplt.plot(past_dates, past_ca, label='ground truth')\nplt.plot(pred_dates, pred_ca, label='predicted forecast')\nplt.title('Predicted Forecast for last 28 days: WI')\nplt.xticks(xt)\nplt.legend()\nplt.show()","8ba2ed4b":"## Load data","935a9753":"# M5-Accuracy Challenge: Plots\n\n## Team: MLiPioneers"}}