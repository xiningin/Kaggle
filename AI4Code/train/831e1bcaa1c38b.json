{"cell_type":{"02c73a63":"code","5261574a":"code","a4e6450e":"code","1d8194bb":"code","8b58444f":"code","16d0f3de":"code","f5e5a662":"code","c470502a":"code","2c26896c":"code","03518ec1":"code","87bdefcd":"code","c0b0febd":"code","c2ae20d0":"code","7f7041f0":"code","40e109ea":"code","352d9f91":"code","0e329124":"code","cd41a461":"code","08017376":"code","47cea0e6":"code","9d3a7bd0":"code","1f5ba071":"code","e5b930df":"code","5eb3a944":"code","82fa838c":"code","7e4e30ef":"code","dfb3ab47":"code","aef852ee":"code","8daeb6cd":"code","37df743a":"code","3a874d78":"code","20bc248e":"code","458aece0":"code","198bd076":"code","4ec2c47e":"code","73506fef":"code","aac687e5":"code","5f70903c":"code","8dab714f":"code","4b3ca2c6":"code","6143eda3":"code","7abca1ea":"code","9103c0af":"code","cb06f6f5":"code","ec58391e":"code","8606fc36":"code","dfc56d5c":"code","6b3dc76b":"code","9ae4ee97":"code","50984130":"code","2adfc64f":"code","a2ff1322":"code","233a0818":"code","0bd6d14d":"code","d50d7829":"code","68cb5853":"code","89603148":"code","eb553fc1":"code","d583fbd8":"code","6e0a149b":"code","40fac39d":"code","20a7ae24":"code","0077dc61":"code","98001eb3":"code","d8e8f94e":"code","64618d02":"code","3a2b2331":"code","7a189b26":"code","4b611a28":"code","1cc711b5":"code","1ba2df49":"markdown","0e58dba5":"markdown","321caf51":"markdown","57a159b0":"markdown","cda15b9c":"markdown","82360317":"markdown","d8895923":"markdown","c07da92a":"markdown","96432548":"markdown","e43a66bd":"markdown","9d5160a6":"markdown","b7e5de7a":"markdown","cb449cd9":"markdown","cb856960":"markdown","ccdc217d":"markdown","33acfcd1":"markdown","ef46bbcc":"markdown","47011084":"markdown","779b2878":"markdown","5eceee8e":"markdown","9b58dbae":"markdown","12f0b4d7":"markdown","b690d93b":"markdown","6c3ca376":"markdown","53e48d0b":"markdown","19dc460f":"markdown","d961ea0c":"markdown","0df6a032":"markdown","809b6d7a":"markdown","b545cd03":"markdown","1e093b40":"markdown","842b14d9":"markdown","84f76833":"markdown","abe26c98":"markdown","33fdab47":"markdown","a655ce75":"markdown","279d16b7":"markdown","8bbb311f":"markdown","87c98c0d":"markdown","d57ba85d":"markdown","f2760ca4":"markdown","9dea76f6":"markdown","e664958a":"markdown","25000b87":"markdown","a4ad1f36":"markdown","61f48df8":"markdown","9e8da731":"markdown","33d7660c":"markdown","0d556411":"markdown","8e4dbe06":"markdown","0d43c998":"markdown","622a62bd":"markdown","67c2fb94":"markdown","14e112c0":"markdown","d7812e5d":"markdown","c2a07f56":"markdown","7c41f348":"markdown","bbb528db":"markdown","4b2cc367":"markdown","cab38f95":"markdown","6efdb752":"markdown","6ff4ed2a":"markdown","0c735a55":"markdown","490ce133":"markdown","39136aa8":"markdown","5be8e084":"markdown","e07291f4":"markdown","641a14b0":"markdown","39e97dc9":"markdown","229cb41e":"markdown","88f0b64b":"markdown","7e7cab5d":"markdown","c5ac0594":"markdown","cf70b531":"markdown"},"source":{"02c73a63":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","5261574a":"data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')","a4e6450e":"data.head()\ntest_data.head()","1d8194bb":"print(data.isnull().sum())\nprint(test_data.isnull().sum())","8b58444f":"f, ax = plt.subplots(1,2,figsize=(18,8))\ndata['Survived'].value_counts().plot.pie(explode=[0,0.1], autopct='%1.1f%%', ax = ax[0], shadow=True)\nax[0].set_title('Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived', data=data, ax=ax[1])\nax[1].set_title('Survived')\nplt.show()","16d0f3de":"data.groupby(['Sex', 'Survived'])['Survived'].count()","f5e5a662":"f, ax = plt.subplots(1,2, figsize=(18,8))\ndata[['Sex', 'Survived']].groupby(['Sex']).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex', hue='Survived', data=data, ax=ax[1])\nax[1].set_title('Sex:Survived vs Dead')","c470502a":"pd.crosstab(data.Pclass, data.Survived, margins=True).style.background_gradient(cmap='summer_r')","2c26896c":" f, ax = plt.subplots(1,2,figsize=(18,8))\ndata['Pclass'].value_counts().plot.bar(color=['#CD7F32', '#FFDF00', '#D3D3D3'], ax=ax[0])\nax[0].set_title('Number of Passengers By Pclass')\nax[0].set_ylabel('Count')\nsns.countplot('Pclass', hue='Survived', data=data, ax=ax[1])\nax[1].set_title('Pclass: Survived vs Dead')\nplt.show()","03518ec1":"pd.crosstab([data.Sex, data.Survived], data.Pclass, margins=True).style.background_gradient(cmap='summer_r')","87bdefcd":"sns.factorplot('Pclass', 'Survived', hue='Sex', data=data)\nplt.show()","c0b0febd":"print('Oldest Passenger was of : ',data['Age'].max(), 'Years')\nprint('Youngest Passenger was of : ',data['Age'].min(), 'Years')\nprint('Average Passenger was of : ',data['Age'].mean(), 'Years')","c2ae20d0":"f, ax = plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\", \"Age\", hue=\"Survived\", data=data, split=True, ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\", \"Age\", hue=\"Survived\", data=data, split=True, ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","7f7041f0":"data['Initial'] = 0\nfor i in data:\n    data['Initial'] = data.Name.str.extract('([A-Za-z]+)\\.')\n    \ntest_data['Initial'] = 0\nfor i in test_data:\n    test_data['Initial'] = test_data.Name.str.extract('([A-Za-z]+)\\.')","40e109ea":"pd.crosstab(data.Initial, data.Sex).T.style.background_gradient(cmap='summer_r')","352d9f91":"data['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],inplace=True)\ntest_data['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don','Dona'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr','Mr'],inplace=True)","0e329124":"data.groupby('Initial')['Age'].mean()","cd41a461":"data.loc[(data.Age.isnull())&(data.Initial=='Mr'),'Age']=33\ndata.loc[(data.Age.isnull())&(data.Initial=='Mrs'),'Age']=36\ndata.loc[(data.Age.isnull())&(data.Initial=='Master'),'Age']=5\ndata.loc[(data.Age.isnull())&(data.Initial=='Miss'),'Age']=22\ndata.loc[(data.Age.isnull())&(data.Initial=='Other'),'Age']=46\n\ntest_data.loc[(test_data.Age.isnull())&(test_data.Initial=='Mr'),'Age']=33\ntest_data.loc[(test_data.Age.isnull())&(test_data.Initial=='Mrs'),'Age']=36\ntest_data.loc[(test_data.Age.isnull())&(test_data.Initial=='Master'),'Age']=5\ntest_data.loc[(test_data.Age.isnull())&(test_data.Initial=='Miss'),'Age']=22\ntest_data.loc[(test_data.Age.isnull())&(test_data.Initial=='Other'),'Age']=46","08017376":"data.Age.isnull().any()\ntest_data.Age.isnull().any()","47cea0e6":"f,ax=plt.subplots(1,2,figsize=(20,10))\ndata[data['Survived']==0].Age.plot.hist(ax=ax[0],bins=20,edgecolor='black',color='red')\nax[0].set_title('Survived= 0')\nx1=list(range(0,85,5))\nax[0].set_xticks(x1)\ndata[data['Survived']==1].Age.plot.hist(ax=ax[1],color='green',bins=20,edgecolor='black')\nax[1].set_title('Survived= 1')\nx2=list(range(0,85,5))\nax[1].set_xticks(x2)\nplt.show()","9d3a7bd0":"sns.factorplot('Pclass','Survived',col='Initial',data=data)\nplt.show()","1f5ba071":"pd.crosstab([data.Embarked,data.Pclass],[data.Sex,data.Survived],margins=True).style.background_gradient(cmap='summer_r')","e5b930df":"sns.factorplot('Embarked','Survived',data=data)\nplt.show()","5eb3a944":"f,ax=plt.subplots(2,2,figsize=(20,15))\nsns.countplot('Embarked',data=data,ax=ax[0,0])\nax[0,0].set_title('No. Of Passengers Boarded')\nsns.countplot('Embarked',hue='Sex',data=data,ax=ax[0,1])\nax[0,1].set_title('Male-Female Split for Embarked')\nsns.countplot('Embarked',hue='Survived',data=data,ax=ax[1,0])\nax[1,0].set_title('Embarked vs Survived')\nsns.countplot('Embarked',hue='Pclass',data=data,ax=ax[1,1])\nax[1,1].set_title('Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2,hspace=0.5)\nplt.show()","82fa838c":"sns.factorplot('Pclass','Survived', hue='Sex', col='Embarked', data=data)\nplt.show()","7e4e30ef":"data['Embarked'].fillna('S', inplace=True)\ntest_data['Embarked'].fillna('S', inplace=True)","dfb3ab47":"data.Embarked.isnull().any()\ntest_data.Embarked.isnull().any()","aef852ee":"pd.crosstab([data.SibSp], data.Survived).style.background_gradient(cmap='summer_r')","8daeb6cd":"f, ax = plt.subplots(1,2,figsize=(20,8))\nsns.barplot('SibSp', 'Survived', data=data, ax=ax[0])\nax[0].set_title('SibSp vs Survived')\nsns.factorplot('SibSp', 'Survived', data=data, ax=ax[1])\nax[1].set_title('SibSp vs Survived')\nplt.close(2)\nplt.show()","37df743a":"pd.crosstab(data.SibSp, data.Pclass).style.background_gradient(cmap='summer_r')","3a874d78":"pd.crosstab(data.Parch, data.Pclass).style.background_gradient(cmap='summer_r')","20bc248e":"f, ax = plt.subplots(1,2,figsize=(20, 8))\nsns.barplot('Parch', 'Survived', data=data, ax=ax[0])\nax[0].set_title('Parch vs Survived')\nsns.factorplot('Parch', 'Survived', data=data, ax=ax[1])\nax[1].set_title('Parch vs Survived')\nplt.close(2)\nplt.show()","458aece0":"print('Highest Fare was:', data['Fare'].max())\nprint('Lowest Fare was:', data['Fare'].min())\nprint('Average Fare was:', data['Fare'].mean())","198bd076":"f, ax = plt.subplots(1,3, figsize=(20,8))\nsns.distplot(data[data['Pclass'] ==1].Fare, ax=ax[0])\nax[0].set_title('Fares in Pclass 1')\nsns.distplot(data[data['Pclass']==2].Fare, ax=ax[1])\nax[1].set_title('Fares in Pclass 2')\nsns.distplot(data[data['Pclass']==3].Fare, ax=ax[2])\nax[2].set_title('Fares in Pclass 3')\nax[0].set_xticks(range(0, 550, 50))\nax[1].set_xticks(range(0, 550, 50))\nax[2].set_xticks(range(0, 550, 50))\nplt.show()","4ec2c47e":"sns.heatmap(data.corr(), annot=True, cmap='RdYlGn', linewidths=0.2)\nplt.show()","73506fef":"data['Age_band'] = 0\ndata.loc[data['Age']<=16, 'Age_band'] = 0\ndata.loc[(data['Age']>16) & (data['Age']<=32), 'Age_band'] = 1\ndata.loc[(data['Age']>32) & (data['Age']<=48), 'Age_band'] = 2\ndata.loc[(data['Age']>48) & (data['Age']<=64), 'Age_band'] = 3\ndata.loc[data['Age']>64, 'Age_band'] = 4\ndata.head(2)\n\ntest_data['Age_band'] = 0\ntest_data.loc[test_data['Age']<=16, 'Age_band'] = 0\ntest_data.loc[(test_data['Age']>16) & (test_data['Age']<=32), 'Age_band'] = 1\ntest_data.loc[(test_data['Age']>32) & (test_data['Age']<=48), 'Age_band'] = 2\ntest_data.loc[(test_data['Age']>48) & (test_data['Age']<=64), 'Age_band'] = 3\ntest_data.loc[test_data['Age']>64, 'Age_band'] = 4\ntest_data.head(2)","aac687e5":"data['Age_band'].value_counts().to_frame().style.background_gradient(cmap='summer_r')\ntest_data['Age_band'].value_counts().to_frame().style.background_gradient(cmap='summer_r')","5f70903c":"sns.factorplot('Age_band','Survived', data=data, col='Pclass')\nplt.show()","8dab714f":"data['Family_Size']=0\ndata['Family_Size']=data['Parch']+data['SibSp']#family size\ndata['Alone']=0\ndata.loc[data.Family_Size==0,'Alone']=1#Alone\n\ntest_data['Family_Size']=0\ntest_data['Family_Size']=test_data['Parch']+test_data['SibSp']#family size\ntest_data['Alone']=0\ntest_data.loc[test_data.Family_Size==0,'Alone']=1#Alone\n\nf,ax=plt.subplots(1,2,figsize=(18,6))\nsns.factorplot('Family_Size','Survived',data=data,ax=ax[0])\nax[0].set_title('Family_Size vs Survived')\nsns.factorplot('Alone','Survived',data=data,ax=ax[1])\nax[1].set_title('Alone vs Survived')\nplt.close(2)\nplt.close(3)\nplt.show()","4b3ca2c6":"sns.factorplot('Alone', 'Survived', data=data, hue='Sex', col='Pclass')\nplt.show()","6143eda3":"data['Fare_Range'] = pd.qcut(data['Fare'], 4)\ntest_data['Fare_Range'] = pd.qcut(test_data['Fare'], 4)\ndata.groupby('Fare_Range')['Survived'].mean().to_frame().style.background_gradient(cmap='summer_r')","7abca1ea":"data['Fare_cat']=0\ndata.loc[data['Fare']<=7.91,'Fare_cat']=0\ndata.loc[(data['Fare']>7.91)&(data['Fare']<=14.454),'Fare_cat']=1\ndata.loc[(data['Fare']>14.454)&(data['Fare']<=31),'Fare_cat']=2\ndata.loc[(data['Fare']>31)&(data['Fare']<=513),'Fare_cat']=3\n\ntest_data['Fare_cat']=0\ntest_data.loc[test_data['Fare']<=7.91,'Fare_cat']=0\ntest_data.loc[(test_data['Fare']>7.91)&(test_data['Fare']<=14.454),'Fare_cat']=1\ntest_data.loc[(test_data['Fare']>14.454)&(test_data['Fare']<=31),'Fare_cat']=2\ntest_data.loc[(test_data['Fare']>31)&(test_data['Fare']<=513),'Fare_cat']=3","9103c0af":"sns.factorplot('Fare_cat', 'Survived', data=data, hue='Sex')\nplt.show()","cb06f6f5":"data['Sex'].replace(['male','female'],[0,1],inplace=True)\ndata['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)\ndata['Initial'].replace(['Mr','Mrs','Miss','Master','Other'],[0,1,2,3,4],inplace=True)\n\ntest_data['Sex'].replace(['male','female'],[0,1],inplace=True)\ntest_data['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)\ntest_data['Initial'].replace(['Mr','Mrs','Miss','Master','Other'],[0,1,2,3,4],inplace=True)","ec58391e":"data.drop(['Name','Age','Ticket','Fare','Cabin', 'Fare_Range', 'PassengerId'], axis=1, inplace=True)\ntest_data.drop(['Name','Age','Ticket','Fare','Cabin', 'Fare_Range'], axis=1, inplace=True)\nsns.heatmap(data.corr(), annot=True, cmap='RdYlGn', linewidths=0.2, annot_kws={'size':20})\nfig=plt.gcf()\nfig.set_size_inches(18,15)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","8606fc36":"#importing all the required ML packages\nfrom sklearn.linear_model import LogisticRegression #logistic regression\nfrom sklearn import svm #support vector Machine\nfrom sklearn.ensemble import RandomForestClassifier #Random Forest\nfrom sklearn.neighbors import KNeighborsClassifier #KNN\nfrom sklearn.naive_bayes import GaussianNB #Naive bayes\nfrom sklearn.tree import DecisionTreeClassifier #Decision Tree\nfrom sklearn.model_selection import train_test_split #training and testing data split\nfrom sklearn import metrics #accuracy measure\nfrom sklearn.metrics import confusion_matrix #for confusion matrix","dfc56d5c":"train, test = train_test_split(data, test_size=0.3, random_state=0, stratify=data['Survived'])\ntrain_X = train[train.columns[1:]]\ntrain_Y = train[train.columns[:1]]\ntest_X = test[test.columns[1:]]\ntest_Y = test[test.columns[:1]]\nX = data[data.columns[1:]]\nY = data['Survived']","6b3dc76b":"model = svm.SVC(kernel='rbf', C=1, gamma=0.1)\nmodel.fit(train_X, train_Y)\nprediction1 = model.predict(test_X)\nprint('Accuracy for rbf SVM is ', metrics.accuracy_score(prediction1, test_Y))","9ae4ee97":"model=svm.SVC(kernel='linear',C=0.1,gamma=0.1)\nmodel.fit(train_X,train_Y)\nprediction2=model.predict(test_X)\nprint('Accuracy for linear SVM is',metrics.accuracy_score(prediction2,test_Y))","50984130":"model = LogisticRegression()\nmodel.fit(train_X, train_Y)\nprediction3 = model.predict(test_X)\nprint('The accuracy of the Logistic Regression is', metrics.accuracy_score(prediction3, test_Y))","2adfc64f":"model = DecisionTreeClassifier()\nmodel.fit(train_X, train_Y)\nprediction4 = model.predict(test_X)\nprint('The accuracy of the Decision Tree is', metrics.accuracy_score(prediction4, test_Y))","a2ff1322":"model = KNeighborsClassifier()\nmodel.fit(train_X, train_Y)\nprediction5 = model.predict(test_X)\nprint('The accuracy of the KNN is', metrics.accuracy_score(prediction5, test_Y))","233a0818":"a_index = list(range(1,11))\na = pd.Series()\nx = [0,1,2,3,4,5,6,7,8,9,10]\nfor i in list(range(1,11)):\n    model = KNeighborsClassifier(n_neighbors=i)\n    model.fit(train_X, train_Y)\n    prediction = model.predict(test_X)\n    a = a.append(pd.Series(metrics.accuracy_score(prediction, test_Y)))\n\nplt.plot(a_index, a)\nplt.xticks(x)\nplt.show()\n\nprint('Accuracies for different values of n are : ', a.values, 'with the max value as ', a.values.max())","0bd6d14d":"model = GaussianNB()\nmodel.fit(train_X, train_Y)\nprediction6 = model.predict(test_X)\nprint('The accuracy of the NaiveBayes is ', metrics.accuracy_score(prediction6, test_Y))","d50d7829":"model=RandomForestClassifier(n_estimators=100)\nmodel.fit(train_X,train_Y)\nprediction7=model.predict(test_X)\nprint('The accuracy of the Random Forests is',metrics.accuracy_score(prediction7,test_Y))","68cb5853":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\n\nkfold = KFold(n_splits=10, random_state=22)\nxyz = []\naccuracy = []\nstd = []\nclassifiers = ['Linear Svm', 'Radial Svm', 'Logistic Regression', 'KNN', 'Decision Tree', 'Naive Bayes', 'Random Forest']\n\nmodels = [svm.SVC(kernel='linear'), svm.SVC(kernel='rbf'), LogisticRegression(), KNeighborsClassifier(n_neighbors=9), DecisionTreeClassifier(), GaussianNB(), RandomForestClassifier(n_estimators=100)]\n\nfor i in models:\n    model = i\n    cv_result = cross_val_score(model, X, Y, cv = kfold, scoring = \"accuracy\")\n    xyz.append(cv_result.mean())\n    std.append(cv_result.std())\n    accuracy.append(cv_result)\n\nnew_models_dataframe2 = pd.DataFrame({'CV Mean':xyz, 'Std':std}, index=classifiers)\nnew_models_dataframe2","89603148":"plt.subplots(figsize=(12,6))\nbox = pd.DataFrame(accuracy, index=[classifiers])\nbox.T.boxplot()","eb553fc1":"new_models_dataframe2['CV Mean'].plot.barh(width=0.8)\nplt.title('Average CV Mean Accuracy')\nfig=plt.gcf()\nfig.set_size_inches(8,5)\nplt.show()","d583fbd8":"f,ax=plt.subplots(3,3,figsize=(12,10))\ny_pred = cross_val_predict(svm.SVC(kernel='rbf'),X,Y,cv=10)\nsns.heatmap(confusion_matrix(Y,y_pred),ax=ax[0,0],annot=True,fmt='2.0f')\nax[0,0].set_title('Matrix for rbf-SVM')\ny_pred = cross_val_predict(svm.SVC(kernel='linear'),X,Y,cv=10)\nsns.heatmap(confusion_matrix(Y,y_pred),ax=ax[0,1],annot=True,fmt='2.0f')\nax[0,1].set_title('Matrix for Linear-SVM')\ny_pred = cross_val_predict(KNeighborsClassifier(n_neighbors=9),X,Y,cv=10)\nsns.heatmap(confusion_matrix(Y,y_pred),ax=ax[0,2],annot=True,fmt='2.0f')\nax[0,2].set_title('Matrix for KNN')\ny_pred = cross_val_predict(RandomForestClassifier(n_estimators=100),X,Y,cv=10)\nsns.heatmap(confusion_matrix(Y,y_pred),ax=ax[1,0],annot=True,fmt='2.0f')\nax[1,0].set_title('Matrix for Random-Forests')\ny_pred = cross_val_predict(LogisticRegression(),X,Y,cv=10)\nsns.heatmap(confusion_matrix(Y,y_pred),ax=ax[1,1],annot=True,fmt='2.0f')\nax[1,1].set_title('Matrix for Logistic Regression')\ny_pred = cross_val_predict(DecisionTreeClassifier(),X,Y,cv=10)\nsns.heatmap(confusion_matrix(Y,y_pred),ax=ax[1,2],annot=True,fmt='2.0f')\nax[1,2].set_title('Matrix for Decision Tree')\ny_pred = cross_val_predict(GaussianNB(),X,Y,cv=10)\nsns.heatmap(confusion_matrix(Y,y_pred),ax=ax[2,0],annot=True,fmt='2.0f')\nax[2,0].set_title('Matrix for Naive Bayes')\nplt.subplots_adjust(hspace=0.2,wspace=0.2)\nplt.show()","6e0a149b":"from sklearn.model_selection import GridSearchCV\n\nC = [0.05, 0.1, 0.2, 0.3, 0.25, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]\ngamma = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nkernel = ['rbf', 'linear']\nhyper = {'kernel': kernel, 'C': C, 'gamma': gamma}\ngd = GridSearchCV(estimator=svm.SVC(), param_grid=hyper, verbose=True)\ngd.fit(X,Y)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","40fac39d":"n_estimators = range(100, 1000, 100)\nhyper = {'n_estimators': n_estimators}\ngd = GridSearchCV(estimator = RandomForestClassifier(random_state=0), param_grid=hyper, verbose=True)\ngd.fit(X, Y)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","20a7ae24":"from sklearn.ensemble import VotingClassifier\nensemble_lin_rbf = VotingClassifier(estimators=[\n    ('KNN', KNeighborsClassifier(n_neighbors=10)), \n    ('RBF', svm.SVC(probability=True, kernel='rbf', C=0.5, gamma=0.1)), \n    ('RFor', RandomForestClassifier(n_estimators=500, random_state=0)), \n    ('LR',LogisticRegression(C=0.05)), \n    ('DT',DecisionTreeClassifier(random_state=0)), \n    ('NB', GaussianNB()), \n    ('svm', svm.SVC(kernel='linear', probability=True))\n], voting='soft').fit(train_X, train_Y)\nprint('The accracy for ensembled model is : ', ensemble_lin_rbf.score(test_X, test_Y))\ncross = cross_val_score(ensemble_lin_rbf, X, Y, cv = 10, scoring = 'accuracy')\nprint('The cross validated score is', cross.mean())","0077dc61":"from sklearn.ensemble import BaggingClassifier\nmodel = BaggingClassifier(base_estimator=KNeighborsClassifier(n_neighbors=3), random_state=0, n_estimators=700)\nmodel.fit(train_X, train_Y)\nprediction = model.predict(test_X)\nprint('The accuracy for bagged KNN is : ', metrics.accuracy_score(prediction, test_Y))\nresult = cross_val_score(model, X, Y, cv = 10, scoring='accuracy')\nprint('The cross validated score for bagged KNN is : ', result.mean())","98001eb3":"from sklearn.ensemble import AdaBoostClassifier\nada = AdaBoostClassifier(n_estimators=200, random_state=0, learning_rate=0.1)\nresult = cross_val_score(ada, X, Y, cv = 10, scoring='accuracy')\nprint('The cross validated score for AdaBoost is : ', result.mean())","d8e8f94e":"from sklearn.ensemble import GradientBoostingClassifier\ngrad = GradientBoostingClassifier(n_estimators=500, random_state=0, learning_rate=0.1)\nresult = cross_val_score(grad,X, Y, cv = 10, scoring='accuracy')\nprint('The cross validated score for Gradient Boosting is : ', result.mean())","64618d02":"import xgboost as xg\nxgboost = xg.XGBClassifier(n_estimators=900, learning_rate=0.1)\nresult = cross_val_score(xgboost, X, Y, cv=10, scoring='accuracy')\nprint('The cross validated score for XGBoost is : ', result.mean())","3a2b2331":"n_estimators = list(range(100, 1100, 100))\nlearn_rate = [0.05, 0.1, 0.2, 0.3, 0.25, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]\nhyper = {'n_estimators' : n_estimators, 'learning_rate' : learn_rate}\ngd = GridSearchCV(estimator=AdaBoostClassifier(), param_grid=hyper, verbose=True)\ngd.fit(X,Y)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","7a189b26":"ada = AdaBoostClassifier(n_estimators=200, random_state=0, learning_rate=0.05)\nresult = cross_val_predict(ada, X, Y, cv=10)\nsns.heatmap(confusion_matrix(Y, result), cmap='winter', annot=True, fmt='2.0f')\nplt.show()","4b611a28":"f,ax=plt.subplots(2,2,figsize=(15,12))\nmodel=RandomForestClassifier(n_estimators=500,random_state=0)\nmodel.fit(X,Y)\npd.Series(model.feature_importances_,X.columns).sort_values(ascending=True).plot.barh(width=0.8,ax=ax[0,0])\nax[0,0].set_title('Feature Importance in Random Forests')\nmodel=AdaBoostClassifier(n_estimators=200,learning_rate=0.05,random_state=0)\nmodel.fit(X,Y)\npd.Series(model.feature_importances_,X.columns).sort_values(ascending=True).plot.barh(width=0.8,ax=ax[0,1],color='#ddff11')\nax[0,1].set_title('Feature Importance in AdaBoost')\nmodel=GradientBoostingClassifier(n_estimators=500,learning_rate=0.1,random_state=0)\nmodel.fit(X,Y)\npd.Series(model.feature_importances_,X.columns).sort_values(ascending=True).plot.barh(width=0.8,ax=ax[1,0],cmap='RdYlGn_r')\nax[1,0].set_title('Feature Importance in Gradient Boosting')\nmodel=xg.XGBClassifier(n_estimators=900,learning_rate=0.1)\nmodel.fit(X,Y)\npd.Series(model.feature_importances_,X.columns).sort_values(ascending=True).plot.barh(width=0.8,ax=ax[1,1],color='#FD0F00')\nax[1,1].set_title('Feature Importance in XgBoost')\nplt.show()","1cc711b5":"model=AdaBoostClassifier(n_estimators=200,learning_rate=0.05,random_state=0)\nmodel.fit(X,Y)\nprediction = test_data\nprediction['Survived'] = model.predict(test_data.drop(['PassengerId'], axis=1))\npd.DataFrame(prediction[['PassengerId', 'Survived']]).to_csv('submission.csv', index=False)","1ba2df49":"# Part3 : Predictive Modeling\n\nWe have gained some insights from the EDA part. But with that, we cannot accurately predict or tell whether a passenger will survive or die. So now we will predict the whether the Passenger will survive or not using some great Classification Algorithms. Following are the algorithms I will use to make the model:\n\n1) Logistic Regression\n\n2) Support Vector Machines\n\n3) Random Forest\n\n4) K-Nearest Neighbours\n\n5) Naive Bayes\n\n6) Decision Tree","0e58dba5":"### Gaussian Naive Bayes","321caf51":"#### Filling Embarked NaN\nAs we saw that maximum passengers boarded from Port S, we replace NaN with S.","57a159b0":"## How many survived??","cda15b9c":"### Fare -->  Continous Feature","82360317":"Only 38.4% of passwengers survived the accident.","d8895923":"## Converting String Values into Numeric\n\nSince we cannot pass strings to a machine learning model, we need to convert features loke Sex, Embarked, etc into numeric values.","c07da92a":"Women's survival rate is bigger than men's.\nThis looks to be a very important feature for modeling.","96432548":"There isn't any special correlation.","e43a66bd":"## Age_band\n\n**Problem With Age Feature**\n\nAs I have mentioned earlier that Age is a continous feature, there is a problem with Continous Varaibles in Machine Learning Models. \n\n**Eg**: If I say to group or arrange Sports Person by **Sex**, We can easily segregate them by Male and Female.\n\nNow if I say to group them by their **Age**, then how would you do it? If there are 30 Persons, there may be 30 ages values. Now this is problematic.\n\nWe need to convert these continous values into categorical values by either Binning or Normalization. I will be using binning i.e. group a range of ages into a single bin or assign them a single value.\n\nOkay so the maximum age of a passenger was 80. So lets divide the range from 0-80 into 5 bins. So 80\/5=16. So bins of size 16.","9d5160a6":"The Women and Child first policy thus holds true irrespective of the class.","b7e5de7a":"**Observation**  \n1) Some of the common important features are Initial, Fare_cat, Pclass, Family_Size.\n\n2) The Sex feature doesn't seem to give any importance, which is shocking as we had seen earlier that Sex combined with Pclass was giving a very good differentiating factor. Sex looks to be important only in RandomForests.\n\nHowever, we can see the feature Initial, which is at the top in many classifiers. We had already seen the positive correlation between Sex and Initial, so they both refer to the gender.\n\n3) Similarly, the Pclass and Fare_cat refer to the status of the passengers and Family_Size with Alone, Parch and SibSp.","cb449cd9":"There looks to be a large distribution in the fares of Passengers in Pclass1 and this distribution goes on decreasing as the standards reduces. As this is also continous, we can convert into discrete values by using [binning](https:\/\/en.wikipedia.org\/wiki\/Data_binning).","cb856960":"#### Hyper-Parameter Tuning for AdaBoost","ccdc217d":"We can clearly see that Passengers Of Pclass 1 were given a very hight priority while rescue. Even though the number of Passengers in Pclass 3 were a lot higher, still the number of survival from them is very low, somewhere around 25%.\n\nLet's check survival rate with Sex and Pclass Together.","33acfcd1":"The **Age, Cabin and Embarked** have null values.","ef46bbcc":"### Voting Classifier\nIt is the simplest way of combining predictions from many different simple machine learning models. It gives an average prediction result based on the prediction of all the submodels. THe submodels or the base models are all of different types.","47011084":"We got the highest accuracy for AdaBoost. We will try to increase it with Hyper-Parameter Tuning.","779b2878":"# Part1 : Exploratory Data Analysis(EDA)\n","5eceee8e":"### Decision Tree","9b58dbae":"### Observations in a Nutshell for all features\n\n**Sex** : The chance of survival for women is hight as compared to men.  \n**Pclass** : There is a visible trend that being a **1st class passenger** gives you better chances of survival. The survival rate for Pclass3 is very low. FOr women, the chance of survival from Pclass1 is almost 1 and is high too for those from Pclass2.  \n**Age** : Children less than 5-10 years do have a high chance of survival. Passengers between age group 15 to 35 died a lot.\n**Embarked** : This is a very interesting feature. The chances of survival at C looks to be better that even though the majority of Pclass1 passengers got up at S. Passengers at Q were all from Pclass3.  \n**Parch+SibSp** : Having 1-2 siblings, spouse on board 1-3 Parents shows a greater chance of probability rather than being alone or having a large family travelling with you.","12f0b4d7":"#### Random Forests","b690d93b":"The best score for rbf-SVM is 82.82% with C=0.05 and gamma=0.1. For RandomForest, score is abt 81.8% with n_estimators=900.","6c3ca376":"As discussed above, we can clearly see that as the **fare_range increases, the chances of survival increases.**\n\nNow we cannot pass the Fare_Range values as it is. We should convert it into singleton values same as we did in **Age_band**.","53e48d0b":"### Correlation between The Features","19dc460f":"## Types of Features\n### Categorical Features\nA categorical variable is one that has two or more categories and each value in that features can be categorised by them. For example, gender is a categorical variable having two categories. Now we cannot sort or give any ordering to such variables. They are also known as Nominal Variables.\n\n** Categorical Features in the dataset : Sex, Embarked **\n\n### Ordinal Features\nAn ordinal variable is similar to categorical values, but the difference between them is that we can have relative ordering or sorting between the values. For eg: If we have a feature like Height with values Tall, Medium, Short, then Height is a ordinal variable. Here we can have a relative sort in the variable.\n\n** Ordinal Features in the dataset : PClass **\n\n### Continous Feature\nA feature is said to be continous if it can take values between any two points or between the minimum or maximum values in the features column.\n\n** Continous Features in the dataset : Age **","d961ea0c":"#### SVM","0df6a032":"### K-Nearest Neighbours(KNN)","809b6d7a":"** Observation **\n\n1) The survival chances are almost 1 for women for Pclass1 and Pclass2 irrespective of the Pclass.\n\n2) Port S looks to be very unlucky for Pclass3 Passengers as the survival rate for both men and women is very low.\n\n3) Port Q looks to be unlukist for Men, as almost all were from Pclass 3.","b545cd03":"** Observation **\n\nHere too the results are quite similar. Passengers with their parents onboard have greater chance of survival. It howeverreduces as the number goes up.\n\nThe chances of survival is good for somebody who has 1-3 parents on the ship. Being alone also proves to be fatal and the chances for survival decreases when somebody has >4 parents on the ship.","1e093b40":"#### AdaBoost(Adaptive Boosting)\nThe weak learner or estimator in this case is a Decision Tree. But we can change the default base_estimator to nay algorithm of our choice.","842b14d9":"We use FactorPlot in this case, because they make the sepeartion of categorical values easy.\n\nLooking at the CrossTab and the FactorPlot, we can easily infer that survival for Women from Pclasss1 is about 95~96%, as only 3 out of 94 Women from Pclass1 died.\n\nIt is evident that irrespective of Pclass. Women were given first priority while rescue. Even men from Pclass1 have a very low survival rate.\n\nLooks like Pclass is also an important feature.","84f76833":"#### Bagged KNN\nBagging works best with models with high variance. An example for this can be Decision Tree or Random Forests. We can use KNN with small value of n_neighbors, as small value of n_neighbors.","abe26c98":"#### Filling NaN Ages","33fdab47":"**Observations**\n1) The number of children increases with Pclass and the survival rate for passengers below Age 10 looks to be good irrespective of the Pclass.\n2) Survival chances for Passengers 20-50 from Pcalss 1 is high and is even better for women.\n3) For males, the survival chances decrease with an increase in age.","a655ce75":"## Ensembling\nEnsembling is a good way to increase the accuracy or performance of a model. In simple words, it is the combination of various simple models to create a single powerful model.\n\nLet's say we want to buy a phone and ask many people about it based on various parameters. So then we can make a strong judgement about a single product after analysing all different parameters. This is **Ensembling**, which improves the stability of the model. Ensembling can be done in ways like:\n\n1) Voting Classifier\n\n2) Bagging\n\n3) Boosting","279d16b7":"The highest correlation is between SibSp and Parch i.e 0.41. So we can carry on with all features.","8bbb311f":"#### Parch","87c98c0d":"### Pclass --> Ordinal Feature","d57ba85d":"** Observations **\n\n1)The Toddlers(age<5) were saved in large numbers(The Women and Child First Policy).\n\n2)The oldest Passenger was saved(80 years).\n\n3)Maximum number of deaths were in the age group of 30-40.","f2760ca4":"### SibSip --> Discrete Feature\n\nThis feature represents whether a person is alone or with his family members.\n\nSibling = brother, sister, stepbrother, stepsister  \nSpouse = husband, wife","9dea76f6":"#### Chances for Survival by Port Of Embarkation","e664958a":"### Age --> Continous Feature","25000b87":"## Family_Size and Alone\n\nAt this point, we can create a new feature called \"Family_size\" and \"Alone\" and analyse it. This feature is the summation of Parch and SibSp. It gives us a combined data so that we can check if survival rate have anything to do with family size of the passengers. Alone will denote whether a passenger is alone or not.","a4ad1f36":"### Logistic Regression","61f48df8":"### Confusion Matrix","9e8da731":"We can see the important features for various classifiers like RandomForests, AdaBoost, etc.","33d7660c":"** Observation ** \n\n1) Maximum passengers boarded from S. Majority of them being from Pclass3.\n\n2) The Passengers from C look to be lucky as a good proportion of them survived. The reason for this maybe the rescue of all the Pclass1 and Pclass2 Passengers.\n\n3) The Embark S looks to the port from where majority of the rich people boarded. Still the chances for survival is low here, that is because many passengers from Pclass3 around 81% didn't survive.\n\n4) Port Q had almost 95% of the passengers where from Pclass3.","0d556411":"### Boosting\nBoosting is an ensembling technique which uses sequential learning of classifiers. It is a step by step enhancement of a weak model. Boosting works as follows:\n\nA model is first trained on the complete dataset. Now the model will get some instances right while some wrong. Now in the next iteration, the learner will focus more on the wrongly predicted instances or give more weight to it. Thus it will try to predict the wrong instance correctly. Now this iterative process continous, and new classifiers are added to the model until the limit is reached on the accuracy.","8e4dbe06":"# Part2 : Feature Engineering and Data Cleaning\n\nNow what is FEature Engineering?\n\nWhenever we are given a dataset with features, it is not necessary that all the features will be important. There maybe be many redundant features which should be eliminated. Also we can get or add new features by observing or extracting information from other features.\n\nAn example would be getting the Initials feature using the Name Feature. Lets see if we can get any new features and eliminate a few. Also we will transform the existing relevant features to suitable form for Predictive Modeling.","0d43c998":"The maximum accuracy we can get with AdaBoost is 83.16% with n_estimators=200 and learning_rate=0.05","622a62bd":"We can check that there isn't any null values.","67c2fb94":"It is visible that being alone is harmful irrespective of Sex or Pclass except for Pclass3 where the chances of females who are alone is high than those with family.","14e112c0":"Let's check the accuracies over various values of n_neighbors.","d7812e5d":"### Bagging\nBaggine is a general ensemble method. It works by applying similar classifiers on small partitions of the dataset and then taking the average of all the predictions. Due to the averaging, there is reduction in variance. Unlike Voting Classifier, Bagging makes use of similar classifiers.","c2a07f56":"## Fare_Range\n\nSince fare is also a continous feature, we need to convert it into ordinal value. For this we will use **pandas.qcut**. \n\nSo what **qcut** does is it splits or arranges the values according the number of bins we have passed. So if we pass for 5 bins, it will arrange the values equally spaced into 5 seperate bins or value ranges.","7c41f348":"#### XGBoost","bbb528db":"** observation **\n\nThe barplot and factorplot shows that if a passenger is alone onboard with no siblings, he have 34.5% survival rate. The graph roughly decreases if the number of siblings increase. This makes sense. That is , if I have a family on board, I will try to save them instead of saving myself first. Surprisingly the survival for families with 5-8 members is 0%. The reason may be Pclass?\n\nThe reason is ** Pclass**. The crsstab shows that Person with SibSp > 3 were all in Pclass3. It is imminent that all the large familes in Pclass3 died.","4b2cc367":"## Feature Importance","cab38f95":"### Dropping UnNeeded Features\n\n**Name** -> We don't need name feature as it cannot be converted into any categorical value.\n\n**Age** -> We have the Age_band feature, so no need of this.\n\n**Ticket** -> It is any random string that cannot be categorised.\n\n**Fare** -> We have the Fare_cat feature, so unneeded.\n\n**Cabin** -> A lot of NaN values and also many passengers have multiple cabins. So this is a useless feature.\n\n**Fare_Range** -> We have the feare_cat feature.\n\n**PassengerID** -> Cannot be categorised.","6efdb752":"I copied [this kernel](https:\/\/www.kaggle.com\/ash316\/eda-to-prediction-dietanic).\n\n# Contents of the Notebook\n* Part 1 : Exploratory Data Analysis(EDA)\n    * Analysis of the features.\n    * Finding any relations or trends considering multiple features.\n* Part 2 : Feature Engineering and Data cleaning\n    * Adding any few features.\n    * Removing redundant features.\n    * Converting features into suitable form for modeling.\n* Part 3 : Predictive Modeling\n    * Running Basic Algorithms.\n    * Cross Validation.\n    * Ensembling.\n    * Important Features Extraction.","6ff4ed2a":"The survival rate decreases as the age increases irrespective of the Pclass.","0c735a55":"### Embarked -->  Categorical Value","490ce133":"#### Stochastic Gradient Boosting\nHere too the weak learner is a Decision Tree.","39136aa8":"The classification accuracy can be sometimes misleading due to imbalance. We can get a summarized result with the help of confusion matrix, which shows where did the model go wrong, or which class did the model predict wrong.","5be8e084":"Clearly, as the Fare_cat increases, the survival chances increases. This feature may become an important feature during modeling along with the Sex.","e07291f4":"### Linear Support Vector Machines(linear-SVM)","641a14b0":"### Hyper-Parameters Tuning\n\nThe machine learning models are like a Black-Box. There are some default parameter values for this Black-Box, which we can tune or change to get a better model. Like the C and gamma in the SVM model and similarly different parameters for different classifiers, are called the hyper-parameters, which we can tune to change ther learning reate of the algorithm and get a better model. THis is known as Hyper-Parameter Tuning.\n\nWe will tune the hyper-parameters for the 2 best classifiers i.e. the SVM and RandomForests.","39e97dc9":"## Basic Model Algorithms\n### Radial Support Vector Machines(rbf-SVM)","229cb41e":"### Confusion Matrix for the Best Model","88f0b64b":"We need to replace Nan values in Age features. We can assign them the mean age of the dataset. But the problem is, there were many people with many different ages. \n\nWe can check the Name feature. Looking upon the feature, we can see that the names have a saluation like Mr or Mrs. Thus we can assign the mean values of Mr and Mrs to the respective groups.","7e7cab5d":"## Cross Validation\n\nMany a times, the data is imbalanced, i.e. ther may be a high number of class1 instances but less number of other class instances. Thus we should train and test our algorithm on each and every instance of the dataset. Then we can take an average of all the noted accuracies over the dataset.\n\n1) The K-Fold Cross Validataion works by first dividing the dataset into k-subsets.\n\n2) Let's say we divide the dataset into (k=5) parts. We reserve 1 part for testing and train the algorithm over the 4 parts.\n\n3) We continue the process by changing the testing part in each iteration and training the algorithm over the other parts. The accuracies and errors are then averaged to get a average accuracy of the algorithm.\n\nThis is called K-Fold Cross Validataion.\n\n4) An algorithm may underfit over a dataset for some training data and sometimes also overfit the data for other training set. Thus with cross-validation, we can achieve a generalised model.","c5ac0594":"### Random Forests","cf70b531":"## Analysing The Features\n### Sex --> Categorical Feature"}}