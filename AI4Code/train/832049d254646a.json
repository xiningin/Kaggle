{"cell_type":{"bfd00ac3":"code","8e583b0e":"code","1d483f39":"code","9aff3cfc":"code","a006c57f":"code","b159cd82":"code","c1d807e7":"code","05623a19":"code","f185719d":"code","f2780f1c":"code","41adc367":"code","16e818ac":"code","f3e48059":"code","924d6d83":"code","dfef32f1":"code","9c58c48c":"code","f0730c4d":"code","107f15f8":"code","53733a2a":"code","fb6754c1":"code","31ac5354":"code","b5e0aa02":"code","00cc254e":"code","82af1948":"code","5fffda15":"code","066d0f9d":"code","2dd6321d":"code","3e284f32":"markdown"},"source":{"bfd00ac3":"#Exploratory Analysis\n\n#age: The person's age in years\n#sex: The person's sex (1 = male, 0 = female)\n#cp: The chest pain experienced (Value 1: typical angina, Value 2: atypical angina, Value 3: non-anginal pain, Value 4: asymptomatic)\n#trestbps: The person's resting blood pressure (mm Hg on admission to the hospital)\n#chol: The person's cholesterol measurement in mg\/dl\n#fbs: The person's fasting blood sugar (> 120 mg\/dl, 1 = true; 0 = false)\n#restecg: Resting electrocardiographic measurement (0 = normal, 1 = having ST-T wave abnormality, 2 = showing probable or definite left ventricular hypertrophy by Estes' criteria)\n#thalach: The person's maximum heart rate achieved\n#exang: Exercise induced angina (1 = yes; 0 = no)\n#oldpeak: ST depression induced by exercise relative to rest\n#slope: the slope of the peak exercise ST segment (Value 1: upsloping, Value 2: flat, Value 3: downsloping)\n#ca: The number of major vessels (0-3)\n#thal: A blood disorder called thalassemia (3 = normal; 6 = fixed defect; 7 = reversable defect)\n#target: Heart disease (0 = doesnot suffer from heart desieses, 1 = suffering from heart desieses)","8e583b0e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d483f39":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier","9aff3cfc":"df = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","a006c57f":"df.head()","b159cd82":"df.info()","c1d807e7":"#Checking for missing values\ndf.isnull().sum()","05623a19":"df.describe()","f185719d":"# checking the distribution of Target Variable\ndf_target = df.groupby(\"target\").size()\ndf_target","f2780f1c":"plt.pie(df_target.values, labels = [\"target 0(Doesnot suffer from heart diseases)\", \"target 1(Suffering from heart diseases)\"], autopct='%1.1f%%', radius = 1.5, textprops = {\"fontsize\" : 16}) \nplt.show()","41adc367":"df_sex = df.groupby([\"sex\",\"target\"]).size()\nprint(df_sex)","16e818ac":"plt.pie(df_sex.values, labels = [\"target 0(Females who Do suffer from heart diseases)\", \"target 1(Females who suffering from heart diseases)\", \"target 0(Males who Do suffer from heart diseases)\", \"(Males who suffering from heart diseases)\"],autopct='%1.1f%%',radius = 1.5, textprops = {\"fontsize\" : 16})\nplt.show()","f3e48059":"plt.hist([df[df.target==0].age, df[df.target==1].age], bins = 20, alpha = 0.5, label = [\"Doesnot suffer from heart diseases\",\"suffering from heart diseases\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"percentage\")\nplt.legend()\nplt.show()","924d6d83":"plt.hist([df[df.target==0].chol, df[df.target==1].chol], bins = 20, alpha = 0.5, label = [\"Doesnot suffer from heart diseases\",\"suffering from heart diseases\"])\nplt.xlabel(\"chol\")\nplt.ylabel(\"percentage\")\nplt.legend()\nplt.show()","dfef32f1":"plt.hist([df[df.target==0].chol, df[df.target==1].chol], bins = 20, alpha = 0.5, label = [\"Doesnot suffer from heart diseases\",\"suffering from heart diseases\"])\nplt.xlabel(\"The person's maximum heart rate achieved\")\nplt.ylabel(\"percentage\")\nplt.legend()\nplt.show()","9c58c48c":"df","f0730c4d":"X = df.drop(columns= \"target\" , axis = 1)\nY = df[\"target\"]","107f15f8":"X","53733a2a":"Y","fb6754c1":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)","31ac5354":"print(X.shape, X_train.shape, X_test.shape)","b5e0aa02":"lr = LogisticRegression(solver='liblinear', random_state=42)","00cc254e":"# training the LogisticRegression model with Training data\nlr.fit(X_train, Y_train)","82af1948":"# Accuracy of the test data\nlr_prediction = lr.predict(X_test)\naccuracy_score_lr = accuracy_score(lr_prediction, Y_test)","5fffda15":"print('Accuracy on Test data (Logistic Regression): ', accuracy_score_lr)","066d0f9d":"# training the Random Forest model with Training data\n\nrf = RandomForestClassifier()\nrf.fit(X_train, Y_train)","2dd6321d":"rf_prediction =rf.predict(X_test)\naccuracy_score_rf = accuracy_score(rf_prediction , Y_test)\nprint('Accuracy on Test data(Random Forest) : ', accuracy_score_rf)","3e284f32":"0 --> Doesnot suffer from heart diseases\n\n1 --> Suffering from heart desieses\n\n"}}