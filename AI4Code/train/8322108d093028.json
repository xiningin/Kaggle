{"cell_type":{"1c61eafd":"code","a00911b0":"code","721022e6":"code","81a1a217":"code","42bd2eff":"code","8aec1bad":"code","3ca09fe4":"code","e31b481d":"code","debf8595":"code","4fee022b":"code","9d93ca80":"code","20172cf1":"markdown","b5f9c5a4":"markdown","97e10ec7":"markdown","82420105":"markdown","3ebea0a7":"markdown","aa4e9632":"markdown","e6bbbafd":"markdown","9c930532":"markdown"},"source":{"1c61eafd":"import tensorflow as tf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport shutil\ntf.logging.set_verbosity(tf.logging.ERROR)\nprint(tf.__version__)","a00911b0":"CSV_COLUMNS = ['X', 'Y']\ndf_train = pd.read_csv('..\/input\/dataTraining.txt', header = None, names = CSV_COLUMNS)\ndf_valid = pd.read_csv('..\/input\/dataTraining.txt', header = None, names = CSV_COLUMNS)\ndf_test = pd.read_csv('..\/input\/dataPrediction.txt', header = None, names = CSV_COLUMNS)","721022e6":"df_train.head()","81a1a217":"df_test.head()","42bd2eff":"FEATURES = CSV_COLUMNS[0:len(CSV_COLUMNS)-1]\nLABEL = CSV_COLUMNS[1]\ntf_feature_columns = [tf.feature_column.numeric_column(k) for k in FEATURES]\ntf_input_train=tf.estimator.inputs.pandas_input_fn(x = df_train,\n                                                   y = df_train[LABEL],\n                                                   shuffle = True,\n                                                  num_epochs=1000)\ntf_input_valid=tf.estimator.inputs.pandas_input_fn(x = df_valid,\n                                                   y = df_valid[LABEL],\n                                                   shuffle = False)\ntf_input_test=tf.estimator.inputs.pandas_input_fn(x = df_test,\n                                                   y = None,    \n                                                   shuffle = False)\n","8aec1bad":"model = tf.estimator.LinearRegressor(feature_columns = tf_feature_columns)\nmodel.train(input_fn =tf_input_train)","3ca09fe4":"metrics = model.evaluate(input_fn = tf_input_valid)\nprint('RMSE on dataset = {}'.format(np.sqrt(metrics['average_loss'])))","e31b481d":"model2 = tf.estimator.DNNRegressor(hidden_units = [20,16, 8,3],\n                                  feature_columns = tf_feature_columns)\nmodel2.train(input_fn = tf_input_train)\nmetrics2 = model2.evaluate(input_fn = tf_input_valid)\n","debf8595":"print('RMSE DNN on dataset = {}'.format(np.sqrt(metrics2['average_loss'])))\nprint('RMSE Linear on dataset = {}'.format(np.sqrt(metrics['average_loss'])))","4fee022b":"predictions = model.predict(input_fn =tf_input_test)\nt=[]\nfor items in predictions:\n    t.append(items['predictions'])\n\nPy=np.asarray(t )\nPy=np.squeeze(Py)\nprint(Py)","9d93ca80":"\ndf=df_train.as_matrix() \naX=df[:,0:1]\naY=df[:,1:2]\n###################################\npredictions = model.predict(input_fn =tf.estimator.inputs.pandas_input_fn(x = df_train,\n                                                   y = None,    \n                                                   shuffle = False))\nt=[]\nfor items in predictions:\n    t.append(items['predictions'])\nPy=np.asarray(t )\nPy=np.squeeze(Py)\n#######################################\n\npredictions2 = model2.predict(input_fn =tf.estimator.inputs.pandas_input_fn(x = df_train,\n                                                   y = None,    \n                                                   shuffle = False))\nt2=[]\nfor items in predictions2:\n    t2.append(items['predictions'])\nPy2=np.asarray(t2 )\nPy2=np.squeeze(Py2)\n\n#######################################\nplt.subplot(121)\nplt.scatter(aX,aY) \nplt.plot(aX, Py,color='r')\nplt.title('Linear Regressor\\n (RMSE={}) '.format(np.round(np.sqrt(metrics['average_loss']),4)))\n\nplt.subplot(122)\nplt.scatter(aX,aY) \nplt.plot(aX, Py2,color='r')\nplt.title('DNN Regressor\\n (RMSE={}) '.format(np.round(np.sqrt(metrics2['average_loss']),4)))\nplt.show()\n\n\n","20172cf1":"<h2>Evaluating - Linear Regressor Model<\/h2>","b5f9c5a4":"<h2>Training & Eval- Deep Neural Network(DNN) Regressor Model<\/h2>","97e10ec7":"<h2>Read data<\/h2>","82420105":"<h1>Simple Linear Regression using tf.estimator <\/h1>","3ebea0a7":"<h2>Predicting - Linear Regressor Model<\/h2>","aa4e9632":"<h2>Input Read data to Tensors<\/h2>","e6bbbafd":"<h2>Plotting - Linear Regressor VS DNN<\/h2>","9c930532":"<h2>Training - Linear Regressor<\/h2>"}}