{"cell_type":{"b2ed32d9":"code","e1d2c550":"code","e2c9dbd8":"code","1b424e0e":"code","1b559c35":"code","9c6787a6":"code","087bd001":"code","14f23a52":"code","3b1f5ca2":"code","05125e00":"code","34cf96bb":"code","8b7c3ab3":"code","173ed62d":"code","0cd28686":"code","71a4b8c3":"markdown","69898f5a":"markdown","c80be691":"markdown"},"source":{"b2ed32d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e1d2c550":"from sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import ModelCheckpoint","e2c9dbd8":"train = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/test.csv')\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv')\n\ntrain.head()","1b424e0e":"def reduce_memory_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        \n        if col_type in numerics:\n            col_min = df[col].min()\n            col_max = df[col].max()\n            \n            if str(col_type)[:3] == 'int':\n                if col_min > np.iinfo(np.int8).min and col_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif col_min > np.iinfo(np.int16).min and col_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif col_min > np.iinfo(np.int32).min and col_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif col_min > np.iinfo(np.int64).min and col_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if col_min > np.finfo(np.float32).min and col_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    \n    if verbose:\n        print('Mem. usage decreased to {:.2f}Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","1b559c35":"train = reduce_memory_usage(train)\ntest = reduce_memory_usage(test)","9c6787a6":"train_x = train.drop(['Id', 'Cover_Type'], axis = 1)\ntest_x = test.drop('Id', axis = 1)\n\ny_data = train.Cover_Type","087bd001":"stdsc = StandardScaler()\ntrain_x = stdsc.fit_transform(train_x)\ntest_x = stdsc.transform(test_x)\n\nencoder = OneHotEncoder()\ny_data = encoder.fit_transform(y_data.values[:, np.newaxis]).toarray()","14f23a52":"x_train, x_valid, y_train, y_valid = train_test_split(train_x, y_data)","3b1f5ca2":"model = Sequential([\n    Dense(128, activation='relu', input_shape=(54,)),\n    Dense(64, activation='relu'),\n    Dense(32, activation='relu'),\n    Dense(7, activation='softmax')\n])","05125e00":"model.compile(optimizer='rmsprop',loss='categorical_crossentropy',metrics = ['acc'])","34cf96bb":"checkpoint_path = 'tmp_checkpoint.ckpt'\ncheckpoint = ModelCheckpoint(filepath=checkpoint_path,\n                            save_weights_only = True,\n                            save_best_only = True,\n                            monitor = 'loss',\n                            verbose = 0)","8b7c3ab3":"BATCH_SIZE = 512 \nEPOCHS = 15\n\nmodel.fit(x_train, y_train, batch_size = BATCH_SIZE, epochs = EPOCHS, callbacks = [checkpoint])\n\nmodel.load_weights(checkpoint_path)","173ed62d":"y_pred = model.predict(x_valid)\naccuracy_score(y_valid.argmax(axis = 1), y_pred.argmax(axis = 1))","0cd28686":"y_test = model.predict(test_x)\ny_test = y_test.argmax(axis = 1).reshape(-1, ) + 1\n\nsubmission.Cover_Type = y_test\nsubmission.to_csv('submission.csv', index = False)\nprint(\"Done\")","71a4b8c3":"## Validation","69898f5a":"## Data Loading and Preprocessing","c80be691":"## Modeling"}}