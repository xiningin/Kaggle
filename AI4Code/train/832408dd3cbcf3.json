{"cell_type":{"171ee383":"code","53edacf9":"code","e1bca9a1":"code","61c032cc":"code","447acd4b":"code","ac74c803":"code","f0193c33":"code","e82740b6":"code","6a34082b":"code","de6f9348":"code","af4b3e55":"code","94f41b65":"code","49997098":"code","af57fecd":"code","59423b81":"code","1add673b":"code","5adacb51":"code","8c41afae":"code","601924fe":"code","3db26084":"code","4a1ab4ad":"code","d413312a":"code","c00f0d33":"code","8d22f4d2":"code","874a0567":"code","abcf06d6":"code","6dd7b203":"code","47021878":"code","37a3597c":"code","7db2b2b6":"code","c210c037":"code","fe59f91a":"code","5a741bbe":"code","eef6c5a7":"code","d3476d6c":"code","54b3ae2f":"code","d00d275d":"markdown","b89dfc09":"markdown","571ae62c":"markdown","308cf8b1":"markdown","4ca59c62":"markdown","99e277da":"markdown","0e5d3d52":"markdown","06b8b9d5":"markdown","e330c862":"markdown","98b2f36b":"markdown","dbd4138b":"markdown","88a1e293":"markdown","9ae9ed55":"markdown","596a33ee":"markdown","d270a769":"markdown","408ca179":"markdown"},"source":{"171ee383":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","53edacf9":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","e1bca9a1":"data=pd.read_csv('\/kaggle\/input\/password-strength\/data.csv',error_bad_lines=False)\n","61c032cc":"data.head(20)","447acd4b":"data['strength'].unique()","ac74c803":"data.isna().sum()","f0193c33":"data[data['password'].isnull()]","e82740b6":"data.dropna(inplace=True)","6a34082b":"data.isnull().sum()","de6f9348":"sns.countplot(data['strength'])","af4b3e55":"password_tuple=np.array(data)","94f41b65":"password_tuple","49997098":"import random\nrandom.shuffle(password_tuple)","af57fecd":"x=[labels[0] for labels in password_tuple]\ny=[labels[1] for labels in password_tuple]\n","59423b81":"def word_divide_char(inputs):\n    character=[]\n    for i in inputs:\n        character.append(i)\n    return character","1add673b":"word_divide_char('kzde5577')","5adacb51":"from sklearn.feature_extraction.text import TfidfVectorizer","8c41afae":"vectorizer=TfidfVectorizer(tokenizer=word_divide_char)","601924fe":"X=vectorizer.fit_transform(x)","3db26084":"X.shape","4a1ab4ad":"vectorizer.get_feature_names()","d413312a":"first_document_vector=X[0]\nfirst_document_vector","c00f0d33":"first_document_vector.T.todense()","8d22f4d2":"df=pd.DataFrame(first_document_vector.T.todense(),index=vectorizer.get_feature_names(),columns=['TF-IDF'])\ndf.sort_values(by=['TF-IDF'],ascending=False)","874a0567":"from sklearn.model_selection import train_test_split","abcf06d6":"X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.2)","6dd7b203":"X_train.shape","47021878":"from sklearn.linear_model import LogisticRegression","37a3597c":"clf=LogisticRegression(random_state=0,multi_class='multinomial')","7db2b2b6":"clf.fit(X_train,y_train)","c210c037":"dt=np.array(['amar123@er$#@!#@'])\npred=vectorizer.transform(dt)\nclf.predict(pred)\n\n# How to Verify the Password Strength??\n\n# If you get (Array output as \"0\") that means your password is Weak.\n# If you get (Array output as \"1\") that means your password is Strong.\n# If you get (Array output as \"2\") that means your password is Excellent\/Very Strong.","fe59f91a":"X_test","5a741bbe":"y_pred=clf.predict(X_test)\ny_pred","eef6c5a7":"from sklearn.metrics import confusion_matrix,accuracy_score","d3476d6c":"cm=confusion_matrix(y_test,y_pred)\nprint(cm)\nprint(accuracy_score(y_test,y_pred))","54b3ae2f":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","d00d275d":"### Password Strength Classifier Using NLP and Logistic Regression.\n\n**The task is to check Password strength using Logistic Regression ML Model. For Processing the text data I've used TF-IDF which is a NLP technique to Preprocess the text data into vectors for ML models. It shows three values(0 , 1 , 2) i.e. 0 for weak, 1 for medium, 2 for strong. Strength of the password based on rules(such as containing digits, special symbols , etc.)**","b89dfc09":"### About the DataSet!\n\nPassword - 670k unique values for password collected online. Strength - three values(0 , 1 , 2) i.e. 0 for weak, 1 for medium, 2 for strong. Strength of the password based on rules(such as containing digits, special symbols , etc.)\n\n[Click here to See the Dataset](https:\/\/www.kaggle.com\/vishalsiram50\/password-strength)","571ae62c":"#### doing prediction on X-Test data","308cf8b1":"##### create report of your model","4ca59c62":"### ***Show Your support by Upvoting this Post*** \ud83d\udc4d \n\n### ***Follow me on Kaggle for getting more of such resources.***\n\n### **Thank You!**","99e277da":"#### create a custom function to split input into characters of list","0e5d3d52":"#### Apply Logistic on data as use-case is Classification","06b8b9d5":"#### Reading dataset","e330c862":"### How to Run the code:\nEither click on \"Copy and Edit\" button located at the top right corner of this Notebook.\n\nor\n\nDownload the .ipynb file and dataset file into your system.\nOpen that on either Jupyter Notebook or in Google Colab and change the dataset file path and run.\n\n[Click Here for GitHub Link](https:\/\/github.com\/amark720\/Data-Science-Projects\/tree\/master\/NLP%20Projects\/Password%20Strength%20Classifier%20Using%20TF-IDF)\n","98b2f36b":"#### apply TF-IDF vectorizer on data","dbd4138b":"#### check Accuracy of your model using confusion_matrix,accuracy_score","88a1e293":"#### shuffling randomly for robustness","9ae9ed55":"#### code to check all the missing values in my dataset","596a33ee":"## Doing prediction for Specific Custom Data\n\n1. Enter you desired password into the Array below\n2. Run the below cell","d270a769":"#### split data into train & test\n    train---> To learn the relationship within data, \n    test-->  To do predictions, and this testing data will be unseen to my model","408ca179":"#### import TF-IDF vectorizer to convert String data into numerical data"}}