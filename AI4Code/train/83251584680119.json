{"cell_type":{"44c061e0":"code","3b865adf":"code","d4aba631":"code","b91528e1":"code","b51d659a":"code","1f0c798a":"code","b364dae4":"code","2f4614d9":"code","b135c716":"code","3370fbd0":"code","75053f91":"code","827d6925":"code","1ad3fd2f":"code","26fd2e32":"code","0671e7ca":"code","d7b78aa7":"code","7c7f7f0e":"code","e1c3a90c":"code","b202b7f3":"code","dcdf3a48":"code","bb08588f":"code","3817ee1c":"code","a38faf7e":"code","dff1dff0":"code","794afe5d":"code","d4e24cf6":"code","7532e1b2":"code","579623b7":"code","37206a5c":"code","2bd208fb":"code","42519ae0":"code","0e8775f4":"code","522c1a62":"code","4fc9fc27":"code","a3ce0047":"code","93468728":"code","89e841dc":"code","a0b1deb4":"code","c7107481":"code","284ec8f2":"code","5a3b6383":"code","87d0d35d":"code","8f8e77dc":"code","6889a974":"code","52233db0":"code","5d8a944f":"code","1655f28c":"code","03bf85a0":"code","cd583280":"code","e14cbe47":"code","377116f8":"code","f2a27107":"code","272ac2a0":"code","91ad61e2":"code","e6289cbe":"code","81ab6889":"code","8f069731":"code","7ab9323c":"code","d74d6448":"code","ce9dd368":"code","92201cf8":"code","7435bcdb":"code","d2560326":"code","b8904b9f":"code","40f4d795":"code","3aaf7dae":"code","ffc96397":"code","bbfe47e3":"code","6d2b0e3c":"code","1c6e4fad":"code","6a150e63":"code","c64c5036":"code","16306cd1":"code","41073b5f":"code","c742af9b":"code","abc6fe99":"code","115f5c79":"code","3c68a993":"code","d5345879":"code","b26bcefd":"code","003c484c":"code","2966c839":"code","3f1f06fa":"code","394dd0ae":"code","7843d6c8":"code","3265268a":"markdown","91df42b4":"markdown","91101f0b":"markdown","aa60914d":"markdown","03689e5d":"markdown","58d612fc":"markdown","13c707f1":"markdown","3cbb5bc2":"markdown","00d3f236":"markdown","2c7d9c18":"markdown","8d0558fd":"markdown","62de2de4":"markdown"},"source":{"44c061e0":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom scipy.stats import skew\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\nfrom scipy.stats import boxcox\nfrom scipy.special import inv_boxcox\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV, KFold,GridSearchCV\nfrom sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\nfrom sklearn.preprocessing import StandardScaler,RobustScaler,LabelEncoder,PowerTransformer\nfrom sklearn.ensemble import GradientBoostingRegressor,StackingRegressor, RandomForestRegressor, ExtraTreesRegressor\nfrom sklearn.linear_model import ElasticNetCV, LassoCV, RidgeCV\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.decomposition import PCA\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\npd.set_option('display.max_columns', 5000)\npd.set_option('display.max_rows', 5000)\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\ntrain=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsample_sub=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\n\ntrain.head()","3b865adf":"train.head()","d4aba631":"train[train.SalePrice>300000]","b91528e1":"train.tail()","b51d659a":"train.info()","1f0c798a":"train.describe()","b364dae4":"correlation_train=train.corr()\nsb.set(font_scale=2)\nplt.figure(figsize = (50,35))\nax = sb.heatmap(correlation_train, annot=True,annot_kws={\"size\": 25},fmt='.1f',cmap='PiYG', linewidths=.5)","2f4614d9":"correlation_train.columns","b135c716":"corr_dict=correlation_train['SalePrice'].sort_values(ascending=False).to_dict()\nimportant_columns=[]\nfor key,value in corr_dict.items():\n    if ((value>0.1) & (value<0.8)) | (value<=-0.1):\n        important_columns.append(key)\nimportant_columns","3370fbd0":"plt.figure(figsize=(40,20))\nsb.set(font_scale=1.5)\nsb.boxplot(x='YearBuilt', y=\"SalePrice\", data=train)\nsb.swarmplot(x='YearBuilt', y=\"SalePrice\", data=train, color=\".25\")\nplt.xticks(weight='bold',rotation=90)\n","75053f91":"test.head()","827d6925":"test.tail()","1ad3fd2f":"test.info()","26fd2e32":"test.describe()","0671e7ca":"train_test=pd.concat([train,test],axis=0,sort=False)\ntrain_test.head()","d7b78aa7":"pd.set_option('display.max_rows', 5000)\ntrain_test_null_info=pd.DataFrame(train_test.isnull().sum(),columns=['Count of NaN'])\ntrain_test_dtype_info=pd.DataFrame(train_test.dtypes,columns=['DataTypes'])\ntrain_tes_info=pd.concat([train_test_null_info,train_test_dtype_info],axis=1)\ntrain_tes_info","7c7f7f0e":"train_test.loc[train_test['Fireplaces']==0,'FireplaceQu']='Nothing'\ntrain_test['LotFrontage'] = train_test['LotFrontage'].fillna(train_test.groupby('1stFlrSF')['LotFrontage'].transform('mean'))\ntrain_test['LotFrontage'].interpolate(method='linear',inplace=True)\ntrain_test['LotFrontage']=train_test['LotFrontage'].astype(int)\ntrain_test['MasVnrArea'] = train_test['MasVnrArea'].fillna(train_test.groupby('MasVnrType')['MasVnrArea'].transform('mean'))\ntrain_test['MasVnrArea'].interpolate(method='linear',inplace=True)\ntrain_test['MasVnrArea']=train_test['MasVnrArea'].astype(int)\ntrain_test[\"Fence\"] = train_test[\"Fence\"].fillna(\"None\")\ntrain_test[\"FireplaceQu\"] = train_test[\"FireplaceQu\"].fillna(\"None\")\ntrain_test[\"Alley\"] = train_test[\"Alley\"].fillna(\"None\")\ntrain_test[\"PoolQC\"] = train_test[\"PoolQC\"].fillna(\"None\")\ntrain_test[\"MiscFeature\"] = train_test[\"MiscFeature\"].fillna(\"None\")\ntrain_test.loc[train_test['BsmtFinSF1']==0,'BsmtFinType1']='Unf'\ntrain_test.loc[train_test['BsmtFinSF2']==0,'BsmtQual']='TA'\ntrain_test['YrBltRmd']=train_test['YearBuilt']+train_test['YearRemodAdd']\ntrain_test['Total_Square_Feet'] = (train_test['BsmtFinSF1'] + train_test['BsmtFinSF2'] + train_test['1stFlrSF'] + train_test['2ndFlrSF'] + train_test['TotalBsmtSF'])\ntrain_test['Total_Bath'] = (train_test['FullBath'] + (0.5 * train_test['HalfBath']) + train_test['BsmtFullBath'] + (0.5 * train_test['BsmtHalfBath']))\ntrain_test['Total_Porch_Area'] = (train_test['OpenPorchSF'] + train_test['3SsnPorch'] + train_test['EnclosedPorch'] + train_test['ScreenPorch'] + train_test['WoodDeckSF'])\ntrain_test['exists_pool'] = train_test['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\ntrain_test['exists_garage'] = train_test['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\ntrain_test['exists_fireplace'] = train_test['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\ntrain_test['exists_bsmt'] = train_test['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\ntrain_test['old_house'] = train_test['YearBuilt'].apply(lambda x: 1 if x <1990 else 0)\n\nfor i in train_test.columns:\n    if 'SalePrice' not in i:\n        if 'object' in str(train_test[str(i)].dtype):\n            train_test[str(i)]=train_test[str(i)].fillna(method='ffill')\n","e1c3a90c":"columns = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', 'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', 'YrSold', 'MoSold', 'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope', 'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond')\n\nfor col in columns:\n    lbl_enc = LabelEncoder() \n    lbl_enc.fit(list(train_test[col].values)) \n    train_test[col] = lbl_enc.transform(list(train_test[col].values))","b202b7f3":"numeric_features = train_test.dtypes[train_test.dtypes != \"object\"].index\nskewed_features = train_test[numeric_features].apply(lambda x: skew(x)).sort_values(ascending=False)\nprint(skewed_features)","dcdf3a48":"high_skewness = skewed_features[abs(skewed_features) > 0.9]\nskewed_features = high_skewness.index","bb08588f":"print(high_skewness)\nprint('\\nVariables with high skewness: \\n\\n',skewed_features)","3817ee1c":"train_test[['MiscVal', 'PoolArea', 'exists_pool', 'LotArea', 'LowQualFinSF', '3SsnPorch', 'LandSlope', 'KitchenAbvGr', 'EnclosedPorch',\n       'ScreenPorch', 'MasVnrArea', 'OpenPorchSF', 'WoodDeckSF', 'LotFrontage', '1stFlrSF', 'Total_Porch_Area', 'GrLivArea', 'BsmtExposure',\n       'KitchenQual', 'ExterQual', 'Fence', 'ExterCond', 'PavedDrive', 'BsmtCond', 'BsmtFinType2', 'CentralAir', 'GarageQual', 'exists_garage',\n       'Functional', 'GarageCond', 'exists_bsmt', 'BsmtQual', 'Street','PoolQC']].head()","a38faf7e":"for feature in skewed_features:\n    train_test[feature] = boxcox1p(train_test[feature], boxcox_normmax(train_test[feature] + 1))\n","dff1dff0":"train_test[['MiscVal', 'PoolArea', 'exists_pool', 'LotArea', 'LowQualFinSF', '3SsnPorch', 'LandSlope', 'KitchenAbvGr', 'EnclosedPorch',\n       'ScreenPorch', 'MasVnrArea', 'OpenPorchSF', 'WoodDeckSF', 'LotFrontage', '1stFlrSF', 'Total_Porch_Area', 'GrLivArea', 'BsmtExposure',\n       'KitchenQual', 'ExterQual', 'Fence', 'ExterCond', 'PavedDrive', 'BsmtCond', 'BsmtFinType2', 'CentralAir', 'GarageQual', 'exists_garage',\n       'Functional', 'GarageCond', 'exists_bsmt', 'BsmtQual', 'Street','PoolQC']].head()","794afe5d":"train_test=pd.get_dummies(train_test,dtype='int8')","d4e24cf6":"train_test_null_info=pd.DataFrame(train_test.isnull().sum(),columns=['Count of NaN'])\ntrain_test_dtype_info=pd.DataFrame(train_test.dtypes,columns=['DataTypes'])\ntrain_test_info=pd.concat([train_test_null_info,train_test_dtype_info],axis=1)\ntrain_test_info","7532e1b2":"train=train_test[0:1460]\ntest=train_test[1460:2919]","579623b7":"len(train)","37206a5c":"train.interpolate(method='linear',inplace=True)\ntest.interpolate(method='linear',inplace=True)","2bd208fb":"corr_new_train=train.corr()\nplt.figure(figsize=(5,15))\nsb.heatmap(corr_new_train[['SalePrice']].sort_values(by=['SalePrice'],ascending=False).head(30),annot_kws={\"size\": 16},vmin=-1, cmap='PiYG', annot=True)\nsb.set(font_scale=2)","42519ae0":"corr_dict2=corr_new_train['SalePrice'].sort_values(ascending=False).to_dict()\ncorr_dict2","0e8775f4":"best_columns=[]\nfor key,value in corr_dict2.items():\n    if ((value>=0.3175) & (value<0.9)) | (value<=-0.315):\n        best_columns.append(key)\nbest_columns","522c1a62":"print(len(best_columns))","4fc9fc27":"plt.figure(figsize=(25,10))\nsb.set(font_scale=1.4)\ntrain.boxplot(column=best_columns)\nplt.xticks(weight='bold',rotation=90)\n","a3ce0047":"train['SalePrice_Log1p'] = np.log1p(train.SalePrice)","93468728":"train.head()","89e841dc":"print(min(train['SalePrice_Log1p']))\nprint(max(train['SalePrice_Log1p']))","a0b1deb4":"plt.figure(figsize=(10,8))\nsb.set(font_scale=1.2)\nsb.distplot(train['SalePrice'],color='violet')\nplt.xlabel('SalePrice',fontsize=20)\nprint('Skew Dist:',train['SalePrice'].skew())\nprint('Kurtosis Dist:',train['SalePrice'].kurt())","c7107481":"plt.figure(figsize=(10,8))\nsb.set(font_scale=1.2)\nsb.distplot(train['SalePrice_Log1p'],color='indigo')\nplt.xlabel('SalePrice_Log1p',fontsize=20)\nprint('Skew Dist:',train['SalePrice_Log1p'].skew())\nprint('Kurtosis Dist:',train['SalePrice_Log1p'].kurt())","284ec8f2":"print(len(train[(train.KitchenQual==3) & (train.SalePrice>360000)].index))","5a3b6383":"len(train)","87d0d35d":"plt.style.use('ggplot')\nplt.figure(figsize=(20,12))\nrbst_scaler=RobustScaler()\ntrain_rbst=rbst_scaler.fit_transform(train)\n\npca=PCA(50).fit(train_rbst)\nplt.plot(pca.explained_variance_ratio_.cumsum())\nplt.xticks(np.arange(0, 50, 1))\nplt.xlabel('Number of components',fontweight='bold',size=14)\nplt.ylabel('Explanined variance ratio for number of components',fontweight='bold',size=14)\n\ntrain_pca=PCA(3).fit_transform(train_rbst)","8f8e77dc":"neigh = NearestNeighbors(n_neighbors=2)\nnbrs = neigh.fit(train)\ndistances, indices = nbrs.kneighbors(train)\ndistances = np.sort(distances, axis=0)\ndistances = distances[:,1]\nplt.figure(figsize=(15,15))\nplt.plot(distances)","6889a974":"dbscan = DBSCAN(eps=1400, min_samples=20).fit(train_pca)\ncore_samples_mask = np.zeros_like(dbscan.labels_, dtype=bool)\ncore_samples_mask[dbscan.core_sample_indices_] = True\nlabels=dbscan.labels_\nn_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)","52233db0":"unique_labels = set(labels)\nplt.figure(figsize=(12,12))\ncolors = [plt.cm.prism(each)  for each in np.linspace(0, 1, len(unique_labels))]\nfor k, col in zip(unique_labels, colors):\n    if k == -1:\n        # Black used for noise.\n        col = [0, 0, 0, 1]\n\n    class_member_mask = (labels == k)\n    \n    xy = train_pca[class_member_mask & core_samples_mask]\n    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=tuple(col),\n             markeredgecolor='k', markersize=14)\n\n    xy = train_pca[class_member_mask & ~core_samples_mask]\n    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=tuple(col),\n             markeredgecolor='k', markersize=6)\n\nplt.title('Estimated number of clusters: %d' % n_clusters_)\nplt.show()","5d8a944f":"labels=pd.DataFrame(labels,columns=['Classes'])\nprint(labels[labels['Classes']==-1])","1655f28c":"train=pd.concat([train,labels],axis=1)","03bf85a0":"train[train.Classes==-1]","cd583280":"train.drop([197,810,1170,1182,1298,1386,1423],axis=0,inplace=True)","e14cbe47":"plt.style.use('dark_background')\nfig, axes = plt.subplots(18, 2,figsize=(20,80))\nfig.subplots_adjust(hspace=0.6)\ncolors=[plt.cm.prism_r(each) for each in np.linspace(0, 1, len(best_columns))]\nfor i,ax,color in zip(best_columns,axes.flatten(),colors):\n    sb.regplot(x=train[i], y=train[\"SalePrice\"], fit_reg=True,marker='o',scatter_kws={'s':50,'alpha':0.8},color=color,ax=ax)\n    plt.xlabel(i,fontsize=12)\n    plt.ylabel('SalePrice',fontsize=12)\n    ax.set_yticks(np.arange(0,900001,100000))\n    ax.set_title('SalePrice'+' - '+str(i),color=color,fontweight='bold',size=20)","377116f8":"plt.style.use('ggplot')\nfig, axes = plt.subplots(18, 2,figsize=(20,60))\nfig.subplots_adjust(hspace=0.8)\nsb.set(font_scale=1.2)\ncolors=[plt.cm.prism_r(each) for each in np.linspace(0, 1, len(best_columns))]\nfor i,ax,color in zip(best_columns,axes.flatten(),colors):\n    sb.regplot(x=train[i], y=train[\"SalePrice_Log1p\"], fit_reg=True,marker='o',scatter_kws={'s':50,'alpha':0.7},color=color,ax=ax)\n    plt.xlabel(i,fontsize=12)\n    plt.ylabel('SalePrice_Log1p',fontsize=12)\n    ax.set_title('SalePrice_Log1p'+' - '+str(i),color=color,fontweight='bold',size=20)","f2a27107":"train = train[train.GarageArea * train.GarageCars < 3700]\ntrain = train[(train.FullBath + (train.HalfBath*0.5) + train.BsmtFullBath + (train.BsmtHalfBath*0.5))<5]","272ac2a0":"len(train)","91ad61e2":"plt.style.use('dark_background')\ncorr1_new_train=train.corr()\nplt.figure(figsize=(5,15))\nsb.heatmap(corr1_new_train[['SalePrice']].sort_values(by=['SalePrice'],ascending=False).head(25),annot_kws={\"size\": 16},vmin=-1, cmap='PiYG', annot=True)\nsb.set(font_scale=2)","e6289cbe":"train.isnull().sum()","81ab6889":"test.isnull().sum()","8f069731":"del test['SalePrice']","7ab9323c":"train.head()","d74d6448":"X=train.drop(['SalePrice','SalePrice_Log1p','Classes'],axis=1)\ny=train.SalePrice_Log1p","ce9dd368":"def overfit_reducer(df):\n\n    overfit = []\n    for i in df.columns:\n        counts = df[i].value_counts()\n        zeros = counts.iloc[0]\n        if zeros \/ len(df) * 100 > 99.9:\n            overfit.append(i)\n    overfit = list(overfit)\n    return overfit\noverfitted_features = overfit_reducer(X)","92201cf8":"print(X.shape)\nprint(test.shape)","7435bcdb":"X.drop(overfitted_features,axis=1,inplace=True)\ntest.drop(overfitted_features,axis=1,inplace=True)\nprint('X.shape',X.shape)\nprint('test.shape',test.shape)","d2560326":"std_scaler=StandardScaler()\nrbst_scaler=RobustScaler()\npower_transformer=PowerTransformer()\nX_std=std_scaler.fit_transform(X)\nX_rbst=rbst_scaler.fit_transform(X)\nX_pwr=power_transformer.fit_transform(X)\n\ntest_std=std_scaler.transform(test)\ntest_rbst=rbst_scaler.transform(test)\ntest_pwr=power_transformer.transform(test)","b8904b9f":"X_train,X_test,y_train,y_test=train_test_split(X_std,y,test_size=0.002,random_state=52)\nprint('X_train Shape :',X_train.shape)\nprint('X_test Shape :',X_test.shape)\nprint('y_train Shape :',y_train.shape)\nprint('y_test Shape :',y_test.shape)","40f4d795":"lgb_regressor=lgb.LGBMRegressor(objective='regression', num_leaves=5, learning_rate=0.035, n_estimators=2177, max_bin=50, bagging_fraction=0.65,bagging_freq=5, bagging_seed=7, \n                                feature_fraction=0.201, feature_fraction_seed=7,n_jobs=-1)\nlgb_regressor.fit(X_train, y_train)\ny_head=lgb_regressor.predict(X_test)\nprint('-'*10+'LGBM'+'-'*10)\nprint('R square Accuracy: ',r2_score(y_test,y_head))\nprint('Mean Absolute Error Accuracy: ',mean_absolute_error(y_test,y_head))\nprint('Mean Squared Error Accuracy: ',mean_squared_error(y_test,y_head))","3aaf7dae":"gb_reg = GradientBoostingRegressor(n_estimators=1992, learning_rate=0.03005, max_depth=4, max_features='sqrt', min_samples_leaf=15, min_samples_split=14, loss='huber', random_state =42)\ngb_reg.fit(X_train, y_train)\ny_head=gb_reg.predict(X_test)\nprint('-'*10+'GBR'+'-'*10)\nprint('R square Accuracy: ',r2_score(y_test,y_head))\nprint('Mean Absolute Error Accuracy: ',mean_absolute_error(y_test,y_head))\nprint('Mean Squared Error Accuracy: ',mean_squared_error(y_test,y_head))","ffc96397":"kfolds = KFold(n_splits=10, shuffle=True, random_state=42)\n\nalphas=[1e-9,1e-8,1e-7,1e-6]\n\nridgecv_reg= make_pipeline(RidgeCV(alphas=alphas, cv=kfolds))\nridgecv_reg.fit(X_train, y_train)\ny_head=ridgecv_reg.predict(X_test)\nprint('-'*10+'RidgeCV'+'-'*10)\nprint('R square Accuracy: ',r2_score(y_test,y_head))\nprint('Mean Absolute Error Accuracy: ',mean_absolute_error(y_test,y_head))\nprint('Mean Squared Error Accuracy: ',mean_squared_error(y_test,y_head))","bbfe47e3":"kfolds = KFold(n_splits=8, shuffle=True, random_state=42)\n\nlassocv_reg= make_pipeline(LassoCV(alphas=alphas, cv=kfolds))\nlassocv_reg.fit(X_train, y_train)\ny_head=lassocv_reg.predict(X_test)\nprint('-'*10+'LassoCV'+'-'*10)\nprint('R square Accuracy: ',r2_score(y_test,y_head))\nprint('Mean Absolute Error Accuracy: ',mean_absolute_error(y_test,y_head))\nprint('Mean Squared Error Accuracy: ',mean_squared_error(y_test,y_head))","6d2b0e3c":"kfolds = KFold(n_splits=8, shuffle=True, random_state=42)\n\nalphas=[0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006]\nl1ratio=[0.87, 0.9,0.92, 0.95,0.97, 0.99, 1]\n\nelasticv_reg= make_pipeline(ElasticNetCV(alphas=alphas, cv=kfolds, l1_ratio=l1ratio))\nelasticv_reg.fit(X_train, y_train)\ny_head=elasticv_reg.predict(X_test)\nprint('-'*10+'ElasticNetCV'+'-'*10)\nprint('R square Accuracy: ',r2_score(y_test,y_head))\nprint('Mean Absolute Error Accuracy: ',mean_absolute_error(y_test,y_head))\nprint('Mean Squared Error Accuracy: ',mean_squared_error(y_test,y_head))","1c6e4fad":"estimators = [('lgbm', lgb_regressor),\n              ('gbr', gb_reg),   \n              ('lasso', lassocv_reg),   \n              ('ridge', ridgecv_reg),   \n              ('elasticnet', elasticv_reg)]\n\nstack_reg=StackingRegressor(estimators=estimators,final_estimator=ExtraTreesRegressor(n_estimators=50),n_jobs=-1)\nstack_reg.fit(X_train, y_train)\ny_head=stack_reg.predict(X_test)\nprint('-'*10+'StackingRegressor'+'-'*10)\nprint('R square Accuracy: ',r2_score(y_test,y_head))\nprint('Mean Absolute Error Accuracy: ',mean_absolute_error(y_test,y_head))\nprint('Mean Squared Error Accuracy: ',mean_squared_error(y_test,y_head))","6a150e63":"y_head=pd.DataFrame(y_head,columns=['Predict'])\ny_test.reset_index(drop=True,inplace=True)\ny_test_y_head=pd.concat([y_test,y_head],axis=1)\ny_test_y_head.head()","c64c5036":"print('Count columns of test: ',len(test.columns))\nprint('Count columns of X: ',len(X.columns))","16306cd1":"test_pred_lgb=lgb_regressor.predict(test_pwr)\ntest_pred_gb=gb_reg.predict(test_pwr)\ntest_pred_elastic=elasticv_reg.predict(test_pwr)\ntest_pred_ridge=ridgecv_reg.predict(test_pwr)\ntest_pred_lasso=lassocv_reg.predict(test_pwr)\ntest_pred_stack=stack_reg.predict(test_pwr)","41073b5f":"test_pred_lgb=pd.DataFrame(test_pred_lgb,columns=['SalePrice'])\ntest_pred_gb=pd.DataFrame(test_pred_gb,columns=['SalePrice'])\ntest_pred_elastic=pd.DataFrame(test_pred_elastic,columns=['SalePrice'])\ntest_pred_ridge=pd.DataFrame(test_pred_ridge,columns=['SalePrice'])\ntest_pred_lasso=pd.DataFrame(test_pred_lasso,columns=['SalePrice'])\ntest_pred_stack=pd.DataFrame(test_pred_stack,columns=['SalePrice'])","c742af9b":"test_pred_lgb.SalePrice =np.floor(np.expm1(test_pred_lgb.SalePrice))\ntest_pred_gb.SalePrice =np.floor(np.expm1(test_pred_gb.SalePrice))\ntest_pred_elastic.SalePrice =np.floor(np.expm1(test_pred_elastic.SalePrice))\ntest_pred_ridge.SalePrice =np.floor(np.expm1(test_pred_ridge.SalePrice))\ntest_pred_lasso.SalePrice =np.floor(np.expm1(test_pred_lasso.SalePrice))\ntest_pred_stack.SalePrice =np.floor(np.expm1(test_pred_stack.SalePrice))","abc6fe99":"test_pred_lgb.head()","115f5c79":"test_pred_gb.head()","3c68a993":"test_pred_elastic.head()","d5345879":"test_pred_ridge.head()","b26bcefd":"test_pred_lasso.head()","003c484c":"test_pred_stack.head()","2966c839":"final_pred=(test_pred_stack*0.1665)+(test_pred_lgb*0.678)+(test_pred_ridge*0.1665)\nfinal_pred.head()","3f1f06fa":"sample_sub['SalePrice']=final_pred","394dd0ae":"sample_sub.head()","7843d6c8":"sample_sub.to_csv('submission.csv',index=False)","3265268a":"# **First step; import our library later read dataframes**","91df42b4":"# **In the visualization above, we can see the variables that affect SalePrice.**","91101f0b":"# **Variables associated with SalePrice**","aa60914d":"# **We will predict SalePrice column**","03689e5d":"# These are the columns with the best correlation rate. Let's visualize them.","58d612fc":"# With the help of the above visualizations, we detected outliers. Let's get rid!","13c707f1":"# It's time to leave","3cbb5bc2":"# Fillna and Feature Engineering","00d3f236":"# **Clean and Edit Dataframes**\n\n# We must combine train and test datasets. Because This processes are must be carried out together.","2c7d9c18":"# Correlations increased after the outliers were removed.","8d0558fd":"# **Create Model**","62de2de4":"# Columns with more than 40% positive or negative correlations with SalePrice"}}