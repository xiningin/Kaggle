{"cell_type":{"6ceb58f6":"code","b5223156":"code","03811695":"code","d5444f1d":"code","a6c696c3":"code","8ae3ffa1":"code","a5d48eb4":"code","48409c6e":"code","22199ceb":"code","19cb08bc":"code","17b85db6":"code","efdc31b5":"code","45d11b9a":"code","079dcf1f":"code","78c0181f":"code","18b0bae7":"code","5b80edcd":"code","b114d496":"code","60a8ca31":"code","6dccae93":"code","19338511":"code","d430d1cb":"code","d9f18f58":"code","f36377f0":"code","6fcc87f8":"code","b78d3fa5":"code","f3b2b7c7":"markdown","c18f8c60":"markdown","cd4ac01a":"markdown","0a20a0b9":"markdown","46a60535":"markdown","43f5e4f2":"markdown","645ae9d5":"markdown","a9d44844":"markdown","8f190170":"markdown","e465486a":"markdown","0948fcb5":"markdown","87fa3556":"markdown","7cadab77":"markdown","822d8cb7":"markdown","ef7ee7d7":"markdown","d60b0952":"markdown","789c0c33":"markdown","aceb8398":"markdown","4dce5e47":"markdown","816cb67e":"markdown","f9bc76e9":"markdown","475a8d40":"markdown"},"source":{"6ceb58f6":"import numpy as np        \nimport pandas as pd\n\n#libraries for visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nsns.set_style('whitegrid')\n\n#to ignore warning\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#to convert dates to week of the day\nimport datetime  \nfrom datetime import date\nimport calendar \n\n#importing the dataset\ndata = pd.read_csv('..\/input\/Medical.csv')","b5223156":"# To see the complete about the data\ndata.info()","03811695":"# to see the first 5 objects of the data.\ndata.head()","d5444f1d":"#Rename columns\ndata.rename(columns = {'Hipertension':'Hypertension',\n                      'Handcap':'Handicap',\n                      'No-show':'No_show'}, inplace = True)","a6c696c3":"# Checking for errors and see all the unique values for some features\ncol = data.columns\nfor x in col[5:]:\n    print(x + ':', sorted(data[x].unique()))","8ae3ffa1":"# drop all the values other than 0 and 1\ndata.drop(data[data['Handicap'].isin([2,3,4])].index,inplace = True)","a5d48eb4":"# drop all the ages less than 0 and more than 100\ndata = data[(data['Age']<100) & (data['Age']>0)]","48409c6e":"dummy = pd.get_dummies(data['No_show'])\ndummy.drop('Yes', axis=1, inplace = True)\ndata.drop('No_show', axis = 1, inplace=True)\ndata = data.join(dummy)\ndata.head()","22199ceb":"#Rename columns\ndata.rename(columns = {'No':'Show'}, inplace = True)","19cb08bc":"# To calculate the day of the appointment\ndata.AppointmentDay = data.AppointmentDay.apply(lambda x: datetime.datetime.strptime(x, '%Y-%m-%dT%H:%M:%SZ').date())\ndata.ScheduledDay = data.ScheduledDay.apply(lambda x: datetime.datetime.strptime(x, '%Y-%m-%dT%H:%M:%SZ').date())\n\ndata['DayOfTheWeek'] = data.AppointmentDay.apply(lambda x: calendar.day_name[x.weekday()])","17b85db6":"# to calculate the number of days between Appointment Day and Schedule Day\nAwaitingDays = (data.AppointmentDay - data.ScheduledDay).astype('timedelta64[D]')\ndata['AwaitingDays'] = AwaitingDays\n\nsns.stripplot(data = data, y = 'AwaitingDays', jitter = True,color='Green')\nplt.ylim(0, 200)\nplt.show()","efdc31b5":"data = data[data.AwaitingDays<=150]","45d11b9a":"#we check for the duplicate records of patients.\ndata.PatientId = data.PatientId.apply('int64')\n\ndata.PatientId.value_counts().head()","079dcf1f":"data.drop_duplicates('PatientId', inplace=True)","78c0181f":"data.info()","18b0bae7":"fig,ax=plt.subplots(figsize=(10,7))\n\nsizes = [len(data[data['Show']==0]), len(data[data['Show']==1])]\nplt.pie(sizes, autopct='%1.1f%%',colors=['Red','Blue'],labels=['No- show','Show'])\nplt.title('Percentage of patients for appointment')\nplt.show()","5b80edcd":"print('The percentage of handicap patients showed up are: '+str(data[(data['Show']==1) & (data['Handicap']==1)].shape[0]\/data[(data['Handicap']==1)].shape[0]*100) +'%')\nprint('The percentage of not handicap patients showed up are: '+str(data[(data['Show']==1) & (data['Handicap']==0)].shape[0]\/data[(data['Handicap']==0)].shape[0]*100) +'%')\nprint('#'*20)\nprint('The percentage of Hypertension patients showed up are: '+str(data[(data['Show']==1) & (data['Hypertension']==1)].shape[0]\/data[(data['Hypertension']==1)].shape[0]*100) +'%')\nprint('The percentage of no Hypertension patients showed up are: '+str(data[(data['Show']==1) & (data['Hypertension']==0)].shape[0]\/data[(data['Hypertension']==0)].shape[0]*100) +'%')\nprint('#'*20)\nprint('The percentage of Diabetes patients showed up are: '+str(data[(data['Show']==1) & (data['Diabetes']==1)].shape[0]\/data[(data['Diabetes']==1)].shape[0]*100) +'%')\nprint('The percentage of no Diabetes patients showed up are: '+str(data[(data['Show']==1) & (data['Diabetes']==0)].shape[0]\/data[(data['Diabetes']==0)].shape[0]*100) +'%')\nprint('#'*20)\nprint('The percentage of Alcoholism patients showed up are: '+str(data[(data['Show']==1) & (data['Alcoholism']==1)].shape[0]\/data[(data['Alcoholism']==1)].shape[0]*100) +'%')\nprint('The percentage of no Alcoholism patients showed up are: '+str(data[(data['Show']==1) & (data['Alcoholism']==0)].shape[0]\/data[(data['Alcoholism']==0)].shape[0]*100) +'%')\nprint('#'*20)\nprint('The percentage of SMS_received patients showed up are: '+str(data[(data['Show']==1) & (data['SMS_received']==1)].shape[0]\/data[(data['SMS_received']==1)].shape[0]*100) +'%')\nprint('The percentage of not SMS_received patients showed up are: '+str(data[(data['Show']==1) & (data['SMS_received']==0)].shape[0]\/data[(data['SMS_received']==0)].shape[0]*100) +'%')\n","b114d496":"# fuction to find the probability\ndef probability(group):\n    rows=[]\n    for item in group:\n        for level in data[item].unique():\n            row = {'Condition':item}\n            total = len(data[data[item] == level])\n            n = len(data[(data[item] == level) & (data['Show']== 1)])\n            row.update({'Level' : level, 'Probability':n\/total})\n            rows.append(row)\n    return pd.DataFrame(rows)","60a8ca31":"fig, ax= plt.subplots(figsize=(10,7))\nsns.barplot(data = probability(['Scholarship', 'Hypertension','Diabetes','Alcoholism','Handicap']),\n           x = 'Condition', y='Probability', hue ='Level', palette ='Set1' )\nplt.title('Probability of showing up')\nplt.ylabel('Probability')\nplt.show()","6dccae93":"# pie chart of the no-shows and shows for both genders\n\nfig,ax=plt.subplots(figsize=(10,7))\nlabels = ['No-Show - Female', 'Show - Female', 'Show - Male', 'No-Show - Male']\nsizes = [len(data[(data['Show'] ==0) & (data['Gender'] == 'F')]),len(data[(data['Show'] == 1) & (data['Gender'] == 'F')]),len(data[(data['Show'] == 1) & (data['Gender'] == 'M')]),len(data[(data['Show'] == 0) & (data['Gender'] == 'M')])]\nplt.pie(sizes, labels=labels, autopct='%1.1f%%')\nplt.show()","19338511":"#Day of the week\n\ndf = data[data['Show']==1]\ndf = df[['DayOfTheWeek','Show']]\nday_group = df.groupby(['DayOfTheWeek'])\nday_total = day_group.sum()\nday_total.reset_index(inplace=True)\nday_total.sort_values('Show',ascending=False,inplace=True)\n\nfig, ax = plt.subplots(figsize=(10,8))\nsns.barplot(x = 'DayOfTheWeek', y='Show', data =day_total,palette ='Set1')\nplt.title('Number of patients showed up')\nplt.ylabel('Number')\nplt.show()","d430d1cb":"# Number of patients for each neighbourhood\ndf = data[data['Show']==1]\ndf = df[['Neighbourhood','Show']]\nNei_grp = df.groupby(['Neighbourhood'])\ntotal = Nei_grp.sum()\ntotal.reset_index(inplace=True)\ntotal.sort_values('Show',ascending=False,inplace=True)\nfig,ax=plt.subplots(figsize=(20,16))\nsns.barplot(x='Neighbourhood', y='Show', data=total, ax=ax )\nplt.xticks(rotation=80)\nplt.title('Number of patients showed up')\nplt.ylabel('Number')\nplt.show()","d9f18f58":"# Patients who received and not received the SMS notification\ndf = data[data['Show']==1]\ndf = df[['SMS_received','Show']]\nSMS_grp = df.groupby(['SMS_received'])\ntotal = SMS_grp.sum()\ntotal.reset_index(inplace=True)\ntotal.sort_values('Show',ascending=False,inplace=True)\nfig,ax=plt.subplots(figsize=(10,7))\nsns.barplot(x='SMS_received', y='Show', data=total, ax=ax )\nplt.title('Number of patients showed up')\nplt.ylabel('Number')\nplt.show()","f36377f0":"# Distribution of Age\nplt.figure(figsize=(10,8))\nsns.distplot(data['Age'], bins=10, kde=False)\nplt.xlabel(\"Age\")\nplt.ylabel(\"Patients\")\nplt.title('Distribution of Age')\nplt.show()","6fcc87f8":"#Distribution of Age with respect to Gender\nfig, ax = plt.subplots(figsize=(10,8))\ndf = data[data.Show == 1]\nrange_df = pd.DataFrame()\nrange_df['Age'] = range(100)\nmen = range_df.Age.apply(lambda x: len(df[(df.Age == x) & (df.Gender == 'M')]))\nwomen = range_df.Age.apply(lambda x: len(df[(df.Age == x) & (df.Gender == 'F')]))\nplt.plot(range(100),men, 'b')\nplt.plot(range(100),women, color = 'r')\nplt.legend(['M','F'])\nplt.xlabel('Age')\nplt.title('Women visit the doctor more often')\nplt.show()","b78d3fa5":"#Age wise distribution of diseases\nfig, ax = plt.subplots(nrows =2, ncols=2, figsize=(15,10))\ndf_hyper = data[data['Hypertension']==1]\ndf_hyper = df_hyper[['Hypertension','Age']]\n\ndf_diab = data[data['Diabetes']==1]\ndf_diab = df_diab[['Diabetes','Age']]\n\ndf_alco = data[data['Alcoholism']==1]\ndf_alco = df_alco[['Alcoholism','Age']]\n\ndf_handi= data[data['Handicap']==1]\ndf_handi = df_handi[['Handicap','Age']]\n\n\nsns.distplot(df_hyper['Age'], bins=10, kde=False,ax=ax[0,0])\nax[0,0].set_xlabel(\"Age\")\nax[0,0].set_ylabel(\"Patients of Hypertension\")\nax[0,0].set_title('Distribution of Age with Hypertension')\n\nsns.distplot(df_diab['Age'], bins=10, kde=False,ax=ax[0,1])\nax[0,1].set_xlabel(\"Age\")\nax[0,1].set_ylabel(\"Patients of Diabetes\")\nax[0,1].set_title('Distribution of Age with Diabetes')\n\nsns.distplot(df_alco['Age'], bins=10, kde=False,ax=ax[1,0])\nax[1,0].set_xlabel(\"Age\")\nax[1,0].set_ylabel(\"Patients of Alcoholism \")\nax[1,0].set_title('Distribution of Age with Alcoholism')\n\nsns.distplot(df_handi['Age'], bins=10, kde=False,ax=ax[1,1],)\nax[1,1].set_xlabel(\"Age\")\nax[1,1].set_ylabel(\"Patients of Handicap\")\nax[1,1].set_title('Distribution of Age with Handicap')\nplt.show()","f3b2b7c7":"<font size='4'> From the above plot we can see that there are some patients who have to wait for even more than 4 months to get the appointment. The patients with more than 150 days awaiting days can be **outliers** therefore we drop them.","c18f8c60":"### Feature quality by calculalting the percentage of patients who showed up","cd4ac01a":"<font size='4'>There are many patients with the duplicate records it may deviate our accuracy. Therefore we remove them using following code.<\/font>","0a20a0b9":"<font size='4'> The above Histogram explains that there are two interval **0-10** and **50-60** with more than **8000** patients each.","46a60535":"# STEP I : Data Wrangling","43f5e4f2":"\n## Dataset - Medical Appointment No-Show\n## Institute Name - LNMIIT\n## Team: 16ucs218 - Sankalp Wakodikar; 16ucs217 - Vyapak Goyal; 16ucs211 - Vikas Chandak; 16ucs113 - Mukul Agrawal\n<font size=\"4\">We have taken the 1st project i.e. **Data Preprocessing and Preliminary Analysis**. We picked the dataset from [Kaggle](https:\/\/www.kaggle.com\/joniarroba\/noshowappointments). To complete this project we took help from various Data Science Platform like [Stack Exchange](https:\/\/datascience.stackexchange.com\/), [Analytics Vidhya](https:\/\/www.analyticsvidhya.com\/), [Kdnuggets chat groups](https:\/\/www.kdnuggets.com\/) and various Kaggle kernels. We have used different python libraries like **Pandas**, **Numpy**, **Seaborn** and **Matplotlib** to analyze and visualize the data. We have devided the project into two parts : 1. **Data Wrangling** and 2. **Data Exploration and Visualization**. Data Wrangling is done to clean the raw and complex data for easy access and analysis. Data Exploration is done to take out the possible inferences from the modified data and visualize them using plots.<\/font>\n\n","645ae9d5":"<font size='4'> From the above subplots we can see that people in the age group of **50-70** have visited the doctor more due to different type of diseases or diability<\/font>","a9d44844":"<font size='4'> From the above Barplot we can see that people with the Diabetes , Hypertension or are handicap showed up more in comparison to those who are fit and fine.","8f190170":"<font size='4'> The above Barplot shows that **Tuesday** is the day when more  patients visit the doctor and  **Saturday** is the one when approximately none of the patient visits the doctor.<\/font> ","e465486a":"# STEP II : Data Exploration and Visualization","0948fcb5":"<font size=\"4\"> There are total **14 features** and **110527 objects** in the dataset. From those features **1** is of type **float**, **8** are of **integer** and **5** are of **string**.  We can also see that there are not any null values in any of the features.<\/font>","87fa3556":"<font size='4'> From the above plot we can conclude that women speciallly who are in the age interval of 50-60 visit the doctor more then men of any age group.<\/font>","7cadab77":"<font size='4'> The above Piechart shows that women visit the doctor more often in comparison to men.<\/font> ","822d8cb7":"<font size='4'> From the above bar plot it is clear that **Jardim Camburi**  has the highest i.e. more than **3000** patients. Next is **Maria Ortiz** with more than **2500** patients.<\/font>","ef7ee7d7":"<font size='4'> Above Barplot shows that the patients **who did not receive SMS notification are more** as compared to those who did receive the notification and this is obvious that the patients who did not receive notification they will go and check whether their appointment is confirmed or not. ","d60b0952":"<font size='4'>Now we are ready with the modified data which is more easily accessable and less complex to analyze. From the modified data we may have some question about the data variations with respect to each feature like **What is the number of female and male patients who showed and not-showed for the appointment?**, **What is the probability of patients who showed up having different diseases?**, **Which day of the week have the most patients?**, **From which Neighbourhood most patients come?**, **How many patients showed up after receiving a SMS notification** and many more.  <\/font>  ","789c0c33":"<font size='4'> In the above Piechart we can see that approximately **20%** of the patients do not show up to the clinic after taking the appointment.<\/font>","aceb8398":"**Importing the libraries and dataset**\n","4dce5e47":"<font size='4'>From above DataFrame we can see that there are a few spelling mistakes in the feature names. Next we will try to rename the features with correct spellings. <\/font>","816cb67e":"<font size='4'>While working on the Medical Appointment Dataset we found that data needs to be cleaned therefore we droped all the duplicate , outliers and null values. <\/font>\n<font size ='4'> After analyzing and visulizing dataset for different features we conclude a few below points : <\/font>\n*  There are 20% patients who do not show up to the doctor after taking the appointment\n*   More women as compared to men visits the doctor. \n*  People is the age group of 50-70 suffer more from Alcoholism, Diabetes and Hypertension which is obvious.\n*  Jardim Camburi is the place which has the most number of patients.\n*  Tuesday is the week of the day when most patients prefer to come to doctor.\n*  Patients who do not receive the SMS and come to doctor are more in number then who do receive the SMS.","f9bc76e9":"<font size='4'> We are remaining with only **60115** objects out of **110527** before cleaning the data. <\/font>\n","475a8d40":"<font size='4'> From the above output we can see that **Age** has some values like -1, and 0. **Handicap** has values 2,3,4 which are not feasible. Therefore we delete them.  <\/font>"}}