{"cell_type":{"6bc86376":"code","4a9af621":"code","c0cf1f35":"code","f7bd7d15":"code","802a0ca9":"code","1a10ae37":"code","f2066948":"code","ed30ec3d":"code","ac8ca2b5":"code","6b4f4fd0":"code","c9078dd8":"code","2bcae5af":"code","cfb42c57":"code","c9195d1b":"code","dac8087e":"code","6aceb5e0":"code","b58df507":"code","51e0af32":"code","5c619cb2":"code","6c965a7d":"code","a41d20a3":"code","474e68e5":"code","77617e56":"code","adaed37f":"code","7558166b":"code","45fd8e15":"code","d6656e8c":"code","9935b2c8":"code","822b9bda":"code","2b0f1bc5":"code","1848f646":"code","991798ee":"code","a594a331":"code","1f09b404":"code","ff120c15":"code","2e55e267":"code","3d359bf5":"code","bba0dfce":"code","db6f66aa":"code","11921b54":"code","75eb73bd":"code","4e140b03":"code","041d5bdd":"code","24270506":"code","43fb6ab3":"code","837eddb7":"code","74294a91":"code","0fc7d725":"code","d4b72f39":"code","1d94041e":"code","e4f19419":"code","86923069":"code","9dafddab":"code","68a3ea0d":"code","207ab606":"code","fe13f22a":"code","89dab4b7":"code","3ba33f3a":"code","15f4b85d":"code","24c486c6":"code","5a0b851c":"code","b0654341":"code","88d379f8":"code","87edcc50":"code","8651a6c9":"code","7b08f750":"code","d12176d2":"code","a60d7d96":"code","7229c67c":"code","f17d1b33":"code","cee87fda":"code","2c01a40f":"code","c8d20887":"code","ba977958":"code","c67f7202":"code","8b6c9e8b":"code","cf9441b0":"code","85c82a79":"code","c90ef25f":"code","143f5207":"code","0d24d12e":"code","9df78c13":"code","5bd206f9":"code","03df493f":"code","ea449c55":"code","da987c20":"code","63c5961c":"code","be7d9687":"code","bf1445a7":"code","105de436":"code","9cf082e9":"code","367c87eb":"code","53263641":"code","0a893b8d":"code","67e68e18":"code","c981a69e":"code","d6cc93d3":"code","2c255698":"code","770ef732":"code","30123153":"code","f737bf19":"code","138dec94":"code","2633a4b9":"code","79256c26":"code","c43d5d4d":"markdown","2ec261fb":"markdown","e133d53e":"markdown","0b5f83cc":"markdown","c227d109":"markdown","6099e296":"markdown","5f56c12e":"markdown","6a4576ca":"markdown","a8761ae5":"markdown","e6ba95b2":"markdown","f86f663b":"markdown","32374d85":"markdown","09c1bec2":"markdown","1ee824fe":"markdown","caaa4b3e":"markdown","f4094cdf":"markdown","110b4ca6":"markdown","83890ac2":"markdown","f0115229":"markdown","7c119a2d":"markdown","803504d7":"markdown","35f96175":"markdown","ccf9ef8f":"markdown","a09f8913":"markdown","bf48b612":"markdown","55661167":"markdown","97650741":"markdown","35d9bb02":"markdown","7276a075":"markdown","993a5f7a":"markdown","b0e8e854":"markdown","d2adbc09":"markdown","acbaf832":"markdown","c26616f8":"markdown","6d721d64":"markdown","a5cfe223":"markdown","e1dcfc7c":"markdown","522d33cc":"markdown","e2c16870":"markdown","d25bd6a2":"markdown","568cba86":"markdown","ef5226ff":"markdown","11eeb7c1":"markdown","d916f70b":"markdown","a54cf8df":"markdown","c100cdcc":"markdown","f4a5d1a5":"markdown","a4ea0a96":"markdown","6b41ce2f":"markdown","ea09e630":"markdown","d4f6595a":"markdown","f4cd60bd":"markdown","65f0737f":"markdown","12e2348c":"markdown","fe6d6cc6":"markdown","4229528e":"markdown","a8d8887b":"markdown","12b74aa1":"markdown","fb641f35":"markdown","3b84433a":"markdown","7bf61bf3":"markdown","6b1d0e08":"markdown","a0486482":"markdown","6f92237f":"markdown","c078f0c6":"markdown","51d249c6":"markdown","677432ef":"markdown","50195029":"markdown","2958a2e5":"markdown","f83d09ca":"markdown","f1a92ee9":"markdown","5cacac79":"markdown","d359d516":"markdown","6fbee32c":"markdown","1f99e9cc":"markdown","a4a36b28":"markdown","7e0b57cb":"markdown","266037eb":"markdown","30dbdbd9":"markdown","afdac18c":"markdown","46986b0b":"markdown","376ffe94":"markdown","e1a5abd9":"markdown","87c301d0":"markdown","808f21cb":"markdown","6af38bbb":"markdown","b5334f8e":"markdown","5c8c8ac6":"markdown","242799bf":"markdown","837d333e":"markdown","1122d2f5":"markdown","f1735f59":"markdown","c2d5a5d7":"markdown","0fb93aa6":"markdown","5b18927c":"markdown","0ff97b61":"markdown","f53acd7c":"markdown","c50532e1":"markdown","7393ba07":"markdown","7468ad24":"markdown","15081548":"markdown","ce8ca8bb":"markdown","144c8799":"markdown","d5b33f43":"markdown","89342d61":"markdown","7dd51a61":"markdown","e5f59be9":"markdown","5c10ee1c":"markdown","439ce444":"markdown","c5806e04":"markdown","863a9837":"markdown","06d0ef77":"markdown","fa84a710":"markdown","52cc9970":"markdown","f10db21a":"markdown","7f1f0cc2":"markdown","b83f6ab4":"markdown","94ea5401":"markdown","8f53f1b4":"markdown","ee1c4a90":"markdown","c8b2e2cf":"markdown","bc796e1a":"markdown","be107ab2":"markdown","389d2e93":"markdown","443320c0":"markdown","92fdd901":"markdown","244e0210":"markdown","17d93903":"markdown","09721067":"markdown","20ef0235":"markdown","5bf36e4a":"markdown","e8e7d676":"markdown","37739f3e":"markdown","bebe1d00":"markdown","8d0cfa52":"markdown","457f2b98":"markdown","ed56f9fd":"markdown","74e63845":"markdown","1423c25e":"markdown"},"source":{"6bc86376":"import time\nimport os\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\n%matplotlib inline","4a9af621":"os.listdir('..\/input')","c0cf1f35":"base_path = '..\/input\/'","f7bd7d15":"train_data = pd.read_csv(base_path+'train.csv')\ntest_data = pd.read_csv(base_path+'test.csv')\nstore_data = pd.read_csv(base_path+'store.csv')","802a0ca9":"train_data.Date = pd.to_datetime(train_data.Date)\ntest_data.Date = pd.to_datetime(test_data.Date)\nstore_data['PromoInterval'] = store_data['PromoInterval'].astype(str)","1a10ae37":"train_data.head(5)","f2066948":"test_data.head(5)","ed30ec3d":"store_data.head(5)","ac8ca2b5":"train_data.info()","6b4f4fd0":"test_data.info()","c9078dd8":"store_data.info()","2bcae5af":"store_data[store_data['CompetitionDistance'].isnull()]","cfb42c57":"store_data[store_data['CompetitionOpenSinceMonth'].isnull()][:5]","c9195d1b":"store_data[store_data['Promo2SinceWeek'].isnull()][:5]","dac8087e":"test_data.Open.fillna(1, inplace=True)","6aceb5e0":"store_data.CompetitionOpenSinceYear.fillna(store_data.CompetitionOpenSinceYear.median(), inplace=True)\nstore_data.CompetitionOpenSinceMonth.fillna(store_data.CompetitionOpenSinceMonth.median(), inplace=True)","b58df507":"store_data.CompetitionDistance.fillna(store_data.CompetitionDistance.median(), inplace=True)","51e0af32":"train_all = pd.merge(train_data, store_data)\ntrain_all.head(5)","5c619cb2":"train_all.info()","6c965a7d":"test_all = pd.merge(test_data, store_data)","a41d20a3":"test_all.info()","474e68e5":"train_all[train_all['Promo2']==0][:3]","77617e56":"train_all = train_all.sort_values(['Date'],ascending = False)","adaed37f":"train_all[:10] # \u6392\u5e8f\u6210\u529f\u7684\u8bdd\uff0c\u8fd9\u5341\u6761\u6570\u636e\u5e94\u8be5\u90fd\u662f2015\u5e747\u670831\u53f7\u7684\u4e0d\u540c\u5546\u5e97\u7684\u6570\u636e\u624d\u5bf9\u5427\uff0c\u5988\u5440\uff0c\u5751\u6b7b\u4eba\u4e86\u3002\u3002\u3002\u3002\u3002\u3002","7558166b":"def get_datetime_info(data):\n    '''\n    data:dataFrame\n    return year,quarter,month,day,weekOfYear,isWorkDay\n    '''\n    return (data.Date.apply(lambda date:date.year), \n            data.Date.apply(lambda date:date.quarter), \n            data.Date.apply(lambda date:date.month), \n            data.Date.apply(lambda date:date.day), \n            data.Date.apply(lambda date:date.weekofyear), \n            data.DayOfWeek.apply(lambda dow:dow<=6)) # \u5468\u65e5\u4e0d\u4e0a\u73ed","45fd8e15":"get_datetime_info(train_all[:1])","d6656e8c":"train_data.Date.min()","9935b2c8":"train_data.Date.max()","822b9bda":"train_data.Date.unique()[:10]","2b0f1bc5":"print('\u56fd\u5bb6\u653e\u5047\u5e73\u5747\u9500\u552e\u989d\uff1a'+str(train_data[train_data['SchoolHoliday'] == 1].Sales.mean()))\nprint('\u56fd\u5bb6\u4e0d\u653e\u5047\u5e73\u5747\u9500\u552e\u989d\uff1a'+str(train_data[train_data['SchoolHoliday'] == 0].Sales.mean()))","1848f646":"print('\u56fd\u5bb6\u653e\u5047\u5e73\u5747\u9500\u552e\u989d\uff1a'+str(train_data[train_data['StateHoliday'] != 0].Sales.mean()))\nprint('\u56fd\u5bb6\u4e0d\u653e\u5047\u5e73\u5747\u9500\u552e\u989d\uff1a'+str(train_data[train_data['StateHoliday'] == 0].Sales.mean()))","991798ee":"X=[]\nY=[]\nX_=[]\nY_=[]\ntrain_data_store1 = train_all[train_all.Store==1][::-1].reset_index()\ntrain_data_store1 = train_data_store1[:360]\nholiday_start = False\nholiday_end = False\nx_temp = []\ny_temp = []\nplt.figure(figsize=(15,15))\nfor i in range(len(train_data_store1)):\n    d = train_data_store1.loc[i]\n    if d.SchoolHoliday==1 and (i==0 or train_data_store1.loc[i-1].SchoolHoliday==0):\n        X.append(d.Date)\n        Y.append(9000)\n        holiday_start = True\n        holiday_end = False\n        x_temp = []\n        y_temp = []\n    if d.SchoolHoliday==0 and (i==len(train_data_store1)-1 or train_data_store1.loc[i-1].SchoolHoliday==1):\n        X.append(d.Date)\n        Y.append(9500)\n        holiday_end = True\n        holiday_start = False\n    if holiday_start and not holiday_end:\n        x_temp.append(d.Date)\n        y_temp.append(d.Sales)\n    if holiday_end and not holiday_start:\n        X_.append(x_temp)\n        Y_.append(y_temp)\n        holiday_end = False\n\nfor i in range(len(X_)):\n    plt.plot(X_[i], Y_[i])\nfor i in range(0, min(len(X), len(Y)), 2):\n    plt.plot(X[i:i+2], Y[i:i+2])\n        ","a594a331":"plt.figure(figsize=(15,15))\nplt.plot(train_all[train_all.Store==1].Date[:365], train_all[train_all.Store==1].Sales[:365])\nplt.plot(train_all[train_all.Store==1].Date[365:365+365], train_all[train_all.Store==1].Sales[365:365+365])","1f09b404":"plt.figure(figsize=(15,15))\nplt.scatter(train_data[train_data.Store==1].DayOfWeek[365:365+365], train_data[train_data.Store==1].Sales[365:365+365])","ff120c15":"print('1~5\u5e73\u5747\u9500\u552e\u989d\uff1a'+str(train_data[train_data['DayOfWeek'] <=5].Sales.mean()))\nprint('6\u5e73\u5747\u9500\u552e\u989d\uff1a'+str(train_data[train_data['DayOfWeek'] ==6].Sales.mean()))\nprint('7\u5e73\u5747\u9500\u552e\u989d\uff1a'+str(train_data[train_data['DayOfWeek'] ==7].Sales.mean()))","2e55e267":"def get_week_month_season_halfyear_year(train_data_store):\n    every_day = train_data_store1.Sales\n    last_weeks = []\n    last_months = []\n    last_seasons = []\n    last_halfyears = []\n    last_years = []\n    for i in range(len(every_day)):\n        # week\n        sales=0\n        count=1\n        for j in range(i, i-7 if i-7>0 else 0, -1):\n            sales+=every_day[j]\n            count+=1.\n        last_weeks.append(sales\/count)\n        # month\n        sales=0\n        count=1\n        for j in range(i, i-30 if i-30>0 else 0, -1):\n            sales+=every_day[j]\n            count+=1.\n        last_months.append(sales\/count)\n        # season\n        sales=0\n        count=1\n        for j in range(i, i-90 if i-90>0 else 0, -1):\n            sales+=every_day[j]\n            count+=1.\n        last_seasons.append(sales\/count)\n        # halfyear\n        sales=0\n        count=1\n        for j in range(i, i-180 if i-180>0 else 0, -1):\n            sales+=every_day[j]\n            count+=1.\n        last_halfyears.append(sales\/count)\n        # year\n        sales=0\n        count=1\n        for j in range(i, i-360 if i-360>0 else 0, -1):\n            sales+=every_day[j]\n            count+=1.\n        last_years.append(sales\/count)\n    return every_day, last_weeks, last_months, last_seasons, last_halfyears, last_years\n\ntrain_data_store1 = train_all[train_all['Store']==1][::-1].reset_index()\nevery_day, last_weeks, last_months, last_seasons, last_halfyears, last_years = get_week_month_season_halfyear_year(train_data_store1)\nplt.figure(figsize=(15,15))\nplt.plot(every_day, label='every day')\nplt.plot(last_weeks, label='week')\nplt.plot(last_months, label='month')\nplt.plot(last_seasons, label='season')\nplt.plot(last_halfyears, label='halfyear')\nplt.plot(last_years, label='year')\nplt.legend()\nplt.show()","3d359bf5":"pd.DataFrame([last_weeks, last_months, last_seasons, last_halfyears, last_years, \n              list(train_data_store1.Customers)]).corrwith(pd.Series(every_day), axis=1)","bba0dfce":"def is_in_promo(data):\n    '''\n    data:DataFrame\u3002\n    return:\u8fd4\u56debool\u503c\u7684Seris\u8868\u793a\u5f53\u524d\u662f\u5426\u5904\u4e8e\u6d3b\u52a8\u4e2d\u3002\n    '''\n    months_str = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    return data.apply(lambda d:False if d.Promo2==0 else (months_str[int(d.Month-1)] in d.PromoInterval), axis=1)","db6f66aa":"def get_promo_days(data):\n    '''\n    return:\u8fd4\u56de\u6d3b\u52a8\u5df2\u7ecf\u6301\u7eed\u7684\u5929\u6570\u7684Series\u3002\n    '''\n    return data.apply(lambda d:0 if not d.IsInPromo else d.Day, axis=1)","11921b54":"plt.figure(figsize=(15,15))\nplt.scatter(train_all[train_all['CompetitionDistance']<10000].CompetitionDistance, train_all[train_all['CompetitionDistance']<10000].Sales)","75eb73bd":"def get_competition_openmonths(data):\n    '''\n    return:\u8fd4\u56de\u622a\u6b62\u5f53\u524d\u7ade\u4e89\u5bf9\u624b\u7684\u5f00\u5f20\u65f6\u95f4\uff0c\u6708\u4e3a\u5355\u4f4d\u3002\n    '''\n    return data.apply(lambda d:(d.Year-d.CompetitionOpenSinceYear)*12+(d.Month-d.CompetitionOpenSinceMonth), axis=1)","4e140b03":"months = train_all.apply(lambda data:(data.Date.year - data.CompetitionOpenSinceYear)*12+(data.Date.month - data.CompetitionOpenSinceMonth), axis=1)\nplt.figure(figsize=(15,15))\nplt.scatter(months, train_all.Sales)","041d5bdd":"train_all['Year'], train_all['Quarter'], train_all['Month'], train_all['Day'], train_all['WeekOfYear'], train_all['IsWorkDay'] = get_datetime_info(train_all)","24270506":"test_all['Year'], test_all['Quarter'], test_all['Month'], test_all['Day'], test_all['WeekOfYear'], test_all['IsWorkDay'] = get_datetime_info(test_all)","43fb6ab3":"plt.figure(figsize=(15,15))\ntrain_all.groupby(['Quarter']).Sales.mean().plot()","837eddb7":"plt.figure(figsize=(15,15))\ntrain_all.groupby(['Month']).Sales.mean().plot()","74294a91":"plt.figure(figsize=(15,15))\ntrain_all.groupby(['WeekOfYear']).Sales.mean().plot()","0fc7d725":"train_all['IsInPromo'] = is_in_promo(train_all)\ntrain_all.IsInPromo.unique()","d4b72f39":"test_all['IsInPromo'] = is_in_promo(test_all)","1d94041e":"train_all['PromoDays'] = get_promo_days(train_all)\ntrain_all.PromoDays.unique()","e4f19419":"test_all['PromoDays'] = get_promo_days(test_all)","86923069":"plt.figure(figsize=(15,15))\ntrain_all.groupby(['IsInPromo']).Sales.mean().plot()","9dafddab":"plt.figure(figsize=(15,15))\ntrain_all.groupby(['PromoDays']).Sales.mean().plot()","68a3ea0d":"train_all['CompetitionOpenMonths'] = get_competition_openmonths(train_all)\ntrain_all.CompetitionOpenMonths.unique()[:10]","207ab606":"test_all['CompetitionOpenMonths'] = get_competition_openmonths(test_all)","fe13f22a":"drop_cols = ['Date', 'Promo2SinceWeek', 'Promo2SinceYear', 'PromoInterval', \n             'CompetitionOpenSinceMonth', 'CompetitionOpenSinceYear', 'Store']\ntrain_all.drop(drop_cols+['Customers'], axis=1, inplace=True)\ntest_all.drop(drop_cols, axis=1, inplace=True)","89dab4b7":"train_all.columns","3ba33f3a":"test_all.columns","15f4b85d":"# train_all.head(3)\n# train_all = pd.get_dummies(train_all, columns=['StateHoliday', 'StoreType', 'Assortment'])\n# train_all.info()\n# test_all = pd.get_dummies(test_all, columns=['StateHoliday', 'StoreType', 'Assortment'])\n# test_all.info()","24c486c6":"code_map = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, '0':0, \n           1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 0:0}\ntrain_all.StateHoliday = train_all.StateHoliday.map(code_map)\ntrain_all.StoreType = train_all.StoreType.map(code_map)\ntrain_all.Assortment = train_all.Assortment.map(code_map)\n\ntest_all.StateHoliday = test_all.StateHoliday.map(code_map)\ntest_all.StoreType = test_all.StoreType.map(code_map)\ntest_all.Assortment = test_all.Assortment.map(code_map)\n\nprint(train_all.StateHoliday.unique())\nprint(test_all.Assortment.unique())","5a0b851c":"#plt.figure(figsize=(15,15))\n#plt.plot(train_all.CompetitionDistance)","b0654341":"print('min:'+str(train_all.CompetitionDistance.min()))","88d379f8":"print('max:'+str(train_all.CompetitionDistance.max()))","87edcc50":"# train_all.CompetitionDistance = ((train_all.CompetitionDistance - train_all.CompetitionDistance.min())\/(train_all.CompetitionDistance.max() - train_all.CompetitionDistance.min()))\n# test_all.CompetitionDistance = ((test_all.CompetitionDistance - test_all.CompetitionDistance.min())\/(test_all.CompetitionDistance.max() - test_all.CompetitionDistance.min()))\n# print 'min:'+str(train_all.CompetitionDistance.min())\n# print 'max:'+str(train_all.CompetitionDistance.max())\n# print 'mean:'+str(train_all.CompetitionDistance.mean())","8651a6c9":"target_all = train_all.Sales\ntarget_all.head(5)","7b08f750":"train_all = train_all.drop('Sales', axis=1)\nprint('Sales' in train_all.columns)","d12176d2":"#from sklearn.cross_validation import train_test_split\n\n#x_train, x_valid, y_train, y_valid = train_test_split(train_all, target_all, test_size=0.1)\n\nx_valid = train_all[:1115*6*7]\nx_train = train_all[1115*6*7:]\ny_valid = target_all[:1115*6*7]\ny_train = target_all[1115*6*7:]\n\n# y\u505a\u5bf9\u6570\u5904\u7406\uff0c\u6570\u636e\u5206\u5e03\u8f6c\u6362\ny_train = np.log1p(y_train)\ny_valid = np.log1p(y_valid)","a60d7d96":"x_train[:5]","7229c67c":"x_valid[:5]","f17d1b33":"pred_base = np.expm1(y_train).mean()\nprint('\u57fa\u51c6\u6a21\u578b\u9884\u6d4b\u503c\uff1a'+str(pred_base))","cee87fda":"def rmspe(y_pred, y_real):\n    y_pred = list(y_pred)\n    y_real = list(y_real)\n    for i in range(len(y_real)):\n        if y_real[i]==0:\n            y_real[i], y_pred[i] = 1., 1.\n    return np.sqrt(np.mean((np.divide(np.subtract(y_real, y_pred),y_real))**2))","2c01a40f":"print('\u57fa\u51c6\u6a21\u578b\u7684RMSPE\uff1a'+str(rmspe([pred_base]*len(y_valid), np.expm1(y_valid))))","c8d20887":"import xgboost as xgb\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold","ba977958":"train_matrix = xgb.DMatrix(x_train, y_train)\nvalid_matrix = xgb.DMatrix(x_valid, y_valid)\nwatchlist = [(train_matrix, 'train'), (valid_matrix, 'valid')]","c67f7202":"ps_first = {\n    'max_depth':5,\n    'learning_rate':.3,\n    'n_estimators':5000,\n    'objective':'reg:linear',\n    'booster':'gbtree',\n    'gamma':0,\n    'min_child_weight':1,\n    'subsample':1,\n    'colsample_bytree':1,\n    'random_state':6,\n    'silent':True\n}\n\nparams_first = {\n    \"objective\": \"reg:linear\",\n    \"booster\" : \"gbtree\",\n    \"eta\": 0.1,\n    \"max_depth\": 5,\n    \"silent\": 1,\n    \"seed\": 6}\nnum_boost_round_first = 1000","8b6c9e8b":"def train(params, num_boost_round):\n    print('XGBoost Model Train Start....')\n    start_time = time.time()\n    model = xgb.train(params, train_matrix, num_boost_round, evals=watchlist, early_stopping_rounds=100)\n    print('XGBoost Model Train End, Time: {:4f} s....'.format(time.time()-start_time))\n    return model\n\ndef train2(ps, x, y, x_test, y_test):\n    print('XGBRegressor Train Start....')\n    start_time = time.time()\n    model = XGBRegressor(max_depth=ps['max_depth'], learning_rate=ps['learning_rate'], \n                         n_estimators=ps['n_estimators'],objective=ps['objective'], silent=ps['silent'],\n                         booster=ps['booster'], gamma=ps['gamma'], min_child_weight=ps['min_child_weight'],\n                         subsample=ps['subsample'], colsample_bytree=ps['colsample_bytree'],\n                        random_state=ps['random_state'], n_jobs=-1)\n    model.fit(x, y, early_stopping_rounds=100, eval_set=[(x_test,y_test)], verbose=True)\n    print('XGBRegressor Train End, Time: {:4f} s....'.format(time.time()-start_time))\n    return model","cf9441b0":"#model_first = train(params_first, num_boost_round_first)\nmodel_first = train2(ps_first, x_train, y_train, x_valid, y_valid)","85c82a79":"def cv(params, num_boost_round):\n    print('XGBoost Model cv Start....')\n    start_time = time.time()\n    cv = xgb.cv(params, train_matrix, num_boost_round, early_stopping_rounds=100)\n    print('XGBoost Model cv End, Time: {:4f} s....'.format(time.time()-start_time))\n    return cv","c90ef25f":"def predict(model, x_valid, y_valid):\n    print('XGBoost Model Valid Start....')\n    start_time = time.time()\n    pred_valid = model.predict(xgb.DMatrix(x_valid))\n    rmspe_value = rmspe(np.expm1(pred_valid), np.expm1(y_valid))\n    print('Valid RMSPE:'+str(rmspe_value))\n    print('XGBoost Model Valid End, Time: {:4f} s....'.format(time.time()-start_time))\n    return pred_valid, rmspe_value\n\ndef predict2(model, x_valid, y_valid):\n    print('XGBoost Model Valid Start....')\n    start_time = time.time()\n    pred_valid = model.predict(x_valid)\n    rmspe_value = rmspe(np.expm1(pred_valid), np.expm1(y_valid))\n    print('Valid RMSPE:'+str(rmspe_value))\n    print('XGBoost Model Valid End, Time: {:4f} s....'.format(time.time()-start_time))\n    return pred_valid, rmspe_value\n    \npred_valid_first, rmspe_first = predict2(model_first, x_valid, y_valid)","143f5207":"model_first.save_model('.\/model\/first.model')","0d24d12e":"ps_opt_estimators = {\n    'max_depth':5,\n    'learning_rate':.3,\n    'n_estimators':1100,\n    'objective':'reg:linear',\n    'booster':'gbtree',\n    'gamma':0,\n    'min_child_weight':1,\n    'subsample':1,\n    'colsample_bytree':1,\n    'random_state':6,\n    'silent':True,\n}","9df78c13":"param_grid_maxdepth_minchildweight = {\n 'max_depth':[5, 7, 9],\n 'min_child_weight':[1, 3, 5]\n}","5bd206f9":"def gridSearch(ps, param_grid, X, Y):\n    print('XGBRegressor Grid Search Start....')\n    start_time = time.time()\n    model = XGBRegressor(max_depth=ps['max_depth'], learning_rate=ps['learning_rate'], \n                         n_estimators=ps['n_estimators'],objective=ps['objective'], silent=ps['silent'],\n                         booster=ps['booster'], gamma=ps['gamma'], min_child_weight=ps['min_child_weight'],\n                         subsample=ps['subsample'], colsample_bytree=ps['colsample_bytree'], random_state=ps['random_state'], n_jobs=-1)\n    \n    grid_search = GridSearchCV(model, param_grid, n_jobs=-1, cv=3)\n    grid_result = grid_search.fit(X, Y)\n    \n    print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n    \n    print('XGBRegressor Grid Search End, Time: {:4f} s....'.format(time.time()-start_time))\n    return grid_result\n\ngrid_result = gridSearch(ps_opt_estimators, param_grid_maxdepth_minchildweight, x_train, y_train)","03df493f":"ps_opt = {\n    'max_depth':9,\n    'learning_rate':.03,\n    'n_estimators':6000,\n    'objective':'reg:linear',\n    'booster':'gbtree',\n    'subsample':.9,\n    'colsample_bytree':.7,\n    'random_state':6,\n    'silent':True,\n}\n\nparams_opt = {\n    \"objective\": \"reg:linear\",\n    \"booster\" : \"gbtree\",\n    \"eta\": 0.03,\n    \"max_depth\": 10,\n    'subsample':.9,\n    'colsample_bytree':.7,\n    \"silent\": 1,\n    \"seed\": 6}\n\nmodel_opt = train2(ps_opt,  x_train, y_train, x_valid, y_valid)\npred_valid_opt, rmspe_opt = predict2(model_opt, x_valid, y_valid)\n\n#model_opt = train(params_opt, 6000)","ea449c55":"model_opt.save_model('\/home\/kael\/projects\/model\/opt.model","da987c20":"plt.figure(figsize=(15,15))\nplt.scatter(range(len(np.expm1(pred_valid)[::1115])), np.expm1(pred_valid)[::1115], color='red')\nplt.scatter(range(len(np.expm1(y_valid)[::1115])), np.expm1(y_valid)[::1115], color='blue')","63c5961c":"np.mean(np.abs(np.expm1(pred_valid)-np.expm1(y_valid)))","be7d9687":"np.mean(np.expm1(pred_valid)-np.expm1(y_valid))","bf1445a7":"def get_fix_actor(pred_valid, y_valid):\n    results = {}\n    for actor in [0.990+i\/1000. for i in range(20)]:\n        results[actor]=rmspe(y_pred=np.expm1(pred_valid)*actor, y_real=np.expm1(y_valid))\n    return sorted(results.items(),key = lambda x:x[1],reverse = True)[-1]\n\nprint '\u6821\u6b63\u524d\uff1a'+str(rmspe(np.expm1(pred_valid), np.expm1(y_valid)))\nprint '\u6821\u6b63\u540e\uff1a'\nactor_score = get_fix_actor(pred_valid, y_valid)\nprint actor_score","105de436":"plt.figure(figsize=(15,15))\nplt.scatter(range(len(np.expm1(pred_valid)[::1115])), np.expm1(pred_valid)[::1115], color='red')\nplt.scatter(range(len(np.expm1(pred_valid)[::1115])), np.expm1(pred_valid*actor_score[0])[::1115], color='blue')\nplt.scatter(range(len(np.expm1(y_valid)[::1115])), np.expm1(y_valid)[::1115], color='green')","9cf082e9":"num_model = 5\n\nprint 'XGBoost XModel Train Start....'\nstart_time = time.time()\nmodels = []\nfor i in range(num_model):\n    params = {\n        'objective':'reg:linear', \n        'booster':'gbtree', # \u6ce8\u610f\u6b64\u5904\u7684\u63d0\u5347\u65b9\u5f0f\uff0c\u4fdd\u8bc1\u4e86\u6211\u4eec\u4e4b\u524d\u4e00\u4e9b\u7c7b\u522b\u5b57\u6bb5\u6620\u5c04\u523001234\u4e5f\u662f\u53ef\u884c\u7684\uff0c\u800c\u4e0d\u9700\u589e\u52a0\u7ef4\u5ea6\n        'eta':.03,\n        'max_depth':10,\n        'subsample':.9,\n        'colsample_bytree':.7,\n        'silent':1,\n        'seed':10000+i\n    }\n    num_boost_round = 5000\n    model = xgb.train(params, train_matrix, num_boost_round, evals=watchlist, \n                  early_stopping_rounds=100)\n    models.append(model)\n\nprint 'XGBoost XModel Train End, Time: {:4f} s....'.format(time.time()-start_time)","367c87eb":"actor_scores = []\nfor i in range(len(models)):\n    pred_valid = models[i].predict(xgb.DMatrix(x_valid))\n    actor_scores.append(get_fix_actor(pred_valid, y_valid))","53263641":"actor_scores","0a893b8d":"weights = []\nfor i in range(len(actor_scores)):\n    weights.append(actor_scores[i][1])\nweights = [sum(weights)-w for w in weights]\nweights = [1.*w\/sum(weights) for w in weights]","67e68e18":"weights","c981a69e":"def predict_x(x_valid):\n    preds = []\n    for m in models:\n        preds.append(m.predict(xgb.DMatrix(x_valid)))\n    for i in range(len(preds)):\n        preds[i] = [p*actor_scores[i][0]*weights[i]for p in preds[i]]\n    final_pred = []\n    for i in range(len(preds[0])):\n        p=0\n        for j in range(len(preds)):\n            p+=preds[j][i]\n        final_pred.append(p)\n    return final_pred\n\nprint 'X\u6a21\u578b\u878d\u5408RMSPE:'+str(rmspe(np.expm1(predict_x(x_valid)), np.expm1(y_valid)))","d6cc93d3":"for i in range(len(models)):\n    models[i].save_model('\/home\/kael\/projects\/model\/model_'+str(i)+'.model')","2c255698":"plt.figure(figsize=(15,15))\nsingal_model_pred_valid = model.predict(xgb.DMatrix(x_valid))*actor_score[0]\nx_model_pred_valid = predict_x(x_valid)\nplt.scatter(range(len(y_valid[:100])), np.expm1(singal_model_pred_valid[:100]), color='red')\nplt.scatter(range(len(y_valid[:100])), np.expm1(x_model_pred_valid[:100]), color='blue')\nplt.scatter(range(len(y_valid[:100])), np.expm1(y_valid[:100]), color='green')","770ef732":"test_id = test_all.Id\ntest_all.drop(['Id'], axis=1, inplace=True)","30123153":"pd.DataFrame({'Id':test_id, 'Sales':pd.Series([pred_base]*len(test_id))}).to_csv('submission_base.csv', index=False)","f737bf19":"pred_test = model.predict(xgb.DMatrix(test_all))\npred_test = pred_test*actor_score[0] # \u6821\u6b63\u7cfb\u6570","138dec94":"pd.DataFrame({'Id':test_id, 'Sales':np.expm1(pred_test)}).to_csv('submission.csv', index=False)","2633a4b9":"pred_x_test = predict_x(test_all)","79256c26":"pd.DataFrame({'Id':test_id, 'Sales':np.expm1(pred_x_test)}).to_csv('submission_x.csv', index=False)","c43d5d4d":"### \u6a21\u578b\u4f18\u5316","2ec261fb":"### \u65e5\u671f\u4fe1\u606f\uff1a\u63d0\u53d6\u5e74\u3001\u6708\u3001\u65e5\u3001WeekOfYear\uff08\u5bf9\u5e94Promo2SinceWeek\uff09\u3001\u662f\u5426\u5de5\u4f5c\u65e5\n\n\u5bf9\u4e8e\u65f6\u95f4\u5b57\u6bb5\uff0c\u6700\u65e9\u6211\u7684\u505a\u6cd5\u662f\u5c06\u5176\u5f53\u505a\u679a\u4e3e\u6765\u5904\u7406\uff0c\u8fd9\u4e48\u505a\u6709\u4e24\u4e2a\u95ee\u9898\uff1a\n1. \u679a\u4e3e\u91cf\u5f88\u5927\uff0c\u5f71\u54cd\u540e\u7eedPCA\u7b49\u7684\u6548\u679c\uff0c\u5b9e\u9645\u4e0a\u5982\u679c\u7279\u5f81\u6570\u91cf\u6709\u9650\u5c31\u4e0d\u9700\u8981PCA\u4e86\uff0c\u6bd5\u7adfPCA\u7b97\u662f\u727a\u7272\u4e86\u4e00\u90e8\u5206\u6570\u636e\u8868\u73b0\u3002\n2. \u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\u5728\u679a\u4e3e\u53d8\u91cfOne-Hot\u540e\u4e0d\u80fd\u5bf9\u9f50\u3002\n3. \u6ca1\u6709\u771f\u6b63\u5bf9\u65e5\u671f\u4fe1\u606f\u8fdb\u884c\u6df1\u5ea6\u7684\u6316\u6398\u3002\n\n\u6700\u91cd\u8981\u7684\u662f\u65f6\u95f4\u5e8f\u5217\u5b57\u6bb5\u5bf9\u4e8e\u9884\u6d4b\u7684\u5f71\u54cd\u5e94\u8be5\u662f\u5f88\u5927\u7684\uff0c\u56e0\u4e3a\u5546\u5e97\u7684\u9500\u552e\u5e94\u8be5\u662f\u5177\u6709\u5b63\u8282\u6027\u3001\u65e5\u671f\u7279\u6b8a\u6027\u7684\uff0c\u6bd4\u5982\u8282\u5047\u65e5\u3001\u5b63\u8282\u7b49\uff0c\u56e0\u6b64\uff0c\u901a\u8fc7\u5df2\u6709\u4fe1\u606f\u6316\u6398\u8fd9\u90e8\u5206\u4fe1\u606f\u51fa\u6765\u4f5c\u4e3a\u65b0\u7279\u5f81\uff0c\u7136\u540e\u629b\u5f03\u539f\u6709\u7684\u8f83\u539f\u59cb\u7684\u4fe1\u606f\u5bf9\u4e8e\u6211\u4eec\u7684\u6a21\u578b\u6765\u8bf4\u5e2e\u52a9\u66f4\u5927\u3002\n\n\u63d0\u53d6\u5b57\u6bb5\uff1a\n1. Year\u3002\n2. Quarter\u3002\n3. Month\u3002\n4. Day\u3002\n5. WeekOfYear\u3002\n6. IsWorkDay\u3002","e133d53e":"RMSPE\u503c\u8fbe\u52300.1646\uff0c\u82b1\u8d39\u65f6\u95f44s\uff0c\u57fa\u672c\u4e0e\u8bad\u7ec3\u65f6\u770b\u5230\u7684\u6570\u636e\u76f8\u7b26\uff0c\u4e5f\u5c31\u662f\u7565\u9ad8\u4e00\u4e9b\u3002","0b5f83cc":"## \u57fa\u51c6\u6a21\u578b\n\n\u57fa\u51c6\u6a21\u578b\u91c7\u7528\u6052\u5b9a\u731c\u6d4b\u4e3amean\u503c\u7684\u65b9\u5f0f\u3002\n\n\u5148\u5c06\u8bad\u7ec3\u96c6\u4e2dSales\u7684mean\u503c\u8ba1\u7b97\u51fa\u6765\u3002","c227d109":"### PCA\n\n\u8fdb\u884cPCA\u7684\u76ee\u7684\uff1a\n1. \u53bb\u9664\u6570\u636e\u566a\u97f3\u3002\n2. \u964d\u7ef4\uff0c\u6211\u4eec\u7684\u7ef4\u5ea6\u9ad8\u8fbe1000+\uff0c\u4ee5\u5f53\u524d\u6570\u636e\u662f\u4e0d\u53ef\u80fd\u63cf\u8ff0\u8fd9\u4e48\u591a\u7ef4\u5ea6\u7684\u3002\n3. \u66f4\u52a0\u4e86\u89e3\u6570\u636e\uff0c\u5f88\u591a\u5b57\u6bb5\u6211\u4eec\u6839\u672c\u4e0d\u77e5\u9053\u8ddf\u76ee\u6807\u7684\u5173\u7cfb\u662f\u4ec0\u4e48\uff0cpca\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u68b3\u7406\u8fd9\u4e00\u5173\u7cfb\u3002\n\n\u7b2c\u4e00\u7248\u7684\u65f6\u5019\u7531\u4e8e\u7ef4\u5ea6\u975e\u5e38\u591a\uff0c\u56e0\u6b64\u6211\u91c7\u7528\u4e86PCA\uff0c\u4e3b\u8981\u7528\u4e8e\u964d\u7ef4\uff0c\u4ee5\u53ca\u7279\u5f81\u63d0\u53d6\uff0c\u7b2c\u4e8c\u7248\u7531\u4e8e\u53bb\u6389\u4e86\u5927\u90e8\u5206OneHot\u90e8\u5206\uff0c\u56e0\u6b64\u7ef4\u5ea6\u5e76\u4e0d\u662f\u5f88\u9ad8\uff0c\u5148\u53bb\u6389PCA\uff0c\u6bd5\u7adfPCA\u5bf9\u4fe1\u606f\u662f\u6709\u635f\u5931\u7684\u3002","6099e296":"#### \u5b9a\u4e49\u591a\u6a21\u578b\u9884\u6d4b\u51fd\u6570","5f56c12e":"## \u8ba1\u7b97\u57fa\u51c6\u6a21\u578b\u7684\u6027\u80fd","6a4576ca":"#### \u5355\u6a21\u578b\u3001\u591a\u6a21\u578b\u5728\u589e\u91cf\u8bad\u7ec3\u540e\u5728kaggle\u7684\u8868\u73b0","a8761ae5":"##### subsample \u548ccolsample_bytree\n\n* subsample [default=1]\n\n        \u6837\u672c\u7684\u91c7\u6837\u7387\uff0c\u5982\u679c\u8bbe\u7f6e\u62100.5\uff0c\u90a3\u4e48Xgboost\u4f1a\u968f\u673a\u9009\u62e9\u4e00\u822c\u7684\u6837\u672c\u4f5c\u4e3a\u8bad\u7ec3\u96c6\u3002\n* colsample_bytree [default=1]\n\n        \u6784\u9020\u6bcf\u68f5\u6811\u65f6\uff0c\u5217\u91c7\u6837\u7387\uff08\u4e00\u822c\u662f\u7279\u5f81\u91c7\u6837\u7387\uff09\u3002\n        \n\u5f53\u524dsubsample\u4e3a1\uff0ccolsample_bytree\u4e3a1\u3002","e6ba95b2":"### \u505a\u5f52\u4e00\u5316\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u5148\u67e5\u770b\u4e0b\u6570\u636e\u4e2d\u662f\u5426\u6709\u5f02\u5e38\u503c\uff0c\u6bd4\u5982\u6781\u5927\u6781\u5c0f\u503c\u7b49\uff0c\u907f\u514d\u5bf9\u5f52\u4e00\u5316\u7ed3\u679c\u9020\u6210\u5f71\u54cd","f86f663b":"ps_opt_estimators_maxdepth_minchildweight = {\n    'max_depth':,\n    'learning_rate':.3,\n    'n_estimators':1100,\n    'objective':'reg:linear',\n    'booster':'gbtree',\n    'gamma':0,\n    'min_child_weight':,\n    'subsample':1,\n    'colsample_bytree':1,\n    'random_state':6,\n    'silent':True,\n}","32374d85":"## kaggle\u4e0a\u5bf9\u6bd4","09c1bec2":"#### Year\u3001Quarter\u3001Month\u3001Day\u3001WeekOfYear\u3001IsWorkDay","1ee824fe":"\u5f97\u5206\u60c5\u51b5\uff1a\n* private score:0.17406\n* publice score:0.16244\n\n![\u57fa\u51c6\u6a21\u578b\u622a\u56fe](image\/kaggle_base.png)","caaa4b3e":"\u4e0a\u8ff0\u56fe\u5f88\u91cd\u8981\uff0c\u5206\u522b\u8868\u793a\u4e86\u76f8\u90bb\u7684\u4e24\u5e74\u7684\u9500\u552e\u989d\u8d70\u52bf\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5927\u4f53\u4e0a\u662f\u4e00\u81f4\u7684\uff0c\u8fd9\u8bf4\u660e\u4e00\u4e2a\u95ee\u9898\uff0c\u9500\u552e\u989d\u8ddf\u65e5\u671f\u606f\u606f\u76f8\u5173\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e00\u5e74\u7684\u540c\u4e00\u6bb5\u65f6\u671f\u5185\uff0c\u53ef\u80fd\u9500\u552e\u989d\u90fd\u4f1a\u5f88\u63a5\u8fd1\uff0c\u8fd9\u5c31\u6709\u70b9\u50cf\u5f88\u591a\u884c\u4e1a\u6709\u4ed6\u7684\u5b63\u8282\u6027\u7279\u70b9\u7684\u611f\u89c9\uff0c\u8fd9\u4e00\u4fe1\u606f\u8bf4\u660e\u5177\u4f53\u7684\u65e5\u671f\u5bf9\u9884\u6d4b\u662f\u81f3\u5173\u91cd\u8981\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u63d0\u53d6\u51fa\u5177\u4f53\u7684\u5e74\u3001\u6708\u3001\u65e5\u4fe1\u606f\u3002","f4094cdf":"## \u7ed3\u8bba\n\n\u5230\u5e95\u662f\u591a\u6a21\u578b\u878d\u5408\u5462\uff0c\u8fd8\u662f\u5355\u6a21\u578b\u5462\u3002\u3002\u3002\u3002","110b4ca6":"    from sklearn.decomposition import PCA\n\n    pca = PCA(n_components=10).fit(x_train)\n    print pca.explained_variance_ratio_\n    print sum(pca.explained_variance_ratio_)","83890ac2":"\u6211\u4eec\u7684\u6570\u636e\u6574\u4f53\u4e0a\u662f\u4f4e\u4e8e\u771f\u5b9e\u503c\u7684\uff0c\u56e0\u6b64\u4f7f\u7528\u6821\u6b63\u7cfb\u6570\u6765\u6574\u4f53\u6821\u6b63\u504f\u5dee\u662f\u5408\u7406\u7684\u3002","f0115229":"##### gamma\n\n\ngamma [default=0, alias: min_split_loss]\n\n      \u8fd9\u4e2a\u6307\u5b9a\u4e86\u4e00\u4e2a\u7ed3\u70b9\u88ab\u5206\u5272\u65f6\uff0c\u6240\u9700\u8981\u7684\u6700\u5c0f\u635f\u5931\u51fd\u6570\u51cf\u5c0f\u7684\u5927\u5c0f\u3002 \n      \u8fd9\u4e2a\u503c\u4e00\u822c\u6765\u8bf4\u9700\u8981\u6839\u636e\u635f\u5931\u51fd\u6570\u6765\u8c03\u6574\u3002\n  \n\u76ee\u524dgamma\u4e3a0\u3002","7c119a2d":"#### \u53c2\u6570\u4f18\u5316 - \u7f51\u683c\u641c\u7d22\u6700\u4f18\u53c2\u6570","803504d7":"1. ps_first = \n        {\n        'max_depth':5,\n        'learning_rate':.3,\n        'n_estimators':5000,\n        'objective':'reg:linear',\n        'booster':'gbtree',\n        'gamma':0,\n        'min_child_weight':1,\n        'subsample':1,\n        'colsample_bytree':1,\n        'random_state':6,\n        'silent':True,\n        }\n        \n\u7ed3\u679c\uff1a\u57281077\u6b21\u65f6\u8fbe\u5230\u6700\u4f18\u8fed\u4ee3\uff0cRMSPE\u4e3a0.160147\uff0c\u82b1\u8d39\u65f6\u95f4955s\uff0c\u4e14\u8fde\u7eed100\u6b21\u8bef\u5dee\u4e0d\u80fd\u964d\u4f4e\u5bfc\u81f4\u8bad\u7ec3\u63d0\u524d\u7ec8\u6b62\uff0c\u56e0\u6b64\u5bf9\u4e8e\u5b66\u4e600.3\u6765\u8bf4\uff0cn_estimators\u8bbe\u7f6e\u4e3a1100\u662f\u5408\u9002\u7684\u3002","35f96175":"\u800c\u5bf9\u4e8ePromo2SinceWeek\u3001Promo2SinceYear\u3001PromoInterval\u6765\u8bf4\uff0c\u5b83\u4eec\u5e76\u4e0d\u662f\u7f3a\u5931\uff0c\u800c\u662f\u5f53Promo2\u4e3a0\uff0c\u5373\u6ca1\u6709\u6301\u7eed\u7684\u4fc3\u9500\u6d3b\u52a8\u65f6\uff0c\u8fd9\u4e09\u4e2a\u5b57\u6bb5\u90fd\u662fNaN\uff0c\u8fd9\u4e2a\u662f\u6b63\u5e38\u7684\uff0c\u540e\u9762\u8003\u8651\u4e0b\u5982\u4f55\u5904\u7406Promo2\u7cfb\u7684\u5b57\u6bb5\u5427\uff0c\u6bd5\u7adf\u7f3a\u5931\u8f83\u591a\uff0c\u6216\u8005\u53ef\u4ee5\u5c06\u6570\u636e\u6309\u7167\u662f\u5426\u6709Promo2\u5212\u5206\u5f00\u4e24\u90e8\u5206\uff0c\u5206\u522b\u8fdb\u884c\u8bad\u7ec3\u548c\u9884\u6d4b\uff0c\u6069\u6069\uff0c\u611f\u89c9\u53ef\u4ee5\u8bd5\u8bd5\u770b\u3002","ccf9ef8f":"#### \u53ef\u89c6\u5316","a09f8913":"## \u6570\u636e\u9884\u5904\u7406","bf48b612":"\u5206\u6790\u4e00\u4e0b\u6bcf\u4e00\u5929\u8ddf\u524d\u4e00\u4e2a\u661f\u671f\u3001\u6708\u3001\u5b63\u5ea6\u3001\u534a\u5e74\u3001\u4e00\u5e74\u65f6\u95f4\u7684\u5e73\u5747\u9500\u552e\u989d\u7684\u5bf9\u6bd4\u3002","55661167":"#### CompetitionOpenMonths","97650741":"### CompetitionDistance\u586b\u5145\n\n\u76f4\u63a5\u4f7f\u7528\u8be5\u5b57\u6bb5\u4e0d\u4e3aNaN\u7684median\u586b\u5145\u3002","35d9bb02":"#### \u591a\u6a21\u578b\u878d\u5408","7276a075":"### \u6301\u7eed\u4fc3\u9500\u6d3b\u52a8\u76f8\u5173\u4fe1\u606f\u6316\u6398\uff1aPromoIntervel\u3001Promo2SinceWeek\u3001Promo2SinceYear\n\n\u53ef\u4ee5\u5f00\u53d1\u4e24\u4e2a\u5b57\u6bb5\uff1a\n1. IsInPromo:\u5206\u522b\u8868\u793a\u5f53\u524d\u5e97\u94fa\u67d0\u5929\u662f\u5426\u5904\u4e8e\u6301\u7eed\u7684\u4fc3\u9500\u6d3b\u52a8\u4e2d\uff1a\u6839\u636eDate\u3001Promo2\u4ee5\u53caPromoIntervel\u3002\n2. PromoDays:\u4fc3\u9500\u6d3b\u52a8\u5df2\u7ecf\u6301\u7eed\u7684\u65f6\u95f4\uff1a\u6839\u636eDate\u4ee5\u53caPromo2SinceYear\u3001Promo2SinceWeek\u3002","993a5f7a":"##### \u6a21\u578b\u4fdd\u5b58","b0e8e854":"#### \u5b9a\u4e49Cross Validation\u51fd\u6570","d2adbc09":"\u53ef\u4ee5\u770b\u5230\u6709\u4e09\u5bb6\u5e97\u662f\u6ca1\u6709CompetitionDistance\uff0c\u4e0d\u77e5\u9053\u662f\u6ca1\u6709\u7ade\u4e89\u5bf9\u624b\u8fd8\u662f\u4ec0\u4e48\u60c5\u51b5\uff0c\u4e0d\u8fc7\u65e2\u7136\u53ea\u67093\u6761\uff0c\u90a3\u4e48\u76f4\u63a5\u7528\u5e73\u5747\u503c\u586b\u5145\u597d\u4e86\uff0c\u672c\u8eab\u60f3\u5220\u6389\u7684\uff0c\u4f46\u662f\u8003\u8651\u5230store\u7684\u4fe1\u606f\u8981\u94fe\u63a5\u5230train\u4e2d\uff0c\u8fd9\u91cc\u76843\u6761\u6570\u636e\u5bf9\u5e94train\u4e2d\u53ef\u5c31\u662f3\\*N\u6761\u4e86\uff0c\u56e0\u6b64\u4e0d\u5220\u4e86\u3002","acbaf832":"\u53ef\u4ee5\u770b\u5230\u662f\u4e00\u4e2a\u5f88\u9ad8\u7684\u8bef\u5dee\u7387\u4e86\uff0c\u5c31\u662f\u4e0d\u77e5\u9053\u8ddf\u6211\u4eec\u7684\u6a21\u578b\u6bd4\u8f83\u5982\u4f55\u3002","c26616f8":"model_estimators_maxdepth_minchildweight = train2(ps_opt_estimators_maxdepth_minchildweight, x_train, y_train, x_valid, y_valid)\npred_valid_estimators_maxdepth_minchildweight, rmspe_estimators_maxdepth_minchildweight = predict2(model_estimators_maxdepth_minchildweight, x_valid, y_valid)","6d721d64":"##### \u6a21\u578b\u4fdd\u5b58","a5cfe223":"\u5f97\u5206\u60c5\u51b5\uff1a\n* private score:0.17406\n* publice score:0.16244\n\n![\u5355\u6a21\u578b\u622a\u56fe](image\/kaggle.png)","e1dcfc7c":"model_estimators_maxdepth_minchildweight_gamma = train2(ps_opt_estimators_maxdepth_minchildweight_gamma, \n                                                  x_train, y_train, x_valid, y_valid)\npred_valid_estimators_maxdepth_minchildweight_gamma, rmspe_estimators_maxdepth_minchildweight_gamma = predict2(\n    model_estimators_maxdepth_minchildweight_gamma, x_valid, y_valid)","522d33cc":"\u53ef\u4ee5\u770b\u5230\uff0c\u5c31\u76f8\u5173\u6027\u6765\u770b\uff0c\u6700\u9ad8\u7684\u67090.26\uff0c\u4e5f\u4e0d\u7b97\u5f88\u9ad8\uff0c\u6682\u65f6\u4e0d\u8003\u8651\u3002","e2c16870":"model_estimators_maxdepth_minchildweight.save_model('\/home\/kael\/projects\/model\/estimators_maxdepth_minchildweight.model')","d25bd6a2":"### Train\u548cStore\u7684\u94fe\u63a5\n\n\u6839\u636eStore\u5b57\u6bb5\u5c06\u4e8c\u8005\u94fe\u63a5\u8d77\u6765\u3002","568cba86":"#### \u4fdd\u5b58\u591a\u6a21\u578b","ef5226ff":"Open\u5b57\u6bb5\u670911\u4e2aNaN\uff0c\u8fd9\u4e2a\u76f4\u63a5\u75281\uff0c\u8868\u793a\u5f00\u95e8\u6765\u586b\u5145\u5373\u53ef\u3002","11eeb7c1":"### \u5b57\u6bb5\u6570\u636e\u7c7b\u578b\u8f6c\u6362","d916f70b":"##### \u6a21\u578b\u4fdd\u5b58","a54cf8df":"# Rossmann\u9500\u552e\u9884\u6d4b","c100cdcc":"### \u589e\u91cf\u8bad\u7ec3\u9a8c\u8bc1\u96c6-\u5404\u4e2amodel\uff0c\u5305\u62ec\u53c2\u6570\u4f18\u5316\u540e\u7684\u5355\u6a21\u578b\u548c\u591a\u6a21\u578b","f4a5d1a5":"#### \u591a\u6a21\u578b\u6821\u6b63\u7cfb\u6570","a4ea0a96":"model_first.save_model('.\/model\/first.model')","6b41ce2f":"### \u679a\u4e3e\u5b57\u6bb5One-Hot\u7f16\u7801\n\n\u5f53\u524d\u7684\u679a\u4e3e\u5b57\u6bb5\u6709\uff1a\n1. StateHoliday:\u56fd\u5bb6\u5047\u65e5\uff0c\u4e00\u822c\u5047\u65e5\u56fd\u5bb6\u5047\u671f\u90fd\u4f1a\u5173\u95e8\uff0c\u6240\u6709\u5b66\u6821\u5728\u516c\u5171\u5047\u65e5\u90fd\u4f1a\u5173\u95e8\uff0ca=\u516c\u5171\u5047\u65e5\uff0cb=\u4e1c\u90e8\u5047\u65e5\uff0cc=\u5723\u8bde\u8282\uff0c0=\u4e0d\u662f\u5047\u65e5\u3002\n2. StoreType:\u5546\u5e97\u7c7b\u578b\uff0c\u6709\u56db\u79cd\uff0cabcd\u3002\n3. Assortment:\u5206\u7c7b\u7ea7\u522b\uff0ca=\u57fa\u7840\uff0cb=\u989d\u5916\uff0cc=\u6269\u5c55\u3002\n\n\u5728\u6a21\u578b\u4e2d\u5e94\u8be5\u662f\u7c7b\u4f3c\u8282\u70b9\u4e00\u6837\u7684\u5b58\u5728\uff0c\u5373\u4f5c\u4e3a\u56db\u4e2a\u8282\u70b9\u5c06\u6570\u636e\u5bfc\u5411\u56db\u4e2a\u65b9\u5411\uff0c\u56e0\u6b64\u5c06a\u3001b\u3001c\u3001d\u90fd\u6620\u5c04\u52301,2,3,4\u4e0a\uff0c\u4e0d\u4f7f\u7528OneHot\u7f16\u7801\uff0c\u6bd5\u7adf\u7f16\u7801\u540e\u7684\u7ef4\u5ea6\u4f1a\u589e\u52a0\u3002","ea09e630":"\u7f51\u683c\u641c\u7d22\u82b1\u8d39\u65f6\u95f4s\uff0c\u6700\u4f18\u7ec4\u5408\u4e3a\uff1a\n* max_depth:\n* min_child_weight:\n\n\u4e0b\u9762\u4f7f\u7528\u6700\u4f18\u7ec4\u5408\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b\uff0c\u5e76\u8ba1\u7b97\u4e0b\u5728\u9a8c\u8bc1\u96c6\u4e0a\u7684RMSPE\u503c\u3002","d4f6595a":"\u53ef\u4ee5\u770b\u5230\u8fd9\u90e8\u5206\u4fe1\u606f\u7f3a\u5931\u662f\u56e0\u4e3a\u6ca1\u6709\u53c2\u4e0e\u4fc3\u9500\u6d3b\u52a8\u3002","f4cd60bd":"\u4f18\u5316gamma\u7684\u6a21\u578b\u8bad\u7ec3\u65f6\u95f4s\uff0c\u9a8c\u8bc1\u96c6\u4e0aRMSPE\u503c\uff0c\u80fd\u591f\u770b\u5230\u8f83\u4f18\u5316\u524d\u7684\uff0c\u8fd8\u662f","65f0737f":"### \u5355\u6a21\u578b\u3001\u591a\u6a21\u578b\u878d\u5408\u3001\u771f\u5b9e\u503c\u5bf9\u6bd4","12e2348c":"## \u4e3b\u6d41\u7a0b\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u6211\u4eec\u7684\u6a21\u578b\u76f8\u5173\u7684\u6d41\u7a0b\uff0c\u4e4b\u524d\u7684\u6570\u636e\u5904\u7406\u3001\u57fa\u51c6\u6a21\u578b\u6784\u5efa\u3001\u57fa\u51c6\u9608\u503c\u8ba1\u7b97\u3001\u6027\u80fd\u6307\u6807\u51fd\u6570\u6784\u5efa\u5df2\u7ecf\u5b8c\u6210\u4e86\uff0c\u540e\u7eed\u4e3b\u8981\u5c31\u662fPCA\u4ee5\u53ca\u6a21\u578b\u6784\u5efa\u3001\u6bd4\u8f83\u3001\u8c03\u8bd5\u7684\u8fed\u4ee3\u8fc7\u7a0b\u4e86\u3002\n\n\u6a21\u578b\u9009\u62e9\uff1a\u672c\u6765\u662f\u9009\u62e9Adaboost\uff0c\u770b\u4e2d\u5b83\u5728\u5c0f\u6570\u636e\u96c6\u4e0a\u7684\u8868\u73b0\uff0c\u4f46\u662f\u5f00\u9898\u62a5\u544a\u7684\u5ba1\u9605\u5bfc\u5e08\u63a8\u8350\u4e86xGBoost\uff0c\u53bb\u4e86\u89e3\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u5982\u4f55\u533a\u522b\uff1a\n1. adaboost\uff1a\u5728\u4f18\u5316\u5f31\u5206\u7c7b\u5668\u65f6\uff0c\u4f9d\u8d56\u7684\u662f\u6743\u91cd\u7684\u8bbe\u7f6e\uff0c\u5373\u52a0\u5927\u5206\u7c7b\u9519\u8bef\u7684\u6570\u636e\u7684\u6743\u91cd\uff0c\u800c\u51cf\u5c0f\u5206\u7c7b\u6b63\u786e\u7684\u6570\u636e\u7684\u6743\u91cd\uff0c\u4f7f\u5f97\u540e\u7eed\u7684\u5206\u7c7b\u5668\u66f4\u5173\u6ce8\u4e4b\u524d\u5206\u7c7b\u9519\u8bef\u7684\u70b9\u3002\n2. GBDT\uff1a\u76f8\u6bd4\u8f83adaboost\uff0c\u533a\u522b\u5728\u4e8e\u5b83\u662f\u901a\u8fc7\u7b97\u68af\u5ea6\u6765\u5b9a\u4f4d\u6a21\u578b\u7684\u4e0d\u8db3\uff0c\u56e0\u6b64\u76f8\u6bd4\u8f83AdaBoost\uff0c\u5b83\u80fd\u4f7f\u7528\u66f4\u591a\u7684\u76ee\u6807\u51fd\u6570\uff0c\u6bd4\u5982\u6211\u4eec\u7684\u6027\u80fd\u6307\u6807\u51fd\u6570RMSPE\u3002\n\n\u800cXGBoost\u662f\u5728GBDT\u7684\u57fa\u7840\u4e0a\u7684\u5168\u65b9\u4f4d\u52a0\u5f3a\u7248\uff0c\u5177\u4f53\u8868\u73b0\u5728\u652f\u6301\u7ebf\u6027\u5206\u7c7b\u5668\u3001\u52a0\u5165\u4e86\u6b63\u5219\u9879\u63a7\u5236\u6a21\u578b\u590d\u6742\u5ea6\u3001\u5b66\u4e60\u901f\u7387\u3001\u901f\u5ea6\u66f4\u5feb\uff0c\u652f\u6301\u5e76\u884c\u7b49\uff0c\u56e0\u6b64\u6211\u4eec\u7684\u6a21\u578b\u4f18\u5148\u9009\u62e9**XGBoost**\u3002","fe6d6cc6":"\u8ddfRMSE\u4e0d\u540c\u7684\u662f\u5f15\u5165\u4e86\/y_i\u7684\u5904\u7406\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u5ffd\u7565\u9500\u91cf\u5f88\u4f4e\u7684\u60c5\u51b5\u4e86\u3002","4229528e":"\u591a\u6a21\u578b\u878d\u5408\u7684\u5f97\u5206\u60c5\u51b5\uff1a\n* private score:\n* publice score:\n\n![\u591a\u6a21\u578b\u5f97\u5206\u622a\u56fe](image\/kaggle_xmodel.png)","a8d8887b":"\u53ef\u4ee5\u770b\u5230\uff0c\u603b\u5171\u67091017209\u6761\u6570\u636e\uff0c\u6570\u636e\u91cf\u4e0d\u7b97\u5f88\u5927\uff0c\u5404\u5b57\u6bb5\u90fd\u662f\u5b8c\u6574\u7684\uff0c\u65e0null\u5b57\u6bb5\uff0c\u8fd9\u662f\u4e2a\u597d\u6d88\u606f\uff0c\u5bf9\u4e8etrain\u90e8\u5206\u4e0d\u9700\u8981\u505a\u5f02\u5e38\u6570\u636e\u5904\u7406\u4e86\u3002","12b74aa1":"\u53ef\u4ee5\u770b\u5230\u8d8b\u52bf\u65b9\u9762\u6700\u63a5\u8fd1\u7684\u5e94\u8be5\u662fweek\uff0c\u4e0b\u9762\u7528\u76f8\u5173\u7cfb\u6570\u786e\u8ba4\u4ee5\u4e0b\u3002","fb641f35":"ps_opt_estimators_maxdepth_minchildweight_gamma_subsample_colsamplebytree = {\n    'max_depth':,\n    'learning_rate':.3,\n    'n_estimators':1100,\n    'objective':'reg:linear',\n    'booster':'gbtree',\n    'gamma':,\n    'min_child_weight':,\n    'subsample':,\n    'colsample_bytree':,\n    'random_state':6,\n    'silent':True,\n}","3b84433a":"### \u6a21\u578b\u8bad\u7ec3","7bf61bf3":"#### \u5355\u6a21\u578b\u6d4b\u8bd5","6b1d0e08":"\u53ef\u4ee5\u770b\u5230\uff0c\u6548\u679c\u5e76\u4e0d\u662f\u5f88\u7406\u60f3\uff0c\u524d10\u4e2a\u65b0\u7279\u5f81\u603b\u5171\u8868\u73b0\u4e86\u539f\u676550%\u7684\u53d8\u5316\uff0c\u4e0d\u8fc7\u4e5f\u6bd4\u539f\u6765\u597d\u4e86\u5f88\u591a\uff0c\u5148\u7528\u8fd9\u4e2a\u770b\u770b\u3002","a0486482":"\u65e5\u671f\u662f\u8fde\u7eed\u7684\uff0c\u8fd9\u6709\u52a9\u4e8e\u6211\u4eec\u8ba1\u7b97\u4e00\u4e9b\u7edf\u8ba1\u4fe1\u606f\u3002","6f92237f":"model_estimators_maxdepth_minchildweight_gamma_subsample_colsamplebytree.save_model('\/home\/kael\/projects\/model\/estimators_maxdepth_minchildweight_gamma_subsample_colsamplebytree.model')","c078f0c6":"Tips:\u5982\u679c\u4f7f\u7528train_all.Year\u589e\u52a0\u5217\uff0c\u800c\u4e0d\u662ftrain_all\\['Year'\\]\uff0c\u540e\u7eed\u867d\u7136\u8fd9\u4e2aYear\u53ef\u4ee5\u70b9\u51fa\u6765\u4f7f\u7528\uff0c\u4f46\u662f\u5728columns\u5217\u5217\u8868\u4e2d\u4e0d\u5b58\u5728\u4f1a\u6709\u4e00\u4e9b\u95ee\u9898\u54e6\uff01\uff01\uff01","51d249c6":"param_grid_subsample_colsample_bytree = {\n    'subsample':[.7, .8, .9],\n    'colsample_bytree':[.7, .8, .9]\n}\ngrid_result3 = gridSearch(ps_opt_estimators_maxdepth_minchildweight_gamma, \n                          param_grid_subsample_colsample_bytree, x_train, y_train)","677432ef":"### \u6a21\u578b\u9884\u6d4b","50195029":"\u53ef\u4ee5\u770b\u5230\u76f8\u6bd4\u4e8e\u5468\u516d\uff0c\u5468\u65e5\u5bf9\u9500\u552e\u989d\u7684\u5f71\u54cd\u662f\u5de8\u5927\u7684\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u5f88\u591a\u5546\u5e97\u8fd9\u4e00\u5929\u90fd\u5173\u95e8\u5427\u3002","2958a2e5":"### \u4fc3\u9500\u4fe1\u606f\u7f3a\u5931","f83d09ca":"##### max_depth\u548cmin_child_weight\u6700\u4f18\u53c2\u6570\u7ec4\u5408\n\n\u4f18\u5148\u8c03\u8bd5\u8fd9\u4e24\u4e2a\u7684\u539f\u56e0\u662f\u5b83\u4eec\u5bf9\u7ed3\u679c\u7684\u5f71\u54cd\u6bd4\u8f83\u5927\uff0c\u65b9\u4fbf\u6211\u4eec\u66f4\u5feb\u7684\u5f97\u5230\u66f4\u597d\u7684\u7ed3\u679c\u3002\n\n* min_child_weight [default=1]\n  \n      \u5b9a\u4e49\u4e86\u4e00\u4e2a\u5b50\u96c6\u7684\u6240\u6709\u89c2\u5bdf\u503c\u7684\u6700\u5c0f\u6743\u91cd\u548c\u3002 \n      \u8fd9\u4e2a\u53ef\u4ee5\u7528\u6765\u51cf\u5c11\u8fc7\u62df\u5408\uff0c\u4f46\u662f\u8fc7\u9ad8\u7684\u503c\u4e5f\u4f1a\u5bfc\u81f4\u6b20\u62df\u5408\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7CV\u6765\u8c03\u6574min_child_weight\u3002\n\n* max_depth [default=6]\n  \n      \u6811\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u503c\u8d8a\u5927\uff0c\u6811\u8d8a\u590d\u6742\u3002 \n      \u8fd9\u4e2a\u53ef\u4ee5\u7528\u6765\u63a7\u5236\u8fc7\u62df\u5408\uff0c\u5178\u578b\u503c\u662f3-10\u3002\n\n\u76ee\u524dmax_depth=5, min_child_weight=1","f1a92ee9":"#### \u9a8c\u8bc1\u96c6\u4e0aRMSPE\u5bf9\u6bd4","5cacac79":"### \u6d4f\u89c8\u4e0b\u6570\u636e","d359d516":"### \u591a\u6a21\u578b\u878d\u5408\u6d4b\u8bd5","6fbee32c":"\u521d\u7248\u53c2\u6570","1f99e9cc":"## \u7279\u5f81\u5de5\u7a0b","a4a36b28":"### kaggle\u4e0a\u5bf9\u6bd4\u57fa\u51c6\u6a21\u578b\u3001\u5355\u6a21\u578b\u3001\u591a\u6a21\u578b\u7684\u8868\u73b0","7e0b57cb":"### \u6a21\u578b\u4fdd\u5b58","266037eb":"\u53ef\u4ee5\u770b\u5230\u4f18\u5316\u540e\u7684RMSPE\u503c\u4ece0.1646\u51cf\u4f4e\u5230\u4e86\u3002","30dbdbd9":"\u770b\u5230\u5bf9\u4e8eCompetitionOpenSinceMonth\u3001CompetitionOpenSinceYear\u7684\u6570\u636e\uff0c\u5e76\u4e0d\u662f\u6ca1\u6709\u7ade\u4e89\u5bf9\u624b\uff0c\u53ea\u662f\u7f3a\u5931\u4e86\u5bf9\u624b\u7684\u5f00\u5f20\u65e5\u671f\u800c\u5df2\uff0c\u540c\u65f6\u7f3a\u5931\u4e86\u5927\u69821\/3\u7684\u6570\u636e\uff0c\u4e0d\u7b97\u5f88\u591a\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u540e\u9762\u5c06\u4ed6\u4eec\u8865\u5168\u5427\uff0c\u8865\u5168\u65b9\u5f0f\u4f7f\u7528\u5176\u4ed6\u6570\u636e\u8be5\u5b57\u6bb5\u7684\u5e73\u5747\u503c\u3002","afdac18c":"#### \u6821\u6b63\u7cfb\u6570\uff1a\u6821\u6b63\u6574\u4f53\u504f\u5dee\n\n\u89c2\u5bdf\u4e0b\u9884\u6d4b\u503c\u548c\u771f\u503c\u7684\u5206\u5e03\u60c5\u51b5\u3002","46986b0b":"\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u5f20\u56fe\u5f88\u660e\u663e\u7684\u770b\u5230\uff0c\u5f53\u5bf9\u624b\u5f00\u5f20\u65f6\u95f4\u6bd4\u8f83\u77ed\u65f6\uff0c\u5e97\u94fa\u7684\u9500\u552e\u989d\u6bd4\u8f83\u5927\uff0c\u4e5f\u5c31\u662f\u5728\u540c\u4e00\u4e2a\u533a\u57df\u66f4\u52a0\u53d7\u5ba2\u6237\u6b22\u8fce\uff0c\u8fd9\u4e2a\u662f\u8ddf\u6211\u4eec\u7684\u8ba4\u77e5\u4e00\u81f4\u7684\u4fe1\u606f\u3002","376ffe94":"\u4e0a\u8ff0\u8868\u793a\uff0c\u4fc3\u9500\u5bf9\u9500\u552e\u989d\u7684\u5f71\u54cd\u662f\u975e\u5e38\u660e\u663e\u7684\uff0c\u4f46\u662f\u6301\u7eed\u65f6\u95f4\u540c\u6837\u5b58\u5728\u7740\u5f71\u54cd\u3002","e1a5abd9":"#### \u53ef\u89c6\u5316\u5206\u6790\u65f6\u95f4\u5b57\u6bb5\u76f8\u5bf9\u4e8e\u9500\u552e\u989d\u7684\u5f71\u54cd","87c301d0":"#### \u57fa\u51c6\u6a21\u578b\u6d4b\u8bd5","808f21cb":"\u770b\u5230\uff0c\u6700\u4f18\u7684gamma\u503c\u4e3a\u3002","6af38bbb":"## \u6570\u636e\u6316\u6398\uff1a\u65e5\u671f\u4fe1\u606f\u3001\u4fc3\u9500\u4fe1\u606f\u3001\u7ade\u4e89\u5bf9\u624b\u4fe1\u606f","b5334f8e":"## \u51c6\u5907\u6570\u636e\n\n\u76f8\u5173\u6570\u636e\u90fd\u5b58\u653e\u4e8e\u5f53\u524d\u76ee\u5f55\u7684\/data\/all\u4e2d","5c8c8ac6":"### \u4e2a\u522b\u5b57\u6bb5\u542b\u4e49\n\n    1. Id:\u6d4b\u8bd5\u96c6\u5185(\u5546\u5e97\u3001\u65e5\u671f)\u7684\u7ec4\u5408\u3002\n    2. Store:\u8868\u793a\u6bcf\u4e2a\u5546\u5e97\u7684\u552f\u4e00Id\u3002\n    3. Sales:\u4efb\u610f\u4e00\u5929\u7684\u9500\u552e\u989d\uff0c\u4e5f\u662f\u6211\u4eec\u8981\u9884\u6d4b\u7684\u5b57\u6bb5\u3002\n    4. Open:\u662f\u5426\u5f00\u95e8\uff0c0=\u5173\u95e8\uff0c1=\u5f00\u95e8\u3002\n    5. StateHoliday:\u56fd\u5bb6\u5047\u65e5\uff0c\u4e00\u822c\u5047\u65e5\u56fd\u5bb6\u5047\u671f\u90fd\u4f1a\u5173\u95e8\uff0c\u6240\u6709\u5b66\u6821\u5728\u516c\u5171\u5047\u65e5\u90fd\u4f1a\u5173\u95e8\uff0ca=\u516c\u5171\u5047\u65e5\uff0cb=\u4e1c\u90e8\u5047\u65e5\uff0cc=\u5723\u8bde\u8282\uff0c0=\u4e0d\u662f\u5047\u65e5\u3002\n    6. StoreType:\u5546\u5e97\u7c7b\u578b\uff0c\u6709\u56db\u79cd\uff0cabcd\u3002\n    7. Assortment:\u5206\u7c7b\u7ea7\u522b\uff0ca=\u57fa\u7840\uff0cb=\u989d\u5916\uff0cc=\u6269\u5c55\u3002\n    8. CompetitionDistance:\u7ade\u4e89\u5bf9\u624b\u8ddd\u79bb\u3002\n    9. CompetitionOpenSince\\[Month\/Year\\]:\u7ed9\u51fa\u6700\u8fd1\u7ade\u4e89\u5bf9\u624b\u7684\u5f00\u5f20\u65f6\u95f4\u3002\n    10. Promo:\u8868\u793a\u5546\u5e97\u5f53\u5929\u662f\u5426\u8fdb\u884c\u4fc3\u9500\uff1f\n    11. Promo2:\u8868\u793a\u5546\u5e97\u662f\u5426\u8fdb\u884c\u6301\u7eed\u7684\u4fc3\u9500\u6d3b\u52a8\uff0c0=\u6ca1\u6709\u53c2\u6570\uff0c1=\u53c2\u4e0e\u3002\n    12. Promo2Since\\[Year\/Week\\]:\u5546\u5e97\u5f00\u59cb\u6301\u7eed\u4fc3\u9500\u7684\u5e74\/\u661f\u671f\u3002\n    13. PromoInterval:\u6301\u7eed\u4fc3\u9500\u6d3b\u52a8\u5f00\u59cb\u7684\u95f4\u9694\uff0c\"Feb,May,Aug,Nov\"\u8868\u793a\u7ed9\u5b9a\u5546\u5e97\u67d0\u4e00\u5e74\u76842589\u6708\u5f00\u59cb\u6301\u7eed\u4fc3\u9500\u6d3b\u52a8\u3002","242799bf":"## \u6570\u636e\u96c6\u5212\u5206\n\n\u907f\u514d\u6bcf\u4e00\u6b21\u6a21\u578b\u9a8c\u8bc1\u90fd\u8981\u4e0a\u4f20\u5230kaggle\uff0c\u56e0\u6b64\u5c06\u8bad\u7ec3\u6570\u636e\u5212\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\uff0c\u6bd4\u4f8b9:1\uff0c\u8fd9\u6837\u65b9\u4fbf\u81ea\u5df1\u8c03\u8bd5\u6a21\u578b\uff0c\u56e0\u4e3a\u6700\u7ec8\u6d4b\u8bd5\u96c6\u4e0a\u662f\u9884\u6d4b6\u5468\u7684\u6570\u636e\uff0c\u56e0\u6b64\u6211\u4eec\u4e5f\u62ff\u6700\u8fd1\u76846\u5468\u51fa\u6765\u505a\u9a8c\u8bc1\u96c6\u6570\u636e\uff0c\u7531\u4e8e\u65f6\u95f4\u5e8f\u5217\u662f\u8fde\u7eed\u7684\uff0c\u800c\u9500\u552e\u989d\u53c8\u662f\u8ddf\u65e5\u671f\u5f3a\u76f8\u5173\u7684\uff0c\u56e0\u6b64\u4e0d\u9002\u7528\u968f\u673a\u5212\u5206\u3002","837d333e":"\u6069\u6069\uff0c\u6548\u679c\u8fd8\u4e0d\u9519\uff0c\u4e0b\u964d\u4e860.01\uff0c\u6700\u4f73\u6821\u6b63\u7cfb\u6570\u4e3a0.99\uff0c\u770b\u770b\u52a0\u4e0a\u6821\u6b63\u7cfb\u6570\u540e\u7684\u6570\u636e\u4e0e\u6821\u6b63\u524d\u3001\u771f\u5b9e\u6570\u636e\u5bf9\u6bd4\u60c5\u51b5\uff1a","1122d2f5":"### \u65e0\u7528\u5b57\u6bb5\u4e22\u5f03\uff0c\u6ce8\u610ftest.csv\u662f\u6ca1\u6709Customers\u6570\u636e\u7684\u54c8","f1735f59":"\u4f18\u5316gamma\u7684\u6a21\u578b\u8bad\u7ec3\u65f6\u95f4s\uff0c\u9a8c\u8bc1\u96c6\u4e0aRMSPE\u503c\uff0c\u80fd\u591f\u770b\u5230\u8f83\u4f18\u5316\u524d\u7684\uff0c\u8fd8\u662f","c2d5a5d7":"\u4f18\u5316max_depth\u3001min_child_weight\u7684\u6a21\u578b\u8bad\u7ec3\u65f6\u95f4s\uff0c\u9a8c\u8bc1\u96c6\u4e0aRMSPE\u503c\uff0c\u80fd\u591f\u770b\u5230\u8f83\u4f18\u5316\u524d\u76840.1646\uff0c\u8fd8\u662f","0fb93aa6":"### \u6570\u636e\u7684\u7edf\u8ba1\u503c","5b18927c":"### \u5f53\u524d\u5b57\u6bb5","0ff97b61":"\u53ef\u4ee5\u770b\u5230\uff0cSales\u5df2\u7ecf\u4e0d\u5728\u8bad\u7ec3\u6570\u636e\u4e2d\u4e86\u3002","f53acd7c":"ps_opt_estimators_maxdepth_minchildweight_gamma = {\n    'max_depth':,\n    'learning_rate':.3,\n    'n_estimators':1100,\n    'objective':'reg:linear',\n    'booster':'gbtree',\n    'gamma':,\n    'min_child_weight':,\n    'subsample':1,\n    'colsample_bytree':1,\n    'random_state':6,\n    'silent':True,\n}","c50532e1":"## \u95ee\u9898\u94fe\u63a5\n\nhttps:\/\/www.kaggle.com\/c\/rossmann-store-sales","7393ba07":"### \u6316\u6398\u5230\u7684\u65b0\u5b57\u6bb5\u6dfb\u52a0","7468ad24":"##### \u6a21\u578b\u4fdd\u5b58","15081548":"## \u95ee\u9898\u63cf\u8ff0\n\nRossmann\u5728\u5168\u6b27\u6d32\u6709\u8d85\u8fc76000\u5bb6\u836f\u5e97\uff0c\u9884\u6d4b\u9500\u552e\u989d\u4e00\u76f4\u662f\u4ed6\u4eec\u5546\u5e97\u7ecf\u7406\u7684\u5de5\u4f5c\uff0c\u4ed6\u4eec\u6839\u636e\u76f4\u89c9\u6765\u9884\u6d4b\uff0c\n\u51c6\u786e\u7387\u6709\u5f88\u5927\u53d8\u5316\uff0c\u73b0\u5728\u6211\u4eec\u8981\u5e2e\u52a9\u6784\u5efa\u4e00\u4e2a\u9500\u552e\u989d\u9884\u6d4b\u6a21\u578b\uff0c\u9488\u5bf9\u4f4d\u4e8e\u5fb7\u56fd\u76841115\u5bb6\u5e97\u8fdb\u884c6\u5468\u7684\u9500\n\u552e\u989d\u9884\u6d4b\uff0c\u5bf9\u4e8e\u9500\u552e\u989d\u7684\u9884\u6d4b\u53ef\u4ee5\u5e2e\u52a9\u7ecf\u7406\u4eec\u66f4\u5408\u7406\u7684\u5b89\u6392\u5458\u5de5\u4e0a\u73ed\u65f6\u95f4\u8868\u3001\u9500\u552e\u6d3b\u52a8\u7b49\u3002","ce8ca8bb":"#### kaggle\u53cd\u9988","144c8799":"#### IsInPromo\u3001PromoDays","d5b33f43":"model_estimators_maxdepth_minchildweight_gamma.save_model('\/home\/kael\/projects\/model\/estimators_maxdepth_minchildweight_gamma.model')","89342d61":"#### kaggle\u53cd\u9988","7dd51a61":"\u53ef\u4ee5\u770b\u5230\u4ec5\u4ec5\u662f\u662f\u5426\u653e\u5047\uff0c\u5bf9\u9500\u552e\u989d\u7684\u5f71\u54cd\u4e0d\u5927\uff0c\u4e0b\u9762\u6211\u4eec\u770b\u770b\u653e\u5047\u671f\u95f4\u7684\u9500\u552e\u989d\u53d8\u5316\u3002","e5f59be9":"param_grid_gamma = {\n 'gamma':[i\/10.0 for i in range(0,5,2)]\n}\ngrid_result2 = gridSearch(ps_opt_estimators_maxdepth_minchildweight, param_grid_gamma, x_train, y_train)","5c10ee1c":"### \u6a21\u578b\u6784\u5efa\n\n\u5bfc\u5165\u5e93\u3001\u8bad\u7ec3\u6570\u636e\u5904\u7406","439ce444":"### \u8bfb\u53d6\u6570\u636e","c5806e04":"#### \u53ef\u89c6\u5316","863a9837":"## \u57fa\u672c\u6d41\u7a0b\n\n1. \u5f00\u53d1\u73af\u5883\u521d\u59cb\u5316\u3002\n2. \u52a0\u8f7d\u6570\u636e\u3002\n3. \u62fc\u63a5\u6570\u636e\u3002\n4. \u6570\u636e\u9884\u5904\u7406\u3002\n5. \u6570\u636e\u6316\u6398\u3002\n6. \u7279\u5f81\u5de5\u7a0b\u3002\n7. \u6a21\u578b\u6784\u5efa\u3001\u8bad\u7ec3\u3001\u8c03\u53c2\u3001\u878d\u5408\u5230\u4e00\u4e2a\u65e0\u6cd5\u63d0\u5347\u7684\u5730\u6b65\u3002\n8. \u5b8c\u5584\u5404\u6b65\u9aa4\u3002\n9. \u751f\u6210kaggle\u7684\u63d0\u4ea4\u6587\u4ef6\u3002\n10. \u8bb0\u5f55kaggle\u5f97\u5206\u60c5\u51b5\u3002\n11. \u6536\u83b7\u3002\n12. \u5f15\u7528\u3002","06d0ef77":"#### \u7b2c\u4e00\u7248\u6a21\u578b\u8bad\u7ec3\n\nxgboost\u57fa\u672c\u8c03\u53c2\u65b9\u5f0f\uff1a\n1. \u9009\u62e9\u4e00\u4e2a\u8f83\u5927\u7684\u5b66\u4e60\u7387\uff0c\u4e00\u822c\u57280.05\u52300.3\uff0c\u6b64\u5904\u6211\u4eec\u76f4\u63a5\u9009\u62e90.3\uff0c\u7136\u540e\u8bbe\u7f6e\u4e00\u4e2a\u8be5\u5b66\u4e60\u7387\u5bf9\u5e94\u4e0b\u5408\u9002\u7684n_estimators\u3002\n2. \u8c03\u53c2max_depth\u3001min_child_weight\uff0c\u8fd9\u4e24\u4e2a\u53c2\u6570\u5bf9\u7ed3\u679c\u5f71\u54cd\u5f88\u5927\u3002\n3. \u8c03\u53c2subsample\u3001colsample_bytree\u3002\n4. \u8c03\u53c2gamma\u3002\n5. \u964d\u4f4elearning_rate\uff0c\u518d\u5339\u914d\u4e00\u4e2a\u5408\u9002\u7684n_estimators\u3002","fa84a710":"model_estimators_maxdepth_minchildweight_gamma_subsample_colsamplebytree = train2(ps_opt_estimators_maxdepth_minchildweight_gamma_subsample_colsamplebytree, \n                                                  x_train, y_train, x_valid, y_valid)\npred_valid_estimators_maxdepth_minchildweight_gamma_subsample_colsamplebytree, rmspe_estimators_maxdepth_minchildweight_gamma_subsample_colsamplebytree = predict2(\n    model_estimators_maxdepth_minchildweight_gamma_subsample_colsamplebytree, x_valid, y_valid)","52cc9970":"#### \u6570\u636e\u53ef\u89c6\u5316","f10db21a":"## \u5c06\u76ee\u6807\u5b57\u6bb5\u63d0\u53d6\u51fa\u6765","7f1f0cc2":"### CompetitionOpenSinceMonth\u3001CompetitionOpenSinceYear\u586b\u5145\n\n\u4f7f\u7528\u8be5\u5b57\u6bb5\u4e0d\u4e3aNaN\u7684\u5b57\u6bb5\u7684\u6570\u636e\u7684median\u586b\u5145\uff0c\u6ce8\u610f\u8981\u53d6\u6574\u3002","b83f6ab4":"#### \u8bad\u7ec3\u60c5\u51b5","94ea5401":"### Test\u548cStore\u7684\u94fe\u63a5\n\n\u540c\u6837\u4e5f\u5c06Test\u548cStore\u94fe\u63a5\uff0c\u65b9\u4fbf\u540e\u7eed\u5bf9test\u8fdb\u884c\u9884\u6d4b\u65f6\u4f7f\u7528\uff0c\u540e\u7eed\u5bf9\u94fe\u63a5\u540e\u7684\u5904\u7406\uff0c\u540c\u7406\u90fd\u8981\u5e94\u7528\u5230Test+Store\u7684\u94fe\u63a5\u6570\u636e\u4e0a\u3002","8f53f1b4":"### Open","ee1c4a90":"#### \u5404\u6a21\u578b\u589e\u91cf\u8bad\u7ec3\u9a8c\u8bc1\u96c6","c8b2e2cf":"### \u7ade\u4e89\u5bf9\u624b\u4fe1\u606f\u6316\u6398\uff1aCompetitionOpenSinceYear\u3001CompetitionOpenSinceMonth\n\n\u6309\u7167\u4e00\u822c\u7684\u7406\u89e3\u4e0a\uff0c\u7ade\u4e89\u5bf9\u624b\u4e5f\u5e94\u8be5\u5bf9\u5e97\u94fa\u7684\u9500\u552e\u6709\u5f88\u5927\u5f71\u54cd\uff0c\u6bd5\u7adf\u540c\u4e00\u5730\u533a\u7684\u5e02\u573a\u4efd\u989d\u662f\u56fa\u5b9a\u7684\uff0c\u6709\u4e00\u4e2a\u8ddd\u79bb\u6bd4\u8f83\u8fd1\u3001\u5f00\u5f20\u6bd4\u8f83\u4e45\uff08\u8001\u5b57\u53f7\uff1f\uff09\u7684\u7ade\u4e89\u5bf9\u624b\u5bf9\u9500\u552e\u989d\u8fd8\u662f\u6709\u538b\u529b\u7684\u5427\uff0c\u5206\u6790\u4ee5\u4e0b\u3002","bc796e1a":"\u589e\u52a0\u5b57\u6bb5\uff1a\n1. CompetitionOpenMonths\u3002","be107ab2":"\u770b\u5230\uff0c\u6700\u4f18\u7684\u7ec4\u5408\u4e3a\uff1a\n* subsample:\n* colsample_bytree:","389d2e93":"\u5bf9\u4e8eStore\u6570\u636e\u6765\u8bf4\uff0c\u603b\u5171\u67091115\u6761\u6570\u636e\uff0c\u5bf9\u5e94\u5206\u5e03\u4e8e\u5fb7\u56fd\u76841115\u95f4\u5546\u5e97\uff0c\u800c\u5176\u4e2dCompetitionOpenSinceMonth\u3001CompetitionOpenSinceYear\u53ea\u6709761\u6761\u6570\u636e\uff0c\u4e5f\u5c31\u662f\u8bf4\u6709354\u4e2a\u5546\u5e97\u6ca1\u6709\u5bf9\u5e94\u7684\u7ade\u4e89\u5bf9\u624b\u7684\u5f00\u5f20\u65e5\u671f\u5b57\u6bb5\uff0c\u800cPromo2SinceWeek\u3001Promo2SinceYear\u3001PromoInterval\u53ea\u6709571\u6761\uff0c\u4e5f\u5c31\u662f\u8bf4\u6709\u5c06\u8fd1\u4e00\u534a\u7684\u5546\u5e97\u662f\u6ca1\u6709\u6301\u7eed\u4fc3\u9500\u6d3b\u52a8\u7684\uff0c\u800c\u8fd8\u67093\u4e2a\u5546\u5e97\u6ca1\u6709\u7ade\u4e89\u5bf9\u624b\u7684\u8ddd\u79bb\u3002","443320c0":"## \u6570\u636e\u62fc\u63a5","92fdd901":"## \u73af\u5883\u521d\u59cb\u5316","244e0210":"### \u8fdb\u884c\u5f52\u4e00\u5316\n\n\u5f52\u4e00\u5316\u5c31\u4f7f\u7528\u7b80\u5355\u7684min-max\u5f52\u4e00\u5316\uff08\u662f\u5426\u9700\u8981\u770b\u4e0b\u6570\u503c\u7684\u5206\u5e03\u518d\u51b3\u5b9a\u5462\uff0c\u4e0d\u662f\u6709\u4e2a\u5f52\u4e00\u5316\u7b97\u6cd5\u53ef\u4ee5\u51cf\u5c11\u503c\u95f4\u8ddd\u5bfc\u81f4\u7684\u5dee\u5f02\u4e48\uff09\uff0c\u56e0\u4e3a\u73b0\u5728\u6240\u6709\u5b57\u6bb5\u90fd\u53ef\u4ee5\u7406\u89e3\u4e3a\u6570\u503c\u578b\uff0c\u56e0\u6b64\u76f4\u63a5\u5e94\u7528\u5230\u6574\u4e2aDataFrame\u4e0a\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4e0d\u8fc7\u4e3a\u4e86\u901f\u5ea6\u5c31\u4e0d\u8fd9\u4e48\u505a\u4e86\u3002","17d93903":"\u6069\u6069\uff0c\u4e5f\u6ca1\u5565\u95ee\u9898\uff0c\u4e0d\u8fc7\u8fd9\u4e2amin\u4e3a20\uff0c\u8fd9\u4e2a\u4e0d\u4f1a\u662f\u697c\u4e0a\u697c\u4e0b\u7684\u5173\u7cfb\u5427\uff0c\u771f\u7684\u4e0d\u4f1a\u6253\u8d77\u6765\u4e48\u3002\u3002\u3002\u3002","09721067":"\u5047\u671f\u7684\u9500\u552e\u989d\u5e45\u5ea6\u4e0d\u660e\u663e\uff0c\u770b\u6765\u5047\u671f\u5bf9\u9500\u552e\u989d\u7684\u5f71\u54cd\u5e94\u8be5\u4e0d\u5927\uff0c\u81f3\u5c11\u4e0d\u662f\u4e3b\u8981\u7684\u56e0\u7d20\u3002","20ef0235":"## \u6027\u80fd\u6307\u6807\n\n\u7531\u4e8e\u662f\u8981\u63d0\u4ea4\u5230kaggle\uff0c\u56e0\u6b64\u6211\u4eec\u9009\u62e9\u548ckaggle\u4e00\u81f4\u7684\u6027\u80fd\u6307\u6807\uff0c\u5373RMSPE\u3002","5bf36e4a":"    x_train_pca = pd.DataFrame(pca.transform(x_train))\n    x_valid_pca = pd.DataFrame(pca.transform(x_valid))\n    x_train_pca.info()","e8e7d676":"## \u6570\u503c\u578b\u6570\u636e\u5f52\u4e00\u5316\u5904\u7406\n\n\u8fd9\u4e3b\u8981\u662f\u907f\u514d\u7531\u6570\u503c\u5927\u5c0f\u5bfc\u81f4\u7684\u5b57\u6bb5\u5728\u5bf9\u9884\u6d4b\u7ed3\u679c\u7684\u5f71\u54cd\u4e2d\u6743\u91cd\u4e0d\u4e00\u81f4\uff0c\u56e0\u6b64\u505a\u5f52\u4e00\u5316\u5904\u7406\uff0c\u5373\u8ba4\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u7684\u5f71\u54cd\u90fd\u662f\u4e00\u6837\u7684\u3002\n\n\u6570\u503c\u578b\u5b57\u6bb5\u6709\uff1a\n1. Sales\uff1a\u9884\u6d4b\u503c\u4e0d\u7528\u7ba1\u3002\n2. CompetitionDistance\u3002\n3. PromoDays\u3002\n4. CompetitionOpenMonths\u3002\n\n\u4f46\u662f\u6709\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u5bf9\u8bad\u7ec3\u6570\u636e\u3001\u6d4b\u8bd5\u6570\u636e\u5206\u522b\u8fdb\u884c\u4e86\u5f52\u4e00\u5316\uff0c\u56e0\u4e3a\u5f52\u4e00\u5316\u4f7f\u7528\u7684min\u3001max\u4e0d\u540c\uff0c\u662f\u5426\u5bf9\u9884\u6d4b\u6709\u5f71\u54cd\u4e0d\u53ef\u800c\u77e5\uff0c\u6682\u65f6\u4e0d\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406\u3002","37739f3e":"\u591a\u6a21\u578b\u8bad\u7ec3\u4e2d\u6211\u4eec\u53d1\u73b0\uff0c\u5f53\u524d\u53c2\u6570\u4e0b\uff0c\u6a21\u578b\u8bad\u7ec3\u591a\u6b21\u57284500+\u6b21\u8fed\u4ee3\u65f6\u8fbe\u5230\u6700\u4f18\uff0c5\u4e2a\u6a21\u578b\u7684\u603b\u8017\u65f6\u4e3a\uff1a26583s\uff0c\u4e5f\u5c31\u662f7.4\u4e2a\u5c0f\u65f6\u8fd9\u6837\u3002\u3002\u3002\u4e00\u665a\u4e0a\u3002\u3002\u3002","bebe1d00":"##### \u51cf\u5c0f\u5b66\u4e60\u7387\uff0c\u91cd\u65b0\u8bbe\u7f6en_estimators","8d0cfa52":"## \u5c06\u6570\u636e\u6309\u7167\u65e5\u671f\u6392\u5e8f\n\n\u91cd\u8981\uff1a\u7531\u4e8e\u540e\u9762\u9700\u8981\u5c06\u6700\u8fd16\u5468\u7684\u6570\u636e\u62bd\u53d6\u51fa\u6765\u4f5c\u4e3a\u9a8c\u8bc1\u96c6\u6570\u636e\uff0c\u56e0\u6b64\u5982\u679c\u8bad\u7ec3\u6570\u636e\u6ca1\u6709\u901a\u8fc7\u65e5\u671f\u6392\u5e8f\u7684\u8bdd\uff0c\u4f1a\u51fa\u73b0\u6574\u4e2a\u9a8c\u8bc1\u96c6\u6570\u636e\u90fd\u662fStore\u4e3a1\u7684\u6570\u636e\uff0c\u90a3\u4e48\u6211\u4eec\u6839\u636e\u5176\u4ed6\u5546\u5e97\u7684\u6570\u636e\u53bb\u9884\u6d4bStore\u4e3a1\u7684\u5546\u5e97\u7684\u9884\u6d4b\uff0c\u53ef\u60f3\u800c\u77e5\uff0c\u80af\u5b9a\u4f1a\u51fa\u73b0\u9a8c\u8bc1\u96c6\u4e0a\u65e9\u65e9\u7684\u5c31\u65e0\u6cd5\u964d\u4f4eRMSPE\u503c\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u8bad\u7ec3\u7684\u6570\u636e\u672c\u8eab\u5c31\u4e0d\u5408\u7406\u3002","457f2b98":"\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u5947\u602a\u7684\u73b0\u8c61\uff0c\u4f3c\u4e4e\u4e0e\u6211\u4eec\u7684\u9884\u8ba1\u4e0d\u7b26\uff0c\u5e76\u4e0d\u662f\u7ade\u4e89\u5bf9\u624b\u8d8a\u8fdc\uff0c\u9500\u552e\u989d\u8d8a\u9ad8\uff0c\u53cd\u800c\u6709\u70b9\u76f8\u53cd\u7684\u610f\u601d\uff0c\u8fd9\u4e2a\u53ef\u80fd\u662f\u7c7b\u4f3c\u5546\u4e1a\u5708\u7684\u7279\u70b9\u5bfc\u81f4\u7684\u5427\uff0c\u6bd4\u5982\u8fd9\u4e00\u4ee3\u6709\u597d\u51e0\u5bb6\u540c\u6837\u7684\u5e97\uff0c\u90a3\u4e48\u5927\u5bb6\u4e70\u8fd9\u7c7b\u5546\u54c1\u65f6\u662f\u4e0d\u662f\u90fd\u503e\u5411\u4e8e\u53bb\u8fd9\u4e9b\u5730\u65b9\u4e70\u5462\uff0c\u90a3\u4e48\u5c31\u6709\u4e00\u79cd\u4e92\u76f8\u4fc3\u8fdb\u7684\u611f\u89c9\uff0c\u8fd9\u4e00\u70b9\u662f\u5f88\u6709\u610f\u601d\u7684\u70b9\u3002\n\n\u4e0b\u9762\u518d\u770b\u770b\u8ddf\u7ade\u4e89\u5bf9\u624b\u5f00\u5f20\u65f6\u95f4\u7684\u5173\u7cfb\u3002","ed56f9fd":"Date\u3001Promo2SinceWeek\u3001Promo2SinceYear\u3001PromoInterval\u3001CompetitionOpenSinceMonth\u3001CompetitionOpenSinceYear\u3001Store","74e63845":"##### \u4f18\u5316\u540e\u7684\u53c2\u6570","1423c25e":"\u7ed3\u8bba\uff1a\n\n1. \u53ef\u4ee5\u770b\u5230train\u3001test\u548cstore\u4e4b\u95f4\u6709\u4e00\u4e2aStore\u5b57\u6bb5\u662f\u76f8\u540c\u7684\uff0c\u53ef\u4ee5\u540c\u4e8e\u94fe\u63a5\u4e24\u5f20\u8868\u3002\n2. train\u4e2d\u7684Store\u3001DayOfWeek\u3001Date\u3001Open\u3001Promo\u3001StateHolidy\u3001SchoolHoliday\u90fd\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u56e0\u4e3a\u4e0d\u662f\u6570\u503c\u578b\u3002\n3. store\u4e2d\u9664COmpetitionDistance\u5916\u5747\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u3002\n\n\u80fd\u591f\u770b\u5230\u6709\u5927\u91cf\u5b57\u6bb5\u5c5e\u4e8e\u679a\u4e3e\u578b\u3001\u65f6\u95f4\u5e8f\u5217\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u90fd\u8981\u7ecf\u8fc7\u5904\u7406\uff0c\u5426\u5219\u4f1a\u5f71\u54cd\u9884\u6d4b\u7ed3\u679c\u3002"}}