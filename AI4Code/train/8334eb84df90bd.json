{"cell_type":{"8a2631d0":"code","a9ceeec9":"code","5bd0c2d8":"code","d334775e":"code","f7a5f0de":"code","3e58addb":"code","8e1d3795":"code","1ccb1e39":"code","4fa2d366":"code","59ab232b":"code","77e31599":"code","cc6d62b7":"code","c645b292":"code","e3f58c59":"code","881a4f93":"code","cb047b14":"markdown","b40cb362":"markdown","68aa39fb":"markdown","090123e1":"markdown","af8c6c7d":"markdown","c3889e0b":"markdown","4603e3ec":"markdown","98736fd8":"markdown","39130aec":"markdown","9f4dd6b1":"markdown","1dae40a4":"markdown"},"source":{"8a2631d0":"import pandas as pd\nimport numpy as np\nimport random\nimport math\n# Statistics\nfrom scipy.stats import norm\nfrom scipy import stats\n# Data Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n# ML\nimport sklearn\nfrom sklearn import preprocessing\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.datasets import load_boston\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nimport xgboost as xg","a9ceeec9":"train_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","5bd0c2d8":"# \u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438\ncorrmat = train_data.corr()\nk = 10 # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0443\u0432\u0438\u0434\u0435\u0442\u044c\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train_data[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, \n                 fmt='.2f', annot_kws={'size': 10}, \n                 yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","d334775e":"#\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 GrLivArea\nfig, ax = plt.subplots()\nax.scatter(x = train_data['GrLivArea'], y = train_data['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()\n#\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 OverallQual\nfig, ax = plt.subplots()\nax.scatter(x = train_data['OverallQual'], y = train_data['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('OverallQual', fontsize=13)\nplt.show()\n#\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 GarageArea\nfig, ax = plt.subplots()\nax.scatter(x = train_data['GarageArea'], y = train_data['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GarageArea', fontsize=13)\nplt.show()","f7a5f0de":"# \u041b\u0438\u043a\u0432\u0438\u0434\u0438\u0440\u0443\u0435\u043c \ntrain_data = train_data.drop(train_data[(train_data['OverallQual'] > 9) & (train_data['SalePrice'] < 220000)].index)\ntrain_data = train_data.drop(train_data[(train_data['GrLivArea'] > 4000) & (train_data['SalePrice'] < 300000)].index)\ntrain_data = train_data.drop(train_data[(train_data['GarageArea'] > 1200) & (train_data['SalePrice'] < 300000)].index)","3e58addb":"# \u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ntrain_data.isnull().sum().sort_values(ascending=False).head(20)","8e1d3795":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438, \u0433\u0434\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 (target) \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e\nTarget = 'SalePrice'\ntrain_data.dropna(axis=0, subset=[Target], inplace=True)\n# \u0421\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0448\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nall_data = pd.concat([train_data, test_data],keys=['train','test'])\n\nprint('\u0423 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 {} \u0440\u044f\u0434\u043e\u0432 \u0438 {} \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432'.format(train_data.shape[0], train_data.shape[1]))\nprint('\u0423 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 {} \u0440\u044f\u0434\u043e\u0432 \u0438 {} \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432'.format(test_data.shape[0], test_data.shape[1]))\nprint('\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 {} \u0440\u044f\u0434\u043e\u0432 \u0438 {} \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432'.format(all_data.shape[0], all_data.shape[1]))","1ccb1e39":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 Id\nall_data = all_data.drop(columns=['Id'], axis=1)","4fa2d366":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\ndef missingValuesInfo(df):\n    total = df.isnull().sum().sort_values(ascending = False)\n    percent = round(df.isnull().sum().sort_values(ascending = False) \/ len(df)*100, 2)\n    temp = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    return temp.loc[(temp['Total'] > 0)]\n\nmissingValuesInfo(train_data)","59ab232b":"# \u0420\u0430\u0437\u0431\u0438\u0440\u0430\u0435\u043c\u0441\u044f \u0441 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\ndef HandleMissingValues(df):\n    num_cols = [cname for cname in df.columns if df[cname].dtype in ['int64', 'float64']]\n    cat_cols = [cname for cname in df.columns if df[cname].dtype == \"object\"]\n    values = {}\n    for a in cat_cols:\n        values[a] = 'UNKNOWN'\n    for a in num_cols:\n        #values[a] = df[a].median()\n        mean1=df[a].mean() \n        std1=df[a].std()\n        values[a]=random.randint(int(mean1-std1), int(mean1+std1))\n        \n    df.fillna(value=values, inplace=True)\nHandleMissingValues(all_data)\n# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c\nall_data.isnull().sum().sum()","77e31599":"# \u0420\u0430\u0437\u0431\u0438\u0440\u0430\u0435\u043c\u0441\u044f \u0441 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438\n\ndef getObjectColumnsList(df):\n    return [cname for cname in df.columns if df[cname].dtype == \"object\"]\n\ndef PerformOneHotEncoding(df, columnsToEncode):\n    return pd.get_dummies(df, columns=columnsToEncode)\n\ncat_cols = getObjectColumnsList(all_data)\nall_data = PerformOneHotEncoding(all_data, cat_cols)\nall_data.head()","cc6d62b7":"#\u041e\u0431\u0440\u0430\u0442\u043d\u043e\u0435 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n#train_data = all_data.iloc[:1460, :]\ntrain_data = all_data.loc['train']\ntest_data = all_data.loc['test']\ntrain_data.shape,test_data.shape","c645b292":"#\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043a ML\ntarget = train_data['SalePrice']\ntrain_data = train_data.drop(['SalePrice'], axis=1)\ntest_data = test_data.drop(['SalePrice'], axis=1)\n\nX, y = train_data, target\ntrain_data.shape,test_data.shape","e3f58c59":"#\u0412\u0442\u043e\u0440\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f ML\ngbr_reg = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,max_depth=4, max_features='sqrt',min_samples_leaf=15, min_samples_split=10,loss='huber')\ngbr_reg.fit(X, y)\npred = gbr_reg.predict(X)\nprint(gbr_reg.score(X, y))\nnp.sqrt(mean_squared_log_error(pred, y))","881a4f93":"#Submission\n\nourPrediction = gbr_reg.predict(test_data)\nsubmission = pd.DataFrame({\n        \"Id\": list(range(1461, 1461+len(test_data))),\n        \"SalePrice\": ourPrediction\n    })\nsubmission.to_csv('.\/submission.csv', index=False)","cb047b14":"# \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432 \u0444\u0430\u0439\u043b","b40cb362":"###### \u0420\u0430\u0437\u0431\u0438\u0440\u0430\u0435\u043c\u0441\u044f \u0441 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438\n\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0438\u0445 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","68aa39fb":"###### GradientBoostingRegressor\n\u0411\u044b\u043b\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 RandomForestRegressor, LinearRegression \u0438 GradientBoostingRegressor. \n\u041e\u043f\u044b\u0442\u043d\u044b\u043c \u043f\u0443\u0442\u0435\u043c \u0431\u044b\u043b\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0434\u0430\u044e\u0449\u0430\u044f \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0442\u0430\u043a\u0436\u0435 \u043e\u043f\u044b\u0442\u043d\u044b\u043c \u043f\u0443\u0442\u0435\u043c \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u044b \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b.","090123e1":"# \u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c GradientBoostingRegressor\n1)\u041e\u0431\u0440\u0430\u0442\u043d\u043e \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u0447\u043d\u044b\u0435\n\n2)\u0414\u0435\u043b\u0438\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n\n3)\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","af8c6c7d":"###### \u0421\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","c3889e0b":"# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u043f\u043e\u0434\u043a\u0430\u0447\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","4603e3ec":"# \u0421\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u0447\u043d\u044b\u0445 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","98736fd8":"###### \u041b\u0438\u043a\u0438\u0434\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u044b","39130aec":"# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432","9f4dd6b1":"###### \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0435 \u043d\u0430 SalePrice \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: GrLivArea, OverallQual \u0438 GarageArea","1dae40a4":"### \u0420\u0430\u0437\u0431\u0438\u0440\u0430\u0435\u043c\u0441\u044f \u0441 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \n\u041e\u0442\u0431\u0438\u0440\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \n\n\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435+-\u0441\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435. \n\n\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442.\n"}}