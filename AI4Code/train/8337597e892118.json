{"cell_type":{"35cad655":"code","6b7aca26":"code","454fd1f8":"code","9f6d63ff":"code","b7253aed":"code","918bbdab":"code","b95e9b26":"code","23f7dfac":"code","b4788876":"code","dc0dc6aa":"code","d6b48872":"code","3a25f092":"code","73be3971":"code","a7daf9f4":"code","7105fa4c":"code","27c54433":"code","2bd8e84b":"code","737f9bcd":"code","983d48d0":"code","4c61f73f":"code","3643f598":"code","834272b4":"markdown"},"source":{"35cad655":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6b7aca26":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","454fd1f8":"from sklearn.datasets import load_boston","9f6d63ff":"df=load_boston()\ndf","b7253aed":"dataset=pd.DataFrame(df.data)","918bbdab":"dataset.head()","b95e9b26":"dataset.columns=df.feature_names\ndataset.head()","23f7dfac":"df.target.shape","b4788876":"dataset[\"Price\"]=df.target\ndataset.head()","dc0dc6aa":"X=dataset.iloc[:,:-1] ## independent features\ny=dataset.iloc[:,-1] ## dependent features","d6b48872":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression","3a25f092":"lin=LinearRegression()\nmse=cross_val_score(lin,X,y,scoring=\"neg_mean_squared_error\",cv=5)\nmean_mse=np.mean(mse)\nprint(mean_mse)","73be3971":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\nridge=Ridge()","a7daf9f4":"parameters={'alpha':[1e-15,1e-10,1e-8,1e-3,1e-2,1,5,10,20,30,35,40,45,50,55,100]}\nridge_reg=GridSearchCV(ridge,parameters,scoring=\"neg_mean_squared_error\",cv=10)\nridge_reg.fit(X,y)","7105fa4c":"print(ridge_reg.best_params_)\nprint(ridge_reg.best_score_)","27c54433":"from sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\nlasso=Lasso()\nparameters={'alpha':[1e-15,1e-10,1e-8,1e-3,1e-2,1,5,10,20,30,35,40,45,50,55,100]}\nlasso_regressor=GridSearchCV(lasso,parameters,scoring='neg_mean_squared_error',cv=5)\n\nlasso_regressor.fit(X,y)\nprint(lasso_regressor.best_params_)\nprint(lasso_regressor.best_score_)","2bd8e84b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n","737f9bcd":"prediction_lasso=lasso_regressor.predict(X_test)\nprediction_ridge=ridge_reg.predict(X_test)","983d48d0":"print(prediction_lasso)\nprint(prediction_ridge)","4c61f73f":"import seaborn as sns\nsns.distplot(y_test-prediction_lasso)","3643f598":"import seaborn as sns\nsns.distplot(y_test-prediction_ridge)","834272b4":"### Ridge is more stable comapred to lasso and linear"}}