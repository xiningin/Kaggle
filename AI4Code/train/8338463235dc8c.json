{"cell_type":{"7ea3b349":"code","dd3cb7f0":"code","780a6512":"code","66337443":"code","87d76386":"code","bc691399":"code","e4305e37":"code","66f701b9":"code","4ae2f62a":"code","5460ee0c":"code","87bb2c5f":"code","a15534f3":"code","648734d8":"code","2518d445":"code","998e0411":"code","bfb2879e":"code","8e5efaf5":"code","2998abbf":"code","4261c05c":"code","5c9293c4":"code","8657b89b":"code","9adb24b8":"code","f01384bd":"code","89530d49":"code","fd1e103e":"code","61f32a9e":"code","73c3a7fc":"code","d823d6a9":"code","ed945536":"code","e94e8f15":"code","d459734a":"code","58e8abd5":"code","2cfb5bfc":"code","31e771fc":"code","8f0028f6":"code","396f8f2d":"code","150e8d74":"code","632124a8":"code","57ac2c10":"code","d88980ff":"code","889ddb96":"code","67a33140":"code","745be8cf":"code","ce0dcb3c":"code","29720c0d":"code","e67bad75":"code","a0c3ee65":"code","fae92529":"code","229de5e7":"code","c93978ab":"code","3338cabe":"code","8b644482":"code","d5db7827":"code","28496645":"code","041473a0":"code","4c49d576":"markdown","ff6f10aa":"markdown"},"source":{"7ea3b349":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd3cb7f0":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","780a6512":"file_name1=\"\/kaggle\/input\/titanic\/train.csv\"\nfile_name2=\"\/kaggle\/input\/titanic\/test.csv\"\n\ntrain=pd.read_csv(file_name1)\ntest=pd.read_csv(file_name2)","66337443":"train.head(6)","87d76386":"test.head(6)","bc691399":"train.info()","e4305e37":"train.shape","66f701b9":"train.isnull().sum()","4ae2f62a":"test.shape","5460ee0c":"test.isnull().sum()","87bb2c5f":"train.dtypes","a15534f3":"test.dtypes","648734d8":"cat_features=[features for features in train.columns if train[features].dtypes=='O']\ncat_features","2518d445":"num_features=[features for features in train.columns if train[features].dtypes!='O']\nnum_features","998e0411":"sns.barplot(x='Pclass',y='Survived',data=train)\nplt.title('Survived vs Pclass')","bfb2879e":"sns.barplot(x='Sex',y='Survived',data=train)","8e5efaf5":"sns.barplot(x='Embarked',y='Survived',data=train)","2998abbf":"train.head()","4261c05c":"sns.heatmap(train.corr(),annot=True)","5c9293c4":"Y_train=train['Survived']\ntrain=train.drop('Survived',axis=1)","8657b89b":"\n\nntrain = train.shape[0]\nntest = test.shape[0]\n\n","9adb24b8":"data=pd.concat((train,test)).reset_index(drop=True)\ndata","f01384bd":"data['Family_Size']=data['SibSp']+data['Parch']+1","89530d49":"data=data.drop(['SibSp','Parch'],axis=1)","fd1e103e":"data","61f32a9e":"data.isnull().sum()","73c3a7fc":"data=data.drop('Cabin',axis=1)","d823d6a9":"data","ed945536":"data['Title']=data['Name'].str.split(', ',expand=True)[1].str.split('.',expand=True)[0]","e94e8f15":"data['Title'].value_counts()","d459734a":"data['FarePerPerson']=data['Fare']\/data['Family_Size']","58e8abd5":"data.drop(['Ticket','Name'],axis=1,inplace=True)","2cfb5bfc":"data","31e771fc":"data=data.drop('Fare',axis=1)","8f0028f6":"cat_feat=[feature for feature in data.columns if data[feature].dtypes=='O']","396f8f2d":"cat_feat","150e8d74":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ndata.Sex=le.fit_transform(data.Sex)","632124a8":"data.Embarked=data.Embarked.fillna('mode')","57ac2c10":"data.isnull().sum()","d88980ff":"data.Age=data.Age.fillna(data.Age.median())","889ddb96":"data.FarePerPerson=data.FarePerPerson.fillna(data.FarePerPerson.median())\ndata.isnull().sum()","67a33140":"data['Title']=le.fit_transform(data['Title'])\ndata['Embarked']=le.fit_transform(data['Embarked'])","745be8cf":"data.Age","ce0dcb3c":"train = data[:ntrain]\ntest = data[ntrain:]","29720c0d":"train","e67bad75":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier,RandomForestClassifier","a0c3ee65":"tree=DecisionTreeClassifier()\ntree.fit(train,Y_train)","fae92529":"pred=tree.predict(test)\npred","229de5e7":"GBC=GradientBoostingClassifier()\nGBC.fit(train,Y_train)","c93978ab":"pred=GBC.predict(test)\npred","3338cabe":"ID = test['PassengerId']","8b644482":"submission=pd.DataFrame()\nsubmission['Survived'] = GBC\nsubmission['PassengerId']=ID\nsubmission.to_csv('submissiongb.csv',index=False)","d5db7827":"RFC=RandomForestClassifier()\nRFC.fit(train,Y_train)","28496645":"pred=RFC.predict(test)\npred","041473a0":"submission=pd.DataFrame()\nsubmission['Survived'] = RFC\nsubmission['PassengerId']= ID\nsubmission.to_csv('submissionrf.csv',index=False)","4c49d576":"Age is most correlated with the feature 'Pclass', so we will use the median value of the respective class to fill the missing values.","ff6f10aa":"Name,Sex,Ticket,Cabin and Embarked are having the datatype as 'Object'.\nThey need to be converted into a numerical data type."}}