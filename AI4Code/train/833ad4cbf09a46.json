{"cell_type":{"fe0e2442":"code","32bf8015":"code","66c232fc":"code","08b20281":"code","ad18ca5e":"code","342760f2":"code","b498b38e":"code","3ba16930":"code","f4293c52":"code","d612f922":"code","2ba23b5b":"code","469e2242":"code","1e798c6b":"markdown","12db7081":"markdown","ad5b4487":"markdown","24ff1e39":"markdown","1bc9b2f6":"markdown","cffac117":"markdown","d3f7a2bd":"markdown"},"source":{"fe0e2442":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","32bf8015":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndataset_df = pd.read_csv('..\/input\/cusersmarildownloadsgermancsv\/german.csv', delimiter=';', encoding = \"ISO-8859-2\", nrows = nRowsRead)\ndataset_df.dataframeName = 'german.csv'\nnRow, nCol = dataset_df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndataset_df.head()","66c232fc":"!pip install tensorflow==2.5.1","08b20281":"# Install TensorFlow Decision Forests\n!pip install tensorflow_decision_forests\n!pip install wurlitzer","ad18ca5e":"# Load TensorFlow Decision Forests\nimport tensorflow_decision_forests as tfdf\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport math\n\ntry:\n  from wurlitzer import sys_pipes\nexcept:\n  from colabtools.googlelog import CaptureLog as sys_pipes\n\n# Load the training dataset using pandas   #We don't have categorical columns\n#dataset_df = pd.read_csv(\"..\/input\/cusersmarildownloadsgermancsv\/german.csv\",  index_col=0)\n#print(dataset_df.head(3))","342760f2":"# Split the dataset into a training and a testing dataset.\n\ndef split_dataset(dataset, test_ratio=0.1):\n  \"\"\"Splits a panda dataframe in two.\"\"\"\n  test_indices = np.random.rand(len(dataset)) < test_ratio\n  return dataset[~test_indices], dataset[test_indices]","b498b38e":"# Split the dataset into a training and testing dataset.\ntrain_ds_pd, test_ds_pd = split_dataset(dataset_df)\nprint(\"{} examples in training, {} examples for testing.\".format(\n    len(train_ds_pd), len(test_ds_pd)))\n\n# Name of the label column.\nlabel = \"Creditability\"\n\n# Convert the pandas dataframe (pd.Dataframe) into tensorflow datasets (tf.data.Dataset).\ntrain_ds = tfdf.keras.pd_dataframe_to_tf_dataset(train_ds_pd, label=label, task=tfdf.keras.Task.REGRESSION)\ntest_ds = tfdf.keras.pd_dataframe_to_tf_dataset(test_ds_pd, label=label, task=tfdf.keras.Task.REGRESSION)","3ba16930":"# Configure the model.\nmodel_7 = tfdf.keras.RandomForestModel(task = tfdf.keras.Task.REGRESSION)\n\n# Optional.\nmodel_7.compile(metrics=[\"mse\"])\n\n# Train the model.\nwith sys_pipes():\n  model_7.fit(x=train_ds)","f4293c52":"# Evaluate the model on the test dataset.\nevaluation = model_7.evaluate(test_ds, return_dict=True)\n\nprint(evaluation)\nprint()\nprint(f\"MSE: {evaluation['mse']}\")\nprint(f\"RMSE: {math.sqrt(evaluation['mse'])}\")","d612f922":"# Load the test dataset using pandas  #We don't have test file\nX_test = pd.read_csv(\"..\/input\/cusersmarildownloadsgermancsv\/german.csv\",  delimiter=';', encoding = \"ISO-8859-2\" )\nprint(X_test.head(3))\n\nX_test_ds = tfdf.keras.pd_dataframe_to_tf_dataset(X_test)","2ba23b5b":"# Use the model to generate predictions\npredictions = model_7.predict(X_test_ds)\n\n# Save the predictions to a CSV file\npreds = pd.DataFrame(predictions)\npreds.columns = ['Creditability']\ninds = pd.DataFrame({'Id': X_test.index})\nresult = pd.concat([inds, preds], axis=1, join='inner')\nresult.to_csv('submission.csv', index=False)","469e2242":"result","1e798c6b":"#Training Model","12db7081":"This baseline will lead you to get familiar with TF-DF","ad5b4487":"#Code by Rishiraj Acharya  https:\/\/www.kaggle.com\/rishirajacharya\/30-days-tensorflow-decision-forests-baseline","24ff1e39":"#TensorFlow Decision Forests (TF-DF)\n\nTensorFlow Decision Forests (TF-DF) is a collection of state-of-the-art algorithms for the training, serving and interpretation of Decision Forest models. The library is a collection of Keras models and supports classification, regression and ranking. More details can be found here: https:\/\/blog.tensorflow.org\/2021\/05\/introducing-tensorflow-decision-forests.html","1bc9b2f6":"#Make Predictions","cffac117":"#Evaluate the Model","d3f7a2bd":"![](https:\/\/i.morioh.com\/2021\/07\/29\/155845e7.webp)morioh.com"}}