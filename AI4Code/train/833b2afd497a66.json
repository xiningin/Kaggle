{"cell_type":{"2b97900f":"code","693932c1":"code","d3733fb4":"code","ba0b41d8":"code","acb0df09":"code","93a4bbeb":"code","04803ec0":"code","758a8a71":"code","3918fb5d":"code","43864a64":"code","733d937d":"code","9ad0ae2f":"code","16dff18a":"code","fc8f502f":"code","a1ea695c":"code","f93593ab":"code","f13e90bd":"code","67c45707":"code","a65a8e06":"code","1d881b68":"code","d1145b4d":"code","a436778e":"code","8cbd56c3":"code","617ef58d":"code","25334c3c":"code","4132759b":"code","d9b0e7f6":"code","772c7702":"code","4d93f84c":"code","b5820ced":"code","16aa231b":"code","d5f4cc1e":"code","e97918a7":"code","5d22109d":"code","7f3fd859":"code","563be917":"code","04b8d225":"code","ec74a549":"code","7c98d929":"code","128fc0e4":"code","0f093a01":"code","9d5a228a":"code","268bab07":"code","395c2088":"code","dae170a4":"code","aefbc63b":"code","f0f4a64d":"code","68140098":"code","9a47cc25":"code","70d9d257":"code","590ea660":"code","0901db3c":"markdown","576cc037":"markdown","2fe6077b":"markdown","8144889f":"markdown","fdcdb70a":"markdown","2e694a9c":"markdown","1e4dbd2c":"markdown","ceb640a2":"markdown","d89964ac":"markdown","0613a43b":"markdown","0737e62c":"markdown","42d9aa59":"markdown","0ea188d3":"markdown","6380eebb":"markdown","7f648c61":"markdown","0d3ab936":"markdown","2b9ca377":"markdown","261f4bce":"markdown","e072040b":"markdown"},"source":{"2b97900f":"import numpy as np\nimport pandas as pd\nimport math\nimport missingno as msno\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nplt.style.use('seaborn-darkgrid')\npalette = plt.get_cmap('Set2')","693932c1":"data = pd.read_csv('..\/input\/telecom-users-dataset\/telecom_users.csv')\ndata.head()","d3733fb4":"msno.bar(data)","ba0b41d8":"data.nunique()","acb0df09":"data.dtypes","93a4bbeb":"data.describe(include=[np.number])","04803ec0":"data.describe(include=[np.object])","758a8a71":"gender = data['gender'].value_counts()\n\nplt.figure(figsize=(7, 5))\n\nplot = gender.plot.pie(fontsize=16, autopct='%1.0f%%', labeldistance=1.2, radius=2)\nplt.show()","3918fb5d":"ismaried = data['Partner'].value_counts()\n\nplt.figure(figsize=(10, 7))\n\nsns.barplot(x=ismaried.index, y=ismaried.values, alpha=0.8)\nplt.title('Number of clients who are married or not', fontsize=18, pad=10)\nplt.ylabel('Number of clients', fontsize=14)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=10)\nplt.show()","43864a64":"tenure = data['tenure']\n\nplt.figure(figsize=(10, 7))\nsns.histplot(tenure, bins=50, alpha=0.8)\n\nplt.title('How many months a person has been a client of the company', fontsize=18, pad=10)\nplt.xticks(list(range(0, tenure.max(), 5)), fontsize=12)\nplt.yticks(list(range(0, 550, 30)), fontsize=12)\nplt.xlabel('Number of months', fontsize=16)\nplt.ylabel('Number of clients', fontsize=16)\nplt.show()","733d937d":"phone_servise = data['PhoneService'].value_counts()\n\nplt.figure(figsize=(10, 7))\n\nsns.barplot(x=phone_servise.index, y=phone_servise.values, alpha=0.8)\nplt.title('Number of married clients using telephone communication', fontsize=18, pad=10)\nplt.ylabel('Number of clients', fontsize=14)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=10)\nplt.show()","9ad0ae2f":"other_servises = ['MultipleLines', 'InternetService', 'OnlineSecurity',\n                  'OnlineBackup', 'DeviceProtection', 'TechSupport',\n                  'StreamingTV', 'StreamingMovies']\n\nfig, ax = plt.subplots(nrows=4, ncols=2, figsize=(20, 15), sharey=True)\nt = 0\n\n\nfor i in range(4):\n    for j in range(2):\n        data_prep = [data[obj].value_counts()  for obj in other_servises]\n        axes = ax[i][j]\n\n        sns.barplot(x=data_prep[t].index, y=data_prep[t].values, ax=axes, alpha=0.8)\n        axes.set_title(other_servises[t], fontsize=16)\n        axes.set_yticks(list(range(0, 3001, 500)))\n        if j == 0:\n            axes.set_ylabel('Number of clients', fontsize=12)\n        t += 1\n\nfig.suptitle('Customers who use additional services', y=0.93, fontsize=20)\nplt.show()","16dff18a":"contract = data['Contract'].value_counts()\n\nplt.figure(figsize=(10, 7))\n\nsns.barplot(x=contract.index, y=contract.values, alpha=0.8)\nplt.title('Number of clients and their type of contract', fontsize=18, pad=10)\nplt.ylabel('Number of clients', fontsize=14)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=10)\nplt.show()","fc8f502f":"montly_charges = data['MonthlyCharges']\n\nplt.figure(figsize=(10, 7))\n\nsns.distplot(montly_charges).set(ylabel=None, xlabel=None)\nplt.title('Monthly payment to date', fontsize=18)\nplt.xlabel('Payment amount', fontsize=14)\nplt.show()","a1ea695c":"PaymentMethod = data['PaymentMethod'].value_counts()\n\nplt.figure(figsize=(10, 7))\n\nsns.barplot(x=PaymentMethod.index, y=PaymentMethod.values, alpha=0.8)\nplt.title('Number of clients and their type of payment', fontsize=18, pad=10)\nplt.ylabel('Number of clients', fontsize=14)\nplt.xlabel('Payment type', fontsize=14)\nplt.xticks(fontsize=14, rotation=30)\nplt.yticks(fontsize=10)\nplt.show()","f93593ab":"data.head()","f13e90bd":"object_cols = list(data.dtypes[data.dtypes == object].index)\n\nfor i in object_cols:\n    data[i] = data[i].astype('category')","67c45707":"cat_columns = data.select_dtypes(['category']).columns\ndata[cat_columns] = data[cat_columns].apply(lambda x: x.cat.codes)","a65a8e06":"data","1d881b68":"# Define train and test datasets for training\ndrop_elements = ['Unnamed: 0', 'customerID', 'Churn']\ntrain = data.drop(drop_elements, axis=1)\ntest = data['Churn']","d1145b4d":"colormap = plt.cm.RdBu\nplt.figure(figsize=(14,12))\nplt.title('Feature correlation matrix', y=1, size=15)\nsns.heatmap(data.corr(),linewidths=0.1,vmax=1.0, \n            square=True, cmap=colormap, linecolor='white', annot=True)\nplt.show()","a436778e":"corr_train = data.corr()","8cbd56c3":"Churn = pd.DataFrame(corr_train['Churn'].sort_values(ascending=False))\nChurn","617ef58d":"from sklearn.ensemble import StackingClassifier\n\nfrom sklearn.model_selection import (GridSearchCV,\n                                     train_test_split,\n                                     StratifiedKFold,\n                                     cross_val_predict)\n\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.svm import SVC\n\nfrom xgboost import XGBClassifier\n\nfrom sklearn.metrics import accuracy_score, roc_auc_score, r2_score","25334c3c":"from sklearn.metrics import confusion_matrix, precision_score, recall_score, classification_report","4132759b":"skf = StratifiedKFold(n_splits=5)\n\n\ngbc = GradientBoostingClassifier(random_state=42)\nrfc = RandomForestClassifier(random_state=42)\nsvc = SVC(random_state=42)\nada = AdaBoostClassifier(random_state=42)\n\nX_train, X_test, y_train, y_test = train_test_split(train, test, test_size=0.2, random_state=17) # \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435","d9b0e7f6":"xgb_model = XGBClassifier(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, random_state =7, nthread = -1)\nxgb_model.fit(X_train, y_train)","772c7702":"y_pred = xgb_model.predict(X_test)","4d93f84c":"confusion_matrix(y_test, y_pred)","b5820ced":"accuracy_score(y_test, y_pred)","16aa231b":"print(classification_report(y_test, y_pred))","d5f4cc1e":"rfc_params = { \n    'n_estimators': [200, 500],\n    'max_features': ['auto', 'sqrt', 'log2'],\n    'max_depth' : [4,5,6,7,8],\n    'criterion' :['gini', 'entropy']\n}","e97918a7":"# CV_rfc = GridSearchCV(rfc, rfc_params, scoring='roc_auc', cv=skf)\n# CV_rfc.fit(X_train, y_train)\n# rfc_best_params = CV_rfc.best_params_","5d22109d":"rfc_best_params = {'criterion': 'gini',\n    'max_depth': 7,\n    'max_features': 'auto',\n    'n_estimators': 500}","7f3fd859":"gbc_params = {\n    'learning_rate': [0.01, 0.025, 0.05, 0.075, 0.1, 0.15, 0.2],\n    'max_depth': [3,5,8],\n    'subsample': [0.5, 0.618, 0.8, 0.85, 0.9, 0.95, 1.0],\n    }","563be917":"# CV_gbc = GridSearchCV(gbc, gbc_params, scoring='roc_auc', cv=skf)\n# CV_gbc.fit(X_train, y_train)\n# gbc_best_params = CV_gbc.best_params_","04b8d225":"gbc_best_params = {'learning_rate': 0.05, 'max_depth': 3, 'subsample': 0.618}","ec74a549":"svc_params = {'C': [0.1, 1, 10, 100, 1000],  \n              'gamma': [1, 0.1, 0.01, 0.001, 0.0001], \n              'kernel': ['rbf']}","7c98d929":"# CV_svc = GridSearchCV(svc, svc_params, scoring='roc_auc', cv=skf)\n# CV_svc.fit(X_train, y_train)\n# svc_best_params = CV_svc.best_params_","128fc0e4":"svc_best_params = {'C': 100, 'gamma': 0.0001, 'kernel': 'rbf'}","0f093a01":"ada_params = {\n    'n_estimators': [100, 200],\n    'learning_rate': [0.001, 0.01, 0.1, 0.2, 0.5]\n}","9d5a228a":"# CV_ada = GridSearchCV(ada, ada_params, scoring='roc_auc', cv=skf)\n# CV_ada.fit(X_train, y_train)\n# ada_best_params = CV_ada.best_params_","268bab07":"ada_best_params = {'learning_rate': 0.1, 'n_estimators': 200}","395c2088":"gbc_model = GradientBoostingClassifier(**gbc_best_params, random_state=42)\nrfc_model = RandomForestClassifier(**rfc_best_params, random_state=42)\nsvc_model = SVC(**svc_best_params, random_state=42)\nada_model = AdaBoostClassifier(**ada_best_params, random_state=42)","dae170a4":"meta = XGBClassifier(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, random_state =42, nthread = -1)\nmodels = [('gbc', gbc_model), ('rf', rfc_model), ('svc', svc_model), ('ada', ada_model)]","aefbc63b":"stacking_clf = StackingClassifier(models, meta, cv=skf)","f0f4a64d":"stacking_clf.fit(X_train, y_train)","68140098":"y_pred2 = stacking_clf.predict(X_test)","9a47cc25":"stacking_clf.score(X_test, y_test)","70d9d257":"confusion_matrix(y_test, y_pred2)","590ea660":"print(classification_report(y_test, y_pred2))","0901db3c":"# EDA and Building models for predicting outflow\n\n<br> <br>\n**Work description:**\n<br> <br>\nAny business wants to maximize the number of customers. To achieve this goal, it is important not only to try to attract new ones, but also to retain existing ones. Retaining a client will cost the company less than attracting a new one. In addition, a new client may be weakly interested in business services and it will be difficult to work with him, while old clients already have the necessary data on interaction with the service.\n <br>\n\nAccordingly, predicting the churn, we can react in time and try to keep the client who wants to leave. Based on the data about the services that the client uses, we can make him a special offer, trying to change his decision to leave the operator. Thanks to this, the task of retention will be easier to implement than the task of attracting new users, about which we do not know anything yet. <br>\n\nYou are provided with a dataset from a telecommunications company. The data contains information about almost six thousand users, their demographic characteristics, the services they use, the duration of using the operator's services, the method of payment, and the amount of payment.\n<br>\n\nThe task is to analyze the data and predict the churn of users (to identify people who will and will not renew their contract). The work should include the following mandatory items:\n1. Description of data * (with calculation of basic statistics) *,\n2. Research of dependencies and formulation of hypotheses,\n3. Building models for predicting outflow * (with justification for the choice of a particular model) * based on tested hypotheses and identified relationships,\n4. Comparison of the quality of the obtained models.\n\nIn the second section, there must be a justification of hypotheses, a detailed description of the identified relationships, as well as their visualization.\n<br> In the fourth, general conclusions of the work should be formulated additionally.\n\n<br> <br>\n","576cc037":"Next, let's start examining each attribute of the dataset separately and display a number of statistics for each of them.","2fe6077b":"As we can see the conclusion that there are slightly more male clients than female clients is proved on the graph","8144889f":"## Codebook\n<br>\n\n[Link to download data] (https:\/\/drive.google.com\/open?id=1dPCG76ST6NohYKtVMGv6HpFL-jD5p1eJ)\n<br> <br>\n`telecom_users.csv` contains the following values: <br> <br>\n\n`customerID` - customer id <br>\n`gender` - client gender (male \/ female) <br>\n`SeniorCitizen` - whether the client is a pensioner (1, 0) <br>\n`Partner` - whether the client is married (Yes, No) <br>\n`Dependents` - does the client have dependents (Yes, No) <br>\n`tenure` - how many months a person has been a client of the company <br>\n`PhoneService` - is the telephone service activated (Yes, No) <br>\n`MultipleLines` - whether multiple telephone lines are connected (Yes, No, No phone service) <br>\n`InternetService` - client's Internet provider (DSL, Fiber optic, No) <br>\n`OnlineSecurity` - is the online security service enabled (Yes, No, No internet service) <br>\n`OnlineBackup` - is the online backup service activated (Yes, No, No internet service) <br>\n`DeviceProtection` - does the client have equipment insurance (Yes, No, No internet service) <br>\n`TechSupport` - is the technical support service activated (Yes, No, No internet service) <br>\n`StreamingTV` - is the streaming TV service activated (Yes, No, No internet service) <br>\n`StreamingMovies` - is the streaming cinema service activated (Yes, No, No internet service) <br>\n`Contract` - type of customer contract (Month-to-month, One year, Two year) <br>\n`PaperlessBilling` - whether the client uses paperless billing (Yes, No) <br>\n`PaymentMethod` - payment method (Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)) <br>\n`MonthlyCharges` - current monthly payment <br>\n`TotalCharges` - the total amount that the client has paid for the services for the entire time <br>\n`Churn` - whether there was a churn (Yes or No) <br>","fdcdb70a":"In 1-2 months ~ 510 people use the services, but then it drops sharply. It can be assumed that at this time most of the clients leave","2e694a9c":"On average, half of the clients do not use additional services. About 2\/3 of clients use additional services","1e4dbd2c":"Most of the clients pay for services by electronic check","ceb640a2":"Here there is about the same situation of married and unmarried a little more than married or married.","d89964ac":"Let's take a look at the presence of missing values, so as not to face unpleasant surprises in the future.","0613a43b":"Stacking","0737e62c":"### Conclusions that can be drawn at the moment: <br>\n* The difference between the sexes of clients is very small - about 50 people (male gender prevails).\n* Most clients have no dependents.\n* 90% of clients have a telephone service connected.\n* On average, half of the clients do not use additional services.\n* Half of the clients have a contract type - \"From month to month\".\n* More than half of customers use paperless billing.\n* One third of clients have a payment method - \"Electronic check\".\n\n\n","42d9aa59":"# 2. Dependency research and formulation of hypotheses","0ea188d3":"Find out how many unique values are contained in the data","6380eebb":"# 1. Data Description","7f648c61":"XGBClassifier","0d3ab936":"We can conclude that there are no duplicate customers in the data","2b9ca377":"# 3. Building models to predict outflow","261f4bce":"As we can see, about half of the clients have a \"From month to month\" contract type, and about 1\/4 each have \"Two years\" and \"One year\" contract types.","e072040b":"The conclusion that almost all customers use a telephone connection was confirmed"}}