{"cell_type":{"f9b932e4":"code","d2fbe2f1":"code","9f3bc09f":"code","592d4372":"code","1ffea561":"code","9b1a818d":"code","ad090762":"code","e8e8a6ec":"code","95a750a3":"code","f529a40a":"code","5bae699c":"code","89abd5ad":"code","a1442259":"code","02a2718d":"code","34472e0a":"code","6fbda09c":"code","f90015ed":"markdown","25fb5c57":"markdown","5b96f2a8":"markdown","2ed77e5d":"markdown","52ea1cf2":"markdown","3b548919":"markdown","b57d72f6":"markdown","305d54e9":"markdown","d553b55b":"markdown"},"source":{"f9b932e4":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm \nimport math\n","d2fbe2f1":"df = pd.read_csv(\"..\/input\/predicting-ese-marks\/amsPredictionSheet1-201009-150447.csv\")\ndf.head()","9f3bc09f":"df.describe()","592d4372":"corr=df.corr()\ncorr.style.background_gradient(cmap='coolwarm')","1ffea561":"endog = df['ESE']\nexog = sm.add_constant(df[['MSE','Attendance','HRS']])\nprint(exog)","9b1a818d":"x = exog.to_numpy()\ny = endog.to_numpy()\ns1_xt=np.transpose(x)\nprint(s1_xt)","ad090762":"s2_mull=np.matmul(s1_xt,x)\nprint(s2_mull)","e8e8a6ec":"s3_inv = np.linalg.inv(s2_mull)\nprint(s3_inv)","95a750a3":"s4_mul = np.matmul(s3_inv,s1_xt)\nprint(s4_mul)","f529a40a":"s5_res = np.matmul(s4_mul,y)\nprint(s5_res)","5bae699c":"mod = sm.OLS(endog, exog)\nresults = mod.fit()\nprint (results.summary())","89abd5ad":"def RSE(y_true, y_predicted):\n   \n    y_true = np.array(y_true)\n    y_predicted = np.array(y_predicted)\n    RSS = np.sum(np.square(y_true - y_predicted))\n\n    rse = math.sqrt(RSS \/ (len(y_true) - 2))\n    return rse","a1442259":"yp= results.predict()\nypa = np.array(yp)\nyta = df['ESE']\neterms =yta-ypa\n\n\ndf1 = pd.DataFrame(eterms)\ndf1['ESE'].hist(bins=10)","02a2718d":"rse= RSE(df['ESE'],results.predict())\nprint(rse)\n","34472e0a":"from sklearn import linear_model\nX = df[['MSE','Attendance','HRS']]\ny = df['ESE']\n\nlm = linear_model.LinearRegression()\nmodel = lm.fit(X,y)\nlm.coef_","6fbda09c":"lm.intercept_","f90015ed":"**Multivarient Regression using Matrix operation:**","25fb5c57":" # implimenting Multiple Linear Regression using matrix operation, OLS and Gradient Descent method...   \n \n Now in this notebook we will see three different methods for implimenting MLR with the data of Student Marks\nHere the task is predicting End semester exam marks(ESE) on the basis of students Mid semester exam marks(MSE) and his Attendence(Attendance) \n\n1) Dependent Variable y is ESE\n\n2) Independent Variables are: Attendance (x1), and MSE(x2)\n\n3) One more input feature is added called HRS:->NO. of hour a student studied a day before exam(0HRS to 24HRS)\n\n","5b96f2a8":"now we will seperate input vectors from output vectors and add one constant unit vector for the value of bita zero.","2ed77e5d":"Correlation analysis signifies the relation between differeent random variable.","52ea1cf2":"next step is calculate inverse of the  if the result for that numpy provide one method called np.linalg.inv()","3b548919":"**The following code segment builds the MLR model from Scikit-Learn module**","b57d72f6":"To do the matrx operation we have to convert the data frame into numpy array  in whiich we can perform matrix operation. \nhere we have converted the input vectore as numpy array in x and output vector n y.\nfor getting the transposee of the amtricx we have method called np.transpose().","305d54e9":"**The following code segment build the MLR model using the OLS method from the statsmodel**","d553b55b":"**implementing Libraries:**\n\n        Here seaborn and matlot libraries implemented for the Data Visualization and statmodels for implenting MLR.   "}}