{"cell_type":{"419a862a":"code","bb9d3528":"code","71a00a69":"code","57aa072a":"code","efc2ac9c":"code","e5096108":"code","89a3dc3e":"code","233ac802":"code","adaf7f1b":"code","efa5ffdc":"code","eca60615":"code","1bd86cbf":"code","b04d81e3":"code","7053ae20":"code","d45abcdb":"code","e3252a25":"code","a6f4efcd":"code","3ce106e9":"code","70181fbb":"code","134a9f14":"code","ea42d3a8":"code","a92f83df":"code","5070578a":"code","0f92a914":"code","33f65807":"code","26a4d755":"code","3b7f5050":"code","1d6ad8fa":"code","0f2ddf18":"code","d41f89a6":"code","a97e544d":"code","db3c7d0a":"code","42898efa":"code","72f43889":"code","ed9dddb1":"code","ddb99cb6":"code","12283566":"code","4148b847":"code","a2e818af":"code","cf6bb8bb":"code","9cd71335":"code","e0c8cfdd":"code","7b90707f":"code","50432ef1":"code","13b8aa66":"markdown","13c607a1":"markdown","63b82499":"markdown","f9659a4b":"markdown","7765606d":"markdown"},"source":{"419a862a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import cross_val_score ,KFold \nfrom sklearn.neighbors import KNeighborsClassifier \nfrom sklearn.metrics import confusion_matrix , classification_report , accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import GradientBoostingClassifier , RandomForestClassifier , AdaBoostClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nimport warnings\nwarnings.filterwarnings('ignore')","bb9d3528":"#Read Data\ndata_test = pd.read_csv('..\/input\/final-project-python-ds-dasar\/test.csv')\ndata_train = pd.read_csv('..\/input\/final-project-python-ds-dasar\/train.csv')","71a00a69":"data_train","57aa072a":"data_test","efc2ac9c":"data_train.info()","e5096108":"data_test.info()","89a3dc3e":"#Mencari data Null didalam data_test\ndata_test.isnull().sum()","233ac802":"##Mencari data Null didalam data_train\ndata_train.isnull().sum()","adaf7f1b":"#Menganalisa peran kecepatan_clock dalam price_range\nplt.figure(figsize=(10,6))\nsns.countplot(data=data_train,y='kecepatan_clock',hue='price_range')","efa5ffdc":"#Menganalisa peran panjang_layar dalam price_range\nplt.figure(figsize=(10,6))\nsns.countplot(data=data_train,y='panjang_layar',hue='price_range')","eca60615":"#Mengisi data yang kosong dengan metode foward fill \/ ffill\ndata_train['kecepatan_clock'] = data_train['kecepatan_clock'].fillna(method='ffill')\ndata_train['panjang_layar'] = data_train['panjang_layar'].fillna(method='ffill')","1bd86cbf":"#Mengecek apakah masih ada data yang bernilai Null \/ Kosong\ndata_train.isnull().sum()","b04d81e3":"data_train.describe()","7053ae20":"#Menganalisa peran jumlah prosessor dalam price_range\nplt.figure(figsize=(18,15))\nsns.countplot(data=data_train,y='jumlah_prosesor',hue='price_range')","d45abcdb":"#Menganalisa peran kamera_belakang_mp dalam price_range\nplt.figure(figsize=(18,15))\nsns.countplot(data=data_train,y='kamera_belakang_mp',hue='price_range')","e3252a25":"#Menganalisa peran kamera_depan dan kamera_belakang terhadap price_range\nplt.figure(figsize=(12,8))\nsns.barplot(data=data_train,x='kamera_depan',y='kamera_belakang_mp',hue='price_range')","a6f4efcd":"#Menganalisa peran four_g dan wifi terhadap price_range\nplt.figure(figsize=(12,8))\nsns.barplot(data=data_train,x='four_g',y='wifi',hue='price_range')","3ce106e9":"#Menganalisa memori_internal dan jumlah prosesor terhadap price_range\nplt.figure(figsize=(20,12))\nsns.barplot(data=data_train,y='memori_internal',x='jumlah_prosesor',hue='price_range')","70181fbb":"#Menganalisa peran kecepatan_clock dan daya_baterai terhadap price_range\nplt.figure(figsize=(13,8))\nsns.barplot(data=data_train,x='kecepatan_clock',y='daya_baterai',hue='price_range')","134a9f14":"#Memreplace data yang masih memiliki nilai obj ke dalam int\nprice_data = [data_train , data_test]\nfour_G = {'Ya':1 , 'Tidak':0}\nrange = {'0-<1000k': 0 , '1000k-<2000k':1 , '2000k-3000k': 2 , '>3000k':3 }\nfor data in price_data :\n  data['four_g'] = data['four_g'].replace(four_G)\n\ndata_train['price_range'] = data_train['price_range'].replace(range)","ea42d3a8":"#Mengecek pergantian data setelah di replace\ndata_train.head()","a92f83df":"data_test.head()","5070578a":"#Menentukan nilai x dan y dalam melakukan training data\nx = data_train.drop(['index','price_range'],axis=1)\ny = data_train['price_range']","0f92a914":"#Spliting data\nx_train, x_test, y_train, y_test = train_test_split(x, y, \ntest_size=0.25, random_state=0)","33f65807":"#mengecek apakah data x_train sesuai yang diharapkan\nx_train","26a4d755":"#mengecek apakah data y_train sesuai yang diharapkan\ny_train","3b7f5050":"#Pemilihan model yang cocok untuk data_train\nalgo = []\nalgo.append(('LR',LogisticRegression()))\nalgo.append(('LDA',LinearDiscriminantAnalysis()))\nalgo.append(('KNN',KNeighborsClassifier()))\nalgo.append(('DTS',DecisionTreeClassifier()))\nalgo.append(('Gauss',GaussianNB()))\nalgo.append(('GBC',GradientBoostingClassifier()))\nalgo.append(('RFC',RandomForestClassifier()))\nalgo.append(('MPL',MLPClassifier()))\nalgo.append(('SVC',SVC()))\nalgo.append(('Ada',AdaBoostClassifier()))\nalgo.append(('QDA',QuadraticDiscriminantAnalysis()))\n\nresult = []\nnames = []\nfor name , algorit in algo :\n  kfold = KFold(n_splits=20,random_state=10,shuffle=True)\n  cv_result = cross_val_score(algorit,x_train,y_train,cv=kfold,scoring='accuracy')\n  result.append(cv_result)\n  names.append(name)\n  info = \"%s: %f (%f)\" % (name, cv_result.mean(), cv_result.std())\n  print(info)","1d6ad8fa":"#Klasifikasi kembali Model dengan 3 nilai tertinggi\n# LinearDiscriminantAnalysis\nLDA = LinearDiscriminantAnalysis()\nLDA.fit(x_train,y_train)\npredLDA = LDA.predict(x_test)\naccLDA = accuracy_score(y_test , predLDA)\nprint ('Accuracy model {:.6f} '.format(accLDA))","0f2ddf18":"print (classification_report(y_test, predLDA))","d41f89a6":"# KNN\nKNN = KNeighborsClassifier()\nKNN.fit(x_train,y_train)\npredKNN = KNN.predict(x_test)\naccKNN = accuracy_score(y_test , predKNN)\nprint ('Accuracy model {:.6f} '.format(accKNN))","a97e544d":"print (classification_report(y_test, predKNN))","db3c7d0a":"# Model yang dipilih berdasarkan Accuracy tertinggi dan F_score\n# Serta melakukan analisis model attribute untuk mengaplikasikanya kedalam data_train\n# SVC\nsvc = SVC(gamma='auto',kernel='linear',C=0.000125)\nsvc.fit(x_train,y_train)\npredSVC = svc.predict(x_test)\naccSVC = accuracy_score(y_test,predSVC)\nprint ('Accuracy model {:.6f} '.format(accSVC))","42898efa":"# Memvisualisasi prediksi data\nconfusion_matrix(y_test , predSVC)","72f43889":"f, ax = plt.subplots(figsize=(8,5))\nsns.heatmap(confusion_matrix(y_test, predSVC), annot=True, fmt=\".0f\", ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","ed9dddb1":"print (classification_report(y_test, predSVC))","ddb99cb6":"#Klasifikasi Model dengan 3 nilai Terendah\n# MPLClasifier\nMPL = MLPClassifier()\nMPL.fit(x_train,y_train)\npredMPL = MPL.predict(x_test)\naccMPL = accuracy_score(y_test , predMPL)\nprint ('Accuracy model {:.6f} '.format(accMPL))","12283566":"print (classification_report(y_test, predMPL))","4148b847":"# LogisticRegression\nLR = LogisticRegression()\nLR.fit(x_train,y_train)\npredLR = LR.predict(x_test)\naccLR = accuracy_score(y_test , predLR)\nprint ('Accuracy model {:.6f} '.format(accLR))","a2e818af":"print (classification_report(y_test, predLR))","cf6bb8bb":"#Gaussian\nGauss = GaussianNB()\nGauss.fit(x_train,y_train)\npredGauss = Gauss.predict(x_test)\naccGauss = accuracy_score(y_test , predGauss)\nprint ('Accuracy model {:.6f} '.format(accGauss))","9cd71335":"print (classification_report(y_test, predGauss))","e0c8cfdd":"# Apply Model to Test data \ntest_data = data_test.drop('index',axis =1)\napply_model = svc.predict(test_data)","7b90707f":"# Memasukan data yang telah di terapkan ke dalam dataframe sesuai dengan ketentuan Submission yang diminta\na = {'index':data_test['index'].values,'price_range':apply_model}\ntested_data = pd.DataFrame.from_dict(a,orient='index')\ntrans = tested_data.T\ntrans.head()","50432ef1":"# Melakukan print dataframe ke dalam bentuk .csv\ntrans.to_csv('Submission.csv',index='false')","13b8aa66":"##Importing Global Environment","13c607a1":"##Training Data dan Modeling","63b82499":"##Menerapkan Model yang telah di buat ke dalam Data_test dan melakukan print ke dalam bentuk CSV","f9659a4b":"#Price Prediction with Python","7765606d":"##Memproses Data yang diberikan"}}