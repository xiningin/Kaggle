{"cell_type":{"3fad5858":"code","f04338b3":"code","fba5134b":"code","804a81d6":"code","9355f2aa":"code","fc0c7e7e":"code","103f4632":"code","cb91b010":"code","605b6615":"code","719dd4a0":"code","2ddc85d4":"code","211b9272":"code","39e83310":"code","6c8f7369":"code","77c063d8":"code","4b5ae40b":"code","69d79dd9":"code","46c68aa6":"code","65db0c77":"code","250b78ee":"code","d7511f53":"code","50f5e4ed":"code","010726d4":"code","f3fdbb31":"code","6b05919e":"code","57485fbc":"code","2be4dcdf":"code","7d519a79":"code","d7c4e994":"code","b359a241":"code","68025e82":"code","b6501c3e":"code","21a1c092":"code","09c7d321":"code","26e74c7a":"code","84d796f6":"markdown","78967b57":"markdown","8b683dbc":"markdown","839db6c4":"markdown","d19cec8a":"markdown","310446e0":"markdown","d51d7be4":"markdown","d24c6b1f":"markdown","71ddcb2f":"markdown","dc8ace9b":"markdown","b2cb4732":"markdown","0f2c820d":"markdown","66024461":"markdown","99547352":"markdown","fe4762d4":"markdown","3dc551e3":"markdown","1e07682a":"markdown","54ba8e41":"markdown","be96bf40":"markdown","22faf9c1":"markdown","abd8fba9":"markdown","d926cb39":"markdown","64300eed":"markdown"},"source":{"3fad5858":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f04338b3":"import matplotlib.pyplot as plt\nimport seaborn as sns","fba5134b":"calories_df = pd.read_csv('\/kaggle\/input\/fmendesdat263xdemos\/calories.csv')\nexercise_df = pd.read_csv('\/kaggle\/input\/fmendesdat263xdemos\/exercise.csv')","804a81d6":"calories_df.head()","9355f2aa":"exercise_df.head()","fc0c7e7e":"print(f'Shape: Calories - {calories_df.shape}')\nprint(f'Shape: Exercise - {exercise_df.shape}')","103f4632":"df = pd.merge(exercise_df, calories_df, on='User_ID')\ndf.head()","cb91b010":"df.shape","605b6615":"df.drop('User_ID', axis=1, inplace=True)\ndf.head()","719dd4a0":"sns.catplot(x='Gender', kind='count', data=df)","2ddc85d4":"sns.catplot(x='Gender', y='Calories', kind='box', data=df)","211b9272":"sns.distplot(df['Age'])","39e83310":"sns.jointplot(x='Age', y='Calories', data=df)","6c8f7369":"def plot_numeric_col(col_name):\n    fig, (ax1, ax2) = plt.subplots(1,2,figsize=(10,6))\n    fig.suptitle(f'Plots for \"{col_name}\"')\n    sns.distplot(df[col_name], ax=ax1)\n    ax1.set_title(f'Distribution of {col_name}')\n    sns.regplot(x=col_name, y='Calories', data=df, ax=ax2)\n    ax2.set_title(f'{col_name} vs Calories')\n    plt.show()","77c063d8":"def get_numeric_cols():\n    num_cols = df.select_dtypes(include=np.number).columns.tolist()\n    del num_cols[-1]\n    return num_cols","4b5ae40b":"for col in get_numeric_cols():\n    plot_numeric_col(col)","69d79dd9":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split","46c68aa6":"X = df[['Duration']]\ny = df['Calories']","65db0c77":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nprint(X_train.shape, X_test.shape)\nprint(y_train.shape, y_test.shape)","250b78ee":"lr_1 = LinearRegression()\nlr_1.fit(X_train, y_train)\n\ny_pred = lr_1.predict(X_test)\nmse = mean_squared_error(y_pred, y_test)\nprint('Root Mean Squared Error: {}'.format(np.sqrt(mse)))","d7511f53":"plt.scatter(X_test, y_test, color='blue') # plotting the observation line\nplt.plot(X_test, y_pred, color='red') # plotting the regression line\nplt.show()","50f5e4ed":"X= df[['Duration', 'Heart_Rate', 'Body_Temp']]\ny = df['Calories']","010726d4":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 42)\n\nprint(X_train.shape, X_test.shape)\nprint(y_train.shape, y_test.shape)","f3fdbb31":"lr_2 = LinearRegression()\nlr_2.fit(X_train, y_train)\n\ny_pred = lr_2.predict(X_test)\nmse = mean_squared_error(y_pred, y_test)\nprint('Root Mean Squared Error: {}'.format(np.sqrt(mse)))","6b05919e":"plt.scatter(X_test['Duration'], y_test, color='blue') # plotting the observation line\nplt.plot(X_test['Duration'], y_pred, color='red') # plotting the regression line\nplt.show()","57485fbc":"plt.scatter(X_test['Heart_Rate'], y_test, color='blue') # plotting the observation line\nplt.plot(X_test['Heart_Rate'], y_pred, color='red') # plotting the regression line\nplt.show()","2be4dcdf":"plt.scatter(X_test['Body_Temp'], y_test, color='blue') # plotting the observation line\nplt.plot(X_test['Body_Temp'], y_pred, color='red') # plotting the regression line\nplt.show()","7d519a79":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import r2_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor","d7c4e994":"df.head()","b359a241":"le = LabelEncoder()\ndf.loc[:, 'Gender'] = le.fit_transform(df.Gender.values)\ndf.head()","68025e82":"x_train, x_val, y_train, y_val = train_test_split(df.drop('Calories', axis=1), df.Calories.values, test_size=0.3, random_state=42)","b6501c3e":"print(x_train.shape, x_val.shape)\nprint(y_train.shape, y_val.shape)","21a1c092":"lr = LinearRegression()\nlr.fit(x_train, y_train)\npreds = lr.predict(x_val)\nrmse = np.sqrt(mean_squared_error(y_val, preds))\nr2 = r2_score(y_val, preds)\n\nprint(f'Model=LinearRegression, RMSE={rmse:.3f}, R2={r2:.3f}')","09c7d321":"dt = DecisionTreeRegressor(random_state=42)\ndt.fit(x_train, y_train)\npreds = dt.predict(x_val)\nrmse = np.sqrt(mean_squared_error(y_val, preds))\nr2 = r2_score(y_val, preds)\n\nprint(f'Model=DecisionTree, RMSE={rmse:.3f}, R2={r2:.3f}')","26e74c7a":"rf = RandomForestRegressor(n_estimators=30, random_state=42)\nrf.fit(x_train, y_train)\npreds = rf.predict(x_val)\nrmse = np.sqrt(mean_squared_error(y_val, preds))\nr2 = r2_score(y_val, preds)\n\nprint(f'Model=RandomForest, RMSE={rmse:.3f}, R2={r2:.3f}')","84d796f6":"Let's plot for each numeric column by defining Python function","78967b57":"Now, we can get rid of 'User_ID' column as we don't require it for analysis.","8b683dbc":"We can see from above, RandomForest model is giving us best R2_Score on validation dataset.","839db6c4":"Split the data into train and validation sets","d19cec8a":"## 2. Glance data from both the dataframes","310446e0":"From the dataframes, it seems that we can merge both the datasets on column 'User_ID'","d51d7be4":"## Prepare for model building","d24c6b1f":"## 4. Data exploration","71ddcb2f":"## 1. Load data from csv files in Pandas DataFrame","dc8ace9b":"### 2. Distribution of data over 'Age'","b2cb4732":"So, now our dataframe is ready for the exploration.","0f2c820d":"## 3. Merge both dataframes on 'User_ID' column","66024461":"### 1. Distribution of data over 'Gender'","99547352":"### 3. Model with All columns","fe4762d4":"By looking at above plots, we can see that 'Duration', 'Heart_Rate', 'Body_Temp' are interesting columns for the prediction of calories burnt.","3dc551e3":"### 1. Model with 'Duration' column","1e07682a":"#### Linear regression model","54ba8e41":"Above notebook is the partial work on Kaggle. For complete project, please refer to [Github project](https:\/\/github.com\/peeush-the-developer\/projects\/tree\/main\/CaloriesBurnedPrediction)","be96bf40":"To prepare model with All columns (that includes 'Gender' as categorical column), we need to convert 'Gender' column from str to numeric.\n\nWe can map as following:\n+ 'Male':1\n+ 'Female':0\n\nWe can either do this by applying map function on the dataframe, or we can use LabelEncoder from sklearn package.\nHere, I'm going to use LabelEncoder","22faf9c1":"#### Random forest model","abd8fba9":"Following notebook is the partial work on Kaggle. For complete project, please refer to [Github project](https:\/\/github.com\/peeush-the-developer\/projects\/tree\/main\/CaloriesBurnedPrediction)","d926cb39":"### 2. Model with 'Duration', 'Heart_rate', 'Body_Temp' columns","64300eed":"#### Decision tree model"}}