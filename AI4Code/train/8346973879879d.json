{"cell_type":{"93ed026b":"code","72d39fb4":"code","ea10924a":"code","3f4da96b":"code","1696cb6f":"code","c88bdcb5":"code","fd1f9df7":"code","cf06a189":"code","4555f7ad":"code","085ef642":"code","f006d667":"code","72c33a67":"code","33119481":"code","25a47d9f":"code","c7fa1d33":"code","921ea3a4":"code","ced48289":"code","e28798fe":"code","968164d5":"code","1adfe8a0":"code","3910d55b":"code","28ec129c":"code","4badfede":"code","7f96aa33":"code","34aa7a29":"code","8704582f":"markdown","e78ba589":"markdown","7886a48f":"markdown","8997b40c":"markdown","85e06b48":"markdown","3561578f":"markdown"},"source":{"93ed026b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    #for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","72d39fb4":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg","ea10924a":"df = pd.read_csv('..\/input\/glaucoma-detection\/glaucoma.csv')","3f4da96b":"df.shape","1696cb6f":"df.head(10).T","c88bdcb5":"df['Glaucoma'].value_counts()","fd1f9df7":"plt.imshow(mpimg.imread('..\/input\/glaucoma-detection\/Fundus_Train_Val_Data\/Fundus_Scanes_Sorted\/Train\/Glaucoma_Negative\/001.jpg'))","cf06a189":"plt.imshow(mpimg.imread('..\/input\/glaucoma-detection\/Fundus_Train_Val_Data\/Fundus_Scanes_Sorted\/Train\/Glaucoma_Positive\/036.jpg'))","4555f7ad":"import cv2\nimport os\nimport glob\nimport gc\n\ndef lire_images(img_dir, xdim, ydim, nmax=5000) :\n    \"\"\" \n    Lit les images dans les sous r\u00e9pertoires de img_dir\n    nmax images lues dans chaque r\u00e9pertoire au maximum\n    Renvoie :\n    X : liste des images lues, matrices xdim*ydim\n    y : liste des labels num\u00e9riques\n    label : nombre de labels\n    label_names : liste des noms des r\u00e9pertoires lus\n    \"\"\"\n    label = 0\n    label_names = []\n    X = []\n    y=[]\n    for dirname in os.listdir(img_dir):\n        print(dirname)\n        label_names.append(dirname)\n        data_path = os.path.join(img_dir + \"\/\" + dirname,'*g')\n        files = glob.glob(data_path)\n        n=0\n        for f1 in files:\n            if n>nmax : break\n            img = cv2.imread(f1) # Lecture de l'image dans le repertoire\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # Conversion couleur RGB\n            img = cv2.resize(img, (xdim,ydim)) # Redimensionnement de l'image\n            X.append(np.array(img)) # Conversion en tableau et ajout a la liste des images\n            y.append(label) # Ajout de l'etiquette de l'image a la liste des etiquettes\n            n=n+1\n        print(n,' images lues')\n        label = label+1\n    X = np.array(X)\n    y = np.array(y)\n    gc.collect() # R\u00e9cup\u00e9ration de m\u00e9moire\n    return X,y, label, label_names","085ef642":"X,y,Nombre_classes,Classes = lire_images('..\/input\/glaucoma-detection\/Fundus_Train_Val_Data\/Fundus_Scanes_Sorted\/Train', 300, 200)","f006d667":"from tensorflow.keras.utils import to_categorical\ny = to_categorical(y)","72c33a67":"y","33119481":"X.shape","25a47d9f":"X = X \/ 255","c7fa1d33":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)","921ea3a4":"del X,y","ced48289":"from sklearn import model_selection\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import datasets\nfrom tensorflow.keras.models import Sequential, load_model\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras.utils import to_categorical","e28798fe":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(300, 200, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(Nombre_classes, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","968164d5":"model.summary()","1adfe8a0":"train = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=30, verbose=1)","3910d55b":"scores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","28ec129c":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","4badfede":"plot_scores(train)","7f96aa33":"y_cnn = model.predict_classes(X_test)","34aa7a29":"plt.figure(figsize=(30,50))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (y_cnn[j] != y_test[j].argmax(axis=-1)) & (i<50):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        plt.title('%s \/ %s' % (Classes[y_cnn[j]], Classes[y_test[j].argmax(axis=-1)]))\n        i+=1","8704582f":"#### Oeil \u00e9mmetrope","e78ba589":"#### Oeil avec glaucome","7886a48f":"# Mise en forme des donn\u00e9es","8997b40c":"#### Il y a donc environ 80% d'yeux \u00e9mmetropes et 20% d'yeux touch\u00e9s par un glaucome","85e06b48":"# Affichage d'un oeil en bonne sant\u00e9 et d'un oeil malade","3561578f":"# Analyse de quelques donne\u00e9s sur le dataset"}}