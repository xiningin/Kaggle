{"cell_type":{"c5325dd2":"code","61abca1a":"code","5867024d":"code","2442710c":"code","697169dd":"markdown","ec79de54":"markdown"},"source":{"c5325dd2":"pip install torch_cka","61abca1a":"import torchvision.models as models\nresnet18 = models.resnet18(pretrained=True)\nresnet34 = models.resnet34(pretrained=True)","5867024d":"from torch.utils.data import Dataset, DataLoader","2442710c":"from torch_cka import CKA\nmodel1 = resnet18  # Or any neural network of your choice\nmodel2 = resnet34\n\ndataloader = DataLoader(Dataset, \n                        batch_size=500, # according to your device memory\n                        shuffle=False)  # Don't forget to seed your dataloader\n\ncka = CKA(model1, model2,\n          model1_name=\"ResNet18\",   # good idea to provide names to avoid confusion\n          model2_name=\"ResNet34\",   \n          model1_layers='layer_names_resnet18', # List of layers to extract features from\n          model2_layers='layer_names_resnet34', # extracts all layer features by default\n          device='cuda')\n\ncka.compare(dataloader) # secondary dataloader is optional\n\nresults = cka.export()  # returns a dict that contains model names, layer names\n                        # and the CKA matrix","697169dd":"A tiny package to compare two neural networks in PyTorch. There are many ways to compare two neural networks, but one robust and scalable way is using the Centered Kernel Alignment (CKA) metric, where the features of the networks are compared.","ec79de54":"# **PyTorch Model Compare**"}}