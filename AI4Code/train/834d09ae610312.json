{"cell_type":{"7723bde3":"code","7dc01a12":"code","673d5881":"code","f53ba4a4":"code","51b4ea5a":"code","e2085c12":"markdown","c1c5d687":"markdown","43a5d945":"markdown"},"source":{"7723bde3":"import numpy as np\nimport pandas as pd","7dc01a12":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\n#train_data.head()","673d5881":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n#test_data.head()","f53ba4a4":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\n\n# On split, training et validation\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)\n\nfor depth in range(1,10):\n  model = RandomForestClassifier(n_estimators=100, max_depth=depth, random_state=1)\n  model.fit(train_X, train_y)\n\n  # get predicted value on validation data\n  val_predictions = model.predict(val_X)\n  perf = accuracy_score(val_y, val_predictions)\n  print(depth, \" ->\" , perf)\n\n\n\n","51b4ea5a":"\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n","e2085c12":"# Looking for the best depth by spliting the training set\n\nWe split the training data in two. One for the training and the other for the validation. The aim is to be able to judge the value of the depth","c1c5d687":"# Spliting on two for training and validation the data to estimate the depth hyperparameter of the RandomForestClassifier\nVery basic, just to test and submit.\n\n## First import the data","43a5d945":"5 is the best depth. We generate our prediction on the test set."}}