{"cell_type":{"f350899b":"code","a3a65f63":"code","3a608dda":"code","74973ef7":"code","8ec0f3ca":"code","f65f60c6":"code","50611c4f":"code","26d8a4e9":"code","80408b6d":"code","dca29bc1":"code","89977160":"code","c898b8b6":"code","7d7ee62c":"code","04dcb883":"code","2f43f6b0":"code","b43bd07e":"code","a0687190":"code","96ed2c0a":"code","28dd31c4":"code","af2a9d37":"code","041be848":"code","870a2273":"code","4e4525a1":"code","5b58de4f":"code","3f36530f":"code","6601019d":"code","81ac06fd":"code","2e1b45fc":"code","cfccbbd9":"code","5e91b5bc":"code","5fabc7de":"code","8ffc0470":"code","2f244df6":"code","d0924415":"code","623fdd52":"code","cbca46c0":"code","3607ca61":"code","574021cd":"code","1e96228e":"code","949055ab":"markdown","82f4bdae":"markdown","1eb0f2a2":"markdown","28c85cc7":"markdown","f9356be6":"markdown","924e2ab5":"markdown","81557e6d":"markdown","a0b88109":"markdown","30ad8fa8":"markdown","c0f97476":"markdown","563bb6a4":"markdown","320c8b3c":"markdown","ed1b44a6":"markdown","bd1d75bd":"markdown","4fe8c2b6":"markdown","8e0309e8":"markdown","922a9293":"markdown","4571e208":"markdown","65d09577":"markdown"},"source":{"f350899b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a3a65f63":"import pandas as pd\nimport numpy as np\n\nimport pandas_profiling as pp\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly as ply","3a608dda":"dat = pd.read_csv('..\/input\/ecommerce-data\/data.csv')","74973ef7":"print(dat.info(),'\\n')\nprint(dat.describe(),'\\n')\nprint(dat.sample(5),'\\n')","8ec0f3ca":"colstats = {}\nfor col in dat.columns:\n#     print(\"{} has  {}  null entries ({:.1f}%) and  {}  unique entries ({:.1f}%)\".format(col,\n#                 dat[col].isnull().sum(),dat[col].isnull().sum()*100\/dat.shape[0],\n#                 len(dat[col].unique()),len(dat[col].unique())*100\/dat.shape[0]))\n    colstats[col] = [dat[col].isnull().sum(),dat[col].isnull().sum()*100\/dat.shape[0],\n                len(dat[col].unique()),len(dat[col].unique())*100\/dat.shape[0]] \n    \nstats_col = pd.DataFrame(colstats.values(), index = colstats.keys(),  columns = ['#Null','%Null','#Unique','%Unique'])\npd.set_option('precision',2)\npd.set_option('display.float_format', lambda x: '%.1f' % x)\nprint(stats_col)","f65f60c6":"temp = dat[dat.Description.isnull()].copy()\nprint(temp.info())","50611c4f":"# orders by country\nfig,ax = plt.subplots(1,1,figsize=(20,5))\nstats_country = dat.groupby(['Country']).Quantity.agg([np.sum])\nstats_country.sort_values(by='sum',ascending=False).plot(kind='bar',ax=ax).set_title('Count of orders by country')\nplt.yscale(\"log\")\nplt.grid()\n\nstats_country.sort_values(by='sum',ascending=False).head()","26d8a4e9":"fig,ax = plt.subplots(1,1,figsize=(20,5))\ntemp = dat.copy()\ntemp['Value'] = temp['Quantity']*temp['UnitPrice']\nstats_country = temp.groupby(['Country']).Value.agg([np.sum, np.mean])\nstats_country.sort_values(by='sum',ascending=False).plot(kind='bar',ax=ax).set_title('Value of orders by country')\nplt.yscale(\"log\")\nplt.grid()\n\nstats_country.sort_values(by='mean',ascending=False).head()","80408b6d":"# Just a check to make sure that what the above cell is doing is right ...\n# xx = temp[temp.Country.str.contains('United Kingdom')].copy()\n# print(xx.Quantity.sum(), xx.Value.sum(), xx.Value.mean())","dca29bc1":"stats_cust = dat.groupby(['CustomerID'])\nfor key,value in stats_cust:\n    if len(value.Country.unique()) > 1:\n        print(key, value.Country.unique())","89977160":"stats_stock = dat.groupby(['StockCode'])\ncounter = 0\nfor key, value in stats_stock:\n    if counter < 2:\n        print(key)\n        print(value.Description)\n        counter += 1","c898b8b6":"temp = dat.groupby(['InvoiceNo'])\nfor key,value in temp:\n    if len(value.InvoiceDate.unique()) > 1:\n        print(key, value.InvoiceDate.unique())","7d7ee62c":"df = dat.copy()","04dcb883":"# Imput on Description based on StockCode - although I don't intend to use Description in any analysis\n# xx = lambda x : x.mode().iloc[0]\n# xxx = df.groupby(['StockCode']).apply(xx)\ntemp1 = df.groupby('StockCode').Description.agg(pd.Series.mode).to_frame()\ndf[\"Description\"].fillna(lambda x: temp1.loc[x][\"Description\"],inplace=True)","2f43f6b0":"# temp = df.sample(5)\n# print(temp.Description)\n# print(dat.loc[temp.index][\"Description\"])","b43bd07e":"df.info()","a0687190":"lofInvoiceNo_NoCustID = list(set(df[df.CustomerID.isnull()].InvoiceNo))\nprint(df.CustomerID.isnull().sum(),len(lofInvoiceNo_NoCustID))\n\nlofInvoiceNo_CustID = list(set(df[df.CustomerID.notnull()].InvoiceNo))\nprint(df.CustomerID.notnull().sum(),len(lofInvoiceNo_CustID))\n\nprint('Common InvoiceNo between rows that have CustomerId and those that do not', \n      list(set(lofInvoiceNo_NoCustID) & set(lofInvoiceNo_CustID)))       ","96ed2c0a":"df.dropna(axis=0, inplace=True)\ndf.drop_duplicates(inplace=True)","28dd31c4":"df.info()","af2a9d37":"locancelledInvoice = df[df.Quantity < 0].InvoiceNo.unique()\nlocompletedInvoice = df[df.Quantity >= 0].InvoiceNo.unique()\n# all cancelled orders have negative quantities ad InvoiceNo contains a C\nif len(set([\"C\" in l for l in locancelledInvoice])) == 1:\n    print(\"all cancelled orders have negative quantities and corresponding InvoiceNo contains a C\")\n    \n    \nif len(set([\"C\" in l for l in locompletedInvoice])) == 1:\n    print(\"all successful orders have positive quantities and InvoiceNo is all digits\")\n    \nn_cancelInvoice = len(locancelledInvoice)\nn_completeInvoice = len(locompletedInvoice)\nprint(\"{} orders were canceled out of {} total orders ({:.1f}%)\".format(n_cancelInvoice,\n                                                                    n_completeInvoice+n_cancelInvoice, \n                                                                    n_cancelInvoice*100\/(n_completeInvoice+n_cancelInvoice)))\n\ndf[\"OrderStatus_\"]= \"Completed\"\ndf.loc[df[df.Quantity < 0].index,\"OrderStatus_\"] = \"Cancellation\"\n","041be848":"# checking to see if unit price per product is invariant over time\ntemp = df.groupby([\"StockCode\"]).UnitPrice.agg(['count','mean','sum'])\ntemp['Mean*Count'] = temp['mean']*temp['count']\ntemp.plot(kind='scatter',x='Mean*Count',y='sum')\nplt.yscale('log')\nplt.xscale('log')\nplt.grid()","870a2273":"df['Value_'] = df['Quantity']*df['UnitPrice']\ndf.groupby([\"StockCode\"])['Value_'].agg([np.sum]).tail(8).index\n# Mark rows that have transactions \"'BANK CHARGES', 'C2', 'CRUK', 'D', 'DOT', 'M', 'PADS', 'POST'\" as \"Exclude\"\ndf[\"Exclude_\"] = \"False\"\ndf.loc[df[df.StockCode.isin(df.groupby([\"StockCode\"])['Value_'].agg([np.sum]).tail(8).index)].index,\"Exclude_\"] = \"True\"","4e4525a1":"# Convert returned negative quantity to postivie for analysis\ndf['PQuantity_'] = df['Quantity']\ndf.loc[df[df.Quantity < 0].index, 'PQuantity_'] = df.Quantity*-1","5b58de4f":"df['Invoicedate_'] = pd.to_datetime(df['InvoiceDate'])","3f36530f":"df['OrderInvoiceNo_'] = ''\n# df['CancelledAfterDays_'] = ''\ntemp = df[df['OrderStatus_'].str.contains(\"Cancellation\")].copy()\nttemp = df[~df['OrderStatus_'].str.contains(\"Cancellation\")].copy()\n\nimport time\nst = time.time()\ncount = 0\nfor idx,row in temp.sort_values(by='PQuantity_',ascending=False).iterrows():  \n    bl1 = (ttemp.CustomerID == row.CustomerID) & (ttemp.StockCode == row.StockCode) \n    bl2 = (ttemp.PQuantity_ >= row.PQuantity_) & (ttemp.Invoicedate_ < row.Invoicedate_)\n    stemp = ttemp[bl1 & bl2].copy()\n    if stemp.shape[0] == 1:\n        if stemp.iloc[0]['PQuantity_'] == row.PQuantity_:\n            temp.loc[idx,'OrderInvoiceNo_'] = stemp.iloc[0].InvoiceNo\n        else:\n            temp.loc[idx,'OrderInvoiceNo_'] = stemp.iloc[0].InvoiceNo\n            temp.loc[idx, 'OrderStatus_'] = 'PartialReturn'\n    else:            \n        temp.loc[idx, 'OrderStatus_'] = 'NoCorrOrder'  \n    count += 1\n    if count%500 == 0:\n        print('Completed ... {:.0f}%'.format(count\/temp.shape[0]*100))\nen = time.time()\nprint(\"Elapsed time (s) = \",en-st)\n# takes about 10 min","6601019d":"df.loc[temp.index] = temp","81ac06fd":"df.info()","2e1b45fc":"df['Month_'] = pd.DatetimeIndex(df.Invoicedate_).month\ndf['Year_']= pd.DatetimeIndex(df.Invoicedate_).year\ndf['Day_']= pd.DatetimeIndex(df.Invoicedate_).day\ndf['Time_']=pd.DatetimeIndex(df.Invoicedate_).hour\ndf.sample(5)","cfccbbd9":"import warnings\nwarnings.filterwarnings('ignore')","5e91b5bc":"from mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules","5fabc7de":"def build_association_rules(country):\n    # reformatting data in df to match apriori's needs\n    # starting small, say with USA\n    basket = df[(df.Country == country) & (df.OrderStatus_ == \"Completed\") & (df.Exclude_ == 'False')].groupby(['InvoiceNo','Description']).Quantity.agg('sum').unstack().reset_index().fillna(0).set_index('InvoiceNo')\n#     print(basket.shape)\n    \n#     print(basket.head(3))\n    pd.set_option('precision',3)\n    mask = (basket > 0)\n    basket[mask] = True\n    mask = (basket <= 0)\n    basket[mask] = False\n#     print(basket.head(3))\n    \n    # frequent itemsets\n    # ncol = 1541 # nujmber of items to consider given memory constraints\n    # fitemsets = apriori(basket.iloc[:,:ncol], min_support=0.07, use_colnames=True)\n    fitemsets = apriori(basket, min_support=0.05, use_colnames=True)\n#     print(fitemsets.head())\n    \n    arm = association_rules(fitemsets, metric='lift')\n    arm.antecedents = arm.antecedents.apply(lambda x: ','.join(list(x)))\n    arm.consequents = arm.consequents.apply(lambda x: ','.join(list(x)))\n#     print(arm.head(10))\n    \n    return basket, fitemsets, arm","8ffc0470":"def plot_association_rules(arm):\n    fig,ax = plt.subplots(1,1,figsize=(10,10))\n    sns.scatterplot(arm.support, arm.confidence,hue=arm.lift, size=arm.lift, ax=ax)\n    \n    fig1,ax1=plt.subplots(1,1,figsize=(10,10))\n    arm_heat = arm.pivot(index='antecedents', columns='consequents', values='confidence')\n    sns.heatmap(arm_heat,ax=ax1,cmap='Spectral')","2f244df6":"basket, fitemsets, arm = build_association_rules('France')\narm[(arm.confidence > 0.1) & (arm.lift > 1)]","d0924415":"plot_association_rules(arm)","623fdd52":"import networkx as nx","cbca46c0":"def build_plot_graph(garm):\n    G = nx.Graph()\n    G.add_nodes_from(garm.antecedents)\n    for index, row in garm.iterrows():\n        G.add_edge(row.antecedents, row.consequents)\n        G[row.antecedents][row.consequents]['support'] = row.support\n        G[row.antecedents][row.consequents]['lift'] = row.lift\n        G[row.antecedents][row.consequents]['confidence'] = row.confidence\n        \n    fig,ax = plt.subplots(1,1,figsize=(15,15))\n    edges = G.edges()\n    widths = [G[u][v]['confidence']*10 for u,v in edges]\n    nx.draw(G, pos=nx.spring_layout(G, seed=0), width=widths, with_labels=True)\n    # nx.draw_networkx_edge_labels(G,pos=nx.spring_layout(G),edge_labels=nx.get_edge_attributes(G,'confidence'))","3607ca61":"fig,ax = plt.subplots(1,1,figsize=(20,5))\ndat.groupby(['Country']).Quantity.agg([np.sum]).sort_values(by='sum',ascending=False).plot(kind='bar',ax=ax).set_title('Count of orders by country')\nplt.yscale(\"log\")\nplt.grid()","574021cd":"bask, fi, ar = build_association_rules(\"Spain\")\nbuild_plot_graph(ar[(ar.confidence > 0.4) & (ar.lift > 5)])","1e96228e":"plot_association_rules(ar)","949055ab":"Based on the analysis above, invoice number is uniquely related to the invoice date (within a sec or so).","82f4bdae":"**Customer ID to country**","1eb0f2a2":"# Graphs","28c85cc7":"# Market Basket Analysis","f9356be6":"Based on the table above, 25% of the data are missing CustomerID. All rows with missing Description have missing CustomerID as well.","924e2ab5":"# A foreword\n\nTypically e-commerce datasets are proprietary and consequently hard to find among publicly available data. However, The [UCI Machine Learning Repository](http:\/\/archive.ics.uci.edu\/ml\/index.php) has made this dataset containing actual transactions from 2010 and 2011. The dataset is maintained on their site, where it can be found by the title \"Online Retail\".\n\n**Content**\n\"This is a transnational data set which contains all the transactions occurring between 01\/12\/2010 and 09\/12\/2011 for a UK-based and registered non-store online retail.The company mainly sells unique all-occasion gifts. Many customers of the company are wholesalers.\"\n\n**Acknowledgements**\nPer the UCI Machine Learning Repository, this data was made available by Dr Daqing Chen, Director: Public Analytics group. chend '@' lsbu.ac.uk, School of Engineering, London South Bank University, London SE1 0AA, UK.\n\n![UK_MBA.png](attachment:1e4d4566-9f53-491a-937a-63f624100643.png)","81557e6d":"**Undirected graph**","a0b88109":"**Invoice number to date\/time**","30ad8fa8":"**Stock code to description**","c0f97476":"# EDA - Exploratory Data Analysis","563bb6a4":"**Orders by country**","320c8b3c":"**Market Basket Analysis (MBA) with Association Rule Mining (ARM)**\n\nFor fear of repeating hordes of information on this subject that can be googled for, I direct readers to start with [the wiki page](https:\/\/en.wikipedia.org\/wiki\/Association_rule_learning).\n\nSome of the definitions include:\n\n* Items refer to attributes\n* Transactions form the database\n* Each transaction has a unique ID and contains a subset of the set of items\n* Rules are composed of two sets; the antecedent or LHS and the consequent, or the RHS\n\nThe following are useful concepts to know:\n\nIf X and Y are itemsets, X => Y is an association rule.\n\n* Support (X) = Number of transactions that contain X \/ Total number of transactions. Indicates how frequently an itemset appears in the database\n* Confidence (X => Y) = Support (X and Y) \/ Support (X). Indicates how often this rule has been found in the database\n* Lift (X => Y) = Support (X and Y) \/ Support (X) \/ Support (Y). Lift curve is similar to the ROC curve","ed1b44a6":"**Preprocessing - imputing, removing nulls and duplicates**","bd1d75bd":"# Analysis of the prepared data","4fe8c2b6":"Since there is no obvious way to imput missing CustomerID from the data, best option available seems to be to drop these rows.","8e0309e8":"**Measure non-null and unique entries per column**","922a9293":"The above analysis suggests that stockcode is uniquely mapped to the Description. If one were to use Description in the analysis and modeling, we can use StockCode to imput missing values. Alternately, in this case, I plan to drop Description in favor of using StockCode in any subsequent modeling I intend to do.","4571e208":"The list of customers above seems to have placed orders from multiple countries. For others, there is a 1-to-1 mapping between customer and country.","65d09577":"**Read in the data**"}}