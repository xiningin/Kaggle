{"cell_type":{"00e74a66":"code","fb807ece":"code","94e25224":"code","b7aac55a":"code","d9b2a915":"code","4b5ceafa":"code","d46f1d56":"code","7598a6eb":"code","870b20ed":"code","f5f552a9":"code","4c61c9d1":"code","96ccc6ec":"code","cfb9d530":"code","070c9cab":"code","1a02a1b2":"code","b765589b":"code","922fb40f":"code","ac95d3db":"code","90397314":"code","3507f823":"code","13abd617":"code","e2be8a07":"code","c242b088":"code","f3412447":"code","9c731331":"code","688cb242":"code","66c5cfb8":"code","de25b444":"code","e981f8a4":"code","f8c754de":"code","06d5f560":"code","46aa6dda":"code","72bd724e":"code","bc2b3bfe":"code","53258ee0":"code","ae0e26d4":"code","fa17097b":"code","812606cf":"code","85c39cca":"code","ad08c5ca":"code","cd5f4ad1":"code","b1125e94":"code","3f0e0a9c":"code","7b6cc132":"code","aa9668a2":"code","f9801d2e":"code","9cc638eb":"code","45eafd65":"code","1e567a70":"code","48056415":"code","4df8a814":"code","842b44c2":"code","5fdfcf8f":"code","70d7f871":"code","ac435803":"code","8ee182ec":"code","32e90cf0":"code","36f19435":"code","70426b87":"code","24954fc0":"code","ccc0009c":"code","2c7f23d0":"code","5ce33715":"code","280f298f":"markdown","2afe9c66":"markdown","8a835d18":"markdown","759a1028":"markdown","884ae61e":"markdown","9c7af46b":"markdown","ac93575f":"markdown","e98cf89d":"markdown","dfa480f2":"markdown","36b3d8b6":"markdown","85018f10":"markdown","8fbebd83":"markdown","2fadad9d":"markdown","97e7cef5":"markdown","e747d560":"markdown","a5ad313d":"markdown","981b414b":"markdown","ad9c18d8":"markdown","414021dc":"markdown","1bcc949c":"markdown"},"source":{"00e74a66":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #for visualization\n%matplotlib inline\nimport seaborn as sns #for visualization\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n# We dont use plt.show() if we use \"% matplotlib inline\"\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","fb807ece":"store = pd.read_csv(\"..\/input\/googleplaystore.csv\",usecols = [0,1,2,3,4,5,6,7,8,9,10]) \n\n#I dont wanna use \"Current Ver\" and \"Android Ver\" so \u0131 use \"usecols\" ","94e25224":"store.info()","b7aac55a":"store.head() #quick look at the csv from first index","d9b2a915":"store.tail() #quick look at the csv from last index","4b5ceafa":"store.sample(6) #random ","d46f1d56":"store.columns","7598a6eb":"store.columns = store.columns.str.replace(\" \",\"_\") #adding \"_\" to columns which has space.","870b20ed":"store.dtypes","f5f552a9":"store.Size = store.Size.replace(\"Varies with device\",np.nan)\nstore.Size = store.Size.str.replace(\"M\",\"000\")\nstore.Size = store.Size.str.replace(\"k\",\"\")\n#store.Size = store.Size.apply(lambda x: float(x.replace(\"k\",\"\"))\/1000 if \"k\" in x else x)\n#\u0131 wanted use this but \u0131 get error so \u0131 added \"000\" to Megabyte\n\nstore.Size = store.Size.replace(\"1,000+\",1000)\n\nstore.Installs = store.Installs.str.replace(\",\",\"\")\nstore.Installs = store.Installs.apply(lambda x: x.strip(\"+\"))\nstore.Installs = store.Installs.replace(\"Free\",np.nan)\n\nstore.Price = store.Price.str.replace(\"$\",\"\")\n\nstore = store.drop(store.index[10472])\n\nstore[[\"Size\",\"Installs\",\"Reviews\",\"Price\"]] = store[[\"Size\",\"Installs\",\"Reviews\",\"Price\"]].astype(\"float\")","4c61c9d1":"store.Category = store.Category.astype(\"category\")","96ccc6ec":"store.Installs = pd.to_numeric(store.Installs)\nstore.Price = pd.to_numeric(store.Price)\nstore = store.drop_duplicates(subset = \"App\", keep = \"first\")","cfb9d530":"store.dtypes","070c9cab":"store.corr()","1a02a1b2":"f,ax = plt.subplots(figsize = (10,10))\nsns.heatmap(store.corr(), annot = True, linewidths = .5, fmt = \".2f\", ax=ax)","b765589b":"#I wanna seperate free and paid apps so I can analysis objectively\nfree = store[store.Type == \"Free\"]\npaid = store[store.Type == \"Paid\"]","922fb40f":"store.head()","ac95d3db":"#We can see clearly reviews decreasing as the price increases.\npaid.plot(kind = \"line\",x = \"Price\", y = \"Reviews\", color = \"r\", linestyle = \":\", alpha = .5, \n          grid = True, linewidth = 1, figsize = (12,6))\nplt.xlabel(\"Price\")\nplt.ylabel(\"Reviews\")\nplt.title(\"Paid App-Reviews\")\n","90397314":"# We can comprasion free and paid app reviews\nfree.Reviews.plot(kind = \"line\", color = \"g\", linestyle = \":\", alpha = .7, \n          grid = True, linewidth = 1, figsize = (12,6), label = \"Free\")\npaid.Reviews.plot(kind = \"line\", color = \"r\", linestyle = \"-.\", alpha = 1, \n          grid = True, linewidth = 1, figsize = (12,6), label = \"Paid\")\nplt.legend()\nplt.xlabel(\"\u0130ndex\")\nplt.ylabel(\"Reviews\")\nplt.title(\"Free-Paid\")\n","3507f823":"#We can see this plot nearly almost cheap applications has  high rating.\npaid.plot(kind = \"scatter\", x = \"Rating\", y = \"Price\", alpha = .5, color = \"b\")\nplt.xlabel(\"Rating\")\nplt.ylabel(\"Price\")\n","13abd617":"store.Rating.plot(kind = \"hist\", bins = 50, figsize = (12,6))\nplt.xlabel(\"Rating\")\nplt.title(\"Rating of Distribution\")\n","e2be8a07":"store.Category.value_counts().plot(kind='barh',figsize= (12,8))\n","c242b088":"store.Content_Rating.value_counts().plot(kind=\"bar\")\nplt.yscale(\"log\")","f3412447":"def expensive(count=5):\n    exp = store.sort_values(by=[\"Price\"],ascending = False).head(count)\n    return exp\nexpensive(10)","9c731331":"#expensive applications\nexp = paid[\"Price\"]>100\npaid[exp]","688cb242":"x = paid[(paid.Price>100) & (paid.Rating>4)]\nx","66c5cfb8":"for index,value in paid[[\"App\"]].head().iterrows():  #iterrows gives us index and value. \u0130t is like \"enumerate\" in list\n    print(index,\":\",value)","de25b444":"paid_head = paid.head()\npaid_head","e981f8a4":"melted = pd.melt(frame = paid_head, id_vars = \"App\",value_vars = [\"Installs\",\"Price\"])\nmelted","f8c754de":"melted.pivot(index = \"App\", columns = \"variable\", values = \"value\")","06d5f560":"#Adding from row axis = 0\nf1 = free.head()\nf2 = free.tail()\nconc = pd.concat([f1,f2],axis = 0, ignore_index = True)\nconc","46aa6dda":"#Adding from column axis = 1\napp = store.App.head()\nrate = store.Rating.head()\nconc = pd.concat([app,rate], axis = 1)\nconc","72bd724e":"store.isnull().sum() #detect missing values","bc2b3bfe":"store.Size.value_counts(dropna=False) #1227 NaN value","53258ee0":"store1 = store.copy()\nstore1.Size.dropna(inplace = True) #dropped nan values","ae0e26d4":"assert store1.Size.notnull().all() #checking with assert . return nothing because we drop nan values","fa17097b":"store1.Size.fillna(0,inplace = True) #filling nan values with \"0\"","812606cf":"paid1 = paid.copy()\npaid1[\"total_money\"] = paid1.Installs*paid1.Price\npaid1.head()","85c39cca":"paid.head(75).describe()","ad08c5ca":"paid.head(75).boxplot(column = \"Price\", by = \"Rating\", figsize = (20,6))","cd5f4ad1":"store.plot(kind = \"hist\", y = \"Rating\", bins = 50,range = (0,5), normed = True, figsize = (12,6))","b1125e94":"fig,axes = plt.subplots(nrows = 2, ncols = 1)\nstore.plot(kind = \"hist\", y = \"Rating\", bins =50, range = (0,5), normed = True, ax = axes[0])\nstore.plot(kind = \"hist\", y = \"Rating\", bins =50, range = (0,5), normed = True, ax = axes[1], cumulative = True)\nplt.savefig(\"graph.png\")","3f0e0a9c":"store1 = store.copy()\nstore1[\"Last_Updated\"] = pd.to_datetime(store1.Last_Updated)\nstore1.head()","7b6cc132":"store1 = store1.set_index(\"Last_Updated\")\nstore1.head()","aa9668a2":"#we can select according to our date index\nstore1.loc[\"2018-01-01\":\"2018-01-02\"] #this show us which app updated in 2days","f9801d2e":"store1.resample(\"A\").mean() #this is getting an average to store for year(A) or month(M)","9cc638eb":"store1.resample(\"M\").mean()\n# As you can see there are a lot of nan because store1 does not include all months","45eafd65":"store1.resample(\"M\").first().interpolate(\"linear\")","1e567a70":"store1.resample(\"M\").first().interpolate(\"linear\")","48056415":"store1.resample(\"M\").mean().interpolate(\"linear\")","4df8a814":"store2 = store.copy()\nstore2.head()","842b44c2":"store2 = store2.set_index([\"Category\",\"Type\"])","5fdfcf8f":"#store2.sample(50)","70d7f871":"paid.pivot(index = \"App\", columns = \"Content_Rating\", values = \"Price\")","ac435803":"store.head()","8ee182ec":"store.info()","32e90cf0":"store.index = range(1,9660 ,1) #our index is starting with \"0\" I wanna chage with \"1\"\nstore.head()","36f19435":"store1 = store.copy()","70426b87":"store1 = store1.set_index([\"Category\",\"Type\"])\nstore1.head(50)","24954fc0":"store2 = store.copy()","ccc0009c":"store2.groupby(\"Type\").mean()","2c7f23d0":"store2.groupby(\"Type\").Price.max()","5ce33715":"store2.groupby(\"Type\")[[\"Installs\",\"Rating\"]].max()","280f298f":"### Filtering Data","2afe9c66":" ### Concatenating Data","8a835d18":"### V\u0131sual Exploratory Data Analysis","759a1028":"### Missing Data And Checking With Assert","884ae61e":"### Hierarchical \u0130ndexing","9c7af46b":"### Indexing Pandas Time Series","ac93575f":"### Groupby","e98cf89d":" ### Line Plot\n*     \u0130t is better when x axis is time.","dfa480f2":"### Adding new column","36b3d8b6":"#### Histogram","85018f10":"### Melt & Pivot","8fbebd83":"## 1. [Matplotlib](#plt)","2fadad9d":"## <a id=plt>1. Matplotlib<\/a>","97e7cef5":"### Histogram Plot\n* \u0130t is better when we need see distribution of numerical data.    \n","e747d560":"### Setting \u0130ndexing","a5ad313d":"### Change \u0130ndex","981b414b":"### Pivoting","ad9c18d8":"### User Defined Function","414021dc":"### Scatter Plot\n* \u0130t is better when there is correlation between two variables.","1bcc949c":"### We have to change columns'  types but when I try change I get alot error so I tidy column step by step.\nCheck this : https:\/\/www.kaggle.com\/sabasiddiqi\/google-play-store-apps-data-cleaning\n"}}