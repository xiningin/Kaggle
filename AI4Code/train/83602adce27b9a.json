{"cell_type":{"c7c2b15c":"code","8b8d5dc7":"code","3844599a":"code","88f5e180":"code","aaf6bd9c":"code","28bba16d":"code","7c43bc3f":"code","3f734e1c":"code","fe47983f":"code","8faf001c":"code","a103066b":"code","15ce0cea":"code","23b08ba7":"code","8a64524e":"code","5ec6bd9c":"code","686bf0d3":"code","0d7e4737":"markdown","72d9ac38":"markdown","37a18a09":"markdown","fa445701":"markdown","d9180999":"markdown","8e9a9dfd":"markdown","225ba848":"markdown","60cf847f":"markdown"},"source":{"c7c2b15c":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nimport numpy as np","8b8d5dc7":"# Read in the two data frames for use in the notebook\nsteam_df = pd.read_csv('..\/input\/steam-player-data\/Valve_Player_Data.csv')\ntwitch_df = pd.read_csv('..\/input\/evolution-of-top-games-on-twitch\/Twitch_game_data.csv')","3844599a":"# Create copies of the dataframes for use after the Pie chart\nsteam_df_2 = steam_df.copy()\ntwitch_df_2 = twitch_df.copy()\n\n# Convert dthe 'Month_Year' object to datetime\nsteam_df['Month_Year'] = pd.to_datetime(steam_df['Month_Year'])\nsteam_df['Avg_players'] = steam_df['Avg_players'].astype('int')\n\n# Copy the data from steam_df based off of 'September 2021'\nsep21_top_steam = steam_df[steam_df['Month_Year'] == 'September 2021'].copy() \n# Select columns to drop and set the change \ncolumns_to_drop = ['Month_Year', 'Gain', 'Percent_Gain', 'URL', 'Peak_Players', 'Date']\nsep21_top_steam.drop(columns_to_drop, axis='columns', inplace=True)\n\n# Function to normalize the output on the graph\ndef as_100k(value):\n    return value\/1\n\n# Group game and avg players, get the sum, sort the values (ascending), and show top 10\ntop_2021_final = sep21_top_steam[['Game_Name', 'Avg_players']].groupby('Game_Name') \\\n            .sum() \\\n            .sort_values('Avg_players', ascending=False) \\\n            .head(10) \\\n            .apply(as_100k)","88f5e180":"# Plot grouped data in a bar chart to show the most active game in September 2021\n# rcParams is utilized to increase the graph size\nrcParams['figure.figsize'] = 9,7\ntop_2021_final.plot(kind='barh')\nplt.grid(True, color='k', linestyle=':')\nplt.xlabel('Average Players')\nplt.ylabel('Game Name')\nplt.title('Most active games in September 2021');","aaf6bd9c":"# Make a copy of the steam_df, drop selected columns, and set the change to the df\ngrowth = steam_df.copy()\ntop_twitch = twitch_df.copy()\ncolumns_to_drop = ['Peak_Players', 'Gain', 'Percent_Gain', 'URL', 'Date']\ngrowth.drop(columns_to_drop, axis='columns', inplace=True)\n\n# Set appropriate date columns to_datetime, combine the top_twitch 'Month', 'Year' into 'Date'\ngrowth['Month_Year'] = pd.to_datetime(growth['Month_Year'])\ntop_twitch['Date'] = pd.to_datetime(top_twitch[['Month', 'Year']].assign(DAY=1))","28bba16d":"# Create 5 subsets based off the growth df\ncs_go = growth[growth['Game_Name'] == 'Counter Strike: Global Offensive']\ndota = growth[growth['Game_Name'] == 'Dota 2']\npubg = growth[growth['Game_Name'] == 'PUBG: Battlegrounds']\napex = growth[growth['Game_Name'] == 'Apex Legends']\ntf2 = growth[growth['Game_Name'] == 'Team Fortress 2']\n# Set the subset to the last year of data using .head(12) \ncs_go = cs_go.head(12)\ndota = dota.head(12)\npubg = pubg.head(12)\napex = apex.head(12)\ntf2 = tf2.head(12)","7c43bc3f":"# rcParams to make the graph larger, along with plotting each subset using plt.plot\nrcParams['figure.figsize'] = 12,10\nplt.plot(tf2['Month_Year'], tf2['Avg_players'])\nplt.plot(apex['Month_Year'], apex['Avg_players'])\nplt.plot(pubg['Month_Year'], pubg['Avg_players'])\nplt.plot(dota['Month_Year'], dota['Avg_players'])\nplt.plot(cs_go['Month_Year'], cs_go['Avg_players'])\nplt.grid(True, color='k', linestyle=':')\nplt.title(\"Average players over the past 12 months\")\nplt.xlabel('Year - Month')\nplt.ylabel('Average players')\nplt.legend(['TF2', 'Apex', 'PUBG', 'DOTA', 'CS:GO']);","3f734e1c":"# Select which columns to drop in order to utilize a pie chart\ndrop_twitch_columns = ['Rank', 'Hours_watched', 'Hours_Streamed', 'Peak_viewers', 'Month', \\\n                      'Year', 'Peak_channels', 'Streamers', 'Avg_channels', 'Avg_viewer_ratio']\ntop_twitch.drop(drop_twitch_columns, axis='columns', inplace=True)","fe47983f":"# Select only the month of September, 2021\ntop_twitch = top_twitch.loc[(top_twitch['Date'] == '2021-09-01')]\n# Grab the top 10 results, split game and viewers so the data can be utilized in a pie chart\ngame_test = top_twitch['Game'].head(10).copy()\nviewer_test = top_twitch['Avg_viewers'].head(10).copy()","8faf001c":"# Function to dispaly the number of viewers within the pie chart\ndef absolute_value(val):\n    a = np.round(val\/100.*sizes.sum(), 0)\n    return int(a)\n# Plot average viewers in a pie chart\nrcParams['figure.figsize'] = 12,10\nlabels = game_test\nsizes = viewer_test\nplt.pie(sizes, startangle=90, autopct=absolute_value,)\nplt.legend(labels, loc=\"best\")\nplt.tight_layout()\nplt.show()","a103066b":"# Rename columns for data continuity to twitch_df_2\nsteam_df_2.rename(columns={'Date': 'DropDate','Month_Year': 'Date', \\\n                         'Game_Name':'Game'}, inplace=True)\n\n# List that highlights to columns to drop\ndrop_steam_columns = ['DropDate', 'Gain', 'Peak_Players', 'Percent_Gain', 'URL']\ndrop_twitch_columns = ['Hours_watched', 'Hours_Streamed', 'Peak_viewers', \\\n                      'Peak_channels', 'Streamers', 'Avg_channels', 'Avg_viewer_ratio', \\\n                      'Rank']\n","15ce0cea":"# drop columns already selected in the previous cell \nsteam_df_2.drop(drop_steam_columns, axis='columns', inplace=True)\ntwitch_df_2.drop(drop_twitch_columns, axis='columns', inplace=True)","23b08ba7":"# Convert data types (to_datetime, and int)\nsteam_df_2['Date'] = pd.to_datetime(steam_df_2['Date'])\nsteam_df_2['Avg_players'] = steam_df_2['Avg_players'].astype('int')\ntwitch_df_2['Date'] = pd.to_datetime(twitch_df_2[['Month', 'Year']].assign(DAY=1))","8a64524e":"# Drop the final 'Month', 'Year', and replace counterstrike so it matches with twitch_df_2\ntwitch_df_2.drop(['Month', 'Year'], axis='columns', inplace=True)\nsteam_df_2.replace({'Counter Strike: Global Offensive': 'Counter-Strike: Global Offensive'}, regex=True, inplace=True)\n\n# Create a date filter for both twitch_df_2 and steam_df_2 for use in plotting\nstart_date = '2021-09-01'\nend_date = '2021-09-01'\nafter_start_date = twitch_df_2['Date'] >= start_date\nbefore_end_date = twitch_df_2['Date'] <= end_date\nbetween_two_dates = after_start_date & before_end_date\n\ntwitch_date_filter = twitch_df_2.loc[between_two_dates]\n\nstart_date = '2021-09-01'\nend_date = '2021-09-01'\nafter_start_date = steam_df_2['Date'] >= start_date\nbefore_end_date = steam_df_2['Date'] <= end_date\nbetween_two_dates = after_start_date & before_end_date\n\nsteam_date_filter = steam_df_2.loc[between_two_dates]","5ec6bd9c":"# Group by to highlight the highest amount of average viewers over the past year\ntop_twitch_games = twitch_date_filter[['Game', 'Avg_viewers']].groupby('Game') \\\n            .sum() \\\n            .sort_values('Avg_viewers', ascending=False) \\\n            .head(10)\n\n# Groupby to highlight the highest amount of average players over the past year\ntop_steam_games = steam_date_filter[['Game', 'Avg_players']].groupby('Game') \\\n            .sum() \\\n            .sort_values('Avg_players', ascending=False) \\\n            .head(10)","686bf0d3":"# Plot top Steam games\nrcParams['figure.figsize'] = 9,7\ntop_steam_games.plot(kind='barh')\nplt.grid(True, color='k', linestyle=':')\nplt.xlabel('Average Players')\nplt.ylabel('Game Name')\nplt.title('Most active games per Average Steam players for September 2021');\n\n# Plot top twitch games\nrcParams['figure.figsize'] = 9,7\ntop_twitch_games.plot(kind='barh')\nplt.grid(True, color='k', linestyle=':')\nplt.xlabel('Average viewers')\nplt.ylabel('Game Name')\nplt.title('Most active games per Average Twitch viewers for September 2021');","0d7e4737":"<h1><center><b>Most active games in September 2021<\/b><\/center><\/h1>\n<h4><center>Top 10 games with highest average players in September 2021<\/center><\/h4>","72d9ac38":"<h1><center><b>Deciding which game to play<\/b><\/center><\/h1>\n<img src=\"https:\/\/1000logos.net\/wp-content\/uploads\/2020\/08\/Logo-Steam.jpg\" alt=\"Steam logo\" title=\"Title text\" \/>  \n\n<h2><center>How to waste my time (More efficiently)<\/center><\/h2>\n\n\n**Let me preface this by saying I had GRANDIOSE plans of compiling 13 separate CSV's, using all the analysis, and ultimately be able to predict the winner of the last Formula 1 race...  That didn't happen...**  \nLike any other 30 something year old child I like to spend some of my free time (Or what I perceive as my 'free time') playing video games.  The biggest issue I run into are 'dead games', where the servers are empty and it's ~~like a simulation of my life~~ just a waste of my time...  What I plan to accomplish with this analysis is to determine:  \n\n**1.) What are the most popular games (On steam, per average players) as of last month.**  \n\n**2.) What games have seen the most growth (positive or negative) over the last year.**  \n\n**3.) How do the 'top games' per my findings in steam compare to the highest viewed on Twitch last month (September, 2021)?**  \n\nTo assist in my research I utilize two separate data sets (Steam player data, and Twitch viewing data).  To assist in the visualization _(because numbers are hard)_ I will use three different graphs (Bar, line plot, and pie chart) to help display my findings in a (hopefully) clear and concise manner.\n\n","37a18a09":"\nIn order to achieve this marvelous bar graph that you see before you, my thought process was simple - _Which game had the highest amount of players (on average) last month._ After importing the data I made a copy of it utilizing a simple boolean term: **steam_df[steam_df['Month_Year'] == 'September 2021']** which selected all of the data for that month.  I then cleaned my data, dropped the columns I didn't need, grouped my data  **sep21_top_steam[['Game_Name','Avg_players']].groupby('Game_Name')**, got the sum, sorted the values (based on average players, ascending) and divided everything utilizing a function to ensure the numbers were consistent with my initial analysis of the data.\n  \n  \n  Of the 10,000+ games in the steam library, this saved me a considerable amount of time.  My next question is what games are currently on the up and up?  I'm sure I'd have a blast playing Apex Legends or Cookie Clicker, but I don't want to invest myself in a game that's in its twilight years.  Which brings me to my next step of analysis.  In this next portion I'm going to look at the last 12 months of data to determine what game is potentially worth picking up.  To narrow my search I'll eliminate the bottom 5 _(Cookie clicker might still make it.)_.\n","fa445701":"# **Top games by Average viewers on Twitch in September,2021**","d9180999":"<h1><center><b>Average players over the past 12 months<\/b><\/center><\/h1>","8e9a9dfd":"# **Findings**  \nBased off my data the only two games that would be worthwhile continuing to play (Based off average players and viewing trends) would be Counter Strike and Apex: Legends.  With Apex: Legends appearing to having more longevity due to the constant rise over the previous year, and Counter Strike having radical dips in the summer time.  If these trends continue then Apex: Legends would have a larger playerbase than Counter Strike in two years.  \n\n**In Conclusion:** I will choose to play Apex: Legends due to the consistent rise in average players, along with it's overall popularity on Twitch.  The only variable I didn't account for is whether or not I'll have the time to actually play it...\n","225ba848":"## Not quite there yet\nWell then, there goes my shot of trying to find the **'next best thing'** two visualizations in.  Looking at the data over the last 12 months, CS:GO had the most change in average player base, it fluctuates radically at the beginning of the year, and drops down in the summer (Maybe due to students avoiding their responsibilities, or swapping over to another game in the summer).  Following the same trends CS:GO will take another radical drop in the summer of 2022 (Stay tuned, if so you heard it here first).  The remainder of the data shows that PUBG, DOTA, and TF2 have remained relatively constant over the past 12 months.  The only game showing real promise is Apex: Legends, with a relatively steady climb since it came out.  \n\n  \n  In order to arrive at my conclusion I created the **'growth'** dataframe from a copy of the steam_df, dropped the columns I didn't need **('Peak_Players', 'Gain', 'Percent_Gain', 'URL', 'Date')** and created 5 subsets of the data, and lastly utilizing **.head(12)** in order to pull  up the last 12 months of data.  \n  \n  Moving on from this data set the next best thing I can do is to look at what everyone else is watching.  To do this I will use the twitch viewer data for my tie breaker. ","60cf847f":"## **Not quite there yet..**  \n  \n  Just by looking at my chart the only games that even made the top 10 for twitch last month are **Apex Legends, and Counter-Strike: Global Offensive**.  If only there were a way to combine all this data and load it all into one graph so I can avoid having to scroll up and down.  Also I don't think the Pie Chart is the best way to express this data.  Moving forward I'm going to clean the data further, make sure they have like columns, and plot the graphs stacked to save everyones mouse wheels."}}