{"cell_type":{"fe9c63a5":"code","93c8622e":"code","68b3c69b":"code","a68c94e8":"code","4eff3914":"code","f4121550":"code","84742ac8":"code","d38203b2":"code","5c6f8c28":"code","216627e7":"code","67994622":"code","b1f8220f":"code","592cc34b":"code","7f1e1dcc":"code","a3c62d73":"code","4ca1ebfd":"code","e6f827e5":"code","841c680e":"code","69b55e50":"code","d49a77c9":"code","a1f2f719":"code","f55cde73":"code","fc3b127e":"code","c5ae8b15":"code","df2d4bdb":"code","ab4cffb9":"code","ecfdda64":"code","22bfad2c":"code","2ba78108":"code","43b3cbab":"code","0ce537de":"code","d3b52cb6":"code","5018af5b":"code","7f4f1ab3":"code","d819ce80":"code","c3d96e54":"code","0222e560":"code","8fe9ca77":"code","959e729d":"code","4d39ccaf":"code","34cbd733":"code","4a672974":"code","141436dd":"code","c9614801":"code","0e73436f":"code","eff07c68":"code","4f5bd5f2":"markdown","48233045":"markdown","c57207dc":"markdown","fb06d280":"markdown","96a888c7":"markdown","15e2c28c":"markdown","5b64333e":"markdown","b5250ef5":"markdown","df353b79":"markdown"},"source":{"fe9c63a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","93c8622e":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport warnings\n\nimport math\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\n\npd.set_option('display.float_format', lambda x: '%.2f' % x)\nwarnings.filterwarnings(\"ignore\")\n","68b3c69b":"data = pd.read_csv(\"..\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2021-03-31.csv\")","a68c94e8":"data.head()","4eff3914":"data.shape","f4121550":"data.isna().sum()","84742ac8":"data.tail()","d38203b2":"data[\"date\"] = pd.to_datetime(data[\"Timestamp\"],unit=\"s\").dt.date\n","5c6f8c28":"data.head()","216627e7":"data = data.dropna().set_index(\"date\")","67994622":"data.isna().sum()","b1f8220f":"data.head()","592cc34b":"dataset = data.iloc[:, 4].values\ndate = data.index\nplt.figure(figsize=(12,8))\nplt.plot(date,dataset)\nplt.xlabel(\"Date\")\nplt.ylabel(\"Close Price\")\nplt.title(\"Bitcoin Prices by Year\")\nplt.show()","7f1e1dcc":"group = data.groupby(\"date\")\ndata = group[\"Close\"].mean()","a3c62d73":"data.shape","4ca1ebfd":"pd.DataFrame(data)","e6f827e5":"dataset = data.values","841c680e":"dataset","69b55e50":"dataset = dataset.reshape(-1,1)\ndataset = dataset.astype(\"float32\")\ndataset.shape","d49a77c9":"dataset","a1f2f719":"scaler = MinMaxScaler(feature_range=(0,1))\ndataset = scaler.fit_transform(dataset)","f55cde73":"train_size = int(len(dataset)*0.95)\ntest_size = len(dataset)- train_size","fc3b127e":"train = dataset[0:train_size, :]\ntest = dataset[train_size:len(dataset), :]\nprint(\"train size: {}, test size: {}\". format(len(train), len(test)))","c5ae8b15":"time_stemp = 10\ndataX = []\ndataY = []\nfor i in range(len(train) - time_stemp - 1):\n    a = train[i:(i + time_stemp), 0]\n    dataX.append(a)\n    dataY.append(train[i + time_stemp, 0])\ntrainX = np.array(dataX)\ntrainY = np.array(dataY)","df2d4bdb":"trainX.shape","ab4cffb9":"trainY.shape","ecfdda64":"dataX = []\ndataY = []\nfor i in range(len(test) - time_stemp -1):\n    a = test[i:(i + time_stemp), 0]\n    dataX.append(a)\n    dataY.append(test[i + time_stemp, 0])\ntestX = np.array(dataX)\ntestY = np.array(dataY)","22bfad2c":"testX.shape","2ba78108":"testY.shape","43b3cbab":"trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))","0ce537de":"trainX.shape","d3b52cb6":"trainY.shape","5018af5b":"from keras.layers import Dropout\n\nmodel = Sequential()\nmodel.add(LSTM(10, input_shape = (1, time_stemp)))\nmodel.add(Dropout(0.1))\nmodel.add(Dense(1))\nmodel.compile(loss = \"mean_squared_error\",optimizer=\"adam\")\nmodel.fit(trainX, trainY, epochs=100, batch_size=32)","7f4f1ab3":"trainPredict = model.predict(trainX)\ntestPredict = model.predict(testX)\n\ntrainPredict = scaler.inverse_transform(trainPredict)\ntrainY = scaler.inverse_transform([trainY])\ntestPredict = scaler.inverse_transform(testPredict)\ntestY = scaler.inverse_transform([testY])","d819ce80":"trainPredictPlot = np.empty_like(dataset)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[time_stemp:len(trainPredict) + time_stemp, :] = trainPredict\n\ntestPredictPlot = np.empty_like(dataset)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(trainPredict) + (time_stemp * 2) + 1:len(dataset) - 1, :] = testPredict\n\nplt.figure(figsize=(12,8), dpi=75, facecolor =\"w\", edgecolor=\"k\")\nplt.plot(data.index[3000:3200],scaler.inverse_transform(dataset[3000:3200]),color =\"b\", label=\"Real Price\")\nplt.plot(data.index[3000:3200],trainPredictPlot[3000:3200], color =\"g\", label=\"train predicted result\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Close Values\")\nplt.legend()\nplt.show()","c3d96e54":"trainPredictPlot = np.empty_like(dataset)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[time_stemp:len(trainPredict) + time_stemp, :] = trainPredict\n\ntestPredictPlot = np.empty_like(dataset)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(trainPredict) + (time_stemp * 2) + 1:len(dataset) - 1, :] = testPredict\n\nplt.figure(figsize=(12,8), dpi=75, facecolor =\"w\", edgecolor=\"k\")\nplt.plot(data.index[3200:],scaler.inverse_transform(dataset[3200:]),color =\"b\", label=\"Real Price\")\nplt.plot(data.index[3200:],testPredictPlot[3200:], color =\"y\", label=\"test predicted result\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Close Values\")\nplt.legend()\nplt.show()","0222e560":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import SimpleRNN\nfrom keras.layers import Dropout","8fe9ca77":"dataset = data.values\ndataset = dataset.reshape(-1,1)\ndataset = dataset.astype(\"float32\")\ndataset.shape","959e729d":"scaler = MinMaxScaler(feature_range=(0,1))\ndataset = scaler.fit_transform(dataset)\ntrain = dataset[0:train_size, :]\ntest = dataset[train_size:len(dataset), :]\n","4d39ccaf":"time_stemp = 10\ndataX = []\ndataY = []\nfor i in range(len(train) - time_stemp - 1):\n    a = train[i:(i + time_stemp), 0]\n    dataX.append(a)\n    dataY.append(train[i + time_stemp, 0])\ntrainX = np.array(dataX)\ntrainY = np.array(dataY)","34cbd733":"dataX = []\ndataY = []\nfor i in range(len(test) - time_stemp -1):\n    a = test[i:(i + time_stemp), 0]\n    dataX.append(a)\n    dataY.append(test[i + time_stemp, 0])\ntestX = np.array(dataX)\ntestY = np.array(dataY)","4a672974":"trainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1],1))\ntestX = np.reshape(testX, (testX.shape[0],testX.shape[1],1))","141436dd":"regressor = Sequential()\n\n\nregressor.add(SimpleRNN(units = 50,activation='tanh', return_sequences = True, input_shape = (trainX.shape[1],1)))\nregressor.add(Dropout(0.2))\n\n\nregressor.add(SimpleRNN(units = 50,activation='tanh', return_sequences = True))\nregressor.add(Dropout(0.2))\n\n\nregressor.add(SimpleRNN(units = 50,activation='tanh', return_sequences = True))\nregressor.add(Dropout(0.2))\n\n\nregressor.add(SimpleRNN(units = 50))\nregressor.add(Dropout(0.2))\n\n\nregressor.add(Dense(units = 1))\n\n\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n\nregressor.fit(trainX, trainY, epochs = 100, batch_size = 32)","c9614801":"trainPredict = regressor.predict(trainX)\ntestPredict = regressor.predict(testX)\n\ntrainPredict = scaler.inverse_transform(trainPredict)\ntrainY = scaler.inverse_transform([trainY])\ntestPredict = scaler.inverse_transform(testPredict)\ntestY = scaler.inverse_transform([testY])","0e73436f":"trainPredictPlot = np.empty_like(dataset)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[time_stemp:len(trainPredict) + time_stemp, :] = trainPredict\n\ntestPredictPlot = np.empty_like(dataset)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(trainPredict) + (time_stemp * 2) + 1:len(dataset) - 1, :] = testPredict\n\nplt.figure(figsize=(12,8), dpi=75, facecolor =\"w\", edgecolor=\"k\")\nplt.plot(data.index[3000:3200],scaler.inverse_transform(dataset[3000:3200]),color =\"b\", label=\"Real Price\")\nplt.plot(data.index[3000:3200],trainPredictPlot[3000:3200], color =\"g\", label=\"train predicted result\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Close Values\")\nplt.legend()\nplt.show()","eff07c68":"trainPredictPlot = np.empty_like(dataset)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[time_stemp:len(trainPredict) + time_stemp, :] = trainPredict\n\ntestPredictPlot = np.empty_like(dataset)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(trainPredict) + (time_stemp * 2) + 1:len(dataset) - 1, :] = testPredict\n\nplt.figure(figsize=(12,8), dpi=75, facecolor =\"w\", edgecolor=\"k\")\nplt.plot(data.index[3200:],scaler.inverse_transform(dataset[3200:]),color =\"b\", label=\"Real Price\")\nplt.plot(data.index[3200:],testPredictPlot[3200:], color =\"y\", label=\"test predicted result\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Close Values\")\nplt.legend()\nplt.show()","4f5bd5f2":"## LSTM Model","48233045":"## RNN Prediction and Visualization","c57207dc":"When results are compared as to test score, it can be seen that LSTM model has better predicton. \n","fb06d280":"## RNN Train-Test Split","96a888c7":"## RNN Model","15e2c28c":"## Conclusion","5b64333e":"## LSTM Train-Test Split","b5250ef5":"## LSTM Prediction and Visualization","df353b79":"## Preprocessing Data"}}