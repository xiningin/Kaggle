{"cell_type":{"f9fec1db":"code","2deaf1ac":"code","33917733":"code","58ab13aa":"code","489bae3f":"code","a560e918":"code","246a61f9":"code","21e5ba00":"code","88f6fcda":"code","9b170593":"markdown","85113edf":"markdown","69bd7df1":"markdown"},"source":{"f9fec1db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2deaf1ac":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import KFold\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPool2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD","33917733":"# load train and test dataset\ntrain = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest  = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nprint(train.shape, test.shape)\ntrain.head()","58ab13aa":"# X and Y\nX = train.drop(\"label\", axis =1)\ny = train[\"label\"]\nX_train = X.to_numpy().reshape(X.shape[0], 28,28, 1)\ny_train = to_categorical(y)\n\n#Scaling Pixels\nX_train = X_train.astype(\"float32\")\nX_train = X_train\/255.0","489bae3f":"#define model\ncnn = Sequential()\ncnn.add( Conv2D( filters = 32, kernel_size = 3, activation = \"relu\", input_shape = [28,28,1]) )\ncnn.add( MaxPool2D( pool_size = 2 , strides =2) )\ncnn.add( Conv2D( filters = 32, kernel_size = 3, activation = \"relu\" ) )\ncnn.add( MaxPool2D( pool_size = 2 , strides =2) )\ncnn.add(Flatten())\ncnn.add (Dense( units = 128, activation = \"relu\" )) #Hidden Layer\ncnn.add(Dense (units = 10, activation =\"softmax\")) # Binary classification: 1 or 0\nopt = SGD(lr=0.01, momentum=0.9) # optimizer for compiling\ncnn.compile( optimizer =opt , loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","a560e918":"#Evaluate Model\nscores, histories = list(), list()\n\n# prepare cross validation\nn_folds=5\nkfold = KFold(n_folds, shuffle=True, random_state=1)\n\n# enumerate splits\ndataX,dataY = X_train,y_train\nfor train_ix, test_ix in kfold.split(dataX):\n    # define model\n    model = cnn\n    # select rows for train and test\n    trainX, trainY, testX, testY = dataX[train_ix], dataY[train_ix], dataX[test_ix], dataY[test_ix]\n    # fit model\n    history = model.fit(trainX, trainY, epochs=10, batch_size=32, validation_data=(testX, testY), verbose=0)\n    # evaluate model\n    _, acc = model.evaluate(testX, testY, verbose=0)\n    print('> %.3f' % (acc * 100.0))\n    # stores scores\n    scores.append(acc)\n    histories.append(history)","246a61f9":"# plot diagnostic learning curves\nfor i in range(len(histories)):\n    # plot loss\n    plt.subplot(2, 1, 1)\n    plt.title('Cross Entropy Loss')\n    plt.plot(histories[i].history['loss'], color='red', label='train')\n    plt.plot(histories[i].history['val_loss'], color='black', label='test')\n    # plot accuracy\n    plt.subplot(2, 1, 2)\n    plt.title('Classification Accuracy')\n    plt.plot(histories[i].history['accuracy'], color='red', label='train')\n    plt.plot(histories[i].history['val_accuracy'], color='black', label='test')\nplt.show()","21e5ba00":"#Fit the model\ncnn.fit(X_train, y_train, epochs=10, batch_size=32, verbose=2)","88f6fcda":"#predicting and final submission\ntest = test.to_numpy().reshape(test.shape[0], 28,28, 1)\ntest = test.astype(\"float32\")\ntest = test\/255.0\npreds = cnn.predict(test)\n\nfinal = pd.DataFrame(np.argmax(preds, axis=1), columns=['Label'])\nfinal.insert(0, 'ImageId', final.index + 1)\nfinal.to_csv('submission.csv', index=False)","9b170593":"We can see that the model generally achieves a good fit, with train and test learning curves converging.","85113edf":"We can see two cases where the model achieves perfect accuracy. These are good results.","69bd7df1":"The data needs to be normalized. We can normalize the pixel values of grayscale image. This involves first converting the data type from unsigned integers to floats, then dividing the pixel values by the maximum value."}}