{"cell_type":{"8e4cf715":"code","ed84cdb7":"code","c7396bb8":"code","74776839":"code","84bb681e":"markdown"},"source":{"8e4cf715":"!pip install efficientnet -q","ed84cdb7":"import os\n\nimport efficientnet.tfkeras as efn\nimport numpy as np\nimport pandas as pd\nfrom kaggle_datasets import KaggleDatasets\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom sklearn.model_selection import GroupKFold","c7396bb8":"def auto_select_accelerator():\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n        print(\"Running on TPU:\", tpu.master())\n    except ValueError:\n        strategy = tf.distribute.get_strategy()\n    print(f\"Running on {strategy.num_replicas_in_sync} replicas\")\n    \n    return strategy\n\n\ndef build_decoder(with_labels=True, target_size=(256, 256), ext='npy'):\n    def decode(path):\n        file_bytes = tf.io.read_file(path)\n        if ext == 'npy':\n            img = tf.io.decode_raw(file_bytes, tf.float16)\n            img = img[64:]\n            img = tf.reshape(img, [546, 512])\n            img = tf.stack([img, img, img], axis=-1)\n            img = tf.cast(img, tf.float32) \/ 255.0\n            img = tf.image.resize(img, target_size)\n        else:\n            if ext == 'png':\n                img = tf.image.decode_png(file_bytes, channels=3)\n            elif ext in ['jpg', 'jpeg']:\n                img = tf.image.decode_jpeg(file_bytes, channels=3)\n            else:\n                raise ValueError(\"Image extension not supported\")\n            img = tf.cast(img, tf.float32) \/ 255.0\n            img = tf.image.resize(img, target_size)\n\n        return img\n    \n    def decode_with_labels(path, label):\n        return decode(path), label\n    \n    return decode_with_labels if with_labels else decode\n\n\ndef build_augmenter(with_labels=True):\n    def augment(img):\n        img = tf.image.random_flip_left_right(img)\n        img = tf.image.random_flip_up_down(img)\n        return img\n    \n    def augment_with_labels(img, label):\n        return augment(img), label\n    \n    return augment_with_labels if with_labels else augment\n\n\ndef build_dataset(paths, labels=None, bsize=128, cache=True,\n                  decode_fn=None, augment_fn=None,\n                  augment=True, repeat=True, shuffle=1024, \n                  cache_dir=\"\"):\n    if cache_dir != \"\" and cache is True:\n        os.makedirs(cache_dir, exist_ok=True)\n    \n    if decode_fn is None:\n        decode_fn = build_decoder(labels is not None)\n    \n    if augment_fn is None:\n        augment_fn = build_augmenter(labels is not None)\n    \n    AUTO = tf.data.experimental.AUTOTUNE\n    slices = paths if labels is None else (paths, labels)\n    \n    dset = tf.data.Dataset.from_tensor_slices(slices)\n    dset = dset.map(decode_fn, num_parallel_calls=AUTO)\n    dset = dset.cache(cache_dir) if cache else dset\n    dset = dset.map(augment_fn, num_parallel_calls=AUTO) if augment else dset\n    dset = dset.repeat() if repeat else dset\n    dset = dset.shuffle(shuffle) if shuffle else dset\n    dset = dset.batch(bsize).prefetch(AUTO)\n    \n    return dset","74776839":"strategy = auto_select_accelerator()\nBATCH_SIZE = strategy.num_replicas_in_sync * 32\nIMSIZE = (224, 240, 260, 300, 380, 456, 528, 600, 512)\nsub_df = pd.read_csv('..\/input\/seti-breakthrough-listen\/sample_submission.csv')\n\ntest_paths = '..\/input\/seti-npy-543512-test\/' + sub_df['id'] + '.npy'\nlabel_cols = sub_df.columns[1]\n\ntest_decoder = build_decoder(with_labels=False, target_size=(IMSIZE[8], IMSIZE[8]), ext='npy')\ndtest = build_dataset(\n    test_paths, bsize=BATCH_SIZE, repeat=False, \n    shuffle=False, augment=False, cache=False,\n    decode_fn=test_decoder\n)\n\nwith strategy.scope():\n    \n    models = []\n    \n    models0 = tf.keras.models.load_model(\n        '..\/input\/k\/h053473666\/seti-efnb0-train-fold0-546-512-img\/model0.h5'\n    )\n    models1 = tf.keras.models.load_model(\n        '..\/input\/k\/h053473666\/seti-efnb0-train-fold0-546-512-img\/model1.h5'\n    )\n    models2 = tf.keras.models.load_model(\n        '..\/input\/k\/h053473666\/seti-efnb0-train-fold0-546-512-img\/model2.h5'\n    )\n    models3 = tf.keras.models.load_model(\n        '..\/input\/k\/h053473666\/seti-efnb0-train-fold0-546-512-img\/model3.h5'\n    )\n    models4 = tf.keras.models.load_model(\n        '..\/input\/k\/h053473666\/seti-efnb0-train-fold0-546-512-img\/model4.h5'\n    )\n    \n    models.append(models0)\n    models.append(models1)\n    models.append(models2)\n    models.append(models3)\n    models.append(models4)\n\n    \n    \n    \nsub_df[label_cols] = sum([model.predict(dtest, verbose=1) for model in models]) \/ len(models)\n\nsub_df.to_csv('submission.csv',index=False)","84bb681e":"# ALIEN\ntensorflow simple baseline   \nversion1 efnb0 fold0  \nversion4 efnb7 fold0  \nversion5 efnb0 fold0~5  \n\u200b\ndataset:  \nhttps:\/\/www.kaggle.com\/h053473666\/seti-npy-543512-09  \nhttps:\/\/www.kaggle.com\/h053473666\/seti-npy-543512-af  \nhttps:\/\/www.kaggle.com\/h053473666\/seti-npy-543512-test  \n\u200b\ntrain:  \nhttps:\/\/www.kaggle.com\/h053473666\/tensorflow-tpu-seti-efficientnet-train  \n"}}