{"cell_type":{"a75cb7e1":"code","4dc08900":"code","969667ad":"code","5be57c98":"code","b05c06cb":"code","9947396d":"code","cdce596f":"code","f7924e4e":"code","e00715f6":"code","0e257f89":"code","9e675f95":"code","dcf4e985":"code","54767444":"code","9a014b7e":"code","5fa9f25b":"code","e023ac46":"code","5757be75":"code","5a5ac49f":"code","13f3da5d":"code","ccc46a73":"markdown","db203b96":"markdown","be8c6fd3":"markdown","d3f80529":"markdown","d7399e58":"markdown"},"source":{"a75cb7e1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n#!pip install us\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom pylab import rcParams\nfrom pandas.api.types import CategoricalDtype\nfrom datetime import date, timedelta\nimport warnings\nimport folium\nfrom folium.plugins import HeatMap\nimport pandas_profiling\nimport math\nimport pickle\nimport fbprophet\nfrom fbprophet.plot import plot_plotly\nfrom fbprophet.plot import add_changepoints_to_plot\nimport glob\n#import us\n\nrcParams[\"figure.figsize\"] = 20,9\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4dc08900":"# import data from github url, url1 -Confirmed, url2 -Deaths. url3 -Recovered\nurl1='\/kaggle\/input\/covid19\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv'\nurl2='\/kaggle\/input\/covid19\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv'\nurl3='\/kaggle\/input\/covid19\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv'\ndf1 = pd.read_csv(url1, error_bad_lines=False)\ndf2 = pd.read_csv(url2, error_bad_lines=False)\ndf3 = pd.read_csv(url3, error_bad_lines=False)\n# display df1 -Confirmed df2 -Deaths df3 -Recovered\ndisplay(df1.head(), df2.head(), df3.head())","969667ad":"# Data Subset for US States\npath = r'\/kaggle\/input\/covid19\/csse_covid_19_data\/csse_covid_19_daily_reports\/' # path to daily reports\n\nall_files = glob.glob(path + \"\/*.csv\")\n\nli = []\n\nfor filename in all_files:\n\n    df = pd.read_csv(filename, index_col=None, header=0)\n\n    li.append(df)\n\nframe = pd.concat(li, axis=0, ignore_index=True)\nframe[\"Last Update\"] = frame['Last Update'].fillna(frame['Last_Update'])\nframe[\"Country\/Region\"] = frame['Country\/Region'].fillna(frame['Country_Region'])\nframe[\"Province\/State\"] = frame['Province\/State'].fillna(frame['Province_State'])\nframe['Last Update'] = pd.to_datetime(frame['Last Update'])\n# Create filter for Last Update to equal LastUpdate\nLastUpdateDaily=frame['Last Update'].max()\nLastUpdate_FilterDaily=frame['Last Update']==LastUpdateDaily\nTotalCasesByLastUpdateProvinceDaily=frame.groupby(['Country\/Region', 'Province\/State','Last Update'],sort=False).agg({'Confirmed':sum, 'Deaths':sum, 'Recovered':sum,'Active':sum})\nTotalCasesByLastUpdateProvinceDaily=TotalCasesByLastUpdateProvinceDaily.reset_index()\nTotalCasesByLastUpdateProvinceDaily['Last Update']= TotalCasesByLastUpdateProvinceDaily['Last Update'].dt.normalize()\nTotalCasesByLastUpdateProvinceDaily=TotalCasesByLastUpdateProvinceDaily[TotalCasesByLastUpdateProvinceDaily['Country\/Region']=='US'].reset_index()\n#TotalCasesByLastUpdateProvinceDaily.to_excel(r'\/kaggle\/working\/all1.xlsx', index = False)\n#display(frame.head(), TotalCasesByLastUpdateProvinceDaily.head(), frame.info())","5be57c98":"# unpivot data frames: df1 (Confirmed) and name it df1u, df2 (Deaths) and name it df2u, df3 (Recovered) and name it df3u\ndf1u=pd.melt(df1, id_vars=['Province\/State', 'Country\/Region', 'Lat','Long'], var_name='DateTime', value_name='Confirmed')\ndf2u=pd.melt(df2, id_vars=['Province\/State', 'Country\/Region', 'Lat','Long'], var_name='DateTime', value_name='Deaths')\ndf3u=pd.melt(df3, id_vars=['Province\/State', 'Country\/Region', 'Lat','Long'], var_name='DateTime', value_name='Recovered')\n# show unpivoted data frame for Confirmed, Deaths, Recovered\ndisplay(df1u.head(), df2u.head(), df3u.head())","b05c06cb":"# Check number of NaN in data frame\ndisplay(df1u.info(), df2u.info(), df3u.info())","9947396d":"# fill NaN with 0 for Confirmed, Deaths, Recovered\ndf1u['Confirmed'] = df1u['Confirmed'].fillna(0)\ndf2u['Deaths'] = df2u['Deaths'].fillna(0)\ndf3u['Recovered'] = df3u['Recovered'].fillna(0)\n# fill NaN in Province\/State column with data from Country\/Region column\ndf3u['Province\/State'] = df3u['Province\/State'].fillna(df3u['Country\/Region'])\ndf2u['Province\/State'] = df2u['Province\/State'].fillna(df2u['Country\/Region'])\ndf1u['Province\/State'] = df1u['Province\/State'].fillna(df1u['Country\/Region'])\n# Display fill NaN for Confirmed, Deaths, Recovered\ndisplay(df1u.head(), df2u.head(), df3u.head(), df1u.info(), df2u.info(), df3u.info())","cdce596f":"# Change Data type for Columns DateTime, Confirmed, Deaths, and Recovered\ndf1u['DateTime'] = pd.to_datetime(df1u['DateTime'])\ndf2u['DateTime'] = pd.to_datetime(df2u['DateTime'])\ndf3u['DateTime'] = pd.to_datetime(df3u['DateTime'])\ndf1u['Confirmed']= pd.to_numeric(df1u['Confirmed'], downcast='integer')\ndf2u['Deaths']= pd.to_numeric(df2u['Deaths'], downcast='integer')\ndf3u['Recovered']= pd.to_numeric(df3u['Recovered'], downcast='integer')\ndisplay(df1u.info(), df2u.info(), df3u.info())","f7924e4e":"# merge data frame df1u, df2u, df3u\nmerged_df1= pd.merge(df1u, df2u, how='left', left_on=['Province\/State','DateTime'], right_on=['Province\/State','DateTime'])\nall_data= pd.merge(merged_df1, df3u,how='left', left_on=['Province\/State','DateTime'], right_on=['Province\/State','DateTime'])\nall_data.head(), all_data.info()","e00715f6":"# Drop Colums 'Province\/State_y', 'Country\/Region_y', 'Province\/State', 'Country\/Region'\n\nall_data.drop(columns=['Lat_y', 'Long_y', 'Lat', 'Long', 'Country\/Region', 'Country\/Region_y'], inplace=True)\nall_data.head()","0e257f89":"# Rename Columns Province\/State_x to Province\/State and Country\/Region_x to Country\/Region\nall_data.rename(columns={\"Lat_x\": \"Lat\", \"Long_x\": \"Long\", \"Country\/Region_x\": \"Country\/Region\"}, inplace=True)\nall_data['Confirmed'] = all_data['Confirmed'].fillna(0)\nall_data['Deaths'] = all_data['Deaths'].fillna(0)\nall_data['Recovered'] = all_data['Recovered'].fillna(0)\nall_data['Recovered']= pd.to_numeric(all_data['Recovered'], downcast='integer')\nall_data['Existing'] = all_data['Confirmed']-all_data['Deaths']-all_data['Recovered']\ndisplay(all_data.head(), all_data.info())","9e675f95":"# Show Last Update of COVID-19 Cases\n# Create filter for DateTime to equal LastUpdate\nLastUpdate=all_data['DateTime'].max()\nLastUpdate_Filter=all_data['DateTime']==LastUpdate","dcf4e985":"# Create filtered data frame by LastUpdate_Filter\nTotalCases_LastUpdate=all_data[LastUpdate_Filter]\nTotalCases_LastUpdate.sort_values(by=['Confirmed'], inplace=True, ascending=False)\nTotalCases_LastUpdate.reset_index(0, drop=True, inplace=True)\nTotalCases_LastUpdate['Province\/State'] = TotalCases_LastUpdate['Province\/State'].fillna(TotalCases_LastUpdate['Country\/Region'])\nTotalCases_LastUpdate['Existing'] = TotalCases_LastUpdate['Confirmed']-TotalCases_LastUpdate['Deaths']-TotalCases_LastUpdate['Recovered']\nTotalConf=TotalCases_LastUpdate['Confirmed'].sum()\nTotalDeaths=TotalCases_LastUpdate['Deaths'].sum()\nTotalRecovered=TotalCases_LastUpdate['Recovered'].sum()\nTotalExisting=TotalCases_LastUpdate['Existing'].sum()\nNCountries=TotalCases_LastUpdate['Country\/Region'].nunique()\nEstMortalityRate=TotalDeaths\/TotalConf\n#display(TotalCases_LastUpdate.head(), TotalCases_LastUpdate.info(), TotalCases_PreviousDay.head(),TotalCasesDelta.head())\nprint(\"Last Update\", LastUpdate.strftime('%d %b %Y'), sep=\": \")\nprint(\"Total Confirmed\", '{:,}'.format(TotalConf), sep=\": \")\nprint(\"Total Deaths\", '{:,}'.format(TotalDeaths), sep=\": \")\nprint(\"Total Recovered\", '{:,}'.format(TotalRecovered), sep=\": \")\nprint(\"Existing\",'{:,}'.format(TotalExisting), sep=\": \")\nprint(\"Estimated Mortality rate\",'{:.2%}'.format(EstMortalityRate), sep=\": \" )","54767444":"# Total Cases by Country\/Region and Last Update\nTotalCasesByLastUpdateCountry=TotalCases_LastUpdate.groupby(['Country\/Region'], sort=False)['Confirmed', 'Deaths', 'Recovered', 'Existing'].sum()\nTotalCasesByLastUpdateCountry=TotalCasesByLastUpdateCountry.reset_index()\nprint(\"Last Update\", LastUpdate.strftime('%d %b %Y'), sep=\": \")\ndisplay(TotalCasesByLastUpdateCountry.style.background_gradient(cmap='Set1_r'))","9a014b7e":"# Total Cases by Country\/Region, Province\/State, and Last Update\nTotalCasesByLastUpdateProvince=TotalCases_LastUpdate.groupby(['Country\/Region', 'Province\/State'],sort=False)['Confirmed', 'Deaths', 'Recovered','Existing'].sum()\nTotalCasesByLastUpdateProvince=TotalCasesByLastUpdateProvince.reset_index()\nprint(\"Last Update\", LastUpdate.strftime('%d %b %Y'), sep=\": \")\ndisplay(TotalCasesByLastUpdateProvince.style.background_gradient(cmap='Set1_r'))","5fa9f25b":"# Total Cases by Date\nTotalCases=all_data.groupby(['DateTime']).agg({\"Confirmed\": sum, 'Deaths': sum, 'Recovered': sum, 'Existing': sum})\nTotalCases=TotalCases.reset_index()\nTotalCases['deltaConfirmed']=TotalCases['Confirmed'].diff().fillna(0)\nTotalCases['deltaDeaths']=TotalCases['Deaths'].diff().fillna(0)\nTotalCases['deltaRecovered']=TotalCases['Recovered'].diff().fillna(0)\nTotalCases['deltaExisting']=TotalCases['Existing'].diff().fillna(0)\n# Total Cases Excluding China by Date\nExChina=all_data[all_data['Country\/Region']!='China']\nExChina=ExChina.reset_index()\nTotalCasesExChina=ExChina.groupby(['DateTime']).agg({\"Confirmed\": sum, 'Deaths': sum, 'Recovered': sum, 'Existing': sum})\nTotalCasesExChina=TotalCasesExChina.reset_index()\nTotalCasesExChina['deltaConfirmed']=TotalCasesExChina['Confirmed'].diff().fillna(TotalCasesExChina['Confirmed'])\nTotalCasesExChina['deltaDeaths']=TotalCasesExChina['Deaths'].diff().fillna(TotalCasesExChina['Deaths'])\nTotalCasesExChina['deltaRecovered']=TotalCasesExChina['Recovered'].diff().fillna(TotalCasesExChina['Recovered'])\nTotalCasesExChina['deltaExisting']=TotalCasesExChina['Existing'].diff().fillna(TotalCasesExChina['Existing'])\n# Total Cases China by Date\nChina=all_data[all_data['Country\/Region']=='China'].reset_index()\nTotalCasesChina=China.groupby(['DateTime']).agg({\"Confirmed\": sum, 'Deaths': sum, 'Recovered': sum, 'Existing': sum}).reset_index()\nTotalCasesChina['deltaConfirmed']=TotalCasesChina['Confirmed'].diff().fillna(TotalCasesChina['Confirmed'])\nTotalCasesChina['deltaDeaths']=TotalCasesChina['Deaths'].diff().fillna(TotalCasesChina['Deaths'])\nTotalCasesChina['deltaRecovered']=TotalCasesChina['Recovered'].diff().fillna(TotalCasesChina['Recovered'])\nTotalCasesChina['deltaExisting']=TotalCasesChina['Existing'].diff().fillna(TotalCasesChina['Existing'])\n# Total Cases by Province and Date\nTotalCasesByProvince=all_data.groupby(['Province\/State', 'DateTime']).agg({\"Confirmed\": sum, 'Deaths': sum, 'Recovered': sum, 'Existing': sum})\nTotalCasesByProvince=TotalCasesByProvince.reset_index()\nTotalCasesByProvince['Confirmed_Delta']=TotalCasesByProvince.sort_values(['Province\/State', 'DateTime']).groupby('Province\/State')['Confirmed'].diff().fillna(0)\nTotalCasesByProvince['Deaths_Delta']=TotalCasesByProvince.sort_values(['Province\/State', 'DateTime']).groupby('Province\/State')['Deaths'].diff().fillna(0)\nTotalCasesByProvince['Recovered_Delta']=TotalCasesByProvince.sort_values(['Province\/State', 'DateTime']).groupby('Province\/State')['Recovered'].diff().fillna(0)\nTotalCasesByProvince['Existing_Delta']=TotalCasesByProvince.sort_values(['Province\/State', 'DateTime']).groupby('Province\/State')['Existing'].diff().fillna(0)\n# Total Cases by Country and Date\nTotalCasesByCountry=all_data.groupby(['Country\/Region', 'DateTime']).agg({\"Confirmed\": sum, 'Deaths': sum, 'Recovered':sum, 'Existing': sum})\nTotalCasesByCountry=TotalCasesByCountry.reset_index()\nTotalCasesByCountry['Confirmed_Delta']=TotalCasesByCountry.sort_values(['Country\/Region', 'DateTime']).groupby('Country\/Region')['Confirmed'].diff().fillna(0)\nTotalCasesByCountry['Deaths_Delta']=TotalCasesByCountry.sort_values(['Country\/Region', 'DateTime']).groupby('Country\/Region')['Deaths'].diff().fillna(0)\nTotalCasesByCountry['Recovered_Delta']=TotalCasesByCountry.sort_values(['Country\/Region', 'DateTime']).groupby('Country\/Region')['Recovered'].diff().fillna(0)\nTotalCasesByCountry['Existing_Delta']=TotalCasesByCountry.sort_values(['Country\/Region', 'DateTime']).groupby('Country\/Region')['Existing'].diff().fillna(0)\n\n#display(TotalCases.head(), TotalCasesByProvince.head(), TotalCases.info(), TotalCasesByProvince.info())\ncl=sns.light_palette(\"red\", as_cmap=True)\ndisplay(TotalCases[['DateTime','Existing','Deaths','Recovered']].style.background_gradient(cmap=cl).set_caption('Heat Map of Total Existing, Deaths, and Recovered by Date'))\n#display(TotalCasesByCountry[['Country\/Region','DateTime','Existing','Deaths','Recovered']].style.background_gradient(cmap=cl).set_caption('Heat Map of Total Existing, Deaths, and Recovered by Country and Date'))\ndisplay(TotalCasesExChina.style.background_gradient(cmap=cl).set_caption('Heat Map Excluding China'))\ndisplay(TotalCasesChina.style.background_gradient(cmap=cl).set_caption('Heat Map China Cases'))\n","e023ac46":"# Time Series Visual for Confirmed, Recovered, and Deaths \nfig = go.Figure()\nfig.add_trace(go.Scatter(x = TotalCases.DateTime, y = TotalCases['Confirmed'], name = \"Total Confirmed\", line_color = 'orange', mode = 'lines+markers', marker = dict(size = 9, symbol = 'circle')))\nfig.add_trace(go.Scatter(x = TotalCases.DateTime, y = TotalCases['Recovered'], name = \"Total Recovered\", line_color = 'green', mode = 'lines+markers', marker = dict(size = 9, symbol = 'circle')))\nfig.add_trace(go.Scatter(x = TotalCases.DateTime, y = TotalCases['Deaths'], name = \"Total Deaths\", line_color = 'firebrick', mode = 'lines+markers', marker = dict(size = 9, symbol = 'circle')))\nfig.update_layout(title_text = 'Time Series Total Cases',\n  xaxis_rangeslider_visible = True,\n  paper_bgcolor='rgba(233,233,233,233)',\n    plot_bgcolor='rgba(0,0,0,0)')\nfig.show()\n# Time Series Visual for Existing Cases\nfig = go.Figure()\nfig.add_trace(go.Scatter(x = TotalCases.DateTime, y = TotalCases['Existing'], name = \"Total Existing\", line_color = 'blue', mode = 'lines+markers', marker = dict(size = 9, symbol = 'circle')))\nfig.update_layout(title_text = 'Time Series Total Existing', showlegend=True,\n  xaxis_rangeslider_visible = True,\n  paper_bgcolor='rgba(233,233,233,233)',\n    plot_bgcolor='rgba(0,0,0,0)')\nfig.show()\n# Time Series Visual for Existing Cases Except China\nfig = go.Figure()\nfig.add_trace(go.Scatter(x = TotalCasesExChina.DateTime, y = TotalCasesExChina['Existing'], name = \"Total Existing Excluding China\", line_color = 'violet', mode = 'lines+markers', marker = dict(size = 9, symbol = 'circle')))\nfig.update_layout(title_text = 'Time Series Total Existing Excluding China', showlegend=True,\n  xaxis_rangeslider_visible = True,\n  paper_bgcolor='rgba(233,233,233,233)',\n    plot_bgcolor='rgba(0,0,0,0)')\nfig.show()\n","5757be75":"# Visual Display of Day to Day increase in new cases\nfig = go.Figure()\nfig.add_trace(go.Bar(x = TotalCases.DateTime, y = TotalCases['deltaConfirmed'], name = \"Total Confirmed Delta\", marker_color='orange') )\nfig.add_trace(go.Bar(x = TotalCases.DateTime, y = TotalCases['deltaDeaths'], name = \"Total Deaths Delta\", marker_color='firebrick') )\nfig.add_trace(go.Bar(x = TotalCases.DateTime, y = TotalCases['deltaRecovered'], name = \"Total Recovered Delta\", marker_color='green') )\nfig.update_layout(title_text = 'Total Cases Delta',\n  xaxis_rangeslider_visible = True,\n  paper_bgcolor='rgba(233,233,233,233)',\n    plot_bgcolor='rgba(0,0,0,0)')\nfig.show()","5a5ac49f":"# Day to Day increase in Confirmed Cases\nfig = px.bar(TotalCasesByCountry, x=\"DateTime\", y=\"Confirmed_Delta\", color='Country\/Region', orientation='v', height=600,\n             title='Day to Day Increase in Confirmed Cases', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.update_layout(\n  paper_bgcolor='rgba(233,233,233,233)',\n    plot_bgcolor='rgba(0,0,0,0)')\nfig.show()\n# Day to Day increase in Recovered Cases\nfig = px.bar(TotalCasesByCountry, x=\"DateTime\", y=\"Recovered_Delta\", color='Country\/Region', orientation='v', height=600,\n             title='Day to Day Increase in Total Recovered Cases', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.update_layout(\n  paper_bgcolor='rgba(233,233,233,233)',\n    plot_bgcolor='rgba(0,0,0,0)')\nfig.show()\n# Day to Day increase in Existing Cases\nfig = px.bar(TotalCasesByCountry, x=\"DateTime\", y=\"Existing_Delta\", color='Country\/Region', orientation='v', height=600,\n             title='Day to Day Increase in Existing Cases', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.update_layout(\n  paper_bgcolor='rgba(233,233,233,233)',\n    plot_bgcolor='rgba(0,0,0,0)')\nfig.show()\n#Countries with confirmed cases\nfig = px.choropleth(TotalCasesByLastUpdateCountry, locations=\"Country\/Region\", \n                    locationmode='country names', color=\"Confirmed\", \n                    hover_name=\"Country\/Region\", range_color=[1,10000], \n                    color_continuous_scale=\"orrd\", \n                    title='Countries with Confirmed Cases')\nfig.update_layout(\n    paper_bgcolor='rgba(233,233,233,233)', \n    plot_bgcolor='rgba(0,0,0,0)', \n    coloraxis_showscale=False,\n    title_x=0.5,\n    margin={\"r\":0,\"t\":50,\"l\":0,\"b\":20})\nfig.update_geos(resolution=110,\n                projection_type=\"natural earth\")\nfig.show()\n#US states by last update\nUSLastUpdateDaily=TotalCasesByLastUpdateProvinceDaily['Last Update'].max()\nUSLastUpdate_FilterDaily=TotalCasesByLastUpdateProvinceDaily['Last Update']==USLastUpdateDaily\n#USAstates=TotalCasesByLastUpdateProvinceDaily[(TotalCasesByLastUpdateProvinceDaily['Country\/Region']=='US') & (TotalCasesByLastUpdateProvinceDaily[USLastUpdate_FilterDaily])]\nUSAstates=TotalCasesByLastUpdateProvinceDaily[USLastUpdate_FilterDaily]\nUSAstates['Province\/State'] = USAstates['Province\/State'].astype(str)\n#USAstates[['StateName2', 'StateCode2']]=USAstates['Province\/State'].str.split(',', expand=True)\n#Dictionary of US state codes thank to @rogerallen on github\nus_state_abbrev = {\n    'Alabama': 'AL',\n    'Alaska': 'AK',\n    'American Samoa': 'AS',\n    'Arizona': 'AZ',\n    'Arkansas': 'AR',\n    'California': 'CA',\n    'Colorado': 'CO',\n    'Connecticut': 'CT',\n    'Delaware': 'DE',\n    'District of Columbia': 'DC',\n    'Florida': 'FL',\n    'Georgia': 'GA',\n    'Guam': 'GU',\n    'Hawaii': 'HI',\n    'Idaho': 'ID',\n    'Illinois': 'IL',\n    'Indiana': 'IN',\n    'Iowa': 'IA',\n    'Kansas': 'KS',\n    'Kentucky': 'KY',\n    'Louisiana': 'LA',\n    'Maine': 'ME',\n    'Maryland': 'MD',\n    'Massachusetts': 'MA',\n    'Michigan': 'MI',\n    'Minnesota': 'MN',\n    'Mississippi': 'MS',\n    'Missouri': 'MO',\n    'Montana': 'MT',\n    'Nebraska': 'NE',\n    'Nevada': 'NV',\n    'New Hampshire': 'NH',\n    'New Jersey': 'NJ',\n    'New Mexico': 'NM',\n    'New York': 'NY',\n    'North Carolina': 'NC',\n    'North Dakota': 'ND',\n    'Northern Mariana Islands':'MP',\n    'Ohio': 'OH',\n    'Oklahoma': 'OK',\n    'Oregon': 'OR',\n    'Palau': 'PW',\n    'Pennsylvania': 'PA',\n    'Puerto Rico': 'PR',\n    'Rhode Island': 'RI',\n    'South Carolina': 'SC',\n    'South Dakota': 'SD',\n    'Tennessee': 'TN',\n    'Texas': 'TX',\n    'Utah': 'UT',\n    'Vermont': 'VT',\n    'Virgin Islands': 'VI',\n    'Virginia': 'VA',\n    'Washington': 'WA',\n    'West Virginia': 'WV',\n    'Wisconsin': 'WI',\n    'Wyoming': 'WY',\n    'Diamond Princess': 'Ship1',\n    'Grand Princess': 'Ship2',\n}\n#Creating data frame for US States Map\n#USAstates['StateCode']= np.where(USAstates['StateCode2'].isnull(), USAstates['StateName2'].map(us_state_abbrev), USAstates['StateCode2'])\nUSAstates['StateCode']=USAstates['Province\/State'].map(us_state_abbrev)\ninverted_dict = dict( map(reversed, us_state_abbrev.items() ) )\nUSAstates['StateCode']=USAstates['StateCode'].str.strip()\nUSAstates['StateName']= USAstates['StateCode'].map(inverted_dict)\nUSAstatesGroup=USAstates.groupby(['StateName', 'StateCode'],sort=False).agg({\"Confirmed\": sum, 'Deaths': sum, 'Recovered': sum, 'Active': sum})\nUSAstatesGroup=USAstatesGroup.reset_index()\nfig = px.choropleth(USAstatesGroup, locations=\"StateCode\", \n                    locationmode='USA-states', color=\"Confirmed\",scope='usa', \n                    hover_name=\"StateName\", range_color=[1,10000], \n                    color_continuous_scale=\"orrd\", \n                    title='US States with Confirmed Cases')\nfig.update_layout(\n    paper_bgcolor='rgba(233,233,233,233)', \n    plot_bgcolor='rgba(0,0,0,0)', \n    coloraxis_showscale=False,\n    title_x=0.5,\n    margin={\"r\":0,\"t\":50,\"l\":0,\"b\":20})\nfig.update_geos(resolution=110)\nfig.show()","13f3da5d":"map1 = folium.Map(location=[30, 20], tiles = \"CartoDB dark_matter\", zoom_start=2.5)\nTotalCases_LastUpdate['Confirmed']= TotalCases_LastUpdate['Confirmed'].astype(float)\nTotalCases_LastUpdate['Deaths']= TotalCases_LastUpdate['Deaths'].astype(float)\nTotalCases_LastUpdate['Recovered']= TotalCases_LastUpdate['Recovered'].astype(float)\nfor i in range(0,len(TotalCases_LastUpdate)):\n   folium.Circle(\n      location=[TotalCases_LastUpdate.iloc[i]['Lat'], TotalCases_LastUpdate.iloc[i]['Long']],\n      popup=\n              TotalCases_LastUpdate.iloc[i]['Province\/State']+ \n       \" Total Confirmed: \"+str(\"{:,.0f}\".format(TotalCases_LastUpdate.iloc[i]['Confirmed']))+\n       \" Total Deaths: \"+ str(\"{:,.0f}\".format(TotalCases_LastUpdate.iloc[i]['Deaths']))+\n       \" Total Recovered: \"+ str(\"{:,.0f}\".format(TotalCases_LastUpdate.iloc[i]['Recovered']))+\n       \" Total Existing: \"+ str(\"{:,.0f}\".format(TotalCases_LastUpdate.iloc[i]['Existing'])),\n      radius=(math.sqrt(TotalCases_LastUpdate.iloc[i]['Confirmed'])*1200+2 ),\n      tooltip = '<li><bold>Country : '+str(TotalCases_LastUpdate.iloc[i]['Country\/Region'])+\n                '<li><bold>Province : '+str(TotalCases_LastUpdate.iloc[i]['Province\/State'])+\n                '<li><bold>Confirmed : '+str(\"{:,.0f}\".format(TotalCases_LastUpdate.iloc[i]['Confirmed']))+\n                '<li><bold>Deaths : '+str(\"{:,.0f}\".format(TotalCases_LastUpdate.iloc[i]['Deaths']))+\n                '<li><bold>Recovered : '+str(\"{:,.0f}\".format(TotalCases_LastUpdate.iloc[i]['Recovered']))+\n                '<li><bold>Existing : '+str(\"{:,.0f}\".format(TotalCases_LastUpdate.iloc[i]['Existing'])),\n      color='crimson',\n      fill=True,\n      fill_color='crimson'\n   ).add_to(map1)\nfolium.TileLayer('openstreetmap').add_to(map1)\nfolium.TileLayer('Stamen Terrain').add_to(map1)\nfolium.TileLayer('Stamen Toner').add_to(map1)\nfolium.TileLayer('stamenwatercolor').add_to(map1)\nfolium.TileLayer('cartodbpositron').add_to(map1)\nfolium.LayerControl().add_to(map1)\n\nmap1","ccc46a73":"# COVID-19 Global Cases\n## Load libraries","db203b96":"# **Data Visualization**","be8c6fd3":"# **Data Manipulation**","d3f80529":"Using the CSSEGISandData\/COVID-19 time series dataset, let's transform, visualize the data and do some analysis.","d7399e58":"# Data Import"}}