{"cell_type":{"d99033f4":"code","bc03e765":"code","5a0be8dc":"code","77685e37":"code","cbab7ca8":"code","8c8cf4bd":"code","2700af1b":"code","6a5104d1":"code","a0031d99":"code","8600ffc5":"code","f6fb03d4":"code","2e779cea":"code","1b549c6e":"code","f7f5f2f7":"code","2640e56c":"code","a8b23e2c":"code","8eea3084":"code","86e9e7ad":"code","4ffe7d29":"code","c03ec774":"code","e0db5ae9":"code","9fdd1069":"code","e65bbb64":"code","9cd803d6":"code","c670cf04":"code","b0d2f6d0":"code","812ae7f2":"code","32043a3c":"code","546a3b91":"code","ab628d96":"code","1cdafced":"code","672b0d97":"code","b6ab51b4":"code","085598a3":"code","a3b162ed":"code","55184472":"code","40af79de":"code","e067147b":"code","877ab642":"code","dafca949":"code","8ede39af":"code","b44642ec":"code","ee850f2f":"code","34774230":"code","b5827ec8":"code","f650a90f":"code","3f37a836":"code","852fba71":"code","3b9940d5":"code","54bb73c0":"code","7803d218":"code","fb7cc5e6":"code","ade74323":"code","88e48367":"markdown","be78f1a4":"markdown","97353cb5":"markdown","774058fc":"markdown","20176740":"markdown","340c5011":"markdown","7007c1af":"markdown","4fbca95a":"markdown","bf85c5a3":"markdown","c4e8600d":"markdown","5a568001":"markdown","84d38d0b":"markdown","c97580c7":"markdown","d6cc86b6":"markdown","02e70e4a":"markdown","2612e07d":"markdown","9c95f02e":"markdown","dadaae7b":"markdown","55715d31":"markdown","bffe2d52":"markdown","d37a5b39":"markdown"},"source":{"d99033f4":"\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","bc03e765":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_df.head(10)","5a0be8dc":"test_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_df.head(10)","77685e37":"column_names = {\"Pclass\": \"Class\",\n                \"SibSp\": \"Sibling\/Spouse\",\n                \"Parch\": \"Parent\/Children\",\n                \"Embarked\": \"Port\"}\n\ntrain_df = train_df.rename(column_names, axis=1)\ntest_df = test_df.rename(column_names, axis=1)\n","cbab7ca8":"train_df.head()","8c8cf4bd":"test_df.shape","2700af1b":"train_df.shape","6a5104d1":"train_df.info()","a0031d99":"train_df.describe()","8600ffc5":"train_df.describe(include=[\"O\"])","f6fb03d4":"train_df[\"Relatives\"] = train_df[\"Sibling\/Spouse\"] + train_df[\"Parent\/Children\"]\ntest_df[\"Relatives\"] = test_df[\"Sibling\/Spouse\"] + test_df[\"Parent\/Children\"]\n","2e779cea":"train_df.tail()","1b549c6e":"train_df.isnull().sum()","f7f5f2f7":"train_df = train_df.drop(\"Cabin\", axis = 1)\n\ntest_df = test_df.drop(\"Cabin\", axis = 1)\n","2640e56c":"median_age = train_df[\"Age\"].median()\n\ntrain_df[\"Age\"] = train_df[\"Age\"].fillna(value=median_age)\n","a8b23e2c":"train_df.Port.value_counts()","8eea3084":"train_df[\"Port\"] = train_df[\"Port\"].fillna(value=\"S\")\n","86e9e7ad":"train_df.isnull().sum()","4ffe7d29":"train_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"]).mean()","c03ec774":"train_df[\"Age_Group\"] = pd.cut(train_df[\"Age\"],bins=[0,18,60,100],include_lowest=True,labels=[\"child\",\"adult\",\"elder\"])\n","e0db5ae9":"train_df.head(10)","9fdd1069":"train_df[[\"Age_Group\",\"Survived\"]].groupby([\"Age_Group\"]).mean()","e65bbb64":"train_df[[\"Class\",\"Survived\"]].groupby([\"Class\"]).mean()","9cd803d6":"train_df[[\"Class\",\"Fare\"]].groupby([\"Class\"]).median()","c670cf04":"fig, ax = plt.subplots(1, 1, figsize=(12 , 12))\n\ncorr = train_df.corr()\n\nsns.heatmap(corr, ax=ax,\nsquare=True, center=0, linewidth=1,\ncmap=sns.diverging_palette(240, 10, as_cmap=True),\ncbar_kws={\"shrink\": .82}\n)\n\nax.set_title(f'Correlation', loc='left', fontweight='bold')\n\nplt.show()","b0d2f6d0":"age_plot = sns.FacetGrid(train_df,col=\"Survived\")\nage_plot.map(plt.hist,\"Age\",bins = 25)","812ae7f2":"# boolean masking\nmask = (train_df[\"Age\"] > 20) & (train_df[\"Age\"] < 40)\n\nyoung_adults = train_df[mask]\n\nyoung_adults[\"Survived\"].value_counts()","32043a3c":"plt.figure(figsize=(10,5))\nsns.boxplot(x=\"Class\",y=\"Fare\",data=train_df)","546a3b91":"sns.catplot(x=\"Class\",y=\"Survived\",col=\"Age_Group\",data=train_df,kind=\"bar\")","ab628d96":"test_df.isnull().sum()","1cdafced":"median_age_t = test_df[\"Age\"].median()\n\ntest_df[\"Age\"] = test_df[\"Age\"].fillna(value=median_age_t)","672b0d97":"test_df[\"Fare\"] = test_df[\"Fare\"].fillna(value = test_df[\"Fare\"].median())\n","b6ab51b4":"test_df[\"Age_Group\"] = pd.cut(test_df[\"Age\"],bins=[0,18,60,100],include_lowest=True,labels=[\"child\",\"adult\",\"elder\"])","085598a3":"test_df.isnull().sum()","a3b162ed":"train_df.drop([\"Sibling\/Spouse\",\"Parent\/Children\"],axis=1,inplace=True)\ntest_df.drop([\"Sibling\/Spouse\",\"Parent\/Children\"],axis=1,inplace=True)\ntrain_df.drop([\"Ticket\"],axis=1,inplace=True)\ntest_df.drop([\"Ticket\"],axis=1,inplace=True)","55184472":"from sklearn.preprocessing import LabelEncoder\nlabel = LabelEncoder()","40af79de":"train_df[\"Fare_Group\"] = pd.cut(train_df[\"Fare\"],10,include_lowest=True)\ntest_df[\"Fare_Group\"] = pd.cut(train_df[\"Fare\"],10,include_lowest=True)","e067147b":"train_df.head()","877ab642":"test_df.head()","dafca949":"train_df[\"age_code\"] = label.fit_transform(train_df[\"Age_Group\"])\ntrain_df[\"sex_code\"] = label.fit_transform(train_df[\"Sex\"])\ntrain_df[\"port_code\"] = label.fit_transform(train_df[\"Port\"])\ntrain_df[\"fare_code\"] =label.fit_transform(train_df[\"Fare_Group\"])","8ede39af":"\ntest_df[\"sex_code\"] = label.fit_transform(test_df[\"Sex\"])\ntest_df[\"port_code\"] = label.fit_transform(test_df[\"Port\"])\ntest_df[\"fare_code\"] =label.fit_transform(test_df[\"Fare_Group\"])\ntest_df[\"age_code\"] = label.fit_transform(test_df[\"Age_Group\"])","b44642ec":"train_df = train_df.drop([\"Sex\",\"Fare\",\"Port\",\"Age_Group\",\"Name\",\"Fare_Group\",\"Age\"],axis=1)","ee850f2f":"train_df.head()","34774230":"test_df = test_df.drop([\"Sex\",\"Fare\",\"Port\",\"Age_Group\",\"Fare_Group\",\"Age\",\"Name\"],axis=1)","b5827ec8":"test_df.head()","f650a90f":"y = train_df[\"Survived\"]\nX = train_df.drop([\"Survived\"],axis=1)\nX_test = test_df","3f37a836":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics","852fba71":"logReg = LogisticRegression(solver='liblinear')\nlogReg.fit(X,y)","3b9940d5":"y_pred = logReg.predict(X_test)\n\ny_pred = y_pred[:418]","54bb73c0":"y_pred","7803d218":"print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logReg.score(X,y)))","fb7cc5e6":"\nsubmission = pd.DataFrame({'PassengerId':test_df['PassengerId'],'Survived':y_pred})\n\n\nsubmission.shape\n","ade74323":"filename = 'Titanic Predictions 7.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","88e48367":"Changes on the column names of the both datasets seem successful","be78f1a4":"The survival percentage decreases as the age increases. Therefore, we would expect a negative correlation between age and survival.\n\nAccording to our data, we can say that rescuing of the children and the female was prioritized in Titanic.","97353cb5":"There are duplicates in ticket and cabin","774058fc":"As the data dictionary explains:\n\n* pclass = Ticket class (first, second, third)\n* SibSp = number of siblings and spouses\n* Parch = number of parents and children\n* Embarked = port of embarkation (C = Cherbourg, Q = Queenstown, S = Southampton)\n","20176740":"Age, Cabin and Port has some missing values","340c5011":"Test and Train datasets are ready to feed to the model.","7007c1af":"First and third class ticket prices have many outliers.","4fbca95a":"Missing Age and Fare values are filled on the test dataset.","bf85c5a3":"There are no missing values left.","c4e8600d":"We can see that females have a much higher survival rate than males","5a568001":"It looks like Age and Fare features have some outliers since their max value is far over their 3rd quartile value.","84d38d0b":"Creating a new column named Relatives which includes siblings, spouses, parents and children","c97580c7":"Since the Cabin feature has mostly missing values, it is dropped from the dataset to increase our model's performance.","d6cc86b6":"Correlations support our previous assumptions.","02e70e4a":"Our traning dataset includes 891 rows and 12 columns\n\nThe test dataset includes 418 rows and 11 columns\n\nThe missing column on the test dataset is the Survived column which we are going to predict as 1 = survived and 0 = not survived.\n\nSince we are going to decide if it's 0 or 1, this problem is a classification problem.","2612e07d":"Since there are high-priced tickets (outliers) in the first class that could inflate the mean fare, I have used the median values.\n\nThere is a huge difference between first class ticket prices and the others.","9c95f02e":"Our new feature works.","dadaae7b":"As S (Southampton) is the most common Port, I have decided to fill the 2 missing Port values as S.","55715d31":"Filling missing Age values with the median age of the train dataset.","bffe2d52":"To start building a model, we should transform our data accordingly.\n\nDropping Sibling\/Spouse and Parent\/Children features since they are represented by the Relatives feature as they have very high correlation.\n\nFare_Group column is created with the help of cut() function.\n\nTo be able to have our categorical features, we should use label encoder.","d37a5b39":"Higher the class (closer to 1), higher the survival rate.\n\nWe would expect a negative correlation between class and survived."}}