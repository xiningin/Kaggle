{"cell_type":{"307bebeb":"code","8b6c38ea":"code","11830cf1":"code","be69158f":"code","4d938187":"code","09630905":"code","da1d3d9b":"code","086fda27":"code","2bb25144":"code","d0efa742":"code","691f243b":"code","8f38c315":"code","5d6bf330":"code","a7ec46fe":"code","53304954":"code","982cfb14":"code","acced316":"code","22cf92f4":"code","3234920d":"code","47e9ed30":"code","5118edd3":"code","aebe8128":"code","f3c10650":"code","89b8e631":"code","833d70e0":"code","b5915230":"markdown"},"source":{"307bebeb":"!pip install eif\n!pip install pyod","8b6c38ea":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport eif as iso\nfrom sklearn.ensemble import IsolationForest\nfrom mpl_toolkits.mplot3d import Axes3D\n%matplotlib inline","11830cf1":"mean = [0, 0, 0]\ncov = [[4, 2, 0],\n      [0, 1, 0],\n      [0, 0, 1]]\n\nx, y, z = np.random.multivariate_normal(mean, cov, 2500).T\n\nx = x.reshape(2500, 1)\ny = y.reshape(2500, 1)\nz = z.reshape(2500, 1)\ndataframe = pd.DataFrame(np.concatenate((x, y, z), axis = 1), columns = ['f1', 'f2', 'f3'])\nX = dataframe.values","be69158f":"fig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, projection='3d')\n\nax.scatter(dataframe.f1, dataframe.f2, dataframe.f3, c='b', marker='o')\n\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\nplt.show()","4d938187":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\nfrom plotly.offline import init_notebook_mode, iplot","09630905":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=dataframe.f1,\n    y=dataframe.f2,\n    z=dataframe.f3,\n    mode='markers',\n    marker=dict(\n        size=2,\n        color='rgb(255,0,0)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","da1d3d9b":"anomalies_ratio = 0.03\n\nif_sk = IsolationForest(n_estimators = 500, \n                        max_samples = 256,\n                        contamination = anomalies_ratio, \n                        behaviour= \" new\", \n                        random_state = np.random.RandomState(42))\nif_sk.fit(X)\ny_pred = if_sk.predict(X)\ny_pred = [1 if x == -1 else 0 for x in y_pred]","086fda27":"dataframe['target'] = y_pred\ndataframe.head()","2bb25144":"dataframe.target.value_counts()","d0efa742":"predicted_normal = dataframe[dataframe['target']==0]\npredicted_anomaly = dataframe[dataframe['target']==1]","691f243b":"fig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, projection='3d')\n\nax.scatter(predicted_normal.f1, predicted_normal.f2, predicted_normal.f3, c='b', marker='o')\nax.scatter(predicted_anomaly.f1, predicted_anomaly.f2, predicted_anomaly.f3, c='r', marker='o')\n\n\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\nplt.show()","8f38c315":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=predicted_normal.f1,\n    y=predicted_normal.f2,\n    z=predicted_normal.f3,\n    mode='markers',\n    marker=dict(\n        size=5,\n        color='red',                # set color to an array\/list of desired values      \n    )\n)\n\ntrace2 = go.Scatter3d(\n    x=predicted_anomaly.f1,\n    y=predicted_anomaly.f2,\n    z=predicted_anomaly.f3,\n    mode='markers',\n    marker=dict(\n    size=5,\n    color='blue',\n    )\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","5d6bf330":"if_eif = iso.iForest(X, ntrees = 100, sample_size = 256, ExtensionLevel = 1)\nanomaly_scores = if_eif.compute_paths(X_in = X)\n# sort the scores\nanomaly_scores_sorted = np.argsort(anomaly_scores)\n# retrieve indices of anomalous observations\nindices_with_preds = anomaly_scores_sorted[-int(np.ceil(anomalies_ratio * X.shape[0])):]\n# create predictions \ny_pred = np.zeros_like(y)\ny_pred[indices_with_preds] = 1","a7ec46fe":"dataframe['target'] = y_pred\npredicted_normal = dataframe[dataframe['target']==0]\npredicted_anomaly = dataframe[dataframe['target']==1]","53304954":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=predicted_normal.f1,\n    y=predicted_normal.f2,\n    z=predicted_normal.f3,\n    mode='markers',\n    marker=dict(\n        size=5,\n        color='red',                # set color to an array\/list of desired values      \n    )\n)\n\ntrace2 = go.Scatter3d(\n    x=predicted_anomaly.f1,\n    y=predicted_anomaly.f2,\n    z=predicted_anomaly.f3,\n    mode='markers',\n    marker=dict(\n    size=5,\n    color='blue',\n    )\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","982cfb14":"from pyod.utils.data import generate_data, get_outliers_inliers","acced316":"X, y = generate_data(n_train=500, train_only=True, contamination=0.03, n_features=3)","22cf92f4":"dataframe = pd.DataFrame(np.concatenate((X, y.reshape(500,1)), axis=1), columns = 'x y z target'.split())","3234920d":"dataframe['target'] = dataframe['target'].astype(int)\ninliers = dataframe[dataframe['target']==0]\noutliers = dataframe[dataframe['target']==1]","47e9ed30":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=inliers.x,\n    y=inliers.y,\n    z=inliers.z,\n    mode='markers',\n    marker=dict(\n        size=5,\n        color='blue',                # set color to an array\/list of desired values      \n    )\n)\n\ntrace2 = go.Scatter3d(\n    x=outliers.x,\n    y=outliers.y,\n    z=outliers.z,\n    mode='markers',\n    marker=dict(\n    size=5,\n    color='red',\n    )\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","5118edd3":"if_eif = iso.iForest(X, ntrees = 100, sample_size = 256, ExtensionLevel = 1)\nanomaly_scores = if_eif.compute_paths(X_in = X)\n# sort the scores\nanomaly_scores_sorted = np.argsort(anomaly_scores)\n# retrieve indices of anomalous observations\nindices_with_preds = anomaly_scores_sorted[-int(np.ceil(anomalies_ratio * X.shape[0])):]\n# create predictions \ny_pred = np.zeros_like(y)\ny_pred[indices_with_preds] = 1","aebe8128":"dataframe['ai_pred'] = y_pred.astype(int)","f3c10650":"dataframe.head()","89b8e631":"true_positives = dataframe[(dataframe['target']==1) & (dataframe['ai_pred']==1)]\ntrue_negatives = dataframe[(dataframe['target']==0) & (dataframe['ai_pred']==0)]\nfalse_positives = dataframe[(dataframe['target']==0) & (dataframe['ai_pred']==1)]\nfalse_negatives = dataframe[(dataframe['target']==1) & (dataframe['ai_pred']==0)]","833d70e0":"print(\"True Positives = \" + str(len(true_positives)))\nprint(\"True Negatives = \" + str(len(true_negatives)))\nprint(\"False Positives = \" + str(len(false_positives)))\nprint(\"False Negatives = \" + str(len(false_negatives)))","b5915230":"****GENERATING 3D Anomalous Data using PyOD****"}}