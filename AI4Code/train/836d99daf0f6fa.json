{"cell_type":{"d2fababb":"code","88ae05cc":"code","0ac86946":"code","44521817":"code","d85fab8e":"code","85a29bbe":"code","488fe5cc":"code","ab8972a0":"code","50bb82f5":"code","4eb2dacf":"code","d0f03f5b":"code","cba462e7":"code","c3e23bb3":"code","518ecbda":"code","7bae22f4":"code","5c8e5a19":"code","aa7c16de":"code","a1c86582":"code","50926173":"code","3f66d40c":"code","6a15190a":"code","3821cb1f":"code","804caa1c":"code","a4bb6299":"code","276bcf8a":"code","d546a622":"code","4d55d103":"code","8d4fb799":"code","452e616b":"code","7550594f":"code","b1f2bb67":"code","20987897":"code","fda167ee":"code","7681d596":"markdown","eb6a85d4":"markdown","ef570ba7":"markdown","8ba7cc85":"markdown","25c5f4ad":"markdown"},"source":{"d2fababb":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom pandas_profiling import ProfileReport\nimport matplotlib.pyplot as plt\nimport scipy","88ae05cc":"data = pd.read_csv('..\/input\/brasilian-houses-to-rent\/houses_to_rent.csv')\n","0ac86946":"data.drop(data.columns[0], axis=1, inplace=True)","44521817":"data.head()","d85fab8e":"data.floor.replace(to_replace='-', value=0, inplace=True)\ndata","85a29bbe":"data['animal']= data['animal'].apply(lambda x:1 if 'acept' == x else 0)\ndata['furniture']= data['furniture'].apply(lambda x:1 if 'furnished' == x else 0)\ndata","488fe5cc":"for column in ['hoa', 'rent amount', 'property tax', 'fire insurance', 'total']:\n    data[column].replace(to_replace='R\\$', value='', regex=True, inplace=True)\n    data[column].replace(to_replace=',', value='', regex=True, inplace=True)","ab8972a0":"data","50bb82f5":"data['hoa'].replace(to_replace='Sem info', value=0, inplace=True)","4eb2dacf":"data['hoa'].replace(to_replace='Incluso', value=0, inplace=True)","d0f03f5b":"data['property tax'].replace(to_replace='Incluso', value=0, inplace=True)","cba462e7":"#converting entier dataframe to integer to make sure there are no string values \ndata = data.astype(dtype=np.int64)","c3e23bb3":"# data = data.sample(frac=1).reset_index(drop=True)","518ecbda":"data1 = data.copy()\n","7bae22f4":"Y = data1['city']","5c8e5a19":"X = data1.loc[:,'area':]","aa7c16de":"data2 = X.copy()","a1c86582":"#sample look on how logtransformaiton works on the area column of the dataset\n\nplt.figure(figsize=(20,10))\nplt.subplot(1,2,1)\nplt.title('without log transform')\nsns.distplot(data2['area'], kde=True, fit=scipy.stats.norm)\n\nplt.subplot(1,2,2)\nplt.title('with log transform')\nsns.distplot(np.log(data2['area']), kde=True, fit=scipy.stats.norm)\nplt.xlabel('Log sale price')","50926173":"data2.drop('total', axis=1, inplace=True)\n","3f66d40c":"import scipy\nskew_df = pd.DataFrame(data2.select_dtypes(np.number).columns, columns=['Feature'])\nskew_df['skew'] = skew_df['Feature'].apply(lambda feature: scipy.stats.skew(data2[feature]))\nskew_df['abs_skew'] = skew_df['skew'].apply(abs)\nskew_df['skewed'] = skew_df['abs_skew'].apply(lambda abs_skew: True if abs_skew>=0.5 else False)\nskew_df","6a15190a":"for column in skew_df.query('skewed == True')['Feature'].values:\n    data2[column] = np.log1p(data2[column])","3821cb1f":"profile = ProfileReport(data2, explorative=False, interactions={'continuous': False})\nprofile","804caa1c":"data2.loc[:,'area']","a4bb6299":"data3 = data2.copy()","276bcf8a":"data3","d546a622":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(data3)\ndata3= scaler.transform(data3)","4d55d103":"data4 = data3.copy()","8d4fb799":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(data4, Y, train_size=0.8)","452e616b":"X_train","7550594f":"# from sklearn.linear_model import BayesianRidge, HuberRegressor, Ridge, OrthogonalMatchingPursuit\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor, ExtraTreesRegressor, RandomForestRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom catboost import CatBoostRegressor\nfrom sklearn.linear_model import Lasso, ElasticNet\nfrom sklearn.metrics import f1_score\nfrom sklearn.dummy import DummyRegressor\n","b1f2bb67":"models = {\n    'lasso':Lasso(normalize=True),\n    'elastic':ElasticNet(alpha = 0.5,random_state = 0),\n    'dummy': DummyRegressor()\n}","20987897":"for name, model in models.items():\n    model.fit(X_train, Y_train)\n    print(name + ' trained.')","fda167ee":"for model, _ in models.items():\n    pred =  np.expm1(models[model].predict(X_test)).astype(int)\n    print({model:f1_score(pred,Y_test, average='weighted')})","7681d596":"# spliting data to test and train data","eb6a85d4":"# selecting the best model","ef570ba7":"# Finding and fixing the skew in the dataset","8ba7cc85":"# Converting all the columns to integer","25c5f4ad":"# lable data "}}