{"cell_type":{"1c1bdab9":"code","f7680c77":"code","28d906ae":"code","43e5c5e7":"code","3b9450fb":"code","56bf1e3a":"code","b1b29872":"code","73a0fecd":"code","ed25711d":"code","d4af9e9c":"code","a995ce7f":"code","9028d48e":"code","83c7c9d9":"code","1a1aca1e":"code","a51c8b11":"code","c230d8de":"code","bcc1b5d0":"code","57880432":"code","7441b75c":"code","6c1198a6":"code","2080153f":"code","f71370f3":"code","8d4be4f1":"code","b1e21584":"code","a000fd4a":"code","53e86635":"code","cb335f6d":"code","44260532":"code","7d3d78e2":"code","dc2d499c":"code","ea27c77d":"code","57bd4f09":"code","a495f804":"code","e93fed37":"code","24d4e325":"code","9cb4e2ab":"code","085f34ab":"code","d65042a3":"code","5602b5cd":"code","c4ed040f":"markdown","55333361":"markdown","f6459686":"markdown","c714aa40":"markdown","09e3c20e":"markdown","4e628292":"markdown","d1983654":"markdown","acb0cac1":"markdown","30a040e7":"markdown","27f60803":"markdown","b111056b":"markdown","cede3061":"markdown","b2ddb026":"markdown","ca5d09f8":"markdown","95ec1437":"markdown","879870e1":"markdown","59ac51bf":"markdown","05711eeb":"markdown","869d5041":"markdown","ebd3b48f":"markdown","357de3ae":"markdown","bccbe1e4":"markdown","321ede75":"markdown","bbbef79e":"markdown","7fd6b810":"markdown","73cfbeea":"markdown","23500693":"markdown"},"source":{"1c1bdab9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#Neural network libraries\nimport tensorflow as tf\nfrom tensorflow import keras\n# Layers for our neural networks\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense\n# A pretrained model for transfer learning\nfrom keras.models import Model\nfrom keras.applications import vgg19\n\n# Helper functions\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix, f1_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import RFE\n#Models \nfrom sklearn import tree\nfrom sklearn import datasets\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom sklearn.model_selection import GridSearchCV\n\nimport statsmodels.api as sm\nplt.style.use('fivethirtyeight')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7680c77":"df = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","28d906ae":"df.isna().sum()","43e5c5e7":"df.shape","3b9450fb":"df.describe().T","56bf1e3a":"df.rename(columns={'DEATH_EVENT':'Died'},inplace=True)\ndf.Died.value_counts().plot(kind='bar',legend=True)\nplt.title('Amount of heart failures')\n","b1b29872":"df.columns","73a0fecd":"continous_cols = ['age', 'creatinine_phosphokinase',\n       'ejection_fraction', 'platelets',\n       'serum_creatinine', 'serum_sodium' ]\ncontinous_cols","ed25711d":"categorical_cols = list(df.columns.drop(continous_cols))\ncategorical_cols.remove('Died')\ncategorical_cols.remove('time')\ncategorical_cols","d4af9e9c":"cnt = 0\nmax_in_row = 2\nfor x in continous_cols:\n    data = df[x]\n    plt.figure(cnt\/\/max_in_row, figsize=(20,10))\n    plt.subplot(1, max_in_row, (cnt)%max_in_row + 1)\n    plt.title(x)\n    sns.histplot(data, bins = 50, kde=50);\n    cnt += 1\n","a995ce7f":"max_in_row = 2\nfor x in continous_cols:\n    plt.figure(cnt\/\/max_in_row, figsize=(25,4))\n    plt.subplot(1, max_in_row, (cnt)%max_in_row + 1)\n    plt.title(x)\n    sns.kdeplot(data=df, x=x, hue=\"Died\", fill=True, common_norm=1, alpha=.5, linewidth=0);\n    cnt += 1","9028d48e":"male = df[df.sex ==1]\nfemale = df[df.sex == 0 ]\n\nmale_lived = male[male.Died ==0]\nmale_died = male [male.Died ==1]\nfemale_lived = female[female.Died ==0]\nfemale_died =  female[female.Died ==1]\ndata = [len(male_died), len(male_lived),len(female_died),len(female_lived)]\nplt.pie(x=data,labels=['Male Died','Male Lived', 'Female Died','Female Lived'],wedgeprops={'edgecolor':'black'},autopct='%1.1f%%')\nplt.tight_layout()\nplt.title('Men and women survival rates')","83c7c9d9":"male_died_diabetes = male_died[male_died.diabetes==1]\nmale_lived_diabetes = male_lived[male_lived.diabetes==1]\nfemale_died_diabetes = female_died[female_died.diabetes==1]\nfemale_lived_diabetes = female_lived[female_lived.diabetes==1]\ndata = [len(male_died_diabetes), len(male_lived_diabetes),len(female_died_diabetes),len(female_lived_diabetes)]\nplt.pie(x=data,labels=['Male Died','Male Lived', 'Female Died','Female Lived'],wedgeprops={'edgecolor':'black'},autopct='%1.1f%%')\nplt.tight_layout()\nplt.title('Diabetes survival rates')","1a1aca1e":"male_died_diabetes = male_died[male_died.diabetes==0]\nmale_lived_diabetes = male_lived[male_lived.diabetes==0]\nfemale_died_diabetes = female_died[female_died.diabetes==0]\nfemale_lived_diabetes = female_lived[female_lived.diabetes==0]\ndata = [len(male_died_diabetes), len(male_lived_diabetes),len(female_died_diabetes),len(female_lived_diabetes)]\nplt.pie(x=data,labels=['Male Died','Male Lived', 'Female Died','Female Lived'],wedgeprops={'edgecolor':'black'},autopct='%1.1f%%')\nplt.tight_layout()\nplt.title('Non-Diabetes survival rates')","a51c8b11":"male_died_anemia = male_died[male_died.anaemia==1]\nmale_lived_anemia = male_lived[male_lived.anaemia==1]\nfemale_died_anemia = female_died[female_died.anaemia==1]\nfemale_lived_anemia = female_lived[female_lived.anaemia==1]\ndata = [len(male_died_anemia), len(male_lived_anemia),len(female_died_anemia),len(female_lived_anemia)]\nplt.pie(x=data,labels=['Male Died','Male Lived', 'Female Died','Female Lived'],wedgeprops={'edgecolor':'black'},autopct='%1.1f%%')\nplt.tight_layout()\nplt.title('Anaemia survival rates')","c230d8de":"male_died_anemia = male_died[male_died.anaemia==0]\nmale_lived_anemia = male_lived[male_lived.anaemia==0]\nfemale_died_anemia = female_died[female_died.anaemia==0]\nfemale_lived_anemia = female_lived[female_lived.anaemia==0]\ndata = [len(male_died_anemia), len(male_lived_anemia),len(female_died_anemia),len(female_lived_anemia)]\nplt.pie(x=data,labels=['Male Died','Male Lived', 'Female Died','Female Lived'],wedgeprops={'edgecolor':'black'},autopct='%1.1f%%')\nplt.tight_layout()\nplt.title('Non-Anaemia survival rates')","bcc1b5d0":"male_died_hbp = male_died[male_died.high_blood_pressure==1]\nmale_lived_hbp= male_lived[male_lived.high_blood_pressure==1]\nfemale_died_hbp = female_died[female_died.high_blood_pressure==1]\nfemale_lived_hbp= female_lived[female_lived.high_blood_pressure==1]\ndata = [len(male_died_hbp), len(male_lived_hbp),len(female_died_hbp),len(female_lived_hbp)]\nplt.pie(x=data,labels=['Male Died','Male Lived', 'Female Died','Female Lived'],wedgeprops={'edgecolor':'black'},autopct='%1.1f%%')\nplt.tight_layout()\nplt.title('High Blood Pressure survival rates')","57880432":"male_died_hbp = male_died[male_died.high_blood_pressure==0]\nmale_lived_hbp= male_lived[male_lived.high_blood_pressure==0]\nfemale_died_hbp = female_died[female_died.high_blood_pressure==0]\nfemale_lived_hbp= female_lived[female_lived.high_blood_pressure==0]\ndata = [len(male_died_hbp), len(male_lived_hbp),len(female_died_hbp),len(female_lived_hbp)]\nplt.pie(x=data,labels=['Male Died','Male Lived', 'Female Died','Female Lived'],wedgeprops={'edgecolor':'black'},autopct='%1.1f%%')\nplt.tight_layout()\nplt.title('Non-High Blood Pressure survival rates')","7441b75c":"male_died_smoke = male_died[male_died.smoking==1]\nmale_lived_smoke= male_lived[male_lived.smoking==1]\nfemale_died_smoke = female_died[female_died.smoking==1]\nfemale_lived_smoke= female_lived[female_lived.smoking==1]\ndata = [len(male_died_smoke), len(male_lived_smoke),len(female_died_smoke),len(female_lived_smoke)]\nplt.pie(x=data,labels=['Male Died','Male Lived', 'Female Died','Female Lived'],wedgeprops={'edgecolor':'black'},autopct='%1.1f%%')\nplt.tight_layout()\nplt.title('Smoking survival rates')","6c1198a6":"male_died_smoke = male_died[male_died.smoking==0]\nmale_lived_smoke= male_lived[male_lived.smoking==0]\nfemale_died_smoke = female_died[female_died.smoking==0]\nfemale_lived_smoke= female_lived[female_lived.smoking==0]\ndata = [len(male_died_smoke), len(male_lived_smoke),len(female_died_smoke),len(female_lived_smoke)]\nplt.pie(x=data,labels=['Male Died','Male Lived', 'Female Died','Female Lived'],wedgeprops={'edgecolor':'black'},autopct='%1.1f%%')\nplt.tight_layout()\n\nplt.title('Non-Smoker survival rates')","2080153f":"max_in_row = 3\nfor x in categorical_cols:\n    plt.figure(cnt\/\/max_in_row, figsize=(25,4))\n    plt.subplot(1, max_in_row, (cnt)%max_in_row + 1)\n    plt.title(x)\n    sns.kdeplot(data=df, x=x, hue=\"Died\", fill=True, common_norm=False, alpha=.5, linewidth=0,);\n    cnt += 1","f71370f3":"import statsmodels.api as sm\nfrom scipy.stats import shapiro\nimport scipy.stats as stats\nfrom scipy.stats import anderson\nfrom scipy.stats import norm, skew\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","8d4be4f1":"max_in_row = 2\ncnt=0\nfor x in continous_cols:\n    plt.figure(cnt\/\/max_in_row, figsize=(25,4))\n    plt.subplot(1, max_in_row, (cnt)%max_in_row + 1)\n    plt.title(x)\n    sns.boxplot(df[x],orient='v')\n    cnt += 1","b1e21584":"df_no_outliers = df.copy()","a000fd4a":"Q1 = df_no_outliers.creatinine_phosphokinase.quantile(.25)\nQ3 = df_no_outliers.creatinine_phosphokinase.quantile(.75)\nIQR = Q3 - Q1\nfilter = (df_no_outliers.creatinine_phosphokinase >= Q1 - 1.5 * IQR) & (df_no_outliers.creatinine_phosphokinase <= Q3 + 1.5 *IQR)\n\nsns.boxplot(df_no_outliers.loc[filter].creatinine_phosphokinase,orient='v')\nplt.title('Creatinine Phosphokinase boxplot after removing outliers ')\nshapiro(df_no_outliers.loc[filter].creatinine_phosphokinase)\nfig = plt.figure()\nres = stats.probplot(df_no_outliers.loc[filter].creatinine_phosphokinase, plot=plt)\nplt.show()\ndf_no_outliers.creatinine_phosphokinase = df_no_outliers[filter]\nshapiro(df_no_outliers.loc[filter].creatinine_phosphokinase)","53e86635":"Q1 = df_no_outliers.ejection_fraction.quantile(.25)\nQ3 = df_no_outliers.ejection_fraction.quantile(.75)\nIQR = Q3 - Q1\nfilter = (df_no_outliers.ejection_fraction >= Q1 - 1.5 * IQR) & (df_no_outliers.ejection_fraction <= Q3 + 1.5 *IQR)\n\nsns.boxplot(df_no_outliers.loc[filter].ejection_fraction,orient='v')\nplt.title('Ejection fraction boxplot after removing outliers ')\n\n\nfig = plt.figure()\nres = stats.probplot(df_no_outliers.loc[filter].ejection_fraction, plot=plt)\nplt.show()\ndf_no_outliers.ejection_fraction = df_no_outliers[filter]\nshapiro(df_no_outliers.loc[filter].ejection_fraction)","cb335f6d":"col = 'platelets'\nQ1 = df_no_outliers[col].quantile(.25)\nQ3 = df_no_outliers[col].quantile(.75)\nIQR = Q3 - Q1\nfilter = (df_no_outliers[col] >= Q1 - 1.5 * IQR) & (df_no_outliers[col] <= Q3 + 1.5 *IQR)\n\nsns.boxplot(df_no_outliers.loc[filter][col],orient='v')\nplt.title('Platelets boxplot after removing outliers ')\nplt.tight_layout()\n\nfig = plt.figure()\nres = stats.probplot(df_no_outliers.loc[filter][col], plot=plt)\nplt.show()\ndf_no_outliers[col] = df_no_outliers[filter]\nshapiro(df_no_outliers.loc[filter][col])","44260532":"col = 'serum_creatinine'\nQ1 = df_no_outliers[col].quantile(.25)\nQ3 = df_no_outliers[col].quantile(.75)\nIQR = Q3 - Q1\nfilter = (df_no_outliers[col] >= Q1 - 1.5 * IQR) & (df_no_outliers[col] <= Q3 + 1.5 *IQR)\n\nsns.boxplot(df_no_outliers.loc[filter][col],orient='v')\nplt.title( col + ' boxplot after removing outliers ')\n\n\nfig = plt.figure()\nres = stats.probplot(df_no_outliers.loc[filter][col], plot=plt)\nplt.show()\ndf_no_outliers[col] = df_no_outliers[filter]\nshapiro(df_no_outliers.loc[filter][col])","7d3d78e2":"col = 'serum_sodium'\nQ1 = df_no_outliers[col].quantile(.25)\nQ3 = df_no_outliers[col].quantile(.75)\nIQR = Q3 - Q1\nfilter = (df_no_outliers[col] >= Q1 - 1.5 * IQR) & (df_no_outliers[col] <= Q3 + 1.5 *IQR)\n\nsns.boxplot(df_no_outliers.loc[filter][col],orient='v')\nplt.title('Platelets boxplot after removing outliers ')\n\n\nfig = plt.figure()\nres = stats.probplot(df_no_outliers.loc[filter][col], plot=plt)\nplt.show()\ndf_no_outliers[col] = df_no_outliers[filter]\nshapiro(df_no_outliers.loc[filter][col])","dc2d499c":"df_no_outliers = df_no_outliers.dropna()\ndf_no_outliers.isna().sum()","ea27c77d":"df_no_outliers = pd.get_dummies(df_no_outliers, columns = categorical_cols, drop_first = False)\n#df_no_outliers.drop(columns=['time'],inplace=True)\ny = df_no_outliers['Died']\n#X = df_no_outliers[df_no_outliers.columns.drop('Died')]\n#X = df_no_outliers[df_no_outliers.columns.drop('time')]\nX = df_no_outliers[df_no_outliers.columns.drop('Died')]\n#X = df_no_outliers[df_no_outliers.columns.drop()]\nscalerX = MinMaxScaler(feature_range=(0, 1))\nX[X.columns] = scalerX.fit_transform(X[X.columns])\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","57bd4f09":"X.columns","a495f804":"model = LogisticRegression(max_iter=50)\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)\naccuracy_score(y_test,y_pred)","e93fed37":"mod =RFE(estimator=LogisticRegression(),n_features_to_select=len(X.columns),verbose=True)\nmod.fit(X=X_train,y=y_train)\nmod.score(X_test,y_test)","24d4e325":"model = tf.keras.models.Sequential([ \n    tf.keras.layers.Dense(256, activation='relu'),\n  tf.keras.layers.Dense(64, activation='relu'),\n   tf.keras.layers.Dense(16, activation='relu'),\ntf.keras.layers.Dense(1, activation='sigmoid')\n])\nmodel.compile(optimizer=tf.keras.optimizers.Adam(), loss='binary_crossentropy', metrics=['acc'])\nepochs = 100\nmodel.fit(X_train, y_train, epochs=epochs, validation_split=0.1,verbose=0)\nmodel.evaluate(X_test, y_test)","9cb4e2ab":"model = RFE(estimator=DecisionTreeClassifier(),n_features_to_select=len(X.columns),verbose=True)\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)\naccuracy_score(y_test,y_pred)","085f34ab":"model = RFE(estimator=RandomForestClassifier(),n_features_to_select=len(X.columns),verbose=True)\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)\naccuracy_score(y_test,y_pred)","d65042a3":"model =   RFE(estimator=KNeighborsClassifier(n_neighbors=12,),n_features_to_select=len(X.columns),verbose=True) \nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)\nprint(accuracy_score(y_pred,y_test))","5602b5cd":"params = {\n            'max_iter' : [5,7,9,10,12,-1],\n            'degree' : [2,3,4,5,6],\n            'kernel' : [ 'poly','sigmoid','rbf','linear'],\n            'gamma' : ['scale','auto'],\n        \n         }\ngrid_search_cv =  GridSearchCV( \n    estimator = SVC(), \n    param_grid = params, \n    scoring = 'accuracy')\ngrid_search_cv.fit(X_train, y_train)\ny_pred = grid_search_cv.predict(X_test)\nprint(grid_search_cv.best_estimator_)\naccuracy_score(y_pred=y_pred,y_true=y_test)","c4ed040f":"# Random Forrest accuracy 78%","55333361":"## Time to split the columns into categorical and continuous columns","f6459686":"## Serum Sodium does not look normal and does not have a large enough pvalue to go with the null hypothesis that the data is normal","c714aa40":"# Any missing values?","09e3c20e":"## Percentages of men and women who lived and died from heart failure with having diabetes\n","4e628292":"# Visualizations of categorical variables with their probability densities ","d1983654":"## Serum Creatinine does not look normal and does not have a large enough pvalue to go with the null hypothesis that the data is normal","acb0cac1":"# Time to create and train some machine learning models to see how well we can predict heart failure","30a040e7":"### 299 entries, 13 features","27f60803":"## Let's say what our target variable is","b111056b":"## No missing values, but whats the size of the data?","cede3061":"# Categorical Columns","b2ddb026":"## Platelets does not look normal and does not have a large enough pvalue to go with the null hypothesis that the data is normal","ca5d09f8":"## Percentages of survival rate amongst men and women who have high blood pressure","95ec1437":"## Percentages of survival rate amongst men and women who are anaemic","879870e1":"# Support Vector Machine accuracy 87%","59ac51bf":"# Basic statistics about the data before any removal of outliers is done","05711eeb":"## Creatinine Phosphokinase does not look normal and does not have a large enough pvalue to go with the null hypothesis that the data is normal","869d5041":"# Percentages of men and women who lived and died from heart failure","ebd3b48f":"## Ejection Fraction does not look normal and does not have a large enough pvalue to go with the null hypothesis that the data is normal","357de3ae":"# Neural Network accuracy 82%","bccbe1e4":"# Decision Tree's accuracy 73%","321ede75":"# Visualizations of the continuous variables","bbbef79e":"# Statistical Analysis ","7fd6b810":"# Logistic Regression 80% accuracy!","73cfbeea":"# K Nearest Neighbors classifier accuracy 76%","23500693":"# Continuous Columns"}}