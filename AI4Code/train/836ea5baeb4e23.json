{"cell_type":{"0322165c":"code","440450eb":"code","798e8da4":"code","202d3f7b":"code","f9dd2f45":"code","db8b4c96":"code","7c69d795":"code","338d835d":"code","a71d2561":"code","7adb6b6c":"code","d9029f4e":"code","81e2d051":"code","5d274c2e":"code","e80884ab":"code","b0ef37e8":"code","2a98980d":"code","fac29e39":"code","22849648":"code","a66afb2f":"code","e02112ec":"code","f3960331":"code","d7220598":"code","23780e10":"code","e14f6928":"code","2a55e03f":"code","0a7418ce":"code","5f6d6f44":"code","84d2e205":"code","a1ce624a":"code","5c412123":"markdown","ac573bf6":"markdown","df2760ab":"markdown","a3267f5a":"markdown","c852332c":"markdown","3e93631e":"markdown","496548ca":"markdown"},"source":{"0322165c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","440450eb":"!pip install pmdarima","798e8da4":"import numpy as np\nimport pandas as pd\n\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (20,3)\nimport pandas_datareader as web\nimport datetime as dt\nplt.style.use('ggplot') \n# Above is a special style template for matplotlib, highly useful for visualizing time series data\n%matplotlib inline\nfrom plotly import tools\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf","202d3f7b":"df=pd.read_csv('..\/input\/reliance-nse-stock-data\/RILO - Copy.csv')\ndf.head()","f9dd2f45":"df = df.dropna()","db8b4c96":"df['Date'] = pd.to_datetime(df['Date'])","7c69d795":"#Check for Null Values\ndf.isnull().sum().sum()","338d835d":"# Plot the Closing Point Figure\nfig = go.Figure()\n\nfig = make_subplots(rows=2, cols=1,subplot_titles=(\"RELIND NSE Candlestick Chart\",\"RELIND NSE Volume\"))\nfig.append_trace(go.Scatter(x=df['Date'], y=df['Close Price'],\n                    mode='lines',\n                    name='lines'),row=1,col=1)\n\nfig.append_trace(go.Scatter(x=df['Date'], y=df['Total Traded Quantity'],\n                    mode='lines',\n                    name='lines'),row=2,col=1)\n\nfig.update_layout(title=\"RELIND NSE Exploratory Data Analysis\",\n    xaxis_title=\"Price\",\n        yaxis_title=\"Time Period\",height=800)\n\n\nfig.show()","a71d2561":"# Plot the Candlestick Chart\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                open=df['Open Price'],\n                high=df['High Price'],\n                low=df['Low Price'],\n                close=df['Close Price'])])\nfig.update_layout(title=\"RELIND NSE Candlestick Graph\",\n    xaxis_title=\"Price\",\n        yaxis_title=\"Time Period\")\n\nfig.show()","7adb6b6c":"#Create Rolling Means for The Stock Data\ntenDay = df['Close Price'].rolling(10).mean()\ntwentyDay = df['Close Price'].rolling(20).mean()\nfiftyDay = df['Close Price'].rolling(50).mean()\nEMA20Day = df['Close Price'].ewm(span=20,adjust=False).mean()\nEMA200Day = df['Close Price'].ewm(span=200,adjust=False).mean()\n\ndf['tenDay'] = tenDay\ndf['twentyDay'] = twentyDay\ndf['fiftyDay'] = fiftyDay\ndf['EMA20Day'] = EMA20Day\ndf['EMA200Day'] = EMA200Day\n\n\nfig = go.Figure()\n# Create and style traces\nfig.add_trace(go.Scatter(x=df['Date'], y=df['Close Price'], name='Actual Close Price',\n                         line=dict(color='#489ac7', width=1.5)))\nfig.add_trace(go.Scatter(x=df['Date'], y=df['tenDay'], name='Ten Day Rolling Mean ',\n                         line=dict(color='#f79763', width=1)))\nfig.add_trace(go.Scatter(x=df['Date'], y=df['twentyDay'], name='Twenty Day Rolling Mean ',\n                         line=dict(color='#b563f7', width=1)))\nfig.add_trace(go.Scatter(x=df['Date'], y=df['fiftyDay'], name='Fifty Day Rolling Mean ',\n                         line=dict(color='#f76386', width=1)))\nfig.add_trace(go.Scatter(x=df['Date'], y=df['EMA20Day'], name='EMA Twenty Days ',\n                         line=dict(color='#3bffa0', width=2)))\nfig.add_trace(go.Scatter(x=df['Date'], y=df['EMA200Day'], name='EMA TwoHundred Days ',\n                         line=dict(color='#36074a', width=1.5)))\n\nfig.update_layout(title=\"RELIND NSE Moving Averages\",\n    xaxis_title=\"Price\",\n        yaxis_title=\"Time Period\")","d9029f4e":"#draw a quick correlation plot (drop time as a feature)\n#also realise that it does not provide much information, now that we already know it is a time series\ncorrelation_df = df.copy()\ncorrelation_df = correlation_df.drop(columns =['Symbol','Series','Date'])\ncorr = correlation_df.corr()\n\n\nfig = go.Figure(data=[go.Heatmap(z=corr.values,\n                  x=corr.index.values,\n                  y=corr.columns.values)])\nfig.update_layout(title=\"Correlation Heatmap\",height=600,width=800)\nfig.show()","81e2d051":"# Partial Auto Correlation Plot\nplot_pacf(df[\"Close Price\"],lags=45,title=\"Partial AutoCorrelation Plot with RELIND NSE Close Price\")\nplt.figure()\nplt.show()","5d274c2e":"# Original Series\nfig, axes = plt.subplots(3, 2, sharex=True)\naxes[0, 0].plot(df[\"Close Price\"]); axes[0, 0].set_title('Original Series')\nplot_acf(df[\"Close Price\"], ax=axes[0, 1])\n\n# 1st Differencing\naxes[1, 0].plot(df[\"Close Price\"].diff()); axes[1, 0].set_title('1st Order Differencing')\nplot_acf(df[\"Close Price\"].diff().dropna(), ax=axes[1, 1])\n\n# 2nd Differencing\naxes[2, 0].plot(df[\"Close Price\"].diff().diff()); axes[2, 0].set_title('2nd Order Differencing')\nplot_acf(df[\"Close Price\"].diff().diff().dropna(), ax=axes[2, 1])\nfig.set_size_inches(15, 15)\nplt.show()","e80884ab":"# Augmented Dickey Fuller Test, in order to check if the time series is stationary.\n# Null Hypothesis means that the data is not stationary.\n# Alternate Hypothesis means that the data is stationary \ndef stationaryTest(dataframe):\n    adft = adfuller(dataframe,autolag='AIC')\n    labelsADF= ['Test Statistics','p-value','No. of lags used','Number of observations used']\n    for values,labels in zip(adft,labelsADF):\n        print (labels + \" : \" + str(values))\n    if (adft[1]<= 0.05):\n        print(\"Reject the Null Hypothesis. Data is Stationary\")\n    else:\n        print(\"Accept the Null Hypothesis. The TS is not stationary\")\n        \nstationaryTest(df['Close Price'])","b0ef37e8":"# Decompose Seasonality from the Datas\nresult = seasonal_decompose(df[['Close Price']], model='multiplicative', freq = 42)\nfig = plt.figure()  \nfig = result.plot()  \nfig.set_size_inches(15, 15)","2a98980d":"# Check if the Residual Value is Stationary, if yes then the period\ndf['residualAfterDecomposition']= result.resid\nstationaryTest(df['residualAfterDecomposition'].dropna())","fac29e39":"df['residualAfterDecomposition']=df['residualAfterDecomposition'].dropna()\ndf['residualAfterDecomposition'] = df['residualAfterDecomposition'].reset_index()\ndf['residualAfterDecomposition'] = df['residualAfterDecomposition'].drop(columns='index')","22849648":"df['Close Price']","a66afb2f":"from statsmodels.tsa.arima_model import ARIMA\n\nimport pmdarima as pm\n\nmodel = pm.auto_arima(df['Close Price'], start_p=1, start_q=1,\n                      test='adf',       # use adftest to find optimal 'd'\n                      max_p=100, max_q=100, # maximum p and q\n                      m=45,              # frequency of series\n                      d=None,           # let model determine 'd'\n                      seasonal=True,   # No Seasonality\n                      start_P=0, \n                      D=0, \n                      trace=True,\n                      error_action='ignore',  \n                      suppress_warnings=True, \n                      stepwise=True)\n\nprint(model.summary())","e02112ec":"model.plot_diagnostics(figsize=(10,8))\nfig.set_size_inches(15, 15)\nplt.show()","f3960331":"# Forecast\nn_periods = 45\nfc, confint = model.predict(n_periods=n_periods, return_conf_int=True)\nindex_of_fc = np.arange(len(df['Close Price']), len(df['Close Price'])+n_periods)\n\n# make series for plotting purpose\nfc_series = pd.Series(fc, index=index_of_fc)\nlower_series = pd.Series(confint[:, 0], index=index_of_fc)\nupper_series = pd.Series(confint[:, 1], index=index_of_fc)\n\n# Plot\nplt.rcParams[\"figure.figsize\"] = (20,10)\nplt.plot(df['Close Price'])\nplt.plot(fc_series, color='darkgreen')\nplt.fill_between(lower_series.index, \n                 lower_series, \n                 upper_series, \n                 color='k', alpha=.15)\n\nplt.title(\"Final Forecast of Usage\")","d7220598":"from sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nimport tensorflow as tf\nfrom keras.layers import Dense, LSTM, Dropout\nimport math\nfrom sklearn.metrics import mean_squared_error","23780e10":"data = df.filter(['Close Price'])\n# Select the Close Price as the feature\ndataset = data.values\n# Get the Values\ntraining_data_len = math.ceil(len(dataset) * .9)\n# Cut 20% into the validation dataset","e14f6928":"scaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(dataset)\n# Scale the Dataset","2a55e03f":"def splitting(period,data):\n    scaled_data = data\n    period = period\n    \n    ## Initialize variables #########\n    train_data = scaled_data[0:training_data_len, :]\n    test_data = scaled_data[training_data_len - period: , :]\n    x_train = []\n    y_train = []\n    x_test = []\n    y_test = dataset[training_data_len:, :]\n    \n    # Take old \"PERIOD\" day close price as the feature, and keep y as the label\n    # Apparently, using a \"period\" prior data, being the x, the y will be the future data.\n    for i in range(period, len(train_data)):\n        x_train.append(train_data[i-period:i, 0])\n        y_train.append(train_data[i, 0])\n    for i in range (period, len(test_data)):\n        x_test.append(test_data[i - period:i, 0])   \n\n \n    x_train, y_train = np.array(x_train), np.array(y_train)\n    x_test = np.array(x_test)\n    # We need to keep a shape similar to (N_samples, Rolling Window Size , No of Features)\n    x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n    x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))       \n    return x_train,y_train,x_test,y_test\n\nx_train,y_train,x_test,y_test = splitting(100,scaled_data)","0a7418ce":"model = Sequential()\nmodel.add(LSTM(50, return_sequences = True, input_shape = (x_train.shape[1], x_train.shape[2])))\n#model.add(Dropout(0.2))\nmodel.add(LSTM(50, return_sequences = False))\n#model.add(Dropout(0.2))\n#model.add(LSTM(units=50, return_sequences=True))\n#model.add(Dropout(0.2))\n#model.add(LSTM(units=50, return_sequences=False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))\nmodel.compile(optimizer = 'adam', loss = 'mean_squared_error')\nmodel.fit(x_train, y_train, batch_size = 1, epochs = 1)","5f6d6f44":"'''test_data = scaled_data[training_data_len - 60: , :]\nx_test = []\ny_test = dataset[training_data_len:, :]\n\nfor i in range (60, len(test_data)):\n    x_test.append(test_data[i - 60:i, 0])\n\nx_test = np.array(x_test)\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n\npredictions = model.predict(x_test)\npredictions = scaler.inverse_transform(predictions)\n\nrsme = np.sqrt(np.mean(predictions - y_test) ** 2)\nrsme'''","84d2e205":"predictions = model.predict(x_test)\npredictions = scaler.inverse_transform(predictions)\nrmse = np.sqrt(np.mean(predictions - y_test) ** 2)   ","a1ce624a":"print(\"Click and drag on the plot to zoom in, you can reset using the top right option\")\n\ntrain = data[:training_data_len]\nvalid = data[training_data_len:]\nvalid['Predictions'] = predictions\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x = valid.index, y = valid['Close Price'],\n                    mode='lines',\n                    name='Val',\n                    marker_color = '#FF7F0E'))\nfig.add_trace(go.Scatter(x = valid.index, y = valid.Predictions,\n                    mode='lines',\n                    name='Predictions',\n                    marker_color = '#2CA02C'))\n\nfig.update_layout(\n    title='Model', titlefont_size = 28, hovermode = 'x',\n    xaxis = dict(\n        title='Date',\n        titlefont_size=16,\n        tickfont_size=14),\n    \n    height = 800,\n    \n    yaxis=dict(\n        title='Close price in INR (\u20b9)',\n        titlefont_size=16,\n        tickfont_size=14),\n    legend=dict(\n        y=0,\n        x=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'))\n\nfig.show()","5c412123":"## Predict the Future Values using Auto ARIMA","ac573bf6":"## PART 1 - EDA","df2760ab":"THIS PROJECT HAS BEEN ABANDONED BECAUSE OF REASONS MENTIONED IN THE FOLLOWING VIDEO - \nhttps:\/\/www.youtube.com\/watch?v=Vfx1L2jh2Ng&ab_channel=LazyProgrammer.\nkindly do not follow this code, as it was something I tried while learniNG lstm's and SHOULD NOT BE USED FOR STOCK MARKET PREDICTION","a3267f5a":"## PART 2 - Time Series Analysis","c852332c":"# Stock Price Prediction for RELIND stock\nThe first thing I did after I recieved my first salary? I invested a 10K directly to the RELIND stock and well...... I faced loss. \nSo well, in this notebook, I would want to perhaps try and predict the future?","3e93631e":"Solution Inspired from -> https:\/\/www.kaggle.com\/adrianmcmahon\/reliance-future-prediction-of-close-price-lstm","496548ca":"## Stock Price Prediction using LSTM"}}