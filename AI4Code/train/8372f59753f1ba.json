{"cell_type":{"221ddb4f":"code","c3d3c009":"code","623ed71f":"code","dd92c762":"code","4358fcf5":"code","928af8a0":"code","8220568f":"code","7e63057f":"code","7d9c28c8":"code","9d51d536":"code","bd273a20":"code","40e6b7b7":"code","9e6e3979":"markdown","edab2602":"markdown","330682b7":"markdown"},"source":{"221ddb4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns #visualization\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c3d3c009":"import cudf, cuml\nimport cupy as cp\n\nfrom cuml.manifold import TSNE, UMAP\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import ylim, xlim\n%matplotlib inline","623ed71f":"#Code by Rawwar https:\/\/www.kaggle.com\/rawwar\/eda-pandas-profile-based-conclusions\ndf = pd.read_csv(\"..\/input\/activity-recognition-data\/lying\/dataset4.csv\",skiprows=4, delimiter=',')\ndf.head()","dd92c762":"columns = df.columns\ncolumns","4358fcf5":"df[columns].head()","928af8a0":"%%time\ntsne = TSNE(n_components=2)\ndf_2D = tsne.fit_transform(df[columns].values)","8220568f":"plt.scatter(df_2D[:,0], df_2D[:,1], c=df['# Columns: time'].values, s = 0.8)","7e63057f":"%%time\numap = UMAP(n_components=2)\ndf_2D = umap.fit_transform(df[columns].values)","7d9c28c8":"plt.scatter(df_2D[:,0], df_2D[:,1], c=df['# Columns: time'].values, s = 0.8)","9d51d536":"plt.scatter(df_2D[:,0], df_2D[:,1], c=df['avg_rss13'].values, s = 0.8)","bd273a20":"plt.scatter(df_2D[:,0], df_2D[:,1], c=df['var_rss13'].values, s = 0.8)","40e6b7b7":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Thanks Bojan Tunguz for the script' )","9e6e3979":"# **<span style=\"color:#7B68EE;\">UMAP: Uniform Manifold Approximation and Projection for Dimension Reduction<\/span>**\n\nUniform Manifold Approximation and Projection (UMAP) is a dimension reduction technique that can be used for visualisation similarly to t-SNE, but also for general non-linear dimension reduction. The algorithm is founded on three assumptions about the data\n\nThe data is uniformly distributed on Riemannian manifold;\n\nThe Riemannian metric is locally constant (or can be approximated as such);\n\nThe manifold is locally connected.\n\nhttps:\/\/umap-learn.readthedocs.io\/en\/latest\/","edab2602":"#Code by Bojan Tunguz https:\/\/www.kaggle.com\/tunguz\/tps-apr-21-tsne-and-umap-embeddings-with-rapids\/notebook","330682b7":"![](https:\/\/miro.medium.com\/max\/1970\/1*pi5lKwCFkLrl7EcqvxeJ8w.png)towardsdatascience.com"}}