{"cell_type":{"b5cec9b1":"code","9530ff79":"code","8b51067a":"code","331d79db":"code","6f16d4ae":"code","5fa80cd5":"code","9134f7be":"code","08424857":"code","b87398ff":"code","45c28d42":"code","e05e0b0a":"code","5bac6ca5":"code","656f608e":"code","121918d2":"code","f67378b0":"code","062bf621":"code","e204f345":"code","aa2c2f91":"code","e85fad6f":"code","feba3673":"markdown","540f033c":"markdown","275bb983":"markdown"},"source":{"b5cec9b1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","9530ff79":"input_dir = '..\/input\/m5-forecasting-accuracy\/'\ncal = pd.read_csv(f'{input_dir}calendar.csv')\nsales_tv = pd.read_csv(f'{input_dir}sales_train_validation.csv')\nsell_p = pd.read_csv(f'{input_dir}sell_prices.csv')\n","8b51067a":"cal.head()","331d79db":"sales_tv.head()\n","6f16d4ae":"sell_p.head()\n","5fa80cd5":"sns.heatmap(cal.isnull(),xticklabels= False,yticklabels = False,cmap ='coolwarm')","9134f7be":"len(sales_tv['item_id'].unique())","08424857":"d_cols = [c for c in sales_tv.columns if 'd_' in c]\nsales_tv.loc[sales_tv['id']=='HOBBIES_1_001_CA_1_validation']\\\n.set_index('id')[d_cols]\\\n.T\\\n.plot(figsize=(15,4)\n     ,title = 'HOBBIES_1_001_CA_1_validation')\nplt.legend('')\n\n\n    \n\n","b87398ff":"cal[['d','date','event_name_1','event_name_2',\n     'event_type_1','event_type_2', 'snap_CA']].head()","45c28d42":"example = sales_tv.loc[sales_tv['id'] == 'FOODS_3_090_CA_3_validation'][d_cols].T\nexample = example.rename(columns={8412:'FOODS_3_090_CA_3'})\nexample = example.reset_index().rename(columns={'index': 'd'}) \nexample = example.merge(cal, how='left', validate='1:1')\nexample.set_index('date')['FOODS_3_090_CA_3'] \\\n    .plot(figsize=(15, 5),\n          title='FOODS_3_090_CA_3 sales by actual sale dates')\nplt.show()\n\n\nexample2 = sales_tv.loc[sales_tv['id'] == 'HOBBIES_1_234_CA_3_validation'][d_cols].T\nexample2 = example2.rename(columns={6324:'HOBBIES_1_234_CA_3'}) \nexample2 = example2.reset_index().rename(columns={'index': 'd'}) \nexample2 = example2.merge(cal, how='left', validate='1:1')\n\nexample3 = sales_tv.loc[sales_tv['id'] == 'HOUSEHOLD_1_118_CA_3_validation'][d_cols].T\nexample3 = example3.rename(columns={6776:'HOUSEHOLD_1_118_CA_3'}) \nexample3 = example3.reset_index().rename(columns={'index': 'd'}) \nexample3 = example3.merge(cal, how='left', validate='1:1')","e05e0b0a":"examples = ['FOODS_3_090_CA_3','HOBBIES_1_234_CA_3','HOUSEHOLD_1_118_CA_3']\nexample_df = [example, example2, example3]\nfor i in [0,1,2]:\n    fig , (ax1, ax2,ax3) = plt.subplots(1,3,figsize=(15,4))\n    example_df[i].groupby('wday').mean()[examples[i]]\\\n    .plot(kind = 'line',\n         title = 'average sales : day of week',\n         linewidth=4,\n         color = 'brown',\n         ax = ax1)\n    example_df[i].groupby('month').mean()[examples[i]]\\\n    .plot(kind = 'line',\n         title = 'average sales : month',\n         linewidth=5,\n         color = 'blue',\n         ax = ax2)\n    example_df[i].groupby('wday').mean()[examples[i]]\\\n    .plot(kind = 'line',\n         title = 'average sales :year',\n         linewidth=5,\n         color = 'red',\n         ax = ax3)\n    fig.suptitle(f'trends of :{examples[i]}',\n                size = 20,\n                 y= 1.1\n                 \n                )\n    plt.tight_layout()\n    plt.show()","5bac6ca5":"twenty_examples = sales_tv.sample(20, random_state=529) \\\n        .set_index('id')[d_cols] \\\n    .T \\\n    .merge(cal.set_index('d')['date'],\n           left_index=True,\n           right_index=True,\n            validate='1:1') \\\n    .set_index('date')","656f608e":"fig, axs = plt.subplots(10, 2, figsize=(15, 20))\naxs = axs.flatten()\nax_idx = 0\nfor item in twenty_examples.columns:\n    twenty_examples[item].plot(title=item,\n\n                              ax=axs[ax_idx])\n    ax_idx += 1\nplt.tight_layout()\nplt.show()","121918d2":"sales_tv['cat_id'].unique()","f67378b0":"sales_tv.groupby('cat_id').count()['id']\\\n   .sort_values()\\\n   .plot(kind = 'barh',figsize=(15,6))\\\n   \n","062bf621":"past_sales = sales_tv.set_index('id')[d_cols] \\\n    .T \\\n    .merge(cal.set_index('d')['date'],\n           left_index=True,\n           right_index=True,\n            validate='1:1') \\\n    .set_index('date')\n\n\nfor i in sales_tv['cat_id'].unique():\n    items_col = [c for c in past_sales.columns if i in c]\n    past_sales[items_col] \\\n        .sum(axis=1) \\\n        .plot(figsize=(15, 5),\n              alpha=0.8,\n              title='Total Sales by Item Type')\nplt.legend(sales_tv['cat_id'].unique())\nplt.show()","e204f345":"past_sales_clipped = past_sales.clip(0,1)\nfor i in sales_tv['cat_id'].unique():\n    items_col = [c for c in past_sales.columns if i in c]\n    (past_sales_clipped[items_col] \\\n        .mean(axis=1) * 100) \\\n        .plot(figsize=(15, 5),\n              alpha=0.8,\n              title='Inventory Sale Percentage by Date',\n              style='.')\n    plt.ylabel('% of inventory with atleast 1 sale')\n    plt.legend(sales_tv['cat_id'].unique())\n    ","aa2c2f91":"store_list = sell_p['store_id'].unique()\nfor s in store_list:\n    store_items = [c for c in past_sales.columns if s in c]\n    past_sales[store_items] \\\n        .sum(axis=1) \\\n        .rolling(90).mean() \\\n        .plot(figsize=(15, 5),\n              alpha=0.8,\n              title='Rolling 90 Day Average Total Sales (10 stores)')\nplt.legend(store_list)","e85fad6f":"sell_p['Category'] = sell_p['item_id'].str.split('_', expand=True)[0]\nfig, axs = plt.subplots(1, 3, figsize=(15, 4))\ni = 0\nfor cat, d in sell_p.groupby('Category'):\n    ax = d['sell_price'].apply(np.log1p) \\\n        .plot(kind='hist',\n                         bins=20,\n                         title=f'Distribution of {cat} prices',\n                         ax=axs[i]\n                                         )\n    ax.set_xlabel('Log(price)')\n    i += 1\nplt.tight_layout()","feba3673":"X axis labels are not easy for the naive users to understand so we merge the x axis labels with the real dates so its easy to understand and we can find weekly and annual trends.","540f033c":"Observing the sales of every items .","275bb983":"**References : https:\/\/www.kaggle.com\/robikscube\/m5-forecasting-starter-data-exploration**"}}