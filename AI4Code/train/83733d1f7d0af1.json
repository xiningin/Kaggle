{"cell_type":{"1e167b9d":"code","924d9a1f":"code","dd7db8dc":"code","9cd72e48":"code","1be4a88d":"code","b1408e7d":"code","d2ccd144":"code","1aa03b92":"code","25871d26":"code","ddb50a2f":"code","bca59964":"code","5e3f4584":"code","363efbcf":"code","75d48142":"code","d77e0d93":"code","c60a79d8":"code","481f9c84":"code","4fe82e2c":"code","217defcb":"code","1095f4b4":"code","4ebeacfa":"markdown"},"source":{"1e167b9d":"import numpy as np\nimport pandas as pd\nimport time\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout\n \n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\nsns.set(context='notebook',\n        style='whitegrid',\n        palette='deep',\n        font='sans-serif',\n        font_scale=1,\n        color_codes=True,\n        rc=None)","924d9a1f":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","dd7db8dc":"train_dataset = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntrain_dataset.head(3)","9cd72e48":"test_dataset = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntest_dataset.head(3)","1be4a88d":"X_train, y_train = np.array(train_dataset.iloc[:,1:]), np.array(train_dataset.label)\ntest_data = np.array(test_dataset)","b1408e7d":"print(X_train.shape)\nprint(y_train.shape)\nprint(test_data.shape)","d2ccd144":"num_classes = len(np.unique(y_train))\nX_train = X_train.reshape(42000, 28,28, 1)\ny_train = (y_train).astype(int).reshape(42000, 1)\n\n\ntest_data = test_data.reshape(28000, 28, 28, 1)\n\ny_train = keras.utils.to_categorical((y_train).astype(int), 10)","1aa03b92":"val_test = int(X_train.shape[0] * 0.20)\nX_test = X_train[:val_test]\nX_train = X_train[val_test:]\ny_test = y_train[:val_test]\ny_train = y_train[val_test:]","25871d26":"print('No. of classes = '+str(num_classes))\nprint('\\n')\nprint('Train Data: '+str(X_train.shape))\nprint('Val Data: '+str(X_test.shape))\nprint('\\n')\nprint('Train Label: '+str(y_train.shape))\nprint('Val Label: '+str(y_test.shape))\nprint('\\n')\nprint('Test Data: '+str(test_data.shape))","ddb50a2f":"plt.imshow(X_train[100].reshape(28,28))\nplt.show()","bca59964":"input_shape = X_train[0].shape\n\nmodel = Sequential(name=\"Conv2D_Model\")\n\nmodel.add(Conv2D(input_shape=input_shape, filters=32, kernel_size=(3,3), activation='relu'))\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\n\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(64, kernel_size=(3,3), activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(128, kernel_size=(3,3), activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(1000, activation=\"relu\"))\nmodel.add(Dense(1000, activation=\"relu\"))\nmodel.add(Dense(1000, activation=\"relu\"))\nmodel.add(Dense(1000, activation=\"relu\"))\nmodel.add(Dense(1000, activation=\"relu\"))\nmodel.add(Dense(num_classes, activation=\"softmax\"))\n\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])","5e3f4584":"model.summary()","363efbcf":"keras.utils.plot_model(model, show_shapes=True, rankdir=\"TB\",expand_nested=True, dpi=100)","75d48142":"from tensorflow.keras.callbacks import EarlyStopping\n\nearly_stop = EarlyStopping(monitor='val_loss',\n                        min_delta=0,\n                        patience=30,\n                        verbose=1,  \n                        mode='auto',\n                        baseline=None,  \n                                               \n                        restore_best_weights=False)","d77e0d93":"hist = model.fit(X_train, y_train,\n            batch_size=50,\n            epochs=500,\n            verbose=1,\n            callbacks=[early_stop],\n            validation_split=0.2,\n            validation_data=[X_train, y_train],\n            shuffle=True,\n            class_weight=None,\n            sample_weight=None,\n            initial_epoch=0,\n            steps_per_epoch=None,\n            validation_steps=None,\n            validation_batch_size=None,\n            validation_freq=1,\n            max_queue_size=10,\n            workers=1)","c60a79d8":"print(hist.history.keys())","481f9c84":"performance = pd.DataFrame(model.history.history)","4fe82e2c":"print(min(performance.loss))\nprint(min(performance.val_loss))\nprint('\\n')\nprint(max(performance.accuracy))\nprint(max(performance.val_accuracy))\n","217defcb":"plt.rcParams[\"figure.dpi\"] = 100\nperformance.plot(figsize=(10,5))\nplt.title('Losses')\nplt.show()","1095f4b4":"y_pred = model.predict_classes(test_data)\n\npredictions=pd.DataFrame({\"ImageId\": list(range(1,len(y_pred)+1)),\n                         \"Label\": y_pred})\n\n","4ebeacfa":"## Preparing the data set to fit in the model"}}