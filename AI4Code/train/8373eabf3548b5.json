{"cell_type":{"89368416":"code","f1e2bd2a":"code","20a67c3d":"code","c23eb1ae":"code","2c364b40":"code","624cf0a3":"code","a9d85404":"code","4742ec26":"code","d84da15a":"code","903dc22c":"code","26178fb3":"code","c8b1d30a":"code","11d534f9":"code","e25cb1ea":"code","890e2413":"code","c161183e":"code","190c13b4":"code","3e862f6f":"code","27b31927":"code","7eefa92c":"code","722f8a10":"code","246d5c8b":"code","fa11f347":"code","3c957f9f":"code","38f65fcc":"markdown","bd317df3":"markdown","fd24172a":"markdown","626672aa":"markdown","b687035f":"markdown","09c172e2":"markdown","283332f6":"markdown","67e6e710":"markdown","2d53d0b2":"markdown","fe8b5bcb":"markdown","22a3194e":"markdown","501efd86":"markdown","2ad443a9":"markdown","6cd04f7f":"markdown","c5ec66b0":"markdown"},"source":{"89368416":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pyarrow.parquet as pq\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f1e2bd2a":"PARENT_DATA_DIR_PATH = '..\/input'\nMETADATA_TRAIN_FILE_PATH = os.path.join(PARENT_DATA_DIR_PATH, \"metadata_train.csv\")\nTRAIN_DATA_FILE_PATH = os.path.join(PARENT_DATA_DIR_PATH, \"train.parquet\")","20a67c3d":"metadata_train = pd.read_csv(METADATA_TRAIN_FILE_PATH)\nprint(\"#samples:\", len(metadata_train))\nmetadata_train.head(15)","c23eb1ae":"metadata_train.target.value_counts()\/3","2c364b40":"# traindataDF = pq.read_pandas(TRAIN_DATA_FILE_PATH).to_pandas()\n# traindataDF.info()","624cf0a3":"traindataDFsample = pq.read_pandas(TRAIN_DATA_FILE_PATH, columns=[str(i) for i in range(15)]).to_pandas()          \ntraindataDFsample.info()","a9d85404":"traindataDFsample.describe()","4742ec26":"traindataDFsample.tail(10)","d84da15a":"traindataDFsample.iloc[:,:3].plot(title=\"3 phase, Target 0\", figsize=(15,5));","903dc22c":"traindataDFsample.iloc[:,3:6].plot(title=\"3 phase, Target 1\", figsize=(15,5));","26178fb3":"traindataDFsample.iloc[:,0].plot(title=\"phase 0, Target 0\", figsize=(15,5));","c8b1d30a":"traindataDFsample.iloc[:,3].plot(title=\"phase 0, Target 1\", figsize=(15,5));","11d534f9":"target0df = metadata_train[metadata_train['target'] == 0]\ntarget1df = metadata_train[metadata_train['target'] == 1]\nprint(\"target0data shape:\", target0df.shape)\nprint(\"target1data shape:\", target1df.shape)","e25cb1ea":"nSamples = 30","890e2413":"target0samplecols = [str(i) for i in list(target0df.iloc[:nSamples].signal_id)]\ntarget0sampledata = pq.read_pandas(TRAIN_DATA_FILE_PATH, columns=target0samplecols).to_pandas()\ntarget0sampledata.plot(title=\"Target 0\", figsize=(15,10))","c161183e":"target1samplecols = [str(i) for i in list(target1df.iloc[:nSamples].signal_id)]\ntarget1sampledata = pq.read_pandas(TRAIN_DATA_FILE_PATH, columns=target1samplecols).to_pandas()\ntarget1sampledata.plot(title=\"Target 1\", figsize=(15,10))","190c13b4":"sample = traindataDFsample.iloc[:,3]\nsample.shape","3e862f6f":"def reduce_sample(_sample, avgOver=8):\n    preVal = 0\n    processed_sample_list = []\n    for index in range(avgOver, _sample.shape[0]+avgOver, avgOver):\n        tmpdf = _sample.iloc[preVal:index]\n        avgVal = tmpdf.sum()\/avgOver\n        processed_sample_list.append(avgVal)\n        preVal = index\n    return pd.Series(processed_sample_list)\nprocessed_sample = reduce_sample(sample, 8)\nprocessed_sample.shape","27b31927":"processed_sample.plot(title=\"reduced sample\", figsize=(15,5))","7eefa92c":"# TARGET 0 (UNDAMAGED) SAMPLES\nreducedtarget0sampleDF = pd.DataFrame()\nfor col in range(target0sampledata.shape[1]):\n    tmp_pdSeries = reduce_sample(target0sampledata.iloc[:,col])\n    reducedtarget0sampleDF[str(col)] = tmp_pdSeries\nreducedtarget0sampleDF.shape","722f8a10":"# TARGET 1 (FAULT) SAMPLES\nreducedtarget1sampleDF = pd.DataFrame()\nfor col in range(target1sampledata.shape[1]):\n    tmp_pdSeries = reduce_sample(target1sampledata.iloc[:,col])\n    reducedtarget1sampleDF[str(col)] = tmp_pdSeries\nreducedtarget1sampleDF.shape","246d5c8b":"reducedtarget0sampleDF.plot(title=\"Reduced target 0\", figsize=(15,10))","fa11f347":"reducedtarget1sampleDF.plot(title=\"Reduced target 1\", figsize=(15,10))","3c957f9f":"reducedtarget1sampleDF.iloc[:,0].plot(title=\"Reduced target 1 single signal\", figsize=(15,5))","38f65fcc":"Above table shows that 3 phases have same target of each signal.\nThat means if one phase is damaged, others follow.\nSo, each class's total signal_ids should be the multiple of 3 as shown below.","bd317df3":"### Paths to data and metadata","fd24172a":"#### Load some target 1 (fault) signals and visualize","626672aa":"#### BIG DATA FILE!! RAM USAGE: 7.9GB on ubuntu\n(uncomment below cell to load full data)","b687035f":"### Train metadata","09c172e2":"### Apply reduction on some samples and visualize the results","283332f6":"#### Load some target 0 (undamaged) signals and visualize","67e6e710":"### Load train data","2d53d0b2":"### Reduce values per colm by averaging over 8\nIt'll help reducing the computation without throwing any information","fe8b5bcb":"### Plot 3 phase signals with target","22a3194e":"### Plotting 0 phase with target 0 and 1","501efd86":"### Group signals metadata accroding to target","2ad443a9":"#### Below cell loads sample data","6cd04f7f":"Title:  Power line fault detection EDA and pre processing  \nData: https:\/\/www.kaggle.com\/c\/vsb-power-line-fault-detection  \nAuthor: [Virksaab](https:\/\/www.kaggle.com\/virksaab)  \nDate:   28 December, 2018","c5ec66b0":"    Target:\n        0 : undamaged\n        1 : fault"}}