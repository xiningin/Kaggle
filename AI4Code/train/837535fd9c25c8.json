{"cell_type":{"f0c6de24":"code","762819a7":"code","4f55a717":"code","fe4860e0":"code","8e759430":"code","e342040a":"code","7766256b":"code","9672e7fc":"code","091d9e0a":"code","b76f0cff":"code","0eb1a61f":"code","784bb605":"code","34e95699":"code","e1b1408c":"code","07bd470d":"code","61ecad53":"code","872f316f":"markdown","4f1ffcb2":"markdown","f3d77892":"markdown","8a5a7f5d":"markdown","e5aa378f":"markdown","bb689e81":"markdown","6e515f17":"markdown","022a8ead":"markdown","c080bce2":"markdown","4d93826a":"markdown","487713a8":"markdown","2960d846":"markdown","58527b27":"markdown"},"source":{"f0c6de24":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","762819a7":"import struct\nimport numpy as np\nimport tensorflow as tf\nfrom keras.layers import Conv2D\nfrom keras.layers import Input\nfrom keras.layers import BatchNormalization\nfrom keras.layers import LeakyReLU\nfrom keras.layers import Flatten,Dense,Dropout\nfrom keras.layers import UpSampling2D,Activation,LeakyReLU,MaxPooling2D,Normalization,SeparableConv2D\nfrom keras.layers.merge import add, concatenate\nfrom keras.models import Model,Sequential\nimport keras.losses\nimport matplotlib.pyplot as plt\nimport cv2\nfrom keras.preprocessing import image as im","4f55a717":"test ='\/kaggle\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/test'\ntrain= '\/kaggle\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/train'","fe4860e0":"from keras.preprocessing.image import ImageDataGenerator\n\n\nnew = ImageDataGenerator(rescale = 1.0\/255.0,\n                         horizontal_flip = True,\n                         zoom_range =.2,\n                         shear_range = 0.2,\n                         width_shift_range=0.01, \n                         height_shift_range=0.01 \n                              \n                         )\n\ntrain = new.flow_from_directory(train,target_size=(224,224),class_mode='binary',color_mode='grayscale',batch_size=32)\nvalid = ImageDataGenerator(rescale = 1.0\/255.0).flow_from_directory(test,target_size=(224,224),class_mode='binary',color_mode='grayscale',batch_size=32)\n","8e759430":"model = Sequential()\n\nmodel.add(Conv2D(64, (3,3), kernel_initializer = 'he_uniform',activation='LeakyReLU', input_shape=(224, 224, 1),padding='same'))\nmodel.add(Conv2D(64,kernel_size=(3,3),strides=(2,2),kernel_initializer = 'he_uniform',activation='LeakyReLU',padding='same'))\nmodel.add(MaxPooling2D(strides=(2,2)))\nmodel.add(Conv2D(128,kernel_size=(3,3),activation='LeakyReLU',padding='same',kernel_initializer = 'he_uniform',))\nmodel.add(Conv2D(128,kernel_size=(3,3),activation='LeakyReLU',padding='same',kernel_initializer = 'he_uniform',))\nmodel.add(MaxPooling2D(strides=(2,2)))\nmodel.add(Conv2D(256,kernel_size=(3,3),activation='LeakyReLU',padding='same',kernel_initializer = 'he_uniform',))\nmodel.add(Conv2D(256,kernel_size=(3,3),activation='LeakyReLU',padding='same',kernel_initializer = 'he_uniform',))\nmodel.add(Conv2D(256,kernel_size=(3,3),activation='LeakyReLU',padding='same',kernel_initializer = 'he_uniform',))\n\nmodel.add(MaxPooling2D(strides=(2,2)))\nmodel.add(Conv2D(512,kernel_size=(3,3),activation='LeakyReLU',padding='same',kernel_initializer = 'he_uniform',))\nmodel.add(Conv2D(512,kernel_size=(3,3),activation='LeakyReLU',padding='same',kernel_initializer = 'he_uniform',))\nmodel.add(Conv2D(512,kernel_size=(3,3),activation='LeakyReLU',padding='same',kernel_initializer = 'he_uniform',))\n\nmodel.add(MaxPooling2D(strides=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(4096,activation='LeakyReLU'))\nmodel.add(Dense(4096,activation='LeakyReLU'))\nmodel.add(Dense(1,activation='sigmoid'))\n\n\nfrom tensorflow.keras.optimizers import Adam,RMSprop,SGD\nmodel.compile(optimizer = SGD(.001),loss='binary_crossentropy',metrics=['accuracy'])","e342040a":"model.summary()","7766256b":"model.fit(train,validation_data=valid,epochs=5,batch_size =5)","9672e7fc":"val = model.evaluate(valid,steps=200)\nprint(val[1])","091d9e0a":"model = Sequential()\n\nmodel.add(SeparableConv2D(64,kernel_size = 3,depthwise_initializer = 'he_uniform',activation='LeakyReLU', input_shape=(224, 224, 1),padding='same'))\nmodel.add(MaxPooling2D(strides=(2,2)))\nmodel.add(SeparableConv2D(128,kernel_size= 3,activation='LeakyReLU',padding='same',depthwise_initializer = 'he_uniform',))\nmodel.add(MaxPooling2D(strides=(2,2)))\nmodel.add(SeparableConv2D(256,kernel_size= 3,activation='LeakyReLU',padding='same',depthwise_initializer = 'he_uniform',))\n\nmodel.add(MaxPooling2D(strides=(2,2)))\nmodel.add(SeparableConv2D(512,kernel_size= 3,activation='LeakyReLU',padding='same',depthwise_initializer = 'he_uniform',))\n\nmodel.add(MaxPooling2D(strides=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(4096,activation='LeakyReLU'))\nmodel.add(Dense(4096,activation='LeakyReLU'))\nmodel.add(Dense(1,activation='sigmoid'))\n\nmodel.summary()\n\nfrom tensorflow.keras.optimizers import Adam,RMSprop,SGD\nmodel.compile(optimizer = Adam(.001),loss='binary_crossentropy',metrics=['accuracy'])","b76f0cff":"model.fit(train,validation_data=valid,epochs=5,batch_size=5)","0eb1a61f":"val = model.evaluate(valid,steps=200)\nprint(val[1])","784bb605":"for i in os.listdir(os.path.join(test,'PNEUMONIA')):\n  locP = im.load_img(test+'\/PNEUMONIA\/'+i, target_size = (224,224), color_mode = 'grayscale')\n  imagePneu = im.img_to_array(locP)\n  imagePneu = tf.expand_dims(imagePneu, axis =0 )\n  predPneumonia =model.predict(imagePneu) \nfor i in os.listdir(os.path.join(test,'NORMAL')):\n  locN = im.load_img(test+'\/NORMAL\/'+i, target_size = (224,224), color_mode = 'grayscale')\n  imageNor = im.img_to_array(locN)\n  imageNor = tf.expand_dims(imageNor, axis =0 )\n  predNormal =model.predict(imageNor)","34e95699":"wrongPneu=[]\nfor i in range(len(predPneumonia)):\n  if predPneumonia != 1:\n    wrongPneu.append(i)\n\nwrongNor=[]\nfor i in range(len(predNormal)):\n  if predNormal != 0:\n    wrongNor.append(i)\n    \nprint(len(wrongPneu),len(wrongNor))","e1b1408c":"locP = []\nlocN = []\nfor i in os.listdir(os.path.join(test,'PNEUMONIA')):\n  locP.append(im.load_img(test+'\/PNEUMONIA\/'+i, target_size = (224,224)))\nfor i in os.listdir(os.path.join(test,'NORMAL')):\n  locN.append(im.load_img(test+'\/NORMAL\/'+i, target_size = (224,224)))\n","07bd470d":"import matplotlib.pyplot as plt\nplt.figure(figsize=(30,30))\nfor i in enumerate(locN):\n  plt.subplot(4,5,i[0]+1)\n  plt.imshow(i[1])\n  plt.xlabel('NORMAL')","61ecad53":"import matplotlib.pyplot as plt\nplt.figure(figsize=(30,30))\nfor i in enumerate(locP):\n  plt.subplot(4,5,i[0]+1)\n  plt.imshow(i[1])\n  plt.xlabel('PNEUMONIA')","872f316f":"### Train model ","4f1ffcb2":"### Evalute model\n","f3d77892":"**VISUALIZATION***","8a5a7f5d":"It's time to fit","e5aa378f":"Paths","bb689e81":"### Second model (Using depthwiseConvolution Layer)","6e515f17":"Import Libraries\n","022a8ead":"Evaluate model","c080bce2":"### But 2nd model took 3s\/step ...  which is faster surprisingly.. at least to me -_- ","4d93826a":"Model ------> Like *VGG16* BUT **slightly** change","487713a8":"Real and Augmented Data ","2960d846":"### Amazing thing just happend here .. the first model took 9-8\/ steps","58527b27":"Lesgoooo\n"}}