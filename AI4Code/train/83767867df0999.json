{"cell_type":{"0a9cf91c":"code","1b18ebcd":"code","c22e218b":"code","963c3a0b":"code","e8b512f9":"code","712c3cbf":"code","ed2455f9":"code","bb307f7a":"code","a9f04a2f":"code","a3ba78c4":"code","51837536":"code","9aafa9c3":"code","08e37abd":"code","8be5ccd4":"code","3357dc4d":"code","1f614f68":"code","c9abb5ce":"code","8caec8c0":"code","8d6547f4":"code","54630caf":"code","d2eaa80a":"code","c2730768":"code","1e566f6d":"code","dd8ba59e":"code","f80a9223":"code","204e4afb":"code","aaeb1a14":"code","94129bb5":"code","64014e1b":"code","7cb80c42":"code","2520d9b1":"code","8c3a268b":"code","0e15f04f":"code","5845578e":"code","cc58ea3f":"code","cd3d9060":"code","cdab6f6a":"code","d8436a6c":"code","f7393067":"code","9923cc84":"code","fcb957e9":"code","670e9325":"code","268c3f63":"code","337f9ba2":"code","ae71e884":"code","dcbfa2eb":"code","c2cb03fa":"code","9236bbc7":"code","820768fc":"code","a60d2aa1":"code","ebfd9c61":"code","f1b9c86b":"code","4f953088":"code","a5cea8d2":"code","dc2f8350":"code","29fddded":"code","f96ee6a8":"code","6ea454de":"code","b09a1022":"code","2e8ee6a3":"code","4399fff8":"code","6ed17994":"code","4f5afffb":"code","73a9c3b5":"code","d0d9093d":"code","7eff7711":"code","08c33f71":"code","1bcb5d6c":"code","9b45d343":"code","f1487e06":"markdown","845d1eae":"markdown","a2c0a45e":"markdown","73da24f0":"markdown"},"source":{"0a9cf91c":"import numpy as np\narr = np.array([1,3,4,5,6])\narr","1b18ebcd":"arr.shape","c22e218b":"arr.dtype","963c3a0b":"arr = np.array([1,'st','er',3])\narr.dtype","e8b512f9":"arr = np.array([[1,2,3],[2,4,6],[8,8,8]])\narr.shape","712c3cbf":"arr","ed2455f9":"arr = np.zeros((2,4))\narr","bb307f7a":"arr = np.ones((2,4))\narr","a9f04a2f":"arr = np.identity(3)\narr","a3ba78c4":"arr = np.random.randn(3,4)\narr","51837536":"from io import BytesIO\nb = BytesIO(b\"2,23,33\\n32,42,63.4\\n35,77,12\")\narr = np.genfromtxt(b, delimiter=\",\")\narr","9aafa9c3":"arr[1]","08e37abd":"arr = np.arange(12).reshape(2,2,3)\narr","8be5ccd4":"arr[0]","3357dc4d":"arr = np.arange(10)\narr[5:]","1f614f68":"arr[5:8]","c9abb5ce":"arr[:-5]","8caec8c0":"arr = np.arange(12).reshape(2,2,3)\narr","8d6547f4":"arr[1:2]","54630caf":"arr = np.arange(27).reshape(3,3,3)\narr","d2eaa80a":"arr[:,:,2]","c2730768":"arr[...,2]","1e566f6d":"arr = np.arange(9).reshape(3,3)\narr","dd8ba59e":"arr[[0,1,2],[1,0,0]]","f80a9223":"cities = np.array([\"delhi\",\"banglaore\",\"mumbai\",\"chennai\",\"bhopal\"])\ncity_data = np.random.randn(5,3)\ncity_data","204e4afb":"city_data[cities ==\"delhi\"]","aaeb1a14":"city_data[city_data >0]","94129bb5":"city_data[city_data >0] = 0\ncity_data","64014e1b":"arr = np.arange(15).reshape(3,5)\narr","7cb80c42":"arr + 5","2520d9b1":"arr * 2","8c3a268b":"arr1 = np.arange(15).reshape(5,3)\narr2 = np.arange(5).reshape(5,1)\narr2 + arr1","0e15f04f":"arr1","5845578e":"arr2","cc58ea3f":"arr1 = np.random.randn(5,3)\narr1","cd3d9060":"np.modf(arr1)","cdab6f6a":"A = np.array([[1,2,3],[4,5,6],[7,8,9]])\nB = np.array([[9,8,7],[6,5,4],[1,2,3]])\nA.dot(B)","d8436a6c":"A = np.arange(15).reshape(3,5)\nA.T","f7393067":"np.linalg.svd(A)","9923cc84":"a = np.array([[7,5,-3], [3,-5,2],[5,3,-7]])\nb = np.array([16,-8,0])\nx = np.linalg.solve(a, b)\nx","fcb957e9":"np.allclose(np.dot(a, x), b)","670e9325":"import pandas as pd\nd =  [{'city':'Delhi',\"data\":1000},\n      {'city':'Banglaore',\"data\":2000},\n      {'city':'Mumbai',\"data\":1000}]\npd.DataFrame(d)","268c3f63":"df = pd.DataFrame(d)","337f9ba2":"df = pd.DataFrame(np.random.randn(8, 3),\ncolumns=['A', 'B', 'C'])","ae71e884":"nparray = df.values\ntype(nparray)","dcbfa2eb":"from numpy import nan\ndf.iloc[4,2] = nan\ndf","c2cb03fa":"df.fillna(0)","9236bbc7":"df1 = pd.DataFrame({'col1': ['col10', 'col11', 'col12', 'col13'],\n                    'col2': ['col20', 'col21', 'col22', 'col23'],\n                    'col3': ['col30', 'col31', 'col32', 'col33'],\n                    'col4': ['col40', 'col41', 'col42', 'col43']},\n                   index=[0, 1, 2, 3])","820768fc":"df1","a60d2aa1":"df4 = pd.DataFrame({'col2': ['col22', 'col23', 'col26', 'col27'],\n                    'Col4': ['Col42', 'Col43', 'Col46', 'Col47'],\n                    'col6': ['col62', 'col63', 'col66', 'col67']},\n                   index=[2, 3, 6, 7])\n\npd.concat([df1,df4], axis=1)","ebfd9c61":"from sklearn import datasets\ndiabetes = datasets.load_diabetes()\nX = diabetes.data[:10]\ny = diabetes.target","f1b9c86b":"X[:5]","4f953088":"y[:10]","a5cea8d2":"feature_names=['age', 'sex', 'bmi', 'bp',\n               's1', 's2', 's3', 's4', 's5', 's6']","dc2f8350":"from sklearn import datasets\nfrom sklearn.linear_model import Lasso\n\nfrom sklearn import linear_model, datasets\nfrom sklearn.model_selection import GridSearchCV\n\ndiabetes = datasets.load_diabetes()\nX_train = diabetes.data[:310]\ny_train = diabetes.target[:310]\n\nX_test = diabetes.data[310:]\ny_test = diabetes.target[310:]\n\nlasso = Lasso(random_state=0)\nalphas = np.logspace(-4, -0.5, 30)\n\nscores = list()\nscores_std = list()\n\nestimator = GridSearchCV(lasso,\n                         param_grid = dict(alpha=alphas))\n\nestimator.fit(X_train, y_train)","29fddded":"estimator.best_score_","f96ee6a8":"estimator.best_estimator_","6ea454de":"estimator.predict(X_test)","b09a1022":"import numpy\nimport theano.tensor as T\nfrom theano import function\nx = T.dscalar('x')\ny = T.dscalar('y')\nz = x + y","2e8ee6a3":"f = function([x, y], z)\nf(8, 2)","4399fff8":"from sklearn.datasets import load_breast_cancer\ncancer = load_breast_cancer()\n\nX_train = cancer.data[:340]\ny_train = cancer.target[:340]\n\nX_test = cancer.data[340:]\ny_test = cancer.target[340:]\n\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout","6ed17994":"model = Sequential()\nmodel.add(Dense(15, input_dim=30, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))","4f5afffb":"model.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])","73a9c3b5":"model.fit(X_train, y_train,\n          epochs=20,\n          batch_size=50)","d0d9093d":"predictions = model.predict_classes(X_test)","7eff7711":"from sklearn import metrics\n\nprint('Accuracy:', metrics.accuracy_score(y_true=y_test, y_pred=predictions))\nprint(metrics.classification_report(y_true=y_test, y_pred=predictions))","08c33f71":"model = Sequential()\nmodel.add(Dense(15, input_dim=30, activation='relu'))\nmodel.add(Dense(15, activation='relu'))\nmodel.add(Dense(15, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])\n\nmodel.fit(X_train, y_train,\n          epochs=20,\n          batch_size=50)","1bcb5d6c":"predictions = model.predict_classes(X_test)","9b45d343":"print('Accuracy:', metrics.accuracy_score(y_true=y_test, y_pred=predictions))\nprint(metrics.classification_report(y_true=y_test, y_pred=predictions))","f1487e06":"# Scikit-Learn","845d1eae":"# **Numpy Arrays**","a2c0a45e":"# **PANDAS**","73da24f0":"# Deep Learning Frameworks"}}