{"cell_type":{"cc9cca6f":"code","ae41cd10":"code","f1695be7":"code","eddc0852":"markdown"},"source":{"cc9cca6f":"import pandas as pd\nimport numpy as np\n\nfiles = ['..\/input\/gb-vpp-pulp-fiction\/median_submission.csv',\n         '..\/input\/basic-ensemble-of-public-notebooks\/submission_median.csv',\n         '..\/input\/gaps-features-tf-lstm-resnet-like-ff\/sub.csv']\n\nsub = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')\nsub['pressure'] = np.median(np.concatenate([pd.read_csv(f)['pressure'].values.reshape(-1, 1) for f in files], axis=1), axis=1)","ae41cd10":"data = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv', usecols=['pressure', 'u_out'])\n\npressure_sorted = np.sort(data['pressure'].unique())\nPRESSURE_MIN = pressure_sorted[0]\nPRESSURE_MAX = pressure_sorted[-1]\nPRESSURE_STEP = pressure_sorted[1] - pressure_sorted[0]\n\ndef post_process(pressure):\n    pressure = np.round((pressure - PRESSURE_MIN) \/ PRESSURE_STEP) * PRESSURE_STEP + PRESSURE_MIN\n    pressure = np.clip(pressure, PRESSURE_MIN, PRESSURE_MAX)\n    return pressure\n\nsub.pressure = post_process(sub.pressure)","f1695be7":"sub.to_csv('submission.csv', index=False)\nsub.head(5)","eddc0852":"# Median wins against weighted mean\n\nIn this competition, we have seen public notebooks which compute a weighted arithmetic mean of other submissions. Here we use the same input as the currently top-scoring public notebook, but compute the median rather than the mean (and get a better score).\n\nIn a competition which is scored by mean absolute error (MAE), optimizing weights is a waste of time: The median is better and doesn't need any weights.\n\nSee https:\/\/www.kaggle.com\/c\/ventilator-pressure-prediction\/discussion\/280573 for a discussion of the topic.\n\n<font size=\"1\">There is one exception to the rule: If you have only two inputs, a weighted arithmetic mean give a better result than the median.<font>"}}