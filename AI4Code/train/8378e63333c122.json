{"cell_type":{"faa39f0c":"code","3332f1a6":"code","54810b9a":"code","cb49577b":"code","f851834f":"code","971afb22":"code","5b174366":"code","d89ae93e":"code","19f24c89":"code","b56393cb":"code","664adb1c":"code","da3bcf01":"code","9d7adae6":"code","d5c23601":"code","914c13b5":"code","f4f79474":"code","a3d0dc00":"code","2fbf6dc2":"code","3633d36f":"code","41868922":"code","93875813":"code","8cdc0187":"code","6563282d":"code","f6c45c95":"markdown","c5a0a183":"markdown","bed526f3":"markdown","1e178a7c":"markdown","e02b2d65":"markdown","9ab2aabd":"markdown","d856e399":"markdown","e330afd5":"markdown","a5547a18":"markdown","8b3fd8f8":"markdown"},"source":{"faa39f0c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nimport warnings\n\n%matplotlib inline\nwarnings.filterwarnings(\"ignore\")\nplt.style.use(\"seaborn-whitegrid\")","3332f1a6":"df_train = pd.read_csv(\"..\/input\/lish-moa\/train_features.csv\")\ndf_test = pd.read_csv(\"..\/input\/lish-moa\/test_features.csv\")\ntrain_labels = pd.read_csv(\"..\/input\/lish-moa\/train_targets_scored.csv\")\nsubmission = pd.read_csv(\"..\/input\/lish-moa\/sample_submission.csv\")\ndata = pd.concat([df_train, df_test])","54810b9a":"df_train.head()","cb49577b":"df_test.head()","f851834f":"train_labels.head()","971afb22":"print(\"\ud559\uc2b5\ub370\uc774\ud130 rows:\", df_train.shape[0], \"\\t\ud559\uc2b5\ub370\uc774\ud130 columns:\", df_train.shape[1])\nprint(\"\ud14c\uc2a4\ud2b8\ub370\uc774\ud130 rows:\", df_test.shape[0], \"\\t\ud14c\uc2a4\ud2b8\ub370\uc774\ud130 columns:\", df_test.shape[1])\nprint(\"\uc804\uccb4\ub370\uc774\ud130 rows:\", data.shape[0], \"\\t\uc804\uccb4\ub370\uc774\ud130 columns:\", data.shape[1])","5b174366":"df_train.info()\n\n# dtypes: float64(872), int64(1), object(3)","d89ae93e":"df_train.isnull().sum()\n\n# missingno\ub85c \ud655\uc778\ud574\ubcf8\uacb0\uacfc nullvalue \uc5c6\uc74c","19f24c89":"msno.matrix(df=df_train.iloc[:, 800:], color=(0.1, 0.6, 0.8))","b56393cb":"print(\"cp_type\uc758 \uc720\ub2c8\ud06c \uac12 \ud655\uc778:\", df_train[\"cp_type\"].unique())\nprint(\"cp_dose\uc758 \uc720\ub2c8\ud06c \uac12 \ud655\uc778:\", df_train[\"cp_dose\"].unique())","664adb1c":"f, ax = plt.subplots(1, 3, figsize = (20, 6))\n\nplot1 = sns.countplot(x = \"cp_type\", data = data, palette = \"cool\", edgecolor='black', alpha=0.7, linewidth=0.8, ax=ax[0])\nplot2 = sns.countplot(x = \"cp_time\", data = data, palette = \"cool\", edgecolor='black', alpha=0.7, linewidth=0.8, ax=ax[1])\nplot3 = sns.countplot(x = \"cp_dose\", data = data, palette = \"cool\", edgecolor='black', alpha=0.7, linewidth=0.8, ax=ax[2])\n\n# ctl_vehicle\uc740 \ub9e4\uc6b0 \uc801\ub2e4.\n# cp_time, cp_dose\ub294 \uace0\ub974\uac8c \ubd84\ud3ec\ub418\uc5b4 \uc788\ub2e4.","da3bcf01":"f = plt.subplots(figsize = (12, 12))\n\nax = plt.subplot2grid((2,2),(0,0))\nplt.hist(data[\"c-10\"], bins=4, color='skyblue', alpha=0.7, edgecolor='black', linewidth = 0.8)\nplt.title(\"c-10\", weight='bold', fontsize=18)\n\nax = plt.subplot2grid((2,2),(0,1))\nplt.hist(data[\"c-30\"], bins=4, color='lightcoral', alpha=0.7, edgecolor='black', linewidth = 0.8)\nplt.title(\"c-30\", weight='bold', fontsize=18)\n\nax = plt.subplot2grid((2,2),(1,0))\nplt.hist(data[\"c-60\"], bins=4, color='purple', alpha=0.7, edgecolor='black', linewidth = 0.8)\nplt.title(\"c-60\", weight='bold', fontsize=18)\n\nax = plt.subplot2grid((2,2),(1,1))\nplt.hist(data[\"c-90\"], bins=4, color='orange', alpha=0.7, edgecolor='black', linewidth = 0.8)\nplt.title(\"c-90\", weight='bold', fontsize=18)\n\n# 0~1, %\uc640 \uac19\uc774 \uc815\ub7c9\ud654\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc544\ubcf4\uc784\n# \ub208\uc73c\ub85c \ubd10\uc11c\ub294 -10~10\uc774 \uc544\ub2d0\uae4c \ud558\uc9c0\ub9cc \ud655\uc2e4\ud788 \uc54c\uc544\ubd10\uc57c \ud560\ub4ef","9d7adae6":"treated= data[data['cp_type']=='trt_cp']\ncontrol= data[data['cp_type']=='ctl_vehicle']\n\nf = plt.subplots(figsize = (12, 5))\n\nax = plt.subplot2grid((1,2),(0,0))\nplt.hist(control[\"c-30\"], bins=4, color='mediumpurple', alpha=0.7, edgecolor='black', linewidth = 0.8)\nplt.title(\"Control\", weight='bold', fontsize=18)\n\nax = plt.subplot2grid((1,2),(0,1))\nplt.hist(treated[\"c-30\"], bins=4, color='darkcyan', alpha=0.7, edgecolor='black', linewidth = 0.8)\nplt.title(\"Treated with Compound\", weight='bold', fontsize=18)\n\n# \ub300\uccb4\uc801\uc73c\ub85c \uc0b4\ud3b4\ubcf4\uba74, trt_cp\uc758 \uc0dd\uc874\ub825\uc774 \ub354 \uac15\ud55c\uac83\uc744 \uc54c \uc218 \uc788\ub2e4.","d5c23601":"hours_24= data[data['cp_time']==24]\nhours_48= data[data['cp_time']==48]\nhours_72= data[data['cp_time']==72]\n\nf = plt.subplots(figsize = (18, 5))\n\nax = plt.subplot2grid((1,3),(0,0))\nplt.hist(hours_24[\"c-30\"], bins=4, color='forestgreen', alpha=0.7, edgecolor='black', linewidth = 0.8)\nplt.title(\"Treatment Duration 24 Hours\", weight='bold', fontsize=18)\n\nax = plt.subplot2grid((1,3),(0,1))\nplt.hist(hours_48[\"c-30\"], bins=4, color='tomato', alpha=0.7, edgecolor='black', linewidth = 0.8)\nplt.title(\"Treatment Duration 48 Hours\", weight='bold', fontsize=18)\n\nax = plt.subplot2grid((1,3),(0,2))\nplt.hist(hours_72[\"c-30\"], bins=4, color='slateblue', alpha=0.7, edgecolor='black', linewidth = 0.8)\nplt.title(\"Treatment Duration 72 Hours\", weight='bold', fontsize=18)","914c13b5":"!pip uninstall fastai -y\n!pip install \/kaggle\/input\/fast-v2-offline\/dataclasses-0.6-py3-none-any.whl\n!pip install \/kaggle\/input\/fast-v2-offline\/torch-1.6.0-cp37-cp37m-manylinux1_x86_64.whl\n!pip install \/kaggle\/input\/fast-v2-offline\/torchvision-0.7.0-cp37-cp37m-manylinux1_x86_64.whl\n!pip install \/kaggle\/input\/fast-v2-offline\/fastcore-1.0.1-py3-none-any.whl\n!pip install \/kaggle\/input\/fast-v2-offline\/fastai-2.0.8-py3-none-any.whl\n\nfrom fastai.tabular.all import *","f4f79474":"n_splits = 5\nseed = 1337\ntest_size = 0.15\nlayers = [1024, 512, 256]\nbs = 4096\nepochs = 48\nlr = slice(8e-4, 8e-3)","a3d0dc00":"for column in train_labels.columns:\n    print(column)","2fbf6dc2":"cat_names = ['cp_type', 'cp_time', 'cp_dose']\ncont_names = [c for c in df_train.columns if c not in cat_names and c != 'sig_id']\ny_names = [c for c in train_labels.columns if c != 'sig_id']","3633d36f":"train = pd.concat([df_train, train_labels], axis=1)","41868922":"from sklearn.model_selection import KFold\n\nsss = KFold(n_splits=n_splits, shuffle=True, random_state=seed)\n\nout = np.zeros((len(submission), len(submission.columns) - 1))\n\nfor _, val_index in sss.split(df_train):\n    splits = IndexSplitter(val_index)(train)\n    procs = [Categorify, Normalize]\n    tab_pan = TabularPandas(train, procs=procs, cat_names=cat_names, cont_names=cont_names, y_names=y_names, splits=splits)\n    dls = tab_pan.dataloaders(bs=bs)\n    learn = tabular_learner(dls, y_range=(0,1), layers=layers, loss_func=BCELossFlat())\n    learn.fit_one_cycle(epochs, lr)\n    test_dl = learn.dls.test_dl(df_test)\n    sub = learn.get_preds(dl=test_dl)\n    out += sub[0].numpy()\n    \nout \/= n_splits","93875813":"moa_cols = [c for c in submission.columns if c != 'sig_id']\ndummy = np.zeros(len(moa_cols))\nctl_cp_ids = df_train.query('cp_type == \"trt_cp\"')[\"sig_id\"].values\nsubmission[moa_cols] = out","8cdc0187":"submission.head()","6563282d":"submission.to_csv('submission.csv', index=False)","f6c45c95":"# Import & Data Check","c5a0a183":"## \ub370\uc774\ud130 \uc815\ubcf4\n\n- g-feature: \uc720\uc804\uc790 \ubc1c\ud604 \ub370\uc774\ud130\n- c-feature: \uc138\ud3ec \uc0dd\uc874 \uac00\ub2a5\uc131(\ub2a5\ub825) \ub370\uc774\ud130\n- cp_type: \ud654\ud569\ubb3c\ub85c \ucc98\ub9ac\ub41c \ud45c\ubcf8 (cp_type\uc774 ctl_vehicle\uc77c \ub54c MoAs\ub294 \ud56d\uc0c1 0 (\uc5b4\ub5bb\uac8c \ucc98\ub9ac\ud560\uc9c0, \ud589\uc744 \uc0ad\uc81c\ud560\uc9c0 \uc0dd\uac01\ud574\uc57c\ud568))\n- cp_time: \uce58\ub8cc\uae30\uac04 (24\uc2dc\uac04, 48\uc2dc\uac04, 72\uc2dc\uac04)\n- cp_dose: \ub192\uace0 \ub0ae\uc74c","bed526f3":"### \uc5c5\ub370\uc774\ud2b8 \uc608\uc815","1e178a7c":"![](https:\/\/industrywired.com\/wp-content\/uploads\/2020\/07\/Nanotechnology-in-Medicine.jpeg)","e02b2d65":"## Base Modeling","9ab2aabd":"## c-feature: \uc138\ud3ec\uc758 \uc0dd\uc874 \uac00\ub2a5\uc131(\ub2a5\ub825)\n- \uc0dd\uc874 \uac00\ub2a5\uc131 \ubd84\uc11d\uc740 \uc7a5\uae30, \uc138\ud3ec \ub610\ub294 \uc870\uc9c1\uc774 \uc0dd\uc874 \uc0c1\ud0dc\ub97c \uc720\uc9c0\ud558\uac70\ub098 \ud68c\ubcf5\ud560 \uc218 \uc788\ub294 \ub2a5\ub825\uc744 \uacb0\uc815\ud558\uae30 \uc704\ud574 \ub9cc\ub4e4\uc5b4\uc9c4 \ubd84\uc11d\n- \uc0dd\uc874\uac00\ub2a5\uc131\uc740 0\uacfc 1\uc758 \uc815\uc218 \uc0ac\uc774 \ub610\ub294 0%\uc640 100%\uc758 \ubc94\uc704\ub97c \uc815\ub7c9\ud654\ud560 \uc218 \uc788\ub294 \uc9c0\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc0dd\uc0ac \ub610\ub294 \uc804\ubb34 \uc0c1\ud0dc\uc640 \uad6c\ubcc4\n- \uc0dd\uc874\uac00\ub2a5\uc131\uc740 \uc138\ud3ec, \uc870\uc9c1, \uc7a5\uae30\uc758 \ubb3c\ub9ac\uc801 \ud2b9\uc131\uc744 \ud1b5\ud574 \uad00\ucc30\ud560 \uc218 \uc788\uc74c","d856e399":"## g-feature: \uc720\uc804\uc790 \ubc1c\ud604\n- \uc720\uc804\uc790 \ubc1c\ud604\uc774\ub780 \uc720\uc804\uc790\ub85c\ubd80\ud130\uc758 \uc815\ubcf4\uac00 \uae30\ub2a5\uc131 \uc720\uc804\uc790 \uc0dd\uc0b0\ubb3c\uc758 \ud569\uc131\uc5d0 \uc774\uc6a9\ub418\ub294 \uacfc\uc815\n- \uc774 \ub300\ud68c\uc5d0 \uc874\uc7ac\ud558\ub294 207\uac1c\uc758 MoA\ub294 \uc720\uc804\uc790 \ubc1c\ud604\uc774 \uc77c\uc5b4\ub098\uba70 \ubd80\uc0b0\ubb3c(\ub2e8\ubc31\uc9c8)\uc774 \ud569\uc131\ub420 \uac83","e330afd5":"# *Mechanisms of Action (MoA) Prediction*","a5547a18":"# EDA","8b3fd8f8":"### Base Model\ub85c\ub294 Fasiai\ub97c \uc0ac\uc6a9\n### \ud604\uc7ac \uacf5\uc720\ucee4\ub110\ub4e4\uc744\ubcf4\uba74 \uba38\uc2e0\ub7ec\ub2dd+\ub525\ub7ec\ub2dd \ub4f1\ub4f1 \ub9ce\uc740 \ucee4\ub110\ub4e4\uc774 \ub098\uc624\uace0\uc788\uc74c"}}