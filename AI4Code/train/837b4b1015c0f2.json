{"cell_type":{"c320e746":"code","baece8b4":"code","c996ab12":"code","88e1e3dc":"code","c9845953":"code","ca539089":"code","e599e46b":"code","3ae1f0ba":"code","180a3559":"code","2a7e22f4":"code","b4061210":"code","c35b67ba":"code","1919b02c":"code","418de59c":"code","80ab6337":"code","688b6a6d":"code","992c9d7a":"code","00c4819c":"code","02684bca":"code","7bbb6513":"code","c7d09623":"code","af7b60f7":"code","ec08c23b":"code","da4814e0":"markdown","a779ac61":"markdown","1a55ccfc":"markdown","a0a5b2cb":"markdown"},"source":{"c320e746":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt; from matplotlib.ticker import ScalarFormatter\nimport seaborn as sns; sns.set;\nfrom datetime import timedelta\nimport os\n\n\n\nfrom pdpbox import pdp\nfrom plotnine import *\nimport feather\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nplt.style.use('fivethirtyeight') ","baece8b4":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv').rename(columns = {\"Province_State\": \"State\", \"Country_Region\":\"country\",\n                                                                                                   \"ConfirmedCases\":\"cases\", \"Fatalities\":\"deaths\"})\ntrain['Date']=pd.to_datetime(train.Date)\ntest = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/submission.csv')\ntrain['cou_state']=train.country +\"-\"+train.State.astype(str)","c996ab12":"countries = pd.read_csv('\/kaggle\/input\/undata-country-profiles\/country_profile_variables.csv')\ncountries['country'] = countries.country.str.strip()\n#rename columns for easier coding\ncol_dict = {\"Region\":\"Region\",'Surface area (km2)':\"surface_area\", 'Population in thousands (2017)':'pop_in_thou', \n            'Population density (per km2, 2017)':'pop_density','Sex ratio (m per 100 f, 2017)':\"sex_ratio\",\n            'GDP: Gross domestic product (million current US$)':'gdp','GDP growth rate (annual %, const. 2005 prices)':\"gdp_growth\", \n            'Urban population (% of total population)':'urban_pop','Urban population growth rate (average annual %)':'urban_growth_rate',\n            'Fertility rate, total (live births per woman)':'fertility_rate','Life expectancy at birth (females\/males, years)':'life_expectancy',\n            'Population age distribution (0-14 \/ 60+ years, %)':'pop_age_distribution', 'International migrant stock (000\/% of total pop.)':'imigrant_pop',\n            'Infant mortality rate (per 1000 live births':'infant_mortality', 'Health: Total expenditure (% of GDP)':'healthcare_expenditure',\n            'Health: Physicians (per 1000 pop.)':'physicians_per_1000'}\ncountries = countries.rename(columns = col_dict)\ncountries = countries[['country', 'surface_area', 'pop_in_thou','pop_density','sex_ratio','gdp','gdp_growth','urban_pop','urban_growth_rate', 'imigrant_pop',\n           'fertility_rate','life_expectancy','pop_age_distribution','infant_mortality','healthcare_expenditure','physicians_per_1000']]\n#Get the country names from the country data in-line with country nemes in COVID-19 Dataset\ncountries = countries.replace({'Bolivia (Plurinational State of)':'Bolivia', 'Congo':'Congo (Kinshasa)', \n                               'United States of America':'US', 'Iran (Islamic Republic of)':'Iran', 'Bosnia & Herzegovina': 'Bosnia and Herzegovina', \n                               'Venezuela (Bolivarian Republic of)':'Venezuela', \"Viet Nam\": \"Vietnam\", 'Trinidad & Tobago':'Trinidad and Tobago', \n                               'Republic of Korea':'Korea, South', 'Russian Federation':\"Russia\",'Brunei Darussalam':'Brunei',\n                               'United Republic of Tanzania': 'Tanzania', 'Bahamas': 'The Bahamas', 'Gambia': 'Gambia, The',\n                               'The former Yugoslav Republic of Macedonia': 'North Macedonia','Democratic Republic of the Congo': 'Republic of the Congo','Republic of Moldova':\"Moldova\",\n                               'Taiwan': 'Taiwan*', 'Central African Rep.': 'Central African Republic', 'Czech Republic': 'Czechia'})\nage_dist = countries.pop_age_distribution.str.split(\"\/\", expand = True)\ncountries['age_dist_0-14'] = age_dist[0].replace({\"-99\":np.nan, \"...\":np.nan}).astype(float)\ncountries['age_dist_60p'] = age_dist[1].replace({\"-99\":np.nan, \"...\":np.nan}).astype(float)\ncountries['age_dist_14-60'] = 100 - countries['age_dist_0-14']-countries['age_dist_60p']\ncountries = countries.drop([\"pop_age_distribution\", \"surface_area\", 'gdp_growth', 'urban_growth_rate'], axis = 1)\ncountries['gdp_per_cap']=(countries.gdp*1000) \/ (countries.pop_in_thou)\ncountries[countries.gdp_per_cap<0] = np.nan\nlife_ex = countries.life_expectancy.str.split(\"\/\", expand = True)\nlife_ex[0] = life_ex[0].replace({\"-99\":np.nan, \"...\":np.nan}).astype(float)\nlife_ex[1] = life_ex[1].replace({\"-99\":np.nan, \"...\":np.nan}).astype(float)\ncountries['life_expectancy'] = (life_ex[0]+life_ex[1])\/2\ncountries['immigrand_pct'] = countries.imigrant_pop.str.split(\"\/\", expand = True, n=1)[1]\ncountries = countries.drop(['imigrant_pop', 'life_expectancy'], axis = 1)\ncountries = countries[~pd.isna(countries.country)]\ncountries['population'] = countries.pop_in_thou * 1000\n#countries = countries.merge(train[['country', 'Lat', \"Long\"]].drop_duplicates(), how = 'left', on = 'country')\n#data = Null;","88e1e3dc":"def get_days_past_100(df, gr_col):\n    #There is a lot of 'state' data by aggregating it you reduce the number of observations from 17k to 6.5k (on 3\/23)\n    data = df.groupby([gr_col, \"Date\"]).sum().reset_index()\n    date_past_100 = data[data.cases > 100].groupby(gr_col)[['Date']].min().reset_index()[[gr_col,'Date']].rename(columns = {\"Date\":\"date_past_100\"})\n    data = data.merge(date_past_100, how = 'left', on = gr_col)\n    data['date_past_100'] = (data.date_past_100.fillna(pd.to_datetime(-999999)))\n    data['days_since_100'] = ((data.Date - data.date_past_100)\/(8.64e+13)).astype(int)\n    data.loc[(data['days_since_100'] < 0) | (data['days_since_100'] > 10000), 'days_since_100'] = 0\n    data = data.drop('date_past_100', axis = 1)\n    return data\n\ndef add_country_data(df, countries):\n    data_c = df.merge(countries, on = 'country', how = 'left')\n    data_c['cases_p_1000'] = data_c.cases \/ (data_c.population \/ 1000)\n    data_c['deaths_p_1000'] = data_c.deaths \/ (data_c.population \/ 1000)\n    return data_c\n\n\ndef get_top_10(df, column):\n    max_cases = df.groupby(column)[['cases_p_1000', 'deaths_p_1000', 'cases', 'deaths']].max().sort_values('cases_p_1000')\n    top_10 = max_cases[~pd.isna(max_cases.cases_p_1000)].sort_values('cases', ascending = False).head(10).reset_index()\n    #top_10_countries = top_10.country.tolist()\n    top_10_percap = max_cases[~pd.isna(max_cases.cases_p_1000)].sort_values('cases_p_1000', ascending = False).head(10).reset_index()\n    return top_10, top_10_percap","c9845953":"data_country = get_days_past_100(train, 'country')\ndata_state = get_days_past_100(train, 'cou_state').merge(train[['cou_state', \n                                                                'country', 'State']].drop_duplicates(), how = 'left', on = 'cou_state')\nUS_data = data_state.loc[data_state.country == 'US']","ca539089":"data_cou = add_country_data(data_country, countries)\ndata_us = add_country_data(US_data, countries)\ndata_state = add_country_data(data_state, countries)\ntop_10_cou, top_10_cou_percap = get_top_10(data_cou, 'country')\ntop_10_state, top_10_state_percap = get_top_10(data_us, 'State')","e599e46b":"#Countries with most cases\ntop_10_cou","3ae1f0ba":"#countries with most cases per capita\ntop_10_cou_percap","180a3559":"def process_data(df, group_column):\n    train_clean= pd.DataFrame([])\n    for col in df[group_column].unique():\n        cou_dat = df[df[group_column] == col].copy()\n        cou_dat['pct_chg_cases']=(cou_dat.cases.pct_change()).fillna(0).tolist()\n        cou_dat['days_to_double']=(1\/cou_dat.cases.pct_change()).fillna(0).tolist()\n        cou_dat['DtD_sma7'] = cou_dat.loc[:,'days_to_double'].rolling(window=7).mean()\n        cou_dat['pct_c_sma7'] = cou_dat.loc[:,'pct_chg_cases'].rolling(window=7).mean()\n        cou_dat['cases_10_days_prior'] = cou_dat[['cases']].shift(periods = 5).fillna(0)\n        cou_dat['deaths_15_days_prior'] = cou_dat[['deaths']].shift(periods = 15).fillna(0)\n        cou_dat['new_cases'] = cou_dat['cases'].diff().fillna(0)\n        cou_dat['deaths_day'] = cou_dat['deaths'].diff().fillna(0)\n        train_clean = train_clean.append(cou_dat)\n    train_clean = train_clean.replace([np.inf, -np.inf], 0)\n    return train_clean","2a7e22f4":"data_cou = process_data(data_cou, 'country')\ndata_us = process_data(data_us, 'cou_state')\ndata_state = process_data(data_state, 'cou_state')","b4061210":"data_cou.columns","c35b67ba":"train.groupby('State').max().reset_index().country.unique()\n#Countries that have state attributes towards them \n#These are provecnces that we can take into account when looking into when lockdowns were put into place","1919b02c":"data_state.columns","418de59c":"train_raw = train.copy().drop('cou_state', axis = 1)\ndrop_col = ['cou_state', '']","80ab6337":"def plot_case_growth(plot_dat, color_by, days_max = 35, ylim_daily = 10000, ylim_total = 100000):\n    last_obs=plot_dat.groupby(color_by, as_index = False).max()\n    f,ax = plt.subplots(1, 2, figsize=(20,7))\n    #ax[0].set(yscale = 'log')\n    #ax[0].set_ylim([100, ylim_daily])\n    ax[0].set_xlim([0,days_max])\n    sns.lineplot(x=\"days_since_100\", y=\"new_cases\", hue = color_by, data = plot_dat, markers = True, ax=ax[0])\n    ax[0].set(xlabel='Days Since 100th Case', ylabel = \"New Cases per Day\", title = \"New Daily Corona Cases\")\n    #plt.xticks(rotation=30)\n    for i in range(0,last_obs.shape[0]):\n        ax[0].text(min(last_obs.days_since_100.iloc[i], days_max), last_obs.new_cases.iloc[i], last_obs.loc[:,color_by].iloc[i])\n\n    ax[1].set(yscale = 'log'); ax[1].set_ylim([100,ylim_total])\n    ax[1].set_xlim([0,days_max])\n    sns.lineplot(x=\"days_since_100\", y=\"cases\", hue = color_by, data = plot_dat, markers = True, ax=ax[1])\n    ax[1].set(xlabel='Days Since 100th Case', ylabel = \"Cases (log-scale)\", title = \"Cumulative Cases\")\n    ax[1].yaxis.set_major_formatter(ScalarFormatter())\n    #plt.ticklabel_format(style='plain', axis='y')\n    #plt.xticks(rotation=30)\n    for i in range(0,last_obs.shape[0]):\n        ax[1].text(min(last_obs.days_since_100.iloc[i], days_max), last_obs.cases.iloc[i], last_obs.loc[:,color_by].iloc[i])\n        \n        \n\ndef plot_per_cap_cases_and_deaths(plot_dat, color_by, days_max = 45, ylim_deaths = 20000):\n    last_obs=plot_dat.groupby(color_by, as_index = False).max()\n    f,ax = plt.subplots(1, 2, figsize=(20,7))\n    ax[0].set(yscale = 'log')\n    #ax[0].set_ylim([100,ylim_deaths])\n    ax[0].set_xlim([0,days_max])\n    sns.lineplot(x=\"days_since_100\", y=\"cases_p_1000\", hue = color_by, data = plot_dat, markers = True, ax=ax[0])\n    ax[0].set(xlabel='Days Since 100th Case', ylabel = \"Cases \/ 1000 country population\", title = \"Cases per 1000\")\n    #plt.xticks(rotation=30)\n    for i in range(0,last_obs.shape[0]):\n        ax[0].text(min(last_obs.days_since_100.iloc[i], days_max), last_obs.cases_p_1000.iloc[i], last_obs.loc[:,color_by].iloc[i])\n    ax[1].set(yscale = 'log'); #ax[1].set_ylim([100,100000])\n    ax[1].set_xlim([0,days_max])\n    sns.lineplot(x=\"days_since_100\", y=\"deaths_p_1000\", hue = color_by, data = plot_dat, markers = True, ax=ax[1])\n    ax[1].set(xlabel='Days Since 100th Case', ylabel = \"Deaths \/ 1000 country population\", title = \"Deaths per 1000 Residents\")\n    ax[1].yaxis.set_major_formatter(ScalarFormatter())\n    #plt.ticklabel_format(style='plain', axis='y')\n    #plt.xticks(rotation=30)\n    for i in range(0,last_obs.shape[0]):\n        ax[1].text(min(last_obs.days_since_100.iloc[i], days_max), last_obs.deaths_p_1000.iloc[i], last_obs.loc[:,color_by].iloc[i])\n        \ndef plot_deaths(plot_dat, color_by, days_max = 45, ylim_deaths = 20000):\n    last_obs=plot_dat.groupby(color_by, as_index = False).max()\n    f,ax = plt.subplots(1, 2, figsize=(20,7))\n    ax[0].set(yscale = 'log')\n    #ax[0].set_ylim([100,ylim_deaths])\n    ax[0].set_xlim([0,days_max])\n    sns.lineplot(x=\"days_since_100\", y=\"deaths\", hue = color_by, data = plot_dat, markers = True, ax=ax[0])\n    ax[0].set(xlabel='Days Since 100th Case', ylabel = \" Deaths\", title = \"Total Deaths\")\n    #plt.xticks(rotation=30)\n    for i in range(0,last_obs.shape[0]):\n        ax[0].text(min(last_obs.days_since_100.iloc[i], days_max), last_obs.deaths.iloc[i], last_obs.loc[:,color_by].iloc[i])\n    #ax[1].set(yscale = 'log'); #ax[1].set_ylim([100,100000])\n    ax[1].set_xlim([0,days_max])\n    sns.scatterplot(x=\"days_since_100\", y=\"deaths_day\", size = 'deaths', hue = color_by, data = plot_dat, markers = True, ax=ax[1])\n    ax[1].set(xlabel='Days Since 100th Case', ylabel = \"Deaths \/ Day\", title = \"Daily Covid-19 Deaths\")\n    ax[1].yaxis.set_major_formatter(ScalarFormatter())\n    #plt.ticklabel_format(style='plain', axis='y')\n    #plt.xticks(rotation=30)\n    for i in range(0,last_obs.shape[0]):\n        ax[1].text(min(last_obs.days_since_100.iloc[i], days_max), last_obs.deaths_day.iloc[i], last_obs.loc[:,color_by].iloc[i])","688b6a6d":"plot_dat = data_cou[data_cou.country.isin(top_10_cou.country.unique())]\nplot_case_growth(plot_dat, 'country', 45, 30000, 2000000)\nplot_per_cap_cases_and_deaths(plot_dat, 'country')","992c9d7a":"plot_deaths(plot_dat, 'country')","00c4819c":"f,ax = plt.subplots(figsize=(20,7))\nlast_obs=plot_dat.groupby('country', as_index = False).max()\n#last_obs['cases'] = data.cases.astype(int)\n#scale = 'cases',\nsns.pointplot(x = 'cases_p_1000',y = 'deaths_p_1000', hue='country',  data = last_obs)\nplt.xticks(rotation=30)\nax.set(yscale = 'log')\n#ax.set(xscale = 'log')\n\nfor i in range(0,last_obs.shape[0]):\n    ax.text((last_obs.cases_p_1000.iloc[i])*2, last_obs.deaths_p_1000.iloc[i], last_obs.country.iloc[i], horizontalalignment='left')","02684bca":"f,ax = plt.subplots(figsize=(20,7))\nsns.lineplot(plot_dat.cases,plot_dat.deaths, hue=plot_dat.country)\nax.set(xlabel='Accumulated Cases', ylabel = \"Accumulated Deaths\", title = \"Deaths vs Cases\")\n#ax.set(yscale = 'log')\n#ax.set(xscale = 'log')\n\nfor i in range(0,last_obs.shape[0]):\n    ax.text(last_obs.cases.iloc[i], last_obs.deaths.iloc[i], last_obs.country.iloc[i])","7bbb6513":"top_10_state.State","c7d09623":"plot_dat = data_us[data_us.State.isin(top_10_state.State.unique().tolist())]\nlast_obs=plot_dat.groupby('State', as_index = False).max()\nlast_obs[['State', 'Date','cases', 'deaths']].sort_values('cases', ascending = False)","af7b60f7":"plot_case_growth(plot_dat, 'State')\nplot_deaths(plot_dat, 'State')","ec08c23b":"plot_dat = data_us[data_us.State.isin(['Michigan', 'South Carolina'])]\nplot_case_growth(plot_dat, 'State')\nplot_deaths(plot_dat, 'State')\nplot_per_cap_cases_and_deaths(plot_dat, 'State')","da4814e0":"\n## Some visualizations based on time since 100th case\nReally love the graphic from '[Our World in Data, Total confirmed cases of COVID-19](https:\/\/ourworldindata.org\/grapher\/covid-confirmed-cases-since-100th-case)'\n\nTrying to mimic some of that and expand on it","a779ac61":"## Import Data and Clean Data\n- Import data from COVID 19 datasets\n- Import and 'clean' data from undata-country-profiles data source\n\nThere is a plethora of other data out there to integrate into the COVID-19 data","1a55ccfc":"This is a different intersting look at how different countries have a relationshiop with. Each datapoint represents an individual day of reported days and cases. Is there a clear linear relationship between these? Notably China tails up, could this be an artifact of increased efforts of tallying deaths as the pandemic comes under some control? What's Germany doing differently? Do they have higher testing levels? \n\nAt the end of the day Deaths is a better count of actual patients infected with Coronavirus since reported cases involves a measure of how much testing is actually taking place in a given country","a0a5b2cb":"### Drill down to the State\/Provence level to get a little more detail\n"}}