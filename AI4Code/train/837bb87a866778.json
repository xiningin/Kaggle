{"cell_type":{"0c2d642a":"code","20056135":"code","31f1e47f":"code","e5550702":"code","2b0e4038":"code","f66fe90c":"code","05d45b6f":"markdown","6eff9e46":"markdown","4631c188":"markdown"},"source":{"0c2d642a":"import numpy as np\nimport pandas as pd\nimport torch\nimport torch.nn.functional as F\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_recall_fscore_support, accuracy_score\nfrom transformers import Trainer, TrainingArguments, AutoTokenizer,\\\n                         AutoModelForSequenceClassification","20056135":"# This is just 2 calls to pd.read_csv()\n# Loading the df_train and df_test\ndef load_dfs():\n    df_train = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')[['text', 'target']]\\\n                 .rename(columns={'target': 'label'})\n    df_test = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')[['id', 'text']]\n    return df_train, df_test\n\n\n# This functions is used by the Trainer to compute the metrics in the evaluation steps\n# It's just computing accuracy and f1\ndef compute_metrics(pred):\n    labels = pred.label_ids\n    preds = pred.predictions.argmax(-1)\n    precision, recall, f1, _ = precision_recall_fscore_support(labels, preds, average='binary')\n    acc = accuracy_score(labels, preds)\n    return {'accuracy': acc,\n            'f1': f1}\n\n\n# This function applies the tokenizer to the three dataframes\n# The result is ready for inputting it to the model\ndef tokenize(tokenizer, df_train, df_val, df_test):\n\n    def tokenize_df(tokenizer, df, has_label=True):\n        # Tokenize texts (Returns dictionary with keys: input_ids, token_type_ids, attention_mask)\n        ds = tokenizer(df['text'].tolist(), padding=\"max_length\", truncation=True)\n        # Add key 'label'\n        if has_label: ds['label'] = df['label'].tolist()\n        # Turn dictionary of lists into list of dictionaries\n        return [dict(zip(ds, t)) for t in zip(*ds.values())]\n\n    ds_train = tokenize_df(tokenizer, df_train)\n    ds_val = tokenize_df(tokenizer, df_val)\n    ds_test = tokenize_df(tokenizer, df_test, has_label=False)\n\n    return ds_train, ds_val, ds_test\n\n# Gets tokenizer and model from the modelhub, given its id\ndef get_tokenizer_and_model(model_name):\n    tokenizer = AutoTokenizer.from_pretrained(model_name)\n    model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=2)\n    return tokenizer, model\n\n# Gets the predictions for ds_test from the Trainer object\ndef get_predictions(trainer, ds_test):\n    preds = trainer.predict(ds_test)\n    preds = F.softmax(torch.from_numpy(preds.predictions), dim=-1)\n    binary_preds = (preds[:, 1] > 0.5).numpy().astype(int)\n    return binary_preds\n    \n# Gets the predictions for the test set and saves them to submission.csv\ndef submit(trainer, ds_test):\n    df_res = pd.read_csv('..\/input\/nlp-getting-started\/sample_submission.csv')\n    df_res['target'] = get_predictions(trainer, ds_test)\n    df_res.to_csv('submission.csv', index=False)\n    return df_res","31f1e47f":"from transformers.trainer_utils import set_seed; set_seed(2021) # Set seed for reproducibility\n\n# This is the model we will use, from the modelhub:\n# https:\/\/huggingface.co\/models\nMODEL_NAME = \"bert-base-cased\"\n\n# Get tokenizer and model\ntokenizer, model = get_tokenizer_and_model(MODEL_NAME)\n\n# Load dataframes\ndf_base, df_test = load_dfs()\n\n# Split train and validation sets\ndf_train, df_val = train_test_split(df_base, test_size=0.1)\n\n# Tokenize train, validation, and test sets\nds_train, ds_val, ds_test = tokenize(tokenizer, df_train, df_val, df_test)","e5550702":"# Fine-tune for just 1 epoch\nEPOCHS = 1\n\n# Prepare the TrainingArguments\nargs = TrainingArguments(\"\/kaggle\/working\/model\/\", \n                         num_train_epochs=EPOCHS, \n                         report_to=\"none\", # Disable \"wandb\", I don't know what it is yet\n                         evaluation_strategy=\"steps\", \n                         eval_steps=100, # Evaluate and log to screen metrics each 100 batches\n                         )\n\n# Instantiate the Trainer\ntrainer = Trainer(model=model, \n                  args=args, \n                  train_dataset=ds_train, \n                  eval_dataset=ds_val, \n                  compute_metrics=compute_metrics)\n\n# Train the model\ntrainer.train()","2b0e4038":"# Evaluate for correlating LB with validation schema\nres = trainer.evaluate()\nprint(f\"Validation F1 : {res['eval_f1']:.2f}\")\nprint(f\"Validation Acc: {res['eval_accuracy']:.2f}\")","f66fe90c":"# Generate predictions and create submission file\nsubmit(trainer, ds_test);","05d45b6f":"# 1- Learning \ud83e\udd17  - Out-of-the-box BERT [LB: 0.81029]\n\nHi, and welcome! This is the first kernel of the series `Learning \ud83e\udd17`, a personal project I'm currently working on. I am an experienced data scientist diving into the hugging face transformers library and this series or kernels is a \"working diary\", as I do it. The approach I'm taking is the following: \n\n1. Explore various out-of-the-box models, without digging into their technical details. \n2. After that, I'll start going over the best ranked public kernels, understand their ideas, and reproduce them by myself. \n\nYou are invited to follow me in this journey. In this short kernel (~80 lines) we fine-tune an out-of-the-box cased BERT, with just the minimal set up required for it to run in this competition, obtaining a leaderboard score of `0.81029`. \n\nThis is an ongoing project, so expect more notebooks to be added to the series soon. Actually, we are currently working on the following ones:\n\n1. [Learning \ud83e\udd17  - Out-of-the-box BERT [LB: 0.81029]](1-learning-out-of-the-box-bert-lb-0-8102) (this notebook)\n2. Learning \ud83e\udd17 - Out-of-the-box RoBERTa _WIP_\n3. Learning \ud83e\udd17 - Out-of-the-box Electra _WIP_\n4. Learning \ud83e\udd17 - BERT Large Uncased _WIP_\n\n### Please remember to upvote if you found the series useful for your research!\n\n\n## Using the [`transformers`](https:\/\/huggingface.co\/transformers\/) library\n\nWe are using a very high-level API of the library after following this quick guide article, which we recommend to read:\n[Fine-tuning a pretrained model](https:\/\/huggingface.co\/transformers\/training.html)\n\nWe use only 4 objects from the library: `Trainer`, `TrainingArguments`, `AutoModelForSequenceClassification`, `AutoTokenizer`. And, actually, the full list of imports is quite small as you can see below:","6eff9e46":"## The code\n\nWe have split the code in various simple functions to separates the wheat from the chaff and focus on the parts that are new to us.\n\nDocumentation about the `Trainer` can be found [here](https:\/\/huggingface.co\/transformers\/main_classes\/trainer.html) and about the `TrainerArguments` [here](https:\/\/huggingface.co\/transformers\/main_classes\/trainer.html#transformers.TrainingArguments).","4631c188":"# \ud83e\udd17\ud83e\udd17 Thanks for reading this notebook! Remember to upvote if you found it useful, and stay tuned for the next deliveries! \ud83e\udd17\ud83e\udd17"}}