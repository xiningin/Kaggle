{"cell_type":{"994600a3":"code","9588e3dc":"code","c1c88a9d":"code","57fe5c37":"code","3fb60b45":"code","feae178e":"code","aed73754":"code","3eeda92e":"code","0829df40":"code","a4f9f5c6":"code","d19d15ed":"code","f2fcc82c":"code","3aa539d9":"code","6a1fcc9b":"code","696b81c6":"code","bd506247":"code","a9fc8bdf":"code","e38920aa":"code","7d6d7910":"code","cf7f671a":"code","4993c153":"markdown"},"source":{"994600a3":"#importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","9588e3dc":"#load dataset\ndf = pd.read_csv('..\/input\/breast-cancer-data\/data.csv')\ndf.head()","c1c88a9d":"df.info()","57fe5c37":"df.isna().sum()","3fb60b45":"df= df.dropna(axis=1)","feae178e":"df.info()","aed73754":"#count of malignant and benignant\ndf['diagnosis'].value_counts()","3eeda92e":"sns.countplot(df['diagnosis'], label = \"count\")","0829df40":"df.dtypes","a4f9f5c6":"#encoding categorical data\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf.iloc[:, 1]= le.fit_transform(df.iloc[:,1].values)","d19d15ed":"print(df.iloc[:, 1])","f2fcc82c":"df.head()","3aa539d9":"df.corr()","6a1fcc9b":"#heatmap\nplt.figure(figsize= (20,20))\nsns.heatmap(df.corr(), annot = True, fmt= '.0%')","696b81c6":"# train test split\nfrom sklearn.model_selection import train_test_split\nX = df.drop(['diagnosis'], axis=1)\nY = df.diagnosis.values\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)","bd506247":"#support vector classifier\nfrom sklearn.svm import SVC\nsvm = SVC(random_state = 1)\nsvm.fit(X_train, y_train)\nprint(\"SVC accuracy : {:.2f}%\".format(svm.score(X_test, y_test)*100))","a9fc8bdf":"# Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(X_train, y_train)\nprint(\"Naive Bayes accuracy : {:.2f}%\".format(nb.score(X_test, y_test)*100))","e38920aa":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators= 1000, random_state = 1)\nrf.fit(X_train, y_train)\nprint(\"Random Forest accuracy : {:.2f}%\".format(rf.score(X_test, y_test)*100))","7d6d7910":"import xgboost\nxg = xgboost.XGBClassifier()\nxg.fit(X_train, y_train)\nprint(\"XG boost accuracy : {:.2f}%\".format(xg.score(X_test, y_test)*100))","cf7f671a":"#SVC accuracy : 58.77%\n#Naive Bayes accuracy : 59.65%\n#Random Forest accuracy : 95.61%\n#XG boost accuracy : 97.37%\n","4993c153":"## Breast Cancer Detection "}}