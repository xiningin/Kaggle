{"cell_type":{"7b239241":"code","22952397":"code","9a38fea5":"code","52ec2203":"code","679c28c7":"code","43b8cbfe":"code","ad575ede":"code","46fab036":"code","f8199562":"code","1910405f":"code","2f55008f":"code","0ee49fbf":"code","b4271969":"code","b11fe3e4":"code","d2d61593":"code","7f6e7346":"code","7286b3d4":"code","ad17d96f":"code","a391c582":"code","8a1dd8d4":"code","5173bdaa":"code","ed10f839":"code","5a3a38f3":"code","649a859d":"code","82d2e1ad":"code","f216e167":"code","5d34b114":"code","be6a37ce":"code","455a409d":"code","0b7cab79":"code","ff41f434":"code","63616341":"code","c679572e":"code","9011b0ee":"code","2403565d":"code","5a565426":"code","6f0eb0b7":"code","9589023d":"code","454b6382":"code","e8335114":"code","60ea1d33":"code","d8f13c8d":"code","d4e1d0fc":"code","89339c50":"code","8f0f76a3":"code","c70b01ae":"code","087fbc77":"code","51030ad7":"code","5753794b":"code","fff4af5b":"code","87838af7":"code","43a6f872":"code","e26ab1b7":"code","9aa07637":"code","7b8a113a":"code","271d0da9":"code","32aa28fd":"code","0387d685":"code","aa30531e":"code","c1a545a6":"code","bfd3757a":"code","d9f03690":"code","8f7cefe5":"code","bf3e3fd7":"code","6febe31d":"code","3ad38f7e":"code","135b3ced":"code","ed709be4":"code","8cb097e4":"code","e43de21c":"code","0de0a9b4":"markdown","18cf7cc0":"markdown","545e397c":"markdown","c199a081":"markdown","c538eb15":"markdown","6f6de962":"markdown","5b263c99":"markdown","29ae801f":"markdown","2ebf8a55":"markdown","20b1da7c":"markdown","a97f2951":"markdown","723ab092":"markdown","ae62d63c":"markdown","55fcbf61":"markdown","69c0e11e":"markdown","60cb9ba2":"markdown","f544ce1b":"markdown","c630f90b":"markdown","27e00610":"markdown","c9200c14":"markdown","efec7091":"markdown","5db721e4":"markdown","d25afb7b":"markdown","7c2d578c":"markdown","5285d0ef":"markdown","d72d9515":"markdown","966f3684":"markdown","e085356b":"markdown","c17e166f":"markdown","f1bff736":"markdown","7d8d073f":"markdown","6c93765a":"markdown","efdc218d":"markdown","aa42458f":"markdown","8941425f":"markdown","a9ae428a":"markdown","528249fd":"markdown","38453674":"markdown","1439b516":"markdown","905c4819":"markdown"},"source":{"7b239241":"# import libraries which are needed for data analysis\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n","22952397":"#laod data and combine\ntrain=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')","9a38fea5":"train.shape, test.shape","52ec2203":"#train data has 891 passenger information whereas test data has 418. Let's combine these two into dataset.\ndataset=pd.concat(objs=[train,test],axis=0).reset_index(drop=True)\ndataset.head(3)","679c28c7":"testid=test['PassengerId']","43b8cbfe":"#check out the missing values in feature\ndataset.isnull().sum()","ad575ede":"#correlation in dataset\nsns.heatmap(train.corr(),annot=True,cmap=\"YlGnBu\")","46fab036":"len(train['PassengerId'].unique())","f8199562":"dataset=dataset.drop('PassengerId',axis=1)","1910405f":"dataset.loc[dataset['Embarked'].isnull()]","2f55008f":"dataset.groupby(['Embarked','Pclass'])['Fare'].median()","0ee49fbf":"dataset['Embarked']=dataset['Embarked'].fillna('C')","b4271969":"sns.countplot(x='Embarked',hue='Survived',data=dataset)","b11fe3e4":"sns.countplot(x='Embarked',hue='Pclass',data=dataset)","d2d61593":"dataset.loc[dataset['Fare'].isnull()]","7f6e7346":"dataset['Fare']=dataset['Fare'].fillna(8.05)","7286b3d4":"dataset.loc[dataset['Fare']==0.0]","ad17d96f":"len(dataset.loc[dataset['Fare']==0.0])","a391c582":"#list of indices where fare=0.\ninde=[dataset.loc[dataset['Fare']==0.0].index] \nfor i in inde:\n    dataset.loc[i,'Fare']=dataset.groupby(['Embarked','Pclass'])['Fare'].transform(lambda x : x.median())\n","8a1dd8d4":"sns.kdeplot(dataset['Fare'])","5173bdaa":"dataset['Fare']=np.log(dataset['Fare'])","ed10f839":"sns.kdeplot(dataset['Fare'])","5a3a38f3":"f,axes=plt.subplots(2,1,figsize=(7,8))\na=sns.kdeplot(train['Age'][(train['Survived']==0) & train['Age'].notnull()],ax=axes[0])\na=sns.kdeplot(train['Age'][(train['Survived']==1) & train['Age'].notnull()],ax=axes[0])\na.legend(['Dead','Survived'])\na=sns.kdeplot(train['Age'][(train['Sex']=='male') & train['Age'].notnull()],ax=axes[1])\na=sns.kdeplot(train['Age'][(train['Sex']=='female') & train['Age'].notnull()],ax=axes[1])\na.legend(['male','female'])","649a859d":"dataset['title']=dataset['Name'].str.extract('([A-Za-z]+)\\.')","82d2e1ad":"dataset['title'].value_counts()","f216e167":"dataset['title']=dataset['title'].replace('Mlle','Miss')\ndataset['title']=dataset['title'].replace('Mme','Mrs')\ndataset['title']=dataset['title'].replace(['Rev','Dr','Col',\n                                            'Major','Ms','Dona','Lady','Sir',\n                                            'Jonkheer','Don','Capt','Countess'],\n                                           'Rare')\n","5d34b114":"dataset['title'].unique()","be6a37ce":"sns.boxplot(x='title',y='Age',hue='Pclass',data=dataset)","455a409d":"dataset.groupby(['Pclass','title'])['Age'].median()","0b7cab79":"dataset.loc[(dataset['Pclass']==3) & (dataset['title']=='Rare')]","ff41f434":"dataset['Age']=np.where((dataset['Pclass']==3) & (dataset['title']=='Rare'),0,dataset['Age'])","63616341":"dataset['Age']=dataset.groupby(['Pclass','title'])['Age'].transform(lambda x:x.fillna(x.median()))","c679572e":"dataset['Age']=np.where((dataset['Pclass']==3) & (dataset['title']=='Rare'),44.75,dataset['Age'])","9011b0ee":"dataset['Age'].isnull().sum()","2403565d":"sns.kdeplot(dataset['Age'])","5a565426":"dataset['Cabin']=dataset['Cabin'].fillna('X')\ndataset['Cabin']=dataset['Cabin'].str.get(0)","6f0eb0b7":"dataset['Cabin'].unique()","9589023d":"sns.countplot(x='Cabin',hue='Pclass',data=dataset)","454b6382":"sns.countplot(x='Cabin',hue='Embarked',data=dataset)","e8335114":"sns.catplot(x='Cabin',y='Survived',data=dataset,kind='bar')","60ea1d33":"dataset.loc[dataset['Ticket']=='LINE']","d8f13c8d":"ticket=[]\nfor i in dataset['Ticket']:\n    if not i.isdigit():\n        ticket.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(' ')[0])\n    elif i=='LINE':\n        ticket.append('LINE')\n    else:\n        ticket.append('X')\ndataset['Ticket']=ticket","d4e1d0fc":"sns.barplot(x='Sex',y='Survived',data=dataset)","89339c50":"dataset['Sex']=dataset['Sex'].map({'male':0,'female':1})","8f0f76a3":"sns.barplot(x='Pclass',y='Survived',data=dataset)","c70b01ae":"sns.factorplot(x='Pclass',y='Survived',hue='Sex',data=dataset,kind='bar')","087fbc77":"dataset['family']=dataset['Parch']+dataset['SibSp']+1","51030ad7":"sns.barplot(x='family',y='Survived',data=dataset)","5753794b":"dataset['alone']=np.where(dataset['family']==1,1,0)\ndataset['small-family']=np.where(dataset['family']==2,1,0)\ndataset['med-family']=np.where((dataset['family']>=3) & (dataset['family']<=4),1,0)\ndataset['big-family']=np.where(dataset['family']>=5,1,0)","fff4af5b":"#Embarked, title, cabin ticket\ndataset=pd.get_dummies(dataset,columns=['Embarked'],prefix='em',drop_first=True)\ndataset=pd.get_dummies(dataset,columns=['title'],prefix='tit',drop_first=True)\ndataset=pd.get_dummies(dataset,columns=['Cabin'],prefix='cab',drop_first=True)\ndataset=pd.get_dummies(dataset,columns=['Ticket'],prefix='tick',drop_first=True)\ndataset=pd.get_dummies(dataset,columns=['Pclass'],prefix='clas',drop_first=True)","87838af7":"dataset=dataset.drop(['Name'],axis=1)","43a6f872":"dataset.head(3)","e26ab1b7":"#separate data into train, test\ntrain=dataset[:len(train)]\ntest=dataset[len(train):]","9aa07637":"x_train=train.drop('Survived',axis=1)\ny_train=train['Survived'].astype(int)\nx_test=test.drop('Survived',axis=1)","7b8a113a":"# import libraries which are needed for modeling\nfrom sklearn.ensemble import AdaBoostClassifier,RandomForestClassifier,GradientBoostingClassifier,VotingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import StratifiedKFold,GridSearchCV","271d0da9":"fold=StratifiedKFold(10)","32aa28fd":"adaboost_param= {\"base_estimator__criterion\" : [\"gini\", \"entropy\"],\n              \"base_estimator__splitter\" :   [\"best\", \"random\"],\n              \"algorithm\" : [\"SAMME\",\"SAMME.R\"],\n              \"n_estimators\" :list(range(1,5,1)),\n              \"learning_rate\":[0.0002,0.04,0.0007,0.1]\n              }\ndt=DecisionTreeClassifier()\nada=AdaBoostClassifier(dt,random_state=0)\ngrid_ada=GridSearchCV(ada,param_grid=adaboost_param,cv=fold,scoring='accuracy',verbose=1)\ngrid_ada.fit(x_train,y_train)","0387d685":"grid_ada.best_score_","aa30531e":"ada_best=grid_ada.best_estimator_","c1a545a6":"rf_param = {\"max_depth\": [None],\n              \"max_features\":[2,4,6],\n              \"min_samples_split\":[4,6],\n              \"min_samples_leaf\":[2,3,6],\n              \"bootstrap\": [False],\n              \"n_estimators\" :[100,150],\n              \"criterion\": [\"gini\"]}\nrf=RandomForestClassifier()\ngrid_rf=GridSearchCV(rf,param_grid = rf_param, cv=fold, scoring=\"accuracy\",verbose = 1)\ngrid_rf.fit(x_train,y_train)","bfd3757a":"grid_rf.best_score_","d9f03690":"rf_best=grid_rf.best_estimator_","8f7cefe5":"#gradient boosting\ngb_param= {'loss' : [\"deviance\"],\n              'n_estimators' : [250,300],\n              'learning_rate': [0.0001,0.001,0.05],\n              'max_depth':[3,5],\n              'min_samples_leaf':[100,150],\n              'max_features': [0.1,0.5] \n              }\ngradb=GradientBoostingClassifier()\ngrid_gradb= GridSearchCV(gradb,param_grid = gb_param, cv=fold, scoring=\"accuracy\",verbose = 1)\ngrid_gradb.fit(x_train,y_train)","bf3e3fd7":"gradb_best=grid_gradb.best_estimator_","6febe31d":"grid_gradb.best_score_","3ad38f7e":"#correlation between predicted values for chosen classifiers\npred_ada=pd.Series(ada_best.predict(x_test),name='adaboost')\npred_rf=pd.Series(rf_best.predict(x_test),name='random-forest')\npred_gradb=pd.Series(gradb_best.predict(x_test),name='gradient-boost')\n","135b3ced":"result=pd.concat([pred_ada,pred_rf,pred_gradb],axis=1)","ed709be4":"sns.heatmap(result.corr(),annot=True)","8cb097e4":"vote=VotingClassifier(estimators=[('rf',rf_best),('grad',gradb_best)],voting='soft')\nvote_result=vote.fit(x_train,y_train)\ny_pred=vote_result.predict(x_test).astype(int)","e43de21c":"sub=pd.DataFrame({'PassengerId':testid,'Survived':y_pred})\nsub.to_csv('submission.csv',index=False)","0de0a9b4":"First replace age value nan  with 0, where pclass is 3 and title is rare.","18cf7cc0":"### Embarked","545e397c":"The person who has embarked from C and Pclass 1 has average fare as 76. Our missing data is also having fare around 80. It shows that both missing embarked are C. Let's fill those values with C.","c199a081":"PassengerId for each passenger is unique and hence no impact on survival rate. Let's drop this feature.","c538eb15":"### Age","6f6de962":"Above correlation shows that adaboost is less correlated with other two techniques. Consider only random forest and gradient boosting for voting.","5b263c99":"#### creating dummy variables","29ae801f":"### Missing values in Fare\n\n","2ebf8a55":"Most of the passengers from X cabin i.e. missing cabin are having lowest survival rate. Let's use one hot encoding and convert this categories into dummy variables in next steps.","20b1da7c":"People who have boarded from C and from Pclass 1, are more survived. Most of the passengers who started from S have booked pclass 3 and died in large number. Embarked has impact on survival. So we will keep it.","a97f2951":"#### gradient boosting","723ab092":"### Cabin","ae62d63c":"Titanic dataset has 11 input features. Each feature is related to output in some way. \n\nThese features are:\n\n1. PassengerId- Unique Id for each passenger\n\n2. Pclass- 1,2 and 3\n\n3. Name-Name of the passenger\n\n4. Sex- male, female\n\n5. Age\n\n6. SibSp- total number of siblings\/spouse\n\n7. Parch- total number of parents\/children\n\n8. Ticekt-ticket number\n\n9. Fare\n\n10. Cabin\n\n11. Embarked- port of embarkation(C = Cherbourg; Q = Queenstown; S = Southampton)\n\nLet's start by analysing these features.","55fcbf61":"Single passengers have died more in number than those with family members. If it is small and medium family, survival rate is high and after that survival rate is low. Let's divide family into alone, small, medium and large family features","69c0e11e":"From the graphs, age<20 passengers are more survived and most of them are female. Additionally, age> 58(Approx.) passengers are less survived and most of them are male. Hence we can make a conclusion that children and women have given priority during survival. Total 263 age values are missing. These values can be filled from the salutations given in passenger names. Let us extract those titles from name.","60cb9ba2":"This is my first notebook on kaggle. I have referred following kaggle links. \n\nhttps:\/\/www.kaggle.com\/yassineghouzam\/titanic-top-4-with-ensemble-modeling\/notebook\n\nhttps:\/\/www.kaggle.com\/erikbruin\/titanic-2nd-degree-families-and-majority-voting\/report\n\n\nSuggestions and doubts are always welcome.\n\nPlease upvote if you find this notebook useful. ","f544ce1b":"sibsp and parch can be treated together as a family for a passenger. Hence create a feature family: \n\nfamily=sibsp+parch+1(passenger)","c630f90b":"Pclass 1 passengers are paying high for the journey and also their survival rate is high. It is quite reasonable that they are given more priority compared to Pclass 2 and 3. Even females are survived in large number in each of the Pclass.","27e00610":"Cabin name starts with a letter. It may be based on either Pclass or embarked. Let's first fill missing values of cabin with letter X and extract first letter from cabin.","c9200c14":"Gender is one of the most important features. As we can see females are having very high rate of survival compared to male. Let's map Sex feature.","efec7091":"Plot is right skewed. It is not advisable to use fare directly. Hence let's convert it into Gaussian distribution using log function. Since we have already replaced zero hence there won't be a problem while using log.","5db721e4":"### Modeling\n\nI am going to use ensemble techniques such as random forest\/Adaboost\/gradient boosting. \nI have used GridSearchCV and found out best hyperparameters for each of the listed techniques. It takes more time hence I have considered very few parameters here.","d25afb7b":"### correlation between classifiers","7c2d578c":"Embarked has two missing values. Both are female and from pclass 1. Their ticket fare and cabin numbers are also same. Ticket fare is based on the journey and Pclass. Hence let's find out mean ticket fare for same embarked and same pclass. It is better to use median instead of mean if there are any outliers present.","5285d0ef":"### Pclass","d72d9515":"As we can see, there are many titles which are rare. But we can combine few titles like: Miss and Mlle, Mme and Mrs. Let's call rare category as Rare.","966f3684":"Let us consider tickets in 3 ways: digits, LINE and starting with letters","e085356b":"### SibSp and Parch","c17e166f":"Some tickets are having only digits and some are starting with letters. There is one more type of ticket, LINE which seems to be different.","f1bff736":"### Missing values in embarked\n","7d8d073f":"### Sex","6c93765a":"#### Adaboost","efdc218d":"#### Voting classifier","aa42458f":"Age is properly distributed.","8941425f":"It is clearly observed that the average age of pclass-1 passengers is higher than any other Pclass, irrespective of their title. Hence we can fill nan values for age based on median age for same Pclass and title.\n","a9ae428a":"Only one missing value for fare and that too in test data. Embarked is S and Pclass is 3. Hence fill missing value by 8.05","528249fd":"### Ticket","38453674":"#### random forest classifier\n","1439b516":"### Passenger Id","905c4819":"Total 17 passengers have zero fare value and it is hardly possible to have no fare for these many passengers. Hence I am replacing zero by median fare based on pclass and embarked."}}