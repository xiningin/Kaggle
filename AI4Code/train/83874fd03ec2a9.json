{"cell_type":{"c4af6b8e":"code","c3f89e7c":"code","06e466ea":"code","1ee03e6e":"code","87abf911":"code","2769a12e":"code","3ab61d05":"code","b9c2977b":"code","9ececc83":"code","7612c218":"code","2fe432e7":"code","6818b08b":"code","191867e8":"code","37716eb9":"code","68cc4410":"code","27d0077b":"code","0b4a95f0":"code","91bf8d1e":"code","5630e128":"code","87d8a460":"code","f973c7af":"code","d86bc154":"code","b51b0489":"code","4cd24068":"code","e59cef83":"code","9a844665":"code","9ed417c3":"code","8f0852d4":"code","623188c9":"code","9939ffc0":"code","07fe0654":"code","6d579085":"code","d23d2386":"code","2b3aa7ef":"code","1676f99c":"code","d535cdf4":"code","990614db":"markdown","e15ab956":"markdown","823d3afa":"markdown","ffa67882":"markdown","409a3bbc":"markdown","43d77fd7":"markdown","9154ec94":"markdown","4b2a0048":"markdown","479d595a":"markdown","c985364d":"markdown","af719213":"markdown","007bc14b":"markdown","b8e14669":"markdown","144e0546":"markdown"},"source":{"c4af6b8e":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","c3f89e7c":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\ncombine=[train_df,test_df]","06e466ea":"train_df.columns","1ee03e6e":"train_df.head()","87abf911":"sns.heatmap(train_df.isnull(),cbar=False,yticklabels=False)","2769a12e":"train_df.info()\nprint('-'*50)\ntest_df.info()","3ab61d05":"train_df.describe()\n","b9c2977b":"train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)\n","9ececc83":"train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","7612c218":"train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","2fe432e7":"train_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","6818b08b":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","191867e8":"sns.countplot(x='Survived',data=train_df,hue='Pclass')","37716eb9":"sns.countplot(x='SibSp',data=train_df)","68cc4410":"plt.figure(figsize=(10,7))\nsns.boxplot(x='Pclass',y='Age',data=train_df)","27d0077b":"for dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n\ntrain_df.head()","0b4a95f0":"guess_ages = np.zeros((2,3))\nguess_ages","91bf8d1e":"for dataset in combine:\n    for i in range(0, 2):\n        for j in range(0, 3):\n            guess_df = dataset[(dataset['Sex'] == i) & \\\n                                  (dataset['Pclass'] == j+1)]['Age'].dropna()\n\n            age_guess = guess_df.median()\n\n            # Convert random age float to nearest .5 age\n            guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n            \n    for i in range(0, 2):\n        for j in range(0, 3):\n            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n                        'Age'] = guess_ages[i,j]\n\n    dataset['Age'] = dataset['Age'].astype(int)\n\ntrain_df.head()","5630e128":"train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\ntrain_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)","87d8a460":"for dataset in combine:    \n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']\ntrain_df.head()","f973c7af":"train_df = train_df.drop(['AgeBand'], axis=1)\ncombine = [train_df, test_df]\ntrain_df.head()","d86bc154":"for dataset in combine:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n\ntrain_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)","b51b0489":"for dataset in combine:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n\ntrain_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()\n","4cd24068":"train_df = train_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ntest_df = test_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ncombine = [train_df, test_df]\n\ntrain_df.head()","e59cef83":"freq_port = train_df.Embarked.dropna().mode()[0]\nfreq_port","9a844665":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    \ntrain_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","9ed417c3":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntrain_df.head()","8f0852d4":"test_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\ntest_df.head()","623188c9":"train_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\ntrain_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)","9939ffc0":"for dataset in combine:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ntrain_df = train_df.drop(['FareBand'], axis=1)\ncombine = [train_df, test_df]\n    \ntrain_df.head(5)","07fe0654":"train_df = train_df.drop(['Ticket', 'Cabin','Name'], axis=1)\ntest_df = test_df.drop(['Ticket', 'Cabin','Name'], axis=1)\ncombine = [train_df, test_df]","6d579085":"train_df = train_df.drop(['PassengerId'], axis=1)","d23d2386":"from sklearn.ensemble import RandomForestClassifier","2b3aa7ef":"X_train = train_df.drop(\"Survived\", axis=1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape\n","1676f99c":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","d535cdf4":"my_submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nmy_submission.to_csv('submission.csv', index=False)\nY_pred","990614db":"**Exploring the categorical as well as numerical features and distinguishing between them**","e15ab956":"Our main goal is to identify the relationship between our output(Survived) using features(Gender, Age, Port...)","823d3afa":"**Which features contain blank or null values**","ffa67882":"# Analyzing by visualizing data\nWe can confirm some of our assumptions using visualization.\n","409a3bbc":"# Analyzing the data\ngetting all the features names","43d77fd7":"**Most of the survivors were female**","9154ec94":"**Creating new features from the existing features**","4b2a0048":"**Converting into categorical features**","479d595a":"Importing our random classifier and predicting the new labels.","c985364d":"**Analyzing which features have the most effect on survival rate**","af719213":"Exploring the  data types","007bc14b":"**Here we can see that class 1 passengers had the highest survival rate where as lowest class had the lowest survival rate**","b8e14669":"Now we iterating sex(0,1) and pclass(1,2,3) to find the missing the data of the age .","144e0546":"Importing all the major libraries which are required for data visualization and analysis as well as for linear algebra."}}