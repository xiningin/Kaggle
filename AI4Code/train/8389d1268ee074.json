{"cell_type":{"97471201":"code","ddaecdeb":"code","f89f8dc2":"code","509e0973":"code","f31a2067":"code","2bdf8cdc":"code","c7b58ca4":"code","a153a646":"code","403ff1a8":"code","9810a1f1":"code","33812cda":"code","1e183997":"code","02e85c61":"code","21291783":"code","50c98f5c":"code","562470a9":"code","304b40aa":"code","c1069682":"code","a1221598":"code","52f199a8":"code","ed533154":"code","f63c37bc":"code","4a57ab54":"code","f8079735":"code","89e8810a":"markdown","beb571f8":"markdown","fd5eb822":"markdown","f42fcc80":"markdown","5dc88e6c":"markdown","db88aa73":"markdown","f9c339d0":"markdown","9073b799":"markdown","7d4f5040":"markdown","4d709644":"markdown"},"source":{"97471201":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","ddaecdeb":"house_data = pd.read_csv('..\/input\/train.csv')","f89f8dc2":"#\u627e\u5230\u9700\u8981\u9884\u6d4b\u7684\u503cSalePrice\nhouse_data.columns","509e0973":"house_data.head()","f31a2067":"#house_data.isnull().sum()\nhouse_data.count()","2bdf8cdc":"house_data = house_data.drop(['Alley','FireplaceQu','PoolQC','Fence','MiscFeature'], axis=1)\nhouse_data.head()","c7b58ca4":"fix_feature = ['MasVnrType','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Electrical',\n          'GarageType','GarageFinish','GarageQual','GarageCond']\nfrom sklearn.impute import SimpleImputer\nfor feature_name in fix_feature:\n    imputer = SimpleImputer(strategy='most_frequent')\n    house_data[[feature_name]] = imputer.fit_transform(house_data[[feature_name]])","a153a646":"dtype_group = house_data.columns.to_series().groupby(house_data.dtypes).groups\ndtype_group","403ff1a8":"object_feature = house_data.select_dtypes(include=['object']).columns.values\nobject_feature","9810a1f1":"var = 'BsmtQual'\ndata = pd.concat([house_data['SalePrice'], house_data[var]], axis=1)\nf, ax = plt.subplots(figsize=(26, 12))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","33812cda":"from sklearn.preprocessing import LabelEncoder\nfor feature_name in object_feature:\n    encoder = LabelEncoder()\n    house_data[feature_name] = encoder.fit_transform(house_data[feature_name])\nhouse_data.head()","1e183997":"#\u53d6\u51fa\u8ddf\u9884\u6d4b\u503c\u76f8\u5173\u7684\u524d\u51e0\u4e2a\u7279\u5f81\ncorr = house_data.corr()\nk_feature = corr.nlargest(10, 'SalePrice')\nfeature = k_feature.index[0:].values\nfeature","02e85c61":"#\u770b\u56fe\uff0c\u8fd9\u4e9b\u7279\u5f81\u4e0e\u9884\u6d4b\u4ef7\u683c\u7684\u76f8\u5173\u5ea6\u7cfb\u6570\u90fd>0.5\nplt.figure(figsize=(14,7))\nsns.heatmap(data=house_data[feature].corr(), annot=True)","21291783":"from sklearn.preprocessing import StandardScaler\nkey_feature = k_feature.index[1:].values\ntrain_X = house_data[key_feature]\ntrain_y = house_data[\"SalePrice\"]\n\nscaler = StandardScaler()\nscaler.fit(train_X)\ntrain_X_fit = scaler.transform(train_X)","50c98f5c":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport numpy as np\n\nX_train,X_test, y_train, y_test = train_test_split(train_X_fit, train_y, test_size=0.33, random_state=42)\n\nclf = RandomForestRegressor(n_estimators=400)\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\nlin_mse = mean_squared_error(y_test,y_pred)\nlin_rmse = np.sqrt(lin_mse)\nlin_rmse","562470a9":"house_data_test = pd.read_csv('..\/input\/test.csv')\ntest_X = house_data_test[key_feature]\nfor feature_name in key_feature:\n    imputer = SimpleImputer(strategy='most_frequent')\n    test_X[[feature_name]] = imputer.fit_transform(test_X[[feature_name]])","304b40aa":"test_X_fit = scaler.transform(test_X)\ntest_y = clf.predict(test_X_fit)\ntest_y","c1069682":"prediction = pd.DataFrame(test_y, columns=['SalePrice'])\nresult = pd.concat([ house_data_test['Id'], prediction], axis=1)\nresult.columns","a1221598":"result.to_csv('..\/predictions.csv', index=False)","52f199a8":"from sklearn.svm import SVR\nsvm_poly_reg = SVR(kernel=\"poly\",degree=3, C=1000, epsilon=0.1)\nsvm_poly_reg.fit(X_train, y_train)\n\ny_pred_svm = svm_poly_reg.predict(X_test)\nlin_mse_svm = mean_squared_error(y_test,y_pred_svm)\nlin_rmse_svm = np.sqrt(lin_mse_svm)\nlin_rmse_svm","ed533154":"from sklearn.ensemble import BaggingRegressor\nbag_reg = BaggingRegressor(n_estimators = 70, random_state=42)\nbag_reg.fit(X_train,y_train)\ny_pred_bag = bag_reg.predict(X_test)\nlin_mse_bag = mean_squared_error(y_test,y_pred_bag)\nlin_rmse_bag = np.sqrt(lin_mse_bag)\nlin_rmse_bag","f63c37bc":"test_y_bag = bag_reg.predict(test_X_fit)\ntest_y_bag","4a57ab54":"prediction_bag = pd.DataFrame(test_y_bag, columns=['SalePrice'])\nresult_bag = pd.concat([ house_data_test['Id'], prediction_bag], axis=1)\nresult_bag.columns","f8079735":"result_bag.to_csv('..\/predictions_bag.csv', index=False)","89e8810a":"\u63a5\u4e0b\u6765\u8bad\u7ec3\u6a21\u578b\uff0c\u6709\u5f88\u591a\u6a21\u578b\u53ef\u7528\uff0c\u8fd9\u91cc\u5c31\u7b80\u5355\u9009\u62e9\u968f\u673a\u68ee\u6797\u56de\u5f52\u5668\u5427","beb571f8":"\u6700\u540e\uff0c\u5bf9\u5173\u952e\u7279\u5f81\u90fd\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406","fd5eb822":"\u5747\u65b9\u8bef\u5dee\u66f4\u5927\u4e86\uff0c\u518d\u6765\u8bd5\u4e0b\u522b\u7684","f42fcc80":"\u55ef\uff0c\u90fd\u662f\u6570\u503c\u7c7b\u578b\u4e86\uff0c\u5f88\u597d\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u4e0b\u54ea\u4e9b\u6570\u636e\u76f8\u5173\u6027\u5927","5dc88e6c":"\u518d\u770b\u4e00\u4e0b\u6570\u636e\uff0c\u7f3a\u5931\u8fc7\u591a\u7684\u6570\u636e\u5df2\u7ecf\u5220\u9664\u4e86\uff0c\u63a5\u4e0b\u6765LotFrontage\uff0cMasVnrType\uff0cMasVnrArea\uff0cGarageType\uff0cGarageYrBlt\uff0cGarageFinish\uff0cGarageQual\uff0cGarageCond\u7b49\u51e0\u4e2a\u7279\u5f81\u6709\u5c11\u91cf\u7f3a\u5931\uff0c\u9700\u9700\u8981\u8865\u5168","db88aa73":"\u554a\uff0c\u770b\u6765\u6a21\u578b\u8fd8\u6709\u597d\u5927\u4f18\u5316\u7a7a\u95f4","f9c339d0":"\u63a5\u4e0b\u6765\uff0c\u6765\u8bd5\u4e0b\u652f\u6301\u5411\u91cf\u673a","9073b799":"\u63a5\u4e0b\u6765\uff0c\u9884\u6d4b\u4e0b\u6d4b\u8bd5\u6570\u636e\u5427\uff0c\u6ce8\u610f\uff0c\u6211\u8fd9\u91cc\u6ca1\u6709\u5bf9\u6587\u672c\u8fdb\u884c\u6570\u503c\u8f6c\u6362\uff0c\u56e0\u4e3a\u5173\u952e\u7684\u7279\u5f81\u90fd\u662f\u6570\u503c\u7684","7d4f5040":"Alley\uff0cFireplaceQu\uff0cPoolQC\uff0cFence\uff0cMiscFeature\u8fd9\u51e0\u4e2a\u7279\u5f81\u7f3a\u5931\u592a\u591a\uff0c\u907f\u514d\u5e72\u6270\uff0c\u5220\u9664","4d709644":"\u53ef\u4ee5\u53d1\u73b0\u6709\u5f88\u591a\u6570\u636e\u662fobject\u7c7b\u578b\uff0c\u4e0d\u662f\u6570\u503c\u7c7b\u578b\uff0c\u62ff\u51fa\u6765\u5904\u7406\u4e0b"}}