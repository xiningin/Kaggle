{"cell_type":{"8bf9543c":"code","abeeed9e":"code","5fbd0663":"code","ad830d0c":"code","8f1956e7":"code","380ef738":"code","c91ebf57":"code","4270610f":"code","e52c8bc0":"code","cad41c90":"code","d65ad8f4":"code","6a431739":"code","b0cdf93d":"code","94f62dd2":"code","7a273003":"code","0b5b17c5":"code","342fd836":"code","31c5c739":"code","f51d3d98":"code","90b87a3a":"code","29bba946":"code","6ffa4439":"code","0f01977e":"code","8aec1894":"code","418123b1":"code","fd605674":"code","5ef232b7":"code","4fbd4c51":"code","7b18121f":"code","aa9c76bf":"code","c4b2a4e9":"code","2f318d03":"code","e196bd17":"code","58ec0f84":"markdown","888c711e":"markdown","1508fdcf":"markdown","802f1c96":"markdown","6570740e":"markdown","50a34d3a":"markdown","67e4b199":"markdown","7b2594c9":"markdown","07095654":"markdown","6ee911fe":"markdown","13cb9941":"markdown","05aeaab8":"markdown","658d5098":"markdown","6e9e1ba7":"markdown","91e81914":"markdown","fb268a63":"markdown","93bff6df":"markdown","9b516cb0":"markdown","f891e1d6":"markdown","e6ca59b2":"markdown","60be188c":"markdown"},"source":{"8bf9543c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","abeeed9e":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly import tools\nfrom plotly.subplots import make_subplots\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split\nimport category_encoders as ce\nfrom sklearn.preprocessing import LabelBinarizer\n\n# Modelling Libraries\nfrom sklearn.linear_model import LogisticRegression,LinearRegression\nfrom sklearn.svm import SVC\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\n# Evaluation & CV Libraries\nfrom sklearn.metrics import precision_score,accuracy_score\nfrom sklearn.metrics import classification_report, f1_score, plot_roc_curve\nfrom sklearn.model_selection import RandomizedSearchCV,GridSearchCV,RepeatedStratifiedKFold","5fbd0663":"df= pd.read_csv('\/kaggle\/input\/adult-census-income\/adult.csv')\ndf.head()","ad830d0c":"df.shape","8f1956e7":"df.info()","380ef738":"df.describe(include='all').head()","c91ebf57":"df.isna().sum()","4270610f":"df.drop('fnlwgt', axis=1, inplace=True)\ndf.replace({'?':'Unknown'}, inplace=True)","e52c8bc0":"work_col = ['workclass','education','education.num','occupation','capital.gain','capital.loss','hours.per.week','income']\n\ndempgraphic_col = ['age','marital.status','relationship','race','sex','native.country']","cad41c90":"work_col =df[work_col]\ndempgraphic_col = df[dempgraphic_col]","d65ad8f4":"pay = work_col['income'].value_counts()\nfig = px.bar(x=pay.index, y=pay, title='Total Income Distribution', text=(work_col['income'].value_counts()\/len(work_col['income'])*100))\nfig['layout'].update(height=500, width=500)\nfig.update_traces(textposition='outside',texttemplate='%{text:.4s}', marker_color=['pink','plum'])\nfig.show()\n","6a431739":"trace1 = go.Bar(x=work_col['workclass'].value_counts().index, y=work_col['workclass'].value_counts(), \n                text=(work_col['workclass'].value_counts()\/len(work_col['workclass'])*100), \n                marker=dict(color=work_col['workclass'].value_counts(), colorscale='earth'))\n\ntrace2 = go.Bar(x=work_col['education'].value_counts().index, y=work_col['education'].value_counts(), \n                text=(work_col['education'].value_counts()\/len(work_col['education'])*100),\n               marker=dict(color=work_col['education'].value_counts(), colorscale='earth'))\n\ntrace3 = go.Bar(x=work_col['occupation'].value_counts().index, y=work_col['occupation'].value_counts(), \n                text=(work_col['occupation'].value_counts()\/len(work_col['occupation'])*100),\n               marker=dict(color=work_col['occupation'].value_counts(), colorscale='earth'))\n\n\nfig = make_subplots(rows=2, cols=2, specs=[[{'type':'bar'},{'type':'bar'}],\n                                          [{'type':'bar'},None]],\n                   subplot_titles=('Work Class Distribution','Education Distribution','Occupation Distribution',\n                                  'Hours Per Week Distribution'))\nfig.append_trace(trace1,1,1)\nfig.append_trace(trace2,1,2)\nfig.append_trace(trace3,2,1)\n\nfig['layout'].update(height=1100, width=1200,title='Work Related Feature Analysis')\n\nfig.update_traces(textposition='outside',texttemplate='%{text:.4s}%')\nfig.show()","b0cdf93d":"plt.figure(figsize=(25,8))\nsns.countplot(x=work_col['hours.per.week'])\nplt.title('Hours Per Week', fontsize=30)\nplt.xlabel('Hours', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.show()","94f62dd2":"ax=work_col.groupby('income')[['capital.gain','capital.loss']].agg(['min','max','mean'])\nax.style.background_gradient(cmap=\"CMRmap_r\")","7a273003":"fig = px.histogram(x=work_col['workclass'], color=work_col['income'],color_discrete_sequence=['grey','yellow'], height=400, width=700, title='Work Class VS Income',\n                  labels={'Work':'Work'})\nfig.show()\n\nfig = px.histogram(x=work_col['occupation'], color=work_col['income'],color_discrete_sequence=['grey','plum'], height=400, width=700, title='Occupation VS Income')\nfig.show()\n\nfig = px.histogram(x=work_col['education'], color=work_col['income'], color_discrete_sequence=['grey','orange'], height=400, width=700, title='Education VS Income')\nfig.show()\n","0b5b17c5":"fig = px.histogram(x=work_col['hours.per.week'], \n                   color=work_col['income'], \n                   height=600, \n                   width=1000,log_y=True,\n                  template='ggplot2')\n\nfig.update_layout(paper_bgcolor='rgb(248, 248, 255)',\n     plot_bgcolor='rgb(248, 248, 255)',\n     showlegend=False,)\nfig.show()","342fd836":"fig = go.Figure()\n\nfig.add_trace(go.Histogram(x=dempgraphic_col['age'],\n                          xbins=dict(\n                          start=17,\n                          end=90,\n                          size=1),\n                          opacity=1))\n\nfig.update_layout(title_text='Age Distribution',\n                 xaxis_title='Age',\n                 yaxis_title='Count',\n                 bargap=0.05,\n                 xaxis={'showgrid':False},\n                 yaxis={'showgrid':False},\n                 template='seaborn',\n                 height=600,\n                 width=1000)\n\nfig.update_layout(paper_bgcolor='rgb(248, 248, 255)',\n     plot_bgcolor='rgb(248, 248, 255)',\n     showlegend=False,)\nfig.show()","31c5c739":"colors=['mediumturquoise','lightgreen','seagreen',\"rgb(114, 78, 145)\",'palegreen','olive','gold','darkorange']\n\ntraces1 = go.Pie(values=dempgraphic_col['marital.status'].value_counts(), labels=dempgraphic_col['marital.status'].value_counts().index, marker_colors=['mediumturquoise','lightgreen','seagreen',\"rgb(114, 78, 145)\",'palegreen','olive'])\n\ntraces2 = go.Pie(values=dempgraphic_col['relationship'].value_counts(), labels=dempgraphic_col['relationship'].value_counts().index, marker_colors=['lightcyan','cyan','royalblue','darkblue','steelblue','lightblue'])\n\ntraces3 = go.Pie(values=dempgraphic_col['race'].value_counts(), labels=dempgraphic_col['race'].value_counts().index,marker_colors=['pink','plum','coral','salmon'])\n\ntraces4 = go.Pie(values=dempgraphic_col['sex'].value_counts(), labels=dempgraphic_col['sex'].value_counts().index, marker_colors=['gold','darkorange'])\n\nfig = make_subplots(rows=2, cols =2, specs=[[{'type':'domain'}, {'type':'domain'}],\n                                           [{'type':'domain'},{'type':'domain'}]],\n                   subplot_titles=('Marital Status Distribution', 'Relationship Distribution','Race Distribution','Gender Distribution'))\n\nfig.append_trace(traces1,1,1)\nfig.append_trace(traces2,1,2)\nfig.append_trace(traces3,2,1)\nfig.append_trace(traces4,2,2)\n\nfig['layout'].update(height=1000, \n                     title='Demographic Columns Analysis', titlefont_size=20,\n                     paper_bgcolor='rgb(248, 248, 255)',\n                     plot_bgcolor='rgb(248, 248, 255)',\n                     showlegend=False,)\n\nfig.update_traces(hole=.4, pull=[0,0,0.2,0,0], hoverinfo='label+percent', marker_line=dict(color='black', width=2),)\n\nfig.show()","f51d3d98":"fig = px.bar(x=dempgraphic_col['native.country'].value_counts().index, y=dempgraphic_col['native.country'].value_counts(),log_y=True,\n             text=(dempgraphic_col['native.country'].value_counts()\/len(dempgraphic_col['native.country'])*100))\n\nfig.update_traces(textposition='outside', texttemplate='%{text:.3s}%')\nfig['layout'].update(height=500, width=1500,title='Country Count')\nfig.show()","90b87a3a":"fig = px.histogram(x=dempgraphic_col['marital.status'], color=df['income'],color_discrete_sequence=['navy','lightblue'], height=400, width=700, title='Marital Status VS Income',\n                  labels={'Work':'Work'})\nfig.show()\n\nfig = px.histogram(x=dempgraphic_col['relationship'], color=df['income'],color_discrete_sequence=['darkorange','gold'], height=400, width=700, title='Relationship VS Income')\nfig.show()\n\nfig = px.histogram(x=dempgraphic_col['sex'], color=df['income'], color_discrete_sequence=['maroon','palevioletred'], height=400, width=600, title='Gender VS Income')\nfig.show()\n\nfig = px.histogram(x=dempgraphic_col['race'], color=df['income'], color_discrete_sequence=['pink','peachpuff'], height=400, width=700, title='Race VS Income')\nfig.show()","29bba946":"fig = px.histogram(x=dempgraphic_col['native.country'], \n                   color=df['income'],log_y=True,\n                  width=900)\nfig.update_layout(paper_bgcolor='rgb(248, 248, 255)',\n     plot_bgcolor='rgb(248, 248, 255)',\n     showlegend=False,)\nfig.show()","6ffa4439":"fig = px.histogram(x=dempgraphic_col['age'], \n                   color=df['income'],\n                  height=500,\n                  width=800,\n                  template='ggplot2',\n                  nbins=100)\n\nfig.update_layout(paper_bgcolor='rgb(248, 248, 255)',\n     plot_bgcolor='rgb(248, 248, 255)',\n     showlegend=False,)\nfig.show()","0f01977e":"transformer = ColumnTransformer([\n    ('one hot', OneHotEncoder(drop = 'first'), ['relationship', 'race', 'sex']),\n    ('binary', ce.BinaryEncoder(), ['workclass', 'marital.status', 'occupation', 'native.country'])],\n    remainder = 'passthrough')","8aec1894":"x = df.drop(['income','education'],axis=1)\ny = np.where(df['income'] == '>50K', 1, 0)\n\nprint(x.shape)\nprint(y.shape)","418123b1":"x = transformer.fit_transform(x)","fd605674":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.3, random_state=100)","5ef232b7":"models = [('LR',LogisticRegression(max_iter=10000)), ('SVC', SVC()),\n         ('DT', DecisionTreeClassifier()), ('RF',RandomForestClassifier()),\n         ('KNN',KNeighborsClassifier(n_neighbors=10)), ('GNB',GaussianNB()),\n         ('GBC',GradientBoostingClassifier()), ('ADA', AdaBoostClassifier()),\n         ('XGB', XGBClassifier())]\nresults = []\nnames = []\nfinal_Score =[]\n\nfor name,model in models:\n    model.fit(x_train,y_train)\n    model_results = model.predict(x_test)\n    score = accuracy_score(y_test, model_results)\n    results.append(score)\n    names.append(name)\n    final_Score.append((name,score))\n    \nfinal_Score.sort(key=lambda k:k[1],reverse=True)","4fbd4c51":"final_Score","7b18121f":"random_gbc ={'learning_rate':[0.0001,0.001,0.01,0.1],\n            'n_estimators':[100,200,500,1000],\n            'max_features':['sqrt','log2'],\n            'max_depth':list(range(11))\n                            }\n\nrandom_xgb = {\"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25 ] ,\n            \"max_depth\"        : [ 3, 4, 5, 6, 8, 10],\n            \"min_child_weight\" : [ 1, 3, 5, 7 ],\n            \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n            \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ],\n            'eval_metric':['mlogloss']}\n\nrandom_rf = {'n_estimators':[100,200,500,800,1000],\n            'max_features':['auto','sqrt','log2'],\n            'max_depth':list(range(1,11)),\n            'criterion':['gini','entropy']}","aa9c76bf":"score = []\ngbc_rs = RandomizedSearchCV(estimator= GradientBoostingClassifier(), param_distributions=random_gbc, cv=RepeatedStratifiedKFold(n_splits=5, n_repeats=2),\n                           n_iter=10,n_jobs=-1, verbose=2)\n\ngbc_rs.fit(x_train, y_train)\ngbc_pred = gbc_rs.best_estimator_.predict(x_test)\ngbc_best_score = accuracy_score(y_test, gbc_pred)\nscore.append(['GBC', dict(gbc_rs.best_params_), gbc_best_score])\n","c4b2a4e9":"xgb_rs = RandomizedSearchCV(estimator=XGBClassifier(), param_distributions=random_xgb, cv=RepeatedStratifiedKFold(n_splits=5, n_repeats=2),\n                           n_iter=10, n_jobs=-1, verbose=2)\n\nxgb_rs.fit(x_train,y_train)\nxgb_pred = xgb_rs.best_estimator_.predict(x_test)\nxgb_best_score = accuracy_score(y_test, xgb_pred)\n\nscore.append(['XGB', dict(xgb_rs.best_params_), xgb_best_score])","2f318d03":"rf_rs = RandomizedSearchCV(estimator = RandomForestClassifier(),param_distributions= random_rf, cv= RepeatedStratifiedKFold(n_repeats=5, n_splits=2),\n                          n_iter=10, n_jobs=-1, verbose=2)\n\nrf_rs.fit(x_train, y_train)\nrf_pred = rf_rs.best_estimator_.predict(x_test)\nrf_best_score = accuracy_score(y_test, rf_pred)\nscore.append(['RandomForest', dict(rf_rs.best_params_), rf_best_score])","e196bd17":"score = pd.DataFrame(score,columns=['Model','Parameters','Score'])\nscore","58ec0f84":"People doing private jobs have higher rate of earning >=50k aswell as <50k.\n\nRate of earning >=50k is higher in Exec-managerial, Prof-specialty occupation.\n\nBachelors degree holder have higher chance of earning >=50k. Masters, Doctorate degrees have lower total count but there rate of earning >=50k\nis alot higher.","888c711e":"Dataframe has 32561 rows and 15 columns","1508fdcf":"According to data around 69.7% people are working privately.\n\nAround 32.2% where high school graduates, while 22.39% are collage graduates.\n\nProf-specialty, Craft-repair, and Exec-management occuaption are higher in count than other occupations.","802f1c96":"# GBC Classifier Hyperparameter tuning","6570740e":"First Lets do univariate analysis of Work related features.","50a34d3a":"I have used Log scale for better visualization.\n\n","67e4b199":"Bivariate Analysis of Work related Features","7b2594c9":"Income <=50k is almost 76%, Income >50k is 24%. There seems to be slight imbalance in data.","07095654":"# RandomForest Classifier Hyperparameter tuning","6ee911fe":"Droping fnlwgt columns as it's not important for exploratory data analysis.","13cb9941":"Label encoding all the Categorical features.\n\npeople earning  >=50k range between all ages.","05aeaab8":"There are no null values","658d5098":"Most people do 40 Hours per week.","6e9e1ba7":"# XGB Classifier Hyperparameter tuning","91e81914":"# ****Work Related Column Analysis****","fb268a63":"Rate of unmarried people earning >=50k is high, while count of married people earning >50k is high.\n\n","93bff6df":"46% of  people are married, whereas 32.8% never married.\n\nCount of husband working is alot higher than wife.\n\nCount of White race is higher than other races.\n\nMale count is double than that of female.","9b516cb0":"Split the data into two parts that are related to each other for EDA.","f891e1d6":"# Splitting The Data.","e6ca59b2":"# Demographic Column Analysis","60be188c":"US comprise 89.6% of total data, while only 10% is shared by other countries combined."}}