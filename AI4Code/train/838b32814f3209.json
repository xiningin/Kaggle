{"cell_type":{"810c74d0":"code","5548173b":"code","9d8a37c7":"code","7f01fad5":"code","52f2b509":"code","f9e264ce":"code","651c8d08":"code","2e783fd9":"code","3b93c2bd":"code","d41b7ea0":"code","65030868":"code","cbd9e817":"code","2f2e5923":"code","8fe3fd48":"code","2e36fb40":"code","af019eee":"code","c15f2d9d":"code","d28778e1":"code","283e7d3c":"code","938620d8":"code","125e9f94":"code","a85e5c36":"code","f803bab1":"code","126e40d0":"code","0651ae02":"code","b3e73eb8":"code","cf75be04":"code","35fcd5cc":"code","b786dc05":"code","6fbf4292":"code","e69b5f03":"code","ee4b0e07":"code","f95995d2":"code","9f957a4a":"code","8119efc8":"code","26ec71a8":"code","0ba9eaaa":"code","e805198c":"markdown"},"source":{"810c74d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom warnings import filterwarnings\nfilterwarnings = 'ignore'\n\nfrom collections import Counter\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5548173b":"median_house_hold_in_come = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/MedianHouseholdIncome2015.csv')\npercentage_people_below_poverty_level = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv')\npercent_over_25_completed_highSchool = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv')\nshare_race_city = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/ShareRaceByCity.csv')\nkill = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv')","9d8a37c7":"percentage_people_below_poverty_level.head()","7f01fad5":"percentage_people_below_poverty_level.info()","52f2b509":"percentage_people_below_poverty_level['poverty_rate'].value_counts()","f9e264ce":"percentage_people_below_poverty_level['poverty_rate'].replace('-',0.0,inplace=True)\npercentage_people_below_poverty_level['poverty_rate'] = percentage_people_below_poverty_level['poverty_rate'].astype(float)\narea_list = list(percentage_people_below_poverty_level['Geographic Area'].unique())\narea_poverty_ratio = []\nfor i in area_list:\n    x = percentage_people_below_poverty_level[percentage_people_below_poverty_level['Geographic Area'] == i]\n    area_poverty_rate = sum(x['poverty_rate'])\/len(x)\n    area_poverty_ratio.append(area_poverty_rate)\n\ndata = pd.DataFrame({'area_list':area_list, 'area_poverty_ratio':area_poverty_ratio})\ndata.head()\nnew_index = data['area_poverty_ratio'].sort_values(ascending=False).index.values\nsorted_data = data.reindex(new_index)\n\n# Vizualization\n\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['area_list'], y=sorted_data['area_poverty_ratio'])\nplt.xticks(rotation=90)\nplt.xlabel('States')\nplt.ylabel('Poverty Rate')\nplt.title('Poverty Rate Given States')\nplt.show()\n\n    ","651c8d08":"kill.head()","2e783fd9":"kill['name'].value_counts().head(20)","3b93c2bd":"separate = kill.name[kill.name!='TK TK'].str.split()\na,b = zip(*separate)\nname_list = a+b\nname_count = Counter(name_list)\nmost_common_names = name_count.most_common(15)\nx,y = zip(*most_common_names)\nx,y = list(x),list(y)\n\n# Vizualization\n\nplt.figure(figsize=(15,10))\nsns.barplot(x=x, y=y, palette=sns.cubehelix_palette(len(x)))\nplt.xlabel('Name or surname of killed people')\nplt.ylabel('Frequency')\nplt.title('Most common 15 name or surname of killed people')\nplt.show()\n","d41b7ea0":"percent_over_25_completed_highSchool.head()","65030868":"percent_over_25_completed_highSchool['percent_completed_hs'].value_counts()","cbd9e817":"percent_over_25_completed_highSchool.info()","2f2e5923":"percent_over_25_completed_highSchool['percent_completed_hs'].replace('-',0.0, inplace=True)\npercent_over_25_completed_highSchool['percent_completed_hs'] = percent_over_25_completed_highSchool['percent_completed_hs'].astype(float)\narea_list = list(percent_over_25_completed_highSchool['Geographic Area'].unique())\narea_highschool = []\nfor i in area_list:\n    x= percent_over_25_completed_highSchool[percent_over_25_completed_highSchool['Geographic Area']==i]\n    area_highschool_rate = sum(x['percent_completed_hs'])\/len(x)\n    area_highschool.append(area_highschool_rate)\n    \ndata = pd.DataFrame({'area_list':area_list,'area_highschool_ratio':area_highschool})\nnew_index = data['area_highschool_ratio'].sort_values().index.values\nsorted_data2 = data.reindex(new_index)\n\n# Vizualization\n\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2['area_list'], y=sorted_data2['area_highschool_ratio'])\nplt.xticks(rotation=90)\nplt.xlabel('States')\nplt.ylabel('High School Graduate Rate')\nplt.title('Percentage of Given States Population Above 25 that Has Graduated High School')\nplt.show()","8fe3fd48":"share_race_city.head()","2e36fb40":"share_race_city.info()","af019eee":"share_race_city.replace('(X)',0.0,inplace=True)\nshare_race_city.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']] = share_race_city.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']].astype(float)\narea_list = list(share_race_city['Geographic area'].unique())\n\nshare_white = []\nshare_black = []\nshare_native_american = []\nshare_asian = []\nshare_hispanic = []\n\nfor i in area_list:\n    x = share_race_city[share_race_city['Geographic area']==i]\n    share_white.append(sum(x['share_white'])\/len(x))\n    share_black.append(sum(x['share_black'])\/len(x))\n    share_native_american.append(sum(x['share_native_american'])\/len(x))\n    share_asian.append(sum(x['share_asian'])\/len(x))\n    share_hispanic.append(sum(x['share_hispanic'])\/len(x))\n    \nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=share_white,y=area_list,color='green',alpha=0.5,label='White')\nsns.barplot(x=share_black,y=area_list,color='blue',alpha=0.7,label='Black')\nsns.barplot(x=share_native_american,y=area_list,color='cyan',alpha=0.6,label='Native American')\nsns.barplot(x=share_asian,y=area_list,color='red',alpha=0.6,label='Asian')\nsns.barplot(x=share_hispanic,y=area_list,color='yellow',alpha=0.6,label='Hispanic')\n\nax.legend(loc='lower right', frameon=True)\nax.set(xlabel='Percentage of Races',ylabel='States',title='Percentage of States Population According to Races')\nplt.show()","c15f2d9d":"# high school graduation rate vs poverty rate of each state\n\n# normalization\nsorted_data['area_poverty_ratio'] = sorted_data['area_poverty_ratio'] \/ max(sorted_data['area_poverty_ratio'])\nsorted_data2['area_highschool_ratio'] = sorted_data2['area_highschool_ratio'] \/ max(sorted_data2['area_highschool_ratio'])\n\ndata = pd.concat([sorted_data,sorted_data2['area_highschool_ratio']], axis=1)\n\n# vizualization\n\nf,ax1 = plt.subplots(figsize=(20,10))\nsns.pointplot(x='area_list', y='area_poverty_ratio', data=data, color='lime', alpha=0.8)\nsns.pointplot(x='area_list', y='area_highschool_ratio', data=data, color='red', alpha=0.8)\nplt.text(40, 0.6, 'highschool_graduated_ratio', color='red', fontsize=17, style='italic')\nplt.text(40, 0.55, 'poverty_ratio', color='lime', fontsize=17, style='italic')\nplt.xlabel('States', fontsize=15, color='blue')\nplt.ylabel('Values', fontsize=15, color='blue')\nplt.title('High school graduation rate vs poverty rate of each state', fontsize=20, color='blue')\nplt.grid()\nplt.show()","d28778e1":"g = sns.jointplot(x = 'area_poverty_ratio', y = 'area_highschool_ratio', data=data, kind='kde')\n","283e7d3c":"g = sns.jointplot(x = 'area_poverty_ratio', y = 'area_highschool_ratio', data=data, ratio=3, color='red')","938620d8":"# Race rates according in kill data\nkill.race.dropna(inplace=True)\nlabels = kill.race.value_counts().index\ncolors = ['grey','blue','red','yellow', 'green', 'brown']\nexplode = [0,0,0,0,0,0]\nsizes = kill.race.value_counts().values\n\n# vizualization\n\nplt.figure(figsize=(7,7))\nplt.pie(sizes, explode=explode, colors=colors, labels=labels, autopct='%1.1f%%')\nplt.title('Killed people according to races', color='blue', fontsize=15)\nplt.show()","125e9f94":"sns.lmplot(x = 'area_poverty_ratio', y = 'area_highschool_ratio', data=data)\nplt.show()","a85e5c36":"sns.kdeplot(x = 'area_poverty_ratio', y = 'area_highschool_ratio', data=data, shade=True, cut=3)\nplt.show()","f803bab1":"pal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=data, palette=pal, inner='points')\nplt.show()","126e40d0":"f,ax = plt.subplots(figsize=(5,5))\nsns.heatmap(data.corr(), annot=True, linewidth=.5, fmt='.1f', ax=ax)\nplt.show()","0651ae02":"kill.head()","b3e73eb8":"sns.boxplot(x='gender', y='age', hue='manner_of_death', data=kill, palette='PRGn')\nplt.show()","cf75be04":"sns.swarmplot(x='gender', y='age', hue='manner_of_death', data=kill)\nplt.show()","35fcd5cc":"sns.pairplot(data)\nplt.show()","b786dc05":"sns.countplot(data=kill, x='manner_of_death')\nplt.title('manner_of_death', color='blue', fontsize=15)\nplt.show()","6fbf4292":"sns.countplot(data=kill, x='gender')\nplt.title('gender', color='blue', fontsize=15)\nplt.show()","e69b5f03":"armed = kill.armed.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x=armed[:7].index, y=armed[:7].values)\nplt.xlabel('Weapon types')\nplt.ylabel('Number of weapon')\nplt.title('Kill Weapon', color='red', fontsize=15)\nplt.show()","ee4b0e07":"above25 = ['above25' if i>25 else 'below25' for i in kill.age]\ndf = pd.DataFrame({'age':above25})\nsns.countplot(x=df.age)\nplt.ylabel('Number of Killed People')\nplt.title('Age of Killed People', color='blue', fontsize=15)\nplt.show()","f95995d2":"sns.countplot(data=kill, x='race')\nplt.title('Race of Killed People', color='blue', fontsize=15)\nplt.show()","9f957a4a":"sns.countplot(data=kill, x='threat_level')\nplt.title('Threat Level', color='blue', fontsize=15)\nplt.show()","8119efc8":"sns.countplot(data=kill, x='flee')\nplt.title('Flee', color='blue', fontsize=15)\nplt.show()","26ec71a8":"sns.countplot(data=kill, x='body_camera')\nplt.title('Body Camera', color='blue', fontsize=15)\nplt.show()","0ba9eaaa":"sns.countplot(data=kill, x='signs_of_mental_illness')\nplt.title('Signs of mental illness', color='blue', fontsize=15)\nplt.show()","e805198c":"## Kernel Density Estimation (KDE) Plot"}}