{"cell_type":{"0a7ba76c":"code","a17b9661":"code","5234869c":"code","952026e8":"code","c8f81535":"code","e272bb05":"code","8e5b8878":"code","490baeac":"code","4793155b":"code","8f10e352":"code","1748237d":"code","9cb21074":"code","7d5d4de3":"code","823d653f":"code","3757a5fd":"code","2fc02ebd":"code","4e81ac8b":"code","7b633090":"code","0c124066":"code","b6b1a9c0":"code","b83f4fe8":"code","b8c2397c":"code","be05bb09":"code","2cb53c65":"code","982626b6":"code","733bd191":"code","0251bbef":"code","5ce82515":"code","9510309c":"code","2552fa23":"code","9d44e669":"code","5f4906b7":"code","c51772f7":"code","510a7392":"code","3b02cd06":"code","ed26c757":"code","9bbbf0ef":"code","c721faa2":"code","51219619":"code","e83c2c80":"markdown","95b570e2":"markdown","951772e2":"markdown","dad2af30":"markdown","6669f597":"markdown","5e9d2643":"markdown","d294922d":"markdown","0d01b0f1":"markdown","07bcefde":"markdown","247d9ae3":"markdown","7c0d4476":"markdown","a6cc6c41":"markdown","51dcb6cb":"markdown","28545856":"markdown","110d5240":"markdown","3d9fa3a8":"markdown","f8879cb7":"markdown","79fdb569":"markdown","a453eada":"markdown"},"source":{"0a7ba76c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","a17b9661":"data_names = pd.read_csv('..\/input\/zomato-restaurants-hyderabad\/Restaurant names and Metadata.csv')\ndata_reviews = pd.read_csv('..\/input\/zomato-restaurants-hyderabad\/Restaurant reviews.csv')","5234869c":"data_names.head()","952026e8":"data_reviews.head()","c8f81535":"# Looking at the data types and NaN values\ndata_names.info()","e272bb05":"# Counting the unique values\ndata_names.nunique()","8e5b8878":"# Looking at the data types and NaN values\ndata_reviews.info()","490baeac":"# Counting the unique values\ndata_reviews.nunique()","4793155b":"# Renaming the restaurant name column with the same value as in the other data set:\ndata_reviews = data_reviews.rename(columns={'Restaurant': 'Name'})\n\n# Merging the two data sets:\ndf = pd.merge(data_reviews, data_names, how='left', on='Name')\n\n# Dropping the columns which I am not going to use:\ndf.drop(['Reviewer', 'Time', 'Pictures', 'Links', 'Collections'], axis=1, inplace=True)\ndf.head()","8f10e352":"# Changing cost and rating columns data types:\ndf['Cost'] = df['Cost'].str.replace(',', '').astype(int)\ndf['Rating'] = df['Rating'].str.replace('Like', '1').astype(float)\ndf.info()","1748237d":"print('Nu of data inputs:', len(df))\nprint('\\nNu of NaN values for each column:\\n')\nprint(df.isnull().sum())","9cb21074":"# Examine missing Rating values:\ndf['Name'][df['Rating'].isnull() == True].value_counts()","7d5d4de3":"print('Mean of Rating for American Wild Wings: ', df['Rating'][df['Name'] == 'American Wild Wings'].mean())\nprint('Mean of Rating for Arena Eleven: ', df['Rating'][df['Name'] == 'Arena Eleven'].mean())\nprint('Overall Mean of Ratings: ', df['Rating'].mean())","823d653f":"df['Rating'].fillna(4, inplace=True)\n\n# Changing NaN reviews by '-'\ndf['Review'] = df['Review'].fillna('-')\ndf.isnull().sum()","3757a5fd":"# Filling missing values:\ndf['Metadata'].fillna('0 Review , 0 Follower', inplace=True)\n\n# Standardizing strings\ndf['Metadata'] = df['Metadata'].str.replace('Reviews', 'Review')\ndf['Metadata'] = df['Metadata'].str.replace('Followers', 'Follower')\n\ndf['Metadata'][df['Metadata'].str.endswith('w')] = df['Metadata'][df['Metadata'].str.endswith('w')] + ' , - Follower'\n\n# Splitting into two columns\ndf[['Reviews', 'Followers']] = df['Metadata'].str.split(' , ', expand=True)\n\n# Erasing wording from the columns\ndf['Reviews'] = df['Reviews'].str.replace('Review', '')\ndf['Reviews'] = df['Reviews'].str.replace('Posts', '')\ndf['Reviews'] = df['Reviews'].str.replace('Post', '')\n\ndf['Followers'] = df['Followers'].str.replace('Follower', '')\ndf['Followers'] = df['Followers'].str.replace('-', '0')\n\n# Changing str values to integers\ndf[['Reviews', 'Followers']] = df[['Reviews', 'Followers']].astype(int)\n\n# Dropping the initial column\ndf.drop(['Metadata'], axis=1, inplace=True)\n\n# Sorting restaurants with their names and costs\ndf = df.sort_values(['Name', 'Cost'], ascending=False).reset_index()\ndf.drop('index', axis=1, inplace=True)","2fc02ebd":"df.head()","4e81ac8b":"restaurants = list(df['Name'].unique())\ndf['Mean Rating'] = 0\ndf['Mean Reviews'] = 0\ndf['Mean Followers'] = 0\n\nfor i in range(len(restaurants)):\n    df['Mean Rating'][df['Name'] == restaurants[i]] = df['Rating'][df['Name'] == restaurants[i]].mean()\n    df['Mean Reviews'][df['Name'] == restaurants[i]] = df['Reviews'][df['Name'] == restaurants[i]].mean()\n    df['Mean Followers'][df['Name'] == restaurants[i]] = df['Followers'][df['Name'] == restaurants[i]].mean()","7b633090":"df.sample(3)","0c124066":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler(feature_range = (1,5))\n\ndf[['Mean Rating', 'Mean Reviews', 'Mean Followers']] = scaler.fit_transform(df[['Mean Rating', 'Mean Reviews', 'Mean Followers']]).round(2)\n\ndf.sample(3)","b6b1a9c0":"import re\nfrom nltk.corpus import stopwords\nfrom sklearn.metrics.pairwise import linear_kernel\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer","b83f4fe8":"# 5 examples of these columns before text processing:\ndf[['Review', 'Cuisines']].sample(5)","b8c2397c":"# Define symbols to be replaced by space\nreplace_space = re.compile('[\/(){}\\[\\]\\|@,;]')\n# Define symbols to be removed\nremove_symbols = re.compile('[^0-9a-z #+_]')\n# Define stopwords\nstopwords = set(stopwords.words('english'))\n\ndef text_preprocessing(text):\n    # Lowercase all the letters\n    text = text.lower()\n    \n    # Replace these symbols with space\n    text = replace_space.sub(' ', text)\n    \n    # Remove these symbols\n    text = remove_symbols.sub('', text)\n    \n    # Remove stopwords\n    text = ' '.join(word for word in text.split() if word not in stopwords)\n    \n    return text","be05bb09":"df['Review'] = df['Review'].apply(text_preprocessing)\ndf['Cuisines'] = df['Cuisines'].apply(text_preprocessing)","2cb53c65":"# Columns after processed:\ndf[['Review','Cuisines']].sample(5)","982626b6":"# RESTAURANT NAMES:\nrestaurant_names = list(df['Name'].unique())\nrestaurant_names","733bd191":"df_rating = df.drop_duplicates(subset='Name')\ndf_rating = df_rating.sort_values(by='Mean Rating', ascending=False).head(10)\n\nplt.figure(figsize=(7,5))\nsns.barplot(data=df_rating, x='Mean Rating', y='Name', palette='RdBu')\nplt.title('Top Rated 10 Restaurants');","0251bbef":"df_reviews = df.drop_duplicates(subset='Name')\ndf_reviews = df_reviews.sort_values(by='Mean Reviews', ascending=False).head(10)\n\nplt.figure(figsize=(7,5))\nsns.barplot(data=df_reviews, x='Mean Reviews', y='Name', palette='RdBu')\nplt.title('Top Reviewed 10 Restaurants');","5ce82515":"df_followers = df.drop_duplicates(subset='Name')\ndf_followers = df_followers.sort_values(by='Mean Followers', ascending=False).head(10)\n\nplt.figure(figsize=(7,5))\nsns.barplot(data=df_followers, x='Mean Followers', y='Name', palette='RdBu')\nplt.title('Most Followed Top 10 Restaurants');","9510309c":"def get_top_words(column, top_nu_of_words, nu_of_word):\n    \n    vec = CountVectorizer(ngram_range= nu_of_word, stop_words='english')\n    \n    bag_of_words = vec.fit_transform(column)\n    \n    sum_words = bag_of_words.sum(axis=0)\n    \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    \n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    \n    return words_freq[:top_nu_of_words]","2552fa23":"# Top 20 two word frequencies for Cuisines\nlist1 = get_top_words(df['Cuisines'], 20, (2,2))\n\ndf_words1 = pd.DataFrame(list1, columns=['Word', 'Count'])\n\nplt.figure(figsize=(7,6))\nsns.barplot(data=df_words1, x='Count', y='Word')\nplt.title('Word Couple Frequency for Cuisines');","9d44e669":"# Top 20 two word frequencies for Reviews\nlist2 = get_top_words(df['Review'], 20, (2,2))\n\ndf_words2 = pd.DataFrame(list2, columns=['Word', 'Count'])\n\nplt.figure(figsize=(7,6))\nsns.barplot(data=df_words2, x='Count', y='Word')\nplt.title('Word Couple Frequency for Reviews');","5f4906b7":"# Changing data set index by restaurant name\ndf.set_index('Name', inplace=True)\n\n# Saving indexes in a series\nindices = pd.Series(df.index)\n\n# Creating tf-idf matrix\ntfidf = TfidfVectorizer(analyzer='word', ngram_range=(1, 2), min_df=0, stop_words='english')\ntfidf_matrix = tfidf.fit_transform(df['Review'])\n\n# Calculating cosine similarities\ncosine_similarities = linear_kernel(tfidf_matrix, tfidf_matrix)","c51772f7":"def recommend(name, cosine_similarities = cosine_similarities):\n    \n    # Create a list to put top 10 restaurants\n    recommend_restaurant = []\n    \n    # Find the index of the hotel entered\n    idx = indices[indices == name].index[0]\n    \n    # Find the restaurants with a similar cosine-sim value and order them from bigges number\n    score_series = pd.Series(cosine_similarities[idx]).sort_values(ascending=False)\n    \n    # Extract top 30 restaurant indexes with a similar cosine-sim value\n    top30_indexes = list(score_series.iloc[0:31].index)\n    \n    # Names of the top 30 restaurants\n    for each in top30_indexes:\n        recommend_restaurant.append(list(df.index)[each])\n    \n    # Creating the new data set to show similar restaurants\n    df_new = pd.DataFrame(columns=['Cuisines', 'Mean Rating', 'Cost', 'Timings'])\n    \n    # Create the top 30 similar restaurants with some of their columns\n    for each in recommend_restaurant:\n        df_new = df_new.append(pd.DataFrame(df[['Cuisines','Mean Rating', 'Cost', 'Timings']][df.index == each].sample()))\n    \n    # Drop the same named restaurants and sort only the top 10 by the highest rating\n    df_new = df_new.drop_duplicates(subset=['Cuisines','Mean Rating', 'Cost'], keep=False)\n    df_new = df_new.sort_values(by='Mean Rating', ascending=False).head(10)\n    \n    print('TOP %s RESTAURANTS LIKE %s WITH SIMILAR REVIEWS: ' % (str(len(df_new)), name))\n    \n    return df_new","510a7392":"# HERE IS A RANDOM RESTAURANT. LET'S SEE THE DETAILS ABOUT THIS RESTAURANT:\ndf[df.index == 'Hyderabadi Daawat'].head(1)","3b02cd06":"# LET'S SEE WHAT ARE WE GOING TO BE RECOMMENDED:\nrecommend('Hyderabadi Daawat')","ed26c757":"# HERE IS A BAKERY. LET'S SEE THE DETAILS ABOUT THIS RESTAURANT:\ndf[df.index == 'Labonel'].head(1)","9bbbf0ef":"# LET'S SEE WHAT ARE WE GOING TO BE RECOMMENDED:\nrecommend('Labonel')","c721faa2":"# HERE IS A MEDITERRANEAN \/ NORT INDIAN \/ KEBAB \/ BBQ RESTAURANT. LET'S SEE THE DETAILS ABOUT THIS RESTAURANT:\ndf[df.index == 'Barbeque Nation'].sample(1)","51219619":"# LET'S SEE WHAT ARE WE GOING TO BE RECOMMENDED:\nrecommend('Barbeque Nation')","e83c2c80":"## Handling Missing Values","95b570e2":"## 2. Example:","951772e2":"So there are only two restaurants with total of 38 NaN rating values.\n\nLet's see individual restaurant's average rating value.","dad2af30":"Thanks for your attention and please upvote if you appreciate my work.\n\nMelih","6669f597":"Rating column is important for recommender system. So I am not going to drop those 38 NaN values.\n\nLet's examine data with NaN rating value.  \n\nI will fill those NaN values with each restaurants' mean rating value.","5e9d2643":"# RESTAURANT RECOMMENDER SYSTEM\n\nThis data set consists of restaurants of Hyderabad\/India collected from Zomato.\n\nMy aim is to create a content based recommender system in which;\n* I will write a restaurant name,\n* Recommender system will look at the reviews of other restaurants\n* System will recommend us other restaurants with similar reviews and sort them from the highest rated.","d294922d":"## Merging Two Data Sets\n\nI will merge these two data sets.\n\nAfter the merging I will have a data set with individual customer reviews and ratings for the restaurants.","0d01b0f1":"## Feature Scaling\n\nI will scale the features between 1-5.","07bcefde":"## Text Preprocessig and Cleaning\n\nWe will be using 'Review' and 'Cuisines' feature'in order to create a recommender system.\n\nSo we need to prepare and clean the text in those columns.","247d9ae3":"## 3. Example:","7c0d4476":"## Testing the Recommender System\n\n## 1. Example:","a6cc6c41":"## Creating the Recommender System:","51dcb6cb":"# CONTENT BASE RECOMMENDER SYSTEM\n\n## TF-IDF Matrix (Term Frequency \u2014 Inverse Document Frequency Matrix)\n\nTF-IDF method is used to quantify words and compute weights for them. \n\nIn other words, representing each word (or couples of words etc.) with a number in order to use mathematics in our recommender system.\n\nCosine similarity is a metric used to determine how similar the documents are irrespective of their size.","28545856":"We can see that mean value for missing rating value should be 4 (3,9 and 4,1 for each restaurant). \n\nLet's fill those restaurants missing rating values.","110d5240":"## EDA - Word Frequency Distribution:","3d9fa3a8":"## EDA - Analysing Restaurants and Popularities","f8879cb7":"## Creating New Features (Mean of Ratings, Reviews, and Followers)\n\nRating, Review, and Followers columns represents individual customers' inputs.\n\nI am going to find the means of these values and assign them for the restaurants.","79fdb569":"## Separating Metadata (Reviews and Followers)\n\nI will separate review and follower numbers into different columns in order to use it later.","a453eada":"## Preparing Cost and Rating Columns"}}