{"cell_type":{"5613dc91":"code","d77ed07c":"code","9b93004f":"code","59696b79":"code","45a2fe79":"code","b719739d":"code","0d7c09b7":"code","ba61efd0":"code","88409991":"code","5b2d4b6e":"code","4a74fe1a":"code","e72a4894":"code","a6c9a59b":"code","8caaa928":"markdown","f8487291":"markdown","a7016c53":"markdown","a2c9054f":"markdown","638b8684":"markdown"},"source":{"5613dc91":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","d77ed07c":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import log_loss","9b93004f":"df = pd.read_json(open(\"..\/input\/train.json\", \"r\"))","59696b79":"print(df.shape)","45a2fe79":"df.head()","b719739d":"print(df.shape)","0d7c09b7":"df[\"num_photos\"] = df[\"photos\"].apply(len)\ndf[\"num_features\"] = df[\"features\"].apply(len)\ndf[\"num_description_words\"] = df[\"description\"].apply(lambda x: len(x.split(\" \")))\ndf[\"created\"] = pd.to_datetime(df[\"created\"])\ndf[\"created_year\"] = df[\"created\"].dt.year\ndf[\"created_month\"] = df[\"created\"].dt.month\ndf[\"created_day\"] = df[\"created\"].dt.day","ba61efd0":"num_feats = [\"bathrooms\", \"bedrooms\", \"latitude\", \"longitude\", \"price\",\n             \"num_photos\", \"num_features\", \"num_description_words\",\n             \"created_year\", \"created_month\", \"created_day\"]\nX = df[num_feats]\ny = df[\"interest_level\"]\nX.head()","88409991":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.33)","5b2d4b6e":"clf = RandomForestClassifier(n_estimators=1000)\nclf.fit(X_train, y_train)\ny_val_pred = clf.predict_proba(X_val)\nlog_loss(y_val, y_val_pred)","4a74fe1a":"df = pd.read_json(open(\"..\/input\/test.json\", \"r\"))\nprint(df.shape)\ndf[\"num_photos\"] = df[\"photos\"].apply(len)\ndf[\"num_features\"] = df[\"features\"].apply(len)\ndf[\"num_description_words\"] = df[\"description\"].apply(lambda x: len(x.split(\" \")))\ndf[\"created\"] = pd.to_datetime(df[\"created\"])\ndf[\"created_year\"] = df[\"created\"].dt.year\ndf[\"created_month\"] = df[\"created\"].dt.month\ndf[\"created_day\"] = df[\"created\"].dt.day\nX = df[num_feats]\n\ny = clf.predict_proba(X)","e72a4894":"labels2idx = {label: i for i, label in enumerate(clf.classes_)}\nlabels2idx","a6c9a59b":"sub = pd.DataFrame()\nsub[\"listing_id\"] = df[\"listing_id\"]\nfor label in [\"high\", \"medium\", \"low\"]:\n    sub[label] = y[:, labels2idx[label]]\nsub.to_csv(\"submission_rf.csv\", index=False)","8caaa928":"# train model","f8487291":"# read data","a7016c53":"# Random forest\n- It is the ensemble of Decicion Trees a.k.a combination of Decision Trees. \n- <a href='https:\/\/www.kaggle.com\/lpdataninja\/data-science-glossary-3-decision-trees'>Click here to learn more about Decision Trees.<\/a>","a2c9054f":"# make prediction","638b8684":"# feature engineering"}}