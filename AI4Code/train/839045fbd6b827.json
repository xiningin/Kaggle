{"cell_type":{"4151fa5a":"code","e86f9030":"code","fbb2c928":"code","2d11d10e":"code","87ea28dd":"code","30fa13c5":"code","1ee423b5":"code","aee3f790":"code","a299d361":"code","ad0e9e9b":"code","603dd600":"code","1e81ceca":"code","e3c2e3f4":"code","2e8ff17b":"code","1596a6d5":"code","42a2c53c":"code","22be4de4":"code","9665546d":"code","c908eb2f":"code","9048cf88":"markdown","1cf754de":"markdown","1cde450d":"markdown","9145fd62":"markdown","eea9b7a3":"markdown","ec60c9ec":"markdown"},"source":{"4151fa5a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","e86f9030":"X_train = pd.read_csv('..\/input\/student-performance-data-set-competition-form\/X_train.csv')\nX_test = pd.read_csv('..\/input\/student-performance-data-set-competition-form\/X_test.csv')\ny_train = pd.read_csv('..\/input\/student-performance-data-set-competition-form\/y_train.csv')\ny_test = pd.read_csv('..\/input\/student-performance-data-set-competition-form\/test_label\/y_test.csv')","fbb2c928":"X_train.head()","2d11d10e":"y_train.head()","87ea28dd":"print(sum(X_train.isnull().sum()), sum(y_train.isnull().sum()))","30fa13c5":"studentID = X_test['StudentID']\nX_train = X_train.drop(['StudentID'], axis = 1)\nX_test = X_test.drop(['StudentID'], axis = 1)\ny_train = y_train.drop(['StudentID'], axis = 1)\ny_test = y_test.drop(['StudentID'], axis = 1)","1ee423b5":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ncat = ['school', 'sex', 'address', 'famsize', 'Pstatus', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic' ]\nX_train[cat] = X_train[cat].apply(le.fit_transform)\nX_test[cat] = X_test[cat].apply(le.fit_transform)","aee3f790":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nfet = ['age', 'G1', \"G2\"]\nX_train[fet] = sc.fit_transform(X_train[fet])\nX_test[fet] = sc.transform(X_test[fet])","a299d361":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers = [('encoder', OneHotEncoder(),['Mjob', 'Fjob', 'reason',  'guardian'])], remainder = 'passthrough')\nX_train = np.array(ct.fit_transform(X_train))\nX_test = np.array(ct.transform(X_test))","ad0e9e9b":"from sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import GridSearchCV","603dd600":"def model(name, algo, models):\n    gscv = GridSearchCV(estimator = algo[0], param_grid = algo[1], refit=False)\n    gscv.fit(X_train, y_train)\n#     y_pred = gscv.fit.predict(X_test)\n    ele = (algo[0], gscv.best_params_, gscv.best_score_*100)\n    models.append([name, gscv.best_params_, gscv.best_score_*100])\n#     models.append(['name : {0}, best parameters : {1}, best score : {2}'.format(*ele)])\n#     print('name : {0}, best parameters : {1}, best score : {2}'.format(*ele))","1e81ceca":"algos = {\n    'Linear Regression' : [LinearRegression(), [{}]],\n    'SVR' : [SVR(), [{'kernel' : ['linear','poly', 'rbf', 'sigmoid'], 'C': [0.25, 0.5, 0.75, 1], 'gamma': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]}]],\n    'Decision Tree Regressor' : [DecisionTreeRegressor(), [{'criterion' : ['squared_error', 'friedman_mse', 'absolute_error', 'poisson'], 'splitter': ['best', 'random']}]],\n    'Random Forest Regressor' : [RandomForestRegressor(), [{'n_estimators' : [10, 25, 30, 50, 75, 100]}]],\n    'XGB Regressor' : [XGBRegressor(), [{'n_estimators' : [10, 25, 50, 75, 100]}]]\n}","e3c2e3f4":"best_param_algos = []\n[model(name, algo, best_param_algos) for name, algo in algos.items()]","2e8ff17b":"models = pd.DataFrame(best_param_algos, columns=['Model', 'Best Parameters', 'Best Score'])\nmodels = models.sort_values(by = 'Best Score', ascending = False)\nmodels","1596a6d5":"from sklearn.metrics import r2_score, mean_squared_error","42a2c53c":"model = RandomForestRegressor(n_estimators = 75)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test).astype(int)","22be4de4":"r2s = [r2_score(y_test, y_pred)]\nmse = [mean_squared_error(y_test, y_pred, squared=True)]\nrmse = [mean_squared_error(y_test, y_pred, squared=False)]\nmetrics = {'R2 Score' : r2s, 'Mean Squared Error' : mse, 'Root Mean Squared Error' : rmse}\nmetrics = pd.DataFrame(metrics)\nmetrics","9665546d":"result = pd.DataFrame({'StudentID' : studentID, 'G3' : y_pred})\nresult.to_csv('result.csv', index = False)","c908eb2f":"result.head()","9048cf88":"# Feature Scaling","1cf754de":"# Importing Dataset","1cde450d":"# Importing Libraries","9145fd62":"# Training the dataset using the model with best parameters","eea9b7a3":"# Applying Grid Search to find the best model and the best parameters","ec60c9ec":"# Pre-processing "}}