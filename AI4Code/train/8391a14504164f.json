{"cell_type":{"1cdb0736":"code","f9fc743c":"code","56b718f7":"code","b27bffd4":"code","81130ef1":"code","d0af2b0d":"code","2237aac0":"code","0441f577":"code","cbc206f2":"code","5e92f9cd":"code","01b7ec92":"code","97678479":"code","360a7933":"code","c8906602":"code","c8358179":"code","1f075f25":"code","f10ba12f":"code","7f6a3902":"code","ba87ea37":"code","a7772590":"code","632f44f9":"code","d53d7913":"code","0d0d9f60":"code","db955e77":"code","cd79ea86":"code","fcad7019":"code","beef6006":"code","50b5f7dc":"code","0ef32b3f":"code","b77fc20a":"code","3d188ff5":"code","37412f35":"code","ada07b89":"code","b798a0c1":"code","488099a6":"code","d6f9a2fc":"code","7632ad52":"code","e1e87d16":"code","3fe116a0":"code","985b327b":"code","dc5f3088":"code","4983d33f":"code","364b4124":"code","4563cf50":"code","f958bc11":"markdown","1039ec8e":"markdown","8ef66a81":"markdown","d40a34ae":"markdown","d65c78df":"markdown","bef926f6":"markdown","b74a462e":"markdown","5f8509d3":"markdown","96c8b0a5":"markdown","aa98daee":"markdown","ec1e4cdb":"markdown","8da572d1":"markdown","83fbb09b":"markdown","573e0526":"markdown","4a93271e":"markdown","a5cf88b5":"markdown"},"source":{"1cdb0736":"# Importing library\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","f9fc743c":"plt.rcParams[\"figure.dpi\"] = 200\nplt.rcParams[\"axes.spines.top\"] = False\nplt.rcParams[\"axes.spines.right\"] = False","56b718f7":"train = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/test.csv\")","b27bffd4":"train_data=train\ntest_data=test","81130ef1":"train.shape","d0af2b0d":"test.shape","2237aac0":"train.head(10)","0441f577":"test.head(10)","cbc206f2":"train.isnull().sum()","5e92f9cd":"test.isnull().sum()","01b7ec92":"train.dtypes","97678479":"test.dtypes","360a7933":"train[\"date\"]=pd.to_datetime(train[\"date\"])\ntest[\"date\"]=pd.to_datetime(test[\"date\"])","c8906602":"c=train[\"country\"].value_counts()","c8358179":"s=train[\"store\"].value_counts()","1f075f25":"p=train[\"product\"].value_counts()","f10ba12f":"plt.pie(p.values,labels=p.index)\nplt.legend()\nplt.show()","7f6a3902":"plt.bar(s.index,s.values , color=\"purple\")\nplt.show()","ba87ea37":"plt.bar(c.index,c.values , color=\"pink\")\nplt.show()","a7772590":"c","632f44f9":"s","d53d7913":"p","0d0d9f60":"print(\"Train-Data\")\nprint(\"Duration Starts from: \", train[\"date\"].min())\nprint(\"Duration Ends from: \",train[\"date\"].max())","db955e77":"print(\"Test-Data\")\nprint(\"Duration Starts from: \", test[\"date\"].min())\nprint(\"Duration Ends from: \",test[\"date\"].max())","cd79ea86":"train_month = train.set_index(\"date\").groupby([pd.Grouper(freq=\"M\"),\"country\",\"store\",\"product\"])[\"num_sold\"].mean().unstack([1,2,3])\ntrain_month_country=train.set_index(\"date\").groupby([pd.Grouper(freq=\"M\"),\"country\"])[\"num_sold\"].mean().unstack()","fcad7019":"train_month.head()","beef6006":"fig, ax= plt.subplots(1,1,figsize=(12,9))\ntrain.set_index(\"date\").groupby([pd.Grouper(freq=\"M\")])['num_sold'].mean().plot(ax=ax)\nax.set_title(\"Monthly Trend\",fontsize=15,loc=\"left\")\nplt.show()","50b5f7dc":"fig, ax=plt.subplots(1,1,figsize=(12,9))\ntrain.set_index(\"date\").groupby([pd.Grouper(freq=\"M\"),\"country\"])[\"num_sold\"].mean().unstack().plot(ax=ax)\nax.set_title(\"Monthly Trends By Country\")\nplt.show()","0ef32b3f":"train[\"dayofweek\"]=train[\"date\"].dt.dayofweek","b77fc20a":"fig, ax=plt.subplots(1,1,figsize=(9,6))\ntrain.set_index(\"date\").groupby([pd.Grouper(freq=\"M\"),\"dayofweek\"])[\"num_sold\"].mean().unstack().plot(ax=ax)\nax.set_title(\"Trend by Day of the Week\")\nplt.show()","3d188ff5":"train[\"weekend\"]=train[\"dayofweek\"].apply(lambda x : x>=5)\nfig,ax =plt.subplots(1,1,figsize=(12,9))\ntrain.set_index(\"date\").groupby([pd.Grouper(freq=\"M\"),\"weekend\"])[\"num_sold\"].mean().unstack().plot(ax=ax)\nax.set_title(\"Weekend vs Weekdays Trend Comparison\")\nplt.show()","37412f35":"!pip install pycaret[full]","ada07b89":"import gc\nimport cudf\nfrom pycaret.regression import *","b798a0c1":"train = cudf.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv', index_col = 'row_id').to_pandas()\ntest = cudf.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv', index_col = 'row_id').to_pandas()","488099a6":"def feature_eng(df):\n    df['date'] = pd.to_datetime(df['date'])\n    df['week']= df['date'].dt.week\n    df['year'] = 'Y' + df['date'].dt.year.astype(str)\n    df['quarter'] = 'Q' + df['date'].dt.quarter.astype(str)\n    df['day'] = df['date'].dt.day\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df.loc[(df.date.dt.is_leap_year) & (df.dayofyear >= 60),'dayofyear'] -= 1\n    df['weekend'] = df['date'].dt.weekday >=5\n    df['weekday'] = 'WD' + df['date'].dt.weekday.astype(str)\n    df.drop(columns=['date'],inplace=True)  \n\nfeature_eng(train)\nfeature_eng(test)","d6f9a2fc":"def SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200.0\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)","7632ad52":"reg = setup(data = train,\n            target = 'num_sold',\n            normalize = True, #normalisation helps some algorithms\n            normalize_method = 'robust', #resilient to outliers\n            transform_target = True, #applies transformation to target column\n            data_split_shuffle = False, #so that we do not use \"future\" observations to predict \"past\" observations\n            create_clusters = True,\n            feature_interaction = True,\n            use_gpu = True,\n            silent = True,\n            n_jobs = -1)","e1e87d16":"models()","3fe116a0":"add_metric('SMAPE', 'SMAPE', SMAPE, greater_is_better = False)","985b327b":"N = 3\ntop = compare_models(sort = 'SMAPE', n_select = N)","dc5f3088":"blend = blend_models(top)\npredict_model(blend);","4983d33f":"final_blend = finalize_model(blend)\npredict_model(final_blend);","364b4124":"gc.collect()\nunseen_predictions_blend = predict_model(final_blend, data=test)\nunseen_predictions_blend.head()","4563cf50":"gc.collect()\n\nassert(len(test.index)==len(unseen_predictions_blend))\n\nsub = pd.DataFrame(list(zip(test.index, unseen_predictions_blend.Label)),columns = ['row_id', 'num_sold'])\n\nsub.to_csv('submission.csv', index = False)\n\nprint(sub)","f958bc11":"We need to change Date column since it is  in text format","1039ec8e":"Grouping by days\n> Time series data such as product sales often have different distribution on weekends and weekdays ","8ef66a81":"Visualizing using bar charts","d40a34ae":"# New Notebook Starts Here\n> # Part 2: Prediction","d65c78df":"- Train data starts in 2015 and ends in 2018 \n- Test data starts in 2019 and ends in 2019","bef926f6":"Visualizing Product","b74a462e":"Grouping by month makes it eaiser to see overall trends. ","5f8509d3":"Visualizing Sores using Bar chart","96c8b0a5":"Here a visualization of the average of the days of the week by month to see the weekend trends:\n\n- 0: mon\n- 1: tue\n- 2: wed\n- 3:thu\n- 4 :fri\n- 5:sat\n- 6:sun","aa98daee":"Grouping by months","ec1e4cdb":"# Part 1: EDA","8da572d1":"As a result of counting for each column we can say that our dataset is well balanced","83fbb09b":"Loading dataset","573e0526":"Finding for Unqiue Values in Train Data","4a93271e":"Weekends vs Weekdays","a5cf88b5":"Checking for null values "}}