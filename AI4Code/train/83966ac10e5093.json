{"cell_type":{"30fc7894":"code","2583f876":"code","7a4ce710":"code","0ad222f3":"code","8fe83203":"code","1b98d58a":"code","f6a4b1cd":"code","981e98cf":"code","4a7ec79a":"code","6ef7e2b7":"code","d3e30bd0":"code","e6690071":"code","3a3ec5f0":"code","a3977ebf":"code","ee6fdaeb":"code","9203a00c":"code","27881613":"code","68ff5334":"code","e510a2ef":"code","0da5d987":"code","9a5307d5":"code","4104d77c":"code","9deceadc":"code","3235e90f":"code","85024505":"code","32844ec6":"code","6b95b0d5":"code","ce2fdc34":"code","cbbfa3da":"code","bce2361e":"code","6b249210":"code","c3f95651":"code","02073410":"code","f993f0d9":"markdown","8e4e42e1":"markdown","e77d2b35":"markdown","793149b1":"markdown","94182ff6":"markdown","699f7d35":"markdown","98485ca5":"markdown","71bb0b37":"markdown","82a20043":"markdown","dfa7f05e":"markdown","55bcc090":"markdown","7ff74016":"markdown","2bd1df89":"markdown","d64a16c5":"markdown","5c508aba":"markdown","9b1a2264":"markdown","6a856ff5":"markdown","a0bff3d3":"markdown","5b278986":"markdown","1fa7f631":"markdown","11eb3d8a":"markdown","a3e6bb79":"markdown","7b43d850":"markdown","6d96a39b":"markdown","ac089cbf":"markdown","18958273":"markdown","aef9ea05":"markdown","e87b39ce":"markdown","f90af63e":"markdown","2ec595d9":"markdown","64a85cf8":"markdown","3d34aa8b":"markdown","546cff2a":"markdown"},"source":{"30fc7894":"import numpy as np\nimport pandas as pd","2583f876":"from plotly import __version__\nimport cufflinks as cf\nfrom plotly.offline import download_plotlyjs, init_notebook_mode,plot, iplot\ninit_notebook_mode(connected = True)\ncf.go_offline()","7a4ce710":"df = pd.read_csv('..\/input\/montcoalert\/911.csv')","0ad222f3":"df.info()","8fe83203":"df.head()","1b98d58a":"df['zip'].value_counts().head(5)","f6a4b1cd":"df['twp'].value_counts().head(5)","981e98cf":"len(df.groupby('title').nunique())","4a7ec79a":"def get_reason(title):\n    return title.split(':')[0]\n\ndf['Reason'] = df['title'].apply(lambda x: get_reason(x))\n\ndf.head()","6ef7e2b7":"df['Reason'].value_counts().head()","d3e30bd0":"import seaborn as sns\n\nsns.countplot(x= df['Reason'], data= df)\n","e6690071":"type(df['timeStamp'].iloc[0])","3a3ec5f0":"df['timeStamp'] = pd.to_datetime(df['timeStamp'])\ntime = df['timeStamp'].iloc[3]\ntime.hour","a3977ebf":"df['Hour'] = df['timeStamp'].apply(lambda time: time.hour)\ndf['Month'] = df['timeStamp'].apply(lambda time: time.month)\ndf['Day of Week'] = df['timeStamp'].apply(lambda time: time.dayofweek)","ee6fdaeb":"# Here is my dictionary for days of the week\ndmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","9203a00c":"df['Day of Week'] = df['Day of Week'].map(dmap)","27881613":"sns.countplot(x= df['Day of Week'], data= df, hue= df['Reason'])","68ff5334":"sns.countplot(x= df['Month'], data= df, hue= df['Reason'])","e510a2ef":"byMonth = df.groupby('Month').count()\nbyMonth.head()","0da5d987":"byMonth['twp'].plot()","9a5307d5":"sns.lmplot(x='Month',y='twp',data=byMonth.reset_index())","4104d77c":"df['Date']= df['timeStamp'].apply(lambda time: time.date())\ndf.head()","9deceadc":"byDate = df.groupby('Date').count()","3235e90f":"byDate['twp'].plot()","85024505":"import matplotlib.pyplot as plt\ndf[df['Reason']=='Traffic'].groupby('Date').count()['twp'].plot()\nplt.title('Traffic')\nplt.tight_layout()\n","32844ec6":"df[df['Reason']=='EMS'].groupby('Date').count()['twp'].plot()\nplt.title('EMS')\nplt.tight_layout()\n","6b95b0d5":"df[df['Reason']=='Fire'].groupby('Date').count()['twp'].plot()\nplt.title('Fire')\nplt.tight_layout()\n","ce2fdc34":"dayHour = df.groupby(by=['Day of Week','Hour']).count()['Reason'].unstack()\ndayHour.head()","cbbfa3da":"plt.figure(figsize=(12,6))\nheat = sns.heatmap(dayHour)","bce2361e":"plt.figure(figsize=(9,9))\n\nsns.clustermap(dayHour)","6b249210":"dayMonth = df.groupby(by=['Day of Week','Month']).count()['Reason'].unstack()\ndayMonth.head()","c3f95651":"plt.figure(figsize=(10,6))\nheat = sns.heatmap(dayMonth)","02073410":"plt.figure(figsize=(8,6))\nsns.clustermap(dayMonth)","f993f0d9":"## 911 Calls Capstone Project\n#### By: Dana Cassidy","8e4e42e1":"**I will create a new column called 'Date' that contains the date from the timeStamp column.** ","e77d2b35":"** I noticed the data was missing some months, so I will fill in the blanks by plotting the information in another way **","793149b1":"## Starting out","94182ff6":"** What is the most common Reason for a 911 call based off of this new column? **","699f7d35":"Now I will groupby this Date column with the count() aggregate and create a plot of counts of 911 calls.","98485ca5":"** Looking at the 'title' column, how many unique title codes are there? **","71bb0b37":"** Now I will create heatmaps with seaborn and the data. I first will restructure the dataframe so that the columns become the Hours and the Index becomes the Day of the Week. **","82a20043":"** Now create a clustermap using this DataFrame. **","dfa7f05e":"** Check the head of df **","55bcc090":"** Now see if you can use seaborn's lmplot() to create a linear fit on the number of calls per month. Keep in mind you may need to reset the index to a column. **","7ff74016":"** Import visualization libraries and set %matplotlib inline. **","2bd1df89":"** Now I will do the same for Month **","d64a16c5":"** Now I will use seaborn to create a countplot of the Day of Week column with the hue based off of the Reason column. **","5c508aba":"___\n** Now let us begin to focus on time information. What is the data type of the objects in the timeStamp column? **","9b1a2264":"** Now use seaborn to create a countplot of 911 calls by Reason. **","6a856ff5":"** I will use the .map() with this dictionary to map the actual string names to the day of the week: **","a0bff3d3":"** Now I will create a HeatMap using this new DataFrame. **","5b278986":"** Now I will create a simple plot off of the dataframe indicating the count of calls per month. **","1fa7f631":"** Now I will repeat these same plots and operations, for a DataFrame that shows the Month as the column. **","11eb3d8a":"** Read in the csv file as a dataframe called df **","a3e6bb79":"** What are the top 5 townships (twp) for 911 calls? **","7b43d850":"** I will create a gropuby object called byMonth, where I group the DataFrame by the month column and use the count() method for aggregation. **","6d96a39b":"____\n** Import numpy and pandas **","ac089cbf":"## Creating new features","18958273":"*This notebook was based off questions and instructions from the Python for Data Science and Machine Learning Bootcamp by Jose Portilla. **I solved all of the questions on my own merit and time.** I adjusted some of the markdown instructions to make more sense with my submission. *","aef9ea05":"## Data and Setup","e87b39ce":"** In the titles column there are \"Reasons\/Departments\" specified before the title code. These are EMS, Fire, and Traffic. I will use .apply() with a custom lambda expression to create a new column called \"Reason\" that contains this string value.** ","f90af63e":"** Now I will recreate this plot but create 3 separate plots with each plot representing a Reason for the 911 call**","2ec595d9":"** You should have seen that these timestamps are still strings. I will use pd.to_datetime to convert the column from strings to DateTime objects. **","64a85cf8":"**  Now that the timestamp column are actually DateTime objects, I will use .apply() to create 3 new columns called Hour, Month, and Day of Week. I will create these columns based off of the timeStamp column.","3d34aa8b":"** What are the top 5 zipcodes for 911 calls? **","546cff2a":"** Check the info() of the df **"}}