{"cell_type":{"ab29c290":"code","50b267a3":"code","461edc4c":"code","53e8ee71":"code","0050ac91":"code","904240f4":"code","a19eaa0a":"code","1e01eadc":"code","888ec572":"code","b2ec3c33":"code","d70b22ad":"code","7ae772be":"code","52853052":"code","1ce69b7a":"code","ca7f4f0f":"code","7cbdfe3f":"code","ce08e8cd":"code","8448d8ca":"code","14c46517":"code","a5b945cb":"code","76281c5e":"code","6f18ac59":"code","35dcda81":"code","ee42874d":"code","de9e3672":"code","cb9ac05a":"code","7db250d8":"code","33e65459":"code","a65948e0":"markdown","a56df4ef":"markdown","b8341e0e":"markdown","c2870e3b":"markdown","ae2b89ff":"markdown","eb7c417e":"markdown","2c6f53b7":"markdown","6cd28f51":"markdown","e949d1b2":"markdown","1222131a":"markdown","e3807086":"markdown","75baac1d":"markdown","625ec734":"markdown","7fe44074":"markdown","566d6238":"markdown"},"source":{"ab29c290":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf \nfrom statsmodels.tsa.seasonal import seasonal_decompose \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","50b267a3":"df=pd.read_csv('..\/input\/time-series-datasets\/Electric_Production.csv',parse_dates=[0])\ndf=df.rename(columns={'IPG2211A2N':'usage','DATE':'date'})\ndf = df.set_index('date')\ndf.head()","461edc4c":"%matplotlib inline\ndf.plot(figsize=(8,4))","53e8ee71":"seasonal = seasonal_decompose(df.usage,model='add')\nfig = plt.figure()  \nfig = seasonal.plot()  \nfig.set_size_inches(10, 8)","0050ac91":"from statsmodels.tsa.stattools import adfuller   #Dickey-Fuller test\ndef test_stationarity(timeseries):\n\n    #Determing rolling statistics\n    rolmean = timeseries.rolling(window=20).mean()\n    rolstd = timeseries.rolling(window=20).std()\n\n    #Plot rolling statistics:\n    fig = plt.figure(figsize=(12, 6))\n    orig = plt.plot(timeseries, color='blue',label='Original')\n    mean = plt.plot(rolmean, color='red', label='Rolling Mean')\n    std = plt.plot(rolstd, color='black', label = 'Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show()\n\n    #Perform Dickey-Fuller test:\n    print('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries, autolag='AIC')  #autolag : {\u2018AIC\u2019, \u2018BIC\u2019, \u2018t-stat\u2019, None}\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print(dfoutput)","904240f4":"test_stationarity(df.usage)","a19eaa0a":"df['first_difference'] = df.usage - df.usage.shift(1)   \ntest_stationarity(df.first_difference.dropna(inplace=False))","1e01eadc":"!pip install pmdarima","888ec572":"import pmdarima as pm\nfrom pmdarima.model_selection import train_test_split","b2ec3c33":"df1=df.drop(columns='first_difference')","d70b22ad":"train, test = train_test_split(df1, train_size=320)","7ae772be":"train, test = train_test_split(df1, train_size=320)\n\n# Fit your model\nmodel = pm.auto_arima(train, seasonal=True, m=12)","52853052":"model.summary()","1ce69b7a":"from statsmodels.tsa.statespace.sarimax import SARIMAX\npred_model = SARIMAX(train.usage, order=(1,0,2), seasonal_order=(0,1,1,12))\nresults = pred_model.fit()","ca7f4f0f":"test_pred=test.copy()\ntest_pred = results.predict(start = len(train), end = len(df)-1, typ=\"levels\")  ","7cbdfe3f":"test['usage'].plot(figsize = (12,5), label='real usage')\ntest_pred.plot(label = 'predicted usage')\nplt.legend(loc='upper right')","ce08e8cd":"from statsmodels.tools.eval_measures import rmse\narima_rmse_error = rmse(test['usage'], test_pred)\narima_mse_error = arima_rmse_error**2\nprint(f'MSE Error: {arima_mse_error}\\nRMSE Error: {arima_rmse_error}')","8448d8ca":"train1=pd.concat([train, train.shift(-1), train.shift(-2),train.shift(-3),train.shift(-4),train.shift(-5),\n                 train.shift(-6),train.shift(-7),train.shift(-8),train.shift(-9),train.shift(-10),train.shift(-11),train.shift(-12)\n                 ], axis=1).dropna()\ntrain1.columns = ['usage', 'usage1', 'usage2','usage3','usage4', 'usage5','usage6'\n                 ,'usage7', 'usage8','usage9','usage10', 'usage11', 'usage12']\ntrain1.head()","14c46517":"test1=pd.concat([test, test.shift(-1), test.shift(-2),test.shift(-3),test.shift(-4),test.shift(-5),\n                 test.shift(-6),test.shift(-7),test.shift(-8),test.shift(-9),test.shift(-10),test.shift(-11),test.shift(-12)\n                 ], axis=1).dropna()\ntest1.columns = ['usage', 'usage1', 'usage2','usage3','usage4', 'usage5','usage6'\n                 ,'usage7', 'usage8','usage9','usage10', 'usage11','usage12']\ntest1.head()","a5b945cb":"train1_y=train1.loc[:, train1.columns == 'usage']\ntrain1_x=train1.loc[:, train1.columns != 'usage']\n\ntest1_y=test1.loc[:, test1.columns == 'usage']\ntest1_x=test1.loc[:, test1.columns != 'usage']","76281c5e":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n\nmodel = Sequential()\n\nmodel.add(LSTM(20, activation='relu',input_shape=(12, 1)))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse',metrics=['mean_squared_error'])\n\nmodel.summary()","6f18ac59":"train1_x = np.expand_dims(train1_x, 2)\ntest1_x = np.expand_dims(test1_x, 2)\nprint(\"New train data shape:\")\nprint(train1_x.shape)\nprint(\"New test data shape:\")\nprint(test1_x.shape)","35dcda81":"run=model.fit(train1_x,train1_y,epochs=40)","ee42874d":"plt.plot(run.epoch,run.history.get('loss'))","de9e3672":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","cb9ac05a":"model.evaluate(test1_x,test1_y)","7db250d8":"test1_pred=model.predict(test1_x)\ntest_pred=pd.DataFrame(test1_pred, columns=['test_pred']) \n#test_true=pd.DataFrame(test1_y, columns=['test_true']) \ntest_pred.index=test1_y.index\ntest_pred=test_pred.merge(test1_y,left_index=True, right_index=True)","33e65459":"plt.figure(figsize=(12,5))\nplt.plot( test_pred.index, 'usage', data=test_pred, markerfacecolor='blue', markersize=12, color='skyblue', linewidth=2,label='reality')\nplt.plot( test_pred.index, 'test_pred', data=test_pred, color='orange', linewidth=2,label='prediction')\nplt.legend(loc='upper right')","a65948e0":"![](http:\/\/)<font color='purple'> From above plot and the statistics we can see, the model reached MSE as 22.843, which is pretty good.<\/font>","a56df4ef":"![](http:\/\/)<font color='purple'> After around 6-10 epochs, the model reached a 10.87 MSE while the same number on test dataset is 17.224. We can see the model had a good performance.<\/font>","b8341e0e":"![](http:\/\/)<font color='purple'> We can see that the data are not stationary. Thus, I will build a \u201cFirst Order Difference\" column to stabilize the standard deviation.<\/font>","c2870e3b":"# Electricity Usage Prediction Using Time Series \n<font size=\"3\">@Cicily Wu<\/font>","ae2b89ff":"<font color='purple'>I will use Dickey-Fuller test to see the stationarity of these data.<\/font>","eb7c417e":"![](http:\/\/)<font color='purple'> First, I want to process the data. A common operation on time-series data is to shift or \"lag\" the values back and forward in time, such as to calculate percentage change from sample to sample. The pandas method for this is .shift(), which will shift the values in the index by a specified number of units of the index's period.<\/font>","2c6f53b7":"![](http:\/\/)<font color='purple'>The LSTM model's required input data shape is 3-dimensions. Since our data is 2-dimensions data, we need to modify it.<\/font>","6cd28f51":"<font color='purple'> After pocessing, the data are stationary for now. Let's build the model. \"Pmdarima\" is a good package to help us find the best parameters for SARIMA model. This helper function makes whole process easiear since I do not have to tune parameters manually.<\/font>","e949d1b2":"# 2. Seasonal ARIMA Model","1222131a":"![](https:\/\/assets.greentechmedia.com\/assets\/content\/cache\/made\/assets\/content\/cache\/remote\/https_assets.greentechmedia.com\/content\/images\/articles\/Urban_Electric_Grid_721_420_80_s_c1.jpg)","e3807086":"Time series analysis comprises methods for analyzing time series data in order to extract meaningful statistics and other characteristics of the data. Time series forecasting is the use of a model to predict future values based on previously observed values.\n\nThe demand for electricity has been continuously increasing over the years. To understand the future consumption, a good predictive method is entailed, which is time series analysis.\n\nIn this project, I will build two different models to predict the electricity usage:\n1. ARIMA model: ARIMA, short for 'Auto Regressive Integrated Moving Average' is actually a class of models that 'explains' a given time series based on its own past values, that is, its own lags and the lagged forecast errors, so that equation can be used to forecast future values.\n2. LSTM Neural Network model: Long short-term memory is an artificial recurrent neural network architecture used in the field of deep learning. Unlike standard feedforward neural networks, LSTM has feedback connections. It can not only process single data points, but also entire sequences of data. \n\nThe dataset includes the monthly electricity usage data from 1985-01-01 to 2018-01-01. ","75baac1d":"<font color='purple'>From above plots we can see, the usage data appeares a strong seasonal trend. Therefore, instead of ARIMA, we choose to use SRIMA.<\/font>\n\nSeasonal Autoregressive Integrated Moving Average, SARIMA or Seasonal ARIMA, is an extension of ARIMA that explicitly supports univariate time series data with a seasonal component.\nConfiguring a SARIMA requires selecting hyperparameters for both the trend and seasonal elements of the series.\n\n**Trend Elements:**\nThere are three trend elements that require configuration.\n\nThey are the same as the ARIMA model; specifically:\n\np: Trend autoregression order.\nd: Trend difference order.\nq: Trend moving average order.\n\n**Seasonal Elements:**\nThere are four seasonal elements that are not part of ARIMA that must be configured; they are:\n\nP: Seasonal autoregressive order.\nD: Seasonal difference order.\nQ: Seasonal moving average order.\nm: The number of time steps for a single seasonal period.\n\nTogether, the notation for an SARIMA model is specified as:\n\n**SARIMA(p,d,q)(P,D,Q)m**","625ec734":"# 1. Project Statement","7fe44074":"# 3. LSTM Neural Network Model","566d6238":"![](http:\/\/)<font color='purple'> The comparison of real usage and predicted usage on testdataset is shown in the above plot.<\/font>"}}