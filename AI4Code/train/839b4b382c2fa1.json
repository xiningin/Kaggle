{"cell_type":{"85c625c8":"code","7bebfa6f":"code","d3042afe":"code","041d6448":"code","ed2031b1":"code","e3ceda54":"code","d57bcf15":"code","d7759b40":"code","7a1e2672":"code","c80b202e":"code","ad9f7f46":"code","b4b3e51c":"code","9898d29c":"code","59e5d9a4":"code","bbeba2c3":"code","3c4a1251":"code","5e0081cf":"code","478440f0":"code","71f57732":"code","8c4d5f8d":"code","da0e8687":"code","8e92c260":"code","3e8d6215":"code","722da98d":"code","c211a2d4":"code","518303f8":"code","e1a054c1":"code","5ac24bab":"code","ff34ea5a":"code","7cfb0ac9":"code","97d26f53":"code","47fa5dd2":"code","094771f4":"code","cb592c37":"code","f3839043":"code","37a234a5":"code","807d1f34":"code","6ff5d9ff":"code","5a984553":"code","a5280414":"code","fc1bcff4":"code","2675ad52":"code","16d1b37c":"code","d4294956":"code","08376509":"code","bcb2cad4":"code","32aa9a09":"code","0e41f7c3":"code","e9b8c587":"code","3968b8d2":"code","c981730e":"code","57089494":"code","ed4ee4d6":"code","3e8754f6":"code","9a236d02":"code","cf390804":"code","44dd86f7":"code","387cd4ae":"code","f2b40454":"code","9f98d5f3":"code","f9556a99":"code","d3a3f9d4":"code","bc5d8881":"code","de14912f":"code","1e806d08":"code","78f0b10b":"code","b8270bb8":"code","0d5d5729":"code","37bc6afb":"code","cdbbfceb":"code","3551be93":"code","925ac9d1":"code","37513763":"code","9e64f6a6":"code","0b213814":"code","0644f86d":"code","0d0c3995":"code","39540b20":"code","9a818eaa":"code","6b5f862a":"code","a3fab98a":"code","1c214077":"code","82725028":"code","a65cfc3a":"code","95c79118":"code","95969a24":"code","dc98d624":"markdown","0c703ddc":"markdown","d569a7ef":"markdown","49e72578":"markdown","7164049d":"markdown","8a233129":"markdown","ca67c5a7":"markdown"},"source":{"85c625c8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\n\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom sklearn.ensemble import AdaBoostClassifier, VotingClassifier, RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import preprocessing\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression","7bebfa6f":"# read datasets\ntrain_df=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain_df.head()","d3042afe":"test_df=pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest_df.head()","041d6448":"gender_sub=pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ngender_sub.head()","ed2031b1":"train_df.Survived.value_counts()","e3ceda54":"train_df.shape","d57bcf15":"train_df.info()","d7759b40":"round(100*(train_df.isnull().sum()\/len(train_df.index)),2)","7a1e2672":"### check missing values\nround(100*(test_df.isnull().sum()\/len(test_df.index)),2)","c80b202e":"gender_sub['PassengerId']=test_df['PassengerId']\ngender_sub.head()\ngender_sub.info()","ad9f7f46":"train_df.describe()","b4b3e51c":"train_df.describe(include=['O'])","9898d29c":"train_df.Pclass.value_counts()","59e5d9a4":"train_df[['Pclass','Survived']].groupby('Pclass', as_index=False).mean()","bbeba2c3":"train_df[['Sex','Survived']].groupby('Sex', as_index=False).mean()","3c4a1251":"sns.barplot('Sex','Survived',data=train_df)","5e0081cf":"sns.barplot('Pclass','Survived',data=train_df)","478440f0":"train_df[['Embarked','Survived']].groupby('Embarked', as_index=False).mean()","71f57732":"sns.barplot('Embarked','Survived',data=train_df)","8c4d5f8d":"train_df[['Parch','Survived']].groupby('Parch', as_index=False).mean()","da0e8687":"sns.barplot('Parch','Survived',data=train_df)","8e92c260":"train_df[['SibSp','Survived']].groupby('SibSp',as_index=False).mean()","3e8d6215":"sns.barplot('SibSp','Survived',data=train_df)","722da98d":"plt.figure(figsize=(10,6))\nplt.subplot(1,3,1)\nsns.violinplot('Sex','Age',data=train_df,hue='Survived',split=True)\nplt.subplot(1,3,2)\nsns.violinplot('Embarked','Age',data=train_df,hue='Survived',split=True)\nplt.subplot(1,3,3)\nsns.violinplot('Pclass','Age',data=train_df,hue='Survived',split=True)","c211a2d4":"## creating column label\n\ntrain_df['Title']=train_df['Name'].str.split(', ', expand=True)[1].str.split('.',expand=True)[0]\ntest_df['Title']=test_df['Name'].str.split(', ', expand=True)[1].str.split('.',expand=True)[0]\ntrain_df.head()","518303f8":"train_df.Title.value_counts()","e1a054c1":"train_df['Title']=train_df['Title'].replace(['Dr','Rev','Major','Mlle','Col','Don','Dona','Ms','Mme','Capt','Lady',\n                                            'the Countess','Sir','Jonkheer'],'Other')\ntest_df['Title']=test_df['Title'].replace(['Dr','Rev','Major','Mlle','Col','Don','Dona','Ms','Mme','Capt','Lady',\n                                            'the Countess','Sir','Jonkheer'],'Other')","5ac24bab":"train_df.Title.value_counts()","ff34ea5a":"sns.boxplot(train_df['Age'])","7cfb0ac9":"train_df['Age']=train_df['Age'].fillna(train_df['Age'].mean()).astype(int)\ntest_df['Age']=test_df['Age'].fillna(test_df['Age'].mean()).astype(int)","97d26f53":"def age_bins(df):\n    df.loc[(df['Age']<=10),'Age'] = 0\n    df.loc[(df['Age']>10) & (df['Age']<=21),'Age'] = 1\n    df.loc[(df['Age']>21) & (df['Age']<=35),'Age'] = 2\n    df.loc[(df['Age']>35) & (df['Age']<=50),'Age'] = 3\n    df.loc[(df['Age']>50) & (df['Age']<=65),'Age'] = 4\n    df.loc[(df['Age']>65),'Age'] = 5","47fa5dd2":"age_bins(train_df)\nage_bins(test_df)","094771f4":"## family size column\n\ntrain_df['Family_size']=train_df['SibSp'] + train_df['Parch'] + 1\ntest_df['Family_size']=test_df['SibSp'] + test_df['Parch'] + 1\ntrain_df.head()","cb592c37":"test_df['Fare']=test_df['Fare'].fillna(test_df['Fare'].median()).astype(int)","f3839043":"train_df['fareperperson']=train_df['Fare']\/train_df['Family_size']\ntest_df['fareperperson']=test_df['Fare']\/test_df['Family_size']","37a234a5":"def fare_bins(df):\n    df.loc[(df['fareperperson']<=10),'fareperperson'] = 0\n    df.loc[(df['fareperperson']>10) & (df['fareperperson']<=21),'fareperperson'] = 1\n    df.loc[(df['fareperperson']>21) & (df['fareperperson']<=35),'fareperperson'] = 2\n    df.loc[(df['fareperperson']>35) & (df['fareperperson']<=50),'fareperperson'] = 3\n    df.loc[(df['fareperperson']>50) & (df['fareperperson']<=65),'fareperperson'] = 4\n    df.loc[(df['fareperperson']>65),'fareperperson'] = 5","807d1f34":"fare_bins(train_df)\nfare_bins(test_df)","6ff5d9ff":"train_df['Cabin']=train_df['Cabin'].fillna('Missing')\ntrain_df['Cabin']=train_df['Cabin'].str[:1]\n\ntest_df['Cabin']=test_df['Cabin'].fillna('Missing')\ntest_df['Cabin']=test_df['Cabin'].str[:1]","5a984553":"train_df['Cabin'].unique()","a5280414":"#drop the column cabin\ntrain_df.drop(['Name','Ticket','PassengerId','Parch','SibSp','Fare'],axis=1,inplace=True)\ntest_df.drop(['Name','Ticket','PassengerId','Parch','SibSp','Fare'],axis=1,inplace=True)","fc1bcff4":"train_df.Sex.value_counts()","2675ad52":"train_df['Sex']=train_df.Sex.map({'male' : 1, 'female' : 0})\ntest_df['Sex']=test_df.Sex.map({'male' : 1, 'female' : 0})\ntrain_df.head()","16d1b37c":"plt.hist(train_df['Age'])\nplt.show()","d4294956":"train_df['Embarked']=train_df['Embarked'].fillna('S')\ntest_df['Embarked']=test_df['Embarked'].fillna('S')","08376509":"le=preprocessing.LabelEncoder()\n\ntrain_df['Cabin']=le.fit_transform(train_df['Cabin'])\ntest_df['Cabin']=le.fit_transform(test_df['Cabin'])\n\ntrain_df=pd.get_dummies(train_df,drop_first=True)\ntest_df=pd.get_dummies(test_df,drop_first=True)\ntrain_df.head()","bcb2cad4":"round(100*(train_df.isnull().sum()\/len(train_df.index)),2)","32aa9a09":"train_df.head()","0e41f7c3":"round(100*(train_df.isnull().sum()\/len(train_df.index)),2)","e9b8c587":"test_df.head()","3968b8d2":"round(100*(test_df.isnull().sum()\/len(test_df.index)),2)","c981730e":"train_df.head()","57089494":"X=train_df.drop(['Survived'],axis=1)\ny=train_df['Survived']\n","ed4ee4d6":"dt_default=DecisionTreeClassifier(max_depth=5)\ndt_default.fit(X,y)","3e8754f6":"y_pred=dt_default.predict(test_df)\nprint(y_pred)","9a236d02":"gender_sub['Survived']=y_pred\ngender_sub.head()\ngender_sub.to_csv('gender_sub.csv',index=False)","cf390804":"logreg=LogisticRegression()","44dd86f7":"logreg.fit(X,y)","387cd4ae":"y_pred=logreg.predict(test_df)","f2b40454":"gender_sub['Survived']=y_pred\ngender_sub.head()\ngender_sub.to_csv('gender_sub_LR.csv',index=False)","9f98d5f3":"rf=RandomForestClassifier(max_depth=5)\nrf.fit(X,y)","f9556a99":"y_pred=rf.predict(test_df)","d3a3f9d4":"gender_sub['Survived']=y_pred\ngender_sub.head()\ngender_sub.to_csv('gender_sub_RF.csv',index=False)","bc5d8881":"### using grid search CV on RF","de14912f":"param_grid={\n    'max_depth' : [3,5,6,8,10,15],\n    'min_samples_split': range(5, 500, 20),\n    'min_samples_leaf': [3,5],\n    'n_estimators' : range(10,100,10),\n    'max_features' : range(3,7,1)\n}","1e806d08":"# rf=RandomForestClassifier()\n\n# grid_model=GridSearchCV(estimator=rf,\n#                        param_grid=param_grid,\n#                        verbose=1,\n#                        cv=3,\n#                        n_jobs=-1)","78f0b10b":"# grid_model.fit(X,y)","b8270bb8":"# printing the optimal accuracy score and hyperparameters\n# print('We can get accuracy of',grid_model.best_score_,'using',grid_model.best_params_)","0d5d5729":"# model with the best hyperparameters\nrfc = RandomForestClassifier(bootstrap=True,\n                             max_depth=10,\n                             min_samples_leaf=3, \n                             min_samples_split=5,\n                             max_features=3,\n                             n_estimators=20)","37bc6afb":"rfc.fit(X,y)","cdbbfceb":"y_pred=rfc.predict(test_df)","3551be93":"gender_sub['Survived']=y_pred\ngender_sub.head()\ngender_sub.to_csv('gender_sub_RF_GSCV.csv',index=False)","925ac9d1":"xgb=xgb.XGBClassifier()","37513763":"xgb.fit(X,y)","9e64f6a6":"y_pred=xgb.predict(test_df)","0b213814":"gender_sub['Survived']=y_pred\ngender_sub.head()\ngender_sub.to_csv('gender_sub_xgb.csv',index=False)","0644f86d":"adb=AdaBoostClassifier(learning_rate=0.1,n_estimators=5)","0d0c3995":"adb.fit(X,y)","39540b20":"y_pred=adb.predict(test_df)","9a818eaa":"gender_sub['Survived']=y_pred\ngender_sub.head()\ngender_sub.to_csv('gender_sub_adb.csv',index=False)","6b5f862a":"lgb=lgb.LGBMClassifier()","a3fab98a":"lgb.fit(X,y)","1c214077":"y_pred=xgb.predict(test_df)","82725028":"gender_sub['Survived']=y_pred\ngender_sub.head()\ngender_sub.to_csv('gender_sub_lgbm.csv',index=False)","a65cfc3a":"votingC = VotingClassifier(estimators=[('LGR', logreg),('LGB',lgb),('RFC',rf),('XGB',xgb),('ADB',adb)], voting='soft', \n                           n_jobs=4,weights=[1,1,2,2,1])\n\nvotingC = votingC.fit(X, y)","95c79118":"y_pred=votingC.predict(test_df)","95969a24":"gender_sub['Survived']=y_pred\ngender_sub.head()\ngender_sub.to_csv('gender_sub_votingC.csv',index=False)","dc98d624":"### Random Forest","0c703ddc":"### Logistic Regression","d569a7ef":"### Light GBM","49e72578":"### Voting Classifier","7164049d":"### XGboost","8a233129":"### Decision Trees","ca67c5a7":"### Adaboost"}}