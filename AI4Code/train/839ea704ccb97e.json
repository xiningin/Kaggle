{"cell_type":{"b50a8e97":"code","1d442bed":"code","95a0a848":"code","e8e11eb2":"code","af67fd06":"code","322b396e":"code","90b2954c":"code","9053138c":"markdown","a93dbf97":"markdown","fddd16ef":"markdown","9d2a0eb8":"markdown","08a9c444":"markdown"},"source":{"b50a8e97":"import matplotlib.pyplot as plt\nfrom scipy.io import loadmat\nimport numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score\nimport seaborn as sns\n%matplotlib inline","1d442bed":"data = loadmat('..\/input\/P300_NonP300_A_Train_Mod.mat')\ndata.keys()\nPdata = data['P300'][0]\nNPdata = data['NonP300'][0]\nprint(Pdata.shape , NPdata.shape)","95a0a848":"CARP300 = np.array([(mat.transpose()-mat.mean(axis=1)).transpose() for mat in Pdata])\nCARNonP300 = np.array([(mat.transpose()-mat.mean(axis=1)).transpose() for mat in NPdata])\nprint(CARP300.shape , CARNonP300.shape)","e8e11eb2":"P300Data = []\nfor m in CARP300:\n    P300Data += [i.reshape(240,15,order='F').mean(axis=1) for i in np.split(m[:,10],2)]\nP300Data = np.array(P300Data).transpose()\n\nNonP300Data = []\nfor m in CARNonP300:\n    NonP300Data += [i.reshape(240,15,order='F').mean(axis=1) for i in np.split(m[:,10],10)]\nNonP300Data = np.array(NonP300Data).transpose()\n\nprint(P300Data.shape , NonP300Data.shape) ","af67fd06":"DataTrain = np.concatenate((P300Data[:,:136],NonP300Data[:,:136]),axis=1).transpose()\nDataTest = np.concatenate((P300Data[:,136:170],NonP300Data[:,136:170]),axis=1).transpose()\nprint(DataTrain.shape , DataTest.shape)","322b396e":"from sklearn.decomposition import PCA\npca = PCA()\nproj = pca.fit_transform(DataTrain)\npcs = pca.components_.transpose()\nprojTest = np.dot(DataTest,pcs)\nprint(pcs.shape , proj.shape , projTest.shape)","90b2954c":"gnb = GaussianNB()\nscores = []\nfor numpcs in range(1,241):\n    X_train = proj[:,:numpcs]\n    X_test = projTest[:,:numpcs]\n    y_train = np.concatenate((np.ones(136),np.ones(136)*(-1)),axis=0)\n    y_test = np.concatenate((np.ones(34),np.ones(34)*(-1)),axis=0)\n    y_pred = gnb.fit(X_train, y_train).predict(X_test)\n    scores += [accuracy_score(y_pred,y_test)]\nplt.plot(scores)","9053138c":"# CAR Filter","a93dbf97":"# Naive Bayes","fddd16ef":"# Splitting Data into Train test","9d2a0eb8":"# PCA","08a9c444":"# Averaging across trials"}}