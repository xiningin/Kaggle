{"cell_type":{"eb52096f":"code","8e7b8c0a":"code","58bb0d27":"code","98bb8e95":"code","53e62601":"code","ca82c816":"code","fd54b5fd":"code","8da95f62":"code","64d6b0c8":"code","5c9d95fd":"code","5f00bef0":"code","9f0413a3":"code","12936995":"code","df8090e4":"code","477a84c8":"code","22fc1e60":"code","d379f77e":"code","cb9f9ec2":"code","3730af9d":"code","d0a9ae45":"code","04dce51c":"code","3a7aa955":"code","923717ea":"code","23207176":"markdown","ce0c0d04":"markdown","ab38b66a":"markdown","ba1afd32":"markdown","0c6acf74":"markdown","b8836a39":"markdown","32eb5171":"markdown","d2c6adee":"markdown","b0a6d01d":"markdown"},"source":{"eb52096f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import LabelEncoder\nimport matplotlib.pyplot as plt\n#from sklearn.model_selection import train_test_split\n#from sklearn.preprocessing import StandardScaler\n#from sklearn.neighbors import KNeighborsClassifier\n#from sklearn.metrics import confusion_matrix\n#from sklearn.metrics import f1_score\n#from sklearn.metrics import accuracy_score\n#print(len(Iris))\n#print(Iris.head())\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8e7b8c0a":"Iris = pd.read_csv(\"..\/input\/iris\/Iris.csv\")     #loding dataset\nprint(Iris)","58bb0d27":"IrisX=pd.DataFrame(Iris, columns= [\"SepalLengthCm\", \"SepalWidthCm\", \"PetalLengthCm\", \"PetalWidthCm\"])\nprint(IrisX)","98bb8e95":"IrisY=pd.DataFrame(Iris, columns= [\"Species\"])\nprint(IrisY)","53e62601":"Class={}\nfor i in range(0,len(Iris[\"Species\"].unique())):\n    Class[Iris[\"Species\"].unique()[i]]=i\nprint(Class)","ca82c816":"X = np.array(IrisX, dtype=float).T\nIris['Species']= LabelEncoder().fit_transform(Iris['Species'])\nIrisY=pd.DataFrame(Iris, columns= [\"Species\"])\nY = np.array(IrisY).T\np=np.random.permutation(X.shape[1])\nX=X[:,p]\nYorig=Y[:,p]\nC=i+1","fd54b5fd":"def oneHotEncoder(array,depth):\n    for i in range(0,array.shape[1]):\n        a=np.zeros((depth,1))\n        a[array[0][i]][0]=1\n        new=a if i==0 else np.append(new,a,axis=1)\n    return new","8da95f62":"Y=oneHotEncoder(Yorig,C)\nX_train=X[:,0:140]\nY_train=Y[:,0:140]\nYorigTrain=Yorig[:,0:140]\nX_test=X[:,140:]\nY_test=Y[:,140:]\nYorigTest=Yorig[:,140:]\nprint(np.shape(X),np.shape(Y),np.shape(X_train),np.shape(Y_train),np.shape(X_test),np.shape(Y_test),np.shape(YorigTrain),np.shape(YorigTest))","64d6b0c8":"def InitializeParameters(Layers):\n    parameters={}\n    for i in range (len(Layers)-1):\n        parameters['W'+str(i+1)]=np.random.randn(Layers[i+1],Layers[i])*np.sqrt(2\/(Layers[i]+Layers[i+1]))\n        parameters['b'+str(i+1)]=np.zeros((Layers[i+1],1))\n    L=int(len(parameters)\/2)\n    return L,parameters","5c9d95fd":"def RELU(Z):\n    return np.maximum(0,Z)","5f00bef0":"def sigmoid(Z):\n    #Z=-np.ones(np.shape(Z))*Z\n    return 1\/(1+np.exp(-Z))","9f0413a3":"def ForwardProp(X,parameters,L):\n    cache={}\n    A=X\n    cache['A'+str(0)]=A\n    for i in range (L-1):\n        Z=np.dot(parameters['W'+str(i+1)],A)+parameters['b'+str(i+1)]\n        A=RELU(Z)\n        cache['Z'+str(i+1)]=Z\n        cache['A'+str(i+1)]=A\n        cache['W'+str(i+1)]=parameters['W'+str(i+1)]\n        cache['b'+str(i+1)]=parameters['b'+str(i+1)]\n    Z=np.dot(parameters['W'+str(L)],A)+parameters['b'+str(L)]\n    A=sigmoid(Z)\n    cache['Z'+str(L)]=Z\n    cache['A'+str(L)]=A\n    cache['W'+str(L)]=parameters['W'+str(L)]\n    cache['b'+str(L)]=parameters['b'+str(L)]\n    return cache,A","12936995":"def costFunction(arrayLabel,arrayActivated):\n    loss=-(1\/m)*np.sum(arrayLabel*np.log(arrayActivated)+(1-arrayLabel)*np.log(1-arrayActivated))\n    return loss","df8090e4":"def sigmoidGrad(array):\n    return sigmoid(array)*(1-sigmoid(array))","477a84c8":"def RELUGrad(dA,Z):\n    dZ=np.array(dA, copy=True)\n    dZ[Z<=0]=0\n    return dZ","22fc1e60":"def backProp(X,Y,cache,A):\n    L=int(len(cache)\/4)\n    bCache={}\n    dA=-np.divide(Y,A)+np.divide(1-Y,1-A)\n    dZ=dA*sigmoidGrad(cache['Z'+str(L)])\n    bCache[\"dW\"+str(L)]=(1\/m)*np.dot(dZ,cache['A'+str(L-1)].T)\n    bCache[\"db\"+str(L)]=(1\/m)*np.sum(dZ,axis=1,keepdims=True)\n    dA=np.dot(cache['W'+str(L)].T,dZ)\n    for i in reversed(range(1,L)):\n        dZ=RELUGrad(dA,cache['Z'+str(i)])\n        bCache[\"dW\"+str(i)]=(1\/m)*np.dot(dZ,cache['A'+str(i-1)].T)\n        bCache[\"db\"+str(i)]=(1\/m)*np.sum(dZ,axis=1,keepdims=True)\n        dA=np.dot(cache['W'+str(i)].T,dZ)\n    return bCache","d379f77e":"bCache=backProp(X_test,Y_test,cache,A)","cb9f9ec2":"def updateParameters(learningRate,Parameters,Gradients):\n    for i in range(1,L+1):\n        Parameters['W'+str(i)]=Parameters['W'+str(i)]-learningRate*Gradients[\"dW\"+str(i)]\n        Parameters['b'+str(i)]=Parameters['b'+str(i)]-learningRate*Gradients[\"db\"+str(i)]\n    return Parameters","3730af9d":"def deepNeuralNetwork(X,Y,Layers,learningRate):\n    L,parameters=InitializeParameters(Layers)\n    costs=[]\n    for i in range(10000):\n        cache,A=ForwardProp(X,parameters,L)\n        cost=costFunction(Y,A)\n        costs.append(cost)\n        Gradients=backProp(X,Y,cache,A)\n        parameters=updateParameters(learningRate,parameters,Gradients)\n    print (\"Cost after iteration %i: %f\" %(i, cost))\n    plt.plot(costs)\n    plt.ylabel('cost')\n    plt.xlabel('iterations')\n    plt.title(\"Learning rate =\" + str(learningRate))\n    plt.show()\n    return L,parameters","d0a9ae45":"n,m=X_train.shape\nC=3\nLayers=[n,5,6,4,2,C]\nL,parameters=deepNeuralNetwork(X_train,Y_train,Layers,0.0075)","04dce51c":"def predict(X,Y,parameters,L):\n    _,A=ForwardProp(X,parameters,L)\n    f=np.argmax(A[:,:],axis=0)\n    a=np.max(A[0,0])\n    s=0\n    for i in range(len(f)):\n        if Y[0,i]==f[i]:\n            s+=1\n    return (s\/m)*100","3a7aa955":"prediction=predict(X_train,YorigTrain,parameters,L)\nprint(\"Prediction percentage on training set is \"+str(prediction)+\" %.\")","923717ea":"prediction=predict(X_test,YorigTest,parameters,L)\nprint(\"Prediction percentage on test set is \"+str(prediction)+\" %.\")","23207176":"n,m=X_test.shape[0],X_test.shape[1]\nLayers=[n,5,6,4,2,C]\nL,parameters=InitializeParameters(Layers)\ncache,A=ForwardProp(X_test,parameters,L)\n","ce0c0d04":"* **Converting String labels into numeric labels and Creating Randomized Dataset**","ab38b66a":"* **Converting Multiclass labels into Binary machine understandable form**","ba1afd32":"* **Loading Database**","0c6acf74":"* **Dividing the dataset into Training set and Test set**","b8836a39":"* **Loading Y**","32eb5171":"print(costFunction(Y_test,A))","d2c6adee":"* **Loading X**","b0a6d01d":"* **Dictionary to show the types of Classes**"}}