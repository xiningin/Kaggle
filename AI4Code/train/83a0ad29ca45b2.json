{"cell_type":{"4cd71fc9":"code","d80b723c":"code","65cba30f":"code","9d37e0a4":"code","aca7a0b9":"code","3d189093":"code","d5b61968":"code","ccef4ec6":"code","45ad9b32":"markdown","1dbc778c":"markdown","c52cdd52":"markdown","48576587":"markdown","76dd8494":"markdown","1ed4ea64":"markdown","5f23a434":"markdown"},"source":{"4cd71fc9":"#Your code goes here\ndef least_difference(a, b, c):\n    diff1 = abs(a - b)\n    diff2 = abs(b - c)\n    diff3 = abs(a - c)\n    return min(diff1, diff2, diff3)","d80b723c":"#Your code here test the function you created \n\nprint(least_difference(1, 10, 100))\nprint(least_difference(1, 10, 10))\nprint(least_difference(5, 6, 7))\n","65cba30f":"#Your code here - storing the return value into a variable\n\nanswer = least_difference(5,25,100)\n\nprint(answer)","9d37e0a4":"#Your code goes here copy paste the above function you created an take out return\n\ndef least_difference_no_return(a, b, c):\n    diff1 = abs(a - b)\n    diff2 = abs(b - c)\n    diff3 = abs(a - c)\n    min(diff1, diff2, diff3)","aca7a0b9":"#Your code goes here\nprint(least_difference_no_return(5,25,100))","3d189093":"#Your code goes here\ndef greet(who=\"World\"):\n    print(\"Hello,\", who)","d5b61968":"#Your code goes here\ngreet()\ngreet('Mars')","ccef4ec6":"#Set Up Code\n\nlist_of_numbers = [70,4,102,88]\n\n#Your code goes here start by defining a function that takes 1 arguement\n\n### Without Bonus\ndef largest_element(a_list):\n\n    largest = 0\n    \n    for i in a_list:\n        if i > largest:\n            largest = i\n            \n    return largest\n\n\n### With Bonus \ndef largest_element_bonus(a_list):\n    if type(a_list)== list: \n    \n        largest = 0\n        for i in a_list:\n            if type(i) == int: \n                if i > largest:\n                    largest = i\n            else:\n                print(\"please make sure each element in the list is of type int\")\n                return\n        return largest\n                    \n    else: \n        print(\"please input a list\")\n        return\n\nprint(largest_element(list_of_numbers))","45ad9b32":"# Functions that don't return\n\nSometimes you need a function to do some piece of code but don't need a value to come out from it. \n\nLet's see what would happen if we took return out of the function we created:","1dbc778c":"\nIn some cases, you may not need to store a value but want a function to execute some block of code as part of your program. Let's try an example of that!\n\nAlong without a return, this function comes with a `default` value. This is what happens when you assign a value to the arguement name in the function's brackets. If we don't pass the function a value, since we gave it the default value \"World\" the function still works. \n\n","c52cdd52":"# Putting it all together\n\nLet's try to create a function ourselves! Define a function that takes a list of integers as an arguement. It looks through the list for the largest integer and then returns the largest int. Call the function and store it in a variable. Print the variable. \n\nBONUS: Functions are responsible for testing the arguement they receive. Check if you actually received a list (otherwise your code shouldn't work) and check if each element in the list is an integer (otherwise you might be checking on the wrong type). ","48576587":"# Functions that return\nWhen we use `return` , you specify the value you want the function to give you. That way, we can call a function and store it in a variable. ","76dd8494":"The above example creates a function called least_difference, which takes three arguments, `a`, `b`, and `c`.\n\nFunctions start with a header introduced by the `def` keyword. The indented block of code following the `:` is run when the function is called.\n\n`return` is another keyword uniquely associated with functions. When Python encounters a return statement, it exits the function immediately, and passes the value on the right hand side to the calling context.\n\nIs it clear what least_difference() does from the source code? If we're not sure, we can always try it out on a few examples:","1ed4ea64":"# Defining functions\nYou've already seen and used functions that are builtin to python such as `print()` and `type()`. But Python has many more functions, and defining your own functions is a big part of python programming.\n\nIn this lesson you will learn more about using and defining functions.\n\nBuiltin functions are great, but we can only get so far with them before we need to start defining our own functions. Below is a simple example.","5f23a434":"# Calling a function\n\nTo call a function we simple need to write the name of it and give the correct arguements (with the correct types) and it will execute that block of code. \n\nLet's try it! "}}