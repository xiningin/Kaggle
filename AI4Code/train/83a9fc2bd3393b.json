{"cell_type":{"72b2c3bb":"code","3f4bf015":"code","292cd3fd":"code","5ca0df07":"code","bc8f146c":"code","c19d4e16":"code","631557d7":"code","29260ee9":"markdown","1d584fe0":"markdown","e28a0917":"markdown","ea85d2d1":"markdown","b4e5c174":"markdown","f3da4a6f":"markdown","7cf17fb1":"markdown"},"source":{"72b2c3bb":"!pip install mlens\n!pip install rgf_python","3f4bf015":"import pandas  as pd\nimport numpy   as np\n\n#===========================================================================\n# read in the data\n#===========================================================================\ntrain_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data  = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\n#===========================================================================\n# select some features of interest\n#===========================================================================\nfeatures = ['OverallQual' , 'GrLivArea' , 'TotalBsmtSF' , 'BsmtFinSF1' ,\n            '2ndFlrSF'    , 'GarageArea', '1stFlrSF'    , 'YearBuilt'  ]\n\n#===========================================================================\n#===========================================================================\nX_train       = train_data[features]\ny_train       = train_data[\"SalePrice\"]\nX_test        = test_data[features]\n\n#===========================================================================\n# imputation; substitute any 'NaN' with mean value\n#===========================================================================\nX_train      = X_train.fillna(X_train.mean())\nX_test       = X_test.fillna(X_test.mean())","292cd3fd":"from sklearn.metrics import mean_squared_log_error\n\ndef RMSLE(y,y_hat):\n    return np.sqrt( mean_squared_log_error(y,y_hat) )","5ca0df07":"from mlens.ensemble import SuperLearner\nfrom rgf.sklearn import RGFRegressor\nimport xgboost as xgb\nfrom catboost import CatBoostRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\n# --- Build ---\n# Passing a scoring function will create cv scores during fitting\n# the scorer should be a simple function accepting to vectors and returning a scalar\nensemble = SuperLearner(scorer=RMSLE, verbose=2)\n\n# Build the first layer\nensemble.add([xgb.XGBRegressor(n_estimators  = 750,learning_rate = 0.02, max_depth = 4),\n              CatBoostRegressor(loss_function='RMSE', verbose=False),\n              RGFRegressor(max_leaf=300, algorithm=\"RGF_Sib\", test_interval=100, loss=\"LS\")])\n\n\n# Attach the final meta estimator\nensemble.add_meta(RandomForestRegressor())\n\n# --- Use ---\n\n# Fit ensemble\nensemble.fit(X_train, y_train)\n\n# Predict\npredictions = ensemble.predict(X_test)","bc8f146c":"print(\"Fit data:\\n%r\" % ensemble.data)","c19d4e16":"output = pd.DataFrame({\"Id\":test_data.Id, \"SalePrice\":predictions})\noutput.to_csv('submission.csv', index=False)","631557d7":"import matplotlib.pyplot as plt\nfrom mlens.visualization import exp_var_plot\nfrom sklearn.decomposition import PCA\nexp_var_plot(X_train, PCA(), marker='s', where='post');","29260ee9":"# ML-Ensemble using the House Prices competition data\n![image.png](attachment:image.png)\n\n> *ML-Ensemble a Python library for memory efficient parallelized ensemble learning. In particular, ML-Ensemble is a Scikit-learn compatible library for building deep ensemble networks in just a few lines of code.*\n\nThis notebook is adapted from part of the extensive [Getting started tutorial](http:\/\/ml-ensemble.com\/info\/tutorials\/start.html) on the [ML-Ensemble website](http:\/\/ml-ensemble.com\/).\n\nFor the ensemble meta learners we shall use [XGBoost](https:\/\/github.com\/dmlc\/xgboost), [CatBoost](https:\/\/github.com\/catboost\/catboost), and the [Regularized Greedy Forest (RGF)](https:\/\/github.com\/RGF-team\/rgf\/tree\/master\/python-package) (See my notebook [\"Introduction to the Regularized Greedy Forest\"](https:\/\/www.kaggle.com\/carlmcbrideellis\/introduction-to-the-regularized-greedy-forest) for more details).\nFor the meta estimator we shall use the [Random Forest Regressor](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.RandomForestRegressor.html).\n\n### Install both ML-Ensemble (`mlens`) and the Regularized Greedy Forest (`rgf_python`):","1d584fe0":"### set up the House Prices competition data","e28a0917":"### now write out the `submission.csv` file:","ea85d2d1":"Here we have looked at the ensembling, however the final score can  be improved upon with better feature selection (see for example [\"Feature selection using Boruta-SHAP\"](https:\/\/www.kaggle.com\/carlmcbrideellis\/feature-selection-using-borutashap)) as well as both feature engineering, and hyperparameter tuning of the individual estimators. The ensembling its-self is not so much about producing a better score (although this can happen) but about reducing the variance (or increasing the [explained variance score](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.explained_variance_score.html)). Indeed our result may not beat the score of the best individual estimator that we used in the ensemble. However, what it can do is reduce the overfitting that leads to unwelcome surprises during the competition shakeup.","b4e5c174":"### create a House Prices scoring function\nThe House Prices competition uses the root of the [mean squared logarithmic error regression loss](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.mean_squared_log_error.html) (Note: Be sure to adapt this function to the needs of your particular dataset\/competition)","f3da4a6f":"# Links\n* [ML-Ensemble](http:\/\/ml-ensemble.com\/)\n* [GitHub: mlens](https:\/\/github.com\/flennerhag\/mlens) \n\n# Related notebooks\n* [ML-Ensemble: Scikit-learn style ensemble learning ](https:\/\/www.kaggle.com\/flennerhag\/ml-ensemble-scikit-learn-style-ensemble-learning) by [flnr](https:\/\/www.kaggle.com\/flennerhag) (the author of `mlens`)\n* [Ensemble learning lib: MLens [99% accuracy]](https:\/\/www.kaggle.com\/vipulgote4\/ensemble-learning-lib-mlens-99-accuracy) by [vipul](https:\/\/www.kaggle.com\/vipulgote4)","7cf17fb1":"### build and run the ensemble"}}