{"cell_type":{"18785bf3":"code","9771b039":"code","66a681a8":"code","4bbe6a4b":"code","f46746e0":"code","60584fbc":"code","c1389fc9":"code","ddafca1c":"code","7c8aac69":"code","9682e5e2":"code","01c16f71":"code","1bbf8f40":"code","c6b50e63":"code","b8f6edcc":"code","ad360593":"code","1a805749":"code","fee7d8b3":"code","19445d21":"code","8098d2ef":"code","c52f549e":"code","9a282f87":"code","2ea3a7df":"code","264b22c3":"code","2c597477":"code","6d42c879":"code","bb842356":"code","78445b30":"code","60ee128b":"code","9f0c9e64":"code","3a2ea7b6":"code","facd4bb7":"code","fc7182a3":"code","aacd0ba5":"code","bc174aba":"code","07253941":"code","835fc128":"code","8ee6dede":"code","f953e2f6":"code","5a2c91f2":"code","33ccfe46":"code","4119ef99":"code","0473cd4a":"code","305a0618":"code","af51f589":"code","a02f9ca0":"code","073b2dad":"code","229ee924":"code","3b639f77":"code","7d026a90":"code","2696bf58":"code","0caacb5c":"code","8f0cf84a":"code","c9c1e120":"code","441139fd":"code","1eab52ff":"code","35f1af52":"code","abdbbb87":"code","84984e90":"code","aa4cae71":"code","dfe2037c":"code","d052a1e0":"code","d0c8891a":"code","353fc750":"code","36d60eb7":"code","44983fe8":"code","2089e008":"code","03cdc47e":"code","37910e7f":"code","898505db":"code","97fb4d6c":"code","60c073b6":"code","e2141c0d":"code","7a2621f8":"code","324a30ba":"code","da1cb7bc":"code","eca50568":"code","00f243a8":"code","517e2d91":"code","22344c4f":"code","275abd10":"code","6c2a19c0":"code","abfcacea":"code","944f81d8":"code","f8b5b51e":"code","01470c53":"code","1e8bf1fc":"code","9dc448cb":"code","4525785b":"code","bb91d338":"code","b3962648":"code","4e8d4946":"code","c604f0d7":"code","f731f839":"code","5692daa3":"code","42b213fe":"code","31efad04":"code","d2200600":"code","d844036a":"markdown","9ce92a22":"markdown","e5d00aeb":"markdown","0f7ee458":"markdown"},"source":{"18785bf3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9771b039":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","66a681a8":"train.head()","4bbe6a4b":"train.shape","f46746e0":"test.shape","60584fbc":"train['Survived'].value_counts()","c1389fc9":"train.isnull().sum()","ddafca1c":"test.isnull().sum()","7c8aac69":"combined_df = train.append(test)","9682e5e2":"combined_df.head()","01c16f71":"combined_df.shape","1bbf8f40":"combined_df.isnull().mean().sort_values(ascending=False)","c6b50e63":"def impute_nan(df,variable,median):\n    df[variable+\"_median\"]=df[variable].fillna(median)\n    df[variable+\"_random\"]=df[variable]\n    ##It will have the random sample to fill the na\n    random_sample=df[variable].dropna().sample(df[variable].isnull().sum(),random_state=0)\n    ##pandas need to have same index in order to merge the dataset\n    random_sample.index=df[df[variable].isnull()].index\n    df.loc[df[variable].isnull(),variable+'_random']=random_sample","b8f6edcc":"median = combined_df['Age'].median()\nimpute_nan(combined_df,'Age',median)","ad360593":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig = plt.figure()\nax = fig.add_subplot(111)\ncombined_df['Age'].plot(kind='kde', ax=ax)\ncombined_df.Age_median.plot(kind='kde', ax=ax, color='red')\nlines, labels = ax.get_legend_handles_labels()\nax.legend(lines, labels, loc='best')","1a805749":"fig = plt.figure()\nax = fig.add_subplot(111)\ncombined_df['Age'].plot(kind='kde', ax=ax)\ncombined_df.Age_random.plot(kind='kde', ax=ax, color='red')\nlines, labels = ax.get_legend_handles_labels()\nax.legend(lines, labels, loc='best')","fee7d8b3":"from statsmodels.graphics.gofplots import qqplot\n\nfig = qqplot(combined_df['Age_random'],line='s')\nplt.show()","19445d21":"combined_df['Age_log'] = np.log1p(combined_df['Age_random'])","8098d2ef":"fig = qqplot(combined_df['Age_log'],line='s')\nplt.show()","c52f549e":"combined_df.drop(['Age_log'],axis=1,inplace=True)","9a282f87":"combined_df.head()","2ea3a7df":"combined_df['Cabin'].value_counts()","264b22c3":"combined_df['Cabin'].unique()","2c597477":"combined_df['Cabin'].fillna('Missing',inplace=True)","6d42c879":"combined_df.isnull().sum()","bb842356":"combined_df['Embarked'].fillna(combined_df['Embarked'].mode()[0],inplace=True)","78445b30":"combined_df.drop(['Age','Age_median','PassengerId'],inplace=True,axis=1)","60ee128b":"combined_df.drop('Ticket',inplace=True,axis=1)","9f0c9e64":"combined_df.head()","3a2ea7b6":"plt.figure(figsize=(15,10))\nsns.distplot(combined_df['Fare'])","facd4bb7":"fig = qqplot(combined_df['Fare'],line='s')\nplt.show()","fc7182a3":"fare_less_than_50 = combined_df[combined_df['Fare'] < 50] ","aacd0ba5":"sns.distplot(fare_less_than_50['Fare'])","bc174aba":"combined_df[combined_df['Fare'] < 0.0]","07253941":"people_how_travelled_for_free = combined_df[combined_df['Fare'] == 0.0]","835fc128":"people_how_travelled_for_free","8ee6dede":"plt.figure(figsize=(15,10))\nsns.distplot(people_how_travelled_for_free['Age_random'])","f953e2f6":"survived_on_the_basis_of_pclass = pd.crosstab(combined_df['Pclass'].dropna(),combined_df['Survived'].dropna())","5a2c91f2":"survived_on_the_basis_of_pclass","33ccfe46":"plt.figure(figsize=(15,10))\nsns.countplot(x=combined_df['Pclass'],hue=combined_df['Survived'])","4119ef99":"survived_on_the_basis_of_gender = pd.crosstab(combined_df['Sex'].dropna(),combined_df['Survived'].dropna())","0473cd4a":"survived_on_the_basis_of_gender","305a0618":"plt.figure(figsize=(15,10))\nsns.countplot(x=combined_df['Sex'],hue=combined_df['Survived'])","af51f589":"combined_df.head()","a02f9ca0":"combined_df['SibSp'].value_counts()","073b2dad":"combined_df['Parch'].value_counts()","229ee924":"plt.figure(figsize=(15,10))\nsns.countplot(x=combined_df['Embarked'],hue=combined_df['Survived'])","3b639f77":"combined_df['Fare'].fillna(0.0,inplace=True)","7d026a90":"combined_df.drop(['Name'],axis=1,inplace=True)","2696bf58":"combined_df.head()","0caacb5c":"combined_df['Embarked'].value_counts()","8f0cf84a":"combined_df['Sex'] = combined_df['Sex'].map({'male':0,'female':1})\ncombined_df['Embarked'] = combined_df['Embarked'].map({'S':0,'C':1,'Q':2})","c9c1e120":"from sklearn.preprocessing import LabelEncoder","441139fd":"le = LabelEncoder()","1eab52ff":"combined_df['Cabin'] = le.fit_transform(combined_df['Cabin'])","35f1af52":"train.shape","abdbbb87":"new_train = combined_df.iloc[:891,:]","84984e90":"new_train.isnull().sum()","aa4cae71":"new_test = combined_df.iloc[891:,:]","dfe2037c":"new_test.isnull().sum()","d052a1e0":"new_test.shape","d0c8891a":"new_train","353fc750":"new_test","36d60eb7":"new_test.drop('Survived',axis=1,inplace=True)","44983fe8":"features_train = new_train.drop('Survived',axis=1)\nlabel_train = new_train['Survived']","2089e008":"from sklearn.preprocessing import StandardScaler\n\nss = StandardScaler()","03cdc47e":"X_train = ss.fit_transform(features_train)\nX_test = ss.transform(new_test)","37910e7f":"X_train","898505db":"X_test","97fb4d6c":"X_train.mean()","60c073b6":"X_test.mean()","e2141c0d":"sns.distplot(X_train)","7a2621f8":"sns.distplot(X_test)","324a30ba":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier","da1cb7bc":"from skopt import space\nfrom skopt import gp_minimize","eca50568":"from sklearn import ensemble\nfrom sklearn import model_selection\nfrom sklearn import metrics\nfrom functools import partial","00f243a8":"def optimize(params, params_names, x, y):\n    params_dict = dict(zip(params_names, params))\n\n    model = ensemble.RandomForestClassifier(**params_dict)\n\n    kf = model_selection.StratifiedKFold(n_splits=5)\n    accuracies = []\n\n    for idx in kf.split(x, y):\n        train_idx, test_idx = idx[0], idx[1]\n\n        xtrain = x[train_idx]\n        xtest = x[test_idx]\n        ytrain = y[train_idx]\n        ytest = y[test_idx]\n\n        model.fit(xtrain, ytrain)\n        preds = model.predict(xtest)\n        fold_acc = metrics.accuracy_score(ytest, preds)\n\n        accuracies.append(fold_acc)\n\n    return -1.0 * np.mean(accuracies)","517e2d91":"params_space = [\n        space.Integer(3, 15, name='max_depth'),\n        space.Integer(100, 500, name='n_estimators'),\n        space.Categorical(['gini', 'entropy'], name='criterion'),\n        space.Real(0.01, 1, prior='uniform', name='max_features')\n    ]\n\nparams_names = [\n        'max_depth',\n        'n_estimators',\n        'criterion',\n        'max_features'\n    ]\n\noptimization_function = partial(\n        optimize,\n        params_names=params_names,\n        x=X_train,\n        y=label_train\n    )\n\nresult = gp_minimize(\n        optimization_function,\n        dimensions=params_space,\n        n_calls=15,\n        n_random_starts=10,\n        verbose=10\n    )\n\nprint(dict(zip(params_names,result.x)))","22344c4f":"from sklearn.model_selection import StratifiedKFold","275abd10":"classifier = ensemble.RandomForestClassifier(n_jobs=-1)","6c2a19c0":"accuracies = []\n\nskf = StratifiedKFold(n_splits=5,random_state=None)\nskf.get_n_splits(X_train,label_train)\n\nfor train_index,test_index in skf.split(X_train,label_train):\n    X1_train,X1_test = X_train[train_index],X_train[test_index]\n    y1_train,y1_test = label_train[train_index],label_train[test_index]\n    \n    classifier.fit(X1_train,y1_train)\n    predication = classifier.predict(X1_test)\n    score = metrics.accuracy_score(y1_test,predication)\n    accuracies.append(score)\n    ","abfcacea":"accuracies","944f81d8":"np.mean(accuracies)","f8b5b51e":"classifier = LogisticRegression()","01470c53":"accuracies = []\n\nskf = StratifiedKFold(n_splits=5,random_state=None)\nskf.get_n_splits(X_train,label_train)\n\nfor train_index,test_index in skf.split(X_train,label_train):\n    X1_train,X1_test = X_train[train_index],X_train[test_index]\n    y1_train,y1_test = label_train[train_index],label_train[test_index]\n    \n    classifier.fit(X1_train,y1_train)\n    predication = classifier.predict(X1_test)\n    score = metrics.accuracy_score(y1_test,predication)\n    accuracies.append(score)","1e8bf1fc":"accuracies","9dc448cb":"np.mean(accuracies)","4525785b":"random_forest = RandomForestClassifier(n_estimators=50)\nrandom_forest.fit(X_train, label_train)\nY_pred = random_forest.predict(new_test)\nrandom_forest.score(X_train, label_train)\nacc_random_forest = round(random_forest.score(X_train, label_train) * 100, 2)\nprint('training accuracy of the model is',acc_random_forest)","bb91d338":"Y_pred","b3962648":"submission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\nsubmission","4e8d4946":"test","c604f0d7":"submission_ = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission_.to_csv('submission_.csv', index=False)","f731f839":"#submission['pred_Survival'] = Y_pred\n#submission.to_csv('submission.csv', index=False)","5692daa3":"testing_submission_ = pd.read_csv('submission_.csv')","42b213fe":"testing_submission_","31efad04":"metrics.accuracy_score(Y_pred,submission['Survived'])","d2200600":"submission['Survived'] = Y_pred\nsubmission.to_csv('submission_new.csv', index=False)","d844036a":"From the table we can see that most of the people who travelled for free, died and all of them are male","9ce92a22":"Here random sample imputation is giving better results for the missing values in age so we will go with it","e5d00aeb":"So from the above observation most of the people belonging to pclass=1 survived from the wrath of the ship","0f7ee458":"Best score using skopt is 83.4% ....\nLet's see using Stratified K-Fold"}}