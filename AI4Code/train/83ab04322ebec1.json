{"cell_type":{"9fc0680e":"code","4d8a96f3":"code","4b164e09":"code","c442d58a":"code","9bd1dd62":"code","7c7fb8bb":"code","b4477fe8":"code","add3b9fb":"code","c77e2fc2":"code","7bd8694e":"code","36304271":"code","7a2497eb":"code","c810ceb0":"code","a0eb94d4":"code","5b398ed1":"markdown","61fa877a":"markdown","fc916f4a":"markdown","9a4cd93f":"markdown"},"source":{"9fc0680e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d8a96f3":"import matplotlib.pyplot as plt\n\nfrom fbprophet import Prophet\nfrom sklearn.metrics import r2_score","4b164e09":"df0 = pd.read_csv(\"\/kaggle\/input\/covid19-data-from-john-hopkins-university\/CONVENIENT_global_confirmed_cases.csv\")\ndf0.head()","c442d58a":"df_au = pd.DataFrame(df0[[\"Country\/Region\",\"Australia\"]])\ndf_au.head()","9bd1dd62":"print(df_au.iloc[0])","7c7fb8bb":"df_au.columns = ['ds','y']\ndf_au = df_au[1:]","b4477fe8":"df_au.isnull().sum()","add3b9fb":"df_au.describe()","c77e2fc2":"class Fbprophet(object):\n    def fit(self,data):\n        \n        self.data  = data\n        self.model = Prophet(weekly_seasonality=True,daily_seasonality=False,yearly_seasonality=False)\n        self.model.fit(self.data)\n    \n    def forecast(self,periods,freq):\n        \n        self.future = self.model.make_future_dataframe(periods=periods,freq=freq)\n        self.df_forecast = self.model.predict(self.future)\n        \n    def plot(self,xlabel=\"Years\",ylabel=\"Values\"):\n        \n        self.model.plot(self.df_forecast,xlabel=xlabel,ylabel=ylabel,figsize=(9,4))\n        self.model.plot_components(self.df_forecast,figsize=(9,6))\n        \n    def R2(self):\n        return r2_score(self.data.y, self.df_forecast.yhat[:len(df_au)])\n    ","7bd8694e":"model = Fbprophet()\nmodel.fit(df_au)\nmodel.forecast(30,\"D\")","36304271":"model.plot()","7a2497eb":"model.R2()","c810ceb0":"forecast = model.df_forecast[[\"ds\",\"yhat_lower\",\"yhat_upper\",\"yhat\"]].tail(30).reset_index().set_index(\"ds\").drop(\"index\",axis=1)\nforecast.head()","a0eb94d4":"forecast[\"yhat\"].plot(marker=\".\",figsize=(10,5))\nplt.fill_between(x=forecast.index, y1=forecast[\"yhat_lower\"], y2=forecast[\"yhat_upper\"],color=\"gray\")\nplt.legend([\"forecast\",\"Bound\"],loc=\"upper left\")\nplt.title(\"Forecasting of Next 30 Days Cases\")\nplt.show()","5b398ed1":"Remove the first row and change header:","61fa877a":"See the summary of the cleaned dataframe for Australia:","fc916f4a":"Check if there's any NaN value:","9a4cd93f":"Select only Australia's data for focus forecasting only in Australia:"}}