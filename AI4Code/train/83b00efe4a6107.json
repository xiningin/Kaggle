{"cell_type":{"acae5294":"code","49c757fe":"code","0b2408b9":"code","4fa65c7c":"code","5f99602d":"code","3df3a881":"code","5b636020":"code","2f583b92":"code","c05e1b8f":"code","0e34b450":"code","fea3782f":"code","95a3fb41":"code","f3252d1c":"code","ed1e671f":"code","8610e989":"code","1989846b":"code","55901613":"code","45921d7e":"code","463bb6d8":"code","a3ec1fb3":"code","598ef951":"code","21c5087d":"code","db21e40d":"code","d98f32ce":"code","aef4fbd8":"markdown","cb78a13a":"markdown","8fc71cb9":"markdown","a087f85f":"markdown","20d68ad0":"markdown","e9d89ef1":"markdown","f96cbb60":"markdown","792c83db":"markdown","7f101c35":"markdown","a7ec62fd":"markdown","e395c6e0":"markdown","77313e63":"markdown","94e9de3d":"markdown","1dfecfb1":"markdown","206eabfe":"markdown"},"source":{"acae5294":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","49c757fe":"from tensorflow.keras import  utils\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, ModelCheckpoint\nfrom sklearn.model_selection import train_test_split","0b2408b9":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n","4fa65c7c":"x_train = train.drop([\"label\"], axis=1)","5f99602d":"y_train = train[\"label\"]","3df3a881":"x_test=test","5b636020":"x_train = np.array(x_train)\nx_test = np.array(x_test)\nx_train=x_train.reshape(x_train.shape[0],28,28,1)\nx_test=x_test.reshape(x_test.shape[0],28,28,1)","2f583b92":"y_train = utils.to_categorical(y_train,10)","c05e1b8f":"x_train = x_train \/ 255\nx_test = x_test \/ 255","0e34b450":"x_train, x_val, y_train , y_val=train_test_split(x_train,y_train,test_size=0.1)","fea3782f":"datagen= ImageDataGenerator(\n            zoom_range=0.3,\n            rotation_range=0.2,\n            width_shift_range=0.5,\n            height_shift_range=0.5\n            )","95a3fb41":"model = Sequential()","f3252d1c":"model.add(Conv2D(filters=32,kernel_size=(5,5),input_shape=(x_train.shape[1:]),padding=\"Same\",activation=\"relu\"))\nmodel.add(Conv2D(filters=32,kernel_size=(5,5),padding=\"Same\",activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters=64,kernel_size=(5,5),padding=\"Same\",activation=\"relu\"))\nmodel.add(Conv2D(filters=64,kernel_size=(5,5),padding=\"Same\",activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2),))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters=128,kernel_size=(5,5),padding=\"Same\",activation=\"relu\"))\nmodel.add(Conv2D(filters=128,kernel_size=(5,5),padding=\"Same\",activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(Dense(256,activation=\"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10,activation=\"softmax\"))","ed1e671f":"model.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\nprint(model.summary())","8610e989":"checkpoint=ModelCheckpoint(\"mnistCNN\",\n                           monitor=\"val_acc\",\n                          save_best_only=True,\n                          verbose=1)","1989846b":"lr_reduce=ReduceLROnPlateau(monitor=\"val_acc\",\n                            patience=4,\n                            verbose=1,\n                            factor=0.5,\n                            min_lr=0.00000001\n    )","55901613":"model.fit(datagen.flow(x_train,y_train,batch_size=100),\n         batch_size=1,\n         epochs=40,\n         validation_data=(x_val,y_val),\n         verbose=1,\n         callbacks=[checkpoint,lr_reduce])","45921d7e":"model.load_weights(\"mnistCNN\")","463bb6d8":"predictions = model.predict(x_test)","a3ec1fb3":"print(predictions.shape)","598ef951":"predictions=np.argmax(predictions, axis=1)","21c5087d":"print(predictions.shape)","db21e40d":"submission=pd.DataFrame({\"ImageId\":range(1,x_test.shape[0]+1),\"Label\": predictions})\n","d98f32ce":"submission = submission.to_csv(\"submission.csv\",index=False)","aef4fbd8":"Reshape data in 2D format","cb78a13a":"splitting on true labels and features","8fc71cb9":"splitting train set to two sets: train and crossvalidation","a087f85f":"**Creating some callbacks**","20d68ad0":"**Data augmentation**","e9d89ef1":"creating a datagenerator","f96cbb60":"**training our model**","792c83db":"**predicting on test set**","7f101c35":"compiling our model!","a7ec62fd":"**Data preprocessing**","e395c6e0":"**importing the necessary components**","77313e63":"**Data normalization**","94e9de3d":"**creating submission file**","1dfecfb1":"convert true labels to categorical format","206eabfe":"**Creating a CNN model**"}}