{"cell_type":{"062dbe87":"code","484c9c27":"code","70551f57":"code","f960af87":"code","7585646b":"code","b6e57c7e":"code","24f403c3":"code","4429b0bc":"code","720fd6f3":"code","821eee20":"code","1a620652":"code","39ff77b7":"code","bd8074ea":"code","60f30020":"markdown","e05d006c":"markdown","2d9c385a":"markdown","47c485ba":"markdown","f0a7122d":"markdown","188eab49":"markdown","a970cd68":"markdown"},"source":{"062dbe87":"import time\nkaggle_timeout = time.perf_counter() + 8.9 * 60 * 60","484c9c27":"# TODO: add z3-solver to kaggle-docker image\n! pip3 install -q z3-solver","70551f57":"#!\/usr\/bin\/env python3\n\nimport time\nfrom itertools import chain  # flatten nested lists; chain(*[[a, b], [c, d], ...]) == [a, b, c, d, ...]\nimport z3\nfrom z3 import *\n\nrows = 'ABCDEFGHI'\ncols = '123456789'\nboxes = [[Int(\"{}{}\".format(r, c)) for c in cols] for r in rows]  # declare variables for each box in the puzzle\nsquare_units = [ [ x+y for x in A for y in B ] for A in ('ABC','DEF','GHI') for B in ('123','456','789') ]\n\ndef sudoku_solver(board):\n    s_solver = Solver()  # create a solver instance\n\n    # Add constraints that every box has a value between 1-9 (inclusive)\n    s_solver.add([ And(1 <= box, box <= 9) for box in chain(*boxes) ])\n\n    # Add constraints that every box in a row has a distinct value\n    for i in range(len(boxes)): s_solver.add(Distinct(boxes[i]))\n\n    # Add constraints that every box in a column has a distinct value\n    for i in range(len(boxes)): s_solver.add(Distinct([ row[i] for row in boxes ]))\n\n    # Add constraints so that every box in a 3x3 block has a distinct value\n    for rows in [[0,1,2],[3,4,5],[6,7,8]]:\n        for cols in [[0,1,2],[3,4,5],[6,7,8]]:\n            s_solver.add(Distinct([ boxes[r][c] for r in rows for c in cols ]))\n\n    # Add constraints for the problem defined in the input board\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] != 0:\n                s_solver.add( boxes[i][j] == board[i][j] )\n\n    return s_solver","f960af87":"import pandas as pd\nfrom pathos.multiprocessing import ProcessPool\n\n\n### Conversion Functions\n\ndef format_time(seconds):\n    if seconds < 1:        return \"{:.0f}ms\".format(seconds*1000)\n    if seconds < 60:       return \"{:.2f}s\".format(seconds)\n    if seconds < 60*60:    return \"{:.0f}m {:.0f}s\".format(seconds\/\/60, seconds%60)\n    if seconds < 60*60*60: return \"{:.0f}h {:.0f}m {:.0f}s\".format(seconds\/\/(60*60), (seconds\/\/60)%60, seconds%60)    \n\n\ndef string_to_tuple(string):\n    if isinstance(string, Solver): string = solver_to_tuple(string)\n\n    string = string.replace('.','0')\n    output = tuple( tuple(map(int, string[n*9:n*9+9])) for n in range(0,9) )\n    return output\n\n\ndef tuple_to_string(board, zeros='.'):\n    if isinstance(board, str):    board = string_to_tuple(board)    \n    if isinstance(board, Solver): board = solver_to_tuple(board)\n\n    output = \"\".join([ \"\".join(map(str,row)) for row in board ])\n    output = output.replace('0', zeros)\n    return output\n\n\ndef solver_to_tuple(s_solver):\n    output = tuple(\n        tuple(\n            int(s_solver.model()[box].as_string())\n            for col, box in enumerate(_boxes)\n        )\n        for row, _boxes in enumerate(boxes)\n    )\n    return output\n\n\ndef solver_to_string(s_solver, zeros='.'):\n    output = \"\".join(\n        \"\".join(\n            s_solver.model()[box].as_string()\n            for col, box in enumerate(_boxes)\n        )\n        for row, _boxes in enumerate(boxes)\n    )\n    return output\n\n\ndef series_to_inout_pair(series):\n    input  = ''\n    output = ''\n    for key, value in series.iteritems():\n        if isinstance(value, str) and len(value) == 9*9:\n            if not input: input  = value\n            else:         output = value\n    return (input, output)\n\n\n\n### Print Functions\n\ndef print_board(board):\n    if isinstance(board, str):     board = string_to_tuple(board)\n    if isinstance(board, Solver):  board = solver_to_tuple(board)\n    for row, _boxes in enumerate(boxes):\n        if row and row % 3 == 0:\n            print('-'*9+\"|\"+'-'*9+\"|\"+'-'*9)\n        for col, box in enumerate(_boxes):\n            if col and col % 3 == 0:\n                print('|', end='')\n            print(' {} '.format((board[row][col] or '-')), end='')\n        print()\n    print()\n    \n        \ndef print_sudoku( board ):\n    if isinstance(board, str): board = string_to_tuple(board)    \n\n    print_board(board)\n\n    time_start = time.perf_counter()            \n    s_solver   = sudoku_solver(board)  \n    time_end   = time.perf_counter()        \n    if s_solver.check() != sat: print('Unsolvable'); return\n\n    time_end   = time.perf_counter()        \n    print_board(s_solver)\n    print('solved in {:.2f}s'.format(time_end - time_start))\n    \n\n    \n### Solve Functions\n    \ndef solve_sudoku( board, format=str ):\n    \"\"\"This is really just a wrapper function that deals with type conversion\"\"\"\n    if isinstance(board, str):     board = string_to_tuple(board)\n    if isinstance(board, Solver):  board = solver_to_tuple(board)\n    \n    s_solver = sudoku_solver(board)\n    \n    if s_solver.check() != sat: \n        return None\n    if format == str:\n        return solver_to_string(s_solver)\n    if format == tuple:\n        return solver_to_tuple(s_solver)        \n    return s_solver\n\n\nfrom joblib import delayed\nfrom joblib import Parallel\n\ndef solve_dataframe(dataframe, count=0, timeout=0, verbose=0):\n    if isinstance(dataframe, str): dataframe = pd.read_csv(dataframe)\n    time_start = time.perf_counter()    \n    dataframe  = dataframe.copy() \n    \n    solved = 0\n    total  = 0\n    count  = count or len(dataframe.index)\n    count  = min(count,len(dataframe.index))\n    \n    pool   = ProcessPool(os.cpu_count())\n    try:    pool.restart()\n    except: pass\n    try:\n        if 'time_ms' not in dataframe.columns: dataframe['time_ms'] = 0\n            \n        all_idxs = ( idx for (idx, row) in dataframe.query('time_ms == 0').iterrows()  )  # generator\n        all_rows = ( row for (idx, row) in dataframe.query('time_ms == 0').iterrows()  )  # generator\n        while total < count:\n            if timeout and timeout < time.perf_counter() - time_start: break\n            batch_size = min(count-total, 1000) \n            idxs              =    (                        next(all_idxs)  for _ in range(batch_size)  )\n            boards, expecteds = zip(*[ series_to_inout_pair(next(all_rows)) for _ in range(batch_size) ])\n            def time_solve_sudoku(board):\n                time_start = time.perf_counter()\n                sudoku     = solve_sudoku(board, format=str)\n                time_taken = time.perf_counter() - time_start\n                return sudoku, time_taken \n            outputs = pool.map(time_solve_sudoku, boards)\n            for idx, board, (output, time_taken), expected in zip(idxs, boards, outputs, expecteds):\n                solved += int( print_output(board, output, expected, verbose=verbose) )\n                total  += 1\n                dataframe.at[idx,'time_ms']     = int(time_taken * 1000)\n                if total >= count: break\n                \n    except (KeyboardInterrupt, TimeoutError): pass\n    except Exception as exception: raise exception\n    finally:\n        pool.terminate()\n    \n    failed      = total - solved\n    time_end    = time.perf_counter() \n    time_taken  = time_end-time_start\n    time_sudoku = time_taken \/ total if total else 0\n    print(f'Solved {solved}\/{total} | failed: {failed} | in {format_time(time_taken)} ({format_time(time_sudoku)} per sudoku)')\n    if verbose: print()\n    return dataframe[ dataframe['time_ms'] > 0 ].sort_values(by='time_ms', ascending=False)\n    \n    \ndef print_output(board, output, expected, verbose=1):\n    if isinstance(board, str): board = board.replace('0', '.')\n    solved = False\n    if output is None:\n        if verbose: \n            print(f\"Failed:    {board} -> {expected} != {output}\")\n        if verbose >= 2:\n            print_board(board)\n            print_board('Unsolvable')\n    elif output != expected:\n        solved = False            \n        if verbose: \n            print(f\"Different: {board} -> {expected} != {output}\")                        \n        if verbose >= 2:\n            print_board(board)\n            print_board(output)\n    else:\n        solved = True\n        if verbose: \n            print(f\"Solved:    {board} -> {output}\")            \n        if verbose >= 3:\n            print_board(board)\n            print_board(output)  \n    return solved\n\ntest_board = \"..149....642.31........8........67...54...9..9....5..8...6....5.......2...5.24.81\"\nassert test_board == tuple_to_string(string_to_tuple(test_board))","7585646b":"board = ((0, 0, 3, 0, 2, 0, 6, 0, 0),\n         (9, 0, 0, 3, 0, 5, 0, 0, 1),\n         (0, 0, 1, 8, 0, 6, 4, 0, 0),\n         (0, 0, 8, 1, 0, 2, 9, 0, 0),\n         (7, 0, 0, 0, 0, 0, 0, 0, 8),\n         (0, 0, 6, 7, 0, 8, 2, 0, 0),\n         (0, 0, 2, 6, 0, 9, 5, 0, 0),\n         (8, 0, 0, 2, 0, 3, 0, 0, 9),\n         (0, 0, 5, 0, 1, 0, 3, 0, 0))\nprint_sudoku(board)","b6e57c7e":"board_hardest_sudoku = (\n    (8, 0, 0, 0, 0, 0, 0, 0, 0),\n    (0, 0, 3, 6, 0, 0, 0, 0, 0),\n    (0, 7, 0, 0, 9, 0, 2, 0, 0),\n    (0, 5, 0, 0, 0, 7, 0, 0, 0),\n    (0, 0, 0, 0, 4, 5, 7, 0, 0),\n    (0, 0, 0, 1, 0, 0, 0, 3, 0),\n    (0, 0, 1, 0, 0, 0, 0, 6, 8),\n    (0, 0, 8, 5, 0, 0, 0, 1, 0),\n    (0, 9, 0, 0, 0, 0, 4, 0, 0)\n)\nprint_sudoku(board_hardest_sudoku)","24f403c3":"! find ..\/input -name '*.csv'","4429b0bc":"files = {\n    \"1 million\": '..\/input\/sudoku\/sudoku.csv',\n    \"3 million\": '..\/input\/3-million-sudoku-puzzles-with-ratings\/sudoku-3m.csv'\n}\ndatasets = {\n    \"1 million\": pd.read_csv(files[\"1 million\"]),\n    \"3 million\": pd.read_csv(files[\"3 million\"], index_col='id').sort_values('difficulty', ascending=False),\n}","720fd6f3":"display(datasets['1 million'].head())\n# solve_dataframe(datasets['1 million'], count=1,   verbose=3)\n# solve_dataframe(datasets['1 million'], count=100, verbose=0)","821eee20":"# solve_dataframe(datasets['1 million'], timeout=4*60*60, verbose=0)","1a620652":"solved_df = solve_dataframe(datasets['3 million'], count=1, verbose=3)","39ff77b7":"display(datasets['3 million'].head())\nprint(\"len(datasets['3 million']) = \", len(datasets['3 million']))\nsolve_dataframe(datasets['3 million'], count=5, verbose=1).head()","bd8074ea":"df = datasets['3 million']\nsolved_df = solve_dataframe(df, timeout=8.8*60*60, count=0, verbose=0)\nsolved_df.to_csv('3-million-sudoku-puzzles-with-ratings-solve-times.csv')\nsolved_df","60f30020":"# Dataset: 1 Million Sudoku Games\n- https:\/\/www.kaggle.com\/bryanpark\/sudoku","e05d006c":"# World's Hardest Sudoku\n- https:\/\/www.telegraph.co.uk\/news\/science\/science-news\/9359579\/Worlds-hardest-sudoku-can-you-crack-it.html","2d9c385a":"# Simple Sudoku","47c485ba":"# Million Sudoku Challenge\n\nLets see how many Sudoku problems we can solve from the following datasets within the Kaggle time limit\n- https:\/\/www.kaggle.com\/bryanpark\/sudoku\n- https:\/\/www.kaggle.com\/radcliffe\/3-million-sudoku-puzzles-with-ratings","f0a7122d":"# Sudoku Solver\n\n> Sudoku (\u6570\u72ec, s\u016bdoku, digit-single) (\/su\u02d0\u02c8do\u028aku\u02d0\/, \/-\u02c8d\u0252k-\/, \/s\u0259-\/, originally called Number Place) is a logic-based, combinatorial number-placement puzzle. The objective is to fill a 9\u00d79 grid with digits so that each column, each row, and each of the nine 3\u00d73 subgrids that compose the grid (also called \"boxes\", \"blocks\", or \"regions\") contain all of the digits from 1 to 9. The puzzle setter provides a partially completed grid, which for a well-posed puzzle has a single solution.\n>\n> Completed games are always an example of a Latin square which include an additional constraint on the contents of individual regions. For example, the same single integer may not appear twice in the same row, column, or any of the nine 3\u00d73 subregions of the 9\u00d79 playing board.\n>\n> - https:\/\/en.wikipedia.org\/wiki\/Sudoku\n\n\nThis notebook solves for the [3 million Sudoku puzzles with ratings](https:\/\/www.kaggle.com\/radcliffe\/3-million-sudoku-puzzles-with-ratings\/) dataset, however even with pathos multiprocessing it is estmated that it would take 175 hours of complete.","188eab49":"# Dataset: 3 Million Sudoku Puzzles With Ratings\n- https:\/\/www.kaggle.com\/radcliffe\/3-million-sudoku-puzzles-with-ratings","a970cd68":"Utility Functions"}}