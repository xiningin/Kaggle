{"cell_type":{"aa588f36":"code","4b8aa855":"code","62d56ba7":"code","52d01d8e":"code","586714e3":"code","864cb49f":"code","ed939a73":"code","05f60dac":"code","02b240a0":"code","036b0a77":"code","f74ecf7d":"code","367f751a":"code","546d1b53":"code","b6cbfbec":"code","a5a7d5c2":"code","acdd7d96":"code","b04086ad":"code","18fc5c1b":"code","340d1746":"code","be440e1f":"code","25b17bda":"code","09893612":"code","e5a3f8f0":"code","3bf7ac30":"code","4617cf98":"code","6c2d9b55":"markdown","0e283a1c":"markdown","19b00a3f":"markdown","589b2443":"markdown","7293960a":"markdown","de339fd6":"markdown","fa4a47fe":"markdown","57bba8b8":"markdown","cb326738":"markdown","712e2e22":"markdown","8f40164a":"markdown","7469b7bc":"markdown","10f82d84":"markdown","078cb3a1":"markdown","163b8bed":"markdown","3572a976":"markdown","507969cc":"markdown","a1713abd":"markdown","60003808":"markdown","cf0a6798":"markdown","f4348f0e":"markdown","e1dd1e43":"markdown","ea958fe9":"markdown","ae069ce1":"markdown"},"source":{"aa588f36":"import numpy as np\nimport pandas as pd\nfrom pandas import Series, DataFrame\nimport matplotlib as mpl\nimport pickle\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline","4b8aa855":"PATH = '..\/input\/ashrae-energy-prediction\/'\ntrain_df = pd.read_csv(PATH + 'train.csv')\nbuilding_meta_df=pd.read_csv(PATH + 'building_metadata.csv')\nweather_train_df=pd.read_csv(PATH + 'weather_train.csv')\nweather_test_df=pd.read_csv(PATH + 'weather_test.csv')\ntest_df = pd.read_csv(PATH + '\/test.csv')","62d56ba7":"print('Size of train data', train_df.shape)\nprint('Size of weather_train_df data', weather_train_df.shape)\nprint('Size of building_meta_df data', building_meta_df.shape)\n\nprint('Size of test data', test_df.shape)\nprint('Size of weather test data', weather_test_df.shape)\n\n\n\nprint('Dataset completo: ', train_df.shape)\ntrain_df= train_df.sample(frac=0.1, random_state=0)\nprint('Porzione ridotta per limiti computazionali:', train_df.shape)\n","52d01d8e":"train_df.head()","586714e3":"train_df.columns.values","864cb49f":"weather_train_df.columns.values","ed939a73":"building_meta_df.columns.values","05f60dac":"total = train_df.isnull().sum().sort_values(ascending = False)\npercent = (train_df.isnull().sum()\/train_df.isnull().count()*100).sort_values(ascending = False)\nmissing__train_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing__train_data.head(5)","02b240a0":"total = weather_train_df.isnull().sum().sort_values(ascending = False)\npercent = (weather_train_df.isnull().sum()\/weather_train_df.isnull().count()*100).sort_values(ascending = False)\nmissing_weather_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_weather_data.head(5)","036b0a77":"total = building_meta_df.isnull().sum().sort_values(ascending = False)\npercent = (building_meta_df.isnull().sum()\/building_meta_df.isnull().count()*100).sort_values(ascending = False)\nmissing_building_meta_df  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_building_meta_df.head(5)","f74ecf7d":"train_df[\"timestamp\"] = pd.to_datetime(train_df[\"timestamp\"])\ntrain_df[\"hour\"] = train_df[\"timestamp\"].dt.hour\ntrain_df[\"day\"] = train_df[\"timestamp\"].dt.day\ntrain_df[\"weekend\"] = train_df[\"timestamp\"].dt.weekday\ntrain_df[\"month\"] = train_df[\"timestamp\"].dt.month\ntrain_df[\"year\"] = train_df[\"timestamp\"].dt.year\n\nweather_train_df[\"timestamp\"] = pd.to_datetime(weather_train_df[\"timestamp\"])\n\ntest_df[\"timestamp\"] = pd.to_datetime(test_df[\"timestamp\"])\ntest_df[\"hour\"] = test_df[\"timestamp\"].dt.hour\ntest_df[\"day\"] = test_df[\"timestamp\"].dt.day\ntest_df[\"weekend\"] = test_df[\"timestamp\"].dt.weekday\ntest_df[\"month\"] = test_df[\"timestamp\"].dt.month\ntest_df[\"year\"] = train_df[\"timestamp\"].dt.year\nweather_test_df[\"timestamp\"] = pd.to_datetime(weather_test_df[\"timestamp\"])\nbuilding_meta_df['year_built'] = building_meta_df['year_built'].astype('Int64')\ntrain_df['meter_label']=train_df['meter'].apply(lambda x: {0: \"electricity\", 1: \"chilledwater\", 2: \"steam\", 3: \"hotwater\"}.get(x,x))","367f751a":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nbuilding_meta_df[\"primary_use_label\"] = le.fit_transform(building_meta_df[\"primary_use\"])","546d1b53":"train_df = train_df.merge(building_meta_df, on='building_id', how='left')\ntrain_df = train_df.merge(weather_train_df, on=['site_id', 'timestamp'], how='left')\ntest_df = test_df.merge(building_meta_df, on='building_id', how='left')\ntest_df = test_df.merge(weather_test_df, on=['site_id', 'timestamp'], how='left')\nprint('Size of train_df data', train_df.shape)\nprint('Size of weather_train_df data', weather_train_df.shape)\nprint('Size of building_meta_df data', building_meta_df.shape)","b6cbfbec":"## Using IQR\n\ndef outlier_treatment(datacolumn):\n    \n    \n    Q1,Q3 = np.percentile(sorted(datacolumn) , [25,75])\n    print (\"Q1:\",Q1)\n    print (\"Q3:\",Q3)\n    IQR = Q3 - Q1\n    print (\"IQR\",IQR)\n    lower_range = Q1 - (3 * IQR)\n    upper_range = Q3 + (3 * IQR)\n    \n    return lower_range,upper_range\n  \nl,u = outlier_treatment(train_df.meter_reading)\nprint(train_df [~(((train_df.meter_reading)> u) | ((train_df.meter_reading) < l)) ].shape)\ndf=train_df [~(((train_df.meter_reading)> u) | ((train_df.meter_reading) < l)) ]","a5a7d5c2":"df[df[\"building_id\"] == 5].plot(\"timestamp\", \"meter_reading\",figsize=(5,5))","acdd7d96":"df['timestamp'].value_counts().sort_index().plot()","b04086ad":"df['air_temperature'].value_counts().sort_index().plot()","18fc5c1b":"df['year_built'].value_counts().sort_index().plot()","340d1746":"df['building_id'].value_counts().sort_index().plot()","be440e1f":"plt.figure(figsize=(16, 6))\ng=sns.countplot(x=\"month\", hue=\"meter_label\", data=df).set_title(\"Monthly metering by meter label\")","25b17bda":"plt.figure(figsize=(16, 6))\ng=sns.barplot(x=\"month\", y=\"meter_reading\",hue=\"meter_label\", data=df).set_title(\"Monthly consumption by meter label\")","09893612":"g = sns.FacetGrid(df, hue=\"meter_label\", col=\"primary_use\", col_wrap=4 )\ng.map(sns.barplot, \"month\",\"meter_reading\")\ng.add_legend()","e5a3f8f0":"def countplot(x, hue, **kwargs):\n    sns.countplot(x=x, hue=hue, **kwargs)\n\ngrid = sns.FacetGrid(data=df,col='primary_use',col_wrap=4,aspect=1)\nfig = grid.map(countplot,'month','meter_label',palette='Set1')\nfig.add_legend()","3bf7ac30":"g = sns.FacetGrid(data=df, hue=\"meter_label\", col=\"primary_use\", col_wrap=4, )\n\ng.map(sns.lineplot, \"month\",\"meter_reading\")\ng.add_legend()\ng.set_xticklabels(['1','2','3','4','5','6','7','8','9','10','11','12'])","4617cf98":"g = sns.FacetGrid(data=df, hue=\"meter_label\", col=\"primary_use\", col_wrap=4 )\n#g = g.map(plt.scatter, \"month\", \"meter_reading\", alpha=.7)\ng.map(sns.lineplot, \"hour\",\"meter_reading\")\ng.add_legend()","6c2d9b55":"### Monthly energy consumption by meter label","0e283a1c":"## Null value in training data","19b00a3f":"### Monthly metering by meter label","589b2443":"# Loading dataset","7293960a":"###  Visualization of energy consumption by air temperature","de339fd6":"###  Visualization of monthly energy consumption ","fa4a47fe":"# Outliers removal (using IQR)","57bba8b8":"### Monthly energy usage in one building","cb326738":"# Features formatting and fixing","712e2e22":"# Null values identification","8f40164a":"## Variables encoding","7469b7bc":"### Monthly metering recording by building primary usage ","10f82d84":"## Null value in weather data","078cb3a1":"### Building recorded metering","163b8bed":"### Monthly energy consumption by building primary usage ","3572a976":"# Data Description","507969cc":"# Datasets merging","a1713abd":"###  Visualization of metering by building built year","60003808":"## Null value in building data","cf0a6798":"### Hourly energy consumption by building primary usage ","f4348f0e":"# Loading Libraries","e1dd1e43":"# Exploratory Data Analysis","ea958fe9":"### Energy consumption by building primary usage ","ae069ce1":"**Metering data**\n*  building_id\n*  meter\n*  timestamp\n*  meter_reading\n\n**Buildings**\n*   primary_use\n*   square_feet\n*   year_built\n*   floor_count (may be too sparse to use)\n*   Weather\n\n\n**Weather**\n*   time of day\n*   holiday\n*   weekend\n*   cloud_coverage\n*   dew_temperature\n*   precip_depth\n*   sea_level_pressure\n*   wind_direction\n*   wind_speed\n\n**Meter_label**\n* 0: electricity\n* 1: chilledwater\n* 2: steam\n* 3: hotwater"}}