{"cell_type":{"0b1d17a1":"code","cdfd88ac":"code","cf9dd4cb":"code","b9e61118":"code","8104f4a5":"code","1e181df9":"code","94b3058a":"code","be2fcdb5":"code","65825dbc":"code","37112de3":"code","b3299683":"code","d4b75601":"code","6e594a20":"code","d3585dd3":"code","e9ffdf1b":"code","7cccc0b1":"code","baa82caa":"code","1337f4bc":"code","175bb438":"code","8e9cb10c":"code","2f924c47":"code","200ce1b6":"code","b742ca06":"code","ffe2d15e":"code","c566fb46":"code","78efae01":"code","f177e6c6":"code","f0b08d09":"code","29610a5f":"code","8956a440":"code","3499d58b":"code","655b7409":"code","fb9e4601":"code","ec83bc96":"code","0ffa10f2":"code","d9b34403":"code","6efd2d5f":"code","675e78bc":"code","3738cf54":"code","44cab987":"code","c152cc3c":"markdown","3e71eef3":"markdown","9cf672f5":"markdown","891bd603":"markdown","eaad2c36":"markdown"},"source":{"0b1d17a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","cdfd88ac":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","cf9dd4cb":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","b9e61118":"train.info()","8104f4a5":"test.info()","1e181df9":"all = pd.concat([train, test], sort = False)\nall.info()","94b3058a":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","be2fcdb5":"all.info()","65825dbc":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","37112de3":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","b3299683":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","d4b75601":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","6e594a20":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","d3585dd3":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","e9ffdf1b":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","7cccc0b1":"all.info()","baa82caa":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","1337f4bc":"all.info()","175bb438":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","8e9cb10c":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","2f924c47":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","200ce1b6":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","b742ca06":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","ffe2d15e":"from sklearn.ensemble import RandomForestClassifier","c566fb46":"RF_Model = RandomForestClassifier()","78efae01":"#from sklearn.model_selection import GridSearchCV","f177e6c6":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","f0b08d09":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","29610a5f":"#RF_grid_model = RF_grid.fit(X_train, y_train)","8956a440":"#RF_grid_model.best_estimator_","3499d58b":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","655b7409":"RF_Model.fit(X_train, y_train)","fb9e4601":"predictions = RF_Model.predict(X_test)\npredictions","ec83bc96":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","0ffa10f2":"all_test.head()","d9b34403":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","6efd2d5f":"t_pred = RF_Model.predict(TestForPred).astype(int)","675e78bc":"PassengerId = all_test['PassengerId']","3738cf54":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","44cab987":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","c152cc3c":"****Final Predictions","3e71eef3":"****Extra Features:","9cf672f5":"****Check Accuracy","891bd603":"****Train\/Test Split","eaad2c36":"### Build Random Forest"}}