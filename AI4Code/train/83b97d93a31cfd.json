{"cell_type":{"9a4ef1f9":"code","e8e6c546":"code","4f433dda":"code","5037a1d6":"code","a2975286":"code","a6b03450":"code","f36bf91a":"code","32427576":"code","e5b73db8":"code","273f20f9":"code","ad4702d1":"code","b55a52b1":"code","517957b4":"code","d8bbfa68":"code","7e79e137":"code","12c39d74":"code","67308494":"code","95945a3e":"code","7301e5a2":"code","c869f06e":"code","655e9080":"code","bdd80103":"code","ae66829e":"code","268c1f8d":"code","bbb66fe2":"code","1d071386":"code","c567f5a6":"code","1356eaa8":"code","929e0055":"code","ddb61015":"code","05d394e1":"code","6a073a56":"code","f01bc7d3":"code","be30395f":"code","e5794d58":"markdown","5a81a39b":"markdown","ea76fa87":"markdown","b70ed748":"markdown","1d44276f":"markdown","859188e6":"markdown","59a9693a":"markdown","2b92f994":"markdown","b123bb55":"markdown","3aaf9b68":"markdown","4de6be75":"markdown","dbc5c97c":"markdown","dd740df7":"markdown","e6ebcd23":"markdown","e5122a88":"markdown","d3ef5f67":"markdown"},"source":{"9a4ef1f9":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","e8e6c546":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","4f433dda":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","5037a1d6":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","a2975286":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","a6b03450":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Salary_Data.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/Salary_Data.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'Salary_Data.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","f36bf91a":"df1.head(5)","32427576":"plotPerColumnDistribution(df1, 10, 5)","e5b73db8":"plotCorrelationMatrix(df1, 8)","273f20f9":"plotScatterMatrix(df1, 6, 15)","ad4702d1":"X = df1.iloc[:, :-1].values # To load the last column\ny = df1.iloc[:, 1].values # To load the first column\n","b55a52b1":"X.shape","517957b4":"y.shape","d8bbfa68":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)","7e79e137":"# Fitting Simple Linear Regression to the Training set\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)","12c39d74":"# Predicting the Test set results\ny_pred = regressor.predict(X_test)\ny_pred","67308494":"#showing the intercept point\nregressor.intercept_","95945a3e":"#showing the coefficient \nregressor.coef_","7301e5a2":"# Visualising the Training set results\nplt.scatter(X_train, y_train, color = 'red')\nplt.plot(X_train, regressor.predict(X_train), color = 'blue')\nplt.title('Salary vs Experience (Training set)')\nplt.xlabel('Years of Experience')\nplt.ylabel('Salary')\nplt.show()\n\n# Visualising the Test set results\nplt.scatter(X_test, y_test, color = 'red')\nplt.plot(X_train, regressor.predict(X_train), color = 'blue')\nplt.title('Salary vs Experience (Test set)')\nplt.xlabel('Years of Experience')\nplt.ylabel('Salary')\nplt.show()","c869f06e":"#calculate the accuracy\naccuracy = regressor.score(X_test,y_test)\nprint (accuracy*100,'%')","655e9080":"#find out R2-Score\nfrom sklearn import metrics \nR2score = metrics.r2_score(y_test, y_pred) \nR2score","bdd80103":"#find out all performance measure is required for linear regression ","ae66829e":"from sklearn import metrics \nmae = metrics.mean_absolute_error(y_test, y_pred)\nmse = metrics.mean_squared_error(y_test, y_pred) \nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nrmse","268c1f8d":"mse","bbb66fe2":"mae","1d071386":"print('Variance score: %.2f' % regressor.score(X_test, y_test))","c567f5a6":"regressor.score(X, y)","1356eaa8":"sse = ((y_test-y_pred)**2).sum()","929e0055":"sse","ddb61015":"ssr = ((y_pred-y_test.mean())**2).sum()","05d394e1":"ssr","6a073a56":"sst = ssr + sse\nsst","f01bc7d3":"sst","be30395f":"ssr\/sst","e5794d58":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","5a81a39b":"Distribution graphs (histogram\/bar graph) of sampled columns:","ea76fa87":"Now you're ready to read in the data and use the plotting functions to visualize the data.","b70ed748":"1. Mean Squared Error (MSE)\n1. Mean Absolute Error (MAE)\n1. Root mean squared error (RMSE)\n","1d44276f":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Edit Notebook\" button at the top of the kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","859188e6":"The above both used for to calculate the R2 scofre. ","59a9693a":"Correlation matrix:","2b92f994":"There is 1 csv file in the current version of the dataset:\n","b123bb55":"## Introduction\nBasic of Linear regression.","3aaf9b68":"Here, we divide the dataset into X-axis i.e. dependent and y-axis i.e. independent variable.","4de6be75":"## Exploratory Analysis\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data. Depending on the data, not all plots will be made. (Hey, I'm just a kerneling bot, not a Kaggle Competitions Grandmaster!)","dbc5c97c":"The formula is:- R2 = SSR\/SST \n ","dd740df7":"Scatter and density plots:","e6ebcd23":"**SSR=  sum of squares due to regression.**\n\n**SST= Total sum of squares.**","e5122a88":"Let's take a quick look at what the data looks like:","d3ef5f67":"### Let's check 1st file: \/kaggle\/input\/Salary_Data.csv"}}