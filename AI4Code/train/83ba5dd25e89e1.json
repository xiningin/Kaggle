{"cell_type":{"78e6bd2d":"code","a87b8cba":"code","53cf1a18":"code","1e865a6d":"code","e681a724":"code","f044f94c":"code","0d9c0d11":"code","05ae9362":"code","d498eef8":"code","f709a575":"code","4bd43fcc":"code","ae20189c":"code","4ca0ea44":"code","716cc732":"code","482a995b":"code","8e5c69ca":"code","687c9b2b":"code","28f87a39":"code","66b5175e":"code","f1a54070":"code","83b6b27b":"code","9041b418":"code","25ef84a0":"code","29341f59":"code","cc6d59cc":"code","b45a8928":"code","167e9a84":"code","8bb5f025":"code","efff3f73":"markdown"},"source":{"78e6bd2d":"\nimport pandas as pd\nimport seaborn as sns","a87b8cba":"import matplotlib.pyplot as plt\n%matplotlib inline","53cf1a18":"import os\nprint(os.listdir(\"..\/input\"))","1e865a6d":"df = pd.read_csv('..\/input\/USvideos.csv')","e681a724":"df.info()\n","f044f94c":"df.channel_title = df.channel_title.dropna()","0d9c0d11":"df.info()","05ae9362":"df.head(20)","d498eef8":"#shows top 5 likes\ndf.nlargest(5, 'likes')","f709a575":"df.sort_values(by=[\"video_id\",\"views\"], ascending=False)","4bd43fcc":"df.info()","ae20189c":"#df = df.drop_duplicates(\"video_id\")\ndf = df.drop_duplicates(\"video_id\", keep=\"first\")\n","4ca0ea44":"#after df.drop_duplicates(\"video_id\")\n#reduce number of records from 24,951 to 4,881\ndf.info()","716cc732":"#shows top 5 likes\ndf.nlargest(5, 'likes')\n\n\n#shows top 10 likes and views\n#df.nlargest(10, ['likes','views'])","482a995b":"sns.pairplot(df)\n#pairplot will display a scatter plot of  a combination values columns, not a categoical columns\n#This will work on your local jupyter notebook, but not on Kaggle Kernel\n","8e5c69ca":"sns.pairplot(df[[\"category_id\",\"views\",\"likes\",\"dislikes\"]], hue=\"category_id\")","687c9b2b":"df[\"views\"].corr(df[\"likes\"])","28f87a39":"#I suggest useing .corr to visualize the correlation matrix. To visualize the correlation matrix between features, you can create a \"Heat Map\" with seaborn. Or use this convenient pandas styling options is a viable built-in solution:\n\ncorr = df.corr()\nprint(type(corr))\ncorr.style.background_gradient()","66b5175e":"#Index= ['aaa', 'bbb', 'ccc', 'ddd', 'eee']\n#Cols = df[[\"category_id\",\"views\",\"likes\",\"dislikes\"]]\n#df = DataFrame(, columns=Cols)\n\n#sns.heatmap(df, annot=True)\n#df.style.background_gradient(cmap='summer')","f1a54070":"#select top 100 videos by top views \ndf_top100views = df.nlargest(100, 'views')","83b6b27b":"df_top100views","9041b418":"sns.pairplot(df_top100views[[\"category_id\",\"views\",\"likes\",\"dislikes\"]], hue=\"category_id\")","25ef84a0":"#merge in with the category_name from USvideo_categories.csv\ndf_category =pd.read_csv(\"..\/input\/USvideo_categories.csv\", header=None, names=[\"category_id\",\"category_name\"])","29341f59":"df_category","cc6d59cc":"df = df.merge(df_category,on=\"category_id\")","b45a8928":"df","167e9a84":"sns.pairplot(df[[\"category_name\",\"views\",\"likes\",\"dislikes\"]], hue=\"category_name\")","8bb5f025":"#will the category_name also shows on the .corr correlation matrix? Why?\ncorr = df.corr()\ncorr.style.background_gradient()","efff3f73":"Here, you drop duplicates from column1. Alternatively, you can add \u2018keep\u2019 and indicate whether you\u2019d like to keep the first argument (keep=\u2019first\u2019), the last argument (keep=\u2019last\u2019) from the duplicates or drop all the duplicates altogether (keep=False). The default is \u2018first\u2019 so if you are happy with that, you don\u2019t need to include this."}}