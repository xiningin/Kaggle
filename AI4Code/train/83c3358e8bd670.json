{"cell_type":{"89b8ab3d":"code","70844241":"code","ae9e6df6":"code","cc31bce9":"code","baabb030":"code","ac1f1736":"code","7271be51":"code","20aaa42a":"code","3a936083":"code","a93578bf":"code","1447fe75":"code","d1d9bb56":"code","db08a8ca":"code","9826f1a4":"code","75fb26bb":"code","3cba1c28":"code","5c418a36":"code","1f561153":"code","1a38f2f4":"code","e1a0d226":"code","6e26903c":"code","f14666da":"code","7d7d4703":"code","e35ecc8d":"code","9edc3250":"code","b6d2455a":"code","2c2d8d2c":"markdown","6df50fea":"markdown","5f76986f":"markdown","73b57f12":"markdown","c6a65c29":"markdown","5b26bc61":"markdown","3fd388d0":"markdown"},"source":{"89b8ab3d":"import pycountry\nimport plotly.express as px\nimport pandas as pd\n# ----------- Step 1 ------------\nURL_DATASET = r'https:\/\/raw.githubusercontent.com\/datasets\/covid-19\/master\/data\/countries-aggregated.csv'\ndf1 = pd.read_csv(URL_DATASET)\nprint(df1.head)","70844241":"# ----------- Step 2 ------------\nlist_countries = df1['Country'].unique().tolist()\nprint(list_countries)\n\nd_country_code = {}\nfor country in list_countries:\n    try:\n        country_data = pycountry.countries.search_fuzzy(country)\n        country_code = country_data[0].alpha_3\n        d_country_code.update({country: country_code})\n    except:\n        print('could not add ISO 3 code for ->', country)\n        d_country_code.update({country: ' '})\n\n# create a new column iso_alpha in the df\n# and fill it with appropriate iso 3 code\nfor k, v in d_country_code.items():\n    df1.loc[(df1.Country == k), 'iso_alpha'] = v","ae9e6df6":"# ----------- Step 3 ------------\nfig = px.choropleth(data_frame = df1, \n                    locations= \"iso_alpha\",\n                    color= \"Confirmed\", \n                    hover_name= \"Country\",\n                    color_continuous_scale= 'amp',\n                    animation_frame= \"Date\")\n\nfig.show()","cc31bce9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom scipy.integrate import solve_ivp\nfrom scipy.optimize import minimize\nfrom scipy.integrate import odeint\nimport plotly.express as px\nimport plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected=True)\nimport folium\nfrom scipy.integrate import odeint\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n","baabb030":"pip install openpyxl","ac1f1736":"dbd_tc_india = pd.read_excel('..\/input\/covid19-india-complete-data\/COVID19 India Complete Dataset May 2020.xlsx', sheet_name='Daily Cases Time-Series')\ndbd_tc_india.head(2)","7271be51":"dbd_tc_param = pd.DataFrame(dbd_tc_india.groupby(['Date'])['Total Confirmed','Total Recovered', 'Total Deceased'].sum().reset_index())\ndbd_tc_param['Total Active Cases'] = dbd_tc_param['Total Confirmed'] - dbd_tc_param['Total Recovered'] - dbd_tc_param['Total Deceased']\ndbd_tc_param.head(3)","20aaa42a":"dbd_tc_pl = dbd_tc_param[(dbd_tc_param['Date']>'2020-03-01') & (dbd_tc_param['Date']<'2020-03-24')].reset_index(drop=True) # considering pre lockdown period\ndbd_tc_pl.head(2)","3a936083":"dbd_tc_param = dbd_tc_param[dbd_tc_param['Date']>='2020-03-25'].reset_index(drop=True)\ndbd_tc_param = dbd_tc_param[:-1]\ndbd_tc_param.head(2)","a93578bf":"dbd_tc_param.tail(2)","1447fe75":"N = 1080000 # estimasi\n            \nI0, R0 = 102, 19 # ketika India nilai terinfeksi lebih dari 100\nS0 = N - I0 - R0\nbeta, gamma = 2.4, 1.\/35 # nilainya berdasarkan angka di China dan Eropa\n# waktu\nt = np.linspace(0, 30, 30)\n\ndef deriv(y, t, N, beta, gamma):\n    S, I, R = y\n    dSdt = -beta * S * I \/ N\n    dIdt = beta * S * I \/ N - gamma * I\n    dRdt = gamma * I\n    return dSdt, dIdt, dRdt\n\n\ny0 = S0, I0, R0\nret = odeint(deriv, y0, t, args=(N, beta, gamma))\nS, I, R = ret.T\n\n# Plotting\nfig = plt.figure(facecolor='w', figsize=(12,10))\nax = fig.add_subplot(111, axisbelow=True)\nax.plot(t, S, 'b', alpha=0.5, lw=2, label='Susceptible')\nax.plot(t, I, 'r', alpha=0.5, lw=2, label='Infected')\nax.plot(t, R, 'g', alpha=0.5, lw=2, label='Recovered')\nax.set_xlabel('Time in Days', size=13)\nax.set_ylabel('Number of People', size=13)\n# ax.set_ylim(0,1.2)\nax.yaxis.set_tick_params(length=0)\nax.xaxis.set_tick_params(length=0)\nax.grid(b=True, which='major', c='w', lw=2, ls='-')\nlegend = ax.legend()\nax.set_facecolor('#dddddd')\nlegend.get_frame().set_alpha(0.5)\nfor spine in ('top', 'right', 'bottom', 'left'):\n    ax.spines[spine].set_visible(False)\nax.set_title('Skenario COVID-19 dari 14 Maret selama 30 hari di India', size=15)\nplt.show()","d1d9bb56":"data = dbd_tc_pl.set_index('Date')['Total Active Cases']\ninfected = dbd_tc_pl.set_index('Date')['Total Confirmed']\nrecovered = dbd_tc_pl.set_index('Date')['Total Recovered']","db08a8ca":"s_0 = 150000\ni_0 = 5\nr_0 = 3","9826f1a4":"def loss(point, data, recovered, s_0, i_0, r_0):\n    size = len(data)\n    beta, gamma = point\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    solution = solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1), vectorized=True)\n    l1 = np.sqrt(np.mean((solution.y[1] - data)**2))\n    l2 = np.sqrt(np.mean((solution.y[2] - recovered)**2))\n    alpha = 0.1\n    return alpha * l1 + (1 - alpha) * l2","75fb26bb":"def predict(beta, gamma, data, recovered, s_0, i_0, r_0):\n    new_index = list(data.index.values)\n    size = len(new_index)\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    extended_actual = np.concatenate((data.values, [None] * (size - len(data.values))))\n    extended_recovered = np.concatenate((recovered.values, [None] * (size - len(recovered.values))))\n    return new_index, extended_actual, extended_recovered, solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1))","3cba1c28":"def train(recovered, infected, data):\n    recovered = recovered\n    infected = infected\n    data = data\n\n    optimal = minimize(loss, [0.001, 0.001], args=(data, recovered, s_0, i_0, r_0), method='L-BFGS-B', bounds=[(0.00000001, 2), (0.00000001, 0.4)])\n    print(optimal)\n    beta, gamma = optimal.x\n    new_index, extended_actual, extended_recovered, prediction = predict(beta, gamma, data, recovered, s_0, i_0, r_0)\n    df = pd.DataFrame({'Actual Infected': extended_actual, 'Actual Recovered': extended_recovered, 'Susceptible': prediction.y[0], 'Predicted Infected': prediction.y[1], 'Predicted Recovered': prediction.y[2]}, index=new_index)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.set_title('Kemungkinan Skenario COVID-19 tanpa Lockdown')\n    df.plot(ax=ax)\n    print(f\"country=India, beta={beta:.8f}, gamma={gamma:.8f}, r_0:{(beta\/gamma):.8f}\")","5c418a36":"train(recovered, infected, data)","1f561153":"dbd_tc_param.head(2)","1a38f2f4":"dbd_tc_param.tail(2)","e1a0d226":"data = dbd_tc_param.set_index('Date')['Total Active Cases']\ninfected = dbd_tc_param.set_index('Date')['Total Confirmed']\nrecovered = dbd_tc_param.set_index('Date')['Total Recovered']","6e26903c":"s_0 = 750000 \ni_0 = 603\nr_0 = 43","f14666da":"def loss(point, data, recovered, s_0, i_0, r_0):\n    size = len(data)\n    beta, gamma = point\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    solution = solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1), vectorized=True)\n    l1 = np.sqrt(np.mean((solution.y[1] - data)**2))\n    l2 = np.sqrt(np.mean((solution.y[2] - recovered)**2))\n    alpha = 0.1\n    return alpha * l1 + (1 - alpha) * l2","7d7d4703":"pres_fut = np.array(list(data.index.values)+ list((np.array(pd.date_range('2020-05-05', periods=90))))) #  dari 5 Mei","e35ecc8d":"def predict(beta, gamma, data, recovered, s_0, i_0, r_0):\n    new_index = pres_fut\n    size = len(new_index)\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    extended_actual = np.concatenate((data.values, [None] * (size - len(data.values))))\n    extended_recovered = np.concatenate((recovered.values, [None] * (size - len(recovered.values))))\n    return new_index, extended_actual, extended_recovered, solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1))","9edc3250":"def train(recovered, infected, data):\n    recovered = recovered\n    infected = infected\n    data = data\n\n    optimal = minimize(loss, [0.001, 0.001], args=(data, recovered, s_0, i_0, r_0), method='L-BFGS-B', bounds=[(0.000001, 0.5), (0.00000001, 0.4)])\n    print(optimal)\n    beta, gamma = optimal.x\n    new_index, extended_actual, extended_recovered, prediction = predict(beta, gamma, data, recovered, s_0, i_0, r_0)\n    df = pd.DataFrame({'Actual Infected': extended_actual, 'Actual Recovered': extended_recovered, 'Susceptible': prediction.y[0], 'Predicted Infected': prediction.y[1], 'Predicted Recovered': prediction.y[2]}, index=new_index)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.set_title('Prediksi Skenario COVID-19 di India 3 bulan ke depan dari tanggal 4 Mei 2020')\n    df.plot(ax=ax)\n    print(f\"country=India, beta={beta:.8f}, gamma={gamma:.8f}, r_0:{(beta\/gamma):.8f}\")","b6d2455a":"train(recovered, infected, data)","2c2d8d2c":"# Referensi\n\n1. https:\/\/in.springboard.com\/blog\/data-modelling-covid\/\n2. Data : https:\/\/www.kaggle.com\/duttadebadri\/covid19-india-complete-data\n          https:\/\/raw.githubusercontent.com\/datasets\/covid-19\/master\/data\/countries-aggregated.csv","6df50fea":"### Dengan Lockdown\n\n#### Asumsi:\n- Populasi awal (S0) 750000 yang bisa terpapar COVID-19 pada 25 Maret","5f76986f":"### Tanpa Lockdown\n\n#### Asumsi:\n- Populasi awal (S0) 150000 yang bisa terpapar COVID-19 pada 2 Maret","73b57f12":"\n# Simulasi Penyebaran COVID-19 \n\nDengan variabel ada atau tidaknya Lockdown\n\n### Estimasi Beta dan Gamma untuk India untuk SIR Modelling dan Prediksi 3 bulan ke depan\n\n#### Beta dan Gamma diestimasi dengan cara berikut:\n- Validasi data yang digunakan adalah 2 Maret - 24 Maret untuk sebelum Lockdown dan 25 Maret sampai 19 April untuk setelah Lockdown\n- Menentukan y(t) untuk model SIR, lalu gunakan RMSE sebagai fungsi loss, dan menggunakan L-BFGS-B gradient descent optimization untuk meminimalkan fungsi loss","c6a65c29":"# Pemodelan Untuk COVID-19\n\nMenggunakan pemodelan yang paling umum digunakan untuk penyakit epidemiologi yaitu **SIR**. \nPenjelasan singkatnya sebagai berikut:\n1. **Susceptible (S)** : Individu tersebut tidak tertular penyakit, tetapi dia dapat terinfeksi karena penularan dari orang yang terinfeksi\n2. **Infected (I)** : Individu yang telah terinfeksi\n3. **Recovered\/Removed (R)** : Penyakit ini dapat menyebabkan salah satu dari dua kemungkinan: baik orang tersebut bertahan hidup, sehingga mengembangkan kekebalan terhadap penyakit, atau orang tersebut meninggal.\n\n![image.png](attachment:e5d373ce-899d-4c85-9333-be7aac66277b.png)!\n\nPada modelling ini, menggunakan data awal harian COVID-19 di India.","5b26bc61":"# Penyebaran COVID-19 ke seluruh dunia\n\nMelihat visualiasi penyebaran COVID-19 ke seluruh dunia berdasarkan waktu.","3fd388d0":"# SIR Modelling untuk India\n\nDefinisi \n- N = total populasi \n- I0 = angka awal dari orang yang terinfeksi \n- R0 = angka awal dari orang yang recovered\n- S0 = Orang lain yang rentan terhadap infeksi"}}