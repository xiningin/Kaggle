{"cell_type":{"48b830c1":"code","0fc78281":"code","ae609412":"code","ef488965":"code","1717cc0c":"code","3632c413":"code","2a43b726":"code","a568e821":"markdown","079ffbdb":"markdown","5ff40e97":"markdown","949cc405":"markdown","6510fd2a":"markdown","156f6beb":"markdown","baa1aa8f":"markdown","3f3c327a":"markdown","6eb4aeeb":"markdown"},"source":{"48b830c1":"import matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nsns.set()","0fc78281":"births = pd.read_csv(\"..\/input\/cdc-us-births-data-19692008\/births.csv\")\nbirths.head()\n","ae609412":"quartiles = np.percentile(births[\"births\"],[25, 50, 75])\nmean, sigma = quartiles[1], 0.74 * (quartiles[2] - quartiles[0])\nbirths = births.query(\"(births > @mean - 5 * @sigma) & (births < @mean + 5 * @sigma)\")\nbirths[\"day\"] = births[\"day\"].astype(int)\nbirths.index = pd.to_datetime(10000 * births.year + 100 * births.month + births.day, format = \"%Y%m%d\")\nbirthsDate = births.pivot_table(\"births\", [births.index.month, births.index.day])\nbirthsDate.index = [pd.datetime(2012, month, day) for (month, day) in birthsDate.index ]\nfig, ax = plt.subplots(figsize=(12, 4))\nbirthsDate.plot(ax=ax)\nplt.show() ","ef488965":"fig, ax = plt.subplots(figsize=(10,4))\nbirthsDate.plot(ax=ax)\nstyle = dict(size=10, color='black')\nax.text(\"2012-1-1\", 3950, \"New Year\", **style)\nax.text(\"2012-7-14\", 4250, \"Independence Day\", ha=\"center\", **style)\nax.text(\"2012-9-4\", 4850, \"Labour Day\", ha=\"center\", **style)\nax.text(\"2012-10-31\", 4600, \"Halloween\", ha=\"right\", **style)\nax.text(\"2012-12-25\", 4450, \"Thanksgiving\", ha=\"center\", **style)\nax.text(\"2012-12-25\", 3850, \"Christmas\", ha=\"right\", **style)\n# Labeling the axes\nax.set(title= \"USA births by day\", ylabel=\"average daily births\")\n# Format the x axis with centerd month labels\nax.xaxis.set_major_locator(mpl.dates.MonthLocator())\nax.xaxis.set_minor_locator(mpl.dates.MonthLocator(bymonthday=15))\nax.xaxis.set_major_formatter(plt.NullFormatter())\nax.xaxis.set_minor_formatter(mpl.dates.DateFormatter(\"%h\"))\nplt.show()","1717cc0c":"fig, ax = plt.subplots(facecolor='lightgray')\nax.axis([0, 10, 0, 10])\n# transform=ax.transData is the default, but we'll specify it anyway\nax.text(1, 5, \". Data: (1, 5)\", transform=ax.transData)\nax.text(0.5, 0.1, \". Axes: (0.5, 0.1)\", transform=ax.transAxes)\nax.text(0.2, 0.2, \". Figure: (0.2, 0.2)\", transform=fig.transFigure)\nplt.show()","3632c413":"fig, ax = plt.subplots()\nx = np.linspace(0, 20, 1000)\nax.plot(x, np.cos(x))\nax.axis('equal')\nax.annotate('local maximum', xy=(6.28, 1), xytext=(10, 4),\narrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('local minimum', xy=(5 * np.pi, -1), xytext=(2, -6),\narrowprops=dict(arrowstyle=\"->\",\nconnectionstyle=\"angle3,angleA=0,angleB=-90\"))\nplt.show()","2a43b726":"fig, ax = plt.subplots(figsize=(12, 4))\nbirthsDate.plot(ax=ax)\n\n# Add labels to the plot\nax.annotate(\"New Year's Day\", xy=('2012-1-1', 4100), xycoords='data',\nxytext=(50, -30), textcoords='offset points',\narrowprops=dict(arrowstyle=\"->\",\nconnectionstyle=\"arc3,rad=-0.2\"))\n\nax.annotate(\"Independence Day\", xy=('2012-7-4', 4250), xycoords='data',\nbbox=dict(boxstyle=\"round\", fc=\"none\", ec=\"gray\"),xytext=(10, -40), textcoords='offset points', ha='center',\narrowprops=dict(arrowstyle=\"->\"))\n\nax.annotate('Labor Day', xy=('2012-9-4', 4850), xycoords='data', ha='center',\nxytext=(0, -20), textcoords='offset points')\nax.annotate('', xy=('2012-9-1', 4850), xytext=('2012-9-7', 4850),\nxycoords='data', textcoords='data',\narrowprops={'arrowstyle': '|-|,widthA=0.2,widthB=0.2', })\n\nax.annotate('Halloween', xy=('2012-10-31', 4600), xycoords='data',\nxytext=(-80, -40), textcoords='offset points',\narrowprops=dict(arrowstyle=\"fancy\",\nfc=\"0.6\", ec=\"none\",\nconnectionstyle=\"angle3,angleA=0,angleB=-90\"))\n\nax.annotate('Thanksgiving', xy=('2012-11-25', 4500), xycoords='data',\nxytext=(-120, -60), textcoords='offset points',\nbbox=dict(boxstyle=\"round4,pad=.5\", fc=\"0.9\"),\narrowprops=dict(arrowstyle=\"->\",\nconnectionstyle=\"angle,angleA=0,angleB=80,rad=20\"))\n\nax.annotate('Christmas', xy=('2012-12-25', 3850), xycoords='data',\nxytext=(-30, 0), textcoords='offset points',\nsize=13, ha='right', va=\"center\",\nbbox=dict(boxstyle=\"round\", alpha=0.1),\narrowprops=dict(arrowstyle=\"wedge,tail_width=0.5\", alpha=0.1))\n\n# Label the axes\nax.set(title='USA births by day of year (1969-1988)',\nylabel='average daily births')\n\n# Format the x axis with centered month labels\nax.xaxis.set_major_locator(mpl.dates.MonthLocator())\nax.xaxis.set_minor_locator(mpl.dates.MonthLocator(bymonthday=15))\nax.xaxis.set_major_formatter(plt.NullFormatter())\nax.xaxis.set_minor_formatter(mpl.dates.DateFormatter('%h'));\nax.set_ylim(3600, 5400)\nplt.show()","a568e821":"The arrow style is controlled through the arrowprops dictionary, which has numerous options available. Let\u2019s demonstrate several of the possible options using the birthrate plot from before:","079ffbdb":"# 1. importing library \ud83d\udcda\ud83d\udcda\n","5ff40e97":"Here we\u2019ll use annotate with several of its options:","949cc405":"### We\u2019ll start with the same cleaning procedure we used there, and plot the results:","6510fd2a":"The ax.text method takes an x position, a y position, a string, and then optional keywords specifying the color, size, style, alignment, and other properties of the text. Here we used ha=\u2019right\u2019 and ha=\u2019center\u2019, where ha is short for horizonal alignment.","156f6beb":"When we\u2019re communicating data like this, it is often useful to annotate certain features of the plot to draw the reader\u2019s attention. This can be done manually with the plt.text\/ax.text command, which will place text at a particular x\/y value:","baa1aa8f":"### I am a programmer from Tunisa, and I am here to guide you with Data Science, Machine Learning, Python for free. I hope you will learn a lot in your journey towards Coding, Machine Learning and Artificial Intelligence with me.","3f3c327a":"## Transforms and Text Position\nIt is helpful knowledge to have when considering the placement of text on a figure. There are three predefined transforms that can be useful in this situation:\n* ax.transData: Transform associated with data coordinates\n* ax.transAxes: Transform associated with the axes (in units of axes dimensions)\n* fig.transFigure: Transform associated with the figure (in units of figure dimensions\n\nHere let\u2019s look at an example of drawing text at various locations using these transforms:","6eb4aeeb":"Creating a good visualization involves guiding the reader so that the figure tells a story. In some cases, this story can be told in an entirely visual manner, without the need for added text, but in others, small textual cues and labels are necessary.\n\nPerhaps the most basic types of annotations you will use are axes labels and titles, but the options go beyond this. Let\u2019s take a look at some data and how we might visualize and annotate it to help convey interesting information:"}}