{"cell_type":{"1f3e2ba5":"code","12002ea3":"code","986721c2":"code","288a3440":"code","49aad3b8":"code","005a6da9":"code","53db4a83":"code","b55ac86a":"code","0d2fa707":"code","86bfc769":"code","eb1d081b":"code","04c59c58":"code","f788925b":"code","77b17f5d":"code","56183f57":"code","b8cfc338":"code","7e82de4d":"code","8bdc5972":"code","a2745405":"code","108a2b94":"code","d5f03157":"code","46c06636":"code","be4d6ff9":"code","3ffb29cb":"code","4423963c":"code","233dd047":"code","42e7485b":"code","a69ac3ee":"code","4145d4da":"code","d2bd12a0":"code","b0d667ed":"code","4f4dcfd4":"code","088eca5d":"code","801b8da5":"code","cb3c2ffb":"code","33dcf235":"code","41ab1a35":"code","1f905f83":"code","423c8d3d":"code","91c605dc":"code","ab9268cf":"code","8af991ed":"code","cdbcc7fe":"code","28fcf0a0":"code","66220a06":"code","0197c9f0":"code","52398f48":"code","814f3487":"code","0d2cf809":"code","35995dcf":"code","bde6c0b7":"code","1b941174":"code","73ed3317":"code","02684da1":"code","31f6a820":"code","118e95c0":"code","c399df9b":"code","951cb1f3":"code","a14e082f":"code","c2f7f8f2":"code","aaeb8c2b":"code","2b55c03f":"code","f4d2f0ee":"code","8ca784d4":"code","8c4f99cb":"code","0f32d242":"code","f2f4cd69":"code","8a80e322":"markdown","279c16d8":"markdown","ed7b6743":"markdown","de36545e":"markdown","b37b114a":"markdown","49a6f485":"markdown","d3eafc0c":"markdown","0155212f":"markdown","7b63dda3":"markdown","04b91b3f":"markdown","78ff8e6e":"markdown","b8adfec4":"markdown","34f19ca6":"markdown","e7d8d23e":"markdown","3a006181":"markdown","5fffb136":"markdown","812bc8e3":"markdown"},"source":{"1f3e2ba5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn import tree\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport random\nfrom random import seed\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","12002ea3":"data = pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")\ndata.head()","986721c2":"data.info()","288a3440":"data = data.drop(['Unnamed: 32', 'id'],axis = 1)","49aad3b8":"data.head()","005a6da9":"print(\"Dataset size:\",data.shape)","53db4a83":"data.isnull().values.any()","b55ac86a":"data_copied = data.copy()\ndata_copied['diagnosis'] = data_copied['diagnosis'].replace((\"M\"),1)\ndata_copied['diagnosis'] = data_copied['diagnosis'].replace((\"B\"),0)","0d2fa707":"matrix = np.triu(data_copied.corr())\nsns.set_style(\"white\")\nf,ax=plt.subplots(figsize = (16,16))\nsns.heatmap(data_copied.corr(),annot= True,fmt = \".2f\",ax=ax,\n            vmin = -1,\n            vmax = 1, mask = matrix,cmap = \"coolwarm\",\n            linewidth = 0.2,linecolor = \"white\")\nplt.xticks(rotation=70)\nplt.yticks(rotation=0)\nplt.title('Correlation Map', size = 14)\nplt.show()","86bfc769":"most_correlated_features = ['radius_mean', 'perimeter_mean', 'area_mean', 'concavity_mean', \n                        'concave points_mean', 'radius_worst', 'perimeter_worst', 'area_worst', 'concave points_worst']\nfor i in range(0, len(most_correlated_features)):\n    fig = px.box(data, x=\"diagnosis\", y=most_correlated_features[i], color=\"diagnosis\" ,width=750,height=450)\n    fig.show()","eb1d081b":"data.diagnosis.value_counts(sort=False).plot(kind='bar')\nplt.title('Class distribution', fontsize = 15)\nplt.xlabel('Classes', fontsize = 15)\nplt.xticks(rotation=360)\nplt.ylabel('Quantity', fontsize = 15)","04c59c58":"X = data.drop('diagnosis', axis=1)\nY = data ['diagnosis']","f788925b":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state = 123)\nprint(\"Train dataset shape: \",X_train.shape )\nprint(\"Test dataset shape: \",X_test.shape )","77b17f5d":"model=tree.DecisionTreeClassifier(criterion='entropy', splitter='best',random_state=123)\nmodel.fit(X_train,Y_train)\npredictions=model.predict(X_test)\nprint('Training set accuracy: {:.4f}'.format(model.score(X_train, Y_train)*100))\nprint('Test set accuracy: {:.4f}'.format(model.score(X_test, Y_test)*100))","56183f57":"def conf_matrix(predictions,Y_test):\n    conf_matrix=metrics.confusion_matrix(Y_test,predictions)    \n    conf_matrix = pd.DataFrame(confusion_matrix(y_pred=predictions, y_true=Y_test), \n                            index=['B','M'], columns=['B','M'])\n    return conf_matrix","b8cfc338":"conf_matrix(predictions,Y_test)","7e82de4d":"fig = plt.figure(figsize=(40,20))\n_ = tree.plot_tree(model, \n                   feature_names=list(X.columns.values),  class_names=['M','B'],filled=True, impurity = False)","8bdc5972":"tree_importances = model.feature_importances_\nindices = np.argsort(tree_importances)\nfig, ax = plt.subplots(figsize = (7,7))\nax.barh(range(len(tree_importances)), tree_importances[indices])\nax.set_yticks(range(len(tree_importances)))\nax.set_title('Feature importances',fontsize=15)\nax.set_xlabel('Importance',fontsize=15)\nax.set_ylabel('Features',fontsize=15)\n_ = ax.set_yticklabels(np.array(X_train.columns)[indices])","a2745405":"data_most_important =  data.loc[:,['radius_worst','diagnosis', 'concave points_worst','concavity_mean', 'texture_mean', 'texture_worst',\n                                   'area_worst', 'texture_se','compactness_se','concave points_mean','smoothness_worst','symmetry_mean' ]]\ndata_most_important.head() ","108a2b94":"data_most_important.shape","d5f03157":"X_most_important = data_most_important.drop('diagnosis', axis=1)\nY_most_important = data_most_important['diagnosis']","46c06636":"X_train_important, X_test_important, Y_train_important, Y_test_important = train_test_split(X_most_important,Y_most_important, test_size=0.2, random_state = 123)\nprint(\"Train dataset shape: \",X_train_important.shape )\nprint(\"Test dataset shape: \",X_test_important.shape )","be4d6ff9":"seed(48)\nmodel_imp=tree.DecisionTreeClassifier(criterion='entropy', splitter='best',random_state=123)\nmodel_imp.fit(X_train_important,Y_train_important)\npredictions_imp=model_imp.predict(X_test_important)\nprint('Training set accuracy: {:.4f}'.format(model_imp.score(X_train_important, Y_train_important)*100))\nprint('Test set accuracy: {:.4f}'.format(model_imp.score(X_test_important,Y_test_important)*100))","3ffb29cb":"conf_matrix(predictions_imp,Y_test_important)","4423963c":"fig = plt.figure(figsize=(40,20))\n_ = tree.plot_tree(model_imp, feature_names=list(X_train_important.columns.values), class_names=['M','B'],filled=True, impurity = False)","233dd047":"data_most_correlated =  data.loc[:,['radius_mean','diagnosis', 'perimeter_mean', 'area_mean', 'concavity_mean', \n                        'concave points_mean', 'radius_worst', 'perimeter_worst', 'area_worst', 'concave points_worst']]\ndata_most_correlated.head() ","42e7485b":"data_most_correlated.shape","a69ac3ee":"X_most_correlated = data_most_correlated.drop('diagnosis', axis=1)\nY_most_correlated = data_most_correlated['diagnosis']","4145d4da":"X_train_corr, X_test_corr, Y_train_corr, Y_test_corr = train_test_split(X_most_correlated,Y_most_correlated, test_size=0.2, random_state = 123)\nprint(\"Train dataset shape: \",X_train_corr.shape )\nprint(\"Test dataset shape: \",X_test_corr.shape )","d2bd12a0":"seed(48)\nmodel_corr=tree.DecisionTreeClassifier(criterion='entropy', splitter='best',random_state=123)\nmodel_corr.fit(X_train_corr,Y_train_corr)\npredictions_corr=model_corr.predict(X_test_corr)\nprint('Training set accuracy: {:.4f}'.format(model_corr.score(X_train_corr, Y_train_corr)*100))\nprint('Test set accuracy: {:.4f}'.format(model_corr.score(X_test_corr, Y_test_corr)*100))","b0d667ed":"conf_matrix(predictions_corr,Y_test)","4f4dcfd4":"fig = plt.figure(figsize=(40,20))\n_ = tree.plot_tree(model_corr, feature_names=list(X_most_correlated.columns.values), class_names=['M','B'],\n                   filled=True,impurity = False)","088eca5d":"model_gini=tree.DecisionTreeClassifier(criterion='gini', splitter='best',random_state=123)\nmodel_gini.fit(X_train,Y_train)\npredictions_gini=model_gini.predict(X_test)\nprint('Training set accuracy: {:.4f}'.format(model_gini.score(X_train, Y_train)*100))\nprint('Test set accuracy: {:.4f}'.format(model_gini.score(X_test, Y_test)*100))","801b8da5":"conf_matrix(predictions_gini,Y_test)","cb3c2ffb":"fig = plt.figure(figsize=(40,20))\n_ = tree.plot_tree(model_gini, feature_names=list(X.columns.values),  class_names=['M','B'],filled=True,impurity = False)","33dcf235":"X_most_correlated_gini = data_most_correlated.drop('diagnosis', axis=1)\nY_most_correlated_gini = data_most_correlated['diagnosis']","41ab1a35":"X_train_gini_corr, X_test_gini_corr, Y_train_gini_corr, Y_test_gini_corr = train_test_split(X_most_correlated_gini,Y_most_correlated_gini, test_size=0.2, random_state = 123)\nprint(\"Train dataset shape: \",X_train_gini_corr.shape )\nprint(\"Test dataset shape: \",X_test_gini_corr.shape )","1f905f83":"seed(48)\nmodel_corr_gini=tree.DecisionTreeClassifier(criterion='gini', splitter='best',random_state=123)\nmodel_corr_gini.fit(X_train_gini_corr,Y_train_gini_corr)\npredictions_corr_gini=model_corr_gini.predict(X_test_gini_corr)\nprint('Training set accuracy: {:.4f}'.format(model_corr_gini.score(X_train_gini_corr, Y_train_gini_corr)*100))\nprint('Test set accuracy: {:.4f}'.format(model_corr_gini.score(X_test_gini_corr, Y_test_gini_corr)*100))","423c8d3d":"conf_matrix(predictions_corr_gini,Y_test_corr)","91c605dc":"fig = plt.figure(figsize=(40,20))\n_ = tree.plot_tree(model_corr_gini, feature_names=list(X_most_correlated.columns.values),  class_names=['M','B'], filled=True,impurity = False)","ab9268cf":"tree_importances = model_gini.feature_importances_\nindices = np.argsort(tree_importances)\n\nfig, ax = plt.subplots(figsize = (7,7))\nax.barh(range(len(tree_importances)), tree_importances[indices])\nax.set_yticks(range(len(tree_importances)))\nax.set_title('Feature importances',fontsize=15)\nax.set_xlabel('Importance',fontsize=15)\nax.set_ylabel('Features',fontsize=15)\n_ = ax.set_yticklabels(np.array(X_train.columns)[indices])","8af991ed":"data_most_important =  data.loc[:,['texture_worst','texture_mean','perimeter_se','texture_se', 'compactness_se', \n                                    'smoothness_mean','diagnosis', 'area_mean', 'concavity_mean', 'compactness_worst',\n                                      'radius_worst', 'area_worst', 'concave points_worst']]\ndata_most_important.head() ","cdbcc7fe":"X_most_important_gini = data_most_important.drop('diagnosis', axis=1)\nY_most_important_gini = data_most_important['diagnosis']","28fcf0a0":"X_train_important_gini, X_test_important_gini, Y_train_important_gini, Y_test_important_gini = train_test_split(X_most_important_gini,Y_most_important_gini, test_size=0.2, random_state = 123)\nprint(\"Train dataset shape: \",X_train_important_gini.shape )\nprint(\"Test dataset shape: \",X_test_important_gini.shape )","66220a06":"seed(48)\nmodel_imp_gini=tree.DecisionTreeClassifier(criterion='gini', splitter='best',random_state=123)\nmodel_imp_gini.fit(X_train_important_gini,Y_train_important_gini)\npredictions_imp_gini=model_imp_gini.predict(X_test_important_gini)\nprint('Training set accuracy: {:.4f}'.format(model_imp_gini.score(X_train_important_gini, Y_train_important_gini)*100))\nprint('Test set accuracy: {:.4f}'.format(model_imp_gini.score(X_test_important_gini,Y_test_important_gini)*100))","0197c9f0":"conf_matrix(predictions_imp_gini,Y_test_important)","52398f48":"fig = plt.figure(figsize=(40,20))\n_ = tree.plot_tree(model_imp_gini, feature_names=list(X_most_important_gini.columns.values),  class_names=['M','B'],filled=True,impurity = False)","814f3487":"data_B = data.loc[data['diagnosis'] == 'B']\ndata_M = data.loc[data['diagnosis'] == 'M']\nn = 30\ndata_M = data_M.iloc[:n]","0d2cf809":"data_B.head()","35995dcf":"data_B.shape","bde6c0b7":"data_M.head()","1b941174":"data_imbalanced = pd.concat([data_B,data_M])\ndata_imbalanced.head()","73ed3317":"data_imbalanced.shape","02684da1":"data_imbalanced.diagnosis.value_counts(sort=False).plot(kind='bar')\nplt.title('Class distribution', fontsize = 15)\nplt.xlabel('Classes', fontsize = 15)\nplt.xticks(rotation=360)\nplt.ylabel('Quantity', fontsize = 15)","31f6a820":"X_imbalanced = data_imbalanced.drop('diagnosis', axis=1)\nY_imbalanced = data_imbalanced['diagnosis']","118e95c0":"X_train_imbalanced, X_test_imbalanced, Y_train_imbalanced, Y_test_imbalanced = train_test_split(X_imbalanced,Y_imbalanced, test_size=0.25, random_state = 123)\nprint(\"Train dataset shape: \",X_train_imbalanced.shape )\nprint(\"Test dataset shape: \",X_test_imbalanced.shape )","c399df9b":"Y_train_imbalanced.value_counts()","951cb1f3":"Y_test_imbalanced.value_counts()","a14e082f":"train_ratio = 268\/22\ntest_ratio = 89\/8\nprint(\"Train ratio:\", train_ratio)\nprint(\"Test ratio:\", test_ratio)","c2f7f8f2":"model_imbalanced=tree.DecisionTreeClassifier(criterion='entropy', splitter='best',random_state=123)\nmodel_imbalanced.fit(X_train_imbalanced,Y_train_imbalanced)\npredictions_imbalanced=model_imbalanced.predict(X_test_imbalanced)\nprint('Training set accuracy: {:.4f}'.format(model_imbalanced.score(X_train_imbalanced, Y_train_imbalanced)*100))\nprint('Test set accuracy: {:.4f}'.format(model_imbalanced.score(X_test_imbalanced, Y_test_imbalanced)*100))","aaeb8c2b":"conf_matrix(predictions_imbalanced,Y_test_imbalanced)","2b55c03f":"fig = plt.figure(figsize=(40,20))\n_ = tree.plot_tree(model_imbalanced, feature_names=list(X_imbalanced.columns.values),  class_names=['M','B'],filled=True,impurity = False)","f4d2f0ee":"model_imbalanced_gini=tree.DecisionTreeClassifier(criterion='gini', splitter='best',random_state=123)\nmodel_imbalanced_gini.fit(X_train_imbalanced,Y_train_imbalanced)\npredictions_imbalanced_gini=model_imbalanced_gini.predict(X_test_imbalanced)\nprint('Training set accuracy: {:.4f}'.format(model_imbalanced_gini.score(X_train_imbalanced, Y_train_imbalanced)*100))\nprint('Test set accuracy: {:.4f}'.format(model_imbalanced_gini.score(X_test_imbalanced, Y_test_imbalanced)*100))","8ca784d4":"fig = plt.figure(figsize=(40,20))\n_ = tree.plot_tree(model_imbalanced_gini, feature_names=list(X_imbalanced.columns.values),  class_names=['M','B'],filled=True,impurity = False)","8c4f99cb":"conf_matrix(predictions_imbalanced_gini,Y_test_imbalanced)","0f32d242":"X_test_important.shape","f2f4cd69":"indexx = ['Base model(entropia)']\nmodels_accuracy = pd.DataFrame({'Model': ['Base (entropy)','Base (gini)', 'Correlated features (entropy)', 'Correlated features (gini)', \n                                          'Important features (entropy)', 'Important features (gini)', 'Imbalanced (entropy)', 'Imbalanced (gini)'  ], \n                                ' Test accuracy': [model.score(X_test, Y_test)*100, model_gini.score(X_test, Y_test)*100, model_corr.score(X_test_corr,Y_test_corr)*100, \n                                             model_corr_gini.score(X_test_gini_corr, Y_test_gini_corr)*100,model_imp.score(X_test_important,Y_test_important)*100, \n                                                  model_imp_gini.score(X_test_important_gini,Y_test_important_gini)*100,model_imbalanced.score(X_test_imbalanced, Y_test_imbalanced)*100,\n                                                  model_imbalanced_gini.score(X_test_imbalanced, Y_test_imbalanced)*100] })\nmodels_accuracy","8a80e322":"### **Models summary**","279c16d8":"### **Gini criterion**","ed7b6743":"### **Enthropy model**","de36545e":"### **I've picked most correlated features - features with correlation rate bigger or equal 0.7.**","b37b114a":"#### **Model gini importances**","49a6f485":"### **Model only with the most correlated features**","d3eafc0c":"#### **Enthropy criteria**","0155212f":"### **Gini model** ","7b63dda3":"#### **Model only with the most important features**","04b91b3f":"#### **Replace 'malignant' to 1 and 'benign' to 0 and make 'diagnosis' column int for correlation plot**","78ff8e6e":"### **Creating dataset with imbalanced classes. Only 30 samples out of 357 will be malignant.**","b8adfec4":"## **ID3 algorithm**","34f19ca6":"### **Class distribution**","e7d8d23e":"### **Check whether the dataset has nan values**","3a006181":"#### **Delete 'Unnamed' column**","5fffb136":"### **Model only with the most correlated features**","812bc8e3":"### **After plots have been displayed, it's obvious that samples with cancer show higher numbers compared to healthy samples.**"}}