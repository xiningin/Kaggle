{"cell_type":{"dc7b5f97":"code","1e5b8cb9":"code","ca309819":"code","9a968aeb":"code","fd2e35ac":"code","807236a3":"code","c2d8cd0a":"code","ff77689d":"code","430d1cf9":"code","b2a1e172":"code","bd906eba":"code","5b75ae4e":"code","0030e782":"code","8153296a":"code","a05d7959":"code","6813200b":"code","4ad709c6":"code","5370b69c":"code","4776a3f0":"code","48d1f41a":"code","dc8ca84f":"code","d3db5495":"code","0b8df34b":"code","cf94982a":"code","8c335a0c":"code","e962523e":"code","8d18556e":"code","7305b6bb":"code","549a4ffc":"code","360e2fd8":"code","08cd5a96":"code","dfa57860":"code","e637bc48":"code","aaf77345":"code","8f3a29e6":"code","1ffeb582":"code","5730dee6":"code","ca041535":"code","89c01722":"code","2a4cb275":"code","63df6534":"code","f0b3d73e":"code","c5bb6c47":"code","1d97e8b8":"code","b2b2a2e5":"code","80dc63f6":"code","e0092eba":"code","b033a1ae":"code","7b63df14":"code","3aef93ae":"markdown","eaf79efb":"markdown","31ec1bdd":"markdown","6e5b7ccd":"markdown","1e37fb94":"markdown","45fb8c53":"markdown","c6c6ed18":"markdown","2f00bf03":"markdown","abf9f980":"markdown","3f8c63b0":"markdown","7d8962ca":"markdown","e19753a9":"markdown","05b200df":"markdown"},"source":{"dc7b5f97":"import numpy as np \nimport pandas as pd \nfrom scipy import stats\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\n\n# preprocessing\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, OrdinalEncoder\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, StratifiedKFold\n\n# models\nfrom sklearn.linear_model import LinearRegression, LogisticRegression, SGDClassifier, Lasso, Ridge, ElasticNet, RidgeClassifier\nfrom sklearn.svm import SVR, LinearSVR \nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, RandomForestClassifier\nfrom sklearn.model_selection import cross_val_predict as cvp\nfrom sklearn.metrics import r2_score, f1_score, roc_auc_score, mean_absolute_error, mean_squared_error\n\nimport xgboost as xgb\nimport lightgbm as lgb\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1e5b8cb9":"train_df = pd.read_csv('..\/input\/advanced-dls-fall-2020\/train.csv')\ntest_df  = pd.read_csv('..\/input\/advanced-dls-fall-2020\/test.csv')","ca309819":"train_df.head()","9a968aeb":"for col in train_df.columns:\n    print(col, '::', train_df[col].unique())","fd2e35ac":"# \u0432 \u044d\u0442\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0437\u0430\u0442\u0435\u0441\u0430\u043b\u0438\u0441\u044c \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0440\u0430\u0432\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u0443\nfor df in [train_df, test_df]:\n    df['TotalSpent'] = df['TotalSpent'].replace(' ', 0)\n    df['TotalSpent'] = df['TotalSpent'].astype(float)","807236a3":"num_cols0 = ['ClientPeriod', 'MonthlySpending', 'TotalSpent', 'Churn']\nnum_cols = ['ClientPeriod', 'MonthlySpending', 'TotalSpent']\ncat_cols = ['IsSeniorCitizen', 'Sex', 'HasPartner', 'HasChild', 'HasPhoneService',\n            'HasMultiplePhoneNumbers', 'HasInternetService',\n            'HasOnlineSecurityService', 'HasOnlineBackup', 'HasDeviceProtection',\n            'HasTechSupportAccess', 'HasOnlineTV', 'HasMovieSubscription',\n            'HasContractPhone', 'IsBillingPaperless', 'PaymentMethod']\nlen(train_df.columns) == len(num_cols) + len(cat_cols)","c2d8cd0a":"train_df.info()","ff77689d":"# \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435\n# \u043f\u043e\u0437\u0436\u0435, \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0438\u0437 \u043d\u0438\u0445 dummy-\u0444\u0438\u0447\u0438\nle = LabelEncoder()\nfor col in cat_cols:\n    train_df[col] = le.fit_transform(train_df[col])\n    test_df[col]  = le.transform(test_df[col])\n    train_df[col] = train_df[col].astype('category')\n    test_df[col]  = test_df[col].astype('category')\ntrain_df","430d1cf9":"fig, ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(train_df.corr(), annot=True, linewidths=.1, cmap=\"coolwarm\", square=True)","b2a1e172":"fig, ax = plt.subplots(figsize=(16, 4))\n_ = sns.boxplot(x=train_df.ClientPeriod, y=train_df.Churn, orient='h')\n# \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 - \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u044b :)","bd906eba":"fig, ax = plt.subplots(figsize=(16, 4))\n_ = sns.boxplot(x=train_df.MonthlySpending, y=train_df.Churn, orient='h')","5b75ae4e":"_ = train_df[num_cols0].hist(num_cols, figsize=(12, 7), bins=25)","0030e782":"fig, axs = plt.subplots(ncols=len(num_cols0)-1, nrows=2, figsize=(20,8))\nfor i, col in enumerate(num_cols0):\n    if col!='Churn':\n        train_df[col].plot(kind='kde', ax=axs[0][i], title=col, legend=True)\n        train_df[num_cols0].groupby(\"Churn\")[col].plot(kind='kde', ax=axs[1][i], title=col, legend=True)","8153296a":"train_df.groupby(['Churn']).size()","a05d7959":"def allscores(ytrue, ypred):\n    print('mse:', mean_squared_error(ytrue, ypred))\n    # print('r2:', r2_score(ytrue, ypred))  # \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\n    print('f1:', f1_score(ytrue, ypred))\n    print('rocauc:', roc_auc_score(ytrue, ypred))","6813200b":"def write_to_submission_file(predicted_labels, out_file, target='Churn', index_label=\"Id\"):\n    predicted_df = pd.DataFrame(predicted_labels,\n                                index = np.arange(len(predicted_labels)),\n                                columns=[target])\n    predicted_df.to_csv(out_file, index_label=index_label)","4ad709c6":"def ohe(df, numeric, categorical):\n    dummy_features = pd.get_dummies(df[categorical])\n    return pd.concat([df[numeric], dummy_features], axis=1)","5370b69c":"def standardize(df, fetaures):\n    pass","4776a3f0":"X = train_df.drop(columns=['Churn'])\ny = train_df['Churn']","48d1f41a":"X = ohe(X, num_cols, cat_cols)\ntest_ohe = ohe(test_df, num_cols, cat_cols)","dc8ca84f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)","d3db5495":"model = LogisticRegression()\n\nmodel.fit(X_train, y_train)\ntest_pred = model.predict(X_test)\nallscores(y_test, test_pred)","0b8df34b":"params = {\"C\":[0.001, 0.01, 0.1, 1, 10, 100, 1000], \n          \"penalty\":[\"l1\",\"l2\", \"elasticnet\"],\n          \"solver\":[\"lbfgs\", \"saga\"],\n          \"random_state\":[42],\n          \"class_weight\":[{0:1,1:3}, {0:1,1:2}]\n         }\nmodel = LogisticRegression()\nmodel_cv = GridSearchCV(model, param_grid=params,cv=7)\nmodel_cv.fit(X_train, y_train)","cf94982a":"print(\"best parameters: \", model_cv.best_params_)\nprint(\"best_score: \", model_cv.best_score_)","8c335a0c":"test_pred = model_cv.predict(X_test)\nallscores(y_test, test_pred)","e962523e":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u044d\u0442\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0442\u0435\u0441\u0442\u0435\nmodel_cv.best_estimator_.fit(X,y)\nprediction = model_cv.best_estimator_.predict_proba(test_ohe)[:, 1]\nprediction ## 0.84338 public score","8d18556e":"write_to_submission_file(prediction, 'prediction2_logregcv.csv')","7305b6bb":"from catboost import CatBoostClassifier","549a4ffc":"# \u0437\u0434\u0435\u0441\u044c \u043d\u0430\u043c \u043d\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u044e\u0442\u0441\u044f dummy \u0444\u0438\u0447\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u0435\u0442","360e2fd8":"X = train_df.drop(columns=['Churn'])\ny = train_df['Churn']","08cd5a96":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)","dfa57860":"# model = CatBoostClassifier(cat_features=cat_cols)\n# model.fit(X_train, y_train)","e637bc48":"# predict = model.predict(X_test)\n# print(predict)\n# allscores(y_test, predict)","aaf77345":"# \"\u0433\u043e\u043b\u044b\u0439\" \u043a\u0430\u0442\u0431\u0443\u0441\u0442 \u043d\u0435 \u0434\u0430\u043b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0438\u043b\u044c\u043d\u043e \u043b\u0443\u0447\u0448\u0435 \u0447\u0435\u043c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f. \u043f\u043e\u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b","8f3a29e6":"params = { 'iterations':[100]\n          ,'l2_leaf_reg':[1,3,5,10]\n          ,'learning_rate':[0.001,0.01]\n          ,'depth':[3,5,7,10]\n          ,'loss_function':['CrossEntropy']\n#           for classifier use Logloss, CrossEntropy, MultiClass, MultiClassOneVsAll or custom objective object\n#           ,'random_seed':[42]\n#           ,'verbose':[False]\n#           ,'use_weights':[True]\n         }","1ffeb582":"# model = CatBoostClassifier(cat_features=cat_cols, random_seed=42, silent=True)\n# grid_search_result = model.grid_search(params, \n#                                        X=X_train, \n#                                        y=y_train, \n#                                        plot=True)","5730dee6":"# grid_search_result['params']","ca041535":"# prediction = model.predict_proba(test_df)[:, 1]\n# roc_auc_score(y_test, prediction)\n# write_to_submission_file(prediction, 'prediction2_catboostcv_selfgridsearch.csv')","89c01722":"model = CatBoostClassifier(cat_features=cat_cols, random_seed=42, silent=True)\ncat_cv = GridSearchCV(model, param_grid=params, cv=3)\ncat_cv.fit(X_train, y_train)","2a4cb275":"cat_cv.best_params_","63df6534":"test_pred = cat_cv.predict(X_test)\nallscores(y_test, test_pred)","f0b3d73e":"cat_cv.best_estimator_.fit(X,y)\nprediction = cat_cv.best_estimator_.predict_proba(test_df)[:, 1]\nprediction ","c5bb6c47":"write_to_submission_file(prediction, 'prediction3_catboostcv.csv')","1d97e8b8":"X = train_df.drop(columns=['Churn'])\ny = train_df['Churn']","b2b2a2e5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)","80dc63f6":"# \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0433\u043b\u0443\u0431\u0438\u043d\u0443\n# \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u043c\u0438\u043d \u043a\u043e\u043b-\u0432\u043e \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f\n# \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u043a\u043e\u043b-\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n# params = {'max_depth': [i for i in range(5, 10)],\n#           'min_samples_split': [i for i in range(2, 5)],\n#           'max_features': [2, len(X.columns)-1]\n#           }  # best is 5, 4, 18\n\nparams = {'max_depth': [i for i in range(3, 7)],\n          'min_samples_split': [i for i in range(4, 7)],\n          'max_features': [i for i in range(7, 15)]\n          }\n\n\n# \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441 \u0441 \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u043e\u043c \u043f\u043e \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b \u043d\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0432\u044b\u0448\u0435 \u043f\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445\ngs = GridSearchCV(RandomForestClassifier(n_jobs=-1), params, verbose=1, cv=5)\ngs.fit(X_train, y_train)\n\n# best_params_ \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, best_score_ \u043b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e\nprint(gs.best_params_)\nprint(gs.best_score_)","e0092eba":"def plot_feature_importances(model, columns):\n    # \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n    nr_f = 10\n    # \u0431\u0435\u0440\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u0430\n    # \u0431\u0435\u0440\u0435\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0441 \u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438\n    # \u043f\u043e \u0445 \u043c\u044b \u0431\u0435\u0440\u0435\u043c \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f \u0414\u0436\u0438\u043d\u0438, \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0438\u0445 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    imp = pd.Series(data = model.best_estimator_.feature_importances_, \n                    index=columns).sort_values(ascending=False)\n    # \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043b\u0438 \u0444\u0438\u0433\u0443\u0440\u0443\n    plt.figure(figsize=(7,5))\n    # \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043b\u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\n    plt.title(\"\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 | Feature importance\")\n    # \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043b\u0438 10 \u0441\u0430\u043c\u044b\u0445 \u0432\u0430\u0436\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n    ax = sns.barplot(y=imp.index[:nr_f], x=imp.values[:nr_f], orient='h')\n\n\n# \u0432\u044b\u0437\u0432\u0430\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441\u0430\u043c\u044b\u0445 \u0432\u0430\u0436\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n# \u0442\u0443\u0442 dummies_columns - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a, \u0442\u0438\u043f\u0430 encoded_df.columns\nplot_feature_importances(gs, X_train.columns)","b033a1ae":"gs.best_estimator_.fit(X,y)\nprediction = gs.best_estimator_.predict_proba(test_df)[:, 1]\nprediction","7b63df14":"write_to_submission_file(prediction, 'prediction2_RFC.csv')","3aef93ae":"## \u041f\u0435\u0440\u0432\u043e\u0435 \u0437\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438","eaf79efb":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c grid search","31ec1bdd":"### CatBoost","6e5b7ccd":"\u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432 \u0434\u0435\u0440\u0435\u0432\u044c\u044f\u0445 - \u043d\u0430\u0439\u0434\u0443\u0442 \u043b\u0438 \u043e\u043d\u0438 \u0432\u0438\u0434\u0438\u043c\u044b\u0435 \u0442\u0443\u0442 \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438    \n\u0442\u0430\u043a\u0436\u0435 \u0432\u0441\u0435 \u044d\u0442\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043d\u0435\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u0431\u0435\u0441\u0441\u043c\u044b\u0441\u043b\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044e. \u0425\u043e\u0442\u044f \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0436\u043d\u043e :)","1e37fb94":"OHE:","45fb8c53":"\u0412 \u0438\u0442\u043e\u0433\u0435 \u044d\u0442\u043e - \u043b\u0443\u0447\u0448\u0435\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435","c6c6ed18":"\u041d\u0435\u0442 \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 - \u043f\u0440\u0435\u043a\u0440\u0430\u0441\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 :)","2f00bf03":"## MODELS","abf9f980":"\u0432\u0438\u0434\u043d\u043e \u043f\u0430\u0440\u043e\u0447\u043a\u0443 \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u043d\u043e \u0438\u0437\u0431\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u043e\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u043a\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c","3f8c63b0":"\u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043a\u043e\u043d\u0435\u0447\u043d\u043e \u0436\u0435 \u043d\u0435 \u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u044b\u0439, \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u044d\u0442\u043e \u0443\u0447\u0435\u0441\u0442\u044c \u043f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438","7d8962ca":"\u0411\u0443\u0434\u0435\u043c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u044d\u0442\u043e \u0431\u0430\u0437\u043e\u0432\u044b\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c","e19753a9":"### Tree","05b200df":"### Logistic Regression"}}