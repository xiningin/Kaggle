{"cell_type":{"6a7c739e":"code","24541477":"code","1839bb6e":"code","8e1db6a9":"code","125cd56d":"code","67471635":"code","33211c89":"code","87586f6f":"code","083be063":"code","4d896201":"code","562fc684":"code","cf0c9703":"markdown"},"source":{"6a7c739e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","24541477":"data = pd.read_csv(\"..\/input\/heart.csv\")\ndata.info()\ndata.head()","1839bb6e":"y = data.target.values\nx_data = data.drop(['target'],axis = 1)\nx = (x_data - np.min(x_data))\/(np.max(x_data) - np.min(x_data)).values","8e1db6a9":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 42)\n\nx_train = x_train.T\ny_train = y_train.T\nx_test = x_test.T\ny_test = y_test.T","125cd56d":"def initialize_prams(dimensions):\n    w = np.full((dimensions,1),0.01)\n    b = 0.0\n    return w,b","67471635":"def sigmoid(z):\n    y_head = 1\/(1 + np.exp(-z))\n    return y_head","33211c89":"def Forward_Backward_Propagation(w,b,x_train,y_train):\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]\n    derivative_weights = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias = (np.sum(y_head-y_train)\/x_train.shape[1])\n    gradients = {\"derivative_weights\":derivative_weights,\"derivative_bias\":derivative_bias}\n    return cost, gradients","87586f6f":"def update(w,b,x_train,y_train,learning_rate,number_of_iteration):\n    cost_list  = []\n    cost_list2 = []\n    index = []\n    for i in range(number_of_iteration):\n        cost,gradients = Forward_Backward_Propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        \n        w = w-learning_rate * gradients[\"derivative_weights\"]\n        b = b-learning_rate * gradients[\"derivative_bias\"]\n        \n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print(\"cost after iteration %i : %f\"%(i,cost))\n            \n        parameters = {\"weights\":w,\"bias\":b}\n        plt.plot(index,cost_list2)\n        plt.xticks(index,rotation = \"vertical\")\n        plt.show()\n        return parameters,gradients,cost_list\n    \n    ","083be063":"def predict(w,b,x_test):\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    y_prediction = np.zeros((1,x_test.shape[1]))\n    \n    for i in range(z.shape[1]):\n        if z[0,i] <= 0.5:\n            y_prediction[0,1] = 0\n        else:\n            y_prediction[0,1] = 1\n    return y_prediction","4d896201":"def logistic_regression(x_train,y_train,_test,y_test,learning_rate,number_of_iteration):\n    \n    dimensions = x_train.shape[0]\n    w,b = initialize_prams(dimensions)\n    parameters,gradients,cost_list = update(w,b,x_train,y_train,learning_rate,number_of_iteration)\n    y_prediction_test = predict(parameters[\"weights\"],parameters[\"bias\"],x_test)\n    y_prediction_train = predict(parameters[\"weights\"],parameters[\"bias\"],x_train)\n    \n    print(\"test accuracy : {}%\".format(100-np.mean(np.abs(y_prediction_test-y_test))*100))\n    print(\"train accuracy : {}%\".format(100-np.mean(np.abs(y_prediction_train-y_train))*100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 3, number_of_iteration = 250) ","562fc684":"from sklearn.linear_model import LogisticRegression\nlr= LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nprint(\"test accuracy {}\".format(lr.score(x_test.T,y_test.T)))","cf0c9703":"\u0130lk \u00f6dev olarak haz\u0131rlad\u0131\u011f\u0131m Logistic Regression Kodum. Fazla benzer oldu. Bir dahaki \u00f6devde daha fazlas\u0131n\u0131 yapmaya \u00e7al\u0131\u015faca\u011f\u0131m. Tavsiyelerinizi bekliyorum."}}