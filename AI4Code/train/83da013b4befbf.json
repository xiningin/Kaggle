{"cell_type":{"5134d2b2":"code","f4b29814":"code","35bd9498":"code","bbaeb7ad":"code","b3725e08":"code","dddbcd0d":"code","2e46f3de":"code","7340054e":"code","c9dbceb5":"code","27df2ccf":"code","9f6eef39":"code","6a0d28f0":"code","6d4d9164":"code","60b14ab1":"code","8774f407":"code","6a734267":"code","c938547b":"code","c930b9ae":"code","4d045638":"code","1d608b3d":"code","0da8056b":"code","cc6fade3":"code","18a640d6":"markdown","92ae3344":"markdown","2494334e":"markdown","8dad1804":"markdown","1a94af83":"markdown","ffc12836":"markdown","fa3c6bc5":"markdown"},"source":{"5134d2b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f4b29814":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPool2D,InputLayer,Flatten,BatchNormalization\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.utils import to_categorical \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","35bd9498":"df_train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","bbaeb7ad":"df_train.head()","b3725e08":"df_test.head()","dddbcd0d":"sns.countplot(df_train.label)","2e46f3de":"X = (df_train.iloc[:,1:].values\/255)\ny = df_train.iloc[:,:1]","7340054e":"plt.figure(  figsize = (10,12) )\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(X.reshape(-1,28,28,1)[i],cmap = 'gray')\n    plt.title((\"Value: {}\".format(y.iloc[i,0])))\nplt.show()","c9dbceb5":"y = to_categorical(y, num_classes = 10)\nx_train, x_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.25, random_state = 42)\nx_train = x_train.reshape(-1,28,28,1)\nx_valid = x_valid.reshape(-1,28,28,1)","27df2ccf":"model = Sequential()\nmodel.add(Conv2D(32,3,activation = 'relu',padding = 'Same' ,input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size = (2,2), strides = 2))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32,3,activation = 'relu',padding = 'Same' ,input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size = (2,2), strides = 2))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32,3,activation = 'relu', padding = 'Same'))\nmodel.add(MaxPool2D(pool_size = (2,2), strides = 2))\nmodel.add(BatchNormalization())\nmodel.add(Flatten())\nmodel.add(Dense(256,activation = 'relu'))\n\nmodel.add(Dense(10, activation = \"softmax\"))","9f6eef39":"model.summary()","6a0d28f0":"model.compile(optimizer = 'adam' , loss = 'categorical_crossentropy', metrics=[\"accuracy\"])","6d4d9164":"early_stopping = EarlyStopping(patience=40, monitor = 'val_loss')","60b14ab1":"history = model.fit( x_train, y_train,validation_data=(x_valid,y_valid),  epochs = 100, callbacks = [early_stopping],batch_size = 100)","8774f407":"model.evaluate(x_valid, y_valid)","6a734267":"plt.plot(history.history['loss'], label = 'train_loss')\nplt.plot(history.history['val_loss'], label = 'valid_loss')\nplt.ylim(0,0.20)\nplt.title('loss functions')\nplt.show()","c938547b":"plt.plot(history.history['accuracy'], label = 'train_accuracy')\nplt.plot(history.history['val_accuracy'], label = 'val_accuracy')\nplt.ylim(0.980,1)\nplt.title('accuracy functions')\nplt.show()","c930b9ae":"results = model.predict(x_valid).argmax(axis=1)\nplt.figure(  figsize = (10,12) )\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(x_valid[i])\n    plt.title((\"Value: {}\".format(results[i])))\nplt.show()","4d045638":"x_test = df_test.iloc[:].values\/255\nx_test = x_test.reshape(-1,28,28,1)","1d608b3d":"prediction = pd.DataFrame({'ImageId':range(1,28001),'Label': model.predict(x_test).argmax(axis=1)})\nprediction","0da8056b":"prediction.info()","cc6fade3":"prediction.to_csv('my_submission',index = None)","18a640d6":"# model ","92ae3344":"# last","2494334e":"# Setup","8dad1804":"# import necessary libraries","1a94af83":"# looking results","ffc12836":"## getting data","fa3c6bc5":"# train - test split"}}