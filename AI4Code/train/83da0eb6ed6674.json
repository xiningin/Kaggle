{"cell_type":{"488aa5e3":"code","5e7ff6a5":"code","d9f90e4c":"code","589fbfd4":"code","489ec837":"code","e6a76be9":"code","d9b59ad7":"code","a1bc51b3":"code","23b93304":"code","b13feac6":"code","be8024ac":"code","809a8bc5":"code","8886fc4e":"code","b939f36c":"code","a9126326":"code","0272b4a5":"code","7349cc7a":"code","175e5427":"code","67395336":"code","ce277119":"code","ac6fd38c":"code","dbcc5c2d":"code","8b9cb51e":"code","a931cba0":"code","913cda29":"code","5e8b087d":"code","67d8c896":"code","df9e169c":"code","f5076ddc":"code","58767f0e":"code","1a43f742":"markdown","7d3a0f07":"markdown","bcafad99":"markdown","ce6254e5":"markdown","915f5b35":"markdown","7bc7115c":"markdown","afd1b145":"markdown","3f90ebe8":"markdown","a1f4c5ed":"markdown"},"source":{"488aa5e3":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","5e7ff6a5":"raw_data = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv', low_memory=False)\nraw_data.shape","d9f90e4c":"raw_data.head(3)","589fbfd4":"data = raw_data.loc[1:]\ndata_description = raw_data.loc[0]\n\ndata_description = data_description.str.replace('- Selected Choice', '') \\\n                                    .str.strip()","489ec837":"multiple_columns = data.filter(like='_').columns.tolist()\n\nmultiple_groups = []\nfor x in multiple_columns:\n    x = x.split('_')[0]\n    if x not in multiple_groups:\n        multiple_groups.append(x)\n\nsingle_columns = [col for col in data.columns\n                  if col not in multiple_columns]","e6a76be9":"print(\"Single columns:\", data[single_columns].shape[1])\nprint(\"Multiple groups:\", len(multiple_groups))\nprint(\"Multiple columns:\", data[multiple_columns].shape[1])","d9b59ad7":"print(\"The group of answers to question '{}'\\n\".format(multiple_groups[0]))\ndata.filter(like=multiple_groups[0]).head()","a1bc51b3":"duration = data['Time from Start to Finish (seconds)'].astype(int)\nduration_in_minutes = (duration \/ 60).round(2)","23b93304":"duration_in_minutes.describe(percentiles=[.01, .05, 0.1,\n                                          0.5, 0.7, 0.9,\n                                          .95, 0.97, 0.99])","b13feac6":"threshold_duration = 40  # minutes\nis_slowly = (duration_in_minutes > threshold_duration)","be8024ac":"plt.figure(figsize=(12,4))\nsns.histplot(duration_in_minutes[~is_slowly])\nplt.title(\"Time from Start to Finish (in minutes), Less than 40\")\nplt.xlabel(\"\")\nplt.show()","809a8bc5":"print(\"Normal answers:\", duration_in_minutes[~is_slowly].count())\nprint(\"Slowly answers:\", duration_in_minutes[is_slowly].count())","8886fc4e":"def single_answer_stats(column_name, show_slowly=True):\n    cleaned_data = data[column_name].str.strip()\n    cleaned_data = cleaned_data.fillna('--- None ---')\n\n    result = pd.DataFrame()\n\n    answers_counted = cleaned_data.value_counts(dropna=False)\n    \n    result['ALL %'] = (answers_counted \/ answers_counted.sum()) \\\n                                    .mul(100).round(1).map(\"{} %\".format)\n    result['Count'] = answers_counted\n\n    if show_slowly == True:\n        result['  |'] = '  |'\n        result['Normal'] = cleaned_data[~is_slowly].value_counts()\n        result['|'] = '|'\n        result['Slowly'] = cleaned_data[is_slowly].value_counts()\n    \n    max_len = 30\n    result.index = [index_name[:max_len] + \" [...]\" if len(index_name) > max_len\n                    else index_name \n                    for index_name in result.index.tolist()]\n    result.index.name = 'Answers:'\n    \n    print()\n    print(\">>> ({}) {}\\n\".format(column_name, data_description.loc[column_name]))\n    print(result)\n    print()","b939f36c":"for check_column in single_columns[1:]:\n    single_answer_stats(check_column)  # (, show_slowly=False)","a9126326":"def single_answer_crosstab(ind_name, col_name='Q1', is_normalize=False):\n    if is_normalize == True:\n        normalize_by = 'columns'\n    else:\n        normalize_by = False\n        \n    result_desc = [\">>> ({}) {}\".format(ind_name, data_description.loc[ind_name]),\n                   \">>> ({}) {}\".format(col_name, data_description.loc[col_name])]\n\n    fillna_none = \"--- None ---\"\n    result = pd.crosstab(data[ind_name].fillna(fillna_none),\n                         data[col_name].fillna(fillna_none),\n                         normalize=normalize_by)\n    result['All'] = result.sum(axis=1)\n    result = result.sort_values(by='All', ascending=False)\n    \n    if is_normalize:\n        result = result.drop(['All'], axis=1)\n        result = result.mul(100).round(2)\n    \n    return result_desc, result","0272b4a5":"select_column = \"Q2\"\nresult_desc, result = single_answer_crosstab(select_column)\n\nprint(\"\", *result_desc, \"\", sep=\"\\n\")\nresult","7349cc7a":"select_column = \"Q2\"\nresult_desc, result = single_answer_crosstab(select_column, is_normalize=True)\n\nprint(\"\", *result_desc, \"\", sep=\"\\n\")\nresult","175e5427":"plt.figure(figsize=(12, 5))\nsns.histplot(x=\"Q1\", hue=\"Q2\", data=data.sort_values(by=\"Q1\"),\n             hue_order=[\"Woman\", \"Man\"],\n             multiple=\"fill\", shrink=.75)\nplt.title(\"Distribution by Gender (Man and Woman) and Age\")\nplt.xlabel(\"\")\nplt.show()","67395336":"select_column = \"Q8\"\nexplain_by = \"Q2\"\nresult_desc, result = single_answer_crosstab(select_column, explain_by, is_normalize=True)\n\nprint(\"\", *result_desc, \"\", sep=\"\\n\")\nresult","ce277119":"select_column = \"Q5\"\nexplain_by = \"Q2\"\nresult_desc, result = single_answer_crosstab(select_column, explain_by, is_normalize=True)\n\nprint(\"\", *result_desc, \"\", sep=\"\\n\")\nresult","ac6fd38c":"select_column = \"Q5\"\nexplain_by = \"Q1\"\nresult_desc, result = single_answer_crosstab(select_column, explain_by)\n\nprint(\"\", *result_desc, \"\", sep=\"\\n\")\nresult","dbcc5c2d":"max_roles = 10\n\nplt.figure(figsize=(12, 12))\nsns.histplot(x=\"Q1\", hue=\"Q5\", data=data.sort_values(by=\"Q1\"),\n             hue_order=result.index[:max_roles].tolist(),\n             multiple=\"fill\", shrink=.75)\nplt.title(\"Distribution by Age and current role (or most recent title if retired)\")\nplt.xlabel(\"\")\nplt.show()","8b9cb51e":"select_column = \"Q3\"\nexplain_by = \"Q2\"\nresult_desc, result = single_answer_crosstab(select_column, explain_by, is_normalize=True)\n\nprint(\"\", *result_desc, \"\", sep=\"\\n\")\nresult","a931cba0":"pd.DataFrame({'Man': result['Man'],\n              'Woman': result['Woman'],\n              'Diff (Man - Woman)': (result['Man'] - result['Woman'])}).sort_values(by='Diff (Man - Woman)')","913cda29":"def multiple_answer_stats(group_name, is_sort=False):\n    group_data = data.filter(like=group_name)\n\n    result = pd.DataFrame(group_data.describe().T)\n    result = result.reset_index()\n    result = result.fillna('--- None ---')\n    result = result.set_index('top')\n    result = result.rename(columns={\"index\": \"code\"})\n    result = result.drop(['freq', 'unique'], axis=1)\n    \n    result[' % '] = (result['count'] \/ result['count'].sum()) \\\n                            .mul(100).round(2).map(\" {} %\".format)\n    \n    max_len = 30\n    result.index = result.index.str.strip()\n    result.index = [index_name[:max_len] + \" [...]\" if len(index_name) > max_len\n                    else index_name \n                    for index_name in result.index.tolist()]\n    result.index.name = 'Answers:'    \n\n    if is_sort == True:\n        result = result.sort_values(by='count', ascending=False)\n        \n    first_question = group_data.columns[0]\n    group_title = data_description.loc[first_question]\n    \n    print()\n    print(\">>> ({}) {}\\n\".format(first_question, group_title))\n    print(result)\n    print()","5e8b087d":"data.filter(like=multiple_groups[0]).head()","67d8c896":"for x_group in multiple_groups:\n    multiple_answer_stats(x_group)  # (, is_sort=True)","df9e169c":"def multiple_answer_plot(group_name, explain_by='Q1', n=10):\n    group_data = data.filter(like=group_name).apply(lambda x: x.str.strip())\n    first_question = group_data.columns[0]\n    group_title = data_description.loc[first_question]\n\n    multiple_data = group_data.join(data[explain_by])\n    \n    select_id_vars = [multiple_data.columns[-1]]\n    select_value_vars = multiple_data.columns[:-1].tolist()\n    \n    multiple_data = multiple_data.melt(id_vars=select_id_vars,\n                                       value_vars=select_value_vars,\n                                       ignore_index=False).dropna()\n    \n    check_values = multiple_data.columns[0]\n    explain_by = multiple_data.columns[2]\n    list_explain_by = multiple_data[explain_by].value_counts().nlargest(n) \\\n                                                              .index.tolist()\n\n    multiple_data = multiple_data.sort_values(by=check_values).reset_index(drop=True)\n    \n    plt.figure(figsize=(12, 6))\n    sns.histplot(x=check_values, data=multiple_data.sort_values(by=check_values),\n                 hue=explain_by, hue_order=list_explain_by,\n                 multiple=\"fill\", shrink=.75)\n    plt.xlabel(\"\")\n    plt.show()\n\n    result = multiple_data.groupby([check_values, 'value']).agg(['count']).unstack(level=0)\n    result['All'] = result.sum(axis=1)\n    result = result.sort_values(by='All', ascending=False)\n\n    max_len = 30\n    result.index = result.index.str.strip()\n    result.index = [index_name[:max_len] + \" [...]\" if len(index_name) > max_len\n                    else index_name \n                    for index_name in result.index.tolist()]\n    result.index.name = 'Answers:'    \n   \n    print()\n    print(\">>> ({}) {}\\n\".format(first_question, group_title))    \n    \n    return result","f5076ddc":"group_name = \"Q39\"\nmax_items = 4\nmultiple_answer_plot(group_name, n=max_items)","58767f0e":"group_name = \"Q14\"\nmax_items = 5\nmultiple_answer_plot(group_name, n=max_items)","1a43f742":"## 4.2 Manual check","7d3a0f07":"## 3.2 Manual check","bcafad99":"# 1. Columns by answer type","ce6254e5":"## 4.1 Automatic check with\/without sorting","915f5b35":"# 2. Duration of answers (is it outliers?)","7bc7115c":"## 3.1 Automatic check with\/without Types of duration","afd1b145":"# Importing Libraries & Datasets","3f90ebe8":"# 4. Multiple answer columns","a1f4c5ed":"# 3. Columns with one answer"}}