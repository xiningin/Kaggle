{"cell_type":{"54e55203":"code","ccee4d79":"code","5a939350":"code","a61c4777":"code","96144a6d":"code","d71ef554":"code","facfc171":"code","49a862f8":"code","21135422":"code","1baf2b3d":"code","54ee08e8":"code","482dccbf":"code","1fa7618d":"code","9bbea368":"code","e6c1a63f":"code","c5e267e8":"markdown","55dc0816":"markdown","3d454730":"markdown","6a6acbbb":"markdown","9ac11b8c":"markdown","bc911e19":"markdown","720dd560":"markdown","4ab1af4a":"markdown","b2ed1d10":"markdown","429a989f":"markdown","b2ddd126":"markdown","4050e608":"markdown","abf90740":"markdown","5f1264b8":"markdown","f54f8320":"markdown","fc0c2864":"markdown"},"source":{"54e55203":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.cluster import AgglomerativeClustering\nfrom sklearn.metrics import silhouette_score\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport plotly as py\nplt.style.use('ggplot')\n\nimport warnings\nwarnings.filterwarnings('ignore')\npy.offline.init_notebook_mode(connected=True)","ccee4d79":"data = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\nprint('Shape of the dataset: {}\\n'.format(data.shape))\nprint('Information: {}'.format(data.info()))","5a939350":"fig, ax = plt.subplots(1,3,figsize=(20,6))\nn = 0\nfor x in ['Age','Annual Income (k$)','Spending Score (1-100)']:\n    sns.distplot(data[x],bins=20,color='#244747',ax=ax[n])\n    ax[n].set_title('Distplot of {}'.format(x))\n    n+=1","a61c4777":"fig, ax = plt.subplots(figsize=(15,5))\nsns.countplot(y='Gender',data=data)\nplt.show()","96144a6d":"sns.pairplot(data.drop('CustomerID', axis=1), hue='Gender', aspect=1.5)\nplt.show()","d71ef554":"fig, ax = plt.subplots(1,3,figsize=(20,6))\nn = 0\nfor col in ['Age','Annual Income (k$)','Spending Score (1-100)']:\n    sns.violinplot(x=col,y='Gender',data=data, palette='vlag',ax=ax[n])\n    sns.swarmplot(x=col,y='Gender',data=data,ax=ax[n])\n    n+=1","facfc171":"fig, ax = plt.subplots(3,1,figsize=(16,12))\nsns.kdeplot(data=data,x='Age',hue='Gender',fill=True,ax=ax[0])\nsns.kdeplot(data=data,x='Annual Income (k$)',hue='Gender',fill=True,ax=ax[1])\nsns.kdeplot(data=data,x='Spending Score (1-100)',hue='Gender',fill=True,ax=ax[2])\nax[2].legend()\nax[1].legend()\nplt.show()","49a862f8":"X1 = data[['Age','Spending Score (1-100)']].iloc[:,:].values\ninertia = []\nfor i in range(1,11):\n    model = KMeans(n_clusters=i, max_iter=300, tol=0.0001, random_state=42)\n    model.fit(X1)\n    inertia.append(model.inertia_)\n_, ax = plt.subplots(figsize=(12,6))\nsns.lineplot(x=np.arange(1,11),y=inertia,color='#91b8bd',ax=ax)\nsns.scatterplot(x=np.arange(1,11),y=inertia,color='#244747',ax=ax)\nax.set_title('Cluster vs Inertia')\nax.set_xlabel('Cluster')\nax.set_ylabel('Inertia')\n\nax.annotate(\" We'll select 4 clusters\", \n            xy=(4, 15000), fontsize=12,\n            va = 'center', ha='center',\n            color='#4a4a4a',\n            bbox=dict(boxstyle='round', pad=0.4, facecolor='#efe8d1', linewidth=0))\n\nplt.show()","21135422":"model = KMeans(n_clusters=4, max_iter=300, tol=0.0001, random_state=42)\nmodel.fit(X1)\nlabels = model.labels_\ncentroids = model.cluster_centers_\nnew_data = data[['Age','Spending Score (1-100)']].iloc[:,:]\nnew_data['label'] = labels\n\n_, ax = plt.subplots(figsize=(20, 8))\nsns.scatterplot(data=new_data,x='Age',y='Spending Score (1-100)',hue='label',palette='Accent')\nax.set_title('Clusters')\nplt.show()","1baf2b3d":"X2 = data[['Annual Income (k$)','Spending Score (1-100)']].iloc[:,:].values\ninertia = []\nfor i in range(1,11):\n    model = KMeans(n_clusters=i, max_iter=300, tol=0.0001, random_state=42)\n    model.fit(X2)\n    inertia.append(model.inertia_)\n_, ax = plt.subplots(figsize=(12,6))\nsns.lineplot(x=np.arange(1,11),y=inertia,color='#91b8bd',ax=ax)\nsns.scatterplot(x=np.arange(1,11),y=inertia,color='#244747',ax=ax)\nax.set_title('Cluster vs Inertia')\nax.set_xlabel('Cluster')\nax.set_ylabel('Inertia')\n\nax.annotate(\" We'll select 5 clusters\", \n            xy=(4, 30000), fontsize=12,\n            va = 'center', ha='center',\n            color='#4a4a4a',\n            bbox=dict(boxstyle='round', pad=0.4, facecolor='#efe8d1', linewidth=0))\n\nplt.show()","54ee08e8":"model = KMeans(n_clusters=5, max_iter=300, tol=0.0001, random_state=42)\nmodel.fit(X2)\nlabels = model.labels_\ncentroids = model.cluster_centers_\nnew_data = data[['Annual Income (k$)','Spending Score (1-100)']].iloc[:,:]\nnew_data['label'] = labels\n\n_, ax = plt.subplots(figsize=(20, 8))\nsns.scatterplot(data=new_data,x='Annual Income (k$)',y='Spending Score (1-100)',hue='label',palette='Accent')\nax.set_title('Clusters')\nplt.show()","482dccbf":"X3 = data[['Age','Annual Income (k$)','Spending Score (1-100)']].iloc[:,:].values\ninertia = []\nfor i in range(1,11):\n    model = KMeans(n_clusters=i, max_iter=300, tol=0.0001, random_state=520)\n    model.fit(X3)\n    inertia.append(model.inertia_)\n_, ax = plt.subplots(figsize=(12,6))\nsns.lineplot(x=np.arange(1,11),y=inertia,color='#91b8bd',ax=ax)\nsns.scatterplot(x=np.arange(1,11),y=inertia,color='#244747',ax=ax)\nax.set_title('Cluster vs Inertia')\nax.set_xlabel('Cluster')\nax.set_ylabel('Inertia')\n\nax.annotate(\" We'll select 5 clusters\", \n            xy=(4.5, 50000), fontsize=12,\n            va = 'center', ha='center',\n            color='#4a4a4a',\n            bbox=dict(boxstyle='round', pad=0.4, facecolor='#efe8d1', linewidth=0))\n\nplt.show()","1fa7618d":"model = KMeans(n_clusters=5, max_iter=300, tol=0.0001, random_state=42)\nmodel.fit(X3)\nlabels = model.labels_\ncentroids = model.cluster_centers_\n\nnew_data = data[['Age','Annual Income (k$)','Spending Score (1-100)']].iloc[:,:]\nchar_labels = [str(i) for i in labels]\nnew_data['Label'] = char_labels\n\nnew_data.rename(columns={'Annual Income (k$)':'Annual Income','Spending Score (1-100)':'Spending Score'},inplace=True)\nnew_data.sort_values(by='Label',inplace=True)\n\nfig = px.scatter_3d(new_data,x='Age',\n                    y='Annual Income',\n                    z='Spending Score',\n                    color='Label',\n                    width=800, \n                    height=600)\nfig.show()\nprint(silhouette_score(X3,labels,metric='euclidean'))","9bbea368":"categories = ['Age', 'Annual Income', 'Spending Score']\n\ntp0 = new_data[new_data['Label']=='0'].drop('Label',axis=1)\ntp1 = new_data[new_data['Label']=='1'].drop('Label',axis=1)\ntp2 = new_data[new_data['Label']=='2'].drop('Label',axis=1)\ntp3 = new_data[new_data['Label']=='3'].drop('Label',axis=1)\ntp4 = new_data[new_data['Label']=='4'].drop('Label',axis=1)\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatterpolar(\n    r=tp0.mean().values,\n    theta=categories,\n    fill='toself',\n    name='Type 0'\n))\n\nfig.add_trace(go.Scatterpolar(\n    r=tp1.mean().values,\n    theta=categories,\n    fill='toself',\n    name='Type 1'\n))\n\nfig.add_trace(go.Scatterpolar(\n    r=tp2.mean().values,\n    theta=categories,\n    fill='toself',\n    name='Type 2'\n))\n\nfig.add_trace(go.Scatterpolar(\n    r=tp3.mean().values,\n    theta=categories,\n    fill='toself',\n    name='Type 3'\n))\n\nfig.add_trace(go.Scatterpolar(\n    r=tp4.mean().values,\n    theta=categories,\n    fill='toself',\n    name='Type 4'\n))\n\nfig.update_layout(\n  polar=dict(\n    radialaxis=dict(\n      visible=True,\n      range=[0, 100]\n    )),\n  showlegend=True,\n)","e6c1a63f":"fig = make_subplots(rows=1,cols=3,specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=['Type {}'.format(i) for i in range(5)],\n                     values=[tp0.mean()['Annual Income'],tp1.mean()['Annual Income'],tp2.mean()['Annual Income'],tp3.mean()['Annual Income'],tp4.mean()['Annual Income']], \n                     name=\"Annual Income\"),\n              1, 1)\n\nfig.add_trace(go.Pie(labels=['Type {}'.format(i) for i in range(5)],\n                     values=[tp0.count()['Annual Income'],tp1.count()['Annual Income'],tp2.count()['Annual Income'],tp3.count()['Annual Income'],tp4.count()['Annual Income']], \n                     name=\"Annual Income\"),\n              1, 2)\n\nfig.add_trace(go.Pie(labels=['Type {}'.format(i) for i in range(5)],\n                     values=[tp0.sum()['Spending Score'],tp1.sum()['Spending Score'],tp2.sum()['Spending Score'],tp3.sum()['Spending Score'],tp4.sum()['Spending Score']], \n                     name=\"Spending Score\"),\n              1, 3)\n\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text=\"Annual Income | Count | Spending Score\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='AI', x=0.13, y=0.5, font_size=20, showarrow=False),\n                 dict(text='COUNT', x=0.5, y=0.5, font_size=20, showarrow=False),\n                 dict(text='SS', x=0.87, y=0.5, font_size=20, showarrow=False)])\nfig.show()","c5e267e8":"### 4.3 Use 'Age','Annual Income (k$)','Spending Score (1-100)'","55dc0816":"- **Type 0**: High Income, Low Spending (Important retention of customers: This part of the customer consumption potential is similar to the important value user, the number of people in the middle, but the consumption performance of the penultimate second, we should actively communicate with customers, improve the user's repurchase rate, while conducting research on this part of the user, improve the shopping experience of such users)\n- **Type 1**: Median Income, Median Spending (Main User: Medium consumption potential, the largest number of people, the largest total consumption, is the pillar of the company's income)\n- **Type 2**: Low Income, High Spending (Promotion of sensitive customers: low consumption potential, relatively small number of people, the third largest total consumption, should push more preferential information, as well as combined preferential information)\n- **Type 3**: High Income, High Spending (Important value users: Whether it is from the per capita annual income (consumption potential), the proportion of the number of people (19.5% second), or heavy consumption scoring (31.9%, second, consumption performance) this user group is worth investing a lot of resources to maintain, we can provide VIP services to this part of the customer, optimize the product association recommendation algorithm)\n- **Type 4**: Low Income, Low Spending (Low-value customers: consumption potential, the proportion of people, consumption performance are the end, this part of the user we only need to invest a small amount of resources, appropriate push cheap products)","3d454730":"# Customer Clustering Analysis\n\n**Steps:**\n\n1. Load the packages\n2. Load the data\n3. Exploratory Data Analysis\n4. Build the model (K-Means)\n5. Visualization\n6. Business Analysis","6a6acbbb":"- **Type 0**: High Income, Low Spending ()\n- **Type 1**: Median Income, Median Spending ()\n- **Type 2**: Low Income, High Spending ()\n- **Type 3**: High Income, High Spending ()\n- **Type 4**: Low Income, Low Spending ()","9ac11b8c":"## 1. Load the packages\n(It's my first time using plotly.py. It's an amazing python visualization package!!!)","bc911e19":"## 6. Business Analysis","720dd560":"It seems that there's no difference between male and female.\nAnd there's almost no correlation between Annual Income and Spending Score.","4ab1af4a":"### 4.2 Use 'Annual Income (k$)','Spending Score (1-100)'","b2ed1d10":"Feature of 5 type customers\n\nRadar Chart","429a989f":"No missing Value","b2ddd126":"## 4. Build the model (K-Means)\n### 4.1 Use 'Age','Spending Score (1-100)'","4050e608":"## 3. Exploratory Data Analysis","abf90740":"## 5. Visualization","5f1264b8":"Distribution of each gender are similar to each other. So we can drop this feature! (It is a discrete feature, which is a bad news for K-Means)","f54f8320":"**The distribution of Age, Annual Income and Spending Score are close to normal distribution, so I don't transform them.**","fc0c2864":"## 2. Load the data"}}