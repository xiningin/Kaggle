{"cell_type":{"f82476e3":"code","82b029c5":"code","06b4aa8a":"code","1a6bc398":"code","d601af5f":"code","3a5d32cb":"code","9681184c":"code","b39b68d1":"code","8f525769":"code","babec552":"code","c0648114":"code","6e198b9a":"code","7c7e9a4b":"code","2da1a21c":"code","c5b671a1":"code","215e84c1":"code","22dc006b":"code","10b6afa1":"code","5d5a3ea5":"code","70493732":"code","daf67d22":"code","907cd32e":"code","f8d2f011":"code","8edd83ed":"code","25db8700":"code","c8358edd":"code","43b518ec":"code","4e37842c":"code","5458adcf":"code","fbf8c009":"code","292ab5fa":"code","dcd4191d":"code","c02c9beb":"code","6ec8ad4e":"markdown","fe44cb66":"markdown"},"source":{"f82476e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nriders = pd.read_csv('\/kaggle\/input\/portland-oregon-avg-rider-monthly-data\/portland-oregon-average-monthly-.csv', encoding='ISO-8859-1')","82b029c5":"#importing necessary libraries\nimport numpy as np \nimport pandas as pd \nimport warnings\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings('ignore')\n","06b4aa8a":"riders.head()","1a6bc398":"riders.shape","d601af5f":"riders = riders.rename(columns={\"Portland Oregon average monthly bus ridership (\/100) January 1973 through June 1982, n=114\": \"bus ridership\"})\n","3a5d32cb":"riders.head()","9681184c":"riders.info()","b39b68d1":"riders.describe()","8f525769":"riders = riders[:-1]","babec552":"riders","c0648114":"riders['Month'] = pd.to_datetime(riders['Month'],format='%Y\/%m')","6e198b9a":"riders['bus ridership'] = riders['bus ridership'].astype(int)\n","7c7e9a4b":"riders","2da1a21c":"riders.plot.line(x='Month',y='bus ridership')\n","c5b671a1":"df1=riders\n","215e84c1":"mon = df1['Month']\n","22dc006b":"print(mon.shape)\nprint(mon.head(2))","10b6afa1":"temp=pd.DatetimeIndex(mon)\n","5d5a3ea5":"temp","70493732":"month = pd.Series(temp.month)\n","daf67d22":"month","907cd32e":"df1=df1.drop(['Month'],axis=1)\n","f8d2f011":"df1","8edd83ed":"df1=df1.join(month)\n","25db8700":"df1.head()","c8358edd":"sns.barplot(x='Month',y='bus ridership',data=df1)\nplt.show()","43b518ec":"pd.plotting.lag_plot(riders['bus ridership'])\nplt.show()\n","4e37842c":"riders = riders.set_index('Month')","5458adcf":"import statsmodels.api as sm\nmod = sm.tsa.SARIMAX(riders['bus ridership'], trend='n', order=(0,1,0), seasonal_order=(1,1,1,12))\nresults = mod.fit()\nprint(results.summary())\n","fbf8c009":"riders['forecast'] = results.predict(start = 102, end= 120, dynamic= True)  \nriders[['bus ridership', 'forecast']].plot(figsize=(12, 8))\nplt.show()","292ab5fa":"riders.tail()","dcd4191d":"def forcasting_future_months(df, no_of_months):\n    df_perdict = riders.reset_index()\n    mon = df_perdict['Month']\n    mon = mon + pd.DateOffset(months = no_of_months)\n    future_dates = mon[-no_of_months -1:]\n    df_perdict = df_perdict.set_index('Month')\n    future = pd.DataFrame(index=future_dates, columns= df_perdict.columns)\n    df_perdict = pd.concat([df_perdict, future])\n    df_perdict['forecast'] = results.predict(start = 114, end = 125, dynamic= True)  \n    df_perdict[['bus ridership', 'forecast']].iloc[-no_of_months - 12:].plot(figsize=(12, 8))\n    plt.show()\n    return df_perdict[-no_of_months:]","c02c9beb":"predicted = forcasting_future_months(riders,10)","6ec8ad4e":"we can observe that average number of riders is increasing most of time\n","fe44cb66":"## **Krish Sukhani**\n## **TE IT**\n## **Batch D**\n## **59**\n"}}