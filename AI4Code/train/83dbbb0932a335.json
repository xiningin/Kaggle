{"cell_type":{"1e4f273d":"code","94ef24c5":"code","4315d071":"code","507dd483":"code","3787ce37":"code","193b99d0":"code","4fc05de7":"code","7b6378a6":"code","70f3e43b":"code","7791d34e":"code","6da4ded6":"markdown","014d66f3":"markdown","a8a1d887":"markdown","24d68569":"markdown"},"source":{"1e4f273d":"from pandas import *\n\n# this is to turn on the option to display all columns when we get a sample of data using df.head()\nset_option('display.max_columns', None)\nset_option('display.max_rows', None) \n\ndf = read_csv(\"..\/input\/train.csv\")\nprint(\"Finished loading dataset!\")","94ef24c5":"df.head()","4315d071":"df.shape","507dd483":"# for purpose of demonstration, we will only take the first 10000 rows \ndf = df.head(10000)","3787ce37":"# Ex: to access the dropoff_latitude of the first entry(row)\ndf.iloc[0]['dropoff_latitude']","193b99d0":"from math import sin, cos, sqrt, atan2, radians\n\ndef getDistance(lat1, lon1, lat2, lon2):\n    R = 6373.0\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = (sin(dlat\/2))**2 + cos(lat1) * cos(lat2) * (sin(dlon\/2))**2\n    c = 2 * atan2(sqrt(a), sqrt(1-a))\n    distance = R * c\n    return distance\n# add a new column called trip_distance, the unit is km\ndf['trip_distance'] = 0.0\ndf.head()\n","4fc05de7":"for (index, row) in df.iterrows():\n    pickup_lon = row['pickup_longitude']\n    pickup_lat = row['pickup_latitude']\n    dropoff_lon = row['dropoff_longitude']\n    dropoff_lat = row['dropoff_latitude']\n    df.at[index, 'trip_distance'] = getDistance(pickup_lat, pickup_lon, dropoff_lat, dropoff_lon)\nimport matplotlib.pyplot as plt\ndf.head(10)","7b6378a6":"import matplotlib.pyplot as plt\ntrip_duration_list = []\ntrip_distance_list = []\nfor (index, row) in df.iterrows():\n    trip_duration_list.append(row['trip_duration'])\n    trip_distance_list.append(row['trip_distance'])\nplt.plot(trip_distance_list, trip_duration_list, 'ro', markerSize = 1)\nplt.show()","70f3e43b":"trip_duration_list = []\ntrip_distance_list = []\nfor (index, row) in df.iterrows():\n    if row['trip_duration'] > 20000: continue\n    trip_duration_list.append(row['trip_duration'])\n    trip_distance_list.append(row['trip_distance'])\nplt.plot(trip_distance_list, trip_duration_list, 'ro', markerSize = 1)\nplt.show()","7791d34e":"import numpy as np\n\nfrom sklearn import linear_model\n\nnum_trips = len(trip_distance_list)\n\nY = np.array(trip_duration_list)\nX = np.ndarray(shape=(num_trips, 1), dtype=float)\nfor i in range(num_trips):\n    X[i][0] = trip_distance_list[i]\n    \nclf = linear_model.LinearRegression()\nclf.fit(X, Y)\nprint(\"Slope: \" + str(clf.coef_[0]))\nprint(\"Intercept: \" + str(clf.intercept_))\n","6da4ded6":"Now let's get a sense of what the dataset looks at using df.head(). You can input a parameter into this function to indicate how many rows you would like to see.","014d66f3":"We can use df.shape to know the shape of the dataset (how many rows and how many columns). Each row is a data entry and each column is a feature of the dataset.","a8a1d887":"We can see that there are a couple outliers from this graph. The clustering at the upper left corner likely corresponds to trips that stayed at a place for a long time without moving. We consider removing these outliers and plot the data again.","24d68569":"Now we can see a better graph that displays the relationship between trip duration and trip distance. We can clearly see a positive correlation from this graph - the longer the distance of the trip, the longer the trip takes. This totally makes sense. We will try to fit a line on this graph."}}