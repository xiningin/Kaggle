{"cell_type":{"b3958ba3":"code","9e170e70":"code","d430e1ab":"code","aff93fa7":"code","95211ee2":"code","6588fb2e":"code","3d3bc676":"code","848b8b5a":"code","325c002f":"code","3b43be61":"code","b930f6a7":"code","40f7a6e8":"code","8065270c":"code","ec6c7432":"code","e61ffb9b":"code","3ff3f33a":"code","10a23ad8":"code","7251e00b":"code","0c4fd37d":"code","2d55ed02":"code","1ff2018b":"code","92d94712":"code","0c5f738f":"code","deb79dad":"markdown","0e4d48d0":"markdown","55c1ac3e":"markdown","544ef86a":"markdown","d9669fb3":"markdown","0a22b441":"markdown","2e26d9af":"markdown","4f311820":"markdown","0a9c0eee":"markdown","dee10837":"markdown","315c757d":"markdown","b7f183a8":"markdown","12433b78":"markdown","9e0cb3d0":"markdown"},"source":{"b3958ba3":"import pandas as pd\nimport requests, json\nimport time\nimport os\n\nimport os\n\npd.options.mode.chained_assignment = None\n\n# \u044d\u0442\u043e\u0442 \u0431\u043b\u043e\u043a \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 kaggle\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nPATH_to_file = '\/kaggle\/input\/sf-dst-car-price\/'\nPATH_to_file_data = '\/kaggle\/input\/all-brands-and-models-for-auto-ru-09-09-2020\/'\n\n# # # \u044d\u0442\u043e\u0442 \u0431\u043b\u043e\u043a \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435\n# from importlib import reload\n# print(os.listdir('.\/data'))\n# PATH_to_file = '.\/data\/'","9e170e70":"df_marks_and_models = pd.read_csv(PATH_to_file_data + 'all_car_brands_and_their_models_from_auto_ru.csv', index_col=0)\nprint('\u041a\u043e\u043b-\u0432\u043e \u043c\u0430\u0440\u043e\u043a: ', df_marks_and_models.shape[0])\ndisplay(df_marks_and_models.head(2))","d430e1ab":"# \u043a\u043e\u043b-\u0432\u043e \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 \u043d\u0430 9.9.2020 \ndict_of_num_cars_of_models ={'AC':2, 'Acura':94, 'Alfa\u00a0Romeo':65, 'Alpina':10, \n                             'AMC':2, 'Ariel':1, 'Asia':1, 'Aston\u00a0Martin':25, \n                             'Audi':4093, 'Austin\u00a0Healey':1, 'Bajaj':3, \n                             'Bentley':104, 'BMW':7423, 'Borgward':1, \n                             'Brilliance':10, 'Buick':17, 'BYD':22, \n                             'Cadillac':321, 'Changan':100, 'Chery':593, \n                             'Chevrolet':3670, 'Chrysler':316, 'Citroen':1142, \n                             'Dacia':9, 'Daewoo':1024, 'Daihatsu':47, \n                             'Daimler':5, 'Datsun':212, 'Delage':1, 'Derways':2, \n                             'DKW':1, 'Dodge':413, 'DongFeng':25, 'Doninvest':2, \n                             'DS':3, 'DW\u00a0Hower':8, 'Eagle':1, 'Excalibur':1, \n                             'FAW':66, 'Ferrari':29, 'Fiat':206, 'Ford':4812, \n                             'Foton':2, 'GAC':14, 'Geely':302, 'Genesis':54, \n                             'GMC':26, 'Great\u00a0Wall':420, 'Hafei':6, 'Haima':12, \n                             'Haval':110, 'Hawtai':4, 'Heinkel':1, 'Honda':1179, \n                             'HuangHai':1, 'Hummer':70, 'Hyundai':5712, \n                             'Infiniti':1041, 'Innocenti':1, 'Iran\u00a0Khodro':21, \n                             'Isuzu':43, 'JAC':8, 'Jaguar':308, 'Jeep':466, 'JMC':1, \n                             'Kia':5595, 'LADA\u00a0(\u0412\u0410\u0417)':8935, 'Lamborghini':14, \n                             'Lancia':8, 'Land\u00a0Rover':1616, 'Lexus':985, \n                             'Lifan':295, 'Lincoln':62, 'Lotus':1, 'Luxgen':9, \n                             'Mahindra':1, 'Maserati':54, 'Maybach':7, \n                             'Mazda':2311, 'McLaren':5, 'Mercedes-Benz':8005, \n                             'Mercury':16, 'Metrocab':2, 'MG':10, 'MINI':313, \n                             'Mitsubishi':3935, 'Mitsuoka':3, 'Nissan':5776, \n                             'Oldsmobile':10, 'Opel':3131, 'Packard':2, \n                             'Peugeot':1636, 'Plymouth':13, 'Pontiac':38, \n                             'Porsche':714, 'Proton':3, 'PUCH':1, 'Ravon':112, \n                             'Renault':2771, 'Rolls-Royce':55, 'Rover':69, \n                             'Saab':147, 'Saturn':9, 'Scion':9, 'SEAT':77, \n                             'Shanghai\u00a0Maple':1, 'Skoda':2810, 'Smart':89, \n                             'SsangYong':718, 'Subaru':934, 'Suzuki':878, \n                             'Tatra':5, 'Tesla':43, 'Tianma':2, 'Toyota':4648, \n                             'Triumph':1, 'Vauxhall':1, 'Volkswagen':7109, \n                             'Volvo':2069, 'Vortex':91, 'Wartburg':1, 'Willys':2, \n                             'Zotye':15, 'ZX':4, '\u0413\u0410\u0417':935, '\u0413\u043e\u043d\u043e\u0447\u043d\u044b\u0439\u00a0\u0431\u043e\u043b\u0438\u0434':2, \n                             '\u0417\u0410\u0417':231, '\u0417\u0418\u041b':2, '\u0418\u0416':129, '\u041b\u0443\u0410\u0417':45, \n                             '\u041c\u043e\u0441\u043a\u0432\u0438\u0447':198, '\u0421\u041c\u0417':4, '\u0422\u0430\u0433\u0410\u0417':68, '\u0423\u0410\u0417':1107}","aff93fa7":"# \u0443\u0431\u0435\u0440\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043a\u043e\u043b-\u0432\u043e\u043c \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u043d\u0438\u0436\u0435 300 \u0438 \u043f\u043e\u0432\u044b\u0441\u0438\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \nlist_keys_to_delete = []\nfor mark in dict_of_num_cars_of_models.keys():\n    if dict_of_num_cars_of_models[mark] < 300:\n        list_keys_to_delete.append(mark)\n    \nfor key in list_keys_to_delete: del dict_of_num_cars_of_models[key]\n\nfor mark in list(dict_of_num_cars_of_models.keys()):\n    mark_up = mark.upper()\n    dict_of_num_cars_of_models[mark_up]=dict_of_num_cars_of_models.pop(mark)","95211ee2":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439\nprint(*dict_of_num_cars_of_models, sep=',')","6588fb2e":"# \u0423\u0434\u0430\u043b\u0438\u043c \u043e\u0442\u0435\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\nfor key in ['LADA\u00a0(\u0412\u0410\u0417)','\u0413\u0410\u0417','\u0423\u0410\u0417']: del dict_of_num_cars_of_models[key]","3d3bc676":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0447\u0442\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430 \u0441\u0430\u0439\u0442\u0430 auto.Ru\nlist_marks_df = list(df_marks_and_models.index)\nlist_marks_to_check = []\nfor mark in dict_of_num_cars_of_models.keys():\n    if mark not in list_marks_df:\n        list_marks_to_check.append(mark)\nprint(f'\u0432\u0441\u0435\u0433\u043e \u043c\u0430\u0440\u043e\u043a \u0441 \u043a\u043e\u043b-\u0432\u043e\u043c \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u0431\u043e\u043b\u0435\u0435 300:= {len(dict_of_num_cars_of_models)}')\nprint('\u0441\u043f\u0438\u0441\u043e\u043a \u043c\u0430\u0440\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c :=', *list_marks_to_check)","848b8b5a":"# \u044d\u0442\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c \u0438\u043b\u0438 \u0441 \u0434\u0435\u0444\u0438\u0441\u043e\u043c \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0438\ndict_of_num_cars_of_models['GREAT\u00a0WALL']","325c002f":"# \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u043d\u0435\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f\ndict_of_num_cars_of_models['GREAT_WALL']=dict_of_num_cars_of_models.pop('GREAT\u00a0WALL')\ndict_of_num_cars_of_models['LAND_ROVER']=dict_of_num_cars_of_models.pop('LAND\u00a0ROVER')\ndict_of_num_cars_of_models['MERCEDES']=dict_of_num_cars_of_models.pop('MERCEDES-BENZ')\ndict_of_num_cars_of_models['SSANG_YONG']=dict_of_num_cars_of_models.pop('SSANGYONG')","3b43be61":"# \u0435\u0449\u0435 \u0440\u0430\u0437 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0447\u0442\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430 \u0441\u0430\u0439\u0442\u0430 auto.Ru\nlist_marks_df = list(df_marks_and_models.index)\nlist_marks_to_check = []\nfor mark in dict_of_num_cars_of_models.keys():\n    if mark not in list_marks_df:\n        list_marks_to_check.append(mark)\nprint(f'\u0432\u0441\u0435\u0433\u043e \u043c\u0430\u0440\u043e\u043a \u0441 \u043a\u043e\u043b-\u0432\u043e\u043c \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u0431\u043e\u043b\u0435\u0435 300 := {len(dict_of_num_cars_of_models)}')\nprint('\u0441\u043f\u0438\u0441\u043e\u043a \u043c\u0430\u0440\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c :=', *list_marks_to_check)","b930f6a7":"# \u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0445 \u043c\u0430\u0440\u043e\u043a \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430\nlist_of_relevant_marks = list(dict_of_num_cars_of_models.keys())","40f7a6e8":"sum_of_ads = sum(dict_of_num_cars_of_models.values())\nprint(f\"\u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u043f\u043e\u0441\u043b\u0435 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c := {sum_of_ads}\")","8065270c":"HEADERS = {\n    'Accept': '*\/*',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',\n    'Connection': 'keep-alive',\n    'Content-Length': '137',\n    'content-type': 'application\/json',\n    'Cookie': '_csrf_token=1c0ed592ec162073ac34d79ce511f0e50d195f763abd8c24; autoru_sid=a%3Ag5e3b198b299o5jhpv6nlk0ro4daqbpf.fa3630dbc880ea80147c661111fb3270%7C1580931467355.604800.8HnYnADZ6dSuzP1gctE0Fw.cd59AHgDSjoJxSYHCHfDUoj-f2orbR5pKj6U0ddu1G4; autoruuid=g5e3b198b299o5jhpv6nlk0ro4daqbpf.fa3630dbc880ea80147c661111fb3270; suid=48a075680eac323f3f9ad5304157467a.bc50c5bde34519f174ccdba0bd791787; from_lifetime=1580933172327; from=yandex; X-Vertis-DC=myt; crookie=bp+bI7U7P7sm6q0mpUwAgWZrbzx3jePMKp8OPHqMwu9FdPseXCTs3bUqyAjp1fRRTDJ9Z5RZEdQLKToDLIpc7dWxb90=; cmtchd=MTU4MDkzMTQ3MjU0NQ==; yandexuid=1758388111580931457; bltsr=1; ',\n    'Host': 'auto.ru',\n    'origin': 'https:\/\/auto.ru\/cars\/all\/',\n    'Referer': 'https:\/\/auto.ru\/cars\/all\/',\n    'User-Agent': 'Mozilla\/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko\/20100101 Firefox\/72.0',\n    'x-client-app-version': '202002.03.092255',\n    'x-client-date': '1580933207763',\n    'x-csrf-token': '1c0ed592ec162073ac34d79ce511f0e50d195f763abd8c24',\n    'x-page-request-id': '60142cd4f0c0edf51f96fd0134c6f02a',\n    'x-requested-with': 'fetch'\n}","ec6c7432":"url = \"https:\/\/auto.ru\/-\/ajax\/desktop\/listing\/\"","e61ffb9b":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u044b \ntest = pd.read_csv(PATH_to_file+'test.csv')\nprint('\u041a\u043e\u043b-\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0442\u0435\u0441\u0442\u0430:', test.shape[1])\nprint('\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0442\u0435\u0441\u0442\u0430:', list(test.columns))\n\n# \u0432\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430\npd.set_option('display.max_columns', None)\ntest.head(2)","3ff3f33a":"# \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043b\u044f BMW \u043c\u043e\u0434\u0435\u043b\u0438 M6 \u0438 \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u0435\u0433\u043e \u043d\u0430 \u044d\u043a\u0440\u0430\u043d, \u0447\u0442\u043e\u0431\u044b \u043f\u043e \u043d\u0435\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f 23 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n\n\n# \u043d\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0433\u043b\u0430\u0432\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430\nmark = 'BMW'  # \u043c\u0430\u0440\u043a\u0430\nmodel = 'M6'  # \u043c\u043e\u0434\u0435\u043b\u044c\ngeo_radius = 200  # \u0440\u0430\u0434\u0438\u0443\u0441 \u0432\u043e\u043a\u0440\u0443\u0433 \u043c\u043e\u0441\u043a\u0432\u044b = 200 \u043a\u043c\ngeo_id = [213]  # \u041c\u043e\u0441\u043a\u0432\u0430\ntop_days = \"1\"  # \u043a\u043e\u043b-\u0432\u043e \u0434\u043d\u0435\u0439 \u043e\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0430\u0442\u044b \u043d\u0430\u0437\u0430\u0434 \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \n\nparam = {\n                'catalog_filter' : [{\"mark\": mark, \"model\": model}],\n                'section': \"all\",\n                'category': \"cars\",\n                'sort': \"fresh_relevance_1-desc\",\n                \"top_days\":,\n                \"geo_radius\":geo_radius,\n                \"geo_id\":geo_id,\n                'page': 1\n            }\n\nresponse = requests.post(url, json=param, headers = HEADERS)\ndata = response.json()\nfor elem in data['offers']:\n    print(elem)\n    break","10a23ad8":"# \u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\nelem['additional_info']['hidden']","7251e00b":"def utils_clean_values_dict(d_dict):\n    for elem in d_dict:\n        d_dict[elem] = 0\n    return","0c4fd37d":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0432\u0441\u043f\u043e\u043c\u0430\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f\ndict_columns = {'bodyType':0, 'brand':0, 'color':0, 'fuelType':0, 'modelDate':0, \n                'name':0, 'numberOfDoors':0, 'productionDate':0, \n                'vehicleConfiguration':0, 'vehicleTransmission':0, \n                'engineDisplacement':0, 'enginePower':0, 'description':0, \n                'mileage':0, '\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f':0, '\u041f\u0440\u0438\u0432\u043e\u0434':0, '\u0420\u0443\u043b\u044c':0, \n                '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435':0, '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b':0, '\u041f\u0422\u0421':0, '\u0422\u0430\u043c\u043e\u0436\u043d\u044f':0, \n                '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435':0, 'price':0}\n\n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 23 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0438\u0437 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c\ndef from_elem_to_dict(d_elem, d_dict):\n    utils_clean_values_dict(d_dict)\n    \n    try: d_dict['bodyType'] = d_elem['vehicle_info']['configuration']['human_name']\n    except: d_dict['bodyType'] = None\n\n    try: d_dict['brand'] = d_elem['vehicle_info']['mark_info']['code']\n    except: d_dict['brand'] = None\n\n    try: d_dict['color'] = d_elem['color_hex']\n    except: d_dict['color'] = None\n\n    try: d_dict['fuelType'] = d_elem['lk_summary'].split()[-1]\n    except: d_dict['fuelType'] = None\n\n    try: d_dict['modelDate'] = d_elem['vehicle_info']['super_gen']['year_from']\n    except: d_dict['modelDate'] = None\n\n    try: d_dict['name'] =  d_elem['vehicle_info']['tech_param']['human_name']\n    except: d_dict['name'] = None\n\n    try: d_dict['numberOfDoors'] = d_elem['vehicle_info']['configuration']['doors_count']\n    except: d_dict['numberOfDoors'] = None\n\n    try: d_dict['productionDate'] = d_elem['documents']['year']\n    except: d_dict['productionDate'] = None\n\n    try: d_dict['vehicleTransmission'] = d_elem['vehicle_info']['tech_param']['transmission']\n    except: d_dict['vehicleTransmission'] = None\n\n    try: d_dict['engineDisplacement'] = d_elem['vehicle_info']['tech_param']['human_name'].split()[0]\n    except: d_dict['engineDisplacement'] = None\n\n    try: d_dict['vehicleConfiguration'] = elem['vehicle_info']['configuration']['body_type']+' '+d_dict['vehicleTransmission']+' '+d_dict['engineDisplacement']\n    except: d_dict['vehicleConfiguration'] = None\n\n    try: d_dict['enginePower'] = d_elem['vehicle_info']['tech_param']['power']\n    except: d_dict['enginePower'] = None\n\n    try: d_dict['description'] = d_elem['description']\n    except: d_dict['description'] = None\n\n    try: d_dict['mileage'] = d_elem['state']['mileage']\n    except: d_dict['mileage'] = None\n\n    try: d_dict['\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f'] = d_elem['vehicle_info']['complectation']\n    except: d_dict['\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f'] = None\n\n    try: d_dict['\u041f\u0440\u0438\u0432\u043e\u0434'] = d_elem['lk_summary'].split(', ')[-2]\n    except: d_dict['\u041f\u0440\u0438\u0432\u043e\u0434'] = None\n\n    try: d_dict['\u0420\u0443\u043b\u044c'] = d_elem['vehicle_info']['steering_wheel']\n    except: d_dict['\u0420\u0443\u043b\u044c'] = None\n\n    # '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435' \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e\n    d_dict['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'] = None\n\n    try: d_dict['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = d_elem['documents']['owners_number']\n    except: d_dict['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = None\n\n    try: d_dict['\u041f\u0422\u0421'] = d_elem['documents']['pts']\n    except: d_dict['\u041f\u0422\u0421'] = None\n\n    try: d_dict['\u0422\u0430\u043c\u043e\u0436\u043d\u044f'] = d_elem['documents']['custom_cleared']\n    except: d_dict['\u0422\u0430\u043c\u043e\u0436\u043d\u044f'] = None\n\n    try: d_dict['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'] =  d_elem['documents']['purchase_date']\n    except: d_dict['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'] = None\n\n\n    try: d_dict['price'] = d_elem['price_info']['RUR']\n    except: d_dict['price'] = None\n\n    # \u0434\u0430\u0442\u0430 \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0448\u0438\u043b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \n    try: d_dict['start_date'] =  d_elem['additional_info']['hot_info']['start_time']\n    except: d_dict['start_date'] = None\n\n    # \u0441\u0442\u0430\u0442\u0443\u0441 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \n    try: d_dict['hidden'] =  d_elemelem['additional_info']['hidden']\n    except: d_dict['hidden'] = None\n\n    # \u043c\u043e\u0434\u0435\u043b\u044c \n    d_dict['model'] =  model\n\n    return\n\n# \u0442\u0435\u0441\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \nfrom_elem_to_dict(elem, dict_columns)","2d55ed02":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0444\u043e\u0440\u043c\u0430\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441 \u0441\u0430\u0439\u0442\u0430 \u0438 \u0442\u0435\u0441\u0442\u0430 \u0441 \u043a\u0430\u0433\u043b\ndisplay(pd.DataFrame(dict_columns).head(2))\ntest[test['enginePower']=='560 N12'].head(2)","1ff2018b":"auto_ru = {}\n\niter_of_ads, iter_of_marks, old_iter_of_ads, sum_ads, sum_ads_from_dict = 0,0,0,0,0\nspace = ' '\nstart_time_global = time.clock()\n\nfor mark in list_of_relevant_marks:\n    start_time = time.clock()\n    list_of_models = json.loads(df_marks_and_models.loc[mark, 'Models'].replace(\"'\", '\"'))\n    for model in list_of_models:\n        for num_page in range(1, 200):\n            param = {\n                'catalog_filter' : [{\"mark\": mark, \"model\": model}],\n                'section': \"all\",\n                'category': \"cars\",\n                'sort': \"fresh_relevance_1-desc\",\n                \"top_days\":\"900\",\n                \"geo_radius\":200,\n                \"geo_id\":[213],\n                'page': num_page\n            }\n            response = requests.post(url, json=param, headers = HEADERS)\n            data = response.json()\n\n            if data['offers'] != []:\n                for elem in data['offers']:\n                    from_elem_to_dict(elem, dict_columns)\n                    auto_ru[iter_of_ads] = dict_columns.copy()\n                    iter_of_ads += 1\n            else:\n                break\n    iter_of_marks +=1\n    temp_1 = iter_of_ads-old_iter_of_ads\n    temp_2 = dict_of_num_cars_of_models[mark]\n    temp_3 = temp_1\/temp_2\n    temp_4 = space*abs(13-len(mark)-len(str(iter_of_marks)))\n    temp_5 = int(time.clock() - start_time)\n    temp_8 = round(temp_3*100,2)\n    temp_7 = space*abs(18-len(str(temp_1))-len(str(temp_2))-len(str(temp_8))-len(str(temp_5)))\n    temp_9 = int(time.clock() - start_time_global)\n    \n\n    sum_ads += temp_1\n    sum_ads_from_dict += temp_2\n    temp_def = sum_ads\/sum_ads_from_dict\n    temp_6 = (sum_of_ads*temp_def - iter_of_ads)*temp_9\/sum_ads\n\n\n    print (f'{iter_of_marks}.{mark} {temp_4} \u0443\u0448\u043b\u043e:{temp_5} \u0441\u0435\u043a., \u0441\u0442\u0440. {temp_1} \u0438\u0437 {temp_2} {temp_8}%,{temp_7}\u0432\u0441\u0435\u0433\u043e \u0441\u0442\u0440. {iter_of_ads}, \u043f\u0440\u043e\u0433\u043d\u043e\u0437 {int(temp_6\/60)} \u043c\u0438\u043d.')\n\n    old_iter_of_ads=iter_of_ads\n\nprint (f'\u0412\u0441\u0435\u0433\u043e \u0441\u043f\u0430\u0440\u0441\u0438\u043b\u0438 := {iter_of_ads} \u0441\u0442\u0440\u043e\u043a, \u043d\u0430 \u044d\u0442\u043e \u0443\u0448\u043b\u043e: {int((time.clock() - start_time_global)\/60)} \u043c\u0438\u043d., ')","92d94712":"# \u0437\u0430\u043f\u0438\u0441\u044c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\ndf_auto_ru = pd.DataFrame(auto_ru).T\ndf_auto_ru.to_csv(PATH_to_file+'all_auto_ru_09_09_2020.csv', index=False)\nprint(f'\u043a\u043e\u043b-\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:= {len(df_auto_ru)}')","0c5f738f":"# \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\ndf_auto_ru.head(3)","deb79dad":"**\u0420\u0435\u0437\u044e\u043c\u0435:**  \n- \u041f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u043f\u043e\u043a\u0430\u0437\u0430\u043b, \u0447\u0442\u043e \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u044b\u0445 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 . \u0422\u0430\u043a \u043a\u0430\u043a \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 90 \u0434\u043d\u0435\u0439 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 43% \u043e\u0442 \u0432\u0441\u0435\u0445 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u043f\u043e BMW, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 900 \u0434\u043d\u0435\u0439, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0435 \u0446\u0438\u0444\u0440\u044b \u0437\u0430\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435. \n- \u0427\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0434 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0430 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0435\u0433\u043e \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0443\u044e \u043c\u0430\u0448\u0438\u043d\u0443. \u041d\u0435 \u0437\u0430\u044b\u0432\u0430\u0439\u0442\u0435 \u0441\u043a\u0430\u0447\u0438\u0432\u0430\u0442\u044c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0432\u0441\u0435\u0445 \u043c\u0430\u0440\u043e\u043a \u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u0441\u0430\u0439\u0442\u0430. \u0423\u0434\u0430\u0447\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430!\n\n\u0415\u0441\u043b\u0438 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u0432\u0430\u043c \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u0441\u044f \u043f\u0440\u043e\u0448\u0443 \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0441\u0442\u0440\u0435\u043b\u043a\u043e\u0439 \u0432\u0432\u0435\u0440\u0445. \u0422\u0430\u043a\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u0432\u0441\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u043c\u0430\u0440\u043e\u043a \u0434\u043b\u044f \u0441\u0430\u0439\u0442\u0430 https:\/\/www.kaggle.com\/sokolovaleks\/all-brands-and-models-for-auto-ru-09-09-2020, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0432\u0441\u0435\u0445 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 9.9.2020 https:\/\/www.kaggle.com\/sokolovaleks\/parsing-all-moscow-auto-ru-09-09-2020.\n\n\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0430 \u0432\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 \u0433\u0438\u0442\u0445\u0430\u0431\u0435 \u0432 \u043f\u0430\u043f\u043a\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 - https:\/\/github.com\/dst10rds6\/rds6\/tree\/master\/parsing\n\n**\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435**\n\u0415\u0441\u043b\u0438 \u043e\u0441\u0442\u0430\u043b\u0438\u0441\u044c \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u0438\/\u0438\u043b\u0438 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u044f - \u043f\u0438\u0448\u0438\u0442\u0435","0e4d48d0":"<img src=\"https:\/\/ia.wampi.ru\/2020\/09\/18\/p1_parsing_dst10_rds6_pic_3.png\" width=\"1000px\"\/>","55c1ac3e":"\u0422\u0430\u043a \u043a\u0430\u043a \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0441 kaggle \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043d\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u043c \u0438\u0437-\u0437\u0430 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438 \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043a\u0443\u043a\u0438\u0441, \u0442\u043e \u044f \u0432\u044b\u043b\u043e\u0436\u0438\u043b \u0441\u044e\u0434\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a \u0432\u044b\u0448\u0435 \u0447\u0442\u043e\u0431\u044b \u0432\u044b \u043c\u043e\u0433\u043b\u0438 \u0441\u044a\u043e\u0440\u0438\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f\n<img src=\"https:\/\/i0.wampi.ru\/2020\/09\/18\/p1_parsing_dst10_rds6_pic_1.png\" width=\"1000px\"\/>","544ef86a":"<img src=\"https:\/\/i0.wampi.ru\/2020\/09\/18\/p1_parsing_dst10_rds6_pic_6.png\" width=\"1000px\"\/>","d9669fb3":"<img src=\"https:\/\/i0.wampi.ru\/2020\/09\/18\/p1_parsing_dst10_rds6_pic_5.png\" width=\"1000px\"\/>","0a22b441":"### 2. \u0418\u043c\u043f\u043e\u0440\u0442 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043c\u0430\u0440\u043a\u0430\u0445 \u0438 \u043c\u043e\u0434\u0435\u043b\u044f\u0445","2e26d9af":"<img src=\"https:\/\/ia.wampi.ru\/2020\/09\/18\/p1_parsing_dst10_rds6_pic_7.png\"  width=\"1000px\"\/>","4f311820":"<img src=\"https:\/\/ia.wampi.ru\/2020\/09\/18\/p1_parsing_dst10_rds6_pic_2.png\"  width=\"1000px\"\/>","0a9c0eee":"### 4. \u041f\u0430\u0440\u0441\u0438\u043d\u0433","dee10837":"<img src=\"https:\/\/i0.wampi.ru\/2020\/09\/18\/p1_parsing_dst10_rds6_pic_8.png\" width=\"300px\">","315c757d":"<img src=\"https:\/\/ia.wampi.ru\/2020\/09\/18\/p1_parsing_dst10_rds6_pic_4.png\"  width=\"1000px\"\/>","b7f183a8":"### **\u0418\u0442\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0410\u043b\u044c\u043c\u0438\u0440\u044b, \u0410\u043d\u0434\u0440\u0435\u044f \u0421\u043a\u043e\u0440\u043e\u0445\u043e\u0434\u043e\u0432\u0430 \u0438 \u0421\u043e\u043a\u043e\u043b\u043e\u0432\u0430 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0430**  \n### \u043f\u043e \u041f\u0440\u043e\u0435\u043a\u0442\u0443 6. Car price prediction \n####  \u042e\u043d\u0438\u0442 6. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f. \u0427\u0430\u0441\u0442\u044c II (\u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d 09.09.2020)\n---\n## \u0427\u0430\u0441\u0442\u044c 1. \u041f\u0430\u0440\u0441\u0438\u043d\u0433\n### 1. \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","12433b78":"### 3. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043a \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0443","9e0cb3d0":"### 2. \u041e\u0442\u0431\u043e\u0440 \u043c\u0430\u0440\u043e\u043a \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430"}}