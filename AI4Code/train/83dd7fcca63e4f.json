{"cell_type":{"79c1f3ad":"code","efe85b37":"code","32022223":"code","2230d74a":"code","65ba8cd3":"code","b282ecf9":"code","6c3d5996":"code","7e729af9":"markdown","d4335f6d":"markdown","75464905":"markdown","300ec645":"markdown"},"source":{"79c1f3ad":"import os\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom torchvision import transforms\nprint(os.listdir(\"..\/input\"))\n%matplotlib inline\n# Any results you write to the current directory are saved as output.","efe85b37":"class BlurAwareCrop():\n    def __init__(self, prob=0.7, blur_thres=200, min_crop=70, return_size=101):\n        self.prob = prob\n        self.blur_thres = blur_thres\n        self.min_crop = min_crop\n        self.return_size = return_size\n        self.tr = None\n    \n    # reference: https:\/\/www.pyimagesearch.com\/2015\/09\/07\/blur-detection-with-opencv\/\n    def sharp_measure(self, img_pil):\n        img_cv = cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)\n        return cv2.Laplacian(img_cv, cv2.CV_64F).var()\n    \n    def __call__(self, img):\n        '''\n        if given image has RGB mode(salt image), compute the sharpness of image using cv and setup transforms to be applied\n        otherwise, if mask is given, just applies same transform again.\n        '''\n        if img.mode == 'RGB':\n            if self.sharp_measure(img) > self.blur_thres and np.random.rand() < self.prob:\n                crop_size = np.random.randint(self.min_crop, self.return_size)\n                self.tr = transforms.Compose([\n                    transforms.RandomCrop(crop_size),\n                    transforms.Resize(self.return_size)\n                ])\n            else:\n                self.tr = transforms.Compose([])\n        return self.tr(img)","32022223":"tr = BlurAwareCrop()","2230d74a":"fnames = pd.read_csv('..\/input\/train.csv', usecols=['id'])","65ba8cd3":"def show_example(index):\n    img = Image.open(f'..\/input\/train\/images\/{fnames.id[index]}.png')\n    mask = Image.open(f'..\/input\/train\/masks\/{fnames.id[index]}.png')\n    sharpness = tr.sharp_measure(img)\n    print(f\"image sharpness: {sharpness}\")\n    if sharpness > tr.blur_thres:\n        print(f\"image is sharp enough, cropping is applied with probability {tr.prob}\")\n    else:\n        print(\"image is blurry, cropping will not applied\")\n    \n    plt.figure(figsize=(16, 9))\n    \n    plt.subplot(141)\n    plt.title('image before transform')\n    plt.imshow(img)\n    \n    plt.subplot(142)\n    plt.title('mask before transform')\n    plt.imshow(mask)\n\n    plt.subplot(143)\n    plt.title('image after transform')\n    plt.imshow(tr(img))\n    \n    plt.subplot(144)\n    plt.title('mask after transform')\n    plt.imshow(tr(mask))\n    plt.show()","b282ecf9":"show_example(15)","6c3d5996":"show_example(19)","7e729af9":"You can use this module chained with other torchvision transforms, using `torchvision.transforms.Compose`.\nI think this module's native that sets up transforms when image is given, and just re-use it when mask is given would be problematic when multiprocessing is used for data loader(with `num_workers` argument), but not tested it myself. I would be grateful if someone contributes to this kernel by testing that, or suggest better way of making augmentations on image and mask syncronized.\n","d4335f6d":"## Example: sharp image. transform will applied according to given probability","75464905":"## Example: blurry image. transform will not applied","300ec645":"# Blurriness-aware Cropping Augmentation with openCV\n\nAs Heng CherKeng's [discussion](https:\/\/www.kaggle.com\/c\/tgs-salt-identification-challenge\/discussion\/65556), the dataset contains somewhat amount of blurry images. \nThe `BlurAwareCrop` class defined in this notebook is a module which takes PIL image as input, measures the blurriness of image, and apply random cropping with given probability on image, **only when** they are determined a sharp image. This module utilizes openCV for measuring the sharpness of image. "}}