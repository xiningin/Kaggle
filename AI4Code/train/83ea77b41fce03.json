{"cell_type":{"3a9135e4":"code","9179fbbd":"code","b414aba6":"code","ee421e60":"code","fca1e64c":"code","62f80a1f":"code","17cffa68":"code","f232fbd8":"code","0991b83e":"code","01571ab9":"code","554ba1b2":"code","8889cb59":"code","30c0ff32":"code","f983b4ec":"code","c91b2e75":"code","0c3108fc":"code","961e5ff2":"code","61c1be29":"code","9203efed":"code","329a956d":"code","5b4779b7":"code","e3a3d459":"code","379dadc1":"code","9413c34b":"code","1475d37c":"code","578e845b":"code","21fcdaeb":"code","0619a133":"code","3d1f16d2":"code","f2931a93":"code","a70ea1d0":"code","d869a4c9":"code","dd68626a":"code","f4d46c1e":"code","4b5b3885":"code","1becdce4":"code","baefdbf5":"code","f934b6ff":"code","f7034725":"code","e5ef6d21":"code","b79c8bf8":"code","a6bacb53":"code","846766cb":"code","342850d0":"code","3a03330e":"code","f159e7f9":"code","01b50b0a":"code","8ff8def0":"code","af786a64":"code","2f49e961":"code","38619645":"code","4e607a70":"code","6a754c86":"markdown","e725ccc3":"markdown","a6011691":"markdown","10671d5b":"markdown","5d1d87b0":"markdown","54d5689e":"markdown","090e33dc":"markdown","2448f2d3":"markdown","19b9dce1":"markdown","c4a837d5":"markdown","4216ebc0":"markdown","11c088b6":"markdown","3006453d":"markdown","ec4edc8b":"markdown","86b8bd29":"markdown","fc3abf74":"markdown","cfc62a80":"markdown","6591e78a":"markdown","791f56bd":"markdown","9ea63879":"markdown"},"source":{"3a9135e4":"from google.colab import files\nfiles.upload() #upload kaggle.json\n\n!pip install -q kaggle\n!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\/\n!ls ~\/.kaggle\n!chmod 600 \/root\/.kaggle\/kaggle.json\n\n!kaggle competitions download -c competitive-data-science-predict-future-sales\n\n!unzip -q sales_train.csv.zip -d .\n!unzip -q sample_submission.csv.zip -d .\n!unzip -q items.csv.zip -d .\n!unzip -q test.csv.zip -d .","9179fbbd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport gc\n%matplotlib inline\n\nitems = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/items.csv')\nitem_categories = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\nshops = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/shops.csv')\ntrain = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ntest = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')","b414aba6":"plt.figure(figsize=(15,4))\nsns.boxplot(train['item_price'])\n\nplt.figure(figsize=(15,4))\nsns.boxplot(train['item_cnt_day'])","ee421e60":"train = train[train['item_price'].lt(100000) & train['item_cnt_day'].lt(1000)]","fca1e64c":"shops[['shop_name', 'shop_id']].drop_duplicates().sort_values(by=['shop_name'])","62f80a1f":"train.loc[train['shop_id'].eq(0),'shop_id'] = 57\ntest.loc[test['shop_id'].eq(0),'shop_id'] = 57\n# shops.loc[shops['shop_id'].eq(0),'shop_id'] = 57\n\ntrain.loc[train['shop_id'].eq(1),'shop_id'] = 58\ntest.loc[test['shop_id'].eq(1),'shop_id'] = 58\n# shops.loc[shops['shop_id'].eq(1),'shop_id'] = 58\n\ntrain.loc[train['shop_id'].eq(10),'shop_id'] = 11\ntest.loc[test['shop_id'].eq(10),'shop_id'] = 11\n# shops.loc[shops['shop_id'].eq(10),'shop_id'] = 11","17cffa68":"test.loc[:,'date_block_num'] = 34\ntest.loc[:,'month'] = 11\ntrain.loc[:,'month'] = train.loc[:,'date'].apply(lambda x: int(x.split('.')[1]))","f232fbd8":"keys = ['date_block_num', 'month', 'shop_id', 'item_id']\ntrain = train.groupby(keys).agg({'item_cnt_day':'sum', 'item_price':'mean'}).reset_index().rename(columns={'item_cnt_day': 'item_cnt_month'})\ntrain.loc[:,'item_cnt_month'] = train['item_cnt_month'].clip(0, 20)","0991b83e":"shops.loc[:,'is_online'] = 0\nshops.loc[shops['shop_id'].eq(55) | shops['shop_id'].eq(12), 'is_online'] = 1","01571ab9":"n_online = np.unique(train['shop_id'], return_counts=True)[1][55 - 1] + np.unique(train['shop_id'], return_counts=True)[1][12 - 1]\nn_total = train.shape[0]\nprint('online buys fraction =', n_online \/ n_total)","554ba1b2":"from sklearn.preprocessing import LabelEncoder\n\nshops.loc[:,'shop_city'] = shops.loc[:,'shop_name'].apply(lambda x: x.split()[0])\nshops.loc[shops['shop_city'].eq('!\u042f\u043a\u0443\u0442\u0441\u043a'),'shop_city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'\nshops.loc[:,'shop_city'] = LabelEncoder().fit_transform(shops['shop_city'])","8889cb59":"items.loc[:,'name1'], items.loc[:,'name2'] = items['item_name'].str.split('[', 1).str\nitems.loc[:,'name1'], items.loc[:,'name3'] = items['item_name'].str.split('(', 1).str\n\nitems.loc[:,'name2'] = items['name2'].str.replace('[^A-Za-z0-9\u0410-\u042f\u0430-\u044f]+', ' ').str.lower()\nitems.loc[:,'name3'] = items['name3'].str.replace('[^A-Za-z0-9\u0410-\u042f\u0430-\u044f]+', ' ').str.lower()\n\nitems.fillna('0', inplace=True)\n\nitems.loc[:,'name2'] = items['name2'].apply(lambda x: x[:-1] if x != '0' else x)\n\nitems.loc[:,'type'] = items['name2'].apply(lambda x: x[0:8] if x.split(' ')[0] == 'xbox' else x.split(' ')[0])\nitems.loc[items['type'].eq('x360') | items['type'].eq('xbox360') | items['type'].eq('xbox 360'),'type'] = 'xbox 360'\nitems.loc[items['type'].eq(''), 'type'] = 'mac'\nitems.loc[items['type'].eq('pc') | items['type'].eq('\u0440\u0441') | items['type'].eq('p\u0441'),'type'] = 'pc'\nitems.loc[items['type'].eq('\u0446\u0438\u0444\u0440\u043e\u0432\u0430\u044f') | items['type'].eq('\u0446\u0438\u0444\u0440\u043e'), 'type'] = '\u0446\u0438\u0444\u0440\u043e'\nitems.loc[items['type'].eq('kg4') | items['type'].eq('5c5') |\n          items['type'].eq('5c7') | items['type'].eq('kf7') | items['type'].eq('kf6'),'type'] = 'xboxone'\nitems.loc[:,'type'] = items.type.apply( lambda x: x.replace(' ', '') )","30c0ff32":"items['type'].unique()","f983b4ec":"strange_codes = ['6jv', 'j72', 'hm3', 's3v', '6dv', '6l6', '5f4', 's4v', 'kg4', '5c5', '5c7', 'kf7', 'kf6']\ngot = set()\nfor x in items['item_name'].unique():\n    if len(x.split('[')) < 2:\n        continue\n    for code in strange_codes: \n        if code in x.split('[')[1].lower():\n            print(x)\n            got.add(code)\nprint(set(strange_codes) - got)\nxboxone_consoles = ['kg4', '5c5', '5c7', 'kf7', 'kf6']","c91b2e75":"group_sum = items.groupby(['type']).agg({'item_id': 'count'}).reset_index()\ndrop_cols = []\n\nfor cat in group_sum['type'].unique():\n    if group_sum.loc[group_sum['type'].eq(cat), \"item_id\"].values[0] < 40:\n        drop_cols.append(cat)\n\nitems.loc[:,'name2'] = items.loc[:,'name2'].apply(lambda x: 'other' if (x in drop_cols) else x)","0c3108fc":"items.loc[:,'name2'] = LabelEncoder().fit_transform(items['name2'])\nitems.loc[:,'name3'] = LabelEncoder().fit_transform(items['name3'])\nitems.loc[:,'type'] = LabelEncoder().fit_transform(items['type'])\n","961e5ff2":"item_categories.loc[:,'cat_global'] = np.select([\n    item_categories.item_category_id.isin(range(0,8)),\n    item_categories.item_category_id.isin([8,80]),\n    item_categories.item_category_id.eq(9),\n    item_categories.item_category_id.isin(range(10,18)),\n    item_categories.item_category_id.isin(range(18,32)),\n    item_categories.item_category_id.isin([32,33,34,35,36,37,79]),\n    item_categories.item_category_id.isin(range(37,42)),\n    item_categories.item_category_id.isin(range(42,55)),\n    item_categories.item_category_id.isin(range(55,61)),\n    item_categories.item_category_id.isin(range(61,73)),\n    item_categories.item_category_id.isin(range(73,79)),\n    item_categories.item_category_id.isin([81,82]),\n    item_categories.item_category_id.eq(83),\n    item_categories.item_category_id.eq(84)\n    ], [\n    'accessories','tickets','delivery','consoles','games',\n    'payment_cards','movies','books','music','gifts','programs',\n    'discs','batteries','plastic_bags'\n])\n\nitem_categories.loc[:,'cat_platform'] = np.select([\n    item_categories.item_category_name.str.contains('PS2', case=False),\n    item_categories.item_category_name.str.contains('PS3', case=False),\n    item_categories.item_category_name.str.contains('PS4', case=False),\n    item_categories.item_category_name.str.contains('PSP', case=False),\n    item_categories.item_category_name.str.contains('PSVita', case=False),\n    item_categories.item_category_name.str.contains('XBOX 360', case=False),\n    item_categories.item_category_name.str.contains('XBOX ONE', case=False),\n    item_categories.item_category_name.str.contains('PC', case=False),\n    item_categories.item_category_name.str.contains('MAC', case=False),\n    item_categories.item_category_name.str.contains('Android', case=False)],\n    ['PS2','PS3','PS4','PSP','PSVita','XBOX_360','XBOX_ONE','PC','MAC','Android'],\n    default='other')","61c1be29":"item_categories.loc[:,'subtype'] = item_categories['item_category_name'].apply(lambda x: x.split('-')[-1].strip())\nitem_categories.loc[:,'subtype'] = LabelEncoder().fit_transform(item_categories['subtype'])\nitem_categories.loc[:,'cat_global'] = LabelEncoder().fit_transform(item_categories['cat_global'])\nitem_categories.loc[:,'cat_platform'] = LabelEncoder().fit_transform(item_categories['cat_platform'])","9203efed":"print('unique test item_id =', test['item_id'].nunique())\nprint('unique test shop_id =', test['shop_id'].nunique())\nprint('#item_ids * #shop_ids =', test['item_id'].nunique() * test['shop_id'].nunique())\nprint('test size =', test.shape[0])","329a956d":"trues = 0\nfor date_block_num in train['date_block_num'].unique():\n    item_ids, shop_ids = train['item_id'].nunique(), train['shop_id'].nunique()\n    if item_ids * shop_ids == train[train['date_block_num'].eq(date_block_num)].shape[0]:\n        trues += 1\n        \nprint('It is true for', trues, 'date_block_nums')","5b4779b7":"from itertools import product\n\ndf = []\nfor date_num in train['date_block_num'].unique():\n  date_num_sales = train[train['date_block_num'].eq(date_num)]\n  month = date_num_sales['month'].iloc[0]\n  df.append(list(product([date_num], [month], date_num_sales['item_id'].unique(), date_num_sales['shop_id'].unique())))\n\ndf = pd.DataFrame(np.vstack(df), columns=['date_block_num', 'month', 'item_id', 'shop_id'])\ntest.loc[:,'item_cnt_month'] = 0\ntest.loc[:,'item_price'] = 0\ntrain.loc[:,'ID'] = -999\n\n# add info from train\ncols = ['date_block_num', 'month', 'item_id', 'shop_id', 'item_cnt_month', 'ID', 'item_price']\ndf = df.merge(train[cols], on=['date_block_num', 'month', 'item_id', 'shop_id'], how='left')\n\ndf = pd.concat([df, test[cols]])\ndf.sort_values(['date_block_num', 'month', 'shop_id', 'item_id'], inplace=True)","e3a3d459":"df = df.merge(shops[['shop_id','shop_city','is_online']], on=['shop_id'], how='left')\ndf = df.merge(items[['item_id','item_category_id','name2','name3','type']], on=['item_id'], how='left')\ndf = df.merge(item_categories[['item_category_id','cat_global','cat_platform','subtype']], on=['item_category_id'], how='left')\n","379dadc1":"df['ID'].fillna(-999, inplace=True)\ndf['item_cnt_month'].fillna(0, inplace=True)\ndf['item_price'].fillna(0, inplace=True)","9413c34b":"df.isna().any()","1475d37c":"train = train.merge(items[['item_id','item_category_id','name2','name3','type']], on=['item_id'], how='left')\ntrain = train.merge(item_categories[['item_category_id','cat_global','cat_platform','subtype']], on=['item_category_id'], how='left')\n\nfor date_num in df.date_block_num.unique():\n    for feature in ['item_category_id', 'name2', 'name3', 'type', 'subtype', 'cat_global', 'cat_platform']:\n        mean_price = train[train.date_block_num.ne(date_num)].groupby(feature).item_price.mean()\n        df.loc[df.date_block_num.eq(date_num),f'{feature}_mean_price'] = df.loc[df.date_block_num.eq(date_num),feature].map(mean_price)\n        \nfor feature in ['item_category_id', 'name2', 'name3', 'type', 'subtype', 'cat_global', 'cat_platform']:\n    mean_price = train.groupby(feature).item_price.mean()\n    df.loc[df[f'{feature}_mean_price'].isna(),f'{feature}_mean_price'] = df.loc[df[f'{feature}_mean_price'].isna(),feature].map(mean_price)","578e845b":"df[df.date_block_num.ne(34)].isna().sum()","21fcdaeb":"df[df.date_block_num.eq(34)].isna().sum()","0619a133":"df.nunique()","3d1f16d2":"df['shop_city'] = df['shop_city'].astype(np.int8)\ndf['item_category_id'] = df['item_category_id'].astype(np.int8)\ndf['date_block_num'] = df['date_block_num'].astype(np.int8)\ndf['item_id'] = df['item_id'].astype(np.int16)\ndf['shop_id'] = df['shop_id'].astype(np.int8)\ndf['month'] = df['month'].astype(np.int8)\ndf['item_cnt_month'] = df['item_cnt_month'].astype(np.float16)\ndf['item_price'] = df['item_price'].astype(np.float32)\ndf['subtype'] = df['subtype'].astype(np.int8)\ndf['ID'] = df['ID'].astype(np.int32)\ndf['is_online'] = df['is_online'].astype(np.int8)\ndf['name2'] = df['name2'].astype(np.int16)\ndf['name3'] = df['name3'].astype(np.int16)\ndf['type'] = df['type'].astype(np.int8)\ndf['cat_global'] = df['cat_global'].astype(np.int8)\ndf['cat_platform'] = df['cat_platform'].astype(np.int8)\ndf['item_category_id_mean_price'] = df['item_category_id_mean_price'].astype(np.float32)\ndf['name2_mean_price'] = df['name2_mean_price'].astype(np.float32)\ndf['type_mean_price'] = df['type_mean_price'].astype(np.float32)\ndf['subtype_mean_price'] = df['subtype_mean_price'].astype(np.float32)\ndf['cat_global_mean_price'] = df['cat_global_mean_price'].astype(np.float32)\ndf['cat_platform_mean_price'] = df['cat_platform_mean_price'].astype(np.float32)\ndf['name3_mean_price'] = df['name3_mean_price'].astype(np.float32)\n\n# del test, train","f2931a93":"def create_lagged(df, feature, lags):\n  keys = ['date_block_num', 'shop_id', 'item_id']\n  df_cp = df[keys + [feature]].copy()\n  for lag in lags:\n    df_cp = df_cp.rename(columns={feature: f'{feature}_{lag}'})\n    feature = f'{feature}_{lag}'\n    df_cp.loc[:,'date_block_num'] += lag\n    df = df.merge(df_cp, on=keys, how='left')\n    df_cp.loc[:,'date_block_num'] -= lag\n\n  del df_cp\n\n  return df","a70ea1d0":"import gc\n\ndef select_id(row):\n  for i in range(3):\n    if row.iloc[i]:\n      return row.iloc[i]\n  return 0\n\ndf = create_lagged(df, 'item_cnt_month', [1,2,3])\n# df.loc[:,'item_cnt_month_lag'] = df[['item_cnt_month_1', 'item_cnt_month_2', 'item_cnt_month_3']].apply(select_id, axis=1)\ngc.collect()","d869a4c9":"ix = ['date_block_num']\nmean_month_group = df.groupby(ix).agg({'item_cnt_month': 'mean'}).reset_index().rename(columns={'item_cnt_month': 'mean_month_cnt'})\ndf = df.merge(mean_month_group, on=ix, how='left')\ndf.loc[:,'mean_month_cnt'] = df['mean_month_cnt'].astype(np.float16)\ndel mean_month_group\ndf = create_lagged(df, 'mean_month_cnt', [1])\ndf.drop(['mean_month_cnt'], axis=1, inplace=True)\n# df.loc[:,'mean_month_cnt_lag'] = df[['mean_month_cnt_1', 'mean_month_cnt_2', 'mean_month_cnt_3']].apply(select_id, axis=1)\ngc.collect()","dd68626a":"ix = ['date_block_num', 'item_id']\nmean_item_id_group = df.groupby(ix).agg({'item_cnt_month': 'mean'}).reset_index().rename(columns={'item_cnt_month': 'mean_item_id_cnt'})\ndf = df.merge(mean_item_id_group, on=ix, how='left')\ndel mean_item_id_group\ndf = create_lagged(df, 'mean_item_id_cnt', [1,2,3])\n# df.loc[:,'mean_item_id_cnt_lag'] = df[['mean_item_id_cnt_1', 'mean_item_id_cnt_2', 'mean_item_id_cnt_3']].apply(select_id, axis=1)\ngc.collect()","f4d46c1e":"ix = ['date_block_num', 'item_category_id']\nmean_cat_group = df.groupby(ix).agg({'item_cnt_month': 'mean'}).reset_index().rename(columns={'item_cnt_month': 'mean_cat_cnt'})\ndf = df.merge(mean_cat_group, on=ix, how='left')\ndel mean_cat_group\ndf = create_lagged(df, 'mean_cat_cnt', [1,2])\n# df.loc[:,'mean_cat_cnt_lag'] = df[['mean_cat_cnt_1', 'mean_cat_cnt_2', 'mean_cat_cnt_3']].apply(select_id, axis=1)\ngc.collect()","4b5b3885":"ix = ['date_block_num', 'item_category_id', 'shop_id']\nmean_cat_shop_group = df.groupby(ix).agg({'item_cnt_month': 'mean'}).reset_index().rename(columns={'item_cnt_month': 'mean_cat_shop_cnt'})\ndf = df.merge(mean_cat_shop_group, on=ix, how='left')\ndel mean_cat_shop_group\ndf = create_lagged(df, 'mean_cat_shop_cnt', [1,2,3])\n# df.loc[:,'mean_cat_shop_cnt_lag'] = df[['mean_cat_shop_cnt_1', 'mean_cat_shop_cnt_2', 'mean_cat_shop_cnt_3']].apply(select_id, axis=1)\ngc.collect()","1becdce4":"ix = ['date_block_num', 'shop_city', 'item_id']\nmean_city_id_group = df.groupby(ix).agg({'item_cnt_month': 'mean'}).reset_index().rename(columns={'item_cnt_month': 'mean_city_id_cnt'})\ndf = df.merge(mean_city_id_group, on=ix, how='left')\ndel mean_city_id_group\ndf = create_lagged(df, 'mean_city_id_cnt', [1,2])\n# df.loc[:,'mean_city_id_cnt_lag'] = df[['mean_city_id_cnt_1', 'mean_city_id_cnt_2', 'mean_city_id_cnt_3']].apply(select_id, axis=1)\ngc.collect()","baefdbf5":"ix = ['date_block_num', 'shop_city', 'item_category_id']\nmean_city_cat_group = df.groupby(ix).agg({'item_cnt_month': 'mean'}).reset_index().rename(columns={'item_cnt_month': 'mean_city_cat_cnt'})\ndf = df.merge(mean_city_cat_group, on=ix, how='left')\ndel mean_city_cat_group\ndf = create_lagged(df, 'mean_city_cat_cnt', [1])\n# df.loc[:,'mean_city_cat_cnt_lag'] = df[['mean_city_cat_cnt_1', 'mean_city_cat_cnt_2', 'mean_city_cat_cnt_3']].apply(select_id, axis=1)\ngc.collect()","f934b6ff":"ix = ['date_block_num', 'item_id']\nmean_id_price_group = df.groupby(ix).agg({'item_price': 'mean'}).reset_index().rename(columns={'item_price': 'mean_id_price'})\ndf = df.merge(mean_id_price_group, on=ix, how='left')\ndel mean_id_price_group\ndf = create_lagged(df, 'mean_id_price', [1,2,3])\n# df.loc[:,'mean_id_price_lag'] = df[['mean_id_price_1', 'mean_id_price_2', 'mean_id_price_3']].apply(select_id, axis=1)\ngc.collect()","f7034725":"df.loc[:,'mean_id_price_lag'] = df[['mean_id_price_1', 'mean_id_price_1_2', 'mean_id_price_1_2_3']].apply(select_id, axis=1)\nmean_price_group = df.groupby(['item_id']).agg({'item_price': 'mean'}).reset_index().rename(columns={'item_price': 'mean_price'})\ndf = df.merge(mean_price_group, on=['item_id'], how='left')\ndel mean_price_group\ndf.loc[:,'delta_price_lag'] = (df['mean_id_price_lag'] - df['mean_price']) \/ df['mean_price']\ngc.collect()","e5ef6d21":"ix = ['date_block_num', 'shop_id', 'subtype']\nmean_id_price_group = df.groupby(ix).agg({'item_cnt_month': 'mean'}).reset_index().rename(columns={'item_cnt_month': 'mean_shop_subtype_cnt'})\ndf = df.merge(mean_id_price_group, on=ix, how='left')\ndel mean_id_price_group\ndf = create_lagged(df, 'mean_shop_subtype_cnt', [1])\n# df.loc[:,'mean_id_price_lag'] = df[['mean_id_price_1', 'mean_id_price_2', 'mean_id_price_3']].apply(select_id, axis=1)\ngc.collect()","b79c8bf8":"item_sale = df.groupby(['item_id'])['date_block_num']\ndf.loc[:,'item_first_sale'] = df['date_block_num'] - item_sale.transform('min')\n\nitem_shop_sale = df.groupby(['item_id', 'shop_id'])['date_block_num']\ndf.loc[:,'item_shop_first_sale'] = df['date_block_num'] - item_shop_sale.transform('min')","a6bacb53":"item_sales_sum = df.groupby(['item_id'])['item_cnt_month'].cumsum()\nitem_sales_cnt = df.groupby(['item_id'])['item_cnt_month'].cumcount()\n\ntrain_mask, test_mask = df['date_block_num'] != 34, df['date_block_num'] == 34\ndf.loc[:,'item_id_mean_enc'] = item_sales_sum \/ item_sales_cnt\ndf.loc[test_mask,'item_id_mean_enc'] = np.nan\n\nitem_id_mean_enc_mean = df.loc[train_mask,:].groupby(['item_id'])['item_cnt_month'].mean()\ndf.loc[df['item_id_mean_enc'].isna(),'item_id_mean_enc'] = df['item_id'].map(item_id_mean_enc_mean)\ndf['item_id_mean_enc'].fillna(df.loc[train_mask,'item_id_mean_enc'].mean(), inplace=True)","846766cb":"# better check that there is no overfitting with item_price (because it is not always available for the test)\ndf.loc[:,'money_flow'] = df['item_price'] * df['item_cnt_month']\n\nshop_id_money_sum = df.groupby(['date_block_num', 'shop_id'])['money_flow'].transform('sum')\nshop_id_money_cnt = df.groupby(['date_block_num', 'shop_id'])['money_flow'].transform('count')\n\ndf.loc[train_mask,'cur_money_flow'] = df.groupby(['date_block_num', 'shop_id'])['money_flow'].transform('sum')\ndf.loc[:,'shop_id_mean_enc'] = (shop_id_money_sum - df['cur_money_flow']) \/ (shop_id_money_cnt - 1)\n\nshop_id_mean_enc_mean = df.loc[train_mask,:].groupby(['shop_id'])['cur_money_flow'].mean()\ndf.loc[test_mask,'shop_id_mean_enc'] = df['shop_id'].map(shop_id_mean_enc_mean)","342850d0":"df.isna().any()","3a03330e":"df.columns","f159e7f9":"# df = pd.read_hdf('.\/data.h5', 'df')\ndf.fillna(0, inplace=True)\n\ntarget = 'item_cnt_month'\nfeatures = [\n    'date_block_num',\n    'month',\n    'item_id',\n    'shop_id',\n    'shop_id_mean_enc',\n    'shop_city',\n    'is_online',\n    'name2',\n    'name3',\n    'type',\n    'item_category_id',\n    'subtype',\n    'item_cnt_month_1',\n    'item_cnt_month_1_2',\n    'item_cnt_month_1_2_3',\n    'mean_month_cnt_1',\n    'mean_item_id_cnt_1',\n    'mean_item_id_cnt_1_2', \n    'mean_item_id_cnt_1_2_3',\n    'mean_cat_cnt_1',\n    'mean_cat_cnt_1_2',\n    'mean_cat_shop_cnt_1',\n    'mean_cat_shop_cnt_1_2',\n    'mean_cat_shop_cnt_1_2_3',\n    'mean_city_id_cnt_1',\n    'mean_city_id_cnt_1_2',\n    'mean_city_cat_cnt_1',\n#     'mean_id_price_1',\n#     'mean_id_price_1_2',\n#     'mean_id_price_1_2_3',\n#     'mean_id_price_lag',\n#     'mean_price',\n    'delta_price_lag',\n#     'item_price_mean',\n    'mean_shop_subtype_cnt_1',\n    'item_first_sale',\n    'item_shop_first_sale',\n#     'cat_global',\n#     'cat_platform',\n    'item_category_id_mean_price',\n#     'name2_mean_price',\n#     'type_mean_price',\n    'subtype_mean_price',\n    'cat_global_mean_price',\n    'cat_platform_mean_price',\n#     'name3_mean_price'\n]\n\ntrain = df.loc[df['date_block_num'].ge(4) & df['date_block_num'].lt(33), features + [target]]\nval = df.loc[df['date_block_num'].eq(33), features + [target]]\ntest = df.loc[df['date_block_num'].eq(34), features + ['ID']]\n\ndf.to_hdf('data.h5', 'df')\ndel df\ngc.collect()","01b50b0a":"gc.collect()\nimport xgboost as xgb\nfrom sklearn.model_selection import TimeSeriesSplit\nfrom sklearn.metrics import mean_squared_error as mse\n\nmodel = xgb.XGBRegressor(\n    max_depth=8,\n    n_estimators=1500,\n    min_child_weight=400, \n    colsample_bytree=0.8, \n    subsample=0.8,\n    eta=0.05,\n    tree_method='gpu_hist',\n    seed=42)\ngc.collect()\nmodel.fit(train[features], train[target], eval_metric=\"rmse\", \n    eval_set=[(val[features], val[target])],\n    early_stopping_rounds=100)\ntest.loc[:,'item_cnt_month'] = np.clip(model.predict(test[features]), 0, 20)\nsubm = test[['ID', 'item_cnt_month']]\n\nsubm.to_csv('submission.csv', index=False)\n# !kaggle competitions submit -c competitive-data-science-predict-future-sales -f .\/submission.csv -m \"Everything fixed! I guess...\"","8ff8def0":"# eta=0.05: val = 0.89882; train = 0.8048361; test = 0.897449 and 0.902729\n# min_child_weight=500,early_stopping_rounds=100: val=0.88778; train=0.7782264; test=0.89203\n# min_child_weight=1000: val=0.89282; train=0.80574894; test=0.89247\n# min_child_weight=700: val=0.89248; train=0.798477; test=0.89223\n# min_child_weight=400: val=0.88888; train=0.7788778; test=0.89099\n\n# new dataset eta=0.01: val=0.89530104; train=0.7996507; test=0.89768\n# new dataset eta=0.05: val=0.89576; train=0.79732686; test=0.88808\npreds = np.clip(model.predict(train[features]), 0, 20)\nprint(np.sqrt(mse(train[target], preds)))","af786a64":"from xgboost import plot_importance\n\ndef plot_features(booster, figsize):    \n    fig, ax = plt.subplots(1,1,figsize=figsize)\n    return plot_importance(booster=booster, ax=ax)\n\nplot_features(model, (10,14))","2f49e961":"len([\n    'date_block_num',\n    'shop_id',\n    'item_id',\n    'item_cnt_month',\n    'city_code',\n    'item_category_id',\n    'type_code',\n    'subtype_code',\n    'item_cnt_month_lag_1',\n    'item_cnt_month_lag_2',\n    'item_cnt_month_lag_3',\n    'item_cnt_month_lag_6',\n    'item_cnt_month_lag_12',\n    'date_avg_item_cnt_lag_1',\n    'date_item_avg_item_cnt_lag_1',\n    'date_item_avg_item_cnt_lag_2',\n    'date_item_avg_item_cnt_lag_3',\n    'date_item_avg_item_cnt_lag_6',\n    'date_item_avg_item_cnt_lag_12',\n    'date_shop_avg_item_cnt_lag_1',\n    'date_shop_avg_item_cnt_lag_2',\n    'date_shop_avg_item_cnt_lag_3',\n    'date_shop_avg_item_cnt_lag_6',\n    'date_shop_avg_item_cnt_lag_12',\n    'date_cat_avg_item_cnt_lag_1',\n    'date_shop_cat_avg_item_cnt_lag_1',\n    #'date_shop_type_avg_item_cnt_lag_1',\n    #'date_shop_subtype_avg_item_cnt_lag_1',\n    'date_city_avg_item_cnt_lag_1',\n    'date_item_city_avg_item_cnt_lag_1',\n    #'date_type_avg_item_cnt_lag_1',\n    #'date_subtype_avg_item_cnt_lag_1',\n    'delta_price_lag',\n    'month',\n    'days',\n    'item_shop_last_sale',\n    'item_last_sale',\n    'item_shop_first_sale',\n    'item_first_sale',\n])","38619645":"from sklearn.preprocessing import LabelEncoder\n","4e607a70":"df[features]","6a754c86":"Now mean encode `shop_id`s with mean money flow (loo - to do it properly by `date_block_num`)","e725ccc3":"Fill NaNs","a6011691":"Let's deal with price. We cannot left `item_price` and set missing values for test as mean price by for example `item_category_id`. This will cause overfitting. Let's calculate holdout mean price by several categories.","10671d5b":"Create `is_online` feature, if it was bought in the online store or not","5d1d87b0":"Let's mean encode `item_id` by `item_cnt_month` (expanding mean)","54d5689e":"Add first sale date_block_num of item_id in total and by each shop_id","090e33dc":"Fix the same shops ids.","2448f2d3":"Add shop_city feature","19b9dce1":"Add additional data to main `df`","c4a837d5":"Check outliers","4216ebc0":"Add some basic info to the test","11c088b6":"Let's check if it is true for train (for every `date_block_num`)","3006453d":"Checkout out these strange codes","ec4edc8b":"In item name there is a structure like \"text1 (text2)\\[text3\\]\", so try to get these () and \\[\\] texts","86b8bd29":"Create target feature for train","fc3abf74":"`item_category_name` is like \"type - subtype\"","cfc62a80":"Some memory optimisations","6591e78a":"This is because train consists only of __sales__. So we need to add sales that did't happen in order to follow the way test dataset was created.","791f56bd":"Create more subclasses for item categories (thanks [to](https:\/\/www.kaggle.com\/tymurprorochenko\/in-depth-eda-cb-rf-knn-ensamble))","9ea63879":"We can see that test consists of cartesian product of items and shops"}}