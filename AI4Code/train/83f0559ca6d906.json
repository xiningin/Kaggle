{"cell_type":{"ef2b0cc7":"code","dc96a6f9":"code","2369a67d":"code","4f24ce27":"code","3d708cc8":"code","59b8fb8f":"code","284019a6":"code","973bf942":"code","b28a7c27":"code","efb4f656":"code","6f7987db":"code","17a6e54e":"code","1fa47eae":"code","994226bc":"code","eddadb24":"code","776f8714":"code","cf40ffad":"code","ebd31383":"code","5ac2edc4":"code","0bf8edeb":"code","843c5516":"code","68b9b876":"code","2a740749":"markdown","262585ed":"markdown","d1f1f949":"markdown","01ea0288":"markdown"},"source":{"ef2b0cc7":"import json,sys,random\nimport numpy as np","dc96a6f9":"from keras.models import Sequential\nfrom keras.layers import Dense,Flatten,Activation\nfrom keras.layers import Dropout\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\nfrom keras.utils import np_utils\nfrom keras.optimizers import SGD\nimport keras.callbacks","2369a67d":"from PIL import Image, ImageDraw\nimport matplotlib.pyplot as plt","4f24ce27":"#download the dataset from json object\nf = open('..\/input\/ships-in-satellite-imagery\/shipsnet.json')\ndataset = json.load(f)\nf.close()","3d708cc8":"dataset.keys()","59b8fb8f":"input_data = np.array(dataset['data'])\noutput_data = np.array(dataset['labels'])","284019a6":"input_data\noutput_data","973bf942":"input_data.shape","b28a7c27":"n_spectrum = 3     #color Channel(RGB)\nwidth = 80\nheight = 80\nX = input_data.reshape(-1,n_spectrum,width,height)","efb4f656":"X.shape\nX[0].shape","6f7987db":"pic = X[15]\npic.shape\nred_spectrum = pic[0]\ngreen_spectrum = pic[1]\nblue_spectrum = pic[2]","17a6e54e":"plt.figure(figsize = (5*3 , 5*1))\nplt.set_cmap('gray')\n\nplt.subplot(1,3,1)\nplt.imshow(red_spectrum)\n\nplt.subplot(1,3,2)\nplt.imshow(green_spectrum)\n\nplt.subplot(1,3,3)\nplt.imshow(blue_spectrum)\n\nplt.show()","1fa47eae":"output_data.shape","994226bc":"np.bincount(output_data)","eddadb24":"y = np_utils.to_categorical(output_data)\ny","776f8714":"Xt = X.transpose([0,2,3,1])\nXt.shape","cf40ffad":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest = train_test_split(Xt,y)","ebd31383":"#normalize your data\nxtrain = xtrain\/255\nxtest = xtest\/255","5ac2edc4":"#Design Your network\nmodel = Sequential()\nmodel.add(Conv2D(32, (3,3) , padding='same' , input_shape=(80,80,3) , activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(32 , (3,3) , padding='same' , activation='relu'))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(32 , (3,3) , padding='same' , activation='relu'))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(32 , (3,3) , padding='same' , activation='relu'))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.25))\n\nmodel.add(Dense(2 , activation='softmax'))","0bf8edeb":"model.summary()","843c5516":"#optimization setup\nsgd = SGD(lr=0.01)\nmodel.compile(loss='categorical_crossentropy',\n             optimizer=sgd,\n             metrics=['accuracy'])","68b9b876":"#Training\nmodel.fit(xtrain,ytrain,epochs=20,validation_data=(xtest,ytest))","2a740749":"**Input**","262585ed":"**Create Your Neural Network Model**","d1f1f949":"**Output_Data**","01ea0288":"**Prepare Your Data**"}}