{"cell_type":{"7861fadf":"code","76a8bfc3":"code","205820fb":"code","9ff44ab9":"code","86eb8ce4":"code","aa01ca3b":"code","40decda2":"code","b7bab143":"code","6c1a9f4a":"code","0a91b143":"code","acdf0a28":"code","386403bd":"markdown","e881d3ea":"markdown","2b38b170":"markdown","b5d42968":"markdown","e922ca81":"markdown","99d6a539":"markdown","d1da6d4c":"markdown","952c7006":"markdown","9a3471a1":"markdown","7a7046ca":"markdown"},"source":{"7861fadf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","76a8bfc3":"df  = pd.read_csv('\/kaggle\/input\/developers-and-programming-languages\/user-languages.csv')","205820fb":"df.head()","9ff44ab9":"# Delete skills without users\ndf = df.loc[:, (df != 0).any(axis=0)]\ntry: \n    del(df['user_id'])\nexcept Exception:\n    print (\"Error\", Exception)\n\n","86eb8ce4":"df.head()","aa01ca3b":"from sklearn.metrics import silhouette_samples, silhouette_score\nfrom sklearn.cluster import KMeans\n\n\ndf_reduced = df\n\nscores = []\nfor n_clusters in range(3,13):\n    kmeans = KMeans(n_clusters = n_clusters, random_state = 11 ).fit(df_reduced)\n    labels = kmeans.labels_\n    silhouette_avg = silhouette_score(df_reduced, labels)\n    print(\"n_clusters =\", n_clusters, \"The average silhouette_score is :\", silhouette_avg)\n    scores.append(silhouette_avg)\n    \nscores","40decda2":"import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nplt.plot(np.arange(3, 13), scores)\nplt.title('Silhouette scores, for number of clusters') \n\nplt.show()","b7bab143":"import pandas as pd\nfrom sklearn.cluster import KMeans\n\nn_clusters = 7 #choosing the n_clusters\nkmeans = KMeans(n_clusters = n_clusters, random_state = 11).fit(df)\nlabels = kmeans.labels_#\n\n\ndf_cluster = pd.DataFrame()\ndf_cluster['clusters'] = labels\n\n\nclusters_all = []\n\n\nfor cluster in range(n_clusters):\n    sub_df = df[df_cluster['clusters'] == cluster]\n    print(sub_df.shape)\n    dict_tags = {}\n    for column in sub_df.columns:\n        if sub_df[column].sum() > 0: dict_tags[column] = sub_df[column].sum()#\n    \n    print(\"Segment\/Cluster Number:\", cluster, \"and\", sub_df.shape[0]\/df.shape[0]*100 ,\" % of users\")\n    df_temp = pd.DataFrame(sorted(dict_tags.items(), key=lambda x: x[1], reverse=True)[:10], columns=['Skill', '  Weightage']) #choosing top 10 only\n    print(df_temp)\n    print(\"**\"*30)\n    \n    clusters_all.append(sorted(dict_tags.items(), key=lambda x: x[1], reverse=True)[:10])\n","6c1a9f4a":"# Import packages\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud, STOPWORDS\n%matplotlib inline\n# Define a function to plot word cloud\ndef plot_cloud(wordcloud):\n    # Set figure size\n    plt.figure(figsize=(7, 7))\n    # Display image\n    plt.imshow(wordcloud) \n    # No axis details\n    plt.axis(\"off\");","0a91b143":"def convert_to_text(df_temp):\n    final_text = \"\"\n    \n    for i in range(df_temp.shape[0]):\n        final_text += str(\" \" +  df_temp.loc[i,'Skill']) * int(df_temp.iloc[i,1]\/5)\n    \n    return final_text","acdf0a28":"# Generate word cloud\n\nfor i,clusters in enumerate(clusters_all):\n    df_temp = pd.DataFrame(clusters, columns=['Skill', '  Weightage'])\n    cluster_text = convert_to_text(df_temp)\n    wordcloud = WordCloud(width = 3000, height = 2000, random_state=2, background_color='salmon', colormap='Pastel1', collocations=False).generate(cluster_text)\n    # Plot\n    plot_cloud(wordcloud)","386403bd":"### The above output displays the clusters\/segments that have been created and which skill\/technology belong in their respective clusters with weightage.","e881d3ea":"### From the above wordclouds and previous outputs we can see that each cluster is signifying to a type of Developer.\n\n* So we had the users repo data and from that skills\/technologies with their frequency were extracted.\n* Using the frequency we are able to cluster them together which show that in the given data we had different type of developers.\n","2b38b170":"### Observation of Segments\/Clusters of Users shows the type of developer they are:\n0. Android Developer with java.\n1. Apple Developer with swit and objective-c.\n2. Python Developer with django and javascript.\n3. Rails and Ruby Developer cluster.\n4. Vanilla Javascript Web Developer with some ruby, python, go, etc.\n5. PHP Developer with larvel and wordpress\n6. Javascript developer with some angular, react","b5d42968":"### Cleaning","e922ca81":"### From the above plot we can observe that `n_cluster` of 7 have highest shilloute score and all the clusters score before that are lower.","99d6a539":"## Clustering and Choosing the Number of Clusters.\n    - Segments can be thought as clusters.\n    - The number of clusters can be chosen based on domain knowledge (predefined\/known).\n    - Or we can employ shilloute score and elbow method to generated the best choice on number of cluster.\n    ","d1da6d4c":"## Loading the data","952c7006":"Each row represent a user and the type of technologies that user works on based on their github profile.\n\nThe values under each tecnologies ranges from **0 to 1.0** and is the **frequency of each of the 1400+ technologies** in the user and their repositories metadata.","9a3471a1":"## WordCloud of Segments\/Clusters","7a7046ca":"### Ploting the shilloute score to choose the best `n_cluster`."}}