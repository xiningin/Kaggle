{"cell_type":{"cb59ce3f":"code","3c5f29c0":"code","ff6760c0":"code","2ad0557a":"code","04e3ad3e":"code","92ac1ab7":"code","c6ede8de":"code","2337bb0d":"code","21241453":"code","d8bff85e":"code","2a950905":"code","9607a728":"code","c60e6ef4":"code","5e9b8ee3":"code","82778cb8":"code","1bcca056":"markdown","1f59851d":"markdown"},"source":{"cb59ce3f":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nplt.style.use(\"ggplot\")","3c5f29c0":"df = pd.read_csv(\"..\/input\/breast-cancer-prediction\/Breast Cancer Prediction.csv\")\ndf","ff6760c0":"df.drop(columns= \"Sample code number\", inplace= True)","2ad0557a":"df.isnull().sum()","04e3ad3e":"df.describe()","92ac1ab7":"sns.heatmap(df.corr(), annot= True, vmax= 1)","c6ede8de":"fig, ax1 = plt.subplots(3, figsize=(15,20))\ncolumns = list(df.drop(columns= ['Class']).columns)\nk = 0\n\nfor i in range(3):          \n        sns.distplot(df[columns[k]], ax = ax1[i])\n        k += 1","2337bb0d":"fig, ax = plt.subplots(3, figsize=(15,20))\n\nfor i in range(3):             \n        sns.distplot(df[columns[k]], ax = ax[i])\n        k += 1","21241453":"fig, ax4 = plt.subplots(3, figsize=(15,20))\n\nfor i in range(3):             \n        sns.distplot(df[columns[k]], ax = ax4[i])\n        k += 1","d8bff85e":"previsores = df.drop(columns=\"Class\").values\nclasse = df[\"Class\"].values","2a950905":"X_treinamento, X_teste, y_treinamento, y_teste = train_test_split(previsores, classe, test_size = 0.3, random_state = 0)","9607a728":"floresta = RandomForestClassifier(n_estimators = 100)\nfloresta.fit(X_treinamento, y_treinamento)\nprevisoes = floresta.predict(X_teste)\n\nprint(f\"Modelo - RandomForestClassifier \\nMatriz confus\u00e3o: \\n{confusion_matrix(y_teste, previsoes)}\")\nprint(f\"\\nAcc: {accuracy_score(y_teste, previsoes)}\")","c60e6ef4":"nb = GaussianNB()\nnb.fit(X_treinamento, y_treinamento)\nprevisoes = nb.predict(X_teste)\n\nprint(f\"Modelo - GaussianNB \\nMatriz confus\u00e3o: \\n{confusion_matrix(y_teste, previsoes)}\")\nprint(f\"\\nAcc: {accuracy_score(y_teste, previsoes)}\")","5e9b8ee3":"neighbors = KNeighborsClassifier(n_neighbors=3)\nneighbors.fit(X_treinamento, y_treinamento)\nprevisoes = neighbors.predict(X_teste)\n\nprint(f\"Modelo - KNeighborsClassifier \\nMatriz confus\u00e3o: \\n{confusion_matrix(y_teste, previsoes)}\")\nprint(f\"\\nAcc: {accuracy_score(y_teste, previsoes)}\")","82778cb8":"tree = DecisionTreeClassifier(random_state=1)\ntree.fit(X_treinamento, y_treinamento)\nprevisoes = tree.predict(X_teste)\n\nprint(f\"Modelo - DecisionTreeClassifier \\nMatriz confus\u00e3o: \\n{confusion_matrix(y_teste, previsoes)}\")\nprint(f\"\\nAcc: {accuracy_score(y_teste, previsoes)}\")","1bcca056":"# Plots","1f59851d":"# Model's"}}