{"cell_type":{"a885b2e6":"code","d2e86868":"code","f9bf1226":"code","9e67a150":"code","16671d2b":"code","1c992c9e":"code","6721ba58":"code","39abb85a":"code","305485fc":"code","7d5d3817":"code","d8840fb5":"code","6a6e30ba":"code","d4d07f38":"code","20657cdb":"code","a43f72d6":"code","a262d99b":"code","49b66c86":"code","2eae7367":"code","249eb363":"code","cdc1c09e":"code","e75db185":"code","6f4ff121":"code","9714b710":"code","9d40f47f":"code","ffab00c8":"code","d15d6e4c":"code","df788208":"code","1a165496":"code","295c0f5b":"code","9ba26519":"code","d5e05932":"code","b95aabee":"code","69c5b4b9":"code","48001b3f":"code","553827dc":"code","ca063715":"code","4134b617":"code","e8863ba8":"code","2c6d7342":"code","cb518d10":"code","95ebb165":"code","a6ad6b39":"code","2ea23c3d":"code","4f3dda39":"code","16bd75c1":"code","2bcefafb":"code","b102a8f2":"code","819b7c5b":"code","65fd98d8":"code","aacfd37c":"code","97bdb5e2":"code","a3799c5a":"code","216ae304":"code","16fe2355":"code","28e304ad":"code","df5a0768":"code","05b85db8":"code","e4a34f0f":"code","f5c806f4":"code","b278d3c5":"code","d1de019a":"code","6a3cdc06":"code","dc179d2a":"code","45660da3":"code","3aef5d7b":"code","3c463321":"code","c3d78e60":"code","e9d2170d":"code","49940894":"markdown","0df2218e":"markdown","db089961":"markdown","3358c848":"markdown","a4ddd7a6":"markdown","828f078f":"markdown","3e4a4966":"markdown","8d2f6a09":"markdown","f850c443":"markdown","17efdec1":"markdown","2d318ba1":"markdown","aecbf9ab":"markdown","64ecca32":"markdown","bd0f4744":"markdown","a479c946":"markdown","0aa05dc8":"markdown","2978389a":"markdown","9807b73a":"markdown","65c16fc7":"markdown","890224d6":"markdown","964e0d75":"markdown","63c93dfc":"markdown","cbdcedda":"markdown","a5f3359e":"markdown","cbba0dc1":"markdown","c3e0e278":"markdown","095163d4":"markdown","204ce7b7":"markdown","02ca0bdf":"markdown"},"source":{"a885b2e6":"#k\u00fct\u00fcphanelerin kurulumu\nimport pandas as pd \nimport numpy as np\nimport statsmodels.api as sm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import scale, StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, mean_squared_error, r2_score, roc_auc_score, roc_curve, classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import KFold","d2e86868":"#projeyi \u00f6nemli \u00f6l\u00e7\u00fcde etkilemeyen t\u00fcm uyar\u0131lar g\u00f6z ard\u0131 edilir\nimport warnings\nwarnings.simplefilter(action = \"ignore\") ","f9bf1226":"#veri setini okuma\ndf = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\n#ilk 5 g\u00f6zlemin se\u00e7imi\ndf.head() ","9e67a150":"#bir nesnenin ekseninden rastgele olacak \u015fekilde \u00f6\u011feleri getirir\ndf.sample(3) ","16671d2b":"#veri setinden yaz\u0131l\u0131 de\u011fer oran\u0131nda rastgele se\u00e7im yapar\ndf.sample(frac = 0.01) ","1c992c9e":"#boyut bilgisi\ndf.shape","6721ba58":"#dataframe'in indeks dtype ve s\u00fctun dtypes, bo\u015f olmayan de\u011ferler ve bellek kullan\u0131m bilgileri\ndf.info()","39abb85a":"#belirtilen y\u00fczdelere kar\u015f\u0131l\u0131k gelen g\u00f6zlem birimlerinin a\u00e7\u0131klay\u0131c\u0131 istatistik de\u011ferleri\ndf.describe([0.10,0.25,0.50,0.75,0.90,0.95,0.99]).T\n#de\u011ferlendirmeyi kolayla\u015ft\u0131rmas\u0131 amac\u0131yla df tablosunun transpozu al\u0131nd\u0131.","305485fc":"#de\u011fi\u015fkenler aras\u0131ndaki korelasyon\ndf.corr()","7d5d3817":"#Glucose s\u00fctununun her iki s\u0131n\u0131f \u00f6zelinde histogram\u0131n\u0131n al\u0131nmas\u0131\n\ncol = 'Glucose'\nplt.hist(df[df['Outcome']==0][col], 10, alpha=0.5, label='non-diabetes')\nplt.hist(df[df['Outcome']==1][col], 10, alpha=0.5, label='diabetes')\nplt.legend(loc='upper right')\nplt.xlabel(col)\nplt.ylabel('Frequency')\nplt.title('Histogram of {}'.format(col))\nplt.show()","d8840fb5":"for col in ['BMI', 'BloodPressure']:\n    plt.hist(df[df['Outcome']==0][col], 10, alpha=0.5, label='non-diabetes')\n    plt.hist(df[df['Outcome']==1][col], 10, alpha=0.5, label='diabetes')\n    plt.legend(loc='upper right')\n    plt.xlabel(col)\n    plt.ylabel('Frequency')\n    plt.title('Histogram of {}'.format(col))\n    plt.show()","6a6e30ba":"def plot_corr(df,size = 9): \n    corr = df.corr() #corr = de\u011fi\u015fken, korelasyon matrisini bir de\u011fi\u015fkene atad\u0131\u011f\u0131m\u0131z yer\n    fig, ax = plt.subplots(figsize = (size,size)) \n    #fig = grafi\u011fin sa\u011f\u0131ndaki s\u00fctun, subplots (figsize = (size, size)) = grafi\u011fin boyutunu belirler of the chart\n    ax.matshow(corr) #do\u011frudan matshow matrisini \u00e7izen korelasyonu yazd\u0131r\u0131r\n    cax=ax.matshow(corr, interpolation = 'nearest') #ekseni \u00e7izdirme, grafi\u011fi kare veya harita gibi yapan kod\n    fig.colorbar(cax) #rengi \u00e7izdirme\n    plt.xticks(range(len(corr.columns)),corr.columns,rotation=65) \n    #xticks \u00e7izdirir, rotation = 17 her bir \u00fcst s\u00fctun i\u00e7in yaz\u0131lan ifadelerin e\u011fimli yazd\u0131r\u0131lmas\u0131 i\u00e7indir\n    plt.yticks(range(len(corr.columns)),corr.columns) #yticks \u00e7izdirir","d4d07f38":"#dataframe'i fonksiyonu kullanarak \u00e7izeriz\nplot_corr(df) ","20657cdb":"#seaborn k\u00fct\u00fcphanesindeki korelasyon matrisi\nimport seaborn as sb\nsb.heatmap(df.corr());","a43f72d6":"#bu \u015fekilde korelasyonlar\u0131 g\u00f6rebiliriz\nsb.heatmap(df.corr(),annot =True); ","a262d99b":"# Outcome de\u011fi\u015fkeninde 0 ve 1 s\u0131n\u0131flar\u0131n\u0131n oranlar\u0131\ndf[\"Outcome\"].value_counts()*100\/len(df)","49b66c86":"#ka\u00e7 s\u0131n\u0131f 0 ve 1'dir\ndf.Outcome.value_counts()","2eae7367":"#Age de\u011fi\u015fkeninin histogram\u0131\ndf[\"Age\"].hist(edgecolor = \"black\");","249eb363":"#Age, Glucose and BMI de\u011fi\u015fkenlerinin Outcome de\u011fi\u015fkenine g\u00f6re ortalamalar\u0131\ndf.groupby(\"Outcome\").agg({\"Age\":\"mean\",\"Glucose\":\"mean\",\"BMI\":\"mean\"})","cdc1c09e":"#veri setinde eksik veri yok\ndf.isnull().sum()","e75db185":"#a\u015fa\u011f\u0131daki de\u011fi\u015fkenlerdeki s\u0131f\u0131rlar NA anlam\u0131na gelir, bu nedenle NA yerine 0 atan\u0131r\ndf[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0, np.NaN)","6f4ff121":"#\u00f6zel de\u011ferler\ndf.isnull().sum()","9714b710":"def median_target(var):   \n    \n    temp = df[df[var].notnull()] \n    temp = temp[[var, 'Outcome']].groupby(['Outcome'])[[var]].median().reset_index() #reset_index; indekslerdeki problemler \u00e7\u00f6z\u00fcld\u00fc\n    \n    return temp\n#bo\u015f olmayanlar, df i\u00e7inden se\u00e7ilir ve doldurulan g\u00f6zlem birimleri g\u00f6z ard\u0131 edilerek temp adl\u0131 bir dataframe'e atan\u0131r.","9d40f47f":"#Outcome de\u011ferinin 0 ve 1 de\u011ferine g\u00f6re al\u0131nan Glucose'un medyan de\u011feri\nmedian_target(\"Glucose\")","ffab00c8":"#eksik g\u00f6zlemler i\u00e7in diyabet olan ve diyabet olamayanlar\u0131n medyan de\u011ferleri \ncolumns = df.columns\n\ncolumns = columns.drop(\"Outcome\")\n\nfor col in columns:\n    \n    df.loc[(df['Outcome'] == 0 ) & (df[col].isnull()), col] = median_target(col)[col][0]\n    df.loc[(df['Outcome'] == 1 ) & (df[col].isnull()), col] = median_target(col)[col][1]\n    #Outcome de\u011feri 0'\u0131 ve ilgili bo\u015f de\u011fi\u015fkeni se\u00e7in, ilgili de\u011fi\u015fkeni se\u00e7in, ayn\u0131 i\u015flem 1 i\u00e7inde yap\u0131ld\u0131\n#virg\u00fcl \u00f6ncesi filtreleme i\u015flemlerini ifade eder, virg\u00fclden sonra s\u00fctun se\u00e7imi i\u00e7in kullan\u0131l\u0131r.","d15d6e4c":"#BMI de\u011fi\u015fkenine g\u00f6re baz\u0131 aral\u0131klar belirlenmi\u015f ve kategorik de\u011fi\u015fkenler atanm\u0131\u015ft\u0131r.\nNewBMI = pd.Series([\"Underweight\", \"Normal\", \"Overweight\", \"Obesity 1\", \"Obesity 2\", \"Obesity 3\"], dtype = \"category\")\n\ndf[\"NewBMI\"] = NewBMI\n\ndf.loc[df[\"BMI\"] < 18.5, \"NewBMI\"] = NewBMI[0]\n\ndf.loc[(df[\"BMI\"] > 18.5) & (df[\"BMI\"] <= 24.9), \"NewBMI\"] = NewBMI[1]\ndf.loc[(df[\"BMI\"] > 24.9) & (df[\"BMI\"] <= 29.9), \"NewBMI\"] = NewBMI[2]\ndf.loc[(df[\"BMI\"] > 29.9) & (df[\"BMI\"] <= 34.9), \"NewBMI\"] = NewBMI[3]\ndf.loc[(df[\"BMI\"] > 34.9) & (df[\"BMI\"] <= 39.9), \"NewBMI\"] = NewBMI[4]\ndf.loc[df[\"BMI\"] > 39.9 ,\"NewBMI\"] = NewBMI[5]","df788208":"df.head()","1a165496":"#ins\u00fclin de\u011ferine g\u00f6re kategorik de\u011fi\u015fken olu\u015fturma\ndef set_insulin(row):\n    if row[\"Insulin\"] >= 16 and row[\"Insulin\"] <= 166:\n        return \"Normal\"\n    else:\n        return \"Abnormal\"     ","295c0f5b":"df.head()","9ba26519":"#NewInsulinScore de\u011fi\u015fkeni set_insulin ile eklendi\ndf[\"NewInsulinScore\"] = df.apply(set_insulin, axis=1)","d5e05932":"df.head()","b95aabee":"#Glucose de\u011fi\u015fkenine g\u00f6re baz\u0131 aral\u0131klar belirlenmi\u015f ve bunlara kategorik de\u011fi\u015fkenler atanm\u0131\u015ft\u0131r\nNewGlucose = pd.Series([\"Low\", \"Normal\", \"Overweight\", \"Secret\", \"High\"], dtype = \"category\")\n\ndf[\"NewGlucose\"] = NewGlucose\n\ndf.loc[df[\"Glucose\"] <= 70, \"NewGlucose\"] = NewGlucose[0]\n\ndf.loc[(df[\"Glucose\"] > 70) & (df[\"Glucose\"] <= 99), \"NewGlucose\"] = NewGlucose[1]\n\ndf.loc[(df[\"Glucose\"] > 99) & (df[\"Glucose\"] <= 126), \"NewGlucose\"] = NewGlucose[2]\n\ndf.loc[df[\"Glucose\"] > 126 ,\"NewGlucose\"] = NewGlucose[3]","69c5b4b9":"df.head()","48001b3f":"#categorical de\u011fi\u015fkenler, One Hot Encoding d\u00f6n\u00fc\u015f\u00fcm\u00fc yap\u0131larak say\u0131sal de\u011ferlere d\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc\n#bu i\u015flem ayr\u0131ca Dummy de\u011fi\u015fken tuza\u011f\u0131ndan da korur\ndf = pd.get_dummies(df, columns =[\"NewBMI\",\"NewInsulinScore\", \"NewGlucose\"], drop_first = True)","553827dc":"df.head()","ca063715":"#kategorik de\u011fi\u015fkenler\ncategorical_df = df[['NewBMI_Obesity 1','NewBMI_Obesity 2', 'NewBMI_Obesity 3', 'NewBMI_Overweight','NewBMI_Underweight',\n                     'NewInsulinScore_Normal','NewGlucose_Low','NewGlucose_Normal', 'NewGlucose_Overweight', 'NewGlucose_Secret']]","4134b617":"#categorical de\u011fi\u015fkenler df'den silindi\ny = df[\"Outcome\"]\nX = df.drop([\"Outcome\",'NewBMI_Obesity 1','NewBMI_Obesity 2', 'NewBMI_Obesity 3', 'NewBMI_Overweight','NewBMI_Underweight',\n                     'NewInsulinScore_Normal','NewGlucose_Low','NewGlucose_Normal', 'NewGlucose_Overweight', 'NewGlucose_Secret'], axis = 1)\ncols = X.columns\nindex = X.index","e8863ba8":"y.head()","2c6d7342":"X.head()","cb518d10":"#veri setindeki de\u011fi\u015fkenler standartla\u015ft\u0131r\u0131larak modellerin performans\u0131 art\u0131r\u0131l\u0131r\nfrom sklearn.preprocessing import RobustScaler\ntransformer = RobustScaler().fit(X)\nX = transformer.transform(X)\nX = pd.DataFrame(X, columns = cols, index = index)","95ebb165":"X.head()","a6ad6b39":"#kategorik olan ve kategorik olmayan de\u011fi\u015fkenleri birle\u015ftirme\nX = pd.concat([X, categorical_df], axis = 1)","2ea23c3d":"X.head()","4f3dda39":"models = []\nmodels.append(('LR', LogisticRegression(random_state = 12345)))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier(random_state = 12345)))\nmodels.append(('RF', RandomForestClassifier(random_state = 12345)))\nmodels.append(('SVM', SVC(gamma='auto', random_state = 12345)))\nmodels.append(('XGB', GradientBoostingClassifier(random_state = 12345)))\nmodels.append((\"LightGBM\", LGBMClassifier(random_state = 12345)))\n\n#s\u0131ras\u0131yla her modeli de\u011ferlendirme\nresults = []\nnames = []\n\nfor name, model in models:\n        \n        cv_results = cross_val_score(model, X, y, cv = 10, scoring= \"accuracy\")\n        results.append(cv_results)\n        names.append(name)\n        msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n        print(msg)\n        \n#boxplot ile algoritmalar\u0131n kar\u015f\u0131la\u015ft\u0131rmas\u0131\nfig = plt.figure(figsize=(15,10))\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results,\n            vert=True, #dikey kutu hizalamas\u0131\n            patch_artist=True) #renkle doldur\n                         \nax.set_xticklabels(names)\nplt.show()","16bd75c1":"rf_params = {\"n_estimators\" :[100,200,500,1000], \n             \"max_features\": [3,5,7], \n             \"min_samples_split\": [2,5,10,30],\n            \"max_depth\": [3,5,8,None]}","2bcefafb":"rf_model = RandomForestClassifier(random_state = 12345)","b102a8f2":"gs_cv = GridSearchCV(rf_model, \n                    rf_params,\n                    cv = 10,\n                    n_jobs = -1,\n                    verbose = 2).fit(X, y)","819b7c5b":"gs_cv.best_params_","65fd98d8":"rf_tuned = RandomForestClassifier(**gs_cv.best_params_)","aacfd37c":"rf_tuned = rf_tuned.fit(X,y)","97bdb5e2":"cross_val_score(rf_tuned, X, y, cv = 10).mean()","a3799c5a":"feature_imp = pd.Series(rf_tuned.feature_importances_,\n                        index=X.columns).sort_values(ascending=False)\n\nsns.barplot(x=feature_imp, y=feature_imp.index, palette=\"Blues_d\")\nplt.xlabel('Feature Importance Score')\nplt.ylabel('Features')\nplt.title(\"Feature Severity Levels\")\nplt.show()","216ae304":"xgb = GradientBoostingClassifier(random_state = 12345)","16fe2355":"xgb_params = {\n    \"learning_rate\": [0.01, 0.1, 0.2, 1],\n    \"min_samples_split\": np.linspace(0.1, 0.5, 3),\n    \"max_depth\":[3,5,8],\n    \"subsample\":[0.5, 0.9, 1.0],\n    \"n_estimators\": [100,500]}","28e304ad":"xgb_cv = GridSearchCV(xgb,xgb_params, cv = 10, n_jobs = -1, verbose = 2).fit(X, y)","df5a0768":"xgb_cv.best_params_","05b85db8":"xgb_tuned = GradientBoostingClassifier(**xgb_cv.best_params_).fit(X,y)","e4a34f0f":"cross_val_score(xgb_tuned, X, y, cv = 10).mean()","f5c806f4":"feature_imp = pd.Series(xgb_tuned.feature_importances_,\n                        index=X.columns).sort_values(ascending=False)\n\nsns.barplot(x=feature_imp, y=feature_imp.index, palette=\"Blues_d\")\nplt.xlabel('Feature Importance Score')\nplt.ylabel('Features')\nplt.title(\"Feature Severity Levels\")\nplt.show()","b278d3c5":"lgbm = LGBMClassifier(random_state = 12345)","d1de019a":"lgbm_params = {\"learning_rate\": [0.01, 0.03, 0.05, 0.1, 0.5],\n              \"n_estimators\": [500, 1000, 1500],\n              \"max_depth\":[3,5,8]}","6a3cdc06":"gs_cv = GridSearchCV(lgbm, \n                     lgbm_params, \n                     cv = 10, \n                     n_jobs = -1, \n                     verbose = 2).fit(X, y)","dc179d2a":"gs_cv.best_params_","45660da3":"lgbm_tuned = LGBMClassifier(**gs_cv.best_params_).fit(X,y)","3aef5d7b":"cross_val_score(lgbm_tuned, X, y, cv = 10).mean()","3c463321":"feature_imp = pd.Series(lgbm_tuned.feature_importances_,\n                        index=X.columns).sort_values(ascending=False)\n\nsns.barplot(x=feature_imp, y=feature_imp.index, palette=\"Blues_d\")\nplt.xlabel('Feature Importance Score')\nplt.ylabel('Features')\nplt.title(\"Feature Severity Levels\")\nplt.show()","c3d78e60":"models = []\n\nmodels.append(('RF', RandomForestClassifier(random_state = 12345, max_depth = 8, max_features = 7, min_samples_split = 2, n_estimators = 500)))\nmodels.append(('XGB', GradientBoostingClassifier(random_state = 12345, learning_rate = 0.1, max_depth = 5, min_samples_split = 0.1, n_estimators = 100, subsample = 1.0)))\nmodels.append((\"LightGBM\", LGBMClassifier(random_state = 12345, learning_rate = 0.01,  max_depth = 3, n_estimators = 1000)))\n\nresults = []\nnames = []","e9d2170d":"for name, model in models:\n    \n        cv_results = cross_val_score(model, X, y, cv = 10, scoring= \"accuracy\")\n        results.append(cv_results)\n        names.append(name)\n        msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n        print(msg)\n        \n#boxplot ile algoritmalar\u0131n kar\u015f\u0131la\u015ft\u0131rmas\u0131\nfig = plt.figure(figsize=(15,10))\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results,\n            vert=True, #dikey kutu hizalamas\u0131\n            patch_artist=True) #renkle doldur\n                         \nax.set_xticklabels(names)\nplt.show()","49940894":"# Final Modellerinin Kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","0df2218e":"### XGBoost Tuning","db089961":"### Final Modelin Kurulumu","3358c848":"Nihai hedefimiz, diyabetin ba\u015flang\u0131c\u0131n\u0131 tahmin etmek i\u00e7in verilerimizdeki kal\u0131plardan yararlanmakt\u0131r. A\u015fa\u011f\u0131da diyabet geli\u015ftirenler ile geli\u015ftirmeyenler aras\u0131ndaki baz\u0131 farkl\u0131l\u0131klar\u0131n g\u00f6rselle\u015ftirilme uygulamalar\u0131 verilmi\u015ftir","a4ddd7a6":"### LightGBM Tuning","828f078f":"# Diyabet Sonu\u00e7lar\u0131 \u00dczerinde Tahmin Modellerinin Kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","3e4a4966":"Bu histogramlar bize iki s\u0131n\u0131f de\u011fi\u015fkeni (diyabet olan ve diyabet olmayan) i\u00e7in 'BMI', 'BloodPressure', 'Glucose' da\u011f\u0131l\u0131mlar\u0131n\u0131 g\u00f6sterir.\n\nDiyabet geli\u015ftirecek olanlar i\u00e7in 'Glucose'da b\u00fcy\u00fck bir art\u0131\u015f var gibi g\u00f6r\u00fcn\u00fcyor. Bunu sa\u011flamla\u015ft\u0131rmak i\u00e7in, bu de\u011fi\u015fkenler aras\u0131ndaki ili\u015fkiyi \u00f6l\u00e7mek amac\u0131yla korelasyon matrisini g\u00f6rselle\u015ftirebiliriz.","8d2f6a09":"Model tuning i\u015flemleri ile base modellere g\u00f6re daha iyi tahminler yap\u0131lm\u0131\u015ft\u0131r.","f850c443":"# Veriyi Anlama","17efdec1":"# Kaynaklar\n\n    - https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.sample.html\n    \n    - https:\/\/www.udemy.com\/course\/python-egitimi\/\n    \n    - https:\/\/github.com\/omarozt\/MachineLearningWorkshop\n    \n    - https:\/\/www.kaggle.com\/ibrahimyildiz\/pima-indians-diabetes-pred-0-9078-acc\n    \n    - https:\/\/seaborn.pydata.org\/examples\/color_palettes.html\n    \n    - https:\/\/seaborn.pydata.org\/examples\/color_palettes.html \n    \n    - https:\/\/www.jonobacon.com\/2017\/08\/06\/joining-data-world-advisory-board\/\n\n    - https:\/\/towardsdatascience.com\/data-preprocessing-concepts-fa946d11c825\n    \n    - https:\/\/becominghuman.ai\/data-preprocessing-a-basic-guideline-c0842b7883fa\n        \n    - Feature Engineering Made Easy, Sinan Ozdemir and Divya Susarla ","2d318ba1":"RF, XGB ve LightGBM di\u011fer modellere g\u00f6re daha iyi sonu\u00e7lar vermesinden dolay\u0131 bu modellerin optimize edilmesine odaklan\u0131lm\u0131\u015ft\u0131r.","aecbf9ab":"## Eksik Veri Analizi","64ecca32":"Dataframe'den se\u00e7ilen ba\u011f\u0131ms\u0131z ve ba\u011f\u0131ml\u0131 de\u011fi\u015fken \u00fczerinde i\u015flemler yap\u0131ld\u0131. Ba\u011f\u0131ml\u0131 de\u011fi\u015fkene gruplama i\u015flemi uyguland\u0131 ard\u0131ndan ba\u011f\u0131ms\u0131z de\u011fi\u015fken se\u00e7ildi ve bu de\u011fi\u015fkenin medyan\u0131 al\u0131nd\u0131.","bd0f4744":"Veri setinde eksik bir de\u011fer yokmu\u015f gibi g\u00f6r\u00fcnmektedir, ancak de\u011fi\u015fkenler incelendi\u011finde bu de\u011fi\u015fkenlerdeki s\u0131f\u0131rlar NA anlam\u0131na geldi\u011fi tespit edilmi\u015ftir.","a479c946":"# Sonu\u00e7    \n     \n - Farkl\u0131 \u00f6zelliklere sahip 21 ya\u015f\u0131n \u00fczerindeki Pima Indian miras\u0131na sahip kad\u0131nlar\u0131n insanlar\u0131n diyabet hastas\u0131 olup olmayaca\u011f\u0131n\u0131 tahmin etmek i\u00e7in makine \u00f6\u011frenimi modelleri olu\u015fturuldu.\n    \n    \n - Veri setini en iyi tan\u0131mlayan 3 s\u0131n\u0131fland\u0131rma modeli se\u00e7ildi ve bu modeller ba\u015far\u0131 oranlar\u0131na g\u00f6re kar\u015f\u0131la\u015ft\u0131r\u0131ld\u0131. Kar\u015f\u0131la\u015ft\u0131r\u0131lan modeller Random Forests, XGBoost, LightGBM'dir.\n\n\n - Kurulan modellerin k\u0131yaslanmas\u0131 sonucunda; bu veri seti \u00f6zelinde veriyi en iyi a\u00e7\u0131klayan ve en iyi sonu\u00e7lar\u0131 veren modelin LightGBM oldu\u011fu belirlenmi\u015ftir.","0aa05dc8":"## De\u011fi\u015fken Standardizasyonu","2978389a":"### Random Forests Tuning","9807b73a":"# Veri \u00d6n \u0130\u015fleme","65c16fc7":"Sonu\u00e7: Outcome ile en y\u00fcksek korelasyon Glucose, BMI, Age and Pregnancies aras\u0131nda g\u00f6zlendi.","890224d6":"# Model Optimizasyonu","964e0d75":"![machine_learning_health.jpg](attachment:machine_learning_health.jpg)","63c93dfc":"Bu histogram bize Glikoz ve iki tahmin s\u0131n\u0131f\u0131 aras\u0131nda olduk\u00e7a b\u00fcy\u00fck bir fark g\u00f6steriyor.","cbdcedda":"# Modelleme","a5f3359e":"### Final Modelin Kurulumu","cbba0dc1":"## One-Hot Encoding","c3e0e278":"# Proje Konusu\n\nBu veriseti, v\u00fccutlar\u0131 hakk\u0131nda t\u0131bbi ayr\u0131nt\u0131lar verilen 21 ya\u015f\u0131n \u00fczerindeki Pima Indian miras\u0131na sahip kad\u0131nlarda be\u015f y\u0131l i\u00e7inde diyabetin ba\u015flang\u0131c\u0131n\u0131 tahmin etmek i\u00e7in kullan\u0131l\u0131r. Veri setinin, ikili s\u0131n\u0131fland\u0131rma (2 s\u0131n\u0131fl\u0131) makine \u00f6\u011frenimi problemine kar\u015f\u0131l\u0131k gelmesi ama\u00e7lanm\u0131\u015ft\u0131r.\n\nDiyabet hastas\u0131 olma durumunu g\u00f6steren ba\u011f\u0131ml\u0131 bir de\u011fi\u015fkenimiz var. Amac\u0131m\u0131z, diyabet durumunu g\u00f6steren de\u011fi\u015fken ile di\u011fer de\u011fi\u015fkenler aras\u0131ndaki ili\u015fkiyi modellemektir.\n\nKi\u015filerin \u00e7e\u015fitli \u00f6zellikleri girildi\u011finde, bu ki\u015filerin \u015feker hastas\u0131 olup olmayaca\u011f\u0131na dair tahmin yapacak bir makine \u00f6\u011frenimi modeli olu\u015fturmak istiyoruz. Bu bir s\u0131n\u0131fland\u0131rma problemidir.\n\n## Veri Seti Bilgileri\n\nBu veriseti orijinal olarak National Institute of Diabetes and Digestive and Kidney Diseases'den al\u0131nm\u0131\u015ft\u0131r. Veri setinin amac\u0131, bir hastan\u0131n diyabetli olup olmad\u0131\u011f\u0131n\u0131, veri setine dahil edilen belirli tan\u0131sal \u00f6l\u00e7\u00fcmlere dayal\u0131 olarak tahmin etmektir. Bu \u00f6rneklerin daha b\u00fcy\u00fck bir veritaban\u0131ndan se\u00e7ilmesiyle ilgili \u00e7e\u015fitli k\u0131s\u0131tlamalar getirildi. \u00d6zellikle buradaki t\u00fcm hastalar, Pima Indian miras\u0131ndan en az 21 ya\u015f\u0131nda olan kad\u0131nlard\u0131r.\n\n9 s\u00fctunumuz ve 768 \u00f6rne\u011fimiz (sat\u0131r\u0131m\u0131z) var. S\u00fctun adlar\u0131 a\u015fa\u011f\u0131daki \u015fekilde verilmi\u015ftir:\n\n    - Pregnancies: Hamile say\u0131s\u0131\n    - Glucose: Oral glikoz tolerans testinde 2 saatlik plazma glikoz konsantrasyonu\n    - BloodPressure: Diyastolik kan bas\u0131nc\u0131 (mm Hg)\n    - SkinThickness: Triceps deri k\u0131vr\u0131m kal\u0131nl\u0131\u011f\u0131 (mm)\n    - Insulin: 2 saatlik serum ins\u00fclin \u00f6l\u00e7\u00fcm\u00fc (mu U\/ml)\n    - BMI: V\u00fccut kitle indeksi (kg cinsinden a\u011f\u0131rl\u0131k \/ (m cinsinden y\u00fckseklik) 2)\n    - DiabetesPedigreeFunction: Diyabet soya\u011fac\u0131 fonksiyonu\n    - Age: Ya\u015f (y\u0131l)\n    - Outcome: S\u0131n\u0131f de\u011fi\u015fkeni (0 veya 1, 0 = diyabetik de\u011fil, 1 = diyabetik)","095163d4":"### Final Modelin Kurulumu","204ce7b7":"## Model Tuning","02ca0bdf":"## Feature Engineering"}}