{"cell_type":{"a34aaff9":"code","1f55adcf":"code","861b0ad7":"code","25d86da8":"code","2c6e4198":"code","1b243555":"code","ea644cf3":"code","b93f1d98":"code","cb7c22dc":"code","6ba93acc":"code","565ca6cd":"code","30ca7fd8":"code","c7a9b17b":"code","9747d5a6":"code","f7d50f37":"code","f14059f0":"code","7e85fea2":"code","504bb482":"code","6093aa22":"code","a9d21b26":"code","885e7c86":"code","aa900a7f":"code","81bdc07d":"code","6e60108d":"code","00153758":"code","b8e6ac30":"code","50ecedc2":"code","3b136811":"code","0f6c8557":"code","ca9c1619":"code","157d1efe":"code","b8f30eae":"code","4e68d41e":"code","bed3a86f":"code","79b8ee8d":"code","aec5c1b7":"code","4ad00768":"code","9e3e8603":"code","ed47f418":"code","cd0669dd":"code","71df7299":"code","e6409f3b":"code","9092e28a":"code","60b7ac1a":"markdown","84811502":"markdown","85e48cdd":"markdown","7b5fa62c":"markdown","c2abb19e":"markdown","11096401":"markdown","42b2dfa8":"markdown","598b3f65":"markdown","1512b88c":"markdown","b0b6b14d":"markdown","fba825d9":"markdown","e10bcde9":"markdown","6a87ae5a":"markdown","e249a220":"markdown","e10ba3e5":"markdown","477157d0":"markdown","3691d0fc":"markdown","23f9d919":"markdown","b9840bf1":"markdown","7e86709f":"markdown","86491e13":"markdown","1e1bfbf8":"markdown","18f5a4c3":"markdown","96a6379e":"markdown","b893163b":"markdown","5d3b2720":"markdown","b6a700da":"markdown","2050e832":"markdown","6e7867de":"markdown","4952f1cc":"markdown","ccdf2472":"markdown","1ebf54d2":"markdown","747c67e6":"markdown","aab8cb8c":"markdown","5b9b0b79":"markdown","e5c73968":"markdown","02f02d46":"markdown","2539f35a":"markdown","dd41b5d6":"markdown"},"source":{"a34aaff9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1f55adcf":"base = '\/kaggle\/input\/cleaning\/cleaned_out\/'\nnames = ['matches','teamwise_home_and_away','deliveries','most_runs_average_strikerate','teams','players']\nfor i,name in enumerate(names):\n    my_code = name+'='+'pd.read_pickle(\"'+base+name+'.pkl'+'\")'\n    exec(my_code)\n    ","861b0ad7":"sorted(matches.Season.unique())","25d86da8":"matches['Season'] = matches['Season'].str[-4:].astype(int)\nmatches.head()","2c6e4198":"c = sns.color_palette()[0]\nsns.countplot(x=\"Season\", data=matches,color = c);","1b243555":"plt.figure(figsize = (10,10))\nsns.countplot(y=\"city\", data=matches,order = matches['city'].value_counts().index,color = c);","ea644cf3":"world_cities = pd.read_csv('\/kaggle\/input\/world-cities\/worldcities.csv')\nworld_cities.head()","b93f1d98":"matches_world = matches.join(world_cities[['city','country','population']].set_index('city'), on='city', how='left')\nmatches_world.head()","cb7c22dc":"matches_world[matches_world['country'].isnull()].city.unique()","6ba93acc":"indian_cities = pd.read_csv('\/kaggle\/input\/top-500-indian-cities\/cities_r2.csv')","565ca6cd":"indian_cities.head()","30ca7fd8":"ind_cities = indian_cities.name_of_city.unique()\nprint(len(set(matches_world[matches_world['country'].isnull()].city.unique()) - set(ind_cities)))\nset(matches_world[matches_world['country'].isnull()].city.unique()) - set(ind_cities)","c7a9b17b":"indian_cities.head(10)","9747d5a6":"indian_cities['name_of_city'] = indian_cities['name_of_city'].str.strip()\nind_cities = indian_cities.name_of_city.unique()\n\nprint(len(set(matches_world[matches_world['country'].isnull()].city.unique()) - set(ind_cities)))\nset(matches_world[matches_world['country'].isnull()].city.unique()) - set(ind_cities)","f7d50f37":"indian_cities = indian_cities.rename(columns = {'name_of_city':'city','population_total':'population'})\nindian_cities['country'] = 'India'\nindian_cities.loc[indian_cities[indian_cities['city'] == 'Ahmadabad'].index,'city'] = 'Ahmedabad'","f14059f0":"c1 = set(matches_world[matches_world['country'].isnull()].city.unique())\n\ncs = c1.intersection(ind_cities)\ncs.add('Ahmedabad')\ncs","7e85fea2":"df1 = indian_cities[indian_cities['city'].isin(cs)][['city','country','population']]\ndf1","504bb482":"df2 = pd.concat([world_cities[['city','country','population']],df1])\nmatches_world = matches.join(df2.set_index('city'), on='city', how='left')\nmatches_world[matches_world['country'].isnull()].city.unique()","6093aa22":"matches_world['country'] = matches_world['country'].fillna('India')\npopulations = [6.81*10**6,53,543,146,213]\nfor pop,city in zip(populations,['Hyderabad', 'Dharamsala', 'Mohali']):\n    matches_world.loc[matches_world[matches_world['city'] == city].index,'population'] = pop\n    ","a9d21b26":"matches_world['country'].value_counts()","885e7c86":"\n\ns = matches_world['country'].value_counts()\nlabels = s.index\nsizes = s.values\n# explode = (0.1, 0, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Hogs')\n\nfig1, ax1 = plt.subplots(figsize=(12,12))\nax1.pie(sizes, labels=labels, autopct='%1.1f%%',rotatelabels = True,\n         startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()","aa900a7f":"k = matches_world['team1'].value_counts().sort_index()+matches_world['team2'].value_counts().sort_index()\nk = k.sort_values()\nk","81bdc07d":"sns.barplot(y=k.index,x=k,color=c);","6e60108d":"w = matches_world.groupby(['Season','winner'])['id'].count()","00153758":"plt.figure(figsize=(10,10))\nw = w.reset_index()\nw_piv = w.pivot(index = 'winner', columns = 'Season',\n                            values = 'id').fillna(0)\nsns.heatmap(w_piv, annot = True, fmt = '.0f',\n           cbar_kws = {'label' : 'winning count'})","b8e6ac30":"def get_duals_sets(x):\n    l = list(set((x[4],x[5])))\n    return l[0]+\"_\"+l[1]\nmatches_world_eda = matches_world.copy()\nmatches_world_eda['duals_sets'] = matches_world.apply( get_duals_sets,axis=1)\nmatches_world_eda.head()","50ecedc2":"k = matches_world_eda['duals_sets'].value_counts()\nplt.figure(figsize=(12,12))\nsns.barplot(y = k.index,x = k,color=c)","3b136811":"def get_win_rate(x):\n#     print(type())\n    first_team = x.name.split('_')[0]\n    \n    return 100*sum(x == first_team)\/len(x),len(x)\n\nwin = matches_world_eda.groupby('duals_sets')['winner'].apply(get_win_rate)\nwin","0f6c8557":"k =  win.values\nidx = [j for j,i in enumerate(k) if (i[0]>50 or i[0]<40) and i[1]>10]\nw = win[idx]","ca9c1619":"w_idx = w.index\nw_final = []\nt_final = []\nfor i in range(len(w)):\n    k = w_idx[i].split('_')\n    w_now = w[i][0]\n    if w_now>50:\n        t_final.append(k[0]+\"_\"+k[1])\n        w_final.append(w_now)\n    else:\n        t_final.append(k[1]+\"_\"+k[0])\n        w_final.append(100-w_now)\n        ","157d1efe":"w_sorted = pd.Series(w_final,t_final).sort_values(ascending=False)\nv1 = w_sorted.values\nv2 = 100-v1\nt_final = np.array([[k.split(\"_\")[0],k.split(\"_\")[1]] for k in w_sorted.index]).flatten()","b8f30eae":"x1 = np.arange(len(v1))\nx2 = np.array([[i,i-0.2]for i in range(len(v1))]).flatten()\nf = plt.figure(figsize=(20,7))\nax = f.add_subplot(111)\nr1 = ax.bar(x1-0.2, v1, width=0.2, color='b', align='center');\nr2 = ax.bar(x1, v2, width=0.2, color='g', align='center');\nax.set_xticks(x2);\nax.set_xticklabels(t_final);\nax.bar_label(r1, padding=3,fmt='%.0f')\nax.bar_label(r2, padding=3,fmt='%.0f')\nplt.xticks(rotation=90);\n","4e68d41e":"seasons_played_num = []\nfor i,row in w_piv.iterrows():\n    seasons_played_num.append((i,len([k for k in row if k>0])))\nseasons_played_num = sorted(seasons_played_num,key=lambda x:x[1],reverse=True)\nseasons_played_num","bed3a86f":"city_teams = seasons_played_num[:8]\ncity_teams = [k[0] for k in city_teams]\ncities = matches['city'].value_counts()[:11].index\n","79b8ee8d":"matches_cities = matches_world_eda[matches_world_eda.city.isin(cities)]\nmatches_cities = matches_cities[['team1','team2','winner','city']]\nmatches_cities.shape","aec5c1b7":"def get_loser(row):\n#     print(row)\n    t1 = row[0]\n    t2 = row[1]\n    w = row[2]\n    return t1 if w!=t1 else t2\nmatches_cities['loser'] = matches_cities.apply(get_loser,axis=1)","4ad00768":"w = matches_cities.groupby(['city','winner']).count()['team1']\nl = matches_cities.groupby(['city','loser']).count()['team2']\nw_l = pd.concat([w, l], axis=1).fillna(0)\nw_l['win_rate'] = 100*w_l['team1']\/(w_l['team2']+w_l['team1'])\nw_l = w_l.reset_index()\nw_l = w_l[w_l['level_1'].isin(city_teams)]\n\nw_l.head()","9e3e8603":"plt.figure(figsize=(10,10))\nw_l_piv = w_l.pivot(index = 'level_1', columns = 'city',\n                            values = 'win_rate').fillna(0)\n\nsns.heatmap(w_l_piv, annot = True, fmt = '.0f',\n           cbar_kws = {'label' : 'winning rate'})","ed47f418":"w_l['count_games'] = w_l['team2']+w_l['team1']\nw_l = w_l.reset_index()\nw_l = w_l[w_l['level_1'].isin(city_teams)]\nplt.figure(figsize=(10,10))\nw_l_piv = w_l.pivot(index = 'level_1', columns = 'city',\n                            values = 'count_games').fillna(0)\n\nsns.heatmap(w_l_piv, annot = True, fmt = '.0f',\n           cbar_kws = {'label' : 'count games'})","cd0669dd":"print(matches_world_eda['player_of_match'].nunique())\np_o_m = matches_world_eda['player_of_match'].value_counts()","71df7299":"p_o_m[p_o_m>9]","e6409f3b":"out_base = \"\/kaggle\/working\/\"\nmode = 0o666\nif not os.path.exists(out_base):\n    os.mkdir(out_base,mode)","9092e28a":"matches_world_eda.to_pickle(out_base+\"\/matches_world_eda.pkl\")","60b7ac1a":"> 2011 - 2013 seasons are the seasons with bigger number of matches between all the seasons","84811502":"# We have Seasons from 2008 to 2019","85e48cdd":"> We can see here that there are some teams that appears for only a period of time and there are 8 teams that are almost played on all seasons","7b5fa62c":"> Some sorting and preparing","c2abb19e":"# Questions we will try to answer \n> 1. How was the performance of each team developing in each season ?\n> 2. Does certain teams have weaknesses against some specific other teams ?\n> 3. Does playing in certain cities affects some teams performance ?\n> 4. Who are the players recognized as the player of the match frequently ?\n\n\n","11096401":"# Let's see what are the seasons we have","42b2dfa8":"> We can see a couple of observations here:\n1- Each team has a certain country that it played most of its matches in \n2- Delhi is the highest country in the number of matches all the big teams are playing ","598b3f65":"> Now we have just 4 cities with unknown names let's check the spell","1512b88c":"> There are spaces in the end of every name ","b0b6b14d":"> We can recognize a proplem with the data set as Chandigarh exists in both datasets but is not detected in the matches df","fba825d9":"# Let's check  the winning rate of each team on each season","e10bcde9":"> Let's check that for the first most 10 frequent countries and the teams with more consistent data (look the heat map above) ","6a87ae5a":"#### Let's first get the distripution of the teams compinations","e249a220":"We can see genrally the high variability in winning rates in various cities, so let's check the number of matche each team played in each city","e10ba3e5":"> We can search google for populations","477157d0":"*Let's see how many cities are left without population and country*","3691d0fc":"## 2. Does certain teams have weaknesses against some specific other teams ?","23f9d919":"> Some teams play a lot of matches and others don't","b9840bf1":"# Let's see how much matches each team played ","7e86709f":"> India takes part in 81.2% of the mathces followed by the US, then South Africa, Emirates, UK, and South Africa","86491e13":"> Most of the matches are played in big Indian cities ","1e1bfbf8":"**Let's see what cities we got**","18f5a4c3":"> We can see here that Ahmadabad is just spelled differently ","96a6379e":"> Looks like we can just solve AhmedAbad problem for now","b893163b":"Let's get the number of seasons played per team","5d3b2720":"So we got 2 countries","b6a700da":"> Let's see who are the teams that are strong specially against certain teams","2050e832":"Let's check the affect of cities on various teams","6e7867de":"> Let's filter duals that played more than 10 matches against each others","4952f1cc":"# Read cleaned data","ccdf2472":"*Some teams perform really well against certain teams as we can see*","1ebf54d2":"## Now let's check the player of the match histogram  ","747c67e6":"> We can see that the highest 7 have 10 seasons played and above, so we will consider them","aab8cb8c":"*12 city of the 33 cities and most of them are indian cities*","5b9b0b79":"## Next we will do feature engineering based on the insights we saw here","e5c73968":"> Duals numbers ranges from 1 to 30","02f02d46":"> we can see also there are some teams with high flactuations in winning and others with more stable performance","2539f35a":"> we can see some players with high number of honors, but unfortunately we can't use this as a feature for our model unless we know that one of these players will play in the match","dd41b5d6":"> The indian data set is from 2011 and the world data set is from 2020, so we will just use the necessary data from the indian dataset with a column indicating the source"}}