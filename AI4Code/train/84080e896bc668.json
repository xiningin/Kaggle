{"cell_type":{"9b12646b":"code","a6447947":"code","70780602":"code","41484283":"code","fb64727f":"code","097e4f41":"code","3b75ce8a":"code","b585aa11":"code","443d9ddb":"code","cb3724c8":"code","e19faf86":"markdown","08c7fe3c":"markdown"},"source":{"9b12646b":"import tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport time\n\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\nfrom tensorflow.keras import Sequential, layers, callbacks\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","a6447947":"path_train = '..\/input\/dogs-cats-images\/dataset\/training_set'\npath_test = '..\/input\/dogs-cats-images\/dataset\/test_set'","70780602":"datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_data = datagen.flow_from_directory(path_train,\n                                target_size=(150,150),\n                                batch_size=32,\n                                class_mode='binary')\n\nvalid_data = datagen.flow_from_directory(path_test,\n                                    target_size=(150,150),\n                                    batch_size=32,\n                                    class_mode='binary')\n\nclass_names = (train_data.class_indices)\nprint(class_names)","41484283":"for image_batch, label_batch in train_data:\n    print(image_batch.shape)\n    print(label_batch.shape)\n    break","fb64727f":"num_class=len(class_names)\nmodel = Sequential([\n    layers.Conv2D(16, 3, activation='relu', input_shape=(150,150,3)),\n    layers.MaxPool2D(pool_size=(2,2)),\n    layers.Conv2D(32, 3, activation='relu'),\n    layers.MaxPool2D(pool_size=(2,2)),\n    layers.Conv2D(64, 3, activation='relu'),\n    layers.MaxPool2D(pool_size=(2,2)),\n    layers.Conv2D(128, 3, activation='relu'),\n    layers.MaxPool2D(pool_size=(2,2)),\n\n    layers.Flatten(),\n    layers.Dense(256, activation='relu'),\n    #layers.Dropout(0.2),\n    layers.Dense(1, activation='sigmoid')\n])\n","097e4f41":"model.summary()","3b75ce8a":"model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n              loss=tf.keras.losses.BinaryCrossentropy(), \n              metrics=['accuracy'])","b585aa11":"start = time.perf_counter()\nearly_stopping = callbacks.EarlyStopping(monitor =\"val_loss\", \n                                         mode =\"min\", patience=5)\nhistory = model.fit(train_data, \n                    epochs=50, \n                    batch_size=32,\n                    validation_data=valid_data,\n                    callbacks=[early_stopping])\n\nelapsed = time.perf_counter() - start\nprint('Elapsed %.3f seconds.' % elapsed)  ","443d9ddb":"# Plotting accuracy and val_accuracy\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(1, len(val_acc)+1)\nplt.figure(figsize=(12, 4))\n\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.xlim(1, len(val_acc)+1)\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.xlim(1, len(val_acc)+1)\nplt.title('Training and Validation Loss')\nplt.show()","cb3724c8":"# convert model\n#model.save(\"model.h5\")\nconverter = tf.lite.TFLiteConverter.from_keras_model(model)\ntfmodel = converter.convert()\nopen(\"model.tflite\",'wb').write(tfmodel)","e19faf86":"### Convert to tf_lite","08c7fe3c":"### Model"}}