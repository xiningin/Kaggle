{"cell_type":{"23e3eb83":"code","56c7fda5":"code","1f1e2521":"code","74151805":"code","32ba5d4d":"code","35dee2f6":"code","628b1804":"code","08e61052":"code","261fa11d":"code","76c8cc1a":"code","0065d2cb":"code","df229330":"code","154ef232":"code","857ed386":"code","c6bd0c69":"code","cc2f823e":"code","eab8c758":"code","9e678cee":"code","35a97761":"code","4a4241c3":"code","09cc4c49":"code","36445b91":"code","e6305284":"markdown","604d867c":"markdown","5e2a5e2f":"markdown","5bc4137e":"markdown","b6e63616":"markdown","f841e45e":"markdown","edc2b77a":"markdown","618e7877":"markdown","d7ccea34":"markdown","a7743b43":"markdown"},"source":{"23e3eb83":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","56c7fda5":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Supress Warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# To impute missing Values\nfrom sklearn.impute import SimpleImputer","1f1e2521":"train = pd.read_csv('..\/input\/iitgaih12021-22\/train.csv')\ntest = pd.read_csv('..\/input\/iitgaih12021-22\/test.csv')\nsample = pd.read_csv('..\/input\/iitgaih12021-22\/sample_submission.csv')","74151805":"train.shape, test.shape","32ba5d4d":"train.isnull().sum().sum(), test.isnull().sum().sum()","35dee2f6":"pd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.max_rows\", None)","628b1804":"train.isnull().sum()","08e61052":"test.isnull().sum()","261fa11d":"train.race_black.unique(), train.race_white.unique()","76c8cc1a":"train[train.race_white == ' G'].shape[0]","0065d2cb":"(train[train.race_black == '1'].shape[0] + train[train.race_black == '0'].shape[0])\/ train.shape[0]","df229330":"train.race_arab.unique(), train.race_asian.unique()","154ef232":"(train[train.race_arab == '0'].shape[0]+train[train.race_arab == '1'].shape[0])\/train.shape[0]","857ed386":"(train[train.race_asian == '0'].shape[0]+train[train.race_asian == '1'].shape[0])\/train.shape[0]","c6bd0c69":"cat_cols = ['education', 'urban', 'gender', 'engnat', 'hand', 'religion', 'orientation', 'voted', 'married', 'married']","cc2f823e":"nrows = 2\nncols = 5\ni = 0\n\nfig, ax = plt.subplots(nrows, ncols, figsize = (10,10))\n\nfor row in range(nrows):\n    for col in range(ncols):\n        sns.histplot(data = train[cat_cols].iloc[:, i], bins = 50, ax = ax[row, col], palette  = 'bone_r').set(ylabel = '')\n        i += 1","eab8c758":"cat_cols = ['education', 'urban', 'gender', 'engnat', 'hand', 'religion', 'orientation', 'voted', 'married', 'race_black', 'race_white', 'race_arab', 'race_asian', 'major', 'country']\nnum_cols = train.drop(cat_cols, axis=1).columns","9e678cee":"(train[num_cols].dtypes != int).sum()","35a97761":"train[num_cols].columns.nunique()","4a4241c3":"nrows = 13\nncols = 5\ni = 0\n\nfig, ax = plt.subplots(nrows, ncols, figsize = (25,75))\n\nfor row in range(nrows):\n    for col in range(ncols):\n        sns.histplot(data = train[num_cols].iloc[:, i], bins = 50, ax = ax[row, col], palette  = 'bone_r').set(ylabel = '')\n        i += 1","09cc4c49":"train.corr().T.style.background_gradient('copper_r')","36445b91":"fig, ax = plt.subplots(7, 1, figsize = (25,25))\nsns.boxplot(data = train[num_cols].iloc[:, :10], ax = ax[0])\nsns.boxplot(data = train[num_cols].iloc[:, 10:20], ax = ax[1])\nsns.boxplot(data = train[num_cols].iloc[:, 20:30], ax = ax[2])\nsns.boxplot(data = train[num_cols].iloc[:, 30:40], ax = ax[3])\nsns.boxplot(data = train[num_cols].iloc[:, 40:50], ax = ax[4])\nsns.boxplot(data = train[num_cols].iloc[:, 50:60], ax = ax[5])\nsns.boxplot(data = train[num_cols].iloc[:, 60:65], ax = ax[6])","e6305284":"# Reading data","604d867c":"# Checking Null values","5e2a5e2f":"# Analysing missing values","5bc4137e":"# Importing Libraries","b6e63616":"# Numerical columns","f841e45e":"# Other categorical columns ","edc2b77a":"# Outlier checking","618e7877":"# Analysing num_cols","d7ccea34":"# Correlation checking","a7743b43":"# Display all columns"}}