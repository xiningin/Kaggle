{"cell_type":{"d93b366c":"code","c36a088a":"code","63581995":"code","f8a46150":"code","2e8ba9d7":"code","dc0f042a":"markdown","d6a6e5b7":"markdown","b167dfce":"markdown","5e081cbf":"markdown"},"source":{"d93b366c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c36a088a":"train = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/train.csv\")\nstock_ids = train[\"stock_id\"].unique()\nprint(f\"there are {len(stock_ids)} stock_ids in train.csv\")","63581995":"all_time_id_series = pd.Series()\nfor stock_id in stock_ids:\n    stock_i = train.query('stock_id==@stock_id', engine='python')\n    all_targets = stock_i['target']\n    all_time_ids = stock_i['time_id']\n    all_time_id_series = pd.concat((all_time_id_series, all_time_ids))\n\nall_time_id_counts = all_time_id_series.value_counts()\nprint(all_time_id_counts)\nplt.bar(all_time_id_counts.index, all_time_id_counts, width=10)\nplt.xlabel(\"time_id\")\nplt.ylabel(\"counts (in whole data)\")\nplt.show()","f8a46150":"largest_n_target_number = 5\nlargest_n_time_id_series = pd.Series()\nfor stock_id in stock_ids:\n    stock_i = train.query('stock_id==@stock_id', engine='python')\n    stock_i = stock_i.sort_values('target', ascending=False).reset_index()\n    largest_n_targets = stock_i.iloc[:largest_n_target_number]['target']\n    largest_n_time_ids = stock_i.iloc[:largest_n_target_number]['time_id']\n    largest_n_time_id_series = pd.concat((largest_n_time_id_series, largest_n_time_ids))\n\nlargest_n_time_id_counts = largest_n_time_id_series.value_counts()\nprint(largest_n_time_id_counts)\nplt.bar(largest_n_time_id_counts.index, largest_n_time_id_counts, width=100)\nplt.xlabel(\"time_id\")\nplt.ylabel(f\"counts (in the largest {largest_n_target_number} targets)\")\nplt.show()","2e8ba9d7":"smallest_n_target_number = 5\nsmallest_n_time_id_series = pd.Series()\nfor stock_id in stock_ids:\n    stock_i = train.query('stock_id==@stock_id', engine='python')\n    stock_i = stock_i.sort_values('target', ascending=False).reset_index()\n    smallest_n_targets = stock_i.iloc[smallest_n_target_number:]['target']\n    smallest_n_time_ids = stock_i.iloc[smallest_n_target_number:]['time_id']\n    smallest_n_time_id_series = pd.concat((smallest_n_time_id_series, smallest_n_time_ids))\n\nsmallest_n_time_id_counts = smallest_n_time_id_series.value_counts()\nprint(smallest_n_time_id_counts)\n\nplt.bar(smallest_n_time_id_counts.index, smallest_n_time_id_counts, width=5)\nplt.xlabel(\"time_id\")\nplt.ylabel(f\"counts (in the smallest {smallest_n_target_number} targets)\")\nplt.show()","dc0f042a":"In case the smallest volatility, there seems to be no outstanding time_id.\n\nIt make sense.","d6a6e5b7":"In train.csv, there are 3830 unique time_ids,\nand each time_id has 111 or 112 stock_ids (almost all).\nWe can say, train_csv data is not biased.","b167dfce":"The counts of some time_ids are over 20 counts, and time_id=19725 is outstanding!  \n\nI guess, in these time_ids, financial shocks happened and volatilities notably increased regardless of stock_id.\n\nFinancial shock may be very difficult to predict, I hope it wouldn't happen in evaluation three months. ","5e081cbf":"I hope this notebook would help someone to understand this competition. "}}