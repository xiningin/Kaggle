{"cell_type":{"d0de7f22":"code","1d9b2ef8":"code","e7ab9cba":"code","354d247e":"code","f5da71dd":"code","bb50bc07":"code","4c12e64f":"code","aa510ba1":"code","1ba8ec3c":"code","923629b7":"code","8196e82f":"code","2d8e44c7":"code","0219f99b":"code","b0a30a09":"code","f84fe888":"code","196ebcc4":"code","62e4145e":"code","cb3c7780":"code","ff9bc237":"code","1c87a375":"code","8a998867":"code","7dcd185a":"code","3f739128":"code","adaaa22f":"code","6c126f0e":"code","2f27f5a7":"code","31d84fbe":"code","c58569e1":"code","0bde4349":"code","0f2e45ba":"code","99a12f44":"code","5c448e31":"code","3f8bde99":"code","f0d0c07d":"code","aa740768":"code","5b63143a":"code","a8073322":"code","efda3cde":"code","689083b2":"code","922993bc":"code","aa05bbad":"code","19d47623":"code","5ab330fc":"code","fafb0f58":"code","e80c4c57":"code","56500415":"code","fb2df1e7":"code","d9c3ef4a":"markdown","f594439b":"markdown","2a89daf6":"markdown","e425640a":"markdown","abfb7e54":"markdown","237ed9cc":"markdown","82f1dac1":"markdown","588a43ec":"markdown","48b4fa47":"markdown","47d7c81d":"markdown","28a7773a":"markdown","be8b3555":"markdown","f007acaf":"markdown","c3fe4348":"markdown","79105511":"markdown","8d0981a7":"markdown","1b04c37d":"markdown","ef40a6b8":"markdown","844cf236":"markdown","a3b1c5ce":"markdown","d11dc30e":"markdown","954dd03c":"markdown","70bbf790":"markdown","e3c805d4":"markdown","14e643b8":"markdown","fce4d9fc":"markdown"},"source":{"d0de7f22":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d9b2ef8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\npd.options.display.float_format = \"{:.2f}\".format\nimport cufflinks as cf\nfrom plotly.offline import download_plotlyjs, init_notebook_mode,plot,iplot\ninit_notebook_mode(connected=True)\ncf.go_offline()\ncf.set_config_file(theme=\"pearl\")","e7ab9cba":"data=pd.read_csv(\"..\/input\/malnutritionestimates\/malnutrition-estimates.csv\")\ndata.head()","354d247e":"#drop unwanted columns for further analysis\ndata.drop(['ISO code','Survey Year','Survey Sample (N)','Source','Report Author','Notes','Short Source'], axis=1, inplace=True)","f5da71dd":"data.head()","bb50bc07":"def income_map(val):#Mapping 0,1,2,3 Income to respective names low,low middle, upper middle ,high income\n    mapper = {0:'Low Income', 1:'Lower Middle Income', 2:'Upper Middle Income',3:'High Income'}\n    return mapper[val]","4c12e64f":"data['Income Classification'] =data['Income Classification'].apply(income_map)","aa510ba1":"\ndef lldc_map(val):#mapping 0,1,2 to their respective names\n    mapper = {0:'Others', 2:'SIDS', 1:'LLDC'}\n    return mapper[val]\n","1ba8ec3c":"data['LLDC or SID2'] =data['LLDC or SID2'].apply(lldc_map)","923629b7":"data.head()","8196e82f":"data.columns # columns in the dataset","2d8e44c7":"data.shape ","0219f99b":"data.info()#info() of all the variables exsisting in the dataset","b0a30a09":"data['Country'].unique()# Data of all 150 countries in the dataset ","f84fe888":"data['Year'].unique()# Data of all 150 countries with year wise analysis ","196ebcc4":"data.describe()","62e4145e":"data.isnull().sum() # knowling number of non-missing values for each variable","cb3c7780":"data ['Wasting'].fillna(data ['Wasting'].mean(), inplace=True)\ndata ['Severe Wasting'].fillna(data ['Severe Wasting'].mean(), inplace=True)\ndata ['Overweight'].fillna(data ['Overweight'].mean(), inplace=True)\ndata ['Stunting'].fillna(data ['Stunting'].mean(), inplace=True)\ndata ['Underweight'].fillna(data ['Underweight'].mean(), inplace=True)","ff9bc237":"data.isnull().sum() # knowling number of non-missing values for each variable","1c87a375":"fig = px.box(data, y=data['Underweight'] ,title=\"EDA for Underweight\")\nfig.show()","8a998867":"fig1= px.box(data, y=data['Severe Wasting'] ,title=\"EDA for Severe Wasting\")\nfig1.show()","7dcd185a":"fig2= px.box(data, y=data['Wasting'] ,title=\"EDA for Wasting\")\nfig2.show()","3f739128":"fig3= px.box(data, y=data['Overweight'] ,title=\"EDA for Overweight\")\nfig3.show()","adaaa22f":"fig4= px.box(data, y=data['Stunting'] ,title=\"EDA for Stunting\")\nfig4.show()","6c126f0e":"x = data['Income Classification']\nplt.figure(figsize=(20,10))\nplt.ylabel('count', size='x-large')\nplt.xlabel('Income Classification', size= 'x-large')\nfig5=plt.hist(x,bins=10, color='skyblue', edgecolor='red', linewidth=5)\nfig5","2f27f5a7":"df_IL=pd.crosstab(data['Income Classification'],data['LDC'])","31d84fbe":"fig6=df_IL.iplot(kind='bar',title='Income Classification across LDC',yTitle='No of Countries',asFigure=True)\nfig6.show()","c58569e1":"df_IS=pd.crosstab(data['Income Classification'],data['LIFD'])","0bde4349":"fig7=df_IS.iplot(kind='bar',title='Income Classification across LIFD',yTitle='No of Countries',asFigure=True )\nfig7.show()","0f2e45ba":"d=pd.crosstab(data['Income Classification'],data['LLDC or SID2'])","99a12f44":"fig8=d.iplot(kind='bar',title='Income Classification across LLDC or SID2',yTitle='No of Countries',asFigure=True)\nfig8.show()","5c448e31":"corr = data.corr()# Pandas dataframe.corr() is used to find the pairwise correlation of all columns in the dataframe. Any na values are automatically excluded. For any non-numeric data type columns in the dataframe it is ignored.","3f8bde99":"corr = corr.reset_index()\ncorr","f0d0c07d":"sns.pairplot(data[['Severe Wasting', 'Wasting', 'Overweight', 'Stunting','Underweight']])","aa740768":"data.groupby(['Income Classification'])[['Severe Wasting','Wasting','Overweight','Stunting','Underweight']].count()","5b63143a":"fig9=data.groupby(['Income Classification'])[['Severe Wasting','Wasting','Overweight','Stunting','Underweight']].mean().iplot(kind='bar',xTitle= 'Income Level' ,yTitle= 'Parameter %',title='Income Classification % across all Parameters',asFigure=True)\nfig9.show()","a8073322":"data['Country'].value_counts()","efda3cde":"country =data.groupby(['Year'])[['Severe Wasting','Wasting','Overweight','Stunting','Underweight']].mean()\ncountry = country.reset_index()\ncountry","689083b2":"fig10=country[['Stunting','Wasting','Underweight','Severe Wasting','Overweight']].iplot(kind='line',title=\"Change in Parameter% over Years\",asFigure=True)\nfig10.show()","922993bc":"h_con_sW= data.loc[:,['Country','Severe Wasting']]# choosing the columns\nh_con_sW","aa05bbad":"h_con_sW['percent'] = h_con_sW.groupby('Country')['Severe Wasting'].transform('max')#creating a column with respect to country as a group which groups the mean of all respective observations into one record\nh_con_sW = h_con_sW.drop('Severe Wasting',axis=1).drop_duplicates().sort_values('percent', ascending=False).head(5)#sorting for the first  values\nh_con_sW","19d47623":"fig11 = px.pie(h_con_sW, names='Country', values='percent', title='Highest Severe Wasting% Across all Countries')\nfig11.update_traces(rotation=90, pull=[0.2,0.03,0.1,0.03,0.1], textinfo=\"percent+label\", showlegend=True)\nfig11.show()","5ab330fc":"h_con_w = data.loc[:,['Country','Wasting']]\nh_con_w['percent'] = h_con_w.groupby('Country')['Wasting'].transform('max')\nh_con_w = h_con_w.drop('Wasting',axis=1).drop_duplicates().sort_values('percent', ascending=False).head()\n\nfig12 = px.pie(h_con_w, names='Country', values='percent',title='Highest Wasting% Across all Countries')\nfig12.update_traces(rotation=90, pull=[0.2,0.03,0.1,0.03,0.1], textinfo=\"percent+label\")\nfig12.show()","fafb0f58":"h_con_ow = data.loc[:,['Country','Overweight']]\nh_con_ow['percent'] = h_con_ow.groupby('Country')['Overweight'].transform('max')\nh_con_ow = h_con_ow.drop('Overweight',axis=1).drop_duplicates().sort_values('percent', ascending=False).head()\n\nfig13= px.pie(h_con_ow, names='Country', values='percent', title='Highest Overweight% Across all Countries')\nfig13.update_traces(rotation=90, pull=[0.2,0.03,0.1,0.03,0.1], textinfo=\"percent+label\")\nfig13.show()","e80c4c57":"h_con_st = data.loc[:,['Country','Stunting']]\nh_con_st['percent'] = h_con_st.groupby('Country')['Stunting'].transform('max')\nh_con_st = h_con_st.drop('Stunting',axis=1).drop_duplicates().sort_values('percent', ascending=False).head()\n\nfig14= px.pie(h_con_st, names='Country', values='percent',title='Highest Stunting% Across all Countries')\nfig14.update_traces(rotation=90, pull=[0.2,0.03,0.1,0.03,0.1], textinfo=\"percent+label\")\nfig14.show()","56500415":"h_con_uw= data.loc[:,['Country','Underweight']]\nh_con_uw['percent'] =h_con_uw.groupby('Country')['Underweight'].transform('max')\nh_con_uw = h_con_uw.drop('Underweight',axis=1).drop_duplicates().sort_values('percent', ascending=False).head()\n\nfig15 = px.pie(h_con_uw, names='Country', values='percent', title='Highest Underweight% Across all Countries')\nfig15.update_traces(rotation=90, pull=[0.2,0.03,0.1,0.03,0.1], textinfo=\"percent+label\")\nfig15.show()","fb2df1e7":"import dash\nimport dash_core_components as dcc\nimport dash_html_components as html\nimport pandas as pd\nimport plotly.express as px\nimport json\nimport plotly.graph_objs as go\nfrom dash.dependencies import Input, Output\n\n\napp = dash.Dash()\ncolors = {\n    'background': '#FCF6F5FF',\n    'text': 'Royalblue',\n    'text-Align': 'center'\n    \n}\n\n#image_filename = 'fig5.png' # replace with your own image\n#test_base64 = base64.b64encode(open(fig5, 'rb').read()).decode('ascii')\n\napp.layout = html.Div(style={\n'backgroundColor': colors['background']\n}, children=[\n    html.Div(html.H1(children='MALNUTRITION-ESTIMATES DASHBOARD',style={'color':'#422057FF',            #all should be as string\n                                                   'text-align':'center',\n                                                    'font-size':'350%','padding': '20px',\n                                                   'background-color':'#FCF951FF','margin-top': '0px',\n                                                   'border-style': 'double',\n                                                   'display':'inline-block',  # display list items horizontally instead of vertically.\n                                                   'width':'100%'\n                                                    })),\n        dcc.Dropdown(\n                id= 'dropdown',\n        options=[\n        ################################################################\n            {'label': 'Univariate_Analysis', 'value': 'Univariate_Analysis'},\n            {'label': 'INCOME', 'value': 'Income' },\n            {'label': 'YEAR-WISE-PARAMETER-ESTIMATE', 'value': 'Multivariate Analysis'},\n            {'label': 'Highest Country Percentage', 'value': 'Highest Country Percentage'}\n            #{'label': 'total runnersup percentage of worldcup', 'value': 'total runnersup percentage of worldcup'}\n             \n        #####################################################################    \n           \n        ],\n        multi='False'\n            ),\n    html.Div(id='output')\n        \n])\n\nclassName='container'\n\n@app.callback(Output('output', 'children'), [Input('dropdown', 'value')])\ndef display_graphs(selected_values):\n    graphs = []\n ################################################################   \n\n    if 'Univariate_Analysis' in selected_values:\n        \n        graphs.append(html.H1('BOX PLOT FOR ALL ATTRIBUTES',style={'color':'#422057FF',        #text color        #all should be as string\n                                                   'text-align':'center',          # Text Allignment\n                                                   'background-color':'#FCF951FF',      # Background color\n                                                   'border-style': 'double',       # boarder type\n                                                   'display':'inline-block',       #inline means in one line\n                                                   'width':'100%'\n                                                    })),\n        graphs.append(dcc.Graph(id='firstgraph01',figure=fig,style={'width':'20%','display':'inline-block'})),\n        graphs.append(dcc.Graph(id='firstgraph02',figure=fig1,style={'width':'20%','display':'inline-block'})),\n        graphs.append(dcc.Graph(id='firstgraph03',figure=fig2,style={'width':'20%','display':'inline-block'})),\n        graphs.append(dcc.Graph(id='firstgraph04',figure=fig3,style={'width':'20%','display':'inline-block'})),\n        graphs.append(dcc.Graph(id='firstgraph05',figure=fig4,style={'width':'20%','display':'inline-block'})\n                \n        ),\n        \n   #################################\n ################################################################   \n\n    if 'Income' in selected_values:\n        graphs.append(html.H1('INCOME CLASSIFICATION',style={'color':'#422057FF',        #text color Sky Blue       #all should be as string\n                                                   'text-align':'center',          # Text Allignment\n                                                   'background-color':'#FCF951FF',      # Background color\n                                                   'border-style': 'double',       # boarder type\n                                                   'display':'inline-block',       #inline means in one line\n                                                   'width':'100%'\n                                                    })),\n        graphs.append(dcc.Graph(id='firstgraph07',figure=fig6,style={'width':'100%','display':'inline-block'})),\n        graphs.append(dcc.Graph(id='firstgraph08',figure=fig7,style={'width':'100%','display':'inline-block'})),\n        graphs.append(dcc.Graph(id='firstgraph09',figure=fig8,style={'width':'100%','display':'inline-block'})),\n        graphs.append(dcc.Graph(id='firstgraph10',figure=fig9,style={'width':'100%','display':'inline-block'})),\n        \n   ################################\n    if 'Multivariate Analysis' in selected_values:\n        graphs.append(html.H1('YEAR-WISE-PARAMETER-ESTIMATE',style={'color':'#422057FF',        #text color        #all should be as string\n                                                   'text-align':'center',          # Text Allignment\n                                                   'background-color':'#FCF951FF',      # Background color\n                                                   'border-style': 'double',       # boarder type\n                                                   'display':'inline-block',       #inline means in one line\n                                                   'width':'100%'\n                                                    })),\n        graphs.append(dcc.Graph(id='firstgraph11',figure=fig10,style={'width':'100%','display':'inline-block'})\n               \n        ),\n        \n    \n        \n   #################################\n ################################################################   \n\n    if 'Highest Country Percentage' in selected_values:\n        graphs.append(html.H1('TOP 5 COUNTRIES PARAMETER ESTIMATE',style={'color':'#422057FF',        #text color        #all should be as string\n                                                   'text-align':'center',          # Text Allignment\n                                                   'background-color':'#FCF951FF',      # Background color\n                                                   'border-style': 'double',       # boarder type\n                                                   'display':'inline-block',       #inline means in one line\n                                                   'width':'100%'\n                                                    })),\n        graphs.append(dcc.Graph(id='firstgraph12',figure=fig11,style={'width':'100%','display':'inline-block'})),\n        graphs.append(dcc.Graph(id='firstgraph13',figure=fig12,style={'width':'100%','display':'inline-block'})),\n        graphs.append(dcc.Graph(id='firstgraph14',figure=fig13,style={'width':'100%','display':'inline-block'})),\n        graphs.append(dcc.Graph(id='firstgraph15',figure=fig14,style={'width':'100%','display':'inline-block'})),\n        graphs.append(dcc.Graph(id='firstgraph16',figure=fig15,style={'width':'100%','display':'inline-block'})\n                \n        ),\n   #################################\n    return graphs\n    \nif __name__ == '__main__':\n    app.run_server()#debug=False\n\n","d9c3ef4a":"# Which country shows highest Underweight percentage?","f594439b":"**Observation**: \n    \n    On an average there is more Stunting % and Underweight% across all Incomes which is alarming situation over health status","2a89daf6":"**Observation**:\n    \nThis dataset consists of High count in Lower-Middle-Income across all other Income classes","e425640a":"# Which country shows highest Overweight percentage?\u00b6","abfb7e54":"--------More Countries are classified as Lower Middle Income on basis of GDP, GNP-----------","237ed9cc":"# Which country shows highest Stunting percentage?","82f1dac1":"**Observation**:\n\n1)Stunting% and Underweight% are in Linear Relation, they are said to be correlated\n\n2)Wasting and Underweight % are in Linear Relation , they are said to be correlated","588a43ec":"**Observation**:\n\n           South-Sudan has a  high Severe-Wasting % of 24.1%, respectively Burkina Faso 22.6%, Mali 18.3%,Djibouti 17.9% , Maldives 17.2% . Observations from other parameters may provide a clear overview \n    ","48b4fa47":"# Which country shows highest Severe Wasting percentage?","47d7c81d":"# <h1><center>Thank You<\/center><\/h1>   ","28a7773a":"**Observation**:\n    \nThis dataset consists of High count in Lower-Middle-Income across all other Income classes","be8b3555":"# Which country shows highest  Wasting percentage?","f007acaf":"**Observation**:\n    \n    Low-Income , Lower-Middle-Income are Low Income food Deficient Category , wheras Upper-Middle and High Income are NLIFD.\n    Most number of Countries are LIFD and lie in low, low middle Category","c3fe4348":"**Observation**:\n\n     Strangely South-sudan and Burkina- Faso continues to be in top-5 highest percentag of Wasting with 20.4%  and 20.2% respectively with Niger 21% as maximum","79105511":"# Malnutrition\n\nMalnutrition is a condition that results from eating a diet in which one or more nutrients are either not enough or are too much such that the diet causes health problems.\n\n- Wasting : Also known as 'acute malnutrition', wasting is characterised by a rapid deterioration in nutritional status over a short period of time in children under five years of age. Wasted children are at higher risk of dying.\n- Stunting is the impaired growth and development that children experience from poor nutrition, repeated infection, and inadequate psychosocial stimulation. Children are defined as stunted if their height-for-age is more than two standard deviations below the WHO Child Growth Standards median.\n\nThe data available\n\n* Severe Wasting - % of children aged 0\u201359 months who are below minus three standard deviations from median weight-for-height. \n* Wasting \u2013 Moderate and severe: % of children aged 0\u201359 months who are below minus two standard deviations from median weight-for-height\n* Overweight \u2013 Moderate and severe: % aged 0-59 months who are above two standard deviations from median weight-for-height\n* Stunting \u2013 Moderate and severe: % of children aged 0\u201359 months who are below minus two standard deviations from median height-for-age\n* Underweight \u2013 Moderate and severe: % of children aged 0\u201359 months who are below minus two standard deviations from median weight-for-age\n* Income Classification - When it comes to income , the World Bank divides the world's economies into four income groups: high, upper-middle, lower-middle, and low. The income classification is based on a measure of national income per person, or GNI per capita, calculated using the Atlas method","8d0981a7":"# Income Classififcation","1b04c37d":"**Observation**:\n\nBangladesh continues to be on charts with Underweight % on average 24.3% , with India,Korea ,Nepal,Korea , Timor-Leste following on.Intrestingly these countries are prone to malnutrition which will be shown in the obsevations discussed below.","ef40a6b8":"\n**Observation**:\n    \n    Low-Income , Lower-Middle-Income are Least developed Countries Category , wheras Upper-Middle and High Income are Developing Countries which are not no LDC\n    ","844cf236":"**Modules**: \n    \nNumpy, Pandas {data analysis}, matplotlib,Seaborn  :{ Basic-Plotting,Themes},Plotly:{Visual-Plotting},\ncufflinks:{Reading pandas data to plotly and required themes}.\n","a3b1c5ce":"**Observation**:\n\nAlbania has the highest overweight% 22.4 on an average with other countries like Libya , Ukraine ,Bosnia , Montenegro . Intrestingly most of them are from Upper-Middle-Income.","d11dc30e":"##Below code for Jupyter Dashboard----->","954dd03c":"**Observation**:\n    \n    1) Other Countries Lie in most of The income levels.Lower-Middle-Incomes has highest % of other countries apart Other   Incomes.\n    2) Intrestingly Other Countries are part of Upper-Middle-Income.\n    3) SIDS are lowest percentage of category across all countries.\n    4) Low-Income has more proportion of LLDC and same exsists for Lowe-Middle-Income","70bbf790":"**Final Observation**: \n\n1) South-Sudan , Burkina Faso , Djibouti , Bangladesh , India , Nepal are frequently seen over the pie plots above and secondly,    all are a subset of both low, lower-middle-Income. \n\n2) On a final Note  [ Income is directly proportional to Reducing Malnutrition parameter Effect ]\n\n\n3) Asia and Africa are two continents prone to High Malnutrition-Estimate","e3c805d4":"# Country Wise-Data","14e643b8":"# Multivariate Analysis\n---->Multivariate analysis is a set of statistical techniques used for analysis of data that contain more imputs to get one output. ","fce4d9fc":"--->Gives the description of numerical variables across the attributes \n\nObservations:\n\nCount : Total number of values present in respective columns. \nMean: Mean of all the values present in the respective columns.\nStd: Standard Deviation of the values present in the respective columns.\nMin: The minimum value in the column.\n25%: Gives the 25th percentile value. \n50%: Gives the 50th percentile value. \n75%: Gives the 75th percentile value.\nMax: The maximum value in the column.\n\nNOTE:\n\nThe percentile usually indicates that a certain percentage falls below that percentile. For example, if you score in the 25th percentile, then 25% of test takers are below your score. The \u201c25\u201d is called the percentile rank.\n"}}