{"cell_type":{"29d9589d":"code","ba572647":"code","fb6f92ad":"code","49d43f6b":"code","a4bd38ae":"code","43c6ae0c":"code","2b4157ec":"markdown","39269dd2":"markdown","0f39a882":"markdown","ba2c5102":"markdown","709f6be7":"markdown"},"source":{"29d9589d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ba572647":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('\/kaggle\/input\/small-egg-count\/30.jpg')\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\nh, s, v = cv2.split(gray)\nplt.imshow(v, 'gray')\nplt.show()","fb6f92ad":"blur = cv2.GaussianBlur(v, (3,3), 0)\nplt.imshow(v, 'gray')\nplt.show()","49d43f6b":"ret, th = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)\n\nplt.subplot(1, 3, 1), plt.imshow(blur, 'gray')\nplt.title('Gaussian filtered image'), plt.xticks([]), plt.yticks([])\n\nplt.subplot(1,3,2), plt.hist(blur.ravel(), 256)\nplt.title('Histogram'), plt.xticks([]), plt.yticks([])\nplt.subplot(1,3,3),plt.imshow(th,'gray')\nplt.title('Otsu Thresholding'), plt.xticks([]), plt.yticks([])\nplt.show()\n \ncv2.imwrite('otsuThesholding.jpg', th)","a4bd38ae":"sobel = cv2.Sobel(th, cv2.CV_8UC1, 1, 1, ksize=5)\n\nplt.subplot(1, 1, 1), plt.imshow(sobel, cmap='gray')\nplt.title('sobel Edge detection'), plt.xticks([]), plt.yticks([])\nplt.show()\n\ncv2.imwrite('sobel.jpg', sobel)","43c6ae0c":"gray_img = cv2.imread('sobel.jpg', 0)\ncimg = cv2.cvtColor(sobel,cv2.COLOR_GRAY2BGR)\ncircles = cv2.HoughCircles(gray_img,cv2.HOUGH_GRADIENT,1,20,\n                            param1=45,param2=32,minRadius=0,maxRadius=0)\n \ncircles = np.uint16(np.around(circles))\n \nfor i in circles[0,:]:\n    cv2.circle(cimg,(i[0],i[1]),i[2],(0,255,0),2)\n    cv2.circle(cimg,(i[0],i[1]),2,(0,0,255),3)\n \nplt.subplot(122),plt.imshow(cimg)\nplt.title('Hough Transform'), plt.xticks([]), plt.yticks([])\nplt.show()\n \ncv2.imwrite('houghCircle.jpg', cimg)","2b4157ec":"# Ph\u00e1t hi\u1ec7n \u0111\u01b0\u1eddng vi\u1ec1n b\u1eb1ng sobel","39269dd2":"# \u00c1p d\u1ee5ng ng\u01b0\u1ee1ng Otsu","0f39a882":"# bi\u1ebfn \u0111\u1ed5i Hough \u0111\u1ec3 ph\u00e1t hi\u1ec7n h\u00ecnh tr\u00f2n","ba2c5102":"# Lo\u1ea1i b\u1ecf nhi\u1ec5u b\u1eb1ng m\u1eb7t n\u1ea1 gaussian","709f6be7":"# T\u00e1ch \u0111\u1ed9 s\u00e1ng t\u1ed1i t\u1eeb \u1ea3nh"}}