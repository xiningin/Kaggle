{"cell_type":{"8212aefb":"code","883d7ef6":"code","39c93076":"code","d18172e6":"code","2ec217cc":"code","4803fb6c":"code","85aea31b":"code","5b3199f3":"code","a59b5bfb":"code","b4fe0063":"code","b175660e":"code","10c14f40":"markdown","5f2f1faa":"markdown","dff4ae57":"markdown","fdf97869":"markdown","5fe6fef4":"markdown","6078f768":"markdown"},"source":{"8212aefb":"import gresearch_crypto\nimport pandas as pd\nimport numpy as np\nimport lightgbm as lgb\nfrom sklearn.linear_model import Ridge\nfrom sklearn.preprocessing import RobustScaler\nfrom scipy.stats import pearsonr","883d7ef6":"class CFG:\n    nof_trees = 100","39c93076":"def process_data(df):\n    \n    \n    col_subset = ['High', 'Low', 'Close', 'Open', 'Count', 'Volume']\n    \n#     dfa = pd.get_dummies(df['Asset_ID'])\n#     dfa.columns = ['asset' + str(f) for f in range(dfa.shape[1])]    \n#     df = pd.concat([df[col_subset], dfa], axis = 1 )\n\n#     df['Upper_Shadow'] = df['High'] - np.maximum(df['Close'], df['Open'])\n#     df['Lower_Shadow'] = np.minimum(df['Close'], df['Open']) - df['Low']\n    \n#     # returns across different combinations\n    df['hl_ret'] = (df['High']\/df['Low'] - 1)\n#     df['hc_ret'] = (df['High']\/df['Close'] - 1)\n#     df['ho_ret'] = (df['High']\/df['Open'] - 1)    \n#     df['lh_ret'] = (df['Low']\/df['High'] - 1)\n#     df['lc_ret'] = (df['Low']\/df['Close'] - 1)\n#     df['lo_ret'] = (df['Low']\/df['Open'] - 1)\n#     df['ch_ret'] = (df['Close']\/df['High'] - 1)\n#     df['cl_ret'] = (df['Close']\/df['Low'] - 1)\n#     df['co_ret'] = (df['Close']\/df['Open'] - 1)\n#     df['oh_ret'] = (df['Open']\/df['High'] - 1)\n#     df['ol_ret'] = (df['Open']\/df['Low'] - 1)\n    df['oc_ret'] = (df['Open']\/df['Close'] - 1)\n    \n    # volume\n    df['Volume'] = df['Volume']\/10**6\n    \n#     # VWAP\n#     df['VWAP'] = df['VWAP'].replace(-np.inf, 0)\n#     df['VWAP'] = df['VWAP'].replace(np.inf, 0)    \n#     df['VWAP'] = df['VWAP'].fillna(0)\n#     df['VWAP'] = df['VWAP']\/10**4\n    \n    return df","d18172e6":"df_train = pd.read_csv('..\/input\/g-research-crypto-forecasting\/train.csv')\n\n# xte = pd.read_csv('..\/input\/g-research-crypto-forecasting\/example_test.csv')\n","2ec217cc":"feature_cols = ['Asset_ID', 'Close', 'Count', 'High', 'Low', 'Open', 'VWAP',\n       'Volume', 'timestamp']","4803fb6c":"df_train.dropna(axis = 0, inplace = True)","85aea31b":"ytrain = df_train['Target'].copy()\nxtrain = df_train.copy()\n\ndel df_train","5b3199f3":"train_size = int(0.9 * xtrain.shape[0])\nx0, y0 = xtrain.iloc[:train_size],ytrain.iloc[:train_size]\nx1, y1 = xtrain.iloc[train_size:],ytrain.iloc[train_size:]\n\n\nx0 = process_data(x0)\nx1 = process_data(x1)\n\ndel xtrain, ytrain","a59b5bfb":"rs = RobustScaler()\nrs.fit(x0)\n\nx0 = rs.transform(x0)\nx1 = rs.transform(x1)","b4fe0063":"model = Ridge()\n\nmodel.fit(x0,y0)\n\npred = model.predict(x1)\n\n\nprint(np.corrcoef(y1,pred))\n\n# 0.0068182","b175660e":"\n# env = gresearch_crypto.make_env()\n# iter_test = env.iter_test()\n# for (test_df, sample_prediction_df) in iter_test:\n#     xte = process_data(test_df)\n#     sample_prediction_df['Target'] = model.predict(xte)\n#     env.predict(sample_prediction_df)","10c14f40":"## Ridge","5f2f1faa":"# Functions","dff4ae57":"# Model\n\nTODO: fit model per asset","fdf97869":"# Data","5fe6fef4":"# Submission\n\nTODO:\n* prediction per asset","6078f768":"This notebook provides the absolute minimum code necessary for making a submission and is meant for copying into your own pipeline. If you're looking for a more detailed explanation of how the API works, take a look at [this notebook instead](https:\/\/www.kaggle.com\/sohier\/detailed-api-introduction)."}}