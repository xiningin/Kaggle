{"cell_type":{"8f24784e":"code","c701d5d7":"code","0595b150":"code","4abb642a":"code","dcd577e5":"markdown","be3ab9da":"markdown","e8b9851e":"markdown","b9bf1850":"markdown","5225178e":"markdown","50a97408":"markdown"},"source":{"8f24784e":"import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.python import keras\n\nimg_rows, img_cols = 28, 28\nnum_classes = 10\n\ndef prep_data(raw, train_size, val_size):\n    y = raw[:, 0]\n    out_y = keras.utils.to_categorical(y, num_classes)\n    \n    x = raw[:,1:]\n    num_images = raw.shape[0]\n    out_x = x.reshape(num_images, img_rows, img_cols, 1)\n    out_x = out_x \/ 255\n    return out_x, out_y\n\nfashion_file = \"..\/input\/fashionmnist\/fashion-mnist_train.csv\"\nfashion_data = np.loadtxt(fashion_file, skiprows=1, delimiter=',')\nx, y = prep_data(fashion_data, train_size=50000, val_size=5000)","c701d5d7":"from tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, Conv2D, Dropout\n\nfashion_model_1 = Sequential()\nfashion_model_1 = Sequential()\nfashion_model_1.add(Conv2D(12, kernel_size=(3, 3), strides=2,     #Stride lengths to make your model faster and reduce memory consumption\n                 activation='relu',\n                 input_shape=(img_rows, img_cols, 1)))\nfashion_model_1.add(Conv2D(12, (3, 3), strides=2, activation='relu'))\nfashion_model_1.add(Flatten())\nfashion_model_1.add(Dense(128, activation='relu'))\nfashion_model_1.add(Dense(num_classes, activation='softmax'))\n\nfashion_model_1.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer='adam',\n              metrics=['accuracy'])\n\nfashion_model_1.fit(x, y,\n          batch_size=128,\n          epochs=2,\n          validation_split = 0.2)","0595b150":"# Your code for fashion_model_2 below\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, Conv2D, Dropout\n\nfashion_model_2 = Sequential()\nfashion_model_2 = Sequential()\nfashion_model_2.add(Conv2D(24, kernel_size=(3, 3), strides=2,     #Stride lengths to make your model faster and reduce memory consumption\n                 activation='relu',\n                 input_shape=(img_rows, img_cols, 1)))\nfashion_model_2.add(Conv2D(24, (3, 3), strides=2, activation='relu'))\nfashion_model_2.add(Conv2D(24, (3, 3), activation='relu'))\nfashion_model_2.add(Flatten())\nfashion_model_2.add(Dense(128, activation='relu'))\nfashion_model_2.add(Dense(num_classes, activation='softmax'))\n\nfashion_model_2.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer='adam',\n              metrics=['accuracy'])\n\nfashion_model_2.fit(x, y,\n          batch_size=128,\n          epochs=2,\n          validation_split = 0.2)","4abb642a":"# Your code for fashion_model_3 below\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, Conv2D, Dropout\n\nfashion_model_3 = Sequential()\nfashion_model_3 = Sequential()\nfashion_model_3.add(Conv2D(24, kernel_size=(3, 3), strides=2,     #Stride lengths to make your model faster and reduce memory consumption\n                 activation='relu',\n                 input_shape=(img_rows, img_cols, 1)))\nfashion_model_3.add(Dropout(0.5)) #Dropout to combat overfitting\nfashion_model_3.add(Conv2D(24, (3, 3), strides=2, activation='relu'))\nfashion_model_3.add(Dropout(0.5))  \nfashion_model_3.add(Conv2D(24, (3, 3), activation='relu'))\nfashion_model_3.add(Dropout(0.5))\nfashion_model_3.add(Flatten())\nfashion_model_3.add(Dense(128, activation='relu'))\nfashion_model_3.add(Dense(num_classes, activation='softmax'))\n\nfashion_model_3.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer='adam',\n              metrics=['accuracy'])\n\nfashion_model_3.fit(x, y,\n          batch_size=128,\n          epochs=2,\n          validation_split = 0.2)","dcd577e5":"# Make Model Larger\nYou should have noticed that `fashion_model_1` trained pretty quickly.  This makes it reasonable to make the model larger. Specify a new model called `fashion_model_2` that is identical to fashion_model_1, except:\n1. Add an additional `Conv2D` layer immediately before the Flatten layer. Make it similar to the Conv2D layers you already have, except don't set the stride length in this new layer (we have already shrunk the representation enough with the existing layers)..\n2. Change the number of filters in each convolutional layer to 24.\n\nAfter specifying `fashion_model_2`, compile and fit it","be3ab9da":"# Add Dropout\nSpecify `fashion_model_3`, which is identical to `fashion_model_2` except that it adds dropout immediately after each convolutional layer (so it adds dropout 3 times). Compile and fit this model.  Compare the model's performance on validation data to the previous models.\n","e8b9851e":"# Adding Strides\nSpecify, compile and fit a model much like the model above, but specify a stride length of 2 for each convolutional layer.  Call your new model `fashion_model_1`","b9bf1850":"# Congrats\nYou've finished level 1 of the deep learning track.  You have the tools to create and tune computer vision models.  Pick a project and try out your skills.  \n\nA few fun datasets you might try include:\n- [Written letter recognition](https:\/\/www.kaggle.com\/olgabelitskaya\/classification-of-handwritten-letters)\n- [Flower Identification](https:\/\/www.kaggle.com\/alxmamaev\/flowers-recognition)\n- [Cats vs Dogs](https:\/\/www.kaggle.com\/c\/dogs-vs-cats-redux-kernels-edition)\n- [10 Monkeys](https:\/\/www.kaggle.com\/slothkong\/10-monkey-species)\n- [Predict Bone Age from X-Rays](https:\/\/www.kaggle.com\/kmader\/rsna-bone-age)\n\nYou have learned a lot. There is still a lot more to learn in deep learning, but you should feel great about your new skills.\n","5225178e":"## Sample Model Code\n\n```\nfashion_model = Sequential()\nfashion_model.add(Conv2D(12, kernel_size=(3, 3), strides=2,     #Stride lengths to make your model faster and reduce memory consumption\n                 activation='relu',\n                 input_shape=(img_rows, img_cols, 1)))\nfashion_model.add(Conv2D(12, (3, 3), strides=2, activation='relu'))\nfashion_model.add(Flatten())\nfashion_model.add(Dense(128, activation='relu'))\nfashion_model.add(Dense(num_classes, activation='softmax'))\n\nfashion_model.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer='adam',\n              metrics=['accuracy'])\n\nfashion_model.fit(train_x, train_y,\n          batch_size=batch_size,\n          epochs=epochs,\n          validation_split = 0.2)\n```","50a97408":"# Introduction\n\nYou've built a model to identify clothing types in the **MNIST for Fashion** dataset.  Now you will make your model bigger, specify larger stride lengths and apply dropout. These changes will make your model faster and more accurate.\n\nThis is the last step in the **[Deep Learning Track](https:\/\/www.kaggle.com\/learn\/deep-learning)**.\n\n# Starter Code\n\n## Data Preparation\n**You need to run this cell of code.**\n"}}