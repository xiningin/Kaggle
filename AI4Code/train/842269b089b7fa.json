{"cell_type":{"0127fda6":"code","0d7407c8":"code","f095da5b":"code","e29299e0":"code","ef37acfa":"code","246cbede":"code","36353935":"code","7ff2f7dc":"code","ce689a02":"code","9f151480":"code","5179df96":"code","caed70e6":"code","601c1ebc":"code","5a3b2e37":"code","2062cec8":"code","a2b3851b":"code","361e780e":"code","c23ee031":"code","5c87005e":"code","f64c3aa0":"code","505713a4":"code","0e5ae968":"code","1047eb65":"code","de39ccfc":"code","04695d08":"code","f9affaf0":"code","7dffc978":"code","31f3ed21":"code","437c249a":"code","12628417":"code","9ec5a718":"code","db8e9544":"code","cec8b33f":"code","9c336116":"code","7272d678":"code","0557122a":"code","da5d0bf0":"code","1f8799f5":"code","fbe89306":"code","d67cbcbc":"code","bfe3824b":"code","224b8b63":"code","0ad08f33":"code","05b07c21":"code","01d15386":"code","94b4d419":"code","60f2ca1d":"code","c6236d47":"code","bf25e2b1":"code","47f4ab83":"code","7825fb9e":"code","cf8e2889":"code","c81d0bce":"code","a3ebfb66":"code","0a89aa02":"code","a812989d":"code","5415bff7":"code","abf2c08f":"code","2c782f50":"code","d05f4df1":"code","87be6de3":"code","bb8086a0":"code","04a19207":"code","38fb367b":"code","45d84974":"code","d0cda6ae":"code","27916ff4":"code","6c7e34a5":"code","c5f528db":"code","c607a25c":"code","cbdbc391":"code","a3c510a1":"code","ea7dc44c":"code","37bb0774":"code","4d2e8f55":"code","7d6a5fa9":"code","5974eb34":"code","c8dd4379":"code","f4f4b2bb":"code","40ddf3e7":"code","cf77ccdd":"code","27934c09":"code","0c25637d":"code","8ea16e85":"code","25fa6131":"code","bab5482d":"code","9df07fa4":"code","1671cd01":"code","5529a74c":"code","81199bd9":"code","cf7e67d4":"code","972d98a2":"code","d200ee72":"code","fb571b4f":"code","960f16ad":"code","c89405e0":"code","c8cd56f7":"code","862e1da6":"code","f2c2a96f":"code","f4133786":"code","f562be59":"code","99ed4532":"code","02bda74d":"code","b193b1a8":"code","6775cf10":"code","cc1e7ce0":"code","1b5148fb":"code","8e4d51aa":"code","3b9120bf":"code","b6c302e6":"code","018760a3":"code","a1cf83fc":"code","7918bef4":"code","5103e178":"code","b2955ff2":"code","354e7c47":"code","b9c4a4bd":"code","b4c68ec6":"code","6ee1c6ec":"code","7d3c7cb8":"code","4b8d5604":"code","7cdf4edb":"code","617e54ef":"code","ecc3093a":"code","b9fb2cc7":"code","76d4bb8e":"markdown","04ae288f":"markdown","b0264d9d":"markdown","bb43b248":"markdown","0b4f57b6":"markdown","d5ee82fd":"markdown","319f80f7":"markdown","447b0821":"markdown","1abd95de":"markdown","c0834c99":"markdown","06933f74":"markdown","7db25696":"markdown","ab8f32c3":"markdown","b6095900":"markdown","c3802675":"markdown","dc5a611e":"markdown","0fbea769":"markdown","a7bf991a":"markdown","af120549":"markdown","00ec61c2":"markdown","8847a8ca":"markdown","8594a659":"markdown","78070fe9":"markdown","6c0c5d6a":"markdown","ae298d30":"markdown","6a97206d":"markdown","18335e42":"markdown","b9198f59":"markdown","ba72780c":"markdown","5fcdbea9":"markdown","a05b5a1c":"markdown","d2dba3c8":"markdown","a7bb6cce":"markdown","855bfb1a":"markdown","7865efc3":"markdown","90cd44f9":"markdown","6d110e1f":"markdown","6be630b0":"markdown","14b8c4a6":"markdown","06c3338f":"markdown","ea668539":"markdown","ca0ba29d":"markdown","c9f5ba47":"markdown","67fe64e7":"markdown","a9cae6f0":"markdown","e2a24ea0":"markdown","4ed672f6":"markdown","5a9da968":"markdown","a5ad4df1":"markdown","f1b271a6":"markdown","1aa7d91c":"markdown","24acf1a2":"markdown","7d9f0499":"markdown","71e6aed0":"markdown","0b6846b6":"markdown","35cf0bbb":"markdown","253a4911":"markdown"},"source":{"0127fda6":"!pip install nltk\n!pip install spacy\n!python -m spacy download en\n!pip install scipy\n!pip install -U scikit-learn\n!pip install seaborn\n!pip install tensorflow\n!pip install tf-nightly","0d7407c8":"import pandas as pd\nimport numpy as np\nfrom numpy import array,asarray,zeros\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom bs4 import BeautifulSoup\nimport re\nimport nltk\nnltk.download('stopwords')\nnltk.download('wordnet')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import LinearSVC\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.metrics import classification_report,confusion_matrix, accuracy_score\nfrom sklearn import metrics\nfrom sklearn.feature_selection import SelectKBest, chi2\nfrom sklearn.naive_bayes import MultinomialNB\n\nfrom keras.utils.np_utils import to_categorical \nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras import Sequential\nfrom keras.layers import Embedding,LSTM\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Flatten\nfrom keras.layers.embeddings import Embedding\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport tensorflow as tf\ntf.random.set_seed(4)","f095da5b":"#df = pd.read_csv(\"..\/input\/imdb-dataset\/IMDB Dataset.csv\",encoding=\"ISO-8859-1\")\ndf = pd.read_csv(\"..\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv\")\ndf.head()","e29299e0":"#df.sentiment.value_counts()\n#df.describe\ndf.info()","ef37acfa":"plt.figure(figsize=(13,5))\nsns.countplot(x='sentiment',data=df)","246cbede":"plt.figure(figsize=(13,5))\ndf['len']= df['review'].str.len()\nprint('\u0110\u1ed9 d\u00e0i t\u1ed1i \u0111a:{},\u0110\u1ed9 d\u00e0i nh\u1ecf nh\u1ea5t:{}, \u0110\u1ed9 d\u00e0i trung b\u00ecnh:{}'.format(max(df['len']),min(df['len']),df['len'].mean()))\ndf['len'].hist()\nplt.xlabel('Chi\u1ec1u d\u00e0i c\u1ee7a m\u1ed9t m\u1eabu')\nplt.ylabel('S\u1ed1 l\u01b0\u1ee3ng m\u1eabu')\nplt.title('Ph\u00e2n b\u1ed1 \u0111\u1ed9 d\u00e0i m\u1eabu')\nplt.show()","36353935":"plt.figure(figsize=(13,5))\ndf ['len'] = df ['review'].str.split ().map(lambda x: len (x)) \ndf ['len'].hist ()","7ff2f7dc":"example_sentences = df['review'].loc[2]\nexample_sentences","ce689a02":"# 1. X\u00f3a content HTML\nsoup = BeautifulSoup(example_sentences, \"html.parser\")\nexample_sentences = soup.get_text()\nexample_sentences","9f151480":"# 2. S\u1eed d\u1ee5ng Bi\u1ec3u th\u1ee9c ch\u00ednh quy \u0111\u1ec3 x\u00f3a m\u1ecdi th\u1ee9\nexample_sentences = re.sub('\\[[^]]*\\]', ' ',example_sentences)\nexample_sentences = re.sub('[^a-zA-Z]', ' ',example_sentences)\nexample_sentences","5179df96":"# 3. Chuy\u1ec3n qua t\u1eeb th\u01b0\u1eddng(LowerCase)\nexample_sentences = example_sentences.lower()\nexample_sentences","caed70e6":"# 4. T\u00e1ch t\u1eeb (split)\nexample_sentences = example_sentences.split()\nexample_sentences","601c1ebc":"# 5. X\u1eed l\u00ed t\u1eeb d\u1eebng(stopword)\nexample_sentences = [word for word in example_sentences if not word in set(stopwords.words('english'))]\nexample_sentences","5a3b2e37":"# 6. Stemming\/Lemmatization\nps = PorterStemmer()\nps_example_sentences = [ps.stem(word) for word in example_sentences]\nps_example_sentences","2062cec8":"# 7. Lemmatization\/WordNetLemmatizer\nlem = WordNetLemmatizer()\nexample_sentences = [lem.lemmatize(word) for word in example_sentences]\nexample_sentences","a2b3851b":"# 8. N\u1ed1i l\u1ea1i c\u00e1c t\u1eeb(join)\nexample_sentences = ' '.join(example_sentences)\nexample_sentences","361e780e":"# Kh\u1edfi t\u1ea1o m\u1ed9t kho(imdb) \u0111\u1ec3 ch\u1ee9a d\u1eef li\u1ec7u c\u00e2u\nimdb = []\nimdb.append(example_sentences)","c23ee031":"# Vector h\u00f3a c\u00e2u b\u1eb1ng m\u00f4 h\u00ecnh t\u00fai t\u1eeb (Bag of Words)--> ch\u00fang ta s\u1ebd th\u1ea5y c\u00f3 s\u1ed1 1,2 & 3...\ndem_vecto = CountVectorizer()\nsentences_dem_vecto = dem_vecto.fit_transform(imdb)\nsentences_dem_vecto.toarray()","5c87005e":"# bi\u1ebfn \u0111\u1ed5i t\u00fai t\u1eeb th\u00e0nh 1- Vectorizer v\u1edbi Binary = True s\u1ebd l\u00e0m \u0111\u01b0\u1ee3c vi\u1ec7c \u0111\u00f3\ndem_vecto_bin = CountVectorizer(binary=True)\nsentences_dem_vecto_bin = dem_vecto_bin.fit_transform(imdb)\nsentences_dem_vecto_bin.toarray()","f64c3aa0":"tfidf_vecto = TfidfVectorizer()\nsentences_tfidf_vecto = tfidf_vecto.fit_transform(imdb)\nsentences_tfidf_vecto.toarray()","505713a4":"x_train, x_test, y_train, y_test= train_test_split(df['review'], df['sentiment'], test_size=0.25, random_state=42)\ny_train = (y_train.replace({'positive': 1, 'negative': 0})).values\ny_test  = (y_test.replace({'positive': 1, 'negative': 0})).values\nprint(y_train)\nprint(y_test)","0e5ae968":"imdb_train = []\nfor i in range(x_train.shape[0]):\n    soup = BeautifulSoup(x_train.iloc[i], \"html.parser\")\n    review = soup.get_text()\n    review = re.sub('\\[[^]]*\\]', ' ', review)\n    review = re.sub('[^a-zA-Z]', ' ', review)\n    review = review.lower()\n    review = review.split()\n    review = [word for word in review if not word in set(stopwords.words('english'))]\n    lem = WordNetLemmatizer()\n    review = [lem.lemmatize(word) for word in review]\n    review = ' '.join(review)\n    imdb_train.append(review)","1047eb65":"imdb_test  = []\nfor j in range(x_test.shape[0]):\n    soup = BeautifulSoup(x_test.iloc[j], \"html.parser\")\n    review = soup.get_text()\n    review = re.sub('\\[[^]]*\\]', ' ', review)\n    review = re.sub('[^a-zA-Z]', ' ', review)\n    review = review.lower()\n    review = review.split()\n    review = [word for word in review if not word in set(stopwords.words('english'))]\n    lem = WordNetLemmatizer()\n    review = [lem.lemmatize(word) for word in review]\n    review = ' '.join(review)\n    imdb_test.append(review)","de39ccfc":"imdb_train[-1]","04695d08":"imdb_test[-1]","f9affaf0":"# Vect\u01a1 h\u00f3a b\u1eb1ng k\u1ef9 thu\u1eadt TF-IDF - Ph\u1ea7n n\u00e0y s\u1eed d\u1ee5ng chung cho m\u00f4 h\u00ecnh\ntfidf_vecto = TfidfVectorizer(ngram_range=(1, 3))\ntfidf_vecto_train = tfidf_vecto.fit_transform(imdb_train)\ntfidf_vecto_test = tfidf_vecto.transform(imdb_test)","7dffc978":"LSVC = LinearSVC(C=0.5, random_state=42)\nLSVC.fit(tfidf_vecto_train, y_train)\ndu_doan = LSVC.predict(tfidf_vecto_test)","31f3ed21":"from sklearn.metrics import classification_report,confusion_matrix, accuracy_score\nfrom sklearn import metrics\nprint(\"Classification report of Linear SVC: \\n\",classification_report(y_test,du_doan, target_names = ['Positive','Negative']))\nprint(\"Confusion Matrix of Linear SVC: \\n\",confusion_matrix(y_test,du_doan))\ndochinhxac = metrics.accuracy_score(y_test,du_doan)\nprint(\"\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng TF-IDF fit v\u1edbi m\u00f4 h\u00ecnh Linear SVC: \" +str('{:04.2f}'.format(dochinhxac *100)) + \"%\")","437c249a":"plt.figure(figsize=(8,5))\nplt.title(\"\u0110\u1ed9 Ch\u00ednh X\u00e1c \" +str('{:04.2f}'.format(dochinhxac *100)) + \"%\")\nplt.xlabel(\"Actual label\")\nplt.ylabel(\"Predicted label\")\nsns.heatmap(confusion_matrix(y_test,du_doan),annot=True,fmt='d',linewidths=.5, square = True,cmap=\"PiYG\")\nplt.show()","12628417":"dem_vecto = CountVectorizer(ngram_range=(1,3), binary=False)\nfalse_dem_vecto_train = dem_vecto.fit_transform(imdb_train)\nfalse_dem_vecto_test = dem_vecto.transform(imdb_test)","9ec5a718":"false_dem_LSVC = LinearSVC(C=0.5, random_state=42, max_iter=5000)\nfalse_dem_LSVC.fit(false_dem_vecto_train,y_train)\nfalse_dem_du_doan_LSVC = false_dem_LSVC.predict(false_dem_vecto_test)","db8e9544":"print(\"K\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = False) v\u00e0 fit v\u1edbi m\u00f4 h\u00ecnh LinearSVC\\n\")\nprint(\"Classification report of Linear SVC (binary = False): \\n\",classification_report(y_test,false_dem_du_doan_LSVC, target_names = ['Positive','Negative']))\nprint(\"Confusion Matrix of Linear SVC (binary = False): \\n\",confusion_matrix(y_test,false_dem_du_doan_LSVC))\naccuracy_score_false_lsvc = metrics.accuracy_score(y_test,false_dem_du_doan_LSVC)\nprint(\"\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = False) fit v\u1edbi m\u00f4 h\u00ecnh Linear SVC:\" +str('{:04.2f}'.format(accuracy_score_false_lsvc *100)) + \"%\")","cec8b33f":"plt.figure(figsize=(8,5))\nplt.title(\"\u0110\u1ed9 Ch\u00ednh X\u00e1c \" +str('{:04.2f}'.format(accuracy_score_false_lsvc *100)) + \"%\")\nplt.xlabel(\"Actual label\")\nplt.ylabel(\"Predicted label\")\nsns.heatmap(confusion_matrix(y_test,false_dem_du_doan_LSVC),annot=True,fmt='d',linewidths=.5, square = True,cmap=\"PiYG\")\nplt.show()","9c336116":"true_dem_vecto = CountVectorizer(ngram_range=(1,3), binary=True)\ntrue_dem_vecto_train = true_dem_vecto.fit_transform(imdb_train)\ntrue_dem_vecto_test = true_dem_vecto.transform(imdb_test)","7272d678":"true_dem_LSVC = LinearSVC(C=0.5, random_state=42,max_iter=5000)\ntrue_dem_LSVC.fit(true_dem_vecto_train,y_train)\ntrue_dem_du_doan_LSVC = true_dem_LSVC.predict(true_dem_vecto_test)","0557122a":"print(\"K\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) v\u00e0 fit v\u1edbi m\u00f4 h\u00ecnh LinearSVC\\n\")\nprint(\"Classification report of Linear SVC binary = True: \\n\",classification_report(y_test,true_dem_du_doan_LSVC, target_names = ['Positive','Negative']))\nprint(\"Confusion Matrix of Linear SVC binary = True: \\n\",confusion_matrix(y_test,true_dem_du_doan_LSVC))\naccuracy_score_true_LSVC = metrics.accuracy_score(y_test,true_dem_du_doan_LSVC)\nprint(\"\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) fit v\u1edbi m\u00f4 h\u00ecnh Linear SVC: \" +str('{:04.2f}'.format(accuracy_score_true_LSVC *100)) + \"%\")","da5d0bf0":"plt.figure(figsize=(8,5))\nplt.title(\"\u0110\u1ed9 Ch\u00ednh X\u00e1c \" +str('{:04.2f}'.format(accuracy_score_true_LSVC *100)) + \"%\")\nplt.xlabel(\"Actual label\")\nplt.ylabel(\"Predicted label\")\nsns.heatmap(confusion_matrix(y_test,true_dem_du_doan_LSVC),annot=True,fmt='d',linewidths=.5, square = True,cmap=\"PiYG\")\nplt.show()","1f8799f5":"tfidf_vecto_bayes = TfidfVectorizer(ngram_range=(1, 1))\ntfidf_vecto_bayes_train = tfidf_vecto_bayes.fit_transform(imdb_train)\ntfidf_vecto_bayes_test = tfidf_vecto_bayes.transform(imdb_test)\nprint(tfidf_vecto_bayes_train.toarray().shape,tfidf_vecto_bayes_test.toarray().shape)","fbe89306":"from sklearn.feature_selection import SelectKBest, chi2\nchichi = SelectKBest(chi2, k=50000)\ntfidf_vecto_bayes_train = chichi.fit_transform(tfidf_vecto_bayes_train,y_train)\ntfidf_vecto_bayes_test = chichi.transform(tfidf_vecto_bayes_test)","d67cbcbc":"feat_names = tfidf_vecto_bayes.get_feature_names()\nfeat_names = [feat_names[i] for i in chichi.get_support(indices=True)]\nfeat_names = np.asarray(feat_names)\nfeat_names[32245]","bfe3824b":"clf_MNB = MultinomialNB()\nclf_MNB.fit(tfidf_vecto_bayes_train,y_train)\ndu_doan_MNB = clf_MNB.predict(tfidf_vecto_bayes_test)","224b8b63":"print(\"K\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng TF-IDF fit v\u1edbi m\u00f4 h\u00ecnh Multinomial Naive Bayes\\n\")\nprint(\"Classification report of Multinomial Naive Bayes: \\n\",classification_report(y_test,du_doan_MNB, target_names = ['Positive','Negative']))\nprint(\"Confusion Matrix of Multinomial Naive Bayes: \\n\",confusion_matrix(y_test,du_doan_MNB))\naccuracy_score_MNB = metrics.accuracy_score(y_test,du_doan_MNB)\nprint(\"\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng TF-IDF fit v\u1edbi m\u00f4 h\u00ecnh Multinomial Naive Bayes: \" +str('{:04.2f}'.format(accuracy_score_MNB *100)) + \"%\")","0ad08f33":"plt.figure(figsize=(8,5))\nplt.title(\"\u0110\u1ed9 Ch\u00ednh X\u00e1c \" +str('{:04.2f}'.format(accuracy_score_MNB *100)) + \"%\")\nplt.xlabel(\"Actual label\")\nplt.ylabel(\"Predicted label\")\nsns.heatmap(confusion_matrix(y_test,du_doan_MNB),annot=True,fmt='d',linewidths=.5, square = True,cmap=\"BuPu\")\nplt.show()","05b07c21":"vecto_MNB = CountVectorizer(ngram_range=(1, 3), binary=False)\ndem_vecto_train_MNB = vecto_MNB.fit_transform(imdb_train)\ndem_vecto_test_MNB = vecto_MNB.transform(imdb_test)","01d15386":"dem_MNB = MultinomialNB()\ndem_MNB.fit(dem_vecto_train_MNB,y_train)\ndem_du_doan_MNB = dem_MNB.predict(dem_vecto_test_MNB)","94b4d419":"print(\"K\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = False) v\u00e0 fit v\u1edbi m\u00f4 h\u00ecnh Multinomial Naive Bayes\\n\")\nprint(\"Classification report of Multinomial Naive Bayes binary = False: \\n\",classification_report(y_test,dem_du_doan_MNB, target_names = ['Positive','Negative']))\nprint(\"Confusion Matrix of Multinomial Naive Bayes binary = False: \\n\",confusion_matrix(y_test,dem_du_doan_MNB))\naccuracy_score_dem_MNB = metrics.accuracy_score(y_test,dem_du_doan_MNB)\nprint(\"\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = False) fit Multinomial Naive Bayes: \" +str('{:04.2f}'.format(accuracy_score_dem_MNB *100)) + \"%\")","60f2ca1d":"plt.figure(figsize=(8,5))\nplt.title(\"\u0110\u1ed9 Ch\u00ednh X\u00e1c \" +str('{:04.2f}'.format(accuracy_score_dem_MNB *100)) + \"%\")\nplt.xlabel(\"Actual label\")\nplt.ylabel(\"Predicted label\")\nsns.heatmap(confusion_matrix(y_test,dem_du_doan_MNB),annot=True,fmt='d',linewidths=.5, square = True,cmap=\"BuPu\")\nplt.show()","c6236d47":"true_dem_vecto_MNB = CountVectorizer(ngram_range=(1,3), binary=True)\ntrue_dem_vecto_train_MNB = true_dem_vecto_MNB.fit_transform(imdb_train)\ntrue_dem_vecto_test_MNB = true_dem_vecto_MNB.transform(imdb_test)","bf25e2b1":"true_dem_MNB = MultinomialNB()\ntrue_dem_MNB.fit(true_dem_vecto_train_MNB,y_train)\ntrue_dem_du_doan_MNB = true_dem_MNB.predict(true_dem_vecto_test_MNB)","47f4ab83":"print(\"K\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) v\u00e0 fit v\u1edbi m\u00f4 h\u00ecnh Multinomial Naive Bayes\\n\")\nprint(\"Classification report of Multinomial Naive Bayes binary = True: \\n\",classification_report(y_test,true_dem_du_doan_MNB, target_names = ['Positive','Negative']))\nprint(\"Confusion Matrix of Multinomial Naive Bayes binary = True: \\n\",confusion_matrix(y_test,true_dem_du_doan_MNB))\naccuracy_score_true_dem_MNB = metrics.accuracy_score(y_test,true_dem_du_doan_MNB)\nprint(\"\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) fit Multinomial Naive Bayes: \" +str('{:04.2f}'.format(accuracy_score_true_dem_MNB *100)) + \"%\")\n","7825fb9e":"plt.figure(figsize=(8,5))\nplt.title(\"\u0110\u1ed9 Ch\u00ednh X\u00e1c \" +str('{:04.2f}'.format(accuracy_score_true_dem_MNB *100)) + \"%\")\nplt.xlabel(\"Actual label\")\nplt.ylabel(\"Predicted label\")\nsns.heatmap(confusion_matrix(y_test,true_dem_du_doan_MNB),annot=True,fmt='d',linewidths=.5, square = True,cmap=\"BuPu\")\nplt.show()","cf8e2889":"#Count vectorizer for bag of words\ndem_vecto_SGD = CountVectorizer(binary=False,ngram_range=(1,3))\ndem_vecto_train_SGD=dem_vecto_SGD.fit_transform(imdb_train)\ndem_vecto_test_SGD=dem_vecto_SGD.transform(imdb_test)\nprint('Count vectorizer for train:',dem_vecto_train_SGD.shape)\nprint('Count vectorizer for test:',dem_vecto_test_SGD.shape)\n\nSGDC = SGDClassifier(loss='hinge',random_state=42)\nfalse_dem_SGDC = SGDC.fit(dem_vecto_train_SGD,y_train)\n\ntfidf_SGDC= SGDC.fit(tfidf_vecto_train,y_train)\n#Predicting the model for bag of words\nfalse_dem_du_doan_SGDC=false_dem_SGDC.predict(dem_vecto_test_SGD)\nprint(false_dem_du_doan_SGDC)\n#Predicting the model for tfidf features\ntfidf_du_doan_SGDC=tfidf_SGDC.predict(tfidf_vecto_test)\nprint(tfidf_du_doan_SGDC)","c81d0bce":"print(\"K\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng TF_IDF fit v\u1edbi m\u00f4 h\u00ecnh SGD Classifier\\n\")\nprint(\"Classification report of SGD Classifier: \\n\",classification_report(y_test,tfidf_du_doan_SGDC, target_names = ['Positive','Negative']))\nprint(\"Confusion Matrix of SGD Classifier: \\n\",confusion_matrix(y_test,tfidf_du_doan_SGDC))\naccuracy_score_tfidf_SGDC = metrics.accuracy_score(y_test,tfidf_du_doan_SGDC)\nprint(\"\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng TF_IDF fit v\u1edbi m\u00f4 h\u00ecnh SGD Classifier: \" +str('{:04.2f}'.format(accuracy_score_tfidf_SGDC *100)) + \"%\")","a3ebfb66":"plt.figure(figsize=(8,5))\nplt.title(\"\u0110\u1ed9 Ch\u00ednh X\u00e1c \" +str('{:04.2f}'.format(accuracy_score_tfidf_SGDC *100)) + \"%\")\nplt.xlabel(\"Actual label\")\nplt.ylabel(\"Predicted label\")\nsns.heatmap(confusion_matrix(y_test,tfidf_du_doan_SGDC),annot=True,fmt='d',linewidths=.5, square = True,cmap=\"Blues\")\nplt.show()","0a89aa02":"print(\"K\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = False) fit v\u1edbi m\u00f4 h\u00ecnh SGD Classifier\\n\")\nprint(\"Classification report of SGD Classifier: \\n\",classification_report(y_test,false_dem_du_doan_SGDC, target_names = ['Positive','Negative']))\nprint(\"Confusion Matrix of SGD Classifier: \\n\",confusion_matrix(y_test,false_dem_du_doan_SGDC))\naccuracy_score_false_count_SGDC = metrics.accuracy_score(y_test,false_dem_du_doan_SGDC)\nprint(\"\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = False) fit v\u1edbi m\u00f4 h\u00ecnh SGD Classifier: \" +str('{:04.2f}'.format(accuracy_score_false_count_SGDC *100)) + \"%\")","a812989d":"plt.figure(figsize=(8,5))\nplt.title(\"\u0110\u1ed9 Ch\u00ednh X\u00e1c \" +str('{:04.2f}'.format(accuracy_score_false_count_SGDC *100)) + \"%\")\nplt.xlabel(\"Actual label\")\nplt.ylabel(\"Predicted label\")\nsns.heatmap(confusion_matrix(y_test,false_dem_du_doan_SGDC),annot=True,fmt='d',linewidths=.5, square = True,cmap=\"Blues\")\nplt.show()","5415bff7":"true_dem_vecto=CountVectorizer(binary=True,ngram_range=(1,3))\ntrue_dem_vecto_train=true_dem_vecto.fit_transform(imdb_train)\ntrue_dem_vecto_test=true_dem_vecto.transform(imdb_test)\n\ntrue_SGDC = SGDClassifier(loss='hinge',random_state=42)\ntrue_dem_SGDC=true_SGDC.fit(true_dem_vecto_train,y_train)\n\ntrue_dem_du_doan_SGDC=true_dem_SGDC.predict(true_dem_vecto_test)\nprint(\"K\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) fit v\u1edbi m\u00f4 h\u00ecnh SGD Classifier\\n\")\nprint(\"Classification report of SGD Classifier: \\n\",classification_report(y_test,true_dem_du_doan_SGDC, target_names = ['Positive','Negative']))\nprint(\"Confusion Matrix of SGD Classifier: \\n\",confusion_matrix(y_test,true_dem_du_doan_SGDC))\naccuracy_score_true_count_SGDC = metrics.accuracy_score(y_test,true_dem_du_doan_SGDC)\nprint(\"\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) fit SGD Classifier: \\n\" +str('{:04.2f}'.format(accuracy_score_true_count_SGDC *100)) + \"%\")\n","abf2c08f":"plt.figure(figsize=(8,5))\nplt.title(\"\u0110\u1ed9 Ch\u00ednh X\u00e1c \" +str('{:04.2f}'.format(accuracy_score_true_count_SGDC *100)) + \"%\")\nplt.xlabel(\"Actual label\")\nplt.ylabel(\"Predicted label\")\nsns.heatmap(confusion_matrix(y_test,true_dem_du_doan_SGDC),annot=True,fmt='d',linewidths=.5, square = True,cmap=\"Blues\")\nplt.show()","2c782f50":"LR_dem_vecto=CountVectorizer(binary=False,ngram_range=(1,3))\nLR_false_dem_vecto_train=LR_dem_vecto.fit_transform(imdb_train)\nLR_false_dem_vecto_test=LR_dem_vecto.transform(imdb_test)\n\nLR=LogisticRegression(penalty='l2',max_iter=500,C=1,random_state=42)\ndem_LR=LR.fit(LR_false_dem_vecto_train,y_train)\ntfidf_LR=LR.fit(tfidf_vecto_train,y_train)\n\nfalse_du_doan_LR=dem_LR.predict(LR_false_dem_vecto_test)\ndu_doan_tfidf_LR=tfidf_LR.predict(tfidf_vecto_test)\n","d05f4df1":"print(\"K\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng TF-IDF fit v\u1edbi m\u00f4 h\u00ecnh h\u1ed3i quy logistic\\n\")\nprint(\"Classification report of Logistic Regression: \\n\",classification_report(y_test,du_doan_tfidf_LR, target_names = ['Positive','Negative']))\nprint(\"Confusion Matrix of Logistic Regression: \\n\",confusion_matrix(y_test,du_doan_tfidf_LR))\naccuracy_score_tfidf_LR = metrics.accuracy_score(y_test,du_doan_tfidf_LR)\nprint(\"\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng TF-IDF fit v\u1edbi m\u00f4 h\u00ecnh h\u1ed3i quy logistic: \" +str('{:04.2f}'.format(accuracy_score_tfidf_LR *100)) + \"%\")","87be6de3":"plt.figure(figsize=(8,5))\nplt.title(\"\u0110\u1ed9 Ch\u00ednh X\u00e1c \" +str('{:04.2f}'.format(accuracy_score_tfidf_LR *100)) + \"%\")\nplt.xlabel(\"Actual label\")\nplt.ylabel(\"Predicted label\")\nsns.heatmap(confusion_matrix(y_test,du_doan_tfidf_LR),annot=True,fmt='d',linewidths=.5, square = True,cmap=\"Greens\")\nplt.show()","bb8086a0":"print(\"K\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary=False) fit v\u1edbi m\u00f4 h\u00ecnh h\u1ed3i quy logistic\\n\")\nprint(\"Classification report of Logistic Regression: \\n\",classification_report(y_test,false_du_doan_LR, target_names = ['Positive','Negative']))\nprint(\"Confusion Matrix of Logistic Regression: \\n\",confusion_matrix(y_test,false_du_doan_LR))\naccuracy_score_false_count_LR = metrics.accuracy_score(y_test,false_du_doan_LR)\nprint(\"\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary=False) fit v\u1edbi m\u00f4 h\u00ecnh h\u1ed3i quy logistic: \" +str('{:04.2f}'.format(accuracy_score_false_count_LR *100)) + \"%\")","04a19207":"plt.figure(figsize=(8,5))\nplt.title(\"\u0110\u1ed9 Ch\u00ednh X\u00e1c \" +str('{:04.2f}'.format(accuracy_score_false_count_LR *100)) + \"%\")\nplt.xlabel(\"Actual label\")\nplt.ylabel(\"Predicted label\")\nsns.heatmap(confusion_matrix(y_test,false_du_doan_LR),annot=True,fmt='d',linewidths=.5, square = True,cmap=\"Greens\")\nplt.show()","38fb367b":"true_dem_LR_vecto=CountVectorizer(binary=True,ngram_range=(1,3))\ntrue_dem_LR_vecto_train=true_dem_LR_vecto.fit_transform(imdb_train)\ntrue_dem_LR_vecto_test=true_dem_LR_vecto.transform(imdb_test)\n\ntrue_LR=LogisticRegression(penalty='l2',max_iter=500,C=1,random_state=42)\ntrue_dem_LR=true_LR.fit(true_dem_LR_vecto_train,y_train)\n\ntrue_du_doan_LR=true_dem_LR.predict(true_dem_LR_vecto_test)\n\nprint(\"K\u1ebft qu\u1ea3 c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) fit v\u1edbi m\u00f4 h\u00ecnh h\u1ed3i quy logistic\\n\")\nprint(\"Classification report of Logistic Regression: \\n\",classification_report(y_test,true_du_doan_LR, target_names = ['Positive','Negative']))\nprint(\"Confusion Matrix of Logistic Regression: \\n\",confusion_matrix(y_test,true_du_doan_LR))\naccuracy_score_true_count_LR = metrics.accuracy_score(y_test,true_du_doan_LR)\nprint(\"\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) fit v\u1edbi m\u00f4 h\u00ecnh h\u1ed3i quy logistic: \" +str('{:04.2f}'.format(accuracy_score_true_count_LR *100)) + \"%\")","45d84974":"plt.figure(figsize=(8,5))\nplt.title(\"\u0110\u1ed9 Ch\u00ednh X\u00e1c \" +str('{:04.2f}'.format(accuracy_score_true_count_LR *100)) + \"%\")\nplt.xlabel(\"Actual label\")\nplt.ylabel(\"Predicted label\")\nsns.heatmap(confusion_matrix(y_test,true_du_doan_LR),annot=True,fmt='d',linewidths=.5, square = True,cmap=\"Greens\")\nplt.show()","d0cda6ae":"# accuracy = {'LSVC': ['90.29','89.77','89.46'],\n#             'MNB': ['86.63','88.75','89.10'],\n#             'SGDC':['88.67','85.84','89.46'],\n#             'LR' :['88.50','85.62', '89.65']}\naccuracy = {'TF-IDF': ['90.29','86.63','88.67','88.50'],\n            'Binary=False':['89.77','88.75','85.84','85.62'],\n            'Binary=True':['89.46','89.10','89.46','89.65']}\naccuracy = pd.DataFrame(accuracy,index=['LSVC','MNB','SGDC','LR'])\nprint(\"___B\u1ea2NG SO S\u00c1NH C\u00c1C M\u00d4 H\u00ccNH___\\n\")\naccuracy","27916ff4":"df_predicted = x_test.copy()\ndf_predicted = pd.DataFrame(df_predicted)\ndf_predicted.columns = ['review']\ndf_predicted = df_predicted.reset_index()\ndf_predicted = df_predicted.drop(['index'], axis=1)\ndf_predicted.head()","6c7e34a5":"y_test_hientai = y_test.copy()\ny_test_hientai = pd.DataFrame(y_test_hientai)\ny_test_hientai.columns = ['sentiment']\ny_test_hientai['sentiment'] = y_test_hientai['sentiment'].replace({1: 'positive', 0: 'negative'})","c5f528db":"y_test_predicted = du_doan.copy()\ny_test_predicted = pd.DataFrame(y_test_predicted)\ny_test_predicted.columns = ['predicted_sentiment']\ny_test_predicted['predicted_sentiment'] = y_test_predicted['predicted_sentiment'].replace({1: 'positive', 0: 'negative'})","c607a25c":"ketqua_test = pd.concat([df_predicted, y_test_hientai, y_test_predicted], axis=1)\nketqua_test.head()","cbdbc391":"# T\u1ea1o m\u1ed9t t\u1eeb \u0111\u1ec3 l\u1eadp ch\u1ec9 m\u1ee5c t\u1eeb \u0111i\u1ec3n t\u1eeb m\u00f4 \u0111un tokenizer \n# M\u1ed7i t\u1eeb \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u00e0m kh\u00f3a trong khi ch\u1ec9 m\u1ee5c duy nh\u1ea5t t\u01b0\u01a1ng \u1ee9ng v\u00e0 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u00e0m gi\u00e1 tr\u1ecb cho kh\u00f3a.\ntokenizer = Tokenizer(num_words=5000)\ntokenizer.fit_on_texts(x_train)\nx_train = tokenizer.texts_to_sequences(x_train)\nx_test = tokenizer.texts_to_sequences(x_test)","a3c510a1":"#x_train\n#print(y_train)\n#print(y_test)\n#x_test","ea7dc44c":"do_dai_danhsach_x = [len(i) for i in x_train + x_test]\nprint(f'\u0110\u1ed9 d\u00e0i t\u1ed1i \u0111a c\u1ee7a c\u00e2u:{max(do_dai_danhsach_x)}')\nprint(f'\u0110\u1ed9 d\u00e0i trung b\u00ecnh c\u1ee7a c\u00e2u:{np.mean(do_dai_danhsach_x)}')","37bb0774":"# S\u1eed d\u1ee5ng seaborn \u0111\u1ec3 v\u1ebd \u0111\u1ed9 d\u00e0i c\u00e2u\n#plt.figure(figsize=(15,5), dpi= 80)\nfig, ax = plt.subplots(figsize=(15,5))\nsns.distplot(do_dai_danhsach_x, color='red',label=\"\u0110\u1ed9 d\u00e0i danh s\u00e1ch\")\nplt.title('Bi\u1ec3u \u0111\u1ed3 th\u1ec3 hi\u1ec7n s\u1ed1 l\u01b0\u1ee3ng t\u1eeb',fontsize=20,color='black')\nax.legend()\nax.set(xlabel='S\u1ed1 t\u1eeb',ylabel='S\u1ed1 l\u01b0\u1ee3t review')\nplt.show()","4d2e8f55":"vocabulary_size = len(tokenizer.word_index) + 1\nmaxlength = 100\n\nx_train_padding = pad_sequences(x_train, padding=\"post\",maxlen=maxlength)\nx_test_padding = pad_sequences(x_test, padding=\"post\",maxlen=maxlength)\n# Ki\u1ec3m tra danh s\u00e1ch ng\u1eabu nhi\u00ean trong X_train (c\u00e1c c\u00e2u tr\u01b0\u1edbc \u0111\u00f3)\n# c\u00f3 c\u00f9ng \u0111\u1ed9 d\u00e0i l\u00e0 100\nlen(x_train[3])","7d6a5fa9":"# Ki\u1ec3m tra x\u00edu\nx_train_padding","5974eb34":"vocabulary_size","c8dd4379":"tudien_duoc_nhung = dict()\nglove_file = open('..\/input\/glove6b100d\/glove.6B.100d.txt',encoding='utf-8')\nfor line in glove_file:\n    record = line.split()\n    word = record[0]\n    kich_thuoc = asarray(record[1:], dtype = \"float32\")\n    tudien_duoc_nhung[word] = kich_thuoc\nglove_file.close()","f4f4b2bb":"ma_tran_nhung = zeros((vocabulary_size,100))\nfor word, index in tokenizer.word_index.items():\n    vecto_nhung = tudien_duoc_nhung.get(word)\n    if vecto_nhung is not None:\n        ma_tran_nhung[index] = vecto_nhung","40ddf3e7":"vecto_nhung","cf77ccdd":"ma_tran_nhung","27934c09":"# B\u1ea1n c\u00f3 th\u1ec3 x\u00f3a d\u1ea5u # \u0111\u1ec3 in ra 'tudien_duoc_nhung'\n#tudien_duoc_nhung","0c25637d":"mo_hinh = Sequential()\nlop_nhung = Embedding(vocabulary_size, 100, weights = [ma_tran_nhung],input_length=maxlength,trainable=False)\nmo_hinh.add(lop_nhung)\nmo_hinh.add(Flatten())\nmo_hinh.add(Dense(1, activation = 'sigmoid'))","8ea16e85":"# Bi\u00ean d\u1ecbch\nmo_hinh.compile(optimizer = 'adam', loss = 'binary_crossentropy',metrics = ['acc'])\nprint(mo_hinh.summary())","25fa6131":"history = mo_hinh.fit(x_train_padding, y_train, batch_size=128,epochs = 20, verbose=1, validation_split=0.2)","bab5482d":"diem_danh_gia = mo_hinh.evaluate(x_test_padding, y_test, verbose = 1)","9df07fa4":"#Ki\u1ec3m tra \u0111\u1ed9 ch\u00ednh x\u00e1c\nprint(\"\u0110\u1ed9 ch\u00ednh x\u00e1c: {:.2%}\".format(diem_danh_gia[1]))","1671cd01":"du_doan_y = mo_hinh.predict(x_test_padding)\ndu_doan_y = np.round(du_doan_y).astype(int)\nprint(classification_report(y_test,du_doan_y))","5529a74c":"cm = confusion_matrix(y_test,du_doan_y)\ndf_cm = pd.DataFrame(cm,index=['bad','good'],columns=['bad','good'])\ndf_cm.head()","81199bd9":"plt.figure(figsize=(8,5))\nplt.plot(history.history['acc'],color='red')\nplt.plot(history.history['val_acc'],color='black')\nplt.title('Bi\u1ec3u \u0111\u1ed3 hi\u1ec7u su\u1ea5t ch\u00ednh x\u00e1c c\u1ee7a m\u00f4 h\u00ecnh',fontsize=15)\nplt.xlabel('Epochs',fontsize=15)\nplt.ylabel('Accuracy',fontsize=15)\nplt.legend(['Train data','Test data'],loc='upper left')\nplt.show()\n\nplt.figure(figsize=(8,5))\nplt.plot(history.history['loss'],color='red')\nplt.plot(history.history['val_loss'],color='black')\nplt.title('Bi\u1ec3u \u0111\u1ed3 hi\u1ec7u su\u1ea5t th\u1ea5t b\u1ea1i c\u1ee7a m\u00f4 h\u00ecnh',fontsize=15)\nplt.xlabel('Epochs',fontsize=10)\nplt.ylabel('Loss',fontsize=10)\nplt.legend(['train','test'],loc='upper left')\nplt.show()","cf7e67d4":"mo_hinh = tf.keras.Sequential([tf.keras.layers.Embedding(vocabulary_size, 100,weights=[ma_tran_nhung],input_length=maxlength, trainable=False),\n                                tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(128)),tf.keras.layers.Dense(128, activation='relu'),\n                                tf.keras.layers.Dense(1, activation='sigmoid')])","972d98a2":"mo_hinh.compile(loss='binary_crossentropy',optimizer=tf.keras.optimizers.Adam(1e-4),metrics=['accuracy'])","d200ee72":"mo_hinh.summary()","fb571b4f":"history = mo_hinh.fit(x_train_padding, y_train, epochs=10,batch_size = 128, verbose = 1,validation_split = 0.2)","960f16ad":"acc_score = mo_hinh.evaluate(x_test_padding, y_test, verbose = 1)\nacc_score","c89405e0":"print(\"Accuracy Test: {:.2%}\".format(acc_score[1]))\nprint(\"Accuracy Score: {:.2%}\".format(acc_score[0]))","c8cd56f7":"# h\u00e0m d\u1ef1 \u0111\u00f3\u00e1n\ndu_doan_y = mo_hinh.predict(x_test_padding)\ndu_doan_y = np.round(du_doan_y).astype(int)\nprint(classification_report(y_test,du_doan_y))","862e1da6":"plt.figure(figsize=(8,5))\nplt.plot(history.history['accuracy'],color=\"red\")\nplt.plot(history.history['val_accuracy'])\nplt.title(\"Hi\u1ec7u Su\u1ea5t Ch\u00ednh X\u00e1c M\u00f4 H\u00ecnh S\u1eed D\u1ee5ng RNN\",fontsize=15)\nplt.xlabel(\"Epochs\",fontsize=10)\nplt.ylabel(\"Accuracy\",fontsize=10)\nplt.legend([\"Train Data\",\"Text data\"],loc='upper left')\nplt.show()","f2c2a96f":"plt.figure(figsize=(8,5))\nplt.plot(history.history['loss'],color=\"red\")\nplt.plot(history.history['val_loss'])\nplt.title(\"Hi\u1ec7u Su\u1ea5t Th\u1ea5t B\u1ea1i M\u00f4 H\u00ecnh S\u1eed D\u1ee5ng RNN\",fontsize=15)\nplt.xlabel(\"Epochs\",fontsize=10)\nplt.ylabel(\"loss\",fontsize=10)\nplt.legend([\"train Data\",\"text data\"],loc='upper left')\nplt.show()","f4133786":"mo_hinh = tf.keras.Sequential([tf.keras.layers.Embedding(vocabulary_size, 100,weights=[ma_tran_nhung],input_length=maxlength, trainable=False),\n            tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(50, return_sequences = True)),\n            tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(25)),\n            tf.keras.layers.Dense(50, activation='relu'),\n            tf.keras.layers.Dropout(0.5),\n            tf.keras.layers.Dense(1, activation='sigmoid')])","f562be59":"mo_hinh.summary()","99ed4532":"mo_hinh.compile(loss='binary_crossentropy',optimizer=tf.keras.optimizers.Adam(1e-4),metrics=['accuracy'])","02bda74d":"history = mo_hinh.fit(x_train_padding, y_train, epochs= 10,batch_size = 128, verbose = 1,validation_split = 0.2)","b193b1a8":"history = mo_hinh.fit(x_train_padding, y_train, epochs= 5,batch_size = 128, verbose = 1,validation_split = 0.2)","6775cf10":"history = mo_hinh.fit(x_train_padding, y_train, epochs= 5,batch_size = 128, verbose = 1,validation_split = 0.2)","cc1e7ce0":"history = mo_hinh.fit(x_train_padding, y_train, epochs= 2,batch_size = 128, verbose = 1,validation_split = 0.2)","1b5148fb":"history = mo_hinh.fit(x_train_padding, y_train, epochs= 2,batch_size = 128, verbose = 1,validation_split = 0.2)","8e4d51aa":"history = mo_hinh.fit(x_train_padding, y_train, epochs= 1,batch_size = 128, verbose = 1,validation_split = 0.2)","3b9120bf":"history = mo_hinh.fit(x_train_padding, y_train, epochs= 1,batch_size = 128, verbose = 1,validation_split = 0.2)","b6c302e6":"acc_score = mo_hinh.evaluate(x_test_padding, y_test, verbose = 1)\nacc_score","018760a3":"print(\"Accuracy Score: {:.2%}\".format(acc_score[0]))\nprint(\"Accuracy Train:{:.2%}\".format(acc_score[1]))","a1cf83fc":"du_doan_y = mo_hinh.predict(x_test_padding)\ndu_doan_y = np.round(du_doan_y).astype(int)\nprint(classification_report(y_test,du_doan_y))","7918bef4":"from keras.layers.core import Activation, Dropout, Dense\nfrom keras.layers import Flatten\nfrom keras.layers import GlobalMaxPooling1D,Conv1D,LSTM\n\nmo_hinh = Sequential()\n\nlop_nhung = Embedding(vocabulary_size, 100, weights=[ma_tran_nhung], input_length=maxlength , trainable=False)\nmo_hinh.add(lop_nhung)\n\nmo_hinh.add(Conv1D(128, 5, activation='relu'))\nmo_hinh.add(GlobalMaxPooling1D())\nmo_hinh.add(Dropout(0.2)),\nmo_hinh.add(Dense(1, activation='sigmoid'))","5103e178":"mo_hinh.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])","b2955ff2":"print(mo_hinh.summary())","354e7c47":"history = mo_hinh.fit(x_train_padding, y_train, batch_size=128, epochs=6, verbose=1, validation_split=0.2)\naccuracy_score = mo_hinh.evaluate(x_test_padding, y_test, verbose=1)","b9c4a4bd":"history = mo_hinh.fit(x_train_padding, y_train, batch_size=128, epochs=4, verbose=1, validation_split=0.2)\n\naccuracy_score = mo_hinh.evaluate(x_test_padding, y_test, verbose=1)","b4c68ec6":"history = mo_hinh.fit(x_train_padding, y_train, batch_size=128, epochs=10, verbose=1, validation_split=0.2)\n\naccuracy_score = mo_hinh.evaluate(x_test_padding, y_test, verbose=1)","6ee1c6ec":"du_doany = mo_hinh.predict(x_test_padding)\ndu_doany = np.round(du_doany).astype(int)\nprint(classification_report(y_test,du_doany))","7d3c7cb8":"accuracy_score","4b8d5604":"print(\"Test Score: {:.2%}\".format(accuracy_score[0]))\nprint(\"Test Accuracy: {:.2%}\".format(accuracy_score[1]))","7cdf4edb":"from wordcloud import WordCloud \nplt.figure(figsize=(15,5))\npositive_text = imdb_train[2]\nWC=WordCloud(background_color = 'pink',width=1500,height=1000,max_words=500,min_font_size=5)\npositive_words=WC.generate(positive_text)\nplt.imshow(positive_words,interpolation='bilinear')\nplt.show","617e54ef":"from wordcloud import WordCloud \nplt.figure(figsize=(15,5))\npositive_text = imdb_train[20]\nWC=WordCloud(width=1500,height=1000,max_words=500,min_font_size=5)\npositive_words=WC.generate(positive_text)\nplt.imshow(positive_words,interpolation='bilinear')\nplt.show","ecc3093a":"index = np.random.randint(x_train_padding.shape[1])\nex = imdb_train[index]\nprint(ex)","b9fb2cc7":"ex = tokenizer.texts_to_sequences(ex)\nds = []\nfor e in ex:\n    for i in e:\n        ds.append(i)\nds = [ds]\nex = pad_sequences(ds, padding = 'post', maxlen = maxlength)\nmo_hinh.predict(ex)","76d4bb8e":"**\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) fit Multinomial Naive Bayes: 89.10%**\n___","04ae288f":"**\u0110\u1ed9 ch\u00ednh x\u00e1c khi s\u1eed d\u1ee5ng CNN tr\u00ean t\u1eadp d\u1eef li\u1ec7u l\u00e0 83.70%**","b0264d9d":"**K\u1ebf ti\u1ebfp, t\u00f4i s\u1ebd t\u1ea1o ra m\u1ed9t ma tr\u1eadn nh\u00fang(matrix embedding). \u1ede \u0111\u00e2y, m\u1ed7i s\u1ed1 h\u00e0ng s\u1ebd t\u01b0\u01a1ng \u1ee9ng v\u1edbi ch\u1ec9 m\u1ee5c c\u1ee7a t\u1eeb trong kho ng\u1eef li\u1ec7u. Ma tr\u1eadn s\u1ebd ch\u1ee9a c\u00e1c embedding t\u1eeb GloVe cho c\u00e1c t\u1eeb(word) trong kho d\u1eef li\u1ec7u c\u1ee7a t\u00f4i c\u00f3 \u0111\u01b0\u1ee3c.Ok!**","bb43b248":"# **T\u1ea1o tr\u00ecnh \u0111\u00e1nh gi\u00e1 ng\u1eabu nhi\u00ean**\n\n* **T\u1ea1o m\u1ed9t bi\u1ebfn cho b\u00e0i \u0111\u00e1nh gi\u00e1 phim \u0111\u01b0\u1ee3c t\u1ea1o ng\u1eabu nhi\u00ean**\n* **in b\u00e0i \u0111\u00e1nh gi\u00e1 ng\u1eabu nhi\u00ean**","0b4f57b6":"**K\u1ebeT QU\u1ea2 B\u00c1O TR\u01af\u1edaC(K\u1ebeT QU\u1ea2 IN \u0110\u1eacM L\u00c0 K\u1ebeT QU\u1ea2 KI\u1ec2M TRA C\u00d3 \u0110\u1ed8 CH\u00cdNH X\u00c1C CAO NH\u1ea4T)**\n1.  **LSVC:**\n    * **\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng TF-IDF fit v\u1edbi m\u00f4 h\u00ecnh Linear SVC: 90.29%**\n    * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = False) fit Linear SVC: 89.77%\n    * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = False) fit Linear SVC: 89.46%\n\n2.  **MNB:**\n    * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng TF-IDF fit v\u1edbi m\u00f4 h\u00ecnh Multinomial Naive Bayes: 86.63%\n    * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = False) fit Multinomial Naive Bayes: 88.75%\n    * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) fit Multinomial Naive Bayes: 89.10%\n\n3.  **SGDC:** \n    * TF-IDF: \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a SGD Classifier: 88.67%\n    * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a SGD Classifier binary = False: 85.84%\n    * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) fit SGD Classifier: 85.84%\n\n4.  **LR:**\n    * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng TF-IDF fit v\u1edbi m\u00f4 h\u00ecnh h\u1ed3i quy logistic: 88.50%\n    * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer fit v\u1edbi m\u00f4 h\u00ecnh h\u1ed3i quy logistic: 85.62%\n    * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) fit v\u1edbi m\u00f4 h\u00ecnh h\u1ed3i quy logistic: 89.65%\n5.  **DEEP LEARNING**\n    * **M\u00f4 h\u00ecnh CNN cho \u0111\u1ed9 ch\u00ednh x\u00e1c t\u1ed1t nh\u1ea5t trong s\u1ed1 t\u1ea5t c\u1ea3 v\u1edbi 84.71% tr\u00ean t\u1eadp d\u1eef li\u1ec7u train v\u00e0 test**\n___","d5ee82fd":"**L\u1eafp m\u00f4 h\u00ecnh v\u1edbi b\u1ed9 train \u0111\u1ec3 training v\u00e0 t\u00f4i s\u1eed d\u1ee5ng 30 Epochs \u0111\u1ec3 t\u00ecm \u0111\u1ed9 ch\u00ednh x\u00e1c t\u1ed1i \u01b0u nh\u1ea5t c\u00f3 th\u1ec3.Ok! \u0110\u1ee3i t\u00ed xem k\u1ebft qu\u1ea3 n\u00e0o!**","319f80f7":"**\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary=False) fit v\u1edbi m\u00f4 h\u00ecnh h\u1ed3i quy logistic: 85.62%**","447b0821":"# **TRI\u1ec2N KHAI C\u00c1C M\u00d4 H\u00ccNH**\n\n**Xong! M\u1ecdi th\u1ee9 \u0111\u00e3 \u1ed5n...Gi\u1edd l\u00e0 l\u00fac t\u00f4i x\u00e2y d\u1ef1ng m\u00f4 h\u00ecnh t\u1eebng m\u00f4 h\u00ecnh cho t\u1eadp d\u1eef li\u1ec7u v\u00e0 \u0111\u01b0a ra m\u00f4 h\u00ecnh c\u00f3 \u0111\u1ed9 ch\u00ednh x\u00e1c cao nh\u1ea5t.**\n___\n\n   # **T\u00f4i s\u1ebd b\u1eaft \u0111\u1ea7u v\u1edbi m\u00f4 h\u00ecnh Linear Support Vector Classification(LSVC)**","1abd95de":"**\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) fit v\u1edbi m\u00f4 h\u00ecnh Linear SVC: 89.46%**\n\n***TUY\u1ec6T V\u1edcI! ch\u00fang ta \u0111\u1ea1t \u0111\u01b0\u1ee3c \u0111\u1ed9 ch\u00ednh x\u00e1c g\u1ea7n nh\u01b0 t\u1ed1i \u0111a b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng c\u00f4ng c\u1ee5 vect\u01a1 TF-IDF. V\u00e0 c\u0169ng b\u1eb1ng c\u00f4ng c\u1ee5 n\u00e0y t\u00f4i s\u1ebd s\u1eed d\u1ee5ng th\u00eam m\u00f4 h\u00ecnh th\u1ee9 2-Naive Bayes. M\u00f4 h\u00ecnh Bayes s\u1eed d\u1ee5ng c\u00e1c x\u00e1c su\u1ea5t tr\u01b0\u1edbc \u0111\u1ec3 d\u1ef1 \u0111o\u00e1n x\u00e1c su\u1ea5t sau r\u1ea5t h\u1eefu \u00edch cho vi\u1ec7c ph\u00e2n lo\u1ea1i v\u1edbi c\u00e1c t\u00ednh n\u0103ng r\u1eddi r\u1ea1c nh\u01b0 ph\u00e2n lo\u1ea1i v\u0103n b\u1ea3n.***\n___\n    \n   # **M\u00f4 h\u00ecnh th\u1ee9 hai: Bayes Th\u01a1 Ng\u00e2y(Multinomial Naive Bayes-MNB)**","c0834c99":"# **TH\u01af VI\u1ec6N C\u1ea6N THI\u1ebeT**","06933f74":"**\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng TF-IDF fit v\u1edbi m\u00f4 h\u00ecnh h\u1ed3i quy logistic: 88.50%**","7db25696":"***\u0110\u1ed9 ch\u00ednh x\u00e1c tr\u00ean t\u1eadp d\u1eef li\u1ec7u hu\u1ea5n luy\u1ec7n cao h\u01a1n so v\u1edbi t\u1eadp d\u1eef li\u1ec7u th\u1eed nghi\u1ec7m n\u00ean m\u1ea1ng n\u01a1-ron s\u00e2u kh\u00f4ng t\u1ed1t cho c\u00e1c d\u1ef1 \u0111o\u00e1n.**","ab8f32c3":"***Ho\u00e0n h\u1ea3o! B\u1ea1n th\u1ea5y g\u00ec kh\u00f4ng? d\u00f2ng th\u1ee9 3 tr\u00f4ng Dataset \u0111\u00e3 \u0111\u01b0\u1ee3c x\u1eed l\u00ed s\u1ea1ch s\u1ebd...Ok! M\u1ecdi th\u1ee9 c\u00f3 v\u1ebb \u1ed5n! Ch\u00fang ta s\u1ebd \u0111\u1ebfn ph\u1ea7n Vecto h\u00f3a v\u0103n b\u1ea3n***\n___","b6095900":"\u0110\u00e2y l\u00e0 m\u1ed9t t\u1eeb \u0111\u00e1m m\u00e2y cho c\u00e1c c\u00e1c b\u00ecnh lu\u1eadn v\u1ec1 phim... ","c3802675":"* **K\u1ebft qu\u1ea3 \u0111\u00e3 ch\u1ec9 ra r\u1eb1ng t\u00f4i c\u00f3 109137 t\u1eeb duy nh\u1ea5t trong kho v\u00e0 t\u00f4i s\u1ebd t\u1ea1o m\u1ea1ng noron \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 t\u1eeb d\u1eef li\u1ec7u s\u1ed1.**\n\n* **Nh\u00fang t\u1eeb(Word Embedding) s\u1ebd \u0111\u1ea3m nhi\u1ec7m vi\u1ec7c c\u1ea3i thi\u1ec7n kh\u1ea3 n\u0103ng m\u1ea1ng noron h\u1ecdc t\u1eeb d\u1eef li\u1ec7u v\u0103n b\u1ea3n v\u00e0 c\u00e1c vect\u01a1 \u0111\u01b0\u1ee3c g\u1ecdi chung l\u00e0 Embeddings.**\n\n* **Ti\u1ebfp theo t\u00f4i s\u1ebd t\u1ea1o ra ma tr\u1eadn feature m\u00e0 c\u1ee5 th\u1ec3 c\u00f4ng c\u1ee5 t\u00f4i s\u1ebd s\u1eed d\u1ee5ng GloVe Embeddings. Theo \u0111\u1ecbnh ngh\u0129a, GloVe l\u00e0 vi\u1ebft t\u1eaft c\u1ee7a Global Vectors d\u00f9ng \u0111\u1ec3 bi\u1ec3u di\u1ec5n t\u1eeb. \u0110\u00e2y l\u00e0 m\u1ed9t thu\u1eadt to\u00e1n h\u1ecdc kh\u00f4ng gi\u00e1m s\u00e1t \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n b\u1edfi Stanford cho vi\u1ec7c t\u1ea1o nh\u00fang t\u1eeb b\u1eb1ng c\u00e1ch t\u1ed5ng h\u1ee3p ma tr\u1eadn \u0111\u1ed3ng xu\u1ea5t hi\u1ec7n c\u00e1c word-word to\u00e0n c\u1ee5c t\u1eeb m\u1ed9t kho ng\u1eef li\u1ec7u m\u00e0 ch\u00fang ta thu \u0111\u01b0\u1ee3c.**\n\n* **K\u1ebft qu\u1ea3 nh\u00fang \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb trong c\u00e1c c\u1ea5u tr\u00fac tuy\u1ebfn t\u00ednh th\u00fa v\u1ecb c\u1ee7a t\u1eeb trong kh\u00f4ng gian vect\u01a1. N\u00f3i c\u00e1ch kh\u00e1c,n\u1ebfu hai t\u1eeb c\u00f9ng xu\u1ea5t hi\u1ec7n nhi\u1ec1u l\u1ea7n, \u0111i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 ch\u00fang c\u00f3 m\u1ed9t s\u1ed1 \u0111i\u1ec3m t\u01b0\u01a1ng \u0111\u1ed3ng v\u1ec1 ng\u00f4n ng\u1eef ho\u1eb7c ng\u1eef ngh\u0129a. Ok ch\u1ee9!**\n* **GloVe word Embedding s\u1ebd t\u1ea1o m\u1ed9t t\u1eeb \u0111i\u1ec3n v\u00e0 s\u1ebd ch\u1ee9a c\u00e1c t\u1eeb l\u00e0m kh\u00f3a(keys) v\u00e0 danh s\u00e1ch nh\u00fang t\u01b0\u01a1ng \u1ee9ng c\u1ee7a ch\u00fang d\u01b0\u1edbi d\u1ea1ng gi\u00e1 tr\u1ecb(values)**\n\n    * B\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o th\u00eam t\u1ea1i \u0111\u00e2y: https:\/\/trituenhantao.io\/kien-thuc\/huong-dan-su-dung-glove\/\n    * C\u00e1c b\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o t\u1ea1i \u0111\u00e2y: https:\/\/ichi.pro\/vi\/nhung-tu-la-gi-71370589666818","dc5a611e":"**=> \u0110\u00e1nh gi\u00e1 ng\u1eabu nhi\u00ean t\u00f4i t\u1ea1o ra cho k\u1ebft qu\u1ea3 0,98 g\u1ea7n b\u1eb1ng 1, c\u00f3 ngh\u0129a l\u00e0 \u0111\u00f3 l\u00e0 \u0111\u00e1nh gi\u00e1 T\u00cdCH C\u1ef0C(POSITIVE) cho c\u00e1i review \u0111\u00e3 \u0111\u00e1nh gi\u00e1 t\u1eeb ng\u01b0\u1eddi xem.**","0fbea769":"# **Chia t\u1eadp d\u1eef li\u1ec7u**\n**T\u00f4i s\u1ebd chia t\u1eadp d\u1eef li\u1ec7u \u0111\u1ec3 hu\u1ea5n lu\u1eadn m\u00f4 h\u00ecnh v\u1edbi 75% d\u1eef li\u1ec7u l\u00e0 traning, 25% l\u00e0 test, random_state = 42 (ch\u00fang ta c\u00f3 th\u1ec3 l\u1ea5y random t\u00f9y \u00fd) & sau \u0111\u00f3, t\u00f4i c\u1ea7n thay th\u1ebf \"review\" v\u00e0 \"sentiment\" v\u1ec1 d\u1ea1ng 2 ki\u1ec3u s\u1ed1 l\u00e0 \"Positive: 1\" v\u00e0 \"Nagative: 0 \u0111\u1ec3 fit v\u1edbi m\u00f4 h\u00ecnh\"**","a7bf991a":"***\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a t\u1eadp d\u1eef li\u1ec7u hu\u1ea5n luy\u1ec7n v\u00e0 ki\u1ec3m tra g\u1ea7n nhau, v\u00ec v\u1eady m\u00f4 h\u00ecnh RNN (LSTM) ho\u1ea1t \u0111\u1ed9ng t\u1ed1t tr\u00ean d\u1eef li\u1ec7u m\u1edbi.**","af120549":"**B\u00e2y gi\u1edd t\u00f4i s\u1ebd vect\u01a1 h\u00f3a b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng CountVectorizer (binary = True) v\u00e0 fit v\u1edbi m\u00f4 h\u00ecnh SGDC \u0111\u1ec3 xem k\u1ebft qu\u1ea3 so v\u1edbi (binary = True) s\u1ebd th\u1ebf n\u00e0o?**","00ec61c2":"# T\u1ea1o l\u1edbp nh\u00fang (Creation the embedding layer)\n***Nh\u01b0 \u0111\u00e3 tr\u00ecnh b\u00e0y, tr\u01b0\u1edbc khi ti\u1ebfn t\u1edbi \"m\u00f4 h\u00ecnh h\u1ecdc s\u00e2u(deep learning) t\u00f4i c\u1ea7n m\u1ed9p l\u1edbp nh\u00fang chuy\u1ec3n \u0111\u1ed5i d\u1eef li\u1ec7u v\u0103n b\u1ea3n c\u1ee7a t\u00f4i th\u00e0nh d\u1eef li\u1ec7u s\u1ed1. N\u00f3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u00e0m l\u1edbp \u0111\u1ea7u ti\u00ean cho c\u00e1c m\u00f4 h\u00ecnh h\u1ecdc s\u00e2u trong keras. \u0110\u00e2y l\u00e0 b\u01b0\u1edbc \u0111\u1ea7u ti\u00ean \u0111\u1ec3 t\u00f4i c\u00f3 th\u1ec3 ti\u1ebfn t\u1edbi m\u00f4 h\u00ecnh h\u1ecdc s\u00e2u... N\u00f3 c\u0169ng kh\u00e1 nhanh v\u00e0 kh\u00f4ng m\u1ea5t nhi\u1ec1u th\u1eddi gian c\u1ee7a b\u1ea1n \u0111\u00e2u...c\u00f9ng \u0111i nh\u00e9!ok!Go!!!***","8847a8ca":"   # **M\u00f4 h\u00ecnh h\u1ecdc s\u00e2u \u0111\u01a1n gi\u1ea3n**\n* ***\u0110\u1ec3 kh\u00f4ng b\u1ecb r\u1ed1i th\u00ec t\u00f4i s\u1ebd l\u00e0m ph\u1ea7n \u0111\u01a1n gi\u1ea3n cho b\u1ea1n d\u1ec5 h\u00ecnh dung m\u00f4 h\u00ecnh h\u1ecdc s\u00e2u \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf th\u1ebf n\u00e0o? ok!***\n* ***T\u1ea1o m\u1ed9t m\u1ea1ng n\u01a1-ron h\u1ecdc s\u00e2u \u0111\u01a1n gi\u1ea3n. Sau \u0111\u00f3 t\u1ea1o m\u1ed9t l\u1edbp nh\u00fang(class embed) b\u1eb1ng c\u00e1ch ch\u1ec9 \u0111\u1ecbnh c\u00e1c tham s\u1ed1 m\u00e0 ch\u00fang t\u00f4i \u0111\u00e3 t\u1ea1o tr\u01b0\u1edbc \u0111\u00f3 v\u00e0 th\u00eam(add) n\u00f3 v\u00e0o m\u00f4 h\u00ecnh(model)***\n* ***Flatten l\u1edbp nh\u00fang l\u1ea1i v\u00ec t\u00f4i \u0111ang k\u1ebft n\u1ed1i th\u1eb3ng l\u1edbp nh\u00fang v\u1edbi l\u1edbp Dense(Dense layer)***\n* ***Cu\u1ed1i c\u00f9ng, t\u00f4i th\u00eam m\u1ed9t l\u1edbp dense v\u1edbi ch\u1ee9c n\u0103ng k\u00edch ho\u1ea1t sigmoid.***\n* ***T\u00f4i bi\u1ebft b\u1ea1n \u0111ang t\u1ef1 h\u1ecfi Sigmoid v\u00e0 Dense l\u00e0 g\u00ec? Ch\u00fang c\u00f3 quan h\u1ec7 g\u00ec?***\n\n*     B\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o t\u1ea1i \u0111\u00e2y: https:\/\/vn.got-it.ai\/blog\/tim-hieu-sigmoid-function-va-lich-su-hinh-thanh-cua-no\n*     B\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o t\u1ea1i \u0111\u00e2y: https:\/\/trituenhantao.io\/tu-dien-thuat-ngu\/dense-layer\/","8594a659":"   # **Bi\u1ec3u di\u1ec5n k\u1ebft qu\u1ea3 d\u1ef1 \u0111o\u00e1n t\u1eadp d\u1eef li\u1ec7u IMDB 50K**","78070fe9":"**\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = False) fit v\u1edbi m\u00f4 h\u00ecnh SGD Classifier: 85.84%**","6c0c5d6a":"**\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) fit v\u1edbi m\u00f4 h\u00ecnh h\u1ed3i quy logistic: 89.65%**\n___","ae298d30":"# **GI\u1edaI THI\u1ec6U**\n\n* Xin ch\u00e0o! H\u00f4m nay t\u00f4i s\u1ebd ph\u1ea3i ho\u00e0n th\u00e0nh m\u1ed9t nhi\u1ec7m v\u1ee5 kh\u00e1 th\u00fa v\u1ecb \u0111\u00f3 l\u00e0 **\"Ph\u00e2n t\u00edch \u0111\u00e1nh gi\u00e1 c\u1ea3m x\u00fac ng\u01b0\u1eddi xem qua b\u1ed9 d\u1eef li\u1ec7u 50K IMDB** b\u1eb1ng t\u1ea5t c\u1ea3 c\u00e1c **ph\u01b0\u01a1ng ph\u00e1p h\u1ecdc m\u00e1y(g\u1ed3m c\u00f3: LSVC,Bayes Th\u01a1 Ng\u00e2y,SGDC,LR,LSTM) v\u00e0 h\u1ecdc s\u00e2u(CNN)** m\u00e0 t\u00f4i bi\u1ebft. Vui l\u00f2ng cho \u00fd ki\u1ebfn kh\u00e1ch quan \u0111\u1ec3 t\u1ea5t c\u1ea3 ch\u00fang ta c\u00f3 th\u1ec3 trao \u0111\u1ed5i v\u1edbi nhau t\u00edch c\u1ef1c h\u01a1n v\u00e0 hi\u1ec7u qu\u1ea3 h\u01a1n. C\u1ea3m \u01a1n c\u00e1c b\u1ea1n \u0111\u00e3 xem!\n\n* Tr\u01b0\u1edbc khi b\u1eaft \u0111\u1ea7u th\u00ec t\u00f4i s\u1ebd cho b\u1ea1n **bi\u1ebft tr\u01b0\u1edbc k\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c** s\u1ebd ra sao \u0111\u1ec3 ch\u00fang ta c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng r\u00e0 so\u00e1t ch\u00fang m\u1ed9t c\u00e1ch d\u1ec5 d\u00e0ng v\u00e0 hi\u1ec7u qu\u1ea3.**(\u1edf \u0111\u00e2y t\u00f4i ch\u1ec9 tr\u00ecnh b\u00e0y k\u1ebft qu\u1ea3 \u0111\u1ea1t \u0111\u01b0\u1ee3c v\u1ec1 \u0111\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a t\u1eebng m\u00f4 h\u00ecnh, c\u00e1c b\u1ea1n c\u1ea3m th\u1ea5y hay v\u00e0 h\u1ee9ng th\u00fa c\u00f3 th\u1ec3 xem t\u1eebng chi ti\u1ebft code & ch\u00fa th\u00edch m\u00e0 t\u00f4i \u0111\u1ec3 b\u00ean d\u01b0\u1edbi).**\n\n* T\u00f4i c\u0169ng th\u1ef1c hi\u1ec7n **tr\u1ef1c quan h\u00f3a d\u1eef li\u1ec7u tr\u01b0\u1edbc v\u00e0 sau khi hu\u1ea5n luy\u1ec7n m\u00f4 h\u00ecnh** \u0111\u1ec3 d\u1ec5 nh\u00ecn **quan s\u00e1t v\u00e0 d\u1ec5 d\u00e0ng \u0111\u00e1nh gi\u00e1 c\u00e1c gi\u1ea3i thu\u1eadt**\n\n* B\u1ea1n c\u00f3 th\u1ec3 xem s\u1ed1 li\u1ec7u **\"so s\u00e1nh b\u1ea3ng m\u00f4 h\u00ecnh\" t\u1ea1i d\u00f2ng \"Nh\u1eadn x\u00e9t v\u1ec1 k\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c t\u1eeb 4 m\u00f4 h\u00ecnh\" b\u00ean d\u01b0\u1edbi**, t\u00f4i \u0111\u00e3 n\u00e9n l\u1ea1i d\u01b0\u1edbi d\u1ea1ng dataFrame cho b\u1ea1n d\u1ec5 nh\u00ecn & so s\u00e1nh kh\u00e1ch quan.\n\n* ***\u0110\u01b0\u1ee3c r\u1ed3i! ch\u00fang ta kh\u00f4ng v\u00f2ng vo n\u1eefa, v\u00e0o vi\u1ec7c n\u00e0o!Ch\u00fac b\u1ea1n 1 ng\u00e0y t\u1ed1t l\u00e0nh...LOVE***","6a97206d":"**Th\u1ee7 T\u1ee5c**","18335e42":"***Ok! Nh\u01b0 c\u00e1c b\u1ea1n th\u1ea5y sau khi \u0111\u1ecdc d\u1eef li\u1ec7u ch\u00fang ta c\u00f3 50k c\u1ea3m x\u00fac, trong \u0111\u00f3 c\u00f3 25k c\u1ea3m x\u00fac t\u00edch c\u1ef1c (Positive) v\u00e0 25k c\u1ea3m x\u00fac ti\u00eau c\u1ef1c(Negative). Nh\u01b0ng \u0111\u00e2y ch\u1ec9 l\u00e0 d\u1eef li\u1ec7u th\u00f4 ch\u00fang ta c\u00f3, vi\u1ec7c ch\u00fang ta c\u1ea7n l\u00e0m s\u1ebd d\u1ef1 \u0111o\u00e1n l\u1ea1i c\u00e1c c\u1ea3m x\u00fac (sentiment) \u0111\u1ec3 c\u00f3 c\u00e1i nh\u00ecn kh\u00e1ch quan h\u01a1n v\u00e0 xem m\u00f4 h\u00ecnh n\u00e0o s\u1ebd l\u00e0m \u0111\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c d\u1ef1 \u0111o\u00e1n l\u00e0 cao nh\u1ea5t.***","b9198f59":"**Theo ph\u00e2n b\u1ed5, ph\u1ea7n l\u1edbn \u0111\u1ed9 d\u00e0i b\u00e0i vi\u1ebft n\u1eb1m trong kho\u1ea3ng 0\u20132000 v\u00e0 \u0111\u1ed9 d\u00e0i t\u1ed1i \u0111a, \u0111\u1ed9 d\u00e0i nh\u1ecf nh\u1ea5t v\u00e0 \u0111\u1ed9 d\u00e0i trung b\u00ecnh l\u1ea7n l\u01b0\u1ee3t l\u00e0 13704, 32, 1309.43102.**\n\n**\u0110i\u1ec3m c\u1ea7n l\u01b0u \u00fd \u1edf \u0111\u00e2y l\u00e0, \u0111\u1ed9 d\u00e0i c\u00e2u bao g\u1ed3m kho\u1ea3ng c\u00e1ch gi\u1eefa c\u00e1c t\u1eeb. N\u1ebfu b\u1ea1n mu\u1ed1n ph\u00e2n ph\u1ed1i kh\u00f4ng c\u00f3 kho\u1ea3ng tr\u1ed1ng, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng m\u00e3 d\u01b0\u1edbi \u0111\u00e2y**","ba72780c":"# **Vector h\u00f3a v\u0103n b\u1ea3n**\n   T\u00f4i s\u1ebd \u00e1p d\u1ee5ng 3 ph\u01b0\u01a1ng ph\u00e1p cho c\u00f4ng vi\u1ec7c n\u00e0y nh\u01b0 sau:\n\n*   **CountVectorizer (Bag of Words Model-M\u00f4 H\u00ecnh T\u00fai T\u1eeb)**\n*   **TfidfVectorizer (Bag of Words Model)**\n*   **Keras Tokenizer (Embedding)--> Ph\u1ea7n n\u00e0y t\u00f4i s\u1ebd n\u00f3i th\u00eam \u1ede M\u1ee4C NH\u00daNG T\u1eea**\n\n**CountVector & TF_IDF s\u1ebd l\u00e0 2 k\u0129 thu\u1eadt m\u00e0 t\u00f4i s\u1ebd c\u00e0i \u0111\u1eb7t,x\u1eed l\u00ed v\u00e0 ki\u1ec3m tra cho c\u00e1c m\u00f4 h\u00ecnh...**","5fcdbea9":"   # **Convolutional Neural Network with dropout**","a05b5a1c":"# **GOOD BYE (^_^) Thanks you very much, Thanks come from BAO BI!**\n\n**Class A1, Computer Science, Can Tho University, Vietnam**\n\n**FB:** https:\/\/www.facebook.com\/baobi1998\n\n**Kaggle:** https:\/\/www.kaggle.com\/lienchibaob1812254\n\n**github:** https:\/\/github.com\/lienchibao1998","d2dba3c8":"   # **M\u00f4 h\u00ecnh th\u1ee9 ba: Stochastic Gradient Descent Classifier(SGDC)**\n**Ok, C\u00d3 th\u1ec3 b\u1ea1n \u0111ang b\u1ecb r\u1ed1i x\u00edu... \u1ede m\u00f4 h\u00ecnh th\u1ee9 3 n\u00e0y,\u0111\u1ec3 ti\u1ebft ki\u1ec7m th\u1eddi gian cho b\u1ea1n th\u00ec t\u00f4i s\u1ebd g\u01a1m g\u1ecdn code l\u1ea1i v\u00e0 \u0111i nhanh ph\u1ea7n TfidfVectorizerv\u00e0 CountVectorizer b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng \"binary = True\" v\u00e0 \"binary = False\" lu\u00f4n... Ok ch\u1ee9! B\u1eaft \u0111\u1ea7u n\u00e0o!**\n\n**CH\u00da \u00dd: T\u1eeb m\u00f4 h\u00ecnh s\u1ed1 3 n\u00e0y tr\u1edf v\u1ec1 sau, TF-IDF t\u00f4i s\u1ebd s\u1eed d\u1ee5ng m\u1eb7c \u0111\u1ecbnh c\u00e0i s\u1eb5n \u1edf tr\u00ean v\u00e0 code nhanh, t\u00f4i ch\u1ec9 l\u1eb7p l\u1ea1i ph\u1ea7n countvectorier cho moi ng\u01b0\u1eddi d\u1ec5 ph\u00e2n bi\u1ec7t...Ok!**\n\nB\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ecdc th\u00ean t\u1ea1i \u0111\u00e2y:https:\/\/scikit-learn.org\/stable\/modules\/sgd.html","a7bb6cce":"**C\u00f3 th\u1ec3 th\u1ea5y r\u1eb1ng trong kho ch\u00fang ta c\u00f3 81301 d\u1eef li\u1ec7u... V\u00ec v\u1eady, t\u00f4i \u0111\u1ec1 xu\u1ea5t d\u00f9ng Chi-Square(Chi Ph\u00e2n ph\u1ed1i b\u00ecnh ph\u01b0\u01a1ng) khi d\u1eef li\u1ec7u c\u1ee7a ch\u00fang ta \u1edf d\u1ea1ng \u0111\u1ebfm t\u1ea7n su\u1ea5t v\u00e0 \u0111i\u1ec1u ch\u00fang ta quan t\u00e2m l\u00e0 s\u1ed1 l\u01b0\u1ee3ng \u0111\u1ed1i t\u01b0\u1ee3ng thu\u1ed9c c\u00e1c lo\u1ea1i kh\u00e1c nhau, Chi-Square s\u1ebd gi\u00fap ch\u00fang ta th\u1ef1c hi\u1ec7n vi\u1ec7c ki\u1ec3m tra g\u1ea7n \u0111\u00fang v\u1ec1 m\u1eb7t \u00fd ngh\u0129a \u0111\u1ed1i v\u1edbi s\u1ef1 li\u00ean k\u1ebft(association) gi\u1eefa hai bi\u1ebfn l\u1eadp nh\u00f3m (categorical variables). B\u1ea1n c\u00f3 th\u1ec3 l\u1ea5y bao nhi\u00eau features c\u0169ng \u0111\u01b0\u1ee3c(\u1edf \u0111\u00e2y t\u00f4i s\u1ebd l\u1ea5y ng\u1eabu nhi\u00ean 50000 features)**\n\nC\u00e1c b\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o Chi-Square t\u1ea1i: https:\/\/www.statisticssolutions.com\/free-resources\/directory-of-statistical-analyses\/using-chi-square-statistic-in-research\/","855bfb1a":"# **Nh\u1eadn x\u00e9t v\u1ec1 k\u1ebft qu\u1ea3 thu \u0111\u01b0\u1ee3c t\u1eeb 4 m\u00f4 h\u00ecnh:**\n\n**Ch\u00fang ta c\u00f3 th\u1ec3 th\u1ea5y r\u1eb1ng m\u00f4 h\u00ecnh LinearSVC(LSVC) c\u00f3 TF-IDF \u0111\u1ea1t \u0111\u1ed9 ch\u00ednh x\u00e1c cao nh\u1ea5t:90.29%.** V\u00ec v\u1eady, t\u00f4i s\u1ebd bi\u1ec3u di\u1ec5n cho b\u1ea1n th\u1ea5y v\u1ec1 k\u1ebft qu\u1ea3 d\u1ef1 \u0111o\u00e1n d\u1ef1 tr\u00ean t\u1eadp d\u1eef li\u1ec7u ch\u00fang ta c\u00f3 \u0111\u01b0\u1ee3c. Ok! \u0111i n\u00e0o","7865efc3":"**Ok! Gi\u1edd t\u00f4i s\u1ebd fit n\u00f3 v\u1edbi m\u00f4 h\u00ecnh Multinomial Naive Bayes.**","90cd44f9":"   # **M\u00f4 h\u00ecnh th\u1ee9 t\u01b0: H\u1ed3i Quy Logistic (Logistic regression)**\n\n   ***C\u0169ng nh\u01b0 m\u00f4 h\u00ecnh th\u1ee9 ba, t\u00f4i s\u1ebd code nhanh & thu g\u1ecdn code ph\u1ea7n n\u00e0y***","6d110e1f":"**\u0110\u1ed9 ch\u00ednh x\u00e1c khi s\u1eed d\u1ee5ng l\u1edbp RNN b\u1ed5 sung th\u00eam LSTM(2 l\u1edbp RNN + LSTM) + propout  l\u00e0 83%.**","6be630b0":"# Tr\u1ef1c Quan H\u00f3a (Visualization)\n**T\u00f4i s\u1ebd l\u00e0m v\u00e0i thao t\u00e1c \u0111\u00e1nh gi\u00e1 tr\u1ef1c quan h\u00f3a d\u1eef li\u1ec7u tr\u01b0\u1edbc khi \u0111\u01b0a ch\u00fang v\u00e0o m\u00f4 h\u00ecnh \u0111\u1ec3 hu\u1ea5n luy\u1ec7n**","14b8c4a6":"# **C\u00c0I \u0110\u1eb6T**","06c3338f":"**\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) fit SGD Classifier: 89.46%**\n___","ea668539":"***\u1ede \u0111\u00e2y,T\u00f4i mu\u1ed1n d\u1ef1 \u0111o\u00e1n \u0111\u00e1nh gi\u00e1 ng\u1eabu nhi\u00ean l\u00e0 poitive or negative(t\u00edch c\u1ef1c ho\u1eb7c ti\u00eau c\u1ef1c) b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng m\u00f4 h\u00ecnh \u0111\u00e3 t\u1ea1o. V\u00ec v\u1eady, b\u00e0i \u0111\u00e1nh gi\u00e1 s\u1ebd \u0111\u01b0\u1ee3c x\u1eed l\u00fd tr\u01b0\u1edbc t\u01b0\u01a1ng t\u1ef1 nh\u01b0 nh\u1eefng g\u00ec m\u00e0 t\u00f4i \u0111\u00e3 l\u00e0m trong t\u1eadp d\u1eef li\u1ec7u tr\u01b0\u1edbc khi hu\u1ea5n luy\u1ec7n, t\u1ee9c l\u00e0 c\u00e1c t\u1eeb s\u1ebd \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u1ed5i th\u00e0nh s\u1ed1 nguy\u00ean v\u00e0 \u0111\u1ed9 d\u00e0i t\u1ed1i \u0111a l\u00e0 100. Danh s\u00e1ch tr\u1ed1ng \u0111\u01b0\u1ee3c t\u1ea1o ra v\u00e0 s\u1ebd l\u01b0u tr\u1eef c\u00e1c gi\u00e1 tr\u1ecb. Cu\u1ed1i c\u00f9ng, t\u00f4i t\u1ea1o m\u1ed9t v\u00f2ng l\u1eb7p for \u0111\u1ec3 l\u1eb7p qua danh s\u00e1ch. Ch\u00fang ta s\u1ebd d\u1ef1 \u0111o\u00e1n \u0111\u01b0\u1ee3c \u0111\u00e1nh gi\u00e1 ng\u01b0\u1eddi xem th\u1ebf n\u00e0o?***\n\n**QUY \u01af\u1edaC:**\n\n* **D\u1ef1 \u0111o\u00e1n ng\u1eabu nhi\u00ean g\u1ea7n b\u1eb1ng 1 => \u0110\u00e1nh gi\u00e1 t\u00edch c\u1ef1c(Positive)**\n* **D\u1ef1 \u0111o\u00e1n ng\u1eabu nhi\u00ean = 0 => \u0110\u00e1nh gi\u00e1 ti\u00eau c\u1ef1c(Negative)**","ca0ba29d":"# V\u00ed d\u1ee5 V\u1ec1 Ti\u1ec1n X\u1eed L\u00ed V\u0103n B\u1ea3n Cho m\u1ed9t c\u00e2u","c9f5ba47":"**T\u00f4i s\u1ebd \u0111\u1eb7t k\u00edch th\u01b0\u1edbc t\u1ed1i \u0111a c\u1ee7a m\u1ed7i danh s\u00e1ch l\u00e0 100. N\u1ebfu danh s\u00e1ch n\u00e0o c\u00f3 maxlength > 100 s\u1ebd b\u1ecb c\u1eaft b\u1edbt v\u00e0 danh s\u00e1ch n\u00e0o c\u00f3 maxlength < 100 s\u1ebd \u0111\u01b0\u1ee3c th\u00eam 0 cho \u0111\u1ebfn khi c\u00f3 \u0111\u1ed9 d\u00e0i t\u1ed1i \u0111a = maxlength.D\u1ec5 hi\u1ec3u \u0111\u00fang kh\u00f4ng?**\n**Qu\u00e1 tr\u00ecnh n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 padding. \u0110o\u1ea1n code d\u01b0\u1edbi \u0111\u00e2y s\u1ebd t\u00ecm k\u00edch th\u01b0\u1edbc vocabulary v\u00e0 sau \u0111\u00f3 l\u00e0 perfom padding tr\u00ean c\u1ea3 X_train v\u00e0 X_test , tokenizer.word_index**","67fe64e7":"**\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng TF-IDF fit v\u1edbi m\u00f4 h\u00ecnh Multinomial Naive Bayes: 86.63%**\n\n**Ph\u00e2n ph\u1ed1i \u0111a th\u1ee9c th\u01b0\u1eddng y\u00eau c\u1ea7u s\u1ed1 feature s\u1ed1 nguy\u00ean. Tuy nhi\u00ean, trong th\u1ef1c t\u1ebf, c\u00e1c ph\u00e9p \u0111\u1ebfm ph\u00e2n s\u1ed1 nh\u01b0 tf-idf c\u0169ng c\u00f3 th\u1ec3 ho\u1ea1t \u0111\u1ed9ng. B\u00e2y gi\u1edd t\u00f4i s\u1ebd s\u1eed d\u1ee5ng CountVectorizer l\u00e0m m\u00f4 h\u00ecnh Bag-of-Words tr\u01b0\u1edbc khi \u00e1p d\u1ee5ng m\u00f4 h\u00ecnh MultinomialNB \u0111\u1ec3 xem th\u1ebf n\u00e0o nha.**\n\n***T\u00f4i s\u1ebd vect\u01a1 h\u00f3a b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng CountVectorizer (binary = False) v\u00e0 fit v\u1edbi m\u00f4 h\u00ecnh LinearSVC \u0111\u1ec3 ki\u1ec3m tra xem th\u1ebf n\u00e0o?***","a9cae6f0":"**\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng TF-IDF fit v\u1edbi m\u00f4 h\u00ecnh Linear SVC: \n90.29%**\n\n**Khoan! T\u00f4i s\u1ebd vect\u01a1 h\u00f3a b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng CountVectorizer (binary = False) v\u00e0 fit v\u1edbi m\u00f4 h\u00ecnh LinearSVC \u0111\u1ec3 ki\u1ec3m tra xem th\u1ebf n\u00e0o?**","e2a24ea0":"# **Ti\u1ec1n x\u1eed l\u00ed d\u1eef li\u1ec7u cho t\u1eadp d\u1eef li\u1ec7u 50K**\n**Ok! M\u1ecdi th\u1ee9 g\u1ea7n \u1ed5n! Gi\u1edd \u0111\u1ebfn l\u00fac t\u00f4i s\u1ebd cho l\u00e0m s\u1ea1ch to\u00e0n t\u1eadp d\u1eef li\u1ec7u... T\u00f4i s\u1ebd chia l\u00e0m 2 ph\u1ea7n.. Ph\u1ea7n train v\u00e0 ph\u1ea7n test \u0111\u1ec3 l\u00e0m s\u1ea1ch... (^_^)vui l\u00f2ng ch\u1edd v\u00ec d\u1eef li\u1ec7u l\u1edbn s\u1ebd m\u1ea5t nhi\u1ec1u th\u1eddi gian c\u1ee7a b\u1ea1n**","4ed672f6":"**\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = False) fit v\u1edbi m\u00f4 h\u00ecnh Linear SVC: 89.77%**\n\n***B\u00e2y gi\u1edd t\u00f4i s\u1ebd vect\u01a1 h\u00f3a b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng CountVectorizer (binary = True) v\u00e0 fit v\u1edbi m\u00f4 h\u00ecnh LinearSVC \u0111\u1ec3 xem k\u1ebft qu\u1ea3 so v\u1edbi (binary = false) s\u1ebd th\u1ebf n\u00e0o?***","5a9da968":"   # **M\u1ea1ng n\u01a1-ron h\u1ed3i quy (RNN - Recurrent Neural Network) + LSTM**\n   \n   **M\u1ea1ng n\u01a1-ron h\u1ed3i quy ho\u1ea1t \u0111\u1ed9ng t\u1ed1t tr\u00ean d\u1eef li\u1ec7u sequence. D\u1eef li\u1ec7u v\u0103n b\u1ea3n l\u00e0 m\u1ed9t chu\u1ed7i sequence data n\u00ean RNN l\u00e0 l\u1ef1a ch\u1ecdn t\u1ed1t \u0111\u1ec3 gi\u1ea3i quy\u1ebft c\u00e1c v\u1ea5n \u0111\u1ec1 li\u00ean quan \u0111\u1ebfn v\u0103n b\u1ea3n.**\n* **Th\u1ee9 nh\u1ea5t, t\u00f4i x\u00e2y d\u1ef1ng c\u1ea5u tr\u00fac m\u00f4 h\u00ecnh v\u00e0 t\u1ea1o m\u1ed9t l\u1edbp nh\u00fang b\u1eb1ng c\u00e1ch ch\u1ec9 \u0111\u1ecbnh c\u00e1c tham s\u1ed1 m\u00e0 ch\u00fang ta \u0111\u00e3 t\u1ea1o tr\u01b0\u1edbc \u0111\u00f3.**\n* **Ti\u1ebfp theo,t\u1ea1o m\u1ea1ng n\u01a1-ron l\u1eb7p l\u1ea1i. \u1ede \u0111\u00e2y, t\u00f4i s\u1ebd s\u1eed d\u1ee5ng LTSM-Long Short Term Memory networks(M\u1ea1ng b\u1ed9 nh\u1edb d\u00e0i-ng\u1eafn).**\n* **Hai chi\u1ec1u c\u00f3 ngh\u0129a l\u00e0 tr\u00ecnh t\u1ef1 x\u1eed l\u00fd RNN t\u1eeb \u0111\u1ea7u \u0111\u1ebfn cu\u1ed1i v\u00e0 ng\u01b0\u1ee3c l\u1ea1i \u0110i\u1ec1u n\u00e0y s\u1ebd l\u00e0m cho m\u00f4 h\u00ecnh ho\u1ea1t \u0111\u1ed9ng t\u1ed1t h\u01a1n.\u00f4i \u0111\u00e3 th\u00eam m\u1ed9t l\u1edbp \u1ea9n kh\u00e1c v\u00e0 bao g\u1ed3m m\u1ed9t ch\u1ee9c n\u0103ng k\u00edch ho\u1ea1t l\u00e0 relu.s**\n* **Cu\u1ed1i c\u00f9ng, t\u00f4i th\u00eam m\u1ed9t l\u1edbp dense v\u1edbi ch\u1ee9c n\u0103ng k\u00edch ho\u1ea1t sigmoid.**\n\n* B\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o t\u1ea1i \u0111\u00e2y:https:\/\/nttuan8.com\/bai-14-long-short-term-memory-lstm\/\n* B\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o t\u1ea1i \u0111\u00e2y: https:\/\/dominhhai.github.io\/vi\/2017\/10\/what-is-rnn\/","a5ad4df1":"**\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = False) fit Multinomial Naive Bayes: 88.75%**","f1b271a6":"   # **M\u1ea1ng N\u01a1-ron H\u1ed3i Quy V\u1edbi (2 RNN layer or 2 LSTM layer) + dropout**\n   **T\u01af\u01a0NG T\u1ef0 nh\u01b0 tr\u00ean: Nh\u01b0ng \u1edf \u0111\u00e2y t\u00f4i th\u00eam v\u00e0o DROPOUT, ta \u0111\u01b0\u1ee3c:**\n* **Th\u1ee9 nh\u1ea5t, t\u00f4i x\u00e2y d\u1ef1ng c\u1ea5u tr\u00fac m\u00f4 h\u00ecnh v\u00e0 t\u1ea1o m\u1ed9t l\u1edbp nh\u00fang b\u1eb1ng c\u00e1ch ch\u1ec9 \u0111\u1ecbnh c\u00e1c tham s\u1ed1 m\u00e0 ch\u00fang ta \u0111\u00e3 t\u1ea1o tr\u01b0\u1edbc \u0111\u00f3.**\n* **Ti\u1ebfp theo,t\u1ea1o m\u1ea1ng n\u01a1-ron l\u1eb7p l\u1ea1i. \u1ede \u0111\u00e2y, t\u00f4i s\u1ebd s\u1eed d\u1ee5ng LTSM-Long Short Term Memory networks(M\u1ea1ng b\u1ed9 nh\u1edb d\u00e0i-ng\u1eafn).**\n* **Hai chi\u1ec1u c\u00f3 ngh\u0129a l\u00e0 tr\u00ecnh t\u1ef1 x\u1eed l\u00fd RNN t\u1eeb \u0111\u1ea7u \u0111\u1ebfn cu\u1ed1i v\u00e0 ng\u01b0\u1ee3c l\u1ea1i \u0110i\u1ec1u n\u00e0y s\u1ebd l\u00e0m cho m\u00f4 h\u00ecnh ho\u1ea1t \u0111\u1ed9ng t\u1ed1t h\u01a1n.\u00f4i \u0111\u00e3 th\u00eam m\u1ed9t l\u1edbp \u1ea9n kh\u00e1c v\u00e0 bao g\u1ed3m m\u1ed9t ch\u1ee9c n\u0103ng k\u00edch ho\u1ea1t l\u00e0 relu**\n* **th\u00eam Dropout \u0111\u1ec3 ng\u0103n m\u00f4 h\u00ecnh kh\u00f4ng v\u1eeba v\u1eb7n**\n* **lo\u1ea1i b\u1ecf ng\u1eabu nhi\u00ean m\u1ed9t s\u1ed1 t\u1ebf b\u00e0o th\u1ea7n kinh trong c\u00e1c l\u1edbp \u1ea9n**\n* **Cu\u1ed1i c\u00f9ng, t\u00f4i th\u00eam m\u1ed9t l\u1edbp dense v\u1edbi ch\u1ee9c n\u0103ng k\u00edch ho\u1ea1t sigmoid.**","1aa7d91c":"# **\u0110\u1eccC T\u1eacP & HI\u1ec2N TH\u1eca T\u1eacP D\u1eee LI\u1ec6U**","24acf1a2":"***Ok! Tr\u01b0\u1edbc khi d\u1ef1 \u0111o\u00e1n m\u00f4 h\u00ecnh ch\u00fang ta ph\u1ea3i l\u00e0m s\u1ea1ch d\u1eef li\u1ec7u (ti\u1ec1n x\u1eed l\u00ed d\u1eef li\u1ec7u). \u0110\u1ec3 qu\u00e1 tr\u00ecnh l\u00e0m s\u1ea1ch d\u1eef li\u1ec7u di\u1ec5n ra hi\u1ec7u qu\u1ea3 v\u00e0 quy m\u00f4 v\u1edbi kh\u1ed1i l\u01b0\u1ee3ng d\u1eef li\u1ec7u l\u1edbn, ch\u00fang ta c\u1ea7n x\u00e2y d\u1ef1ng h\u00e0m l\u00e0m s\u1ea1ch d\u1eef li\u1ec7u ng\u1eabu nhi\u00ean 1 c\u00e2u trong t\u1eadp d\u1eef li\u1ec7u. \u0110\u01b0\u1ee3c r\u1ed3i! t\u1edbi \u0111\u00e2y ch\u1eafc b\u1ea1n \u0111\u00e3 hi\u1ec3u r\u1ed3i. T\u00f4i s\u1ebd d\u00f9ng d\u00f2ng th\u1ee9 3 trong t\u1eadp d\u1eef li\u1ec7u...loc[2]***","7d9f0499":"# **M\u00f4 h\u00ecnh h\u1ecdc S\u00e2u (Deep Learning Models)**\n\n***\u1ede m\u00f4 h\u00ecnh h\u1ecdc s\u00e2u th\u00ec n\u00f3 h\u01a1i kh\u00e1c so v\u1edbi c\u00e1c m\u00f4 h\u00ecnh m\u00e1y h\u1ecdc... Nh\u01b0ng khi t\u00ecm hi\u1ec3u th\u00ec m\u00ecnh th\u1ea5y c\u00f3 r\u1ea5t nhi\u1ec1u th\u1ee9 hay m\u00e0 ch\u00fang ta c\u00f3 th\u1ec3 kh\u00e1m ph\u00e1 khi d\u1ef1 \u0111o\u00e1n cho t\u1eadp d\u1eef li\u1ec7u ch\u00fang ta \u0111ang x\u00e9t...Come on! c\u00f9ng \u0111i v\u1edbi t\u00f4i n\u00e0o! GO!***","71e6aed0":"# **Word cloud for positive review words**","0b6846b6":"**\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng TF_IDF fit v\u1edbi m\u00f4 h\u00ecnh SGD Classifier: 88.67%**","35cf0bbb":"# **K\u1ebft Lu\u1eadn**\n* **C\u1ea3 5 gi\u1ea3i thu\u1eadt th\u00ec gi\u1ea3i thu\u1eadt hi\u1ec3u qu\u1ea3 nh\u1ea5t l\u00e0 Linear SVC v\u1edbi \u0111\u1ed9 ch\u00ednh x\u00e1c 90.29 %**\n* **T\u1ea5t c\u1ea3 c\u00e1c gi\u1ea3i thu\u1eadt c\u00f2n l\u1ea1i \u0111i\u1ec1u ho\u1ea1t \u0111\u1ed9ng t\u1ed1t v\u00e0 hi\u1ec7u qu\u1ea3 c\u0169ng kh\u00e1 cao**\n* **Vi\u1ec7c t\u1ed1i \u01b0u h\u00f3a m\u00f4 h\u00ecnh c\u00f3 th\u1ec3 mang l\u1ea1i k\u1ebft qu\u1ea3 t\u1ed1t h\u01a1n khi s\u1eed d\u1ee5ng nhi\u1ec1u d\u1eef li\u1ec7u h\u01a1n.**\n* **\u0110\u1ed9 ch\u00ednh x\u00e1c t\u1eebng m\u00f4 h\u00ecnh**\n    * **1.  LSVC:**\n        * **\u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng TF-IDF fit v\u1edbi m\u00f4 h\u00ecnh Linear SVC: 90.29%**\n        * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = False) fit Linear SVC: 89.77%\n        * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = False) fit Linear SVC: 89.46%\n\n    * **2.  MNB:**\n        * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng TF-IDF fit v\u1edbi m\u00f4 h\u00ecnh Multinomial Naive Bayes: 86.63%\n        * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = False) fit Multinomial Naive Bayes: 88.75%\n        * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) fit Multinomial Naive Bayes: 89.10%\n\n    * **3.  SGDC:**\n        * TF-IDF: \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a SGD Classifier: 88.67%\n        * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a SGD Classifier binary = False: 85.84%\n        * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) fit SGD Classifier: 85.84%\n\n    * **4.  LR:**\n        * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng TF-IDF fit v\u1edbi m\u00f4 h\u00ecnh h\u1ed3i quy logistic: 88.50%\n        * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer fit v\u1edbi m\u00f4 h\u00ecnh h\u1ed3i quy logistic: 85.62%\n        * \u0110\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng CountVectorizer (binary = True) fit v\u1edbi m\u00f4 h\u00ecnh h\u1ed3i quy logistic: 89.65%\n        \n* **Ngo\u00e0i ra,vi\u1ec7c s\u1eed d\u1ee5ng ph\u01b0\u01a1ng ph\u00e1p h\u1ecdc s\u00e2u th\u00ec:**\n        * \u0110\u1ed9 ch\u00ednh x\u00e1c khi s\u1eed d\u1ee5ng CNN tr\u00ean t\u1eadp d\u1eef li\u1ec7u l\u00e0 83.70%.\n        * \u0110i\u1ec3m ch\u00ednh x\u00e1c khi s\u1eed d\u1ee5ng m\u1ea1ng n\u01a1-ron h\u1ecdc s\u00e2u \u0111\u01a1n gi\u1ea3n l\u00e0 71.6%%\n        * \u0110\u1ed9 ch\u00ednh x\u00e1c khi s\u1eed d\u1ee5ng l\u1edbp RNN b\u1ed5 sung th\u00eam LSTM(2 l\u1edbp RNN + LSTM) l\u00e0 83%.\n        * \u0110\u1ed9 ch\u00ednh x\u00e1c khi s\u1eed d\u1ee5ng 2 l\u1edbp RNN v\u1edbi LSTM l\u00e0 81.03%\n        * M\u00f4 h\u00ecnh CNN cho \u0111\u1ed9 ch\u00ednh x\u00e1c t\u1ed1t nh\u1ea5t trong s\u1ed1 t\u1ea5t c\u1ea3 v\u1edbi 83.70% tr\u00ean t\u1eadp d\u1eef li\u1ec7u train v\u00e0 test.\n        * S\u1eed d\u1ee5ng RNN (LSTM) v\u1edbi hai l\u1edbp \u1ea9n c\u0169ng l\u00e0 c\u00e1ch t\u1ed1t nh\u1ea5t mang l\u1ea1i \u0111\u1ed9 ch\u00ednh x\u00e1c 81.03% tr\u00ean c\u1ea3 t\u1eadp d\u1eef li\u1ec7u \u0111\u00e0o t\u1ea1o v\u00e0 ki\u1ec3m tra.\n     * **M\u00f4 h\u00ecnh M\u1ea1ng N\u01a1-ron hi\u1ec7u qu\u1ea3 \u0111\u1ec3 ph\u00e2n t\u00edch c\u1ea3m x\u00fac tr\u00ean c\u00e1c \u0111\u00e1nh gi\u00e1 IMDB**","253a4911":"**Ok! \u0110\u01b0\u1ee3c r\u1ed3i! Ti\u1ebfp \u0111\u1ebfn ch\u00fang ta s\u1ebd ti\u1ebfp c\u1eadn s\u1eed d\u1ee5ng TfidfVectorizer (TF-IDF) & T\u00ednh (TF * IDF) c\u1ee7a m\u00f4 h\u00ecnh t\u00fai t\u1eeb**"}}