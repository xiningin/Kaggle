{"cell_type":{"4d6bac7f":"code","ac00e87e":"code","20e27f5d":"code","beda940e":"code","a5c7afe6":"code","2ef495de":"code","0fff3482":"code","b425b7c5":"code","15a4b2a0":"code","0d80cd76":"code","88957df4":"code","2ebd14ba":"code","c7b712e7":"code","e59561c3":"code","ca5e5ee2":"code","77d9f922":"code","1515cfd5":"code","6e728a7f":"code","3b538f4f":"code","3b72f64f":"code","47d21d9b":"code","ed457a53":"code","4e2dd47f":"code","8673da9e":"code","4777395b":"code","65aaf101":"code","dda4db79":"code","49d3346b":"code","2ef704ab":"code","8b42aec9":"code","5ba122c9":"code","469504aa":"code","8dafd091":"code","9ef36b48":"code","41a5a51e":"code","4a4ef683":"code","50720b70":"code","736d534e":"code","6380fb94":"code","ac9d8018":"code","0d59a58b":"code","399dfcea":"code","385d96eb":"code","bb2673d3":"code","92ecccbd":"code","7a236059":"code","ae4ec238":"code","fc533c94":"code","8d09fd88":"code","0ae6d436":"code","f87a8788":"code","46ceb805":"code","6dbce32d":"markdown","827557c4":"markdown","cf60982c":"markdown","e71d77f2":"markdown","c0a60f47":"markdown","19d5f19a":"markdown","bc18d2d2":"markdown","811883f3":"markdown","f70be2ab":"markdown","ffb481cf":"markdown","8282b74f":"markdown","14f56229":"markdown","045cf1af":"markdown","28acf108":"markdown","f358ff54":"markdown","155914df":"markdown","23279eb3":"markdown","572ff72e":"markdown","6f6510be":"markdown","463b8cde":"markdown","57b6f1f1":"markdown","7987d7a6":"markdown","b6dc5ad4":"markdown","545c67fd":"markdown","e90e4be3":"markdown","6236ab07":"markdown","d6223bd7":"markdown","0da24e6e":"markdown","e2640ff1":"markdown","60baf2fd":"markdown","af141bb5":"markdown","00bf3da9":"markdown","a1010aec":"markdown","1ea861f1":"markdown","722fc0bb":"markdown","4e434214":"markdown","7bc88656":"markdown","6baa7c0b":"markdown","5a0f71eb":"markdown","8bc1c30d":"markdown","2c22833f":"markdown","5f771bbd":"markdown","8851decf":"markdown","cfe4567b":"markdown","4f8185c5":"markdown","0f66893e":"markdown","65ba9c07":"markdown","2cef1abb":"markdown","f272eb6f":"markdown","a217fb39":"markdown"},"source":{"4d6bac7f":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","ac00e87e":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\ncombine = [train_df, test_df]","20e27f5d":"print(train_df.columns.values)","beda940e":"# preview the data\ntrain_df.head()","a5c7afe6":"train_df.info()\nprint('_'*40)\ntest_df.info()","2ef495de":"train_df.describe()\n# Review survived rate using `percentiles=[.61, .62]` knowing our problem description mentions 38% survival rate.\n# Review Parch distribution using `percentiles=[.75, .8]`\n# SibSp distribution `[.68, .69]`\n# Age and Fare `[.1, .2, .3, .4, .5, .6, .7, .8, .9, .99]`","0fff3482":"train_df.describe(include=['O'])","b425b7c5":"# Pclass(\u4e57\u5ba2\u306e\u968e\u7d1a)\u3054\u3068\u306e\u751f\u5b58\u7387\ntrain_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","15a4b2a0":"# Sex(\u4e57\u5ba2\u306e\u6027\u5225)\u3054\u3068\u306e\u751f\u5b58\u7387\ntrain_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","0d80cd76":"# SibSp(\u4e57\u5ba2\u306e\u5144\u5f1f\/\u914d\u5076\u8005)\u3054\u3068\u306e\u751f\u5b58\u7387\ntrain_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","88957df4":"# Parch(\u4e57\u5ba2\u306e\u4e21\u89aa\/\u5b50\u4f9b)\u3054\u3068\u306e\u751f\u5b58\u7387\ntrain_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","2ebd14ba":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","c7b712e7":"# grid = sns.FacetGrid(train_df, col='Pclass', hue='Survived')\ngrid = sns.FacetGrid(train_df, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","e59561c3":"# grid = sns.FacetGrid(train_df, col='Embarked')\ngrid = sns.FacetGrid(train_df, row='Embarked', size=2.2, aspect=1.6)\ngrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\ngrid.add_legend()","ca5e5ee2":"# grid = sns.FacetGrid(train_df, col='Embarked', hue='Survived', palette={0: 'k', 1: 'w'})\ngrid = sns.FacetGrid(train_df, row='Embarked', col='Survived', size=2.2, aspect=1.6)\ngrid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\ngrid.add_legend()","77d9f922":"print(\"Before\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape)\n\ntrain_df = train_df.drop(['Ticket', 'Cabin'], axis=1)\ntest_df = test_df.drop(['Ticket', 'Cabin'], axis=1)\ncombine = [train_df, test_df]\n\n\"After\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape","1515cfd5":"for dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(train_df['Title'], train_df['Sex'])","6e728a7f":"for dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    \ntrain_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","3b538f4f":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n\ntrain_df.head()","3b72f64f":"train_df = train_df.drop(['Name', 'PassengerId'], axis=1)\ntest_df = test_df.drop(['Name'], axis=1)\ncombine = [train_df, test_df]\ntrain_df.shape, test_df.shape","47d21d9b":"for dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n\ntrain_df.head()","ed457a53":"# grid = sns.FacetGrid(train_df, col='Pclass', hue='Gender')\ngrid = sns.FacetGrid(train_df, row='Pclass', col='Sex', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend()","4e2dd47f":"guess_ages = np.zeros((2,3))\nguess_ages","8673da9e":"for dataset in combine:\n    for i in range(0, 2):\n        for j in range(0, 3):\n            guess_df = dataset[(dataset['Sex'] == i) & \\\n                                  (dataset['Pclass'] == j+1)]['Age'].dropna()\n\n            # age_mean = guess_df.mean()\n            # age_std = guess_df.std()\n            # age_guess = rnd.uniform(age_mean - age_std, age_mean + age_std)\n\n            age_guess = guess_df.median()\n\n            # Convert random age float to nearest .5 age\n            guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n            \n    for i in range(0, 2):\n        for j in range(0, 3):\n            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n                    'Age'] = guess_ages[i,j]\n\n    dataset['Age'] = dataset['Age'].astype(int)\n\ntrain_df.head()","4777395b":"train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\ntrain_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)","65aaf101":"for dataset in combine:    \n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']\ntrain_df.head()","dda4db79":"train_df = train_df.drop(['AgeBand'], axis=1)\ncombine = [train_df, test_df]\ntrain_df.head()","49d3346b":"for dataset in combine:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n\ntrain_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)","2ef704ab":"for dataset in combine:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n\ntrain_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()","8b42aec9":"train_df = train_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ntest_df = test_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ncombine = [train_df, test_df]\n\ntrain_df.head()","5ba122c9":"for dataset in combine:\n    dataset['Age*Class'] = dataset.Age * dataset.Pclass\n\ntrain_df.loc[:, ['Age*Class', 'Age', 'Pclass']].head(10)","469504aa":"freq_port = train_df.Embarked.dropna().mode()[0]\nfreq_port","8dafd091":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    \ntrain_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","9ef36b48":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntrain_df.head()","41a5a51e":"test_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\ntest_df.head()","4a4ef683":"train_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\ntrain_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)","50720b70":"for dataset in combine:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ntrain_df = train_df.drop(['FareBand'], axis=1)\ncombine = [train_df, test_df]\n    \ntrain_df.head(10)","736d534e":"test_df.head(10)","6380fb94":"X_train = train_df.drop(\"Survived\", axis=1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","ac9d8018":"# Logistic Regression\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","0d59a58b":"coeff_df = pd.DataFrame(train_df.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False)","399dfcea":"# Support Vector Machines\n\nsvc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc","385d96eb":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","bb2673d3":"# Gaussian Naive Bayes\n\ngaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nacc_gaussian","92ecccbd":"# Perceptron\n\nperceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\nacc_perceptron","7a236059":"# Linear SVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\nacc_linear_svc","ae4ec238":"# Stochastic Gradient Descent\n\nsgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\nacc_sgd","fc533c94":"# Decision Tree\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","8d09fd88":"# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","0ae6d436":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_linear_svc, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","f87a8788":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })","46ceb805":"# submission.to_csv('..\/output\/submission.csv', index=False)","6dbce32d":"## Model, predict and solve\n\nNow we are ready to train a model and predict the required solution. There are 60+ predictive modelling algorithms to choose from. We must understand the type of problem and solution requirement to narrow down to a select few models which we can evaluate. Our problem is a classification and regression problem. We want to identify relationship between output (Survived or not) with other variables or features (Gender, Age, Port...). We are also perfoming a category of machine learning which is called supervised learning as we are training our model with a given dataset. With these two criteria - Supervised Learning plus Classification and Regression, we can narrow down our choice of models to a few. These include:\n\n- Logistic Regression\n- KNN or k-Nearest Neighbors\n- Support Vector Machines\n- Naive Bayes classifier\n- Decision Tree\n- Random Forrest\n- Perceptron\n- Artificial neural network\n- RVM or Relevance Vector Machine","827557c4":"We can create another feature called IsAlone.","cf60982c":"## References\n\nThis notebook has been created based on great work done solving the Titanic competition and other sources.\n\n- [A journey through Titanic](https:\/\/www.kaggle.com\/omarelgabry\/titanic\/a-journey-through-titanic)\n- [Getting Started with Pandas: Kaggle's Titanic Competition](https:\/\/www.kaggle.com\/c\/titanic\/details\/getting-started-with-random-forests)\n- [Titanic Best Working Classifier](https:\/\/www.kaggle.com\/sinakhorami\/titanic\/titanic-best-working-classifier)","e71d77f2":"Fork from: https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutionsm\nCompetition: https:\/\/www.kaggle.com\/c\/titanic","c0a60f47":"Let us start by preparing an empty array to contain guessed Age values based on Pclass x Gender combinations.","19d5f19a":"### Converting categorical feature to numeric\n\nWe can now convert the EmbarkedFill feature by creating a new numeric Port feature.","bc18d2d2":"## \u8981\u7d04\u7d71\u8a08\u91cf\u306b\u3088\u308b\u5206\u6790\n\nPandas\u306f\uff0c\u6b21\u306e\u554f\u3044\u306b\u7c21\u5358\u306b\u7b54\u3048\u308b\u3088\u3046\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8981\u7d04\u3059\u308b\u3053\u3068\u306b\u5f79\u7acb\u3061\u307e\u3059\uff0e\n\n> ***\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e2d\u3067\uff0c\u3069\u306e\u7279\u5fb4\u91cf\u304c\u5229\u7528\u53ef\u80fd\u306a\u306e\u304b?***\n\n\u7279\u5fb4\u91cf\u3092\u76f4\u63a5\u64cd\u4f5c\/\u5206\u6790\u3059\u308b\u305f\u3081\u306b\uff0c\u7279\u5fb4\u91cf\u306e\u540d\u524d\u3092\u8a18\u9332\u3057\u3066\u304a\u304d\u307e\u3059\uff0e\u3053\u308c\u3089\u306e\u7279\u5fb4\u91cf\u306e\u540d\u524d\u306f\uff0c[Kaggle data page](https:\/\/www.kaggle.com\/c\/titanic\/data)\u3067\u8ff0\u3079\u3089\u308c\u3066\u3044\u307e\u3059.","811883f3":"### \u76f8\u95a2\u95a2\u4fc2 (\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570-\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570)\n\n\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u3068\u76ee\u6a19\u5909\u6570(Survived)\u3068\u306e\u76f8\u95a2\u95a2\u4fc2\u3092\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n**\u89b3\u5bdf**\n\n- \u5973\u6027\u306e\u4e57\u5ba2\u306f\uff0c\u7537\u6027\u306e\u4e57\u5ba2\u3088\u308a\u3082\u826f\u3044\u751f\u5b58\u7387\u3092\u3082\u3063\u3066\u3044\u305f\uff0e (classifying #1)\n- Embarked=C\u306e\u4e2d\u306b\u306f\uff0c\u9ad8\u3044\u751f\u5b58\u7387\u3092\u3082\u3064\u7537\u6027\u3068\u3044\u3046\u4f8b\u5916\u3082\u3044\u305f\uff0e\u3053\u308c\u306fPclass\u3068Embarked\u306e\u9593\u306e\u76f8\u95a2\u306b\u306a\u308b\u3057\uff0cPclass\u3068Survived\u3068\u306e\u76f8\u95a2\u95a2\u4fc2\u306b\u3064\u306a\u304c\u308b\uff0eEmbarked\u3068Survived\u3068\u306e\u76f4\u63a5\u7684\u306a\u76f8\u95a2\u95a2\u4fc2\u306f\u5fc5\u305a\u3057\u3082\u5fc5\u8981\u306a\u3044\uff0e\n- Pclass=3\u306e\u5973\u6027\u306f\uff0cPclass=2 (C, Q\u30dd\u30fc\u30c8) \u3068\u6bd4\u8f03\u3057\u3066\uff0c\u826f\u3044\u751f\u5b58\u7387\u3092\u3082\u3063\u3066\u3044\u305f\uff0e (completing #2)\n- Pclass=3\u306e\u7537\u6027\u306e\u4e2d\u3067\uff0cEmbarked(\u4e57\u8239\u30dd\u30fc\u30c8)\u306f\u751f\u5b58\u7387\u3092\u5909\u5316\u3055\u305b\u3066\u3044\u305f\uff0e (Correlating #1)\n\n**\u6c7a\u5b9a**\n\n- Sex\u3092\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u306b\u8ffd\u52a0\u3059\u308b\n- Embarked\u306e\u6b20\u640d\u5024\u3092\u88dc\u5b8c\u3057\uff0c\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u306b\u8ffd\u52a0\u3059\u308b\uff0e","f70be2ab":"### \u76f8\u95a2\u95a2\u4fc2 (\u6570\u5024\u5909\u6570-\u9806\u5e8f\u5909\u6570)\n\n1\u3064\u306e\u30d7\u30ed\u30c3\u30c8\u3092\u4f7f\u3063\u3066\u76f8\u95a2\u95a2\u4fc2\u3092\u7279\u5b9a\u3059\u308b\u305f\u3081\u306b\u8907\u6570\u306e\u7279\u5fb4\u91cf\u3092\u7d50\u5408\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u3053\u308c\u306f\u6570\u7684\u306a\u5024\u3092\u3068\u308b\u6570\u5024\u5909\u6570\/\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306b\u3088\u3063\u3066\u7247\u4ed8\u3051\u3089\u308c\u307e\u3059\uff0e\n\n**\u89b3\u5bdf**\n\n- Pclass=3\u306e\u4e57\u5ba2\u304c\u307b\u3068\u3093\u3069\u3067\u3059\u304c\uff0c\u305d\u306e\u307b\u3068\u3093\u3069\u306f\u751f\u5b58\u3057\u306a\u304b\u3063\u305f\uff0e\u6211\u3005\u306e\u60f3\u5b9a\u304c\u78ba\u8a8d\u3055\u308c\u305f\uff0e (classifying #2)\n- Pclass=2\u3068Pclass=3\u306e\u4e73\u5e7c\u5150\u306e\u4e57\u5ba2\u306f\u307b\u3068\u3093\u3069\u751f\u5b58\u3057\u305f\uff0e\u3088\u3063\u3066\u6211\u3005\u306e\u60f3\u5b9a\u306f\u5b9a\u91cf\u5316\u3057\u305f\uff0e (classifying #2)\n- Pclass=1\u306e\u4e57\u5ba2\u306e\u307b\u3068\u3093\u3069\u304c\u751f\u5b58\u3057\u305f\uff0e\u6211\u3005\u306e\u60f3\u5b9a\u304c\u78ba\u8a8d\u3055\u308c\u305f\uff0e (classifying #3)\n- Pclass\u306f\u4e57\u5ba2\u306e\u5e74\u9f62(Age)\u306e\u5206\u5e03\u306b\u3088\u3063\u3066\u5909\u5316\u3059\u308b\uff0e\n\n**\u6c7a\u5b9a**\n\n- \u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u306e\u305f\u3081\u306bPclass\u3092\u8003\u616e\u3059\u308b\uff0e","ffb481cf":"We can replace many titles with a more common name or classify them as `Rare`.","8282b74f":"> ***\u3069\u306e\u7279\u5fb4\u91cf\u304c\u6df7\u5408\u30c7\u30fc\u30bf\u578b\u306a\u306e\u304b\uff1f***\n\n\u540c\u3058\u7279\u5fb4\u91cf\u306e\u4e2d\u306e\u6570\u5024\u578b\/\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8+\u6570\u5024\u578b\u306e\u30c7\u30fc\u30bf\uff0e\u76ee\u6a19\u3092\u4fee\u6b63\u3059\u308b\u305f\u3081\u306e\u5019\u88dc\u304c\u3042\u308b\uff0e\n\n- Ticket\u306f\u6570\u5024\u578b&\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u578b\u306e\u6df7\u5408\u3067\u3059\uff0eCabin\u306f\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u578b\u3067\u3059\uff0e\n\n> ***\u3069\u306e\u7279\u5fb4\u91cf\u304c\u6b20\u640d\u5024\/\u8aa4\u690d\u3092\u542b\u3093\u3067\u3044\u308b\u306e\uff1f***\n\n\u3053\u308c\u306f\uff0c\u5927\u304d\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5bfe\u3057\u3066\u30ec\u30d3\u30e5\u30fc\u3092\u884c\u3046\u3053\u3068\u306f\u5927\u5909\u3067\u3059\u304c\uff0c\u3088\u308a\u5c0f\u3055\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u306e\u5c11\u91cf\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u5834\u5408\u306f\uff0c\u30ec\u30d3\u30e5\u30fc\u3092\u884c\u3046\u3053\u3068\u3067\u300c\u3069\u306e\u7279\u5fb4\u91cf\u304c\u4fee\u6b63\u3092\u5fc5\u8981\u3068\u3059\u308b\u306e\u304b\u300d\u304c\u5373\u5ea7\u306b\u308f\u304b\u308a\u307e\u3059\uff0e\n\n- \u4ee3\u7406\u540d\/\u7701\u7565\u540d\u306e\u305f\u3081\u306b\u4f7f\u308f\u308c\u308b\u30bf\u30a4\u30c8\u30eb\uff0c\u4e38\u62ec\u5f27\uff0c\u30af\u30aa\u30fc\u30c4\u3092\u542b\u3080\u540d\u524d\u3092\u8a18\u8ff0\u3059\u308b\u305f\u3081\u306e\u65b9\u6cd5\u304c\u3044\u304f\u3064\u304b\u3042\u308b\u305f\u3081\uff0cName\u306f\u6b20\u640d\u5024\/\u8aa4\u690d\u3092\u542b\u3093\u3067\u3044\u307e\u3059\uff0e","14f56229":"This model uses a decision tree as a predictive model which maps features (tree branches) to conclusions about the target value (tree leaves). Tree models where the target variable can take a finite set of values are called classification trees; in these tree structures, leaves represent class labels and branches represent conjunctions of features that lead to those class labels. Decision trees where the target variable can take continuous values (typically real numbers) are called regression trees. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Decision_tree_learning).\n\nThe model confidence score is the highest among models evaluated so far.","045cf1af":"### \u65e2\u5b58\u306e\u7279\u5fb4\u91cf\u304b\u3089\u9078\u629c\u3057\uff0c\u65b0\u3057\u3044\u7279\u5fb4\u91cf\u3092\u4f5c\u308b\n\nName\u3068PassesngerId\u3092\u524a\u9664\u3059\u308b\u524d\u306b\uff0c\nWe want to analyze if Name feature can be engineered to extract titles and test correlation between titles and survival, before dropping Name and PassengerId features.\n\nIn the following code we extract Title feature using regular expressions. The RegEx pattern `(\\w+\\.)` matches the first word which ends with a dot character within Name feature. The `expand=False` flag returns a DataFrame.\n\n**\u89b3\u5bdf**\n\nWhen we plot Title, Age, and Survived, we note the following observations.\n\n- Most titles band Age groups accurately. For example: Master title has Age mean of 5 years.\n- Survival among Title Age bands varies slightly.\n- Certain titles mostly survived (Mme, Lady, Sir) or did not (Don, Rev, Jonkheer).\n\n**\u6c7a\u5b9a**\n\n- We decide to retain the new Title feature for model training.","28acf108":"Let us drop Parch, SibSp, and FamilySize features in favor of IsAlone.","f358ff54":"## \u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n\nPython\u306ePandas\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u51e6\u7406\u3059\u308b\u3053\u3068\u306b\u5f79\u7acb\u3061\u307e\u3059\uff0e\u307e\u305a\uff0ctrain\/test\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092Pandas DataFrame\u3068\u3057\u3066\u53d6\u5f97\u3057\u307e\u3059\uff0e\u307e\u305f\uff0c\u4e00\u5b9a\u306e\u51e6\u7406\u306e\u305f\u3081\u306b\uff0c\u4e21\u65b9\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7d50\u5408\u3057\u307e\u3059\uff0e","155914df":"Now we iterate over Sex (0 or 1) and Pclass (1, 2, 3) to calculate guessed values of Age for the six combinations.","23279eb3":"### Completing a numerical continuous feature\n\nNow we should start estimating and completing features with missing or null values. We will first do this for the Age feature.\n\nWe can consider three methods to complete a numerical continuous feature.\n\n1. A simple way is to generate random numbers between mean and [standard deviation](https:\/\/en.wikipedia.org\/wiki\/Standard_deviation).\n\n2. More accurate way of guessing missing values is to use other correlated features. In our case we note correlation among Age, Gender, and Pclass. Guess Age values using [median](https:\/\/en.wikipedia.org\/wiki\/Median) values for Age across sets of Pclass and Gender feature combinations. So, median Age for Pclass=1 and Gender=0, Pclass=1 and Gender=1, and so on...\n\n3. Combine methods 1 and 2. So instead of guessing age values based on median, use random numbers between mean and standard deviation, based on sets of Pclass and Gender combinations.\n\nMethod 1 and 3 will introduce random noise into our models. The results from multiple executions might vary. We will prefer method 2.","572ff72e":"Now we can safely drop the Name feature from training and testing datasets. We also do not need the PassengerId feature in the training dataset.","6f6510be":"> ***\u30b5\u30f3\u30d7\u30eb\u306b\u308f\u305f\u3063\u3066\uff0c\u6570\u5024\u578b\u306e\u7279\u5fb4\u91cf\u306e\u5206\u5e03\u306f\u4f55\u304b\uff1f***\n\n\u5b9f\u969b\u306e\u554f\u984c\u9818\u57df\u306etrain\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3069\u308c\u304f\u3089\u3044(\u6bcd\u96c6\u56e3\u3092)\"\u8868\u73fe\"\u3057\u3066\u3044\u308b\u306e\u304b\uff1f\nThis helps us determine, among other early insights, how representative is the training dataset of the actual problem domain.\n\n- train\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba\u306f891\uff0e\u3053\u308c\u306f\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306b\u4e57\u8239\u3057\u3066\u3044\u305f\u5b9f\u969b\u306e\u4eba\u6570\u306e40%\u306b\u76f8\u5f53\u3059\u308b\uff0e\n- Survived\u306f\uff0c0 or 1\u306e\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\uff0e\n- train\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u7d0438%\u306f\u751f\u5b58\u3057\u3066\u3044\u307e\u3057\u305f\uff0e\u3053\u308c\u306f\u5b9f\u969b\u306e\u751f\u5b58\u7387\u3067\u3042\u308b32%\u3092\u8868\u73fe\u3057\u3066\u3044\u308b\uff0e\n- \u307b\u3068\u3093\u3069\u306e\u4e57\u5ba2 (> 75%) \u306f\u4e21\u89aa\u3084\u5b50\u4f9b\u3068\u5171\u306b\u65c5\u884c\u3057\u3066\u3044\u306a\u304b\u3063\u305f\uff0e\n- 30%\u8fd1\u3044\u4e57\u5ba2\u306f\uff0c\u5144\u5f1f\/\u914d\u5076\u8005\u3068\u5171\u306b\u4e57\u8239\u3057\u3066\u3044\u305f\uff0e\n- \\$512\u3088\u308a\u3082\u9ad8\u3044\u904b\u8cc3\u3092\u6255\u3063\u3066\u3044\u308b\u4e57\u5ba2 (< 1%) \u306e\u4e2d\u3067\u306f\uff0c\u904b\u8cc3\u304c\u6709\u610f\u306b\u5909\u5316\u3057\u3066\u3044\u305f\uff0e\n- 65\u6b73-88\u6b73\u306e\u9ad8\u9f62\u8005 (< 1%) \u304c\u3044\u308b\uff0e","463b8cde":"## \u30c7\u30fc\u30bf\u3092\u98fc\u3044\u306a\u3089\u3059\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u8981\u6c42\u3055\u308c\u308b\u554f\u984c\u89e3\u6c7a\u306b\u3064\u3044\u3066\uff0c\u3044\u304f\u3064\u304b\u306e\u60f3\u5b9a\u3068\u6c7a\u5b9a\u3092\u96c6\u8a08\u3057\u307e\u3057\u305f\uff0e\n\n\u4eca\u307e\u3067\u306e\u3068\u3053\u308d1\u3064\u306e\u7279\u5fb4\u91cf\/\u5909\u6570\u3092\u5909\u3048\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3053\u3068\u306f\u306a\u304b\u3063\u305f\u306e\u3067\u3059\uff0e\n\u3053\u3053\u3067\uff0c\u30c7\u30fc\u30bf\u306e\u4fee\u6b63(correcting)\u30fb\u4f5c\u6210(creating)\u3068\u76ee\u6a19\u9054\u6210\u306b\u5bfe\u3059\u308b\u60f3\u5b9a\u3068\u6c7a\u5b9a\u3092\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\uff0e\n\n### \u30c7\u30fc\u30bf\u4fee\u6b63 (\u7279\u5fb4\u91cf\u3092\u524a\u9664\u3059\u308b)\n\n\u5c11\u306a\u3044\u30c7\u30fc\u30bf\u70b9\u3067\u51e6\u7406\u3059\u308b\u7279\u5fb4\u91cf\u3092\u6392\u9664\u3059\u308b\u3053\u3068\u306f\uff0c\u5b9f\u884c\u3059\u308b\u6700\u521d\u306e\u76ee\u6a19\u3067\u3059\uff0e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3092\u52a0\u901f\u5316\u3055\u305b\uff0c\u5206\u6790\u3092\u8efd\u6e1b\u3055\u305b\u307e\u3059\uff0e\n\n\u60f3\u5b9a\u3068\u6c7a\u5b9a\u306b\u57fa\u3065\u3044\u3066\uff0c\u6211\u3005\u306fCabin (correcting #2) \u3068Ticket (correcting #1) \u3092\u524a\u9664\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\n\u203b train\/test\u4e21\u65b9\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4e00\u8cab\u3057\u3066\u540c\u6642\u306b\u51e6\u7406\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u304b\uff1f\u306b\u7559\u610f\u3059\u308b\uff0e","57b6f1f1":"> ***\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u5206\u5e03\u306f\u4f55\u304b\uff1f***\n\n- Names\u306f\uff0ctrain\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u306b\u308f\u305f\u3063\u3066\u56fa\u6709\uff0e (count=unique=891)\n- Sex\u306f\uff0c2\u3064\u306e\u6b63\u6570\u3068\u3057\u3066\u8868\u3055\u308c\uff0c65%\u306f\u7537\u6027\uff0e (top=male, freq=577\/count=891)\n- Cabin\u306f\uff0ctrain\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u306b\u308f\u305f\u3063\u3066\uff0c\u3044\u304f\u3064\u304b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u91cd\u8907\u304c\u3042\u308b\uff0e\u3059\u306a\u308f\u3061\uff0c\u3044\u304f\u3064\u304b\u306e\u4e57\u5ba2\u306f\u30ad\u30e3\u30d3\u30f3\u3092\u5171\u6709\u3057\u3066\u3044\u305f\uff0e\n- Embarked\u306f\uff0c3\u3064\u306e\u6b63\u6570\u3092\u3068\u308b\uff0e\u307b\u3068\u3093\u3069\u306e\u4e57\u5ba2\u306b\u3088\u3063\u3066S\u30dd\u30fc\u30c8\u304c\u4f7f\u308f\u308c\u3066\u3044\u305f\uff0e (top=S)\n- Ticket\u306f\uff0c\u91cd\u8907\u3059\u308b\u5024\u306e\u6bd4\u7387\u304c\u9ad8\u3044 (22 %, unique=681)","7987d7a6":"We can not remove the AgeBand feature.","b6dc5ad4":"The perceptron is an algorithm for supervised learning of binary classifiers (functions that can decide whether an input, represented by a vector of numbers, belongs to some specific class or not). It is a type of linear classifier, i.e. a classification algorithm that makes its predictions based on a linear predictor function combining a set of weights with the feature vector. The algorithm allows for online learning, in that it processes elements in the training set one at a time. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Perceptron).","545c67fd":"Our submission to the competition site Kaggle results in scoring 3,883 of 6,082 competition entries. This result is indicative while the competition is running. This result only accounts for part of the submission dataset. Not bad for our first attempt. Any suggestions to improve our score are most welcome.","e90e4be3":"### Converting a categorical feature\n\nNow we can convert features which contain strings to numerical values. This is required by most model algorithms. Doing so will also help us in achieving the feature completing goal.\n\nLet us start by converting Sex feature to a new feature called Gender where female=1 and male=0.","6236ab07":"We can convert the categorical titles to ordinal.","d6223bd7":"The next model Random Forests is one of the most popular. Random forests or random decision forests are an ensemble learning method for classification, regression and other tasks, that operate by constructing a multitude of decision trees (n_estimators=100) at training time and outputting the class that is the mode of the classes (classification) or mean prediction (regression) of the individual trees. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Random_forest).\n\nThe model confidence score is the highest among models evaluated so far. We decide to use this model's output (Y_pred) for creating our competition submission of results.","0da24e6e":"# Titanic Data Science Solutions (Japanese ver.)\n\n\n### \u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306f [Data Science Solutions](https:\/\/www.amazon.com\/Data-Science-Solutions-Startup-Workflow\/dp\/1520545312) \u306e\u59c9\u59b9\u4f5c\u3067\u3059. \n\n\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306f\uff0cKaggle\u306e\u3088\u3046\u306a\u30b5\u30a4\u30c8\u306b\u3042\u308b\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u30b3\u30f3\u30da\u3092\u89e3\u304f\u305f\u3081\u306e\u5178\u578b\u7684\u306a\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u4e00\u901a\u308a\u8aac\u660e\u3057\u307e\u3059\uff0e\n\n\u3044\u304f\u3064\u304b\u306e\u540c\u69d8\u306e\u7d20\u6674\u3089\u3057\u3044\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u304c\u3042\u308a\u307e\u3059\u304c\uff0c\u305d\u306e\u591a\u304f\u306f\"Expert\u304cExpert\u306e\u305f\u3081\u306b\u4f5c\u3063\u305f\"\u3088\u3046\u3067\uff0c\u300c\u305d\u306e\u89e3\u6c7a\u6cd5\u304c\u3069\u306e\u3088\u3046\u306b\u69cb\u7bc9\u3055\u308c\u305f\u306e\u304b\u300d\u3068\u3044\u3046\u70b9\u306b\u5bfe\u3059\u308b\u8aac\u660e\u304c\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306e\u76ee\u7684\u306f\uff0c\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306e\u5404\u30b9\u30c6\u30c3\u30d7\u3092\u9806\u306b\u8ffd\u3044\uff0c\u305d\u308c\u305e\u308c\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u8aac\u660e\u3059\u308b\u3068\u5171\u306b\uff0c\u554f\u984c\u89e3\u6c7a\u306e\u969b\u306b\u6211\u3005(Kaggle\u4e0a\u7d1a\u8005)\u304c\u3068\u3063\u305f\u5168\u3066\u306e\u6c7a\u5b9a\u306b\u5bfe\u3059\u308b\u7406\u8ad6\u7684\u6839\u62e0\u3092\u8aac\u660e\u3059\u308b\u3053\u3068\u3067\u3059\uff0e\n\n## \u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306e\u5404\u30b9\u30c6\u30fc\u30b8\n\n\u30b3\u30f3\u30da\u306b\u5bfe\u3059\u308b\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306f\uff0c\"Data Science Solutions book\"\u3067\u8ff0\u3079\u3089\u308c\u3066\u3044\u308b7\u3064\u306e\u30b9\u30c6\u30fc\u30b8\u304b\u3089\u306a\u308a\u307e\u3059\uff0e\n\n1. \u554f\u3044\u304b\u3051\/\u8981\u4ef6\u306e\u5b9a\u7fa9\uff0e (Question or problem definition\uff0e)\n2. train\/test\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\uff0e (Acquire training and testing data.)\n3. \u30c7\u30fc\u30bf\u306e\u88dc\u5b8c\uff0c\u6e96\u5099\uff0c\u6574\u9813\uff0e (Wrangle, prepare, cleanse the data.)\n4. \u30d1\u30bf\u30fc\u30f3\u306e\u7279\u5b9a\/\u5206\u6790 \u304a\u3088\u3073 \u30c7\u30fc\u30bf\u306e\u63a2\u7d22\/\u8abf\u67fb\uff0e (Analyze, identify patterns, and explore the data.)\n5. \u30e2\u30c7\u30eb\uff0c\u4e88\u6e2c\uff0c\u554f\u984c\u89e3\u6c7a(Model, predict and solve the problem.)\n6. \u554f\u984c\u89e3\u6c7a\u306b\u3044\u305f\u308b\u5404\u30b9\u30c6\u30c3\u30d7\u3068\u7d50\u8ad6\u306e\u53ef\u8996\u5316\uff0c\u4f1d\u9054\uff0c\u8aac\u660e \uff0e(Visualize, report, and present the problem solving steps and final solution.)\n7. \u7d50\u679c\u306e\u63d0\u4f9b\/\u63d0\u51fa\uff0e (Supply or submit the results.)\n\n\u3053\u306e\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306f\uff0c\u300c\u3069\u306e\u3088\u3046\u306b\u3057\u3066\uff0c\u5404\u30b9\u30c6\u30fc\u30b8\u304c\u4ed6\u30b9\u30c6\u30fc\u30b8\u3092\u76f8\u88dc\u3059\u308b\u304b\u300d\u306b\u5bfe\u3059\u308b\u4e00\u822c\u7684\u306a\u6d41\u308c\u3092\u63d0\u793a\u3057\u3066\u3044\u307e\u3059\u304c\uff0c\u4f8b\u5916\u7684\u306a\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3082\u3042\u308a\u307e\u3059\uff0e\n\n- \u8907\u6570\u306e\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u30fb\u30b9\u30c6\u30fc\u30b8\u3092\u7d50\u5408\u3057\u3066\u3082\u3088\u3044\uff0e\u30c7\u30fc\u30bf\u53ef\u8996\u5316\u306b\u3088\u3063\u3066\u5206\u6790\u3057\u3066\u3082\u3088\u3044\uff0e\n- \u63d0\u793a\u3055\u308c\u305f\u3082\u306e\u3088\u308a\u3082\u7c21\u5358\u306b\uff0c\u30b9\u30c6\u30fc\u30b8\u3092\u5b9f\u884c\u3059\u308b\uff0e\u30c7\u30fc\u30bf\u88dc\u5b8c\u306e\u524d\u5f8c\u306b\u30c7\u30fc\u30bf\u5206\u6790\u3092\u3057\u3066\u3082\u3088\u3044\uff0e\n- \u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306e\u4e2d\u3067\uff0c\u30b9\u30c6\u30fc\u30b8\u3092\u8907\u6570\u56de\u5b9f\u884c\u3059\u308b\uff0e\u30b9\u30c6\u30fc\u30b8\u3092\u53ef\u8996\u5316\u3059\u308b\u3053\u3068\u306f\uff0c\u8907\u6570\u56de\u884c\u308f\u308c\u3066\u3082\u3088\u3044\uff0e\n- \u3042\u308b\u30b9\u30c6\u30fc\u30b8\u3092\u5b8c\u5168\u306b\u3084\u3081\u308b\uff0e\u30b3\u30f3\u30da\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5546\u54c1\u5316\/\u30b5\u30fc\u30d3\u30b9\u5316\u3059\u308b\u305f\u3081\u306e\u30b9\u30c6\u30fc\u30b8\u3092\u63d0\u4f9b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\uff0e\n\n\n## \u554f\u3044\u304b\u3051\/\u8981\u4ef6\u306e\u5b9a\u7fa9\n\nKaggle\u306e\u3088\u3046\u306a\u30b3\u30f3\u30da\u30fb\u30b5\u30a4\u30c8\u306f\uff0c\u89e3\u6c7a\u3059\u3079\u304d\u554f\u984c\u3084\uff0c\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3059\u308b\u305f\u3081\u306etrain\u30c7\u30fc\u30bf\u3092\u63d0\u4f9b\u3059\u308b\u3068\u304d\uff0c\u304a\u3088\u3073\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u7d50\u679c\u3092test\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u691c\u8a3c\u3059\u308b\u3068\u304d\u306b\uff0c\u554f\u3044\u304b\u3051\u308b\u8cea\u554f\u3092\u5b9a\u3081\u307e\u3059\uff0e\n\"Titanic Survival competition\"\u306b\u304a\u3051\u308b\u554f\u984c\/\u8cea\u554f\u306e\u5b9a\u7fa9\u306f\uff0c[Kaggle\u3067\u6b21\u306e\u3088\u3046\u306b\u8ff0\u3079\u3089\u3066\u3044\u307e\u3059\uff0e](https:\/\/www.kaggle.com\/c\/titanic).\n\n> \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u4e8b\u6545\u306b\u751f\u5b58\u3057\u305for\u751f\u5b58\u3057\u306a\u304b\u3063\u305f\u4e57\u5ba2\u3092\u8868\u5f62\u5f0f\u306b\u307e\u3068\u3081\u305f\u30b5\u30f3\u30d7\u30eb\u306etrain\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\uff0c\u6211\u3005\u306e\u30e2\u30c7\u30eb\u306f\uff0c\u751f\u5b58\u60c5\u5831\u3092\u542b\u307e\u306a\u3044test\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u57fa\u3065\u3044\u3066\uff0c\"test\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e57\u5ba2\u304c\u751f\u5b58\u3057\u305f\u304bor\u751f\u5b58\u3057\u306a\u304b\u3063\u305f\u304b\"\uff0c\u3092\u6c7a\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e <br><br> Knowing from a training set of samples listing passengers who survived or did not survive the Titanic disaster, can our model determine based on a given test dataset not containing the survival information, if these passengers in the test dataset survived or not.\n\n\n\u6211\u3005\u306f\uff0c\u554f\u984c\u306e\u9818\u57df\u306b\u3064\u3044\u3066\u306e\u7c21\u5358\u306a\u7406\u89e3\u3092\u69cb\u7bc9\u3057\u305f\u3044\u3068\u3082\u601d\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u3053\u308c\u306b\u3064\u3044\u3066\u306f\uff0c[Kaggle competition description page](https:\/\/www.kaggle.com\/c\/titanic)\u3067\u8ff0\u3079\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\n\u4ee5\u4e0b\u306f\uff0c\u7279\u7b46\u3059\u3079\u304d\u30cf\u30a4\u30e9\u30a4\u30c8\u3067\u3059\uff0e\n\n- 1912\/4\/15\uff0c\u521d\u3081\u3066\u306e\u822a\u6d77\u3067\uff0c\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306f\u6c37\u5c71\u306b\u885d\u7a81\u3057\u305f\u5f8c\u306b\u6c88\u6ca1\u3057\u305f\uff0e2224\u540d\u306e\u4e57\u5ba2\/\u8239\u54e1\u306e\u3046\u30611502\u540d\u304c\u6b7b\u4ea1\u3057\u307e\u3057\u305f\uff0e\u3059\u306a\u308f\u306132%\u306e\u751f\u5b58\u7387\u3067\u3059\uff0e\n- \u3053\u306e\u3088\u3046\u306a\u4eba\u547d\u4e8b\u6545\u3092\u307e\u306d\u3044\u305f\u96e3\u7834\u306e1\u3064\u306e\u7406\u7531\u306f\uff0c\u4e57\u5ba2\/\u8239\u54e1\u306e\u305f\u3081\u306e\u5341\u5206\u306a\u6570\u306e\u6551\u547d\u30dc\u30fc\u30c8\u304c\u306a\u304b\u3063\u305f\u70b9\u3067\u3059\uff0e\n- \u6c88\u6ca1\u304b\u3089\u751f\u5b58\u3059\u308b\u3053\u3068\u306b\u306f\u904b\u306e\u8981\u7d20\u3082\u3042\u308b\u3082\u306e\u306e\uff0c\u5973\u6027\u30fb\u5b50\u4f9b\u30fb\u4e0a\u6d41\u968e\u7d1a\u306a\u3069\u306e\u30b0\u30eb\u30fc\u30d7\u306f\u4ed6\u3088\u308a\u3082\u751f\u5b58\u3057\u3084\u3059\u304b\u3063\u305f\u3088\u3046\u3067\u3059\uff0e\n\n\n## \u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306e\u76ee\u6a19\n\n\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u30fb\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306f7\u3064\u306e\u4e3b\u8981\u76ee\u6a19\u3092\u89e3\u6c7a\u3057\u307e\u3059\uff0e\n\n- **\u5206\u985e\u3059\u308b(Classifying)** <br>\n\u6211\u3005\u306f\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u5206\u985e\/\u30ab\u30c6\u30b4\u30e9\u30a4\u30ba\u3057\u305f\u3044\u3068\u601d\u3046\u3053\u3068\u3067\u3057\u3087\u3046\uff0e\u307e\u305f\uff0c\u6211\u3005\u306f\u7570\u306a\u308b\u30af\u30e9\u30b9\u3069\u3046\u3057\u306e\u80cc\u5f8c\u95a2\u4fc2or\u76f8\u95a2\u95a2\u4fc2\u3092\u7406\u89e3\u3057\u305f\u3044\u3068\u601d\u3046\u3053\u3068\u3067\u3057\u3087\u3046\uff0e\n\n- **\u95a2\u9023\u3065\u3051\u308b(Correlating)** <br>\ntrain\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e2d\u3067\u5229\u7528\u53ef\u80fd\u306a\u7279\u5fb4\u91cf\u306b\u57fa\u3065\u3044\u3066\u554f\u984c\u306b\u30a2\u30d7\u30ed\u30fc\u30c1\u3067\u304d\u307e\u3059\uff0e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e2d\u3067\uff0c\u3069\u306e\u7279\u5fb4\u91cf\u304c\u6211\u3005\u306e\u76ee\u6a19\u5909\u6570(Survived)\u306b\u5bfe\u3057\u3066\u610f\u7fa9\u6df1\u304f\u8ca2\u732e\u3059\u308b\u306e\u304b\uff1f\u7d71\u8a08\u7684\u306b\u306f\uff0c\u7d71\u8a08\u91cf\u3068\u76ee\u6a19\u5909\u6570(Survived)\u3068\u306e\u9593\u306b[\u76f8\u95a2\u95a2\u4fc2(Correlation)](https:\/\/en.wikiversity.org\/wiki\/Correlation)\u304c\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\u7279\u5fb4\u91cf\u306e\u5024\u304c\u5909\u308f\u308b\u306a\u3089\u3070\uff0c\u89e3\u6c7a\u72b6\u614b\u3082\u5909\u308f\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\u3053\u308c\u306f\u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e2d\u3067\u6570\u5024\u5909\u6570\/\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u4e21\u65b9\u306b\u5bfe\u3057\u3066\u691c\u8a3c\u3055\u308c\u307e\u3059\uff0e\n\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u30fb\u30b9\u30c6\u30fc\u30b8\u3068\u305d\u306e\u6b21\u306e\u76ee\u6a19\u306e\u305f\u3081\u306b\uff0c\u6211\u3005\u306f\uff0c\"\u751f\u5b58\u3057\u305f\u304b\"\u4ee5\u5916\u306e\u7279\u5fb4\u91cf\u306e\u4e2d\u306e\u76f8\u95a2\u95a2\u4fc2\u3092\u6c7a\u5b9a\u3057\u305f\u3044\u3068\u601d\u3046\u3053\u3068\u3067\u3057\u3087\u3046\uff0e\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u30fb\u88dc\u5b8c\u30fb\u8a02\u6b63\u3059\u308b\u969b\u306b\uff0c\u3042\u308b\u7279\u5fb4\u91cf\u3092\u76f8\u95a2\u3055\u305b\u308b\u3053\u3068\u304c\u5f79\u7acb\u3064\u3067\u3057\u3087\u3046\uff0e\n\n- **\u5909\u63db\u3059\u308b(Converting)** <br>\n\u30e2\u30c7\u30ea\u30f3\u30b0\u3092\u884c\u3046\u6bb5\u968e\u3067\u306f\uff0c\u30c7\u30fc\u30bf\u3092\u524d\u51e6\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u30e2\u30c7\u30eb\u30fb\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u9078\u629e\u306b\u4f9d\u5b58\u3057\u3066\uff0c\u3059\u3079\u3066\u306e\u7279\u5fb4\u91cf\u3092\u6570\u5024\u7684\u306b\u7b49\u3057\u3044\u5024\u306b\u5909\u63db\u3055\u305b\u308b(\u6b63\u898f\u5316\u3059\u308b)\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\uff0e\u305f\u3068\u3048\u3070\u30c6\u30ad\u30b9\u30c8\u30fb\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u6570\u5024\u5909\u6570\u306b\u5909\u63db\u3057\u307e\u3059\uff0e\n\n- **\u88dc\u5b8c\u3059\u308b(Completing)** <br>\n\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3068\u3057\u3066\uff0c\u7279\u5fb4\u91cf\u306e\u4e2d\u306e\u3059\u3079\u3066\u306e\u6b20\u640d\u5024\u3092\u63a8\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u30e2\u30c7\u30eb\u30fb\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u6b20\u640d\u5024\u304c\u306a\u3044\u5834\u5408\u306b\u6700\u3082\u3088\u304f\u50cd\u304f\u3067\u3057\u3087\u3046\uff0e\n\n- **\u8a02\u6b63\u3059\u308b(Correcting)** <br>\n\u6211\u3005\u306f\uff0c\u7279\u5fb4\u91cf\u306e\u4e2d\u3067\u6b20\u640d\u5024or\u4e0d\u6b63\u306a\u5024\u306e\u305f\u3081\u306b\uff0ctrain\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5206\u6790\u3059\u308b\u3067\u3057\u3087\u3046\u3057\uff0c\u3053\u308c\u3089\u306e\u5024\u3092\u8a02\u6b63\u3057\u3088\u3046\u3068\u3059\u308bor\u6b20\u640d\u3092\u3082\u3064\u30b5\u30f3\u30d7\u30eb\u3092\u6392\u9664\u3057\u3088\u3046\u3068\u3059\u308b\u3067\u3057\u3087\u3046\uff0e\n\u3053\u308c\u3092\u884c\u3046\u305f\u3081\u306e1\u3064\u306e\u65b9\u6cd5\u306f\uff0c\u30b5\u30f3\u30d7\u30ebor\u7279\u5fb4\u91cf\u306e\u4e2d\u306e\u3059\u3079\u3066\u306e\u5916\u308c\u5024\u3092\u533a\u5225\u3059\u308b\u3053\u3068\u3067\u3059\uff0e\u307e\u305f\uff0c\u3082\u3057\u3042\u308b\u7279\u5fb4\u91cf\u304c\u5206\u6790\u306b\u5bc4\u4e0e\u3057\u306a\u3044or\u7d50\u679c\u3092\u6709\u610f\u306b\u6b6a\u3081\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306a\u3089\u3070\uff0c\u6211\u3005\u306f\u305d\u306e\u7279\u5fb4\u91cf\u3092\u5b8c\u5168\u306b\u6368\u3066\u308b\u3067\u3057\u3087\u3046\uff0e\n\n- **\u4f5c\u6210\u3059\u308b(Creating)** <br>\n\u65b0\u3057\u3044\u7279\u5fb4\u91cf\u304c\u76f8\u95a2\u95a2\u4fc2\u30fb\u5909\u63db\u30fb\u5b8c\u5168\u6027\u306b\u5f93\u3046\u3088\u3046\u306b\uff0c\u6211\u3005\u306f\u65e2\u5b58\u306e\u7279\u5fb4\u91cfor\u7279\u5fb4\u91cf\u96c6\u5408\u304b\u3089\u65b0\u3057\u3044\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n- **\u53ef\u8996\u5316(Charting).** <br>\n\u3069\u306e\u3088\u3046\u306b\u6b63\u3057\u3044\u53ef\u8996\u5316\u306e\u63cf\u753b\/\u56f3\u8868\u3092\u9078\u629e\u3059\u308b\u304b\u306f\uff0c\u30c7\u30fc\u30bf\u306e\u6027\u8cea\u3068\u76ee\u6a19\u5909\u6570(Survived)\u306b\u4f9d\u5b58\u3057\u307e\u3059\uff0e","e2640ff1":"train_df.tail()","60baf2fd":"### Create new feature combining existing features\n\nWe can create a new feature for FamilySize which combines Parch and SibSp. This will enable us to drop Parch and SibSp from our datasets.","af141bb5":"### \u76f8\u95a2\u95a2\u4fc2 (\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570-\u6570\u5024\u5909\u6570)\n\n\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u3068\u6570\u5024\u5909\u6570\u306e\u76f8\u95a2\u95a2\u4fc2\u3092\u77e5\u308a\u305f\u3044\u3067\u3057\u3087\u3046\uff0e<br>\nEmbarked(\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570)\uff0cSex(\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570)\uff0cFare(\u6570\u5024\u5909\u6570)\u3068Survived(\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570)\u3068\u306e\u76f8\u95a2\u95a2\u4fc2\u3092\u8003\u616e\u3067\u304d\u307e\u3059\uff0e\n\n**\u89b3\u5bdf**\n\n- \u9ad8\u3044\u904b\u8cc3\u3092\u6255\u3063\u3066\u3044\u305f\u4e57\u5ba2\u306f\uff0c\u826f\u3044\u751f\u5b58\u7387\u3060\u3063\u305f\uff0e (creating #4)\n- \u4e57\u5ba2\u30dd\u30fc\u30c8(Embarked)\u306f\u751f\u5b58\u7387\u3068\u76f8\u95a2\u304c\u3042\u308b\uff0e (correlating #1 \/ completing #2) \n\n**\u6c7a\u5b9a**\n\n- Fare\u3092\u307e\u3068\u3081\u305f\u7279\u5fb4\u91cf\u3092\u8003\u616e\u3059\u308b\uff0e","00bf3da9":"In machine learning, naive Bayes classifiers are a family of simple probabilistic classifiers based on applying Bayes' theorem with strong (naive) independence assumptions between the features. Naive Bayes classifiers are highly scalable, requiring a number of parameters linear in the number of variables (features) in a learning problem. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Naive_Bayes_classifier).\n\nThe model generated confidence score is the lowest among the models evaluated so far.","a1010aec":"And the test dataset.","1ea861f1":"### Quick completing and converting a numeric feature\n\nWe can now complete the Fare feature for single missing value in test dataset using mode to get the value that occurs most frequently for this feature. We do this in a single line of code.\n\nNote that we are not creating an intermediate new feature or doing any further analysis for correlation to guess missing feature as we are replacing only a single value. The completion goal achieves desired requirement for model algorithm to operate on non-null values.\n\nWe may also want round off the fare to two decimals as it represents currency.","722fc0bb":"We can also create an artificial feature combining Pclass and Age.","4e434214":"Convert the Fare feature to ordinal values based on the FareBand.","7bc88656":"We can use Logistic Regression to validate our assumptions and decisions for feature creating and completing goals. This can be done by calculating the coefficient of the features in the decision function.\n\nPositive coefficients increase the log-odds of the response (and thus increase the probability), and negative coefficients decrease the log-odds of the response (and thus decrease the probability).\n\n- Sex is highest positivie coefficient, implying as the Sex value increases (male: 0 to female: 1), the probability of Survived=1 increases the most.\n- Inversely as Pclass increases, probability of Survived=1 decreases the most.\n- This way Age*Class is a good artificial feature to model as it has second highest negative correlation with Survived.\n- So is Title as second highest positive correlation.","6baa7c0b":"Next we model using Support Vector Machines which are supervised learning models with associated learning algorithms that analyze data used for classification and regression analysis. Given a set of training samples, each marked as belonging to one or the other of **two categories**, an SVM training algorithm builds a model that assigns new test samples to one category or the other, making it a non-probabilistic binary linear classifier. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Support_vector_machine).\n\nNote that the model generates a confidence score which is higher than Logistics Regression model.","5a0f71eb":"### Completing a categorical feature\n\nEmbarked feature takes S, Q, C values based on port of embarkation. Our training dataset has two missing values. We simply fill these with the most common occurance.","8bc1c30d":"> ***\u3069\u306e\u7279\u5fb4\u91cf\u304c\uff0c\u7a7a\u767d(blank)\/\u7121\u52b9\u306a\u5024(null) or \u7a7a\u5024(empty)\u306a\u306e\u304b\uff1f***\n\n\u3053\u308c\u3089\u306f\u4fee\u6b63\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\uff0e\n\n- Cabin > Age > Embarked \u306e\u9806\u3067\uff0ctrain\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u7279\u5fb4\u91cf\u306f\u591a\u304f\u306enull\u5024\u3092\u542b\u3093\u3067\u3044\u307e\u3059\uff0e\n- Cabin > Age \u306e\u9806\u3067\uff0ctest\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u7279\u5fb4\u91cf\u306f\u6b20\u640d\u5024\u3092\u542b\u3093\u3067\u3044\u307e\u3059\uff0e\n\n> ***\u591a\u69d8\u306a\u7279\u5fb4\u91cf\u306e\u305f\u3081\u306e\u30c7\u30fc\u30bf\u578b\u306f\u4f55\u304b\uff1f***\n\n\u76ee\u6a19\u5909\u6570\u3092\u5909\u63db\u3059\u308b\u969b\u306b\u5f79\u7acb\u3061\u307e\u3059\uff0e\n\n- train\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u3046\u3061\uff0c7\u3064\u306e\u7279\u5fb4\u91cf\u306fint\u578b\u307e\u305f\u306ffloat\u578b\u3067\u3059\uff0etest\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306f\uff16\u3064\u3067\u3059\uff0e\n- 5\u3064\u306e\u7279\u5fb4\u91cf\u306fstring\u578b(object\u578b)\u3067\u3059\uff0e","2c22833f":"> ***\u3069\u306e\u7279\u5fb4\u91cf\u304c\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u304b?***\n\n\u3053\u308c\u3089\u306e\u5909\u6570\u306f\u30b5\u30f3\u30d7\u30eb\u5168\u4f53\u3092\u4f3c\u305f\u3088\u3046\u306a\u30b5\u30f3\u30d7\u30eb\u96c6\u5408\u306b\u5206\u985e\u3057\u307e\u3059\uff0e\n\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306b\u304a\u3044\u3066\uff0c\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u91cf\u306f\uff0c\u540d\u7fa9\u30fb\u9806\u5e8f\u30fb\u6bd4\u4f8b\u30fb\u9593\u9694\u306e\u3046\u3061\u3069\u306e\u5c3a\u5ea6\u306b\u57fa\u3065\u3044\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u304b\uff1f\n\u3053\u308c\u306f\u6211\u3005\u304c\u53ef\u8996\u5316\u306b\u304a\u3044\u3066\u9069\u5207\u306a\u30d7\u30ed\u30c3\u30c8\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u306b\u5f79\u7acb\u3061\u307e\u3059\uff0e\n\n- \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570: Survived, Sex, and Embarked. Ordinal: Pclass.\n\n> ***\u3069\u306e\u7279\u5fb4\u91cf\u304c\u6570\u5024\u5909\u6570\u304b?***\n\n\u3069\u306e\u7279\u5fb4\u91cf\u304c\u6570\u5024\u7684\u3067\u3057\u3087\u3046\u304b?\u6570\u5024\u5909\u6570\u306e\u5024\u306f\u30b5\u30f3\u30d7\u30eb\u9593\u3067\u7570\u306a\u308a\u307e\u3059\uff0e\u6570\u5024\u5909\u6570\u306b\u304a\u3044\u3066\uff0c\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u91cf\u306f\u96e2\u6563\u30fb\u9023\u7d9a\u30fb\u6642\u7cfb\u5217\u306e\u3046\u3061\u3069\u308c\u306b\u57fa\u3065\u3044\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u304b\uff1f\n\u3053\u308c\u306f\u6211\u3005\u304c\u53ef\u8996\u5316\u306b\u304a\u3044\u3066\u9069\u5207\u306a\u30d7\u30ed\u30c3\u30c8\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u306b\u5f79\u7acb\u3061\u307e\u3059\uff0e\n\n- \u9023\u7d9a\u5909\u6570: Age, Fare. Discrete: SibSp, Parch.","5f771bbd":"## \u30c7\u30fc\u30bf\u5206\u6790\u306b\u57fa\u3065\u304f\u60f3\u5b9a\n\n\u6211\u3005\u306f\uff0c\u30c7\u30fc\u30bf\u5206\u6790\u304c\u4eca\u307e\u3067\u884c\u3063\u3066\u304d\u305f\u3053\u3068\u306b\u57fa\u3065\u3044\u3066\uff0c\u4ee5\u4e0b\u306e\u60f3\u5b9a\u306b\u305f\u3069\u308a\u7740\u304d\u307e\u3059\uff0e\u6211\u3005\u306f\uff0c\u9069\u5207\u306a\u884c\u52d5\u3092\u3068\u308b\u524d\u306b\uff0c\u3053\u308c\u3089\u306e\u60f3\u5b9a\u3092\u3055\u3089\u306b\u691c\u8a3c\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\n\n**Correlating.**\n\n\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u91cf\u304cSurvival\u3068\u3069\u306e\u7a0b\u5ea6\u5f37\u304f\u76f8\u95a2\u3057\u3066\u3044\u308b\u304b\u3092\u77e5\u308a\u305f\u3044\u3067\u3059\uff0e\u3053\u306e\u5373\u5ea7\u306b\u308f\u304b\u308b\u76f8\u95a2\u95a2\u4fc2\u3068\uff0c\u30e2\u30c7\u30eb\u5316\u3055\u308c\u305f\u76f8\u95a2\u95a2\u4fc2\u3092\u5f8c\u534a\u3067\u4e00\u81f4\u3055\u305b\u307e\u3059\uff0e\n\n**Completing.**\n\n1. Age\u3092\u88dc\u5b8c\u3057\u305f\u3044\uff0eAge\u306fSurvival\u3068\u9593\u9055\u3044\u306a\u304f\u76f8\u95a2\u3057\u3066\u3044\u308b\uff0e\n2. Embarked\u3092\u88dc\u5b8c\u3057\u305f\u3044\uff0eEmbarked\u306fSurvival\u3084\u4ed6\u306e\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u3068\u76f8\u95a2\u3057\u3066\u3044\u308b\u3067\u3042\u308d\u3046\uff0e\n\n**Correcting.**\n\n1. Ticket\u306f\u5206\u6790\u304b\u3089\u9664\u5916\u3055\u308c\u308b\uff0eTicket\u306f\u91cd\u8907\u7387\u304c\u9ad8\u304f(22 %)\uff0c\u307e\u305fTicket\u3068Survival\u306b\u306f\u76f8\u95a2\u95a2\u4fc2\u304c\u306a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\uff0e\n2. Cabin\u306f\u5206\u6790\u304b\u3089\u9664\u5916\u3055\u308c\u308b\uff0eCabin\u306f\uff0ctrain\/test\u4e21\u65b9\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u7a7a\u5024\u304c\u591a\u304f\uff0c\u307e\u305f\u591a\u304f\u306enull\u5024\u3092\u542b\u3093\u3067\u3044\u308b\uff0e\n3. PassengerId\u306f\u9664\u5916\u3055\u308c\u308b\uff0ePassengerId\u306fSurvival\u306b\u5bc4\u4e0e\u3057\u306a\u3044\uff0e\n4. Name\u306f\u9664\u5916\u3055\u308c\u308b\uff0eName\u306f\u6bd4\u8f03\u7684\u6a19\u6e96\u7684\u3067\u306f\u306a\u3044\u5909\u6570\u3067\uff0cSurvival\u306b\u76f4\u63a5\u5bc4\u4e0e\u3057\u306a\u3044\u304b\u3082\u5165\u308c\u306a\u3044\uff0e\n\n**Creating.**\n\n1. Family\u3068\u3044\u3046\u65b0\u3057\u3044\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3059\u308b\uff0e\u3053\u308c\u306fParch\u3068SibSp\u306b\u57fa\u3065\u3044\u3066\u3044\u3066\u4f5c\u3089\u308c\uff0c\u5404\u30b5\u30f3\u30d7\u30eb\u306e\u5bb6\u65cf\u306e\u5408\u8a08\u6570\u3092\u8868\u3059\uff0e\n2. engineer\u3068\u3044\u3046\u65b0\u3057\u3044\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3059\u308b\uff0e\u3053\u308c\u306fTitle\u3092\u629c\u7c8b\u3057\u305f\u7279\u5fb4\u91cf\u3067\u3042\u308b\uff0e\n3. Age bands\u3068\u3044\u3046\u65b0\u3057\u3044\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3059\u308b.\u3053\u308c\u306f\u9023\u7d9a\u6570\u5024\u5909\u6570Age\u3092\u9806\u5e8f\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306b\u3059\u308b\uff0e\n4. Fare range\u3068\u3044\u3046\u65b0\u3057\u3044\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3059\u308b\uff0e(\u3082\u3057\u5206\u6790\u306b\u5f79\u7acb\u3064\u306a\u3089\u3070)\n\n**Classifying.**\n\n\u5148\u307b\u3069\u8ff0\u3079\u3089\u308c\u305f\u554f\u984c\u306e\u8a18\u8ff0\u306b\u57fa\u3065\u3044\u3066\uff0c\u4ee5\u4e0b\u3092\u6211\u3005\u306e\u60f3\u5b9a\u306b\u8ffd\u52a0\u3059\u308b\uff0e\n\n1. \u5973\u6027 (Sex=female) \u306f\u751f\u5b58\u3057\u3084\u3059\u304b\u3063\u305f\uff0e\n2. \u5b50\u4f9b (Age < ?) \u306f\u751f\u5b58\u3057\u3084\u3059\u304b\u3063\u305f\uff0e\n3. \u4e0a\u6d41\u968e\u7d1a\u306e\u4e57\u5ba2 (Pclass=1) \u306f\u751f\u5b58\u3057\u3084\u3059\u304b\u3063\u305f\uff0e","8851decf":"Let us replace Age with ordinals based on these bands.","cfe4567b":"In pattern recognition, the k-Nearest Neighbors algorithm (or k-NN for short) is a non-parametric method used for classification and regression. A sample is classified by a majority vote of its neighbors, with the sample being assigned to the class most common among its k nearest neighbors (k is a positive integer, typically small). If k = 1, then the object is simply assigned to the class of that single nearest neighbor. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/K-nearest_neighbors_algorithm).\n\nKNN confidence score is better than Logistics Regression but worse than SVM.","4f8185c5":"## Analyze by pivoting features\n\n\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u89b3\u5bdf\/\u60f3\u5b9a\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\uff0c\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u91cf\u3092\u4e92\u3044\u306b\u30d4\u30dc\u30c3\u30c8\u3059\u308b\u3053\u3068\u3067\uff0c\u6211\u3005\u306f\u7279\u5fb4\u91cf\u306e\u76f8\u95a2\u95a2\u4fc2\u3092\u5373\u5ea7\u4f4d\u306b\u5206\u6790\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\n\u6211\u3005\u306f\u3053\u306e\u6bb5\u968e\u3067\u306f\uff0c\u7a7a\u306e\u5024\u3092\u3082\u305f\u306a\u3044\u7279\u5fb4\u91cf\u306b\u5bfe\u3057\u3066\u306e\u307f\u4ee5\u4e0b\u3092\u5b9f\u884c\u3059\u308b\uff0e\u3053\u308c\u306f\uff0c\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u578b (Sex)\uff0c \u9806\u5e8f\u578b (Pclass)\uff0c\u96e2\u6563\u578b (SibSp, Parch)\u306e\u7279\u5fb4\u91cf\u306b\u5bfe\u3057\u3066\u306e\u307f\u610f\u5473\u3092\u306a\u3059\uff0e\n\n- **Pclass** Pclass=1\u3068Survived\u306e\u9593\u306b\u6709\u610f\u306a\u76f8\u95a2\u95a2\u4fc2 (> 0.5) \u3092\u89b3\u6e2c\u3059\u308b\uff0e\u3088\u3063\u3066\uff0cPclass\u3092\u30e2\u30c7\u30eb\u306b\u4f7f\u308f\u308c\u308b\u7279\u5fb4\u91cf\u3068\u3057\u3066\u6c7a\u5b9a\u3059\u308b\uff0e(classifying #3)\n- **Sex** \u554f\u984c\u306e\u5b9a\u7fa9\u3092\u3059\u308b\u969b\u306b\uff0c\u5973\u6027(Sex=female)\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u751f\u5b58\u7387\u304c\u9ad8\u3044(74 %)\u3053\u3068\u3092\u89b3\u6e2c\u3059\u308b\uff0e(classifying\u306e #1)\n- **SibSP, Parch** \u3053\u308c\u3089\u306e\u7279\u5fb4\u91cf\u306f\uff0c\u3042\u308b\u7279\u5fb4\u91cf\u3068\u306e\u76f8\u95a2\u4fc2\u6570\u304c0\u3068\u306a\u308b\uff0e\u3053\u308c\u3089\u306e\u500b\u3005\u306e\u7279\u5fb4\u91cf\u304b\u3089\uff0c\u3072\u3068\u3064\u306e\u7279\u5fb4\u91cf(\u3082\u3057\u304f\u306f\u305d\u306e\u96c6\u5408)\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u30d9\u30b9\u30c8\u3060\u308d\u3046\uff0e(creating #1).","0f66893e":"## \u30c7\u30fc\u30bf\u53ef\u8996\u5316\u306b\u3088\u308b\u5206\u6790\n\n\u3055\u3066\uff0c\u30c7\u30fc\u30bf\u5206\u6790\u306e\u305f\u3081\u306e\u53ef\u8996\u5316\u3092\u4f7f\u3063\u3066\uff0c\u6211\u3005\u306e\u60f3\u5b9a\u306e\u78ba\u8a8d\u3092\u7d9a\u3051\u307e\u3057\u3087\u3046\uff0e\n\n### \u6570\u5024\u578b\u5909\u6570\u306e\u4fee\u6b63\n\n\u6570\u5024\u578b\u5909\u6570\u3068\u76ee\u6a19\u5909\u6570(Survived)\u3068\u306e\u76f8\u95a2\u95a2\u4fc2\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\uff0c\u53ef\u8996\u5316\u3092\u306f\u3058\u3081\u307e\u3057\u3087\u3046\uff0e\n\n\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f\uff0cAge\u306e\u3088\u3046\u306a\u9023\u7d9a\u6570\u5024\u578b\u5909\u6570\u306e\u5206\u6790\u306b\u5bfe\u3057\u3066\u6709\u7528\u3067\u3059\uff0eAge\u306e\u5024\u306b\u5f93\u3063\u3066\u30b5\u30f3\u30d7\u30eb\u3092\u307e\u3068\u3081\u308b\/\u6574\u5217\u3055\u305b\u308b\u3053\u3068\u306f\uff0c\u6709\u76ca\u306a\u30d1\u30bf\u30fc\u30f3\u306e\u7279\u5b9a\u3059\u308b\u3053\u3068\u306b\u5f79\u7acb\u3061\u307e\u3059\uff0e\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f\uff0c\u81ea\u52d5\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u308bbins(\u5206\u5272\u6570)\/range band(\u5206\u5272\u5e45)\u3092\u4f7f\u3044\uff0c\u30b5\u30f3\u30d7\u30eb\u306e\u5206\u5e03\u3092\u63d0\u793a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\u3053\u308c\u306b\u3088\u3063\u3066\uff0c\u6211\u3005\u304cAge\u306e\u7279\u5b9a\u306e\u5e45\u306b\u95a2\u4fc2\u3059\u308b\u8cea\u554f\u306b\u7b54\u3048\u308b\u3053\u3068\u304c\u5bb9\u6613\u306b\u306a\u308a\u307e\u3059\uff0e(ex. \u4e73\u5e7c\u5150\u306e\u751f\u5b58\u7387\u306f\u3088\u304b\u3063\u305f\u306e\u304b\uff1f)\n\n\u203b \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306ex\u8ef8\u306f\uff0c\u30b5\u30f3\u30d7\u30eb\u3084\u4e57\u5ba2\u305f\u3061\u306e\u7dcf\u6570\u3092\u8868\u3059\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\uff0e\n\n**\u89b3\u5bdf**\n\n- \u4e73\u5e7c\u5150 (Age <=4) \u306f\u9ad8\u3044\u751f\u5b58\u7387\u3060\u3063\u305f\uff0e\n- \u6700\u3082\u9ad8\u9f62\u306a\u4e57\u5ba2\u305f\u3061 (Age = 80) \u306f\u751f\u5b58\u3057\u305f\uff0e\n- 15-25\u6b73\u306e\u4e57\u5ba2\u305f\u3061\u306e\u591a\u304f\u306f\u751f\u5b58\u3057\u306a\u304b\u3063\u305f\uff0e\n- \u307b\u3068\u3093\u3069\u306e\u4e57\u5ba2\u306f\uff0c15-35\u6b73\u306e\u7bc4\u56f2\u306b\u3042\u3063\u305f\uff0e\n\n**\u6c7a\u5b9a**\n\n\u3053\u306e\u7c21\u5358\u306a\u5206\u6790\u306f\uff0c\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306e\u6b21\u306e\u6bb5\u968e\u306b\u5bfe\u3059\u308b\u6c7a\u5b9a\u3068\u3057\u3066\uff0c\u4ee5\u4e0b\u306e\u60f3\u5b9a\u3092\u627f\u8a8d\u3057\u307e\u3059\uff0e\n\n- Age\u306f\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u306b\u4f7f\u3046\u3079\u304d\u3067\u3042\u308b\uff0e (classifying #2) \n- Age\u306enull\u5024\u3092\u88dc\u5b8c\u3059\u308b\u3079\u304d\u3067\u3042\u308b\uff0e (completing #1)\n- Age\u3092\u30b0\u30eb\u30fc\u30d7\u3068\u3057\u3066\u307e\u3068\u3081\u308b\u3079\u304d\u3067\u3042\u308b\uff0e (creating #3)","65ba9c07":"Logistic Regression is a useful model to run early in the workflow. Logistic regression measures the relationship between the categorical dependent variable (feature) and one or more independent variables (features) by estimating probabilities using a logistic function, which is the cumulative logistic distribution. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Logistic_regression).\n\nNote the confidence score generated by the model based on our training dataset.","2cef1abb":"We can not create FareBand.","f272eb6f":"Let us create Age bands and determine correlations with Survived.","a217fb39":"### Model evaluation\n\nWe can now rank our evaluation of all the models to choose the best one for our problem. While both Decision Tree and Random Forest score the same, we choose to use Random Forest as they correct for decision trees' habit of overfitting to their training set. "}}