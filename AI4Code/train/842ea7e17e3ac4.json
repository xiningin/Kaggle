{"cell_type":{"527f0946":"code","aa83a9c7":"code","a821279a":"code","21b966a4":"code","1f848d64":"code","ef1cf3b5":"code","2d60653f":"code","cb09c9c8":"code","f155e3ca":"code","214e7aab":"code","fd0d283b":"code","7491a6da":"code","35bcbb31":"code","a5668b6a":"code","5255288c":"code","f6ff1c64":"code","4c45cc0c":"code","e43b730f":"code","9c884518":"code","81e86401":"code","26b0f48c":"code","97f89937":"code","2c56c5c1":"markdown","0ef63de5":"markdown","a2e6e955":"markdown","f0a4986f":"markdown","e9095dda":"markdown","c9ec9550":"markdown","f1b88de1":"markdown","3543e2e7":"markdown","0426ae48":"markdown","28f580b8":"markdown"},"source":{"527f0946":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n# Basic Libraries\nimport numpy as np\nimport pandas as pd\n\n# Visualization libraries\nimport matplotlib.pyplot as plt\nimport pydot\nimport seaborn as sns\n\n#Evaluation library\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\nimport tensorflow\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras import losses, optimizers\nfrom tensorflow.keras import activations\nfrom tensorflow.keras.callbacks import TensorBoard\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import plot_model\nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\n\n\n# Deep Learning libraries\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense,Activation,Dropout\nfrom keras.datasets import mnist\nfrom keras.utils import to_categorical\nfrom keras.wrappers.scikit_learn import KerasClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa83a9c7":"\ntrain = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_train.csv')\ntest = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_test.csv')","a821279a":"\nprint(train.shape)\nprint(test.shape)","21b966a4":"train.head(5)","1f848d64":"\nprint(\"train missing values:\", train.isnull().any().sum())\nprint(\"test missing values:\", test.isnull().any().sum())","ef1cf3b5":"\nseed = 3411\nnp.random.seed(seed)","2d60653f":"X = train.iloc[:,1:] #taking all but the first row\nY = train.iloc[:,0] #taking only the first row as this is the label\n\n#splitting dataframe using train_test_split\nx_train , x_test , y_train , y_test = train_test_split(X, Y , test_size=0.1, random_state=seed)\n","cb09c9c8":"class_names = ['T_shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat', \n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n\nplt.figure(figsize=(10, 10))\nfor i in range(36):\n    plt.subplot(6, 6, i + 1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(X.loc[i].values.reshape((28,28))) #calling the .values of each row\n    label_index = int(Y[i]) #setting as an int as the number is stored as a string\n    plt.title(class_names[label_index])\nplt.show()","f155e3ca":"# for confusion matrix plotting\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import multilabel_confusion_matrix,confusion_matrix","214e7aab":"class_names[y_train[0]]\n","fd0d283b":"x_train =x_train\/255.0\nx_test=x_test\/255.0","7491a6da":"#Creating base neural network\nmodel = keras.Sequential([\n    layers.Dense(128, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.3),\n    layers.BatchNormalization(),\n    layers.Dense(24, activation='relu'),\n    layers.Dropout(0.3),\n    layers.BatchNormalization(),\n    layers.Dense(24, activation='relu'),\n    layers.Dropout(0.3),\n    layers.BatchNormalization(),\n    layers.Dense(10,activation='sigmoid'),\n])","35bcbb31":"model.summary()","a5668b6a":"model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])","5255288c":"hist=model.fit(x_train,y_train,batch_size=128,epochs=10,validation_data=(x_test,y_test),verbose=1)   ","f6ff1c64":"predict=model.predict(x_test)","4c45cc0c":"predict","e43b730f":"y_pred=[]\nfor i in range(len(predict)):\n    y_pred.append(np.argmax(predict[i]))","9c884518":"for i in range(5):\n    print(y_pred[i])","81e86401":"for i in range(5):\n    print('prediction of the image : ',class_names[y_pred[i]])\n    print('actual image :')\n    #plt.imshow(x_test[i])\n    plt.show()","26b0f48c":"mat=confusion_matrix(y_test,y_pred)\nmat","97f89937":"plot_confusion_matrix(mat,figsize=(9,9),colorbar=True)","2c56c5c1":"## Model generation\nAs we are making a CNN model for image classification.","0ef63de5":"### no missing values in the dataset, kudos to whoever provided us with such clean data","a2e6e955":"## The total deep learning or machhine learning project can be done in following steps:\n     1. Importing required libraries.\n     2. Reading the data and primary visualization\n     3. Preprocessing\n     4. Creating X and y\n     5. Model Generation\n     6. Training \/ Fitting model with data\n     7. Model evaluation\n     8. Creating prediction data\n     9. Accuracy checking ","f0a4986f":"# Looking at the shape of the data","e9095dda":"Visualization : we can see the image and and check it's original label.","c9ec9550":"### looks very similar to the MNIST Digit task where one column has a label and the other columns are all pixels\n","f1b88de1":"### Accuracy Evaluation","3543e2e7":"## Setting seed for Reproducibility.","0426ae48":"**UPVOTE if you like this Notebook :)**","28f580b8":"# Loading data"}}