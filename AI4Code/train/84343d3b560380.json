{"cell_type":{"e738e50b":"code","eccd6f45":"code","b0e796cf":"code","ea702a58":"code","c34fd9a3":"code","d7e7023e":"code","ac21317a":"code","288b029a":"code","71f5d6f7":"code","d818b039":"code","2a849f1c":"code","444e9179":"code","35750026":"code","8c1edc24":"code","89430fe3":"code","b5303fd1":"code","b6c67dc3":"code","fb7b8596":"code","25e61f4c":"code","374689d2":"code","66ef38c2":"code","6ed3a1a6":"code","42096ffb":"code","796f6ade":"code","42b708fe":"code","c947308e":"markdown","27981f48":"markdown","7afead0f":"markdown","66d5f777":"markdown","a15b5737":"markdown","f18d0480":"markdown","4dcd0f55":"markdown","bf8c35fb":"markdown","75837f26":"markdown","eeca295b":"markdown","74fdcdc2":"markdown","041cdde8":"markdown","c5445519":"markdown","15f926f6":"markdown","2df5bf61":"markdown","14f0aebe":"markdown","f2ea2079":"markdown","e8073106":"markdown","9e346128":"markdown"},"source":{"e738e50b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","eccd6f45":"PCOS_inf = pd.read_csv(\"..\/input\/polycystic-ovary-syndrome-pcos\/PCOS_infertility.csv\")\nPCOS_data = pd.read_csv(\"..\/input\/polycystic-ovary-syndrome-pcos\/data without infertility _final.csv\")","b0e796cf":"PCOS_data.head().T","ea702a58":"PCOS_data[~ PCOS_data['Unnamed: 42'].isna()].T","c34fd9a3":"PCOS_data.info()","d7e7023e":"PCOS_data[PCOS_data['Marraige Status (Yrs)'].isnull()].T","ac21317a":"#lets assign the median to the missing data\nPCOS_data['Marraige Status (Yrs)'].fillna(PCOS_data['Marraige Status (Yrs)'].median(),inplace=True)","288b029a":"PCOS_data['Fast food (Y\/N)'].fillna(PCOS_data['Fast food (Y\/N)'].median(),inplace=True)","71f5d6f7":"PCOS_data.drop('Unnamed: 42',axis=1,inplace=True)","d818b039":"PCOS_inf.head()","2a849f1c":"PCOS_inf.info()","444e9179":"data = pd.merge(PCOS_data,PCOS_inf, on='Patient File No.', suffixes={'','_y'},how='left')","35750026":"data.columns = ['SNo', 'Patient_File_No.', 'PCOS_(Y\/N)', 'Age_(yrs)', 'Weight_(Kg)',\n       'Height(Cm)', 'BMI', 'Blood_Group', 'Pulse_rate(bpm)',\n       'RR_(breaths\/min)', 'Hb(g\/dl)', 'Cycle(R\/I)', 'Cycle_length(days)',\n       'Marriage_Status_(Yrs)', 'Pregnant(Y\/N)', 'No_of_aborptions',\n       'FSH(mIU\/mL)', 'LH(mIU\/mL)', 'FSH\/LH', 'Hip(inch)', 'Waist(inch)',\n       'Waist:Hip_Ratio', 'TSH_(mIU\/L)', 'AMH(ng\/mL)', 'PRL(ng\/mL)',\n       'Vit_D3_(ng\/mL)', 'PRG(ng\/mL)', 'RBS(mg\/dl)', 'Weight_gain(Y\/N)',\n       'hair_growth(Y\/N)', 'Skin_darkening (Y\/N)', 'Hair_loss(Y\/N)',\n       'Pimples(Y\/N)', 'Fast_food_(Y\/N)', 'Reg_Exercise(Y\/N)',\n       'BP_Systolic(mmHg)', 'BP_Diastolic(mmHg)', 'Follicle_No.(L)',\n       'Follicle_No.(R)', 'Avg.Fsize(L)(mm)', 'Avg.Fsize(R)(mm)',\n       'Endometrium(mm)', 'Sl.No_y', 'PCOS(Y\/N)_y',\n       'I_beta-HCG(mIU\/mL)', 'II_beta-HCG(mIU\/mL)', 'AMH(ng\/mL)_y']","8c1edc24":"data.drop(['Sl.No_y', 'PCOS(Y\/N)_y','AMH(ng\/mL)_y'],axis=1,inplace=True)","89430fe3":"data.info()","b5303fd1":"data.describe().T","b6c67dc3":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\ntarget = data['PCOS_(Y\/N)']\ndata.drop('PCOS_(Y\/N)',axis=1,inplace=True)","fb7b8596":"plt.figure(figsize=(8,7))\nsns.countplot(target)\nplt.title('Data imbalance')\nplt.show()","25e61f4c":"X_train,X_test, y_train, y_test = train_test_split(data, target, test_size=0.15, random_state=1, stratify = target)\nX_train,X_valid, y_train, y_valid =  train_test_split(X_train, y_train, test_size=0.3, random_state=1, stratify=y_train)","374689d2":"from sklearn.metrics import roc_auc_score\ndef print_scores(m):\n    res = [roc_auc_score(y_train,m.predict_proba(X_train)[:,1]),roc_auc_score(y_valid,m.predict_proba(X_valid)[:,1])]\n    for r in res:\n        print(r)","66ef38c2":"rf = RandomForestClassifier(n_jobs=-1,n_estimators=150,max_features='sqrt',min_samples_leaf=10)\nrf.fit(X_train,y_train)\nprint_scores(rf)","6ed3a1a6":"from sklearn.metrics import roc_curve\ny_pred_proba = rf.predict_proba(X_valid)[:,1]\nfpr, tpr, thresholds = roc_curve(y_valid, y_pred_proba)","42096ffb":"plt.figure(figsize=(8,7))\nplt.plot([0,1],[0,1],'k--')\nplt.plot(fpr,tpr, label='Knn')\nplt.xlabel('fpr')\nplt.ylabel('tpr')\nplt.title('Knn(n_neighbors=11) ROC curve')\nplt.show()","796f6ade":"def get_fi(m, df):\n    return pd.DataFrame({'col': df.columns, 'imp': m.feature_importances_}).sort_values('imp',ascending=False)\n\n#lets get the feature importances for training set\nfi = get_fi(rf,X_train)","42b708fe":"def plot_fi(df):\n    df.plot('col','imp','barh',figsize=(10,10))\n    \nplot_fi(fi)","c947308e":"Before fitting the model, we will have to split our data into **train**, **valid** and **test** sets. We can use sklearn's train_test_split function to split our data","27981f48":"# Model Based EDA\n\nIn the course, Jeremy Howard took us through the following procedure for EDA. Rather than looking at the data and finding relationships and interactions  between the features, the course suggest fitting a model on the data and looking at the model importances and getting the intution from the model itself. \n\nUsing this approach helps us to not all prey to any biases that we form from the features. This approach helps to find:\n* Important Features.\n* Redundant Features.\n* Feature Interactions.","7afead0f":"I have been working on **fastai** courses for quite sometime. This is a technique I came across in the fastai [Introduction to Machine Learning for coders](http:\/\/course18.fast.ai\/ml)","66d5f777":"Lets plot data important features and look if we can find some interesting relationships","a15b5737":"# Exploratory Data Analysis","f18d0480":"We have extracted the two observations in the `Unnamed: 42` column. Looks like there was some mistake with entering the data. Lets look at the other columns to check if there are other mistake as well.","4dcd0f55":"# Loading the data","bf8c35fb":"# Fitting a Model","75837f26":"Now we are getting a high roc auc score, lets start with out Exploratory Data Analysis","eeca295b":"Looks like we can just drop the last erroneous column and go ahead with the analysis","74fdcdc2":"## Observations\n* We can see that the top features are:\n    1. Follicle_No.(R)\n    2. Follicle_No.(L)\n    3. hair_growth(Y\/N)\n    4. Skin_darkening (Y\/N)\n    5. Weight_gain(Y\/N)\n    6. Fast_food_(Y\/N)\n    7. Cycle(R\/I)\n    8. AMH(ng\/mL)\n    9. Cycle_length(days)\n    10. Pimples(Y\/N)","041cdde8":"After loading the data, lets print the data to have a look at the data. Remember, We are not looking at the features in the data. We are just making sure that all the data has been loaded correctly","c5445519":"## Dropping the column `Unnamed: 42`","15f926f6":"# Introduction ","2df5bf61":"Looks like the is some discrepancy in the data. We can see the last row (as transpose of the head is displayed) has `Unnamed:42`. Lets Check the data if we can correct it","14f0aebe":"# To be continued...","f2ea2079":"We can see there is 1 null value in `Marraige Status (Yrs)`","e8073106":"We have successfully loaded the data. ","9e346128":"## Merging the two dataframes"}}