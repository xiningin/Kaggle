{"cell_type":{"e93557ee":"code","51e2be3c":"code","0600f851":"code","b6918dda":"code","9acb9e98":"code","16b8e01b":"code","cfabaa27":"code","ef831f5e":"code","6f422b92":"code","7a31c246":"code","668078e9":"code","7cf4dccb":"code","e186f6e0":"code","5206add9":"code","2a2ed4f5":"code","affefbb6":"code","e9f0b6df":"code","d375c04a":"code","e7ce733c":"code","2cee6964":"code","03a2199d":"code","77809a1e":"code","0af09d1f":"code","708d840b":"code","15efee20":"code","85269c12":"code","85533c6f":"code","0e9e786b":"code","1234fba7":"code","d67b2fa2":"code","07b2610d":"code","6162015f":"code","189fd1b3":"code","90137446":"code","50ae450d":"code","f7d5841d":"code","de217cc3":"code","67bc6ee0":"code","641965c2":"code","5fa28345":"code","c51c1811":"code","b727eae6":"code","582a40c6":"code","08aa0e7a":"code","9e5e9d1c":"code","b9f02f3b":"code","a474955e":"code","7d5ea063":"code","77eff6ae":"code","4b03a35c":"code","34b3dced":"code","492f4f71":"code","a3e75216":"code","69c79afd":"code","368cb925":"code","b2b3f8d8":"code","5816059c":"code","d537e281":"code","71292b30":"code","01677142":"code","76c2d7d8":"code","2c201d01":"code","66b2ebe3":"code","3f978df9":"code","e73485a4":"code","eaec6245":"code","f4eded29":"code","deb63685":"code","7d991b09":"code","a27d4984":"code","bb109786":"code","6de416ae":"code","058774b4":"code","fc4eb03a":"code","4e9c8961":"code","1ff5614b":"code","4a9f81f1":"code","2cbdd6ed":"code","3585ae1c":"code","93e18cc4":"markdown","c8e761fb":"markdown","48d92db9":"markdown","c2d6b50c":"markdown","14170530":"markdown","f945d2b8":"markdown","1e788028":"markdown","c1dc0e60":"markdown","7523a1b6":"markdown","c9d246d2":"markdown","7f5a5e73":"markdown","d1eea08a":"markdown","985cede7":"markdown","a3ed4a17":"markdown","ad53ab0e":"markdown","f78f6e0f":"markdown","9c14017f":"markdown","4ee97eee":"markdown","f83bb437":"markdown","3e781803":"markdown","a12728fd":"markdown","96a2a8d4":"markdown","33f282fc":"markdown","54110c51":"markdown","e8be7922":"markdown","8f13084e":"markdown","958bcb9c":"markdown","84e491d5":"markdown","63808102":"markdown","e60fddf2":"markdown","d5d501d6":"markdown","ab4f4a9e":"markdown","4b0cc870":"markdown","38cc18ba":"markdown","67080413":"markdown","286f2679":"markdown","257f14c5":"markdown","b7108211":"markdown","a9dd7d1b":"markdown","51ceb14d":"markdown","46d4acf7":"markdown","2f97daa2":"markdown","ceae9f66":"markdown","df0431fd":"markdown","0320afe8":"markdown","b1e8f3ec":"markdown","e30e0583":"markdown","5a8a16e0":"markdown","3f156640":"markdown","34e656d5":"markdown","113b8707":"markdown","7b121aa1":"markdown","412be6d5":"markdown"},"source":{"e93557ee":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n# Recover default matplotlib settings\nplt.rcParams.update(plt.rcParamsDefault)\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# settings to display all columns<font><\/font>\npd.set_option(\"display.max_columns\", None)\n# display the dataframe head<font><\/font>\nfrom pylab import rcParams\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport statsmodels.api as sm\nfrom numpy.random import normal, seed\nfrom scipy.stats import norm\nfrom statsmodels.tsa.arima_model import ARMA\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.arima_process import ArmaProcess\nfrom statsmodels.tsa.arima_model import ARIMA\nimport math\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, plot_confusion_matrix\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, f1_score\nfrom sklearn import metrics","51e2be3c":"df = pd.read_csv('..\/input\/appliances-energy-consumption\/energydata_complete.csv')\ndf","0600f851":"df","b6918dda":"df.head()","9acb9e98":"df.tail()","16b8e01b":"df.dtypes","cfabaa27":"df.columns","ef831f5e":"df.shape","6f422b92":"df.size","7a31c246":"df.info()","668078e9":"df.describe()","7cf4dccb":"df.isnull().sum()","e186f6e0":"df.skew()","5206add9":"df.corr()","2a2ed4f5":"df.rename(columns = {'Appliances':'Appliances_energy'}, inplace = True)\ndf.rename(columns={'lights':'lights_energy'} ,inplace=True)\ndf.rename(columns={'T1':'T_kitchen'} ,inplace=True)\ndf.rename(columns={'RH_1':'RH_kitchen'} ,inplace=True)\ndf.rename(columns={'T2':'T_livingroom'} ,inplace=True)\ndf.rename(columns={'RH_2':'RH_livingroom'} ,inplace=True)\ndf.rename(columns={'T3':'T_laundryroom'} ,inplace=True)\ndf.rename(columns={'RH_3':'RH_laundryroom'} ,inplace=True)\ndf.rename(columns={'T4':'T_officeroom'} ,inplace=True)\ndf.rename(columns={'RH_4':'RH_officeroom'} ,inplace=True)\ndf.rename(columns={'T5':'T_bathroom'} ,inplace=True)\ndf.rename(columns={'RH_5':'RH_bathroom'} ,inplace=True)\ndf.rename(columns={'T6':'T_OutsideBuliding'} ,inplace=True)\ndf.rename(columns={'RH_6':'RH_OutsideBuilding'} ,inplace=True)\ndf.rename(columns={'T7':'T_ironingroom'} ,inplace=True)\ndf.rename(columns={'RH_7':'RH_ironingroom'} ,inplace=True)\ndf.rename(columns={'T8':'T_teenagerroom2'} ,inplace=True)\ndf.rename(columns={'RH_8':'RH_teenagerroom2'} ,inplace=True)\ndf.rename(columns={'T9':'T_parentsroom'} ,inplace=True)\ndf.rename(columns={'RH_9':'RH_parentsroom'} ,inplace=True)","affefbb6":"df.columns","e9f0b6df":"df['date'].dtype","d375c04a":"df['date'] = pd.to_datetime(df['date'])","e7ce733c":"df.dtypes","2cee6964":"plt.figure(figsize=(20,6))\nsns.lineplot(y=df['Appliances_energy'],x = df['date'],linewidth = 1.5 , label = 'Appliances_energy')\nsns.lineplot(y=df['lights_energy'],x = df['date'],linewidth = 1.5 , label = 'lights_energy')\nplt.xlabel ('Date')\nplt.ylabel ('Energy Consumed by Lights and aappliances')\nplt.title('Appliances energy vs Lights energy Times Series Forecasting')\nplt.show()","03a2199d":"df[df['Appliances_energy'] < df['lights_energy']]","77809a1e":"plt.figure(figsize=(20,6))\nsns.lineplot(y=df['Appliances_energy'],x = df['date'],linewidth = 1.5)\nplt.xlabel ('Date')\nplt.ylabel ('Energy Consumed by Appliances')\nplt.title('Appliances energy Times Series Forecasting')\nplt.show()","0af09d1f":"plt.figure(figsize=(20,6))\nsns.lineplot(y=df['lights_energy'],x = df['date'],linewidth = 1.5)\nplt.xlabel ('Date')\nplt.ylabel ('Energy Consumed by Lights')\nplt.title('Lights energy Times Series Forecasting')\nplt.show()","708d840b":"df['lights_energy'].value_counts()","15efee20":"df[df['lights_energy'] == 0]['date']","85269c12":"df_lights_energy = df.groupby('lights_energy').agg({'Appliances_energy' : 'mean', 'T_kitchen':'mean', 'RH_kitchen':'mean',\n                                                   'T_livingroom':'mean', 'RH_livingroom':'mean', 'T_laundryroom':'mean', \n                                                    'RH_laundryroom':'mean','T_officeroom':'mean', 'RH_officeroom':'mean',\n                                                    'T_bathroom':'mean', 'RH_bathroom':'mean','T_OutsideBuliding':'mean',\n                                                    'RH_OutsideBuilding':'mean', 'T_ironingroom':'mean','RH_ironingroom':'mean',\n                                                    'T_teenagerroom2':'mean', 'RH_teenagerroom2':'mean','T_parentsroom':'mean',\n                                                    'RH_parentsroom':'mean', 'T_out':'mean', 'Press_mm_hg':'mean', \n                                                    'RH_out':'mean','Windspeed':'mean', 'Visibility':'mean',\n                                                   'Tdewpoint':'mean', 'rv1':'mean', 'rv2':'mean'})\ndf_lights_energy","85533c6f":"px.bar(data_frame=df_lights_energy.drop(['Press_mm_hg','Appliances_energy'],axis = 1), barmode='group',orientation = 'h',\n       width=1000, height=1600,title = \"<b>Categories of lights energy<\/b>\",template=\"plotly_dark\")","0e9e786b":"px.bar(data_frame=df_lights_energy[['Press_mm_hg','Appliances_energy']], barmode='group',\n       width=1000, height=500,title = \"<b>Categories of lights energy<\/b>\",template=\"plotly_dark\")","1234fba7":"lights_energy_max = df.groupby('lights_energy').agg({'Appliances_energy' : 'max', 'T_kitchen':'max', 'RH_kitchen':'max',\n                                                   'T_livingroom':'max', 'RH_livingroom':'max', 'T_laundryroom':'max', \n                                                    'RH_laundryroom':'max','T_officeroom':'max', 'RH_officeroom':'max',\n                                                    'T_bathroom':'max', 'RH_bathroom':'max','T_OutsideBuliding':'max',\n                                                    'RH_OutsideBuilding':'max', 'T_ironingroom':'max','RH_ironingroom':'max',\n                                                    'T_teenagerroom2':'max', 'RH_teenagerroom2':'max','T_parentsroom':'max',\n                                                    'RH_parentsroom':'max', 'T_out':'max', 'Press_mm_hg':'max', \n                                                    'RH_out':'max','Windspeed':'max', 'Visibility':'max',\n                                                   'Tdewpoint':'max', 'rv1':'max', 'rv2':'max'})","d67b2fa2":"lights_energy_max.style.highlight_max(color = 'cyan', axis = 0)","07b2610d":"lights_energy_min = df.groupby('lights_energy').agg({'Appliances_energy' : 'min', 'T_kitchen':'min', 'RH_kitchen':'min',\n                                                   'T_livingroom':'min', 'RH_livingroom':'min', 'T_laundryroom':'min', \n                                                    'RH_laundryroom':'min','T_officeroom':'min', 'RH_officeroom':'min',\n                                                    'T_bathroom':'min', 'RH_bathroom':'min','T_OutsideBuliding':'min',\n                                                    'RH_OutsideBuilding':'min', 'T_ironingroom':'min','RH_ironingroom':'min',\n                                                    'T_teenagerroom2':'min', 'RH_teenagerroom2':'min','T_parentsroom':'min',\n                                                    'RH_parentsroom':'min', 'T_out':'min', 'Press_mm_hg':'min', \n                                                    'RH_out':'min','Windspeed':'min', 'Visibility':'min',\n                                                   'Tdewpoint':'min', 'rv1':'min', 'rv2':'min'})","6162015f":"lights_energy_min.style.highlight_min(color = 'magenta', axis = 0)","189fd1b3":"# Combining lineplots using relplot\nplt.figure(figsize=(10,10))\nsns.set(rc={'xtick.labelsize':17,'ytick.labelsize':17,'axes.labelsize':20  , \"axes.grid\":False})\nsns.relplot(x=\"date\" , y=\"Appliances_energy\" , hue=\"lights_energy\",kind='line', height=8.5, aspect=1 ,data=df)\nplt.xticks(rotation=90) # Rotating X tickts by 45 degrees\nplt.show()","90137446":"for i in df.columns[3:]:\n    plt.figure(figsize=(20,6))\n    sns.lineplot(y=df[i],x = df['date'],linewidth = 1.5)\n    plt.xlabel ('Date')\n    plt.ylabel (i)\n    plt.title('{}Times Series Forecasting'.format(i))\n    plt.xticks(rotation=90)\n    plt.show()","50ae450d":"# Combining lineplots using relplot\nfor i in df.columns[3:]:\n    plt.figure(figsize=(10,10))\n    sns.relplot(x=\"date\" , y=i , hue=\"lights_energy\",kind='line', height=8.5, aspect=1 ,data=df)\n    plt.xticks(rotation=90) # Rotating X tickts by 45 degrees\n    plt.show()","f7d5841d":"df.set_index('date',inplace = True)","de217cc3":"# Rolling window functions\nrolling_kitchen = df['T_kitchen'].rolling('90D').mean()\ndf['T_kitchen'].plot()\nrolling_kitchen.plot()\nplt.legend(['High','Rolling Mean'])\n# Plotting a rolling mean of 90 day window with original High attribute of google stocks\nplt.show()","67bc6ee0":"T_kitchen_mean = df.T_kitchen.expanding().mean()\nT_kitchen_std = df.T_kitchen.expanding().std()\ndf.T_kitchen.plot()\nT_kitchen_mean.plot()\nT_kitchen_std.plot()\nplt.legend(['High','Expanding Mean','Expanding Standard Deviation'])\nplt.show()","641965c2":"df['Appliances_energy'].plot(figsize=(16,8))","5fa28345":"# Now, for decomposition...\nrcParams['figure.figsize'] = 16, 9\ndecomposed_Appliances_volume = sm.tsa.seasonal_decompose(df['Appliances_energy'],freq=360) # The frequncy is annual\nfigure = decomposed_Appliances_volume.plot()\nplt.xticks(rotation=90) # Rotating X tickts by 45 degrees\nplt.show()","c51c1811":"# Now, for decomposition...\nrcParams['figure.figsize'] = 16, 9\ndecomposed_Lights_volume = sm.tsa.seasonal_decompose(df['lights_energy'],freq=360) # The frequncy is annual\nfigure = decomposed_Lights_volume.plot()\n#plt.xticks(rotation=90) # Rotating X tickts by 45 degrees\nplt.show()","b727eae6":"# Now, for decomposition...\\\n#plt.xticks(rotation=90) # Rotating X tickts by 45 degrees\nrcParams['figure.figsize'] = 16, 9\ndecomposed_T_kitchen_volume = sm.tsa.seasonal_decompose(df['T_kitchen'],freq=360) # The frequncy is annual\nfigure = decomposed_T_kitchen_volume.plot()\nplt.show()","582a40c6":"# Now, for decomposition...\n#plt.xticks(rotation=90) # Rotating X tickts by 45 degrees\nrcParams['figure.figsize'] = 16, 9\ndecomposed_RH_kitchen_volume = sm.tsa.seasonal_decompose(df['RH_kitchen'],freq=360) # The frequncy is annual\nfigure = decomposed_RH_kitchen_volume.plot()\nplt.show()","08aa0e7a":"# Now, for decomposition...\nrcParams['figure.figsize'] = 16, 9\ndecomposed_T_livingroom_volume = sm.tsa.seasonal_decompose(df['T_livingroom'],freq=360) # The frequncy is annual\nfigure = decomposed_T_livingroom_volume.plot()\nplt.xticks(rotation=90) # Rotating X tickts by 45 degrees\nplt.show()","9e5e9d1c":"decomposed_Appliances_volume.trend.plot()","b9f02f3b":"decomposed_Appliances_volume.trend.diff().plot()","a474955e":"# AR(1) MA(1) model:AR parameter = +0.9\nrcParams['figure.figsize'] = 16, 16\nplt.subplot(4,1,1)\nar1 = np.array([1, -0.9]) # We choose -0.9 as AR parameter is +0.9\nma1 = np.array([1])\nAR1 = ArmaProcess(ar1, ma1)\nsim1 = AR1.generate_sample(nsample=1000)\nplt.title('AR(1) model: AR parameter = +0.9')\nplt.plot(sim1)\n# We will take care of MA model later\n# AR(1) MA(1) AR parameter = -0.9\nplt.subplot(4,1,2)\nar2 = np.array([1, 0.9]) # We choose +0.9 as AR parameter is -0.9\nma2 = np.array([1])\nAR2 = ArmaProcess(ar2, ma2)\nsim2 = AR2.generate_sample(nsample=1000)\nplt.title('AR(1) model: AR parameter = -0.9')\nplt.plot(sim2)\n# AR(2) MA(1) AR parameter = 0.9\nplt.subplot(4,1,3)\nar3 = np.array([2, -0.9]) # We choose -0.9 as AR parameter is +0.9\nma3 = np.array([1])\nAR3 = ArmaProcess(ar3, ma3)\nsim3 = AR3.generate_sample(nsample=1000)\nplt.title('AR(2) model: AR parameter = +0.9')\nplt.plot(sim3)\n# AR(2) MA(1) AR parameter = -0.9\nplt.subplot(4,1,4)\nar4 = np.array([2, 0.9]) # We choose +0.9 as AR parameter is -0.9\nma4 = np.array([1])\nAR4 = ArmaProcess(ar4, ma4)\nsim4 = AR4.generate_sample(nsample=1000)\nplt.title('AR(2) model: AR parameter = -0.9')\nplt.plot(sim4)\nplt.show()","7d5ea063":"model = ARMA(sim1, order=(1,0))\nresult = model.fit()\nprint(result.summary())\nprint(\"\u03bc={} ,\u03d5={}\".format(result.params[0],result.params[1]))","77eff6ae":"# Predicting simulated AR(1) model \nresult.plot_predict(start=900, end=1010)\nplt.show()","4b03a35c":"rmse = math.sqrt(mean_squared_error(sim1[900:1011], result.predict(start=900,end=999)))\nprint(\"The root mean squared error is {}.\".format(rmse))","34b3dced":"# Predicting Appliances energy\nAppliance = ARMA(df['Appliances_energy'].diff().iloc[1:].values, order=(1,0))\nres = Appliance.fit()\nres.plot_predict(start=1000, end=1100)\nplt.show()","492f4f71":"rmse = math.sqrt(mean_squared_error(df['Appliances_energy'].diff().iloc[1000:1101].values, result.predict(start=1000,end=1100)))\nprint(\"The root mean squared error is {}.\".format(rmse))","a3e75216":"rcParams['figure.figsize'] = 16, 6\nar1 = np.array([1])\nma1 = np.array([1, -0.5])\nMA1 = ArmaProcess(ar1, ma1)\nsim1 = MA1.generate_sample(nsample=1000)\nplt.plot(sim1)","69c79afd":"model = ARMA(sim1, order=(0,1))\nresult = model.fit()\nprint(result.summary())\nprint(\"\u03bc={} ,\u03b8={}\".format(result.params[0],result.params[1]))","368cb925":"# Forecasting and predicting Appliances_energy\nmodel = ARMA(df['Appliances_energy'].diff().iloc[1:].values, order=(0,3))\nresult = model.fit()\nprint(result.summary())\nprint(\"\u03bc={} ,\u03b8={}\".format(result.params[0],result.params[1]))\nresult.plot_predict(start=1000, end=1100)\nplt.show()","b2b3f8d8":"rmse = math.sqrt(mean_squared_error(df['Appliances_energy'].diff().iloc[1000:1101].values, result.predict(start=1000,end=1100)))\nprint(\"The root mean squared error is {}.\".format(rmse))","5816059c":"# Forecasting and RH_kitchen\nmodel = ARMA(df['Appliances_energy'].diff().iloc[1:].values, order=(3,3))\nresult = model.fit()\nprint(result.summary())\nprint(\"\u03bc={}, \u03d5={}, \u03b8={}\".format(result.params[0],result.params[1],result.params[2]))\nresult.plot_predict(start=1000, end=1100)\nplt.show()","d537e281":"rmse = math.sqrt(mean_squared_error(df['Appliances_energy'].diff().iloc[1000:1101].values, result.predict(start=1000,end=1100)))\nprint(\"The root mean squared error is {}.\".format(rmse))","71292b30":"# Predicting the Appliances_energy\nrcParams['figure.figsize'] = 16, 6\nmodel = ARIMA(df['Appliances_energy'].diff().iloc[1:].values, order=(2,1,0))\nresult = model.fit()\nprint(result.summary())\nresult.plot_predict(start=700, end=1000)\nplt.show()","01677142":"rmse = math.sqrt(mean_squared_error(df['Appliances_energy'].diff().iloc[700:1001].values, result.predict(start=700,end=1000)))\nprint(\"The root mean squared error is {}.\".format(rmse))","76c2d7d8":"# Predicting energy use by Appliances and lights\ntrain_sample = pd.concat([df['Appliances_energy'].diff().iloc[1:],df['lights_energy'].diff().iloc[1:]],axis=1)\nmodel = sm.tsa.VARMAX(train_sample,order=(2,1),trend='c')\nresult = model.fit(maxiter=1000,disp=False)\nprint(result.summary())\npredicted_result = result.predict(start=0, end=1000)\nresult.plot_diagnostics()\n# calculating error\nrmse = math.sqrt(mean_squared_error(train_sample.iloc[1:1002].values, predicted_result.values))\nprint(\"The root mean squared error is {}.\".format(rmse))","2c201d01":"# Predicting Appliance energy\ntrain_sample = df['Appliances_energy'].diff().iloc[1:].values\nmodel = sm.tsa.SARIMAX(train_sample,order=(4,0,4),trend='c')\nresult = model.fit(maxiter=1000,disp=False)\nprint(result.summary())\npredicted_result = result.predict(start=0, end=500)\nresult.plot_diagnostics()\n# calculating error\nrmse = math.sqrt(mean_squared_error(train_sample[1:502], predicted_result))\nprint(\"The root mean squared error is {}.\".format(rmse))","66b2ebe3":"plt.plot(train_sample[1:502],color='red')\nplt.plot(predicted_result,color='blue')\nplt.legend(['Actual','Predicted'])\nplt.title('Appliances Energy')\nplt.show()","3f978df9":"# Predicting Appliance_energy'\ntrain_sample = df['Appliances_energy'].diff().iloc[1:].values\nmodel = sm.tsa.UnobservedComponents(train_sample,'local level')\nresult = model.fit(maxiter=1000,disp=False)\nprint(result.summary())\npredicted_result = result.predict(start=0, end=500)\nresult.plot_diagnostics()\n# calculating error\nrmse = math.sqrt(mean_squared_error(train_sample[1:502], predicted_result))\nprint(\"The root mean squared error is {}.\".format(rmse))","e73485a4":"plt.plot(train_sample[1:502],color='red')\nplt.plot(predicted_result,color='blue')\nplt.legend(['Actual','Predicted'])\nplt.title('Appliance energy')\nplt.show()","eaec6245":"# Predicting Appliances and lights energy\ntrain_sample = pd.concat([df['Appliances_energy'].diff().iloc[1:],df['lights_energy'].diff().iloc[1:]],axis=1)\nmodel = sm.tsa.DynamicFactor(train_sample, k_factors=1, factor_order=2)\nresult = model.fit(maxiter=1000,disp=False)\nprint(result.summary())\npredicted_result = result.predict(start=0, end=1000)\nresult.plot_diagnostics()\n# calculating error\nrmse = math.sqrt(mean_squared_error(train_sample.iloc[1:1002].values, predicted_result.values))\nprint(\"The root mean squared error is {}.\".format(rmse))","f4eded29":"''' Plot a Shifted Correlation Matrix '''\n# Diagonal correlation is always unity & less relevant, shifted variant shows only relevant cases\ndef corrMat(df,id=False):\n    \n    corr_mat = df.corr().round(2)\n    f, ax = plt.subplots(figsize=(12,7))\n    mask = np.triu(np.ones_like(corr_mat, dtype=bool))\n    mask = mask[1:,:-1]\n    corr = corr_mat.iloc[1:,:-1].copy()\n    sns.heatmap(corr,mask=mask,vmin=-0.3,vmax=0.3,center=0, \n                cmap='RdPu_r',square=False,lw=2,annot=True,cbar=False)\n#     bottom, top = ax.get_ylim() \n#     ax.set_ylim(bottom + 0.5, top - 0.5) \n    ax.set_title('Shifted Linear Correlation Matrix')\n    \ncorrMat(df)","deb63685":"train_num_visual_0 = df.select_dtypes(include = ['float64','int64']).columns.tolist()","7d991b09":"sns.set_theme(rc = {'figure.dpi': 120, 'axes.labelsize': 8, \n                    'axes.facecolor': '#f0eee9', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#e8e6e1'}, font_scale = 0.65)\n\nfig, ax = plt.subplots(29, 1, figsize = (7, 100))\n\nfor indx, (column, axes) in list(enumerate(list(zip(train_num_visual_0, ax.flatten())))):\n    \n    sns.scatterplot(ax = axes, y = df[column].index, x = df[column], \n                    hue = df['lights_energy'], palette = 'magma', alpha = 0.8)\n    \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]\n    \nplt.tight_layout()\nplt.show()","a27d4984":"sns.set_theme(rc = {'figure.dpi': 120, 'axes.labelsize': 8, \n                    'axes.facecolor': '#f0eee9', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#e8e6e1'}, font_scale = 0.65)\n\nfig, ax = plt.subplots(28, 1, figsize = (6, 100))\n\nfor indx, (column, axes) in list(enumerate(list(zip(train_num_visual_0, ax.flatten())))):\n    \n    sns.histplot(ax = axes, x = df[column], hue = df['lights_energy'], \n                 palette = 'magma', alpha = 0.8, multiple = 'stack')\n    \n    legend = axes.get_legend() # sns.hisplot has some issues with legend\n    handles = legend.legendHandles\n    legend.remove()\n    axes.legend(handles, ['0', '1'], title = 'lights energy', loc = 'upper right')\n    Quantiles = np.quantile(df[column], [0, 0.25, 0.50, 0.75, 1])\n    \n    for q in Quantiles: axes.axvline(x = q, linewidth = 0.5, color = 'r')\n        \nplt.tight_layout()\nplt.show()","bb109786":"x = df.drop(['lights_energy'],axis = 1)\ndef count_outliers(data,col):\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        q4 = data[col].quantile(1,interpolation='nearest')\n        IQR = q3 -q1\n        global LLP\n        global ULP\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers in\",i)\n        else:\n            print(\"There are outliers in\",i)\n            x = data[data[col]<LLP][col].size\n            y = data[data[col]>ULP][col].size\n            a.append(i)\n            print('Count of outliers are:',x+y)\nglobal a\na = []\nfor i in x.columns:\n    count_outliers(df,i)","6de416ae":"for i in x:\n    sns.boxplot(x = df[i], data = df,color = 'yellowgreen')   #Sepalwidthcm has outliers\n    plt.xlabel(i)\n    plt.show()","058774b4":"for i in x[1:]:\n    sns.scatterplot(y=df[i], x=df['Appliances_energy'],color = 'red')\n    plt.show()","fc4eb03a":"def print_score(label, prediction, train=True):\n    if train:\n        clf_report = pd.DataFrame(classification_report(label, prediction, output_dict=True))\n        print(\"Train Result:\\n================================================\")\n        print(f\"Accuracy Score: {accuracy_score(label, prediction) * 100:.2f}%\")\n        print(\"_______________________________________________\")\n        print(f\"Classification Report:\\n{clf_report}\")\n        print(\"_______________________________________________\")\n        print(f\"Confusion Matrix: \\n {confusion_matrix(y_train, prediction)}\\n\")\n    elif train==False:\n        clf_report = pd.DataFrame(classification_report(label, prediction, output_dict=True))\n        print(\"Test Result:\\n================================================\")        \n        print(f\"Accuracy Score: {accuracy_score(label, prediction) * 100:.2f}%\")\n        print(\"_______________________________________________\")\n        print(f\"Classification Report:\\n{clf_report}\")\n        print(\"_______________________________________________\")\n        print(f\"Confusion Matrix: \\n {confusion_matrix(label, prediction)}\\n\") ","4e9c8961":"scalar = StandardScaler()\n\nX=df.drop('lights_energy',axis=1)\ny=df['lights_energy']\n\nX_train_v, X_test, y_train_v, y_test = train_test_split(X, y, \n                                                    test_size=0.3, random_state=42)\nX_train, X_validate, y_train, y_validate = train_test_split(X_train_v, y_train_v, \n                                                            test_size=0.2, random_state=42)\n\nX_train = scalar.fit_transform(X_train)\nX_validate = scalar.transform(X_validate)\nX_test = scalar.transform(X_test)","1ff5614b":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors = 12)\nknn.fit(X_train,y_train)\n\ny_train_pred = knn.predict(X_train)\ny_test_pred = knn.predict(X_test)\n\nprint_score(y_train, y_train_pred, train=True)\nprint_score(y_test, y_test_pred, train=False)\n\nscores_dict = {\n        'Train': f1_score(y_train,y_train_pred,average='macro'),\n        'Test': f1_score(y_test, y_test_pred,average = 'macro'),\n}","4a9f81f1":"error_rate= []\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors = i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","2cbdd6ed":"plt.figure(figsize = (10,6))\nplt.plot(range(1,40),error_rate,color = 'blue',linestyle = '--',marker = 'o',markerfacecolor='red',markersize = 10)\nplt.title('Error Rate vs K')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","3585ae1c":"# Annotate each cell with the numeric value using integer formatting\nplt.figure(figsize=(4,4))\nax = sns.heatmap(confusion_matrix(y_test, y_test_pred.round()),vmin=0, vmax=2000,annot=True, fmt=\"d\",cmap=\"YlGnBu\")\nplt.yticks(rotation=0)\nplt.show()","93e18cc4":"# Trend, Seasonality and Noise\n## These are the components of a time series\n#### Trend - Consistent upwards or downwards slope of a time series\n#### Seasonality - Clear periodic pattern of a time series(like sine funtion)\n#### Noise - Outliers or missing values","c8e761fb":"#### From plot I can see some days appliances energy is less than lights energy lets see if my observation is correct or not","48d92db9":"#### Observation:\n1. There is clearly no trend in the above plot.\n2. You can also see the uniform seasonal change.\n3. Non-uniform noise that represent outliers and missing values","c2d6b50c":"# Data Visualization","14170530":"# Stationarity\nA stationary time series is one whose statistical properties such as mean, variance, autocorrelation, etc. are all constant over time.\n\nStrong stationarity: is a stochastic process whose unconditional joint probability distribution does not change when shifted in time. Consequently, parameters such as mean and variance also do not change over time.\nWeak stationarity: is a process where mean, variance, autocorrelation are constant throughout the time\nStationarity is important as non-stationary series that depend on time have too many parameters to account for when modelling the time series. diff() method can easily convert a non-stationary series to a stationary series.\n\nWe will try to decompose seasonal component of the above decomposed time series.","f945d2b8":"#### Observation:\n1. Most of the times lights energy is zero that means energy used by light fixtures in house is zero\n2. Out of 19735 date and time stamps only 2 days have consumed more than 50Wh light energy\n3. Out of 19735 date and time stamps only 11 days have consumed more than 40Wh light energy","1e788028":"### Observation:\n1. No relation between light_energy categories and other features in the data","c1dc0e60":"#### Observation:\n1. Most of the minimun values in other feature columns belong to lights_energy = 0 and 10 categories","7523a1b6":"# Data Cleaning","c9d246d2":"#### Observation:\n1. No relation between applaince_energy and other features","7f5a5e73":"#### Observation:\n1. There is no trend in the above plot.\n2. You can also see the uniform seasonal change.\n3. Non-uniform noise that represent outliers and missing values","d1eea08a":"# Unobserved Components\n\nA UCM decomposes the response series into components such as trend, seasons, cycles, and the regression effects due to predictor series. The following model shows a possible scenario:","985cede7":"#### First I want to rename the column names as they were not that easy to read and understand about the data","a3ed4a17":"## Exploring Numerical Variables","ad53ab0e":"# AR Models\nAn autoregressive (AR) model is a representation of a type of random process; as such, it is used to describe certain time-varying processes in nature, economics, etc. The autoregressive model specifies that the output variable depends linearly on its own previous values and on a stochastic term (an imperfectly predictable term); thus the model is in the form of a stochastic difference equation.\n\n1. AR(1) model\nRt = \u03bc + \u03d5Rt-1 + \u03b5t\n\nAs RHS has only one lagged value(Rt-1)this is called AR model of order 1 where \u03bc is mean and \u03b5 is noise at time t\nIf \u03d5 = 1, it is random walk. Else if \u03d5 = 0, it is white noise. Else if -1 < \u03d5 < 1, it is stationary. If \u03d5 is -ve, there is men reversion. If \u03d5 is +ve, there is momentum.\n\n2. AR(2) model\nRt = \u03bc + \u03d51Rt-1 + \u03d52Rt-2 + \u03b5t\n\n3. AR(3) model\nRt = \u03bc + \u03d51Rt-1 + \u03d52Rt-2 + \u03d53Rt-3 + \u03b5t\n\n","f78f6e0f":"#### Now it has been changed to date time lets analyze some time series forecasting","9c14017f":"Taking the slight lag into account, this is a fine model.","4ee97eee":"# Feature Selection and Feature Scaling","f83bb437":"# Prediction using MA models","3e781803":"#### Let us look at maximum values in each category of lights_energy","a12728fd":"#### Observation:\n1. There is some downward trend in the above plot.\n2. You can also see the uniform seasonal change.\n3. Non-uniform noise that represent outliers and missing values","96a2a8d4":"# Data Set Information:\n\nThe data set is at 10 min for about 4.5 months. The house temperature and humidity conditions were monitored with a ZigBee wireless sensor network. Each wireless node transmitted the temperature and humidity conditions around 3.3 min. Then, the wireless data was averaged for 10 minutes periods. The energy data was logged every 10 minutes with m-bus energy meters. Weather from the nearest airport weather station (Chievres Airport, Belgium) was downloaded from a public data set from Reliable Prognosis (rp5.ru), and merged together with the experimental data sets using the date and time column. Two random variables have been included in the data set for testing the regression models and to filter out non predictive attributes (parameters).\n","33f282fc":"#### My observation is wrong, appliances consumed more energy than lights all the time ","54110c51":"#### Let us see those days with light energy consumption by light fixtures in the house","e8be7922":"#### Now lets plot Appliances and light energy seperatly ","8f13084e":"# Forecasting the simulated MA model","958bcb9c":"## Count of Outliers using IQR Method","84e491d5":"#### Observation:\n1. There is some upward trend in the above plot.\n2. You can also see the uniform seasonal change.\n3. Non-uniform noise that represent outliers and missing values","63808102":"# SARIMA Models\n\nSARIMA models are useful for modeling seasonal time series, in which the mean and other statistics for a given season are not stationary across the years. The SARIMA model defined constitutes a straightforward extension of the nonseasonal autoregressive-moving average (ARMA) and autoregressive integrated moving average (ARIMA) models presented","e60fddf2":"# ARIMA Models\nAn autoregressive integrated moving average (ARIMA) model is a generalization of an autoregressive moving average (ARMA) model. Both of these models are fitted to time series data either to better understand the data or to predict future points in the series (forecasting). ARIMA models are applied in some cases where data show evidence of non-stationarity, where an initial differencing step (corresponding to the \"integrated\" part of the model) can be applied one or more times to eliminate the non-stationarity. ARIMA model is of the form: ARIMA(p,d,q): p is AR parameter, d is differential parameter, q is MA parameter\n\n1. ARIMA(1,0,0)\nyt = a1yt-1 + \u03f5t\n\n2. ARIMA(1,0,1)\nyt = a1yt-1 + \u03f5t + b1\u03f5t-1\n\n3. ARIMA(1,1,1)\n\u0394yt = a1\u0394yt-1 + \u03f5t + b1\u03f5t-1 where \u0394yt = yt - yt-1","d5d501d6":"#### As we can see above that date column is of object type we need to convert it into datetime so that we can do time series forecasting","ab4f4a9e":"# VAR Models\n\nVector autoregression (VAR) is a stochastic process model used to capture the linear interdependencies among multiple time series. VAR models generalize the univariate autoregressive model (AR model) by allowing for more than one evolving variable. All variables in a VAR enter the model in the same way: each variable has an equation explaining its evolution based on its own lagged values, the lagged values of the other model variables, and an error term. VAR modeling does not require as much knowledge about the forces influencing a variable as do structural models with simultaneous equations: The only prior knowledge required is a list of variables which can be hypothesized to affect each other intertemporally.","4b0cc870":"# MA Models\nThe moving-average (MA) model is a common approach for modeling univariate time series. The moving-average model specifies that the output variable depends linearly on the current and various past values of a stochastic (imperfectly predictable) term.\n\n1. MA(1) model\nRt = \u03bc + \u03f5t1 + \u03b8\u03f5t-1\n\nIt translates to Today's returns = mean + today's noise + yesterday's noise\n\nAs there is only 1 lagged value in RHS, it is an MA model of order 1","38cc18ba":"# Exploratory Data Analysis","67080413":"# Analysis of Appliances_energy and lights_energy","286f2679":">#### Obsevation:\n1. Appliances using more energy than Light at maximum times\n2. The highest usage of energy for appliances was recoreded in 1st month of 2016\n3. Appliances using more energy some days and very less somedays we need to figureout why by comparing with other features\n4. Appliances energy usage was very high on starting and ending days of month but alters in middle. For this we have to do analysis on light and appliances energy once again seperatly.","257f14c5":"# Attribute Information:\n\n#### date time year-month-day hour:minute:second\n#### Appliances, energy use in Wh\n#### lights, energy use of light fixtures in the house in Wh\n#### T1, Temperature in kitchen area, in Celsius\n#### RH_1, Humidity in kitchen area, in %\n#### T2, Temperature in living room area, in Celsius\n#### RH_2, Humidity in living room area, in %\n#### T3, Temperature in laundry room area\n#### RH_3, Humidity in laundry room area, in %\n#### T4, Temperature in office room, in Celsius\n#### RH_4, Humidity in office room, in %\n#### T5, Temperature in bathroom, in Celsius\n#### RH_5, Humidity in bathroom, in %\n#### T6, Temperature outside the building (north side), in Celsius\n#### RH_6, Humidity outside the building (north side), in %\n#### T7, Temperature in ironing room , in Celsius\n#### RH_7, Humidity in ironing room, in %\n#### T8, Temperature in teenager room 2, in Celsius\n#### RH_8, Humidity in teenager room 2, in %\n#### T9, Temperature in parents room, in Celsius\n#### RH_9, Humidity in parents room, in %\n#### To, Temperature outside (from Chievres weather station), in Celsius\n#### Pressure (from Chievres weather station), in mm Hg\n#### RH_out, Humidity outside (from Chievres weather station), in %\n#### Wind speed (from Chievres weather station), in m\/s\n#### Visibility (from Chievres weather station), in km\n#### Tdewpoint (from Chievres weather station), \u00c2\u00b0C\n#### rv1, Random variable 1, nondimensional\n#### rv2, Random variable 2, nondimensional\n\nWhere indicated, hourly data (then interpolated) from the nearest airport weather station (Chievres Airport, Belgium) was downloaded from a public data set from Reliable Prognosis, rp5.ru. Permission was obtained from Reliable Prognosis for the distribution of the 4.5 months of weather data.","b7108211":"#### Observation:\n1. There is some upard trend in the above plot.\n2. You can also see the uniform seasonal change.\n3. Non-uniform noise that represent outliers and missing values","a9dd7d1b":"# Window Functions\nWindow functions are used to identify sub periods, calculates sub-metrics of sub-periods.\n\nRolling - Same size and sliding\n\nExpanding - Contains all prior values","51ceb14d":"#### Throughout the solution keep in mind that T represents Temparature in that room in Celsius and RH represents room humidty in thata room in percentage, Appliances and lights energy in Wh","46d4acf7":"# Loading DataSet","2f97daa2":"# Simulating MA(1) Model","ceae9f66":"#### Observation:\n1. Most of the maximum values in other featuren columns belong to lights_energy used = 0 category","df0431fd":"<h1 style=\"color:#fce444;font-size:45px;font-family:Georgia;text-align:center;\"><strong>Appliances Energy\u26a1 <strong style=\"color:black;font-size:40px;font-family:Georgia;\"> <strong style=\"color:#fce444;font-size:40px;font-family:Georgia;\">\"Time Series \u231b Analysis\" <strong style=\"color:black;font-size:45px;font-family:Georgia;\">:- <\/strong><\/strong><\/strong><\/strong><\/h1>","0320afe8":"# Data Visualization","b1e8f3ec":"## Box plot of Numerical Column","e30e0583":"# Forcasting a Model","5a8a16e0":"# Contents\n1. Loading Dataset\n2. Exploratory Data Analysis\n3. Data Cleaning\n4. Data Visualization with time series plots\n5. Analysis of Appliances_energy and lights_energy\n6. Window Functions\n7. Trend, Seasonality and Noise\n8. Stationarity\n9. AR Models(Time series analysis model)\n10. MA Models(Time series analysis model)\n11. ARMA Models (Time series analysis model)\n12. ARIMA Models(Time series analysis model)\n13. VAR Models (Time series analysis model)\n14. SARIMA Models (Time series analysis model)\n15. Unobserved Components\n16. Dynamic Factor Models\n17. Data Visualization (heatmap, histogram, bar,scatterplots, boxplots)\n18. Feature Selection and Feature Scaling\n19. Apply KNN for Lights_energy","3f156640":"# Prediction using ARIMA model","34e656d5":"# Apply KNN for Lights_energy","113b8707":"# Dynamic Factor Models\nDynamic-factor models are flexible models for multivariate time series in which the observed endogenous variables are linear functions of exogenous covariates and unobserved factors, which have a vector autoregressive structure. The unobserved factors may also be a function of exogenous covariates. The disturbances in the equations for the dependent variables may be autocorrelated.","7b121aa1":"# ARMA Models\n\nAutoregressive\u2013moving-average (ARMA) models provide a parsimonious description of a (weakly) stationary stochastic process in terms of two polynomials, one for the autoregression and the second for the moving average. It's the fusion of AR and MA models.\n\n## ARMA(1,1) model\n1. Rt = \u03bc + \u03d5Rt-1 + \u03f5t + \u03b8\u03f5t-1\nBasically, Today's return = mean + Yesterday's return + noise + yesterday's noise.\n\nPrediction using ARMA models\nI am not simulating any model because it's quite similar to AR and MA models. Just forecasting and predictions for this one.","412be6d5":"#### Let us look at minimum values in each category of lights_energy"}}