{"cell_type":{"bd1cb19e":"code","185eec3e":"code","701d5d32":"code","b1ea3b08":"code","0313e9a4":"code","64129a89":"code","549c6235":"code","9d677cfc":"code","c9429d46":"code","b46ea098":"code","8a026555":"code","52090c48":"code","6c68d573":"code","a0af64bf":"code","5bf0ab3b":"code","d96fef15":"code","1898c915":"code","a3c16a53":"markdown","bed110df":"markdown","5824a5de":"markdown"},"source":{"bd1cb19e":"import pandas as pd\n\ndf = pd.read_csv('..\/input\/berkshire-hathaway-stock-latest-and-updated\/BekshireHathaway_stock_history.csv')\ndf","185eec3e":"df = df.drop_duplicates()","701d5d32":"df.isnull().sum()","b1ea3b08":"print(type(df['Date'][0]))\ndf","0313e9a4":"#Check datetime format\nimport datetime\nfrom datetime import datetime\n\n#Sort date time format\ndate_time_str = df['Date'][0]\n\ndate_time_obj = datetime.strptime(date_time_str, '%Y-%m-%d')\n\nprint (\"The type of the date is now\",  type(date_time_obj))\nprint (\"The date is\", date_time_obj)","64129a89":"for i,j in enumerate(df['Date']):\n    df['Date'][i] = datetime.strptime(df['Date'][i], '%Y-%m-%d')","549c6235":"price_diff = df['High'] - df['Open']\ndf.insert(8,'Price Different',price_diff)","9d677cfc":"df","c9429d46":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\ndf_1 = df\n\nfig=make_subplots(\n        specs=[[{\"secondary_y\": True}]]) \n\nfig.update_layout(xaxis2= {'anchor': 'y', 'overlaying': 'x', 'side': 'top'},\n                  yaxis_domain=[0, 0.94]);\n\nfig.add_trace(\n    go.Scatter(x = df['Date'], y = df['Volume'],\n           name=\"Volume\",\n          ), secondary_y=False)\nfig.add_trace(\n    go.Scatter(x = df['Date'], y = df['High'],\n               name=\"High\",\n               line_color=\"#ee0000\"), secondary_y=True)\nfig.data[1].update(xaxis='x2')\n#fig.update_layout('Volume vs. High vs. Date')\nfig.update_layout()","b46ea098":"# Modelling it by using the volume of yesterday to predict the if the stock will be raise by 1% in tomorrow","8a026555":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\ndf = df.sort_values(by=\"Date\")\n\n#If price different is bigger than mean, take is as shortsqueezed\nlabel_is_Raised = []\nfor i,j in enumerate(df['Price Different']):\n    if j > (df['Open'].iloc[i])*0.01:\n        label = 1\n    elif j < (df['Open'].iloc[i])*0.01:\n        label = 0\n    label_is_Raised.append(label)\n\n#make shortsqueezed as time lag1\nlabel_is_Raised = label_is_Raised[1:]\nlabel_is_Raised.append(0)\ndf.insert(8,'is_Raised',label_is_Raised)","52090c48":"from sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE\n\n#Split as training and testing\nX = df['Volume']\ny = df['is_Raised']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,shuffle = False, stratify = None)","6c68d573":"import seaborn as sns\nsns.countplot(y_train)","a0af64bf":"from sklearn.metrics import classification_report\n#Fit into DecisionTree\nmodel = DecisionTreeClassifier(random_state=0)\nmodel.fit(X_train.values.reshape(-1, 1), y_train) \ny_pred = model.predict(X_test.values.reshape(-1, 1))\nprint(' Model accuracy score: {0:0.4f}'.format(accuracy_score(y_test, y_pred)))\nprint(classification_report(y_test, y_pred))","5bf0ab3b":"from xgboost.sklearn import XGBClassifier\nfrom sklearn.metrics import accuracy_score\n\nmodel = XGBClassifier(use_label_encoder=False, verbosity = 0)\nmodel.fit(X_train.values.reshape(-1, 1), y_train) \ny_pred = model.predict(X_test.values.reshape(-1, 1))\nprint(' Model accuracy score: {0:0.4f}'.format(accuracy_score(y_test, y_pred)))\nprint(classification_report(y_test, y_pred))","d96fef15":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nmodel = RandomForestClassifier(random_state=126)\nmodel.fit(X_train.values.reshape(-1, 1), y_train) \ny_pred = model.predict(X_test.values.reshape(-1, 1))\nprint(' Model accuracy score: {0:0.4f}'.format(accuracy_score(y_test, y_pred)))\nprint(classification_report(y_test, y_pred))","1898c915":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nmodel = LogisticRegression(solver='lbfgs', max_iter=10000)\nmodel.fit(X_train.values.reshape(-1, 1), y_train)\ny_pred = model.predict(X_test.values.reshape(-1, 1))\nprint('Acuracy score:',accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","a3c16a53":"# This is a simple way to see if volume is really affecting stock price","bed110df":"# Even that is true that we have a high accuracy but if you look deeper into recall and precision, you can see we have a low f1 score to prove that we are insufficient to prove that volume can predict stock price rising. In fact we can see the distribution of my feature engineering of is_raised is imbalanced but I think imbalanced data in financial sector is not working, feel free to have more opinions in discussions. \n","5824a5de":"# As you can see from the below graph the correlation between volume and price is not really related, this might because of the stock is really high price so the entry barrier for common investor is really high, we assume people invested in bershike hathaway is investing firm and hedge fund"}}