{"cell_type":{"96a3871a":"code","c8fb897a":"code","7fbad9f2":"code","9b7d12a1":"code","f2e31460":"code","51858499":"code","7f9122d6":"code","1d2b00af":"code","88874ab7":"code","dbf6722e":"code","c1d87513":"code","bd4f74c0":"code","e779b440":"code","d663e64b":"code","8c8052bf":"code","909e9aee":"code","16f24d10":"code","4542ef47":"code","f3bf6bb6":"code","93eb3945":"code","a8b7a685":"code","4a2e3e96":"code","866f6878":"code","bb63ca5d":"code","53773fbf":"code","e1eef891":"code","9e3e9eb9":"code","af5bc512":"code","c75ab7f7":"code","220ebb79":"code","8e00de16":"code","6e397d7a":"code","4c687a8f":"code","78a68952":"code","a3f2cd98":"code","b644ad29":"code","3ae3e47d":"code","b1f60719":"code","939c0313":"code","85f62b62":"code","2ad7c5e6":"code","011424bb":"code","6f7f5317":"code","e9876f2f":"code","746e7f1a":"code","4d7cfb3b":"code","14221c71":"code","3d351f80":"code","4a0e955c":"code","427ab582":"code","cedb7d81":"code","ad4d0903":"code","35a1361a":"code","546fdb8a":"code","6c710629":"code","9d4eb724":"code","98764898":"code","abbf6ef7":"code","c29c5f37":"code","1b2b85dc":"code","db7cf409":"code","48f18e9d":"code","7da3ab78":"code","a0286407":"code","efd5f83c":"code","5fdcdfc8":"code","85e45fe5":"code","541bebb0":"code","2d5f4615":"code","f9d2e29b":"code","4178d05e":"code","d651c691":"code","741059bb":"code","55c6d07c":"code","947ffd3f":"code","3062928b":"code","2ccaf516":"code","ba78938e":"code","2ce5dca7":"code","cb1c43a1":"code","0097b644":"code","b6375d72":"code","7a34da71":"code","b58c5c17":"code","edce3eb8":"code","0f3841eb":"code","0f68b744":"code","581b4706":"code","90427853":"code","dbdb7578":"code","9324e357":"code","af8e44cb":"code","0d74d78e":"code","22e6fcaf":"code","fc56e04c":"code","92cb096d":"code","93537aa9":"code","7fc15a49":"code","2e2f04c2":"code","bf079d04":"code","0d92695e":"code","2bbc5d7e":"code","12caa1df":"code","81dcb895":"code","775dedc6":"markdown","3de6a736":"markdown","cf8e86f5":"markdown","96b41b5d":"markdown","dd8729f2":"markdown","2ad328dd":"markdown","85c2a959":"markdown","547dea69":"markdown","9e1f7a0a":"markdown","30140ce6":"markdown","8bb03539":"markdown","82d19dbb":"markdown","39dd9b05":"markdown","514fa4c1":"markdown","1a876379":"markdown","f631373e":"markdown","d9945a97":"markdown","e73fe57d":"markdown","946cb494":"markdown","7236cf97":"markdown","92beb34a":"markdown","959061ab":"markdown","92845e97":"markdown","cc1cb4a7":"markdown"},"source":{"96a3871a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c8fb897a":"pwd","7fbad9f2":"#Installation of required libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import scale \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import model_selection\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn import neighbors\nfrom sklearn.svm import SVR\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","9b7d12a1":"# Read train and test data with pd.read_csv():\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","f2e31460":"# copy data in order to avoid any change in the original:\ndf_train=train_data.copy()\ndf_test=test_data.copy()","51858499":"df_train.head()","7f9122d6":"df_test.head()","1d2b00af":"df_train.info","88874ab7":"df_test.info","dbf6722e":"df_train.describe().T","c1d87513":"df_test.describe().T","bd4f74c0":"!pip install pandas-profiling","e779b440":"from pandas_profiling import ProfileReport","d663e64b":"profile_train = ProfileReport(df_train, title='Titanic Data Set')","8c8052bf":"profile_train","909e9aee":"profile_test = ProfileReport(df_test, title='Titanic Data Set')","16f24d10":"profile_test","4542ef47":"sns.barplot(x=\"Pclass\",y=\"Survived\", data=df_train);","f3bf6bb6":"sns.barplot(x=\"SibSp\", y=\"Survived\" , data= df_train);","93eb3945":"sns.barplot(x= \"Parch\" , y=\"Survived\", data=df_train);","a8b7a685":"sns.barplot(x=\"Sex\",y=\"Survived\" , data= df_train);","4a2e3e96":"Age_visualization=df_train[\"Age\"].dropna()\nsns.distplot(Age_visualization, kde = False);","866f6878":"sns.kdeplot(df_train[\"Fare\"], shade = True);","bb63ca5d":"(sns\n .FacetGrid(df_train,\n              hue = \"Survived\",\n              height = 6,\n              xlim = (0, 500))\n .map(sns.kdeplot, \"Fare\", shade= True)\n .add_legend()\n);","53773fbf":"(sns\n .FacetGrid(df_train,\n              hue = \"Survived\",\n              height = 6,\n              xlim = (0, 90))\n .map(sns.kdeplot, \"Age\", shade= True)\n .add_legend()\n);","e1eef891":"df_train= df_train.drop(\"Ticket\", axis=1)\ndf_test=df_test.drop(\"Ticket\", axis=1)\ndf_train.head()","9e3e9eb9":"df_train.describe().T","af5bc512":"sns.boxplot(x=df_train[\"Fare\"]);","c75ab7f7":"Q1= df_train[\"Fare\"].quantile(0.25)\nQ3= df_train[\"Fare\"].quantile(0.75)\nIQR=Q3-Q1\n\nlower_limit=Q1-1.5*IQR\nupper_limit=Q3+1.5*IQR\nupper_limit","220ebb79":"df_test.isnull().sum()","8e00de16":"df_train.sort_values(\"Fare\", ascending=False).head(20)","6e397d7a":"df_train_Fare=df_train[\"Fare\"]\ndf_test_Fare=df_test[\"Fare\"]\nupper_fare=263","4c687a8f":"outlier_train = (df_train_Fare>upper_fare)\noutlier_test = (df_test_Fare>upper_fare)","78a68952":"df_train_Fare[outlier_train] = upper_fare\ndf_test_Fare[outlier_test] = upper_fare","a3f2cd98":"df_train[\"Fare\"]=df_train_Fare\ndf_test[\"Fare\"]=df_test_Fare","b644ad29":"df_test[df_test[\"PassengerId\"]==1044]","3ae3e47d":"df_train.sort_values(\"Fare\", ascending=False).head(10)","b1f60719":"df_test.sort_values(\"Fare\", ascending=False).head()","939c0313":"df_train[\"Title\"] = df_train[\"Name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\ndf_test[\"Title\"] = df_test[\"Name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)","85f62b62":"df_train.head()","2ad7c5e6":"df_train[\"Title\"].value_counts()","011424bb":"df_test[\"Title\"].value_counts()","6f7f5317":"sns.barplot(x= \"Title\" , y=\"Survived\", data=df_train);","e9876f2f":"df_train['Title'] = df_train['Title'].replace([ 'Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\ndf_train['Title'] = df_train['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\ndf_train['Title'] = df_train['Title'].replace('Mlle', 'Miss')\ndf_train['Title'] = df_train['Title'].replace('Ms', 'Miss')\ndf_train['Title'] = df_train['Title'].replace('Mme', 'Mrs')","746e7f1a":"df_test['Title'] = df_test['Title'].replace([ 'Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\ndf_test['Title'] = df_test['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\ndf_test['Title'] = df_test['Title'].replace('Mlle', 'Miss')\ndf_test['Title'] = df_test['Title'].replace('Ms', 'Miss')\ndf_test['Title'] = df_test['Title'].replace('Mme', 'Mrs')","4d7cfb3b":"df_train[\"Title\"].value_counts()","14221c71":"df_test[\"Title\"].value_counts()","3d351f80":"df_train[[\"Title\",\"Age\"]].groupby(\"Title\").mean()","4a0e955c":"for i in df_train[\"Title\"]:\n    if i==\"Master\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(5)\n    elif i==\"Miss\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(22) \n    elif i==\"Mr\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(32)\n    elif i==\"Mrs\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(36)\n    elif i==\"Rare\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(46)\n    else:\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(43)","427ab582":"df_train.isnull().sum()","cedb7d81":"df_test[[\"Title\",\"Age\"]].groupby(\"Title\").mean()","ad4d0903":"for i in df_test[\"Title\"]:\n    if i==\"Master\":\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(7)\n    elif i==\"Miss\":\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(22) \n    elif i==\"Mr\":\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(32)\n    elif i==\"Mrs\":\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(39)\n    else:\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(44)","35a1361a":"df_test.isnull().sum()","546fdb8a":"df_test[[\"Pclass\",\"Fare\"]].groupby(\"Pclass\").mean()","6c710629":"df_test[\"Fare\"] = df_test[\"Fare\"].fillna(12)","9d4eb724":"df_test.isnull().sum()","98764898":"df_train[\"N_cabin\"] = (df_train[\"Cabin\"].notnull().astype('int'))\ndf_test[\"N_Cabin\"] = (df_test[\"Cabin\"].notnull().astype('int'))\n\ndf_train = df_train.drop(['Cabin'], axis = 1)\ndf_test = df_test.drop(['Cabin'], axis = 1)\n\ndf_train.head()","abbf6ef7":"df_train[\"Embarked\"].value_counts()","c29c5f37":"df_train[\"Embarked\"]=df_train[\"Embarked\"].fillna(\"S\")","1b2b85dc":"from sklearn import preprocessing\n\nlbe=preprocessing.LabelEncoder()\ndf_train[\"Embarked\"]=lbe.fit_transform(df_train[\"Embarked\"])\ndf_test[\"Embarked\"]=lbe.fit_transform(df_test[\"Embarked\"])","db7cf409":"df_train.head()","48f18e9d":"Sex_mapping={\"male\":0,\"female\":1}\ndf_train[\"Sex\"]=df_train[\"Sex\"].map(Sex_mapping)\ndf_test[\"Sex\"]=df_test[\"Sex\"].map(Sex_mapping)","7da3ab78":"df_train.head()","a0286407":"df_train[[\"Title\",\"Survived\"]].groupby([\"Title\"], as_index=False).mean().sort_values(\"Survived\")","efd5f83c":"Title_mapping={\"Mr\":1,\"Rare\":2,\"Master\":3,\"Miss\":4,\"Mrs\":5,\"Royal\":6}\ndf_train[\"Title\"]=df_train[\"Title\"].map(Title_mapping)\ndf_test[\"Title\"]=df_test[\"Title\"].map(Title_mapping)","5fdcdfc8":"df_train.head()","85e45fe5":"df_test.head()","541bebb0":"df_train = df_train.drop(['Name'], axis = 1)\ndf_test = df_test.drop(['Name'], axis = 1)","2d5f4615":"sns.distplot(Age_visualization, kde = False);","f9d2e29b":"bins = [0, 13, 18, 24, 32, 75, np.inf]\nmylabels = ['Child', 'Teenager', 'Young', 'Young Adult', 'Adult', 'Senior']\ndf_train['AgeGroup'] = pd.cut(df_train[\"Age\"], bins, labels = mylabels)\ndf_test['AgeGroup'] = pd.cut(df_test[\"Age\"], bins, labels = mylabels)","4178d05e":"df_train[[\"AgeGroup\",\"Survived\"]].groupby(\"AgeGroup\").mean()","d651c691":"# Map each Age value to a numerical value:\nage_mapping = {'Child': 1, 'Teenager': 2, 'Young': 3, 'Young Adult':4 , 'Adult': 5, 'Senior':6}\ndf_train['AgeGroup'] = df_train['AgeGroup'].map(age_mapping)\ndf_test['AgeGroup'] = df_test['AgeGroup'].map(age_mapping)","741059bb":"df_train.head()","55c6d07c":"sns.kdeplot(df_train[\"Fare\"], shade = True);","947ffd3f":"(sns\n .FacetGrid(df_train,\n                hue = \"Survived\",\n                height = 6,\n                xlim = (0, 300))\n .map(sns.kdeplot, \"Fare\", shade= True)\n .add_legend()\n);","3062928b":"df_train['FareBand'] = pd.qcut(df_train['Fare'], 10, labels = [1, 2, 3, 4,5,6,7,8,9,10])\ndf_test['FareBand'] = pd.qcut(df_test['Fare'], 10, labels = [1, 2, 3, 4,5,6,7,8,9,10])","2ccaf516":"df_train.head()","ba78938e":"df_train[\"FamilySize\"] =df_train[\"SibSp\"]+df_train[\"Parch\"]+1\ndf_train[\"FamilySize\"].mean()","2ce5dca7":"df_test[\"FamilySize\"] =df_test[\"SibSp\"]+df_test[\"Parch\"]+1\ndf_test[\"FamilySize\"].mean()","cb1c43a1":"sns.distplot(df_train[\"FamilySize\"], kde = False);","0097b644":"df_train['Single'] = df_train['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ndf_train['SmallFam'] = df_train['FamilySize'].map(lambda s: 1 if  2 <= s <= 3  else 0)\ndf_train['MedFam'] = df_train['FamilySize'].map(lambda s: 1 if 4 <= s <= 5 else 0)\ndf_train['LargeFam'] = df_train['FamilySize'].map(lambda s: 1 if s >= 6 else 0)","b6375d72":"df_test['Single'] = df_test['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ndf_test['SmallFam'] = df_test['FamilySize'].map(lambda s: 1 if  2 <= s <= 3  else 0)\ndf_test['MedFam'] = df_test['FamilySize'].map(lambda s: 1 if 4 <= s <= 5 else 0)\ndf_test['LargeFam'] = df_test['FamilySize'].map(lambda s: 1 if s >= 6 else 0)","7a34da71":"df_train = pd.get_dummies(df_train, columns = [\"Title\"])\ndf_train = pd.get_dummies(df_train, columns = [\"Embarked\"], prefix=\"Em\")","b58c5c17":"df_test = pd.get_dummies(df_test, columns = [\"Title\"])\ndf_test = pd.get_dummies(df_test, columns = [\"Embarked\"], prefix=\"Em\")","edce3eb8":"df_train[\"Pclass\"] = df_train[\"Pclass\"].astype(\"category\")\ndf_train = pd.get_dummies(df_train, columns = [\"Pclass\"],prefix=\"Pc\")","0f3841eb":"df_test[\"Pclass\"] = df_test[\"Pclass\"].astype(\"category\")\ndf_test = pd.get_dummies(df_test, columns = [\"Pclass\"],prefix=\"Pc\")","0f68b744":"df_train.head()","581b4706":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\npredictors = df_train.drop(['Survived', 'PassengerId'], axis=1)\ntarget = df_train[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(predictors, target, test_size = 0.20, random_state = 42)","90427853":"x_train.shape","dbdb7578":"x_test.shape","9324e357":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_test)\nacc_logreg = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_logreg)","af8e44cb":"from sklearn.ensemble import RandomForestClassifier\n\nrandomforest = RandomForestClassifier()\nrandomforest.fit(x_train, y_train)\ny_pred = randomforest.predict(x_test)\nacc_randomforest = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_randomforest)","0d74d78e":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbk = GradientBoostingClassifier()\n\ngbk.fit(x_train, y_train)\ny_pred = gbk.predict(x_test)\nacc_gbk = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_gbk)","22e6fcaf":"gbk","fc56e04c":"xgb_params = {\n        'n_estimators': [200, 500],\n        'subsample': [0.6, 1.0],\n        'max_depth': [2,5,8],\n        'learning_rate': [0.1,0.01,0.02],\n        \"min_samples_split\": [2,5,10]}","92cb096d":"xgb = GradientBoostingClassifier()\n\nxgb_cv_model = GridSearchCV(xgb, xgb_params, cv = 10, n_jobs = -1, verbose = 2)","93537aa9":"xgb_cv_model.fit(x_train, y_train)","7fc15a49":"xgb_cv_model.best_params_","2e2f04c2":"xgb = GradientBoostingClassifier(learning_rate = xgb_cv_model.best_params_[\"learning_rate\"], \n                    max_depth = xgb_cv_model.best_params_[\"max_depth\"],\n                    min_samples_split = xgb_cv_model.best_params_[\"min_samples_split\"],\n                    n_estimators = xgb_cv_model.best_params_[\"n_estimators\"],\n                    subsample = xgb_cv_model.best_params_[\"subsample\"])","bf079d04":"xgb_tuned =  xgb.fit(x_train,y_train)","0d92695e":"y_pred = xgb_tuned.predict(x_test)\nacc_gbk = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_gbk)","2bbc5d7e":"feature_imp = pd.Series(xgb_tuned.feature_importances_,\n                        index=x_train.columns).sort_values(ascending=False)\n\nsns.barplot(x=feature_imp, y=feature_imp.index)\nplt.xlabel('Significance Score Of Variables')\nplt.ylabel('Variables')\nplt.title(\"Variable Severity Levels\")\nplt.show()","12caa1df":"ids = df_test['PassengerId']\npredictions = xgb_tuned.predict(df_test)\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput.to_csv('submission.csv', index=False)","81dcb895":"output","775dedc6":"# Feature Engineering","3de6a736":"## Age ","cf8e86f5":"## Ticket","96b41b5d":"# Variable Transformation","dd8729f2":"## Name and Title","2ad328dd":"## Outlier Treatment","85c2a959":"# Data Preparations","547dea69":"## Visualization","9e1f7a0a":"## Family Size","30140ce6":"## Embarked & Title &   Pclass","8bb03539":"# Missing Value Treatment","82d19dbb":"## Sex","39dd9b05":"## Random Forest","514fa4c1":"## Spliting the train data","1a876379":"## Logistic Regression","f631373e":"## Gradient Boosting Classifier","d9945a97":"# Analysis and Visualization of Numeric and Categorical Variables","e73fe57d":"## Embarked","946cb494":"## Cabin","7236cf97":"## AgeGroup","92beb34a":"## Embarked","959061ab":"# Modeling, Evaluation and Model Tuning","92845e97":"## Fare ","cc1cb4a7":"## Deleting Unnecessary Variables"}}