{"cell_type":{"ff1dd74c":"code","13dcb159":"code","c958c507":"code","41bdad62":"code","68012b0d":"code","72a85f93":"code","f30fa64c":"code","0aeb6dbc":"markdown","0f5b0254":"markdown","d939a5ad":"markdown","b9dbc7eb":"markdown","f5575861":"markdown","a50633b0":"markdown","d1f0dced":"markdown","2df8fadc":"markdown"},"source":{"ff1dd74c":"myint = 7\nprint(myint)","13dcb159":"mystring = 'hello'\nprint(mystring)\ntype(mystring)\n\n# The difference between the two is that using double quotes makes it easy to include apostrophes.\n# (whereas these would terminate the string if using single quotes) \n\nmystr = \"Don't worry about apostrophes\"\nprint(mystr)","c958c507":"one = 1\ntwo = 2\nthree = one + two\nprint(three)\n\nhello = \"hello\"\nworld = \"world\"\nhelloworld = hello + \" \" + world\nprint(helloworld)\n\n# Assignments can be done on more than one variable \"simultaneously\" on the same line like this.\n\na, b = 3, 4\nprint(a,b)","41bdad62":"mystring = \"hello\"\nmyfloat = 10.0\nmyint = 20\n\n# testing code\nif mystring == \"hello\":\n    print(\"String: %s\" % mystring)\nif isinstance(myfloat, float) and myfloat == 10.0:\n    print(\"Float: %f\" % myfloat)\nif isinstance(myint, int) and myint == 20:\n    print(\"Integer: %d\" % myint)","68012b0d":"mylist = []\nmylist.append(1)\nmylist.append(2)\nmylist.append(3)\nprint(mylist[0]) # prints 1\nprint(mylist[1]) # prints 2\nprint(mylist[2]) # prints 3\n\n# prints out 1,2,3\nfor x in mylist:\n    print(x)","72a85f93":"mylist = [1,2,3]\nprint(mylist[10])","f30fa64c":"numbers = []\nstrings = []\nnames = [\"John\", \"Eric\", \"Jessica\"]\n\n# write your code here\nnumbers.append(1)\nnumbers.append(2)\nnumbers.append(3)\n\nstrings.append(\"hello\")\nstrings.append(\"world\")\n\nsecond_name = names[1]\n\n# this code should write out the filled arrays and the second name in the names list (Eric).\nprint(numbers)\nprint(strings)\nprint(\"The second name on the names list is %s\" % second_name)","0aeb6dbc":"**Lists**\n\nLists are very similar to arrays. They can contain any type of variable, and they can contain as many variables as you wish. Lists can also be iterated over in a very simple manner. Here is an example of how to build a list.","0f5b0254":"Python is completely object oriented, and not \"statically typed\". You do not need to declare variables before using them, or declare their type. Every variable in Python is an object.\n\nThis tutorial will go over a few basic types of variables.\n\nNumbers :\nPython supports two types of numbers - integers(whole numbers) and floating point numbers(decimals). (It also supports complex numbers, which will not be explained in this tutorial).\n","d939a5ad":"# **Exercise 2**\n\nIn this exercise, you will need to add numbers and strings to the correct lists using the \"append\" list method. You must add the numbers 1,2, and 3 to the \"numbers\" list, and the words 'hello' and 'world' to the strings variable.\n\nYou will also have to fill in the variable second_name with the second name in the names list, using the brackets operator []. Note that the index is zero-based, so if you want to access the second item in the list, its index will be 1.","b9dbc7eb":"To define a floating point number, you may use one of the following notations:","f5575861":"To define an integer, use the following syntax:","a50633b0":"Accessing an index which does not exist generates an exception (an error)","d1f0dced":"# **Exercise 1**\n\nThe target of this exercise is to create a string, an integer, and a floating point number. The string should be named mystring and should contain the word \"hello\". The floating point number should be named myfloat and should contain the number 10.0, and the integer should be named myint and should contain the number 20.","2df8fadc":"There are additional variations on defining strings that make it easier to include things such as carriage returns, backslashes and Unicode characters. These are beyond the scope of this tutorial, but are covered in the Python documentation.\n\nSimple operators can be executed on numbers and strings:"}}