{"cell_type":{"c4b39f7d":"code","7dc83998":"code","95f33da2":"code","eb7c0eb3":"code","6042cfd7":"code","77dd72dd":"code","e78393d9":"code","1441dab5":"code","9687df8d":"code","8c72e39b":"code","8f7a99a4":"code","eedd308f":"code","a6ff289b":"code","c6eb3e79":"code","5451c2c2":"code","33e399e4":"code","1818988c":"code","c05bd040":"code","ac26598b":"code","98ce29f9":"code","39c0b4ca":"code","7ea7c3d3":"code","68eb38b8":"code","41416fd7":"code","09d1416d":"code","75285631":"code","32377f8f":"code","ade7e661":"code","4d29963f":"code","1e8a538e":"code","5269e4db":"code","5d24bdff":"code","41b38920":"code","433b2a18":"code","c7a37d71":"code","669827a9":"code","8f4d1cb1":"code","365ea8e6":"code","0d8a6797":"code","eceba04f":"markdown","46afbad6":"markdown","286e5063":"markdown","7c14e504":"markdown","f2a4bb2b":"markdown","b2e69ba6":"markdown","49473b67":"markdown","3e1a1348":"markdown","91b42c48":"markdown","68532296":"markdown","0497d716":"markdown","7f1f2321":"markdown","910051e1":"markdown","6ba8f676":"markdown","4f77ee4b":"markdown","a461ea2e":"markdown","03770113":"markdown","abc95dfc":"markdown","d0a3de18":"markdown","8b88b3ca":"markdown","b11e4167":"markdown","0b2285d6":"markdown","42a944c3":"markdown","ef83c64c":"markdown","89e0fcb1":"markdown","e259ec3a":"markdown","c2b6595e":"markdown","d4ebc37e":"markdown","25862b21":"markdown","ac4008e5":"markdown","33e372ca":"markdown","1a9ae6b2":"markdown","ef6eb539":"markdown","1db7e8e8":"markdown","76e67c9d":"markdown","6a3eeacd":"markdown","1099a93a":"markdown","5ba4c1c0":"markdown","04f8dc46":"markdown","359cf808":"markdown","6c5fbf60":"markdown","1468062f":"markdown","d945c8c7":"markdown","f10c7676":"markdown","2dae5c56":"markdown","46c38385":"markdown","8670cfb9":"markdown","69c88b72":"markdown","3062e9fc":"markdown","e99c9de0":"markdown","aa24fefb":"markdown","cf50e5b1":"markdown","45c9e636":"markdown","4dee758d":"markdown","1974585f":"markdown","03819e56":"markdown","ba3052b9":"markdown"},"source":{"c4b39f7d":"import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import NullFormatter\nimport pandas as pd\nimport numpy as np\nimport matplotlib.ticker as ticker\nfrom sklearn import preprocessing\n%matplotlib inline","7dc83998":"!wget -O loan_train.csv https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork\/labs\/FinalModule_Coursera\/data\/loan_train.csv","95f33da2":"df = pd.read_csv('loan_train.csv')\ndf.head()","eb7c0eb3":"df.shape","6042cfd7":"df['due_date'] = pd.to_datetime(df['due_date'])\ndf['effective_date'] = pd.to_datetime(df['effective_date'])\ndf.head()","77dd72dd":"df['loan_status'].value_counts()","e78393d9":"# notice: installing seaborn might takes a few minutes\n!conda install -c anaconda seaborn -y","1441dab5":"import seaborn as sns\n\nbins = np.linspace(df.Principal.min(), df.Principal.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'Principal', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","9687df8d":"bins = np.linspace(df.age.min(), df.age.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=1)\ng.map(plt.hist, 'age', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","8c72e39b":"df['dayofweek'] = df['effective_date'].dt.dayofweek\nbins = np.linspace(df.dayofweek.min(), df.dayofweek.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'dayofweek', bins=bins, ec=\"k\")\ng.axes[-1].legend()\nplt.show()\n","8f7a99a4":"df['weekend'] = df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\ndf.head()","eedd308f":"df.groupby(['Gender'])['loan_status'].value_counts(normalize=True)","a6ff289b":"df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\ndf.head()","c6eb3e79":"df.groupby(['education'])['loan_status'].value_counts(normalize=True)","5451c2c2":"df[['Principal','terms','age','Gender','education']].head()","33e399e4":"Feature = df[['Principal','terms','age','Gender','weekend']]\nFeature = pd.concat([Feature,pd.get_dummies(df['education'])], axis=1)\nFeature.drop(['Master or Above'], axis = 1,inplace=True)\nFeature.head()\n","1818988c":"X = Feature\nX[0:5]","c05bd040":"y = df['loan_status'].values\ny[0:5]","ac26598b":"X= preprocessing.StandardScaler().fit(X).transform(X)\nX[0:5]\nprint(X.shape)","98ce29f9":"from sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nimport matplotlib.pyplot as plt\nfrom sklearn import metrics","39c0b4ca":"train_X , test_X , train_y , test_y = train_test_split(X,y,test_size=0.2, random_state = 1)","7ea7c3d3":"error_rate_test = []\nKK = 12\n\nfor i in range(1,KK):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(train_X, train_y)\n    pred_i = knn.predict(test_X)\n    error_rate_test.append(np.mean(pred_i != test_y))\n\n\n\nerror_rate_train = []\nfor y in range(1,KK):\n    \n    knn = KNeighborsClassifier(n_neighbors=y)\n    knn.fit(train_X, train_y)\n    pred_i = knn.predict(train_X)\n    #print(pred_i != train_y)\n    error_rate_train.append(np.mean(pred_i != train_y))\n\n\n\nplt.figure(figsize=(10,6))\nplt.plot(range(1,KK),error_rate_test, linestyle='-', marker='o',label=\"test\",\n         markerfacecolor='red', markersize=5)\nplt.plot(range(1,KK),error_rate_train, linestyle='-', marker='o',label=\"train\",\n         markerfacecolor='blue', markersize=5)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')\nplt.legend()\n\n#model select k=7\nKNN_model = KNeighborsClassifier(n_neighbors = 7)\nKNN_model.fit(train_X, train_y)\n\n#performance\n\naccuracy1 = metrics.accuracy_score(train_y, KNN_model.predict(train_X))\nprint('Training acc: %.3f' % accuracy1)\n\naccuracy2 = metrics.accuracy_score(test_y, KNN_model.predict(test_X))\nprint('Testing acc: %.3f' % accuracy2)","68eb38b8":"from sklearn.tree import DecisionTreeClassifier","41416fd7":"DTC = DecisionTreeClassifier()\nDTC_model = DTC.fit(train_X, train_y)","09d1416d":"#performance\n\naccuracy1 = metrics.accuracy_score(train_y, DTC_model.predict(train_X))\nprint('Training acc: %.2f' % accuracy1)\n\naccuracy2 = metrics.accuracy_score(test_y, DTC_model.predict(test_X))\nprint('Testing acc: %.2f' % accuracy2)","75285631":"import sklearn.svm as svm","32377f8f":"SVM_model = svm.SVC()\nSVM_model.fit(train_X, train_y)\n","ade7e661":"#performance\n\naccuracy1 = metrics.accuracy_score(train_y, SVM_model.predict(train_X))\nprint('Training acc: %.2f' % accuracy1)\n\naccuracy2 = metrics.accuracy_score(test_y, SVM_model.predict(test_X))\nprint('Testing acc: %.2f' % accuracy2)","4d29963f":"from sklearn.linear_model import LogisticRegression","1e8a538e":"logreg_model = LogisticRegression()\nlogreg_model.fit(train_X, train_y)","5269e4db":"yhat = logreg_model.predict(test_X)\nyhat","5d24bdff":"#performance\n\naccuracy1 = metrics.accuracy_score(train_y, logreg_model.predict(train_X))\nprint('Training acc: %.2f' % accuracy1)\n\naccuracy2 = metrics.accuracy_score(test_y, logreg_model.predict(test_X))\nprint('Testing acc: %.2f' % accuracy2)","41b38920":"from sklearn.metrics import jaccard_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import log_loss\n","433b2a18":"!wget -O loan_test.csv https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/ML0101ENv3\/labs\/loan_test.csv","c7a37d71":"test_df = pd.read_csv('loan_test.csv')\ntest_df.head()","669827a9":"test_df['effective_date'] = pd.to_datetime(test_df['effective_date'])\ntest_df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\ntest_df['dayofweek'] = test_df['effective_date'].dt.dayofweek\ntest_df['weekend'] = test_df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\nte_Feature = test_df[['Principal','terms','age','Gender','weekend']]\nte_Feature = pd.concat([te_Feature,pd.get_dummies(test_df['education'])], axis=1)\nte_Feature.drop(['Master or Above'], axis = 1,inplace=True)\nte_Feature = preprocessing.StandardScaler().fit(te_Feature).transform(te_Feature)","8f4d1cb1":"#KNN\nKNN_acc = np.mean(KNN_model.predict(te_Feature) == test_df['loan_status'])\nprint('KNN acc: %.2f' %KNN_acc)\n#DT\nDT_acc = np.mean(DTC_model.predict(te_Feature) == test_df['loan_status'])\nprint('DT acc: %.2f' %DT_acc)\n#SVM\nSVM_acc = np.mean(SVM_model.predict(te_Feature) == test_df['loan_status'])\nprint('SVM acc: %.2f' %SVM_acc)\n#Logreg\nlogreg_acc = np.mean(logreg_model.predict(te_Feature) == test_df['loan_status'])\nprint('logreg acc: %.2f' %DT_acc)","365ea8e6":"#KNN\nf1_KNN = f1_score(np.array(test_df['loan_status']), np.array(KNN_model.predict(te_Feature)), pos_label = 'PAIDOFF')\njaccard_KNN = jaccard_score(np.array(test_df['loan_status']), np.array(KNN_model.predict(te_Feature)), pos_label = 'PAIDOFF')\n\n#DT\nf1_DT = f1_score(np.array(test_df['loan_status']), np.array(DTC_model.predict(te_Feature)), pos_label = 'PAIDOFF')\njaccard_DT = jaccard_score(np.array(test_df['loan_status']), np.array(DTC_model.predict(te_Feature)), pos_label = 'PAIDOFF')\n\n#SVM\nf1_SVM = f1_score(np.array(test_df['loan_status']), np.array(SVM_model.predict(te_Feature)), pos_label = 'PAIDOFF')\njaccard_SVM = jaccard_score(np.array(test_df['loan_status']), np.array(SVM_model.predict(te_Feature)), pos_label = 'PAIDOFF')\n\n\n#Logreg\nf1_logreg = f1_score(np.array(test_df['loan_status']), np.array(logreg_model.predict(te_Feature)), pos_label = 'PAIDOFF')\njaccard_logreg = jaccard_score(np.array(test_df['loan_status']), np.array(logreg_model.predict(te_Feature)), pos_label = 'PAIDOFF')\n\n\nprint(f'f1_KNN: {round(f1_KNN,3)}, jaccard_KNN: {round(jaccard_KNN,3)}')\nprint(f'f1_DT: {round(f1_DT,3)}, jaccard_DT: {round(jaccard_DT,3)}')\nprint(f'f1_SVM: {round(f1_SVM,3)}, jaccard_SVM: {round(jaccard_SVM,3)}')\nprint(f'f1_Logreg: {round(f1_logreg,3)}, jaccard_Logreg: {round(jaccard_logreg,3)}')","0d8a6797":"#LogLoss for logistic regression\n\nlogloss_logreg = log_loss(test_df['loan_status'],  logreg_model.predict_proba(te_Feature))\n\n\nprint(f'log loss: {round(logloss_logreg,3)}')","eceba04f":"# K Nearest Neighbor(KNN)\n\nNotice: You should find the best k to build the model with the best accuracy.\\\n**warning:** You should not use the **loan_test.csv** for finding the best k, however, you can split your train_loan.csv into train and test to find the best **k**.\n","46afbad6":"### Import required module","286e5063":"# Support Vector Machine\n","7c14e504":"### Show the accuarcy of the algorithms","f2a4bb2b":"### Search K for KNN algorithm","b2e69ba6":"### Import required module","49473b67":"## Below are the performance among the new testing data","3e1a1348":"### Import required module","91b42c48":"### Load Data From CSV File\n","68532296":"### Show the accuracy of SVM ","0497d716":"Let\u2019s see how many of each class is in our data set\n","7f1f2321":"The conclusion would lead to k=5 as the best number of clusters for this algorithm","910051e1":"### Show log loss of logistic regreesion","6ba8f676":"# Model Evaluation using Test set\n","4f77ee4b":"### Let's look at the day of the week people get the loan\n","a461ea2e":"Let's define feature sets, X:\n","03770113":"What are our lables?\n","abc95dfc":"### Fitting SVM using training set","d0a3de18":"### Fitting DT using training set","8b88b3ca":"### Show the accuracy of DT","b11e4167":"86 % of female pay there loans while only 73 % of males pay there loan\n","0b2285d6":"Data Standardization give data zero mean and unit variance (technically should be done after train test split)\n","42a944c3":"# Decision Tree\n","ef83c64c":"<center>\n    <img src=\"https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork\/labs\/FinalModule_Coursera\/images\/IDSNlogo.png\" width=\"300\" alt=\"cognitiveclass.ai logo\"  \/>\n<\/center>\n\n<h1 align=\"center\"><font size=\"5\">Classification with Python<\/font><\/h1>\n","89e0fcb1":"<h2>Want to learn more?<\/h2>\n\nIBM SPSS Modeler is a comprehensive analytics platform that has many machine learning algorithms. It has been designed to bring predictive intelligence to decisions made by individuals, by groups, by systems \u2013 by your enterprise as a whole. A free trial is available through this course, available here: <a href=\"http:\/\/cocl.us\/ML0101EN-SPSSModeler?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork20718538-2021-01-01\">SPSS Modeler<\/a>\n\nAlso, you can use Watson Studio to run these notebooks faster with bigger datasets. Watson Studio is IBM's leading cloud solution for data scientists, built by data scientists. With Jupyter notebooks, RStudio, Apache Spark and popular libraries pre-packaged in the cloud, Watson Studio enables data scientists to collaborate on their projects without having to install anything. Join the fast-growing community of Watson Studio users today with a free account at <a href=\"https:\/\/cocl.us\/ML0101EN_DSX?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork20718538-2021-01-01\">Watson Studio<\/a>\n\n<h3>Thanks for completing this lesson!<\/h3>\n\n<h4>Author:  <a href=\"https:\/\/ca.linkedin.com\/in\/saeedaghabozorgi?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork20718538-2021-01-01?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork20718538-2021-01-01\">Saeed Aghabozorgi<\/a><\/h4>\n<p><a href=\"https:\/\/ca.linkedin.com\/in\/saeedaghabozorgi\">Saeed Aghabozorgi<\/a>, PhD is a Data Scientist in IBM with a track record of developing enterprise level applications that substantially increases clients\u2019 ability to turn data into actionable knowledge. He is a researcher in data mining field and expert in developing advanced analytic methods like machine learning and statistical modelling on large datasets.<\/p>\n\n<hr>\n\n## Change Log\n\n| Date (YYYY-MM-DD) | Version | Changed By    | Change Description                                                             |\n| ----------------- | ------- | ------------- | ------------------------------------------------------------------------------ |\n| 2020-10-27        | 2.1     | Lakshmi Holla | Made changes in import statement due to updates in version of  sklearn library |\n| 2020-08-27        | 2.0     | Malika Singla | Added lab to GitLab                                                            |\n\n<hr>\n\n## <h3 align=\"center\"> \u00a9 IBM Corporation 2020. All rights reserved. <h3\/>\n\n<p>\n","e259ec3a":"### Show jaccard score and F1 score of the algorithms","c2b6595e":"## Normalize Data\n","d4ebc37e":"### Convert to date time object\n","25862b21":"# Logistic Regression\n","ac4008e5":"## One Hot Encoding\n\n#### How about education?\n","33e372ca":"Now, it is your turn, use the training set to build an accurate model. Then use the test set to report the accuracy of the model\nYou should use the following algorithm:\n\n*   K Nearest Neighbor(KNN)\n*   Decision Tree\n*   Support Vector Machine\n*   Logistic Regression\n\n\\__ Notice:\\__\n\n*   You can go above and change the pre-processing, feature selection, feature-extraction, and so on, to make a better model.\n*   You should use either scikit-learn, Scipy or Numpy libraries for developing the classification algorithms.\n*   You should include the code of the algorithm in the following cells.\n","1a9ae6b2":"In this notebook we try to practice all the classification algorithms that we have learned in this course.\n\nWe load a dataset using Pandas library, and apply the following algorithms, and find the best one for this specific dataset by accuracy evaluation methods.\n\nLet's first load required libraries:\n","ef6eb539":"### Split data to training and testing for the below model\n#### Notice that this variable will not only used for KNN","1db7e8e8":"#### Features before One Hot Encoding\n","76e67c9d":"Let's convert male to 0 and female to 1:\n","6a3eeacd":"# Report\n\nYou should be able to report the accuracy of the built model using different evaluation metrics:\n","1099a93a":"This dataset is about past loans. The **Loan_train.csv** data set includes details of 346 customers whose loan are already paid off or defaulted. It includes following fields:\n\n| Field          | Description                                                                           |\n| -------------- | ------------------------------------------------------------------------------------- |\n| Loan_status    | Whether a loan is paid off on in collection                                           |\n| Principal      | Basic principal loan amount at the                                                    |\n| Terms          | Origination terms which can be weekly (7 days), biweekly, and monthly payoff schedule |\n| Effective_date | When the loan got originated and took effects                                         |\n| Due_date       | Since it\u2019s one-time payoff schedule, each loan has one single due date                |\n| Age            | Age of applicant                                                                      |\n| Education      | Education of applicant                                                                |\n| Gender         | The gender of applicant                                                               |\n","5ba4c1c0":"### Show the accuacy of logreg","04f8dc46":"Let's plot some columns to underestand data better:\n","359cf808":"### Feature Selection\n","6c5fbf60":"First, download and load the test set:\n","1468062f":"### Load Test set for evaluation\n","d945c8c7":"### Hot encoding the data","f10c7676":"# Pre-processing:  Feature selection\/extraction\n","2dae5c56":"| Algorithm          | Jaccard | F1-score | LogLoss |\n| ------------------ | ------- | -------- | ------- |\n| KNN                | 0.673       | 0.851        | NA      |\n| Decision Tree      | 0.674      | 0.805       | NA      |\n| SVM                | 0.722      | 0.839        | NA      |\n| LogisticRegression | 0.755      | 0.86        | 0.487       |\n","46c38385":"### Import the required module","8670cfb9":"Let's look at gender:\n","69c88b72":"We see that people who get the loan at the end of the week don't pay it off, so let's use Feature binarization to set a threshold value less than day 4\n","3062e9fc":"Let's download the dataset\n","e99c9de0":"### Fitting logistic regression using training set","aa24fefb":"# Classification\n","cf50e5b1":"260 people have paid off the loan on time while 86 have gone into collection\n","45c9e636":"### About dataset\n","4dee758d":"# Data visualization and pre-processing\n","1974585f":"## Convert Categorical features to numerical values\n","03819e56":"#### Use one hot encoding technique to conver categorical varables to binary variables and append them to the feature Data Frame\n","ba3052b9":"### Import required module"}}