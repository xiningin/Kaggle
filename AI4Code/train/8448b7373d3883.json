{"cell_type":{"3d20b91f":"code","c33f00c9":"code","d6363e7a":"code","066b8805":"code","7b35e5c3":"code","485b3761":"code","8fd4a406":"code","f278ac75":"code","642a6ad8":"code","f14dc4b6":"code","0507e948":"code","46efd263":"code","5a81327b":"code","45dd0183":"code","eb29becc":"code","69c16538":"code","74e9679f":"code","abdcd246":"code","d025d806":"code","3505b1a9":"code","8fdbfc1a":"code","4d220f9e":"code","ac5a3bb5":"code","41548524":"code","9ee4b811":"code","07b68890":"markdown","f975dbc9":"markdown","96934d58":"markdown","d11b0a91":"markdown","e139f4aa":"markdown","25b4bab6":"markdown","820d8f01":"markdown","ea8514d3":"markdown","4114b4cb":"markdown","834ad0ef":"markdown","a92d108e":"markdown","597c820a":"markdown","33c2b429":"markdown","270ad365":"markdown","7e5bd2d9":"markdown","54ba6802":"markdown","821808a7":"markdown","c85b53c9":"markdown","a1b89fdc":"markdown","1ba27d4f":"markdown","30617ce0":"markdown","a3e37fb2":"markdown","51667242":"markdown","22dbe19f":"markdown","e29069ee":"markdown","0d256128":"markdown","41e6444d":"markdown","43895c2d":"markdown","4f2d6fa4":"markdown"},"source":{"3d20b91f":"# Uncomment and run the appropriate command for your operating system, if required\n\n# Linux \/ Binder\n# !pip install numpy torch==1.7.0+cpu torchvision==0.8.1+cpu torchaudio==0.7.0 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html\n\n# Windows\n# !pip install numpy torch==1.7.0+cpu torchvision==0.8.1+cpu torchaudio==0.7.0 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html\n\n# MacOS\n# !pip install numpy torch torchvision torchaudio","c33f00c9":"# Import torch and other required modules\nimport torch","d6363e7a":"# Example 1 - working\nt1 = torch.ones(size=(2,2))\nt1","066b8805":"# Example 2 - working\ntorch.ones(size=(2,2,5), out=t1)\nt1","7b35e5c3":"# Example 3 - breaking\nt3 = torch.ones(size=(2,-1))\nt3","485b3761":"!pip install jovian --upgrade --quiet","8fd4a406":"import jovian","f278ac75":"jovian.commit(project='01-tensor-operations')","642a6ad8":"# Example 1 - working\nt4 = torch.randint(10,20,(5,))\nt4","f14dc4b6":"# Example 2 - working\nt5 = torch.randint(22,45,(5,5,5))\nt5","0507e948":"# Example 3 - breaking\nt6 = torch.randint(100,1,(2,5))\nt6","46efd263":"jovian.commit(project='01-tensor-operations')","5a81327b":"# Example 1 - working\nlin = torch.linspace(start=10, end=23, steps=13)\nlin","45dd0183":"# Example 2 - working\nlin2 = torch.linspace(start=15.952, end=99.434, steps=10)\nlin2","eb29becc":"# Example 3 - breaking\nlin3 = torch.linspace(start=20, end=30, steps=-1)\nlin3","69c16538":"jovian.commit(project='01-tensor-operations')","74e9679f":"# Example 1 - working\nspl = torch.ones((15, 2))\ntorch.split(spl, 3)","abdcd246":"# Example 2 - working\nspl2 = torch.ones((5, 3))\ntorch.split(spl2, [1,2], dim=1)","d025d806":"# Example 3 - breaking\nspl3 = torch.zeros((2, 3))\ntorch.split(spl3, [3,5])","3505b1a9":"jovian.commit(project='01-tensor-operations')","8fdbfc1a":"# Example 1 - working\na = torch.tensor([[1,2,3]])\nb = torch.tensor([[4,5,6]])\n\ntorch.cat((a,b))","4d220f9e":"# Example 2 - working\nc = torch.tensor([[1,2,3]])\nd = torch.tensor([[4,5,6]])\ne = torch.tensor([[11,12,13]])\n\ntorch.cat((c,d,e), dim=1)","ac5a3bb5":"# Example 3 - breaking\ne = torch.tensor(42)\nf = torch.tensor(43)\n\ntorch.cat((e,f))","41548524":"jovian.commit(project='01-tensor-operations')","9ee4b811":"jovian.commit(project='01-tensor-operations')","07b68890":"It is clear from the above example that the tensors that we need to concatenate must at least have 1 dimensions. Zero dimensional tensors (scalars) cannot be concatenated together.","f975dbc9":"From the above example, we can see that it is possible to create a new tensor which has a ```from``` value that is less than the ```to``` value.","96934d58":"## Function 5 - torch.cat()\n\nConcatenates the given sequence of seq tensors in the given dimension. The default dimension is 0 (row wise).\nAll tensors must either have the same shape (except in the concatenating dimension) or be empty.","d11b0a91":"This particular example breaks because, the shape of any tensor can only be a positive integer and not a negative number.","e139f4aa":"## Function 2 - torch.randint()\n\nReturns a tensor filled with random integers generated uniformly between ```low``` (inclusive) and ```high``` (exclusive).\n\nThe shape of the tensor is defined by the variable argument ```size```.","25b4bab6":"This function is very helpful to easily combine any two tensors of matching shapes together on any possible dimensions.","820d8f01":"## Function 1 - torch.ones()\n\nReturns a tensor filled with the scalar value 1, with the shape defined by the variable argument ```size```.","ea8514d3":"## Function 3 - torch.linspace()\n\nCreates a one-dimensional tensor of size ```steps``` whose values are evenly spaced from ```start``` to ```end```, inclusive. ","4114b4cb":"From the above example, it can be seen that the ```split_size_or_sections``` must be a list of valid dimensions i.e. the specified number of splits in each split must be equal to the number of rows\/columns (based on the ```dim``` specified).","834ad0ef":"## Function 4 - toch.split()\n\nSplits the tensor into chunks. Each chunk is a view of the original tensor.\n","a92d108e":"It can be seen from the above example that even floating point numbers can be used as the start and the stop values. Here, we create a tensor having 10 values starting from 15.952 to 99.434.","597c820a":"As we can see, the ```steps``` i.e. the number of values in the new tensor must be a non-negative integer value.","33c2b429":"In this function, we pass a tuple (```size```) indicating the shape and it will return a tensor filled with ones and of the specified shape. Here we pass ```(2, 2)``` as the size, denoting that we need a tensor of the shape **2 * 2**.","270ad365":"In this example, the first argument is the tensor that we need to split. the second argument (```split_size_or_sections```) is now a list. The third argument ```dim``` is used to specify the dimension in which to split the tensor. We pass 1 stating that we need to split along the columns of the tensor (default is along the rows - 0). As the ```split_size_or_sections```is a list instead of a integer,it indicates that the first split must have only 1 column\/row (based on the ```dim``` specified) and the second split has to have 2 columns\/rows (based on the ```dim``` specified).","7e5bd2d9":"Here, we explicitly mention the dimension along which the two tensors has to be concatenated. As we specify 1 (column wise), the two tensors will be concatenated column wise. It can be seen that it is bossible to concatenate more than two tensors together.","54ba6802":"This function is very handy when we need to create a large equally spaced array.","821808a7":"This function, along with ```torch.zeros()``` is very useful when we need to initialize a very large tensor of a given shape with some default values.","c85b53c9":"Let's save our work using Jovian before continuing.","a1b89fdc":"# Five interesting PyTorch functions\n\nAn short introduction about PyTorch and about the chosen functions. \n\n- ```torch.ones()``` - To create a new tensor of a given shape, that is filled with ones.\n- ```torch.randint()``` - To generate a new tensor of a given shape, filled with random integer values in the given range.\n- ```torch.linspace()``` - To generate a new tensor having a specified number of elements that are equally spaced and in the given range.\n- ```torch.split()``` - To split a given tensor into two or more chunks.\n- ```torch.cat()``` - To concatenate two or more tensors.\n\nBefore we begin, let's install and import PyTorch","1ba27d4f":"## Reference Links\n* Official documentation for tensor operations: https:\/\/pytorch.org\/docs\/stable\/torch.html\n* ```torch.ones()``` - https:\/\/pytorch.org\/docs\/stable\/generated\/torch.ones.html\n* ```torch.randint()``` - https:\/\/pytorch.org\/docs\/stable\/generated\/torch.randint.html#torch.randint\n* ```torch.linspace()``` - https:\/\/pytorch.org\/docs\/stable\/generated\/torch.linspace.html\n* ```torch.split()``` - https:\/\/pytorch.org\/docs\/stable\/generated\/torch.split.html\n* ```torch.cat()``` - https:\/\/pytorch.org\/docs\/stable\/generated\/torch.cat.html#torch.cat","30617ce0":"This function is very useful to generate a set of random numbers of a given shape.","a3e37fb2":"Here, we generate a tensor of shape ```5 * 5 * 5``` filled with random integers in the range of 22 (inclusive) to 45 (exclusive).","51667242":"In the above example, we create a tensor which has 13 values in it starting from 10 and ending at 23.","22dbe19f":"Here, the first argument is the tensor that we need to split, the second argument (```split_size_or_sections```) is the number of splits we need. As it is an integer value, the tensor will be split into equally sized chunks (if possible). Last chunk will be smaller if the tensor size along the rows is not divisible by ```specified split_size_or_sections```.","e29069ee":"Initially we create 2 tensors. Then we call ```torch.cat()``` and pass in the two tensors to be concatenated as a tuple. The two tensors will be concatenated row wise by default unless specified.","0d256128":"## Conclusion\n\nThus, in this notebook we have seen 5 different PyTorch functions that I thought were essential to know.","41e6444d":"Here, we pass a tuple ```(2, 2, 5)``` denoting that we need a 3 dimensional tensor of the shape **2 * 2 * 5**. We also pass a second optional argument ```out``` and pass it a tensor. This denotes that the output of the function will be saved in this specified tensor.","43895c2d":"Here, the first and the second arguments are the start and the stop values. The third argument is the shape of the output tensor. We generate a tensor of size 5 filled with random integers in the range of 10 (inclusive) to 20 (exclusive).","4f2d6fa4":"This function is useful to split a tensor into equal sections or of different section which has different number of values."}}