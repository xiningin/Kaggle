{"cell_type":{"0afd083f":"code","2e02c526":"code","30441ec4":"code","2cf50961":"code","0ce7fc01":"code","e1fbdccd":"code","0291cb31":"code","6371447c":"code","58825b77":"code","67e57bd7":"code","c954d694":"code","1d5e94d9":"code","a52ba15c":"code","1b94e2f4":"code","5968d864":"code","65767696":"code","2b586a5f":"code","34a222e7":"code","25786af2":"code","bd52b02e":"code","334b5697":"code","391d74d7":"code","1b65c599":"code","80546e3e":"code","04a11b75":"code","c5452295":"code","e78fc9a1":"code","534af3f8":"code","1451010e":"code","e52d5b15":"code","d9fc26ca":"code","6ee9eabd":"code","c304d49f":"code","2f238103":"code","61e0e3c5":"code","7143dc84":"code","0d9ef017":"code","e0d9f812":"code","69c152f9":"code","66be7af0":"code","b7150f31":"markdown","7785c2d2":"markdown","02b28ff0":"markdown","7064b8a3":"markdown","5930b836":"markdown","efdcb5ac":"markdown","f9d9abb1":"markdown","d5719064":"markdown","3548edc3":"markdown"},"source":{"0afd083f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2e02c526":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","30441ec4":"an1 = pd.read_csv('\/kaggle\/input\/zoo-animals-extended-dataset\/zoo2.csv')\nan2 = pd.read_csv('\/kaggle\/input\/zoo-animals-extended-dataset\/zoo3.csv')","2cf50961":"an1.head()","0ce7fc01":"an2.head()","e1fbdccd":"df = an2.append(an1)","0291cb31":"print('The shape of the dataset: ',df.shape)","6371447c":"df.head()","58825b77":"df.info()","67e57bd7":"df.dtypes","c954d694":"df.isnull().sum()","1d5e94d9":"df.describe()","a52ba15c":"df.describe(include='all')","1b94e2f4":"assert pd.notnull(df).all().all()","5968d864":"df['class_type'].isnull().sum()","65767696":"df['class_type'].nunique() # Multiclass ","2b586a5f":"df['class_type'].unique()","34a222e7":"df['class_type'].value_counts()","25786af2":"df['class_type'].value_counts()\/len(df)","bd52b02e":"sns.countplot(y='class_type', data=df, palette='Set1')\nplt.title('Frequency Distribution of class variable')\nplt.show()","334b5697":"# Visualize class wrt eggs\nsns.countplot(x='class_type', hue='eggs', data=df, palette='Set1')\nplt.title('Frequency Distribution of class variable with respect to eggs')\nplt.show()","391d74d7":"# Visualize class wrt hairs\nsns.countplot(x='class_type', hue='hair', data=df, palette='Set1')\nplt.title('Frequency Distribution of class variable with respect to hairs')\nplt.show()","1b65c599":"# Visualize class wrt milk\nsns.countplot(x='class_type', hue='milk', data=df, palette='Set1')\nplt.title('Frequency Distribution of class variable with respect to milk')\nplt.show()","80546e3e":"# Visualize class wrt backbone\nsns.countplot(x='class_type', hue='backbone', data=df, palette='Set1')\nplt.title('Frequency Distribution of class variable with respect to backbone')\nplt.show()","04a11b75":"# Visualize class wrt toothed\nsns.countplot(x='class_type', hue='toothed', data=df, palette='Set1')\nplt.title('Frequency Distribution of class variable with respect to toothed')\nplt.show()","c5452295":"# Visualize class wrt venomous\nsns.countplot(x='class_type', hue='venomous', data=df, palette='Set1')\nplt.title('Frequency Distribution of class variable with respect to venomous')\nplt.show()","e78fc9a1":"# Visualize class wrt legs\nsns.countplot(x='class_type', hue='legs', data=df, palette='Set1')\nplt.title('Frequency Distribution of class variable with respect to legs')\nplt.show()","534af3f8":"df.corr().style.format('{:.4}').background_gradient(cmap=plt.get_cmap('coolwarm'),axis=1)","1451010e":"X = df.drop(['class_type'], axis=1)\ny = df['class_type']","e52d5b15":"from sklearn.preprocessing import OneHotEncoder\nohe = OneHotEncoder()\nX = ohe.fit_transform(X)","d9fc26ca":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","6ee9eabd":"print('X-train shape: ', X_train.shape)\nprint('X-test shape: ', X_test.shape)","c304d49f":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(random_state=0)","2f238103":"rfc.fit(X_train, y_train)","61e0e3c5":"y_pred = rfc.predict(X_test)","7143dc84":"from sklearn.metrics import accuracy_score\nprint('Model Accuracy with 10 decision trees: ', accuracy_score(y_test, y_pred))","0d9ef017":"rfc_100 = RandomForestClassifier(n_estimators=100, random_state=0)\nrfc_100.fit(X_train, y_train)\ny_pred = rfc_100.predict(X_test)","e0d9f812":"print('Model Accuracy with 100 decision trees: ', accuracy_score(y_test, y_pred))","69c152f9":"from sklearn.metrics import confusion_matrix, classification_report\ncm = confusion_matrix(y_test, y_pred)\nprint('CONFUSION MATRIX\\n\\n', cm)","66be7af0":"print('CLASSIFICATION REPORT\\n\\n', classification_report(y_test, y_pred))","b7150f31":"## Random Forest Classifier model with default parameters","7785c2d2":"# Feature Engineering\n+ We have to convert only one variable column(animal_name).\n+ Because it is a character variable.\n+ Here, we are using one hot encoding to convert character objects to numerical values.","02b28ff0":"## Confusion Matrix","7064b8a3":"## Random Forest Classifier model with 100 decision trees","5930b836":"## Visualize Dataset","efdcb5ac":"## Clasification Report","f9d9abb1":"### IT GIVES THE SAME ACCURACY WITH 10 DECISION TREES AND 100 DECISION TREES.","d5719064":"### Findings\n+ We can see that the dataset contains all numerical variables except one variable.\n+ 'animal_name' column is only character variable.\n+ There are no missing values in dataset. ","3548edc3":"+ Above command does not throw any error if it is confirmed that there are no missing or negative values in the dataset.\n+ All values are greater than or equal to zero excluding character values."}}