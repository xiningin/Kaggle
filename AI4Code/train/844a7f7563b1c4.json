{"cell_type":{"f4b22795":"code","48327a1f":"code","e3feefca":"code","dcb0f5b1":"code","e5d81c93":"code","ac4902f4":"code","bfb054a7":"code","d698ab4c":"code","e4614601":"code","37b17f11":"code","4d513db4":"code","4f5c57aa":"code","7c794886":"code","29e6f554":"code","c468a1ff":"code","ce81a1ae":"code","dc2c5ab0":"code","ad832a36":"code","bbb8fe74":"code","8b9275f0":"code","f2096ac1":"code","4f4524ca":"markdown"},"source":{"f4b22795":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pydicom\nfrom glob import glob\nfrom tqdm.notebook import tqdm\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nimport matplotlib.pyplot as plt\nimport matplotlib\nfrom skimage import exposure\nimport cv2\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport tensorflow as tf\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48327a1f":"data_dir = '..\/input\/vinbigdata-chest-xray-abnormalities-detection'","e3feefca":"image_count = len(list(glob(f'{data_dir}\/train\/*.dicom')))\nprint('Image count is : ' + str(image_count))","dcb0f5b1":"#Time to read the csv file\n%time\ntrain = pd.read_csv(data_dir+'\/train.csv')","e5d81c93":"train.info(memory_usage=\"deep\")","ac4902f4":"def dicom2array(path, voi_lut=True, fix_monochrome=True):\n    dicom = pydicom.read_file(path)\n    \n    # VOI LUT (if available by DICOM device) is used to\n    # transform raw DICOM data to \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n    return data","bfb054a7":"def plot_img(img, size=(7, 7), is_rgb=True, title=\"\", cmap='gray'):\n    plt.figure(figsize=size)\n    plt.imshow(img, cmap=cmap)\n    plt.suptitle(title)\n    plt.show()","d698ab4c":"def plot_imgs(imgs, cols=4, size=7, is_rgb=True, title=\"\", cmap='gray', img_size=(500,500)):\n    rows = len(imgs)\/\/cols + 1\n    fig = plt.figure(figsize=(cols*size, rows*size))\n    for i, img in enumerate(imgs):\n        if img_size is not None:\n            img = cv2.resize(img, img_size)\n        fig.add_subplot(rows, cols, i+1)\n        plt.imshow(img, cmap=cmap)\n    plt.suptitle(title)\n    plt.show()","e4614601":"%%time\ndicom_paths = glob(f'{data_dir}\/train\/*.dicom')\nimgs = [dicom2array(path) for path in dicom_paths[:12]]\n\n#Without Plot\n#12.7 seconds for 12 images\n\n#Time doesn't seem to be increasing exponentially","37b17f11":"%%time\ndicom_paths = glob(f'{data_dir}\/train\/*.dicom')\nimgs = [dicom2array(path) for path in dicom_paths[:12]]\nplot_imgs(imgs)\n\n#With Plot\n#5 seconds for 2 images\n#11 seconds for 5 images\n#18 seconds for 12 images\n\n#Time doesn't seem to be increasing exponentially","4d513db4":"imgs = [exposure.equalize_hist(img) for img in imgs]\nplot_imgs(imgs)","4f5c57aa":"train_data = pd.read_csv(data_dir+'\/train.csv')","7c794886":"fig, ax = plt.subplots(1, 1, figsize=(12, 4))\nx = train_data['class_name'].value_counts().keys()\ny = train_data['class_name'].value_counts().values\nax.bar(x, y)\nax.set_xticklabels(x, rotation=90)\nax.set_title('Distribution of the labels')\nplt.grid()\nplt.show()","29e6f554":"import pydicom as dicom\n\ndef plot_example(idx_list):\n    fig, axs = plt.subplots(1, 3, figsize=(15, 10))\n    fig.subplots_adjust(hspace = .1, wspace=.1)\n    axs = axs.ravel()\n    for i in range(3):\n        image_id = train_data.loc[idx_list[i], 'image_id']\n        data_file = dicom.dcmread(data_dir+'\/train\/'+image_id+'.dicom')\n        img = data_file.pixel_array\n        axs[i].imshow(img, cmap='gray')\n        axs[i].set_title(train_data.loc[idx_list[i], 'class_name'])\n        axs[i].set_xticklabels([])\n        axs[i].set_yticklabels([])\n        if train_data.loc[idx_list[i], 'class_name'] != 'No finding':\n            bbox = [train_data.loc[idx_list[i], 'x_min'],\n                    train_data.loc[idx_list[i], 'y_min'],\n                    train_data.loc[idx_list[i], 'x_max'],\n                    train_data.loc[idx_list[i], 'y_max']]\n            p = matplotlib.patches.Rectangle((bbox[0], bbox[1]),\n                                             bbox[2]-bbox[0],\n                                             bbox[3]-bbox[1],\n                                             ec='r', fc='none', lw=2.)\n            axs[i].add_patch(p)\n            \nfor num in range(15):\n    idx_list = train_data[train_data['class_id']==num][0:3].index.values\n    plot_example(idx_list)","c468a1ff":"print(train_data)","ce81a1ae":"import torch\nfrom torch import nn\nimport glob\nfrom PIL import Image\nfrom tqdm.auto import tqdm\nimport torchvision.transforms as transforms\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut","dc2c5ab0":"print(\"Train Data Size : {}\".format(train_data.shape[0]))\ntrain_data.head()","ad832a36":"class_labels = train_data.iloc[:,[0,2]]\nclass_labels.head()","bbb8fe74":"class_labels.iloc[:,0:2]\nclass_labels = class_labels.drop_duplicates(subset=[\"image_id\"])\nclass_labels.head()\nclass_labels.shape","8b9275f0":"train_on_gpu = False\n\nif torch.cuda.is_available():\n    train_on_gpu = True","f2096ac1":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        \n        # convolutional layer (sees 512x512x3 image tensor)\n        self.conv1 = nn.Conv2d(1, 4, 3, padding=1)\n\n        # convolutional layer (sees 256x256x4 tensor)\n        self.conv2 = nn.Conv2d(4, 8, 3, padding=1)\n        \n        # max pooling layer\n        self.pool = nn.MaxPool2d(2, 2)","4f4524ca":"###### Performing Histogram Equalization on these images"}}