{"cell_type":{"dc3cd86a":"code","b26979a1":"code","f6a59637":"code","da5a5584":"code","5ec78d44":"code","50507aef":"code","c31efe9c":"code","547d0644":"code","b75d2804":"code","5a608dd7":"code","224ed86f":"code","b8a39792":"code","e9e71d43":"code","0172ca5b":"code","f7721e6a":"code","8b798bcb":"code","2678f9f6":"code","fa174f36":"code","4f2cb576":"code","505746b3":"code","0f4cdfcc":"code","ecaedf27":"code","201bf1ed":"code","b5729d8f":"code","e4656131":"code","6b217679":"code","93db6864":"code","547c7156":"code","d8eb725a":"code","b26ed451":"code","f30194e0":"code","19b23194":"code","fab622a9":"code","17b6a72b":"code","4d61a1c1":"code","14bfbecc":"code","aab41437":"code","bf86b3a8":"code","f22d3911":"code","a8056950":"code","6b8ed9ff":"code","a48f1728":"code","2f195b12":"code","41c6057b":"code","77001aac":"code","676a132a":"code","c8f61dea":"code","650f68f0":"code","58eaead6":"code","73683840":"code","9fd642db":"code","d846aa29":"code","b310ffc2":"code","520fec22":"code","7360698d":"code","7578430b":"code","1c13b10e":"code","48205fff":"code","1491e0a7":"code","a59ddfa5":"code","96f0d978":"code","c69d9a0e":"code","7959f71a":"code","8349f45a":"code","471df3a2":"code","847d39dc":"code","f1b534da":"code","468884d7":"code","40563b95":"code","e0dff6ec":"code","5bf52874":"code","be2c4d23":"code","068ecdba":"code","72b98e2c":"code","7d7ba2dc":"code","b886d0c6":"code","e1157fb2":"code","ef8cd761":"code","7d7242d5":"code","d69e931a":"code","f5ff7686":"code","ba3662b4":"code","ce005409":"code","b21b5eef":"code","f4217dfa":"code","d2f84951":"code","e3e35167":"code","bd49907b":"code","d3e2fc5c":"markdown","962411c2":"markdown","4eb28447":"markdown","f0cd9811":"markdown","a6530be1":"markdown","111ea54e":"markdown","60f7797b":"markdown","596b4b10":"markdown","addda882":"markdown","b166311e":"markdown","24ea8e56":"markdown","9bf59a87":"markdown","f9b9816c":"markdown","f4de00ec":"markdown","f5ea48f6":"markdown","6f1b4b9d":"markdown","e8758de9":"markdown","9f3600da":"markdown","9cab19a7":"markdown","a250d85b":"markdown","95cb8290":"markdown","da5ed6f6":"markdown","02844231":"markdown","3133a291":"markdown","99c2ea0d":"markdown","410e22a7":"markdown"},"source":{"dc3cd86a":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b26979a1":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","f6a59637":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","da5a5584":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","5ec78d44":"df_train.info()","50507aef":"df_train.head(5)","c31efe9c":"df_test.info()","547d0644":"df_test.head(5)","b75d2804":"sample_submission.head(5)","5a608dd7":"sample_submission.info()","224ed86f":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","b8a39792":"data.info()","e9e71d43":"data.sample(5)","0172ca5b":"data.info()","f7721e6a":"def isnan_feature(data):\n    # makes new feature with 1 if value in existing feature is NaN else 0\n    for col in data.columns[data.isna().nunique() == 2]:\n        data[col.replace(' ','_')+'_isNaN'] = pd.isna(data[col]).astype('uint8')\n    return data\n\n\ndata = isnan_feature(data)","8b798bcb":"data.info()","2678f9f6":"# \u0414\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 Number of Reviews \u043d\u0443\u043b\u0435\u043c\n\ndef fill_zero(series):\n    # fills NaN with 0\n    series.fillna(0, inplace=True)\n\n\nfill_zero(data['Number of Reviews'])","fa174f36":"data.info()","4f2cb576":"data.nunique(dropna=False)","505746b3":"data.Restaurant_id.nunique()","0f4cdfcc":"data.groupby('Restaurant_id').Restaurant_id.agg('count').sort_values()","ecaedf27":"data[data.Restaurant_id == 'id_871'].City.value_counts()","201bf1ed":"data[(data.Restaurant_id == 'id_871') & (data.City == 'Berlin')]","b5729d8f":"data['Price Range'].value_counts()","e4656131":"def price_range_to_digits(series):\n    # change values from '$','$$ - $$$','$$$$' to digits 1,2,3; fills NaN with mode (2)\n    series = series.apply(lambda x: 1 if x=='$' else (3 if x=='$$$$' else 2))\n    return series\n\n\ndata['Price Range'] = price_range_to_digits(data['Price Range'])","6b217679":"data['Price Range'].isna().value_counts()","93db6864":"data.info()","547c7156":"data.City.unique()","d8eb725a":"len(data.City.unique())","b26ed451":"# \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0438 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0438 \u0438\u0445 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u0445:\nworld_cities = pd.read_csv('\/kaggle\/input\/world-cities\/worldcities.csv',\n                           usecols=['city_ascii',\n                                    'capital',\n                                   'population'])\n\n# \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441 \u0440\u0430\u0431\u043e\u0447\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u0430 \u041f\u043e\u0440\u0442\u043e:\nworld_cities.city_ascii[world_cities.city_ascii == 'Porto'] = 'Oporto'\nworld_cities = world_cities[world_cities.city_ascii.isin(data.City)]\n# \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043a\u0440\u0443\u043f\u043d\u0435\u0439\u0448\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0438\u0437 \u043e\u0434\u043d\u043e\u0438\u043c\u0435\u043d\u043d\u044b\u0445\nworld_cities.sort_values(['city_ascii','population'], inplace=True)\nworld_cities.drop_duplicates('city_ascii', keep='last', inplace=True)\nworld_cities.capital = world_cities.capital.apply(lambda x: 1 if x=='admin' else 0)\nworld_cities","f30194e0":"world_cities.shape","19b23194":"world_cities.columns = ['City',\n                        'capital',\n                        'population']","fab622a9":"data = data.merge(world_cities, on='City')","17b6a72b":"data","4d61a1c1":"data.info()","14bfbecc":"qol = pd.read_csv('\/kaggle\/input\/city-quality-of-life-dataset\/uaScoresDataFrame.csv',\n                  usecols=['UA_Name', \n#                            'UA_Country', \n#                            'UA_Continent', \n                           'Housing', \n                           'Cost of Living', \n#                            'Startups', \n#                            'Venture Capital', \n                           'Travel Connectivity',\n                           'Commute', \n#                            'Business Freedom', \n                           'Safety', \n#                            'Healthcare', \n#                            'Education',\n#                            'Environmental Quality',\n                           'Economy',\n#                            'Taxation',\n#                            'Internet Access',\n                           'Leisure & Culture', \n#                            'Tolerance', \n#                            'Outdoors'\n                          ])\n\nqol.UA_Name[qol.UA_Name == 'Porto'] = 'Oporto'\nqol = qol[qol.UA_Name.isin(data.City)]","aab41437":"qol","bf86b3a8":"qol.info()","f22d3911":"data = data.merge(qol, left_on='City', right_on='UA_Name', how='left')","a8056950":"data.info()","6b8ed9ff":"# \u0434\u043b\u044f One-Hot Encoding \u0432 pandas \u0435\u0441\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f - get_dummies. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0440\u0430\u0434\u0443\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 dummy_na\ndata = data.join(pd.get_dummies(data['City'], dummy_na=True))","a48f1728":"data.info()","2f195b12":"data['Cuisine Style'].value_counts()","41c6057b":"def cuisine_style(data):\n    # \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f dummy \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e \u0432\u0438\u0434\u0430\u043c \u043a\u0443\u0445\u043d\u0438:\n    data['Cuisine Style'] = data['Cuisine Style'].str.strip('[] ')\n    cuisines = data['Cuisine Style'].str.get_dummies(sep=', ')\n    cuisines.columns = cuisines.columns.str.strip(\"'\")\n\n    # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0437\u0430\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u043c \u0432\u0438\u0434\u043e\u0432 \u043a\u0443\u0445\u043d\u0438:\n    cuisines['number_of_cuisine_styles'] = cuisines.agg('sum', axis = 1)\n    data = data.join(cuisines)\n    return data\n\n\ndata = cuisine_style(data)","77001aac":"data.number_of_cuisine_styles.value_counts()","676a132a":"data.Reviews","c8f61dea":"type(data.Reviews[0])","650f68f0":"import ast","58eaead6":"def reviews(data):\n    data.Reviews.fillna('[[], []]', inplace=True)\n    # ast.literal_eval \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 'nan'\n    data.Reviews = data.Reviews.str.replace('nan,', \"'',\")\n    data.Reviews = data.Reviews.str.replace(' nan', \" ''\")\n    \n    # \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n    data.Reviews = data.Reviews.apply(lambda x: ast.literal_eval(x))\n    \n    # \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u0430 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n    data['rev_text'] = data.Reviews.apply(lambda x: x[0])\n    data['rev1_text'] = data.rev_text.apply(lambda x: x[0] if x != [] else None)\n    data['rev2_text'] = data.rev_text.apply(lambda x: x[1] if len(x) == 2 else None)\n\n    # \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n    data['rev_date'] = data.Reviews.apply(lambda x: x[1])\n    data['rev1_date'] = data.rev_date.apply(lambda x: pd.to_datetime(x[0]) if x != [] else None)\n    data['rev2_date'] = data.rev_date.apply(lambda x: pd.to_datetime(x[1]) if len(x) == 2 else None)\n    \n    # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438:\n    data['rev_delta'] = abs((data.rev1_date - data.rev2_date).dt.days)\n    data.rev_delta.fillna(0, inplace=True)\n    \n    # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u0433\u043e\u0434, \u043a\u043e\u0434 \u0434\u043d\u044f \u043d\u0435\u0434\u0435\u043b\u0438, \u0434\u0435\u043d\u044c \u0432 \u0433\u043e\u0434\u0443:\n    data['rev1_y'] = data.rev1_date.apply(lambda x: pd.Timestamp(x).year)\n    data['rev2_y'] = data.rev2_date.apply(lambda x: pd.Timestamp(x).year)\n    data['rev1_w'] = data.rev1_date.apply(lambda x: pd.Timestamp(x).weekday())\n    data['rev2_w'] = data.rev2_date.apply(lambda x: pd.Timestamp(x).weekday())\n    data['rev1_d'] = data.rev1_date.apply(lambda x: pd.Timestamp(x).dayofyear)\n    data['rev2_d'] = data.rev2_date.apply(lambda x: pd.Timestamp(x).dayofyear)\n    \n    # \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c:\n    \n    data.rev1_y.fillna(data.rev1_y.median(), inplace=True)\n    data.rev2_y.fillna(data.rev2_y.median(), inplace=True)\n\n    data.rev1_w.fillna(data.rev1_w.median(), inplace=True)\n    data.rev2_w.fillna(data.rev2_w.median(), inplace=True)\n\n    data.rev1_d.fillna(data.rev1_d.median(), inplace=True)\n    data.rev2_d.fillna(data.rev2_d.median(), inplace=True)\n    \n    # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435:\n    data['number_of_reviews_site'] = data.rev_text.apply(lambda x: len(x))\n    \n    # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0434\u043b\u0438\u043d\u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u0434\u043b\u0438\u043d\u0443 \u0434\u0432\u0443\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432, \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0443\u043b\u044f\u043c\u0438:\n    data['rev1_len'] = data.rev1_text.str.len()\n    data['rev2_len'] = data.rev2_text.str.len()\n\n    data[['rev1_len', 'rev2_len']] = data[['rev1_len', 'rev2_len']].fillna(0)\n\n    data['rev_len_mean'] = (data.rev1_len + data.rev2_len)\/2\n    \n    \n    data.drop(['rev_text', 'rev_date', 'rev1_text', 'rev2_text', 'rev1_date', 'rev2_date'], axis=1, inplace=True)\n    \n    \n    \n    \n    return data","73683840":"data = reviews(data)","9fd642db":"Restaurants_in_City = data.City.value_counts()","d846aa29":"data['Restaurants_in_City'] = data.City.apply(lambda x: Restaurants_in_City[x])","b310ffc2":"def restaurants_in_city(data):\n    Restaurants_in_City = data.City.value_counts()\n    data['Restaurants_in_City'] = data.City.apply(lambda x: Restaurants_in_City[x])\n    return data","520fec22":"data.info()","7360698d":"# \u043d\u0430 \u0432\u0441\u044f\u043a\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u0437\u0430\u043d\u043e\u0432\u043e \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'\/kaggle_task.csv')\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c\ndata.info()","7578430b":"def preproc_data(df_input):\n    '''includes several functions to pre-process the predictor data.'''\n    \n    df_output = df_input.copy()\n    \n    # ################### 1. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 ############################################################## \n    # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n    df_output.drop(['Restaurant_id','ID_TA',], axis = 1, inplace=True)\n    \n    \n    # ################### 2. NAN ############################################################## \n    # \u0414\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n    df_output = isnan_feature(df_output)\n    df_output.drop(['Number_of_Reviews_isNaN'], axis=1, inplace=True)\n\n    fill_zero(df_output['Number of Reviews'])\n    \n    \n    # ################### 3. Encoding & Feature Engineering ############################################################## \n    \n    df_output['Price Range'] = price_range_to_digits(df_output['Price Range'])\n\n    df_output = df_output.join(pd.get_dummies(df_output.City, dummy_na=True))\n    \n    df_output = df_output.merge(world_cities, on='City', how='left')\n    \n    df_output = df_output.merge(qol, left_on='City', right_on='UA_Name', how='left')\n    \n    # \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441\u043d\u0438\u0436\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438\n    df_output.drop(['Cuisine_Style_isNaN'], axis=1, inplace=True)\n    \n    df_output = cuisine_style(df_output)\n     \n    df_output = restaurants_in_city(df_output)\n    \n    df_output = reviews(df_output)\n    \n    \n    # ################### 4. Clean #################################################### \n    # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0449\u0435 \u043d\u0435 \u0443\u0441\u043f\u0435\u043b\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \n    # \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0441 dtypes \"object\" \u043e\u0431\u0443\u0447\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0431\u0443\u0434\u0435\u0442, \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0431\u0435\u0440\u0438\u043c \u0438\u0445 \u0438 \u0443\u0434\u0430\u043b\u0438\u043c\n    object_columns = [s for s in df_output.columns if df_output[s].dtypes == 'object']\n    df_output.drop(object_columns, axis = 1, inplace=True)\n    \n    return df_output","1c13b10e":"df_preproc = preproc_data(data)\ndf_preproc.sample(10)","48205fff":"df_preproc.info()","1491e0a7":"df_preproc.isna().agg('sum').index.to_list()","a59ddfa5":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","96f0d978":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","c69d9a0e":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","7959f71a":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","8349f45a":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","471df3a2":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","847d39dc":"y_pred = (y_pred*2).round()\/2\ny_pred","f1b534da":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","468884d7":"# MAE: 0.21240125","40563b95":"# MAE: 0.21087374999999997\n# isNaN","e0dff6ec":"# MAE: 0.210635\n# price range","5bf52874":"# MAE: 0.209500625\n# \u0432\u0441\u0435 \u043a\u0443\u0445\u043d\u0438 \u0432 \u0434\u0430\u043c\u043c\u0438","be2c4d23":"# MAE: 0.209245\n# \u0443\u0431\u0440\u0430\u043d\u0430 \u043a\u043e\u043b\u043e\u043d\u043a\u0430 Cuisine_Style_isNaN","068ecdba":"# MAE: 0.20915249999999996\n# \u0443\u0431\u0440\u0430\u043d\u0430 \u043a\u043e\u043b\u043e\u043d\u043a\u0430 Number_of_Reviews_isNaN","72b98e2c":"# MAE: 0.207923125\n#  \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d world_cities \u0431\u0435\u0437 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442","7d7ba2dc":"# MAE: 0.20692687499999998\n# \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d qol","b886d0c6":"# MAE: 0.180375\n# \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430","e1157fb2":"# MAE: 0.1794375\n# restaurants_in_city","ef8cd761":"# MAE: 0.1778125\n# reviews","7d7242d5":"# MAE: 0.1736875\n#     reviews2","d69e931a":"# MAE: 0.1723125\n# reviews3","f5ff7686":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","ba3662b4":"test_data.sample(10)","ce005409":"test_data = test_data.drop(['Rating'], axis=1)","b21b5eef":"sample_submission","f4217dfa":"predict_submission = model.predict(test_data)","d2f84951":"predict_submission","e3e35167":"# \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0434\u043e 0.5\npredict_submission = (predict_submission * 2).round() \/ 2\npredict_submission","bd49907b":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","d3e2fc5c":"### Restaurant_id:","962411c2":"# DATA","4eb28447":"### Price Range:","f0cd9811":"# Cleaning and Prepping Data","a6530be1":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a City \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u0440\u0443\u043f\u043d\u044b\u0445 \u0435\u0432\u0440\u043e\u043f\u0435\u0439\u0441\u043a\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u043e\u0432. \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0438\u0437 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432.","111ea54e":"\u041f\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e 'Price Range' \u044d\u0442\u043e - \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435.  \n\u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e (\u0437\u043d\u0430\u0447\u0438\u0442 \u044d\u0442\u043e \u043d\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a). \u0410 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 1,2,3  ","60f7797b":"\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0435\u0449\u0451 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0433\u043e\u0440\u043e\u0434\u0430\u0445:","596b4b10":"## \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","addda882":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u043e\u0431\u043e\u0439 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0441\u043f\u0438\u0441\u043a\u0438 \u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435","b166311e":"**\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \n\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.**","24ea8e56":"![](https:\/\/www.pata.org\/wp-content\/uploads\/2014\/09\/TripAdvisor_Logo-300x119.png)\n# Predict TripAdvisor Rating\n## \u0412 \u044d\u0442\u043e\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432\u00a0TripAdvisor","9bf59a87":"### Cuisine Style:","f9b9816c":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f Restaurant_id \u043d\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b","f4de00ec":"\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0438 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.","f5ea48f6":"# import","6f1b4b9d":"### Reviews:","e8758de9":"# Model \n\u0421\u0430\u043c ML","9f3600da":"#### \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c","9cab19a7":"# Submission\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0443\u0441\u0442\u0440\u0430\u0435\u0432\u0430\u0435\u0442 - \u0433\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 \u043a\u0430\u0433\u043b","a250d85b":"### \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435:","95cb8290":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0441 \u0448\u0430\u0433\u043e\u043c 0,5. \u041e\u043a\u0440\u0443\u0433\u043b\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043e\u0434\u0435\u043b\u0438:","da5ed6f6":"# Data Preprocessing\n\u0422\u0435\u043f\u0435\u0440\u044c, \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u043e\u0434\u0430, \u0437\u0430\u0432\u0435\u0440\u043d\u0435\u043c \u0432\u0441\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0432 \u043e\u0434\u043d\u0443 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e.","02844231":"## \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NAN \n\u0423 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c, \u043b\u0438\u0431\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e. \u041d\u043e \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, **\u0434\u0430\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c!**   \n\u041f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 NAN \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a ","3133a291":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c:\n* City: \u0413\u043e\u0440\u043e\u0434 \n* Cuisine Style: \u041a\u0443\u0445\u043d\u044f\n* Ranking: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n* Price Range: \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0432 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445\n* Number of Reviews: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* Reviews: 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0434\u0430\u0442\u044b \u044d\u0442\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* URL_TA: \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 'www.tripadvisor.com' \n* ID_TA: ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor\n* Rating: \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","99c2ea0d":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f Restaurant_id \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435. \u0422\u0435 \u0436\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0443 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435. \u0414\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u0435\u043d.","410e22a7":"### City:"}}