{"cell_type":{"9e140810":"code","feb8ee16":"code","e51da0f5":"code","2f70aac8":"code","aa6a7650":"code","f4b280bd":"code","70926221":"code","f13e36c1":"code","98b99953":"code","588fa82c":"code","02a53aaa":"code","5791e89d":"code","f5222bb8":"code","f5274f74":"code","110bd0ef":"code","056cc0da":"code","c1d75b3b":"code","ad2c4399":"code","d9ee68c1":"code","8d70d546":"code","8f56a09d":"code","4a16accd":"code","3cbf2e7f":"code","e748ffce":"code","6eb77035":"code","6e59adcd":"code","45c65340":"code","14cfa541":"code","da2ab8f1":"code","2c9e0397":"markdown","7e354a9c":"markdown","20c4d633":"markdown","91ecdf47":"markdown","587be196":"markdown","bde093ef":"markdown","43e352f4":"markdown","6c8bd09c":"markdown","d397fcc8":"markdown","cbb82298":"markdown","4358c1c1":"markdown","8b74442b":"markdown","e0b47088":"markdown","252c1be6":"markdown","9fe20eb5":"markdown","abb1da55":"markdown","9a09cbde":"markdown","0d0a2059":"markdown","5d840c13":"markdown","27f5f0c5":"markdown","5ec21cc1":"markdown","ebe1d10a":"markdown","c2355297":"markdown","7e9eeed1":"markdown","8bbda7bf":"markdown","5efe4af0":"markdown","0c72b6f8":"markdown","b4837731":"markdown","88ecadb8":"markdown","bcb1bdc6":"markdown","2340de6e":"markdown","7fc2842d":"markdown","823182c8":"markdown","aabc8869":"markdown","2f912e30":"markdown","040efd16":"markdown","ed5be1f8":"markdown","39e96a9b":"markdown","e0122254":"markdown","1137e5f2":"markdown","6d529e07":"markdown","6c0dd0e4":"markdown","66972357":"markdown","7436e1e6":"markdown","e8605c69":"markdown","4e1c3aba":"markdown","3d98ac2f":"markdown","00cd0d63":"markdown","79d70298":"markdown","05e8854e":"markdown","d46f09d2":"markdown","a5f49add":"markdown","05f22070":"markdown","b7f7f43a":"markdown","9e28786c":"markdown"},"source":{"9e140810":"import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")","feb8ee16":"data = pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore.csv\")\nprint(data.shape)\ndata.head()","e51da0f5":"data.isnull().sum()","2f70aac8":"data_missing = data[data.isna().any(axis=1)]\ndata_missing.head()","aa6a7650":"cols = [\"Type\", \"Price\"]\nmissing_type = data[data[cols].isna().any(axis=1)]\nmissing_type","f4b280bd":"data[\"Type\"] = data[\"Type\"].fillna(\"Free\")","70926221":"for col in data.columns:\n    data[col] = data[col].fillna(\"None\")","f13e36c1":"data.isnull().sum()","98b99953":"print(data.Category.unique())\nprint(\"\\nAmount of unique values : \", len(data.Category.unique()))","588fa82c":"amount = data.groupby(\"Category\").count()\namount[amount.columns[:1]].head()","02a53aaa":"plt.figure(figsize=(24,10))\nplt.bar(amount.index, amount[\"App\"])\nplt.ylabel(\"Amount of games in the category\")\nplt.xlabel(\"Category\")\nplt.xticks(rotation=90);","5791e89d":"temp_size = data[\"Size\"]","f5222bb8":"temp_size.unique()","f5274f74":"cols = [\"App\", \"Size\"]\nsize_data = data[cols]\n\nis_mb = []\nvalues_transformed = []\n\nfor i in size_data.Size:\n    if i[-1] == \"M\":\n        is_mb.append(True)\n        values_transformed.append(float(i[0:-1]))\n    else: \n        is_mb.append(False)\n        \nsize_data[\"is_megabyte\"] = is_mb\nsize_data = size_data[size_data.is_megabyte == True]\nsize_data = size_data.drop([\"is_megabyte\"], axis=1)\nsize_data.Size.unique()","110bd0ef":"values_transformed[:5]","056cc0da":"size_data.Size = values_transformed","c1d75b3b":"size_data.shape","ad2c4399":"size_data = size_data.sort_values(by=\"Size\")\nsize_data","d9ee68c1":"max_inst = size_data[size_data[\"Size\"] == size_data.Size.max()].App.to_list()","8d70d546":"max_inst","8f56a09d":"cols = [\"App\", \"Installs\"]\ninstalls_data = data[cols]\ninstalls_data.Installs.unique()","4a16accd":"installs_data = installs_data[installs_data.Installs != \"Free\"]\ninstalls_data = installs_data[installs_data.Installs != \"0\"]\ninstalls_data.Installs.unique()","3cbf2e7f":"transformed = []\n\nfor val in installs_data.Installs:\n    transformed.append(float(val[:-1].replace(\",\", \"\")))\ntransformed[:5]","e748ffce":"installs_data.Installs = transformed\ninstalls_data.head()","6eb77035":"installs_data.shape","6e59adcd":"installs_data = installs_data.sort_values(\"Installs\")\ninstalls_data","45c65340":"result = installs_data[installs_data[\"Installs\"] == installs_data.Installs.max()]\nresult","14cfa541":"result = result.drop_duplicates()","da2ab8f1":"result.App","2c9e0397":"As we can see, there are many apps with almost the same amount (as we didn't know the exact numbers).","7e354a9c":"As we can see, there are to many unique apps, so it won't make much sense of building bar plot, as we will have 8829 bars, and it will be almost impossible to interpret this plot.","20c4d633":"As can be seen from dataframe, Price value is 0, so we should fill Type with Free.","91ecdf47":"As all the kylobytes values are under 1 megabyte and other trash values aren't informative, we won't even need them to find the largest.","587be196":"What can be seen from it, is we can't predict or guess about missing data for all the columns, excluding Type column. ","bde093ef":"### Now, let's solve the tasks given with this dataset","43e352f4":"Check if it worked well.","6c8bd09c":"Reading data from file and checking it's shape and how it looks like.","d397fcc8":"As we can see, App column has numerical values, wich are amount of apps in each category.","cbb82298":"Let's drop them.","4358c1c1":"And, as we are going to transform data to numeric format, 0+ and 0 are the values with the same meanings for us.","8b74442b":"That means, that Price value equals 0, if Type is Free, and higher then zero, when Type is Paid.","e0b47088":"We should check if there are any missing data.","252c1be6":"Now we can easily transorm this data to float.","9fe20eb5":"It will be easy to find out, which category is the most popular, if we visualize our data.","abb1da55":"First of all, let's find out how many unique categories do we have.","9a09cbde":"That means, that we can choose any of it to visualize data! ","0d0a2059":"What can be seen from the list, is that Free value might be absolutely useless in Installs column.","5d840c13":"That means, that we can also drop rows with 0 values as it will help us to transform data easier.","27f5f0c5":"#### Missing Data","5ec21cc1":"## 2. App with the largest size","ebe1d10a":"Looks like we have also got size in kylobytes. And some trash values.","c2355297":"As we can see, there are several duplicates.","7e9eeed1":"As can easily be seen from the plot, FAMILY apps is definitely the highest.","8bbda7bf":"But that's not a problem for us, because we need to fing the largest value.","5efe4af0":"Now, let's count the amount of each category in our dataset.","0c72b6f8":"Let's find all of them.","b4837731":"Let's get the apps with maximum install","88ecadb8":"# Tasks","bcb1bdc6":"As there are so many values, visualizing doesn't make any sense, so we will just sort data, to find the highest values.","2340de6e":"So we will drop them!","7fc2842d":"## 1. Most popular category","823182c8":"But there is one question about the Size column format : can we only see size in megabytes or also in kilobytes?","aabc8869":"### Result","2f912e30":"The apps from the list below have the highest amount of installs.","040efd16":"All the apps from the list below have the highest size :","ed5be1f8":"It worked fine, we have dealt with all the missing data.","39e96a9b":"Everything transformed fine, let's change Installs values to transformed ones.","e0122254":"Let's check it out!","1137e5f2":"### Result ","6d529e07":"So, we will simply sort our dataset to find out, which app has the biggest size.","6c0dd0e4":"Let's find a row, with the missing Type value, to find out, what should we fill it with.","66972357":"Filling the other missing data with \"None\", as we can't find out which value will be appropriate.","7436e1e6":"The most popular category in this dataset is FAMILY.","e8605c69":"Now, let's take a look at transformed values of Size.","4e1c3aba":"## 3. App with the largest num of installs","3d98ac2f":"Let's check the shape of this dataframe, to understand, if it makes amy sense to visualize this data.","00cd0d63":"First of all, let's take a look at unique values of Installs column","79d70298":"Let's take a look at missing data.","05e8854e":"### Result","d46f09d2":"We should actually do the same actions, which were in the previous task.","a5f49add":"As we can see there is no missing data in Price column.","05f22070":"Now, we will change Size column to transformed float values.","b7f7f43a":"Let's take a look at our datasets shape.","9e28786c":"# Importing libraries and preparing data"}}