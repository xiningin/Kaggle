{"cell_type":{"5d94de01":"code","32de996e":"code","4c513f07":"code","df38b270":"code","68ab5629":"code","b551826f":"code","3cf68bca":"code","e24b8069":"code","4c435df7":"code","85519f60":"code","b2872989":"code","4d047815":"markdown","85689f14":"markdown","94bf1bdf":"markdown","d6bdce72":"markdown","338cdf6d":"markdown","36652dc8":"markdown","9dd40272":"markdown"},"source":{"5d94de01":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.tokenize import word_tokenize\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn import linear_model\nfrom sklearn import metrics","32de996e":"ls ..\/input\/nlp-getting-started\/","4c513f07":"train_df = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv')\ntrain_df.head()","df38b270":"from sklearn import model_selection\ndef fold(df):\n    df['kfold'] = -1\n    df = df.sample(frac=0.1).reset_index(drop=True)\n    y = df.target.values\n    kf = model_selection.StratifiedKFold(n_splits=5)\n    for f_,(t_,v_) in enumerate(kf.split(X=df, y=y)):\n        df.loc[v_, 'kfold'] = f_\n    return df","68ab5629":"df = fold(train_df)\ndf.head()","b551826f":"def train(fold):\n    \n    # splitting the dataset into training and validation dataset\n    train_df = df[df.kfold != fold].reset_index(drop=True)\n    valid_df = df[df.kfold == fold].reset_index(drop=True)\n    \n    # Initializing count vectorizer with word_tokenize as a tokenizer\n    cv = CountVectorizer(tokenizer=word_tokenize, token_pattern=None)\n    cv.fit(train_df.text)\n    \n    # trainforming training and validation dataset\n    x_train = cv.transform(train_df.text)\n    x_valid = cv.transform(valid_df.text)\n\n    # initializing logistic regression\n    model = linear_model.LogisticRegression()\n    \n    # fitting the modelo\n    model.fit(x_train, train_df.target)\n    \n    #prediction on validation set\n    preds = model.predict(x_valid)\n    \n    # Accuracy score\n    accuracy = metrics.accuracy_score(preds, valid_df.target)\n    \n    print(f\"Accuracy:{accuracy}\")\n    print(\"\")","3cf68bca":"for fold in range(5):\n    train(fold)","e24b8069":"from sklearn import naive_bayes\n\ndef train(fold):\n    \n    # splitting the dataset into training and validation dataset\n    train_df = df[df.kfold != fold].reset_index(drop=True)\n    valid_df = df[df.kfold == fold].reset_index(drop=True)\n    \n    # Initializing count vectorizer with word_tokenize as a tokenizer\n    cv = CountVectorizer(tokenizer=word_tokenize, token_pattern=None)\n    cv.fit(train_df.text)\n    \n    # trainforming training and validation dataset\n    x_train = cv.transform(train_df.text)\n    x_valid = cv.transform(valid_df.text)\n\n    # initializing logistic regression\n    model = naive_bayes.MultinomialNB()\n    \n    # fitting the modelo\n    model.fit(x_train, train_df.target)\n    \n    #prediction on validation set\n    preds = model.predict(x_valid)\n    \n    # Accuracy score\n    accuracy = metrics.accuracy_score(preds, valid_df.target)\n    \n    print(f\"Accuracy:{accuracy}\")\n    print(\"\")","4c435df7":"for fold in range(5):\n    train(fold)","85519f60":"def train(fold):\n    \n    # splitting the dataset into training and validation dataset\n    train_df = df[df.kfold != fold].reset_index(drop=True)\n    valid_df = df[df.kfold == fold].reset_index(drop=True)\n    \n    # Initializing count vectorizer with word_tokenize as a tokenizer\n    cv = TfidfVectorizer(tokenizer=word_tokenize, token_pattern=None, ngram_range=(1, 4))\n    cv.fit(train_df.text)\n    \n    # trainforming training and validation dataset\n    x_train = cv.transform(train_df.text)\n    x_valid = cv.transform(valid_df.text)\n\n    # initializing logistic regression\n    model = linear_model.LogisticRegression()\n    \n    # fitting the modelo\n    model.fit(x_train, train_df.target)\n    \n    #prediction on validation set\n    preds = model.predict(x_valid)\n    \n    # Accuracy score\n    accuracy = metrics.accuracy_score(preds, valid_df.target)\n    \n    print(f\"Accuracy:{accuracy}\")\n    print(\"\")","b2872989":"for fold in range(5):\n    train(fold)","4d047815":"# importing the dataset","85689f14":"# K-Fold","94bf1bdf":"## given datasets","d6bdce72":"# importing the libraries","338cdf6d":"# Training Logistic Regression","36652dc8":"# Training Neive Baise","9dd40272":"# Logistic Regressin with TF-IDF"}}