{"cell_type":{"b0038750":"code","e421f3a9":"code","1691e09d":"code","e7fe80df":"code","9ebfeb36":"code","25abf414":"code","eff059db":"code","3284b32f":"code","fe8075ad":"code","8f7045a3":"code","2d2db6f3":"code","0e7c6be7":"code","bbbaeead":"code","9a579402":"code","0f2676c6":"code","9c2edf85":"code","141c7de7":"code","c0108132":"markdown","03e9594f":"markdown","88eae992":"markdown","28b764d1":"markdown","1d1fdab3":"markdown","d1799de0":"markdown","69feb998":"markdown"},"source":{"b0038750":"import numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\nimport os","e421f3a9":"base_dir =  r'..\/input\/multiclass-weather-dataset\/Multi-class Weather Dataset'\nfolders = os.listdir(base_dir)\nprint(folders)","1691e09d":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    validation_split=0.2)\n\ntrain_generator = train_datagen.flow_from_directory(\n    base_dir,\n    target_size=(250 , 250),\n    batch_size= 32,\n    class_mode='categorical',\n    subset='training')\n\nvalidation_generator = train_datagen.flow_from_directory(\n    base_dir,\n    target_size=(250, 250),\n    batch_size= 32,\n    class_mode='categorical',\n    subset='validation')","e7fe80df":"# Generated Labels\n\nlabels = (train_generator.class_indices)\nlabels = dict((v , k) for k , v in labels.items())\nprint(labels)","9ebfeb36":"base_model = tf.keras.applications.InceptionV3(input_shape=(250,250,3),\n                                               include_top=False,\n                                               weights = \"imagenet\"\n                                               )","25abf414":"base_model.trainable = False","eff059db":"model_inc = tf.keras.Sequential([\n    base_model,\n    tf.keras.layers.MaxPooling2D(),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(4, activation=\"softmax\")\n])\n\nmodel_inc.compile(loss='categorical_crossentropy' , optimizer=tf.keras.optimizers.Adam(lr = 0.001) , metrics='accuracy')","3284b32f":"model_inc.summary()","fe8075ad":"# Training\n\nhist_inc = model_inc.fit(train_generator ,\n          validation_data = validation_generator ,\n          epochs = 15 ,\n          steps_per_epoch = 901\/32, # train_files\/batch_size\n          validation_steps = 224\/32, # valid_files\/batch_size \n          )","8f7045a3":"# Summarize history for accuracy\n\nplt.plot(hist_inc.history['accuracy'])\nplt.plot(hist_inc.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","2d2db6f3":"# Summarize history for loss\n\nplt.plot(hist_inc.history['loss'])\nplt.plot(hist_inc.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","0e7c6be7":"base_model = tf.keras.applications.ResNet50(input_shape=(250,250,3),\n                                               include_top=False,\n                                               weights = \"imagenet\"\n                                               )\nbase_model.trainable = False","bbbaeead":"model_res = tf.keras.Sequential([\n    base_model,\n    tf.keras.layers.MaxPooling2D(),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(4, activation=\"softmax\")\n])\n\nmodel_res.compile(loss='categorical_crossentropy' , optimizer=tf.keras.optimizers.Adam(lr = 0.001) , metrics='accuracy')","9a579402":"model_res.summary()","0f2676c6":"# Training model\n\nhist_res = model_res.fit(train_generator ,\n          validation_data = validation_generator ,\n          epochs = 15 ,\n          steps_per_epoch = 901\/32, # train_files\/batch_size\n          validation_steps = 224\/32, # valid_files\/batch_size \n          )","9c2edf85":"# Summarize history for accuracy\n\nplt.plot(hist_res.history['accuracy'])\nplt.plot(hist_res.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","141c7de7":"# Summarize history for loss\n\nplt.plot(hist_res.history['loss'])\nplt.plot(hist_res.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","c0108132":"### 1. InceptionV3","03e9594f":"## Importing libraries","88eae992":"## Model","28b764d1":"## Loading images","1d1fdab3":"### 2. ResNet50","d1799de0":"### InceptionV3 gave an accuracy of 91.52% on validation dataset.","69feb998":"### ResNet50 gave an accuracy of 71.88% on validation set."}}