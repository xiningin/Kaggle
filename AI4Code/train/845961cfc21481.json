{"cell_type":{"0e3c88d5":"code","a268731d":"code","1d86cf1c":"code","954b5c9d":"code","05f66759":"code","f8adf01f":"code","fac4a3eb":"code","60518296":"code","69f86115":"code","672135b1":"code","fe1d93aa":"code","6d074bfe":"code","454de8f0":"code","95c68a8a":"code","02fe235d":"markdown","9553f2f9":"markdown"},"source":{"0e3c88d5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport scikitplot as skplt\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB  # Gaussian naive Bayes classifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom IPython.display import display\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a268731d":"#reading the iris dataset \niris = pd.read_csv('..\/input\/Iris.csv')\nprint(iris.shape)\niris=iris.drop('Id',axis=1)\ndisplay(iris.head())","1d86cf1c":"#plotting the confusion matrix \ndef plot_correlation_map( df ):\n    corr = df.corr()\n    _ , ax = plt.subplots( figsize =( 12 , 10 ) )\n    cmap = sns.diverging_palette( 220 , 10 , as_cmap = True )\n    _ = sns.heatmap(\n        corr, \n        cmap = cmap,\n        square=True, \n        cbar_kws={ 'shrink' : .9 }, \n        ax=ax, \n        annot = True, \n        annot_kws = { 'fontsize' : 12 }\n       \n    )\nplot_correlation_map(iris)\nplt.show()\niris.describe()","954b5c9d":"fig, (ax1, ax2) = plt.subplots(ncols=2, sharey=True,figsize=(12,10))\nsns.stripplot(x=\"Species\", y=\"SepalLengthCm\", data=iris,ax=ax1, jitter=True);\nsns.swarmplot(x=\"Species\", y=\"SepalWidthCm\", data=iris,ax=ax2);\nfig, (ax3, ax4) = plt.subplots(ncols=2, sharey=True,figsize=(12,10))\nsns.stripplot(x=\"Species\", y=\"PetalLengthCm\", data=iris,ax=ax3);\nsns.stripplot(x=\"Species\", y=\"PetalWidthCm\", data=iris,ax=ax4);","05f66759":"fig, (ax1, ax2) = plt.subplots(ncols=2, sharey=True,figsize=(15,5))\nsns.swarmplot(x=\"SepalWidthCm\", y=\"SepalLengthCm\", hue=\"Species\", data=iris,ax=ax1);\nsns.swarmplot(x=\"PetalWidthCm\", y=\"PetalLengthCm\", hue=\"Species\", data=iris,ax=ax2);\nfig, (ax3, ax4) = plt.subplots(ncols=2, sharey=True,figsize=(15,5))\nsns.swarmplot(x=\"PetalWidthCm\", y=\"SepalWidthCm\", hue=\"Species\", data=iris,ax=ax3);\nsns.swarmplot(x=\"PetalLengthCm\", y=\"SepalWidthCm\", hue=\"Species\", data=iris,ax=ax4);","f8adf01f":"sns.lmplot(x=\"SepalLengthCm\", y=\"SepalWidthCm\", hue=\"Species\", data=iris);","fac4a3eb":"iris=iris.drop('SepalWidthCm',axis=1)\ntrainSet, testSet = train_test_split(iris, test_size = 0.33)\nprint(trainSet.shape)\nprint(testSet.shape)","60518296":"# Format the data and expected values for SKLearn\ntrainData = pd.DataFrame(trainSet[['SepalLengthCm', 'PetalLengthCm', 'PetalWidthCm']]).values\ntrainTarget = pd.DataFrame(trainSet[['Species']]).values.ravel()\ntestData = pd.DataFrame(testSet[['SepalLengthCm', 'PetalLengthCm', 'PetalWidthCm']]).values\ntestTarget = pd.DataFrame(testSet[['Species']]).values.ravel()\n","69f86115":"#using Niave Bayes algorithm\nclassifier = GaussianNB()\nclassifier.fit(trainData, trainTarget)\npredicted_value = classifier.predict(testData)\n\npredictions = dict()\naccuracy = accuracy_score(testTarget,predicted_value) \npredictions['Naive-Bayes']=accuracy*100\nprint(\"The accuracy of the model is {}\".format(accuracy))\nconfusionmatrix = confusion_matrix(testTarget, predicted_value)\ncm=pd.DataFrame(confusion_matrix(testTarget, predicted_value))\nprint(\"The confusion matrix of the model is \\n{}\".format(cm))\nskplt.metrics.plot_confusion_matrix(testTarget, predicted_value, normalize=True)\nplt.show()","672135b1":"#Using Random forest\nclf = RandomForestClassifier(n_estimators=100, oob_score=True, random_state=123456)\nclf.fit(trainData, trainTarget)\npredicted_value = clf.predict(testData)\naccur = accuracy_score(testTarget,predicted_value) \npredictions['Random-Forest']=accur*100\ncm = (confusion_matrix(testTarget, predicted_value))\nprint(\"The accuracy score of the model is {}\".format(accur))\nprint(\"The confusion matrix of the model is \\n{}\".format(cm))","fe1d93aa":"#using decision Tree\nclf1=DecisionTreeClassifier()\nclf1.fit(trainData, trainTarget)\npredicted_value = clf1.predict(testData)\naccur = accuracy_score(testTarget,predicted_value) \npredictions['Decision Tree']=accur*100\ncm = (confusion_matrix(testTarget, predicted_value))\nprint(\"The accuracy score of the model is {}\".format(accur))\nprint(\"The confusion matrix of the model is \\n{}\".format(cm))","6d074bfe":"#using KNN algorithm\nclf2=KNeighborsClassifier()\nclf2.fit(trainData, trainTarget)\npredicted_value = clf2.predict(testData)\naccur = accuracy_score(testTarget,predicted_value)\npredictions['KNN']=accur*100\ncm = (confusion_matrix(testTarget, predicted_value))\nprint(\"The accuracy score of the model is {}\".format(accur))\nprint(\"The confusion matrix of the model is \\n{}\".format(cm))","454de8f0":"fig, (ax1) = plt.subplots(ncols=1, sharey=True,figsize=(15,5))\ndf=pd.DataFrame(list(predictions.items()),columns=['Algorithms','Percentage'])\ndisplay(df)\nsns.barplot(x=\"Algorithms\", y=\"Percentage\", data=df,ax=ax1);","95c68a8a":"#submission file \nsubmission= pd.DataFrame()\ncolumns=['SepalLengthCm', 'PetalLengthCm', 'PetalWidthCm']\nsubmission[columns] = testSet[columns]\nsubmission['Species']=predicted_value\nsubmission.to_csv('Submission.csv',index=True)\nprint(\"Submission file Created\")","02fe235d":"# 1.Data Exploration\nFirst we will explore the data by plotting graphs ,check if there is any missing values,co-relation between features and all these things\nBelow you can find \n* The describition about the data set\n* The correlation graph between the features from the iris data set","9553f2f9":"# Splitting Train,Test Data\n\nWe are following supervised learning so we are splitting the dataset into Transet and Testset\n\nTrainset to Train the model \nTestset to test the model and finding the accuracy of the model with the predicted values"}}