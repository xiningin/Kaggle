{"cell_type":{"5b81989b":"code","776808d1":"code","849aef6d":"code","3c84e7d8":"code","6201c2de":"code","231ae8e2":"code","3bbf4e21":"code","c39042cf":"code","46c424c9":"code","6475cfd4":"code","72ef4f12":"code","af7aa37b":"code","ff67ef0b":"code","7283ec75":"code","e74cf1ef":"code","6203805d":"code","75b4b9d9":"code","cee253f7":"code","3bbe4478":"code","d4c58a9a":"code","c2592087":"code","355aff9a":"code","9391b420":"code","cf577125":"code","322d5531":"markdown","48129c28":"markdown","8145208d":"markdown","1e1b742e":"markdown","0b82589b":"markdown","f735940f":"markdown","c5d55e43":"markdown","c6a287bd":"markdown","da7a398e":"markdown","d24f0a21":"markdown","64c04914":"markdown","114d55a7":"markdown","709fbcc1":"markdown","eaffb6db":"markdown","b658a360":"markdown","adee89f1":"markdown","829b2647":"markdown","9e95c198":"markdown","a28ac855":"markdown","9b5f99f1":"markdown","8f505af2":"markdown","583d13fb":"markdown","f833854f":"markdown","23be719b":"markdown","0268f436":"markdown","7d61ba44":"markdown","297e1da4":"markdown","5cb88ba4":"markdown"},"source":{"5b81989b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt \nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n# plotly\n\nfrom plotly.offline import init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\n","776808d1":"df = pd.read_csv('..\/input\/BlackFriday.csv')","849aef6d":"df.head()","3c84e7d8":"df.info()","6201c2de":"#update NaN values with 0 for Product_Category_1 , Product_Category_2 , Product_Category_3\n\ndf[\"Product_Category_1\"].fillna(0, inplace=True)\ndf[\"Product_Category_2\"].fillna(0, inplace=True)\ndf[\"Product_Category_3\"].fillna(0, inplace=True)","231ae8e2":"# prepare data frame \n# for each gender , sum  Purchase \ndf_Gender = df.groupby(['Gender','Product_Category_1'])['Purchase'].sum().reset_index('Gender').reset_index('Product_Category_1')\n\n# add rank column for counts \ndf_Gender['Rank'] = df_Gender.groupby('Gender')['Purchase'].rank(ascending=False).astype(int)\n\n# Filter female and male \ndf_Female = df_Gender[df_Gender['Gender'] =='F'] \ndf_Male = df_Gender[df_Gender['Gender'] =='M'] \n\n# get only 3 columns \ndf_Female = df_Female[['Product_Category_1', 'Purchase','Rank']]\ndf_Male = df_Male[['Product_Category_1', 'Purchase','Rank']]\n\n#Add category names\ndf_Female['Product_Category_Name'] = df_Female.apply(lambda row: \"PrdType_\" + row['Product_Category_1'].astype(str), axis=1)\ndf_Male['Product_Category_Name'] = df_Male.apply(lambda row: \"PrdType_\" + row['Product_Category_1'].astype(str), axis=1)\n\ndf_Female.sort_values(by=['Rank'], inplace = True)\ndf_Male.sort_values(by=['Rank'], inplace = True)\n\nprint(df_Female )\n","3bbf4e21":"# Draw graph \n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df_Female.Rank,\n                    y = df_Female.Purchase,\n                    mode = \"lines\",\n                    name = \"Female Purchase\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df_Female.Product_Category_Name)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df_Male.Rank,\n                    y = df_Male.Purchase,\n                    mode = \"lines+markers\",\n                    name = \"Male Purchase\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df_Male.Product_Category_Name)\ndata = [trace1,trace2]\nlayout = dict(title = 'Male and Female vs buying Product_Category_1',\n              xaxis= dict(title= 'Product Purchase Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","c39042cf":"\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df_Female.Rank,\n                    y = df_Female.Purchase,\n                    mode = \"markers\",\n                    name = \"Female Purchase\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df_Female.Product_Category_Name)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df_Male.Rank,\n                    y = df_Male.Purchase,\n                    mode = \"markers\",\n                    name = \"Male Purchase\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df_Male.Product_Category_Name)\n\ndata = [trace1, trace2]\nlayout = dict(title = 'Male and Female vs buying Product_Category_1',\n              xaxis= dict(title= 'Product Purchase Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Puchase',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)  \n","46c424c9":"#second bar chart \n\ntrace1 = {\n  'x': df_Female.Product_Category_1,\n  'y': df_Female.Purchase,\n  'name': 'Female Purchase',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': df_Male.Product_Category_1,\n  'y': df_Male.Purchase,\n  'name': 'Male Purchase',\n  'type': 'bar'\n};\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Product Category 1'},\n  'barmode': 'relative',\n  'title': 'Male and Female vs buying Product_Category_1'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","6475cfd4":"# creating trace1\ntrace1 =go.Bar(\n                    x = df_Female.Rank,\n                    y = df_Female.Purchase,\n                    name = \"Female Purchase\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)', line=dict(color='rgb(0,0,0)',width=1.1)),\n                    text= df_Female.Product_Category_Name)\n# creating trace2\ntrace2 =go.Bar(\n                    x = df_Male.Rank,\n                    y = df_Male.Purchase,\n                    name = \"Male Purchase\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)', line=dict(color='rgb(0,0,0)',width=1.1)),\n                    text= df_Male.Product_Category_Name)\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = dict(data = data, layout = layout)\niplot(fig)","72ef4f12":"#%% second bar chart \ntrace1 = {\n  'x': df_Female.Product_Category_1,\n  'y': df_Female.Purchase,\n  'name': 'Female Purchase',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': df_Male.Product_Category_1,\n  'y': df_Male.Purchase,\n  'name': 'Male Purchase',\n  'type': 'bar'\n};\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Product Category 1 '},\n  'barmode': 'relative',\n  'title': 'Male and Female vs buying Product_Category_1'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","af7aa37b":"\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": df_Male.Purchase[df_Male.Rank <=5],\n      \"labels\": df_Male.Product_Category_Name[df_Male.Rank <=5],\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Total Purchase\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n\n  \"layout\": {\n        \"title\":\"Top 5 Product category1 purchase for men\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Total Purchase\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)\n","ff67ef0b":"\n#prepare data \n# filter users who does not buy, means 0 \ndf_Cat1 = df[df.Product_Category_1 != 0].groupby(['User_ID','Product_Category_1']).count().reset_index('User_ID').reset_index('Product_Category_1')\ndf_Cat2 = df[df.Product_Category_2 != 0].groupby(['User_ID','Product_Category_1']).count().reset_index('User_ID').reset_index('Product_Category_1')\n# Rename column Product_ID as Count\ndf_Cat1.rename(columns={'Product_ID': 'Count_Prd_Cat1'}, inplace = True)\ndf_Cat2.rename(columns={'Product_ID': 'Count_Prd_Cat2'}, inplace = True)\n\n# add rank column for counts \ndf_Cat1['Rank_Prd_Cat1'] = df_Cat1.groupby('Product_Category_1')['Count_Prd_Cat1'].rank(ascending=False).astype(int)\n\n#filter columns \ndf_Cat1 = df_Cat1[['User_ID','Product_Category_1','Count_Prd_Cat1', 'Rank_Prd_Cat1' ]]\ndf_Cat2 = df_Cat2[['User_ID','Product_Category_1','Count_Prd_Cat2']]\n# merge \ndf_Users = pd.merge(df_Cat1, df_Cat2, on=['User_ID','Product_Category_1'])\n\n# Add  User_Name  column \ndf_Users['User_Name'] = df_Users.apply(lambda row: \"Usr_\" + row['User_ID'].astype(str), axis=1)\ndf_Users.sort_values(by=['Product_Category_1'], inplace = True)\n\ndf_Users = df_Users[['User_ID', 'User_Name', 'Product_Category_1','Count_Prd_Cat1','Count_Prd_Cat2', 'Rank_Prd_Cat1']][df_Users.Rank_Prd_Cat1 ==1]\n\ndf_Users\n","7283ec75":"#%% Show first person for each ProductCategory1 and how many they bought .\n# define sizes of bubbles for ProductCategory2 to show did they also buy ProductCategory2 \n# draw graph \ncount_size  = [ float( each) for each in df_Users.Count_Prd_Cat2]\ninternational_color = [float( each) for each in df_Users.User_ID]\n    \nfig = {\n  \"data\": [\n    {\n        'y': df_Users.Count_Prd_Cat1,\n        'x': df_Users.Product_Category_1,\n        'mode': 'markers',\n        'marker': {\n            'color': international_color,\n            'size': count_size,\n            'showscale': True\n        },\n        \"text\" :  df_Users.User_Name\n    },],\n\n  \"layout\": {\n        \"title\":\"Top User For Each Product Category1 and Size for Product Category2\",\n        \"annotations\": [\n            { \"font\": { \"size\": 14},\n              \"showarrow\": False,\n              \"text\": \"Product Category 1 \",\n                \"x\": 8,\n                \"y\": -10 \n            },\n        ]\n    }\n}\niplot(fig)","e74cf1ef":"# prepare data\ndf_Female = df[df['Gender'] =='F']['Product_Category_1']\ndf_Male = df[df['Gender'] =='M']['Product_Category_1'] ","6203805d":"# Counts for Product_Category_1 for Female and Male\ntrace1 = go.Histogram(\n    x=df_Male,\n    opacity=0.75,\n    name = \"Male\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=df_Female,\n    opacity=0.75,\n    name = \"Female\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title=' Product_Category_1 counts purchased by Female and Male',\n                   xaxis=dict(title='Product Category 1'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","75b4b9d9":"#%% World cloud \n\nProduct_ID = df.Product_ID\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(Product_ID))\nplt.imshow(wordcloud)\nplt.axis('off')\n#plt.savefig('graph.png')\n\nplt.show()","cee253f7":"# data preparation\ndf_Male = df[df.Gender == 'M']\ndf_Female = df[df.Gender == 'F']\n\ntrace0 = go.Box(\n    y=df_Male.Purchase,\n    name = 'Total Purchase of Males in Black Friday',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=df_Female.Purchase,\n    name = 'Total Purchase of Female in Black Friday',\n    marker = dict(\n        color = 'rgb(12, 128, 12)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","3bbe4478":"# import figure factory\nimport plotly.figure_factory as ff\n# prepare data\ndf_Male = df[df.Gender == 'M']\n\ndf_Male = df_Male.loc[:100,[\"Product_Category_1\",\"Product_Category_2\", \"Product_Category_3\"]]\ndf_Male[\"index\"] = np.arange(1,len(df_Male)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(df_Male, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","d4c58a9a":"# prepare data frame \n# for each gender , count  number of Product_Category_1 types \ndf_Gender = df.groupby(['Gender','Product_Category_1']).count().reset_index('Gender').reset_index('Product_Category_1')\n\n# add rank column for counts \ndf_Gender['Rank'] = df_Gender.groupby('Gender')['Product_ID'].rank(ascending=False).astype(int)\n\n# Filter female and male \ndf_Female = df_Gender[df_Gender['Gender'] =='F'] \ndf_Male = df_Gender[df_Gender['Gender'] =='M'] \n\n# get only 3 columns \ndf_Female = df_Female[['Product_Category_1', 'Product_ID','Rank']]\ndf_Male = df_Male[['Product_Category_1', 'Product_ID','Rank']]\n\n# Rename column Product_ID as Count\ndf_Female.rename(columns={'Product_ID': 'Count'}, inplace = True)\ndf_Male.rename(columns={'Product_ID': 'Count'}, inplace = True)\n\ndf_Female['Product_Category_1'] = df_Female.apply(lambda row: \"PrdType_\" + row['Product_Category_1'].astype(str), axis=1)\ndf_Female.sort_values(by=['Rank'], inplace = True)\ndf_Male.sort_values(by=['Rank'], inplace = True)\nprint(df_Female )","c2592087":"# Draw graph \n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df_Female.Rank,\n                    y = df_Female.Count,\n                    mode = \"markers\",\n                    name = \"Female Buy\",\n                    marker = dict(color = 'rgba(256, 0, 0, 0.8)'),\n                    text= df_Female.Product_Category_1)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df_Male.Rank,\n                    y = df_Male.Count,\n                    xaxis='x2',\n                    yaxis='y2',\n                    mode = \"lines+markers\",\n                    name = \"Male Buy\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df_Male.Product_Category_1)\ndata = [trace1,trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Male and Female Purchase Count for Product Category 1'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","355aff9a":"#prepare data frame \n# for each gender , count  number of Product_Category_1 types \ndf_Gender = df.groupby(['Gender','Product_Category_1']).count().reset_index('Gender').reset_index('Product_Category_1')\n\n# add rank column for counts \ndf_Gender['Rank'] = df_Gender.groupby('Gender')['Product_ID'].rank(ascending=False).astype(int)\n\n# Filter female and male \ndf_Female = df_Gender[df_Gender['Gender'] =='F'] \ndf_Male = df_Gender[df_Gender['Gender'] =='M'] \n\n# get only 3 columns \ndf_Female = df_Female[['Product_Category_1', 'Product_ID','Rank']]\ndf_Male = df_Male[['Product_Category_1', 'Product_ID','Rank']]\n\n# Rename column Product_ID as Count\ndf_Female.rename(columns={'Product_ID': 'Count'}, inplace = True)\ndf_Male.rename(columns={'Product_ID': 'Count'}, inplace = True)\n\ndf_Female['Product_Category_1'] = df_Female.apply(lambda row: \"PrdType_\" + row['Product_Category_1'].astype(str), axis=1)\ndf_Female.sort_values(by=['Rank'], inplace = True)\ndf_Male.sort_values(by=['Rank'], inplace = True)\n","9391b420":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=df_Female.Count,\n    y=df_Male.Count,\n    z=df_Female.Rank,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255,0,0)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","cf577125":"#%%\ntrace1 = go.Scatter(\n    x=df_Female.Rank,\n    y=df_Female.Count,\n    name = \"Female count\"\n)\ntrace2 = go.Scatter(\n    x=df_Male.Rank,\n    y=df_Male.Count,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Male count\"\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),   \n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    title = 'Product_Category_1 counts purchased by Female and Male'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","322d5531":"[**Go To Top**](#0)","48129c28":"# <div id=\"8\"> 8. Word Cloud<div\/>\n    \n    Not a pyplot but learning it is good for visualization. Lets look at which ProductId is purchased most\n* WordCloud = word cloud library that I import at the beginning of kernel\n    * background_color = color of back ground\n    * generate = generates the Product_ID list a word cloud","8145208d":"[**Go To Top**](#0)","1e1b742e":"[**Go To Top**](#0)","0b82589b":"<div id=\"0\">\n# Graphs with Plotly Library \n\nIn this homework , I will analyze and visualize human behaviours for Black Friday days by using Plotly Library of Python. \nI will search on products <br><br>\n    \n**Content :** <br>\n    [1. Loading Data and Explanation of Features](#1)<br>\n    [2. Line Charts](#2)<br>\n    [3. Scatter Charts](#3)<br>\n    [4. Bar Charts](#4)<br>\n    [5. Pie Charts](#5)<br>\n    [6. Bubble Charts](#6)<br>\n    [7. Histogram](#7)<br>\n    [8. Word Cloud](#8)<br>\n    [9. Box Plot](#9)<br>\n    [10. Scatter Plot Matrix](#10)<br>\n    [11. Inset Plots](#11)<br>\n    [12. 3D Scatter Plot with Colorscaling](#12)<br>\n    [13. Multiple Subplots](#13)<br>\n","f735940f":"# <div id=\"3\"> 3. Scatter Charts<div\/>\n\n<font color='red'>\n Scatter Charts Example: Male and Female vs buying Product_Category_1\n<font color='black'>\n\n* Import graph_objs as go\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary.\n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n        * title = label of x axis\n        * ticklen = length of x axis ticks\n        * zeroline = showing zero line or not\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","c5d55e43":"[**Go To Top**](#0)","c6a287bd":"[**Go To Top**](#0)","da7a398e":"# <div id=\"5\"> 5. Pie Charts<div\/>\n    \n<font color='red'>\nPie Charts Example: Top 5 Product category1 purchase for men\n<font color='black'>\n* fig: create figures\n    * data: plot type\n        * values: values of plot\n        * labels: labels of plot\n        * name: name of plots\n        * hoverinfo: information in hover\n        * hole: hole width\n        * type: plot type like pie\n    * layout: layout of plot\n        * title: title of layout\n        * annotations: font, showarrow, text, x, y","d24f0a21":"# <div id=\"6\"> 6. Bubble Charts<div\/>\n    \n<font color='red'>\nBubble Charts Example: Which user bought which  category in top 100 and how many bought\n<font color='black'>\n* x = x axis\n* y = y axis\n* mode = markers(scatter)\n*  marker = marker properties\n    * color = third dimension of plot. Internaltional score\n    * size = fourth dimension of plot. Number of students\n* text: university names    ","64c04914":"<font color='red'>Second Bar Charts Example: Male and Female vs buying Product_Category_1<br>\n<font color='black'>\nActually, if you change only the barmode from group to relative in previous example, you achieve what we did here. However, for diversity I use different syntaxes.","114d55a7":"[**Go To Top**](#0)","709fbcc1":"# <div id=\"7\"> 7. Histogram<div\/>\n    \n <font color='red'>\nLets look at histogram of counts purchaced for Product_Category_1 by Female and Male \n<font color='black'>\n* trace1 = first histogram\n    * x = x axis\n    * y = y axis\n    * opacity = opacity of histogram\n    * name = name of legend\n    * marker = color of histogram\n* trace2 = second histogram\n* layout = layout \n    * barmode = mode of histogram like overlay. Also you can change it with *stack*","eaffb6db":"[**Go To Top**](#0)","b658a360":"[**Go To Top**](#0)","adee89f1":"# <div id=\"4\"> 4. Bar Charts<div\/>\n    \n<font color='red'>\nFirst Bar Charts Example:  Male and Female vs buying Product_Category_1\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n        * line = It is dictionary. line between bars\n            * color = line color around bars\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * barmode = bar mode of bars like grouped\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout    ","829b2647":"# <div id=\"9\"> 9. Box Plot<div\/>\n<font color='red'>\n* Box Plots\n    * Median (50th percentile) = middle value of the data set. Sort and take the data in the middle. It is also called 50% percentile that is 50% of data are less that median(50th quartile)(quartile)\n        * 25th percentile = quartile 1 (Q1) that is lower quartile\n        * 75th percentile = quartile 3 (Q3) that is higher quartile\n        * height of box = IQR = interquartile range = Q3-Q1\n        * Whiskers = 1.5 * IQR from the Q1 and Q3\n        * Outliers = being more than 1.5*IQR away from median commonly.\n        \n    <font color='black'>\n    * trace = box\n        * y = data we want to visualize with box plot \n        * marker = color","9e95c198":"[**Go To Top**](#0)","a28ac855":"# <div id=\"11\"> 11. Inset Plots<div\/>\n <font color='red'>\nInset Matrix = 2 plots are in one frame\n<font color='black'>","9b5f99f1":"[**Go To Top**](#0)","8f505af2":"# <div id=\"13\"> 13 .Multiple Subplots<div\/>\n <font color='red'>\nMultiple Subplots: While comparing more than one features, multiple subplots can be useful.\n<font color='black'>","583d13fb":"# <div id=\"2\"> 2. Line Charts<div\/>\n \n Line Charts Example: Male and Female vs buying Product_Category_1\n\n* Import graph_objs as go\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary.\n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n        * title = label of x axis\n        * ticklen = length of x axis ticks\n        * zeroline = showing zero line or not\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","f833854f":"# <div id=\"10\"> 10. Scatter Plot Matrix<div\/>\n <font color='red'>\nScatter Matrix = it helps us to see covariance and relation between more than 2 features\n<font color='black'>\n* import figure factory as ff\n* create_scatterplotmatrix = creates scatter plot\n    * data2015 = prepared data. It includes research, international and total scores with index from 1 to 401\n    * colormap = color map of scatter plot\n    * colormap_type = color type of scatter plot\n    * height and weight","23be719b":"[**Go To Top**](#0)","0268f436":"# <div id=\"1\"> 1. Loading Data and Explanation of Features<div\/>","7d61ba44":"# <div id=\"12\"> 12. 3D Scatter Plot with Colorscaling<div\/>\n <font color='red'>\n3D Scatter: Sometimes 2D is not enough to understand data. Therefore adding one more dimension increase the intelligibility of the data. Even we will add color that is actually 4th dimension.\n<font color='black'>\n* go.Scatter3d: create 3d scatter plot\n* x,y,z: axis of plots\n* mode: market that is scatter\n* size: marker size\n* color: axis of colorscale\n* colorscale:  actually it is 4th dimension","297e1da4":"[**Go To Top**](#0)","5cb88ba4":"[**Go To Top**](#0)"}}