{"cell_type":{"2c7f74a0":"code","f4992f49":"code","7e046642":"code","d151ba45":"code","16b2b340":"code","867b67cb":"code","d907b7f3":"code","e41f4c0b":"code","f620ac73":"code","6a6e7308":"code","526a995b":"code","29574183":"code","cf843e51":"code","ee8ae706":"code","ea8bf738":"code","aba98b02":"code","978874b5":"code","0258bcc0":"code","9e2aa5b6":"code","17be3e31":"code","ec657624":"code","8ff30fb7":"code","e33c683a":"code","3409d9a2":"code","d052a698":"code","7d19b4a5":"code","43035130":"code","23ff0258":"code","3f737649":"code","c041bc37":"code","ad5d89e2":"code","f36ed53b":"code","5797cda1":"code","de5c5032":"code","572ba4e3":"code","e9f958df":"code","8f22ee96":"code","f812706e":"code","89fd74f5":"code","c621f79b":"code","926ca022":"code","21f788d0":"code","bd71c9f2":"code","28f4cb19":"code","5005e95d":"code","eec8bd73":"code","a860a926":"code","12b4d611":"code","0747d3bf":"code","8d593008":"code","6a9fb40f":"code","5dad0db5":"code","7e3b43f1":"code","ac19a027":"code","b8dd2fc3":"code","b25fc723":"code","dafd38d5":"code","c1c93826":"code","8f5672da":"code","d54122ec":"code","8535cc14":"code","a817de5f":"code","ed38ee00":"markdown","617dbc2e":"markdown","09f60f0c":"markdown","eda65cef":"markdown","5560248e":"markdown","48a1e650":"markdown","cb46ed41":"markdown","e89e72ee":"markdown","1f56cae9":"markdown","d39ec1e3":"markdown","c9b692ce":"markdown","0f34f3ce":"markdown","9ca47f99":"markdown","e5b8d373":"markdown","be3ccb29":"markdown","2b0557c6":"markdown","87e3ee5f":"markdown","b60b5d31":"markdown","bc153d89":"markdown","6d99f1e2":"markdown","e6795b1c":"markdown","ff4535ee":"markdown","f9b4eebd":"markdown","6feed947":"markdown","0adb8df1":"markdown","73aa1ccc":"markdown","f27b4a59":"markdown","daf3e51b":"markdown","1e81a266":"markdown","ed887d17":"markdown","aaaf91fc":"markdown","abc39702":"markdown","b8c43189":"markdown","f56768c9":"markdown","22598f04":"markdown","44f98f27":"markdown","09d35512":"markdown","fa78ca7c":"markdown","efc0f30e":"markdown","3fffae51":"markdown","c2db0fd2":"markdown","78e9ccdb":"markdown","a3c69369":"markdown","54f20260":"markdown","a4adf91d":"markdown","3065b840":"markdown","dff8c820":"markdown","c075b74b":"markdown","f131ae2c":"markdown","886d4506":"markdown","71ec28a3":"markdown","5abb5b9b":"markdown","b10e9e72":"markdown","41d212bc":"markdown","ff6be34a":"markdown","15fa4e25":"markdown","771c3f30":"markdown","01961d9b":"markdown","9e6961eb":"markdown"},"source":{"2c7f74a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f4992f49":"import calendar\nimport seaborn as sb\nimport xgboost as xgb\nimport plotly.express as px\nimport pandas_profiling as pp\nimport matplotlib.pyplot as plt\nfrom plotly.subplots import make_subplots\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.metrics import mean_squared_log_error,make_scorer\nfrom sklearn.model_selection import train_test_split,GridSearchCV","7e046642":"#Reading the file\ndf_train = pd.read_csv(\"\/kaggle\/input\/bike-sharing-demand\/train.csv\")","d151ba45":"pp.ProfileReport(df_train)","16b2b340":"df_train.isnull().sum(axis=0)","867b67cb":"df_train.columns","d907b7f3":"corr = df_train[['temp','atemp','humidity', 'windspeed','casual', 'registered',\n                 'count']].corr()\nf,axes = plt.subplots(1,1,figsize = (8,8))\nsb.heatmap(corr,square=True,annot = True,linewidth = .5,center = 1.4,ax = axes)","e41f4c0b":"correlation_mat","f620ac73":"import plotly.figure_factory as ff\n#-------------------------------------------------------------------------#\nwidth = 900\ntitle = '<b>Correlation Matrix for the dataset:<\/b>'\ncolors = 'Viridis'\n#-------------------------------------------------------------------------#\ndf_train = df_train[['temp','atemp','humidity', 'windspeed','casual', 'registered',\n                 'count']]\nclasses = ['temp','atemp','humidity', 'windspeed','casual', 'registered','count']\n#-------------------------------------------------------------------------#\ncorrelation_mat = df_train.corr().to_numpy()\ncorrelation_mat = (correlation_mat\/\/0.0001)\/10000\n\nfig = ff.create_annotated_heatmap(correlation_mat, x=classes, y=classes, \n                                  annotation_text=correlation_mat,\n                                  colorscale=colors,text = correlation_mat,\n                                  hovertemplate='Column: %{x}<br>'+\n                                                'Row: %{y}<br>'+\n                                                'Correlation: %{text}<extra><\/extra>')\nfig.update_layout(title_text= title,width = width,\n                  xaxis = {'title':'Columns'},\n                  yaxis = {'title':'Rows','autorange':'reversed'})\nfig.update_traces(showscale = True)\nfig.show()","6a6e7308":"y = ['casual','registered','count']\nlist_continuous = ['temp','atemp','humidity','windspeed']\nn=3\ns= 15\nf,axes = plt.subplots(4,3,figsize = (s,s))\ncounter = 0\nfor i in list_continuous:\n    for j in y:\n        sb.lineplot(x = i , y = j , data  = df_train, ax = axes[counter\/\/n][counter%n])\n        counter+=1","526a995b":"df_train['Date'] = pd.DatetimeIndex(df_train['datetime']).date\ndf_train['Hour'] = pd.DatetimeIndex(df_train['datetime']).hour\ndf_train['Day'] = pd.DatetimeIndex(df_train['datetime']).day\ndf_train['Month'] = pd.DatetimeIndex(df_train['datetime']).month\ndf_train['Year'] = pd.DatetimeIndex(df_train['datetime']).year\ndf_train['Weekday'] = pd.DatetimeIndex(df_train['datetime']).weekday_name","29574183":"a = []\nfor i in df_train.index:\n    a.append('Total Count : '+str(df_train['count'][i]))\ndf_train['count_vis'] = a","cf843e51":"fig = px.line(x = 'Date', y = \"count\", data_frame = df_train,color = 'Hour',\n              range_y = (0,1150),hover_data = ['Hour','Date','casual','registered'],\n              title = 'Interactive LinePlot of the whole dataset(Hover for more details)',\n              hover_name = 'count_vis', text = None,height = 670,width = 980)\nfig.show()","ee8ae706":"f,axes = plt.subplots(1,3,figsize = (17,7))\nsb.despine(left = True)\nx = 'season'\n\nsb.barplot(x = x , y = 'casual' , data = df_train, saturation = 1, ax =  axes[0])\nsb.barplot(x = x , y = 'registered' , data = df_train, saturation = 1, ax = axes[1])\nsb.barplot(x = x , y = 'count' , data = df_train, saturation = 1, ax = axes[2])","ea8bf738":"f,axes = plt.subplots(1,3,figsize = (17,7))\nsb.despine(left = True)\nx = 'holiday'\n\nsb.barplot(x = x , y = 'casual' , data = df_train, saturation = 1, ax =  axes[0] ,)\nsb.barplot(x = x , y = 'registered' , data = df_train, saturation = 1, ax = axes[1])\nsb.barplot(x = x , y = 'count' , data = df_train, saturation = 1, ax = axes[2])","aba98b02":"f,axes = plt.subplots(1,3,figsize = (17,7))\nsb.despine(left = True)\nx = 'workingday'\n\nsb.barplot(x = x , y = 'casual' , data = df_train, saturation = 1, ax =  axes[0] ,)\nsb.barplot(x = x , y = 'registered' , data = df_train, saturation = 1, ax = axes[1])\nsb.barplot(x = x , y = 'count' , data = df_train, saturation = 1, ax = axes[2])","978874b5":"f,axes = plt.subplots(1,3,figsize = (17,7))\nsb.despine(left = True)\nx = 'weather'\n\nsb.barplot(x = x , y = 'casual' , data = df_train, saturation = 1, ax =  axes[0] )\nsb.barplot(x = x , y = 'registered' , data = df_train, saturation = 1, ax = axes[1])\nsb.barplot(x = x , y = 'count' , data = df_train, saturation = 1, ax = axes[2])","0258bcc0":"f,axes = plt.subplots(1,3,figsize = (19,7))\nsb.despine(left = True)\nx = 'Hour'\n\nsb.barplot(x = x , y = 'casual' , data = df_train, saturation = 1, ax =  axes[0] ,)\nsb.barplot(x = x , y = 'registered' , data = df_train, saturation = 1, ax = axes[1])\nsb.barplot(x = x , y = 'count' , data = df_train, saturation = 1, ax = axes[2])","9e2aa5b6":"df_train.groupby('Weekday').count().index","17be3e31":"df_train_temp = df_train.groupby(['Hour','Weekday']).mean().reset_index()\ndic = {'Weekday':['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday',\n                  'Sunday']}\ndic1 = {'registered':'Average count of registered poeple commuting.',\n        'count': 'Average people commuting','Hour':'Hour of the day',\n        'Weekday':'Day of the week'}\nfig = px.line(x = 'Hour', y = \"registered\", data_frame = df_train_temp.reset_index(),\n              color = 'Weekday',hover_data = ['count'],category_orders = dic,\n              title = 'Interactive LinePlot of the registered separated by weekday(Hover for more details)',\n              labels = dic1,range_y = [0,550],height = 670,width = 980)\nfig.show()","ec657624":"df_train_temp = df_train.groupby(['Hour','Weekday']).mean().reset_index()\ndic = {'Weekday':['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday',\n                  'Sunday']}\ndic1 = {'casual':'Average count of casual poeple commuting.',\n        'count': 'Average people commuting','Hour':'Hour of the day',\n        'Weekday':'Day of the week'}\nfig = px.line(x = 'Hour', y = \"casual\", data_frame = df_train_temp.reset_index(),\n              color = 'Weekday',hover_data = ['count'],category_orders = dic,\n              title = 'Interactive LinePlot of the casual separated by weekday(Hover for more details)',\n              labels = dic1,range_y = [0,550],height = 670,width = 980)\nfig.show()","8ff30fb7":"f,axes = plt.subplots(1,3,figsize = (19,7))\nsb.despine(left = True)\nx = 'Day'\n\nsb.barplot(x = x , y = 'casual' , data = df_train, saturation = 1, ax =  axes[0] ,)\nsb.barplot(x = x , y = 'registered' , data = df_train, saturation = 1, ax = axes[1])\nsb.barplot(x = x , y = 'count' , data = df_train, saturation = 1, ax = axes[2])","e33c683a":"f,axes = plt.subplots(1,3,figsize = (19,7))\nsb.despine(left = True)\nx = 'Month'\n#order = ['January','February','March','April','May','June','July','August','September','October','November','December']\nplot = sb.barplot(x = x , y = 'casual' , data = df_train, saturation = 1, ax =  axes[0])\nsb.barplot(x = x , y = 'registered' , data = df_train, saturation = 1, ax = axes[1])\nsb.barplot(x = x , y = 'count' , data = df_train, saturation = 1, ax = axes[2])","3409d9a2":"f,axes = plt.subplots(1,3,figsize = (19,7))\nsb.despine(left = True)\nx = 'Year'\n\nsb.barplot(x = x , y = 'casual' , data = df_train, saturation = 1, ax =  axes[0] ,)\nsb.barplot(x = x , y = 'registered' , data = df_train, saturation = 1, ax = axes[1])\nsb.barplot(x = x , y = 'count' , data = df_train, saturation = 1, ax = axes[2])","d052a698":"df_train.describe()","7d19b4a5":"df_train.columns","43035130":"for i in df_train.groupby('season').count().index:\n    s = 's'+str(i)\n    a=[]\n    for j in df_train.season:\n        if j==i:\n            a.append(1)\n        else:\n            a.append(0)\n    df_train[s]=a\ndf_train.sample(5)","23ff0258":"for i in df_train.groupby('weather').count().index:\n    s = 'w'+str(i)\n    a=[]\n    for j in df_train.weather:\n        if j==i:\n            a.append(1)\n        else:\n            a.append(0)\n    df_train[s]=a\ndf_train.sample(5)","3f737649":"for i in df_train.groupby('Hour').count().index:\n    s = 'Hour'+str(i)\n    a=[]\n    for j in df_train.Hour:\n        if j==i:\n            a.append(1)\n        else:\n            a.append(0)\n    df_train[s]=a\ndf_train.sample(5)","c041bc37":"for i in df_train.groupby(\"Month\").count().index:\n    s = 'Month' + str(i)\n    a = []\n    for j in df_train.Month:\n        if j==i:\n            a.append(1)\n        else:\n            a.append(0)\n    df_train[s] = a\ndf_train.sample(5)","ad5d89e2":"df_train.columns","f36ed53b":"df_train = df_train[['Hour0', 'Hour1', 'Hour2', 'Hour3', 'Hour4', 'Hour5',\n       'Hour6', 'Hour7', 'Hour8', 'Hour9', 'Hour10', 'Hour11', 'Hour12',\n       'Hour13', 'Hour14', 'Hour15', 'Hour16', 'Hour17', 'Hour18', 'Hour19',\n       'Hour20', 'Hour21', 'Hour22', 'Hour23','Month1', 'Month2', 'Month3',\n       'Month4', 'Month5', 'Month6', 'Month7', 'Month8', 'Month9', 'Month10',\n       'Month11', 'Month12','Year','s1','s2','s3','s4','holiday','workingday',\n        'w1','w2','w3','w4','temp','humidity','casual','registered']]","5797cda1":"df_train.describe()","de5c5032":"df_train.columns","572ba4e3":"df_train.describe()","e9f958df":"df_train_x = df_train.drop('casual',axis = 1).drop('registered',axis=1)\ndf_train_x.describe()","8f22ee96":"df_reg_train_y = df_train['registered']\ndf_reg_train_y.describe","f812706e":"df_cas_train_y = df_train['casual']\ndf_cas_train_y.describe","89fd74f5":"x1_train, x1_test, y1_train, y1_test = train_test_split(df_train_x, df_reg_train_y,\n                                                        test_size=0.15, random_state=42)\nx2_train, x2_test, y2_train, y2_test = train_test_split(df_train_x, df_cas_train_y,\n                                                        test_size=0.15, random_state=42)","c621f79b":"poly = PolynomialFeatures(degree=2)\npoly_x1_train = poly.fit_transform(x1_train)\npoly_x1_test = poly.fit_transform(x1_test)\npoly_x2_train = poly.fit_transform(x2_train)\npoly_x2_test = poly.fit_transform(x2_test)","926ca022":"rf = RandomForestRegressor()\nxg = xgb.XGBRegressor()\nparameter = {\"max_depth\": [1,2,3,4,5,6],\n             \"eta\": [0.01,0.03,0.05],\n             \"alpha\":[0],'n_estimators': [100,500,800,1000,1200,1400]}\n\nparameters = {'n_estimators':[50,100,150,200,250],\n              'min_impurity_decrease':[0.0,0.001,0.01],\n              'max_depth':[20,40,60,80,100]}\n\nmodels = ['Normal Linear Regression: ','Linear Regression over polynomial: ',\n          'Random Forest Regressor: ','XG Boosting: ']","21f788d0":"def custom_scorer(y_true,y_pred):\n    for i in range(len(y_pred)):\n        if y_pred[i]<0:\n            y_pred[i] = 1\n    return np.sqrt(mean_squared_log_error(y_true, y_pred ))\nscorer = make_scorer(custom_scorer,greater_is_better = False)","bd71c9f2":"predict = []\nreg = LinearRegression().fit(x1_train, y1_train)\npre_reg = reg.predict(x1_test)\n\nreg_poly = LinearRegression().fit(poly_x1_train, y1_train)\npre_reg_poly = reg_poly.predict(poly_x1_test)\n\nrf_reg = GridSearchCV(rf, parameters, cv=5, verbose=2,scoring = scorer,n_jobs = -1)\nrf_reg.fit(x1_train, y1_train)\npre_rf_reg = rf_reg.predict(x1_test)\n\nxg_reg = GridSearchCV(xg,parameter,cv=5,verbose = 2 , scoring = scorer, n_jobs = -1)\nxg_reg.fit(x1_train, y1_train)\npre_xg_reg = xg_reg.predict(x1_test)\n\npredict.append(pre_reg)\npredict.append(pre_reg_poly)\npredict.append(pre_rf_reg)\npredict.append(pre_xg_reg)","28f4cb19":"for prediction in range(len(predict)):\n    pre = []\n    for p in predict[prediction]:\n        if p < 1:\n            pre.append(1)\n        else:\n            pre.append(p)\n    print(models[prediction]+str(np.sqrt(mean_squared_log_error(y1_test, pre ))))","5005e95d":"predict = []\ncas = LinearRegression().fit(x2_train, y2_train)\npre_cas = cas.predict(x2_test)\n\ncas_poly = LinearRegression().fit(poly_x2_train, y2_train)\npre_cas_poly = cas_poly.predict(poly_x2_test)\n\nrf_cas = GridSearchCV(rf, parameters, cv=5, verbose=2,scoring = scorer,n_jobs = -1)\nrf_cas.fit(x2_train, y2_train)\npre_rf_cas = rf_cas.predict(x2_test)\n\nxg_cas = GridSearchCV(xg,parameter,cv=5,verbose = 2 , scoring = scorer, n_jobs = -1)\nxg_cas.fit(x2_train, y2_train)\npre_xg_cas = xg_cas.predict(x2_test)\n\npredict.append(pre_cas)\npredict.append(pre_cas_poly)\npredict.append(pre_rf_cas)\npredict.append(pre_xg_cas)","eec8bd73":"for prediction in range(len(predict)):\n    pre = []\n    for p in predict[prediction]:\n        if p < 1:\n            pre.append(1)\n        else:\n            pre.append(p)\n    print(models[prediction]+str(np.sqrt(mean_squared_log_error(y2_test, pre ))))","a860a926":"print(\"For Random Forest Model: \")\nprint(\"\\t Best Parametres for registered are: \",end='')\nprint(rf_reg.best_params_)\nprint(\"\\t Best Parametres for casual are: \",end = '')\nprint(rf_cas.best_params_)\nprint(\"\\nFor XGBoost Model: \")\nprint(\"\\t Best Parametres for registered are: \",end='')\nprint(xg_reg.best_params_)\nprint(\"\\t Best Parametres for casual are: \",end = '')\nprint(xg_cas.best_params_)","12b4d611":"predict1 = []\n\nreg1 = LinearRegression().fit(x1_train, y1_train)\npre_reg1 = reg1.predict(x1_test)\n\nreg1_poly = LinearRegression().fit(poly_x1_train, y1_train)\npre_reg1_poly = reg1_poly.predict(poly_x1_test)\n\nrf1 = RandomForestRegressor(n_estimators = 250,min_impurity_decrease = 0.001,\n                            max_depth=60).fit(x1_train, y1_train)\npre_rf1 = rf1.predict(x1_test)\n\nxg1 = xgb.XGBRegressor(alpha = 0, eta = 0.03, n_estimators = 1200, \n                       max_depth = 6).fit(x1_train,y1_train)\npre_xg1 = xg1.predict(x1_test)\n\nfor i in range(pre_reg1.size):\n    if pre_reg1[i]<1:\n        pre_reg1[i] = 1 \n    if pre_reg1_poly[i]<1:\n        pre_reg1_poly[i] = 1\n    if pre_rf1[i]<1:\n        pre_rf1[i] = 1\n    if pre_xg1[i]<1:\n        pre_xg1[i] = 1\n\npredict1.append(pre_reg1)\npredict1.append(pre_reg1_poly)\npredict1.append(pre_rf1)\npredict1.append(pre_xg1)\n\nx1_final = x1_test.copy()\nx1_final['Output'] = y1_test\nx1_final['Linear'] = pre_reg1\nx1_final['Lin_poly'] = pre_reg1_poly\nx1_final['RF'] = pre_rf1\nx1_final['XG'] = pre_xg1\nx1_final['Resid'] = y1_test-pre_reg1\nx1_final['Resid_poly'] = y1_test-pre_reg1_poly\nx1_final['Resid_rf'] = y1_test - pre_rf1\nx1_final['Resid_xg'] = y1_test - pre_xg1\n\nfor prediction in range(len(predict1)):\n    print(models[prediction]+\n          str(np.sqrt(mean_squared_log_error(y1_test,predict1[prediction] ))))","0747d3bf":"predict2 = []\n\nreg2 = LinearRegression().fit(x2_train, y2_train)\npre_reg2 = reg2.predict(x2_test)\n\nreg2_poly = LinearRegression().fit(poly_x2_train, y2_train)\npre_reg2_poly = reg2_poly.predict(poly_x2_test)\n\nrf2 = RandomForestRegressor(n_estimators = 100,min_impurity_decrease = 0.001,\n                            max_depth=40).fit(x2_train, y2_train)\npre_rf2 = rf2.predict(x2_test)\n\nxg2 = xgb.XGBRegressor(alpha = 0, eta = 0.05, n_estimators = 800,\n                       max_depth = 6).fit(x2_train,y2_train)\npre_xg2 = xg2.predict(x2_test)\n\nfor i in range(pre_reg2.size):\n    if pre_reg2[i]<1:\n        pre_reg2[i] = 1 \n    if pre_reg2_poly[i]<1:\n        pre_reg2_poly[i] = 1\n    if pre_rf2[i]<1:\n        pre_rf2[i] = 1\n    if pre_xg2[i]<1:\n        pre_xg2[i] = 1\n\npredict2.append(pre_reg2)\npredict2.append(pre_reg2_poly)\npredict2.append(pre_rf2)\npredict2.append(pre_xg2)\n\nx2_final = x2_test.copy()\nx2_final['Output'] = y2_test\nx2_final['Linear'] = pre_reg2\nx2_final['Lin_poly'] = pre_reg2_poly\nx2_final['RF'] = pre_rf2\nx2_final['XG'] = pre_xg2\nx2_final['Resid'] = y2_test-pre_reg2\nx2_final['Resid_poly'] = y2_test-pre_reg2_poly\nx2_final['Resid_rf'] = y2_test - pre_rf2\nx2_final['Resid_xg'] = y2_test - pre_xg2\n\nfor prediction in range(len(predict2)):\n    print(models[prediction]+\n          str(np.sqrt(mean_squared_log_error(y2_test, predict2[prediction]))))","8d593008":"name1 = ['Residual for casual without polynomial features'] *1633\nname2 = ['Residual for casual with polynomial features'] *1633\nname3 = ['Residual for registered without polynomial features'] *1633\nname4 = ['Residual for registered with polynomial features'] *1633\ndic = {'Lin': 'Output Predicted using linear model',\n       'Lin_poly': 'Output Predicted using polynomial features',\n       'RF' : 'Output Predicted using RandomForest Model', \n       'XG': 'Output Predicted using XGBoost Model',\n       'Resid':'Deviation from predicted','Output':'Expected Output',\n       'Resid_poly':'Deviation from predicted','Resid_rf':'Deviation from predicted',\n       'Output':'Expected Output','Resid_xg':'Deviation from predicted'}\nfig1 = px.scatter(data_frame = x1_final,x = 'Linear', y = 'Resid',hover_data = ['Output'],\n                  labels = dic,hover_name = name3,color_discrete_sequence = ['red'])\nfig2 = px.scatter(data_frame = x1_final,x = 'Lin_poly', y = 'Resid_poly',\n                  hover_data = ['Output'],labels = dic,hover_name = name4,\n                  color_discrete_sequence = ['blue'])\nfig3 = px.scatter(data_frame = x2_final,x = 'Linear', y = 'Resid',hover_data = ['Output'],\n                  labels = dic,hover_name = name1,color_discrete_sequence = ['darkgreen'])\nfig4 = px.scatter(data_frame = x2_final,x = 'Lin_poly', y = 'Resid_poly',\n                  hover_data = ['Output'],labels = dic,hover_name = name2,\n                  color_discrete_sequence = ['gold'])\n\ntrace1 = fig1['data'][0]\ntrace2 = fig2['data'][0]\ntrace3 = fig3['data'][0]\ntrace4 = fig4['data'][0]\n\n\nfig = make_subplots(rows=2, cols=2,horizontal_spacing =0.1,vertical_spacing  = 0.2,\n                    row_titles = ['Linear Model','Polynomial Model'],\n                    column_titles = ['Casual','Registered'],\n                    x_title = 'Residual plots for Registered and Casual under different models (Hover for more details)')\n\nfig.add_trace(trace3, row=1, col=1)\nfig.add_trace(trace4, row=2, col=1)\nfig.add_trace(trace1, row=1, col=2)\nfig.add_trace(trace2, row=2, col=2)\n\nfig.show()","6a9fb40f":"name5 = ['Residual for casual using RandomForest Model'] *1633\nname6 = ['Residual for casual using XGBoost Model'] *1633\nname7 = ['Residual for registered using RandomForest Model'] *1633\nname8 = ['Residual for registered using XGBoost Model'] *1633\n\ndic = {'Lin': 'Output Predicted using linear model',\n       'Lin_poly': 'Output Predicted using polynomial features',\n       'RF' : 'Output Predicted using RandomForest Model',\n       'XG': 'Output Predicted using XGBoost Model',\n       'Resid':'Deviation from predicted','Output':'Expected Output',\n       'Resid_poly':'Deviation from predicted','Resid_rf':'Deviation from predicted',\n       'Output':'Expected Output','Resid_xg':'Deviation from predicted'}\n\nfig5 = px.scatter(data_frame = x1_final,x = 'RF', y = 'Resid_rf',hover_data = ['Output'],\n                  labels = dic,hover_name = name7,color_discrete_sequence = ['red'])\nfig6 = px.scatter(data_frame = x1_final,x = 'XG', y = 'Resid_xg',hover_data = ['Output'],\n                  labels = dic,hover_name = name8,color_discrete_sequence = ['blue'])\nfig7 = px.scatter(data_frame = x2_final,x = 'RF', y = 'Resid_rf',hover_data = ['Output'],\n                  labels = dic,hover_name = name5,color_discrete_sequence = ['darkgreen'])\nfig8 = px.scatter(data_frame = x2_final,x = 'XG', y = 'Resid_xg',hover_data = ['Output'],\n                  labels = dic,hover_name = name6,color_discrete_sequence = ['gold'])\n\ntrace5 = fig5['data'][0]\ntrace6 = fig6['data'][0]\ntrace7 = fig7['data'][0]\ntrace8 = fig8['data'][0]\n\nfig = make_subplots(rows=2, cols=2,horizontal_spacing =0.1,vertical_spacing  = 0.2,\n                    row_titles = ['Random Forest','XGBoost'],\n                    column_titles = ['Casual','Registered'],\n                    x_title = 'Residual plots for Registered and Casual under different models (Hover for more details)')\n\nfig.add_trace(trace5, row=1, col=2)\nfig.add_trace(trace6, row=2, col=2)\nfig.add_trace(trace7, row=1, col=1)\nfig.add_trace(trace8, row=2, col=1)\nfig.show()","5dad0db5":"rf1 = RandomForestRegressor(n_estimators = 200,min_impurity_decrease = 0.001,\n                            max_depth=80).fit(df_train_x,df_reg_train_y)\nxg2 = xgb.XGBRegressor(alpha = 0, eta = 0.05, max_depth = 6,\n                       n_estimators = 800).fit(df_train_x,df_cas_train_y)","7e3b43f1":"df_test = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/test.csv')","ac19a027":"test=df_test\ntest.describe()","b8dd2fc3":"test['mth'] = pd.DatetimeIndex(test['datetime']).month\ntest['Year'] = pd.DatetimeIndex(test['datetime']).year\ntest['dy'] = pd.DatetimeIndex(test['datetime']).day\ntest['hr'] = pd.DatetimeIndex(test['datetime']).hour\n\nfor i in test.groupby(\"season\").count().index:\n    s = 's' + str(i)\n    a = []\n    for j in test.season:\n        if j==i:\n            a.append(1)\n        else:\n            a.append(0)\n    test[s] = a\nfor i in test.groupby(\"weather\").count().index:\n    s = 'w' + str(i)\n    a = []\n    for j in test.weather:\n        if j==i:\n            a.append(1)\n        else:\n            a.append(0)\n    test[s] = a\nfor i in test.groupby('hr').count().index:\n    s = 'Hour'+str(i)\n    a=[]\n    for j in test.hr:\n        if j==i:\n            a.append(1)\n        else:\n            a.append(0)\n    test[s]=a\nfor i in test.groupby(\"mth\").count().index:\n    s = 'Month' + str(i)\n    a = []\n    for j in test.mth:\n        if j==i:\n            a.append(1)\n        else:\n            a.append(0)\n    test[s] = a\ntest.sample(10)","b25fc723":"test = test[['Hour0','Hour1','Hour2','Hour3','Hour4','Hour5','Hour6','Hour7','Hour8',\n             'Hour9','Hour10','Hour11','Hour12','Hour13','Hour14','Hour15','Hour16',\n             'Hour17','Hour18','Hour19','Hour20','Hour21','Hour22','Hour23','Month1',\n             'Month2','Month3','Month4','Month5','Month6','Month7','Month8','Month9',\n             'Month10','Month11','Month12','Year','s1','s2','s3','s4','holiday',\n             'workingday','w1','w2', 'w3','w4','temp','humidity']]\ntest.describe","dafd38d5":"pre_reg = rf1.predict(test)\npre_cas = xg2.predict(test)\n\nfinal_predictions = pd.DataFrame(pre_cas+pre_reg,columns = ['cout'])\n\nfinal_predictions.describe","c1c93826":"s=[]\nfor j in final_predictions.cout:\n    if int(j)<1:\n        s.append(1)\n    else:\n        s.append(j)\nfinal_predictions['count'] = s ","8f5672da":"final_predictions.describe","d54122ec":"final_predictions['datetime']=df_test['datetime']\nfinal_predictions = final_predictions[['datetime','count']]","8535cc14":"final_predictions.describe()","a817de5f":"final_predictions.to_csv('submission.csv',index=False)","ed38ee00":"We can see that overal the company made growth from the year 2011 to the year 2012.","617dbc2e":"### Trying different models to see which one works best for the given data.","09f60f0c":"# Importing important libraries","eda65cef":"## Data visualizaton for non continuous variables in data","5560248e":"## 3. Working day","48a1e650":"Here I have defined a scorer function as we are using mean squared log loss which does not work on negative values and the models were sometimes predicting negative values which messes with the scores and since we know that these values will always be positive we just replace them with the minimum value in the train set which is 1.","cb46ed41":"# Machine learning model","e89e72ee":"### 5.a. Hour","1f56cae9":"# Predicting output over test set","d39ec1e3":"## 1. Season","c9b692ce":"## Heatmap of all the continuous values in the file.","0f34f3ce":"## 3. Hour","9ca47f99":"## 2. Holiday","e5b8d373":"# Creating a profile report","be3ccb29":"# Plotting the residual plots","2b0557c6":"Combining the graphs of casual and registered into one of may make it seem like that holiday and workingday have no dependence on count but we can clearly see that holiday increases the casual amount by upto 40% and a reverse kind of trend is observed in working day so it is reasonable to take two different models one for casual and another for registered.","87e3ee5f":"Clearly We can see that on the days of saturday and sunday,the general trend more or less follows the same trend as of casual where as on weekdays there is a completely different trend of two peaks at 8 am and 5 pm which confirms that those peaks are due to the workpeople commuting.","b60b5d31":"We can therefore conclude that the Random Forest Model works best for predicting registered.","bc153d89":"**From the above graphs we can conclude that the feature day has hardly any influence over the features registered and count.**","6d99f1e2":"### Splitting data into train and test sets","e6795b1c":"## Line plot for all continuous values in file ","ff4535ee":"**Since the residual plots of Random Forest regressor and XGBoost regressor do not show a conical divergence therefore we can conclude that they are suitable model for the predicting in the above distribution of data**","f9b4eebd":"No data cleaning is required since no Null values are found!","6feed947":"## 4. Weather","0adb8df1":"**Since the residual plots show a conical divergence therefore we can conclude that Linear Regression is definitely not a suitable model for the predicting in the above distribution of data**","73aa1ccc":"### Using polynomial on the dataset","f27b4a59":"### 5.b. Day","daf3e51b":"## Exporting output to csv","1e81a266":"We can see that in the final graph there are two prominent peaks.\n1. At 8 a.m\n2. At 5 p.m\nWhere as the trend of casual is mostly the same throughout the day. \n\n**From this we can conclude that the registered are mostly people going on their jobs which explains the peaks at the start and end of office hours. Clearly these people would have a more definite and predictible schedule and are therefore more likely to be registered.** In order to test this hypothesis we plot some more graphs.","ed887d17":"First we have to separate the individual date and time for each data point into hour,day,month and year.","aaaf91fc":"### Reading the test file","abc39702":"Training set will be the same for both the models.","b8c43189":"## 1. Season","f56768c9":"# Preparing training and testing sets","22598f04":"## Predicting the output over test set","44f98f27":"# One Hot Encoding for each of the categorical data columns and removing unnecesary ones","09d35512":"Therefore what I will attempt to do is make two separate models for the casual and the registerd training them separately and then adding the result to get the count.","fa78ca7c":"**The sudden periodic changes between the differrent regions is due to the missing data.These are the regions in which the regions we have to predict the result.**","efc0f30e":"### 1. Training set","3fffae51":"## 2. Weather ","c2db0fd2":"### Retraining the decision tree over the whole dataset for submission.","78e9ccdb":"## Removing unnecessary columns","a3c69369":"### 5.c. Month","54f20260":"We can therefore conclude that the XGBoost Model works best for predicting casual.","a4adf91d":"### 2. Training set","3065b840":"** If you like my notebook, please upvote my work!**\n\n**If you use parts of this notebook in your scripts\/notebooks, giving some kind of credit for instance link back to this notebook would be very much appreciated. Thanks in advance! :) **\n","dff8c820":"## Processing of the test file","c075b74b":"### The conclusions drawn are:\n1. We can see that temp and atemp have a very strong positive correlation therefore we can use drop atemp as a variable without any loss of information. \n\n2. We can infer from the correlaton matrix and lineplots that windspeed has no significant correlation with the casual,registered or count which we wish to predict so we can remove that","f131ae2c":"### 5.d. Year ","886d4506":"# Data visualization:","71ec28a3":"## 4.Month","5abb5b9b":"## 5. Date and Time","b10e9e72":"**Since we know that the output should never be less than 1, replace all negative values with 1.**","41d212bc":"## Using different models for registered","ff6be34a":"# Loading the training dataset","15fa4e25":"## Using different models for casual ","771c3f30":"# Checking for null values","01961d9b":"We can observe that on the days of saturday and sunday,there is a surge in the demand. This makes sense as these days are holidays for most of the poeple which results in higher people commuting (probably for leisure activities).","9e6961eb":"### Defining a custom scorer function for the models"}}