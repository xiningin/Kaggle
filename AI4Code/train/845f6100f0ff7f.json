{"cell_type":{"498b5748":"code","39839a4b":"code","96f5e8de":"code","2a0710fb":"code","514c0d35":"code","4793f914":"code","1ce69e7b":"code","aeba48ac":"code","836f1a63":"markdown","57319c72":"markdown","2a522456":"markdown","f13c386e":"markdown","1fabc3da":"markdown","ff6b42b3":"markdown","5a06a4ea":"markdown"},"source":{"498b5748":"import numpy as np\nimport pandas as pd","39839a4b":"train_dtypes_dict = {\n    \"row_id\": \"int64\",\n    \"timestamp\": \"int64\",\n    \"user_id\": \"int32\",\n    \"content_id\": \"int16\",\n    \"content_type_id\": \"int8\",\n    #\"task_container_id\": \"int16\",\n    #\"user_answer\": \"int8\",\n    \"answered_correctly\": \"int8\",\n    #\"prior_question_elapsed_time\": \"float32\", \n    #\"prior_question_had_explanation\": \"boolean\"\n}\n\ndata = pd.read_csv(\"..\/input\/riiid-test-answer-prediction\/train.csv\",\n                         nrows=10**5, #how many rows to read\n                         usecols = train_dtypes_dict.keys(),\n                         dtype=train_dtypes_dict,\n                        )","96f5e8de":"data_q = data[data.content_type_id == 0]\ndata_q.head()","2a0710fb":"users_i_counts = data_q.user_id.value_counts()\nuser_list = users_i_counts.keys()\nprint(user_list[:5])\nprint(users_i_counts.head())","514c0d35":"user_num = 2 #control how many user to train\nvalid_num = 2 #control how many valid data to keep\ntrain_data = pd.concat([data_q[data_q.user_id==u][:-valid_num] for u in user_list[:user_num]], axis=0)\nvalid_data = pd.concat([data_q[data_q.user_id==u][-valid_num:] for u in user_list[:user_num]], axis=0)","4793f914":"train_data","1ce69e7b":"valid_data","aeba48ac":"train_data[7472:7476]","836f1a63":"Choose how many users you want to train depending on their interaction counts. For example, if you want interaction counts greater than 6000, you can choose the first two users in user_list. And valid_num below controls how many valid data you want.","57319c72":"Choose question type interaction only if you want.","2a522456":"Get users and their interaction counts","f13c386e":"Load train.csv","1fabc3da":"As the train data is complete, and interactions of users are arranged chronologically. Unlike totally shuffle, I thought it would be one way to split train\/valid data userwise as follows:","ff6b42b3":"So as you can see, valid data always come after train data. It's a time-aware userwise train-valid-split method.","5a06a4ea":"Check where different users separate in train_data"}}