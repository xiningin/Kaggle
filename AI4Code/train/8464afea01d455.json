{"cell_type":{"f60921f6":"code","12dc5006":"code","663eb563":"code","9a8d2866":"code","8f977210":"code","8636d90b":"code","c728fe07":"code","e7791d93":"code","12420924":"code","4fe1c51e":"code","bd74cdc9":"code","7add1f0b":"code","31f119da":"code","eeb8806f":"markdown"},"source":{"f60921f6":"! pip install openpyxl\n! pip install lifetimes","12dc5006":"import datetime as dt\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom lifetimes import BetaGeoFitter\nfrom lifetimes import GammaGammaFitter\nfrom lifetimes.plotting import plot_period_transactions\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')","663eb563":"df = pd.read_excel('\/kaggle\/input\/online-retail\/online_retail.xlsx', sheet_name=\"Year 2010-2011\", engine='openpyxl')","9a8d2866":"# Analysis for United Kingdom\n\ndf=df[df[\"Country\"]==\"United Kingdom\"]","8f977210":"#########################\n# Pre Processing\n#########################\n\ndef outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\n\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n\ndf.dropna(inplace=True)\ndf = df[~df[\"Invoice\"].str.contains(\"C\", na=False)]\ndf = df[df[\"Quantity\"] > 0]\n\nreplace_with_thresholds(df, \"Quantity\")\nreplace_with_thresholds(df, \"Price\")\ndf.describe().T\n\ndf[\"TotalPrice\"] = df[\"Quantity\"] * df[\"Price\"]\n\ntoday_date = dt.datetime(2011, 12, 11)\n\ndf.head()","8636d90b":"#########################\n# Preparing Dataset\n#########################\n\n# Recency: How recently a customer has made a purchase\n# Frequency: How often a customer makes a purchase\n# Monetary Value: How much money a customer spends on purchases\n\ncltv_df = df.groupby('Customer ID').agg({'InvoiceDate': [lambda date: (date.max() - date.min()).days,\n                                                         lambda date: (today_date - date.min()).days],\n                                        'Invoice': lambda num: num.nunique(),\n                                        'TotalPrice': lambda TotalPrice: TotalPrice.sum()})\n\ncltv_df.columns = cltv_df.columns.droplevel(0)\ncltv_df.columns = ['recency', 'T', 'frequency', 'monetary']\n\ncltv_df[\"monetary\"] = cltv_df[\"monetary\"] \/ cltv_df[\"frequency\"]\n\ncltv_df = cltv_df[cltv_df[\"monetary\"] > 0]\n\ncltv_df.head()","c728fe07":"# Eecency and T value is converted to \"Weekly\" \ncltv_df[\"recency\"] = cltv_df[\"recency\"] \/ 7\ncltv_df[\"T\"] = cltv_df[\"T\"] \/ 7","e7791d93":"# If there is lower 1 transaction value, then they are not selected: \ncltv_df = cltv_df[(cltv_df['frequency'] > 1)]","12420924":"bgf = BetaGeoFitter(penalizer_coef=0.001)\n\nbgf.fit(cltv_df['frequency'],\n        cltv_df['recency'],\n        cltv_df['T'])\n\n# 1 haftal\u0131k beklenen transaction\ncltv_df[\"expected_purc_1_week\"] = bgf.predict(1,\n                                              cltv_df['frequency'],\n                                              cltv_df['recency'],\n                                              cltv_df['T'])","4fe1c51e":"# For one Monthly, Expcexted Purchase Transactions count\ncltv_df[\"expected_purc_1_month\"] = bgf.predict(4,\n                                               cltv_df['frequency'],\n                                               cltv_df['recency'],\n                                               cltv_df['T'])","bd74cdc9":"# Expected_average_profit for one customer:\n\nggf = GammaGammaFitter(penalizer_coef=0.01)\nggf.fit(cltv_df['frequency'], cltv_df['monetary'])\n\ncltv_df[\"expected_average_profit\"] = ggf.conditional_expected_average_profit(cltv_df['frequency'],\n                                                                             cltv_df['monetary'])\n\ncltv_df.head()","7add1f0b":"# Customer Lifetime Value: for 6 Month:\ncltv_6 = ggf.customer_lifetime_value(bgf,\n                                   cltv_df['frequency'],\n                                   cltv_df['recency'],\n                                   cltv_df['T'],\n                                   cltv_df['monetary'],\n                                   time=6,  # 6 Month\n                                   freq=\"W\",  # T'nin frekans bilgisi.\n                                   discount_rate=0.01)\n\ncltv_6 = cltv_6.reset_index()","31f119da":"# Customer Lifetime Value:\ncltv_6.head()","eeb8806f":"## Customer Lifetime Value ~ CLTV \n\n**It is the present value of the future cash flows or the value of business attributed to the customer during his or her entire relationship with the company. Description: CLTV is the value a customer contributes to your business over the entire lifetime at your company.**"}}