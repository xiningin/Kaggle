{"cell_type":{"78349ee7":"code","c51ae264":"code","d8d1819f":"code","d6c2f6cd":"code","46e05303":"code","43282e2a":"code","f5240164":"code","81f2e46b":"code","adf60775":"code","d8bf98ee":"code","fa55ddd7":"code","a5a41d55":"code","8cc48b23":"code","ec9073dc":"code","8292b277":"code","c9066453":"code","c04038cb":"code","11d8fe18":"code","1a122458":"markdown","1fd9bc11":"markdown","d1f2cbad":"markdown"},"source":{"78349ee7":"\"\"\"\n# variable descriptions\ndatetime - hourly date + timestamp  \nseason -  1 = spring, 2 = summer, 3 = fall, 4 = winter \nholiday - whether the day is considered a holiday\nworkingday - whether the day is neither a weekend nor holiday\nweather - 1: Clear, Few clouds, Partly cloudy, Partly cloudy\n2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog \ntemp - temperature in Celsius\natemp - \"feels like\" temperature in Celsius\nhumidity - relative humidity\nwindspeed - wind speed\ncasual - number of non-registered user rentals initiated\nregistered - number of registered user rentals initiated\ncount - number of total rentals\n\n# submission\ndatetime,count\n2011-01-20 00:00:00,0\n\"\"\"","c51ae264":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d8d1819f":"# load libraries\nimport numpy as np\nimport pandas as pd\nimport warnings\nimport seaborn as sn\nimport datetime\nimport matplotlib.pyplot as plt\nimport missingno as msno\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n%matplotlib inline","d6c2f6cd":"# load data\ntrain_df = pd.read_csv(\"..\/input\/bike-sharing-demand\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/bike-sharing-demand\/test.csv\")","46e05303":"# shape of data\ntrain_df.shape","43282e2a":"# get the head of data\ntrain_df.head()","f5240164":"# get the summary of data types and count of null values\ntrain_df.info()","81f2e46b":"# process data \ntrain_df['date'] = train_df.datetime.apply(lambda x : x.split()[0]) # date 2011-01-01\ntrain_df['hour'] = train_df.datetime.apply(lambda x : x.split()[1].split(\":\")[0]) # hour 00~\n# get the weekday from (2010, 52, 6) >> the 2nd one\ntrain_df['weekday'] = train_df['date'].apply(lambda x : datetime.date([int(x) for x in x.split('-')][0],[int(x) for x in x.split('-')][1],[int(x) for x in x.split('-')][2]).isocalendar()[1])\ntrain_df['month'] = train_df['date'].apply(lambda x : x.split('-')[1]) # month 01~12\ntrain_df['season'] = train_df.season.map({1: \"Spring\", 2 : \"Summer\", 3 : \"Fall\", 4 :\"Winter\" })\ntrain_df[\"weather\"] = train_df.weather.map({1: \" Clear + Few clouds + Partly cloudy + Partly cloudy\",\\\n                                        2 : \" Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist \", \\\n                                        3 : \" Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\", \\\n                                        4 :\" Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog \" })\n","adf60775":"# get head from processed data\ntrain_df.head(2)","d8bf98ee":"# category list\ncategoryVariableList = [\"season\",\"holiday\",\"workingday\",\"weather\",\"hour\",\"weekday\",\"month\"]\n# set data type\nfor var in categoryVariableList:\n    train_df[var] = train_df[var].astype(\"category\")","fa55ddd7":"# axis 1 >> drop the column\ntrain_df  = train_df.drop([\"datetime\"],axis=1) ","a5a41d55":"# check data type count\npd.DataFrame(train_df.dtypes.value_counts())","8cc48b23":"train_df.head(1)","ec9073dc":"# reset index\npd.DataFrame(train_df.dtypes.value_counts()).reset_index()","8292b277":"# rename columns\ndataTypeDf = pd.DataFrame(train_df.dtypes.astype(str).value_counts()).reset_index().rename(columns={\"index\":\"variableType\",0:\"count\"})","c9066453":"dataTypeDf","c04038cb":"# Q1. to include multiple graphs >> use subplots ? & ax?? and draw barplot\nfig,ax = plt.subplots()\nfig.set_size_inches(12,5)\nsn.barplot(data=dataTypeDf,x=\"variableType\",y=\"count\",ax=ax)\nax.set(xlabel='variableType', ylabel='Count',title=\"Variables DataType Count\")","11d8fe18":"# visualize missing values\nmsno.matrix(train_df,figsize=(12,5)) # train_df.shape = (10886, 12)","1a122458":"# Outlier Analysis","1fd9bc11":"# Visualize Data","d1f2cbad":"# Preprocess Data"}}