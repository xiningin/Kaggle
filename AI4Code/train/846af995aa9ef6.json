{"cell_type":{"a716f3dc":"code","4a15432f":"code","39aa3f57":"code","6a9c3862":"code","11e7c6d9":"code","df5c270f":"code","f516e7e3":"code","ca4964a4":"code","20e8fcf4":"code","22043e3f":"code","9b4216d9":"code","1a45de2f":"code","63475b60":"code","9b50b39c":"code","1b8be691":"code","ed363a75":"code","b0cf1518":"code","567d91e5":"code","19ef8247":"code","dcbc8756":"code","179141d4":"code","96f729d6":"markdown","a48849cb":"markdown","f4463b7e":"markdown","c0ad1c78":"markdown","b8fa08de":"markdown","192790f8":"markdown","9d066123":"markdown","95be5911":"markdown","005c2992":"markdown","3f00d331":"markdown","abb0f431":"markdown","778a9ccd":"markdown","3b13b1f5":"markdown","f7c96321":"markdown","e4e4a553":"markdown"},"source":{"a716f3dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4a15432f":"#Import all the necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\nimport scipy.stats as stats\nfrom sklearn.preprocessing import LabelEncoder\nimport copy","39aa3f57":"sns.set() #setting the default seaborn style for our plots","6a9c3862":"df = pd.read_csv('\/kaggle\/input\/ushealthinsurancedataset\/insurance.csv')\ndf.head()","11e7c6d9":"df.info()  #info about the data","df5c270f":"df.isna().apply(pd.value_counts)   #null value check","f516e7e3":"df.describe().T","ca4964a4":"#Plots to see the distribution of the continuous features individually\n\nplt.figure(figsize= (20,15))\nplt.subplot(3,3,1)\nplt.hist(df.bmi, color='lightblue', edgecolor = 'black', alpha = 0.7)\nplt.xlabel('bmi')\n\nplt.subplot(3,3,2)\nplt.hist(df.age, color='lightblue', edgecolor = 'black', alpha = 0.7)\nplt.xlabel('age')\n\nplt.subplot(3,3,3)\nplt.hist(df.charges, color='lightblue', edgecolor = 'black', alpha = 0.7)\nplt.xlabel('charges')\n\nplt.show()","20e8fcf4":"Skewness = pd.DataFrame({'Skewness' : [stats.skew(df.bmi),stats.skew(df.age),stats.skew(df.charges)]},\n                        index=['bmi','age','charges'])  # Measure the skeweness of the required columns\nSkewness","22043e3f":"plt.figure(figsize= (20,15))\nplt.subplot(3,1,1)\nsns.boxplot(x= df.bmi, color='lightblue')\n\nplt.subplot(3,1,2)\nsns.boxplot(x= df.age, color='lightblue')\n\nplt.subplot(3,1,3)\nsns.boxplot(x= df.charges, color='lightblue')\n\nplt.show()","9b4216d9":"plt.figure(figsize=(20,25))\n\n\nx = df.smoker.value_counts().index    #Values for x-axis\ny = [df['smoker'].value_counts()[i] for i in x]   # Count of each class on y-axis\n\nplt.subplot(4,2,1)\nplt.bar(x,y, align='center',color = 'lightblue',edgecolor = 'black',alpha = 0.7)  #plot a bar chart\nplt.xlabel('Smoker?')\nplt.ylabel('Count ')\nplt.title('Smoker distribution')\n\nx1 = df.sex.value_counts().index    #Values for x-axis\ny1 = [df['sex'].value_counts()[j] for j in x1]   # Count of each class on y-axis\n\nplt.subplot(4,2,2)\nplt.bar(x1,y1, align='center',color = 'lightblue',edgecolor = 'black',alpha = 0.7)  #plot a bar chart\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.title('Gender distribution')\n\nx2 = df.region.value_counts().index    #Values for x-axis\ny2 = [df['region'].value_counts()[k] for k in x2]   # Count of each class on y-axis\n\nplt.subplot(4,2,3)\nplt.bar(x2,y2, align='center',color = 'lightblue',edgecolor = 'black',alpha = 0.7)  #plot a bar chart\nplt.xlabel('Region')\nplt.ylabel('Count ')\nplt.title(\"Regions' distribution\")\n\nx3 = df.children.value_counts().index    #Values for x-axis\ny3 = [df['children'].value_counts()[l] for l in x3]   # Count of each class on y-axis\n\nplt.subplot(4,2,4)\nplt.bar(x3,y3, align='center',color = 'lightblue',edgecolor = 'black',alpha = 0.7)  #plot a bar chart\nplt.xlabel('No. of children')\nplt.ylabel('Count ')\nplt.title(\"Children distribution\")\n\nplt.show()\n","1a45de2f":"#Label encoding the variables before doing a pairplot because pairplot ignores strings\ndf_encoded = copy.deepcopy(df)\ndf_encoded.loc[:,['sex', 'smoker', 'region']] = df_encoded.loc[:,['sex', 'smoker', 'region']].apply(LabelEncoder().fit_transform) \n\nsns.pairplot(df_encoded)  #pairplot\nplt.show()","63475b60":"df.smoker.value_counts()","9b50b39c":"#Scatter plot to look for visual evidence of dependency between attributes smoker and charges accross different ages\nplt.figure(figsize=(8,6))\nsns.scatterplot(df.age, df.charges,hue=df.smoker,palette= ['red','green'] ,alpha=0.6)\nplt.show()","1b8be691":"# T-test to check dependency of smoking on charges\nHo = \"Charges of smoker and non-smoker are same\"   # Stating the Null Hypothesis\nHa = \"Charges of smoker and non-smoker are not the same\"   # Stating the Alternate Hypothesis\n\nx = np.array(df[df.smoker == 'yes'].charges)  # Selecting charges corresponding to smokers as an array\ny = np.array(df[df.smoker == 'no'].charges) # Selecting charges corresponding to non-smokers as an array\n\nt, p_value  = stats.ttest_ind(x,y, axis = 0)  #Performing an Independent t-test\n\nif p_value < 0.05:  # Setting our significance level at 5%\n    print(f'{Ha} as the p_value ({p_value}) < 0.05')\nelse:\n    print(f'{Ho} as the p_value ({p_value}) > 0.05')","ed363a75":"df.sex.value_counts()   #Checking the distribution of males and females","b0cf1518":"plt.figure(figsize=(8,6))\nsns.scatterplot(df.age, df.charges,hue=df.sex,palette= ['pink','lightblue'] )\nplt.show()","567d91e5":"# T-test to check dependency of bmi on gender\nHo = \"Gender has no effect on bmi\"   # Stating the Null Hypothesis\nHa = \"Gender has an effect on bmi\"   # Stating the Alternate Hypothesis\n\nx = np.array(df[df.sex == 'male'].bmi)  # Selecting bmi values corresponding to males as an array\ny = np.array(df[df.sex == 'female'].bmi) # Selecting bmi values corresponding to females as an array\n\nt, p_value  = stats.ttest_ind(x,y, axis = 0)  #Performing an Independent t-test\n\nif p_value < 0.05:  # Setting our significance level at 5%\n    print(f'{Ha} as the p_value ({p_value.round()}) < 0.05')\nelse:\n    print(f'{Ho} as the p_value ({p_value.round(3)}) > 0.05')","19ef8247":"# Chi_square test to check if smoking habits are different for different genders\nHo = \"Gender has no effect on smoking habits\"   # Stating the Null Hypothesis\nHa = \"Gender has an effect on smoking habits\"   # Stating the Alternate Hypothesis\n\ncrosstab = pd.crosstab(df['sex'],df['smoker'])  # Contingency table of sex and smoker attributes\n\nchi, p_value, dof, expected =  stats.chi2_contingency(crosstab)\n\nif p_value < 0.05:  # Setting our significance level at 5%\n    print(f'{Ha} as the p_value ({p_value.round(3)}) < 0.05')\nelse:\n    print(f'{Ho} as the p_value ({p_value.round(3)}) > 0.05')\ncrosstab","dcbc8756":"# Chi_square test to check if smoking habits are different for people of different regions\nHo = \"Region has no effect on smoking habits\"   # Stating the Null Hypothesis\nHa = \"Region has an effect on smoking habits\"   # Stating the Alternate Hypothesis\n\ncrosstab = pd.crosstab(df['smoker'], df['region'])  # Contingency table of sex and smoker attributes\n\nchi, p_value, dof, expected =  stats.chi2_contingency(crosstab)\n\nif p_value < 0.05:  # Setting our significance level at 5%\n    print(f'{Ha} as the p_value ({p_value.round(3)}) < 0.05')\nelse:\n    print(f'{Ho} as the p_value ({p_value.round(3)}) > 0.05')\ncrosstab","179141d4":"# Test to see if the distributions of bmi values for females having different number of children, are significantly different\n\nHo = \"No. of children has no effect on bmi\"   # Stating the Null Hypothesis\nHa = \"No. of children has an effect on bmi\"   # Stating the Alternate Hypothesis\n\n\nfemale_df = copy.deepcopy(df[df['sex'] == 'female'])\n\nzero = female_df[female_df.children == 0]['bmi']\none = female_df[female_df.children == 1]['bmi']\ntwo = female_df[female_df.children == 2]['bmi']\n\n\nf_stat, p_value = stats.f_oneway(zero,one,two)\n\n\nif p_value < 0.05:  # Setting our significance level at 5%\n    print(f'{Ha} as the p_value ({p_value.round(3)}) < 0.05')\nelse:\n    print(f'{Ho} as the p_value ({p_value.round(3)}) > 0.05')","96f729d6":"- The data has 1338 instances with 7 attributes. 2 integer type, 2 float type and 3 object type(Strings in the column)","a48849cb":"* Smokers seem to claim significantly more money than non-smokers","f4463b7e":"*BMI is not changed by the number of children a women has","c0ad1c78":"* Smoking haboits of people of different regions are similar","b8fa08de":"- There are a lot more non-smokers than there are smokers in the data\n- Instances are distributed evenly accross all regions\n- Gender is also distributed evenly\n- Most instances have less than 2 children and very few have 4 or 5 children","192790f8":"\n- There are no null values in any of the column","9d066123":"- Visually, there is no apparent relation between gender and charges","95be5911":"- The only obvious correlation of 'charges' is with 'smoker'\n- Looks like smokers claimed more money than non-smokers\n- There's an interesting pattern between 'age' and 'charges. Could be because for the same ailment, older people are charged more than the younger ones","005c2992":"* Proportion of smokers in males is significantly different from that of the females","3f00d331":"- bmi has a few extreme values\n- charges as it is highly skewed, there are quiet a lot of extreme values","abb0f431":"- Visually the difference between charges of smokers and charges of non-smokers is apparent","778a9ccd":"- Data looks legit as all the statistics seem reasonable\n- Looking at the age column, data looks representative of the true age distribution of the adult population\n- Very few people have more than 2 children. 75% of the people have 2 or less children\n- The claimed amount is higly skewed as most people would require basic medi-care and only few suffer from diseases which cost more to get rid of","3b13b1f5":"- bmi looks quiet normally distributed\n- Age seems be be distributed quiet uniformly\n- As seen in the previous step, charges are highly skewed","f7c96321":"- Skew of bmi is very less as seen in the previous step\n- age is uniformly distributed and there's hardly any skew\n- charges are highly skewed","e4e4a553":"* bmi of both the genders are identical"}}