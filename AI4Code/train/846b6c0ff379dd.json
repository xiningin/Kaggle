{"cell_type":{"cead7bac":"code","33f019aa":"code","55ee2d3c":"code","3db03900":"code","74b6ae24":"code","c58df039":"code","45bb8962":"code","721bc1de":"code","b59d2a99":"code","af911b57":"code","1b28525d":"code","bace68f8":"code","4069848c":"code","276a8b7a":"code","59013e3c":"code","a36b5528":"code","611cc943":"code","115dd163":"code","82e4e614":"code","5c973307":"code","66477d34":"code","49918647":"code","06be5ec6":"code","87d56d59":"code","0033a3d3":"code","d293b9fe":"code","5a035755":"code","8cb7f0d6":"code","71001bd0":"code","f537a5cd":"code","917bff57":"code","d2343005":"code","a5cb12db":"code","212237ec":"code","fe0c05cb":"code","f86df0c6":"code","56374e8c":"code","2e377bb5":"code","fd5388b3":"code","20b1c9c4":"code","3a506c88":"code","8f7625c3":"code","6c877b1a":"code","56758123":"code","d31286f6":"code","d482469c":"code","40050d5e":"code","b5493054":"code","31140db0":"code","6e331adc":"code","823a3e9a":"code","fe41ddbe":"code","719428cf":"code","834a94dd":"code","2cf15f82":"code","27a1bbdf":"code","857ce817":"code","faa631b1":"code","01e9ee56":"code","83919c7d":"code","448868e9":"code","5e5a6879":"code","0893c085":"code","641f4bf2":"code","8fbf4f61":"code","8ddbf2c8":"code","4f7ad144":"code","cbcaed28":"code","0eef24c1":"code","6f6b9b3d":"code","3d2c549f":"code","2f3caaaf":"code","540bc5bd":"code","f5b90817":"code","87f150f3":"code","1a7ea166":"code","26d6d63a":"code","28b54fbf":"code","14767bfa":"code","63bcd5db":"code","bbc6973e":"code","4439dab0":"code","3f5d6c75":"code","acf63f78":"code","14b0233d":"code","f1e07e33":"code","feb8c48d":"code","e6476d71":"code","c64c55af":"code","84f4a7f8":"code","d3cdb586":"code","6e86c694":"code","e9aac44c":"code","b84037d6":"code","3b01727e":"code","7cf388a5":"code","9d706232":"code","3c076104":"code","9aa56e47":"markdown","ed83f433":"markdown","153e958a":"markdown","da186153":"markdown","34089df6":"markdown","f4087cce":"markdown","b0b4c822":"markdown","c5bdac60":"markdown","eaef61e6":"markdown","505206bd":"markdown","c27066de":"markdown","b8230fcd":"markdown","adce40e0":"markdown","fc5282ca":"markdown","0956e8e4":"markdown","ef1410e0":"markdown","0d70628c":"markdown","aa71c56b":"markdown","800a985b":"markdown","f4c34e58":"markdown","88faf34b":"markdown","8c4e1b87":"markdown","a43577cb":"markdown","719957ab":"markdown","ef785c4b":"markdown","9e46f2af":"markdown","11b6f67f":"markdown","0cb9f889":"markdown","24dd440a":"markdown","6217874e":"markdown","b40edb65":"markdown","1fd7c13c":"markdown","e22bb8ed":"markdown","981329df":"markdown","829bc001":"markdown","e5939190":"markdown","75baf035":"markdown"},"source":{"cead7bac":"import numpy as np\nimport pandas as pd\nfrom scipy.stats import mode\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom datetime import datetime\nimport random\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold\n\nimport warnings\nwarnings.filterwarnings('ignore')","33f019aa":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","55ee2d3c":"matplotlib.rcParams.update({'font.size': 14})","3db03900":"TRAIN_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/test.csv'\nSAMPLE_SUBMISSION_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/sample_submission.csv'","74b6ae24":"train_df = pd.read_csv(TRAIN_DATASET_PATH, sep = ',')\ntrain_df.head()","c58df039":"train_df.tail(3)","45bb8962":"test_df = pd.read_csv(TEST_DATASET_PATH)\ntest_df.tail()","721bc1de":"pd.pivot_table(data=train_df, values='Id', index='Healthcare_1', columns='Helthcare_2', aggfunc='count')","b59d2a99":"train_df.dtypes","af911b57":"train_df['Id'] = train_df['Id'].astype(str)\ntrain_df['Id'].dtype","1b28525d":"train_df['DistrictId'] = train_df['DistrictId'].astype(str)\ntrain_df['DistrictId'].dtype","bace68f8":"Price_mean = round(train_df['Price'].mean(), 2)\nPrice_median = train_df['Price'].median()\nPrice_mode = train_df['Price'].mode()[0]","4069848c":"plt.figure(figsize = (20, 8))\nsns.distplot(train_df['Price'], bins=20)\ny = np.linspace(0, 0.000005, 10)\nplt.plot([Price_mean] * 10, y, label='mean', linewidth=4)\nplt.plot([Price_median] * 10, y, label='median', linewidth=4)\nplt.plot([Price_mode] * 10, y, label='mode', linewidth=4)\n\nplt.title('Distribution of Price')\nplt.legend()\nplt.show()","276a8b7a":"train_df_NUM_FEATURES = train_df.select_dtypes(include=['float64', 'int64'])\ntrain_df_NUM_FEATURES.head()","59013e3c":"train_df.describe()","a36b5528":"train_df.info()","611cc943":"train_df_OBJ_FEATURES = train_df.select_dtypes(include=['object'])\ntrain_df_OBJ_FEATURES.head()","115dd163":"train_df['Ecology_2'].value_counts()","82e4e614":"train_df['Ecology_2'].unique()","5c973307":"train_df['Ecology_3'].value_counts()","66477d34":"train_df['Shops_2'].value_counts()","49918647":"train_df['DistrictId'].value_counts()","06be5ec6":"train_df['DistrictId'].nunique()","87d56d59":"train_df['Rooms'].value_counts()","0033a3d3":"train_df.loc[(train_df['Rooms'] == 0) | (train_df['Rooms'] >= 6)]","d293b9fe":"train_df['Rooms_nan'] = 0\ntrain_df.loc[(train_df['Rooms'] == 0) | (train_df['Rooms'] >= 6), 'Rooms_nan'] = 1\ntrain_df.loc[train_df['Rooms_nan'] == 1]","5a035755":"rooms_on_square = train_df['Rooms'].median()\/train_df['Square'].median()\nrooms_on_square","8cb7f0d6":"train_df.loc[train_df['Rooms_nan'] == 1, 'Rooms'] = round(rooms_on_square*train_df['Square'], 0)\ntrain_df.loc[train_df['Rooms_nan'] == 1]","71001bd0":"train_df['Rooms'].value_counts()","f537a5cd":"train_df['Square'].describe()","917bff57":"train_df['LifeSquare'].describe()","d2343005":"train_df['KitchenSquare'].describe()","a5cb12db":"train_df.loc[train_df['LifeSquare'] > 1000, 'LifeSquare'] = train_df['LifeSquare'].median()","212237ec":"train_df[train_df.LifeSquare > train_df.Square].shape","fe0c05cb":"condition = (train_df.LifeSquare > train_df.Square) \ntrain_df[condition]","f86df0c6":"train_df['LifeSquare_outlier'] = 0\ntrain_df.loc[condition, 'LifeSquare_outlier'] = train_df['Square']\ntrain_df.loc[train_df['LifeSquare_outlier'] != 0, 'Square'] = train_df['LifeSquare']\ntrain_df.loc[train_df['LifeSquare_outlier'] != 0, 'LifeSquare'] = train_df['LifeSquare_outlier'] - train_df['KitchenSquare']\ntrain_df.loc[train_df['LifeSquare_outlier'] != 0, 'LifeSquare_outlier'] = 1\ntrain_df[condition]","56374e8c":"condition = (train_df.LifeSquare > train_df.Square)\ntrain_df[condition]","2e377bb5":"train_df['KitchenSquare'].value_counts()","fd5388b3":"sns.boxplot(train_df['KitchenSquare'], whis=1.5)\nplt.xlabel('KitchenSquare')\nplt.show()","20b1c9c4":"KitchenSquare_max_value = np.quantile(train_df['KitchenSquare'], q=0.975)\nKitchenSquare_max_value","3a506c88":"KitchenSquare_min_value = np.quantile(train_df['KitchenSquare'], q=0.025)\nKitchenSquare_min_value","8f7625c3":"condition_k = (train_df['KitchenSquare'] > KitchenSquare_max_value)\ntrain_df.loc[condition_k, 'KitchenSquare'] = train_df['KitchenSquare'].median()\ntrain_df.loc[train_df['KitchenSquare'] <3, 'KitchenSquare'] = 3","6c877b1a":"train_df['KitchenSquare'].value_counts()","56758123":"train_df['KitchenSquare'].hist();","d31286f6":"train_df['HouseFloor'].value_counts()","d482469c":"train_df['HouseFloor_outlier'] =0\ntrain_df.loc[train_df['HouseFloor'] >= 50, 'HouseFloor_outlier'] = 1\ntrain_df.loc[train_df['Floor'] > train_df['HouseFloor'], 'HouseFloor_outlier'] = 1\ntrain_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1","40050d5e":"train_df.loc[train_df['HouseFloor'] >= 50, 'HouseFloor'] = round(train_df['HouseFloor']\/10, 0)\ntrain_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor'] = train_df['HouseFloor'].median()\n\nfloor_outliers = train_df.loc[train_df['Floor'] > train_df['HouseFloor']].index\ntrain_df.loc[floor_outliers, 'Floor'] = train_df.loc[floor_outliers, 'HouseFloor'].apply(lambda x: random.randint(1, x))\n(train_df['Floor'] > train_df['HouseFloor']).sum()","b5493054":"train_df['HouseYear'].sort_values(ascending=False)","31140db0":"train_df.loc[train_df['HouseYear'] > 2020, 'HouseYear'] = 2020","6e331adc":"train_df_NUM_FEATURES = train_df.select_dtypes(include=['float64', 'int64'])\ntrain_df_NUM_FEATURES.drop('Price', axis=1, inplace=True)\ntrain_df_NUM_FEATURES.drop('HouseYear', axis=1, inplace=True)\ntrain_df_NUM_FEATURES.hist(figsize=(16, 16), bins=20, grid=False)","823a3e9a":"train_df.isna()","fe41ddbe":"train_df.isna().sum()","719428cf":"train_df['LifeSquare_nan'] = 0\ntrain_df","834a94dd":"train_df.loc[train_df['LifeSquare'].isna(), 'LifeSquare_nan'] = 1\ntrain_df[train_df['LifeSquare_nan'] ==1]","2cf15f82":"train_df['LifeSquare'].fillna((train_df['Square']-train_df['KitchenSquare']-3), inplace=True)\ntrain_df[train_df['LifeSquare_nan'] ==1]","27a1bbdf":"train_df['LifeSquare'].isna().sum()","857ce817":"train_df['Healthcare_1'].describe()","faa631b1":"train_df.drop('Healthcare_1', axis=1, inplace=True)","01e9ee56":"train_df.isna().sum()","83919c7d":"class DataPreprocessing:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.medians=None\n        self.rooms_on_square=None\n        self.KitchenSquare_max_value = None\n                \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        self.medians = X.median()\n        self.rooms_on_square = (X['Rooms'].median())\/(X['Square'].median())\n        self.KitchenSquare_max_value = X['KitchenSquare'].quantile(.975)\n            \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n        # Rooms\n        X['Rooms_nan'] = 0\n        X.loc[(X['Rooms'] == 0) | (X['Rooms'] >= 6), 'Rooms_nan'] = 1\n        \n        X.loc[X['Rooms_nan'] == 1, 'Rooms'] = round(self.rooms_on_square*X['Square'], 0)\n        \n        # LifeSquare\n        X.loc[X['LifeSquare'] > 1000, 'LifeSquare'] = self.medians['LifeSquare']\n        \n        condition = (X['LifeSquare'] > X['Square'])\n        X['LifeSquare_outlier'] = 0\n        X.loc[condition, 'LifeSquare_outlier'] = X['Square']\n        X.loc[(X['LifeSquare_outlier'] != 0), 'Square'] = X['LifeSquare']\n        X.loc[(X['LifeSquare_outlier'] != 0), 'LifeSquare'] = X['LifeSquare_outlier'] - X['KitchenSquare'] - 3\n        X.loc[(X['LifeSquare_outlier'] != 0), 'LifeSquare_outlier'] = 1\n\n        X.loc[X['LifeSquare'] > 200, 'LifeSquare'] = X['Square'] - X['KitchenSquare'] - 3\n\n        # KitchenSquare\n        condition_k = X['KitchenSquare'] > self.KitchenSquare_max_value\n        X.loc[condition_k, 'KitchenSquare'] = self.medians['KitchenSquare']\n        X.loc[X['KitchenSquare'] < 3, 'KitchenSquare'] = 3\n        \n        # HouseFloor, Floor\n        X['HouseFloor_outlier'] = 0\n        X.loc[X['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor_outlier'] = 1\n        X.loc[X['HouseFloor'] >= 50, 'HouseFloor_outlier'] = 1\n        \n        X.loc[X['HouseFloor'] == 0, 'HouseFloor'] = self.medians['HouseFloor']\n        X.loc[X['HouseFloor'] >= 50, 'HouseFloor'] = round(X['HouseFloor']\/10, 0)\n        \n        floor_outliers = X.loc[X['Floor'] > X['HouseFloor']].index\n        X.loc[floor_outliers, 'Floor'] = X.loc[floor_outliers, 'HouseFloor']\\\n                                            .apply(lambda x: random.randint(1, x))\n          \n        # HouseYear\n        current_year = datetime.now().year\n        \n        X['HouseYear_outlier'] = 0\n        X.loc[X['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\n        \n        X.loc[X['HouseYear'] > current_year, 'HouseYear'] = current_year\n        \n        # Healthcare_1\n        if 'Healthcare_1' in X.columns:\n            X.drop('Healthcare_1', axis=1, inplace=True)\n            \n        # LifeSquare\n        X['LifeSquare_nan'] = X['LifeSquare'].isna() * 1\n        condition = (X['LifeSquare'].isna()) & \\\n                      (~X['Square'].isna()) & \\\n                      (~X['KitchenSquare'].isna())\n        \n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] - X.loc[condition, 'KitchenSquare'] - 3\n        \n        \n        X.fillna(self.medians, inplace=True)\n        \n        return X","448868e9":"grid = sns.jointplot(train_df['LifeSquare'], train_df['Square'], kind='reg')\ngrid.fig.set_figwidth(8)\ngrid.fig.set_figheight(8)\n\nplt.show()","5e5a6879":"train_df['Life_share'] = train_df['LifeSquare'] \/ train_df['Square'] * 100\ntrain_df.loc[train_df['Life_share'] >100]","0893c085":"binary_to_numbers = {'A': 0, 'B': 1}\ntrain_df['Ecology_2'] = train_df['Ecology_2'].replace(binary_to_numbers)\ntrain_df['Ecology_3'] = train_df['Ecology_3'].replace(binary_to_numbers)\ntrain_df['Shops_2'] = train_df['Shops_2'].replace(binary_to_numbers)","641f4bf2":"District_size = train_df['DistrictId'].value_counts().reset_index().rename(columns={'index': 'DistrictId', 'DistrictId': 'District_size'})\nDistrict_size.head()","8fbf4f61":"train_df = train_df.merge(District_size, on='DistrictId', how='left')\ntrain_df.head()","8ddbf2c8":"(train_df['District_size']>100).value_counts()","4f7ad144":"train_df['IsDistrictLarge'] = (train_df['District_size']>100).astype(int)","cbcaed28":"med_price_by_district = train_df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                            .rename(columns={'Price':'MedPriceByDistrict'})\n\nmed_price_by_district.head()","0eef24c1":"train_df = train_df.merge(med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\ntrain_df.head()","6f6b9b3d":"grid = sns.jointplot(train_df['MedPriceByDistrict'], train_df['Price'], kind='reg')\ngrid.fig.set_figwidth(8)\ngrid.fig.set_figheight(8)\n\nplt.show()","3d2c549f":"train_df['HouseYear'] = train_df['HouseYear'].astype(int)\ntrain_df['HouseYear'].dtype","2f3caaaf":"grid = sns.jointplot(train_df['HouseYear'], train_df['Price'], kind='reg')\ngrid.fig.set_figwidth(8)\ngrid.fig.set_figheight(8)\n\nplt.show()","540bc5bd":"def year_to_cat(X):\n    bins = [0, 1941, 1945, 1980, 1990, 2000, 2010, X['HouseYear'].max()]\n    X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n    \n    X['year_cat'].fillna(-1, inplace=True)\n    return X\n\ndef floor_to_cat(X):\n    bins = [0, 3, 5, 9, 15, X['Floor'].max()]\n    X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n    \n    X['floor_cat'].fillna(-1, inplace=True)\n    return X","f5b90817":"train_df = floor_to_cat(train_df)\ntrain_df = year_to_cat(train_df)\ntrain_df.head()","87f150f3":"med_price_by_floor_year = train_df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByFloorYear'})\nmed_price_by_floor_year.head()","1a7ea166":"train_df = train_df.merge(med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\ntrain_df.head()","26d6d63a":"class FeatureGenerator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n\n    def __init__(self):\n        self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.med_price_by_district = None\n        self.med_price_by_floor_age = None\n        self.house_year_max = None\n        self.floor_max = None\n        self.District_size = None\n        self.med_price_by_shops2_ecology = None\n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        # Binary features\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # DistrictID\n        self.District_size = X['DistrictId'].value_counts().reset_index() \\\n                               .rename(columns={'index':'DistrictId', 'DistrictId':'District_Size'})\n                              \n        #Life_share\n        X['Life_share'] = X['LifeSquare'] \/ X['Square'] * 100\n\n        # Target encoding\n        ## District, Rooms\n        df = X.copy()\n        \n        if y is not None:\n            df['Price'] = y.values\n            \n            self.med_price_by_district = df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                                            .rename(columns={'Price':'MedPriceByDistrict'})\n            \n            self.med_price_by_district_median = self.med_price_by_district['MedPriceByDistrict'].median()\n\n        ## floor, year\n        if y is not None:\n            self.floor_max = df['Floor'].max()\n            self.house_year_max = df['HouseYear'].max()\n            df['Price'] = y.values\n            df = self.floor_to_cat(df)\n            df = self.year_to_cat(df)\n            self.med_price_by_floor_year = df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByFloorYear'})\n            self.med_price_by_floor_year_median = self.med_price_by_floor_year['MedPriceByFloorYear'].median()\n            \n    def transform(self, X):\n        \n        # Binary features\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)  # self.binary_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # DistrictId, IsDistrictLarge\n        X = X.merge(self.District_size, on='DistrictId', how='left')\n        \n        X['new_district'] = 0\n        X.loc[X['District_Size'].isna(), 'new_district'] = 1\n        \n        X['District_Size'].fillna(5, inplace=True)\n        \n        X['IsDistrictLarge'] = (X['District_Size'] > 100).astype(int)\n\n        #Life_share\n        X['Life_share'] = X['LifeSquare'] \/ X['Square'] * 100\n\n        # More categorical features\n        X = self.floor_to_cat(X)  # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 floor_cat\n        X = self.year_to_cat(X)   # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 year_cat\n        \n        # Target encoding\n        if self.med_price_by_district is not None:\n            X = X.merge(self.med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\n            X.fillna(self.med_price_by_district_median, inplace=True)\n\n        #if self.med_price_by_shops_2_ecology is not None:\n            #X = X.merge(self.med_price_by_shops_2_ecology, on=['Ecology_2', 'Ecology_3', 'Shops_2'], how='left')\n            #X.fillna(self.med_price_by_shops_2_ecology_median, inplace=True)\n\n        if self.med_price_by_floor_year is not None:\n            X = X.merge(self.med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\n            X.fillna(self.med_price_by_floor_year_median, inplace=True)\n        \n        return X\n    \n    def floor_to_cat(self, X):\n        bins = [0, 3, 5, 9, 15, self.floor_max]\n        X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n\n        X['floor_cat'].fillna(-1, inplace=True) \n        return X\n     \n    def year_to_cat(self, X):\n        bins = [0, 1941, 1945, 1980, 2000, 2010, self.house_year_max]\n        X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n\n        X['year_cat'].fillna(-1, inplace=True)\n        return X","28b54fbf":"train_df.columns.tolist()","14767bfa":"feature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_2', 'Ecology_3', 'Social_1', 'Social_2', 'Social_3',\n                 'Helthcare_2', 'Shops_1', 'Shops_2']\n\nnew_feature_names = ['Rooms_nan', 'LifeSquare_outlier', 'HouseFloor_outlier', 'HouseYear_outlier', 'LifeSquare_nan', 'District_Size',\n                     'new_district', 'IsDistrictLarge', 'Life_share', 'floor_cat', 'year_cat', 'MedPriceByDistrict', 'MedPriceByFloorYear']\n\ntarget_name = 'Price'","63bcd5db":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)\n\nX = train_df.drop(columns=target_name)\ny = train_df[target_name]","bbc6973e":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=21)","4439dab0":"preprocessor = DataPreprocessing()\npreprocessor.fit(X_train)\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","3f5d6c75":"features_gen = FeatureGenerator()\nfeatures_gen.fit(X_train, y_train)\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ntest_df = features_gen.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","acf63f78":"X_train.info()","14b0233d":"X_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ntest_df = test_df[feature_names + new_feature_names]","f1e07e33":"X_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()","feb8c48d":"from sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nX_train = pd.DataFrame(scaler.fit_transform(X_train))\nX_valid = pd.DataFrame(scaler.transform(X_valid))\ntest_df = pd.DataFrame(scaler.transform(test_df))","e6476d71":"gb_model = GradientBoostingRegressor(criterion='mse',\n                                     max_depth=20,\n                                     min_samples_leaf=24,\n                                     n_estimators=265, \n                                     max_features='sqrt', \n                                     loss='huber', \n                                     learning_rate=0.025,\n                                     random_state=21)\ngb_model.fit(X_train, y_train)","c64c55af":"y_train_preds = gb_model.predict(X_train)\ny_test_preds = gb_model.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","84f4a7f8":"cv_score = cross_val_score(gb_model, X_train, y_train, scoring='r2', cv=KFold(n_splits=3, shuffle=True, random_state=21))\ncv_score","d3cdb586":"cv_score.mean()","6e86c694":"feature_importances = pd.DataFrame(zip(X_train.columns, gb_model.feature_importances_), \n                                   columns=['feature_name', 'importance'])\n\nfeature_importances.sort_values(by='importance', ascending=False)","e9aac44c":"test_df.shape","b84037d6":"test_df","3b01727e":"submit = pd.read_csv(SAMPLE_SUBMISSION_DATASET_PATH, encoding='utf-8')\nsubmit.head()","7cf388a5":"predictions = gb_model.predict(test_df)\npredictions","9d706232":"submit['Price'] = predictions\nsubmit.head()","3c076104":"submit.to_csv('submit.csv', index=False)","9aa56e47":"\u041d\u0430\u0439\u0434\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u0439","ed83f433":"**Square, Lifesquare, KitchenSquare**","153e958a":"**\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","da186153":"**KitchenSquare**","34089df6":"# \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435","f4087cce":"# \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","b0b4c822":"*\u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432*","c5bdac60":"# \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 test \u0438 train","eaef61e6":"# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u044b","505206bd":"**\u0414\u043e\u043b\u044f \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0432 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438**","c27066de":"**\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f**","b8230fcd":"**\u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f**","adce40e0":"# \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","fc5282ca":"**\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435**","0956e8e4":"**HouseYear**","ef1410e0":"\u041f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0438 \u0444\u0430\u0439\u043b\u0430\u043c:","0d70628c":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0433\u0434\u0435 \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0431\u0449\u0435\u0439","aa71c56b":"**Ecology_2, Ecology_3, Shops_2**","800a985b":"Rooms: 8 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u043e\u043c\u043d\u0430\u0442 = 0. \u0415\u0441\u0442\u044c 2 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0441 10 \u043a\u043e\u043c\u043d\u0430\u0442\u0430\u043c\u0438 \u0438 1 \u043e\u0431\u044a\u0435\u043a\u0442 \u0441 19 \u043a\u043e\u043c\u043d\u0430\u0442\u0430\u043c\u0438.","f4c34e58":"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438. ","88faf34b":"**\u0412\u044b\u0432\u043e\u0434\u044b:**\n1. \u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043e\u0431\u0449\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b.\n2.  \u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438 \u043c\u0430\u043a\u0441 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\u044b \u0432 \u0440\u0430\u0437\u044b. \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e Social 3.\n3.  Shops2 - \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 object.\n4.  \u0416\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c, Healthcare_1 - \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438. \n5.  \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e =117. ","8c4e1b87":"**MedPriceByFloorYear**\t","a43577cb":"*\u041d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438*","719957ab":"**HouseFloor, Floor**","ef785c4b":"**\u041e\u0446\u0435\u043d\u043a\u0430**","9e46f2af":"**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438**\n\n\u0426\u0435\u043b\u044c - \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0446\u0435\u043d\u044b \u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b.","11b6f67f":"**LifeSquare**","0cb9f889":"\u041a\u0432\u0430\u0440\u0442\u0438\u0440\u0430 \u0441 \u043d\u0443\u043b\u0435\u0432\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u043e\u043c\u043d\u0430\u0442, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\u044b =2,377 \u043a\u0432 \u043c - \u044f\u0432\u043d\u044b\u0439 \u0432\u044b\u0431\u0440\u043e\u0441.","24dd440a":"**\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435**","6217874e":"**MedPriceByDistrict**","b40edb65":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","1fd7c13c":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","e22bb8ed":"*\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432*","981329df":"# \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445","829bc001":"*\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432*","e5939190":"**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**\n\nData fields\n* Id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* DistrictId - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* Square - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* KitchenSquare - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* Floor - \u044d\u0442\u0430\u0436\n* HouseFloor - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* HouseYear - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* Ecology_1, Ecology_2, Ecology_3 - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Social_1, Social_2, Social_3 - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Healthcare_1, Helthcare_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* Shops_1, Shops_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* Price - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n\n\u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435. \u041f\u043e \u0441\u0440\u043e\u043a\u0430\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f, \u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c - \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.","75baf035":"**\u041a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 - \u0434\u0438\u0441\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435**"}}