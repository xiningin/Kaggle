{"cell_type":{"fa9d58d6":"code","5551bc54":"code","f60eb03e":"code","f0e9b9fa":"code","6965ed76":"code","f48f0b5d":"code","92d4f0f9":"code","35464666":"code","20bb1548":"code","04f0b904":"code","86779026":"code","af33b522":"code","f47ff209":"code","638921f4":"code","424b8dd6":"code","c8afd5f4":"code","aff6ad15":"code","754e647f":"code","abaf707b":"code","7fdef234":"code","0d307b3c":"code","038eb0b2":"code","0642aec4":"code","3e587a35":"code","107904fe":"code","61b46aa9":"code","6bf1a31e":"code","9a11541b":"code","bd838fbb":"code","210059b2":"code","df744ef2":"code","afdfc5b3":"code","0f4cda41":"code","286e9977":"code","afa1f106":"code","db7d2371":"code","c7fd4dd6":"markdown","cc76cf24":"markdown","9bbb77ae":"markdown","99f2c711":"markdown","03f7e575":"markdown"},"source":{"fa9d58d6":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport copy","5551bc54":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f60eb03e":"test_features = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\ntrain_features = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\ntrain_targets_scored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')\ntrain_targets_nonscored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_nonscored.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/lish-moa\/sample_submission.csv')","f0e9b9fa":"train_features.head()","6965ed76":"train_targets_scored.head()","f48f0b5d":"print(\"# of common columns : \",len(set(sample_submission.columns.values.tolist()) & set(train_targets_scored.columns.values.tolist())))\nprint(\"# of columns in sample submission : \", len(sample_submission.columns.values.tolist()))","92d4f0f9":"print(train_features.shape)\nprint(train_targets_scored.shape)","35464666":"train_features.describe()","20bb1548":"train_targets_scored.describe()","04f0b904":"GENE = [col for col in train_features.columns if col.startswith('g-')]\nlen(GENE)","86779026":"CELL = [col for col in train_features.columns if col.startswith('c-')]\nlen(CELL)","af33b522":"plt.figure(figsize=(16,16))\nsns.set_style(\"whitegrid\")\n\ngene_choice = np.random.choice(len(GENE), 16)\nfor i, col in enumerate(gene_choice):\n    plt.subplot(4, 4, i+1)\n    plt.hist(train_features.loc[:, GENE[col]],bins=100, color='orange')\n    plt.title(GENE[col])","f47ff209":"plt.figure(figsize=(16,16))\nsns.set_style(\"whitegrid\")\n\ncell_choice = np.random.choice(len(CELL), 16)\nfor i, col in enumerate(cell_choice):\n    plt.subplot(4, 4, i+1)\n    plt.hist(train_features.loc[:, CELL[col]],bins=100, color='green')\n    plt.title(CELL[col])","638921f4":"train = pd.merge(train_features, train_targets_scored, on='sig_id')","424b8dd6":"train.head()","c8afd5f4":"target_columns = train_targets_scored.columns","aff6ad15":"sns.distplot(train_targets_scored[[col for col in train_targets_scored.columns if col not in ['sig_id']]\\\n                    ].sum(axis=1))","754e647f":"train_targets_scored[\\\n                     [col for col in train_targets_scored.columns if col not in ['sig_id']]\\\n                    ].sum(axis=1)\\\n                    .unique()","abaf707b":"train.head()","7fdef234":"# train.values[0][876:]","0d307b3c":"X_train = []\nX_train_columns = train.columns\n\nfor v in train.values:\n    info = v[:876]\n    binary = v[876:]\n    index = [k for k, i in enumerate(binary) if i==1]\n    \n    for i in index:\n        for k in range(len(binary)):\n            if k==i:\n#                 binary_transformed = list(copy.copy(binary))\n#                 binary_transformed[i] = 0\n                X_train.append(list(info) + [X_train_columns[876+k]])\n\nX_train = pd.DataFrame(X_train, columns=train_features.columns.tolist() + ['pred'])\n# X_train.columns = X_train_columns.tolist() + ['pred']","038eb0b2":"X_train.head()","0642aec4":"X_train.shape","3e587a35":"X_test = test_features\ny_train = X_train[['pred']]","107904fe":"y_train.head()","61b46aa9":"len(y_train['pred'].unique().tolist())","6bf1a31e":"X_train","9a11541b":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\n\nX_test['pred'] = -1\ndata = X_train.append(X_test)\n\nfor col in ['cp_type','cp_time','cp_dose']:\n    data.loc[:, col] = le.fit_transform(data[col])\n    \nX_train = data[:X_train.shape[0]]\nX_test = data[-X_test.shape[0]:]","bd838fbb":"y_train","210059b2":"mapping = {v:k for k,v in enumerate(sample_submission.iloc[:,1:].columns.tolist())}\n# inverse_mapping = {k:v for k,v in enumerate(sample_submission.iloc[:,1:].columns.tolist())}","df744ef2":"y_train['pred'] = y_train['pred'].map(mapping)\ny_train","afdfc5b3":"from catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier","0f4cda41":"cat_features = ['cp_type','cp_time','cp_dose']\n\nmodel = CatBoostClassifier(task_type='GPU')\n\nmodel.fit(X_train.drop(columns=['sig_id','pred']),\\\n          y_train,\\\n          verbose=True,\\\n          cat_features=cat_features)\n","286e9977":"prediction = model.predict_proba(X_test.drop(columns=['sig_id'], axis=1))","afa1f106":"sample_submission.iloc[:, 1:] = prediction","db7d2371":"sample_submission.to_csv('submission.csv',index=False)","c7fd4dd6":"### Number of training examples reduced, as some of the datapoints had no labels at all out of 206 labels","cc76cf24":"# If you like my kernel, do upvote it :)","9bbb77ae":"### We have 23814 training examples with 876 features and 207 columns to predict on [MultiClass]","99f2c711":"### Observation:\n1. In some cases,we have multiple labels per datapoint\n2. Some of the datapoints even have 0\/206 labels.","03f7e575":">  ## Each sig_id can have multiple labels, so here I'll be breaking up my dataframe such that each row has a single label\n "}}