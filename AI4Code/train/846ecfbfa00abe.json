{"cell_type":{"647468e1":"code","7305d518":"code","b9512e82":"code","afa9f6e0":"code","521e303c":"code","32564212":"code","e840fe96":"code","2c854c2b":"code","c7eb1256":"code","e9183b40":"code","797c3a96":"code","515edf17":"code","a5178275":"code","b4910778":"code","afef0c8f":"code","e7feb057":"code","0c413b3e":"code","9ff2a045":"code","90228816":"code","43336e7c":"code","68c90073":"code","8f7ce188":"code","d64b7b8d":"code","07bea7fe":"code","e11fe1b7":"code","e7c29bd6":"code","8db20404":"code","25081328":"code","a6b5567e":"code","15eb4fdd":"code","801996b8":"code","4856abb8":"code","8a419071":"code","5ae626db":"code","a67728ae":"code","8a51869f":"code","4a5492ac":"code","d9ebb960":"code","0ed01b59":"code","620c96bb":"markdown","17b4da82":"markdown","c2c44965":"markdown","6aed643e":"markdown","cbd6ce7c":"markdown","0531e1b8":"markdown","87e2b2c8":"markdown","cb75ac65":"markdown","97a5b899":"markdown","4e9e64ab":"markdown","3bcc91c2":"markdown","1c57e5a4":"markdown","9dd6a7de":"markdown","8d56173d":"markdown","579112da":"markdown","44a1c4d5":"markdown","70e58fd2":"markdown","79969baf":"markdown"},"source":{"647468e1":"data_dir = \"..\/input\/zomato-bangalore-restaurants\/zomato.csv\"","7305d518":"import pandas as pd\n\ndf = pd.read_csv(data_dir)\ndf.head()","b9512e82":"print(\"Number of rows in the dataset \", df.shape[0])\nprint(\"Number of columns in the dataset \", df.shape[1])","afa9f6e0":"df.info()","521e303c":"df.isna().sum()","32564212":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set()\n\ndata = df.isna().sum()\ndata = data[data>0].sort_values()\ndata = data.reset_index()\ndata['percent'] = round((data[0]\/df.shape[0])*100, 3)\nfig = plt.figure(figsize = (10, 5))  \nsns.barplot(x='percent', y='index', data=data, palette='rainbow') \nplt.title(\"Null Values\", fontsize=14)","e840fe96":"df.rate.unique()","2c854c2b":"print(\"Number of restaurants with NEW rating: \", df[df['rate'] == 'NEW'].shape[0])\nprint(\"Number of restaurants with nan rating: \", df[df['rate'].isnull()].shape[0])\nprint(\"Number of restaurants with - rating: \", df[df['rate'] == '-'].shape[0])","c7eb1256":"df[df['rate'] == '-']['votes'].unique()","e9183b40":"df[df['rate'].isnull()]['votes'].unique()","797c3a96":"df[df['rate'] == 'NEW']['votes'].unique()","515edf17":"df['rate'].value_counts().sort_values(ascending=False)","a5178275":"# creating a dataframe without null, '-' and 'NEW' value in 'rate' column\ntmp_df = df[~df['rate'].isnull()]\ntmp_df = tmp_df[(tmp_df['rate'] != \"NEW\") & (tmp_df['rate']!=\"-\")]","b4910778":"tmp_df['rate'].value_counts().sort_values(ascending=False)\nscores = tmp_df.rate.apply(lambda x:x.split('\/')[0].strip())\nscores = [float(x) for x in scores]\nplt.figure(figsize = (10, 5))\nsns.displot(scores, kind='kde')","afef0c8f":"import numpy as np\n\navg = np.mean(scores)\nmed = np.median(scores)\nprint(avg, '|', med)","e7feb057":"df['rate'].fillna(\"3.7\/5\", inplace=True)\ndf['rate'].replace(\"NEW\", \"0.0\/5\", inplace=True)\ndf['rate'].replace(\"-\", \"0.0\/5\", inplace=True)","0c413b3e":"df.rate.unique()","9ff2a045":"# processing the column values to discard \/ and denominator\ndf.rate = df.rate.apply(lambda x:x.split('\/')[0].strip())\ndf = df.astype({'rate' : float})\ndf['rate'].value_counts().sort_values(ascending=False)","90228816":"df.location.unique()","43336e7c":"df = df[~df['location'].isnull()]\nlocation_grp = df.groupby(['location']).agg(['count'])['name'].reset_index()\nlocation_grp.sort_values(by=\"count\", inplace=True, ascending=False)\nfig = plt.figure(figsize = (10, 5))  \nsns.barplot(x=\"location\", y=\"count\", data=location_grp[:25], palette='rainbow')\nplt.xticks(rotation=90)\nplt.tight_layout()","68c90073":"from geopy.geocoders import Nominatim\n\ni = 0\n\ndef findGeocode(city):\n    # try and catch is used to overcome\n    # the exception thrown by geolocator\n    # using geocodertimedout  \n    try:     \n        # Specify the user_agent as your\n        # app name it should not be none\n        geolocator = Nominatim(user_agent=\"app_name\") \n        loc = geolocator.geocode(city)\n        return loc\n    except GeocoderTimedOut:\n        i += 1\n        if i == 5:\n            return None\n        return findGeocode(city)    ","8f7ce188":"location_lat_long = {}\nlocations_unq = df.location.unique()\nfor loc in locations_unq:\n    loc = loc + \", Bangalore\"\n    location = findGeocode(loc)\n    if location is None:\n        print(\"Not found.. \", loc)\n        continue\n    lat = location.latitude\n    long = location.longitude\n    location_lat_long[loc] = [lat, long]\n    print(\"Saved.. \", loc)","d64b7b8d":"df = df[df['location']!=\"Rammurthy Nagar\"]","07bea7fe":"from tqdm import tqdm \n# Appending the data to dataframes\nheatmap_data = []\nfor indx, row in tqdm(df.iterrows(), total=len(df)):\n    if row['location']+\", Bangalore\" in location_lat_long:\n        df.loc[indx, 'latitude'] = location_lat_long[row['location']+\", Bangalore\"][0]\n        df.loc[indx, 'longitude'] = location_lat_long[row['location']+\", Bangalore\"][1]\n        heatmap_data.append([location_lat_long[row['location']+\", Bangalore\"][0], location_lat_long[row['location']+\", Bangalore\"][1]])","e11fe1b7":"import folium\n\n# the given location latitude and longitude are for India map\n# india = folium.Map(location=[20.180862078886562, 78.77642751195584], tiles='openstreetmap', zoom_start=4.5)\nbengaluru = folium.Map(location=[12.972442, 77.580643], tiles='openstreetmap', zoom_start=12.3)","e7c29bd6":"from folium import plugins\n\nplugins.HeatMap(heatmap_data).add_to(bengaluru)","8db20404":"bengaluru","25081328":"import re\n\ndf['location_pr'] = df.location.apply(lambda x:re.sub(\"[0-9]+(st|th|nd|rd) block\", \"\", x.lower()).strip())\nkoramangala_btm = df[(df['location_pr'] == 'btm') | (df['location_pr'] == 'koramangala')]","a6b5567e":"korr = koramangala_btm[koramangala_btm['location_pr'] == 'koramangala']\nbtm = koramangala_btm[koramangala_btm['location_pr'] == 'btm']\n\nkorr_rate_grp = korr.groupby(['rate']).agg({'name':'count'}).reset_index()\nkorr_rate_grp.sort_values(by=\"name\", inplace=True, ascending=False)\nbtm_rate_grp = btm.groupby(['rate']).agg({'name':'count'}).reset_index()\nbtm_rate_grp.sort_values(by=\"name\", inplace=True, ascending=False)\n\nfig = plt.figure(figsize = (10, 5))\nax1 = plt.subplot(2,1,1)\nplt.title('Top 5 ratings of Koramangala V\/S BTM restaurants')\nsns.barplot(x=\"rate\", y=\"name\", data=korr_rate_grp[:5], ax=ax1, palette='rainbow')\nplt.ylabel('count (kor)')\nax2 = plt.subplot(2,1,2)\nsns.barplot(x=\"rate\", y=\"name\", data=btm_rate_grp[:5], ax=ax2, palette='rainbow')\nplt.ylabel('count (btm)')\nplt.show()","15eb4fdd":"loc_rate_grp = df.groupby(['location_pr', 'rate']).agg({'name':'count'}).reset_index()\nloc_rate_grp.sort_values(by=[\"location_pr\", 'name'], inplace=True, ascending=False)\nloc_unq = df.location_pr.unique()\nfor i, loc in enumerate(loc_unq):\n    data = loc_rate_grp[(loc_rate_grp['location_pr'] == loc)]\n    data = data[:5]\n    if data[data.rate > 4].shape[0] > 1:\n        fig = plt.figure(figsize = (5, 2.5))\n        sns.barplot(x=\"rate\", y=\"name\", data=data, palette='rainbow')\n        plt.ylabel(f'count ({loc})')\n        plt.show()","801996b8":"# processing the column to float column for analysis\ndf['approx_cost'] = df['approx_cost(for two people)'].apply(lambda x: float(str(x).replace(\",\", \"\")))","4856abb8":"lavelle_church = df[(df['location_pr'] == 'lavelle road') | (df['location_pr'] == 'church street')]\nfig = plt.figure(figsize = (10, 5))\nax1 = plt.subplot(2,1,1)\nplt.title('Comparisons of prices in Bengaluru v\/s (Lavelle Road & Church Street)')\nsns.boxplot(x=\"approx_cost\", data=df, ax=ax1, palette='rainbow')\nax2 = plt.subplot(2,1,2)\nsns.boxplot(x=\"approx_cost\", y=\"location_pr\", data=lavelle_church, ax=ax2, palette='rainbow')\nplt.show()","8a419071":"fig = plt.figure(figsize = (10, 8))\nexpensive_restaurants = df[df.approx_cost > 2000]\nsns.boxplot(x='approx_cost', y='location_pr', data=expensive_restaurants, palette='rainbow')","5ae626db":"super_expensive_res = df[(df['location_pr'] == 'sankey road') | (df['location_pr'] == 'old airport road') | (df['location_pr'] == 'residency road')]\nsuper_expensive_res = super_expensive_res.groupby(['location_pr', 'rest_type']).agg({'name':'count'}).reset_index()\nsuper_expensive_res.rename(columns={'name':'count'}, inplace=True)\n\n# .barplot(data=super_expensive_res, x='count', y='location_pr', hue='rest_type')\nfig, ax = plt.subplots(nrows=3, ncols=1, figsize = (10, 17))\nsns.barplot(data=super_expensive_res[super_expensive_res.location_pr=='old airport road'], x='count', y='rest_type', ax=ax[0], palette='rainbow')\nax[0].set_xlabel('count @ old airport road')\nsns.barplot(data=super_expensive_res[super_expensive_res.location_pr=='sankey road'], x='count', y='rest_type', ax=ax[1], palette='rainbow')\nax[1].set_xlabel('count @ sankey road')\nsns.barplot(data=super_expensive_res[super_expensive_res.location_pr=='residency road'], x='count', y='rest_type', ax=ax[2], palette='rainbow')\nax[2].set_xlabel('count @ residency road')","a67728ae":"df['listed_in(type)'].value_counts()","8a51869f":"# tmp_df = df[~df['cuisines'].isnull()]\n# new_df = pd.DataFrame(columns=df.columns)\n# i = 0\n# for indx, row in tqdm(tmp_df.iterrows(), total=len(tmp_df)):\n#     cuisines = [x.strip() for x in row['cuisines'].split(\",\")]\n#     for cuisine in cuisines:\n#         new_df.loc[i, :] = row\n#         new_df.loc[i, 'cuisines'] = cuisine\n#         i = i + 1","4a5492ac":"# print(df.shape)\n# print(new_df.shape)","d9ebb960":"res_grp = df.groupby(['name']).agg(['count'])['address'].reset_index()\nres_grp.sort_values(by=\"count\", inplace=True, ascending=False)\nprint(res_grp.shape)","0ed01b59":"fig = plt.figure(figsize = (10, 5))  \nsns.barplot(x=\"name\", y=\"count\", data=res_grp[:50])\nplt.xticks(rotation=90)\nplt.tight_layout()","620c96bb":"#### Looking at the unique values, we can see that we need to perform some processing on this column before we can gather insights from it.","17b4da82":"From the above information, we can see there are \"null\" values present in some of the columns. Let us take a look at their count.","c2c44965":"Finding the latitude and longitude of all the locations for visualization in the map","6aed643e":"We can see that although the number of restaurants in BTM layout is the highest, majority of them are rated average or below by the users. So can we say, **\"quantity does not always guarantee quality?\"**\n\nFor Koramangala, the number of averagely rated restaurants is quite high as well but overall, it does not drops below average. The restaurants are decently rated. \n\nThis makes me curious which location has the highest rated restaurants. Let us find out.","cbd6ce7c":"#### It will not logical to plot the count for 8792 restaurants. So let us take a look at the **top 50** restuarants with many outlets.","0531e1b8":"We can clearly see the high concentration of heatmap in the BTM Layout and Koramangala areas. Let us do some exploration of the restaurants in these two areas.","87e2b2c8":"#### \"dish_liked\" is the column with highest number of null values, more than 50 % followed by \"rate\" column. It wouldn't make sense to keep \"dish_liked\" column in case you are planning to build a recommendation system but since we are only focused on EDA in this notebook, we can let it be.\n#### At that cue, let us look at the values in \"rate\" column.","cb75ac65":"Let us now convert the rate into a numeric column for our use.","97a5b899":"As we may see above most of our restaurants are from \"BTM\" location which is closely followed by Koramangala (across different blocks). Let's try to visualize the same information on geolocation map with the help of heatmaps.","4e9e64ab":"As we may see, **Sankey Road, Old Airport Road & Residency Road** have the most expensive restaurants in Bengaluru.","3bcc91c2":"## Exploratory Data Analysis","1c57e5a4":"#### We can see that Cafe Coffee Day, Onesta, Just Bake, Empire Restaurant are some of the restaurants with large number of outlets.","9dd6a7de":"We can see that **Lavelle Road** tops when it comes to having more high rated restaurants closely followed by **Church Street**. But does high rating mean high prices too? Let's check.  ","8d56173d":"Majority of the restaurants have been assigned a rating 3.7 out of 5 which also includes our imputed data. We will now try to perform some EDA on restaurant data based on the location. Let us start with finding all the unique locations listed in the given dataset.","579112da":"Removing the rows with location \"Rammurthy Nagar\" from dataset as geocoder was not able to find the latitude and longitude of the location.","44a1c4d5":"Well, it does seems that restaurants of **Lavelle Road** fall in the expensive band of the restaurants as compared to rest of the restaurants of Bengaluru where majority of the restaurants fall within the range of Rs. 1000 for two persons.\nHowever, we can see there are far more expensive restaurants in Bengaluru, going as far as Rs 5000 to 6000 for two people. Let us gather some more insights from this data.","70e58fd2":"While the number of restaurants with \"-\" rating is very less and the restaurants with null rating and \"NEW\" rating is considerably high. Let us perform some replacements for the above restaurants. As all the restaurants with \"-\" or \"NEW\" rating has 0 votes, we can give them \"0.0\/5\" rating. On the other hand, for restaurants with null rating, let us impute it with median rating since the data seems to be normally distributed. ","79969baf":"We have NaN values in the dataframe, so lets filter out those rows for EDA."}}