{"cell_type":{"2e32a025":"code","90dc6717":"code","f0143199":"code","07db2462":"code","660e3d30":"code","dc658a83":"code","48121d01":"code","34c3e616":"code","a99cfe07":"code","ac2699f0":"code","9f65065c":"code","e253658c":"code","7322c739":"code","3e05fb05":"code","40556295":"code","e8b95c0a":"code","17d4cbf7":"code","02b2b738":"code","0f6e0314":"code","52789ac8":"code","0c830287":"code","0faa65d5":"code","9da3123e":"code","570e190f":"code","9cb3d018":"code","8aea70c6":"code","9c7be64a":"code","44d84550":"code","1f6a3c04":"code","6cb68d99":"code","cb785c2b":"code","720bd043":"code","3828c56c":"code","83697c53":"code","7b07ff83":"code","4339c408":"markdown","196b591c":"markdown","540a7dfe":"markdown","1d32ddca":"markdown","6a4058b5":"markdown","198a78d9":"markdown","5c8ef2ea":"markdown","ed8c7042":"markdown","344ee724":"markdown","9d479b09":"markdown","5690403f":"markdown","78c181ba":"markdown","f2d86584":"markdown"},"source":{"2e32a025":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport sklearn\nimport seaborn as sns \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90dc6717":"housing=pd.read_csv('..\/input\/california-housing-prices\/housing.csv')","f0143199":"housing.head()","07db2462":"housing.describe()","660e3d30":"housing.info()","dc658a83":"housing[\"ocean_proximity\"].value_counts()","48121d01":"housing.hist(figsize=(20,20))","34c3e616":"housing.corr()","a99cfe07":"plt.figure(figsize=(15,15))\nsns.heatmap(housing.corr(),annot=True)","ac2699f0":"housing=housing.dropna()","9f65065c":"from pandas.plotting import scatter_matrix\n\nattributes = [\"median_house_value\", \"median_income\", \"total_rooms\",\n              \"housing_median_age\"]\nscatter_matrix(housing[attributes], figsize=(12, 8))","e253658c":"import geopandas as gpd\ndata_geodf = gpd.GeoDataFrame(housing, geometry = gpd.points_from_xy(housing.longitude, housing.latitude))\n#Set the coordinate reference system CRS to EPSG 4326\ndata_geodf.crs = {'init': 'epsg:4326'}\n\ndata_geodf.head()","7322c739":"nearbay_df = data_geodf.loc[data_geodf['ocean_proximity'] == 'NEAR BAY']\ninland_df = data_geodf.loc[data_geodf['ocean_proximity'] == 'INLAND']\nnearocean_df = data_geodf.loc[data_geodf['ocean_proximity'] == 'NEAR OCEAN']\nisland_df = data_geodf.loc[data_geodf['ocean_proximity'] == 'ISLAND ']","3e05fb05":"import folium\nfrom folium import Choropleth, Circle, Marker\n\nlatitude = 36.7783\nlongitude = -119.4179\n\nmap2 = folium.Map(location = [latitude, longitude], tiles='cartodbpositron', zoom_start=7)\nfor idx, row in nearbay_df.iterrows():\n    Marker([row['latitude'], row['longitude']]).add_to(map2)\nmap2","40556295":"\nmap3 = folium.Map(location = [latitude, longitude], tiles='cartodbpositron', zoom_start=5)\nfor idx, row in nearocean_df.iterrows():\n    Marker([row['latitude'], row['longitude']]).add_to(map3)\nmap3","e8b95c0a":"import math\nfrom folium.plugins import MarkerCluster\nmap4 = folium.Map(location=[latitude, longitude], tiles='cartodbpositron', zoom_start=5)\n\nmc = MarkerCluster()\n\nfor idx, row in inland_df.iterrows():\n    if not math.isnan(row['longitude']) and not math.isnan(row['latitude']):\n        mc.add_child(Marker([row['latitude'], row['longitude']]))\nmap4.add_child(mc)","17d4cbf7":"housing.groupby('ocean_proximity').mean()\n","02b2b738":"ax=housing.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", alpha=0.4,\n             s=housing[\"population\"]\/100, label=\"population\", figsize=(10,7),\n             c=\"median_house_value\", cmap=plt.get_cmap(\"jet\"), colorbar=True,\n             sharex=False)\nplt.legend()","0f6e0314":"from sklearn.preprocessing import OneHotEncoder\nohe = OneHotEncoder(handle_unknown = 'ignore', sparse = False)\ndf_ohe = pd.DataFrame(ohe.fit_transform(housing[['ocean_proximity']]))","52789ac8":"df_ohe.index = housing.index\ndf_num = housing.drop(['ocean_proximity'], axis=1)\ndf2 = pd.concat([df_num, df_ohe], axis=1)\ndf2.head()","0c830287":"y = df2.median_house_value\nX = df2.drop(columns = 'median_house_value')","0faa65d5":"X.head()","9da3123e":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2)","570e190f":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)","9cb3d018":"y_pred=model.predict(x_test)","8aea70c6":"y_test.mean()","9c7be64a":"y_pred.mean()","44d84550":"from sklearn.metrics import mean_squared_error\n\nhousing_predictions = model.predict(x_train)\nlin_mse = mean_squared_error(y_train, housing_predictions)\nlin_rmse = np.sqrt(lin_mse)\nlin_rmse","1f6a3c04":"from sklearn.metrics import mean_absolute_error\n\nlin_mae = mean_absolute_error(y_train, housing_predictions)\nlin_mae","6cb68d99":"from sklearn.tree import DecisionTreeRegressor\n\nmodel2 = DecisionTreeRegressor(random_state=42)\nmodel2.fit(x_train, y_train)","cb785c2b":"housing_predictions2 = model2.predict(x_train)\ntree_mse = mean_squared_error(y_train, housing_predictions2)\ntree_rmse = np.sqrt(tree_mse)\ntree_rmse","720bd043":"from sklearn.svm import SVR\n\nmodel3 = SVR(kernel=\"linear\")\nmodel3.fit(x_train, y_train)\nhousing_predictions3 = model3.predict(x_train)\nsvm_mse = mean_squared_error(y_train, housing_predictions3)\nsvm_rmse = np.sqrt(svm_mse)\nsvm_rmse","3828c56c":"from sklearn.model_selection import cross_val_score\n\nlin_scores = cross_val_score(model, x_train, y_train,\n                         scoring=\"neg_mean_squared_error\", cv=10)\nlin_rmse_scores = np.sqrt(-lin_scores)","83697c53":"def display_scores(lin_scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard deviation:\", scores.std())\n\ndisplay_scores(lin_rmse_scores)","7b07ff83":"tree_scores = cross_val_score(model, x_train, y_train,\n                         scoring=\"neg_mean_squared_error\", cv=10)\ntree_rmse_scores = np.sqrt(-tree_scores)\ndisplay_scores(tree_rmse_scores)","4339c408":"# ML algorithms","196b591c":"# Geo plots","540a7dfe":"# MAE","1d32ddca":"# MSE for tree","6a4058b5":"# I got some help from this Notebook:\nhttps:\/\/www.kaggle.com\/aditya26sg\/california-house-price-prediction","198a78d9":"# SVR","5c8ef2ea":"# Linear regression","ed8c7042":"# Read and understand the data","344ee724":"# MSE","9d479b09":"# Decision tree","5690403f":"# Cross validation","78c181ba":"# Visualize Population","f2d86584":"#  Using One hot encoding"}}