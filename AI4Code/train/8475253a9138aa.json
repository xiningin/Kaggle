{"cell_type":{"a16ea123":"code","a62d58fc":"code","a98c5460":"code","0d17f07c":"code","086516b9":"code","9a5a6794":"code","9ed636f5":"code","a75e9035":"code","fd124275":"code","08072bd0":"code","102c1f61":"code","381402f7":"code","1a403079":"code","d269bbde":"code","fbad018f":"code","792f7fba":"markdown","cfaef612":"markdown","25e611b7":"markdown","f581a632":"markdown"},"source":{"a16ea123":"import numpy as np\nimport pandas as pd\nimport pydicom\nimport cv2\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras_preprocessing.image.dataframe_iterator import DataFrameIterator\n\nimport os","a62d58fc":"#Built from https:\/\/gist.github.com\/ReemRashwan\/8c92086d3104d01978a16e05ca93a165\nclass DCMFlowFromDataFrame(DataFrameIterator):\n    def __init__(self, *arg, **kwargs):\n        self.white_list_formats = ('dcm')\n        super(DCMFlowFromDataFrame, self).__init__(*arg, **kwargs)\n        self.dataframe = kwargs['dataframe']\n        self.x = self.dataframe[kwargs['x_col']]\n        self.y = self.dataframe[kwargs['y_col']]\n        self.target_size = kwargs['target_size']\n\n    def _get_batches_of_transformed_samples(self, indices_array):\n        batch_x = np.array([self.read_dcm_as_array(dcm_path, self.target_size)\n                            for dcm_path in self.x.iloc[indices_array]])\n\n        batch_y = np.array(self.y.iloc[indices_array].astype(np.uint8))\n\n        if self.image_data_generator is not None:\n            for i, (x, y) in enumerate(zip(batch_x, batch_y)):\n                transform_params = self.image_data_generator.get_random_transform(x.shape)\n                batch_x[i] = self.image_data_generator.apply_transform(x, transform_params)\n\n        return batch_x, batch_y\n\n    @staticmethod\n    def read_dcm_as_array(dcm_path, target_size=(256, 256)):\n        image_array = pydicom.dcmread(dcm_path).pixel_array\n        image_array = cv2.resize(image_array, target_size, interpolation=cv2.INTER_NEAREST)\n        image_array = np.expand_dims(image_array, -1)\n        \n        return image_array","a98c5460":"train = pd.read_csv(\"..\/input\/rsnamiccai-brain-tumor-radiogenomic-valid-images\/valid_trains.csv\", dtype=str)","0d17f07c":"train.head()","086516b9":"train_labels = pd.read_csv('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv',dtype=str)","9a5a6794":"train = train.merge(train_labels,left_on='sub_dir',right_on='BraTS21ID').drop('BraTS21ID',axis=1)","9ed636f5":"train['path'] = np.vectorize(os.path.join)(train['main_dir'], train['sub_dir'], train['mpMRI_scan'], train['file'])","a75e9035":"train = train.drop(['main_dir','sub_dir','mpMRI_scan','file'],axis=1)","fd124275":"sample = train.sample(n=320, random_state=1)","08072bd0":"sample.head()","102c1f61":"def make_model():\n    model = tf.keras.Sequential()\n    model.add(tf.keras.layers.Conv2D(32,(3,3),activation='relu',input_shape=(256,256,1)))\n    model.add(tf.keras.layers.MaxPooling2D((2,2)))\n    model.add(tf.keras.layers.Conv2D(32,(3,3),activation='relu'))\n    model.add(tf.keras.layers.MaxPooling2D((2,2)))\n    model.add(tf.keras.layers.Conv2D(32,(3,3),activation='relu'))\n    model.add(tf.keras.layers.MaxPooling2D((2,2)))\n    model.add(tf.keras.layers.Flatten())\n    model.add(tf.keras.layers.Dense(128,activation='relu'))\n    model.add(tf.keras.layers.Dense(32,activation='relu'))\n    model.add(tf.keras.layers.Dense(1,activation='sigmoid'))\n    \n    model.compile(loss='binary_crossentropy',optimizer=tf.keras.optimizers.Adam(),metrics=[tf.keras.metrics.AUC()])\n    return model","381402f7":"model = make_model()","1a403079":"train_datagen = ImageDataGenerator(rescale=1.\/255)","d269bbde":"train_generator = DCMFlowFromDataFrame(dataframe=sample,\n                                       x_col='path',\n                                       y_col='MGMT_value',\n                                       image_data_generator=train_datagen,\n                                       target_size=(256,256),\n                                       batch_size=32,\n                                       class_mode='binary')","fbad018f":"history = model.fit(\n    train_generator,\n    epochs=1\n)","792f7fba":"### Creating a full df of paths to valid images (i.e. images that are not empty), with the labels of each study","cfaef612":"### Quick Notebook on making a dataframe iterator for training in tensorflow","25e611b7":"### Model without much thought just to test on","f581a632":"### Sample train for some rows to test on"}}