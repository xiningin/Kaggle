{"cell_type":{"a7752baa":"code","f77687b0":"code","a5c2ae26":"code","e8ca88b3":"code","79b952ea":"code","b59e4eca":"code","e80426e1":"code","3d48ad8e":"code","a6e18b0d":"code","a5d48f4c":"code","c91c471d":"code","64726a9b":"code","4632021b":"code","28d1f17d":"code","6491db65":"code","7cf4b50d":"code","7be63728":"code","80755cf9":"markdown","7f70e5d5":"markdown","548b3245":"markdown","d2f37703":"markdown","212e46c9":"markdown","5e34fb1b":"markdown","810d841f":"markdown","0738b23c":"markdown","4b2da208":"markdown","4f493139":"markdown","f9b68fd3":"markdown","2246adc0":"markdown","0ae5cc4f":"markdown","7e0f8496":"markdown","38e35658":"markdown"},"source":{"a7752baa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f77687b0":"import tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator\nimport cv2\nimport matplotlib.pyplot as plt","a5c2ae26":"plt.imshow(cv2.imread(\"\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/dogs\/dog.1599.jpg\"))","e8ca88b3":"plt.imshow(cv2.imread(\"\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/cats\/cat.2245.jpg\"))","79b952ea":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\ntraining_set = train_datagen.flow_from_directory('\/kaggle\/input\/cat-and-dog\/training_set\/training_set',\n                                                 target_size = (64, 64),\n                                                 batch_size = 32,\n                                                 class_mode = 'binary')","b59e4eca":"test_datagen = ImageDataGenerator(rescale = 1.\/255)\ntest_set = test_datagen.flow_from_directory('\/kaggle\/input\/cat-and-dog\/test_set\/test_set',\n                                            target_size = (64, 64),\n                                            batch_size = 32,\n                                            class_mode = 'binary')","e80426e1":"cnn = tf.keras.models.Sequential()","3d48ad8e":"cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))","a6e18b0d":"cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","a5d48f4c":"cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","c91c471d":"cnn.add(tf.keras.layers.Flatten())","64726a9b":"cnn.add(tf.keras.layers.Dense(units=128, activation='relu'))","4632021b":"cnn.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))","28d1f17d":"cnn.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","6491db65":"cnn.fit(x = training_set, validation_data = test_set, epochs = 25)","7cf4b50d":"import numpy as np\nfrom keras.preprocessing import image\ntest_image = image.load_img('\/kaggle\/input\/cat-and-dog\/test_set\/test_set\/dogs\/dog.4226.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n  prediction = 'dog'\nelse:\n  prediction = 'cat'","7be63728":"print(prediction)","80755cf9":"**Step 5 - Output Layer**","7f70e5d5":"**Step 1 - Convolution**","548b3245":"**Step 4 - Full Connection**","d2f37703":"**preprocessing the test set**","212e46c9":"**Initialising the CNN**","5e34fb1b":"**Part 4 - Making a single prediction**","810d841f":"**Step 3 - Flattening**","0738b23c":"**PART-1 DATA PREPROCESSING**","4b2da208":"**Part 3 - Training the CNN**","4f493139":"**Step 2 - Pooling**","f9b68fd3":"**Compiling the CNN**","2246adc0":"**Adding a second convolutional layer**","0ae5cc4f":"**Training the CNN on the Training set and evaluating it on the Test set**","7e0f8496":"**Part 2 - Building the CNN**","38e35658":"****preprocessing the training set****"}}