{"cell_type":{"a34e23db":"code","b170d8aa":"code","99b9710c":"code","9cc9733f":"code","0f4ec9fd":"code","aa67eefe":"code","203dfe19":"code","a761c322":"code","265cf15d":"code","41598ee8":"code","c3e1b6a2":"code","c405ac25":"code","fb497230":"code","2c61725d":"code","3db6a5e0":"code","7222b894":"code","dedab220":"code","aa972d37":"code","71b732f5":"code","6c281ec1":"code","1a0b4fec":"code","67bae542":"code","192864db":"code","95b39bde":"code","92879271":"code","ac437e25":"code","cfee473d":"code","0f0537b3":"code","0f52a5eb":"markdown","9b3b2899":"markdown","126aadfb":"markdown","42ad69c5":"markdown"},"source":{"a34e23db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b170d8aa":"from sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn import preprocessing\n","99b9710c":"# import train.csv\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')","9cc9733f":"train.info()","0f4ec9fd":"cols_o = train.select_dtypes(include='object').columns.tolist()\ncols_o","aa67eefe":"cols_i = train.select_dtypes(exclude='object').columns.tolist()\ncols_i","203dfe19":"train[cols_o]","a761c322":"sel_cols = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Sex', 'Embarked']\ntrain[sel_cols].isnull().any()","265cf15d":"print(train['Age'])\n\n# SimpleImputer\nimp_mean = SimpleImputer(strategy='mean')\nimp_mean.fit(train['Age'].values.reshape(-1, 1))\ntrain['Age'] = imp_mean.transform(train['Age'].values.reshape(-1, 1))\n\nprint(train['Age'])","41598ee8":"print(train[train['Embarked'].isnull()])\n\n# fillna\ntrain['Embarked'] = train['Embarked'].fillna('NA')\nprint(train[train['Embarked'] == 'NA'])\n","c3e1b6a2":"train[sel_cols].isnull().any()","c405ac25":"train[sel_cols]","fb497230":"y = train['Survived']\ny","2c61725d":"X1 = pd.get_dummies(train[sel_cols])\nX1","3db6a5e0":"def model(X, y):\n    rf_model = RandomForestClassifier(random_state=0)\n    rf_model.fit(X, y)\n    y_pred = rf_model.predict(X)\n    print('accuracy_score:',metrics.accuracy_score(y_pred, y))\n","7222b894":"model(X1, y)","dedab220":"X2 = pd.get_dummies(train[sel_cols], drop_first=True)\nX2","aa972d37":"print(X1.columns)\nprint(X2.columns)","71b732f5":"model(X2, y)","6c281ec1":"le = preprocessing.LabelEncoder()\n\nfor col in ['Sex', 'Embarked']:\n    le.fit(train[col])\n    le.transform(train[col].values)\n    train[col] = le.transform(train[col].values)\n\nX3 = train[sel_cols]\nX3","1a0b4fec":"train['Sex'].unique()","67bae542":"train['Embarked'].unique()","192864db":"model(X3, y)","95b39bde":"from sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\n\nclass_models = {\n    'SVM': SVC(kernel='linear', C=1.0, random_state=0),\n    'LogisticRegression': LogisticRegression(penalty='l2', C=100, random_state=0, max_iter=1000),\n    'DecisionTree': DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=0),\n    'knn': KNeighborsClassifier(n_neighbors=5, p=2, metric='minkowski'),\n    'gnb': GaussianNB(),\n    'random_forest': RandomForestClassifier(n_estimators=100, max_depth=5, random_state=0),\n    'ada_boost': AdaBoostClassifier(base_estimator=None, n_estimators=50, learning_rate=1.0, algorithm='SAMME.R', random_state=0),\n    'xgboost': XGBClassifier(max_depth=3, random_state=0),\n    'lightgbm': LGBMClassifier(max_depth=3, random_state=0),\n}\n","92879271":"scores1 = {}\n\nprint('-- get_dummies --')\nfor model_name, model_class in class_models.items():\n    model_class.fit(X1, y)\n    y_pred = model_class.predict(X1)\n    print(model_name, ' accuracy_score:',metrics.accuracy_score(y_pred, y))\n    scores1[model_name] = metrics.accuracy_score(y_pred, y)\n","ac437e25":"scores2 = {}\n\nprint('-- get_dummies(first_drop) --')\nfor model_name, model_class in class_models.items():\n    model_class.fit(X2, y)\n    y_pred = model_class.predict(X2)\n    print(model_name, ' accuracy_score:',metrics.accuracy_score(y_pred, y))\n    scores2[model_name] = metrics.accuracy_score(y_pred, y)\n","cfee473d":"scores3 = {}\n\nprint('-- Label Encoder --')\nfor model_name, model_class in class_models.items():\n    model_class.fit(X3, y)\n    y_pred = model_class.predict(X3)\n    print(model_name, ' accuracy_score:',metrics.accuracy_score(y_pred, y))\n    scores3[model_name] = metrics.accuracy_score(y_pred, y)\n","0f0537b3":"scores_df = pd.concat(\n    [\n        pd.DataFrame(scores1.values(), index=scores1.keys(), columns=['get_dummies']), \n        pd.DataFrame(scores2.values(), index=scores2.keys(), columns=['get_dummies(fd)']),\n        pd.DataFrame(scores3.values(), index=scores3.keys(), columns=['Label Encoder'])\n    ], axis=1)\nscores_df['diff1'] = scores_df['get_dummies'] - scores_df['get_dummies(fd)']\nscores_df['diff2'] = scores_df['get_dummies'] - scores_df['Label Encoder']\nscores_df","0f52a5eb":"## Really?? Is there any affect each ML Model by Encoders?","9b3b2899":"### 1. pd.get_dummies(pandas)","126aadfb":"## How many how to way to encode from object.\n- pd.get_dummies(One Hot Encoding)\n- Label Encoder","42ad69c5":"### 2. Label Encoder(sklearn)"}}