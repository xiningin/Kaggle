{"cell_type":{"fe5da30c":"code","fc502eb8":"code","ecf2040c":"code","89c04457":"code","41dfd271":"code","0011ea0b":"code","bcf43911":"markdown","b97f11b3":"markdown","a19f02fb":"markdown","be769529":"markdown","cc89855e":"markdown"},"source":{"fe5da30c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\nimport requests # \u041b\u0438\u0431\u0430 \u0434\u043b\u044f POST\/GET \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\nimport math\nimport seaborn as sns\nimport statistics\nfrom scipy.interpolate import make_interp_spline\nfrom scipy.ndimage.filters import gaussian_filter1d\nfrom scipy.interpolate import CubicSpline\n\npd.options.mode.chained_assignment = None  # default='warn'","fc502eb8":"df = pd.read_csv('..\/input\/protein-length-vs-half-lives\/data.csv')\ndf","ecf2040c":"df['roundLength'] = 0\nfor i in range(len(df.Length)):\n  df['roundLength'][i] = int(df.Length[i] - (df.Length[i] % 50))","89c04457":"#correlation matrix\nf = plt.figure(figsize=(15, 7))\nplt.matshow(df.corr(), fignum=f.number)\nplt.xticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14, rotation=90)\nplt.yticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=14)","41dfd271":"# Scatter plot with different variations\ndef scatter_full(column_name, axs, max_x=10000, max_y=10000):\n  length = []\n  half_life = []\n  for i in range(len(df['roundLength'])):\n    if not math.isnan(df[column_name][i]):\n      if (df[column_name][i] <= max_y) and (df['Length'][i] <= max_x):\n        length.append(df['Length'][i])\n        half_life.append(df[column_name][i])\n  figure(figsize=(15, 8), dpi=80)\n  df3 = pd.DataFrame({'Length': length, column_name: half_life})\n  axs[2].set_title('Scatter plot for all' )\n  sns.regplot(x='Length', y=column_name, data=df3, scatter_kws={'alpha':0.3, \"color\": \"black\"}, line_kws={\"color\": \"red\"}, fit_reg=False, logx=True, ax=axs[2])\n  \n  df3.sort_values(by=['Length'], inplace=True)\n  df3 = df3.drop_duplicates(subset = [\"Length\"])\n  xnew = np.linspace(df3['Length'].min(), df3['Length'].max(), 10)\n  spl = make_interp_spline(list(df3['Length']), df3[column_name], k=3)  # type: BSpline\n  power_smooth = spl(xnew)\n  axs[2].plot(xnew, power_smooth, label='Spline')\n  ysmoothed = gaussian_filter1d(df3[column_name], sigma=25)\n  axs[2].plot(df3['Length'], ysmoothed, label='Gaussian',color='red')\n  axs[2].legend()\n\n\ndef get_plot(column_name, start, end, sf_start, sf_end):\n  fig, axs = plt.subplots(3)\n  fig.set_figheight(25)\n  fig.set_figwidth(15)\n  x = sorted(list(pd.unique(df.roundLength)))\n  avg_y = {}\n  for i in range(len(df['roundLength'])):\n    if not (df['roundLength'][i] in avg_y) and not math.isnan(df[column_name][i]):\n      avg_y[df['roundLength'][i]] = [df[column_name][i]]\n    elif (df['roundLength'][i] in avg_y) and not math.isnan(df[column_name][i]):\n      avg_y[df['roundLength'][i]].append(df[column_name][i])  \n  avg_y = dict(sorted(avg_y.items()))\n  x_y = {}\n  std = []\n  for i in avg_y.keys():\n    x_y[i] = sum(avg_y[i])\/len(avg_y[i])\n    if len(avg_y[i]) >= 2:\n      std.append(statistics.stdev(avg_y[i]))\n    else:\n      std.append(0)\n  std2 = statistics.stdev(x_y.values())\n  axs[0].set_xlabel('Length')\n  axs[0].set_ylabel(column_name)\n  axs[0].set_title(column_name+' and length' )\n\n  cs = CubicSpline(list(x_y.keys())[start:end],list(x_y.values())[start:end])\n  x_range = np.arange(50, 50*end, 50)\n  axs[0].plot(x_range, cs(x_range), label='Cubic Spline')\n  axs[0].bar(list(x_y.keys())[start:end],list(x_y.values())[start:end],ec='blue', label='half-life')\n  axs[0].plot(list(x_y.keys())[start:end], std[start:end], color='black', label='sd for each length', alpha=0.5)\n  axs[0].plot(list(x_y.keys())[start:end],[std2]*(end-start),color='green', label='sd for all length')\n  axs[0].legend()\n  df2 = pd.DataFrame({'Length': list(x_y.keys())[start:end], column_name: list(x_y.values())[start:end]})\n  axs[1].set_title('Scatter plot for AVG' )\n  sns.regplot(x='Length', y=column_name, data=df2, logx = True, ax=axs[1])\n  scatter_full('Mouse Neurons, replicate 4 half_life', axs, sf_start, sf_end)\n\nget_plot('Bcells replicate 1 half_life', 1,60,2000,500)\n","0011ea0b":"def dataQual_scatter(df, column, qual):\n    ds = df[df[column[:-9]+'dataQual']==qual]\n    ds.reset_index(inplace=True)\n    length = []\n    half_live = []\n    max_x = 2000\n    max_y=400\n    for i in range(len(ds['roundLength'])):\n        if not math.isnan(ds[column][i]):\n            if (ds[column][i] <= max_y) and (ds['Length'][i] <= max_x):\n                length.append(ds['Length'][i])\n                half_live.append(ds[column][i])\n    figure(figsize=(15, 8), dpi=80)\n    ds = pd.DataFrame({'Length': length, column: half_live})\n    plt.title('Scatter plot for '+qual+' half-lives' )\n    sns.regplot(x='Length', y=column, data=ds, scatter_kws={'alpha':0.6, \"color\": \"black\"}, line_kws={\"color\": \"grey\"}, fit_reg=False)\n    ds.sort_values(by=['Length'], inplace=True)\n    ds = ds.drop_duplicates(subset = [\"Length\"])\n    xnew = np.linspace(ds['Length'].min(), ds['Length'].max(), 10)\n    spl = make_interp_spline(list(ds['Length']), ds[column], k=3)  # type: BSpline\n    power_smooth = spl(xnew)\n    plt.plot(xnew, power_smooth, label='Spline', color='blue')\n    ysmoothed = gaussian_filter1d(ds[column], sigma=25)\n    plt.plot(ds['Length'], ysmoothed, label='Gaussian',color='red')\n    plt.legend()\n\ndataQual_scatter(df, 'Bcells replicate 1 half_life', 'good')","bcf43911":"Of course we can't live without correlation matrix here. Let's check it now.","b97f11b3":"First of all I want to create roundLength column. This column will floor any length value (by step = 50), so we will get for each row value in [0,50,100,...].","a19f02fb":"All correlation coefficients is near 0 for Length and roundLength, there is no help for us here. We need to check different plots:\n* **First plot.**\nBar plot for roundLength and half-lives. Also we want to use Cubic Spline (if there is no patterns in bars) and sd for each roundLength. What is more I will plot sd for all roundLength as a line. \n* **Second plot.**\nScatter plot for average half-live for each roundLength.\n* **Third plot.**\nWe will check scatter plot for each row (Length\/half-live).\n\nP.S. I am very sorry for such code, I was doing it on \"a fast hand\". Soon I will rewrite it more accurate.","be769529":"I wrote a function with parameter column_name and checked each half-live column. I didn't see any relation with Length and target-column (half-live). But we can see nice relation for average half-live and roundLength when Length < 1500. <br>\nThe last thing I want to check: if good\/weak data quality will make an impact on our analysis.","cc89855e":"I don't see any relation between initial half-lives and length of the proteins. But maybe you will see :)"}}