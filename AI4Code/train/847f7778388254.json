{"cell_type":{"a7fa1bd0":"code","3f1c89df":"code","6339cff6":"code","660b53f1":"code","ebd7c1b8":"code","6b6f6530":"code","7850337d":"code","178aa07a":"code","c2991d1f":"code","6cbf4c60":"code","15824e34":"code","962765fb":"code","96820763":"code","c4c276af":"code","13a23b9f":"code","5c22bd66":"code","6bdeac0b":"code","c81be2d2":"code","f1283207":"code","4955268e":"code","b35fee12":"code","5b3e57ea":"code","0e615298":"code","240ba742":"code","9025e3d1":"code","dae0fdb8":"code","2441c312":"code","3e63a0a0":"code","5420657d":"code","dfb3472b":"code","26ab7734":"code","2d751f13":"code","27a24aa2":"code","bee6b769":"code","9061f49e":"code","1cd4c6ca":"code","b6202d41":"code","bcbbaa74":"code","1f7d1fb5":"code","82aa8047":"markdown","b0959e94":"markdown","90583499":"markdown","6753def1":"markdown","53335bf8":"markdown","14eea72b":"markdown","8c679f29":"markdown","cfc75b86":"markdown","17038196":"markdown","18e8f74c":"markdown","1464b50c":"markdown","c79e939a":"markdown","4601f1c7":"markdown","ef1663a7":"markdown","b5461aa3":"markdown","b119f78d":"markdown","56b0e5e5":"markdown"},"source":{"a7fa1bd0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","3f1c89df":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\nr_submission = pd.read_csv(\"..\/input\/submission-glm\/submission_glmnet.csv\")","6339cff6":"train.head()","660b53f1":"# set up aesthetic design\nplt.style.use('seaborn')\nsns.set_style('whitegrid')\n\n# create NA plot for train data\nplt.subplots(0,0,figsize = (15,3)) # positioning for 1st plot\ntrain.isnull().mean().sort_values(ascending = False).plot.bar(color = 'blue')\nplt.axhline(y=0.1, color='r', linestyle='-')\nplt.title('Missing values average per columns in TRAIN data', fontsize = 20)\nplt.show()\n\n# create NA plot for test data\nplt.subplots(1,0,figsize = (15,3))\ntest.isnull().mean().sort_values(ascending = False).plot.bar(color = 'blue')\nplt.axhline(y = 0.1, color = 'r', linestyle = '-')\nplt.title('Missing values average per columns in TEST data', fontsize = 20)\nplt.show()","ebd7c1b8":"train['MSSubClass'] = train['MSSubClass'].astype(object)\ntest['MSSubClass'] = test['MSSubClass'].astype(object)","6b6f6530":"categorical_cols = [col for col in train.columns if train[col].dtypes == \"object\"]\nprint(\"number of categorical columns is: \")\nprint(len(categorical_cols))","7850337d":"# combine train and test to pre-processing\ndf = train.drop(['SalePrice'], axis = 1)\ndf = df.append(test)\ndf = df.drop(['Id'], axis = 1)\ndf.shape","178aa07a":"# fill NA value by missing\nfor col in categorical_cols:\n    df[col] = df[col].fillna(\"missing\")","c2991d1f":"# Ex > Gd > TA > Fa > Po\nord_cols_1 = ['ExterQual','ExterCond','BsmtQual','BsmtCond','HeatingQC', 'KitchenQual',\n             'FireplaceQu','GarageQual','GarageCond']\n\nmapping = {'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1,'missing':0}\n\nfor col in ord_cols_1:\n    df[col] = df[col].map(mapping)","6cbf4c60":"# Gd > Av > Mn > No > NA (missing)\nord_cols_2 = ['BsmtExposure']\n\nmapping = {'Gd':4, 'Av': 3, 'Mn': 2, 'No': 1, 'missing': 0}\n\nfor col in ord_cols_2:\n    df[col] = df[col].map(mapping)     ","15824e34":"# GLQ > ALQ > BLQ > Rec > LwQ > Unf > NA (missing)\nord_cols_3 = ['BsmtFinType1', 'BsmtFinType2']\n\nmapping = {'GLQ': 6, 'ALQ': 5, 'BLQ': 4, 'Rec': 3, 'LwQ': 2, 'Unf': 1, 'missing': 0}\n\nfor col in ord_cols_3:\n    df[col] = df[col].map(mapping)   ","962765fb":"# Functional\nord_cols_4 = ['Functional']\n\nmapping = {'Typ': 8, 'Min1': 7, 'Min2': 6, 'Mod': 5, 'Maj1': 4, 'Maj2': 3,\n          'Sev': 2, 'Sal': 1}\n\nfor col in ord_cols_4:\n    df[col] = df[col].map(mapping)   ","96820763":"# garageFinish\nord_cols_5 = ['GarageFinish']\n\nmapping = {'Fin': 3, 'RFn': 2, 'Unf': 1, 'missing': 0}\n\nfor col in ord_cols_5:\n    df[col] = df[col].map(mapping)   ","c4c276af":"# fence\nmapping = {'GdPrv': 4, 'MnPrv': 3, 'GdWo': 2, 'MnWw': 1, 'missing': 0}\n\ndf['Fence'] = df['Fence'].map(mapping)\n\n# LotShape\nmapping = {'Reg': 4, 'IR1': 3, 'IR2': 2, 'IR3': 1, 'missing': 4}\ndf['LotShape'] = df['LotShape'].map(mapping)\n\n# LandContour\nmapping = {'Lvl': 4, 'Bnk': 3, 'HLS':2,'Low':1,'missing': 4}\ndf['LandContour'] = df['LandContour'].map(mapping)\n\n# Utilities\nmapping = {'AllPub':4,'NoSewr':3,'NoSeWa':2,'ELO':1,'missing':4}\ndf['Utilities'] = df['Utilities'].map(mapping)\n# LandSlope\nmapping = {'Gtl':3,'Mod':2,'Sev':1}\ndf['LandSlope'] = df['LandSlope'].map(mapping)\n\n# Heating\nmapping = {'Wall':'other','OthW':'other','Floor':'other','Grav':'other'}\ndf['Heating'] = df['Heating'].map(mapping)\n\n# Electrical\nmapping = {'SBrkr':5,'FuseA':4,'FuseF':3,'FuseP':2,'Mix':1}\ndf['Electrical'] = df['Electrical'].map(mapping)\n\n# PavedDrive\nmapping = {'Y':3,'P':2,'N':1}\n\n#MiscFeature\nmapping = {'TenC':'high','Elev':'high'}","13a23b9f":"# binary categorical variables\ndf['CentralAir'] = df['CentralAir'].replace(\"N\",\"0\")\ndf['CentralAir'] = df['CentralAir'].replace(\"Y\",\"1\")\ndf['CentralAir'] = df['CentralAir'].astype(int)","5c22bd66":"# check again categorical cols\nprint(\"number of categorical cols before is: \")\nprint(len(categorical_cols))\n\ncategorical_cols = [col for col in df.columns if df[col].dtypes == \"object\"]\nprint(\"new number of categorical columns is: \")\nprint(len(categorical_cols))","6bdeac0b":"# one hot encoder for remain categorical variables\ncat_df = df.loc[:, categorical_cols]\ncat_df = cat_df.drop(['Neighborhood','Condition2',\n                     'Exterior1st','Exterior2nd',\n                      'PoolQC','Alley'\n                     ], axis=1)\ncat_df = pd.get_dummies(cat_df)\n\nprint(cat_df.shape)\ncat_df.head()","c81be2d2":"# explore continuous variables\ncontinuous_variables = [col for col in df.columns if df[col].dtype != \"object\"]\nprint(\"the number of continuous variables is: \")\nprint(len(continuous_variables))","f1283207":"plt.subplots(1,0,figsize = (15,3))\ndf.loc[:,continuous_variables].isnull().mean().sort_values(ascending = False).plot.bar(color = 'blue')\nplt.axhline(y=0.1, color='r', linestyle='-')\nplt.title('Missing values average per columns in FULL data', fontsize = 20)\nplt.show()","4955268e":"num = train.select_dtypes(exclude = 'object')\nnumcorr = num.corr()\nf, ax = plt.subplots(figsize = (19,1)) # set figure size\nsns.heatmap(numcorr.sort_values(by = 'SalePrice', ascending = False).head(1),annot = True, fmt = \".2f\")\nplt.show()","b35fee12":"plt.subplots(1,0,figsize = (15,3))\nnumcorr['SalePrice'].sort_values(ascending = False).to_frame().plot.bar(color = 'blue')\nplt.axhline(y = 0.5, color = 'r', linestyle = '-')\nplt.title('Corrplot vs SalePrice')\nplt.show()","5b3e57ea":"Num=numcorr['SalePrice'].sort_values(ascending=False).to_frame()\ncm = sns.light_palette(\"orange\", as_cmap=True)\ns = Num.style.background_gradient(cmap=cm)\ns","0e615298":"df = df.drop(['MoSold',\n              #'3SsnPorch','BsmtFinSF2','BsmtHalfBath',\n             #'MiscVal',\n              'LowQualFinSF','YrSold'], axis = 1)","240ba742":"fig = plt.figure(figsize = (15,10))\nax1 = plt.subplot2grid((2,2),(0,0))\nax1.set_xlim([0,7000])\nplt.scatter(x = train['GrLivArea'], y = train['SalePrice'], color = ('yellowgreen'))\nplt.axvline(x = 4600, color = 'r', linestyle = '-')\nplt.title('GrLivArea - SalePrice', fontsize = 15, weight = 'bold')\n\nax1 = plt.subplot2grid((2,2),(0,1))\nplt.scatter(x = train['TotalBsmtSF'], y = train['SalePrice'], color = ('red'))\nplt.axvline(x = 4600, color = 'r', linestyle = '-')\nplt.title('TotalBsmtSF - SalePrice', fontsize = 15, weight = 'bold')\n\nax1 = plt.subplot2grid((2,2),(1,0))\nplt.scatter(x = train['GarageArea'], y = train['SalePrice'], color = ('deepskyblue'))\nplt.axvline(x = 4600, color = 'r', linestyle = '-')\nplt.title('GarageArea - SalePrice', fontsize = 15, weight = 'bold')\n\nax1 = plt.subplot2grid((2,2),(1,1))\nplt.scatter(x = train['MasVnrArea'], y = train['SalePrice'], color = ('gold'))\nplt.axvline(x = 4600, color = 'r', linestyle = '-')\nplt.title('MasVnrArea - SalePrice', fontsize = 15, weight = 'bold')","9025e3d1":"continuous_variables = [col for col in df.columns if df[col].dtype != \"object\"]","dae0fdb8":"# specific replacement NA value\ndf['GarageYrBlt'] = df['GarageYrBlt'].fillna(1980)\n\n# mass replacement NA value by median\nfor col in continuous_variables:\n    df[col] = df[col].fillna(0)","2441c312":"# combine df\ndf = df.drop(categorical_cols, axis = 1)\ndf = pd.concat([df, cat_df], axis = 1, join = 'inner')\nprint(df.shape)\ndf.head()","3e63a0a0":"#df['Age_1'] = df['YrSold'] - df['YearBuilt']\n#df['Age_2'] = df['YrSold'] - df['YearRemodAdd']\ndf['year_qual'] = df['YearBuilt']*df['OverallQual']\ndf['year_r_qual'] = df['YearRemodAdd']*df['OverallQual']\ndf['qual_bsmt'] = df['OverallQual']*df['TotalBsmtSF']\ndf['livarea_qual'] = df['OverallQual']*df['GrLivArea']\ndf['qual_bath'] = df['OverallQual']*df['FullBath']\n#df['qual_ext'] = df['OverallQual']*df['ExterCond']\ndf['garage_qual'] = df['GarageArea']*df['GarageQual']\n\ndf['TotalArea'] = df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF'] + df['GrLivArea'] + df['GarageArea']\ndf['Bathrooms'] = df['FullBath'] + df['HalfBath']*0.5\ndf['YearAverage'] = (df['YearRemodAdd'] + df['YearBuilt'])\/2","5420657d":"log_cols = ['livarea_qual','qual_bsmt',\n            'LotArea',\n           'MasVnrArea', 'TotalBsmtSF',\n           'GarageArea','GrLivArea',\n            ]\nfor col in log_cols:\n    df[col] = np.log1p(df[col])","dfb3472b":"# overview df shape\nprint(\"overview df shape: \")\nprint(df.shape)\n\n# split back to train and test set\ntrain_x = df.iloc[0:len(train),]\ntest_x = df.iloc[len(train): len(df),]\n\ntrain_y = np.log1p(train['SalePrice'])\n#train_y = train['SalePrice']\n\n#train_x_1 = train_x.loc[:,con_cols_1]\n#train_x_2 = train_x.drop(con_cols_1, axis = 1)\n# drop outlier\n#train_x =  train_x.drop([523,1298,297,\n#                        898,688,1181,473,1349,632,712,153,1078,120,0,80,88\n#                        ], axis = 0)\n#train_y = train_y.drop([523,1298,297,\n#                       898,688,1181,473,1349,632,712,153,1078,120,0,80,88\n#                       ], axis = 0)\n\n# overview train_x and test_x shape\nprint(train_x.shape)\n#print(train_x_2.shape)\nprint(test_x.shape)","26ab7734":"plt.hist(train_y)\nplt.xlabel(\"log1p of Sale Price\")\nplt.ylabel(\"frequency\")\nplt.title(\"Log transformation on Sale Price\")","2d751f13":"from sklearn.metrics import mean_absolute_error as mae\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import GridSearchCV, KFold, train_test_split, StratifiedKFold\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport xgboost as xgb\nimport lightgbm as lgb","27a24aa2":"def rmsle(y_true, y_pred):\n    return 'RMSLE', np.sqrt(np.mean(np.power(np.log1p(y_pred) - np.log1p(y_true), 2))), False","bee6b769":"# train_x, train_y, test_x\nkf = StratifiedKFold(n_splits=5,random_state=1,shuffle=True)\n\nparams = {'num_leaves':[10,30,50],\n         'n_estimators': [100,300,500],\n          #'metric': ['l2', 'l1'],\n          'learning_rate': [0.01,0.1],\n          'min_child_samples': [20,40,60],\n          'feature_fraction': [0.8,0.9],\n          'bagging_fraction': [0.8,0.9],\n          'bagging_freq': [1,3]\n         }\n\nfit_lgb = lgb.LGBMRegressor(random_state=123,verbose=0)\n\ngbm = GridSearchCV(fit_lgb, params, cv=5,verbose=0)\ngbm.fit(train_x, train_y)\n\nprint('Best parameters found by grid search are:', gbm.best_params_)\nprint('Best score: ',gbm.best_score_)","9061f49e":"sample_submission['SalePrice'] = np.exp(gbm.predict(test_x))-1\nsample_submission.to_csv('submission_lgb.csv',index=False)","1cd4c6ca":"best_xgb_model = xgb.XGBRegressor(colsample_bytree=0.4,\n                 gamma=0,                 \n                 learning_rate=0.07,\n                 max_depth=5,\n                 min_child_weight=1.5,\n                 n_estimators=10000,                                                                    \n                 reg_alpha=0.75,\n                 reg_lambda=0.45,\n                 subsample=0.6,\n                 seed=42,\n                                     random_state=123)\nbest_xgb_model.fit(train_x,train_y)","b6202d41":"sample_submission['SalePrice'] = np.exp(best_xgb_model.predict(test_x))-1\nsample_submission.to_csv('submission_xgb.csv',index=False)","bcbbaa74":"from sklearn.ensemble import VotingRegressor\nvoting = VotingRegressor([('lightgbm',gbm.best_estimator_),('xgboost',best_xgb_model)])\n\nvoting.fit(train_x,train_y)","1f7d1fb5":"sample_submission['SalePrice'] = np.exp(voting.predict(test_x))-1\nsample_submission.to_csv('submission_ensemble.csv',index=False)","82aa8047":"## **Prepare data**","b0959e94":"# **4. Data pre-processing**","90583499":"# **Modeling**","6753def1":"# **Modeling**","53335bf8":"# **1. Setting up environment**","14eea72b":"# **2. Import dataset**","8c679f29":"## **4.1 Categorical variables**","cfc75b86":"The first approach to encode categorical variables is Label Encoder. This approach is applied for ordinal variables.\n\nThe second approach to encode categorical variables is One Hot Encoder. This approach is applied for remain variables, which are almost nominal variables.","17038196":"## **XGBoost**","18e8f74c":"## **4.2 Continuous variables**","1464b50c":"Reference: \n\nhttps:\/\/github.com\/microsoft\/LightGBM\/blob\/master\/examples\/python-guide\/simple_example.py\n\nhttps:\/\/lightgbm.readthedocs.io\/en\/latest\/pythonapi\/lightgbm.Dataset.html#lightgbm.Dataset\n\nhttps:\/\/lightgbm.readthedocs.io\/en\/latest\/pythonapi\/lightgbm.cv.html**","c79e939a":"## **Data preparation**","4601f1c7":"## **Ensemble**","ef1663a7":"# **3. Data overview**","b5461aa3":"**Feature engineering**","b119f78d":"## **LightGBM**","56b0e5e5":"Then I replace them by 0."}}