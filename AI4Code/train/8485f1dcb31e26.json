{"cell_type":{"c65a182c":"code","f50bac42":"code","df74c868":"code","efca671a":"code","62022852":"code","91b5308d":"code","e1a2d349":"code","10564037":"code","f294073c":"code","cddf8240":"code","1bdfe29f":"code","0d73d97d":"code","c43191c2":"code","90fd6c5a":"code","21ca8f02":"code","554a5018":"code","bf23be17":"code","20b7454c":"code","1ad88a1f":"code","84e78a24":"code","d1ae4768":"code","ff0831a4":"code","456d5af2":"code","755309ed":"code","6b818dac":"code","a8abca16":"code","abc3516f":"code","86659ff1":"code","6725de9d":"code","1d5bcc2f":"code","3f8cc005":"code","af52b881":"code","e7154fe5":"code","1e9b239f":"code","74239855":"code","6c2e036f":"code","e58fdcd1":"code","fd58baa7":"code","1d0b9267":"code","3c372f08":"code","c08fcf59":"code","a4e8dc6d":"code","d86126d6":"code","fb789b4a":"code","55f414c9":"code","abbadffb":"code","a932953f":"code","54ea13e3":"code","ab1ed322":"code","4b310a16":"code","f7da2b59":"code","bc06ca1f":"code","291d72d7":"code","c13c5ffe":"code","327d6ca7":"code","4546385e":"code","c324d162":"code","e0a85f97":"code","c0c13cfe":"code","9aa9907c":"code","4341e8d6":"code","76f1584e":"code","f08f31d4":"code","a24a37f1":"code","b70c8afa":"code","51d2156d":"code","251e5740":"code","1b17db93":"code","78de51e1":"code","483dbb98":"code","36f82070":"code","3e2e693e":"code","f3c15bd9":"code","b2ed72c4":"code","177d5fe8":"code","abcd0787":"code","33550eb8":"code","a185b915":"code","3a988594":"code","9b94d56d":"code","4234fe6d":"code","066b5bec":"code","796b4ebb":"code","25b0d8b8":"code","1d99ae61":"code","ab0eed3e":"code","08417334":"code","d85fff12":"code","0378905e":"code","d12259e8":"code","c492f99b":"code","9eef88ce":"code","6e96896c":"code","607fb1fa":"code","d61a7285":"code","10dbba90":"code","4a5edecc":"code","802ac437":"code","16d26216":"code","97a4fafc":"code","674b2644":"code","f4d781a2":"code","19871437":"code","1f3d39fc":"code","6aed4124":"code","66c6a8eb":"code","1dddacc9":"code","c906fdf9":"code","cf7aa4c9":"code","3be3ecb8":"code","b81996bf":"code","4ae8164b":"code","6810955a":"code","344fe4f2":"code","e218f028":"code","58e7d61c":"code","386fadce":"code","f9960811":"code","04fa86ae":"code","09924e6a":"code","a685be62":"code","6358e06e":"code","bcd69d9e":"code","289b460a":"code","78266db2":"code","e7cf322c":"code","b451b07f":"code","2ac0f5f3":"code","6d1b4b47":"code","beb6c9a1":"code","c730d863":"code","c9607078":"code","6a013606":"code","f854b3d3":"code","7ec1a282":"code","5cbe89ce":"code","51ddf0c2":"code","fe19b2f0":"code","77ac7c32":"code","fff6c03c":"code","0edc2595":"code","0e2309a1":"code","27f9d7e2":"code","374e980e":"code","8a24b5b9":"code","0811c051":"code","cecf43da":"code","50ba6c2b":"code","c922fe3d":"code","56fb8147":"code","24fb8dde":"code","3220b3de":"code","105a25c4":"code","fb2f6526":"code","078a85f1":"code","52c9daca":"code","ddff4884":"code","b3a9027a":"code","8f0ce876":"code","d3c7485f":"code","01c34f79":"code","700119bc":"code","cad7ec04":"code","73afafa7":"code","d3e4d30f":"code","4c690a80":"code","31f750ea":"code","da33df1a":"code","abb82139":"code","2fe9f11a":"code","a97a810f":"code","b5c593ba":"code","46c46508":"code","f216f91a":"code","6c8978dc":"code","a2db83d8":"code","2207e6b5":"code","b36af55d":"code","8b52b913":"code","fdfe39d8":"code","1f43e834":"code","0bb1742d":"code","ea9ad6be":"code","16efde98":"markdown","1b0c502f":"markdown","94fffea6":"markdown","9d8d6097":"markdown","b8414a7c":"markdown","0dc5ccab":"markdown","6c64710a":"markdown","b3abb94e":"markdown","3e7d8b2d":"markdown","fc0ca2ee":"markdown","db2028f3":"markdown","d34c1cf6":"markdown","5bad86cd":"markdown","1c214e6f":"markdown","dbb76c9c":"markdown","82dfeb75":"markdown","669df93a":"markdown","993971f5":"markdown","4df086f8":"markdown","1dbf32c3":"markdown","d3789a5a":"markdown","987fc4e6":"markdown","8c41d961":"markdown","8fe96d0f":"markdown","6388b611":"markdown","80d4fe44":"markdown","fa11d0e9":"markdown","0cb5a5ad":"markdown","7a2000d8":"markdown","b13eee09":"markdown","6e0957bc":"markdown","85382b5a":"markdown","55b00909":"markdown","6c66f367":"markdown","210cebfd":"markdown","5a0a178a":"markdown","ea60ca66":"markdown","96e1b3fd":"markdown","869b1288":"markdown","a8f4ae2a":"markdown","5d84685a":"markdown","cb4d7475":"markdown","a0d695cb":"markdown","2dc238af":"markdown","f1d50c37":"markdown","d89b119b":"markdown","72d280ae":"markdown","0c71c7cd":"markdown","10e92e12":"markdown","dcdef6f7":"markdown","15cc5b56":"markdown","10b856d1":"markdown","d211067a":"markdown","f3873313":"markdown","05bac7a7":"markdown","df1b1f3f":"markdown","911fbc13":"markdown","1ea6acde":"markdown","9b051c59":"markdown","ae92a59a":"markdown","860870cd":"markdown"},"source":{"c65a182c":"import numpy as np\nimport pandas as pd","f50bac42":"# visualization\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom mpl_toolkits.basemap import Basemap\nimport folium\nfrom folium import plugins","df74c868":"from sklearn.cross_validation import train_test_split","efca671a":"from sklearn import linear_model\nimport statsmodels.api as sm","62022852":"df = pd.read_csv('..\/input\/crime.csv', encoding = \"ISO-8859-1\")","91b5308d":"def print_five_rows(name_column):\n    return df[name_column][0:5]","e1a2d349":"def describe_column(name_column):\n    return df[name_column].describe()","10564037":"def create_list_number_crime(name_column, list_unique):\n    # list_unique = df[name_column].unique()\n    \n    i = 0\n    \n    list_number = list()\n    \n    while i < len(list_unique):\n        list_number.append(len(df.loc[df[name_column] == list_unique[i]]))\n        i += 1\n    \n    return list_unique, list_number","f294073c":"def pie_plot(list_number, list_unique):\n    plt.figure(figsize=(20,10))\n    plt.pie(list_unique, \n        labels=list_number,\n        autopct='%1.1f%%', \n        shadow=True, \n        startangle=140)\n \n    plt.axis('equal')\n    plt.show()\n    return 0","cddf8240":"def bar_chart(list_number, list_unique):\n    objects = list_unique\n    y_pos = np.arange(len(objects))\n    performance = list_number\n \n    plt.figure(figsize=(20,10))    \n    plt.bar(y_pos, performance, align='center', alpha=0.5)\n    plt.xticks(y_pos, objects)\n    plt.ylabel('Number') \n    plt.show()\n    \n    return 0","1bdfe29f":"def drop_NaN_two_var(x, y):\n\n    df1 = df[[x, y]].dropna()\n    print(df1.shape)\n\n    x_value = df1[x]\n    y_value = df1[y]\n\n    del df1\n        \n    print(x + ': ' + str(x_value.shape))\n    print(y + ': ' + str(y_value.shape))\n        \n    return x_value, y_value","0d73d97d":"def function_OLS_Regression(x, y):\n    \n    model = sm.OLS(y, x)\n    res = model.fit()\n    return res.summary()","c43191c2":"df.shape","90fd6c5a":"df.columns","21ca8f02":"df.isnull().sum()","554a5018":"print_five_rows('INCIDENT_NUMBER')","bf23be17":"describe_column('INCIDENT_NUMBER')","20b7454c":"df = df.drop('INCIDENT_NUMBER', 1)","1ad88a1f":"print_five_rows('OFFENSE_CODE')","84e78a24":"len(df['OFFENSE_CODE'].unique())","d1ae4768":"print_five_rows('OFFENSE_CODE_GROUP')","ff0831a4":"describe_column('OFFENSE_CODE_GROUP')","456d5af2":"print_five_rows('OFFENSE_DESCRIPTION')","755309ed":"describe_column('OFFENSE_DESCRIPTION')","6b818dac":"print_five_rows('DISTRICT')","a8abca16":"describe_column('DISTRICT')","abc3516f":"df['DISTRICT'].unique()","86659ff1":"print_five_rows('REPORTING_AREA')","6725de9d":"describe_column('REPORTING_AREA')","1d5bcc2f":"print_five_rows('SHOOTING')","3f8cc005":"df['SHOOTING'].unique()","af52b881":"print_five_rows('OCCURRED_ON_DATE')","e7154fe5":"df['OCCURRED_ON_DATE'] = pd.to_datetime(df['OCCURRED_ON_DATE'])","1e9b239f":"describe_column('OCCURRED_ON_DATE')","74239855":"print_five_rows('YEAR')","6c2e036f":"df['MONTH'].unique()","e58fdcd1":"df['DAY_OF_WEEK'].unique()","fd58baa7":"df['HOUR'].unique()","1d0b9267":"df['UCR_PART'].unique()","3c372f08":"print_five_rows('STREET')","c08fcf59":"describe_column('STREET')","a4e8dc6d":"df[['Lat', 'Long']].head()","d86126d6":"describe_column('Lat')","fb789b4a":"describe_column('Long')","55f414c9":"df['Location'].head()","abbadffb":"plt.figure(figsize=(16,8))\ndf['DISTRICT'].value_counts().plot.bar()\nplt.show()","a932953f":"# 2015\nplt.figure(figsize=(8,4))\ndf['DISTRICT'].loc[df['YEAR']==2015].value_counts().plot.bar()\nplt.show()\n\n# 2016\nplt.figure(figsize=(8,4))\ndf['DISTRICT'].loc[df['YEAR']==2016].value_counts().plot.bar()\nplt.show()\n\n# 2017\nplt.figure(figsize=(8,4))\ndf['DISTRICT'].loc[df['YEAR']==2017].value_counts().plot.bar()\nplt.show()\n\n# 2018\nplt.figure(figsize=(8,4))\ndf['DISTRICT'].loc[df['YEAR']==2018].value_counts().plot.bar()\nplt.show()","54ea13e3":"i = 1\n\nwhile i < 13:\n    print('== ' + str(i) + ' ==')\n    print(df['DISTRICT'].loc[df['MONTH']==i].value_counts())\n    i +=1","ab1ed322":"list_unique_year, list_number_year = create_list_number_crime('YEAR',df['YEAR'].unique())","4b310a16":"pie_plot(list_unique_year, list_number_year)","f7da2b59":"bar_chart(list_number_year,list_unique_year)","bc06ca1f":"list_unique_month, list_number_month = create_list_number_crime('MONTH',list(range(1,13)))","291d72d7":"# pie_plot(list_unique_month,list_number_month)","c13c5ffe":"bar_chart(list_number_month,list_unique_month)","327d6ca7":"day_of_week = ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')","4546385e":"list_unique_day, list_number_day = create_list_number_crime('DAY_OF_WEEK',day_of_week)","c324d162":"#pie_plot(list_unique_day,list_number_day)","e0a85f97":"bar_chart(list_number_day,list_unique_day)","c0c13cfe":"list_unique_hour, list_number_hour = create_list_number_crime('HOUR',list(range(0,24)))","9aa9907c":"# pie_plot(list_unique_hour, list_number_hour)","4341e8d6":"bar_chart(list_number_hour,list_unique_hour)","76f1584e":"df['SHOOTING'].fillna(0, inplace = True)\n\ndf['SHOOTING'] = df['SHOOTING'].map({\n    0: 0,\n    'Y':1\n})","f08f31d4":"shoot_true = len(df.loc[df['SHOOTING'] == 1])\nshoot_false = len(df.loc[df['SHOOTING'] == 0])","a24a37f1":"print('With shooting(num): ' + str(shoot_true))\nprint('With shooting(%):   ' + str(round(shoot_true*100\/len(df),2))+'%')\nprint()\nprint('Without shooting(num): ' + str(shoot_false))\nprint('Without shooting(%):   ' + str(round(shoot_false*100\/len(df),2))+'%')","b70c8afa":"df_shoot = df.loc[df['SHOOTING'] == 1]\ndf_shoot.shape","51d2156d":"shoot_y_2015 = len(df_shoot.loc[df_shoot['YEAR'] == 2015])\nshoot_y_2016 = len(df_shoot.loc[df_shoot['YEAR'] == 2016])\nshoot_y_2017 = len(df_shoot.loc[df_shoot['YEAR'] == 2017])\nshoot_y_2018 = len(df_shoot.loc[df_shoot['YEAR'] == 2018])\n\nunique_shoot_year = '2015', '2016', '2017', '2018'\nnumber_shoot_year = [shoot_y_2015, shoot_y_2016, shoot_y_2017, shoot_y_2018]","251e5740":"# pie_plot(unique_shoot_year,number_shoot_year)","1b17db93":"bar_chart(number_shoot_year,unique_shoot_year)","78de51e1":"i = 1\nlist_month = list()\n\nwhile i <= 12:\n    list_month.append(len(df_shoot.loc[df_shoot['MONTH'] == i]))\n    i+=1","483dbb98":"# pie_plot(list(range(1,13)), list_month)","36f82070":"bar_chart(list_month,list(range(1,13)))","3e2e693e":"day_of_week = ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')\n\ni = 0\nday_number = list()\n\nwhile i < 7:\n    day_number.append(len(df_shoot.loc[df_shoot['DAY_OF_WEEK'] == day_of_week[i]]))\n    \n    i +=1","f3c15bd9":"# pie_plot(day_of_week, day_number)","b2ed72c4":"bar_chart(day_number,day_of_week)","177d5fe8":"i = 0\nhour_number = list()\n\nwhile i < 24:\n    hour_number.append(len(df_shoot.loc[df_shoot['HOUR'] == i]))\n    i +=1","abcd0787":"# pie_plot(list(range(0,24)), hour_number)","33550eb8":"bar_chart(hour_number,list(range(0,24)))","a185b915":"plt.figure(figsize=(20,10))\ndf_shoot['DISTRICT'].value_counts().plot.bar()\nplt.show()","3a988594":"location_shoot = df_shoot[['Lat','Long']]\nlocation_shoot = location_shoot.dropna()\n\nlocation_shoot = location_shoot.loc[(location_shoot['Lat']>40) & (location_shoot['Long'] < -60)]  \n\nx_shoot = location_shoot['Long']\ny_shoot = location_shoot['Lat']\n\n# Custom the inside plot: options are: \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d\nsns.jointplot(x_shoot, y_shoot, kind='scatter')\nsns.jointplot(x_shoot, y_shoot, kind='hex')\nsns.jointplot(x_shoot, y_shoot, kind='kde')","9b94d56d":"plt.figure(figsize=(20,10))\ndf['UCR_PART'].value_counts().plot.bar()\nplt.show()","4234fe6d":"df[['Lat','Long']].describe()","066b5bec":"location = df[['Lat','Long']]\nlocation = location.dropna()\n\nlocation = location.loc[(location['Lat']>40) & (location['Long'] < -60)]  ","796b4ebb":"x = location['Long']\ny = location['Lat']\n\n\ncolors = np.random.rand(len(x))\n\nplt.figure(figsize=(20,20))\nplt.scatter(x, y,c=colors, alpha=0.5)\nplt.show()","25b0d8b8":"m = folium.Map([42.348624, -71.062492], zoom_start=11)\nm","1d99ae61":"x = location['Long']\ny = location['Lat']\n\n\n# Custom the inside plot: options are: \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d\nsns.jointplot(x, y, kind='scatter')\nsns.jointplot(x, y, kind='hex')\nsns.jointplot(x, y, kind='kde')","ab0eed3e":"#plt.figure(figsize=(20,20))\n\n#map = Basemap(\n#    projection='merc', \n#    lat_0 = 42.2, \n#    lon_0 = -70.9,\n#    resolution = 'h', \n#    area_thresh = 0.1,\n#    llcrnrlon=-70.8, \n#    llcrnrlat=42.2,\n#    urcrnrlon=-71.5, \n#    urcrnrlat=42.5\n#)\n \n#map.drawcoastlines()\n#map.drawcountries()\n#map.fillcontinents(color = 'coral')\n#map.drawmapboundary()\n\n#lons = list(long[0:1000])\n#lats = list(lat[0:1000])\n#x,y = map(lons, lats)\n#map.plot(x, y, 'bo', markersize=3)\n\n#plt.show()","08417334":"df.isnull().sum()","d85fff12":"df['Day'] = 0","0378905e":"df['Night'] = 0","d12259e8":"# Day or night for 1st month\ndf['Day'].loc[(df['MONTH'] == 1) & (df['HOUR'] >= 6) & (df['HOUR'] <= 18)] = 1\n\n# Day or night for 2st month\ndf['Day'].loc[(df['MONTH'] == 2) & (df['HOUR'] >= 6) & (df['HOUR'] <= 19)] = 1\n\n# for 3st month\ndf['Day'].loc[(df['MONTH'] == 3) & (df['HOUR'] >= 6) & (df['HOUR'] <= 20)] = 1\n\n# Day or night for 4st month\ndf['Day'].loc[(df['MONTH'] == 4) & (df['HOUR'] >= 5) & (df['HOUR'] <= 20)] = 1\n\n# Day or night for 5st month\ndf['Day'].loc[(df['MONTH'] == 5) & (df['HOUR'] >= 5) & (df['HOUR'] <= 21)] = 1\n\n# Day or night for 6st month\ndf['Day'].loc[(df['MONTH'] == 6) & (df['HOUR'] >= 4) & (df['HOUR'] <= 21)] = 1\n\n# Day or night for 7st month\ndf['Day'].loc[(df['MONTH'] == 7) & (df['HOUR'] >= 5) & (df['HOUR'] <= 21)] = 1\n\n# Day or night for 8st month\ndf['Day'].loc[(df['MONTH'] == 8) & (df['HOUR'] >= 5) & (df['HOUR'] <= 21)] = 1\n\n# Day or night for 9st month\ndf['Day'].loc[(df['MONTH'] == 9) & (df['HOUR'] >= 6) & (df['HOUR'] <= 20)] = 1\n\n# Day or night for 10st month\ndf['Day'].loc[(df['MONTH'] == 10) & (df['HOUR'] >= 6) & (df['HOUR'] <= 19)] = 1\n\n# Day or night for 11st month\ndf['Day'].loc[(df['MONTH'] == 11) & (df['HOUR'] >= 6) & (df['HOUR'] <= 17)] = 1\n\n# Day or night for 12st month\ndf['Day'].loc[(df['MONTH'] == 12) & (df['HOUR'] >= 7) & (df['HOUR'] <= 17)] = 1","c492f99b":"df['Night'].loc[df['Day']==0]=1","9eef88ce":"plt.figure(figsize=(16,8))\ndf['Night'].value_counts().plot.bar()\nplt.show()","6e96896c":"df['OFFENSE_CODE_GROUP'].value_counts().head(15)","607fb1fa":"list_offense_code_group = ('Motor Vehicle Accident Response',\n                           'Larceny',\n                           'Medical Assistance',\n                           'Investigate Person',\n                           'Other',\n                           'Drug Violation',\n                           'Simple Assault',\n                           'Vandalism',\n                           'Verbal Disputes',\n                           'Towed',\n                           'Investigate Property',\n                           'Larceny From Motor Vehicle')","d61a7285":"df_model = pd.DataFrame()","10dbba90":"i = 0\n\nwhile i < len(list_offense_code_group):\n\n    df_model = df_model.append(df.loc[df['OFFENSE_CODE_GROUP'] == list_offense_code_group[i]])\n    \n    i+=1","4a5edecc":"list_column = ['DISTRICT','REPORTING_AREA','MONTH','DAY_OF_WEEK',\n               'HOUR','Lat','Long', 'OFFENSE_CODE_GROUP','Day','Night']","802ac437":"df_model = df_model[list_column]","16d26216":"# DISTRICT\n\ndf_model['DISTRICT'] = df_model['DISTRICT'].map({\n    'B3':1, \n    'E18':2, \n    'B2':3, \n    'E5':4, \n    'C6':5, \n    'D14':6, \n    'E13':7, \n    'C11':8, \n    'D4':9, \n    'A7':10, \n    'A1':11, \n    'A15':12\n})\n\ndf_model['DISTRICT'].unique()","97a4fafc":"# REPORTING_AREA\n\ndf_model['REPORTING_AREA'] = pd.to_numeric(df_model['REPORTING_AREA'], errors='coerce')","674b2644":"# MONTH\n\ndf_model['MONTH'].unique()","f4d781a2":"# DAY_OF_WEEK\n\ndf_model['DAY_OF_WEEK'] = df_model['DAY_OF_WEEK'].map({\n    'Tuesday':2, \n    'Saturday':6, \n    'Monday':1, \n    'Sunday':7, \n    'Thursday':4, \n    'Wednesday':3,\n    'Friday':5\n})\n\ndf_model['DAY_OF_WEEK'].unique()","19871437":"# HOUR\n\ndf_model['HOUR'].unique()","1f3d39fc":"# Lat, Long\n\ndf_model[['Lat', 'Long']].head()","6aed4124":"df_model.fillna(0, inplace = True)","66c6a8eb":"x = df_model[['DISTRICT','REPORTING_AREA','MONTH','DAY_OF_WEEK','HOUR','Lat','Long','Day','Night']]","1dddacc9":"y = df_model['OFFENSE_CODE_GROUP']","c906fdf9":"y.unique()","cf7aa4c9":"y = y.map({\n    'Motor Vehicle Accident Response':1, \n    'Larceny':2, \n    'Medical Assistance':3,\n    'Investigate Person':4, \n    'Other':5, \n    'Drug Violation':6, \n    'Simple Assault':7,\n    'Vandalism':8, \n    'Verbal Disputes':9, \n    'Towed':10, \n    'Investigate Property':11,\n    'Larceny From Motor Vehicle':12\n})","3be3ecb8":"# Split dataframe into random train and test subsets\n\nX_train, X_test, Y_train, Y_test = train_test_split(\n    x,\n    y, \n    test_size = 0.1,\n    random_state=42\n)\n\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape, Y_test.shape)","b81996bf":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.tree import ExtraTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.semi_supervised import LabelSpreading\nfrom sklearn.svm import LinearSVC\nfrom sklearn.neighbors.nearest_centroid import NearestCentroid\nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier","4ae8164b":"from sklearn.metrics import f1_score","6810955a":"def fun_results(result):\n    print('mean: ' + str(result.mean()))\n    print('max: ' + str(result.max()))\n    print('min: ' + str(result.min()))\n    return result","344fe4f2":"# DecisionTreeClassifier\n\ndef fun_DecisionTreeClassifier(X_train, Y_train):\n    dec_tree = DecisionTreeClassifier()\n    dec_tree = dec_tree.fit(X_train, Y_train)\n\n    dec_tree_pred = dec_tree.predict(X_test)\n\n    dec_tree_score = f1_score(Y_test, dec_tree_pred, average=None)\n    return fun_results(dec_tree_score)\n\nfun_DecisionTreeClassifier(X_train, Y_train)","e218f028":"# BernoulliNB\n\ndef fun_BernoulliNB(X_train, Y_train):\n    bernoulli = BernoulliNB()\n    bernoulli = bernoulli.fit(X_train, Y_train)\n\n    bernoulli_pred = bernoulli.predict(X_test)\n\n    bernoulli_score = f1_score(Y_test, bernoulli_pred, average=None)\n    return fun_results(bernoulli_score)\n\nfun_BernoulliNB(X_train, Y_train)","58e7d61c":"# ExtraTreeClassifier\n\ndef fun_ExtraTreeClassifier(X_train, Y_train):\n    ext_tree = ExtraTreeClassifier()\n    ext_tree = ext_tree.fit(X_train, Y_train)\n\n    ext_tree_pred = ext_tree.predict(X_test)\n\n    ext_tree_score = f1_score(Y_test, ext_tree_pred, average=None)\n    return fun_results(ext_tree_score)\n\nfun_ExtraTreeClassifier(X_train, Y_train)","386fadce":"# KNeighborsClassifier\n\ndef fun_KNeighborsClassifier(X_train, Y_train):\n    neigh = KNeighborsClassifier()\n    neigh.fit(X_train, Y_train) \n\n    neigh_pred = neigh.predict(X_test)\n\n    neigh_score = f1_score(Y_test, neigh_pred, average=None)\n    return fun_results(neigh_score)\n\nfun_KNeighborsClassifier(X_train, Y_train)","f9960811":"# GaussianNB\n\ndef fun_GaussianNB(X_train, Y_train):\n    gauss = GaussianNB()\n    gauss = gauss.fit(X_train, Y_train)\n\n    gauss_pred = gauss.predict(X_test)\n\n    gauss_score = f1_score(Y_test, gauss_pred, average=None)\n    return fun_results(gauss_score)\n\nfun_GaussianNB(X_train, Y_train)","04fa86ae":"# RandomForestClassifier\n\ndef fun_RandomForestClassifier(X_train, Y_train):\n    rfc = RandomForestClassifier()\n    rfc = rfc.fit(X_train, Y_train)\n\n    rfc_pred = rfc.predict(X_test)\n\n    rfc_score = f1_score(Y_test, rfc_pred, average=None)\n    return fun_results(rfc_score)\n\nfun_RandomForestClassifier(X_train, Y_train)","09924e6a":"# LGBMClassifier\n\ndef fun_LGBMClassifier(X_train, Y_train):\n    clf = LGBMClassifier()\n    clf.fit(X_train, Y_train)\n\n    clf_pred = clf.predict(X_test)\n\n    clf_score = f1_score(Y_test, clf_pred, average=None)\n    return fun_results(clf_score)\n\nfun_LGBMClassifier(X_train, Y_train)","a685be62":"df_model_2 = df[['OFFENSE_CODE', 'DISTRICT','MONTH','DAY_OF_WEEK','HOUR','Day','Night']]","6358e06e":"df_model_2['OFFENSE_CODE'] = pd.to_numeric(df_model_2['OFFENSE_CODE'], errors='coerce')","bcd69d9e":"# DISTRICT\n\ndf_model_2['DISTRICT'] = df_model_2['DISTRICT'].map({\n    'B3':1, \n    'E18':2, \n    'B2':3, \n    'E5':4, \n    'C6':5, \n    'D14':6, \n    'E13':7, \n    'C11':8, \n    'D4':9, \n    'A7':10, \n    'A1':11, \n    'A15':12\n})\n\ndf_model_2['DISTRICT'].unique()","289b460a":"# DAY_OF_WEEK\n\ndf_model_2['DAY_OF_WEEK'] = df_model_2['DAY_OF_WEEK'].map({\n    'Tuesday':2, \n    'Saturday':6, \n    'Monday':1, \n    'Sunday':7, \n    'Thursday':4, \n    'Wednesday':3,\n    'Friday':5\n})\n\ndf_model_2['DAY_OF_WEEK'].unique()","78266db2":"df_model_2.isnull().sum()","e7cf322c":"df_model_2 = df_model_2.dropna()","b451b07f":"df_model_2['DISTRICT'].unique()","2ac0f5f3":"df_model_2.shape","6d1b4b47":"x = df_model_2[['OFFENSE_CODE','MONTH','DAY_OF_WEEK','HOUR','Day','Night']]\ny = df_model_2['DISTRICT']","beb6c9a1":"# Split dataframe into random train and test subsets\n\nX_train, X_test, Y_train, Y_test = train_test_split(\n    x,\n    y, \n    test_size = 0.1,\n    random_state=42\n)\n\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape, Y_test.shape)","c730d863":"fun_DecisionTreeClassifier(X_train, Y_train)\n","c9607078":"fun_BernoulliNB(X_train, Y_train)","6a013606":"fun_ExtraTreeClassifier(X_train, Y_train)","f854b3d3":"fun_KNeighborsClassifier(X_train, Y_train)","7ec1a282":"fun_GaussianNB(X_train, Y_train)","5cbe89ce":"fun_RandomForestClassifier(X_train, Y_train)","51ddf0c2":"fun_LGBMClassifier(X_train, Y_train)","fe19b2f0":"df_model3 = df[['DISTRICT','REPORTING_AREA', 'MONTH','DAY_OF_WEEK','HOUR','UCR_PART','Lat','Long']]","77ac7c32":"df_model3['DISTRICT'] = df_model3['DISTRICT'].map({\n    'B3':1, \n    'E18':2, \n    'B2':3, \n    'E5':4, \n    'C6':5, \n    'D14':6, \n    'E13':7, \n    'C11':8, \n    'D4':9, \n    'A7':10, \n    'A1':11, \n    'A15':12\n})","fff6c03c":"# REPORTING_AREA\n\ndf_model3['REPORTING_AREA'] = pd.to_numeric(df_model3['REPORTING_AREA'], errors='coerce')","0edc2595":"# DAY_OF_WEEK\n\ndf_model3['DAY_OF_WEEK'] = df_model3['DAY_OF_WEEK'].map({\n    'Tuesday':2, \n    'Saturday':6, \n    'Monday':1, \n    'Sunday':7, \n    'Thursday':4, \n    'Wednesday':3,\n    'Friday':5\n})","0e2309a1":"df_model3['UCR_PART'].unique()","27f9d7e2":"df_model3['UCR_PART'] = df_model3['UCR_PART'].map({\n    'Part Three':3, \n    'Part One':1, \n    'Part Two':2, \n#    'Other':4\n})","374e980e":"df_model3 = df_model3.dropna()\nprint(df_model3.shape)\ndf_model3.isnull().sum()","8a24b5b9":"x = df_model3[['DISTRICT','REPORTING_AREA', 'MONTH','DAY_OF_WEEK','HOUR','Lat','Long']]\ny = df_model3['UCR_PART']","0811c051":"# Split dataframe into random train and test subsets\n\nX_train, X_test, Y_train, Y_test = train_test_split(\n    x,\n    y, \n    test_size = 0.1,\n    random_state=42\n)\n\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape, Y_test.shape)","cecf43da":"fun_DecisionTreeClassifier(X_train, Y_train)","50ba6c2b":"fun_BernoulliNB(X_train, Y_train)","c922fe3d":"fun_ExtraTreeClassifier(X_train, Y_train)","56fb8147":"fun_KNeighborsClassifier(X_train, Y_train)","24fb8dde":"fun_GaussianNB(X_train, Y_train)","3220b3de":"fun_RandomForestClassifier(X_train, Y_train)","105a25c4":"fun_LGBMClassifier(X_train, Y_train)","fb2f6526":"location.isnull().sum()","078a85f1":"location.shape","52c9daca":"x = location['Long']\ny = location['Lat']\n\ncolors = np.random.rand(len(location))\n\nplt.figure(figsize=(20,20))\nplt.scatter(x, y,c=colors, alpha=0.5)\nplt.show()","ddff4884":"from sklearn.cluster import KMeans","b3a9027a":"X = location\nX = X[~np.isnan(X)]","8f0ce876":"#K means Clustering #K means  \ndef doKmeans(X, nclust):\n    model = KMeans(nclust)\n    model.fit(X)\n    clust_labels = model.predict(X)\n    cent = model.cluster_centers_\n    return (clust_labels, cent)\n\nclust_labels, cent = doKmeans(X, 2)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","d3c7485f":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=50)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","01c34f79":"X = location\nX = X[~np.isnan(X)]","700119bc":"clust_labels, cent = doKmeans(X, 3)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","cad7ec04":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=50)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","73afafa7":"X = location\nX = X[~np.isnan(X)]","d3e4d30f":"clust_labels, cent = doKmeans(X, 5)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","4c690a80":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=50)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","31f750ea":"X = location\nX = X[~np.isnan(X)]","da33df1a":"clust_labels, cent = doKmeans(X, 10)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","abb82139":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=50)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","2fe9f11a":"df_clus = df[['OFFENSE_CODE','Long','Lat']]","a97a810f":"df_clus = df_clus.loc[(df_clus['Lat'] > 40) & (df_clus['Long'] < -60)]","b5c593ba":"#df_clus['REPORTING_AREA'] = pd.to_numeric(df_model['REPORTING_AREA'], errors='coerce')","46c46508":"df_clus = df_clus.dropna()","f216f91a":"df_clus.describe()","6c8978dc":"X = df_clus\nX = X[~np.isnan(X)]","a2db83d8":"clust_labels, cent = doKmeans(X, 2)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","2207e6b5":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=5)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","b36af55d":"df_clus = df[['MONTH','Long','Lat']]","8b52b913":"df_clus = df_clus.loc[(df_clus['Lat'] > 40) & (df_clus['Long'] < -60)]","fdfe39d8":"df_clus = df_clus.dropna()","1f43e834":"X = df_clus\nX = X[~np.isnan(X)]","0bb1742d":"clust_labels, cent = doKmeans(X, 2)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","ea9ad6be":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=5)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","16efde98":"#### 5.6.1. Shooting & year","1b0c502f":"### 4.7. SHOOTING","94fffea6":"# Create new var","9d8d6097":"### 4.13. UCR_PART","b8414a7c":"### Inspiration\n\n1. How has crime changed over the years?\n2. Is it possible to predict where or when a crime will be committed?\n3. Which areas of the city have evolved over this time span?\n4. In which area most crimes are committed?","0dc5ccab":"### 4.3. OFFENSE_CODE_GROUP\n\nCode for offence`s group. Maybe, i will use for statistics research and modeling.","6c64710a":"### 4.15. Lat \/ Long","b3abb94e":"#### 6.1.2. Split data for *sklearn.multiclass*","3e7d8b2d":"# 3. Function","fc0ca2ee":"# 2. Read data","db2028f3":"### Content\n\n1. Import\n2. Read data\n3. Function\n4. First data research\n5. Visualization\n6. Model (Multi classification \/ Clustering)","d34c1cf6":"#### 5.7. UCR_PART","5bad86cd":"### 4.8. OCCURRED_ON_DATE","1c214e6f":"# Crimes in Boston\n## More than 2,60,760 crimes in Boston (2015- 2019)","dbb76c9c":"#### 6.1.3. Models","82dfeb75":"### 10 clusters","669df93a":"# 4. First data research","993971f5":"## 3.2. Function for visualization","4df086f8":"### 4.10. MONTH","1dbf32c3":"#### 5.6.2. Shooting & month","d3789a5a":"## 3.1. Function for research","987fc4e6":"### 4.1. INCIDENT_NUMBER (*will delete*)\n\nNumber for incident. This indicator is **difficult** for visualization, modeling and other research. I will **not** use it.","8c41d961":"### 4.12. HOUR","8fe96d0f":"### 5.4. Total number crime for each day of week","6388b611":"#### 5.6.4. Shooting & hour","80d4fe44":"### 5.2. Total number crime for each year","fa11d0e9":"# 1. Import","0cb5a5ad":"## 6.4. Clustering location","7a2000d8":"### 4.5. DISTRICT\n\nDistrict. I will use it for reaearch, modeling and visualization.","b13eee09":"### 4.11. DAY_OF_WEEK","6e0957bc":"### 2 clus","85382b5a":"#### KMeans","55b00909":"### 6.5. Clustering with location and OFFENSE_CODE","6c66f367":"### Conclusions\n1. See visualization (**5.2. Total number crime for each year**)\n2. It is hard for predict. It is not possible with this data. We need to more date. For example, promenade zone, street type and so on.\n3. Not more evoluted (**5.1. District**)\n4. See visualization (**5.6.7. Lat, Long**)","210cebfd":"### 4.16. Location","5a0a178a":"### 5.3.  Total number crime for each month","ea60ca66":"## 3.3. Function for modeling and cleaning","96e1b3fd":"### 5.1. District","869b1288":"\n#### 5.8. Lat, Long","a8f4ae2a":"## 6.2. Multi classification\nY - DISTRICT\n\nX - OFFENSE_CODE_GROUP, Month, Day of week, Hour, Day, Night\n","5d84685a":"### 5.5. Total number crime for each hour","cb4d7475":"### 4.4. OFFENSE_DESCRIPTION\n\nDescription for offence. Maybe, i will use for statistics research and modeling.","a0d695cb":"#### 5.6.6. Shooting and location","2dc238af":"### 5 clusters","f1d50c37":"## *This is a work in progress.*","d89b119b":"### 4.14. STREET","72d280ae":"### 4.6. REPORTING_AREA","0c71c7cd":"# 5. Visualization","10e92e12":"![](https:\/\/www.techemergence.com\/wp-content\/uploads\/2017\/11\/ai-for-crime-prevention-and-detection-5-current-applications.png)","dcdef6f7":" ### 6.6. Clustering with location and month","15cc5b56":"### 5.6. SHOOTING","10b856d1":"### 4.2. OFFENSE_CODE\n\nCode for offence. Maybe, i will use for statistics research and modeling.","d211067a":"# 6. Modeling","f3873313":"### 6.1. Multi classification\nY - OFFENSE_CODE_GROUP\n\nX - 'DISTRICT','REPORTING_AREA','MONTH','DAY_OF_WEEK',\n               'HOUR','Lat','Long', 'OFFENSE_CODE_GROUP','Day','Night'","05bac7a7":"### 3 clusters","df1b1f3f":"### 6.3. Multi classification - > UCR_PART\n\nY - UCR_PART\n\nX - DISTRICT, REPORTING_AREA, MONTH, DAY_OF_WEEK, HOUR, LATITUDE, LONGITUDE","911fbc13":"### 4.9. YEAR","1ea6acde":"#### Day or Night\n\n###### Link\n\nhttps:\/\/www.timeanddate.com\/sun\/usa\/boston","9b051c59":"### 2 clusters","ae92a59a":"#### 5.6.3. Shooting & day of week","860870cd":"#### 5.6.5. Shooting & District"}}