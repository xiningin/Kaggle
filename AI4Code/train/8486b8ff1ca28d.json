{"cell_type":{"707a968c":"code","a10b94ce":"code","64b75361":"code","5c45f922":"code","943ae06c":"code","c1264b00":"code","8c1b8ea7":"code","db52d4c9":"code","7cf3552b":"code","4bd05d0c":"code","dc1d28ba":"code","79a7de86":"code","d1007544":"code","ef5ca391":"code","ba7307ae":"code","16b1f7ef":"code","5f225d7d":"code","2a67f1ba":"code","8160db27":"code","9096ff4d":"code","d9f9017a":"code","d3676054":"code","e763afdd":"code","4e221067":"code","abe57116":"code","9f7eb924":"code","d0d9ced1":"code","6ea19421":"code","a4d6fd74":"code","63434466":"code","4e654bc4":"code","3095e6c2":"code","84757d98":"code","9ce8b45c":"code","26cd3205":"code","371cde54":"code","771e893b":"code","63c49e94":"markdown","c6d10edf":"markdown","f8bb2169":"markdown"},"source":{"707a968c":"import warnings\nwarnings.filterwarnings('ignore')","a10b94ce":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.grid_search import GridSearchCV\nimport xgboost\n%matplotlib inline","64b75361":"df = pd.read_csv('..\/input\/nyc-taxi-trip-duration\/train.csv')\ndf.passenger_count = df.passenger_count.astype(np.uint8)\ndf.vendor_id = df.vendor_id.astype(np.uint8)\ndf.trip_duration = df.trip_duration.astype(np.uint32)\nfor c in [c for c in df.columns if c.endswith('tude')]:\n    df.loc[:,c] = df[c].astype(np.float32)\nprint(df.memory_usage().sum()\/2**20)\ndf.pickup_datetime=pd.to_datetime(df.pickup_datetime)\ndf.dropoff_datetime=pd.to_datetime(df.dropoff_datetime)\ndf['pu_hour'] = df.pickup_datetime.dt.hour\ndf['yday'] = df.pickup_datetime.dt.dayofyear\ndf['wday'] = df.pickup_datetime.dt.dayofweek\ndf['month'] = df.pickup_datetime.dt.month","5c45f922":"sns.set_style('white')\nsns.set_context(\"paper\",font_scale=2)\ncorr = df.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nf, ax = plt.subplots(figsize=(11,9))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=0.3, center=0,\n           square=True, linewidths=0.5, cbar_kws={\"shrink\":0.5})","943ae06c":"fig, ax = plt.subplots(ncols=1, nrows=1)\nsns.distplot(df['trip_duration']\/3600,ax=ax,bins=100,kde=False,hist_kws={'log':True})","c1264b00":"fig, ax = plt.subplots(ncols=1, nrows=1)\nax.set_xlim(0,30)\nsns.distplot(df['trip_duration']\/3600,ax=ax,bins=1000,kde=False,hist_kws={'log':True})","8c1b8ea7":"def haversine(lon1, lat1, lon2, lat2):\n\n    lon1, lat1, lon2, lat2 = map(np.radians, [lon1, lat1, lon2, lat2])\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = np.sin(dlat\/2.0)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon\/2.0)**2\n\n    c = 2 * np.arcsin(np.sqrt(a))\n    km = 6367 * c\n    miles = km *  0.621371\n    return miles","db52d4c9":"df['distance'] = haversine(df.pickup_longitude, df.pickup_latitude,\n                                           df.dropoff_longitude, df.dropoff_latitude)\n\nwdf = pd.read_csv('..\/input\/weather-data-in-new-york-city-2016\/weather_data_nyc_centralpark_2016(1).csv')","7cf3552b":"wdf['date']=pd.to_datetime(wdf.date,format='%d-%m-%Y')\nwdf['yday'] = wdf.date.dt.dayofyear","4bd05d0c":"wdf.head()","dc1d28ba":"wdf['snowfall'] = wdf['snow fall'].replace(['T'],0.05).astype(np.float32)\nwdf['precipitation'] = wdf['precipitation'].replace(['T'],0.05).astype(np.float32)\nwdf['snowdepth'] = wdf['snow depth'].replace(['T'],0.05).astype(np.float32)","79a7de86":"df = pd.merge(df,wdf,on='yday')\ndf.head()","d1007544":"\ndf = df.drop(['date','maximum temperature','minimum temperature'],axis=1)","ef5ca391":"sns.set_style('white')\nsns.set_context(\"paper\",font_scale=2)\ncorr = df.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nf, ax = plt.subplots(figsize=(11,9))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=0.3, center=0,\n           square=True, linewidths=0.5, cbar_kws={\"shrink\":0.5})","ba7307ae":"corr.head()","16b1f7ef":"fastest1 = pd.read_csv('..\/input\/new-york-city-taxi-with-osrm\/fastest_routes_train_part_1.csv')\nfastest2 = pd.read_csv('..\/input\/new-york-city-taxi-with-osrm\/fastest_routes_train_part_2.csv')\nfastest = pd.concat([fastest1,fastest2],ignore_index=True)\nfastest = fastest.drop(['step_location_list','step_direction','step_maneuvers','travel_time_per_step','distance_per_step','street_for_each_step','number_of_steps','starting_street','end_street'],axis=1)\nfastest.head() #","5f225d7d":"df = pd.merge(df,fastest,on='id',how='outer')\ndf.head()","2a67f1ba":"mask = ((df.trip_duration > 60) & (df.distance < 0.05))\ndf = df[~mask]\nmask = (df.trip_duration < 60) \ndf = df[~mask]\nmask =  df.trip_duration > 79200\ndf = df[~mask]\nmask = df.distance\/(df.trip_duration\/3600) > 60\ndf = df[~mask]\ndf.trip_duration = df.trip_duration.astype(np.uint16)\ndf = df[df.passenger_count > 0]","8160db27":"m = df.groupby(['wday','vendor_id'])[['trip_duration']].apply(np.median)\nm.name = 'trip_duration_median'\ndf = df.join(m, on=['wday','vendor_id'])","9096ff4d":"sns.lmplot(y='trip_duration_median', x='wday',data=df, fit_reg=False, hue='vendor_id')","d9f9017a":"m = df.groupby(['pu_hour','vendor_id'])[['trip_duration']].apply(np.median)\nm.name ='trip_duration_median_hour'\ndf = df.join(m, on=['pu_hour','vendor_id'])","d3676054":"sns.lmplot(y='trip_duration_median_hour', x='pu_hour',data=df, fit_reg=False, hue='vendor_id')","e763afdd":"jfk_lon = -73.778889\njfk_lat = 40.639722\nlga_lon = -73.872611\nlga_lat = 40.77725","4e221067":"df['jfk_pickup_dist'] = df.apply(lambda row: haversine(jfk_lon, jfk_lat, row['pickup_longitude'],row['pickup_latitude']), axis=1)\ndf['lga_pickup_dist'] = df.apply(lambda row: haversine(lga_lon, lga_lat, row['pickup_longitude'],row['pickup_latitude']), axis=1)\ndf['jfk_dropoff_dist'] = df.apply(lambda row: haversine(jfk_lon, jfk_lat, row['dropoff_longitude'],row['dropoff_latitude']), axis=1)\ndf['lga_dropoff_dist'] = df.apply(lambda row: haversine(lga_lon, lga_lat, row['dropoff_longitude'],row['dropoff_latitude']), axis=1)","abe57116":"fig, ax = plt.subplots(ncols=2, nrows=2, sharex=True)\nax[0,0].set_xlim(0,50)\n\nsns.distplot(df['jfk_pickup_dist'],ax=ax[0,0],bins=100,kde=False,hist_kws={'log':True})\nsns.distplot(df['jfk_dropoff_dist'],ax=ax[0,1],bins=100,kde=False,hist_kws={'log':True})\nsns.distplot(df['lga_pickup_dist'],ax=ax[1,0],bins=100,kde=False,hist_kws={'log':True})\nsns.distplot(df['lga_dropoff_dist'],ax=ax[1,1],bins=100,kde=False,hist_kws={'log':True})","9f7eb924":"df['jfk'] = ((df['jfk_pickup_dist'] < 2) | (df['jfk_dropoff_dist'] < 2))\ndf['lga'] = ((df['lga_pickup_dist'] < 2) | (df['lga_dropoff_dist'] < 2))\ndf = df.drop(['jfk_pickup_dist','lga_pickup_dist','jfk_dropoff_dist','lga_dropoff_dist'],axis=1)\ndf.head()","d0d9ced1":"\ndf['workday'] = ((df['pu_hour'] > 8) & (df['pu_hour'] < 18))\ndf.head()","6ea19421":"fig, ax = plt.subplots(ncols=1, nrows=1,figsize=(12,10))\nplt.ylim(40.6, 40.9)\nplt.xlim(-74.1,-73.7)\nax.scatter(df['pickup_longitude'],df['pickup_latitude'], s=0.01, alpha=1)","a4d6fd74":"def rmsle(evaluator,X,real):\n    sum = 0.0\n    predicted = evaluator.predict(X)\n    print(\"Number predicted less than 0: {}\".format(np.where(predicted < 0)[0].shape))\n\n    predicted[predicted < 0] = 0\n    for x in range(len(predicted)):\n        p = np.log(predicted[x]+1)\n        r = np.log(real[x]+1)\n        sum = sum + (p-r)**2\n    return (sum\/len(predicted))**0.5","63434466":"tdf = pd.read_csv('..\/input\/nyc-taxi-trip-duration\/test.csv')\ntdf.pickup_datetime=pd.to_datetime(tdf.pickup_datetime)\n#tdf.dropoff_datetime=pd.to_datetime(tdf.dropoff_datetime)\ntdf['pu_hour'] = tdf.pickup_datetime.dt.hour\ntdf['yday'] = tdf.pickup_datetime.dt.dayofyear\ntdf['wday'] = tdf.pickup_datetime.dt.dayofweek\ntdf['month'] = tdf.pickup_datetime.dt.month\ntdf['distance'] = haversine(tdf.pickup_longitude, tdf.pickup_latitude,\n                                           tdf.dropoff_longitude, tdf.dropoff_latitude)\nfastest_test = pd.read_csv('..\/input\/new-york-city-taxi-with-osrm\/fastest_routes_test.csv')\ntdf = pd.merge(tdf,fastest_test,on='id',how='outer')\ntdf = tdf.drop(['step_location_list','step_direction','step_maneuvers','travel_time_per_step','distance_per_step','street_for_each_step','number_of_steps','starting_street','end_street'],axis=1)\ntdf = pd.merge(tdf,wdf,on='yday')\ntdf = tdf.drop(['date','maximum temperature','minimum temperature'],axis=1)\ntdf['jfk_pickup_dist'] = tdf.apply(lambda row: haversine(jfk_lon, jfk_lat, row['pickup_longitude'],row['pickup_latitude']), axis=1)\ntdf['lga_pickup_dist'] = tdf.apply(lambda row: haversine(lga_lon, lga_lat, row['pickup_longitude'],row['pickup_latitude']), axis=1)\ntdf['jfk_dropoff_dist'] = tdf.apply(lambda row: haversine(jfk_lon, jfk_lat, row['dropoff_longitude'],row['dropoff_latitude']), axis=1)\ntdf['lga_dropoff_dist'] = tdf.apply(lambda row: haversine(lga_lon, lga_lat, row['dropoff_longitude'],row['dropoff_latitude']), axis=1)\ntdf['jfk'] = ((tdf['jfk_pickup_dist'] < 2) | (tdf['jfk_dropoff_dist'] < 2))\ntdf['lga'] = ((tdf['lga_pickup_dist'] < 2) | (tdf['lga_dropoff_dist'] < 2))\ntdf = tdf.drop(['jfk_pickup_dist','lga_pickup_dist','jfk_dropoff_dist','lga_dropoff_dist'],axis=1)\ntdf['workday'] = ((tdf['pu_hour'] > 8) & (tdf['pu_hour'] < 18))","4e654bc4":"tdf['snowfall'] = tdf['snow fall'].replace(['T'],0.05).astype(np.float32)\ntdf['precipitation'] = tdf['precipitation'].replace(['T'],0.05).astype(np.float32)\ntdf['snowdepth'] = tdf['snow depth'].replace(['T'],0.05).astype(np.float32)","3095e6c2":"tdf.head()","84757d98":"features = df[['vendor_id','passenger_count','pickup_latitude','pickup_longitude','dropoff_latitude',\n               'dropoff_longitude','pu_hour','wday','month','workday','precipitation','snowfall',\n               'snowdepth','total_distance','total_travel_time','jfk','lga']]\ntarget = df['trip_duration']","9ce8b45c":"tfeatures = tdf[['vendor_id','passenger_count','pickup_latitude','pickup_longitude',\n                 'dropoff_latitude','dropoff_longitude','pu_hour','wday','month','workday',\n                 'precipitation','snowfall','snowdepth','total_distance','total_travel_time','jfk','lga']]","26cd3205":"reg = xgboost.XGBRegressor(n_estimators=100, learning_rate=0.01, gamma=0, subsample=0.75,\n                           colsample_bytree=1, max_depth=10)\n\ncv = ShuffleSplit(n_splits=4, test_size=0.1, random_state=0)\nprint(cross_val_score(reg, features, np.ravel(target), cv=cv,scoring=rmsle))\nreg.fit(features,target)","371cde54":"pred = reg.predict(tfeatures)\nprint(np.where(pred < 0)[0].shape)","771e893b":"pred[pred < 0] = 0\ntdf['trip_duration']=pred.astype(int)\nout = tdf[['id','trip_duration']]\nout['trip_duration'].isnull().values.any()\nout.to_csv('pred_xgboost.csv',index=False)","63c49e94":"## Load test data","c6d10edf":"## RMSLE: Evaluation Metric","f8bb2169":"## XGBoost"}}