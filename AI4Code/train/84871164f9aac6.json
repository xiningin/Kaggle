{"cell_type":{"5d2b6cc3":"code","73f55084":"code","74a0c060":"code","aed1d824":"code","e095f045":"code","016d6d84":"code","b61da174":"code","fa440a00":"code","394e9321":"code","f507c920":"code","17adfcdc":"code","e50a2bc8":"code","812f6d02":"code","52c9952c":"code","a6ac61a3":"code","830768f4":"code","c46c0dc8":"code","73546970":"code","357008f0":"code","65435359":"code","e746045e":"code","f04d3fb4":"code","818383df":"code","02a19c65":"code","ba22fd5e":"code","a214b2bc":"code","d7eabc69":"code","8e99678a":"code","6282ea02":"code","703171bf":"code","200d050a":"code","3d665115":"code","96a398d5":"code","c9d0ef48":"code","47d08c85":"code","b5ce8e59":"code","773f1e9e":"code","989eb628":"code","38db9ce3":"code","93534a95":"markdown","e642a23c":"markdown","cfe1df37":"markdown","3eb6590c":"markdown","22b62c18":"markdown","80dc7e7a":"markdown","5809161f":"markdown","9b92da0d":"markdown","ba2291fa":"markdown","d086f5b8":"markdown","ac94c10e":"markdown","5b4d54fd":"markdown","9700b3bd":"markdown","74ba366e":"markdown","addb6c9b":"markdown","dd1c2195":"markdown","03d2fdbf":"markdown","36fb6488":"markdown","f1c82375":"markdown","3a105663":"markdown","b892d627":"markdown"},"source":{"5d2b6cc3":"debug = False\n\nskip_bo = True # hyperparameter search\nskip_xgb = True # ensemble with xgb\n\najust_mean = False\n\ndrop_outliers = False\n\ntrain_rounder = False\n\ntime_decay = 0 # 0.01\n\npreprocessed = False\ndirname = '\/kaggle\/input\/datav2\/'\n","73f55084":"import numpy as np\nimport pandas as pd\n\nimport random\nrandom.seed(1029)\nnp.random.seed(1029)\n\nimport os\nimport copy\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import NuSVR, SVR\nfrom sklearn.metrics import mean_absolute_error\npd.options.display.precision = 15\nfrom collections import defaultdict\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cat\nimport time\nfrom collections import Counter\nimport datetime\nfrom catboost import CatBoostRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold, KFold, RepeatedKFold, GroupKFold, GridSearchCV, train_test_split, TimeSeriesSplit, RepeatedStratifiedKFold\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn import linear_model\nfrom sklearn.base import BaseEstimator, TransformerMixin\nimport gc\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom bayes_opt import BayesianOptimization\nimport eli5\nimport shap\nfrom IPython.display import HTML\nimport json\nimport altair as alt\nfrom category_encoders.ordinal import OrdinalEncoder\nimport networkx as nx\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom typing import List\n\nimport json\nfrom numba import jit\n\nfrom functools import partial\nimport scipy as sp\n\nfrom tqdm import tqdm, tqdm_notebook\n\nfrom typing import Any\nfrom itertools import product\npd.set_option('max_rows', 500)\nimport re\nfrom joblib import Parallel, delayed","74a0c060":"@jit\ndef qwk(a1, a2):\n    \"\"\"\n    Source: https:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/114133#latest-660168\n\n    :param a1:\n    :param a2:\n    :param max_rat:\n    :return:\n    \"\"\"\n    max_rat = 3\n    a1 = np.asarray(a1, dtype=int)\n    a2 = np.asarray(a2, dtype=int)\n\n    hist1 = np.zeros((max_rat + 1, ))\n    hist2 = np.zeros((max_rat + 1, ))\n\n    o = 0\n    for k in range(a1.shape[0]):\n        i, j = a1[k], a2[k]\n        hist1[i] += 1\n        hist2[j] += 1\n        o +=  (i - j) * (i - j)\n\n    e = 0\n    for i in range(max_rat + 1):\n        for j in range(max_rat + 1):\n            e += hist1[i] * hist2[j] * (i - j) * (i - j)\n\n    e = e \/ a1.shape[0]\n\n    return 1 - o \/ e","aed1d824":"# \u30b3\u30fc\u30c9\u306f(https:\/\/www.kaggle.com\/braquino\/890-features)\u3092\u5143\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\ndef read_data():\n    print('Reading train.csv file....')\n    train = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train.csv')\n    print('Training.csv file have {} rows and {} columns'.format(train.shape[0], train.shape[1]))\n\n    print('Reading test.csv file....')\n    test = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/test.csv')\n    print('Test.csv file have {} rows and {} columns'.format(test.shape[0], test.shape[1]))\n\n    print('Reading train_labels.csv file....')\n    train_labels = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv')\n    print('Train_labels.csv file have {} rows and {} columns'.format(train_labels.shape[0], train_labels.shape[1]))\n\n    print('Reading specs.csv file....')\n    specs = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/specs.csv')\n    print('Specs.csv file have {} rows and {} columns'.format(specs.shape[0], specs.shape[1]))\n\n    print('Reading sample_submission.csv file....')\n    sample_submission = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv')\n    print('Sample_submission.csv file have {} rows and {} columns'.format(sample_submission.shape[0], sample_submission.shape[1]))\n    return train, test, train_labels, specs, sample_submission\n","e095f045":"def encode_title(train, test, train_labels):\n    # encode title\n    train['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), train['title'], train['event_code']))\n    test['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), test['title'], test['event_code']))\n    all_title_event_code = list(set(train[\"title_event_code\"].unique()).union(test[\"title_event_code\"].unique()))\n    \n    train['type_world'] = list(map(lambda x, y: str(x) + '_' + str(y), train['type'], train['world']))\n    test['type_world'] = list(map(lambda x, y: str(x) + '_' + str(y), test['type'], test['world']))\n    all_type_world = list(set(train[\"type_world\"].unique()).union(test[\"type_world\"].unique()))\n    \n    # make a list with all the unique 'titles' from the train and test set\n    list_of_user_activities = list(set(train['title'].unique()).union(set(test['title'].unique())))\n    # make a list with all the unique 'event_code' from the train and test set\n    list_of_event_code = list(set(train['event_code'].unique()).union(set(test['event_code'].unique())))\n    list_of_event_id = list(set(train['event_id'].unique()).union(set(test['event_id'].unique())))\n    # make a list with all the unique worlds from the train and test set\n    list_of_worlds = list(set(train['world'].unique()).union(set(test['world'].unique())))\n    # create a dictionary numerating the titles\n    activities_map = dict(zip(list_of_user_activities, np.arange(len(list_of_user_activities))))\n    activities_labels = dict(zip(np.arange(len(list_of_user_activities)), list_of_user_activities))\n    activities_world = dict(zip(list_of_worlds, np.arange(len(list_of_worlds))))\n    assess_titles = list(set(train[train['type'] == 'Assessment']['title'].value_counts().index).union(\n        set(test[test['type'] == 'Assessment']['title'].value_counts().index)))\n    # replace the text titles with the number titles from the dict\n    train['title'] = train['title'].map(activities_map)\n    test['title'] = test['title'].map(activities_map)\n    train['world'] = train['world'].map(activities_world)\n    test['world'] = test['world'].map(activities_world)\n    train_labels['title'] = train_labels['title'].map(activities_map)\n    \n    win_code = dict(zip(activities_map.values(), (4100*np.ones(len(activities_map))).astype('int')))\n    # then, it set one element, the 'Bird Measurer (Assessment)' as 4110, 10 more than the rest\n    win_code[activities_map['Bird Measurer (Assessment)']] = 4110\n    # convert text into datetime\n    train['timestamp'] = pd.to_datetime(train['timestamp'])\n    test['timestamp'] = pd.to_datetime(test['timestamp'])\n    \n    train['hour'] = train['timestamp'].dt.hour\n    test['hour'] = test['timestamp'].dt.hour\n    train['weekday'] = train['timestamp'].dt.weekday\n    test['weekday'] = test['timestamp'].dt.weekday\n    \n    return train, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code, activities_map, all_type_world\n","016d6d84":"clip_time = {'Welcome to Lost Lagoon!':19,'Tree Top City - Level 1':17,'Ordering Spheres':61, 'Costume Box':61,\n        '12 Monkeys':109,'Tree Top City - Level 2':25, 'Pirate\\'s Tale':80, 'Treasure Map':156,'Tree Top City - Level 3':26,\n        'Rulers':126, 'Magma Peak - Level 1':20, 'Slop Problem':60, 'Magma Peak - Level 2':22, 'Crystal Caves - Level 1':18,\n        'Balancing Act':72, 'Lifting Heavy Things':118,'Crystal Caves - Level 2':24, 'Honey Cake':142, 'Crystal Caves - Level 3':19,\n        'Heavy, Heavier, Heaviest':61}\n\ndef get_data(user_sample, test_set=False):\n    '''\n    The user_sample is a DataFrame from train or test where the only one \n    installation_id is filtered\n    And the test_set parameter is related with the labels processing, that is only requered\n    if test_set=False\n    '''\n    # This the where we reduce the information per installation_id.\n    \n    # Constants and parameters declaration\n    last_activity = 0\n    \n    if time_decay == 0:\n        user_activities_count = {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n    else:\n        user_activities_count = {'Clip':0.0, 'Activity': 0.0, 'Assessment': 0.0, 'Game':0.0}\n    \n    assess_4020_acc_dict = {'Cauldron Filler (Assessment)_4020_accuracy':0,\n                                'Mushroom Sorter (Assessment)_4020_accuracy':0,\n                                'Bird Measurer (Assessment)_4020_accuracy':0,\n                                'Chest Sorter (Assessment)_4020_accuracy':0 }\n    \n    # new features: time spent in each activity\n    last_session_time_sec = 0\n    accuracy_groups = {0:0, 1:0, 2:0, 3:0}\n    all_assessments = []\n    accumulated_accuracy_group = 0\n    accumulated_accuracy = 0\n    accumulated_correct_attempts = 0 \n    accumulated_uncorrect_attempts = 0\n    accumulated_actions = 0\n    \n    accumulated_game_miss = 0\n    mean_game_level = 0\n    \n    Cauldron_Filler_4025 = 0\n    chest_assessment_uncorrect_sum = 0 # incorrect id = df4fe8b6\n    \n    counter = 0\n    time_first_activity = float(user_sample['timestamp'].values[0])    \n    durations = []    \n    last_accuracy_title = {'acc_' + title: -1 for title in assess_titles}    \n    \n    def cnt_miss(df):\n        cnt = 0\n        for e in range(len(df)):\n            x = df['event_data'].iloc[e]\n            y = json.loads(x)['misses']\n            cnt += y\n        return cnt\n\n    def get_4020_acc(df,counter_dict):\n\n        for e in ['Cauldron Filler (Assessment)','Bird Measurer (Assessment)','Mushroom Sorter (Assessment)','Chest Sorter (Assessment)']:\n\n            Assess_4020 = df[(df.event_code == 4020) & (df.title==activities_map[e])]   \n            true_attempts_ = Assess_4020['event_data'].str.contains('true').sum()\n            false_attempts_ = Assess_4020['event_data'].str.contains('false').sum()\n\n            measure_assess_accuracy_ = true_attempts_\/(true_attempts_+false_attempts_) if (true_attempts_+false_attempts_) != 0 else 0\n            counter_dict[e+\"_4020_accuracy\"] += (counter_dict[e+\"_4020_accuracy\"] + measure_assess_accuracy_) \/ 2.0\n\n        return counter_dict\n    \n    if time_decay == 0:\n        event_code_count: Dict[str, float] = {ev: 0.0 for ev in list_of_event_code}\n        event_id_count: Dict[str, float] = {eve: 0.0 for eve in list_of_event_id}\n        title_count: Dict[str, float] = {eve: 0.0 for eve in activities_labels.values()} \n        title_event_code_count: Dict[str, float] = {t_eve: 0.0 for t_eve in all_title_event_code}\n        type_world_count: Dict[str, float] = {eve: 0.0 for eve in all_type_world}\n    else:\n        event_code_count: Dict[str, int] = {ev: 0 for ev in list_of_event_code}\n        event_id_count: Dict[str, int] = {eve: 0 for eve in list_of_event_id}\n        title_count: Dict[str, int] = {eve: 0 for eve in activities_labels.values()} \n        title_event_code_count: Dict[str, int] = {t_eve: 0 for t_eve in all_title_event_code}\n        type_world_count: Dict[str, int] = {eve: 0 for eve in all_type_world}\n\n    # Features for each type.\n    clip_durations = []\n    activity_durations = []\n    game_durations = []\n    activity_sum_event_count = 0\n    game_sum_event_count = 0\n    activity_event_code_count: Dict[str, int] = {str(eve) + '_a': 0 for eve in list_of_event_code}\n    game_event_code_count: Dict[str, int] = {str(eve) + '_g': 0 for eve in list_of_event_code}\n    \n    # itarates through each session of one instalation_id\n    for i, session in user_sample.groupby('game_session', sort=False):\n        # i = game_session_id\n        # session is a DataFrame that contain only one game_session\n        \n        # get some sessions information\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]\n        session_title_text = activities_labels[session_title]\n        \n        if session_type == 'Clip':\n            clip_durations.append((clip_time[activities_labels[session_title]]))\n            \n        if session_type == 'Activity':\n            activity_sum_event_count += session['event_count'].iloc[-1]\n            activity_durations.append((session.iloc[-1, 2] - session.iloc[0, 2]).seconds)\n            def update_counters(counter: dict, col: str):\n                num_of_session_count = Counter(session[col])\n                for k in num_of_session_count.keys():\n                    x = str(k) + '_a'\n                    if col == 'title':\n                        x = activities_labels[k]\n                    counter[x] += num_of_session_count[k]\n                return counter\n            activity_event_code_count = update_counters(activity_event_code_count, \"event_code\")\n            \n        if session_type == 'Game':\n            game_sum_event_count += session['event_count'].iloc[-1]\n            game_durations.append((session.iloc[-1, 2] - session.iloc[0, 2]).seconds)\n            def update_counters(counter: dict, col: str):\n                num_of_session_count = Counter(session[col])\n                for k in num_of_session_count.keys():\n                    x = str(k) + '_g'\n                    if col == 'title':\n                        x = activities_labels[k]\n                    counter[x] += num_of_session_count[k]\n                return counter\n            game_event_code_count = update_counters(game_event_code_count, \"event_code\")        \n        \n            game_s = session[session.event_code == 2030]\n            misses_cnt = cnt_miss(game_s)\n            accumulated_game_miss += misses_cnt\n            \n            try:\n                game_level = json.loads(session['event_data'].iloc[-1])['level']\n                mean_game_level = (mean_game_level + game_level) \/ 2.0\n            except:\n                pass\n        \n        if (session_type == 'Assessment') & (test_set or len(session)>1):\n            # search for event_code 4100, that represents the assessments trial\n            all_attempts = session.query(f'event_code == {win_code[session_title]}')\n            # then, check the numbers of wins and the number of losses\n            true_attempts = all_attempts['event_data'].str.contains('true').sum()\n            false_attempts = all_attempts['event_data'].str.contains('false').sum()\n            # copy a dict to use as feature template, it's initialized with some itens: \n            # {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n            features = user_activities_count.copy()\n            features.update(last_accuracy_title.copy())\n            features.update(event_code_count.copy())\n            features.update(event_id_count.copy())\n            features.update(title_count.copy())\n            features.update(title_event_code_count.copy())\n            features.update(last_accuracy_title.copy())\n            \n            features.update(assess_4020_acc_dict.copy())\n            features.update(type_world_count.copy())\n\n            features['hour'] = session['hour'].iloc[-1]\n            features['weekday'] = session['weekday'].iloc[-1]            \n            \n            # get installation_id for aggregated features\n            features['installation_id'] = session['installation_id'].iloc[-1]\n            # add title as feature, remembering that title represents the name of the game\n            features['session_title'] = session['title'].iloc[0]\n            # the 4 lines below add the feature of the history of the trials of this player\n            # this is based on the all time attempts *so far*, at the moment of this assessment\n            features['accumulated_correct_attempts'] = accumulated_correct_attempts\n            features['accumulated_uncorrect_attempts'] = accumulated_uncorrect_attempts\n            accumulated_correct_attempts += true_attempts \n            accumulated_uncorrect_attempts += false_attempts\n            # the time spent in the app so far\n            if durations == []:\n                features['duration_mean'] = 0\n            else:\n                features['duration_mean'] = np.mean(durations)\n            durations.append((session.iloc[-1, 2] - session.iloc[0, 2] ).seconds)\n            # the accurace is the all time wins divided by the all time attempts\n            features['accumulated_accuracy'] = accumulated_accuracy\/counter if counter > 0 else 0\n            accuracy = true_attempts\/(true_attempts+false_attempts) if (true_attempts+false_attempts) != 0 else 0\n            accumulated_accuracy += accuracy\n            last_accuracy_title['acc_' + session_title_text] = accuracy\n            # a feature of the current accuracy categorized\n            # it is a counter of how many times this player was in each accuracy group\n            if accuracy == 0:\n                features['accuracy_group'] = 0\n            elif accuracy == 1:\n                features['accuracy_group'] = 3\n            elif accuracy == 0.5:\n                features['accuracy_group'] = 2\n            else:\n                features['accuracy_group'] = 1\n            features.update(accuracy_groups)\n            accuracy_groups[features['accuracy_group']] += 1\n            # mean of the all accuracy groups of this player\n            features['accumulated_accuracy_group'] = accumulated_accuracy_group\/counter if counter > 0 else 0\n            accumulated_accuracy_group += features['accuracy_group']\n            # how many actions the player has done so far, it is initialized as 0 and updated some lines below\n            features['accumulated_actions'] = accumulated_actions\n            \n            # Features for each types\n            if clip_durations == []:\n                # it never happens, but in case.\n                features['clip_duration_mean'] = 0\n                features['clip_duration_std'] = 0\n            else:\n                features['clip_duration_mean'] = np.mean(clip_durations)\n                features['clip_duration_std'] = np.std(clip_durations)\n\n            if activity_durations == []:\n                # it never happens, but in case.\n                features['activity_duration_mean'] = 0\n                features['activity_duration_std'] = 0\n            else:\n                features['activity_duration_mean'] = np.mean(activity_durations)\n                features['activity_duration_std'] = np.std(activity_durations)\n\n            if game_durations == []:\n                # it never happens, but in case.\n                features['game_duration_mean'] = 0\n                features['game_duration_std'] = 0\n            else:\n                features['game_duration_mean'] = np.mean(game_durations)\n                features['game_duration_std'] = np.std(game_durations)\n                \n            features['activitiy_sum_event_count'] = activity_sum_event_count\n            features['game_sum_event_count'] = game_sum_event_count\n\n            features['accumulated_game_miss'] = accumulated_game_miss\n            features['mean_game_level'] = mean_game_level\n            features['chest_assessment_uncorrect_sum'] = chest_assessment_uncorrect_sum\n                \n            features.update(game_event_code_count.copy())\n            features.update(activity_event_code_count.copy())\n            \n            variety_features = [('var_event_code', event_code_count),\n                              ('var_event_id', event_id_count),\n                               ('var_title', title_count),\n                               ('var_title_event_code', title_event_code_count),\n                                ('var_type_world', type_world_count)]\n            \n            for name, dict_counts in variety_features:\n                arr = np.array(list(dict_counts.values()))\n                features[name] = np.count_nonzero(arr)\n                \n            features['Cauldron_Filler_4025'] = Cauldron_Filler_4025\/counter if counter > 0 else 0\n            ####################\n            Assess_4025 = session[(session.event_code == 4025) & (session.title=='Cauldron Filler (Assessment)')]   \n            true_attempts_ = Assess_4025['event_data'].str.contains('true').sum()\n            false_attempts_ = Assess_4025['event_data'].str.contains('false').sum()\n\n            cau_assess_accuracy_ = true_attempts_\/(true_attempts_+false_attempts_) if (true_attempts_+false_attempts_) != 0 else 0\n            Cauldron_Filler_4025 += cau_assess_accuracy_\n            \n            chest_assessment_uncorrect_sum += len(session[session.event_id==\"df4fe8b6\"])\n                \n            # there are some conditions to allow this features to be inserted in the datasets\n            # if it's a test set, all sessions belong to the final dataset\n            # it it's a train, needs to be passed throught this clausule: session.query(f'event_code == {win_code[session_title]}')\n            # that means, must exist an event_code 4100 or 4110\n            if test_set:\n                all_assessments.append(features)\n            elif true_attempts+false_attempts > 0:\n                all_assessments.append(features)\n                \n            counter += 1\n        \n        # this piece counts how many actions was made in each event_code so far\n        def update_counters(counter: dict, col: str):\n                num_of_session_count = Counter(session[col])\n                for k in num_of_session_count.keys():\n                    x = k\n                    if col == 'title':\n                        x = activities_labels[k]\n                    counter[x] += num_of_session_count[k]\n                return counter\n        \n        event_code_count = update_counters(event_code_count, \"event_code\")\n        event_id_count = update_counters(event_id_count, \"event_id\")\n        title_count = update_counters(title_count, 'title')\n        title_event_code_count = update_counters(title_event_code_count, 'title_event_code')\n        type_world_count = update_counters(type_world_count, 'type_world')\n        \n        assess_4020_acc_dict = get_4020_acc(session, assess_4020_acc_dict)\n        \n        # counts how many actions the player has done so far, used in the feature of the same name\n        accumulated_actions += len(session)\n        if last_activity != session_type:\n            user_activities_count[session_type] += 1\n            last_activitiy = session_type \n\n        if not (time_decay == 0):\n            user_activities_count = {x:y*(1.0 - time_decay) for (x, y) in user_activities_count.items()}\n            event_code_count = {x:y*(1.0 - time_decay) for (x, y) in event_code_count.items()}\n            event_id_count = {x:y*(1.0 - time_decay) for (x, y) in event_id_count.items()}\n            title_count = {x:y*(1.0 - time_decay) for (x, y) in title_count.items()}\n            title_event_code_count = {x:y*(1.0 - time_decay) for (x, y) in title_event_code_count.items()}\n            accumulated_actions = accumulated_actions * (1.0 - time_decay)\n                        \n    # if it't the test_set, only the last assessment must be predicted, the previous are scraped\n    if test_set:\n        return all_assessments[-1]\n    # in the train_set, all assessments goes to the dataset\n    return all_assessments\n\ndef get_train_and_test(train, test):\n    compiled_train = []\n    compiled_test = []\n    # We don't need to take all the users because some of the users didn't take assessment.\n    for i, (ins_id, user_sample) in tqdm(enumerate(train.groupby('installation_id', sort = False)), total = 17000):\n        compiled_train += get_data(user_sample)\n    for ins_id, user_sample in tqdm(test.groupby('installation_id', sort = False), total = 1000):\n        test_data = get_data(user_sample, test_set = True)\n        compiled_test.append(test_data)\n    reduce_train = pd.DataFrame(compiled_train)\n    reduce_test = pd.DataFrame(compiled_test)\n    categoricals = ['session_title']\n    return reduce_train, reduce_test, categoricals\n\n","b61da174":"if not preprocessed:\n    # read data\n    train, test, train_labels, specs, sample_submission = read_data()\n    # get usefull dict with maping encode\n    train, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code, activities_map, all_type_world = encode_title(train, test, train_labels)\n    # tranform function to get the train and test set\n    reduce_train, reduce_test, categoricals = get_train_and_test(train, test)\nelse:\n    # Read the sample_submission file\n    print('Reading sample_submission.csv file....')\n    sample_submission = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv')\n    print('Sample_submission.csv file have {} rows and {} columns'.format(sample_submission.shape[0], sample_submission.shape[1]))\n","fa440a00":"def preprocess(reduce_train, reduce_test):\n    for df in [reduce_train, reduce_test]:\n        df['installation_session_count'] = df.groupby(['installation_id'])['Clip'].transform('count')\n        df['installation_duration_mean'] = df.groupby(['installation_id'])['duration_mean'].transform('mean')\n        #df['installation_duration_std'] = df.groupby(['installation_id'])['duration_mean'].transform('std')\n        df['installation_title_nunique'] = df.groupby(['installation_id'])['session_title'].transform('nunique')\n        \n        df['sum_event_code_count'] = df[[2050, 4100, 4230, 5000, 4235, 2060, 4110, 5010, 2070, 2075, 2080, 2081, 2083, 3110, 4010, 3120, 3121, 4020, 4021, \n                                        4022, 4025, 4030, 4031, 3010, 4035, 4040, 3020, 3021, 4045, 2000, 4050, 2010, 2020, 4070, 2025, 2030, 4080, 2035, \n                                        2040, 4090, 4220, 4095]].sum(axis = 1)\n        \n        df['installation_event_code_count_mean'] = df.groupby(['installation_id'])['sum_event_code_count'].transform('mean')\n        #df['installation_event_code_count_std'] = df.groupby(['installation_id'])['sum_event_code_count'].transform('std')\n        \n    features = reduce_train.loc[(reduce_train.sum(axis=1) != 0), (reduce_train.sum(axis=0) != 0)].columns # delete useless columns\n    features = [x for x in features if x not in ['accuracy_group', 'installation_id']] + ['acc_' + title for title in assess_titles]\n   \n    return reduce_train, reduce_test, features\n","394e9321":"# Save data\nif time_decay == 0:\n    d = \"\"    \nelse:\n    d = '_' + str(time_decay)\n\nif preprocessed:\n    reduce_train = pd.read_csv(dirname + 'reduce_train' + d + '.csv', index_col=0)\n    reduce_test = pd.read_csv(dirname + 'reduce_test' + d + '.csv', index_col=0)\n    # features = read_csv(dirname + 'features.csv')\n\n    codes = [0, 1, 2050, 2, 4100, 3, 4230, 5000, 4235, 2060, 4110, 5010, 2070, 2075, 2080, 2081, 2083, 3110, 4010, 3120, 3121, 4020, 4021, 4022, 4025, 4030, 4031, 3010, 4035, 4040, 3020, 3021, 4045, 2000, 4050, 2010, 2020, 4070, 2025, 2030, 4080, 2035, 2040, 4090, 4220, 4095]\n    enc = {}\n    for i in codes:\n        enc[str(i)] = i\n    reduce_train.rename(columns=enc, inplace=True)\n    reduce_test.rename(columns=enc, inplace=True)\n\nelse:\n    reduce_train, reduce_test, _ = preprocess(reduce_train, reduce_test)\n        \n    reduce_train.to_csv('reduce_train' + d + '.csv')\n    reduce_test.to_csv('reduce_test' + d + '.csv')\n    # print(\"features=\", features)\n","f507c920":"reduce_train.head()","17adfcdc":"########################################\n# Data exploration\n########################################\n# Interestingly, features skewed in the training set is \n# not always skewed in test set and visa versa.\nreal_values = reduce_train.dtypes[reduce_train.dtypes == 'float64'].index\nskewness_train = reduce_train[real_values].skew(axis=0, skipna=True).sort_values(ascending=False)\n\nskewness_test = reduce_test[real_values].skew(axis=0, skipna=True).sort_values(ascending=False)\n\nprint(real_values)","e50a2bc8":"skewed_features_train = skewness_train[abs(skewness_train) > 0.8].index\nskewed_features_test = skewness_test[abs(skewness_test) > 0.8].index\n\nprint(skewed_features_train.shape)\nprint(skewed_features_test.shape)","812f6d02":"from scipy.special import boxcox1p\nfrom scipy import stats\nfrom scipy.stats import norm\n\nfeature = 'duration_mean'\nprint('feature=', feature)\ndset = reduce_train\n\nprint('before rescaling', dset[feature].skew(axis=0, skipna=True))\n\nif dset[feature].skew(axis=0, skipna=True) > 0.0:\n    sns.distplot(dset[feature], fit=norm)\n    fig = plt.figure()\n    res = stats.probplot(dset[feature], plot=plt)","52c9952c":"rescaled = boxcox1p(dset[feature], 0.15)\n\nprint('after rescaling', rescaled.skew(axis=0, skipna=True))\n\nsns.distplot(rescaled, fit=norm)\nfig = plt.figure()\nres = stats.probplot(rescaled, plot=plt)\n\nrescaled = boxcox1p(rescaled, 0.15)\n","a6ac61a3":"# Preprocessing features with high skewness\nreduce_train['installation_event_code_count_mean'] = boxcox1p(reduce_train['installation_event_code_count_mean'], 0.15)\nreduce_test['installation_event_code_count_mean'] = boxcox1p(reduce_test['installation_event_code_count_mean'], 0.15)\n\nreduce_train['game_duration_mean'] = boxcox1p(reduce_train['game_duration_mean'], 0.15)\nreduce_test['game_duration_mean'] = boxcox1p(reduce_test['game_duration_mean'], 0.15)\n\nreduce_train['installation_duration_mean'] = boxcox1p(reduce_train['installation_duration_mean'], 0.15)\nreduce_test['installation_duration_mean'] = boxcox1p(reduce_test['installation_duration_mean'], 0.15)\n\nreduce_train['sum_event_code_count'] = boxcox1p(reduce_train['sum_event_code_count'], 0.15)\nreduce_test['sum_event_code_count'] = boxcox1p(reduce_test['sum_event_code_count'], 0.15)\n\nreduce_train['accumulated_game_miss'] = boxcox1p(reduce_train['accumulated_game_miss'], 0.15)\nreduce_test['accumulated_game_miss'] = boxcox1p(reduce_test['accumulated_game_miss'], 0.15)\n\nreduce_train['duration_mean'] = boxcox1p(reduce_train['duration_mean'], 0.15)\nreduce_test['duration_mean'] = boxcox1p(reduce_test['duration_mean'], 0.15)\n\n","830768f4":"# Seaborn doesn't recognize indices in dtype=int.\n# So we temporarily set it back to string for plotting.\ncodes = [0, 1, 2050, 2, 4100, 3, 4230, 5000, 4235, 2060, 4110, 5010, 2070, 2075, 2080, 2081, 2083, 3110, 4010, 3120, 3121, 4020, 4021, 4022, 4025, 4030, 4031, 3010, 4035, 4040, 3020, 3021, 4045, 2000, 4050, 2010, 2020, 4070, 2025, 2030, 4080, 2035, 2040, 4090, 4220, 4095]\nenc = {}\nfor i in codes:\n    enc[i] = str(i)\nreduce_train.rename(columns=enc, inplace=True)\nreduce_test.rename(columns=enc, inplace=True)\n","c46c0dc8":"if drop_outliers:\n    covs = reduce_train.cov()['accuracy_group']\n    covs_sorted = covs.abs().sort_values(ascending=False)\n    covs_sorted.head(10)\n\n    # change i to visualize each feature\n    feature = '4070'\n    sns.regplot(x=feature, y=\"accuracy_group\", data=reduce_train, y_jitter=0.1)\n\n    # Before removing outlier","73546970":"if drop_outliers:\n    outliers_ = reduce_train[reduce_train[feature] > 3000].index\n    removed_ = reduce_train.drop(outliers_)\n\n    # reduce_train.plot(kind='scatter', x=covs_sorted.index[i], y=\"accuracy_group\")\n    sns.regplot(x=feature, y=\"accuracy_group\", data=removed_, y_jitter=0.1)\n    print(removed_.shape)\n\n    # After removing outlier","357008f0":"if drop_outliers:\n    outliers = [('4070', 3000), ('duration_mean', 50000), ('installation_duration_mean', 30000),\n               ('Cauldron Filler (Assessment)', 1200), ('3020', 400), ('3120', 400),\n               ('Cart Balancer (Assessment)', 1000), ('Crystals Rule', 2000), ('4035', 400),\n               ('Bubble Bath', 2000), ('1325467d', 500)]\n\n    for o in outliers:\n        outlier = reduce_train[reduce_train[o[0]] > o[1]].index\n        reduce_train.drop(outlier, inplace=True)\n\n    print(reduce_train.shape)\n","65435359":"codes = [0, 1, 2050, 2, 4100, 3, 4230, 5000, 4235, 2060, 4110, 5010, 2070, 2075, 2080, 2081, 2083, 3110, 4010, 3120, 3121, 4020, 4021, 4022, 4025, 4030, 4031, 3010, 4035, 4040, 3020, 3021, 4045, 2000, 4050, 2010, 2020, 4070, 2025, 2030, 4080, 2035, 2040, 4090, 4220, 4095]\nenc = {}\nfor i in codes:\n    enc[str(i)] = i\nreduce_train.rename(columns=enc, inplace=True)\nreduce_test.rename(columns=enc, inplace=True)","e746045e":"# We don't want to use features with their distribution very different in two data sets.\n\nif ajust_mean:\n    to_drop = []\n    for f in reduce_train.select_dtypes(include=np.number).columns.tolist():\n        train_mean = reduce_train[f].mean()\n        test_mean = reduce_test[f].mean()\n        if train_mean == 0.0 or test_mean == 0.0:\n            continue\n        else:\n            mean_ratio = train_mean \/ test_mean\n            if mean_ratio > 10.0 or mean_ratio < 1.0 \/ 10.0:\n                print('### drop feature', f, 'as it is very different in train and test: ', mean_ratio)\n                to_drop.append(f)\n\n    reduce_train.drop(to_drop, axis=1, inplace=True, errors='ignore')\n    reduce_test.drop(to_drop, axis=1, inplace=True, errors='ignore')\n\n    print(reduce_train.shape)","f04d3fb4":"# Correlation of features\n# We want to avoid using features with high correlation in test set.\ncorr_matrix = reduce_test.corr().abs()\n\nupper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\n\n# TODO: 0.95 may be too aggressive? Use 0.99 instead?\nto_drop = [column for column in upper.columns if any(upper[column] > 0.99)]","818383df":"# Drop features with features with high correlation to other features\nreduce_train.drop(to_drop, axis=1, inplace=True, errors='ignore')\nreduce_test.drop(to_drop, axis=1, inplace=True, errors='ignore')\n\nprint(len(to_drop))\nprint(reduce_train.shape)","02a19c65":"def eval_qwk_lgb_regr(y_true, y_pred):\n    \"\"\"\n    Fast cappa eval function for lgb.\n    \"\"\"\n    y_pred[y_pred <= 1.12232214] = 0\n    y_pred[np.where(np.logical_and(y_pred > 1.12232214, y_pred <= 1.73925866))] = 1\n    y_pred[np.where(np.logical_and(y_pred > 1.73925866, y_pred <= 2.22506454))] = 2\n    y_pred[y_pred > 2.22506454] = 3\n\n    # y_pred = y_pred.reshape(len(np.unique(y_true)), -1).argmax(axis=0)\n\n    return 'cappa', qwk(y_true, y_pred), True\n\n\nclass LGBWrapper_regr(object):\n    \"\"\"\n    A wrapper for lightgbm model so that we will have a single api for various models.\n    \"\"\"\n\n    def __init__(self):\n        self.model = lgb.LGBMRegressor()\n\n    def fit(self, X_train, y_train, X_valid=None, y_valid=None, X_holdout=None, y_holdout=None, params=None):\n        if params['objective'] == 'regression':\n            eval_metric = eval_qwk_lgb_regr\n        else:\n            eval_metric = 'auc'\n\n        eval_set = [(X_train, y_train)]\n        eval_names = ['train']\n        self.model = self.model.set_params(**params)\n\n        if X_valid is not None:\n            eval_set.append((X_valid, y_valid))\n            eval_names.append('valid')\n\n        if X_holdout is not None:\n            eval_set.append((X_holdout, y_holdout))\n            eval_names.append('holdout')\n\n        if 'cat_cols' in params.keys():\n            cat_cols = [col for col in params['cat_cols'] if col in X_train.columns]\n            if len(cat_cols) > 0:\n                categorical_columns = params['cat_cols']\n            else:\n                categorical_columns = 'auto'\n        else:\n            categorical_columns = 'auto'\n\n        self.model.fit(X=X_train, y=y_train,\n                       eval_set=eval_set, eval_names=eval_names, eval_metric=eval_metric,\n                       verbose=params['verbose'], early_stopping_rounds=params['early_stopping_rounds'],\n                       categorical_feature=categorical_columns)\n\n        self.best_score_ = self.model.best_score_\n        self.feature_importances_ = self.model.feature_importances_\n\n    def predict(self, X_test):\n        return self.model.predict(X_test, num_iteration=self.model.best_iteration_)\n\n\ndef eval_qwk_xgb(y_pred, y_true):\n    \"\"\"\n    Fast cappa eval function for xgb.\n    \"\"\"\n    # print('y_true', y_true)\n    # print('y_pred', y_pred)\n    y_true = y_true.get_label()\n    y_pred = y_pred.argmax(axis=1)\n    return 'cappa', -qwk(y_true, y_pred)\n\n\nclass MainTransformer(BaseEstimator, TransformerMixin):\n\n    def __init__(self, convert_cyclical: bool = False, create_interactions: bool = False, n_interactions: int = 20):\n        \"\"\"\n        Main transformer for the data. Can be used for processing on the whole data.\n\n        :param convert_cyclical: convert cyclical features into continuous\n        :param create_interactions: create interactions between features\n        \"\"\"\n\n        self.convert_cyclical = convert_cyclical\n        self.create_interactions = create_interactions\n        self.feats_for_interaction = None\n        self.n_interactions = n_interactions\n\n    def fit(self, X, y=None):\n\n        if self.create_interactions:\n            self.feats_for_interaction = [col for col in X.columns if 'sum' in col\n                                          or 'mean' in col or 'max' in col or 'std' in col\n                                          or 'attempt' in col]\n            self.feats_for_interaction1 = np.random.choice(self.feats_for_interaction, self.n_interactions)\n            self.feats_for_interaction2 = np.random.choice(self.feats_for_interaction, self.n_interactions)\n\n        return self\n\n    def transform(self, X, y=None):\n        data = copy.deepcopy(X)\n        if self.create_interactions:\n            for col1 in self.feats_for_interaction1:\n                for col2 in self.feats_for_interaction2:\n                    data[f'{col1}_int_{col2}'] = data[col1] * data[col2]\n\n        if self.convert_cyclical:\n            data['timestampHour'] = np.sin(2 * np.pi * data['timestampHour'] \/ 23.0)\n            data['timestampMonth'] = np.sin(2 * np.pi * data['timestampMonth'] \/ 23.0)\n            data['timestampWeek'] = np.sin(2 * np.pi * data['timestampWeek'] \/ 23.0)\n            data['timestampMinute'] = np.sin(2 * np.pi * data['timestampMinute'] \/ 23.0)\n\n        return data\n\n    def fit_transform(self, X, y=None, **fit_params):\n        data = copy.deepcopy(X)\n        self.fit(data)\n        return self.transform(data)\n\n\nclass FeatureTransformer(BaseEstimator, TransformerMixin):\n\n    def __init__(self, main_cat_features: list = None, num_cols: list = None):\n        \"\"\"\n\n        :param main_cat_features:\n        :param num_cols:\n        \"\"\"\n        self.main_cat_features = main_cat_features\n        self.num_cols = num_cols\n\n    def fit(self, X, y=None):\n\n#         self.num_cols = [col for col in X.columns if 'sum' in col or 'mean' in col or 'max' in col or 'std' in col\n#                          or 'attempt' in col]\n        \n\n        return self\n\n    def transform(self, X, y=None):\n        data = copy.deepcopy(X)\n#         for col in self.num_cols:\n#             data[f'{col}_to_mean'] = data[col] \/ data.groupby('installation_id')[col].transform('mean')\n#             data[f'{col}_to_std'] = data[col] \/ data.groupby('installation_id')[col].transform('std')\n\n        return data\n\n    def fit_transform(self, X, y=None, **fit_params):\n        data = copy.deepcopy(X)\n        self.fit(data)\n        return self.transform(data)\n    \n    \nclass RegressorModel(object):\n    \"\"\"\n    A wrapper class for classification models.\n    It can be used for training and prediction.\n    Can plot feature importance and training progress (if relevant for model).\n\n    \"\"\"\n\n    def __init__(self, columns: list = None, model_wrapper=None):\n        \"\"\"\n\n        :param original_columns:\n        :param model_wrapper:\n        \"\"\"\n        self.columns = columns\n        self.model_wrapper = model_wrapper\n        self.result_dict = {}\n        self.train_one_fold = False\n        self.preprocesser = None\n\n    def fit(self, X: pd.DataFrame, y,\n            X_holdout: pd.DataFrame = None, y_holdout=None,\n            folds=None,\n            params: dict = None,\n            eval_metric='rmse',\n            cols_to_drop: list = None,\n            preprocesser=None,\n            transformers: dict = None,\n            adversarial: bool = False,\n            plot: bool = True):\n        \"\"\"\n        Training the model.\n\n        :param X: training data\n        :param y: training target\n        :param X_holdout: holdout data\n        :param y_holdout: holdout target\n        :param folds: folds to split the data. If not defined, then model will be trained on the whole X\n        :param params: training parameters\n        :param eval_metric: metric for validataion\n        :param cols_to_drop: list of columns to drop (for example ID)\n        :param preprocesser: preprocesser class\n        :param transformers: transformer to use on folds\n        :param adversarial\n        :return:\n        \"\"\"\n\n        if folds is None:\n            folds = KFold(n_splits=3, random_state=42)\n            self.train_one_fold = True\n\n        self.columns = X.columns if self.columns is None else self.columns\n        self.feature_importances = pd.DataFrame(columns=['feature', 'importance'])\n        self.trained_transformers = {k: [] for k in transformers}\n        self.transformers = transformers\n        self.models = []\n        self.folds_dict = {}\n        self.eval_metric = eval_metric\n        n_target = 1\n        self.oof = np.zeros((len(X), n_target))\n        self.n_target = n_target\n\n        X = X[self.columns]\n        if X_holdout is not None:\n            X_holdout = X_holdout[self.columns]\n\n        if preprocesser is not None:\n            self.preprocesser = preprocesser\n            self.preprocesser.fit(X, y)\n            X = self.preprocesser.transform(X, y)\n            self.columns = X.columns.tolist()\n            if X_holdout is not None:\n                X_holdout = self.preprocesser.transform(X_holdout)\n\n        # Grouping all the data with the same installation_id\n        for fold_n, (train_index, valid_index) in enumerate(folds.split(X, y, X['installation_id'])):\n\n            if X_holdout is not None:\n                X_hold = X_holdout.copy()\n            else:\n                X_hold = None\n            self.folds_dict[fold_n] = {}\n            if params['verbose']:\n                print(f'Fold {fold_n + 1} started at {time.ctime()}')\n            self.folds_dict[fold_n] = {}\n\n            X_train, X_valid = X.iloc[train_index], X.iloc[valid_index]\n            y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n            if self.train_one_fold:\n                X_train = X[self.original_columns]\n                y_train = y\n                X_valid = None\n                y_valid = None\n\n            datasets = {'X_train': X_train, 'X_valid': X_valid, 'X_holdout': X_hold, 'y_train': y_train}\n            X_train, X_valid, X_hold = self.transform_(datasets, cols_to_drop)\n\n            self.folds_dict[fold_n]['columns'] = X_train.columns.tolist()\n\n            model = copy.deepcopy(self.model_wrapper)\n\n            # What is this?\n            if adversarial:\n                X_new1 = X_train.copy()\n                if X_valid is not None:\n                    X_new2 = X_valid.copy()\n                elif X_holdout is not None:\n                    X_new2 = X_holdout.copy()\n                X_new = pd.concat([X_new1, X_new2], axis=0)\n                y_new = np.hstack((np.zeros((X_new1.shape[0])), np.ones((X_new2.shape[0]))))\n                X_train, X_valid, y_train, y_valid = train_test_split(X_new, y_new)\n\n            model.fit(X_train, y_train, X_valid, y_valid, X_hold, y_holdout, params=params)\n\n            self.folds_dict[fold_n]['scores'] = model.best_score_\n            if self.oof.shape[0] != len(X):\n                self.oof = np.zeros((X.shape[0], self.oof.shape[1]))\n            if not adversarial:\n                self.oof[valid_index] = model.predict(X_valid).reshape(-1, n_target)\n\n            fold_importance = pd.DataFrame(list(zip(X_train.columns, model.feature_importances_)),\n                                           columns=['feature', 'importance'])\n            self.feature_importances = self.feature_importances.append(fold_importance)\n            self.models.append(model)\n\n        self.feature_importances['importance'] = self.feature_importances['importance'].astype(int)\n\n        # if params['verbose']:\n        self.calc_scores_()\n\n        if plot:\n            # print(classification_report(y, self.oof.argmax(1)))\n            fig, ax = plt.subplots(figsize=(16, 12))\n            plt.subplot(2, 2, 1)\n            self.plot_feature_importance(top_n=20)\n            plt.subplot(2, 2, 2)\n            self.plot_metric()\n            plt.subplot(2, 2, 3)\n            plt.hist(y.values.reshape(-1, 1) - self.oof)\n            plt.title('Distribution of errors')\n            plt.subplot(2, 2, 4)\n            plt.hist(self.oof)\n            plt.title('Distribution of oof predictions');\n\n    def transform_(self, datasets, cols_to_drop):\n        for name, transformer in self.transformers.items():\n            transformer.fit(datasets['X_train'], datasets['y_train'])\n            datasets['X_train'] = transformer.transform(datasets['X_train'])\n            if datasets['X_valid'] is not None:\n                datasets['X_valid'] = transformer.transform(datasets['X_valid'])\n            if datasets['X_holdout'] is not None:\n                datasets['X_holdout'] = transformer.transform(datasets['X_holdout'])\n            self.trained_transformers[name].append(transformer)\n        if cols_to_drop is not None:\n            cols_to_drop = [col for col in cols_to_drop if col in datasets['X_train'].columns]\n\n            datasets['X_train'] = datasets['X_train'].drop(cols_to_drop, axis=1)\n            if datasets['X_valid'] is not None:\n                datasets['X_valid'] = datasets['X_valid'].drop(cols_to_drop, axis=1)\n            if datasets['X_holdout'] is not None:\n                datasets['X_holdout'] = datasets['X_holdout'].drop(cols_to_drop, axis=1)\n        self.cols_to_drop = cols_to_drop\n\n        return datasets['X_train'], datasets['X_valid'], datasets['X_holdout']\n\n    def calc_scores_(self):\n#         print()\n        datasets = [k for k, v in [v['scores'] for k, v in self.folds_dict.items()][0].items() if len(v) > 0]\n        self.scores = {}\n        for d in datasets:\n            scores = [v['scores'][d][self.eval_metric] for k, v in self.folds_dict.items()]\n#             print(f\"CV mean score on {d}: {np.mean(scores):.4f} +\/- {np.std(scores):.4f} std.\")\n            self.scores[d] = np.mean(scores)\n\n    def predict(self, X_test, averaging: str = 'usual'):\n        \"\"\"\n        Make prediction\n\n        :param X_test:\n        :param averaging: method of averaging\n        :return:\n        \"\"\"\n        full_prediction = np.zeros((X_test.shape[0], self.oof.shape[1]))\n        if self.preprocesser is not None:\n            X_test = self.preprocesser.transform(X_test)\n        for i in range(len(self.models)):\n            X_t = X_test.copy()\n            for name, transformers in self.trained_transformers.items():\n                X_t = transformers[i].transform(X_t)\n\n            if self.cols_to_drop is not None:\n                cols_to_drop = [col for col in self.cols_to_drop if col in X_t.columns]\n                X_t = X_t.drop(cols_to_drop, axis=1)\n            y_pred = self.models[i].predict(X_t[self.folds_dict[i]['columns']]).reshape(-1, full_prediction.shape[1])\n\n            # if case transformation changes the number of the rows\n            if full_prediction.shape[0] != len(y_pred):\n                full_prediction = np.zeros((y_pred.shape[0], self.oof.shape[1]))\n\n            if averaging == 'usual':\n                full_prediction += y_pred\n            elif averaging == 'rank':\n                full_prediction += pd.Series(y_pred).rank().values\n\n        return full_prediction \/ len(self.models)\n\n    def plot_feature_importance(self, drop_null_importance: bool = True, top_n: int = 10):\n        \"\"\"\n        Plot default feature importance.\n\n        :param drop_null_importance: drop columns with null feature importance\n        :param top_n: show top n columns\n        :return:\n        \"\"\"\n\n        top_feats = self.get_top_features(drop_null_importance, top_n)\n        feature_importances = self.feature_importances.loc[self.feature_importances['feature'].isin(top_feats)]\n        feature_importances['feature'] = feature_importances['feature'].astype(str)\n        top_feats = [str(i) for i in top_feats]\n        sns.barplot(data=feature_importances, x='importance', y='feature', orient='h', order=top_feats)\n        plt.title('Feature importances')\n\n    def get_top_features(self, drop_null_importance: bool = True, top_n: int = 10):\n        \"\"\"\n        Get top features by importance.\n\n        :param drop_null_importance:\n        :param top_n:\n        :return:\n        \"\"\"\n        grouped_feats = self.feature_importances.groupby(['feature'])['importance'].mean()\n        if drop_null_importance:\n            grouped_feats = grouped_feats[grouped_feats != 0]\n        return list(grouped_feats.sort_values(ascending=False).index)[:top_n]\n\n    def plot_metric(self):\n        \"\"\"\n        Plot training progress.\n        Inspired by `plot_metric` from https:\/\/lightgbm.readthedocs.io\/en\/latest\/_modules\/lightgbm\/plotting.html\n\n        :return:\n        \"\"\"\n        full_evals_results = pd.DataFrame()\n        for model in self.models:\n            evals_result = pd.DataFrame()\n            for k in model.model.evals_result_.keys():\n                evals_result[k] = model.model.evals_result_[k][self.eval_metric]\n            evals_result = evals_result.reset_index().rename(columns={'index': 'iteration'})\n            full_evals_results = full_evals_results.append(evals_result)\n\n        full_evals_results = full_evals_results.melt(id_vars=['iteration']).rename(columns={'value': self.eval_metric,\n                                                                                            'variable': 'dataset'})\n        sns.lineplot(data=full_evals_results, x='iteration', y=self.eval_metric, hue='dataset')\n        plt.title('Training progress')","ba22fd5e":"y = reduce_train['accuracy_group']\n\ncols_to_drop = ['game_session', 'installation_id', 'timestamp', 'accuracy_group', 'timestampDate']\n\nn_fold = 5\nfolds = GroupKFold(n_splits=n_fold)","a214b2bc":"if debug:\n    # lgb\n    n_estimators = 100\n    early_stopping_rounds = 100\n    \n    # bayes_opt\n    init_points = 2\n    n_iter = 2\nelse:\n    # lgb\n    n_estimators = 2000\n    early_stopping_rounds = 100\n    \n    # bayes_opt\n    init_points = 16\n    n_iter = 16","d7eabc69":"def bayes_base(boosting_type,\n                 num_leaves,\n                 min_data_in_leaf,\n                 max_depth,\n                 lambda_l1,\n                 lambda_l2,\n                 bagging_fraction,\n                 bagging_freq,\n                 colsample_bytree,\n                 learning_rate):\n    \n    params = {\n        'boosting_type': boosting_type,\n        'metric': 'rmse',\n        'objective': 'regression',\n        'eval_metric': 'cappa',\n        'n_jobs': -1,\n        'seed': 42,\n        'early_stopping_rounds': early_stopping_rounds,\n        'n_estimators': n_estimators,\n        'learning_rate': learning_rate,\n        'num_leaves': int(num_leaves),\n        'min_data_in_leaf': int(min_data_in_leaf),\n        'max_depth': int(max_depth),\n        'lambda_l1': lambda_l1,\n        'lambda_l2': lambda_l2,\n        'bagging_fraction': bagging_fraction,\n        'bagging_freq': int(bagging_freq),\n        'colsample_bytree': colsample_bytree,\n        'verbose': 0\n    }\n    \n    mt = MainTransformer()\n    ft = FeatureTransformer()\n    transformers = {'ft': ft}\n    model = RegressorModel(model_wrapper=LGBWrapper_regr())\n    model.fit(X=reduce_train, \n              y=y, \n              folds=folds, \n              params=params, \n              preprocesser=mt, \n              transformers=transformers,\n              eval_metric='cappa', \n              cols_to_drop=cols_to_drop,\n              plot=False)\n    \n    return model.scores['valid']\n\ndef lgb_bayesian_(boosting_type):\n    def h(num_leaves,\n                 min_data_in_leaf,\n                 max_depth,\n                 lambda_l1,\n                 lambda_l2,\n                 bagging_fraction,\n                 bagging_freq,\n                 colsample_bytree,\n                 learning_rate):\n        return bayes_base(boosting_type,\n                 num_leaves,\n                 min_data_in_leaf,\n                 max_depth,\n                 lambda_l1,\n                 lambda_l2,\n                 bagging_fraction,\n                 bagging_freq,\n                 colsample_bytree,\n                 learning_rate)\n    return h\n","8e99678a":"gc.collect()","6282ea02":"def run_bo(random_state, boosting_type):\n    bounds_LGB = {\n        'num_leaves': (10, 50),\n        'min_data_in_leaf': (10, 40),\n        'max_depth': (6, 11),\n        'lambda_l1': (0, 5),\n        'lambda_l2': (0, 5),\n        'bagging_fraction': (0.4, 0.6),\n        'bagging_freq': (1, 10),\n        'colsample_bytree': (0.4, 0.6),\n        'learning_rate': (0.05, 0.1)\n    }\n    LGB_BO = BayesianOptimization(lgb_bayesian_(boosting_type), bounds_LGB, random_state=random_state)\n\n    with warnings.catch_warnings():\n        warnings.filterwarnings('ignore')\n        LGB_BO.maximize(init_points=init_points, n_iter=n_iter, acq='ucb', xi=0.0, alpha=1e-6)\n        \n    del bounds_LGB\n    \n    return LGB_BO\n\ndef predict_with_final_model(LGB_BO):\n    params = {\n        'boosting_type': 'gbdt',\n        'metric': 'rmse',\n        'objective': 'regression',\n        'eval_metric': 'cappa',\n        'n_jobs': -1,\n        'seed': 42,\n        'early_stopping_rounds': early_stopping_rounds,\n        'n_estimators': n_estimators,\n        'learning_rate': LGB_BO.max['params']['learning_rate'],\n        'num_leaves': int(LGB_BO.max['params']['num_leaves']),\n        'min_data_in_leaf': int(LGB_BO.max['params']['min_data_in_leaf']),\n        'max_depth': int(LGB_BO.max['params']['max_depth']),\n        'lambda_l1': LGB_BO.max['params']['lambda_l1'],\n        'lambda_l2': LGB_BO.max['params']['lambda_l2'],\n        'bagging_fraction': LGB_BO.max['params']['bagging_fraction'],\n        'bagging_freq': int(LGB_BO.max['params']['bagging_freq']),\n        'colsample_bytree': LGB_BO.max['params']['colsample_bytree'],\n        'verbose': 100\n    }\n\n    mt = MainTransformer()\n    ft = FeatureTransformer()\n    transformers = {'ft': ft}\n    regressor_model = RegressorModel(model_wrapper=LGBWrapper_regr())\n    regressor_model.fit(X=reduce_train, \n                        y=y, \n                        folds=folds, \n                        params=params, \n                        preprocesser=mt, \n                        transformers=transformers,\n                        eval_metric='cappa', \n                        cols_to_drop=cols_to_drop)\n\n    preds = regressor_model.predict(reduce_test)\n    w = LGB_BO.max['target']\n    \n    del LGB_BO, params\n    gc.collect()\n    \n    return preds, w, regressor_model\n\nclass mock():\n    def __init__(self, d):\n        self.max = d\n        \n# |   iter    |  target   | baggin... | baggin... | colsam... | lambda_l1 | lambda_l2 | learni... | max_depth | min_da... | num_le... |\n# |  1        |  0.5937   |  0.4834   |  7.483    |  0.4      |  1.512    |  0.7338   |  0.05462  |  6.931    |  20.37    |  25.87    |\n# |  3        |  0.5945   |  0.5536   |  2.446    |  0.5529   |  0.104    |  0.6761   |  0.05581  |  7.549    |  30.14    |  28.85    |\n# |  30       |  0.5909   |  0.5993   |  1.225    |  0.4252   |  4.035    |  0.3233   |  0.05728  |  9.927    |  39.61    |  11.49    |\n# |  2        |  0.5918   |  0.5752   |  4.22     |  0.5002   |  3.417    |  3.564    |  0.06851  |  8.806    |  25.09    |  10.55    |\n# |  10       |  0.5922   |  0.5066   |  3.272    |  0.5442   |  1.837    |  2.493    |  0.06133  |  7.768    |  29.53    |  22.52    |\n\ndef bo_lgb(random_state=0):\n    if skip_bo:\n        # These parameters are from the run of V1.\n            \n        if random_state == 1:\n            LGB_BO = mock({'target': 0.6053, 'params': {'num_leaves': 31,\n                                           'min_data_in_leaf': 20,\n                                           'bagging_fraction': 0.5999, \n                                           'bagging_freq': 3.71, \n                                           'colsample_bytree': 0.4492,\n                                           'lambda_l1': 4.742,\n                                           'lambda_l2': 0.4251,\n                                           'learning_rate': 0.0522,\n                                           'max_depth': 8.751}})\n        elif random_state == 12:\n            LGB_BO = mock({'target': 0.6042, 'params': {'num_leaves': 31,\n                                           'min_data_in_leaf': 20,\n                                           'bagging_fraction': 0.9994, \n                                           'bagging_freq': 4.42, \n                                           'colsample_bytree': 0.8754,\n                                           'lambda_l1': 9.963,\n                                           'lambda_l2': 2.676,\n                                           'learning_rate': 0.1029,\n                                           'max_depth': 13.99}})\n        elif random_state == 123:\n            LGB_BO = mock({'target': 0.6048, 'params': {'num_leaves': 31,\n                                           'min_data_in_leaf': 20,\n                                           'bagging_fraction': 0.7994, \n                                           'bagging_freq': 4.12, \n                                           'colsample_bytree': 0.6754,\n                                           'lambda_l1': 7.963,\n                                           'lambda_l2': 1.676,\n                                           'learning_rate': 0.0829,\n                                           'max_depth': 10.99}})\n            \n        elif random_state == 1234:\n            LGB_BO = mock({'target': 0.5932, 'params': {'num_leaves': 31,\n                                           'min_data_in_leaf': 20,\n                                           'bagging_fraction': 0.6, \n                                           'bagging_freq': 1.0, \n                                           'colsample_bytree': 0.4,\n                                           'lambda_l1': 0.0,\n                                           'lambda_l2': 2.636,\n                                           'learning_rate': 0.05,\n                                           'max_depth': 8.0}})\n        elif random_state == 12345:\n            LGB_BO = mock({'target': 0.5939, 'params': {'num_leaves': 31,\n                                           'min_data_in_leaf': 20,\n                                           'bagging_fraction': 0.4735, \n                                           'bagging_freq': 5.488, \n                                           'colsample_bytree': 0.4453,\n                                           'lambda_l1': 1.768,\n                                           'lambda_l2': 3.254,\n                                           'learning_rate': 0.06565,\n                                           'max_depth': 10.31}})\n        elif random_state == 2:\n            LGB_BO = mock({'target': 0.5922, 'params': {'bagging_fraction': 0.5066, \n                                           'bagging_freq': 3.272, \n                                           'colsample_bytree': 0.5442,\n                                           'lambda_l1': 1.837,\n                                           'lambda_l2': 2.493,\n                                           'learning_rate': 0.06133,\n                                           'max_depth': 7.768,\n                                           'min_data_in_leaf': 29.53,\n                                           'num_leaves': 22.52}})\n\n        elif random_state == 23:\n            LGB_BO = mock({'target': 0.5918, 'params': {'bagging_fraction': 0.5752, \n                                           'bagging_freq': 4.22, \n                                           'colsample_bytree': 0.5002,\n                                           'lambda_l1': 3.417,\n                                           'lambda_l2': 3.564,\n                                           'learning_rate': 0.06851,\n                                           'max_depth': 8.806,\n                                           'min_data_in_leaf': 25.09,\n                                           'num_leaves': 10.55}})\n        elif random_state == 234:\n            LGB_BO = mock({'target': 0.5909, 'params': {'bagging_fraction': 0.5536, \n                                           'bagging_freq': 1.225, \n                                           'colsample_bytree': 0.4252,\n                                           'lambda_l1': 4.035,\n                                           'lambda_l2': 0.3233,\n                                           'learning_rate': 0.05728,\n                                           'max_depth': 9.927,\n                                           'min_data_in_leaf': 39.61,\n                                           'num_leaves': 11.49}})\n        elif random_state == 2345:\n            LGB_BO = mock({'target': 0.5945, 'params': {'bagging_fraction': 0.5536, \n                                           'bagging_freq': 2.446, \n                                           'colsample_bytree': 0.5529,\n                                           'lambda_l1': 0.104,\n                                           'lambda_l2': 0.6761,\n                                           'learning_rate': 0.05581,\n                                           'max_depth': 7.549,\n                                           'min_data_in_leaf': 30.14,\n                                           'num_leaves': 28.85}})\n        elif random_state == 23456:\n            LGB_BO = mock({'target': 0.5937, 'params': {'bagging_fraction': 0.4834, \n                                           'bagging_freq': 7.483, \n                                           'colsample_bytree': 0.4,\n                                           'lambda_l1': 1.512,\n                                           'lambda_l2': 0.7338,\n                                           'learning_rate': 0.05462,\n                                           'max_depth': 6.931,\n                                           'min_data_in_leaf': 20.37,\n                                           'num_leaves': 25.87}})\n        elif random_state == 3:\n            LGB_BO = mock({'target': 0.6053, 'params': {'num_leaves': 13,\n                                           'min_data_in_leaf': 20,\n                                           'bagging_fraction': 0.5999, \n                                           'bagging_freq': 3.71, \n                                           'colsample_bytree': 0.4492,\n                                           'lambda_l1': 4.742,\n                                           'lambda_l2': 0.4251,\n                                           'learning_rate': 0.0422,\n                                           'max_depth': 8.751}})\n        elif random_state == 34:\n            LGB_BO = mock({'target': 0.6042, 'params': {'num_leaves': 13,\n                                           'min_data_in_leaf': 20,\n                                           'bagging_fraction': 0.9994, \n                                           'bagging_freq': 4.42, \n                                           'colsample_bytree': 0.8754,\n                                           'lambda_l1': 9.963,\n                                           'lambda_l2': 2.676,\n                                           'learning_rate': 0.1029,\n                                           'max_depth': 13.99}})\n        elif random_state == 345:\n            LGB_BO = mock({'target': 0.6048, 'params': {'num_leaves': 13,\n                                           'min_data_in_leaf': 20,\n                                           'bagging_fraction': 0.7994, \n                                           'bagging_freq': 4.12, \n                                           'colsample_bytree': 0.6754,\n                                           'lambda_l1': 7.963,\n                                           'lambda_l2': 1.676,\n                                           'learning_rate': 0.0829,\n                                           'max_depth': 10.99}})\n        elif random_state == 4:\n            LGB_BO = mock({'target': 0.6053, 'params': {'num_leaves': 21,\n                                           'min_data_in_leaf': 20,\n                                           'bagging_fraction': 0.5999, \n                                           'bagging_freq': 3.71, \n                                           'colsample_bytree': 0.4492,\n                                           'lambda_l1': 4.742,\n                                           'lambda_l2': 0.4251,\n                                           'learning_rate': 0.0222,\n                                           'max_depth': 8.751}})\n        elif random_state == 45:\n            LGB_BO = mock({'target': 0.6042, 'params': {'num_leaves': 21,\n                                           'min_data_in_leaf': 20,\n                                           'bagging_fraction': 0.9994, \n                                           'bagging_freq': 4.42, \n                                           'colsample_bytree': 0.8754,\n                                           'lambda_l1': 9.963,\n                                           'lambda_l2': 2.676,\n                                           'learning_rate': 0.0529,\n                                           'max_depth': 13.99}})\n        elif random_state == 456:\n            LGB_BO = mock({'target': 0.6048, 'params': {'num_leaves': 21,\n                                           'min_data_in_leaf': 20,\n                                           'bagging_fraction': 0.7994, \n                                           'bagging_freq': 4.12, \n                                           'colsample_bytree': 0.6754,\n                                           'lambda_l1': 7.963,\n                                           'lambda_l2': 1.676,\n                                           'learning_rate': 0.0429,\n                                           'max_depth': 10.99}})\n            \n            \n    else:\n        LGB_BO = run_bo(random_state, 'gbdt')\n    \n    \n    \n    return predict_with_final_model(LGB_BO)\n\ndef bo_dart(random_state=0):\n    LGB_BO = run_bo(random_state, 'dart')\n    \n    return predict_with_final_model(LGB_BO)\n    ","703171bf":"if debug:\n    seeds = [1, 12]\nelse:\n    seeds = [1, 12, 123, 1234, 3, 34, 345]\n\npreds = []\nmodels = []\nfor s in seeds:\n    p, w, m = bo_lgb(s)\n    preds.append((p, w))\n    models.append(m)\n\n# for s in seeds:\n#     p, w = bo_dart(s)\n#     preds.append((p, w))","200d050a":"w_total = sum([pred[1] for pred in preds])\n\nlgb_preds = sum([pred[0] * pred[1] \/ w_total for pred in preds])\n","3d665115":"# # Add xgboost!\ndef train_xgboost():\n    xgb_params = {\n            'colsample_bytree': 0.8,\n            'learning_rate': 0.05,\n            'max_depth': 7,\n            'subsample': 1,\n            'objective':'multi:softprob',\n            'num_class':4,\n            'eval_metric':'merror',\n            'min_child_weight':10,\n            'gamma':0.25,\n            'n_estimators':500,\n            'nthread': 6,\n            'verbose': 1000,\n            'early_stopping_rounds': 100,\n        }\n    mt = MainTransformer()\n    ft = FeatureTransformer()\n    transformers = {'ft': ft}\n    xgb_model = ClassifierModel(model_wrapper=XGBWrapper())\n    xgb_model.fit(X=reduce_train, y=y, folds=folds, params=xgb_params, preprocesser=mt, transformers=transformers,\n                  eval_metric='cappa', cols_to_drop=cols_to_drop)\n    return xgb_model.predict(reduce_test)\n    \n# we set the weight of the xgboost to be 20% of lgb.\nif not skip_xgb:\n    xgb_pred = train_xgboost()\n    print(xgb_pred)\n    ","96a398d5":"if skip_xgb:\n    preds = lgb_preds\nelse:\n    preds = 0.8 * lgb_preds + 0.2 * xgb_preds","c9d0ef48":"class OptimizedRounder(object):\n    \"\"\"\n    An optimizer for rounding thresholds\n    to maximize Quadratic Weighted Kappa (QWK) score\n    # https:\/\/www.kaggle.com\/naveenasaithambi\/optimizedrounder-improved\n    \"\"\"\n    def __init__(self):\n        self.coef_ = 0\n\n    def _kappa_loss(self, coef, X, y):\n        \"\"\"\n        Get loss according to\n        using current coefficients\n        \n        :param coef: A list of coefficients that will be used for rounding\n        :param X: The raw predictions\n        :param y: The ground truth labels\n        \"\"\"\n        X_p = pd.cut(X, [-np.inf] + list(np.sort(coef)) + [np.inf], labels = [0, 1, 2, 3])\n\n        return -qwk(y, X_p)\n\n    def fit(self, X, y):\n        \"\"\"\n        Optimize rounding thresholds\n        \n        :param X: The raw predictions\n        :param y: The ground truth labels\n        \"\"\"\n        loss_partial = partial(self._kappa_loss, X=X, y=y)\n        initial_coef = [0.5, 1.5, 2.5]\n        self.coef_ = sp.optimize.minimize(loss_partial, initial_coef, method='nelder-mead')\n\n    def predict(self, X, coef):\n        \"\"\"\n        Make predictions with specified thresholds\n        \n        :param X: The raw predictions\n        :param coef: A list of coefficients that will be used for rounding\n        \"\"\"\n        return pd.cut(X, [-np.inf] + list(np.sort(coef)) + [np.inf], labels = [0, 1, 2, 3])\n\n\n    def coefficients(self):\n        \"\"\"\n        Return the optimized coefficients\n        \"\"\"\n        return self.coef_['x']","47d08c85":"# Discretize the predictions\ndef cv_predict(models, X):\n    return np.mean([model.predict(X) for model in models], axis=0)\n\nif train_rounder:\n    # TODO: Train rounder using the xgb model too?\n    regressed = cv_predict(models, reduce_train)\n    rounder = OptimizedRounder()\n    rounder.fit(regressed.reshape(-1,), y)\n    coefficients = rounder.coefficients()","b5ce8e59":"# Fixed Rounding\nif not train_rounder:\n    coefficients = [1.12232214, 1.73925866, 2.22506454]","773f1e9e":"preds[preds <= coefficients[0]] = 0\npreds[np.where(np.logical_and(preds > coefficients[0], preds <= coefficients[1]))] = 1\npreds[np.where(np.logical_and(preds > coefficients[1], preds <= coefficients[2]))] = 2\npreds[preds > coefficients[2]] = 3","989eb628":"sample_submission['accuracy_group'] = preds.astype(int)\nsample_submission.to_csv('submission.csv', index=False)","38db9ce3":"sample_submission['accuracy_group'].value_counts(normalize=True)","93534a95":"### 1. \u884c\u52d5\u30ed\u30b0\u306eFeature\n\n\u5404\u30a4\u30d9\u30f3\u30c8\u306f`title`\u3068`event_code`\u3067\u4e00\u610f\u306b\u5b9a\u307e\u308a\u307e\u3059\u3002\u306a\u306e\u3067\u5404`title`\u6bce\u306b\u5404event\u304c\u4f55\u56de\u767a\u751f\u3057\u305f\u304b\u306f\u826f\u3044Feature\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002  \n\u5b9f\u969b\u591a\u304f\u306eNotebook\u304c\u3053\u306eFeature\u3092\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u3002  \nhttps:\/\/www.kaggle.com\/braquino\/890-features\n\n\u52a0\u3048\u3066\u3001`type`\u6bce\u3001`world`\u6bce\u306eevent\u306e\u767a\u751f\u56de\u6570\u3082\u91cd\u8981\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002  \n\u30b2\u30fc\u30e0\u3092\u3084\u3063\u3066\u307f\u308b\u3068\u5206\u304b\u308a\u307e\u3059\u304c\u3001world\u6bce\u306b\u7fd2\u3046\u30c6\u30fc\u30de\u304c\u7570\u306a\u308a\u307e\u3059 (\u5927\u304d\u3055\u3001\u9577\u3055\u3001\u91cd\u3055)\u3002  \n\u306a\u306e\u3067`world`\u6bce\u306e\u884c\u52d5\u30ed\u30b0\u3082\u826f\u3044Feature\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002  \n\u5b9f\u969b\u3053\u308c\u3089\u306eFeature\u3092\u8db3\u3059\u3068\u308f\u305f\u3057\u306e\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u304c\u5411\u4e0a\u3057\u307e\u3057\u305f\u3002  \n\n\u30b2\u30fc\u30e0\u306e\u30d7\u30ec\u30a4\u6642\u9593\u3082\u826f\u3044Feature\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002\u904e\u53bb\u306e\u30b3\u30f3\u30da\u3067\u3082\u6642\u9593\u95a2\u9023\u306eFeature\u304c\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u305f\u3088\u3046\u3067\u3059\u3002  \n\u4f8b\u3048\u3070`game_duration`, `clip_duration`\u306a\u3069\u306f\u30e6\u30fc\u30b6\u304c\u305d\u308c\u305e\u308c\u306e`type`\u306b\u8cbb\u3084\u3057\u3066\u3044\u308b\u6642\u9593\u3067\u3059\u3002  \n\u3053\u308c\u3089\u306eFeature\u3067\u3082\u7cbe\u5ea6\u304c\u3088\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n6000\u500b\u4ee5\u4e0a\u306eFeature\u3092\u4f5c\u308b\u3059\u3054\u3044\u4eba\u305f\u3061\u3082\u3044\u308b\u3088\u3046\u3067\u3059\u3002  \n\u3082\u3061\u308d\u3093\u3053\u308c\u3089\u306e\u3059\u3079\u3066\u304c\u5f79\u306b\u7acb\u3064Feature\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u3046\u307e\u304fPruning\u3057\u3066\u3084\u308b\u5fc5\u8981\u306f\u3042\u308a\u305d\u3046\u3067\u3059\u3002  \nhttps:\/\/www.kaggle.com\/keremt\/fastai-feature-engineering-part1-6160-features  \nhttps:\/\/www.kaggle.com\/keremt\/dsbowl2019-feng-part1\n\n\u3053\u3061\u3089\u306eNotebook\u3067\u6307\u6458\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001spec.csv\u306b\u30a4\u30d9\u30f3\u30c8\u306e\u8a73\u7d30\u304c\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002  \n\u3053\u308c\u3092\u8aad\u3080\u3068\u304b\u306a\u308a\u6709\u7528\u305d\u3046\u306aFeature\u3067\u3044\u304f\u3064\u304b\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002  \nevent_code 4020\u3068Cauldron_Filler\u306eevent_code 4025\u306f\u6b63\u3057\u3044\u884c\u52d5\u3092\u3057\u3066\u3044\u308b\u304bstep\u6bce\u306b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002  \nhttps:\/\/www.kaggle.com\/bhavikapanara\/2019-data-science-bowl-some-interesting-features","e642a23c":"# \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u5b66\u3073\u65b9\n\n\u81ea\u6212\u306e\u305f\u3081\u306b\n\n1. \u5de8\u4eba\u306e\u80a9\u306e\u4e0a\u306b\u7acb\u3064\n\n\u30b3\u30f3\u30da\u306b\u53c2\u52a0\u3059\u308b\u6642\u306b\u306f\u307e\u305a\u6700\u521d\u306bVote\u304c\u591a\u3044notebook\u3092\u4e00\u901a\u308a\u8aad\u3080\u3079\u304d\u3067\u3059\u3002  \n\u7279\u306b\u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u5f8c\u534a\u304b\u3089\u53c2\u52a0\u3059\u308b\u5834\u5408\u3001scratch\u304b\u3089\u601d\u3044\u3064\u304ffeature\u3084\u30e2\u30c7\u30eb\u306f\u3060\u3044\u305f\u3044\u3059\u3067\u306b\u8ab0\u304b\u304c\u601d\u3044\u3064\u3044\u3066\u3044\u307e\u3059\u3002  \n\u307e\u305a\u306f\u5148\u4eba\u304c\u601d\u3044\u3064\u3044\u305f\u3053\u3068\u3092\u4e00\u901a\u308a\u78ba\u8a8d\u3057\u3066\u304b\u3089\u81ea\u5206\u306e\u3082\u306e\u3092\u63a2\u3057\u3066\u3044\u304f\u3079\u304d\u3060\u3068\u601d\u3044\u307e\u3059\u3002  \n\u5de8\u4eba\u306b\u3057\u304c\u307f\u3064\u304f\u3060\u3051\u3067\u306a\u304f\u305d\u306e\u80a9\u306e\u4e0a\u306b\u7acb\u3064\u305f\u3081\u306b\u306f\u3082\u3061\u308d\u3093\u5de8\u4eba\u306e\u8003\u3048\u3092\u3061\u3083\u3093\u3068\u7406\u89e3\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002  \n\n\u2192\u4eca\u56de\u975e\u5e38\u306b\u30b9\u30b3\u30a2\u306e\u9ad8\u3044public kernel\u306bFeature\u3092scaling\u3059\u308b\u30a2\u30a4\u30c7\u30a3\u30a2\u304c\u3042\u308a\u307e\u3057\u305f\u3002  \n\u308f\u305f\u3057\u306f\u3053\u308c\u306fFeature\u306e\u610f\u5473\u3092\u5909\u3048\u3066\u3057\u307e\u3046\u3053\u3068\u306b\u61d0\u7591\u7684\u3060\u3063\u305f\u306e\u3067\u63a1\u7528\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002  \n\u3053\u306escaling\u3092\u63a1\u7528\u3057\u305f\u591a\u304f\u306e\u30e2\u30c7\u30eb\u304c\u975e\u5e38\u306b\u60aa\u3044\u7cbe\u5ea6\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3068\u3044\u3046\u5642\u3067\u3059\u3002  \n\u5de8\u4eba\u3092\u7406\u89e3\u3057\u3088\u3046\u3068\u3059\u308b\u5fc3\u306e\u304a\u9670\u3067\u3053\u308c\u3092\u514d\u308c\u307e\u3057\u305f\u3002\n\n2. \u904e\u53bb\u306e\u30b3\u30f3\u30da\u306eNotebook\u3092\u8aad\u3093\u3067\u307f\u308b\n\n\u904e\u53bb\u306e\u4f3c\u305f\u3088\u3046\u306a\u30b3\u30f3\u30da\u3067\u6709\u529b\u3060\u3063\u305ffeature\u3001\u30e2\u30c7\u30eb\u306f\u3053\u306e\u30b3\u30f3\u30da\u3067\u3082\u6709\u529b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002  \n\u904e\u53bb\u306e\u30b3\u30f3\u30da\u306e\u4e0a\u4f4d\u306eNotebook\u3092\u307e\u3068\u3081\u3066\u304f\u308c\u305f\u65b9\u304c\u3044\u307e\u3059\u3002  \n\nhttps:\/\/www.kaggle.com\/sudalairajkumar\/winning-solutions-of-kaggle-competitions\/data\n\n\u3053\u306e\u30ea\u30b9\u30c8\u3092\u898b\u308b\u3068\u3060\u3044\u305f\u3044lightgbm, xgboost, catboost, NN\u3068\u305d\u308c\u3089\u306eEnsemble\u304c\u5e2d\u5dfb\u3057\u3066\u3044\u308b\u306e\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\u3002  \n\n3. \u601d\u3044\u3064\u3044\u305f\u6539\u5584\u306e\u307b\u3068\u3093\u3069\u306f\u5931\u6557\u3059\u308b\n\n\u601d\u3044\u3064\u3044\u305f\u65b0\u3057\u3044Feature\u3084\u30e2\u30c7\u30eb\u306e\u6539\u5584\u306f\u3060\u3044\u305f\u3044\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093 (\u305f\u3076\u3093\u5f37\u3044\u65b9\u3067\u3082\u305d\u3046)\u3002  \n\u308f\u305f\u3057\u306f\u5927\u5b66\u9662\u3067\u7814\u7a76\u3092\u3057\u3066\u3044\u305f\u306e\u3067\u305d\u3046\u3044\u3046\u3082\u306e\u3060\u3068\u7406\u89e3\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u7cbe\u5ea6\u3092\u3042\u3052\u308b\u306b\u306f\u6ce5\u81ed\u3044\u8a66\u884c\u932f\u8aa4\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002  \n\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3082\u6ce5\u306b\u307e\u307f\u308c\u308b\u899a\u609f\u3092\u6301\u3064\u3079\u304d\u306a\u306e\u3067\u3057\u3087\u3046\u3002\n","cfe1df37":"# \u5b66\u7fd2\u30e2\u30c7\u30eb\n\n\u5b66\u7fd2\u30e2\u30c7\u30eb\u306fLightGBM\u3092\u63a1\u7528\u3057\u307e\u3057\u305f\u3002  \n\u904e\u53bb\u306e\u30b3\u30f3\u30da\u3067\u597d\u6210\u7e3e\u3092\u6b8b\u3057\u3066\u3044\u308bNotebook\u306e\u591a\u304f\u304cLightGBM\u3092\u63a1\u7528\u3057\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002  \n\n\u4eca\u56de\u306fregression\u554f\u984c\u3092\u30e2\u30c7\u30eb\u3057\u307e\u3059\u3002  \n\u3053\u308c\u306f\u4eca\u56de\u306e\u30bf\u30b9\u30af\u306e\u30e9\u30d9\u30eb\u304c\u9806\u756a\u3092\u6301\u3063\u305f\u91cf\u3067\u3042\u308a\u3001\u8a55\u4fa1\u95a2\u6570QWK\u3082\u30e9\u30d9\u30eb\u306e\u9806\u756a\u3092\u610f\u8b58\u3057\u305f\u91cf\u3060\u304b\u3089\u3067\u3059\u3002  \n\u306a\u306e\u3067Classification\u3088\u308a\u3082Regression\u306e\u65b9\u304c\u3088\u308a\u30e9\u30d9\u30eb\u306e\u80cc\u666f\u306b\u3042\u308b\u95a2\u4fc2\u6027\u3092\u8aad\u307f\u53d6\u308c\u308b\u3068\u601d\u3063\u305f\u304b\u3089\u3067\u3059\u3002  \n\n\u2192\u5b9f\u969b\u4e0a\u4f4d\u306eNotebook\u3092\u8aad\u3080\u3068\u3060\u3044\u305f\u3044Regression\u3092\u3057\u3066\u3044\u307e\u3059\u3002  \n\u2192\u9762\u767d\u3044\u3053\u3068\u306b\u3001\u4e0a\u4f4d\u306eNotebook\u306e\u591a\u304f\u306fNN\u30d9\u30fc\u30b9\u306e\u30e2\u30c7\u30eb\u3092\u4e00\u3064\u4ee5\u4e0a\u53d6\u308a\u5165\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002  \n\u76f4\u611f\u7684\u306b\u306fgbdt\u304c\u5f37\u305d\u3046\u306a\u30bf\u30b9\u30af\u3060\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u30c7\u30fc\u30bf\u3092\u3046\u307e\u304fnormalize\u3057\u3066NN\u306b\u5165\u308c\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u304c\u5f37\u3044\u3088\u3046\u3067\u3059\u3002\n\n\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u30e9\u30c3\u30d1\u30fc\u306f\u4ee5\u4e0b\u306eNotebook\u306b\u3088\u308b\u3082\u306e\u3067\u3059\u3002  \n\u5b66\u7fd2\u306e\u9032\u6357\u306a\u3069\u304c\u304d\u308c\u3044\u306bvisualization\u3055\u308c\u3066\u304a\u308a\u3001\u624b\u5143\u306e\u30e2\u30c7\u30eb\u306e\u554f\u984c\u70b9(underfitting\u3057\u3066\u3044\u308b\u306e\u304boverfitting\u3057\u3066\u3044\u308b\u306e\u304b)\u304c\u3059\u3050\u306b\u898b\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002  \nhttps:\/\/www.kaggle.com\/artgor\/quick-and-dirty-regression\n","3eb6590c":"## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306escaling\n\n\u3053\u3061\u3089\u306eNotebook\u3067\u306f\u30c7\u30fc\u30bf\u306e\u5e73\u5747\u5024\u304c\u5927\u304d\u304f\u7570\u306a\u308b\u6642\u306b\u5e73\u5747\u5024\u306e\u5272\u5408\u306b\u5408\u308f\u305b\u3066\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u91cf\u3092scaling\u3059\u308b\u524d\u51e6\u7406\u304c\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002  \nhttps:\/\/www.kaggle.com\/khoongweihao\/top-5-pub-to-top-53-priv-convert-disaster\n\n\u308f\u305f\u3057\u306f\u3053\u306escaling\u306f\u63a1\u7528\u3057\u306a\u3044\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002  \n\u306a\u305c\u306a\u3089\u6271\u3063\u3066\u3044\u308bFeature\u306e\u591a\u304f\u306fscale\u3092\u5909\u3048\u308b\u3068\u610f\u5473\u304c\u9055\u3063\u3066\u3057\u307e\u3046\u304b\u3089\u3067\u3059\u3002  \n\n\u2192\u5642\u306b\u3088\u308b\u3068\u591a\u304f\u306e\u6700\u7d42submission\u306b\u3053\u306escaling\u304c\u4f7f\u308f\u308c\u3001\u5927\u304d\u304f\u7cbe\u5ea6\u3092\u843d\u3068\u3059\u7d50\u679c\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u305d\u3046\u3067\u3059\u3002","22b62c18":"# \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n\n\u826f\u3044\u7cbe\u5ea6\u3092\u5f97\u308b\u305f\u3081\u306b\u306f\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u304c\u5fc5\u9808\u3067\u3059\u3002  \nLightGBM\u3067Critical\u306a\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u305d\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u4ed5\u65b9\u304c\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3042\u308a\u307e\u3059\u3002  \nhttps:\/\/lightgbm.readthedocs.io\/en\/latest\/Parameters-Tuning.html\n\n\u308f\u305f\u3057\u306e\u30e2\u30c7\u30eb\u306f\u6700\u521dtrain data\u306boverfit\u3057\u3066\u304a\u308a\u3001iteration\u3068\u3068\u3082\u306btrain\u306e\u30b9\u30b3\u30a2\u306f\u4e0a\u304c\u308aval\u306e\u30b9\u30b3\u30a2\u304c\u4e0b\u304c\u308b\u3068\u3044\u3046\u72b6\u6cc1\u3067\u3057\u305f\u3002\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306eDeal with Over-fitting\u3092\u8aad\u3080\u3068max_bin, num_leaves, min_data_in_leaf, max_depth, lambda_l1, lambda_l2\u3042\u305f\u308a\u304c\u91cd\u8981\u305d\u3046\u3067\u3059\u3002  \n\u4eca\u56de\u306e\u30e2\u30c7\u30eb\u306e\u30c7\u30fc\u30bf\u306fdiscrete\u3082\u306e\u304c\u591a\u3044\u306e\u3067max_bin\u3088\u308a\u3082num_leaves\/min_data_in_leaf\/max_depth\u3092\u5909\u3048\u305f\u65b9\u304c\u5f71\u97ff\u304c\u5927\u304d\u3044\u304b\u306a\u3001\u3068\u601d\u3063\u305f\u306e\u3067\u305d\u3061\u3089\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u7d22\u3057\u307e\u3057\u305f\u3002  \n\n\u3053\u3061\u3089\u306eNotebook\u306e\u30b3\u30fc\u30c9\u3092\u305d\u306e\u307e\u307e\u4f7f\u3044\u3001Bayesian optimization\u3067\u63a2\u7d22\u3092\u3057\u307e\u3057\u305f\u3002  \nhttps:\/\/www.kaggle.com\/hengzheng\/bayesian-optimization-seed-blending\n\n\u4ed6\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u65b9\u6cd5\u3068\u3057\u3066\u306fsklearn\u306eGridSearch, optuna, hyperopt\u306a\u3069\u306e\u9078\u629e\u80a2\u304c\u3042\u308a\u307e\u3059\u3002  \n\u30d1\u30e9\u30e1\u30fc\u30bf\u63a2\u7d22\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6bd4\u8f03\u8ad6\u6587\u306f\u3042\u308a\u307e\u3059 (Bergstra J.S. et al. 2011)\u304c\u3001\u3084\u3063\u3066\u307f\u308b\u3057\u304b\u306a\u3044\u3068\u3044\u3046\u5370\u8c61\u3067\u3059\u3002  \nhttps:\/\/papers.nips.cc\/paper\/4443-algorithms-for-hyper-parameter-optimization.pdf  \n\n1, 2\u6642\u9593\u7a0b\u5ea6\u306e\u5b9f\u9a13\u3060\u3068bayes_opt\u304c\u4e00\u756a\u826f\u3044\u7d50\u679c\u3092\u51fa\u3057\u305f\u306e\u3067\u3053\u308c\u3092\u63a1\u7528\u3057\u307e\u3057\u305f\u3002\u3067\u3059\u304c...\n\n\u3053\u308c\u306f\u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u6700\u5f8c\u306e\u65b9\u307e\u3067\u5b8c\u5168\u306b\u982d\u306e\u5916\u306b\u3042\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u63a2\u7d22\u306f\u63d0\u51fa\u3059\u308bNotebook\u5185\u3067\u3084\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002  \n\u3053\u306e\u30b3\u30f3\u30da\u306fNotebook\u3067\uff17\u6642\u9593\u4ee5\u5185\u3067\u52d5\u304f\u3082\u306e\u3057\u304b\u63d0\u51fa\u3067\u304d\u306a\u3044\u5236\u9650\u304c\u3042\u3063\u305f\u305f\u3081\u3001\u5927\u304d\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u63a2\u7d22\u306f\u51fa\u6765\u306a\u3044\u3068\u52dd\u624b\u306b\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u3002  \n\u3057\u304b\u3057\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u4e8b\u524d\u306b\u63a2\u7d22\u3092\u3057\u3066\u304a\u3044\u3066\u3001\u305d\u308c\u3092Notebook\u306b\u306f\u3063\u3066\u304a\u3051\u3070\u3088\u3044\u3060\u3051\u3067\u3057\u305f\u3002  \n\u3082\u3063\u3068\u9577\u3044\u6642\u9593\u3092\u304b\u3051\u3066\u63a2\u7d22\u3092\u3059\u308c\u3070\u3082\u3063\u3068\u826f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u898b\u3064\u304b\u3063\u305f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002  \n\nHyperopt: https:\/\/github.com\/hyperopt\/hyperopt  \nOptuna: https:\/\/github.com\/optuna\/optuna\n\n\u2192\u5b9f\u969b\u4e0a\u4f4d\u9663\u306e\u30e2\u30c7\u30eb\u3092\u898b\u308b\u3068\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u76f4\u66f8\u304d\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002","80dc7e7a":"### 2. \u30e6\u30fc\u30b6\u306eFeature\n\n\u30e6\u30fc\u30b6\u306e\u884c\u52d5\u30ed\u30b0\u306f\u9593\u9694\u304c\u307e\u3070\u3089\u306a\u6642\u7cfb\u5217\u306e\u30c7\u30fc\u30bf\u3067\u3059\u3002  \n\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u89e3\u6790\u306f\u305d\u308c\u3067\u6559\u79d1\u66f8\u304c\u305f\u304f\u3055\u3093\u51fa\u3066\u3044\u308b\u6df1\u307f\u306e\u3042\u308b\u5206\u91ce\u3067\u3059\u304c\u3001\u308f\u305f\u3057\u306f\u3088\u304f\u5206\u304b\u308a\u307e\u305b\u3093\uff01  \n\u4eca\u56de\u306e\u30bf\u30b9\u30af\u306fFeature\u306f\u6642\u7cfb\u5217\u3067\u3059\u304c\u4e88\u6e2c\u306f\u4e00\u6642\u70b9\u3067\u306e\u307f\u306a\u306e\u3067\u305d\u3053\u307e\u3067\u8a73\u3057\u3044\u77e5\u8b58\u306f\u5fc5\u8981\u3067\u306f\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002  \n\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u89e3\u6790\u3092\u6271\u3063\u305fNotebook\u304c\u3042\u3063\u305f\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u307e\u3057\u305f\u3002  \nhttps:\/\/www.kaggle.com\/kashnitsky\/topic-9-part-1-time-series-analysis-in-python\n\n\u53e4\u3044\u30c7\u30fc\u30bf\u307b\u3069\u91cd\u307f\u3092\u5272\u308a\u5f15\u3044\u3066\u304b\u3089\u5e73\u5747\u3092\u53d6\u308bExponential smoothing\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002  \nhttps:\/\/en.wikipedia.org\/wiki\/Exponential_smoothing\n\n\u3057\u304b\u3057\u308f\u305f\u3057\u304c\u5b9f\u9a13\u3057\u305f\u9650\u308a\u3067\u306f\u5358\u7d14\u5e73\u5747\u306e\u65b9\u304c\u7cbe\u5ea6\u304c\u9ad8\u304b\u3063\u305f\u3067\u3059\u3002  \n\u6700\u7d42\u7684\u306b\u308f\u305f\u3057\u306f\u884c\u52d5\u30ed\u30b0\u306eFeature\u306e\u5358\u7d14\u306a\u7dcf\u548c\u30fb\u5e73\u5747standard deviation\u306a\u3069\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002  \n~~\u3053\u306e\u30b3\u30f3\u30da\u3067\u6271\u3063\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f\u305f\u3063\u305f\uff13\u30f6\u6708\u9593\u7a0b\u5ea6\u306a\u306e\u3067\u3001\u305d\u306e\u77ed\u3044\u671f\u9593\u306b\u5927\u304d\u306a\u5909\u5316\u304c\u3042\u308b\u30e6\u30fc\u30b6\u306f\u5c11\u306a\u304f\u3001\u5358\u7d14\u5e73\u5747\u306a\u3069\u306e\u91cf\u3067\u5341\u5206\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002~~  \n\n\u2192\u4e0a\u4f4d\u306e\u30e2\u30c7\u30eb\u306e\u4e2d\u3067\u306fRNN\u3092\u4e00\u90e8\u306b\u4f7f\u3063\u305f\u3082\u306e\u304c\u3042\u308a\u307e\u3057\u305f\u3002  \n\u5358\u7d14\u306aexponential smoothing\u3067\u306f\u96e3\u3057\u3044\u3067\u3059\u304c\u3061\u3083\u3093\u3068timestep\u3092\u8003\u3048\u305f\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3068\u304b\u306a\u308a\u826f\u3044\u7cbe\u5ea6\u304c\u5f97\u3089\u308c\u308b\u3088\u3046\u3067\u3059\u3002  \nhttps:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/127210\n\n\n\u95a2\u9023\u3057\u3066\u3001\u3044\u304f\u3064\u304b\u306eNotebook\u3067**\u672a\u6765\u306e\u60c5\u5831\u3092\u4f7f\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3082\u306e\u304c\u3042\u308a\u307e\u3057\u305f\u3002**  \n\u3053\u3061\u3089\u306ediscussion\u6307\u6458\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5f53\u7136\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u672a\u6765\u306e\u60c5\u5831\u306f\u5165\u3063\u3066\u3044\u306a\u3044\u306e\u3067train\u3068test\u3067\u7570\u306a\u308b\u60c5\u5831\u3092\u4f7f\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002  \nhttps:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/117724\n\n\u2192\u4e0a\u4f4d\u30e2\u30c7\u30eb\u306e\u4e2d\u306b\u306fTFIDF\u3092\u4f7f\u3063\u3066\u3044\u308b\u3082\u306e\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u78ba\u304b\u306b\uff01  \nhttps:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/127210","5809161f":"# Rounding\n\nRegression\u3067\u5f97\u3089\u308c\u305f\u5b9f\u6570\u3092\u30e9\u30d9\u30eb\u306b\u5909\u63db\u3057\u307e\u3059\u3002  \n\u3069\u3053\u3067Rounding\u3059\u308b\u304b\u304c\u554f\u984c\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u3053\u306eRounding\u306e\u95be\u5024\u3082\u5b66\u7fd2\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002  \nhttps:\/\/www.kaggle.com\/naveenasaithambi\/optimizedrounder-improved\n\n\u6700\u7d42\u7684\u306b\u306f\u6c7a\u3081\u6253\u3061\u306e\u5024\u3092\u4f7f\u3063\u305f\u65b9\u304c\u7cbe\u5ea6\u304c\u51fa\u307e\u3057\u305f\u3002","9b92da0d":"## \u8a55\u4fa1\u95a2\u6570\n\nhttps:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/overview\/evaluation\n\n\u30b3\u30f3\u30da\u306e\u30c7\u30fc\u30bf\u306f\u5b50\u4f9b\u5411\u3051\u5b66\u7fd2\u30b2\u30fc\u30e0\u306e\u884c\u52d5\u30ed\u30b0\u3067\u3059\u3002  \n\u8ab2\u984c\u306f\u5404\u30e6\u30fc\u30b6\u306e\u884c\u52d5\u30ed\u30b0\u304b\u3089\u3001\u305d\u306e\u30e6\u30fc\u30b6\u306e\uff15\u7a2e\u985e\u3042\u308b\u30b2\u30fc\u30e0\u3067\u306e\u6210\u7e3e\u3092\u4e88\u6e2c\u3059\u308b\u3082\u306e\u3067\u3059\u3002  \n\u30b2\u30fc\u30e0\u306e\u6210\u7e3e`accuracy_group`\u306f\uff14\u7a2e\u985e\u3042\u308a\u30013 > 2 > 1 > 0\u306e\u9806\u756a\u3067\u826f\u3044\u6210\u7e3e\u3067\u3059\u3002  \n\u306a\u306e\u3067**\u3053\u308c\u3089\u306e\u30ab\u30c6\u30b4\u30ea\u306b\u306f\u9806\u756a\u304c\u3042\u308a\u307e\u3059**\u3002\n\n\u3053\u306e\u30b3\u30f3\u30da\u306e\u8a55\u4fa1\u95a2\u6570\u306fQuadratic weighted kappa (QWK)\u3067\u3059\u3002  \n\u3056\u3063\u304f\u3070\u3089\u3093\u306b\u8a00\u3046\u3068QWK\u306f\u771f\u306e\u30e9\u30d9\u30eb\u304c0\u306e\u3082\u306e\u30922 \/ 3\u3068\u9593\u9055\u3048\u305f\u5834\u5408\u30011\u3068\u9593\u9055\u3048\u305f\u5834\u5408\u306e4 \/ 9\u500d\u91cd\u304f\u30da\u30ca\u30eb\u30c6\u30a3\u3092\u4e0e\u3048\u307e\u3059\u3002  \n\u3067\u3059\u306e\u3067\u30e9\u30d9\u30eb\u306b\u9806\u756a\u304c\u3042\u308b\u3053\u3068\u3092\u8003\u616e\u3057\u305f\u8a55\u4fa1\u95a2\u6570\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u30020\u30683\u306e\u5dee\u304c0\u30681\u306e9\u500d\u306a\u306e\u304b\uff1f\u3068\u3044\u3046\u7591\u554f\u306f\u3042\u308a\u307e\u3059\u304c\u3002  \n\nQWK\u304c\u3069\u306e\u3088\u3046\u306a\u5024\u3092\u53d6\u308b\u304b\u3001\u8a66\u3057\u306b\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9`qwk`\u306b\u8272\u3005\u306a\u914d\u5217\u3092\u5165\u308c\u3066\u898b\u3066\u307f\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nQWK\u3092\u9ad8\u901f\u306b\u8a08\u7b97\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3053\u306eNotebook\u306e\u3082\u306e\u3067\u3059\u3002  \nhttps:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/114133#latest-660168\n\nQWK\u306e\u7406\u89e3\u306e\u305f\u3081\u306b\u306f\u3053\u3061\u3089\u306eNotebook\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002  \n\u30b3\u30f3\u30da\u3067\u3082\u4f55\u5ea6\u304b\u767b\u5834\u3057\u3066\u3044\u308b\u8a55\u4fa1\u95a2\u6570\u306e\u3088\u3046\u3067\u3059\u3002  \nhttps:\/\/www.kaggle.com\/aroraaman\/quadratic-kappa-metric-explained-in-5-simple-steps","ba2291fa":"### \u30d1\u30e9\u30e1\u30fc\u30bf\n\n\u69d8\u3005\u306a\u5b9f\u9a13\u6761\u4ef6\u3092\u8a66\u3059\u305f\u3081\u306e\u30b3\u30fc\u30c9\u306e\u5909\u66f4\u7b87\u6240\u3092\u6700\u5c0f\u306b\u3059\u308b\u305f\u3081\u306e\u5236\u5fa1\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\u3002","d086f5b8":"## Outliers\n\n\u4ed6\u306e\u30c7\u30fc\u30bf\u3068\u5927\u304d\u304f\u7570\u306a\u308bFeature\u3092\u6301\u3063\u305f\u30c7\u30fc\u30bf\u3092outlier\u3068\u547c\u3073\u307e\u3059\u3002  \nOutlier\u306fLoss\u95a2\u6570\u306b\u5927\u304d\u306a\u5f71\u97ff\u3092\u53ca\u307c\u3057\u3066\u3057\u307e\u3044\u3001\u305d\u308c\u3089\u306bfit\u3059\u308b\u305f\u3081\u306b\u5178\u578b\u30c7\u30fc\u30bf\u306e\u7cbe\u5ea6\u304c\u60aa\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002  \n\nOutlier\u3092\u53d6\u308a\u9664\u304f\u4f8b\u306f\u3053\u306eNotebook\u306b\u3042\u308a\u307e\u3059\u3002  \nhttps:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python\n\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u30a8\u30f3\u30b8\u30cb\u30a2\u3068\u3057\u3066\u306foutlier\u306b\u9811\u5f37\u306aloss (e.g. huber loss)\u3092\u4f7f\u304a\u3046\u3068\u8003\u3048\u307e\u3059\u304c\u3001  \n\u30c7\u30fc\u30bf\u304c\u660e\u306b\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u5206\u6790\u3067\u306foutlier\u3092\u53d6\u308a\u9664\u304f\u65b9\u304c\u8a71\u304c\u65e9\u3044\u3067\u3059\u3002\n\n\n\u6700\u7d42\u7684\u306b\u4f7f\u3063\u305f\u30e2\u30c7\u30eb\u306fLightGBM\u306e\u307f\u3060\u3063\u305f\u306e\u3067\u6700\u7d42\u7684\u306b\u306foutlier\u306e\u51e6\u7406\u306f\u3057\u3066\u304a\u308a\u307e\u305b\u3093\u3002","ac94c10e":"## \u975e\u5bfe\u79f0\u306aFeature\u306e\u51e6\u7406\n\n\u975e\u5bfe\u79f0\u306aFeature\u304c\u3042\u308b\u3068\u5b66\u7fd2\u304c\u96e3\u3057\u3044\u30e2\u30c7\u30eb\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u3002  \n\u3053\u308c\u3089\u306fBox-cox\u5909\u63db\u3057\u3066\u3084\u308b\u3068skew\u306e\u7d76\u5bfe\u5024\u3092\u5c0f\u3055\u304f\u3067\u304d\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002  \nhttps:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.special.boxcox1p.html  \nhttp:\/\/onlinestatbook.com\/2\/transformations\/box-cox.html\n\n(\u8272\u3005\u63a2\u3057\u3066\u898b\u307e\u3057\u305f\u304c\u3001\u975e\u5bfe\u79f0\u306aFeature\u304c\u5177\u4f53\u7684\u306b\u4f55\u6545\u5b66\u7fd2\u3092\u56f0\u96e3\u306b\u3059\u308b\u304b\u306b\u3064\u3044\u3066\u306e\u7406\u8ad6\u7684\u306a\u304a\u8a71\u3092\u898b\u3064\u3051\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002  \n\u76f4\u611f\u3068\u3057\u3066\u306f\u5404\u30c7\u30fc\u30bf\u70b9\u304closs\u95a2\u6570\u306b\u4e0e\u3048\u308b\u5f71\u97ff\u304c\u3069\u3046\u56de\u5e30\u3092\u53d6\u3063\u3066\u3082\u5927\u304d\u304f\u7570\u306a\u308b\u304b\u3089\u3067\u3057\u3087\u3046\u304b\u3002  \nESL\u306b\u3082Murphy\u672c\u306b\u3082\u306a\u3044\u3088\u3046\u3067\u3059\u304c\u3001\u3069\u3053\u3067\u898b\u3064\u3051\u3089\u308c\u307e\u3059\u304b\uff1f)\n\n\u6700\u7d42\u7684\u306b\u4f7f\u3063\u305f\u30e2\u30c7\u30eb\u306fLightGBM\u306e\u307f\u3060\u3063\u305f\u306e\u3067\u3042\u307e\u308a\u95a2\u4fc2\u306a\u304b\u3063\u305f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002","5b4d54fd":"# \u30b3\u30f3\u30da\u306e\u6982\u8981\n\n\u30c7\u30fc\u30bf\u306f\u5b50\u4f9b\u5411\u3051\u30b2\u30fc\u30e0\u306e\u30e6\u30fc\u30b6\u306e\u884c\u52d5\u30ed\u30b0\u304b\u3089\u3001\u30b2\u30fc\u30e0\u5185\u306b\u3042\u308b\u30e6\u30fc\u30b6\u306e\u80fd\u529b\u3092\u56f3\u308b\uff15\u3064\u306e`Assessment`\u3067\u306e\u6210\u7e3e\u3092\u4e88\u6e2c\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002  \n\u809d\u3068\u306a\u308b\u306e\u306f\u30e6\u30fc\u30b6\u306e\u884c\u52d5\u30ed\u30b0\u304c\u6642\u9593\u9593\u9694\u306e\u307e\u3070\u3089\u306a\u6642\u7cfb\u5217\u3067\u3042\u308b\u3053\u3068\u3067\u3059\u3002  \n\u884c\u52d5\u30ed\u30b0\u306e\u9577\u3055\u306f\u30e6\u30fc\u30b6\u306b\u3088\u3063\u3066\u975e\u5e38\u306b\u5927\u304d\u304f\u9055\u3044\u307e\u3059\u3002  \n\u3053\u306e\u884c\u52d5\u30ed\u30b0\u3092\u3069\u3046\u307e\u3068\u3081\u3066\u30e6\u30fc\u30b6\u306eFeature\u306b\u3059\u308b\u304b\u304c\u554f\u984c\u306b\u306a\u308a\u307e\u3059\u3002  \n\n\u4e88\u6e2c\u3059\u308b\u30e9\u30d9\u30eb\u3001\u6210\u7e3e\u306f4\u3064\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u3051\u3089\u308c\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u9806\u756a\u306e\u3042\u308b\u91cf\u3067\u3059\u3002  \n\u8a55\u4fa1\u95a2\u6570quadratic weighted kappa (\u5f8c\u8ff0)\u3082\u3053\u306e\u9806\u756a\u3092\u53cd\u6620\u3055\u305b\u305f\u95a2\u6570\u3067\u3059\u3002  \n\u3053\u308c\u3092\u3046\u307e\u304f\u30e2\u30c7\u30eb\u306b\u53cd\u6620\u3055\u305b\u3089\u308c\u308b\u304b\u3068\u3044\u3046\u70b9\u3082\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u306f\u5b9f\u969b\u306e\u30b2\u30fc\u30e0\u306e\u3082\u306e\u3067\u3059\u3002**\u81ea\u5206\u3067\u30d7\u30ec\u30a4\u3057\u3066\u307f\u3066\u3001\u3069\u3046\u3044\u3046\u3082\u306e\u306a\u306e\u304b\u4e00\u901a\u308a\u78ba\u8a8d\u3057\u3066\u304a\u304f\u3079\u304d\u3060\u3068\u601d\u3044\u307e\u3059\u3002**  \nhttps:\/\/measureup.pbskids.org\/\n","9700b3bd":"# \u30e2\u30c7\u30eb\u306e\u6982\u8981\n\nLightGBM\u306b\u3088\u308bregression\u30e2\u30c7\u30eb\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002  \n\u5148\u8ff0\u306e\u3088\u3046\u306b\u4eca\u56de\u4e88\u6e2c\u3059\u3079\u304d\u30e9\u30d9\u30eb\u306f\u9806\u756a\u306e\u3042\u308b\u91cf\u3067\u3059\u3002  \n\u3053\u306e\u80cc\u666f\u306b\u3042\u308b\u91cf\u3092\u30e2\u30c7\u30eb\u306b\u53cd\u6620\u3055\u305b\u308b\u305f\u3081\u306bclassifier\u3067\u306f\u306a\u304fregression\u3092\u3057\u307e\u3057\u305f\u3002  \nRegression\u30e2\u30c7\u30eb\u306f5\u3064\u5b66\u7fd2\u3057\u3001\u305d\u308c\u3089\u306e\u4e88\u6e2c\u306e\u91cd\u307f\u4ed8\u304d\u5e73\u5747\u5024\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002  \n5\u3064\u306e\u30e2\u30c7\u30eb\u306fBayesianOptimization\u3067\u5f97\u3089\u308c\u305f\u305d\u308c\u305e\u308c\u7570\u306a\u308b\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002  \n\u5e73\u5747\u5024\u3092Rounding\u3057\u3066\u6574\u6570\u5024\u306b\u306a\u304a\u3057\u3001\u6700\u7d42\u7684\u306a\u4e88\u6e2c\u30e9\u30d9\u30eb\u3068\u3057\u307e\u3057\u305f\u3002\n","74ba366e":"This kernel is a kaggle tutorial written in Japanese.\n\n# 2019 Data Science Bowl\n<img src=\"https:\/\/i.ytimg.com\/vi\/8g4zZN7UJKs\/maxresdefault.jpg\" alt=\"drawing\" width=\"600\"\/>\n\n\u3053\u306eNotebook\u306fKaggle\u5165\u9580\u8005\u5411\u3051\u306e2019 DSB\u306e\u89e3\u8aac\u3067\u3059\u3002  \nTitanic\u3084House Price\u306f\u3084\u3063\u305f\u3051\u308c\u3069\u307e\u3060\u672c\u7269\u306e\u30b3\u30f3\u30da\u306e\u30c7\u30fc\u30bf\u306f\u89e6\u3063\u3066\u3044\u306a\u3044\uff01\u3068\u3044\u3046\u65b9\u306b\u5411\u3051\u3066\u66f8\u3044\u3066\u304a\u308a\u307e\u3059\u3002  \n\u5185\u5bb9\u3068\u3057\u3066\u306f\u79c1\u304c\u3053\u306e\u30b3\u30f3\u30da\u306b\u53c2\u52a0\u3057\u305f\u3068\u304d\u306b\u8003\u3048\u305f\u3053\u3068\u3084\u4ed6\u306e\u5f37\u3044\u65b9\u306eNotebook\u306b\u66f8\u3044\u3066\u3042\u3063\u305f\u3053\u3068\u3092\u307e\u3068\u3081\u3066\u3044\u307e\u3059\u3002  \n\u79c1\u306f\u30b3\u30f3\u30da\u3078\u306e\u53c2\u52a0\u306f\u3053\u308c\u304c\u521d\u3081\u3066\u3067\u3059\u306e\u3067\u3001\u5165\u9580\u8005\u304c\u66f8\u3044\u305f\u5165\u9580\u8005\u5411\u3051\u306e\u89e3\u8aac\u3067\u3059\u3002  \n\u4e8c\u9031\u9593\u524d\u306e\u81ea\u5206\u306b\u8aad\u307e\u305b\u305f\u3044Notebook\u3092\u76ee\u6307\u3057\u3066\u66f8\u304d\u307e\u3057\u305f\u3002  \n\n\u7d50\u679c\u3068\u3057\u3066\u306f\u9285\u30e1\u30c0\u30eb\u3067\u3057\u305f\u3002Notebook\u306e\u4e2d\u3067\u30b3\u30f3\u30da\u3067\u3088\u308a\u826f\u3044\u7d50\u679c\u3092\u51fa\u3057\u305f\u30e2\u30c7\u30eb\u3068\u306e\u9055\u3044\u3082\u8a71\u3057\u307e\u3059\u3002  \n**Notebook\u306e\u6700\u5f8c\u306b\u53c2\u8003\u306b\u3057\u305f\u4ed6\u306eNotebook\u30fb\u8cc7\u6599\u306e\u30ea\u30b9\u30c8\u304c\u3042\u308a\u307e\u3059\u3002**  \n\u305c\u3072\u3053\u3061\u3089\u3092\u8aad\u3093\u3067\u307f\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n","addb6c9b":"## \u53c2\u8003\u306b\u3057\u305fNotebook\n\nQWK\u306e\u89e3\u8aac: https:\/\/www.kaggle.com\/aroraaman\/quadratic-kappa-metric-explained-in-5-simple-steps  \nQWK\u306e\u8a08\u7b97: https:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/114133#latest-660168  \nQWK\u306e\u9ad8\u901f\u306a\u8a08\u7b97: https:\/\/www.kaggle.com\/cpmpml\/ultra-fast-qwk-calc-method  \n\nExploratory Data Analysis 1: https:\/\/www.kaggle.com\/jaseziv83\/dsb-a-rrrare-r-notebook-and-baseline-model  \nExploratory Data Analysis 2: https:\/\/www.kaggle.com\/gpreda\/2019-data-science-bowl-eda  \nTime series analysis: https:\/\/www.kaggle.com\/kashnitsky\/topic-9-part-1-time-series-analysis-in-python\n\nTruncated features: https:\/\/www.kaggle.com\/braquino\/890-features  \nFeature\u3092\u305f\u304f\u3055\u3093\u4f5c\u3063\u305fNotebook: https:\/\/www.kaggle.com\/keremt\/fastai-feature-engineering-part1-6160-features  \nspec.csv\u306b\u6ce8\u76ee\u3057\u305fFeature: https:\/\/www.kaggle.com\/bhavikapanara\/2019-data-science-bowl-some-interesting-features  \ndata\u306escaling: https:\/\/www.kaggle.com\/khoongweihao\/top-5-pub-to-top-53-priv-convert-disaster (\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u30a2\u30a4\u30c7\u30a3\u30a2\u3067\u3057\u305f)  \nFeature\u540c\u58eb\u306e\u76f8\u95a2: https:\/\/www.kaggle.com\/reisel\/how-to-handle-correlated-features\n\nOutlier\u306e\u51e6\u7406: https:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python\n\nBayesian optimization: https:\/\/www.kaggle.com\/hengzheng\/bayesian-optimization-seed-blending\n\n## \u53c2\u8003\u306b\u3057\u305fDiscussion\n\n\u672a\u6765\u306e\u60c5\u5831\u3092\u4f7f\u3063\u305fFeature: https:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/117724   \n\n2\u4f4d Decayed features: https:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/127388  \n7\u4f4d 150\u500b\u306eFeature\u304c\u30ce\u30a4\u30ba\u304b\u3069\u3046\u304b\u5168\u3066\u78ba\u304b\u3081\u305f: https:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/127213  \n8\u4f4d Feature\u3092Normalize\u3057\u3066NN\u306e\u307f\u306e\u30e2\u30c7\u30eb:  https:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/127285\n\n4\u4f4d RNN\u3068Stacking\u3092\u4f7f\u3063\u305f\u30e2\u30c7\u30eb: https:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/127210\n\n\n## \u5f79\u306b\u7acb\u3063\u305f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\n\nPandas Tutorial: https:\/\/www.kaggle.com\/learn\/pandas\n\nSeaborn Tutorial: https:\/\/www.kaggle.com\/kanncaa1\/seaborn-tutorial-for-beginners\n\nKaggle\u306b\u767b\u9332\u3057\u305f\u3089\u6b21\u306b\u3084\u308b\u3053\u3068 \uff5e \u3053\u308c\u3060\u3051\u3084\u308c\u3070\u5341\u5206\u95d8\u3048\u308b\uff01Titanic\u306e\u5148\u3078\u884c\u304f\u5165\u9580 10 Kernel \uff5e: https:\/\/qiita.com\/upura\/items\/3c10ff6fed4e7c3d70f0\n\n\n## \u53c2\u8003\u8cc7\u6599\n\nPBS Kids Measure Up: https:\/\/measureup.pbskids.org\/\n\nLightGBM Document: https:\/\/lightgbm.readthedocs.io\/\n\nBayesian Optimization: https:\/\/github.com\/fmfn\/BayesianOptimization\n\nBox-Cox Transformation: http:\/\/onlinestatbook.com\/2\/transformations\/box-cox.html\n\nEnsemble Methods: https:\/\/scikit-learn.org\/stable\/modules\/ensemble.html\n\nStacking Ensemble: http:\/\/rasbt.github.io\/mlxtend\/user_guide\/classifier\/StackingClassifier\/  \nStacking Ensemble: https:\/\/books.google.com\/books?id=nwQZCwAAQBAJ&lpg=PA500&dq=stacking%20classifier%20subsets&pg=PA499#v=onepage&q&f=false\n\nKe, Guolin, et al. \"Lightgbm: A highly efficient gradient boosting decision tree.\" Advances in neural information processing systems. 2017.  \nhttps:\/\/papers.nips.cc\/paper\/6907-lightgbm-a-highly-efficient-gradient-boosting-decision-tree.pdf\n\nChen, Tianqi, and Carlos Guestrin. \"Xgboost: A scalable tree boosting system.\" Proceedings of the 22nd acm sigkdd international conference on knowledge discovery and data mining. 2016.  \nhttps:\/\/dl.acm.org\/doi\/pdf\/10.1145\/2939672.2939785?download=true\n\nBergstra, James S., et al. \"Algorithms for hyper-parameter optimization.\" Advances in neural information processing systems. 2011.  \nhttps:\/\/papers.nips.cc\/paper\/4443-algorithms-for-hyper-parameter-optimization.pdf\n\n\nFriedman, Jerome, Trevor Hastie, and Robert Tibshirani. The elements of statistical learning. Vol. 1. No. 10. New York: Springer series in statistics, 2001. \n\nMurphy, Kevin P. Machine learning: a probabilistic perspective. MIT press, 2012.\n\n","dd1c2195":"## \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u3092\u3058\u3063\u304f\u308a\u3068\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u306e\u8aac\u660e\u306f\u516c\u5f0f\u304b\u3089\u3042\u308a\u307e\u3059\u304c\u3001\u304b\u306a\u308a\u3056\u3063\u304f\u308a\u3057\u3066\u3044\u308b\u306e\u3067\u81ea\u5206\u3067\u3044\u308d\u3044\u308d\u307f\u3066\u307f\u308b\u3079\u304d\u3067\u3059\u3002  \nhttps:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/data\n\n\u7279\u306bspec.csv\u306f\u5404\u30a4\u30d9\u30f3\u30c8\u304c\u3069\u3046\u3044\u3046\u3082\u306e\u304b\u3092\u8aac\u660e\u3057\u3066\u3042\u308a\u307e\u3059\u3002  \n\u6709\u7528\u306aFeature\u3092\u8003\u3048\u308b\u305f\u3081\u306b\u306f\u3053\u308c\u3092\u8aad\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002  \n\u4f8b\u3048\u3070\u30b2\u30fc\u30e0\u306e\u6b63\u89e3\u30fb\u4e0d\u6b63\u89e3\u306b\u5bfe\u5fdc\u3057\u305f\u30a4\u30d9\u30f3\u30c8\u304c\u3042\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u96c6\u8a08\u3059\u308b\u3068\u826f\u3044Feature\u306b\u306a\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u306f\u5b9f\u969b\u306e\u30b2\u30fc\u30e0\u306e\u3082\u306e\u3067\u3059\u3002**\u81ea\u5206\u3067\u30d7\u30ec\u30a4\u3057\u3066\u307f\u3066\u3001\u3069\u3046\u3044\u3046\u3082\u306e\u306a\u306e\u304b\u4e00\u901a\u308a\u78ba\u8a8d\u3057\u3066\u304a\u304f\u3079\u304d\u3060\u3068\u601d\u3044\u307e\u3059\u3002**  \nhttps:\/\/measureup.pbskids.org\/\n\n\u30c7\u30fc\u30bf\u306e\u4f55\u3092\u898b\u308b\u3079\u304d\u304b\uff1f\u3068\u3044\u3046\u306e\u306f\u4ee5\u4e0b\u306eNotebook\u304c\u3068\u3066\u3082\u3088\u304f\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002  \nhttps:\/\/www.kaggle.com\/jaseziv83\/dsb-a-rrrare-r-notebook-and-baseline-model  \nhttps:\/\/www.kaggle.com\/gpreda\/2019-data-science-bowl-eda\n\n\u4f8b\u3048\u3070\n\n1. train\u3068test\u3067\u5206\u5e03\u304c\u5927\u304d\u304f\u7570\u306a\u308bfeature\u306f\u3042\u308b\u304b\uff1f\n2. \u5916\u308c\u5024\u304c\u3042\u3063\u305f\u308askew\u306afeature\u306f\u3042\u308b\u306f\uff1f\n\n\u306a\u3069\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002","03d2fdbf":"## \u6b20\u640d\u5024\n\n\u591a\u304f\u306e\u30b3\u30f3\u30da\u306e\u30c7\u30fc\u30bf\u306b\u306f\u6b20\u640d\u5024\u3084\u524d\u51e6\u7406\u304c\u5fc5\u8981\u306a\u5024\u304c\u5b58\u5728\u3057\u307e\u3059\u3002  \n\u3042\u308b\u3044\u306fFeature generation\u306e\u904e\u7a0b\u3067\u6b20\u640d\u5024\u304c\u751f\u3058\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002  \n\u4eca\u56de\u306e\u4f8b\u3060\u3068\u30c7\u30fc\u30bf\u6570\u304c0\u306e\u91cf\u306e\u5e73\u5747\u3084standard deviation\u3092\u53d6\u308d\u3046\u3068\u3059\u308b\u3068NA\u306b\u306a\u308a\u307e\u3059\u3002  \n\u30c7\u30fc\u30bf\u6570\u304c0\u306e\u91cf\u306estd\u306f0\u306b\u3057\u307e\u3057\u305f\u3002\u610f\u5473\u7684\u306b\u3082\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093\u3002  \n\n\u4eca\u56de\u306f\u5358\u7d14\u306b0\u3067fill\u3057\u3066\u554f\u984c\u306a\u3044\u3067\u3059\u304c\u3001\u5de5\u592b\u3057\u3066fill\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3068\u304d\u3082\u3042\u308a\u307e\u3059 (miss\u3067\u3042\u308b\u3053\u3068\u306b\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408)\u3002  \n\u308f\u305f\u3057\u306f\u3053\u3061\u3089\u306e\u8cc7\u6599\u3092\u4e00\u901a\u308a\u8aad\u307f\u307e\u3057\u305f\u3002  \nhttp:\/\/www.stat.columbia.edu\/~gelman\/arm\/missing.pdf","36fb6488":"# \u30e2\u30c7\u30eb\u306eEnsemble\n\nEnsemble: https:\/\/scikit-learn.org\/stable\/modules\/ensemble.html\n\nlightgbm\u306frandom seed\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u30e2\u30c7\u30eb\u304c\u51fa\u6765\u307e\u3059\u3002  \n\u4eca\u56de\u63d0\u51fa\u3057\u305f\u30e2\u30c7\u30eb\u306fbayesian optimization\u3067\u5f97\u3089\u308c\u305f\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u304b\u3089\u8907\u6570\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u308a\u3001  \n\u305d\u308c\u305e\u308c\u4e88\u6e2c\u3092\u51fa\u3057\u3066\u3082\u3089\u3044\u305d\u306e\u5e73\u5747\u3092\u53d6\u3063\u3066\u3044\u307e\u3059\u3002\n\nEnsemble\u306f\u5358\u306a\u308b\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u3067\u306f\u306a\u304f\u3061\u3083\u3093\u3068\u3057\u305f\u7406\u8ad6\u7684\u306b\u306a\u80cc\u666f\u304c\u3042\u308a\u307e\u3059 (Elements of Statistical Learning\u306eChapter 16\u53c2\u7167)\u3002  \n\n\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066\u306f\u3001\u3069\u306e\u30e2\u30c7\u30eb\u3082\u7a7a\u9593\u306e\u4e00\u90e8\u306b\u5f31\u70b9\u304c\u51fa\u6765\u3066\u3057\u307e\u3046\u304c\u3001\u305d\u306e\u5f31\u70b9\u304c\u30e2\u30c7\u30eb\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u5834\u6240\u306b\u51fa\u6765\u308b\u3068\u4eee\u5b9a\u3057\u3001  \n\u8907\u6570\u306e\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3092\u3055\u305b\u3066\u5e73\u5747\u3084\u6700\u7015\u306a\u3069\u3092\u53d6\u3063\u3066\u3084\u308b\u3068\u305d\u306e\u5f31\u70b9\u304c\u3046\u307e\u304f\u30ab\u30d0\u30fc\u3067\u304d\u308b\u3001\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002  \n\u5404\u30e2\u30c7\u30eb\u3092\u30b7\u30f3\u30d7\u30eb\u306a\u3082\u306e\u306b\u4fdd\u3061\u3064\u3064\u5168\u4f53\u306e\u7cbe\u5ea6\u3092\u9ad8\u3081\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u624b\u6cd5\u3067\u3059\u3002\n\nRounding\u3092\u3059\u308b\u524d\u306b\u5404\u30e2\u30c7\u30eb\u306e\u4e88\u60f3\u306e\u5e73\u5747\u3092\u53d6\u3063\u3066\u3044\u307e\u3059\u304c\u3001rounding\u3057\u305f\u5f8c\u306b\u5404\u30e2\u30c7\u30eb\u306e\u4e88\u60f3\u306e\u6700\u7015\u3092\u53d6\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002  \n\u7d50\u679c\u3068\u3057\u3066\u306f\u524d\u8005\u306e\u65b9\u304c\u7cbe\u5ea6\u304c\u9ad8\u304b\u3063\u305f\u306e\u3067\u524d\u8005\u3092\u63a1\u7528\u3057\u307e\u3057\u305f\u3002\n\n\u2192\u4e0a\u4f4d\u306e\u30e2\u30c7\u30eb\u306b\u306fStacking\u306b\u3088\u308bEnsemble\u3092\u3057\u3066\u3044\u308b\u3082\u306e\u304c\u591a\u3044\u3088\u3046\u3067\u3059\u3002  \n\u4eca\u56de\u306f\u5404\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u3092\u5358\u7d14\u306a\u91cd\u307f\u4ed8\u304d\u5e73\u5747\u3092\u53d6\u3063\u3066Ensemble\u306e\u4e88\u6e2c\u3068\u3057\u307e\u3057\u305f\u3002  \n\u305d\u308c\u306b\u5bfe\u3057\u3066Stacking\u306f\u5404\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u3092\u5165\u529b\u3068\u3057\u3066\u30e9\u30d9\u30eb\u3092\u4e88\u6e2c\u3059\u308b1\u30ec\u30d9\u30eb\u30e1\u30bf\u306a\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u7f6e\u304f\u624b\u6cd5\u3067\u3059\u3002  \n\u308f\u305f\u3057\u306e\u30e2\u30c7\u30eb\u3067\u306f\u5e73\u5747\u3068Stacking\u3067\u3042\u307e\u308a\u6027\u80fd\u306e\u5dee\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u30b7\u30f3\u30d7\u30eb\u306a\u5e73\u5747\u3092\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u3002  \n\u4e0a\u4f4d\u306e\u30e2\u30c7\u30eb\u306fNN\u3068gbdt\u306a\u3069\u3001\u3088\u308a\u591a\u69d8\u306a\u30e2\u30c7\u30eb\u3092\u7528\u610f\u3057\u3066\u305d\u306e\u4e0a\u3067Stacking\u3092\u884c\u3046\u3053\u3068\u3067\u3088\u308a\u5f37\u3044\u30e2\u30c7\u30eb\u304c\u5f97\u3089\u308c\u305f\u3088\u3046\u3067\u3059\u3002  \nhttps:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/127210\n\n\nStacking\u306f\u3053\u3061\u3089\u306e\u8aac\u660e\u304c\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u3002  \nhttps:\/\/books.google.com\/books?id=nwQZCwAAQBAJ&lpg=PA500&dq=stacking%20classifier%20subsets&pg=PA499#v=onepage&q&f=false  \nhttp:\/\/rasbt.github.io\/mlxtend\/user_guide\/classifier\/StackingClassifier\/","f1c82375":"## Feature\u306e\u4f5c\u6210\n\n\u3053\u306e\u30b3\u30f3\u30da\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3067\u3059\u3002  \n\u5404\u30e6\u30fc\u30b6`installation_id`\u306e\u7279\u5b9a\u306e\u30b2\u30fc\u30e0(`Assessment`)\u3067\u306e\u6210\u7e3e\u3092\u305d\u308c\u4ee5\u524d\u306e\u884c\u52d5\u30ed\u30b0\u304b\u3089\u4e88\u6e2c\u3057\u307e\u3059\u3002  \n\u3053\u3053\u3067\u8003\u3048\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u306f\u4ee5\u4e0b\u306e\u4e8c\u70b9\u3067\u3059\u3002\n\n1. \u884c\u52d5\u30ed\u30b0\u306eFeature: \u5404\u884c\u52d5\u30ed\u30b0\u304b\u3089\u3069\u306e\u3088\u3046\u306aFeature\u3092\u53d6\u308a\u51fa\u3059\u304b\uff1f\n2. \u30e6\u30fc\u30b6\u306eFeature: \u30e6\u30fc\u30b6\u306e\u884c\u52d5\u30ed\u30b0\u3092\u307e\u3068\u3081\u3066\u4e00\u3064\u306eFeature\u306b\u3059\u308b\u65b9\u6cd5\u306f\uff1f\n\n2\u306e\u65b9\u304cCritical\u306a\u5370\u8c61\u3067\u3059\u304c\u3001\u30b3\u30fc\u30c9\u306e\u9806\u756a\u4e0a1\u304b\u3089\u5148\u306b\u8aac\u660e\u3057\u307e\u3059\u3002","3a105663":"## \u30e9\u30a4\u30d6\u30e9\u30ea\u306eImport\n\n\u30c7\u30fc\u30bf\u306e\u64cd\u4f5c\u306e\u305f\u3081\u306b\u306fpandas\u304c\u4fbf\u5229\u3067\u3059\u3002\u516c\u5f0f\u306eTutorial\u304c\u3088\u304f\u307e\u3068\u307e\u3063\u3066\u3044\u307e\u3059\u3002  \nhttps:\/\/www.kaggle.com\/learn\/pandas\n\nVisualization\u305f\u3081\u306b\u306fseaborn\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u304a\u3059\u3059\u3081\u3067\u3059\u3002Kaggle\u4e0a\u306b\u30a2\u30e1\u30ea\u30ab\u306e\u90fd\u5e02\u306e\u5371\u967a\u5ea6\u3092\u6271\u3063\u305fTutorial\u304c\u3042\u308a\u307e\u3059\u3002  \nhttps:\/\/www.kaggle.com\/kanncaa1\/seaborn-tutorial-for-beginners\n\n\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u64cd\u4f5c\u306b\u306fsklearn\u3092\u4f7f\u3044\u307e\u3059\u3002\u30e2\u30c7\u30eb\u3060\u3051\u3067\u306a\u304f\u524d\u51e6\u7406\u3084cross validation\u307e\u308f\u308a\u3082\u7c21\u5358\u306b\u51fa\u6765\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002  \nhttps:\/\/scikit-learn.org\/stable\/modules\/cross_validation.html\n\n\u5b66\u7fd2\u30e2\u30c7\u30eb\u306b\u306flightGBM\u3092\u4f7f\u3044\u307e\u3059\u3002  \nhttps:\/\/lightgbm.readthedocs.io\/\n\n\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u63a2\u7d22\u306b\u306fBayesianOptimization\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002  \nhttps:\/\/github.com\/fmfn\/BayesianOptimization","b892d627":"## \u76f8\u95a2\u3059\u308bFeature\u306e\u51e6\u7406\n\n\u4f5c\u3063\u3066\u304d\u305fFeature\u306e\u4e2d\u306b\u306f\u5f37\u3044\u76f8\u95a2\u3092\u793a\u3059\u3082\u306e\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u3002  \n\u3053\u308c\u3089\u306eFeature\u306f\u53d6\u308a\u9664\u3044\u305f\u65b9\u304c\u826f\u3044\u30e2\u30c7\u30eb\u304c\u5b66\u7fd2\u3057\u3084\u3059\u3044\u306e\u3067\u3053\u308c\u3089\u3092\u53d6\u308a\u9664\u304d\u307e\u3059\u3002  \n\u7279\u306bnumerical\u306amodel\u4f7f\u3046\u3068\u304d\u306fSVD\u304c\u6016\u3044\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\u76f8\u95a2\u3057\u305fFeature\u3092\u3069\u306e\u3088\u3046\u306b\u51e6\u7406\u3059\u308b\u304b\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u306eNotebook\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002  \nhttps:\/\/www.kaggle.com\/reisel\/how-to-handle-correlated-features  \n\n\u308f\u305f\u3057\u306e\u5b9f\u88c5\u306f\u3001\u65e2\u306b\u52a0\u3048\u3066Feature\u3068\u5f37\u3044\u76f8\u95a2\u306e\u3042\u308bFeature\u3092\u98db\u3070\u3059\u3001\u3068\u3044\u3046\u30b7\u30f3\u30d7\u30eb\u306a\u3082\u306e\u3067\u3059\u3002  \n\u3088\u308a\u826f\u3044\u65b9\u6cd5\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u4eca\u56de\u306fdecision tree\u30d9\u30fc\u30b9\u306e\u30e2\u30c7\u30eb\u3060\u3063\u305f\u306e\u3067\u3042\u307e\u308a\u95a2\u4fc2\u304c\u306a\u3044\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n\n\u2192\uff17\u4f4d\u306e\u65b9\u306f\u3059\u3079\u3066\u306eFeature\u304cnoise\u304b\u3069\u3046\u304b\u3092\u4e00\u3064\u4e00\u3064\u30c1\u30a7\u30c3\u30af\u3057\u305f\u305d\u3046\u3067\u3059\u3002  \n\u306a\u306e\u3067\u3082\u3063\u3068\u3061\u3083\u3093\u3068\u53d6\u308a\u9664\u304fFeature\u3092\u7cbe\u67fb\u3059\u308b\u3079\u304d\u3067\u3057\u305f\u3002  \nhttps:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/127213\n"}}