{"cell_type":{"3664d191":"code","3de33218":"code","284d8570":"code","c43be13a":"code","587ae177":"code","b4887192":"code","5a5ea81a":"code","b9569232":"code","c1058f11":"code","246e5426":"code","d9ca7304":"code","da79874e":"code","89e1444c":"code","4ab2e6b9":"code","0aa02627":"code","474dcc14":"code","72058a9e":"code","161928cb":"code","9ee3ea2e":"code","f6ec81ac":"code","fb56f377":"code","9b243dcf":"code","e2ef278e":"code","54b2a52f":"code","e1d97fd6":"code","cee03339":"code","71782ef5":"code","8d57551e":"code","17dd282b":"code","22b928a9":"code","19385007":"code","e37ac1d0":"code","d71c6f3c":"code","34727e7b":"code","8901922d":"code","2a7421f3":"code","7373ed83":"code","0508c5c3":"code","b6f619af":"code","4e7d0361":"code","8375f444":"code","1ed8c28d":"code","a5a6146d":"code","4e3028cb":"code","1b452ae3":"code","0ac425b6":"code","978e4f1c":"code","0e6f3f25":"code","ad1022ab":"code","2e685104":"code","a0a419cb":"code","d07f1c19":"code","237a7c28":"code","8a7355bf":"code","8b1250dd":"code","f65627e9":"code","58906050":"code","fa2e1f2e":"code","2e4e47d5":"code","ed9c7649":"code","7b7bd498":"code","6e369455":"code","71fd0ba4":"code","29f3ed6b":"code","747815c2":"code","d3bb784c":"code","abbcdea1":"code","c37f272e":"code","33be8936":"code","af4b3907":"code","8ea86816":"code","a47d36b6":"code","e8167fc2":"code","d302c176":"code","63f9bbba":"markdown"},"source":{"3664d191":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","3de33218":"df = pd.read_csv('..\/input\/hackerearth-ml-challenge-pet-adoption\/test.csv')","284d8570":"df.head()","c43be13a":"df1 = pd.read_csv('..\/input\/hackerearth-ml-challenge-pet-adoption\/train.csv')","587ae177":"df1.head()","b4887192":"targets = df1[['pet_id','breed_category','pet_category']]","5a5ea81a":"df1 = df1.drop('breed_category', axis = True)","b9569232":"df1= df1.drop('pet_category', axis = True)","c1058f11":"df1.shape","246e5426":"df.shape","d9ca7304":"df1.loc[18833:18835]","da79874e":"df.loc[0:1]","89e1444c":"df.loc[8071:]","4ab2e6b9":"test = pd.concat([df1,df])","0aa02627":"test['issue_date'] = pd.to_datetime(test['issue_date'])","474dcc14":"test['listing_date'] = pd.to_datetime(test['listing_date'])","72058a9e":"test['days'] =  (test['listing_date'] - test['issue_date']).dt.days","161928cb":"test['days'].max()","9ee3ea2e":"test['days']=test['days'].mask(test['days']<0).fillna(test['days'].mean())","f6ec81ac":"test['month'] = test['days']\/30","fb56f377":"test['month'].min()","9b243dcf":"test[18833:18836]","e2ef278e":"test['condition'].fillna(3.0, inplace=True)","54b2a52f":"def encode_and_bind(original_dataframe, feature_to_encode):\n    dummies = pd.get_dummies(original_dataframe[[feature_to_encode]])\n    res = pd.concat([original_dataframe, dummies], axis=1)\n    return(res)","e1d97fd6":"test = encode_and_bind(test, 'color_type')","cee03339":"test.drop('color_type',axis = 1, inplace = True)","71782ef5":"test['height(m)']=test['height(cm)'].apply(lambda x:x*(.01))","8d57551e":"test","17dd282b":"test['height(m)']=test['height(m)'].mask(test['height(m)']==0).fillna(test['height(m)'].mean())","22b928a9":"test['length(m)']=test['length(m)'].mask(test['length(m)']==0).fillna(test['length(m)'].mean())","19385007":"test['X1']=test['X1'].mask(test['X1']==0).fillna(test['X1'].median())","e37ac1d0":"test['X2']=test['X2'].mask(test['X2']==0).fillna(test['X2'].median())","d71c6f3c":"test","34727e7b":"test.drop('days',axis = 1, inplace = True)","8901922d":"train_df=test[:18834]","2a7421f3":"test_df= test[18834:]","7373ed83":"train_df.shape","0508c5c3":"test_df.shape","b6f619af":"train_df = pd.concat([train_df,targets], axis =1)","4e7d0361":"train_df.head()","8375f444":"test_df.head()","1ed8c28d":"train_df.drop('height(cm)', axis = 1, inplace = True)","a5a6146d":"test_df.drop('height(cm)', axis = 1, inplace = True)","4e3028cb":"train_df.columns.values","1b452ae3":"train_df\n","0ac425b6":"train_df.drop('issue_date', axis = 1, inplace = True)\ntrain_df.drop('listing_date', axis = 1, inplace=True)\ntest_df.drop('issue_date', axis = 1, inplace = True)\ntest_df.drop('listing_date', axis = 1, inplace=True)","978e4f1c":"train_df","0e6f3f25":"train_df=train_df.drop(df.columns[0], axis=1)","ad1022ab":"train_df.loc[train_df['length(m)'] == 0]","2e685104":"train_df.loc[83]","a0a419cb":"init_train_df = train_df.drop('pet_category', axis = 1)","d07f1c19":"init_train_df","237a7c28":"sec_train_df = train_df.drop('breed_category', axis = 1)","8a7355bf":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import f1_score","8b1250dd":"X1_train = init_train_df.drop('breed_category', axis = 1)\nY1_test = init_train_df['breed_category']","f65627e9":"X1_train","58906050":"params = {\n        'min_child_weight': [1,2,3,4 ,5,6,7,8,9,10,12],\n        'gamma': [0.5, 1, 1.5, 2, 5, 6],\n        'subsample': [0.6, 0.8, 1.0,0.7],\n        'colsample_bytree': [0.6, 0.8, 1.0, 0.7],\n        'max_depth': [1,2,3, 4, 5,6],\n        \n        }","fa2e1f2e":"xgb = XGBClassifier(learning_rate=0.02, n_estimators=700, objective = 'multi:softmax',\n                    num_class=3, nthread=1)","2e4e47d5":"folds = 5\nparam_comb = 5\n\nskf = StratifiedKFold(n_splits=folds, shuffle = True, random_state = 2001)\n\nrandom_search = RandomizedSearchCV(xgb, param_distributions=params, n_iter=param_comb, n_jobs=-1, cv=skf.split(X1_train,Y1_test), verbose=3, random_state=2001 )\n","ed9c7649":"random_search.fit(X1_train,Y1_test)","7b7bd498":"X2_train = sec_train_df.drop('pet_category', axis = 1)\nY2_test = sec_train_df['pet_category']","6e369455":"params = {\n        'min_child_weight': [1,2,3,4 ,5,6,7,8,9,10,12],\n        'gamma': [0.5, 1, 1.5, 2, 5, 6],\n        'subsample': [0.6, 0.8, 1.0,0.7],\n        'colsample_bytree': [0.6, 0.8, 1.0, 0.7],\n        'max_depth': [1,2,3, 4, 5,6],\n        \n        }","71fd0ba4":"xgb = XGBClassifier(learning_rate=0.02, n_estimators=700, objective = 'multi:softmax',\n                    num_class=4, nthread=1)","29f3ed6b":"folds = 5\nparam_comb = 5\n\nskf = StratifiedKFold(n_splits=folds, shuffle = True, random_state = 2001)\n\nrandom_search_1 = RandomizedSearchCV(xgb, param_distributions=params, n_iter=param_comb, n_jobs=-1, cv=skf.split(X2_train,Y2_test), verbose=3, random_state=2001 )\n","747815c2":"random_search_1.fit(X2_train,Y2_test)","d3bb784c":"test_df.head()","abbcdea1":"test1 = test_df.drop('pet_id', axis =1)","c37f272e":"test1","33be8936":"y_test = random_search_1.predict(test1)\n","af4b3907":"y_test.shape","8ea86816":"test2 = test_df.drop('pet_id', axis =1)","a47d36b6":"y_test1 = random_search.predict(test1)","e8167fc2":"y_test1","d302c176":"results_df = pd.DataFrame(data={'pet_id':test_df['pet_id'], 'breed_category':y_test1,'pet_category':y_test})\nresults_df.to_csv('submission_shuvo.csv', index=False)","63f9bbba":"# Author: Kazi Amit Hasan\n\nDepartment of Computer Science & Engineering, <br\/>\nRajshahi University of Engineering & Technology (RUET) <br\/>\nWebsite: https:\/\/amithasanshuvo.github.io\/ <br\/>\nResearchGate:\u00a0https:\/\/www.researchgate.net\/profile\/Kazi_Amit_Hasan <br\/>\nLinkedin: https:\/\/www.linkedin.com\/in\/kazi-amit-hasan\/<br\/>\nEmail: kaziamithasan89@gmail.com \n\n## HackerEarth Machine Learning challenge: Adopt a buddy\n### Rank: 166th out of 5000++ participants\n\nProblem:\nA leading pet adoption agency is planning to create a virtual tour experience for their customers showcasing all animals that are available in their shelter. To enable this tour experience, you are required to build a Machine Learning model that determines type and breed of the animal based on its physical attributes and other factors.\n\nProblem link: https:\/\/www.hackerearth.com\/problem\/machine-learning\/pet-adoption-9-5838c75b\/\nLeaderBoard link: https:\/\/www.hackerearth.com\/challenges\/competitive\/hackerearth-machine-learning-challenge-pet-adoption\/leaderboard\/pet-adoption-9-5838c75b\/page\/4\/\n\n##### Upvote if you like it."}}