{"cell_type":{"c314b860":"code","9717104e":"code","755dd713":"code","01a18e29":"code","9c0c18f7":"code","bfbe9803":"code","1b94607d":"markdown","94308fe3":"markdown"},"source":{"c314b860":"import numpy as np\nimport pandas as pd\nfrom hmmlearn import hmm\nfrom tqdm import tqdm_notebook as tqdm\nfrom sklearn.metrics import confusion_matrix\n\n# visualize\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\nfrom matplotlib import pyplot\nfrom matplotlib.ticker import ScalarFormatter\nsns.set_context(\"talk\")\nstyle.use('fivethirtyeight')","9717104e":"# load data\ndf_train = pd.read_csv(\"..\/input\/data-without-drift\/train_clean.csv\")\ntrain_time   = df_train[\"time\"].values.reshape(-1,500000)\ntrain_signal = df_train[\"signal\"].values.reshape(-1,500000)\ntrain_opench = df_train[\"open_channels\"].values.reshape(-1,500000)\n# df_test = pd.read_csv(\"..\/input\/data-without-drift\/test_clean.csv\")\n# test_time   = df_test[\"time\"].values.reshape(-1,500000)\n# test_signal = df_test[\"signal\"].values.reshape(-1,500000)","755dd713":"# sample data for quick test\ntrain_time = train_time[:, ::100]\ntrain_signal = train_signal[:, ::100]\ntrain_opench = train_opench[:, ::100]","01a18e29":"train_signal.shape","9c0c18f7":"# fit HMM and estimate hidden states\nhidden_states = train_signal.copy()\nhmm_models = []\nfor i in tqdm(np.arange(train_signal.shape[0])):\n    print(f\"batch {i} ==================\")\n    model = hmm.GaussianHMM(n_components=len(np.unique(train_opench[i])), covariance_type=\"full\", n_iter=500)\n    model.fit(train_signal[i].reshape(-1, 1))\n    hidden_states[i, :] = model.predict(train_signal[i].reshape(-1, 1))\n    hmm_models.append(model)","bfbe9803":"# hidden states vs open channels\nfig, ax = plt.subplots(5, 2, figsize=(12, 28))\nax = ax.flatten()\n\nfor i in np.arange(10):\n    cm = confusion_matrix(train_opench[i, :], hidden_states[i, :])\n    sns.heatmap(cm, annot=True, lw=1, ax=ax[i])\n    ax[i].set_xlabel(\"hidden states\")\n    ax[i].set_ylabel(\"open channels\")\n    ax[i].set_title(f\"batch {i}\")\nplt.tight_layout()","1b94607d":"Let's load the data and split it into the 10 separate measurement sequences. I use cleaned data from [this kernel](https:\/\/www.kaggle.com\/friedchips\/clean-removal-of-data-drift).","94308fe3":"As it has been pointed out (like in [this amazing kernel](https:\/\/www.kaggle.com\/friedchips\/on-markov-chains-and-the-competition-data) by [Markus F](https:\/\/www.kaggle.com\/friedchips), the signals in this competition data are simple Markov processes combined with Gaussian noise. So inferring underlying parameters of the Markov process would be benefitial to make a prediction.\n\nHere I used **the HMM (Hidden Markov Model)** to infer the discrete hidden states from the signal to see if those states are correlated with the open channels. The answer seems yes. This kernel is another demonstration that the signals in this competition data are simple Markov processes and the underlying parameters seem easily reconstructable."}}