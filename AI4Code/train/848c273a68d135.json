{"cell_type":{"35953042":"code","3f6d1232":"code","585f4d19":"code","47a74419":"code","a2646953":"code","3db4f385":"code","e5176e49":"code","99d8d2b7":"code","2bc79a35":"code","94b10b3e":"code","dd62e85e":"code","8ad087d8":"code","afc52897":"code","65cf57ce":"code","427e90d0":"code","f8297e90":"markdown","0af499cd":"markdown","5657dbc1":"markdown","66ae7f75":"markdown","824ced1e":"markdown","99bc5ab3":"markdown","550254cf":"markdown","608e696d":"markdown","78c5afd7":"markdown","619e8ade":"markdown","c71113c6":"markdown","cf24d789":"markdown"},"source":{"35953042":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f6d1232":"import matplotlib.pyplot as plt\n\nfifa19_all_data = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')\nfifa19_all_data","585f4d19":"fifa19_all_data.info()","47a74419":"limited_df = fifa19_all_data[[\"Name\", \"Age\", \"Nationality\", \"Overall\", \"Potential\", \"Club\", \"Value\", \"Wage\", \n                                \"International Reputation\", \"Position\"]]\nlimited_df","a2646953":"# Clean '\u20ac' symbol\nlimited_df.loc[:, 'Value'] = limited_df.loc[:, 'Value'].str.replace('\u20ac', '')\nlimited_df.loc[:, 'Wage'] = limited_df.loc[:, 'Wage'].str.replace('\u20ac', '')\n\n# Replace 'M' with 1.000.000 and 'K' with 1.000\nlimited_df.loc[:, 'Value'] = limited_df.loc[:, 'Value'].str.replace('M', ' 1000000').str.replace('K', ' 1000')\nlimited_df.loc[:, 'Value'] = limited_df.loc[:, 'Value'].str.split(' ', expand=True)[0].astype(float) * limited_df.loc[:, 'Value'].str.split(' ', expand=True)[1].astype(float)\nlimited_df.loc[:, 'Wage'] = limited_df.loc[:, 'Wage'].str.replace('M', ' 1000000').str.replace('K', ' 1000')\nlimited_df.loc[:, 'Wage'] = limited_df.loc[:, 'Wage'].str.split(' ', expand=True)[0].astype(float) * limited_df.loc[:, 'Wage'].str.split(' ', expand=True)[1].astype(float)\n\nlimited_df","3db4f385":"filteredby_age_df = limited_df[(limited_df[\"Age\"] < 30) & (limited_df[\"Age\"] > 22)].sort_values(by=['Wage', 'Value'], ascending=False)\nfilteredby_age_df","e5176e49":"filteredby_reputation_df = filteredby_age_df[(limited_df[\"International Reputation\"] < 5) & (filteredby_age_df[\"International Reputation\"] > 2)].sort_values(by=['Wage', 'Value'], ascending=False)\nfilteredby_reputation_df","99d8d2b7":"filteredby_potential_df = filteredby_reputation_df[filteredby_reputation_df[\"Potential\"] > 85].sort_values(by=['Potential', 'Wage', 'Value'], ascending=False)\nfilteredby_potential_df","2bc79a35":"filteredby_overall_df = filteredby_potential_df[filteredby_potential_df[\"Overall\"] > 85].sort_values(by=['Potential', 'Overall', 'Wage', 'Value'], ascending=False)\nfinal_set_df = filteredby_overall_df\nfinal_set_df","94b10b3e":"final_set_df.describe()","dd62e85e":"nation_column = final_set_df['Nationality'] \nnationality_dict = dict()\n\n# Create a dictionary with nations and their count numbers\nfor nation in nation_column:\n    if(nation not in nationality_dict):\n        nationality_dict[nation] = nation_column[nation_column == nation].count()\n\nnumber_countries = len(nationality_dict.keys())\nnumber_players = sum(nationality_dict.values())\n\n# Update the dictionary with percentage information\nfor key, value in nationality_dict.items():\n    percentage = round(value * 100.0 \/ number_players, 1)\n    nationality_dict[key] = percentage\n\nprint(nationality_dict)\n\nfig, ax = plt.subplots(figsize=(20, 10))\nax.pie(nationality_dict.values(), labels=nationality_dict.keys(), autopct='%1.1f%%', shadow=True)\nax.axis('equal')\nax.set_title(\"Players' Nationality Distribution\", fontsize=30, ha='center')\n\nplt.show()","8ad087d8":"# Group all positions and create a new column called \"Position Grouped\"\nfinal_set_df['Position Grouped'] = np.select(\n    [\n        final_set_df['Position'].str.contains('GK'),\n        final_set_df['Position'].str.endswith('B'),\n        final_set_df['Position'].str.endswith('M') | final_set_df['Position'].str.endswith('W'),\n        final_set_df['Position'].str.contains('ST') | final_set_df['Position'].str.endswith('F')\n    ], \n    [\n        'Goalkeeper',\n        'Defender',\n        'Midfielder',\n        'Attacker'\n    ], \n    default='Unknown'\n)\n\nfinal_set_df","afc52897":"positions_dict = dict()\npositions_dict = { value:final_set_df['Position Grouped'][final_set_df['Position Grouped'] == value].count() for key, value in final_set_df['Position Grouped'].items() if value not in positions_dict }\n\nprint(positions_dict)\n\nposition_names = list(positions_dict.keys())\nposition_count = list(positions_dict.values())\n\nplt.style.use('fivethirtyeight')\n\nfig, ax = plt.subplots(figsize=(8, 4))\nax.barh(position_names, position_count)\nlabels = ax.get_xticklabels()\nplt.setp(labels, horizontalalignment=\"center\")\nax.set(title=\"Total Count of Each Position on Final Dataset\", ylabel=\"Position Name\", xlabel=\"Count\")","65cf57ce":"top3_gk = final_set_df[final_set_df['Position Grouped'] == 'Goalkeeper'].nlargest(3, 'Overall')\ntop3_df = final_set_df[final_set_df['Position Grouped'] == 'Defender'].nlargest(3, 'Overall')\ntop3_mf = final_set_df[final_set_df['Position Grouped'] == 'Midfielder'].nlargest(3, 'Overall')\ntop3_st = final_set_df[final_set_df['Position Grouped'] == 'Attacker'].nlargest(3, 'Overall')\ntop3_players = top3_gk.append([top3_df, top3_mf, top3_st])\ntop3_players = top3_players.sort_values(by=['Position Grouped', 'Overall'])\ntop3_players","427e90d0":"# data = top3_players['Name', 'Overall'].to_dict()\n#names = list(data.keys())\n#values = list(data.values())\nnames = top3_players['Name']\nvalues = top3_players['Overall']\n\nfig, axs = plt.subplots(1, 4, figsize=(25, 5), sharey=True)\naxs[0].scatter(names[0:3], values[0:3], s=400)\naxs[0].title.set_text('Top 3 Attackers')\naxs[0].set_xlabel('\\nPlayer Names')\naxs[0].set_ylabel('\\nOverall')\naxs[1].scatter(names[3:6], values[3:6], s=400)\naxs[1].title.set_text('Top 3 Defenders')\naxs[1].set_xlabel('\\nPlayer Names')\naxs[1].set_ylabel('\\nOverall')\naxs[2].scatter(names[6:9], values[6:9], s=400)\naxs[2].title.set_text('Top 3 Goalkeepers')\naxs[2].set_xlabel('\\nPlayer Names')\naxs[2].set_ylabel('\\nOverall')\naxs[3].scatter(names[9:12], values[9:12], s=400)\naxs[3].title.set_text('Top 3 Midfielders')\naxs[3].set_xlabel('\\nPlayer Names')\naxs[3].set_ylabel('\\nOverall')\nfig.suptitle('Top \\n3 Players', fontsize=30)\n","f8297e90":"Secondly, let's create a new dataframe with the attributes we will use in the direction of our goal. We can select the attributes by examining the above detailed attribute list.","0af499cd":"# FIFA 19 Complete Player Dataset Analysis\n\nThe objective of this analysis is to find the most favourable player in FIFA 19.","5657dbc1":"Second, let's look at nationality pie chart graph which can help us to think in a more visualize way.","66ae7f75":"First of all, we need to read our dataset and check it in our environment.","824ced1e":"Let's check overall information of the dataset such as attributes' data types etc.","99bc5ab3":"According to the filters we applied so far, we can think our most favourable players for each position as the following.\n* **De Gea** for Goalkeeper position\n* **M. Hummels** for Defensive position\n* **K. De Bruyne** for Midfielder position\n* **E. Hazard** for Attacker position","550254cf":"Lastly, we will group all positions we have in our final dataframe. After, we will create another graph in order to find our most favourable player.","608e696d":"As you see in above result, we narrowed our search up to the number of 45. I think this is very good in order to make a decision. From now on, I would like to check above set's summary information by both statistically and graphically. In this way, I think we can have a better understanding on our final set.","78c5afd7":"Let's convert **value** and **wage** attributes' data types to complete numeric type. At the moment they include string values such as Euro sign and abbreviations like M and K for Millions etc.","619e8ade":"First, let's look at some statistics which pandas already provides.","c71113c6":"We will show top 3 players from our final dataset in categorical way.","cf24d789":"Because this is a \"game\", I don't prefer having aged players especially if they are very costly for my club. That is why I want to find the most favourable player according to the following criterias; the player\n* should **not** be more than 30 years old.\n* should **not** have the maximum reputation because this brings lots of costs along with it.\n* should have the possible highest potential.\n\nThese criterias can be expandable if necessary. "}}