{"cell_type":{"6850d0fc":"code","67e38f4e":"code","807f5e2c":"code","4a8589e8":"code","5c40cb8f":"code","54db7f33":"code","284ddfbd":"code","8c8f2bbf":"code","01eec4b3":"code","e11734fc":"code","e066598f":"code","e89bc4c9":"code","02e07ac6":"markdown","179a84cd":"markdown"},"source":{"6850d0fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n\n\n# Any results you write to the current directory are saved as output.","67e38f4e":"school = pd.read_csv(\"..\/input\/2016 School Explorer.csv\")\nschool.head()\n# school.columns.values","807f5e2c":"print(school.dtypes)\n#changing variable SIE from object to float\nschool['School Income Estimate'] = school['School Income Estimate'] .str.replace('$',\"\")\nschool['School Income Estimate'] = school['School Income Estimate'] .str.replace(',',\"\")\nschool['School Income Estimate'] = school['School Income Estimate'].astype(float)","4a8589e8":"##Finding percentage of missing values in the data\npercent_missing = 100*(pd.isnull(school).sum())\/1272\npercent_missing\nprint(\"before imputation\\n\",school['School Income Estimate'].describe())\n\n#we can see in the variable school income estimate there are 31% missing values. \n#Missing value imputation needs to be done for that variable since dropping the missing values will \n#lead to loss of information.\n\nschool['School Income Estimate'] = school['School Income Estimate'].fillna(method = \"bfill\" )\npd.isnull(school['School Income Estimate']).sum()\nprint(\"\\nAfter imputation\\n\",school['School Income Estimate'].describe())","5c40cb8f":"###Detecting outliers in quantitative variables\nschool.boxplot(column = 'School Income Estimate')\nQ1 = school['School Income Estimate'].quantile(0.25)\nQ3 = school['School Income Estimate'].quantile(0.75)\nIQR = Q3 - Q1\nd = ((school['School Income Estimate'] < (Q1 - 1.5 * IQR)) | (school['School Income Estimate'] > (Q3 + 1.5 * IQR))).sum()\nprint(\"There are \",d*100\/1272,\"% outliers in the variable - School Income Estimate\")\n#there are 3.5 percent outliers in the column School Income Estimate.\n\n#####For Economic need index\nschool.boxplot(column = 'Economic Need Index')\nQ1 = school['Economic Need Index'].quantile(0.25)\nQ3 = school['Economic Need Index'].quantile(0.75)\nIQR = Q3 - Q1\ne = ((school['Economic Need Index'] < (Q1 - 1.5 * IQR)) | (school['Economic Need Index'] > (Q3 + 1.5 * IQR))).sum()\nprint(\"There are \",e*100\/1272,\"% outliers in the variable - Economic Need Index\")\n#there are 1.3 percent outliers in the column Economic Need Index.\n","54db7f33":"###Scatterplot for School Income Estimate and Economic Need Index\nsns.jointplot(x = \"School Income Estimate\", y = \"Economic Need Index\" , data = school)\n##From the scatterplot we can see that less is the school Income Estimate, the more is\n# the mor is the Economic need index.\n## it is negatively correlated","284ddfbd":"## barplot or different ethnicities\nsubset = school.loc[:,\"Percent Asian\":\"Percent White\"]\nsubset = subset.drop(columns = \"Percent Black \/ Hispanic\" )\n# subset.head()\nsubset.columns.values\n\n## converting percentages to float\nsubset[\"Percent Asian\"] = subset[\"Percent Asian\"].str.replace( '%',\"\")\nsubset['Percent Black'] = subset['Percent Black'].str.replace( '%',\"\")\nsubset[\"Percent Hispanic\"] = subset[\"Percent Hispanic\"].str.replace( '%',\"\")\nsubset[\"Percent White\"] = subset[\"Percent White\"].str.replace( '%',\"\")\nsubset\nsubset = (subset).astype(float)\n\nsubset[\"City\"] = school[\"City\"]\nsubset.head()\n\na = subset.groupby(by = subset['City']).sum()\nprint(type(a))\n# city = a.index\n# a['city'] = city\n# print(a)\n# a.columns.values\n# a = a.transpose()\n# a.head()\n\na = a.div(a.sum(1), axis=0)\na.plot(kind='bar', stacked=True)\n# sns.set()\n# a.T.plot(kind='bar', stacked=True)","8c8f2bbf":"###Collaborative Teachers Rating and Student Achievement Rating\ncross = pd.crosstab(index = school['Collaborative Teachers Rating'], columns = school['Student Achievement Rating'])\n\ncross = cross.div(cross.sum(1), axis=0)\ncross.plot(kind = 'bar', stacked = True)\n","01eec4b3":"\nschool[\"Percent ELL\"]=school[\"Percent ELL\"].str.replace(\"%\",\"\")\nschool[\"Percent ELL\"]=school[\"Percent ELL\"].astype(float)\nschool[\"Percent Asian\"]=school[\"Percent Asian\"].str.replace(\"%\",\"\")\nschool[\"Percent Asian\"]=school[\"Percent Asian\"].astype(float) \nschool[\"Percent Black\"]=school[\"Percent Black\"].str.replace(\"%\",\"\")\nschool[\"Percent Black\"]=school[\"Percent Black\"].astype(float)\nschool[\"Percent White\"]=school[\"Percent White\"].str.replace(\"%\",\"\")  \nschool[\"Percent White\"]=school[\"Percent White\"].astype(float)\nschool[\"Student Attendance Rate\"]=school[\"Student Attendance Rate\"].str.replace(\"%\",\"\") \nschool[\"Student Attendance Rate\"]=school[\"Student Attendance Rate\"].astype(float)\nschool[\"Percent of Students Chronically Absent\"]=school[\"Percent of Students Chronically Absent\"].str.replace(\"%\",\"\")\nschool[\"Percent of Students Chronically Absent\"]=school[\"Percent of Students Chronically Absent\"].astype(float)\nschool[\"Rigorous Instruction %\"]=school[\"Rigorous Instruction %\"].str.replace(\"%\",\"\")\nschool[\"Rigorous Instruction %\"]=school[\"Rigorous Instruction %\"].astype(float)\nschool[\"Collaborative Teachers %\"]=school[\"Collaborative Teachers %\"].str.replace(\"%\",\"\") \nschool[\"Collaborative Teachers %\"]=school[\"Collaborative Teachers %\"].astype(float)\nschool[\"Supportive Environment %\"]=school[\"Supportive Environment %\"].str.replace(\"%\",\"\")\nschool[\"Supportive Environment %\"]=school[\"Supportive Environment %\"].astype(float)\nschool[\"Effective School Leadership %\"]=school[\"Effective School Leadership %\"].str.replace(\"%\",\"\") \nschool[\"Effective School Leadership %\"]=school[\"Effective School Leadership %\"].astype(float) \nschool[\"Strong Family-Community Ties %\"]=school[\"Strong Family-Community Ties %\"].str.replace(\"%\",\"\")\nschool[\"Strong Family-Community Ties %\"]=school[\"Strong Family-Community Ties %\"].astype(float)\nschool[\"Trust %\"]=school[\"Trust %\"].str.replace(\"%\",\"\").astype(float) \n \n      \n","e11734fc":"#HeatMap to find correlation between the variables\nimport seaborn as sns\ndf = school.iloc[:,[16,17,19,20,21,22,23,24,25,26,28,30,32,34,36]]\n#Correlation Matrix\ncorr = df.corr()\ncorr = (corr)\nsns.heatmap(corr, \n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values,\n            cmap=\"PuOr\", center=0)\n#From the heatmap, the following relationships are observed\n#Economic Need Index and School Income estimate are negatively correlated\n#The School with low income has more Economic Need Index\n#Percent White and Economic Need Index are negatively correlated. This shows the \n#schools with more percent of white people has less Economic Need Index \n#There is assoication between Collobartive teachers and Effective School Leadership\n\n","e066598f":"\nimport folium\nimport pandas as pd\n\nlat = list(school[\"Latitude\"])\nlon = list(school[\"Longitude\"])\nelev = list(school[\"Economic Need Index\"])\n\ndef color_producer(elevation):\n    if elevation < 0.3:\n        return 'green'\n    elif 0.3 <= elevation < 0.7:\n        return 'orange'\n    else:\n        return 'red'\nmap = folium.Map(location=[40.721834,-73.978766],tiles=\"Mapbox Bright\",zoom_start=10) #Intialising basemap\nfg = folium.FeatureGroup(name=\"My Map\")\nfor lt, ln, el in zip(lat, lon, elev):\n     fg.add_child(folium.CircleMarker(location=[lt, ln], radius = el, popup=\"Economic Need Index:\"+str(el), \n     color=color_producer(el),fill_opacity=0.7))\nmap.add_child(fg)\nmap\n","e89bc4c9":"elev1 = list(school[\"School Income Estimate\"])\ndef color_producer1(elevation):\n    if elevation < 50000:\n        return 'green'\n    elif 50000 <= elevation < 100000:\n        return 'orange'\n    else:\n        return 'red'\n\nm = folium.Map(location=[40.721834,-73.978766],tiles=\"Mapbox Bright\",zoom_start=10)\nfg = folium.FeatureGroup(name=\"My Map\")\nfor lt, ln, el in zip(lat, lon, elev1):\n     fg.add_child(folium.CircleMarker(location=[lt, ln], radius = 2, popup=\"School Income Estimate:\"+str(el),\n     color=color_producer1(el),fill_opacity=0.7))\nm.add_child(fg)\n# turn on layer control\nm.add_child(folium.map.LayerControl())\nm\n","02e07ac6":"**Map showing Economic Need Index of each area**","179a84cd":"**Map showing School Income Estimate of each area**"}}