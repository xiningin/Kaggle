{"cell_type":{"616a503c":"code","922ab11a":"code","5bcd8a16":"code","7cea345b":"code","c2273a96":"code","eb8cbedf":"code","62078190":"code","8bb55dbf":"code","e54ba9e3":"code","8fb5f3b6":"code","f0483d3e":"code","04008b8b":"code","c2cbd018":"code","9fc6ff0c":"code","3d4363c7":"code","893f8292":"code","c7617923":"code","ece589e0":"code","eede100a":"code","98d25b3a":"code","13a670a4":"code","b1de477e":"code","67bd842d":"code","f3ec5a6e":"code","f5546d0d":"code","46ea8919":"code","82429539":"code","64252e83":"code","c0ce27ad":"code","a5f37353":"code","1a17e2f5":"code","34e1e354":"code","6bd3f105":"code","78f4c713":"code","ce34e68f":"code","36ee9f15":"code","6b9913a6":"code","ec69661a":"code","4690b940":"code","5347fdea":"code","4437b085":"code","d4070523":"code","e153501b":"code","52f0f0d5":"code","1bc720d6":"code","26f15228":"code","d459d1a5":"code","7cc18efa":"code","889e4a78":"code","821a4252":"code","6fa1a5c9":"code","85c79817":"code","2419cf7f":"code","5964520c":"code","600aa667":"markdown","abd59b11":"markdown","1e256824":"markdown","84d2a084":"markdown","8a1bc809":"markdown","68c865d6":"markdown","7e936489":"markdown","c86f56a0":"markdown","5fe92d67":"markdown","b705a52c":"markdown","62d5e4b9":"markdown","a19152d8":"markdown","2b09045e":"markdown","453e62af":"markdown","cb4f1161":"markdown","c7771543":"markdown","5251a246":"markdown","66bcac99":"markdown","82dfc381":"markdown","56617389":"markdown","5784b051":"markdown","8b7353e9":"markdown"},"source":{"616a503c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(os.listdir(\"..\/input\"))\n\n\n# Any results you write to the current directory are saved as output.","922ab11a":"data = pd.read_csv ('..\/input\/2015.csv') #datasetimizi data adl\u0131 de\u011fi\u015fkene atad\u0131k","5bcd8a16":"data.info() #datam\u0131z ile ilgili genel bilgileri g\u00f6zden ge\u00e7irdik","7cea345b":"data.corr() #datam\u0131z\u0131n korelasyonuna bakt\u0131k ","c2273a96":"f,ax = plt.subplots(figsize=(18, 18)) #\u015eimdiki bilgilerimle bunu kendi ba\u015f\u0131ma yazamam ama ilk sat\u0131r\u0131 yazmad\u0131\u011f\u0131mz\u0131 zaman kod hata veriyor,ax'in tan\u0131mlanmad\u0131\u011f\u0131n\u0131 s\u00f6yl\u00fcyor. \u0130lk sat\u0131rda muhtemelen ax'i tan\u0131ml\u0131yoruz ve karelerin boyutunu belirtiyoruz.\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","eb8cbedf":"data.head(10) #\u0130lk 10 eleman\u0131n bilgilerini ald\u0131k, e\u011fer data.head() \u015feklinde yazsayd\u0131k ilk 5 eleman\u0131 verirdi","62078190":"data.columns #S\u00fctunlra bakmak i\u00e7in kulland\u0131k.","8bb55dbf":"data.columns = [each.split()[0] +\"_\" + each.split()[1] if (len(each.split())>1) else each for each in data.columns]\ndata.columns","e54ba9e3":"# Line plot \n# color = renk , label = etiket , linewidth = \u00e7izgi kal\u0131nl\u0131\u011f\u0131 , alpha = opakl\u0131k , grid = \u0131zgara, linestyle = \u00e7izgi stili\n\ndata.Freedom.plot (kind = 'line', color = 'm', label = 'Freedom', linewidth = 1, alpha = 0.7 , grid = True, linestyle = ':'  ) \ndata.Happiness_Rank.plot (kind = 'line', color = 'r', label = 'Happiness_Rank', linewidth = 1, alpha = 0.7 , grid = True, linestyle = '-.'  ) #Bu iki sat\u0131rda x ve y eksenlerine datam\u0131z\u0131n\u0131n hangi kolonlar\u0131n\u0131 koyaca\u011f\u0131m\u0131z\u0131 se\u00e7tik ve gerekli ayarlamalar\u0131 yapt\u0131k\nplt.legend(loc='upper left') #Bilgilendirme etiketini nereye koyaca\u011f\u0131m\u0131z\u0131 se\u00e7tik\nplt.xlabel('x axis')\nplt.ylabel('y axis') #x ve y eksenlerine isim verdik\nplt.title('Freedom and Happiness Rank Relationship') #Grafi\u011fimize isim verdik \nplt.show() #Grafi\u011fimizi g\u00f6rmek istiyorsak bunu kesinlikle yazmam\u0131z gerekiyor\n\n","8fb5f3b6":"# Scatter plot\n\ndata.plot(kind ='scatter', x ='Family', y = 'Freedom', alpha = 0.5, color = 'red')\nplt.xlabel('Family')\nplt.ylabel('Region')\nplt.title('Family-Region')\nplt.show()","f0483d3e":"# Histogram \n\ndata.Happiness_Score.plot(kind = 'hist', bins = 50 )\nplt.show()\n","04008b8b":"dictionary = {'Fruits':['Apple', 'Orange','Pomegranate'],'Vegatables': ['Onion', 'Potato', 'Cucumber']} #Dictionary ad\u0131nda bir s\u00f6zl\u00fck olu\u015fturduk ve Fruits ve Vegatabales ad\u0131nda iki anahtar belirledik. \u0130lgili de\u011fi\u015fkenleri ise bu anahtarlar\u0131n i\u00e7ine yazd\u0131k.\nprint(dictionary.keys())\nprint(dictionary.values())\n\ndictionary['Fruits'] = 'Apple'\nprint(dictionary)\ndictionary['Dessert'] = 'IceCream'\nprint(dictionary)\ndel dictionary['Dessert']\nprint(dictionary)\nprint('Fruits'in dictionary)\ndictionary.clear()\nprint(dictionary)\n","c2cbd018":"x = data['Family'] >0.8\ndata[x]","9fc6ff0c":"data[(data['Family']>0.8) & (data['Happiness_Score']>6)] #datam\u0131z\u0131n i\u00e7indeki Family ve Happiness_Score adl\u0131 s\u00fctunlar\u0131n i\u00e7indeki bilgilerden istedi\u011fimiz aral\u0131kta olanlar\u0131 ald\u0131k.","3d4363c7":"print(data.Region)","893f8292":"liste = data.Region\n\nwe = 0\nssa = 0\nfor each in liste :\n    if(each == 'Western Europe'):\n        we = we + 1 \n    elif(each == 'Sub-Saharan Africa'):\n        ssa = ssa + 1\n    else:\n            continue\nprint(we)   \nprint(ssa)\n            \n","c7617923":"def tuble_ex():\n    \"\"\"yorum sat\u0131r\u0131\"\"\"\n    t = (1,2,3)\n    return t \nprint(tuble_ex())","ece589e0":"x = data.Happiness_Score\ndef f():\n    y = 2 * x\n    return y\nprint(f())\n\n","eede100a":"def cember_cevre(r):\n    def carp(pi=3.14):\n        sonuc = 2 * pi\n        return sonuc \n    return carp()*r\nprint(cember_cevre(2))\n    \n    ","98d25b3a":"def f(*args):\n    for i in args:\n          print(i)\nf(10)  \n\ndef k(**kwargs):\n    for key, value in kwargs.items():\n        print(key, \" \", value)\nk(country = 'spain', capital = 'madrid', populaiton = 123456)      \n\n        ","13a670a4":"number_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","b1de477e":"list1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","67bd842d":"num1 = [1,2,3]\nnum2 = [i+1 for i in num1]\nprint(num2)","f3ec5a6e":"num1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i - 5 if i < 7 else i + 5 for i in num1]\nprint(num2)","f5546d0d":"threshold = sum(data.Family) \/ len(data.Family)\ndata[\"Family_Size\"] = [\"big\" if i> threshold else \"low\" for i in data.Family]\ndata.loc[:20,[\"Family_Size\",\"Family\"]]\nprint(threshold)","46ea8919":"import pandas as pd \nimport matplotlib.pyplot as plt\ndata = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')\ndata_world = pd.read_csv ('..\/input\/world-happiness\/2015.csv')","82429539":"data_world.info()","64252e83":"data.head()","c0ce27ad":"data.tail()","a5f37353":"data.columns","1a17e2f5":"data.shape","34e1e354":"data.info()","6bd3f105":"print(data['Type 1'].value_counts(dropna = False)) #Type1 kolonunda tek tek ka\u00e7 eleman oldu\u011funu g\u00f6sterir.","78f4c713":"data.describe()","ce34e68f":"data.boxplot(column = 'Speed', by = 'Legendary')","36ee9f15":"data_new = data.head()\ndata_new","6b9913a6":"melted = pd.melt(frame = data_new, id_vars = 'Name', value_vars = ['Attack','Defense'])\nmelted","ec69661a":"melted.pivot(index = 'Name', columns = 'variable', values = 'value')","4690b940":"data1 = data.head()\ndata2 = data.tail()\nconc_data_row = pd.concat([data1,data2],axis = 0, ignore_index = True)\nconc_data_row","5347fdea":"country = [\"Spain\",\"France\"]\npopulation = [\"11\",\"12\"]\nlist_label = [\"country\",\"population\"]\nlist_col =[country,population]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf\n\n","4437b085":"df[\"capital\"] = [\"madrid\",\"paris\"]\ndf","d4070523":"df[\"income\"] = 0\ndf","e153501b":"data1 = data.loc[ : , [ \"Attack\" , \"Defense\" , \"Speed\"]]\ndata1.plot()\nplt.show()","52f0f0d5":"data1.plot(subplots = True )\nplt.show()","1bc720d6":"data1.plot(kind = \"scatter\", x=\"Attack\", y =\"Defense\")\nplt.show()","26f15228":"data1.plot(kind = \"hist\", y = \"Attack\", bins = 50 , range = (0,250), normed = True)\n","d459d1a5":"fig,axes = plt.subplots(nrows = 2, ncols = 1)\ndata1.plot (kind = \"hist\", y = \"Defense\", bins = 50, range = (0,250), normed = True, ax = axes[0])\ndata1.plot (kind = \"hist\", y = \"Defense\", bins = 50, range = (0,250), normed = True, ax = axes[1], cumulative = True )\nplt.savefig ('graph.png')\nplt\n","7cc18efa":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1]))\n\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","889e4a78":"import warnings \nwarnings.filterwarnings(\"ignore\")\n\ndata2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n\ndata2 = data2.set_index(\"date\")\ndata2","821a4252":"print(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","6fa1a5c9":"data2.resample(\"A\").mean()","85c79817":"data2.resample(\"M\").mean()","2419cf7f":"data2.resample(\"M\").first().interpolate(\"linear\")","5964520c":"data2.resample(\"M\").mean().interpolate(\"linear\")","600aa667":"**Building Data Frames From Scratch**","abd59b11":"# 4.Pandas Foundation","1e256824":"**Visual Exploratory Data Analysis**\n","84d2a084":"**Scope**","8a1bc809":"**Pivoting Data**","68c865d6":"**Concatenating Data**","7e936489":"datetime = object\n\nparse_dates(boolean) : Trasnform date to ISO 8601(yyyy-mm-dd hh:mm:ss) format","c86f56a0":"**List Comprehension**","5fe92d67":"**Exploratory Data Analysis**","b705a52c":"**Visual Exploratory Data Analysis**","62d5e4b9":"# 1.INTRODUCTION TO PYTHON\n\n\n**MATPLOTLIB**\n\nMatplot, verileri grafiklere d\u00f6kmek i\u00e7in kulland\u0131\u011f\u0131m\u0131z bir python k\u00fct\u00fcphanesidir. En kolay ve temel grafikler line, scatter ve histogramlard\u0131r.\n\n* Eksenlerimizden birisi zaman ise line, di\u011fer grafiklere nazaran daha iyi sonu\u00e7lar verecektir.\n* \u0130ki de\u011fi\u015fken aras\u0131ndaki korelasyonu g\u00f6rmek istiyorsak scatter'\u0131 kullanabiliriz.\n* Say\u0131sal bir verinin da\u011f\u0131l\u0131m\u0131n\u0131 g\u00f6rmek istiyorsak histogram'\u0131 kullanabiliriz.\n* \u00d6zelle\u015ftirme : Grafiklerin renkleri, \u00e7izgi kal\u0131nl\u0131klar\u0131, opakl\u0131\u011f\u0131 gibi \u00f6zelliklerini ayarlayabiliriz.\n\n","a19152d8":"**Indexin Pandas Time Series**","2b09045e":"1. Introduction to Python :\n          A. Matplotlib\n          B. Dictionaries\n          C. Pandas\n          D. Logic, control flow and filtering\n          E. Loop data structures\n2. Python Data Science Toolbox\n          A. User Defined Function\n          B. Scope\n          C. Nested Function\n          D. Default and Flexible Arguments\n          E. Lambda Function\n          F. Anonymous Function\n          G. Iterators\n          H. List Comprehension\n3. Cleaning Data\n          A. Diagnose Data for Cleaning\n          B. Exploratory Data Analysis\n          C. Visual Exploratory Data Analysis\n          D. Tidy Data\n          E. Pivoting Data\n          F. Concatenating Data\n          G. Data Types\n          H. Missing Data and Testing With Assert\n4. Pandas Foundation\n          A.Review of Pandas\n          B. Building Data Frames From Scratch\n          C. Visual Exploratory Data Analysis\n          D. Statistical Explatory Data Analysis\n          E. Indexing Pandas Time Series\n          F. Resampling Pandas Time Series\n5. Manipulating Data Frames With Pandas\n          A. Indexing Data Frames\n          B. Slicing Data Frames\n          C. Filtering Data Frames\n          D. Transforming Data Frames\n          E. Index Objects and Labeled Data\n          F. Hierarchical Indexing\n          G. Pivoting Data Frames\n          H. Stacking and Unstacking Data Frames\n          I. Melting Data Frames\n          J. Categoricals and Groupby","453e62af":"**DICTIONARY**    \n\nNeden s\u00f6zl\u00fc\u011fe ihtiya\u00e7 duyar\u0131z ?\n* Anahtar ve de\u011fi\u015fken vard\u0131r.\n* Listeden daha h\u0131zl\u0131d\u0131r.\n\nAnahtar ve de\u011fi\u015fken nedir ? \u00d6rnek :\n* dictionary = {'spain' : 'madrid'}\n* Spain anahtard\u0131r.\n* Madrid ise de\u011fi\u015fkendir.\n","cb4f1161":"**Diagnose Data for Cleaning**","c7771543":"# 2.Python Data Science Toolbox","5251a246":"**Nested Function**","66bcac99":"**Default and Flexible Arguments**","82dfc381":"**Resampling Pandas Time Series**","56617389":"**Tidy Data**","5784b051":"**User Defined Function**","8b7353e9":"# 3.Cleaning Data"}}