{"cell_type":{"82c8734a":"code","011b7bf5":"code","190a9dd5":"code","5668e664":"code","dce3c6a9":"code","12f87d00":"code","3426093b":"code","cb067d5d":"code","1a0aad7a":"code","a7407cf7":"code","7168e5b6":"code","9b470f56":"code","4d7b44b5":"code","955ec872":"code","f2808419":"code","336bc1d7":"code","55476dba":"code","29450023":"code","fe226735":"code","240caf3d":"code","2230ad1f":"code","84b29e02":"code","35fe3623":"code","e51e66f9":"code","585810cf":"code","2c92bb86":"code","cab7dc4a":"code","5b5da18c":"code","d5750b01":"code","89cc72ad":"code","bb81e27e":"code","4231e5da":"code","f0cc8c8e":"code","17eaa317":"code","604b1a4c":"code","8645dc41":"markdown","87b8430e":"markdown","21137441":"markdown","4985a46c":"markdown","34d05201":"markdown","34067151":"markdown","21ad3837":"markdown","018c8f17":"markdown","299569b4":"markdown","48580a2f":"markdown","c42775c2":"markdown","b7dd7493":"markdown","60149d34":"markdown","b66011aa":"markdown","e431e371":"markdown","3832884a":"markdown","fa89495d":"markdown","0a4477ab":"markdown","9f74c02d":"markdown","06f5a548":"markdown","c3dc15fd":"markdown","fd5902c2":"markdown","6d35cbc3":"markdown","11753384":"markdown","f5609810":"markdown","9f694a52":"markdown","dbbc6679":"markdown","52f7ce5e":"markdown","78131bea":"markdown","55d8be00":"markdown","34c1de55":"markdown","5c8a3592":"markdown"},"source":{"82c8734a":"import pandas as pd\nimport matplotlib.pylab as plt\nimport seaborn as sns\nimport warnings","011b7bf5":"warnings.simplefilter('ignore')\n\n%matplotlib inline\n%reload_ext autoreload\n%autoreload 2\n\nsns.set_style('whitegrid')\nsns.set_context('paper', font_scale=1.5)\n\nplt.style.use('fivethirtyeight')\n\npd.set_option('display.width', 100)\npd.set_option('display.max_rows', 25)\npd.set_option('display.max_columns', 25)","190a9dd5":"pizza_data = pd.read_csv('..\/input\/pizza-price-prediction\/pizza_v2.csv') # Load dataset","5668e664":"pizza_data # Checking the overall data","dce3c6a9":"pizza_data.info() # Getting the information about the data","12f87d00":"pizza_data.dtypes.to_frame() # Checking the type","3426093b":"pizza_data['price_rupiah'] = pizza_data['price_rupiah'].str.replace('Rp', '').str.replace(',', '').astype('float64') # Removing Rp \npizza_data['diameter'] = pizza_data['diameter'].str.replace('inch', '').str.replace(',', '').astype('float64') # Removing Inch\n\npizza_data.loc[:, ['price_rupiah', 'diameter']] # Checking","cb067d5d":"pizza_data.dtypes.to_frame() # Checking","1a0aad7a":"pizza_data.T # Checking the structure of our data","a7407cf7":"plt.figure(figsize=(16, 5))\nsns.boxplot(x='company', y='price_rupiah', data=pizza_data, hue='extra_sauce')\nplt.title('Boxplot Visualization does the Pizza get Extra Sauce or Nah')\nplt.ylim(0, 250000)\nplt.show()","7168e5b6":"plt.figure(figsize=(16, 5))\nsns.boxplot(x='company', y='price_rupiah', data=pizza_data, hue='extra_cheese')\nplt.title('Boxplot Visualization does the Pizza get Extra Cheese or Nah')\nplt.ylim(0, 250000)\nplt.show()","9b470f56":"plt.figure(figsize=(16, 5))\nsns.boxplot(x='company', y='price_rupiah', data=pizza_data, hue='extra_mushrooms')\nplt.title('Boxplot Visualization does the Pizza get Extra Mushrooms or Nah')\nplt.ylim(0, 250000)\nplt.show()","4d7b44b5":"plt.figure(figsize=(16, 16))\nsns.boxplot(x='company', y='price_rupiah', data=pizza_data, hue='variant')\nplt.title('Boxplot Visualization Pizza Variant')\nplt.ylim(0, 250000)\nplt.show()","955ec872":"plt.figure(figsize=(16, 12))\nsns.boxplot(x='company', y='price_rupiah', data=pizza_data, hue='topping')\nplt.title('Boxplot Visualization Pizza Topping')\nplt.ylim(0, 250000)\nplt.show()","f2808419":"plt.figure(figsize=(16, 12))\nsns.boxplot(x='company', y='price_rupiah', data=pizza_data, hue='size')\nplt.title('Boxplot Visualization Pizza Size')\nplt.ylim(0, 250000)\nplt.show()","336bc1d7":"plt.figure(figsize=(16, 5))\nsns.swarmplot(x='company', y='price_rupiah', data=pizza_data)\nplt.title('Company with their Price')\nplt.ylim(0, 260000)\nplt.show()","55476dba":"plt.figure(figsize=(16, 5))\nsns.swarmplot(x='company', y='diameter', data=pizza_data)\nplt.title('Company with their Diameter')\nplt.ylim(0, 30)\nplt.show()","29450023":"pizza_fg = sns.FacetGrid(pizza_data, col='company', col_wrap=5, height=5)\npizza_fg.map(plt.plot, 'price_rupiah', 'diameter', marker='.')\nplt.show()","fe226735":"from sklearn.preprocessing import LabelEncoder # Import the Encoder\n\nencoder = LabelEncoder() # Let's gooo!","240caf3d":"for i in pizza_data.columns: # Make a for loops\n    if pizza_data[i].dtype == 'object': \n        encoder.fit_transform(list(pizza_data[i].values)) # Fit transform\n        pizza_data[i] = encoder.transform(pizza_data[i].values) # Transform\n         \n        for j in pizza_data.columns: # Make a for loops again\n            if pizza_data[j].dtype == 'int':\n                pizza_data[j] = pizza_data[j].astype('float64') # Change the type","2230ad1f":"pizza_data.head() # Checking the first 5 rows of data","84b29e02":"from xgboost import XGBRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline","35fe3623":"X = pizza_data.drop(columns=['price_rupiah']) # Data X\ny = pizza_data['price_rupiah'] # Data y","e51e66f9":"X_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.3, random_state=42 # Split it into train and test data\n) ","585810cf":"pipe = Pipeline([ # Our Pipeline\n    ('scaler', StandardScaler()),\n    ('transformer', QuantileTransformer(\n        random_state=42\n    )),\n    ('model', XGBRegressor(\n        learning_rate=0.09,\n        n_estimators=1200,\n        random_state=42,\n        objective='reg:squarederror',\n        booster='gbtree'\n    ))\n])\n\npipe.fit(X_train, y_train) # Train Data","2c92bb86":"from sklearn import metrics\nimport math","cab7dc4a":"pred_train = pipe.predict(X_train) # Predict Train Data\npred_test = pipe.predict(X_test) # Predict Test Data","5b5da18c":"train_r2_score = metrics.r2_score(y_train, pred_train) # R2_score\nprint(f'Train R2_score: {train_r2_score}')\n\ntrain_mse = metrics.mean_squared_error(y_train, pred_train) # MSE Score\nprint(f'Train MSE : {train_mse}')\n\ntrain_RMSE = math.sqrt(metrics.mean_squared_error(y_train, pred_train)) # SQRT MSE Score\nprint(f'Train RMSE : {train_RMSE}')","d5750b01":"train = pd.DataFrame({'Predicted Price':pred_train, 'Actual Price':y_train})\nfig= plt.figure(figsize=(16, 9))\ntrain = train.reset_index()\ntrain = train.drop(['index'],axis=1)\nplt.plot(train[:50])\nplt.ylim(0, 260000)\nplt.legend(['Actual Price','Predicted Price'])\nplt.title('Actual & Predicted Price')\nplt.show()","89cc72ad":"test_r2_score = metrics.r2_score(y_test, pred_test) # R2_score\nprint(f'Test R2_score: {test_r2_score}')\n\ntest_mse = metrics.mean_squared_error(y_test, pred_test) # MSE Score\nprint(f'Test MSE : {test_mse}')\n\ntest_RMSE = math.sqrt(metrics.mean_squared_error(y_test, pred_test)) # SQRT MSE Score\nprint(f'Test RMSE : {test_RMSE}')","bb81e27e":"test = pd.DataFrame({'Predicted Price':pred_test, 'Actual Price':y_test})\nfig= plt.figure(figsize=(16, 9))\ntest = test.reset_index()\ntest = test.drop(['index'],axis=1)\nplt.plot(test[:50])\nplt.ylim(0, 260000)\nplt.legend(['Actual Price','Predicted Price'])\nplt.title('Actual & Predicted Price')\nplt.show()","4231e5da":"train_output = pd.DataFrame({\n    'Train Actual Price': y_train,\n    'Train Predicted Price ': pred_train})\n\ntrain_output.to_csv('Train Prediction.csv', index=False)","f0cc8c8e":"train_prediction_output = pd.read_csv('.\/Train Prediction.csv')\ntrain_prediction_output.head(10)","17eaa317":"test_output = pd.DataFrame({\n    'Test Actual Price': y_test,\n    'Test Predicted Price ': pred_test})\n\ntest_output.to_csv('Test Prediction.csv', index=False)","604b1a4c":"test_prediction_output = pd.read_csv('.\/Test Prediction.csv')\ntest_prediction_output.head(10)","8645dc41":"> ### **4.1.3. Every Company with Price and Diameter Visualization**","87b8430e":"> ### **6.6. Evaluate Test Data**","21137441":"> ### **1.2. Setup**\n\nSetup the libraries.","4985a46c":"> # **5. Encoding**\n\nwe need to encode the data since this data is a categorical data, and i'm using LabelEncoder here, since this data have a lot of categorical data.","34d05201":"<p style=\"line-height: 2; font-size: 30px; font-weight: bold; letter-spacing: 2px; text-align: center;\">Pizza Price Prediction - Knightbearr<\/p>","34067151":"> ## **7.1. Train Output Prediction**","21ad3837":"> ## **7.2. Test Output Prediction**","018c8f17":"### **4.1.2. Company with their Diameter Visualization**","299569b4":"> ### **4.5. Pizza Topping Boxplot Visualization**","48580a2f":"![pizza.jpg](attachment:f86ae49e-8e04-4165-9787-c4f3827ea1e4.jpg)","c42775c2":"> # **2. Load Dataset**\n\nThis dataset is made by me after collecting some information about the price of pizza and many more on internet, and hopefully this dataset useful for you guys, sorry if i had a mistake in spelling some words, thanks in advance.","b7dd7493":"> ###  **Conclusion :**\n\nOkay, as we can see in the visualization above, there are some outlier.","60149d34":"> ### **Do you understand what the data looks like with the visualization that I applied above?**\n\nif not, feel free to visualize by yourself.","b66011aa":"> # **4. Data Visualization**\n\nData visualization is an interdisciplinary field that deals with the graphic representation of data. It is a particularly efficient way of communicating when the data is numerous as for example a time series.","e431e371":"> ### **6.1. Split Data**\n\nDivide the data and split it using train test split module from sklearn.","3832884a":"> ### **4.1. Extra Sauce Boxplot Visualization**","fa89495d":"> ### **4.2. Extra Cheese Boxplot Visualization**","0a4477ab":"> # **That's it! don't forget to give me feedback and upvote if you like it! thanks in advance!**","9f74c02d":"> ### **6.7. Visualization for Actual and Predicted Price in Testing Data**","06f5a548":"> ### **4.3. Extra Mushrooms Boxplot Visualization**","c3dc15fd":"> ### **4.1.1. Company with their Price Visualization**","fd5902c2":"> ### **6.2. Modeling**\n\nSince the data is for predicting numeric or price, from that, we can know, this data is a regression model, then i'm using **XGBRegressor** for that. and\n**Pipelines** are a simple way to keep your data preprocessing and modeling code organized. Specifically, a pipeline bundles preprocessing and modeling steps so you can use the whole bundle as if it were a single step.","6d35cbc3":"> ### **6.5. Visualization for Actual and Predicted Price in Training Data**","11753384":"> # **1. Import Libraries**\n\nImport the module that we want to use for this research.","f5609810":"> ### **4.4. Pizza Variant Boxplot Visualization**","9f694a52":"> ### **4.6. Pizza Size Boxplot Visualization**","dbbc6679":"> # **7. Prediction**\n\nOutput actual data with prediction data into csv file.","52f7ce5e":"> # **6. Splitting, Modeling, Model Evaluation**","78131bea":"> ### **6.4. Evaluate Train Data**","55d8be00":"> # **3. Data Preprocessing**\n\nWe must check the data every time we want to make a model, because this is the important thing, if you suddenly meet a bad dataset, wether you want it or not, you must clean the dataset. since we use my dataset, i guarantee the data is 100% clean and have a non null data, and we can just focus in encoding the data since our data is categorical.","34c1de55":"> **note : sorry if my English typing is bad, hopefully you guys can understand.**","5c8a3592":"> ### **6.3. Model Evaluation**"}}