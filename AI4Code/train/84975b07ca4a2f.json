{"cell_type":{"1d362efc":"code","ffb9039e":"code","ba7302a0":"code","a77d6dd7":"code","6f548c73":"code","f8cb228e":"code","2bc62ec7":"code","57c4bebb":"code","6bb2f421":"code","a863bf4c":"code","6cc1f074":"code","afaba823":"code","e0f9cfeb":"code","9685780e":"code","77573bd4":"code","5e613eec":"code","e8868301":"code","880c86d3":"code","e361c9cb":"code","65ebb50f":"code","a5685994":"code","9c6daa7d":"code","6a20fff5":"code","882a7f12":"code","8425d160":"code","ab6443ef":"code","7633fe62":"code","e0bf0f82":"code","ff8424d9":"markdown","fa4e43a0":"markdown","abf1c22c":"markdown","239ff449":"markdown","4b627857":"markdown","fb474982":"markdown","84d0b552":"markdown","21e48070":"markdown","5970048f":"markdown","5b45b528":"markdown","dbaafd28":"markdown","1a5b6e49":"markdown","11d02e04":"markdown","6bde930d":"markdown","670c7afe":"markdown","6017b421":"markdown","19216977":"markdown","a2023292":"markdown"},"source":{"1d362efc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ffb9039e":"import pandas as pd\nimport numpy as np\n\n#!conda install -c conda-forge geopy --yes\nfrom geopy.geocoders import Nominatim # convert an address into latitude and longitude values\nfrom geopy.distance import great_circle\n\n#!conda install -c conda-forge folium=0.5.0 --yes # uncomment this line if you haven't completed the Foursquare API lab\nimport folium # map rendering library\n\nimport json # library to handle JSON files\n\nimport requests # library to handle requests\n\n\nfrom bs4 import BeautifulSoup\n\nimport re\n\nfrom time import sleep\n\n# Matplotlib and associated plotting modules\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\nimport json # library to handle JSON files\n\nfrom pandas.io.json import json_normalize # tranform JSON file into a pandas dataframe\n\nfrom sklearn.cluster import KMeans\n\nfrom geopy.geocoders import Nominatim # convert an address into latitude and longitude values\n","ba7302a0":"import matplotlib.pyplot as plt\nplt.figure(figsize=(15,10))\nplt.imshow(plt.imread(\"..\/input\/kristiansand-map-latest\/kristiansand.jpg\"))","a77d6dd7":"# Import libraries\nimport numpy as np # data in a vectorized manner manipulation\nimport pandas as pd # data analsysis\nimport requests # HTTP library\nfrom bs4 import BeautifulSoup # scraping library\n\nfrom pandas.io.json import json_normalize # tranform JSON file into a pandas dataframe\nimport json # JSON files manipulation\n\nfrom sklearn.cluster import KMeans # clustering algorithm\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# Matplotlib and associated plotting modules\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\nimport matplotlib.pyplot as plt\n\n#!conda install -c conda-forge geopy --yes \nfrom geopy.geocoders import Nominatim\n\n#!conda install -c conda-forge folium=0.5.0 --yes\nimport folium # map rendering library\n\nprint(\"*********   Loaded library     ***********\")","6f548c73":"address = \"Kristiansand, Norway\"\n\ngeolocator = Nominatim(user_agent=\"foursquare_agent\")\nlocation = geolocator.geocode(address)\nlatitude =location.latitude\nlongitude =location.longitude   \n\nkristiansand='Kristiansand location : {},{}'.format(latitude,longitude)\nprint(kristiansand)","f8cb228e":"CLIENT_ID =  # your Foursquare ID\nCLIENT_SECRET =  # your Foursquare Secret\nACCESS_TOKEN =  # your FourSquare Access Token\nVERSION = '20201231'\nLIMIT = 150","2bc62ec7":"#Quering for restaurants  in Kristiansand\n\nsearch_query = 'restaurant'\n\nradius = 10000\nurl_restaurant = 'https:\/\/api.foursquare.com\/v2\/venues\/search?client_id={}&client_secret={}&ll={},{}&v={}&query={}&radius={}&limit={}'.format(CLIENT_ID, CLIENT_SECRET, latitude, longitude, VERSION, search_query, radius, LIMIT)\n#url","57c4bebb":"#we will get the data as json file as follows:\nrestaurants = requests.get(url_restaurant).json()\nrestaurants\n","6bb2f421":"#Here we will transform json file into a pandas dataframe as follows:\n\n# assign relevant part of JSON to venues\nvenues_restaurant = restaurants['response']['venues']\n\n# tranforming venues into a dataframe and merging both data\n\ndf= pd.json_normalize(venues_restaurant)\n\n\n\nprint(\"There are {} restaurants and hotels at Kristiansand\".format(df.shape[0]))","a863bf4c":"df.head()\n#Here is the list of restaurants in Kristiansand","6cc1f074":"#Here we will define information of interest and filter dataframe\n\n# keep only columns that include venue name, and anything that is associated with location\nfiltered_columns = ['name', 'categories'] + [col for col in df.columns if col.startswith('location.')] + ['id']\ndataframe_filtered = df.loc[:, filtered_columns]\n\n# function that extracts the category of the venue\n\ndef get_category_type(row):\n    try:\n        categories_list = row['categories']\n    except:\n        categories_list = row['venue.categories']\n        \n    if len(categories_list) == 0:\n        return None\n    else:\n        return categories_list[0]['name']\n\n    \n# filter the category for each row\ndataframe_filtered['categories'] = dataframe_filtered.apply(get_category_type, axis=1)\n\n  \n# clean column names by keeping only last term\ndataframe_filtered.columns = [column.split('.')[-1] for column in dataframe_filtered.columns]\n\n#dataframe_filtered\ndf_filtered=dataframe_filtered[['name','categories','distance','lat','lng','id']]\ndf_filtered.head()","afaba823":"kristiansand_map = folium.Map(location=[latitude, longitude], zoom_start=12) # generate map centred around the Kristiansand\n\n# add a red circle marker to represent the core location of Kristiansand\nfolium.CircleMarker(\n    [latitude, longitude],\n    radius=10,\n    color='red',\n    popup='Kristiansand Center',\n    fill = True,\n    fill_color = 'red',\n    fill_opacity = 0.6\n).add_to(kristiansand_map)\n\n# add the restaurants as blue circle markers\nfor lat, lng, label in zip(df_filtered.lat, df_filtered.lng, df_filtered.name):\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        color='blue',\n        popup=label,\n        fill = True,\n        fill_color='blue',\n        fill_opacity=0.6\n    ).add_to(kristiansand_map)\n\n# display map\nkristiansand_map","e0f9cfeb":"import matplotlib.pyplot as plt\nimport seaborn as sns","9685780e":"plt.figure(figsize=(20,10))\nplt.grid(True, linewidth=0.5, color='#ff0000', linestyle='-')\nplt.xlabel(\"Restaurant Name\")\nplt.ylabel(\"Distance From City Centrum\")\nplt.bar(df_filtered[\"name\"], df_filtered[\"distance\"])\nplt.xticks(df_filtered.name,rotation=90)","77573bd4":"radius=10000\nurl_venues = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?client_id={}&client_secret={}&ll={},{}&v={}&radius={}&limit={}'.format(CLIENT_ID, CLIENT_SECRET, latitude, longitude, VERSION, radius, LIMIT)\n","5e613eec":"venues = requests.get(url_venues).json()\ndf_venues=pd.json_normalize(venues[\"response\"][\"groups\"][0][\"items\"])\ndf_venues.head()\n","e8868301":"# filter columns\nfiltered_columns = ['venue.name', 'venue.categories'] + [col for col in df_venues.columns if col.startswith('venue.location.')] + ['venue.id']\ndataframe_filtered_venues = df_venues.loc[:, filtered_columns]\n\n# filter the category for each row\ndataframe_filtered_venues['venue.categories'] = dataframe_filtered_venues.apply(get_category_type, axis=1)\n\n# clean columns\ndataframe_filtered_venues.columns = [col.split('.')[-1] for col in dataframe_filtered_venues.columns]\n\ndataframe_filtered_venues.head()","880c86d3":"#Extract Venues using Search Queries\nsearch_query_list = ['temple','church','park','museum'] \nradius =1000\ntemp_df=[]\nsearch_df=[]\n\ndef search_query_fn():   \n    #Loop to run through urls and from json to pandas\n    for i in range(len(search_query_list)):\n        url= 'https:\/\/api.foursquare.com\/v2\/venues\/search?client_id={}&client_secret={}&ll={},{}&v={}&query={}&radius={}&limit={}'.format(CLIENT_ID, CLIENT_SECRET, latitude, longitude, VERSION, search_query_list[i], radius, LIMIT)\n        \n        results=requests.get(url).json()\n        venues = results['response']['venues']\n        \n        #Normalize from json\n        dataframe = json_normalize(venues)\n        \n        #Removing unwanted column headers\n        dataframe.columns = [col.split('.')[-1] for col in dataframe.columns]\n        temp_df.append(dataframe)\n    \n    #Loop to append dataframes to single dataframe\n    for j in range(len(search_query_list)):\n        data=temp_df[j]\n        search_df.append(data)\n# Function to run loop over queries\nsearch_query_fn()\n\nsearch_df = pd.concat(search_df,sort=True)\nsearch_df['categories'] = search_df.apply(get_category_type, axis=1)\nsearch_df = pd.DataFrame(search_df[['name','categories','distance','lat','lng','id']])\nsearch_df","e361c9cb":"\n# Data extracted from foursquare venues\nfour_sq_venue=pd.DataFrame(dataframe_filtered_venues[['name','categories','distance','lat','lng','id']])\n\n# Data extracted from search queries\nnew_venues=pd.DataFrame(search_df)\n\n# Concatenate both dataframe\ndf_venues=pd.concat([four_sq_venue, new_venues],sort=True)\ndf_venues.info()","65ebb50f":"# here we visualize our data with new venues\nvenues_map = folium.Map(location=[latitude, longitude], zoom_start=12) \n\n# add a red circle marker to represent the Kristiansand\nfolium.CircleMarker(\n    [latitude, longitude],\n    radius=10,\n    color='red',\n    popup='Kristiansand',\n    fill = True,\n    fill_color = 'red',\n    fill_opacity = 0.6\n).add_to(venues_map)\n\n# add the restaurants as blue circle markers\nfor lat, lng, label in zip(df_venues.lat, df_venues.lng, df_venues.name):\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        color='black',\n        #popup=label,\n        fill = True,\n        fill_color='black',\n        fill_opacity=0.6\n    ).add_to(venues_map)\n\n# display map\nvenues_map","a5685994":"# we create a plot with new venues\nplt.figure(figsize=(20,10))\nplt.grid(True, linewidth=0.5, color='#ff0000', linestyle='-')\nplt.xlabel(\"Restaurant Name\")\nplt.ylabel(\"Distance From City Centrum\")\nplt.bar(df_venues[\"name\"], df_venues[\"distance\"])\nplt.xticks(df_filtered.name,rotation=90)","9c6daa7d":"# we create a plot of venues according to their category \nplt.figure(figsize=(20,10))\nplt.grid(True, linewidth=0.5, color='#ff0000', linestyle='-')\nplt.xlabel(\"Category\")\nplt.ylabel(\"Count\")\ndf_venues['categories'].value_counts().plot(kind=\"bar\")\n\n","6a20fff5":"df_venues.head()","882a7f12":"# we do not need id column, it is not meaningful for the algorithm\ndf_venues.drop(\"id\",axis=1,inplace=True)\ndf_venues.head()","8425d160":"#There is no any missing data\ndf_venues.isnull().sum()","ab6443ef":"# Clustering\n\n# set number of clusters\nkclusters = 3\n\nvenue_clustering = df_venues.drop([\"name\",\"categories\"], 1)\n\n# run k-means clustering\nkmeans = KMeans(n_clusters=kclusters, random_state=0)\nkmeans.fit(venue_clustering)\n\n# check cluster labels generated for each row in the dataframe\nkmeans.labels_[0:10] \n\n","7633fe62":"# add clustering labels\ndf_venues.insert(0, 'Clusters', kmeans.labels_)\n\ndf_venues","e0bf0f82":"\nmap_clusters = folium.Map(location=[latitude, longitude], zoom_start=12)\n\n# set color scheme for the clusters\nx = np.arange(kclusters)\nys = [i + x + (i*x)**2 for i in range(kclusters)]\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\nfolium.CircleMarker(\n    [latitude, longitude],\n    radius=10,\n    color='green',\n    popup='Kristiansand',\n    fill = True,\n    fill_color = 'green',\n    fill_opacity = 0.6\n).add_to(map_clusters)\n\n# add markers to the map\nmarkers_colors = []\nfor lat, lon, poi, cluster in zip(df_venues['lat'], df_venues['lng'], df_venues['name'], df_venues['Clusters']):\n    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=6,\n        popup=label,\n        color=rainbow[cluster-1],\n        fill=True,\n        fill_color=rainbow[cluster-1],\n        fill_opacity=0.7).add_to(map_clusters)\n\n       \nmap_clusters","ff8424d9":"<font color=\"blue\">\n\nTop venues are clustered in red color as we can see in the map above.\n\n    Discussion:\nFrom above reports,we could get an idea why the predicted one is pointed\/clustered on the red spots which is the center of attraction for the place where we can establish our restaurant.\n\nKMeans have figured out the most common place for all the venues.This output was very adjacent to the core location.This proves the accurate spotting of our predicted algorithm.\n\n\n    Conclusion:\nAs a result,one can set up a hotel\/restaurant around given red spot.This will bring revenue automatically as we have located in very near to core one which is proved by Kmeans.\n\n","fa4e43a0":"# 3. Exploring Other Venues Around Kristiansand","abf1c22c":"1.3.METHODOLOGY","239ff449":"<font color=\"blue\">\n    \n For this project we need the following data :\n\nResturants data that contains list Locality, Resturant name,Rating along with their latitude and longitude.\n    \nDescription : This data set contains the required information. And we will use this data set to explore various locality of Kristiansand city.\n    \nNearby places in each locality of the city.\n    \nData source : Fousquare API\n    \nDescription : By using this api we will get all the venues in each neighborhood.\n    \n\u2022 Data Requirements for this project:\n    \n\u2022 Neighborhood Information (i.e. name, coordinates, populations).\n    \n\u2022 Venue information (i.e. name, category, coordinates)\n    \n\u2022 Data Processing for this project:\n    \n\u2022 Data cleaning is required\n    \n\u2022 Data needs to be in a structured format","4b627857":"1.1: INTRODUCTION\n\n\u2022 Kristiansand city overview for Gusine Catering;","fb474982":"<font color=\"blue\">\n3. Search for Restaurants within 10 KM","84d0b552":"# 2. Exploratory Data Analysis","21e48070":"#  5.Results Section","5970048f":"# 1. Introduction to  the Project","5b45b528":"<font color=\"blue\">\n2. Defining Foursquare Credentials and Version\n    \nTo obtain access token follow these steps.\n\n\nGo to your \"App Settings\" page on the developer console of Foursquare.com\nSet the \"Redirect URL\" under \"Web Addresses\" to https:\/\/www.google.com\nPaste and enter the following url in your web browser (replace YOUR_CLIENT_ID with your actual client id):\nhttps:\/\/foursquare.com\/oauth2\/authenticate?client_id=YOUR_CLIENT_ID&response_type=code&redirect_uri=https:\/\/www.google.com\n\nThis should redirect you to a google page requesting permission to make the connection.\n\nAccept and then look at the url of your web browser (take note at the CODE part of the url to use in step 5)\nIt should look like https:\/\/www.google.com\/?code=CODE\nCopy the code value from the previous step.\nPaste and enter the following into your web browser (replace placeholders with actual values):\nhttps:\/\/foursquare.com\/oauth2\/access_token?client_id=YOUR_CLIENT_ID&client_secret=YOUR_CLIENT_SECRET&grant_type=authorization_code&redirect_uri=https:\/\/www.google.com&code=CODE.\nWhen you paste the link , This should lead you to a page that gives you your access token.","dbaafd28":"# 4. Clustering based on Venues","1a5b6e49":"<font color=\"blue\">\n    \n\u2022 Gusine Catering Strategic Plan and Overview:\n\n\u2022 Gusine Catering Business Problem\n\n\u2022 Choice of the first neighborhood to offer services.\n\n\u2022 The neighborhood should enable easy replication.\n\n\u2022 The neighborhood should have high demand.\n\n\u2022 The neighborhood should have lower competition.\n\n\u2022 Success Criteria:\n\n\u2022 Good recommendation of neighborhood that meets above points.\n\n\u2022 It should have capability to enable latest information whenever required.","11d02e04":"<font color=\"blue\">\n1. First we need to learn the coordinates of Kristiansand city","6bde930d":"<font color=\"blue\">\n    \n\u2022 Data Scrapping Technique\n    \n\u2022 To scrap the neighborhood data from Wikipedia\n    \n\u2022 To make the data into a structured format\n    \n\u2022 Foursquare.com\n    \n\u2022 Retrieving venue information from above API.\n    \n\u2022 K-Means Machine Learning\n    \n\u2022 Segment and cluster similar neighborhoods\n    \n\u2022 Group them based on most common venues\n    \n\u2022 Scoring Weightage\n    \n\u2022 Population count has 50% weightage\n    \n\u2022 Venue (fewer grocery) has another 50% weightage","670c7afe":"1.2. DATA DESCRIPTION\n","6017b421":"<font color=\"blue\">\nA tourist person always wants to visit nearby iconic places.So he wants to reside somewhere nearby to all major venues.We will be exploring more venues around the core location.We will be digging more on main areas or place around 1 km because the average distance of restaurants from the center is around 500 meters.","19216977":"<font color=\"blue\">\nNeighborhood of choice for Gusine Catering\u2019s first venture in Kristiansand.","a2023292":"The visualization of Restaurants in the Map:"}}