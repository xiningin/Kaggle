{"cell_type":{"1a854c34":"code","75892e53":"code","0ca69f56":"code","93a029e6":"code","23c17e9c":"code","74dd1580":"code","0a7132d5":"code","f6956cd4":"code","e867ecba":"code","3d6ca338":"code","ae464630":"code","9fa8e201":"code","90a054cc":"code","10d013a1":"code","86c2fc97":"code","8634d2d3":"code","a86101af":"code","da7595dc":"code","304192f5":"code","529d44ea":"code","5efe15ee":"code","991ea1a9":"code","883bb607":"code","ba9b90af":"code","ffb40612":"code","a057b83a":"code","b736b899":"code","8b8b5296":"code","cb879882":"code","30e8b72a":"code","2d719120":"code","4f71c9ee":"code","974b470f":"code","704135fd":"code","dafda74f":"code","a8f86dc5":"code","1bbe7eb7":"code","8813b536":"code","d212f4c1":"code","d3b46d74":"code","dfa24c27":"code","e6ddf78d":"code","e8d8c05e":"code","27477687":"code","520475e6":"code","b6d108e5":"code","fc3461da":"code","26686d40":"code","03ee67ad":"code","6ddca763":"code","270bed0a":"code","66158197":"code","23bdcd30":"code","790fade8":"code","c1b9e713":"code","288e6e95":"code","cb20021b":"code","bc66dfc4":"code","516e1a56":"code","b703ebd5":"code","f483d4db":"markdown"},"source":{"1a854c34":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom scipy import stats","75892e53":"df = pd.read_csv('..\/input\/heart-disease-data\/heart_disease_uci.csv')","0ca69f56":"df.head()","93a029e6":"df.tail()","23c17e9c":"df.shape","74dd1580":"df.info()","0a7132d5":"df.columns","f6956cd4":"df['cp'].value_counts()","e867ecba":"df['dataset'].value_counts()","3d6ca338":"df['restecg'].value_counts()","ae464630":"df['slope'].value_counts()","9fa8e201":"df['num'].value_counts()","90a054cc":"df['thal'].value_counts()","10d013a1":"df.isna().sum()","86c2fc97":"df.columns = ['id', 'age', 'sex', 'study_location', 'chest_pain_type', 'resting_bloodpressure', 'cholestrol', 'fasting_bloodsugar', 'resting_ecg', 'maximum_heartrate_achieved', 'exercise_induced angina', 'st_depression', 'slope', 'major_vessel_colored', 'thal','target']","8634d2d3":"df.head()","a86101af":"df.describe()","da7595dc":"df.describe(include=[np.object])","304192f5":"df.dropna(inplace=True)","529d44ea":"df.isnull().sum()","5efe15ee":"df.shape","991ea1a9":"df['target'].value_counts()","883bb607":"plt.figure(figsize=(18,12))\nplt.subplot(221)\ndf['sex'].value_counts().plot.pie(autopct = '%1.0f%%', colors = sns.color_palette('prism',5), startangle = 900, labels =['Male','Female'], wedgeprops = {'linewidth':2, 'edgecolor':'k'}, explode = [.1,.1], shadow = True)\nplt.title('Distribution of Gender')\nplt.subplot(222)\nax = sns.distplot(df['age'], rug = True)\nplt.title('Age wise distribution')\nplt.show()","ba9b90af":"attr_0  = df[df['target'] == 0]\nattr_1  = df[df['target'] == 1]\nattr_2  = df[df['target'] == 2]\nattr_3  = df[df['target'] == 3]\nattr_4  = df[df['target'] == 4]\n#plotting normal patients\n\nfig = plt.figure(figsize=(15,5))\nax1 = plt.subplot2grid((1,2),(0,0))\nsns.distplot(attr_0['age'])\nplt.title('AGE DISTRIBUTION OF NORMAL PATIENTS', fontsize=15, weight='bold')\n\nax1 = plt.subplot2grid((1,2),(0,1))\nsns.countplot(attr_0['sex'], palette='viridis')\nplt.title('GENDER DISTRIBUTION OF NORMAL PATIENTS', fontsize=15, weight='bold' )\nplt.show()\n\n#plotting heart patients\n\nfig = plt.figure(figsize=(15,5))\nax1 = plt.subplot2grid((1,2),(0,0))\nsns.distplot(attr_1['age'])\nplt.title('AGE DISTRIBUTION OF HEART DISEASE PATIENTS', fontsize=15, weight='bold')\n\nax1 = plt.subplot2grid((1,2),(0,1))\nsns.countplot(attr_1['sex'], palette='viridis')\nplt.title('GENDER DISTRIBUTION OF HEART DISEASE PATIENTS', fontsize=15, weight='bold' )\nplt.show()\n\nfig = plt.figure(figsize=(15,5))\nax1 = plt.subplot2grid((1,2),(0,0))\nsns.distplot(attr_2['age'])\nplt.title('AGE DISTRIBUTION OF HEART DISEASE PATIENTS', fontsize=15, weight='bold')\n\nax1 = plt.subplot2grid((1,2),(0,1))\nsns.countplot(attr_2['sex'], palette='viridis')\nplt.title('GENDER DISTRIBUTION OF HEART DISEASE PATIENTS', fontsize=15, weight='bold' )\nplt.show()\n\nfig = plt.figure(figsize=(15,5))\nax1 = plt.subplot2grid((1,2),(0,0))\nsns.distplot(attr_3['age'])\nplt.title('AGE DISTRIBUTION OF HEART DISEASE PATIENTS', fontsize=15, weight='bold')\n\nax1 = plt.subplot2grid((1,2),(0,1))\nsns.countplot(attr_3['sex'], palette='viridis')\nplt.title('GENDER DISTRIBUTION OF HEART DISEASE PATIENTS', fontsize=15, weight='bold' )\nplt.show()\n\nfig = plt.figure(figsize=(15,5))\nax1 = plt.subplot2grid((1,2),(0,0))\nsns.distplot(attr_4['age'])\nplt.title('AGE DISTRIBUTION OF HEART DISEASE PATIENTS', fontsize=15, weight='bold')\n\nax1 = plt.subplot2grid((1,2),(0,1))\nsns.countplot(attr_4['sex'], palette='viridis')\nplt.title('GENDER DISTRIBUTION OF HEART DISEASE PATIENTS', fontsize=15, weight='bold' )\nplt.show()\n","ffb40612":"fig = plt.figure(figsize=(15,5))\nax1 = plt.subplot2grid((1,2),(0,0))\nsns.countplot(attr_0['chest_pain_type'])\nplt.title('CHEST PAIN OF NORMAL PATIENTS', fontsize=15, weight='bold')\n\n#plotting heart patients\nax1 = plt.subplot2grid((1,2),(0,1))\nsns.countplot(attr_1['chest_pain_type'], palette='viridis')\nplt.title('CHEST PAIN OF HEART PATIENTS', fontsize=15, weight='bold' )\nplt.show()\n","a057b83a":"plot_criteria= ['chest_pain_type', 'target']\ncm = sns.light_palette(\"red\", as_cmap=True)\n(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)","b736b899":"fig = plt.figure(figsize=(15,5))\nax1 = plt.subplot2grid((1,2),(0,0))\nsns.countplot(attr_0['resting_ecg'])\nplt.title('REST ECG OF NORMAL PATIENTS', fontsize=15, weight='bold')\n\n\nax1 = plt.subplot2grid((1,2),(0,1))\nsns.countplot(attr_1['resting_ecg'], palette='viridis')\nplt.title('REST ECG OF HEART PATIENTS', fontsize=15, weight='bold' )\nplt.show()","8b8b5296":"fig = plt.figure(figsize=(15,5))\nax1 = plt.subplot2grid((1,2),(0,0))\nsns.countplot(attr_0['resting_ecg'])\nplt.title('REST ECG OF NORMAL PATIENTS', fontsize=15, weight='bold')\n\n\nax1 = plt.subplot2grid((1,2),(0,1))\nsns.countplot(attr_4['resting_ecg'], palette='viridis')\nplt.title('REST ECG OF HEART PATIENTS', fontsize=15, weight='bold' )\nplt.show()","cb879882":"plot_criteria= ['resting_ecg', 'target']\ncm = sns.light_palette(\"red\", as_cmap=True)\n(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)","30e8b72a":"fig = plt.figure(figsize=(15,5))\nax1 = plt.subplot2grid((1,2),(0,0))\nsns.countplot(attr_0['slope'])\nplt.title('SLOPE OF NORMAL PATIENTS', fontsize=15, weight='bold')\n\n\nax1 = plt.subplot2grid((1,2),(0,1))\nsns.countplot(attr_1['slope'], palette='viridis')\nplt.title('SLOPE OF HEART PATIENTS', fontsize=15, weight='bold' )\nplt.show()\n\n","2d719120":"sns.pairplot(df, hue = 'target', vars = ['age', 'resting_bloodpressure', 'cholestrol', 'major_vessel_colored'] )","4f71c9ee":"sns.scatterplot(x = 'resting_bloodpressure', y = 'cholestrol', hue = 'target', data = df)","974b470f":"sns.scatterplot(x = 'resting_bloodpressure', y = 'age', hue = 'target', data = df)","704135fd":"df['thal'].replace({'fixed defect':'fixed_defect' , 'reversable defect': 'reversable_defect' }, inplace =True)","dafda74f":"df['chest_pain_type'].replace({'typical angina':'typical_angina', 'atypical angina': 'atypical_angina' }, inplace =True)","a8f86dc5":"df.head()","1bbe7eb7":"df['target'] = ((df['target'] > 0)*1)\ndf['sex'] = (df['sex'] == 'Male')*1\ndf['fasting_bloodsugar'] = (df['fasting_bloodsugar'])*1\ndf['exercise_induced angina'] = (df['exercise_induced angina'])*1\ndf.drop(['study_location'],axis = 1, inplace = True)","8813b536":"df.head()","d212f4c1":"df = pd.get_dummies(df, drop_first=False)\ndf.columns","d3b46d74":"df.head()","dfa24c27":"X = df.drop(['target'],axis=1)\ny = df['target']","e6ddf78d":"X.corrwith(y).plot.bar(\n        figsize = (16, 4), title = \"Correlation with Diabetes\", fontsize = 15,\n        rot = 90, grid = True)","e8d8c05e":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import log_loss,roc_auc_score,precision_score,f1_score,recall_score,roc_curve,auc\nfrom sklearn.metrics import classification_report, confusion_matrix,accuracy_score,fbeta_score,matthews_corrcoef\nfrom sklearn import metrics\nfrom sklearn.model_selection import StratifiedKFold","27477687":"X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2,shuffle=True, random_state=5)","520475e6":"print('Distribution of target variable in training set')\nprint(y_train.value_counts())\n\nprint('Distribution of target variable in test set')\nprint(y_test.value_counts())","b6d108e5":"print('------------Training Set------------------')\nprint(X_train.shape)\nprint(y_train.shape)\n\nprint('------------Test Set------------------')\nprint(X_test.shape)\nprint(y_test.shape)","fc3461da":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_train[['age','resting_bloodpressure','cholestrol','maximum_heartrate_achieved','st_depression']] = scaler.fit_transform(X_train[['age','resting_bloodpressure','cholestrol','maximum_heartrate_achieved','st_depression']])\nX_train.head()","26686d40":"X_test[['age','resting_bloodpressure','cholestrol','maximum_heartrate_achieved','st_depression']] = scaler.transform(X_test[['age','resting_bloodpressure','cholestrol','maximum_heartrate_achieved','st_depression']])\nX_test.head()","03ee67ad":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier,VotingClassifier,AdaBoostClassifier,GradientBoostingClassifier,RandomForestClassifier,ExtraTreesClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.svm import SVC \nimport xgboost as xgb\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB","6ddca763":"from sklearn import model_selection\nfrom sklearn.model_selection import cross_val_score\nimport xgboost as xgb\n\ndef GetBasedModel():\n    basedModels = []\n    basedModels.append(('LR_L2'   , LogisticRegression(penalty='l2')))\n    \n    basedModels.append(('KNN7'  , KNeighborsClassifier(7)))\n    basedModels.append(('KNN5'  , KNeighborsClassifier(5)))\n    basedModels.append(('KNN9'  , KNeighborsClassifier(9)))\n    basedModels.append(('KNN11'  , KNeighborsClassifier(11)))\n    basedModels.append(('CART' , DecisionTreeClassifier()))\n    basedModels.append(('NB'   , GaussianNB()))\n    basedModels.append(('SVM Linear'  , SVC(kernel='linear',gamma='auto',probability=True)))\n    basedModels.append(('SVM RBF'  , SVC(kernel='rbf',gamma='auto',probability=True)))\n    basedModels.append(('AB'   , AdaBoostClassifier()))\n    basedModels.append(('GBM'  , GradientBoostingClassifier(n_estimators=100,max_features='sqrt')))\n    basedModels.append(('RF_Ent100'   , RandomForestClassifier(criterion='entropy',n_estimators=100)))\n    basedModels.append(('RF_Gini100'   , RandomForestClassifier(criterion='gini',n_estimators=100)))\n    basedModels.append(('ET100'   , ExtraTreesClassifier(n_estimators= 100)))\n    basedModels.append(('ET500'   , ExtraTreesClassifier(n_estimators= 500)))\n    basedModels.append(('MLP', MLPClassifier()))\n    basedModels.append(('SGD3000', SGDClassifier(max_iter=1000, tol=1e-4)))\n    \n    return basedModels","270bed0a":"def BasedLine2(X_train, y_train,models):\n    \n    num_folds = 10\n    scoring = 'accuracy'\n    seed = 7\n    results = []\n    names = []\n    for name, model in models:\n        kfold = model_selection.KFold(n_splits=10, random_state=seed)\n        cv_results = model_selection.cross_val_score(model, X_train, y_train, cv=kfold, scoring=scoring)\n        results.append(cv_results)\n        names.append(name)\n        msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n        print(msg)\n         \n        \n    return results,msg","66158197":"models = GetBasedModel()\nnames,results = BasedLine2(X_train, y_train,models)","23bdcd30":"rf_ent = RandomForestClassifier(criterion='entropy',n_estimators=100)\nrf_ent.fit(X_train, y_train)\ny_pred_rfe = rf_ent.predict(X_test)","790fade8":"mlp = MLPClassifier()\nmlp.fit(X_train,y_train)\ny_pred_mlp = mlp.predict(X_test)","c1b9e713":"\net_100 = ExtraTreesClassifier(n_estimators= 100)\net_100.fit(X_train,y_train)\ny_pred_et_100 = et_100.predict(X_test)","288e6e95":"decc = DecisionTreeClassifier()\ndecc.fit(X_train,y_train)\ny_pred_decc = decc.predict(X_test)","cb20021b":"\ngbm = GradientBoostingClassifier(n_estimators=100,max_features='sqrt')\ngbm.fit(X_train,y_train)\ny_pred_gbm = gbm.predict(X_test)","bc66dfc4":"svc = SVC(kernel='linear',gamma='auto',probability=True)\nsvc.fit(X_train,y_train)\ny_pred_svc = svc.predict(X_test)","516e1a56":"CM=confusion_matrix(y_test,y_pred_rfe)\nsns.heatmap(CM, annot=True)\n\nTN = CM[0][0]\nFN = CM[1][0]\nTP = CM[1][1]\nFP = CM[0][1]\nspecificity = TN\/(TN+FP)\nloss_log = log_loss(y_test, y_pred_rfe)\nacc= accuracy_score(y_test, y_pred_rfe)\nroc=roc_auc_score(y_test, y_pred_rfe)\nprec = precision_score(y_test, y_pred_rfe)\nrec = recall_score(y_test, y_pred_rfe)\nf1 = f1_score(y_test, y_pred_rfe)\n\nmathew = matthews_corrcoef(y_test, y_pred_rfe)\nmodel_results =pd.DataFrame([['Random Forest',acc, prec,rec,specificity, f1,roc, loss_log,mathew]],\n               columns = ['Model', 'Accuracy','Precision', 'Sensitivity','Specificity', 'F1 Score','ROC','Log_Loss','mathew_corrcoef'])\n\nmodel_results","b703ebd5":"data = {        'MLP': y_pred_mlp, \n                \n                'EXtra tree classifier': y_pred_et_100,\n                'CART': y_pred_decc, \n                'SVC': y_pred_svc, \n                \n                 \n                 \n                'GBM': y_pred_gbm }\n\nmodels = pd.DataFrame(data) \n \nfor column in models:\n    CM=confusion_matrix(y_test,models[column])\n    \n    TN = CM[0][0]\n    FN = CM[1][0]\n    TP = CM[1][1]\n    FP = CM[0][1]\n    specificity = TN\/(TN+FP)\n    loss_log = log_loss(y_test, models[column])\n    acc= accuracy_score(y_test, models[column])\n    roc=roc_auc_score(y_test, models[column])\n    prec = precision_score(y_test, models[column])\n    rec = recall_score(y_test, models[column])\n    f1 = f1_score(y_test, models[column])\n    \n    mathew = matthews_corrcoef(y_test, models[column])\n    results =pd.DataFrame([[column,acc, prec,rec,specificity, f1,roc, loss_log,mathew]],\n               columns = ['Model', 'Accuracy','Precision', 'Sensitivity','Specificity', 'F1 Score','ROC','Log_Loss','mathew_corrcoef'])\n    model_results = model_results.append(results, ignore_index = True)\n\nmodel_results","f483d4db":"CONCLUSION: \n    The accuracy of MLP and SVC is 81% and 83%, inorder the data was very low. Because I didnot replaced the null values by mean or mode beacuse there were few rows in which the values were completely null. I cannot replace the null values by mean or mode due to insufficient domain knowledge.\nIntially the data was 920,after dropping the null values the data shape was aroung 299. So,due to lack of data the accuracy is 80%,i think which is quite good.\nIn this I bulit almost 6 models to find which model is performimg good and compared with eachother."}}