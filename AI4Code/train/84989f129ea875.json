{"cell_type":{"d228dec3":"code","098e7bfe":"code","097fedc4":"code","2a5264a1":"code","2fb588e9":"code","ee1ec073":"code","945e5423":"code","72e69352":"code","6929d446":"code","7b31b08e":"code","b8fc6b5b":"code","6d384abd":"code","5d3d41a4":"code","69c8e4ba":"code","25f17ef1":"markdown","edf488e0":"markdown","cfb1e806":"markdown","3c582abf":"markdown","ecc65b33":"markdown","423eedc0":"markdown","d7f0f2d3":"markdown","0350aae3":"markdown"},"source":{"d228dec3":"import pandas as pd\nimport pandas_profiling as pp\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Metrics\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score\n\n# Tuning\nfrom sklearn.model_selection import GridSearchCV\n\n# validation\nfrom sklearn.model_selection import train_test_split, cross_val_score,KFold\nfrom sklearn.pipeline import Pipeline\n\n# Prerocessing\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler, Normalizer, Binarizer\n\n# Machine learning models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Ensembles\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nsns.set(style='whitegrid')\nplt.style.use('seaborn-darkgrid')\n%matplotlib inline\n\n\n\n\ndf = pd.read_csv('..\/input\/pulsar_stars.csv')\ndf.head()\n","098e7bfe":"pp.ProfileReport(df)","097fedc4":"sns.countplot(x='target_class', data=df)\nplt.title('Class Distribution');","2a5264a1":"X = df.drop('target_class', axis=1)\ny = df.target_class\n\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                   y,\n                                                   test_size=0.3,\n                                                   random_state=0)\n","2fb588e9":"pipelines = []\npipelines.append(( ' ScaledLR ' , Pipeline([( 'Scaler' , StandardScaler()),( ' LR ' ,\nLogisticRegression())])))\npipelines.append(( ' ScaledLDA ' , Pipeline([( 'Scaler' , StandardScaler()),( ' LDA ' ,\nLinearDiscriminantAnalysis())])))\npipelines.append(( ' ScaledKNN ' , Pipeline([( ' Scaler ' , StandardScaler()),( ' KNN ' ,\nKNeighborsClassifier())])))\npipelines.append(( ' ScaledRF ' , Pipeline([( ' Scaler ' , StandardScaler()),( ' RandomForest ' ,\nRandomForestClassifier())])))\npipelines.append(( ' ScaledNB ' , Pipeline([( ' Scaler ' , StandardScaler()),( ' NB ' ,\nGaussianNB())])))\npipelines.append(( ' ScaledSVM ' , Pipeline([( ' Scaler' , StandardScaler()),( ' SVM ' , SVC())])))\n\nresults = []\nnames = []\n\nfor name, model in pipelines:\n    kfold = KFold(n_splits=10, random_state=0)\n    cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","ee1ec073":"scaler = StandardScaler().fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\nlogis = LogisticRegression().fit(X_train,y_train)\ny_pred = logis.predict(X_test)\nprint(accuracy_score(y_pred, y_test))","945e5423":"print(np.unique(y_pred))","72e69352":"print(classification_report(y_pred, y_test))","6929d446":"plt.figure(figsize=(10,5))\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='2.0f');","7b31b08e":"\nscaler = StandardScaler().fit(X_train)\nX_train = scaler.transform(X_train)\n\n\npenalty = ['l1', 'l2']\nC = np.logspace(0, 4, 10)\nhyperparameters = dict(C=C, penalty=penalty)\n\ngrid = GridSearchCV(LogisticRegression(), hyperparameters, cv=10, verbose=0)\ngrid_result = grid.fit(X_train, y_train)\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n\n","b8fc6b5b":"ensembles = []\nensembles.append(( ' ScaledAB ' , Pipeline([( ' Scaler ' , StandardScaler()),( ' AB ' ,\nAdaBoostClassifier())])))\nensembles.append(( ' ScaledBG ' , Pipeline([( ' Scaler ' , StandardScaler()),( ' AB ' ,\nBaggingClassifier())])))\nensembles.append(( ' ScaledGBM ' , Pipeline([( ' Scaler ' , StandardScaler()),( ' GBM ' ,\nGradientBoostingClassifier())])))\nensembles.append(( ' ScaledRF ' , Pipeline([( ' Scaler ' , StandardScaler()),( ' RF ' ,\nRandomForestClassifier())])))\n\n                 \nresults = []\nnames = []\nfor name, model in ensembles:\n    kfold = KFold(n_splits=10, random_state=0)\n    cv_results = cross_val_score(model, X_train, y_train, cv=kfold)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","6d384abd":"scaler = StandardScaler().fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\nbagging = BaggingClassifier().fit(X_train,y_train)\ny_pred = bagging.predict(X_test)\nprint(accuracy_score(y_pred, y_test))","5d3d41a4":"print(classification_report(y_pred, y_test))","69c8e4ba":"plt.figure(figsize=(10,5))\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='2.0f');","25f17ef1":"# Improve accuracy using ensemble methods","edf488e0":"# Exploratory Data Analysis","cfb1e806":"### We have imbalanced classes but this model predicting not just the majority ","3c582abf":"# Logistic Regression","ecc65b33":"# Bagging","423eedc0":"# Improve Result with Tuning","d7f0f2d3":"# Models\n","0350aae3":"# Predicting Pulsar Stars\n![](https:\/\/everydayastronaut.com\/wp-content\/uploads\/2019\/03\/neutronstarj.jpg)\n\nMost neutron stars are observed as pulsars. Pulsars are rotating neutron stars observed to have pulses of radiation at very regular intervals that typically range from milliseconds to seconds. Pulsars have very strong magnetic fields which funnel jets of particles out along the two magnetic poles. These accelerated particles produce very powerful beams of light. Often, the magnetic field is not aligned with the spin axis, so those beams of particles and light are swept around as the star rotates. When the beam crosses our line-of-sight, we see a pulse \u2013 in other words, we see pulsars turn on and off as the beam sweeps over Earth.\n\nOne way to think of a pulsar is like a lighthouse. At night, a lighthouse emits a beam of light that sweeps across the sky. Even though the light is constantly shining, you only see the beam when it is pointing directly in your direction. The video below is an animation of a neutron star showing the magnetic field rotating with the star. Partway through, the point-of-view changes so that we can see the beams of light sweeping across our line of sight \u2013 this is how a pulsar pulses."}}