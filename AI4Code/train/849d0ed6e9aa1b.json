{"cell_type":{"880410c4":"code","05de7286":"code","7083869f":"code","947f4888":"code","ebb3cd50":"code","c73f49ba":"code","35af8f5b":"code","f6d6b5ad":"code","e755a13f":"code","c722ecb6":"code","66fcc4b5":"code","c72da2e7":"code","7620bb76":"code","e1a9b9cc":"code","330f697f":"code","8de16f37":"code","d271d57b":"code","6c033cf1":"code","6e6655d8":"code","913bba7b":"code","96d00ea8":"code","29fc0772":"code","d77072ef":"code","c4912eb1":"code","16b6594f":"code","8ee97917":"code","f08aaf37":"code","e562458e":"code","d9477023":"code","56e2bf98":"code","ac8dd558":"code","75ab131f":"code","64497544":"code","f9227ebe":"code","d08ddc4b":"code","b53a6d8e":"code","b3ba6856":"code","169df758":"code","ea16a4e4":"code","673ab44c":"code","53badb81":"code","1179d6f1":"code","3c28fb08":"code","8224c04b":"code","52d678ae":"code","f5c00b07":"code","4f50b9df":"code","7567ff3b":"code","8a590f28":"code","4520fa80":"code","8b4ecb19":"code","492adb76":"code","6019a4f4":"code","82b898a0":"code","64187cfc":"code","f82ba02c":"code","0ec33b12":"code","3d5e980f":"code","3def310e":"code","a5294735":"code","a2dcc509":"code","fd684d90":"code","b0b0806b":"code","f574ae95":"code","7a3d18c0":"code","3c71159d":"code","3bc33c42":"code","140f9f67":"code","6c0b58bb":"code","838196a6":"code","20c23a25":"code","4193be90":"code","b90332e8":"code","2e718552":"code","cb0cc38f":"code","f1c6f842":"code","6fc1f244":"code","135b09da":"code","71f49d62":"code","12d70a53":"code","6a00082b":"code","73a3f144":"code","38b8d993":"code","ce1e8d14":"code","cfdcddcf":"code","be1a6adf":"code","6bfa6c7b":"code","cbb25305":"code","5d6f0586":"code","75e88f5b":"code","3ca5fa97":"code","8849620e":"code","38034cdd":"code","a6b73f84":"code","e29a6174":"code","c91af637":"code","4c823a4f":"code","d358de9c":"code","08ac5b17":"code","9aabadf5":"code","0f89a1c8":"code","899a14d5":"code","ce19ebab":"code","0af790cc":"code","df328e2c":"code","38e1a69b":"code","c9089581":"code","e3bab3bd":"code","6ce8dd3d":"code","5a1f3fbb":"code","4f183fed":"code","08de9166":"code","b83fc660":"code","01c4e517":"code","512cdf18":"code","ffed5994":"code","86ff6737":"code","004f4b27":"code","d62de537":"code","51c7023c":"code","34f2c356":"code","b8c88dfa":"code","c84ae782":"code","ef5fd478":"code","0dde9c18":"code","da073118":"code","3b646d10":"code","3a602849":"markdown","c23e027d":"markdown","20d02e98":"markdown","bbdf5cab":"markdown","23d99fbe":"markdown","b82eadad":"markdown","7d4b7e9c":"markdown","1169bc49":"markdown","4e523206":"markdown","8f608e46":"markdown","4fd9783c":"markdown","bf2fd321":"markdown","a032d766":"markdown","13faed4a":"markdown","b9edfb27":"markdown","589ef129":"markdown","08030727":"markdown","10126fa5":"markdown","eb3b3db9":"markdown","a487bb96":"markdown","e8ac298e":"markdown","5348945e":"markdown","6e28ae14":"markdown","8fb88e5c":"markdown","1de6b350":"markdown","84821f38":"markdown","62b68e3f":"markdown","67cc38a8":"markdown","41e2260f":"markdown","9e42c1e1":"markdown","695be022":"markdown","128d23fa":"markdown","785185bc":"markdown","56cf81fe":"markdown","6fb26de8":"markdown","0edd546e":"markdown","1efe6794":"markdown","07b87d69":"markdown","5e5714e1":"markdown","2d3181d1":"markdown","80786c03":"markdown","7f860a7b":"markdown","5dac26b0":"markdown","520a2888":"markdown","ed4f19de":"markdown","cae2da8d":"markdown","efa32940":"markdown","3b65f899":"markdown","af93d077":"markdown","675bb6af":"markdown","b981b6d5":"markdown","b3fa7ce6":"markdown","901e9fdb":"markdown","e5960634":"markdown","c62a4f3d":"markdown","1eb20498":"markdown"},"source":{"880410c4":"path_data_train = '..\/input\/realestatepriceprediction\/train.csv'\n\npath_data_test = '..\/input\/realestatepriceprediction\/test.csv'","05de7286":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.metrics import r2_score\nimport random\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import KFold, GridSearchCV","7083869f":"data_train = pd.read_csv(path_data_train)\ndata_train","947f4888":"data_train.info()","ebb3cd50":"data_test = pd.read_csv(path_data_test)\ndata_test","c73f49ba":"data_test.info()","35af8f5b":"data_train.describe()","f6d6b5ad":"categorical_columns = [c for c in data_train.columns if data_train[c].dtype.name == 'object']\nnumerical_columns   = [c for c in data_train.columns if data_train[c].dtype.name != 'object']\nprint(\"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\\n{}\".format(categorical_columns))\nprint(\"\u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\\n{}\".format(numerical_columns))","e755a13f":"data_train[categorical_columns].describe()","c722ecb6":"for c in categorical_columns:\n    print(data_train[c].unique())","66fcc4b5":"data_train[numerical_columns].describe()","c72da2e7":"Price_Id_DistrictId = data_train[['Price','Id','DistrictId']]\npx.scatter_matrix(Price_Id_DistrictId, dimensions = ['Price','Id','DistrictId'],color=\"Price\")","7620bb76":"%%time\nPrice_Rooms_Square_LifeSquare_KitchenSquare_Floor_HouseFloor = data_train[['Price','Rooms','Square','LifeSquare','KitchenSquare','Floor','HouseFloor']]\npx.scatter_matrix(Price_Rooms_Square_LifeSquare_KitchenSquare_Floor_HouseFloor, dimensions = ['Price','Rooms','Square','LifeSquare','KitchenSquare','Floor','HouseFloor'],color=\"Price\")","e1a9b9cc":"Price_HouseYear = data_train[['Price','HouseYear']]\npx.scatter_matrix(Price_HouseYear, dimensions = ['Price','HouseYear'],color=\"Price\")","330f697f":"Price_Ecology_1 = data_train[['Price','Ecology_1']]\npx.scatter_matrix(Price_Ecology_1, dimensions = ['Price','Ecology_1'],color=\"Price\")","8de16f37":"Price_Social_1_Social_2_Social_3 = data_train[['Price','Social_1','Social_2','Social_3']]\npx.scatter_matrix(Price_Social_1_Social_2_Social_3, dimensions = ['Price','Social_1','Social_2','Social_3'],color=\"Price\")","d271d57b":"Price_Healthcare_1_Helthcare_2= data_train[['Price','Healthcare_1','Helthcare_2']]\npx.scatter_matrix(Price_Healthcare_1_Helthcare_2, dimensions = ['Price','Healthcare_1','Helthcare_2'],color=\"Price\")\n","6c033cf1":"Price_Shops_1 = data_train[['Price','Shops_1']]\npx.scatter_matrix(Price_Shops_1, dimensions = ['Price','Shops_1'],color=\"Price\")","6e6655d8":"print(\"\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 LifeSquare:\\n{}\".format(data_train['LifeSquare'].describe()))\nprint(\"\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 Healthcare_1:\\n{}\".format(data_train['Healthcare_1'].describe()))\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 LifeSquare:\\n{}\".format(data_train['LifeSquare'].unique()))\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Healthcare_1:\\n{}\".format(data_train['Healthcare_1'].unique()))","913bba7b":"data_train_outliers = data_train.copy()","96d00ea8":"LifeSquare_mean = data_train_outliers[\"LifeSquare\"].mean()\nHealthcare_1_median = data_train_outliers[\"Healthcare_1\"].median()\n\ndata_train_outliers[\"LifeSquare\"].fillna(LifeSquare_mean, inplace=True)\ndata_train_outliers[\"Healthcare_1\"].fillna(Healthcare_1_median, inplace=True)\n\nprint(\"\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 LifeSquare:\\n{}\".format(LifeSquare_mean))\nprint(\"\u041c\u0435\u0434\u0438\u0430\u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Healthcare_1:\\n{}\".format(Healthcare_1_median))\nprint(data_train_outliers.info())","29fc0772":"data_train_outliers['Rooms'].value_counts()","d77072ef":"data_train_outliers.loc[data_train_outliers['Rooms'].isin([0, 10, 19]), 'Rooms'] = data_train_outliers['Rooms'].median()","c4912eb1":"data_train_outliers.describe()","16b6594f":"steps = []\nscores = [] # <- \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 score","8ee97917":"steps.append('\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 var1')\n\ndata_train_outliers = data_train_outliers[data_train_outliers['Square'].isnull() |\n                     (data_train_outliers['Square'] < data_train_outliers['Square'].quantile(.99)) &\n                     (data_train_outliers['Square'] > data_train_outliers['Square'].quantile(.01))]\n\ndata_train_outliers = data_train_outliers[data_train_outliers['LifeSquare'].isnull() |\n                      (data_train_outliers['LifeSquare'] < data_train_outliers['LifeSquare'].quantile(.99)) &\n                      (data_train_outliers['LifeSquare'] >data_train_outliers['LifeSquare'].quantile(.01))]\n\ndata_train_outliers = data_train_outliers[data_train_outliers['KitchenSquare'].isnull() |\n                    (data_train_outliers['KitchenSquare'] < data_train_outliers['KitchenSquare'].quantile(.99)) &\n                    (data_train_outliers['KitchenSquare'] > data_train_outliers['KitchenSquare'].quantile(.01))]","f08aaf37":"# steps.append('\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 var2')\n\n\"\"\"\n...\n...\n...\n\"\"\"","e562458e":"data_train_outliers.describe()","d9477023":"data_train_outliers.loc[data_train_outliers['LifeSquare'] < 10, 'LifeSquare'] = 10","56e2bf98":"data_train_outliers.loc[data_train_outliers['KitchenSquare'] < 3, 'KitchenSquare'] = 3","ac8dd558":"data_train_outliers['HouseFloor'].sort_values().unique()","75ab131f":"data_train_outliers['Floor'].sort_values().unique()","64497544":"data_train_outliers.loc[data_train_outliers['HouseFloor'] == 0, 'HouseFloor'] = data_train_outliers['HouseFloor'].median()","f9227ebe":"floor_outliers = data_train_outliers[data_train_outliers['Floor'] > data_train_outliers['HouseFloor']].index\n\ndata_train_outliers.loc[floor_outliers, 'Floor'] = data_train_outliers.loc[floor_outliers, 'HouseFloor'].apply(lambda x: random.randint(1, x))\n","d08ddc4b":"data_train_outliers['HouseYear'].sort_values().unique()","b53a6d8e":"data_train_outliers.loc[data_train_outliers['HouseYear'] == 20052011, 'HouseYear'] = 2011","b3ba6856":"data_train_outliers.loc[data_train_outliers['HouseYear'] > 2020, 'HouseYear'] = 2020","169df758":"print(\"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ecology_2:\\n{}\".format(data_train['Ecology_2'].value_counts()))\nprint(\"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ecology_3:\\n{}\".format(data_train['Ecology_3'].value_counts()))\nprint(\"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Shops_2:\\n{}\".format(data_train['Shops_2'].value_counts()))","ea16a4e4":"print(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ecology_2:\\n{}\".format(data_train['Ecology_2'].unique()))\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ecology_3:\\n{}\".format(data_train['Ecology_3'].unique()))\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Shops_2:\\n{}\".format(data_train['Shops_2'].unique()))","673ab44c":"category_A_B_map =  { 'A': 0,\n                      'B': 1,}\n\ndata_train_outliers['Ecology_2'] = data_train_outliers['Ecology_2'].map(category_A_B_map)\ndata_train_outliers['Ecology_3'] = data_train_outliers['Ecology_3'].map(category_A_B_map)\ndata_train_outliers['Shops_2'] = data_train_outliers['Shops_2'].map(category_A_B_map)\n\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ecology_2:\\n{}\".format(data_train_outliers['Ecology_2'].unique()))\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ecology_3:\\n{}\".format(data_train_outliers['Ecology_3'].unique()))\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Shops_2:\\n{}\".format(data_train_outliers['Shops_2'].unique()))","53badb81":"# from sklearn.preprocessing import StandardScaler\n# scaler = StandardScaler()\n\n# from sklearn.preprocessing import RobustScaler\n# scaler = RobustScaler()\n\n# from sklearn.preprocessing import Normalizer\n# scaler = Normalizer()\n\n# from sklearn.preprocessing import PowerTransformer\n# scaler = PowerTransformer()\n\nfrom sklearn.preprocessing import QuantileTransformer\nscaler = QuantileTransformer(n_quantiles=20, random_state=42) # \u041b\u0443\u0447\u0448\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b\n\n# from sklearn.preprocessing import MaxAbsScaler\n# scaler =MaxAbsScaler()","1179d6f1":"data_train_outliers.columns.tolist()","3c28fb08":"feature_names = ['Id',\n 'DistrictId',\n 'Rooms',\n 'Square',\n 'LifeSquare',\n 'KitchenSquare',\n 'Floor',\n 'HouseFloor',\n 'HouseYear',\n 'Ecology_1',\n 'Ecology_2',\n 'Ecology_3',\n 'Social_1',\n 'Social_2',\n 'Social_3',\n 'Healthcare_1',\n 'Helthcare_2',\n 'Shops_1',\n 'Shops_2',\n 'Price']\n\nfeature_names.remove('Price')\n\nfeature_names","8224c04b":"target_data =data_train_outliers['Price']\n\ndata_train_for_scaling = scaler.fit_transform(data_train_outliers[feature_names].astype(float))\n\ndata_train_scaled = pd.DataFrame(data_train_for_scaling, columns=feature_names)\n\ndata_train_scaled.head()","52d678ae":"feature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare',\n       'Floor', 'HouseFloor', 'HouseYear', 'Ecology_1', 'Ecology_2',\n       'Ecology_3', 'Social_1', 'Social_2', 'Social_3', 'Healthcare_1',\n       'Helthcare_2', 'Shops_1', 'Shops_2']","f5c00b07":"from sklearn.model_selection import train_test_split","4f50b9df":"X = data_train_scaled[feature_names]\ny = target_data","7567ff3b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, shuffle=True, random_state=45)","8a590f28":"import seaborn as sns\nfrom sklearn.metrics import r2_score as r2\n\ndef evaluate_preds(train_true_values, train_pred_values, val_true_values, val_pred_values):\n    \"\"\"\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043e\u0434\u0435\u043b\u0438\n    Parameters:\n    train_true_values - \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0438\u0437 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n    train_pred_values - \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438\n    val_true_values - \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0438\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n    val_pred_values - \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438\n    Returns:\n    R2 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438, \n    \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439\n    \"\"\"\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Valid R2:\\t\" + str(round(r2(val_true_values, val_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=val_pred_values, y=val_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n    plt.show()","4520fa80":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression().fit(X_train, y_train)","8b4ecb19":"y_pred_train = lr.predict(X_train)\ny_pred = lr.predict(X_test)","492adb76":"print(\"R^2 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_train, y_pred_train)))\nprint(\"R^2 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_test, y_pred)))","6019a4f4":"evaluate_preds(y_train, y_pred_train, y_test, y_pred)","82b898a0":"cv_score = cross_val_score(lr, X, y, scoring='r2', cv=KFold(n_splits=5, shuffle=True, random_state=21))\ncv_score","64187cfc":"from sklearn.linear_model import Ridge\nridge = Ridge(alpha=0.0001).fit(X_train, y_train)","f82ba02c":"y_pred_train = ridge.predict(X_train)\ny_pred = ridge.predict(X_test)","0ec33b12":"print(\"R^2 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_train, y_pred_train)))\nprint(\"R^2 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_test, y_pred)))","3d5e980f":"evaluate_preds(y_train, y_pred_train, y_test, y_pred)","3def310e":"cv_score = cross_val_score(lr, X, y, scoring='r2', cv=KFold(n_splits=5, shuffle=True, random_state=21))\ncv_score","a5294735":"from sklearn.linear_model import Lasso\nlasso = Lasso(alpha=1, max_iter=500).fit(X_train, y_train)","a2dcc509":"y_pred_train = lasso.predict(X_train)\ny_pred = lasso.predict(X_test)","fd684d90":"print(\"R^2 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_train, y_pred_train)))\nprint(\"R^2 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_test, y_pred)))","b0b0806b":"evaluate_preds(y_train, y_pred_train, y_test, y_pred)","f574ae95":"cv_score = cross_val_score(lasso, X, y, scoring='r2', cv=KFold(n_splits=5, shuffle=True, random_state=21))\ncv_score","7a3d18c0":"from sklearn.neighbors import KNeighborsRegressor\nreg = KNeighborsRegressor(n_neighbors=3).fit(X_train, y_train)","3c71159d":"y_pred_train = reg.predict(X_train)\ny_pred = reg.predict(X_test)","3bc33c42":"print(\"R^2 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_train, y_pred_train)))\nprint(\"R^2 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_test, y_pred)))","140f9f67":"evaluate_preds(y_train, y_pred_train, y_test, y_pred)","6c0b58bb":"cv_score = cross_val_score(reg, X, y, scoring='r2', cv=KFold(n_splits=5, shuffle=True, random_state=21))\ncv_score","838196a6":"from sklearn.ensemble import RandomForestRegressor\nregr = RandomForestRegressor(n_estimators=10, max_depth=10, random_state=42).fit(X_train, y_train)","20c23a25":"y_pred_train = regr.predict(X_train)\ny_pred = regr.predict(X_test)","4193be90":"print(\"R^2 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_train, y_pred_train)))\nprint(\"R^2 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_test, y_pred)))","b90332e8":"evaluate_preds(y_train, y_pred_train, y_test, y_pred)","2e718552":"cv_score = cross_val_score(regr, X, y, scoring='r2', cv=KFold(n_splits=5, shuffle=True, random_state=21))\ncv_score","cb0cc38f":"from sklearn.tree import ExtraTreeRegressor\nfrom sklearn.ensemble import BaggingRegressor\nextra_tree = ExtraTreeRegressor(random_state=42)\nreg = BaggingRegressor(extra_tree, random_state=22).fit(X_train, y_train)","f1c6f842":"y_pred_train = regr.predict(X_train)\ny_pred = regr.predict(X_test)","6fc1f244":"print(\"R^2 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_train, y_pred_train)))\nprint(\"R^2 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_test, y_pred)))","135b09da":"evaluate_preds(y_train, y_pred_train, y_test, y_pred)","71f49d62":"cv_score = cross_val_score(regr, X, y, scoring='r2', cv=KFold(n_splits=5, shuffle=True, random_state=21))\ncv_score","12d70a53":"from sklearn.linear_model import PassiveAggressiveRegressor\nregr = PassiveAggressiveRegressor(max_iter=100000, random_state=42, tol=1e-3).fit(X_train, y_train)","6a00082b":"y_pred_train = regr.predict(X_train)\ny_pred = regr.predict(X_test)","73a3f144":"print(\"R^2 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_train, y_pred_train)))\nprint(\"R^2 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_test, y_pred)))","38b8d993":"evaluate_preds(y_train, y_pred_train, y_test, y_pred)","ce1e8d14":"cv_score = cross_val_score(reg, X, y, scoring='r2', cv=KFold(n_splits=5, shuffle=True, random_state=21))\ncv_score","cfdcddcf":"from sklearn.ensemble import GradientBoostingRegressor\ngbt = GradientBoostingRegressor(random_state=42, n_estimators=322).fit(X_train, y_train)","be1a6adf":"y_pred_train = gbt.predict(X_train)\ny_pred = gbt.predict(X_test)","6bfa6c7b":"print(\"R^2 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_train, y_pred_train)))\nprint(\"R^2 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_test, y_pred)))","cbb25305":"evaluate_preds(y_train, y_pred_train, y_test, y_pred)","5d6f0586":"cv_score = cross_val_score(gbt, X, y, scoring='r2', cv=KFold(n_splits=5, shuffle=True, random_state=21))\ncv_score","75e88f5b":"from sklearn.linear_model import RANSACRegressor\nreg = RANSACRegressor(random_state=42).fit(X_train, y_train)","3ca5fa97":"y_pred_train = reg.predict(X_train)\ny_pred = reg.predict(X_test)","8849620e":"print(\"R^2 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_train, y_pred_train)))\nprint(\"R^2 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_test, y_pred)))","38034cdd":"evaluate_preds(y_train, y_pred_train, y_test, y_pred)","a6b73f84":"cv_score = cross_val_score(reg, X, y, scoring='r2', cv=KFold(n_splits=5, shuffle=True, random_state=21))\ncv_score","e29a6174":"from sklearn.linear_model import HuberRegressor\nhuber = HuberRegressor(alpha=100).fit(X_train, y_train)","c91af637":"y_pred_train = huber.predict(X_train)\ny_pred = huber.predict(X_test)","4c823a4f":"print(\"R^2 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_train, y_pred_train)))\nprint(\"R^2 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_test, y_pred)))","d358de9c":"evaluate_preds(y_train, y_pred_train, y_test, y_pred)","08ac5b17":"cv_score = cross_val_score(huber, X, y, scoring='r2', cv=KFold(n_splits=5, shuffle=True, random_state=21))\ncv_score","9aabadf5":"from sklearn.linear_model import SGDRegressor\nsgdr = SGDRegressor(penalty='elasticnet', alpha=0.0001, l1_ratio=0.25, tol=1e-4).fit(X_train, y_train)","0f89a1c8":"y_pred_train = sgdr.predict(X_train)\ny_pred = sgdr.predict(X_test)","899a14d5":"print(\"R^2 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_train, y_pred_train)))\nprint(\"R^2 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_test, y_pred)))","ce19ebab":"evaluate_preds(y_train, y_pred_train, y_test, y_pred)","0af790cc":"cv_score = cross_val_score(sgdr, X, y, scoring='r2', cv=KFold(n_splits=5, shuffle=True, random_state=21))\ncv_score","df328e2c":"from sklearn.svm import SVR\nclf = SVR(C=55, epsilon=0.0001, gamma ='auto').fit(X_train, y_train)","38e1a69b":"y_pred_train = clf.predict(X_train)\ny_pred = clf.predict(X_test)","c9089581":"print(\"R^2 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_train, y_pred_train)))\nprint(\"R^2 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_test, y_pred)))","e3bab3bd":"evaluate_preds(y_train, y_pred_train, y_test, y_pred)","6ce8dd3d":"cv_score = cross_val_score(clf, X, y, scoring='r2', cv=KFold(n_splits=5, shuffle=True, random_state=21))\ncv_score","5a1f3fbb":"from sklearn.neural_network import MLPRegressor\nmlpr = MLPRegressor(hidden_layer_sizes=220, \n                    alpha = 0.0001, \n                    activation = 'logistic', \n                    random_state = 42).fit(X_train, y_train)","4f183fed":"y_pred_train = mlpr.predict(X_train)\ny_pred = mlpr.predict(X_test)","08de9166":"print(\"R^2 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_train, y_pred_train)))\nprint(\"R^2 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {}\".format(r2_score(y_test, y_pred)))","b83fc660":"evaluate_preds(y_train, y_pred_train, y_test, y_pred)","01c4e517":"cv_score = cross_val_score(mlpr, X, y, scoring='r2', cv=KFold(n_splits=5, shuffle=True, random_state=21))\ncv_score","512cdf18":"data_test.head()","ffed5994":"data_test_prep = data_test.copy()","86ff6737":"LifeSquare_mean = data_test_prep[\"LifeSquare\"].mean()\nHealthcare_1_median = data_test_prep[\"Healthcare_1\"].median()\n\ndata_test_prep[\"LifeSquare\"].fillna(LifeSquare_mean, inplace=True)\ndata_test_prep[\"Healthcare_1\"].fillna(Healthcare_1_median, inplace=True)\n\nprint(\"\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 LifeSquare:\\n{}\".format(LifeSquare_mean))\nprint(\"\u041c\u0435\u0434\u0438\u0430\u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Healthcare_1:\\n{}\".format(Healthcare_1_median))\nprint(data_test_prep.info())","004f4b27":"category_A_B_map =  { 'A': 0,\n                      'B': 1,}\n\ndata_test_prep['Ecology_2'] = data_test_prep['Ecology_2'].map(category_A_B_map)\ndata_test_prep['Ecology_3'] = data_test_prep['Ecology_3'].map(category_A_B_map)\ndata_test_prep['Shops_2'] = data_test_prep['Shops_2'].map(category_A_B_map)\n\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ecology_2:\\n{}\".format(data_test_prep['Ecology_2'].unique()))\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ecology_3:\\n{}\".format(data_test_prep['Ecology_3'].unique()))\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Shops_2:\\n{}\".format(data_test_prep['Shops_2'].unique()))","d62de537":"data_test_prep.keys()","51c7023c":"feature_names = ['Id', 'DistrictId', 'Rooms', 'Square', 'LifeSquare', 'KitchenSquare',\n       'Floor', 'HouseFloor', 'HouseYear', 'Ecology_1', 'Ecology_2',\n       'Ecology_3', 'Social_1', 'Social_2', 'Social_3', 'Healthcare_1',\n       'Helthcare_2', 'Shops_1', 'Shops_2']","34f2c356":"data_test_for_scaling = scaler.fit_transform(data_test_prep.astype(float))\n\ndata_test_scaled = pd.DataFrame(data_test_for_scaling, columns=feature_names)\n\ndata_test_scaled.head()","b8c88dfa":"feature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare',\n       'Floor', 'HouseFloor', 'HouseYear', 'Ecology_1', 'Ecology_2',\n       'Ecology_3', 'Social_1', 'Social_2', 'Social_3', 'Healthcare_1',\n       'Helthcare_2', 'Shops_1', 'Shops_2']","c84ae782":"X = data_test_scaled[feature_names]","ef5fd478":"y_pred = gbt.predict(X)\ny_pred","0dde9c18":"predictions = pd.DataFrame({\n    'Id': data_test['Id'],\n    'Price':y_pred\n})","da073118":"predictions.head()","3b646d10":"# predictions.to_csv('Trifonov_Ruslan_predictions.csv', sep=',', index=False, encoding='utf-8')","3a602849":"### Passive Aggressive Regressor","c23e027d":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 Price: __Price | Rooms | Square | LifeSquare | KitchenSquare | Floor | HouseFloor__","20d02e98":"**HouseYear**","bbdf5cab":"### \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","23d99fbe":"**Square, LifeSquare, KitchenSquare**","b82eadad":"## \u0410\u043d\u0430\u043b\u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","7d4b7e9c":"\u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043c\u0430\u0442\u0440\u0438\u0446 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \n\n- Rooms \n- Square\n- LifeSquare\n- KitchenSquare\n- Floor\n- HouseFloor\n- Ecology_1\n- Social_1\n- Social_2\n- Social_3\n- Healthcare_1\n- Helthcare_2\n\n\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a HouseYear \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u044f\u0432\u043d\u043e\u0439 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0441 \u0446\u0435\u043b\u0435\u0432\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \n\n\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 Id \u0438 DistrictId \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e \n\n","1169bc49":"## \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 Price","4e523206":"### Extra Trees Regressor","8f608e46":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 Price: __Price | Healthcare_1 | Helthcare_2__","4fd9783c":"\u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043a\u0430\u0437\u0430\u043b, \u0447\u0442\u043e \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0442\u0440\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n1. Ecology_2\t\n1. Ecology_3\n1. Shops_2\n\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 Ecology_2 \u0438 Ecology_3 \u0438\u043c\u0435\u044e\u0442 \u0431\u0443\u043a\u0432\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0412, \u043f\u0440\u0438\u0437\u043d\u0430\u043a Shops_2 \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0410 \u0438 \u0412.  \n\n\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0446\u0438\u0444\u0440\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430. ","bf2fd321":"**\u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 (data_test) \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u044b:** \n1. \u0414\u0430\u043d\u043d\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u0444\u043e\u0440\u043c\u0443 5000 \u0441\u0442\u0440\u043e\u043a \u0438 19 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \n1. \u041e\u0442\u0441\u0443\u0442\u0432\u0435\u0442 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 Price \n1. \u0412 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 LifeSquare = 3959, Healthcare_1 = 2623 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0442\u043e\u0433\u0434\u0430 \u043a\u0430\u043a \u0432\u043e \u0432\u0441\u0435\u0445 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u043e 5000 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n1. \u0412 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0438\u043c\u0435\u0435\u0442 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443","a032d766":"### \u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f","13faed4a":"### \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 ","b9edfb27":"**HouseFloor, Floor**","589ef129":"## \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0446\u0435\u043d \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","08030727":"\u0412\u044b\u0434\u0435\u043b\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043d\u043e \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 ","10126fa5":"### \u041b\u0430\u0441\u0441\u043e","eb3b3db9":"### \u0420\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f k \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439","a487bb96":"### \u0412\u0435\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","e8ac298e":"__\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u0430__\n\n- Id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n- DistrictId - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n- Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n- Square - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n- LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n- KitchenSquare - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n- Floor - \u044d\u0442\u0430\u0436\n- HouseFloor - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n- HouseYear - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n- Ecology_1, Ecology_2, Ecology_3 - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n- Social_1, Social_2, Social_3 - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n- Healthcare_1, Helthcare_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n- Shops_1, Shops_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n- Price - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","5348945e":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 Price: __Price | Ecology_1__","6e28ae14":"### \u0412\u0435\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","8fb88e5c":"### \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 ","1de6b350":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0435\u0430\u043c __Gradient Boosting Regressor__","84821f38":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 Price: __Price | Shops_1__","62b68e3f":"# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0446\u0435\u043d \u043d\u0430 \u043d\u0435\u0434\u0432\u0438\u0436\u0438\u043c\u043e\u0441\u0442\u044c (Real Estate Price Prediction)","67cc38a8":"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: \n- LifeSquare - \u0441\u0440\u0435\u0434\u043d\u0438\u043c \n- Healthcare_1 - \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439","41e2260f":"### \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438  LifeSquare, Healthcare_1 \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","9e42c1e1":"### Multi-layer Perceptron regressor","695be022":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 Price: __Price | Id | DistrictId__","128d23fa":"### \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043e\u0446\u0435\u043d\u043a\u0438\n\n\u041a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0434\u0435\u0442\u0435\u0440\u043c\u0438\u043d\u0430\u0446\u0438\u0438 \n$$ R^{2}= 1-\\dfrac{\\sigma^{2}}{\\sigma^{2}_{y}} $$","785185bc":"\u0412 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 Ecology_2, Ecology_3 \u0438 Shops_2 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0433\u0434\u0435 __\u0410 = 0, \u0412 = 1__","56cf81fe":"\u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b.\n\n\u0422.\u043a. \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e, \u0440\u0430\u0437\u043e\u0431\u044a\u0435\u043c \u043d\u0430\u0431\u043e\u0440 \u043d\u0430 \u0433\u0440\u0443\u043f\u043f\u044b \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 Price\n\n- Price | Id | DistrictId\t\n- Price | Rooms | Square | LifeSquare | KitchenSquare | Floor | HouseFloor\n- Price | HouseYear\n- Price | Ecology_1 \n- Price | Social_1 | Social_2 | Social_3\n- Price | Healthcare_1 | Helthcare_2\n- Price | Shops_1 ","6fb26de8":"### RANSAC Regressor","0edd546e":"### Huber Regressor","1efe6794":"\u041e\u0431\u0437\u043e\u0440 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","07b87d69":"\u041e\u0431\u0449\u0438\u0435 \u043e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0434\u043b\u044f \u0432\u0441\u0435\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","5e5714e1":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","2d3181d1":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 Price: __Price | HouseYear__","80786c03":"### SVR","7f860a7b":"### \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0414\u0430\u043d\u044b \u0434\u0432\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\n\n- train.csv (\u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0446\u0435\u043d\u044b \u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b) \n- test.csv (\u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438)","5dac26b0":"#### \u041e\u0431\u0437\u043e\u0440 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u0447\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 ","520a2888":"### \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e","ed4f19de":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 Price: __Price | Social_1 | Social_2 | Social_3__","cae2da8d":"### \u0413\u0440\u0435\u0431\u043d\u0435\u0432\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f","efa32940":"**\u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 (data_train) \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u044b:** \n1. \u0414\u0430\u043d\u043d\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u0444\u043e\u0440\u043c\u0443 10000 \u0441\u0442\u0440\u043e\u043a \u0438 20 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \n1. \u0418\u043c\u0435\u044e\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0433\u0440\u0443\u043f\u043f  \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\n    * *\u041d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b* \n      - id \n    * *\u041d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430* \n        1. DistrictId \n    * *\u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b*\n        1. Rooms\t\n        1. Square\t\n        1. LifeSquare\t\n        1. KitchenSquare\t\n        1. Floor\t\n        1. HouseFloor\t\n        1. HouseYear\n    * *\u042d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438\n        1. Ecology_1\t\n        1. Ecology_2\t\n        1. Ecology_3         \n    * *\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438* \n        1. Social_1\t\n        1. Social_2\t\n        1. Social_3\n    * *\u0417\u0434\u0440\u0430\u0432\u043e\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435*\n        1. Healthcare_1\t\n        1. Helthcare_2\n    * *\u041c\u0430\u0433\u0430\u0437\u0438\u043d\u044b*\n        1. Shops_1\t\n        1. Shops_2\n    * *\u0426\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b* \n         1. Price\n1. \u0422\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \n    * *\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435*\n        1. Ecology_2\t\n        1. Ecology_3\n        1. Shops_2\n    * *\u0412\u0440\u0435\u043c\u044f*\n        1. HouseYear\n    * *\u041d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0435* \n        1. \u0412\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\n1. \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \n    * \u0412\u0441\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e 10000 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043a\u0440\u043e\u043c\u0435 \u0434\u0432\u0443\u0445: LifeSquare = 7887, Healthcare_1 = 5202\n\n\n\n\n\n\n\n","3b65f899":"### SGD Regressor","af93d077":"### Gradient Boosting Regressor","675bb6af":"\u041e\u0431\u0437\u043e\u0440 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","b981b6d5":"### \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b\n\n\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0446\u0435\u043d\u044b \u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435. ","b3fa7ce6":"\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","901e9fdb":"## \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u0437\u043e\u0440 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 ","e5960634":"### \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441","c62a4f3d":"#### \u041e\u0431\u0437\u043e\u0440 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430","1eb20498":"### \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432"}}