{"cell_type":{"1a7643fc":"code","89643f90":"code","bcc9eeed":"code","4a5cf031":"code","b9b29e0d":"code","6ef56545":"code","5c4c6593":"code","7a3a0c54":"code","2d3019ec":"code","650ccc61":"code","6a9b3cc7":"code","ebe54a1d":"code","ef2534ff":"code","c27b921e":"code","b88b481b":"code","46abbaa3":"code","33475946":"code","22b82bd3":"code","4567f59d":"code","2d0f1482":"code","339fc1f1":"code","6d234e12":"code","deb96206":"code","dd95604f":"code","2a55d745":"code","98b56802":"code","6d3fd84e":"code","308a92e6":"code","f1e67610":"code","834ed1ec":"code","99865913":"code","138a5bfc":"code","2f43fd10":"code","37e1c153":"code","51ffb687":"code","cc18b754":"markdown","d1f26ca9":"markdown","6ddd2f2f":"markdown","b973aa46":"markdown","3a072f44":"markdown","16f27e0e":"markdown","7b6c88f7":"markdown","96049be4":"markdown"},"source":{"1a7643fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","89643f90":"from pathlib import Path\nimport fastai\nfrom fastai.vision import *\nfrom fastai.callbacks import *\nfrom fastai.vision.gan import *\nfrom distutils.dir_util import copy_tree","bcc9eeed":"input_path = Path(\"\/kaggle\/input\/dance-images\")\npath_cl= input_path\/\"clear\"\npath_bl= input_path\/\"blurry\"","4a5cf031":"path = Path(\"\/tmp\/model\")\nmodel_path_cl = path\/\"clear\"\nmodel_path_bl = path\/\"blurry\"\nmodel_path_cl.mkdir(parents=True, exist_ok=True)\nmodel_path_bl.mkdir(parents=True, exist_ok=True)\ncopy_tree(str(path_cl), str(path\/\"clear\"))\ncopy_tree(str(path_bl), str(path\/\"blurry\"))","b9b29e0d":"bs,size=4, 256\narch = models.resnet34\nsrc = ImageImageList.from_folder(model_path_bl).split_by_rand_pct(0.1, seed=42)","6ef56545":"def get_data(bs,size):\n    data = (src.label_from_func(lambda x: model_path_cl\/x.name)\n           .transform(get_transforms(max_zoom=0), size=size, tfm_y=True)\n           .databunch(bs=bs, num_workers=0).normalize(imagenet_stats, do_y=True))\n\n    #data.c = 3\n    return data","5c4c6593":"data_gen = get_data(bs,size)\ndata_gen.show_batch()","7a3a0c54":"y_range = (-3.,3.)\nloss_gen = MSELossFlat()","2d3019ec":"learn_gen = unet_learner(data_gen, arch, blur=True, norm_type=NormType.Weight,\n                         self_attention=True, y_range=y_range, loss_func=loss_gen)","650ccc61":"learn_gen.lr_find()\nlearn_gen.recorder.plot()","6a9b3cc7":"lr = 1e-2\nlearn_gen.fit_one_cycle(4)","ebe54a1d":"learn_gen.unfreeze()\nlearn_gen.fit_one_cycle(5, slice(1e-4,lr))\nlearn_gen.show_results()","ef2534ff":"learn_gen.save('gen-pre')\ntorch.cuda.empty_cache()","c27b921e":"learn_gen.load('gen-pre');\nname_gen = 'image_gen'\npath_gen = path\/name_gen\npath_gen.mkdir(exist_ok=True)","b88b481b":"def save_preds(dl):\n    i=0\n    names = dl.dataset.items\n    \n    for b in dl:\n        preds = learn_gen.pred_batch(batch=b, reconstruct=True)\n        for o in preds:\n            o.save(path_gen\/names[i].name)\n            i += 1","46abbaa3":"save_preds(data_gen.fix_dl)","33475946":"learn_gen=None\ntorch.cuda.empty_cache()\ngc.collect()","22b82bd3":"def get_crit_data(classes, bs, size):\n    src = ImageList.from_folder(path, include=classes).split_by_rand_pct(0.1, seed=42)\n    ll = src.label_from_folder(classes=classes)\n    data = (ll.transform(get_transforms(max_zoom=2.), size=size)\n           .databunch(bs=bs).normalize(imagenet_stats))\n    #data.c = 3\n    return data","4567f59d":"data_crit = get_crit_data([name_gen, 'clear'], bs=bs, size=size)\ndata_crit.show_batch()","2d0f1482":"loss_critic = AdaptiveLoss(nn.BCEWithLogitsLoss())\nlearn_critic = Learner(data_crit, gan_critic(), metrics=accuracy_thresh_expand, loss_func=loss_critic)","339fc1f1":"learn_critic.lr_find()\nlearn_critic.recorder.plot()","6d234e12":"lr = 1e-4\nlearn_critic.fit_one_cycle(10, lr)","deb96206":"learn_critic.save('critic-pre')","dd95604f":"learn_crit=None\ntorch.cuda.empty_cache()\ngc.collect()","2a55d745":"data_crit = get_crit_data(['blurry', 'clear'], bs=bs, size=size)\nlearn_crit = Learner(data_crit, gan_critic(), metrics=None, loss_func=loss_critic).load('critic-pre')\nlearn_gen = unet_learner(data_gen, arch, blur=True, norm_type=NormType.Weight,\n                         self_attention=True, y_range=y_range, loss_func=loss_gen).load('gen-pre')","98b56802":"switcher = partial(AdaptiveGANSwitcher, critic_thresh=0.65)\nlearn = GANLearner.from_learners(learn_gen, learn_crit, weights_gen=(1.,50.), show_img=True, switcher=switcher,\n                                 opt_func=partial(optim.Adam, betas=(0.,0.99)))\nlearn.callback_fns.append(partial(GANDiscriminativeLR, mult_lr=5.))","6d3fd84e":"learn.lr_find()\nlearn.recorder.plot()","308a92e6":"lr = 1e-4\nlearn.fit(30, lr)","f1e67610":"bs,size = 1, 512\ndata = get_data(bs, size)\nlearn.data = data\ngc.collect()","834ed1ec":"learn.fit(10, lr\/2)","99865913":"learn.show_results()","138a5bfc":"learn.save('gan')","2f43fd10":"m = learn.model.eval();","37e1c153":"fn = \"\/kaggle\/input\/non-artificial-blurred\/DSCN0140.JPG\"\nx = open_image(fn);\nxb,_ = data.one_item(x)\nxb_im = Image(data.denorm(xb)[0])\nxb = xb.cuda()\nxb_im","51ffb687":"pred = m(xb)\npred_im = Image(data.denorm(pred.detach())[0])\npred_im","cc18b754":"Fin","d1f26ca9":"Pre-train generator","6ddd2f2f":"Create GAN and train","b973aa46":"Save generated images","3a072f44":"Pretrain critic","16f27e0e":"Train more with bigger size images","7b6c88f7":"Test with non-artificially blurred images","96049be4":"Get Data from dataset and create databunch"}}