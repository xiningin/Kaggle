{"cell_type":{"a7b3d9b4":"code","f1eee4a8":"code","ecfca9bd":"code","afbc4698":"code","6d33fd3b":"code","eac377bf":"code","132eb33f":"markdown"},"source":{"a7b3d9b4":"import numpy as np\nimport pandas as pd\nfrom sklearn import datasets\nimport copy\nfrom collections import Counter\nfrom sklearn.model_selection import train_test_split","f1eee4a8":"iris = datasets.load_iris()\nX,y = iris.data, iris.target","ecfca9bd":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1234)","afbc4698":"# calculate the distance:\ndef Eucliden_formula(train,test):\n    Val_sum = 0\n    for i in range(0,train.shape[0]):\n        Square = np.square(train[i]-test[i])\n        Val_sum = Val_sum + Square\n    return np.sqrt(Val_sum)\n\n# find the k- nearest value:\ndef find_k_nearest(list_value, y_value,k = 3):\n    list_value_cp = list_value.copy() # this list is used for storing the index:\n    \n    # sort the value from low to high\n    list_value.sort()\n    # take the k nearest value:\n    final_LV = list_value[0:k]\n    #find the index of the nearest value and using this index for to find the value from y:\n    list_label = []\n    for i in range(0,len(final_LV)):\n        list_label.append(y_value[list_value_cp.index(final_LV[i])])  # append label of y from list_value\n    \n    occurence_count = Counter(list_label) #Using counter to find out the most common\n    return occurence_count.most_common(1)[0][0] # only return the most label\n\n# test:\ndef KNN_test(X_train,y_train,X_test,k=3):\n    if np.ndim(X_test)==1:\n        list_value = []\n        for i in X_train:\n            value = Eucliden_formula(i,X_test)\n            list_value.append(value)\n        return find_k_nearest(list_value, y_train,k = k)\n    else:\n        list_label =[]\n        for i in X_test:\n            list_value =[]\n            for j in X_train:\n                value = Eucliden_formula(j,i)\n                list_value.append(value)\n            label = find_k_nearest(list_value, y_train,k = k)\n            list_label.append(label)\n        return np.array(list_label)","6d33fd3b":"KNN_test(X_train,y_train,X_test,k=5)","eac377bf":"y_test","132eb33f":"## Import the dataset and package:"}}