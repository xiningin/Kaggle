{"cell_type":{"70804811":"code","9a84a30f":"code","b5609158":"code","599c2ade":"code","f80b35a2":"code","69852938":"code","aa8e188b":"code","1bcd69be":"code","6f101ee5":"code","f8e8076a":"code","3216afd4":"markdown","1601abd4":"markdown","e91c0da0":"markdown"},"source":{"70804811":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n\n#sklearn imports\nfrom sklearn import (datasets, metrics, model_selection as skms, naive_bayes, neighbors)\n\n#warning off\nimport warnings\n\nwarnings.filterwarnings('ignore')\nnp.random.seed(42)","9a84a30f":"# (repeated some of the imports)\nfrom sklearn import (datasets, \n                     metrics, \n                     model_selection as skms,\n                     naive_bayes, \n                     neighbors)\n\n# data\niris = datasets.load_iris()\n\n# train-test split\n(iris_train_ftrs, iris_test_ftrs, \n iris_train_tgt, iris_test_tgt) = skms.train_test_split(iris.data,\n                                                        iris.target, \n                                                        test_size=.25,\n                                                        random_state=42) \n# define some models\nmodels = {'3-NN': neighbors.KNeighborsClassifier(n_neighbors=3),\n          '5-NN': neighbors.KNeighborsClassifier(n_neighbors=5),\n          'NB'  : naive_bayes.GaussianNB()}\n\n# in turn, fit-predict with those models\nfor name, model in models.items():\n    fit = model.fit(iris_train_ftrs, \n                    iris_train_tgt)\n    predictions = fit.predict(iris_test_ftrs)\n    \n    score = metrics.accuracy_score(iris_test_tgt, predictions)\n    print(\"{:>4s}: {:0.2f}\".format(name,score))","b5609158":"%timeit -r datasets.load_iris() ","599c2ade":"%%timeit -r1 -n1\n(iris_train_ftrs, iris_test_ftrs, \n iris_train_tgt,  iris_test_tgt) = skms.train_test_split(iris.data,\n                                                         iris.target, \n                                                         test_size=.25)","f80b35a2":"%%timeit -r1\n\nnb    = naive_bayes.GaussianNB()\nfit   = nb.fit(iris_train_ftrs, iris_train_tgt)\npreds = fit.predict(iris_test_ftrs)\n\nmetrics.accuracy_score(iris_test_tgt, preds)","69852938":"%%timeit -r1\n\nknn    = neighbors.KNeighborsClassifier(n_neighbors=5)\nfit   = knn.fit(iris_train_ftrs, iris_train_tgt)\npreds = fit.predict(iris_test_ftrs)\n\nmetrics.accuracy_score(iris_test_tgt, preds)","aa8e188b":"%%timeit -r1\n\nknn    = neighbors.KNeighborsClassifier(n_neighbors=3)\nfit   = knn.fit(iris_train_ftrs, iris_train_tgt)\npreds = fit.predict(iris_test_ftrs)\n\nmetrics.accuracy_score(iris_test_tgt, preds)","1bcd69be":"%load_ext memory_profiler","6f101ee5":"%%memit \nnb  = naive_bayes.GaussianNB()\nfit = nb.fit(iris_train_ftrs, iris_train_tgt)\npreds = fit.predict(iris_test_ftrs)","f8e8076a":"%%memit \nknn = neighbors.KNeighborsClassifier()\nfit = knn.fit(iris_train_ftrs, iris_train_tgt)\npreds = knn.predict(iris_test_ftrs)","3216afd4":"# Standalone Learning evaluations","1601abd4":"# Measuring time and memory","e91c0da0":"# Memory Usage Analysis"}}