{"cell_type":{"3ecc0d40":"code","9c649b4c":"code","7a8b5c04":"code","c7a44149":"code","af59db04":"code","8f061187":"code","d239327d":"code","e3973ae3":"code","d9b036be":"code","dd152d5b":"code","62dd95cd":"code","a0a3746b":"code","a56b0fa1":"code","94ee363e":"code","a2118b54":"code","aa96cae3":"code","dd870f22":"code","0fae9f04":"code","3a3a4fb3":"code","ba21bb3b":"code","1f9c58a7":"code","ce6b852b":"code","275a14e2":"code","87349fea":"code","6bc358ad":"code","0d5702cf":"code","500f5290":"code","29db67c8":"code","d5a482c5":"code","de40ee4b":"code","48408889":"code","ed60bec9":"code","b2ce0c51":"code","416485b7":"code","2d228370":"code","04553606":"code","1f46d53d":"code","328b6267":"code","bea3dd31":"code","1662d245":"code","ebe79ca6":"code","1cc740f6":"code","fb4202d3":"code","a3b1d512":"code","8b1720dc":"code","a04f30b5":"code","c16d729e":"code","3b4cd98b":"code","eb77fa37":"code","be773349":"code","07e7ad6b":"code","e49b3373":"code","2a750d3d":"code","9dd980f3":"code","1f8e369d":"code","ff31cdba":"code","4727d162":"markdown","d1b6c8c0":"markdown","70a76931":"markdown","410f911d":"markdown","5d832f5e":"markdown","f786e9ea":"markdown","947b5688":"markdown","ad02fd63":"markdown","02499982":"markdown","d895e761":"markdown","15f5bc81":"markdown"},"source":{"3ecc0d40":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pandas import plotting\nfrom scipy import stats\nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom scipy import stats\n\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.set_context('poster')\n\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, confusion_matrix, classification_report\nfrom sklearn.gaussian_process import GaussianProcessClassifier\n\nplt.style.use(\"ggplot\")\nsns.set(style=\"whitegrid\", color_codes = True, rc={'figure.figsize':(12,12)})\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9c649b4c":"players = pd.read_csv('..\/input\/nba-players-stats\/Players.csv')\nplayers = players[~players.Player.isnull()]\nplayers = players.rename(columns = {'Unnamed: 0':'id'})\nprint(players.shape)\nplayers.head()","7a8b5c04":"players.describe()","c7a44149":"player_data = pd.read_csv('..\/input\/nba-players-stats\/player_data.csv')\nplayer_data.rename(columns={'name': 'Player'}, inplace=True)\nplayer_data.fillna('No College')\nprint(player_data.shape)\nplayer_data.head()","af59db04":"player_data.describe()","8f061187":"season_stats = pd.read_csv('..\/input\/nba-players-stats\/Seasons_Stats.csv')\nseason_stats.drop(columns = ['Unnamed: 0', 'blanl', 'blank2'], axis = 'column', inplace = True)\n\nprint(season_stats.shape)\nseason_stats.head()","d239327d":"# Syncronizing Age and IDs amongst all 3 \nseason_stats['born'] = season_stats['Year'] - season_stats['Age'] - 1\n\nseason_stats = season_stats[~season_stats.Player.isnull()]\nplayers = players[~players.born.isnull()]\nplayer_data = player_data[~player_data.birth_date.isnull()]\n\nplayers_born = players[['Player', 'born']]\nfor i, row in player_data.iterrows():\n    player_data.loc[i, 'born'] = float(row['birth_date'].split(',')[1])\n    \nplayer_data.head()\n\n\nplayer_data_born = player_data[['Player', 'born']]\nplayer_data_born.columns = ['Player', 'born']\nborn = pd.concat([players_born, player_data_born])\nborn = born.drop_duplicates()\nborn = born.reset_index()\nborn = born.drop('index', axis=1)\nborn['id'] = born.index","e3973ae3":"season_stats.describe()","d9b036be":"sns.distplot(season_stats['PTS'])","dd152d5b":"all_nba_team = pd.read_csv('..\/input\/allnbateam\/all_nba_team.csv')\nall_nba_team.head()","62dd95cd":"print(all_nba_team.shape)\nall_nba_team.describe()","a0a3746b":"# Adding roty Players\nroty_players = {\n    'Maurice Stokes*': 1956,\n    'Tom Heinsohn': 1957,\n    'Wood Sauldsberry': 1958,\n    'Elgin Baylor': 1959,\n    'Wilt Chamberlain': 1960,\n    'Oscar Robertson': 1961,\n    'Walt Bellamy': 1962,\n    'Terry Dischinger': 1963,\n    'Jerry Lucas': 1964,\n    'Willis Reed': 1965,\n    'Rick Barry': 1966,\n    'Dave Bing': 1967,\n    'Earl Monroe': 1968,\n    'Wes Unseld': 1969,\n    'Lew Alcindor': 1970,\n    'Geof Petrie': 1971,\n    'Sidney Wicks': 1972,\n    'Bob McAdoo': 1973,\n    'Ernie DiGregorio': 1974,\n    'Jamaal Wilkes': 1975,\n    'Alvan Adams': 1976,\n    'Adrian Dantley': 1977,\n    'Walter Davis': 1978,\n    'Phil Ford': 1979,\n    'Larry Bird': 1980,\n    'Darrell Griffith': 1981,\n    'Buck Williams': 1982,\n    'Terry Cummings': 1983,\n    'Ralph Sampson': 1984,\n    'Michael Jordan': 1985,\n    'Patrick Ewing': 1986,\n    'Chuck Person': 1987,\n    'Mark Jackson': 1988,\n    'Mitch Richmond': 1989,\n    'David Robinson': 1990,\n    'Derrick Coleman': 1991,\n    'Larry Johnson': 1992,\n    'Shaquille O\\' Neal': 1993,\n    'Chris Webber': 1994,\n    'Jason Kidd': 1995,\n    'Damon Stoudamire': 1996,\n    'Allen Iverson': 1997,\n    'Tim Duncan': 1998,\n    'Vince Carter': 1999,\n    'Steve Francis': 2000,\n    'Mike Miller': 2001,\n    'Pau Gasol': 2002,\n    'Amar\\'e Stoudemire': 2003,\n    'LeBron James': 2004,\n    'Emeka Okafor': 2005,\n    'Chris Paul': 2006,\n    'Brandon Roy': 2007,\n    'Kevin Durant': 2008,\n    'Derrick Rose': 2009,\n    'Tyreke Evans': 2010,\n    'Blake Griffin': 2011,\n    'Kyrie Irving': 2012,\n    'Damian Lillard': 2013,\n    'Michael Carter-Williams': 2014,\n    'Andrew Wiggins': 2015,\n    'Karl-Anthony Towns': 2016,\n    'Malcolm Brogdon': 2017,\n    'Ben Simmons': 2018,\n    'Luka Doncic': 2019\n}","a56b0fa1":"# Adding MVP Players\nmvp_players = {\n    'Bob Pettit*': [1956, 1959],\n    'Bob Cousy*': [1957],\n    'Bill Russell*': [1958, 1961, 1962, 1963, 1965],\n    'Wilt Chamberlain*': [1960, 1966, 1967, 1968],\n    'Oscar Robertson*': [1964],\n    'Wes Unseld*': [1969],\n    'Willis Reed*': [1970],\n    'Kareem Abdul-Jabbar*': [1971, 1972, 1974, 1976, 1977, 1980],\n    'Dave Cowens*': [1973],\n    'Bob McAdoo*': [1975],\n    'Bill Walton*': [1978],\n    'Moses Malone*': [1979, 1982, 1983],\n    'Julius Erving*': [1981],\n    'Larry Bird*': [1984, 1985, 1986],\n    'Magic Johnson*': [1987, 1989, 1990],\n    'Michael Jordan*': [1988, 1991, 1992, 1996, 1998],\n    'Charles Barkley*': [1993],\n    'Hakeem Olajuwon*': [1994],\n    'David Robinson*': [1995],\n    'Karl Malone*': [1997, 1999],\n    'Shaquille O\\'Neal*': [2000],\n    'Allen Iverson*': [2001],\n    'Tim Duncan': [2002, 2003],\n    'Kevin Garnett': [2004],\n    'Steve Nash': [2005, 2006],\n    'Dirk Nowitzki': [2007],\n    'Kobe Bryant': [2008],\n    'LeBron James': [2009, 2010, 2012, 2013],\n    'Derrick Rose': [2011],\n    'Kevin Durant': [2014],\n    'Stephen Curry': [2015, 2016],\n    'Russell Westbrook': [2017],\n    'James Harden': [2018]\n}","94ee363e":"teams_wins = {'ATL': {2000:28, 2001:25, 2002:33, 2003:35, 2004:28, 2005:13, 2006:26, 2007:30, 2008:37, 2009:47, 2010:53, 2011:44, 2012:40, 2013:44, 2014:38, 2015:60, 2016:48, 2017:43},\n             'BOS': {2000:35, 2001:36, 2002:49, 2003:44, 2004:36, 2005:45, 2006:33, 2007:24, 2008:66, 2009:62, 2010:50, 2011:56, 2012:39, 2013:41, 2014:25, 2015:40, 2016:48, 2017:53},\n             'BRK': {2013:49, 2014:44, 2015:38, 2016:21, 2017:20},\n              'CHA': {2005:18, 2006:26, 2007:33, 2008:32, 2009:35, 2010:44, 2011:34, 2012:7, 2013:21, 2014:43},\n             'NJN': {2000:31, 2001:26, 2002:52, 2003:49, 2004:47, 2005:42, 2006:49, 2007:41, 2008:34, 2009:34, 2010:12, 2011:24, 2012:22},\n             'CHH': {2000:49, 2001:46, 2002:44},\n             'CHI': {2000:17, 2001:15, 2002:21, 2003:30, 2004:23, 2005:47, 2006:41, 2007:49, 2008:33, 2009:41, 2010:41, 2011:62, 2012:50, 2013:45, 2014:48, 2015:50, 2016:42, 2017:41},\n             'CHO': {2015:33, 2016:48, 2017:36},\n             'CLE': {2000:32, 2001:30, 2002:29, 2003:17, 2004:35, 2005:42, 2006:50, 2007:50, 2008:45, 2009:66, 2010:61, 2011:19, 2012:21, 2013:24, 2014:33, 2015:53, 2016:57, 2017:51},\n             'DAL': {2000:40, 2001:53, 2002:57, 2003:60, 2004:52, 2005:58, 2006:60, 2007:67, 2008:51, 2009:50, 2010:55, 2011:57, 2012:36, 2013:41, 2014:49, 2015:50, 2016:42, 2017:33},\n             'DEN': {2000:35, 2001:40, 2002:27, 2003:17, 2004:43, 2005:49, 2006:44, 2007:45, 2008:50, 2009:54, 2010:53, 2011:50, 2012:38, 2013:57, 2014:36, 2015:30, 2016:33, 2017:40},\n             'DET': {2000:42, 2001:32, 2002:50, 2003:50, 2004:54, 2005:54, 2006:64, 2007:53, 2008:59, 2009:39, 2010:27, 2011:30, 2012:25, 2013:29, 2014:29, 2015:32, 2016:44, 2017:37},\n             'GSW': {2000:19, 2001:17, 2002:21, 2003:38, 2004:37, 2005:34, 2006:34, 2007:42, 2008:48, 2009:29, 2010:26, 2011:36, 2012:23, 2013:47, 2014:51, 2015:67, 2016:73, 2017:67},\n             'HOU': {2000:34, 2001:45, 2002:28, 2003:43, 2004:45, 2005:51, 2006:34, 2007:52, 2008:55, 2009:53, 2010:42, 2011:43, 2012:34, 2013:45, 2014:54, 2015:56, 2016:41, 2017:55},\n             'IND': {2000:56, 2001:41, 2002:42, 2003:48, 2004:61, 2005:44, 2006:41, 2007:35, 2008:36, 2009:36, 2010:32, 2011:37, 2012:42, 2013:49, 2014:56, 2015:38, 2016:45, 2017:42},\n             'LAC': {2000:15, 2001:31, 2002:39, 2003:27, 2004:28, 2005:37, 2006:47, 2007:40, 2008:23, 2009:19, 2010:29, 2011:32, 2012:40, 2013:56, 2014:57, 2015:56, 2016:53, 2017:51},\n             'LAL': {2000:67, 2001:56, 2002:58, 2003:50, 2004:56, 2005:34, 2006:45, 2007:42, 2008:57, 2009:65, 2010:57, 2011:57, 2012:41, 2013:45, 2014:27, 2015:21, 2016:17, 2017:26},\n             'MEM': {2002:23, 2003:28, 2004:50, 2005:45, 2006:49, 2007:22, 2008:22, 2009:24, 2010:40, 2011:46, 2012:41, 2013:56, 2014:50, 2015:55, 2016:42, 2017:43},\n             'VAN': {2000:22, 2001:23},\n              'MIA': {2000:52, 2001:50, 2002:36, 2003:25, 2004:42, 2005:59, 2006:52, 2007:44, 2008:15, 2009:43, 2010:47, 2011:58, 2012:46, 2013:66, 2014:54, 2015:37, 2016:48, 2017:41},\n             'MIL': {2000:42, 2001:52, 2002:41, 2003:42, 2004:41, 2005:30, 2006:40, 2007:28, 2008:26, 2009:34, 2010:46, 2011:35, 2012:31, 2013:38, 2014:15, 2015:41, 2016:33, 2017:42},\n             'MIN': {2000:50, 2001:47, 2002:50, 2003:51, 2004:58, 2005:44, 2006:33, 2007:32, 2008:22, 2009:24, 2010:15, 2011:17, 2012:26, 2013:31, 2014:40, 2015:16, 2016:29, 2017:31},\n             'NOH': {2003:47, 2004:41, 2005:18, 2008:56, 2009:49, 2010:37, 2011:46, 2012:21, 2013:27},\n             'NOK': {2006:38, 2007:39},\n             'NOP': {2014:34, 2015:45, 2016:30, 2017:34},\n             'NYK': {2000:50, 2001:48, 2002:30, 2003:37, 2004:39, 2005:33, 2006:23, 2007:33, 2008:23, 2009:32, 2010:29, 2011:42, 2012:36, 2013:54, 2014:37, 2015:17, 2016:32, 2017:31},\n             'OKC': {2009:23, 2010:50, 2011:55, 2012:47, 2013:60, 2014:59, 2015:45, 2016:55, 2017:47},\n             'ORL': {2000:41, 2001:43, 2002:44, 2003:42, 2004:21, 2005:36, 2006:36, 2007:40, 2008:52, 2009:59, 2010:59, 2011:52, 2012:37, 2013:20, 2014:23, 2015:25, 2016:35, 2017:29},\n             'PHI': {2000:49, 2001:56, 2002:43, 2003:48, 2004:33, 2005:43, 2006:38, 2007:35, 2008:40, 2009:41, 2010:27, 2011:41, 2012:35, 2013:34, 2014:19, 2015:18, 2016:10, 2017:28},\n             'PHO': {2000:53, 2001:51, 2002:36, 2003:44, 2004:29, 2005:62, 2006:54, 2007:61, 2008:55, 2009:46, 2010:54, 2011:40, 2012:33, 2013:25, 2014:48, 2015:39, 2016:23, 2017:24},\n             'POR': {2000:59, 2001:50, 2002:49, 2003:50, 2004:41, 2005:27, 2006:21, 2007:32, 2008:41, 2009:54, 2010:50, 2011:48, 2012:28, 2013:33, 2014:54, 2015:51, 2016:44, 2017:41},\n             'SAC': {2000:44, 2001:55, 2002:61, 2003:59, 2004:55, 2005:50, 2006:44, 2007:33, 2008:38, 2009:17, 2010:25, 2011:24, 2012:22, 2013:28, 2014:28, 2015:29, 2016:33, 2017:32},\n             'SAS': {2000:53, 2001:58, 2002:58, 2003:60, 2004:57, 2005:59, 2006:63, 2007:58, 2008:56, 2009:54, 2010:50, 2011:61, 2012:50, 2013:58, 2014:62, 2015:55, 2016:67, 2017:61},\n             'SEA': {2000:45, 2001:44, 2002:45, 2003:40, 2004:37, 2005:52, 2006:35, 2007:31, 2008:20},\n             'TOR': {2000:45, 2001:47, 2002:42, 2003:24, 2004:33, 2005:33, 2006:27, 2007:47, 2008:41, 2009:33, 2010:40, 2011:22, 2012:23, 2013:34, 2014:48, 2015:49, 2016:56, 2017:51},\n             'UTA': {2000:55, 2001:53, 2002:44, 2003:47, 2004:42, 2005:26, 2006:41, 2007:51, 2008:54, 2009:48, 2010:53, 2011:39, 2012:36, 2013:43, 2014:25, 2015:38, 2016:40, 2017:51},\n             'WAS': {2000:29, 2001:19, 2002:37, 2003:37, 2004:25, 2005:45, 2006:42, 2007:41, 2008:43, 2009:19, 2010:26, 2011:23, 2012:20, 2013:29, 2014:44, 2015:46, 2016:41, 2017:49}}","a2118b54":"data = season_stats.merge(born, on=['Player', 'born'])\ndata = data[(data.MP > 800) & (data.G > 40) & (data.Year > 2000)]\ndata = data[data.Tm != 'TOT']\ndata.shape\ndata.head()","aa96cae3":"data['PPG'] = data['PTS'] \/ data['G']\ndata['APG'] = data['AST'] \/ data['G']\ndata['RPG'] = data['TRB'] \/ data['G']\ndata['SPG'] = data['STL'] \/ data['G']\ndata['BPG'] = data['BLK'] \/ data['G']\ndata['FPG'] = data['PF'] \/ data['G']\ndata['TOVPG'] = data['TOV'] \/ data['G']","dd870f22":"# Adding the MVPs to our data column\ndata['MVP'] = 0\nfor i, row in data.iterrows():  \n    for k, v in mvp_players.items():\n        for year in v:\n            if row['Player'] != k:\n                break\n            elif(row['Year'] == year) & (row['Player'] == k):\n                data.loc[i, 'MVP'] = 1\n                break","0fae9f04":"sns.distplot(data['PPG'], kde=False, bins=30)","3a3a4fb3":"sns.distplot(data['APG'], kde=False, bins=30)","ba21bb3b":"sns.distplot(data['RPG'], kde=False, bins=30)","1f9c58a7":"sns.distplot(data['SPG'], kde=False, bins=30)","ce6b852b":"sns.distplot(data['BPG'], kde=False, bins=30)","275a14e2":"sns.distplot(data['TOVPG'], kde=False, bins=30)","87349fea":"sns.jointplot(x='RPG',y='PPG',data=data)","6bc358ad":"sns.barplot(x='Tm', y='PPG', data=data)\nplt.xticks(rotation=90)\nplt.show()","0d5702cf":"sns.barplot(x='Pos', y='PPG', data=data, estimator=np.sum)","500f5290":"sns.barplot(x='Pos', y='APG', data=data, estimator=np.sum)","29db67c8":"sns.barplot(x='Pos', y='RPG', data=data)","d5a482c5":"sns.barplot(x='Pos', y='BPG', data=data)","de40ee4b":"sns.barplot(x='Pos', y='SPG', data=data)","48408889":"sns.countplot(x='Tm',data=data)\nplt.xticks(rotation=90)\nplt.show()","ed60bec9":"sns.boxplot(x='Tm',y='PPG',data=data)\nplt.xticks(rotation=90)\nplt.show()","b2ce0c51":"sns.violinplot(x='Tm', y='RPG', data=data)\nplt.xticks(rotation=90)\nplt.show()","416485b7":"sns.stripplot(x='Tm',y='APG',data=data,jitter=True)\nplt.xticks(rotation=90)\nplt.show()","2d228370":"sns.swarmplot(x='Tm',y='APG',data=data)\nplt.xticks(rotation=90)\nplt.show()","04553606":"sns.factorplot(x='Tm',y='PPG',data=data,kind='bar')\nplt.xticks(rotation=90)\nplt.show()","1f46d53d":"stats_cor = data.corr()\nstats_cor","328b6267":"sns.heatmap(stats_cor, cmap='coolwarm',linewidth=1,linecolor='white')","bea3dd31":"sns.clustermap(stats_cor, cmap='magma',linewidth=1,linecolor='white', standard_scale=1)","1662d245":"g = sns.FacetGrid(data, col=\"Pos\", row=\"Year\")\ng.map(sns.distplot, \"PPG\")","ebe79ca6":"sns.lmplot(x='RPG', y='BPG',data=data, col='Pos')","1cc740f6":"sns.lmplot(x='PPG', y='APG',data=data, col='Pos', palette='')","fb4202d3":"sns.lmplot(x='MP', y='GS',data=data, col='Pos')","a3b1d512":"sns.lmplot(x='DRB', y='ORB',data=data, col='Pos')","8b1720dc":"sns.lmplot(x='3PA', y='2P',data=data, col='Pos')","a04f30b5":"sns.lmplot(x='APG', y='SPG',data=data, col='Pos')","c16d729e":"sns.lmplot(x='TOVPG', y='APG',data=data, col='Pos')","3b4cd98b":"X = data[['Year', 'PER', 'WS', 'BPM', 'VORP', 'PPG', 'APG', 'RPG', 'SPG', 'BPG', 'FPG', 'TOVPG']]\ny = data['MVP'].copy()\n\nX.fillna(0, inplace=True)\ny.fillna(0, inplace=True)","eb77fa37":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=25)","be773349":"# Model\nmodel = LogisticRegression(max_iter = 50000)\nmodel.fit(X_train, y_train)\n\n# Accuracy\ny_pred = model.predict(X_test)\naccuracy = model.score(X_test, y_test)\n\n# Graph\nplt.plot(X_train, model.predict(X_train), color='green')\nplt.show()\nprint(\"Logistic\", \":\", round(accuracy * 100, 2), \"%\")","07e7ad6b":"print(confusion_matrix(y_test,y_pred))","e49b3373":"print(classification_report(y_test,y_pred))","2a750d3d":"data_mvp = data[['id', 'Player', 'Year', 'PER', 'WS', 'BPM', 'VORP', 'PPG', 'APG', 'RPG', 'SPG', 'BPG', 'FPG', 'TOVPG', 'MVP']]\ndata_mvp = data_mvp.fillna(0)\ndata_mvp.head()","9dd980f3":"from sklearn.ensemble import RandomForestClassifier\n\nyears = range(2000, 2018)\nmvp_years = dict()\nresults_mvp = pd.DataFrame(columns = ['id', 'Year', 'MVP'])\n\nfor y in years :\n    # train : all seasons from 2000 to year\n    # test : year\n    train = data_mvp[data_mvp.Year < y]\n    test = data_mvp[data_mvp.Year == y]\n    X_train = train.drop(['id', 'Player', 'Year', 'MVP'], axis=1)\n    y_train = train['MVP']\n    X_test = test.drop(['id', 'Player', 'Year', 'MVP'], axis=1)\n    \n    # Random Forest\n\n    random_forest = RandomForestClassifier(n_estimators=10)\n    random_forest.fit(X_train, y_train)\n    y_pred = random_forest.predict(X_test)\n    random_forest.score(X_train, y_train)\n    acc_random_forest = round(random_forest.score(X_train, y_train) * 100, 2)\n    \n    pred_proba = random_forest.predict_proba(X_test)\n    \n    y_pred_proba = []\n    for i in enumerate(pred_proba):\n        y_pred_proba.append(i[1][1])\n    y_pred_proba = np.asarray(y_pred_proba)\n    \n    mvp_years = pd.DataFrame({\n        \"id\": test[\"id\"],\n        \"Year\": y,\n        \"MVP\": y_pred_proba\n        })\n    \n    results_mvp = pd.concat([results_mvp, mvp_years])\n\nresults_mvp['id'] = results_mvp['id'].astype('int')\ncareer_player = data[['id', 'Player']]\nresults_mvp = results_mvp.merge(career_player, on='id')\n\nresults_mvp = results_mvp.drop_duplicates()\nresults_mvp = results_mvp.sort_values(by='MVP', ascending=False)\nresults_mvp.head(20)","1f8e369d":"feature_importances = pd.DataFrame(random_forest.feature_importances_,\n                                   index = X_train.columns,\n                                    columns=['importance']).sort_values('importance', ascending=False)\nfeature_importances","ff31cdba":"top_mvp = results_mvp.sort_values('MVP', ascending=False).groupby('Year').head(1)\ntop_mvp = top_mvp.sort_values('Year', ascending=False)\ntop_mvp = top_mvp[['Year', 'Player']]\ntop_mvp","4727d162":"## Correlation","d1b6c8c0":"## Player Analysis","70a76931":"## Data Cleanup\n\nSince we're only going to be focusing on All-NBA, Rookie of the Year and League MVP,   \nwe will filter out players that have less than 800 minutes played and 50 games played.","410f911d":"# Introduction\n\n\n**Background**:   \nNBA games produce a wide array of statistical data to be analyzed.  \nWe will be using this data to take a statistical viewpoint of an NBA player using an algorithm.\n\n**Problem Statement:**   \nThere is always a wide discussion involving which player should be MVP or who should make the All-NBA first, second, and third team, supporting those opinions with data makes those opinions more credible.\n\n**Datasets & Input:**   \nhttps:\/\/www.kaggle.com\/drgilermo\/nba-players-stats\n\n**Solution Statement:**   \nThe problem to predict the All-NBA Team, Rookie of the Year, and NBA MVP is a classification problem.   \nWe will take existing data and input, and give a 1 or 0 value determining whether or not a player has received any of the awards.   \nThis mimicks an NBA Sports Analysis that heavily uses statistics to cast his vote.\n\n**Benchmark Model:**   \nDefault SciKit-Learn Logistic Regression, RandomForestClassifier, and RandomForestRegressor will be used as a benchmark\/baseline.   \nSeveral models will then be explored to improve over the benchmark including other ensemble and tree-based models, Support-Vector Machines (SVM), XGBoost.\n\n**Evaluation Metrics:**   \nRecall and F1-score will be used for classification while R-squared and RMSE will be used for the regression part of the combined model\n","5d832f5e":"## What can we read from the data\n\nWe can see that most NBA players average between **8 - 18** PPG.","f786e9ea":"## Predicting League MVPs","947b5688":"## Random Forest","ad02fd63":"## Season Data Analysis","02499982":"## Facet Grids","d895e761":"## Linear Regression SNS LM Plot","15f5bc81":"## Logistic Regression"}}