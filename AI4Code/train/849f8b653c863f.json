{"cell_type":{"bcbe2c13":"code","8d21a25b":"code","2b964487":"code","41f8e51f":"code","9ef8305a":"code","83fd9b13":"code","ab87fe72":"code","020d9756":"code","dfced562":"code","dd5ec53c":"code","504135ae":"code","227786fb":"code","4cc05801":"code","9a53277e":"code","9a28acbc":"code","6f42feee":"code","ee91a5a3":"code","82ea81d4":"code","9e34df42":"code","c3d3c7d8":"code","6a623351":"code","a30fea28":"code","b3996e89":"code","eb7b557f":"code","7c1d849d":"code","4e6dfce8":"code","f6664cb2":"code","80624e9e":"code","33c743ae":"code","b37c1473":"code","e9cf3929":"code","c420aa8d":"code","4263288d":"code","b9542468":"code","72daf856":"code","1d178a50":"code","428cf6ad":"code","824d0193":"code","fbc28556":"code","cbee7471":"code","82400e65":"code","b89191fa":"code","e5698ec0":"code","99b064fe":"code","c0a638dd":"code","3ffb028a":"code","33cb1f9f":"code","894bc000":"code","30dae350":"code","aa07895c":"code","9d218c59":"code","583ccc16":"code","df9d9254":"code","859f3852":"code","ac090eb3":"code","c8b24e8e":"code","a8e86710":"code","2d9e1b62":"code","eaeca6cb":"code","07d72b07":"code","cb5535d2":"code","2d701a67":"code","62b0bcaf":"code","51797dc3":"code","dbbe1caf":"code","d1d15d1c":"code","28883e52":"code","ab5ad261":"code","505e3d8a":"code","7e1521e1":"code","f4ba43c4":"code","c31ebc9f":"code","ccfd69e1":"code","b9fc4428":"code","e2ae1940":"code","07ad60e2":"code","3fc1f5a1":"code","13edfd61":"code","635317d7":"code","7a757e31":"code","c25c740e":"code","f89bd238":"code","655fef4c":"code","1cf25202":"code","8710987d":"code","0a163d3c":"code","a04036ca":"code","09c97979":"code","0c343e90":"code","490da963":"code","ad16ccd8":"code","b47a1aa8":"code","2b0969a2":"code","f554fad6":"code","df5cb11b":"code","53a7ade1":"code","eab2f693":"code","c3600199":"code","a11ea21a":"code","cc1db193":"code","2ab1ddb7":"code","7bdfabf7":"code","9ed4de07":"code","55f5e5e4":"code","40c950cb":"code","4d1ff6de":"code","c6e4200c":"code","0f76f8bd":"code","c1f2e9c7":"code","2d605397":"code","5cd31267":"code","af8b101b":"code","8a6e7a64":"code","490fedc2":"code","15d16b92":"markdown","480dcf3d":"markdown","555cd85c":"markdown","c85ed814":"markdown","d8a4c99b":"markdown","eabd43fc":"markdown","b4704d19":"markdown","64957a35":"markdown","d458a8e9":"markdown","d96ce150":"markdown","645447f1":"markdown","fc0d0017":"markdown","54f89578":"markdown","93499bcc":"markdown","1760410e":"markdown","052b9780":"markdown","901f047f":"markdown","d6786eb6":"markdown","d81c9c9a":"markdown","a655c510":"markdown","6c079272":"markdown","eac56399":"markdown","06fec1f2":"markdown","e44d5144":"markdown","883e7129":"markdown","3a20ee17":"markdown","bd01dd0e":"markdown","6595e4ff":"markdown","96f0a5d0":"markdown","4400bd34":"markdown","ee5506fc":"markdown","15c42dd7":"markdown","9ce12df9":"markdown","61daea95":"markdown","31310d41":"markdown","d48963e8":"markdown","655d5371":"markdown","68063cb8":"markdown","f42c991a":"markdown","7dc91788":"markdown","fa4e8797":"markdown","87626360":"markdown","d5ca125f":"markdown","2647bd37":"markdown","b7d4781c":"markdown","133087c3":"markdown","58a8c314":"markdown","e880b1e8":"markdown"},"source":{"bcbe2c13":"import pandas as pd # data analytical library\nimport matplotlib.pyplot as plt #visualization\nimport seaborn as sns #statistical visualization","8d21a25b":"df=pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/train_SJC.csv\")  #train dataset\ndf1=pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv\") #test dataset","2b964487":"#Checking the dataframe for training data\ndf.head()","41f8e51f":"df=df.rename(columns={\"Unnamed: 0\":\"ClaimNumber\",\"Unnamed: 1\":\"DateTimeOfAccident\",\"Unnamed: 3\":\"Age\",\"Unnamed: 4\":\"Gender\",\n                      \"Unnamed: 5\":\"MaritalStatus\",\"Unnamed: 6\":\"DependentChildren\",\"Unnamed: 8\":\"WeeklyWages\",\n                      \"Unnamed: 9\":\"PartTimeFullTime\",\"Unnamed: 10\":\"HoursWorkedPerWeek\",\"Unnamed: 12\":\"ClaimDescription\",\n                      \"Unnamed: 13\":\"InitialIncurredCalimsCost\",\"Unnamed: 14\":'UltimateIncurredClaimCost'},inplace=False)","9ef8305a":"df=df.drop(df.index[0])\ndf.head()","83fd9b13":"#for training data\ndf.info()","ab87fe72":"#test data\ndf1.info()","020d9756":"#Checking for Categorical Data in train data\ndf.select_dtypes(exclude=['int64','float64']).columns ","dfced562":"df['Age'] = pd.to_numeric(df['Age']) \ndf['DependentChildren'] = pd.to_numeric(df['DependentChildren'])\ndf['DependentsOther'] = pd.to_numeric(df['DependentsOther'])\ndf['WeeklyWages'] = pd.to_numeric(df['WeeklyWages'])\ndf['HoursWorkedPerWeek'] = pd.to_numeric(df['HoursWorkedPerWeek'])\ndf['DaysWorkedPerWeek'] = pd.to_numeric(df['DaysWorkedPerWeek'])\ndf['InitialIncurredCalimsCost'] = pd.to_numeric(df['InitialIncurredCalimsCost'])\ndf['UltimateIncurredClaimCost'] = pd.to_numeric(df['UltimateIncurredClaimCost'])","dd5ec53c":"df.info()","504135ae":" #checking the description of train data\ndf.describe()","227786fb":"df.shape ","4cc05801":"df.isnull().sum()","9a53277e":"df['WeeklyWages']=df['WeeklyWages'].fillna(df['WeeklyWages'].mean())\ndf['HoursWorkedPerWeek']=df['HoursWorkedPerWeek'].fillna(df['HoursWorkedPerWeek'].mean())\ndf['MaritalStatus']=df['MaritalStatus'].fillna(df['MaritalStatus'].mode()[0])","9a28acbc":"#To verify if there are any more missing values\ndf.isnull().sum()","6f42feee":"df_num=df[{'Age','DependentChildren', 'DependentsOther', 'WeeklyWages', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n           'InitialIncurredCalimsCost','UltimateIncurredClaimCost', }]\ndf_cat=df[{'ClaimNumber', 'DateTimeOfAccident', 'DateReported','Gender' ,'MaritalStatus','PartTimeFullTime','ClaimDescription'}]","ee91a5a3":"df['MaritalStatus'].value_counts()","82ea81d4":"df['Gender'].value_counts()","9e34df42":"df['PartTimeFullTime'].value_counts()","c3d3c7d8":"df['ClaimDescription'].nunique()","6a623351":"df.ClaimNumber.count()","a30fea28":"df['ClaimNumber'].nunique()","b3996e89":"df['Age'].value_counts","eb7b557f":"df['Age'].min()","7c1d849d":"df['Age'].max()","4e6dfce8":"df['Age_Bin']=pd.cut(df['Age'],bins=[1,25,50,80] , labels=['Young','Middle-Age','Old'])\ndf['Age_Bin']","f6664cb2":"df['WeeklyWages'].value_counts","80624e9e":"df['WeeklyWages'].max()","33c743ae":"df['WeeklyWages'].min()","b37c1473":"df['WeeklyWages_Bin']=pd.cut(df['WeeklyWages'],bins=[0,1000,2000,4000,7000,8000] , labels=['Low','Below Average','Average Wage','Above Average','High'])\ndf['WeeklyWages_Bin']","e9cf3929":"#Checking the target variable \ndf['UltimateIncurredClaimCost'].describe()","c420aa8d":"#Checking the skewness of the target variable \ndf['UltimateIncurredClaimCost'].hist(bins=50)\nsns.distplot(df['UltimateIncurredClaimCost'])","4263288d":"df['InitialIncurredCalimsCost'].describe()","b9542468":"df['InitialIncurredCalimsCost'].hist(bins=30)\nsns.distplot(df['InitialIncurredCalimsCost'])","72daf856":"sns.distplot(df['Age'])","1d178a50":"sns.countplot(x = 'Age_Bin', data = df)","428cf6ad":"df['Age_Bin'].value_counts(normalize=True)*100","824d0193":"sns.countplot(x = 'DependentChildren', data = df)","fbc28556":"df['DependentChildren'].value_counts(normalize=True)*100","cbee7471":"sns.countplot(x = 'DependentsOther', data = df)","82400e65":"df['DependentsOther'].value_counts(normalize=True)*100","b89191fa":"df['HoursWorkedPerWeek'].hist(bins=50)\nsns.distplot(df['HoursWorkedPerWeek'])","e5698ec0":"sns.countplot(x = 'DaysWorkedPerWeek', data = df)","99b064fe":"df['DaysWorkedPerWeek'].value_counts(normalize=True)*100","c0a638dd":"sns.countplot(x = 'Gender', data = df)","3ffb028a":"df['Gender'].value_counts(normalize=True)*100","33cb1f9f":"sns.countplot(x = 'MaritalStatus', data = df)","894bc000":"df['MaritalStatus'].value_counts(normalize=True)*100","30dae350":"sns.countplot(x = 'PartTimeFullTime', data = df)","aa07895c":"df['PartTimeFullTime'].value_counts(normalize=True)*100","9d218c59":"plt.figure(figsize=(10,5))\nsns.countplot(x = 'WeeklyWages_Bin', data = df)","583ccc16":"df['WeeklyWages_Bin'].value_counts(normalize=True)*100","df9d9254":"sns.barplot(x='Age_Bin',y='UltimateIncurredClaimCost',data=df)","859f3852":"#plt.figure(figsize=(10,5))\nsns.barplot(x='DependentChildren',y='UltimateIncurredClaimCost',data=df)\n#plt.show()","ac090eb3":"sns.barplot(x='DependentsOther',y='UltimateIncurredClaimCost',data=df)","c8b24e8e":"plt.figure(figsize=(10,5))\nsns.barplot(x='WeeklyWages_Bin',y='InitialIncurredCalimsCost',data=df)","a8e86710":"plt.figure(figsize=(10,5))\nsns.barplot(x='WeeklyWages_Bin',y='UltimateIncurredClaimCost',data=df)","2d9e1b62":"plt.figure(figsize=(10,5))\nsns.barplot(x='DaysWorkedPerWeek',y='UltimateIncurredClaimCost',data=df)","eaeca6cb":"df_drop=df.drop(columns=['WeeklyWages', 'WeeklyWages_Bin','HoursWorkedPerWeek','DaysWorkedPerWeek','Age_Bin'])\ndf_drop.head()","07d72b07":"plt.figure(figsize=(10,5))\nsns.heatmap(df_drop[['ClaimNumber', 'DateTimeOfAccident', 'DateReported', 'Age', 'DependentChildren', \n       'DependentsOther','InitialIncurredCalimsCost', 'UltimateIncurredClaimCost', ]].corr(),annot=True)\nplt.show()","cb5535d2":"plt.figure(figsize=(10,5))\nsns.boxplot(x='UltimateIncurredClaimCost', y='Age_Bin',data=df)","2d701a67":"plt.figure(figsize=(20,5))\nsns.boxplot(data=df_drop)","62b0bcaf":"df_drop.shape","51797dc3":"for i in range(4):\n\n    limit1=3*df_drop['InitialIncurredCalimsCost'].std()\n\n    lower_limit1=df_drop['InitialIncurredCalimsCost'].mean()-limit1\n    upper_limit1=df_drop['InitialIncurredCalimsCost'].mean()+limit1\n\n    df_drop=df_drop[(df_drop['InitialIncurredCalimsCost']>lower_limit1)&(df_drop['InitialIncurredCalimsCost']<upper_limit1)]\n\n    limit2=3*df_drop['UltimateIncurredClaimCost'].std()\n\n    lower_limit2=df_drop['UltimateIncurredClaimCost'].mean()-limit2\n    upper_limit2=df_drop['UltimateIncurredClaimCost'].mean()+limit2\n\n    df_drop=df_drop[(df_drop['UltimateIncurredClaimCost']>lower_limit2)&(df_drop['UltimateIncurredClaimCost']<upper_limit2)]","dbbe1caf":"plt.figure(figsize=(20,5))\nsns.boxplot(data=df_drop)","d1d15d1c":"from sklearn.linear_model import LinearRegression\nimport sklearn.preprocessing as pre\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nle=pre.LabelEncoder()\nfrom sklearn.metrics import r2_score","28883e52":"for x in df.select_dtypes(include='object').columns:\n    df[x]=le.fit_transform(df[x])","ab5ad261":"X_scale=df_drop.drop(['UltimateIncurredClaimCost'],axis='columns')\ncat_df=X_scale.select_dtypes(exclude=[float,int]).columns\nfor i in cat_df :\n    X_scale[str(i)]=le.fit_transform(X_scale[str(i)])\nX_scale=X_scale.apply(pre.minmax_scale)\nY=df_drop['UltimateIncurredClaimCost']","505e3d8a":"#Splitting the data into test and train data\nx_train,x_test,y_train,y_test=train_test_split(X_scale,Y,test_size=0.3,random_state=1234456)","7e1521e1":"#checking the shape of the test and train set\nx_train.shape,x_test.shape,y_train.shape,y_test.shape","f4ba43c4":"import sklearn.linear_model as lm","c31ebc9f":"#creating the linear regression model\nglm=lm.LinearRegression()","ccfd69e1":"#Fitting the model\nglm.fit(x_train,y_train)","b9fc4428":"#Checking the test score\nglm.score(x_test,y_test)","e2ae1940":"#Checking the train score\nglm.score(x_train,y_train)","07ad60e2":"# Checking the R square value\nprint (\"R^2 is: \\n\", glm.score(x_test, y_test))","3fc1f5a1":"#Predictions on the test data set.\ny_pred = glm.predict(x_test)","13edfd61":"# Checking the RMSE score\nfrom sklearn.metrics import mean_squared_error\nprint ('RMSE is: \\n', mean_squared_error(y_test, y_pred,squared=False))","635317d7":"#Plotting the scatter plot between the predicted value and the actual values\nactual_values = y_test\nplt.scatter(y_pred, actual_values, alpha=.7,\n            color='g')\nplt.xlabel('Predicted Value')\nplt.ylabel('Actual Value')\nplt.title('Linear Regression Model')\nplt.show()","7a757e31":"#Importing the decision tree regressor\nfrom sklearn.tree import DecisionTreeRegressor","c25c740e":"# creating the model\ndt= DecisionTreeRegressor()","f89bd238":"#Fitting the data \ndt.fit(x_train, y_train)","655fef4c":"# predicting the test set results\ny_pred1= dt.predict(x_test)","1cf25202":"# Calculating the r2 score\nprint (\"R^2 is: \\n\", dt.score(x_test, y_test))","8710987d":"#Checking the RMSE value\nfrom sklearn.metrics import mean_squared_error\nprint ('RMSE is: \\n', mean_squared_error(y_test, y_pred1,squared=False))","0a163d3c":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators = 10, random_state = 0)\nrf.fit(x_train, y_train)","a04036ca":"#checking the test score\nrf.score(x_test,y_test)","09c97979":"#Checking the train score\nrf.score(x_train,y_train)","0c343e90":"#Checking the r2 score\nprint (\"R^2 is: \\n\", rf.score(x_test, y_test))","490da963":"#checking the predicted value\ny_pred2= rf.predict(x_test)\nprint ('RMSE is: \\n', mean_squared_error(y_test, y_pred2,squared=False))","ad16ccd8":"df1=pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv\")#,usecols=important_features) #test dataset","b47a1aa8":"#Checking information on test data\ndf1.info()","2b0969a2":"df1['Age'] = pd.to_numeric(df1['Age']) \ndf1['DependentChildren'] = pd.to_numeric(df1['DependentChildren'])\ndf1['DependentsOther'] = pd.to_numeric(df1['DependentsOther'])\ndf1['WeeklyWages'] = pd.to_numeric(df1['WeeklyWages'])\ndf1['HoursWorkedPerWeek'] = pd.to_numeric(df1['HoursWorkedPerWeek'])\ndf1['DaysWorkedPerWeek'] = pd.to_numeric(df1['DaysWorkedPerWeek'])\ndf1['InitialIncurredCalimsCost'] = pd.to_numeric(df1['InitialIncurredCalimsCost'])","f554fad6":" #checking the description of test data\ndf1.describe()","df5cb11b":"#checking the test dataframe \ndf1.head(5)","53a7ade1":"#Checking the shape of test data \ndf1.shape","eab2f693":"#Checking for the null values\ndf1.isnull().sum()","c3600199":"#Missing Value Treatment using mode imputation\ndf1['MaritalStatus']=df1['MaritalStatus'].fillna(df1['MaritalStatus'].mode()[0])","a11ea21a":"#To verify if there are more missing values in the dataset\ndf1.isnull().sum()","cc1db193":"df1['Age_Bin']=pd.cut(df1['Age'],bins=[1,25,50,80] , labels=['Young','Middle-Age','Old'])\ndf1['Age_Bin']","2ab1ddb7":"df1['WeeklyWages_Bin']=pd.cut(df1['WeeklyWages'],bins=[0,1000,2000,4000,7000,8000] , labels=['Low','Below Average','Average Wage','Above Average','High'])\ndf1['WeeklyWages_Bin']","7bdfabf7":"df1_drop=df1.drop(columns=['WeeklyWages', 'WeeklyWages_Bin','HoursWorkedPerWeek','DaysWorkedPerWeek','Age_Bin'])","9ed4de07":"df1_drop.head(5)","55f5e5e4":"df_drop.head(5)","40c950cb":"df1_drop.dtypes","4d1ff6de":"df1_drop.info()","c6e4200c":"label_encoder=pre.LabelEncoder()\ndf1_drop['ClaimNumber']=label_encoder.fit_transform(df1_drop['ClaimNumber'])\ndf1_drop['DateTimeOfAccident']=label_encoder.fit_transform(df1_drop['DateTimeOfAccident'])\ndf1_drop['DateReported']=label_encoder.fit_transform(df1_drop['DateReported'])\ndf1_drop['Age']=label_encoder.fit_transform(df1_drop['Age'])\ndf1_drop['Gender']=label_encoder.fit_transform(df1_drop['Gender'])\ndf1_drop['MaritalStatus']=label_encoder.fit_transform(df1_drop['MaritalStatus'])\ndf1_drop['PartTimeFullTime']=label_encoder.fit_transform(df1_drop['PartTimeFullTime'])\ndf1_drop['ClaimDescription']=label_encoder.fit_transform(df1_drop['ClaimDescription'])","0f76f8bd":"df1_drop.dtypes","c1f2e9c7":"def test_pre(data):\n    import sklearn.preprocessing as pre\n    from sklearn.preprocessing import minmax_scale\n    #label_encoder=pre.LabelEncoder()\n    data=data.apply(minmax_scale)\n    #data['Age']=label_encoder.fit_transform(data['Age'])\n    #data['MaritalStatus']=label_encoder.fit_transform(data['MaritalStatus'])\n    #data['ClaimDescription']=label_encoder.fit_transform(data['ClaimDescription'])\n    return data","2d605397":"test=test_pre(df1_drop)","5cd31267":"y_pred=dt.predict(test)","af8b101b":"y_pred","8a6e7a64":"result=y_pred","490fedc2":"def submission(result):\n    submission = pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv\")\n    submission = submission.drop('UltimateIncurredClaimCost',axis=1)\n    submission['UltimateIncurredClaimCost'] = result\n    #Writing the file\n    submission.to_csv(\"submit.csv\",index=False)\n    \nsubmission(result)","15d16b92":"### Data Transformation","480dcf3d":"##### People who's wages are below average and above average got more total claims payments by the insurance company.","555cd85c":"##### From both the plots we can see that the claims are higher from the middle age group (25-40) which is roughly 57%. ","c85ed814":"##### Importing the libraries for the modeling.","d8a4c99b":"##### The data for UltimateIncurredClaimCost is right skewed.","eabd43fc":"##### For understanding categorical data \n","b4704d19":"##### There are no missing values.","64957a35":"### Reading the test and train dataset","d458a8e9":"##### From the above boxplot we can see that there are a lot of outliers in \"InitialIncurredCalimsCost\" and \"UltimateIncurredClaimCost\".","d96ce150":"##### The total number of claims that were filed is 36176 but number of unique claims are 29456.","645447f1":"##### Checking the shape of dataset","fc0d0017":"##### The data for HoursWorkedPerWeek is positively skewed.","54f89578":"##### The claims made from people with no children as dependents is high(Almost 94%).","93499bcc":"##### From the above plot we can see that 91% of the people who have claimed for insurance work for 5 days a week. ","1760410e":"### Loading the libraries","052b9780":"##### People whose wages are above average claimed for more claim cost. ","901f047f":"##### Changing the data type for some columns in train data","d6786eb6":"##### Now there are no missing values ","d81c9c9a":"##### From the above plot we can see approximately 77% people who claimed for insurance are males while 22% are females.","a655c510":"#### Dropping the first row as it has the column names in train data","6c079272":"### Decision tree regressor","eac56399":"##### The claims made from people with no dependents is high (Almost 99%).","06fec1f2":"#### Renaming the column names in train data as it is \"unnamed\" ","e44d5144":"##### From the above plot we can see approximately 48% people who claimed for insurance are single while 41% are married and a very small percentage of people are unmarried.","883e7129":"##### People who are in the old age group (50-80) got more total claims payments by the insurance company. ","3a20ee17":"##### People who have more children as dependents got more insurance payments from the insurance company.","bd01dd0e":"##### From the above plot we can see that most of the people who claimed for insurance have low wages ","6595e4ff":"### Linear Regression Model","96f0a5d0":"##### From the above plot we can see approximately 91% of the people hold full time jobs.","4400bd34":"##### To check if the data type changed or not ","ee5506fc":"#### Data  binning","15c42dd7":"##### The data for InitialIncurredClaimCost is right skewed.","9ce12df9":"##### The total number of claims filed is 36176.","61daea95":"The approach for working on the dataset : \n\n1. Importing the libraries that was needed. \n\n2. Pre-processing: In the pre-processing I wrote codes to obtain basic information on the dataset such as data description,data shape, whether or not if there are any duplicate values or missing data in the dataset. As some of the columns had some missing data I treated them using mean and mode imputation. Following that I worked on binning some of the data columns into small intervals and replaced it by a general value calculated for that bin . This is done in order to understand that columns  and analyse them. \n\n3. Exploratory data analysis :  After data pre-processing I focused on exploring the data. I wanted to see how the data in columns was distributed . I examined the link between different variables using histogram and countplots.\n \n4. Machine learning model: I tried three models : Linear regression, Decision tree regression and random forest regression. Out of these 3 I selected random forest regressor as it was giving the least root mean squared error (RMSE).","31310d41":"##### Using mean and mode imputation to treating the missing values ","d48963e8":"### Random Forest Regressor ","655d5371":"### Data Transformation\n\n##### Data Binning","68063cb8":"##### Checking for missing values","f42c991a":"##### There are 20596 unique claims made.","7dc91788":"## Machine Learning Model","fa4e8797":"##### Working on the train data","87626360":"### Working on Test Data","d5ca125f":"## Bivariate analysis","2647bd37":"### Data Frame Summary","b7d4781c":"##### There is no correlation among the numerical columns. ","133087c3":" ## Exploratory Data Analysis : Univariate Analysis","58a8c314":"## Outlier Analysis","e880b1e8":"##### Dividing the data into categorical and numerical data"}}