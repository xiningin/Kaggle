{"cell_type":{"c856e45b":"code","ea8603d8":"code","18aa386f":"code","fd635c60":"code","c9b323bc":"code","388f3a3d":"code","68312bb8":"code","52414381":"code","913501ba":"code","c4e2dad9":"code","79b1b279":"code","53738561":"code","12e3397c":"markdown","fa5d767e":"markdown","52c7d4b5":"markdown","8c0b5cd6":"markdown","b2a3b08d":"markdown","09cd7def":"markdown","db61ac6f":"markdown","06413acb":"markdown","feab066f":"markdown","cfe79390":"markdown","96add44b":"markdown","e145882d":"markdown","f3ae650c":"markdown","a041d06c":"markdown"},"source":{"c856e45b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom collections import Counter\nfrom xgboost import XGBClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea8603d8":"df = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')","18aa386f":"df","fd635c60":"cols = [[['convex', 'bell', 'sunken', 'flat', 'knobbed', 'conical'], 'cap-shape'], \n        [['smooth', 'scaly', 'fibrous', 'grooves'], 'cap-surface'], \n        [['pungent', 'almond', 'anise', 'none', 'foul', 'creosote', 'fishy', 'spicy', 'musty'], 'odor'], \n        [['scattered', 'numerous', 'abundant', 'several', 'solitary', 'clustered'], 'population'], \n        [['urban', 'grasses', 'meadows', 'woods', 'paths', 'waste', 'leaves'], 'habitat']]\n\nfor column in cols:\n    fig, ax = plt.subplots(figsize=(5, 5))\n    labels = column[0]\n    col = column[1]\n    \n    count = Counter(df[col])\n    ax.pie(count.values(), labels=labels, shadow=True, autopct=lambda p:f'{p:.2f}%')\n    ax.set_title(col)\n    plt.show()","c9b323bc":"for col in df:\n    le = LabelEncoder()\n    df[col] = le.fit_transform(df[col])","388f3a3d":"X = df.drop('class', axis=1)\ny = df['class']","68312bb8":"for col in ['cap-color', 'odor', 'gill-color', 'stalk-color-above-ring', 'stalk-color-below-ring', \n            'spore-print-color', 'population', 'habitat']:\n    fig, axes = plt.subplots(1, 5, figsize=(15,  3))\n    \n    X[col].hist(ax=axes[0], color='skyblue')\n    (X[col]+1).transform(np.log).hist(ax=axes[1], color='pink')\n    pd.DataFrame(stats.boxcox(X[col]+1)[0]).hist(ax=axes[2], color='lightgreen')\n    pd.DataFrame(StandardScaler().fit_transform(np.array(X[col]).reshape(-1, 1))).hist(ax=axes[3], color='yellow')\n    pd.DataFrame(MinMaxScaler().fit_transform(np.array(X[col]).reshape(-1, 1))).hist(ax=axes[4], color='orange')\n    \n    axes[0].set_title('Normal')\n    axes[1].set_title('Log')\n    axes[2].set_title('Box Cox')\n    axes[3].set_title('Standard Scaler')\n    axes[4].set_title('Min Max Scaler')\n    \n    for ax in axes:\n        ax.set_xlabel(col)\n    \n    plt.show()","52414381":"fig, ax = plt.subplots(1, 1, figsize=(10, 5))\nsns.heatmap(X.corr(), annot=True)\nplt.show()","913501ba":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","c4e2dad9":"pca = PCA(n_components=15)\npca.fit(X_train, y_train)\n\nX_train = pca.transform(X_train)\nX_test = pca.transform(X_test)\n\nevr = pca.explained_variance_ratio_\nplt.bar(range(len(evr)), evr, color='blue')\nplt.title('Explained variance ratio for 15 features')\nplt.ylabel('Explained variance ratio')\nplt.xlabel('Features')\nplt.show()","79b1b279":"models = [XGBClassifier(), SVC(), SGDClassifier(), KNeighborsClassifier(), RandomForestClassifier()]\nmodel_names = ['XGBoost', 'SVC', 'SGD', 'KNN', 'Random Forest']\nscores = []\ncross_vals = []\n\nfor model in models:\n    model_name = model_names[models.index(model)]\n    \n    model.fit(X_train, y_train)\n    \n    score = model.score(X_test, y_test)\n    cross_val = cross_val_score(model, X_test, y_test).mean()\n    \n    scores.append(score)\n    cross_vals.append(cross_val)\n    \n    print('score: ' + str(round(score*100, 2)) + \"% cross val: \" + str(round(cross_val*100, 2)) + '% ' + model_name)","53738561":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\n\nax1.bar(model_names, scores, color='skyblue')\nax1.set_title('Model scores')\nax1.set_ylabel('Score')\nax1.set_xlabel('Model')\n\nax2.bar(model_names, cross_vals, color='pink')\nax2.set_title('Cross validation scores')\nax2.set_ylabel('Cross validation score')\nax2.set_xlabel('Model')\n\nplt.show()","12e3397c":"Subsequently, we check the correlation of the different columns using a heatmap.","fa5d767e":"# Mushroom Classification\nThis notebook aims to visualise the different features given about mushrooms and use them to predict whether they are poisonous or edible.","52c7d4b5":"Here we see five different features plotted out with pie charts.","8c0b5cd6":"If you enjoy this notebook and find it helpful, please upvote it, as it helps me make more of these.","b2a3b08d":"Then, we split up our dataframe into X and y.","09cd7def":"Lastly, we want to see how much the features contribute to the dataset. I have used a PCA to decide that the fifteen most important features are the ones worth dealing with, therefore, I use a bar chart to graph their explained variance ratio.","db61ac6f":"### Thank you for reading my notebook.\n### If you enjoyed this notebook and found it helpful, please give it an upvote so that I can do more of these in the future.","06413acb":"Afterwards, we graph the distribution of five different columns using the log, box cox, standard and minmax scaler transformations.","feab066f":"## Classifying data\nFinally, we now wish to use our data to create a classifier which predicts whether a mushroom is edible or poisonous. I loop over XGBoost, SVC, SGD, KNN and Random Forest classifiers, fitting the train datasets to them while I do so and evaluating their score using the test sets.","cfe79390":"Using our findings, we can conclude that the models which perform the best on this dataset are the XGBoost and Random Forest, having accuracies near 100%. Two bar charts are graphed out below which show the two metrics of the different models.","96add44b":"## Data visualisation\nThe first thing we will do is visualising the data.","e145882d":"The first piece of data engineering that we will perform is using a LabelEncoder turning the categorical columns into numerical ones.","f3ae650c":"An essential piece of data cleaning is splitting the X and y into train and test sets, which is what we do next:","a041d06c":"## Feature engineering\nNext, we will engineer the data so that it can be inputted into our model."}}