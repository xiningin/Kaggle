{"cell_type":{"8f43b45f":"code","14550f04":"code","9dc6b7ee":"code","1bb43d15":"code","0202ccfb":"code","81d15030":"code","bae041ca":"code","17d0521d":"markdown","37005065":"markdown","1380e146":"markdown"},"source":{"8f43b45f":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport cv2\nfrom skimage.io import MultiImage \nfrom PIL import Image\nimport openslide\n\nimport os\nfrom tqdm.notebook import tqdm","14550f04":"\"\"\"\nfirst def crop takes path to image and returns points to crop white background. \nPoints are relative to shape. i.e their values are between [0,1]\n\"\"\"\ndef crop(path):\n    result = []\n    imgs = openslide.OpenSlide(path)\n    img = np.asarray(imgs.read_region((0,0), imgs.level_count-1, imgs.level_dimensions[-1]))\n    mask = img[:,:].sum(axis=2)\n    mask = (mask<(mask.max()-10)).astype('uint8')\n    rect = cv2.boundingRect(mask)\n    x = rect[1]\/img.shape[0]\n    x1 = (rect[1] + rect[3])\/img.shape[0]\n    y = rect[0]\/img.shape[1]\n    y1 = (rect[0] + rect[2])\/img.shape[1]\n\n    return x, x1, y, y1\n","9dc6b7ee":"'''\nThis part of code cretes dataframe of points.\nYou can find dataframe in input, so there is no need to execute this part of code\n\n\ntrain_dir = '\/kaggle\/input\/prostate-cancer-grade-assessment\/train_images\/'\npathes = os.listdir(train_dir)\nx = []\nx1 = []\ny = []\ny1 = []\nfor i in tqdm(pathes):\n    points = crop(train_dir + i)\n    x.append(points[0])\n    x1.append(points[1])\n    y.append(points[2])\n    y1.append(points[3])\ndf = pd.DataFrame({\n    'id': pathes,\n    'x': x,\n    'x1': x1,\n    'y': y,\n    'y1': y1,\n})\ndf.to_csv('crop_points.csv')\n''';","1bb43d15":"df = pd.read_csv('\/kaggle\/input\/prostate-cancer-grade\/crop_points.csv')\ndf","0202ccfb":"'''\nFunction takes relative points and shape of the neede tiff frame and returns its points \n'''\ndef new_points(x,x1,y,y1, shape, pad = 15):\n    new_x = np.clip(int(x*shape[0]) - pad, 0, shape[0])\n    new_x1 = np.clip(int(x1*shape[0]) + pad, 0, shape[0])\n    new_y = np.clip(int(y*shape[1]) - pad, 0, shape[1])\n    new_y1= np.clip(int(y1*shape[1]) + pad, 0, shape[1])\n    return new_x, new_x1,new_y,new_y1","81d15030":"image_id = df.id[39] # getting id of image\nimgs = openslide.OpenSlide(f'\/kaggle\/input\/prostate-cancer-grade-assessment\/train_images\/{image_id}') # open image with openslide\nframe = imgs.level_count - 2 # get needed level. Here you can choose which frame to use\nimg = np.asarray(imgs.read_region((0,0), frame, imgs.level_dimensions[frame])) # get image from multi image\nx,x1,y,y1 = df.loc[df.id == image_id].values[0,1:] # get resize points\nnew_x, new_x1, new_y, new_y1 = new_points(x,x1,y,y1,img.shape) #scale points\nnew_img = img[new_x:new_x1,new_y:new_y1] # get cropped image","bae041ca":"plt.figure(figsize = (30,20) )\nplt.subplot(1,2,1)\nplt.imshow(new_img)\nplt.title('cropped', fontsize=20)\nplt.subplot(1,2,2)\nplt.imshow(img)\nplt.title('original', fontsize=20);","17d0521d":"# Visualize Crops","37005065":"### Creating dataframe. Do not run this code to get dataframe. It is available in input data","1380e146":"# Crop points for Panda competition"}}