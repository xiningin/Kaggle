{"cell_type":{"a2502ab5":"code","c4fdea7a":"code","def94798":"code","d9284fff":"code","5987292b":"code","b15d6dac":"code","05c07fee":"code","09cf1b4a":"code","62091e31":"code","8a7b6fa1":"markdown","0a8a6038":"markdown","86da8fef":"markdown","6f8bef1f":"markdown","2f86a3f4":"markdown"},"source":{"a2502ab5":"!nvidia-smi","c4fdea7a":"import time\n\nimport torch\nimport torch.optim as optim\nimport torch.nn as nn\nimport torchvision.datasets as dset\nimport torchvision.transforms as transforms\nimport torch\nfrom torch.autograd import Variable\nimport torchvision\nfrom torchvision import models","def94798":"#In my code i wish to set an batch size into 32 if you need to change to change to 16,3,64 \n\nbatch_size = 32\nlr = 0.001","d9284fff":"def trainDataset():\n    \n    #I given the Dataset training path for training Folder \n    dataset = dset.ImageFolder(root=\"..\/input\/100-bird-species\/train\",\n                            transform=transforms.Compose([\n                                transforms.RandomRotation(30),\n                                transforms.RandomHorizontalFlip(),\n                                transforms.RandomResizedCrop(224, scale=(0.96, 1.0), ratio=(0.95, 1.05)),\n                                transforms.ToTensor(),\n                                transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n                            ]))\n    dataloader = torch.utils.data.DataLoader(dataset,\n                                            batch_size=batch_size,\n                                            shuffle=True,\n                                            num_workers=4)\n    return dataloader                               \n\ndef testDataset():\n    #I given the dataset folder path for Testing Folder \n    dataset = dset.ImageFolder(root=\"..\/input\/100-bird-species\/test\",\n                            transform=transforms.Compose([\n                                transforms.Resize([224, 224]),\n                                transforms.ToTensor(),\n                                transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),\n                            ]))\n    dataloader = torch.utils.data.DataLoader(dataset,\n                                            batch_size=batch_size,\n                                            shuffle=True,\n                                            num_workers=4)\n    return dataloader","5987292b":"#checking the cuda is available or not \n\ndevice = torch.device(\"cuda\")","b15d6dac":"#dataset input way i already Given the dataset path in preprocessing script \n\ntrain_loader = trainDataset()\ntest_loader = testDataset()","05c07fee":"#define the Resnet model for training the dataset \n\nmodel = models.resnet50().cuda()\n\n#Loss function is CrossEntropy if you need to checking with various loss function also CrossEntropy is my choices\ncriterion = nn.CrossEntropyLoss().cuda()\n\n\n#optimizer is an Adam if you want yo seena an result with various optimizer is alsio possible with my code\noptimizer = optim.Adam(model.parameters(), lr=lr, weight_decay=1e-5)","09cf1b4a":"def train(epoch):\n    model.train()\n    for idx, (data, target) in enumerate(train_loader):\n        data, target = data.to(device), target.to(device)\n        optimizer.zero_grad()\n        output = model(data)\n        loss = criterion(output, target)\n        loss.backward()\n        optimizer.step()\n\n        if idx % 10 == 0:\n            print(\"epoch: \", epoch, \"  process: \", int((idx \/ len(train_loader)) * 100),\n                \"%  Loss: \", loss.data.item())\n    \n    torch.save(model.state_dict(), '.\/Resnet50'+str(epoch)+'.pt')\n\ndef test():\n    model.eval()\n    test_loss = 0\n    correct = 0\n    with torch.no_grad():\n        for data, target in test_loader:\n            data, target = data.to(device), target.to(device)\n            output = model(data)\n            test_loss += criterion(output, target).data.item()\n            _, predicted = torch.max(output, 1)\n            correct += (predicted == target).sum().item()\n    \n    test_loss \/= len(test_loader.dataset)\n    print(\"Average Loss: \", test_loss, \"  Accuracy: \", correct, \" \/ \",\n    len(test_loader.dataset), \"  \", int(correct \/ len(test_loader.dataset) * 100), \"%\")\n\n\n #if you want to increase or decrease the Epoches please the epoches value in For Loop \n    \nif __name__ == \"__main__\":\n    for epoch in range(3):\n        start = time.time()\n        train(epoch)\n        end = time.time()\n        print(\"It takes \", end - start, \" seconds\")\n        test()","62091e31":"#testing code for this model\n\n\ndataset = dset.ImageFolder(root=\"sample\",\n                        transform=transforms.Compose([\n                            transforms.Resize([224, 224]),\n                            transforms.ToTensor(),\n                            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),\n                        ]))\ndataloader = torch.utils.data.DataLoader(dataset,\n                                        batch_size=1,\n                                        shuffle=False,\n                                        num_workers=0)\n\n\nmodel = models.resnet50()\nmodel.load_state_dict(torch.load('checkpoint\/epoche-5', map_location='cpu'))\nmodel.eval()\n\n\noutput = model(list(dataloader)[0][0])\n_, predicted = torch.max(output, 1)\n\n\nprint(predicted)","8a7b6fa1":"**In This Notebook is an Excerise the performance of ResNet Model in PyTorch**\n\nWhy I am Selected for This Dataset to performace the task?\n\nIn this Bird Dataset Havethe huge images of classification type and it have huge number of Classification Model Images.\n\n\n![ResNet Model](https:\/\/github.com\/Balasubramaniam077\/Transfer_learning_pytorch\/blob\/main\/images\/ResNet.png)","0a8a6038":"**Preprocessing the transforms to perform the Data**","86da8fef":"**Importing all requirement files for Transfer Learning**","6f8bef1f":"If your wish you see my resnet Transfer layer Repo on [Github](http:\/\/https:\/\/github.com\/Balasubramaniam077\/Transfer_learning_pytorch)\n\nI wroted the Simple code  to understanding the process of implementing the model in Classification","2f86a3f4":"**Checking the available GPU**"}}