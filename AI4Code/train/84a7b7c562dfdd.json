{"cell_type":{"9017b684":"code","8c9df3fc":"code","b7f6556d":"code","3354bcdf":"code","9632ad61":"code","a5c02b1c":"code","c853f1cf":"code","66831dc6":"code","511ee263":"code","83c71bac":"code","3cc09afc":"code","bcff2ce7":"code","69835b8d":"code","6ebcccdf":"code","2091fc99":"code","63710f91":"code","f90ae5ce":"code","a55d3cc3":"code","0675635a":"code","f5e2a019":"code","c5adbc56":"code","4c2aaa76":"code","ecab0010":"code","a6e27116":"code","bc23c8d9":"code","dedfc1fb":"code","4dfbc388":"code","1ff69043":"code","580c1ee8":"code","67fd45e4":"code","e4685b48":"code","897d1331":"code","efcaf0c8":"code","cbc033b7":"code","e25c4731":"code","c007865c":"code","d16d163b":"code","dffbd8ba":"code","0d76c5aa":"code","a68193dc":"code","ba64c0c8":"code","44595f17":"code","14db6d55":"markdown","072f1154":"markdown","9dd8fd58":"markdown","44cd1903":"markdown","c6c5a5ed":"markdown","1d226a17":"markdown","0366b0a2":"markdown","fc84b10a":"markdown","16a9d86c":"markdown","0af68ee7":"markdown","211561fe":"markdown","6e3728a6":"markdown","d620dc4c":"markdown","b15ca250":"markdown","41ec8bc2":"markdown","420b6d5d":"markdown","8a15fa39":"markdown","00a85d8d":"markdown","26a7cb56":"markdown","74ad4ac8":"markdown","a373bfba":"markdown","ef76a911":"markdown"},"source":{"9017b684":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom scipy.stats import shapiro\nfrom sklearn.preprocessing import OrdinalEncoder, MinMaxScaler\nfrom sklearn.cluster import KMeans, SpectralClustering, MeanShift, estimate_bandwidth\nfrom yellowbrick.cluster.elbow import kelbow_visualizer\nfrom yellowbrick.cluster import SilhouetteVisualizer","8c9df3fc":"data = pd.read_csv(\"..\/input\/palmer-archipelago-antarctica-penguin-data\/penguins_lter.csv\")","b7f6556d":"data = data.drop([\"Species\", \"studyName\", \"Sample Number\", \"Individual ID\", \"Comments\", \"Stage\", \"Region\"], axis=1)","3354bcdf":"data.head()","9632ad61":"data['Date Egg'] =  pd.to_datetime(data['Date Egg'], format='%m\/%d\/%y')\ndata['Date Egg'] = pd.DatetimeIndex(data['Date Egg']).month\ndata = data.rename(columns={'Date Egg': 'MonthEgg', \"Clutch Completion\": \"ClutchCompletion\", \"Culmen Length (mm)\": \"CulmenLength\", \"Culmen Depth (mm)\": \"CulmenDepth\", \"Flipper Length (mm)\": \"FlipperLength\", \"Body Mass (g)\": \"BodyMass\", \"Delta 15 N (o\/oo)\": \"Delta15N\", \"Delta 13 C (o\/oo)\": \"Delta13C\"})\n\n","a5c02b1c":"data.info()","c853f1cf":"# Female = 1 and Male = 0\ndata = data[data.Sex != \".\"]\ndata.Sex.replace(to_replace=dict(FEMALE=1, MALE=0), inplace=True)\ndata = data.dropna()\ndata.info()\n","66831dc6":"encoder = OrdinalEncoder()\ndata[[\"Island\", \"ClutchCompletion\"]] = encoder.fit_transform(data[[\"Island\", \"ClutchCompletion\"]])\ndata.info()","511ee263":"data.head()","83c71bac":"scaler = MinMaxScaler()\ncolumns = [\"Island\", \"ClutchCompletion\", \"MonthEgg\", \"CulmenLength\", \"CulmenDepth\", \"FlipperLength\", \"BodyMass\", \"Delta15N\", \"Delta13C\"]\ndata[columns] = scaler.fit_transform(data[columns])","3cc09afc":"data.describe()","bcff2ce7":"data.info()","69835b8d":"sns.pairplot(data)","6ebcccdf":"plt.figure(figsize=(15, 10))\nsns.boxplot(x=\"variable\", y=\"value\", data=pd.melt(data), palette='flare')\nsns.stripplot(x=\"variable\", y=\"value\", data=pd.melt(data), color=\"orange\", jitter=0.2, size=2.5)\nplt.grid()","2091fc99":"violin_columns = [\"CulmenLength\", \"CulmenDepth\", \"FlipperLength\", \"BodyMass\"]\ni = 1\nplt.figure(figsize=(10, 10))\nfor col in violin_columns:\n    plt.subplot(2, 2, i)\n    fig2 = sns.violinplot(x=data[\"Sex\"], y=data[col], palette='flare')\n    fig2.set_xticklabels([\"male\", \"female\"])\n    i+=1\nplt.show()\n","63710f91":"# Visualize correlations for optimizing visuals\ncorrelations = data.corr(method=\"pearson\")\nplt.figure(figsize=(10, 8))\nsns.heatmap(correlations, vmin= -1, cmap=\"coolwarm\", annot=True)","f90ae5ce":"plt.subplot(1, 2, 1)\nfig1 = sns.countplot(data=data, x=\"Sex\", palette='flare')\nfig1.set_xticklabels([\"male\", \"female\"])\nplt.show()","a55d3cc3":"plt.figure(figsize=(18, 12))\nplt.subplot(2, 3, 1)\nsns.scatterplot(x=data[\"CulmenDepth\"], y=data[\"CulmenLength\"], hue=data[\"Sex\"], palette='flare')\nplt.subplot(2, 3, 2)\nsns.kdeplot(x=data.Delta13C, y=data.Delta15N, hue=data[\"Island\"], shade=False, bw_adjust=.5, palette='flare')\nplt.subplot(2, 3, 3)\nsns.kdeplot(x=data[\"CulmenDepth\"], y=data[\"CulmenLength\"], hue=data[\"Island\"], shade=False, bw_adjust=.5, palette='flare')\nplt.subplot(2, 3, 4)\nsns.scatterplot(x=data[\"FlipperLength\"], y=data[\"BodyMass\"], hue=data[\"Sex\"], palette='flare')\nplt.subplot(2, 3, 5)\nsns.kdeplot(x=data[\"FlipperLength\"], y=data[\"BodyMass\"], cmap=\"Reds\", shade=True, bw_adjust=.5, palette='flare')\nplt.subplot(2, 3, 6)\nsns.kdeplot(x=data[\"FlipperLength\"], y=data[\"BodyMass\"], hue=data[\"Island\"], shade=False, bw_adjust=.5, palette='flare')","0675635a":"plt.figure(figsize=(16, 8))\nplt.subplot(1, 3, 1)\nsns.kdeplot(x=data.Delta13C, y=data.Delta15N, hue=data[\"Sex\"], shade=False, bw_adjust=.5, palette='flare')\nplt.subplot(1, 3, 2)\nsns.scatterplot(x=data[\"Delta13C\"], y=data[\"Delta15N\"], hue=data[\"Island\"], palette='flare')\nplt.subplot(1, 3, 3)\nsns.kdeplot(x=data.Delta13C, y=data.Delta15N, hue=data[\"Island\"], shade=False, bw_adjust=.5, palette='flare')","f5e2a019":"plt.title(\"Delta13C, Delta15N and the BodyMass colored by Sex\")\nsns.scatterplot(data=data, x=\"Delta13C\", y=\"Delta15N\", size=\"BodyMass\", hue=\"Sex\", legend=False, sizes=(1, 400), alpha=0.8, palette='flare')","c5adbc56":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\na=1\nplt.figure(figsize=(20, 10))\nfor i in data.columns:\n    plt.subplot(4, 3, a)\n    sns.distplot(data[i])\n    a += 1\nplt.show()","4c2aaa76":"# Shapiro-Wilk Test\nfor col in data:\n    stat, p = shapiro(data[col])\n    print(\"----------------------------------------------\")\n    print(col)\n    print('Statistics=%.3f, p=%.3f' % (stat, p))\n    alpha = 0.05\n    if p > alpha:\n        print('Sample looks Gaussian (fail to reject H0)')\n    else:\n        print('Sample does not look Gaussian (reject H0)')","ecab0010":"kelbow_visualizer(KMeans(random_state=20), data, k=(1,8))","a6e27116":"def sillouethe(data, max_clusters):\n    cluster=list(range(2, max_clusters))\n    for i in cluster:\n        model = KMeans(i)\n        visualizer = SilhouetteVisualizer(model)\n        visualizer.fit(data)\n        \n        visualizer.poof()\n\nsillouethe(data, 5)\n","bc23c8d9":"kelbow_visualizer(SpectralClustering(random_state=20), data, k=(1, 8))","dedfc1fb":"kmean_data = data.copy()","4dfbc388":"i = 1\nkmean_clusters = [[\"CulmenLength\", \"CulmenDepth\"], [\"FlipperLength\", \"BodyMass\"], [\"Delta15N\", \"Delta13C\"], [\"Delta15N\", \"BodyMass\"], \n            [\"Delta13C\", \"BodyMass\"], [\"CulmenLength\", \"FlipperLength\"]]\n\nplt.figure(figsize=(16, 10))\nfor cluster in kmean_clusters:\n    X_kmean = kmean_data[cluster]\n    kmeans = KMeans(n_clusters=3, random_state=14)\n    kmeans.fit(X_kmean)\n    y_kmeans = kmeans.predict(X_kmean)\n    kmean_data[f\"Cluster{i}\"] = y_kmeans\n    \n    plt.subplot(2, 3, i)\n    plt.subplots_adjust(hspace=0.3, wspace=0.3)\n    plt.title(f\"{i}.) Clustering by: {cluster}\")\n    sns.scatterplot(X_kmean.loc[:, cluster[0]], X_kmean.loc[:, cluster[1]], c=y_kmeans, s=50, cmap=\"flare\")\n    centers = kmeans.cluster_centers_\n    sns.scatterplot(centers[:, 0], centers[:, 1], s=200, color=\"k\", alpha=0.5)\n    i+=1\nplt.savefig(\"kmeans.png\")\nplt.show()\n","1ff69043":"kmean_data.head()","580c1ee8":"kmean_data = data.copy()","67fd45e4":"kmeans.fit(kmean_data)\n\nclusters=pd.DataFrame(kmean_data)\nclusters['label']=kmeans.labels_\npolar=clusters.groupby(\"label\").mean().reset_index()\npolar=pd.melt(polar,id_vars=[\"label\"])\nfig = px.line_polar(polar, r=\"value\", theta=\"variable\", color=\"label\", line_close=True)\nfig.show()","e4685b48":"kmean_data = data.copy()","897d1331":"# define your comparison axes -> cluster = [\"x-Axis\", \"y-Axis\"]\ncluster = [\"CulmenLength\", \"CulmenDepth\"]\nX_kmean = kmean_data[cluster]\n\n# for example 3 new value inputs -> Data has to be preprocessed like the .fit data\nnew_data_kmean = [[0.3, 0.6], [0.5, 0.4], [0.5, 0.8]]\nX_new_kmean = pd.DataFrame(new_data_kmean, columns = cluster).astype(float)\n\nkmeans = KMeans(n_clusters=3, random_state=14)\nkmeans.fit(X_kmean)\ny_kmeans = kmeans.predict(X_kmean)\n\n\nplt.title(f\"Clustering by: {cluster}\")\nsns.scatterplot(X_kmean.loc[:, cluster[0]], X_kmean.loc[:, cluster[1]], c=y_kmeans, s=50, cmap=\"flare\")\ncenters_kmean = kmeans.cluster_centers_\nsns.scatterplot(centers_kmean[:, 0], centers_kmean[:, 1], s=200, color=\"k\", alpha=0.5)\n\n# cluster and plot new values in scatterplot -> big dots\ny_new_kmean = kmeans.predict(X_new_kmean)\nsns.scatterplot(X_new_kmean.loc[:, cluster[0]], X_new_kmean.loc[:, cluster[1]], c=y_new_kmean, s=500, cmap=\"flare\")\n","efcaf0c8":"sc_data = data.copy()","cbc033b7":"i = 1\nsc_clusters = [[\"CulmenLength\", \"CulmenDepth\"], [\"FlipperLength\", \"BodyMass\"], [\"Delta15N\", \"Delta13C\"], [\"Delta15N\", \"BodyMass\"], \n            [\"Delta13C\", \"BodyMass\"], [\"CulmenLength\", \"FlipperLength\"]]\n\nplt.figure(figsize=(16, 10))\nfor cluster in sc_clusters:\n    X_sc = sc_data[cluster]\n    sc = SpectralClustering(n_clusters=3, random_state=14)\n    sc.fit(X_sc)\n    y_sc = sc.fit_predict(X_sc)\n    sc_data[f\"Cluster{i}\"] = y_sc\n    \n    plt.subplot(2, 3, i)\n    plt.subplots_adjust(hspace=0.3, wspace=0.3)\n    plt.title(f\"{i}.) Clustering by: {cluster}\")\n    sns.scatterplot(X_sc.loc[:, cluster[0]], X_sc.loc[:, cluster[1]], c=y_sc, s=50, cmap=\"flare\")\n    i+=1\nplt.savefig(\"spectralclustering.png\")\nplt.show()","e25c4731":"sc_data.head()","c007865c":"sc_data = data.copy()","d16d163b":"sc.fit(sc_data)\n\nsc_clusters=pd.DataFrame(sc_data)\nsc_clusters['label']=sc.labels_\nsc_polar=sc_clusters.groupby(\"label\").mean().reset_index()\nsc_polar=pd.melt(sc_polar,id_vars=[\"label\"])\nfig = px.line_polar(sc_polar, r=\"value\", theta=\"variable\", color=\"label\", line_close=True)\nfig.show()","dffbd8ba":"ms_data = data.copy()","0d76c5aa":"i = 1\nms_clusters = [[\"CulmenLength\", \"CulmenDepth\", \"FlipperLength\"], [\"FlipperLength\", \"BodyMass\"], [\"Delta15N\", \"Delta13C\"], [\"Delta15N\", \"BodyMass\"], \n            [\"Delta13C\", \"BodyMass\"], [\"CulmenLength\", \"FlipperLength\"]]\n\nplt.figure(figsize=(16, 10))\nfor cluster in ms_clusters:\n    X_ms = ms_data[cluster]\n    bandwidth = estimate_bandwidth(X_ms)\n    ms = MeanShift(bandwidth=bandwidth)\n    ms.fit(X_ms)\n    y_ms = ms.fit_predict(X_ms)\n    ms_data[f\"Cluster{i}\"] = y_ms\n    \n    plt.subplot(2, 3, i)\n    plt.subplots_adjust(hspace=0.3, wspace=0.3)\n    plt.title(f\"{i}.) Clustering by: {cluster}\")\n    sns.scatterplot(X_ms.loc[:, cluster[0]], X_ms.loc[:, cluster[1]], c=y_ms, s=50, cmap=\"flare\")\n    i+=1\nplt.savefig(\"meanshift.png\")\nplt.show()","a68193dc":"ms_data.head()","ba64c0c8":"ms_data = data.copy()","44595f17":"i = 1\nms_clusters = [[\"CulmenLength\", \"CulmenDepth\", \"FlipperLength\"], [\"BodyMass\", \"Delta15N\", \"Delta13C\"]]\n\nplt.figure(figsize=(16, 16))\nfor cluster in ms_clusters:\n    X_ms = ms_data[cluster]\n    bandwidth = estimate_bandwidth(X_ms)\n    ms = MeanShift(bandwidth=bandwidth)\n    ms.fit(X_ms)\n    y_ms = ms.fit_predict(X_ms)\n    ms_data[f\"Cluster{i}\"] = y_ms\n    \n    plt.subplot(2, 2, i)\n    plt.subplots_adjust(hspace=0.3, wspace=0.3)\n    plt.title(f\"{i}.) Clustering by: {cluster}\")\n    sns.scatterplot(X_ms.loc[:, cluster[0]], X_ms.loc[:, cluster[1]], c=y_ms, s=X_ms.loc[:, cluster[2]]*100, cmap=\"flare\")\n    i+=1\nplt.show()","14db6d55":"## Multi feature clustering","072f1154":"Mean shift is a procedure for locating the maxima\u2014the modes\u2014of a density function given discrete data sampled from that function. This is an iterative method, and we start with an initial estimate ${\\displaystyle x}$. Let a kernel function ${\\displaystyle K(x_{i}-x)} K(x_i - x)$  be given. This function determines the weight of nearby points for re-estimation of the mean. Typically a Gaussian kernel on the distance to the current estimate is used, ${\\displaystyle K(x_{i}-x)=e^{-c||x_{i}-x||^{2}}} K(x_i - x) = e^{-c||x_i - x||^2}$ . The weighted mean of the density in the window determined by ${\\displaystyle K}$ is ${\\displaystyle m(x)={\\frac {\\sum _{x_{i}\\in N(x)}K(x_{i}-x)x_{i}}{\\sum _{x_{i}\\in N(x)}K(x_{i}-x)}}}$ where ${\\displaystyle N(x)}$  is the neighborhood of ${\\displaystyle x}$, a set of points for which ${\\displaystyle K(x_{i}-x)\\neq 0}{\\displaystyle K(x_{i}-x)\\neq 0}$.\n\n[Source](https:\/\/en.wikipedia.org\/wiki\/Mean_shift)\n\n\n\n**According to this, we can't define any numbers of clusters.**","9dd8fd58":"# Conclusion","44cd1903":"Now we have finished 3 different Clusters, lets compare them!\n> It is obvious that each algorithm works differently and thus gives a different result. Which one to use is to be decided on the basis of the data and the logic of the algorithm. Unfortunately, I have little to no experience, but I would say that the K-Means is the best on average.\n\n\nK-Means | Spectral Clustering | Mean Shift\n:---------:|:---------:|:---------:\n![image](.\/kmeans.png) | ![image](.\/spectralclustering.png) | ![image](.\/meanshift.png)\n\n","c6c5a5ed":"# Spectral Clustering","1d226a17":"# Classify species of penguin (unsupervised learning)\n","0366b0a2":"## How to add a new row into the cluster","fc84b10a":"# Hypothesis 1: Not one of the columns are normal distributed\n\nThis will be evaluated by using the p-value measurement:\n\n${\\displaystyle p=2\\min\\{\\Pr(T\\geq t\\mid H_{0}),\\Pr(T\\leq t\\mid H_{0})\\}}$ for a two-sided test. If distribution ${\\displaystyle T}$ is symmetric about zero, then ${\\displaystyle p=\\Pr(|T|\\geq |t|\\mid H_{0})}{\\displaystyle p=\\Pr(|T|\\geq |t|\\mid H_{0})}$","16a9d86c":"# Visualizations","0af68ee7":"## For Spectral Clustering","211561fe":"## For KMeans","6e3728a6":"# Mean Shift Clustering","d620dc4c":"## 3D Clustering","b15ca250":"# Feature Engeneering","41ec8bc2":"## Why is the Delta15N and Delta13C important\nStable isotope values of carbon (delta13C) and nitrogen (delta15N) in blood, feathers, eggshell, and bone have been used in seabird studies since the 1980s, providing a valuable source of information on diet, foraging patterns, and migratory behavior in these birds. These techniques can also be applied to fossil material when preservation of bone and other tissues is sufficient. Excavations of abandoned Ad\u00e9lie penguin (Pygoscelis adeliae) colonies in Antarctica often provide well preserved remains of bone, feathers, and eggshell dating from hundreds to thousands of years B.P. \n\n\n\n\n[Source](https:\/\/pubmed.ncbi.nlm.nih.gov\/17620620\/)","420b6d5d":"## Multi feature clustering","8a15fa39":"## Deciding how many clusters we should use for this data.\n\nAccording to the Elbow method, we get 4 clusters. However, the Sillhouethe method shows the best results with 2-3 clusters. Therefore, we decided to use the median (= 3). There would also be the possibility to test 2, 3 and 4 clusters and make our decision when we see the results. However, this could lead to wrong decisions, as humans are trained to recognize patterns and such patterns may not exist.","00a85d8d":"# K-Means Clustering","26a7cb56":"Note: First time doing a clustering. There might be some errors. Any improvements appreciated!\n","74ad4ac8":"Note: Silhouette is comming soon...","a373bfba":"# Find out the number of clusters (= species)","ef76a911":"# Load data and transform"}}