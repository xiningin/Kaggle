{"cell_type":{"bfe8216f":"code","5f72e021":"code","0aa3dcab":"code","7329d97c":"code","88f820c0":"code","d71e80b5":"code","7708ff74":"code","f86dfdf2":"code","bef20893":"code","677b1cdb":"code","475c39bd":"code","9c4f3395":"code","8aedfbda":"code","243e0e26":"code","8a709f3a":"code","d1ced0c9":"code","e632a802":"code","b0d3f6ac":"code","1f00a406":"code","e1104520":"code","f8d4d04f":"code","cfbde152":"code","d4605244":"code","7e84c318":"code","eb529a9c":"code","44f7576b":"code","4c450b36":"code","92a5a379":"code","3f1a806c":"code","5ef22e2f":"code","5d92aecd":"code","cea7316a":"code","57d5ac66":"code","18b037c2":"code","eb8cad80":"code","42fbc684":"code","6a1dcc74":"code","4dc12143":"code","9735635a":"code","321b2b32":"code","61afe447":"code","c73008ee":"code","169a083e":"markdown","091c52cd":"markdown","2d378f9b":"markdown","fc8d97c5":"markdown","2613596d":"markdown","652ebca5":"markdown","d4493175":"markdown","70f82e48":"markdown","2336c81b":"markdown","3151bbbe":"markdown"},"source":{"bfe8216f":"import pandas as pd\nimport numpy as np\nimport numpy as np, pandas as pd\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import lag_plot\nplt.rcParams.update({'figure.figsize':(9,7), 'figure.dpi':120})\n\n# Now, we will load the data set and look at some initial rows and data types of the columns:\n#data = pd.read_csv('AirPassengers.csv')\ndf = pd.read_csv(\"..\/input\/timeseries\/time_series1.csv\", names=['value'], header=0)\n# Original Series\nfig, axes = plt.subplots(3, 2, sharex=True)\naxes[0, 0].plot(df.value); axes[0, 0].set_title('Original Series')\nplot_acf(df.value, ax=axes[0, 1])\n\n# 1st Differencing\naxes[1, 0].plot(df.value.diff()); axes[1, 0].set_title('1st Order Differencing')\nplot_acf(df.value.diff().dropna(), ax=axes[1, 1])\n\n# 2nd Differencing\naxes[2, 0].plot(df.value.diff().diff()); axes[2, 0].set_title('2nd Order Differencing')\nplot_acf(df.value.diff().diff().dropna(), ax=axes[2, 1])\n\nplt.show()\n","5f72e021":"import pandas as pd\nseries = pd.read_csv(\"..\/input\/timeseries\/time_series1.csv\", names=['value'], header=0)","0aa3dcab":"from pandas.plotting import lag_plot\nlag_plot(series)\npyplot.show()\n","7329d97c":"from pandas import DataFrame\nfrom pandas import concat\nfrom matplotlib import pyplot\nvalues = DataFrame(series.values)\ndataframe = concat([values.shift(1), values], axis=1)\ndataframe.columns = ['t-1', 't+1']\nresult = dataframe.corr()\nprint(result)","88f820c0":"from pandas import read_csv\nfrom matplotlib import pyplot\nfrom pandas.plotting import autocorrelation_plot\nseries = read_csv(\"..\/input\/timeseries\/time_series1.csv\", names=['value'], header=0)\nautocorrelation_plot(series)\npyplot.show()\n","d71e80b5":"import pandas as pd\ndf = pd.read_csv(\"..\/input\/timeseries\/time_series1.csv\", names=['value'], header=0)\nprint(df)\n","7708ff74":"from pandas import read_csv\nfrom matplotlib import pyplot\nfrom statsmodels.graphics.tsaplots import plot_acf\nplot_acf(series, lags=31)\npyplot.show()","f86dfdf2":"from pandas import read_csv\nfrom pandas import DataFrame\nfrom pandas import concat\nfrom matplotlib import pyplot\nfrom sklearn.metrics import mean_squared_error\nseries = read_csv('..\/input\/timeseries\/time_series1.csv', header=0, index_col=0)\n# create lagged dataset\nvalues = DataFrame(series.values)\ndataframe = concat([values.shift(1), values], axis=1)\ndataframe.columns = ['t-1', 't+1']\n# split into train and test sets\nX = dataframe.values\ntrain, test = X[1:len(X)-7], X[len(X)-7:]\ntrain_X, train_y = train[:,0], train[:,1]\ntest_X, test_y = test[:,0], test[:,1]\n\n# persistence model\ndef model_persistence(x):\n\treturn x\n\n# walk-forward validation\n\n\npredictions = list()\nfor x in test_X:\n\tyhat = model_persistence(x)\n\tpredictions.append(yhat)\ntest_score = mean_squared_error(test_y, predictions)\nprint('Test MSE: %.3f' % test_score)\n# plot predictions vs expected\npyplot.plot(test_y)\npyplot.plot(predictions, color='red')\npyplot.show()\n\n\n","bef20893":"print(train)\nprint(test)\nprint(predictions)\nprint(x)","677b1cdb":"import pandas as pd\nfrom pandas import datetime\nimport matplotlib.pyplot as plt","475c39bd":"def parser(x):\n    return datetime.strptime(x,'%Y-%m-%d')\nseries = pd.read_csv('..\/input\/timeseries2\/time_series2.csv',index_col=0,parse_dates=[0],date_parser=parser)\nseries.head()\n","9c4f3395":"series.plot()","8aedfbda":"from pandas import read_csv\nfrom pandas import datetime\nfrom matplotlib import pyplot\nfrom statsmodels.tsa.ar_model import AR\nfrom sklearn.metrics import mean_squared_error\n\ndef parser(x):\n    return datetime.strptime(x,'%Y-%m-%d')\nseries = pd.read_csv('..\/input\/timeseries2\/time_series2.csv',index_col=0,parse_dates=[0],date_parser=parser)\n# split dataset\nX = series.values\ntrain, test = X[1:len(X)-7], X[len(X)-7:]\n# train autoregression\nmodel = AR(train)\nmodel_fit = model.fit()\nprint('Lag: %s' % model_fit.k_ar)\nprint('Coefficients: %s' % model_fit.params)\n# make predictions\npredictions = model_fit.predict(start=len(train), end=len(train)+len(test)-1, dynamic=False)\nfor i in range(len(predictions)):\n\tprint('predicted=%f, expected=%f' % (predictions[i], test[i]))\nerror = mean_squared_error(test, predictions)\nprint('Test MSE: %.3f' % error)\n# plot results\npyplot.plot(test)\npyplot.plot(predictions, color='red')\npyplot.show()","243e0e26":"print(train)\nprint('all')\nprint(X)","8a709f3a":"import pandas as pd\nfrom pandas import read_csv\nfrom matplotlib import pyplot\nfrom statsmodels.tsa.ar_model import AR\nfrom sklearn.metrics import mean_squared_error\nfrom pandas import read_csv\nfrom pandas import datetime\n\ndef parser(x):\n    return datetime.strptime(x,'%Y-%m-%d')\nseries = pd.read_csv('..\/input\/timeseries2\/time_series2.csv',index_col=0,parse_dates=[0],date_parser=parser)\n\n# split dataset\nX = series.values\ntrain, test = X[1:len(X)-7], X[len(X)-7:]\n# train autoregression\nmodel = AR(train)\nmodel_fit = model.fit()\nwindow = model_fit.k_ar\ncoef = model_fit.params\n# walk forward over time steps in test\nhistory = train[len(train)-window:]\nhistory = [history[i] for i in range(len(history))]\npredictions = list()\nfor t in range(len(test)):\n\tlength = len(history)\n\tlag = [history[i] for i in range(length-window,length)]\n\tyhat = coef[0]\n\tfor d in range(window):\n\t\tyhat += coef[d+1] * lag[window-d-1]\n\tobs = test[t]\n\tpredictions.append(yhat)\n\thistory.append(obs)\n\tprint('predicted=%f, expected=%f' % (yhat, obs))\nerror = mean_squared_error(test, predictions)\nprint('Test MSE: %.3f' % error)\n# plot\npyplot.plot(test)\npyplot.plot(predictions, color='red')\npyplot.show()","d1ced0c9":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\n\nrs = np.random.RandomState(365)\nvalues = rs.randn(365, 4).cumsum(axis=0)\ndates = pd.date_range(\"1 1 2016\", periods=365, freq=\"D\")\ndata = pd.DataFrame(values, dates, columns=[\"A\", \"B\", \"C\", \"D\"])\ndata = data.rolling(7).mean()\n\nsns.lineplot(data=data, palette=\"tab10\", linewidth=2.5)","e632a802":"import seaborn as sns\nsns.set(style=\"ticks\")\n\ndots = sns.load_dataset(\"dots\")\n\n# Define a palette to ensure that colors will be\n# shared across the facets\npalette = dict(zip(dots.coherence.unique(),\n                   sns.color_palette(\"rocket_r\", 6)))\n\n# Plot the lines on two facets\nsns.relplot(x=\"time\", y=\"firing_rate\",\n            hue=\"coherence\", size=\"choice\", col=\"align\",\n            size_order=[\"T1\", \"T2\"], palette=palette,\n            height=5, aspect=.75, facet_kws=dict(sharex=False),\n            kind=\"line\", legend=\"full\", data=dots)","b0d3f6ac":"!pip install sunpy","1f00a406":"!pip install sunpy[all]\n","e1104520":"import sunpy.data.sample\nimport sunpy.map\naia = sunpy.map.Map(sunpy.data.sample.AIA_171_IMAGE)\naia.peek()","f8d4d04f":"autoplot(uschange[,\"Consumption\"]) +\n  xlab(\"Year\") + ylab(\"Quarterly percentage change\")","cfbde152":"import pandas as pd\nfrom pandas import read_csv\nfrom matplotlib import pyplot\nfrom statsmodels.tsa.ar_model import AR\nfrom sklearn.metrics import mean_squared_error\nfrom pandas import read_csv\nfrom pandas import datetime\nimport warnings\nimport itertools\nfrom pandas import read_csv\nimport pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')","d4605244":"import statsmodels.api as sm","7e84c318":"def parser(x):\n    return datetime.strptime(x,'%Y-%m-%d')\ndata = pd.read_csv('..\/input\/timeseries2\/time_series2.csv',index_col=0,parse_dates=[0],date_parser=parser)","eb529a9c":"y = data\ny.plot(figsize=(15, 6))\nplt.show()","44f7576b":"# Define the p, d and q parameters to take any value between 0 and 2\np = d = q = range(0, 2)\n\n# Generate all different combinations of p, q and q triplets\npdq = list(itertools.product(p, d, q))\n\n# Generate all different combinations of seasonal p, q and q triplets\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\n\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","4c450b36":"warnings.filterwarnings(\"ignore\") # specify to ignore warning messages\n\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(y,\n                                            order=param,\n                                            seasonal_order=param_seasonal,\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\n\n            results = mod.fit()\n\n            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n        except:\n            continue","92a5a379":"mod = sm.tsa.statespace.SARIMAX(y,\n                                order=(1, 1, 1),\n                                seasonal_order=(1, 1, 1, 12),\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\n\nresults = mod.fit()\n\nprint(results.summary().tables[1])","3f1a806c":"results.plot_diagnostics(figsize=(15, 12))\nplt.show()","5ef22e2f":"y","5d92aecd":"pred = results.get_prediction(start=pd.to_datetime('2008-06-01'), dynamic=False)\npred_ci = pred.conf_int()","cea7316a":"ax = y['2000':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7)\n\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\n\nax.set_xlabel('Date')\nax.set_ylabel('CO2 Levels')\nplt.legend()\n\nplt.show()","57d5ac66":"y_forecasted = pred.predicted_mean\ny_truth = y['2008-06-01':]\n\n# Compute the mean square error\nmse = ((y_forecasted - y_truth) ** 2).mean()\nprint('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))","18b037c2":"pred_dynamic = results.get_prediction(start=pd.to_datetime('2008-06-01'), dynamic=True, full_results=True)\npred_dynamic_ci = pred_dynamic.conf_int()","eb8cad80":"ax = y['2000':].plot(label='observed', figsize=(20, 15))\npred_dynamic.predicted_mean.plot(label='Dynamic Forecast', ax=ax)\n\nax.fill_between(pred_dynamic_ci.index,\n                pred_dynamic_ci.iloc[:, 0],\n                pred_dynamic_ci.iloc[:, 1], color='k', alpha=.25)\n\nax.fill_betweenx(ax.get_ylim(), pd.to_datetime('1998-01-01'), y.index[-1],\n                 alpha=.1, zorder=-1)\n\nax.set_xlabel('Date')\nax.set_ylabel('CO2 Levels')\n\nplt.legend()\nplt.show()","42fbc684":"# Extract the predicted and true values of our time series\ny_forecasted = pred_dynamic.predicted_mean\ny_truth = y['2008-06-01':]\n\n# Compute the mean square error\nmse = ((y_forecasted - y_truth) ** 2).mean()\nprint('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))","6a1dcc74":"# Get forecast 500 steps ahead in future\npred_uc = results.get_forecast(steps=500)\n\n# Get confidence intervals of forecasts\npred_ci = pred_uc.conf_int()","4dc12143":"ax = y.plot(label='observed', figsize=(20, 15))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Date')\nax.set_ylabel('USERS')\n\nplt.legend()\nplt.show()\n","9735635a":"import seaborn as sns\nsns.set(style=\"whitegrid\")\nsns.lineplot(data=data, palette=\"tab10\", linewidth=2.5)","321b2b32":"import pandas as pd\ndirect_link = 'http:\/\/www.randalolson.com\/wp-content\/uploads\/percent-bachelors-degrees-women-usa.csv'\nwomen_majors = pd.read_csv(direct_link)\nprint(women_majors.info())\nwomen_majors.head(20)","61afe447":"under_20 = women_majors.loc[0, women_majors.loc[0] < 20]\nunder_20","c73008ee":"under_20_graph = women_majors.plot(x = 'Year', y = under_20.index, figsize = (12,8))\nprint('Type:', type(under_20_graph))","169a083e":"above red colr as predicted and blue color as a real values\n","091c52cd":"# Fitting an ARIMA Time Series Model","2d378f9b":"**#persistance model for time series model**\n","fc8d97c5":"#continuesly new observation\n","2613596d":"#auto regression model using 7 records\n","652ebca5":"# autoregression with prediction\n","d4493175":"# matploatlib 538","70f82e48":"#Validating Forecasts","2336c81b":"#The ARIMA Time Series Model\nParameter Selection for the ARIMA Time Series Model","3151bbbe":"#ARIMA model"}}