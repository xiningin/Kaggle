{"cell_type":{"c0f959c4":"code","53aa8af1":"code","c395e7b6":"code","bd345559":"code","a11d78da":"code","3a897689":"code","89309d6b":"code","ba406e02":"code","b1c2a243":"code","32b06d13":"code","dcb8fcb3":"code","f1a2638f":"code","ccce0055":"code","743badb7":"code","aef6ab31":"code","63916407":"code","a55e6976":"code","8bc1dac6":"code","18816f42":"code","2a031ab5":"code","b1ff4f0d":"code","91f8ee98":"code","b2dc7167":"code","2b617672":"code","6869c6f4":"code","21d27ab1":"code","d0bfc286":"code","2235a016":"code","bd91539a":"code","7c580ba4":"code","709ae8b4":"code","90ed19e6":"code","3485e8f7":"markdown","b2634b7d":"markdown","d6041950":"markdown","44f5551f":"markdown","91d32dad":"markdown","68a8389a":"markdown"},"source":{"c0f959c4":"import pandas as pd\nimport numpy as np","53aa8af1":"! ls ..\/input\/tmdb-movie-metadata","c395e7b6":"#https:\/\/www.kaggle.com\/tmdb\/tmdb-movie-metadata\ncredits = pd.read_csv(\"..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv\")","bd345559":"movies_df = pd.read_csv(\"..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")","a11d78da":"credits.head()","3a897689":"movies_df.head()","89309d6b":"print(\"Credits:\",credits.shape)\nprint(\"Movies Dataframe:\",movies_df.shape)","ba406e02":"credits_column_renamed = credits.rename(index=str, columns={\"movie_id\": \"id\"})\nmovies_df_merge = movies_df.merge(credits_column_renamed, on='id')\nmovies_df_merge.head()","b1c2a243":"movies_cleaned_df = movies_df_merge.drop(columns=['homepage', 'title_x', 'title_y', 'status','production_countries'])\nmovies_cleaned_df.head()","32b06d13":"movies_cleaned_df.info()","dcb8fcb3":"# Calculate all the components based on the above formula\nv=movies_cleaned_df['vote_count']\nR=movies_cleaned_df['vote_average']\nC=movies_cleaned_df['vote_average'].mean()\nm=movies_cleaned_df['vote_count'].quantile(0.70)","f1a2638f":"movies_cleaned_df['weighted_average']=((R*v)+ (C*m))\/(v+m)","ccce0055":"movies_cleaned_df.head()","743badb7":"movie_sorted_ranking=movies_cleaned_df.sort_values('weighted_average',ascending=False)\nmovie_sorted_ranking[['original_title', 'vote_count', 'vote_average', 'weighted_average', 'popularity']].head(20)","aef6ab31":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nweight_average=movie_sorted_ranking.sort_values('weighted_average',ascending=False)\nplt.figure(figsize=(12,6))\naxis1=sns.barplot(x=weight_average['weighted_average'].head(10), y=weight_average['original_title'].head(10), data=weight_average)\nplt.xlim(4, 10)\nplt.title('Best Movies by average votes', weight='bold')\nplt.xlabel('Weighted Average Score', weight='bold')\nplt.ylabel('Movie Title', weight='bold')\nplt.savefig('best_movies.png')","63916407":"popularity=movie_sorted_ranking.sort_values('popularity',ascending=False)\nplt.figure(figsize=(12,6))\nax=sns.barplot(x=popularity['popularity'].head(10), y=popularity['original_title'].head(10), data=popularity)\n\nplt.title('Most Popular by Votes', weight='bold')\nplt.xlabel('Score of Popularity', weight='bold')\nplt.ylabel('Movie Title', weight='bold')\nplt.savefig('best_popular_movies.png')","a55e6976":"popularity.head()","8bc1dac6":"from sklearn.preprocessing import MinMaxScaler\n\nscaling=MinMaxScaler()\nmovie_scaled_df=scaling.fit_transform(movies_cleaned_df[['weighted_average','popularity']])\nmovie_normalized_df=pd.DataFrame(movie_scaled_df,columns=['weighted_average','popularity'])\nmovie_normalized_df.head()","18816f42":"movies_cleaned_df[['normalized_weight_average','normalized_popularity']]= movie_normalized_df","2a031ab5":"movies_cleaned_df.head()","b1ff4f0d":"movies_cleaned_df['score'] = movies_cleaned_df['normalized_weight_average'] * 0.5 + movies_cleaned_df['normalized_popularity'] * 0.5\nmovies_scored_df = movies_cleaned_df.sort_values(['score'], ascending=False)\nmovies_scored_df[['original_title', 'normalized_weight_average', 'normalized_popularity', 'score']].head(20)","91f8ee98":"\nscored_df = movies_cleaned_df.sort_values('score', ascending=False)\n\nplt.figure(figsize=(16,6))\n\nax = sns.barplot(x=scored_df['score'].head(10), y=scored_df['original_title'].head(10), data=scored_df, palette='deep')\n\n#plt.xlim(3.55, 5.25)\nplt.title('Best Rated & Most Popular Blend', weight='bold')\nplt.xlabel('Score', weight='bold')\nplt.ylabel('Movie Title', weight='bold')\n\nplt.savefig('scored_movies.png')","b2dc7167":"movies_cleaned_df.head(1)['overview']","2b617672":"from sklearn.feature_extraction.text import TfidfVectorizer\n\n# Using Abhishek Thakur's arguments for TF-IDF\ntfv = TfidfVectorizer(min_df=3,  max_features=None, \n            strip_accents='unicode', analyzer='word',token_pattern=r'\\w{1,}',\n            ngram_range=(1, 3),\n            stop_words = 'english')\n\n# Filling NaNs with empty string\nmovies_cleaned_df['overview'] = movies_cleaned_df['overview'].fillna('')","6869c6f4":"# Fitting the TF-IDF on the 'overview' text\ntfv_matrix = tfv.fit_transform(movies_cleaned_df['overview'])","21d27ab1":"tfv_matrix.shape","d0bfc286":"from sklearn.metrics.pairwise import sigmoid_kernel\n\n# Compute the sigmoid kernel\nsig = sigmoid_kernel(tfv_matrix, tfv_matrix)","2235a016":"# Reverse mapping of indices and movie titles\nindices = pd.Series(movies_cleaned_df.index, index=movies_cleaned_df['original_title']).drop_duplicates()","bd91539a":"indices","7c580ba4":"def give_rec(title, sig=sig):\n    # Get the index corresponding to original_title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores \n    sig_scores = list(enumerate(sig[idx]))\n\n    # Sort the movies \n    sig_scores = sorted(sig_scores, key=lambda x: x[1], reverse=True)\n\n    # Scores of the 10 most similar movies\n    sig_scores = sig_scores[1:11]\n\n    # Movie indices\n    movie_indices = [i[0] for i in sig_scores]\n\n    # Top 10 most similar movies\n    return movies_cleaned_df['original_title'].iloc[movie_indices]","709ae8b4":"# Testing our content-based recommendation system with the seminal film Spy Kids\ngive_rec('Spy Kids')","90ed19e6":"import pandas as pd\ntmdb_5000_credits = pd.read_csv(\"..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv\")\ntmdb_5000_movies = pd.read_csv(\"..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")","3485e8f7":"## Building a Basic Recommendation System","b2634b7d":"![image.png](attachment:image.png)\n\n\n                  Source: http:\/\/trailerpark.weebly.com\/imdb-rating.html?source=post_page---------------------------","d6041950":"Check out the turorial on recommendation sysytem using following link.please upvote if you like the kernel.\nAnd suggestions are always welcome.\n\nhttps:\/\/www.kaggle.com\/uttam94\/recommendation-system","44f5551f":"### Recommendation based on scaled weighted average and popularity score(Priority is given 50% to both)","91d32dad":"### Content Based Recommendation System\n\nNow lets make a recommendations based on the movie\u2019s plot summaries given in the overview column. So if our user gives us a movie title, our goal is to recommend movies that share similar plot summaries.","68a8389a":"### Using Weighted average for each movie's  Average Rating"}}