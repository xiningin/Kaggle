{"cell_type":{"37b56b16":"code","283932f5":"code","cc3181d9":"code","ebf01d57":"code","bbddb6af":"code","dbc694d1":"code","974e11c3":"code","37fb4b62":"code","dfa7e321":"code","365bd34f":"code","888b3f1c":"code","238f7580":"code","32a3f951":"code","d8bd4c4c":"code","0d6124af":"code","4e43ac07":"code","d1d8e45a":"code","c6db486f":"code","920d5e9a":"code","e0ba4d3c":"code","b60cd02e":"code","ba6580f5":"code","0fba39f1":"code","f1abf3a2":"code","b56e9b82":"code","b6bc8669":"code","9f5b79c7":"code","0874ab8b":"code","c1784d73":"code","ddfea001":"code","0326c4c0":"markdown","f6df8225":"markdown","1920ce8e":"markdown","7449f6fd":"markdown","5ab7991f":"markdown","fb4419a5":"markdown","98ebfdf6":"markdown","f206bb16":"markdown","033ade31":"markdown","98ed9e1b":"markdown","f38a1b43":"markdown","f9e3b210":"markdown","27a77bc2":"markdown","24036333":"markdown","a01f7133":"markdown","e2b78d3c":"markdown"},"source":{"37b56b16":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","283932f5":"import warnings\nwarnings.filterwarnings('ignore')","cc3181d9":"train_data = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/test.csv')\ny_train = train_data['label']\nX = train_data.drop(['label'],axis=1)\ndel train_data","ebf01d57":"Id = test_data['id']","bbddb6af":"test_data = test_data.drop(['id'],axis=1)","dbc694d1":"X.isnull().all().unique()","974e11c3":"y_train.isnull().any()","37fb4b62":"test_data.isnull().all().unique()","dfa7e321":"label_val = y_train.value_counts()\nplt.figure(figsize=(12,6))\nsns.barplot(x=label_val.index,y=label_val.values)","365bd34f":"X_temp = X.values.reshape(X.shape[0], 28, 28)","888b3f1c":"classes = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\nnum_classes = len(classes)\nsamples_per_class = 6\nplt.figure(0,figsize=(16,10))\nfor y, cls in enumerate(classes):\n    idxs = np.flatnonzero(y_train == y)\n    idxs = np.random.choice(idxs, samples_per_class, replace=False)\n    for i, idx in enumerate(idxs):\n        plt_idx = i * num_classes + y + 1\n        plt.subplot(samples_per_class, num_classes, plt_idx)\n        plt.imshow(X_temp[idx])\n        plt.axis('off')\n        if i == 0:\n            plt.title(cls)\nplt.show()","238f7580":"X = X.values.reshape(X.shape[0], 28, 28,1)\ntest_data = test_data.values.reshape(test_data.shape[0], 28, 28,1)","32a3f951":"from keras.preprocessing.image import ImageDataGenerator","d8bd4c4c":"datagen = ImageDataGenerator(\n        rotation_range= 8,  \n        zoom_range = 0.12,  \n        width_shift_range=0.1, \n        height_shift_range=0.1)\ndatagen.fit(X)","0d6124af":"from keras.models import Sequential\nfrom keras.layers import Conv2D, Dense, Dropout, BatchNormalization, Flatten, MaxPool2D\nfrom keras.utils.np_utils import to_categorical","4e43ac07":"y_train = to_categorical(y_train,num_classes=10)\n\nfrom keras.callbacks import ModelCheckpoint\ncheckpoint = ModelCheckpoint('BWeight.md5',monitor='val_loss',\n                            save_best_only=True)","d1d8e45a":"model = Sequential()\n\nmodel.add(Conv2D(32,kernel_size=3,activation='relu',input_shape=(28,28,1)))\nmodel.add(Conv2D(32,kernel_size=3,activation='relu'))\nmodel.add(MaxPool2D())\nmodel.add(Conv2D(32,kernel_size=5,strides=2,padding='same',activation='relu'))\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(64,kernel_size=3,activation='relu'))\nmodel.add(Conv2D(64,kernel_size=3,activation='relu'))\nmodel.add(MaxPool2D())\nmodel.add(Conv2D(64,kernel_size=5,strides=2,padding='same',activation='relu'))\nmodel.add(Dropout(0.4))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(10, activation='softmax'))","c6db486f":"model.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","920d5e9a":"from sklearn.model_selection import train_test_split\nX_train, X_val1, y_train, y_val1 = train_test_split(\n    X, y_train, test_size=0.05, random_state=42)","e0ba4d3c":"size_batch = 64","b60cd02e":"history = model.fit_generator(datagen.flow(X_train,y_train, batch_size=size_batch),\n                              epochs = 60,\n                              validation_data = (X_val1,y_val1),\n                              verbose = 2,\n                              steps_per_epoch = X_train.shape[0] \/\/ size_batch,\n                              callbacks=[checkpoint])","ba6580f5":"fig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","0fba39f1":"model.load_weights('BWeight.md5')","f1abf3a2":"extra_validation = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/Dig-MNIST.csv')","b56e9b82":"y_extra_validate = extra_validation['label']\nX_extra_validate = extra_validation.drop(['label'],axis=1)","b6bc8669":"X_extra_validate = X_extra_validate.values.reshape(X_extra_validate.shape[0], 28, 28,1)","9f5b79c7":"from sklearn.metrics import classification_report","0874ab8b":"print(classification_report(y_extra_validate,model.predict_classes(X_extra_validate)))","c1784d73":"FINAL_PREDS = model.predict_classes(test_data)","ddfea001":"submission = pd.DataFrame({ 'id': Id,\n                            'label': FINAL_PREDS })\nsubmission.to_csv(path_or_buf =\"Kannada_MNIST_KERAS.csv\", index=False)","0326c4c0":"Loading the data","f6df8225":"Designing the model","1920ce8e":"# Adding data Augmentation","7449f6fd":"Model's performance is good\nTherefore, amking final predictions from it","5ab7991f":"Loading best weights","fb4419a5":"Right now our data is flattened out, therefore we have to reshape it","98ebfdf6":"Splitting data","f206bb16":"# Final Predictions","033ade31":"Compiling the model","98ed9e1b":"Testing on extra validation data","f38a1b43":"Keras needs an additional dimension as it also take info about no. of color channel\nsince here we only have greyscale images , so we only need to add third dimension as 1","f9e3b210":"# Training","27a77bc2":"# Visualizations","24036333":"# Model","a01f7133":"# Extra validation","e2b78d3c":"Checking for null values"}}