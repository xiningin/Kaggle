{"cell_type":{"a4ed5751":"code","8f4d7525":"code","622f352b":"code","d2f0db06":"code","061ff435":"code","ee2edb31":"code","07f765cd":"code","f46c2629":"code","ea2f05ee":"code","61dfbfad":"code","500746bd":"code","217decea":"code","814d11f2":"code","5b6c0201":"code","7a398a80":"code","000f40bb":"code","632a6bd0":"code","ab9ba410":"code","4cd11f86":"code","62381e68":"code","a7307053":"code","53abd52b":"code","4186d592":"code","9ee87252":"code","737d49e8":"code","a875586c":"code","278d7313":"code","78819ac5":"code","b67953cc":"code","710aab73":"code","6ffbc9fd":"code","fde1518e":"code","24e07459":"code","5fc1b4f0":"code","207b0c18":"markdown","65dfb862":"markdown"},"source":{"a4ed5751":"#import necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import MinMaxScaler,StandardScaler, OneHotEncoder\nfrom sklearn.model_selection import train_test_split, cross_val_score, RepeatedKFold, GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LinearRegression, SGDRegressor, Ridge, Lasso, ElasticNet\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error, mean_absolute_error, mean_squared_log_error","8f4d7525":"#loading dataset\nsubmission = pd.read_csv('..\/input\/bike-sharing-demand\/sampleSubmission.csv')\ntrain_data = pd.read_csv('..\/input\/bike-sharing-demand\/train.csv')\ntest_data = pd.read_csv('..\/input\/bike-sharing-demand\/test.csv')","622f352b":"print('Train Shape: ', train_data.shape)\nprint('Test Shape: ', test_data.shape)","d2f0db06":"train_data.sample(5)","061ff435":"X = train_data.iloc[:, 0:9]\nY = train_data['count']\n\nprint('Train X Shape: ', X.shape)\nprint('Train Y Shape: ', Y.shape)\nprint('Test Shape: ', test_data.shape)","ee2edb31":"#check missing value\ntrain_data.isna().sum(axis=0)","07f765cd":"sns.displot(Y, kde=True)","f46c2629":"sns.displot(np.log(Y), kde=True)","ea2f05ee":"sns.histplot(X.season, bins=4)","61dfbfad":"sns.displot(X.temp, kde=True)","500746bd":"sns.displot(X.atemp, kde=True)","217decea":"sns.displot(X.windspeed, kde=True)","814d11f2":"sns.displot(X.humidity, kde=True)","5b6c0201":"from sklearn.base import BaseEstimator, TransformerMixin\nimport calendar\nfrom datetime import datetime\n\nclass ProcessDateTime(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        print('Transforming datetime...')\n        \n        x_copy = X.copy()\n        x_copy['month'] = x_copy.datetime.apply(lambda x : calendar.month_name[datetime.strptime(x,\"%Y-%m-%d %H:%M:%S\").weekday()])\n        x_copy['weekday'] = x_copy.datetime.apply(lambda x : calendar.day_name[datetime.strptime(x,\"%Y-%m-%d %H:%M:%S\").weekday()])\n        x_copy['hour'] = x_copy.datetime.apply(lambda x : datetime.strptime(x,\"%Y-%m-%d %H:%M:%S\").hour)\n        x_copy['minute'] = x_copy.datetime.apply(lambda x : datetime.strptime(x,\"%Y-%m-%d %H:%M:%S\").minute)\n        x_copy = x_copy.drop(['datetime'], axis=1)\n        \n        return x_copy","7a398a80":"pipeline = Pipeline([\n    ('datetime', ProcessDateTime())\n])\n\npipeline.fit_transform(X)","000f40bb":"class ProcessSeasonWeather(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        print('Transforming season and weather...')\n        x_copy = X.copy()\n        x_copy['season'] = x_copy['season'].map({\n            1: 'Spring',\n            2: 'Summer',\n            3: 'Fall',\n            4: 'Winter'\n        })\n        x_copy['weather'] = x_copy['weather'].map({\n            1: \"Clear+FewClouds+PartlyCloudy,PartlyCloudy\",\n            2: \"Mist+Cloudy,Mist+BrokenClouds,Mist+FewClouds,Mist\",\n            3: \"LightSnow,LightRain+Thunderstorm+ScatteredClouds,LightRain+ScatteredClouds\",\n            4: \"HeavyRain+IcePallets+Thunderstorm+Mist,Snow+Fog\" \n        })\n        return x_copy","632a6bd0":"pipeline = Pipeline([\n    ('datetime', ProcessDateTime()),\n    ('seasonweather', ProcessSeasonWeather())\n])","ab9ba410":"pipeline.fit_transform(X)","4cd11f86":"class DummyEncoding(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        print('Dummy encoding...')\n        x_copy = X.copy()\n        x_copy = pd.get_dummies(x_copy)\n        return x_copy\n\n    \nclass RemoveFeature(BaseEstimator, TransformerMixin):\n    def __init__(self, features=[]):\n        self._features = features\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        print('Removing features...')\n        x_copy = X.copy()\n        for f in self._features:\n            if f in x_copy.columns:\n                x_copy = x_copy.drop([f], axis=1)\n        return x_copy","62381e68":"pipeline = Pipeline([\n    ('datetime', ProcessDateTime()),\n    ('seasonweather', ProcessSeasonWeather()),\n    ('dummyencode', DummyEncoding()),\n    ('removefeature', RemoveFeature(features=['windspeed']))\n])","a7307053":"pipeline.fit_transform(X)\n","53abd52b":"pipeline = Pipeline([\n    ('datetime', ProcessDateTime()),\n    ('seasonweather', ProcessSeasonWeather()),\n    ('dummyencode', DummyEncoding()),\n    ('removefeature', RemoveFeature(features=['windspeed'])),\n    ('scaler', StandardScaler())\n])","4186d592":"pipeline.fit_transform(X)","9ee87252":"pipeline = Pipeline([\n    ('datetime', ProcessDateTime()),\n    ('seasonweather', ProcessSeasonWeather()),\n    ('dummyencode', DummyEncoding()),\n    ('removefeature', RemoveFeature(['windspeed'])),\n    ('scaler', MinMaxScaler())\n])\n\npipeline.fit(X)\nX = pipeline.transform(X)\nX_test = pipeline.transform(test_data)","737d49e8":"print(X.shape)\nprint(X_test.shape)","a875586c":"pd.DataFrame(X)","278d7313":"#Modeling\nlr = LinearRegression()\nsgd = SGDRegressor()\nrr = Ridge()\nls = Lasso()\nen = ElasticNet()","78819ac5":"import sklearn\nsklearn.metrics.SCORERS.keys()","b67953cc":"#crossvalidation\ncv = RepeatedKFold(n_splits=5, n_repeats=1, random_state=27)\n\ngrid_ridge_lasso = {\n    'alpha': np.arange(0, 1, 0.05)\n}\n\ngrid_elastic = {\n    'alpha': np.arange(0, 1, 0.05),\n    'l1_ratio': np.arange(0, 1, 0.05)\n}\n\nlr_score = cross_val_score(lr, X, np.log(Y+0.0001), cv=cv, scoring='neg_mean_squared_log_error')\nsgd_score = cross_val_score(sgd, X, np.log(Y+0.0001), cv=cv, scoring='neg_mean_squared_log_error')\n\nrr_search = GridSearchCV(rr, grid_ridge_lasso, cv=cv, scoring='neg_mean_squared_log_error')\nrr_score = rr_search.fit(X, np.log(Y+0.0001))\n\nls_search = GridSearchCV(ls, grid_ridge_lasso, cv=cv, scoring='neg_mean_squared_log_error')\nls_score = ls_search.fit(X, np.log(Y+0.0001))\n\nen_search = GridSearchCV(en, grid_elastic, cv=cv, scoring='neg_mean_squared_log_error')\nen_score = en_search.fit(X, np.log(Y+0.0001))","710aab73":"print(np.mean(lr_score))\nprint(np.mean(sgd_score))\n\nprint(rr_score.best_score_)\nprint(ls_score.best_score_)\nprint(en_score.best_score_)","6ffbc9fd":"np.exp(rr_score.best_estimator_.predict(X_test))","fde1518e":"predictions = np.exp(rr_score.best_estimator_.predict(X_test))\npredictions = predictions.astype('int')","24e07459":"predictions","5fc1b4f0":"pd.DataFrame({\n    'datetime': test_data.datetime,\n    'count': predictions\n})\nsubmission.to_csv('\/kaggle\/working\/submission.csv', index=False)","207b0c18":"# Explority analysis","65dfb862":"# Preprocessing & Feature Engineering with Pipeline"}}