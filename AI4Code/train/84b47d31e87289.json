{"cell_type":{"a108c0e1":"code","8d376639":"code","9e2a62a0":"code","0da459cc":"code","d0d659a1":"code","a0ae3a5e":"code","91567f63":"code","694b41e8":"code","dbf2e7b7":"code","b4f97084":"code","ab7d526e":"code","b452f03e":"code","46c88855":"code","3971853a":"code","b277df92":"code","1d58114d":"code","99cb25d8":"code","bd5c87c1":"code","cd37a31b":"code","4ede0651":"code","177083a8":"code","d3026c0f":"markdown","f48772e7":"markdown","bdc8da51":"markdown","22d2bcd6":"markdown"},"source":{"a108c0e1":"from sklearn.model_selection import train_test_split\nimport cv2\nimport matplotlib.pyplot as plt\nimport keras\nfrom keras.preprocessing.image import img_to_array","8d376639":"import numpy as np\nimport pandas as pd\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))","9e2a62a0":"train_df=pd.read_csv('..\/input\/plant-pathology-2020-fgvc7\/train.csv')\ntest_df=pd.read_csv('..\/input\/plant-pathology-2020-fgvc7\/test.csv')","0da459cc":"train_df.head()","d0d659a1":"target_df = train_df[['healthy', 'multiple_diseases', 'rust', 'scab']]\ntest_ids = test_df['image_id']","a0ae3a5e":"img_size = 224\n\ntrain_imgs = []\n\nfor name in train_df['image_id']:\n    path = '..\/input\/plant-pathology-2020-fgvc7\/images\/' + name + '.jpg'\n    img = cv2.imread(path)\n    image = cv2.resize(img,(img_size,img_size),interpolation=cv2.INTER_AREA)\n    train_imgs.append(image)","91567f63":"fig, ax = plt.subplots(1, 4, figsize=(15, 15))\nfor i in range(4):\n    ax[i].set_axis_off()\n    ax[i].imshow(train_imgs[i])","694b41e8":"test_imgs = []\nfor name in test_df['image_id']:\n    path = '..\/input\/plant-pathology-2020-fgvc7\/images\/' + name + '.jpg'\n    img = cv2.imread(path)\n    image = cv2.resize(img,(img_size,img_size),interpolation=cv2.INTER_AREA)\n    test_imgs.append(image)","dbf2e7b7":"fig, ax = plt.subplots(1, 4, figsize=(15, 15))\nfor i in range(4):\n    ax[i].set_axis_off()\n    ax[i].imshow(test_imgs[i])    ","b4f97084":"X_train = np.ndarray(shape=(len(train_imgs), img_size, img_size, 3),dtype = np.float32)\n\nfor i, image in enumerate(train_imgs):\n    X_train[i] = img_to_array(image)\n    X_train[i] = train_imgs[i]\n\nX_train = X_train\/255\nprint('Train Shape: {}'.format(X_train.shape))","ab7d526e":"X_test = np.ndarray(shape=(len(test_imgs), img_size, img_size, 3),dtype = np.float32)\n\nfor i, image in enumerate(test_imgs):\n    X_test[i] = img_to_array(image)\n    X_test[i] = test_imgs[i]\n    \nX_test = X_test\/255\nprint('Test Shape: {}'.format(X_test.shape))","b452f03e":"y_train = train_df.copy()\ndel y_train['image_id']\ny_train.head()","46c88855":"X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\n\nX_train.shape, X_val.shape","3971853a":"from keras.callbacks import ReduceLROnPlateau\nfrom keras.callbacks import EarlyStopping\nfrom keras.callbacks import ModelCheckpoint\n\nlr_reduce=ReduceLROnPlateau(monitor='val_accuracy',\n                            factor=.5,\n                            patience=10,\n                            min_lr=.000001,\n                            verbose=1)\n\nes_monitor=EarlyStopping(monitor='val_loss',\n                          patience=20)\n\nmdl_check = ModelCheckpoint('best_model.h5', \n                            monitor='accuracy', \n                            verbose=0, \n                            save_best_only=True, \n                            mode='max')","b277df92":"# from tensorflow.keras.applications import InceptionResNetV2\nfrom tensorflow.keras.applications import Xception\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D\n \n\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\n\nreg = 0.0005\n\n# net = InceptionResNetV2(weights= 'imagenet', include_top=False, input_shape= (img_size,img_size,3))\nnet = Xception(weights='imagenet', include_top=False, input_shape=(img_size, img_size, 3))\nx = net.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(128, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\nx = Dense(64, activation=\"relu\")(x)\nx = Dense(32, activation=\"relu\")(x)\npredictions = Dense(4, activation= 'softmax')(x)\nmodel = Model(inputs = net.input, outputs = predictions)\n\nmodel.summary()","1d58114d":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","99cb25d8":"from keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(rotation_range=45,\n                            shear_range=.25,\n                            zoom_range=.25,\n                            width_shift_range=.25,\n                            height_shift_range=.25,\n                            rescale=1\/255,\n                            brightness_range=[.5,1.5],\n                            horizontal_flip=True,\n                            vertical_flip=True,\n                            fill_mode='nearest')","bd5c87c1":"history = model.fit_generator(datagen.flow(X_train, y_train, batch_size=24),\n                              epochs = 50,\n                              steps_per_epoch = X_train.shape[0] \/\/ 24,\n                              verbose = 1,\n                              callbacks = [es_monitor,lr_reduce, mdl_check],\n                              validation_data = datagen.flow(X_val, y_val,batch_size=24),\n                              validation_steps = X_val.shape[0] \/\/24)","cd37a31b":"h = history.history\n\noffset = 5\nepochs = range(offset, len(h['loss']))\n\nplt.figure(1, figsize=(12, 12))\n\nplt.subplot(211)\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.plot(epochs, h['loss'][offset:], label='train')\nplt.plot(epochs, h['val_loss'][offset:], label='val')\nplt.legend()\n\nplt.subplot(212)\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.plot(h[f'accuracy'], label='train')\nplt.plot(h[f'val_accuracy'], label='val')\nplt.legend()\n\nplt.show()","4ede0651":"y_pred = model.predict(X_test)","177083a8":"sub_df = pd.read_csv('..\/input\/plant-pathology-2020-fgvc7\/sample_submission.csv')\nsub_df.loc[:, 'healthy':] = y_pred\nsub_df.to_csv('submission.csv', index=False)\nsub_df.head()","d3026c0f":"**Image processing**","f48772e7":"**Set Callbacks**","bdc8da51":"**Split training set**","22d2bcd6":"**Image Data Augmentation and fit model**"}}