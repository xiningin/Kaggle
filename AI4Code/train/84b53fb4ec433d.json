{"cell_type":{"ca8a7e63":"code","7f2e32e6":"code","b8136834":"code","ae132544":"code","3b6c4ae6":"code","c8df27d1":"code","4449fc62":"code","64d4b6b8":"code","7172cdbc":"code","2992abe1":"code","2b82a0c7":"code","fa3735c1":"code","d1b54598":"code","0af1ad3c":"code","61cbacbb":"markdown","c1b53e18":"markdown","c31dbda0":"markdown","f43dad05":"markdown","b776ab34":"markdown","ce8c8eaa":"markdown","0b48a242":"markdown","19595d9b":"markdown"},"source":{"ca8a7e63":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2\nimport os\n","7f2e32e6":"df = pd.read_csv('..\/input\/train.csv')\nX_test = pd.read_csv('..\/input\/test.csv')\ndf.head()","b8136834":"df.label.value_counts().plot.bar()","ae132544":"#X_train is Input Vector for Training and y_train is corresponding output of X_train\nX_train = df.drop(labels =[\"label\"],axis = 1)\ny_train = df.label\nX_train","3b6c4ae6":"X_train = X_train.apply(lambda x:x.values.reshape(28,28),axis=1)\nX_test = X_test.apply(lambda x:x.values.reshape(28,28),axis=1)","c8df27d1":"from skimage import feature,img_as_ubyte\nfor img in X_train.head(5):\n    img = img.astype('uint8')\n    img = img_as_ubyte(img)\n    plt.figure()\n    plt.imshow(img,cmap='gray')","4449fc62":"def calculateHog(img):\n    winSize = (10,10)\n    blockSize = (5,5)\n    blockStride = (5,5)\n    cellSize = (5,5)\n    nbins = 9\n    derivAperture = 1\n    winSigma = -1.\n    histogramNormType = 0\n    L2HysThreshold = 0.2\n    gammaCorrection = 1\n    nlevels = 64\n    signedGradients = True\n    hog = cv2.HOGDescriptor(winSize,blockSize,blockStride,cellSize,nbins,derivAperture,winSigma,histogramNormType,L2HysThreshold,gammaCorrection,nlevels, signedGradients)\n    descriptor = hog.compute(img)\n    return descriptor","64d4b6b8":"X_train = X_train.apply(lambda x:calculateHog(x.astype('uint8')).T[0])\nX_test = X_test.apply(lambda x:calculateHog(x.astype('uint8')).T[0])","7172cdbc":"X_train = pd.DataFrame.from_records(X_train.values)\nX_test = pd.DataFrame.from_records(X_test.values)\nprint(X_train.shape)","2992abe1":"from sklearn.svm import LinearSVC\nclassifier = LinearSVC(max_iter=10000)\nclassifier.fit(X_train,y_train)","2b82a0c7":"y_pred = classifier.predict(X_train)","fa3735c1":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_train,y_pred))","d1b54598":"y_test = classifier.predict(X_test)","0af1ad3c":"df = pd.DataFrame(y_test,columns=['Label'])\ndf['ImageId'] = df.index+1\ndf = df[['ImageId','Label']]\ndf.to_csv('final_submission.csv',index=False)","61cbacbb":"### Function for Calculating HOG(Histogram of oriented gradient)\nhttps:\/\/www.learnopencv.com\/histogram-of-oriented-gradients\/","c1b53e18":"### Five Images from top ","c31dbda0":"### Importing Dataset","f43dad05":"# Digit Recognition using Hog Descriptor and LinearSVC with Submission Score- 0.97600","b776ab34":"### Creating Dataframe with HOG Descriptors","ce8c8eaa":"#### Converting Each set of pixel into Image(Matrix)","0b48a242":"### Importing Libraries","19595d9b":"### Calculating HOG for Train and Test Image"}}