{"cell_type":{"f7ee5e16":"code","e0820b6e":"code","8f65c202":"code","143ca010":"code","73199ee0":"code","a892b795":"code","11791ddc":"code","72ed99d0":"code","11c25aee":"code","21a9cbd7":"code","45b90cda":"code","61a38cce":"code","e54fae49":"code","9995d6fb":"code","459803ee":"code","bf684ebf":"code","90860b6f":"code","0df9ec1b":"code","8689dd8b":"code","a4ff8509":"code","404802ee":"markdown","8768b7b3":"markdown","6d6ee317":"markdown"},"source":{"f7ee5e16":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e0820b6e":"import numpy as np\nimport pandas as pd\nimport gc\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn import model_selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import RobustScaler\n\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom catboost import CatBoostRegressor\n\nfrom IPython.display import display # Allows the use of display() for DataFrames\n\nimport warnings\nwarnings.filterwarnings('ignore')","8f65c202":"train_df = pd.read_csv('\/kaggle\/input\/fupin5\/fupin5\/train5.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/fupin5\/fupin5\/test5.csv')","143ca010":"train_df.head()","73199ee0":"test_df.head()","a892b795":"train_df.info()","11791ddc":"test_df.info()","72ed99d0":"print(\"Total Train Features with NaN Values = \" + str(train_df.columns[train_df.isnull().sum() != 0].size))\nif (train_df.columns[train_df.isnull().sum() != 0].size):\n    print(\"Features with NaN => {}\".format(list(train_df.columns[train_df.isnull().sum() != 0])))\n    train_df[train_df.columns[train_df.isnull().sum() != 0]].isnull().sum().sort_values(ascending = False)","11c25aee":"print(\"Total Test Features with NaN Values = \" + str(test_df.columns[test_df.isnull().sum() != 0].size))\nif (test_df.columns[test_df.isnull().sum() != 0].size):\n    print(\"Features with NaN => {}\".format(list(test_df.columns[test_df.isnull().sum() != 0])))\n    test_df[test_df.columns[test_df.isnull().sum() != 0]].isnull().sum().sort_values(ascending = False)","21a9cbd7":"X_train = train_df.drop([\"ss_2020\"], axis=1)\ny_train = train_df[\"ss_2020\"]\n\nX_test = test_df","45b90cda":"dev_X, val_X, dev_y, val_y = train_test_split(X_train, y_train, test_size = 0.1, random_state = 42)","61a38cce":"def run_lgb(train_X, train_y, val_X, val_y, test_X):\n    params = {\n        \"objective\" : \"regression\",\n        \"metric\" : \"rmse\",\n        \"num_leaves\" : 40,\n        \"learning_rate\" : 0.004,\n        \"bagging_fraction\" : 0.6,\n        \"feature_fraction\" : 0.6,\n        \"bagging_frequency\" : 6,\n        \"bagging_seed\" : 42,\n        \"verbosity\" : -1,\n        \"seed\": 42\n    }\n    \n    lgtrain = lgb.Dataset(train_X, label=train_y)\n    lgval = lgb.Dataset(val_X, label=val_y)\n    evals_result = {}\n    model = lgb.train(params, lgtrain, 5000, \n                      valid_sets=[lgtrain, lgval], \n                      early_stopping_rounds=100, \n                      verbose_eval=150, \n                      evals_result=evals_result)\n    \n    pred_test_y = np.expm1(model.predict(test_X, num_iteration=model.best_iteration))\n    return pred_test_y, model, evals_result","e54fae49":"pred_test, model, evals_result = run_lgb(dev_X, dev_y, val_X, val_y, X_test)\nprint(\"LightGBM Training Completed...\")","9995d6fb":"def run_xgb(train_X, train_y, val_X, val_y, test_X):\n    params = {'objective': 'reg:linear', \n          'eval_metric': 'rmse',\n          'eta': 0.001,\n          'max_depth': 10, \n          'subsample': 0.6, \n          'colsample_bytree': 0.6,\n          'alpha':0.001,\n          'random_state': 42, \n          'silent': True}\n    \n    tr_data = xgb.DMatrix(train_X, train_y)\n    va_data = xgb.DMatrix(val_X, val_y)\n    \n    watchlist = [(tr_data, 'train'), (va_data, 'valid')]\n    \n    model_xgb = xgb.train(params, tr_data, 2000, watchlist, maximize=False, early_stopping_rounds = 100, verbose_eval=100)\n    \n    dtest = xgb.DMatrix(test_X)\n    xgb_pred_y = np.expm1(model_xgb.predict(dtest, ntree_limit=model_xgb.best_ntree_limit))\n    \n    return xgb_pred_y, model_xgb","459803ee":"pred_test_xgb, model_xgb = run_xgb(dev_X, dev_y, val_X, val_y, X_test)\nprint(\"XGB Training Completed...\")","bf684ebf":"cb_model = CatBoostRegressor(iterations=500,\n                             learning_rate=0.05,\n                             depth=10,\n                             eval_metric='RMSE',\n                             random_seed = 42,\n                             bagging_temperature = 0.2,\n                             od_type='Iter',\n                             metric_period = 50,\n                             od_wait=20)","90860b6f":"cb_model.fit(dev_X, dev_y,\n             eval_set=(val_X, val_y),\n             use_best_model=True,\n             verbose=50)","0df9ec1b":"pred_test_cat = np.expm1(cb_model.predict(X_test))","8689dd8b":"sub = pd.read_csv('\/kaggle\/input\/fupin5\/fupin5\/test5.csv')\n\nsub_lgb = pd.DataFrame()\nsub_lgb[\"ss_2020\"] = pred_test\n\nsub_xgb = pd.DataFrame()\nsub_xgb[\"ss_2020\"] = pred_test_xgb\n\nsub_cat = pd.DataFrame()\nsub_cat[\"ss_2020\"] = pred_test_cat\n\nsub[\"ss_2020\"] = (sub_lgb[\"ss_2020\"] * 0.5 + sub_xgb[\"ss_2020\"] * 0.3 + sub_cat[\"ss_2020\"] * 0.2)","a4ff8509":"print(sub)","404802ee":"XGB","8768b7b3":"LGB","6d6ee317":"Catboost"}}