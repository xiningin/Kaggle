{"cell_type":{"8243016b":"code","74c6565d":"code","329236ff":"code","4cb36b6c":"code","849a9d84":"code","896be316":"code","c2fe8a89":"code","415a68e2":"code","ab8063f0":"code","b39232d4":"code","f5b3d5da":"code","07b98a3c":"code","a7769390":"code","12f34557":"code","3ff01735":"code","fa9d2f76":"code","f616147f":"code","202a9084":"code","2f05d505":"code","149ae08c":"code","5e045118":"code","7b650b31":"code","2247515e":"code","9b1a5634":"code","406de008":"code","8914d4a2":"code","b77638da":"code","8041a7ac":"code","7a68f87e":"code","089ab48e":"code","a33c6ff2":"code","9cda0efb":"code","8bacc1a3":"code","930d4bce":"code","e34534df":"code","ad7d332d":"code","6bc5a4a9":"code","d115c59c":"code","499a7a70":"code","1bc9de2a":"code","d912b980":"code","70636d56":"code","86e21c05":"code","1155f87c":"code","8f4b8931":"code","1c011d82":"code","9cc4c3fc":"markdown","7dcf1c30":"markdown","9afc4be0":"markdown","1a7e71f2":"markdown","abce0e31":"markdown","e5eefbfc":"markdown","a5d14607":"markdown","2b6c90f1":"markdown","ac6e609f":"markdown","46177c56":"markdown","a63cb76d":"markdown","20e6d863":"markdown","6629ff2c":"markdown","90c4270d":"markdown","420ddfab":"markdown","41a46df5":"markdown","a3b31aee":"markdown","3092f553":"markdown","d3482937":"markdown"},"source":{"8243016b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","74c6565d":"# We are reading our data\ndf = pd.read_csv(\"..\/input\/bankfullcsv\/bank-full.csv\")","329236ff":"# First 10 rows of our data\ndf.head(10)","4cb36b6c":"df['default'] = df['default'].map( \n                   {'yes':1 ,'no':0}) \ndf['housing'] = df['housing'].map( \n                   {'yes':1 ,'no':0}) \ndf['loan'] = df['loan'].map( \n                   {'yes':1 ,'no':0}) \ndf['Target'] = df['Target'].map( \n                   {'yes':1 ,'no':0}) ","849a9d84":"# First 5 rows of our data\ndf.head()","896be316":"df.Target.value_counts()","c2fe8a89":"df.loan.value_counts()","415a68e2":"sns.countplot(x=\"Target\", data=df, palette=\"bwr\")\nplt.show()","ab8063f0":"countNoLoan = len(df[df.Target == 0])\ncountHaveLoan = len(df[df.Target == 1])\nprint(\"Percentage of Customer can't Have a Loan: {:.2f}%\".format((countNoLoan \/ (len(df.Target))*100)))\nprint(\"Percentage of Customer can Have a Loan: {:.2f}%\".format((countHaveLoan \/ (len(df.Target))*100)))","b39232d4":"sns.countplot(x=\"loan\", data=df, palette=\"bwr\")\nplt.show()","f5b3d5da":"countNANLoan = len(df[df.loan == 0])\ncountOKLoan = len(df[df.loan == 1])\nprint(\"Percentage of Customer can't Have a Loan: {:.2f}%\".format((countNoLoan \/ (len(df.loan))*100)))\nprint(\"Percentage of Customer can Have a Loan: {:.2f}%\".format((countHaveLoan \/ (len(df.loan))*100)))","07b98a3c":"df.groupby('Target').mean()","a7769390":"pd.crosstab(df.age,df.Target).plot(kind=\"bar\",figsize=(20,6))\nplt.title('Loan may accepted Frequency for Ages')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.savefig('heartDiseaseAndAges.png')\nplt.show()","12f34557":"pd.crosstab(df.housing,df.Target).plot(kind=\"bar\",figsize=(15,6),color=['#1CA53B','#AA1111' ])\nplt.title('Loan may accepted Frequency for Housing')\nplt.xlabel('housing (\"no\" = Have no house , \"yes\" = Have House)')\nplt.xticks(rotation=0)\nplt.legend([\"Have no house\", \"Have House\"])\nplt.ylabel('Frequency')\nplt.show()","3ff01735":"plt.scatter(x=df.age[df.Target== 1], y=df.default[(df.Target== 1)], c=\"red\")\nplt.scatter(x=df.age[df.Target== 0], y=df.default[(df.Target== 0)])\nplt.legend([\"Loan\", \"Not Loan\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","fa9d2f76":"plt.scatter(x=df.age[df.Target== 1], y=df.balance[(df.Target== 1)], c=\"red\")\nplt.scatter(x=df.age[df.Target== 0], y=df.balance[(df.Target== 0)])\nplt.legend([\"Loan\", \"Not Loan\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","f616147f":"plt.scatter(x=df.age[df.Target== 1], y=df.housing[(df.Target== 1)], c=\"red\")\nplt.scatter(x=df.age[df.Target== 0], y=df.housing[(df.Target== 0)])\nplt.legend([\"Loan\", \"Not Loan\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","202a9084":"plt.scatter(x=df.age[df.Target== 1], y=df.loan[(df.Target== 1)], c=\"red\")\nplt.scatter(x=df.age[df.Target== 0], y=df.loan[(df.Target== 0)])\nplt.legend([\"Loan\", \"Not Loan\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","2f05d505":"plt.scatter(x=df.age[df.Target== 1], y=df.day[(df.Target== 1)], c=\"red\")\nplt.scatter(x=df.age[df.Target== 0], y=df.day[(df.Target== 0)])\nplt.legend([\"Loan\", \"Not Loan\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","149ae08c":"plt.scatter(x=df.age[df.Target== 1], y=df.duration[(df.Target== 1)], c=\"red\")\nplt.scatter(x=df.age[df.Target== 0], y=df.duration[(df.Target== 0)])\nplt.legend([\"Loan\", \"Not Loan\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","5e045118":"plt.scatter(x=df.age[df.Target== 1], y=df.campaign[(df.Target== 1)], c=\"red\")\nplt.scatter(x=df.age[df.Target== 0], y=df.campaign[(df.Target== 0)])\nplt.legend([\"Loan\", \"Not Loan\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","7b650b31":"plt.scatter(x=df.age[df.Target== 1], y=df.pdays[(df.Target== 1)], c=\"red\")\nplt.scatter(x=df.age[df.Target== 0], y=df.pdays[(df.Target== 0)])\nplt.legend([\"Loan\", \"Not Loan\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","2247515e":"plt.scatter(x=df.age[df.Target== 1], y=df.previous[(df.Target== 1)], c=\"red\")\nplt.scatter(x=df.age[df.Target== 0], y=df.previous[(df.Target== 0)])\nplt.legend([\"Loan\", \"Not Loan\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","9b1a5634":"df = df.drop(columns = ['job', 'marital', 'education','contact', 'month', 'poutcome'])\ndf.head()","406de008":"y = df.Target.values\nx_data = df.drop(['Target'], axis = 1)","8914d4a2":"# Normalize\nx = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data)).values","b77638da":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=0)","8041a7ac":"#transpose matrices\nx_train = x_train.T\ny_train = y_train.T\nx_test = x_test.T\ny_test = y_test.T","7a68f87e":"#initialize\ndef initialize(dimension):\n    \n    weight = np.full((dimension,1),0.01)\n    bias = 0.0\n    return weight,bias","089ab48e":"def sigmoid(z):\n    \n    y_head = 1\/(1+ np.exp(-z))\n    return y_head","a33c6ff2":"def forwardBackward(weight,bias,x_train,y_train):\n    # Forward\n    \n    y_head = sigmoid(np.dot(weight.T,x_train) + bias)\n    loss = -(y_train*np.log(y_head) + (1-y_train)*np.log(1-y_head))\n    cost = np.sum(loss) \/ x_train.shape[1]\n    \n    # Backward\n    derivative_weight = np.dot(x_train,((y_head-y_train).T))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients = {\"Derivative Weight\" : derivative_weight, \"Derivative Bias\" : derivative_bias}\n    \n    return cost,gradients","9cda0efb":"def update(weight,bias,x_train,y_train,learningRate,iteration) :\n    costList = []\n    index = []\n    \n    #for each iteration, update weight and bias values\n    for i in range(iteration):\n        cost,gradients = forwardBackward(weight,bias,x_train,y_train)\n        weight = weight - learningRate * gradients[\"Derivative Weight\"]\n        bias = bias - learningRate * gradients[\"Derivative Bias\"]\n        \n        costList.append(cost)\n        index.append(i)\n\n    parameters = {\"weight\": weight,\"bias\": bias}\n    \n    print(\"iteration:\",iteration)\n    print(\"cost:\",cost)\n\n    plt.plot(index,costList)\n    plt.xlabel(\"Number of Iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n\n    return parameters, gradients","8bacc1a3":"def predict(weight,bias,x_test):\n    z = np.dot(weight.T,x_test) + bias\n    y_head = sigmoid(z)\n\n    y_prediction = np.zeros((1,x_test.shape[1]))\n    \n    for i in range(y_head.shape[1]):\n        if y_head[0,i] <= 0.5:\n            y_prediction[0,i] = 0\n        else:\n            y_prediction[0,i] = 1\n    return y_prediction","930d4bce":"def logistic_regression(x_train,y_train,x_test,y_test,learningRate,iteration):\n    dimension = x_train.shape[0]\n    weight,bias = initialize(dimension)\n    \n    parameters, gradients = update(weight,bias,x_train,y_train,learningRate,iteration)\n\n    y_prediction = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    \n    print(\"Manuel Test Accuracy: {:.2f}%\".format((100 - np.mean(np.abs(y_prediction - y_test))*100)))","e34534df":"logistic_regression(x_train,y_train,x_test,y_test,1,100)","ad7d332d":"accuracies = {}\n\nlr = LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nacc = lr.score(x_test.T,y_test.T)*100\n\naccuracies['Logistic Regression'] = acc\nprint(\"Test Accuracy {:.2f}%\".format(acc))","6bc5a4a9":"# KNN Model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 2)  # n_neighbors means k\nknn.fit(x_train.T, y_train.T)\nprediction = knn.predict(x_test.T)\n\nprint(\"{} KNN Score: {:.2f}%\".format(2, knn.score(x_test.T, y_test.T)*100))","d115c59c":"# try ro find best k value\nscoreList = []\nfor i in range(1,20):\n    knn2 = KNeighborsClassifier(n_neighbors = i)  # n_neighbors means k\n    knn2.fit(x_train.T, y_train.T)\n    scoreList.append(knn2.score(x_test.T, y_test.T))\n    \nplt.plot(range(1,20), scoreList)\nplt.xticks(np.arange(1,20,1))\nplt.xlabel(\"K value\")\nplt.ylabel(\"Score\")\nplt.show()\n\nacc = max(scoreList)*100\naccuracies['KNN'] = acc\nprint(\"Maximum KNN Score is {:.2f}%\".format(acc))","499a7a70":"from sklearn.svm import SVC","1bc9de2a":"svm = SVC(random_state = 1)\nsvm.fit(x_train.T, y_train.T)\n\nacc = svm.score(x_test.T,y_test.T)*100\naccuracies['SVM'] = acc\nprint(\"Test Accuracy of SVM Algorithm: {:.2f}%\".format(acc))","d912b980":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train.T, y_train.T)\n\nacc = nb.score(x_test.T,y_test.T)*100\naccuracies['Naive Bayes'] = acc\nprint(\"Accuracy of Naive Bayes: {:.2f}%\".format(acc))","70636d56":"# Random Forest Classification\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 1000, random_state = 1)\nrf.fit(x_train.T, y_train.T)\n\nacc = rf.score(x_test.T,y_test.T)*100\naccuracies['Random Forest'] = acc\nprint(\"Random Forest Algorithm Accuracy Score : {:.2f}%\".format(acc))","86e21c05":"colors = [\"Red\", \"green\", \"orange\", \"magenta\",\"purple\"]\n\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(16,5))\nplt.yticks(np.arange(0,100,10))\nplt.ylabel(\"Accuracy %\")\nplt.xlabel(\"Algorithms\")\nsns.barplot(x=list(accuracies.keys()), y=list(accuracies.values()), palette=colors)\nplt.show()","1155f87c":"# Predicted values\ny_head_lr = lr.predict(x_test.T)\nknn3 = KNeighborsClassifier(n_neighbors = 3)\nknn3.fit(x_train.T, y_train.T)\ny_head_knn = knn3.predict(x_test.T)\ny_head_svm = svm.predict(x_test.T)\ny_head_nb = nb.predict(x_test.T)\ny_head_rf = rf.predict(x_test.T)","8f4b8931":"from sklearn.metrics import confusion_matrix\n\ncm_lr = confusion_matrix(y_test,y_head_lr)\ncm_knn = confusion_matrix(y_test,y_head_knn)\ncm_svm = confusion_matrix(y_test,y_head_svm)\ncm_nb = confusion_matrix(y_test,y_head_nb)\ncm_rf = confusion_matrix(y_test,y_head_rf)\n","1c011d82":"plt.figure(figsize=(24,12))\n\nplt.suptitle(\"Confusion Matrixes\",fontsize=24)\nplt.subplots_adjust(wspace = 0.4, hspace= 0.4)\n\nplt.subplot(2,3,1)\nplt.title(\"Logistic Regression Confusion Matrix\")\nsns.heatmap(cm_lr,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,2)\nplt.title(\"K Nearest Neighbors Confusion Matrix\")\nsns.heatmap(cm_knn,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,3)\nplt.title(\"Support Vector Machine Confusion Matrix\")\nsns.heatmap(cm_svm,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,4)\nplt.title(\"Naive Bayes Confusion Matrix\")\nsns.heatmap(cm_nb,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,5)\nplt.title(\"Random Forest Confusion Matrix\")\nsns.heatmap(cm_rf,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.show()","9cc4c3fc":"# Support Vector Machine (SVM) Algorithm","7dcf1c30":"Manuel Test Accuracy is **88.25%**\n\n**Let's find out sklearn's score.**","9afc4be0":"# Naive Bayes Algorithm","1a7e71f2":"# Normalize Data","abce0e31":"**Try to find best k value to improve our accuracy**","e5eefbfc":"# Random Forest Classification","a5d14607":"# Confusion Matrix","2b6c90f1":"# Creating Model for Logistic Regression","ac6e609f":"# I'm here Mapping data to convert values inside CVS which have yes or no to 1 and 0 respectively","46177c56":"# Data Exploration","a63cb76d":"# Comparing Models","20e6d863":"**We will split our data. 80% of our data will be train data and 20% of it will be test data.**","6629ff2c":"**Let's say weight = 0.01 and bias = 0.0**","90c4270d":"Test Accuracy is 88.81% \n\nAccuracy increases due to the Sklearn Modification and improvements","420ddfab":"# K-Nearest Neighbour (KNN) Classification","41a46df5":"# ****Read Data****","a3b31aee":"**We notes now that our Accuracy increases to 89.13%**","3092f553":"# **INTRODUCTION**\n\nWe have a data which classified if Customer can have a Loan or not according to features in it. We will try to use this data to create a model which tries predict if a Customer has this Loan or not. We will use logistic regression (classification) algorithm , K Nearest Neighbors , Support Vector Machine , Naive Bayes and Random Forest .","d3482937":"# Sklearn Logistic Regression"}}