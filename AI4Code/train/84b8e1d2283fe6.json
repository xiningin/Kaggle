{"cell_type":{"0e03d0cc":"code","731c1501":"code","f4f20dc7":"code","1abdfe77":"code","9f352f93":"code","f3c7df2b":"code","bdca09a5":"code","26530ed3":"code","c9193cd9":"code","8014dc59":"code","84599b36":"code","1c2cf87c":"code","96255754":"code","c5c129a3":"code","ac598c0b":"code","4fc1c0dc":"code","1d959e8f":"code","81bbfbbb":"code","73de1053":"code","06645912":"code","e97faf83":"code","4039f29e":"code","de7ce2c8":"code","07d6aa02":"code","4b65907e":"code","7df7eca0":"code","c95f8172":"code","88239e5b":"code","e7862308":"code","62339c7d":"code","7c3a9557":"code","6b95023d":"code","6c3c74be":"code","1c9558d0":"code","b17122ec":"code","43de5865":"code","20271cd3":"markdown","aa8d0317":"markdown","5db21583":"markdown","818fb80b":"markdown","2cafc539":"markdown","df4f0ade":"markdown","6fc12239":"markdown","7939e4c2":"markdown","17178e27":"markdown","a4e7eacd":"markdown","dde5a42a":"markdown","f49d4f1a":"markdown","258d5cb4":"markdown","d6690202":"markdown","885fb66e":"markdown","c34f7a93":"markdown","a65a4dc0":"markdown","e49ec16a":"markdown","5e53aa73":"markdown"},"source":{"0e03d0cc":"# Importing Libraries\n\nimport numpy as np \nimport pandas as pd \nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nfrom statsmodels.tsa.holtwinters import SimpleExpSmoothing\nfrom sklearn.metrics import mean_absolute_error\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nimport statsmodels.api as sm\nimport itertools\n\nimport warnings\npd.set_option('display.max_columns', None)\npd.set_option('display.width', 500)\nwarnings.filterwarnings('ignore')\n\n#Kaggle setup\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","731c1501":"train = pd.read_csv('..\/input\/demand-forecasting-kernels-only\/train.csv', parse_dates=['date'])\ntest = pd.read_csv('..\/input\/demand-forecasting-kernels-only\/test.csv', parse_dates=['date'])\ndf = pd.concat([train, test], sort=False)\ndf.head()","f4f20dc7":"print(\"Size of train set\",train.shape)\nprint(\"Size of test set:\",test.shape)","1abdfe77":"#Removing the extra column 'id'\ndf.drop(['id'],inplace=True,axis=1)\ndf.columns","9f352f93":"#DATE RANGE\n\nprint(\"Date range:\", df[\"date\"].min(), \"to\", df[\"date\"].max())\n#1st Jan 2013 to 31st March, 2018","f3c7df2b":"# SALES DISTRIBUTION\n\ndf[\"sales\"].describe([0.10, 0.30, 0.50, 0.70, 0.80, 0.90, 0.95, 0.99])","bdca09a5":"# NUMBER OF STORES\n\ndf[\"store\"].nunique()","26530ed3":"# NUMBER OF PRODUCTS\n\ndf[\"item\"].nunique() ","c9193cd9":"# NUMBER OF PRODUCTS IN EACH STORE\ndf.groupby([\"store\"])[\"item\"].nunique()\n#Every store sells all the 50 products","8014dc59":"# Sales statistics in store-product breakdown\ndf.groupby([\"store\", \"item\"]).agg({\"sales\": [\"sum\", \"mean\", \"median\", \"std\"]})","84599b36":"# Generating date and time parameters from given date\n\ndf['month'] = df.date.dt.month\ndf['day_of_month'] = df.date.dt.day\ndf['day_of_year'] = df.date.dt.dayofyear \ndf['week_of_year'] = df.date.dt.weekofyear\ndf['day_of_week'] = df.date.dt.dayofweek\ndf['year'] = df.date.dt.year\ndf[\"is_wknd\"] = df.date.dt.weekday \/\/ 4\ndf['is_month_start'] = df.date.dt.is_month_start.astype(int)\ndf['is_month_end'] = df.date.dt.is_month_end.astype(int) ","1c2cf87c":"df.head()","96255754":"# Sales statistics in store-item-month breakdown\ndf.groupby([\"store\", \"item\", \"month\"]).agg({\"sales\": [\"sum\", \"mean\", \"median\", \"std\"]})","c5c129a3":"#DEALING WITH RAMDOM NOISE\n# For small datasets like this dataset, random noise can be added to the values \u200b\u200bto prevent overfitting.\n# Here I will add Gaussian random noise, which is normally distributed with 1 standard deviation and 0 mean.\n\ndef random_noise(dataframe):\n    return np.random.normal(scale=1.6, size=(len(dataframe),))","ac598c0b":"#Lag\/Shifted Features (Delays)\ndf.sort_values(by=['store', 'item', 'date'], axis=0, inplace=True)\ndf.head(10)","4fc1c0dc":"def lag_features(dataframe, lags):\n    for lag in lags:\n        dataframe['sales_lag_' + str(lag)] = dataframe.groupby([\"store\", \"item\"])['sales'].transform(\n            lambda x: x.shift(lag)) + random_noise(dataframe)\n    return dataframe\n\ndf = lag_features(df, [91, 98, 105, 112, 119, 126, 182, 364, 546, 728])","1d959e8f":"#Moving Average Features\ndef moving_average_features(dataframe, windows):\n    for window in windows:\n        dataframe['sales_roll_mean_' + str(window)] = dataframe.groupby([\"store\", \"item\"])['sales']. \\\n                                                          transform(\n            lambda x: x.shift(1).rolling(window=window, min_periods=10, win_type=\"triang\").mean()) + random_noise(\n            dataframe)\n    return dataframe\n\n\ndf = moving_average_features(df, [365, 546, 730])\n","81bbfbbb":"#Exponentially Weighted Average Features\ndef ewm_features(dataframe, alphas, lags):\n    for alpha in alphas:\n        for lag in lags:\n            dataframe['sales_ewm_alpha_' + str(alpha).replace(\".\", \"\") + \"_lag_\" + str(lag)] = \\\n                dataframe.groupby([\"store\", \"item\"])['sales'].transform(lambda x: x.shift(lag).ewm(alpha=alpha).mean())\n    return dataframe\n\n\nalphas = [0.99, 0.95, 0.9, 0.8, 0.7, 0.5]\nlags = [91, 98, 105, 112, 180, 270, 365, 546, 728]\n\ndf = ewm_features(df, alphas, lags)","73de1053":"#Checking for null values\ndf.info()","06645912":"#One-Hot Encoding\ndf = pd.get_dummies(df, columns=['day_of_week', 'month'])","e97faf83":"#Converting sales to log(1+sales)\ndf['sales'] = np.log1p(df[\"sales\"].values)","4039f29e":"# Train data set until the beginning of 2017 (end of 2016)\ntrain = df.loc[(df[\"date\"] < \"2017-01-01\"), :]\n\n# First 3 months of 2017 validation set\nval = df.loc[(df[\"date\"] >= \"2017-01-01\") & (df[\"date\"] < \"2017-04-01\"), :]\n\n# Independent variables\ncols = [col for col in train.columns if col not in ['date', 'id', \"sales\", \"year\"]]","de7ce2c8":"# Selecting the dependent variable for the train set\nY_train = train['sales']\n\n# Selecting the argument for the train set\nX_train = train[cols]\n\n# choosing the dependent variable for the validation set\nY_val = val['sales']\n\n# selecting the independent variable for the validation set\nX_val = val[cols] \n\n# Checking the shapes\nY_train.shape, X_train.shape, Y_val.shape, X_val.shape","07d6aa02":"# Custom Cost Function\n\ndef smape(preds, target):\n    n = len(preds)\n    masked_arr = ~((preds == 0) & (target == 0))\n    preds, target = preds[masked_arr], target[masked_arr]\n    num = np.abs(preds - target)\n    denom = np.abs(preds) + np.abs(target)\n    smape_val = (200 * np.sum(num \/ denom)) \/ n\n    return smape_val\n\n\ndef lgbm_smape(preds, train_data):\n    labels = train_data.get_label()\n    smape_val = smape(np.expm1(preds), np.expm1(labels))\n    return 'SMAPE', smape_val, False\n","4b65907e":"# LightGBM parameters\nlgb_params = {'metric': {'mae'},\n              'num_leaves': 10,\n              'learning_rate': 0.02,\n              'feature_fraction': 0.8,\n              'max_depth': 5,\n              'verbose': 0,\n              'num_boost_round': 10000, \n              'early_stopping_rounds': 200,\n              'nthread': -1}","7df7eca0":"lgbtrain = lgb.Dataset(data=X_train, label=Y_train, feature_name=cols)\nlgbval = lgb.Dataset(data=X_val, label=Y_val, reference=lgbtrain, feature_name=cols)\n\nmodel = lgb.train(lgb_params, lgbtrain,\n                  valid_sets=[lgbtrain, lgbval],\n                  num_boost_round=lgb_params['num_boost_round'],\n                  early_stopping_rounds=lgb_params['early_stopping_rounds'],\n                  feval=lgbm_smape, \n                  verbose_eval=100)\n\ny_pred_val = model.predict(X_val, num_iteration=model.best_iteration)\n\n# percentage of validation error\nsmape(np.expm1(y_pred_val), np.expm1(Y_val))","c95f8172":"# determination of test and train dependent\/independent variables\n\ntrain = df.loc[~df.sales.isna()]\nY_train = train['sales']\nX_train = train[cols]\n\ntest = df.loc[df.sales.isna()]\nX_test = test[cols]","88239e5b":"lgb_params = {'metric': {'mae'},\n              'num_leaves': 10,\n              'learning_rate': 0.02,\n              'feature_fraction': 0.8,\n              'max_depth': 5,\n              'verbose': 0,\n              'nthread': -1,\n              \"num_boost_round\": model.best_iteration}\n\n# LightGBM dataset\nlgbtrain_all = lgb.Dataset(data=X_train, label=Y_train, feature_name=cols)\n\nmodel = lgb.train(lgb_params, lgbtrain_all, num_boost_round=model.best_iteration)\ntest_preds = model.predict(X_test, num_iteration=model.best_iteration)","e7862308":"data = pd.read_csv('..\/input\/demand-forecasting-kernels-only\/train.csv', parse_dates=['date'])\ndata.head()\ndata.shape\n\n# reduce dataset to weekly\ndata.set_index(\"date\",inplace=True)\ndf= data.resample(\"W\").mean()\ndf.reset_index(inplace=True)\ndf.head()\ndf.shape\n\ndf.index.freq = \"W\"\ndf.head()","62339c7d":"df.shape","7c3a9557":"# Month\ndf['month'] = df.date.dt.month\n# Day of Month\ndf['day_of_month'] = df.date.dt.day\n# Day of year\ndf['day_of_year'] = df.date.dt.dayofyear\n# Week of year\ndf['week_of_year'] = df.date.dt.weekofyear\n# Day of week\ndf['day_of_week'] = df.date.dt.dayofweek\n# Year\ndf['year'] = df.date.dt.year\n# Weekend check\ndf[\"is_wknd\"] = df.date.dt.weekday \/\/ 4\n# Month start check\ndf['is_month_start'] = df.date.dt.is_month_start.astype(int)\n# Month end check\ndf['is_month_end'] = df.date.dt.is_month_end.astype(int)\n\n# Lag\/Shifted Features (Delays)\ndef lag_features(dataframe, lags):\n    for lag in lags:\n        dataframe['sales_lag_' + str(lag)] = dataframe['sales'].transform(\n            lambda x: x.shift(lag)) + random_noise(dataframe)\n    return dataframe\n\ndf = lag_features(df, [31, 61, 91, 98, 105, 112])\n\n\n# Moving Average Features\ndef roll_mean_features(dataframe, windows):\n    for window in windows:\n        dataframe['sales_roll_mean_' + str(window)] = dataframe['sales']. \\\n                                                          transform(\n            lambda x: x.shift(1).rolling(window=window, min_periods=10, win_type=\"triang\").mean()) + random_noise(\n            dataframe)\n    return dataframe\n\n\ndf = roll_mean_features(df, [31, 61, 91, 98, 105, 112])\n\n\n# Exponentially Weighted Mean Features\ndef ewm_features(dataframe, alphas, lags):\n    for alpha in alphas:\n        for lag in lags:\n            dataframe['sales_ewm_alpha_' + str(alpha).replace(\".\", \"\") + \"_lag_\" + str(lag)] = \\\n                dataframe['sales'].transform(lambda x: x.shift(lag).ewm(alpha=alpha).mean())\n    return dataframe\n\n\nalphas = [0.99, 0.95, 0.9, 0.8, 0.7, 0.5]\nlags = [10, 20, 30, 40, 50]\n\ndf = ewm_features(df, alphas, lags)\n\ndf.tail()\n","6b95023d":"# One-Hot Encoding\ndf = pd.get_dummies(df, columns=['day_of_week', 'month'])\n\n# Converting sales to log(1+sales)\ndf['sales'] = np.log1p(df[\"sales\"].values)\n\n# train-test data selection\ntrain = df.loc[(df[\"date\"] < \"2017-01-01\"), :]\ntest = df.loc[(df[\"date\"] >= \"2017-01-01\"), :]\n\n# Dependent and Independent variables\ncols = [col for col in train.columns if col not in ['date', \"sales\", \"year\"]]\nX_train = train[cols]\nY_train = train['sales']\nX_test = test[cols]\nY_test = test[\"sales\"]\n","6c3c74be":"# LightGBM parameters\nlgb_params = {'metric': {'mae'},\n              'num_leaves': 10,\n              'learning_rate': 0.02,\n              'feature_fraction': 0.8,\n              'max_depth': 5,\n              'verbose': 0,\n              'num_boost_round': 10000, \n              'early_stopping_rounds': 200, \n              'nthread': -1}\n\nlgbtrain = lgb.Dataset(data=X_train, label=Y_train, feature_name=cols)\nlgbval = lgb.Dataset(data=X_test, label=Y_test, reference=lgbtrain, feature_name=cols)\n\nmodel = lgb.train(lgb_params, lgbtrain,\n                  valid_sets=[lgbtrain, lgbval],\n                  num_boost_round=lgb_params['num_boost_round'],\n                  early_stopping_rounds=lgb_params['early_stopping_rounds'],\n                  feval=lgbm_smape, \n                  verbose_eval=100)\n\ny_pred_test = model.predict(X_test, num_iteration=model.best_iteration)\n\n# percentage of test error\nsmape(np.expm1(y_pred_test), np.expm1(Y_test))\n","1c9558d0":"def plot_lgb_importances(model, plot=False, num=10):\n\n    gain = model.feature_importance('gain')\n    feat_imp = pd.DataFrame({'feature': model.feature_name(),\n                             'split': model.feature_importance('split'),\n                             'gain': 100 * gain \/ gain.sum()}).sort_values('gain', ascending=False)\n    if plot:\n        plt.figure(figsize=(10, 10))\n        sns.set(font_scale=1)\n        sns.barplot(x=\"gain\", y=\"feature\", data=feat_imp[0:25])\n        plt.title('feature')\n        plt.tight_layout()\n        plt.show()\n    else:\n        print(feat_imp.head(num))\n\n\nplot_lgb_importances(model, num=30)\n#plot_lgb_importances(model, num=30, plot=True)\n\nlgb.plot_importance(model, max_num_features=20, figsize=(10, 10), importance_type=\"gain\")\nplt.show()\n","b17122ec":"# Final Model\n\nlgb_params = {'metric': {'mae'},\n              'num_leaves': 10,\n              'learning_rate': 0.02,\n              'feature_fraction': 0.8,\n              'max_depth': 5,\n              'verbose': 0,\n              'nthread': -1,\n              \"num_boost_round\": model.best_iteration}\n\n# LightGBM dataset\nlgbtrain_all = lgb.Dataset(data=X_train, label=Y_train, feature_name=cols)\n\nmodel = lgb.train(lgb_params, lgbtrain_all, num_boost_round=model.best_iteration)\ntest_preds = model.predict(X_test, num_iteration=model.best_iteration)\n","43de5865":"# 1 year actual and predicted values\nforecast = pd.DataFrame({\"date\":test[\"date\"],\n                        \"store\":test[\"store\"],\n                        \"item\":test[\"item\"],\n                        \"sales\":test_preds\n                        })\n\ndf.set_index(\"date\").sales.plot(figsize = (20,9),legend=True, label = \"Actual\")\nforecast.set_index(\"date\").sales.plot(legend=True, label = \"Predict\")\nplt.show()","20271cd3":"## 1. Introduction","aa8d0317":"## 8. Time Series Analysis\n\n* In this section, first of all, the train data set will be reduced to a weekly basis.\n* Then, using the weekly data set, respectively:\n* LightGBM Model\n* Single Exponential Smoothing\n* Double Exponential Smoothing\n* Triple Exponential Smoothing\n* ARIMA\n* Sales demand forecasting models for 2017 will be created with SARIMA.\n* Actual values \u200b\u200bwill be compared with estimated values.\n","5db21583":"### LightGBM Model","818fb80b":"### Feature Engineering","2cafc539":"### Feature Importance","df4f0ade":"#### Business Problem\n* It is desired to create a 3-month demand forecasting model for 10 different stores and 50 different products of a chain of stores.\n* Afterwards, it is desired to reduce the data set to weekly and create a demand forecasting model for 2017.","6fc12239":"## 3. Load Dataset","7939e4c2":"## 4. Basic Exploratory data Analysis","17178e27":"## 6. Data Encoding","a4e7eacd":"## 7. LightGBM Model","dde5a42a":"#### Dataset Overview\n* A store chain's 5-year data includes information on 10 different stores and 50 different products.\n* The data set covers the period between 01-01-2013 and 31-12-2017.","f49d4f1a":"#### Variables\n* date \u2013 Date of sales data (No holiday effects or store closures)\n* store - Store ID Unique number for each store.\n* item - Item ID Unique number for each item.\n* sales \u2013 Number of items sold, Number of items sold from a particular store on a given date","258d5cb4":"## 2. Importing Libraries and Kaggle Setup","d6690202":"### Final Model","885fb66e":"### Load Dataset and EDA","c34f7a93":"## Content\n1. [Introduction](#section-intro)\n2. [Importing libraries and Kaggle setup](#section-ts)\n3. [Load Dataset](#section-pro)\n4. [Basic Exploratory Data Analysis](#section-ten)\n5. [Feature Engineering](#section-ten)\n6. [Data Encoding](#section-ten)\n7. [LightGB Model](#section-ten)\n8. [Time Series Analysis](#section-ten)   ","a65a4dc0":"## Here is the prediction!","e49ec16a":"## Demand Forecasting with using Big Data","5e53aa73":"## 5. Feature Engineering"}}