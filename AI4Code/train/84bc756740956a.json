{"cell_type":{"364a0748":"code","d97758a6":"code","9d9416d5":"code","5aa563a6":"code","f89c993d":"code","3ea5f15a":"code","ac2ae363":"code","270498fc":"code","ec26d346":"code","343b5956":"code","b0320fd2":"code","fbc4a8cf":"code","43cf72c4":"code","a991a080":"code","d3b205dc":"code","6c2d4576":"code","115a1065":"code","0edd2fd6":"code","6ef65af1":"code","14ff4a05":"code","e470ecaf":"code","08cfd519":"code","2f469534":"code","0d142af5":"code","dbfac7e0":"code","656b5221":"code","1a360328":"code","214ceb80":"code","189f6c37":"code","423eb0b2":"code","3ec69802":"code","655265ea":"code","9bbadad3":"code","cf166e69":"code","728fa888":"code","a81c0977":"code","f5296214":"code","b516dee7":"code","5cb31e22":"code","1f789af2":"code","51210237":"code","e3174ce2":"code","8e039cc9":"code","5a788434":"code","c3b1bae8":"code","03ccc5a3":"code","1c887c40":"code","bb458a76":"code","bc23f14a":"code","d735c13e":"code","b3fcfa56":"code","84b3f861":"code","e35a0e38":"code","6b0cd3df":"code","a60501a2":"code","3892d316":"code","3803684f":"code","e6c55236":"code","b8b687d3":"code","e6825ad1":"code","e348f070":"code","b14e8dcc":"code","298b599f":"code","9c73e0b2":"code","5dbcd44c":"code","60c03e97":"code","b5a0f50e":"code","18c48f25":"code","450feaae":"code","7c12214b":"code","2934b804":"code","d25973b1":"code","e8f4892e":"code","619d5e14":"code","6877bfc3":"code","914b1fa6":"code","acd43296":"code","38af3d0f":"code","061e7420":"code","cf8ce2cb":"code","cbdd5109":"code","05b21db4":"code","3ab0aa58":"markdown","9181e24a":"markdown","73de6da4":"markdown","ed831e34":"markdown","b788d0f1":"markdown","07df4523":"markdown","616f3ca3":"markdown","24b9750a":"markdown","562c6530":"markdown"},"source":{"364a0748":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\n%matplotlib inline","d97758a6":"sample_submission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nsample = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","9d9416d5":"train.head()","5aa563a6":"test.head()","f89c993d":"train.corr()['SalePrice'].sort_values()","3ea5f15a":"sns.scatterplot(data=train, x='OverallQual', y='SalePrice')\nplt.axhline(y=200000,color='r')","ac2ae363":"train[(train['OverallQual']>8) &(train['SalePrice']<200000)][['SalePrice', 'OverallQual']]","270498fc":"sns.scatterplot(x='GrLivArea', y='SalePrice', data=train)\nplt.axhline(y=200000, color='r')\nplt.axvline(x=4000, color='r')","ec26d346":"train[(train['GrLivArea']>4000) & (train['SalePrice']<400000)][['SalePrice', 'GrLivArea']]","343b5956":"index_drop=train[(train['GrLivArea']>4000) & (train['SalePrice']<400000)].index\ntrain=train.drop(index_drop, axis=0)","b0320fd2":"sns.scatterplot(x='GrLivArea', y='SalePrice', data=train)\nplt.axhline(y=200000, color='r')\nplt.axvline(x=4000, color='r')","fbc4a8cf":"sns.scatterplot(x='OverallQual', y='SalePrice', data=train)\nplt.axhline(y=200000,color='r')","43cf72c4":"sns.boxplot(x='OverallQual', y='SalePrice', data=train)","a991a080":"#open the documentation about the data set. (this file is in a txt format)\n\nwith open('..\/input\/house-prices-advanced-regression-techniques\/data_description.txt', 'r') as f:\n    print(f.read())","d3b205dc":"\ntrain= train.drop('Id', axis=1)","6c2d4576":"train.isnull()","115a1065":"#How many missing data is there in each features?\ntrain.isnull().sum()","0edd2fd6":"#The percent of missing data in any feature:\n100*(train.isnull().sum()\/len(train))","6ef65af1":"#Make a Function to calculate the percent of missing data in each columns (feature) and then sort it\ndef missing_percent(train):\n    nan_percent= 100*(train.isnull().sum()\/len(train))\n    nan_percent= nan_percent[nan_percent>0].sort_values()\n    return nan_percent","14ff4a05":"nan_percent= missing_percent(train)","e470ecaf":"nan_percent","08cfd519":"#plot the feature with missing indicating the percent of missing data\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)","2f469534":"#every Feature with missing data must be checked!\n#We choose a threshold of 1%. It means, if there is less than 1% of a feature are missing,\n#then we will consider just dropping that rows\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)\n\n#Set 1% threshold:\nplt.ylim(0,1)","0d142af5":"nan_percent[nan_percent<1]","dbfac7e0":"nan_percent[nan_percent<1].index","656b5221":"100\/len(train)\n#It shows that, Feature with just one missing rows has this percent value of missing data","1a360328":"train[train['Electrical'].isnull()]","214ceb80":"train[train['GarageArea'].isnull()]","189f6c37":"train= train.dropna(axis=0, subset=['Electrical', 'GarageArea','MasVnrArea'])","423eb0b2":"nan_percent= missing_percent(train)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)\nplt.ylim(0,1)","3ec69802":"train[train['TotalBsmtSF'].isnull()]","655265ea":"train[train['BsmtHalfBath'].isnull()]","9bbadad3":"train[train['BsmtFullBath'].isnull()]","cf166e69":"#After checking the data documentation,\n#it shows that missing value (two rows) in Basement Features are because of there is no basement in these rows\n#Decision: Filling in data based on column: numerical basement & string descriptive:\n\n#Numerical Columns fill with 0:\nbsmt_num_cols= ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF' ,'BsmtFullBath', 'BsmtHalfBath']\ntrain[bsmt_num_cols]=train[bsmt_num_cols].fillna(0)\n\n#String Columns fill with None:\nbsmt_str_cols= ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2']\ntrain[bsmt_str_cols]= train[bsmt_str_cols].fillna('None')","728fa888":"nan_percent= missing_percent(train)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)\nplt.ylim(0,1)","a81c0977":"train[\"MasVnrType\"]= train[\"MasVnrType\"].fillna(\"None\")\ntrain[\"MasVnrArea\"]= train[\"MasVnrArea\"].fillna(0)","f5296214":"nan_percent= missing_percent(train)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)\n","b516dee7":"train[['GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageQual', 'GarageCond']]","5cb31e22":"#Filling the missing Value:\nGar_str_cols= ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']\ntrain[Gar_str_cols]=train[Gar_str_cols].fillna('None')\n\ntrain['GarageYrBlt']=train['GarageYrBlt'].fillna(0)","1f789af2":"nan_percent= missing_percent(train)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)\n","51210237":"nan_percent.index","e3174ce2":"train[['LotFrontage', 'FireplaceQu', 'Fence', 'Alley', 'MiscFeature',\n       'PoolQC']]","8e039cc9":"train= train.drop(['Fence', 'Alley', 'MiscFeature','PoolQC'], axis=1)","5a788434":"nan_percent= missing_percent(train)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)","c3b1bae8":"#Filling in Fireplace Quality based on dataset documentation:\ntrain['FireplaceQu']= train['FireplaceQu'].fillna('None')","03ccc5a3":"nan_percent= missing_percent(train)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)","1c887c40":"train['Neighborhood'].unique()","bb458a76":"plt.figure(figsize=(8,12))\nsns.boxplot(data=train, x='LotFrontage', y='Neighborhood')","bc23f14a":"#Impute missing data based on other columns:\n\ntrain.groupby('Neighborhood')['LotFrontage']","d735c13e":"train.groupby('Neighborhood')['LotFrontage'].mean()","b3fcfa56":"train.groupby('Neighborhood')['LotFrontage'].transform(lambda val: val.fillna(val.mean()))","84b3f861":"train['LotFrontage']=train.groupby('Neighborhood')['LotFrontage'].transform(lambda val: val.fillna(val.mean()))","e35a0e38":"train['LotFrontage']= train['LotFrontage'].fillna(0)","6b0cd3df":"nan_percent= missing_percent(train)","a60501a2":"nan_percent","3892d316":"train['MSSubClass']","3803684f":"train.info()","e6c55236":"train['MSSubClass'].unique()","b8b687d3":"#Convert to String:\ntrain['MSSubClass']= train['MSSubClass'].apply(str)","e6825ad1":"train.info()\n#or: df['MS SubClass'].dtype","e348f070":"train.select_dtypes(include='object')","b14e8dcc":"df_num= train.select_dtypes(exclude='object')\ndf_obj= train.select_dtypes(include='object')","298b599f":"df_num.info()","9c73e0b2":"df_obj.info()","5dbcd44c":"# Converting:\ndf_obj= pd.get_dummies(df_obj, drop_first=True)","60c03e97":"df_obj.shape","b5a0f50e":"Final_df= pd.concat([df_num, df_obj], axis=1)","18c48f25":"Final_df.head()","450feaae":"Final_df.isnull()","7c12214b":"X=Final_df.drop(['SalePrice'],axis=1)\ny=Final_df['SalePrice']","2934b804":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)","d25973b1":"model=LinearRegression()","e8f4892e":"model.fit(X_train,y_train)","619d5e14":"pd.DataFrame(model.coef_,X.columns,columns=['Con'])","6877bfc3":"y_predict=model.predict(X_test)","914b1fa6":"pd.DataFrame({'Y_test':y_test,'Y_predict':y_predict})","acd43296":"MAE=metrics.mean_absolute_error(y_test,y_predict)\nMSE=metrics.mean_squared_error(y_test,y_predict)\nRMSE=np.sqrt(MSE)","38af3d0f":"print('Root Mean Square Error test = ',RMSE)","061e7420":"RES_test=y_test-y_predict\npd.DataFrame({'Y_test':y_test,'Y_predict':y_predict,'RES':RES_test})","cf8ce2cb":"sns.scatterplot(x=y_test,y=y_predict)","cbdd5109":"sns.scatterplot(x=y_test,y=RES_test)\nplt.axhline(y=0,color='r',ls='--')","05b21db4":"sns.displot(RES_test,bins=30, kde=True)","3ab0aa58":"Mas Vnr Features:\n\nBased on the Dataset Document File, missing values for 'Mas Vnr Type' and 'Mas Vnr Area' means the house doesn't have any mansonry veneer. so, we decide to fill the missing value as below:\n","9181e24a":"#### A- Numerical Columns to Categorical\nWe need to be careful when it comes to encoding categorical as numbers. We want to make sure that the numerical relationship makes sense for model. For example, the encoding MSSubClass is essentially just a code per class","73de6da4":"Garage Columns:\u00b6\n\nBased on the dataset documentation, NaN in Garage Columns seems to indicate no garage.\n\nDecision: Fill with 'None' or 0\n","ed831e34":"## 3-Dealing with Categorical Data","b788d0f1":"### C-Working based on Columns Missing Data","07df4523":"### B- Creating Dummy Variables","616f3ca3":"### D- Imputation of Missing Data","24b9750a":"### Filling the missing values:","562c6530":"#### Now, the Dataset is Ready for any Machine Learing Model & Analysis"}}