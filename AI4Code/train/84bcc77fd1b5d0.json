{"cell_type":{"9afd2d7e":"code","de08f9b2":"code","91a0b5bf":"code","22bf2fdc":"code","0ec79088":"code","beffdef9":"code","f0d4c77d":"code","3ce7a20f":"code","3ad9b2eb":"code","8d5568e7":"code","287d2b74":"code","1796171a":"code","3d7b8eaf":"code","978f16a6":"code","80e68480":"code","7c08bca4":"code","79a2b678":"code","52ff35bc":"code","261eb28b":"code","3f7920cf":"code","8349188e":"code","cb878b76":"code","400cffbf":"code","77944bd3":"code","46897b08":"code","5faef880":"code","10075b81":"code","83e2fb18":"code","adf53786":"code","592e9183":"code","dd364397":"code","0ab27a39":"code","95008e59":"code","5ad15027":"code","cbefbe9c":"code","e841ae20":"code","4b4d9124":"markdown","9711865f":"markdown","7c285562":"markdown","454c323e":"markdown","b05933cb":"markdown","cfdafdcf":"markdown","7d6e5bec":"markdown"},"source":{"9afd2d7e":"import os\r\nimport pandas as pd\r\nimport numpy as np\r\nimport seaborn as sns\r\nfrom tqdm import tqdm\r\nimport tensorflow as tf\r\nfrom sklearn.model_selection import train_test_split\r\nfrom tensorflow.keras.models import Sequential\r\nfrom tensorflow.keras.layers import *\r\nfrom tensorflow.keras.layers import Activation, Dropout, BatchNormalization, Flatten, Dense, AvgPool2D,MaxPool2D\r\nfrom tensorflow.keras.applications.vgg16 import VGG16, preprocess_input\r\nfrom tensorflow.keras.optimizers import Adam, SGD, RMSprop\r\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout\r\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img\r\nfrom tensorflow.keras.preprocessing import image\r\nfrom PIL import Image","de08f9b2":"meta=pd.read_csv(\"..\/input\/coronahack-chest-xraydataset\/Chest_xray_Corona_Metadata.csv\")\r\nprint(f'Shape: {meta.shape}')","91a0b5bf":"meta.sample(10)","22bf2fdc":"summ=pd.read_csv(\"..\/input\/coronahack-chest-xraydataset\/Chest_xray_Corona_dataset_Summary.csv\")\r\nprint(f'Shape: {summ.shape}')","0ec79088":"summ.sample(7)","beffdef9":"print(f'Label counts in metadata:\\n\\n{meta.Label.value_counts()}')","f0d4c77d":"print(f'Label-1 counts:\\n\\n{meta.Label_1_Virus_category.value_counts()}')","3ce7a20f":"print(f'Label-2 counts:\\n\\n{meta.Label_2_Virus_category.value_counts()}')","3ad9b2eb":"print(f'Null counts in metdata:\\n\\n{meta.isnull().sum()}')","8d5568e7":"train_df = meta[meta.Dataset_type == 'TRAIN'].reset_index(drop=True)\r\ntest_df = meta[meta.Dataset_type == 'TEST'].reset_index(drop=True)\r\nassert train_df.shape[0] + test_df.shape[0] == meta.shape[0]\r\nprint(f'Train df shape: {train_df.shape}')\r\nprint(f'Test df shape: {test_df.shape}')","287d2b74":"print(f'Count of null values in train:\\n{train_df.isnull().sum()}')\r\nprint(f'\\nCount of null values in test:\\n{test_df.isnull().sum()}')","1796171a":"train_df = train_df.fillna('NA')\r\ntest_df = test_df.fillna('NA')\r\n\r\ntrain_df.sample(5)","3d7b8eaf":"test_df.sample(5)","978f16a6":"test_df[test_df.Label == 'Pnemonia'].sample(5)","80e68480":"train_img=\"..\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/train\"\r\ntest_img=\"..\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/test\"","7c08bca4":"import matplotlib.pyplot as plt\r\ncol = ['Label', 'Label_1_Virus_category', 'Label_2_Virus_category']\r\n\r\nsns.set_theme(style='darkgrid')\r\nfig = plt.figure(figsize=(14, 14))\r\nfor i in range(3):\r\n    ax = plt.subplot(2, 2, i + 1)\r\n    ax = sns.countplot(x=col[i], data=train_df)\r\n    ax.set_title(f'Number of each value in {col[i]} column')\r\nfig.suptitle('Count value in train_df')\r\nplt.show()","79a2b678":"pnemonia_df = train_df[train_df.Label == 'Pnemonia']\r\nprint(f'Number of pnemonia in training dataset: { len(pnemonia_df) }')","52ff35bc":"pnemonia_without_unknow_df = pnemonia_df[pnemonia_df.Label_2_Virus_category != 'NA']\r\nprint(f'Number of pnemonia without unknow value in Label_2_Virus_category: { len(pnemonia_without_unknow_df) }')","261eb28b":"fig = plt.figure(figsize=(15, 4))\r\nfor i in range(2):\r\n    ax = plt.subplot(1, 2, i+1)\r\n    ax = sns.countplot(x=col[i+1], data=pnemonia_without_unknow_df)\r\n    ax.set_title(col[i+1])\r\nfig.suptitle('Count value in pnemonia_without_unknow_df')\r\nplt.show()","3f7920cf":"assert os.path.isdir(train_img) == True\r\nsample_train_images = list(os.walk(train_img))[0][2][:8]\r\nsample_train_images = list(map(lambda x: os.path.join(train_img, x), sample_train_images))\r\nplt.figure(figsize = (17,17))\r\nfor iterator, filename in enumerate(sample_train_images):\r\n    image = Image.open(filename)\r\n    plt.subplot(4,2,iterator+1)\r\n    plt.imshow(image,cmap='gray')\r\n\r\nplt.tight_layout()","8349188e":"fig, ax = plt.subplots(4, 2, figsize=(17, 17))\r\nnormal_path = train_df[train_df['Label']=='Normal']['X_ray_image_name'].values\r\n\r\nsample_normal_path = normal_path[:4]\r\nsample_normal_path = list(map(lambda x: os.path.join(train_img, x), sample_normal_path))\r\n\r\nfor row, file in enumerate(sample_normal_path):\r\n    image = plt.imread(file)\r\n    ax[row, 0].imshow(image,cmap='gray')\r\n    ax[row, 1].hist(image.ravel(), 256, [0,256])\r\n    ax[row, 0].axis('off')\r\n    if row == 0:\r\n        ax[row, 0].set_title('Images')\r\n        ax[row, 1].set_title('Histograms')\r\nfig.suptitle('Label = NORMAL', size=16)\r\nplt.show()","cb878b76":"fig, ax = plt.subplots(4, 2, figsize=(17, 17))\r\ncovid_path = train_df[train_df['Label_2_Virus_category']=='COVID-19']['X_ray_image_name'].values\r\n\r\nsample_covid_path = covid_path[:4]\r\nsample_covid_path = list(map(lambda x: os.path.join(train_img, x), sample_covid_path))\r\n\r\nfor row, file in enumerate(sample_covid_path):\r\n    image = plt.imread(file)\r\n    ax[row, 0].imshow(image,cmap='gray')\r\n    ax[row, 1].hist(image.ravel(), 256, [0,256])\r\n    ax[row, 0].axis('off')\r\n    if row == 0:\r\n        ax[row, 0].set_title('Images')\r\n        ax[row, 1].set_title('Histograms')\r\nfig.suptitle('Label 2 Virus Category = COVID-19', size=16)\r\nplt.show()","400cffbf":"test_df['Label'].value_counts()","77944bd3":"meta.Dataset_type.value_counts()","46897b08":"train_data = meta[meta['Dataset_type'] == 'TRAIN']\r\ntest_data = meta[meta['Dataset_type'] == 'TEST']","5faef880":"def create_directory():\r\n    try:\r\n        os.makedirs('..\/working\/train\/Pnemonia')\r\n        os.makedirs('..\/working\/train\/Normal')\r\n        os.makedirs('..\/working\/test\/Pnemonia')\r\n        os.makedirs('..\/working\/test\/Normal')\r\n    except:\r\n        pass","10075b81":"create_directory()","83e2fb18":"import shutil\r\ntrain_pnemonia = '..\/working\/train\/Pnemonia\/'\r\nsource_train = \"..\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/train\"\r\nmove_train_pnemonia = train_data[ train_data['Label'] == 'Pnemonia']['X_ray_image_name'].values\r\nfor i in move_train_pnemonia:\r\n    path = os.path.join(source_train,i)\r\n    shutil.copy(path,train_pnemonia)\r\n    \r\n#Normal\r\ntrain_normal = '..\/working\/train\/Normal\/'\r\nmove_train_normal = train_data[train_data.Label == 'Normal']['X_ray_image_name'].values\r\nfor i in move_train_normal:\r\n    path = os.path.join(source_train,i)\r\n    shutil.copy(path,train_normal)","adf53786":"test_pnemonia = '..\/working\/test\/Pnemonia\/'\r\nsource_test = \"..\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/test\"\r\nmove_test_pnemonia = test_data[test_data['Label'] == 'Pnemonia']['X_ray_image_name'].values\r\n                               \r\nfor i in move_test_pnemonia:\r\n    \r\n    path2 = os.path.join(source_test, i)\r\n    shutil.copy(path2, test_pnemonia)\r\n\r\ntest_normal = '..\/working\/test\/Normal\/'\r\nmove_test_normal = test_data[test_data.Label == 'Normal']['X_ray_image_name'].values\r\nfor i in move_test_normal:\r\n    path3 = os.path.join(source_test, i)\r\n    shutil.copy(path3, test_normal)","592e9183":"train_datagen = ImageDataGenerator(rescale = 1\/255, rotation_range = 0.2, \r\n                              zoom_range=0.2,\r\n                                   horizontal_flip=True,\r\n                                   vertical_flip=True,\r\n                                   fill_mode='nearest',\r\n                                   validation_split=0.2)\r\ntest_datagen = ImageDataGenerator(rescale=1\/255)","dd364397":"train_gen = train_datagen.flow_from_directory(\"..\/working\/train\/\", target_size = (200,200),\r\n                                             batch_size = 50, class_mode = 'binary', \r\n                                              subset= 'training')\r\nvalid_gen = train_datagen.flow_from_directory(\"..\/working\/train\/\", target_size = (200,200),\r\n                                             batch_size = 50, class_mode = 'binary', \r\n                                              subset= 'validation')\r\ntest_gen = test_datagen.flow_from_directory(\"..\/working\/test\/\", target_size = (200,200),\r\n                                             batch_size = 50, class_mode = 'binary')","0ab27a39":"print(train_gen.class_indices)","95008e59":"model = tf.keras.models.Sequential([tf.keras.layers.Conv2D(16,(3,3), activation= 'relu',\r\n                                                          input_shape= (200,200,3)),\r\n                                   tf.keras.layers.MaxPool2D(2,2),\r\n                                   tf.keras.layers.Conv2D(32,(3,3), activation= 'relu'),\r\n                                    \r\n                                   tf.keras.layers.MaxPool2D(2,2),\r\n                                    tf.keras.layers.Conv2D(32,(3,3), activation= 'relu'),\r\n                                   tf.keras.layers.MaxPool2D(2,2),\r\n                                    tf.keras.layers.Conv2D(32,(3,3), activation= 'relu'),\r\n                                   tf.keras.layers.MaxPool2D(2,2),\r\n                                    \r\n                                   tf.keras.layers.Flatten(),\r\n                                   tf.keras.layers.Dense(1, activation = 'relu'),\r\n                                   tf.keras.layers.Dense(1,activation = 'sigmoid')])\r\ncallbacks = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=1)\r\nmodel.compile(optimizer=RMSprop(lr=0.0001),\r\n              loss = 'binary_crossentropy',\r\n              metrics=['accuracy'])\r\nhistory = model.fit(train_gen, validation_data = valid_gen, epochs = 10, \r\n                    callbacks = [callbacks], verbose = 1)","5ad15027":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\r\npred = (model.predict(test_gen)>0.5).astype(\"int32\")\r\n\r\ny_test = test_gen.labels\r\nprint('Classification report:\\n', classification_report(y_test, pred))\r\nprint('Accuracy score:\\n', accuracy_score(y_test, pred))","cbefbe9c":"pred_class= model.predict_classes(test_gen)\r\nprint('Classification report:\\n', classification_report(y_test, pred_class))\r\nprint('Accuracy Score:\\n', accuracy_score(y_test, pred_class))","e841ae20":"from keras.models import load_model\r\nmodel.save('model_lung_x-ray.h5')\r\n","4b4d9124":"# **Model Fitting**","9711865f":"# **Counting NULL values**","7c285562":"# **Saving the model**","454c323e":"# **Replacing NULL values with \"NA\"**","b05933cb":"# **Loading dataset**","cfdafdcf":"# **Load required libraries**","7d6e5bec":"# **Visualizing Dataset**"}}