{"cell_type":{"c1d8cee0":"code","e93a5278":"code","7fe82463":"code","83c42c37":"code","659a724e":"code","4c7843cd":"code","face6d47":"code","54761096":"code","1c85b56f":"code","8c4b9e30":"code","067cef42":"code","1312bbb3":"code","61f5078a":"code","6bd2e4f1":"code","8502d7d1":"code","0509148c":"code","bcb52728":"code","fb3287b9":"code","f600b953":"code","68705416":"code","8a7b63a7":"code","8a3b6551":"code","e6158e8b":"code","79b23378":"code","322ab1c6":"code","826d688e":"markdown","aeeab658":"markdown","a31b658b":"markdown","82c3d0d8":"markdown"},"source":{"c1d8cee0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import plot_tree # drawing classification trees\nfrom sklearn.model_selection import train_test_split # split the data into training and testing sets\nfrom sklearn.model_selection import cross_val_score # cross validations\nfrom sklearn.metrics import confusion_matrix # generate the confusion matrix\nfrom sklearn.metrics import plot_confusion_matrix # dras the confusion matrix\n","e93a5278":"data = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\ndata.head()","7fe82463":"df_uci = pd.read_csv('https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/heart-disease\/processed.cleveland.data', header = None)\ndf_uci.head()","83c42c37":"df = data.copy()\ndf.shape","659a724e":"df_uci.shape","4c7843cd":"df.info()","face6d47":"df_uci.columns = [\n    'age',\n    'gender',\n    'cp',\n    'restbp',\n    'chol',\n    'fbs',\n    'restecg',\n    'thalach',\n    'exang',\n    'oldpeak',\n    'slope',\n    'ca',\n    'thal',\n    'hd'\n]\ndf_uci.head()","54761096":"df_uci.dtypes","1c85b56f":"for column in df_uci.columns:\n    print(column, df_uci[column].unique())","8c4b9e30":"len(df_uci.loc[(df_uci['ca'] == '?') | (df_uci['thal'] == '?')])","067cef42":"df_uci.loc[(df_uci['ca'] == '?') | (df_uci['thal'] == '?')]","1312bbb3":"df2 = df_uci.loc[(df_uci['ca'] != '?') & (df_uci['thal'] != '?')]\ndf2.head()","61f5078a":"df2.nunique()","6bd2e4f1":"# The feature vector contains the features used to make the prediction - the independant variables\nX = df2.drop('hd', axis = 1).copy()\nX.head()","8502d7d1":"# the dependent variable is the target feature vector\ny = df2['hd'].copy()\ny.head()","0509148c":"X['cp'].unique()","bcb52728":"pd.get_dummies(X, columns = ['cp']).head()","fb3287b9":"X1 = pd.get_dummies(X, columns = ['cp', 'restecg', 'slope', 'thal'])\nX1.head()","f600b953":"y.unique()","68705416":"# We want to perform a binary classification, so we will consider any value greater than zero as a patient having heart disease\ny1 = y > 0\ny[y1] = 1\ny.unique()","8a7b63a7":"# Split the data into training and testing datasets\nX_train, X_test, y_train, y_test = train_test_split(X1, y, random_state = 1)\n\n# Create a decision tree and fit it to the training data\nclf = DecisionTreeClassifier(random_state = 1)\nclf = clf.fit(X_train, y_train)","8a3b6551":"plt.figure(figsize = (15, 7.5))\nplot_tree(clf, filled = True, rounded = True, class_names = [\"No HD\", \"Yes HD\"], feature_names = X1.columns);","e6158e8b":"## Plot the confusion matrix\nplot_confusion_matrix(clf, X_test, y_test, display_labels = [\"No HD\", \"Yes HD\"])","79b23378":"path = clf.cost_complexity_pruning_path(X_train, y_train)\nccp_alphas = path.ccp_alphas\nccp_alphas = ccp_alphas[:-1]\n\nclf_dts = []\nfor ccp_alpha in ccp_alphas:\n    clf_dt = DecisionTreeClassifier(random_state = 1, ccp_alpha = ccp_alpha)\n    clf_dt.fit(X_train, y_train)\n    clf_dts.append(clf_dt)","322ab1c6":"train_scores = [clf_dt.score(X_train, y_train) for clf_dt in clf_dts]\ntest_scores = [clf_dt.score(X_test, y_test) for clf_dt in clf_dts]","826d688e":"1. ## Decision Tree Classifier - Heart Disease","aeeab658":"## Build a Classification Tree","a31b658b":"## Exploratory Data Analysis[](http:\/\/)","82c3d0d8":"### Cost Complexity Pruning"}}