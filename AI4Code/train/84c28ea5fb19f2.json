{"cell_type":{"83a5ce6b":"code","2d9f05c6":"code","5ff46164":"code","8347378b":"code","87c40d18":"code","200dad7e":"code","e0719c05":"code","6c082afe":"code","7c79f124":"code","0594ee08":"code","c72cd059":"code","dd5e5cfe":"code","6a339352":"code","10f9cb89":"code","e240affb":"code","4da340b6":"code","5110bd3f":"code","5a34ba6d":"code","65c30a8f":"code","1f7e98a4":"code","1310ef98":"code","bc46eda0":"code","b2ceeb93":"code","843d4776":"code","35064e27":"code","6e8a4fb2":"code","99347f58":"code","5797010f":"code","14ddc50b":"code","9bc983bb":"code","2bc41688":"code","0dc87851":"code","367b4964":"code","f17d937c":"code","b51ea8df":"code","1adfcc2c":"code","e66b6a18":"code","8f56a528":"code","55f3924f":"code","781fa489":"code","4fe7c8b7":"code","4fd49d12":"code","4d9fe1e5":"code","fc96c219":"code","8cbb01d9":"code","50a1d054":"code","bf273736":"code","dcf3db84":"code","79bc7cc0":"code","cef9a5df":"code","be0e466c":"code","825a0114":"code","96b4b7bb":"code","d89def8d":"code","7fc04975":"code","2207d868":"code","0f55901a":"code","a2d1ab65":"code","0d2b44bc":"code","33a1ddfa":"code","fd99665c":"code","11624a04":"markdown","881a8d41":"markdown","59e1e2d5":"markdown","271fe62f":"markdown","03ccdc1b":"markdown","6f00adfd":"markdown","11347d30":"markdown","2f9f88e6":"markdown","205e9adb":"markdown","d1a02537":"markdown","7ece933b":"markdown","52f1e871":"markdown","5cccfc12":"markdown","c34192b6":"markdown","cd0714b2":"markdown"},"source":{"83a5ce6b":"import pandas as pd\nimport numpy as np\ndf = pd.read_csv(\"..\/input\/customer-analytics\/Train.csv\")\ndf.head()","2d9f05c6":"# [\uc2dc\ud5d8\uc6a9 \ub370\uc774\ud130\uc14b \ub9cc\ub4e4\uae30]\n# (\ub2e8, y_test \ub370\uc774\ud130\ub294 \ud65c\uc6a9\ud574\uc11c\ub294 \uc548\ub428)\n# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/customer-analytics\/Train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, \n                                                  target='Reached.on.Time_Y.N', \n                                                  id_name='ID')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","5ff46164":"# \uc81c\uacf5\ub41c 3\uac1c \ub370\uc774\ud130 (y_test\ub370\uc774\ud130 \ud65c\uc6a9X)\nX_train.shape, X_test.shape, y_train.shape","8347378b":"X_train.head()","87c40d18":"X_test.head()","200dad7e":"y_train.head()","e0719c05":"X_train.info()","6c082afe":"X_test.info()","7c79f124":"y_train.info()","0594ee08":"X_train.isna().sum()","c72cd059":"X_test.isna().sum()","dd5e5cfe":"for i in range(4):\n    print(X_train.iloc[:,i].value_counts())","6a339352":"for i in range(3):\n    print(X_train.iloc[:,i+5].value_counts())","10f9cb89":"for i in range(4):\n    print(X_test.iloc[:,i].value_counts())","e240affb":"for i in range(3):\n    print(X_test.iloc[:,i+5].value_counts())","4da340b6":"X_train.describe()","5110bd3f":"X_test.describe()","5a34ba6d":"y_train.iloc[:,1].value_counts() # \ubd84\ub958\ubb38\uc81c","65c30a8f":"X_train","1f7e98a4":"X_train.iloc[:,[4]].boxplot()","1310ef98":"X_test.iloc[:,[4]].boxplot()","bc46eda0":"X_train.iloc[:,[8]].boxplot()","b2ceeb93":"X_test.iloc[:,[8]].boxplot()","843d4776":"X_train.iloc[:,[9]].boxplot()","35064e27":"X_test.iloc[:,[9]].boxplot()","6e8a4fb2":"X_train.iloc[:,[0,1,6,7]].nunique()","99347f58":"drop_list = X_train.iloc[:,[0,1,6,7]].columns","5797010f":"for i in range(len(drop_list)):\n    X_train = pd.concat([X_train, pd.get_dummies(X_train[drop_list[i]]).iloc[:,:-1]], axis=1)\n    X_test = pd.concat([X_test, pd.get_dummies(X_test[drop_list[i]]).iloc[:,:-1]], axis=1)","14ddc50b":"X_train = X_train.drop(drop_list, axis=1)    \nX_test = X_test.drop(drop_list, axis=1)    \nX_train.head()","9bc983bb":"from sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score \n\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import StackingClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier","2bc41688":"X_tra, X_val, y_tra, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","0dc87851":"clf = GradientBoostingClassifier(random_state=0)\nclf.fit(X_tra, y_tra.iloc[:,1])\nclf.predict(X_val)\nprint(\"GradientBoostingClassifier\", roc_auc_score(clf.predict(X_val), y_val.iloc[:,1]))\n\nclf = ExtraTreesClassifier(random_state=0)\nclf.fit(X_tra, y_tra.iloc[:,1])\nclf.predict(X_val)\nprint(\"ExtraTreesClassifier\", roc_auc_score(clf.predict(X_val), y_val.iloc[:,1]))\n\nclf = AdaBoostClassifier(random_state=0)\nclf.fit(X_tra, y_tra.iloc[:,1])\nclf.predict(X_val)\nprint(\"AdaBoostClassifier\", roc_auc_score(clf.predict(X_val), y_val.iloc[:,1]))\n\nclf = RandomForestClassifier(random_state=0)\nclf.fit(X_tra, y_tra.iloc[:,1])\nclf.predict(X_val)\nprint(\"RandomForestClassifier\", roc_auc_score(clf.predict(X_val), y_val.iloc[:,1]))\n\nclf = DecisionTreeClassifier(random_state=0)\nclf.fit(X_tra, y_tra.iloc[:,1])\nclf.predict(X_val)\nprint(\"DecisionTreeClassifier\", roc_auc_score(clf.predict(X_val), y_val.iloc[:,1]))\n\nclf = SVC(random_state=0)\nclf.fit(X_tra, y_tra.iloc[:,1])\nclf.predict(X_val)\nprint(\"SVC\", roc_auc_score(clf.predict(X_val), y_val.iloc[:,1]))\n\nclf = KNeighborsClassifier()\nclf.fit(X_tra, y_tra.iloc[:,1])\nclf.predict(X_val)\nprint(\"KNeighborsClassifier\", roc_auc_score(clf.predict(X_val), y_val.iloc[:,1]))\n\nclf = XGBClassifier(random_state=0)\nclf.fit(X_tra, y_tra.iloc[:,1])\nclf.predict(X_val)\nprint(\"XGBClassifier\", roc_auc_score(clf.predict(X_val), y_val.iloc[:,1]))","367b4964":"n_estimators = [50,100,150,200]\nmax_depth = [5,10,15]\nhyper={'n_estimators':n_estimators, 'max_depth':max_depth}\ngd=GridSearchCV(estimator=GradientBoostingClassifier(),param_grid=hyper,verbose=True, scoring = 'roc_auc')\ngd.fit(X_train, y_train.iloc[:,1])\nprint(gd.best_score_)\nprint(gd.best_estimator_)","f17d937c":"n_estimators = [50,100,150,200]\nhyper={'n_estimators':n_estimators}\ngd=GridSearchCV(estimator=AdaBoostClassifier(random_state = 42),param_grid=hyper,verbose=True, scoring = 'roc_auc')\ngd.fit(X_train, y_train.iloc[:,1])\nprint(gd.best_score_)\nprint(gd.best_estimator_)","b51ea8df":"max_depth = [5,10,15]\nhyper={'max_depth':max_depth}\ngd=GridSearchCV(estimator=RandomForestClassifier(random_state = 42),param_grid=hyper,verbose=True, scoring = 'roc_auc')\ngd.fit(X_train, y_train.iloc[:,1])\nprint(gd.best_score_)\nprint(gd.best_estimator_)","1adfcc2c":"n_estimators = [50,100,150,200]\nmax_depth = [-1,5,10,15,20]\nhyper={'n_estimators':n_estimators, 'max_depth':max_depth}\ngd=GridSearchCV(estimator=XGBClassifier(random_state = 42),param_grid=hyper,verbose=True, scoring = 'roc_auc')\ngd.fit(X_train, y_train.iloc[:,1])\nprint(gd.best_score_)\nprint(gd.best_estimator_)","e66b6a18":"clf = GradientBoostingClassifier(max_depth=5, n_estimators=50, random_state = 42)\nclf.fit(X_train, y_train.iloc[:,1])\npred = clf.predict(X_test)\nprint(\"GBM\", roc_auc_score(pred, y_test.iloc[:,1]))","8f56a528":"submission = y_test.copy()\nsubmission.iloc[:,1] = pred\n# submission.to_csv('submission.csv', index = False)","55f3924f":"# [\uc2dc\ud5d8\uc6a9 \ub370\uc774\ud130\uc14b \ub9cc\ub4e4\uae30]\n# (\ub2e8, y_test \ub370\uc774\ud130\ub294 \ud65c\uc6a9\ud574\uc11c\ub294 \uc548\ub428)\n# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/customer-analytics\/Train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, \n                                                  target='Reached.on.Time_Y.N', \n                                                  id_name='ID')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","781fa489":"# \ub370\uc774\ud130 \ud655\uc778\nprint(X_train.shape)\nX_train.head()","4fe7c8b7":"y_train","4fd49d12":"# \ub808\uc774\ube14(\ud0c0\uac9f) \ud655\uc778\ny_train['Reached.on.Time_Y.N'].value_counts()","4d9fe1e5":"# X_train \uacb0\uce21\uce58 \ud655\uc778\nX_train.isnull().sum()","fc96c219":"# X_test \uacb0\uce21\uce58 \ud655\uc778\nX_test.isnull().sum()","8cbb01d9":"# \ub370\uc774\ud130 \ud0c0\uc785 \ud655\uc778\nX_train.info()","50a1d054":"# object \ud0c0\uc785 \uceec\ub7fc, \uace0\uc720\uac12 \uac1c\uc218 \ud655\uc778\nX_train[['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender']].nunique()","bf273736":"# object \uceec\ub7fc \uc0ad\uc81c (\ub610\ub294 \ub77c\ubca8\uc778\ucf54\ub529, \uc6d0\ud56b\uc778\ucf54\ub529)\nX_train = X_train.drop(['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender'], axis=1)\nX_test = X_test.drop(['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender'], axis=1)\nX_train","dcf3db84":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier","79bc7cc0":"from sklearn.model_selection import train_test_split\nX_tr,X_val,y_tr,y_val = train_test_split(X_train,y_train['Reached.on.Time_Y.N'],test_size=0.2,random_state=2021)","cef9a5df":"model = LogisticRegression()\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","be0e466c":"model = KNeighborsClassifier()\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","825a0114":"model = SVC()\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","96b4b7bb":"model = DecisionTreeClassifier()\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","d89def8d":"model = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","7fc04975":"model = XGBClassifier(eval_metric='mlogloss', use_label_encoder=False)\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","2207d868":"model = KNeighborsClassifier()\nmodel.fit(X_train, y_train['Reached.on.Time_Y.N'])\npred = model.predict(X_test)\npred","0f55901a":"submission = pd.DataFrame({\n        \"ID\": y_test[\"ID\"],\n        \"Reached.on.Time_Y.N\": pred\n    })","a2d1ab65":"submission.head()","0d2b44bc":"submission.to_csv('submission.csv', index=False)  ## \uc218\ud5d8\ubc88\ud638.csv","33a1ddfa":"# \uc870\uae08 \ub5a8\uc5b4\uc9c4 \uc131\ub2a5\uc744 \ubcf4\uc5ec\uc8fc\uace0 \uc788\uc74c\nround(model.score(X_test, y_test['Reached.on.Time_Y.N']) * 100, 2)","fd99665c":"print(roc_auc_score(submission.iloc[:,1], y_test.iloc[:,1]))","11624a04":"## [\ucc38\uace0]\uc791\uc5c5\ud6152 \ubb38\uad6c\n- \ucd9c\ub825\uc744 \uc6d0\ud558\uc2e4 \uacbd\uc6b0 print() \ud568\uc218 \ud65c\uc6a9\n- \uc608\uc2dc) print(df.head())\n- getcwd(), chdir() \ub4f1 \uc791\uc5c5 \ud3f4\ub354 \uc124\uc815 \ubd88\ud544\uc694\n- \ud30c\uc77c \uacbd\ub85c \uc0c1 \ub0b4\ubd80 \ub4dc\ub77c\uc774\ube0c \uacbd\ub85c(C: \ub4f1) \uc811\uadfc \ubd88\uac00\n\n### \ub370\uc774\ud130 \ud30c\uc77c \uc77d\uae30 \uc608\uc81c\n- import pandas as pd\n- X_test = pd.read_csv(\"data\/X_test.csv\")\n- X_train = pd.read_csv(\"data\/X_train.csv\")\n- y_train = pd.read_csv(\"data\/y_train.csv\")\n\n### \uc0ac\uc6a9\uc790 \ucf54\ub529\n\n### \ub2f5\uc548 \uc81c\ucd9c \ucc38\uace0\n- \uc544\ub798 \ucf54\ub4dc \uc608\uce21\ubcc0\uc218\uc640 \uc218\ud5d8\ubc88\ud638\ub97c \uac1c\uc778\ubcc4\ub85c \ubcc0\uacbd\ud558\uc5ec \ud65c\uc6a9\n- pd.DataFrame({'cust_id': X_test.cust_id, 'gender': pred}).to_csv('003000000.csv', index=False)","881a8d41":"## \ubaa8\ub378 \ubc0f \ud3c9\uac00","59e1e2d5":"Discount_offered \ubcc0\uc218\uc5d0\uc11c \uc774\uc0c1\uce58\uac00 \uc874\uc7ac\ud558\uc9c0\ub9cc \uc5f0\uc18d\uc801\uc73c\ub85c \ubd84\ud3ec\ud558\uace0 \uc788\uc5b4 \ub530\ub85c \ucc98\ub9ac\ub294 \ud558\uc9c0 \uc54a\uae30\ub85c \ud55c\ub2e4.","271fe62f":"## \uacb0\uacfc \uccb4\uc810 (\uc218\ud5d8\uc790\ub294 \uc54c \uc218 \uc5c6\ub294 \ubd80\ubd84\uc784)","03ccdc1b":"## \uc804\uc790\uc0c1\uac70\ub798 \ubc30\uc1a1 \ub370\uc774\ud130\n### \uc81c\ud488 \ubc30\uc1a1 \uc2dc\uac04\uc5d0 \ub9de\ucdb0 \ubc30\uc1a1\ub418\uc5c8\ub294\uc9c0 \uc608\uce21\ubaa8\ub378 \ub9cc\ub4e4\uae30\n\ud559\uc2b5\uc6a9 \ub370\uc774\ud130 (X_train, y_train)\uc744 \uc774\uc6a9\ud558\uc5ec \ubc30\uc1a1 \uc608\uce21 \ubaa8\ud615\uc744 \ub9cc\ub4e0 \ud6c4, \uc774\ub97c \ud3c9\uac00\uc6a9 \ub370\uc774\ud130(X_test)\uc5d0 \uc801\uc6a9\ud558\uc5ec \uc5bb\uc740 \uc608\uce21\uac12\uc744 \ub2e4\uc74c\uacfc \uac19\uc740 \ud615\uc2dd\uc758 CSV\ud30c\uc77c\ub85c \uc0dd\uc131\ud558\uc2dc\uc624(\uc81c\ucd9c\ud55c \ubaa8\ub378\uc758 \uc131\ub2a5\uc740 ROC-AUC \ud3c9\uac00\uc9c0\ud45c\uc5d0 \ub530\ub77c \ucc44\uc810)\n\n![image.png](attachment:f70c3a4b-9984-4656-af95-dac047a900cb.png)\n\n[\uc2dc\ud5d8\uc6a9 \ub370\uc774\ud130\uc14b \ub9cc\ub4e4\uae30] \ucf54\ub4dc\ub294 \uc608\uc2dc\ubb38\uc81c\uc640 \ub3d9\uc77c\ud55c \ud615\ud0dc\uc758 X_train, y_train, X_test \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uae30 \uc704\ud568\uc784\n\n(\uc720\uc758\uc0ac\ud56d)\n- \uc131\ub2a5\uc774 \uc6b0\uc218\ud55c \uc608\uce21\ubaa8\ud615\uc744 \uad6c\ucd95\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc801\uc808\ud55c \ub370\uc774\ud130 \uc804\ucc98\ub9ac, \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1, \ubd84\ub958\uc54c\uace0\ub9ac\uc998, \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd, \ubaa8\ud615 \uc559\uc0c1\ube14 \ub4f1\uc774 \uc218\ubc18\ub418\uc5b4\uc57c \ud55c\ub2e4.\n- \uc218\ud5d8\ubc88\ud638.csv\ud30c\uc77c\uc774 \ub9cc\ub4e4\uc5b4\uc9c0\ub3c4\ub85d \ucf54\ub4dc\ub97c \uc81c\ucd9c\ud55c\ub2e4.\n- \uc81c\ucd9c\ud55c \ubaa8\ub378\uc758 \uc131\ub2a5\uc740 ROC-AUC\ud615\ud0dc\ub85c \uc77d\uc5b4\ub4dc\ub9b0\ub2e4.","6f00adfd":"## \uc0ac\uc6a9\uc790 \ucf54\ub529","11347d30":"## \ubaa8\ub378 \uc120\ud0dd \ubc0f \uacb0\uacfc \ucd9c\ub825","2f9f88e6":"### \ub370\uc774\ud130 \ud655\uc778","205e9adb":"## EDA","d1a02537":"train test \ub370\uc774\ud130 \uc911 \uc11c\ub85c \ud3ec\ud568\ub418\uc9c0 \uc54a\ub294 \ub370\uc774\ud130\ub098 \uacb0\uce21\uce58\ub294 \uc5c6\uc5c8\ub2e4","7ece933b":"## \ub370\uc774\ud130 \uc804\ucc98\ub9ac","52f1e871":"\uad6c\uccb4\ud654\ud560 \ubaa8\ub378\uc740 gbm, adab, rf, xgb\ub97c \uc120\ud0dd","5cccfc12":"feature\uc5d0 \uacb0\uce21\uce58 \uc5c6\uc74c","c34192b6":"## \ud480\uc774 (Baseline)\n- \uc544\ub798\ucf54\ub4dc\ub294 \uc815\ub2f5\uc774 \uc544\ub2cc \ud480\uc774 \uc608\uc2dc\uc785\ub2c8\ub2e4.","cd0714b2":"\uba85\ubaa9\ud615 \ubcc0\uc218\uc911 \uce74\ud14c\uace0\ub9ac\uac00 10\uac1c \uc774\uc0c1\uc778 \ubcc0\uc218\uac00 \uc5c6\uc73c\ubbc0\ub85c \ubaa8\ub450 \uc6d0-\ud56b \uc778\ucf54\ub529\uc744 \ud574\uc900\ub2e4."}}