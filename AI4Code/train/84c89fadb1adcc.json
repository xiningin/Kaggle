{"cell_type":{"4f6020ed":"code","8ba47a07":"code","28161dfc":"code","3aafc241":"code","32d00d2a":"code","478825a5":"code","efaa49f7":"code","6b0683ad":"code","2edc1cb3":"code","c07127e6":"code","904f815f":"code","ba2b9f5d":"code","e653e2cf":"code","2f0f47e8":"code","f3a5fc56":"code","f7b12bf4":"code","7fabafc1":"code","264dd6fa":"code","77b8f1d0":"code","b6b0d563":"code","009080a9":"code","1f26bb50":"code","9d620a7a":"code","d24265a2":"code","0b6db729":"code","5953d920":"code","8faf3aff":"code","38989603":"code","58cb55a5":"code","b7bf7a0e":"code","ae1ef8fa":"code","d04a24d5":"code","611b2cf7":"code","0290de03":"code","9f51580b":"code","b8bb35bc":"code","cc73230d":"code","125b4aec":"code","d64363e3":"code","a1ef80fb":"code","77e13b7f":"code","b91f3b5d":"code","4ace1dec":"code","d165ef33":"code","0e97d656":"code","75c3e315":"code","b40872b7":"code","b47ed2d1":"code","c6868b61":"code","4fdce0cb":"code","668f327a":"code","1f7eeab8":"code","8baebe7f":"code","ab24c1e6":"code","628c0405":"code","0742c3bc":"code","54d515b3":"code","d8c3c50a":"code","f212a865":"code","4db9a36b":"code","cbf618cc":"code","a89565dc":"code","5bd8f665":"code","03d5f1ac":"code","40da3d37":"code","27c7dd27":"code","4eb1d5bf":"code","c3fe4d03":"code","c5c49074":"code","38498505":"code","f8be7814":"code","76c1b33a":"code","9414f5f8":"code","1398cc81":"code","64d9394d":"code","b8226083":"code","4327d164":"code","f1b48b7e":"code","58c1f5bf":"code","e8d2dca4":"code","bfdb6308":"code","0648f2fc":"code","ffdf41ca":"code","c5920a51":"code","d1c3d4e5":"markdown","1b1e7555":"markdown","bdcc8513":"markdown","ce61448c":"markdown","31088c15":"markdown","3e09f52d":"markdown","d1770f87":"markdown","51571d5b":"markdown","93953384":"markdown","ca5ed8ae":"markdown","a39ce800":"markdown","4a13f1b4":"markdown","455fbd2e":"markdown"},"source":{"4f6020ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8ba47a07":"#  Pick a Dataset you might be interested in.\n#  Say, all airline-safety files...\nimport zipfile\n\nDataset = \"train\"\n\n# Will unzip the files so that you can see them..\nwith zipfile.ZipFile(\"..\/input\/spooky-author-identification\/\"+Dataset+\".zip\",\"r\") as z:\n    z.extractall(\".\")","28161dfc":"import base64\nimport numpy as np\nimport pandas as pd\n\n# Plotly imports\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n\n# Other imports\nfrom collections import Counter\n# from scipy.misc import imread\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.decomposition import NMF, LatentDirichletAllocation\nfrom matplotlib import pyplot as plt\n%matplotlib inline","3aafc241":"import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom tqdm import tqdm\nfrom sklearn.svm import SVC\nfrom keras.models import Sequential\nfrom keras.layers.recurrent import LSTM, GRU\nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.layers.embeddings import Embedding\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.utils import np_utils\nfrom sklearn import preprocessing, decomposition, model_selection, metrics, pipeline\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom keras.layers import GlobalMaxPooling1D, Conv1D, MaxPooling1D, Flatten, Bidirectional, SpatialDropout1D\nfrom keras.preprocessing import sequence, text\nfrom keras.callbacks import EarlyStopping\nfrom nltk import word_tokenize\nfrom nltk.corpus import stopwords\nstop_words = stopwords.words('english')","32d00d2a":"# There's only one file above...we'll select it.\ntrain=pd.read_csv(\"\/kaggle\/working\/train.csv\")\ntrain.head()","478825a5":"type(train)","efaa49f7":"z = {'EAP': 'Edgar Allen Poe', 'MWS': 'Mary Shelley', 'HPL': 'HP Lovecraft'}\n\n# Basic Statistics\ndata = [go.Bar(\n            x = train.author.map(z).unique(),\n            y = train.author.value_counts().values,\n            marker= dict(colorscale='Jet',\n                         color = train.author.value_counts().values\n                        ),\n            text='Text entries attributed to Author'\n    )]\n\nlayout = go.Layout(\n    title='Target variable distribution'\n)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='basic-bar')","6b0683ad":"all_words = train['text'].str.split(expand=True).unstack().value_counts()\ndata = [go.Bar(\n            x = all_words.index.values[2:50],\n            y = all_words.values[2:50],\n            marker= dict(colorscale='Jet',\n                         color = all_words.values[2:100]\n                        ),\n            text='Word counts'\n    )]\n\nlayout = go.Layout(\n    title='Top 50 (Uncleaned) Word frequencies in the training dataset'\n)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='basic-bar')","2edc1cb3":"eap = train[train.author==\"EAP\"][\"text\"].values\nhpl = train[train.author==\"HPL\"][\"text\"].values\nmws = train[train.author==\"MWS\"][\"text\"].values","c07127e6":"eap","904f815f":"from wordcloud import WordCloud, STOPWORDS\n# The wordcloud of Cthulhu\/squidy thing for HP Lovecraft\nplt.figure(figsize=(16,13))\nwordcloud1 = WordCloud( background_color='white',\n                        width=600,\n                        height=400).generate(\" \".join(hpl))\nplt.imshow(wordcloud1)\nplt.axis('off')\nplt.title('HP Lovecraft (Cthulhu-Squidy)',fontsize=40);","ba2b9f5d":"from wordcloud import WordCloud, STOPWORDS\n# The wordcloud of Cthulhu\/squidy thing for HP Lovecraft\nplt.figure(figsize=(16,13))\nwordcloud1 = WordCloud( background_color='white',\n                        width=600,\n                        height=400).generate(\" \".join(eap))\nplt.imshow(wordcloud1)\nplt.axis('off')\nplt.title('Edgar Allen Poe (The Raven)',fontsize=40);","e653e2cf":"from wordcloud import WordCloud, STOPWORDS\n# The wordcloud of Cthulhu\/squidy thing for HP Lovecraft\nplt.figure(figsize=(16,13))\nwordcloud1 = WordCloud( background_color='white',\n                        width=600,\n                        height=400).generate(\" \".join(mws))\nplt.imshow(wordcloud1)\nplt.axis('off')\nplt.title(\"Mary Shelley (Frankenstein's Monster)\",fontsize=40);","2f0f47e8":"import nltk","f3a5fc56":"# Tokenization\n\nfirst_text = train.text.values[0]\nprint(first_text)\nprint(\"=\"*90)\nprint(first_text.split(\" \"))","f7b12bf4":"first_text_list = nltk.word_tokenize(first_text)\nprint(first_text_list)","7fabafc1":"stopwords = nltk.corpus.stopwords.words('english')\nlen(stopwords)","264dd6fa":"print(stopwords)","77b8f1d0":"first_text_list_cleaned = [ word for word in first_text_list if word.lower() not in stopwords]\nprint(first_text_list_cleaned)\nprint(\"=\"*90)\nprint(\"Length of original list: {0} words\\n\"\n      \"Length of list after stopwords removal: {1} words\"\n       .format(len(first_text_list),len(first_text_list_cleaned)))","b6b0d563":"stemmer = nltk.stem.PorterStemmer()","009080a9":"print(\"The stemmed form of running is: {}\".format(stemmer.stem(\"running\")))\nprint(\"The stemmed form of runs is: {}\".format(stemmer.stem(\"runs\")))\nprint(\"The stemmed form of run is: {}\".format(stemmer.stem(\"run\")))","1f26bb50":"print(\"The stemmed form of leaves is: {}\".format(stemmer.stem(\"leaves\")))","9d620a7a":"from nltk.stem import WordNetLemmatizer\nlemm = WordNetLemmatizer()\nprint(\"The lemmatized form of leaves is :{}\".format(lemm.lemmatize(\"leaves\")))","d24265a2":"sentence = [\"I love to eat Burgers\",\n            \"I love to eat Fries\"]\nvectorizer = CountVectorizer(min_df = 0)\nsentence_transform = vectorizer.fit_transform(sentence)","0b6db729":"print(\"The features are:\\n {}\".format(vectorizer.get_feature_names()))\nprint(\"\\nThe vectorized array looks like:\\n {}\".format(sentence_transform.toarray()))","5953d920":"sentence_transform","8faf3aff":"# Define helper function to print top words\ndef print_top_words(model,feature_names,n_top_words):\n    for index,topic in enumerate(model.components_):\n        message = \"\\nTopic #{}:\".format(index)\n        message +=\" \".join([feature_names[i] for i in topic.argsort()[:-n_top_words - 1 : -1]])\n        print(message)\n        print(\"=\"*70)","38989603":"# Extending the countvectorizer Class with a lemmatizer\nlemm = WordNetLemmatizer()\nclass LemmaCountVectorizer(CountVectorizer):\n    def build_analyzer(self):\n        analyzer = super(LemmaCountVectorizer,self).build_analyzer()\n        return lambda doc: (lemm.lemmatize(w) for w in analyzer(doc))","58cb55a5":"# sorting the entire training text in a list\ntext = list(train.text.values)\n# Calling our overwrittren Count Vectorizer\ntf_vectorizer = LemmaCountVectorizer(max_df = 0.95,\n                                    min_df = 2,\n                                    stop_words = \"english\",\n                                    decode_error = \"ignore\")\ntf= tf_vectorizer.fit_transform(text)","b7bf7a0e":"feature_names = tf_vectorizer.get_feature_names()\ncount_vec = np.asarray(tf.sum(axis=0)).ravel()\nzipped = list(zip(feature_names, count_vec))\nx, y = (list(x) for x in zip(*sorted(zipped, key=lambda x: x[1], reverse=True)))\n# Now I want to extract out on the top 15 and bottom 15 words\nY = np.concatenate([y[0:15], y[-16:-1]])\nX = np.concatenate([x[0:15], x[-16:-1]])\n\n# Plotting the Plot.ly plot for the Top 50 word frequencies\ndata = [go.Bar(\n            x = x[0:50],\n            y = y[0:50],\n            marker= dict(colorscale='Jet',\n                         color = y[0:50]\n                        ),\n            text='Word counts'\n    )]\n\nlayout = go.Layout(\n    title='Top 50 Word frequencies after Preprocessing'\n)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='basic-bar')\n\n# Plotting the Plot.ly plot for the Top 50 word frequencies\ndata = [go.Bar(\n            x = x[-100:],\n            y = y[-100:],\n            marker= dict(colorscale='Portland',\n                         color = y[-100:]\n                        ),\n            text='Word counts'\n    )]\n\nlayout = go.Layout(\n    title='Bottom 100 Word frequencies after Preprocessing'\n)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='basic-bar')","ae1ef8fa":"lda = LatentDirichletAllocation(n_components=11, max_iter=5,\n                                learning_method = 'online',\n                                learning_offset = 50.,\n                                random_state = 0)","d04a24d5":"##\nlda.fit(tf)","611b2cf7":"n_top_words = 40\nprint(\"\\nTopics in LDA model: \")\ntf_feature_names = tf_vectorizer.get_feature_names()\nprint_top_words(lda, tf_feature_names, n_top_words)","0290de03":"first_topic = lda.components_[0]\nsecond_topic = lda.components_[1]\nthird_topic = lda.components_[2]\nfourth_topic = lda.components_[3]","9f51580b":"first_topic.shape","b8bb35bc":"first_topic_words = [tf_feature_names[i] for i in first_topic.argsort()[:-50 - 1 :-1]]\nsecond_topic_words = [tf_feature_names[i] for i in second_topic.argsort()[:-50 - 1 :-1]]\nthird_topic_words = [tf_feature_names[i] for i in third_topic.argsort()[:-50 - 1 :-1]]\nfourth_topic_words = [tf_feature_names[i] for i in fourth_topic.argsort()[:-50 - 1 :-1]]","cc73230d":"# Generating the wordcloud with the values under the category dataframe\nfirstcloud = WordCloud(\n                          stopwords=STOPWORDS,\n                          background_color='black',\n                          width=2500,\n                          height=1800\n                         ).generate(\" \".join(first_topic_words))\nplt.imshow(firstcloud)\nplt.axis('off')\nplt.show()","125b4aec":"# Generating the wordcloud with the values under the category dataframe\ncloud = WordCloud(\n                          stopwords=STOPWORDS,\n                          background_color='black',\n                          width=2500,\n                          height=1800\n                         ).generate(\" \".join(second_topic_words))\nplt.imshow(cloud)\nplt.axis('off')\nplt.show()","d64363e3":"# Generating the wordcloud with the values under the category dataframe\ncloud = WordCloud(\n                          stopwords=STOPWORDS,\n                          background_color='black',\n                          width=2500,\n                          height=1800\n                         ).generate(\" \".join(third_topic_words))\nplt.imshow(cloud)\nplt.axis('off')\nplt.show()","a1ef80fb":"# Generating the wordcloud with the values under the category dataframe\ncloud = WordCloud(\n                          stopwords=STOPWORDS,\n                          background_color='black',\n                          width=2500,\n                          height=1800\n                         ).generate(\" \".join(fourth_topic_words))\nplt.imshow(cloud)\nplt.axis('off')\nplt.show()","77e13b7f":"train = pd.read_csv(\"..\/input\/spooky\/train.csv\")\ntest = pd.read_csv(\"..\/input\/spooky\/test.csv\")\nsample = pd.read_csv(\"..\/input\/spooky\/sample_submission.csv\")","b91f3b5d":"train.head()","4ace1dec":"test.head()","d165ef33":"sample.head()","0e97d656":"def multiclass_logloss(actual, predicted, eps=1e-15):\n    \"\"\"Multi class version of Logarithmic Loss metric.\n    :param actual: Array containing the actual target classes\n    :param predicted: Matrix with class predictions, one probability per class\n    \"\"\"\n    # Convert 'actual' to a binary array if it's not already:\n    if len(actual.shape) == 1:\n        actual2 = np.zeros((actual.shape[0], predicted.shape[1]))\n        for i, val in enumerate(actual):\n            actual2[i, val] = 1\n        actual = actual2\n\n    clip = np.clip(predicted, eps, 1 - eps)\n    rows = actual.shape[0]\n    vsota = np.sum(actual * np.log(clip))\n    return -1.0 \/ rows * vsota","75c3e315":"# We use the LabelEncoder from scikit-learn to convert text labels to integers, 0, 1 2\nlbl_enc = preprocessing.LabelEncoder()\ny = lbl_enc.fit_transform(train.author.values)","b40872b7":"xtrain,xvalid,ytrain,yvalid = train_test_split(train.text.values,y,\n                                              stratify = y,\n                                              random_state = 42,\n                                              test_size = 0.1,\n                                              shuffle =True)","b47ed2d1":"print (xtrain.shape)\nprint (xvalid.shape)","c6868b61":"# Always start with these features. They work (almost) everytime!\ntfv = TfidfVectorizer(min_df=3,max_features=None,\n                     strip_accents=\"unicode\",\n                      analyzer='word',token_pattern = r'\\w{1,}',\n                     ngram_range = (1,3),use_idf = 1,smooth_idf=1,sublinear_tf = 1,\n                     stop_words = \"english\")\n\n# Fitting TF-IDF to both training and test sets (semi-supervised learning)\ntfv.fit(list(xtrain) + list(xvalid))\nxtrain_tfv = tfv.transform(xtrain)\nxvalid_tfv = tfv.transform(xvalid)","4fdce0cb":"# Fitting a simple Logistic Regression on TFIDF\nclf = LogisticRegression(C=1.0)\nclf.fit(xtrain_tfv, ytrain)\npredictions = clf.predict_proba(xvalid_tfv)\n\nprint (\"logloss: %0.3f \" % multiclass_logloss(yvalid, predictions))","668f327a":"ctv = CountVectorizer(analyzer='word',token_pattern=r'\\w{1,}',\n            ngram_range=(1, 3), stop_words = 'english')\n\n# Fitting Count Vectorizer to both training and test sets (semi-supervised learning)\nctv.fit(list(xtrain) + list(xvalid))\nxtrain_ctv =  ctv.transform(xtrain) \nxvalid_ctv = ctv.transform(xvalid)","1f7eeab8":"# Fitting a simple Logistic Regression on Counts\nclf = LogisticRegression(C=1.0)\nclf.fit(xtrain_ctv, ytrain)\npredictions = clf.predict_proba(xvalid_ctv)\n\nprint (\"logloss: %0.3f \" % multiclass_logloss(yvalid, predictions))","8baebe7f":"# Fitting a simple Naive Bayes on TFIDF\nclf = MultinomialNB()\nclf.fit(xtrain_tfv,ytrain)\npredictions = clf.predict_proba(xvalid_tfv)\n\nprint(\"lgoloss: %0.3f \" % multiclass_logloss(yvalid,predictions))","ab24c1e6":"# Fitting a simple Naive Bayes on Counts\nclf = MultinomialNB()\nclf.fit(xtrain_ctv, ytrain)\npredictions = clf.predict_proba(xvalid_ctv)\n\nprint (\"logloss: %0.3f \" % multiclass_logloss(yvalid, predictions))","628c0405":"# Apply SVD, I chose 120 components. 120-200 components are good enough for SVM model.\nsvd = decomposition.TruncatedSVD(n_components=120)\nsvd.fit(xtrain_tfv)\nxtrain_svd = svd.transform(xtrain_tfv)\nxvalid_svd = svd.transform(xvalid_tfv)\n\n# Scale the data obtained from SVD. Renaming variable to reuse without scaling.\nscl = preprocessing.StandardScaler()\nscl.fit(xtrain_svd)\nxtrain_svd_scl = scl.transform(xtrain_svd)\nxvalid_svd_scl = scl.transform(xvalid_svd)","0742c3bc":"#Now it's time to apply SVM. After running the following cell, \n# feel free to go for a walk or talk to your girlfriend\/boyfriend. :P\n\n# Fitting a simple SVM\nclf = SVC(C=1.0, probability=True) # since we need probabilities\nclf.fit(xtrain_svd_scl, ytrain)\npredictions = clf.predict_proba(xvalid_svd_scl)\n\nprint (\"logloss: %0.3f \" % multiclass_logloss(yvalid, predictions))","54d515b3":"# XGBOOST\n\n# Fitting a simple xgboost on tf-idf\nclf = xgb.XGBClassifier(max_depth=7, n_estimators=200, colsample_bytree=0.8, \n                        subsample=0.8, nthread=10, learning_rate=0.1)\nclf.fit(xtrain_tfv.tocsc(), ytrain)\npredictions = clf.predict_proba(xvalid_tfv.tocsc())\n\nprint (\"logloss: %0.3f \" % multiclass_logloss(yvalid, predictions))","d8c3c50a":"# Fitting a simple xgboost on tf-idf\nclf = xgb.XGBClassifier(max_depth=7, n_estimators=200, colsample_bytree=0.8, \n                        subsample=0.8, nthread=10, learning_rate=0.1)\nclf.fit(xtrain_ctv.tocsc(), ytrain)\npredictions = clf.predict_proba(xvalid_ctv.tocsc())\n\nprint (\"logloss: %0.3f \" % multiclass_logloss(yvalid, predictions))","f212a865":"# Fitting a simple xgboost on tf-idf svd features\nclf = xgb.XGBClassifier(max_depth=7, n_estimators=200, colsample_bytree=0.8, \n                        subsample=0.8, nthread=10, learning_rate=0.1)\nclf.fit(xtrain_svd, ytrain)\npredictions = clf.predict_proba(xvalid_svd)\n\nprint (\"logloss: %0.3f \" % multiclass_logloss(yvalid, predictions))\n","4db9a36b":"# Fitting a simple xgboost on tf-idf svd features\nclf = xgb.XGBClassifier(nthread=10)\nclf.fit(xtrain_svd, ytrain)\npredictions = clf.predict_proba(xvalid_svd)\n\nprint (\"logloss: %0.3f \" % multiclass_logloss(yvalid, predictions))","cbf618cc":"mll_scorer = metrics.make_scorer(multiclass_logloss, greater_is_better=False, needs_proba=True)","a89565dc":"# Initialize SVD\nsvd = TruncatedSVD()\n    \n# Initialize the standard scaler \nscl = preprocessing.StandardScaler()\n\n# We will use logistic regression here..\nlr_model = LogisticRegression()\n\n# Create the pipeline \nclf = pipeline.Pipeline([('svd', svd),\n                         ('scl', scl),\n                         ('lr', lr_model)])","5bd8f665":"param_grid = {'svd__n_components' : [120, 180],\n              'lr__C': [0.1, 1.0, 10], \n              'lr__penalty': ['l1', 'l2']}","03d5f1ac":"# Initialize Grid Search Model\nmodel = GridSearchCV(estimator=clf, param_grid=param_grid, scoring=mll_scorer,\n                                 verbose=10, n_jobs=-1, iid=True, refit=True, cv=2)\n\n# Fit Grid Search Model\nmodel.fit(xtrain_tfv, ytrain)  # we can use the full data here but im only using xtrain\nprint(\"Best score: %0.3f\" % model.best_score_)\nprint(\"Best parameters set:\")\nbest_parameters = model.best_estimator_.get_params()\nfor param_name in sorted(param_grid.keys()):\n    print(\"\\t%s: %r\" % (param_name, best_parameters[param_name]))","40da3d37":"nb_model = MultinomialNB()\n\n# Create the pipeline \nclf = pipeline.Pipeline([('nb', nb_model)])\n\n# parameter grid\nparam_grid = {'nb__alpha': [0.001, 0.01, 0.1, 1, 10, 100]}\n\n# Initialize Grid Search Model\nmodel = GridSearchCV(estimator=clf, param_grid=param_grid, scoring=mll_scorer,\n                                 verbose=10, n_jobs=-1, iid=True, refit=True, cv=2)\n\n# Fit Grid Search Model\nmodel.fit(xtrain_tfv, ytrain)  # we can use the full data here but im only using xtrain. \nprint(\"Best score: %0.3f\" % model.best_score_)\nprint(\"Best parameters set:\")\nbest_parameters = model.best_estimator_.get_params()\nfor param_name in sorted(param_grid.keys()):\n    print(\"\\t%s: %r\" % (param_name, best_parameters[param_name]))","27c7dd27":"# load the GloVe vectors in a dictionary:\n\nembeddings_index = {}\nf = open('..\/input\/glove840b300dtxt\/glove.840B.300d.txt')\nfor line in tqdm(f):\n    values = line.split()\n    word = values[0]\n    coefs = np.asarray(values[1:], dtype='float32')\n    embeddings_index[word] = coefs\nf.close()\n\nprint('Found %s word vectors.' % len(embeddings_index))","4eb1d5bf":"# this function creates a normalized vector for the whole sentence\ndef sent2vec(s):\n    words = str(s).lower().decode('utf-8')\n    words = word_tokenize(words)\n    words = [w for w in words if not w in stop_words]\n    words = [w for w in words if w.isalpha()]\n    M = []\n    for w in words:\n        try:\n            M.append(embeddings_index[w])\n        except:\n            continue\n    M = np.array(M)\n    v = M.sum(axis=0)\n    if type(v) != np.ndarray:\n        return np.zeros(300)\n    return v \/ np.sqrt((v ** 2).sum())","c3fe4d03":"xtrain_glove = np.array(xtrain_glove)\nxvalid_glove = np.array(xvalid_glove)","c5c49074":"# Fitting a simple xgboost on glove features\nclf = xgb.XGBClassifier(nthread=10, silent=False)\nclf.fit(xtrain_glove, ytrain)\npredictions = clf.predict_proba(xvalid_glove)\n\nprint (\"logloss: %0.3f \" % multiclass_logloss(yvalid, predictions))","38498505":"# Fitting a simple xgboost on glove features\nclf = xgb.XGBClassifier(max_depth=7, n_estimators=200, colsample_bytree=0.8, \n                        subsample=0.8, nthread=10, learning_rate=0.1, silent=False)\nclf.fit(xtrain_glove, ytrain)\npredictions = clf.predict_proba(xvalid_glove)\n\nprint (\"logloss: %0.3f \" % multiclass_logloss(yvalid, predictions))","f8be7814":"#Deep Learning\n#But this is an era of deep learning! We cant live without training a few neural networks.\n#Here, we will train LSTM and a simple dense network on the GloVe features. Let's start with the dense network first:\n\n# scale the data before any neural net:\nscl = preprocessing.StandardScaler()\nxtrain_glove_scl = scl.fit_transform(xtrain_glove)\nxvalid_glove_scl = scl.transform(xvalid_glove)","76c1b33a":"# we need to binarize the labels for the neural net\nytrain_enc = np_utils.to_categorical(ytrain)\nyvalid_enc = np_utils.to_categorical(yvalid)","9414f5f8":"# create a simple 3 layer sequential neural net\nmodel = Sequential()\n\nmodel.add(Dense(300, input_dim=300, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\n\nmodel.add(Dense(300, activation='relu'))\nmodel.add(Dropout(0.3))\nmodel.add(BatchNormalization())\n\nmodel.add(Dense(3))\nmodel.add(Activation('softmax'))\n\n# compile the model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam')","1398cc81":"model.fit(xtrain_glove_scl, y=ytrain_enc, batch_size=64, \n          epochs=5, verbose=1, \n          validation_data=(xvalid_glove_scl, yvalid_enc))","64d9394d":"# using keras tokenizer here\ntoken = text.Tokenizer(num_words=None)\nmax_len = 70\n\ntoken.fit_on_texts(list(xtrain) + list(xvalid))\nxtrain_seq = token.texts_to_sequences(xtrain)\nxvalid_seq = token.texts_to_sequences(xvalid)\n\n# zero pad the sequences\nxtrain_pad = sequence.pad_sequences(xtrain_seq, maxlen=max_len)\nxvalid_pad = sequence.pad_sequences(xvalid_seq, maxlen=max_len)\n\nword_index = token.word_index","b8226083":"# create an embedding matrix for the words we have in the dataset\nembedding_matrix = np.zeros((len(word_index) + 1, 300))\nfor word, i in tqdm(word_index.items()):\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None:\n        embedding_matrix[i] = embedding_vector","4327d164":"# A simple LSTM with glove embeddings and two dense layers\nmodel = Sequential()\nmodel.add(Embedding(len(word_index) + 1,\n                     300,\n                     weights=[embedding_matrix],\n                     input_length=max_len,\n                     trainable=False))\nmodel.add(SpatialDropout1D(0.3))\nmodel.add(LSTM(100, dropout=0.3, recurrent_dropout=0.3))\n\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(Dropout(0.8))\n\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(Dropout(0.8))\n\nmodel.add(Dense(3))\nmodel.add(Activation('softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam')","f1b48b7e":"model.fit(xtrain_pad, y=ytrain_enc, batch_size=512, epochs=100, verbose=1, validation_data=(xvalid_pad, yvalid_enc))","58c1f5bf":"# A simple LSTM with glove embeddings and two dense layers\nmodel = Sequential()\nmodel.add(Embedding(len(word_index) + 1,\n                     300,\n                     weights=[embedding_matrix],\n                     input_length=max_len,\n                     trainable=False))\nmodel.add(SpatialDropout1D(0.3))\nmodel.add(LSTM(300, dropout=0.3, recurrent_dropout=0.3))\n\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(Dropout(0.8))\n\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(Dropout(0.8))\n\nmodel.add(Dense(3))\nmodel.add(Activation('softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam')\n\n# Fit the model with early stopping callback\nearlystop = EarlyStopping(monitor='val_loss', min_delta=0, patience=3, verbose=0, mode='auto')\nmodel.fit(xtrain_pad, y=ytrain_enc, batch_size=512, epochs=100, \n          verbose=1, validation_data=(xvalid_pad, yvalid_enc), callbacks=[earlystop])","e8d2dca4":"\n\n# A simple bidirectional LSTM with glove embeddings and two dense layers\nmodel = Sequential()\nmodel.add(Embedding(len(word_index) + 1,\n                     300,\n                     weights=[embedding_matrix],\n                     input_length=max_len,\n                     trainable=False))\nmodel.add(SpatialDropout1D(0.3))\nmodel.add(Bidirectional(LSTM(300, dropout=0.3, recurrent_dropout=0.3)))\n\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(Dropout(0.8))\n\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(Dropout(0.8))\n\nmodel.add(Dense(3))\nmodel.add(Activation('softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam')\n\n# Fit the model with early stopping callback\nearlystop = EarlyStopping(monitor='val_loss', min_delta=0, patience=3, verbose=0, mode='auto')\nmodel.fit(xtrain_pad, y=ytrain_enc, batch_size=512, epochs=100, \n          verbose=1, validation_data=(xvalid_pad, yvalid_enc), callbacks=[earlystop])","bfdb6308":"# GRU with glove embeddings and two dense layers\nmodel = Sequential()\nmodel.add(Embedding(len(word_index) + 1,\n                     300,\n                     weights=[embedding_matrix],\n                     input_length=max_len,\n                     trainable=False))\nmodel.add(SpatialDropout1D(0.3))\nmodel.add(GRU(300, dropout=0.3, recurrent_dropout=0.3, return_sequences=True))\nmodel.add(GRU(300, dropout=0.3, recurrent_dropout=0.3))\n\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(Dropout(0.8))\n\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(Dropout(0.8))\n\nmodel.add(Dense(3))\nmodel.add(Activation('softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam')\n\n# Fit the model with early stopping callback\nearlystop = EarlyStopping(monitor='val_loss', min_delta=0, patience=3, verbose=0, mode='auto')\nmodel.fit(xtrain_pad, y=ytrain_enc, batch_size=512, epochs=100, \n          verbose=1, validation_data=(xvalid_pad, yvalid_enc), callbacks=[earlystop])","0648f2fc":"# this is the main ensembling class. how to use it is in the next cell!\nimport numpy as np\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold, KFold\nimport pandas as pd\nimport os\nimport sys\nimport logging\n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format=\"[%(asctime)s] %(levelname)s %(message)s\",\n    datefmt=\"%H:%M:%S\", stream=sys.stdout)\nlogger = logging.getLogger(__name__)\n\n\nclass Ensembler(object):\n    def __init__(self, model_dict, num_folds=3, task_type='classification', optimize=roc_auc_score,\n                 lower_is_better=False, save_path=None):\n        \"\"\"\n        Ensembler init function\n        :param model_dict: model dictionary, see README for its format\n        :param num_folds: the number of folds for ensembling\n        :param task_type: classification or regression\n        :param optimize: the function to optimize for, e.g. AUC, logloss, etc. Must have two arguments y_test and y_pred\n        :param lower_is_better: is lower value of optimization function better or higher\n        :param save_path: path to which model pickles will be dumped to along with generated predictions, or None\n        \"\"\"\n\n        self.model_dict = model_dict\n        self.levels = len(self.model_dict)\n        self.num_folds = num_folds\n        self.task_type = task_type\n        self.optimize = optimize\n        self.lower_is_better = lower_is_better\n        self.save_path = save_path\n\n        self.training_data = None\n        self.test_data = None\n        self.y = None\n        self.lbl_enc = None\n        self.y_enc = None\n        self.train_prediction_dict = None\n        self.test_prediction_dict = None\n        self.num_classes = None\n\n    def fit(self, training_data, y, lentrain):\n        \"\"\"\n        :param training_data: training data in tabular format\n        :param y: binary, multi-class or regression\n        :return: chain of models to be used in prediction\n        \"\"\"\n\n        self.training_data = training_data\n        self.y = y\n\n        if self.task_type == 'classification':\n            self.num_classes = len(np.unique(self.y))\n            logger.info(\"Found %d classes\", self.num_classes)\n            self.lbl_enc = LabelEncoder()\n            self.y_enc = self.lbl_enc.fit_transform(self.y)\n            kf = StratifiedKFold(n_splits=self.num_folds)\n            train_prediction_shape = (lentrain, self.num_classes)\n        else:\n            self.num_classes = -1\n            self.y_enc = self.y\n            kf = KFold(n_splits=self.num_folds)\n            train_prediction_shape = (lentrain, 1)\n\n        self.train_prediction_dict = {}\n        for level in range(self.levels):\n            self.train_prediction_dict[level] = np.zeros((train_prediction_shape[0],\n                                                          train_prediction_shape[1] * len(self.model_dict[level])))\n\n        for level in range(self.levels):\n\n            if level == 0:\n                temp_train = self.training_data\n            else:\n                temp_train = self.train_prediction_dict[level - 1]\n\n            for model_num, model in enumerate(self.model_dict[level]):\n                validation_scores = []\n                foldnum = 1\n                for train_index, valid_index in kf.split(self.train_prediction_dict[0], self.y_enc):\n                    logger.info(\"Training Level %d Fold # %d. Model # %d\", level, foldnum, model_num)\n\n                    if level != 0:\n                        l_training_data = temp_train[train_index]\n                        l_validation_data = temp_train[valid_index]\n                        model.fit(l_training_data, self.y_enc[train_index])\n                    else:\n                        l0_training_data = temp_train[0][model_num]\n                        if type(l0_training_data) == list:\n                            l_training_data = [x[train_index] for x in l0_training_data]\n                            l_validation_data = [x[valid_index] for x in l0_training_data]\n                        else:\n                            l_training_data = l0_training_data[train_index]\n                            l_validation_data = l0_training_data[valid_index]\n                        model.fit(l_training_data, self.y_enc[train_index])\n\n                    logger.info(\"Predicting Level %d. Fold # %d. Model # %d\", level, foldnum, model_num)\n\n                    if self.task_type == 'classification':\n                        temp_train_predictions = model.predict_proba(l_validation_data)\n                        self.train_prediction_dict[level][valid_index,\n                        (model_num * self.num_classes):(model_num * self.num_classes) +\n                                                       self.num_classes] = temp_train_predictions\n\n                    else:\n                        temp_train_predictions = model.predict(l_validation_data)\n                        self.train_prediction_dict[level][valid_index, model_num] = temp_train_predictions\n                    validation_score = self.optimize(self.y_enc[valid_index], temp_train_predictions)\n                    validation_scores.append(validation_score)\n                    logger.info(\"Level %d. Fold # %d. Model # %d. Validation Score = %f\", level, foldnum, model_num,\n                                validation_score)\n                    foldnum += 1\n                avg_score = np.mean(validation_scores)\n                std_score = np.std(validation_scores)\n                logger.info(\"Level %d. Model # %d. Mean Score = %f. Std Dev = %f\", level, model_num,\n                            avg_score, std_score)\n\n            logger.info(\"Saving predictions for level # %d\", level)\n            train_predictions_df = pd.DataFrame(self.train_prediction_dict[level])\n            train_predictions_df.to_csv(os.path.join(self.save_path, \"train_predictions_level_\" + str(level) + \".csv\"),\n                                        index=False, header=None)\n\n        return self.train_prediction_dict\n\n    def predict(self, test_data, lentest):\n        self.test_data = test_data\n        if self.task_type == 'classification':\n            test_prediction_shape = (lentest, self.num_classes)\n        else:\n            test_prediction_shape = (lentest, 1)\n\n        self.test_prediction_dict = {}\n        for level in range(self.levels):\n            self.test_prediction_dict[level] = np.zeros((test_prediction_shape[0],\n                                                         test_prediction_shape[1] * len(self.model_dict[level])))\n        self.test_data = test_data\n        for level in range(self.levels):\n            if level == 0:\n                temp_train = self.training_data\n                temp_test = self.test_data\n            else:\n                temp_train = self.train_prediction_dict[level - 1]\n                temp_test = self.test_prediction_dict[level - 1]\n\n            for model_num, model in enumerate(self.model_dict[level]):\n\n                logger.info(\"Training Fulldata Level %d. Model # %d\", level, model_num)\n                if level == 0:\n                    model.fit(temp_train[0][model_num], self.y_enc)\n                else:\n                    model.fit(temp_train, self.y_enc)\n\n                logger.info(\"Predicting Test Level %d. Model # %d\", level, model_num)\n\n                if self.task_type == 'classification':\n                    if level == 0:\n                        temp_test_predictions = model.predict_proba(temp_test[0][model_num])\n                    else:\n                        temp_test_predictions = model.predict_proba(temp_test)\n                    self.test_prediction_dict[level][:, (model_num * self.num_classes): (model_num * self.num_classes) +\n                                                                                        self.num_classes] = temp_test_predictions\n\n                else:\n                    if level == 0:\n                        temp_test_predictions = model.predict(temp_test[0][model_num])\n                    else:\n                        temp_test_predictions = model.predict(temp_test)\n                    self.test_prediction_dict[level][:, model_num] = temp_test_predictions\n\n            test_predictions_df = pd.DataFrame(self.test_prediction_dict[level])\n            test_predictions_df.to_csv(os.path.join(self.save_path, \"test_predictions_level_\" + str(level) + \".csv\"),\n                                       index=False, header=None)\n\n        return self.test_prediction_dict\n","ffdf41ca":"# specify the data to be used for every level of ensembling:\ntrain_data_dict = {0: [xtrain_tfv, xtrain_ctv, xtrain_tfv, xtrain_ctv], 1: [xtrain_glove]}\ntest_data_dict = {0: [xvalid_tfv, xvalid_ctv, xvalid_tfv, xvalid_ctv], 1: [xvalid_glove]}\n\nmodel_dict = {0: [LogisticRegression(), LogisticRegression(), MultinomialNB(alpha=0.1), MultinomialNB()],\n\n              1: [xgb.XGBClassifier(silent=True, n_estimators=120, max_depth=7)]}\n\nens = Ensembler(model_dict=model_dict, num_folds=3, task_type='classification',\n                optimize=multiclass_logloss, lower_is_better=True, save_path='')\n\nens.fit(train_data_dict, ytrain, lentrain=xtrain_glove.shape[0])\npreds = ens.predict(test_data_dict, lentest=xvalid_glove.shape[0])","c5920a51":"# check error:\nmulticlass_logloss(yvalid, preds[1])","d1c3d4e5":"## Stemming and Lemmatization","1b1e7555":"### Building Basic Models\n> Let's start building our very first model.\n\n> Our very first model is a simple TF-IDF (Term Frequency - Inverse Document Frequency) followed by a simple Logistic Regression.","bdcc8513":"#### Grid Search\u00b6\n> Its a technique for hyperparameter optimization. Not so effective but can give good results if you know the grid you want to use. I specify the parameters that should usually be used in this post: http:\/\/blog.kaggle.com\/2016\/07\/21\/approaching-almost-any-machine-learning-problem-abhishek-thakur\/ Please keep in mind that these are the parameters I usually use. There are many other methods of hyperparameter optimization which may or may not be as effective.","ce61448c":"### Topics generated by LDA\n> We will utilise our helper function we defined earlier \"print_top_words\" to return the top 10 words attributed to each of the LDA generated topics. To select the number of topics, this is handled through the parameter n_components in the function.","31088c15":"> Vectorizing the text using Bag of Words approach","3e09f52d":"## Ensembling","d1770f87":"> Fitting vectorize to the dataset","51571d5b":"### TOPIC MODELLING\n- Latent Dirichlet Allocation - Probabilistic, generative model which uncovers the topics latent to a dataset by assigning weights to words in a corpus, where each topic will assign different probability weights to each word.\n- Non-negative Matrix Factorization - Approximation method that takes an input matrix and approximates the factorization of this matrix into two other matrices, with the caveat that the values in the matrix be non-negative.","93953384":"> Before going further it is important that we split the data into training and validation sets. We can do it using train_test_split from the model_selection module of scikit-learn.","ca5ed8ae":"> Store the text of each author in a Python list\n\nWe first create three different python lists that store the texts of Edgar Allen Poe, HP Lovecraft and Mary Shelley respectively as foll","a39ce800":"Word Vectors\nWithout going into too much details, I would explain how to create sentence vectors and how can we use them to create a machine learning model on top of it. I am a fan of GloVe vectors, word2vec and fasttext. In this post, I'll be using the GloVe vectors. You can download the GloVe vectors from here http:\/\/www-nlp.stanford.edu\/data\/glove.840B.300d.zip","4a13f1b4":"## Word Cloud visualizations of the topics\n","455fbd2e":"### Putting all the preprocessing steps together"}}