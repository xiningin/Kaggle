{"cell_type":{"1884c0cf":"code","ca007718":"code","5e398695":"code","83365673":"code","3b208d32":"code","bdcb3244":"code","b3ccb016":"code","6e4b2eeb":"code","bb80b9cc":"code","9f4b23a9":"code","22a36f6f":"code","bde513a4":"code","8a4557c5":"code","121e5ac8":"code","4feaec7f":"code","5970f2de":"code","909ede13":"code","dd8ed5ad":"code","2c43c087":"code","f6e75dfa":"code","6572b457":"code","a41ebf81":"code","bb36581b":"code","2b1b98d1":"code","9c9d5b1e":"code","8f8152d9":"code","7f2f8f83":"code","be42b59c":"code","864a9a83":"code","4cf033df":"code","9fc1a130":"code","0d5ee05a":"code","4b542d75":"code","7b1cfd2a":"code","f370ee61":"code","c8f2c52f":"code","59836316":"code","b48a8b06":"code","d1ee2fb5":"code","a5528133":"code","a8409c60":"code","cd54fb43":"code","f733f5f3":"code","494183d2":"code","1f67eed9":"code","6a5df3c8":"code","eab9451e":"code","ef5aa600":"code","85311248":"markdown","9a9f2d0f":"markdown","f5898025":"markdown","734c4125":"markdown","9d2fdfe9":"markdown","eabf45b9":"markdown","3c03f520":"markdown","48d3b31f":"markdown","e8f26629":"markdown","28ef9425":"markdown","9048ca18":"markdown","1930aa83":"markdown","460c9003":"markdown","9482cf23":"markdown","2eace17a":"markdown","f95ac999":"markdown","db73195a":"markdown","d0da70f3":"markdown","7b73f75b":"markdown","62c61a60":"markdown","fe3935ce":"markdown","94ac7114":"markdown","91409dab":"markdown","3927c11b":"markdown","7d384635":"markdown","ab8a33a7":"markdown","21dff1d1":"markdown","d983780b":"markdown","51346fee":"markdown","8ea65c70":"markdown","312bb93f":"markdown","f8090c61":"markdown","32e15df6":"markdown","db5ef050":"markdown"},"source":{"1884c0cf":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ca007718":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics","5e398695":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')#train set\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')#test set","83365673":"print(train_df.shape)\nprint(test_df.shape)","3b208d32":"train_df.head()","bdcb3244":"test_df.head()","b3ccb016":"train_df.describe()","6e4b2eeb":"train_df.describe(include='object')","bb80b9cc":"#looking for the types \ntrain_df.dtypes","9f4b23a9":"#distribution of target variable\nsns.distplot(train_df['Survived'])","22a36f6f":"#visualize the number of surivival\nsur_count = sns.catplot(kind='count',\n                       x ='Survived',\n                       data =train_df,\n                       palette ='ch:.25',\n                       edgecolor ='0.5')","bde513a4":"#relationship between Survived and Gender\nsns.catplot(y='Survived',x='Sex',data=train_df,kind='bar')","8a4557c5":"#visualize the relationship between survival, pclass and gender \nsns.catplot(x=\"Sex\",y=\"Survived\",hue=\"Pclass\",data=train_df,kind=\"point\")","121e5ac8":"#visualize the relationship between survival,gender and embarked\nsns.catplot(x='Sex',y='Survived',hue='Embarked',data=train_df,kind='bar')","4feaec7f":"#visualize the distributions of Age\nsns.distplot(train_df['Age'])","5970f2de":"train_df.isnull().sum()","909ede13":"test_df.isnull().sum()","dd8ed5ad":"def age_cabin(data):\n    data['Age'].fillna(data['Age'].median(),inplace=True)#using median for fill the missing values\n    data['Cabin'].fillna('NA',inplace=True)#fill the missing values as NA\nage_cabin(train_df)\nage_cabin(test_df)","2c43c087":"plt.figure(figsize=(6,4))\nplt.subplot(1,1,1)\nax = sns.countplot(x='Embarked',data=train_df,)\nax.set(title='Embarked in Train data')","f6e75dfa":"def embarked(data):\n    data['Embarked'].fillna('S',inplace=True)# fill the mode value in the missing places\n    \nembarked(train_df)","6572b457":"test_df['Fare'].fillna(test_df['Fare'].median(),inplace=True)#using median for fill the missing values","a41ebf81":"def add_relative(data):\n    data['relative'] = data['SibSp']+data['Parch']\nadd_relative(train_df)\nadd_relative(test_df)","bb36581b":"sns.catplot(x='relative',y='Survived',data=train_df,kind='bar')","2b1b98d1":"def sex_num(data):\n    lb_sex = LabelEncoder()\n    data['sex_code'] = lb_sex.fit_transform(data['Sex'])#female-0,male-1\n\nsex_num(train_df)    \nsex_num(test_df)","9c9d5b1e":"#let us grouping the age using binning method\ndef age_num(data):\n    bin_names = ['1','2','3','4','5','6']\n    bins = np.linspace(min(data['Age']),max(data['Age']),7)\n    data['age_code'] = pd.cut(data['Age'],bins,labels=bin_names,include_lowest=True)\n\nage_num(train_df)\nage_num(test_df)","8f8152d9":"#let us grouping the fare using binning method\ndef fare_num(data):\n    group_names = ['1','2','3','4','5','6','7','8','9','10']\n    bins = np.linspace(min(data['Fare']),max(data['Fare']),11)\n    data['fare_code'] = pd.cut(data['Fare'],bins,labels=group_names,include_lowest=True)\n\nfare_num(train_df)\nfare_num(test_df)","7f2f8f83":"def embarked_num(data):\n    lb_embark = LabelEncoder()\n    data['embarked_code'] = lb_embark.fit_transform(data['Embarked'])\n    \nembarked_num(train_df)\nembarked_num(test_df)","be42b59c":"train_df['Cabin'].unique()","864a9a83":"def cabin_replace(data):\n    data['cabin_code'] = data['Cabin'].str.extract('([A-Z]+)')\n    data['cabin_code'].replace('NA','H',inplace=True)\n    data['cabin_code'].replace('T','H',inplace=True)\n    \ncabin_replace(train_df)\ncabin_replace(test_df)","4cf033df":"def cabin_num(data):\n    cabin_lb = LabelEncoder()\n    data['cabin_code'] = cabin_lb.fit_transform(data['cabin_code'])\n\ncabin_num(train_df)\ncabin_num(test_df)","9fc1a130":"def title(data):\n    data['name_title'] = data['Name'].str.extract('([A-Za-z]+)\\.')\n    \ntitle(train_df)\ntitle(test_df)","0d5ee05a":"train_df['name_title'].unique()","4b542d75":"def name_replace(data):\n    data['name_title'].replace('Master','Mr',inplace =True)\n    data['name_title'].replace('Ms','Miss',inplace=True)\n    data['name_title'].replace(['Don','Rev','Dr','Mme','Major','Lady', 'Sir', 'Mlle', 'Col', 'Capt', 'Countess', 'Jonkheer'],'Other',inplace=True)\n\nname_replace(train_df)\nname_replace(test_df)","7b1cfd2a":"train_df['name_title'].unique()","f370ee61":"def name_num(data):\n    name_lb = LabelEncoder()\n    data['name_title'] = name_lb.fit_transform(data['name_title'])\n\nname_num(train_df)\nname_num(test_df)","c8f2c52f":"def remove_var(data):\n    removing_var = data[['Name','Sex','Age','Ticket','Fare','Cabin','Embarked']]\n    data.drop(removing_var,axis=1,inplace=True)\n\nremove_var(train_df)\nremove_var(test_df)","59836316":"train_df.columns","b48a8b06":"X = train_df.drop(['Survived'], axis=1)\ny = train_df['Survived']","d1ee2fb5":"X = preprocessing.StandardScaler().fit_transform(X)\nX[0:2]","a5528133":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=4)\nprint('Train set:',X_train.shape, y_train.shape)\nprint('Test set:',X_test.shape, y_test.shape)","a8409c60":"knn_model = KNeighborsClassifier(n_neighbors = 7)\nknn_model.fit(X_train,y_train)\nknn_pred = knn_model.predict(X_test)\n\nknn_accuracy = metrics.accuracy_score(y_test,knn_pred)\nprint('Test set accuracy:',knn_accuracy)","cd54fb43":"from sklearn.metrics import plot_confusion_matrix\nplot_confusion_matrix(knn_model,X_test,y_test,cmap='PuBu_r')","f733f5f3":"tree_model = DecisionTreeClassifier(criterion = 'entropy',max_depth=4)\ntree_model.fit(X_train,y_train)\ny_pred = tree_model.predict(X_test)\n\ntree_accuracy = metrics.accuracy_score(y_test,y_pred)\nprint(\"Decision tree's accuracy:\",tree_accuracy)","494183d2":"plot_confusion_matrix(tree_model,X_test,y_test,cmap='ocean_r')","1f67eed9":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)\ny_pred = logmodel.predict(X_test)\n\nlog_accuracy = metrics.accuracy_score(y_test,y_pred) \nprint('Accuracy:',log_accuracy)","6a5df3c8":"plot_confusion_matrix(logmodel,X_test,y_test,cmap='OrRd')","eab9451e":"best_model = knn_model\nbest_model.fit(X,y)\nprediction = best_model.predict(test_df)","ef5aa600":"Submission = pd.DataFrame({'PassengerId': test_df['PassengerId'],'Survived': prediction})\nSubmission.to_csv(\"SurvivalSubmission.csv\", index= False)","85311248":"## Feature engineering","9a9f2d0f":"## Decision Tree Classifier ","f5898025":"Variable category\n\nCategorical variable:\n>  Survived,\n>  Pclass,\n>  Sex,\n>  SibSp,\n>  Parch,\n>  Cabin,\n>  Embarked\n\nContinuous variable:\n>  PassengerId,\n>  Name,\n>  Age,\n>  Ticket,\n>  Fare","734c4125":"### Objective:\n\nThe dataset contains the details of passengers in the Titanic. The goal of this competition is to predict the survival of the passengers based on their datails i.e. age,gender,fare,cabin,relations,etc.\n\n\n\n","9d2fdfe9":"* Miss - 0\n* Mr - 1\n* Mrs - 2\n* Other - 3","eabf45b9":"In this notebook, let us explore the \"Titanic:Machine Learning from Disaster\" dataset.","3c03f520":"Now, remove the unneccessary columns.","48d3b31f":"## Modelling","e8f26629":"Add a new feature using SibSp And Parch to check family and relatives.","28ef9425":"Sepearate the predictor and target variables for modelling","9048ca18":"### Standardization ","1930aa83":"\"Female\" survival rate is higher than the \"male\".","460c9003":"## Missing Values","9482cf23":"### Embarked","2eace17a":"Let us check the statistical analysis","f95ac999":"### Splitting the data ","db73195a":"Extract the name titles from the Name feature ","d0da70f3":"Let us create the submission file.","7b73f75b":"### Age and Cabin","62c61a60":"Out of three models, \"Nearest Neighbors Classifier\" model gives the better result. Let us fix this model as a final submission.","fe3935ce":"According to the data, first and second class is better survival rate than third class.","94ac7114":"Before we start exploratory analysis, let us know more about the files in the dataset. To better understanding,first read the given files using pandas and look at the sample and size.","91409dab":"Approxmately, \"survival rate\" is 35% less than the \"death rate\".","3927c11b":"## Visualization ","7d384635":"Predictor variable:      \n* PassengerId - Identification number            \n* Pclass - Ticket class i.e. 1st,2nd,3rd\n* Name - Name of the passenger\n* Sex - Gender of the passenger\n* Age - Age of the passenger \n* SibSp - Number of siblings\/spouses aboard with them\n* Parch - Number of parents\/children aboard with them\n* Ticket - Ticket number\n* Fare - Fare of the passenger\n* Cabin - Passenger's cabin number\n* Embarked - Port of boarding \n\nTarget variable:\n* Survived - Survival of the passenger","ab8a33a7":"Let us import the neccessary modules.","21dff1d1":"After visualization, understanding of the data is better.Now let us check whether the missing values are there or not.","d983780b":"### Types of variables","51346fee":"Let us list out the files in this dataset.","8ea65c70":"As mentioned earlier, train set contains the passenger's datails like Name,Age,Gender,Cabin,etc. It also contains the target variable Survived. Test set doesn't have the Survived feature.\n\nTrain set contains the 12 features and 891 samples.\n","312bb93f":"## Final Model ","f8090c61":"## Nearest Neighbors Classification ","32e15df6":"There is missing values in train and test set.\n* Train set\n> Age,\n> Cabin,\n> Embarked\n* Test set\n> Age,\n> Fare,\n> Cabin","db5ef050":"### Fare "}}