{"cell_type":{"2e2737bb":"code","e445c7c8":"code","a020ca09":"code","cb0ac45d":"code","4c65bfbc":"code","b428932f":"code","a5572945":"code","65d9a28b":"code","d335751e":"code","395236e7":"code","ac40e9d7":"code","d4fd030c":"code","bc23aeb4":"code","41f9482d":"code","381ea687":"code","1e2ce2f0":"code","52ac8825":"code","aa155ebc":"code","cff786ea":"code","a6d86b41":"code","e9c08535":"code","23a32b0e":"code","350f2490":"code","d463fc91":"markdown","71e30755":"markdown","f0e808f0":"markdown","bf978620":"markdown","ef3b29fa":"markdown","3175dc5c":"markdown","f1783c8b":"markdown","5642ebaa":"markdown","3f45b35e":"markdown","73838bbf":"markdown","a2f6b517":"markdown"},"source":{"2e2737bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e445c7c8":"train = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv',delimiter=',',parse_dates=['date']) #parse_dates - \u0447\u0442\u043e\u0431\u044b \u0441\u0440\u0430\u0437\u0443 \u043f\u0440\u043e\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043b Object \u0432 datetime\n# train = train.drop('Unnamed: 0',axis = 1)\ntrain.sort_values(by=['date'], inplace=True, ascending=True)\ntrain","a020ca09":"train.loc[train.item_cnt_day < 0].item_cnt_day.unique()","cb0ac45d":"train[\"item_cnt_day\"] = train.item_cnt_day.replace({-1 : 0, -2 : 0, -3 : 0, -6 : 0, -5:0,-4:0,-22:0,-16:0,-9:0})","4c65bfbc":"train.loc[train.item_cnt_day < 0]","b428932f":"#\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043e\u0442\u0441\u0447\u0435\u0442\u0430 \u043c\u0435\u0441\u044f\u0446\u0435\u0432, \u0442\u043a date_block_num \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438\ntrain['date_block_num'] = (train['date'].dt.to_period('M').view(int) - pd.to_datetime(['2013-01-01']).to_period('M').view(int))","a5572945":"dataset = pd.pivot_table(train,index = ['shop_id','item_id'],values = ['item_cnt_day'],columns = ['date_block_num'],fill_value = 0,aggfunc='sum')\ndataset.reset_index(inplace = True)\ndataset","65d9a28b":"test = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv',delimiter=',')\ntest","d335751e":"ID = test.ID\ntest = test.drop(['ID'], axis=1)\ntest","395236e7":"dataset = pd.merge(test,dataset,on = ['item_id','shop_id'],how = 'left')\ndataset","ac40e9d7":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\ndataset.isnull().sum().sum()","d4fd030c":"# fillna 0\n# dataset.fillna(0,inplace = True)\n# dataset.isnull().sum().sum()","bc23aeb4":"#fill na mean\ndataset = dataset.fillna(dataset.mean())\ndataset","41f9482d":"#drop shop_id and item_id\ndataset.drop(['shop_id','item_id'],inplace = True, axis = 1)\ndataset.columns = ['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33']\ndataset","381ea687":"#Cteate train and test\ny_train = dataset.iloc[:,-1:]\nX_train = dataset.iloc[:, :-1]\nX_test = dataset.iloc[:,1:]\n\n","1e2ce2f0":"from sklearn.ensemble import RandomForestRegressor\nfrom catboost import CatBoostRegressor\nfrom catboost import Pool\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV\nfrom keras import optimizers\nfrom keras.models import Sequential, Model\nfrom keras.layers.convolutional import Conv1D, MaxPooling1D\nfrom keras.layers import Dense, LSTM, RepeatVector, TimeDistributed, Flatten, Dropout,BatchNormalization\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split","52ac8825":"%%time\npipe_RF =  Pipeline([(\"RF\", RandomForestRegressor(random_state = 42))])\nparams = {'RF__n_estimators': [1250],\n          'RF__min_samples_split': [6],\n          'RF__max_depth': [4],\n          'RF__max_features': ['auto']},\nRF = GridSearchCV(pipe_RF,params,scoring='neg_mean_squared_error',return_train_score=True,n_jobs=-1,cv = 5)\nRF.fit(X_train,y_train)\nprint(f'Best_score = {RF.best_score_}')\nprint(f'Best_params = {RF.best_params_}')","aa155ebc":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_train","cff786ea":"model_FC = Sequential()\nmodel_FC.add(Dense(512, input_dim=X_train.shape[1], activation='relu'))\nmodel_FC.add(BatchNormalization())\nmodel_FC.add(Dropout(0.2))\nmodel_FC.add(Dense(256, activation='relu'))\nmodel_FC.add(BatchNormalization())\nmodel_FC.add(Dropout(0.2))\nmodel_FC.add(Dense(128, activation='relu'))\nmodel_FC.add(BatchNormalization())\nmodel_FC.add(Dropout(0.2))\nmodel_FC.add(Dense(64, activation='relu'))\nmodel_FC.add(BatchNormalization())\nmodel_FC.add(Dropout(0.2))\nmodel_FC.add(Dense(1, activation='linear'))\nmodel_FC.compile(loss='mean_squared_error', optimizer='adam')\nmodel_FC.summary()","a6d86b41":"model_FC.fit(X_train, y_train,\n batch_size=4096, epochs=30,\n verbose=2)","e9c08535":"scaler = StandardScaler()\nX_test = scaler.fit_transform(X_test)\nX_test","23a32b0e":"test = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv',delimiter=',')\ntest","350f2490":"# creating submission file \nsubmission_pfs = model_FC.predict(X_test)\nsubmission_pfs = submission_pfs.clip(0,20)\nsubmission = pd.DataFrame({'ID':test['ID'],'item_cnt_month':submission_pfs.ravel()})\n# Save csv file \nsubmission.to_csv('FC_or_another_model',index = False)","d463fc91":"## This model issued score = 1.079 \u0438 7300+ place\n","71e30755":"Let's look in more detail and see that there is data that is impossible. So let's change them to zero.\n","f0e808f0":"Also the column 'date_block_num' is filled incorrectly. There are months and 34 and 35. Therefore, we will create and replace with the correct values.","bf978620":"Since we have data in the train that does not participate in the test, but in the test, on the contrary, there is data that is not in train, we will create a common table that is required for submit","ef3b29fa":"Ctrate pivot table, with fill_value = 0","3175dc5c":"## If you don't mind, please support this work - upvoted this topic\n","f1783c8b":"There are some of the easiest options for replacing gaps, these are zero and average. The average performed slightly better.","5642ebaa":"## This is my first public work. No new ideas are added here, only some explanations and actions to eliminate misunderstandings for beginners when working with this task.","3f45b35e":"Load the data.","73838bbf":"You can use RF with this params. But it takes an infinite amount of change)","a2f6b517":"## FC Model"}}