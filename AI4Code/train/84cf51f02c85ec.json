{"cell_type":{"06c3fb74":"code","912fba9c":"code","5baad576":"code","c453f07e":"code","7f5b6416":"code","fc26f720":"code","565a867c":"code","d7929552":"code","cc730927":"code","0f01f259":"code","d13cefd2":"code","ef0d4e31":"code","05b4ea94":"code","0d0fca4a":"code","b7b5098d":"code","02f9d0bb":"code","6eb20ff4":"markdown","35f5c9f4":"markdown","2aaec769":"markdown","bc518309":"markdown","4b46f7e7":"markdown","d2e8fa84":"markdown","0423e3d1":"markdown","c8ee2b56":"markdown","5b799536":"markdown"},"source":{"06c3fb74":"import numpy as np # Linear Algebra\nimport pandas as pd # Data Processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # Basic Visualization\nimport seaborn as sns # Visualition\nimport re # Regular Expression\n\nimport os\nprint(os.listdir(\"..\/input\"))","912fba9c":"#Reading Comma Separated Values (.csv) file.\ndata = pd.read_csv(\"..\/input\/2015.csv\")\n\n#Taking basic informations.\ndata.info()\ndata.describe()","5baad576":"#Taking first 5 samples from data.\ndata.head()","c453f07e":"#Backing up the columns name to compare it with the modified columns name.\npre_names = [each for each in data.columns]\n\n#Searching for gaps, other invalid characters and clearing them with Regular Expression library.\ndata.columns = [ re.sub(\"[ \\(\\)]\", \"\", each).lower() for each in data.columns]\n\n#Now let's look comparison with before and after.\n\nlis = list(data.columns)\nprint(\"Before Names of Columns\".center(94,\"-\"),end=\"\\n\\n\")\nfor each in pre_names:\n    print(each.ljust(29), end=\" | \")\nprint(\"\\n\")\nprint(\"After Names of Columns\".center(94,\"-\"),end=\"\\n\\n\")\nfor each in lis:\n    print(each.ljust(29), end=\" | \")","7f5b6416":"#Line Plot - 1\ndata.healthlifeexpectancy.plot(kind = \"Line\", label = \"healthlifeexpectancy\", color = \"r\",\n                              linewidth = 1, linestyle = \"--\", grid = True, alpha = 0.7,\n                              figsize = (20,10))\ndata.economygdppercapita.plot(label = \"economygdppercapita\", color = \"b\",\n                             linewidth = 1, linestyle = \"-.\", alpha = 0.7)\nplt.legend(loc = \"upper right\", fontsize = \"large\")\nplt.title(\"This is Line Plot - Relationsip Between Healt Life Expectancy and Economy GDP per Capita\")\nplt.xlabel(\"Happiness Rank\", fontsize = \"large\")\nplt.ylabel(\"Health Life Expectancy and Economy GDP per Capita\", fontsize = \"large\")\nplt.show()","fc26f720":"#Line Plot - 2\ndata.generosity.plot(kind = \"Line\", label = \"generosity\", color = \"g\",\n                    linewidth = 2, linestyle = \"-.\", grid = True,\n                    figsize = (20,10))\nplt.legend(loc = \"upper right\")\nplt.title(\"This is a Line Plot - Generosity\")\nplt.xlabel(\"Happiness Rank\")\nplt.ylabel(\"Generosity\")\nplt.show()","565a867c":"#Scatter Plot - 1\ndata.plot(kind = \"scatter\", x = \"happinessscore\", y = \"freedom\", color = \"g\",\n          alpha = 0.5, grid = True,s=80,\n          figsize =(20,10))\nplt.show()","d7929552":"#Scatter Plot - 2\nax = data.plot(kind = \"scatter\", x = \"freedom\", y = \"generosity\", color = \"red\",\n          alpha = 0.5, grid = True,s=50,\n          figsize =(20,10))\ndata.plot(kind = \"scatter\", x = \"freedom\", y = \"healthlifeexpectancy\", color = \"blue\",\n          alpha = 0.5, grid = True,s=50,\n          figsize =(20,10), ax=ax)\nplt.show()","cc730927":"#Scatter Plot - 3\ndata.plot(kind = \"scatter\", x = \"freedom\", y = \"healthlifeexpectancy\", color = \"blue\",\n          alpha = 0.5, grid = True,s=data['freedom']*650,\n          figsize =(20,10))\nplt.show()","0f01f259":"#Box Plot -1\n\ndata.generosity.plot(kind = \"box\", grid = True, figsize = (10,10))\nplt.title(\"This is a Box Plot\")\nplt.show()","d13cefd2":"#Area Plot - 1\n\ndata.happinessscore.plot(kind = \"area\", label = \"happinessscore\", color = \"b\",\n                 linewidth = 1, linestyle = \"--\", grid = True,\n                 alpha = 0.5, stacked=False, figsize = (20,10))\nplt.show()","ef0d4e31":"# Bar Plot\n\na = list(data['region'].unique())\nb = []\n\nfor each in range(len(a)):\n    x = data[\"region\"] == a[each]\n    k = list(data[x].happinessscore.describe())[1]\n    b.append(k)\n    if len(a[each])> 20:\n        t = []\n        for i in a[each].split():\n            t.append(i[:3])\n        a[each] = \".\".join(t)\n\nplt.figure(figsize=(20,10))\nplt.bar(a,b)\nplt.xlabel(\"Regions\", fontsize = \"large\")\nplt.ylabel(\"Average Happiness Score According to Regions\", fontsize = \"large\")\nplt.show()","05b4ea94":"#Data Correlation\ndata.corr()","0d0fca4a":"#Heatmap Plot\n\nf,ax = plt.subplots(figsize = (15,15))\nsns.heatmap(data.corr(), annot = True, linewidth = .5, fmt = \".2f\", ax=ax)\nplt.show()","b7b5098d":"#Filtering with np.logical_and\n\nx = data[\"happinessscore\"]>7\ny = data[\"happinessscore\"]<7.2\n\ndata[np.logical_and(x, y)]","02f9d0bb":"#This is just show a sample for using while loop.\ni = 0\nwhile data[\"happinessscore\"][i]>6:\n    i +=1\n\nprint(\"The happiness score value of {} countries is higher than 6.\".format(i))","6eb20ff4":"<a id=\"5\"><\/a> <br>\n**Matplotlib**\n\nMatplotlib is basic library for visualization of data information in Python.","35f5c9f4":"<a id=\"7\"><\/a> <br>\n**Filtering Data**","2aaec769":"1. [Go to Top Page](#0)","bc518309":"<a id=\"1\"><\/a> <br>\n**Importing Libraries**","4b46f7e7":"<a id=\"6\"><\/a> <br>\n**Seaborn**\n\nSeaborn is strong and popular library for visualization of data information in Python. There are lots of plots in seaborn but i will use only heatmap for just now.","d2e8fa84":"<a id=\"2\"><\/a> <br>\n**Reading Data and Taking Basic Information**","0423e3d1":"<a id=\"3\"><\/a> <br>\n**Cleaning Data**\n\nWe need to clean data. Because a lot of datas not clean to use in Python. For example, in our data there are some gaps between columns names. It cause that; we cannot use it in our codes because it not appropriate for dot notation.","c8ee2b56":"<a id=\"4\"><\/a> <br>\n**Basic Visualization** \n\nIn this section i will use some basic visualization technique for visualization of data informations.","5b799536":"# Data Science - Analyze World Happiness 2015  with Python\n<a id=\"0\"><\/a> <br>\n\n    Firstly, DATAI (Kaan) i have to thank you very much about your tutorials. I follow your trainings through Udemy. I look forward to your new tutorial series and wish you success.\n     \n    This is my first kernel on Kaggle. I create this kernel for my homework and  i am going to show what i learned from Data ScienceTutorial for Beginners, in this kernel.\n    \n### Note : I am still working on kernel.\n     \n**Whats inside this kernel **\n\n1. **Episode - 1:**\n    1. [Importing Libraries](#1)\n    1. [Reading Data and Taking Basic Information](#2)\n    1. [Cleaning Data ](#3)\n    1. [Basic Visualization](#4)\n       1. [Matplotlib](#5)\n       1. [Seaborn](#6)\n    1. [Filtering Data](#7)"}}