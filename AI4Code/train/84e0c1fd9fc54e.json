{"cell_type":{"024ee947":"code","aa3ca2d1":"code","9c6bbaa5":"code","b5b1c323":"code","97fa5914":"code","15a69f13":"code","21261dbd":"code","b1f00eab":"code","2ab94af5":"code","c4829544":"code","30e360b2":"code","8d96e016":"code","40f4aa5f":"code","5a10a689":"code","a8b307b6":"code","ecbf54d0":"code","a37c728f":"code","ad45e506":"code","b44fe330":"code","91601fc1":"code","0d47e3dd":"code","78f7c47c":"code","3ceb3ea7":"code","23852d5d":"code","c122638c":"code","373ef68b":"code","6cb056da":"code","cf06393c":"code","f2f27478":"code","2b7360f2":"code","26a9c7d7":"code","2fe9020a":"code","24461250":"code","dfee845e":"code","f01414d8":"code","5aa63850":"code","cfca0acd":"code","4d7d69ea":"code","414e8a2a":"code","a204c66b":"code","6b0dc86c":"code","77248a72":"code","575c9624":"code","13b46016":"code","9fd2414b":"code","27ac4b68":"code","dfd8e211":"code","9aaf3c07":"code","0b8b1e77":"code","cca9bd80":"code","2cb2b1eb":"code","479b588f":"code","f68a2cb7":"code","a35e475a":"code","22537286":"code","3c79a096":"code","3451f7e1":"code","f72db94e":"code","2067abfe":"code","af79959f":"code","7a5e7242":"code","d1a5ca5a":"code","6e5a8cc0":"code","16115473":"code","56a3c198":"code","6b78c375":"code","42415c12":"markdown","051b8fce":"markdown","9fa78b3f":"markdown","b80e0eac":"markdown","dcb19615":"markdown","80b6e4d2":"markdown","7a967556":"markdown","3a4fee96":"markdown","c1efaa35":"markdown","ac2899ca":"markdown","0ef43a40":"markdown","ceb0308e":"markdown","5f994b24":"markdown","b2ff05b9":"markdown","de332b62":"markdown","71d2116a":"markdown","e68cfd31":"markdown","2eacecbc":"markdown","d452cef4":"markdown","ce18a3ff":"markdown","3ef7b2c2":"markdown","e6cbe99a":"markdown","89e82970":"markdown","2a13df93":"markdown","5418874d":"markdown","0e4de4c0":"markdown","c9b572f5":"markdown"},"source":{"024ee947":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline\nimport plotly.express as px\nimport missingno\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom scipy import stats\nimport numpy as np\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa3ca2d1":"data = pd.read_csv('..\/input\/boston-housing-dataset\/HousingData.csv')\ndf = data.copy()\ndf.info()","9c6bbaa5":"df.head()","b5b1c323":"df.describe()","97fa5914":"df.dtypes","15a69f13":"df.shape","21261dbd":"display(df.isnull().sum())","b1f00eab":"df['CRIM'].isnull().sum()","2ab94af5":"df['CRIM'].unique()","c4829544":"df['CRIM'].dtype #checking for datatype","30e360b2":"df['CRIM'] = df['CRIM'].astype('str') #setting datatype","8d96e016":"display(df[df['CRIM']=='nan'])","40f4aa5f":"df['CRIM'] = df['CRIM'].astype('float64') #resetting datatype","5a10a689":"df['CRIM'].dtype","a8b307b6":"df['CRIM'].fillna(\"No Crimes\", inplace = True) ","ecbf54d0":"display(df['CRIM'].unique())","a37c728f":"df['ZN'].isnull().sum()","ad45e506":"df['ZN'].unique()","b44fe330":"df['ZN'].describe()","91601fc1":"df['ZN']=df['ZN'].astype('str') # Setting 'ZN' Data Type as String, so we can print elements having 'nan' value","0d47e3dd":"display(df[df['ZN']=='nan'])","78f7c47c":"df['ZN'] = df['ZN'].astype('float64') #resetting datatype","3ceb3ea7":"df['ZN'].dtype","23852d5d":"df['ZN'].fillna(\"Under 25K Sq. Ft.\", inplace = True) ","c122638c":"display(df['ZN'].unique())","373ef68b":"df['INDUS'].isnull().sum()","6cb056da":"df['INDUS'].unique()","cf06393c":"df['INDUS']=df['INDUS'].astype('str') # Setting 'INDUS' Data Type as String, so we can print elements having 'nan' value","f2f27478":"display(df[df['INDUS']=='nan'])","2b7360f2":"df['INDUS']=df['INDUS'].astype('float64')","26a9c7d7":"df['INDUS'].fillna(\"Retail Property\", inplace= True)","2fe9020a":"df['INDUS'].unique()","24461250":"display(df['CHAS'].isnull().sum())\ndisplay(df['AGE'].isnull().sum())\ndisplay(df['LSTAT'].isnull().sum())","dfee845e":"display(df['CHAS'].unique())\ndisplay(df['AGE'].unique())\ndisplay(df['LSTAT'].unique())","f01414d8":"df['CHAS']=df['CHAS'].astype('str')\ndf['AGE']=df['AGE'].astype('str')\ndf['LSTAT']=df['LSTAT'].astype('str')","5aa63850":"display(df[df['CHAS']=='nan'])\ndisplay(df[df['AGE']=='nan'])\ndisplay(df[df['LSTAT']=='nan'])","cfca0acd":"df['CHAS']=df['CHAS'].astype('float64')\ndf['AGE']=df['AGE'].astype('float64')\ndf['LSTAT']=df['LSTAT'].astype('float64')","4d7d69ea":"df['CHAS']=df['CHAS'].fillna(method ='pad')","414e8a2a":"df['CHAS'].unique()","a204c66b":"df['AGE'].fillna(\"Died\", inplace= True)","6b0dc86c":"df['AGE'].unique()","77248a72":"df['LSTAT']=df['LSTAT'].fillna(method ='bfill')","575c9624":"df['LSTAT'].unique()","13b46016":"df.isnull().sum()","9fd2414b":"corrmatrix=df.corr()\nsns.heatmap(corrmatrix, annot= True)\nplt.show()","27ac4b68":"df.corr(method ='pearson')","dfd8e211":"import seaborn as sns\nsns.boxplot(x=df['DIS'])","9aaf3c07":"sns.boxplot(x=df['CHAS'])","0b8b1e77":"sns.boxplot(x=df['NOX'])","cca9bd80":"sns.boxplot(x=df['RM'])","2cb2b1eb":"sns.boxplot(x=df['RAD'])","479b588f":"sns.boxplot(x=df['TAX'])","f68a2cb7":"sns.boxplot(x=df['PTRATIO'])","a35e475a":"sns.boxplot(x=df['B'])","22537286":"sns.boxplot(x=df['LSTAT'])","3c79a096":"sns.boxplot(x=df['MEDV'])","3451f7e1":"Q1 =df.quantile(0.25)\nQ3 = df.quantile(0.75)\nIQR = Q3 - Q1\nprint(IQR)","f72db94e":"display((df < (Q1 - 1.5 * IQR))|(df > (Q3 + 1.5 * IQR)))","2067abfe":"outdf = df[~((df < (Q1 - 1.5 * IQR)) |(df > (Q3 + 1.5 * IQR))).any(axis=1)]\noutdf.shape","af79959f":"display(outdf)","7a5e7242":"sns.boxplot(x=outdf['DIS'])","d1a5ca5a":"sns.boxplot(x=outdf['RM'])","6e5a8cc0":"sns.boxplot(x=outdf['PTRATIO'])","16115473":"sns.boxplot(x=outdf['B'])","56a3c198":"sns.boxplot(x=outdf['LSTAT'])","6b78c375":"sns.boxplot(x=outdf['MEDV'])","42415c12":"**False means the value is not an outlier, True means the value is an outlier**","051b8fce":"# Correlating with Pearson Method","9fa78b3f":"## Investigating and Dealing with Null Values of 'CRIM' Dataframe","b80e0eac":"## Investigating and Dealing with Null Values of 'ZN' Dataframe","dcb19615":"**You can see that there's no 'nan' value, instead they were replaced by 'No Crimes'**","80b6e4d2":"### Replacing Missing Values of 'AGE' by 'Died' (Considering the significantly high rate of 'NOX' for all 'nan' values of 'AGE')","7a967556":"# Finding Outliers by IQR Score","3a4fee96":"# Verifying","c1efaa35":"### Setting 'CRIM' Data Type as String, so we can print elements having 'nan' value","ac2899ca":"**As, ZN = proportion of residential land zoned for lots over 25,000 sq.ft.**","0ef43a40":"# Filtering Outliers, Keeping only valid values","ceb0308e":"**We can see there're no 'nan' values, instead they are replaced by 'Under 25K Sq. Ft.**","5f994b24":"### Replacing Null Values of 'INDUS' with 'Reatail Property'","b2ff05b9":"**This is the size of valid data we're left with after filetering outliers**","de332b62":"### Replacing Null Values of 'CRIM' with 'No Crimes' in the CSV File (Considering having 'nan' value mean there are no crimes)\n","71d2116a":"**As we can clearly see, the statistical readings of 'ZN' dataframe are very unusual. Clear indication of outliers**","e68cfd31":"## Investigating and Dealing with Null Values of 'CHAS', 'AGE' AND 'LSTAT' Dataframes","2eacecbc":"**No Null Entriea**","d452cef4":"# Cleaning Data","ce18a3ff":"### Replacing Null Values of 'ZN' by 'Under 25K Sq.Ft.'","3ef7b2c2":"## **Note the high weights of correlation (-ive or +ive) between:**\n* **'RAD' and 'TAX'(positive)**\n* **'MEDV' and 'LSTAT'(negative)**\n* **'RM' and 'LSTAT'(negative)**\n* **'DIS' and 'NOX' (negative)**\n* **'AGE' and 'NOX' (positive)**","e6cbe99a":"**No outliers**","89e82970":"### Replacing 'CHAS' Null Values with the Previous Value","2a13df93":"## Investigating and Dealing with Null Values of 'INDUS' Dataframe","5418874d":"# Detecting Outliers","0e4de4c0":"# Correlation","c9b572f5":"### Replacing Null Values of 'LSTAT' with the Next Value"}}