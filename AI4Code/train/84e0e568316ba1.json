{"cell_type":{"3556631f":"code","041e7cf8":"code","5e472d42":"code","c60fd6c1":"code","af3e03cf":"code","383b4927":"markdown","d86d96d5":"markdown","7a25d98c":"markdown"},"source":{"3556631f":"# Basic library\nimport pandas as pd\nimport pandas.io.sql as psql\nimport numpy as np\nimport numpy.random as rd\nimport gc\nimport multiprocessing as mpa\nimport os\nimport sys\nimport pickle\nfrom collections import defaultdict\nfrom glob import glob\nimport math\nfrom datetime import datetime as dt\nfrom pathlib import Path\nimport scipy.stats as st\nimport re\nfrom tqdm import tqdm_notebook as tqdm\n\n# Visualization\nimport matplotlib\nfrom matplotlib import font_manager\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom matplotlib import rc\n\nfrom matplotlib import animation as ani\nfrom IPython.display import Image\n\nplt.rcParams[\"patch.force_edgecolor\"] = True\n#rc('text', usetex=True)\nfrom IPython.display import display # Allows the use of display() for DataFrames\nimport seaborn as sns\nsns.set(style=\"whitegrid\", palette=\"muted\", color_codes=True)\nsns.set_style(\"whitegrid\", {'grid.linestyle': '--'})\nred = sns.xkcd_rgb[\"light red\"]\ngreen = sns.xkcd_rgb[\"medium green\"]\nblue = sns.xkcd_rgb[\"denim blue\"]\n\npd.set_option(\"display.max_colwidth\", 100)\npd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_columns\", None)\npd.options.display.float_format = '{:,.5f}'.format\n\n%matplotlib inline\n#%config InlineBackend.figure_format='retina'\n","041e7cf8":"# original from : https:\/\/gist.github.com\/mesgarpour\/f24769cd186e2db853957b10ff6b7a95\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport sys\n\n__author__ = \"Mohsen Mesgarpour\"\n__copyright__ = \"Copyright 2016, https:\/\/github.com\/mesgarpour\"\n__credits__ = [\"Mohsen Mesgarpour\"]\n__license__ = \"GPL\"\n__version__ = \"1.0\"\n__maintainer__ = \"Mohsen Mesgarpour\"\n__email__ = \"mohsen.mesgarpour@gmail.com\"\n\n\nclass YeoJohnson:\n    \"\"\"\n    Computing Yeo-Johnson transofrmation, which is an extension of Box-Cox transformation\n    but can handle both positive and negative values.\n    References:\n    Weisberg, S. (2001). Yeo-Johnson Power Transformations.\n    Department of Applied Statistics, University of Minnesota. Retrieved June, 1, 2003.\n    https:\/\/www.stat.umn.edu\/arc\/yjpower.pdf\n    Adapted from CRAN - Package VGAM\n    \"\"\"\n    def fit(self, y, lmbda, derivative=0, epsilon=np.finfo(np.float).eps, inverse=False):\n        \"\"\"\n        :param y: The variable to be transformed (numeric array).\n        :param lmbda: The function's Lambda value (numeric value or array).\n        :param derivative: The derivative with respect to lambda\n        (non-negative integer; default: ordinary function evaluation).\n        :param epsilon: The lambda's tolerance (positive value).\n        :param inverse: The inverse transformation option (logical value).\n        :return: The Yeo-Johnson transformation or its inverse, or its derivatives with respect to lambda, of y.\n        \"\"\"\n        # Validate arguments\n        self.__validate(y, lmbda, derivative, epsilon, inverse)\n\n        # initialise\n        y = np.array(y, dtype=float)\n        result = y\n        if not (isinstance(lmbda, list) or isinstance(lmbda, np.ndarray)):\n            lmbda, y = np.broadcast_arrays(lmbda, y)\n            lmbda = np.array(lmbda, dtype=float)\n        l0 = np.abs(lmbda) > epsilon\n        l2 = np.abs(lmbda - 2) > epsilon\n\n        # Inverse\n        with warnings.catch_warnings():  # suppress warnings\n            warnings.simplefilter(\"ignore\")\n            if inverse is True:\n                mask = np.where(((y >= 0) & l0) == True)\n                result[mask] = np.power(np.multiply(y[mask], lmbda[mask]) + 1, 1 \/ lmbda[mask]) - 1\n\n                mask = np.where(((y >= 0) & ~l0) == True)\n                result[mask] = np.expm1(y[mask])\n\n                mask = np.where(((y < 0) & l2) == True)\n                result[mask] = 1 - np.power(np.multiply(-(2 - lmbda[mask]), y[mask]) + 1, 1 \/ (2 - lmbda[mask]))\n\n                mask = np.where(((y < 0) & ~l2) == True)\n                result[mask] = -np.expm1(-y[mask])\n\n            # Derivative\n            else:\n                if derivative == 0:\n                    mask = np.where(((y >= 0) & l0) == True)\n                    result[mask] = np.divide(np.power(y[mask] + 1, lmbda[mask]) - 1, lmbda[mask])\n\n                    mask = np.where(((y >= 0) & ~l0) == True)\n                    result[mask] = np.log1p(y[mask])\n\n                    mask = np.where(((y < 0) & l2) == True)\n                    result[mask] = np.divide(-(np.power(-y[mask] + 1, 2 - lmbda[mask]) - 1), 2 - lmbda[mask])\n\n                    mask = np.where(((y < 0) & ~l2) == True)\n                    result[mask] = -np.log1p(-y[mask])\n\n                # Not Derivative\n                else:\n                    p = self.fit(y, lmbda, derivative=derivative - 1, epsilon=epsilon, inverse=inverse)\n\n                    mask = np.where(((y >= 0) & l0) == True)\n                    result[mask] = np.divide(np.multiply(np.power(y[mask] + 1, lmbda[mask]),\n                                                         np.power(np.log1p(y[mask]), derivative)) -\n                                             np.multiply(derivative, p[mask]), lmbda[mask])\n\n                    mask = np.where(((y >= 0) & ~l0) == True)\n                    result[mask] = np.divide(np.power(np.log1p(y[mask]), derivative + 1), derivative + 1)\n\n                    mask = np.where(((y < 0) & l2) == True)\n                    result[mask] = np.divide(-(np.multiply(np.power(-y[mask] + 1, 2 - lmbda[mask]),\n                                                                    np.power(-np.log1p(-y[mask]), derivative)) -\n                                                        np.multiply(derivative, p[mask])), 2 - lmbda[mask])\n\n                    mask = np.where(((y < 0) & ~l2) == True)\n                    result[mask] = np.divide(np.power(-np.log1p(-y[mask]), derivative + 1), derivative + 1)\n\n        return result\n\n    @staticmethod\n    def __validate(y, lmbda, derivative, epsilon, inverse):\n        try:\n            if not isinstance(y, (list, np.ndarray, pd.Series)):\n                raise Exception(\"Argument 'y' must be a list!\")\n            if not isinstance(lmbda, (int, float, np.int, np.float)):\n                if not isinstance(lmbda, (list, np.ndarray, pd.Series)) or len(lmbda) != len(y):\n                    raise Exception(\"Argument 'lmbda' must be a number \"\n                                    \"or a list, which its length matches 'y' argument!\")\n            if not isinstance(derivative, (int, float, np.int, np.float)) or derivative < 0:\n                raise Exception(\"Argument 'derivative' must be a non-negative integer!\")\n            if not isinstance(epsilon, (int, float, np.int, np.float)) or epsilon <= 0:\n                raise Exception(\"Argument 'epsilon' must be a positive number!\")\n            if not isinstance(inverse, bool):\n                raise Exception(\"Argument 'inverse' must be boolean!\")\n            if inverse is True and derivative != 0:\n                raise Exception(\"Argument 'derivative' must be zero \"\n                                \"when argument 'inverse' is 'True'!\")\n        except ():\n            sys.exit()","5e472d42":"# original data\nplt.figure(figsize=(10, 5))\ndf = 10\nx = st.chi2.rvs(df=df, size = 10000)\nx -= np.median(x)\nplt.hist(x, bins=30)\nplt.show()","c60fd6c1":"# Original source code of this class is https:\/\/gist.github.com\/mesgarpour\/f24769cd186e2db853957b10ff6b7a95\nyj_trans = YeoJohnson()","af3e03cf":"n_col = 3\nn_row = 3\nplt.figure(figsize=(20, 10))\nfor i, lm in enumerate(np.arange(0.1, 1.0, 0.1)):\n    #print(lm)\n    plt.subplot(n_row, n_col, i+1)\n    x_trans = yj_trans.fit(x, lmbda=float(lm))\n    #_, p = st.normaltest(x_trans)\n    plt.hist(x_trans, bins=30)\n    plt.title(f\"lambda: {lm:.2f}, skew:{st.skew(x_trans):.2f}\")\n    \nplt.tight_layout()\nplt.show()","383b4927":"# Transformation\n\nBy using yeo-johnson power transformation, the data around zero can be converted, however box-cox transformation can not be used in this situation.  \nPerhaps this method was applied for the data of this competition.\n\n![fig](http:\/\/matsuken92.github.io\/imgs\/yeo-johnson_fig.png)\n\n![fieqg](http:\/\/matsuken92.github.io\/imgs\/yeo-johnson_eq.png)\n\nSource : http:\/\/www.stat.wisc.edu\/sites\/default\/files\/tr1002.pdf","d86d96d5":"# Experiment","7a25d98c":"## Create skewed data from chi2 distribution stride across ZERO"}}