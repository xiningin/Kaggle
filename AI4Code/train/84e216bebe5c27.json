{"cell_type":{"31a88c71":"code","f1b2c49b":"code","ca728b7f":"code","ec8ce635":"code","0270a215":"code","4e62d2b1":"code","a8822ef0":"code","e8344fac":"code","0da6a88a":"markdown","3565956d":"markdown","5cb6a19c":"markdown","bc676d8a":"markdown","875d3ba2":"markdown"},"source":{"31a88c71":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pylab as pl\nimport matplotlib\nimport random\n\nfrom scipy.optimize import curve_fit","f1b2c49b":"df = pd.read_csv('\/kaggle\/input\/corona-virus-report\/covid_19_clean_complete.csv')\ndf = df.rename(columns={\"Date\": \"datetime\"})\ndf[\"datetime\"] = pd.to_datetime(df[\"datetime\"],format='%Y-%m-%d')\ndf = df.sort_values(\"datetime\")\ndf['Province\/State'] = df['Province\/State'].fillna('')\ndf.loc[df[\"Country\/Region\"]==df['Province\/State'],'Province\/State'] = ''\ndf[\"Country_Province\"] = df[\"Country\/Region\"] + '-' + df['Province\/State']\ndf[\"Country_Province\"] = df[\"Country_Province\"].map(lambda x: x.rstrip('-'))\ndf.head()","ca728b7f":"# Combine all data per country\ntable = pd.pivot_table(df, values=[\"Confirmed\",\"Deaths\"], index=[\"datetime\"],\n                    columns=[\"Country_Province\"], aggfunc=sum)\n\ntotal_deaths = pd.DataFrame(table['Deaths'].iloc[-1,:][table['Deaths'].iloc[-1,:]>60].sort_values(ascending=False))\ntotal_deaths.head(20)","ec8ce635":"# Select top 15 countries based on the number of deaths\ncountry_list = [j for j in total_deaths.index][:15]\nrandom.shuffle(country_list)\nprint(country_list)","0270a215":"# Find time at which a certain number of deaths is found: \ntime_at = {} # Time at number of deaths \ndays = (table.index - table.index[0])\ndeath_counts = [20,30,40,50,60]\nfor country in country_list:\n    time_at[country] = {}\n    for death_count in death_counts: \n        time_at[country][death_count] = np.interp(np.log(death_count),np.log(table['Deaths'][country][table['Deaths'][country]>0]),days.days[table['Deaths'][country]>0])\n        #linear: time_at[country, death_count] = np.interp(death_count,table['Deaths'][country],days.days)\ndays_at_death = pd.DataFrame(time_at)\ndays_at_death.index.name = \"Deaths\"\n","4e62d2b1":"# fitting functions\ndef f(t, K, P0, r):\n    return  (K \/ (1 + ((K-P0)\/P0)*np.exp(-r*t)))\n\nimport random\n\nnumber_of_countries = 15\n\n# generate random color strings\ncolors = ['#'+str(hex(random.randint(0,256*256*256)))[2:] for k in range(number_of_countries)]\n\n# init main graph\nfig = pl.figure(figsize=(13, 9))\nax = pl.axes()\n\n# main graph captions\npl.suptitle(\"2020 COVID-19 pandemic\", fontweight=\"bold\")\npl.ylabel('Cases')\npl.xlabel('Days')\n\ncountry_list #.remove('US')\nfor c, country in enumerate(country_list): \n    print(country)\n    y_values = table['Deaths'][country].values\n    x_values = pd.to_timedelta(table['Deaths'].index)\/pd.offsets.Day(1) - 18283 - days_at_death[country][days_at_death.index == 60].values[0]\n    #x_values = x_values - x_values[0]\n    k = x_values[-1]\n    initvals = [50, 0.0, 1.0]\n    #y_values = y_values[x_values > -10]\n    #x_values = x_values[x_values > -10]\n    popt, pcov = curve_fit(f, x_values, y_values, p0= initvals , maxfev=300000)\n\n    # main fitting plot\n    xx = np.linspace(x_values[0], x_values[0]+150, 150)\n    yy = f(xx, popt[0], popt[1], popt[2])\n    K1, P01, r1 = popt[0], popt[1], popt[2]\n\n    popt, pcov = curve_fit(f, x_values[:-1:], y_values[:-1:], p0= initvals , maxfev=300000)\n    K2, P02, r2 = popt[0], popt[1], popt[2]\n    yy2 = f(xx, popt[0], popt[1], popt[2])\n\n    popt, pcov = curve_fit(f, x_values[:-2:], y_values[:-2:], p0= initvals , maxfev=300000)\n    K3, P03, r3 = popt[0], popt[1], popt[2]\n    yy3 = f(xx, popt[0], popt[1], popt[2])\n\n    pl.semilogy(x_values, y_values,'o', color=colors[c], label=country)\n    pl.semilogy(xx, yy, '-', color=colors[c])\n    yl = np.min(np.vstack([yy, yy2, yy3]),axis=0)\n    yu = np.max(np.vstack([yy, yy2, yy3]),axis=0)\n    pl.fill_between(xx, yl, yu, color=colors[c], alpha=0.3)\n    print(f\"{country}\")\n    print(f\"  Growth rate r:       {[r3, r2, r1]}\")\n    print(f\"  Carrying capacity K: {[K3, K2, K1]}\")\n    print(f\"  P0:                  {[P03, P02, P01]}\")\n    print(f\"  Estimated deaths:    {[np.round(yy3[-1]), np.round(yy2[-1]), np.round(yy[-1])]}\")\n    print()\n    \npl.xlim(xx[0], xx[-1])\n\nax.set_ylim([1,100000])\nax.set_yticks([1,3,10,30,100,300,1000,3000,10000,30000,100000])\nax.set_ylabel('Deaths')\nax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())\nax.grid(True)\n\npl.legend(loc='best')","a8822ef0":"def moving_average(a, n=5):\n    #http:\/\/stackoverflow.com\/questions\/14313510\/ddg#14314054\n    ret = np.cumsum(a, dtype=float)\n    ret[n:] = ret[n:] - ret[:-n]\n    return ret[n - 1:] \/ n\n\n#pl.style.use('fivethirtyeight')\nll = [[10, 100000], [100, 2000000]]\nfor q, quantity in enumerate(['Deaths','Confirmed']):\n    # init main graph\n    #fig = pl.figure(figsize=(16, 7))\n    fig, axes = pl.subplots(figsize=(16, 7), nrows=1, ncols=2, sharex=True, sharey=True)\n    fig.suptitle(\"2020 COVID-19 pandemic\", fontweight=\"bold\")\n\n    for c, country in enumerate(country_list): \n        ax = axes[c\/\/8]\n        # main graph captions\n        ax.set_ylabel('New '+quantity)\n        ax.set_xlabel('Total '+quantity)\n        y_values = table[quantity][country].values\n        x_values = pd.to_timedelta(table[quantity].index)\/pd.offsets.Day(1)\n        x_values = x_values - x_values[0]\n        k = x_values[-1]\n        \n        y_values = moving_average(y_values)\n        ax.loglog(y_values[:-1], np.diff(y_values),'.-', label=country) #  color=colors[c], \n  \n        ax.set_xlim(ll[q])\n        ax.legend(loc='best')  \n    \n    \n    for k in range(2):\n        ax = axes[k]\n        #ax.get_xaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())\n        ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())\n        ax.grid(True)\n    ","e8344fac":"ll = [[-10, 100], [-10, 100]]\nyl = [[-10, 300], [-10, 1000]]\n\nfor q, quantity in enumerate(['Deaths','Confirmed']):\n    # init main graph\n    #fig = pl.figure(figsize=(16, 7))\n    fig, axes = pl.subplots(figsize=(16, 7), nrows=1, ncols=2, sharex=True, sharey=True)\n    fig.suptitle(\"2020 COVID-19 pandemic\", fontweight=\"bold\")\n\n    for c, country in enumerate(country_list): \n        ax = axes[c\/\/8]\n        # main graph captions\n        ax.set_ylabel('New '+quantity)\n        ax.set_xlabel('Days since 60 Deaths')\n        y_values = table[quantity][country].values\n        k = x_values[-1]\n        x_values = pd.to_timedelta(table['Deaths'].index)\/pd.offsets.Day(1) - 18283 - days_at_death[country][days_at_death.index == 60].values[0]\n        \n        y_values = moving_average(y_values)\n        ax.plot(x_values[5:], np.diff(y_values),'.-', label=country) #  color=colors[c], \n  \n\n        ax.set_xlim(ll[q])\n        ax.set_ylim(yl[q])\n        ax.legend(loc='best')  \n        \n    for k in range(2):\n\n        ax = axes[k]\n        #ax.get_xaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())\n        ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())\n        ax.grid(True)\n    ","0da6a88a":"# Prepare data","3565956d":"Making the plot similar to [[4](https:\/\/www.youtube.com\/watch?v=54XLXg4fYsc)]","5cb6a19c":"# References \n\n[1] https:\/\/www.kaggle.com\/hotstaff\/fitting-to-logistic-function-and-graph-drawing\n\n[2] https:\/\/www.kaggle.com\/hotstaff\/west-african-ebola-virus-epidemic-timeline\n\n[3] https:\/\/www.kaggle.com\/imdevskp\/corona-virus-report\n\n[4] https:\/\/www.youtube.com\/watch?v=54XLXg4fYsc\n\n","bc676d8a":"# Introduction\n\nThis notebook is based on an example notebook [[1](https:\/\/www.kaggle.com\/hotstaff\/fitting-to-logistic-function-and-graph-drawing)] for the West African Ebola epidemic [[2](https:\/\/www.kaggle.com\/hotstaff\/west-african-ebola-virus-epidemic-timeline)] applied to the COVID-19 pandemic dataset [[3](https:\/\/www.kaggle.com\/imdevskp\/corona-virus-report)].\n\nThis models the growth of the virus using the logistic function (Population function):\n$$ P(t) = \\frac{K}{1 + \\left(\\frac{K-P_0}{P_0}\\right) \\exp{(-rt)}} $$\nis the solution of the Verhulst equation:\n$$ \\frac{\\mathrm{d} P(t)}{\\mathrm{d} t} = r P(t) \\cdot \\left( 1 - \\frac{P(t)}{K} \\right), $$\nwhere \\\\( P_0 \\\\) is the initial population, the constant \\\\( r \\\\) defines the growth rate and \\\\( K \\\\) is the carrying capacity.\n","875d3ba2":"# Summarising remarks\n\n* Fitting of the logistic function appears to be uncertain at times with little data. "}}