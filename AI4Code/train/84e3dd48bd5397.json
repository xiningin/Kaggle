{"cell_type":{"aae47c50":"code","a4a362c0":"code","853d85ba":"code","262ef06e":"code","e2471e29":"code","bd1a0995":"code","2d7d4a04":"code","62b7e8bb":"code","9c50b24d":"code","8736582f":"code","d8434bce":"code","3498b716":"code","42cc3734":"code","693e5067":"code","67f033f9":"code","4a712801":"code","6312be34":"code","c51e0712":"code","5f7b4ecd":"markdown","465cc151":"markdown","271995e9":"markdown","0f3c4639":"markdown"},"source":{"aae47c50":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a4a362c0":"! ls ..\/input\/heart-disease-uci\/heart.csv","853d85ba":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","262ef06e":"data = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\ndata.head()","e2471e29":"data.shape","bd1a0995":"data.info()","2d7d4a04":"data.describe()","62b7e8bb":"#checking if threre is any null values present in dataset or not \ndata.isnull().sum()","9c50b24d":"corr = data.corr()\nplt.plot(figsize= (20,20))\nsns.heatmap(corr, annot=True)","8736582f":"sns.countplot(x='target',data=data ,palette='winter_r')\nplt.xlabel('heart disease outcome')\nplt.ylabel('count of patient')","d8434bce":"# checking counts of true and false heartprediction ,we have balance dataset so no need to upsamping and down sampling. \ntarget_true= len(data.loc[data['target']==1])\ntarget_false= len(data.loc[data['target']==0])\nprint(target_true,target_false)\n","3498b716":"from sklearn.model_selection import  train_test_split\nfrom sklearn.preprocessing import StandardScaler\nsc_x= StandardScaler()\ncolumns_to_scale = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']\ndata[columns_to_scale] = sc_x.fit_transform(data[columns_to_scale])\ndata.head()","42cc3734":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\ny = data['target']\nX = data.drop(['target'], axis = 1)","693e5067":"#y is series hence convering into 2d array using reshape \ny1 =y.ravel().reshape(-1,1)\ny1.shape","67f033f9":"# checking best nearest naighbours values\nfrom sklearn.model_selection import cross_val_score\nknn_score= []\nfor i in range(1,20):\n    knn_classifier = KNeighborsClassifier(n_neighbors=i)\n    score = cross_val_score(knn_classifier,X,y1,cv=10)\n    knn_score.append(score.mean())\n    ","4a712801":"plt.plot([i for i in range(1,20)],knn_score,'b*--')\nplt.xticks([i for i in range(1, 20)])\nplt.xlabel('Number of Neighbors (K)')\nplt.ylabel('Scores')\nplt.title('K Neighbors Classifier scores for different K values')","6312be34":"\nknn_classifier = KNeighborsClassifier(n_neighbors = 5)\nscore=cross_val_score(knn_classifier,X,y1,cv=10)\n\nscore.mean()","c51e0712":"##random forest\nfrom sklearn.ensemble import RandomForestClassifier\n\n\nrandomforest_classifier= RandomForestClassifier(n_estimators=10)\nscore=cross_val_score(randomforest_classifier,X,y,cv=10)\nscore.mean() ","5f7b4ecd":"**Feature Selection **","465cc151":"we can take nearest neighbours value from 4 or 5 . \nbecause it is giving more score ","271995e9":"**Importing the librabries**","0f3c4639":"Kaggle link : https:\/\/www.kaggle.com\/ronitf\/heart-disease-uci\n"}}