{"cell_type":{"1d40806f":"code","c42b79b8":"code","4312a8f5":"code","5fec1ad0":"code","8c65c806":"code","01252645":"code","0ad4d5ab":"code","218399ed":"code","bc9e6c1f":"code","62295fdf":"code","f46ea5b6":"code","f329140c":"code","8d19b53b":"code","421e5b05":"code","c2fc9faa":"code","ab1111a0":"code","28162c4e":"code","bc7fa359":"code","1dcaa79b":"code","5882e139":"code","54d94c08":"code","ec709864":"code","738144ed":"code","7dc3d80e":"code","682fa575":"code","6847a816":"code","5576f2f4":"code","dd925c92":"code","e95c7772":"code","63a6fe3c":"code","bb31cdb4":"markdown","cde69969":"markdown","6de3fc4c":"markdown","16236d5f":"markdown","1519ce19":"markdown","0bb71700":"markdown","b02f5f2b":"markdown"},"source":{"1d40806f":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport os, re, sys\nimport matplotlib.pyplot as plt\nfrom IPython.core.display import HTML, Image","c42b79b8":"YEAR = 2017\nOUTPUT_ZIP = f'mm_heatmaps_{YEAR}.zip'\nDIR  = f'..\/input\/2017-march-ml-mania-predictions'\nPDIR = f'{DIR}\/predictions\/predictions'\nTDIR = f'..\/input\/meta-march-mania'\nPNG_DIR = '\/kaggle\/plots'","4312a8f5":"os.makedirs(PNG_DIR, exist_ok=True)","5fec1ad0":"teams = pd.read_csv(f'{DIR}\/Teams.csv', index_col=0)\nteams.shape","8c65c806":"seeds = pd.read_csv(f'{DIR}\/TourneySeeds.csv', index_col=2).query(f'Season=={YEAR}')\nseeds.shape","01252645":"res = pd.read_csv(f'{TDIR}\/GroundTruths.csv', index_col=0).query(f'Season=={YEAR}')\nres.shape","0ad4d5ab":"ids = set(res.Low) | set(res.High)\nnteams = len(ids)\nnteams","218399ed":"seeds = seeds[seeds.index.isin(ids)] # 64 teams\nseeds = seeds.join(teams)\n', '.join(seeds.Team_Name) # Team_Name -> seed based position","bc9e6c1f":"inds = dict(zip(seeds.index, range(nteams)))\nprint(inds)  # TeamID -> seed based position","62295fdf":"ICOLS = ['i1', 'i2']\n\ndef add_inds(df, col):\n    parts = getattr(df, col).str.split('_')\n    df = df.assign(**{ICOLS[i]:parts.str[i+1].astype(int).map(inds) for i in range(2)})\n    df = df.dropna()\n    df[ICOLS] = df[ICOLS].astype(int)\n    return df\n\n# return a submission in a standard form\ndef read_sub(name):\n    df = pd.read_csv(name)\n    df.columns = df.columns.str.lower()\n    df = add_inds(df, 'id')\n    return df[['id', 'pred'] + ICOLS].set_index('id')\n\ndef log_loss(df):\n    p = np.where(df.Truth, df.pred, 1 - df.pred)\n    # clip low predictions to avoid infinite loss\n    p = p.clip(min=1e-15)\n    return (-np.log(p)).mean()\n\ndef score(sub):\n    df = sub.join(res, how='inner')\n    return log_loss(df)\n\n# return final score and the round 1 score from first 32 games\ndef score_multi(sub):\n    df = sub.join(res, how='inner')\n    return log_loss(df), log_loss(df.query('Round==1'))\n\ndef to_matrix(sub):\n    m = np.ones((nteams, nteams)) * 0.5\n    m[sub.i1, sub.i2] = sub.pred\n    m[sub.i2, sub.i1] = 1 - sub.pred\n    return m","f46ea5b6":"plt.rc('figure', figsize=(14, 14))\nplt.rc('font', size=12)","f329140c":"def save_heatmap(probs, filename, cmap=plt.cm.seismic):\n    fig, ax = plt.subplots()\n    heatmap = ax.pcolormesh(probs, vmin=0., vmax=1., cmap=cmap)\n\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n    ax.spines['left'].set_visible(False)\n    \n    ax.invert_yaxis()\n    ax.tick_params(direction='out')\n    ax.xaxis.tick_top()\n    ax.yaxis.tick_left()\n    plt.xticks(rotation=90)\n    \n    team_labels = seeds.Team_Name.values\n    # put the major ticks at the middle of each cell\n    ax.set_xticks(np.arange(nteams)+0.5, minor=False)\n    ax.set_yticks(np.arange(nteams)+0.5, minor=False)\n    ax.set_xticklabels(team_labels)\n    ax.set_yticklabels(team_labels)\n    plt.savefig(filename, bbox_inches='tight')   ","8d19b53b":"save_heatmap(to_matrix(add_inds(res, 'index').rename(columns={'Truth': 'pred'})), f'truth_{YEAR}', cmap=plt.cm.bwr)","421e5b05":"lst = !cd {PDIR} && find . -iname \\*.csv\nlen(lst)","c2fc9faa":"errs = []\nsums = 0\ncount = 0\nfor name in lst:\n    try:\n        sub = read_sub(f'{PDIR}\/{name}')\n        out = re.sub(r'\\.csv$', '.png', name[2:].replace('\/', '_'), re.IGNORECASE)\n        s = score_multi(sub)\n        m = to_matrix(sub)\n        sums += sub[['pred']].clip(0, 1)\n        count += 1\n        save_heatmap(m, f'{PNG_DIR}\/{s[0]:.6f}_{s[1]:.6f}_{out}')\n        plt.close()\n    except:\n        errs.append(name)","ab1111a0":"len(errs)","28162c4e":"errs","bc7fa359":"ensemble = (sums \/ count)\nensemble = add_inds(ensemble, 'index')\nscore_multi(ensemble)","1dcaa79b":"save_heatmap(to_matrix(ensemble), f'ensemble_{YEAR}')","5882e139":"lst = sorted(os.listdir(PNG_DIR))\nlen(lst)","54d94c08":"for i, f in enumerate(lst[:50], 1):\n    (score, sr1, sid, tag) = re.findall(r'([\\d\\.]+)_([\\d\\.]+)_(\\d+)_(.+)\\.png$', f)[0]\n    name = tag.replace('_', ' ')\n    display(HTML(\n        f'<h1 id=\"{sid}-{tag}\">[#{i}] {name}<\/h1>'\n        f'<p>Score: {score} <br\/>'\n        f'R1 Score: {sr1}'\n    ))\n    display(Image(f'{PNG_DIR}\/{f}'))","ec709864":"lst = np.asarray(os.listdir(PNG_DIR))\n\nnp.random.seed(42)\nnp.random.shuffle(lst)\n\ndef read_row(names):\n    return np.hstack([plt.imread(os.path.join(PNG_DIR, n)) for n in names])\n\ndef read_grid(names2d):\n    return np.vstack([read_row(row) for row in names2d])\n\ndef pop_gallery(shape):\n    global lst\n    n = np.product(shape)\n    g = read_grid(lst[:n].reshape(shape))\n    lst = lst[n:]\n    return g\n\ndef show_gallery(gal):\n    fig, ax = plt.subplots(figsize=(12, 12))\n    ax.imshow(gal, interpolation='bilinear')\n    ax.axis('off')\n    plt.tight_layout(pad=0)\n    plt.show()","738144ed":"show_gallery(pop_gallery((2,2)))","7dc3d80e":"show_gallery(pop_gallery((3,3)))","682fa575":"show_gallery(pop_gallery((4,4)))","6847a816":"show_gallery(pop_gallery((5,5)))","5576f2f4":"show_gallery(pop_gallery((6,6)))","dd925c92":"show_gallery(pop_gallery((7,7)))","e95c7772":"show_gallery(pop_gallery((8,8)))","63a6fe3c":"!7z a -bd -mmt4 {OUTPUT_ZIP} {PNG_DIR}\/*.png","bb31cdb4":"# Zip All Plots\n\nThat's still less than half the submissions!\n\nSurely some of the above tempt you to download them all and take a look?","cde69969":"# Ground Truth\n\nThis is it &mdash; the correct solution to 2017 &mdash; all the 63 matches actually played, and the results; reading rows, red means a win, blue is a loss. All the white cells are ignored in scoring solutions.","6de3fc4c":"# Random Galleries!\n\nLet's zoom out, step by step, seeing more and more submissions :)","16236d5f":"# Preview Top Plots\n\nShow the best submissions by log loss score - ranks not exactly same as leaderboard ranks as some teams had two strong submissions. See the [2017 leaderboard here](https:\/\/www.kaggle.com\/c\/march-machine-learning-mania-2017\/leaderboard). Also, beware that double digit logloss values 10+ aren't sorted correctly - but that will not affect the top 50 shown here.","1519ce19":"# Ensemble of All Submissions","0bb71700":"# Heatmap All *March Machine Learning Mania 2017* Submissions\n\nThe plot format is introduced [here](https:\/\/www.kaggle.com\/c\/march-machine-learning-mania-2017\/discussion\/30333), along with generated heatmaps for all the 2017 entries.\n\nTo recap: it is easiest to read the row for each team, where white means 50:50, red indicates probably winning, blue means probably losing, the deeper the color, the higher the probability.\n\nIn this Notebook the play-in matches are removed, leaving a 64x64 grid showing the four 16x16 regions, and all possible tournament matches.\n\nThe outline is:\n\n 1. list all csv submissions\n 2. for each: load; score; save heatmap\n 3. display selection\n 4. zip all 765 heatmaps for download\n","b02f5f2b":"# Generate All Plots"}}