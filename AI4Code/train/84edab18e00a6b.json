{"cell_type":{"34d34c0c":"code","c5d733a8":"code","abe7bded":"code","92941d87":"code","f01b99e4":"code","0ee6dd60":"code","365f4041":"code","036fd68a":"code","7131dbdd":"code","d4c8f329":"code","6206bd5e":"code","29205d88":"code","60ba7d54":"code","2806d87d":"code","33c0d9c3":"code","e75dc85a":"code","1f25db34":"code","76d59636":"code","057c0c3a":"code","3010113b":"code","b598614b":"code","803d7e29":"code","9d5cf33b":"code","99d0fcca":"code","2e86b43c":"code","598d11ff":"code","f2d8a477":"code","f91bd77e":"code","12542ae8":"code","58b70e04":"code","a6064a4f":"code","b8fdad4a":"code","46842a1a":"markdown","fa6e3a15":"markdown","c967c930":"markdown","991287c2":"markdown","3964e9e4":"markdown","a6bcdc60":"markdown","c36670e6":"markdown","362dac7d":"markdown","eaeef018":"markdown","7a0e989d":"markdown","51384d90":"markdown","48839f27":"markdown"},"source":{"34d34c0c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c5d733a8":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_PassengerId = test_df[\"PassengerId\"]","abe7bded":"train_df.columns","92941d87":"train_df.head()","f01b99e4":"# statistical values about the datasaet\ntrain_df.describe()","0ee6dd60":"train_df.info()","365f4041":"def bar_plot(variable):\n    \"\"\"\n    input variable ex: \"Sex\"\n    output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","036fd68a":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","7131dbdd":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","d4c8f329":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable],bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","6206bd5e":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","29205d88":"train_df[[\"Pclass\",\"Survived\"]]\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","60ba7d54":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","2806d87d":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","33c0d9c3":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","e75dc85a":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","1f25db34":"train_df.info()","76d59636":"def detect_outliers(df,features):\n    outlier_indices = []\n    for c in features:\n        # 1 st quartile\n        Q1 = np.percentile(df[c],25)\n        \n        # 3 rd quartile\n        Q3 = np.percentile(df[c],75)\n        \n        # IQR\n        IQR = Q3 - Q1\n        \n        # Outlier step\n        outlier_step = IQR * 1.5\n   \n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1-outlier_step) | (df[c] > Q3 + outlier_step)].index\n        \n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n\n    return multiple_outliers\n        ","057c0c3a":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","3010113b":"# Drop Outliers\n# axis = 0 , which means delete rows.\n# axis = 1 , which means delete columns.\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","b598614b":"# Merge DataFrames (train & test) by using concat() method.\ntrain_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","803d7e29":"train_df.head()","9d5cf33b":"train_df.columns","99d0fcca":"train_df.columns[train_df.isnull().any()]","2e86b43c":"# Burada kolonlar i\u00e7erisinde ka\u00e7 tane 'null' de\u011fere sahip oldu\u011funu g\u00f6r\u00fcyoruz\ntrain_df.isnull().sum()","598d11ff":"train_df[train_df[\"Embarked\"].isnull()]","f2d8a477":"train_df.boxplot(column = \"Fare\",by = \"Embarked\")\nplt.show()","f91bd77e":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","12542ae8":"train_df[train_df[\"Fare\"].isnull()]","58b70e04":"np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"])","a6064a4f":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","b8fdad4a":"train_df[train_df[\"Fare\"].isnull()]","46842a1a":"* float64(2) : Fare and Age\n* int64(5) : PClass , sibsp ,parch , passengerId and survive\n* object(5) : Cabin , Embarked","fa6e3a15":"<a id = '4' ><a><br>\n# Categorical Variable","c967c930":"<a id = '8' ><a><br>\n# Missing Values\n* Find Missing Values\n* Fill Missing Values","991287c2":"<a id = '10' ><a><br>\n## Fill Missing Values\n* Embarked has 2 missing values\n* Fare has only 1","3964e9e4":"<a id = '7' ><a><br>\n# Outlier Detection","a6bcdc60":"<a id = '1' ><a><br>\n# Load and Check Data","c36670e6":"<a id = '5' ><a><br>\n# Numerical Variable","362dac7d":"<a id = '6' ><a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch -Survived","eaeef018":"# Introduction\n\n<font color = 'blue'>\n\nContent:\n\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univarite Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Values](#8)\n    * [Find Missing Values](#9)\n    * [Fill Missing Values](#10)","7a0e989d":"<a id = '2' ><a><br>\n# Variable Description\n1. PassengerId : unique id number to each passenger\n2. Survived : passenger survive(1) or died(0)\n3. PClass: passenger class\n4. Name : name\n5. Sex : gender of passenger\n6. Age : age of pessenger\n7. Sibsp : number of siblings\/spouses\n8. Parch : number of parents\/children\n9. Ticket : ticket number\n10. Fare : amount of money spent on ticket\n11. Cabin : cabin category\n12. Embarked : port where passenger embarked(c = Cherbourg,Q = queenstown,S = Southhampton)","51384d90":"<a id = '9' ><a><br>\n## Find Missing Values","48839f27":"<a id = '3' ><a><br>\n# Univarite Variable Analysis\n* Categorical Variable: Survied , Sex , Pclass , Embarked , Cabin , Name , Ticket , Sibsp and Parch\n* Numerical Variable: Age , PassengerId , Fare"}}