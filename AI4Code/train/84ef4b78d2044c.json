{"cell_type":{"5439353a":"code","93045fc8":"code","9dc5ce42":"code","91bbb7f8":"code","f0cd88f1":"code","25fa1e1b":"code","60ee3025":"code","297cf94a":"code","bf2ccb24":"code","1de533c5":"code","4034bf30":"code","97c17174":"code","5e3c39a4":"code","8022808c":"code","62837eb2":"markdown","5152e3ec":"markdown","4f72709c":"markdown","cff1222d":"markdown","5654fcac":"markdown","5498e713":"markdown","3920655a":"markdown","a9ab9d62":"markdown","3fe7f044":"markdown","c9c51a72":"markdown","4b0ca810":"markdown","d8593038":"markdown"},"source":{"5439353a":"import os\n\n#Import Tensorflow\nimport tensorflow as tf\n\n#Import modulu keras library\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import SparseCategoricalCrossentropy\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Import Sklearn\nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.metrics import classification_report\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nfrom pathlib import Path\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# to prevent unnecessary warnings\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","93045fc8":"file = Path(\"..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset\") \nFile_Path = list(file.glob(r\"**\/*.png\"))\nFile_Path = pd.Series(File_Path).astype(str)\nFile_Path[:10]","9dc5ce42":"Labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],File_Path))\nLabels = pd.Series(Labels)\nLabels[:10]","91bbb7f8":"df = pd.concat([File_Path,Labels],axis=1)\ndf.columns = ['image', 'label']","f0cd88f1":"df = df[df[\"label\"].apply(lambda x: x[-2:] != \"GT\")].reset_index(drop=True)\ndf[:10]","25fa1e1b":"fig=plt.figure(figsize=(15,8))\nsns.countplot(df['label'])","60ee3025":"x_train, x_test = train_test_split(df, test_size=0.3,random_state=30)\nx_train, x_val = train_test_split(x_train, test_size=0.2, random_state=30)\nprint(x_test.shape)\nprint(x_train.shape)\nprint(x_val.shape)","297cf94a":"img_gen = ImageDataGenerator(rescale = 1.\/255,\n    rotation_range=40,\n      width_shift_range=0.2,\n      height_shift_range=0.2,\n      shear_range=0.2,\n      zoom_range=0.2,\n      horizontal_flip=True,\n      fill_mode='nearest')\n\n\ntrain = img_gen.flow_from_dataframe(dataframe=x_train, \n                                                 x_col='image', y_col='label', \n                                                 target_size=(200,200), color_mode='rgb', \n                                                 class_mode='categorical', shuffle=False)\n\ntest = img_gen.flow_from_dataframe(dataframe=x_test, \n                                                x_col='image', y_col='label', \n                                                target_size=(200,200), color_mode='rgb', \n                                                class_mode='categorical', shuffle=False)\nval = img_gen.flow_from_dataframe(dataframe=x_val,\n                                               x_col='image', y_col='label', \n                                               target_size=(200,200), color_mode='rgb', \n                                               class_mode='categorical',shuffle=False)","bf2ccb24":"input_shape=(200,200,3)\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=input_shape),\n    tf.keras.layers.MaxPool2D(pool_size = (2,2)),\n    tf.keras.layers.Conv2D(16, (3,3), activation='relu'),\n    tf.keras.layers.MaxPool2D(pool_size = (2,2)),\n    tf.keras.layers.Conv2D(16, (3,3), activation='relu'),\n    tf.keras.layers.MaxPool2D(pool_size = (2,2)),\n    tf.keras.layers.Conv2D(16, (3,3), activation='relu'),\n    tf.keras.layers.MaxPool2D(pool_size = (2,2)),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(9, activation='softmax')\n])\n\nmodel.summary()","1de533c5":"model.compile(optimizer='adam', \n              loss=\"categorical_crossentropy\", \n              metrics=['accuracy']) ","4034bf30":"callback = tf.keras.callbacks.EarlyStopping(monitor='accuracy', patience=4)\nhistory = model.fit(train, validation_data=val, epochs=20, callbacks=callback)","97c17174":"# Predict the label of the test_images\npred = model.predict(test)\npred = np.argmax(pred,axis = 1) \n\n# Map the label\nlabels = (train.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npred2 = [labels[k] for k in pred]","5e3c39a4":"from sklearn.metrics import classification_report, confusion_matrix # import metrics for evaluation\n\ntestt = x_test.label # set y_test to the expected output\n\nprint(\"classification_report\",classification_report(testt, pred2)) # print the classification report\n\nprint(\"confusion_matrix \\n\",confusion_matrix(testt, pred2))","8022808c":"accuracy = history.history['accuracy']\nval_accuracy  = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nplt.figure(figsize=(15,10))\n\nplt.subplot(2, 2, 1)\nplt.plot(accuracy, label = \"Training accuracy\")\nplt.plot(val_accuracy, label=\"Validation accuracy\")\nplt.legend()\nplt.title(\"Training vs validation accuracy\")\n\n\nplt.subplot(2,2,2)\nplt.plot(loss, label = \"Training loss\")\nplt.plot(val_loss, label=\"Validation loss\")\nplt.legend()\nplt.title(\"Training vs validation loss\")\n\nplt.show()","62837eb2":"<font size=\"5\" color='blue'>Deleting Data Ending in GT<\/font>  ","5152e3ec":"<font size=\"5\" color='blue'>Results<\/font> ","4f72709c":"<font size=\"6\" color='blue'>A Large Scale Fish Dataset<\/font> ","cff1222d":"<font size=\"5\" color='blue'>Split Data<\/font>  ","5654fcac":"<font size=\"5\" color='blue'>Predict<\/font> ","5498e713":"<font size=\"5\" color='blue'>Import Libraries<\/font>","3920655a":"<font size=\"5\" color='blue'>Get Labels in Data<\/font> ","a9ab9d62":"> <font size=\"5\" color='blue'>STEPS<\/font> \n> * Import Libraries\n> * Data Loading\n> * Get Labels in Data\n> * Deleting Data Ending in GT \n> * Split Data\n> * Data Generate\n> * Model Create \n> * Predict\n> * Results","3fe7f044":"> <font size=\"5\" color='blue'>CLASSES<\/font> \n> * Head Bream \n> * Red Sea Bream\n> * Sea Bass\n> * Red Mullet \n> * Horse Mackerel\n> * Black Sea Sprat\n> * Striped Red Mullet \n> * Trout \n> * Shrimp Image Samples","c9c51a72":"<font size=\"5\" color='blue'>Model Create<\/font> ","4b0ca810":"<font size=\"5\" color='blue'>Data Generate<\/font>  ","d8593038":"<font size=\"5\" color='blue'>Data Loading<\/font> "}}