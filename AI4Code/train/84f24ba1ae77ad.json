{"cell_type":{"0eb5a8cc":"code","d2fd6357":"code","393bc008":"code","0f8d2dfc":"code","5638705b":"code","32b3e6fc":"code","a28a974d":"code","7d2a386b":"code","d42e5ae5":"code","c54103a2":"code","05754e96":"code","18d5d4f9":"code","76f50578":"code","aff2023c":"code","f7e705cc":"code","886d41ae":"code","9acdb17d":"code","9a72ecb8":"code","ca0fdc01":"code","1fab8fa6":"code","e1acdc4e":"code","58943f79":"code","7132a969":"code","234a2500":"code","e825a0af":"code","15a3dcd0":"code","2e999f5c":"code","9d26d40d":"code","352fdb77":"code","6ae85e29":"code","20d2dd31":"code","62524fbc":"code","4e12f7fe":"code","2235265d":"code","a14abe09":"code","3f8e7667":"code","d46aa28c":"code","039889a5":"code","33d8e821":"code","83e5df11":"code","de03b41a":"code","146f5c6e":"code","40c7c6bd":"markdown","1cae5b8f":"markdown","b00c782c":"markdown","ffe4497a":"markdown","91da1879":"markdown","b11605e7":"markdown","ab138798":"markdown","1420d3b2":"markdown","d1192a03":"markdown","cb507565":"markdown","8059e52a":"markdown","1ef89ba2":"markdown"},"source":{"0eb5a8cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d2fd6357":"import os\nimport gc\nimport json\nimport math\nimport cv2\nimport PIL\nfrom PIL import Image\nimport numpy as np\nfrom keras import layers\nfrom keras.applications import DenseNet121\nfrom keras.callbacks import Callback, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score, accuracy_score\nimport scipy\nimport tensorflow as tf\nfrom tqdm import tqdm\n%matplotlib inline\nfrom keras.preprocessing import image","393bc008":"# Detect hardware, return appropriate distribution strategy\ntry:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","0f8d2dfc":"# class directories\ncover_dir = \"..\/input\/alaska2-image-steganalysis\/Cover\/\"\nJMiPOD_dir = \"..\/input\/alaska2-image-steganalysis\/JMiPOD\/\"\nJUNIWARD_dir = \"..\/input\/alaska2-image-steganalysis\/JUNIWARD\/\"\nUERD_dir = \"..\/input\/alaska2-image-steganalysis\/UERD\/\"\n# add to list\nclass_locs = [cover_dir, JMiPOD_dir, JUNIWARD_dir, UERD_dir]","5638705b":"BATCH_SIZE = 8\nTRAIN_VAL_SPLIT_RATIO = 0.50\nEPOCHS = 5\n# sample size for each class\ncN = 3000","32b3e6fc":"!pip install stegano ","a28a974d":"!pip install -q efficientnet_pytorch","7d2a386b":"! git clone https:\/\/github.com\/dwgoon\/jpegio\n!pip install jpegio\/.\n\nimport jpegio as jio","d42e5ae5":"import stegano\nfrom stegano import lsb\n\n# System\nimport cv2\nimport os, os.path\nfrom PIL import Image              # from RBG to YCbCr\n\n# Basics\nimport pandas as pd\nimport numpy as np\nfrom numpy import pi                # for DCT\nfrom numpy import r_                # for DCT\nimport scipy                        # for cosine similarity\nfrom scipy import fftpack           # for DCT\nimport random\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg    # to check images\n%matplotlib inline\nfrom tqdm.notebook import tqdm      # beautiful progression bar","c54103a2":"# Define 2D DCT\ndef dct2(a):\n    # Return the Discrete Cosine Transform of arbitrary type sequence x.\n    return fftpack.dct(fftpack.dct( a, axis=0, norm='ortho' ), axis=1, norm='ortho')","05754e96":"desired_size = 224\nim = Image.open(\"..\/input\/alaska2-image-steganalysis\/Cover\/00004.jpg\")\nim = im.resize((desired_size, desired_size))\na = np.array(im)","18d5d4f9":"a.shape[0]","76f50578":"from skimage import io\nfrom skimage.transform import rescale, resize, downscale_local_mean\n\nimg = io.imread(\"..\/input\/alaska2-image-steganalysis\/Cover\/00004.jpg\")\nimg = resize(img,(224, 224))\nimg = img.reshape((224, 224))\nprint(img.shape)","aff2023c":"image = mpimg.imread(\"..\/input\/alaska2-image-steganalysis\/Cover\/00004.jpg\")\nimsize = image.shape\ndct = np.zeros(imsize)\nfor i in range(0,imsize[0],8):\n    for j in range(0,imsize[1],8):\n        dct[i:(i+8),j:(j+8)] = dct2(image[i:(i+8),j:(j+8)])","f7e705cc":"a = np.array(im)","886d41ae":"#use dct of images as inputs in neural network\nimport cv2 \ndef preprocess_image(image_path,desired_size = 224):\n    image = cv2.imread(image_path,1) \n    image = cv2.resize(image, (desired_size, desired_size),  \n               interpolation = cv2.INTER_NEAREST) \n    dct = np.zeros(image.shape)\n    for i in range(0,image.shape[0],8):\n        for j in range(0,image.shape[1],8):\n            dct[i:(i+8),j:(j+8)] = dct2(image[i:(i+8),j:(j+8)])\n    return dct\n    ","9acdb17d":"#def preprocess_image(image_path, desired_size=224):\n    im = Image.open(image_path)\n    im = im.convert('YCbCr') #lets convert ycbcr and train the model\n    im = im.resize((desired_size, desired_size))\n    im = np.array(im) \/ 255\n    return im","9a72ecb8":"#def preprocess_image(image_path,desired_size=224):\n    #im = Image.open(image_path)\n    #im = im.resize((desired_size, desired_size))\n    \n    jpeg = jio.read(image_path) #read image and convert into ycrbr\n    #jpeg = jpeg.resize((desired_size, desired_size)) #resize(224,224,3)\n    coverDCT = np.zeros([512,512,3])\n    coverDCT[:,:,0] = jpeg.coef_arrays[0]\/255  #dct coeff of y\n    \n    \n    coverDCT[:,:,1] = jpeg.coef_arrays[1]\/255  #dct of br\n    coverDCT[:,:,2] = jpeg.coef_arrays[2]\/255   #dct of cr\n    return coverDCT\n    \n    \n    ","ca0fdc01":"jpeg = jio.read(\"..\/input\/alaska2-image-steganalysis\/Cover\/00004.jpg\")\na = np.array(jpeg.coef_arrays[0])","1fab8fa6":"a = jpeg.coef_arrays[0]\/255","e1acdc4e":"a.shape","58943f79":"filename","7132a969":"%%time\n\n# total samles \nN = cN * len(class_locs)\n# initialize y_train\ny_train = []\n# initalize x_train\nx_train = np.empty((N, 224, 224, 3), dtype=np.float16)\n# initialize class counter\nimClassNum = 0\n\n# run loop to grab training data\nfor imClass_dir in class_locs:\n    imClassNum += 1\n    print(\"running class\", str(imClassNum), \"...\")\n    for i, filename in enumerate(os.listdir(imClass_dir)):\n        x_train[i, :, :, :] = preprocess_image(imClass_dir+filename)\n        print(str(round(i\/75000,2))+\"% of total images processed, \"+str(i)+\" images in total\", end=\"\\r\")\n        if i == cN:\n            print(\"\")\n            print(\"finished with class \" + str(imClassNum) + \"..\")\n            break\n    y_train.extend([imClassNum] * cN)\n\n# convert y_train to numpy    \ny_train = np.array(y_train)    \n\nprint(\"final training dataset shape..\")\nprint(\"x_train shape: \", x_train.shape)\nprint(\"y_train len: \", len(y_train))\nprint(str(round(N\/(75000*4),2))+\"% of total images being used for training\")","234a2500":"y_train.shape","e825a0af":"# pre-processing the target (i.e. one-hot encoding the target)\ny_train = pd.get_dummies(y_train).values","15a3dcd0":"y_train.shape","2e999f5c":"x_train","9d26d40d":"x_train, x_val, y_train, y_val = train_test_split(\n    x_train, y_train, \n    test_size=TRAIN_VAL_SPLIT_RATIO, \n    random_state=2020\n)","352fdb77":"# define gen\n\nimg_gen = ImageDataGenerator(\n        zoom_range=0.15,  # set range for random zoom\n        # set mode for filling points outside the input boundaries\n        fill_mode='constant',\n        cval=0.,  # value used for fill_mode = \"constant\"\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=True,  # randomly flip images\n       \n    )\n\n# create generator\ndata_generator = img_gen.flow(x_train, y_train, batch_size=BATCH_SIZE, seed=2019)","6ae85e29":"densenet = DenseNet121(\n    weights='..\/input\/densenet-keras\/DenseNet-BC-121-32-no-top.h5',\n    include_top=False,\n    input_shape=(224,224,3)\n)","20d2dd31":"\ndensenet = DenseNet121(\n    weights='..\/input\/full-keras-pretrained-no-top\/densenet121_weights_tf_dim_ordering_tf_kernels_notop.h5',\n    include_top=False,\n    input_shape=(224,224,3)\n)","62524fbc":"def build_model():\n    model = Sequential()\n    model.add(densenet)\n    model.add(layers.GlobalAveragePooling2D())\n    model.add(layers.Dropout(0.80))\n    model.add(layers.Dense(4, activation='sigmoid'))\n    \n    model.compile(\n        loss='binary_crossentropy',\n        optimizer=Adam(lr=0.00010509613402110064),\n        metrics=['accuracy']\n    )\n    \n    return model","4e12f7fe":"model = build_model()\nmodel.summary()","2235265d":"history = model.fit_generator(\n    data_generator,\n    steps_per_epoch=x_train.shape[0] \/ BATCH_SIZE,\n    epochs=15,\n    validation_data=(x_val, y_val)\n)","a14abe09":"history_df = pd.DataFrame(history.history)\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['accuracy', 'val_accuracy']].plot()","3f8e7667":"sub = pd.read_csv(\"..\/input\/alaska2-image-steganalysis\/sample_submission.csv\")\nsub.head()","d46aa28c":"# test data directory\ntest_dir = \"..\/input\/alaska2-image-steganalysis\/Test\/\"\n\n# do similar data loading we did on train but on the test\\holdout set\nN = len([name for name in os.listdir(test_dir)])\nx_test = np.empty((N, 224, 224, 3), dtype=np.uint8)\nfor i, filename in enumerate(tqdm(os.listdir(test_dir))):\n    x_test[i, :, :, :] = preprocess_image(test_dir+filename)\n\nx_test.shape","039889a5":"y_test = model.predict(x_test)\ny_test = y_test[:,0]\nsub['Label'] = y_test","33d8e821":"sub['Label']","83e5df11":"sub.to_csv(\"submission_denep15_dct.csv\", index=False)","de03b41a":"sub.head(10)","146f5c6e":"y_test","40c7c6bd":"# Training Plots","1cae5b8f":"# Train Validation Split","b00c782c":"# Submission","ffe4497a":"# Variable Constants","91da1879":"# Resources:\n\nhttps:\/\/www.kaggle.com\/xhlulu\/aptos-2019-densenet-keras-starter\n\nhttps:\/\/www.kaggle.com\/wouterbulten\/getting-started-with-the-panda-dataset\n\nhttps:\/\/www.kaggle.com\/yeayates21\/densenet-keras-starter-fork-v2\n\nhttps:\/\/www.kaggle.com\/xhlulu\/jigsaw-tpu-xlm-roberta\n\nhttps:\/\/medium.com\/@vijayabhaskar96\/tutorial-image-classification-with-keras-flow-from-directory-and-generators-95f75ebe5720\n\nhttps:\/\/stackoverflow.com\/questions\/55328355\/keras-flow-from-directory-read-only-from-selected-sub-directories\n\nhttps:\/\/kylewbanks.com\/blog\/train-validation-split-with-imagedatagenerator-keras\n\nhttps:\/\/medium.com\/@vijayabhaskar96\/tutorial-image-classification-with-keras-flow-from-directory-and-generators-95f75ebe5720","b11605e7":"# Create Model","ab138798":"# Imports","1420d3b2":"# Train Model","d1192a03":"# Config Settings","cb507565":"# Image Gen","8059e52a":"# Training Data","1ef89ba2":"# Fixed Constants"}}