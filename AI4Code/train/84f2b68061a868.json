{"cell_type":{"7717b58a":"code","c8600f79":"code","366fa776":"code","6ca0073e":"code","a4d8bb83":"code","3f2e5a01":"code","ef4fc0c0":"code","cdf51e68":"code","7ca05d51":"code","93f06162":"code","2b923bcd":"code","e14db4db":"code","c6667442":"code","1ebf21d1":"code","18873205":"code","cc315f34":"code","9ec8bd8c":"code","437fc227":"code","a5abacc3":"code","83e11886":"code","fdfcf34b":"code","66438e24":"code","59051aaa":"code","2bed0417":"code","dd832712":"code","e8baecd9":"code","8704b7cb":"code","62d6f138":"code","76dffce7":"code","777d6da1":"code","a728f99a":"code","8b7dd5d7":"code","9e58d422":"code","5ca29917":"code","db81c095":"code","7bd97108":"code","fd6f0db3":"code","da19807c":"code","4ef95348":"code","5c33373f":"code","493c6058":"code","e0dce3fa":"code","cd327665":"code","aa1c6244":"code","35f1017a":"code","93bc74a1":"code","022f474c":"code","6de926de":"code","6730411d":"code","97a9f5d9":"code","45e1e9d8":"code","9126720c":"markdown","7c2479e7":"markdown","7e1e235a":"markdown","81b2188b":"markdown","0a31b538":"markdown","a93f3084":"markdown","838e9ec7":"markdown","5128cf35":"markdown","ddc77459":"markdown","5f065952":"markdown","d6d589c7":"markdown"},"source":{"7717b58a":"import numpy as np \nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c8600f79":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix, matthews_corrcoef","366fa776":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","6ca0073e":"train.head()","a4d8bb83":"test.head()","3f2e5a01":"print(train.shape)\nprint(test.shape)","ef4fc0c0":"train.isnull().sum()","cdf51e68":"test.isnull().sum()","7ca05d51":"train_test_data = [train, test] \n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n\ntitle_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n\ntrain.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)\n\nsex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)\n\ntrain[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","93f06162":"train.groupby(\"Title\")[\"Age\"].transform(\"median\")\nfor dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","2b923bcd":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')\nembarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","e14db4db":"train[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)","c6667442":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3","1ebf21d1":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","18873205":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","cc315f34":"train[\"Cabin\"].fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest[\"Cabin\"].fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","9ec8bd8c":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1\nfamily_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","437fc227":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1)\ntrain_data = train.drop('Survived', axis=1)\ntarget = train['Survived']\ntrain_data.shape, target.shape","a5abacc3":"k_fold = KFold(n_splits=10, shuffle=True, random_state=0)","83e11886":"clf = LogisticRegression()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","fdfcf34b":"round(np.mean(score)*100, 2)","66438e24":"clf = KNeighborsClassifier(n_neighbors = 16)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","59051aaa":"round(np.mean(score)*100, 2)","2bed0417":"clf = DecisionTreeClassifier(random_state=587)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","dd832712":"round(np.mean(score)*100, 2)","e8baecd9":"clf = RandomForestClassifier(n_estimators=128)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","8704b7cb":"round(np.mean(score)*100, 2)","62d6f138":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","76dffce7":"round(np.mean(score)*100, 2)","777d6da1":"clf = SGDClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","a728f99a":"round(np.mean(score)*100,2)","8b7dd5d7":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","9e58d422":"round(np.mean(score)*100, 2)","5ca29917":"clf = LogisticRegression()\nclf.fit(train_data, target)\naccuracy_score(target, clf.predict(train_data))","db81c095":"print(classification_report(target, clf.predict(train_data)))","7bd97108":"clf = KNeighborsClassifier()\nclf.fit(train_data, target)\naccuracy_score(target, clf.predict(train_data))","fd6f0db3":"print(classification_report(target, clf.predict(train_data)))","da19807c":"clf = SVC()\nclf.fit(train_data, target)\naccuracy_score(target, clf.predict(train_data))","4ef95348":"print(classification_report(target, clf.predict(train_data)))","5c33373f":"clf = GaussianNB()\nclf.fit(train_data, target)\naccuracy_score(target, clf.predict(train_data))","493c6058":"print(classification_report(target, clf.predict(train_data)))","e0dce3fa":"clf = SGDClassifier()\nclf.fit(train_data, target)\naccuracy_score(target, clf.predict(train_data))","cd327665":"print(classification_report(target, clf.predict(train_data)))","aa1c6244":"clf = RandomForestClassifier()\nclf.fit(train_data, target)\naccuracy_score(target, clf.predict(train_data))","35f1017a":"print(classification_report(target, clf.predict(train_data)))","93bc74a1":"clf = DecisionTreeClassifier()\nclf.fit(train_data, target)\naccuracy_score(target, clf.predict(train_data))","022f474c":"print(classification_report(target, clf.predict(train_data)))","6de926de":"test_data = test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)\nmatthews_corrcoef(target, clf.predict(train_data))","6730411d":"confusion_matrix(target, clf.predict(train_data))","97a9f5d9":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","45e1e9d8":"submission = pd.read_csv('submission.csv')\nsubmission.head()","9126720c":"# **Random Forest With Cross Validation**","7c2479e7":"# **Importing All Necessary Libary**","7e1e235a":"# **Algorithms Accuracy & Classification Report **","81b2188b":"# **Support Vector Classifier With Cross Validation **","0a31b538":"# **Stochastic Gradient Descent With Cross Validation**","a93f3084":"# **Logistics Regression With Cross Validation**","838e9ec7":"# **Prepare Submission**","5128cf35":"# **K-Neighbors With Cross Validation**","ddc77459":"# **Naive Bayes With Cross Validation**","5f065952":"# **Decission Tree With Cross Validation**","d6d589c7":"# **Pre-Processing Data**"}}