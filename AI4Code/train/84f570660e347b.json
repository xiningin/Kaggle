{"cell_type":{"cf7565a5":"code","db48a4e8":"code","324fceb1":"code","ea15301b":"code","68e4e482":"code","c78c0f11":"code","e62bb037":"code","476cda14":"code","2155da3b":"code","a509220d":"code","df3b4db6":"code","a1751648":"code","de20aa52":"code","f407bb67":"code","ad344add":"code","7b4d6e85":"code","8422d1d6":"code","2d98b484":"code","454f3625":"code","23fb8eb9":"code","ba018e7a":"code","8a2a5866":"code","26186a10":"code","d2688628":"code","9f0b5fa4":"code","b6b8afbf":"code","0f97c73a":"code","5cd984fc":"code","4a5c8644":"code","eea4cda7":"code","bf5eb021":"code","4a6daedb":"code","0d8508bc":"code","dadc280b":"code","5a9f6604":"code","5f8df8b7":"code","5338c150":"markdown","e60ee0be":"markdown","303158c7":"markdown","42c385c8":"markdown","6dc1e059":"markdown","e1bf9c4b":"markdown","d447dcab":"markdown","e7dbcdea":"markdown","38ab6c0b":"markdown","2a4dc086":"markdown","49000839":"markdown","f589b86c":"markdown","1663f9c4":"markdown","b881b191":"markdown","a7b79682":"markdown"},"source":{"cf7565a5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport tqdm\nfrom tqdm.auto import tqdm as tqdmp\ntqdmp.pandas()\n\n# Work with phash\nimport imagehash\n\nimport cv2, os\nimport skimage.io as io\nfrom PIL import Image\n\n# ignoring warnings\nimport warnings\nwarnings.simplefilter(\"ignore\")","db48a4e8":"WORK_DIR = '..\/input\/shopee-product-matching'\nos.listdir(WORK_DIR)","324fceb1":"train = pd.read_csv('..\/input\/shopee-product-matching\/train.csv')\ntest = pd.read_csv('..\/input\/shopee-product-matching\/test.csv')\nss = pd.read_csv('..\/input\/shopee-product-matching\/sample_submission.csv', index_col = 0)\nprint('-'*40, 'Train head', '-'*40)\nprint(train.head())\nprint('-'*40, 'Test head', '-'*40)\nprint(test.head())\nprint('-'*30, 'Sample submission head', '-'*30)\nprint(ss.head())","ea15301b":"print('Train images: %d' %len(os.listdir(os.path.join(WORK_DIR, \"train_images\"))))\nprint('Test images: %d' %len(os.listdir(os.path.join(WORK_DIR, \"test_images\"))))","68e4e482":"train_images = WORK_DIR + \"\/train_images\/\" + train['image']\ntrain['path'] = train_images\n\ntest_images = WORK_DIR + \"\/test_images\/\" + test['image']\ntest['path'] = test_images\n\ntrain.head()","c78c0f11":"print('label_group unique values: {}'.format(train['label_group'].nunique()))","e62bb037":"sns.set_style(\"whitegrid\")\nplt.figure(figsize = (10, 6))\nplt.title('Distribution of title length', fontsize = '15')\nsns.kdeplot(train['title'].apply(lambda x: len(x)), fill = True, \n            color = '#f15335', \n            edgecolor = 'black', alpha = 0.9)\nplt.xlabel('Title length')\nplt.show()","476cda14":"# Shape columns\ntrain['img_shape'] = train['path'].progress_apply(lambda x: np.shape(io.imread(x)))","2155da3b":"shapes = pd.DataFrame().from_records(train['img_shape'])\nshapes.columns = ['Width', 'Height', 'Colors']\n\nsns.set_style(\"white\")\nsns.jointplot(x = shapes.iloc[:, 0].astype('float32'), \n              y = shapes.iloc[:, 1].astype('float32'),\n              height = 8, color = '#f15335')\nplt.show()","a509220d":"imagehash.hex_to_hash(train['image_phash'][0])","df3b4db6":"def match_matrix(phash_array):\n    \"\"\"\n    A function that checks for matches by phash value.\n    Takes phash values as input.\n    Output - phash diff matrix (pandas data frame)\n    \"\"\"\n    phashs = phash_array.apply(lambda x: imagehash.hex_to_hash(x))\n    phash_matrix = pd.DataFrame()\n    pbar = tqdm.tqdm(total = len(phash_array), desc = 'Progress:', \n                     position = 0, leave = True)\n    for idx, i in enumerate(phash_array):\n        pbar.update(1)\n        phash_matrix = pd.concat([phash_matrix, phashs - imagehash.hex_to_hash(i)], \n                                 axis = 1)\n    pbar.close()\n    phash_matrix.columns = range(len(phash_array))\n    return phash_matrix","a1751648":"train_part = train.iloc[:1000, :]\nmatches = match_matrix(train_part['image_phash'])\nmatches","de20aa52":"test_match = match_matrix(test['image_phash'][:3])\ntest_match","f407bb67":"match = []\nfor i in range(len(matches)):\n    match.append(matches.iloc[i, :][(matches.iloc[i, :] == 0)].index.values)\nmatch = pd.Series(match)\n\nmatch[match.apply(lambda x: len(x) > 1)]","ad344add":"def image_viz(image_path):\n    \"\"\"\n    Function for visualization.\n    Takes path to image as input.\n    \"\"\"\n    img = cv2.imread(image_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)    \n    plt.imshow(img)\n    plt.axis('off')","7b4d6e85":"train_part.loc[[11,12],['posting_id','image_phash','title','label_group']]","8422d1d6":"plt.figure(figsize = (15, 10))\nfor idx, i in enumerate([train_part.loc[11, 'path'], \n                         train_part.loc[12, 'path']]):\n    plt.subplot(1, 2, idx + 1)\n    image_viz(i)\nplt.show()","2d98b484":"train_part.loc[[889,890,891],['posting_id','image_phash','title','label_group']]","454f3625":"plt.figure(figsize = (15, 10))\nfor idx, i in enumerate([train_part.loc[889, 'path'], \n                         train_part.loc[890, 'path'], \n                         train_part.loc[891, 'path']]):\n    plt.subplot(1, 3, idx + 1)\n    image_viz(i)\nplt.show()","23fb8eb9":"train_part.loc[[997,520],['posting_id','image_phash','title','label_group']]","ba018e7a":"plt.figure(figsize = (15, 10))\nfor idx, i in enumerate([train_part.loc[997, 'path'], \n                         train_part.loc[520, 'path']]):\n    plt.subplot(1, 2, idx + 1)\n    image_viz(i)\nplt.show()","8a2a5866":"match = []\nfor i in range(len(matches)):\n    match.append(matches.iloc[i, :][(matches.iloc[i, :] > 0) & \n                                    (matches.iloc[i, :] <= 5)].index.values)\nmatch = pd.Series(match)\n\nmatch[match.apply(lambda x: len(x) >= 1)]","26186a10":"plt.figure(figsize = (15, 10))\nfor idx, i in enumerate([train_part.loc[55, 'path'], \n                         train_part.loc[312, 'path']]):\n    plt.subplot(1, 2, idx + 1)\n    image_viz(i)\nplt.show()","d2688628":"plt.figure(figsize = (15, 10))\nfor idx, i in enumerate([train_part.loc[128, 'path'], \n                         train_part.loc[515, 'path']]):\n    plt.subplot(1, 2, idx + 1)\n    image_viz(i)\nplt.show()","9f0b5fa4":"plt.figure(figsize = (15, 10))\nfor idx, i in enumerate([train_part.loc[216, 'path'], \n                         train_part.loc[567, 'path']]):\n    plt.subplot(1, 2, idx + 1)\n    image_viz(i)\nplt.show()","b6b8afbf":"# Work functions\ndef phash_match(phash_array, element):\n    \"\"\"\n    A function that calculates phash diffs.\n    Takes phashs array and element as input.\n    Output - phash diff\n    \"\"\"\n    phash_diff = phash_array - phash_array[element]\n    return phash_diff\n\ndef add_match(phash, i, dataset = train, threshold = 5):\n    \"\"\"\n    A function that returns match names.\n    Takes phash array, i element, dataset and threshold (default = 5).\n    \"\"\"\n    diffs = phash_match(phash, i)\n    matches = [x for x in diffs[diffs <= threshold].index.drop(i).values]\n    str_matches = ''\n    str_matches = str_matches + dataset.iloc[i, 0] + ' '\n    for j in matches:\n        str_matches = str_matches + dataset.iloc[j, 0] + ' '\n    str_matches = str_matches[:-1]\n    return str_matches","0f97c73a":"phashs = train['image_phash'][:1000].apply(lambda x: imagehash.hex_to_hash(x))\nstr_matches = []\n\nfor i in tqdm.tqdm(range(len(phashs)), desc = 'Progress:', position = 0, leave = True):\n    str_matches.append(add_match(phashs, i))\n\nstr_matches[:15]","5cd984fc":"plt.figure(figsize = (15, 10))\nfor idx, i in enumerate(test['path']):\n    plt.subplot(1, 3, idx + 1)\n    image_viz(i)\nplt.show()","4a5c8644":"test","eea4cda7":"test_phashs = test['image_phash'].apply(lambda x: imagehash.hex_to_hash(x))\ntest_matches = []\n\nfor i in tqdm.tqdm(range(len(test_phashs)), desc = 'Progress:', \n                   position = 0, leave = True):\n    test_matches.append(add_match(test_phashs, i, test, threshold = 7))\n\ntest_matches","bf5eb021":"ss['matches'] = test_matches\nss.to_csv(\"submission.csv\")\nss","4a6daedb":"def simple_match(dataset, element):\n    \"\"\"\n    A function that returns match names.\n    Takes dataset and i element.\n    \"\"\"\n    matches = dataset[dataset['image_phash'] == \n                      dataset['image_phash'][element]]['posting_id'].drop(element).values\n    str_matches = ''\n    str_matches = str_matches + dataset.iloc[element, 0] + ' '\n    for j in matches:\n        str_matches = str_matches + j + ' '\n    str_matches = str_matches[:-1]\n    return str_matches","0d8508bc":"train_for_s = train[['posting_id', 'image_phash']]\nstr_matches = []\n\nfor i in tqdm.tqdm(range(len(train_for_s)), desc = 'Progress:', \n                   position = 0, leave = True):\n    str_matches.append(simple_match(train_for_s, i))\n\nstr_matches[:15]","dadc280b":"test_for_s = test.loc[:2, ['posting_id', 'image_phash']]\ntest_matches = []\n\nfor i in tqdm.tqdm(range(len(test_for_s)), desc = 'Progress:', \n                   position = 0, leave = True):\n    test_matches.append(simple_match(test_for_s, i))\n    \ntest_matches","5a9f6604":"# ss['matches'] = test_matches\n# ss","5f8df8b7":"# ss.to_csv(\"submission.csv\")","5338c150":"Let's take a look at a few matches.","e60ee0be":"<h2 style='color:white; background:#f15335; border:0'><center>WORK IN PROGRESS...<\/center><\/h2>","303158c7":"This analysis is convenient and simple, but it has one disadvantage - speed. For large test data, we cannot use it, and therefore we restrict ourselves to the usual finding of all identical PHASH codes for each image.","42c385c8":"<h2 style='color:white; background:#f15335; border:0'><center>Fast look at the data<\/center><\/h2>","6dc1e059":"Phash analysis allows you to find matches. It allows you to find not only exact copies but also approximate ones. For instance:","e1bf9c4b":"# Shopee Price Match Guarantee: Before we start\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/24286\/logos\/header.png?t=2021-01-07-16-57-37)\n\nDo you scan online retailers in search of the best deals? You're joined by the many savvy shoppers who don't like paying extra for the same product depending on where they shop. Retail companies use a variety of methods to assure customers that their products are the cheapest. Among them is product matching, which allows a company to offer products at rates that are competitive to the same product sold by another retailer. To perform these matches automatically requires a thorough machine learning approach, which is where your data science skills could help.\n\nTwo different images of similar wares may represent the same product or two completely different items. Retailers want to avoid misrepresentations and other issues that could come from conflating two dissimilar products. Currently, a combination of deep learning and traditional machine learning analyzes image and text information to compare similarity. But major differences in images, titles, and product descriptions prevent these methods from being entirely effective.\n\nShopee is the leading e-commerce platform in Southeast Asia and Taiwan. Customers appreciate its easy, secure, and fast online shopping experience tailored to their region. The company also provides strong payment and logistical support along with a 'Lowest Price Guaranteed' feature on thousands of Shopee's listed products.\n\nIn this competition, you\u2019ll apply your machine learning skills to build a model that predicts which items are the same products.\n\nThe applications go far beyond Shopee or other retailers. Your contributions to product matching could support more accurate product categorization and uncover marketplace spam. Customers will benefit from more accurate listings of the same or similar products as they shop. Perhaps most importantly, this will aid you and your fellow shoppers in your hunt for the very best deals.","d447dcab":"It works very well. In this competition, we don't need to compute phash ourselves. But this can be easily done using the [imagehash library](https:\/\/pypi.org\/project\/ImageHash\/)","e7dbcdea":"The data has 'phash' values for images, which can greatly simplify our work.\n\nPhash algorithm is really simple. It breaks images into fragments (in our case, the shape is 8x8), then analyzes the image structure on luminance (without color information) and simply assigns True or False depending on the value (above or below the mean). In order to analyze the similarity, it is necessary to subtract one phash matrix from another. Similar fragments will receive a null value (True - True = 0, False - False = 0). The closer the sum of all differences is to zero, the more similar the images are.\n\nFor instance, the phash matrix of the first image looks like this:","38ab6c0b":"<h2 style='color:white; background:#f15335; border:0'><center>Work with image PHASH<\/center><\/h2>","2a4dc086":"<h2 style='color:white; background:#f15335; border:0'><center>Work directory<\/center><\/h2>","49000839":"<h4 style='color:white; background:#f15335; border:0'><center>Image shapes distribution<\/center><\/h4>","f589b86c":"<h4 style='color:white; background:#f15335; border:0'><center>Test images<\/center><\/h4>","1663f9c4":"Let's write a little test function.","b881b191":"Since the process of composing a matrix is quite resource-intensive, for clarity, we will take only the first thousand images.","a7b79682":"<h2 style='color:white; background:#f15335; border:0'><center>Baseline prediction<\/center><\/h2>"}}