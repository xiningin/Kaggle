{"cell_type":{"130c47c7":"code","dcb74461":"code","99be941f":"code","bc078cf7":"code","1478db02":"code","8421fb1f":"code","dc0724b9":"code","35bdfe39":"code","4f7797c0":"code","2e3e9596":"markdown","efe27ce9":"markdown","7b85f11d":"markdown","f2487815":"markdown","5d08fa79":"markdown"},"source":{"130c47c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n#Step1: Necessery imports\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport scipy as scipy\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom sklearn import linear_model\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score , mean_absolute_error\n\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n#Step2: Loading the data \n#Change the csv file for another brand\n#Added Data types for memory optimization and faster loading\ndata = pd.read_csv('\/kaggle\/input\/marketing-data\/marketing_data.csv', error_bad_lines=False)\ndata.shape","dcb74461":"data.info()","99be941f":"std = np.std(data)\nprint(std)\n\n\n","bc078cf7":"cv = np.std(data) \/ np.mean(data)\nprint(cv)","1478db02":"var_full = np.var(data)\nprint(var_full)","8421fb1f":"#Step3:Describing the data\ndata.describe()","dc0724b9":"#Step3:Describing the data - finding the mode [most frequent]\ndata.mode()","35bdfe39":"import pandas_profiling\nreport = pandas_profiling.ProfileReport(data)\nfrom IPython.display import display\ndisplay(report)","4f7797c0":"#machine learning and making predictions\n#Display columns\ndata.columns\n#drop empty values\ndata = data.dropna(axis=0)\n#selecting prediction target\ny = data.AcceptedCmp1\n#Choosing features and stroring it in X\ndata_features = ['NumWebVisitsMonth','Year_Birth']\nX = data[data_features]\n#Describe data in X\nX.describe()\n#Describe the head\nX.head()\n\n\n\n# Define model. Specify a number for random_state to ensure same results each run\ndata_model = DecisionTreeRegressor(random_state=1)\n\n# Fit model\ndata_model.fit(X, y)\n\n#Printing Predictions\nprint(\"Making predictions for the following 5 Accepted campaigns:\")\nprint(X.head())\nprint(\"The predictions are\")\nprint(data_model.predict(X.head()))","2e3e9596":"# Describing the data ","efe27ce9":"***Variance***","7b85f11d":"# Making predictions based on number of visits and year of birth.\n","f2487815":"***Coefficient of Variation***","5d08fa79":"***Standard deviation***"}}