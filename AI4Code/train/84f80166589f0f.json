{"cell_type":{"c6286927":"code","9a0a495c":"code","d386f6e6":"code","b936e6b9":"code","c9845bd6":"code","8642f940":"code","b7bfce5f":"code","bfcefdae":"code","6e31123d":"code","0b995224":"code","f13c3e2a":"code","a82cdb46":"code","f647168a":"code","7eee0cec":"code","cd25fe9b":"markdown","e2121c48":"markdown","9051d6f3":"markdown","e4a05b8e":"markdown","763f8fd8":"markdown"},"source":{"c6286927":"import datatable as dt\nimport pandas as pd\nimport numpy as np\nfrom trueskill import Rating, quality_1vs1, rate_1vs1\nimport math\nimport trueskill","9a0a495c":"data_types_dict = {\n    'timestamp': 'int64',\n    'user_id': 'int32', \n    'content_id': 'int16', \n    'content_type_id':'int8', \n    'task_container_id': 'int16',\n    'answered_correctly': 'int8', \n    'prior_question_elapsed_time': 'float32', \n    'prior_question_had_explanation': 'bool'\n}\ntarget = 'answered_correctly'","d386f6e6":"#loading the dataset using datatable\ntrain = dt.fread('..\/input\/riiid-test-answer-prediction\/train.csv', columns=set(data_types_dict.keys())).to_pandas()\nprint(\"Data Loaded\")","b936e6b9":"train = train[train[target] != -1].reset_index(drop=True)\nprint(\"Lecture columns removed\")","c9845bd6":"train = train.astype(data_types_dict)\nprint(\"Basic Pre Processing Done\")","8642f940":"train = train.groupby('user_id').tail(4)","b7bfce5f":"users = np.unique(train[\"user_id\"])\nquestions = np.unique(train[\"content_id\"])","bfcefdae":"rating_users = []\nfor user in users:\n    rating_object = Rating()\n    rating_users.append(rating_object)\n\nrating_questions = []\nfor question in questions:\n    rating_object = Rating()\n    rating_questions.append(rating_object)","6e31123d":"dict_users = dict(zip(users,rating_users))\ndict_questions = dict(zip(questions,rating_questions))","0b995224":"answers = train[\"answered_correctly\"].values\nu_temp = train[\"user_id\"].values\nq_temp = train[\"content_id\"].values","f13c3e2a":"def win_probability(team1, team2):\n    delta_mu = team1.mu - team2.mu\n    sum_sigma = sum([team1.sigma ** 2, team2.sigma ** 2])\n    size = 2\n    denom = math.sqrt(size * (0.05 * 0.05) + sum_sigma)\n    ts = trueskill.global_env()\n    return ts.cdf(delta_mu \/ denom)","a82cdb46":"count = 0\nwinning_probability = []\nprint(\"Creating Feature\")\nprint(\"Running this will take about 10 mins. Grab a chai :)\")\nfor user_id,content_id,answer in zip(u_temp,q_temp,answers):\n    count = count + 1\n    old_user_rating = dict_users[user_id]\n    old_question_rating = dict_questions[content_id]\n    prob = win_probability(old_user_rating,old_question_rating)\n    winning_probability.append(prob)\n    if answer == 1:\n        new_user_rating,new_question_rating = rate_1vs1(old_user_rating,old_question_rating)\n    if answer == 0:\n        new_question_rating,new_user_rating = rate_1vs1(old_question_rating,old_user_rating)\n    dict_users[user_id] = new_user_rating\n    dict_questions[content_id] = new_question_rating\n    if count%1000000 == 0:\n        print((count\/1000000),\"million rows done\" )","f647168a":"train[\"correct_prob\"] = winning_probability","7eee0cec":"train.head()","cd25fe9b":"# So what exactly is TrueSkill?\n\nAccording to [TrueSkill.org](https:\/\/trueskill.org\/)\n\n\"TrueSkill is a rating system among game players. It was developed by Microsoft Research and has been used on Xbox LIVE for ranking and matchmaking service. This system quantifies players\u2019 TRUE skill points by the Bayesian inference algorithm. It also works well with any type of match rule including N:N team game or free-for-all.\"\n\nIn simple words, if you are a participant in a competition, then you will be recognized by a number. That number is your TrueSkill rating. When two participants clash, depending on which participant wins, that number gets updated. If participant A wins against Participant B then the rating of A shall increase and B shall decrease based on certain calculations.","e2121c48":"# **Hello there!**\n\nLet me start by stating that i am new to kaggle and data science in general so any mistakes i make or if there are any suggestions to be given, please feel free to point that out in the comments section below.\n\nWhile reading and going through this competition and its notebooks i came across this particular notebook called [0-780-unoptimized-lgbm-interesting-features](https:\/\/www.kaggle.com\/zyy2016\/0-780-unoptimized-lgbm-interesting-features). Here the author talks about using **Trueskill** features. This peaked my interest and so i tried to explore it and am making this notebook for other beginners like me to undertsand this concept. If you like the above notebook please do drop an upvote as it helps the author reach out to more people and spread his work and learn more.\n\nI don't know how much this'll help in the competition prediction or scorewise, but this is just an interesting concept that i wanted to explore more of. So here goes nothing...","9051d6f3":"Currently the most amount of time is used up on updating the dictionaries, which is why i haven't done it for the entire dataset. If you have a better way of updating them do please drop it in the comments. To avoid running the code again and again for the entire dataset, you could run this code and save the csv file to your working directory for further usage.\nIf you liked the kernel, do drop an upvote on it. As stated before any comments and suggestions are more than welcome.","e4a05b8e":"Above function has been taken from the notebook [0-780-unoptimized-lgbm-interesting-features](https:\/\/www.kaggle.com\/zyy2016\/0-780-unoptimized-lgbm-interesting-features). Do consider dropping an upvote.","763f8fd8":"# So how does this relate to Riid!\n\nThink of TOEIC test as a competition not as a test. So you treat every **user_id** as a participant and every **content_id** as a unique participant as well. Everytime a user answers a question correctly, the rating for the user_id **increases** and the rating for the content_id **decreases** . The reverse of this happens when the user answers a question incorrectly."}}