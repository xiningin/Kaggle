{"cell_type":{"403899a0":"code","c470fd50":"code","208562b1":"code","aa2d56fc":"code","8aab1427":"code","2f3535a6":"code","f9abcacb":"code","2cc9155d":"code","48903093":"code","4ce75e0e":"code","ff7b3a9c":"code","27f97e0b":"code","4c661e18":"code","6bad30cf":"code","bc7e824a":"code","92e92fad":"code","e4fe7b4d":"code","ea7c0751":"code","be786610":"code","3822ab47":"code","3e48c5e6":"code","3d8f6b4a":"code","a3204456":"code","eafb0ec3":"code","02a84bfb":"code","50d6049e":"code","5204e83b":"code","3818b910":"code","4e028088":"code","b92d8b33":"code","273afbcc":"code","f3dfc4bd":"code","0bf70c3e":"code","4e48a60c":"code","803e8730":"code","06da6a9c":"code","2fe436b5":"code","806ea6e4":"code","64cd738c":"code","96f76bcb":"code","a7cefffd":"code","74073f25":"code","857b3b18":"code","79bcd6e7":"code","bbfb78e1":"code","eac72a8a":"code","9c4412f1":"code","68206b68":"code","12de6bf5":"code","0243488a":"code","9a552eba":"code","51a84669":"code","abaa0a1c":"code","b786007c":"code","ddde1775":"code","3bf6f5f8":"code","2211426a":"code","257b4eef":"code","836d8472":"code","6c582909":"code","afed4d68":"code","d3297f19":"code","202e3886":"code","a22c4057":"code","5af2fd25":"code","58ed9f98":"code","5bddd5c8":"code","3e52267e":"code","4d4a8ec0":"code","b73fba2c":"code","8285a65b":"code","28def0de":"code","b1d092a5":"code","5488bbcd":"code","d4077578":"code","4ed6ed84":"code","ffade412":"code","c4adebc7":"markdown","59855317":"markdown","878489ea":"markdown","d8777afd":"markdown","073cf218":"markdown","355fe7f9":"markdown","460c84af":"markdown"},"source":{"403899a0":"from IPython.display import Image\nImage(\"..\/input\/rms-titanic\/red.JPG\")","c470fd50":"import pandas as pd # package for high-performance, easy-to-use data \n#structures and data analysis\nimport numpy as np # fundamental package for scientific computing with Python\nimport matplotlib\nimport matplotlib.pyplot as plt # for plotting\nimport seaborn as sns # for making plots with seaborn\ncolor = sns.color_palette()\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.offline as offline\noffline.init_notebook_mode()\n\n\n\n\n# import cufflinks and offline mode\nimport cufflinks as cf\ncf.go_offline()\n\n# from sklearn import preprocessing\n# # Supress unnecessary warnings so that presentation looks clean\nimport warnings\nwarnings.filterwarnings(\"ignore\")","208562b1":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest= pd.read_csv('..\/input\/titanic\/test.csv')","aa2d56fc":"train.head()","8aab1427":"train.info()","2f3535a6":"train.describe().T","f9abcacb":"train.columns\n","2cc9155d":"train.shape","48903093":"test.shape","4ce75e0e":"train.corr()","ff7b3a9c":"plt.figure(figsize=(10,8))\nsns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","27f97e0b":"plt.figure(figsize=(10,8))\nsns.heatmap(train.corr(),linecolor='white',linewidths=2,cmap='magma',square=True,annot=True)","4c661e18":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',data=train,palette='RdBu_r')","6bad30cf":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Sex',data=train,palette='RdBu_r')","bc7e824a":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Pclass',data=train,palette='rainbow')","92e92fad":"sns.distplot(train['Age'].dropna(),kde=False,color='darkred',bins=30)","e4fe7b4d":"sns.countplot(x='SibSp',data=train)","ea7c0751":"train['Fare'].hist(color='green',bins=40,figsize=(8,4))","be786610":"import cufflinks as cf\ncf.go_offline()","3822ab47":"train['Fare'].iplot(kind='hist',bins=30,color='green')\n","3e48c5e6":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=train,palette='winter')","3d8f6b4a":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age","a3204456":"train['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)","eafb0ec3":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","02a84bfb":"train.drop('Cabin',axis=1,inplace=True)","50d6049e":"train.head()","5204e83b":"train.dropna(inplace=True)","3818b910":"train.info()","4e028088":"sex = pd.get_dummies(train['Sex'],drop_first=True)\nembark = pd.get_dummies(train['Embarked'],drop_first=True)","b92d8b33":"train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)","273afbcc":"train = pd.concat([train,sex,embark],axis=1)","f3dfc4bd":"train.head()","0bf70c3e":"from sklearn.model_selection import train_test_split","4e48a60c":"X_train, X_test, y_train, y_test = train_test_split(train.drop('Survived',axis=1), \n                                                    train['Survived'], test_size=0.20, \n                                                    random_state=42)","803e8730":"from sklearn.linear_model import LogisticRegression\nLR = LogisticRegression()","06da6a9c":"# Fitting the model on our trained dataset.\nLR.fit(X_train,y_train)","2fe436b5":"\nprint(\"Accuracy:\",round(LR.score(X_train, y_train)*100,2))","806ea6e4":"LR.coef_","64cd738c":"features = ['Pclass', 'Sex', 'Age', 'Fare', 'Cabin', 'Embarked', 'Family_size']","96f76bcb":"coeff = pd.DataFrame(X_train.columns)\ncoeff.columns = ['Feature']\ncoeff[\"Correlation\"] = pd.Series(LR.coef_[0])\n\ncoeff.sort_values(by='Correlation', ascending=True)","a7cefffd":"plt.figure(figsize=(8,5))\nsns.barplot('Correlation','Feature',data=coeff,palette='magma')","74073f25":"from sklearn.model_selection import train_test_split","857b3b18":"X_train, X_test, y_train, y_test = train_test_split(train.drop('Survived',axis=1), \n                                                    train['Survived'], test_size=0.20, \n                                                    random_state=42)","79bcd6e7":"X = train.drop('Survived',axis=1)\ny = train['Survived']","bbfb78e1":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)","eac72a8a":"from sklearn.tree import DecisionTreeClassifier","9c4412f1":"dtree = DecisionTreeClassifier()","68206b68":"dtree.fit(X_train,y_train)","12de6bf5":"predictions = dtree.predict(X_test)","0243488a":"from sklearn.metrics import classification_report,confusion_matrix","9a552eba":"print(classification_report(y_test,predictions))","51a84669":"print(confusion_matrix(y_test,predictions))","abaa0a1c":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train, y_train)","b786007c":"rfc_pred = rfc.predict(X_test)","ddde1775":"print(confusion_matrix(y_test,rfc_pred))","3bf6f5f8":"print(classification_report(y_test,rfc_pred))","2211426a":"from sklearn.preprocessing import StandardScaler","257b4eef":"Scaler=StandardScaler()","836d8472":"Scaler.fit(train.drop('Survived',axis=1))","6c582909":"scaled_features=Scaler.transform(train.drop('Survived',axis=1))","afed4d68":"scaled_features","d3297f19":"train.head()","202e3886":"from sklearn.model_selection import train_test_split","a22c4057":"X = train.drop('Survived',axis=1)\ny = train['Survived']","5af2fd25":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","58ed9f98":"from sklearn.neighbors import KNeighborsClassifier","5bddd5c8":"knn=KNeighborsClassifier(n_neighbors=1)","3e52267e":"knn.fit(X_train,y_train)","4d4a8ec0":"pred=knn.predict(X_test)","b73fba2c":"pred","8285a65b":"from sklearn.metrics import classification_report,confusion_matrix","28def0de":"print(classification_report(y_test,pred))","b1d092a5":"print(confusion_matrix(y_test,pred))","5488bbcd":"error_rate=[]","d4077578":"for i in range(1,40):\n    knn=KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i=knn.predict(X_test)\n    error_rate.append(np.mean(pred_i!=y_test))","4ed6ed84":"plt.plot(range(1,40),error_rate,color='blue',linestyle='dashed',marker='o',markerfacecolor='red',markersize=10)\nplt.title('Error rate vs K value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')\nplt.tight_layout()","ffade412":"knn=KNeighborsClassifier(n_neighbors=35)\nknn.fit(X_train,y_train)\npred=knn.predict(X_test)\nprint(classification_report(y_test,pred))\nprint('\\n')\nprint(confusion_matrix(y_test,pred))","c4adebc7":"# Converting Categorical Features.  ","59855317":"# Train-test split","878489ea":"# K Nearest Neighbors","d8777afd":"# Feature Importance","073cf218":"# Random Forrest Classifier","355fe7f9":"# Using Elbow Method","460c84af":"# Decision Tree classifier"}}