{"cell_type":{"e93b8357":"code","d1bb26fc":"code","c3eb7440":"code","aab63033":"code","375bf394":"code","6c776e10":"code","f28fd113":"code","8122ef1c":"code","41248a68":"code","edfb9c37":"code","f46a0704":"code","da81504d":"code","d8cbab77":"code","8afd9e11":"code","e8661ec7":"code","e5857ef6":"code","2bf1b266":"code","ef354e8a":"code","b08969c0":"code","2be553ef":"code","9b5aa395":"code","3e0f3559":"code","01e28cd0":"code","f9d55669":"code","87a21811":"code","3569de1d":"code","d8313deb":"code","c68ba5c6":"code","24d2095c":"code","988baca1":"code","a784c7ae":"code","90bcf2b0":"code","dbfb7a87":"code","ffa9feda":"code","138491ff":"code","492a1895":"code","6f8095bf":"code","db0876ab":"code","73febe26":"code","19e14d3f":"code","46d6cfdf":"code","bca3992a":"code","4a5e5432":"code","deb5a57d":"code","327997c1":"code","ce4f894b":"code","22777738":"code","cb6ed7d5":"code","414b476c":"code","663c4f54":"code","59bafd7b":"code","3a98cbde":"code","0427e5a6":"code","2bb21b07":"code","83499f9a":"code","2e78ed12":"code","b41d11e4":"code","ab48e6ad":"code","1a57a0d4":"code","985601b1":"code","244d7829":"code","f9e2e98b":"code","58c4a947":"code","c0f87c65":"code","b41eef58":"code","3f509a7d":"code","7573e325":"code","2d1ce3f8":"code","7d8f2906":"code","2ced7a80":"code","6ab398e7":"code","46190661":"code","f2514451":"code","d7d5dcea":"code","7c82f6fb":"code","7034cdb2":"code","186ca561":"code","171b75b7":"code","bb983329":"code","3ca9cff5":"code","17c7502f":"code","79f0b37a":"code","147ba194":"code","3dd22b6d":"code","788674fc":"code","b92860fd":"code","38428e07":"code","c4ab298d":"code","e366b5e9":"code","87c04df5":"code","e8f276c4":"code","c84b17e2":"code","db919fee":"markdown","b029d08f":"markdown","da6c4f46":"markdown","05362cfc":"markdown","87d5fb7a":"markdown","1d32a690":"markdown","4d51b141":"markdown","5aba790b":"markdown","858493e6":"markdown","e6648fbd":"markdown","c04bd860":"markdown","5bb945ac":"markdown","4f816c6a":"markdown","53762ca4":"markdown","478458ba":"markdown","e1f4f0b6":"markdown","cfe455df":"markdown","2624af65":"markdown","4cd9749c":"markdown","4c996c59":"markdown","0cd45e19":"markdown","607530f1":"markdown","79bb6f0d":"markdown","648244d3":"markdown","70051ad4":"markdown","068d382b":"markdown","e407c233":"markdown","f04e871d":"markdown","f48b4e86":"markdown","a4cffcdd":"markdown","b1f076f6":"markdown","be49a734":"markdown","f0503c67":"markdown","7d30aa1a":"markdown","e0573955":"markdown","14b0081a":"markdown","d05cd607":"markdown","216e93c7":"markdown","e60ab323":"markdown","2b5c6c60":"markdown","fc0c31cd":"markdown","830ecd72":"markdown","6b683ca8":"markdown","1d789829":"markdown","ade50aaf":"markdown","4491dcad":"markdown","4d290d0e":"markdown","270a6eea":"markdown","75e4275a":"markdown","88f02f51":"markdown","45d2154d":"markdown","de26c827":"markdown","548f9493":"markdown","81be5f93":"markdown","5082c109":"markdown","742cd72c":"markdown","3121df6d":"markdown","9b988baf":"markdown","0d6740c6":"markdown","66db163c":"markdown","5664fe73":"markdown","352d6f95":"markdown","cd5bf408":"markdown","1c782d43":"markdown","1eb6d0a4":"markdown","00ccca13":"markdown","c81eb525":"markdown","089ab2ac":"markdown","75944d71":"markdown","79b18f4e":"markdown","604b7ad3":"markdown","fcc4fc13":"markdown","56337f76":"markdown","542cfc7d":"markdown","73f1dcf1":"markdown","0276764b":"markdown","afc50c5f":"markdown","6936bc65":"markdown","4ad405a6":"markdown","4e91be9a":"markdown","6c48b24e":"markdown","c32c8437":"markdown","1c8dab1b":"markdown","f91c7187":"markdown"},"source":{"e93b8357":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split","d1bb26fc":"#Download dataset\nraw_data = pd.read_csv('..\/input\/league-of-legends-diamond-ranked-games-10-min\/high_diamond_ranked_10min.csv')\nraw_data.head()","c3eb7440":"raw_data.columns","aab63033":"raw_data.info()","375bf394":"#Let's display all the distributions for the blue side only\nblue_side_columns = []\nfor col in raw_data.columns:\n       if \"blue\" in col:\n              blue_side_columns.append(col)","6c776e10":"#Let's create the dataset for blue side only\nblue_data = raw_data[blue_side_columns]","f28fd113":"blue_data.head()","8122ef1c":"#describe as a df to visualize all the data\ndescribe_blue = blue_data.describe()","41248a68":"### PAS UTILE\n# #Target\n# Target = blue_data['blueWins']\n# #Numerical and Categorical data are separated\n# Numerical_blue = ['blueWardsPlaced', 'blueWardsDestroyed','blueKills','blueDeaths','blueDeaths','blueAssists','blueEliteMonsters','blueTowersDestroyed','blueTotalGold', 'blueAvgLevel','blueTotalExperience', 'blueTotalMinionsKilled', 'blueTotalJungleMinionsKilled', 'blueGoldDiff', 'blueExperienceDiff', 'blueCSPerMin', 'blueGoldPerMin']\n# Categorical_blue = ['blueFirstBlood', 'blueDragons', 'blueHeralds']","edfb9c37":"#Correlations\nplt.figure(figsize=(12, 10))\nsns.heatmap(blue_data.drop(\"blueWins\",axis=1).corr(),cmap='vlag', annot=True, fmt='.2f', vmin=-1)","f46a0704":"#The new Dataframe\nblue_data_cleaned = blue_data.copy()","da81504d":"#Assists & Kills\nblue_data_cleaned['KA'] = blue_data_cleaned['blueAssists'] + blue_data_cleaned['blueKills']\nblue_data_cleaned = blue_data_cleaned.drop(['blueAssists','blueKills'],axis=1)","d8cbab77":"blue_data_cleaned.head()","8afd9e11":"#Extraction of Gold columns\nGold = []\nfor column in list(blue_data_cleaned.columns):\n    if 'Gold' in column:\n        Gold.append(column)\nGold","e8661ec7":"blue_data_cleaned = blue_data_cleaned.drop(Gold,axis=1)","e5857ef6":"blue_data_cleaned.columns","2bf1b266":"blue_data_cleaned = blue_data_cleaned.drop(['blueEliteMonsters'],axis=1)","ef354e8a":"Experience = []\nfor column in list(blue_data_cleaned.columns):\n    if 'Experience' in column:\n        Experience.append(column)\nExperience","b08969c0":"blue_data_cleaned = blue_data_cleaned.drop(Experience,axis=1)","2be553ef":"blue_data_cleaned = blue_data_cleaned.drop(['blueCSPerMin'],axis=1)","9b5aa395":"plt.figure(figsize=(12, 10))\nsns.heatmap(blue_data_cleaned.drop(\"blueWins\",axis=1).corr(),cmap='vlag', annot=True, fmt='.2f', vmin=-1)","3e0f3559":"#Copy\nblue_no_outliers = blue_data_cleaned.copy()","01e28cd0":"sns.displot(blue_no_outliers['blueWardsPlaced'],kind=\"ecdf\")","f9d55669":"#Remove everything above 99%\nblue_no_outliers = blue_no_outliers.loc[blue_no_outliers['blueWardsPlaced'] <= np.quantile(blue_no_outliers['blueWardsPlaced'],q=0.99)]","87a21811":"print(\"We've just removed {} games considering Wards Placed outliers\".format(raw_data.shape[0] - blue_no_outliers.shape[0]))","3569de1d":"sns.displot(blue_no_outliers['blueWardsDestroyed'],kind=\"ecdf\")","d8313deb":"#Remove everything above 99%\nblue_no_outliers = blue_no_outliers.loc[blue_no_outliers['blueWardsDestroyed'] <= np.quantile(blue_no_outliers['blueWardsDestroyed'],q=0.99)]","c68ba5c6":"sns.displot(blue_no_outliers['blueDeaths'],kind=\"ecdf\")","24d2095c":"#Remove everything above 99%\nblue_no_outliers = blue_no_outliers.loc[blue_no_outliers['blueDeaths'] <= np.quantile(blue_no_outliers['blueDeaths'],q=0.99)]","988baca1":"sns.displot(blue_no_outliers['blueTowersDestroyed'],kind=\"ecdf\")","a784c7ae":"sns.displot(blue_no_outliers['KA'],kind=\"ecdf\")","90bcf2b0":"#Remove everything above 99%\nblue_no_outliers = blue_no_outliers.loc[blue_no_outliers['KA'] <= np.quantile(blue_no_outliers['KA'],q=0.99)]","dbfb7a87":"print(\"We have removed {} rows from the inital dataset\".format(raw_data.shape[0] - blue_no_outliers.shape[0]))","ffa9feda":"#Save\nblue_balanced = blue_no_outliers.copy()","138491ff":"print(\"In this current Dataset, there is {0:.3f}% of won games\".format(\n    blue_balanced['blueWins'].sum() \/ blue_balanced['blueWins'].shape[0]\n    )\n)","492a1895":"#Save\nblue_data_scaled = blue_balanced.copy()","6f8095bf":"#Target\nblue_target = blue_balanced['blueWins']","db0876ab":"#Features\nblue_features = blue_balanced.drop(['blueWins'],axis=1)","73febe26":"scaler = StandardScaler()\nscaler.fit(blue_features)\n\nblue_features_scaled = scaler.transform(blue_features)","19e14d3f":"blue_features_scaled.mean(axis=0)","46d6cfdf":"blue_features_scaled.std(axis=0)","bca3992a":"x_train, x_test, y_train, y_test = train_test_split(blue_features_scaled,blue_target, random_state=42, test_size=0.10)","4a5e5432":"#Training\n#We take all the dataset to calculate the Weight of each feature\nlogReg = LogisticRegression()\nlogReg.fit(blue_features_scaled,blue_target)","deb5a57d":"#Accuracy\nlogReg.score(blue_features_scaled,blue_target)","327997c1":"blue_weights = pd.DataFrame()\nblue_weights['Features'] = blue_features.columns\nblue_weights['Weights'] = logReg.coef_.reshape(11,1)\n","ce4f894b":"blue_weights.sort_values(by='Weights',ascending=False)\n","22777738":"#Let's take the data cleaned without outliers\nblue_data_wards = blue_no_outliers.copy()","cb6ed7d5":"#scatter \nplt.scatter(x=blue_data_wards['blueWardsPlaced'],y=blue_data_wards['blueWins'])","414b476c":"#Warding histogram\nsns.displot(blue_data_wards,x='blueWardsPlaced',hue='blueWins')","663c4f54":"#Wards destroyed histogram\nsns.displot(data=blue_data_wards,x='blueWardsDestroyed',hue='blueWins')","59bafd7b":"median_wards_placed = np.median(blue_data_wards['blueWardsPlaced'])\nmedian_wards_destroyed = np.median(blue_data_wards['blueWardsDestroyed'])\nprint(\"The median of placed wards is {}\".format(median_wards_placed) )\nprint(\"The median of destroyed wards is {}\".format(median_wards_destroyed))","3a98cbde":"blue_data_wards['Placed Wards'] = blue_data_wards['blueWardsPlaced'].apply(lambda x: 1 if x> median_wards_placed else 0)\nblue_data_wards['Destroyed Wards'] = blue_data_wards['blueWardsDestroyed'].apply(lambda x: 1 if x > median_wards_destroyed else 0 )","0427e5a6":"print(blue_data_wards.loc[blue_data_wards[\"Destroyed Wards\"]==1]['blueWins'].sum())\nprint(blue_data_wards.loc[blue_data_wards[\"Destroyed Wards\"]==0]['blueWins'].sum())","2bb21b07":"#% won games depending on placed wards\nblue_highWardsPlaced = blue_data_wards.loc[blue_data_wards[\"Placed Wards\"]==1][\"blueWins\"].sum() \/ blue_data_wards.loc[blue_data_wards[\"Placed Wards\"]==1].shape[0]\nblue_lowWardsPlaced =  blue_data_wards.loc[blue_data_wards[\"Placed Wards\"]==0][\"blueWins\"].sum() \/ blue_data_wards.loc[blue_data_wards[\"Placed Wards\"]==0].shape[0]\nprint(\"% won games considering high warding team : {0:.02f}%\".format(blue_highWardsPlaced*100))\nprint(\"% won games considering low warding team : {0:.02f}%\".format(blue_lowWardsPlaced*100)) ","83499f9a":"#%won game depending on destroyed wards\nblue_highWardsDestroyed = blue_data_wards.loc[blue_data_wards[\"Destroyed Wards\"]==1][\"blueWins\"].sum() \/ blue_data_wards.loc[blue_data_wards[\"Destroyed Wards\"]==1].shape[0]\nblue_lowWardsDestroyed = blue_data_wards.loc[blue_data_wards[\"Destroyed Wards\"]==0][\"blueWins\"].sum() \/ blue_data_wards.loc[blue_data_wards[\"Destroyed Wards\"]==0].shape[0]\nprint(\"% won games considering high wards destroying team : {0:.02f}%\".format(blue_highWardsDestroyed*100))\nprint(\"% won games considering low wards destroying team : {0:.02f}%\".format(blue_lowWardsPlaced*100)) ","2e78ed12":"blue_data_epic_monsters = blue_no_outliers.copy()","b41d11e4":"blue_data_epic_monsters.columns","ab48e6ad":"#Let's calculate the % of wins regarding the number of drakes and herald taken\nsns.displot(data=blue_data_epic_monsters,x='blueDragons',hue='blueWins')","1a57a0d4":"sns.displot(data=blue_data_epic_monsters,x='blueHeralds',hue='blueWins')","985601b1":"#Let's calculate the % of wins depending of epic monsters taken before 10 min\nblueDragons0 = blue_data_epic_monsters.loc[blue_data_epic_monsters['blueDragons']==0]['blueWins'].sum() \/ blue_data_epic_monsters.loc[blue_data_epic_monsters['blueDragons']==0].shape[0]\nblueDragons1 = blue_data_epic_monsters.loc[blue_data_epic_monsters['blueDragons']==1]['blueWins'].sum() \/ blue_data_epic_monsters.loc[blue_data_epic_monsters['blueDragons']==1].shape[0]\nblueHeralds0 = blue_data_epic_monsters.loc[blue_data_epic_monsters['blueHeralds']==0]['blueWins'].sum() \/ blue_data_epic_monsters.loc[blue_data_epic_monsters['blueHeralds']==0].shape[0]\nblueHeralds1 = blue_data_epic_monsters.loc[blue_data_epic_monsters['blueHeralds']==1]['blueWins'].sum() \/ blue_data_epic_monsters.loc[blue_data_epic_monsters['blueHeralds']==1].shape[0]\n\nprint(blueDragons0,blueDragons1,blueHeralds0,blueHeralds1)","244d7829":"#%win depending of number of dragon taken\nsns.catplot(data=blue_data_epic_monsters,kind='bar',x='blueDragons',y='blueWins')","f9e2e98b":"#%win depending of number of herald taken\nsns.catplot(data=blue_data_epic_monsters,kind='bar',x='blueHeralds',y='blueWins')","58c4a947":"#Condition Herald=1 Dragon=1\nblueDragonHerald = blue_data_epic_monsters.loc[(blue_data_epic_monsters['blueDragons']==1) & (blue_data_epic_monsters['blueHeralds']==1),'blueWins'].sum() \/ blue_data_epic_monsters.loc[(blue_data_epic_monsters['blueDragons']==1) & (blue_data_epic_monsters['blueHeralds']==1),'blueWins'].shape[0]","c0f87c65":"print(\"Getting the first drake and herald increase the % of victory to {0:.01f}%\".format(blueDragonHerald*100))","b41eef58":"blue_data_turrets = blue_no_outliers.copy()","3f509a7d":"blue_data_turrets.columns","7573e325":"#Distribution\nsns.displot(data = blue_data_turrets, x='blueTowersDestroyed',hue='blueWins')","2d1ce3f8":"#Unique value\nblue_data_turrets['blueTowersDestroyed'].value_counts()","7d8f2906":"#Victory %\nblue_destroyedTurretVictory0 = blue_data_turrets.loc[blue_data_turrets[\"blueTowersDestroyed\"] == 0,\"blueWins\"].sum() \/ blue_data_turrets.loc[blue_data_turrets[\"blueTowersDestroyed\"] == 0,\"blueWins\"].shape[0]\nblue_destroyedTurretVictory1 = blue_data_turrets.loc[blue_data_turrets[\"blueTowersDestroyed\"] == 1,\"blueWins\"].sum() \/ blue_data_turrets.loc[blue_data_turrets[\"blueTowersDestroyed\"] == 1,\"blueWins\"].shape[0]\nblue_destroyedTurretVictory2 = blue_data_turrets.loc[blue_data_turrets[\"blueTowersDestroyed\"] == 2,\"blueWins\"].sum() \/ blue_data_turrets.loc[blue_data_turrets[\"blueTowersDestroyed\"] == 2,\"blueWins\"].shape[0]\n\nprint(\"The probability to win with 0 turrets at 10min is {0:.1f}%\".format(blue_destroyedTurretVictory0*100))\nprint(\"The probability to win with 1 turrets at 10min is {0:.1f}%\".format(blue_destroyedTurretVictory1*100))\nprint(\"The probability to win with 2 turrets at 10min is {0:.1f}%\".format(blue_destroyedTurretVictory2*100))\n","2ced7a80":"blue_data_first_blood = blue_no_outliers.copy()","6ab398e7":"blue_first_blood_victory = blue_data_first_blood.loc[blue_data_first_blood[\"blueFirstBlood\"]==1,\"blueWins\"].sum() \/ blue_data_first_blood.loc[blue_data_first_blood[\"blueFirstBlood\"]==1].shape[0]\n\nprint(\"The probability of the blue team to win if they got First Blood is about {0:.02f}%\".format(blue_first_blood_victory*100))","46190661":"red_columns = []\nfor col in raw_data.columns:\n    if 'red' in col:\n        red_columns.append(col)","f2514451":"red_columns","d7d5dcea":"#Build the dataset with features and target\ndata_red_side = raw_data[red_columns]\ndata_red_side.head()","7c82f6fb":"#For the target, because it is the blue side, 1 => 0 & 0 => 1\ndata_red_side[\"redWins\"] = raw_data['blueWins'].map({1:0,0:1})\ndata_red_side.head()","7034cdb2":"#We create the dataset for the features we picked and the target\nred_features = [\"redWardsPlaced\",\"redWardsDestroyed\",\"redFirstBlood\",\"redDragons\",\"redHeralds\",'redTowersDestroyed','redWins']\ndata_red_relevant_features_only = data_red_side[red_features]\n#We add the target to this new df\n# data_red_relevant_features_only[\"redWins\"] = data_red_side['redWins']\ndata_red_relevant_features_only.head()","186ca561":"#Shape\ndata_red_relevant_features_only.shape","171b75b7":"#Quantiles for Warding columns\nred_quantiles = []\nfor col in red_features:\n    if \"Wards\" in col:\n        red_quantiles.append(data_red_relevant_features_only[col].quantile(q=0.99))\nred_quantiles\n","bb983329":"#Remove everything above quantiles\ndata_red_cleaned = data_red_relevant_features_only.loc[data_red_relevant_features_only[\"redWardsPlaced\"]<=red_quantiles[0]]\ndata_red_cleaned = data_red_relevant_features_only.loc[data_red_relevant_features_only['redWardsDestroyed']<=red_quantiles[1]]\nprint(\"We removed {} rows from the original dataset considering warding only\".format(data_red_relevant_features_only.shape[0] - data_red_cleaned.shape[0]))","3ca9cff5":"data_red_cleaned","17c7502f":"#FirstBlood\nred_first_blood_victory = data_red_cleaned.loc[data_red_cleaned[\"redFirstBlood\"]==1,\"redWins\"].sum() \/ data_red_cleaned.loc[data_red_cleaned[\"redFirstBlood\"]==1].shape[0]\nprint(\"The probability of the red team to win if they got First Blood is about {0:.02f}%\".format(red_first_blood_victory*100))\n\nprint(\"-----------------------------\")\n\n#Turret destroyed\nred_DestroyedTurretVictory0 = data_red_cleaned.loc[data_red_cleaned[\"redTowersDestroyed\"] == 0,\"redWins\"].sum() \/ data_red_cleaned.loc[data_red_cleaned[\"redTowersDestroyed\"] == 0,\"redWins\"].shape[0]\nred_DestroyedTurretVictory1 = data_red_cleaned.loc[data_red_cleaned[\"redTowersDestroyed\"] == 1,\"redWins\"].sum() \/ data_red_cleaned.loc[data_red_cleaned[\"redTowersDestroyed\"] == 1,\"redWins\"].shape[0]\nred_DestroyedTurretVictory2 = data_red_cleaned.loc[data_red_cleaned[\"redTowersDestroyed\"] == 2,\"redWins\"].sum() \/ data_red_cleaned.loc[data_red_cleaned[\"redTowersDestroyed\"] == 2,\"redWins\"].shape[0]\nprint(\"The probability to win with 0 turrets at 10min is {0:.1f}%\".format(red_DestroyedTurretVictory0*100))\nprint(\"The probability to win with 1 turrets at 10min is {0:.1f}%\".format(red_DestroyedTurretVictory1*100))\nprint(\"The probability to win with 2 turrets at 10min is {0:.1f}%\".format(red_DestroyedTurretVictory2*100))\n\nprint(\"-----------------------------\")\n\n#Epic monsters\nred_Dragons0 = data_red_cleaned.loc[data_red_cleaned['redDragons']==0]['redWins'].sum() \/ data_red_cleaned.loc[data_red_cleaned['redDragons']==0].shape[0]\nred_Dragons1 = data_red_cleaned.loc[data_red_cleaned['redDragons']==1]['redWins'].sum() \/ data_red_cleaned.loc[data_red_cleaned['redDragons']==1].shape[0]\nred_Heralds0 = data_red_cleaned.loc[data_red_cleaned['redHeralds']==0]['redWins'].sum() \/ data_red_cleaned.loc[data_red_cleaned['redHeralds']==0].shape[0]\nred_Heralds1 = data_red_cleaned.loc[data_red_cleaned['redHeralds']==1]['redWins'].sum() \/ data_red_cleaned.loc[data_red_cleaned['redHeralds']==1].shape[0]\nred_DragonHerald = data_red_cleaned.loc[(data_red_cleaned['redDragons']==1) & (data_red_cleaned['redHeralds']==1),'redWins'].sum() \/ data_red_cleaned.loc[(data_red_cleaned['redDragons']==1) & (data_red_cleaned['redHeralds']==1),'redWins'].shape[0]\nprint(\"The probability to win with 0 drake at 10min is {0:.01f}%\".format(red_Dragons0*100))\nprint(\"The probability to win with 1 drake at 10min is {0:.01f}%\".format(red_Dragons1*100))\nprint(\"The probability to win with 0 herald at 10min is {0:.01f}%\".format(red_Heralds0*100))\nprint(\"The probability to win with 1 herald at 10min is {0:.01f}%\".format(red_Heralds1*100))\nprint(\"The probability to win with 1 drake and 1 herald at 10min is {0:.01f}%\".format(red_DragonHerald*100))\n\nprint(\"-----------------------------\")\n\n#Warding\nred_median_wards_placed = np.median(data_red_cleaned['redWardsPlaced'])\nred_median_wards_destroyed = np.median(data_red_cleaned['redWardsDestroyed'])\nprint(\"The median of placed wards is {}\".format(red_median_wards_placed) )\nprint(\"The median of destroyed wards is {}\".format(red_median_wards_destroyed))    \n\ndata_red_cleaned['Placed Wards'] = data_red_cleaned['redWardsPlaced'].apply(lambda x: 1 if x> red_median_wards_placed else 0)\ndata_red_cleaned['Destroyed Wards'] = data_red_cleaned['redWardsDestroyed'].apply(lambda x: 1 if x > red_median_wards_destroyed else 0 )\n\nred_highWardsPlaced = data_red_cleaned.loc[data_red_cleaned[\"Placed Wards\"]==1][\"redWins\"].sum() \/ data_red_cleaned.loc[data_red_cleaned[\"Placed Wards\"]==1].shape[0]\nred_lowWardsPlaced= data_red_cleaned.loc[data_red_cleaned[\"Placed Wards\"]==0][\"redWins\"].sum() \/ data_red_cleaned.loc[data_red_cleaned[\"Placed Wards\"]==0].shape[0]\nred_highWardsDestroyed =  data_red_cleaned.loc[data_red_cleaned[\"Destroyed Wards\"]==1][\"redWins\"].sum() \/ data_red_cleaned.loc[data_red_cleaned[\"Destroyed Wards\"]==1].shape[0]  \nred_lowWardsDestroyed = data_red_cleaned.loc[data_red_cleaned[\"Destroyed Wards\"]==0][\"redWins\"].sum() \/ data_red_cleaned.loc[data_red_cleaned[\"Destroyed Wards\"]==0].shape[0]\n\n#% won games depending on placed wards\nprint(\"% won games considering high warding team : {0:.01f}%\".format(red_highWardsPlaced*100))\nprint(\"% won games considering low warding team : {0:.01f}%\".format(red_lowWardsPlaced*100))\n#%won game depending on destroyed wards\nprint(\"% won games considering high wards destroying team : {0:.01f}%\".format(red_highWardsDestroyed*100))\nprint(\"% won games considering low wards destroying team : {0:.01f}%\".format(red_lowWardsDestroyed*100)) \n","79f0b37a":"#Red side\n#We multiply by 100 to get %\nred_victoryRate = np.array([red_first_blood_victory,\n    red_DestroyedTurretVictory0,\n    red_DestroyedTurretVictory1,\n    red_DestroyedTurretVictory2,\n    red_Dragons0,\n    red_Dragons1,\n    red_Heralds0,\n    red_Heralds1,\n    red_DragonHerald,\n    red_highWardsPlaced,\n    red_lowWardsPlaced,\n    red_highWardsDestroyed,\n    red_lowWardsDestroyed\n    ])*100  \n\nred_victoryRate","147ba194":"#Blue side\n#We multiply by 100 to get %\nblue_victoryRate = np.array([blue_first_blood_victory,\n    blue_destroyedTurretVictory0,\n    blue_destroyedTurretVictory1,\n    blue_destroyedTurretVictory2,\n    blueDragons0,\n    blueDragons1,\n    blueHeralds0,\n    blueHeralds1,\n    blueDragonHerald,\n    blue_highWardsPlaced,\n    blue_lowWardsPlaced,\n    blue_highWardsDestroyed,\n    blue_lowWardsDestroyed\n    ])*100\n\nblue_victoryRate","3dd22b6d":"#Dataframe\nindex_features = ['FirstBlood','0 Turret Destroyed','1 Turret Destroyed','2 Turrets Destroyed', '0 Dragon', '1 Dragon','0 Herald', \"1 Herald\", \"Dragon & Herald\", \"High warding\", \"Low warding\", \"High wards destroying\",'Low wards destroying'] \nVictoryRate_BlueRed = pd.DataFrame(index=index_features,)\n\nVictoryRate_BlueRed[\"Blue\"] = np.round(blue_victoryRate,1)\nVictoryRate_BlueRed['Red'] = np.round(red_victoryRate,1)\n\n#Sort based on Blue Stats\n\n\nVictoryRate_BlueRed","788674fc":"VictoryRate_BlueRed.sort_values(by=\"Blue\",ascending=False)","b92860fd":"#Plot\nlabels = index_features\nBlue = VictoryRate_BlueRed['Blue']\nRed = VictoryRate_BlueRed['Red']\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(22, 7))\nrects1 = ax.bar(x - width\/2, Blue, width, label='Blue')\nrects2 = ax.bar(x + width\/2, Red, width, label='Red')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Win rates')\nax.set_title('Win rates depending on the side')\nax.set_xticks(x, labels)\nax.legend()\n\nax.bar_label(rects1, padding=3)\nax.bar_label(rects2, padding=3)\n\nfig.tight_layout()\n\nplt.show()\n","38428e07":"#Let's check red turrets 2 (75.9% seems vey low)\ndata_red_cleaned.loc[data_red_cleaned['redTowersDestroyed']==2,\"redWins\"].value_counts()\n","c4ab298d":"blue_data_cleaned.loc[(blue_data_cleaned[ 'blueTowersDestroyed']==2) , \"blueWins\"].value_counts()","e366b5e9":"data_red_cleaned.shape[0]","87c04df5":"#Let's drop 2 turrets destroyed\nVictoryRate_BlueRed = VictoryRate_BlueRed.drop(labels=['2 Turrets Destroyed'],axis=0)\nindex_features.remove('2 Turrets Destroyed')","e8f276c4":"#Plot\nlabels = index_features\nBlue = VictoryRate_BlueRed['Blue']\nRed = VictoryRate_BlueRed['Red']\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(22, 7))\nrects1 = ax.bar(x - width\/2, Blue, width, label='Blue')\nrects2 = ax.bar(x + width\/2, Red, width, label='Red')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Win rates')\nax.set_title('Win rates depending on the side')\nax.set_xticks(x, labels)\nax.legend()\n\nax.bar_label(rects1, padding=3)\nax.bar_label(rects2, padding=3)\n\nfig.tight_layout()\n\nplt.show()\n","c84b17e2":"data_red_cleaned.loc[(data_red_cleaned[\"redDragons\"]==1) & (data_red_cleaned['redHeralds']==1),\"redWins\"].value_counts()","db919fee":"## Correlations <a id=\"31\"><\/a>","b029d08f":"# Contents\n\n* [<font size=4>1. Libraries<\/font>](#1)\n* [<font size=4>2. First exploratory of the dataset<\/font>](#2)\n* [<font size=4>3. Preparation for the Regression Analysis<\/font>](#3)\n* [<font size=4>4. Logistic Regression analysis<\/font>](#4)\n* [<font size=4>5. Deeper analysis<\/font>](#5)\n* [<font size=4>6. Red side<\/font>](#6)\n* [<font size=4>7. Comparaison between Red and Blue side](#7)\n* [<font size=4>8. General conclusions<\/font>](#8)\n* [<font size=4>9. Personnal note<\/font>](#9)\n* [<font size=4>10. Aknowledgment<\/font>](#10)","da6c4f46":"As we can see, \n* getting the first drake leads to a 64% chance of winning\n* getting the first herald leads to a 59% chance of winning\n* getting both leads to a % of victory of 73.4%\n\nTherefore, drake should be prioritize between epic monsters.  \nTo secure it, it should be good to pick champions in midlane and botlane who can get priority more constitently.  \n\nHypothesis :\nDrake is not what creates lead, but fights around this objective lead to kills therefore huge advantages (as we can see in the weights list)\n\n\n","05362cfc":"### blue Deaths","87d5fb7a":"### Gold & Experience\nGold, Experience & Kill\/Assits are highly correlated with the win of the team which gets more.  \nThe more gold a team has, the more items they can buy, increasing significantly their stats.  \nLevels, obtained with experience, attribute also a lot of stats for each champion. The higher the level, the stronger the champion is.\n\nHowever, for our study, we are far more interested by which decision we have to take before 10min to increase the probability to win at the end of the game.","1d32a690":"The dataset is divided into two sections : Blue & Red","4d51b141":"We note an outlier for \"blueWardsPlaced\" : max=250, which is theoricaly impossible","5aba790b":"## Correction & Verification <a id='72'><\/a>","858493e6":"## Weights <a id=\"44\"><\/a>","e6648fbd":"### Weird difference between Blue & Red for 2 turrets destroyed\nThere's a large gap for 2 turrets destroyed.  \nLet's check the difference between blue and red when 2 turrets are down.","c04bd860":"## Prepare the data <a id='61'><\/a>","5bb945ac":"<img src=\"https:\/\/i.postimg.cc\/1R2d17XR\/logo-800-47024e2aeaaa8651c172ba883264dd43.png\" alt=\"Italian Trulli\">","4f816c6a":"### Check the correlation in the cleaned Data","53762ca4":"### Gold columns dropped\n","478458ba":"We see that in some games, blue players has placed a lot of wards (more than 100 below 10min, which is not usual in a normal game).  \nSometimes, players decide to not play anymore because they judge the game as already lost. So it is likely they place wards in base or whatever waiting for the game to end.  \n\nFor this reason, let's remove everything above 99% ","e1f4f0b6":"Now we have studied the blue side statistics, we are going to study red side.  \nTo do so, we are going to focus on % of victory for this side by taking into account relevant features as we have done previously for the blue side :\n* First Blood\n* Turrets destroyed\n* Epic monsters\n* Warding (destroyed and placed)\n\nTo do so, we have to prepare the dataset :\n* blue only (list above) + target\n* drop everything not used\n* outliers\n* % victory","cfe455df":"### blue Tower Destroyed","2624af65":"In this notebook, we will focus on the following question : \n\n*Which in-game decisions before 10 min are the most relevant to win the game ?*\n\nTo do so :\n\n* We focus on Blue side only, at first.\n* We explore the dataset to see some patterns and correlations between features.\n* In order to expose the influence of features on the win, we develop a logistic regression and estimate the weight of each relevant feature.\n    * To do so, we calculate the correlation coefficient for each pair.\n    * We remove or adapt features to avoid correlation for the logistic regression.\n    * We remove outliers from remaining features.\n    * We estimate weights and do some observations.\n* Then, we calculate the % of victory considering each feature.\n* We do the same for Red side.\n* We conclude on this project.","4cd9749c":"# Logistic regression analysis ","4c996c59":"### Assists & Kills","0cd45e19":"# Deeper analysis <a id=\"5\"><\/a>","607530f1":"We obtain an accuracy of 71% which is relatively good.","79bb6f0d":"# Libraries <a id=\"1\"><\/a>","648244d3":"Obtaining First Blood gives a small advantage as we said previously, but also, getting killed this early in the game has huge consequences for the player. Because of his early death, he loses a ton of experience & gold because he is not farming (killing opposite minions).   \n\nIt is useful to note that levels gain at early stage is faster than later in the game. This fact makes critical the experience at early stage of the game. A first blood at the beginning can lead to a huge gap of level between the two players in the same lane.","70051ad4":"It appears that warding or destroying opponent wards before 10 min is not very relevant. However, vision is crucial in League of Legends games, but we could say that at 10min, fighting for vision doesn't lead significantly to more wins.","068d382b":"We note some outliers. \nWe will remove them if judged not relevant.\n* blueWardsPlaced\n* blueWardsDestroyed\n* blueDeath\n* blueTowerDestroyed\n* KA","e407c233":"I would like to aknowledge the following works where I get inspiration & speed up my project :\n* DR.PENGUIN - https:\/\/www.kaggle.com\/xiyuewang\/lol-how-to-win\n* MEHDI GASMI - https:\/\/www.kaggle.com\/servietsky\/league-of-legends-what-to-do-in-first-10-min\n\nI","f04e871d":"# Red side <a id='6'><\/a>","f48b4e86":"We note a lot of correlations between features.  \nWe'll consider a |correlation coefficient| > 0.5 as representative of a high correlation.  \n* blueAssists \/ blueKills : when a team do a kill before 10 min, it could be due to roaming, ganking, or kill at the botlane, leading to assists\n* blueDragon \/ blueEpicMonsters : Dragon are considered as an Epic Monster in the dataset\n* blueHerald \/ blueEpicMonsters : same  => blueDragon + blueHerald = blueEpicMonsters\n* blueTotalGolds \/ blueKills : killing a champion give at least 300g before 10 min, whereas it takes ~15cs to get the same amount\n* blueTotalGolds \/ blueAssists : because blueAssists \/ blueKills\n* blueAvgLevel \/ blueTotalGold : at 10min, the more gold you have, the more exp you have (killing minions or champions gives also lvl, in addition of giving gold)\n* blueTotalExperience \/ blueTotalGold : same\n* blueTotalExperience \/ blueaverageLevel : having experience leads to levels\n* blueTotalMinionsKilled \/ blueAvgLevel : killing minions gives experience, therefore gives level\n* blueTotalExperience \/ blueTotalMinionsKilled : same\n* blueGoldDiff \/ blueKills : killing enemy champions gives a lot of gold, increasing the difference of gold between teams\n* blueGoldDiff \/ blueDeath : on the opposite, being killed results in being late in term of gold\n* blueGoldDiff \/ blueAssits : Assist & kills are highly correlated\n* blueGoldDiff \/ blueTotalGold : the more gold you have, the more it is likely to have a gold diff\n* blueGoldDiff \/ blueAvgLevel : the more gold you have, the more you killed minions or champions, and so the more experience you'll get\n* blueGoldDiff \/ blueTotalExperience : same\n* blueExperienceDiff \/ blueKills : killing an enemy gives experience, but also deny the opponent getting experience because he has to wait for respawn and has to come in lane after.\n* blueExperienceDiff \/ blueDeath : same idea on the opposite\n* blueExperienceDiff \/ blueTotalGold : if you kill, you get a lot of gold and denying enemy gold and experience (from minions principaly)\n* blueExperienceDiff \/ blueAvgLevel : the higher the average level of the team, the likelier it is that blue Team leads the game in term of exp\n* blueExperienceDiff \/ blueTotalExperience : same\n* blueExperienceDiff \/ blueGoldDiff : same\n* blueCsPerMin \/ blueAvgLevel : killing minions (Creeps Score : CS) gives experience\n* blueCsPerMin \/ blueTotalExperience : same\n* blueCsPerMin \/ blueTotalMinionsKilled : correlation of 1 => logic\n* blueGoldPerMin \/ blueKills\n* blueGoldPerMin \/ blueAssits \n* blueGoldPerMin \/ blueTotalGold\n* blueGoldPerMin \/ blueAvgLevel\n* blueGoldPerMin \/ blueTotalExperience\n* blueGoldPerMin \/ blueTotalGold\n* blueGoldPerMin \/ blueGoldDiff\n* blueGoldPerMin \/ blueTotalExperience\n* blueGoldPerMin \/ blueExperienceDiff","a4cffcdd":"### Warding","b1f076f6":"### blueWardsDestroyed","be49a734":"### Let's check Dragon & Herald taken to see if they 're enough data to consider this win rate","f0503c67":"As we can see, warding leads to a small increase in the probability to win the game.","7d30aa1a":"## Compare Red & Blue sides <a id='7'><\/a>\nWe ensure that features are ordered the same way","e0573955":"### First turret destroyed","14b0081a":"In regards of these informations, we modify or drop some features :\n* Assits & Kills are added together\n* EliteMonsters is dropped : we already have this information with Dragon & Helder\n* Everything relative to gold is dropped, because a lot of actions in game allow player to earn gold. We will focus on which decisions has to be taken to result in a potential win. We could study the influence of gold later\n* Everything relative to experience will be dropped for the same reason\n* CsPerMin is dropped : before 10 min, it is not relevant. We keep TotalCS instead\n* We keep AvgLevel because of the relative low correlation with others features except gold we have removed","d05cd607":"## % Victory <a id='71'><\/a>","216e93c7":"It's ok !","e60ab323":"We will remove these outliers too because generally, when a team decides to give up, they're giving kills, leading to their defeat.  \nWe will remove these outliers to consider more fair games only.","2b5c6c60":"It seems that in general, getting epic monsters is the key for a fast victory, as well as First blood.\n\n### Epic Monsters\n* Getting epic monsters often leads to teamfight in the river to get it. Lanes around the objective (Top & Mid for Herald \/ Bot & Mid for Drake) gather to not let the enemy obtaining this objective. These fights generally lead to a side winning over the other side, causing deaths for the losing team. Therefore, as we explained previously, losing team gets a delay in xp & gold because of opponent minions getting killed by their own towers and minions. \n* Furthermore, winning or losing a teamfight at these objectives (herald & drake) is generally highly dependent on who moves first ! Champions on lanes can only move first if they have pushed the lane, which means killing all opposite minions and guiding their own under the enemy tower to get killed. In this way, they diminish the loss of xp & gold because the wave will \"bounce back\". If they don't push before moving, they could lose a ton of xp & gold, especially if they lose the teamfight.  \n* To conclude, picking champions who can push fast at early level (control mages generally) and thus controlling the lane (counter pick for instance) should be a good way to obtain lead before 10min safely. Broadly speaking, controling the wave (with any champ) should be the priority to increase the probability to win the game !\n\n### First blood\n* Getting the first kill of the game gives a huge advantage, by denying the opponent xp, gold, and giving 100 more gold for the killer.\n* Because xp is more important at the beginning of the game, killing the opponent early means taking a huge advantage, which will remain during the game.\n* It is important to notice that getting the kill could be dangerous, because it involves taking risks (losing the fight or being ganked at the same time). Compared to farming only and obtaining lane control, this decision is way more risky, and could easily cause a lose.\n","fc0c31cd":"### Experience","830ecd72":"## Observations <a id=\"45\"><\/a>","6b683ca8":"## Target balance <a id=\"34\"><\/a>\nIn order to create a relevant model, let's check if the target is well balanced between 0 & 1","1d789829":"**DATASET**\n\nThis dataset contains the first 10min. stats of approx. 10k ranked games (SOLO QUEUE) from a high ELO (DIAMOND I to MASTER). Players have roughly the same level.\n\nEach game is unique. The gameId can help you to fetch more attributes from the Riot API.\n\nThere are 19 features per team (38 in total) collected after 10min in-game. This includes kills, deaths, gold, experience, level\u2026\n\nThe column blueWins is the target value. A value of 1 means the blue team has won. 0 otherwise.\n\nThere is no missing value.\n\n<a href=\"https:\/\/www.kaggle.com\/bobbyscience\/league-of-legends-diamond-ranked-games-10-min\">Download Here<\/a>","ade50aaf":"What if the blue team get the drake and the herald before 10min","4491dcad":"## Standardization <a id=\"41\"><\/a>","4d290d0e":"## Cleaning for the logistic regression <a id=\"32\"><\/a>","270a6eea":"Destroying the first turret in the game increases significantly the probability to win.  \nThe reason is well-known :  \n\nTurrets kill minions on lanes when they come closer, bouncing back the wave (because there are less minions on one side, the minions on the opposite side can kill them easily and move forward on the lane).  \nBecause champions\/players have to collect gold & xp from minions deaths, they have to be there before turrets kill them, letting opponents doing moves on the map (warding, roaming, etc...)  \nIf the first turret on a lane is down, the team which lost it has to collect minions closer to their base, allowing opponents to have control on the map (vision with wards, ambushs,...).  \nIt is then relatively hard for the team to come back because they have to push the wave all the way to the opposite turret, becoming easy targets for the enemy team.  \n\nFurthermore, turrets give a lot of gold during its destruction and when it is destroyed. \n\nWe have to note that riot decides to equip turrets with a specific protection before 5min in the game, to avoid some early strategies consisting in gathering nearly the all team to destroy one turret and acquiring a huge early lead.\n\nHow player can use this information to win more games of League of Legends ?\n\nAs a laner, they should focus prioritarly on the lane by farming and hitting the opponent's turret. We saw that getting the first drake or herald gives a huge lead for the team which got it. However, this kind of plays are like coin flips. Indeed, teamfights are highly random when there is no communication between players A team could win or lose a huge advantage in the game with these risky choices. \nA safer and more consistent play should be to avoid these kind of fights this early in the game (even later) and to take advantage of the opponent missing to collect more farm\/minions and destroying turrets.\n\n","75e4275a":"The Target is well balanced !","88f02f51":"We are going to calculate the % of victory depending of the number of destroyed towers.  \nHowever, it would be preferable to not take into account 4 turrets destroyed, because, it happened in only one game.  \nAlso, it is important to remain cautious with the result we are going to obtain with 3 turrets destroyed, because of the low number of games where this happend","45d2154d":"## Logistic regression <a id=\"43\"><\/a>\nWith this first model, we will be able to calculate each feature's weight, therefore to estimate the influence of this feature on the winning condition","de26c827":"## Epic monsters <a id='52'><\/a>\nDrake & Herald","548f9493":"## Turrets <a id='53'><\/a>","81be5f93":"We notice that getting a turret at 10 min leads to the victory almost three games on four (3\/4), which is very high.\nIf 2 turrets are destroyed, the game is nearly already finished.  \nIt is important to note that getting turret gives a lot of gold for the entire team, but also, apply pressure to the enemy team. Indeed, minions can therefore move further into the enemy lanes, which means that opponents have to collect them nearest their base, allowing blue team to gain control over the map.  \n\nIt is aswell important to note that turrets gain bonus armors below 5min in the game, which means that focusing a turret at the beginning of the game to gain a clear advantage is no longer possible (this \"cheesy\" move was highly used in World Championship back in previous seasons)","5082c109":"### CS per minute","742cd72c":"### WardsPlaced","3121df6d":"We notice that they are only few games when 2 turrets are down (only 29 for redside & 27 for blue side on 9781) for both sides.  \nTherefore, it would be better to not take into account 2 turrets down in the game.","9b988baf":"# Preparation for the regression analysis <a id=\"3\"><\/a>","0d6740c6":"### Kill & Assists (KA)","66db163c":"# First exploratory of the dataset <a id=\"2\"><\/a>","5664fe73":"# Personal note <a id='9'><\/a>","352d6f95":"Destroying wards denies vision for the enemy team increasing ganks success.  \nAs we can see, destroying wards increases the probability to win the game. ","cd5bf408":"Let's calculate the median","1c782d43":"In regards of the low possibilites which can occur : until 4 towers destroyed, we will keep these outliers.   \nGenerally, when a team give up, they stay in base and let the enemy team pushs lanes until the Nexus, destroying turrets. ","1eb6d0a4":"## % Victory <a id='63'><\/a>","00ccca13":"# Aknowledgement <a id='10'><\/a>","c81eb525":"This project was my first one as a Data Scientist, and I appreciated to do it.  \nI have played for nearly 10 years at League of Legends, thus this project fitted me well.  \nI learned that having some background in the field I am interested in is mandatory to be a good data scientist.  \nI learned also to organize EDA better and I am sure it will serve me well in the near future.  \nThank you for the reading.  \nJ\u00e9r\u00e9my","089ab2ac":"With medians, we consider 2 types of map control teams : bad ones and good ones","75944d71":"## Analyse <a id='73'><\/a>\n","79b18f4e":"### Epic monsters","604b7ad3":"**WHAT IS LEAGUE OF LEGENDS?**\n\nLeague of Legends is a team-based strategy game where two teams of five powerful champions face off to destroy the other\u2019s base. Choose from over 150 champions to make epic plays, secure kills, and take down towers as you battle your way to victory.\n\n**DESTROY THE BASE**\n\nThe Nexus is the heart of both teams\u2019 bases. Destroy the enemy\u2019s Nexus first to win the game.\n\n**THE MAP**\n\n<img src=\"https:\/\/www.researchgate.net\/profile\/Patrick-Shih-2\/publication\/319839481\/figure\/fig1\/AS:539281729228800@1505586191613\/A-Map-of-the-League-of-Legends-game-play-in-the-classic-mode.png\" align=\"right\" width=\"400\" height=\"300\">\n\n\nBlue and Red team fight on the same map every game. Blue side is on the bottom-left corner, and Red side is on the upper-right corner. The map is symmetrical to its center. It is composed of 3 lanes (toplane, midlane, botlane) and jungle between them. Players pick position in accordance with the role they have decided in the champion select, and has to move from their respective Nexus to the correct position. Each time a player dies or decides to back, he spawns at his respective Nexus.\n\n**CLEAR THE PATH**\n\nYour team needs to clear at least one lane to get to the enemy Nexus. Blocking your path are defense structures called turrets and inhibitors. Each lane has three turrets and one inhibitor, and each Nexus is guarded by two turrets.\n\n**TAKE ON THE JUNGLE**\n\nIn between the lanes is the jungle, where neutral monsters and jungle plants reside. The two most important monsters are Baron Nashor, the Heralds and the Drakes. Killing these units grants unique buffs for your team and can also turn the tide of the game.\n\n**CHOOSE THE LANE**\n\nThere are five positions that make up the recommended team comp for the game. Each lane lends itself to certain kinds of champions and roles\u2014try them all or lock in to the lane that calls you.\n\n**POWER THE CHAMP**\n\nChampions get stronger by earning experience to level up and gold to buy more powerful items as the game progresses. Staying on top of these two factors is crucial to overpowering the enemy team and destroying their base.\n\n**UNLOCK ABILITIES**\n\nChampions have five core abilities, two special spells, and up to seven items at a time. Figuring out the optimal ability order, summoner spells, and item build for your champion will help you succeed as a team.\n\n<a href=\"https:\/\/na.leagueoflegends.com\/en-us\/how-to-play\/\">League of Legends Official Website<\/a>\n\n<a href=\"https:\/\/www.youtube.com\/embed\/BGtROJeMPeE\">What is League of Legends (Youtube)<\/a>\n","fcc4fc13":"It appears that getting a drake or herald or both could tend the game to the win of the team which got it (them). We have to note that killing these monsters doesn't provide a significant amount of gold & experience by themselves. \n\nHowever Drakes give stats bonus for the team which got it (damage,movement speed,...) which are useful for future teamfights. Killing Herald gives the possibility to activate it near a tower and do severe damage to it, which can lead to tower destruction (as we can see in the table of correlations between herald and tower destruction). \n\nFurthermore, getting this objectives means fight for them. The result of this fight has a huge impact on the game, because the team who lost it loses also xp and gold due to the fact that minions, which gives this ressources, die to their own turrets\/minions. \n\nIn a nutshell, getting first drake or herald leads to a huge advantage, especially when a teamfight is won, which increases while the game is evolving (more gold & experience => more kills and objectives => more gold & experience).  \n\nWhich decision the team can make to get this epic monsters ? \n\n=> Obtaining these objectives generally means winning the teamfight for it in the river. Getting the priority in lane (push first to oblige the enemy laner to stay in lane and collect the farm under turret while it is killing them, denying gold) should be the correct way to ensure to win the teamfight. Arriving first means unbalanced teamfight. One way to ensure priority is to pick a counter of the enemy champion during the draft to gain control of the lane. An other way could be to ask the jungler to come help to push the lane before starting the epic monster. If the enemy team choose to follow anw, they could be suprised by the enemy team in the fog of war, and losing xp & gold because the lane is pushing against them, losing minions under the tower. \n\n","56337f76":"How many games\/row did we removed ?","542cfc7d":"## First blood <a id='54'><\/a>\n\nFirst blood is the first death of the game.  \nObtaining first blood gives a small advantage of 100gold for the team which made the kill.","73f1dcf1":"### Precautions\n\nGames are highly random in League of Legends. No game is identical to the previous one, even if the map remains the same. It is like chess.  \nInformations we got with this analyse are not universal because of many factors (afk, players psychology, etc...) and could be not true in certain situations.  \nHowever, this analyse provides good trends of how to win games before 10min and should be used in accordance with the situation in the game and player's decisions.","0276764b":"## Outliers <a id=\"33\"><\/a>","afc50c5f":"## Outliers <a id='62'><\/a>","6936bc65":"With this table, we are now able to identify which actions the blue player has to take to win before 10min :\n* It seems that kills and deaths are the main cause of wins and loses, which is pretty logical because of the gold and experience gaps it creates.   \n* The average level is also a good indicator if the game is won or lost. However, we have to be careful with this value because winning leads to a higher average level (kills gives a ton of experiences).\n* We can also think that valuing experience can lead to a win. For example, usualy, players have to make a choice between taking a risk leading to gaining or losing a ton of gold and experience (make a play and try to kill the enemy \/ roaming \/ invading), or they can play safe. It is therefore possible that playing safe and valuing experience by killing minions only could be a good decision to win the game later. Indeed, the game is actually more about punishing enemy mistakes than making high value plays.\n\n\n**To wrap it up**\n* It should be interested to study if the win & experience (average level) work in both ways : exp <=> wins. Indeed, we know that winning leads to high levels. However, do decisions leading to experience gain only (like farming minions for instance, and not killing enemy players) tends to increase the probability to win the game. \n* Also, getting the first drake in the game tends to increase the probability of winning, in opposite to the herald. This fact is pretty weird because in season 11\/12, obtaining herald leads to destroying turrets, therefore golds for the entire team and map pressure, which is decisive for the win. This results should be investigated.\n* Finally, warding doesn't seem to have a huge weight on the winning condition before 10 min, which could be denied due to a lot of advices from game coachs. This fact should be studied too. ","4ad405a6":"We have decided to treat the following problem : which decisions team have to make before 10 min to increase their probability to win the game ?\nWe have analysed statistics from about 9000 games considering : gold, xp, epic monsters, turrets destruction, ward control, first blood, ...\nFrom this study we can conclude with these points : ","4e91be9a":"# General conclusions <a id='8'><\/a>","6c48b24e":"## Wards impact <a id='41'><\/a>\nWe are going to check how many games are won regarding of warding (placed & destroyed)","c32c8437":"Standardization worked","1c8dab1b":"### EliteMonsters drop","f91c7187":"## Train Test Split <a id=\"42\"><\/a>\n(not used yet because we just want to get feature's weights)"}}