{"cell_type":{"560eeeb0":"code","435aceea":"code","5f893925":"code","b288c8f8":"code","d40fd7d2":"code","e484e310":"code","a1171337":"code","67b74880":"code","ce45ad2a":"code","6ec41413":"code","d2b357d5":"code","b48be1e8":"code","5f41cc89":"code","b92d05be":"code","7bdd9c27":"code","06892e9f":"code","f0b45013":"code","84f9841a":"markdown"},"source":{"560eeeb0":"!pip install pmdarima","435aceea":"import numpy as np\nimport pandas as pd\nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 10, 6\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom pmdarima.arima import auto_arima\n\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport math","5f893925":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b288c8f8":"dateparse = lambda dates: pd.datetime.strptime(dates, \"%Y-%m-%d\")\ndat = pd.read_csv(\"..\/input\/price-volume-data-for-all-us-stocks-etfs\/Stocks\/tsla.us.txt\", sep=',', index_col=\"Date\", parse_dates=['Date'], date_parser=dateparse).fillna(0)","d40fd7d2":"dat","e484e310":"plt.grid(True)\nplt.xlabel(\"Date\")\nplt.ylabel(\"Close Price\")\nplt.plot(dat[\"Close\"])\nplt.title(\"TSLA Closing Price\")\nplt.show()","a1171337":"dat[\"Close\"].plot(kind=\"kde\")","67b74880":"# Testing stationarity\ndef test_stationarity(timeseries):\n  rolmean = timeseries.rolling(12).mean()\n  rolstd = timeseries.rolling(12).std()\n\n  # Plots\n  plt.plot(timeseries, color=\"blue\", label=\"Original\")\n  plt.plot(rolmean, color=\"red\", label=\"Rolling Mean\")\n  plt.plot(rolstd, color=\"green\", label=\"Rolling Standard Deviation\")\n  plt.legend(loc=\"best\")\n  plt.title(\"Rolling Mean and Standard Deviation\")\n  plt.show(block=False)\n\n  print(\"Results of ADF Test: \")\n  adft = adfuller(timeseries, autolag=\"AIC\")\n\n  index_lst = [\"Test Statistics\", \"P-Value\", \"# of Lags Used\", \"# of Observations Used\"]\n  out = pd.Series(adft[0:4], index=index_lst)\n  for key, value in adft[4].items():\n    out[\"critical value (%s)\"%key] = value\n\n  print(out)","ce45ad2a":"test_stationarity(dat[\"Close\"])","6ec41413":"seasonal_result = seasonal_decompose(dat[\"Close\"], model=\"multiplicative\", freq = 30)\nfig = plt.figure()\nfig = seasonal_result.plot()","d2b357d5":"# Eliminate trend if not stationary\ndat_log = np.log(dat[\"Close\"])\nmoving_mean = dat_log.rolling(12).mean()\nmoving_std = dat_log.rolling(12).std()\n\nplt.legend(loc=\"best\")\nplt.title(\"Moving Average\")\nplt.plot(moving_std, color=\"black\", label=\"Standard Deviation\")\nplt.plot(moving_mean, color=\"red\", label=\"Mean\")\nplt.legend()\nplt.show()","b48be1e8":"# Splitting data\ntrain_dat, test_dat = dat_log[3:int(len(dat_log)*0.9)], dat_log[int(len(dat_log)*0.9):]\nplt.grid(True)\nplt.xlabel(\"Date\")\nplt.ylabel(\"Closing Price\")\nplt.plot(dat_log, \"Green\", label=\"Training Data\")\nplt.plot(test_dat, \"Blue\", label=\"Test Data\")\nplt.legend()","5f41cc89":"model_autoARIMA = auto_arima(train_dat, start_p=0, start_q=0,\n                             test='adf',  # Find optimal d with ADF test\n                             max_p=3, max_q=3,\n                             m=1,         # Frequency of series\n                             d=None,       # Let the model determine d\n                             seasonal=False, # No seasonality\n                             start_P=0,\n                             D=0,\n                             trace=True,\n                             error_action=\"ignore\",\n                             suppress_warnings=True,\n                             stepwise=True)\n\nprint(model_autoARIMA.summary())\nmodel_autoARIMA.plot_diagnostics(figsize=(15,8))\nplt.show()","b92d05be":"model = ARIMA(train_dat, order=(1, 1, 2))\nfitted = model.fit(disp=-1)\nprint(fitted.summary())","7bdd9c27":"# Predictions\npred, se, CI = fitted.forecast(186, alpha=0.05)  # 95% Confidence Interval","06892e9f":"pred_series = pd.Series(pred, index=test_dat.index)\nlower_series = pd.Series(CI[:, 0], index=test_dat.index)\nupper_series = pd.Series(CI[:, 1], index=test_dat.index)\n\nplt.figure(figsize=(10, 5), dpi=100)\nplt.plot(train_dat, label=\"Training Data\")\nplt.plot(test_dat, color=\"blue\", label=\"Actual Stock Price\")\nplt.plot(pred_series, color=\"orange\", label=\"Predicted Stock Price\")\nplt.fill_between(lower_series.index, lower_series, upper_series, color=\"k\", alpha=.1)\nplt.title(\"Prediction vs. TSLA Stock Price\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"TSLA Stock Price\")\nplt.legend(loc=\"upper left\", fontsize=8)\nplt.show()","f0b45013":"# Performance Report\nmse = mean_squared_error(test_dat, pred)\nmae = mean_absolute_error(test_dat, pred)\nrmse = math.sqrt(mse)\nmape = np.mean(np.abs(pred - test_dat) \/ np.abs(test_dat))\n\nprint(\"MSE: \" + str(mse))\nprint(\"MAE: \" + str(mae))\nprint(\"RMSE: \" + str(rmse))\nprint(\"MAPE: \" + str(mape))","84f9841a":"*Diagnostic Plots Intepretations*"}}