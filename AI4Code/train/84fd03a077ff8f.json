{"cell_type":{"e260e05c":"code","bce1e68f":"code","e0de8972":"code","7ae6c8e6":"code","b19dffb2":"code","aad7b9c5":"code","a4e4c617":"code","44c22d9c":"code","bf3612f6":"code","13f095a3":"code","6789be91":"code","f8074f33":"code","f74c79cf":"code","5a9cd491":"code","a040f0f5":"code","f7f38569":"code","6b670b1e":"code","bf28a98f":"code","5d1e0422":"code","3504402f":"code","126b1f78":"code","63c0acf5":"code","0c422fd3":"code","be83bfb7":"code","68e6217b":"code","83457946":"code","cbdddea3":"code","01625eef":"code","87bf8366":"markdown","bbd25811":"markdown","4847536e":"markdown","25560958":"markdown"},"source":{"e260e05c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bce1e68f":"# for basic operations\nimport numpy as np\nimport pandas as pd\nimport pandas_profiling\n\n# for data visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# for advanced visualizations \nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\ninit_notebook_mode(connected = True)\n\n\n# for providing path\nimport os\nprint(os.listdir('..\/input\/'))\n\n# for model explanation\nimport shap\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e0de8972":"df = pd.read_csv(\"..\/input\/Iris.csv\") ","7ae6c8e6":"df.head()","b19dffb2":"df.describe().T","aad7b9c5":"df.info()","a4e4c617":"profile=pandas_profiling.ProfileReport(df)\nprofile","44c22d9c":"p=df.hist(figsize=(8,8))\n","bf3612f6":"\ng=sns.catplot(x=\"Species\", y=\"PetalLengthCm\", data=df,\n             height=5,kind=\"bar\",palette=\"muted\")","13f095a3":"g=sns.catplot(x=\"Species\", y=\"SepalWidthCm\", data=df,\n             height=5,kind=\"bar\",palette=\"muted\")","6789be91":"g=sns.catplot(x=\"Species\", y=\"SepalLengthCm\", data=df,\n             height=5,kind=\"bar\",palette=\"muted\")","f8074f33":"g=sns.catplot(x=\"Species\", y=\"PetalWidthCm\", data=df,\n             height=5,kind=\"bar\",palette=\"muted\")","f74c79cf":"df2=df.drop(\"Id\" ,axis=1  )\n\n","5a9cd491":"df2.info()","a040f0f5":"\nsz=(9,9)\nfig,ax=plt.subplots(figsize=sz)\nsns.boxplot(ax=ax, data=df2, orient=\"h\")\n","f7f38569":"data2=df[\"SepalWidthCm\"].max()\ndata2","6b670b1e":"data1=df[df[\"SepalWidthCm\"]==4.4]\ndata1","bf28a98f":"data4=df[\"SepalWidthCm\"].min()\ndata4","5d1e0422":"data3=df[df[\"SepalWidthCm\"]==2]\ndata3","3504402f":"p=sns.pairplot(df, hue=\"Species\")","126b1f78":"plt.scatter(data.PetalLengthCm,data.PetalWidthCm)\nplt.show\n","63c0acf5":"data5=df.drop([\"Species\",\"Id\",\"SepalWidthCm\",\"SepalLengthCm\"], axis=1)\ndata5","0c422fd3":"from sklearn.cluster import KMeans\nwcss = []\n\nfor k  in range (1,15):\n    kmeans=KMeans(n_clusters=k)\n    kmeans.fit(data5)\n    wcss.append(kmeans.inertia_)\n\nplt.plot(range(1,15),wcss)\nplt.xlabel(\"number of k (cluster) value\")\nplt.ylabel(\"wcss\")\nplt.show()","be83bfb7":"kmeans2=KMeans(n_clusters=3)\nclusters=kmeans2.fit_predict(data5)\ndata5[\"label\"]=clusters\n\n\n    ","68e6217b":"data5","83457946":"plt.scatter(data5.PetalLengthCm[data5.label == 0],data5.PetalWidthCm[data5.label == 0],color=\"red\")\nplt.scatter(data5.PetalLengthCm[data5.label == 1],data5.PetalWidthCm[data5.label == 1],color=\"green\")\nplt.scatter(data5.PetalLengthCm[data5.label == 2],data5.PetalWidthCm[data5.label == 2],color=\"orange\")\nplt.scatter(kmeans2.cluster_centers_[:,0],kmeans2.cluster_centers_[:,1],color=\"yellow\")\nplt.show","cbdddea3":"from scipy.cluster.hierarchy import linkage, dendrogram\n\nmerg=linkage(data5,method=\"ward\")\ndendrogram(merg,leaf_rotation=90)\nplt.xlabel(\"data points\")\nplt.ylabel(\"euclidean distance\")\nplt.show()","01625eef":"from sklearn.cluster import AgglomerativeClustering\n\nhiyerartical_cluster = AgglomerativeClustering(n_clusters = 3,affinity= \"euclidean\",linkage = \"ward\")\ncluster = hiyerartical_cluster.fit_predict(data)\n\ndata[\"label\"] = cluster\n\nplt.scatter(data5.PetalLengthCm[data5.label == 0 ],data5.PetalWidthCm[data5.label == 0],color = \"red\")\nplt.scatter(data5.PetalLengthCm[data5.label == 1 ],data5.PetalWidthCm[data5.label == 1],color = \"green\")\nplt.scatter(data5.PetalLengthCm[data5.label == 2 ],data5.PetalWidthCm[data5.label == 2],color = \"blue\")\nplt.show()\n","87bf8366":"<font color=\"blue\">\n    \n## \u00c7al\u0131\u015fma Metadolojisi\n1. [Veri Y\u00fckleme ve Tan\u0131ma](#1)\n1. [Veri G\u00f6rselle\u015ftirme](#2)\n1. [Unsupervised Methods](#3)\n  ","bbd25811":"<a id=\"1\"><\/a><br>\nVeri Y\u00fckleme ve Tan\u0131ma\n","4847536e":"<a id=\"2\"><\/a><br>\nVeri G\u00f6rselle\u015ftirme ","25560958":"<a id=\"3\"><\/a><br>\n## Unsupervised Method\n"}}