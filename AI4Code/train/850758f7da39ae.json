{"cell_type":{"0a8c6208":"code","9ffbcaa5":"code","7813371b":"code","67c5218b":"code","27be19d3":"code","5749f78b":"code","526507c2":"code","57310c71":"code","33e8789b":"code","85b3a15e":"code","4f16b98d":"code","89b09706":"code","7b11d405":"code","8ef16a9b":"code","27dfb109":"code","dca4bd23":"code","32349308":"markdown","b7c9abc6":"markdown","63f7c046":"markdown","3afca93a":"markdown","6bcc8990":"markdown","073906c5":"markdown","d634b1ec":"markdown","cff70beb":"markdown","26e7c211":"markdown","e78e59f4":"markdown","2229c64a":"markdown","b3f62ad2":"markdown","24347872":"markdown","c2b6f8a7":"markdown","8d69b643":"markdown"},"source":{"0a8c6208":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9ffbcaa5":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np \nfrom scipy import stats\nimport pandas as pd\nimport pycountry","7813371b":"filename = \"\/kaggle\/input\/suicide-rates-overview-1985-to-2016\/master.csv\"\ndf = pd.read_csv(filename)\nprint(df.head())","67c5218b":"df.rename(columns={\"suicides\/100k pop\":\"suicides_pop\",\"HDI for year\":\"HDI_for_year\",\n                  \" gdp_for_year ($) \":\"gdp_for_year\",\" gdp_per_capita ($) \":\"gdp_per_capita\",\n                    \"gdp_per_capita ($)\":\"gdp_per_capita\"}, inplace=True)\nprint(df.columns)","27be19d3":"df[\"gdp_for_year\"] = df[\"gdp_for_year\"].str.replace(\",\",\"\").astype(np.int64)\ndf[\"age\"] = df[\"age\"].str.replace(\"5-14 years\",\"05-14 years\")","5749f78b":"df1 = df.groupby(\"country\")[\"suicides_no\"].sum()\ncountry_name = list(df1.index.get_level_values(0))\nlen(country_name)","526507c2":"countries = {}\nfor country in pycountry.countries:\n    countries[country.name] = country.alpha_3","57310c71":"country_not_in_list = [i for i in country_name[:] if i not in countries.keys()]\ncountry_not_in_list","33e8789b":"df.replace(\"Republic of Korea\", \"Korea, Republic of\", inplace = True)\ndf.replace('Czech Republic', \"Czechia\", inplace = True)\ndf.replace('Macau', 'Macao', inplace = True)\ndf.replace('Saint Vincent and Grenadines', \"Saint Vincent and the Grenadines\", inplace = True)","85b3a15e":"df_suino = df.groupby([\"country\",\"year\"])[\"suicides_no\"].sum()\ndf_sum = df_suino.sort_index(ascending=True)[:] * 100\n\ndf_pop = df.groupby([\"country\",\"year\"]).population.sum()\ndf_pop_sum = df_pop.sort_index(ascending=False)[:]\n\ndf_total = df_sum \/ df_pop_sum\ndf_total.head(10)","4f16b98d":"country_dict={}\nfor country in df_total.index.get_level_values(0):\n    if country not in country_dict.keys():\n        country_dict[country] = df_total[country].mean()\n    else:\n        pass\n\ntup = list(country_dict.items())\ntup.sort(key= lambda pair:pair[1], reverse = True)\n\ncountry_list = [a[0] for a in tup]\ncountry_suicide = [a[1] for a in tup]","89b09706":"plt.figure(figsize=(8,32))\nsns.barplot(x=country_suicide[:],y=country_list[:], palette=\"GnBu\")\nplt.xlabel(\"ratio of suicide\")\nplt.ylabel(\"country\")\nplt.title(\"suicide rate vs country\")\nplt.show()","7b11d405":"df_gdp = df.groupby([\"country\",\"year\"]).gdp_per_capita.mean()\ncorr_eff = {}\nfor country in country_list[:10]:\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df_gdp[country].values,df_total[country].values)\n    corr_eff[country] = float(r_value)\n    \nsns.barplot(x=list(corr_eff.keys()), y=list(corr_eff.values()), palette = \"YlOrRd\")\nplt.xticks(rotation = 90)\nplt.xlabel(\"Country\")\nplt.ylabel(\"correlation coeff.\")\nplt.title(\"GDP vs suicides\")\nplt.show()","8ef16a9b":"df_men = df[df.sex == \"male\"]\ndf_women = df[df.sex == \"female\"]\nsns.lineplot(df_men.year, df.suicides_no, ci = None)\nsns.lineplot(df_women.year, df.suicides_no, ci = None)\nplt.legend([\"male\", 'female'])\nplt.show()","27dfb109":"df_age = df.groupby([\"year\",\"age\"])[\"suicides_no\", \"population\"].sum()\ndf_reset = df_age.copy().reset_index()\nplt.figure(figsize=(9,6))\nsns.lineplot(\"year\", df_reset.suicides_no*100\/df_reset.population, hue = \"age\",\n             data = df_reset, linewidth = 2.5, style = \"age\", markers=True\n            , dashes=False)\nplt.xticks(rotation = 90)\nplt.show()","dca4bd23":"plt.figure(figsize = (9,6))\nsns.barplot(x=\"year\", y=\"suicides_pop\", hue=\"age\",\n            ci = None,data = (df[df[\"country\"] == \"Japan\"]) )\nplt.xticks(rotation = 90)\nplt.title(\"suicide rate of Japan\" )\nplt.legend()    \nplt.show()","32349308":"# **Suicide rate of all country**","b7c9abc6":"# **Importing the libraries**","63f7c046":"# **READING DATA SET **","3afca93a":"# **Rename the colummns**","6bcc8990":"# **Impact of nation GDP in the suicides**","073906c5":"# **Merge the country name with country code**","d634b1ec":"# Rearrange the data set ****","cff70beb":"# **The suicide rate of each countries, we calcuate the suicide rate for each year, and then take the average of number as rate.**","26e7c211":"# **The suicides number of male are about three times higher than of female. How about the age?**","e78e59f4":"# HRITIK CHAUHAN \n# 18SCSE1140026 \n# CNCS BATCH>** **","2229c64a":"# **Suicide rate of Japan Age Wise **","b3f62ad2":"# **Total number of countries**","24347872":"# **Correcting the country names with respect to the code**","c2b6f8a7":"# **The performance of sex**","8d69b643":"# **READING THE FILE**"}}