{"cell_type":{"5a688e1c":"code","15e406b2":"code","365a684c":"code","bc9ee96e":"code","3b045bc5":"code","e294ebc6":"code","56e150ba":"code","d3c71a21":"code","106691ec":"code","d8f2525b":"code","76007eca":"code","27edbe17":"code","451a9452":"code","ac8100c2":"code","62e92d70":"code","66cacf62":"code","ddf6536a":"code","3a154e66":"code","2bfaccf0":"markdown","fced8b1f":"markdown"},"source":{"5a688e1c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","15e406b2":"import pandas as pd\nfrom matplotlib import pyplot as plt","365a684c":"import os\nprint(os.listdir('..\/input\/titanic'))","bc9ee96e":"train_data=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_data=pd.read_csv(\"..\/input\/titanic\/test.csv\")","3b045bc5":"train_data.head()","e294ebc6":"test_data.head()","56e150ba":"train_data.shape","d3c71a21":"train_data['Survived'].value_counts()","106691ec":"plt.figure(figsize=(5,5))\nplt.bar(list(train_data['Survived'].value_counts().keys()),list(train_data['Survived'].value_counts()),color=[\"r\",\"g\"])\nplt.show()","d8f2525b":"train_data['Pclass'].value_counts()","76007eca":"plt.figure(figsize=(5,5))\nplt.bar(list(train_data['Pclass'].value_counts().keys()),list(train_data['Pclass'].value_counts()),color=[\"b\",\"green\",\"orange\"])\nplt.show()","27edbe17":"train_data['Sex'].value_counts()","451a9452":"plt.figure(figsize=(5,5))\nplt.bar(list(train_data['Sex'].value_counts().keys()),list(train_data['Sex'].value_counts()),color=[\"pink\",\"blue\"])\nplt.show()","ac8100c2":"plt.figure(figsize=(5,7))\nplt.hist(train_data['Age'])\nplt.title('Distribution of Age')\nplt.xlabel(\"Age\")\nplt.show()","62e92d70":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","66cacf62":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","ddf6536a":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)","3a154e66":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","2bfaccf0":"# Model Build","fced8b1f":"# Exploratory Data Analysis"}}