{"cell_type":{"ef7f106a":"code","7eaa74b6":"code","4c367bcb":"code","cbcfd733":"code","ff69fb12":"code","cd28b184":"code","d31fbff0":"code","76fe7edd":"code","c2469eae":"code","644bad85":"code","a086177a":"code","4535f3bd":"code","b108914f":"code","322ac0c2":"code","127bf0a7":"code","87b9b301":"code","05a837af":"code","c0a57aee":"code","aa3843fe":"code","25976004":"code","c28a9d11":"code","fe1f6b30":"code","e2f1ddc8":"code","d712442b":"code","efc8e519":"code","49fcee45":"code","97708946":"code","273fea48":"code","cad234a8":"code","eb5a8201":"code","184daa2c":"code","6aa10619":"code","8f068c56":"code","334213af":"code","88eef764":"code","29c99c5e":"code","159303b4":"code","fb56972a":"code","2dedfffe":"code","e931006c":"code","8b9f648c":"code","480349f3":"code","7d3407c4":"code","6295ccda":"code","5fd45235":"code","b30c0c1e":"code","fd32e7c2":"code","2842b235":"code","fff41d70":"code","4a911ff9":"code","bf2ef663":"code","7186c316":"code","ce220547":"code","c852abb5":"code","d7713369":"code","92f251cd":"code","df21cab7":"code","57c737c2":"code","acdedb0b":"code","98a0d977":"code","d678e375":"code","2051fb98":"markdown"},"source":{"ef7f106a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7eaa74b6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #Plotting\n%matplotlib inline\nimport seaborn as sns\nplt.rcParams[\"figure.figsize\"] = (10,10) #Make the plots bigger by default\nplt.rcParams[\"lines.linewidth\"] = 2 #Setting the default line width\nplt.style.use(\"ggplot\")\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom datetime import datetime\nfrom statsmodels.tsa.holtwinters import SimpleExpSmoothing\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping , ReduceLROnPlateau\nfrom sklearn.metrics import mean_absolute_error\n\nimport warnings\nimport warnings\nwarnings.filterwarnings('ignore')","4c367bcb":"df = pd.read_csv(\"\/kaggle\/input\/dogecoin-historical-dataset-2014-to-2021\/DOGE-USD.csv\")\ndf.head()","cbcfd733":"df.isnull().sum()\n","ff69fb12":"df[\"Date\"]=pd.to_datetime(df.Date,dayfirst=True)\ndf.set_index(\"Date\",inplace=True)\ndf","cd28b184":"df=df.asfreq(\"d\")\ndf = df.fillna(method  = \"bfill\")","d31fbff0":"df['Open'].plot(figsize=(12,8))\nplt.ylabel(\"open price\")","76fe7edd":"df['Volume'].plot(figsize=(12,8))\nplt.ylabel(\"Volume price\")","c2469eae":"df['Total Pos'] = df.sum(axis=1)\n","644bad85":"df['Total Pos'].plot(figsize=(10,8))\nplt.title('Total Portfolio Value')","a086177a":"df['Daily Return'] = df['Total Pos'].pct_change(1)\n","4535f3bd":"df['Daily Return'].mean()\n","b108914f":"df['Daily Return'].plot(kind='kde')\n","322ac0c2":"SR = df['Daily Return'].mean()\/df['Daily Return'].std()\n","127bf0a7":"all_plot = df\/df.iloc[0]\nall_plot.plot(figsize=(24,16))","87b9b301":"df.hist(bins=100,figsize=(12,6));\nplt.tight_layout()","05a837af":"df.resample(rule='A').mean()\n","c0a57aee":"title = 'Yearly Mean Closing Price'\ndf['Open'].resample('A').mean().plot.bar(title=title,color=['#b41f7d']);","aa3843fe":"df['Open'].resample('M').max().plot.bar(figsize=(18,12),color='#1f77b4');\n","25976004":"ax = df['Open'].plot(figsize=(24,6),title=title)\n","c28a9d11":"df['6-month-SMA'] = df['Open'].rolling(window=6).mean()\ndf['12-month-SMA'] = df['Open'].rolling(window=12).mean()\ndf['2-month-SMA'] = df['Open'].rolling(window=2).mean()","fe1f6b30":"df.head(13)\n","e2f1ddc8":"df[[\"Open\",\"6-month-SMA\",\"12-month-SMA\",\"2-month-SMA\"]].plot(figsize=(24,10));\n","d712442b":"df[[\"Open\",\"6-month-SMA\"]].plot(figsize=(18,10));\n","efc8e519":"df[['Open','6-month-SMA']].iloc[:100].plot(figsize=(12,6)).autoscale(axis='x',tight=True);\n","49fcee45":"df['EWMA12'] = df['Open'].ewm(span=14,adjust=True).mean()\n","97708946":"df[['Open','EWMA12']].plot(figsize=(24,12));\n","273fea48":"df[['Open','EWMA12']].iloc[:50].plot(figsize=(12,6)).autoscale(axis='x',tight=True);\n","cad234a8":"df['EWMA12'] = df['Open'].ewm(span=14,adjust=True).mean()\n","eb5a8201":"span = 8\nalpha = 2\/(span+1)","184daa2c":"df['EWMA12'] = df['Open'].ewm(alpha=alpha,adjust=False).mean()\n","6aa10619":"model=SimpleExpSmoothing(df[\"Open\"])\n","8f068c56":"model.fit(smoothing_level=alpha,optimized=False)\n","334213af":"fitted_model=model.fit(smoothing_level=alpha,optimized=False)\n","88eef764":"fitted_model.fittedvalues\n","29c99c5e":"fitted_model.fittedvalues.shift(-1)\n","159303b4":"df[\"SES12\"]=fitted_model.fittedvalues.shift(-1)\n","fb56972a":"df[['Close',\"SES12\"]].plot(figsize=(30,15)).autoscale(axis='x',tight=True);\n","2dedfffe":"df['DESadd12'] = ExponentialSmoothing(df['Open'], trend='add').fit().fittedvalues.shift(-1)\ndf.head()","e931006c":"df[['Open',  'SES12', 'DESadd12']].plot(figsize=(24,12))\n","8b9f648c":"df[['Open','EWMA12','DESadd12']].iloc[:12].plot(figsize=(12,6)).autoscale(axis='x',tight=True);\n","480349f3":"df['DESmul12'] = ExponentialSmoothing(df['Open'], trend='mul').fit().fittedvalues.shift(-1)\ndf.head()","7d3407c4":"df[['Open','DESadd12','DESmul12']].iloc[:24].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","6295ccda":"df['TESadd12'] = ExponentialSmoothing(df['Open'],trend='add',seasonal='add',seasonal_periods=12).fit().fittedvalues\ndf.head()","5fd45235":"df['TESmul12'] = ExponentialSmoothing(df['Open'],trend='mul',seasonal='mul',seasonal_periods=12).fit().fittedvalues\ndf.head()","b30c0c1e":"df[['Open','TESadd12','TESmul12']].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","fd32e7c2":"df[['Open','TESadd12','TESmul12']].iloc[:24].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","2842b235":"plt.figure(figsize=(16,6))\nplt.title('Open Price History')\nplt.plot(df['Open'])\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Open Price USD ($)', fontsize=18)\nplt.show()","fff41d70":"data = df.filter(['Open'])\n\ndataset = data.values\n\ntraining_data_len = int(np.ceil( len(dataset) * .95 ))\n\ntraining_data_len","4a911ff9":"scaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(dataset)\n\nscaled_data","bf2ef663":"train_data = scaled_data[0:int(training_data_len), :]\n\nx_train = []\ny_train = []\n\nfor i in range(60, len(train_data)):\n    x_train.append(train_data[i-60:i, 0])\n    y_train.append(train_data[i, 0])\n    if i<= 61:\n        print(x_train)\n        print(y_train)\n        print()\n        \n\nx_train, y_train = np.array(x_train), np.array(y_train)\n\n\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))","7186c316":"model = Sequential()\nmodel.add(LSTM(64, return_sequences=True, input_shape= (x_train.shape[1], 1)))\nmodel.add(LSTM(32, return_sequences=False))\nmodel.add(Dense(16))\nmodel.add(Dense(1))","ce220547":"model.compile(optimizer='adam', loss='mean_squared_error')","c852abb5":"callbacks = [EarlyStopping(patience=3, monitor='val_loss', mode='min'), \n             ReduceLROnPlateau(patience=2, verbose=1)]  ","d7713369":"history =model.fit(x_train, y_train, \n                        epochs=20,\n                        batch_size=1,\n                        callbacks=[callbacks],\n                        )","92f251cd":"test_data = scaled_data[training_data_len - 60: , :]\nx_test = []\ny_test = dataset[training_data_len:, :]\nfor i in range(60, len(test_data)):\n    x_test.append(test_data[i-60:i, 0])\n    \n# Convert the data to a numpy array\nx_test = np.array(x_test)\n\n# Reshape the data\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))\n\n# Get the models predicted price values \npredictions = model.predict(x_test)\npredictions = scaler.inverse_transform(predictions)\n\n# Get the root mean squared error (RMSE)\nrmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))","df21cab7":"mean_absolute_error(y_test, predictions)","57c737c2":"# Plot the data\ntrain = data[:training_data_len]\nvalid = data[training_data_len:]\nvalid['Predictions'] = predictions\n# Visualize the data\nplt.figure(figsize=(16,6))\nplt.title('Model')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Open Price USD ($)', fontsize=18)\nplt.plot(train['Open'])\nplt.plot(valid[['Open', 'Predictions']])\nplt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\nplt.show()","acdedb0b":"predictions = model.predict(x_test)","98a0d977":"valid[['Open','Predictions']].iloc[:100].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","d678e375":"valid\n","2051fb98":"# LSTM MODEL\u00b6\n"}}