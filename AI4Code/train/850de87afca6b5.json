{"cell_type":{"69eeeccd":"code","f45c6bf4":"code","9978ea01":"code","97c0ba6a":"code","167270d7":"code","85e70df2":"code","c00e7a55":"code","7d0580dd":"code","dce17252":"code","6f7a2f62":"code","1056ea05":"code","05402893":"code","49f1f48b":"code","4cc1efaa":"code","681b834a":"code","06e9bccb":"code","c87b0c89":"code","0d68ea63":"code","f90fe96e":"code","9dc2f3e4":"code","3f35a182":"code","26f75522":"code","b0a9774a":"code","d065ba75":"code","396a89fb":"code","851c10d8":"code","24b16106":"code","be86aaad":"code","45fd2720":"code","8af0f2e9":"code","2a04e099":"markdown","86d13771":"markdown","f56b6a26":"markdown","48fee968":"markdown"},"source":{"69eeeccd":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","f45c6bf4":"train0 = pd.read_csv(\"..\/input\/supplement-sales-prediction\/TRAIN.csv\")\ntrain0[0:2].T","9978ea01":"test0 = pd.read_csv(\"..\/input\/supplement-sales-prediction\/TEST_FINAL.csv\")\ntest0[0:2].T","97c0ba6a":"print(len(train0))\nprint(len(test0))\nn=len(train0)","167270d7":"train0=train0.drop('#Order',axis=1)","85e70df2":"data0=pd.concat([train0,test0])\ndata0","c00e7a55":"data0.info()","7d0580dd":"data0['month']=data0['Date'].apply(lambda x: int(x.split('-')[1]))","dce17252":"df=data0\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","6f7a2f62":"data0","1056ea05":"data1=data0.drop(['ID','Date'],axis=1)","05402893":"n","49f1f48b":"data1","4cc1efaa":"train1=data1.iloc[0:n]\ntest1=data1.iloc[n:]","681b834a":"target=['Sales']\ntrainY=train1['Sales']\ntrainX=train1.drop('Sales',axis=1)\ntestX=test1.drop('Sales',axis=1)","06e9bccb":"df_columns = list(trainX.columns)\nprint(df_columns)","c87b0c89":"train_df=trainX\ntest_df=testX","0d68ea63":"train_df.columns=df_columns\ntest_df.columns=df_columns","f90fe96e":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","9dc2f3e4":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","3f35a182":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","26f75522":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","b0a9774a":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","d065ba75":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","396a89fb":"y = trainY\nydf=pd.DataFrame(y)","851c10d8":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title('Sales',fontsize=20)\n    ax.set_xlabel('Train Actual Sales',fontsize=12)\n    ax.set_ylabel('Train Predicted Sales',fontsize=12)\n    ax.scatter(y,oof)\n","24b16106":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","be86aaad":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n","45fd2720":"pred0 = np.array([model.predict(test_feat_df.values) for model in models])\npred1 = np.mean(pred0, axis=0)\npred1","8af0f2e9":"fig, ax = plt.subplots(figsize=(8,8))\nsns.histplot(pred1, label='Test Predict Sales', ax=ax, color='black', bins=50)\nsns.histplot(oof, label='Train Predict Sales', ax=ax, color='C1',bins=50)\nax.legend()\nax.grid()","2a04e099":"# Data preparation","86d13771":"# Visualize Importance","f56b6a26":"# Model","48fee968":"# Target setting"}}