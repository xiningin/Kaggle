{"cell_type":{"c0b72068":"code","d8832c5e":"code","ea98fd87":"code","8fff9308":"code","38fadb8d":"code","9b457bcd":"code","49566fd5":"code","2e880b73":"code","a8927572":"code","77b8124c":"code","8e95bb6c":"code","3a66a21a":"code","b331b9c1":"code","f87370f3":"code","42dfa5f5":"code","0d294ae5":"code","e0be6d78":"code","8914464b":"code","0d29bdfa":"code","2e6eb3d5":"code","b2447bb3":"code","6cd7cb77":"code","1c988e3f":"code","9efb57b3":"code","2ea1cd77":"code","b372de62":"markdown","733fde7e":"markdown","68091171":"markdown","72692e3d":"markdown","2575170b":"markdown","e2f82283":"markdown","ded2864e":"markdown","4c2da5ed":"markdown","2cdbbcc4":"markdown","1988824f":"markdown","2dc40d08":"markdown","d2fd1133":"markdown","21c3ba65":"markdown","a14ae0cc":"markdown","265c4d01":"markdown","0d3e9258":"markdown","1ef975f9":"markdown","62a72c35":"markdown","460ea4ce":"markdown","2e96314f":"markdown","3f0b0a01":"markdown","7a3d9bd5":"markdown","bdd91e7b":"markdown","e7f172c2":"markdown","d9b30f80":"markdown","44af0556":"markdown","a5ae2b45":"markdown","28e94e24":"markdown","b48edc56":"markdown"},"source":{"c0b72068":"import pandas as pd\nimport numpy as np\n\n#import and remove any rows which has null values\n\ntripdata_202005 = pd.read_csv('..\/input\/cyclistic\/202005-divvy-tripdata.csv').dropna()\ntripdata_202006 = pd.read_csv('..\/input\/cyclistic\/202006-divvy-tripdata.csv').dropna()\ntripdata_202007 = pd.read_csv('..\/input\/cyclistic\/202007-divvy-tripdata.csv').dropna()\ntripdata_202008 = pd.read_csv('..\/input\/cyclistic\/202008-divvy-tripdata.csv').dropna()\ntripdata_202009 = pd.read_csv('..\/input\/cyclistic\/202009-divvy-tripdata.csv').dropna()\ntripdata_202010 = pd.read_csv('..\/input\/cyclistic\/202010-divvy-tripdata.csv').dropna()\ntripdata_202011 = pd.read_csv('..\/input\/cyclistic\/202011-divvy-tripdata.csv').dropna()\ntripdata_202012 = pd.read_csv('..\/input\/cyclistic\/202012-divvy-tripdata.csv').dropna()\ntripdata_202101 = pd.read_csv('..\/input\/cyclistic\/202101-divvy-tripdata.csv').dropna()\ntripdata_202102 = pd.read_csv('..\/input\/cyclistic\/202102-divvy-tripdata.csv').dropna()\ntripdata_202103 = pd.read_csv('..\/input\/cyclistic\/202103-divvy-tripdata.csv').dropna()\ntripdata_202104 = pd.read_csv('..\/input\/cyclistic\/202104-divvy-tripdata.csv').dropna()","d8832c5e":"tripdata_202005.info()\ntripdata_202006.info()\ntripdata_202007.info()\ntripdata_202008.info()\ntripdata_202009.info()\ntripdata_202010.info()\ntripdata_202011.info()\ntripdata_202012.info()\ntripdata_202101.info()\ntripdata_202102.info()\ntripdata_202103.info()\ntripdata_202104.info()","ea98fd87":"#Converting Dtypes in order to merge them\ntripdata_202005 = tripdata_202005.astype({\"start_station_id\": object, \"end_station_id\": object})\ntripdata_202006 = tripdata_202006.astype({\"start_station_id\": object, \"end_station_id\": object})\ntripdata_202007 = tripdata_202007.astype({\"start_station_id\": object, \"end_station_id\": object})\ntripdata_202008 = tripdata_202008.astype({\"start_station_id\": object, \"end_station_id\": object})\ntripdata_202009 = tripdata_202009.astype({\"start_station_id\": object, \"end_station_id\": object})\ntripdata_202010 = tripdata_202010.astype({\"start_station_id\": object, \"end_station_id\": object})\ntripdata_202011 = tripdata_202011.astype({\"start_station_id\": object, \"end_station_id\": object})","8fff9308":"#Merging Past 12 Months of Data into one\ntripdata = pd.concat([tripdata_202005, tripdata_202006, tripdata_202007,tripdata_202008,\n                    tripdata_202009,tripdata_202010,tripdata_202011,tripdata_202012,\n                    tripdata_202101,tripdata_202102,tripdata_202103,tripdata_202104])\n\ntripdata.info()","38fadb8d":"#Changing Dtype to datetime\ntripdata['started_at'] = pd.to_datetime(tripdata[\"started_at\"], format=\"%Y-%m-%d %H:%M:%S\")\ntripdata['ended_at'] = pd.to_datetime(tripdata[\"ended_at\"], format=\"%Y-%m-%d %H:%M:%S\")","9b457bcd":"tripdata.dtypes #check for dtype changes","49566fd5":"from datetime import datetime as dt\nfrom pandas.api.types import CategoricalDtype\n\ndayofweek_mapping= {\n    0: 'Monday', \n    1: 'Tuesday', \n    2: 'Wednesday', \n    3: 'Thursday', \n    4: 'Friday',\n    5: 'Saturday', \n    6: 'Sunday'\n} \n\nmonth_mapping= {\n    1: 'Jan', \n    2: 'Feb', \n    3: 'Mar', \n    4: 'Apr',\n    5: 'May', \n    6: 'Jun', \n    7: 'Jul', \n    8: 'Aug', \n    9: 'Sep', \n    10: 'Oct',\n    11: 'Nov', \n    12: 'Dec'\n}\n\ntripdata['Day'] = tripdata['started_at'].dt.day\ntripdata['Month'] = tripdata['started_at'].dt.month.map(month_mapping)\ntripdata['Year'] = tripdata['started_at'].dt.year\ntripdata['Day_of_Week'] = tripdata['started_at'].dt.dayofweek.map(dayofweek_mapping)\ntripdata['Starting_Time'] = tripdata['started_at'].dt.strftime('%H:%M')\ntripdata['Ride_Length'] = tripdata['ended_at'] - tripdata['started_at']\ntripdata['Ride_Length_minute'] = (tripdata['Ride_Length'].dt.total_seconds()\/60).round(2) # convert into minutes\n\ntripdata.head()","2e880b73":"filtered = tripdata[(tripdata['Ride_Length_minute'] > 0) & (tripdata['Ride_Length_minute'] < 720)]","a8927572":"filtered.nunique()","77b8124c":"#Finding out the number of each unique rideable type.\nbikes = pd.DataFrame(filtered['rideable_type'].value_counts())\nbikes.rename(columns = {'rideable_type' : 'Count'})","8e95bb6c":"round(filtered.groupby(\"member_casual\")['Ride_Length_minute'].describe(),2)","3a66a21a":"filtered.groupby(\"member_casual\")['Day_of_Week'].describe()","b331b9c1":"filtered.groupby(\"member_casual\")['Month'].describe()","f87370f3":"dayofweek = ['Monday', 'Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\ntable_1 = filtered.groupby([\"member_casual\", \"Day_of_Week\"])['Ride_Length_minute'].mean()\npd.DataFrame(table_1).reindex(index=dayofweek,level=1)","42dfa5f5":"months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\",\"Dec\"]\ntable_2 = filtered.groupby([\"member_casual\", \"Month\"])['Ride_Length_minute'].mean()\npd.DataFrame(table_2).reindex(index=months,level=1)","0d294ae5":"table_3 = filtered.groupby([\"member_casual\", \"Day_of_Week\"])['ride_id'].count()\npd.DataFrame(table_3).reindex(index=dayofweek,level=1)","e0be6d78":"import matplotlib.pyplot as plt\nimport seaborn as sb\n\n#Formatting graph aesthetics\nsb.set_style(\"darkgrid\")\nsb.set_context('paper', font_scale = 1.4)\n\n#Fixing X-Axis day order\nfield = filtered['Day_of_Week']\nday_order = ['Monday', 'Tuesday','Wednesday','Thursday', 'Friday', 'Saturday', 'Sunday']\nfiltered = filtered.set_index(field).loc[day_order]\n\n#Fixing X-Axis month order\nfield2 = filtered['Month']\nmonth_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nfiltered_month = filtered.set_index(field2).loc[month_order]\n\n#Filtering variables via member status\ncasual = filtered.loc[filtered['member_casual'] == 'casual']\nmember = filtered.loc[filtered['member_casual'] == 'member']","8914464b":"plt.figure(figsize = (10,6))\nsb.countplot(x = \"Year\", data = filtered, hue = 'member_casual')\nplt.title('Yearly Count of Rides')","0d29bdfa":"plt.figure(figsize = (10,6))\nsb.histplot(x = \"Month\", data = filtered_month, hue = 'member_casual', palette = 'Pastel1')\nplt.title('Monthly Count of Rides')","2e6eb3d5":"plt.figure(figsize = (10,6))\nsb.histplot(x = \"Day_of_Week\", data = casual, hue = 'rideable_type')\nplt.title(\"Casual\")\n\nplt.figure(figsize = (10,6))\nsb.histplot(x = \"Day_of_Week\", data = member, hue = 'rideable_type')\nplt.title(\"Member\")","b2447bb3":"#Started_at Timings\n\nsample = filtered.sample(9387)\nplt.figure(figsize = (20,10))\nsb.swarmplot(data = sample, x = 'Day_of_Week' , y = sample['started_at'].dt.hour, size = 0.8, order = ['Monday', 'Tuesday','Wednesday','Thursday', 'Friday', 'Saturday', 'Sunday'])\nplt.title('Start Timings for Cyclists')","6cd7cb77":"#Ended_at Timings\nplt.figure(figsize = (20,10))\nsb.swarmplot(data = sample, x = 'Day_of_Week' , y = sample['ended_at'].dt.hour, size = 0.8, order = ['Monday', 'Tuesday','Wednesday','Thursday', 'Friday', 'Saturday', 'Sunday'])\nplt.title('End Timings for Cyclists')","1c988e3f":"plt.figure(figsize = (20,20))\nsb.jointplot(data = sample, x = 'start_lat', y = 'start_lng', hue = 'member_casual', palette = 'pastel')","9efb57b3":"plt.figure(figsize = (20,20))\nsb.jointplot(data = sample, x = 'end_lat', y = 'end_lng', hue = 'member_casual', palette = 'pastel')","2ea1cd77":"# filtered.to_csv('cyclistic_cleaned_dataset.csv')","b372de62":"#### Check Data Types and Column Headers","733fde7e":"**Average ride_length for members and casual riders by Day of Week**","68091171":"## Export as CSV","72692e3d":"# Process\n\n1. Check the data for errors.\n2. Choose your tools.\n3. Transform the data so you can work with it effectively.\n4. Document the cleaning process.","2575170b":"**Most Popular Month to Cycle**\n","e2f82283":"### Swarmplot to visualise the timing where people start to cycle\n\nBy getting a random sample size based on the averaging the number of rides\/day , we can see that the highest number of cyclist usually start at **10:00 to 20:00** while the only a small number of them cycle at **00:00 to 05:00**","ded2864e":"# Ask \n\nThree questions will guide the future marketing program:\n1. How do annual members and casual riders use Cyclistic bikes differently?\n2. Why would casual riders buy Cyclistic annual memberships?\n3. How can Cyclistic use digital media to influence casual riders to become members?","4c2da5ed":"### Comparing the Yearly Number of Rides\n\nNote that due to the input files has more data on 2020, this graph cannot be used to derive any statistical conclusions. Having both 12 months of data for both 2020 and 2021 would give us more insight.","2cdbbcc4":"# Analyze\n\n1. Aggregate your data so it\u2019s useful and accessible.\n2. Organize and format your data.\n3. Perform calculations.\n4. Identify trends and relationships.\n\nCalculate the number of rides for users by day_of_week by adding Count of trip_id to Values.","1988824f":"#### Adding New columns for date and ride length","2dc40d08":"**All Column Headers are consistent.**\n\n`1. Convert start_station_id and end_station_id to Object`\n\n`2. Join all csv files into one (12months)`","d2fd1133":"**Descriptive Statistics**","21c3ba65":"**Most Popular Day of the week to Cycle**","a14ae0cc":"**Number of Rides for members and casual riders by Day of Week**","265c4d01":"#### Filtering out Ride Lengths that are negative and more than 24hours","0d3e9258":"### Google Data Analytics Case Study - Cyclistic\n\n### Lewis Lee | Jun 2021","1ef975f9":"# Prepare\n\nYou will use Cyclistic\u2019s historical trip data to analyze and identify trends. Download the previous 12 months of Cyclistic trip data [here](https:\/\/divvy-tripdata.s3.amazonaws.com\/index.html). (Note: The datasets have a different name because Cyclistic is a fictional company. For the purposes of this case study, the datasets are appropriate and will enable you to answer the business questions. The data has been made available by Motivate International Inc. under this [license](https:\/\/www.divvybikes.com\/data-license-agreement)","62a72c35":"### Overview of location where cyclists start cycling","460ea4ce":"#### Import Data Sets from May 2020 - Apr 2021","2e96314f":"**Average ride_length for members and casual riders by Month**","3f0b0a01":"### Comparing the Monthly Number of Rides\n\n1. As per what we expected, Aug is the month with the highest frequency of cyclists. Do note that number of members > casuals\n2. The trend between member and casual seems to be closely correlated, we can see the increase from Jan to Aug, followed by a decrease from Aug - Dec.\n    - this could be due to seasonal changes which is the largest attributing factor for cyclists","7a3d9bd5":"#### Checking Unique Values\n","bdd91e7b":"Cyclistic\u2019s finance analysts have concluded that annual members are much more profitable than casual riders. Although the\npricing flexibility helps Cyclistic attract more customers, Moreno believes that maximizing the number of annual members will be\nkey to future growth. Rather than creating a marketing campaign that targets all-new customers, Moreno believes there is a very\ngood chance to convert casual riders into members. She notes that casual riders are already aware of the Cyclistic program and\nhave chosen Cyclistic for their mobility needs.\n","e7f172c2":"#### About the company\nIn 2016, Cyclistic launched a successful bike-share oering. Since then, the program has grown to a fleet of 5,824 bicycles that\nare geotracked and locked into a network of 692 stations across Chicago. The bikes can be unlocked from one station and\nreturned to any other station in the system anytime.","d9b30f80":"#### Objectives\n\nMoreno has set a clear goal: Design marketing strategies aimed at converting casual riders into annual members. In order to do\nthat, however, the marketing analyst team needs to better understand how annual members and casual riders differ, why casual\nriders would buy a membership","44af0556":"Note the 3 different rideable types, 2 different memberships. Number of days\/month\/year seems to be correct.","a5ae2b45":"We can see the graphs between the cyclist's start and end timing are roughly similar. This is within our expectations since the average cyclist ride length is ~15 mins (for members) to ~35mins (for casuals)","28e94e24":"### Comparing the Day of Week Number of Rides, sorted by rideable types\n\nWe can see that for the casuals, most of them do not ride much on weekdays, rather, they prefer to ride on the weekends. On the other hand, the members consistently ride throughout the days of the week.","b48edc56":"# Visualisations"}}