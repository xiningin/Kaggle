{"cell_type":{"cecdc783":"code","88878a15":"code","92843b1e":"code","926ec520":"code","44143819":"code","ef7119ab":"code","9b08cb2f":"code","f581b5c1":"code","eeff0e77":"code","ec98ac1b":"code","0a09ec7d":"code","29879045":"code","11813751":"code","d4e8b96f":"code","145b9302":"code","e4e36df4":"code","52c095fa":"code","1d5ddba4":"code","3235f035":"code","e086a1a4":"code","4f8f4de5":"code","961c9b5c":"code","39a99e89":"code","f83d06d5":"code","337b18c7":"code","a8f5c393":"code","97e3ccf3":"code","b4fdc44b":"code","caeedede":"code","0d23f112":"code","aec3575d":"code","83403d62":"code","a2d5a092":"code","f2dfece7":"code","3d51e7f5":"code","e24ef5b5":"code","5b625628":"code","2fc32902":"code","45b9c3a1":"code","1103d8b6":"code","c6e1efd6":"code","71a75be8":"code","99bc80d0":"code","3bf2eb28":"code","96b323f0":"code","f05c9386":"code","f66e389f":"code","abae0880":"code","8f9fcda3":"code","d002cfb8":"code","bbde4ef5":"code","4c538de0":"code","03982b23":"code","86f627e0":"code","a131f39a":"code","87d1a4ad":"code","c8357cd6":"code","b23dbadd":"code","9f0f65a5":"code","091db4cd":"code","a4126e37":"code","c0747e62":"code","886972f0":"code","4b01473f":"code","2aefa572":"code","6f6d7298":"code","6fba11eb":"code","08a4f158":"code","ddc03588":"code","b995a808":"code","708ce8b8":"code","4cf051eb":"code","a278e9df":"code","465ec8a5":"code","a15d4487":"code","53b3be32":"code","0b319c9d":"code","bd53b02b":"code","eb9798de":"code","24e50a98":"code","77f426af":"code","8a9a308a":"code","7d974404":"code","187bd7ae":"markdown","4389287f":"markdown","b9d30cb3":"markdown","ed966ba9":"markdown","30f91922":"markdown","4aa1db3d":"markdown","366445fd":"markdown","d386229e":"markdown","a17b5cb7":"markdown","1c0bc78a":"markdown","833ed8da":"markdown","f3373cbe":"markdown","6b56cfc0":"markdown","eb05c6b3":"markdown","2032e232":"markdown","db339b45":"markdown","cbce7c36":"markdown","c69c43fc":"markdown","2d881873":"markdown","daeb13f3":"markdown","144ba36b":"markdown","eeb838a6":"markdown","aaa0c51f":"markdown","516c4609":"markdown","e18b792f":"markdown","75beb8b8":"markdown","7d0fd1fd":"markdown","82c66553":"markdown","178b76cf":"markdown","0a156df9":"markdown","b02d8293":"markdown","7ce636b4":"markdown","6651a3a1":"markdown","76ded49e":"markdown","72a20120":"markdown","bfb840a4":"markdown"},"source":{"cecdc783":"# importing libraries for data analysis\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom sklearn.preprocessing import LabelEncoder\n%matplotlib inline\n\n# importing machine learning libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, ElasticNetCV\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\nfrom sklearn.model_selection import GridSearchCV","88878a15":"!pip install openpyxl","92843b1e":"# importing our data\ndata = pd.read_excel('..\/input\/flight-fare-prediction-mh\/Data_Train.xlsx')\ndata.head()","926ec520":"data.info()","44143819":"# Creating a function to convert those columns into datetime dtype\ndef To_Datetime(column):\n    data[column] = pd.to_datetime(data[column])\n    return data[column]","ef7119ab":"# convert the columns we want into datetime\nTo_Datetime('Date_of_Journey')\nTo_Datetime('Dep_Time')\nTo_Datetime('Arrival_Time')","9b08cb2f":"# creating new columns\ndata['Day_of_Journey'] = data['Date_of_Journey'].dt.day\ndata['Month_of_Journey'] = data['Date_of_Journey'].dt.month\n\ndata['Dep_hour'] = data['Dep_Time'].dt.hour\ndata['Dep_minute'] = data['Dep_Time'].dt.minute\n\ndata['Arrival_hour'] = data['Arrival_Time'].dt.hour\ndata['Arrival_minute'] = data['Arrival_Time'].dt.minute\n\ndata.drop('Date_of_Journey',axis=1,inplace=True)\ndata.drop('Dep_Time',axis=1,inplace=True)\ndata.drop('Arrival_Time',axis=1,inplace=True)","f581b5c1":"# converting duration into minutes\ndata['Duration'] = data['Duration'].str.replace('h','*60').str.replace(' ','+').str.replace('m','*1').apply(eval)","eeff0e77":"# let's take a look at our data now\ndata.info()","ec98ac1b":"# visualizing the distribution of Price column\nplt.figure(figsize=(8,5),dpi=100)\nsns.histplot(data=data,x='Price',bins=25);","0a09ec7d":"# let's try to visualize our data by comparing price and airline columns first\nplt.figure(figsize=(8,5),dpi=100)\nsns.boxplot(x='Airline',y='Price',data=data)\nplt.xticks(rotation=90);","29879045":"data['Airline'].value_counts()","11813751":"# let's visualize the count of each airline\nplt.figure(figsize=(7,4),dpi=100)\nsns.barplot(x=data['Airline'].value_counts().index,y=data['Airline'].value_counts().values)\nplt.xticks(rotation=90)\nplt.ylim(0,100);","d4e8b96f":"data['Additional_Info'].value_counts()","145b9302":"data[data['Additional_Info']=='No Info']","e4e36df4":"data.at[[795,2212,9220],'Additional_Info'] = 'No info'","52c095fa":"# LET'S visualize additional_info column\nplt.figure(figsize=(8,5),dpi=100)\nsns.boxplot(x='Additional_Info',y='Price',data=data)\nplt.xticks(rotation=90);","1d5ddba4":"plt.figure(figsize=(7,4),dpi=100)\nsns.barplot(x=data['Additional_Info'].value_counts().index,y=data['Additional_Info'].value_counts().values)\nplt.xticks(rotation=90)\nplt.ylim(0,100);","3235f035":"# let's visualize the duration and price relationship\nplt.figure(figsize=(7,4),dpi=100)\nsns.scatterplot(x='Duration',y='Price',data=data);","e086a1a4":"plt.figure(figsize=(12,6),dpi=200)\nsns.scatterplot(x='Duration',y='Price',data=data,hue='Airline',alpha=0.7,legend='brief');","4f8f4de5":"data[data['Price']>70000]","961c9b5c":"data['Total_Stops'].value_counts()","39a99e89":"# visualizing total_stops and price\nplt.figure(figsize=(8,5),dpi=100)\nsns.boxplot(x='Total_Stops',y='Price',data=data);","f83d06d5":"# lastly we will see the source and destination's relation with price\nplt.figure(figsize=(8,5),dpi=100)\nsns.boxplot(x='Source',y='Price',data=data);","337b18c7":"plt.figure(figsize=(8,5),dpi=100)\nsns.boxplot(x='Destination',y='Price',data=data);","a8f5c393":"data['Destination'].replace('New Delhi','Delhi',inplace=True)","97e3ccf3":"# visualize again\nplt.figure(figsize=(8,5),dpi=100)\nsns.boxplot(x='Destination',y='Price',data=data);","b4fdc44b":"# let's take a look at our data\ndata.head()","caeedede":"# let's see missing values\ndata.isna().sum()","0d23f112":"data[data['Route'].isna()]","aec3575d":"data = data.dropna()","83403d62":"data.describe().T","a2d5a092":"data[data['Duration']==5]","f2dfece7":"# drop this row \ndata = data.drop(index=6474,axis=0)","3d51e7f5":"data.describe().T","e24ef5b5":"data.info()","5b625628":"# making a copy of our data\ndata_copy = data.copy()","2fc32902":"data_copy.head()","45b9c3a1":"# encoding Total_Stops\n\ntotal_dict = {'non-stop':0,\n              '1 stop':1,\n              '2 stops':2,\n              '3 stops':3,\n              '4 stops':4}\n\ndata_copy['Total_Stops'] = data_copy['Total_Stops'].map(total_dict)\ndata_copy.head()","1103d8b6":"data_copy['Additional_Info'].unique()","c6e1efd6":"data_copy['Route'].value_counts()","71a75be8":"# encoding the route column\n\ndata_copy['Route_A'] = data_copy['Route'].str.split('\u2192').str[0]\ndata_copy['Route_B'] = data_copy['Route'].str.split('\u2192').str[1]\ndata_copy['Route_C'] = data_copy['Route'].str.split('\u2192').str[2]\ndata_copy['Route_D'] = data_copy['Route'].str.split('\u2192').str[3]\ndata_copy['Route_E'] = data_copy['Route'].str.split('\u2192').str[4]","99bc80d0":"data_copy.head()","3bf2eb28":"# filling the missing values\nfor i in ['Route_A','Route_B','Route_C','Route_D','Route_E']:\n    data_copy[i] = data_copy[i].fillna('None')","96b323f0":"data_copy.isna().sum()","f05c9386":"# encoding the routes\n\nle = LabelEncoder()\n\nfor i in ['Route_A','Route_B','Route_C','Route_D','Route_E']:\n    data_copy[i] = le.fit_transform(data_copy[i])","f66e389f":"# we will also encode the Airline column using labelencoder\ndata_copy['Airline'] = le.fit_transform(data_copy['Airline'])","abae0880":"# we can drop the original route column\ndata_copy.drop('Route',axis=1,inplace=True)\ndata_copy.head()","8f9fcda3":"object_df = data_copy.select_dtypes(include='object')\nnumeric_df = data_copy.select_dtypes(exclude='object')","d002cfb8":"# encoding object_df\n\nobject_df_dummies = pd.get_dummies(object_df,drop_first=True) ","bbde4ef5":"object_df_dummies.head()","4c538de0":"# concatenating the two dataframes\nfinal_df = pd.concat([numeric_df,object_df_dummies],axis=1)","03982b23":"# final_df.head().T","86f627e0":"# final_df.to_excel(\"data\/Data_Train_Cleaned.xlsx\",index=False)","a131f39a":"# importing the cleaned data\n#data = pd.read_excel('data\/Data_Train_Cleaned.xlsx')\n#data.head()","87d1a4ad":"# split the data into X features and y label\nX = final_df.drop('Price',axis=1)\ny = final_df['Price']","c8357cd6":"# split the data into train and test sets\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","b23dbadd":"from yellowbrick.regressor import PredictionError","9f0f65a5":"# let's create a function to predict and evaluate our model\ndef pred_eval(model):\n    y_pred = model.predict(X_test)\n    print('mae is ',mean_absolute_error(y_test,y_pred))\n    print('rmse is ',np.sqrt(mean_squared_error(y_test, y_pred)))\n    print('r2_score is ',r2_score(y_test,y_pred))\n    plt.figure(figsize=(10,6),dpi=100)\n    visualizer = PredictionError(model,alpha=0.5)\n    visualizer.fit(X_train, y_train)  \n    visualizer.score(X_test, y_test)  \n    visualizer.show()","091db4cd":"# instantiating the model\nlr_model = LinearRegression(normalize=True)","a4126e37":"# fit the model\nlr_model.fit(X_train,y_train)","c0747e62":"# Evaluate the model\npred_eval(lr_model)","886972f0":"# let's also check the coefficients\nlr_model.coef_","4b01473f":"# Instantiating the ElasticNetCV model\n\nelastic_net_model = ElasticNetCV(l1_ratio=[.1, .5, .7, .9, .95, .99, 1],\n                                 eps=0.001,\n                                 n_alphas=100,\n                                 cv=10,\n                                 max_iter=10000,\n                                 n_jobs=-1)","2aefa572":"# Fit the model\nelastic_net_model.fit(X_train,y_train)","6f6d7298":"# let's check the l1 ratio\nelastic_net_model.l1_ratio_","6fba11eb":"# let's check the alpha value\nelastic_net_model.alpha_","08a4f158":"# evaluate the model\npred_eval(elastic_net_model)","ddc03588":"# coefficients\nelastic_net_model.coef_","b995a808":"# instantiate our model\ndec_tree_model = DecisionTreeRegressor()","708ce8b8":"# fit the model\ndec_tree_model.fit(X_train,y_train)","4cf051eb":"pred_eval(dec_tree_model)","a278e9df":"dec_tree_model.feature_importances_","465ec8a5":"# first we'll see the baseline performance\nrf_model = RandomForestRegressor()","a15d4487":"rf_model.fit(X_train,y_train)","53b3be32":"pred_eval(rf_model)","0b319c9d":"# make a dictionary of all the hyperparameters\n\nrf_grid = {'n_estimators':[100,200,500],\n           'max_depth':[None,5,10],\n           'min_samples_split':[2,3,4],\n           'min_samples_leaf':[1,2,3]}","bd53b02b":"# Instantiate the model with GridSearchCV\nrf_cv = GridSearchCV(RandomForestRegressor(),\n                     param_grid=rf_grid,\n                     cv=5,\n                     n_jobs=-1,\n                     verbose=True)","eb9798de":"# fitting the cross validated model \nrf_cv.fit(X_train,y_train)","24e50a98":"# check the best hyperparameters\nrf_cv.best_params_","77f426af":"# evaluate\npred_eval(rf_cv)","8a9a308a":"# visualizing the feature importance of RandomForest (baseline)\nfrom yellowbrick.model_selection import FeatureImportances\nplt.figure(figsize=(10,6),dpi=100)\nviz = FeatureImportances(rf_model,relative=False)\n#fit on train dataset\nviz.fit(X_train, y_train)\n#show plot and save at output path\nviz.show()","7d974404":"# Saving the model\nfrom joblib import dump,load\n# dump(rf_model,'saved_models\/rf_model.joblib')","187bd7ae":"we can see that jet airways business airline has the highest prices out of all and it's also quite obvious because \nbusiness class fares are higher than economy class","4389287f":"### LinearRegression\n\nLet's try LinearRegression first","b9d30cb3":"for encoding the `Route` column we need to separate the routes and then encode them one by one","ed966ba9":"Also there are very less number of 2 long layover , red-eye and 1 short layover flights","30f91922":"### Decision Tree","4aa1db3d":"most of the coeffs are 0 since our model is completely lasso now \n\nlinear models are not giving good results so let's move to Tree based models","366445fd":"If we observe the duration row we can see that the minimum value for duration is only 5 mins\nbut it's impossible for any flight to have a min duration of 5 mins \nso there might've been some kind of mistake while creating this record,  \nnow we can find some value to replace this or we can just drop this row","d386229e":"### RandomForestRegressor with GridSearchCV","a17b5cb7":"#### Feature importance","1c0bc78a":"### Workflow For the project\n\nStep 1 - Download the data from kaggle- https:\/\/www.kaggle.com\/nikhilmittal\/flight-fare-prediction-mh\n         and import the data\n\nStep 2 - EDA (Exploratory Data Analysis)\n\nStep 3 - Preprocessing the data (Converting the data into numeric form and filling the missing values)\n\nStep 4 - Fit a Machine Learning model and Evaluate the model on the data\n\nStep 5 - Improving the model (hyperparameter tuning,cross-validation)\n\nStep 6 - Evaluating and saving final model","833ed8da":"everything is looking good now. let's move to encoding the categorical features","f3373cbe":"only 4 business class flights and these are probably the ones with the highest prices\nand also the 'No Info' and the 'No info' classes are the same so we can just merge them into one","6b56cfc0":"## Data Cleaning\/Preprocessing\n\nTwo things to do here \n* taking care of missing values\n* encoding categorical features","eb05c6b3":"Now that we have converted those columns into datetime we need to extract the day,hours and minutes from those columns\n","2032e232":"**By analysing the data I've come to know that the price of the flight depends heavily on the The class(business,economy),\nthe airline type and the total number of stops. Also more the number of stopovers the longer the duration of the flight** ","db339b45":"### Elastic Net\n","cbce7c36":"RandomForestRegressor is performing significantly better than all other models\n\nso we'll try to improve it with hyperparameter tuning","c69c43fc":"Now only 3 columns are remaining to encode. We will use OneHotEncoding for those columns","2d881873":"**NOTE**-\nAs we can see that all the features are of object datatype but we don't want the `Date_of_Journey`, `Dep_Time`, `Arrival_Time` to be object, instead we want to convert them into 'DATETIME' and extract the months, days, hours and minutes from them and create new features like `Month_of_Journey`, `Day_of_Journey`,etc.","daeb13f3":"we need to encode the `Airline`,`Source`,`Destination`,`Total_Stops`,`Additional_Info`,`Route`\n\nbefore doing that we will make a copy of our dataset","144ba36b":"### RandomForestRegressor","eeb838a6":"For the `Duration` column we will convert the hours into minutes and add to the existing minutes\nso for eg: 1hr 10 mins will become 70 ","aaa0c51f":"So here we can see that the `Price` column is our label and all the other columns are our features ","516c4609":"our model is completely Lasso","e18b792f":"Here we're done with the data cleaning \n\nwe will now save this dataset and move on to the Machine Learning part","75beb8b8":"## EDA\n\nlet's analyse our data and try to find some relation between the features and the label","7d0fd1fd":"## Machine Learning\n\nWe are going to test 4 machine learning models on this dataset\n* Linear Regression\n* Elastic Net\n* Decision Tree\n* RandomForestRegressor","82c66553":"luckily those 2 values belong to a single row so we can just drop that row","178b76cf":"we can see that the huge rmse error is because of those 2 outliers\n","0a156df9":"The 3 flights with prices higher than 40000 and additional_Info as 'No info' can also be business class flights","b02d8293":"even though the price of jet airways business is the highest of all \nbut we can see here that there are only 6 of those flights ","7ce636b4":"All right we have now extracted all the information from the datetime columns","6651a3a1":"our data is pretty much cleaned already. We have only 2 missing values. Let's take a look at those rows","76ded49e":"for majority of the airlines the price is same as per the duration \nthe flights with high prices we are seeing here are probably the business class and premium economy class airlines","72a20120":"Turns out that the baseline RandomForest performed slightly better than crossvalidated one\n\nof course we can experiment and try to increase the number of hyperparameters in our gridsearch in hopes of achieving more better results\n\nwe can also experiment with the encoding of data while data cleaning to get different results\n\nor we can collect more data ","bfb840a4":"here New Delhi and Delhi can be the same so we will merge them "}}