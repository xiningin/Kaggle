{"cell_type":{"912e5dea":"code","a6723e76":"code","856e0545":"code","2c2193fe":"code","c6515807":"code","cab9d727":"code","ea12da68":"code","1a9e9ef9":"code","7fb3a38d":"code","7e518524":"code","ac85bc4a":"code","2c9a0e9a":"code","fd652c7d":"code","cdc3cc71":"code","0067557a":"code","853bfa39":"code","b846637e":"code","3020d9da":"code","f8035452":"code","243e8c66":"code","725ea7dd":"code","8b199a89":"code","2c05a1f0":"code","42e1fe57":"code","e6b49ac0":"code","d9cd766b":"code","50892be4":"code","a261156a":"code","3872c32c":"code","4cd29f77":"code","47a69875":"code","d7ae3646":"code","2e859852":"code","9941aba9":"code","57d0c40f":"code","d94b99f5":"code","b578bd6b":"code","4922508a":"code","4bb2c774":"code","bf52e1a9":"markdown","44c9e58a":"markdown","1139ac1e":"markdown","25ab79d3":"markdown","683a0064":"markdown","99112d1d":"markdown","805c3382":"markdown"},"source":{"912e5dea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a6723e76":"Q = pd.read_csv('..\/input\/stock-market-wide-datasets\/000000000000Q',header=0, parse_dates=[0], index_col=0, squeeze=True)\nAM = pd.read_csv('..\/input\/stock-market-wide-datasets\/AM',header=0, parse_dates=[0], index_col=0, squeeze=True)\nevent = pd.read_csv('..\/input\/stock-market-wide-datasets\/event',header=0, parse_dates=[0], index_col=0, squeeze=True)\nnews = pd.read_csv('..\/input\/stock-market-wide-datasets\/news',header=0, parse_dates=[0], index_col=0, squeeze=True)","856e0545":"Q.head()","2c2193fe":"Q.tail()","c6515807":"AM.head()","cab9d727":"AM.tail()","ea12da68":"event.head()","1a9e9ef9":"event.tail()","7fb3a38d":"news.head()","7e518524":"Q.info()","ac85bc4a":"AM.describe()","2c9a0e9a":"Q.ticker.value_counts()[:3]","fd652c7d":"AM.symbol.value_counts()[:3]","cdc3cc71":"plt.figure(figsize=(10,10))\nplt.bar(Q.ticker.value_counts().index[:20],Q.ticker.value_counts()[:20])\nplt.xticks(rotation=90)\nplt.show()","0067557a":"plt.figure(figsize=(15,10))\nplt.bar(AM.symbol.value_counts().index[:101],AM.symbol.value_counts()[:101])\nplt.xticks(rotation=90)\nplt.show()","853bfa39":"AM.symbol[AM.symbol == 'T']","b846637e":"plt.figure(figsize=(10,5))\nplt.scatter(range(len(AM.symbol[AM.symbol == 'T'][:1000])),AM.symbol[AM.symbol == 'T'].index[:1000])\nplt.ylabel('time')\nplt.xticks(rotation=60)","3020d9da":"plt.figure(figsize=(15,5))\nplt.plot(AM.symbol[AM.symbol=='T'].index)\nplt.show()","f8035452":"plt.figure(figsize=(15,5))\nplt.plot(Q.ticker[Q.ticker=='T'].index, c='r')\nplt.show()","243e8c66":"plt.figure(figsize=(20,5))\nAM_raw = pd.read_csv('..\/input\/stock-market-wide-datasets\/AM')\nQ_raw = pd.read_csv('..\/input\/stock-market-wide-datasets\/000000000000Q')\nplt.plot(Q_raw[Q_raw.ticker == 'T'][:50000].bid_price, label='bid_price')\nplt.plot(Q_raw[Q_raw.ticker == 'T'][:50000].ask_price,c='r', label='ask_price')\nplt.plot(AM_raw[AM_raw.symbol == 'T'][:50000].close_price, c='g',label='close_price')\nplt.legend(loc='best')","725ea7dd":"AM_raw.columns","8b199a89":"plt.figure(figsize=(20,5))\nplt.plot(AM_raw.volume[:100])\nplt.plot(AM_raw.accumulated_volume[:100], c= 'g')\nplt.plot(AM_raw.volume[:100].cumsum(), c='r')","2c05a1f0":"plt.figure(figsize=(20,5))\nplt.plot(AM_raw.open_price[:1000], label='open price')\nplt.plot(AM_raw.high_price[:1000], c='g',label='high price')\nplt.plot(AM_raw.low_price[:1000], c='r', label='low price')\nplt.plot(AM_raw.average_price[:1000], c='orange',label='average price')\n#plt.plot(AM_raw.close_price, c='k',label='close price')\nplt.legend(loc='best')\nplt.show()","42e1fe57":"plt.figure(figsize=(20,5))\nplt.plot(AM_raw.close_price[:1000], c='k',label='close price')","e6b49ac0":"plt.figure(figsize=(20,5))\nplt.plot(AM_raw.VWAP[:1000])","d9cd766b":"plt.figure(figsize=(20,5))\nplt.scatter(AM.index.minute[:10000],AM.VWAP[:10000])","50892be4":"import plotly.express as px\npx.scatter(Q, x='ask_price',y='bid_price',color='ticker', title='Ask Price vs Bid price')","a261156a":"from statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()","3872c32c":"plt.plot(AM.close_price)","4cd29f77":"mini_AM = AM[:1000]","47a69875":"rolling_mean = mini_AM.close_price.rolling(window = 12).mean()\nrolling_std = mini_AM.close_price.rolling(window = 12).std()\n\nplt.plot(mini_AM.close_price, color = 'green', label = 'Original')\nplt.plot(rolling_mean, color = 'red', label = 'Rolling Mean')\nplt.plot(rolling_std, color = 'black', label = 'Rolling Std')\nplt.legend(loc = 'best')\nplt.title('Rolling Mean & Rolling Standard Deviation')\nplt.show()","d7ae3646":"result = adfuller(mini_AM['close_price'])\nprint('ADF Statistic: {}'.format(result[0]))\nprint('p-value: {}'.format(result[1]))\nprint('Critical Values:')\nfor key, value in result[4].items():\n    print('\\t{}: {}'.format(key, value))","2e859852":"df_log = np.log(mini_AM.close_price)\nplt.plot(df_log)","9941aba9":"def get_stationarity(timeseries):\n    \n    # rolling statistics\n    rolling_mean = timeseries.rolling(window=12).mean()\n    rolling_std = timeseries.rolling(window=12).std()\n    \n    # rolling statistics plot\n    original = plt.plot(timeseries, color='blue', label='Original')\n    mean = plt.plot(rolling_mean, color='red', label='Rolling Mean')\n    std = plt.plot(rolling_std, color='black', label='Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False)\n    \n    # Dickey\u2013Fuller test:\n    result = adfuller(timeseries)\n    print('ADF Statistic: {}'.format(result[0]))\n    print('p-value: {}'.format(result[1]))\n    print('Critical Values:')\n    for key, value in result[4].items():\n        print('\\t{}: {}'.format(key, value))","57d0c40f":"rolling_mean = df_log.rolling(window=12).mean()\ndf_log_minus_mean = df_log - rolling_mean\ndf_log_minus_mean.dropna(inplace=True)\nget_stationarity(df_log_minus_mean)","d94b99f5":"df_log_shift = df_log - df_log.shift()\ndf_log_shift.dropna(inplace=True)\nget_stationarity(df_log_shift)","b578bd6b":"#decomposition = seasonal_decompose(np.log(mini_AM.close_price)) \nmodel = ARIMA(df_log, order=(2,1,2))\nresults = model.fit(disp=-1)\nplt.plot(df_log_shift)\nplt.plot(results.fittedvalues, color='red')","4922508a":"predictions_ARIMA_diff = pd.Series(results.fittedvalues, copy=True)\npredictions_ARIMA_diff_cumsum = predictions_ARIMA_diff.cumsum()\npredictions_ARIMA_log = pd.Series(df_log.iloc[0], index=df_log.index)\npredictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum, fill_value=0)\npredictions_ARIMA = np.exp(predictions_ARIMA_log)\nplt.scatter(range(len(mini_AM.close_price[:1000])),mini_AM.close_price[:1000], c='r')\nplt.scatter(range(len(predictions_ARIMA[:1000])),predictions_ARIMA[:1000],)","4bb2c774":"results.plot_predict(1,264)","bf52e1a9":"## We can see ADF Statistic is far from the critical value and the p-value is higher than the threshold(0.05).","44c9e58a":"## Dickey-Fuller Test","1139ac1e":"## Let's See How the ticker 'T' moves in AM dataset","25ab79d3":"## From above plots We can see that high_price, low_price, average_price, close_price don't differ much in amounts","683a0064":"## We can see how high the ask prices are. And the ask prices are higher compared to the bid prices.","99112d1d":"## ARIMA model","805c3382":"## Let's See How the symbol 'T' moves in Q dataset"}}