{"cell_type":{"e11c130a":"code","8a2e2541":"code","ccb4631e":"code","7a5fde7b":"code","75c27477":"code","7ed2cffa":"code","db6051cf":"code","886c9765":"code","65789abe":"code","3f3d9a55":"code","e0e93590":"code","6fa20a21":"code","0fc078ee":"code","eae938ad":"code","26250484":"code","1b46406b":"code","0af23b71":"code","fe120946":"code","d8425210":"code","365e4ac6":"code","015f9c4c":"code","04331eb5":"code","32aec28b":"code","c1ed7940":"code","c2e0edea":"code","87575d08":"code","badfdec4":"code","9bcea6a2":"code","eddac080":"code","73244667":"code","c68a1ab2":"code","cb9d87c2":"code","b586d9aa":"code","ba3cc8d3":"code","c2449fd1":"code","b993d432":"code","f43ea0db":"code","3c679716":"code","40228546":"code","a85d89c2":"code","d8e44055":"code","1ebe33ef":"code","e2d42fda":"code","050f73c9":"code","cc3a08a7":"code","c0df0a5c":"code","3b6216da":"code","d45e79c6":"code","d3d29c9a":"code","72b53589":"code","5f0cdad0":"code","c7bd4b0a":"code","ae973e5e":"code","87d0d19e":"code","d2af68cf":"code","217ddc19":"code","f53bbf83":"code","18c9a9aa":"code","cb17b5fc":"code","2e83eb78":"code","33984780":"code","cf1c675d":"code","bf51db65":"code","086ba9ac":"code","fcec2835":"code","c8791aba":"code","58639e19":"code","4c2332ef":"code","b155ba9c":"code","a3472ed0":"code","a7ea9f46":"code","f1e7dfab":"code","0f89f42c":"code","016ba42f":"code","8b172869":"code","a45fc6b0":"code","9fdd0b43":"code","b0a6be7a":"code","534c17f6":"code","42d11de4":"code","74ae8352":"code","1794344a":"code","dc202880":"code","de6acc66":"code","073d6d1d":"code","1180576e":"code","71bf78ca":"code","be0a6488":"code","812cb5ab":"code","6a265363":"code","f028803d":"code","b95c5b86":"code","022cff79":"code","0811b772":"code","ac1f996a":"code","b8077322":"code","1649ec35":"code","a732d528":"code","2d889cea":"code","5cc09c5f":"code","69dfdd48":"code","ff91bf5a":"code","2b124d2e":"code","ab4ebc8a":"code","5fc77ef5":"code","f9b84f19":"code","0f6bb714":"code","4ec4dea3":"code","79c9eefc":"code","ad80656b":"code","1312a924":"code","e586a101":"markdown","e28bdd76":"markdown","fd7ffe8f":"markdown","e6119a64":"markdown","4626b217":"markdown","3b9dd338":"markdown","666d92e4":"markdown","7e5770fa":"markdown","70cbed05":"markdown","6353b005":"markdown","fe2bbc80":"markdown","33f91d3d":"markdown","61396f5a":"markdown","ff6d6886":"markdown","2d81293c":"markdown","5853e8be":"markdown","96e3c771":"markdown","ba4f062a":"markdown","9768218c":"markdown","d33ff1a2":"markdown","e4e67b57":"markdown","2914270b":"markdown","4c26a782":"markdown","a6b721bc":"markdown","12c713fa":"markdown","e1a296df":"markdown","3b6ea76e":"markdown","7c882965":"markdown","57fb27a4":"markdown","da5678f3":"markdown","7d8b9f3c":"markdown","6c4d20ca":"markdown","1c1ba149":"markdown","5c206bf1":"markdown","e6f84d2f":"markdown","57ed291c":"markdown","363b5e19":"markdown","5d8d3169":"markdown","7a90a01e":"markdown","d58c6ec8":"markdown","55ef1c84":"markdown","3cb94d35":"markdown","ee854df0":"markdown","65d00f0f":"markdown","8d0ba2d5":"markdown","3487467c":"markdown","a9877aa1":"markdown","a0f0be5e":"markdown","e2fa4f55":"markdown","3c496937":"markdown","9ffc712b":"markdown","124f877b":"markdown","8668309f":"markdown"},"source":{"e11c130a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sys\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom tqdm.notebook import tqdm\nfrom catboost import CatBoostRegressor\nfrom sklearn.preprocessing import LabelEncoder","8a2e2541":"print('Python       :', sys.version.split('\\n')[0])\nprint('Numpy        :', np.__version__)","ccb4631e":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","7a5fde7b":"def mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred-y_true)\/y_true))","75c27477":"def intersection_stat(col1,col2):   \n    col1_set = set(col1.astype(str).unique())\n    col2_set = set(col2.astype(str).unique())\n    intersection = col1_set.intersection(col2_set)\n    print(len(col1_set),len(col2_set),len(intersection))","7ed2cffa":"# \u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435! \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 train \u0438\u0437 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\ntrain = pd.read_csv('..\/input\/final-car-price-prediction-df-parsed-sep-2021\/train_df_full_part1.csv') # \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\ntest = pd.read_csv('..\/input\/data-set-auto-2022\/test.csv')\nsample_submission = pd.read_csv('..\/input\/data-set-auto-2022\/sample_submission (3).csv')","db6051cf":"test.head(2)","886c9765":"train.head(2)","65789abe":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0432 train \u0438 test \ndif_list = list(set(test.columns).difference(train.columns))\nprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043b\u043e\u043d\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 train, \u043d\u043e \u0435\u0441\u0442\u044c \u0432 test:\", dif_list)\ndif_list = list(set(train.columns).difference(test.columns))\nprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043b\u043e\u043d\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 test, \u043d\u043e \u0435\u0441\u0442\u044c \u0432 train:\", dif_list)","3f3d9a55":"train.info()","e0e93590":"test.info()","6fa20a21":"# \u0442\u0430\u043a \u043a\u0430\u043a \u0432 test \u044d\u0442\u0438\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u043d\u0435\u0442, \u0442\u043e \u043c\u044b \u0438\u0445 \u0443\u0434\u0430\u043b\u044f\u0435\u043c, \u043a\u043e\u043b\u043e\u043d\u043a\u0443 price \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\ntrain = train.drop(['views','date_added','region'], axis = 1)\ntrain.head(2)","0fc078ee":"train.info()","eae938ad":"test.info()","26250484":"# \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0438 \u0432 train, \u0438 \u0432 test\ncols_intersection = list(set(test.columns).intersection(train.columns))","1b46406b":"# \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0432 \u0442\u0438\u043f\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\ncols_type_dif = []  # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\nprint(\"\u0420\u0430\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432 \u0442\u0438\u043f\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f:\")\n\nfor col in cols_intersection:\n    if type(test[col][0]) != type(train[col][0]):\n        print(\n            f\"\\t- \u043a\u043e\u043b\u043e\u043d\u043a\u0438 {col}: \u0434\u043b\u044f train - {type(train[col][0])}, \u0434\u043b\u044f test - {type(test[col][0])}\")\n        cols_type_dif.append(col)","0af23b71":"# \u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445 \u043a \u043e\u0434\u043d\u043e\u043c\u0443 \u0442\u0438\u043f\u0443? \u0432 \u0442\u0435\u0445 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\n\ntest.numberOfDoors = test.numberOfDoors.astype(float)\ntrain.modelDate= train.modelDate.astype('Int64')\ntrain.productionDate= train.productionDate.astype('Int64')\ntrain.sell_id= train.sell_id.astype('Int64')\ntest.mileage = test.mileage.astype(float) \ntrain.parsing_unixtime= train.parsing_unixtime.astype('Int64')","fe120946":"# \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u044d\u043c\u0443 \u043a\u043e\u043b\u043e\u043d\u043a\u0443, \u0442\u0430\u043a \u043a\u0430 \u0432 train \u043e\u043d\u0430 \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0430, \u0430 \u0432 test \u043d\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\ntrain = train.drop(['model_info'], axis = 1)","d8425210":"test.car_url.value_counts()","365e4ac6":"train.car_url.value_counts()","015f9c4c":"train.shape","04331eb5":"train.drop_duplicates().shape","32aec28b":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u0441\u0441\u044b\u043b\u043e\u043a\ntmp = train[train.car_url == 'https:\/\/auto.ru\/cars\/new\/group\/toyota\/land_cruiser_prado\/22495145\/22496061\/1104717062-6ae14d83\/']\nfor col in tmp.columns:\n    print(col,tmp[col].nunique())","c1ed7940":"train.complectation_dict = train.complectation_dict.astype(str)","c2e0edea":"tmp.parsing_unixtime.diff().describe()","87575d08":"# \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f parsing_unixtime, \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u0438\u0445 \u0441 car_url \u0438 \u0431\u0435\u0440\u0435\u043c \u0441\u0430\u043c\u043e\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 parsing_unixtime\ntrain = train.sort_values('parsing_unixtime').groupby('car_url').tail(1).reset_index(drop=True)","badfdec4":"test.car_url.value_counts()","9bcea6a2":"train.car_url.value_counts()","eddac080":"train.complectation_dict.value_counts()","73244667":"test.complectation_dict.value_counts()","c68a1ab2":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a available_options \u0438\u0437 complectation_dict\nimport json\n\ndef get_available_options(x):\n    s = str(x)\n    if s =='nan':\n        return []\n    return json.loads(x)['available_options']\n    \ntest.complectation_dict = test.complectation_dict.map(get_available_options)","cb9d87c2":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u0432 train \u0438 test \u043f\u043e complectation_dict\nintersection_stat(train.complectation_dict,test.complectation_dict)  ","b586d9aa":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ntest.model_info.isnull().sum()","ba3cc8d3":"# \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0443, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c nan  \ndef get_available_options_1(x):\n    s = str(x)\n    if s =='nan':\n        return []\n    return eval(x)\n    \ntrain.complectation_dict = train.complectation_dict.map(get_available_options_1)","c2449fd1":"# \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 complectation_dict \u0432 train \ntrain.complectation_dict = train.complectation_dict.map(sorted)","b993d432":"# \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 complectation_dict \u0432 test\ntest.complectation_dict = test.complectation_dict.map(sorted)","f43ea0db":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043d\u043e\u0432\u0430 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u0432 train \u0438 test \u043f\u043e complectation_dict\nintersection_stat(train.complectation_dict,test.complectation_dict)  ","3c679716":"test.complectation_dict[2]","40228546":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u043e\u043f 20-\u0442\u0438 \u043e\u043f\u0446\u0438\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ncomplectation_list = list(train.complectation_dict.values)+list(test.complectation_dict.values)\ncar_options = []\nfor options in complectation_list:\n    car_options += options\ntop_20_options = pd.Series(car_options).value_counts().head(20).index.values ","a85d89c2":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u043d\u043e\u0432\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u0438\u0437 \u0442\u043e\u043f 20\ndef create_features_for_top_20_options(df,options_list):\n    for option in options_list:\n        df['HAS_OPTION_'+ option] = df.complectation_dict.map(lambda x: int(option in x))\n\ncreate_features_for_top_20_options(train,top_20_options)\ncreate_features_for_top_20_options(test,top_20_options)","d8e44055":"train","1ebe33ef":"train.engineDisplacement.value_counts()","e2d42fda":"test.engineDisplacement.value_counts()","050f73c9":"# \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0447\u0438\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 engineDisplacement \u0438 \u0434\u0435\u043b\u0430\u0435\u0442 \u044d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0446\u0435\u043b\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c\ndef engineDisplacement_convertion(x):\n    x = str(x).split(' ')[0]\n    if x == 'nan' or x == 'undefined':\n        return np.nan\n    return float(x)\n\ntest.engineDisplacement = test.engineDisplacement.map(engineDisplacement_convertion)\ntrain.engineDisplacement = train.engineDisplacement.map(engineDisplacement_convertion)","cc3a08a7":"train.enginePower.value_counts()\ntrain.enginePower.unique()","c0df0a5c":"test.enginePower.value_counts()\ntest.enginePower.unique()\n","3b6216da":"# \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0447\u0438\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 enginePower \u0438 \u0434\u0435\u043b\u0430\u0435\u0442 \u044d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0446\u0435\u043b\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c\ndef enginePower_convertion(x):\n    x = str(x).split(' ')[0]\n    if x == 'nan' or x == 'undefined':\n        return np.nan\n    return int(x)\n\n\ntest.enginePower = test.enginePower.map(enginePower_convertion)\ntrain.enginePower = train.enginePower.map(enginePower_convertion)","d45e79c6":"train","d3d29c9a":"train.model_name.value_counts()","72b53589":"test.model_name.value_counts()","5f0cdad0":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nintersection_stat(train.model_name,test.model_name)","c7bd4b0a":"# \u043f\u0440\u0438 \u0441\u043c\u0435\u043d\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0439 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435\nintersection_stat(train.model_name.str.upper(),test.model_name)","ae973e5e":"# \u043c\u0435\u043d\u044f\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u0432 train \u043d\u0430 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b\ntrain.model_name = train.model_name.str.upper()","87d0d19e":"train.brand.value_counts()","d2af68cf":"test.brand.value_counts()","217ddc19":"train.vendor.value_counts()","f53bbf83":"test.vendor.value_counts()","18c9a9aa":"# \u0443\u0437\u043d\u0430\u0435\u043c \u043a \u043a\u0430\u043a\u043e\u043c\u0443 vendor \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 brand  \nlist_vendors = test.groupby('vendor')['brand'].unique()\nunique_vendors = list_vendors.index.values\nbrands_for_vendor = list_vendors.values","cb17b5fc":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435\u043c brand \u043a vendor\nmapper = {}\nfor vendor, brands_list in zip(unique_vendors, brands_for_vendor):\n    for brand in brands_list:\n        mapper[brand] = vendor\nmapper\n","2e83eb78":"# \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043a train\ntrain.vendor = train.brand.map(mapper)\ntrain.vendor.value_counts()","33984780":"test.name.value_counts()","cf1c675d":"train.name.value_counts()","bf51db65":"intersection_stat(train.name,test.name)","086ba9ac":"test.numberOfDoors.value_counts()","fcec2835":"train.numberOfDoors.value_counts()","c8791aba":"train.sell_id[0]","58639e19":"test.sell_id[0]","4c2332ef":"train.super_gen[0]","b155ba9c":"test.super_gen[0]","a3472ed0":"train['vehicleConfiguration'].value_counts()","a7ea9f46":"# train['vehicleConfiguration'].value_counts()[train['vehicleConfiguration'].value_counts() < 1000]","f1e7dfab":"test.vehicleConfiguration.value_counts()","0f89f42c":"list_vendors = test.groupby('vendor')['brand'].unique()\nunique_vendors = list_vendors.index.values\nbrands_for_vendor = list_vendors.values","016ba42f":"mapper = {}\nfor vendor, brands_list in zip(unique_vendors, brands_for_vendor):\n    for brand in brands_list:\n        mapper[brand] = vendor","8b172869":"train.vendor = train.brand.map(mapper)","a45fc6b0":"train.vendor.value_counts()","9fdd0b43":"train.value_counts()","b0a6be7a":"train.\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435.isna().value_counts(1)","534c17f6":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0435\u0440\u0435\u0432\u0435\u043e\u0434\u0438\u0442 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u0430\u043d\u043d\u044b\u0445 \"x \u043b\u0435\u0442 y \u043c\u0435\u0441\u044f\u0446\u0430(\u0435\u0432)\" \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432.\ndef num_of_months(row):\n    if pd.notnull(row) and row != 'no_data':\n        list_ownership = row.split()  # \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u043c\u0435\u0441\u044f\u0446\u0430 \u0438 \u043b\u0435\u0442\n        if len(list_ownership) == 2:  # \u0435\u0441\u043b\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e \u0433\u043e\u0434\u044b\n            if list_ownership[1] in ['\u0433\u043e\u0434', '\u0433\u043e\u0434\u0430', '\u043b\u0435\u0442']:\n                return int(list_ownership[0])*12\n            return int(list_ownership[0])  # \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0433\u043e\u0434 \u0432 \u043c\u0435\u0441\u044f\u0446\u044b\n        return int(list_ownership[0])*12 + int(list_ownership[3])","42d11de4":"train['Owning_months'] = train['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'].apply(num_of_months)","74ae8352":"train['Owning_months'].isna().value_counts()","1794344a":"# \u0443\u0437\u043d\u0430\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u043f\u0440\u043e\u0431\u0435\u0433 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u044b\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0432 \u043c\u0435\u0441\u044f\u0446\n# train['km_per_month'] = train['mileage']\/train['Owning_months']","dc202880":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0443\u043b\u044f\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439\n# \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u0433\u0434\u0430 \u0443\u0431\u0440\u0430\u043b\u0438 \u0432\u044b\u044b\u0431\u0440\u043e\u0441\u044b \u0432 mileage\n# train['km_per_month'] = train['mileage']\/train['Owning_months']\n\ntrain['Owning_months'].loc[(train['Owning_months'].isna() == True) & (\n    train.car_url.str.contains('new') == True)] = 0","de6acc66":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0443\u043b\u044f\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u044b\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439\ntrain['Owning_months'].loc[(train['Owning_months'].isna() == True) & (\n    train.car_url.str.contains('used') == True)] = 'no data'","073d6d1d":"# train['Owning_months2'] = train['mileage']\/train['km_per_month'].mean()","1180576e":"train['mileage'].value_counts() # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","71bf78ca":"test['mileage'].value_counts()","be0a6488":"print(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f train\", train.modelDate.unique())\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f test\", test.modelDate.unique())","812cb5ab":"test['model_info']","6a265363":"train['name'].value_counts()","f028803d":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f train\", train.numberOfDoors.unique())\nprint(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f test\", test.numberOfDoors.unique())","b95c5b86":"train['numberOfDoors'] = train['numberOfDoors'].astype('Int64')","022cff79":"train['priceCurrency'].value_counts()","0811b772":"test['priceCurrency'].value_counts()","ac1f996a":"train['productionDate'].value_counts()","b8077322":"test['productionDate'].value_counts()","1649ec35":"train.\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435.value_counts()","a732d528":"train.dropna(subset=['price'], inplace=True)","2d889cea":"!pip install -U lightautoml","5cc09c5f":"# Standard python libraries\nimport os\nimport time\n\n# Essential DS libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport torch\n\n# LightAutoML presets, task and report generation\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.tasks import Task\nfrom lightautoml.report.report_deco import ReportDeco","69dfdd48":"N_THREADS = 4\nN_FOLDS = 5\nRANDOM_STATE = 42\nTEST_SIZE = 0.2\nTIMEOUT = 900\nTARGET_NAME = 'price'","ff91bf5a":"train['bodyType'] = train['bodyType'].str.lower()\ntest['engineDisplacement'] = test['engineDisplacement'].map(lambda x: x[:-4])","2b124d2e":"task = Task('reg', loss = 'rmsle', metric = 'rmsle', greater_is_better = False)","ab4ebc8a":"roles = {\n    'target': TARGET_NAME,\n    'drop': ['sell_id','\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f', 'start_date','model']\n}","5fc77ef5":"automl = TabularAutoML(\n    task = task, \n    timeout = TIMEOUT,\n    cpu_limit = N_THREADS,\n    reader_params = {'n_jobs': N_THREADS, 'cv': N_FOLDS, 'random_state': RANDOM_STATE}\n)","f9b84f19":"oof_pred = automl.fit_predict(train, roles = roles, verbose = 3)","0f6bb714":"fast_fi = automl.get_feature_scores('fast')\nfast_fi.set_index('Feature')['Importance'].plot.bar(figsize = (30, 10), grid = True)","4ec4dea3":"te_pred = automl.predict(test)","79c9eefc":"te_pred.data[:, 0]","ad80656b":"sample_submission['price'] = te_pred.data[:, 0]\nsample_submission","1312a924":"sample_submission.to_csv('predictions_lightautoml_ol2.csv', index = False)","e586a101":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0442\u043e \u0438\u0437 \u0441\u0435\u0431\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 test \u0438 \u0432 trainm","e28bdd76":"# \u0427\u0430\u0441\u0442\u044c \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440","fd7ffe8f":"# super_gen (\u0441\u0434\u0435\u043b\u0430\u043d\u043e. \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435)","e6119a64":"# \u0422\u0430\u043c\u043e\u0436\u043d\u044f (\u0442\u043e\u043b\u044c\u043a\u043e LabelEncoder)","4626b217":"# model_info (\u0441\u0434\u0435\u043b\u0430\u043d\u043e. \u0443\u0434\u0430\u043b\u0438\u0442\u044c)","3b9dd338":"**\u0412\u044b\u0432\u043e\u0434:** \u0441\u0442\u043e\u043b\u0431\u0446\u0430 parsing_unixtime \u043d\u0435\u0442 \u0432 train, \u043d\u043e \u0435\u0441\u0442\u044c \u0432 test. \u041c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043d\u0435\u0433\u043e \u0434\u0430\u0442\u0443 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u043e \u043d\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u0437\u0430\u0447\u0435\u043c. \u0423\u0434\u0430\u043b\u0438\u0442\u044c.","666d92e4":"# \u041f\u0422\u0421 (\u0442\u043e\u043b\u044c\u043a\u043e LabelEncoder)","7e5770fa":"\u0443\u0434\u0430\u043b\u0438\u043c. \u043e\u043d \u043d\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u0433\u0434\u0430 \u0443\u0436\u0435 \u0431\u0443\u0443\u0434\u0443\u0442 \u0433\u043e\u0442\u043e\u0432\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f","70cbed05":"\u044d\u0442\u043e \u043d\u0435 \u043e\u0441\u043e\u0431\u043e \u043f\u043e\u043c\u043e\u0433\u043b\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u0441\u0441\u044b\u043b\u043e\u043a","6353b005":"# mileage (\u043f\u0440\u043e\u0431\u0435\u0433) (\u0441\u0434\u0435\u043b\u0430\u043d\u043e)","fe2bbc80":"# \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 (\u0442\u043e\u043b\u044c\u043a\u043e LabelEncoder)","33f91d3d":"# name (\u0438\u043c\u044f) (\u0441\u0434\u0435\u043b\u0430\u043d\u043e. \u0443\u0434\u0430\u043b\u0438\u0442\u044c)","61396f5a":"# vehicleConfiguration (\u043d\u0430\u0434\u043e \u0434\u043e\u0434\u0435\u043b\u0430\u0442\u044c)","ff6d6886":"\u043c\u044b \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043d\u0430 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u0435\u0441\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c 1 \u0441\u0442\u0440\u043e\u043a\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b","2d81293c":"# parsing_unixtime (\u0441\u0434\u0435\u043b\u0430\u043d\u043e. \u0443\u0434\u0430\u043b\u0438\u0442\u044c)","5853e8be":"# car_url","96e3c771":"<img src=\"https:\/\/whatcar.vn\/media\/2018\/09\/car-lot-940x470.jpg\"\/>\n\n## \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c\n*\u042d\u0442\u043e\u0442 \u041d\u043e\u0443\u0442\u0431\u0443\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u041f\u0440\u0438\u043c\u0435\u0440\u043e\u043c\/\u0428\u0430\u0431\u043b\u043e\u043d\u043e\u043c (Baseline) \u043a \u044d\u0442\u043e\u043c\u0443 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044e \u0438 \u043d\u0435 \u0441\u043b\u0443\u0436\u0438\u0442 \u0433\u043e\u0442\u043e\u0432\u044b\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c!*   \n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043a\u0430\u043a \u043e\u0441\u043d\u043e\u0432\u0443 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.\n\n\n> **baseline** \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u0430\u043a \u0448\u0430\u0431\u043b\u043e\u043d, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0441 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438 \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u041c\u041b \u043d\u0430\u0447\u0438\u043d\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0439. \u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u0441\u0430\u043c\u043e\u043c\u0443 \u041c\u041b, \u0430 \u043d\u0435 \u0442\u0440\u0430\u0442\u0438\u0442\u044c \u0446\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0447\u0438\u0441\u0442\u043e \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \n\u0422\u0430\u043a\u0436\u0435 baseline \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u043e\u043f\u043e\u0440\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u043e\u0439 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435. \u0415\u0441\u043b\u0438 \u0442\u0432\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0445\u0443\u0436\u0435 baseline - \u0442\u044b \u044f\u0432\u043d\u043e \u0434\u0435\u043b\u0430\u0435\u0448\u044c \u0447\u0442\u043e-\u0442\u043e \u043d\u0435 \u0442\u043e \u0438 \u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0439 \u043f\u0443\u0442\u044c) ","ba4f062a":"## \u0420\u0430\u0437\u0432\u0435\u0434\u043e\u0447\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0431\u0430\u0437\u043e\u0432\u0430\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","9768218c":"\u0421\u0440\u0430\u0432\u043d\u0438\u043c \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 test \u0438 train, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0438 \u0443\u0441\u0442\u0440\u0430\u043d\u0438\u043c \u0438\u0445.","d33ff1a2":"# \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b (\u0442\u043e\u043b\u044c\u043a\u043e LabelEncoder)","e4e67b57":"**\u0412\u044b\u0432\u043e\u0434:** \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b, \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0432 train \u043a int. \u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0432 int.","2914270b":"# \u0427\u0430\u0441\u0442\u044c \u041c\u0430\u043a\u0441\u0438\u043c\u0430","4c26a782":"# complectation_dict","a6b721bc":"**\u0412\u044b\u0432\u043e\u0434:**  model_name \u0438 name \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e. name \u0443\u0434\u0430\u043b\u0438\u0442\u044c.","12c713fa":"**\u0412\u044b\u0432\u043e\u0434:** \u0414\u0430\u043b\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u0430 \u0431\u0430\u0437\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043a\u043e\u043b\u043e\u043d\u043a\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c.","e1a296df":"**\u0412\u044b\u0432\u043e\u0434:** \u0414\u0430\u043d\u043d\u044b\u0435 \u0443\u0436\u0435 \u0432 int. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043d\u0435 \u043d\u0443\u0436\u043d\u0430.\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 Nan \u0432 \u043e\u0431\u044a\u0435\u0434\u0435\u0438\u043d\u0435\u043d\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0438\u043b\u0438 \u0435\u0441\u043b\u0438 \u0430\u0432\u0442\u043e \u043d\u043e\u0432\u043e\u0435 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \"0\".","3b6ea76e":"# vehicleTransmission (\u0442\u043e\u043b\u044c\u043a\u043e LabelEncoder)","7c882965":"## Data Preprocessing","57fb27a4":"\u0443\u0434\u0430\u043b\u0438\u0442\u044c. \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0434\u043e\u043f\u0430\u0440\u0441\u0438\u0442\u044c","da5678f3":"# \u0420\u0443\u043b\u044c (\u0442\u043e\u043b\u044c\u043a\u043e LabelEncoder)","7d8b9f3c":"# image (\u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435) (\u0441\u0434\u0435\u043b\u0430\u043d\u043e.\u0443\u0434\u0430\u043b\u0438\u0442\u044c)\n### \u0412 train  \u0432\u0441\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b, \u0435\u0441\u043b\u0438 \u0431\u044b \u0438\u0445 \u043d\u0435 \u0431\u044b\u043b\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0435\u0441\u0442\u044c-\u043d\u0435\u0442 \u0444\u043e\u0442\u043e.","6c4d20ca":"# model_name","1c1ba149":"**\u0412\u044b\u0432\u043e\u0434:** \u041d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 train \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438. \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0438\u0437 test\n###  \u2116   Column       Non-Null   Count      Dtype\n### 13   model_info   0          non-null   float64\"","5c206bf1":"Label Enoder. \u0414\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u043d\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u0432 OTHERS","e6f84d2f":"# \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 (\u0434\u043e\u0434\u0435\u043b\u0430\u0442\u044c)","57ed291c":"# vendor (\u0441\u0434\u0435\u043b\u0430\u043d\u043e. \u0442\u043e\u043b\u044c\u043a\u043e LabelEncoder)","363b5e19":"# Data","5d8d3169":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0432 test \u044d\u0442\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0430 \u0432 train - \u0441\u043f\u0438\u0441\u043e\u043a. \u0412\u044b\u043d\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c available_options \u0438\u0437 test \u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","7a90a01e":"## lightautoml","d58c6ec8":"# enginePower ","55ef1c84":"# priceCurrency (\u0441\u0434\u0435\u043b\u0430\u043d\u043e.\u0443\u0434\u0430\u043b\u0438\u0442\u044c)","3cb94d35":"**\u0412\u044b\u0432\u043e\u0434:** \u0412\u0430\u043b\u044e\u0442\u0430 \u0432\u0435\u0437\u0434\u0435 \u0440\u0443\u0431\u043b\u044c. \u0423\u0434\u0430\u043b\u0438\u0442\u044c.","ee854df0":"# \u041f\u0440\u0438\u0432\u043e\u0434 (\u0442\u043e\u043b\u044c\u043a\u043e LabelEncoder)","65d00f0f":"# engineDisplacement","8d0ba2d5":"# sell_id (\u0441\u0434\u0435\u043b\u0430\u043d\u043e. \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435)","3487467c":"\u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e parsing_unixtime \u0438\u043c\u0435\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0430 \u043e\u0434\u043d\u0439 \u0438 \u0442\u0443 \u0436\u0435 \u0441\u0441\u044b\u043b\u043a\u0443 ","a9877aa1":"**\u0412\u044b\u0432\u043e\u0434:** \u0414\u0430\u043d\u043d\u044b\u0435 \u0443\u0436\u0435 \u0432 int. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f.","a0f0be5e":"# productionDate (\u0441\u0434\u0435\u043b\u0430\u043d\u043e)","e2fa4f55":"# modelDate (\u0433\u043e\u0434 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f) (\u0441\u0434\u0435\u043b\u0430\u043d\u043e)","3c496937":"\u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0442\u0435\u043f\u0435\u0440\u044c \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043e\u0434\u043d\u0430 \u0441\u0441\u044b\u043b\u043a\u0430","9ffc712b":"# numberOfDoors (\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439) (\u0441\u0434\u0435\u043b\u0430\u043d\u043e)","124f877b":"\u041f\u043e\u043c\u043d\u0438\u043c, \u0447\u0442\u043e \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f, \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442. \u0412 \u044d\u0442\u043e\u043c \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435 \u043c\u044b \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0441\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u043c\u044b \u0443\u0436\u0435 \u0432\u0441\u0435 \u0441\u043e\u0431\u0440\u0430\u043b\u0438 \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0438 \u0441\u0432\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0447\u0435\u0440\u0435\u0437 \"Add Data\", \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u0441\u0430\u043c\u043e\u043c\u0443 ML.","8668309f":"# vendor"}}