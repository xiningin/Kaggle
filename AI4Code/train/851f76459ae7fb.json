{"cell_type":{"e0d222d6":"code","77e8c2e5":"code","aa3b354d":"code","e266897a":"code","b4cffd4f":"code","a41a36c8":"code","c5407269":"code","2d550ac7":"code","5e8ef7c7":"code","eeee414f":"code","366c6866":"code","8ea9be9d":"code","02a20462":"code","7afbce19":"code","0ce0f16d":"code","9619c226":"code","1b3fcbed":"code","543f3968":"code","e5cc12e7":"code","1e9d6840":"code","afbee414":"code","8ac0e5d0":"code","905fe6a1":"code","d5f786cb":"code","ccd446a9":"code","8a428296":"code","c583b592":"code","42111dbd":"code","8bbcfaf6":"code","ebcafdc8":"code","e13b98e8":"markdown","b509a8b0":"markdown","3a6b3539":"markdown","525c3cca":"markdown","4b01ea83":"markdown","8053f5f8":"markdown","5ed06243":"markdown","cf8f49ce":"markdown","db66842c":"markdown","0328af02":"markdown","612a1f92":"markdown","579127c8":"markdown","a808783c":"markdown","52f76606":"markdown","e2deb7aa":"markdown","fed3638c":"markdown","26bef58c":"markdown","c009c862":"markdown","2eb207c3":"markdown","e94962dc":"markdown","1c89ddfc":"markdown","8590d3d9":"markdown","b6096256":"markdown","4bb1ca8d":"markdown","387a81dc":"markdown","f5f30272":"markdown","4ddf23bf":"markdown","cba506bf":"markdown","4c4f3ff4":"markdown","9db45907":"markdown","74ab8281":"markdown","bb6d832d":"markdown","806ba605":"markdown","7ed858b5":"markdown","ce955fe9":"markdown"},"source":{"e0d222d6":"from pandas_datareader import data, wb\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport datetime\n%matplotlib inline","77e8c2e5":"start = datetime.datetime(2006, 1, 1)\nend = datetime.datetime(2016, 1, 1)","aa3b354d":"# Bank of America\nBAC = data.DataReader(\"BAC\", 'yahoo', start, end)\n\n# CitiGroup\nC = data.DataReader(\"C\", 'yahoo', start, end)\n\n# Goldman Sachs\nGS = data.DataReader(\"GS\", 'yahoo', start, end)\n\n# JPMorgan Chase\nJPM = data.DataReader(\"JPM\", 'yahoo', start, end)\n\n# Morgan Stanley\nMS = data.DataReader(\"MS\", 'yahoo', start, end)\n\n# Wells Fargo\nWFC = data.DataReader(\"WFC\", 'yahoo', start, end)","e266897a":"BAC.head(3)","b4cffd4f":"# ALTERNATIVE TO CONCAT (METHOD 1) -- GROUPED BY OPEN, CLOSE ETC\ndf = data.DataReader(['BAC', 'C', 'GS', 'JPM', 'MS', 'WFC'],'yahoo', start, end)\ndf.head(3)","a41a36c8":"tickers = ['BAC', 'C', 'GS', 'JPM', 'MS', 'WFC']","c5407269":"bank_stocks = pd.concat([BAC, C, GS, JPM, MS, WFC],axis=1,keys=tickers) # CONCAT ON COLUMNS AXIS=1","2d550ac7":"bank_stocks.columns.names = ['Bank Ticker','Stock Info'] # 2 LEVELS\nbank_stocks.head(3)","5e8ef7c7":"bank_stocks=pd.read_pickle('..\/input\/databanks\/all_banks') # overwrite the DF with the file containing this (will be uploaded on Kaggle as data source)\nbank_stocks.head(3) # GROUPED BY BANK NAMES","eeee414f":"bank_stocks.xs(key='Close',axis=1,level='Stock Info').max()","366c6866":"# TO RETRIEVE ONE COLUMN ONLY\nbank_stocks['BAC']['Close'] # BAC is a tick in tickers","8ea9be9d":"# USING DF\ndf['Close'].max()","02a20462":"returns=pd.DataFrame()","7afbce19":"for tick in tickers:\n    returns[tick+' Return']=bank_stocks[tick]['Close'].pct_change()\n    \nreturns.head() # first values are NaN","0ce0f16d":"#sns.set_style('whitegrid')\nsns.pairplot(returns[1:])","9619c226":"returns.idxmin()","1b3fcbed":"returns.idxmax()","543f3968":"returns.std()","e5cc12e7":"returns.loc['2015-01-01':'2016-01-01'].std() # for 2015 only (std)","1e9d6840":"sns.distplot(returns.loc['2015-01-01':'2016-01-01']['MS Return'],bins=50)","afbee414":"sns.distplot(returns.loc['2008-01-01':'2009-01-01']['C Return'],color='red',bins=50)","8ac0e5d0":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline","905fe6a1":"bank_stocks.xs(key='Close',axis=1,level='Stock Info').plot(figsize=(15,5))","d5f786cb":"# SAME PLOT USING PLOTLY\n\nimport plotly\nimport cufflinks as cf\ncf.go_offline()\n\nbank_stocks.xs(key='Close',axis=1,level='Stock Info').iplot()","ccd446a9":"plt.figure(figsize=(12,6))\nBAC['Close'].loc['2008-01-01':'2009-01-01'].rolling(window=30).mean().plot(label='30 Day Average')\nBAC['Close'].loc['2008-01-01':'2009-01-01'].plot(label='BAC Closing stock price')\nplt.legend()","8a428296":"#bank_stocks.xs(key='Close',axis=1,level='Stock Info').corr() # CORR MATRIX\nsns.heatmap(bank_stocks.xs(key='Close',axis=1,level='Stock Info').corr(),annot=True,cmap='viridis') # PLOT CORR ON HEATMAP","c583b592":"sns.clustermap(bank_stocks.xs(key='Close',axis=1,level='Stock Info').corr(),annot=True,cmap='viridis')","42111dbd":"bac15=BAC[['Open', 'High', 'Low', 'Close']].loc['2015-01-01':'2016-01-01'] # SELECT BAC stocks prices in 2015 (time-series)\nbac15.iplot(kind='candle')","8bbcfaf6":"ms15=MS['Close'].loc['2015-01-01':'2016-01-01']\nms15.ta_plot(study='sma',periods=[13,21,55],title='Simple Moving Averages')","ebcafdc8":"bac15_bb=BAC['Close'].loc['2015-01-01':'2016-01-01']\nbac15_bb.ta_plot(study='boll')","e13b98e8":"# 3. More Visualizations","b509a8b0":"**Set the column name levels:**","3a6b3539":"**Observation: 3 banks were grouped together (GS,JPM and WFC), rest 3 were also closely related in Closing stock prices.**","525c3cca":"**Let's use seaborn's clustermap to cluster the correlations together:**","4b01ea83":"**Let's create a heatmap of the correlation between the stocks Close price between the Banks.**","8053f5f8":"**Quite stable, small deviations from 0.**","5ed06243":"**In 2015, MorganStanley and Bank of America are the riskiest, as they have the highest STDs.**","cf8f49ce":"**Riskiest stock is by far CITIGROUP, as it probably had a huge crash (it was expected).**","db66842c":"# Financial Data- Stock prices Exploratory Data Analysis (EDA) and Visualizations\n\nIn this data project I will focus on exploratory data analysis of stock prices.\nI will focus on bank stocks and see how they progressed throughout the [financial crisis](https:\/\/en.wikipedia.org\/wiki\/Financial_crisis_of_2007%E2%80%9308) all the way to early 2016.","0328af02":"**Create a pairplot using seaborn of the returns dataframe. What stock stands out? Draw conclusions.**","612a1f92":"**Notice that Citigroup's largest drop and biggest gain were very close to one another: Corresponds to the day of the reverse stock split at Citigroup!**","579127c8":"**Check the head of the bank_stocks df:**","a808783c":"**Creating a distplot using Seaborn of the 2008 returns for CitiGroup.**","52f76606":"**Let's create a Moving Averages plot of Morgan Stanley Closing stocks for the year 2015.**","e2deb7aa":"**Using this returns DataFrame, figure out on what dates each bank stock had the best and worst single day returns.**","fed3638c":"**Created a list of the ticker symbols (as str) in alphabetical order.**","26bef58c":"**In comparison to a stable year (2015), the deviations are 10x larger, comparing the plots.**","c009c862":"**Creating a line plot showing Close price for each bank for the entire timeline.**","2eb207c3":"**Create a new empty DataFrame called returns, will contain the returns for each bank's stock. Returns are defined by:**\n\n$$r_t = \\frac{p_t - p_{t-1}}{p_{t-1}} = \\frac{p_t}{p_{t-1}} - 1$$","e94962dc":"# 4. Technical Analysis Plots","1c89ddfc":"# 1. Get the Financial Data (Stock prices)\n\nPandas will be used in order to directly read data from Google finance using Pandas! Imports are:","8590d3d9":"**Creating a distplot using seaborn of the 2015 returns for Morgan Stanley.**","b6096256":"**Concatenate the bank dataframes together to a single data frame called bank_stocks. Set the keys argument equal to the tickers list.**","4bb1ca8d":"**Used Plotly & Cufflinks to create a candle plot of Bank of America's stocks through 2015.**","387a81dc":"# 2. Let's start the EDA on our DF!","f5f30272":"**Let's look at the standard deviation of the returns, which stock is the riskiest over the entire time period? Which is the riskiest for the year 2015? Note: High risk == big STD**","4ddf23bf":"**Can use pandas pct_change() method on the Close column to create a column representing this return value. Create a for loop that goes and for each Bank Stock Ticker creates this returns column and sets it as a column in the returns DataFrame.**","cba506bf":"**This candle plot shows when stocks are increasing\/decreasing (green\/red) and they are usually used in the financial domain.**","4c4f3ff4":"**Same day for 4 out of 6 banks! It corresponds to Barrack Obama's inauguration day!**","9db45907":"## Moving Averages\n\n**Let's analyze the moving average (30 days period) for the Bank of America (BAC) Closing stock in the year 2008. Compare this to daily Closing stock price.**","74ab8281":"**What is the max Close price for each bank's stock throughout the time period?**","bb6d832d":"**Let's create a Bollinger Band Plot for Bank of America Closing stocks for the year 2015.**","806ba605":"## This financial analysis is just a practice EDA exercise that introduced me to numerous financial concepts related to stocks and trading in general. It is not to be taken as financial advice.","7ed858b5":"**Citigroup behaviour is noted, related to a huge crash in the 2008 financial crisis.**","ce955fe9":"**I will get stock information for the following banks (from 1st of January 2006 to 1st of January 2016):**\n\n* Bank of America\n* CitiGroup\n* Goldman Sachs\n* JPMorgan Chase\n* Morgan Stanley\n* Wells Fargo\n\n**Set each bank to be a separate dataframe, with the variable name for that bank being its ticker symbol.**\n1. Use datetime to set start and end datetime objects.\n2. Figure out the ticker symbol for each bank.\n2. Figure out how to use datareader to grab info on the stock.\n\n**I Used [this documentation page](https:\/\/pandas-datareader.readthedocs.io\/en\/latest\/remote_data.html)------ GOOGLE FINANCE**"}}