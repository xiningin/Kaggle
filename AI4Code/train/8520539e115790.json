{"cell_type":{"da62e0a0":"code","f53a6f66":"code","9d96fdfa":"code","48baa105":"code","1cd298ad":"code","9ee55e6c":"code","8b2d2c01":"code","352a5f9d":"code","68640613":"code","aaa8cfd5":"code","d6c5c732":"code","7b3c0a37":"code","6766371e":"code","99ca3c3c":"code","df5bd529":"code","fa142030":"code","515c502f":"code","ce59f637":"code","205a80d0":"code","8d3596bc":"code","68e062af":"code","19f8e6a0":"code","8bfc6f49":"code","d460e758":"code","a8d20713":"code","0b7efb8f":"code","8eba8971":"code","44d5edb2":"markdown","bf04cb4d":"markdown","33a3b2c5":"markdown","69de13e7":"markdown","2a9154fd":"markdown","59341e50":"markdown","9e8e6370":"markdown","9e5656fe":"markdown","13d2726a":"markdown"},"source":{"da62e0a0":"import random\ndef should_hit(player_total, dealer_card_val, player_aces):\n    \"\"\"Return True if the player should hit (request another card) given the current game\n    state, or False if the player should stay. player_aces is the number of aces the player has.\n    \"\"\"\n    return random.choice([True, False])\n    return True","f53a6f66":"# SETUP. You don't need to worry for now about what this code does or how it works. \n# If you're curious about the code, it's available under an open source license at https:\/\/github.com\/Kaggle\/learntools\/\nfrom learntools.core import binder; binder.bind(globals())\nfrom learntools.python.ex3 import q7 as blackjack\nprint('Setup complete.')","9d96fdfa":"blackjack.simulate_one_game()","48baa105":"blackjack.simulate(n_games=50000)","1cd298ad":"from contextlib import redirect_stdout\nfrom io import StringIO\nimport numpy as np\ndef simulate_game():\n    out_buffer = StringIO()\n    with redirect_stdout(out_buffer):\n        blackjack.simulate_one_game()\n    out_str = out_buffer.getvalue()\n    return 'Player wins' in out_str\nsimulate_game()","9ee55e6c":"import pandas as pd\nimport random\n\nresults = []\none_game_rows = []\nwin_game_rows = []\ndef my_should_hit(player_total, dealer_card_val, player_aces):\n    return random.choice([True, False])\n\ndef score(zero_based_move_num, total_moves, game_result):\n    step = 1.0\/total_moves\n    if game_result:\n        return 2 - (zero_based_move_num) * step\n    else:\n        return (zero_based_move_num) * step\n\ndef should_hit(player_total, dealer_card_val, player_aces):\n    choice = my_should_hit(player_total, dealer_card_val, player_aces)\n    one_game_rows.append((player_total, dealer_card_val, player_aces, int(choice)))\n    return choice\n# blackjack.simulate(n_games=1000)\n\nall_rows = []\nfeature_names = ['player_total', 'dealer_card_val', 'player_aces', 'choice']\nwins_count = 25000\nlose_count = 25000\ncount = 0\ntotal = 0\nwhile wins_count > 0 or lose_count > 0:\n    total = total + 1\n    one_game_rows = []\n    game_result = simulate_game()\n    if game_result and wins_count > 0:\n        count = count + 1\n        wins_count = wins_count - 1\n        for index, game_row in reversed(list(enumerate(one_game_rows))):\n            all_rows.append(game_row + (score(index, len(game_row), game_result),))\n            win_game_rows.append(game_row)\n    elif (not game_result) and lose_count > 0:\n        count = count + 1\n        lose_count = lose_count - 1\n        for index, game_row in reversed(list(enumerate(one_game_rows))):\n            all_rows.append(game_row + (score(index, len(game_row), game_result),))\nprint('total', total, 'count', count)\ndata = pd.DataFrame(all_rows, columns=feature_names + ['game_result'])\ndata.describe()\n\nprint('win_data_rows')\nwin_data = pd.DataFrame(win_game_rows, columns=feature_names)\nwin_data.describe()","8b2d2c01":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n\ny = data['game_result']\nX = data[feature_names]\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=0)\n\nmy_model = RandomForestRegressor(n_estimators=120,random_state=0).fit(train_X, train_y)\n#scores = cross_val_score(my_model, X, y, cv=5)\n#print(scores)","352a5f9d":"y_win = data['choice']\nfeature_names_win = feature_names[:-1]\nX_win = data[feature_names_win]\ntrain_X_win, val_X_win, train_y_win, val_y_win = train_test_split(X_win, y_win, random_state=0)\nmy_model_win = RandomForestClassifier(n_estimators=120,random_state=0).fit(train_X_win, train_y_win)\n","68640613":"import eli5\nfrom eli5.sklearn import PermutationImportance\n\nperm = PermutationImportance(my_model, random_state=1).fit(val_X, val_y)\neli5.show_weights(perm, feature_names = val_X.columns.tolist())","aaa8cfd5":"perm = PermutationImportance(my_model_win, random_state=1).fit(val_X_win, val_y_win)\neli5.show_weights(perm, feature_names = feature_names_win)","d6c5c732":"def should_hit(player_total, dealer_card_val, player_aces):\n    win_true = my_model.predict([(player_total, dealer_card_val, player_aces, int(True))])[0]\n    win_false = my_model.predict([(player_total, dealer_card_val, player_aces, int(False))])[0]\n    return win_true >= win_false\n\nblackjack.simulate(n_games=1000)\n","7b3c0a37":"choices = []\ndef should_hit(player_total, dealer_card_val, player_aces):\n    choice = my_model_win.predict([(player_total, dealer_card_val, player_aces)])[0]\n    choices.append(choice)\n    return choice\n\nblackjack.simulate(n_games=1000)\nchoice_data = pd.DataFrame(choices, columns=['choice'])\nchoice_data.describe()","6766371e":"def should_hit(player_total, dealer_card_val, player_aces):\n    return my_should_hit(player_total, dealer_card_val, player_aces)\n\nblackjack.simulate(n_games=100)","99ca3c3c":"from __future__ import absolute_import, division, print_function, unicode_literals\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nprint(tf.__version__)\ntrain_dataset = data.sample(frac=0.8,random_state=0)\ntest_dataset = data.drop(train_dataset.index)\n\ntrain_dataset_win = win_data.sample(frac=0.8, random_state=0)\ntest_dataset_win = win_data.drop(train_dataset_win.index)","df5bd529":"train_labels = train_dataset.pop('game_result')\ntest_labels = test_dataset.pop('game_result')\ntrain_stats = train_dataset.describe()\ntrain_stats = train_stats.transpose()\ntrain_stats","fa142030":"train_labels_win = train_dataset_win.pop('choice')\ntest_labels_win = test_dataset_win.pop('choice')\ntrain_stats_win = train_dataset_win.describe()\ntrain_stats_win = train_stats_win.transpose()\ntrain_stats_win","515c502f":"def norm(x):\n  return (x - train_stats['mean']) \/ train_stats['std']\nnormed_train_data = norm(train_dataset)\nnormed_test_data = norm(test_dataset)\n\nnormed_train_stats = normed_train_data.describe()\nnormed_train_stats = normed_train_stats.transpose()\nnormed_train_stats","ce59f637":"def norm(x):\n  return (x - train_stats_win['mean']) \/ train_stats_win['std']\nnormed_train_data_win = norm(train_dataset_win)\nnormed_test_data_win = norm(test_dataset_win)\n\nnormed_train_stats_win = normed_train_data_win.describe()\nnormed_train_stats_win = normed_train_stats_win.transpose()\nnormed_train_stats_win","205a80d0":"def build_model():\n  model = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=[len(train_dataset.keys())]),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(1)\n  ])\n\n  optimizer = tf.keras.optimizers.RMSprop(0.001)\n\n  model.compile(loss='mse', optimizer=optimizer, metrics=['mae', 'mse'])\n  return model","8d3596bc":"def build_model_win():\n  model = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=[len(train_dataset_win.keys())]),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(1)\n  ])\n\n  optimizer = tf.keras.optimizers.RMSprop(0.001)\n\n  model.compile(loss='mse', optimizer=optimizer, metrics=['mae', 'mse'])\n  return model","68e062af":"model = build_model()\nmodel.summary()\n","19f8e6a0":"model_win = build_model_win()\nmodel_win.summary()","8bfc6f49":"example_batch = normed_train_data[:10]\nexample_result = model.predict(example_batch)\nexample_result","d460e758":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u0442\u043e\u0447\u0435\u043a \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e\u0439 \u044d\u043f\u043e\u0445\u0438\nclass PrintDot(keras.callbacks.Callback):\n  def on_epoch_end(self, epoch, logs):\n    if epoch % 100 == 0: print('')\n    print('.', end='')\n\nearly_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)\n    \nEPOCHS = 1000\n\nhistory = model.fit(\n  train_dataset, train_labels,\n  epochs=EPOCHS, validation_split = 0.2, verbose=0,\n  callbacks=[early_stop, PrintDot()])","a8d20713":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u0442\u043e\u0447\u0435\u043a \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e\u0439 \u044d\u043f\u043e\u0445\u0438\nclass PrintDot(keras.callbacks.Callback):\n  def on_epoch_end(self, epoch, logs):\n    if epoch % 100 == 0: print('')\n    print('.', end='')\n\nearly_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)\n    \nEPOCHS = 1000\n\nhistory_win = model_win.fit(\n  train_dataset_win, train_labels_win,\n  epochs=EPOCHS, validation_split = 0.2, verbose=0,\n  callbacks=[early_stop, PrintDot()])","0b7efb8f":"def should_hit(player_total, dealer_card_val, player_aces):\n    win_true = model.predict([[(player_total, dealer_card_val, player_aces, int(True))]])[0][0]\n    win_false = model.predict([[(player_total, dealer_card_val, player_aces, int(False))]])[0][0]\n    return win_true >= win_false\n\nblackjack.simulate(n_games=50000)","8eba8971":"def should_hit(player_total, dealer_card_val, player_aces):\n    choice = model_win.predict([[(player_total, dealer_card_val, player_aces)]])[0]\n    return choice > 0.5\n\nblackjack.simulate(n_games=50000)","44d5edb2":"We'll simulate games between your player agent and our own dealer agent by calling your function. So it must use the name `should_hit`","bf04cb4d":"# The Blackjack Simulator\n\nRun the cell below to set up our simulator environment:","33a3b2c5":"Once you have run the set-up code. You can see the action for a single game of blackjack with the following line:","69de13e7":"# Intro\n\nReady for a quick test of your logic and programming skills?\n\nIn today's micro-challenge, you will write the logic for a blackjack playing program.  Our dealer will test your program by playing 50,000 hands of blackjack. You'll see how frequently your program won, and you can discuss how your approach stacks up against others in the challenge.\n\n![Blackjack](http:\/\/www.hightechgambling.com\/sites\/default\/files\/styles\/large\/public\/casino\/table_games\/blackjack.jpg)","2a9154fd":"# Discuss Your Results\n\nHow high can you get your win rate? We have a [discussion thread](https:\/\/www.kaggle.com\/learn-forum\/58735#latest-348767) to discuss your results. Or if you think you've done well, reply to our [Challenge tweet](https:\/\/twitter.com\/kaggle) to let us know.","59341e50":"# Blackjack Rules\n\nWe'll use a slightly simplified version of blackjack (aka twenty-one). In this version, there is one player (who you'll control) and a dealer. Play proceeds as follows:\n\n- The player is dealt two face-up cards. The dealer is dealt one face-up card.\n- The player may ask to be dealt another card ('hit') as many times as they wish. If the sum of their cards exceeds 21, they lose the round immediately.\n- The dealer then deals additional cards to himself until either:\n    - The sum of the dealer's cards exceeds 21, in which case the player wins the round, or\n    - The sum of the dealer's cards is greater than or equal to 17. If the player's total is greater than the dealer's, the player wins. Otherwise, the dealer wins (even in case of a tie).\n\nWhen calculating the sum of cards, Jack, Queen, and King count for 10. Aces can count as 1 or 11 (when referring to a player's \"total\" above, we mean the largest total that can be made without exceeding 21. So e.g. A+8 = 19, A+8+8 = 17)\n\n# The Blackjack Player\nYou'll write a function representing the player's decision-making strategy. Here is a simple (though unintelligent) example.\n\n**Run this code cell** so you can see simulation results below using the logic of never taking a new card.","9e8e6370":"# Your Turn\n\nWrite your own `should_hit` function in the cell below. Then run the cell and see how your agent did in repeated play.","9e5656fe":"---\nThis exercise is from the **[Python Course](https:\/\/www.kaggle.com\/Learn\/python)** on Kaggle Learn.\n\nCheck out **[Kaggle Learn](https:\/\/www.kaggle.com\/Learn)**  for more instruction and fun exercises.","13d2726a":"[[](http:\/\/)](http:\/\/)You can see how your player does in a sample of 50,000 games with the following command:"}}