{"cell_type":{"45769b4e":"code","78c2e15b":"code","9a689cd8":"code","88803968":"code","7ed17c6f":"code","2dc5714d":"code","c19e838a":"code","a32f12dd":"code","4f41a813":"code","49798bfb":"code","f35f64d1":"code","73aa7a9f":"code","5ba9b50e":"code","f60be39a":"code","ffdae74d":"code","e4774566":"code","97680170":"code","7b2e77cf":"code","fc80f9ec":"code","4569b9ea":"code","5a823cf0":"code","97f3dbfb":"code","aa194f8c":"code","a52acc32":"code","22ec1fad":"code","5a6b7f33":"code","f7d9b949":"code","beacb0c8":"code","26ff25f8":"code","975ac83b":"code","85d0da60":"code","aa356ba7":"code","846d5491":"code","953bd767":"code","38cd24f3":"code","77f60d14":"code","ce239053":"markdown","5aa2afa8":"markdown","98cb49cf":"markdown","786b9ad4":"markdown","b5e01f3b":"markdown","b78ffd27":"markdown","432ce120":"markdown"},"source":{"45769b4e":"import numpy as np\nimport pandas as pd\nimport datetime as datetime\nfrom sklearn import preprocessing","78c2e15b":"from pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nimport matplotlib.pyplot as plt","9a689cd8":"from sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor","88803968":"training_set = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv')\ntraining_set.shape","7ed17c6f":"training_set.tail()","2dc5714d":"test_set = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv')\ntest_set.shape","c19e838a":"test_set.head()","a32f12dd":"# For the examples I take my country\nmy_country='Italy'\nmy_variable='ConfirmedCases'","4f41a813":"training_set[training_set['Country_Region']==my_country].tail()","49798bfb":"N_train=len(training_set[training_set['Country_Region']==my_country])\nN_train","f35f64d1":"N_test=len(test_set[test_set['Country_Region']==my_country])\nN_test","73aa7a9f":"df_train = training_set.copy()\ndf_train['DsType']='train'\ndf_train.rename({'Id': 'ForecastId'}, axis=1, inplace=True)\ndf_train.info()","5ba9b50e":"df_test  = test_set.copy()\ndf_test['DsType']='test'\ndf_test['ConfirmedCases']=0\ndf_test['Fatalities']=0\ndf_test.info()","f60be39a":"df_union=pd.concat([df_train,df_test],sort=False).copy()\ndf_union.fillna('ND', inplace = True)","ffdae74d":"df_union['Month']=df_union['Date'].apply(lambda s : int(s.replace('-','')[4:6]))\ndf_union['Day']=df_union['Date'].apply(lambda s : int(s.replace('-','')[6:9]))\ndf_union['Date']=df_union['Date'].apply(lambda s : datetime.datetime.strptime(s, '%Y-%m-%d'))\ndf_union['DateOrd']=df_union['Date'].apply(lambda s : s.toordinal())\ndf_union['Province_Norm']=df_union['Country_Region']+'-'+df_union['Province_State']\ndf_union.tail()","e4774566":"le1 = preprocessing.LabelEncoder()\nle1.fit(df_union['Country_Region'])\ndf_union['Country'] = le1.transform(df_union['Country_Region'])","97680170":"le2 = preprocessing.LabelEncoder()\nle2.fit(df_union['Province_Norm'])\ndf_union['Province'] = le2.transform(df_union['Province_Norm'])\ndf_union.drop('Province_Norm',axis=1,inplace=True)","7b2e77cf":"df_union.head()","fc80f9ec":"def cut_neg(y):\n    m = max(0,np.amin(y))\n    for i in range(0,len(y)):\n        if y[i]<m : y[i]=m\n    return y","4569b9ea":"def linear_trend(X_train,y_true,X_test):\n    lrm = LinearRegression()\n    lrm.fit(X_train,y_true)\n    y_valid = lrm.predict(X_train)\n    y_pred  = lrm.predict(X_test)\n    y_valid = cut_neg(y_valid)\n    y_pred  = cut_neg(y_pred)\n    return y_valid,y_pred","5a823cf0":"def polynomial_trend(deg,X_train,y_true,X_test):\n    pf = PolynomialFeatures(degree=deg)\n    pr = pf.fit_transform(X_train)\n    lrm = LinearRegression()\n    lrm.fit(pr, y_true)\n    y_valid = lrm.predict(pf.fit_transform(X_train))\n    y_pred  = lrm.predict(pf.fit_transform(X_test))\n    y_valid = cut_neg(y_valid)\n    y_pred  = cut_neg(y_pred)\n    return y_valid,y_pred","97f3dbfb":"df_train = df_union[df_union['DsType']=='train'].drop('DsType',axis=1)\ndf_test  = df_union[df_union['DsType']=='test'].drop('DsType',axis=1)\ndf_train['ConfirmedCasesValid'] = 0\ndf_train['FatalitiesValid'] = 0\ndf_train['ConfirmedCasesTrend'] = 0\ndf_train['FatalitiesTrend'] = 0\ndf_train['ConfirmedCasesResid'] = 0\ndf_train['FatalitiesResid'] = 0\ndf_test['ConfirmedCases'] = 0\ndf_test['Fatalities'] = 0\ndf_test['ConfirmedCasesTrend'] = 0\ndf_test['FatalitiesTrend'] = 0\ndf_test['ConfirmedCasesResid'] = 0\ndf_test['FatalitiesResid'] = 0","aa194f8c":"y1_train = df_train['ConfirmedCases'].astype(float)\ny2_train = df_train['Fatalities'].astype(float)","a52acc32":"NPT = 4\nmd1 = RandomForestRegressor(random_state=1234) #XGBRegressor(n_estimators=2000, random_state=1234) \nmd2 = RandomForestRegressor(random_state=1234) #XGBRegressor(n_estimators=1000, random_state=1234)\nfor country in df_train['Country_Region'].unique():\n    df_train_cy = df_train[df_train['Country_Region']==country].copy()\n    df_test_cy  = df_test[df_test['Country_Region']==country].copy()\n    for province in df_train_cy['Province_State'].unique():\n        print(f'Analizing > country = {country} : province = {province}')\n        df_train_pr = df_train_cy[df_train_cy['Province_State']==province].copy()\n        df_test_pr  = df_test_cy[df_test_cy['Province_State']==province].copy()\n        X_train_pr  = df_train_pr[['DateOrd']]\n        y1_train_pr = df_train_pr['ConfirmedCases']\n        y2_train_pr = df_train_pr['Fatalities']\n        df_test_pr  = df_test_pr[df_test_pr['Province_State']==province].copy()\n        X_test_pr   = df_test_pr[['DateOrd']]\n        # trend\n        y1_check_pr_trend, y1_pred_pr_trend = polynomial_trend(NPT,X_train_pr,y1_train_pr,X_test_pr)\n        y2_check_pr_trend, y2_pred_pr_trend = polynomial_trend(NPT,X_train_pr,y2_train_pr,X_test_pr)\n        df_train.loc[((df_train['Country_Region']==country) & (df_train['Province_State']==province)),'ConfirmedCasesTrend'] = y1_check_pr_trend\n        df_train.loc[((df_train['Country_Region']==country) & (df_train['Province_State']==province)),'FatalitiesTrend'] = y2_check_pr_trend\n        df_test.loc[((df_test['Country_Region']==country) & (df_test['Province_State']==province)),'ConfirmedCasesTrend'] = y1_pred_pr_trend\n        df_test.loc[((df_test['Country_Region']==country) & (df_test['Province_State']==province)),'FatalitiesTrend'] = y2_pred_pr_trend\n        # residuals\n        y1_train_pr_resid = y1_train_pr - y1_check_pr_trend\n        y2_train_pr_resid = y2_train_pr - y2_check_pr_trend\n        md1.fit(X_train_pr,y1_train_pr_resid)\n        md2.fit(X_train_pr,y2_train_pr_resid)\n        y1_check_pr_resid = md1.predict(X_train_pr)\n        y2_check_pr_resid = md2.predict(X_train_pr)\n        y1_pred_pr_resid  = md1.predict(X_test_pr)\n        y2_pred_pr_resid  = md2.predict(X_test_pr)\n        df_train.loc[((df_train['Country_Region']==country) & (df_train['Province_State']==province)),'ConfirmedCasesResid'] = y1_train_pr_resid\n        df_train.loc[((df_train['Country_Region']==country) & (df_train['Province_State']==province)),'FatalitiesResid'] = y2_train_pr_resid\n        df_test.loc[((df_test['Country_Region']==country) & (df_test['Province_State']==province)),'ConfirmedCasesResid'] = y1_pred_pr_resid\n        df_test.loc[((df_test['Country_Region']==country) & (df_test['Province_State']==province)),'FatalitiesResid'] = y2_pred_pr_resid\n        # sum\n        df_train.loc[((df_train['Country_Region']==country) & (df_train['Province_State']==province)),'ConfirmedCasesValid'] = y1_check_pr_trend + y1_check_pr_resid \n        df_train.loc[((df_train['Country_Region']==country) & (df_train['Province_State']==province)),'FatalitiesValid'] = y2_check_pr_trend + y2_check_pr_resid\n        df_test.loc[((df_test['Country_Region']==country) & (df_test['Province_State']==province)),'ConfirmedCases'] = y1_pred_pr_trend + y1_pred_pr_resid\n        df_test.loc[((df_test['Country_Region']==country) & (df_test['Province_State']==province)),'Fatalities'] = y2_pred_pr_trend + y2_pred_pr_resid","22ec1fad":"from sklearn.metrics import mean_squared_log_error","5a6b7f33":"def plotExample():\n    train_cond = ((df_train['Country_Region']==my_country) & (df_train['Province_State']==my_province))\n    test_cond  = ((df_test['Country_Region']==my_country) & (df_test['Province_State']==my_province))\n    x_test_plt  = df_test[test_cond]['Date']\n    y_test_plt  = df_test[test_cond][my_variable]\n    x_train_plt = df_train[train_cond]['Date']\n    y_train_plt = df_train[train_cond][my_variable]\n    y_valid_plt = df_train[train_cond][my_variable+'Valid']\n\n    plt.rcParams[\"figure.figsize\"] = (12,6)\n    fig, ax = plt.subplots()\n    ax.plot(x_train_plt,y_train_plt,'o')\n    ax.plot(x_train_plt,y_valid_plt,'x')\n    ax.plot(x_test_plt,y_test_plt,'*')\n    ax.set_xticks([])","f7d9b949":"my_country='Italy'\nmy_province='ND'\nmy_variable='ConfirmedCases'\nplotExample()","beacb0c8":"print_columns = ['Date','ConfirmedCases','Fatalities','ConfirmedCasesTrend','FatalitiesTrend','ConfirmedCasesResid','FatalitiesResid']\ndf_test[df_test['Country_Region']==my_country][print_columns].tail()","26ff25f8":"y1_valid = cut_neg(df_train['ConfirmedCasesValid'].copy())\ny2_valid = cut_neg(df_train['FatalitiesValid'].copy())\ny1_pred  = cut_neg(df_test['ConfirmedCases'].copy())\ny2_pred  = cut_neg(df_test['Fatalities'].copy())","975ac83b":"y1_valid.describe()","85d0da60":"y2_valid.describe()","aa356ba7":"y1_pred.describe()","846d5491":"y2_pred.describe()","953bd767":"mse = (mean_squared_log_error(y1_train, y1_valid)+mean_squared_log_error(y2_train, y2_valid))\/2\nmse","38cd24f3":"submission = pd.DataFrame({'ForecastId': df_test['ForecastId'],'ConfirmedCases': y1_pred,'Fatalities': y2_pred})\nsubmission.head()","77f60d14":"submission.to_csv('submission.csv',index = False)","ce239053":"# Data Preparation","5aa2afa8":"# Take a look at what you predict","98cb49cf":"Functions for trend","786b9ad4":"# Imports & Data Import","b5e01f3b":"# Cycle Approach with Trends","b78ffd27":"Code for the cycle","432ce120":"# Submission"}}