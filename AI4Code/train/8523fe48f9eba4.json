{"cell_type":{"db5c338f":"code","fa3fdf1e":"code","759e2489":"code","3094c7c7":"code","c8d24318":"code","1ab8a35d":"code","fb660507":"code","75688590":"code","7bf856f1":"code","62800e59":"code","6ab4d4aa":"code","4f9eb142":"code","160183d3":"code","c0bfe1b3":"code","c3429c6a":"code","ac0d72ef":"code","cb91f4c8":"code","86479822":"code","7c3e3049":"code","e7e0cad7":"code","be364b45":"markdown","e51d4e52":"markdown","141b1a1d":"markdown","4b1542dc":"markdown","63c75228":"markdown","27bfacde":"markdown","f26fd883":"markdown","7060bf22":"markdown","210dac2b":"markdown","17637700":"markdown","240a384f":"markdown","0f726743":"markdown","ccb5b787":"markdown","201820b9":"markdown","638ef190":"markdown","ef8cef06":"markdown"},"source":{"db5c338f":"# Installing the python library for the google maps API\n!pip install -U googlemaps \nimport googlemaps\n\n#installing the other 'usual' datascience libraries\nfrom datetime import datetime\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as mpl\nimport matplotlib.cm as cm\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\nfrom pandas.io.json import json_normalize\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n#install folium for map visualisation\n!pip install folium\nimport folium ","fa3fdf1e":"!wget -q https:\/\/glenteoh.com\/datascience\/mrt_lrt_coordinates.csv\n#credits to Lee Yu Xuan at https:\/\/www.kaggle.com\/yxlee245\/singapore-train-station-coordinates for compiling the coordinates of MRT stations in Singapore\nprint('Data downloaded!')","759e2489":"mrt_df = pd.read_csv('mrt_lrt_coordinates.csv')\nmrt_df.head()","3094c7c7":"indexes = mrt_df[mrt_df['type'] == \"LRT\"].index\nmrt_df.drop(indexes, inplace=True)\nmrt_df = mrt_df.reset_index(drop=True)\nmrt_df.tail() #we look at the tail, because the LRT stations are placed at the bottom.","c8d24318":"gmaps = googlemaps.Client(key=gmaps_key)\nbishan_bubble_tea = gmaps.places_nearby(\n            radius=500,\n            location=(1.3512096,103.8485599),\n            keyword=\"bubble tea\"\n        )","1ab8a35d":"bishan_bubble_tea","fb660507":"test_list = []\nfor store in bishan_bubble_tea['results']:\n    test_list.append([\n                store['name'],   \n                store['rating'],\n                store['vicinity'],\n                store['geometry']['location']['lat'], \n                store['geometry']['location']['lng']])\ndf = pd.DataFrame(test_list, columns=[\"Name\", \"Rating\",\"Address\", \"Lat\", \"Lng\"])\ndf","75688590":"def getNearbyPlaces(mrt, latitudes, longitudes):\n    \n    place_list=[]\n    for name, lat, lng in zip(mrt, latitudes, longitudes):\n        print(\"Querying \" + name)\n            \n        # create the API request.\n        query = gmaps.places_nearby(\n            radius=250,\n            location=(lat,lng),\n            keyword=\"bubble tea\"\n        )\n        \n        for place in query['results']:\n            place_list.append([\n                        name,\n                        place['name'],   \n                        place['rating'],\n                        place['vicinity'],\n                        place['geometry']['location']['lat'], \n                        place['geometry']['location']['lng']])\n    places_df = pd.DataFrame(place_list, columns=[\"MRT_Station\", \"Name\", \"Rating\",\"Address\", \"Lat\", \"Lng\"])\n        \n    return(places_df)","7bf856f1":"mrt_bubbletea = getNearbyPlaces(mrt=mrt_df['station_name'],\n                                latitudes=mrt_df['lat'],\n                                longitudes=mrt_df['lng'])","62800e59":"mrt_bubbletea.tail()","6ab4d4aa":"mrt_bubbletea.to_csv(r'mrt_bubble_tea.csv', index = False)","4f9eb142":"mrt_bubbletea.shape","160183d3":"mrt_bubbletea_counts = mrt_bubbletea.groupby('MRT_Station').count().reset_index()\nmrt_bubbletea_counts","c0bfe1b3":"mrt_bubbletea_counts.drop(['Rating', 'Address','Lat','Lng'], axis=1, inplace=True)\nmrt_bubbletea_counts = mrt_bubbletea_counts.rename(columns={\"Name\": \"Count\"})\nmrt_bubbletea_counts.sort_values(by=['Count'], ascending=True, inplace=True)\nmrt_bubbletea_counts = mrt_bubbletea_counts.set_index('MRT_Station')\nmrt_bubbletea_counts.head()","c3429c6a":"count2 = mrt_bubbletea_counts['Count'].tail(10)\ncount2","ac0d72ef":"count = mrt_bubbletea_counts['Count']\n\nmpl.style.use('default')\nmrt_bubbletea_counts.plot(kind='barh', figsize=(25, 25))\nplt.title('Number of Bubble Tea Stores by MRT Station', fontsize=16)\n\nfor index, value in enumerate(count): \n    label = format(str(value)) # format int with commas\n    plt.annotate(label, xy=(value + 0.1, index - 0.25 ), color='black')","cb91f4c8":"top10 = mrt_bubbletea_counts['Count'].tail(10)\n\nmpl.style.use('default')\nmrt_bubbletea_counts.tail(10).plot(kind='barh', figsize=(10, 5))\nplt.title('Top 10 MRT Stations by No. of Bubble Tea Shops', fontsize=16)\n\nfor index, value in enumerate(top10): \n    label = format(str(value)) # format int with commas\n    plt.annotate(label, xy=(value + 0.1, index - 0.15 ), color='black')","86479822":"bottom10 = mrt_bubbletea_counts['Count'].head(10)\n\nmpl.style.use('default')\nmrt_bubbletea_counts.head(10).plot(kind='barh', figsize=(10, 5))\nplt.title('Bottom 10 MRT Stations by No. of Bubble Tea Shops', fontsize=16)\n","7c3e3049":"mrt_merged = pd.merge(mrt_df, mrt_bubbletea_counts, left_on='station_name', right_on='MRT_Station')\nmrt_merged.head()","e7e0cad7":"SIN_lat = '1.3494661'\nSIN_lon = '103.8405051'\n\n# create map\nmap_stores = folium.Map(location=[SIN_lat, SIN_lon],tiles=\"OpenStreetMap\", zoom_start=12)\n\n# set color scheme for the stores\nx = np.arange(20)\nys = [i + x + (i*x)**2 for i in range(20)]\ncolors_array = cm.jet(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# add markers to the map\nmarkers_colors = []\nfor lat, lon, poi, stores in zip(mrt_merged['lat'], mrt_merged['lng'], mrt_merged['station_name'], mrt_merged['Count']):\n    label = folium.Popup(str(poi) + \" | \" + str(stores) + \" stores\", max_width=200, parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=5,\n        popup=label,\n        color=rainbow[stores-1],\n        fill=True,\n        fill_color=rainbow[stores-1],\n        fill_opacity=0.9).add_to(map_stores),\n\n\nmap_stores","be364b45":"<h3>Great, it works! I'm going to download the dataframe into a CSV file so that I don't need to query again if any errors crop up.<\/h3>","e51d4e52":"<h2>Let's visualize the data on a map.<\/h2>\n<p>Here I combined the table of bubble tea shops, with the latitude and longitude coordinate table that was downloaded at the start.<\/p>","141b1a1d":"<h2>Yup, this looks good. I can now proceed with the data for the rest of the MRT stations.<\/h2>\n\n<p>Let's continue by creating a function that can iterate through all the stations.<\/p>","4b1542dc":"<h2>The first step is to get the coordinates of the MRT Stations.<\/h2>\n<p>A kaggle user, Lee Yu Xuan (yxlee245) has already helpfully created such a list that I could use. His data can be found <a href=\"https:\/\/www.kaggle.com\/yxlee245\/singapore-train-station-coordinates\">here<\/a>. If you look at the code, I actually downloaded and reuploaded it into my own server. This is just to make things easier for myself.<\/p>","63c75228":"<p>The function above will also work for other places with some minor edits. All you have to do is change the keyword and radius yourself.<\/p>\n\n<h3>Now let's run the function<\/h3>","27bfacde":"<h2>Let's see how many bubble tea shops there are!<\/h2>","f26fd883":"<h3>Seems like Esplanade is tops with 20 bubble tea shops within 250m of the MRT station!<\/h3>\n<p>Does that mean that theatre-goers are secretly bubble tea addicts?<\/p>\n\n","7060bf22":"You can see that most of the areas with high bubble tea concentration are located in the shopping area, which is not surprising. However, <strong>Tampines<\/strong> seems to be a secret bubble tea enclave with a whopping 16 stores near its MRT station!","210dac2b":"<h2>Let's proceed to visualize and rank the MRT stations by number of bubble tea shops..<\/h2>","17637700":"<h1>Bubble Tea shops near MRT Stations in Singapore<\/h1>\n<h4>Wouldn't it be interesting to see how much Singaporeans love bubble tea by looking at the number of bubble tea shops near MRT stations?<\/h4>\n<p>In this analysis I will make use of the Google Maps API in order to find out the number of bubble tea shops near each MRT station, and then do a simple visualization at the end.<\/p>","240a384f":"There are LRT stations in there, which we don't need. So let's remove them.","0f726743":"Let's take a look at the dataframe after it's loaded.","ccb5b787":"<h2>First, I installed the required dependencies.<\/h2>","201820b9":"<h2>Using Folium, we can generate the map.<\/h2>","638ef190":"<h2>Testing the Google Maps API<\/h2>\n<p>Let's test the Nearby Search method on the Google Maps Places API for Bishan MRT as a test.<\/p>","ef8cef06":"Getting rid of all the unnecessary columns"}}