{"cell_type":{"edeb73e9":"code","f828f871":"code","1042b915":"code","d31c3a35":"code","b7071cf2":"code","f3740349":"code","f79ab043":"code","38d92d49":"code","2b286ff5":"code","0742d062":"code","f2c438f7":"code","c48cc640":"code","d83122d9":"code","d6ee019c":"code","4fc213b3":"code","68a04ae6":"code","ea3e3ae9":"code","f43f9b2b":"code","1e98c155":"code","e3748a41":"code","ec8b7b56":"code","ae3d479e":"code","ce13ed8d":"code","f0bddeca":"code","d9237a67":"code","1a2de812":"code","99d8a5c9":"code","06ef0caa":"code","bcb06809":"code","f02ff0d0":"markdown","4bd6253b":"markdown","81b10cf2":"markdown","a9897a12":"markdown","0cf06eac":"markdown","be44cd9a":"markdown","b29597c6":"markdown","cb46d0e0":"markdown","070de2d0":"markdown","89ca2e8f":"markdown","16c7db63":"markdown","d1e065b3":"markdown","b5b89294":"markdown","11e57756":"markdown","8cd29a66":"markdown","a4cb0613":"markdown","2b2df2f7":"markdown","aafef233":"markdown"},"source":{"edeb73e9":"# Import libraries\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport networkx as nx\n\n!pip install ema_workbench","f828f871":"# Import EMA workbench and dike model function\nfrom ema_workbench import (Model, CategoricalParameter,\n                           ScalarOutcome, IntegerParameter, RealParameter, load_results, save_results)\nfrom shutil import (copyfile, copytree)\ncopyfile(src = \"..\/input\/modules\/dike_model_simulation.py\", dst = \"..\/working\/dike_model_simulation.py\")\ncopyfile(src = \"..\/input\/modules\/dike_model_optimization.py\", dst = \"..\/working\/dike_model_optimization.py\")\ncopyfile(src = \"..\/input\/modules\/dike_model_function.py\", dst = \"..\/working\/dike_model_function.py\")\ncopyfile(src = \"..\/input\/modules\/funs_generate_network.py\", dst = \"..\/working\/funs_generate_network.py\")\ncopyfile(src = \"..\/input\/modules\/funs_dikes.py\", dst = \"..\/working\/funs_dikes.py\")\ncopyfile(src = \"..\/input\/modules\/funs_economy.py\", dst = \"..\/working\/funs_economy.py\")\ncopyfile(src = \"..\/input\/modules\/funs_hydrostat.py\", dst = \"..\/working\/funs_hydrostat.py\")\ncopyfile(src = \"..\/input\/modules\/problem_formulation.py\", dst = \"..\/working\/problem_formulation.py\")\ncopytree(src = \"..\/input\/modules\/Data\/\", dst = \"..\/working\/data\/\")\n\nfrom dike_model_function import DikeNetwork  # @UnresolvedImport\n\n\ndef sum_over(*args):\n    return sum(args)","1042b915":"# Import lake model for problem formulation 3\nfrom ema_workbench import (Model, MultiprocessingEvaluator, Policy, Scenario)\nfrom ema_workbench.em_framework.evaluators import perform_experiments\nfrom ema_workbench.em_framework.samplers import sample_uncertainties\nfrom ema_workbench.util import ema_logging\nimport time\nfrom problem_formulation import get_model_for_problem_formulation\n\nema_logging.log_to_stderr(ema_logging.INFO)\n\ndike_model, planning_steps = get_model_for_problem_formulation(3)","d31c3a35":"for unc in dike_model.uncertainties:\n    print(repr(unc))\n    \nuncertainties = dike_model.uncertainties\n\nimport copy\nuncertainties = copy.deepcopy(dike_model.uncertainties)","b7071cf2":"for policy in dike_model.levers:\n    print(repr(policy))\n    \nlevers = dike_model.levers \n\nimport copy\nlevers = copy.deepcopy(dike_model.levers)","f3740349":"for outcome in dike_model.outcomes:\n    print(repr(outcome))","f79ab043":"from ema_workbench import (MultiprocessingEvaluator, ema_logging,\n                           perform_experiments, SequentialEvaluator)\n\nema_logging.log_to_stderr(ema_logging.INFO)\n \nwith MultiprocessingEvaluator(dike_model) as evaluator:\n    experiments, outcomes = evaluator.perform_experiments(scenarios=250, policies=4) # CHANGE SCENARIO N","38d92d49":"# Save results from previous model run (scenarios = 250, policies = 4)\nfrom ema_workbench import save_results\n\nresults = experiments, outcomes\nsave_results(results, 'Run 1.2 - 250 scenarios 4 policies.tar.gz')","2b286ff5":"results = load_results('Run 1.2 - 250 scenarios 4 policies.tar.gz')\nexperiments, outcomes = results","0742d062":"# Only consider A.1 for analysis. With all outcomes, the plot is too large.\nA_list = ['A.1 Total Costs', 'A.1_Expected Number of Deaths', 'RfR Total Costs', 'Expected Evacuation Costs']\nA_dict = dict((k, outcomes[k]) for k in A_list)","f2c438f7":"from ema_workbench.analysis import pairs_plotting\n\nfig, axes = pairs_plotting.pairs_scatter(experiments, A_dict, group_by='policy',\n                                         legend=True)\nfig.set_size_inches(14,14)\nplt.show()","c48cc640":"from ema_workbench import load_results\n\nresults = load_results('Run 1.2 - 250 scenarios 4 policies.tar.gz')","d83122d9":"# Drop the policy levers in the data. This will otherwise mess with the analysis.\ncleaned_experiments = experiments.drop(labels=[l.name for l in dike_model.levers], axis=1)","d6ee019c":"# Make a dataframe of the data and add a new variable Total Expected Number of Deaths. This is the sum of all zones.\ndf_cleaned_experiments = pd.DataFrame(cleaned_experiments)\ndf_outcomes = pd.DataFrame(outcomes)\n\ndf_results = pd.concat([df_cleaned_experiments, df_outcomes], axis = 1, join = 'inner')\n\ndf_results['Total Expected Number of Deaths'] = df_results['A.1_Expected Number of Deaths'] + \\\n                                                df_results['A.2_Expected Number of Deaths'] + \\\n                                                df_results['A.3_Expected Number of Deaths'] + \\\n                                                df_results['A.4_Expected Number of Deaths'] + \\\n                                                df_results['A.5_Expected Number of Deaths']","4fc213b3":"# Run PRIM algorithm\nfrom ema_workbench.analysis import prim\n\ndata = df_results['Total Expected Number of Deaths']\n\n# Scenarios where total expected number of deaths are lower than 0.0001\ny = data < 0.0001\nx = cleaned_experiments\n\nprim_alg = prim.Prim(x, y, threshold = 0.8)\nbox1 = prim_alg.find_box()\n\nbox1.show_tradeoff()\nplt.show()","68a04ae6":"box1.inspect(style='graph')\nplt.show()","ea3e3ae9":"from ema_workbench.analysis import dimensional_stacking\n\ndimensional_stacking.create_pivot_plot(cleaned_experiments, y, nr_levels=3)\nplt.show()","f43f9b2b":"with MultiprocessingEvaluator(dike_model) as evaluator:\n    results_1 = evaluator.perform_experiments(scenarios = 1000, policies=4) # Number of scenarios changed","1e98c155":"save_results(results_1, 'Run 1.2 - 1000 scenarios 4 policies.tar.gz')","e3748a41":"#load 1000 scenarios\nresults_1 = load_results('Run 1.2 - 1000 scenarios 4 policies.tar.gz')\nexperiments_1, outcomes_1 = results_1","ec8b7b56":"#combine Expected numer of deaths\ndata = outcomes_1['A.1_Expected Number of Deaths'] + \\\n        outcomes_1['A.2_Expected Number of Deaths'] + \\\n        outcomes_1['A.3_Expected Number of Deaths'] + \\\n        outcomes_1['A.4_Expected Number of Deaths'] + \\\n        outcomes_1['A.5_Expected Number of Deaths']","ae3d479e":"# Re-Run PRIM algorithm\nfrom ema_workbench.analysis import prim\n\n# Scenarios where total expected number of deaths are lower than 0.0001\ny = data < 0.0001\nx = experiments_1\n\nprim_alg = prim.Prim(x, y, threshold = 0.8)\nbox1 = prim_alg.find_box()\n\nbox1.show_tradeoff()\nplt.show()","ce13ed8d":"box1.inspect(style='graph')\nplt.show()","f0bddeca":"from ema_workbench.analysis import dimensional_stacking\n\ndimensional_stacking.create_pivot_plot(x, y, nr_levels=3)\nplt.show()","d9237a67":"experiments_1, outcomes_1 = results_1\n\ncleaned_experiments_1 = experiments_1.drop(labels=[l.name for l in dike_model.levers], axis=1)\n\ndf_cleaned_experiments_1 = pd.DataFrame(cleaned_experiments_1)\ndf_outcomes_1 = pd.DataFrame(outcomes_1)\n\ndf_results_1 = pd.concat([df_cleaned_experiments_1, df_outcomes_1], axis = 1, join = 'inner')\n\ndf_results_1['Total Expected Number of Deaths'] = df_results_1['A.1_Expected Number of Deaths'] + \\\n                                                df_results_1['A.2_Expected Number of Deaths'] + \\\n                                                df_results_1['A.3_Expected Number of Deaths'] + \\\n                                                df_results_1['A.4_Expected Number of Deaths'] + \\\n                                                df_results_1['A.5_Expected Number of Deaths']\n\ndata_1 = df_results_1['Total Expected Number of Deaths']\n\ny_1 = data_1 < 0.0001\n\ndimensional_stacking.create_pivot_plot(cleaned_experiments_1, y_1, nr_levels=3)\nplt.show()","1a2de812":"from ema_workbench.analysis import feature_scoring\n\nx = experiments_1\ny = outcomes_1\n\nfs = feature_scoring.get_feature_scores_all(x, y)\nsns.heatmap(fs, cmap='viridis', annot=True)\nplt.show()","99d8a5c9":"#Setting 1 policy for running sensitivity analysis\nfrom ema_workbench import Policy\npolicies = [Policy('policy 1', **{'0_RfR 0':1,\n                                  '0_RfR 1':1,\n                                  '0_RfR 2':1,\n                                  '1_RfR 0':0,\n                                  '1_RfR 1':0,\n                                  '1_RfR 2':0,\n                                  '2_RfR 0':0,\n                                  '2_RfR 1':0,\n                                  '2_RfR 2':0,\n                                  '3_RfR 0':0,\n                                  '3_RfR 1':0,\n                                  '3_RfR 2':0,\n                                  '4_RfR 0':0,\n                                  '4_RfR 1':0,\n                                  '4_RfR 2':0,\n                                  'EWS_DaysToThreat': 1,\n                                  'A.1_DikeIncrease 0':5,\n                                  'A.1_DikeIncrease 1':0,\n                                  'A.1_DikeIncrease 2':0,\n                                  'A.2_DikeIncrease 0':0,\n                                  'A.2_DikeIncrease 1':0,\n                                  'A.2_DikeIncrease 2':0,\n                                  'A.3_DikeIncrease 0':0,\n                                  'A.3_DikeIncrease 1':0,\n                                  'A.3_DikeIncrease 2':0,\n                                  'A.4_DikeIncrease 0':0,\n                                  'A.4_DikeIncrease 1':0,\n                                  'A.4_DikeIncrease 2':0,\n                                  'A.5_DikeIncrease 0':0,\n                                  'A.5_DikeIncrease 1':0,\n                                  'A.5_DikeIncrease 2':0}),\n           Policy('policy 2', **{'0_RfR 0':0,\n                                  '0_RfR 1':0,\n                                  '0_RfR 2':0,\n                                  '1_RfR 0':0,\n                                  '1_RfR 1':0,\n                                  '1_RfR 2':0,\n                                  '2_RfR 0':0,\n                                  '2_RfR 1':0,\n                                  '2_RfR 2':0,\n                                  '3_RfR 0':0,\n                                  '3_RfR 1':0,\n                                  '3_RfR 2':0,\n                                  '4_RfR 0':1,\n                                  '4_RfR 1':1,\n                                  '4_RfR 2':1,\n                                  'EWS_DaysToThreat': 1,\n                                  'A.1_DikeIncrease 0':0,\n                                  'A.1_DikeIncrease 1':0,\n                                  'A.1_DikeIncrease 2':0,\n                                  'A.2_DikeIncrease 0':0,\n                                  'A.2_DikeIncrease 1':0,\n                                  'A.2_DikeIncrease 2':0,\n                                  'A.3_DikeIncrease 0':0,\n                                  'A.3_DikeIncrease 1':0,\n                                  'A.3_DikeIncrease 2':0,\n                                  'A.4_DikeIncrease 0':0,\n                                  'A.4_DikeIncrease 1':0,\n                                  'A.4_DikeIncrease 2':0,\n                                  'A.5_DikeIncrease 0':5,\n                                  'A.5_DikeIncrease 1':0,\n                                  'A.5_DikeIncrease 2':0}),\n           Policy('policy 3', **{'0_RfR 0':0,\n                                  '0_RfR 1':0,\n                                  '0_RfR 2':0,\n                                  '1_RfR 0':1,\n                                  '1_RfR 1':0,\n                                  '1_RfR 2':0,\n                                  '2_RfR 0':0,\n                                  '2_RfR 1':1,\n                                  '2_RfR 2':0,\n                                  '3_RfR 0':0,\n                                  '3_RfR 1':0,\n                                  '3_RfR 2':1,\n                                  '4_RfR 0':0,\n                                  '4_RfR 1':0,\n                                  '4_RfR 2':0,\n                                  'EWS_DaysToThreat': 1,\n                                  'A.1_DikeIncrease 0':0,\n                                  'A.1_DikeIncrease 1':0,\n                                  'A.1_DikeIncrease 2':0,\n                                  'A.2_DikeIncrease 0':0,\n                                  'A.2_DikeIncrease 1':0,\n                                  'A.2_DikeIncrease 2':0,\n                                  'A.3_DikeIncrease 0':5,\n                                  'A.3_DikeIncrease 1':0,\n                                  'A.3_DikeIncrease 2':0,\n                                  'A.4_DikeIncrease 0':0,\n                                  'A.4_DikeIncrease 1':0,\n                                  'A.4_DikeIncrease 2':0,\n                                  'A.5_DikeIncrease 0':0,\n                                  'A.5_DikeIncrease 1':0,\n                                  'A.5_DikeIncrease 2':0})]","06ef0caa":"#Running SOBOL evaluator\nfrom ema_workbench import (MultiprocessingEvaluator, ema_logging,\n                           perform_experiments, SequentialEvaluator)\nfrom ema_workbench.em_framework.evaluators import SOBOL, LHS\nfrom ema_workbench.em_framework import get_SALib_problem\nfrom SALib.analyze import sobol\n\nema_logging.log_to_stderr(ema_logging.INFO)\n\nn_exp = 1000\n\nwith MultiprocessingEvaluator(dike_model) as evaluator:\n    results_SOBOL = evaluator.perform_experiments(n_exp, policies, uncertainty_sampling=SOBOL)","bcb06809":"problem = get_SALib_problem(lake_model.uncertainties)\n\nsobol_results = {}\nfor policy in experiments_SOBOL.policy.unique():\n    logical = experiments_SOBOL.policy == policy\n    y = results_SOBOL['reliability'][logical]\n    indices = analyze(problem, y)\n    sobol_results[policy] = indices","f02ff0d0":"### 1.2 Run model","4bd6253b":"### 1.3 Visualize results in multi scatter plot","81b10cf2":"Because there are a lot of white spaces in the dimensional stacking plot we will run the model many more times than we have done previously.","a9897a12":"### 1.2.1 Scenario discovery","0cf06eac":"Scenarios are points in the uncertainty space (Kwakkel, 2020). We will therefore drop the policy levers in the data.","be44cd9a":"### HIERONDER EVEN CONTROLEREN (DIT IS OM ALLEEN A.1 TE SELECTEREN)","b29597c6":"### 0. Import libraries and model","cb46d0e0":"#### 1.1.2 Levers","070de2d0":"#### 1.1.3 Outcomes","89ca2e8f":"## 1.3 Sensitivity Analysis","16c7db63":"# 1. Open exploration","d1e065b3":"Note: A.1 Total Costs is the sum of A.1 Annual Damage and A.1 Dike Investment Costs","b5b89294":"### 1.1 Model initialization","11e57756":"## Dimensional Stacking 1000 scenarios zonder PRIM","8cd29a66":"## Dimensional stacking 1000 scenarios met PRIM","a4cb0613":"#### 1.1.1 Uncertainties","2b2df2f7":"## 1.2 Advanced analysis","aafef233":"## Feauture scoring"}}