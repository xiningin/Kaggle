{"cell_type":{"34996748":"code","3e25ff66":"code","5cd4fae7":"code","5162431a":"code","24c51545":"code","2230599c":"code","a19b0953":"code","3d5fa760":"code","e38b19e8":"code","c559011b":"code","4d9a5093":"code","059532aa":"code","6bec405a":"code","74fb890e":"code","eb75bf27":"code","75727a35":"code","f3d584db":"code","e887c4ec":"code","000d10f5":"code","36e50d1f":"code","50c3890d":"code","7ca80066":"code","af2d5dcb":"code","fc8ebb1f":"code","a48f465e":"code","baeb44cf":"code","e6895ac6":"code","fab145d2":"code","16c0677e":"code","3f414b05":"code","b8024bf9":"code","f34b7a77":"code","f07e17dc":"code","062e3491":"code","fbb53db0":"code","72ac0199":"code","2b937931":"code","c3ce0310":"code","dd56ae2f":"code","4710493b":"code","5495baf0":"code","c20864a3":"code","02ea1497":"code","89a27926":"code","18ca1b42":"code","331d901b":"code","71ad8c4a":"code","8ac61285":"code","ce54118e":"code","5354f031":"code","ef8f6c82":"code","0c4a919d":"code","70a4caca":"code","7a083ec3":"code","510b9719":"code","772acd31":"code","ec47c14e":"code","c8e34d34":"code","34f7c506":"code","57a25263":"code","c337028c":"code","e9c1d8fb":"code","cfab0250":"code","961b9326":"code","7edcae0d":"code","f6ed65f4":"code","a0f13283":"code","863e20b5":"code","97138116":"code","bb52a974":"code","d7a7d403":"code","53571fca":"code","88e12b21":"code","ee3ed088":"code","2094b60d":"code","92556d2b":"code","35048d74":"code","0d47064b":"code","fb65a571":"code","070d095d":"code","a4a5a0bc":"code","152c59d8":"code","d92226c7":"code","4be46a98":"code","aa45d125":"code","7b8e16b1":"code","f94e426c":"code","af0372a0":"code","ab58d7d5":"code","d4356495":"code","a1dc1bb6":"code","5e148f55":"code","078b8a19":"code","8bad0453":"code","7598fb23":"code","c32dceaa":"code","3823c8d9":"code","3041e5d9":"code","42cc9bb1":"code","a34350fe":"code","c0f709b4":"code","abd6cbce":"code","4a433213":"code","ae6c34e7":"code","73bd29f5":"code","fd171b23":"code","222408a3":"code","45a0834d":"code","391dd91e":"code","03bbfbd6":"code","81ae4221":"code","540ed6fa":"code","9c91fa3f":"code","1bd1e38f":"code","52dda00a":"code","30f3d50e":"code","1ad086a3":"code","b0edbf2e":"code","217393ad":"code","9890c722":"code","299e2a1a":"code","f429d6fc":"code","ee8d2c1d":"code","30347261":"code","61db2027":"code","7b85e106":"code","74ec5142":"code","16084176":"code","8ba66cba":"code","ef961846":"code","9c269130":"code","fb6a7a66":"code","31299b9e":"code","91198905":"code","ad1c1bdb":"code","c83ba0ee":"code","b7069930":"code","0cddacad":"code","8c5a184a":"code","0225dfdb":"code","4ebd548a":"code","09acc3fb":"code","12c1677e":"code","e3d082d4":"code","71983222":"code","b745a9ee":"code","5d04e43b":"code","da783b25":"code","b49e0193":"code","10a9866c":"code","3f632d13":"code","2fed9a01":"code","8fe76c2d":"code","0bd6f088":"code","8b953540":"code","1d3b4541":"code","81dcc223":"code","8a32735f":"code","8f4904ed":"code","49e8dd8f":"code","2898c9eb":"code","9a589a2b":"code","4b898c5c":"code","16a19ad3":"code","bb7874a4":"code","467c357f":"code","e109e34b":"code","1b6f52e3":"code","7a1cf92f":"code","94bb4edd":"code","3e92aefb":"code","a6b2c9ca":"code","3377c6fd":"code","63758155":"code","0020d696":"code","2822bd48":"code","04109e3d":"code","b112a70c":"code","6e65a21f":"code","89f34605":"code","d38acfe7":"code","5deab3a8":"code","3d988744":"code","c4a82ebe":"code","aefd58b8":"code","023fe0d8":"code","5072edd6":"code","87b07ec9":"code","e00cb2cc":"code","da8f9962":"code","2375c1e3":"code","f3f5ef22":"code","7404f9b7":"code","005a4dff":"code","0ff68ca1":"code","c56c907d":"code","22a0ac8d":"code","f1f111d1":"code","f33facb2":"code","75268a70":"code","26551600":"code","963d9b19":"code","92147a63":"code","5d023006":"code","4dadd468":"code","c8a5aaa5":"code","18b45f37":"code","101e8cde":"code","62c74153":"code","dcb4c18c":"code","8c551fd4":"code","7faf2380":"code","a314d228":"code","84c1cad7":"code","7460f220":"code","5ec03576":"code","a5201e39":"code","c93cfb58":"code","5a4fbbf4":"code","54e2634e":"code","da2a41c0":"code","0561a4de":"code","f670c33c":"code","9584d6c1":"code","92ad7274":"code","e3a65493":"code","4a3ae6c5":"code","f5a3d369":"code","1bf58d85":"code","1a49fb31":"code","89fdbaa0":"code","84932128":"code","f93f26c3":"code","09b256fd":"code","30c60094":"code","4adee1c2":"markdown","f97b8aaf":"markdown","5680dfb3":"markdown","fcb2001c":"markdown","859a151e":"markdown","4a770ca0":"markdown","72bba6e3":"markdown","9454af48":"markdown","492c5085":"markdown","0d9593bc":"markdown","5702ee74":"markdown","95450512":"markdown","43f13a0c":"markdown","bdd5af5d":"markdown","fd2f3e30":"markdown","411d56d3":"markdown","f729b45c":"markdown","77ab10a5":"markdown","8cb2fc7c":"markdown","3b8b4d61":"markdown","668baac6":"markdown","ac7c3d26":"markdown","a56efbad":"markdown","48b7afe9":"markdown","f1e34252":"markdown","8b955108":"markdown","688e5c92":"markdown","89d29757":"markdown","f7431027":"markdown","47f0780c":"markdown","0830cec6":"markdown","988ca0b0":"markdown","e99ddb4c":"markdown","142ca44f":"markdown","372f73ba":"markdown","b42594ad":"markdown","39a5a66e":"markdown","e742d315":"markdown","258fe96a":"markdown","c00ca1d2":"markdown","9cbfb3bd":"markdown","edfd7261":"markdown","b2885535":"markdown","18987ba7":"markdown","96b7b137":"markdown","a2c0fc11":"markdown","61b8a8fe":"markdown","1be0c1b5":"markdown","f96bf55e":"markdown","48d93825":"markdown","3608e4e4":"markdown","f761799c":"markdown","917dcaf4":"markdown","7ce2c7be":"markdown","82cd3198":"markdown","91edbeab":"markdown","4dcde81e":"markdown","f8fa6091":"markdown","748c246c":"markdown","0e5ccc35":"markdown","97525d6c":"markdown","edf9927f":"markdown","9192060d":"markdown","b74ddfd8":"markdown","84e3bff7":"markdown","657f0689":"markdown","7c288cf0":"markdown","6e3e4223":"markdown","6e8d57ed":"markdown","838b3fc4":"markdown","e0f7aaab":"markdown","b313d752":"markdown","fff5ff88":"markdown","1906dcea":"markdown","8770028f":"markdown","aa38e806":"markdown","560c9253":"markdown","8986170f":"markdown"},"source":{"34996748":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3e25ff66":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom scipy import stats\nfrom scipy.stats import skew, norm\nfrom scipy.special import boxcox1p\nfrom scipy.stats.stats import pearsonr\n\nimport warnings\nwarnings.filterwarnings('ignore')","5cd4fae7":"#Set up sns\nsns.set(style='white',context='notebook',palette='deep')\ncolors=['#66c2ff','#5cd6d6','#c2c2d6','#00cc99','#ffd966','#dab3ff']\nsns.set_palette(palette=colors,n_colors=4)","5162431a":"#Import dataset\ntrain = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","24c51545":"train_ID = train['Id']\ntest_ID = test['Id']\n\ntrain.drop('Id', axis=1, inplace=True)\ntest.drop('Id', axis=1, inplace=True)\n\ntrain.head()","2230599c":"#Plot GrLivArea against Sale price to visualize relationship and remove outliers\nplt.subplots(figsize=(15,5))\n\nplt.subplot(1,2,1)\ng = sns.regplot(x=train['GrLivArea'], y=train['SalePrice'], fit_reg=False).set_title('Before removing outlier')\n\nplt.subplot(1,2,2)\ntrain = train.drop(train[(train['GrLivArea'] > 4000)].index)\ng = sns.regplot(x=train['GrLivArea'], y=train['SalePrice'], fit_reg=False).set_title('After removing outlier')","a19b0953":"#First combine two dataset into one for easier imputation\nrtrain = train.shape[0]\nrtest = test.shape[0]\n\n#Store SalePrice and remove\ny_train = train['SalePrice']\n\ncombined = pd.concat((train, test)).reset_index(drop=True)\ncombined.drop(['SalePrice'],axis=1, inplace=True)\nprint('Shape of combined dataset: ', combined.shape)","3d5fa760":"combined_na = combined.isnull().sum()\ncombined_na = combined_na.drop(combined_na[combined_na == 0].index).sort_values(ascending=True)\nplt.subplots(figsize=(15,8))\ncombined_na.plot(kind='barh')\nplt.show()","e38b19e8":"def checkMissing():\n    combined_na = combined.isnull().sum()\n    print('Features with missing value: ', combined_na.drop(combined_na[combined_na==0].index))","c559011b":"for feature in ('PoolQC', 'MiscFeature','Alley','Fence','FireplaceQu','GarageQual','GarageType','GarageFinish','GarageCond','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','MSSubClass','MasVnrType'):\n    combined[feature] = combined[feature].fillna('None')","4d9a5093":"combined['LotFrontage'] = combined.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))","059532aa":"for feature in ('GarageYrBlt', 'GarageArea','GarageCars','BsmtFinSF1','BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF','MasVnrArea','BsmtFullBath','BsmtHalfBath'):\n    combined[feature] = combined[feature].fillna(0)\n","6bec405a":"#For these features with just a few missing value below, fill in with their most frequent value\ndef imputeMode(feature):\n    mode = combined[feature].value_counts().index[0]\n    combined[feature] = combined[feature].fillna(mode)","74fb890e":"imputeMode('MSZoning')\nimputeMode('Electrical')\nimputeMode('KitchenQual')\nimputeMode('Exterior1st')\nimputeMode('Exterior2nd')\nimputeMode('SaleType')\nimputeMode('Functional')\nprint('Imputation Mode Done.')","eb75bf27":"checkMissing()","75727a35":"#Take a closer inpect on how Utilities feature behave\nplt.subplots(figsize=(15,5))\nplt.subplot(1,2,1)\ng = sns.countplot(x='Utilities', data=train).set_title('Utilities from training data')\n\nplt.subplot(1,2,2)\ng = sns.countplot(x='Utilities', data=test).set_title('Utilities from testing data')","f3d584db":"#Since in the testing data the Utilities feature doesn't vary so we'll drop this data.\ncombined = combined.drop('Utilities', axis=1)","e887c4ec":"checkMissing()","000d10f5":"#Produce correlation heatmap\ncorr = train.corr()\nplt.subplots(figsize=(30,30))\nsns.heatmap(corr,vmax=1, vmin=0,annot=True)\nplt.show()","36e50d1f":"feat_poly = ['OverallQual','GrLivArea','GarageCars',\n             'GarageArea','TotalBsmtSF','1stFlrSF',\n             'FullBath','TotRmsAbvGrd','Fireplaces',\n             'MasVnrArea','BsmtFinSF1','LotFrontage',\n             'WoodDeckSF','OpenPorchSF','2ndFlrSF']","50c3890d":"for feature in feat_poly:\n    combined[feature + '-2'] = combined[feature] ** 2","7ca80066":"for feature in feat_poly:\n    combined[feature + '-3'] = combined[feature] ** 3","af2d5dcb":"for feature in feat_poly:\n    combined[feature + '-4'] = combined[feature] ** 4","fc8ebb1f":"def generatePlots(feature, order=None):\n    if order==True:\n        plot_order=train[feature].value_counts().sort_values(ascending=True).index\n    else:plot_order=order\n    plt.subplots(figsize=(20,5))\n    \n    plt.subplot(1,3,1)\n    sns.boxplot(x=feature, y='SalePrice', data=train, order=plot_order)\n    \n    plt.subplot(1,3,2)\n    sns.stripplot(x=feature, y='SalePrice',data=train, size=5, jitter=True, order=plot_order)\n    \n    plt.subplot(1,3,3)\n    sns.barplot(x=feature, y='SalePrice', data=train, order=plot_order)","a48f465e":"generatePlots('BsmtQual',['Fa','TA','Gd','Ex'])","baeb44cf":"combined['BsmtQual'] = combined['BsmtQual'].map({'None':0, \"Fa\":1,\"TA\":2,\"Gd\":3,\"Ex\":4})\ncombined['BsmtQual'].unique()","e6895ac6":"generatePlots('BsmtCond',['Po','Fa','TA','Gd'])","fab145d2":"combined['BsmtCond'] = combined['BsmtCond'].map({'None':0, \"Po\":1,\"Fa\":2,\"TA\":3,\"Gd\":4, 'Ex':5})\ncombined['BsmtCond'].unique()","16c0677e":"generatePlots('BsmtExposure',['No','Mn','Av','Gd'])","3f414b05":"combined['BsmtExposure'] = combined['BsmtExposure'].map({'None':0, \"No\":1,\"Mn\":2,\"Av\":3,\"Gd\":4})\ncombined['BsmtExposure'].unique()","b8024bf9":"generatePlots('BsmtFinType1',['Unf','LwQ','Rec','BLQ','ALQ','GLQ'])","f34b7a77":"combined = pd.get_dummies(combined, columns=['BsmtFinType1'],prefix='BsmtFinType1')","f07e17dc":"combined['BsmtFinSF1_Band'] = pd.cut(combined['BsmtFinSF1'],4)","062e3491":"combined['BsmtFinSF1_Band'].unique()","fbb53db0":"combined.loc[combined['BsmtFinSF1']<=1002.5, 'BsmtFinSF1'] = 1\ncombined.loc[(combined['BsmtFinSF1']>1002.5) & (combined['BsmtFinSF1'] <= 2005),'BsmtFinSF1'] = 2\ncombined.loc[(combined['BsmtFinSF1']>2005) & (combined['BsmtFinSF1'] <= 3007.5),'BsmtFinSF1'] = 3\ncombined.loc[(combined['BsmtFinSF1']>3007.5) & (combined['BsmtFinSF1'] <= 4010),'BsmtFinSF1'] = 4\n\ncombined['BsmtFinSF1'] = combined['BsmtFinSF1'].astype(int)\ncombined.drop('BsmtFinSF1_Band', axis=1, inplace=True)\n\ncombined = pd.get_dummies(combined, columns=['BsmtFinSF1'], prefix='BsmtFinSF1')","72ac0199":"combined.head()","2b937931":"generatePlots('BsmtFinType2',['Unf','LwQ','Rec','BLQ','ALQ','GLQ'])","c3ce0310":"combined = pd.get_dummies(combined, columns=['BsmtFinType2'], prefix='BsmtFinType2')\ncombined.head()","dd56ae2f":"combined['BsmtFinSF2_Flag'] = combined['BsmtFinSF2'].map(lambda x: 0 if x == 0 else 1)\ncombined.drop('BsmtFinSF2', axis=1, inplace=True)","4710493b":"combined['BsmtUnfSF_Band'] = pd.cut(combined['BsmtUnfSF'],3)\ncombined['BsmtUnfSF_Band'].unique()","5495baf0":"combined.loc[combined['BsmtUnfSF']<=778.667, 'BsmtUnfSF'] = 1\ncombined.loc[(combined['BsmtUnfSF']>778.667) & (combined['BsmtUnfSF'] <= 1557.333),'BsmtUnfSF'] = 2\ncombined.loc[(combined['BsmtUnfSF']>1557.333) & (combined['BsmtUnfSF'] <= 2336),'BsmtUnfSF'] = 3\n\ncombined['BsmtUnfSF'] = combined['BsmtUnfSF'].astype(int)\ncombined.drop('BsmtUnfSF_Band', axis=1, inplace=True)\n\ncombined = pd.get_dummies(combined, columns=['BsmtUnfSF'], prefix='BsmtUnfSF')","c20864a3":"combined.head()","02ea1497":"combined['TotalBsmtSF_Band'] = pd.cut(combined['TotalBsmtSF'], 10)\ncombined['TotalBsmtSF_Band'].unique()","89a27926":"combined.loc[combined['TotalBsmtSF']<=509.5, 'TotalBsmtSF'] = 1\ncombined.loc[(combined['TotalBsmtSF']>509.5) & (combined['TotalBsmtSF']<=1019), 'TotalBsmtSF'] = 2\ncombined.loc[(combined['TotalBsmtSF']>1019) & (combined['TotalBsmtSF']<=1528.5), 'TotalBsmtSF'] = 3\ncombined.loc[(combined['TotalBsmtSF']>1528.5) & (combined['TotalBsmtSF']<=2038), 'TotalBsmtSF'] = 4\ncombined.loc[(combined['TotalBsmtSF']>2038) & (combined['TotalBsmtSF']<=2547.5), 'TotalBsmtSF'] = 5\ncombined.loc[(combined['TotalBsmtSF']>2547.5) & (combined['TotalBsmtSF']<=3057), 'TotalBsmtSF'] = 6\ncombined.loc[(combined['TotalBsmtSF']>3057) & (combined['TotalBsmtSF']<=3566.5), 'TotalBsmtSF'] = 7\ncombined.loc[combined['TotalBsmtSF']>3566.5, 'TotalBsmtSF'] = 8\ncombined['TotalBsmtSF'] = combined['TotalBsmtSF'].astype(int)\n\ncombined.drop('TotalBsmtSF_Band', axis=1, inplace=True)\n\ncombined = pd.get_dummies(combined, columns = [\"TotalBsmtSF\"], prefix=\"TotalBsmtSF\")\ncombined.head()","18ca1b42":"def binStep1(feature, num_bin):\n    combined[feature + '_Band'] = pd.cut(combined[feature], num_bin)\n    combined[feature + \"_Band\"].unique()","331d901b":"def binStep2(feature, target, minVal=None, maxVal=None):\n    if minVal == None and maxVal != None:\n        combined.loc[combined[feature]<= maxVal, feature] = target\n    elif maxVal == None and minVal != None:\n        combined.loc[combined[feature]>minVal, feature] = target\n    else:\n        combined.loc[(combined[feature]>minVal) & (combined[feature]<=maxVal), feature] = target","71ad8c4a":"def binStep3(feature):\n    combined[feature] = combined[feature].astype(int)\n\n    combined.drop(feature + '_Band', axis=1, inplace=True)\n\n    combined = pd.get_dummies(combined, columns = [feature], prefix=feature)\n    combined.head(3)","8ac61285":"combined['1stFlrSF_Band'] = pd.cut(combined['1stFlrSF'], 6)\ncombined['1stFlrSF_Band'].unique()","ce54118e":"combined.loc[combined['1stFlrSF']<=1127.5, '1stFlrSF'] = 1\ncombined.loc[(combined['1stFlrSF']>1127.5) & (combined['1stFlrSF']<=1921), '1stFlrSF'] = 2\ncombined.loc[(combined['1stFlrSF']>1921) & (combined['1stFlrSF']<=2714.5), '1stFlrSF'] = 3\ncombined.loc[(combined['1stFlrSF']>2714.5) & (combined['1stFlrSF']<=3508), '1stFlrSF'] = 4\ncombined.loc[(combined['1stFlrSF']>3508) & (combined['1stFlrSF']<=4301.5), '1stFlrSF'] = 5\ncombined.loc[combined['1stFlrSF']>4301.5, '1stFlrSF'] = 6\ncombined['1stFlrSF'] = combined['1stFlrSF'].astype(int)\n\ncombined.drop('1stFlrSF_Band', axis=1, inplace=True)\n\ncombined = pd.get_dummies(combined, columns = [\"1stFlrSF\"], prefix=\"1stFlrSF\")\ncombined.head(3)","5354f031":"grid = plt.GridSpec(2, 3, wspace=0.1, hspace=0.15)\nplt.subplots(figsize =(30, 15))\n\nplt.subplot(grid[0, 0])\ng = sns.regplot(x=train['2ndFlrSF'], y=train['SalePrice'], fit_reg=False, label = \"corr: %2f\"%(pearsonr(train['2ndFlrSF'], train['SalePrice'])[0]))\ng = g.legend(loc=\"best\")\n\nplt.subplot(grid[0, 1:])\nsns.boxplot(x=\"Neighborhood\", y=\"2ndFlrSF\", data=train, palette = colors)\n\nplt.subplot(grid[1, 0]);\nsns.barplot(x=\"BldgType\", y=\"2ndFlrSF\", data=train, palette = colors)\n\nplt.subplot(grid[1, 1]);\nsns.barplot(x=\"HouseStyle\", y=\"2ndFlrSF\", data=train, palette = colors)\n\nplt.subplot(grid[1, 2]);\nsns.barplot(x=\"LotShape\", y=\"2ndFlrSF\", data=train, palette = colors);","ef8f6c82":"binStep1('2ndFlrSF', 6)","0c4a919d":"binStep2('2ndFlrSF', 1, maxVal=310.333)","70a4caca":"binStep2('2ndFlrSF', 2, minVal=310.333,maxVal=620.667)","7a083ec3":"binStep2('2ndFlrSF', 3, minVal=620.667,maxVal=931)","510b9719":"binStep2('2ndFlrSF', 4, minVal=931,maxVal=1241.333)","772acd31":"binStep2('2ndFlrSF',5, minVal=1241.333,maxVal=1551.667)","ec47c14e":"binStep2('2ndFlrSF', 6, minVal=1551.667)","c8e34d34":"combined['2ndFlrSF'] = combined['2ndFlrSF'].astype(int)\n\ncombined.drop('2ndFlrSF_Band', axis=1, inplace=True)\n\ncombined = pd.get_dummies(combined, columns = [\"2ndFlrSF\"], prefix=\"2ndFlrSF\")\ncombined.head(3)","34f7c506":"combined['LowQualFinSF_Flag'] = combined['LowQualFinSF'].map(lambda x : 0 if x==0 else 1)","57a25263":"combined.drop('LowQualFinSF', axis=1, inplace=True)","c337028c":"combined['TotalBathrooms'] = combined['BsmtHalfBath'] + combined['BsmtFullBath'] + combined['HalfBath'] + combined['FullBath']","e9c1d8fb":"columns = ['BsmtHalfBath','BsmtFullBath','HalfBath','FullBath']","cfab0250":"combined.drop(columns, axis=1, inplace=True)","961b9326":"generatePlots('KitchenQual', ['Fa','TA','Gd','Ex'])","7edcae0d":"combined['KitchenQual'] = combined['KitchenQual'].map({'Fa':1,\"TA\":2,\"Gd\":3,\"Ex\":4})","f6ed65f4":"combined['KitchenQual'].unique()","a0f13283":"generatePlots('FireplaceQu',['Po','Fa','TA','Gd','Ex'])","863e20b5":"combined['FireplaceQu'] = combined['FireplaceQu'].map({'None':0,'Po':1,'Fa':2,\"TA\":3,\"Gd\":4,\"Ex\":5})","97138116":"combined['FireplaceQu'].unique()","bb52a974":"binStep1('GrLivArea', 6)","d7a7d403":"binStep2('GrLivArea', 1, maxVal=1127.5)","53571fca":"binStep2('GrLivArea', 2, minVal=1127.5, maxVal=1921)","88e12b21":"binStep2('GrLivArea', 3, minVal=1921, maxVal=2714.5)","ee3ed088":"binStep2('GrLivArea', 4, minVal=2714.5, maxVal=3508)","2094b60d":"binStep2('GrLivArea', 5, minVal=3508, maxVal=4301.5)","92556d2b":"binStep2('GrLivArea', 6, minVal=4301.5)","35048d74":"combined['GrLivArea'] = combined['GrLivArea'].astype(int)\n\ncombined.drop('GrLivArea_Band', axis=1, inplace=True)\n\ncombined = pd.get_dummies(combined, columns = [\"GrLivArea\"], prefix=\"GrLivArea\")\ncombined.head(3)","0d47064b":"generatePlots('MSSubClass')","fb65a571":"combined['MSSubClass'] = combined['MSSubClass'].astype(str)\ncombined = pd.get_dummies(combined, columns = [\"MSSubClass\"], prefix=\"MSSubClass\")","070d095d":"generatePlots('BldgType')","a4a5a0bc":"combined['BldgType'] = combined['BldgType'].astype(str)\ncombined = pd.get_dummies(combined, columns=['BldgType'], prefix='BldgType')\ncombined.head()","152c59d8":"generatePlots('HouseStyle')","d92226c7":"#Cluster those categories with similarity\ncombined['HouseStyle'] = combined['HouseStyle'].map({\"2Story\":\"2Story\", \"1Story\":\"1Story\", \"1.5Fin\":\"1.5Story\", \"1.5Unf\":\"1.5Story\", \n                                                     \"SFoyer\":\"SFoyer\", \"SLvl\":\"SLvl\", \"2.5Unf\":\"2.5Story\", \"2.5Fin\":\"2.5Story\"})\n\ncombined = pd.get_dummies(combined, columns = [\"HouseStyle\"], prefix=\"HouseStyle\")\ncombined.head()","4be46a98":"generatePlots('OverallQual')","aa45d125":"generatePlots('OverallCond')","7b8e16b1":"generatePlots('YearRemodAdd')","f94e426c":"train['Remod_Diff'] = train['YearRemodAdd'] - train['YearBuilt']","af0372a0":"combined['Remod_Diff'] = combined['YearRemodAdd'] - combined['YearBuilt']\ncombined.drop('YearRemodAdd', axis=1, inplace=True)","ab58d7d5":"plt.subplots(figsize=(50,20))\nsns.barplot(x='YearBuilt',y='SalePrice',data=train, palette=colors)\nplt.show()","d4356495":"binStep1('YearBuilt', 7)","a1dc1bb6":"binStep2('YearBuilt',1,maxVal=1892)","5e148f55":"binStep2('YearBuilt',2,minVal=1892, maxVal=1911)","078b8a19":"binStep2('YearBuilt',3,minVal=1911, maxVal=1931)","8bad0453":"binStep2('YearBuilt',4,minVal=1931, maxVal=1951)","7598fb23":"binStep2('YearBuilt',5,minVal=1951, maxVal=1971)","c32dceaa":"binStep2('YearBuilt',6,minVal=1971, maxVal=1990)","3823c8d9":"binStep2('YearBuilt',7,minVal=1990)","3041e5d9":"combined['YearBuilt'] = combined['YearBuilt'].astype(int)\n\ncombined.drop('YearBuilt_Band', axis=1, inplace=True)\n\ncombined = pd.get_dummies(combined, columns = [\"YearBuilt\"], prefix=\"YearBuilt\")\ncombined.head(3)","42cc9bb1":"generatePlots('Foundation')","a34350fe":"combined = pd.get_dummies(combined,columns=['Foundation'], prefix='Foundation')\ncombined.head()","c0f709b4":"generatePlots('Functional')","abd6cbce":"combined['Functional'] = combined['Functional'].map({'Sev':1, 'Maj2':2, 'Maj1': 3, 'Mod':4, 'Min2':5,'Min1':6,'Typ':7})","4a433213":"combined['Functional'].unique()","ae6c34e7":"generatePlots('RoofStyle')","73bd29f5":"combined = pd.get_dummies(combined, columns = [\"RoofStyle\"], prefix=\"RoofStyle\")\ncombined.head(3)","fd171b23":"generatePlots('RoofMatl')","222408a3":"combined = pd.get_dummies(combined, columns = [\"RoofMatl\"], prefix=\"RoofMatl\")\ncombined.head(3)","45a0834d":"generatePlots('Exterior1st')","391dd91e":"generatePlots('Exterior2nd')","03bbfbd6":"def Exter2(col):\n    if col['Exterior2nd'] == col['Exterior1st']:\n        return 1\n    else:\n        return 0","81ae4221":"combined['ExteriorMatch_Flag'] = combined.apply(Exter2, axis=1)\ncombined.drop('Exterior2nd', axis=1, inplace=True)\n\ncombined = pd.get_dummies(combined, columns = [\"Exterior1st\"], prefix=\"Exterior1st\")\ncombined.head(3)","540ed6fa":"generatePlots('MasVnrType')","9c91fa3f":"combined = pd.get_dummies(combined, columns=['MasVnrType'], prefix='MasVnrType')\ncombined.head()","1bd1e38f":"#Since it's correlated highly with MasVnrType and doesn't vary much against SalesPrice, drop this\ncombined.drop('MasVnrArea', axis=1, inplace=True)","52dda00a":"generatePlots('ExterQual')","30f3d50e":"combined['ExterQual'] = combined['ExterQual'].map({\"Fa\":1,\"TA\":2,\"Gd\":3,\"Ex\":4})","1ad086a3":"combined['ExterQual'].unique()","b0edbf2e":"generatePlots('ExterCond')","217393ad":"#We observe an obvious order here but this order has no correlation with SalePrice we don't have to map\ncombined = pd.get_dummies(combined, columns = [\"ExterCond\"], prefix=\"ExterCond\")\ncombined.head(3)","9890c722":"generatePlots('GarageType')","299e2a1a":"combined = pd.get_dummies(combined, columns = [\"GarageType\"], prefix=\"GarageType\")\ncombined.head(3)","f429d6fc":"plt.subplots(figsize=(50,10))\nsns.boxplot(x='GarageYrBlt',y='SalePrice',data=train,palette=colors)\nplt.show()","ee8d2c1d":"binStep1('GarageYrBlt', 3)","30347261":"binStep2('GarageYrBlt',1,maxVal=1964)","61db2027":"binStep2('GarageYrBlt',2,minVal=1964, maxVal=1996)","7b85e106":"binStep2('GarageYrBlt',3,minVal=1996)","74ec5142":"combined['GarageYrBlt'] = combined['GarageYrBlt'].astype(int)\n\ncombined.drop('GarageYrBlt_Band', axis=1, inplace=True)\n\ncombined = pd.get_dummies(combined, columns = [\"GarageYrBlt\"], prefix=\"GarageYrBlt\")\ncombined.head(3)","16084176":"generatePlots('GarageFinish')","8ba66cba":"combined = pd.get_dummies(combined, columns=['GarageFinish'], prefix='GarageFinish')\ncombined.head()","ef961846":"generatePlots('GarageCars')","9c269130":"binStep1('GarageArea', 3)","fb6a7a66":"binStep2('GarageArea',1, maxVal=496)","31299b9e":"binStep2('GarageArea',2, minVal=496, maxVal=992)","91198905":"binStep2('GarageArea',3, minVal=992)","ad1c1bdb":"combined['GarageArea'] = combined['GarageArea'].astype(int)\n\ncombined.drop('GarageArea_Band', axis=1, inplace=True)\n\ncombined = pd.get_dummies(combined, columns = [\"GarageArea\"], prefix=\"GarageArea\")\ncombined.head(3)","c83ba0ee":"generatePlots('GarageQual',['Po','Fa','TA','Gd','Ex'])","b7069930":"#Cluster is performed here\ncombined['GarageQual'] = combined['GarageQual'].map({'None':'None', 'Po':'Low','Fa':'Low','TA':'TA','Gd':'High','Ex':'High'})\ncombined['GarageQual'].unique()","0cddacad":"combined = pd.get_dummies(combined, columns=['GarageQual'], prefix='GarageQual')\ncombined.head()","8c5a184a":"generatePlots('GarageCond',['Po','Fa','TA','Gd','Ex'])","0225dfdb":"#Similar distribution with GarageQual\ncombined['GarageCond'] = combined['GarageCond'].map({'None':'None', 'Po':'Low','Fa':'Low','TA':'TA','Gd':'High','Ex':'High'})\ncombined['GarageCond'].unique()","4ebd548a":"combined = pd.get_dummies(combined, columns=['GarageCond'], prefix='GarageCond')\ncombined.head()","09acc3fb":"def WoodDeckFlag(col):\n    if col['WoodDeckSF'] == 0:\n        return 1\n    else:\n        return 0\n\ncombined['NoWoodDeck_Flag'] = combined.apply(WoodDeckFlag, axis=1)","12c1677e":"binStep1('WoodDeckSF', 4)","e3d082d4":"binStep2('WoodDeckSF',1,maxVal=356)","71983222":"binStep2('WoodDeckSF',2,minVal=356,maxVal=712)","b745a9ee":"binStep2('WoodDeckSF',3, minVal=712, maxVal=1068)","5d04e43b":"binStep2('WoodDeckSF',4,maxVal=1068)","da783b25":"combined['WoodDeckSF'] = combined['WoodDeckSF'].astype(int)\n\ncombined.drop('WoodDeckSF_Band', axis=1, inplace=True)\ncombined = pd.get_dummies(combined, columns = [\"WoodDeckSF\"], prefix=\"WoodDeckSF\")\ncombined.head(3)","b49e0193":"combined['TotalPorchSF'] = combined['OpenPorchSF'] + combined['OpenPorchSF'] + combined['EnclosedPorch'] + combined['3SsnPorch'] + combined['ScreenPorch'] \ntrain['TotalPorchSF'] = train['OpenPorchSF'] + train['OpenPorchSF'] + train['EnclosedPorch'] + train['3SsnPorch'] + train['ScreenPorch']","10a9866c":"def porchFlag(col):\n    if col['TotalPorchSF'] == 0:\n        return 1\n    else:\n        return 0\n","3f632d13":"combined['NoPorch_Flag']= combined.apply(porchFlag, axis=1)\nbinStep1('TotalPorchSF', 4)","2fed9a01":"binStep2('TotalPorchSF', 1, maxVal=431)","8fe76c2d":"binStep2('TotalPorchSF', 2, minVal=431, maxVal=862)","0bd6f088":"binStep2('TotalPorchSF', 3, minVal=862, maxVal=1293)","8b953540":"binStep2('TotalPorchSF', 4, minVal=1293)","1d3b4541":"combined['TotalPorchSF'] = combined['TotalPorchSF'].astype(int)\n\ncombined.drop('TotalPorchSF_Band', axis=1, inplace=True)\n\ncombined = pd.get_dummies(combined, columns = [\"TotalPorchSF\"], prefix=\"TotalPorchSF\")\ncombined.head()","81dcc223":"def PoolFlag(col):\n    if col['PoolArea'] == 0:\n        return 0\n    else:\n        return 1\n    \ncombined['HasPool_Flag'] = combined.apply(PoolFlag, axis=1)\ncombined.drop('PoolArea', axis=1, inplace=True)","8a32735f":"combined.drop('PoolQC',axis=1, inplace=True)","8f4904ed":"generatePlots('Fence',['MnWw','GdWo','MnPrv','GdPrv'])","49e8dd8f":"combined = pd.get_dummies(combined, columns=['Fence'],prefix='Fence')\ncombined.head()","2898c9eb":"generatePlots('MSZoning')","9a589a2b":"combined = pd.get_dummies(combined, columns=['MSZoning'],prefix='MSZoning')\ncombined.head()","4b898c5c":"generatePlots('Neighborhood')","16a19ad3":"#For categorical feature without order, create dummy feature\ncombined = pd.get_dummies(combined, columns=['Neighborhood'],prefix='Neighborhood')\ncombined.head()","bb7874a4":"generatePlots('Condition1')","467c357f":"generatePlots('Condition2')","e109e34b":"combined['Condition1'] = combined['Condition1'].map({\"Norm\":\"Norm\", \"Feedr\":\"Street\", \"PosN\":\"Pos\", \"Artery\":\"Street\", \"RRAe\":\"Train\",\n                                                    \"RRNn\":\"Train\", \"RRAn\":\"Train\", \"PosA\":\"Pos\", \"RRNe\":\"Train\"})\ncombined['Condition2'] = combined['Condition2'].map({\"Norm\":\"Norm\", \"Feedr\":\"Street\", \"PosN\":\"Pos\", \"Artery\":\"Street\", \"RRAe\":\"Train\",\n                                                    \"RRNn\":\"Train\", \"RRAn\":\"Train\", \"PosA\":\"Pos\", \"RRNe\":\"Train\"})","1b6f52e3":"def ConditionMatch(col):\n    if col['Condition1'] == col['Condition2']:\n        return 0\n    else:\n        return 1\n    \ncombined['Diff2ndCondition_Flag'] = combined.apply(ConditionMatch, axis=1)\ncombined.drop('Condition2', axis=1, inplace=True)\n\ncombined = pd.get_dummies(combined, columns = [\"Condition1\"], prefix=\"Condition1\")\ncombined.head(3)","7a1cf92f":"binStep1('LotArea', 8)","94bb4edd":"nums = [5684.75, 7474, 8520, 9450, 10355.25, 11554.25, 13613]\nbinStep2('LotArea',1,maxVal=nums[0])\nbinStep2('LotArea',2,minVal=nums[0], maxVal=nums[1])\nbinStep2('LotArea',3,minVal=nums[1], maxVal=nums[2])\nbinStep2('LotArea',4,minVal=nums[2], maxVal=nums[3])\nbinStep2('LotArea',5,minVal=nums[3], maxVal=nums[4])\nbinStep2('LotArea',6,minVal=nums[4], maxVal=nums[5])\nbinStep2('LotArea',7,minVal=nums[5], maxVal=nums[6])\nbinStep2('LotArea',8,minVal=nums[6])","3e92aefb":"combined['LotArea'] = combined['LotArea'].astype(int)\n\ncombined.drop('LotArea_Band', axis=1, inplace=True)\n\ncombined = pd.get_dummies(combined, columns = [\"LotArea\"], prefix=\"LotArea\")\ncombined.head(3)","a6b2c9ca":"generatePlots('LotShape')","3377c6fd":"combined = pd.get_dummies(combined, columns = [\"LotShape\"], prefix=\"LotShape\")\ncombined.head(3)","63758155":"generatePlots('LandContour')","0020d696":"combined = pd.get_dummies(combined, columns = [\"LandContour\"], prefix=\"LandContour\")\ncombined.head(3)","2822bd48":"generatePlots('LotConfig')","04109e3d":"combined['LotConfig'] = combined['LotConfig'].map({\"Inside\":\"Inside\", \"FR2\":\"FR\", \"Corner\":\"Corner\", \"CulDSac\":\"CulDSac\", \"FR3\":\"FR\"})\n\ncombined = pd.get_dummies(combined, columns = [\"LotConfig\"], prefix=\"LotConfig\")\ncombined.head(3)","b112a70c":"generatePlots('LandSlope')","6e65a21f":"combined['LandSlope'] = combined['LandSlope'].map({\"Gtl\":1, \"Mod\":2, \"Sev\":2})","89f34605":"def Slope(col):\n    if col['LandSlope'] == 1:\n        return 1\n    else:\n        return 0\n    \ncombined['GentleSlope_Flag'] = combined.apply(Slope, axis=1)\ncombined.drop('LandSlope', axis=1, inplace=True)","d38acfe7":"generatePlots('Street')","5deab3a8":"combined.drop('Street',axis=1, inplace=True)","3d988744":"generatePlots('Alley')","c4a82ebe":"combined = pd.get_dummies(combined, columns = [\"Alley\"], prefix=\"Alley\")\ncombined.head(3)","aefd58b8":"generatePlots('PavedDrive')","023fe0d8":"combined = pd.get_dummies(combined, columns = [\"PavedDrive\"], prefix=\"PavedDrive\")\ncombined.head(3)","5072edd6":"generatePlots('Heating')","87b07ec9":"combined['GasA_Flag'] = combined['Heating'].map({\"GasA\":1, \"GasW\":0, \"Grav\":0, \"Wall\":0, \"OthW\":0, \"Floor\":0})\ncombined.drop('Heating', axis=1, inplace=True)\ncombined.head(3)","e00cb2cc":"generatePlots('HeatingQC')","da8f9962":"combined['HeatingQC'] = combined['HeatingQC'].map({\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5})\ncombined['HeatingQC'].unique()","2375c1e3":"generatePlots('CentralAir')","f3f5ef22":"combined['CentralAir'] = combined['CentralAir'].map({\"Y\":1, \"N\":0})\ncombined['CentralAir'].unique()","7404f9b7":"generatePlots('Electrical')","005a4dff":"combined['Electrical'] = combined['Electrical'].map({\"SBrkr\":\"SBrkr\", \"FuseF\":\"Fuse\", \"FuseA\":\"Fuse\", \"FuseP\":\"Fuse\", \"Mix\":\"Mix\"})\n\ncombined = pd.get_dummies(combined, columns = [\"Electrical\"], prefix=\"Electrical\")\ncombined.head(3)","0ff68ca1":"generatePlots('MiscFeature')","c56c907d":"columns=['MiscFeature', 'MiscVal']\ncombined.drop(columns, axis=1, inplace=True)","22a0ac8d":"generatePlots('MoSold')","f1f111d1":"combined = pd.get_dummies(combined, columns = [\"MoSold\"], prefix=\"MoSold\")\ncombined.head(3)","f33facb2":"generatePlots('YrSold')","75268a70":"combined = pd.get_dummies(combined, columns = [\"YrSold\"], prefix=\"YrSold\")\ncombined.head(3)","26551600":"generatePlots('SaleType')","963d9b19":"combined['SaleType'] = combined['SaleType'].map({\"WD\":\"WD\", \"New\":\"New\", \"COD\":\"COD\", \"CWD\":\"CWD\", \"ConLD\":\"Oth\", \"ConLI\":\"Oth\", \n                                                 \"ConLw\":\"Oth\", \"Con\":\"Oth\", \"Oth\":\"Oth\"})\n\ncombined = pd.get_dummies(combined, columns = [\"SaleType\"], prefix=\"SaleType\")\ncombined.head(3)","92147a63":"generatePlots('SaleCondition')","5d023006":"combined = pd.get_dummies(combined, columns = [\"SaleCondition\"], prefix=\"SaleCondition\")","4dadd468":"combined.head()","c8a5aaa5":"plt.subplots(figsize=(15,10))\ng = sns.distplot(train['SalePrice'], fit=norm, label='Skewness : %.2f'%train['SalePrice'].skew())\ng = g.legend(loc='best')","18b45f37":"train['SalePrice'] = np.log1p(train['SalePrice'])\ny_train = train['SalePrice']","101e8cde":"plt.subplots(figsize=(15,10))\ng = sns.distplot(train['SalePrice'], fit=norm, label='Skewness : %.2f'%train['SalePrice'].skew())\ng = g.legend(loc='best')","62c74153":"#Treating skewed features in numeric\nnumeric_feats = combined.dtypes[combined.dtypes != 'object'].index\nskewed_feats = combined[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\n\nplt.subplots(figsize=(65,30))\nskewed_feats.plot(kind='bar')","dcb4c18c":"#Apply Box-Cox\nskewness = skewed_feats[abs(skewed_feats) > 0.5]\nskewed_features = skewness.index\nlam=0.15\nfor feat in skewed_features:\n    combined[feat] = boxcox1p(combined[feat], lam)\nprint(skewness.shape[0])","8c551fd4":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2","7faf2380":"from sklearn import model_selection\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import ShuffleSplit","a314d228":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor, ExtraTreesRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nimport xgboost as xgb","84c1cad7":"train = combined[:rtrain]\ntest = combined[rtrain:]","7460f220":"print(train.shape)\nprint(test.shape)","5ec03576":"import xgboost as xgb\nxbgr = xgb.XGBRegressor()\nxbgr.fit(train, y_train)","a5201e39":"indices = np.argsort(xbgr.feature_importances_)[::-1]\nindices = indices[:75]","c93cfb58":"plt.subplots(figsize=(20,15))\ng = sns.barplot(y=train.columns[indices], x = xbgr.feature_importances_[indices], orient='h', palette = colors)\ng.set_xlabel(\"Importance\", fontsize=12)\ng.set_ylabel(\"Features\", fontsize=12)\ng.tick_params(labelsize=9)\ng.set_title('XGB feature importance')","5a4fbbf4":"xgb_train = train.copy()\nxgb_test = test.copy()","54e2634e":"xgbr = xgb.XGBRegressor()\nxgbr.fit(xgb_train, y_train)","da2a41c0":"xgb_feat_red = SelectFromModel(xgbr, prefit=True)","0561a4de":"xgb_train = xgb_feat_red.transform(xgb_train)\nxgb_test = xgb_feat_red.transform(xgb_test)","f670c33c":"print('Feature reduction:')\nprint('X_train: ', xgb_train.shape, 'X_test', xgb_test.shape)","9584d6c1":"X_train, X_test, y_train, y_test = train_test_split(xgb_train, y_train, test_size=0.3, random_state=42)","92ad7274":"print('X_train: ', X_train.shape, 'X_test: ', X_test.shape, 'y_train: ', y_train.shape, 'y_test: ', y_test.shape)","e3a65493":"models = [KernelRidge(),ElasticNet(), Lasso(),GradientBoostingRegressor(),BayesianRidge(),LassoLarsIC(), RandomForestRegressor(), xgb.XGBRegressor()]","4a3ae6c5":"shuff = ShuffleSplit(n_splits=5, test_size=0.2, random_state=42)","f5a3d369":"columns =  ['Name','Parameters','Train Accuracy Mean','Test Accuracy']\nbefore_model_compare = pd.DataFrame(columns=columns)","1bf58d85":"row_index = 0\nfor alg in models:\n    model_name = alg.__class__.__name__\n    before_model_compare.loc[row_index, 'Name'] = model_name\n    before_model_compare.loc[row_index, 'Parameters'] = str(alg.get_params())\n    \n    alg.fit(X_train, y_train)\n    \n    training_re = np.sqrt((-cross_val_score(alg, X_train, y_train, cv=shuff, scoring='neg_mean_squared_error')).mean())\n    test_re = np.sqrt(((y_test-alg.predict(X_test)) ** 2).mean())\n    \n    before_model_compare.loc[row_index, 'Train Accuracy Mean'] = (training_re) * 100\n    before_model_compare.loc[row_index,'Test Accuracy Mean'] = (test_re) * 100\n    \n    row_index += 1\n    print(row_index, alg.__class__.__name__, 'trained.')\n\ndecimals = 3\nbefore_model_compare['Train Accuracy Mean'] = before_model_compare['Train Accuracy Mean'].apply(lambda x: round(x, decimals))\nbefore_model_compare['Test Accuracy'] = before_model_compare['Test Accuracy Mean'].apply(lambda x: round(x, decimals))\nbefore_model_compare","1a49fb31":"models = [KernelRidge(), ElasticNet(), Lasso(), GradientBoostingRegressor(), BayesianRidge(), LassoLarsIC(), RandomForestRegressor(), xgb.XGBRegressor()]\n\nKR_param_grid = {'alpha': [0.1], 'coef0': [100], 'degree': [1], 'gamma': [None], 'kernel': ['polynomial']}\nEN_param_grid = {'alpha': [0.001], 'copy_X': [True], 'l1_ratio': [0.6], 'fit_intercept': [True], 'normalize': [False], \n                         'precompute': [False], 'max_iter': [300], 'tol': [0.001], 'selection': ['random'], 'random_state': [None]}\nLASS_param_grid = {'alpha': [0.0005], 'copy_X': [True], 'fit_intercept': [True], 'normalize': [False], 'precompute': [False], \n                    'max_iter': [300], 'tol': [0.01], 'selection': ['random'], 'random_state': [None]}\nGB_param_grid = {'loss': ['huber'], 'learning_rate': [0.1], 'n_estimators': [300], 'max_depth': [3], \n                                        'min_samples_split': [0.0025], 'min_samples_leaf': [5]}\nBR_param_grid = {'n_iter': [200], 'tol': [0.00001], 'alpha_1': [0.00000001], 'alpha_2': [0.000005], 'lambda_1': [0.000005], \n                 'lambda_2': [0.00000001], 'copy_X': [True]}\nLL_param_grid = {'criterion': ['aic'], 'normalize': [True], 'max_iter': [100], 'copy_X': [True], 'precompute': ['auto'], 'eps': [0.000001]}\nRFR_param_grid = {'n_estimators': [50], 'max_features': ['auto'], 'max_depth': [None], 'min_samples_split': [5], 'min_samples_leaf': [2]}\nXGB_param_grid = {'max_depth': [3], 'learning_rate': [0.1], 'n_estimators': [300], 'booster': ['gbtree'], 'gamma': [0], 'reg_alpha': [0.1],\n                  'reg_lambda': [0.7], 'max_delta_step': [0], 'min_child_weight': [1], 'colsample_bytree': [0.5], 'colsample_bylevel': [0.2],\n                  'scale_pos_weight': [1]}\nparams_grid = [KR_param_grid, EN_param_grid, LASS_param_grid, GB_param_grid, BR_param_grid, LL_param_grid, RFR_param_grid, XGB_param_grid]\n\nafter_model_compare = pd.DataFrame(columns = columns)\n\nrow_index = 0\nfor alg in models:\n    \n    gs_alg = GridSearchCV(alg, param_grid = params_grid[0], cv = shuff, scoring = 'neg_mean_squared_error', n_jobs=-1)\n    params_grid.pop(0)\n\n    #set name and parameters\n    model_name = alg.__class__.__name__\n    after_model_compare.loc[row_index, 'Name'] = model_name\n    \n    gs_alg.fit(X_train, y_train)\n    gs_best = gs_alg.best_estimator_\n    after_model_compare.loc[row_index, 'Parameters'] = str(gs_alg.best_params_)\n    \n    #score model with cross validation: http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.cross_validate.html#sklearn.model_selection.cross_validate\n    after_training_results = np.sqrt(-gs_alg.best_score_)\n    after_test_results = np.sqrt(((y_test-gs_alg.predict(X_test))**2).mean())\n    \n    after_model_compare.loc[row_index, 'Train Accuracy Mean'] = (after_training_results)*100\n    after_model_compare.loc[row_index, 'Test Accuracy'] = (after_test_results)*100\n    \n    row_index+=1\n    print(row_index, alg.__class__.__name__, 'trained...')\n\ndecimals = 3\nafter_model_compare['Train Accuracy Mean'] = after_model_compare['Train Accuracy Mean'].apply(lambda x: round(x, decimals))\nafter_model_compare['Test Accuracy'] = after_model_compare['Test Accuracy'].apply(lambda x: round(x, decimals))\nafter_model_compare","89fdbaa0":"models = [KernelRidge(), ElasticNet(), Lasso(), GradientBoostingRegressor(), BayesianRidge(), LassoLarsIC(), RandomForestRegressor(), xgb.XGBRegressor()]\nnames = ['KernelRidge', 'ElasticNet', 'Lasso', 'Gradient Boosting', 'Bayesian Ridge', 'Lasso Lars IC', 'Random Forest', 'XGBoost']\nparams_grid = [KR_param_grid, EN_param_grid, LASS_param_grid, GB_param_grid, BR_param_grid, LL_param_grid, RFR_param_grid, XGB_param_grid]\nstacked_validation_train = pd.DataFrame()\nstacked_test_train = pd.DataFrame()\n\nrow_index=0\n\nfor alg in models:\n    \n    gs_alg = GridSearchCV(alg, param_grid = params_grid[0], cv = shuff, scoring = 'neg_mean_squared_error', n_jobs=-1)\n    params_grid.pop(0)\n    \n    gs_alg.fit(X_train, y_train)\n    gs_best = gs_alg.best_estimator_\n    stacked_validation_train.insert(loc = row_index, column = names[0], value = gs_best.predict(X_test))\n    print(row_index+1, alg.__class__.__name__, 'predictions added to stacking validation dataset...')\n    \n    stacked_test_train.insert(loc = row_index, column = names[0], value = gs_best.predict(xgb_test))\n    print(row_index+1, alg.__class__.__name__, 'predictions added to stacking test dataset...')\n    print(\"-\"*50)\n    names.pop(0)\n    \n    row_index+=1\n    \nprint('Done')","84932128":"stacked_validation_train.head()","f93f26c3":"drop = ['Bayesian Ridge']\nstacked_validation_train.drop(drop, axis=1, inplace=True)\nstacked_test_train.drop(drop, axis=1, inplace=True)\n\n# Now fit the meta model and generate predictions\nmeta_model = make_pipeline(RobustScaler(), BayesianRidge(n_iter=200,alpha_1=0.00000001, alpha_2 = 0.000005, copy_X = True,tol = 0.00001,lambda_1=0.000005, lambda_2=0.00000001))\nmeta_model.fit(stacked_validation_train, y_test)\n\nmeta_model_pred = np.expm1(meta_model.predict(stacked_test_train))\nprint(\"Meta-model trained and applied!...\")","09b256fd":"models = [KernelRidge(), ElasticNet(), Lasso(), GradientBoostingRegressor(), BayesianRidge(), LassoLarsIC(), RandomForestRegressor(), xgb.XGBRegressor()]\nnames = ['KernelRidge', 'ElasticNet', 'Lasso', 'Gradient Boosting', 'Bayesian Ridge', 'Lasso Lars IC', 'Random Forest', 'XGBoost']\nparams_grid = [KR_param_grid, EN_param_grid, LASS_param_grid, GB_param_grid, BR_param_grid, LL_param_grid, RFR_param_grid, XGB_param_grid]\nfinal_predictions = pd.DataFrame()\n\nrow_index=0\n\nfor alg in models:\n    \n    gs_alg = GridSearchCV(alg, param_grid = params_grid[0], cv = shuff, scoring = 'neg_mean_squared_error', n_jobs=-1)\n    params_grid.pop(0)\n    \n    gs_alg.fit(stacked_validation_train, y_test)\n    gs_best = gs_alg.best_estimator_\n    final_predictions.insert(loc = row_index, column = names[0], value = np.expm1(gs_best.predict(stacked_test_train)))\n    print(row_index+1, alg.__class__.__name__, 'final results predicted added to table...')\n    names.pop(0)\n    \n    row_index+=1\n\nprint(\"-\"*50)\nprint(\"Done\")\n    \nfinal_predictions.head()","30c60094":"ensemble = meta_model_pred*(1\/10) + final_predictions['XGBoost']*(1.5\/10) + final_predictions['Gradient Boosting']*(2\/10) + final_predictions['Bayesian Ridge']*(1\/10) + final_predictions['Lasso']*(1\/10) + final_predictions['KernelRidge']*(1\/10) + final_predictions['Lasso Lars IC']*(1\/10) + final_predictions['Random Forest']*(1.5\/10)\n\nsubmission = pd.DataFrame()\nsubmission['Id'] = test_ID\nsubmission['SalePrice'] = ensemble\nsubmission.to_csv('final_submission.csv',index=False)\nprint(\"Submission file, created!\")","4adee1c2":"*OverallQual*","f97b8aaf":"*Street*","5680dfb3":"*Fence*","fcb2001c":"*BlogType*","859a151e":"**Dealing with missing value**","4a770ca0":"*MasVnrType*","72bba6e3":"*FireplaceQu*","9454af48":"*1stFlrSF*","492c5085":"*GarageArea*","0d9593bc":"*BsmtFinSF2*","5702ee74":"*Since we'll potentially have to perform the binning on many features, encapsulate the process in methods would be better*","95450512":"*MasVnrType*","43f13a0c":"*MiscFeature*","bdd5af5d":"*GrLivArea*","fd2f3e30":"*RoofMatl*","411d56d3":"*LandContour*","f729b45c":"*Alley*","77ab10a5":"*OverallCond*","8cb2fc7c":"*LowQualFinSF*","3b8b4d61":"*Electrical*","668baac6":"*LotArea*","ac7c3d26":"*BsmtExposure*\n","a56efbad":"*Functional*","48b7afe9":"*MSZoning*","f1e34252":"*BsmtQual*","8b955108":"***Stacking procedure***","688e5c92":"*Neighborhood*","89d29757":"*Exterior1st & Exterior2nd*","f7431027":"*BsmtFinSF1*","47f0780c":"*TotalBsmtSF*","0830cec6":"*BsmtUnfSF*","988ca0b0":"*CentralAir*","e99ddb4c":"*MSSubClass*","142ca44f":"### Feature Engineering\n1. **Polynomials**\n    * Top influencing features would get polynomials of 2, 3 and 4\n2. **One-hot encoding**\n    * This will convert categorical variables into numerical.\n3. **Binning**\n    * Binning technique will cut continous variables into several bins and therefore a categorical variable with numerical value.","372f73ba":"#### EDA","b42594ad":"*YearBuilt*","39a5a66e":"*Kitchen*","e742d315":"*YrSold*","258fe96a":"*ExterCond*","c00ca1d2":"### Modeling","9cbfb3bd":"*PoolQC*","edfd7261":"*RoofStyle*","b2885535":"*GarageQual*","18987ba7":"*BsmtFinType2*","96b7b137":"From the heat map above, we can see that as the color gets lighter, the correlation becomes stronger between two variables.","a2c0fc11":"*PoolArea*","61b8a8fe":"*LotFrontage*","1be0c1b5":"*GarageFinish*","f96bf55e":"*GarageCars*","48d93825":"*PavedDrive*","3608e4e4":"*KitchenQual*","f761799c":"*Foundation*","917dcaf4":"*OpenPorchSF, EnclosedPorch, 3SsnPorch, ScreenPorch*","7ce2c7be":"*SaleCondition*","82cd3198":"*2ndFlrSF*","91edbeab":"*ExterQual*","4dcde81e":"*HouseStyle*","f8fa6091":"***In order to apply stacking technique, multiple models are trained to compare their performance on the dataset. The output dataframe contains name, hyper-parameters used and both train and test accuracy of each model.***","748c246c":"*BsmtCond*","0e5ccc35":"*SaleType*","97525d6c":"![alt-text](stacking.png)\n*A bried explanation of stacking:*\n*Based on our evaluation on our models in the previous step, we're able to tell which one performs the best on the dataset and therefore to be the meta-model. Meta-model uses the prediction of other models as training data and makes the final prediction.*","edf9927f":"*GarageType*","9192060d":"*Heating*","b74ddfd8":"*LotConfig***","84e3bff7":"*GarageCond*","657f0689":"*GarageYrBlt*","7c288cf0":"*LandSlope*","6e3e4223":"*LotShape*","6e8d57ed":"*MoSold*","838b3fc4":"*YearRemodAdd*","e0f7aaab":"*HeatingQC*","b313d752":"*WoodDeckSF*","fff5ff88":"*Condition1&Condition2*","1906dcea":"*BsmtFinType1*","8770028f":"***Models are retrained with their optimized params.***","aa38e806":"*BedRoom*","560c9253":"*Sum of all bath rooms*","8986170f":"**Remove Outliers**"}}