{"cell_type":{"7c380331":"code","0fa8bba6":"code","a1855517":"code","414cea08":"code","ff75c581":"code","e5c66bdc":"code","e4945d1c":"code","498d89a0":"code","a3d67cc7":"code","1d4887c3":"code","501f8c6f":"code","8e9bd15a":"code","716179c2":"code","b961a8ec":"code","567db473":"code","49c66d40":"code","8c408be8":"code","41435e4f":"code","11a79a27":"code","e5718139":"code","248ed7b1":"code","3200b26c":"code","61fdd83c":"code","afca1591":"code","6ce1693b":"code","dc931e71":"code","4ddc1db1":"code","d2d7bc41":"code","80add6e0":"code","50e2d11c":"code","cc5aef34":"code","3e2ae58e":"code","86c5f6e9":"code","83a7c695":"code","b9ab4e99":"code","a488b6d1":"code","0471063e":"code","e6414db6":"code","988539da":"code","e3aaccff":"code","7871c156":"code","13f1abf5":"code","5e79863d":"code","e4104680":"code","d7fc26b1":"code","52bc2ea5":"code","a72bd48c":"code","09c63a3e":"code","cef93807":"code","2008f081":"code","3bfafe35":"code","bbb9eb73":"code","846eaad7":"code","de84dcc5":"code","6517f5ed":"code","3af90a61":"code","e1490452":"code","05f3716b":"code","29e4eb92":"code","d19c2aff":"code","3248f60c":"code","14338ab8":"code","d18871cc":"code","654720a2":"code","4d8aee30":"markdown","87fac71f":"markdown","aa2d988b":"markdown","78491a5d":"markdown","b3b150a8":"markdown","3643f22b":"markdown","3d8ee7c7":"markdown","b0903a3a":"markdown","f2e0e1e2":"markdown","e8574456":"markdown","76b50fc9":"markdown","5b3ce62d":"markdown","d0d671a1":"markdown","18165cfc":"markdown","d1c7a3de":"markdown","efe7ecec":"markdown","df29446d":"markdown","9c1d6c67":"markdown","751cb20c":"markdown","0213f477":"markdown","6495088e":"markdown","71ab95a8":"markdown","25de0924":"markdown","f934c436":"markdown","11bd0b8c":"markdown","d2afdf69":"markdown","82d1ed6a":"markdown","776abce6":"markdown","308a3b93":"markdown","c02f6473":"markdown","1696603f":"markdown","8146752c":"markdown","80e029d8":"markdown","1c3bd5b1":"markdown","1d22bac1":"markdown","2c1a3d72":"markdown","e5e1962f":"markdown","859e6a20":"markdown","21ad2572":"markdown","74636a86":"markdown","dc466c89":"markdown","bc29b421":"markdown","6db5299f":"markdown","d5c6b867":"markdown","a547ed89":"markdown","5c6b6d4a":"markdown","1db60733":"markdown","c5071161":"markdown","a2edddc9":"markdown","a87618cf":"markdown","5baf723f":"markdown"},"source":{"7c380331":"#libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport seaborn as sns\n%matplotlib inline\n\nfrom scipy.stats import boxcox\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import silhouette_score, silhouette_samples\nfrom sklearn.cluster import KMeans\nfrom sklearn.cluster import Birch\nfrom sklearn.mixture import GaussianMixture\nimport scipy.cluster.hierarchy as shc","0fa8bba6":"df = pd.read_csv('..\/input\/hotelcustomersdataset\/HotelCustomersDataset.tsv', sep='\\t')","a1855517":"pd.options.display.max_columns = None\ndf.head(5)","414cea08":"df.shape","ff75c581":"df.info()","e5c66bdc":"df.isna().sum()","e4945d1c":"df['TotalRevenue'] = df['LodgingRevenue'] + df['OtherRevenue']\n\ndf['PersonsRoomNight'] = df['PersonsNights'] \/ df['RoomNights']\ndf['PersonsRoomNight'].fillna(0, inplace=True)\n\ndf['AgeGroups'] = pd.cut(df['Age'], bins=[-1, 20, 40, 60, 125], labels=['0-20', '21-40', '41-60', '60+'])\ndf['AgeGroups'] = df['AgeGroups'].cat.add_categories('Unknown')\ndf['AgeGroups'].fillna('Unknown', inplace=True)\n\navg_by_age = df.groupby('AgeGroups').mean()\nsum_by_age = df.groupby('AgeGroups').sum()\navg_by_nat = df.groupby('Nationality').mean()","498d89a0":"fig, ax = plt.subplots(figsize=(9, 6))\nsns.kdeplot(df['Age'], shade=True, color='#AB49A2', alpha=0.8, linewidth=3, edgecolor='black')\nsns.despine()\nfig.set_facecolor('#F5F5F5')\nax.set_facecolor('#F5F5F5')\nax.set_ylabel('')\nax.set_xlabel('Age')\nax.grid(False)\n# ax.yaxis.set_ticklabels([])\nax.grid(which='both', axis='y', color='black', linestyle=':', dashes=(2,10))\nax.text(60, 0.025, 'Age Distribution.', fontsize=23, fontweight='bold', fontfamily='monospace')\nax.text(60, 0.0222, 'Most of the customers is \\nbetween 30 and 60 years old.', fontsize=13, fontfamily='monospace')\nplt.show()","a3d67cc7":"df['Age'].min(), df['Age'].max()","1d4887c3":"sum(df['Age'] < 1)","501f8c6f":"AB49A2fig, ax = plt.subplots(figsize=(12, 10))\nsns.countplot(data=df, y='Nationality', \n              order=df['Nationality'].value_counts(sort=True).index[:20], \n              color='#AB49A2', alpha=0.85, linewidth=2, edgecolor='black')\nsns.despine()\nfig.set_facecolor('#F5F5F5')\nax.set_facecolor('#F5F5F5')\nax.set_ylabel('')\nax.set_xlabel('')\nax.grid(False)\nax.grid(which='both', axis='y', zorder=0, color='black', linestyle=':', dashes=(2,7))\nax.text(8000, 7, 'Top 20 nationalities.', fontsize=20, fontweight='bold', fontfamily='monospace')\nax.text(8000, 9.4, 'France and Portugal are the most \\nfrequent nationalities in the \\ndataset. Surprisingly USA placed \\n6th in our top 20.', fontsize=13, fontfamily='monospace')\nplt.show()","8e9bd15a":"fig, ax = plt.subplots(figsize=(9, 6))\nsns.kdeplot(df['AverageLeadTime'], shade=True, color='#AB49A2', alpha=0.8, linewidth=2, edgecolor='black')\nsns.despine()\nfig.set_facecolor('#F5F5F5')\nax.set_facecolor('#F5F5F5')\nax.set_ylabel('')\nax.set_xlabel('Days')\nax.grid(False)\nax.grid(which='both', axis='y', color='black', linestyle=':', dashes=(2,10))\nax.text(250, 0.0150, 'Average lead time.', fontsize=23, fontweight='bold', fontfamily='monospace')\nax.text(250, 0.008, 'The average number of days elapsed \\nbetween the customer\\'s booking date \\nand arrival date (calculated by \\ndividing the sum of the number of \\ndays elapsed between the moment \\neach booking was made and its \\narrival date, by the total of \\nbookings made by the customer).', fontsize=13, fontfamily='monospace')\nplt.show()","716179c2":"fig, ax = plt.subplots(figsize=(9, 6))\nsns.barplot(data=avg_by_age, x=avg_by_age.index, y='AverageLeadTime', \n            color='#AB49A2', alpha=0.8, linewidth=3, edgecolor='k')\nsns.despine()\nfig.set_facecolor('#F5F5F5')\nax.set_facecolor('#F5F5F5')\nax.set_xlabel('Age group')\nax.set_ylabel('Days')\nax.grid(False)\nax.grid(which='both', axis='y', color='black', linestyle=':', dashes=(2,10))\nax.text(-0.4, 100, 'Averagre lead time by age group.', fontsize=15, fontweight='bold', fontfamily='monospace')\nax.text(-0.4, 90, 'On average older people from our dataset \\ntend to book they vacations earlier.', fontsize=12, fontfamily='monospace')\nplt.show()","b961a8ec":"fig, ax = plt.subplots(figsize=(12, 5))\nfig.set_facecolor('#F5F5F5')\n\nsns.scatterplot(x=df['Age'], y=df['TotalRevenue'], color='#AB49A2')\n# sns.kdeplot(x=df['Age'], y=df['TotalRevenue'], color='k')\nax.set_facecolor('#F5F5F5')\nax.set_xlabel('Age')\nax.set_ylabel('Total amount spent')\nax.text(75, 11500, 'Spendings by age.', fontsize=15, fontweight='bold', fontfamily='monospace')\nax.text(75, 10000, 'Spendings across our dataset are \\nfairly normally distributed.', fontsize=12, fontfamily='monospace')\nplt.show()","567db473":"fig = plt.figure(figsize=(15, 5))\nfig.set_facecolor('#F5F5F5')\n\nax = [None for _ in range(3)]\n\nax[0] = plt.subplot2grid((1,3), (0,0), colspan=1)\nax[1] = plt.subplot2grid((1,3), (0,1), colspan=1)\nax[2] = plt.subplot2grid((1,3), (0,2), colspan=1)\n\nsns.barplot(data=avg_by_age, x=avg_by_age.index, y='LodgingRevenue',\n            alpha=0.85, linewidth=2, edgecolor='black', ax=ax[0], palette=['#AB49A2', \n                                                                          '#AB49A2', \n                                                                          '#B1EDE8', \n                                                                          '#AB49A2'])\nax[0].set_title('Lodging')\nax[0].set_ylabel('Amount spent')\n\nsns.barplot(data=avg_by_age, x=avg_by_age.index, y='OtherRevenue', \n            alpha=0.85, linewidth=2, edgecolor='black', ax=ax[1], palette=['#AB49A2', \n                                                                          '#AB49A2', \n                                                                          '#AB49A2', \n                                                                          '#B1EDE8'])\nax[1].set_title('Other')\nax[1].set_ylabel('')\n\nsns.barplot(data=avg_by_age, x=avg_by_age.index, y='TotalRevenue', \n            alpha=0.8, linewidth=2, edgecolor='black', ax=ax[2], palette=['#AB49A2', \n                                                                          '#AB49A2', \n                                                                          '#B1EDE8', \n                                                                          '#AB49A2'])\nax[2].set_title('Total')\nax[2].set_ylabel('')\n\nfor i in range(3):\n    sns.despine()\n    ax[i].set_facecolor('#F5F5F5')\n    ax[i].set_xlabel('Age group')\n    ax[i].xaxis.grid(False, which='major')\n    ax[i].yaxis.grid(True, linestyle=':', color='black', dashes=(3, 8))\n\n    plt.suptitle('Average spendings in \u20ac by age group', fontsize=20, fontweight='bold', fontfamily='monospace')\nfig.tight_layout()\nplt.show()","49c66d40":"fig = plt.figure(figsize=(12, 10))\nfig.set_facecolor('#F5F5F5')\n\nax = [None for _ in range(6)] \n\nax[0] = plt.subplot2grid((3,4), (0,0), colspan=4)\nax[1] = plt.subplot2grid((3,4), (1,0), colspan=2)\nax[2] = plt.subplot2grid((3,4), (1,2), colspan=2)\n\ng1 = sns.countplot(data=df, x='BookingsCanceled',\n            color='#AB49A2', alpha=0.85, linewidth=2, edgecolor='black', ax=ax[1])\n\nfor p in g1.patches:\n    g1.annotate(format(p.get_height()), (p.get_x() + p.get_width() \/ 2., \\\n                                               p.get_height()), ha = 'center', va = 'center', \\\n                                               xytext = (0, 10), textcoords = 'offset points')\nax[1].set_title('Canceled bookings')\nax[1].set_ylabel('Count')\nax[1].set_xlabel('No. of cancelations')\n\ng2 = sns.countplot(data=df, x='BookingsNoShowed',\n            color='#AB49A2', alpha=0.85, linewidth=2, edgecolor='black', ax=ax[2])\n\nfor p in g2.patches:\n    g2.annotate(format(p.get_height()), (p.get_x() + p.get_width() \/ 2., \\\n                                               p.get_height()), ha = 'center', va = 'center', \\\n                                               xytext = (0, 10), textcoords = 'offset points')\nax[2].set_title('\"No shows\"')\nax[2].set_ylabel('')\nax[2].set_xlabel('Times customer didn\\'t show')\nax[2].text(1.5, 70000, 'No-show.', fontsize=15, fontweight='bold', fontfamily='monospace')\nax[2].text(1.5, 50000, 'is when the customer did not \\ncancel, but did not checked-in \\nto stay at the hotel neither.', \n           fontsize=10, fontfamily='monospace')\n\ng3 = sns.countplot(data=df, x='BookingsCheckedIn',\n            color='#AB49A2', alpha=0.85, linewidth=2, edgecolor='black', ax=ax[0])\n\nfor p in g3.patches:\n    g3.annotate(format(p.get_height()), (p.get_x() + p.get_width() \/ 2., \\\n                                               p.get_height()), ha = 'center', va = 'center', \\\n                                               xytext = (0, 10), textcoords = 'offset points')\nax[0].set_title('Booking checked-in')\nax[0].set_ylabel('Count')\nax[0].set_xlabel('No. of check-ins per customer')\nax[0].text(18, 40000, 'Until next time!', fontsize=15, fontweight='bold', fontfamily='monospace')\nax[0].text(18, 20450, 'Vast majority of customers stayed \\nin hotel only once, \\nbut there are customers that came back \\nmore than 20 or even 50 times!', fontsize=11, fontfamily='monospace')\n\nfor i in range(3):\n    sns.despine()\n    ax[i].set_facecolor('#F5F5F5')\n    ax[i].xaxis.grid(False, which='major')\n    ax[i].yaxis.grid(True, linestyle=':', color='black', dashes=(3, 8))\n\nplt.suptitle('Does everybody check-in?', fontsize=20, fontweight='bold', fontfamily='monospace')\nplt.tight_layout()\nplt.show()","8c408be8":"fig = plt.figure(figsize=(14, 8))\nfig.set_facecolor('#F5F5F5')\n\nax = [None for _ in range(6)]\n\nax[0] = plt.subplot2grid((2,5), (1,0), colspan=3)\nax[1] = plt.subplot2grid((2,5), (0,0), colspan=2)\nax[2] = plt.subplot2grid((2,5), (0,2), colspan=2)\nax[3] = plt.subplot2grid((2,5), (0,4), colspan=1)\nax[4] = plt.subplot2grid((2,5), (1,3), colspan=2)\n\nsns.scatterplot(data=df, x='PersonsNights', y='RoomNights', color='#AB49A2', ax=ax[0])\nax[0].set_title('People \/ Rooms \/ Nights.*')\nax[0].set_ylabel('Sum of rooms * nights')\nax[0].set_xlabel('Sum of people * nights')\nax[0].text(0, 151, '*read the discription on the right for clarification.')\n\nsns.barplot(data=avg_by_age, x=avg_by_age.index, y='PersonsNights', \n            color='#AB49A2', alpha=0.85, linewidth=2, edgecolor='black', ax=ax[1])\nax[1].set_title('Average number of people per night by age groups.')\nax[1].set_ylabel('Number of people')\nax[1].set_xlabel('Age group')\n\nsns.barplot(data=avg_by_age, x=avg_by_age.index, y='RoomNights', \n            color='#AB49A2', alpha=0.85, linewidth=2, edgecolor='black', ax=ax[2])\nax[2].set_title('Average number of rooms per night by age groups.')\nax[2].set_ylabel('Number of rooms')\nax[2].set_xlabel('Age group')\n\nsns.histplot(df['PersonsRoomNight'], kde=True, bins=10,\n            color='#AB49A2', alpha=0.85, linewidth=2, edgecolor='black', ax=ax[4])\nax[4].set_title('People per room distribution.')\nax[4].set_ylabel('Count')\nax[4].set_xlabel('People per room')\n\nfor i in [0, 1, 2, 4]:\n    sns.despine()\n    ax[i].set_facecolor('#F5F5F5')\n    ax[i].xaxis.grid(False, which='major')\n    ax[i].yaxis.grid(True, linestyle=':', color='black', dashes=(3, 8))\n\nax[3].set_facecolor('#F5F5F5')\nax[3].yaxis.set_visible(False)\nax[3].xaxis.set_visible(False)\nax[3].spines['right'].set_visible(False)\nax[3].spines['top'].set_visible(False)\nax[3].spines['left'].set_visible(False)\nax[3].spines['bottom'].set_visible(False)\nax[3].text(-0.3, 0.9, 'Scatterplot explanation:', fontsize=14, fontweight='bold', fontfamily='monospace')\nax[3].text(-0.3, 0.35, 'From the dataset description: \\nPerson \/ nights ' \\\n           'of each booking \\nis the result of the \\nmultiplication ' \\\n           'of the number of \\nstaying nights by the sum \\nof adults and children ' \\\n           '\\nThis value is calculated by \\nsumming all customers checked-in \\nbookings\\' persons * nights.', \n           fontsize=11, fontfamily='monospace')\nax[3].text(-0.3, 0, 'Correspondingly room \/ nights \\nis the sum of multiplications ' \\\n           '\\nof the number of rooms of each \\nbooking by the number of nights \\nof the booking.', \n           fontsize=11, fontfamily='monospace')\n\nplt.suptitle('Guests and Rooms', fontsize=20, fontweight='bold', fontfamily='monospace')\nplt.tight_layout()\nplt.show()","41435e4f":"df[['PersonsNights', 'RoomNights']].loc[df['RoomNights'] > 75]","11a79a27":"dist_channels = df['DistributionChannel'].value_counts()\nmarket_segments = df['MarketSegment'].value_counts()\nms_labels = ['Other', 'Travel Agent \/ Operator', 'Direct', 'Groups', 'Corporate\\n', 'Complementary\\n', '\\nAviation']\nfig = plt.figure(figsize=(12, 6), facecolor='#F5F5F5')\ngs = fig.add_gridspec(1, 2)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\n\ncmap1 = ['#8F3D84', '#B654A9', '#CE8DC5', '#EDD4EA',]\ncmap2 = ['#8F3D84', '#AB499E', '#B654A9', '#C270B7', '#CE8DC5', '#DAA9D4', '#F9F1F8']\n\nax0.pie(dist_channels, labels=dist_channels.index, explode=[0.1, 0.1, 0.1, 0.1], \n        colors=cmap1, wedgeprops=dict(width=0.5), shadow=True, startangle=45)\n\nax0.text(-0.9, 1.28, 'Distribution channel.', fontsize=15, fontweight='bold', fontfamily='monospace')\nax0.text(-1.2, 1.07, 'Distribution channel usually used by the customer \\nto make bookings at the hotel.', \n         fontsize=8, fontfamily='monospace')\nax0.text(-1.2, -1.5, 'Nothing strange here. Most of the customers \\nused travel agencies to made their bookings.', \n         fontsize=10, fontfamily='monospace')\n\nax1.pie(market_segments, labels=ms_labels, explode=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], \n        colors=cmap2, wedgeprops=dict(width=0.5), shadow=True, startangle=160)\nax1.set_title('Current market segment of the customer.', fontsize=15, fontweight='bold', fontfamily='monospace')\n# ax1.text(-0.9, 1.25, 'Market segment', fontsize=15, fontweight='bold', fontfamily='monospace')\n# ax1.text(-1.2, 1.07, 'Current market segment of the customer.', \n#          fontsize=8, fontfamily='monospace')\n\n\nplt.tight_layout()\nplt.show()","e5718139":"requests_cols = ['SRHighFloor', 'SRLowFloor', 'SRAccessibleRoom', 'SRMediumFloor', \n                 'SRBathtub', 'SRShower', 'SRCrib', 'SRKingSizeBed', 'SRTwinBed', \n                 'SRNearElevator', 'SRAwayFromElevator', 'SRNoAlcoholInMiniBar', 'SRQuietRoom']","248ed7b1":"fig, axes = plt.subplots(3, 4, figsize=(12, 6), sharex=True, sharey=True, squeeze=False)\nfig.set_facecolor('#F5F5F5')\n\nfor i, ax in enumerate(axes.flatten()):\n    col = requests_cols[i]\n    counts = df[col].value_counts()\n    g = ax.bar(counts.index, counts.values, color=['#AB49A2', '#B1EDE8'], \n               alpha=0.85, edgecolor='k', linewidth=2)\n    for p in ax.patches:\n        ax.annotate(format(p.get_height()), (p.get_x() + p.get_width() \/ 2., \\\n                                               p.get_height()), ha = 'center', va = 'top', \\\n                                               xytext = (0, 10), textcoords = 'offset points')\n    ax.set_title(f'{col}')\n    ax.set_facecolor('#F5F5F5')\n    plt.xticks([0, 1], ['No', 'Yes'])\n    ax.xaxis.grid(False, which='major')\n    ax.yaxis.grid(True, linestyle=':', color='black', dashes=(3, 8))\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n\nplt.suptitle('Any extras?', fontsize=15, fontweight='bold', fontfamily='monospace')\nplt.tight_layout()\nplt.show()","3200b26c":"df['Const'] = 'Constant'","61fdd83c":"df.head(3)","afca1591":"data_prep = df.drop(['ID', 'Nationality', 'LodgingRevenue', 'OtherRevenue', 'DaysSinceCreation', 'NameHash', \n               'DocIDHash', 'DaysSinceLastStay', 'DaysSinceFirstStay', 'AgeGroups', 'Const'], axis=1)\ndata_prep.head()","6ce1693b":"data_prep['Age'].fillna(df['Age'].mean(), inplace=True)\ndata_prep['Age'] = data_prep['Age'].astype(int)\nneg_age = data_prep.loc[data_prep['Age'] < 1]\ndata_prep.drop(neg_age.index, inplace=True)\ndata_prep.shape","dc931e71":"cat_cols = data_prep.select_dtypes(include='object')\nlist(cat_cols)","4ddc1db1":"cat_cols_dummies = pd.get_dummies(cat_cols, prefix=['Channel', 'Segment'], prefix_sep='')\ncat_cols_dummies.head(3)","d2d7bc41":"to_concat = data_prep.drop(['DistributionChannel', 'MarketSegment'], axis=1)\ndata = pd.concat([to_concat, cat_cols_dummies], axis=1)\ndata.head(3)","80add6e0":"scaler = MinMaxScaler()","50e2d11c":"data_scaled = scaler.fit_transform(data)\ndata_scaled","cc5aef34":"df_scaled = pd.DataFrame(data_scaled, columns=data.columns)\ndf_scaled.head()","3e2ae58e":"df.drop(neg_age.index, inplace=True)","86c5f6e9":"X = df_scaled[['Age', 'AverageLeadTime', 'PersonsNights', 'RoomNights', 'TotalRevenue']]","83a7c695":"%%time\n\nwcss = []\n\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters=i)\n    kmeans.fit(X)\n    wcss.append(kmeans.inertia_)\n\nplt.figure(figsize=(10, 7))\nplt.grid()\nplt.plot(range(1, 11), wcss)\nplt.xlabel('K value')\nplt.ylabel('WCSS')\nplt.show()","b9ab4e99":"kmeans = KMeans(n_clusters=3)\nkmeans.fit(X)","a488b6d1":"labels = kmeans.labels_\ndf['Kmean-Labels'] = labels\ndf['Kmean-Labels'].value_counts()","0471063e":"plt.figure(figsize=(10, 15))\nsns.stripplot(x=df['Const'], y=df['ID'], hue=df['Kmean-Labels'])\nplt.show()","e6414db6":"klabel0 = df.loc[df['Kmean-Labels']==0]\nklabel1 = df.loc[df['Kmean-Labels']==1]\nklabel2 = df.loc[df['Kmean-Labels']==2]\n\nfig = plt.figure(figsize=(12, 15))\nfig.set_facecolor('#F5F5F5')\n\nax = [None for _ in range(3)]\n\nax[0] = plt.subplot2grid((1,3), (0,0), colspan=1)\nax[1] = plt.subplot2grid((1,3), (0,1), colspan=1)\nax[2] = plt.subplot2grid((1,3), (0,2), colspan=1)\n\nsns.stripplot(x=df['Const'], y=klabel0['ID'], ax=ax[0], color='#AB49A2')\nsns.stripplot(x=df['Const'], y=klabel1['ID'], ax=ax[1], color='#d979d0')\nsns.stripplot(x=df['Const'], y=klabel2['ID'], ax=ax[2], color='#ed9ae6')\n\nfor i in range(3):\n    sns.despine()\n    ax[i].set_title(f'Label: {i}')\n    ax[i].set_facecolor('#F5F5F5')\n    ax[i].xaxis.grid(False, which='major')\n    ax[i].yaxis.grid(True, linestyle=':', color='black', dashes=(3, 8))\n\nplt.suptitle('KMeans labels', fontsize=15, fontweight='bold', fontfamily='monospace')\nplt.show()","988539da":"fig, ax = plt.subplots(figsize=(15, 8))\nfig.set_facecolor('#F5F5F5')\n\npalette = ['#6c007a', '#28bf3a', '#f79400']\nsns.scatterplot(x=df['Age'], y=df['TotalRevenue'], hue=df['Kmean-Labels'], palette=palette)\nax.set_facecolor('#F5F5F5')\nax.set_xlabel('Age')\nax.set_ylabel('Total amount spent')\nplt.title('Total spendings by age (KMeans labels).')\nplt.show()","e3aaccff":"kmeans_avg = df.groupby('Kmean-Labels').mean()\nkmeans_avg.drop('ID', axis=1, inplace=True)\nkmeans_avg","7871c156":"round(silhouette_score(X, labels, metric='euclidean'), 4)","13f1abf5":"range_n_clusters = [2, 3, 4, 5]\n\nfor n_clusters in range_n_clusters:\n    \n    # Create a subplot with 1 row and 2 columns\n    fig, ax = plt.subplots(figsize=(7, 8))\n    # The 1st subplot is the silhouette plot\n    ax.set_xlim([-1, 1])\n    # The (n_clusters+1)*10 is for inserting blank space between silhouette\n    # plots of individual clusters, to demarcate them clearly.\n    ax.set_ylim([0, len(X) + (n_clusters + 1) * 10])\n\n    # Initialize the clusterer with n_clusters value and a random generator\n    # seed of 10 for reproducibility.\n    clusterer = KMeans(n_clusters=n_clusters, random_state=10)\n    cluster_labels = clusterer.fit_predict(X)\n\n    # The silhouette_score gives the average value for all the samples.\n    # This gives a perspective into the density and separation of the formed\n    # clusters\n    silhouette_avg = silhouette_score(X, cluster_labels)\n    print(f'For n_clusters = {n_clusters}',\n          f'The average silhouette_score is : {round(silhouette_avg, 4)}')\n\n    # Compute the silhouette scores for each sample\n    sample_silhouette_values = silhouette_samples(X, cluster_labels)\n\n    y_lower = 10\n    for i in range(n_clusters):\n        # Aggregate the silhouette scores for samples belonging to\n        # cluster i, and sort them\n        ith_cluster_silhouette_values = \\\n            sample_silhouette_values[cluster_labels == i]\n\n        ith_cluster_silhouette_values.sort()\n\n        size_cluster_i = ith_cluster_silhouette_values.shape[0]\n        y_upper = y_lower + size_cluster_i\n\n        color = cm.nipy_spectral(float(i) \/ n_clusters)\n        ax.fill_betweenx(np.arange(y_lower, y_upper),\n                          0, ith_cluster_silhouette_values,\n                          facecolor=color, edgecolor=color, alpha=0.7)\n\n        # Label the silhouette plots with their cluster numbers at the middle\n        ax.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n\n        # Compute the new y_lower for next plot\n        y_lower = y_upper + 10  # 10 for the 0 samples\n\n    ax.set_title(f'The silhouette plot for {n_clusters} clusters.')\n    ax.set_xlabel(\"The silhouette coefficient values\")\n    ax.set_ylabel(\"Cluster label\")\n\n    # The vertical line for average silhouette score of all the values\n    ax.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n\n    ax.set_yticks([])  # Clear the yaxis labels \/ ticks\n    ax.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n\nplt.show()","5e79863d":"birch = Birch(n_clusters=None) #by default n_clusters=3\nbirch.fit(X)\nbirch.predict(X)\n\nbirch_labels = birch.labels_\ndf['Birch-Labels'] = birch_labels\ndf['Birch-Labels'].value_counts()","e4104680":"fig, ax = plt.subplots(figsize=(15, 8))\nfig.set_facecolor('#F5F5F5')\n\nsns.scatterplot(x=df['Age'], y=df['TotalRevenue'], hue=df['Birch-Labels'])\nax.set_facecolor('#F5F5F5')\nax.set_xlabel('Age')\nax.set_ylabel('Total amount spent')\nplt.title('Total spendings by age (with BIRCH labels).')\nplt.show()","d7fc26b1":"%%time\n\nthresholds = [0.05, 0.1, 0.2, 0.25]\n\nbirch_labels = {}\n\nfor t in thresholds:\n    birch = Birch(threshold=t, n_clusters=None)\n    birch.fit(X)\n    birch.predict(X)\n    labels = birch.labels_\n    birch_labels[f'{t}'] = labels \n\nbirch_df = pd.DataFrame(birch_labels)\n\nbirch_df.head()","52bc2ea5":"for col in birch_df.columns:\n    fig, ax = plt.subplots(figsize=(13, 6))\n    fig.set_facecolor('#F5F5F5')\n    \n    sns.scatterplot(x=df['Age'], y=df['TotalRevenue'], hue=birch_df[col])\n    ax.set_facecolor('#F5F5F5')\n    ax.set_xlabel('Age')\n    ax.set_ylabel('Total amount spent')\n    plt.title(f'Threshold: {col}')\n    \n    print(f'Threshold: {col} \\nNumber of clusters found: {birch_df[col].nunique()} \\\n    \\nValue counts: \\n{birch_df[col].value_counts()}')\n    plt.show()","a72bd48c":"birch = Birch(threshold=0.2, n_clusters=3)\nbirch.fit(X)\nbirch.predict(X)","09c63a3e":"#Overwrite older labels\n\nbirch_labels = birch.labels_\ndf['Birch-Labels'] = birch_labels\ndf['Birch-Labels'].value_counts()","cef93807":"fig, ax = plt.subplots(figsize=(15, 8))\nfig.set_facecolor('#F5F5F5')\n\nsns.scatterplot(x=df['Age'], y=df['TotalRevenue'], hue=df['Birch-Labels'], alpha=0.7, palette=palette)\nax.set_facecolor('#F5F5F5')\nax.set_xlabel('Age')\nax.set_ylabel('Total amount spent')\nplt.title('Total spendings by age (BIRCH n_clusters set to 3).')\nsns.despine()\nplt.show()","2008f081":"round(silhouette_score(X, birch_labels), 4)","3bfafe35":"birch_avg = df.groupby('Birch-Labels').mean()\nbirch_avg.drop('ID', axis=1, inplace=True)\nbirch_avg","bbb9eb73":"col_to_log = ['Age', 'AverageLeadTime', 'PersonsNights', 'RoomNights', 'TotalRevenue']\nX_gmm = pd.DataFrame()\n\nfor col in col_to_log:\n    X_gmm[col] = np.log1p(data_prep[col] + 0.1)","846eaad7":"n_components = np.arange(1, 10)\nmodels = [GaussianMixture(n, covariance_type='full', random_state=0).fit(X_gmm)\n          for n in n_components]\n\nplt.figure(figsize=(8, 6))\nplt.plot(n_components, [m.bic(X_gmm) for m in models], label='BIC')\nplt.title('BIC score')\nplt.xlabel('Number of components')\nplt.show()","de84dcc5":"gmm = GaussianMixture(n_components=5).fit(X_gmm)\ngmm_labels = gmm.predict(X_gmm)\nprint(gmm.converged_)","6517f5ed":"df['GMM-Labels'] = gmm_labels\nprint(f'Number of clusters found: {df[\"GMM-Labels\"].nunique()}')\ndf['GMM-Labels'].value_counts()","3af90a61":"fig, ax = plt.subplots(figsize=(15, 8))\nfig.set_facecolor('#F5F5F5')\n\npalette2 = ['#6c007a', '#28bf3a', '#f79400', '#00e0dd', '#f02b2b']\nsns.scatterplot(x=df['Age'], y=df['TotalRevenue'], hue=df['GMM-Labels'], alpha=0.7, palette=palette2)\nax.set_facecolor('#F5F5F5')\nax.set_xlabel('Age')\nax.set_ylabel('Total amount spent')\nplt.title('Total spendings by age (GMM labels).')\nplt.show()","e1490452":"round(silhouette_score(X_gmm, gmm_labels), 4)","05f3716b":"gmm_avg = df.groupby('GMM-Labels').mean()\ngmm_avg.drop('ID', axis=1, inplace=True)\ngmm_avg","29e4eb92":"gmm = GaussianMixture(n_components=3).fit(X_gmm)\ngmm_labels = gmm.predict(X_gmm)\nprint(gmm.converged_)","d19c2aff":"df['GMM-Labels'] = gmm_labels\nprint(f'Number of clusters found: {df[\"GMM-Labels\"].nunique()}')\ndf['GMM-Labels'].value_counts()","3248f60c":"fig, ax = plt.subplots(figsize=(15, 8))\nfig.set_facecolor('#F5F5F5')\n\npalette2 = ['#6c007a', '#28bf3a', '#f79400']\nsns.scatterplot(x=df['Age'], y=df['TotalRevenue'], hue=df['GMM-Labels'], alpha=0.7, palette=palette2)\nax.set_facecolor('#F5F5F5')\nax.set_xlabel('Age')\nax.set_ylabel('Total amount spent')\nplt.title('Total spendings by age (GMM labels).')\nplt.show()","14338ab8":"gmm_avg = df.groupby('GMM-Labels').mean()\ngmm_avg.drop('ID', axis=1, inplace=True)\ngmm_avg","d18871cc":"avg_df = pd.concat([kmeans_avg, birch_avg, gmm_avg], axis=0)\navg_df.drop(['Kmean-Labels','Birch-Labels'], axis=1, inplace=True)\n\navg_index = ['K_0', 'K_1', 'K_2', 'BIRCH_0', 'BIRCH_1', 'BIRCH_2', 'GMM_0', 'GMM_1', 'GMM_2']\navg_df.index = avg_index\n\navg_df","654720a2":"avg_cols = ['Age', 'AverageLeadTime', 'TotalRevenue', 'PersonsNights', 'RoomNights', 'PersonsRoomNight']\n\navg_palette = ['#AB49A2', # share label 0\n               '#FAA00F', # share label 1 \n               '#39BFD0'] # share label 2\n\nfig = plt.figure(figsize=(18, 10))\nfig.set_facecolor('#F5F5F5')\n\nax = [None for _ in range(6)]\n\nax[0] = plt.subplot2grid((3,4), (0,0), colspan=2)\nax[1] = plt.subplot2grid((3,4), (0,2), colspan=2)\nax[2] = plt.subplot2grid((3,4), (1,0), colspan=2)\nax[3] = plt.subplot2grid((3,4), (1,2), colspan=2)\nax[4] = plt.subplot2grid((3,4), (2,0), colspan=2)\nax[5] = plt.subplot2grid((3,4), (2,2), colspan=2)\n\nfor i, axis in enumerate(ax):\n\n    col = avg_cols[i]\n    g = sns.barplot(y=avg_df[col], x=avg_df.index, palette=avg_palette, \n            alpha=1, linewidth=2, edgecolor='black', ax=ax[i])\n\n    axis=g\n\n    for p in axis.patches:\n        axis.annotate(f'{round(p.get_height(), 1)}', (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                    ha='center', va='center', fontsize=11, color='black', xytext=(0, 10),\n                    textcoords='offset points')\n\nfor i in range(6):\n    sns.despine()\n    ax[i].set_facecolor('#F5F5F5')\n    ax[i].xaxis.grid(False, which='major')\n    ax[i].yaxis.grid(True, linestyle=':', color='black', dashes=(3, 8))\n\n\nplt.tight_layout()\nplt.show()","4d8aee30":"Let's just take a look at average values of original data grouped by labels.","87fac71f":"With a threshold = 0.2 BIRCH classified our customers into 4 gruops. Let's set the number of clusters to 3 so that we can compare it with KMeans.","aa2d988b":"Filling <b>missing values<\/b> in 'age' column with mean and removing the negative values.","78491a5d":"&emsp;If we multiply the amount of people by amount of nights they have stayed and do the same for the rooms they have booked how come there is something like 2 persons\/night and 88 room\/nights? One of explanation that came to my mind is that maybe there were many rooms booked but a part of guests didn't showed up (but the rooms were for example already payed so it was uncancellable\/not refundable). We could also try to get the number of nights by substracting the value from 'DaysSinceLastStay' from 'DaysSinceCreation' but it would only work for people that came once (although this is a vast majority of our customers).<br> &emsp;If you have any guess\/explanation please put it in the comments below this notebook, thank You. ","b3b150a8":"We see that the \"elbow\" point is for K=3 se we chose that value.","3643f22b":"Getting <b>dummies<\/b> for categorical variables and creating final dataframe.","3d8ee7c7":"Running those algorithms various times gives various results. Sometimes avgerages for given label are similar, sometimes they differ.","b0903a3a":"83590 instances. You can see that 'name' and 'document ID' was changed to SHA2\u2013256 hash string to allow customer's anonymization.<br>\nFrom the dataset description we read the following ethics statement:<br><br>\n>&emsp;<i>Given that the hotel providing the data requested anonymity and due to the preservation of personal data, such as name, ID number and date of birth, every effort was made to anonymize or transform fields that directly or indirectly allowed identification of the hotel or the hotel's customers. Nevertheless, it was ensured that the data maintained its original properties, such as the existence of duplicates, outliers, missing values, among others. In this way, the authors guarantee the anonymity and privacy of the data, without influencing its quality for the appropriate types of use.<\/i>","f2e0e1e2":"&emsp;In the end I am somewhat disappointed with the results of our clustering, but I am also sure that with proper algorithms tweaking and some feature engineering we could achive a better outcome. I also think that for somebody with domain knowledge even this kind of resluts may help in making decisions.\n<br>&emsp;I hope you enjoy this notebook, thank you for your time. ","e8574456":"BIRCH thrown all of our customers into one bucket. We will try various thresholds now.","76b50fc9":"Since we have only the 'ID' column to identify our customer I will create a column with constant variable to help visualizing results.","5b3ce62d":"Visualize the labels in a strip plot.","d0d671a1":"<div>\n<img src=\"https:\/\/images.pexels.com\/photos\/3771110\/pexels-photo-3771110.jpeg?auto=compress&cs=tinysrgb&dpr=3&h=750&w=1260\" width=\"900\"\/>\n<\/div>","18165cfc":"### Gaussian Mixture\n<a id='gmm'><\/a>","d1c7a3de":"&emsp;After this brief exploration let's proceed with implementation of clustering algorithms.","efe7ecec":"## Conclusions\n<a id='conc'><\/a>","df29446d":"Droping unnecessary columns.","9c1d6c67":"Final dataframe with averages.","751cb20c":"### Table of content:<br>\n\n&emsp;[1. Data](#data)<br>\n&emsp;[2. Columns description](#cols)<br>\n&emsp;[3. Visualizations](#viz)<br>\n&emsp;[4. Data preparation](#dataprep)<br>\n&emsp;[5. KMeans](#kmeans)<br>\n&emsp;[6. BIRCH](#birch)<br>\n&emsp;[7. Gaussian Mixture Model](#gmm)<br>\n&emsp;[8. Averages comparison](#avg)<br>\n&emsp;[9. Conclusions](#conc)<br>","0213f477":"Apart from missing values we have some negative numbers as well which obviously is a mistake.","6495088e":"&emsp;A Gaussian mixture model is a probabilistic model that assumes all the data points are generated from a mixture of a finite number of Gaussian distributions with unknown parameters. Some columns of our data are skewed so we will transform them using NumPy log1p function and adding a constant so they have more normal distribution.<br>\n&emsp;First we will plot the BIC (Bayesian information criterion) score for various numbers of components. The lower the score the better.","71ab95a8":"## Averages comparison","25de0924":"I will create some additional columns that will help us get more insights about the data.<br>\n<ul>\n    <li>'TotalRevenue' - total amount spent by a customer on lodging (room, crib, and other related lodging expenses) and other expenses such as food, beverage, spa etc.<\/li>\n    <li>'PersonRoomNights' - created by dividing 'PersonsNights' by 'RoomNights' to get the estimated number of people per room.<\/li>\n    <li>'AgeGroups' - age groups of '0-20', '21-40', '41-60', '60+' with missing values grouped as 'Unknown' (that includes negative values as well)<\/li>","f934c436":"I choose 5 as 8 feels like a lot of clusters.","11bd0b8c":"&emsp;That presents the distribution of labels a little better but I am quite sceptical about this result due to the vertical split after 40 years of age.<br> It would be better to run KMeans with many iterations, with different settings and feature combinations (including outliers removal, PCA and even feature order) but we will not do that in this notebook.","d2afdf69":"&emsp;Data description about 'booking checked in' says: 'Number of bookings the customer made, and which end up with a staying'.<br> What does almost 20 thousands zeros means? If the customer didn't arrived but didn't cancel why isn't he\/she included in 'no-shows' group?","82d1ed6a":"# <center>Hotel's customers dataset EDA and clustering.<\/center>","776abce6":"### BIRCH\n<a id='birch'><\/a>","308a3b93":"We can see that label 0 is dominant in the results and that the silhouette score is close to zero which indicates overlapping clusters with samples very close to the decision boundary of the neighboring clusters. Just like before we will group our dataset by labels and check the averages.","c02f6473":"The silhouette score is still low. Let's make a final grouping of original dataset by GMM labels.","1696603f":"## Data\n<a id='data'><\/a>","8146752c":"Normalizing variables with <b>MinMaxScaler<\/b>.","80e029d8":"3779 values missing in 'Age' column. We will have to deal with this later, in clustering part.","1c3bd5b1":"&emsp;<b>B<\/b>alanced <b>I<\/b>terative <b>R<\/b>educing and <b>C<\/b>lustering using <b>H<\/b>ierarchies (BIRCH) is a clustering algorithm that can cluster large datasets by first generating a small and compact summary of the the large dataset that retains as much information as possible. This smaller summary is then clustered instead of clustering the larger dataset.","1d22bac1":"&emsp;To be honest I shamefully admit that I don't completely understand some of the messurements. In the dataset there is no information of how many nights each customer have stayed. The trend seams obvious: more people = more rooms, for example 10 person\/nights and 5 room\/nights most likely means 2 people stayed in one room for 5 nights (or 10 people in 5 rooms for one night), 9-3 similarly: 3 people, one room, 3 nights etc., but what about this:","2c1a3d72":"Columns description:<br>\n<ul>\n    <li>'ID' - customer's ID.<\/li>\n    <li>'Age' - customer's age.<\/li>\n    <li>'Nationality' - Country of origin in ISO 3155\u20133:2013 format.<\/li>\n    <li>'DaysSinceCreation' - number of days elapsed between the creation date and the last day of the extraction period.<\/li>\n    <li>'NameHash' - customer's hashed name.<\/li>\n    <li>'DocIDHash' - customer's hashed document ID.<\/li>\n    <li>'AverageLeadTime' - average number of days elapsed between the customer's booking date and arrival date.<\/li>\n    <li>'LodgingRevenue' - total amount spent on lodging expenses by the customer in euros.<\/li>\n    <li>'OtherRevenue' - total amount spent on other expenses by the customer in euros.<\/li>\n    <li>'BookingsCanceled' - number of bookings the customer made but subsequently canceled (informed the hotel).<\/li>\n    <li>'BookingsNoShowed' - number of bookings the customer made but didn't show up.<\/li>\n    <li>'BookingsCheckedIn' - number of bookings the customer made, and which end up with a staying.<\/li>\n    <li>'PersonsNights' - total number of persons\/nights that the costumer stayed at the hotel.<\/li>\n    <li>'RoomNights' - total of room\/nights the customer stayed at the hotel.<\/li>\n    <li>'DaysSinceLastStay' - number of days elapsed between the last day of the extraction and the customer's last arrival date (-1 indicates the customer never stayed at the hotel).<\/li>\n    <li>'DaysSinceFirstStay' - number of days elapsed between the last day of the extraction and the customer's first arrival date (-1 indicates the customer never stayed at the hotel).<\/li>\n    <li>'DistributionChannel' - distribution channel usually used by the customer to make bookings at the hotel.<\/li>\n    <li>'MarketSegment' - current market segment of a customer.<\/li>\n    <li> All of SR___ columns are indications if the customer usually asks for given extras\/change.<\/li>\n <\/ul>\n <a id='cols'><\/a>","e5e1962f":"## A little bit of visualization.\n<a id='viz'><\/a>","859e6a20":"Final dataframe","21ad2572":"That is definitely not the most beautiful plot. <br> Let's see how does the labels distribution looks on separated plots.","74636a86":"Well, that didn't help a lot.<br>\nWe will use our previous plot of age\/total spendings and apply labels to it.","dc466c89":"The silhouette score is quite poor. One last thing that I would like to check is a silhouette score for various numbers of cluster as an alternative to elbow method.\n<br>(Following code is copied from sklearn documentation) ","bc29b421":"### KMeans cluster\n<a id='kmeans'><\/a>","6db5299f":"&emsp;We will let the algorithm come up with the number of clusters. Also we will leave the threshold at it's default (from scikit-learn documentation: the radius of the subcluster obtained by merging a new sample and the closest subcluster should be lesser than the threshold, otherwise a new subcluster is started).","d5c6b867":"Hello!<br>\n&emsp;In this notebook we will take a look at a real-life dataset of customers (guests) of one of the four-star hotels in Lisbon, Portugal.<br> The dataset contains over 83000 records with behavioral, demographic and geographic information, gathered over 3 years, from 2015 to 2018.<br>\n&emsp;After exploring the data we will try to use some of clustering algorithms to make a segmentation of customers. Clustering is the process of dividing the entire data into groups (also known as clusters) based on the patterns in the data.<br>\nThe dataset is available [here](http:\/\/dx.doi.org\/10.17632\/j83f5fsh6c.1), and the description [here](https:\/\/www.sciencedirect.com\/science\/article\/pii\/S2352340920314645#sec0004).<br> Let's get into it!","a547ed89":"## Data preparation for clustering.\n<a id='dataprep'><\/a>","5c6b6d4a":"&emsp;No matter how many clusters the silhouette score is still low. It may indicate that our dataset is not suitable for clustering with KMeans (which is most likely the case since our dataset violates the KMeans assumptions of clusters being spherical, all variables having the same variance as well as each cluster having roughly equal number of observations).","1db60733":"In the end I've decided to use only columns that I think are most suitable for our task (I've run following algorithms with complete scaled dataframe, the results were similar or even more messy).\n<br> Dummies weren't necessary but I leave them for potential use in the future.","c5071161":"&emsp;The <b>silhouette score<\/b> (or value) is a measure of how similar an object is to its own cluster (cohesion) compared to other clusters (separation). The score ranges from \u22121 to +1, where a value closer to 1 indicates that the object is well matched to its own cluster and poorly matched to neighboring clusters. If most objects have a high value, then the clustering configuration is appropriate. A value of 0 indicates that the sample is on or very close to the decision boundary between two neighboring clusters and negative values indicate that those samples might have been assigned to the wrong cluster.","a2edddc9":"Just like before we will set the number of clusters to 3 so that we could compare the results with other averages (yes, components = 3 had worst BIC score than 5, but we do that as an exercise).","a87618cf":"&emsp;As we can see majority of customers don't ask for anything. The most common requests are king size bed, twin bed, a crib and moving to a higher floor.","5baf723f":"&emsp;One of the most popular clustering algorithms. K-means tries to group similar items in the form of clusters. The number of groups is represented by K.<br> The \"Elbow Method\" is one of the most popular methods to determine this optimal value of K. To determine the optimal number of clusters, we have to select the value of k at the \u201celbow\u201d ie the point after which the distortion (average of the squared distances from the cluster centers of the respective clusters) \/ inertia (sum of squared distances of samples to their closest cluster center) start decreasing in a linear fashion."}}