{"cell_type":{"8d82fe19":"code","9b5d35bc":"code","72a3f474":"code","f786ac49":"code","19d0bac4":"code","ea0303f5":"code","c5b53ebd":"code","bd51c613":"code","b77c5828":"code","5612ccf2":"code","199951a3":"code","ea50c646":"code","aefc1c38":"code","fa2809b3":"code","133d4004":"code","3f54667b":"code","a89206ce":"code","25209152":"code","dd3b83e9":"code","c7f4ca14":"code","24f20ae3":"code","0b918727":"code","56ec8365":"code","9159b3ba":"code","0de0110a":"code","845fed09":"code","833e83e2":"code","74f33b8a":"code","229bfcf6":"code","f08b5c54":"code","c90552d6":"code","a1269882":"code","fc4f0501":"code","2302b456":"code","9e52f818":"code","bf2c2d45":"code","27ea34f2":"code","327766f7":"code","404acc40":"code","4744805e":"markdown","834ed323":"markdown","fe651289":"markdown","43b4924f":"markdown","7053c97d":"markdown","e74010ac":"markdown","270ee129":"markdown","7479fc6a":"markdown","3d8a165a":"markdown","abf53000":"markdown","cc100507":"markdown","f427622e":"markdown","f6d31ea0":"markdown","4f846c62":"markdown","4298f463":"markdown"},"source":{"8d82fe19":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b5d35bc":"import plotly_express as pe\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as st\nimport missingno as msno","72a3f474":"df = pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")","f786ac49":"df","19d0bac4":"# Data Info\ndf.info()\nprint(\"Shape of Data {}\".format(df.shape))","ea0303f5":"df.describe().T","c5b53ebd":"msno.matrix(df)","bd51c613":"cols = [\"gender\",\"hypertension\",\"heart_disease\",\"ever_married\",\"work_type\",\"Residence_type\",\"smoking_status\",\"stroke\"]\nfor col in cols:\n    fig = pe.pie(values=df[col].groupby(df[col]).count(),names=df[col].groupby(df[col]).count().index,title=\"Distribution of {}\".format(col))\n    fig.update_traces(textposition='inside', textinfo='percent+label')\n    fig.show()","b77c5828":"# Other value imbalanced\n\ndf = df[(df[\"gender\"] ==\"Male\")|(df[\"gender\"] ==\"Female\")]","5612ccf2":"st.kstest(df[\"bmi\"].dropna(),\"norm\")","199951a3":"st.kstest(df[\"age\"],\"norm\")","ea50c646":"st.kstest(df[\"avg_glucose_level\"],\"norm\")","aefc1c38":"df[\"bmi\"].fillna(df[\"bmi\"].median(),inplace=True)","fa2809b3":"cols = [\"age\",\"bmi\",\"avg_glucose_level\"]\nfor col in cols:\n    sns.distplot(df[col])\n    plt.show()","133d4004":"cols = [\"bmi\",\"age\",\"avg_glucose_level\"]\nfig = pe.box(df[cols],points=\"all\")\nfig.show()","3f54667b":"fig = pe.box(x = df[\"gender\"],y = df[\"bmi\"],color = df[\"gender\"])\nfig.show()","a89206ce":"fig = pe.box(x = df[\"gender\"],y = df[\"avg_glucose_level\"],color = df[\"gender\"])\nfig.show()","25209152":"fig = pe.strip(x = df[\"stroke\"],y = df[\"avg_glucose_level\"],color = df[\"gender\"])\nfig.show()","dd3b83e9":"fig = pe.strip(x = df[\"stroke\"],y = df[\"bmi\"],color = df[\"gender\"])\nfig.show()","c7f4ca14":"fig = pe.strip(x = df[\"stroke\"],y = df[\"age\"],color = df[\"gender\"])\nfig.show()","24f20ae3":"fig = pe.strip(x = df[\"stroke\"],y = df[\"age\"],color = df[\"hypertension\"])\nfig.show()","0b918727":"fig = pe.strip(x = df[\"smoking_status\"],y = df[\"avg_glucose_level\"],color = df[\"gender\"])\nfig.show()","56ec8365":"#bmi\nq3 = df[\"bmi\"].quantile(0.75)\nq1 = df[\"bmi\"].quantile(0.25)\niqr = q3-q1\nmini = q1-1.5*iqr;maxi = q3+1.5*iqr\ndf = df[(df[\"bmi\"]>=mini) & (df[\"bmi\"]<=maxi)]\n\n#avg_glucose_level\nq3 = df[\"avg_glucose_level\"].quantile(0.75)\nq1 = df[\"avg_glucose_level\"].quantile(0.25)\niqr = q3-q1\nmini = q1-1.5*iqr;maxi = q3+1.5*iqr\ndf = df[(df[\"avg_glucose_level\"]>=mini) & (df[\"avg_glucose_level\"]<=maxi)]","9159b3ba":"from sklearn.preprocessing import StandardScaler\ncols = [\"age\",\"bmi\",\"avg_glucose_level\"]\nscale = StandardScaler()\ndf[cols] = scale.fit_transform(df[cols])","0de0110a":"df","845fed09":"from sklearn.preprocessing import LabelEncoder\ncols = [\"gender\",\"ever_married\",\"work_type\",\"Residence_type\",\"smoking_status\"]\nencoder = LabelEncoder()\nfor i in cols:\n    df[i] = encoder.fit_transform(df[i])","833e83e2":"df.drop(\"id\",axis = 1,inplace=True)","74f33b8a":"X = df.drop(\"stroke\",axis = 1)\ny = df[\"stroke\"]","229bfcf6":"from sklearn.model_selection import train_test_split,KFold\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state =0)","f08b5c54":"from sklearn.utils import class_weight\nclass_weights = dict(zip(np.unique(y_train), class_weight.compute_class_weight('balanced',\n                                                 np.unique(y_train),\n                                                 y_train)))\n","c90552d6":"from lightgbm import LGBMClassifier\nfrom sklearn.metrics import confusion_matrix   \nfrom sklearn.metrics import accuracy_score,classification_report,f1_score\nlgbm_model=LGBMClassifier(class_weight=class_weights).fit(X_train,y_train)  \ny_pred=lgbm_model.predict(X_test) \nprint(\"Accuracy : \",accuracy_score(y_test,y_pred))","a1269882":"print(classification_report(y_test,y_pred))","fc4f0501":"confusion_matrix(y_test,y_pred)","2302b456":"from sklearn.metrics import roc_auc_score\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_curve\n\ny_proba= lgbm_model.predict_proba(X_test)\nroc_auc_score(y_test, y_proba[:, 1])","9e52f818":"fpr, tpr, _ = roc_curve(y_test, y_proba[:, 1])\nplt.plot(fpr, tpr)\nplt.plot([0, 1], [0, 1], color='red', lw=2, linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate');","bf2c2d45":"from catboost import CatBoostClassifier\ncat = CatBoostClassifier(od_type=\"Iter\")\ncat_model = cat.fit(X_train,y_train)\ny_pred =cat.predict(X_test)\naccuracy_score(y_test,y_pred)\n","27ea34f2":"confusion_matrix(y_test,y_pred)","327766f7":"from sklearn.metrics import roc_auc_score\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_curve\n\ny_proba= cat_model.predict_proba(X_test)\nroc_auc_score(y_test, y_proba[:, 1])","404acc40":"fpr, tpr, _ = roc_curve(y_test, y_proba[:, 1])\nplt.plot(fpr, tpr)\nplt.plot([0, 1], [0, 1], color='red', lw=2, linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate');","4744805e":"avg_glucose_level is not normal.","834ed323":"# NA Values","fe651289":"# Outliers","43b4924f":"# Data Visualization","7053c97d":"# encoding","e74010ac":"## catboost","270ee129":"Age is not normal.","7479fc6a":"# model","3d8a165a":"## lightgbm","abf53000":"* Our model is not very good at detecting Stroke = 1 values, but it is good at detecting values of Stroke = 0.","cc100507":"* BMI is not normal.","f427622e":"# Numerical Values","f6d31ea0":"### Distrubition of BMI ","4f846c62":"# Categorical Values","4298f463":"# normalization"}}