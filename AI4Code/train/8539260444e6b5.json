{"cell_type":{"3cba8fa6":"code","135f5af7":"code","440a9780":"code","61d5f233":"code","107e5cd6":"code","51dbdeb2":"code","57410a48":"code","fddfba58":"code","abf5681e":"code","40d6951c":"code","9216abfd":"code","8c87e4ee":"code","b1e860e9":"code","8235a7e9":"code","b1db802c":"code","ca3d92b5":"code","620cc9f7":"code","53706e1e":"code","7d455a1e":"code","fb2561b7":"code","5d68e620":"code","337b306e":"code","cd16c980":"code","845a8103":"code","84917660":"code","9680d9c7":"code","f6f6dc0b":"code","7a197a55":"code","189fa6ed":"code","c51a2a5d":"markdown","f86e5740":"markdown","f795fdf9":"markdown","4e98b0a9":"markdown","acd5480d":"markdown","87b58758":"markdown","54f31bb9":"markdown","742b12ed":"markdown","1c87ea48":"markdown","167f7794":"markdown","df6e722b":"markdown","642b54dd":"markdown","997c3791":"markdown","89772659":"markdown"},"source":{"3cba8fa6":"import pandas as pd\nimport numpy as np\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import wordnet\nimport nltk\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize \nimport re\nimport spacy\nfrom nltk.corpus import sentiwordnet as swn\nfrom IPython.display import clear_output\nimport plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nimport plotly\nplotly.offline.init_notebook_mode (connected = True)\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem import LancasterStemmer\nfrom nltk import ngrams\n# The following code creates a word-document matrix.\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Modeling packages\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import classification_report","135f5af7":"data=pd.read_csv('..\/input\/imdb-movie-reviews-dataset\/movie_data.csv')","440a9780":"data.shape","61d5f233":"data.head(5)","107e5cd6":"#Edits After Removing Stopwords\nEdited_Review = data['review'].copy()","51dbdeb2":"data.head(10)","57410a48":"# Function to preprocess the Reviews data\ndef preprocess_Reviews_data(data,name):\n    # Proprocessing the data\n    data[name]=data[name].str.lower()\n    # Code to remove the Hashtags from the text\n    data[name]=data[name].apply(lambda x:re.sub(r'\\B#\\S+','',x))\n    # Code to remove the links from the text\n    data[name]=data[name].apply(lambda x:re.sub(r\"http\\S+\", \"\", x))\n    # Code to remove the Special characters from the text \n    data[name]=data[name].apply(lambda x:' '.join(re.findall(r'\\w+', x)))\n    # Code to substitute the multiple spaces with single spaces\n    data[name]=data[name].apply(lambda x:re.sub(r'\\s+', ' ', x, flags=re.I))\n    # Code to remove all the single characters in the text\n    data[name]=data[name].apply(lambda x:re.sub(r'\\s+[a-zA-Z]\\s+', '', x))\n    # Remove the twitter handlers\n    data[name]=data[name].apply(lambda x:re.sub('@[^\\s]+','',x))\n\n# Function to tokenize and remove the stopwords    \ndef rem_stopwords_tokenize(data,name):\n      \n    def getting(sen):\n        example_sent = sen\n        \n        filtered_sentence = [] \n\n        stop_words = set(stopwords.words('english')) \n\n        word_tokens = word_tokenize(example_sent) \n        \n        filtered_sentence = [w for w in word_tokens if not w in stop_words] \n        \n        return filtered_sentence\n    # Using \"getting(sen)\" function to append edited sentence to data\n    x=[]\n    for i in data[name].values:\n        x.append(getting(i))\n    data[name]=x\n","fddfba58":"lemmatizer = WordNetLemmatizer()\ndef Lemmatization(data,name):\n    def getting2(sen):\n        \n        example = sen\n        output_sentence =[]\n        word_tokens2 = word_tokenize(example)\n        lemmatized_output = [lemmatizer.lemmatize(w) for w in word_tokens2]\n        \n        # Remove characters which have length less than 2  \n        without_single_chr = [word for word in lemmatized_output if len(word) > 2]\n        # Remove numbers\n        cleaned_data_title = [word for word in without_single_chr if not word.isnumeric()]\n        \n        return cleaned_data_title\n    # Using \"getting2(sen)\" function to append edited sentence to data\n    x=[]\n    for i in data[name].values:\n        x.append(getting2(i))\n    data[name]=x","abf5681e":"def make_sentences(data,name):\n    data[name]=data[name].apply(lambda x:' '.join([i+' ' for i in x]))\n    # Removing double spaces if created\n    data[name]=data[name].apply(lambda x:re.sub(r'\\s+', ' ', x, flags=re.I))","40d6951c":"# Using the Lemmatization function to lemmatize the Reviews data\ndata['Review_without_stopwords'] = Edited_Review\n\n# Using the preprocessing function to preprocess the hotel data\npreprocess_Reviews_data(data,'Review_without_stopwords')\n# Using tokenizer and removing the stopwords\nrem_stopwords_tokenize(data,'Review_without_stopwords')\n# Converting all the texts back to sentences\nmake_sentences(data,'Review_without_stopwords')\n\n\n#Edits After Lemmatization\nfinal_Edit = data['Review_without_stopwords'].copy()\ndata[\"After_lemmatization\"] = final_Edit\n\nLemmatization(data,'After_lemmatization')\n# Converting all the texts back to sentences\nmake_sentences(data,'After_lemmatization')","9216abfd":"data.head(6)","8c87e4ee":"print(\"- Old Review -\")\nprint(data['review'][3])\nprint(\"\\n- New Review -\")\nprint(data['Review_without_stopwords'][3])\nprint(\"\\n- Last Edit Review -\")\nprint(data['After_lemmatization'][3])","b1e860e9":"data['reviews_text_new'] = data['After_lemmatization'].copy()","8235a7e9":"# Replacing Positive -> 1 and Negative -> 0\n\ndata.replace({\"positive\":1,\"negative\":0},inplace=True)","b1db802c":"data[['reviews_text_new','sentiment']].head(5)","ca3d92b5":"### Changes with respect to the previous code\n### 1. Increasing the n-grams from just having 1-gram to (1-gram, 2-gram, 3-gram, and 4-gram)\n### 2. Including the stopwords in the bag of words features\n\nbow_counts = CountVectorizer(tokenizer= word_tokenize,\n                             ngram_range=(1,3))\n\nbow_data = bow_counts.fit_transform(data.reviews_text_new)","620cc9f7":"X_train_bow, X_test_bow, y_train_bow, y_test_bow = train_test_split(bow_data,\n                                                                    data['sentiment'],\n                                                                    test_size = 0.2,\n                                                                    random_state = 0)","53706e1e":"X_train_bow2, X_test_bow2, y_train_bow2, y_test_bow2 = train_test_split(X_train_bow,\n                                                                    y_train_bow,\n                                                                    test_size = 0.2,\n                                                                    random_state = 0)","7d455a1e":"# Defining and training the model\nlr_model_all_new = LogisticRegression(max_iter = 200)\nlr_model_all_new.fit(X_train_bow, y_train_bow)\n\n# Predicting the results\ntest_pred_bow = lr_model_all_new.predict(X_test_bow2)\ntest_bow = lr_model_all_new.predict(X_test_bow)\n\n## Calculate key performance metrics\n\n# Print a classification report\nprint(classification_report(y_test_bow2,test_pred_lr_all))\nprint(classification_report(y_test_bow,test_bow))","fb2561b7":"from sklearn.feature_extraction.text import TfidfVectorizer\nnoise_words =[]\n### Creating a python object of the class CountVectorizer\ntfidf_counts = TfidfVectorizer(tokenizer= word_tokenize, # type of tokenization\n                               stop_words=noise_words, # List of stopwords\n                               ngram_range=(1,3)) # number of n-grams\n\ntfidf_data = tfidf_counts.fit_transform(data['reviews_text_new'])","5d68e620":"tfidf_data","337b306e":"X_train_tfidf, X_test_tfidf, y_train_tfidf, y_test_tfidf = train_test_split(tfidf_data,\n                                                                            data['sentiment'],\n                                                                            test_size = 0.2,\n                                                                            random_state = 0)","cd16c980":"X_train_tfidf2, X_test_tfidf2, y_train_tfidf2, y_test_tfidf2 = train_test_split(X_train_tfidf,\n                                                                            y_train_tfidf,\n                                                                            test_size = 0.2,\n                                                                            random_state = 0)","845a8103":"### Setting up the model class\nlr_model_tf_idf = LogisticRegression()\n\n## Training the model \nlr_model_tf_idf.fit(X_train_tfidf,y_train_tfidf)\n\n## Prediciting the results\ntest_pred_tfidf = lr_model_tf_idf.predict(X_test_tfidf2)\ntest_tfidf = lr_model_tf_idf.predict(X_test_tfidf)\n\n## Calculate key performance metrics\n\n\n# Print a classification report\nprint(classification_report(y_test_tfidf2,test_pred_tfidf))\nprint(classification_report(y_test_tfidf,test_tfidf))","84917660":"stacked_predictions = np.column_stack((test_pred_bow,test_pred_tfidf))\nstacked_test_predictions = np.column_stack((test_bow,test_tfidf))","9680d9c7":"meta_model= LogisticRegression()\nmeta_model.fit(stacked_predictions,y_test_bow2)\nfinal_predictions = meta_model.predict(stacked_test_predictions)","f6f6dc0b":"# Print a classification report\nprint(classification_report(y_test_bow,final_predictions))","7a197a55":"meta_model2=LogisticRegression()\nmeta_model2.fit(stacked_predictions,y_test_tfidf2)\nfinal_prediction2 = meta_model2.predict(stacked_test_predictions)","189fa6ed":"# Print a classification report\nprint(classification_report(y_test_tfidf,final_prediction2))","c51a2a5d":"# Results of Preprocessing data (Removing stopwords & Lemmatization)","f86e5740":"# Bag-of-words","f795fdf9":"# TF-IDF model","4e98b0a9":"# Building a machine learning model","acd5480d":"# Having a look at 1st ten reviews in the data","87b58758":"#  Importing Important Packages","54f31bb9":"# Converting all the texts back to sentences","742b12ed":"# Divide into training and test sets:","1c87ea48":"# Preprocessing Function","167f7794":"# Lemmatization Function","df6e722b":"# Applying logistic regression","642b54dd":"# Reading Data","997c3791":"# Making two copies of Reviews to edit","89772659":"# Stacking Classifier"}}