{"cell_type":{"11044247":"code","df742c50":"code","b78f3b73":"code","1022078a":"code","4922ec8c":"code","9eaa825c":"code","4636279a":"code","bda927c3":"code","96893620":"code","47d35b2c":"code","85abaa20":"code","17c2517a":"code","647f9f79":"code","5240527b":"code","bbc76bfc":"code","c850203e":"code","9faa7902":"code","e5c35672":"markdown","11af4ba0":"markdown","0e071816":"markdown","e636af19":"markdown","7aa09395":"markdown","a6c9f54d":"markdown"},"source":{"11044247":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as mp\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport statistics as stats\nimport math\nimport os\n\npd.set_option('display.max_rows', 20)\npd.set_option('display.max_columns', 50)\npd.set_option('display.width', 100)","df742c50":"def cleanabv(train):\n    #   Clean Abbreviations\n    train['ToLeft'] = train.PlayDirection == \"left\"\n    train['IsBallCarrier'] = train.NflId == train.NflIdRusher\n    train.loc[train.VisitorTeamAbbr == \"ARI\", 'VisitorTeamAbbr'] = \"ARZ\"\n    train.loc[train.HomeTeamAbbr == \"ARI\", 'HomeTeamAbbr'] = \"ARZ\"\n    train.loc[train.VisitorTeamAbbr == \"BAL\", 'VisitorTeamAbbr'] = \"BLT\"\n    train.loc[train.HomeTeamAbbr == \"BAL\", 'HomeTeamAbbr'] = \"BLT\"\n    train.loc[train.VisitorTeamAbbr == \"CLE\", 'VisitorTeamAbbr'] = \"CLV\"\n    train.loc[train.HomeTeamAbbr == \"CLE\", 'HomeTeamAbbr'] = \"CLV\"\n    train.loc[train.VisitorTeamAbbr == \"HOU\", 'VisitorTeamAbbr'] = \"HST\"\n    train.loc[train.HomeTeamAbbr == \"HOU\", 'HomeTeamAbbr'] = \"HST\"\n    train['Dir_std'] = np.mod(90 - train.Dir, 360)\n    train.loc[train.DisplayName == \"Bradley Sowell\", \"Position\"] = \"T\"\n    return train","b78f3b73":"def show_play(play_id, train):\n    df = train[train.PlayId == play_id]\n    fig, ax = create_football_field()\n    ax.scatter(df.Y, df.X, cmap='rainbow', c=~(df.Team == 'home'), s=100)\n    rusher_row = df[df.NflIdRusher == df.NflId]\n    ax.scatter(rusher_row.Y, rusher_row.X, color='black')\n    plt.title('Play # %i' %play_id, fontsize=20)\n    plt.legend()\n    plt.show()","1022078a":"def create_football_field(linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=50,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(6.33*2, 12*2)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n\n    rect = patches.Rectangle((0, 0), 53.3, 120, linewidth=0.1,\n                             edgecolor='r', facecolor='darkgreen', zorder=0,  alpha=0.5)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    # YardLines that span across field, correct\n\n    plt.plot([0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             [10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             color='white')\n\n    if fifty_is_los:\n        plt.plot([0, 53.3], [60, 60],  color='gold')\n        plt.text(50, 62, '<- Player Yardline at Snap', color='gold')\n\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 53.3, 10,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ez2 = patches.Rectangle((0, 110), 53.3, 10,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.ylim(0, 120)\n    plt.xlim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(5, x, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n            plt.text(53.3 - 5, x, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([0.4, 0.7], [x, x], color='white')\n        ax.plot([53.0, 52.5], [x, x],  color='white')\n        ax.plot([22.91, 23.57], [x, x],  color='white')\n        ax.plot([29.73, 30.39], [x, x],  color='white')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n                 color='yellow')\n    return fig, ax","4922ec8c":"train = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2020\/train.csv\", low_memory=False)\ntrain = cleanabv(train)\nuniqueplays = np.unique(train.loc[:,\"PlayId\"])\nuniqueteams = np.unique(train.loc[:,\"PossessionTeam\"])\n\n#train['Dir_rad'] = train.Dir * math.pi\/180.0","9eaa825c":"def getoline(play):\n    oline = play.loc[(play.loc[:,\"Position\"]==\"T\") | (play.loc[:,\"Position\"]==\"G\") | (play.loc[:,\"Position\"]==\"C\") | (play.loc[:,\"Position\"]==\"OT\") | (play.loc[:,\"Position\"]==\"OG\"),:]\n    #,:]\n\n    oline = oline.sort_values(by = 'Y')\n    return oline","4636279a":"def getolinesix(play):\n    oline = play.loc[(play.loc[:,\"Position\"]==\"T\") | (play.loc[:,\"Position\"]==\"G\") | (play.loc[:,\"Position\"]==\"C\") | (play.loc[:,\"Position\"]==\"OT\") | (play.loc[:,\"Position\"]==\"OG\"),:]\n    oline = oline.sort_values(by = 'Y')\n    oline = oline.reset_index()\n    firstoline = oline.loc[0,\"level_0\"]\n    lastoline = oline.loc[4,\"level_0\"]\n    onetwo = 0\n    if firstoline>10:\n        offense = play[11:22]\n        onetwo = 2\n    else:\n        offense = play[0:11]\n        onetwo = 1\n    offense = offense.sort_values(by = 'Y')\n    offense = offense.reset_index()\n    ox1 = offense.loc[offense.loc[:,\"level_0\"]==firstoline,:]\n    ox1 = ox1.index\n    ox5 = offense.loc[offense.loc[:,\"level_0\"]==lastoline,:]\n    ox5 = ox5.index\n    \n    if len(ox1) == 0:\n        ox1 = pd.Series([1])\n    \n    if len(ox5) == 0:\n        ox5 = pd.Series([10])\n    \n    lh = 0\n    li = -1\n    rh = 0\n    ri = -1\n    \n    for i in range(ox1[0]-1,-1,-1):\n        tempx = offense.loc[i,\"Y\"]\n        tempy = offense.loc[i,\"X\"]\n        oxx = offense.loc[ox1,\"Y\"]\n        oxy = offense.loc[ox1,\"X\"]\n        tempd = distance(tempx,oxx,tempy,oxy)\n        if tempd <= 4:\n            if offense.loc[i,\"Position\"]==\"TE\":\n                lh = 1\n                #li = offense.loc[i,\"index\"]\n                li = i\n                break\n        else:\n            lh = 0\n            li = -1\n    \n    \n    for i in range(ox5[0]+1,11,1):\n        tempx = offense.loc[i,\"Y\"]\n        tempy = offense.loc[i,\"X\"]\n        oxx = offense.loc[ox5,\"Y\"]\n        oxy = offense.loc[ox5,\"X\"]\n        tempd = distance(tempx,oxx,tempy,oxy)\n        if tempd <= 4:\n            if offense.loc[i,\"Position\"]==\"TE\":\n                rh = 1\n                #print(offense)\n                #ri = offense.loc[i,\"index\"]\n                #print(i)\n                ri = i\n                break\n        else:\n            rh = 0\n            ri = -1\n        \n    \n    play.reset_index()\n    play.sort_values(by = 'Y')\n\n    return oline,ri,rh,li,lh,offense","bda927c3":"def encodepos(play,uniqueteams):\n    possession = np.zeros(22)\n    for i in range(0,22):\n        for j in range(0,32):\n            if play.loc[i,\"PossessionTeam\"]==uniqueteams[j]:\n                possession[i]=j\n    \n    return possession\n        \n","96893620":"def encodefpos(play,uniqueteams):\n    fposition = np.zeros(22)\n    for i in range(0,22):\n        for j in range(0,32):\n            if play.loc[i,\"FieldPosition\"]==uniqueteams[j]:\n                fposition[i]=j\n    \n    return fposition","47d35b2c":"def changedirection(play,pos,fpos):\n    #ha = home\/away\n    ha = play.loc[play.loc[:,\"NflId\"]==play.loc[0,\"NflIdRusher\"],\"Team\"]\n    bc = np.where(play.loc[:,\"NflId\"]==play.loc[0,\"NflIdRusher\"])[0]\n    bcd = play.loc[bc, \"Dir\"]\n    bcy = play.loc[bc,\"X\"]\n    bcy = bcy.reset_index()\n    bcd = bcd.reset_index()\n    if bc > 10:\n        meandy = stats.mean(play.loc[11:,'X'])\n    else:\n        meandy = stats.mean(play.loc[0:10,'X'])\n    \n    postemp = pos[0]\n    fpostemp = fpos[0]\n    \n    if bcy.loc[0,\"X\"]>meandy:\n        play.loc[:,\"X\"] = 100 - play.loc[:,\"X\"] + 20\n        play.loc[bc, \"Dir\"] = 360 - bcd.loc[0, \"Dir\"]\n    else:\n        play.loc[:,\"X\"] = play.loc[:,\"X\"]\n        play.loc[:,\"Y\"] = 53.3 - play.loc[:,\"Y\"]\n        play.loc[bc, \"Dir\"] = 180 - bcd.loc[0, \"Dir\"]\n    \n    if postemp != fpostemp:\n        play.loc[:,\"YardLine\"] = 100 - play.loc[0,\"YardLine\"]\n    \n   \n    ydline =  play.loc[0,\"YardLine\"]\n    leftright = np.zeros(2)\n    bcdir = play.loc[bc,\"Dir\"].values[0]\n    if (((bcdir < 180) and (bcdir >= 90)) or ((bcdir >= 270) & (bcdir < 360))):\n        leftright[0] = 1\n    else:\n        leftright[1] = 1\n    \n    return play,ha,ydline,bc,leftright,bcdir\n    ","85abaa20":"def distance(x1,x2,y1,y2):\n    dist = math.sqrt((x1-x2)**2+(y1-y2)**2)\n    return dist","17c2517a":"def linear(x1,x2,y1,y2):\n    slope = (y1-y2)\/(x1-x2)\n    temp = slope*x1\n    b = y1-temp\n    return slope,b\n    ","647f9f79":"def hmengagedextra(play,ha,ydline,bc):\n    oline, ri, rh, li, lh, offense = getolinesix(play)\n    # print(play)\n    play = play.reset_index()\n\n    if rh == 1:\n        rol = offense.loc[[ri]]\n        oline = pd.concat([oline, rol])\n\n    else:\n        temp = oline.loc[[4]]\n        temp.loc[4, \"Y\"] = oline.loc[4, \"Y\"] + 2\n        oline = pd.concat([oline, temp])\n\n    if lh == 1:\n        lol = offense.loc[[li]]\n        oline = pd.concat([lol, oline])\n\n    else:\n        temp = oline.loc[[0]]\n        temp.loc[0, \"Y\"] = temp.loc[0, \"Y\"] - 2\n        oline = pd.concat([temp, oline])\n\n    olx = oline.loc[:, \"Y\"]\n    olx = olx.reset_index()\n    oly = oline.loc[:, \"X\"]\n    oly = oly.reset_index()\n\n    bcy = play.loc[bc, \"X\"]\n    bcx = play.loc[bc, \"Y\"]\n    bcy = bcy.reset_index()\n    bcx = bcx.reset_index()\n    if ha.all() == \"away\":\n        defense = play.loc[11:21, :]\n    else:\n        defense = play.loc[0:10, :]\n\n    defense = defense.drop(columns=\"level_0\")\n    defense = defense.reset_index()\n\n    olnum = np.zeros(6)\n    olnumeng = np.zeros(6)\n    numdefbf = np.zeros(6)\n    holesize = np.zeros(6)\n    holeslope = np.zeros(6)\n    bchole = np.zeros(8)\n    push = np.zeros(6)\n    boxsafety = np.zeros(1)\n\n    olxt = np.zeros((2, 6))\n\n    temp = olx.loc[0:5, \"Y\"]\n    temp = temp.to_numpy()\n    olxt[0, 0:6] = temp\n    temp = olx.loc[1:6, \"Y\"]\n    temp = temp.to_numpy()\n    olxt[1, 0:6] = temp\n\n    olyt = np.zeros((2, 6))\n\n    temp = oly.loc[0:5, \"X\"]\n    temp = temp.to_numpy()\n    olyt[0, 0:6] = temp\n    temp = oly.loc[1:6, \"X\"]\n    temp = temp.to_numpy()\n    olyt[1, 0:6] = temp\n\n    dx = defense.loc[:, \"Y\"]\n    dx = dx.to_numpy()\n    dy = defense.loc[:, \"X\"]\n    dy = dy.to_numpy()\n    iby = np.where((dy < ydline + 15) & (dy > bcy.loc[0, \"X\"]), 1, 0)\n    ibxt = np.where((dx > olxt[0, 0]) & (dx <= olxt[1, 5]), 1, 0)\n    safeties = np.where((dy < ydline + 35) & (dy > ydline + 15), 1, 0)\n    safetemp = np.sum([ibxt, safeties], axis=0)\n    safetemp = np.where(safetemp == 2, 1, 0)\n    boxsafety[0] = boxsafety[0] + np.sum(safetemp)\n\n    for i in range(0, 6):\n        if i == 0:\n            if bcx.loc[0, \"Y\"] < olxt[0, i]:\n                bchole[0] = bchole[0]+1\n        if i == 5:\n            if bcx.loc[0, \"Y\"] > olxt[1, i]:\n                bchole[7] = bchole[7]+1\n\n        if (bcx.loc[0, \"Y\"] > olxt[0, i]) & (bcx.loc[0, \"Y\"] <= olxt[1, i]):\n            bchole[i+1] = bchole[i+1]+1\n\n        ibx = np.where((dx > olxt[0, i]) & (dx <= olxt[1, i]), 1, 0)\n            \n        dist = np.vectorize(distance)\n        dist1 = dist(olxt[0, i], dx, olyt[0, i], dy)\n        dist2 = dist(olxt[1, i], dx, olyt[1, i], dy)\n\n        slope, b = linear(olxt[0, i], olxt[1, i], olyt[0, i], olyt[1, i])\n        tempy = np.multiply(dx, slope)\n        tempy += b\n        bfline = np.where((dy <= tempy), 1, 0)\n        engcomp = np.where((dist1 <= 1.5) | (dist2 <= 1.5), 1, 0)\n        \n        # Push\n        if sum(ibx)==0:\n            minp = ydline+10\n        else:\n            minp = min(dy[ibx==1])\n        push[i] = minp - (ydline+10)\n        \n        # Olnum\n        olnum[i] = olnum[i] + np.sum(np.where(np.sum([ibx, iby], axis=0) == 2, 1, 0))\n\n        # olnumeng\n        olnumeng[i] = olnumeng[i] + np.sum(np.where(np.sum([ibx, iby, engcomp], axis=0) == 3, 1, 0))\n\n        # Backfield\n        numdefbf[i] = numdefbf[i] + np.sum(np.where(np.sum([bfline, ibx, iby], axis=0) == 3, 1, 0))\n        \n        # Holesize\n        holesize[i] = distance(olxt[0,i],olxt[1,i],olyt[0,i],olyt[1,i])\n        \n        # Holeslope\n        slope,b = linear(olxt[0,i],olxt[1,i],olyt[0,i],olyt[1,i])\n        holeslope[i] = slope\n    return olnum, olnumeng, numdefbf, boxsafety, bchole, oline, holesize, holeslope, push","5240527b":"def get_dx_dy(radian_angle, dist):\n    dx = dist * math.cos(radian_angle)\n    dy = dist * math.sin(radian_angle)\n    return dx, dy","bbc76bfc":"def show_box(play_id, train, oline, ydline):\n    df = train[train.PlayId == play_id]\n    fig, ax = create_football_field()\n    ax.scatter(df.Y, df.X, cmap='rainbow', c=~(df.Team == 'home'), s=100)\n    rusher_row = df[df.NflIdRusher == df.NflId]\n    ax.scatter(rusher_row.Y, rusher_row.X, color='black')\n    rush = np.full((7,1),rusher_row.X)\n    ydl = np.full((7,1),ydline+15)\n    ol1 = np.full((7,1),oline.Y[0])\n    for i in range(0,7):\n        ol = np.full((2,1),oline.Y[i])\n        temp = np.full((2,1),rusher_row.X)\n        temp[0,0] = ydline+15\n        ax.plot(ol,temp,color='black')\n        if i != 6:\n            ax.plot([oline.Y[i],oline.Y[i+1]],[oline.X[i],oline.X[i+1]],color='black')\n    ax.plot([oline.Y[0],oline.Y[0]],[ydline+15,ydline+35],color='black')\n    ax.plot([oline.Y[6],oline.Y[6]],[ydline+15,ydline+35],color='black')\n    ax.plot([oline.Y[0],oline.Y[6]],[ydline+35,ydline+35],color='black')\n    \n    x = rusher_row[\"X\"].values[0]\n    y = rusher_row[\"Y\"].values[0]\n    \n    rusher_dir = rusher_row[\"Dir_rad\"].values[0]\n    rusher_speed = rusher_row[\"S\"].values[0]\n    dx, dy = get_dx_dy(rusher_dir, rusher_speed)\n    ax.plot([y,dy+y],[x,dx+x],color='black')\n    #ax.arrow(x, y, dx, dy, length_includes_head=True, width=0.3, color='black')\n    \n    ax.plot(oline.Y,rush,color='black')\n    ax.plot(oline.Y,ydl,color='black')\n    plt.title('Play # %i' %play_id, fontsize=20)\n    plt.legend()\n    plt.show()","c850203e":"play = train.loc[train.loc[:,\"PlayId\"]==uniqueplays[500],:]\nplay = play.reset_index()\nplayid = play.PlayId[0]\npos = encodepos(play,uniqueteams)\nfpos = encodefpos(play,uniqueteams)\nplay,ha,ydline,bc,leftright,bcdir = changedirection(play,pos,fpos)\nplay['Dir_rad'] = np.mod(90 - play.Dir, 360) * math.pi\/180.0\nolnum,olnumeng,numdefbf,boxsafety,bchole,oline,holesize,holeslope,push = hmengagedextra(play,ha,ydline,bc)\n#oline = oline.reset_index()\nprint(\"--------------------\")\nprint(olnum)\nprint(olnumeng)\nprint(numdefbf)\nprint(bchole)\nprint(boxsafety)\nprint(leftright)\nprint(holesize)\nprint(holeslope)\nprint(push)\nprint(bcdir)\noline = oline.drop(columns=\"level_0\")\noline = oline.reset_index()\nshow_box(playid,play,oline,ydline)\n#play.head()","9faa7902":"playsize = uniqueplays.shape[0]\n\nolnums = np.zeros((playsize,6))\nolnumseng = np.zeros((playsize,6))\nnumdefsbf = np.zeros((playsize,6))\nboxsafeties = np.zeros((playsize,1))\nbcshole = np.zeros((playsize,8))\nleftsrights = np.zeros((playsize,2))\nbcdirs = np.zeros((playsize,1))\nholes_size = np.zeros((playsize,6))\nholes_slope = np.zeros((playsize,6))\npushes = np.zeros((playsize,6))\nydlines = np.zeros((playsize,1))\n\n\nfor i in range(0,uniqueplays.shape[0]):\n    play = train.loc[train.loc[:,\"PlayId\"]==uniqueplays[i],:]\n    play = play.reset_index()\n    playid = play.PlayId[0]\n    pos = encodepos(play,uniqueteams)\n    fpos = encodefpos(play,uniqueteams)\n    play,ha,ydline,bc,leftright,bcdir = changedirection(play,pos,fpos)\n    olnum,olnumeng,numdefbf,boxsafety,bchole,oline,holesize,holeslope,push = hmengagedextra(play,ha,ydline,bc)\n    \n    olnums[i,:] = olnum\n    olnumseng[i,:] = olnumeng\n    numdefsbf[i,:] = numdefbf\n    boxsafeties[i,:] = boxsafety\n    bcshole[i,:] = bchole\n    leftsrights[i,:] = leftright\n    bcdirs[i,:] = bcdir\n    holes_size[i,:] = holesize\n    holes_slope[i,:] = holeslope\n    pushes[i,:] = push\n    ydlines[i,:] = ydline+10\n\ntrain_holefeatures = np.concatenate((olnums,olnumseng,numdefsbf,boxsafeties,bcshole,leftsrights,bcdirs,holes_size,holes_slope,pushes,ydlines),axis=1)\ntrain_holefeatures = pd.DataFrame(train_holefeatures)\ntrain_holefeatures.to_csv('train_holefeatures.csv')","e5c35672":"This is the final version of a series of notebooks that I had once posted but have now made private. \nThese features exist to provide context to what is happening to the area around the offensive line, which is obviously important.\n\n\nThere are four holes between the five offensive, I also added two holes, one for each side. Each play has been standardized such that\neach offensive team faces vertically up and as each offensive team gets closer to the endzone in which they are trying to score,\nthe yardline decreases. So, say if the Bengals have possession on the one yard line on the farther side of the field, the yardline is '99'.\nIf they have possession on the one yard line on the side of the field in which they are trying to score, the yardline is '1'.\n\nThe features include:\n* olnum: number of defenders in each hole, which extends vertically from the y value of the ball carrier to the yardline + 5 yards.\n* olnumeng: number of defenders engaged (meaning that the ol has hands on them, in each hole), which is defined by if an ol is within 2 yards.\n* numdefbf: number of defenders in the backfield (for each hole), which is defined if a defender is positioned between two ol but has crossed the linear line that connects the two ol.\n* bchole: this returns what hole the bc is currently line up behind noted as a 1 or 0 for each hole.\n* boxsafety: returns the number of defensive players that are lined up between the ol but are ten yards off the line of scrimmage.\n* leftright: returns 1 for first value if ballcarrier is rushing left or 1 for second value if the ball carrier is rushing right.\n* holesize: the euclidean distance between each offensive lineman.\n* holeslope: the slope of each hole.\n* push: using the yardline as y = 0, this returns the relative distance of the defender in each hole that has moved furthest into the backfield.\n* bcdir: the ball carrier's angle.\n\nIf you use these features, please cite or if you think there are others that I should provide, ask. Thanks.","11af4ba0":"cleanabv() fixes some of the issues found in the training set. I fixed a player error where Bradley Sowell was listed as a TE. I moved him to tackle even though he played both in the NFL.","0e071816":"create_football_field() creates the football field for visual purposes. I took this from CPMP's notebook.","e636af19":"show_play() shows the players on the field and show_box() shows the players on the field with the box placed upon each hole. The ballcarrier has a black dot.","7aa09395":"These are the import statements and options used in this notebook.","a6c9f54d":"Loading train.csv and cleaning it. We return a list of uniqueplays and uniqueteams which will be further used for indexing purposes."}}