{"cell_type":{"e4035c02":"code","325784fa":"code","16d08be4":"code","6e13e98e":"code","db6827da":"code","f4a0dfa6":"code","4c65dbd0":"code","60743da7":"code","8c699252":"code","78e40302":"code","f8bdfb33":"code","a003f336":"code","a0353281":"code","bb476fd0":"code","6b3d27c1":"code","2720c71c":"code","f60a0de3":"code","4a58ec30":"code","b489f629":"code","d6f34752":"code","c2168763":"code","b2f2e37a":"code","00c26c59":"code","76881bc9":"code","45f8f07d":"code","1987ff3f":"code","639549f2":"code","58898210":"code","c7fba346":"code","811b675f":"code","c240b048":"code","fbcd3d7e":"code","9e68cbb7":"code","2eb92f9e":"code","fa4a5888":"code","84fda816":"code","20717f87":"code","d79e8ddb":"code","c47af2dd":"code","a1ce9a0b":"code","7e0491e8":"code","6f91114c":"code","4496fd82":"code","e444f94a":"markdown","e940bfcb":"markdown","447f79df":"markdown","79e0fccf":"markdown","0319cd23":"markdown","fafa9132":"markdown","55ffaf81":"markdown","99b12de2":"markdown","eab7d12e":"markdown","68db5a55":"markdown","483d35e6":"markdown","0b6bac77":"markdown","6dd9f945":"markdown","c078b1b7":"markdown","92e3b0e2":"markdown","f1bcd852":"markdown","eb49a60b":"markdown","3529f552":"markdown","4aedd7bc":"markdown","6725d2bc":"markdown","0cb66ec8":"markdown","5f8f85f3":"markdown","64bb551f":"markdown","605a4d79":"markdown","f0e54981":"markdown","96b85d32":"markdown","09f0d941":"markdown","573fcd6b":"markdown","98fa9d2b":"markdown","aa47f383":"markdown","732f68e0":"markdown","6be97032":"markdown","ec710952":"markdown","4acc782b":"markdown","0f14b558":"markdown","dc99d40b":"markdown","4f07018c":"markdown","b9940e72":"markdown","2d8f30ff":"markdown","5990932a":"markdown"},"source":{"e4035c02":"# to hide warenings (after finishing the project for neat output)\nimport warnings\nwarnings.filterwarnings('ignore')","325784fa":"from sklearn.datasets import load_files       \nfrom keras.utils import np_utils\nimport numpy as np\nfrom glob import glob\n\n# define function to load train, test, and validation datasets\ndef load_dataset(path):\n    data = load_files(path)\n    dog_files = np.array(data['filenames'])\n    dog_targets = np_utils.to_categorical(np.array(data['target']), 133)\n    return dog_files, dog_targets\n\n# load train, test, and validation datasets\ntrain_files, train_targets = load_dataset('..\/input\/dogimages\/dogImages\/train')\nvalid_files, valid_targets = load_dataset('..\/input\/dogimages\/dogImages\/valid')\ntest_files, test_targets = load_dataset('..\/input\/dogimages\/dogImages\/test')\n\n# load list of dog names\ndog_names = [item[20:-1] for item in sorted(glob(\"dogImages\/train\/*\/\"))]\n\n# print statistics about the dataset\nprint('There are %d total dog categories.' % len(dog_names))\nprint('There are %s total dog images.\\n' % len(np.hstack([train_files, valid_files, test_files])))\nprint('There are %d training dog images.' % len(train_files))\nprint('There are %d validation dog images.' % len(valid_files))\nprint('There are %d test dog images.'% len(test_files))","16d08be4":"import random\nrandom.seed(8675309)\n\n# load filenames in shuffled human dataset\nhuman_files = np.array(glob(\"..\/input\/dogimages\/lfw\/*\/*\"))\nrandom.shuffle(human_files)\n\n# print statistics about the dataset\nprint('There are %d total human images.' % len(human_files))","6e13e98e":"import cv2                \nimport matplotlib.pyplot as plt                        \n%matplotlib inline                               \n\n# extract pre-trained face detector\nface_cascade = cv2.CascadeClassifier('..\/input\/haarcascades\/haarcascade_frontalface_alt.xml')\n\n# load color (BGR) image\nimg = cv2.imread(human_files[3])\n# convert BGR image to grayscale\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n# find faces in image\nfaces = face_cascade.detectMultiScale(gray)\n\n# print number of faces detected in the image\nprint('Number of faces detected:', len(faces))\n\n# get bounding box for each detected face\nfor (x,y,w,h) in faces:\n    # add bounding box to color image\n    cv2.rectangle(img,(x,y),(x+w,y+h),(0,0,255),2)\n    \n# convert BGR image to RGB for plotting\ncv_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n# display the image, along with bounding box\nplt.imshow(cv_rgb)\nplt.show()","db6827da":"# returns \"True\" if face is detected in image stored at img_path\ndef face_detector(img_path):\n    img = cv2.imread(img_path)\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    faces = face_cascade.detectMultiScale(gray)\n    return len(faces) > 0","f4a0dfa6":"human_files_short = human_files[:100]\ndog_files_short = train_files[:100]\n\nVectorizefaces = np.vectorize(face_detector)\nhuman_faces = Vectorizefaces(human_files_short)\ndog_faces = Vectorizefaces(dog_files_short)\n\n# printing the percentage of detected faces in the sample short datasets\nprint('------------------ Test of performance ------------------------\\n' )\nprint('{:.2f}% of short human dataset are detected as human faces.'.format((sum(human_faces)\/len(human_faces))*100))\nprint('{:.2f}% of short dog dataset are detected as human faces.'.format((sum(dog_faces)\/len(dog_faces))*100))","4c65dbd0":"\n# pre-trained  LBP  \n\nlbp_FaceCascade = cv2.CascadeClassifier('..\/input\/lbpcascade-frontalface\/lbpcascade_frontalface.xml')\n\n# Defining a function to detect face using LBP (Local Binary Patterns Classifier)\n# returns \"True\" if face is detected in image stored at img_path\n\ndef LBP(path_to_image):\n    img = cv2.imread(path_to_image)\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    faces = lbp_FaceCascade.detectMultiScale(gray)\n    return len(faces) > 0","60743da7":"# Vectorize the detection function\n\nVectorizefaces2 = np.vectorize(LBP)","8c699252":"# LBP \nimg2 = cv2.imread(human_files[13])\ngray2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)\nfaces2 = lbp_FaceCascade.detectMultiScale(gray2)\nprint('Number of faces detected:', len(faces))\nfor (x,y,w,h) in faces2:\n    cv2.rectangle(img2,(x,y),(x+w,y+h),(0,0,255),2)\ncv_rgb2 = cv2.cvtColor(img2, cv2.COLOR_BGR2RGB)\nplt.imshow(cv_rgb2)\nplt.show()","78e40302":"# Test LBP\n\nhuman_faces2 = Vectorizefaces2(human_files_short)\ndog_faces2 = Vectorizefaces2(dog_files_short)\n\n# printing the percentage of detected faces in the sample short datasets\n\nprint('------------------ Alternative Algorithm (LBP) Test of performance ------------------------\\n' )\nprint('{:.2f}% of short human dataset are detected as human faces.'.format((sum(human_faces2)\/len(human_faces2))*100))\nprint('{:.2f}% of short dog dataset are detected as human faces.'.format((sum(dog_faces2)\/len(dog_faces2))*100))\n","f8bdfb33":"from keras.applications.resnet50 import ResNet50\n\n# define ResNet50 model\nResNet50_model = ResNet50(weights='imagenet')","a003f336":"from keras.preprocessing import image                  \nfrom tqdm import tqdm\n\ndef path_to_tensor(img_path):\n    # loads RGB image as PIL.Image.Image type\n    img = image.load_img(img_path, target_size=(224, 224))\n    # convert PIL.Image.Image type to 3D tensor with shape (224, 224, 3)\n    x = image.img_to_array(img)\n    # convert 3D tensor to 4D tensor with shape (1, 224, 224, 3) and return 4D tensor\n    return np.expand_dims(x, axis=0)\n\ndef paths_to_tensor(img_paths):\n    list_of_tensors = [path_to_tensor(img_path) for img_path in tqdm(img_paths)]\n    return np.vstack(list_of_tensors)","a0353281":"from keras.applications.resnet50 import preprocess_input, decode_predictions\n\ndef ResNet50_predict_labels(img_path):\n    # returns prediction vector for image located at img_path\n    img = preprocess_input(path_to_tensor(img_path))\n    return np.argmax(ResNet50_model.predict(img))","bb476fd0":"### returns \"True\" if a dog is detected in the image stored at img_path\ndef dog_detector(img_path):\n    prediction = ResNet50_predict_labels(img_path)\n    return ((prediction <= 268) & (prediction >= 151)) ","6b3d27c1":"### Test the performance of the dog_detector function\n### on the images in human_files_short and dog_files_short.\n\n\n# Vectorize ResNet50 detection function\n\nVectorizefaces3 = np.vectorize(dog_detector)\n\n# Test the ResNet50 face detector   \n\nhuman_faces3 = Vectorizefaces3(human_files_short)\ndog_faces3 = Vectorizefaces3(dog_files_short)\n\n# printing the percentage of detected faces in the sample short datasets\n\nprint('------------------ ResNet50 Test of performance ------------------------\\n' )\nprint('{:.2f}% of short human dataset are detected as faces.'.format((sum(human_faces3)\/len(human_faces3))*100))\nprint('{:.2f}% of short dog dataset are detected as faces.'.format((sum(dog_faces3)\/len(dog_faces3))*100))\n\n","2720c71c":"from PIL import ImageFile                            \nImageFile.LOAD_TRUNCATED_IMAGES = True                 \n\n# pre-process the data for Keras\ntrain_tensors = paths_to_tensor(train_files).astype('float32')\/255\nvalid_tensors = paths_to_tensor(valid_files).astype('float32')\/255\ntest_tensors = paths_to_tensor(test_files).astype('float32')\/255","f60a0de3":"print('------------------ Tesnors dimensions ------------------------\\n' )\nprint (\"Train Tensors Size : \")\nprint (np.shape(train_tensors))\nprint (\"Valid Tensors Size : \")\nprint (np.shape(valid_tensors))\nprint (\"Test Tensors Size : \")\nprint (np.shape(test_tensors))","4a58ec30":"from keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D\nfrom keras.layers import Dropout, Flatten, Dense\nfrom keras.models import Sequential\n\nmodel = Sequential()\n\n### Define your architecture.\n\nmodel.add(Conv2D(filters=16, kernel_size=2, padding='same', activation='relu',input_shape=(train_tensors.shape[1:]) ))\nmodel.add(MaxPooling2D(pool_size=3))\nmodel.add(Conv2D(filters=32, kernel_size=2, padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=64, kernel_size=2, padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=128, kernel_size=2, padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(GlobalAveragePooling2D(data_format=None))\nmodel.add(Dense(133, activation='softmax'))\n\nmodel.summary()","b489f629":"model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])","d6f34752":"from keras.callbacks import ModelCheckpoint  \n\n### specify the number of epochs that you would like to use to train the model.\n\nepochs = 50\n\n\n\ncheckpointer = ModelCheckpoint(filepath='..\/input\/savedmodel\/saved_models\/weights.best.from_scratch.hdf5', \n                               verbose=1, save_best_only=True)\n\nmodel.fit(train_tensors, train_targets, \n          validation_data=(valid_tensors, valid_targets),\n          epochs=epochs, batch_size=20, callbacks=[checkpointer], verbose=1)","c2168763":"model.load_weights('..\/input\/savedmodel\/saved_models\/weights.best.from_scratch.hdf5')","b2f2e37a":"# get index of predicted dog breed for each image in test set\ndog_breed_predictions = [np.argmax(model.predict(np.expand_dims(tensor, axis=0))) for tensor in test_tensors]\n\n# report test accuracy\ntest_accuracy = 100*np.sum(np.array(dog_breed_predictions)==np.argmax(test_targets, axis=1))\/len(dog_breed_predictions)\nprint('Test accuracy: %.4f%%' % test_accuracy)","00c26c59":"bottleneck_features = np.load('..\/input\/bottleneck-features\/DogVGG16Data.npz')\ntrain_VGG16 = bottleneck_features['train']\nvalid_VGG16 = bottleneck_features['valid']\ntest_VGG16 = bottleneck_features['test']","76881bc9":"VGG16_model = Sequential()\nVGG16_model.add(GlobalAveragePooling2D(input_shape=train_VGG16.shape[1:]))\nVGG16_model.add(Dense(133, activation='softmax'))\n\nVGG16_model.summary()","45f8f07d":"VGG16_model.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])","1987ff3f":"checkpointer = ModelCheckpoint(filepath='..\/input\/savedmodel\/weights.best.VGG16.hdf5', \n                               verbose=1, save_best_only=True)\n\nVGG16_model.fit(train_VGG16, train_targets, \n          validation_data=(valid_VGG16, valid_targets),\n          epochs=20, batch_size=20, callbacks=[checkpointer], verbose=1)","639549f2":"VGG16_model.load_weights('..\/input\/savedmodel\/weights.best.VGG16.hdf5')","58898210":"# get index of predicted dog breed for each image in test set\nVGG16_predictions = [np.argmax(VGG16_model.predict(np.expand_dims(feature, axis=0))) for feature in test_VGG16]\n\n# report test accuracy\ntest_accuracy = 100*np.sum(np.array(VGG16_predictions)==np.argmax(test_targets, axis=1))\/len(VGG16_predictions)\nprint('Test accuracy: %.4f%%' % test_accuracy)","c7fba346":"from extract_bottleneck_features import *\n\ndef VGG16_predict_breed(img_path):\n    # extract bottleneck features\n    bottleneck_feature = extract_VGG16(path_to_tensor(img_path))\n    # obtain predicted vector\n    predicted_vector = VGG16_model.predict(bottleneck_feature)\n    # return dog breed that is predicted by the model\n    return dog_names[np.argmax(predicted_vector)]","811b675f":"### Obtain bottleneck features from another pre-trained CNN.\nfrom sklearn.datasets import load_files       \nfrom keras.utils import np_utils\nimport numpy as np\nfrom glob import glob\n\ndef get_bottleneck_features(path):\n    bottleneck_features = np.load(path)\n    train = bottleneck_features['train']\n    valid = bottleneck_features['valid']\n    test = bottleneck_features['test']\n    return train, valid, test\n\ntrain_Xception, valid_Xception, test_Xception = get_bottleneck_features('..\/input\/bottleneck-features\/DogXceptionData.npz')\n","c240b048":"### Define your architecture.\nfrom keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D\nfrom keras.layers import Dropout, Flatten, Dense\nfrom keras.models import Sequential\n\nXception_model = Sequential()\nXception_model.add(GlobalAveragePooling2D(input_shape=(train_Xception.shape[1:])))\nXception_model.add(Dense(133, activation='softmax'))\nXception_model.summary()","fbcd3d7e":"### Compile the model.\nXception_model.compile(loss='categorical_crossentropy', optimizer='rmsprop')\n","9e68cbb7":"### Train the model.\nfrom keras.callbacks import ModelCheckpoint  \n\ncheckpointer = ModelCheckpoint(filepath='..\/input\/savedmodel\/weights.best.Xception.hdf5', \n                               verbose=1, save_best_only=True)\nXception_model.fit(train_Xception, train_targets, \n          validation_data=(valid_Xception, valid_targets),\n          epochs=20, batch_size=20, callbacks=[checkpointer], verbose=1)\n","2eb92f9e":"### Load the model weights with the best validation loss.\nXception_model.load_weights('..\/input\/savedmodel\/weights.best.Xception.hdf5')\n","fa4a5888":"### Calculate classification accuracy on the test dataset.\n# get index of predicted dog breed for each image in test set\n\ndef test_model(model, test_tensors, test_targets, name):\n    # get index of predicted dog breed for each image in test set\n    predictions = [np.argmax(model.predict(np.expand_dims(tensor, axis=0))) for tensor in test_tensors]\n\n    # report test accuracy\n    test_accuracy = 100*np.sum(np.array(predictions)==np.argmax(test_targets, axis=1))\/len(predictions)\n    print('Test accuracy {}: {}%'.format(name, round(test_accuracy, 4)))\n    \ntest_model(Xception_model,test_Xception, test_targets, 'Xception')\n","84fda816":"from extract_bottleneck_features import *\n\ndef Xception_prediction_breed(img_path):\n    # extract bottleneck features\n    bottleneck_feature = extract_Xception(path_to_tensor(img_path))\n    # obtain predicted vector\n    predicted_vector = Xception_model.predict(bottleneck_feature)\n    # return dog breed that is predicted by the model\n    return dog_names[np.argmax(predicted_vector)]","20717f87":"import random\nfrom keras.preprocessing import image                  \nfrom os import walk,listdir\nfrom os.path import isfile, join\nimport numpy as np\nimport cv2\n\ndef show_image(path):\n    img = image.load_img(path, target_size=(224, 224))\n    img = image.img_to_array(img)\n    plt.imshow(img\/255)\n    plt.show()\n    ","d79e8ddb":"def DogBreed(img_path):\n    show_image(img_path)\n    breed = Xception_prediction_breed(img_path)\n    if dog_detector(img_path):\n        print(\"WoW ! There is a dog , and its breed is  {}\\n\".format(breed))\n    elif face_detector(img_path):\n        print(\"Oh, That's a human there !he looks like  a {}\\n\".format(breed))\n    else:\n        print(\"The image contains neither human nor dog.\")","c47af2dd":"DogBreed('..\/input\/extraimages\/extraImages\/YosriNegm.jpg')","a1ce9a0b":"DogBreed('..\/input\/extraimages\/extraImages\/American_water_spaniel_00648.jpg')","7e0491e8":"DogBreed('..\/input\/extraimages\/extraImages\/Curly-coated_retriever_03896.jpg')","6f91114c":"DogBreed('..\/input\/extraimages\/extraImages\/Labrador_retriever_06449.jpg')","4496fd82":"DogBreed('..\/input\/extraimages\/extraImages\/Welsh_springer_spaniel_08203.jpg')","e444f94a":"This algorithmic choice necessitates that we communicate to the user that we accept human images only when they provide a clear view of a face (otherwise, we risk having unneccessarily frustrated users!). We may ask, is this a reasonable expectation to pose on the user? If not, can we think of a way to detect humans in images that does not necessitate an image with a clearly presented face?\n\nand the answer to this could be as follows:-\n\nFrom the above results, it looks like there is <b>imprefect<\/b> performance (12 % in dogs sample are detected wrongly as human) \nAnd In my opinion,<b>we should not ask users in real-life applications to provide images of clear view of the faces<\/b>( maybe we could make hint for him for that but not force him to do).However,<b>we couldn't blame on the system<\/b> in this case but in our pervious using of OpenCV (HAAR Cascades) for face detection, I think that \nthe algorithm works in <b>ideal situations <\/b>of clear images and well prepared photos(since Haar features are good at detecting frontal faces and not so good for detecting profile faces).\nto solve this issue we could build the face detection algorithm using Convolutional Neural Networks (<b>CNN<\/b>),then train it well over large volume of different images to gain acceptable high performance and this method will be cost time and hardware . So, I suggest to contine use OpenCV Haar Cascades methods for simplicity and its performance is some how could be accepted and it is most common one to be used.<br>\nBelow I've tried to use LBP (Local Binary Patterns Classifier) for face detection ,it is <b>faster<\/b> than Haar Cascades but <b>less accurate<\/b>.","e940bfcb":"### Model Architecture\n\nHere I will Create a CNN to classify dog breed.  At the end of our code cell block, I will summarize the layers of our model by executing the line:\n    \n        <our model's name>.summary()\n   \nThe Setps for building the proposed CNN architecture:-\n- I started to <b>build the CNN model from scratch<\/b> but it wasn't optimal in accuraccy and it was time consuming.\n- Then I applied <b>transfer learning<\/b>  by first <b>Trying VGG first <\/b> which gave me moderate accuracy.\n  and then I implemented transfer learning using <b>ResNet-50<\/b> and tunned it utill reaching a good acceptible accuracy by\n  finding <b>Bottleneck Features<\/b> , adding extra layers ( e.g. global pooling and droput ) and adding dense layer with  sofftmax activation function.\n- Compiling the model \n- Training the model\n- Saving the model of the best validation loss.\n- Testing the model. \n<br>\nI think the architecture is suitable for the current problem after tuning the model towards a learning transfer model and do little bit modification to get best results.","447f79df":"### Test the Model\n\nHere I will try out our model on the test dataset of dog images. Ensuring that our test accuracy is greater than 60%.","79e0fccf":"### Compile the Model","0319cd23":"---\n<a id='step1'><\/a>\n## Step 1: Detecting Humans\n\nWe use OpenCV's implementation of [Haar feature-based cascade classifiers](http:\/\/docs.opencv.org\/trunk\/d7\/d8b\/tutorial_py_face_detection.html) to detect human faces in images.  OpenCV provides many pre-trained face detectors, stored as XML files on [github](https:\/\/github.com\/opencv\/opencv\/tree\/master\/data\/haarcascades).  We have downloaded one of these detectors and stored it in the `haarcascades` directory.\n\nIn the next code cell, we demonstrate how to use this detector to find human faces in a sample image.","fafa9132":"---\n<a id='step3'><\/a>\n## Step 3: Creating a CNN to Classify Dog Breeds (from Scratch)\n\nNow that we have functions for detecting humans and dogs in images, we need a way to predict breed from images.  In this step, we will create a CNN that classifies dog breeds.  we must create our CNN _from scratch_ (so, you can't use transfer learning _yet_!), and you must attain a test accuracy of at least 1%.  In Step 5 of this project, we will have the opportunity to use transfer learning to create a CNN that attains greatly improved accuracy.\n\nBe careful with adding too many trainable layers!  More parameters means longer training, which means we are more likely to need a GPU to accelerate the training process.  Thankfully, Keras provides a handy estimate of the time that each epoch is likely to take; you can extrapolate this estimate to figure out how long it will take for our algorithm to train. \n\nWe mention that the task of assigning breed to dogs from images is considered exceptionally challenging.  To see why, consider that *even a human* would have great difficulty in distinguishing between a Brittany and a Welsh Springer Spaniel.  \n\nBrittany | Welsh Springer Spaniel\n- | - \n<img src=\"images\/Brittany_02625.jpg\" width=\"100\"> | <img src=\"images\/Welsh_springer_spaniel_08203.jpg\" width=\"200\">\n\nIt is not difficult to find other dog breed pairs with minimal inter-class variation (for instance, Curly-Coated Retrievers and American Water Spaniels).  \n\nCurly-Coated Retriever | American Water Spaniel\n- | -\n<img src=\"images\/Curly-coated_retriever_03896.jpg\" width=\"200\"> | <img src=\"images\/American_water_spaniel_00648.jpg\" width=\"200\">\n\n\nLikewise, recall that labradors come in yellow, chocolate, and black.  Your vision-based algorithm will have to conquer this high intra-class variation to determine how to classify all of these different shades as the same breed.  \n\nYellow Labrador | Chocolate Labrador | Black Labrador\n- | -\n<img src=\"images\/Labrador_retriever_06457.jpg\" width=\"150\"> | <img src=\"images\/Labrador_retriever_06455.jpg\" width=\"240\"> | <img src=\"images\/Labrador_retriever_06449.jpg\" width=\"220\">\n\nWe also mention that random chance presents an exceptionally low bar: setting aside the fact that the classes are slightly imabalanced, a random guess will provide a correct answer roughly 1 in 133 times, which corresponds to an accuracy of less than 1%.  \n\nRemember that the practice is far ahead of the theory in deep learning.  it all depends on Experimenting with many different architectures, and trust our intuition.\n\n### Pre-process the Data\n\nWe rescale the images by dividing every pixel in every image by 255.","55ffaf81":"### Assess the Human Face Detector\n\nThe code cell below to test the performance of the `face_detector` function and give answer to the following:-  \n- What percentage of the first 100 images in `human_files` have a detected human face?  \n- What percentage of the first 100 images in `dog_files` have a detected human face? \n\nIdeally, we would like 100% of human images with a detected face and 0% of dog images with a detected face.  You will see that our algorithm falls short of this goal, but still gives acceptable performance.  We extract the file paths for the first 100 images from each of the datasets and store them in the numpy arrays `human_files_short` and `dog_files_short`.","99b12de2":"---\n<a id='step6'><\/a>\n## Step 6: Writing the Algorithm\n\nNow I will write an algorithm that accepts a file path to an image and first determines whether the image contains a human, dog, or neither.  Then,\n- if a __dog__ is detected in the image, return the predicted breed.\n- if a __human__ is detected in the image, return the resembling dog breed.\n- if __neither__ is detected in the image, provide output that indicates an error.","eab7d12e":"---\n<a id='step7'><\/a>\n## Step 7: Testing the Algorithm","68db5a55":"### Making Predictions with ResNet-50\n\nGetting the 4D tensor ready for ResNet-50, and for any other pre-trained model in Keras, requires some additional processing.  First, the RGB image is converted to BGR by reordering the channels.  All pre-trained models have the additional normalization step that the mean pixel (expressed in RGB as $[103.939, 116.779, 123.68]$ and calculated from all pixels in all images in ImageNet) must be subtracted from every pixel in each image.  This is implemented in the imported function `preprocess_input`.  If you're curious, you can check the code for `preprocess_input` [here](https:\/\/github.com\/fchollet\/keras\/blob\/master\/keras\/applications\/imagenet_utils.py).\n\nNow that we have a way to format our image for supplying to ResNet-50, we are now ready to use the model to extract the predictions.  This is accomplished with the `predict` method, which returns an array whose $i$-th entry is the model's predicted probability that the image belongs to the $i$-th ImageNet category.  This is implemented in the `ResNet50_predict_labels` function below.\n\nBy taking the argmax of the predicted probability vector, we obtain an integer corresponding to the model's predicted object class, which we can identify with an object category through the use of this [dictionary](https:\/\/gist.github.com\/yrevar\/942d3a0ac09ec9e5eb3a). ","483d35e6":"### Model Architecture\n\nThe model uses the the pre-trained VGG-16 model as a fixed feature extractor, where the last convolutional output of VGG-16 is fed as input to our model.  We only add a global average pooling layer and a fully connected layer, where the latter contains one node for each dog category and is equipped with a softmax.","0b6bac77":"---\n<a id='step2'><\/a>\n## Step 2: Detecting Dogs\n\nIn this section, we use a pre-trained [ResNet-50](http:\/\/ethereon.github.io\/netscope\/#\/gist\/db945b393d40bfa26006) model to detect dogs in images.  Our first line of code downloads the ResNet-50 model, along with weights that have been trained on [ImageNet](http:\/\/www.image-net.org\/), a very large, very popular dataset used for image classification and other vision tasks.  ImageNet contains over 10 million URLs, each linking to an image containing an object from one of [1000 categories](https:\/\/gist.github.com\/yrevar\/942d3a0ac09ec9e5eb3a).  Given an image, this pre-trained ResNet-50 model returns a prediction (derived from the available categories in ImageNet) for the object that is contained in the image.","6dd9f945":"<hr\/>\n## <font color='gray'>Some Custom Settings<\/font>","c078b1b7":"I Think the outcomes is some how resonable, and I could say that using ResNet-50 was good option since it gives acceptable accuracy.\n- Model could be improved much by <b>extra training<\/b> with more images.\n- Also Data <b>Augumentation<\/b> could improve the output.\n- based on probabilities of a prediction( could be saved ) we determine dog-or-human based due to highest probability of the classification to reduce the  overhead of dog\/human detection","92e3b0e2":"### About the project \n\nThis deep learning project is all about developing an Image classification algorithm that could be used as part of a mobile or web app.  At the end of this project, the code accepts any user-supplied image as input.  If a dog is detected in the image, it will provide an estimate of the dog's breed.  If a human is detected, it will provide an estimate of the dog breed that is most resembling.\n\n### Contents\n\n* [Step 0](#step0): Importing Datasets\n* [Step 1](#step1): Detecting Humans\n* [Step 2](#step2): Detecting Dogs\n* [Step 3](#step3): Creating a CNN to Classify Dog Breeds (from Scratch)\n* [Step 4](#step4): Using a CNN to Classify Dog Breeds (using Transfer Learning)\n* [Step 5](#step5): Creating a CNN to Classify Dog Breeds (using Transfer Learning)\n* [Step 6](#step6): Writing the Algorithm\n* [Step 7](#step7): Testing the Algorithm","f1bcd852":"### Predict Dog Breed with the Model","eb49a60b":"### Compile the Model","3529f552":"<hr\/>","4aedd7bc":"### Predict Dog Breed with the Model\n\nBelow, I will Write a function that takes an image path as input and returns the dog breed (`Affenpinscher`, `Afghan_hound`, etc) that is predicted by our model.  \n\nSimilar to the analogous function in Step 5, our function should have three steps:\n1. Extract the bottleneck features corresponding to the chosen CNN model.\n2. Supply the bottleneck features as input to the model to return the predicted vector.  Note that the argmax of this prediction vector gives the index of the predicted dog breed.\n3. Use the `dog_names` array defined in Step 0 of this notebook to return the corresponding breed.\n\nThe functions to extract the bottleneck features can be found in `extract_bottleneck_features.py`, and they have been imported in an earlier code cell.  To obtain the bottleneck features corresponding to our chosen CNN architecture, we need to use the function\n\n    extract_{network}\n    \nwhere `{network}`, in the above filename, should be one of `VGG19`, `Resnet50`, `InceptionV3`, or `Xception`.","6725d2bc":"### Write a Dog Detector\n\nWhile looking at the [dictionary](https:\/\/gist.github.com\/yrevar\/942d3a0ac09ec9e5eb3a), you will notice that the categories corresponding to dogs appear in an uninterrupted sequence and correspond to dictionary keys 151-268, inclusive, to include all categories from `'Chihuahua'` to `'Mexican hairless'`.  Thus, in order to check to see if an image is predicted to contain a dog by the pre-trained ResNet-50 model, we need only check if the `ResNet50_predict_labels` function above returns a value between 151 and 268 (inclusive).\n\nWe use these ideas to complete the `dog_detector` function below, which returns `True` if a dog is detected in an image (and `False` if not).","0cb66ec8":"### Test the Model\n\nNow, we can use the CNN to test how well it identifies breed within our test dataset of dog images.  We print the test accuracy below.","5f8f85f3":"### Load the Model with the Best Validation Loss","64bb551f":"### Import Human Dataset\n\nIn the code cell below, we import a dataset of human images, where the file paths are stored in the numpy array `human_files`.","605a4d79":"### Train the Model","f0e54981":"<a id='step0'><\/a>\n## Step 0: Importing Datasets\n\n### Import Dog Dataset\n\nIn the code cell below, we import a dataset of dog images.  We populate a few variables through the use of the `load_files` function from the scikit-learn library:\n- `train_files`, `valid_files`, `test_files` - numpy arrays containing file paths to images\n- `train_targets`, `valid_targets`, `test_targets` - numpy arrays containing onehot-encoded classification labels \n- `dog_names` - list of string-valued dog breed names for translating labels","96b85d32":"### Train the Model\n\nThe following code explains the training of our model.  we are using model checkpointing to save the model that attains the best validation loss.\n\nfor more explainations you could visit the link [augment the training data](https:\/\/blog.keras.io\/building-powerful-image-classification-models-using-very-little-data.html).","09f0d941":"### Load the Model with the Best Validation Loss","573fcd6b":"## Building the model","98fa9d2b":"### Compile the Model","aa47f383":"# Image Classification\n# Using Convolutional Neural Network\n##  By Yosry Negm","732f68e0":"### Test the Model\n\nbelow, we will try out our model on the test dataset of dog images.  Ensuring that our test accuracy is greater than 1%.","6be97032":"---\n<a id='step4'><\/a>\n## Step 4: Using a CNN to Classify Dog Breeds\n\nTo reduce training time without sacrificing accuracy, we will show how to train a CNN using transfer learning.  In the following step, we will get a chance to use transfer learning to train our own CNN.\n\n### Obtain Bottleneck Features","ec710952":"So we note that :<br>\n- <font color='green'>99 % <\/font>of short <u>human dataset<\/u> are detected as human faces.\n- <font color='red'>12 % <\/font>of short <u>dog dataset<\/u> are detected as human faces.","4acc782b":"---\n<a id='step5'><\/a>\n## Step 5: Creating a CNN to Classify Dog Breeds (using Transfer Learning)\n\nwe will now use transfer learning to create a CNN that can identify dog breed from images.  our CNN must attain at least 60% accuracy on the test set.\n\nIn Step 4, we used transfer learning to create a CNN using VGG-16 bottleneck features.  In this section, we must use the bottleneck features from a different pre-trained model.  To make things easier for us, we have pre-computed the features for all of the networks that are currently available in Keras:\n- [VGG-19](https:\/\/s3-us-west-1.amazonaws.com\/udacity-aind\/dog-project\/DogVGG19Data.npz) bottleneck features\n- [ResNet-50](https:\/\/s3-us-west-1.amazonaws.com\/udacity-aind\/dog-project\/DogResnet50Data.npz) bottleneck features\n- [Inception](https:\/\/s3-us-west-1.amazonaws.com\/udacity-aind\/dog-project\/DogInceptionV3Data.npz) bottleneck features\n- [Xception](https:\/\/s3-us-west-1.amazonaws.com\/udacity-aind\/dog-project\/DogXceptionData.npz) bottleneck features\n\nThe files are encoded as such:\n\n    Dog{network}Data.npz\n    \nwhere `{network}`, in the above filename, can be one of `VGG19`, `Resnet50`, `InceptionV3`, or `Xception`.  Picking one of the above architectures, download the corresponding bottleneck features, and storing the downloaded file in the `bottleneck_features\/` folder in the repository.\n\n### Obtain Bottleneck Features\n\nIn the code block below, we will extract the bottleneck features corresponding to the train, test, and validation sets by running the following:\n\n    bottleneck_features = np.load('bottleneck_features\/Dog{network}Data.npz')\n    train_{network} = bottleneck_features['train']\n    valid_{network} = bottleneck_features['valid']\n    test_{network} = bottleneck_features['test']","0f14b558":"### Model Architecture\n\nIt is obvious from the results of the following model performance that the proposed CNN architecture works well for the image classification task. Generally, when come to image classification problems we know that traditional fully-connected neural networks don\u2019t perfom well because they are not cabable of handling large number of connections. CNN networks improve the efficiency of deep neural networks this is clear since large pictures that are millions of pixels in size . For traditional neural network it will model them using matrix multiplication operations that involve every input and every parameter which results easily in tens of billions of computations but CNN  based on convolution operations between and input and a kernel tensors tends to be drastically smaller than the input which simplifies the number of computations required to train the model or to make predictions focuing on relevant features leads to fewer parameters and hence  more efficient<b> Sparse Representations<\/b>.As well as <b>Parameter Sharing<\/b> i.e. reuse the same parameters across different functions in the deep neural network which reflects back on massive savings in memory compared to traditional models.<br>\nFor the hinted architecture,I have made some changes in it to get enhanced Feature Extraction (one more layer of Convolution Filters were added ), Also I Changed the size of window of First MaxPool layer in order to allow the model to generalize better, As well as putting dropout layers to avoid overfitting. \n\nI will create a CNN to classify dog breed.  At the end of the code , I will summarize the layers of our model by executing the line:\n    \n        model.summary()\n\nFor more practice, here's a hint that specifies a model that trains relatively fast on CPU and attains >1% test accuracy in 5 epochs:\n\n![Sample CNN](images\/sample_cnn.png)      ","dc99d40b":"Before using any of the face detectors, it is standard procedure to convert the images to grayscale.  The `detectMultiScale` function executes the classifier stored in `face_cascade` and takes the grayscale image as a parameter.  \n\nIn the above code, `faces` is a numpy array of detected faces, where each row corresponds to a detected face.  Each detected face is a 1D array with four entries that specifies the bounding box of the detected face.  The first two entries in the array (extracted in the above code as `x` and `y`) specify the horizontal and vertical positions of the top left corner of the bounding box.  The last two entries in the array (extracted here as `w` and `h`) specify the width and height of the box.\n\n### Write a Human Face Detector\n\nWe can use this procedure to write a function that returns `True` if a human face is detected in an image and `False` otherwise.  This function, aptly named `face_detector`, takes a string-valued file path to an image as input and appears in the code block below.","4f07018c":"### Assess the Dog Detector\n\nThe code below tests the performance of our `dog_detector` function and aswers the following questions:- \n- What percentage of the images in `human_files_short` have a detected dog?  \n- What percentage of the images in `dog_files_short` have a detected dog?\n\nSo that the answer will be:-\n\n- <font color='green'>1 % <\/font>of short <u>human dataset<\/u> are detected as dog faces.\n- <font color='green'>100 % <\/font>of short <u>dog dataset<\/u> are detected as dog faces.","b9940e72":"### Train the Model\n\nThe code below will train our model.  Using model checkpointing to save the model that attains the best validation loss.  \n\nFor more practice you could visit the link [augment the training data](https:\/\/blog.keras.io\/building-powerful-image-classification-models-using-very-little-data.html).","2d8f30ff":"### Pre-process the Data\n\nWhen using TensorFlow as backend, Keras CNNs require a 4D array (which we'll also refer to as a 4D tensor) as input, with shape\n\n$$\n(\\text{nb_samples}, \\text{rows}, \\text{columns}, \\text{channels}),\n$$\n\nwhere `nb_samples` corresponds to the total number of images (or samples), and `rows`, `columns`, and `channels` correspond to the number of rows, columns, and channels for each image, respectively.  \n\nThe `path_to_tensor` function below takes a string-valued file path to a color image as input and returns a 4D tensor suitable for supplying to a Keras CNN.  The function first loads the image and resizes it to a square image that is $224 \\times 224$ pixels.  Next, the image is converted to an array, which is then resized to a 4D tensor.  In this case, since we are working with color images, each image has three channels.  Likewise, since we are processing a single image (or sample), the returned tensor will always have shape\n\n$$\n(1, 224, 224, 3).\n$$\n\nThe `paths_to_tensor` function takes a numpy array of string-valued image paths as input and returns a 4D tensor with shape \n\n$$\n(\\text{nb_samples}, 224, 224, 3).\n$$\n\nHere, `nb_samples` is the number of samples, or number of images, in the supplied array of image paths.  It is best to think of `nb_samples` as the number of 3D tensors (where each 3D tensor corresponds to a different image) in our dataset!","5990932a":"### Load the Model with the Best Validation Loss"}}