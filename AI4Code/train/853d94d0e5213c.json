{"cell_type":{"370c8b00":"code","5b7b4ada":"code","0cf645a8":"code","70bcec37":"code","8846410e":"code","9d32dbd8":"code","44367e42":"code","ce97f6e0":"code","949424db":"code","642c0c6b":"code","721f94b8":"code","e2fb6758":"code","288c6643":"code","9ca85d99":"code","c70f18bf":"code","05e7c2c0":"code","2f976271":"code","dcbf94e4":"markdown","6515c27c":"markdown","b0475c72":"markdown","af66c056":"markdown","4a75213d":"markdown","2e66b09a":"markdown","2d9e2cd7":"markdown","2473a09d":"markdown","0f92040a":"markdown","4d69c7e2":"markdown","b0fdfc1b":"markdown","13e230e0":"markdown","c3dc297c":"markdown","808850b7":"markdown","c063060a":"markdown"},"source":{"370c8b00":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5b7b4ada":"from sklearn.datasets import load_boston\nfrom sklearn.preprocessing import MaxAbsScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge","0cf645a8":"BostonData = load_boston()","70bcec37":"#X Data\nX = BostonData.data\nprint('X Data is \\n' , X[:5])\nprint('X shape is ' , X.shape)\nprint('X Features are \\n' , BostonData.feature_names)","8846410e":"#y Data\ny = BostonData.target\nprint('y Data is \\n' , y[:5])\nprint('y shape is ' , y.shape)","9d32dbd8":"scaler = MaxAbsScaler(copy=True)\nX = scaler.fit_transform(X)","44367e42":"print('X \\n' , X[:5])\nprint('y \\n' , y[:5])","ce97f6e0":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=44, shuffle =True)","949424db":"LassoRegressionModel = Lasso(alpha=0.01,random_state=33,normalize=False)\nLassoRegressionModel.fit(X_train, y_train)","642c0c6b":"print('Lasso Regression Train Score is : ' , LassoRegressionModel.score(X_train, y_train))\nprint('Lasso Regression Test Score is : ' , LassoRegressionModel.score(X_test, y_test))\nprint('Lasso Regression Coef is : ' , LassoRegressionModel.coef_)\nprint('Lasso Regression intercept is : ' , LassoRegressionModel.intercept_)","721f94b8":"\ny_pred = LassoRegressionModel.predict(X_test)\nprint('Predicted Value for Lasso Regression is : ' , y_pred[:10])","e2fb6758":"MAEValue = mean_absolute_error(y_test, y_pred)","288c6643":"print('Mean Absolute Error Value is : ', MAEValue)","9ca85d99":"RidgeRegressionModel = Ridge(alpha=0.01,random_state=33)\nRidgeRegressionModel.fit(X_train, y_train)","c70f18bf":"print('Ridge Regression Train Score is : ' , RidgeRegressionModel.score(X_train, y_train))\nprint('Ridge Regression Test Score is : ' , RidgeRegressionModel.score(X_test, y_test))\nprint('Ridge Regression Coef is : ' , RidgeRegressionModel.coef_)\nprint('Ridge Regression intercept is : ' , RidgeRegressionModel.intercept_)","05e7c2c0":"y_pred = RidgeRegressionModel.predict(X_test)\n#print('Predicted Value for Ridge Regression is : ' , y_pred[:10])","2f976271":"MAEValue = mean_absolute_error(y_test, y_pred, multioutput='uniform_average') \nprint('Mean Absolute Error Value is : ', MAEValue)","dcbf94e4":"BostonData-linearRegression-Lasso VS Redge","6515c27c":"# Check Score *with Lasso*","b0475c72":"# Applying Lasso Regression Model","af66c056":"# Splitting data","4a75213d":"# #Applying Ridge Regression Model\n","2e66b09a":"# Prediction with Ridge","2d9e2cd7":"# **#Check Score with** Ridge","2473a09d":"#showing data After Scaling","0f92040a":"Summary\nThe hyperparameters Lasso or Ridge almost the same, while Lasso giving a little bit accuracy more than Ridge.","4d69c7e2":"# MaxAbs Scaling Data","b0fdfc1b":"# Prediction with Lasso","13e230e0":"# Import Libraries","c3dc297c":"# #Calculating Mean Absolute Error with Lasso","808850b7":"# #Calculating Mean Absolute Error with Ridge","c063060a":"# load boston data"}}