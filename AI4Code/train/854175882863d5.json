{"cell_type":{"4666b0df":"code","e7c90408":"code","9cfa2d12":"code","9fdfd24e":"code","6223ae87":"code","3487a1c2":"code","417d5079":"code","cc04b855":"code","e6524bcd":"code","ef48c901":"code","c8991b7f":"code","0ec98b7a":"code","73658a0f":"code","59a5f271":"code","99521245":"code","ec5db04c":"code","6e22c9c2":"code","e7466051":"code","9616eb8a":"code","cbbf79a6":"code","18fda83b":"code","8b3a5291":"code","0dd086cf":"code","53729d0e":"code","07ebc825":"code","0caa0529":"code","3ccb1d9b":"markdown","79cf6382":"markdown","10fa965f":"markdown","4c09c837":"markdown","1317646f":"markdown","5eae7570":"markdown","be386021":"markdown","9d8f6628":"markdown","389561a3":"markdown","7f22aec2":"markdown"},"source":{"4666b0df":"from IPython.display import Image\nImage(filename='..\/input\/plantdisease\/plantvillage\/PlantVillage\/Pepper__bell___Bacterial_spot\/0022d6b7-d47c-4ee2-ae9a-392a53f48647___JR_B.Spot 8964.JPG')","e7c90408":"import numpy as np\nimport pickle\nimport cv2\nfrom os import listdir\nfrom sklearn.preprocessing import LabelBinarizer\nfrom keras.models import Sequential\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.core import Activation, Flatten, Dropout, Dense\nfrom keras import backend as K\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import img_to_array\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt","9cfa2d12":"import os\nos.listdir(\"..\/input\/plantdisease\/plantvillage\/PlantVillage\")","9fdfd24e":"EPOCHS = 5\nINIT_LR = 1e-3\nBS = 32\ndefault_image_size = tuple((128,128))\nimage_size = 0\ndirectory_root = '..\/input\/plantdisease\/plantvillage'\nwidth=128\nheight=128\ndepth=3","6223ae87":"def convert_image_to_array(image_dir):\n    try:\n        image = cv2.imread(image_dir)\n        if image is not None :\n            image = cv2.resize(image, default_image_size)   \n            return img_to_array(image)\n        else :\n            return np.array([])\n    except Exception as e:\n        print(f\"Error : {e}\")\n        return None\nimage_list, label_list = [], []\ntry:\n    print(\"[INFO] Loading images ...\")\n    root_dir = listdir(directory_root)\n    for directory in root_dir :\n        # remove .DS_Store from list\n        if directory == \".DS_Store\" :\n            root_dir.remove(directory)\n\n    for plant_folder in root_dir :\n        plant_disease_folder_list = listdir(f\"{directory_root}\/{plant_folder}\")\n        \n        for disease_folder in plant_disease_folder_list :\n            # remove .DS_Store from list\n            if disease_folder == \".DS_Store\" :\n                plant_disease_folder_list.remove(disease_folder)\n\n        for plant_disease_folder in plant_disease_folder_list:\n            print(f\"[INFO] Processing {plant_disease_folder} ...\")\n            plant_disease_image_list = listdir(f\"{directory_root}\/{plant_folder}\/{plant_disease_folder}\/\")\n                \n            for single_plant_disease_image in plant_disease_image_list :\n                if single_plant_disease_image == \".DS_Store\" :\n                    plant_disease_image_list.remove(single_plant_disease_image)\n\n            for image in plant_disease_image_list[:200]:\n                image_directory = f\"{directory_root}\/{plant_folder}\/{plant_disease_folder}\/{image}\"\n                if image_directory.endswith(\".jpg\") == True or image_directory.endswith(\".JPG\") == True:\n                    image_list.append(convert_image_to_array(image_directory))\n                    label_list.append(plant_disease_folder)\n    print(\"[INFO] Image loading completed\")  \nexcept Exception as e:\n    print(f\"Error --- : {e}\")\n    \nim","3487a1c2":"image_size = len(image_list)\nimage_size","417d5079":"label_binarizer = LabelBinarizer()\nimage_labels = label_binarizer.fit_transform(label_list)\npickle.dump(label_binarizer,open('label_transform.pkl', 'wb'))\nn_classes = len(label_binarizer.classes_)\nprint(label_binarizer.classes_)","cc04b855":"np_image_list = np.array(image_list, dtype=np.float16) \/ 225.0\nprint(\"[INFO] Spliting data to train, test\")\nx_train, x_test, y_train, y_test = train_test_split(np_image_list, image_labels, test_size=0.2, random_state = 42) ","e6524bcd":"aug = ImageDataGenerator(\n    rotation_range=25, width_shift_range=0.1,\n    height_shift_range=0.1, shear_range=0.2, \n    zoom_range=0.2,horizontal_flip=True, \n    fill_mode=\"nearest\")","ef48c901":"model = Sequential()\ninputShape = (height, width, depth)\nchanDim = -1\nif K.image_data_format() == \"channels_first\":\n    inputShape = (depth, height, width)\n    chanDim = 1\nmodel.add(Conv2D(32, (3, 3), padding=\"same\",input_shape=inputShape))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(MaxPooling2D(pool_size=(3, 3)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(Conv2D(64, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(128, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(Conv2D(128, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(1024))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(n_classes))\nmodel.add(Activation(\"softmax\"))\nmodel.summary()","c8991b7f":"opt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\n# distribution\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt,metrics=[\"accuracy\"])\n# train the network\nprint(\"[INFO] training network...\")","0ec98b7a":"history = model.fit_generator(\n    aug.flow(x_train, y_train, batch_size=BS),\n    validation_data=(x_test, y_test),\n    steps_per_epoch=len(x_train) \/\/ BS,\n    epochs=5, verbose=1\n    )","73658a0f":"def Res_Plot_Test_Save(name):\n    print(\"[INFO] Plotting model accuracy and Loss\")\n    acc = history.history['accuracy']\n    val_acc = history.history['val_accuracy']\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n    epochs = range(1, len(acc) + 1)\n    #Train and validation accuracy\n    plt.plot(epochs, acc, 'b', label='Training accurarcy')\n    plt.plot(epochs, val_acc, 'r', label='Validation accurarcy')\n    plt.title('Training and Validation accurarcy')\n    plt.legend()\n\n    plt.figure()\n    #Train and validation loss\n    plt.plot(epochs, loss, 'b', label='Training loss')\n    plt.plot(epochs, val_loss, 'r', label='Validation loss')\n    plt.title('Training and Validation loss')\n    plt.legend()\n    plt.show()\n    \n    print(\"[INFO] Calculating model accuracy\")\n    scores = model.evaluate(x_test, y_test)\n    print(f\"Test Accuracy: {scores[1]*100}\")\n    \n    #print(\"[INFO] Saving model\")\n    #model.save(name)\n    ","59a5f271":"Res_Plot_Test_Save('penta_CNN_Algorithm.h5')","99521245":"from keras.models import Model\nfrom keras.optimizers import Adam\nfrom keras.layers import GlobalAveragePooling2D\nfrom keras.layers import Dense\nfrom keras.applications.inception_v3 import InceptionV3\nfrom keras.utils.np_utils import to_categorical\n\n# Get the InceptionV3 model so we can do transfer learning\nbase_inception = InceptionV3(weights='imagenet', include_top=False, \n                             input_shape=(128, 128, 3))\n                             \n# Add a global spatial average pooling layer\nout = base_inception.output\nout = GlobalAveragePooling2D()(out)\nout = Dense(512, activation='relu')(out)\nout = Dense(512, activation='relu')(out)\npredictions = Dense(n_classes, activation='softmax')(out)\nmodel = Model(inputs=base_inception.input, outputs=predictions)\n\n# only if we want to freeze layers\nfor layer in base_inception.layers:\n    layer.trainable = False\n    \n# Compile \nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt,metrics=[\"accuracy\"]) \nmodel.summary()","ec5db04c":"history = model.fit_generator(\n    aug.flow(x_train, y_train, batch_size=BS),\n    validation_data=(x_test, y_test),\n    steps_per_epoch=len(x_train) \/\/ BS,\n    epochs=EPOCHS, verbose=1\n    )","6e22c9c2":"Res_Plot_Test_Save('Inception_ModelV3_(Imagenet_Weights).h5')","e7466051":"from keras.models import Model\nfrom keras import applications\nfrom keras.optimizers import Adam\nfrom keras.layers import GlobalAveragePooling2D\nfrom keras.layers import Dense\nfrom keras.applications.inception_v3 import InceptionV3\nfrom keras.utils.np_utils import to_categorical\n\n# Get the Resnet model so we can do transfer learning\nbase_model = applications.resnet50.ResNet50(weights= None, include_top=False, input_shape= (128,128,3))\n                             \n# Add a global spatial average pooling layer\nout = base_model.output\nout = GlobalAveragePooling2D()(out)\nout = Dense(512, activation='relu')(out)\nout = Dense(512, activation='relu')(out)\npredictions = Dense(n_classes, activation='softmax')(out)\nmodel = Model(inputs=base_model.input, outputs=predictions)\n\n# only if we want to freeze layers\nfor layer in base_inception.layers:\n    layer.trainable = False\n    \n# Compile \nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt,metrics=[\"accuracy\"]) \nmodel.summary()","9616eb8a":"history = model.fit_generator(\n    aug.flow(x_train, y_train, batch_size=BS),\n    validation_data=(x_test, y_test),\n    steps_per_epoch=len(x_train) \/\/ BS,\n    epochs=5, verbose=1\n    )","cbbf79a6":"Res_Plot_Test_Save('Resnet_With_Imagenet_Weingts.h5')","18fda83b":"from keras.models import Model\nfrom keras.applications import vgg16\nfrom keras.optimizers import Adam\nfrom keras.layers import GlobalAveragePooling2D\nfrom keras.layers import Dense\nfrom keras.applications.inception_v3 import InceptionV3\nfrom keras.utils.np_utils import to_categorical\n\n# Get the Resnet model so we can do transfer learning\nvgg = vgg16.VGG16(weights= None, include_top=False, input_shape= (128,128,3))\n                             \n# Add a global spatial average pooling layer\nout = base_model.output\nout = GlobalAveragePooling2D()(out)\nout = Dense(512, activation='relu')(out)\nout = Dense(512, activation='relu')(out)\npredictions = Dense(n_classes, activation='softmax')(out)\nmodel = Model(inputs=base_model.input, outputs=predictions)\n\n# only if we want to freeze layers\nfor layer in base_inception.layers:\n    layer.trainable = False\n    \n# Compile \nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt,metrics=[\"accuracy\"]) \nmodel.summary()","8b3a5291":"history = model.fit_generator(\n    aug.flow(x_train, y_train, batch_size=BS),\n    validation_data=(x_test, y_test),\n    steps_per_epoch=len(x_train) \/\/ BS,\n    epochs=5, verbose=1\n    )","0dd086cf":"Res_Plot_Test_Save('VGG16_With_Imagenet_Weingts.h5')","53729d0e":"from keras.models import Model\nfrom keras.applications import vgg19\nfrom keras.optimizers import Adam\nfrom keras.layers import GlobalAveragePooling2D\nfrom keras.layers import Dense\nfrom keras.applications.inception_v3 import InceptionV3\nfrom keras.utils.np_utils import to_categorical\n\n# Get the Resnet model so we can do transfer learning\nvgg = vgg19.VGG19(weights= None, include_top=False, input_shape= (128,128,3))\n                             \n# Add a global spatial average pooling layer\nout = base_model.output\nout = GlobalAveragePooling2D()(out)\nout = Dense(512, activation='relu')(out)\nout = Dense(512, activation='relu')(out)\npredictions = Dense(n_classes, activation='softmax')(out)\nmodel = Model(inputs=base_model.input, outputs=predictions)\n\n# only if we want to freeze layers\nfor layer in base_inception.layers:\n    layer.trainable = False\n    \n# Compile \nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt,metrics=[\"accuracy\"]) \nmodel.summary()","07ebc825":"history = model.fit_generator(\n    aug.flow(x_train, y_train, batch_size=BS),\n    validation_data=(x_test, y_test),\n    steps_per_epoch=len(x_train) \/\/ BS,\n    epochs=5, verbose=1\n    )","0caa0529":"Res_Plot_Test_Save('VGG19_Imagenet.h5')","3ccb1d9b":"# **Optimizer**","79cf6382":"# **Augmentation Of data**","10fa965f":"# **Results and Plots**","4c09c837":"\n\nThis Notebook will deal with an implementation of \n5 Layered CNN architecture\n* **Resnet**\n* **VGG16**\n* **VGG19**\n* **Imagnet**\n* **Inception Model**","1317646f":"### **Inception ModelV3**\n\n##### Weights : Imagenet","5eae7570":"### **VGG19 Model**\n\n##### Weights : Imagenet","be386021":"### **VGG16 Model**\n\n##### Weights : Imagenet","9d8f6628":"# **Normalization Of images**","389561a3":"# ***5 Layer CNN Algorithm ***","7f22aec2":"### **Resnet Model**\n\n##### Weights : Imagenet"}}