{"cell_type":{"462e3ab0":"code","2cde9675":"code","59eb92e0":"code","5f2f7f5c":"code","7c219a5e":"code","f709908e":"code","dc3d2e73":"code","3dc51d89":"code","cc5c7993":"code","a4c3d70a":"code","64940fd8":"code","033bd093":"code","dabfcdea":"code","417f67c2":"code","b93d3585":"code","9bb5678b":"code","94587fcc":"code","fbfb5fbd":"code","8cf80873":"code","80485e52":"markdown","dcd1e4e4":"markdown","71c8dd32":"markdown","05d4ac47":"markdown","9e1e0bdf":"markdown","1b716995":"markdown","bcf717c6":"markdown"},"source":{"462e3ab0":"!pip install PyArabic farasapy fast-bert","2cde9675":"!git clone https:\/\/github.com\/aub-mind\/arabert\n","59eb92e0":"import pandas as pd\n#from py4j.java_gateway import JavaGateway\nfrom farasa.segmenter import FarasaSegmenter\nfrom arabert.preprocess_arabert import preprocess\nfrom sklearn.model_selection import train_test_split\n\n# !pkill \"java\"\n# gateway = JavaGateway.launch_gateway(classpath='.\/FarasaSegmenterJar.jar')\n# farasa_segmenter = gateway.jvm.com.qcri.farasa.segmenter.Farasa()\n\nfarasa_segmenter = FarasaSegmenter(interactive=True)\n\ndf_AJGT = pd.read_excel('..\/input\/tunisian-texts\/tun.xlsx',header=0)\ndf_AJGT['data_labels'] = df_AJGT['data_labels'].astype(str)\n\nDATA_COLUMN = 'texts'\nLABEL_COLUMN = 'data_labels'\n\ndf_AJGT = df_AJGT[['texts', 'data_labels']]\ndf_AJGT.columns = [DATA_COLUMN, LABEL_COLUMN]\n\nlabel_map = {\n    'Negative' : 0,\n    'Positive' : 1\n}\n\ndf_AJGT[DATA_COLUMN] = df_AJGT[DATA_COLUMN].apply(lambda x: preprocess(x, do_farasa_tokenization=True , farasa=farasa_segmenter, use_farasapy = True))\n# df_AJGT[LABEL_COLUMN] = df_AJGT[LABEL_COLUMN].apply(lambda x: label_map[x])\n\ntrain_AJGT, test_AJGT = train_test_split(df_AJGT, test_size=0.2,random_state=42)\n!mkdir data\ntrain_AJGT.to_csv(\".\/train.csv\",index=True,columns=train_AJGT.columns,sep=',',header=True)\ntest_AJGT.to_csv(\".\/dev.csv\",index=True,columns=test_AJGT.columns,sep=',',header=True)\nwith open('.\/labels.csv','w') as f:\n    f.write(\"\\n\".join(df_AJGT['data_labels'].unique()))","5f2f7f5c":"with open('.\/labels.csv','w') as f:\n    f.write(\"\\n\".join(df_AJGT['data_labels'].unique()))","7c219a5e":"from fast_bert.data_cls import BertDataBunch\nfrom transformers import AutoTokenizer\n\ntokenizer = AutoTokenizer.from_pretrained('aubmindlab\/bert-base-arabert')\n\ndatabunch = BertDataBunch('.\/', '.\/',\n                          tokenizer=tokenizer,\n                          train_file='train.csv',\n                          val_file='dev.csv',\n                          label_file='labels.csv',\n                          text_col='texts',\n                          label_col='data_labels',\n                          batch_size_per_gpu=16,\n                          max_seq_length=256,\n                          multi_gpu=True,\n                          multi_label=False,\n                          model_type='bert',\n                          )","f709908e":"databunch.show_batch(3)","dc3d2e73":"import logging\nimport torch\n\nfrom fast_bert.learner_cls import BertLearner\nfrom fast_bert.metrics import accuracy\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndevice_cuda = torch.device(\"cuda\")\nmetrics = [{'name': 'accuracy', 'function': accuracy}]\n\n!mkdir 'output'\nlearner = BertLearner.from_pretrained_model(\n\t\t\t\t\t\tdatabunch,\n\t\t\t\t\t\tpretrained_path='aubmindlab\/bert-base-arabert',\n\t\t\t\t\t\tmetrics=metrics,\n\t\t\t\t\t\tdevice=device_cuda,\n\t\t\t\t\t\tlogger=logger,\n\t\t\t\t\t\toutput_dir='output',\n\t\t\t\t\t\tfinetuned_wgts_path=None,\n\t\t\t\t\t\twarmup_steps=30,\n\t\t\t\t\t\tmulti_gpu=False,\n\t\t\t\t\t\tis_fp16=False,\n\t\t\t\t\t\tmulti_label=False,\n\t\t\t\t\t\tlogging_steps=0)","3dc51d89":"learner.lr_find()\nlearner.recorder.plot(suggestion=True)","cc5c7993":"\nlearner.fit_one_cycle(5, slice(5e-6, 5e-5), moms=(0.8,0.7), pct_start=0.2, wd =(1e-7, 1e-5, 1e-4, 1e-3, 1e-2))","a4c3d70a":"learner.fit(epochs=3,\n\t\t\tlr=2e-5,\n\t\t\tvalidate=True, \t# Evaluate the model after each epoch\n\t\t\tschedule_type=\"warmup_linear\",\n\t\t\toptimizer_type=\"adamw\")","64940fd8":"%load_ext tensorboard\n%tensorboard --logdir '.\/output\/tensorboard\/events.out.tfevents.1607631290.defeb9f950ad'","033bd093":"learner.save_model()","dabfcdea":"learner.save('head')\nlearner.load('head')","417f67c2":"#Predictions\n#Call predict_batch method on the learner object that contains the trained model.\n\ntexts = [\n  \"\u0645\u062e\u064a\u0628 \u0639\u064a\u0634\u062a\u0643\u0645 \u0648\u0645\u0644\u0627 \u062d\u0627\u0644\u0629 \u0647\u0627\u0644\u0643\u0648\u0631\u0648\u0646\u0627\",\n  \"\u0627\u0644\u0628\u0644\u0627\u062f \u0645\u0634\u0627\u062a \u064a\u0627 \u0644\u0637\u064a\u0641\"\n]\n\npredictions = learner.predict_batch(texts)\nfrom fast_bert.prediction import BertClassificationPredictor\n\npredictor = BertClassificationPredictor('aubmindlab\/bert-base-arabert','.\/')\n\n# Single prediction\nsingle_prediction = predictor.predict(\"\u0645\u062e\u064a\u0628 \u0639\u064a\u0634\u062a\u0643\u0645 \u0648\u0645\u0644\u0627 \u062d\u0627\u0644\u0629 \u0647\u0627\u0644\u0643\u0648\u0631\u0648\u0646\u0627\")\n\n# Batch predictions\ntexts = [\n  \"\u0645\u062e\u064a\u0628 \u0639\u064a\u0634\u062a\u0643\u0645 \u0648\u0645\u0644\u0627 \u062d\u0627\u0644\u0629 \u0647\u0627\u0644\u0643\u0648\u0631\u0648\u0646\u0627\",\n  \"\u0627\u0644\u0628\u0644\u0627\u062f \u0645\u0634\u0627\u062a \u064a\u0627 \u0644\u0637\u064a\u0641\"\n]\n\nmultiple_predictions = predictor.predict(texts)","b93d3585":"l = pd.read_csv('.\/labels.csv')\nl","9bb5678b":"from fast_bert.modeling import BertForMultiLabelSequenceClassification\nfrom fast_bert.data import BertDataBunch, InputExample, InputFeatures, MultiLabelTextProcessor, convert_examples_to_features\nfrom fast_bert.learner import BertLearner\nfrom fast_bert.metrics import accuracy_multilabel, accuracy_thresh, fbeta, roc_auc\n","94587fcc":"from functools import partial\n\nmetrics = []\n#metrics.append({'name': 'accuracy_thresh', 'function': accuracy_thresh})\nmetrics.append({'name': 'roc_auc', 'function': roc_auc})\nmetrics.append({'name': 'F1', 'function': partial(fbeta, beta=1)})\nmetrics.append({'name': 'accuracy_single', 'function': accuracy_multilabel})","fbfb5fbd":"metrics","8cf80873":"#test_df['label'] = [max(x, key=lambda z: z[1])[0] for x in preds]\n#test_df['label'].to_csv('fast_bert_submission.csv', index=True, index_label=['id'], header=True)","80485e52":"##You can see the output using tensorboard","dcd1e4e4":"##Prepare the data","71c8dd32":"##Create the Learner Object\nsee https:\/\/github.com\/kaushaltrivedi\/fast-bert#2-create-a-learner-object","05d4ac47":"#Fine-tune AraBERT with Fast-BERT library\nhttps:\/\/github.com\/kaushaltrivedi\/fast-ber","9e1e0bdf":"##Start Training and Validating","1b716995":"##Create a DataBunch Object:\nsee https:\/\/github.com\/kaushaltrivedi\/fast-bert#text-classification","bcf717c6":"##Get Requirements"}}