{"cell_type":{"603b3a88":"code","c11bc4cd":"code","a5dd3b40":"code","dac4cfd4":"code","4130a0dc":"code","aac43cef":"code","f9f1b3b5":"code","545c5ccc":"code","7622e18b":"code","4cdc8b14":"code","010b95ab":"code","6e3de7c8":"code","ea449845":"code","2b483369":"code","8fb05c09":"code","4e0efa31":"code","449fb179":"code","ca37858f":"code","cc60c7a8":"code","ea8483af":"code","dc7051b5":"code","d3ca6dae":"code","c3b8d6ff":"code","659f8409":"code","f6fccb63":"code","c2ede3f1":"code","67e6e544":"code","a5bfc14f":"code","e94f1672":"code","0fa6598a":"code","62ada987":"code","2b32c878":"code","7de1588f":"code","c5a5581a":"code","acf7de2c":"markdown","9bce4e5a":"markdown","18bbf3cc":"markdown","2bfefea3":"markdown","4a7d0680":"markdown","9e4b1b3f":"markdown","82d0245e":"markdown","cd97cf22":"markdown","6f53a3eb":"markdown","c97bcfc5":"markdown","1c01a180":"markdown","bb45bfd2":"markdown","feabb7f4":"markdown","6eec50e4":"markdown","f06f9870":"markdown","12f98cb2":"markdown","b9e55692":"markdown","74e5396b":"markdown","dbeadc71":"markdown","2e19a3d2":"markdown","e7982b64":"markdown"},"source":{"603b3a88":"import numpy as np\nimport pandas as pd\nimport gc\nfrom tqdm.notebook import tqdm\n\n# \u6a5f\u68b0\u5b66\u7fd2\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import f1_score\nimport lightgbm as lgb\n\n\n# \u53ef\u8996\u5316\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# \u8b66\u544a\u3092\u975e\u8868\u793a\u306b\u8a2d\u5b9a\u3059\u308b\nimport warnings\nwarnings.filterwarnings('ignore')","c11bc4cd":"train = pd.read_csv(\"\/kaggle\/input\/marketing-dsg\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/marketing-dsg\/test.csv\")\ntrain_prior_order = pd.read_csv(\"\/kaggle\/input\/marketing-dsg\/train_prior_order.csv\")\ntest_prior_order = pd.read_csv(\"\/kaggle\/input\/marketing-dsg\/test_prior_order.csv\")\nproducts = pd.read_csv(\"\/kaggle\/input\/marketing-dsg\/products.csv\")\ndepartments = pd.read_csv(\"\/kaggle\/input\/marketing-dsg\/departments.csv\")\nsample_submission = pd.read_csv(\"\/kaggle\/input\/marketing-dsg\/sample_submission.csv\")","a5dd3b40":"print(\"\u3010train\u3011\", train.shape)\ndisplay(train.head())\nprint(\"\u3010test\u3011\", test.shape)\ndisplay(test.head())\nprint(\"\u3010train_prior_order\u3011\", train_prior_order.shape)\ndisplay(train_prior_order.head())\nprint(\"\u3010test_prior_order\u3011\", test_prior_order.shape)\ndisplay(test_prior_order.head())\nprint(\"\u3010products\u3011\", products.shape)\ndisplay(products.head())\nprint(\"\u3010departments\u3011\", departments.shape)\ndisplay(departments.head())","dac4cfd4":"# \u307e\u3068\u3081\u3066\u60c5\u5831\u3092\u78ba\u8a8d\u3059\u308b\ntrain.info()","4130a0dc":"train.isnull().sum()","aac43cef":"test.isnull().sum()","f9f1b3b5":"# \u5bfe\u8c61\u5217\u306e\u4e2d\u3067\u8cfc\u5165\u3092\u884c\u3063\u305f\u6570\ntrain['target'].value_counts()","545c5ccc":"# \u8cfc\u5165\u3092\u884c\u3046\u5272\u5408\ntrain['target'].value_counts() \/ train['target'].count()","7622e18b":"# \u5b66\u7fd2\u7528\u306e\u30c7\u30fc\u30bf\u306e\u30e6\u30fc\u30b6\u6570\u3092\u78ba\u8a8d\u3059\u308b\ntrain['user_id'].nunique()","4cdc8b14":"# \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u306e\u6ce8\u6587\u6570\u3092\u78ba\u8a8d\u3059\u308b\ntrain['order_id'].nunique()","010b95ab":"# test\u7528\u306e\u30c7\u30fc\u30bf\u306e\u30e6\u30fc\u30b6\u6570\u3092\u78ba\u8a8d\u3059\u308b\ntest['user_id'].nunique()","6e3de7c8":"# test\u30c7\u30fc\u30bf\u306e\u6ce8\u6587\u6570\u3092\u78ba\u8a8d\u3059\u308b\ntest['order_id'].nunique()","ea449845":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30e6\u30fc\u30b6\u304c\u4f55\u56de\u76ee\u306e\u6ce8\u6587\u304b\u3092\u53ef\u8996\u5316\u3057\u3066\u78ba\u8a8d\u3057\u3066\u307f\u308b\ntrain['order_number'].hist()","2b483369":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30e6\u30fc\u30b6\u304c\u4f55\u56de\u76ee\u306e\u6ce8\u6587\u304b\u306e\u7d71\u8a08\u5024\u3092\u898b\u3066\u307f\u308b\ntrain['order_number'].describe()","8fb05c09":"# product_id\u3092\u30ad\u30fc\u306b\u5546\u54c1\u6570\u3092\u6570\u3048\u308b\ntrain_product_df = train_prior_order.groupby('product_id').count()[['order_id']]\n\n# index\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u3001product_id\u3092\u5217\u3068\u3057\u3066\u6271\u3046\ntrain_product_df.reset_index(inplace=True)\n\n# \u96c6\u8a08\u500b\u6570\u306e\u5217\u540d\u3092productcount\u306b\u3059\u308b\ntrain_product_df.rename(columns={'order_id':'product_count'},inplace=True)\n\n# \u5546\u54c1\u540d\u304c\u308f\u304b\u308b\u3088\u3046\u306b products\u30c6\u30fc\u30d6\u30eb\u306e\u30c7\u30fc\u30bf\u3068\u7d50\u5408\u3059\u308b\ntrain_product_df = pd.merge(train_product_df, products, on='product_id', how='left')\n\n# \u8ca9\u58f2\u500b\u6570\u306e\u591a\u3044\u9806\u306b\u4e26\u3073\u66ff\u3048\u308b\ntrain_product_df.sort_values('product_count', ascending=False, inplace=True)","4e0efa31":"# \u4f5c\u6210\u3057\u305f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u4e2d\u8eab\u3092\u898b\u3066\u307f\u308b\ntrain_product_df.head()","449fb179":"# \u8ca9\u58f2\u56de\u6570\u4e0a\u4f4d10\u4ef6\u306e\u8868\u793a\u3092\u3057\u3066\u307f\u308b\nsns.barplot(x=\"product_count\", y=\"product_name\", data=train_product_df.head(10))","ca37858f":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u904e\u53bb\u306e\u8cfc\u8cb7\u5c65\u6b74\u60c5\u5831\u3092\u4f5c\u6210\u3059\u308b\nprior_order = train_prior_order.append(test_prior_order)","cc60c7a8":"prior_order.head()","ea8483af":"# \u7279\u5fb4\u91cf\u3092\u8ffd\u52a0\u3057\u305f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u4f5c\u6210\ntrain_feature_df = train.copy()\ntest_feature_df = test.copy()","dc7051b5":"# \u5546\u54c1\u3054\u3068\u306e\u8cfc\u5165\u56de\u6570\nproduct_count = prior_order.groupby('product_id').count()[['order_id']].reset_index().rename(\n    columns={'order_id':'product_count'})","d3ca6dae":"product_count.head()","c3b8d6ff":"# \u5546\u54c1\u3054\u3068\u306e\u7279\u5fb4\u306e\u7d50\u5408\ntrain_feature_df = pd.merge(train_feature_df, product_count, on='product_id', how='left')\ntest_feature_df = pd.merge(test_feature_df, product_count, on='product_id', how='left')","659f8409":"# \u7279\u5fb4\u91cf2","f6fccb63":"# \u7279\u5fb4\u91cf3","c2ede3f1":"train_feature_df.head()","67e6e544":"# \u5b66\u7fd2\u7528\u306eConfig\u30d5\u30a1\u30a4\u30eb\nCFG = {\n    \"seed\":0, # \u4e71\u6570\u30b7\u30fc\u30c9\n    \"fold_num\":5, # \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306eFold\u6570\n    \n    # LGBM\u30d1\u30e9\u30e1\u30fc\u30bf\n    \"num_leaves\":31, # \u8449\u306e\u6570\n    \"max_depth\":-1, # \u6700\u5927\u306e\u6df1\u3055\n    \"learning_rate\":0.05, # \u5b66\u7fd2\u7387\n    \"n_estimators\":1000, # \u6728\u3092\u4f5c\u308b\u6570\n    \"subsample\":0.6, # \u5b66\u7fd2\u306b\u7528\u3044\u308b\u30c7\u30fc\u30bf\u306e\u5272\u5408\n    \"subsample_freq\":1, # \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u884c\u3046\u983b\u5ea6\n    \"colsample_bytree\":0.8, # \u5b66\u7fd2\u306b\u7528\u3044\u308b\u5217\u306e\u5272\u5408\n    \"objective\":'binary', # 2\u5024\u5206\u985e\n    \"eval_metric\":'logloss', # logloss\u3092\u8a55\u4fa1\u6307\u6a19\u3068\u3057\u3066\n    \"early_stopping_rounds\":50, # \u6307\u5b9a\u56de\u6570\u4ee5\u4e0avalid\u306e\u5024\u304c\u66f4\u65b0\u3057\u306a\u3044\u5834\u5408\u306f\u5b66\u7fd2\u3092\u6b62\u3081\u308b\n    \"verbose\":100, # \u9014\u4e2d\u7d4c\u904e\u8868\u793a\u983b\u5ea6\n}","a5bfc14f":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u304b\u3089\u4e0d\u8981\u306a\u60c5\u5831\u3092\u524a\u9664\u3057\u305f\u7279\u5fb4\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\nfull_data_x = train_feature_df.drop([\"index\", \n                                     \"order_id\", \n                                     \"product_id\", \n                                     \"target\"],axis=1)\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u3057\u305f\u3044\u5024\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\nfull_data_y = train_feature_df[[\"target\"]]\n    \n# test\u7528\u306e\u30c7\u30fc\u30bf\u304b\u3089\u4e0d\u8981\u306a\u60c5\u5831\u3092\u524a\u9664\u3057\u305f\u7279\u5fb4\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\ntest_x = test_feature_df.drop([\"index\", \n                               \"order_id\", \n                               \"product_id\", \n                               \"user_id\"],axis=1)","e94f1672":"full_data_x.head()","0fa6598a":"# \u4e88\u6e2c\u7d50\u679c\u3092\u7ba1\u7406\u3059\u308b\u914d\u5217\nanswer = np.array([])\n# \u5404Fold\u306e\u691c\u8a3c\u30b9\u30b3\u30a2\u3092\u4fdd\u5b58\u3059\u308b\u914d\u5217\nAUC_list = []\n\n# GroupKFold\u306e\u5206\u5272\n# \u5b66\u7fd2-\u691c\u8a3c\u7528\u306e\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b\u969b\u306b\u540c\u3058\u30e6\u30fc\u30b6\u304c\u5b66\u7fd2\u3068\u691c\u8a3c\u306e\u4e21\u65b9\u306b\u542b\u307e\u308c\u308b\u3068\u691c\u8a3c\u7528\u306e\u30b9\u30b3\u30a2\u304c\u9ad8\u304f\u306a\u308b\u30ea\u30fc\u30af\u304c\u767a\u751f\u3059\u308b\u305f\u3081\u3001\n# user_id\u3092\u7528\u3044\u3066\u30c7\u30fc\u30bf\u306e\u5206\u5272\u3092\u884c\u3046\ngroups = full_data_x['user_id'].values\ngroup_kfold = GroupKFold(n_splits=CFG['fold_num'])\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u30fb\u691c\u8a3c\u30c7\u30fc\u30bf\u306e\u5206\u5272\u30925\u30d1\u30bf\u30fc\u30f3\u7e70\u308a\u8fd4\u3059\nfor i, (train_index, valid_index) in enumerate(group_kfold.split(full_data_x, full_data_y, groups)):\n    \n    print(\"----------------------------------------- Fold \", i, \"-----------------------------------------\")\n    # \u5b66\u7fd2\u30c7\u30fc\u30bf\u30fb\u691c\u8a3c\u30c7\u30fc\u30bf\u306e\u5206\u5272\u30c7\u30fc\u30bf\u6570\n    print(\"TRAIN:\", len(train_index), \"VALID:\", len(valid_index))\n        \n    # \u5b66\u7fd2\u3068\u691c\u8a3c\u7528\u306b\u30c7\u30fc\u30bf\u5206\u5272(user_id\u306f\u3082\u3046\u4e0d\u8981\u306a\u306e\u3067\u524a\u9664\u3059\u308b)\n    train_x = full_data_x.iloc[train_index].drop([\"user_id\"],axis=1)\n    valid_x = full_data_x.iloc[valid_index].drop([\"user_id\"],axis=1)\n    \n    train_y = full_data_y.iloc[train_index]\n    valid_y = full_data_y.iloc[valid_index]\n    \n    # \u56de\u5e30\u4e88\u6e2c\u7528\u306elightgbm\u30e2\u30c7\u30eb\u3092\u8a2d\u5b9a\n    gbm_model = lgb.LGBMClassifier(\n        boosting_type='gbdt', # \u6728\u3092\u4f5c\u308b\u3068\u304d\u306e\u30eb\u30fc\u30eb\n        num_leaves=CFG['num_leaves'], # \u8449\u306e\u6570\n        max_depth=CFG['max_depth'], # \u6700\u5927\u306e\u6df1\u3055\n        learning_rate=CFG['learning_rate'], # \u5b66\u7fd2\u7387\n        n_estimators=CFG['n_estimators'], # \u6728\u3092\u4f5c\u308b\u6570\n        subsample=CFG['subsample'], # \u5b66\u7fd2\u306b\u7528\u3044\u308b\u30c7\u30fc\u30bf\u306e\u5272\u5408\n        subsample_freq=CFG['subsample_freq'], # \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u884c\u3046\u983b\u5ea6\n        colsample_bytree=CFG['colsample_bytree'], # \u5b66\u7fd2\u306b\u7528\u3044\u308b\u5217\u306e\u5272\u5408\n        objective=CFG['objective'], # \u5bfe\u8c61\u3068\u3059\u308b\u306e\u306f\u56de\u5e30\u554f\u984c\n        random_state=CFG['seed'], # \u4e71\u6570\u30b7\u30fc\u30c9\n        silent=False, # \u5b66\u7fd2\u5185\u5bb9\u306e\u8868\u793a\n        importance_type='gain' # \u5909\u6570\u306e\u91cd\u8981\u5ea6\u306e\u8a08\u7b97\u65b9\u6cd5\n    )\n    \n    # \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\n    gbm_model.fit(train_x, \n                  train_y,\n                  eval_set=[(valid_x, valid_y)], # early_stopping\u306b\u4f7f\u7528\u3059\u308b\u691c\u8a3c\u30c7\u30fc\u30bf\n                  eval_metric=CFG[\"eval_metric\"],  # early_stopping\u306b\u4f7f\u7528\u3059\u308b\u8a55\u4fa1\u6307\u6a19\n                  early_stopping_rounds=CFG['early_stopping_rounds'], # \u4f55\u56de\u8a55\u4fa1\u30b9\u30b3\u30a2\u306e\u6539\u5584\u304c\u898b\u3089\u308c\u306a\u3051\u308c\u3070\u5b66\u7fd2\u3092\u505c\u6b62\u3059\u308b\u304b\n                  verbose=CFG['verbose'])\n    \n    # \u691c\u8a3c\u30c7\u30fc\u30bf\u3078\u306e\u4e88\u6e2c(\u78ba\u7387\u5024\u3092\u4e88\u6e2c\u3059\u308b)\n    gbm_pred = gbm_model.predict_proba(valid_x)\n    \n    # \u30b9\u30b3\u30a2\u306e\u8a08\u7b97\n    # \u691c\u8a3c\u30c7\u30fc\u30bf\u306b\u95a2\u3059\u308bAUC\u30b9\u30b3\u30a2\u306e\u8a08\u7b97\n    AUC = roc_auc_score(valid_y[['target']], gbm_pred[:,1])\n    print(\"AUC : \", AUC)\n    # \u3053\u306eFold\u3067\u306eAUC\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3057\u3066\u304a\u304f\n    AUC_list += [AUC]\n    \n    # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3078\u306e\u4e88\u6e2c\n    temp_pred = gbm_model.predict_proba(test_x)\n    \n    # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3078\u306e\u4e88\u6e2c\u7d50\u679c\u3092\u8a18\u9332\n    if i == 0:\n        answer = temp_pred[:, 1]\n    else:\n        answer += temp_pred[:, 1]\n    \n    # \u6700\u7d42\u30eb\u30fc\u30d7\u306e\u307f\u7279\u5fb4\u91cf\u91cd\u8981\u5ea6\u3092\u53ef\u8996\u5316\n    if i == CFG['fold_num']-1:\n\n        # \u8aac\u660e\u5909\u6570\u306e\u91cd\u8981\u5ea6\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u6210\n        feature_importances = pd.DataFrame()\n        feature_importances['feature'] = train_x.columns\n        feature_importances['importance'] = gbm_model.feature_importances_\n\n        # \u91cd\u8981\u5ea6\u304c\u5927\u304d\u3044\u9806\u306b\u53ef\u8996\u5316\n        plt.figure(figsize=(16, 16))\n        sns.barplot(data=feature_importances.sort_values('importance', ascending=False).head(50),\n                    x='importance',\n                    y='feature');\n        plt.title('50 TOP feature importance')\n        plt.show()\n        \n    # \u4f7f\u3063\u305fDF\u306e\u524a\u9664\u3092\u3057\u3001\u30e1\u30e2\u30ea\u3092\u89e3\u653e\u3059\u308b\n    del train_x, valid_x, train_y, valid_y\n    gc.collect()\n\n# 5fold\u5e73\u5747AUC\nprint(\"AUC\")\nprint(AUC_list)\nprint(\"5Fold\u5e73\u5747AUC:\", np.mean(AUC_list))\n\n# \u63d0\u51fa\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\nsubmission = test_feature_df.copy()\n# \u4e88\u6e2c\u7d50\u679c\u306f\u5404Fold\u306e\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u7d50\u679c\u306e\u5e73\u5747\u3092\u7528\u3044\u308b\npred_test = answer \/ CFG['fold_num']\n\n# \u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\nsubmission['target'] = pred_test","62ada987":"# \u63d0\u51fa\u306b\u5fc5\u8981\u306a\u5217\u306e\u307f\u3092\u6b8b\u3059\nsubmission = submission[['index', 'target']]","2b32c878":"submission.shape","7de1588f":"submission.head()","c5a5581a":"# \u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u51fa\u3059\nsubmission.to_csv(\"submission.csv\", header=True, index=False)","acf7de2c":"\u6700\u4f4e\u3067\u30824\u56de\u3001\u6700\u9ad8100\u56de\u6ce8\u6587\u3057\u305f\u3053\u3068\u306e\u3042\u308b\u30e6\u30fc\u30b6\u306e\u30c7\u30fc\u30bf\u3068\u306a\u3063\u3066\u3044\u308b","9bce4e5a":"# target\u306e\u78ba\u8a8d","18bbf3cc":"# \u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210","2bfefea3":"# \u5b66\u7fd2\u7528\u30b9\u30bf\u30fc\u30bf\u30fcNotebook\n\u3053\u306eNotebook\u306f\u5b66\u7fd2\u7528\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30b3\u30fc\u30c9\u3067\u3059\u3002  \n\u3053\u306e\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u30b9\u30b3\u30a2\u6539\u5584\u3092\u8a66\u3057\u3066\u304f\u3060\u3055\u3044\u3002","4a7d0680":"# \u30c7\u30fc\u30bf\u306e\u78ba\u8a8d","9e4b1b3f":"# \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f","82d0245e":"# \u4e0d\u8981\u306a\u30c7\u30fc\u30bf\u306e\u524a\u9664","cd97cf22":"\u30d0\u30ca\u30ca\u306a\u3069\u306e\u751f\u9bae\u98df\u54c1\u304c\u591a\u304f\u8cfc\u5165\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u308b  \n\n","6f53a3eb":"# \u5b66\u7fd2\u30fb\u63a8\u8ad6","c97bcfc5":"# \u7279\u5fb4\u91cf\u306e\u4f5c\u6210","1c01a180":"# \u30d1\u30c3\u30b1\u30fc\u30b8\u8aad\u307f\u8fbc\u307f","bb45bfd2":"\u7d0410%\u306e\u78ba\u7387\u3067\u518d\u8cfc\u5165\u304c\u884c\u308f\u308c\u3066\u3044\u308b","feabb7f4":"\u5b66\u7fd2\u30fb\u30c6\u30b9\u30c8\u3068\u3082\u306b10000\u540d\u305a\u3064\u306e\u30e6\u30fc\u30b6\u306e1\u3064\u306e\u6ce8\u6587\u30c7\u30fc\u30bf\u306b\u306a\u3063\u3066\u3044\u308b","6eec50e4":"# \u53ef\u8996\u5316\u30fb\u7d71\u8a08\u91cf\u306e\u78ba\u8a8d","f06f9870":"# \u4f5c\u6210\u3057\u305f\u7279\u5fb4\u91cf\u306e\u78ba\u8a8d","12f98cb2":"# \u6b20\u640d\u306e\u78ba\u8a8d","b9e55692":"### \u5546\u54c1\u5225\u306e\u8ca9\u58f2\u6570\u3092\u6570\u3048\u3066\u3001\u3069\u306e\u5546\u54c1\u304c\u4eba\u6c17\u304c\u3042\u308b\u306e\u304b\u8abf\u3079\u3066\u307f\u308b","74e5396b":"# \u6a5f\u68b0\u5b66\u7fd2\u4e88\u6e2c","dbeadc71":"\u5b66\u7fd2\u30c7\u30fc\u30bf\u30925\u5206\u5272\u3059\u308b\u3002\n4\u3064\u3092\u5b66\u7fd2\u7528\u30011\u3064\u3092\u691c\u8a3c\u7528\u3068\u3057\u3066\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u30925\u56de\u7e70\u308a\u8fd4\u3057\u3066\u3001\u305d\u308c\u3089\u306e\u5e73\u5747\u7d50\u679c\u3092\u691c\u8a3c\u30b9\u30b3\u30a2\u3068\u3057\u3066\u7cbe\u5ea6\u304c\u5411\u4e0a\u3057\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3002  \n\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u306f\u3001\u4f5c\u6210\u3055\u308c\u305f5\u3064\u306e\u30e2\u30c7\u30eb\u306e\u7d50\u679c\u305d\u308c\u305e\u308c\u3067\u4e88\u6e2c\u3092\u884c\u3044\u3001\u305d\u308c\u3089\u306e\u5e73\u5747\u3092\u6700\u7d42\u4e88\u6e2c\u7d50\u679c\u3068\u3059\u308b\u3002","2e19a3d2":"## \u5546\u54c1\u3054\u3068\u306e\u8cfc\u5165\u6570\n\u5546\u54c1\u3054\u3068\u306e\u8cfc\u5165\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u306e\u5546\u54c1\u304c\u30e1\u30b8\u30e3\u30fc\u306a\u5546\u54c1\u304b\u3069\u3046\u304b\u3092\u7279\u5fb4\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3066\u307f\u308b","e7982b64":"# \u5404\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u306e\u78ba\u8a8d"}}