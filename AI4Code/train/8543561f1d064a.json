{"cell_type":{"f3630f50":"code","70f3f2b8":"code","02b25f7a":"code","23cd05e6":"code","807d1da9":"code","ef52f738":"code","bf9a7176":"code","6de97c6c":"code","0deeceeb":"code","e5273d0c":"code","f0f0eb15":"code","622da683":"code","c5863762":"code","3a6df311":"code","4b107b9b":"code","ef1a9aed":"code","7b24e68b":"code","bcbf9a22":"code","f5fb9fd9":"code","6efa5bf4":"code","c5f0beab":"code","da02ecdd":"code","82bb6489":"code","edebe5bd":"code","f639bd72":"code","e3971b6e":"code","a137c722":"code","136e476f":"code","387e5641":"code","473daf14":"code","58ab3486":"code","59ad8dce":"code","24f31310":"code","9aa7a60c":"code","a40fd3fe":"code","8b779afd":"code","35bc8804":"code","b52fb4f3":"code","829a6a94":"code","c4a17857":"code","67103335":"code","19a686a6":"code","3c7e01d0":"code","9e02c1bd":"code","c51cd263":"code","d90bb5fe":"code","056d6d03":"code","bf438b2a":"code","ca930b1f":"code","2a66230d":"code","4abc2ce5":"code","dcc11b73":"code","a3c17f2f":"code","ee405f8f":"code","1a99745f":"code","7529f5fd":"code","30da9c7e":"code","cecd49db":"code","9ca720e2":"code","37747ca6":"code","a01de593":"code","f8d21902":"code","7195741c":"code","6b30d030":"code","68e51228":"code","4359e885":"code","620e42c5":"code","41e77b44":"code","9b8d5900":"code","911151be":"code","0380b81c":"code","0b149cb4":"code","e43c14be":"code","60c90e7f":"code","cf396556":"code","9f416c61":"code","fb9e10fe":"code","bd28e029":"code","47d2810a":"code","007fbf46":"code","dea245ab":"code","24ccdf98":"code","7806eecd":"code","bb7a4c15":"code","bd09374d":"code","80f8082b":"code","3d81f965":"code","0eaffc68":"code","b1f384f9":"code","eb12f02d":"code","82449ce0":"code","0cf0eb60":"code","393457e8":"code","48a8c581":"code","50bd3ec3":"code","14d029e2":"code","d2128be6":"code","3f34e663":"code","a2ce49a6":"code","f60ce577":"code","e2024963":"code","ca26c2cc":"code","2906085f":"code","d1ead082":"code","b9364080":"code","4e743cd9":"code","d3b61a8b":"code","19bd1314":"code","d9d71fc6":"code","7ea85e27":"code","46e86596":"code","2468347a":"code","d862a482":"code","fdba9c96":"code","99fbad46":"code","3f1e4b89":"code","a452d47f":"code","e1f820ad":"code","4a159e27":"code","4da7df9e":"code","57ad198a":"code","0daec483":"code","e334d248":"code","b723089b":"code","86fd927f":"code","295625f0":"code","2cf213b8":"code","8a322416":"code","b068a956":"code","8ff7b637":"code","8d506dd5":"code","37cd9836":"code","a1558a9f":"code","02c78182":"code","ec96d0c1":"code","8e6c395b":"code","67d0e692":"code","355462fd":"code","0369dc85":"code","95b78dad":"code","a7b7d139":"code","bb41ec84":"code","cffb180c":"code","be0242d0":"code","60b9f69f":"code","1bdd5d81":"code","e4f7d97a":"code","a1834d56":"code","db67512c":"code","225d2193":"code","e4f7e3d9":"code","0cd659d8":"code","364337c0":"code","2e7ef44c":"code","c9b2387a":"code","d1123a46":"code","cf1074b4":"code","fd0a54db":"code","75b347ef":"code","a848afcf":"code","742994e8":"code","ab37b336":"code","36e3f3a7":"code","5746d9e9":"code","6c78b2cb":"code","e28f6bd9":"code","11ef74f7":"code","e9a4e7b8":"code","d872bf22":"code","b73be2ce":"code","58e72cae":"code","e0eaa4e7":"code","70f6fda5":"code","865e1c3f":"code","6e7dd5c4":"code","d37ce143":"code","94d6e8b1":"code","973f4aa2":"code","265544dc":"code","8d7e9451":"code","002750fa":"code","aba369a1":"code","1e98035f":"code","3b920504":"code","172f4856":"code","acddc936":"code","346a24d5":"code","5792008a":"markdown","f532d4f6":"markdown","b2e1c65f":"markdown","205f8412":"markdown","bf863b26":"markdown","3c1fe52e":"markdown","6f77766a":"markdown","91d09359":"markdown","1fb3e28a":"markdown","540e25d9":"markdown","d8f6c857":"markdown","6f9fd990":"markdown","1cfd3988":"markdown","cf82a6d5":"markdown"},"source":{"f3630f50":"import numpy as np\nimport pandas as pd","70f3f2b8":"# list multiplication with a constant\nl=[1,2,3,4,5,6,7,8]\nl*2","02b25f7a":"# numpy array miltiplication with a constant\na=np.array([[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8]])\na*2","23cd05e6":"# Get the number of dimentions of the array\na.ndim","807d1da9":"# Get the shape of the array\n# shape -> dimentions,datapoints in each dimention\na.shape","ef52f738":"# Get the type of array\na.dtype","bf9a7176":"b=np.array(['hi','hello'])\nb.dtype","6de97c6c":"c=np.array([1.0,2.0,3.0,4.3])\nc.dtype","0deeceeb":"# Get the length of one array element in bytes\na.itemsize,b.itemsize,c.itemsize","e5273d0c":"# the ndim parameter is used to control the number of dimensions of the array \na=np.array([1,2,3,4,5,6,7,8],ndmin=3)\na","f0f0eb15":"a.shape","622da683":"a.ndim","c5863762":"# get documention of any method \nprint(np.array.__doc__)","3a6df311":"# change the datatype of numpy array\na.dtype='f'","4b107b9b":"a.dtype","ef1a9aed":"# we can mention the datatype while defining the array\na=np.array([1,2,3,4,5,6,7,8],dtype='f',ndmin=2)\na.dtype","7b24e68b":"# There are many ways of defining the datatype of the array\na=np.array([1,2,3,4,5,6,7,8],dtype=np.float16,ndmin=2)\na.dtype","bcbf9a22":"# we can define a continuous array just like a list using range function\nnp.array(range(100))","f5fb9fd9":"# numpy provides it's dedicated function to do the above code using arange\nnp.arange(1,17,0.2)","6efa5bf4":"# linspace function returns number spaces evenly w.r.t interval\n# parameters\n# start->starting from\n# stop-> till\n# num-> No. of samples to generate\nnp.linspace(1,10,20)","c5f0beab":"np.linspace(1,10,10)","da02ecdd":"# understanding the working\n# both leads to different results\n# 2 to power of array\nprint(\"2 to power of array =\",2**np.linspace(1,10,10)) # 2**[....]\n# array to power of 2\nprint(\"array to power of 2 =\",np.linspace(1,10,10)**2) # [....]**2 ","82bb6489":"# logspace does the same thing as lin space with same parameters but wrt to the interval on a log scale\nnp.logspace(1,10,10,base=10)","edebe5bd":"# empty return a new array of given shape and type, with random values that are close to zero\n# it takes parameter as a touple with (rows,columns)\nnp.empty((2,5))","f639bd72":"# ones return an array with all 1 \n# it takes parameter as a touple with (rows,columns)\nnp.ones((2,2))","e3971b6e":"# zeros return an array with all 0 \n# it takes parameter as a touple with (rows,columns)\nnp.zeros((2,3))","a137c722":"# random return an array with all random initialization \n# it takes parameter as a touple with (rows,columns)\nnp.random.rand(3,4)#ranges b\/w 0,1","136e476f":"import seaborn as sns\nimport matplotlib.pyplot as plt\n# chisquare return an array with all random initialization that follow chisquare distribution\n# it takes parameter as a touple with (rows,columns)\nchi=np.random.chisquare(4, 2000)\nplt.figure(figsize = (16, 7))\nsns.distplot(chi)\nplt.title('Distribution Plot of chisquare numpy array\\n', fontsize =  20)\nplt.show()","387e5641":"# randint return an array with all random initialization that are all integers\n# it takes parameter as a touple with (rows,columns)\nnp.random.randint(100000,999999,20)","473daf14":"a=np.arange(1,17)\na.shape","58ab3486":"a.shape=(2,2,4)#it changes shape locally\na","59ad8dce":"a.reshape(4,4)#changes shape and returns the resultant","24f31310":"# horizontal alignment\na.reshape(1,-1)","9aa7a60c":"# vertical alignment\na.reshape(-1,1)","a40fd3fe":"# resizing the array\na.resize(4,4)\na","8b779afd":"# resizing another way\nnp.resize(a,(4,2))","35bc8804":"a.shape=(2,1,4,2)","b52fb4f3":"a.shape","829a6a94":"# transpose array \nnp.transpose(a).shape","c4a17857":"# swap\/interchange tow axis in an array\nnp.swapaxes(a,1,3).shape","67103335":"# Roll the specified axis backwards, until it lies in a given position.\nnp.rollaxis(a,3,1).shape","19a686a6":"# flatten function flattens up multiple dimenstions to a single dimention\na.flatten()","3c7e01d0":"list(a.flat)","9e02c1bd":"# ravel also flattens up multiple dimenstions to a single dimention\nnp.ravel(a)","c51cd263":"# another way of flattening the array\na.reshape(-1)","d90bb5fe":"a.shape=(4,4)","056d6d03":"a","bf438b2a":"# get first column\na[:,0]","ca930b1f":"a","2a66230d":"# at interval of 2 rows get first column elements \na[::2,0]","4abc2ce5":"# indexing in both row and column\na[::2,::3]","dcc11b73":"# we can use a list to get multiple columns and vice versa\na[1::2,[1,2,3]]","a3c17f2f":"a[[0,1,3],:2]","ee405f8f":"# using list to access both rows and columns\na[[0,1,3],[1,2,3]]","1a99745f":"a","7529f5fd":"# get all values that are even\na[a%2==0]","30da9c7e":"# get all values that are greater than 5\na[a>5]","cecd49db":"b=np.arange(100,116)\nb.shape=(4,4)","9ca720e2":"a","37747ca6":"b","a01de593":"# nditer provides many flexible ways to visit all the elements of one or more arrays in a systematic fashion\nfor i in np.nditer(a):\n    print(i,end='   ')","f8d21902":"# nditer provides many flexible ways to visit all the elements of one or more arrays in a systematic fashion\nfor i in np.nditer((a,b)):\n    print(i,end='   ')","7195741c":"# expand array shape\nnp.expand_dims(a,axis=2).shape","6b30d030":"x=np.expand_dims(a,axis=2)\ny=np.expand_dims(x,axis=0)","68e51228":"x.shape,y.shape","4359e885":"# squeez array\nnp.squeeze(x).shape","620e42c5":"# axis=0 row, axis =1 column\nnp.squeeze(y,axis=0).shape","41e77b44":"np.squeeze(y).shape","9b8d5900":"a,b","911151be":"a+b","0380b81c":"# concatinate array\nnp.concatenate((a,b),axis=0)","0b149cb4":"# column wise\nnp.concatenate((a,b),axis=1)","e43c14be":"# stacking up array\nnp.stack((a,b),axis=0)","60c90e7f":"np.stack((a,b),axis=1)","cf396556":"# vertical stack\nnp.vstack((a,b))","9f416c61":"# horizontal stack\nnp.hstack((a,b))","fb9e10fe":"# spliting up array\nnp.split(a,2,axis=0)","bd28e029":"np.split(a,2,axis=1)","47d2810a":"# vertical split\nnp.vsplit(a,2)","007fbf46":"# horizontal split\nnp.hsplit(a,2)","dea245ab":"# appending new rows\nnp.append(a,[[12,34,56,78]],axis=0)","24ccdf98":"np.vstack((a,[[12,34,56,78]]))","7806eecd":"# appending new columns\nnp.append(a,[[12],[34],[56],[78]],axis=1)","bb7a4c15":"# inserting at a position\nnp.insert(a,1,[12,34,56,78],axis=0)","bd09374d":"# inserting column at a position\nnp.insert(a,1,[12,34,56,78],axis=1)","80f8082b":"# delete row\nnp.delete(a,0,axis=0)","3d81f965":"# delete column\nnp.delete(a,0,axis=1)","0eaffc68":"a=np.array(['hello','x','abc','setl','abc','python','x','c','hello'])","b1f384f9":"# get unique elements\nnp.unique(a)","eb12f02d":"# unique elements with count of each\nnp.unique(a,return_counts=True)","82449ce0":"# unique element with first position of occurance\nnp.unique(a,return_index=True)","0cf0eb60":"# unique element with inverse positioning of occurance\nnp.unique(a,return_inverse=True)","393457e8":"a=np.array([[12,8,333,45],[666,7,9,0],[123,444,56,89]])","48a8c581":"# maximum of array\na.max()","50bd3ec3":"# row with maximum values\na.max(axis=0)","14d029e2":"# column with maximum values\na.max(axis=1)","d2128be6":"# minimum value \na.min()","3f34e663":"# row with minimum values\na.min(axis=0)","a2ce49a6":"# column with minimum values\na.min(axis=1)","f60ce577":"# sum of all values\na.sum()","e2024963":"# sum of all rows\na.sum(axis=0)","ca26c2cc":"# sum of columns\na.sum(axis=1)","2906085f":"# mean of array\na.mean()","d1ead082":"# mean of rows\na.mean(axis=0)","b9364080":"# mean of columns\na.mean(axis=1)","4e743cd9":"# perform an indirect sort along the given axis using the algorithm specified by the kind keyword.\nnp.argsort(a,axis=0)","d3b61a8b":"# sort array\nnp.sort(a)","19bd1314":"a[:,a.argsort(axis=0)]","d9d71fc6":"for i in a.argsort(axis=1):\n    print(a[:,i])","7ea85e27":"# floor value\nnp.floor(1.99)","46e86596":"# ceil value\nnp.ceil(1.0000001)","2468347a":"a.sort()\na","d862a482":"np.sort(a,axis=0,)","fdba9c96":"a*3","99fbad46":"# matrix \nimport numpy.matlib as ml","3f1e4b89":"ml.matrix(a)","a452d47f":"# identity matrix\nml.identity(4)","e1f820ad":"# identity skewed\nml.eye(4,5,-1)","4a159e27":"# zeros matrix\nml.zeros((3,4))","4da7df9e":"# ones matrix\nml.ones((4,3))","57ad198a":"# cos of array\nnp.cos(a)","0daec483":"# sin of array\nnp.sin(a)","e334d248":"# inverse sin\nnp.arcsin(a)","b723089b":"# inverse cos\nnp.arccos(a)","86fd927f":"# inverse tan\nnp.arctan(a)","295625f0":"# peak-to-peak values greater than 2**(n-1)-1 will be returned as negative values\nnp.ptp(a)","2cf213b8":"np.ptp(a,axis=0)","8a322416":"# if condition, true, false\nnp.where(a%2!=0,'odd','even')","b068a956":"x=np.array([5,7])","8ff7b637":"# square root\nnp.sqrt(sum(x**2))","8d506dd5":"x=np.array([5,7,45])\ny=np.array([14,57,56])","37cd9836":"np.sqrt(sum((x-y)**2))","a1558a9f":"# reading csv data\ndata=pd.read_csv('https:\/\/bit.ly\/imdbratings')#reduce link size url shortner","02c78182":"# get shape of data \ndata.shape","ec96d0c1":"# get all column names\ndata.columns","8e6c395b":"# type of data in each column\ndata.dtypes\n","67d0e692":"#string in pandas is object","355462fd":"# view the data points from beginning\ndata.head()","0369dc85":"# view data points from end\ndata.tail()","95b78dad":"# get columns from data\ndata[['genre','title']]","a7b7d139":"# usecols do the same while reading the data\npd.read_csv('https:\/\/bit.ly\/imdbratings',usecols=['genre','title'])#reduce link size url shortner\n","bb41ec84":"# access column\ndata.genre","cffb180c":"# another way of accessing column\ndata['genre']","be0242d0":"sam=pd.read_csv('https:\/\/bit.ly\/imdbratings',nrows=100,usecols=['title','genre'])","60b9f69f":"sam.head()","1bdd5d81":"sam=pd.read_csv('https:\/\/bit.ly\/imdbratings',nrows=100,usecols=[1,2,3])","e4f7d97a":"sam.head()","a1834d56":"data.head()","db67512c":"# using condition\n# get all movies data with duration of more than 200\nx=data.duration >200","225d2193":"data[x]","e4f7e3d9":"# all data with duration more than 200 and rating above 8.5\ndata[(data.duration>200) & (data.star_rating>8.5)]","0cd659d8":"# duration above 200 and genre belongs to Drama\ndata[(data.duration>200) & (data.genre=='Drama')]","364337c0":"# maximum duration\nx=max(data.duration)\nx","2e7ef44c":"data[(data.duration>200)].duration.max()","c9b2387a":"# data of maximum duration\ndata[data.duration==data[(data.duration>200)].duration.max()]","d1123a46":"# duration above 200 and genre belongs to Drama or action\ndata[(data.duration>200)&(data.genre.isin(['Drama','Action']))]","cf1074b4":"# data in drama \ndata[data.isin(['Drama'])]","fd0a54db":"# all genre whoch belong to Drama\ndata[(data.genre=='Drama')].genre.count()","75b347ef":"# unique genres\ndata.genre.unique()","a848afcf":"# number of unique genres\ndata.genre.nunique()","742994e8":"# all genre whoch belong to Drama\ndata.genre.value_counts()['Drama']","ab37b336":"# all genres maximum durations\ndata.groupby('genre')['duration'].max()","36e3f3a7":"# calculating max mean and min for genre's duration\ndata.groupby('genre')['duration'].agg(['max','min','mean'])","5746d9e9":"# calculating max mean and min for genre's duration and star rating\ndata.groupby('genre')['duration','star_rating'].agg(['max','min','mean'])","6c78b2cb":"# describe data\ndata.groupby('genre').describe()","e28f6bd9":"# list od all data which contains actor name 'khan'\ndata[data.actors_list.str.contains('Khan')]","11ef74f7":"# list od all data which contains actor name 'kapoor'\ndata[data.actors_list.str.contains('Kapoor')]","e9a4e7b8":"# count od all data which contains actor name 'khan'\ndata[data.actors_list.str.contains('Khan')].count()","d872bf22":"# sort values by star rating\ndata.sort_values('star_rating')","b73be2ce":"# star values by star rating and duration\ndata.sort_values(['star_rating','duration'])","58e72cae":"# star rating descending order\ndata.sort_values(['star_rating'],ascending=False)","e0eaa4e7":"# star rating and duration both descending false\ndata.sort_values(['star_rating','duration'],ascending=[False,False])","70f6fda5":"data1=pd.read_csv(\"https:\/\/bit.ly\/drinksbycountry\")","865e1c3f":"data1.head()","6e7dd5c4":"data1.groupby('continent').beer_servings.agg(['min','max','mean'])","d37ce143":"# getting data by a column\ndata1.set_index('country')","94d6e8b1":"# inplace= True permanently change\ndata1.set_index('country')","973f4aa2":"# getting location\n# another method loc\ndata1.iloc[:3,[0,1,2,3,4,5]]","265544dc":"# information of data\ndata.info()","8d7e9451":"# all null values \ndata.isnull().sum()","002750fa":"# correlation\ndata.corr()","aba369a1":"# mean\ndata1.mean()","1e98035f":"# median\ndata1.median()","3b920504":"# mode\ndata1.mode()","172f4856":"# absolute balue\ndata.abs","acddc936":"# save data at csv\ndata.to_csv('sad')","346a24d5":"# to aplly any function \n# data.apply(func)","5792008a":"# Numpy","f532d4f6":"## Reshaping the array ","b2e1c65f":"## Playing with indexing","205f8412":"(rows,columns)","bf863b26":"### Numpy vs List","3c1fe52e":"* NumPy arrays have a fixed size at creation, unlike Python lists (which can grow dynamically). Changing the size of an ndarray will create a new array and delete the original.\n* Data type of all elements in a numpy array are same unlike the list where it may have elements with miltiple datatypes\n","6f77766a":"## Handling multiple arrays","91d09359":"pandas.read_excel to read excel file","1fb3e28a":"## Methods of defining the array ","540e25d9":"https:\/\/www.geeksforgeeks.org\/difference-between-loc-and-iloc-in-pandas-dataframe\/\n\ndifference between loc and iloc","d8f6c857":"# Pandas","6f9fd990":"Note:- The primary functional difference is that flatten is a method of an ndarray object and hence can only be called for true numpy arrays. In contrast ravel() is a library-level function and hence can be called on any object that can successfully be parsed.","1cfd3988":"NOTE:- Both the numpy.reshape() and numpy.resize() methods are used to change the size of a NumPy array. The difference between them is that the reshape() does not changes the original array but only returns the changed array, whereas the resize() method returns nothing and directly changes the original array.","cf82a6d5":"NumPy is the fundamental package for scientific computing in Python. It is a Python library that provides a multidimensional array object, various derived objects (such as masked arrays and matrices), and an assortment of routines for fast operations on arrays, including mathematical, logical, shape manipulation, sorting, selecting, I\/O, discrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation and much more."}}