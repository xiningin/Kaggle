{"cell_type":{"8bd28591":"code","93fca2ab":"code","d92eb030":"code","26604612":"code","89b257ed":"code","13c892f2":"code","437f4ec5":"code","89086961":"code","dd45605f":"code","7075b0e6":"code","31150144":"code","c214d119":"code","67c501e1":"code","69732780":"markdown","52ebef2f":"markdown","e70554f6":"markdown","3184ea39":"markdown","b1bea42a":"markdown","d8b98313":"markdown","61a72ee2":"markdown","2082be99":"markdown","27234ca0":"markdown","ca8916dd":"markdown","5a3ebf86":"markdown","f352d6b0":"markdown"},"source":{"8bd28591":"from IPython.display import clear_output\n!pip install mglearn \nclear_output()","93fca2ab":"import numpy as np\nimport pandas as pd \nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nimport mglearn\nimport matplotlib.pyplot as plt","d92eb030":"SEED = 42\nNFOLD = 5\ngamma_list = [0.001, 0.01, 0.1, 1, 10, 100]\nC_list = [0.001, 0.01, 0.1, 1, 10, 100]\nparam_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100],\n              'gamma': [0.001, 0.01, 0.1, 1, 10, 100]}","26604612":"iris = load_iris()\nprint(\"Iris labels:\\n{}\".format(iris.target))","89b257ed":"mglearn.plots.plot_threefold_split()","13c892f2":"X_trainval, X_test, y_trainval, y_test = train_test_split(\n    iris.data, iris.target, random_state=SEED)","437f4ec5":"best_score = 0\nfor gamma in gamma_list:\n    for C in C_list:\n        # for each combination of parameters,\n        # train an SVC\n        svm = SVC(gamma=gamma, C=C)\n        # perform cross-validation\n        scores = cross_val_score(svm, X_trainval, y_trainval, cv=NFOLD)\n        # compute mean cross-validation accuracy\n        score = np.mean(scores)\n        # if we got a better score, store the score and parameters\n        if score > best_score:\n            best_score = score\n            best_parameters = {'C': C, 'gamma': gamma}","89086961":"# rebuild a model on the combined training and validation set,\n# and evaluate it on the test set\nsvm = SVC(**best_parameters)\nsvm.fit(X_trainval, y_trainval)\n","dd45605f":"test_score = svm.score(X_test, y_test)\nprint(\"Best score on validation set: {:.2f}\".format(best_score))\nprint(\"Best parameters: \", best_parameters)\nprint(\"Test set score with best parameters: {:.2f}\".format(test_score))","7075b0e6":"print(\"Parameter grid:\\n{}\".format(param_grid))\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ngrid_search = GridSearchCV(SVC(), param_grid, cv=5,\n                          return_train_score=True)\n\nX_train, X_test, y_train, y_test = train_test_split(\n    iris.data, iris.target, random_state=0)\n\ngrid_search.fit(X_train, y_train)\n\nprint(\"Test set score: {:.2f}\".format(grid_search.score(X_test, y_test)))\n\nprint(\"Best parameters: {}\".format(grid_search.best_params_))\nprint(\"Best cross-validation score: {:.2f}\".format(grid_search.best_score_))\n\nprint(\"Best estimator:\\n{}\".format(grid_search.best_estimator_))","31150144":"import pandas as pd\n# convert to Dataframe\nresults = pd.DataFrame(grid_search.cv_results_)\n# show the first 5 rows\ndisplay(results.head())","c214d119":"scores = np.array(results.mean_test_score).reshape(6, 6)\n\n# plot the mean cross-validation scores\nmglearn.tools.heatmap(scores, xlabel='gamma', xticklabels=param_grid['gamma'],\n                      ylabel='C', yticklabels=param_grid['C'], cmap=\"viridis\")","67c501e1":"fig, axes = plt.subplots(1, 3, figsize=(13, 5))\n\nparam_grid_linear = {'C': np.linspace(1, 2, 6),\n                     'gamma':  np.linspace(1, 2, 6)}\n\nparam_grid_one_log = {'C': np.linspace(1, 2, 6),\n                      'gamma':  np.logspace(-3, 2, 6)}\n\nparam_grid_range = {'C': np.logspace(-3, 2, 6),\n                    'gamma':  np.logspace(-7, -2, 6)}\n\nfor param_grid, ax in zip([param_grid_linear, param_grid_one_log,\n                           param_grid_range], axes):\n    grid_search = GridSearchCV(SVC(), param_grid, cv=5)\n    grid_search.fit(X_train, y_train)\n    scores = grid_search.cv_results_['mean_test_score'].reshape(6, 6)\n\n    # plot the mean cross-validation scores\n    scores_image = mglearn.tools.heatmap(\n        scores, xlabel='gamma', ylabel='C', xticklabels=param_grid['gamma'],\n        yticklabels=param_grid['C'], cmap=\"viridis\", ax=ax)\n\nplt.colorbar(scores_image, ax=axes.tolist())","69732780":"# 2.using GridSearchCV","52ebef2f":"# 1.using cross_val_score","e70554f6":"# split data ","3184ea39":"# GridSearch Heatmap about one parameter","b1bea42a":"# GridSearch Heatmap about parameter list","d8b98313":"#######################################################################################","61a72ee2":"# load data","2082be99":"# rebuild model by best parameters","27234ca0":"# get best model parameters ","ca8916dd":"# display GridSearch Result","5a3ebf86":"# get best parameters using GridSearchCV ","f352d6b0":"# evaluate model on the test set"}}