{"cell_type":{"c90d2d23":"code","ae4fd965":"code","767cd547":"code","162833c9":"code","919f13fc":"code","f8fe9d0e":"code","ff8771ec":"code","f4a04406":"code","2c58a526":"code","675eb572":"markdown"},"source":{"c90d2d23":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nimport tarfile\nfrom six.moves import urllib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os\nfrom PIL import Image\nimport pathlib\nimport csv\n\nimport tensorflow as tf\n\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import regularizers\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.utils import np_utils\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV\n\n#Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\n\n# Preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\n\n#Keras\nimport keras\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ae4fd965":"dataset_path = '\/kaggle\/input\/gtzan-dataset-music-genre-classification\/Data\/features_30_sec.csv'","767cd547":"seed = 7\nnp.random.seed(seed)\n\nmaster_data = pd.read_csv(dataset_path) \n# master_data = master_data.drop(master_data.columns[range(21,59)], axis = 1)\nmaster_data = master_data.drop(\"filename\", axis = 1)\n\nlabels = ['blues',\n          'classical',\n          'country',\n          'disco',\n          'hiphop',\n          'jazz',\n          'metal',\n          'pop',\n          'reggae',\n          'rock']\n\nmaster_data.head()","162833c9":"master_data.info()","919f13fc":"master_dataset = master_data.values\nX = master_dataset[:,0:58].astype(float)\nY = master_dataset[:,58]\nencoder = LabelEncoder()\nencoder.fit(Y)\nencoded_Y = encoder.transform(Y)\ndummy = np_utils.to_categorical(encoded_Y)\ndummy[0]","f8fe9d0e":"sc = StandardScaler()\nX = sc.fit_transform(X)","ff8771ec":"def baseline_model(optimizer='adam', init='glorot_uniform'):\n  # create model\n  model = Sequential()\n  model.add(Dense(58, kernel_initializer=init, activation='relu'))\n  model.add(Dense(29, kernel_initializer=init, activation='relu'))\n  # model.add(Dense(20, kernel_initializer=init, activation='relu'))\n  model.add(Dense(10, kernel_initializer=init, activation='softmax'))\n  # Compile model\n  model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n  return model","f4a04406":"X_train, X_test, y_train, y_test = train_test_split(X, dummy, test_size=0.33, random_state=7)\nmodel = KerasClassifier(build_fn=baseline_model, verbose=0)\n# grid search epochs, batch size and optimizer\noptimizers = ['rmsprop', 'adam']\ninit = ['glorot_uniform', 'normal', 'uniform']\nepochs = [15, 30, 45]\nbatches = [5, 10, 20]\nparam_grid = dict(optimizer=optimizers, epochs=epochs, batch_size=batches, init=init)\ngrid = GridSearchCV(estimator=model, param_grid=param_grid)\ngrid_result = grid.fit(X_train, y_train)\n# summarize results\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n  print(\"%f (%f) with: %r\" % (mean, stdev, param))","2c58a526":"model = KerasClassifier(build_fn=baseline_model, epochs=30, batch_size=5, verbose=0)\nkfold = KFold(n_splits=8, shuffle=True,  random_state=seed)\nresults = cross_val_score(model, X, dummy, cv=kfold)\nprint(\"Baseline: %.2f%% (%.2f%%)\" % (results.mean()*100, results.std()*100))","675eb572":"I used GridSearch Cross Validation to figure out the best fit for batch size, epochs, optimization and initalisation. I've used the results of that as my final values for the cross_val_score function."}}