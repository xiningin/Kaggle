{"cell_type":{"7ad04bda":"code","c63909e9":"code","605e1ad0":"code","3c854c94":"code","b752f423":"code","c30572bb":"code","0f80fb67":"code","5689771d":"code","249644ca":"code","43cba15c":"code","1ea297a2":"code","4824beff":"code","564c19ab":"code","2a9f9b27":"code","40abe4a9":"code","dfb22245":"code","63e9b3f1":"code","b418426a":"code","23ccdb31":"code","01ec86d9":"code","8260cef5":"code","b282299e":"code","9bfef3a8":"code","87aa26bc":"code","213e543e":"code","bc66f49c":"code","e8858714":"code","d3bc947b":"code","ea832baf":"code","5e02317e":"code","08eb688f":"code","2691d703":"code","325746d3":"code","03d9b13f":"code","c1181a4e":"code","734d32d7":"code","cee26622":"markdown","47478419":"markdown","f35fd250":"markdown","36a2a134":"markdown","f8e59ce2":"markdown","867ea16a":"markdown","53396e36":"markdown","af1b0562":"markdown","08467b62":"markdown","3744978e":"markdown","1624e3d9":"markdown"},"source":{"7ad04bda":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAYoAAACACAMAAAAiTN7wAAAAt1BMVEX+\/v7\/\/\/8OWJUATI\/6+voATpAAUpL39\/cAVZOtrrAAS4+IiY0AUJF\/gIUAUZEASY6Fhoqww9ctZZyNjpLNzs8AQ4tRfKmqq63y8vLHyMry9vnl5ebe3t8dYZu8zd6Zmp6+vsGEocBEcqOds8ynvdTW1tihoqbP2+eUlZng6PDs8fYAPYi\/v8FpjrXL2OW1x9l4mbxeh7A3cKSAoMAtZZ0AMoORrMlJeKdylblZg69mi7Ogtc13eH3rjtgnAAATmElEQVR4nO1dCXfauhL2eMPYBpst7EsIi6FAUtIHpOn\/\/11vZiTbMkvveeeQ9L5G3zktRLv0aRbJsjAMDQ0NDQ0NDQ0NDQ0NDQ0NDRWg4E+35QuDx3+1e669v8+eRytD0\/FngMO+fn7ZR5HlOKHjOFbUqp9qK83GZwPAnh1dK\/RMgic\/XCecPvU0GZ8IVEsvliPGH1EdTl1Hfvccf7vSZHwSUDOdqqGZobq1Yf1oZcy4zndNxqcA4MmpmgpcHHeUk3rOjus\/GpqLDwesjpZKhBkeeNTB\/q6EO\/Wl5uKDAc++W2DC9Fdi0AFe\/DzUi560kvpIADz6RSJM74cNhlxjHCIlwtpqLj4OAKdzJkx3y0wYzyOMPqjRzoOtufggAPx0zpkwnRpQzDHy6+g3PalyER618f4gwIt1wYQZkamAg0VLiuczBRa+aR31IeDxvoBLTKzFoiJCLrbKisO0TpqKDwDsomtMbFko5Pj7I4C96mFF75qLuwPWpneFCmEqiAkP4UZLWA\/VdI5eX9wd8Fa9woTprHGpPfsWWeZwPz0+HI9rWHlOZGU7hXVtLu4MGF24sZ7rWM6RhGK3XPds25DPj8DurXe1w9F0iA7roKm4K8AuqB1kIXKPL+\/LlZGt7y5gLA8\/0NC7a83FPQHvuffkWuFwO1va6UNUMGx7vVrudqPRaLdbrkqQkWPMHK+qvah7AgwpE14YDbf8rI6xxkUF9IamH0W+5VsW\/vOjbyNYn96XrKtg6XmRFos7AmYW8xD+OCzljO+NDg\/DCP0nOJwvwd0VHFrWfsRk1KzwVVNxNwBMPdON6gcpDuvRyz5CH4m2AlEozp1c8pr2ntd6ZLnwPLOnubgXYBk57nYpeZgdPemqWjOQAnPm4b7CEkUlGhEXb57\/rKm4F+DFfFoLIkbfo+yhtmdSyLWFH666X0PT\/U5U\/HTdN03FvQDPNj80td+HFm1ryBMeFs521bVSVJRnG66Higrz7j3T0rvld4PwhmamOEvgvU1pp4Mm+xVLwQhPUPO9PSawI+Rsp6m4I2C5Tw91ePUe7YJYtOfxePkEQ6ioHezDLSZ4drLH3xr3AD0Uyqe\/+2DUXbbZ62u7tUzXEEbfKMWbJ+RH4z4A2BZMgvPY8x6ETb5Bhek8wR5N\/arKYqSNxZ1wzgT6qbsdLbR3F3uEilysSYGJJxmeXnDfCcXjAzy2vGyD+lWbLYCW20hdXb33cSfA6sIieHSCAJ2k20zwqgKeRQpfP0C6D2B7YRH81W1HNpUKSjKVKxDtzd4FV4bceiL1NGr9jokXxZZYI03FPQDr8GyYce3GDyrebvpPplntQXYShDZC\/nQv\/grA+nxvo0WqH17WN1cVQm5gZ0tn19cK6i6A3tnkJ9+ICNrC47m85HJDZn1f2wkWo5Wm4h64tBXkmsJr6Kx6t4QiQjGAUXQEsS\/iaGf2PoBjgQqHbbYdme5PeL++BVWl3ScYev76xDu5Q\/3w6D6AU0FDuXTKA2ZIQmt19WkFLgBpof1kmeHTiJ\/EHjUT9wEPe1EoDHhAEqovxahMPdEj75XL4kBcYbo\/3Ye\/BLBUXSjeT5L2w1vbV5Z5Lu8UPpAoWcshsaefqN4LoCgoNBAUIgy2c4AnEgvPrYaO4\/sRH8DxWD21XI88KWLK11b7XlD3wvm8MgVFLh1YBrsVtdz9z8fD7Hm3XDFo4O2nx9PRjCK\/6pn8YFXjLoBRrqHkdhJAbXs8PjysYLfsXRzRNOT5QHv5\/Ho0W0+ainsB1ZF3RkV+FjO\/1aPIQxayHmn9dD\/Aa3ai\/8pz6lQY7N56vWajvl737OweHH0Dyz1ReGKxzKRBSsF6OZo9nt6O+6HpfmM\/NnKH+7fXkb555QOgGu7ocUlzHmVghRRsAVq+5YQuWXEz4rMH5OB6XtWKTlo13R2wUpYWVd+s76f7oef7TrW1VjYFo0eSlvxtvKqn9wHvjrNNWPJjhSUP32GVrrijAzHxpqTk1Z7GXQG2d\/3pqfcAsGWj7iETSMVJ3QqR105o3BM3D9qEa+jRwjr0+OD4ayGZp6XiAwCv1zfErRrAathqsYk+f82ejhBq3BsAx6uPsvmQDYj7G+GpePKADjBr3B+3Dtv44pw5pXgqKjHP1Q7Ux+DGhQbZGYLivTd0\/4o+ifZRgNU1LtyT3G86sxOeo895fBxwIX3FXrAaAuNUlAnX1NrpIwG94+ULX7iOQ7u9Lx7EcfZ60+NjAaDcKJuiWj98jwri4vkveivwowGwHF4sMLxqUW855k4z8QlA++zeeANPIAwP+tLAzwHQvdfOjQP9nmO9rrVIfBoAeu\/76JINL\/T37\/qB0eeCfKbD1LKcKh\/88Dy36ljW\/qB\/wOJPgK6\/Wc5efz5M9\/vpw8\/XmTj68aeb9UWRH7bJT3to\/EloDjQ0NP6PoS3JLSgjo4yReuZVPQB77as6tudplVKzDz7VDMZZ9t9m\/BLUwXL4Q15GA99\/1NPQw7D+o15\/4Kut34d1wvABhw8DMeKBTpstRTD9XTfl1iv09iLMHAHUhsMRpnv4MeXxXQ2HfJfjDyeKvHoPXoYiLxV9AqjnGZ+HQ3p\/7+0H\/9ICZfwSZ0VgG3ot8TQBHqpeerb10fHqQ9+l6xfhyfF4xIiK0DPrw8iNXkFQMfQ8+sipGGICCscRnfn0jjZMXb51GZaRj9O71nLrr6dpay2oMEVypMLNM9asNCPf\/rhywq\/w\/h70PM+sPkoqXIWK4dpYefQSIzyF1hJsBA6P627BXrp8xQqFzEJnRHFZcUN3ymn5XTFrJC6UoKepSIUFfFyQl+c25Teg7u57\/AU8OrImMtayjBZlRCq+glTArHWYekIBnFHRo3ETVPjLVIsTFQBbl57WURAPt2IqkIpjmjajAhnFEKYCpWbIkYawAUiFMCJMhcxYyzPWbfgyVEyt1cwS925cUNFz6fc\/MiqMjIqjK1\/5lcOdF8dScUaFe3SdR0kFZnW3+SYhUSGG+RoVlPH1q1ABy9YReqG4Ra5ARWg+z+r+1mYqnHe6Y5ylonoCe2ZF8uWhK1R4e7qQnH8\/QY6oP3pw\/Z2kYhl5VW+W+WwKFd4U841I2lIqrOc3yvhFqHhp0Q\/huHxfVoGKqtdqOQdxtiw0o1brm8lUoJUehl76xu81KjBj6z\/PChXR8xqzwYqoMGCH2a19+gN6ChUmZ6wpVGDGEJXnl6ACjTZd1bt0nMM5FaH5fqhH7FQ+hdXDbDZjx9Y1zaFLx5RlAVeoqNcw8apABTpT4augApOgd+aF0mlTpWKfZqwpGa3wtP4SVNQc88dwSB4pXYlybiuMYzVcsdleqbYCbcvsNhWXZpt+gerBDQ+hJVduq6nnHi+ouLQVlPENM3pfgYoHd4+Y1j3u+4UHNbJIR7HZlhnYbE\/d9Pqa62bbUOPQVtQA1vQOhpWWvjY95xoVMqNKBeo2z3T\/eipQfe95Jq4dehueLh2Qew+SivcwPORSAXJdgabXncJND+qYplWowOGlm5fT7Q4b5fCWVBQVFP3Sgmn+\/VIBj62ZUBnfXWsNdFfHEwPIVhwOJ9eLdvRDzuHrO4YeMAlRYcAplD9bdNVWUNqnGuQKqiYMkenguuLtfblavVSt10tbkWWsWTkVBrbt75cKsMNILg9GrdaBfnHTaRG+Aby2rFYr8sMnvhfCiij4P7i6iCISn57nf+NDsPDeahWp8Hyfi0Bxm3Ec1L8xFWvPaqE8mK3I8SP\/uyRgGMn9JfAtizNOaXOEM+5lRteP\/vaND1jP5DCCXavhonlUk0AdxJ879nGXMnSGUoFhMkisCle1WeE4rP0sE2Nxq1qN\/KGRSEF58HN0eNmeDukpNXiuPcvG1H6X0Tb+chT3to1rO+BppBKep1e\/KGVe7nUrtakFXzThdxk1NPRU+LcAoNOxNRmfhdvzHqCbBEGQTD6zOV8YMFl0b3AB5bgx2ZSDxt\/uTv87AJ2gEVyXCxjEY7q3xxh8dqO+JmCDVMyvU7GJu8KZy0IK0R\/csr8A\/9sQQaNRDhbXqZgEZTUiexc6+54GnC8Dsgy503+2OMhTwEUJafnqpWdpZFZsobq8bHXxcV6V2gU16qyZivUslpeVkg9IofUXvVYqVQZO7UuhGfO43A+CzjUuMC7oKjU0x42kLFLCfJE0xu0BBiJb+B+i3Qegz3JXlgZ9TMCfFDppksWBOSeVYsh\/Tfogk7S7VB4n6zbBsLk0\/FtEbtCL2FCc0cWGLLAlMOGIEpS4QOhg2klb5MLWnFXVpp9hKyfJAkO4oRvZF7sshD+vry1jNhssuixBK20ob\/KR4m5TITCg+LSigcgNxgSHCLthTLpUoYiWfWliXyYYuqES+jJjO+7DOJhcF4tyECw66YxbNOadfjum0YVyZdPvz7ELMImpnkYTgSmDdrO5GVeEH4BxC0FFZdPsThoNGvNuTEnT2rtBs5tgC2CASZrNAZVHbYH2BMButCmtLSPnAG0sD0pJY97vNxeYK1mIBJ1Kg0akH5Rg3mx2OV8HupVCVRWcf4tFv9+lkcGGbhpiBsK80uAfgS6J+nAwK5KKxQJsDJnEVL\/oiTJrYdLAQmLsdjPuNtsVMYgw5h5gFxJsJTE3ptkay9h5pSs62h5j6HiM\/a9wE9Foj7GkoHGdChyYIJiIYxgTbASiHWDwvDJPlcAkICrG8i+SIsxVYb7sYBFTw7EDOGxQGqMnhoOvbFJAF4NsnAjce1FeIybGBBVdEdZPI5mKdqOTVp5MxGcnDtqSCsjyicHPq4pxkcQNoSYFKGP9uAliwPkLUiHry6locwmicTw3x42uQkVCRTZpALHiciCmfbAgjxNKOGlFLqYi2KRUlJS+YBRWy2aALTPYcTC4wUV\/HAQ8m0sNwXUHmw3jzLioVBiyQjASiodmoxRvUir4g+QysBW12qU+EH8DHiQqr7xIsN6ciiy\/wc3HvmeDAUlZJMDxoMlBVNAUEMMlqciqIipiqXCZilLQFJk7i3FOhVGkwlD\/7sT9dpKPzgRbWqKKmzRNN4KK8qJfIRXIM4zTXaHCSKlAro1EUNGISzSUQfuGsWeRoWnI5VM\/MaOkRaWiVCrZWYWosOiP8Qa\/KFQYSD8OfgfT5lJh2BPymJEKDGYqOpVNSsXG5jBVKrAvfYUKTGDTaNptVDIXVNhqVaRJJ5UyBzD9XR5h2IxFmdgtWd9NKpoN\/D7I+56gKaERJamweXLjtJ5D0mZzV5Em54wK0f9cKkSHcOVA8wpuGW4xFRJ0pHja8p9IZCfunlGBdJG9SamY0NTvo3bqk2lJZzU1EanApItsfNCTTqhhg7iBYCqwD31BRYJBZEiweSibJbYV0Kx0cioowZwkxS5hT86pKFYV8\/gEAUVCY1EeJwMxQZqYYyKMEGbow20qEiQwaSt9T+IFTbp5UC43yoZQBRnH8wZNqnMqsFGNJKVikUwWDaEm21g39zO4teIWXSKpkLMBm9IJzqkgqSgpVJBVmNAoJO2ciqtS0elMRO8zqQBjPD6XCnQYOsbvpKKEFA3+USpoYrF5RSq6UuMO4pIQ43+UCpJOWodlRU6SUqdMKmMeTMqxSIOqwOjEYhhK5QopoN9IxWLcRWXPajJIhKO2aFwz3NL3mAcJpJKAWbDMwsy4sBUG2RLUlQ3mmJVbX2r0C1tBQ9BOcstIVGD6brloKzqZfk01paQitRUoMotk0Pi9reBPVFIdtk8DLggWPBVJtv7JVpDwq7OWzTb3lRQUmTgy2tzrRJ4AJQH\/ra0oS9snjDY7HdcMN\/RFZDkuM4FcQpPsK00BsbA696A2wuPAjs1xwnc6OKogPSh0x0opFblUkPjEhjTbIKQCZ9646EEpZttIxukyTFABkopOPL5GRcFWpKVxQ8vkM3QqA2xmiQa04EHxlwIVaObnlJRtfE4FmkM22x1yV1EVlDDNvDJIGzbPqeCQMw+qLekSRlt0sriwFoGLxmbQ6Zdjdto7FVSG2CrWqrhGwC4PcJYrCsqmHtqlTpOpG08Ej6zc+hg8YcdCKKhSRkWn1G8sWEGRNpFUGLTSkQqqVKSCOoPmEEpNWleQgirZTAXOkji5oqDSHrIHNSDmG7agwqaKJ2IWkQVCKkR9QluWzqkgMwCKhiQFVRrEbelBoYZko00gLT7HajbUMEHFRDRVKKiSQgXKEwbHqaIhs3lhuHEhx1hITZkEi6QiNFBnUUnGLNWTClFRieO4glM0ps+kSZ6AFOrBrwF+p+BFX\/gVlGaRjk8l5vKxtxSM07TcFiqJqAi4uAGWIakQTieaw\/E4TjBXgxM0ofOLOVjEYqkmVfWGy5RzGDa\/sFG\/GoskoEnIM2rwq2vItUUJ53Qpq48zxrZ02jEdU9EQxRqpu0ndrlRwsS9cCaq+GQvNtPnV6VSCccIL4oSXeLKpcy67IfoC5PXTJIdF5pih2FcuDTfO+3lz3sn2VPqDfmo\/cIIN+hzBC0CbYYi3H0Sw3FgHm99gsDMLIZNKKOnTEkSuQlI7bY+dNmTAGrKYANJ0dl64bWcb\/OTqGH3RapC1lIy8mXkbzhqTFpiKspEXmbVehHNm2f6sLoPf1bhSNsgKuBn5cwhQ\/8i5UJSt\/PPiO2QJ+Y\/cTqqfZxkLf6nheVWFpHmaYuXnCYof51VdtJq3+5Si8\/TyCxQKPG+F0vosgdrryxFKh6i4Uyh2HbOuF7ccNTQ0NDQ0NDQ0NP5fof3afwv+C2hdqCdSJc9fAAAAAElFTkSuQmCC',width=400,height=400)","c63909e9":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxATERUREhMVFhUXFhYaGBgYGBgZGhgdGhUXFhgVGh4ZISghGx8lGxgaITEhJSkrLi8uGB81ODMuNyguLisBCgoKDg0OGxAQGy8lICYtLS0tNS0tKzUtLS0rLy01LS81LS0tLS0tLS0tLTArLS0tLSstLS0tLS0vLTUuLS0uLf\/AABEIAKQBNAMBIgACEQEDEQH\/xAAcAAEAAQUBAQAAAAAAAAAAAAAABQECAwQGBwj\/xABOEAABAwIEAwMFCgwEAwkAAAABAAIDBBEFEiExBkFREyJhBzJxgZEUI0JSkrGy0eHwFiQzNFNyc5Ohs8HSQ0RighU1gxclVGN0daLC0\/\/EABoBAQADAQEBAAAAAAAAAAAAAAABAgMEBQb\/xAAxEQACAgEDAwIDBQkAAAAAAAAAAQIRAxIhMQRBURNhMpGhBlJxgcEFFCIzcrGy8PH\/2gAMAwEAAhEDEQA\/APcUREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAWNbpz9pVcg8faUbsqoCmQePtKZB4+0qqICmQePtKZB4+0qqICmQePtKZB4+0qqICmQePtKZB4+0qqICmQePtKZB4+0qqICmQePtKZB4+0qqIC0tG+vtKx0kzJGNkjdmY9oc0gnUEXB9iyS+afQfmUVwg0igpQQQRTw3B0I97bogJbIPH2lMg8faVVEBz3F3EPuJsbhE6UyStjDQ\/La7HvLiTfQBmq5Kn8rccheI6SRxadPfQMwva406208QpjyqmT3K0RszF0rQb3sAWSZsxGwtp6wud8n\/CtC5vu1uZwBewsdq29gDYkXLdT6dOlldVVswnkadHSUHGcsrA5lDNbPlcS8hrdL5r5dWjUEjYhWVPHD44+0lopWDPkGZ5Fza99W7fb0WDiTioMikZG0FxaWt1ta4tdatLxW2eHspQGlzQCbB1ja2bXTfVEvYxeaXJtO8o8YAJp33PLtNuh2VB5SI\/\/AA7\/AN59igOIsBZDAyRshe3QF1ruLjckk+OpuuXDxforqMWQ80\/J6U3yiMP+Xf8AvPsWaPjtp\/y7v3n2Lz6iiBBJUlCwBNMSjz5F3Ovfx20f5d37z7Fgf5RWD\/LP\/efYufdT7\/ey1RTtDgXC4TSiF1M\/J07fKQw\/5Z\/737FvRcbsIv2Dh4dp7OS88qIRmJAAHht6ls9sTtppZHBF\/wB4l5O3HHTb27B37z7FnbxmzUmIgDcmTQenRcOy1rjfmtqF\/o138fSo0oq8813O0bxY0\/4Tvl\/Yq\/hSP0Lv3lvnXLRFWVeVzCxwu07622U6EZrqcl7vb8jon8agEj3O64\/8z7FrSeUFrd6Z9\/2n9bLmPdYBy+aCLXG46G6jaqpDrtebOvcWN7+3mo0o3Wab7nf\/AIb3hEzKZ7u\/kIEg0Pdtc2sL3\/glRxwGaOp3ZrXLe028Dp97rz6mqpIrta8t2Oh++qzGcZXFxOaxTQg88z2u9vv4Ih3P35IsjuL27K5Wt2CjMUxYse2GJhkmcLho0AHxnHp7PTci8N0WhBzdIlFVQUsmJNGfJTvtqWNLwTbk0kWufE2WvimPGSjikpjlfUvZHGSNWuc6zjY82gOPqVXNI2j005NJNburvj8f97HSIoXg6qkkpGGVxe9rpGFx3dkkcwOPiQAppWTtWZZcbxzcH2dfIIiKSgRVRAURRuB4mZxKSwN7OeWIa3zCN2XN4X6KSUJ2rRacHCTjLkXUNiWPxtY7sXsfINANbb2Oo0NvSt7GDanmI\/Rv+iVlomgRsAFgGt+YKSpxVXjlVI3I7s8pIvlJBIBBte\/PZY8NxWogZ2ceUtFrdo4vdsBqdLk2udNyV6AiAgMK4haWfjDmMfflexGmvO3PnyU6x4IBBBB1BGx8VUqO4e\/N2jo6QD0CRwAQEZxu15ia1rgGl4D\/ABGSSw1B+Fl5bAqIoqeRlKX9u5wcO4Y8rch1HwQGu1HNq2fKbU5KeO+zpmA7bZJHcweYChuEa+Fxkgdo6TWMlz3ZrCxZd5PeHQWuOWivWxxZ\/iPPMeErXAOcXW59dVmpsIqm0wrNOyLrb69L26XXVcU8NymYdmA5gaC+4sQSToOvVRZwmocwQ3cWA3DdbA9bK6ZVyVG\/TTyS0ZDpMrGG7gWtdm+KBm2Oa2qhp4Hhh0Fr\/FAPz39S6Cmp5YYTFIwFxNzkIcCzS2m976H1LWmte42I2F9xpra5tvolmZEUjyFLwy9CRttuoyWINOhus0Mm3JXqzNk3Dd3mgnwAusMrfD79FRwlfTFsD8sgkB10vctAPPMBY6Dqr2yucBne18jRlkc342+vXS2qre5DjSs0pYlrSROAupd9ObEgerqrHUpIF9gpshEbGCLX2K3IXLJNlzZbHTnc68joR+rz9F1nji0tZLJaouz9LWsOt7878rLWlkBvc\/xA9evRbL26G3LRRNTDmNibIiFyRNXUd7daUkxv4g7qVxemjI97AuNsuYkt6uvsbrDKYjC0ADNl10ObNfe+1rIbrYtlhcyxJBuLrJBI0uAdsd7LXpYSbknQfey15pSLu56lSGj6KO5+\/JEO5+\/JFzHpGRuwXO4AS6eumtd4m7IXPKONpAHS5dr6B0XQt2C5LC8UhpTXyTOIb7tIFgXEl8cdgANSVSTpqzq6eDlCairdL\/JEfNX428ns4nM87M2RkTWgWOjHB5c49NN+quZVQ2w4x\/k2xVFRryLY7G\/jnkcpSbj2hboTKHHzWmGQFx5AXbzK5PAKaSeangex8QZTydp2jcmZr5w9wYDqRs2+nM8tcG1dJ3\/1HrY4ScHLJj0JX2atOMl35ravxO\/4VpyykiB3Lc59LyXn6S0K7E6med1LRFrBHpNUObmDCRcRxtOjn8zfQLLjGNOP4tRgSTuFsw1jhGxke7bTk3ckKO4VxOGmpuwlJbNG94kbY5nuLyQ+\/PMCDcnmtW1tE4Y45VLO43JvZc83\/E147K9r+qj4iqYJJaepimqOzcAJoYrkhzcwzsb5p8Ror6LFquvDnUv4rC0kdrIxr5HuG4ay+UAcyb\/OpXBKOTJLLIMsk7i63xRlysafQNfWobhnGGQUUcBY7t4wWGLKbl4J12sQd7+PXRV32TexduElKWOCck4r24dvTxyv6d+OCmGcXysje2pp53uifIx0sMeZjshsSbHuG2uunzDPT1WIVsYmge2kiOseZglkkHIuucrGnla559FsHBpRhs0H+NLHMT4vkBOX+IbdYI+IozSNbC1wm7PKI8pDo3BtjcHTu2OnhyFyG62k+xL0SuWGCvVXlJeae1P32VGXydue6hZI\/wA6SSZ7vS6Z910y5TA8VigwqOYlvdhc8NzC5Ju7IPG5sr+E8Vqp3lzy18Jia7MG5cryfyQPwwBudPRsTaEkkl7GHU4JzyZctUlJ\/wB+ETeM\/m837N\/0SsOG4vTvd2DZWGVjRmZfvCwF9Dv6Qs2M\/m837N\/0SvGMdqpIa+WRmhzXafQAMw8QR842JTLk0JMt+zuhXVylC6aVr8bPdFES8SUjZxTuktI52Ud12Uu+LmtlvfS197DcrjI\/KheKzocstrZgbsB+MBueuX\/5c1wtZiJfOJjfuuYWi+tmEEAnqTck9XErOfUxXwnf0n7ByzlJZk40tuOT6EUbw9+QH60v8165eTykQOLGwscC5zReS2mY2sA0kk+ktHjyXUcP\/kB+vL\/Net4zjLg8fP0uXBXqRq\/0OG8vNxh7SCRaePY2PmyBeE0bp5HNjjdK57nAMa0uLi47BoGt\/qXunl8P\/dzP28f0ZFxHkLhYcQkeQHSR00jox4lzGlw8bHL\/ALitOxx1bKScGcRtizlsrtL5fdN5PZn1NuQJK5iiqcQnmFPCah8pJGQOfmBHnXue7bne1uasw3ibERVtqWTTOqHPF2kvdmcT+SLL6i\/dyAeiy9K4aq6sQYzXyQiGv7JugjcwtHZEh4Y4kgm2bxLAVA0o5XEeAsehYZ3NkdYXd2c5e9umpIBudPi3Udw1wzilcx8lKXOax2VxM2XXKDzPQhbfk1xerbilPklkd2smWQF7nB7SDmLrk3IHevysvRBhsJgxyBsrIIzVN98Pmxl0cD3XtyzkhTZCimeVcR8M4pQgOqWSMY42DxJnbfe12uNjpzst\/A+BcZqohNGx7YyLtMkuTOOrQTe3iQAV29bTQ0VNT4LUzOqH1FVA8kscI2RGdhsC4kEEsIsD8M7c+Z8sWKVAxKSNz5GxxCMRMa4taAWNdnABGuYkX\/0+CWNKOcmwfEo6tlG8Ssne4BjXSEA3NgQ4HKR4grHjdJW0UxgqHSRyABxAeSCHC4cC02I3HpBXqeHTOqKLBKqouZxWta1zvPey8ouTzu1jHX52BVvHtOzFDWUzGgVtC4mMDeaFzGuc0eIJtbqG\/GKWHBHm3EFDX0UohqJHteWB9hKXDKS4A3B6tK2MVwfFKaCOon7VkcuXI7tb3Lml4BAcS05QTqBsu68oGDe7OIaamtdroIjJ+o2SZ779LgZfS4KcxZlViDcUo5KeVjGFrqNzo3Na4xixDSRYgvZcW3bIVFjQjyOuoa6OkjrXySdhI7IxwlLu93tCAbt81w16JhmG188M1RG9\/ZQNzSOdKW2GUu0udTYHQeHVdTwKRXYVXYYdXNAngHiLOsP97W\/vCqY6fcXD0NONJa1xlfyOQWcP4CIespYpESOEcX7dtKC7tXxGZre30LMwaTfNa9zsrMb4HxqnjdNKyQsaLuLJg\/KOZIDr28QNF603\/nlP\/wC2P\/nMXM4PTx4TTz10lX7piqGujijja8sc+7j3iSQDoRc25+hLGhHmmK4dXU8ME0rnhlQzNERKTmbZp1AOmjhoVdPw9iPZU0rWvc2qdlhDX3c82Jta9xoCbnQWXUeUZh\/4bg3QUtr\/APTgU1LjnuLDsDqiwvDHPu0ecWuiewlt+dnXH2qbJpHG4r5P8ap4XTPY4saLvDJg9zBa5Lmg62HxbrlKWd5kYM7jdzfhHqF61Dh7KyWqq8DxGSOolBfPTStALtdgXDQXNge8BmtcBeT4ZpNFptIzT\/cNFKZEkkj69O\/36Ih3P35IqGpe3ZcxhFHHLPiMMrGvYZ4yWuFwbwRn+i6huwRVcbo1x5XBSS7r5U0\/0IrDeG6KB2eGnjY74wFyPQTqPUs+JYNTzlrpYw4tvlN3NIvuLtINvBb64XjfDamSd5hhme40oZA+N4Y2KbtHESOOcWABaTobgEWOynSqqg82Ry1uTvzbv5nZ0tLHGMsbQ0eA38T1PishibfNYXHOwv7VwcmFVnurN2cxn91xvFSJPeRTgNzx5c+xaHtyZfOcHeI0cNwzFqcRuAkltS1WRr3gmOaWSPLG\/XVgtmB1sM46KTNtt2emKmQXvYX681503h6s9xSU0sb3PinhdA5sz3kxvkidMM5ykkWkuCNAQBdZ8QwaobM\/3mZ9IKqImJj9XxChbGMt3Aua2axLbi9r68xB36tEYuTYXO5tqV5jLgeK9kHR9q1zaasDI3SA3bJOexppHZj74ISLOB0cwa2vf0fDGObDE118wjYDfe4aAb+tAQ2J8GUT45QynibI9jwHBo7riDZw6WOui2eE8RE1M0EZZIwI5WbFj2izgR47jwKmlzVczsMRgmbo2pa6KUdXMbnif6bBzfRZZtKLtHbDJLPB45ttrdW\/C3X5r6pExjP5vN+zf9Erx3jdvvwPUyfwevYsZ\/N5v2b\/AKJXivGFRepez4hI9pzf1Cy6r4D0fs8m+pddkQiKl1sR0UzvNikPoY4\/MFwH2jklyX4VGXTxAC\/vjD6g4En2Be7YB+QH68v8168e4boJWzF743sa1p1c0tFy5rQBfcknZexcP\/kB+vL\/ADXru6VUmfIfaLIpZIJdk\/0OB8v3\/Lmf+oj+jIvEOHsYno6hlTTus9hNr6tcCLOY4c2kf0O4BXvHlwpXyULGMF3GePoNmyHmvEZOFaxvnMHy2n+q7Etj5ZySbtnas8plMHmpjwimbVm5MuYHvHd+jAbn0g67qAwbjSsgrJK4OEj5ie1a4d2Qcm2GwAADSNrc9QdGLhas\/Rjr5zfrWY8I1oFuzF\/2jPrSmR6sfJ0\/\/aRBDmfRYXT087wQZbh2W++UBjb+0DwKgcO4ucyhrKN8ZkdVPzulL7EE5bkty965bfcbrSPClb+jHy2fWrmcJ1v6MfLZ9aUyvqx8m\/ifFXumhgpZorzU597qA+zg3bIW5bnQAXzbtBU2zygxTRsbiOHw1ckYs2VxDXH9YFp9dtPBcvHw3V9p2WRue17Z2bHnut\/8CMQOnZC\/67PbvqoZPqJdzbrONqmorqacwjJTvaYaaK9hbkLAkkgAXy7DQLVqceq\/+JOxSGCSN3a3LbPc3Rga+FzsovdrTcWuN+V1mwzhnEIpC\/sGnuvY5vaNaSHsLHWIN2mzrhw+xScjMTYGubTNDhZoJnc\/3ttQ2fsyHPOYl4ALzrlJClIepHybEvlBmNTNiLcPkDnUjIWPzOLYhmkk7Uns7ODi5p5aM310heG+MMVhlZUufVVMTA8ua50hY9oaWuJdYgZSQb8jZS75sTLMnuSMWceytKLMuyWNrMt7Pa2OQtAOncF77LWoGYpFG6LsInZjK6+aJtnSRxx5g1tmizWHYC+c673aWR6sPvEPgvFXubEXV0UVmudITDn0yyXJZmy7B1iO78EKzjjid2ITiUx9k1sYjZGHZg0XJJvYb36cgsf4GVwH5Iaf62fWqN4RrrA9kLHq9g8OqUPVjXJ0w8pn49HW+5fMpjBk7Xe7w7PmyabbW9agMF4rMVJU0M0PbQzEuaM+QxPJvnacrr65Taw1HiVhfwfX\/ohr\/rZ1t18QqfglXbCMH\/ez60pk+rHyS2B8eMjpWUdbRxVcUeseYgFnQatIIFyAdNNNVq4z5Q6qWqp6mJjIG0txDE3VjQRlcHbXu3u6AWG3VRsvC1YN4x8tn1rVfw7VfEHym\/Wp0sepHydgPKbCx8tRT4dFDWTNLXzdoXDWxLg3KNSQDbS5AvdcHhbR28VzvJH9MXK2fwdqviD5TfrWzhvD1SJo3OYA0PYSczdAHAk79EUWJZItcn1Mdz9+SIdz9+SKh0F7dlVG7KqAoiqiAoiqiAoiqiAoiqiAoud4z0FK\/wCJWQH2ksP8HLo1z\/HUZ9xSPbvEY5R\/05GvP8AVTJ8LOno\/58Pd189idkYHAtIuCCCOoOhC4\/iTDI6dgk8+7g2zmQkgZTbvOYSbAW1XYRSBzQ4aggEHwIuFEcWAdg3vNae2hALtjeVuZo0Orm3HrVnVWZYlJzUYum9jWZwtCQDcagf4NP8A\/mqTcLQhpdcaAn8jT8hf9GujAQhKXgerk+8\/mcbw5hMU8fa6MIfYZY4LiwBuD2YIOq62lp2xsDGiwaLD6z4qL4R\/NgczXXfL3m7Edq8N5DZoA25KaRVVoZdSm4yd1scZ5TR+Lx\/tW\/QkXAMN7Zrmy73yoOtTx\/tW\/QkXJYZFHkYXMc7tHFpLTbIBz23+sLeLqJ5XUJvJsIAdupuVssjG\/M\/WtMVT3TPiMAYxo7j+tg3KRa972cdSd1JRRAG4uFbk5ZrSa0jUgWy6JY3gC+5IB0HO3IXQhb7G1TxjMHAC\/XnbopFxziw678gRrvyUNRSuds0jS9juPT9+axzSvErJIg8vLXNLRcscxur9+612oOvnbaXVGi6TumZq+sLWGVhZLYgXD9C3NlcSQNS0\/OfFJKlrnEPdaMCEtyRF7u8XG7iDsSzorIJGiTLlFpQRGLXa11sr4ywDUfCsdu90UfWySRzZXgXLW37Ntmu7MVLy0NG+7fb4oXSJGGraZXgt7jXtYxzbnMbXdcct99tPBb8lMM1zvqOR1G4NuY6KIw3LFFftPfQCO73wyR5LiCwgX1uNzqdFmlqYoi4lrZZZS1wijsLm1nv3Nr6nXnoEsiUF2NhwdcggWvp1+\/1K2Z1soIJGgNhtqT8y2aqJgYe6Bq3awI7wby20cVHioYToASDzzf1Oqmyunay6okkyDsX5QNXhwJJGa+ZvTYC22qxyONjrYdPD1Krpu6QLi\/oPjbbZYG6jKQfC248PEKUiXK0a0pvzstB7CpIQ3V5pFayqZFxxFbjYsoII1W42ItboXN1BuLa2+Cb8lVrM3d1O9rm562F\/4BRZfsesnc\/fkiHc\/fki5z1zI3YKqtbsFVAFVURAVRURAVRURAVRFRAVVksYc0tcLgggjqCLEK5EBzWG1b6Nvuadr3MZpFK0FwLPgtdbZzRp42uqQVTa2pDdo6dwcWO88vtdhI5AXvf69OmUbiOCQzPEpzMlAsJGHK+3QnmPSqaXVI6454OTlJVJ915817\/TsSSisexHI3so+9NILMaNxfTMegGuvh4G1n\/CKjY1cmXoGgH5W\/rW3h+FRQ3LQS47vcbuPpP32U7szSxwdt37b\/Wy7CKEQQRwjXI0C\/U8z6zc+tbioislRjKTk23yzh\/KufxeP9s3+XKuAo5yNifFen8e4HNVwsjhLA5sjXHOSBbK9ulgdbkLlqbyf1eWz3Qg6ah7j\/8AXotoySicOfHKU7SIynlvYez5\/wCilKeS6zt4Hqxs6H5bv7VuU\/CdUN3RfLd\/arakcc+nyPsYMrbdFH1TWjn\/AAXRHhyptvF8o\/2rBPwtUkaGK\/i539qrqQjgyd4nOiNpidmDSx0jG95xacw70Ybbe5vuQNB6VY2WUMcyznsfuPNf\/tkaCx3oJB8V0MPCNVYgyRgEjZxOov3tW8vDqrZeCpe6QISS73w53Nda1u4WC4677kqG0bxxT8Gg2hhEbe1ZKxj3te06hzHMBsCNcpIG43stKnxamfVCaU5Wse58Dw42JPdfGQbD0ldBiPCtV2DYoHRXDw7NLI9x8dcpvp1ChcQ8ntZM6Jl6aOFm4YXXuQMxDS21zbqEtErDLwzQxKeOR01zEyaSQ2GTPeO2XOA0d55F9XbXKtoDTRAlkgdPdpzW7ZxF+80tZfLmAte5NtNtF0+HcFSxh0b+wljLnBubR2Qgbm3gBYaaXWeThWo07MU8bWsLexDj2ZNwRISGDX1fBCWgsc\/DIxs7JA73p0YOguAMwPeBFtrEWI8Ao94s7XmTazdPWRoPsU+zhquNw\/3MAAMpa+Qm99Qbt2ss34KT2tmjvzOZ31dEtFHiycUcwqMGhGuoINjYjxB5FdC3hGp1uYd9LOdtyv3d0PCNT8aL5R\/tVtSZX0ci7EEWEkAGwtqdc3Sw6afC39G6yMFiQBYDKGj1X09oHqUz+CdV8aL5Tv7VYeFK24IdDcG477v7VFoelk4ohpodQ4hgIFgXOa02PKxN1oV+dg7XMwgfFdfWxsp88HV48x1Oz9Ulp9oZdaNZwJicgIdLCegdLIQPaxLRosM\/B6mdz9+SJzP35IsT0i\/IOgTIOgVyIC3IOgTIOgVyIC3IOgTIOgVyIC3IOgTIOgVyIC3IOgTIOgVyIC3IOgTIOgVyIC3IOgTIOgVyIC3IOgTIOgVyIC3IOgTIOgVyIC0NHQKuUdFVEBTKOiZR0VUQFMo6JlHRVRAUyjomUdFVEBTKOiZR0VUQFMo6JlHRVRAUyjomUdFVEBTKOiZR0VUQFMo6JlHRVRAUyjomUdFVEAAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREB\/9k=',width=400,height=400)","605e1ad0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import feature_extraction, linear_model, model_selection, preprocessing\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3c854c94":"df = pd.read_excel('\/kaggle\/input\/covid19\/dataset.xlsx', sheet_name='All')\ndf.head()","b752f423":"df = df.rename(columns={'Mean platelet volume':'plateletVolume', 'pH (arterial blood gas analysis)': 'blood', 'Hb saturation (arterial blood gases)': 'saturation'})","c30572bb":"import plotly.express as px\n\n# Grouping it by job title and country\nplot_data = df.groupby(['Hematocrit', 'Hemoglobin'], as_index=False).Platelets.sum()\n\nfig = px.bar(plot_data, x='Hematocrit', y='Platelets', color='Hemoglobin')\nfig.show()","0f80fb67":"import plotly.express as px\n\nplot_data = df.groupby(['blood'], as_index=False).saturation.sum()\n\nfig = px.line(plot_data, x='blood', y='saturation')\nfig.show()","5689771d":"import plotly.express as px\n\n# Grouping it by job title and country\nplot_data = df.groupby(['Arteiral Fio2', 'Total CO2 (arterial blood gas analysis)'], as_index=False).Phosphor.sum()\n\nfig = px.line(plot_data, x='Arteiral Fio2', y='Phosphor', color='Total CO2 (arterial blood gas analysis)')\nfig.show()","249644ca":"cnt_srs = df['pCO2 (arterial blood gas analysis)'].value_counts().head()\ntrace = go.Bar(\n    y=cnt_srs.index[::-1],\n    x=cnt_srs.values[::-1],\n    orientation = 'h',\n    marker=dict(\n        color=cnt_srs.values[::-1],\n        colorscale = 'Purples',\n        reversescale = True\n    ),\n)\n\nlayout = dict(\n    title='Arterial Blood Gas analysis ',\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"pCO2 (arterial blood gas analysis)\")","43cba15c":"cnt_srs = df['Hematocrit'].value_counts().head()\ntrace = go.Bar(\n    y=cnt_srs.index[::-1],\n    x=cnt_srs.values[::-1],\n    orientation = 'h',\n    marker=dict(\n        color=cnt_srs.values[::-1],\n        colorscale = 'Reds',\n        reversescale = True\n    ),\n)\n\nlayout = dict(\n    title='Hematocrit ',\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Hematocrit\")","1ea297a2":"cnt_srs = df['Patient age quantile'].value_counts().head()\ntrace = go.Bar(\n    y=cnt_srs.index[::-1],\n    x=cnt_srs.values[::-1],\n    orientation = 'h',\n    marker=dict(\n        color=cnt_srs.values[::-1],\n        colorscale = 'Greens',\n        reversescale = True\n    ),\n)\n\nlayout = dict(\n    title='Patient age quantile',\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Patient age quantile\")","4824beff":"import shap\nimport lightgbm as lgb\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\nimport random","564c19ab":"df.isnull().sum()","2a9f9b27":"df['SARS-Cov-2 exam result'] = df['SARS-Cov-2 exam result'].replace(['negative','positive'], [0,1])","40abe4a9":"SEED = 99\nrandom.seed(SEED)\nnp.random.seed(SEED)","dfb22245":"dfmodel = df.copy()\n\n# read the \"object\" columns and use labelEncoder to transform to numeric\nfor col in dfmodel.columns[dfmodel.dtypes == 'object']:\n    le = LabelEncoder()\n    dfmodel[col] = dfmodel[col].astype(str)\n    le.fit(dfmodel[col])\n    dfmodel[col] = le.transform(dfmodel[col])","63e9b3f1":"#change columns names to alphanumeric\ndfmodel.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in dfmodel.columns]","b418426a":"X = dfmodel.drop(['SARS_Cov_2_exam_result','Patient_ID'], axis = 1)\ny = dfmodel['SARS_Cov_2_exam_result']","23ccdb31":"lgb_params = {\n                    'objective':'binary',\n                    'metric':'auc',\n                    'n_jobs':-1,\n                    'learning_rate':0.005,\n                    'num_leaves': 20,\n                    'max_depth':-1,\n                    'subsample':0.9,\n                    'n_estimators':2500,\n                    'seed': SEED,\n                    'early_stopping_rounds':100, \n                }","01ec86d9":"# choose the number of folds, and create a variable to store the auc values and the iteration values.\nK = 5\nfolds = KFold(K, shuffle = True, random_state = SEED)\nbest_scorecv= 0\nbest_iteration=0\n\n# Separate data in folds, create train and validation dataframes, train the model and cauculate the mean AUC.\nfor fold , (train_index,test_index) in enumerate(folds.split(X, y)):\n    print('Fold:',fold+1)\n          \n    X_traincv, X_testcv = X.iloc[train_index], X.iloc[test_index]\n    y_traincv, y_testcv = y.iloc[train_index], y.iloc[test_index]\n    \n    train_data = lgb.Dataset(X_traincv, y_traincv)\n    val_data   = lgb.Dataset(X_testcv, y_testcv)\n    \n    LGBM = lgb.train(lgb_params, train_data, valid_sets=[train_data,val_data], verbose_eval=250)\n    best_scorecv += LGBM.best_score['valid_1']['auc']\n    best_iteration += LGBM.best_iteration\n\nbest_scorecv \/= K\nbest_iteration \/= K\nprint('\\n Mean AUC score:', best_scorecv)\nprint('\\n Mean best iteration:', best_iteration)","8260cef5":"lgb_params = {\n                    'objective':'binary',\n                    'metric':'auc',\n                    'n_jobs':-1,\n                    'learning_rate':0.05,\n                    'num_leaves': 20,\n                    'max_depth':-1,\n                    'subsample':0.9,\n                    'n_estimators':round(best_iteration),\n                    'seed': SEED,\n                    'early_stopping_rounds':None, \n                }\n\ntrain_data_final = lgb.Dataset(X, y)\nLGBM = lgb.train(lgb_params, train_data)","b282299e":"print(LGBM)","9bfef3a8":"# telling wich model to use\nexplainer = shap.TreeExplainer(LGBM)\n# Calculating the Shap values of X features\nshap_values = explainer.shap_values(X)","87aa26bc":"shap.summary_plot(shap_values[1], X, plot_type=\"bar\")","213e543e":"shap.summary_plot(shap_values[1], X)","bc66f49c":"dfcorr=df.corr()\ndfcorr","e8858714":"plt.figure(figsize=(10,4))\nsns.heatmap(df.corr(),annot=False,cmap='summer')\nplt.show()","d3bc947b":"cat = []\nnum = []\nfor col in df.columns:\n    if df[col].dtype=='O':\n        cat.append(col)\n    else:\n        num.append(col)  \n        \n        \nnum ","ea832baf":"plt.style.use('dark_background')\nfor col in df[num].drop(['Hematocrit'],axis=1):\n    plt.figure(figsize=(8,5))\n    plt.plot(df[col].value_counts(),color='Red')\n    plt.xlabel(col)\n    plt.ylabel('Hematocrit')\n    plt.tight_layout()\n    plt.show()","5e02317e":"g = (sns.jointplot(\"Hematocrit\", \"Leukocytes\",data=df, color=\"r\").plot_joint(sns.kdeplot, zorder=0, n_levels=6))","08eb688f":"fig=sns.lmplot(x=\"Hematocrit\", y=\"Platelets\",data=df)","2691d703":"sns.barplot(x=df['Hematocrit'].value_counts().index,y=df['Hematocrit'].value_counts())","325746d3":"    plt.figure(figsize=(18,9))\n    sns.factorplot(x=col,y='Hematocrit',data=df)\n    plt.tight_layout()\n    plt.show()","03d9b13f":"fig = px.pie( values=df.groupby(['Hematocrit']).size().values,names=df.groupby(['Hematocrit']).size().index)\nfig.update_layout(\n    title = \"Hematocrit  distribution \",\n    font=dict(\n        family=\"Arial, monospace\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n    )   \n    \npy.iplot(fig)","c1181a4e":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxISEhUSEhIVFRUWGBUXFxcVFRcVFRcVFRUXFxcVFRUYHSggGBolGxUVITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGy0lHyUtLS0tLS0tKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKgBLAMBEQACEQEDEQH\/xAAaAAACAwEBAAAAAAAAAAAAAAABAgADBAUG\/8QAPRAAAgIBAwEFBQUFBwUBAAAAAQIAEQMEEiExBRMiQVFhcZGS0QYUMoHwQlJTseEVIzNDYqHBByRyc4Kz\/8QAGgEAAwEBAQEAAAAAAAAAAAAAAAECAwQFBv\/EADQRAAICAQMDAgMHBAIDAQAAAAABAhEDEiExBEFRE2EicYEFMpGhscHwFELR4VLxIzNyFf\/aAAwDAQACEQMRAD8A5IncfKgMAAo6+8wAlQAEAJGMkBkgAIwKdTkpePdAZz6jGaMLEe0QA11XWAueAFoDSFJjRVCloxikxlqLfCHRxUTQPDO+Cd6IqH6Egd5746K\/p5eQ94IUJ9PNEDCBLxyXKIYyAQKBcAHgaIHWBaEgWgGBRIFIECgGA\/kAiAJ0LGW9zPlXxCA4yTQuTqfeP+ID54NpiAEBh3H1MKRjpXgtx6gjryJMo+Dmy9NFq47M1iZnnEgAIACMZDAZIACMDNrB4fzgMyKh9IDRqxLXv\/pFyBeZQCMY6KSK2aUbQxOW\/YrLQOqOKMQRmowiIlySAiQGSAwQGENAiWKMuUOGgcs8Th8iQMyK0CkP+cRqhGjKQIFokBoECkBoDBAYsZRTk\/EP16wFxK13KsvU+8f8QNTXcAYYDQ0RhaAYAjZpHta9OPpM5Lc83qYaZ35LpJzAgMEYwGAEgMVmA6xgZsua+B0laRWV4zG4oNTLUcXzFoovUixmhRSRUzRnVjwpbyEIjOkEBggA8DK7YAIm63HdILLXB4gmmrQJrlAjKQIFAgMkAHDQOTLi07rgEDJEgaIMRaDGWiQKBApAMBiwAEZaKH\/EP16wCStUV5xy369IFJ2kzVGUBsgEQi2Bz14IYgvyW6M0a9bky4Ofqo3C\/BsmZ54DACGAAMYyvM9C40rAxsxM0JEMAJ5fD\/mMBd30jRUU29gDNXu8\/rKcTuxQ08mgTM6bDUQwVGAKgRKXY265UC49rE8GwfIk\/W\/hODpJZpZMryRS32flfz9Tj6eWRzm5xrfb3Rlx5CpDDqDY94nZkxxyQcJcPY6ZQUouLWzNrIcivmarHBB4sngED9dJ56nHp54+lhdPhrekuU2csZRwyhghdPjvsuUynSpj2uXvpS16m+vwnR1Dz64LFXPxX49jfK8uqKxte9+PYzFZ1nSPm0zpRZSL6XMcXUYsraxyTrmjPHmx5LUJXXJTNjZexIx0mNcRwTjplRIDQYGiCIFokCkQiBSFMY6FEB0yVApGfL+Ifr1gUJqOp\/L+UCYeDTGaGR2smSDR0Kgc4DAB8X4h74nwZZV8DN8yPKBAYIwEZuajrYL3oy6p7r85SQmykygBAAjz+PwjAy5nl1R3YoaV7hQ8SjUt0+SjR\/KRJFRZrEzLbS3ZpwacBgcvhW+b4J9wnJmzylBrp6cq28L5s5MvUOUWsO77eAZmw7zQYr5c15e0esnEureFa3FT77f78EY1n9NamtXfb\/Zae7OIbSxb9oegBP1mMX1C6p60lH+1+5EXm9duSWns\/csfUY2x40KUL\/EOtDgnpMYdNmx9RlyxyW62i+L7dyIYMsM2TJGV7cdv1J2wMQICknjkA304HJ9gh9kvq5Y5PMkt9rX14QfZz6hwbyKt9tvrwIe47kAEh787Px8qqaxfWrrG5JPHXav+7s1i+qXUu0nCjOdG4AY0Abo2KNe6da6zFKbxx3kuV33OldTjlJwi7a5XzNPaGvyNW4AAWL28E1R6\/wDE4eg+zumwuTg7b3q+FyuP3ObpOiw4nJwe73q+FyuP3OZU9k9MFQKCIHP1EdkxqgYIlRFolQLQTAtKxP0RGbKKW34MlfCA73vuACAtg1ADLl\/EP16wGJqPP9eUBL7z+hfkPEZojDcRR1ojkAYDsbCPEPf\/ACifBlmlUGbwZkeUQwABjGKYAY9UBdD9XNIiKDGAIALmav16S0jXFFN7lGReL8pR0LIlsxcTQQPKO3rGS8kmbsLEUfMTCcVJNPhj+8qZdnzs7bmNkzLBgx4ILHjVJBixxxxUYKkZpqbBUkecTSfI6sKGiD6QatUOrVDdST6wiqVIpKlSJUos2dn5fEFcFkFnb6cXYnB12FvHKWJ6Zut\/rw\/5scnVY28blB6ZcX\/P4irV6kua\/ZslV9Lm3T9LHEr\/ALqSb80bYMEce\/8AdSTfmjPU6joJUCiAQM8q+Bj1A5ESoi0GoFoQj4fyMZ0RVfMlfH+cB2q9v0JUBfMlQCyVADLm\/EPf9YAn+AmRbNev0gNfe+hblHEDRGG4DOtEclgaAWadLj8\/hIkzi6nJb0ovkHKGAiGMYhgMw6geKaIllRjAdMdxWS5UDUJVfnLgy8cnuZx6esuixMeL0+ElukWn5NunwliFClmvhQCWJ9gHJkWac8DstEgiiOCDwQR5EesYEiLRV\/WIrUlyEH3fGBSknwEERDTYwbmqjKp+R79gjHp9xWYecCkpLhkjGpXsyQLJAogEDPM6gx4HIiRFoHugXEX9ERnR7fgSAm+4YC+RKgFgMBmXMPEPfEP3GReT+QjGvvfQmSM0MBEQzrRHDY+PHZ9kmToyy5dC9zYJmcBIAGAiGMaEaAz1f\/TnQY82XUK+NMhGHwh1VqYsQCN3Q+2Z5m0kd\/QQUnK1exq+w32J1GLUh9XplOPYwpziyDcarwgnnrzFlzJqosvpOknDJc47V7HH7P8AsyM51GfJlXT6fFkdS5W+d34VUV5FfiAAfKnkqklbOSHSqblOT0xTYO1fsd4MOTTZlz4s2RcaPRTbkY0A45oXYv8A26XUM1NprgJdI46ZY5Wm6K+3vsppdMHR9cRnxqW2HTuFc7dwRHJok2BdmXDNKXEdvmb5OnhBNOW\/yL8X2J066fBqs+tGJMyAkHGWYMwDBVo8gc2a8h6yZZpOTikWumgoRnKVWaeyvs1m0naOlTFqFK5hkbFnVAylRiZiChNdK8+jAg+kSmpQdo0hhePLFJ88M6fZHYenzDtF9TmR8qtlBdsdHBtOUd9QNG63bR02VJlNrTpX+yoYYS1uT33+nueV0PZmlbJlXJr1THjICsMTFswN8ogNiq9s2cpUqic8MWNtpy2\/U3Zvs3921OgzY84z4M2owbH2lSD3yHaykn2\/A2BIWTUpJqnRs8KhKLW6bRj\/AOpBH9pagf8Ar\/8AxxysP3EVn\/8AYyrsDusGM6nPjXIruMCIwvw8NqMgHqqUoP72T2QnbdL5jhUVqa9v8nN7U0Bwah8RN7T4W\/eQjcjj3qVP5yoO1YpLS6E0w8a\/+S\/zEp8CXKPadsaTXjPmGLS4+6GTJs\/7XTEbAx28lLPFTCLhSt\/mzolrTdL9DzA7z7pkyDINh1CBsYRQC7Y8jBww\/CAFI2jjn2TXbWl7GTVx+ps1nYeDC6pm1gQsqONuBnCq6BryneNnJI43GgDxdRLI2rSNKSdN7lK9glW1AzZBjXTFRkZVOQku21Ni2LBq7JFCo\/U2Vdx6ebNPYPZulyarFjOZ8iMDx3JQlqbwN\/eeHgXuUt6RTlJRujCThLIoWc\/T6BMjHu8392mM5MmXLj7vYq9TsVnLHlQADZLAcdZTk0tzCMFJ7PbyVnRoyNlwagZlx13itiOHIgc7VcLvYMhPB5sFl45iUndNF6VVxdnVfszJqNRhwtmBZ9PjZWKBQqjTHKqEA9ABt3fn7JOpRi3Xf9zVRbkk32\/Yzf2TidchwanvHxIcjKcLYwyLW9sbljuq7ohTUrW090aaU1szj1LIbZIxEgFgJiKM7DxfGA+4QeIxx+8\/oIxjNDJlXmIZ1IjzrNqJQAmTdnBOWqVjxEkgBIwBABWjGeh+xXbGHS5M7ZmK78W1aVm8V35DiZZIuSVHV0nUQxuWp9iv7EfaAYNSMmpyv3exhyXfxGq4F+2PJC1siOj6nRkvJJ1Rp7K7e0zYdRo9UXXFkytlTIgsqSwIBWr\/AGQeh6mJwkmpIvH1GJxliycN2mWa\/trSJgxaLTNlbEMq5Muatrmms92DVN054raOsahJtyYZOoxRhHDBurtvv9Dr5ftPplw5UbVZdYHQquLLhCkEjgtk2i\/f8JCxytbUdD6zFGDWpy9mv3J2np9I+g7PTVZMmP8AugUdF3dEQMrCj1tfLy+IpSU5NFzli9HH6ja27GE\/afT\/AH3RDHuXS6NciBiCWbdhOMHaBdcIPXkmCg9Lvlkf1eP1I1emP+PxKOxu2dOubtBcxYYdZ3gGRVJKhmyUStXyMnp1EqSdRrsTj6nGpT1N1Is+zvaGk0y6nEmd8Zcr3Wq7ne+0KtqUqx4g3l+15GE9UqdfQeLqMUNUU2vDoftz7R6fKmhHf5MjafU48mR3x7WKo\/L0BXuA5qvOTGLV7clZerhJQp3T327Hm\/thq8Wo1uXPiJZX2USCv4caqeDyOQZpC1FI5uo6hyyNwexfru2FXZhw48L4cKhUbLgR2JI3ZH8YJXc5Jr3RKL5bKl1LW0aaXlfiyarU4NV3JzMMORA2JjjxHacKqWwkItAUxKV6FT5Rx1Ruh\/1GpLU6fHHbt\/g4+HHTKb6EE\/kZo3sTDqae6Oz2vpNJlz5cw1igZMjuAdPmJAdiaJA9smDkklX5o6nmwzk\/i\/JnPfUoNNlwBizHUI6nawDY0x5U3c9OWXg88yknrT9jRSjpq+4v2l1C5szOllSmEAkEcphxo3X\/AFKRDGtMdycuSN6kzq6vXo2sz58eryafcV2MMbsrDYAy5Ap3DkD9kj\/aSovSk1ZMupjJvS696C3beFNTpct94cZbvsqYhi7zcSAQnFlVJ5IBMND0tfgZ+pHXGXNcuqv\/AKMnZfaGLSZGVM7OmXEcbZcWNkfGSwKsqvW6iq2OLBIjlFyW6KxyUHSezXInaHaZONl\/tDLqNxA2d0+PHtHJ3l6JNgUACOOvSKMd700XKe1ar+hpxdqYhqcWTcdq6UYidp\/xBo2xVVX+MgX08+kHF6Wvf9yozWpP2\/Y43ZGsTG2beSN+m1GJeCfHkxlVHHTk9ZU1dfMcGq+hzNEGsknjpLJZrgGwsCgf0\/5gMoyNTfGMpIDN\/KAQ7imM0BUAo0Y8vI48xJZ5UpbM6Qa5icYYAGAAjAggA4SpLZLdmLOfEffLXBn3LdHpw5NttVVLMQNxoei2LJJA6jr5QborHDU9\/mX4+zu8\/wAJ7BIVe8rGz5OuxQCwJ5XkkDxDpcNVcmnpavuv8S\/SdjuxQb8Y3d3fJJQZV3IWAHmPS6JF1cNaCPTybW6\/xZMHZjtt2sh3hitbmJVWZS21VLVamuL9nWDkkKOFyqq3Nmr0uoZcWJ8u4qcmNMZLt3fd8NQCnil8r8pDceUjZwyNRjJ+VXijLpuyT\/3KuxTJp0OTbt3K4UqD4rG0+NSOD1PSJy49yo4fvJvdKzRpexsr6X7ztauSoVbtFNPkY34VBIA6k88UCYaldCXTyePXX88lui+z+TLiGUZMKqVd6dyrbMbbXcjb0B9vTp6QcknQ4dPKUdSar3fjnsWP9mSuPL3jU+MZzasGRu6xYsqUNoNMMo5v8hJ17mn9NUW5cq\/lsk\/3OKnZ7lA4KcqzBd3jKoWDED2bWPXkA1dGW2YLG2r2\/cuydkOGK7se4MyABvxugtkTjkix6Ak0CTDUi\/Slxsas3YniAxuG8I3Mbq9qsQFC7j+NegP+xpKfkt4P+LKh2U\/HQ7lZlCnk0pI5qj06Ak+RoytSJ9GQrdlNz48e0BtzbrVShQMpoXYLr0u74uNSBY2u6EbsbKBkcAEY+GqyK8J3BgNtU6nk2QeketWV6Mt34F1\/Zr4xzXLlAASWsOy9QNpNqeAb9gjUkxTxuJe\/YzFQA6s291Ozc4HdqpIIVSxPP7IPsuLWUsLrZrkxYNCDkyY3Yq2MkFVCs7MG2kKGdQa99+g9K17WiopW1IGPsPM6h1Xg5Bj8QZSCz92N1ih4uCLJHpXMNa4NFB1f88Ff9mFkGQMqoRe7Ido3WV28X1IavYpJryNW9FJWrs063sLLjXK4BOPG+UbqPK48pxF7A2\/iHS76mq5iU02kaaGtzhNnBPT8\/OaaRJgGor3QUR2XLkBiKLLgMBP6+MZSRlz9R7\/pApukB2pvZQgEFSQ8ZZNsAGxdR7xJfB48nszo4zzMTmLhACRgELCwbLAtSSG7IYhHOblq8+frNCaHwZ2RgymiL9D1BBBB4IIJBB4NxtWOMnF2jQnauUdGUdKAx4wFIvxIAtI3J5WjFpRp60\/P5IXD2hlU7g3P935D\/KACeXkAPf53HpRKySTu\/H5cFi9ouObH4StFEK7S5crsK7a3Emq44roIaUCySTtfsaU7SymzvBssTaI1lxTg2Oh816eyS4o0WWfn+PkC6\/KrM4bl12twtMtqdtVwPAvT0ipVQ1kkm5XzyOO2tQ\/eHvGAzbt6qTsp23FVU\/hF+nPxMNKKefI29+SY+0MoQIHpQj4wKH4Mh3OvTzPPrCldkqckqvbdfR8jZe2NQQ47wncGB4XkNjTG37PmmNB\/8+sWlFvNNppvn\/oyDtHJsXGCAFVlvapYh3Zm8RG5Qd1EA0QIaUJZJJJIh7Qygmm\/EzMTtUnc4O5lJFoT5lajaQKcvIo1+TdW4Hz8SY3F7QvRlI6Kvwj0orXIc9qZiD4wLstSIrMSCCWZQCxpm5NkWY9KH6kvP6Bya7I17m4YEEBUW9zKzE7QLYlEtup2jmCSQPJJ7CP2nlJKlgRtI5RCaNAqGqwPCOAfKGhD9SdVYup12RwQzCmbcSFRWZgSbZlAJ5Zqs8XK0pDcm0Pm7VykEFlIO6wceLa26txddtMTtXkgngekWhDWSXn9DC+pdXZ7VmyWWL48bgm7vaykX7hK0qh63djp2tnI5yc3e7am+xk70f3lbqGQlquri0o2U2+457VzdNy1Vbe6xbK3bv8AD27b3c3V8n1hoRepsx6ztLJkUjIQxZiSxRNw3PvNPt3KC5JoEDr6xxirCV9jnmaii7ATAtF2nbxCS0WjWYixWPX3fWAzPk6D9ekBS32AcZJgaIuA4EBkqMLosxYDuElvY8WT2N6YyJic9lgSFhYwUQsVjXESC4AAmACrz\/v8IDMLek1IFUwGWY+sYi2AyzEyiQy0bMGhfIpZQAvTczKq36WTzOLP1+DBLRJty8JNv8jrw9FmzR1xSry2kvzKtNo3OPeEJVeCw5HHXp1Htly6zBHIsUpJSfCfJMelzSg8kYtxXLRbo9Gcm4hkULVl22jxGgL9SZPVdZDptKkm27pRVvbdldN0ss+pxaSVbt1zwEdnZtzqMbErW6hdWOK9fyi\/\/R6XTGbmkpcX\/Niv6HqNUoqDuPJiOnJBYA0vLUOgurPoJ1SyQi0pOr49\/kYRxykm4q659vmNm01Y0yE8MXAHn4Kv+czhnjPPPClvFJt9t7\/waSwSjijl7StfgWZeycgyjHxu27qvy27q5HWrEwh9o4ZYPX306tP1uvwN5dFljl9HbVV\/lf4iaLR5MoJQLS7QSzBfxXVEmvIzTquuw9M1Gd27qk3x8ien6TJni5Qql5dc\/M6Os7K8aY0AQkEHfkVnNKWLuq2EWh5Tzel+1V6U8uVuS24i0t3SSbq3Z3Z\/s5+pHHBJfOSb4u2lskc\/Udm5VO+gUCg71IZCC1Cj58z0cH2jgyyUE6lutLTTTSvdfI5MvRZsacmrjzadrfYCdl5XAIA2kE7mKqoAO0liTxzDP9odPibjJ7p1STbtq9l32Hh6PNkSkls97bSXjcq1mlOMAF8bWP8ALcPVV1rpNum6lZ06jKNf8lX4EZsDxVbTvw7MOW+b8vZ1nSZAEB3RIzRTZW3F\/lEaKZmlk6qdkTqPfA2i0zTiby\/X64kGpaYxgeBSF2eUCY7tskZogGAyCITOlpU8\/wApnN9jwcj7GgzMyBcAJcYEuAAuAAJgAYAYsxFmpa4JZT5xjLcfmY0ItQwGVnMJmWdPtEFsOnKglNhHAJrJvO+\/aeJ5PR5Iw6nOpupak93\/AG0q\/c9Lqscp4MLgrjprj+69\/wBjWzZVx6c4N1rvSgpsZN1lXHlfHBnPH+mnm6iPUNU9LV94pbNP2d8HRJdRDFgeC7Vp1\/yb4a9\/c6g0mNhlWqJbHvVKAZ1QsceOyK8W74Tyn1fUYpYpv\/jKnK9ot0pS+So9JdNgyxyw8yjaVbtK3GPzZz9XqMr4WZFKumYWgBBRAgVB68c8+s9Hp8GDD1CjNqUZQdN8Sblcvbfx4OHPmzZcDlFNSjPdLmKSqPv\/ALNWPUMhZmQd993L5V8iRkWlYeTFOvvnHPCs0Ywg36Xq1B+PhfD8KXB1wy+lKU5Jep6dyXndVfu1yJm02MNpwOcCJlzn\/wAL3gV5\/srLw9TnePO2v\/LKUcf1qr\/Vk5Onw68Ol\/8AjSlP6XdfohM+tVsun1SklSdjEgKQQSDYs14X+AmmDpZw6bqOikqklqik75V7P5ojPmjLqMPVRdpvS+3ev0f4HP7Ww9xh7k8M2R3P\/glol+w8tO\/7Pzf1fUPqe0YKK\/8Ap\/FL8NkcfW4f6bB6Hdycvoto\/jydLGitrNQCdtY2AY1S\/wB2i7j+TTzMmSUPsvA4q\/jVru\/ibr8UehCEZfaGVSdfC6fjZKyvMCuPNpwhRMeLcgbktWRWbISODfs4FTbGoyy4erc1KUp1JriPwtKO++3vyRO448vTKLUYwtXy903L6+xmzavuceHDkTcrITlS6I7x9yUT0YdfznRj6Z9Xmy9TilpaktEu3wxp\/NPhmM8ywYseGatONyXfd2vqjmdqaTuspQGwaIJFHawsbh5Hmet0HVPqcCyNU90\/Fp069vBw9Vg9DK4J2tmvNPz7mPUjwmv1XM7DnKVbge6MYbgUirKPP2f8xGqM4bzliqwjqK\/KBUWXp+I\/l\/IyDqi7RcYxjDpcAbvZFcC0qJGMEBkgI7KihU5z51u9wO1RAlZAYxEuACd5zUKK07WQmIkUmAxrjAx5VqXElooIO4cyrKXBoTpUZI+NOtQb2HfYqGDmt3+39ZmaaXRq0r5cV93ldL6hSQD7xc5s3S4M9erBS+aNsPU5sP8A65NfJlmmzZEJIyvb\/iIZgTfmeeT7YT6TBNJSgnXGy2CHU5otuM2r535G+8FU2X4bDV7QKB\/3mjwweRZGt0mvo+USsk9GhPZu\/qir+1MobeHbd0vcbIHAB9RwJnLo8Dh6TgtPitjX+pzRnrUnq82B9W4JO4+KwTzZB6gnzBm3owcVHSqVV7VxRCnO27dvZ+9kGryVtDGipT\/4Y2VF9BYEiXT4nLU4q7T+q2T9xxzZIqrfFfR8oXE7KhS\/ASCRXFgEA+zrNJYoPIstfElV+zD1ZaHjvZu6NA7Ry7zkGQ76CluD4eOKIquBOd9B0zxejoWm7rfnyarq86yerq+Kqv28FmbtXMwO7ITaspsDowphQHnUnF9l9JirRBLdPvyuO5pPr+oyXrndprtw+exRh1uRdpV2GwELz+EHqAPT2TbJ0eDIpKUE9VXtzXBlDqcsGnGT249rM+PUZA4ybycl7t55N\/n8Jb6bFLF6LitHFcBHNkWT1b+LmxMjszb2Yk+d8kn1JmsIRhFRiqS7IiUpSeqTtsTO3BlAZsB8IjGWPAtFYBiNEZ3HNS0AMV2PfAemzcBz\/SQaRckByIzT4n7DXxAtJIQQLJGBBEDBGB2bnOfOisLgNAU8QBi7uajodbBMRItwATK1CCRSVhuAjLqX59glpC5M+N7MdMbjSNRHpLILMTfGRLgaG2+cmzS2VuxvrKSRcUqNGM3R\/XSSSReg48oAVHIbFUOvlCxiZW\/1fyjTKixS3kD\/ALwFyTzEAIhq7\/XAjLe\/AzvxGIpOWh+vOADoPZ5RlCsa4gOmHMorkwAy6cEAxjRcV5qBoi7ZEWjBqOGMtcDEwfiHvgUjo7ZBoinNiBjNIsiLQqBYajGSoAAiIRKjGdI5KmFHgabKu+J4laaK0UPhuufU\/wA5LomSVgyPUaQRVgOTi4VuGncGN7iaoJKiNzAOAkwJMbJYmsSbplKYiGg2XqtGhclcesaRMVZbiNm\/ZFJbFONMsL89JkOhgAR5XHuOmgkHyqACFSRBD7lT4uOLEpoqSK\/uzH+sRIRph5tX69sBlxUAHqYxiDn3e2MZCsAFKCMaVjq0CtLEaBpr+GiMYxSg1uylmA9n69kAQy9YFos3xFnOzm2MtDDgU7h8YmUkb7kliuYFFb9IzSL8jLAdkMYJikwHFWEGA6Olx+cxPn9xVUAwdjbbQ8RJVkFxrYa2IeBF3DllaMKjaG07AEqDdg5WiZOnWC3ZLFQG6PSbbUKlVgccMfykN7gthFFykStixH6ioS4NavcKv6zOh1Q2me\/ylMqWxoLgmpBBLgAFa\/Ij3wGVZiR6\/lKLVUKSB5CAqEDlr6UP5xlLYK8cQDnchMZcY2iGBSrsLUY9ewIEWAwNE5VZWIFaGlYAgBuIpKxzAuCT5Kcq3\/SA6Ig5gUi6BVAaA0Kx4jKS3IhgATAoEBolQGbMmQe8iZo8JETNuHA5g1TBxpkYHz5jtBaFZGu4Wg1Ki0n1kkUVLkHQH1g0U4vuQuOkVE0yBrMqKJYQ\/J9lzRqkVppGZ3PSuJC3djpUHGZpRnRo8pMuCkUJkaQzRpDrkqyP5Q3Cmxky3yP5cxUDi0b9F2flyY8mYFQmKtxJo2wJCgAHng9aHQXE3ToqONyi5dkacf2d1DuirV5UZ0G+uFRXKt+6210Nf6hFrRawTde5Xj7DzmwFHhxLmIJ52updVAI5chWO3\/SY9aGsM3+Fi5ew8ipiyHu9uQ4gKNlTnXfj3iuLUE8X0hrXAelJJPzX5mDFpCSq7lByUw\/EAEIsuzFdu0DrRNUb5FS7HFafqWtomFg8NTmv\/Xu3gn18J98LKhtyi\/8Ast7IDKdpYMRvNMhAIrbuJ8Q6CuvoYakLQ22YHWiRd\/H\/AJ5lFKUVCu4pgKMPIIwnBIFQBWLURqm2qIRAqFXuERFtb7FbiMAKIhodYzR1QDAEKwjNIvYXGYCfIxMdFqIYiSQGW+2R7HhexdgEkllrNXmIAUvnA9Y+R1Yj5fKohIoVTfX4RtlylaF7vm7he1Bq2oYMLF8SkiNI75TVefrGxxVgxkmSluE1SM+W903XA4VRuVrEzmtiGqYBMihSkdlKTIBXSOrK+9yb+xe1Xw96qKluNpYgltrAqVHNUR6gxSgmaJvGvhN+X7R6lt4Z7Dd5Vj\/DGRDjZcXPgXaeB6gSfTQPPN9\/57Fj\/avV7w+4BrQsVWt+xdoXJR8S0TY9WMfpRNFlk973KcnbuZlRG2lMfdbFK8J3NBSnNqSBR9YaFyZvLKknxt+Rjw6xkXagC+0brsjaSLYhSQSDQFg+6q029x6miZte7A2FLEMN1Hd4hTedEnkkkHljBRSNcbt7jntJiWO1AG3FgN4BLEEm9134R50OfUw0kykoy2Mbe6v17ZSMXV7CmMqN9gVA0+9ySA9DQrCBvBRrcO2IhUIYzdRVCssAg0kAiISW4QYy3HcS4goG6MbVCesBjjmBSbDGCBAb9ixXJHkJB4s4qLIl35\/r3QYmlQ9G\/KpJG1FWZCY00VBpDY1oCJky3Y4Q+kRIHSgTx\/WNIfJn2g+3+UtMadGlMNi4m9wUhXXb7Y1uU1cbAVBHEuzFMdVocmopOzRNWDFj54Mho3klpLmQiTRilYrI3lUpFLYmPEQSb69YA3aougIkCuwpHEY7tigQOhyUvhQQYGOSOl0SAaW1YlxnZ6cdITAwjNrgkC9MdNkqITk5ckgNIBgWkAwKsUwBCmMpAMChYDEIgUV3zAdbFiGADmMaFAgU2i442\/dPwMztHipSu6G7p6\/A3ymGw1ik2OmBz+ww\/wDkxbEyxST4HGnb91vgYrRGiXgK4j02t8pj2G8cquhxib91vgYrQtEvAmfSswra3ymUmkNRkuxl+6ZB+w\/yn6QtCcZeDXixOB+B\/lP0ibQtEvAmpDUbRuh6qR6RplaZVwyjT43YcIx9yk\/yE0tE+lLlI0fc8p\/y2+U\/STqQ9EvBbj0eQD8D\/KfpJbRSjLwH7tkv\/Df5W+kLRXp\/DdMT7pkv\/Df5W+kdo6K+EsbSZD\/lv8rfSCaOZRl4YBpcg\/y3+RvpC0PS32FGlyfw3+RvpC15N3bjVDfdMn8N\/kb6QteTHTJdgfdMn8N\/kb6QteRpO7aZPuuT+G\/yN9IWvI1GT7MX7rk\/hv8AI30ha8m6xzjEn3TJ\/Df5G+kepeSNEk6D90yfw3+RvpDUvIlB+CfdMn8N\/kb6RakWk64IdJk\/hv8AI30haGosX7rk\/hv8jfSFo00NCnR5P4b\/ACt9I9SNU9qon3XJ\/Df5W+kVoz0sU6XJ+4\/yn6QtFJMQ6Z\/3G+U\/SO0OmBtO\/wC43ymFodMXuH\/cb5TC0VTEfC\/7jfKYWi1Gyo4m\/dPwMLQOLQwxN12t8DC0CRb93f8Acb5T9I7Q6aJ92f8Acb5T9IWgP\/\/Z',width=400,height=400)","734d32d7":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQwtKeV9aHodZDTPmAd5yeoZIIG5sO7atYjwUSv6jHTlNPgfrpR',width=400,height=400)","cee26622":"Kaggle Notebook Runner: Mar\u00edlia Prata   @mpwolke","47478419":"nibts.hscni.net","f35fd250":"thalassemia.org.cy","36a2a134":"#Hospital Albert Einstein president predicts covid-19 peak in 2 weeks\n\nThe peak of cases in the covid-19 epidemic in Brazil should occur in early April. The forecast was made on 18\/march\/2020 by the president of Hospital Albert Einstein, the surgeon Sidney Klajner, in an interview with the newspaper O Estado de S. Paulo.\n\nIt's very important that people become aware of the importance of staying at home, to try to prevent the spread of the virus. For each notified case of the disease today there are another 15 infected without diagnosis.\n\nThe hospital jumped from 12 suspected cases on Monday, with four confirmations of the covid-19, to 45 hospitalizations, 21 confirmed, with seven patients in the ICU. For Klajner, the situation tends to worsen in the country with a peak of cases in two weeks. In his opinion, there is also an additional problem in Brazil. \"The underreporting of cases,\" he said.\"Even because many cases are asymptomatic, as can happen with children. In normal cases, a diagnosis of the disease can take about three hours and costs around R$ 150. Testing depends on a medical indication.\n\nThey restricted testing to patients with a medical indication. The delay in confirming the diagnosis, is due to the volume of people in the queue.\n\nhttps:\/\/translate.google.com.br\/translate?hl=en&sl=pt&u=https:\/\/noticias.uol.com.br\/ultimas-noticias\/agencia-estado\/2020\/03\/20\/presidente-do-einstein-preve-pico-em-2-semanas.htm&prev=search\n","f8e59ce2":"Final Model\nModify the hyperparameters to use the best iteration value and train the final model","867ea16a":"#Codes from Thor the God of Thunder","53396e36":"#All codes below from rossinEndrew https:\/\/www.kaggle.com\/endrewrossin\/fast-initial-lightgbm-model-to-detect-exam-result\/comments\n#Just because I want the SHAP VALUES visualization I had to run fifteen more code cells. Thanks rossinEndrew ","af1b0562":"#Albert Einstein Hospital will hire health professionals to act against the coronavirus (COVID-19)\n\nHospital Israelita Albert Einstein announced that it will hire 1,426 health professionals in the city of S\u00e3o Paulo, under a fixed-term contract. \n\nThe initiative aims to reinforce the multiprofessional team that works on the front line to contain the coronavirus pandemic (COVID-19). Among the opportunities, there are vacancies to act as Technician and Nurse in the areas of Emergency Care, ICU and Medical Clinic. \n\nThe contracted staff will be distributed to the Field Hospital in Pacaembu, to public partnership units with the City Hall and to hospital, outpatient and diagnostic services of the various operating units. \nProfessionals who wish to participate must register through the link https:\/\/www.einstein.br\/carreiras\n\nhttps:\/\/translate.google.com.br\/translate?hl=en&sl=pt&u=https:\/\/www.condepe.com.br\/noticias\/hospital-albert-einstein-contratara-profissionais-de-saude-para-atuacao-frente-ao-coronavirus-covid-19\/&prev=search\n","08467b62":"#Albert Einstein Hospital launches free courses on Covid-19:\n\nCovid-19 Suspicious cases manegement\n\nMechanical Ventilation\n\nCorrect use if masks: Surgical and N95\n\nInfection Prevention\n\nCorrect Use of PPE by the Assistance Team\n\nVirtual Public Health Campus (PAHO): Diseases caused by emerging respiratory viruses including Covid-19\nhttps:\/\/translate.google.com.br\/translate?hl=en&sl=pt&u=https:\/\/setorsaude.com.br\/hospital-albert-einstein-lanca-cursos-gratuitos-sobre-a-covid-19\/&prev=search\n","3744978e":"Modeling","1624e3d9":"#Thanks to rossinEndrew I can say my Hematocrit is complete with this SHAP VALUES  Visualization.\nhttps:\/\/www.kaggle.com\/endrewrossin\/fast-initial-lightgbm-model-to-detect-exam-result\/comments"}}