{"cell_type":{"e8254953":"code","de6700a2":"code","eea2a466":"code","fa3bd9db":"code","7a808e21":"code","3a3f92dc":"code","380c0dc0":"code","542ed774":"code","5413b2e3":"code","c5390f2c":"code","0574946b":"code","9edd29ed":"code","7a097f35":"code","110fec68":"code","0cd8c73f":"code","0714beec":"code","ef1ce81d":"code","42b2e631":"code","bc2ce5c4":"code","ecea9aab":"code","63bc6fc4":"code","f588bf21":"code","d5361610":"code","77bbd634":"code","864103d6":"code","6bfdfc85":"code","3829b78e":"code","77fe3f87":"code","2df461ba":"markdown","fcd89f0a":"markdown","c04e2802":"markdown","22dd2a31":"markdown","da2d1200":"markdown","5463fe47":"markdown","50bd7382":"markdown","0dd46aee":"markdown"},"source":{"e8254953":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n\n","de6700a2":"from fastai import *\nfrom fastai.vision import *\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport scipy as sp\nfrom functools import partial\nfrom sklearn import metrics\nfrom collections import Counter\nfrom fastai.callbacks import *","eea2a466":"# Set seed for all\ndef seed_everything(seed=1358):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n\nseed_everything()","fa3bd9db":"PATH = Path('..\/input\/aptos2019-blindness-detection')","7a808e21":"df = pd.read_csv(PATH\/'train.csv')\ndf.head()","3a3f92dc":"!ls ..\/input\/resnet152\/","380c0dc0":"# copy pretrained weights for resnet152 to the folder fastai will search by default\nPath('\/tmp\/.cache\/torch\/checkpoints\/').mkdir(exist_ok=True, parents=True)\n!cp '..\/input\/resnet152\/resnet152.pth' '\/tmp\/.cache\/torch\/checkpoints\/resnet152-b121ed2d.pth'","542ed774":"df.diagnosis.value_counts() ","5413b2e3":"src = (\n    ImageList.from_df(df,PATH,folder='train_images',suffix='.png')\n        .split_by_rand_pct(0.2, seed=42)\n        .label_from_df(cols='diagnosis',label_cls=FloatList)    \n    )\nsrc","c5390f2c":"tfms = get_transforms(do_flip=True, flip_vert=True, max_rotate=0.10, max_zoom=1.3, max_warp=0.0, max_lighting=0.2)","0574946b":"data = (\n    src.transform(tfms,size=128)\n    .databunch()\n    .normalize(imagenet_stats)\n)\ndata","9edd29ed":"# Definition of Quadratic Kappa\nfrom sklearn.metrics import cohen_kappa_score\ndef quadratic_kappa(y_hat, y):\n    return torch.tensor(cohen_kappa_score(torch.round(y_hat), y, weights='quadratic'),device='cuda:0')\nlearn = cnn_learner(data, base_arch=models.resnet152 ,metrics=[quadratic_kappa],model_dir='\/kaggle',pretrained=True)","7a097f35":"# Find a good learning rate\nlearn.lr_find()\nlearn.recorder.plot()","110fec68":"lr = 1e-2\nlearn.fit_one_cycle(2, lr)\n","0cd8c73f":"# progressive resizing\nlearn.data = data = (\n    src.transform(tfms,size=224)\n    .databunch()\n    .normalize(imagenet_stats)\n)\n\nlearn.lr_find()\nlearn.recorder.plot()","0714beec":"lr = 1e-2\nlearn.fit_one_cycle(4, lr)","ef1ce81d":"learn.unfreeze()\n\nlearn.lr_find()\nlearn.recorder.plot()","42b2e631":"learn.fit_one_cycle(5, slice(1e-6,1e-3))","bc2ce5c4":"valid_preds = learn.get_preds(ds_type=DatasetType.Valid)","ecea9aab":"class OptimizedRounder(object):\n    def __init__(self):\n        self.coef_ = 0\n\n    def _kappa_loss(self, coef, X, y):\n        X_p = np.copy(X)\n        for i, pred in enumerate(X_p):\n            if pred < coef[0]:\n                X_p[i] = 0\n            elif pred >= coef[0] and pred < coef[1]:\n                X_p[i] = 1\n            elif pred >= coef[1] and pred < coef[2]:\n                X_p[i] = 2\n            elif pred >= coef[2] and pred < coef[3]:\n                X_p[i] = 3\n            else:\n                X_p[i] = 4\n\n        ll = metrics.cohen_kappa_score(y, X_p, weights='quadratic')\n        return -ll\n\n    def fit(self, X, y):\n        loss_partial = partial(self._kappa_loss, X=X, y=y)\n        initial_coef = [0.5, 1.5, 2.5, 3.5]\n        self.coef_ = sp.optimize.minimize(loss_partial, initial_coef, method='nelder-mead')\n        print(-loss_partial(self.coef_['x']))\n\n    def predict(self, X, coef):\n        X_p = np.copy(X)\n        for i, pred in enumerate(X_p):\n            if pred < coef[0]:\n                X_p[i] = 0\n            elif pred >= coef[0] and pred < coef[1]:\n                X_p[i] = 1\n            elif pred >= coef[1] and pred < coef[2]:\n                X_p[i] = 2\n            elif pred >= coef[2] and pred < coef[3]:\n                X_p[i] = 3\n            else:\n                X_p[i] = 4\n        return X_p\n\n    def coefficients(self):\n        return self.coef_['x']","63bc6fc4":"optR = OptimizedRounder()\noptR.fit(valid_preds[0],valid_preds[1])\n","f588bf21":"coefficients = optR.coefficients()\nprint(coefficients)","d5361610":"sample_df = pd.read_csv(PATH\/'sample_submission.csv')\nsample_df.head()","77bbd634":"learn.data.add_test(ImageList.from_df(sample_df,PATH,folder='test_images',suffix='.png'))","864103d6":"preds,y = learn.get_preds(DatasetType.Test)\n","6bfdfc85":"test_predictions = optR.predict(preds, coefficients)","3829b78e":"sample_df.diagnosis = test_predictions.astype(int)\nsample_df.head()","77fe3f87":"sample_df.to_csv('submission.csv',index=False)","2df461ba":"# Metric Optimization","fcd89f0a":"# Data","c04e2802":"# Predictions","22dd2a31":"This part is taken from @abhishek great kernel: https:\/\/www.kaggle.com\/abhishek\/optimizer-for-quadratic-weighted-kappa","da2d1200":"# Libraries import","5463fe47":"# Model","50bd7382":"So our train set is definitely imbalanced, majority of images are normal (without illness).","0dd46aee":"Initially I forked from this [kernel](https:\/\/www.kaggle.com\/khursani8\/fast-ai-starter-resnet34), changed architecture to ResNet 50, added augmentation and did some initial tuning of parameters like learning rate.\n\nThen I tried ResNet 152."}}