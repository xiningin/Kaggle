{"cell_type":{"90d61d80":"code","fe1a91db":"code","4136c33e":"code","5626fbf6":"code","943f3849":"code","caae247e":"code","b59a4950":"code","7ff5d61f":"code","e73d0cad":"code","16df2c88":"code","d44f0ce7":"code","aceeff8f":"code","2e379a7b":"code","4f00ed49":"code","bf558543":"code","d72ee42a":"code","e4453a03":"code","9ef92eba":"code","26268d22":"code","ad33c0b9":"code","87600d20":"code","baed4031":"code","21523e19":"code","47e188d1":"markdown","0341c302":"markdown","1fdbe52d":"markdown","d4de880d":"markdown","efaff739":"markdown","ddec1048":"markdown","e0d21a07":"markdown","eea77603":"markdown","c4c2dc2c":"markdown","2738f87b":"markdown","5ebad018":"markdown"},"source":{"90d61d80":"# Import libraries\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] ='2'\nimport warnings\nwarnings.filterwarnings('ignore')\nimport math\nimport pandas_datareader as web\nimport numpy as np\nimport pandas as pd\nimport datetime\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, LSTM\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\n","fe1a91db":"# HYPERPARAMETERS\nBATCH_SIZE= 1\nEPOCHS=2\n","4136c33e":"# Get the stock quote\ndf = web.DataReader('AAPL', data_source='yahoo', start='2012-01-01', end='2019-12-17')\n# Show  the data\ndf.head()","5626fbf6":"# another way to download dataset from pandas_datareader\nintc_data = web.get_data_yahoo('INTC',\n                              start=datetime.datetime(2013, 10, 25),\n                              end=datetime.datetime(2021,10,8))\nintc_data.head()","943f3849":"# Get the number of rows and columns in the data set\nintc_data.shape","caae247e":"# Visualize the closing price history\nplt.figure(figsize=(16, 8))\nplt.title('Close Price History')\nplt.plot(intc_data['Close'])\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.show()","b59a4950":"# Create a new dataframe with only the 'Close' column\ndata = intc_data.filter(['Close'])\n# Convert the dataframe to a numpy array\ndataset = data.values\n# Get the number of rows to train the model on\n# Here i am using 80% data for training\n# math.ceil is used for round it up\ntraining_data_len = math.ceil(len(dataset)*.8)\ntraining_data_len","7ff5d61f":"\"\"\"\nMinMaxScaler. \nFor each value in a feature, \nMinMaxScaler subtracts the minimum\nvalue in the feature and then divides \nby the range. The range is the difference\nbetween the original maximum and original minimum. \nMinMaxScaler preserves the shape of the \noriginal distribution.\nrange = [0,1]\n\"\"\"\n\n\n# Scale the data\nscaler = MinMaxScaler(feature_range=(0,1))\n# scaled_data variable store our scaler data values\nscaled_data = scaler.fit_transform(dataset)\nscaled_data","e73d0cad":"# Create the training dataset\n# Create the scaled trainig dataset\ntrain_data = scaled_data[0:training_data_len, :]\n# Split the data into X_train and y_train datasets\nx_train = []    # Independent feature\ny_train = []    # Dependent feature\n\nfor i in range(60, len(train_data)):\n    # We append the past 60 values to our x_train data\n    x_train.append(train_data[i-60:i,0])\n    # y_train will contain the 60first values\n    y_train.append(train_data[i, 0])\n#     if i<= 60:\n#         print(f\"X_train contain past 60 values: \\n\\n{x_train}\\n\\n\")\n#         print(f\"Y_train contain the 60first values:  \\n{y_train}\")\n#         print()\n    if i<= 61:\n        print(f\"X_train contain past 60 values: \\n\\n{x_train}\\n\\n\")\n        print(f\"Y_train contain the 60first values:  \\n{y_train}\")\n        print()\n\n","16df2c88":"# Convert the x_train and y_train to numpy arrays\n# so we can use in LSTM model.\nx_train, y_train = np.array(x_train), np.array(y_train)","d44f0ce7":"# Reshape the data\n# A lSTM network expects the input to be 3- Dimensional in the form\n# a number of samples, = no. of rows -> 1543-> x_train.shape[0]\n# no. of time steps, -> 60-> x_train.shape[1]\n# no. of features. -> 1(closing price)\n# right know our x_train is 2-Dimensional\n# try x_train.shape\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\nx_train.shape","aceeff8f":"# Build the LSTM Model\nmodel = Sequential()\n# Input shape( no.of time steps, no of features)\nmodel.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))\nmodel.add(LSTM(50, return_sequences=False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))","2e379a7b":"# Compile the model\nmodel.compile(\n    optimizer = 'adam',\n    loss ='mean_squared_error'\n)","4f00ed49":"# Train the model\nmodel.fit(x_train, y_train, batch_size=BATCH_SIZE, epochs=EPOCHS)","bf558543":"# CREATE THE TESTING DATA SET\n# CREATE A NEW ARRAY CONTAINING SCALED VALUES FROM INDEX 1543 TO 2003\ntest_data = scaled_data[training_data_len - 60:, :]\n# CREATE THE DATA SETS X_TEST AND Y_TEST\nx_test = []\n# y_test contain actucal value that model is going to predict\ny_test = dataset[training_data_len:, :]\nfor i in range(60, len(test_data)):\n    # x_test contain past 60 values\n    x_test.append(test_data[i-60:i, 0])\n    \n    ","d72ee42a":"# CONVERT THE DATA TO A NUMPY ARRAY\nx_test = np.array(x_test)\n","e4453a03":"# Reshape the data\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n","9ef92eba":"# Get the models predicted price values\npredictions = model.predict(x_test)\n# Here are unscaling the data to see the actual values that y_test contains\npredictions = scaler.inverse_transform(predictions)","26268d22":"# Evaluating our model\n# Get the root mean squared error (RMSE)\nrmse = np.sqrt(np.mean(((predictions - y_test)**2)))\nrmse","ad33c0b9":"# Plot the data\ntrain = data[:training_data_len]\nvalid = data[training_data_len:]\nvalid['Predictions'] = predictions\n\n#Visualize the data\nplt.figure(figsize=(16, 8))\nplt.title('Model')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.plot(train['Close'])\nplt.plot(valid[['Close', 'Predictions']])\nplt.legend(['Train', 'Valid', 'Predictions'], loc='lower right')\nplt.show()\n","87600d20":"# Show the valid and predicted prices\nvalid","baed4031":"# Get the quote\nintc_quote = web.get_data_yahoo('INTC',\n                              start=datetime.datetime(2013, 10, 25),\n                              end=datetime.datetime(2021,10,8))\n# Create a new dataframe\nnew_df = intc_quote.filter(['Close'])\n# Get the last 60 day closing price values and convert the dataframe to an array\nlast_60_days = new_df[-60:].values\n# Scale the data to be values between 0 and 1\nlast_60_days_scaled = scaler.transform(last_60_days)\n# Create an empty list\nX_test = []\n# Append the past 60 days\nX_test.append(last_60_days_scaled)\n# Convert the X_test data set to a numpy array\nX_test = np.array(X_test)\n# Reshape the data\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\n# Get the predicted scaled price\npred_price = model.predict(X_test)\n# Undo the scaling\npred_price = scaler.inverse_transform(pred_price)\nprint(pred_price)","21523e19":"# Get the quote\nintc_quote2 = web.get_data_yahoo('INTC',\n                              start=datetime.datetime(2021,10,9),\n                              end=datetime.datetime(2021,10,9))\n# printing actual value\nprint(intc_quote2['Close'])","47e188d1":"If you can noticed we print our values <=61 if will print two arrays of x_train and two arrays of y_train\n\nThis is our x_train:\narray([0.01601778, 0.01868743,...]), \narray([0.01868743, 0.02224694, 0.02180199, 0.02113457, 0.01802001,...])\nyou can see the first array value starts with 0.01601778 and the second array is start with the second value from the first array and the last value of the last array which is 0.0358175 is the first value of our y_train.\n\n\n- Know we have our X training dataset and y tarining dataset\n\n","0341c302":"- Here I'm using INTC dataset you can use any stock dataset if you want.","1fdbe52d":"Predictions looks great..\nIt looks almost similer\nData science|ML is amazing isn't it.\n\n\n* Blue colour shows on which data was train.\n* Orange colour shows the actual values for rest of the days\n* Yello colour is the predictions ","d4de880d":"* WOW... we got good RMSE score.","efaff739":"# **This program uses an artificial recurrent neural network called Long Short Term Memory (LSTM) to predict the closing stock price of a corporation using the past 60 day stock price**","ddec1048":"Feel free to use for learning purpose.","e0d21a07":" WOW amazing it almost predicted correctly.","eea77603":"***Our model predicted for next day which is 2021,10,9 with 53.86***","c4c2dc2c":"- Our data are scaled now it looks great so far.","2738f87b":"# **I hope you like this amazing journey. If you liked give me upvote it motivates me.**# \n\nMore to come soon...","5ebad018":"- The trends look intersting. It looks like the INTC closing price has increased from previous years."}}