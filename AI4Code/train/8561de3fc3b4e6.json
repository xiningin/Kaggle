{"cell_type":{"678285b2":"code","7c736cac":"code","9b43302c":"code","02086281":"code","c3ba27e5":"code","08723f1d":"markdown","e567b3ee":"markdown","f7944b13":"markdown"},"source":{"678285b2":"import matplotlib.pyplot as plt\nimport networkx as nx\nimport pandas as pd\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7c736cac":"    def read_data():\n        person_df = pd.read_csv('..\/input\/Person_Person.csv',encoding='ISO-8859-1')\n        person_df.drop('Source(s)', inplace=True, axis=1)\n        return person_df\n    \n    def network_graph(person_df):\n        # create networkx graph\n        G = nx.Graph()\n        # add nodes for all of the people in the list\n        for i in range(len(person_df)):\n            G.add_node(person_df[['Person A', 'Person B']].iloc[i][0])\n            G.add_node(person_df[['Person A', 'Person B']].iloc[i][1])\n        # add edges\n        for i in range(len(person_df)):\n            G.add_edge(person_df[['Person A', 'Person B']].iloc[i][0], person_df[['Person A', 'Person B']].iloc[i][1])\n        plt.figure(figsize=(25, 25))\n        plt.axis('equal')\n        plt.title('person-to-person')\n        nx.draw(G, node_color='b',node_size=50, with_labels=True)\n        plt.show()\n        return G\n\n    person_df = read_data()\n    G = network_graph(person_df) ","9b43302c":"print('this dataset have %s relative person'% len(G.degree))\nfor i in G.degree:\n    if i[1]>3:\n        print(i)","02086281":"data = person_df[(person_df['Person A']=='DONALD J. TRUMP')|(person_df['Person B']=='DONALD J. TRUMP')]\nprint(data.shape)\ndef trump_network_graph(person_df):\n        G = nx.Graph()\n        # add nodes for all of the people in the list\n        for i in range(len(person_df)):\n            G.add_node(person_df[['Person A', 'Person B']].iloc[i][0])\n            G.add_node(person_df[['Person A', 'Person B']].iloc[i][1])\n        # add edges\n        for i in range(len(person_df)):\n            G.add_edge(person_df[['Person A', 'Person B']].iloc[i][0], person_df[['Person A', 'Person B']].iloc[i][1])\n        plt.figure(figsize=(25, 25))\n        plt.axis('equal')\n        plt.title('person-to-person')\n        nx.draw(G, node_color='b', node_size=50, with_labels=True)\n        plt.show()\ntrump_network_graph(data)","c3ba27e5":"socialit = []\nfor i in G.degree:\n    if i[1]>3:\n        socialit.append(i[0])\ndata = []\nfor i in range(person_df.shape[0]):\n    if ( person_df['Person A'][i] in socialit) or ( person_df['Person B'][i] in socialit):\n        data.append(person_df.iloc[i])\ndata = pd.DataFrame(data)\nprint(data.shape)\nnetwork_graph(data)","08723f1d":"**DONALD J. TRUMP** have 117 direct connected person","e567b3ee":"this grapg really to ugly \u2192_\u2192   \nobviously, some person seems have nothing to do with Trump,so i want to explore this dataset.","f7944b13":"Following social graph of person  less have 3 relative relationships"}}