{"cell_type":{"f889a59d":"code","b8f1ec7c":"code","c4b6be05":"code","8bc944ee":"code","267310c8":"code","50116b08":"code","89acae2f":"code","7fc45358":"code","7c788a49":"code","3a52018f":"code","18684c23":"code","b2ade881":"code","373c0785":"code","a60b1905":"code","27e93f35":"code","900c93ad":"code","bd8497c6":"code","20c30aee":"code","c2cd7bd6":"code","36414fb5":"code","c576d56a":"code","fdac8171":"code","f12bc52d":"markdown","f074ab2c":"markdown","7d05fd01":"markdown","c2069c9b":"markdown","bcf041fc":"markdown","f2198f4e":"markdown","e963b3b5":"markdown","82fe6aa1":"markdown","3998673f":"markdown","1287ae29":"markdown"},"source":{"f889a59d":"!git clone https:\/\/github.com\/tensorflow\/models.git","b8f1ec7c":"!cd models\/research\/ && protoc object_detection\/protos\/*.proto --python_out=.","c4b6be05":"!cd models\/research && \\\n    cp object_detection\/packages\/tf2\/setup.py . && \\\n    python -m pip install .","8bc944ee":"import os\nimport pathlib\nimport tensorflow as tf\n\nimport time\nfrom object_detection.utils import label_map_util\nfrom object_detection.utils import visualization_utils as viz_utils\n\nimport numpy as np\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","267310c8":"# Enable GPU dynamic memory allocation\ngpus = tf.config.experimental.list_physical_devices('GPU')\nfor gpu in gpus:\n    tf.config.experimental.set_memory_growth(gpu, True)","50116b08":"!wget -nc https:\/\/lazyprogrammer.me\/course_files\/object_detection_images\/walkingdog.jpeg\n!wget -nc https:\/\/lazyprogrammer.me\/course_files\/object_detection_images\/traffic.jpeg\n!wget -nc https:\/\/lazyprogrammer.me\/course_files\/object_detection_images\/jungle.jpeg\n!wget -nc https:\/\/lazyprogrammer.me\/course_files\/object_detection_images\/intersection.jpeg","89acae2f":"!ls","7fc45358":"IMAGE_PATHS = [\n  'intersection.jpeg', 'traffic.jpeg', 'jungle.jpeg', 'walkingdog.jpeg']","7c788a49":"url = 'http:\/\/download.tensorflow.org\/models\/object_detection\/tf2\/20200711\/ssd_resnet101_v1_fpn_640x640_coco17_tpu-8.tar.gz'\n\nPATH_TO_MODEL_DIR = tf.keras.utils.get_file(\n    fname='ssd_resnet101_v1_fpn_640x640_coco17_tpu-8',\n    origin=url,\n    untar=True)","3a52018f":"PATH_TO_MODEL_DIR","18684c23":"url = 'https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/research\/object_detection\/data\/mscoco_label_map.pbtxt'\n\nPATH_TO_LABELS = tf.keras.utils.get_file(\n    fname='mscoco_label_map.pbtxt',\n    origin=url,\n    untar=False)","b2ade881":"PATH_TO_LABELS","373c0785":"!head {PATH_TO_LABELS}","a60b1905":"PATH_TO_SAVED_MODEL = PATH_TO_MODEL_DIR + \"\/saved_model\"\n\nprint('Loading model...', end='')\nstart_time = time.time()\n\n# Load saved model and build the detection function\ndetect_fn = tf.saved_model.load(PATH_TO_SAVED_MODEL)\n\nend_time = time.time()\nelapsed_time = end_time - start_time\nprint('Done! Took {} seconds'.format(elapsed_time))","27e93f35":"category_index = label_map_util.create_category_index_from_labelmap(\n    PATH_TO_LABELS,\n    use_display_name=True)","900c93ad":"category_index","bd8497c6":"## Helper function\n\ndef load_image_into_numpy_array(path):\n    \"\"\"Load an image from file into a numpy array.\n\n    Puts image into numpy array to feed into tensorflow graph.\n    Note that by convention we put it into a numpy array with shape\n    (height, width, channels), where channels=3 for RGB.\n\n    Args:\n      path: the file path to the image\n\n    Returns:\n      uint8 numpy array with shape (img_height, img_width, 3)\n    \"\"\"\n    return np.array(Image.open(path))","20c30aee":"def detect_objects(image_path):\n    print('Running inference for {}... '.format(image_path), end='')\n\n    image_np = load_image_into_numpy_array(image_path)\n\n    # The input needs to be a tensor, convert it using `tf.convert_to_tensor`.\n    input_tensor = tf.convert_to_tensor(image_np)\n\n    # The model expects a batch of images, so add an axis with `tf.newaxis`.\n    input_tensor = input_tensor[tf.newaxis, ...]\n\n    # Do the detection\n    detections = detect_fn(input_tensor)\n\n    # All outputs are batches tensors.\n    # Convert to numpy arrays, and take index [0] to remove the batch dimension.\n    # We're only interested in the first num_detections.\n    num_detections = int(detections.pop('num_detections'))\n    detections = {key: value[0, :num_detections].numpy()\n                   for key, value in detections.items()}\n    detections['num_detections'] = num_detections\n\n    # detection_classes should be ints.\n    detections['detection_classes'] = detections['detection_classes'].astype(np.int64)\n\n    # show classes\n    # unique_classes = set(detections['detection_classes'])\n    # print(\"Classes found:\")\n    # for c in unique_classes:\n    #     print(category_index[c]['name'])\n\n    image_np_with_detections = image_np.copy()\n\n    viz_utils.visualize_boxes_and_labels_on_image_array(\n          image_np_with_detections,\n          detections['detection_boxes'],\n          detections['detection_classes'],\n          detections['detection_scores'],\n          category_index,\n          use_normalized_coordinates=True,\n          max_boxes_to_draw=200,\n          min_score_thresh=.30,\n          agnostic_mode=False)\n\n    plt.figure(figsize=(15, 10))\n    plt.imshow(image_np_with_detections)\n    print('Done')\n    plt.show()","c2cd7bd6":"detect_objects(IMAGE_PATHS[0])","36414fb5":"detect_objects(IMAGE_PATHS[1])","c576d56a":"detect_objects(IMAGE_PATHS[2])","fdac8171":"detect_objects(IMAGE_PATHS[3])","f12bc52d":"## Install the object detection API","f074ab2c":"## Do some object detection","7d05fd01":"## Helper function","c2069c9b":"## Import Libraries","bcf041fc":"## Download and extract model files\n\nGet URLs from the \"Object Detection Zoo\": https:\/\/github.com\/tensorflow\/models\/blob\/master\/research\/object_detection\/g3doc\/tf2_detection_zoo.md","f2198f4e":"## Load in the labels","e963b3b5":"## Load in the model","82fe6aa1":"## Download Labels File\n\nLabel files can be found here: https:\/\/github.com\/tensorflow\/models\/tree\/master\/research\/object_detection\/data\n\nYou probably won't need these since Object Detection Zoo contains only models trained on COCO.","3998673f":"## Clone Tensorflow Models Repository","1287ae29":"## Download Images"}}