{"cell_type":{"f706b97f":"code","86c01dab":"code","dc13deb7":"code","38e95541":"code","6b3c2162":"code","081270bd":"code","26ad3c83":"code","14147a0a":"code","638929d1":"code","c898e8ef":"code","dfde2208":"code","a0509b34":"code","3237aa79":"code","83af7195":"code","ee9cbfcc":"code","80064bf4":"code","01cf43f6":"code","062dff3c":"code","bde9407c":"code","48bde99a":"code","f9b21765":"code","86a8c60b":"code","22f3b9d8":"code","63389f2c":"code","fc66638e":"code","abc9a397":"code","d15d893d":"code","f096ec97":"code","b59b3579":"code","b9e58dd8":"code","82bc0491":"code","1da5e92f":"code","b04b6a5b":"code","250f37bc":"code","0c01b2be":"code","3e300e0c":"code","ecea97c2":"code","e8c2e825":"code","d915ffb3":"code","ab9b7a7b":"code","71fe21fa":"code","d6f83d61":"code","edcca145":"code","8e2b4cf7":"code","2e801145":"code","2ad8fdd4":"code","2b980748":"code","e7716c0a":"markdown","a5192d01":"markdown","a4ffe0f6":"markdown","7c82bc4a":"markdown","9a13bcb7":"markdown","dbe63de1":"markdown","4ac1a895":"markdown","ebc06e44":"markdown","fac0c59e":"markdown","cefa3a5e":"markdown","b02350b7":"markdown","469c42ec":"markdown","d11c3d71":"markdown","3cc4a591":"markdown","90c0245e":"markdown","25b9ed45":"markdown","e33e23d7":"markdown","76624949":"markdown","adbbfd11":"markdown","f077fe0e":"markdown","cf1d27fa":"markdown","553e81af":"markdown","df71f5c7":"markdown","add2f361":"markdown","ea6f789f":"markdown","a43f67bd":"markdown","ee9cc0c3":"markdown","8601e1d8":"markdown","356b8197":"markdown"},"source":{"f706b97f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n! pip install squarify\nimport squarify\n","86c01dab":"df=pd.read_csv(\"..\/input\/black-friday\/data\/train.csv\")\ndf.head()","dc13deb7":"df.info()","38e95541":"df.describe()","6b3c2162":"df['Age'].value_counts()","081270bd":"plt.style.available","26ad3c83":"\nplt.style.use('seaborn-whitegrid')\nsns.countplot(df['Age'])\nplt.title('Age group Distribution',fontdict={'fontsize':20})","14147a0a":"age=df['Age'].value_counts()\n\nplt.style.use('default')\nsquarify.plot(sizes=age.values,label=age.index,value=age.values)\nplt.title('Age group wise Distribution',fontdict={'fontsize':20})\nplt.show()","638929d1":"plt.figure(figsize=(10,8))\nplt.style.use('seaborn-whitegrid')\nsns.countplot(df['Gender'])\nplt.title('Gender Distribution',fontdict={'fontsize':20})","c898e8ef":"plt.figure(figsize=(14,7))\nplt.style.use('seaborn-whitegrid')\nsns.countplot(df['Occupation'])\nplt.title('Occupation Distribution',fontdict={'fontsize':20})","dfde2208":"city=df['City_Category'].value_counts()\n\nplt.style.use('seaborn')\nplt.figure(figsize=(10,8))\nplt.pie(city.values,labels=city.index,startangle=-30,explode=(0,0.20,0), shadow=True, autopct= '%1.1f%%')\nplt.title('City_Category Distribution')\nplt.legend()\nplt.legend(prop={'size':15})\nplt.axis('equal')\nplt.show()\n","a0509b34":"plt.figure(figsize=(10,8))\nsns.countplot(df['Marital_Status'])\nplt.title('Marital Status Distribution',fontdict={'fontsize':20})\n\n#0: Unmarried\n#1: Married\n","3237aa79":"\nplt.style.use('seaborn-whitegrid')\nsns.countplot(df['Stay_In_Current_City_Years'])\nplt.title('Years in City wise Distribution',fontdict={'fontsize':20})","83af7195":"stay=df['Stay_In_Current_City_Years'].value_counts()\n","ee9cbfcc":"\nplt.style.use('default')\nsquarify.plot(sizes=stay.values,label=stay.index,value=stay.values)\nplt.title('Years in City wise Distribution',fontdict={'fontsize':20})\nplt.show()","80064bf4":"purchase_prod=df.groupby(['Product_ID']).Purchase.agg('mean').to_frame('Mean_Purchase_Value').reset_index()\npurchase_prod.sort_values('Mean_Purchase_Value',ascending=False)","01cf43f6":"df['User_ID'].nunique()","062dff3c":"df['Product_ID'].nunique()","bde9407c":"plt.figure(figsize=(14,7))\nsns.distplot(df['Purchase'],bins=20)\nplt.title('Distribution of Purchase amount',fontdict={'fontsize':20})\nplt.xlabel('Amount')\nplt.ylabel('Number of People')\n","48bde99a":"plt.figure(figsize=(10,8))\nsns.countplot(df['Age'],hue=df['Gender'])\nplt.title('Gender wise - Age Distribution',fontdict={'fontsize':20})","f9b21765":"plt.style.use( 'seaborn-pastel')\nsns.boxplot(df['Age'],df['Purchase'])\nplt.title('Age group wise Purchase',fontdict={'fontsize':20})\nplt.ylabel('Purchase Amount')\nplt.show()\n","86a8c60b":"age = ('0-17','18-25','26-35','36-45','46-50','51-55','55+')\npurchase = []\nfor g in age:\n    purchase.append(df[df['Age'] == g]['Purchase'].sum())\n\nprint(purchase)\n\nobj = ('0-17','18-25','26-35','36-45','46-50','51-55','55+')\ny_pos = np.arange(len(obj))\n\nplt.bar(y_pos, purchase, align='center', alpha=0.5)\nplt.xticks(y_pos, obj)\nplt.ylabel('Money spent')\nplt.title('Age vs Purchase')\n\nplt.show()","22f3b9d8":"plt.style.use( 'seaborn-pastel')\nsns.boxplot(df['Gender'],df['Purchase'])\nplt.ylabel('Purchase Amount')\nplt.title('Gender wise Purchase',fontdict={'fontsize':20})\n\n","63389f2c":"gender = ('M','F')\npurchase = []\nfor g in gender:\n    purchase.append(df[df['Gender'] == g]['Purchase'].sum())\n\nprint(purchase)\n\nobj = ('M','F')\ny_pos = np.arange(len(obj))\n\nplt.bar(y_pos, purchase, align='center', alpha=0.5)\nplt.xticks(y_pos, obj)\nplt.ylabel('Money spent')\nplt.title('Gender vs Purchase')\n\nplt.show()","fc66638e":"plt.style.use( 'seaborn-pastel')\nsns.boxplot(df['Occupation'],df['Purchase'])\nplt.ylabel('Purchase Amount')\nplt.title('Occupation wise Purchase',fontdict={'fontsize':20})\n\n","abc9a397":"occupations_id = list(range(0, 21))\npurchase = []\nfor oid in occupations_id:\n    purchase.append(df[df['Occupation'] == oid]['Purchase'].sum())\n\nprint(purchase)\n\nobj = ('0', '1', '2', '3', '4', '5','6','7','8','9','10', '11','12', '13', '14', '15', '16', '17', '18', '19', '20')\ny_pos = np.arange(len(obj))\n\nplt.bar(y_pos, purchase, align='center', alpha=0.5)\nplt.xticks(y_pos, obj)\nplt.ylabel('Money spent')\nplt.title('Occupation ID vs Purchase')\n\nplt.show()","d15d893d":"plt.style.use( 'seaborn-pastel')\nsns.boxplot(df['City_Category'],df['Purchase'])\nplt.ylabel('Purchase Amount')\nplt.title('City Category wise Purchase',fontdict={'fontsize':20})\n\n","f096ec97":"status = ('A','B','C')\npurchase = []\nfor g in status:\n    purchase.append(df[df['City_Category'] == g]['Purchase'].sum())\n\nprint(purchase)\n\nobj = ('A','B','C')\ny_pos = np.arange(len(obj))\n\nplt.bar(y_pos, purchase, align='center', alpha=0.5)\nplt.xticks(y_pos, obj)\nplt.ylabel('Money spent')\nplt.title('City Category vs Purchase')\n\nplt.show()","b59b3579":"plt.style.use( 'seaborn-pastel')\nsns.boxplot(df['Marital_Status'],df['Purchase'])\nplt.ylabel('Purchase Amount')\nplt.title('Marital Status wise Purchase',fontdict={'fontsize':20})\n\n","b9e58dd8":"status = (0,1)\npurchase = []\nfor g in status:\n    purchase.append(df[df['Marital_Status'] == g]['Purchase'].sum())\n\nprint(purchase)\n\nobj = (0,1)\ny_pos = np.arange(len(obj))\n\nplt.bar(y_pos, purchase, align='center', alpha=0.5)\nplt.xticks(y_pos, obj)\nplt.ylabel('Money spent')\nplt.title('Marital Status vs Purchase')\n\nplt.show()","82bc0491":"\nplt.style.use( 'seaborn-pastel')\nsns.boxplot(df['Stay_In_Current_City_Years'],df['Purchase'])\nplt.ylabel('Purchase Amount')\nplt.title('Year wise Current Stay in City wise Purchase',fontdict={'fontsize':20})","1da5e92f":"status = ('0','1','2','3','4+')\npurchase = []\nfor g in status:\n    purchase.append(df[df['Stay_In_Current_City_Years'] == g]['Purchase'].sum())\n\nprint(purchase)\n\nobj = ('0','1','2','3','4+')\ny_pos = np.arange(len(obj))\n\nplt.bar(y_pos, purchase, align='center', alpha=0.5)\nplt.xticks(y_pos, obj)\nplt.ylabel('Money spent')\nplt.title('Stay in Current City vs Purchase')\n\nplt.show()","b04b6a5b":"\nsns.heatmap(df.corr(), annot = True)\nplt.title(\"HeatMap of Correlation Matrix\")\nplt.show()\n","250f37bc":"test=pd.read_csv('..\/input\/black-friday\/data\/test.csv')","0c01b2be":"df['source']='train'\ntest['source']='test'","3e300e0c":"data=pd.concat([df,test])","ecea97c2":"data.drop('Product_Category_3', axis = 1, inplace = True)","e8c2e825":"data.drop('User_ID', axis = 1, inplace = True)","d915ffb3":"data.drop('Product_ID', axis = 1, inplace = True)","ab9b7a7b":"data['Product_Category_2'].fillna(data['Product_Category_2'].mean(), inplace = True)","71fe21fa":"data['Age']=data['Age'].apply(lambda x: str(x).replace('55+','55'))","d6f83d61":"data['Stay_In_Current_City_Years']=data['Stay_In_Current_City_Years'].apply(lambda x: str(x).replace('4+','4'))","edcca145":"from sklearn.preprocessing import LabelEncoder","8e2b4cf7":"label_encoder_gender=LabelEncoder()\ndata['Gender']=label_encoder_gender.fit_transform(data['Gender'])","2e801145":"label_encoder_age=LabelEncoder()\ndata['Age']=label_encoder_age.fit_transform(data['Age'])","2ad8fdd4":"label_encoder_city=LabelEncoder()\ndata['City_Category']=label_encoder_city.fit_transform(data['City_Category'])","2b980748":"data['Stay_In_Current_City_Years'] = data['Stay_In_Current_City_Years'].astype('int')","e7716c0a":"## **Exploratory Data Analysis**\n\n### **Univarate Analysis**\n\n**Age Distribution**","a5192d01":"**Marital Status Distribution**","a4ffe0f6":"**Occupation Distribution**","7c82bc4a":"#### **Note**:\nThere is null data in Product Category 2 and Product_Category_3.\nOf203281 values, Product Category 3 has only 62257 values. Which is just around 1\/4 the of the dataset.\n ","9a13bcb7":"**Encoding  Gender, Age group, City.**","dbe63de1":"**Gender vs Purchase**","4ac1a895":"## **Data Cleaning**","ebc06e44":"**Converting Datatype to int**","fac0c59e":"3631 Unique Products were sold during Black Friday","cefa3a5e":"**Age Group vs Purchase**","b02350b7":"**Age-Gender Distribution**","469c42ec":"**Occupation vs Purchase**","d11c3d71":"**Data Analysis**\n-Most Populated Age Group is 26-25 years\n- More Males than Females\n- Occupation number 0 and 4 employ the most customers.\n- Occupation number 8 and 9 employ the least customers.\n- Most Customers are from City B\n- Majority of Customers are Unmarried\n- Most customers are living in the city for 1 years\n- Age wise the mean purchase is of around 8000(currency)\n- There is a direct correlation with number of customers and\namount spent .\n","3cc4a591":"**Stay in City Distribution**","90c0245e":"# **Black Friday Sales Prediction**","25b9ed45":"**Marital Status vs Purchase**","e33e23d7":"**City_Category vs Purchase**","76624949":"**Dropping Features**","adbbfd11":"**Gender Distribution**","f077fe0e":"### **Multivarate Analysis**","cf1d27fa":"**Replacing '+' in Age & 'Stay_In_Current_City_Years'**","553e81af":"**Purchase Distribution**","df71f5c7":"**Merging Datasets**","add2f361":"5891 Unique Customers did shopping during Black Friday","ea6f789f":"**Adjusting value of Product_Category 2**","a43f67bd":"**Stay in City  vs Purchase**","ee9cc0c3":"**City_Category Distribution**","8601e1d8":"### **Bivarate Analysis**","356b8197":"- Product Category 3 has values only for around 30% data. It would be wise to drop the column\n- UserId means individual customer, it does not help us in predicting the value of Purchase\n-ProductId means individual customer, it does not help us in predicting the value of Purchase\n- In Product Category 2, null values can be adjusted my using the mean value.\n- Removing '+' from 'Age' and 'Stay_In_Current_City_Years'\n- We have to encode, Gender, Age group, City. \n- We have to convert data type of 'Stay in City' to int.\n"}}