{"cell_type":{"9f38ffa3":"code","f3ab2927":"code","28af61dd":"code","d6c2dff8":"code","18cdbf43":"code","c21a33fa":"code","9b10c367":"code","176cd0c0":"code","6fbd7f4c":"code","5edfb6af":"code","14902677":"code","4beca0d1":"code","b811c02f":"code","03bfcf0a":"code","b33b1c94":"code","d1fc9fcb":"code","e3e80aea":"code","21f8e634":"code","df9dc359":"code","e3a5ee17":"code","36bc261c":"code","f059353a":"code","61d02c17":"code","46cdfc52":"code","7c55a9ee":"code","627f81df":"code","e65935ff":"code","fa27e208":"code","7e5d981d":"code","1b19bc09":"code","571eb67e":"code","b273e1cb":"code","e435ab42":"code","32f828be":"code","3ded797c":"code","5b49d0b3":"code","f8b9d2d2":"code","4d262342":"code","2fa3a6aa":"code","8e292c8a":"code","ae5ba81e":"code","304ed6f0":"code","77ef236c":"code","5b99699e":"code","fa750289":"code","cf1f06f4":"code","1a8b3ac2":"code","65918f07":"code","4adcbf9e":"code","f34be007":"code","09b12ab3":"code","364be001":"code","a46facb8":"code","0e0d14d1":"code","76e2034f":"code","556bd933":"code","7383efca":"code","665c67ca":"code","9a101c1d":"code","c103062f":"code","710f42eb":"code","a5eb9541":"code","c2dba5ce":"code","a49bc474":"code","ffb1cde5":"code","f88c884b":"code","49b766f4":"code","c3cf4eac":"code","0442a8bd":"code","0c1202d4":"code","8de211b1":"code","97747c42":"code","0aafb846":"code","b09dcddf":"code","f9587e8a":"code","54eda418":"code","fa0ae320":"code","3f8632ce":"code","556bcaba":"code","6776ad79":"code","12e8f012":"code","cf5d86c3":"code","dcbf667b":"code","39f0a1df":"code","884e3c79":"code","ba33d9bc":"code","4516e83e":"code","33f8e72c":"code","2fb1b8d3":"code","e1ed0a28":"code","6b4303b1":"code","a904e7d7":"code","95cb2c25":"code","fae7bfc5":"code","6adca809":"code","e815d40f":"code","ad7ad36f":"code","04a9669d":"code","f3ae1874":"code","558df02b":"code","5fa8501c":"markdown","628dece3":"markdown","fb39747b":"markdown","13fa50de":"markdown","46afa586":"markdown","778eb68a":"markdown","e4a98b8d":"markdown","c9348e5f":"markdown","981567f4":"markdown","9e580762":"markdown","aa031a5e":"markdown","0d5a75c0":"markdown","ff0e1b00":"markdown","058d0f8f":"markdown","003e8cba":"markdown","47b5c63f":"markdown","092df5d0":"markdown","fdcca8dd":"markdown","bc912092":"markdown","708c577f":"markdown","fc68b8ae":"markdown","add69dc0":"markdown","f710c7b5":"markdown","86ce4b17":"markdown","a6950298":"markdown","96e0b340":"markdown","450597bc":"markdown","e62d726f":"markdown","3ac5e252":"markdown","b9172a2a":"markdown","b9d6fd4d":"markdown","f4315ea6":"markdown","3ddac9d6":"markdown","208a6b63":"markdown","774d1579":"markdown","beb5bd2a":"markdown","442b0efb":"markdown","048bf22f":"markdown","e9a771e4":"markdown","fc019ae6":"markdown","5de8c86e":"markdown","2edb12bc":"markdown","bfc3551d":"markdown","25f9fe77":"markdown","c5d7472c":"markdown","a637f046":"markdown","1f80835d":"markdown","6a0e4b16":"markdown","a544c7f1":"markdown","770fb6af":"markdown"},"source":{"9f38ffa3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f3ab2927":"# 1.\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","28af61dd":"# \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\n# \u57fa\u672c\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport numpy as np\nfrom numpy import nan\nimport pandas as pd\nfrom pandas import DataFrame,Series\n\n# \u53ef\u8996\u5316\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport matplotlib.colors as mcolors\nimport matplotlib as mpl\n\n# \u4e0d\u8981\u306a\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u3055\u306a\u3044\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# \u6a19\u6e96\u5316\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\nfrom sklearn.preprocessing import StandardScaler\n\n\n# \u76ee\u7684\u5909\u6570\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092'train'\u3068'test'\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\u305f\u3081\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\nfrom sklearn.model_selection import train_test_split\n\n# \u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u305f\u3081\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n# \u4e3b\u6210\u5206\u5206\u6790\u306e\u305f\u3081\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\nfrom sklearn.decomposition import PCA\n\n# \u8a55\u4fa1\u306e\u305f\u3081\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\nfrom sklearn import metrics","d6c2dff8":"# 3D\u6563\u5e03\u56f3\u306e\u305f\u3081\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom mpl_toolkits.mplot3d import Axes3D","18cdbf43":"# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ndf = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","c21a33fa":"# \u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u91cf\u4e00\u89a7\ndf.columns.values","9b10c367":"# \u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\ndf.head()","176cd0c0":"df.tail()","6fbd7f4c":"# \u30c7\u30fc\u30bf\u306e\u6982\u89b3\nprint(df.info())","5edfb6af":"# \u6b20\u640d\u5024\u306e\u78ba\u8a8d\ndf.isnull().sum()","14902677":"df.describe(include='all')","4beca0d1":"# \u4e3b\u6210\u5206\u5206\u6790\u7528\u306e\u30c7\u30fc\u30bf\n# \u76ee\u7684\u5909\u6570\u306e\u30c7\u30fc\u30bf\ndf_target = df[['DEATH_EVENT']] \n# \u8aac\u660e\u5909\u6570\u306e\u30c7\u30fc\u30bf\ndf_data = df.drop('DEATH_EVENT', axis=1)","b811c02f":"# \u6563\u5e03\u56f3\u884c\u5217\u3092\u51fa\u529b\u3059\u308b\nsns.pairplot(df, size=2.0, hue='DEATH_EVENT', markers='+')\nplt.show()","03bfcf0a":"# \u5f37\u3044\u95a2\u4fc2\u304c\u3042\u308a\u305d\u3046\u306a\u7279\u5fb4\u91cf\u3060\u3051\u3092\u7528\u3044\u305f\u6563\u5e03\u56f3\u884c\u5217\n# \u65b0\u305f\u306bDataFrame\u3092\u4f5c\u308b\ndf_pickup = df[['age', 'creatinine_phosphokinase', 'ejection_fraction', 'time', 'sex','serum_creatinine', 'serum_sodium', 'DEATH_EVENT']]\n# \u6563\u5e03\u56f3\u884c\u5217\u3092\u4f5c\u308b\nsns.pairplot(df_pickup, size=2.0, hue='DEATH_EVENT', markers='+')\nplt.show()","b33b1c94":"# \u76f8\u95a2\u4fc2\u6570\u884c\u5217\ncorr_mat = df.corr(method='pearson')\ncorr_mat","d1fc9fcb":"# \u76f8\u95a2\u4fc2\u6570\u884c\u5217\u3092\u53ef\u8996\u5316\nsns.heatmap(corr_mat,\n           vmin=-1.0,\n           vmax=1.0,\n           center=0,\n           annot=True,\n           fmt='.1f',\n           xticklabels=corr_mat.columns.values,\n           yticklabels=corr_mat.columns.values\n           )\nplt.show()","e3e80aea":"# 'age'\u306b\u3064\u3044\u3066\n# \u751f\u6b7b\u5225\u306e\u5e74\u9f62\u5206\u5e03\u3092\u898b\u308b\ng = sns.FacetGrid(df, col='DEATH_EVENT')\ng.map(plt.hist, 'age', bins=20) ","21f8e634":"# \u5168\u30b5\u30f3\u30d7\u30eb\u306e\u5e74\u4ee3\u5206\u5e03\ng = sns.FacetGrid(df)\ng.map(plt.hist, 'age', bins=20)","df9dc359":"# \u5e74\u4ee3\u6bce\u306b\u6b7b\u4ea1\u7387\u3092\u898b\u308b\n# 5\u6b73\u6bce\u306e\u30ec\u30f3\u30b8\u3067\u533a\u5207\u308b\ndf['agegroup_5age'] = (df['age'] \/\/ 5) * 5\ndf.head()","e3a5ee17":"# 'agegroup_5age'\u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3066\u6b7b\u4ea1\u7387\u3092\u898b\u308b\ngroup_5age = df[['agegroup_5age', 'DEATH_EVENT']].groupby('agegroup_5age', as_index=False)\ndf_agegroup = group_5age.mean().sort_values(by='DEATH_EVENT', ascending=False)\n# \u305d\u308c\u305e\u308c\u306e\u5e74\u4ee3\u306b\u4f55\u4eba\u3044\u308b\u304b\ndf_agegroup['count'] = group_5age.count().DEATH_EVENT\ndf_agegroup","36bc261c":"# 'anaemia'\u304b\u3069\u3046\u304b\u3067\u6b7b\u4ea1\u7387\u3092\u898b\u308b\ngroup_anaemia = df[['anaemia', 'DEATH_EVENT']].groupby(by='anaemia', as_index=False)\ngroup_anaemia.mean().sort_values(by='DEATH_EVENT', ascending=False)","f059353a":"# 'creatinine_phosphokinase'\u306e\u5024\u306e\u5206\u5e03\ng = sns.FacetGrid(df, col='DEATH_EVENT')\ng.map(plt.hist, 'creatinine_phosphokinase', bins=20)","61d02c17":"# 'diabetes'\u304b\u3069\u3046\u304b\u3067\u6b7b\u4ea1\u7387\u3092\u898b\u308b\ngroup_diabetes = df[['diabetes', 'DEATH_EVENT']].groupby(by='diabetes', as_index=False)\ngroup_diabetes.mean().sort_values(by='DEATH_EVENT', ascending=False)","46cdfc52":"# 'ejection_fraction'\u306e\u5206\u5e03\u3092\u898b\u308b\ng = sns.FacetGrid(df, col='DEATH_EVENT')\ng.map(plt.hist, 'ejection_fraction', bins=20)","7c55a9ee":"# 'ejection_fraction'\u306e\u5024\u3054\u3068\u306e\u6b7b\u4ea1\u7387\n# \u5024\u30925\u523b\u307f\u3067\u5206\u3051\u308b\ndf['ejection_fraction_range'] = (df['ejection_fraction'] \/\/ 5) *5\n\n# 'ejection_fraction_range'\u3067\u30b0\u30eb\u30fc\u30d7\u5316\ngroup_EF_range = df[['ejection_fraction_range', 'DEATH_EVENT']].groupby(by='ejection_fraction_range', as_index=False)\ndf_EF = group_EF_range.mean().sort_values(by='DEATH_EVENT', ascending=False)\ndf_EF","627f81df":"# \u6b7b\u4ea1\u7387\u3092\u53ef\u8996\u5316\nplt.scatter(df_EF.ejection_fraction_range, df_EF.DEATH_EVENT)\n\n# \u8ef8\u306e\u8a2d\u5b9a\nplt.xlabel('ejection fraction (%)')\nplt.ylabel('death rate')\n\nplt.show()","e65935ff":"# \u751f\u5b58\u3057\u3066\u3044\u308b\u4eba\u306e\u5e73\u5747\u5024\u304b\u3089\u3069\u308c\u304f\u3089\u3044\u96e2\u308c\u3066\u3044\u308b\u304b\u3092\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u53d6\u308a\u5165\u308c\u308b\n# \u751f\u5b58\u8005\u306e'ejection_fraction'\u306e\u5e73\u5747\u5024\nEF_mean = df.loc[df['DEATH_EVENT'] == 0, 'ejection_fraction'].mean()\nprint('\u751f\u5b58\u8005\u306eejection_fraction\u306e\u5e73\u5747\u5024:{:.3f}'.format(EF_mean))","fa27e208":"# \u751f\u5b58\u8005\u306e\u5e73\u5747\u5024\u304b\u3089\u3069\u306e\u304f\u3089\u3044\u96e2\u308c\u3066\u3044\u308b\u304b\ndf['ejection_fraction_dist'] = np.absolute(df.ejection_fraction - EF_mean)","7e5d981d":"# 'ejection_fraction_dist'\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\ng = sns.FacetGrid(df, col='DEATH_EVENT')\ng.map(plt.hist, 'ejection_fraction_dist', bins=15)","1b19bc09":"# 'ejection_fraction_dist'\u306e\u5024\u309210\u3054\u3068\u306b\u30b0\u30eb\u30fc\u30d7\u5316\n# 'ejection_fraction_dist'\u306e\u5024\u309210\u3054\u3068\u306b\u523b\u3080\ndf['ejection_fraction_dist'] = (df['ejection_fraction_dist'] \/\/ 10) * 10\n\n# 'ejection_fraction_dist'\u3092\u30b0\u30eb\u30fc\u30d7\u5316\ngroup_ejection_fraction_dist = df[['ejection_fraction_dist', 'DEATH_EVENT']].groupby(by='ejection_fraction_dist', as_index=False)\ndf_EFdist = group_ejection_fraction_dist.mean().sort_values(by='DEATH_EVENT', ascending=False)\ndf_EFdist['count'] = group_ejection_fraction_dist.count().DEATH_EVENT\ndf_EFdist","571eb67e":"# \u9ad8\u8840\u5727\u6301\u3061\u304b\u3069\u3046\u304b\u3067\u6b7b\u4ea1\u7387\u304c\u5909\u308f\u308b\u304b\u3069\u3046\u304b\ngroup_pressure = df[['high_blood_pressure', 'DEATH_EVENT']].groupby(by='high_blood_pressure', as_index=False)\ngroup_pressure.mean().sort_values(by='DEATH_EVENT', ascending=False)","b273e1cb":"# 'platelets'\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\ng = sns.FacetGrid(df, col='DEATH_EVENT')\ng.map(plt.hist, 'platelets', bins=20)","e435ab42":"# 'platelets'\u309250000\u523b\u307f\u3067\u5206\u3051\u308b\ndf['platelets_50k'] = (df['platelets'] \/\/ 50000)*50000\n\n# 'platelets_50k'\u3092\u30b0\u30eb\u30fc\u30d7\u5316\ngroup_platelets = df[['platelets_50k', 'DEATH_EVENT']].groupby(by='platelets_50k', as_index=False)\ndf_platelets = group_platelets.mean().sort_values(by='DEATH_EVENT', ascending=False)\ndf_platelets['count'] = group_platelets.count().DEATH_EVENT\ndf_platelets","32f828be":"# 'platelets'\u3068\u6b7b\u4ea1\u7387\u306e\u95a2\u4fc2\u3092\u53ef\u8996\u5316\n# \u30b0\u30e9\u30d5\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\nplt.scatter(df_platelets.platelets_50k, df_platelets.DEATH_EVENT)\n\n# \u8ef8\u3092\u8a2d\u5b9a\nplt.xlabel('platelets range (kplatelets\/mL)')\nplt.ylabel('death ratio')\n\nplt.show()","3ded797c":"# \u751f\u5b58\u3057\u3066\u3044\u308b\u4eba\u306e\u5e73\u5747\u5024\u304b\u3089\u3069\u308c\u304f\u3089\u3044\u96e2\u308c\u3066\u3044\u308b\u304b\u3092\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u53d6\u308a\u5165\u308c\u308b\n# \u751f\u5b58\u8005\u306e'platelets'\u306e\u5e73\u5747\u5024\npl_mean = df.loc[df['DEATH_EVENT'] == 0, 'platelets'].mean()\nprint('\u751f\u5b58\u8005\u306eplatelets\u306e\u5e73\u5747\u5024:{:.3f}'.format(pl_mean))","5b49d0b3":"# \u751f\u5b58\u8005\u306e\u5e73\u5747\u5024\u304b\u3089\u3069\u306e\u304f\u3089\u3044\u96e2\u308c\u3066\u3044\u308b\u304b\ndf['platelets_dist'] = np.absolute(df.platelets - pl_mean)","f8b9d2d2":"# 'platelets_dist'\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\ng = sns.FacetGrid(df, col='DEATH_EVENT')\ng.map(plt.hist, 'platelets_dist', bins=15)","4d262342":"# 'platelets_dist'\u306e\u5024\u309240000\u3054\u3068\u306b\u30b0\u30eb\u30fc\u30d7\u5316\n# 'platelets_dist'\u306e\u5024\u309240000\u3054\u3068\u306b\u523b\u3080\ndf['platelets_dist'] = (df['platelets_dist'] \/\/ 40000) * 40000\n\n# 'platelets_dist'\u3092\u30b0\u30eb\u30fc\u30d7\u5316\ngroup_platelets_dist = df[['platelets_dist', 'DEATH_EVENT']].groupby(by='platelets_dist', as_index=False)\ndf_pldist = group_platelets_dist.mean().sort_values(by='DEATH_EVENT', ascending=False)\ndf_pldist['count'] = group_platelets_dist.count().DEATH_EVENT\ndf_pldist","2fa3a6aa":"# 'platelets'\u3068\u6b7b\u4ea1\u7387\u306e\u95a2\u4fc2\u3092\u53ef\u8996\u5316\n# \u30b0\u30e9\u30d5\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\nplt.scatter(df_pldist.platelets_dist, df_pldist.DEATH_EVENT)\n\n# \u8ef8\u3092\u8a2d\u5b9a\nplt.xlabel('difference from the mean)')\nplt.ylabel('death ratio')\n\nplt.show()","8e292c8a":"# 'serum_creatinine'\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\ng = sns.FacetGrid(df, col='DEATH_EVENT')\ng.map(plt.hist, 'serum_creatinine', bins=10)","ae5ba81e":"# serum_creatinine\u306e\u5404\u7bc4\u56f2\u306e\u5024\u306b\u304a\u3051\u308b\u6b7b\u4ea1\u7387\n# serum_creatinine\u30922\u523b\u307f\u3067\u5206\u3051\u308b\ndf['serum_creatinine_2'] = (df['serum_creatinine'] \/\/ 2) * 2\n# 'serum_creatinine_2'\u3092\u30b0\u30eb\u30fc\u30d7\u5316\ngroup_serum_creatinine = df[['serum_creatinine_2', 'DEATH_EVENT']].groupby(by='serum_creatinine_2', as_index=False)\ndf_SC = group_serum_creatinine.mean().sort_values(by='DEATH_EVENT', ascending=False)\ndf_SC['count'] = group_serum_creatinine.count().DEATH_EVENT\ndf_SC","304ed6f0":"# 'serum_creatinine_2'\u306e\u5404\u5024\u3054\u3068\u306e\u6b7b\u4ea1\u7387\u3092\u53ef\u8996\u5316\nplt.scatter(df_SC.serum_creatinine_2, df_SC.DEATH_EVENT)\n\n# \u8ef8\u540d\u3092\u8a2d\u5b9a\nplt.xlabel('serum creatinine (mg\/dL)')\nplt.ylabel('deth ratio')\n\nplt.show()","77ef236c":"# 'serum_sodium'\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\ng = sns.FacetGrid(df, col='DEATH_EVENT')\ng.map(plt.hist, 'serum_sodium', bins=20)","5b99699e":"# 'serum_sodium'\u309210\u523b\u307f\u3067\u5206\u3051\u308b\ndf['serum_sodium_10'] = (df['serum_sodium'] \/\/ 10) * 10\n# 'serum_sodium_10'\u3092\u30b0\u30eb\u30fc\u30d7\u5316\ngroup_serum_sodium = df[['serum_sodium_10', 'DEATH_EVENT']].groupby(by='serum_sodium_10', as_index=False)\ndf_SS = group_serum_sodium.mean().sort_values(by='DEATH_EVENT', ascending=False)\ndf_SS['count'] = group_serum_sodium.count().DEATH_EVENT\ndf_SS","fa750289":"# 'serum_sodium'\u3068\u6b7b\u4ea1\u7387\u306e\u95a2\u4fc2\u3092\u53ef\u8996\u5316\u3059\u308b\nplt.scatter(df_SS.serum_sodium_10, df_SS.DEATH_EVENT)\n\n# \u8ef8\u306e\u8a2d\u5b9a\nplt.xlabel('serum sodium (mEq\/L)')\nplt.ylabel('death ratio')\n\nplt.show()","cf1f06f4":"# \u751f\u5b58\u3057\u3066\u3044\u308b\u4eba\u306e\u5e73\u5747\u5024\u304b\u3089\u3069\u308c\u304f\u3089\u3044\u96e2\u308c\u3066\u3044\u308b\u304b\u3092\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u53d6\u308a\u5165\u308c\u308b\n# \u751f\u5b58\u8005\u306e'serum_sodium'\u306e\u5e73\u5747\u5024\nSS_mean = df.loc[df['DEATH_EVENT'] == 0, 'serum_sodium'].mean()\nprint('\u751f\u5b58\u8005\u306eserum_sodium\u306e\u5e73\u5747\u5024:{:.3f}'.format(SS_mean))","1a8b3ac2":"# \u751f\u5b58\u8005\u306e\u5e73\u5747\u5024\u304b\u3089\u3069\u306e\u304f\u3089\u3044\u96e2\u308c\u3066\u3044\u308b\u304b\ndf['serum_sodium_dist'] = np.absolute(df.serum_sodium - SS_mean)","65918f07":"# 'platelets_dist'\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\ng = sns.FacetGrid(df, col='DEATH_EVENT')\ng.map(plt.hist, 'serum_sodium_dist', bins=15)","4adcbf9e":"# 'serum_sodium_dist'\u306e\u5024\u309240000\u3054\u3068\u306b\u30b0\u30eb\u30fc\u30d7\u5316\n# 'serum_sodium_dist'\u306e\u5024\u309240000\u3054\u3068\u306b\u523b\u3080\ndf['serum_sodium_dist'] = (df['serum_sodium_dist'] \/\/ 1) * 1\n\n# 'serum_sodium_dist'\u3092\u30b0\u30eb\u30fc\u30d7\u5316\ngroup_serum_sodium_dist = df[['serum_sodium_dist', 'DEATH_EVENT']].groupby(by='serum_sodium_dist', as_index=False)\ndf_SSdist = group_serum_sodium_dist.mean().sort_values(by='DEATH_EVENT', ascending=False)\ndf_SSdist['count'] = group_serum_sodium_dist.count().DEATH_EVENT\ndf_SSdist","f34be007":"# 'serum_sodium_dist'\u306e\u6b7b\u4ea1\u7387\u3092\u53ef\u8996\u5316\n# \u30b0\u30e9\u30d5\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\nplt.scatter(df_SSdist.serum_sodium_dist, df_SSdist.DEATH_EVENT)\n\n# \u8ef8\u3092\u8a2d\u5b9a\nplt.xlabel('difference from the mean')\nplt.ylabel('death ratio')\n\nplt.show()","09b12ab3":"# \u6027\u5225\u3054\u3068\u306e\u6b7b\u4ea1\u7387\ngroup_sex = df[['sex', 'DEATH_EVENT']].groupby(by='sex', as_index=False)\ngroup_sex.mean().sort_values(by='DEATH_EVENT', ascending=False)","364be001":"# \u55ab\u7159\u304c\u4e0e\u3048\u308b\u5f71\u97ff\ngroup_smoking = df[['smoking', 'DEATH_EVENT']].groupby(by='smoking', as_index=False)\ngroup_smoking.mean().sort_values(by='DEATH_EVENT', ascending=False)","a46facb8":"# 'time'\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\ng = sns.FacetGrid(df, col='DEATH_EVENT')\ng.map(plt.hist, 'time', bins=20)","0e0d14d1":"# 'time'\u309225\u523b\u307f\u3067\u5206\u3051\u308b\ndf['time_25'] = (df['time'] \/\/ 25 ) * 25\ngroup_time = df[['time_25', 'DEATH_EVENT']].groupby(by='time_25', as_index=False)\ndf_time = group_time.mean().sort_values(by='DEATH_EVENT', ascending=False)\ndf_time['count'] = group_time.count().DEATH_EVENT\ndf_time","76e2034f":"# 'time'\u3068\u6b7b\u4ea1\u7387\u306e\u95a2\u4fc2\u306e\u53ef\u8996\u5316\nplt.scatter(df_time.time_25, df_time.DEATH_EVENT)\n\n# \u8ef8\u306e\u8a2d\u5b9a\nplt.xlabel('time (days)')\nplt.ylabel('death ratio')\n\nplt.show()","556bd933":"# \u6301\u75c5\u306e\u6570\u3068\u6b7b\u4ea1\u7387\u306e\u95a2\u4fc2\n# \u6301\u75c5\u306e\u6570\u306e\u5217\u3092\u4f5c\u6210\ndf['number of chronic condition'] = df.anaemia + df.diabetes + df.high_blood_pressure + df.smoking","7383efca":"group_chronic = df[['number of chronic condition', 'DEATH_EVENT']].groupby(by='number of chronic condition', as_index=False)\ndf_chronic = group_chronic.mean().sort_values(by='DEATH_EVENT', ascending=False)\ndf_chronic['count'] = group_chronic.count().DEATH_EVENT\ndf_chronic","665c67ca":"# \u6307\u5b9a\u3057\u305f\u6301\u75c5\u306e\u6570\u3068\u6b7b\u4ea1\u7387\u306e\u95a2\u4fc2\n# \u6307\u5b9a\u3057\u305f\u6301\u75c5\u306e\u6570\u306e\u5217\u3092\u4f5c\u6210\ndf['risk factor'] = (df.diabetes ) + (df.high_blood_pressure * 2) + (df.smoking)","9a101c1d":"# \u76f8\u95a2\u4fc2\u6570\u884c\u5217\u3092\u51fa\u529b\u3059\u308b\ncorr_mat2 = df.corr(method='pearson')\ncorr_mat2[['DEATH_EVENT']]","c103062f":"# 'df'\u306ecolumns\u306e\u4e00\u89a7\ndf.columns.values","710f42eb":"# 'df'\u306e\u78ba\u8a8d\ndf.head()","a5eb9541":"# \u4e0d\u8981\u306a\u5217\u306e\u524a\u9664\ndf_process = df.drop(['age', 'creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_creatinine', 'serum_sodium', 'time', 'number of chronic condition', 'ejection_fraction_range', 'platelets_50k', 'serum_sodium_10', 'diabetes', 'smoking', 'high_blood_pressure'], axis=1)","c2dba5ce":"df_process.head()","a49bc474":"# \u76f8\u95a2\u4fc2\u6570\u884c\u5217\u3092\u51fa\u529b\u3059\u308b\ncorr_mat_process = df_process.corr(method='pearson')\ncorr_mat_process","ffb1cde5":"# \u76f8\u95a2\u884c\u5217\u3092\u53ef\u8996\u5316\u3059\u308b\nsns.heatmap(corr_mat_process,\n           vmin=-1.0,\n           vmax=1.0,\n           center=0,\n           annot=True,\n           fmt='.1f',\n           xticklabels=corr_mat_process.columns.values,\n           yticklabels=corr_mat_process.columns.values\n           )\nplt.show()","f88c884b":"# \u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u3092\u5206\u3051\u308b\n# \u76ee\u7684\u5909\u6570\nY = df[['DEATH_EVENT']]\n# \u8aac\u660e\u5909\u6570\nX = df.drop('DEATH_EVENT', axis=1)","49b766f4":"# 'train'\u30c7\u30fc\u30bf\u3068'test'\u30c7\u30fc\u30bf\u3092\u5206\u3051\u308b\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state=0)","c3cf4eac":"# \u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\nlog_model = LogisticRegression(max_iter=1000)\n\n# \u5b66\u7fd2\nlog_model.fit(X_train, Y_train)","0442a8bd":"# 'test'\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\nlog_predict = log_model.predict(X_test)\n\n# \u4e88\u6e2c\u306e\u8a55\u4fa1\nlog_accuracy = metrics.accuracy_score(Y_test, log_predict)\nprint('\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30:{0:.3f}'.format(log_accuracy) )","0c1202d4":"# k\u3092\u5909\u5316\u3055\u305b\u3066k\u306e\u5024\u3092\u6c7a\u5b9a\u3059\u308b\n# k\u30921\uff5e30\u307e\u3067\u5909\u5316\u3055\u305b\u308b\nk_range = range(1, 31)\n\nKaccuracy = []\nfor k in k_range:\n    # \uff4b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\n    knn = KNeighborsClassifier(n_neighbors=k)\n    # \u5b66\u7fd2\n    knn.fit(X_train, Y_train)\n    \n    # 'test'\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\n    k_pred = knn.predict(X_test)\n    \n    # \u4e88\u6e2c\u306e\u8a55\u4fa1\n    Kaccuracy.append(metrics.accuracy_score(Y_test, k_pred))","8de211b1":"# k\u306e\u5024\u3092\u5909\u5316\u3055\u305b\u305f\u3068\u304d\u306e\u6b63\u7b54\u7387\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\nplt.plot(k_range, Kaccuracy)\n\n# \u8ef8\u540d\u306e\u8a2d\u5b9a\nplt.xlabel('K for KNN')\nplt.ylabel('Testing Accuracy')\n\nplt.show()","97747c42":"# \u7cbe\u5ea6\u304c\u6700\u3082\u9ad8\u3044'k'\u306eindex\u3092\u63a2\u3059\nkmax = Kaccuracy.index(max(Kaccuracy))\nprint(kmax)","0aafb846":"# \u7cbe\u5ea6\u304c\u6700\u3082\u9ad8\u304f\u306a\u308b'k'\u306e\u5024\u3067\u518d\u5ea6\u5b66\u7fd2\u3068\u30c6\u30b9\u30c8\u3092\u884c\u3046\n# \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\nKnn = KNeighborsClassifier(n_neighbors = kmax+1)\n\n# \u5b66\u7fd2\nKnn.fit(X_train, Y_train)\n\n# 'test'\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\nknn_predict = Knn.predict(X_test)\n\n# \u4e88\u6e2c\u306e\u8a55\u4fa1\nknn_accuracy = metrics.accuracy_score(Y_test, knn_predict)\nprint('K\u8fd1\u508d\u6cd5:{:.3f}'.format(knn_accuracy))","b09dcddf":"# \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\nSVC_model = SVC()\n\n# \u5b66\u7fd2\nSVC_model.fit(X_train, Y_train)\n\n# 'test'\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\nSVC_predict = SVC_model.predict(X_test)\n\n# \u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u8a55\u4fa1\nSVC_accuracy = metrics.accuracy_score(Y_test, SVC_predict)\nprint('\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3:{:.3f}'.format(SVC_accuracy))","f9587e8a":"# \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\nGNB_model = GaussianNB()\n\n# \u5b66\u7fd2\nGNB_model.fit(X_train, Y_train)\n\n# 'test'\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\nGNB_predict = GNB_model.predict(X_test)\n\n# \u4e88\u6e2c\u306e\u8a55\u4fa1\nGNB_accuracy = metrics.accuracy_score(Y_test, GNB_predict)\nprint('GNB:{:.3f}'.format(GNB_accuracy))","54eda418":"# i\u3092\u5909\u5316\u3055\u305b\u3066i\u306e\u5024\u3092\u6c7a\u5b9a\u3059\u308b\n# i\u30921\uff5e101\u307e\u3067\u5909\u5316\u3055\u305b\u308b\ni_range = range(1, 101)\n\nIaccuracy=[]\n\nfor i in i_range:\n    # \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\n    tree_model = DecisionTreeClassifier(max_depth=i)\n    # \u5b66\u7fd2\n    tree_model.fit(X_train, Y_train)\n    # 'test'\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\n    tree_predict = tree_model.predict(X_test)\n    # \u4e88\u6e2c\u306e\u8a55\u4fa1\n    Iaccuracy.append(metrics.accuracy_score(Y_test, tree_predict))","fa0ae320":"# \u4e88\u6e2c\u306e\u7cbe\u5ea6\u306e\u7d50\u679c\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\nplt.plot(i_range, Iaccuracy)\n\n# \u8ef8\u540d\u306e\u8a2d\u5b9a\nplt.xlabel('i for DTC')\nplt.ylabel('Testing Accuracy')\n\nplt.show()","3f8632ce":"# \u7cbe\u5ea6\u304c\u6700\u3082\u9ad8\u304f\u306a\u308b\u3088\u3046\u306a'i'\u306eindex\u3092\u63a2\u3059\nimax = Iaccuracy.index(max(Iaccuracy))\nprint(imax)","556bcaba":"# i=imax\u3068\u3057\u3066\u518d\u5ea6\u5b66\u7fd2\u3068\u30c6\u30b9\u30c8\n# \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\nTree_model = DecisionTreeClassifier(max_depth = imax+1)\n# \u5b66\u7fd2\nTree_model.fit(X_train, Y_train)\n# 'test'\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\nTree_predict = Tree_model.predict(X_test)\n# \u4e88\u6e2c\u306e\u8a55\u4fa1\nTree_accuracy = metrics.accuracy_score(Y_test, Tree_predict)\nprint('\u6c7a\u5b9a\u6728:{:.3f}'.format(Tree_accuracy))","6776ad79":"# \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\nclf_model = RandomForestClassifier()\n# \u5b66\u7fd2\nclf_model.fit(X_train, Y_train)\n# 'test'\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\nclf_predict = clf_model.predict(X_test)\n# \u4e88\u6e2c\u306e\u8a55\u4fa1\nclf_accuracy = metrics.accuracy_score(Y_test, clf_predict)\nprint('\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8:{:.3f}'.format(clf_accuracy))","12e8f012":"# \u30c7\u30fc\u30bf\u306e\u6a19\u6e96\u5316\n# \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\nsc = StandardScaler()\n# \u8aac\u660e\u5909\u6570\u306e\u6a19\u6e96\u5316\ndf_std = sc.fit_transform(df_data)","cf5d86c3":"# 'df_std'\u3092DataFrame\u306b\u5909\u63db\u3059\u308b\ndf_std = pd.DataFrame(df_std, columns=df_data.columns.values)\ndf_std.head()","dcbf667b":"# \u4e3b\u6210\u5206\u5206\u6790\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\npca = PCA(n_components=3)\npca.fit(df_std)","39f0a1df":"print('\u5404\u4e3b\u6210\u5206\u306e\u5206\u6563:{}'.format(pca.explained_variance_))","884e3c79":"# \u60c5\u5831\u306e\u5727\u7e2e\u7387\nprint('\u5404\u4e3b\u6210\u5206\u306e\u5206\u6563\u5272\u5408:{}'.format(pca.explained_variance_ratio_))","ba33d9bc":"# \u4e3b\u6210\u5206\u5206\u6790\u3092\u884c\u3046\narray_pca = pca.transform(df_std)\n\n# DataFrame\u306b\u5909\u63db\u3059\u308b\ndf_pca = pd.DataFrame(array_pca, columns={'first_ingredient', 'second_ingredient', 'third_ingredient'})\n\n# \u4e3b\u6210\u5206\u5206\u6790\u306e\u7d50\u679c\u3068\u76ee\u7684\u5909\u6570\u3092\u7d50\u5408\u3059\u308b\ndf_pca1 = pd.concat([df_pca, df_target], axis=1)\ndf_pca.head()","4516e83e":"# \u4e3b\u6210\u5206\u5206\u6790\u306e\u7d50\u679c\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\nfig = plt.figure(figsize=(8,8))\nax = Axes3D(fig)\n\n# Axes\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\nax.set_title('Pricipal component analysis')\n\n# \u8ef8\u30e9\u30d9\u30eb\u3092\u8a2d\u5b9a\nax.set_xlabel('first ingredient', size=14, color='r')\nax.set_ylabel('second ingredient', size=14, color='r')\nax.set_zlabel('third ingredient', size=14, color='r')\n\n# 'DEATH_EVENT'\u3092\u4e26\u3073\u66ff\u3048\ncluster = sorted(set(df_pca1['DEATH_EVENT']))\n# \u8272\u306e\u6307\u5b9a\ncolors = list(mcolors.TABLEAU_COLORS.keys())\n\n# 'DEATH_EVENT'\u306e\u5024\u3054\u3068\u306b\u30d7\u30ed\u30c3\u30c8\u3059\u308b\nfor i, x in enumerate(cluster):\n    df_pca2 = df_pca1[df_pca1['DEATH_EVENT'] == x]\n    X1 = df_pca2['first_ingredient']\n    Y1 = df_pca2['second_ingredient']\n    Z1 = df_pca2['third_ingredient']\n    p = ax.scatter(X1,Y1,Z1, c=colors[i], label=x)\n\nplt.legend()\nplt.show()","33f8e72c":"# 'train'\u30c7\u30fc\u30bf\u3068'test'\u30c7\u30fc\u30bf\u3092\u5206\u3051\u308b\nX_train_pca, X_test_pca, Y_train_pca, Y_test_pca = train_test_split(df_pca, df_target, random_state=0)","2fb1b8d3":"# \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\nlog_model_pca = LogisticRegression(max_iter=1000)\n# \u5b66\u7fd2\nlog_model_pca.fit(X_train_pca, Y_train_pca)\n# 'test'\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\npca_predict = log_model_pca.predict(X_test_pca)\npca_accuracy = metrics.accuracy_score(Y_test_pca, pca_predict)\nprint('\u4e3b\u6210\u5206\u5206\u6790:{:.3f}'.format(pca_accuracy))","e1ed0a28":"df_accuracy = pd.DataFrame({'\u30e2\u30c7\u30eb':['\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30', 'K\u8fd1\u508d\u6cd5', 'SVC', '\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u6cd5','\u6c7a\u5b9a\u6728\u30e2\u30c7\u30eb', '\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8', '\u4e3b\u6210\u5206\u5206\u6790'],\n                           '\u8a55\u4fa1':[log_accuracy, knn_accuracy, SVC_accuracy, GNB_accuracy, Tree_accuracy, clf_accuracy, pca_accuracy]})","6b4303b1":"# \u4e88\u6e2c\u306e\u7cbe\u5ea6\u304c\u9ad8\u3044\u9806\u306bsort\ndf_accuracy.sort_values(by='\u8a55\u4fa1', ascending=False)","a904e7d7":"# \u5404\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u306e\u7d50\u679c\u4e00\u89a7\ndf_predict = pd.DataFrame({'Logistic':log_predict,\n                          'KNN':knn_predict,\n                          'GNB':GNB_predict,\n                          'DTC':Tree_predict,\n                          'SVC':SVC_predict,\n                          'CLF':clf_predict,\n                          'PCA':pca_predict,\n                          'real':Y_test['DEATH_EVENT']})","95cb2c25":"#  \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3068\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u6cd5\u4ee5\u5916\u306e\u30e2\u30c7\u30eb\u3092\u7528\u3044\u3066\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\ndf_predict['sum'] =  df_predict.Logistic  + df_predict.KNN + df_predict.CLF + df_predict.PCA + df_predict.SVC","fae7bfc5":"df_predict.head()","6adca809":"# \u5404\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u3092\u8003\u616e\u3057\u305f\u7d50\u679c\ndf_predict.loc[(df_predict['sum'] >= 0) & (df_predict['sum'] <= 2 ) , 'sum'] = 0\ndf_predict.loc[(df_predict['sum'] > 2 ), 'sum'] = 1\npredict_sum = df_predict['sum']","e815d40f":"# \u4e88\u6e2c\u306e\u8a55\u4fa1\nsum_accuracy = metrics.accuracy_score(Y_test, predict_sum)\nprint('\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\u306e\u4e88\u6e2c\u7cbe\u5ea6:{:.3f}'.format(sum_accuracy))","ad7ad36f":"# 5\u3064\u306e\u30e2\u30c7\u30eb\u3092\u7528\u3044\u3066\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\u3057\u305f\u7d50\u679c\u3068\u6c7a\u5b9a\u6728\u30e2\u30c7\u30eb\uff0c\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u6cd5\u3092\u7528\u3044\u3066\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\ndf_all = pd.DataFrame({'DTC':Tree_predict,\n                       'GNB':GNB_predict,\n                       'SUM':predict_sum,\n                       'real':Y_test['DEATH_EVENT']})","04a9669d":"df_all['all'] = df_all.DTC + df_all.GNB + df_all.SUM","f3ae1874":"# \u5404\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u3092\u8003\u616e\u3057\u305f\u7d50\u679c\ndf_all.loc[(df_all['all'] >= 0) & (df_all['all'] <= 1 ) , 'all'] = 0\ndf_all.loc[(df_all['all'] > 1 ), 'all'] = 1\npredict_all = df_all['all']","558df02b":"# \u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\u306e\u4e88\u6e2c\u306e\u8a55\u4fa1\nall_accuracy = metrics.accuracy_score(Y_test, predict_all)\nprint('\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\u306e\u4e88\u6e2c\u7cbe\u5ea6:{:.3f}'.format(all_accuracy))","5fa8501c":"- 'creatinine_phosphokinase'","628dece3":"- 'ejection_fraction'(\u99c6\u51fa\u7387)","fb39747b":"- 'serum_sodium'(\u8840\u6db2\u4e2d\u306e\u8840\u6e05\u30ca\u30c8\u30ea\u30a6\u30e0\u306e\u91cf( mEq\/L))","13fa50de":"# 3.\u30c7\u30fc\u30bf\u306e\u6982\u89b3","46afa586":"\u5024\u304c6000\u3092\u8d85\u3048\u308b\u3068\u307b\u307c\u78ba\u5b9f\u306b\u6b7b\u4ea1\u3057\u3066\u3044\u308b","778eb68a":"  600000\u4ee5\u4e0a\u306e\u5024\u306f\u6a19\u672c\u304c1\u3064\u3057\u304b\u306a\u3044\u3053\u3068\u3092\u8003\u616e\u3059\u308c\u3070\uff0c\u8840\u5c0f\u677f\u306e\u91cf\u5358\u4f53\u3067\u306f\u6b7b\u4ea1\u7387\u306b\u3042\u307e\u308a\u95a2\u4fc2\u3057\u306a\u3044","e4a98b8d":"\u8907\u6570\u306e\u30e2\u30c7\u30eb\u3092\u7528\u3044\u3066\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\u3057\u4e88\u6e2c\u3057\u305f\u7d50\u679c\u3088\u308a\uff0c\u6c7a\u5b9a\u6728\u30e2\u30c7\u30eb\u3060\u3051\u3067\u4e88\u6e2c\u3057\u305f\u5834\u5408\u306e\u65b9\u304c\u7cbe\u5ea6\u304c\u9ad8\u304b\u3063\u305f\uff0e\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\u306e\u91cd\u307f\u306e\u4ed8\u3051\u65b9\u306a\u3069\u3092\u5de5\u592b\u3057\u3066\u3084\u308c\u3070\uff0c\u7cbe\u5ea6\u304c\u4e0a\u304c\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u3089\u308c\u308b\uff0e\u307e\u305f\uff0c\u4e00\u822c\u7684\u306b\u5fc3\u8840\u7ba1\u75be\u60a3\u306e\u5371\u967a\u56e0\u5b50\u3068\u3057\u3066\u77e5\u3089\u308c\u308b\u55ab\u7159,\u9ad8\u8840\u5727\uff0c\u7cd6\u5c3f\u75c5\u306e\u8981\u7d20\u3092\u4e0a\u624b\u304f\u5de5\u592b\u3057\u3066\u3084\u308c\u3070\uff0c\u3055\u3089\u306b\u7cbe\u5ea6\u3092\u9ad8\u3081\u3089\u308c\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u305f\uff0e","c9348e5f":"'ejection_fraction_dist'\u304c\u5927\u304d\u3044\u307b\u3069\u6b7b\u4ea1\u7387\u304c\u9ad8\u304f\u306a\u308b","981567f4":"**4.2.\u65b0\u305f\u306a\u8aac\u660e\u5909\u6570\u306e\u4f5c\u6210**","9e580762":"\u5fc3\u8840\u7ba1\u75be\u60a3(CVDs)\u306f\u4e16\u754c\u3067\u6700\u3082\u591a\u3044\u6b7b\u56e0\u3067\u3042\u308a\uff0c\u4e16\u754c\u4e2d\u30671\u5e74\u9593\u306b\u304a\u3088\u305d1790\u4e07\u4eba\u306e\u4eba\u304c\u4ea1\u304f\u306a\u3063\u3066\u3044\u308b\u3068\u3044\u308f\u308c\u3066\u3044\u308b\uff0e\u3053\u308c\u306f\u4e16\u754c\u4e2d\u306e\u6b7b\u8005\u306e\u7d0431 %\u3092\u5360\u3081\u3066\u3044\u308b\uff0e","aa031a5e":"- 'serum_creatinine'(\u8840\u6db2\u4e2d\u306e\u8840\u6e05\u30af\u30ec\u30a2\u30c1\u30cb\u30f3\u306e\u91cf( mg\/dL))","0d5a75c0":"# 2.\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","ff0e1b00":"- \u6c7a\u5b9a\u6728\u30e2\u30c7\u30eb","058d0f8f":"- 130\u3088\u308a\u3082\u4f4e\u3044\u3068\u6b7b\u4ea1\u7387\u304c\u9ad8\u3044\n- 130\u4ee5\u4e0a\u3067\u306f\uff0c\u5024\u304c\u9ad8\u3044\u307b\u3069\u6b7b\u4ea1\u7387\u304c\u4f4e\u3044","003e8cba":"# 5.\u30c7\u30fc\u30bf\u306e\u6574\u7406\u3068\u52a0\u5de5","47b5c63f":"'ejection_fraction_dist'\u304c\u5927\u304d\u3044\u307b\u3069\u6b7b\u4ea1\u7387\u304c\u9ad8\u304f\u306a\u308b","092df5d0":"- \u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u6cd5","fdcca8dd":"# 8.\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0","bc912092":"\n# 7.\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1","708c577f":"# 4.\u30c7\u30fc\u30bf\u306e\u5206\u6790(\u76f8\u95a2\u95a2\u4fc2\u306a\u3069\u3092\u898b\u3066\u3044\u304f)","fc68b8ae":"- 'platelets'(\u8840\u6db2\u4e2d\u306e\u8840\u5c0f\u677f\u306e\u91cf)","add69dc0":"# 6.\u5b66\u7fd2\u3068\u30c6\u30b9\u30c8","f710c7b5":"\u6b20\u640d\u5024\u306f\u306a\u3057","86ce4b17":"# 0.\u7279\u5fb4\u91cf\u306e\u8aac\u660e","a6950298":"- 'anaemia'(\u8ca7\u8840)","96e0b340":"**6.1.\u5404\u30e2\u30c7\u30eb\u306b\u3088\u308b\u4e88\u6e2c**","450597bc":"# 9.\u307e\u3068\u3081","e62d726f":"- 'diabetes'(\u7cd6\u5c3f\u75c5)","3ac5e252":"- \u4e3b\u6210\u5206\u5206\u6790","b9172a2a":"'diabetes'\u3060\u3051\u3067\u306f\u6b7b\u4ea1\u7387\u306b\u5927\u304d\u304f\u95a2\u308f\u3089\u306a\u3044","b9d6fd4d":"\u55ab\u7159\u306f\u6b7b\u4ea1\u7387\u306b\u307b\u307c\u95a2\u4fc2\u3057\u306a\u3044\u3068\u3044\u3048\u308b","f4315ea6":"**4.2.\u5404\u8aac\u660e\u5909\u6570\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304f**","3ddac9d6":"- \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8","208a6b63":"    # \u5fc3\u8840\u7ba1\u75be\u60a3\u306b\u3088\u308b\u6b7b\u4ea1\u8005\u306e\u4e88\u6e2c","774d1579":"- 40\uff5e60\u306f\u6b63\u5e38\u3067\u3042\u308b\uff0e\n- \u4f4e\u3059\u304e\u305f\u308a\u9ad8\u3059\u304e\u308b\u3068\u6b7b\u4ea1\u7387\u304c\u4e0a\u304c\u308b","beb5bd2a":"- 45\uff5e49 \u6b73\u4ee5\u5916\u306f\u5e74\u9f62\u304c\u4e0a\u304c\u308b\u307b\u3069\u6b7b\u4ea1\u7387\u304c\u9ad8\u304f\u306a\u308b\n- 40\uff5e45 \u6b73\u306f\u6b7b\u4ea1\u7387\u304c\u4f4e\u3044","442b0efb":"\u5358\u7d14\u306a\u6301\u75c5\u306e\u6570\u306e\u5408\u8a08\u306b\u306f\u6b7b\u4ea1\u7387\u3068\u76f8\u95a2\u95a2\u4fc2\u304c\u306a\u3044","048bf22f":"- K\u8fd1\u508d\u6cd5","e9a771e4":"- 'time' \u8ffd\u8de1\u8abf\u67fb\u671f\u9593( \u65e5\u6570)","fc019ae6":"\u9ad8\u8840\u5727\u6301\u3061\u3060\u3068\u6b7b\u4ea1\u7387\u304c\u304a\u3088\u305d7 %\u4e0a\u304c\u308b","5de8c86e":"- \u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3","2edb12bc":"\u6027\u5225\u306f\u307b\u307c\u95a2\u4fc2\u3057\u306a\u3044\u3068\u3044\u3048\u308b","bfc3551d":"**4.1. \u76f8\u95a2\u95a2\u4fc2\u3092\u898b\u308b**","25f9fe77":"'anaemia'\u3060\u3068\u6b7b\u4ea1\u7387\u304c5 %\u307b\u3069\u4e0a\u304c\u308b","c5d7472c":"- 'sex'(\u6027\u5225(0=\u5973\u6027, 1=\u7537\u6027))","a637f046":"- 'smoking'(\u55ab\u7159\u8005\u304b\u5426\u304b(0=\u55ab\u7159\u8005\u3067\u306a\u3044, 1=\u55ab\u7159\u8005))","1f80835d":"- 'age'","6a0e4b16":"50\u65e5\u4ee5\u5185\u3060\u3068\u6b7b\u4ea1\u7387\u304c\u9ad8\u3044","a544c7f1":"- \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30","770fb6af":"- \u76ee\u7684\u5909\u6570  \n**DEATH_EVENT** : \u6b7b\u4ea1\u3057\u305f\u304b\u3069\u3046\u304b(0=\u751f\u5b58, 1=\u6b7b\u4ea1)  \n<br>\n- \u8aac\u660e\u5909\u6570  \n**age** : \u5e74\u9f62  \n**anaemia** : \u8ca7\u8840(\u8d64\u8840\u7403\u3084\u30d8\u30e2\u30b0\u30ed\u30d3\u30f3\u306e\u6e1b\u5c11)\u304b\u5426\u304b(0=\u8ca7\u8840\u3067\u306a\u3044, 1=\u8ca7\u8840)  \n**creatinine_phosphokinase** : \u8840\u6db2\u4e2d\u306eCPK(\u30af\u30ec\u30a2\u30c1\u30f3\u30db\u30b9\u30ad\u30ca\u30fc\u30bc)\u306e\u91cf( mcg\/L)  \n(\u6ce8)\u30af\u30ec\u30a2\u30c1\u30f3\u30db\u30b9\u30ad\u30ca\u30fc\u30bc: \u52d5\u7269\u304c\u6301\u3064\u9175\u7d20\u3067\u3042\u308a\uff0c\u7b4b\u8089\u306e\u53ce\u7e2e\u306e\u969b\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u4ee3\u8b1d\u306b\u95a2\u4e0e\u3057\u3066\u3044\u308b\uff0e   \n**diabetes** : \u7cd6\u5c3f\u75c5\u304b\u5426\u304b(0=\u7cd6\u5c3f\u75c5\u3067\u306a\u3044, 1=\u7cd6\u5c3f\u75c5)  \n**ejection_fraction** : \u99c6\u51fa\u7387(1\u56de\u306e\u5fc3\u81d3\u306e\u53ce\u7e2e\u3067\u8840\u6db2\u3092\u9001\u308a\u51fa\u3059\u8840\u6db2\u91cf( %))  \n**high_blood_pressure** : \u9ad8\u8840\u5727\u304b\u5426\u304b(0=\u9ad8\u8840\u5727\u3067\u306a\u3044, 1=\u9ad8\u8840\u5727)  \n**platelets** : \u8840\u6db2\u4e2d\u306e\u8840\u5c0f\u677f\u306e\u91cf( kplatelets\/mL)  \n**serum_creatinine** :  \u8840\u6db2\u4e2d\u306e\u8840\u6e05\u30af\u30ec\u30a2\u30c1\u30cb\u30f3\u306e\u91cf( mg\/dL)  \n(\u6ce8)\u30af\u30ec\u30a2\u30c1\u30cb\u30f3:\u7b4b\u8089\u306b\u542b\u307e\u308c\u308b\u30bf\u30f3\u30d1\u30af\u8cea\u306e\u8001\u5ec3\u7269\uff0e  \n**serum_sodium** : \u8840\u6db2\u4e2d\u306e\u8840\u6e05\u30ca\u30c8\u30ea\u30a6\u30e0\u306e\u91cf( mEq\/L)  \n**sex** : \u6027\u5225(0=\u5973\u6027, 1=\u7537\u6027)  \n**smoking** : \u55ab\u7159\u8005\u304b\u5426\u304b(0=\u55ab\u7159\u8005\u3067\u306a\u3044, 1=\u55ab\u7159\u8005)  \n**time** : \u8ffd\u8de1\u8abf\u67fb\u671f\u9593( \u65e5\u6570)  "}}