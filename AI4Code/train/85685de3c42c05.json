{"cell_type":{"12f489c5":"code","d5a32833":"code","fdab7c09":"code","9ea4cec1":"code","a369b373":"code","0f487112":"code","8a038037":"code","b61cf12f":"code","af8edc13":"code","8d59650b":"code","89e924cf":"code","f86bf505":"code","d4a69ecf":"code","d914d81d":"code","bfe43836":"code","d828b908":"code","86db0c37":"code","71e19e18":"code","d70cfb73":"code","a1402d02":"code","2b92bb55":"code","043f671e":"code","48f7af62":"code","9176f4d2":"code","a242c13c":"code","d525076c":"code","2f40404a":"code","6ca954b1":"code","bdee1104":"code","38e57a54":"code","ff4cde69":"code","4438f8cf":"code","77e05595":"code","a7376f77":"code","8c215a35":"code","59a256c1":"code","e93c06ec":"code","8001478c":"code","85a0e976":"code","dce79011":"code","9efaea11":"code","79f1ae49":"code","3bb995ff":"code","083dc33a":"code","f4235d73":"code","cd50b88c":"code","08def6f1":"code","f59412d2":"code","768ef46c":"code","20eaad0a":"code","da28dadd":"code","874527eb":"code","854ff109":"code","7500e0d5":"code","470b17d8":"code","dcc5f45b":"code","ccceb3fd":"code","7cafd408":"code","de5a7fed":"code","d257b745":"code","8a0fe563":"code","48963ad2":"code","0ac1b368":"code","796cd09e":"code","4de5dd05":"code","ec2b6ce4":"markdown","f123b7c3":"markdown","12634614":"markdown","78d348fc":"markdown","195398b6":"markdown","67b9bec8":"markdown","eb2bf4a5":"markdown","5be4a5c2":"markdown","174540fb":"markdown","f219cf82":"markdown","10d3a252":"markdown","9e294457":"markdown","3dd9cb28":"markdown","1f7698ee":"markdown","328ed818":"markdown","e19509da":"markdown","51c019a7":"markdown"},"source":{"12f489c5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","d5a32833":"df = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')","fdab7c09":"df.head()","9ea4cec1":"df.info()","a369b373":"df.columns","0f487112":"df.describe().transpose()","8a038037":"df.shape","b61cf12f":"sns.heatmap(df.isnull(), yticklabels= False, cbar=False, cmap = 'viridis')","af8edc13":"df.hist(figsize = (20,20) )\nplt.show()","8d59650b":"# Evaluating the percentage of fraud cases in the dataset\n\nFraud = df[df['Class'] == 1]\nNormal = df[df['Class'] == 0]\n\nFraud_percentage = (len(Fraud)\/len(Normal)) * 100\nprint(Fraud_percentage,  '%')\nprint('Fraud Cases: {}'.format(len(Fraud)))\nprint('Normal Cases: {}'.format(len(Normal)))","89e924cf":"sns.countplot('Class', data = df, palette = ['b', 'r'])","f86bf505":"# Correlation \ncorr = df.corr()\nsns.set_context('notebook', font_scale=1.0, rc = {'lines.linewidth': 2.5})\nplt.figure(figsize = (20,20))\n\n# mask the duplicate correlation values\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask, 1)] = True\n\na = sns.heatmap(corr, mask = mask, annot=True, fmt = '.2f', cmap = 'viridis')\n\nrotx = a.set_xticklabels(a.get_xticklabels(), rotation = 90)\nroty = a.set_yticklabels(a.get_yticklabels(), rotation = 30)","d4a69ecf":"fig= plt.figure(figsize =(10,10))\nax1 = plt.subplot(2, 1, 1)\nsns.scatterplot(x = 'Time', y = 'Amount', data =Fraud, ax = ax1)\n\nax2 = plt.subplot(2, 1, 2)\nsns.scatterplot(x = 'Time', y = 'Amount', data =Normal, ax = ax2)","d914d81d":"from sklearn.model_selection import train_test_split","bfe43836":"X = df.drop('Class', axis = 1)\ny = df.Class\nX.shape, y.shape","d828b908":" X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","86db0c37":"from sklearn.linear_model import LogisticRegression\nlgr = LogisticRegression()\nlgr.fit(X_train, y_train)\ny_pred = lgr.predict(X_test)","71e19e18":"from sklearn.metrics import classification_report, accuracy_score, confusion_matrix","d70cfb73":"print('Classification report:')\nprint(classification_report(y_test, y_pred))\nprint('Confusion Metrix: ')\nprint(confusion_matrix(y_test, y_pred))\nprint('Accuracy Score')\nprint(accuracy_score(y_test, y_pred))","a1402d02":"from sklearn.metrics import roc_auc_score, roc_curve","2b92bb55":"y_score = lgr.predict_proba(X_test)[:,1]","043f671e":"FPR, TPR, threshold = roc_curve(y_test, y_score )\n\n#Plot ROC curve\nplt.title('ROC Curve of Logistic regression (full data)')\nplt.plot(FPR, TPR)\nplt.plot([0,1], ls ='--')\nplt.plot([0,0], [1,0], c='.7'), plt.plot([1,1], c='.7')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","48f7af62":"ras_lgr = roc_auc_score(y_test, y_score)\nprint(ras_lgr)","9176f4d2":"from imblearn.under_sampling import NearMiss","a242c13c":"# Implementing Undersampling \nnm = NearMiss()\nX_us, y_us= nm.fit_sample(X,y)","d525076c":"X_us.shape, y_us.shape","2f40404a":"from collections import Counter\n\nprint('Original dataset shape {}'.format(Counter(y)))\nprint('Undersampled dataset shape {}' .format(Counter(y_us)))","6ca954b1":"X_train_us, X_test_us, y_train_us, y_test_us = train_test_split(X_us, y_us, test_size=0.33, random_state=42)","bdee1104":"X_train_us.shape, y_train_us.shape, X_test_us.shape, y_test_us.shape","38e57a54":"lgr.fit(X_train_us, y_train_us)\ny_pred_us = lgr.predict(X_test_us)","ff4cde69":"print('Classification report:')\nprint(classification_report(y_test_us, y_pred_us))\nprint('Confusion Metrix: ')\nprint(confusion_matrix(y_test_us, y_pred_us))\nprint('Accuracy Score')\nprint(accuracy_score(y_test_us, y_pred_us))","4438f8cf":"y_score_us = lgr.predict_proba(X_test_us)[:,1]","77e05595":"FPR, TPR, threshold = roc_curve(y_test_us, y_score_us )\n\n#Plot ROC curve\nplt.title('ROC Curve of undersampled')\nplt.plot(FPR, TPR)\nplt.plot([0,1], ls ='--')\nplt.plot([0,0], [1,0], c='.7'), plt.plot([1,1], c='.7')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","a7376f77":"ras_us = roc_auc_score(y_test_us, y_score_us)\nprint(ras_us)","8c215a35":"from imblearn.combine import SMOTETomek\n\nsmk = SMOTETomek(random_state = 42)\nX_ov_smk, y_ov_smk = smk.fit_sample(X, y)","59a256c1":"X_ov_smk.shape, y_ov_smk.shape","e93c06ec":"X_train_smk, X_test_smk, y_train_smk, y_test_smk = train_test_split(X_ov_smk, y_ov_smk, test_size=0.33, random_state=42)","8001478c":"X_train_smk.shape, y_train_smk.shape, X_test_smk.shape, y_test_smk.shape","85a0e976":"lgr.fit(X_train_smk, y_train_smk)\ny_pred_smk = lgr.predict(X_test_smk)","dce79011":"print('Classification report:')\nprint(classification_report(y_test_smk, y_pred_smk))\nprint('Confusion Metrix: ')\nprint(confusion_matrix(y_test_smk, y_pred_smk))\nprint('Accuracy Score')\nprint(accuracy_score(y_test_smk, y_pred_smk))","9efaea11":"y_score_smk = lgr.predict_proba(X_test_smk)[:,1]","79f1ae49":"FPR, TPR, threshold = roc_curve(y_test_smk, y_score_smk )\n\n#Plot ROC curve\nplt.title('ROC Curve of Oversampled (SMOTETomek)')\nplt.plot(FPR, TPR)\nplt.plot([0,1], ls ='--')\nplt.plot([0,0], [1,0], c='.7'), plt.plot([1,1], c='.7')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","3bb995ff":"ras_smk = roc_auc_score(y_test_smk, y_score_smk)\nprint(ras_smk)","083dc33a":"# RandomOverSampler\nfrom imblearn.over_sampling import RandomOverSampler","f4235d73":"ros = RandomOverSampler()\nX_ros, y_ros = ros.fit_sample(X, y)","cd50b88c":"X_ros.shape, y_ros.shape","08def6f1":"X_train_ros, X_test_ros, y_train_ros, y_test_ros = train_test_split(X_ros, y_ros, test_size=0.33, random_state=42)","f59412d2":"X_train_ros.shape, y_train_ros.shape, X_test_ros.shape, y_test_ros.shape","768ef46c":"lgr.fit(X_train_ros, y_train_ros)\ny_pred_ros = lgr.predict(X_test_ros)","20eaad0a":"print('Classification report:')\nprint(classification_report(y_test_ros, y_pred_ros))\nprint('Confusion Metrix: ')\nprint(confusion_matrix(y_test_ros, y_pred_ros))\nprint('Accuracy Score')\nprint(accuracy_score(y_test_ros, y_pred_ros))","da28dadd":"y_score_ros = lgr.predict_proba(X_test_ros)[:,1]","874527eb":"FPR, TPR, threshold = roc_curve(y_test_ros, y_score_ros )\n\n#Plot ROC curve\nplt.title('ROC Curve of Oversampled (ROS)')\nplt.plot(FPR, TPR)\nplt.plot([0,1], ls ='--')\nplt.plot([0,0], [1,0], c='.7'), plt.plot([1,1], c='.7')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","854ff109":"ras_ros = roc_auc_score(y_test_ros, y_score_ros)\nprint(ras_ros)","7500e0d5":"from sklearn.ensemble import IsolationForest","470b17d8":"outlier_fraction = len(Fraud)\/float(len(Normal))\nn_outlier = len(Fraud)","dcc5f45b":"isof = IsolationForest(max_samples=len(X),\n                      contamination= outlier_fraction, \n                      random_state = 42)","ccceb3fd":"isof.fit(X)\ny_score_isof = isof.decision_function(X)\ny_pred_isof = isof.predict(X)\n\n# Reshape the prediction values to 0 for valid, 1 for fraud\ny_pred_isof[y_pred_isof == 1] = 0\ny_pred_isof[y_pred_isof == -1] = 1\n\nn_errors = (y_pred_isof != y).sum()","7cafd408":"print('Isolation Forest num of errors:' , n_errors)\nprint(\"Accuracy score of Isolation Forest is: \", accuracy_score(y, y_pred_isof))\nprint(classification_report(y, y_pred_isof))\nprint(confusion_matrix(y, y_pred_isof))","de5a7fed":"y_pred_isof_score = isof.score_samples(X)\n\nfpr, tpr, thresholds = roc_curve(y, y_pred_isof)\nplt.title('ROC Curve of Isolation Forest')\nplt.plot(fpr, tpr)\nplt.plot([0,1], ls ='--')\nplt.plot([0,0], [1,0], c='.7'), plt.plot([1,1], c='.7')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show();","d257b745":"ras_isof = roc_auc_score(y, y_pred_isof) \nprint(ras_isof)","8a0fe563":"from sklearn.neighbors import LocalOutlierFactor\n\nLOF = LocalOutlierFactor(n_neighbors = 20, \n                         algorithm = 'auto', \n                         leaf_size = 30,\n                        metric = 'minkowski',\n                        p = 2, metric_params = None, \n                        contamination = outlier_fraction)","48963ad2":"y_pred_lof = LOF.fit_predict(X)\ny_score_lof = LOF.negative_outlier_factor_\n\n# Reshape the prediction values to 0 for valid, 1 for fraud\ny_pred_lof[y_pred_lof == 1] = 0\ny_pred_lof[y_pred_lof == -1] = 1\n\nn_errors = (y_pred_lof != y).sum()\n\nprint(' Num of errors in LOF:' , n_errors)\nprint(\"Accuracy score of LOF is: \", accuracy_score(y, y_pred_lof))\nprint(classification_report(y, y_pred_lof))\nprint(confusion_matrix(y, y_pred_lof))","0ac1b368":"fpr, tpr, thresholds = roc_curve(y, y_pred_lof)\nplt.title('ROC Curve of LOF')\nplt.plot(fpr, tpr)\nplt.plot([0,1], ls ='--')\nplt.plot([0,0], [1,0], c='.7'), plt.plot([1,1], c='.7')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()\n","796cd09e":"ras_lof = roc_auc_score(y, y_pred_lof)\nprint(ras_lof)","4de5dd05":"print('ROC-AUC-SCORE of all the algorithms: ')\nprint('--' * 20)\nprint('Logistic Regression on Complete Data: ', ras_lgr)\nprint('Logistic Regression on Under-Sampled Data: ', ras_us)\nprint('Logistic Regression on Over-sampled (SMOTETomek): ', ras_smk)\nprint('Logistic Regression on Over-sampled (Randomoversampler) ', ras_ros)\nprint('Isolation Forest: ', ras_isof)\nprint('Local Outlier Factor (LOF): ', ras_lof)","ec2b6ce4":"### 3. ML Algorithms\n* Logistic Regression\n    * Full dataset\n    * Under-Sampling\n    * Over-Sampling\n        *SMOTETomek\n        *RandomOverSampler\n* Isolation Forest\n* Local Outlier Factor(LOF)","f123b7c3":"Please comment and upvote, If you find it useful. ","12634614":"# Unsupervised Outlier Detection\n* Isolation Forest Algorithm\n* Local Outlier Factor(LOF)","78d348fc":"# Introduction of this Notebook\n\nAlthough Credit Card Fraud Detection is already being explored in a number of ways, But here, I would like to represent the compile form of different algorithms. ","195398b6":"### 2. Under-sampling","67b9bec8":"### 2. Exploratory Data Analysis ","eb2bf4a5":"### 3.  Over-Sampling\nTwo methods:\n* SMOTETomek\n* RandomOverSampler ","5be4a5c2":"### 1. Logistic Regression on Complete dataset","174540fb":"### 1. Import Libraires and looking into the data","f219cf82":"This data does not have any null value hance saved a lot of time in data pre-processing.","10d3a252":"### 4.  Isolation Forest Algorithm","9e294457":"### SMOTETomek","3dd9cb28":"# Content: \n1. Import Libraires and looking into the data\n2. Exploratory Data Analysis\n3. ML Algorithms\n    * Logistic Regression\n        * Full dataset\n        * Under-Sampling\n        * Over-Sampling\n            * SMOTETomek\n            * RandomOverSampler\n    * Isolation Forest\n    * Local Outlier Factor(LOF)","1f7698ee":"### RandomOverSampler","328ed818":"### 5.   Local Outlier Factor(LOF)","e19509da":"**Note:**  Confusion metrix and accuracy score are not correct method to check the accuracy of the model, it is recommended to use AUC curve. ","51c019a7":"**Observations**   \n* Logestic regression on over-sampling (SMOTETomek) produce better result as compared to other. "}}