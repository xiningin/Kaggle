{"cell_type":{"bfe01a76":"code","108228ed":"code","c8086dbf":"code","86c67e8d":"code","b7619522":"code","8e75ba76":"code","571a7a00":"code","a7479938":"code","c18e528d":"code","f3ef6521":"code","6bd85f7f":"code","f42ed74e":"code","24a86907":"code","cf996eca":"markdown","c7ea7968":"markdown","5e3a59be":"markdown","6192730d":"markdown","0b5036ef":"markdown","0233e3f7":"markdown","c248233e":"markdown","3773dece":"markdown","51ce37ac":"markdown","d035f7fa":"markdown","b9b4706c":"markdown","4a4ebdd5":"markdown","e9540c11":"markdown"},"source":{"bfe01a76":"import json\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","108228ed":"\nraw_data_path = '''..\/input\/champion_round_base_analysis.json'''\n\nwith open(raw_data_path) as f:\n    data = json.load(f)\n\ndf = pd.DataFrame(data).sort_index(axis=1).sort_index()\n\ndf.head()","c8086dbf":"# Number of comps that include a given unit, by round\ndf_count = df.applymap(lambda x: x['count'] if isinstance(x, dict) else 0)\n\ndf_count.head()","86c67e8d":"# Average placement of players that used a given unit, by round\ndf_avg_place = df.applymap(lambda x: x['avg_place'] if isinstance(x, dict) else np.nan)\n\ndf_avg_place.head()","b7619522":"df_avg_place_noRound = df_avg_place['total'].drop('total').sort_values(ascending=False)\nax = df_avg_place_noRound.plot.barh(figsize=(5,20), fontsize=15)\nax.figure.tight_layout()\nax.set_title('Champion Average Placement', fontdict={'fontsize': 20 } )\nax","8e75ba76":"# Transforms a round (33) into a stage (4-5)\ndef round_to_stage(round):\n    return f'{int((round + 9) \/ 7)}-{((round + 2) % 7 + 1)}'","571a7a00":"df_count_LucianAndThresh = df_count.loc[['Lucian', 'Thresh']].drop('total',axis=1).T\ndf_count_LucianAndThresh.index = pd.Series(df_count_LucianAndThresh.index).apply(lambda x: round_to_stage(int(x)))\nax = df_count_LucianAndThresh.plot(figsize=(12,6))\nax.figure.tight_layout()\nax.set_title('Champion frequency', fontdict={'fontsize': 20 } )\nax.set_xlabel('Round the player finished the game', fontdict={'fontsize': 15 } )\nax.set_ylabel('Number of players using the champion', fontdict={'fontsize': 15 } )\nax","a7479938":"#Champion placement relative to the average, by round\ndf_avg_place_relative = df_avg_place.copy()\n\nchampions = [x for x in df_avg_place_relative.index if not x == 'total']\n\nfor champion in champions:\n    df_avg_place_relative.loc[champion] = df_avg_place_relative.loc['total'] - df_avg_place_relative.loc[champion]\n    \ndf_avg_place_relative.head()","c18e528d":"df_avg_place_relative_LucianAndThresh = df_avg_place_relative.loc[['Lucian', 'Thresh']]\ndf_avg_place_relative_LucianAndThresh = df_avg_place_relative_LucianAndThresh[[str(x) for x in range(23,45) if str(x) in df_avg_place_relative_LucianAndThresh.columns]].T\ndf_avg_place_relative_LucianAndThresh.index = pd.Series(df_avg_place_relative_LucianAndThresh.index).apply(lambda x: round_to_stage(int(x)))\ndf_avg_place_relative_LucianAndThresh['Round average'] = df_avg_place_relative_LucianAndThresh['Lucian'].apply(lambda x: 0)\ndf_avg_place_relative_LucianAndThresh\nax = df_avg_place_relative_LucianAndThresh.plot(figsize=(12,6))\nax.figure.tight_layout()\nax.set_title('Champion placement (relative to round average)', fontdict={'fontsize': 20 } )\nax.set_ylabel('Relative placement ((champion - total) \/ total)', fontdict={'fontsize': 15 } )\nax.set_xlabel('Round', fontdict={'fontsize': 15 } )\nax","f3ef6521":"#Champion placement relative to the average and weighted by their frequency, by round\ndf_avg_place_weighted_relative = df_avg_place_relative.copy()\n\nchampions = [x for x in df_avg_place_relative.index if not x == 'total']\n\nfor champion in champions:\n    df_avg_place_weighted_relative.loc[champion] = df_avg_place_weighted_relative.loc[champion] * df_count.loc[champion]\n    df_avg_place_weighted_relative.loc[champion] = df_avg_place_weighted_relative.loc[champion] \/ df_count['total'][champion]\n\ndf_avg_place_weighted_relative.head()","6bd85f7f":"df_total_players = df_count.loc['total'].drop('total')\ndf_total_players.index = pd.Series(df_total_players.index).apply(lambda x: round_to_stage(int(x)))\n\nax = df_total_players.plot(figsize=(12,6))\nax.set_title('Players recorded in our dataset', fontdict={'fontsize': 20 } )\nax.set_ylabel('Number of players', fontdict={'fontsize': 15 } )\nax.set_xlabel('Round', fontdict={'fontsize': 15 } )\nax","f42ed74e":"df_avg_place_relative_LucianAndThresh = df_avg_place_weighted_relative.loc[['Lucian', 'Thresh']]\ndf_avg_place_relative_LucianAndThresh = df_avg_place_relative_LucianAndThresh[[str(x) for x in range(23,45) if str(x) in df_avg_place_relative_LucianAndThresh.columns]].T\ndf_avg_place_relative_LucianAndThresh.index = pd.Series(df_avg_place_relative_LucianAndThresh.index).apply(lambda x: round_to_stage(int(x)))\ndf_avg_place_relative_LucianAndThresh['Round average'] = df_avg_place_relative_LucianAndThresh['Lucian'].apply(lambda x: 0)\ndf_avg_place_relative_LucianAndThresh\nax = df_avg_place_relative_LucianAndThresh.plot(figsize=(12,6))\nax.figure.tight_layout()\nax.set_title('Champion placement (relative and weighted)', fontdict={'fontsize': 20 } )\nax.set_ylabel('Relative placement ((champion - total) \/ total)', fontdict={'fontsize': 15 } )\nax.set_xlabel('Round', fontdict={'fontsize': 15 } )\nax","24a86907":"df_avg_place_relative_LucianAndThresh = df_avg_place_weighted_relative.loc[['Lucian', 'Darius']]\ndf_avg_place_relative_LucianAndThresh = df_avg_place_relative_LucianAndThresh[[str(x) for x in range(23,45) if str(x) in df_avg_place_relative_LucianAndThresh.columns]].T\ndf_avg_place_relative_LucianAndThresh.index = pd.Series(df_avg_place_relative_LucianAndThresh.index).apply(lambda x: round_to_stage(int(x)))\ndf_avg_place_relative_LucianAndThresh['Round average'] = df_avg_place_relative_LucianAndThresh['Lucian'].apply(lambda x: 0)\ndf_avg_place_relative_LucianAndThresh\nax = df_avg_place_relative_LucianAndThresh.plot(figsize=(12,6))\nax.figure.tight_layout()\nax.set_title('Champion placement (relative and weighted)', fontdict={'fontsize': 20 } )\nax.set_ylabel('Relative placement ((champion - total) \/ total)', fontdict={'fontsize': 15 } )\nax.set_xlabel('Round', fontdict={'fontsize': 15 } )\nax","cf996eca":"### This is the distribution of players records through rounds. Let's remember that a player is 'recorded' when they die or win the game, so what the curve is telling us is the distribution of player deaths through the rounds. For example, I would conclude based on the curve that the most common round players die in is 6-1.","c7ea7968":"### If you consider the current TFT meta, maybe you'll interpret Lucian's curve the same way as I did: He's a great early-game carry (we can see he starts performing above average) but, in late-game, players like to sell him and put his items on Jinx (or another carry) because she performs better. The players who can't find a two-star Jinx might keep the Lucian and finish 3rd or 2nd but not 1st, which reflects on a worse relative placement at the end.\n\n### The problem is I still think Thresh's performance is being overestimated. He's good, but not that good. Similarly, Lucian might not the best late-game unit but I think he's better than his curve is telling us he is *(again, I'm not saying this because he's my favorite, I swear)*.\n\n### The reason for that is quite simple: we haven't used the frequency information in our metric yet. We need to remember that very few people use Lucian late game so our sample size is very small at the end of the curve. I believe the champion relative placement should be weighted by their frequency on each round. Let's do that by creating a second metric:\n\n### Weighted Relative placement(Champion, Round) = (Relative Placement(Champion, Round) * Count(Champion, Round)) \/ Count(Champion, Total)\n","5e3a59be":"### Here's the same Lucian and Thresh comparison with the new metric:","6192730d":"### There have been many attempts to create \"Best Champions\" lists for Teamfight Tactics based on statistics, but I believe most of the ones out there lack a solid mathematical foundation. Here I attempt to start a discussion about the problem with those existing statistics and try to find solutions and possible new approaches.","0b5036ef":"### We can see that there's a clear difference between those two distributions, and it comes from the fact that Lucian is a 2-cost champion and can be found in early rounds, whereas getting a 5-cost Thresh only becomes feasible later on. You'd think this must be being considered when creating champion tier lists\/rankings, but that's rarely the case.\n\n### I could go on and on about this topic but I'll summarize my problem with current champion ranking approaches in two main points:\n\n### 1) TFT, or more precisely the Auto Chess genre, is still a baby and people haven't figured out how to create stats for it yet, so they just replicate what they do with other game modes. However, while using placement is intuitive for ranking players, it doesn't work so well when ranking champions. The reason being a champion doesn't have a placement, the player does.\n\n### 2) TFT is turn-based and the data should be treated as a time series. I believe the biggest issues arise from the fact that ranking-creators assume every piece of data lives inside the same point in time, which is not true. \n\n\n### I'll attempt to create a new type of ranking metric for champions that addresses those issues. The main difference is that I'll treat rounds as independent points in time. That means each column will be analyzed on its own.","0233e3f7":"### I created this dataframe by aggregating raw data from [Riot's API](https:\/\/developer.riotgames.com\/), which provides historical data on [Teamfight Tactics](https:\/\/teamfighttactics.leagueoflegends.com\/) matches. There's a lot of specifics, but basically this is how you should interpret it:\n\n### \u2022 df_count: The value '68308' at row 'total' and column '40' means that there were 68,308 players that finished the game on round 40 (either winning or losing). The value '23925' at row 'Gnar' and column '40' means that (out of those 68,308), 23,925 players had Gnar as one of their units. (Note: during aggregation, I filtered out compositions with duplicate units, which means that, more precisely, the player had exactly one Gnar)\n\n### \u2022 df_avg_place: The value '1.842288' at row 'total' and column '40' means that players that finished the game on round 40 placed on average at 1.84 (between 1st and 2nd place). The value '2.046715'  at row 'KogMaw' and column '40' means that players that finished the game on round 40 *and also* had KogMaw as one of their units placed on average at 2.05 (close to 2nd place).","c248233e":"### I've posted [a long rant on reddit](https:\/\/www.reddit.com\/r\/CompetitiveTFT\/comments\/g68b6w\/lets_talk_statistics_the_problem_with_databased\/) explaining the problems with this approach, but to put it succinctly I believe those results are highly biased.\n\n### It's no coicidence that all 5-cost champions rank so highly. Of course that is expected since they're designed to be more powerful, but you'll probably find it very hard to rationalize why Thresh is the best champion. From playing the game we know he isn't even a main carry and yet he places at the top of most tier lists. Furthermore, for another example, Lucian appears near the bottom, which is kinda crazy to me (*not only because he is my favorite champion, but c'mon, he's miles below effing Malphite whose only ability is to gain more HP*).\n\n### The reason for that discrepancy becomes clear once we analyze the detailed count information, by round:\n\n\n\n","3773dece":"### The following chart shows how current statistics are being made, using only the 'total' column. In fact, most (if not all) websites that offer stats-based rankings don't even use the 'last_round' field at all.","51ce37ac":"The 'total' column doesn't account for rounds and the 'total' row doesn't account for champions","d035f7fa":"### The table tells us the total average placement by round, which can be treated as the expected placement of a player if he finishes the game on that round.  That is, we expect players that finish the game on round 40 to place at 1.84 on average.Then for each row we have the same statistic conditioned for the presence of a given unit in the comp *(here I'm using the term statistic [as used in Statistics](https:\/\/en.wikipedia.org\/wiki\/Statistic), which for me as a mathematician is as confusing as saying matplotlib.axes.Axes.axis... why couldn't they name it something else? well, anyhow, I digress...)*.\n\n### We can then compare, for instance, if comps that include Lucian are performing better or worse than expected for that round. For instance, we can define the following metric, which is probably the most intuitive:\n\n### Relative placement(Champion, Round) = Average Placement(Total, Round) - Average Placement(Champion, Round)\n\n### Note: we just have to be careful here because the lower the average place the better, which can be counterintuitive. So the way I wrote the metric makes it so that the higher the relative placement the better.","b9b4706c":"### Without opening the data into more detailed features, we can only guess the reasons why his curve is like that, but at least one thing became clear to me: *it's dangerous to summarize champions' performance into a single average value*. \n\n### My interpretation of those curves is that Lucian is good in early-game but his performance falls off late-game, whereas Darius is the exact opposite. But when we just use the average, we're not able to see that and end up putting them both into the same box.\n\n### So, in conclusion, I think that for now it's best to use the entire time series as a metric for measuring champion performance, ie,  use their weighted relative placement througout all rounds. In my opinion, the average placement by itself is not enough to create a trustworthy Tier List, and we would have to use more detailed features to do so (like including items, tier, traits, champion pairings etc).","4a4ebdd5":"# TFsTactics: Applying Statistics to Teamfight Tactics ","e9540c11":"### Now there's a curve I can get on board with! But the big question remains, can we create a single Tier List to rank the champions based on this data? You might be tempted to just average it out and 'voil\u00e0!', but before you go and do that, I'm gonna tell you a story.\n\n### You already know that Lucian is my favorite champion, but my close-second favorite is Darius. I was horrified by his position on current rankings, where he's usually appearing as the the worst *(Again, it's not because he's a favorite, but he's placing even below Bard!!! there's no way in hell that's accurate... have you seen a well-itemized darius go off? he can wipe out entire comps  all by himself)*.\n\n### The thing is, I noticed he dropped to the bottom immediately after Set 3.5 was launched so I knew it had something to do with that. \"*Maybe he became depressed after the retirement of his good old buddy Kassadin*,\" I thought to myself. So I decided to investigate.\n\n### When we compare his timeline with Lucian's, we're able to see how they're completely different, even though they're both 2-cost units:"}}