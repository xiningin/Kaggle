{"cell_type":{"174638b9":"code","9b02da20":"code","fcbde697":"code","4491487e":"code","ea39e493":"code","468fd243":"code","74b00d44":"code","a555f3da":"code","37b52d63":"code","cda0fb78":"code","abd092ff":"code","1ec9fbb5":"code","2318e033":"code","89f07e13":"code","34025353":"code","94417d78":"code","9a187cd6":"code","3e1aa684":"code","d5006761":"code","aeeffd68":"code","0e6cb6a4":"code","3f5d5384":"code","fc516e4b":"markdown","fe5bce35":"markdown","b761ab38":"markdown","42d65eca":"markdown"},"source":{"174638b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b02da20":"df_netflix = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\nprint(df_netflix.shape)\ndf_netflix.head()","fcbde697":"plt.figure(figsize=(10,7))\nsns.set(style='darkgrid')\nax = sns.countplot(x='type', data = df_netflix)","4491487e":"df_netflix['country'].unique()","ea39e493":"#We can see that countries have been coupled. So, we will separate them and add the counts.\n\nimport itertools\nlist_country = [x.split(', ') for x in df_netflix.dropna(subset=['country'])['country'].tolist()]\nlist_country = list(itertools.chain(*list_country))\n\nfrom collections import Counter\ndf_netflix_country_count = pd.DataFrame(Counter(list_country).most_common()[:10],\n                                        columns= ['Country', 'Count'])","468fd243":"plt.figure(figsize=(12,10))\n#sns.set(style=\"darkgrid\")\nax = sns.barplot(y=\"Country\", x='Count', data=df_netflix_country_count)","74b00d44":"plt.figure(figsize=(12,10))\nax = sns.countplot(y='release_year', data=df_netflix, order=df_netflix['release_year'].value_counts().index[0:15])","a555f3da":"df_netflix.drop(columns= ['director', 'cast', 'country', 'date_added', 'release_year', 'rating', 'duration', 'type'],\n               inplace= True)\ndf_netflix.head()","37b52d63":"from nltk.tokenize import word_tokenize\n\ndf_netflix['title_list'] = df_netflix['title'].str.lower()\ndf_netflix['listed_in'] = df_netflix['listed_in'].str.lower()\ndf_netflix['description'] = df_netflix['description'].str.lower()\n\ndf_netflix['title_list'] = df_netflix['title_list'].apply(word_tokenize)\ndf_netflix['listed_in'] = df_netflix['listed_in'].apply(word_tokenize)\ndf_netflix['description'] = df_netflix['description'].apply(word_tokenize)","cda0fb78":"from nltk.corpus import stopwords\nfrom string import punctuation\n\nlist_stopwords = set(stopwords.words('english') + list(punctuation))\ndf_netflix['title_list'] = df_netflix['title_list'].apply(lambda x : [word for word in x if word not in list_stopwords])\ndf_netflix['listed_in'] = df_netflix['listed_in'].apply(lambda x : [word for word in x if word not in list_stopwords])\ndf_netflix['description'] = df_netflix['description'].apply(lambda x : [word for word in x if word not in list_stopwords])","abd092ff":"import string\n\ndf_netflix['description'] = df_netflix['description'].apply(lambda x : [word.translate(str.maketrans('', '', string.punctuation)) for word in x])\n\ndf_netflix['description'] = df_netflix['description'].apply(lambda x : [word for word in x if len(word) > 0])","1ec9fbb5":"df_netflix['title_list'] = df_netflix['title_list'].apply(lambda x : list(set(x)))\ndf_netflix['listed_in'] = df_netflix['listed_in'].apply(lambda x : list(set(x)))\ndf_netflix['description'] = df_netflix['description'].apply(lambda x : list(set(x)))","2318e033":"df_netflix['description']","89f07e13":"!wget -c \"https:\/\/s3.amazonaws.com\/dl4j-distribution\/GoogleNews-vectors-negative300.bin.gz\"\n!gunzip GoogleNews-vectors-negative300.bin.gz","34025353":"import gensim\n\nwv = gensim.models.KeyedVectors.load_word2vec_format(\"GoogleNews-vectors-negative300.bin\", binary=True)","94417d78":"matrix_netflix_vocab = []\nfor list_ in df_netflix.to_numpy():\n    list_[2] = [word for word in list_[2] if word in wv.vocab]\n    list_[3] = [word for word in list_[3] if word in wv.vocab]\n    list_[4] = [word for word in list_[4] if word in wv.vocab]\n    matrix_netflix_vocab.append(list_)\ndf_netflix_vocab = pd.DataFrame(matrix_netflix_vocab, columns= df_netflix.columns)","9a187cd6":"from tqdm import tqdm\n\ndef recommendation(title):\n    \n    matrix_netflix_title_vocab = []\n    for list_ in df_netflix[df_netflix['title'] == title].to_numpy():\n        list_[2] = [word for word in list_[2] if word in wv.vocab]\n        list_[3] = [word for word in list_[3] if word in wv.vocab]\n        list_[4] = [word for word in list_[4] if word in wv.vocab]\n        matrix_netflix_title_vocab.append(list_)\n        \n    matrix_similarity = []\n    pbar = tqdm(matrix_netflix_vocab)\n    for list1 in pbar:\n        for list2 in matrix_netflix_title_vocab:\n            score_catg = wv.n_similarity(list1[2], list2[2])\n            score_desc = wv.n_similarity(list1[3], list2[3])\n            try:\n                score_title = wv.n_similarity(list1[4], list2[4])\/2\n            except:\n                score_title = 0\n            if ((list1[1] != list2[1]) & (score_catg > 0.85)):\n                matrix_similarity.append([list1[1], list2[1], score_title, score_catg, score_desc])\n        pbar.update()\n    pbar.close()\n    df_netflix_similarity = pd.DataFrame(matrix_similarity,columns = ['recommendation','title','score_title', 'score_category', 'score_description'])\n    \n    df_netflix_similarity['final_score'] = df_netflix_similarity['score_title'] + df_netflix_similarity['score_category'] + df_netflix_similarity['score_description']\n    \n    return (df_netflix_similarity.sort_values(by=['final_score', 'score_category', 'score_description', 'score_title'], ascending=False).head(10))\n","3e1aa684":"recommendation('Avengers: Infinity War')","d5006761":"recommendation('Black Panther')","aeeffd68":"recommendation('Friends')\n","0e6cb6a4":"recommendation('Gilmore Girls')","3f5d5384":"recommendation('13 Reasons Why')","fc516e4b":"### Preprocessing of the data for RS\n\n#### Retaining only relavant columns","fe5bce35":"## Download pretrained word2vec model from Google","b761ab38":"### Find Similarities Among Shows using Title, Genres, Description","42d65eca":"### Removing Punctuations and Stopwords"}}