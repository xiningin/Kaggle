{"cell_type":{"059f3c2d":"code","8fc7fdb9":"code","1fe82fd8":"code","b675999a":"code","1c1c14ac":"code","a6eb0fd3":"code","890e67bd":"code","05ba87fb":"code","6fb06ab9":"code","4ae7f9b8":"code","ec3afa10":"code","b7f91aff":"code","500aa7ab":"code","5c89801c":"code","7a0a8dce":"code","7202fc14":"code","724e8b17":"code","ff8852c7":"code","903db0a1":"code","98f68286":"code","778b0d80":"code","6cdb8231":"code","bce9ccf2":"code","34c63185":"code","15890ef2":"code","9a521eaf":"code","59b276cc":"code","d8446d81":"code","ffd0d204":"code","d34176b3":"code","b1160ff6":"code","2a32a438":"code","59d91324":"code","d8f676ba":"code","9c07361c":"code","f99ff1a6":"code","3db4c18b":"code","aaac62e3":"markdown","06e8d6d2":"markdown","e9acd854":"markdown","809caec8":"markdown","caef815d":"markdown","7f6bf322":"markdown","0a9425e0":"markdown","93ac1555":"markdown"},"source":{"059f3c2d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8fc7fdb9":"import pandas as pd\nsample_submission = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/submission.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv\")\ntrain = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv\")","1fe82fd8":"len(train)\n","b675999a":"sample_submission.head()","1c1c14ac":"test.head()","a6eb0fd3":"train.tail()","890e67bd":"#rename therefor the data columns\ntrain.rename(columns={'Province_State':'Province'}, inplace=True)\ntrain.rename(columns={'Country_Region':'Country'}, inplace=True)\ntrain.rename(columns={'ConfirmedCases':'Confirmed'}, inplace=True)","05ba87fb":"train","6fb06ab9":"#and we do the same for test set\ntest.rename(columns={'Province_State':'Province'}, inplace=True)\ntest.rename(columns={'Country_Region':'Country'}, inplace=True)","4ae7f9b8":"from sklearn.preprocessing import LabelEncoder\n# creating initial dataframe\nbridge_types = ('Date', 'Province', 'Country', 'Confirmed',\n        'Id')\ncountries = pd.DataFrame(train, columns=['Country'])\n# creating instance of labelencoder\nlabelencoder = LabelEncoder()\n# Assigning numerical values and storing in another column\ntrain['Countries'] = labelencoder.fit_transform(train['Country'])\n\n# #do the same for test set\ntest['Countries'] = labelencoder.fit_transform(test['Country'])\n\n#check label encoding \ntrain['Countries'].head()\n","ec3afa10":"train['Date']= pd.to_datetime(train['Date']) \ntest['Date']= pd.to_datetime(test['Date']) ","b7f91aff":"train = train.set_index(['Date'])\ntest = test.set_index(['Date'])","500aa7ab":"def create_time_features(df):\n    \"\"\"\n    Creates time series features from datetime index\n    \"\"\"\n    df['date'] = df.index\n    df['hour'] = df['date'].dt.hour\n    df['dayofweek'] = df['date'].dt.dayofweek\n    df['quarter'] = df['date'].dt.quarter\n    df['month'] = df['date'].dt.month\n    df['year'] = df['date'].dt.year\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['dayofmonth'] = df['date'].dt.day\n    df['weekofyear'] = df['date'].dt.weekofyear\n    \n    X = df[['hour','dayofweek','quarter','month','year',\n           'dayofyear','dayofmonth','weekofyear']]\n    return X","5c89801c":"create_time_features(train).head()\ncreate_time_features(test).head()","7a0a8dce":"train.head()","7202fc14":"train.drop(\"date\", axis=1, inplace=True)\ntest.drop(\"date\", axis=1, inplace=True)","724e8b17":"# train.isnull().sum()","ff8852c7":"#drop useless columns for train and test set\ntrain.drop(['Country'], axis=1, inplace=True)\ntrain.drop(['Province'], axis=1, inplace=True)","903db0a1":"test.drop(['Country'], axis=1, inplace=True)\ntest.drop(['Province'], axis=1, inplace=True)","98f68286":"# from sklearn.tree import DecisionTreeRegressor  \n# reg = DecisionTreeRegressor(random_state = 0) ","778b0d80":"# import xgboost as xgb\n# from xgboost import plot_importance, plot_tree\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\n# reg= xgb.XGBRegressor(n_estimators=1000)","6cdb8231":"from sklearn.linear_model import LogisticRegression\nregressor = LogisticRegression(max_iter=5000,C=0.05)","bce9ccf2":"train.head()","34c63185":"test","15890ef2":"# features that will be used in the model\nx = train[['Countries','dayofweek','month','dayofyear','weekofyear']]\ny1 = train[['Confirmed']]\ny2 = train[['Fatalities']]\nx_test = test[['Countries','dayofweek','month','dayofyear','weekofyear']]","9a521eaf":"x.head()","59b276cc":"import numpy\ny1=numpy.ravel(y1)","d8446d81":"#use model on data \nregressor.fit(x,y1)\npredict_1 = regressor.predict(x_test)\npredict_1 = pd.DataFrame(predict_1)\npredict_1.columns = [\"Confirmed_predict\"]","ffd0d204":"predict_1.head()","d34176b3":"y2=numpy.ravel(y2)","b1160ff6":"#use model on data \nregressor.fit(x,y2)\npredict_2 = regressor.predict(x_test)\npredict_2 = pd.DataFrame(predict_2)\npredict_2.columns = [\"Death_prediction\"]\npredict_2.head()","2a32a438":"# plot = plot_importance(regressor, height=0.9, max_num_features=20)","59d91324":"Samle_submission = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/submission.csv\")\nSamle_submission.columns\nsubmission = Samle_submission[[\"ForecastId\"]]","d8f676ba":"Final_submission = pd.concat([predict_1,predict_2,submission],axis=1)\nFinal_submission.head()","9c07361c":"Final_submission.columns = ['ConfirmedCases', 'Fatalities', 'ForecastId']\nFinal_submission = Final_submission[['ForecastId','ConfirmedCases', 'Fatalities']]\n\nFinal_submission[\"ConfirmedCases\"] = Final_submission[\"ConfirmedCases\"].astype(int)\nFinal_submission[\"Fatalities\"] = Final_submission[\"Fatalities\"].astype(int)","f99ff1a6":"Final_submission.head()","3db4c18b":"Final_submission.to_csv(\"submission.csv\",index=False)\nprint('Model ready for submission!')","aaac62e3":"# Submission","06e8d6d2":"# Model ","e9acd854":"# Check data","809caec8":"# Importing data","caef815d":"# Data cleaning","7f6bf322":"## Label encoding","0a9425e0":"## Dropping useless features","93ac1555":"## Handling dates"}}