{"cell_type":{"68e6f1c8":"code","1d722d4f":"code","7b7e29ca":"code","e3761981":"code","eaed6d03":"code","39fbb26a":"code","370e1227":"code","d1a4f979":"code","dcc30d5d":"code","aa4081e4":"code","6fbfe02f":"code","bb17776c":"code","fd1f377c":"code","47f0645a":"code","916a4008":"code","9617bd04":"code","9d62899f":"code","b345f3a1":"code","78f2052e":"code","e1206a90":"code","d34e5bfb":"code","4bf2c32b":"markdown"},"source":{"68e6f1c8":"# importnig libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline","1d722d4f":"# importing ML libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport keras","7b7e29ca":"# Load the data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","e3761981":"# seperating X and Y from Training Data\nY_train = train[\"label\"]\n\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) \n","eaed6d03":"# Check X_train\nX_train","39fbb26a":"# Check Y_train\nY_train[:5]","370e1227":"# Normalize the data\nX_train = X_train \/ 255.0\ntest = test \/ 255.0","d1a4f979":"# Reshape image in 3 dimensions (height = 28px, width = 28px , chanel = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","dcc30d5d":"# Encode labels to one hot vectors \nfrom keras.utils.np_utils import to_categorical\nY_train = to_categorical(Y_train, num_classes = 10)","aa4081e4":"# check encoded vector \nY_train[:5]","6fbfe02f":"# Split the train and the validation set for the fitting\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1)","bb17776c":"# Some examples\ng = plt.imshow(X_train[0][:,:,0])","fd1f377c":"from keras.models import Sequential\nfrom keras.layers import Dense,Conv2D,MaxPool2D,Dropout,Flatten\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","47f0645a":"# Compile the model\nmodel.compile(optimizer = 'adam' , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","916a4008":"# Set a learning rate annealer\nfrom keras.callbacks import ReduceLROnPlateau\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","9617bd04":"# Set epochs and batch size\nepochs = 40 \nbatch_size = 80","9d62899f":"#Data augmentation\nfrom keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)\n\n","b345f3a1":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","78f2052e":"# predict results\nresults = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","e1206a90":"# submitting final csv file\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)","d34e5bfb":"submission[:5]","4bf2c32b":"#  Digit Recognizer using CNN in Keras"}}