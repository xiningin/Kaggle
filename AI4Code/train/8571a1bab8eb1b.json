{"cell_type":{"95c84ea8":"code","3437af0a":"code","0f3b9226":"code","0fc35c0f":"code","32020e8f":"code","8d71ca78":"code","f6751888":"code","4a674703":"code","cc623344":"code","d17ebc87":"code","a34553a5":"code","2ae5b0ab":"code","3769a677":"code","e2a9b97d":"code","9701a6e9":"code","1c81fd91":"code","efbaa27d":"code","2dbfae25":"code","7cea10c8":"code","554d4ace":"code","c17aa341":"code","9dc1e897":"code","dbdbc2fc":"code","62b4fd36":"code","1c46e883":"code","1750eeb8":"markdown","b002d5e0":"markdown","7267985b":"markdown","7500bbc3":"markdown","c167fc6c":"markdown","2eb11ad7":"markdown","a3e0529e":"markdown","538b4886":"markdown","8e293423":"markdown","d4518b7a":"markdown","fca93554":"markdown","6138a6ba":"markdown","cd99b7be":"markdown","1a49d2ef":"markdown","fe2f4006":"markdown","925443ed":"markdown"},"source":{"95c84ea8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nplt.style.use('seaborn')","3437af0a":"df=pd.read_csv('\/kaggle\/input\/vehicle-dataset-from-cardekho\/car data.csv')","0f3b9226":"df.head()","0fc35c0f":"df.describe()","32020e8f":"df.columns","8d71ca78":"# Visualising Missing Values\nplt.figure(figsize=[5,5])\nsns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","f6751888":"# creating a new column named 'Age' to know how old the car is\ndf['Age']=2020-df['Year']","4a674703":"df.drop('Year',axis=1,inplace=True)","cc623344":"categ_cols=['Fuel_Type', 'Seller_Type', 'Transmission', 'Owner']\ni=0\nwhile i < 4:\n    fig = plt.figure(figsize=[10,4])\n    plt.subplot(1,2,1)\n    sns.countplot(x=categ_cols[i], data=df)\n    i += 1\n    plt.subplot(1,2,2)\n    sns.countplot(x=categ_cols[i], data=df)\n    i += 1\n    \n    plt.show()","d17ebc87":"num_cols=['Selling_Price', 'Present_Price', 'Kms_Driven','Age']\ni=0 \nwhile(i<4):\n    plt.figure(figsize=[13,3])\n    plt.subplot(1,2,1)\n    plt.boxplot(x=num_cols[i],data=df)\n    i+=1\n    plt.subplot(1,2,2)\n    plt.boxplot(x=num_cols[i],data=df)\n    i+=1\n    plt.show()","a34553a5":"sns.heatmap(df.corr(),annot=True)","2ae5b0ab":"# dropping CarName as it has no effect in our model to predict the price\ndf.drop('Car_Name',axis=1,inplace=True)","3769a677":"# creating dummy variables and dropping first to avoid dummy variable trap\ndf=pd.get_dummies(data=df,drop_first=True)","e2a9b97d":"from sklearn.model_selection import train_test_split\ny=df['Selling_Price']\nx=df.drop('Selling_Price',axis=1)","9701a6e9":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)\nprint(\"x train: \",x_train.shape)\nprint(\"x test: \",x_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)","1c81fd91":"from sklearn.metrics import r2_score\nfrom sklearn.model_selection import cross_val_score\nimport pickle","efbaa27d":"cv=[]\nr2=[]\ndef regg_model(model,model_name):\n    model.fit(x_train,y_train)\n    \n    # r2-score\n    y_pred=model.predict(x_test)\n    r2.append(r2_score(y_test,y_pred))\n    \n    # cross-val-score\n    cross_val=cross_val_score(model,x_train,y_train,cv=5)\n    cross_val_mean=cross_val.mean()\n    print('R2-Score: ',r2)\n    print('Cross-Val-Mean-Score: ',cross_val_mean)\n    \n    # dumping model in a pickle file\n    model_path='.\/car-models'+ model_name\n    file=open(model_path,'wb')\n    pickle.dump(model,file)","2dbfae25":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nregg_model(lr,'LinearRegeression.pkl')","7cea10c8":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\n\nrf=RandomForestRegressor()\n\n# number of trees\nn_estimators=list(range(500,1000,100))\n# Maximum depth of tree\nmax_depth=list(range(4,9,4))\n# Minimum samples to split internal node\nmin_samples_split=list(range(4,9,2))\n# Minimum samples to be a leaf node\nmin_samples_leaf=[1,2,5,7]\n# features considered at each split\nmax_features=['auto','sqrt']\n\n# Hyperparameters\nparams={'n_estimators':n_estimators,\n       'max_depth':max_depth,\n       'min_samples':min_samples_split,\n       'min_samples_leaf':min_samples_leaf,\n       'max_features':max_features}\n\nrf_rs=RandomizedSearchCV(estimator=rf,param_distributions=params)","554d4ace":"regg_model(rf,'Random_Forest.pkl')","c17aa341":"from sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\n\ngb = GradientBoostingRegressor()\n\n# Rate at which correcting is being made\nlearning_rate = [0.001, 0.01, 0.1, 0.2]\n# Number of trees in Gradient boosting\nn_estimators=list(range(500,1000,100))\n# Maximum number of levels in a tree\nmax_depth=list(range(4,9,4))\n# Minimum number of samples required to split an internal node\nmin_samples_split=list(range(4,9,2))\n# Minimum number of samples required to be at a leaf node.\nmin_samples_leaf=[1,2,5,7]\n# Number of fearures to be considered at each split\nmax_features=['auto','sqrt']\n\n# Hyperparameters dict\nparams = {\"learning_rate\":learning_rate,\n              \"n_estimators\":n_estimators,\n              \"max_depth\":max_depth,\n              \"min_samples_split\":min_samples_split,\n              \"min_samples_leaf\":min_samples_leaf,\n              \"max_features\":max_features}\n\ngb_rs = RandomizedSearchCV(estimator = gb, param_distributions = params)","9dc1e897":"regg_model(gb_rs,'gradient_boosting.pkl')","dbdbc2fc":"model=pickle.load(open('.\/car-modelsgradient_boosting.pkl','rb'))\ntype(model)","62b4fd36":"model.predict(x_test.head())","1c46e883":"open('.\/car-modelsgradient_boosting.pkl','rb').close()","1750eeb8":"### 3. Gradient Boosting","b002d5e0":"#### Categorical Features Visualisation","7267985b":"## **4. Model Building**","7500bbc3":"### Performing Train-Test Split","c167fc6c":"## **3. Data Preparation**","2eb11ad7":"## **1. Understanding the Dataset**","a3e0529e":"### **One-Hot Encoding for categorical features**","538b4886":"### 2. Random Forest","8e293423":"So we have no missing values in any column","d4518b7a":"### **Bivariate Analysis**","fca93554":"**Checking Pickle file**","6138a6ba":"## **2. Exploratory Data Analysis**","cd99b7be":"* Selling Price of a car is more correlated with Present Price\n* Selling Price is also correlated with the Age of car","1a49d2ef":"#### Numerical features to visualise outliers","fe2f4006":"### 1. Linear Regression","925443ed":"### **Univariate Analysis**"}}