{"cell_type":{"f721f691":"code","6b6a1e14":"code","1e444ecc":"code","6975e81c":"code","54ddbcb5":"code","02ed9e93":"code","bf3a36aa":"code","5ff6e6ad":"code","f340a281":"code","7899998a":"code","a29b0259":"code","27912042":"code","a30fac3a":"code","7b405c18":"code","00007225":"code","4dfdd509":"code","05260afa":"code","9a52cf00":"code","d2648389":"code","eff2a994":"code","c1aa9251":"code","99f34e2a":"code","9f490a1d":"code","b78cac8a":"code","14c71cf2":"code","dd7a09f7":"code","75148419":"code","85e5d545":"code","7ffdefae":"code","ef980ea1":"code","350ee5b4":"code","9d7f4c3d":"code","caeb0d2b":"code","b8e187b1":"code","27cb7336":"code","1c5af78d":"code","cd2e5479":"code","8d720619":"code","6d23e4fa":"code","cfa56e5d":"code","fdf68b58":"code","6a8831b9":"code","06136a38":"code","0d36b701":"code","6d782919":"code","ebb4f15e":"code","d75d4e08":"code","f83eb8fa":"markdown","eefa08d5":"markdown","520d8f62":"markdown","aa384e8b":"markdown","13d643eb":"markdown","61c1103f":"markdown","8d9716fa":"markdown","e89c92cb":"markdown","ca75f168":"markdown","f5304db0":"markdown","32233bfc":"markdown","b6cc87c8":"markdown","ceff7276":"markdown","f4f042a9":"markdown","5c63a8b6":"markdown","92c05395":"markdown","8ae39991":"markdown","f173ff05":"markdown","7ff4d7da":"markdown","04d22060":"markdown","555977ca":"markdown","96fc364a":"markdown","43eab869":"markdown","b327e663":"markdown","226e80c0":"markdown","f2df6a94":"markdown","0febc00f":"markdown","8ecf6c41":"markdown","132b12ac":"markdown"},"source":{"f721f691":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6b6a1e14":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfrom plotly.offline import plot\nimport plotly.express as px","1e444ecc":"from plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)","6975e81c":"from collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore')","54ddbcb5":"df = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')","02ed9e93":"df.head()","bf3a36aa":"dataviz = df.copy()","5ff6e6ad":"dataviz.isnull().sum(axis=0)","f340a281":"dataviz['bmi'].fillna(dataviz['bmi'].mode()[0],inplace=True)","7899998a":"counts0 = Counter(dataviz[dataviz['stroke']==0]['work_type'])\ncounts1 = Counter(dataviz[dataviz['stroke']==1]['work_type'])\nfig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(go.Pie(\n     values=[item[1] for item in sorted(counts0.items())],\n     labels=[item[0] for item in sorted(counts0.items())],\n     domain=dict(x=[0, 0.5]),\n     name=\"Stroke Negative\",title='Stroke Negative'), \n     row=1, col=1)\n\nfig.add_trace(go.Pie(\n     values=[item[1] for item in sorted(counts1.items())],\n     labels=[item[0] for item in sorted(counts1.items())],\n     domain=dict(x=[0.5, 1.0]),\n     name=\"Stroke Positive\",title='Stroke Positive'),\n    row=1, col=2)\n\nfig.update_layout(\n    title={'text':'Stroke vs Worktype','xanchor':'left','yanchor': 'top','y':0.9,'x':0.35},\n    xaxis_title=\"X Axis Title\",\n    yaxis_title=\"Y Axis Title\",\n    legend_title=\"Worktype\",\n    font=dict(size=18)\n)\n\nfig.show()","a29b0259":"counts0 = Counter(dataviz[dataviz['stroke']==0]['ever_married'])\ncounts1 = Counter(dataviz[dataviz['stroke']==1]['ever_married'])\nfig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(go.Pie(\n     values=[item[1] for item in sorted(counts0.items())],\n     labels=[item[0] for item in sorted(counts0.items())],\n     domain=dict(x=[0, 0.5]),\n     name=\"Stroke Negative\",title='Stroke Negative'), \n     row=1, col=1)\n\nfig.add_trace(go.Pie(\n     values=[item[1] for item in sorted(counts1.items())],\n     labels=[item[0] for item in sorted(counts1.items())],\n     domain=dict(x=[0.5, 1.0]),\n     name=\"Stroke Positive\",title='Stroke Positive'),\n    row=1, col=2)\n\nfig.update_layout(\n    title={'text':'Stroke vs Marital Status','xanchor':'left','yanchor': 'top','y':0.9,'x':0.35},\n    xaxis_title=\"X Axis Title\",\n    yaxis_title=\"Y Axis Title\",\n    legend_title=\"Ever Married?\",\n    font=dict(size=18)\n)\n\nfig.show()","27912042":"counts0 = Counter(dataviz[dataviz['Residence_type']=='Rural']['stroke'])\ncounts1 = Counter(dataviz[dataviz['Residence_type']=='Urban']['stroke'])\nfig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(go.Pie(\n     values=[v for k,v in counts0.items()],\n     labels=['Stroke Positive','Stroke Negative'],\n     domain=dict(x=[0, 0.5]),\n     name=\"Stroke Negative\",title='Rural'), \n     row=1, col=1)\n\nfig.add_trace(go.Pie(\n     values=[v for k,v in counts1.items()],\n     labels=['Stroke Positive','Stroke Negative'],\n     domain=dict(x=[0.5, 1.0]),\n     name=\"Stroke Positive\",title='Urban'),\n    row=1, col=2)\n\nfig.update_layout(\n    title={'text':'Residence Type vs Stroke','xanchor':'left','yanchor': 'top','y':0.9,'x':0.35},\n    xaxis_title=\"X Axis Title\",\n    yaxis_title=\"Y Axis Title\",\n    legend_title=\"Stroke Status\",\n    font=dict(size=18)\n)\n\nfig.show()\n#<p style=\"font-size: 15pt;\">90% of the stroke positive individuals have been married compared to only 35% for stroke negative individuals.<\/p>","a30fac3a":"glucose_bins = np.linspace(0,280,29)\nbmi_bins = np.linspace(0,100,51)\nage_bins = np.linspace(0,90,10)\ndataviz['binned_glucose'] = pd.cut(dataviz['avg_glucose_level'], glucose_bins, labels=glucose_bins[:-1],right=False)\ndataviz['binned_bmi'] = pd.cut(dataviz['bmi'], bmi_bins, labels=bmi_bins[:-1],right=False)\ndataviz['binned_age'] = pd.cut(dataviz['age'], age_bins, labels=age_bins[:-1],right=False)\ndataviz['binned_glucose'] = dataviz['binned_glucose'].astype('int')\ndataviz['binned_bmi'] = dataviz['binned_bmi'].astype('int')\ndataviz['binned_age'] = dataviz['binned_age'].astype('int')","7b405c18":"sns.set(rc={'figure.figsize':(9,5)})\nax = sns.countplot(x='binned_age',hue='stroke',data=dataviz)\nax.set_title('Stroke\/Non stroke cases at various age groups').set_fontsize(22)\nax.set_xlabel('Age',fontsize=14)\nax.set_ylabel('Count',fontsize=14)","00007225":"sns.set(rc={'figure.figsize':(9,5)})\nax = sns.countplot(x='binned_glucose',hue='stroke',data=dataviz)\nax.set_title('Stroke\/Non stroke cases at various glucose Levels').set_fontsize(22)\nax.set_xlabel('Glucose level',fontsize=14)\nax.set_ylabel('Count',fontsize=14)","4dfdd509":"stroke_cases = Counter(dataviz['binned_glucose'][dataviz['stroke']==1])\ntotal_cases = Counter(dataviz['binned_glucose'])\nstroke_pct = 100*np.array([item[1] for item in sorted(stroke_cases.items())])\/np.array([item[1] for item in sorted(total_cases.items())])\nlabels = [item[0] for item in sorted(total_cases.items())]\nplt.style.use('seaborn')\nplt.figure(figsize=(9,5))\nplt.ylim(0,30)\nplt.title('Stroke risk vs Glucose level (All age groups)',fontsize=20)\nplt.ylabel('% of strokes',fontsize=15)\nplt.xlabel('Average glucose level',fontsize=15)\nplt.plot(labels[:-1],stroke_pct[:-1],'b')","05260afa":"fix, ax = plt.subplots(1,2,figsize=(18,5))\nplt.tight_layout()\nstroke_cases = Counter(dataviz['binned_glucose'][(dataviz['binned_age']<40) & (dataviz['stroke']==1)])\ntotal_cases = Counter(dataviz['binned_glucose'][dataviz['binned_age']<40])\nz=sorted(stroke_cases.items())\n[z.append((item[0],0)) for item in sorted(total_cases.items()) if item[0] not in [item2[0] for item2 in sorted(stroke_cases.items())]]\nstroke_pct = 100*np.array([item[1] for item in sorted(z)])\/np.array([item[1] for item in sorted(total_cases.items())])\nlabels = [item[0] for item in sorted(total_cases.items())]\nax[0].set_ylim(0,30)\nax[0].set_xlim(50,280)\nax[0].plot(labels[:-1],stroke_pct[:-1],'g')\nax[0].set_title('Stroke risk vs Glucose level (Age below 40)',fontsize=20)\nax[0].set_ylabel('% of strokes',fontsize=15)\nax[0].set_xlabel('Average glucose level',fontsize=15)\n\nstroke_cases = Counter(dataviz['binned_glucose'][(dataviz['binned_age']>=40) & (dataviz['stroke']==1)])\ntotal_cases = Counter(dataviz['binned_glucose'][dataviz['binned_age']>=40])\nz=sorted(stroke_cases.items())\n[z.append((item[0],0)) for item in sorted(total_cases.items()) if item[0] not in [item2[0] for item2 in sorted(stroke_cases.items())]]\nstroke_pct = 100*np.array([item[1] for item in sorted(z)])\/np.array([item[1] for item in sorted(total_cases.items())])\nlabels = [item[0] for item in sorted(total_cases.items())]\nax[1].set_ylim(0,30)\nax[1].set_xlim(50,280)\nax[1].plot(labels[:-1],stroke_pct[:-1],'r')\nax[1].set_title('Stroke risk vs Glucose level (Age above 40)',fontsize=20)\n#ax[1].set_ylabel('% of strokes',fontsize=15)\nax[1].set_xlabel('Average glucose level',fontsize=15)","9a52cf00":"counts0 = Counter(dataviz[dataviz['stroke']==0]['hypertension'])\ncounts1 = Counter(dataviz[dataviz['stroke']==1]['hypertension'])\nfig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(go.Pie(\n     values=[item[1] for item in sorted(counts0.items())],\n     labels=['No','Yes'],\n     domain=dict(x=[0, 0.5]),\n     name=\"Stroke Negative\",title='Stroke Negative'), \n     row=1, col=1)\n\nfig.add_trace(go.Pie(\n     values=[item[1] for item in sorted(counts1.items())],\n     labels=['No','Yes'],\n     domain=dict(x=[0.5, 1.0]),\n     name=\"Stroke Positive\",title='Stroke Positive'),\n    row=1, col=2)\n\nfig.update_layout(\n    title={'text':'Stroke vs Hypertension','xanchor':'left','yanchor': 'top','y':0.9,'x':0.35},\n    xaxis_title=\"X Axis Title\",\n    yaxis_title=\"Y Axis Title\",\n    legend_title=\"Hypertension\",\n    font=dict(size=18)\n)\n\nfig.show()","d2648389":"counts0 = Counter(dataviz[dataviz['stroke']==0]['heart_disease'])\ncounts1 = Counter(dataviz[dataviz['stroke']==1]['heart_disease'])\nfig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(go.Pie(\n     values=[item[1] for item in sorted(counts0.items())],\n     labels=['No','Yes'],\n     domain=dict(x=[0, 0.5]),\n     name=\"Stroke Negative\",title='Stroke Negative'), \n     row=1, col=1)\n\nfig.add_trace(go.Pie(\n     values=[item[1] for item in sorted(counts1.items())],\n     labels=['No','Yes'],\n     domain=dict(x=[0.5, 1.0]),\n     name=\"Stroke Positive\",title='Stroke Positive'),\n    row=1, col=2)\n\nfig.update_layout(\n    title={'text':'Stroke vs Heart Disease','xanchor':'left','yanchor': 'top','y':0.9,'x':0.35},\n    xaxis_title=\"X Axis Title\",\n    yaxis_title=\"Y Axis Title\",\n    legend_title=\"Heart Disease\",\n    font=dict(size=18)\n)\n\nfig.show()","eff2a994":"counts0 = Counter(dataviz[dataviz['stroke']==0]['smoking_status'])\ncounts1 = Counter(dataviz[dataviz['stroke']==1]['smoking_status'])\nfig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(go.Pie(\n     values=[item[1] for item in sorted(counts0.items())],\n     labels=[item[0] for item in sorted(counts0.items())],\n     domain=dict(x=[0, 0.5]),\n     name=\"Stroke Negative\",title='Stroke Negative'), \n     row=1, col=1)\n\nfig.add_trace(go.Pie(\n     values=[item[1] for item in sorted(counts1.items())],\n     labels=[item[0] for item in sorted(counts1.items())],\n     domain=dict(x=[0.5, 1.0]),\n     name=\"Stroke Positive\",title='Stroke Positive'),\n    row=1, col=2)\n\nfig.update_layout(\n    title={'text':'Stroke vs Smoking Status','xanchor':'left','yanchor': 'top','y':0.9,'x':0.35},\n    xaxis_title=\"X Axis Title\",\n    yaxis_title=\"Y Axis Title\",\n    legend_title=\"Smoking Status\",\n    font=dict(size=18)\n)\n\nfig.show()","c1aa9251":"counts0 = Counter(dataviz[dataviz['stroke']==0]['gender'])\ncounts1 = Counter(dataviz[dataviz['stroke']==1]['gender'])\nfig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(go.Pie(\n     values=[item[1] for item in sorted(counts0.items())],\n     labels=[item[0] for item in sorted(counts0.items())],\n     domain=dict(x=[0, 0.5]),\n     name=\"Stroke Negative\",title='Stroke Negative'), \n     row=1, col=1)\n\nfig.add_trace(go.Pie(\n     values=[item[1] for item in sorted(counts1.items())],\n     labels=[item[0] for item in sorted(counts1.items())],\n     domain=dict(x=[0.5, 1.0]),\n     name=\"Stroke Positive\",title='Stroke Positive'),\n    row=1, col=2)\n\nfig.update_layout(\n    title={'text':'Stroke vs Gender','xanchor':'left','yanchor': 'top','y':0.9,'x':0.35},\n    xaxis_title=\"X Axis Title\",\n    yaxis_title=\"Y Axis Title\",\n    legend_title=\"Gender\",\n    font=dict(size=18)\n)\n\nfig.show()","99f34e2a":"stroke_cases = Counter(dataviz['binned_bmi'][dataviz['stroke']==1])\ntotal_cases = Counter(dataviz['binned_bmi'])\nz=sorted(stroke_cases.items())\n[z.append((item[0],0)) for item in sorted(total_cases.items()) if item[0] not in [item2[0] for item2 in sorted(stroke_cases.items())]]\nstroke_pct = 100*np.array([item[1] for item in sorted(z)])\/np.array([item[1] for item in sorted(total_cases.items())])\nlabels = [item[0] for item in sorted(total_cases.items())]\nplt.style.use('ggplot')\nplt.figure(figsize=(9,5))\nplt.ylim(0,30)\nplt.title('Stroke risk vs BMI (All age groups)',fontsize=20)\nplt.ylabel('% of strokes',fontsize=15)\nplt.xlabel('BMI',fontsize=15)\nplt.plot(labels,stroke_pct,'b')","9f490a1d":"plt.figure(figsize=(18,9))\nax = sns.violinplot(x='binned_age',y='binned_glucose',hue='stroke',data=dataviz,scale='count',palette={0: \"b\", 1: \"orange\"},cut=0)\nax.set_xlabel('Age',fontsize=14)\nax.set_ylabel('Glucose level',fontsize=14)\nax.set_title('Age, Glucose vs Stroke',fontsize=20)","b78cac8a":"dataviz['smokes'] = np.nan\ndataviz['smokes'][dataviz['smoking_status']=='smokes'] = 1\ndataviz['smokes'][dataviz['smoking_status']!='smokes'] = 0\ndataviz['smokes'] = dataviz['smokes'].astype('int')","14c71cf2":"dataviz['high_bmi']=np.nan\ndataviz['high_bmi'][dataviz['bmi']>=25] = 1\ndataviz['high_bmi'][dataviz['bmi']<25] = 0\ndataviz['no_of_risk_factors'] = dataviz['hypertension']+dataviz['heart_disease']+dataviz['smokes']+dataviz['high_bmi']","dd7a09f7":"plt.figure(figsize=(18,9))\nax = sns.violinplot(x='binned_age',y='no_of_risk_factors',hue='stroke',data=dataviz[dataviz['binned_glucose']>150],scale='count',palette={0: \"b\", 1: \"orange\"},cut=0)\nax.set_title('Age, No. of risk factors vs Stroke (Glucose level>150)',fontsize=20)\nax.set_xlabel('Age',fontsize=14)\nax.set_ylabel('No. of risk factors',fontsize=14)","75148419":"#risk 0\nstroke_cases = Counter(dataviz['binned_age'][(dataviz['no_of_risk_factors']==0) & dataviz['stroke']==1])\ntotal_cases = Counter(dataviz['binned_age'][dataviz['no_of_risk_factors']==0])\nall_cases = total_cases\nz=sorted(stroke_cases.items())\n[z.append((item[0],0)) for item in sorted(total_cases.items()) if item[0] not in [item2[0] for item2 in sorted(stroke_cases.items())]]\nstroke_pct = 100*np.array([item[1] for item in sorted(z)])\/np.array([item[1] for item in sorted(total_cases.items())])\nlabels = [item[0] for item in sorted(total_cases.items())]\nplt.style.use('seaborn')\nplt.figure(figsize=(12,7))\nplt.title('Age vs Stroke at various risk levels',fontsize=20)\nplt.ylabel('% of strokes',fontsize=15)\nplt.xlabel('Age',fontsize=15)\nplt.plot(labels,stroke_pct,'b',label='0 risk factors')\n\n#risk 1\nstroke_cases = Counter(dataviz['binned_age'][(dataviz['no_of_risk_factors']==1) & dataviz['stroke']==1])\ntotal_cases = Counter(dataviz['binned_age'][dataviz['no_of_risk_factors']==1])\nz=sorted(stroke_cases.items())\n[z.append((item[0],0)) for item in sorted(total_cases.items()) if item[0] not in [item2[0] for item2 in sorted(stroke_cases.items())]]\nstroke_pct = 100*np.array([item[1] for item in sorted(z)])\/np.array([item[1] for item in sorted(total_cases.items())])\nplt.plot(labels,stroke_pct,'g',label='1 risk factor')\n\n#risk 2\nstroke_cases = Counter(dataviz['binned_age'][(dataviz['no_of_risk_factors']==2) & dataviz['stroke']==1])\ntotal_cases = Counter(dataviz['binned_age'][dataviz['no_of_risk_factors']==2])\nz=sorted(stroke_cases.items())\n[z.append((item[0],0)) for item in sorted(total_cases.items()) if item[0] not in [item2[0] for item2 in sorted(stroke_cases.items())]]\nstroke_pct = 100*np.array([item[1] for item in sorted(z)])\/np.array([item[1] for item in sorted(total_cases.items())])\nplt.plot(labels,stroke_pct,'r',label='2 risk factors')\n\n#risk 3\nstroke_cases = Counter(dataviz['binned_age'][(dataviz['no_of_risk_factors']==3) & dataviz['stroke']==1])\ntotal_cases = Counter(dataviz['binned_age'][dataviz['no_of_risk_factors']==3])\ny=sorted(total_cases.items())\n[y.append((item[0],np.inf)) for item in sorted(all_cases.items()) if item[0] not in [item2[0] for item2 in sorted(total_cases.items())]]\nz = sorted(stroke_cases.items())\n[z.append((item[0],0)) for item in sorted(y) if item[0] not in [item2[0] for item2 in sorted(stroke_cases.items())]]\nstroke_pct = 100*np.array([item[1] for item in sorted(z)])\/np.array([item[1] for item in sorted(y)])\nplt.plot(labels,stroke_pct,'orange',label='3 risk factors')\n\n#risk 4\nstroke_cases = Counter(dataviz['binned_age'][(dataviz['no_of_risk_factors']==4) & dataviz['stroke']==1])\ntotal_cases = Counter(dataviz['binned_age'][dataviz['no_of_risk_factors']==4])\ny=sorted(total_cases.items())\n[y.append((item[0],np.inf)) for item in sorted(all_cases.items()) if item[0] not in [item2[0] for item2 in sorted(total_cases.items())]]\nz = sorted(stroke_cases.items())\n[z.append((item[0],0)) for item in sorted(y) if item[0] not in [item2[0] for item2 in sorted(stroke_cases.items())]]\nstroke_pct = 100*np.array([item[1] for item in sorted(z)])\/np.array([item[1] for item in sorted(y)])\nplt.plot(labels,stroke_pct,'purple',label='4 risk factors')\nplt.legend()","85e5d545":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom imblearn.over_sampling import RandomOverSampler","7ffdefae":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC","ef980ea1":"fig = px.pie(df['stroke'], values=[item[1] for item in Counter(df['stroke']).items()], names=['Stroke Positive','Stroke Negative'], title='Strokes and Non stroke cases')\nfig.show()","350ee5b4":"X = df.drop(['id','stroke'],axis=1)\nY = df['stroke']","9d7f4c3d":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2,stratify=Y,random_state=42)","caeb0d2b":"bmi_mode = X_train['bmi'].mode()\nX_train['bmi'].fillna(bmi_mode[0],inplace=True)\nX_test['bmi'].fillna(bmi_mode[0],inplace=True)","b8e187b1":"def add_additional_cols(df):\n    df['smokes'] = np.nan\n    df['smokes'][df['smoking_status']=='smokes'] = 1\n    df['smokes'][df['smoking_status']!='smokes'] = 0\n    df['smokes'] = df['smokes'].astype('int')\n\n    df['high_bmi']=np.nan\n    df['high_bmi'][df['bmi']>=25] = 1\n    df['high_bmi'][df['bmi']<25] = 0\n    \n    df['no_of_risk_factors'] = df['hypertension']+df['heart_disease']+df['smokes']+df['high_bmi']\n    df['attrib1'] = df['avg_glucose_level'] * (1 + df['no_of_risk_factors'])","27cb7336":"add_additional_cols(X_train)\nadd_additional_cols(X_test)","1c5af78d":"oversampler = RandomOverSampler(sampling_strategy='minority')\nX_train_bl, Y_train_bl = oversampler.fit_resample(X_train,Y_train)","cd2e5479":"num_attribs = ['age','hypertension','heart_disease','avg_glucose_level','bmi','no_of_risk_factors','attrib1']\ncat_attribs = ['gender','ever_married','work_type','Residence_type','smoking_status']\nnum_pipeline = Pipeline([\n    ('scaler',StandardScaler())\n])\nfull_pipeline = ColumnTransformer([\n    ('num',num_pipeline,num_attribs),\n    ('cat',OneHotEncoder(handle_unknown='ignore'),cat_attribs)\n])\n\nX_train_prepared = full_pipeline.fit_transform(X_train_bl)\nX_test_prepared = full_pipeline.transform(X_test)","8d720619":"log_reg = LogisticRegression()\nlog_reg.fit(X_train_prepared, Y_train_bl)\nY_pred = log_reg.predict(X_test_prepared)\nsns.heatmap(confusion_matrix(Y_test, Y_pred),annot=True,fmt='d',cmap='Blues')","6d23e4fa":"print(classification_report(Y_test, Y_pred))","cfa56e5d":"lin_svc = LinearSVC()\nlin_svc.fit(X_train_prepared, Y_train_bl)\nY_pred = lin_svc.predict(X_test_prepared)\nsns.heatmap(confusion_matrix(Y_test, Y_pred),annot=True,fmt='d',cmap='Blues')","fdf68b58":"print(classification_report(Y_test, Y_pred))","6a8831b9":"num_attribs = ['age']\nnum_pipeline = Pipeline([\n    ('scaler',StandardScaler())\n])\nfull_pipeline = ColumnTransformer([\n    ('num',num_pipeline,num_attribs),\n])\n\nX_train_prepared = full_pipeline.fit_transform(X_train_bl)\nX_test_prepared = full_pipeline.transform(X_test)","06136a38":"lin_svc = LinearSVC()\nlin_svc.fit(X_train_prepared, Y_train_bl)\nY_pred = lin_svc.predict(X_test_prepared)\nsns.heatmap(confusion_matrix(Y_test, Y_pred),annot=True,fmt='d',cmap='Blues')","0d36b701":"print(classification_report(Y_test, Y_pred))","6d782919":"num_attribs = ['heart_disease']\ncat_attribs = ['ever_married']\nnum_pipeline = Pipeline([\n    ('scaler',StandardScaler())\n])\nfull_pipeline = ColumnTransformer([\n    ('num',num_pipeline,num_attribs),\n    ('cat',OneHotEncoder(handle_unknown='ignore'),cat_attribs)\n])\n\nX_train_prepared = full_pipeline.fit_transform(X_train_bl)\nX_test_prepared = full_pipeline.transform(X_test)","ebb4f15e":"lin_svc = LinearSVC()\nlin_svc.fit(X_train_prepared, Y_train_bl)\nY_pred_2 = lin_svc.predict(X_test_prepared)\nsns.heatmap(confusion_matrix(Y_test, Y_pred_2),annot=True,fmt='d',cmap='Blues')","d75d4e08":"print(classification_report(Y_test, Y_pred_2))","f83eb8fa":"<p style=\"font-size: 15pt;\">The reason for the under performance of the model when all features are included could be the fact that important risk factors like hypertension and heart disease arise with the onset of aging, i.e being correlated with age they are not adding any useful information. Absent any feature engineering, the only way to improve the performance would be to incorporate more useful features - not just any features but those which don't have any correlation with age. <br><br>The current dataset is missing several important risk factors for stroke, namely, <br>\n    <br>1. Stress\n    <br>2. Physical inactivity\n    <br>3. Family history - genetic disorders like CADASIL\n    <br>4. Prior stroke history\n    <br>5. Drug and alcohol abuse\n    <br>6. Atrial Fibrillation\n    <br><br>All the above risk factors are uncorrelated with age and are likely to improve model performance.\n<\/p>","eefa08d5":"<p style=\"font-size: 15pt;\">The plot on the left shows that, in age groups below 40, strokes are very rare irrespective of the glucose levels but tend to happen in the low to normal glucose ranges.<\/p><br>\n<p style=\"font-size: 15pt;\">For age groups above 40, the risk of stroke is much more severe than that seen in the aggregated plot of all age groups  - ranging from 5-10% (below glucose levels of 150) to 10-25% (above 150).<\/p>","520d8f62":"<p style=\"font-size: 15pt;\">90% of the stroke positive individuals have been married compared to only 65% for stroke negative individuals.<\/p>","aa384e8b":"# Data Preparation","13d643eb":"<p style=\"font-size: 15pt;\">I am adding 2 additional columns - one is the number of risk factors which we saw in data visualization and the other one is a value that is directly proportional to both average glucose level and the number of risk factors, (Avg. Glucose Level) * (1 + No. of risk factors)<\/p>","61c1103f":"<p style=\"font-size: 15pt;\">Strokes tend to happen in the 50-110 and the 160 to 240 glucose level ranges. It is worthwhile to note that though there are a higher number of cases of stroke (bigger orange bars) in the lower range they are a smaller proportion of total cases. Let's plot a line chart below to observe the actual risk of stroke at each glucose level.<\/p>","8d9716fa":"<h2>Other feature combinations:<\/h2>\n<p style=\"font-size: 15pt;\">After some trial and error, I found that Heart disease and Marriage status are giving an even better recall of 90%. Let's look at it below,<br>","e89c92cb":"<h1>Relationship between Stroke and various attributes<\/h1>","ca75f168":"<p style=\"font-size: 15pt;\">In both stroke positive and stroke negative groups, the majority are not hypertense but 1 in 4 is hypertense in the stroke positive group compared to 1 in 10 in the stroke negative group.<\/p>","f5304db0":"<h1>Conclusion<\/h1>","32233bfc":"<p style=\"font-size: 15pt;\">The proportion of males and females in both groups is almost same.<\/p>","b6cc87c8":"<p style=\"font-size: 15pt;\">With a significant chunk of the samples in 'unknown' status, it is difficult to tell with any certainty if smoking has any impact on the risk of stroke. But as the extremes of 'smokes' and 'never smoked' are having more or less similar proportions in both groups, it may be safe to assume that smoking is a weak predictor of stroke.<\/p>","ceff7276":"<p style=\"font-size: 15pt;\">Train test split will be done before over sampling to prevent data leakage by way of duplicates. I will only oversample the train set and leave the test set as it is.<\/p>","f4f042a9":"<p style=\"font-size: 15pt;\">Close to 19% of the stroke positive population has heart disease compared to only 5% for the stroke negative group.<\/p>","5c63a8b6":"<p style=\"font-size: 15pt;\">Replacing missing values with mode<\/p>","92c05395":"<p style=\"font-size: 15pt;\">26% of the stroke positive individuals are self employed compared to only 15% for stroke negative individuals.<\/p>","8ae39991":"<p style=\"font-size: 15pt;\">Looking at the distribution of strokes in the dataset using a pie chart shows that the data is highly imbalanced with only 5% of the cases being strokes. An imbalanced dataset implies that metrics like accuracy and ROC AUC score will be misleading. We will need to look at precision, recall and f1 score to judge the performance of our models. Since this is a medical application, our focus should be on recall as it is necessary to identify as many risky cases as possible even if it is at the expense of precision.<br><br>I will be balancing the dataset using RandomOverSampler from imblearn library.<\/p>","f173ff05":"<p style=\"font-size: 15pt;\">The risk of stroke shoots up from 2-5% to 10-20% as glucose levels go beyond 150. <br> Let's split this into 2 groups - one below the age of 40 and the other above 40 - and see if there are any differences.<\/p>","7ff4d7da":"<p style=\"font-size: 15pt;\">Surprisingly, using only age as the input to the Linear SVC is giving the best recall performance of 84% with minor worsening of precision and f1 score compared to the models trained on all attributes. It means that for the machine learning algorithms all the other attributes in their present state are merely noise or just redundant.<br><br> This makes a strong case for feature engineering\/selection of the other attributes for improving the performance.<\/p>","04d22060":"<p style=\"font-size: 15pt;\">Based on our analysis so far, glucose levels and age are the strongest predictors of stroke. Let us study their relationship more closely using violin charts<\/p>","555977ca":"# Data Visualization","96fc364a":"<p style=\"font-size: 15pt;\">Risk of stroke starts in 30-40 age group and becomes more severe in older age groups.<\/p>","43eab869":"<p style=\"font-size: 15pt;\">Incidence of strokes is slightly higher in urban areas<\/p>","b327e663":"<p style=\"font-size: 15pt;\">But using these 2 attributes, precision of the stroke class and recall of the non stroke class are severely compromised. This model looks very poor, so the single attribute model is the best one so far.<\/p>","226e80c0":"<h2>Analysis of the violin plot:<\/h2>\n<p style=\"font-size: 15pt;\">The plot corroborates some of our earlier conclusions that,<br> - people below 40 are immune to strokes even at higher levels of glucose (longer blue violins upto glucose levels of 250 and absence of or thinner orange violins below age of 40)<br> - the risk of strokes starts around 30-40 years (orange violins get thicker progressively)<br><br>\nIn higher age groups, orange violins have slightly higher median glucose levels (white dots inside the violins) but the range of glucose levels for stroke and non stroke cases is more or less similar. This implies that even in higher age groups there is not much difference between stroke and non stroke cases in terms of glucose levels. It means that in addition to glucose levels there could be other causative factors.<br><br>\nLet's try incorporating some of the other known risk factors in the dataset, namely - hypertension, heart disease, BMI>25 and smoking - and create a new attribute called \"no_of_risk_factors\"\n<\/p>\n\n","f2df6a94":"<p style=\"font-size: 15pt;\">BMI does not seem to have strong relationship with the risk of stroke.<\/p>","0febc00f":"<h1>Training and prediction<\/h1>","8ecf6c41":"<p style=\"font-size: 15pt;\">Incorporating the number of risk factors, we see that the orange violins are placed one risk factor above the blue violins which reveals that the stroke group has 1 additional risk factor at the median and a higher range of no. of risk factors compared to the non stroke group.<br><br> In fact, it turns out that the number of risk factors does a good job of predicting strokes on its own as the below line plot shows -  as the risk factors rise the corresponding lines rise up and hit higher peaks.<\/p>","132b12ac":"<h2>Using only a single attribute - Age<\/h2>"}}