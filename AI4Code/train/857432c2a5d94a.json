{"cell_type":{"dad5296d":"code","a0373a62":"code","2b2397cd":"code","3413bf58":"code","a6fc0d84":"code","c834dc28":"code","6e5cca69":"code","a3ed259a":"code","0b243eb6":"code","87956863":"code","a529dc39":"code","91518063":"code","7bda7cc4":"code","d83e1c93":"code","5190570d":"code","5a5f20a1":"code","c79bcd70":"code","6cc4a7a7":"code","41c9478c":"code","e7bcb5fb":"code","00131ea9":"code","dc103658":"code","08ac6b68":"code","ddb3288d":"code","ec54df9f":"code","088e0346":"code","19a2f77a":"code","ad3f4f1f":"code","b93c6cae":"code","d6a40cce":"code","93b85d5d":"code","e66efa18":"code","eac0c5c4":"code","3c3481a5":"code","f880b646":"code","b834a54d":"code","18caa0ab":"code","bc03dbe8":"code","79c723b3":"code","9cc6d4c1":"code","f7771cf8":"code","08d4513c":"code","76712a50":"code","b2022eb8":"code","244f302f":"code","d6d573dd":"markdown","398cb732":"markdown","7a38bedf":"markdown","2012f390":"markdown","518a255c":"markdown","b7a6ebba":"markdown","9d83b32f":"markdown","b142b7e2":"markdown","c00e0753":"markdown","0358b03f":"markdown","32783544":"markdown","10067b23":"markdown","7297b56b":"markdown","7ef4b1cc":"markdown"},"source":{"dad5296d":"import numpy as np\nimport pandas as pd \nfrom numpy import sqrt, abs, round\nimport seaborn as sns\nfrom scipy.stats import norm, uniform\nimport matplotlib.pyplot as plt","a0373a62":"data = pd.read_csv('..\/input\/students-performance-in-exams\/StudentsPerformance.csv')","2b2397cd":"data.head()","3413bf58":"data['total'] = data['math score'] + data['reading score'] + data['writing score']","a6fc0d84":"data.drop(['math score', 'reading score', 'writing score'], axis=1, inplace=True)","c834dc28":"data.rename(columns={'race\/ethnicity': 'group'}, inplace=True)","6e5cca69":"data['group'].value_counts()","a3ed259a":"data.groupby('group').mean()['total']","0b243eb6":"data['total'].mean()","87956863":"from statsmodels.formula.api import ols\nimport statsmodels.api as sm","a529dc39":"res = ols('total ~ group', data=data).fit()","91518063":"sm.stats.anova_lm(res)","7bda7cc4":"dataA = data[data['total'] < data['total'].mean()]['total']\ndataB = data[data['total'] >= data['total'].mean()]['total']","d83e1c93":"A_mean = dataA.mean()\nB_mean = dataB.mean()","5190570d":"A_std = dataA.std()\nB_std = dataB.std()","5a5f20a1":"A_len = len(dataA)\nB_len = len(dataB)","c79bcd70":"under = sqrt((A_std ** 2 \/ A_len) + (B_std ** 2 \/ B_len))","6cc4a7a7":"above = A_mean - B_mean","41c9478c":"z = above \/ under\np_value = 2 * (1-norm.cdf(abs(z)))","e7bcb5fb":"p_value\n### what does it mean it mean some reason exist between class and classE is clever than the other ###","00131ea9":"data.groupby(['group', 'parental level of education']).size().plot(kind='barh', figsize=(10, 10))","dc103658":"data.groupby(['group', 'test preparation course']).size().plot(kind='barh', figsize=(10, 10), grid=True)","08ac6b68":"def level_edu(columns):\n    if columns == \"associate's degree\":\n        return np.nan\n    elif columns == \"some college\":\n        return np.nan\n    elif columns == \"some high school\":\n        return np.nan\n    elif columns == 'high school':\n        return np.nan\n    else:\n        return columns","ddb3288d":"#data['parental level of education'] = data['parental level of education'].map(level_edu)","ec54df9f":"delet_data = data.dropna()","088e0346":"delet_data.groupby('group').mean()","19a2f77a":"delet_data.groupby(['group', 'parental level of education', 'gender', 'test preparation course']).size()","ad3f4f1f":"sns.distplot(data.select_dtypes(include=['int64']))","b93c6cae":"norm.fit(data.select_dtypes(include=['int64']))\n#mean = 203, std = 42","d6a40cce":"## just example\n#uniform.fit(data.select_dtypes(include=['int64']))","93b85d5d":"data","e66efa18":"from sklearn.preprocessing import MinMaxScaler\nx = data.loc[:, ['group', 'gender', 'parental level of education', 'lunch', 'test preparation course', 'total']]\nx['total'] = MinMaxScaler().fit_transform(x['total'].values.reshape(-1, 1))\n","eac0c5c4":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.compose import make_column_transformer","3c3481a5":"label = LabelEncoder()\nobjList = data.select_dtypes(include = \"object\").columns\nfor column in objList:\n    x[column] = label.fit_transform(x[column].astype(str))\ny = x['group']","f880b646":"from sklearn.feature_selection import SelectKBest, chi2\nbestfeatures = SelectKBest(score_func=chi2, k=2)\nfit = bestfeatures.fit(x, y)\nscore = pd.DataFrame(fit.scores_)\ncolumns = pd.DataFrame(x.columns)\nfeatureScores = pd.concat([columns,score],axis=1)\nfeatureScores.columns = ['columns','Score']\nfeatureScores","b834a54d":"from sklearn import cluster\nw2 = cluster.AgglomerativeClustering(n_clusters=2, linkage='ward').fit(x)\nw3 = cluster.AgglomerativeClustering(n_clusters=3, linkage='ward').fit(x)\nw4 = cluster.AgglomerativeClustering(n_clusters=4, linkage='ward').fit(x)","18caa0ab":"plt.figure(figsize=(10, 10))\n\nplt.subplot(131)\nplt.scatter(x.iloc[:, -1], x.iloc[:, 2], c=w2.labels_)\nplt.title(\"K=2\")\n\nplt.subplot(132)\nplt.scatter(x.iloc[:, -1], x.iloc[:, 2], c=w3.labels_)\nplt.title(\"K=3\")\n\nplt.subplot(133)\nplt.scatter(x.iloc[:, -1], x.iloc[:, 2], c=w4.labels_) \nplt.title(\"K=4\")","bc03dbe8":"x = x.drop('group', axis=1)","79c723b3":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import make_column_transformer\n\n\ncol_transformer = make_column_transformer(\n        (OneHotEncoder(), list(x.select_dtypes(include='object'))),\n        remainder='passthrough')\n\nx_ohe = col_transformer.fit_transform(x)","9cc6d4c1":"from sklearn.cluster import KMeans","f7771cf8":"kmean = KMeans(n_clusters=3,  max_iter = 700,n_init = 10 )\ny_predict = kmean.fit_predict(x_ohe)","08d4513c":"\ny = LabelEncoder.fit_transform(x, y)","76712a50":"sse = []\nfor k in range(1, 11):\n     kmeans = KMeans(n_clusters=k, max_iter = 300)\n     kmeans.fit(x_ohe)\n     sse.append(kmeans.inertia_)\n        \nplt.style.use(\"fivethirtyeight\")\nplt.plot(range(1, 11), sse)\nplt.xticks(range(1, 11))\nplt.xlabel(\"Number of Clusters\")\nplt.ylabel(\"SSE\")\nplt.show()","b2022eb8":"y[:10]","244f302f":"y_predict[:10]","d6d573dd":"## Run This :","398cb732":"## f : group_meansq \/ residual_meansq\n## p_value:cdf(f)","7a38bedf":"## group_meansq : group_df \/ group_sumsq \n## residual_meansq : residual_df \/ residual_sumsq\n","2012f390":"### select KBest, Chi2: ","518a255c":"*Let's See groupE Is More Cleaver Than Other Group or Not*\n### We Use Statistic-test For These","b7a6ebba":"## How Choose Best KElbow:","9d83b32f":"## z_test: ","b142b7e2":"**see we have A, B, C, D, E group Now We Want To See Mean Of Score Each group**","c00e0753":"## If You Want Find Parameter For Distribution Use Norm  or Possion or Uniform .fit(your-data)","0358b03f":"### plot Scatter Clustering:","32783544":"## What is df_group: Degree Fredoom (n-1) ==> (5-1) = 4\n## What is df_residual: alldata - allGroup ==> 1000 - 5 = 995****","10067b23":"# Now We Want To Sum math, reading, writing into totalScore","7297b56b":"# Students Performance:","7ef4b1cc":"## group_sumsq : allelement - mean \n## residual_sumsq : every element determine specific group [every element - specific group_mean"}}