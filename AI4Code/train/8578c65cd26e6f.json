{"cell_type":{"c5429aab":"code","f9a90ce2":"code","e98b9d90":"code","ad3655b0":"code","c594dfb2":"code","1d181527":"code","1672df80":"code","7cba80ce":"code","32596937":"code","b63f5134":"code","dd829429":"code","8bee4210":"code","33f43c7d":"code","158e4485":"code","896d80ad":"code","44452640":"code","9d544c5b":"code","89c727a5":"code","3b733ae2":"code","e71b11cd":"code","cd079bf4":"code","2dc9ee44":"code","68a79215":"code","5344f93a":"code","3d7a5ae9":"markdown","c72d84a3":"markdown","c7b3a91a":"markdown","4270db60":"markdown","ce0b9c2a":"markdown","ed20c414":"markdown","c874be29":"markdown","acbeff42":"markdown","d892683a":"markdown","e53bb5a3":"markdown"},"source":{"c5429aab":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n","f9a90ce2":"df=pd.read_csv(\"..\/input\/covid19-corona-virus-india-dataset\/complete.csv\")\ndf","e98b9d90":"df['Name of State \/ UT'].value_counts()","ad3655b0":"df.loc[(df['Name of State \/ UT']=='Union Territory of Jammu and Kashmir'),'Name of State \/ UT']='Jammu and Kashmir'\ndf.loc[(df['Name of State \/ UT']=='Union Territory of Ladakh'),'Name of State \/ UT']='Ladakh'\ndf.loc[(df['Name of State \/ UT']=='Union Territory of Chandigarh'),'Name of State \/ UT']='Chandigarh'","c594dfb2":"df['Name of State \/ UT'].value_counts()","1d181527":"# Calculating datewise count of confirmed cases\ndate=dict(list(df.groupby('Date')))\ndates_df=pd.DataFrame()\ncount=[]\ndates=[]\nfor i in date:\n    dates.append(i)\n    count.append(date[i]['Total Confirmed cases'].sum())\ndates_df['Date']=dates\ndates_df['Count']=count \ndates_df=dates_df.sort_values(by='Count',ascending=True)","1672df80":"plt.figure(figsize=(20,15))\nplt.xticks(rotation=90)\nsns.barplot(dates_df['Date'],dates_df['Count'])","7cba80ce":"plt.figure(figsize=(25,10))\nplt.xticks(rotation=90)\nsns.pointplot(dates_df['Date'],dates_df['Count'])","32596937":"months=[]\nfor i in df['Date']:\n    months.append(i.split(\"-\")[1])\ndf['Months']=months","b63f5134":"print(df['Name of State \/ UT'].value_counts().count())\nprint(df['Name of State \/ UT'].value_counts().index)\n","dd829429":"dict1=dict(list(df.groupby('Months')))","8bee4210":"total_count_per_state=[]\nstate_name=[]\ndeath=[]\nrecovered=[]\ndict_names=dict(list(dict1['01'].groupby('Name of State \/ UT')))\nfor i in dict_names.keys():\n    total_count_per_state.append(dict_names[i].sort_values('Date',ascending=True).iloc[-1]['Total Confirmed cases'])\n    death.append(dict_names[i].sort_values('Date',ascending=True).iloc[-1]['Death'])\n    recovered.append(dict_names[i].sort_values('Date',ascending=True).iloc[-1]['Cured\/Discharged\/Migrated'])\n    state_name.append(i)\n    \njan=pd.DataFrame()\njan['State']=state_name\njan['Cases per state']=total_count_per_state\njan['Death']=death\njan['Cured\/Discharged\/Migrated']=recovered\n\n\nnot_in_jan_state=[]\nno_case=[]\nfor i in df['Name of State \/ UT'].value_counts().index:\n    if i not in jan['State'].tolist():\n        not_in_jan_state.append(i)\n        no_case.append(0)\njan_missing_state=pd.DataFrame()\njan_missing_state['State']=not_in_jan_state\njan_missing_state['Cases per state']=no_case\njan_missing_state['Death']=no_case\njan_missing_state['Cured\/Discharged\/Migrated']=no_case\n\njan=pd.concat([jan,jan_missing_state])\njan=jan.sort_values('State')\njan=jan.reset_index()\njan.drop('index',axis=1,inplace=True)\njan","33f43c7d":"# Feb\ntotal_count_per_state=[]\nstate_name=[]\ndeath=[]\nrecovered=[]\ndict_names=dict(list(dict1['02'].groupby('Name of State \/ UT')))\nfor i in dict_names.keys():\n    total_count_per_state.append(dict_names[i].sort_values('Date',ascending=True).iloc[-1]['Total Confirmed cases'])\n    death.append(dict_names[i].sort_values('Date',ascending=True).iloc[-1]['Death'])\n    recovered.append(dict_names[i].sort_values('Date',ascending=True).iloc[-1]['Cured\/Discharged\/Migrated'])\n    state_name.append(i)\n    \nfeb=pd.DataFrame()\nfeb['State']=state_name\nfeb['Cases per state']=total_count_per_state\nfeb['Death']=death\nfeb['Cured\/Discharged\/Migrated']=recovered\n\nnot_in_feb_state=[]\nno_case=[]\nfor i in df['Name of State \/ UT'].value_counts().index:\n    if i not in feb['State'].tolist():\n        not_in_feb_state.append(i)\n        no_case.append(0)\nfeb_missing_state=pd.DataFrame()\nfeb_missing_state['State']=not_in_feb_state\nfeb_missing_state['Cases per state']=no_case\nfeb_missing_state['Death']=no_case\nfeb_missing_state['Cured\/Discharged\/Migrated']=no_case\n\nfeb=pd.concat([feb,feb_missing_state])\nfeb=feb.sort_values('State')\nfeb=feb.reset_index()\nfeb.drop('index',axis=1,inplace=True)\n\nfeb","158e4485":"# MArch\ntotal_count_per_state=[]\nstate_name=[]\ndeath=[]\nrecovered=[]\ndict_names=dict(list(dict1['03'].groupby('Name of State \/ UT')))\nfor i in dict_names.keys():\n    total_count_per_state.append(dict_names[i].sort_values('Date',ascending=True).iloc[-1]['Total Confirmed cases'])\n    state_name.append(i)\n    death.append(dict_names[i].sort_values('Date',ascending=True).iloc[-1]['Death'])\n    recovered.append(dict_names[i].sort_values('Date',ascending=True).iloc[-1]['Cured\/Discharged\/Migrated'])\n    \nmarch=pd.DataFrame()\nmarch['State']=state_name\nmarch['Cases per state']=total_count_per_state\nmarch['Death']=death\nmarch['Cured\/Discharged\/Migrated']=recovered\n\nnot_in_march_state=[]\nno_case=[]\nfor i in df['Name of State \/ UT'].value_counts().index:\n    if i not in march['State'].tolist():\n        not_in_march_state.append(i)\n        no_case.append(0)\nmarch_missing_state=pd.DataFrame()\nmarch_missing_state['State']=not_in_march_state\nmarch_missing_state['Cases per state']=no_case\nmarch_missing_state['Death']=no_case\nmarch_missing_state['Cured\/Discharged\/Migrated']=no_case\n\nmarch=pd.concat([march,march_missing_state])\nmarch=march.sort_values('State')\nmarch=march.reset_index()\nmarch.drop('index',axis=1,inplace=True)\nmarch","896d80ad":"total_count_per_state=[]\nstate_name=[]\ndeath=[]\nrecovered=[]\ndict_names=dict(list(dict1['04'].groupby('Name of State \/ UT')))\nfor i in dict_names.keys():\n    total_count_per_state.append(dict_names[i].sort_values('Date',ascending=True).iloc[-1]['Total Confirmed cases'])\n    state_name.append(i)\n    death.append(dict_names[i].sort_values('Date',ascending=True).iloc[-1]['Death'])\n    recovered.append(dict_names[i].sort_values('Date',ascending=True).iloc[-1]['Cured\/Discharged\/Migrated'])\n    \napril=pd.DataFrame()\napril['State']=state_name\napril['Cases per state']=total_count_per_state\napril['Death']=death\napril['Cured\/Discharged\/Migrated']=recovered\n\nnot_in_april_state=[]\nno_case=[]\nfor i in df['Name of State \/ UT'].value_counts().index:\n    if i not in april['State'].tolist():\n        not_in_april_state.append(i)\n        no_case.append(0)\napril_missing_state=pd.DataFrame()\napril_missing_state['State']=not_in_april_state\napril_missing_state['Cases per state']=no_case\napril_missing_state['Death']=no_case\napril_missing_state['Cured\/Discharged\/Migrated']=no_case\n\n\napril=pd.concat([april,april_missing_state])\napril=april.sort_values('State')\napril=april.reset_index()\napril.drop('index',axis=1,inplace=True)\napril","44452640":"total_count_per_state=[]\nstate_name=[]\ndeath=[]\nrecovered=[]\ndict_names=dict(list(dict1['05'].groupby('Name of State \/ UT')))\nfor i in dict_names.keys():\n    total_count_per_state.append(dict_names[i].sort_values('Date',ascending=True).iloc[-1]['Total Confirmed cases'])\n    state_name.append(i)\n    death.append(dict_names[i].sort_values('Date',ascending=True).iloc[-1]['Death'])\n    recovered.append(dict_names[i].sort_values('Date',ascending=True).iloc[-1]['Cured\/Discharged\/Migrated'])\n    \nmay=pd.DataFrame()\nmay['State']=state_name\nmay['Cases per state']=total_count_per_state\nmay['Death']=death\nmay['Cured\/Discharged\/Migrated']=recovered\n\nnot_in_may_state=[]\nno_case=[]\nfor i in df['Name of State \/ UT'].value_counts().index:\n    if i not in may['State'].tolist():\n        not_in_may_state.append(i)\n        no_case.append(0)\nmay_missing_state=pd.DataFrame()\nmay_missing_state['State']=not_in_may_state\nmay_missing_state['Cases per state']=no_case\nmay_missing_state['Death']=no_case\nmay_missing_state['Cured\/Discharged\/Migrated']=no_case\n\nmay=pd.concat([may,may_missing_state])\nmay=may.sort_values('State')\nmay=may.reset_index()\nmay.drop('index',axis=1,inplace=True)\nFinal=pd.DataFrame()\nFinal=may.copy()","9d544c5b":"for i in ['Cases per state','Death','Cured\/Discharged\/Migrated']:\n  feb[i]=feb[i]-jan[i]\n  march[i]=march[i]-feb[i]\n  april[i]=april[i]-march[i]\n  may[i]=may[i]-april[i]","89c727a5":"Final_january=jan\nFinal_February=feb\nFinal_March=march\nFinal_April=april\nFinal_May=may","3b733ae2":"labels=Final_january['State'].values\nposition=Final_january['State'].index\nFinal_january.plot(kind='bar',figsize=(20,5))\nplt.xticks(position, labels)\nplt.title(\"New Cases for January month\")","e71b11cd":"labels=Final_February['State'].values\nposition=Final_February['State'].index\nFinal_February.plot(kind='bar',figsize=(20,5))\nplt.xticks(position, labels)\nplt.yticks(np.arange(0,3,1))\nplt.title(\"New Cases for February month\")","cd079bf4":"labels=Final_March['State'].values\nposition=Final_March['State'].index\nFinal_March.plot(kind='bar',figsize=(20,5))\nplt.xticks(position, labels)\nplt.title(\"New Cases for March month\")","2dc9ee44":"Final_April.plot(kind='bar',figsize=(20,5))\nlabels=Final_April['State'].values\nposition=Final_April['State'].index\nplt.xticks(position, labels)\nplt.title(\"New Cases for April month\")","68a79215":"labels=Final_May['State'].values\nposition=Final_May['State'].index\nFinal_May.plot(kind='bar',figsize=(20,5))\nplt.xticks(position, labels)\nplt.title(\"New Cases for May month\")","5344f93a":"labels=Final_May['State'].values\nposition=Final_May['State'].index\nFinal.plot(kind='bar',figsize=(20,10))\nplt.xticks(position,labels)\nplt.title(\"All Cases State wise at the end of the May Month-Total Confirmed Cases,Deaths and Cured\")","3d7a5ae9":"January","c72d84a3":"May","c7b3a91a":"# Date wise increase in the number of confirmed cases","4270db60":"February","ce0b9c2a":"Removing Duplicate Values","ed20c414":"# Overall total Confirmed cases,Deaths and Cured State wise\n\n\n","c874be29":"# Calculating month wise confirmed cases\n","acbeff42":"March","d892683a":" From 15th of march 2020 we can see a rapid growth in number of confirmed cases.","e53bb5a3":"April"}}