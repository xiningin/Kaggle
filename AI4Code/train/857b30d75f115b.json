{"cell_type":{"54578457":"code","52cf33a4":"code","efa2ab1b":"code","fbed0ae6":"code","5e4b5d7b":"code","77df144c":"code","03bc6fde":"code","4233d106":"code","7a0169f0":"code","8e830bb8":"code","ed674e08":"code","b2de72a6":"code","3efcd1a8":"code","d22c4b58":"code","b638bb7e":"code","9071820f":"code","5d77fc13":"code","19626be7":"code","071235d6":"code","1f91da18":"code","5e149653":"code","df977da5":"code","4b2b0916":"code","6160e7a4":"code","c92c42fc":"code","dfffe652":"code","4d443574":"code","6dea4db9":"code","9a1f0b95":"code","8c574b64":"code","82322b9d":"code","3bedbcac":"code","ee50f9e4":"code","2b46f48f":"code","d35a0e66":"code","f008ace5":"code","aede0ba7":"code","a551b45a":"code","7d4931d4":"code","01301e88":"code","24761c1b":"code","b92a90f1":"code","89e6ad37":"code","7c55432c":"code","d244d67b":"code","31126d79":"code","4832ac3d":"code","1959deed":"markdown","2f3cdff3":"markdown","83ebaecf":"markdown","2b9cd2bc":"markdown","19a209e8":"markdown","db469ebc":"markdown","85704d25":"markdown","098dc15d":"markdown","9943c274":"markdown","df77f65b":"markdown","ac372f00":"markdown","7ef9ad4f":"markdown","34984bb5":"markdown","d72f7d71":"markdown","84aa5f1c":"markdown","a56c04c4":"markdown","482bd932":"markdown"},"source":{"54578457":"import numpy as np \nimport pandas as pd\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline \nfrom wordcloud import WordCloud, STOPWORDS","52cf33a4":"tweets_df = pd.read_csv(\"..\/input\/black-friday-tweets\/BlackFriday_tweets.csv\")","efa2ab1b":"print(f\"data shape: {tweets_df.shape}\")","fbed0ae6":"tweets_df.info()","5e4b5d7b":"tweets_df.describe()","77df144c":"tweets_df.head()","03bc6fde":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","4233d106":"missing_data(tweets_df)","7a0169f0":"def unique_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    uniques = []\n    for col in data.columns:\n        unique = data[col].nunique()\n        uniques.append(unique)\n    tt['Uniques'] = uniques\n    return(np.transpose(tt))","8e830bb8":"unique_values(tweets_df)","ed674e08":"def most_frequent_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    items = []\n    vals = []\n    for col in data.columns:\n        itm = data[col].value_counts().index[0]\n        val = data[col].value_counts().values[0]\n        items.append(itm)\n        vals.append(val)\n    tt['Most frequent item'] = items\n    tt['Frequence'] = vals\n    tt['Percent from total'] = np.round(vals \/ total * 100, 3)\n    return(np.transpose(tt))","b2de72a6":"most_frequent_values(tweets_df)","3efcd1a8":"def plot_count(feature, title, df, size=1, ordered=True):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    if ordered:\n        g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set3')\n    else:\n        g = sns.countplot(df[feature], palette='Set3')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()    ","d22c4b58":"plot_count(\"user_name\", \"User name\", tweets_df,4)","b638bb7e":"plot_count(\"user_location\", \"User location\", tweets_df,4)","9071820f":"plot_count(\"source\", \"Source\", tweets_df,4)","5d77fc13":"stopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='white',\n        stopwords=stopwords,\n        max_words=50,\n        max_font_size=40, \n        scale=5,\n        random_state=1\n    ).generate(str(data))\n\n    fig = plt.figure(1, figsize=(10,10))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()","19626be7":"show_wordcloud(tweets_df['text'], title = 'Prevalent words in tweets')","071235d6":"india_df = tweets_df.loc[tweets_df.user_location==\"India\"]\nshow_wordcloud(india_df['text'], title = 'Prevalent words in tweets from India')","1f91da18":"us_df = tweets_df.loc[tweets_df.user_location==\"United States\"]\nshow_wordcloud(us_df['text'], title = 'Prevalent words in tweets from US')","5e149653":"us_df = tweets_df.loc[tweets_df.user_location==\"United Kingdom\"]\nshow_wordcloud(us_df['text'], title = 'Prevalent words in tweets from UK')","df977da5":"us_df = tweets_df.loc[tweets_df.user_location==\"Canada\"]\nshow_wordcloud(us_df['text'], title = 'Prevalent words in tweets from Canada')","4b2b0916":"india_df = tweets_df.loc[tweets_df.user_location==\"South Africa\"]\nshow_wordcloud(india_df['text'], title = 'Prevalent words in tweets from South Africa')","6160e7a4":"india_df = tweets_df.loc[tweets_df.user_location==\"Switzerland\"]\nshow_wordcloud(india_df['text'], title = 'Prevalent words in tweets from Switzerland')","c92c42fc":"us_df = tweets_df.loc[tweets_df.user_location==\"London\"]\nshow_wordcloud(us_df['text'], title = 'Prevalent words in tweets from London')","dfffe652":"def plot_features_distribution(features, title, df, isLog=False):\n    plt.figure(figsize=(12,6))\n    plt.title(title)\n    for feature in features:\n        if(isLog):\n            sns.distplot(np.log1p(df[feature]),kde=True,hist=False, bins=120, label=feature)\n        else:\n            sns.distplot(df[feature],kde=True,hist=False, bins=120, label=feature)\n    plt.xlabel('')\n    plt.legend()\n    plt.show()\n","4d443574":"tweets_df['hashtags'] = tweets_df['hashtags'].replace(np.nan, \"['None']\", regex=True)\ntweets_df['hashtags'] = tweets_df['hashtags'].apply(lambda x: x.replace('\\\\N',''))\ntweets_df['hashtags_count'] = tweets_df['hashtags'].apply(lambda x: len(x.split(',')))\nplot_features_distribution(['hashtags_count'], 'Hashtags per tweet (all data)', tweets_df)","6dea4db9":"tweets_df['hashtags_individual'] = tweets_df['hashtags'].apply(lambda x: x.split(','))\nfrom itertools import chain\nall_hashtags = set(chain.from_iterable(list(tweets_df['hashtags_individual'])))\nprint(f\"There are totally: {len(all_hashtags)}\")","9a1f0b95":"show_wordcloud(tweets_df['hashtags_individual'], title = 'Prevalent words in hashtags')","8c574b64":"country_df = pd.read_csv(\"..\/input\/iso-country-codes-global\/wikipedia-iso-country-codes.csv\")","82322b9d":"country_df.columns = [\"country\", \"alpha2\", \"alpha3\", \"numeric\", \"iso\"]\ncountry_df.head()","3bedbcac":"tweets_df['country'] = tweets_df['user_location']","ee50f9e4":"tweets_df = tweets_df.merge(country_df, on=\"country\")","2b46f48f":"tweets_df.head(10)","d35a0e66":"tw_add_df = tweets_df.groupby([\"country\", \"iso\", \"alpha3\"])['text'].count().reset_index()\ntw_add_df.columns = [\"country\", \"iso\", \"alpha3\", \"tweets\"]","f008ace5":"import plotly.express as px\n\ndef plot_map(dd_df, title):\n    hover_text = []\n    for index, row in dd_df.iterrows():\n        hover_text.append((f\"country: {row['country']}<br>tweets: {row['tweets']}\\\n                          <br>country code: {row['iso']}<br>country alpha3: {row['alpha3']}\"))\n    dd_df['hover_text'] = hover_text\n\n    fig = px.choropleth(dd_df, \n                        locations=\"alpha3\",\n                        hover_name='hover_text',\n                        color=\"tweets\",\n                        projection=\"natural earth\",\n                        color_continuous_scale=px.colors.sequential.Plasma,\n                        width=900, height=700)\n    fig.update_geos(   \n        showcoastlines=True, coastlinecolor=\"DarkBlue\",\n        showland=True, landcolor=\"LightGrey\",\n        showocean=True, oceancolor=\"LightBlue\",\n        showlakes=True, lakecolor=\"Blue\",\n        showrivers=True, rivercolor=\"Blue\",\n        showcountries=True, countrycolor=\"DarkBlue\"\n    )\n    fig.update_layout(title = title, geo_scope=\"world\")\n    fig.show()    ","aede0ba7":"plot_map(tw_add_df, \"Tweets per country (where country is specified)\")","a551b45a":"tweets_df['datedt'] = pd.to_datetime(tweets_df['date'])","7d4931d4":"tweets_df['year'] = tweets_df['datedt'].dt.year\ntweets_df['month'] = tweets_df['datedt'].dt.month\ntweets_df['day'] = tweets_df['datedt'].dt.day\ntweets_df['dayofweek'] = tweets_df['datedt'].dt.dayofweek\ntweets_df['hour'] = tweets_df['datedt'].dt.hour\ntweets_df['minute'] = tweets_df['datedt'].dt.minute\ntweets_df['dayofyear'] = tweets_df['datedt'].dt.dayofyear\ntweets_df['date_only'] = tweets_df['datedt'].dt.date","01301e88":"tweets_agg_df = tweets_df.groupby([\"date_only\"])[\"text\"].count().reset_index()\ntweets_agg_df.columns = [\"date_only\", \"count\"]","24761c1b":"def plot_time_variation(df, x='date_only', y='count', hue=None, size=1, title=\"\", is_log=False):\n    f, ax = plt.subplots(1,1, figsize=(4*size,3*size))\n    g = sns.lineplot(x=x, y=y, hue=hue, data=df)\n    plt.xticks(rotation=90)\n    if hue:\n        plt.title(f'{y} grouped by {hue} | {title}')\n    else:\n        plt.title(f'{y} | {title}')\n    if(is_log):\n        ax.set(yscale=\"log\")\n    ax.grid(color='black', linestyle='dotted', linewidth=0.75)\n    plt.show() ","b92a90f1":"plot_time_variation(tweets_agg_df, title=\"Number of tweets \/ day of year\",size=3)","89e6ad37":"plot_count(\"dayofweek\", \"tweets \/ day of week\", tweets_df, size=3, ordered=False)","7c55432c":"plot_count(\"dayofyear\", \"tweets \/ day of year\", tweets_df, size=3, ordered=False)","d244d67b":"plot_count(\"date_only\", \"tweets \/ date\", tweets_df,size=4, ordered=False)","31126d79":"plot_count(\"hour\", \"tweets \/ hour\", tweets_df,size=4, ordered=False)","4832ac3d":"plot_count(\"minute\", \"tweets \/ minute\", tweets_df,size=5, ordered=False)","1959deed":"### Extract country from location\n\nWe load the country list from the additional database we added to this Notebook. We also create a `country` column in the original dataset.","2f3cdff3":"### Hashtags analysis","83ebaecf":"<h1>Black Friday Tweets<\/h1>\n\n\n<img src=\"https:\/\/dbdzm869oupei.cloudfront.net\/img\/sticker\/large\/9485.jpg\" width=\"600\"><\/img>\n\n\n# Introduction\n\n\nThe Dataset we are using here is collected using Twitter API, **tweepy** and Python package.\n\n### Original notebook comes from Gabriel Preda here https:\/\/www.kaggle.com\/gpreda\/coronavirus-covid-19-tweets\/notebook. Please upvote him \n","2b9cd2bc":"### Time variation","19a209e8":"## Visualize the data distribution","db469ebc":"### Most frequent values","85704d25":"# Data preparation\n\n## Load packages","098dc15d":"### Extract date and time features","9943c274":"### User location","df77f65b":"### Text wordcloauds","ac372f00":"## Load data","7ef9ad4f":"We merge the countries dataset with the tweets dataset.","34984bb5":"### Tweet source","d72f7d71":"### Missing data","84aa5f1c":"### Unique values","a56c04c4":"### User name","482bd932":"# Data exploration\n\n\n## Glimpse the data"}}