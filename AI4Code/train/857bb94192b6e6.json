{"cell_type":{"eb86db36":"code","b8193313":"code","c4f138fe":"code","e3f18125":"code","74aad6f3":"code","dfc56ca1":"code","da0f9384":"code","cbbe6dac":"code","4261e1ab":"code","913cfe20":"code","7e32955f":"code","f41de1a9":"code","ade4269f":"code","66e9459f":"code","54001450":"markdown"},"source":{"eb86db36":"import pandas as pd","b8193313":"df=pd.read_csv('..\/input\/train-housing\/train (2).csv')","c4f138fe":"df.shape","e3f18125":"df.head()","74aad6f3":"# lets check the different neighborhoods\ndf['Neighborhood'].value_counts()","dfc56ca1":"# total number of houses in the neighborhood\nall_houses = df.shape[0]\nprint(\"Total Number of Houses in the Neighborhood :\", all_houses)","da0f9384":"# total number of houses in the Old town neighborhood\nhouses_in_OldTown = df[df['Neighborhood'] == 'OldTown'].shape[0]\nprint(\"Total Number of Houses in the Old Town Road :\", houses_in_OldTown)","cbbe6dac":"# lets find the probability of picking a House in the Old Town\nprobability = (houses_in_OldTown\/all_houses)*100\nprint('Probability of picking a house in OldTown: {0:.2f}'.format(probability )+'%')","4261e1ab":"## Enter condtional probability code\ncond_prob = (houses_in_OldTown\/all_houses) * ((houses_in_OldTown - 1)\/(all_houses - 1)) \nprint(\"The Probability of Picking a House in Old Town and again picking a house from the same neighborhood is {0:.9f}\".\n      format(cond_prob*100))","913cfe20":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = (11, 4)\nplt.style.use('fivethirtyeight')\n\nplt.xticks(rotation=30)\nsns.distplot(df['SalePrice'])\nplt.title('Distribution of Target Column')\nplt.show()","7e32955f":"import numpy as np\n# lets take seed so that everytime the random values come out to be constant\nnp.random.seed(6)\n\n# lets take 500 sample values from the dataset of 1460 values\nsample_ages = np.random.choice(a= df['SalePrice'], size=500)\n\n# getting the sample mean\nprint (\"Sample mean:\", sample_ages.mean() )          \n\n# getting the population mean\nprint(\"Population mean:\", df['SalePrice'].mean())","f41de1a9":"# lets import the scipy package\nimport scipy.stats as stats\nimport math\n\n# lets seed the random values\nnp.random.seed(10)\n\n# lets take a sample size\nsample_size = 1000\nsample = np.random.choice(a= df['SalePrice'],\n                          size = sample_size)\nsample_mean = sample.mean()\n\n# Get the z-critical value*\nz_critical = stats.norm.ppf(q = 0.95)  \n\n # Check the z-critical value  \nprint(\"z-critical value: \",z_critical)                                \n\n# Get the population standard deviation\npop_stdev = df['SalePrice'].std()  \n\n# checking the margin of error\nmargin_of_error = z_critical * (pop_stdev\/math.sqrt(sample_size)) \n\n# defining our confidence interval\nconfidence_interval = (sample_mean - margin_of_error,\n                       sample_mean + margin_of_error)  \n\n# lets print the results\nprint(\"Confidence interval:\",end=\" \")\nprint(confidence_interval)\nprint(\"True mean: {}\".format(df['SalePrice'].mean()))","ade4269f":"np.random.seed(12)\n\nsample_size = 500\n\nintervals = []\nsample_means = []\n\nfor sample in range(25):\n    sample = np.random.choice(a= df['SalePrice'], size = sample_size)\n    sample_mean = sample.mean()\n    sample_means.append(sample_mean)\n\n     # Get the z-critical value* \n    z_critical = stats.norm.ppf(q = 0.975)         \n\n    # Get the population standard deviation\n    pop_stdev = df['SalePrice'].std()  \n\n    stats.norm.ppf(q = 0.025)\n\n    margin_of_error = z_critical * (pop_stdev\/math.sqrt(sample_size))\n\n    confidence_interval = (sample_mean - margin_of_error,\n                           sample_mean + margin_of_error)  \n    \n    intervals.append(confidence_interval)\n    \n\nplt.figure(figsize=(13, 9))\n\nplt.errorbar(x=np.arange(0.1, 25, 1), \n             y=sample_means, \n             yerr=[(top-bot)\/2 for top,bot in intervals],\n             fmt='o')\n\nplt.hlines(xmin=0, xmax=25,\n           y=df['SalePrice'].mean(), \n           linewidth=2.0,\n           color=\"red\")\nplt.title('Confidence Intervals for 25 Trials', fontsize = 20)\nplt.show()\n\n\n","66e9459f":"# lets import z test from statsmodels\nfrom statsmodels.stats.weightstats import ztest\n\nz_statistic, p_value = ztest(x1 = df[df['Neighborhood'] == 'OldTown']['SalePrice'],\n                             value = df['SalePrice'].mean())\n\n# lets print the Results\nprint('Z-statistic is :{}'.format(z_statistic))\nprint('P-value is :{:.50f}'.format(p_value))","54001450":"If the P value if less than 0.05, then we can reject our null hypothesis against the alternate hypothesis.\n\nThe Probability of getting the given distribution of houseprices in OldTown under the assumption that its mean, is the same as the mean of all house prices."}}