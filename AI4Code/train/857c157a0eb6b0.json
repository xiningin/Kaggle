{"cell_type":{"bb1954cd":"code","825130fe":"code","92237e2d":"code","64f80f35":"code","4eff5dcd":"code","4598826a":"code","2de8b97f":"code","58c5d5cd":"code","aa010fc0":"code","a58fdc30":"code","030c8e2e":"markdown","1ee48e83":"markdown","17447559":"markdown","77421ed2":"markdown","67d12d9d":"markdown","40dbf88d":"markdown","326ede02":"markdown","c778c8fb":"markdown","2fc668af":"markdown","2710361d":"markdown","a15f7d78":"markdown","3db088e1":"markdown"},"source":{"bb1954cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","825130fe":"#This will help us keep track of the submissions\nsub_name_list = ['dummy', 'BossaNostra 1', 'BossaNostra 2']\nscore_list = [] #We can keep the scores here\n\n#Put the submissions in dataframe form and add to a list.\nsub_list = []\ntemp_df = pd.read_csv(\"\/kaggle\/input\/ufc252contestdummysubmission\/task-dummy.csv\")\nsub_list.append(temp_df)\n\ntemp_df = pd.read_csv(\"\/kaggle\/input\/ufc252contestsubmission\/252-Contest-Submission_1.csv\")\nsub_list.append(temp_df)\n\ntemp_df = pd.read_csv(\"\/kaggle\/input\/ufc252contestsubmission\/252-Contest-Submission_2.csv\")\nsub_list.append(temp_df)\n","92237e2d":"results_df = pd.read_csv(\"\/kaggle\/input\/ultimate-ufc-dataset\/most-recent-event.csv\")\n\n#We only need the fighter names, odds, and winner\n\nresults_df = results_df[['R_fighter', 'B_fighter', 'R_ev', 'B_ev', 'Winner']]\ndisplay(results_df)","64f80f35":"#Returns a specific bet EV based on winning_ev and probability.\ndef get_bet_ev(ev, prob):\n    \n    return(ev*prob - (1-prob)*100)","4eff5dcd":"#Used to determine the bet of each fight.  We will use probabilities and the ev to \n#determine profitable bets\ndef get_bet(R_prob, B_prob, R_ev, B_ev):\n    red_ev = get_bet_ev(R_ev, R_prob)\n    blue_ev = get_bet_ev(B_ev, B_prob)\n    if red_ev > 0:\n        return('Red')\n    if blue_ev > 0:\n        return('Blue')\n    \n    return 'None'","4598826a":"def get_profit(winner, bet, R_ev, B_ev):\n    if bet == 'None':\n        return 0\n    if (bet == 'Blue' and winner == 'Blue'):\n        return B_ev\n    if (bet == 'Red' and winner == 'Red'):\n        return R_ev\n    else:\n        return (-100)","2de8b97f":"#Let's make a helper function to make this easier\n\ndef get_score(sub, results):\n#    display(sub)\n#    display(results)\n    #Let's merge the two dataframes\n    merge_df = pd.merge(sub, results)\n    #display(merge_df)\n    #We can get the proper bet by using a lambda function\n    merge_df['Bet'] = merge_df.apply(lambda x: get_bet(x['R_prob'],x['B_prob'],x['R_ev'],x['B_ev']), axis=1)\n    merge_df['Profit'] = merge_df.apply(lambda x: get_profit(x['Winner'], x['Bet'], x['R_ev'], x['B_ev']), axis=1)\n    display(merge_df)\n    return(sum(merge_df['Profit']))","58c5d5cd":"z = 0\nscore_list.append(get_score(sub_list[z], results_df))\nprint(f\"{sub_name_list[z]}'s bets saw a total profit of {score_list[z]}\")","aa010fc0":"z = 1\nscore_list.append(get_score(sub_list[z], results_df))\nprint(f\"{sub_name_list[z]}'s bets saw a total profit of {score_list[z]}\")","a58fdc30":"z = 2\nscore_list.append(get_score(sub_list[z], results_df))\nprint(f\"{sub_name_list[z]}'s bets saw a total profit of {score_list[z]}\")","030c8e2e":"# Final Results\n\n* `dummy`: +195.00 units\n* `BossaNostra 1`: -411.32 units\n* `BossaNostra 2`: -281.32 units\n\n`dummy` is the winner","1ee48e83":"As predicted the unusual results of this event led to a bad result for BossaNostra's 1st Submission.  He won 2 of 8 bets for a total loss of 411.32 units.","17447559":"# Submissions\n\nThere are 3 submissions.\n\n1. The dummy file (gives each fighter a .5 probability of winning. Therefore will bet every underdog with greater than +100 odds.)\n\n2. BossaNostra's submission #1\n3. BossaNostra's submission #2","77421ed2":"# Submission #1: Dummy Submission\n\nThese are the results of the dummy submission.","67d12d9d":"# Open All Submissions and add to a list","40dbf88d":"BossaNostra's best submission.  Here he was able to correctly predict the TJ Brown vs Danny Chavez bout.  He won 3 of 10 bets for a total loss of 281.32 units","326ede02":"Dummy turned a profit.  But dummy is a dummy.  A good day for dummy should probably mean a bad day for good models.  Dummy won 3 of 7 bets for a profit of 195.00 units","c778c8fb":"# Submission #2: BossaNostra's 1st Submission","2fc668af":"# Submission #3: BossaNostra's 2nd Submission","2710361d":"# Purpose\n\nI am going to go through the task submissions for [Contest #7: UFC 252 Bet Prediction Contest](https:\/\/www.kaggle.com\/mdabbert\/ultimate-ufc-dataset\/tasks?taskId=1673)  and see what set of predictions was the most profitable (if any!)","a15f7d78":"This was an extremely hard event for models to be able to predict.  The fact that `Red` won only 2 out of 10 bouts presents a big problem for almost any sane model.  This is because `Red` wins 59% overall compared to `Blue's` 41%.\n\nI think that trying to minimize losses is the best you can try to do in this type of situation.  But I haven't taken a look at the submissions yet so let's see!","3db088e1":"# Iterate the submissions and see how everyone did!"}}