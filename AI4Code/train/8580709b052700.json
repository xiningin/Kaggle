{"cell_type":{"dad3766d":"code","768e8ca1":"code","0901dd39":"code","ecbebdfc":"code","1ece0799":"code","18f1c604":"code","241c102e":"code","4553cf43":"code","017b6b6d":"code","38008121":"code","233b29f3":"markdown"},"source":{"dad3766d":"## Digit Recognizer with tensorflow\n## import required packages\nimport tensorflow\ntensorflow.__version__\n\nimport pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport cv2\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline\n\n\n#------------------------------------------------------------------------------\n#                       Step 1: Load Data                                              \n#--------------------------------------------------------------------------\n## Load data\ntrain=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\n\n## check train data\ntrain.info()\ntrain.head()\n## Check train data\ntest.info()","768e8ca1":"### check unique labels\n####### train #############\nX_train=train.drop('label', axis=1)\ny_train=train[['label']]\n\ny_train.value_counts(normalize=True)\ny_train.value_counts().plot(kind='bar')","0901dd39":"#------------------------------------------------------------------------------\n#                       Step 2: Preprocess Data                              \n#------------------------------------------------------------------------------\n## 2.1 :  Reshape\n##Sequential model in tensorflow.keras expects data to be in the format (n_e, n_h, n_w, n_c)\n## where n_e= number of examples, n_h = height, n_w = width, n_c = number of channels\nX_train_reshape= X_train.values.reshape(-1, 28, 28, 1)\nX_test_reshape= test.values.reshape(-1, 28, 28, 1)\n\n## 2.2 Normalize data images\n\n##1. Must Normalize images for neural network\n##2.we can achieve this by dividing the RGB codes with 255 (which is the maximum RGB code minus the minimum RGB code)\n##3. normalize X_train and X_test\n##4. make sure that the values are float so that we can get decimal points after division\nX_train_norm = X_train_reshape.astype('float32')\nX_test_norm = X_test_reshape.astype('float32')\nX_train_norm \/= 255\nX_test_norm \/= 255\n## Checking shape of images\nprint(\"X_train shape:\", X_train.shape)\nprint(\"Images in X_train:\", X_train_norm.shape)\nprint(\"Images in X_test:\", X_test_norm.shape[0])\nprint(\"Max value in X_train:\", X_train_norm.max())\nprint(\"Min value in X_train:\", X_train_norm.min())\n\n### check images\nplt.figure(5, figsize=(10,10))\nfor i in range(0,5):\n    plt.subplot(1,5,i+1)\n    plt.imshow(X_train_reshape[i], cmap='gray')\n    plt.xlabel(y_train['label'][i])\n    \n## 2.3 One hot encoding for class vector\n##convert class vectors (integers) to binary class matrix\n##convert y_train \n##number of classes: length of unique values of class vector\n##due to multiclass classification we will be using categorical_crossentropy as loss\nclasses= y_train['label'].unique()\n\ny_train_cat = to_categorical(y_train['label'], num_classes=len(classes))\n\nprint(\"Shape of y_train:\", y_train_cat.shape)\nprint(\"original value of y_train:\", y_train['label'][0])\nprint(\"One value of y_train:\", y_train_cat[0])","ecbebdfc":"#------------------------------------------------------------------------------\n#                       3 Build Model                             \n#------------------------------------------------------------------------------\nx_train, x_test, y_train, y_test= train_test_split(X_train_norm,y_train_cat, test_size=0.2,stratify=y_train_cat)\n\n## 3.1 Define model : Architecture of the model\nfrom keras import models, layers,optimizers\n\nmodel=models.Sequential()\nmodel.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)))\n## output shape : 28-3+1 = 26, 26 x26 images size with 32 channels\/filters\n## Learnable Parameters =((width of Filter X height of Filter X depth of Filter + 1) X Number of Filters) \n## calculate learnable parameters : (3*3*1+1)*32= 320 # note : here depth is 1 as image is grayscale and +1 is for bias parameter\nmodel.add(layers.Flatten()) ## output shape : 26*26*32\n# Add Fully Connected Layer with 128 units and activation function as 'relu'\nmodel.add(layers.Dense(10, activation=\"softmax\"))\nmodel.summary()","1ece0799":"## 3.2 Compile model\nfrom keras import optimizers\n\n# model.compile(loss =\"categorical_crossentropy\", optimizer=optimizers.Adam(lr=0.001),\n# metrics =['accuracy'])\n# callback = callbacks.EarlyStopping(monitor='loss', patience=3,restore_best_weights=True)  \n# model.fit(x=x_train,y=y_train,batch_size=32, epochs = 20,validation_data = (x_test,y_test))\nmodel.compile(loss =\"categorical_crossentropy\", optimizer = \"adam\",\nmetrics =['accuracy'])\n  \nmodel.fit(x=x_train,y=y_train,batch_size=32, epochs = 10,validation_data = (x_test,y_test))","18f1c604":"model.evaluate(x_test, y_test)","241c102e":"## 3.2 Visulizing the output of conv layer with example of train image\nfrom keras import models\nlayers_output=[]\nlayers_output=[layer.output for layer in model.layers[:3]]\nactivation_model= models.Model(inputs=model.input, outputs=layers_output)\nimg_tensor = np.expand_dims(x_train[0], axis = 0)\nactivations = activation_model.predict(img_tensor)","4553cf43":"# Getting Activations of first layer\n## lets check the output from first convolution layer\nfirst_layer_activation = activations[0]\n# shape of first layer activation\/\nprint(first_layer_activation.shape)\n\n# 6th channel of the image after first layer of convolution is applied\nplt.figure(36, figsize=(7,7))\nfor i in range(0,32):\n    plt.subplot(6,6,i+1)\n    plt.imshow(first_layer_activation[0, :, :, i], cmap ='gray')","017b6b6d":"# predict results\nresults = model.predict(X_test_norm)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")\n\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"mnist_cnn_v2.csv\",index=False)","38008121":"\n#### validation : Lets check how model is performing on test data\n\nplt.figure(5, figsize=(10,10))\nfor i in range(15,19):\n    plt.subplot(15,5,i+1)\n    plt.imshow(X_test_norm[i], cmap='gray')\n    plt.xlabel(results[i])","233b29f3":"Here train Data has 42000 image details and test data has 28000 images\nEach row represents one label\/digit. Image\/pixel information is avaiable in columns.\nAnd each pixel value is in integer from 0-255"}}