{"cell_type":{"605ad134":"code","849e3125":"code","a96c0a2a":"code","1bfd6383":"code","6e2c693d":"code","d18d9010":"code","60cd48b0":"code","bfcf3a68":"code","3d36e5f2":"code","4e5a4ac3":"code","633a0970":"code","48da0973":"code","07d77cd4":"code","041b1b9a":"code","748a7e8d":"code","d56569f8":"code","0ea039de":"code","f06a8c64":"code","abb862a5":"code","0aa5d892":"code","422271a3":"code","0575ccb4":"code","78f17a87":"code","cca36d83":"code","f011e595":"code","a0cd8400":"code","d9db806f":"code","7c283698":"code","54850dac":"code","0c667eb4":"code","78078f5c":"code","9205eea0":"markdown","2122f1a5":"markdown","3ef810fa":"markdown","f96166b4":"markdown","31bce1d2":"markdown","c61a997b":"markdown","1eeb8f00":"markdown","ade2bd63":"markdown","3ad07366":"markdown","b9f04ab6":"markdown","06ddc9cc":"markdown","d4500642":"markdown","3b8ad43f":"markdown","1037d069":"markdown"},"source":{"605ad134":"import numpy as np \nimport pandas as pd \nimport seaborn as sns \nimport random\nfrom scipy import sparse\nfrom scipy.sparse import csr_matrix\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\n\nfrom datetime import datetime\nfrom sklearn.decomposition import TruncatedSVD","849e3125":"df=pd.read_csv('\/kaggle\/input\/amazon-ratings\/ratings_Beauty.csv')\nprint('Shape: ',df.shape)\ndf.head()","a96c0a2a":"duplicates = df.duplicated([\"UserId\",\"ProductId\", \"Rating\", \"Timestamp\"]).sum()\nprint(' Duplicate records: ',duplicates)","1bfd6383":"print('unique users:',len(df.UserId.unique()))\nprint('unique products:',len(df.ProductId.unique()))\nprint(\"total ratings: \",df.shape[0])","6e2c693d":"df.isnull().any()","d18d9010":"products_user= df.groupby(by = \"UserId\")[\"Rating\"].count().sort_values(ascending =False)\nproducts_user.head()","60cd48b0":"product_rated = df.groupby(by = \"ProductId\")[\"Rating\"].count().sort_values(ascending = False)\nproduct_rated.head()\n\n","bfcf3a68":"rated_users=df.groupby(\"UserId\")[\"ProductId\"].count().sort_values(ascending=False)\nprint(rated_users)","3d36e5f2":"print('Number of users rated atleast 5 prodcuts:',rated_users[rated_users>=5].count())\nprint('Number of users rated atleast 4 prodcuts:',rated_users[rated_users>=4].count())\nprint('Number of users rated atleast 3 prodcuts:',rated_users[rated_users>=3].count())\nprint('Number of users rated atleast 2 prodcuts:',rated_users[rated_users>=2].count())\n","4e5a4ac3":"users=list(rated_users[:rated_users[rated_users>=5].count()].index)\ndf=df[df['UserId'].isin(users)]\n","633a0970":"rated_products=df.groupby(\"ProductId\")[\"UserId\"].count().sort_values(ascending=False)\n\nplt.scatter(x=df.Rating[:20], y=df.ProductId[:20])\nplt.xlabel('Rating')\n# Set the y axis label of the current axis.\nplt.ylabel('Product ID')\n\nplt.show()\n\nplt.scatter(x=df.Rating[:20], y=df.UserId[:20])\nplt.xlabel('Rating')\n# Set the y axis label of the current axis.\nplt.ylabel('User ID')\n\nplt.show()","48da0973":"print('Number of products with minimum of 5 reviews\/ratings:',rated_products[rated_products>5].count())\nprint('Number of products with minimum of 4 reviews\/ratings:',rated_products[rated_products>4].count())\nprint('Number of products with minimum of 3 reviews\/ratings:',rated_products[rated_products>3].count())\nprint('Number of products with minimum of 2 reviews\/ratings:',rated_products[rated_products>2].count())\nprint('Number of products with minimum of 1 reviews\/ratings:',rated_products[rated_products>1].count())\n","07d77cd4":"products=list(rated_products[:rated_products[rated_products>5].count()].index)\ndf=df[df['ProductId'].isin(products)]\nproducts[:5]\n","041b1b9a":"u_v=df[\"UserId\"].values\nn_v=[]\nfor i in tqdm(range(df.shape[0])):\n    n_v.append(users.index(u_v[i])+1)\ndf[\"UserId\"]=n_v\n","748a7e8d":"b_set = set(n_v)\nnumber_of_unique_values = len(b_set)\nprint(number_of_unique_values)\nprint(len(df['UserId'].unique()))\n","d56569f8":"p_v=df[\"ProductId\"].values\nn_v=[]\n\nfor i in tqdm(range(df.shape[0])):\n    n_v.append(products.index(p_v[i])+1)\ndf[\"ProductId\"]=n_v","0ea039de":"matrix_user = csr_matrix((df.Rating.values, (df.UserId.values,df.ProductId.values)))\nstart = datetime.now()\nu_svd = TruncatedSVD(n_components=50, algorithm='randomized', random_state=21)\nt_svd = u_svd.fit_transform(matrix_user)\nt_svd.shape","f06a8c64":"sparse_prod = csr_matrix((df.Rating.values, (df.ProductId.values,df.UserId.values)))\nproduct_svd = TruncatedSVD(n_components=50, algorithm='randomized', random_state=21)\ntrunc_prod = product_svd.fit_transform(sparse_prod)\nsparse_prod.shape","abb862a5":"user=df[df[\"UserId\"]==df[\"UserId\"].iloc[4]][\"Rating\"].mean()\nuser","0aa5d892":"useravg=[]\nproductavg=[]\n\nfor i in tqdm(range(df.shape[0])):\n    us=df[df[\"UserId\"]==df[\"UserId\"].iloc[i]][\"Rating\"].mean()\n    ps=df[df[\"ProductId\"]==df[\"ProductId\"].iloc[i]][\"Rating\"].mean()\n    useravg.append(us)\n    productavg.append(ps)\n\ndf[\"user\"]=useravg\ndf[\"prod\"]=productavg\ndf['gavg']=df[\"Rating\"].mean()\ndf=df.sort_values(by=['Timestamp'])\ndf.head()\n    ","422271a3":"df=df.sort_values(by=['Timestamp'])\ndf.head()","0575ccb4":"training=df[:int(df.shape[0]**0.8)]\ntesting=df[int(df.shape[0]**0.8):]","78f17a87":"def data_generator(up_data):\n    samp = random.sample(range(0,up_data.shape[0]),10000)\n    for j in range(0,len(samp)-32,32):\n        m=samp[j:j+32]\n        X=[]\n        Y=[]\n        for i in m: \n            x=[]\n            r_s_t=[3]*5\n            t=np.dot(t_svd[up_data[\"UserId\"].iloc[i]-1],t_svd.T)\/(np.linalg.norm(t_svd.T))\n            sim_users = list(np.flipud(np.argsort(t)))\n            c=0\n            pr_d=up_data[up_data[\"ProductId\"]==up_data[\"ProductId\"].iloc[i]]\n            pr_fd=pr_d[pr_d[\"UserId\"].isin(sim_users)]\n            ind=[]\n            for j in pr_fd[\"UserId\"].values:\n                ind.append(sim_users.index(j))\n            ind.sort()\n            for k in range(len(ind)):\n                r_s_t[k]=int(pr_fd[pr_fd[\"UserId\"]==sim_users[ind[k]]][\"Rating\"])\n                c+=1\n                if c==5:\n                    break\n            x.extend(r_s_t)\n            r_s_t=[3]*5\n            y1=np.dot(trunc_prod[up_data[\"ProductId\"].iloc[i]-1],trunc_prod.T)\/(np.linalg.norm(trunc_prod.T))\n            sim_prods = list(np.flipud(np.argsort(y1)))\n            c=0\n            us_d=up_data[up_data[\"UserId\"]==up_data[\"UserId\"].iloc[i]]\n            us_fd=us_d[us_d[\"ProductId\"].isin(sim_prods)]\n            ind=[]\n            for j in us_fd[\"ProductId\"].values:\n                ind.append(sim_prods.index(j))\n            ind.sort()\n    \n            for k in range(len(ind)):\n                r_s_t[k]=int(us_fd[us_fd[\"ProductId\"]==sim_prods[ind[k]]][\"Rating\"])\n                c+=1\n                if c==5:\n                    break\n            x.extend(r_s_t)\n            x.extend([up_data['user'].iloc[i],up_data['prod'].iloc[i],up_data['gavg'].iloc[i]])\n            X.append(x)\n            Y.append(up_data[\"Rating\"].iloc[i])\n     \n        yield np.array(X).reshape(32,1,13),np.array(Y)\n        ","cca36d83":"def test_data_generator(up_data):\n    samp = random.sample(range(0,up_data.shape[0]),5000)\n    for j in range(0,len(samp)-32,32):\n        m=samp[j:j+32]\n        X=[]\n        Y=[]\n        for i in m: \n            x=[]\n            r_s_t=[3]*5\n            t=np.dot(t_svd[up_data[\"UserId\"].iloc[i]-1],t_svd.T)\/(np.linalg.norm(t_svd.T))\n            sim_users = list(np.flipud(np.argsort(t)))\n            c=0\n            pr_d=up_data[up_data[\"ProductId\"]==up_data[\"ProductId\"].iloc[i]]\n            pr_fd=pr_d[pr_d[\"UserId\"].isin(sim_users)]\n            ind=[]\n            for j in pr_fd[\"UserId\"].values:\n                ind.append(sim_users.index(j))\n            ind.sort()\n            for k in range(len(ind)):\n                r_s_t[k]=int(pr_fd[pr_fd[\"UserId\"]==sim_users[ind[k]]][\"Rating\"])\n                c+=1\n                if c==5:\n                    break\n            x.extend(r_s_t)\n            r_s_t=[3]*5\n            y1=np.dot(trunc_prod[up_data[\"ProductId\"].iloc[i]-1],trunc_prod.T)\/(np.linalg.norm(trunc_prod.T))\n            sim_prods = list(np.flipud(np.argsort(y1)))\n            c=0\n            us_d=up_data[up_data[\"UserId\"]==up_data[\"UserId\"].iloc[i]]\n            us_fd=us_d[us_d[\"ProductId\"].isin(sim_prods)]\n            ind=[]\n            for j in us_fd[\"ProductId\"].values:\n                ind.append(sim_prods.index(j))\n            ind.sort()\n    \n            for k in range(len(ind)):\n                r_s_t[k]=int(us_fd[us_fd[\"ProductId\"]==sim_prods[ind[k]]][\"Rating\"])\n                c+=1\n                if c==5:\n                    break\n            x.extend(r_s_t)\n            x.extend([up_data['user'].iloc[i],up_data['prod'].iloc[i],up_data['gavg'].iloc[i]])\n            X.append(x)\n            Y.append(up_data[\"Rating\"].iloc[i])\n     \n        yield np.array(X).reshape(32,1,13),np.array(Y)\n        ","f011e595":"train_gen=data_generator(training)\ntest_gen=test_data_generator(testing)","a0cd8400":"from tensorflow.keras import layers\nimport tensorflow as tf\ntf.keras.backend.clear_session()  \n\ndef create_func_model():\n    inputs = tf.keras.Input(shape=(1,13))\n    \n    o2=tf.keras.layers.LSTM(16,return_sequences=True, return_state=True)(inputs)\n    o3=tf.keras.layers.LSTM(16)(o2)\n    o4 = layers.Dense(32, activation='relu')(o3)\n    outputs = layers.Dense(1)(o4)\n\n    model_func = tf.keras.Model(inputs, outputs, name='model_func')\n\n  \n    model_func.compile(optimizer='adam',\n              loss='mean_squared_error')\n    return model_func","d9db806f":"model=create_func_model()\nmodel.summary()","7c283698":"for epoch in range(5):\n    print('Epoch ------------> ',epoch+1)\n    train_gen=data_generator(training)\n    test_gen=test_data_generator(testing)\n    model.fit_generator(train_gen,steps_per_epoch=10000 \/\/ 32,\n        epochs=1  ,validation_data=test_gen,\n        validation_steps=5000\/\/32)","54850dac":"model.load_weights(\"..\/input\/dataset1\/reccom-model (1) (1).h5\")\n","0c667eb4":"def prediction(userid):\n    x1=users.index(userid)+1\n    X2=random.sample(range(1,15000),100)\n    X=[]\n    rec_prods=[]\n    for x2 in X2:\n        x=[]\n        r_s_t=[3]*5\n        t=np.dot(t_svd[x1-1],t_svd.T)\/(np.linalg.norm(t_svd.T))\n        sim_users = list(np.flipud(np.argsort(t)))\n        c=0\n        pr_d=df[df[\"ProductId\"]==x2]\n        pr_fd=pr_d[pr_d[\"UserId\"].isin(sim_users)]\n        ind=[]\n        for j in pr_fd[\"UserId\"].values:\n            ind.append(sim_users.index(j))\n        ind.sort()\n        for k in range(len(ind)):\n            r_s_t[k]=int(pr_fd[pr_fd[\"UserId\"]==sim_users[ind[k]]][\"Rating\"])\n            c+=1\n            if c==5:\n                break\n        x.extend(r_s_t)\n        r_s_t=[3]*5\n        y1=np.dot(trunc_prod[x2-1],trunc_prod.T)\/(np.linalg.norm(trunc_prod.T))\n        sim_prods = list(np.flipud(np.argsort(y1)))\n        c=0\n        us_d=df[df[\"UserId\"]==x1]\n        us_fd=us_d[us_d[\"ProductId\"].isin(sim_prods)]\n        ind=[]\n        for j in us_fd[\"ProductId\"].values:\n            ind.append(sim_prods.index(j))\n        ind.sort()\n    \n        for k in range(len(ind)):\n            r_s_t[k]=int(us_fd[us_fd[\"ProductId\"]==sim_prods[ind[k]]][\"Rating\"])\n            c+=1\n            if c==5:\n                break\n        x.extend(r_s_t)\n        us=df[df[\"UserId\"]==x1][\"Rating\"].mean()\n        ps=df[df[\"ProductId\"]==x2][\"Rating\"].mean()\n        x.extend([us,ps,df['gavg'].iloc[0]])\n        X.append(x)\n        rec_prods.append(x2)\n    y_pred=model.predict(np.array(X).reshape(100,1,13))\n    r_prods=list(np.flipud(np.argsort(np.array(y_pred.reshape(-1)))))\n    for i in range(10):\n        print(products[rec_prods[r_prods[i]]-1])\n","78078f5c":"prediction('A3KEZLJ59C1JVH') #Enter the UserID","9205eea0":"### -> Truncated SVD","2122f1a5":"# ### -> Analysing the number of rated products per user:","3ef810fa":"# Recommendation System","f96166b4":"### ->Analysing the Rating number per product:","31bce1d2":"### -> Splitting the data","c61a997b":"## Data Analysis","1eeb8f00":"## Model building:","ade2bd63":"### -> Creating features","3ad07366":"### ->Identifying Duplicates in data","b9f04ab6":"### ->sorting the data w.r.t TimeStamp","06ddc9cc":"## Data Visualizing and Cleaning","d4500642":"### ->Checking for Nan values","3b8ad43f":"### -> Train and test Data Generators","1037d069":"### ->Unique features"}}