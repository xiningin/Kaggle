{"cell_type":{"e0564f8e":"code","7f84c1f0":"code","e2592ccc":"code","f25f0836":"code","9886c3f5":"code","7645869c":"code","c5f6c36b":"code","e2372c33":"code","7b59cc68":"code","c52aed68":"code","0fde548e":"code","c6b72c17":"code","0ac8e1c6":"code","f00d83f2":"code","13af7d86":"code","b70741de":"code","bf9ff756":"code","02524ad7":"code","a8a63ee1":"code","ae2bf7eb":"code","a16428c2":"code","e275d773":"code","1491e23e":"code","cb828af9":"code","8ce253af":"code","35117cd5":"code","47ae784c":"code","da55c60b":"code","070d4e1a":"code","5223c1d9":"code","0e2c1456":"code","8b7fcbde":"code","b3c2133c":"code","719747f9":"code","2565de67":"code","89589dc9":"code","ea8be935":"code","b174f94d":"code","272cdd2e":"code","3e7c2604":"code","7bcd3a00":"code","54d40dfd":"markdown","438894d5":"markdown","d092a35e":"markdown","66e1cf1a":"markdown","e3dd808e":"markdown","99c799b5":"markdown","3a79d761":"markdown","30e2b098":"markdown","4366a145":"markdown","1161c79a":"markdown","9ac273c8":"markdown","17a8bee8":"markdown","0c3b12b6":"markdown","2338df41":"markdown","3c407df4":"markdown","f0419e90":"markdown","19077dca":"markdown","32fe3439":"markdown","cf13655f":"markdown","af8c0fc3":"markdown","62c41e18":"markdown","eedbcbf4":"markdown","3024678e":"markdown","d462bdd7":"markdown","541bdc6b":"markdown","0dcb91c7":"markdown","95c069e6":"markdown","a6637def":"markdown","0252432e":"markdown"},"source":{"e0564f8e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data visulation\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7f84c1f0":"data = pd.read_csv(\"..\/input\/pokemon.csv\") # read data","e2592ccc":"# info gives data type like dataframe, number of sample or row, number of feature or column, feature types and memory usage\ndata.info()","f25f0836":"# columns gives column names of features\ndata.columns","9886c3f5":"# shape gives number of rows and columns in a tuble\ndata.shape","7645869c":"# head shows first 5 rows\ndata.head()","c5f6c36b":"# tail shows last 5 rows\ndata.tail()","e2372c33":"data.corr()","7b59cc68":"data.describe()","c52aed68":"print(data['Type 2'].value_counts(dropna =False))","0fde548e":"data[\"Type 1\"].unique()","c6b72c17":"data[\"Type 1\"] == \"Dragon\" # We can filter the data if we want \ndata[data[\"Type 1\"] == \"Dragon\"]","0ac8e1c6":"x = (data.Speed > 140) & (data.Attack >80) # We can use & or | \ndata[x]","f00d83f2":"a = data.Legendary == True # filter the booleans(\"True\",\"False\")\ndata[a]","13af7d86":"f,(ax1,ax2) = plt.subplots(2,1,figsize= (15,15),sharex=True)\ndata.Attack.plot(kind=\"line\",color=\"red\",label=\"Attack\",grid=True,linewidth=1,ax=ax1)\nax1.set_ylabel(\"Attack\")\nax1.legend()\nax1.set_title(\"Attack Graphic\")\n\ndata[\"Sp. Atk\"].plot(kind = \"line\",color=\"blue\",label=\"Sp. Atk\",grid=True,linestyle=\":\",ax=ax2)\nax2.set_title(\"Sp. Atk Graphic\")\nplt.xlabel(\"Pokemons\")\nplt.ylabel(\"Sp. Atk\")\nax2.legend()\nplt.show()","b70741de":"figure = plt.subplots(1,figsize=(15,15))\n\nplt.subplot(211)\nplt.bar(data[\"Type 1\"],data.Speed,label=\"Speed\",color=\"green\",width=.7)\nplt.xlabel(\"Pokemon's Type\")\nplt.ylabel(\"Pokemon's Speed\")\nplt.title(\"Speed Bars\")\nplt.legend()\n\nplt.subplot(212)\nplt.bar(data[\"Type 1\"],data.HP,label=\"HP\",color=\"red\",width=.7)\nplt.xlabel(\"Pokemon's Type\")\nplt.ylabel(\"Pokemon's HP\")\nplt.title(\"HP Bars\")\nplt.legend()\nplt.show()\n","bf9ff756":"plt.subplots(figsize=(10,5))\nplt.scatter(data[\"Sp. Atk\"],data[\"Sp. Def\"],color=(\"blue\",\"red\"))\nplt.xlabel(\"Sp. Atk\")\nplt.ylabel(\"Sp. Def\")\nplt.legend()\nplt.show()","02524ad7":"plt.subplots(figsize=(15,12))\nplt.subplot(211)\nplt.hist(data.Speed,color=\"orange\",bins=20,histtype=\"bar\",orientation=\"horizontal\") # Horizontal Histogram\nplt.xlabel(\"Frequency\")\nplt.ylabel(\"Speed\")\nplt.title(\"Horizontal Histogram\")\n\nplt.subplot(212)\nplt.hist(data.Speed,color=\"blue\",bins=20,histtype=\"bar\",orientation=\"vertical\") # vertical Histogram\nplt.xlabel(\"Speed\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Vertical Histogram\")\nplt.show()\n","a8a63ee1":"# For example: compare attack of pokemons that their Type\n# Black line at top is max\n# Blue line at top is 75%\n# Red line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# black circles are outliers\nf,ax=plt.subplots(1,1,figsize=(15,8))\ndata.boxplot(column=\"Defense\",by=\"Type 1\",ax=ax)\nplt.show()","ae2bf7eb":"mean_attack = sum(data.Attack)\/len(data.Attack)\nmean_attack\ndata[\"sum_attack\"]=[\"high\" if i>mean_attack else \"low\" for i in data.Attack]\ndata.loc[:10,(\"sum_attack\",\"Attack\")]","a16428c2":"mean_defense = sum(data.Defense)\/len(data.Defense)\nmean_defense\ndata[\"sum_defense\"]=[\"high\" if i>mean_defense else \"low\" for i in data.Defense]\ndata.loc[:10,(\"sum_defense\",\"Defense\")]","e275d773":"def summation(x,y,z):\n    \"\"\"return summation of 3 numbers\"\"\"\n    total =x+y+z\n    return total\n     \nsummation(1,5,7)","1491e23e":"import random\n\ndef summation():\n    def rand():\n        x = random.randint(1,101)\n        y = random.randint(1,101)\n        z = random.randint(1,101)\n        print(\"random numbers:\",x,y,z)\n        return x,y,z\n    summ = 0\n    for i in rand():\n        summ = summ +i\n    return summ\n\nprint(\"\")\nprint(summation())\n","cb828af9":"# default arguments\ndef summation(x,y,z=5):# z is a default argument but you can define it\n    return x+y+z\n\nprint(summation(2,7))\nprint(\"\")\nprint(summation(2,7,2))","8ce253af":"# flexible arguments *args\ndef f(*args):\n    \"\"\"print number in args\"\"\"\n    for i in args:\n        print(i)\n        \nf(7)\nprint(\"\")\nf(2,7,5,6,5)\n\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():\n        print(key, \" \", value)\nf(name1 = 'matthew', age1 = 26, name2 = 'charles', age2 = 14)","35117cd5":"summation = lambda x,y,z: x+y+z\nprint(summation(1,7,8))\n\nsquare = lambda x: x*x\nprint(square(7))","47ae784c":"number_list = [5,8,9,2,3]\ny = map(lambda x: x+5, number_list)\nprint(list(y))","da55c60b":"data1 = data.head()\ndata1\nmelted = pd.melt(data1,id_vars=[\"Name\"],value_vars=[\"Attack\",\"Defense\"])\nmelted","070d4e1a":"melted.pivot(index=\"Name\",columns=\"variable\",values=\"value\")","5223c1d9":"data2 = data.head()\ndata3 = data.tail()\n\nconcDataV = pd.concat([data2,data3],axis=0,ignore_index=True) # vertical\nconcDataV","0e2c1456":"df1 = data.HP.head(10)\ndf2 = data.Speed.head(10)\ndf3 = data.Attack.head(10)\nconc_data_h = pd.concat([df1,df2,df3],axis=1) # horizontal\nconc_data_h","8b7fcbde":"# data frames from dictionary\nemployee = [\"Charles\",\"Matthew\",\"Mike\"]\nsalary = [100,150,150]\nlist_label = [\"employee\",\"salary\"]\nlist_col = [employee,salary]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped) \ndf = pd.DataFrame(data_dict,index = [1,2,3]) # we can set index\ndf","b3c2133c":"# add new columns\ndf[\"workingHours\"] = [5,7,6]\ndf","719747f9":"# Broadcasting\ndf[\"Test\"] = 0   #Broadcasting entire column\ndf","2565de67":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","89589dc9":"# In order to practice lets take head of pokemon data and add it a time list\ndata2 = data.head().copy()\ndate_list = [\"2002-06-15\",\"2002-06-21\",\"2002-07-15\",\"2003-08-12\",\"2003-09-15\"] # we create our time list\ndate_timeobject = pd.to_datetime(date_list)\n\ndata2[\"date\"] = date_timeobject # lets set date as index\ndata2 = data2.set_index(\"date\")\ndata2","ea8be935":"print(data2.loc[\"2002-06-15\"])\nprint(\"-\"*80)\nprint(data2.loc[\"2002-06-15\":\"2002-07-15\"])","b174f94d":"# Lets resample with year\ndata2.resample(\"A\").mean() # we can use other functions as min(),sum()","272cdd2e":"# Lets resample with month\ndata2.resample(\"M\").mean()\n# As you can see there are a lot of nan because data2 does not include all months","3e7c2604":"# We can interpolete from first value\ndata2.resample(\"M\").first().interpolate(\"linear\")","7bcd3a00":"# Or we can interpolate with mean()\ndata2.resample(\"M\").mean().interpolate(\"linear\")","54d40dfd":"**horizontal**","438894d5":"<font size=\"4\">Indexing Pandas Time Series<\/font>","d092a35e":"<font size=\"5\">List Comprehension<\/font>","66e1cf1a":"<font size=\"6\">Pandas Foundation<\/font>","e3dd808e":"<font size=\"3\">1.Line Plot<\/font>","99c799b5":"<font size=\"3\">2.Bar Plot<\/font>","3a79d761":"<font size=\"4\">concat() Function<\/font>","30e2b098":"<font size=\"4\">melt() Function<\/font>","4366a145":"* single column = series\n* NaN = not a number\n* dataframe.values = numpy","1161c79a":"<font size=\"4\">Anonymous Function<\/font>\n","9ac273c8":"<font size=\"4\">User Defined Function<\/font>","17a8bee8":"<font size=\"3\">4.Histogram Plot<\/font>","0c3b12b6":"<font size=\"3\">3.Scatter Plot<\/font>","2338df41":"<font size=\"5\">Filtering Data<\/font>","3c407df4":"<font size=\"5\">Functions<\/font>","f0419e90":"<font size=\"4\">Review of Pandas<\/font>","19077dca":"<font size=\"4\">Nested Function(function inside function)<\/font>","32fe3439":"<font size=\"4\">Building Data Frames From Scratch<\/font>","cf13655f":"* Resampling: statistical method over different time intervals\n     * Needs string to specify frequency like \"M\" = month or \"A\" = year\n* Downsampling: reduce date time rows to slower frequency like from daily to weekly\n* Upsampling: increase date time rows to faster frequency like from daily to hourly\n* Interpolate: Interpolate values according to different methods like \u2018linear\u2019, \u2018time\u2019 or index\u2019\n    * https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.interpolate.html","af8c0fc3":"<font size=\"5\">Plots<\/font>\n1. Line Plot\n2. Bar Plot\n3. Scatter Plot\n4. Histogram\n5. Subplots\n6. Box Plot","62c41e18":"* datetime = object\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","eedbcbf4":"**Vertical**","3024678e":"<font size=\"4\">Resampling Pandas Time Series<\/font>","d462bdd7":"<font size=\"3\">6.Box Plot<\/font>","541bdc6b":"* We can build data frames from csv as we did earlier.\n* Also we can build dataframe from dictionaries\n* zip() method: This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.\n* Adding new column\n* Broadcasting: Create new column and assign a value to entire column","0dcb91c7":"Like lambda function but it can take more than one arguments.","95c069e6":"<font size=\"4\">pivot() Function<\/font>","a6637def":"<font size=\"4\">Default and Flexible Arguments<\/font>","0252432e":"<font size=\"4\">Lambda Function<\/font>"}}