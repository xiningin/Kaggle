{"cell_type":{"a0b87dce":"code","af8fc858":"code","b8e9d3d8":"code","235569c5":"code","9c5b1c79":"code","da0383d4":"code","758c171d":"code","b3ad0944":"code","5ebd1f53":"markdown"},"source":{"a0b87dce":"from kaggle_environments.envs.halite.helpers import ShipAction, ShipyardAction, Board, Point, board_agent, Cell\nfrom kaggle_environments import make, evaluate\n\nimport json\nimport glob\nimport time\n\nimport numpy as np\nimport random\nimport pickle\nimport math","af8fc858":"SHIP_ACTION_SPACE_SIZE = 6\nSHIPYARD_ACTION_SPACE_SIZE = 2\n\n\nwith open('..\/input\/base-dictionary\/base_dict.pickle', 'rb') as handle:\n    neighbours_dict = pickle.load(handle)","b8e9d3d8":"#get all files from scrapped dataset\nfiles = glob.glob('..\/input\/halite-game-scraper\/*[0-9].*')","235569c5":"def get_all_ship_positions(board, ship_pos):\n    \"\"\"\n    returns ship and opposite ship indicators, nearest one to the input position first\n    ship indicated by 1 and opposite ship by -1\n    \"\"\"\n    neighbours = neighbours_dict[ship_pos]\n    me_ships = board.current_player.ships\n        \n    ship_positions = []\n    for pos in neighbours:\n        ship_positions.append(1 if pos in me_ships else 0)    \n    \n    opp_ship_posn = []\n    for pos in neighbours:\n        posn = []\n        for opponent in range(len(board.opponents)):\n            for ship in board.opponents[opponent].ships:\n                posn.append(ship.position)\n        opp_ship_posn.append(-1 if pos in posn else 0)\n            \n    ship_positions = np.array(ship_positions) + np.array(opp_ship_posn)\n        \n    return np.array(ship_positions).reshape(22,22,1)\n    \ndef get_all_shipyard_positions(board, ship_pos):        \n    \"\"\"\n    returns shipyard and opposite shipyard indicators, nearest one to the input position first\n    shipyard indicated by 1 and opposite shipyard by -1\n    \"\"\"\n        \n    neighbours = neighbours_dict[ship_pos]\n    me_shipyards = board.current_player.shipyards\n        \n    shipyard_positions = []\n    for pos in neighbours:\n        shipyard_positions.append(1 if pos in me_shipyards else 0)\n        \n    opp_shipyard_posn = []\n    for pos in neighbours:\n        posn = []\n        for opponent in range(len(board.opponents)):\n            for shipyard in board.opponents[opponent].shipyards:\n                posn.append(shipyard.position)\n        opp_shipyard_posn.append(-1 if pos in posn else 0)\n    shipyard_positions = np.array(shipyard_positions) + np.array(opp_shipyard_posn)\n        \n    return np.array(shipyard_positions).reshape(22,22,1)\n    \n    \ndef get_all_halites(board, ship_pos):\n    \"\"\"\n    get halites from each cell, nearest cell halite becomes the initial cell values in the array\n    \"\"\"\n    neighbours = neighbours_dict[ship_pos]\n    current_halites = np.array([board[pos].halite if board[pos].halite<=0 else math.log10(board[pos].halite)  for pos in neighbours])\n    return current_halites.reshape(22,22,1)","9c5b1c79":"def get_direction(current_pos, next_pos, shipyard_pos):\n    \"\"\"\n    get the action of ship wrt current position and previous position\n    \"\"\"\n    x, y = current_pos\n    x1, y1 = next_pos\n    shipyard_x1, shipyard_y1 = shipyard_pos\n    if((x==x1) & (y==y1)):\n        #action = None\n        return 0\n    elif((x==shipyard_x1) & (y==shipyard_y1)):\n        return 1\n    elif (y < y1):\n        #action = ShipAction.NORTH\n        return 2\n    elif (y > y1):\n        #action = ShipAction.SOUTH\n        return 3\n    elif (x < x1):\n        #action = ShipAction.WEST\n        return 4\n    elif (x > x1):\n        #action = ShipAction.EAST\n        return 5","da0383d4":"def get_end_margin(data, config):\n    \"\"\"\n    calculate the difference in rewards between me and top opponent\n    \"\"\"\n    #get the last step information\n    len_data = len(data[\"steps\"])\n    step_info = data[\"steps\"][len_data-1][0]\n    step_obs = step_info[\"observation\"]\n    board = Board(step_obs, config)\n                   \n    #get the difference between opponent toper and current player in the last step\n    top_opp_halites = max([ i.halite for i in board.opponents])\n    me_halites = board.current_player.halite\n    end_margin = me_halites - top_opp_halites \n    return end_margin\n\n#def get_input_data(board, step_rewards):\ndef get_input_data(data, board, config, len_steps, next_step_number, step_rewards):\n    me = board.current_player\n    current_state_ship = []\n    current_state_shipyard = []\n    Q_values = []\n    ship_actions = []\n    shipyard_actions = []\n    \n    #next step board\n    step_info = data[\"steps\"][next_step_number][0]\n    step_obs = step_info[\"observation\"]\n    next_step_board = Board(step_obs, config)\n    \n    for ship in me.ships:\n        rewards_arr = np.zeros(SHIP_ACTION_SPACE_SIZE) # array for rewards and Q values\n        halites = get_all_halites(board, ship.position) # get halite matrix 22*22\n        ship_positions = get_all_ship_positions(board, ship.position) # get ship position matrix 22*22\n        shipyard_positions = get_all_shipyard_positions(board, ship.position) #get shipyard position matrix 22*22\n        current_state_ship.append(np.append(np.append(halites, ship_positions, axis=2), \n                               shipyard_positions, axis=2)) # make current state 3*22*22 wrt ship by appenidng halite, ship and shipyard positions\n        \n        try:\n            index = [s.id for s in next_step_board.current_player.ships].index(ship.id)\n        except ValueError:\n            index = -1\n            \n        if index == -1:\n            #check if place of ship is occupied by shipyard in in next step, then its a CONVERT            \n            if ship.position in [shipyard.position for shipyard in next_step_board.current_player.shipyards]:\n                rewards_arr[1] = step_rewards\n                ship_actions.append(rewards_arr)\n                \n            else:\n                rewards_arr[0] = step_rewards\n                ship_actions.append(rewards_arr)\n            \n        else:\n            reward_index = get_direction(ship.position, next_step_board.current_player.ships[index].position, (-1,-1)) # (-1,-1) stands for None\n            rewards_arr[reward_index] = step_rewards\n            ship_actions.append(rewards_arr)\n            \n    # Set actions for each shipyard\n    for shipyard in me.shipyards:\n        rewards_arr = np.zeros(SHIPYARD_ACTION_SPACE_SIZE)\n        halites = get_all_halites(board, shipyard.position)\n        ship_positions = get_all_shipyard_positions(board, shipyard.position)\n        shipyard_positions = get_all_shipyard_positions(board, shipyard.position)\n        # input to the model\n        current_state_shipyard.append(np.append(np.append(halites, ship_positions, axis=2), \n                               shipyard_positions, axis=2))\n        \n        if shipyard.position in [ship.position for ship in next_step_board.current_player.ships]:\n            rewards_arr[1] = step_rewards # SPAWN for shipyard\n            shipyard_actions+=list(rewards_arr) \n        else:\n            rewards_arr[0] = step_rewards\n            shipyard_actions+=list(rewards_arr)\n        \n    return current_state_ship, current_state_shipyard, ship_actions, shipyard_actions\n    ","758c171d":"%%time\ninput_states_ship = []\ninput_states_shipyard = []\nQvalues_ship = []\nQvalues_shipyard = []\nfiles =  files[:3]\nfor file in files:\n    print(\"processing - \" + file)\n    with open(file) as f:\n        data = json.load(f)\n    # get the configuration from root, common for all steps\n    config = data[\"configuration\"]\n    # calculate end margin\n    end_margin = get_end_margin(data, config)\n    len_steps = len(data[\"steps\"])\n    for step_number in range(len_steps-1): # last steps actions for ship\/shipyards are not considered , reason for len_steps-1\n        \n        #get observation for each step and combine with config to get board\n        step_info = data[\"steps\"][step_number][0]\n        step_obs = step_info[\"observation\"]\n        board = Board(step_obs, config)\n        \n        # taking log of rewards\n        if(end_margin > 0):\n            step_rewards = math.log10(end_margin)\n        elif(end_margin < 0):\n            step_rewards = math.log10(abs(end_margin)) *-1\n        else:\n            step_rewards = 0\n        \n        current_state_ship, current_state_shipyard, ship_actions, shipyard_actions = get_input_data(data, board, config, len_steps, step_number+1, step_rewards)\n        input_states_ship += current_state_ship\n        input_states_shipyard += current_state_shipyard\n        Qvalues_ship  += ship_actions\n        Qvalues_shipyard += shipyard_actions\n        \ninput_states_ship = np.array(input_states_ship)\ninput_states_shipyard = np.array(input_states_shipyard)\nQvalues_ship = np.array(Qvalues_ship).reshape(-1, 6)\nQvalues_shipyard = np.array(Qvalues_shipyard).reshape(-1, 2)","b3ad0944":"np.save('input_states_ship.npy', input_states_ship)\nnp.save('input_states_shipyard.npy', input_states_shipyard)\nnp.save('Qvalues_ship.npy', Qvalues_ship)\nnp.save('Qvalues_shipyard.npy', Qvalues_shipyard)","5ebd1f53":"## Notebook to store states and rewards from saved episodes"}}