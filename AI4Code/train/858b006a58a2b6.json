{"cell_type":{"fd035d38":"code","9653493f":"code","a7db481a":"code","80d3e415":"code","49869862":"code","39ba3614":"code","4a0c2bdf":"code","ccafadb7":"code","e03274e1":"code","1e2fdedb":"code","11d62052":"markdown","f2a3c8d9":"markdown","bd178c3b":"markdown","edddb2b5":"markdown","e6af9fdb":"markdown"},"source":{"fd035d38":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)\nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport lightgbm as lgb\nimport gc\nimport cudf","9653493f":"%%time\ndata = cudf.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv')\nprint (\"Data is loaded!\")","a7db481a":"data = data.fillna(-1)\nfeatures = [c for c in data.columns if 'feature' in c]\n\ndata = data.astype('float32')\ndata = data[(data.weight != 0)]\ndata['action'] = (data['resp']>0)*1\n\n \ntrain = data[(data.date <= 450)]\n\nvalid = data[data.date > 450]\nweights = train[\"weight\"]\n\nX_train = train.loc[:, features]\ny_train = train.loc[:, 'action']\n\nX_valid = valid.loc[:, features]\ny_valid = valid.loc[:, 'action']\ndel train, data\ngc.collect()","80d3e415":"X_train.head()","49869862":"train_data = lgb.Dataset(X_train.to_pandas(), label=y_train.to_pandas(),weight = weights.to_pandas())\nvalid_data = lgb.Dataset(X_valid.to_pandas(), label=y_valid.to_pandas())","39ba3614":"parameters = {\n    'application': 'binary',\n    'objective': 'binary',\n    'metric': 'auc',\n    'is_unbalance': 'true',\n    'boosting': 'gbdt',\n    'max_depth' : 9,\n    'feature_fraction': 0.8,\n    'learning_rate': 0.05,\n    'feature_fraction_seed': 1991,\n    'device_type': \"gpu\", # to use gpu\n}\n","4a0c2bdf":"model = lgb.train(parameters,\n                  train_data,\n                  valid_sets=[train_data,valid_data],\n                  num_boost_round=1500,\n                  early_stopping_rounds=100,\n                  verbose_eval= 30)","ccafadb7":"# from https:\/\/www.kaggle.com\/c\/jane-street-market-prediction\/discussion\/200207\nfrom math import sqrt\n\ndef utility_score(df):\n    \"\"\"Calculate utility score of a dataframe according to formulas defined at\n    https:\/\/www.kaggle.com\/c\/jane-street-market-prediction\/overview\/evaluation\n    \"\"\"\n\n    df['p'] = df['weight']  * df['resp'] * df['actionv']\n    p_i = df.set_index('date')['p'].groupby('date').sum()\n    t = (p_i.sum() \/ sqrt((p_i**2).sum())) * (sqrt(250 \/ p_i.index.size))\n    return min(max(t, 0), 6) * p_i.sum()","e03274e1":"best_i = 0\nbest_u = 0\nfor i in [0.41, 0.45,0.49,0.5, 0.51,0.52, 0.55, 0.6,0.63, 0.65]:\n    \n    valid['actionv'] = (model.predict(X_valid.to_pandas()).round(4) > i)*1\n    u = utility_score(valid.to_pandas())\n    print(u)\n    if u > best_u:\n        best_u = u\n        best_i = i","1e2fdedb":"feature_imp = pd.DataFrame(sorted(zip(model.feature_importance(),X_train.columns)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False).head(30)) # only TOp 50 delete .head(50) to see all the features\nplt.title('LightGBM Features (avg over folds)')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-01.png')","11d62052":"# Local validation using utility score","f2a3c8d9":"# Feature importance plot","bd178c3b":"# Import packages","edddb2b5":"# Lightgbm Model","e6af9fdb":"# Load train Data "}}