{"cell_type":{"89e8f0fc":"code","d34fbb5f":"code","8ed0c392":"code","e4a90cea":"code","a5aee2d2":"code","4e8edcd4":"code","623efb32":"code","345d6f9a":"code","0a0e2aa8":"code","229a1592":"code","e618a52b":"code","0aec48ed":"code","011bda3f":"code","10b36dac":"code","701ee5c6":"code","99347c19":"code","d560f4d9":"code","b0f137fb":"code","252bfd64":"code","1ebbce06":"code","9ae308ae":"code","3628f803":"markdown","bbcd2972":"markdown","b0a1a368":"markdown","fb813c12":"markdown","cd4200f4":"markdown","e20624c2":"markdown","72943512":"markdown","b919f3b1":"markdown","bd4f2501":"markdown"},"source":{"89e8f0fc":"import numpy as np\nfrom sklearn.decomposition import PCA\nX = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\npca = PCA(n_components=2)\npca.fit(X)\nPCA(n_components=2)\nprint(pca.explained_variance_ratio_)\nprint(pca.singular_values_)","d34fbb5f":"pca = PCA(n_components=2, svd_solver='full')","8ed0c392":"import pandas as pd\nurl = \"https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data\"\n# load dataset into Pandas DataFrame\ndf = pd.read_csv(url, names=['sepal length','sepal width','petal length','petal width','target'])","e4a90cea":"df","a5aee2d2":"from sklearn.preprocessing import StandardScaler\nfeatures = ['sepal length', 'sepal width', 'petal length',\n'petal width']\n# Separating out the features\nx = df.loc[:, features].values\n# Separating out the target\ny = df.loc[:,['target']].values\n# Standardizing the features\nx = StandardScaler().fit_transform(x)","4e8edcd4":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\nprincipalComponents = pca.fit_transform(x)\nprincipalDf = pd.DataFrame(data = principalComponents, columns = ['principal component 1', 'principal component 2'])","623efb32":"principalDf","345d6f9a":"finalDf = pd.concat([principalDf, df[['target']]], axis = 1)\nfinalDf","0a0e2aa8":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize = (8,8))\nax = fig.add_subplot(1,1,1)\nax.set_xlabel('Principal Component 1', fontsize = 15)\nax.set_ylabel('Principal Component 2', fontsize = 15)\nax.set_title('2 component PCA', fontsize = 20)\ntargets = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']\ncolors = ['r', 'g', 'b']\nfor target, color in zip(targets,colors):\n    indicesToKeep = finalDf['target'] == target\n    ax.scatter(finalDf.loc[indicesToKeep, 'principal component 1']\n        , finalDf.loc[indicesToKeep, 'principal component 2']\n        , c = color\n        , s = 50)\n    ax.legend(targets)\n    ax.grid()","229a1592":"pca.explained_variance_ratio_","e618a52b":"from sklearn.datasets import fetch_openml\nmnist = fetch_openml('mnist_784')","0aec48ed":"from sklearn.model_selection import train_test_split\n# test_size: what proportion of original data is used fortest set\ntrain_img, test_img, train_lbl, test_lbl = train_test_split( mnist.data, mnist.target, test_size=1\/7.0, random_state=0)","011bda3f":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n# Fit on training set only.\nscaler.fit(train_img)\n# Apply transform to both the training set and the test set.\ntrain_img = scaler.transform(train_img)\ntest_img = scaler.transform(test_img)","10b36dac":"from sklearn.decomposition import PCA\n# Make an instance of the Model\npca = PCA(.95)","701ee5c6":"Model = pca.fit(train_img)","99347c19":"# Apply the mapping (transform) to both the training set and the test set.\ntrain_img = pca.transform(train_img)\ntest_img = pca.transform(test_img)","d560f4d9":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n# all parameters not specified are set to their defaults\n# default solver is incredibly slow which is why it was changed to 'lbfgs'\nRFC = RandomForestClassifier()","b0f137fb":"RFC.fit(train_img, train_lbl)","252bfd64":"# Predict for One Observation (image)\nRFC.predict(test_img[0].reshape(1,-1))","1ebbce06":"# Predict for One Observation (image)\nRFC.predict(test_img[0:10])","9ae308ae":"RFC.score(test_img, test_lbl)","3628f803":"# Visualize 2D Projection","bbcd2972":"# we can Apply RandomForestClassifier to the Transformed Data","b0a1a368":"# PCA Projection to 2D","fb813c12":"# Split Data into Training and Test Sets","cd4200f4":"# Standardize the Data","e20624c2":"# PCA to Speed-up Machine Learning Algorithms","72943512":"# This Model has achieved a high score and is thus implementable for industrial application, after going through cross validation testings ","b919f3b1":"# Import and Apply PCA","bd4f2501":"# Standardize the Data"}}