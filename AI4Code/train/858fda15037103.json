{"cell_type":{"0d809481":"code","044f68e0":"code","a2a4aeca":"code","56637d35":"code","52d27dbf":"code","f8674da5":"code","8bef2ab3":"code","1eab0e43":"code","0cf2b003":"code","3a9236f8":"code","6fb4d532":"code","348efdba":"code","29976cce":"code","42794792":"markdown"},"source":{"0d809481":"# Tomato Leaf Disease Detection\n\n# In this program I will build 3 differnt CNN models to find maximum accuracy\n\n# and then will do the testing with the model from which we obtain highest accuracy.\n\n# Code I: I have used one FC layer with batch size = default\n# CodeII: I have used two FC layer with batch size = default\n# Code III: I have used one FC layer with batch size = 64","044f68e0":"# Importing Libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator","a2a4aeca":"# Importing the images \nimport os\nfor dirname, _, filenames in os.walk('..\/input\/tomatoleaf\/tomato'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","56637d35":"train_datagen = ImageDataGenerator(\n        rescale=1.\/255,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True)\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(\n        '..\/input\/tomatoleaf\/tomato\/train',\n        target_size=(150, 150),\n        batch_size=32,\n        class_mode='categorical')","52d27dbf":"test_generator = test_datagen.flow_from_directory(\n        '..\/input\/tomatoleaf\/tomato\/val',\n        target_size=(150, 150),\n        batch_size=32,\n        class_mode='categorical')","f8674da5":"# First model\n\ncnn = tf.keras.models.Sequential()\n\n#Convolution layer 1\ncnn.add(tf.keras.layers.Conv2D(filters=32,kernel_size = 3, activation='relu',input_shape=[150, 150,3]))\n\n# Pooling 1\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))\n\n#Convolution layer 2\ncnn.add(tf.keras.layers.Conv2D(filters=32,kernel_size = 3, activation='relu',input_shape=[150, 150,3]))\n\n# Pooling 2\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))\n\n# Flattening\ncnn.add(tf.keras.layers.Flatten())\n\n#Full Conncetion\ncnn.add(tf.keras.layers.Dense(units=128,activation='relu'))\n\n#Output Layer\ncnn.add(tf.keras.layers.Dense(units=10,activation='softmax'))\n\n#Compiling\ncnn.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\n\n# Summary of the model\ncnn.summary()\n\n# Fit\ntemp = cnn.fit(x = train_generator, validation_data=test_generator,epochs=25)","8bef2ab3":"# plot the loss\nplt.plot(temp.history['loss'], label='train loss')\nplt.plot(temp.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n\n# plot the accuracy\nplt.plot(temp.history['accuracy'], label='train acc')\nplt.plot(temp.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","1eab0e43":"# Testing the model\nfrom keras.preprocessing import image\ntest = image.load_img(\"..\/input\/tomatoleaf\/tomato\/val\/Tomato___Spider_mites Two-spotted_spider_mite\/00fa99e8-2605-4d72-be69-98277587d84b___Com.G_SpM_FL 1453.JPG\",target_size = (150, 150))\ntest=image.img_to_array(test)\ntest=np.expand_dims(test,axis=0)\nresult=cnn.predict(test)","0cf2b003":"result","3a9236f8":"# Second model\n\ncnn2 = tf.keras.models.Sequential()\n\n#Convolution layer 1\ncnn2.add(tf.keras.layers.Conv2D(filters=32,kernel_size = 3, activation='relu',input_shape=[150, 150,3]))\n\n# Pooling 1\ncnn2.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))\n\n#Convolution layer 2\ncnn2.add(tf.keras.layers.Conv2D(filters=32,kernel_size = 3, activation='relu',input_shape=[150, 150,3]))\n\n# Pooling 2\ncnn2.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))\n\n# Flattening\ncnn2.add(tf.keras.layers.Flatten())\n\n#Full Conncetion\ncnn2.add(tf.keras.layers.Dense(units=128,activation='relu'))\n\n#Full Conncetion\ncnn2.add(tf.keras.layers.Dense(units=128,activation='relu'))\n\n#Output Layer\ncnn2.add(tf.keras.layers.Dense(units=10,activation='softmax'))\n\n#Compiling\ncnn2.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\n\n# Summary of the model\ncnn2.summary()\n\n# Fit\ntemp = cnn2.fit(x = train_generator, validation_data=test_generator,epochs=25)","6fb4d532":"# plot the loss\nplt.plot(temp.history['loss'], label='train loss')\nplt.plot(temp.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n\n# plot the accuracy\nplt.plot(temp.history['accuracy'], label='train acc')\nplt.plot(temp.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","348efdba":"# Third model\n\ncnn3 = tf.keras.models.Sequential()\n\n#Convolution layer 1\ncnn3.add(tf.keras.layers.Conv2D(filters=32,kernel_size = 3, activation='relu',input_shape=[150, 150,3]))\n\n# Pooling 1\ncnn3.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))\n\n#Convolution layer 2\ncnn3.add(tf.keras.layers.Conv2D(filters=32,kernel_size = 3, activation='relu',input_shape=[150, 150,3]))\n\n# Pooling 2\ncnn3.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))\n\n# Flattening\ncnn3.add(tf.keras.layers.Flatten())\n\n#Full Conncetion\ncnn3.add(tf.keras.layers.Dense(units=128,activation='relu'))\n\n#Output Layer\ncnn3.add(tf.keras.layers.Dense(units=10,activation='softmax'))\n\n#Compiling\ncnn3.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\n\n# Summary of the model\ncnn3.summary()\n\n# Fit\ntemp = cnn3.fit(x = train_generator, validation_data=test_generator,epochs=25,batch_size = 64)","29976cce":"# plot the loss\nplt.plot(temp.history['loss'], label='train loss')\nplt.plot(temp.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n\n# plot the accuracy\nplt.plot(temp.history['accuracy'], label='train acc')\nplt.plot(temp.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","42794792":"## Creating the model"}}