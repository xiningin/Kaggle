{"cell_type":{"fa4355db":"code","24dadfce":"code","c29edca9":"code","8e5501c0":"code","b1f43971":"code","561868da":"code","f782fe9c":"code","7c756691":"code","368f32f9":"code","929ca180":"code","55fa7731":"code","02a18237":"code","50b341d6":"code","4e970c70":"code","6d553967":"code","3616957d":"code","9450320b":"code","23400fab":"markdown"},"source":{"fa4355db":"import numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","24dadfce":"def prepare_data(df,forecast_col,forecast_out,test_size):\n    label = df[forecast_col].shift(-forecast_out) #creating new column called label with the last 5 rows are nan\n    X = np.array(df[[forecast_col]]) #creating the feature array\n    X = preprocessing.scale(X) #processing the feature array\n    X_lately = X[-forecast_out:] #creating the column i want to use later in the predicting method\n    X = X[:-forecast_out] # X that will contain the training and testing\n    label.dropna(inplace=True) #dropping na values\n    y = np.array(label)  # assigning Y\n    X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=test_size, random_state=0) #cross validation\n\n    response = [X_train,X_test , Y_train, Y_test , X_lately]\n    return response","c29edca9":"df = pd.read_csv(\"..\/input\/bharti-airtel-stock\/BhartiAirtel.csv\")\ndf['Date'] = pd.to_datetime(df['Date'])\ndf = df.sort_values('Date')\ndf","8e5501c0":"forecast_col = 'Close Price'\nforecast_out = 5\ntest_size = 0.2","b1f43971":"X_train, X_test, Y_train, Y_test , X_lately =prepare_data(df,forecast_col,forecast_out,test_size); #calling the method were the cross validation and data preperation is in\nlearner = LinearRegression() #initializing linear regression model\n\nlearner.fit(X_train,Y_train) #training the linear regression model","561868da":"score=learner.score(X_test,Y_test)#testing the linear regression model\nforecast= learner.predict(X_lately) #set that will contain the forecasted data\nresponse={}#creting json object\nresponse['test_score']=score\nresponse['forecast_set']=forecast\n\nprint(response)","f782fe9c":"pip install prophet","7c756691":"import matplotlib.pyplot as plt\nfrom fbprophet import Prophet\n\ndata = pd.read_csv(\"..\/input\/bharti-airtel-stock\/BhartiAirtel.csv\")\ndata.head()","368f32f9":"data['Date'] = pd.to_datetime(data['Date'])\ndata_sort = data.sort_values('Date')\ndata_sort","929ca180":"close = data_sort['Close Price']\nax = close.plot(title='Bharti Airtel')\nax.set_xlabel('Date')\nax.set_ylabel('Close')\nplt.show()","55fa7731":"data_sort[\"Date\"] = pd.to_datetime(data[\"Date\"], infer_datetime_format=True)\ndata_sort = data_sort[[\"Date\", \"Close Price\"]]","02a18237":"data_sort = data_sort.rename(columns={\"Date\" : \"ds\", \"Close Price\" : \"y\" })","50b341d6":"data_sort","4e970c70":"model = Prophet()\nmodel.fit(data_sort)\npredict = model.make_future_dataframe(periods=365)\nforcast = model.predict(predict)\nforcast[[\"ds\", \"yhat\", \"yhat_lower\", \"yhat_upper\"]].tail()","6d553967":"forcast","3616957d":"forcast.loc[(forcast['ds'] == '2021-06-07' )]","9450320b":"graph = model.plot(forcast, xlabel=\"Date\", ylabel=\"Price\")","23400fab":"Predicting the stock market has been the bane and goal of investors since its inception. Every day billions of dollars are traded on the stock exchange, and behind every dollar is an investor hoping to make a profit in one way or another.\n\nEntire companies rise and fall daily depending on market behaviour. If an investor is able to accurately predict market movements, he offers a tantalizing promise of wealth and influence. \n\nToday, so many people are making money staying at home trading in the stock market. It is a plus point for you if you use your experience in the stock market and your machine learning skills for the task of stock price prediction.\n\nLet\u2019s see how to predict stock prices using Machine Learning and the python programming language. I will start this task by importing all the necessary python libraries that we need for this task:-"}}