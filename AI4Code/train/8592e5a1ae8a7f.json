{"cell_type":{"7632529c":"code","f78137fe":"code","9d6d9c64":"code","fd0ad65a":"code","a6cbf5d9":"code","ab4c369d":"code","06835575":"code","a3436e5d":"code","638bd46c":"code","bd32df38":"code","9d200f73":"code","c7fbcf0d":"code","7c5f12d7":"code","c9ca9f23":"code","71b117a2":"code","4e9ccef5":"code","69b9aa56":"markdown","07e26d05":"markdown","08fa806b":"markdown","93b067a9":"markdown","2e115e6c":"markdown","83dd8618":"markdown","20aeb8ac":"markdown","05881eaa":"markdown","3264a6c9":"markdown","15ae3517":"markdown"},"source":{"7632529c":"# importing all the required libraries\nimport warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport skimage.io as io\nfrom skimage.transform import rotate, AffineTransform, warp\nfrom skimage.util import random_noise\nfrom skimage.filters import gaussian\nimport matplotlib.pyplot as plt\nimport PIL.Image\nimport matplotlib.pyplot as plt\nimport torch\nfrom torchvision import transforms","f78137fe":"\n\ndef imshow(img, transform):\n    \"\"\"helper function to show data augmentation\n    :param img: path of the image\n    :param transform: data augmentation technique to apply\"\"\"\n    \n    img = PIL.Image.open(img)\n    fig, ax = plt.subplots(1, 2, figsize=(15, 4))\n    ax[0].set_title(f'original image {img.size}')\n    ax[0].imshow(img)\n    img = transform(img)\n    ax[1].set_title(f'transformed image {img.size}')\n    ax[1].imshow(img)\n","9d6d9c64":"loader_transform = transforms.Resize((140, 140))\n\nimshow('..\/input\/lion-image\/lion.jpg', loader_transform)","fd0ad65a":"loader_transform = transforms.CenterCrop(140)\nimshow('..\/input\/lion-image\/lion.jpg', loader_transform)","a6cbf5d9":"# horizontal flip with probability 1 (default is 0.5)\nloader_transform = transforms.RandomHorizontalFlip(p=1)\nimshow('..\/input\/lion-image\/lion.jpg', loader_transform)","ab4c369d":"# left, top, right, bottom\nloader_transform = transforms.Pad((2, 5, 0, 5))\nimshow('..\/input\/lion-image\/lion.jpg', loader_transform)","06835575":"loader_transform = transforms.RandomRotation(30)\nimshow('..\/input\/lion-image\/lion.jpg', loader_transform)","a3436e5d":"# random affine transformation of the image keeping center invariant\nloader_transform = transforms.RandomAffine(0, translate=(0.4, 0.5))\nimshow('..\/input\/lion-image\/lion.jpg', loader_transform)","638bd46c":"# reading the image using its path\nimage = io.imread('..\/input\/lion-image\/lion.jpg')\n\n# shape of the image\nprint(image.shape)\n\n# displaying the image\nio.imshow(image)","bd32df38":"print('Rotated Image')\n#rotating the image by 45 degrees\nrotated = rotate(image, angle=45, mode = 'wrap')\n#plot the rotated image\nio.imshow(rotated)","9d200f73":"#apply shift operation\ntransform = AffineTransform(translation=(25,25))\nwrapShift = warp(image,transform,mode='wrap')\nplt.imshow(wrapShift)\nplt.title('Wrap Shift')","c7fbcf0d":"#flip image left-to-right\nflipLR = np.fliplr(image)\n\nplt.imshow(flipLR)\nplt.title('Left to Right Flipped')","7c5f12d7":"#flip image up-to-down\nflipUD = np.flipud(image)\n\nplt.imshow(flipUD)\nplt.title('Up Down Flipped')","c9ca9f23":"#standard deviation for noise to be added in the image\nsigma=0.155\n#add random noise to the image\nnoisyRandom = random_noise(image,var=sigma**2)\n\nplt.imshow(noisyRandom)\nplt.title('Random Noise')","71b117a2":"#blur the image\nblurred = gaussian(image,sigma=1,multichannel=True)\n\nplt.imshow(blurred)\nplt.title('Blurred Image')","4e9ccef5":"img = PIL.Image.open('..\/input\/lion-image\/lion.jpg')\nfig, ax = plt.subplots(2, 2, figsize=(16, 10))\n\n# brightness\nloader_transform1 = transforms.ColorJitter(brightness=2)\nimg1 = loader_transform1(img)\nax[0, 0].set_title(f'brightness')\nax[0, 0].imshow(img1)\n\n# contrast\nloader_transform2 = transforms.ColorJitter(contrast=2)\nimg2 = loader_transform2(img)\nax[0, 1].set_title(f'contrast')\nax[0, 1].imshow(img2)\n\n# saturation\nloader_transform3 = transforms.ColorJitter(saturation=2)\nimg3 = loader_transform3(img)\nax[1, 0].set_title(f'saturation')\nax[1, 0].imshow(img3)\nfig.savefig('color augmentation', bbox_inches='tight')\n\n# hue\nloader_transform4 = transforms.ColorJitter(hue=0.2)\nimg4 = loader_transform4(img)\nax[1, 1].set_title(f'hue')\nax[1, 1].imshow(img4)\n\nfig.savefig('color augmentation', bbox_inches='tight')\n","69b9aa56":"**Translation**\nIn translation, the image is moved either along the x-axis or y-axis","07e26d05":"**Flipping**\nIn flipping, the image is flipped horizontally or vertically.","08fa806b":"**Affine transformation**\nThe affine transformation preserves points, straight lines, and planes. It can be used for scaling, tranlation, shearing, rotation etc.","93b067a9":"**Rotation**\nThe image is rotated randomly in rotation.","2e115e6c":"**Padding**\nIn padding, the image is padded with a given value on all sides.","83dd8618":"**Cropping**\nIn cropping, a portion of the image is selected e.g. in the given example the center cropped image is returned.","20aeb8ac":"# 2nd way to do things ! ","05881eaa":"**Scaling**\nIn scaling or resizing, the image is resized to the given size e.g. the width of the image can be doubled.","3264a6c9":"Hue\nHue can be described of as the shade of the colors in an image","15ae3517":"Data augmentation can be applied in various domains, it's commonly used in computer vision. Some of the most common data augmentation techniques used for images are:\n\n* Position augmentation\n* Scaling\n* Cropping\n* Flipping\n* Padding\n* Rotation\n* Translation\n* Affine transformation\n* Color augmentation\n* Brightness\n* Contrast\n* Saturation\n* Hue"}}