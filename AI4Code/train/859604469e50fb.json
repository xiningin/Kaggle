{"cell_type":{"21d8ced5":"code","2c930999":"code","c696f3a4":"code","46d3ef07":"code","316705c1":"code","42ec7963":"code","34bd5d7f":"code","dd96d074":"code","5bceaccb":"code","2fe3af80":"code","f31ee36f":"code","929c6b80":"code","1044373f":"code","b22f30b8":"markdown"},"source":{"21d8ced5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c930999":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport math\nfrom pathlib import Path\nimport os\nfrom scipy import signal\n","c696f3a4":"def SP_profile(days_hours,days,Night_T_SP,Day_T_SP):\n    \n    '''Create a Temperature SP profile\n    \n    days_hours : number_of_hour_in_oneday + start hour at 0\n    days       : number of simulation days (365 days for a year)\n    Night_T_SP : temperature SP at night\n    Day_T_SP   : temperature SP in working hours.\n    '''\n    \n    \"\"\"Temperature different between day and night.\"\"\"\n    \n    delta_T= Day_T_SP - Night_T_SP\n\n    \"\"\"Define Work time \"\"\"\n    Wo_time =7;           \"\"\"Work time start at 7 in the morning \"\"\"\n    duty_wo = 23-7       \n\n    \"\"\"Go to home time\/ leave the working place \"\"\"\n    home_time = 18;           \"\"\"Go home at 18 in the afternoon \"\"\"\n    duty_ho   = 23-18        \n\n    \"\"\"Back to home \"\"\"\n    #back_home = 18;         \"\"\"Back home at 18.00 \"\"\"\n    #duty_b   = 23-18 \n\n\n    #-----------------------\n    t= np.linspace(0,1,(days_hours*days)+1,endpoint=False)          #+1 start from 0 days=1\n    temp1 = signal.square(2 * np.pi* days * t,duty=duty_wo\/24)\n    temp1 = np.clip(temp1, 0, 1)\n    # add delay to array\n    temp1=np.roll(temp1,Wo_time)\n\n    #----------------\n    t= np.linspace(0,1,(days_hours*days)+1,endpoint=False)          #+1 start from 0 days=1\n    temp2 = signal.square(2 * np.pi* days * t,duty=duty_ho\/24)\n    temp2 = np.clip(temp2, 0, 1)\n    # add delay to array\n    temp2=np.roll(temp2,home_time)\n\n    '''\n    #___________\n    t= np.linspace(0,1,(days_hours*days)+1,endpoint=False)          #+1 start from 0 days=1\n    temp3 = signal.square(2 * np.pi* days * t,duty=duty_b\/24)\n    temp3 = np.clip(temp3, 0, 1)\n    # add delay to array\n    temp3=np.roll(temp3,back_home)\n    '''\n\n    # Calculate SP\n\n    temp4=temp1-temp2#+temp3\n    SP=(temp4*delta_T)+Night_T_SP\n\n    SP=SP[np.newaxis]\n    SP=SP.T\n    SP=np.delete(SP, -1, 0)\n    return SP","46d3ef07":"print(Path.cwd())\n#print(os.listdir(\"..\/kaggle\/input\"))\nparent_dir = os.chdir('\/kaggle\/')\ndata_dir = Path.cwd() \/'input\/week-number'\nprint(os.listdir(\"..\/kaggle\/input\/week-number\/\"))\n#output_dir = Path.cwd()\/'working'\/'submit'\nNENdata_path = data_dir\/'weeknummers2020.xlsx'\nxls = pd.ExcelFile(NENdata_path)    ","316705c1":"xls.sheet_names  # Check sheet names","42ec7963":"data = pd.read_excel(xls,'DATA')","34bd5d7f":"print(data)","dd96d074":"'''\nInput Netherlands national holidays\n'''\n\nholidays = ['2020-01-01','2020-04-10','2020-04-12',\n            '2020-04-13','2020-04-27','2020-05-05','2020-05-21','2020-06-01',\n            '2020-12-25','2020-12-26','2020-12-31']","5bceaccb":"'''\nGet date, time column from data frame and convert to str\n'''\ntime = data['Datum']\ntime= time.astype(str)\ndate = data['Dag']\ndate= date.astype(str)","2fe3af80":"print(time),print(date)","f31ee36f":"'''\nCreate SP profile base on weekday, weekend and holidays.\nholidays and weekkend have the same profiel\n\n'''\nweek_day = SP_profile(days_hours=24,days=1,Night_T_SP=15,Day_T_SP=20)\nday_off  = SP_profile(days_hours=24,days=1,Night_T_SP=15,Day_T_SP=15)\ntemp2 = np.zeros((0,1))\n\nfor i in range(len(data)):\n    #print('i',i)\n    temp  = week_day\n    #if data.iloc[i]['Dag'] == 'zaterdag' or data.iloc[i]['Dag'] == 'zondag':\n    if date.iloc[i]=='zaterdag' or date.iloc[i] == 'zondag': \n        temp  = day_off\n        #print('------------------weekend------------------')\n    for x in range (len(holidays)):\n        if time.iloc[i] == holidays[x]:\n            temp  = day_off\n            #temp2 = np.concatenate((temp2, temp))\n            #print('-------------------holiday------------------')\n    \n    #print('--week day-----',i)\n    #temp  = week_day\n    temp2 = np.concatenate((temp2, temp))","929c6b80":"print(len(temp2))","1044373f":"\"\"\"Define Temperature SP\n\n    Assume that in normal working day, office building start at 7.00, \n    and close at 18.00. Weekend and holidays office building is closed\n    \n\"\"\"\ndays_hours   = 24                    #number_of_hour_in_oneday + start hour at 0\ndays         = 366                   #number of simulation days\nperiods      = 24*3600*days          #in seconds (day_periods*365 = years)\n\n#create simulation time\ntime_t = np.linspace(0,periods,(days_hours*days)+1)\nrow_to_be_added = np.array([0]) \n# Adding row to numpy array \nresult =temp2\n#result=np.delete(temp2, np.s_[0:24], axis = 0)\n\n#result=np.delete(result, np.s_[117*24:118*24], axis = 0)\nresult = np.vstack ((row_to_be_added,result))\n\nprint(len(result))\nplt.plot(time_t[0*24:7*24],result[0*24:7*24])\n#plt.plot(time_t,result)","b22f30b8":"0\n100\n102\n103\n117\n125\n141\n152\n359\n360\n365"}}