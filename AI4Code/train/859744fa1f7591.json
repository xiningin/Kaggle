{"cell_type":{"21357a5d":"code","e44e7478":"code","e4794af1":"code","7d70d90e":"code","bcbb5e8e":"code","ba5f4d74":"code","98c3b1da":"code","b9103f07":"code","c57a9716":"code","80268a0a":"code","1e6d9307":"code","60baeb6e":"code","51083ad2":"code","1820e0ae":"code","495f83ef":"code","418bc9ee":"code","28378deb":"code","42418614":"code","47729742":"code","9082fc6f":"code","ab92abcb":"markdown","f0028ec9":"markdown","3500e8bc":"markdown","b535745b":"markdown","8a32a295":"markdown","1fc79843":"markdown","b6697999":"markdown"},"source":{"21357a5d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import IsolationForest\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e44e7478":"train = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ntest = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')\nsubmission_sample = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')\n","e4794af1":"train.head(), test.head(), submission_sample.head()","7d70d90e":"plt.figure(figsize=(10,6))\nsns.set_style('whitegrid')\nsns.boxplot(x='item_price',data=train)","bcbb5e8e":"train = train[train.item_price<70000]","ba5f4d74":"train.shape","98c3b1da":"plt.figure(figsize=(10,6))\nsns.set_style('whitegrid')\nsns.boxplot(x='item_cnt_day',data=train)","b9103f07":"train = train[train.item_cnt_day < 1000]","c57a9716":"agg = train.groupby(['date_block_num','shop_id','item_id']).item_cnt_day.sum().reset_index(name ='item_cnt_monthly')\nagg","80268a0a":"agg2 = agg.groupby(['shop_id','item_id']).item_cnt_monthly.mean().reset_index(name='item_cnt_month')\nagg2","1e6d9307":"agg2.isna().sum()","60baeb6e":"agg2.corr()","51083ad2":"X = pd.DataFrame(agg2['item_id'])\ny = agg2['item_cnt_month']","1820e0ae":"X.head()","495f83ef":"Xtrain,Xval,ytrain,yval = train_test_split(X,y,train_size= 0.8)","418bc9ee":"Xtest = test[['item_id']]\n","28378deb":"model = XGBRegressor()\nmodel.fit(Xtrain,ytrain)\npred = model.predict(Xval)\nerror = mean_squared_error(pred,yval)\nprint(error)","42418614":"pred2 = model.predict(Xtest)","47729742":"output = pd.DataFrame({'ID': test.ID,'item_cnt_month':pred2})","9082fc6f":"output.to_csv('submission.csv',index=False)","ab92abcb":"# Data Preparation","f0028ec9":"# Build model","3500e8bc":"# Read Data","b535745b":"# Outliers Removal","8a32a295":"we'll consider item price which exceeds 30000 as outlier,so we'll remove it:","1fc79843":"we need to do some aggregations on train dataset to get the items monthly count:","b6697999":"# Explore Datasets"}}