{"cell_type":{"0d21a712":"code","af2f66d6":"code","23947afc":"code","439dfca6":"code","dc39b415":"code","30cb5f7a":"code","20fbf094":"code","3c512a6c":"code","3ad64798":"code","5d9f5fc0":"code","fe2c914d":"code","115e14c2":"code","64f478ce":"code","5f142dfb":"code","07e92efc":"code","6ff917aa":"code","3de0c70e":"code","4072a8cc":"code","10f9158b":"code","bcb13378":"code","a49bb4b4":"code","5dae0cab":"code","a33626d6":"code","f72c6763":"code","9fa496b6":"code","f3d5fd38":"code","e6236931":"code","4ff66e2c":"code","b1bb5569":"code","c199ad15":"code","032252cb":"code","05712f12":"code","eeb49517":"code","adcdb7f7":"code","dd92e940":"code","8730ebdb":"code","a0c48a5f":"code","a6bb8031":"code","13a6d626":"code","66c8fff6":"code","7b4329e1":"code","5c578db9":"code","f2085e9e":"code","07e565e4":"code","3fa3ea67":"code","dbf8dfca":"code","64bbd70f":"code","96fddbb0":"code","97d0e69e":"code","2f1da544":"code","a0b182e8":"code","e6e647c7":"code","5a30c386":"code","158c0796":"markdown","69fbc7ba":"markdown","91679c4a":"markdown","2c918595":"markdown","257d2221":"markdown","1dc2bca2":"markdown","080ae387":"markdown","8bf1f291":"markdown","0f55eb62":"markdown","63b501cd":"markdown","4790d54b":"markdown","8949da01":"markdown","5eb132b5":"markdown","2d59cb82":"markdown","9dad91a4":"markdown"},"source":{"0d21a712":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","af2f66d6":"import matplotlib.pyplot as plt\n%pylab inline\nimport matplotlib.patches as patches\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\nimport seaborn as sns\nimport datetime\nimport seaborn as sns\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split","23947afc":"#Reading data files:\n#Reading players.csv file\nplayers=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/players.csv\")\n#Reading plays.csv file\nplays=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/plays.csv\")\n#Reading games.csv file\ngames = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/games.csv\")\n#Reading week1.csv files\nweek1=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week1.csv\",index_col=None,header=0)\nweek2 = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week2.csv\",index_col=None,header=0)\ndis = pd.read_csv(\"..\/input\/weeks-data\/week_data.csv\",index_col=None,header=0)\nweeks = [week1,week2]\nweek_data_df = pd.concat(weeks,ignore_index=True,axis=0)","439dfca6":"#In height columns there are some cells with \"-\" which is not according to the format. \nplayers['height'] = [int(x[0])*12 + int(x[2]) if '-' in x else x for x in players['height']]\nplayers['height'] = pd.to_numeric(players['height'])\n#Changing the birthDate format\nplayers['birthDate'] = pd.to_datetime(players['birthDate']).dt.strftime('%m\/%d\/%Y')\nplayers['birthDate'] = pd.to_datetime(players['birthDate'])","dc39b415":"df = pd.DataFrame(players)\n","30cb5f7a":"#filtering so I can see only secondary players\nDB_pos = ['CB','SS','FS','DB']\ndf.loc[df['position'].isin(DB_pos)]\ndf = df.loc[df['position'].isin(DB_pos)]","20fbf094":"#Removing the rows with missing values\ndata_without_missing_values = week1.dropna(axis=1)\nweek1.isnull().sum()","3c512a6c":"week1 = week1.drop(['dir','nflId','o','jerseyNumber','route','time','x','y','event','frameId','team','gameId','playId','playDirection'],axis=1)\nweek1","3ad64798":"#Based on the position of players to know which player is going to play as Offense, Defense or Special team\ncat_item = {'Offense' : ['QB','RB','FB','WR','TE','HB'],\n            'Defense' : ['OLB','MLB','LB','ILB','CB','DE','DT','NT','DB','S','SS','FS'],\n            'Special' : ['K','P','LS']}\nitems = {w : k for k,v in cat_item.items() for w in v}\nplayers['teamRole'] = players['position'].map(items)","5d9f5fc0":"# Lets See how many players each college has (based on teamRole)\ncollege = players.groupby(['collegeName','teamRole'], as_index=False)[['nflId']].count()\ncollege.head()\n# As shown below the highest number of players are in Alabama college playing in Defense Team Role are 21","fe2c914d":"# Height Ranges\nheight = players.groupby(['height'], as_index=False)[['nflId']].count()\nplt.bar(height['height'],height['nflId'])\nplt.savefig('fig-1.jpg')","115e14c2":"#Figuring out the team that obtain most yards in the whole season\nyards_total = plays.groupby('possessionTeam').agg({'offensePlayResult': 'sum', 'gameId':'nunique'}).reset_index().rename(columns={'gameId': 'number of matches', 'offensePlayResult': 'yardsGained'})\nyards_total['averageYards']= np.round(yards_total['yardsGained']\/yards_total['number of matches'])","64f478ce":"I = []\nfor date in players['birthDate']:\n    I.append(int(str(date).split(\"-\")[0])) \nage = []\nfor k in I:\n    age.append((2020 - k))\nplayers['age'] = age\nplayers = players.drop(columns='birthDate')\nplayers = players.drop(columns='nflId')","5f142dfb":"#To see which dropback type would result in most yards by considering some factors\ndropbacks_total = plays.groupby('typeDropback')['offensePlayResult'].agg(yardsGained='sum', popularity='count')\ndropback_passRes = plays.groupby(['typeDropback', 'passResult'])[['passResult']].count()\ndropback_passRes = dropback_passRes.add_suffix('_Count').reset_index()\nsuccess_dropback = dropback_passRes.loc[dropback_passRes['passResult']== 'C']\n\nmapping = dict(success_dropback[['typeDropback', 'passResult_Count']].values)\ndropbacks_total['succesful'] =dropbacks_total.index.map(mapping)\ndropbacks_total['averageYard'] = np.round(dropbacks_total['yardsGained']\/dropbacks_total['popularity'])\ndropbacks_total['success_normal'] = dropbacks_total['succesful']\/dropbacks_total['popularity']\ndropbacks_total = dropbacks_total.reset_index()\ndropbacks_total","07e92efc":"#Checking the correlation between variables\n%matplotlib inline\ncorr = plays.corr()\n# sns.heatmap(corr, \n#         xticklabels=corr.columns,\n#         yticklabels=corr.columns)\n\n# If defense play result improves,play result also improves\n","6ff917aa":"%matplotlib inline\ncorr = players.corr()\n# sns.heatmap(corr, \n#         xticklabels=corr.columns,\n#         yticklabels=corr.columns)\n\n\n#Height and weight are positively correlated \n# plt.savefig('fig-4.jpg')","3de0c70e":"# Relation Between weight and height\n# sns.relplot(x='weight',y='height',data=players)\n# plt.savefig('fig-5.jpg')","4072a8cc":"# Relation between speed and acceleration\n# sns.relplot(x='s',y='a',hue='dis',data=week1)\n# plt.savefig('fig-6.jpg')","10f9158b":"df = pd.DataFrame(players)\ndf1 = pd.DataFrame(week1)","bcb13378":"#Filtering to capture only defensive backs(DB)\nDB_Pos = ['CB','SS','FS','DB']\ndf1.loc[df1['position'].isin(DB_Pos)]\ndf1 = df1.loc[df1['position'].isin(DB_Pos)]\n\n#average speed and acceleration for all DB's\ndf1.groupby('displayName').mean('s')\ndf1 = df1.groupby('displayName').mean('s')","a49bb4b4":"#scatter of speed and acceleration\n# ax1 = df1.plot.scatter(x='s', y='a', c='Green')\n#3 variable scatter plot\n# sns.scatterplot(x= df1['s'], y = df1['a'], hue = df1['dis'])","5dae0cab":"#Renaming columns so that it can be merged\ndf.rename(columns={'displayName' : 'displayName'})\ndf= df.rename(columns={'displayName' : 'displayName'})\n#Resetting index \ndf1.reset_index(inplace = True)","a33626d6":"display(df,df1)","f72c6763":"#merging both data sets together\ndf2 = pd.merge(df,df1)","9fa496b6":"\n\n# plt.scatter(df2['weight'],df2['s'])\n# plt.xlabel('Weight')\n# plt.ylabel('Speed')\n# plt.savefig('fig-7.jpg')\n# plt.scatter(df2['height'],df2['s'])\n# plt.xlabel('Height')\n# plt.ylabel('Speed')\n# plt.savefig('fig-8.jpg')\n# plt.scatter(df2['height'],df2['s'])\n# plt.xlabel('Height')\n# plt.ylabel('Speed')\n# plt.savefig('fig-8.jpg')\n# plt.scatter(df2['age'],df2['s'])\n# plt.xlabel('Age')\n# plt.ylabel('Speed')\n# plt.savefig('fig-9.jpg')","f3d5fd38":"X = df2[['height','weight']]\nY = df2['s']","e6236931":"#Random Forest Classifier Model using age as dependent\n##Train 80% Test 20%\nx2 = df2[['height','weight','a','s']]\ny2 = df2['age']","4ff66e2c":"#Test 80% Train20%\nfrom sklearn.model_selection import train_test_split\nx2_train, x2_test, y2_train,y2_test = train_test_split(x2,y2,test_size = 0.2)","b1bb5569":"#Importing RandomForestClassifier using 100 trees\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(100)\nmodel.fit(x2_train, y2_train)","c199ad15":"#Importing RandomForestClassifier using 100 trees\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(100)\nmodel.fit(x2_train, y2_train)","032252cb":"y2_predicted = model.predict(x2_test)\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y2_test,y2_predicted)\ncm","05712f12":"# import matplotlib.pyplot as plt\n# import seaborn as sn\n# plt.figure(figsize=(10,8))\n# sn.heatmap(cm, annot=True)\n# plt.xlabel('prediction')\n# plt.ylabel('result')\n# plt.savefig('fig-10.jpg')","eeb49517":"#RandomForestClassifierModel using acceleration as dependent\n##Train 80% Test 20%\nx3 = df2[['height','weight','a','s','dis']]\ny3 = df2['age']\n\n#Test 80% Train20%\nfrom sklearn.model_selection import train_test_split\nx3_train, x3_test, y3_train,y3_test = train_test_split(x3,y3,test_size = 0.2)\n\n#Importing RandomForestClassifier using 100 trees\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(100)\nmodel.fit(x3_train, y3_train)","adcdb7f7":"model.score(x3_test,y3_test)","dd92e940":"y3_predicted = model.predict(x3_test)\nfrom sklearn.metrics import confusion_matrix\ncm1 = confusion_matrix(y3_test,y3_predicted)\ncm1","8730ebdb":"#Much better performance when accounting for distance traveled\n# import matplotlib.pyplot as plt\n# import seaborn as sn\n# plt.figure(figsize=(10,7))\n# sn.heatmap(cm1, annot=True)\n# plt.xlabel('prediction')\n# plt.ylabel('result')","a0c48a5f":"#Random Forest Classifier Model of top 20 NFL players to try and predict age\n\nx4 = df2[['height','weight','a','dis']]\ny4 = df2['s']\ny4","a6bb8031":"#Test 30% Train 70%\n#Increased test size due to size of data being so small\nfrom sklearn.model_selection import train_test_split\nx4_train, x4_test, y4_train,y4_test = train_test_split(x4,y4,test_size = 0.3)","13a6d626":"#Importing RandomForestRegressor using 100 trees\nfrom sklearn.ensemble import RandomForestRegressor\nmodel1 = RandomForestRegressor(100)\nmodel1.fit(x4_train, y4_train)","66c8fff6":"#This model performed exceptionally well in predicting \nmodel1.score(x4_test,y4_test)","7b4329e1":"from sklearn.tree import DecisionTreeRegressor # Import Decision Tree Classifier\nfrom sklearn.model_selection import train_test_split # Import train_test_split function\nfrom sklearn import metrics #Import scikit-learn metrics module for accuracy calculation\nfrom sklearn import tree, metrics, model_selection, preprocessing\n\n# select features\ny = df2['s'] #Dependent feature\nX = df2[['height', 'weight','a','dis']] #Independent features (subset)\n\n# split data randomly into 70% training and 30% test\nX_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, \n                                                                    test_size=0.3, random_state=0)\n\n# train the decision tree\ndtree = tree.DecisionTreeRegressor( max_depth=5)\ndtree.fit(X_train, y_train)\n\n","5c578db9":"y_pred = dtree.predict(X_test)\n\n#split dataset in features and target variable\nfeature_cols = ['height', 'weight', 'a','dis']\nX = df2[feature_cols] # Features\ny = df2.s # Target variable\n# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2) # 70% training and 30% test","f2085e9e":"from numpy import loadtxt\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn import metrics\nfrom sklearn import tree,metrics,model_selection,preprocessing","07e565e4":"y = df2['s']\nx = df2[['height','weight','a','dis']]\nX_train, X_test, Y_train, Y_test = model_selection.train_test_split(x,y,test_size=0.3,random_state=0)\ndtree = tree.DecisionTreeRegressor(max_depth=5)\ndtree.fit(X_train,Y_train)","3fa3ea67":"y_pred = dtree.predict(X_test)\ny_pred = y_pred.astype(int)\ntest_arr = []\nfor i in Y_test:\n    test_arr.append(i)\ntest_arr = np.array(test_arr)\ntest_arr = test_arr.astype(int)\naccuracy = metrics.accuracy_score(test_arr, y_pred)\naccuracy = accuracy * 100\nprint('Accuracy: {:.2f}'.format(accuracy))","dbf8dfca":"import warnings\nwarnings.filterwarnings('ignore')\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC","64bbd70f":"Independent_features = df2[['height', 'weight','a','dis']]\nDependent_features = df2['s']\n\nE_train,E_test,F_train,F_test = train_test_split(Independent_features,Dependent_features,test_size=0.2,random_state=1)\n\nE_train = E_train.astype(int)\nF_train = F_train.astype(int)\nF_test = F_test.astype(int)\n\n# Running Various Models\nmodels = []\nmodels.append(('LogisticRegression', LogisticRegression()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('SVM', SVC()))\nmodels.append(('XGB',XGBClassifier(eta=0.01,gamma=10))) #eta = 0.01,gamma = 10\nimport time\n# evaluate each model in turn\nresults = []\nnames = []\nscoring = 'accuracy'\nfor name,model in models:\n    start_time = time.time()\n    model.fit(E_train,F_train)\n\n    F_pred = model.predict(E_test)\n    predictions = [round(value) for value in F_pred]\n\n\n    # evaluate predictions\n    accuracy = metrics.accuracy_score(F_test,predictions)\n    print(\"Accuracy: %.2f%%\" % (accuracy * 100.0),name)\n    print(\"--- %s seconds ---\" % (time.time() - start_time))","96fddbb0":"import numpy as np \nimport pandas as pd\nimport re\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.patches as mpatches\nfrom plotly.subplots import make_subplots\nimport random \nimport csv\npd.options.mode.chained_assignment = None ","97d0e69e":"players=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/players.csv\")","2f1da544":"player_game_stats = pd.DataFrame()\nweek_data_df = week_data_df[week_data_df['displayName']!='Football']\nweek_data_df['jerseyNumber'] = week_data_df['jerseyNumber'].astype(np.int8)\nweek_data_df['nflId'] = week_data_df['nflId'].astype(np.int64)\nplayer_game_stats = player_game_stats.append(week_data_df.groupby(['gameId','nflId'],as_index=False).agg({'s':'mean','a':'mean','dis':'sum'}))\nstat = player_game_stats.groupby(by=['nflId'])['s','a'].mean()\ndisplacement = player_game_stats.groupby(by=['nflId'])['dis'].sum()\nplayers['avgSpeed'] = 0.0\nplayers['avgAcceleration'] = 0.0\nplayers['totalDisplacement'] = 0.0\nfor i in range(len(players)):\n    try:\n        if stat.s.loc[players.nflId[i]]:\n            players['avgSpeed'][i] = stat.s.loc[players.nflId[i]]\n        if stat.a.loc[players.nflId[i]]:\n            players['avgAcceleration'][i] = stat.a.loc[players.nflId[i]]\n        if displacement.loc[players.nflId[i]]:\n            players['totalDisplacement'][i] = displacement.loc[players.nflId[i]]\n    except :\n        continue\ntemp3 = dis.groupby(by=['gameId','playId','frameId']).distanceBetweenBall.min()\ntemp3 = pd.DataFrame(temp3)\ntemp3.reset_index(level=['gameId','playId','frameId'],inplace= True)\ntemp3 = temp3.merge(dis, left_on=['gameId','playId','frameId','distanceBetweenBall' ], right_on=['gameId','playId','frameId','distanceBetweenBall'], how='left' )\ntemp3.drop(columns=['time', 'x', 'y',\n        'a', 'dis', 'o', 'dir', 'event','team', 'playDirection', 'route', 'unit','s',\n       'week', 'position','displayName'], axis=1, inplace=True)\ntemp3['nflId'] = temp3['nflId'].astype('int64') \ntemp3 = temp3.merge(players, left_on=['nflId'], right_on=['nflId'], how='left' )\ntemp3.drop(columns=[\"birthDate\",\"Unnamed: 0\"], axis=1, inplace = True)\ndf = temp3.displayName.value_counts().nlargest(15)\ndf = pd.DataFrame(df)\ndf['displayName'] = (df['displayName']\/ len(temp3) )*100\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df.index, y=df.displayName,marker_symbol = \"star\",\n                    mode='lines+markers',\n                    name='lines+markers',line=dict(color='blue', width=5), marker_size=20))\nfig.update_layout(\n    title=\"Best defensive player at closely tracking receivers as they try to get open in NFL, 2018 Season\",\n    xaxis_title=\"Player Names  \\n\",\n    yaxis_title=\"Metric score\" )\n\nfig.show()\nplt.savefig('fig-2.jpg')","a0b182e8":"temp1  = dis[dis.event == \"pass_arrived\"]\ntemp1 = temp1.groupby(by=['gameId','playId', 'frameId']).distanceBetweenBall.min()\ntemp1 = pd.DataFrame(temp1)\ntemp1.reset_index(level=['gameId','playId','frameId'],inplace= True)\ntemp1 = temp1.merge(dis, left_on=['gameId','playId','frameId','distanceBetweenBall' ], right_on=['gameId','playId','frameId','distanceBetweenBall'], how='left' )\ntemp1.drop(columns=['time', 'x', 'y',\n        'a', 'dis', 'o', 'dir','team', 'playDirection', 'route', 'unit','s',\n       'week', 'position','displayName'], axis=1, inplace=True)\ntemp1['nflId'] = temp1['nflId'].astype('int64') \ntemp1 = temp1.merge(players, left_on=['nflId'], right_on=['nflId'], how='left' )\ntemp1.drop(columns=[\"birthDate\",\"Unnamed: 0\"], axis=1, inplace = True)\n\ndf = temp1.displayName.value_counts().nlargest(15)\ndf = pd.DataFrame(df)\ndf['displayName'] = (df['displayName']\/ len(temp1) )*100\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df.index, y=df.displayName,marker_symbol = \"star\",\n                    mode='lines+markers',\n                    name='lines+markers',line=dict(color='black', width=5), marker_size=20))\nfig.update_layout(\n    title=\"Best defensive player at defending pass plays when the ball arrives in NFL, 2018 Season\",\n    xaxis_title=\"Player Names  \\n\",\n    yaxis_title=\"Metric score\" )\n\nfig.show()\nplt.savefig('fig-3.jpg')","e6e647c7":"temp2 = dis[(dis.event == \"pass_outcome_incomplete\") | (dis.event == \"pass_outcome_interception\") ]\ntemp2 = temp2.groupby(by=['gameId','playId', 'frameId']).distanceBetweenBall.min()\ntemp2 = pd.DataFrame(temp2)\ntemp2.reset_index(level=['gameId','playId','frameId'],inplace= True)\ntemp2 = temp2.merge(dis, left_on=['gameId','playId','frameId','distanceBetweenBall' ], right_on=['gameId','playId','frameId','distanceBetweenBall'], how='left' )\ntemp2.drop(columns=['time', 'x', 'y',\n        'a', 'dis', 'o', 'dir','team', 'playDirection', 'route', 'unit','s',\n       'week', 'position','displayName'], axis=1, inplace=True)\ntemp2['nflId'] = temp2['nflId'].astype('int64') \ntemp2 = temp2.merge(players, left_on=['nflId'], right_on=['nflId'], how='left' )\ntemp2.drop(columns=[\"birthDate\",\"Unnamed: 0\"], axis=1, inplace = True)\n\ndf = temp2.displayName.value_counts().nlargest(15)\ndf = pd.DataFrame(df)\ndf['displayName'] = (df['displayName']\/ len(temp2) )*100\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df.index, y=df.displayName,marker_symbol = \"star\",\n                    mode='lines+markers',\n                    name='lines+markers',line=dict(color='orange', width=5), marker_size=20))\nfig.update_layout(\n    title=\"Best defensive players against the pass in NFL, 2018 Season\",\n    xaxis_title=\"Player Names  \\n\",\n    yaxis_title=\"Metric score\" )\n\nfig.show()\nplt.savefig('fig-4.jpg')","5a30c386":"temp2 = dis[(dis.event == \"tackle\") ]\ntemp2 = temp2.groupby(by=['gameId','playId', 'frameId']).distanceBetweenBall.min()\ntemp2 = pd.DataFrame(temp2)\ntemp2.reset_index(level=['gameId','playId','frameId'],inplace= True)\ntemp2 = temp2.merge(dis, left_on=['gameId','playId','frameId','distanceBetweenBall' ], right_on=['gameId','playId','frameId','distanceBetweenBall'], how='left' )\ntemp2.drop(columns=['time', 'x', 'y',\n        'a', 'dis', 'o', 'dir','team', 'playDirection', 'route', 'unit','s',\n       'week', 'position','displayName'], axis=1, inplace=True)\ntemp2['nflId'] = temp2['nflId'].astype('int64') \ntemp2 = temp2.merge(players, left_on=['nflId'], right_on=['nflId'], how='left' )\ntemp2.drop(columns=[\"birthDate\",\"Unnamed: 0\"], axis=1, inplace = True)\n\ndf = temp2.displayName.value_counts().nlargest(15)\ndf = pd.DataFrame(df)\ndf['displayName'] = (df['displayName']\/ len(temp2) )*100\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df.index, y=df.displayName,marker_symbol = \"star\",\n                    mode='lines+markers',\n                    name='lines+markers',line=dict(color='darkblue', width=5), marker_size=20))\nfig.update_layout(\n    title=\"Best defensive players in tackling offensive players in NFL, 2018 Season\",\n    xaxis_title=\"Player Names  \\n\",\n    yaxis_title=\"Metric score\" )\n\nfig.show()\nplt.savefig('fig-5.jpg')","158c0796":"Prescriptive Analysis:\n\nThe line graph (Fig-3) below illustrates the preformance of players at defending pass plays when the ball arrives by scaling the distance between ball and defensive player at the event of pass arrives \/ ball arrives in NFL, 2018 season.\n\n    Darius Leonard was the first best player at defending pass plays when ball arrives in NFL, 2018 Season. Darius Leonard played as Defense Line backer at age of 25 years, with height and weight of 74 inches and 230 pounds. He was form South Carolina State college with Avgerage speed and acceleration of 2.934 yards\/second and 1.929 yard\/second^2. Darius Leonard covered total distance of 10147.00 yards in NFL,2018 Season.\n\n    Leighton Vander Esch was the second best player at defending pass plays when ball arrives in NFL, 2018 Season. Leighton Vander Esch played as Defense Line backer at age of 24 years, with height and weight of 74 inches and 230 pounds. He was form Boise State college with Avgerage speed and acceleration of 2.88 yards\/second and 1.92 yard\/second^2. Leighton Vander Esch covered total distance of 8566.81 yards in NFL,2018 Season.\n\n    Kendall Fuller was the third best player at defending pass plays when ball arrives in NFL, 2018 Season. Kendall Fuller played as Defense Corner backer at age of 25 years, with height and weight of 71 inches and 198 pounds. He was form Virginia Tech college with Avgerage speed and acceleration of 3.19 yards\/second and 1.93 yard\/second^2. Kendall Fuller covered total distance of 12957.60 yards in NFL,2018 Season.\n","69fbc7ba":"Prescriptive Analysis:\n\nThe line graph (Fig-2) below illustrates the performance of players at closely tracking receivers as they try to get open by scaling distance between ball and defensive players.\n\n    Darius Leonard was the first best player at closely tracking receivers as they try to get open in NFL, 2018 Season. Darius Leonard played as Defense Line backer at age of 25 years, with height and weight of 74 inches and 230 pounds. He was form South Carolina State college with Avgerage speed and acceleration of 2.934 yards\/second and 1.929 yard\/second^2. Darius Leonard covered total distance of 10147.00 yards in NFL,2018 Season.\n\n    Demario Davis was the second best player at closely tracking receivers as they try to get open in NFL, 2018 Season. Demario Davis played as Defense Inline backer at age of 31 years, with height and weight of 74 inches and 248 pounds. He was form Arkansas State college with Avgerage speed and acceleration of 2.757 yards\/second and 1.893 yard\/second^2. Demario Davis covered total distance of 9704.07 yards in NFL,2018 Season.\n\n    Luke Kuechly was the third best player at closely tracking receivers as they try to get open in NFL, 2018 Season. Luke Kuechly played as Defense Middleline backer at age of 29 years, with height and weight of 75 inches and 238 pounds. He was form Boston College with Avgerage speed and acceleration of 2.832 yards\/second and 1.868 yard\/second^2. Luke Kuechly covered total distance of 9923.56 yards in NFL,2018 Season.\n","91679c4a":"### Who are the NFL's best players against the pass","2c918595":"Prescriptive Analysis:\n\nThe line graph (Fig-4) below describes the preformance of players against the passes in NFL, 2018 season by scaling the distance between ball and defense players at the event of pass outcome interception, pass outcome incomplete.\n\n    Steven Nelson was the first best player against the pass in NFL, 2018 Season. Steven Nelson was form Oregon State college at age of 27. He played as Defense Corner backer with height anf weight of 71 inches and 194 pounds. Steven Nelson had totally covered distance of 13950.07 yards with average speed and acceleration of 3.24 yards\/second and 1.87 yards\/second^2.\n    Jalen Ramsey was the second best player against the pass in NFL, 2018 Season. Jalen Ramsey was form Florida State college at age of 26. He played as Defense Corner backer with height and weight of 73 inches and 203 pounds. Jalen Ramsey had totally covered distance of 11455.19 yards with average speed and acceleration of 3.124 yards\/second and 1.88 yards\/second^2.\n    Jalen Ramsey was the third best player against the pass in NFL, 2018 Season. Jalen Ramsey was form Samford college at age of 27. He played as Defense Corner backer with height anf weight of 73 inches and 212 pounds. Jalen Ramsey had totally covered distance of 10954.13 yards with average speed and acceleration of 2.99 yards\/second and 1.86 yards\/second^2.\n\nOverall all best 20 players against the pass results be playing Defense Corner Backer position in NFL, 2018 season.\n","257d2221":"The line graph below describes the performance of players in tackling in NFL, 2018\nseason by scaling the distance between ball and defense players at the event of tackle.\n* Darius Leonard was the first best player against the pass in NFL\n* Leighton Vander Esch was the second best player\n* Roquan Smith was the third best player against the pass in NFL","1dc2bca2":"# Learning model","080ae387":"### Is there anything about a player \u2013 for example, their height, weight, experience, speed, or position \u2013 that can be used to predict their performance on defense?","8bf1f291":"# We can see the height of players is between 72 inches to 74 inches","0f55eb62":"Decision Tree","63b501cd":"### Which players are the best at defending pass plays when the ball arrives","4790d54b":"# Data Visualization and EDA","8949da01":"### Best defensive players in tackling offensive players","5eb132b5":"##### Team Members-\n##### Name: Ekata S \n##### Name: Lokesh G\n##### Name: Kushal S\n##### Name: Nagaveni R M ","2d59cb82":"### Which players are the best at closely tracking receivers as they try to get open?","9dad91a4":"XGBoost"}}