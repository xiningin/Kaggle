{"cell_type":{"d0911eac":"code","39201acd":"code","c00304f6":"code","82eebc5f":"code","edad1d53":"code","240d3dbf":"code","dc5d7641":"code","fa1c121f":"code","e08eab5e":"code","0ab064b4":"code","642e2ef1":"code","e468bcb8":"code","b547ba1e":"code","7671fc1a":"code","ed55b888":"code","c6a7649c":"markdown"},"source":{"d0911eac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","39201acd":"df = pd.read_csv('..\/input\/avocado.csv')\ndf = df.drop('Unnamed: 0',1)\ndf = df[df.region!='TotalUS']\ndf = df[df.region!='West']\ndf = df[df.region!='California']\ndf = df[df.region!='GreatLakes']\ndf = df[df.region!='Northeast']\ndf = df[df.region!='Midsouth']\ndf = df[df.region!='SouthCentral']\ndf = df[df.region!='Southeast']\ndf = df[df.region!='Plains']\ndf.head(3)","c00304f6":"df['Date']=pd.to_datetime(df['Date'], format=\"%Y\/%m\/%d\")","82eebc5f":"import plotly\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\n\n\ngroupBy_whole = df.groupby('Date').mean()\nscatter = go.Scatter(x=groupBy_whole.AveragePrice.index, y=groupBy_whole.AveragePrice)\ndata = [scatter]\nlayout=go.Layout(title=\"Time Series Plot for Mean Daily Price across all regions\", xaxis={'title':'Date'}, yaxis={'title':'Prices'})\nfigure=go.Figure(data=data,layout=layout)\niplot(figure)","edad1d53":"conventional = df[df.type==\"conventional\"]\norganic = df[df.type==\"organic\"]\n\ngroupBy1_price = conventional.groupby('Date').mean()\nscatter1 = go.Scatter(x=groupBy1_price.AveragePrice.index, y=groupBy1_price.AveragePrice, name=\"Conventional\")\n\ngroupBy2_price = organic.groupby('Date').mean()\nscatter2 = go.Scatter(x=groupBy2_price.AveragePrice.index, y=groupBy2_price.AveragePrice, name=\"Organic\")\n\ndata = [scatter1, scatter2]\nlayout=go.Layout(title=\"Time Series Plot for Mean Daily Price of Conventional and Organic Avocados\", xaxis={'title':'Date'}, yaxis={'title':'Prices'})\nfigure=go.Figure(data=data,layout=layout)\niplot(figure)","240d3dbf":"groupby_region_conventional = conventional.groupby('region').median()\ngroupby_region_conventional = groupby_region_conventional.sort_values('AveragePrice')\n\nbar_data_conventional = go.Bar(\n            x=groupby_region_conventional.AveragePrice,\n            y=groupby_region_conventional.AveragePrice.index,\n            orientation = 'h',\n            marker=dict(\n                color='rgb(158,202,225)',\n                line=dict(\n                    color='rgb(8,48,107)',\n                    width=1.5),\n            ),\n            opacity=0.6\n        )\n\ndata = [bar_data_conventional]\nlayout=go.Layout(title=\"Median Price of Conventional Avocado by Region\", xaxis={'title':'Date'}, yaxis={'title':'Region'},height=1200)\nfigure=go.Figure(data=data,layout=layout)\niplot(figure)","dc5d7641":"groupby_region_organic = organic.groupby('region').median()\ngroupby_region_organic = groupby_region_organic.sort_values('AveragePrice')\n\nbar_data_organic = go.Bar(\n            x=groupby_region_organic.AveragePrice,\n            y=groupby_region_organic.AveragePrice.index,\n            orientation = 'h',\n            marker=dict(\n                color='rgb(248,146,146)',\n                line=dict(\n                    color='rgb(249,52,52)',\n                    width=1.5),\n            ),\n            opacity=0.6\n        )\n\ndata = [bar_data_organic]\nlayout=go.Layout(title=\"Median Price of Organic Avocado by Region\", xaxis={'title':'Date'}, yaxis={'title':'Region'}, height=1200)\nfigure=go.Figure(data=data,layout=layout)\niplot(figure)","fa1c121f":"groupBy1_volume = conventional.groupby('Date').mean()\ngroupBy2_volume = organic.groupby('Date').mean()\n\nscatter1 = go.Scatter(x=groupBy1_volume['Total Volume'].index, y=groupBy1_volume['Total Volume'], name=\"Conventional\")\n\nscatter2 = go.Scatter(x=groupBy2_volume['Total Volume'].index, y=groupBy2_volume['Total Volume'], name=\"Organic\")\n\ndata = [scatter1, scatter2]\nlayout=go.Layout(title=\"Time Series Plot for Volume of Conventional and Organic Avocados Sold\", xaxis={'title':'Date'}, yaxis={'title':'Volume'})\nfigure=go.Figure(data=data,layout=layout)\niplot(figure)","e08eab5e":"groupby_region_conventional = conventional.groupby('region').median()\ngroupby_region_conventional = groupby_region_conventional.sort_values('Total Volume')\n\nbar_data_organic = go.Bar(\n            x=groupby_region_conventional['Total Volume'],\n            y=groupby_region_conventional['Total Volume'].index,\n            orientation = 'h',\n            marker=dict(\n                color='rgb(158,202,225)',\n                line=dict(\n                    color='rgb(8,48,107)',\n                    width=1.5),\n            ),\n            opacity=0.6\n        )\n\ndata = [bar_data_organic]\nlayout=go.Layout(title=\"Volume of Conventional Avocado Sold in each Region\", xaxis={'title':'Volume'}, yaxis={'title':'Region'}, height=1200)\nfigure=go.Figure(data=data,layout=layout)\niplot(figure)","0ab064b4":"groupby_region_organic = organic.groupby('region').median()\ngroupby_region_organic = groupby_region_organic.sort_values('Total Volume')\n\nbar_data_organic = go.Bar(\n            x=groupby_region_organic['Total Volume'],\n            y=groupby_region_organic['Total Volume'].index,\n            orientation = 'h',\n            marker=dict(\n                color='rgb(248,146,146)',\n                line=dict(\n                    color='rgb(249,52,52)',\n                    width=1.5),\n            ),\n            opacity=0.6\n        )\n\ndata = [bar_data_organic]\nlayout=go.Layout(title=\"Volume of Organice Avocado Sold in each Region\", xaxis={'title':'Volume'}, yaxis={'title':'Region'}, height=1200)\nfigure=go.Figure(data=data,layout=layout)\niplot(figure)","642e2ef1":"import seaborn as sns\ncorrelation = conventional.groupby('Date').median()\ncorrelation = groupby_region_conventional.corr()\n\nsns.heatmap(correlation,square=False,robust=True,annot=True,fmt=\".1f\",annot_kws={\"size\": 12})","e468bcb8":"ml_df = df.copy()\nX = ml_df.drop('AveragePrice',1)\ny = ml_df.AveragePrice\nX = X[:-1].reset_index(drop=True)\ny = y[1:].reset_index(drop=True)\n\n\nml_df = pd.concat([X,y], 1)\nml_df =  ml_df.groupby('Date').mean()\n\nml_df.dtypes","b547ba1e":"X = ml_df.drop('AveragePrice',1)\ny = ml_df.AveragePrice\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.10, shuffle=False)","7671fc1a":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.linear_model import Lasso,Ridge,BayesianRidge,ElasticNet,HuberRegressor,LinearRegression,LogisticRegression,SGDRegressor\nfrom sklearn.metrics import mean_squared_error\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# print X_train.shape, X_test.shape\n\nclassifiers = [['DecisionTree :',DecisionTreeRegressor()],\n               ['RandomForest :',RandomForestRegressor()],\n               ['KNeighbours :', KNeighborsRegressor(n_neighbors = 2)],\n               ['SVM :', SVR()],\n               ['AdaBoostClassifier :', AdaBoostRegressor()],\n               ['GradientBoostingClassifier: ', GradientBoostingRegressor()],\n               ['Xgboost: ', XGBRegressor()],\n               ['CatBoost: ', CatBoostRegressor(logging_level='Silent')],\n               ['Lasso: ', Lasso()],\n               ['Ridge: ', Ridge()],\n               ['BayesianRidge: ', BayesianRidge()],\n               ['ElasticNet: ', ElasticNet()],\n               ['HuberRegressor: ', HuberRegressor()]]\n\nprint(\"Accuracy Results...\")\n\n\nfor name,classifier in classifiers:\n    classifier = classifier\n    classifier.fit(X_train, y_train)\n    predictions = classifier.predict(X_test)\n    print(name, (np.sqrt(mean_squared_error(y_test, predictions))))","ed55b888":"classifier = Lasso()\nclassifier.fit(X_train, y_train)\npredictions = classifier.predict(X_test)\n\nnew_frame = y_test.copy()\nnew_frame['Predictions'] = predictions\n\nscatter1 = go.Scatter(x=ml_df.index, y=ml_df['AveragePrice'], name=\"Actual\")\n\nscatter2 = go.Scatter(x=new_frame.index, y=new_frame['Predictions'], name=\"Predictions\")\n\ndata = [scatter1, scatter2]\nlayout=go.Layout(title=\"Prediction vs Actual Test Points\", xaxis={'title':'Date'}, yaxis={'title':'Volume'})\nfigure=go.Figure(data=data,layout=layout)\niplot(figure)","c6a7649c":"***If you like this kernel, feel free to upvote :D***"}}