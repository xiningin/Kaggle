{"cell_type":{"4b189ba9":"code","c924267b":"code","740c0967":"code","14c4deb6":"code","233a03e8":"code","060f01af":"code","66dc71f8":"code","c53d8c3a":"code","3f1f5255":"code","7c8db4da":"code","c3aa312e":"code","e29bed92":"code","6d42a1fb":"code","a1ead521":"code","0068f88b":"markdown","15545bf6":"markdown","9adb2c20":"markdown","4e58c0e6":"markdown","1f309d14":"markdown","143ce853":"markdown","25b70f7a":"markdown","35f8cc47":"markdown"},"source":{"4b189ba9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c924267b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","740c0967":"url='\/kaggle\/input\/heights-and-weights\/data.csv'\ndata=pd.read_csv(url)\ndata","14c4deb6":"data.describe()","233a03e8":"x=data['Height'].to_numpy()\ny=data['Weight'].to_numpy()\nx=x.reshape(-1,1)\ny=y.reshape(-1,1)\ny","060f01af":"plt.plot(x,y)\nplt.xlabel('Height')\nplt.ylabel('Weight')\nplt.title('Height vs Weight')","66dc71f8":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)","c53d8c3a":"from sklearn.linear_model import LinearRegression\nmodel=LinearRegression()\nmodel.fit(x_train,y_train)\nprint('Model Trained')","3f1f5255":"line=model.coef_*x+model.intercept_\nplt.plot(x,line)\nplt.scatter(x,y)\nplt.xlabel('Height')\nplt.ylabel('Weight')\nplt.title('Height vs Weight')\nplt.show()","7c8db4da":"y_test","c3aa312e":"y_pred=model.predict(x_test)\ny_pred","e29bed92":"df=pd.DataFrame(data={'Actual Values':y_test.flatten(),'Predicted Values':y_pred.flatten()})\ndf","6d42a1fb":"from sklearn.metrics import mean_absolute_error\nmae=mean_absolute_error(y_test,y_pred)\nprint(mae)","a1ead521":"target=[[1.778]] #let us assume that a person's height is this and let's predict the weight.\npred=model.predict(target)\nprint('The predicted weight is ',pred)","0068f88b":"From here we can obsserve that our model is somewhat correct in representing the data, except a little noise, which is always there in ML models.","15545bf6":"We can use this model to predict the weight of any height and it will predict the weight based on that height.\nLets try an example.","9adb2c20":"# You can use this model to predict the approximate weight of any person based on the height of the person.","4e58c0e6":"As we can see that the predicted values are almost equal to the actual values, with a very small deflection, so lets check now how much these values are different from the actual values. Let's calculate MAE(Mean Absolute Error)","1f309d14":"## Hence, the precicted weight for a person whose height is 1.778 meters is 69.7556965 Kg.","143ce853":"From here we can see that there is a direct relationship between the height and weight, so let's use this data and create a machine learning model from this.","25b70f7a":"# Weight predictor by Vikram Jeet Singh","35f8cc47":"From here we can see that the mean absolute error is very less and our model was successful."}}