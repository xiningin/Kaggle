{"cell_type":{"9d1f3db5":"code","a02ad479":"code","c4ae160f":"code","c8d53a0c":"code","d0427444":"code","d88ad3c1":"code","307fd426":"code","96882ed7":"code","a6bfc7c4":"code","ad8ed967":"code","0387b3b8":"code","3fb2fdb1":"code","ebabf56c":"code","20c204b2":"code","ae00fc27":"code","ae429093":"code","752ca329":"code","56bc665e":"code","49a1bb0a":"code","9e7294e4":"code","8443fb89":"code","4b923289":"code","b21ffd99":"code","94642ea1":"code","acd39497":"code","908647de":"code","379482d6":"code","7052f13a":"code","9e273aea":"code","db1eb8a4":"code","5a120052":"code","0ef2ff6b":"code","af78baca":"code","cf367b53":"code","bc6ae69a":"code","6b620d0f":"code","0800df8b":"code","c2841b29":"code","e45afe17":"code","eb78b2a5":"code","9b69cb4e":"code","383dcfa9":"code","126f9466":"code","462d0b8f":"code","d08e9f57":"code","a319cc20":"code","351767e2":"markdown","f4ef9545":"markdown","73898f6d":"markdown","5a31d400":"markdown"},"source":{"9d1f3db5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a02ad479":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport openslide\nimport os\nimport cv2\nimport PIL\nfrom IPython.display import Image, display\nfrom keras.applications.vgg16 import VGG16,preprocess_input\nimport plotly.graph_objs as go\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential, Model,load_model\nfrom keras.applications.vgg16 import VGG16,preprocess_input\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.preprocessing.image import ImageDataGenerator,load_img, img_to_array\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Input, Flatten,BatchNormalization,Activation\nfrom keras.layers import GlobalMaxPooling2D\nfrom keras.models import Model\nfrom keras.optimizers import Adam, SGD, RMSprop\nfrom keras.callbacks import ModelCheckpoint, Callback, EarlyStopping\nfrom keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport gc\nimport skimage.io\nfrom sklearn.model_selection import KFold\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nimport tensorflow as tf\nfrom tensorflow.python.keras import backend as K\nsess = K.get_session()","c4ae160f":"train=pd.read_csv('\/kaggle\/input\/prostate-cancer-grade-assessment\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/prostate-cancer-grade-assessment\/test.csv')","c8d53a0c":"train.head()","d0427444":"test.head()","d88ad3c1":"labels=[]\ndata=[]\ndata_dir='\/kaggle\/input\/prostate-cancer-grade-assessment\/train_images\/'\nfor i in range(train.shape[0]):\n    data.append(data_dir + train['image_id'].iloc[i]+'.jpg')\n    labels.append(train['isup_grade'].iloc[i])\ndf=pd.DataFrame(data)\ndf.columns=['images']\ndf['isup_grade']=labels","307fd426":"df","96882ed7":"from keras.preprocessing import image","a6bfc7c4":"X_train, X_val, y_train, y_val = train_test_split(df['images'],df['isup_grade'], test_size=0.2, random_state=1234)","ad8ed967":"train=pd.DataFrame(X_train)\ntrain.columns=['images']\ntrain['isup_grade']=y_train\n\nvalidation=pd.DataFrame(X_val)\nvalidation.columns=['images']\nvalidation['isup_grade']=y_val\n\ntrain['isup_grade']=train['isup_grade'].astype(str)\nvalidation['isup_grade']=validation['isup_grade'].astype(str)","0387b3b8":"train_datagen = ImageDataGenerator(rescale=1.\/255,rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,horizontal_flip=True)\n\nval_datagen=train_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train,\n    x_col='images',\n    y_col='isup_grade',\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode='categorical',\n    validate_filenames=False)\n\nvalidation_generator = val_datagen.flow_from_dataframe(\n    validation,\n    x_col='images',\n    y_col='isup_grade',\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode='categorical',\n    validate_filenames=False)","3fb2fdb1":"train=pd.DataFrame(X_train)\ntrain.columns=['images']\ntrain['target']=y_train\n\nvalidation=pd.DataFrame(X_val)\nvalidation.columns=['images']\nvalidation['target']=y_val\n\ntrain['target']=train['target'].astype(str)\nvalidation['target']=validation['target'].astype(str)","ebabf56c":"from keras.applications import VGG16\n\n# include top should be False to remove the softmax layer\npretrained_model = VGG16(include_top=False, weights='imagenet')\npretrained_model.summary()","20c204b2":"def vgg16_model( num_classes=None):\n\n    model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n    x=Flatten()(model.output)\n    x=Dropout(0.5)(x)\n    output=Dense(num_classes,activation='softmax')(x)\n    model=Model(model.input,output)\n    return model\n\nvgg_conv=vgg16_model(6)","ae00fc27":"vgg_conv.summary()","ae429093":"def kappa_score(y_true, y_pred):\n    \n    y_true=tf.math.argmax(y_true)\n    y_pred=tf.math.argmax(y_pred)\n    return tf.compat.v1.py_func(cohen_kappa_score ,(y_true, y_pred),tf.double)","752ca329":"opt = SGD(0.001,momentum=0.9,decay=1e-4)\nvgg_conv.compile(loss='categorical_crossentropy',optimizer=opt,metrics=[kappa_score])","56bc665e":"df.shape","49a1bb0a":"nb_epochs = 5\nbatch_size=32\nnb_train_steps = train.shape[0]\/\/batch_size\nnb_val_steps=validation.shape[0]\/\/batch_size\nprint(\"Number of training and validation steps: {} and {}\".format(nb_train_steps,nb_val_steps))","9e7294e4":"train['images'][9645]","8443fb89":"'''vgg_conv.fit_generator(\n    train_generator,\n    steps_per_epoch=nb_train_steps,\n    epochs=nb_epochs,\n    validation_data=validation_generator,\n    validation_steps=nb_val_steps)'''","4b923289":"'''\ntrain_image = []\nfor i in range(train.shape[0]):\n    img = image.load_img('\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/'+train['image_name'].iloc[i]+'.jpg', target_size=(28,28,1), grayscale=True)\n    img = image.img_to_array(img)\n    img = img\/255\n    train_image.append(img)\nX = np.array(train_image)\n'''","b21ffd99":"labels=[]\ndata=[]\ndata_dir='\/kaggle\/input\/prostate-cancer-grade-assessment\/train_images'\nfor i in range(train.shape[0]):\n    data.append(data_dir + train['image_id'].iloc[i]+'.jpg')\n    labels.append(train['isup_grade'].iloc[i])\ndf=pd.DataFrame(data)\ndf.columns=['images']\ndf['target']=labels","94642ea1":"import glob\nimport cv2\nimport numpy as np\npic_num=1\nIMG_DIR='\/kaggle\/input\/prostate-cancer-grade-assessment\/train_images'\ndef read_images(train):\n    for img in glob.glob(train+\"\/*.jpg\"):\n        image = cv2.imread(img)\n        image=cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        train_image = cv2.resize(image\/255.0  , (32 , 32))\n        #cv2.imwrite(\"small\/\"+str(pic_num)+'.jpg',resized_img)\n\n        yield train_image\n\ntrain_image =  np.array(list(read_images(IMG_DIR)))","acd39497":"train_image","908647de":"train=pd.read_csv('\/kaggle\/input\/prostate-cancer-grade-assessment\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/prostate-cancer-grade-assessment\/test.csv')","379482d6":"train","7052f13a":"import os, shutil","9e273aea":"from functools import reduce\n\nimport pandas as pd\nimport skimage.io\nfrom skimage.io import imshow,show\nfrom skimage.transform import resize\nfrom skimage.util import montage\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os","db1eb8a4":"import psutil\nimport gc\n\n\n\ndef compute_statistics(image,colors_summed):\n    \"\"\"\n    Args:\n        image                  numpy.array   multi-dimensional array of the form WxHxC\n    \n    Returns:\n        ratio_white_pixels     float         ratio of white pixels over total pixels in the image \n    \"\"\"\n    width, height = image.shape[0], image.shape[1]\n    num_pixels = width * height\n    \n    num_white_pixels = 0\n    \n    #summed_matrix = np.sum(image,axis=-1)\n   \n    # Note: A 3-channel white pixel has RGB (255, 255, 255)\n    \n    num_white_pixels = np.count_nonzero(colors_summed > 620)\n    ratio_white_pixels = num_white_pixels \/ num_pixels\n    \n    green_concentration = np.mean(image[1])\n    blue_concentration = np.mean(image[2])\n    \n    return ratio_white_pixels, green_concentration, blue_concentration\n\n\n\ndef select_k_best_regions(regions, k=20):\n    \"\"\"\n    Args:\n        regions               list           list of 2-component tuples first component the region, \n                                             second component the ratio of white pixels\n                                             \n        k                     int            number of regions to select\n    \"\"\"\n    regions = [x for x in regions if x[3] > 180 and x[4] > 180]\n   \n    k_best_regions = sorted(regions, key=lambda tup: tup[2])[:k]\n    return k_best_regions\n\n\ndef generate_patches(image, window_size=200, stride=128, k=20):\n    \n    colors_summed = np.sum(image,axis=-1)\n    \n    max_width, max_height = image.shape[0], image.shape[1]\n    regions_container = []\n    i = 0\n    \n    print_counter = 0\n\n    \n    while window_size + stride*i <= max_height:\n        j = 0\n        \n        while window_size + stride*j <= max_width:   \n      \n            x_top_left_pixel = j * stride\n            y_top_left_pixel = i * stride\n            \n            patch = image[\n                x_top_left_pixel : x_top_left_pixel + window_size,\n                y_top_left_pixel : y_top_left_pixel + window_size,\n                :\n            ]\n            \n            color_summed_patch = colors_summed[\n                x_top_left_pixel : x_top_left_pixel + window_size,\n                y_top_left_pixel : y_top_left_pixel + window_size]\n            \n            \n            ratio_white_pixels, green_concentration, blue_concentration = compute_statistics(patch,color_summed_patch)\n            \n            region_tuple = (x_top_left_pixel, y_top_left_pixel, ratio_white_pixels, green_concentration, blue_concentration)\n            regions_container.append(region_tuple)\n            \n            j += 1\n        \n        i += 1\n    \n    k_best_region_coordinates = select_k_best_regions(regions_container, k=k)\n    k_best_regions = get_k_best_regions(k_best_region_coordinates, image, window_size)\n    \n    return k_best_region_coordinates, k_best_regions\n\n\ndef get_k_best_regions(coordinates, image, window_size=512):\n    regions = {}\n    for i, tup in enumerate(coordinates):\n        x, y = tup[0], tup[1]\n        regions[i] = image[x : x+window_size, y : y+window_size, :]\n    \n    return regions\n\n\n\ndef glue_to_one_picture(image_patches, window_size=200, k=16):\n    side = int(np.sqrt(k))\n    image = np.zeros((side*window_size, side*window_size, 3), dtype=np.int16)\n        \n    for i, patch in image_patches.items():\n        x = i \/\/ side\n        y = i % side\n        image[\n            x * window_size : (x+1) * window_size,\n            y * window_size : (y+1) * window_size,\n            :\n        ] = patch\n    \n    return image\n\n# test patch extraction \n\nimport random\n\nWINDOW_SIZE = 128\nSTRIDE = 64\nK = 16\n\ndef test_patch_extraction(): \n    fig, ax = plt.subplots(6, 2, figsize=(20, 25))\n\n    train_df = pd.read_csv('..\/input\/prostate-cancer-grade-assessment\/train.csv').sample(n=10, random_state=random.seed())\n\n    images = list(train_df['image_id'])\n    labels = list(train_df['isup_grade'])\n\n    data_dir = '..\/input\/prostate-cancer-grade-assessment\/train_images\/'\n    \n    \n\n    for i, img in enumerate(images[:6]):\n        \n        print(\"image number \",i)\n        print(\"gc count\",gc.get_count())\n  \n        url = data_dir + img + '.tiff'\n        image = skimage.io.MultiImage(url)[-1]\n\n        best_coordinates, best_regions = generate_patches(image, window_size=WINDOW_SIZE, stride=STRIDE, k=K)\n           \n        glued_image = glue_to_one_picture(best_regions, window_size=WINDOW_SIZE, k=K)\n        \n        ax[i][0].imshow(image)\n        ax[i][0].set_title(f'{img} - Original - Label: {labels[i]}')\n\n        ax[i][1].imshow(glued_image)\n        ax[i][1].set_title(f'{img} - Glued - Label: {labels[i]}')\n        \n\n    fig.suptitle('From biopsy to glued patches')","5a120052":"def get_patch_image(image, window_size=WINDOW_SIZE, stride=STRIDE, k=K):\n    best_coordinates, best_regions = generate_patches(image, window_size, stride, k)\n    glued_image = glue_to_one_picture(best_regions, window_size, k)\n    return glued_image","0ef2ff6b":"from tqdm.notebook import tqdm\nimport zipfile\n\n\n\ndestination_dir = '\/patch_images\/'\nif not os.path.exists(destination_dir):\n    os.mkdir(destination_dir)\n\ndata_dir='\/kaggle\/input\/prostate-cancer-grade-assessment\/train_images\/'\n\nzipfile = '\/kaggle\/input\/patch-images\/patch_images.zip'\n\n\ndef get_image(data_dir,image_id):\n    raw_image_url = data_dir + image_id +'.tiff'\n    image = skimage.io.MultiImage(raw_image_url)[-1]\n    return image\n\n\ndef create_patch_images(data_dir,destination_dir):\n    for i in tqdm(range(train.shape[0])):\n        image_id = train['image_id'].iloc[i]\n        image = get_image(data_dir,image_id)\n        patch_image = get_patch_image(image)\n        patch_image_url = destination_dir + image_id + '.png'\n        skimage.io.imsave(patch_image_url,patch_image,check_contrast=False)\n        if (i % 100 == 0):\n            gc.collect()\n            #print(psutil.virtual_memory())\n        \n        \n    shutil.make_archive('\/patch_images\/','zip','.')\n        \ndef read_patch_images(zipfile):\n    with zipfile.ZipFile(zipfile, 'r') as zip_ref:\n        zip_ref.extractall('\/patch_images\/')\n        \n        \n\nif os.path.exists(zipfile):\n    read_patch_images()\nelse: \n    create_patch_images(data_dir,destination_dir)\n    \nprint(psutil.virtual_memory())\n    ","af78baca":"labels=[]\ndata=[]\ndata_dir='\/patch_images\/'\nfor i in range(train.shape[0]):\n    data.append(data_dir + train['image_id'].iloc[i]+'.png')\n    labels.append(train['isup_grade'].iloc[i])\ndf=pd.DataFrame(data)\ndf.columns=['images']\ndf['isup_grade']=labels","cf367b53":"df","bc6ae69a":"X_train, X_val, y_train, y_val = train_test_split(df['images'],df['isup_grade'], test_size=0.2, random_state=1234)\n","6b620d0f":"train=pd.DataFrame(X_train)\ntrain.columns=['images']\ntrain['isup_grade']=y_train\n\nvalidation=pd.DataFrame(X_val)\nvalidation.columns=['images']\nvalidation['isup_grade']=y_val\n\ntrain['isup_grade']=train['isup_grade'].astype(str)\nvalidation['isup_grade']=validation['isup_grade'].astype(str)","0800df8b":"train_datagen = ImageDataGenerator(rescale=1.\/255,rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,horizontal_flip=True)\n\nval_datagen=train_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train,\n    x_col='images',\n    y_col='isup_grade',\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode='categorical',\n    validate_filenames=False)\n\nvalidation_generator = val_datagen.flow_from_dataframe(\n    validation,\n    x_col='images',\n    y_col='isup_grade',\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode='categorical',\n    validate_filenames=False)","c2841b29":"def vgg16_model( num_classes=None):\n\n    model = VGG16(weights='\/kaggle\/input\/keras-pretrained-models\/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5', include_top=False, input_shape=(224, 224, 3))\n    x=Flatten()(model.output)\n    output=Dense(num_classes,activation='softmax')(x)\n    model=Model(model.input,output)\n    return model\n\nvgg_conv=vgg16_model(6)","e45afe17":"def kappa_score(y_true, y_pred):\n    \n    y_true=tf.math.argmax(y_true)\n    y_pred=tf.math.argmax(y_pred)\n    return tf.compat.v1.py_func(cohen_kappa_score ,(y_true, y_pred),tf.double)","eb78b2a5":"opt = SGD(lr=0.001)\nvgg_conv.compile(loss='categorical_crossentropy',optimizer=opt,metrics=['accuracy',kappa_score])","9b69cb4e":"nb_epochs = 3\nbatch_size = 16\nnb_train_steps = train.shape[0]\/\/batch_size\nnb_val_steps=validation.shape[0]\/\/batch_size\n\nprint(\"Number of training and validation steps: {} and {}\".format(nb_train_steps,nb_val_steps))\n\ncheck_point = ModelCheckpoint('.\/model.h5',monitor='val_loss',verbose=True, save_best_only=True, save_weights_only=True)\n\nearly_stop = EarlyStopping(monitor='val_loss',patience=25,verbose=True)\n\ncallbacks = [check_point,early_stop]","383dcfa9":"vgg_conv.fit_generator(\n    train_generator,\n    steps_per_epoch=nb_train_steps,\n    epochs=nb_epochs,\n    validation_data=validation_generator,\n    validation_steps=nb_val_steps,\n    callbacks=callbacks,\n    use_multiprocessing=True)","126f9466":"from functools import reduce\nimport skimage.io\nfrom skimage.io import imshow,show\nfrom skimage.transform import resize\nfrom skimage.util import montage\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os","462d0b8f":"from skimage import io\nimport skimage.transform","d08e9f57":"def predict_submission(df, path):\n    \n    df[\"image_path\"] = [path+image_id+\".tiff\" for image_id in df[\"image_id\"]]\n    df[\"isup_grade\"] = 0\n    predictions = []\n    for idx, row in df.iterrows():\n        image = skimage.io.imread(str(row.image_path))\n        patch_image = get_patch_image(image)\n        img = skimage.transform.resize(patch_image, (224,224))\n        img = img.astype(np.float32)\/255.\n        img = np.reshape(img,(1,224,224,3))\n        prediction = vgg_conv.predict(img)\n        predictions.append(np.argmax(prediction))\n            \n    df[\"isup_grade\"] = predictions\n    df = df.drop('image_path', 1)\n    return df[[\"image_id\",\"isup_grade\"]]","a319cc20":"test_path = \"..\/input\/prostate-cancer-grade-assessment\/train_images\/\"\nsubmission_df = pd.read_csv(\"..\/input\/prostate-cancer-grade-assessment\/sample_submission.csv\")\n\nif os.path.exists(test_path):\n    test_df = pd.read_csv(\"..\/input\/prostate-cancer-grade-assessment\/train.csv\")\n    submission_df = predict_submission(test_df, test_path)\n\nsubmission_df.to_csv('submission.csv', index=False)\nsubmission_df.head()","351767e2":"our target is to find isup_grade","f4ef9545":"# loading library","73898f6d":"## converting images to array format from keras image data generator library","5a31d400":"# Submission"}}