{"cell_type":{"e173285f":"code","fd248dcf":"code","2d4b784c":"code","ce274219":"code","0e8a7b60":"code","fd533586":"code","e9898b77":"code","ecc6a9ca":"code","22a2db6a":"code","5dbfe1da":"code","5782746c":"code","893132c7":"code","591ca426":"code","7770682d":"code","496d021c":"code","767274a2":"code","56c84f44":"code","24ca26dc":"code","e0843504":"code","ce4ed65c":"code","ea9063b7":"code","c7a017e4":"code","6bcbb624":"markdown","3ce5282f":"markdown","21c6e618":"markdown","8c408fe1":"markdown","a5a5f6a0":"markdown","adc7a99f":"markdown","09e1631e":"markdown","4f862136":"markdown","7fbd185b":"markdown","b9db68fb":"markdown"},"source":{"e173285f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd248dcf":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno","2d4b784c":"# Load the data\n\nfile = '\/kaggle\/input\/netflix-shows\/netflix_titles.csv'\ndf = pd.read_csv(file)\ndf.head()","ce274219":"# Convert str to datetime64\n\ndf['date_added'] = pd.to_datetime(df['date_added'])\ndf['year_added'] = df['date_added'].dt.year\ndf['month_added'] = df['date_added'].dt.month\n\nprint('-----------------------------------------------------------------------------------------------------------')\nprint(f'This dataset contains Movies and TV Shows added on Netflix from {df.date_added.min()} to {df.date_added.max()}.')\nprint('-----------------------------------------------------------------------------------------------------------\\n')\ndf.info()","0e8a7b60":"# Visualize missing values\n\nprint(df.isnull().sum())\nmsno.matrix(df, figsize=(9,6))\nplt.show()","fd533586":"temp = df[df['date_added'].isnull()].index\ndf.loc[temp]","e9898b77":"# Fix missing values roughly\n\nfor row in temp:\n    if df.loc[row, 'release_year'] < df['year_added'].min():\n        df.loc[row, 'year_added'] = df['year_added'].min()\n        df.loc[row, 'month_added'] = 12\n    else:\n        df.loc[row, 'year_added'] = df.loc[row, 'release_year']\n        df.loc[row, 'month_added'] = 12\n\ndf.drop('date_added', axis=1, inplace=True)\ndf['year_added'] = df['year_added'].astype('int')\ndf['month_added'] = df['month_added'].astype('int')\n\ndf['director'].fillna('Not Given', inplace=True)\ndf['cast'].fillna('Not Given', inplace=True)\ndf['country'].fillna(df['country'].mode()[0], inplace=True)\ndf['rating'].fillna(df['rating'].mode()[0], inplace=True)\ndf['duration'].fillna(df['duration'].mode()[0], inplace=True)\n\ndf = df.sort_values(by=['year_added', 'month_added'])","ecc6a9ca":"# Double check\n\nprint(df.isnull().sum())\nmsno.matrix(df, figsize=(9,6))\nplt.show()","22a2db6a":"df['type'].unique()","5dbfe1da":"# Split\n\ntv = df[df['type']=='TV Show'].sort_values(by=['year_added', 'month_added'])\nmv = df[df['type']=='Movie'].sort_values(by=['year_added', 'month_added'])\n\ntv['seasons'] = tv['duration'].apply(lambda x: int(x.split()[0]))\nmv['minutes'] = mv['duration'].apply(lambda x: int(x.split()[0]))","5782746c":"tv.head()","893132c7":"mv.head()","591ca426":"# Get the number of contents added using frequencies of years\n\nmovie_added = mv.groupby('year_added').count()['title']\ntv_added = tv.groupby('year_added').count()['title']\n\nyearly_add = pd.concat([movie_added, tv_added], axis=1)\nyearly_add.columns = ['Movies', 'TV Shows']\nyearly_add.fillna(0, inplace=True)\nyearly_add = yearly_add.astype('int')\n\nyearly_add","7770682d":"# Source: https:\/\/www.kaggle.com\/joshuaswords\/netflix-data-visualization\n\n# In my opinion, there should always have some appropriate and eye-catching colors for every topic.\n# Using default colors is OK, but it's not fancy!\n\nsns.palplot(['#221f1f', '#b20710', '#e50914','#f5f5f1'])\nplt.show()","496d021c":"# Useful website: https:\/\/www.python-graph-gallery.com\/\n\ntotal = yearly_add.sum()\nnames = list(total.index)\nsize_of_groups = list(total.values)\n\nfig = plt.figure(figsize=(10,10))\nfig.patch.set_facecolor('white')\n\nplt.pie(size_of_groups,\n        labels=names,\n        labeldistance=1.15,\n        wedgeprops={'linewidth':3, 'edgecolor':'white'},\n        autopct='%1.1f%%',\n        pctdistance=0.85,\n        textprops={'fontsize': 15, 'color':'#77e03a', 'weight':'bold'},\n        colors=['#221f1f', '#e50914'])\n\n# Comment these three lines to make a Pie Chart, I prefer to use a Donut chart.\nmy_circle = plt.Circle((0,0), 0.7, color='white')\np = plt.gcf()\np.gca().add_artist(my_circle)\n\nplt.title('Netflix: Movies vs TV Shows', fontsize=20, y=1.01, fontweight='bold', color='k')\nplt.tight_layout()\nplt.show()","767274a2":"(total.index)","56c84f44":"# 2 * (16, 9)\nfig, ax = plt.subplots(2, 1, figsize=(16,18))\n\nyearly_add.plot(kind='bar', color=['#221f1f', '#e50914'], alpha=0.9, ax=ax[0])\nax[0].set_xlabel('Year', fontsize=18)\nax[0].set_ylabel('No.', fontsize=18)\nax[0].set_title('Netflix: number of films and shows added annually', fontsize=24, fontweight='bold')\nax[0].tick_params(labelrotation=0)\nax[0].legend(loc=2, fontsize=15)\n\nyearly_add.plot(kind='bar', stacked=True, color=['#221f1f', '#e50914'], alpha=0.9, ax=ax[1])\nax[1].set_xlabel('Year', fontsize=18)\nax[1].set_ylabel('No.', fontsize=18)\nax[1].set_title('Netflix: number of films and shows added annually', fontsize=24, fontweight='bold')\nax[1].tick_params(labelrotation=0)\nax[1].legend(loc=2, fontsize=15)\n\nplt.show()","24ca26dc":"yearly_cum = yearly_add.cumsum()\nyearly_cum","e0843504":"# 3 * (16, 9)\nfig, ax = plt.subplots(3, 1, figsize=(16,27))\n\nyearly_cum.plot(kind='bar', color=['#221f1f', '#e50914'], alpha=0.9, ax=ax[0])\nax[0].set_xlabel('Year', fontsize=15)\nax[0].set_ylabel('No.', fontsize=15)\nax[0].set_title('Netflix: total items available', fontsize=24, fontweight='bold')\nax[0].tick_params(labelrotation=0)\nax[0].legend(loc=2, fontsize=15)\n\nyearly_cum.plot(kind='bar', stacked=True, color=['#221f1f', '#e50914'], alpha=0.9, ax=ax[1])\nax[1].set_xlabel('Year', fontsize=15)\nax[1].set_ylabel('No.', fontsize=15)\nax[1].set_title('Netflix: total items available', fontsize=24, fontweight='bold')\nax[1].tick_params(labelrotation=0)\nax[1].legend(loc=2, fontsize=15)\n\nyearly_cum.plot(color=['#221f1f', '#e50914'], alpha=0.9, linewidth=3, ax=ax[2])\nax[2].plot(yearly_cum.sum(axis=1), color='#77e03a', alpha=0.9, linewidth=3, label='Total')\nax[2].set_xlabel('Year', fontsize=15)\nax[2].set_ylabel('No.', fontsize=15)\nax[2].set_ylim([0,10000])\nax[2].set_title('Netflix: total items available', fontsize=24, fontweight='bold')\nax[2].legend(loc=2, fontsize=15)\nax[2].grid()\n\nplt.show()","ce4ed65c":"cross = pd.crosstab(df.year_added, df.month_added)","ea9063b7":"# Customize color map\nfrom matplotlib.colors import LinearSegmentedColormap\ncolors = ['#221f1f', '#e50914']\ncm = LinearSegmentedColormap.from_list(\"Custom\", colors, N=20)\n\nplt.figure(figsize=(20,12))\nsns.heatmap(cross, cmap=cm, annot=True, fmt='g')\n\nplt.xlabel('Month', fontsize=15)\nplt.ylabel('Year', fontsize=15)\nplt.yticks(rotation=0)\nplt.title('Netflix: Movies and TV Shows released monthly from 2008 to 2021', fontsize=24, fontweight='bold', y=1.01)\nplt.show()","c7a017e4":"avg_movie_duration = mv.groupby('release_year').mean()['minutes']\navg_tv_seasons = tv.groupby('release_year').mean()['seasons']\n\nplt.figure(figsize=(16,9))\n\nax1 = sns.lineplot(x=avg_movie_duration.index, y=avg_movie_duration.values, color='#221f1f', alpha=0.9, linewidth=3, label='Movie')\nax1.legend(loc=1, fontsize=15)\n\nax2 = ax1.twinx()\nax2 = sns.lineplot(x=avg_tv_seasons.index, y=avg_tv_seasons.values, color='#e50914', alpha=0.9, linewidth=3, label='TV')\nax2.legend(loc=4, fontsize=15)\n\nax1.set_xlabel('Release Year', fontsize=15)\nax1.set_ylabel('Average mimutes', fontsize=15)\nax2.set_ylabel('Average seasons', fontsize=15)\n\nax2.spines['right'].set_color('#e50914')\nax2.yaxis.label.set_color('#e50914')\nax2.tick_params(axis='y', colors='#e50914')\n\nplt.title('Netflix: Average minutes of Movies \/ Average seasons of TV Shows', fontsize=24, fontweight='bold', y=1.01)\nplt.show()","6bcbb624":"<hr style=\"border:2px solid gray\"> <\/hr>","3ce5282f":"# 3. Visulizations","21c6e618":"# 2. Some simple preprocessing","8c408fe1":"<hr style=\"border:2px solid gray\"> <\/hr>","a5a5f6a0":"<hr style=\"border:2px solid gray\"> <\/hr>","adc7a99f":"# 1. Loading libraries and dataset","09e1631e":"<hr style=\"border:2px solid gray\"> <\/hr>","4f862136":"<hr style=\"border:2px solid gray\"> <\/hr>","7fbd185b":"<hr style=\"border:2px solid gray\"> <\/hr>","b9db68fb":"<hr style=\"border:2px solid gray\"> <\/hr>"}}