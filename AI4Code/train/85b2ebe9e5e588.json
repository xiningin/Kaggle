{"cell_type":{"c6e2f9f0":"code","81bfc8fc":"code","15bf0ded":"code","d60b6835":"code","8fd0ce87":"code","1244e6b3":"code","a557cdfb":"code","1f62f4a5":"code","50553409":"code","6999c458":"code","68d4f27c":"code","ef30413a":"code","2ba9c1ec":"code","bc35d13f":"code","4155db40":"code","5af8e2bf":"code","af4c52f0":"code","f80975e8":"code","31e35495":"code","14e44198":"code","8a29b37a":"code","3ecda6b1":"code","1f7a318d":"code","f62152aa":"code","8e37ce69":"code","8112ee4f":"code","3bfff945":"code","2a9f98cb":"code","8f57154d":"code","6f4895cc":"code","d8f99b04":"markdown","b4fa4522":"markdown"},"source":{"c6e2f9f0":"# Install pandasql\n!pip install -q pandasql","81bfc8fc":"import numpy as np\nimport pandas as pd\nfrom pandasql import sqldf ","15bf0ded":"# Read Data\ndf = pd.read_csv('..\/input\/heart-failure-prediction\/heart.csv')","d60b6835":"# Declare global sqldf\nmysql = lambda q: sqldf(q, globals())","8fd0ce87":"# Q1 : Select Query\n# This query will return data from a database\n\nquery = \"\"\"\nSELECT * FROM df\n\"\"\"\n\nmysql(query)","1244e6b3":"# Q2 : Select Distinct Query\n# This query will return unique value from column\n\nquery = \"\"\"\nSELECT DISTINCT(Sex) FROM df\n\"\"\"\n\nmysql(query)","a557cdfb":"# Q3 : Limit Query\n# This will return specific number of data like head in pandas\n\nquery = \"\"\"\nSELECT * FROM df LIMIT 5\n\"\"\"\n\nmysql(query)","1f62f4a5":"# Q4 : Where Query\n# This query will return value from database that fulfill the condition\n\nquery = \"\"\"\nSELECT RestingBP \nFROM df\nWHERE Cholesterol=180\n\"\"\"\n\nmysql(query)","50553409":"# Q5 : Where With Multiple Condition Query\n# This query will return value from database that fulfill the condition\n\nquery = \"\"\"\nSELECT RestingBP \nFROM df\nWHERE Cholesterol=180 OR Cholesterol=200 AND NOT RestingECG = 'Normal'\n\"\"\"\n\nmysql(query)","6999c458":"# Q6 : Is Null Query\n# This query will find null value\n\nquery = \"\"\"\nSELECT RestingBP \nFROM df\nWHERE Cholesterol IS NULL\n\"\"\"\n\nmysql(query)","68d4f27c":"# Q7 : Order By Query\n# This query will sort value from database, ASC and DESC\n\nquery = \"\"\"\nSELECT RestingBP \nFROM df\nORDER BY RestingBP DESC\nLIMIT 5\n\"\"\"\n\nmysql(query)","ef30413a":"# Q8 : Case Query\n# This query like if else\n\nquery = \"\"\"\nSELECT CASE\nWHEN HeartDisease=0 THEN 'Normal'\nELSE 'Sick'\nEND\nFROM df\nLIMIT 5\n\"\"\"\n\nmysql(query)","2ba9c1ec":"# Q9 : Aliases Query\n# This Query are used to give a table, or a column in a table, a temporary name.\n# The Query is 'AS'\n\nquery = \"\"\"\nSELECT CASE\nWHEN HeartDisease=0 THEN 'Normal'\nELSE 'Sick'\nEND AS Result\nFROM df\nLIMIT 5\n\"\"\"\n\nmysql(query)","bc35d13f":"# Q10 : Min Max Query\n# This query will return Min and Max Value\n\nquery = \"\"\"\nSELECT\nMIN(RestingBP), MAX(RestingBP)\nFrom df\n\"\"\"\n\nmysql(query)","4155db40":"# Q11 : Count, Avg, Sum Query\n# This query will return count, average and sum value\n\nquery = \"\"\"\nSELECT\nCOUNT(RestingBP), AVG(RestingBP), SUM(RestingBP)\nFrom df\n\"\"\"\n\nmysql(query)","5af8e2bf":"# Q12 : Like Query\n# This query will return value with pattern\n\n# Find value with A is the first letter\nquery = \"\"\"\nSELECT\nDISTINCT(ChestPainType)\nFrom df\nWHERE ChestPainType LIKE 'A%'\n\"\"\"\n\n# Find value with A is the 2nd number out of 3 letters\nquery2 = \"\"\"\nSELECT\nDISTINCT(ChestPainType)\nFrom df\nWHERE ChestPainType LIKE '_A_'\n\"\"\"\n\n# Find value with N is the first letter and l is last letter\nquery3 = \"\"\"\nSELECT\nDISTINCT(RestingECG)\nFrom df\nWHERE RestingECG LIKE 'N%l'\n\"\"\"\n\ndisplay(mysql(query))\ndisplay(mysql(query2))\ndisplay(mysql(query3))","af4c52f0":"# Q13 : In Query\n# This query is a shorthand for multiple OR conditions.\n\nquery = \"\"\"\nSELECT\nMaxHR\nFrom df\nWHERE MaxHR IN (130,120,172)\nLIMIT 5\n\"\"\"\n\nmysql(query)","f80975e8":"# Q14 : Between Query\n# This query will return values within a given range. The values can be numbers, text, or dates.\n\nquery = \"\"\"\nSELECT\n*\nFrom df\nWHERE MaxHR BETWEEN 120 AND 150\nLIMIT 5\n\"\"\"\n\nmysql(query)","31e35495":"# Q15 : Inner Join Query\n# The INNER JOIN keyword selects records that have matching values in both tables\nfrom pandasql import load_meat, load_births \nmeat = load_meat()\nbirths = load_births()\n# I will use new data, because heart failure df can't be used to join\n\nquery = \"\"\"\nSELECT m.date, m.beef, m.veal, m.pork, b.births\nFROM meat AS m\nINNER JOIN\nbirths AS b\nON m.date = b.date;\n\"\"\"\n\nmysql(query)","14e44198":"# Q16 : Left Join Query\n# The LEFT JOIN keyword returns all records from the left table (table1), \n# and the matching records from the right table (table2). The result is 0 records from the right side, \n# if there is no match.\n\nquery = \"\"\"\nSELECT m.date, m.beef, m.veal, m.pork, b.births\nFROM meat AS m\nLEFT JOIN\nbirths AS b\nON m.date = b.date;\n\"\"\"\n\nmysql(query)","8a29b37a":"# Q17 : Union Query\n# The UNION operator is used to combine the result-set of two or more SELECT statements.\n## Req : \n##    Every SELECT statement within UNION must have the same number of columns\n##    The columns must also have similar data types\n##    The columns in every SELECT statement must also be in the same order\n\n# The UNION operator selects only distinct values by default.\nquery = \"\"\"\nSELECT Age FROM df\nUNION\nSELECT MaxHR FROM df\n\"\"\"\n# UNION ALL Allow the duplicate values\nquery2 = \"\"\"\nSELECT Age FROM df\nUNION ALL\nSELECT MaxHR FROM df\n\"\"\"\n\ndisplay(mysql(query))\ndisplay(mysql(query2))","3ecda6b1":"# Q18 : Group By Query\n# The GROUP BY statement groups rows that have the same values into summary rows, like \"find the number of customers in each country\".\n\nquery = \"\"\"\nSELECT ChestPainType,COUNT(ChestPainType) AS Count\nFROM df\nGroup By ChestPainType\n\"\"\"\n\nmysql(query)","1f7a318d":"# Q19 : Having Query\n# The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.\n\nquery = \"\"\"\nSELECT ChestPainType,COUNT(ChestPainType) AS Count\nFROM df\nGroup By ChestPainType\nHAVING Count > 200\n\"\"\"\n\nmysql(query)","f62152aa":"# Q20 : Any Query\n# In Sqlite doesn't have an 'ANY' operator, so we use 'IN'\n\nquery = \"\"\"\nSELECT beef\nFROM meat\nWHERE date IN(\nSELECT date FROM births WHERE births=265775)\n\"\"\"\n\nmysql(query)","8e37ce69":"# Q21 : CAST Query\n# This Query will convert data type\n\nquery = \"\"\"\nSELECT CAST(lamb_and_mutton as INT)\nFROM meat\nLIMIT 5\n\"\"\"\n\nmysql(query)","8112ee4f":"# Q22 : Coalesce Query\n# This Query will change the null value with record we input\n\nquery = \"\"\"\nSELECT COALESCE(broilers,'IDK') AS Coalsce\nFROM meat\nLIMIT 5\n\"\"\"\n\nmysql(query)","3bfff945":"# Q23 : strftime Query\n# return datetime values in our chosen format\n\n\nquery = \"\"\"\nSELECT strftime('%Y', date) AS Year\nFROM meat\nLIMIT 2\n\"\"\"\n\nquery2 = \"\"\"\nSELECT strftime('%m', date) AS Month\nFROM meat\nLIMIT 2\n\"\"\"\n\nquery3 = \"\"\"\nSELECT strftime('%d', date) AS Day\nFROM meat\nLIMIT 2\n\"\"\"\n\n\ndisplay(mysql(query))\ndisplay(mysql(query2))\ndisplay(mysql(query3))","2a9f98cb":"# Q24 : ROW_NUMBER Query\n# This query will give number\n\nquery = \"\"\"\nSELECT Age,Sex,ChestPainType, \nROW_NUMBER() OVER(ORDER BY MaxHR ASC) AS row_number\nFROM df\norder by MaxHR ASC\nLIMIT 5\n\"\"\"\n\nmysql(query)","8f57154d":"# Q25 : SubQuery\n# A subquery is a SELECT statement nested in another statement.\n\nquery = \"\"\"\nSELECT HeartDisease,COUNT(HeartDisease) AS Count\nFROM df\nWHERE Cholesterol >= (SELECT AVG(Cholesterol) FROM df WHERE Sex='F')\nGroup By HeartDisease\n\"\"\"\n\nmysql(query)\n","6f4895cc":"# Q26 : SubString Query\n# This function returns a portion of a specified character\n\nquery = \"\"\"\nSELECT SUBSTR(ChestPainType, 1, 2) AS Substring\nFROM df\nLIMIT 5\n\"\"\"\n\nmysql(query)","d8f99b04":"# THANK YOU","b4fa4522":"# About Pandasql\npandasql allows you to query pandas DataFrames using SQL syntax. It works similarly to sqldf in R. pandasql seeks to provide a more familiar way of manipulating and cleaning data for people new to Python or pandas.\nThere are many variants of SQL in use, and their syntaxes vary a little. Here in pandasql uses the SQLite syntax. Most of the standard SQL language SQLite understands. However, it adds few features of its own while at the same time it does omit some features. [Click Here](https:\/\/www.sqlite.org\/lang.html) to read the document that attempts to describe what parts of the SQL language SQLite do and do not support.\n\npandasql automatically detects any pandas DataFrame. You can call them or query them by their name in the same way you would have done with a SQL table.\n\n[Pandasql Doc](http:\/\/https:\/\/pypi.org\/project\/pandasql\/)\n\nand in this notebook, i will try some sql syntax using pandasql, so lets go"}}