{"cell_type":{"74dc9d6f":"code","9efd9c6d":"code","1f096411":"code","cfa21008":"code","567ff741":"code","6a8c21c0":"code","3170b979":"code","2659dbf5":"code","c193167c":"code","ea03df14":"code","83033d65":"code","c5165038":"code","21998831":"code","e255739a":"markdown","8bfce4e5":"markdown","b9718570":"markdown","2f0d6637":"markdown","0198f17a":"markdown","c64375e9":"markdown","69d3f1d9":"markdown","9b80ef90":"markdown","bd8d7f71":"markdown"},"source":{"74dc9d6f":"\n\nfrom __future__ import print_function\nimport time\nimport torch\nimport torch.nn as nn\nimport torch.nn.parallel\nimport torch.optim as optim\nimport torch.utils.data\nimport torchvision.datasets as dset\nimport torchvision.transforms as transforms\nimport torchvision.utils as vutils\nfrom torch.autograd import Variable\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom torch import nn, optim\nimport torch.nn.functional as F\nfrom torchvision import datasets, transforms\nfrom torchvision.utils import save_image\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom tqdm import tqdm_notebook as tqdm\n# Any results you write to the current directory are saved as output.","9efd9c6d":"from __future__ import absolute_import, division, print_function\nimport numpy as np\nimport os\nimport gzip, pickle\nimport tensorflow as tf\nfrom scipy import linalg\nimport pathlib\nimport urllib\nimport warnings\nfrom tqdm import tqdm\nfrom PIL import Image\n\nclass KernelEvalException(Exception):\n    pass\n\nmodel_params = {\n    'Inception': {\n        'name': 'Inception', \n        'imsize': 64,\n        'output_layer': 'Pretrained_Net\/pool_3:0', \n        'input_layer': 'Pretrained_Net\/ExpandDims:0',\n        'output_shape': 2048,\n        'cosine_distance_eps': 0.1\n        }\n}\n\ndef create_model_graph(pth):\n    \"\"\"Creates a graph from saved GraphDef file.\"\"\"\n    # Creates graph from saved graph_def.pb.\n    with tf.gfile.FastGFile( pth, 'rb') as f:\n        graph_def = tf.GraphDef()\n        graph_def.ParseFromString( f.read())\n        _ = tf.import_graph_def( graph_def, name='Pretrained_Net')\n\ndef _get_model_layer(sess, model_name):\n    # layername = 'Pretrained_Net\/final_layer\/Mean:0'\n    layername = model_params[model_name]['output_layer']\n    layer = sess.graph.get_tensor_by_name(layername)\n    ops = layer.graph.get_operations()\n    for op_idx, op in enumerate(ops):\n        for o in op.outputs:\n            shape = o.get_shape()\n            if shape._dims != []:\n              shape = [s.value for s in shape]\n              new_shape = []\n              for j, s in enumerate(shape):\n                if s == 1 and j == 0:\n                  new_shape.append(None)\n                else:\n                  new_shape.append(s)\n              o.__dict__['_shape_val'] = tf.TensorShape(new_shape)\n    return layer\n\ndef get_activations(images, sess, model_name, batch_size=50, verbose=False):\n    \"\"\"Calculates the activations of the pool_3 layer for all images.\n\n    Params:\n    -- images      : Numpy array of dimension (n_images, hi, wi, 3). The values\n                     must lie between 0 and 256.\n    -- sess        : current session\n    -- batch_size  : the images numpy array is split into batches with batch size\n                     batch_size. A reasonable batch size depends on the disposable hardware.\n    -- verbose    : If set to True and parameter out_step is given, the number of calculated\n                     batches is reported.\n    Returns:\n    -- A numpy array of dimension (num images, 2048) that contains the\n       activations of the given tensor when feeding inception with the query tensor.\n    \"\"\"\n    inception_layer = _get_model_layer(sess, model_name)\n    n_images = images.shape[0]\n    if batch_size > n_images:\n        print(\"warning: batch size is bigger than the data size. setting batch size to data size\")\n        batch_size = n_images\n    n_batches = n_images\/\/batch_size + 1\n    pred_arr = np.empty((n_images,model_params[model_name]['output_shape']))\n    for i in tqdm(range(n_batches)):\n        if verbose:\n            print(\"\\rPropagating batch %d\/%d\" % (i+1, n_batches), end=\"\", flush=True)\n        start = i*batch_size\n        if start+batch_size < n_images:\n            end = start+batch_size\n        else:\n            end = n_images\n                    \n        batch = images[start:end]\n        pred = sess.run(inception_layer, {model_params[model_name]['input_layer']: batch})\n        pred_arr[start:end] = pred.reshape(-1,model_params[model_name]['output_shape'])\n    if verbose:\n        print(\" done\")\n    return pred_arr\n\n\n# def calculate_memorization_distance(features1, features2):\n#     neigh = NearestNeighbors(n_neighbors=1, algorithm='kd_tree', metric='euclidean')\n#     neigh.fit(features2) \n#     d, _ = neigh.kneighbors(features1, return_distance=True)\n#     print('d.shape=',d.shape)\n#     return np.mean(d)\n\ndef normalize_rows(x: np.ndarray):\n    \"\"\"\n    function that normalizes each row of the matrix x to have unit length.\n\n    Args:\n     ``x``: A numpy matrix of shape (n, m)\n\n    Returns:\n     ``x``: The normalized (by row) numpy matrix.\n    \"\"\"\n    return np.nan_to_num(x\/np.linalg.norm(x, ord=2, axis=1, keepdims=True))\n\n\ndef cosine_distance(features1, features2):\n    # print('rows of zeros in features1 = ',sum(np.sum(features1, axis=1) == 0))\n    # print('rows of zeros in features2 = ',sum(np.sum(features2, axis=1) == 0))\n    features1_nozero = features1[np.sum(features1, axis=1) != 0]\n    features2_nozero = features2[np.sum(features2, axis=1) != 0]\n    norm_f1 = normalize_rows(features1_nozero)\n    norm_f2 = normalize_rows(features2_nozero)\n\n    d = 1.0-np.abs(np.matmul(norm_f1, norm_f2.T))\n    print('d.shape=',d.shape)\n    print('np.min(d, axis=1).shape=',np.min(d, axis=1).shape)\n    mean_min_d = np.mean(np.min(d, axis=1))\n    print('distance=',mean_min_d)\n    return mean_min_d\n\n\ndef distance_thresholding(d, eps):\n    if d < eps:\n        return d\n    else:\n        return 1\n\ndef calculate_frechet_distance(mu1, sigma1, mu2, sigma2, eps=1e-6):\n    \"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n            \n    Stable version by Dougal J. Sutherland.\n\n    Params:\n    -- mu1 : Numpy array containing the activations of the pool_3 layer of the\n             inception net ( like returned by the function 'get_predictions')\n             for generated samples.\n    -- mu2   : The sample mean over activations of the pool_3 layer, precalcualted\n               on an representive data set.\n    -- sigma1: The covariance matrix over activations of the pool_3 layer for\n               generated samples.\n    -- sigma2: The covariance matrix over activations of the pool_3 layer,\n               precalcualted on an representive data set.\n\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"\n\n    mu1 = np.atleast_1d(mu1)\n    mu2 = np.atleast_1d(mu2)\n\n    sigma1 = np.atleast_2d(sigma1)\n    sigma2 = np.atleast_2d(sigma2)\n\n    assert mu1.shape == mu2.shape, \"Training and test mean vectors have different lengths\"\n    assert sigma1.shape == sigma2.shape, \"Training and test covariances have different dimensions\"\n\n    diff = mu1 - mu2\n\n    # product might be almost singular\n    covmean, _ = linalg.sqrtm(sigma1.dot(sigma2), disp=False)\n    if not np.isfinite(covmean).all():\n        msg = \"fid calculation produces singular product; adding %s to diagonal of cov estimates\" % eps\n        warnings.warn(msg)\n        offset = np.eye(sigma1.shape[0]) * eps\n        # covmean = linalg.sqrtm((sigma1 + offset).dot(sigma2 + offset))\n        covmean = linalg.sqrtm((sigma1 + offset).dot(sigma2 + offset))\n    \n    # numerical error might give slight imaginary component\n    if np.iscomplexobj(covmean):\n        if not np.allclose(np.diagonal(covmean).imag, 0, atol=1e-3):\n            m = np.max(np.abs(covmean.imag))\n            raise ValueError(\"Imaginary component {}\".format(m))\n        covmean = covmean.real\n\n    # covmean = tf.linalg.sqrtm(tf.linalg.matmul(sigma1,sigma2))\n\n    print('covmean.shape=',covmean.shape)\n    # tr_covmean = tf.linalg.trace(covmean)\n\n    tr_covmean = np.trace(covmean)\n    return diff.dot(diff) + np.trace(sigma1) + np.trace(sigma2) - 2 * tr_covmean\n    # return diff.dot(diff) + tf.linalg.trace(sigma1) + tf.linalg.trace(sigma2) - 2 * tr_covmean\n#-------------------------------------------------------------------------------\n\n\ndef calculate_activation_statistics(images, sess, model_name, batch_size=50, verbose=False):\n    \"\"\"Calculation of the statistics used by the FID.\n    Params:\n    -- images      : Numpy array of dimension (n_images, hi, wi, 3). The values\n                     must lie between 0 and 255.\n    -- sess        : current session\n    -- batch_size  : the images numpy array is split into batches with batch size\n                     batch_size. A reasonable batch size depends on the available hardware.\n    -- verbose     : If set to True and parameter out_step is given, the number of calculated\n                     batches is reported.\n    Returns:\n    -- mu    : The mean over samples of the activations of the pool_3 layer of\n               the incption model.\n    -- sigma : The covariance matrix of the activations of the pool_3 layer of\n               the incption model.\n    \"\"\"\n    act = get_activations(images, sess, model_name, batch_size, verbose)\n    mu = np.mean(act, axis=0)\n    sigma = np.cov(act, rowvar=False)\n    return mu, sigma, act\n    \ndef _handle_path_memorization(path, sess, model_name, is_checksize, is_check_png):\n    path = pathlib.Path(path)\n    files = list(path.glob('*.jpg')) + list(path.glob('*.png'))\n    imsize = model_params[model_name]['imsize']\n\n    # In production we don't resize input images. This is just for demo purpose. \n    x = np.array([np.array(img_read_checks(fn, imsize, is_checksize, imsize, is_check_png)) for fn in files])\n    m, s, features = calculate_activation_statistics(x, sess, model_name)\n    del x #clean up memory\n    return m, s, features\n\n# check for image size\ndef img_read_checks(filename, resize_to, is_checksize=False, check_imsize = 64, is_check_png = False):\n    im = Image.open(str(filename))\n    if is_checksize and im.size != (check_imsize,check_imsize):\n        raise KernelEvalException('The images are not of size '+str(check_imsize))\n    \n    if is_check_png and im.format != 'PNG':\n        raise KernelEvalException('Only PNG images should be submitted.')\n\n    if resize_to is None:\n        return im\n    else:\n        return im.resize((resize_to,resize_to),Image.ANTIALIAS)\n\ndef calculate_kid_given_paths(paths, model_name, model_path, feature_path=None, mm=[], ss=[], ff=[]):\n    ''' Calculates the KID of two paths. '''\n    tf.reset_default_graph()\n    create_model_graph(str(model_path))\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        m1, s1, features1 = _handle_path_memorization(paths[0], sess, model_name, is_checksize = True, is_check_png = True)\n        if len(mm) != 0:\n            m2 = mm\n            s2 = ss\n            features2 = ff\n        elif feature_path is None:\n            m2, s2, features2 = _handle_path_memorization(paths[1], sess, model_name, is_checksize = False, is_check_png = False)\n        else:\n            with np.load(feature_path) as f:\n                m2, s2, features2 = f['m'], f['s'], f['features']\n\n        print('m1,m2 shape=',(m1.shape,m2.shape),'s1,s2=',(s1.shape,s2.shape))\n        print('starting calculating FID')\n        fid_value = calculate_frechet_distance(m1, s1, m2, s2)\n        print('done with FID, starting distance calculation')\n        print(\"fid: \"+str(fid_value))\n\n        distance = cosine_distance(features1, features2)        \n        return fid_value, distance, m2, s2, features2","1f096411":"# import zipfile\ndef calc_mfid(user_images_unzipped_path):\n    if clb:\n        # COMPUTE LB SCORE\n        m2 = []; s2 =[]; f2 = []\n\n    #     user_images_unzipped_path = '..\/output_images\/'\n    #     user_images_unzipped_path = '..\/tmp\/images2\/'\n\n        images_path = [user_images_unzipped_path,'..\/input\/generative-dog-images\/all-dogs\/all-dogs\/']\n        public_path = '..\/input\/dog-face-generation-competition-kid-metric-input\/classify_image_graph_def.pb'\n\n        fid_epsilon = 10e-15\n\n        fid_value_public, distance_public, m2, s2, f2 = calculate_kid_given_paths(images_path, 'Inception', public_path, mm=m2, ss=s2, ff=f2)\n        distance_public = distance_thresholding(distance_public, model_params['Inception']['cosine_distance_eps'])\n        print(\"FID_public: \", fid_value_public, \"distance_public: \", distance_public, \"multiplied_public: \",\n                fid_value_public \/(distance_public + fid_epsilon))\n        return fid_value_public\n\n        # REMOVE FILES TO PREVENT KERNEL ERROR OF TOO MANY FILES\n    #     ! rm -r ..\/tmp","cfa21008":"from PIL import Image\nfrom PIL import ImageEnhance\ndef adjust_sharpness(input_image,factor):\n    image = Image.open(input_image)\n    enhancer_object = ImageEnhance.Sharpness(image)\n    out = enhancer_object.enhance(factor)\n\n    return out\ndef adjust_contrast(input_image, factor):\n    image = input_image\n    enhancer_object = ImageEnhance.Contrast(image)\n    out = enhancer_object.enhance(factor)\n    return out\n    #     out.save(output_image)\ndef adjust_brightness(input_image, factor):\n    image = input_image\n    enhancer_object = ImageEnhance.Brightness(image)\n    out = enhancer_object.enhance(factor)\n#     out.save(output_image)\n    return out\n\n","567ff741":"clb=1","6a8c21c0":"ROOT = '..\/input\/generative-dog-images\/'\nif not clb: ROOT = '..\/input\/'\nIMAGES = ROOT + 'all-dogs\/all-dogs\/'\nbreeds = ROOT + 'annotation\/Annotation\/'\nprint(IMAGES)","3170b979":"import zipfile\nwith zipfile.ZipFile(\"..\/input\/gan-dogs-starter-24-jul-custom-layers\/images.zip\",\"r\") as z:\n    z.extractall(\"..\/tmp\/images2\/\")\n","2659dbf5":"MY_DOGS = \"..\/tmp\/images2\/\"","c193167c":"calc_mfid(MY_DOGS)","ea03df14":"ENH_DOGS = \"..\/enh\/\"\nif not os.path.exists(ENH_DOGS):\n    os.mkdir(ENH_DOGS)","83033d65":"sharpness = [2.1]\ncontrast = [0.4]\n#     eimg = adjust_brightness(eimg,0.8)\n\nsl=[]\ncl=[]\nfidl = []\nimages = os.listdir(MY_DOGS)\n\nfor s in sharpness:\n    for c in contrast:\n        for x in tqdm(images):\n            eimg = adjust_sharpness(MY_DOGS+x,s)\n            eimg = adjust_contrast(eimg,c)\n            eimg.save(ENH_DOGS+x)\n        #     print(ENH_DOGS+x)\n        fid = calc_mfid(\"..\/enh\")\n        sl.append(s)\n        cl.append(c)\n        fidl.append(fid)\n\n","c5165038":"for i in range(len(sl)):\n    print(\"sharp: \",sl[i],\"Contrast: \",cl[i], \"fid: \",fidl[i])","21998831":"PATH=MY_DOGS\nimages = os.listdir(MY_DOGS)\n\nfig, axes = plt.subplots(nrows=3, ncols=2, figsize=(12,10))\nfig2, axes2 = plt.subplots(nrows=3, ncols=2, figsize=(12,10))\n\nimpath = []\nfor indx, axis in enumerate(axes.flatten()):\n    rnd_indx = np.random.randint(0, len(os.listdir(PATH)))\n    img = plt.imread(PATH + images[rnd_indx])\n    impath.append(PATH + images[rnd_indx])\n    imgplot = axis.imshow(img)\n    axis.set_title(images[rnd_indx])\n    axis.set_axis_off()\nfor indx, axis in enumerate(axes2.flatten()):\n#     print(indx)\n    \n    eimg = adjust_sharpness(impath[indx],2.1)\n    eimg = adjust_contrast(eimg,0.4)\n    \n    eimgplot = axis.imshow(eimg)\n    axis.set_title(\"enh\")\n    axis.set_axis_off()\n\n    \nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n","e255739a":"### *I don't know why increasing sharpness and decreasing contrast [by certain levels] decreases FID, can someone provide explanation? also I tried to vary brightness, but results were bad on either side.*","8bfce4e5":"### In this kernel I show, how i decreased my FID from 58 to 50 by varying sharpness and contrast of Images","b9718570":"*MFID Evaluation*","2f0d6637":"*Imports*","0198f17a":"### *Initial FID - 58.08022394926127*","c64375e9":"### *Decreased FID - 50.58054230322318*","69d3f1d9":"### *See that the Images are pretty bad though*","9b80ef90":"### *Did a grid search and found sharpness=2.1 and contrast = 0.4 is optimal for decrease in FID for my Images*","bd8d7f71":"*ImageEnhance functions borrowed from http:\/\/www.blog.pythonlibrary.org\/2017\/10\/24\/enhancing-photos-with-python\/*"}}