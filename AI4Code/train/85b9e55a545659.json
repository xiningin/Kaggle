{"cell_type":{"827c3737":"code","f1f977f4":"code","23fdd7fb":"code","7378b217":"code","8f1357c2":"code","09a333c3":"code","46da7451":"code","db04c58c":"code","83255289":"code","0934d76e":"code","142ffdc1":"code","397a4bb8":"code","2293bbe8":"code","8d548363":"code","e78a7d7c":"code","4e291a75":"code","bfa3040e":"code","23491c86":"code","5972b8ae":"code","140d4c66":"code","2eea500a":"code","dfaf2a19":"code","6d96d218":"code","11c20c2f":"code","105fb3f1":"code","ec46ece0":"code","6e405d37":"code","4fe95010":"code","72105a60":"code","3906c0d7":"code","77df6743":"code","2b932e62":"markdown","30cb5df7":"markdown","eda995ca":"markdown","7257edc9":"markdown","e6f6e323":"markdown","18d7fe7a":"markdown","1461b07f":"markdown","08611cf1":"markdown","07a6c26b":"markdown","6b565001":"markdown","7ae6a67b":"markdown","7fd05e6c":"markdown","c7a285dc":"markdown","94f62991":"markdown"},"source":{"827c3737":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f1f977f4":"from sklearn.linear_model import LinearRegression\nimport sklearn.model_selection\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport statsmodels.stats.api as sms\nimport sklearn.metrics\nimport pylab as plt\nimport scipy\nfrom scipy import stats\nimport seaborn as sns\nsns.set_palette(\"bright\")\n%matplotlib inline","23fdd7fb":"df = pd.read_csv (r'\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/audi.csv')\nprint(df)","7378b217":"df.drop('tax', inplace=True, axis=1)","8f1357c2":"df.describe()","09a333c3":"df.dtypes","46da7451":"df['year'] = df.year.astype('category')\ndf['model'] = df.model.astype('category')\ndf['transmission'] = df.transmission.astype('category')\ndf['fuelType'] = df.fuelType.astype('category')","db04c58c":"df.dtypes","83255289":"df[df.isnull().any(axis=1)]","0934d76e":"numeric_df = df[['price','mileage', 'mpg', 'engineSize']].copy()","142ffdc1":"z_scores = stats.zscore(numeric_df)\nabs_z_scores = np.abs(z_scores)\nfiltered_entries = (abs_z_scores < 3).all(axis=1)\nnew_df = df[filtered_entries].copy()","397a4bb8":"new_df.describe()","2293bbe8":"for i in ['mileage','mpg', 'engineSize']:\n  fig, axes = plt.subplots(1, 3, figsize=(20, 5), sharey=True)\n  fig.suptitle(i)\n  sns.scatterplot(ax=axes[0], data=df, x=\"price\", y=i)\n  axes[0].set_title('before deleting outliers')\n  sns.scatterplot(ax=axes[1], data=new_df, x=\"price\", y=i)\n  axes[1].set_title('after deleting outliers')\n  \n  \n  sns.scatterplot(data=df, x=\"price\", y=i)\n  sns.scatterplot(data=new_df, x=\"price\", y=i)\n  axes[2].set_title('on one plot')","8d548363":"print(len(new_df), len(df))","e78a7d7c":"for i in ['mileage','mpg', 'engineSize']:\n  sns.set_style(\"whitegrid\")\n  fig, axes = plt.subplots(1, 2, figsize=(20, 5), sharey=True)\n  fig.suptitle(i)\n  sns.boxplot(ax=axes[0], data=df, x=i)\n  axes[0].set_title('before deleting outliers')\n  sns.boxplot(ax=axes[1], data=new_df, x=i)\n  axes[1].set_title('after deleting outliers')","4e291a75":"for i in ['price', 'mileage','mpg', 'engineSize']:\n  fig, (ax1, ax2) = plt.subplots(1, 2, sharex=True, sharey=True, figsize=(20, 5))\n  fig.suptitle(i)\n  ax1.hist(df[i])\n  ax1.set_title('before deleting outliers')\n  ax2.hist(new_df[i])\n  ax2.set_title('after deleting outliers')","bfa3040e":"for i in ['price', 'mileage','mpg', 'engineSize']:\n  sns.set_style(\"whitegrid\")\n  fig, axes = plt.subplots(1, 2, figsize=(20, 5), sharey=True)\n  fig.suptitle(i)\n  sns.distplot(df[i], ax=axes[0], hist=True, kde=True, bins=int(180\/5), hist_kws={'edgecolor':'black'}, kde_kws={'linewidth': 4})\n  axes[0].set_title('before deleting outliers')\n  sns.distplot(new_df[i], ax=axes[1], hist=True, kde=True, bins=int(180\/5), hist_kws={'edgecolor':'black'}, kde_kws={'linewidth': 4})\n  axes[1].set_title('after deleting outliers')","23491c86":"new_df['log_price'] = np.log(new_df['price']) ","5972b8ae":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 5))\nfig.suptitle('price')\nax1.hist(new_df['price'])\nax1.set_title('before log')\nax2.hist(new_df['log_price'])\nax2.set_title('after log')","140d4c66":"new_df.head()","2eea500a":"cols = new_df.columns.tolist()\n\ncols = ['log_price', 'engineSize', 'mileage', 'mpg', 'model', 'year', 'transmission', 'fuelType']\n\nnew_df = new_df[cols]\n\nnew_df.head()","dfaf2a19":"# Correlations of features with target variable\ncorrelations = new_df.corr(method='kendall')\ncorrelations['log_price']","6d96d218":"# Plot correlation matrix\nfig_1 = plt.figure(figsize=(12, 10))\nnew_correlations = new_df.corr(method='kendall')\nsns.heatmap(new_correlations, annot=True, cmap='Greens', annot_kws={'size': 8})\nplt.title('Correlation Matrix')\nplt.show()","11c20c2f":"new_df[\"model_cat\"] = new_df[\"model\"].cat.codes\nnew_df[\"year_cat\"] = new_df[\"year\"].cat.codes\nnew_df[\"transmission_cat\"] = new_df[\"transmission\"].cat.codes\nnew_df[\"fuelType_cat\"] = new_df[\"fuelType\"].cat.codes","105fb3f1":"# Create X, y \nX = new_df.iloc[:, 1:4]\nones = np.ones([len(new_df), 1])\nX = np.concatenate((ones, X), axis=1)\ny = new_df.iloc[:, 0:1].values\n\nmodel = sm.OLS(y, X)\n\nresults = model.fit()","ec46ece0":"print(results.summary(yname='log_price', xname = ['const', 'engineSize', 'mileage', 'mpg']))","6e405d37":"cols_2 = new_df.columns.tolist()\n\ncols_2 = ['log_price', 'mileage', 'mpg', 'engineSize', 'model_cat', 'year_cat', 'transmission_cat', 'fuelType_cat']\n\nnew_df2 = new_df[cols_2].copy()","4fe95010":"cols_2 = new_df.columns.tolist()\n\ncols_2 = ['log_price', 'mileage', 'mpg', 'engineSize', 'model_cat', 'year_cat', 'transmission_cat', 'fuelType_cat']\n\nnew_df2 = new_df[cols_2].copy()\n\n# Create X, y \nX_2 = new_df2.iloc[:, 1:].values\nones = np.ones([len(new_df2), 1])\nX_2 = np.concatenate((ones, X_2), axis=1)\ny = new_df2.iloc[:, 0:1].values\n\nreg_2 = LinearRegression().fit(X_2, y)\n\nmodel2 = sm.OLS(y, X_2)\n\nresults2 = model2.fit()","72105a60":"print(results2.summary(yname='log_price', xname = ['const', 'mileage', 'mpg', 'engineSize', 'model_cat', 'year_cat', 'transmission_cat', 'fuelType_cat']))","3906c0d7":"X_2 = new_df2.iloc[:, 1:].values\nones = np.ones([len(new_df2), 1])\nX_2 = np.concatenate((ones, X_2), axis=1)\ny = new_df2.iloc[:, 0:1].values\n\nX_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(X_2, y, test_size=0.4, random_state=0)\n\nmodel3 = sm.OLS(y_train, X_train)\n\nresults3 = model3.fit()\n\nyhat = results3.predict(X_test)","77df6743":"mae = sklearn.metrics.mean_absolute_error(y_test, yhat)\nprint('MAE: %.3f' % mae)","2b932e62":"# Categorical variables preparation","30cb5df7":"There is no such variables, great!","eda995ca":"# # With categorical variables","7257edc9":"Checking types of different variables","e6f6e323":"Basic descriptive statistics","18d7fe7a":"Importing all necessary packages","1461b07f":"# Linear regression","08611cf1":"# Preparing numeric variables, outliers detection","07a6c26b":"Check it there any ommited variables","6b565001":"# Test and train sets","7ae6a67b":"We can see that we deleted approximately 500 observations which is not critical for 10 hundred obresvations.","7fd05e6c":"As I do not know what does 'tax' means in that dataset, I will delete it","c7a285dc":"Should convert model, year, transmission and fuelType to 'category' type","94f62991":"# # Without categorical variables"}}