{"cell_type":{"0e0f5d66":"code","98f60252":"code","494108e6":"code","49d03863":"code","42ad25ed":"code","fc4f6170":"code","5ed73a83":"code","9c6c4b4e":"code","cec48fa5":"code","f657ff71":"code","dae43c23":"code","7b5d8fb6":"code","87a6f3e0":"code","6b74be64":"code","83bd2509":"code","942917de":"code","ac6af781":"code","3174ae8c":"code","d877695f":"code","771e789c":"code","c4da259a":"code","e8322df3":"code","78a605ab":"code","dc5f8a2a":"code","0e4e1fe6":"code","611fa037":"code","3ad02ba9":"code","ea7150ba":"code","d21b918b":"code","84a2a35c":"code","7438c0ca":"code","a63bab08":"code","22a80e08":"code","073524af":"code","8a6ee051":"code","75393373":"code","016397b4":"code","bfdfe7e1":"code","737b69e8":"code","02cad0d5":"code","5cb5c690":"code","cc7757ab":"code","9ee35283":"code","7838a6cc":"code","6a6dc589":"code","ed54342b":"code","e8ede08f":"code","e90493bd":"markdown"},"source":{"0e0f5d66":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport seaborn as sns\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","98f60252":"df=pd.read_csv(\"..\/input\/fake-data\/fake_reg.csv\")","494108e6":"df.head()","49d03863":"sns.pairplot(df)","42ad25ed":"from sklearn.model_selection import train_test_split","fc4f6170":"X=df[[\"feature1\",\"feature2\"]].values\ny=df[\"price\"].values","5ed73a83":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=42)","9c6c4b4e":"X_train.shape","cec48fa5":"y_train.shape","f657ff71":"X_train","dae43c23":"X_test","7b5d8fb6":"from sklearn.preprocessing import MinMaxScaler","87a6f3e0":"help(MinMaxScaler)","6b74be64":"scaler=MinMaxScaler()\nscaler.fit(X_train)","83bd2509":"X_train=scaler.transform(X_train)\nX_test=scaler.transform(X_test)","942917de":"X_train","ac6af781":"X_test","3174ae8c":"X_train.min()","d877695f":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense","771e789c":"help(Dense)","c4da259a":"#One way of declaring model\n\nmodel=Sequential([Dense(4,activation=\"relu\"),\n                 Dense(2,activation=\"relu\"),\n                 Dense(1) \n                 ])","e8322df3":"#second way of decalring model\n\nmodel=Sequential()\n\nmodel.add(Dense(4,activation=\"relu\"))\nmodel.add(Dense(4,activation=\"relu\"))\nmodel.add(Dense(4,activation=\"relu\"))\n\nmodel.add(Dense(1))\n\nmodel.compile(optimizer=\"rmsprop\",loss=\"mse\")","78a605ab":"model.fit(x=X_train,y=y_train,epochs=250)","dc5f8a2a":"loss_df=pd.DataFrame(model.history.history)","0e4e1fe6":"loss_df.plot()\n","611fa037":"#Time to evaluate model","3ad02ba9":"model.evaluate(X_test,y_test,verbose=0)","ea7150ba":"test_predictions=model.predict(X_test)","d21b918b":"test_predictions","84a2a35c":"test_predictions=pd.Series(test_predictions.reshape(300,))","7438c0ca":"test_predictions","a63bab08":"pred_df=pd.DataFrame(y_test,columns=[\"Test Ture Y\"])","22a80e08":"pred_df=pd.concat([pred_df,test_predictions],axis=1)","073524af":"pred_df","8a6ee051":"pred_df.columns=[\"Test True Y\",\"Predictions\"]","75393373":"pred_df","016397b4":"sns.scatterplot(x=\"Test True Y\",y=\"Predictions\",data=pred_df)","bfdfe7e1":"from sklearn.metrics import mean_absolute_error,mean_squared_error","737b69e8":"mean_absolute_error(pred_df[\"Test True Y\"],pred_df[\"Predictions\"])","02cad0d5":"df.describe()","5cb5c690":"#let's try any value\n\nnew_gem=[[998,100]]","cc7757ab":"new_gem=scaler.transform(new_gem)","9ee35283":"model.predict(new_gem)","7838a6cc":"from tensorflow.keras.models import load_model","6a6dc589":"#Saving the model to use later on!\nmodel.save(\"my_fakedata_model.h5\")","ed54342b":"#Loading the saved model\nlater_model=load_model(\"my_fakedata_model.h5\")","e8ede08f":"later_model.predict(new_gem)","e90493bd":"Thanks! Upvote if you like and want more notekbooks like this"}}