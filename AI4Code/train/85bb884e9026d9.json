{"cell_type":{"3fbeb45e":"code","fc58ea8b":"code","0ccdd19d":"code","f087a1b4":"code","604f570b":"code","63a7ad02":"code","851cf1c6":"code","58d894db":"code","3704ead8":"code","0d3a8fdf":"code","cf5a275e":"code","81b75851":"code","9b19a322":"code","44a630a0":"code","d255c8a0":"code","dfc34d79":"code","2db11253":"code","0a796415":"code","3084249c":"code","05ff627b":"code","8dfa3c15":"code","dff0b641":"code","f075b35b":"markdown","00fa8a39":"markdown","b56f0b6e":"markdown","3d8ce977":"markdown","987c6f49":"markdown","0f2d0b68":"markdown","85cae66b":"markdown","71cd3f48":"markdown","fec67ca1":"markdown","4c2b01ac":"markdown","c6e206a4":"markdown","15cfe28d":"markdown","0c0defd1":"markdown","fd8dc577":"markdown","36808c1b":"markdown","030d6763":"markdown","b3aae3b6":"markdown","b1792c37":"markdown","44ea3719":"markdown","e5d26392":"markdown","c50aa481":"markdown","598fca81":"markdown","78531363":"markdown","83628720":"markdown","33b9fcff":"markdown","3c978241":"markdown","a29d7a89":"markdown","3c398047":"markdown","3f5f4ba9":"markdown"},"source":{"3fbeb45e":"pip install visualkeras","fc58ea8b":"import os\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport tensorflow as tf\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom tensorflow.python import keras\nfrom tensorflow.python.keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, Activation, MaxPool2D, Flatten, Dropout, BatchNormalization\nfrom keras.optimizers import RMSprop,Adam\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport visualkeras\nfrom keras.utils import plot_model\nimport math\nfrom keras.optimizers import RMSprop","0ccdd19d":"Img_shape = 28\nNum_classes = 10\ntest_size = 0.25\nrandom_state = 1234\nNo_epochs = 100\nBatch_size = 128","f087a1b4":"train_dataset = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_train.csv\")\ntest_dataset = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_train.csv\")","604f570b":"class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal',      'Shirt',   'Sneaker',  'Bag',   'Ankle boot']","63a7ad02":"def data_preprocessing(raw):\n    label = tf.keras.utils.to_categorical(raw.label, 10)\n    num_images = raw.shape[0]\n    x_as_array = raw.values[:,1:]\n    x_shaped_array = x_as_array.reshape(num_images, 28, 28, 1)\n    image = x_shaped_array \/ 255\n    return image, label\n\nX, y = data_preprocessing(train_dataset)\nX_test, y_test = data_preprocessing(test_dataset)","851cf1c6":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=test_size, random_state=random_state)","58d894db":"\n# We are using sequential model which is linear stack of layers. The Sequential model is initialized first and then using add method we add rest of the layers\n\nmodel = tf.keras.Sequential()\n\n# First layer, which has a 2D Convolutional layer with kernel size as 3x3 and Max pooling operation \nmodel.add(Conv2D(32, (3,3), padding='same', input_shape=(28,28, 1)))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))\n\n# Second layer, which has a 2D Convolutional layer with kernel size as 3x3 & ReLU activation and Max pooling operation \nmodel.add(Conv2D(64, (3,3), padding='same', activation=tf.nn.relu))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))\n\n# Fully connected layer with ReLU activation function \nmodel.add(Flatten())\nmodel.add(Dense(128, activation=tf.nn.relu))\n\n# Output layer with softmax activation function\nmodel.add(Dense(10, activation=tf.nn.softmax))","3704ead8":"model.summary()","0d3a8fdf":"visualkeras.layered_view(model)","cf5a275e":"plot_model(model, to_file='model.png')","81b75851":"# Optimizer specified here is adam, loss is categorical crossentrophy and metric is accuracy\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.categorical_crossentropy,\n              metrics=['accuracy'])","9b19a322":"train_model = model.fit(X_train, y_train,\n                  batch_size=Batch_size,\n                  epochs=No_epochs,\n                  verbose=1,\n                  validation_data=(X_val, y_val))","44a630a0":"score = model.evaluate(X_test, y_test, steps=math.ceil(10000\/32))\n# checking the test loss and test accuracy\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","d255c8a0":"model = Sequential()\n\nmodel.add(Conv2D(32, 3, padding='same', activation='relu',kernel_initializer='he_normal', input_shape=(28,28, 1)))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))\n\n\nmodel.add(Conv2D(64, 3, padding='same', activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Dropout(0.3))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128, 3, padding='same', activation='relu'))\nmodel.add(Conv2D(128, 3, padding='same', activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Dropout(0.4))\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(512, activation='relu'))\n\nmodel.add(Dropout(0.25))\nmodel.add(Dense(10, activation='softmax'))","dfc34d79":"visualkeras.layered_view(model)","2db11253":"plot_model(model, to_file='model.png')","0a796415":"optimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)\n\nmodel.compile(optimizer = optimizer,\n              loss=keras.losses.categorical_crossentropy, metrics=[\"accuracy\"])","3084249c":"train_model = model.fit(X_train, y_train,\n                  batch_size=Batch_size,\n                  epochs=No_epochs,\n                  verbose=1,\n                  validation_data=(X_val, y_val))","05ff627b":"score = model.evaluate(X_test, y_test, steps=math.ceil(10000\/32))\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","8dfa3c15":"labels = {0 : \"T-shirt\/top\", 1: \"Trouser\", 2: \"Pullover\", 3: \"Dress\", 4: \"Coat\",\n          5: \"Sandal\", 6: \"Shirt\", 7: \"Sneaker\", 8: \"Bag\", 9: \"Ankle Boot\"}\n\ny_pred = model.predict(X_test)\nX_test__ = X_test.reshape(X_test.shape[0], 28, 28)\n\nfig, axis = plt.subplots(4, 4, figsize=(12, 14))\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(X_test__[i], cmap='binary')\n    ax.set(title = f\"Real Class is {labels[y_test[i].argmax()]}\\nPredict Class is {labels[y_pred[i].argmax()]}\");","dff0b641":"y_pred = model.predict(X_test)\ny_pred_classes = np.argmax(y_pred, axis = 1)\ny_true = np.argmax(y_test, axis = 1)\nconfusion_mtx = confusion_matrix(y_true, y_pred_classes) \n\nf,ax = plt.subplots(figsize = (12,12))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.1, cmap = \"gist_yarg_r\", linecolor=\"white\", fmt='.0f', ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","f075b35b":"### 7. Visualizing the results","00fa8a39":"*A more elaborate and labelled way of visualization*","b56f0b6e":"*Lets add Batch Normalization and Dropout layers (To avoid overfitting) to the model.*","3d8ce977":"### 6. Tuning the Model","987c6f49":"### 4. Train the model","0f2d0b68":"*Tweaking the learning rate in adam optimizer for better accuracy*","85cae66b":"*Plotting 16 random images with predicted and real class of clothing*","71cd3f48":"Install **\"visualkeras\"** a python library to visualize neural network architecture ","fec67ca1":"Please do *upvote* if you liked the notebook ! ","4c2b01ac":"*Setting the parameters and compiling our model*","c6e206a4":"### 3. Pre-processing the data[[1]](https:\/\/www.kaggle.com\/gpreda\/cnn-with-tensorflow-keras-for-fashion-mnist)","15cfe28d":"*Plotting the confusion matrix*","0c0defd1":"> Model's summary","fd8dc577":"*Fit and Run the model with training and validation set of the data*","36808c1b":"*3D visualization of our CNN model architecture*","030d6763":"*Lets keep the CNN model simple initially.*","b3aae3b6":"Check out the reference materials for more information about **Convolutional Neural Networks**.  ","b1792c37":"# Convolutional Neural Network(CNN) for Fashion MNIST with Tensorflow Keras","44ea3719":"Setting the model *parameters*","e5d26392":"We got accuracy of *98.03 %* here, now lets try to add droput and batch normalization layers as our model is overfitting (we were getting the training accuracy of *100 %*)","c50aa481":"### 2. Loading the [Zolando Fashion MNIST](https:\/\/github.com\/zalandoresearch\/fashion-mnist) Data","598fca81":"> ### Convolutional Neural Network","78531363":"*Reading and Labeling the 10 Clothing categories*","83628720":"Great ! we got an accuracy of *98.11 %* which is better than that of our earlier model. ","33b9fcff":"### 5. Evaluate the model","3c978241":"![Kagg.jpg](attachment:Kagg.jpg)","a29d7a89":"> **References**\n\n1. [CNN with Tensorflow|Keras for Fashion MNIST](https:\/\/www.kaggle.com\/gpreda\/cnn-with-tensorflow-keras-for-fashion-mnist) by Gabriel Preda\n2. [Visualkeras](https:\/\/github.com\/paulgavrikov\/visualkeras\/blob\/master\/examples\/vgg16.py), Python package to help visualize Keras neural network architectures\n3. [A Comprehensive Guide to Convolutional Neural Networks](https:\/\/towardsdatascience.com\/a-comprehensive-guide-to-convolutional-neural-networks-the-eli5-way-3bd2b1164a53) by Sumit Saha\n4. [Tinker with Neural Network](https:\/\/playground.tensorflow.org), a web based source to learn about Neural Networks \n5. [Fashion-MNIST](https:\/\/github.com\/zalandoresearch\/fashion-mnist), resources by Zolando research team","3c398047":"*Splitting the training data into training and validation set into a split ratio of 75-25 %*","3f5f4ba9":"### 1. Loading all necessary *libraries* and *packages* "}}