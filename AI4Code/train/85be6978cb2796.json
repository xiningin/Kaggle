{"cell_type":{"219d4024":"code","366fc80c":"code","b38f63f0":"code","f0b71dfe":"code","95a902b2":"code","a1e5249d":"code","8f799340":"code","0fadb33a":"code","f3694c2b":"code","cd821e7f":"code","a8fd9b79":"code","2057dc36":"code","20bd5863":"code","461b4adf":"code","c3f2a55e":"code","528aad4a":"code","fce950cd":"code","b87126a5":"code","24415318":"code","5d882741":"code","a46110e5":"code","dc6f55cc":"code","38eea868":"code","68c904b6":"code","b5cfd224":"code","30766108":"code","d4e087c6":"code","37fbbbe2":"code","23df3979":"code","728b6c76":"code","e2c666fe":"code","af9f1e32":"code","3e353ead":"code","cd9d6c4f":"code","3971621f":"code","b03c9293":"code","9b2500d6":"code","8b220151":"code","8225213b":"code","7ac3ac68":"code","c48d94c5":"code","4b411924":"markdown","b595ef27":"markdown","75a4444e":"markdown","5ef961f1":"markdown","f138be67":"markdown","0dd68faf":"markdown","cfb9cb1a":"markdown","bbe5d6b3":"markdown","05928a1a":"markdown","2725bc5c":"markdown","c2bbb000":"markdown","1bcac7a0":"markdown","4cf3fe42":"markdown","1f922ce2":"markdown","1f94fb7d":"markdown","42109589":"markdown","aedb2fcf":"markdown","2567fe83":"markdown","6d7d6c98":"markdown","65e72cbc":"markdown","3860316c":"markdown","240fbd98":"markdown","69b1cb62":"markdown","525a2f4b":"markdown"},"source":{"219d4024":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nplt.style.use('fivethirtyeight')\nfrom sklearn.decomposition import PCA\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV,train_test_split\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import VotingClassifier\nwarnings.filterwarnings(message='DeprecationWarning',action='ignore')","366fc80c":"train=pd.read_csv('..\/input\/train.csv').copy()\ntest=pd.read_csv('..\/input\/test.csv').copy()","b38f63f0":"train.shape","f0b71dfe":"train.info()","95a902b2":"train.describe()","a1e5249d":"train.isnull().sum()","8f799340":"train=train.drop(['Id'],axis=1)","0fadb33a":"\nfor i,col in enumerate(train.iloc[:,:9].columns):\n    ax=plt.subplot(3,3,i+1)\n    sns.boxplot(x='Cover_Type',y=col,data=train,ax=ax) \nplt.subplots_adjust(top = 1)\nplt.gcf().set_size_inches(13,10)","f3694c2b":"plt.figure(figsize=(9,7))\nsns.heatmap(train.iloc[:,:10].corr(),annot=True,linewidths=.5)\nplt.show()\n","cd821e7f":"pca=PCA(n_components=3)\npca_results=pca.fit_transform(train.drop('Cover_Type',axis=1))\ntp, ax = plt.subplots(figsize=(20,15))\ntemp = ax.scatter(pca_results[:,0], pca_results[:,1], c=train.Cover_Type,s=700\/pca_results[:,2] ,cmap=plt.cm.get_cmap('rainbow', 8))\ntp.colorbar(temp)\nplt.show()","a8fd9b79":"plt.cm.get_cmap('rainbow', 8)","2057dc36":"from mpl_toolkits.mplot3d import Axes3D\nfig=plt.figure(figsize=(10,7))\n\n#pca_results=pca.fit_transform(train.iloc[:,:9])\nax=Axes3D(fig)\nax.scatter(pca_results[:,0],pca_results[:,1],pca_results[:,2],cmap=plt.cm.get_cmap('rainbow', 8),c=train.Cover_Type)\n","20bd5863":"X_train,X_test,y_train,y_test=train_test_split(train.drop('Cover_Type',axis=1),train['Cover_Type'])","461b4adf":"rf=RandomForestClassifier(random_state=0)\nrf.fit(X_train,y_train)\ny_pre=rf.predict(X_test)\nacc=metrics.accuracy_score(y_test,y_pre)\ncv=cross_val_score(rf,train.drop('Cover_Type',axis=1),train['Cover_Type'],cv=5)\nprint(\"Mean cross validation score = \",cv.mean())\nprint('accuracy is ',acc)\nprint(metrics.classification_report(y_test,y_pre))","c3f2a55e":"y_train.value_counts()\/len(y_train)*100-pd.Series(y_pre).value_counts()\/len(y_pre)*100","528aad4a":"gb=GradientBoostingClassifier()\ngb.fit(X_train,y_train)\nypre=gb.predict(X_test)\nacc=metrics.accuracy_score(y_test,ypre)\ncv=cross_val_score(gb,train.drop('Cover_Type',axis=1),train['Cover_Type'],cv=5)\nprint(\"cross val score is \",cv.mean())\nprint('accuracy = ',acc)","fce950cd":"y_train.value_counts()\/len(y_train)*100-pd.Series(ypre).value_counts()\/len(ypre)*100","b87126a5":"print(metrics.classification_report(y_test,ypre))","24415318":"train.head()","5d882741":"\n\n# train.head()\ntrain['HorizontalHydrology_HorizontalFire'] = (train['Horizontal_Distance_To_Hydrology']+train['Horizontal_Distance_To_Fire_Points'])\ntrain['Neg_HorizontalHydrology_HorizontalFire'] = (train['Horizontal_Distance_To_Hydrology']-train['Horizontal_Distance_To_Fire_Points'])\ntrain['HorizontalHydrology_HorizontalRoadways'] = (train['Horizontal_Distance_To_Hydrology']+train['Horizontal_Distance_To_Roadways'])\ntrain['Neg_HorizontalHydrology_HorizontalRoadways'] = (train['Horizontal_Distance_To_Hydrology']-train['Horizontal_Distance_To_Roadways'])\ntrain['HorizontalFire_Points_HorizontalRoadways'] = (train['Horizontal_Distance_To_Fire_Points']+train['Horizontal_Distance_To_Roadways'])\ntrain['Neg_HorizontalFire_Points_HorizontalRoadways'] = (train['Horizontal_Distance_To_Fire_Points']-train['Horizontal_Distance_To_Roadways'])\n\ntrain['Neg_Elevation_Vertical'] = train['Elevation']-train['Vertical_Distance_To_Hydrology']\ntrain['Elevation_Vertical'] = train['Elevation']+train['Vertical_Distance_To_Hydrology']\n\ntrain['mean_hillshade'] =  (train['Hillshade_9am']  + train['Hillshade_Noon'] + train['Hillshade_3pm'] ) \/ 3\n\ntrain['Mean_HorizontalHydrology_HorizontalFire'] = (train['Horizontal_Distance_To_Hydrology']+train['Horizontal_Distance_To_Fire_Points'])\/2\ntrain['Mean_HorizontalHydrology_HorizontalRoadways'] = (train['Horizontal_Distance_To_Hydrology']+train['Horizontal_Distance_To_Roadways'])\/2\ntrain['Mean_HorizontalFire_Points_HorizontalRoadways'] = (train['Horizontal_Distance_To_Fire_Points']+train['Horizontal_Distance_To_Roadways'])\/2\n\ntrain['MeanNeg_Mean_HorizontalHydrology_HorizontalFire'] = (train['Horizontal_Distance_To_Hydrology']-train['Horizontal_Distance_To_Fire_Points'])\/2\ntrain['MeanNeg_HorizontalHydrology_HorizontalRoadways'] = (train['Horizontal_Distance_To_Hydrology']-train['Horizontal_Distance_To_Roadways'])\/2\ntrain['MeanNeg_HorizontalFire_Points_HorizontalRoadways'] = (train['Horizontal_Distance_To_Fire_Points']-train['Horizontal_Distance_To_Roadways'])\/2\n\ntrain['Slope2'] = np.sqrt(train['Horizontal_Distance_To_Hydrology']**2+train['Vertical_Distance_To_Hydrology']**2)\ntrain['Mean_Fire_Hydrology_Roadways']=(train['Horizontal_Distance_To_Fire_Points'] + train['Horizontal_Distance_To_Hydrology'] + train['Horizontal_Distance_To_Roadways']) \/ 3\ntrain['Mean_Fire_Hyd']=(train['Horizontal_Distance_To_Fire_Points'] + train['Horizontal_Distance_To_Hydrology']) \/ 2 \n\ntrain[\"Vertical_Distance_To_Hydrology\"] = abs(train['Vertical_Distance_To_Hydrology'])\n\ntrain['Neg_EHDtH'] = train.Elevation-train.Horizontal_Distance_To_Hydrology*0.2\n","a46110e5":"# test.head()\ntest['HorizontalHydrology_HorizontalFire'] = (test['Horizontal_Distance_To_Hydrology']+test['Horizontal_Distance_To_Fire_Points'])\ntest['Neg_HorizontalHydrology_HorizontalFire'] = (test['Horizontal_Distance_To_Hydrology']-test['Horizontal_Distance_To_Fire_Points'])\ntest['HorizontalHydrology_HorizontalRoadways'] = (test['Horizontal_Distance_To_Hydrology']+test['Horizontal_Distance_To_Roadways'])\ntest['Neg_HorizontalHydrology_HorizontalRoadways'] = (test['Horizontal_Distance_To_Hydrology']-test['Horizontal_Distance_To_Roadways'])\ntest['HorizontalFire_Points_HorizontalRoadways'] = (test['Horizontal_Distance_To_Fire_Points']+test['Horizontal_Distance_To_Roadways'])\ntest['Neg_HorizontalFire_Points_HorizontalRoadways'] = (test['Horizontal_Distance_To_Fire_Points']-test['Horizontal_Distance_To_Roadways'])\n\ntest['Neg_Elevation_Vertical'] = test['Elevation']-test['Vertical_Distance_To_Hydrology']\ntest['Elevation_Vertical'] = test['Elevation']+test['Vertical_Distance_To_Hydrology']\n\ntest['mean_hillshade'] =  (test['Hillshade_9am']  + test['Hillshade_Noon'] + test['Hillshade_3pm'] ) \/ 3\n\ntest['Mean_HorizontalHydrology_HorizontalFire'] = (test['Horizontal_Distance_To_Hydrology']+test['Horizontal_Distance_To_Fire_Points'])\/2\ntest['Mean_HorizontalHydrology_HorizontalRoadways'] = (test['Horizontal_Distance_To_Hydrology']+test['Horizontal_Distance_To_Roadways'])\/2\ntest['Mean_HorizontalFire_Points_HorizontalRoadways'] = (test['Horizontal_Distance_To_Fire_Points']+test['Horizontal_Distance_To_Roadways'])\/2\n\ntest['MeanNeg_Mean_HorizontalHydrology_HorizontalFire'] = (test['Horizontal_Distance_To_Hydrology']-test['Horizontal_Distance_To_Fire_Points'])\/2\ntest['MeanNeg_HorizontalHydrology_HorizontalRoadways'] = (test['Horizontal_Distance_To_Hydrology']-test['Horizontal_Distance_To_Roadways'])\/2\ntest['MeanNeg_HorizontalFire_Points_HorizontalRoadways'] = (test['Horizontal_Distance_To_Fire_Points']-test['Horizontal_Distance_To_Roadways'])\/2\n\ntest['Slope2'] = np.sqrt(test['Horizontal_Distance_To_Hydrology']**2+test['Vertical_Distance_To_Hydrology']**2)\ntest['Mean_Fire_Hydrology_Roadways']=(test['Horizontal_Distance_To_Fire_Points'] + test['Horizontal_Distance_To_Hydrology'] + test['Horizontal_Distance_To_Roadways']) \/ 3\ntest['Mean_Fire_Hyd']=(test['Horizontal_Distance_To_Fire_Points'] + test['Horizontal_Distance_To_Hydrology']) \/ 2 \n\ntest[\"Vertical_Distance_To_Hydrology\"] = abs(test['Vertical_Distance_To_Hydrology'])\n\ntest['Neg_EHDtH'] = test.Elevation-test.Horizontal_Distance_To_Hydrology*0.2\n","dc6f55cc":"scaler=MinMaxScaler()\nscaler.fit(train.drop('Cover_Type',axis=1))\nscaled_train=scaler.transform(train.drop('Cover_Type',axis=1))","38eea868":"X_train,X_test,y_train,y_test=train_test_split(scaled_train,train['Cover_Type'])\nrf=RandomForestClassifier(random_state=0)\nrf.fit(X_train,y_train)\ny_pre=rf.predict(X_test)\nacc=metrics.accuracy_score(y_test,y_pre)\ncv=cross_val_score(rf,train.drop('Cover_Type',axis=1),train['Cover_Type'],cv=5)\nprint(\"Mean cross validation score = \",cv.mean())\nprint('accuracy is ',acc)","68c904b6":"plt.figure(figsize=(10,15))\nsns.barplot(y=train.drop('Cover_Type',axis=1).columns,x=rf.feature_importances_)","b5cfd224":"from sklearn.model_selection import RandomizedSearchCV\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 200, num = 8,endpoint=False)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(20, 100, num = 8)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\n\nprint(random_grid)","30766108":"#rf1=RandomForestClassifier()\n#rf1_rand=RandomizedSearchCV(rf1,param_distributions=random_grid,n_iter=100,cv=3,n_jobs=-1)\n#rf1_rand.fit(X_train,y_train)\n#print(rf1_rand.best_params_)","d4e087c6":"accuracy=metrics.make_scorer(metrics.accuracy_score)","37fbbbe2":"#gcv=GridSearchCV(RandomForestClassifier(),param_grid=params,scoring=accuracy,n_jobs=1,cv=5)\n#gcv.fit(X_train,y_train)\n#gcv.best_score_","23df3979":"#gcv.best_params_","728b6c76":"rf=RandomForestClassifier(bootstrap=False,\n max_depth= 30,\n max_features= 'sqrt',\n min_samples_split= 3,\n n_estimators= 550,\n criterion='gini')\n\nrf.fit(X_train,y_train)\ny_pre=rf.predict(X_test)\ncv=cross_val_score(rf,X_test,y_test,cv=5)\nprint('accuracy score is ',metrics.accuracy_score(y_test,y_pre))\nprint('cv score is',cv.mean())","e2c666fe":"rf.score(X_train,y_train)","af9f1e32":"ex=ExtraTreesClassifier(n_estimators=950,random_state=0,max_features='sqrt',min_samples_split=3)\nex.fit(X_train,y_train)\ny_pre=ex.predict(X_test)\ncv=cross_val_score(ex,X_test,y_test,cv=5)\nprint('accuracy score is ',metrics.accuracy_score(y_test,y_pre))\nprint('cv score is',cv.mean())","3e353ead":"ex.score(X_train,y_train)","cd9d6c4f":"ex.score(X_test,y_test)","3971621f":"train_acc=[]\ntest_acc=[]\nfor this_c in [.1,1,10,15,20]:\n        clf = SVC(kernel = 'rbf', gamma = .5 ,C = this_c).fit(X_train, y_train)\n        train_acc.append(clf.score(X_train,y_train))\n        test_acc.append(clf.score(X_test,y_test))\n        \n        \nc=[.1,1,10,15,20]\nplt.figure()\nplt.plot(c,train_acc,color='r')\nplt.plot(c,test_acc,color='b')\nplt.gca().set_xlabel('C')\nplt.gca().set_ylabel('accuracy')\nplt.gca().legend(['train','test'])\nplt.show()","b03c9293":"train_acc=[]\ntest_acc=[]\nfor this_g in [.01,.1,.5,1,5]:\n        clf = SVC(kernel = 'rbf', gamma = this_g ,C =15 ).fit(X_train, y_train)\n        train_acc.append(clf.score(X_train,y_train))\n        test_acc.append(clf.score(X_test,y_test))\n        \n        \ng=[.01,.1,.5,1,5]\nplt.figure()\nplt.plot(g,train_acc,color='r')\nplt.plot(g,test_acc,color='b')\nplt.gca().set_xlabel('gamma')\nplt.gca().set_ylabel('accuracy')\nplt.gca().legend(['train','test'])\nplt.show()","9b2500d6":"clf=SVC(kernel='rbf',C=10,gamma=7).fit(X_train,y_train)\nprint('train set accuracy',clf.score(X_train,y_train))\nprint('test set accuracy',clf.score(X_test,y_test))","8b220151":"cross_val_score(clf,X_test,y_test,cv=5).mean()","8225213b":"vclf=VotingClassifier(estimators=[('svm',clf),('extra',ex),('rf',rf)],voting='hard')\nvclf.fit(X_train,y_train)\nprint('test set accuracy',vclf.score(X_test,y_test))\n","7ac3ac68":"scaler.fit(test.drop('Id',axis=1))\nscaled=scaler.fit_transform(test.drop('Id',axis=1))","c48d94c5":"y_pre=vclf.predict(scaled)\ndf=pd.DataFrame({'Id':test['Id'],'Cover_Type':y_pre},columns=['Id','Cover_Type'])\ndf.to_csv('submission4.csv',index=False)","4b411924":"\n## Improving our model..","b595ef27":"####   Tuning our model","75a4444e":"There is a strong negative correlation for hillshade_9am with hillshade_3pm.      \nThere is a strong positive correlation for Horizontal_Distance_To_Hydrology with Vertical_Distance_To_Hydrology ","5ef961f1":"### Is there any strong correlations ?","f138be67":"### Box plots","0dd68faf":"### Baseline model","cfb9cb1a":"### Final model","bbe5d6b3":".0-.19 very weak     \n.2-.39 - weak            \n.4-.59 - moderate        \n.6-.79 - strong           \n.8-1 - very strong         \n","05928a1a":"#### Final svc","2725bc5c":"## Loading datasets","c2bbb000":"###### Is there any missing values?","1bcac7a0":"#####  Feature engineering","4cf3fe42":"####  Minmax scaling","1f922ce2":" ### Basic informations about the data","1f94fb7d":"####  General guidelines for correlation values are given below,","42109589":"### NO.","aedb2fcf":"### Voting classifier","2567fe83":"using minmax scaling has very slightly improved our model.","6d7d6c98":"### Support vector machine","65e72cbc":"####  Gradient Boosting","3860316c":"#### ploting Feature importances","240fbd98":"### GridSeachCV\n","69b1cb62":"#### Random forest","525a2f4b":"### Principle component analysis"}}