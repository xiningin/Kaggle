{"cell_type":{"fd471d66":"code","8b146a0e":"code","a1e72982":"code","40bbc916":"code","3f6df8bc":"code","3b2e6c4c":"code","4286c121":"code","2c274e72":"code","8e8e81d4":"code","13d96a30":"code","e28d1a61":"code","23e6f1e0":"code","dd0dd522":"code","7a98838c":"code","056c2072":"code","bdba94ed":"code","3f28b003":"code","8291b481":"code","90cc17d8":"code","be3c385d":"code","680866f5":"code","47d434c9":"code","3d66d4ea":"code","a08c3497":"code","e094eb67":"code","a31f0e3c":"code","b170f22c":"code","41d83328":"code","bcdd85dc":"code","9c3d4850":"code","01054062":"code","15b417df":"code","d5c602a3":"code","ab620310":"code","42596e11":"code","9e85040d":"code","34b2b36c":"code","a993b997":"code","da70a5f2":"code","d7b317b1":"code","e7f046c4":"code","bc4ba26b":"markdown","1e267e5e":"markdown","4fe37620":"markdown","d08032fa":"markdown","b9cd39df":"markdown","553daeb4":"markdown"},"source":{"fd471d66":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b146a0e":"x=12\nx","a1e72982":"print (\"sjlkdlkds\")","40bbc916":"v=np.array([1,2,3]) #1-D array, vector","3f6df8bc":"print (str(v))","3b2e6c4c":"A=np.array([[1,2],[3,4]]) #2-D array, matrix","4286c121":"print (A)","2c274e72":"v[0]","8e8e81d4":"v[1:2]","13d96a30":"A[0,0]","e28d1a61":"A[:,0]  #1st column","23e6f1e0":"A[1,:] #2nd row\nprint (A[1,:])","dd0dd522":"A[1:2,1:2]","7a98838c":"Z=np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])","056c2072":"Z","bdba94ed":"Z[1:3,[0,2,3]]","3f28b003":"Z[1,2]=100","8291b481":"Z","90cc17d8":"tt=Z.shape","be3c385d":"tt[0]","680866f5":"Z.shape[0] #number of rows","47d434c9":"Z.shape[1] #number of columns","3d66d4ea":"#display the rows of M, M is a matrix (array)\ndef ex1(M):\n    m=M.shape[0]\n    for x in list(range(m)):\n        print (str(x)+\" row \"+str(M[x,:]))","a08c3497":"ex1(Z)","e094eb67":"def ex1col(M):\n    m=M.shape[1]\n    for x in list(range(m)):\n        print (str(x)+\" column \"+str(M[:,x]))\n\nex1col(Z)","a31f0e3c":"def ex1colrow(M):\n    mrow=M.shape[0]\n    mcol=M.shape[1]\n    \n    for x in range(mrow):\n        for y in range(mcol):\n            print (\"(\"+str(x)+\",\"+str(y)+\"): \"+str(M[x,y]))\nex1colrow(Z)","b170f22c":"list(range(10))","41d83328":"#Step 1\n#Define the array Data\nData=np.array([[2,7.057037],[10,6.39693],[3,5.937536],[22,6.478509],[6,6.20859],[7,6.972606],[10,6.851185],\n[8,7.13966], [4,6.22059]])","bcdd85dc":"\nprint(Data) #1st column tenure, 2nd column salary","9c3d4850":" #Some help for Step 2:\nnp.ones((Data.shape[0],2)) #create a column vector of 1 with as many rows as in Data","01054062":"#Step 2: define A and b\nb = Data[:,Data.shape[1]-1] #Alternative b = Data[:,1]\nA = np.ones((Data.shape[0],2)) #A matrix with all 1's, as many rows as Data, with 2 columns\nprint (A)\nA[:,1]=Data[:,0] #set the second column of A to the first of column of Data\nprint (\"After changing A=\"+str(A))","15b417df":"#Alternative for constructing A in Step 2\nnp.concatenate([np.zeros((Data.shape[0],1)),np.reshape(Data[:,0],(-1,1))], axis=1)\n#Explanation\n#np.concatenate([A1,A2],axis=1) creates a matrix [A1,A2]\n#A1, A2 have to have the same number of rows\n#np.reshape(v,(-1,1)) transforms a vector v into a matrix with 1 column and as many rows as elements in \n#v\n#Data[:,0] is a vector","d5c602a3":"#Step 3:\n[thetas,res,rank,sing]=np.linalg.lstsq(A, b) #thetas are the coefficients of the regression","ab620310":"thetas","42596e11":"#Step 1: create DataNew\nDataNew=np.array(\n[[6,7.057898],\n[2,5.598422],\n[8,6.72022],\n[26,5.703783],\n[4,7.39449],\n[9,7.120444],\n[1,6.291569],\n[14,7.49443],\n[1,6.161207],\n[13,7.197435]]        \n)","9e85040d":"DataNew","34b2b36c":"#Step 2: construct Atest\nbtest = DataNew[:,DataNew.shape[1]-1] #Alternative b = Data[:,1]\nAtest = np.ones((DataNew.shape[0],2)) #A matrix with all 1's, as many rows as Data, with 2 columns\nprint (Atest)\nAtest[:,1]=DataNew[:,0] #set the second column of A to the first of column of Data\nprint (\"After changing Atest=\"+str(Atest))","a993b997":"#Help with step 3\nthetas.shape #1 D vector","da70a5f2":"#Step 3: prediction\nbpred = np.dot(Atest,thetas) #Atest*thetas in the matrix \nprint (bpred)\n#Optional\nthetasascolumn = np.reshape(thetas, (thetas.shape[0],1)) #turn thetas into matrix with 1 column\nprint (\"Thetas as column: \"+str(thetasascolumn))\nbpred = np.dot(Atest,thetasascolumn)\nprint (\"Second way of computing bpred \"+str(bpred))               ","d7b317b1":"#Help with Step 4\nbtest.shape","e7f046c4":"#Step 4: compute relative norm\nbtestascolumn = np.reshape(btest,(btest.shape[0],1)) #same as btest but 2D array with 1 column\nreln=np.linalg.norm(btestascolumn-bpred)\/np.linalg.norm(btestascolumn)\nprint (reln)\n#Average mean error\nnp.mean(btestascolumn-bpred)","bc4ba26b":"Display the columns of a table","1e267e5e":"text to explain what you are doing","4fe37620":"Part 2:  Solve linear regression using numpy:\npredict salary using tenure\n\nWork program\n\n1. Store data in an Data array N x M array, M is the number of variables, N  number of data points\n   Last column of Data should be the dependent variable (the variable which we would like to predict)\n2.  Say M=2, Data has 2 columns\n    We construct a matrix A (np.array) and a vector b as in Big Data & AI\n    \n    A=[All 1s,  First column of Data]\n    \n    b = the last column of Data\n 3. Solve equation A*theta = b, by using the function \n     [theta,res ,rank, sing]=np.linalg.lstsq(A, b) \n     \n     res, rank, sing additional information, not going to use it.\n \n 4. theta[0]=theta_0, theta[1]=theta_1 the parameters of a linear regression:\n       dependent variable = theta_0 + theta_1 * (indepedent variable)\n \n    ","d08032fa":"Testing ourlinear regression model on new data:\n1.  create a array DataNew which contains N_1 rows and M columns,N_1 the number of data points\nfor testing, M is the number of variables. The last column is the dependent variable.\n2.  Say M=2, create Atest matrix (array)\n    Atest = [1, first column of DataNew]\n    btest = last column of DataNew\n    \n3. bpred = Atest*btest, * stands for matrix product\n4. Compute relative norm: ||bpred-btest||\/||btest||, or some other error metrics, the mean\n   of bpred-btest, or the variance of bpred-btest. ","b9cd39df":"Display the elements of M row-wise","553daeb4":"Exercise 1 indexing arrays: display the rows of an array"}}