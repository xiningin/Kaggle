{"cell_type":{"3b253101":"code","bf1edf62":"code","d4dea5f1":"code","446aa589":"code","e02dd995":"code","f5c9c20e":"code","c5bc83dc":"code","6c601427":"code","00524f68":"code","e7262b3d":"code","7c21e36c":"code","4bdb72bf":"code","00fb5ce1":"code","f6ec8405":"code","c45d741e":"code","cdef2e99":"code","5b888153":"code","17dd3848":"code","02c3d91e":"code","6363d0da":"code","6ae08df5":"code","6b6d76c2":"markdown","050bc674":"markdown","dfbce357":"markdown","7400445d":"markdown","921835b0":"markdown","e6bc01f9":"markdown","cac12a22":"markdown","d49832c6":"markdown","b2cffafa":"markdown","d9207f11":"markdown","4c73a448":"markdown","8a287ffe":"markdown"},"source":{"3b253101":"!pip install imutils","bf1edf62":"# import the necessary packages\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.layers import AveragePooling2D, MaxPooling2D, Dropout, Flatten, Dense, Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom imutils import paths\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport random\nimport shutil\nimport cv2\nimport os","d4dea5f1":"dataset_path = '.\/dataset'","446aa589":"%%bash\nrm -rf dataset\nmkdir -p dataset\/covid\nmkdir -p dataset\/normal","e02dd995":"samples = 25","f5c9c20e":"covid_dataset_path = '..\/input\/covid-chest-xray'","c5bc83dc":"# construct the path to the metadata CSV file and load it\nmeta_path = os.path.sep.join([covid_dataset_path, \"metadata.csv\"])\ndf = pd.read_csv(meta_path)\n\n# loop over the rows of the COVID-19 data frame\nfor (i, row) in df.iterrows():\n    # if (1) the current case is not COVID-19 or (2) this is not\n    # a 'PA' view, then ignore the row\n    if row[\"finding\"] != \"COVID-19\" or row[\"view\"] != \"PA\":\n        continue\n\n    # build the path to the input image file\n    imagePath = os.path.sep.join([covid_dataset_path, \"images\", row[\"filename\"]])\n\n    # if the input image file does not exist (there are some errors in\n    # the COVID-19 metadeta file), ignore the row\n    if not os.path.exists(imagePath):\n        continue\n\n    # extract the filename from the image path and then construct the\n    # path to the copied image file\n    filename = row[\"filename\"].split(os.path.sep)[-1]\n    outputPath = os.path.sep.join([f\"{dataset_path}\/covid\", filename])\n\n    # copy the image\n    shutil.copy2(imagePath, outputPath)","6c601427":"pneumonia_dataset_path ='..\/input\/chest-xray-pneumonia\/chest_xray'","00524f68":"basePath = os.path.sep.join([pneumonia_dataset_path, \"train\", \"NORMAL\"])\nimagePaths = list(paths.list_images(basePath))\n\n# randomly sample the image paths\nrandom.seed(42)\nrandom.shuffle(imagePaths)\nimagePaths = imagePaths[:samples]\n\n# loop over the image paths\nfor (i, imagePath) in enumerate(imagePaths):\n    # extract the filename from the image path and then construct the\n    # path to the copied image file\n    filename = imagePath.split(os.path.sep)[-1]\n    outputPath = os.path.sep.join([f\"{dataset_path}\/normal\", filename])\n\n    # copy the image\n    shutil.copy2(imagePath, outputPath)","e7262b3d":"def ceildiv(a, b):\n    return -(-a \/\/ b)\n\ndef plots_from_files(imspaths, figsize=(10,5), rows=1, titles=None, maintitle=None):\n    \"\"\"Plot the images in a grid\"\"\"\n    f = plt.figure(figsize=figsize)\n    if maintitle is not None: plt.suptitle(maintitle, fontsize=10)\n    for i in range(len(imspaths)):\n        sp = f.add_subplot(rows, ceildiv(len(imspaths), rows), i+1)\n        sp.axis('Off')\n        if titles is not None: sp.set_title(titles[i], fontsize=16)\n        img = plt.imread(imspaths[i])\n        plt.imshow(img)","7c21e36c":"normal_images = list(paths.list_images(f\"{dataset_path}\/normal\"))\ncovid_images = list(paths.list_images(f\"{dataset_path}\/covid\"))","4bdb72bf":"plots_from_files(normal_images, rows=5, maintitle=\"Normal X-ray images\")","00fb5ce1":"plots_from_files(covid_images, rows=5, maintitle=\"Covid-19 X-ray images\")","f6ec8405":"# initialize the initial learning rate, number of epochs to train for,\n# and batch size\nINIT_LR = 1e-3\nEPOCHS = 10\nBS = 8","c45d741e":"# grab the list of images in our dataset directory, then initialize\n# the list of data (i.e., images) and class images\nimage_paths = list(paths.list_images(dataset_path))\ndata = []\nlabels = []\n# loop over the image paths\nfor image_path in image_paths:\n    # extract the class label from the filename\n    label = image_path.split(os.path.sep)[-2]\n    # load the image, swap color channels, and resize it to be a fixed\n    # 224x224 pixels while ignoring aspect ratio\n    image = cv2.imread(image_path)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = cv2.resize(image, (224, 224))\n    # update the data and labels lists, respectively\n    data.append(image)\n    labels.append(label)\n# convert the data and labels to NumPy arrays while scaling the pixel\n# intensities to the range [0, 1]\ndata = np.array(data) \/ 255.0\nlabels = np.array(labels)","cdef2e99":"# perform one-hot encoding on the labels\nlb = LabelBinarizer()\nlabels = lb.fit_transform(labels)\nlabels = to_categorical(labels)\n# partition the data into training and testing splits using 80% of\n# the data for training and the remaining 20% for testing\nprint(np.array(trainX).shape)\n(trainX, testX, trainY, testY) = train_test_split(data, labels, test_size=0.20, stratify=labels, random_state=42)\n# initialize the training data augmentation object\ntrainAug = ImageDataGenerator(rotation_range=15, fill_mode=\"nearest\")","5b888153":"# load the VGG16 network, ensuring the head FC layer sets are left\n# off\nbaseModel = VGG16(weights=\"imagenet\", include_top=False, input_tensor=Input(shape=(224, 224, 3)))\n# construct the head of the model that will be placed on top of the\n# the base model\nheadModel = baseModel.output\nheadModel = AveragePooling2D(pool_size=(4, 4))(headModel)\nheadModel = Flatten(name=\"flatten\")(headModel)\nheadModel = Dense(64, activation=\"relu\")(headModel)\nheadModel = Dropout(0.5)(headModel)\nheadModel = Dense(2, activation=\"softmax\")(headModel)\n# place the head FC model on top of the base model (this will become\n# the actual model we will train)\nmodel = Model(inputs=baseModel.input, outputs=headModel)\n# loop over all layers in the base model and freeze them so they will\n# *not* be updated during the first training process\nfor layer in baseModel.layers:\n    layer.trainable = False","17dd3848":"callbacks = [\n    EarlyStopping(\n        monitor='val_acc',\n        min_delta=1e-4,\n        patience=5,\n        verbose=1\n    ),\n    ModelCheckpoint(\n        filepath=\"weights.h5\", \n        monitor=\"val_acc\", \n        mode='min', \n        save_best_only=True,\n        save_weights_only=True,\n        verbose=1\n    )\n]\n\n# compile our model\nprint(\"[INFO] compiling model...\")\nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt, metrics=[\"accuracy\"])\n\n# train the head of the network\nprint(\"[INFO] training head...\")\nH = model.fit_generator(\n    trainAug.flow(trainX, trainY, batch_size=BS),\n    steps_per_epoch=len(trainX) \/\/ BS,\n    validation_data=(testX, testY),\n    validation_steps=len(testX) \/\/ BS,\n    epochs=EPOCHS, callbacks=callbacks)","02c3d91e":"# plot the training loss and accuracy\nN = EPOCHS\nplt.style.use(\"ggplot\")\nplt.figure()\nplt.plot(np.arange(0, N), H.history[\"loss\"], label=\"train_loss\")\nplt.plot(np.arange(0, N), H.history[\"val_loss\"], label=\"val_loss\")\nplt.plot(np.arange(0, N), H.history[\"accuracy\"], label=\"train_acc\")\nplt.plot(np.arange(0, N), H.history[\"val_accuracy\"], label=\"val_acc\")\nplt.title(\"Training Loss and Accuracy on COVID-19 Dataset\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\/Accuracy\")\nplt.legend(loc=\"lower left\")\nplt.savefig(\"plot.png\")","6363d0da":"# make predictions on the testing set\nprint(\"[INFO] evaluating network...\")\npredIdxs = model.predict(testX, batch_size=BS)\n# for each image in the testing set we need to find the index of the\n# label with corresponding largest predicted probability\npredIdxs = np.argmax(predIdxs, axis=1)\n# show a nicely formatted classification report\nprint(classification_report(testY.argmax(axis=1), predIdxs, target_names=lb.classes_))","6ae08df5":"# compute the confusion matrix and and use it to derive the raw\n# accuracy, sensitivity, and specificity\ncm = confusion_matrix(testY.argmax(axis=1), predIdxs)\nplot_confusion_matrix(cm, figsize=(4,8), hide_ticks=True, cmap=plt.cm.Blues)\ntotal = sum(sum(cm))\nacc = (cm[0, 0] + cm[1, 1]) \/ total\nsensitivity = cm[0, 0] \/ (cm[0, 0] + cm[0, 1])\nspecificity = cm[1, 1] \/ (cm[1, 0] + cm[1, 1])\n# show the confusion matrix, accuracy, sensitivity, and specificity\nprint(cm)\nprint(\"acc: {:.4f}\".format(acc))\nprint(\"sensitivity: {:.4f}\".format(sensitivity))\nprint(\"specificity: {:.4f}\".format(specificity))","6b6d76c2":"#### Confusion matrix","050bc674":"## Build Dataset","dfbce357":"## Setup","7400445d":"### Evaluation","921835b0":"### Training","e6bc01f9":"Helper function to plot the images in a grid","cac12a22":"## Model","d49832c6":"### Covid xray dataset","b2cffafa":"### Plot trining metrics","d9207f11":"## Plot x-rays","4c73a448":"### Build normal xray dataset","8a287ffe":"## Data preprocessing"}}