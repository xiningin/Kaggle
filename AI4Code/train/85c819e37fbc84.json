{"cell_type":{"4684cfbc":"code","9e39aec0":"code","2e6c3934":"code","7a9ecb34":"code","88e24b0c":"code","a7f2377c":"code","2ab52e65":"code","0e04a9b8":"code","0499a6cf":"code","12a2a09a":"code","14a69d58":"code","a5f30f6a":"code","f37f00d1":"code","be29f52e":"code","cdcdd7de":"code","ef8e27b7":"code","89d19219":"code","a0fd593e":"code","0eb5cea5":"code","8375c7b6":"code","4dc38f2f":"code","ab1106ea":"code","40ec97f8":"code","f5064d1e":"code","3288a748":"markdown","aa97f7f0":"markdown"},"source":{"4684cfbc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e39aec0":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","2e6c3934":"train_data = pd.read_csv(\"..\/input\/Kannada-MNIST\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/Kannada-MNIST\/test.csv\")\nprint(train_data.shape,test_data.shape)","7a9ecb34":"X = train_data.drop([\"label\"],axis = 1).values\nY = train_data[\"label\"].values","88e24b0c":"print(X.shape,Y.shape)","a7f2377c":"X = X.reshape([60000,28,28,1])\nY = Y.reshape([60000,1])","2ab52e65":"# convert to one-hot-encoding\nfrom keras.utils.np_utils import to_categorical \nY = to_categorical(Y, num_classes = 10)","0e04a9b8":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.1, random_state = 14)","0499a6cf":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","12a2a09a":"x_train = x_train\/255\nx_test = x_test\/255","14a69d58":"X_visualization = x_train.reshape(x_train.shape[0], 28, 28)\n\nfig, axis = plt.subplots(1, 4, figsize=(20, 10))\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(X_visualization[i], cmap='binary')\n    digit = y_train[i].argmax()\n    ax.set(title = f\"Real Number is {digit}\");\n# we see how our data look like.","a5f30f6a":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(64, (3,3), padding = 'same', activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(64, (3,3), padding = 'same', activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(128, (3,3), padding = 'same', activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(128, (3,3), padding = 'same', activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(10, activation='softmax')\n])","f37f00d1":"from keras.optimizers import Adam\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)\nmodel.compile(optimizer = optimizer,\n              loss = 'categorical_crossentropy',\n              metrics = ['accuracy'])","be29f52e":"from keras.callbacks import ReduceLROnPlateau\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.6, \n                                            min_lr=0.00001)","cdcdd7de":"batch_size = 128\nepochs = 50","ef8e27b7":"train_datagen = ImageDataGenerator( \n        rotation_range=10,  \n        zoom_range = 0.1, \n        width_shift_range=0.1,  \n        height_shift_range=0.1,\n        shear_range = 0.1,\n        horizontal_flip=False,  \n        vertical_flip=False\n        )\ntrain_datagen.fit(x_train)","89d19219":"history = model.fit(\n            train_datagen.flow(x_train,y_train,batch_size = batch_size),\n            validation_data = (x_test,y_test),\n            batch_size = batch_size,\n            steps_per_epoch = x_train.shape[0]\/\/batch_size,\n            epochs = epochs,\n            verbose = 1,\n            callbacks=[learning_rate_reduction]\n            )","a0fd593e":"model.evaluate(x_test,y_test)","0eb5cea5":"y_pred = model.predict(x_test)\nX_new = x_test.reshape(x_test.shape[0], 28, 28)\n\nfig, axis = plt.subplots(4, 4, figsize=(12, 14))\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(X_new[i], cmap='binary')\n    ax.set(title = f\"Real Number is {y_test[i].argmax()}\\nPredict Number is {y_pred[i].argmax()}\");","8375c7b6":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure()\nplt.plot(acc,color = 'green',label = 'Training Acuracy')\nplt.plot(val_acc,color = 'red',label = 'Validation Accuracy')\nplt.legend()","4dc38f2f":"plt.figure()\nplt.plot(loss,color = 'green',label = 'Training Loss')\nplt.plot(val_loss,color = 'red',label = 'Validation Loss')\nplt.legend()","ab1106ea":"raw_test = test_data\nsample = pd.read_csv('..\/input\/Kannada-MNIST\/sample_submission.csv')","40ec97f8":"sample_sub=sample\nraw_test_id=raw_test.id\nraw_test=raw_test.drop(\"id\",axis=\"columns\")\nraw_test=raw_test \/ 255\ntest=raw_test.values.reshape(-1,28,28,1)\ntest.shape","f5064d1e":"sub=model.predict(test)     ##making prediction\nsub=np.argmax(sub,axis=1) ##changing the prediction intro labels\n\nsample_sub['label']=sub\nsample_sub.to_csv('submission.csv',index=False)","3288a748":"# ****Imports****","aa97f7f0":"# **Data preparation**"}}