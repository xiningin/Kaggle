{"cell_type":{"979ee4a3":"code","ea229bc9":"code","5062b19b":"code","8fd5ab58":"code","934dd486":"code","99243f60":"code","05d5ebef":"code","5022f7da":"code","6283dea2":"code","38a668dc":"code","419e9120":"code","dbf078b7":"code","50904ce9":"code","316fb5da":"code","5e6ee65c":"code","1e51b5d5":"code","ade92da0":"code","dcb49f46":"code","a23ece07":"code","a7a4d51c":"code","d57a82b4":"code","303559b3":"code","2eab1735":"code","adbc7a6b":"code","bcac3c84":"code","9c23f6d6":"code","80ef9aa7":"code","574066f9":"code","a75eabb8":"code","70cf19db":"code","b0c919c6":"code","e16761d9":"markdown","070142d7":"markdown","47c08b8a":"markdown","15162e18":"markdown","51f4c1bd":"markdown","1d2891f5":"markdown","ca4c79f9":"markdown","c0506bfa":"markdown","914c9a66":"markdown","17cfd030":"markdown","7fff1198":"markdown","745ababb":"markdown","ecaf793a":"markdown","17625a06":"markdown","4eff06db":"markdown","9f9d58f6":"markdown","ccd2f441":"markdown","9959479d":"markdown","cb3edb11":"markdown","d3ccc335":"markdown","d24828ed":"markdown"},"source":{"979ee4a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea229bc9":"File_location = '..\/input\/celeba-dataset'","5062b19b":"# Importing librabries\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader \nimport torchvision\nimport torchvision.datasets as datasets                   \nimport torchvision.transforms as transforms\nfrom torch.utils.tensorboard import SummaryWriter\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt","8fd5ab58":"# Setting up device\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","934dd486":"# Setting Hyperparameters\nlearning_rate = 5e-5\nbatch_size = 128\nimage_size = 64\nchannel_img = 3\nz_dim = 100\nnum_epochs = 10\nfeature_d = 64\nfeature_g = 64\ncritic_iterations = 5\nlambda_GP = 10\n\nvariable = transforms.Compose(\n    [\n        transforms.Resize((image_size,image_size)),\n        transforms.ToTensor(),\n        transforms.Normalize(\n        [0.5 for _ in range(channel_img)], [0.5 for _ in range(channel_img)]),\n    ]\n)","99243f60":"# Loading Dataset \ndataset = datasets.ImageFolder(root = File_location, transform = variable)\nloader = DataLoader(dataset, batch_size = batch_size, shuffle= True, drop_last=True)","05d5ebef":"# Checking the loaded data\nprint(len(loader))\nexamples = iter(loader)\nsamples, _ = examples.next()\nprint(samples.shape)","5022f7da":"# Visualizing the dataset images\nreal_batch = next(iter(loader))\nplt.figure(figsize=(8,8))\nplt.axis(\"off\")\nplt.title(\"Training Images\")\nplt.imshow(np.transpose(torchvision.utils.make_grid(real_batch[0].to(device)[:64], padding=2, normalize=True).cpu(),(1,2,0)))","6283dea2":"# Creating Critic Class\nclass Critic(nn.Module):\n    def __init__(self, channel_img, feature_d):\n        super().__init__()\n        self.disc = nn.Sequential(\n            nn.Conv2d(channel_img, feature_d, kernel_size=4, stride=2, padding=1),\n            nn.LeakyReLU(0.2),\n            self._block(feature_d, feature_d*2, 4, 2, 1),\n            self._block(feature_d*2, feature_d*4, 4, 2, 1),\n            self._block(feature_d*4, feature_d*8, 4, 2, 1),\n            nn.Conv2d(feature_d*8, 1, 4, 2, 0),\n        )\n       \n    def _block(self, in_channels, out_channels, kernel_size, stride, padding):\n        return nn.Sequential(\n            nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, bias=False),\n            nn.InstanceNorm2d(out_channels, affine = True),\n            nn.LeakyReLU(0.2),\n        )\n    \n    def forward(self, x):\n        return self.disc(x)","38a668dc":"# Creating Generator Class\nclass Generator(nn.Module):\n    def __init__(self, z_dim, channel_img, feature_g):\n        super().__init__()\n        self.gen = nn.Sequential(\n            self._block(z_dim, feature_g*16, 4, 2, 0),\n            self._block(feature_g*16, feature_g*8, 4, 2, 1),\n            self._block(feature_g*8, feature_g*4, 4, 2, 1),\n            self._block(feature_g*4, feature_g*2, 4, 2, 1),\n            nn.ConvTranspose2d(feature_g*2, channel_img,4, 2, 1),\n            nn.Tanh(),\n        )\n        \n    def _block(self, in_channels, out_channels, kernel_size, stride, padding):\n        return nn.Sequential(\n            nn.ConvTranspose2d(in_channels, out_channels, kernel_size, stride, padding),\n            nn.BatchNorm2d(out_channels),\n            nn.ReLU(),\n        )\n    \n    def forward(self, x):\n        return self.gen(x)","419e9120":"# Function to initialize the model weights\ndef initialize_weights(model):\n    for m in model.modules():\n        if isinstance(m, nn.Conv2d):\n            nn.init.normal_(m.weight.data, 0.0, 0.02)    # mean = 0, variance = 0.02\n        if isinstance(m, nn.ConvTranspose2d):\n            nn.init.normal_(m.weight.data, 0.0, 0.02)\n        if isinstance(m, nn.BatchNorm2d):\n            nn.init.normal_(m.weight.data, 0.0,0.02)","dbf078b7":"def gradient_penalty(critic, real, fake, device = 'cpu'):\n    batch_size, C, H, W = real.shape\n    epsilon = torch.rand(batch_size,1,1,1).repeat(1,C,H,W).to(device)\n    interpolated_images = real*epsilon + fake*(1-epsilon)\n    \n    # Calculate critic scores\n    mixed_scores = critic(interpolated_images)\n    \n    gradient = torch.autograd.grad(\n        inputs = interpolated_images,\n        outputs = mixed_scores,\n        grad_outputs = torch.ones_like(mixed_scores),\n        create_graph = True,\n        retain_graph = True,\n    )[0]\n    \n    gradient = gradient.view(gradient.shape[0], -1)\n    gradient_norm = gradient.norm(2, dim = 1)\n    gradient_penalty = torch.mean((gradient_norm - 1)**2)\n    return gradient_penalty","50904ce9":"# Creating model objects\ncritic = Critic(channel_img, feature_d).to(device)\ngen = Generator(z_dim, channel_img, feature_g).to(device)\ninitialize_weights(critic)\ninitialize_weights(gen)","316fb5da":"# Defining optimizer and loss functions\nopt_critic = optim.Adam(critic.parameters(), lr = learning_rate, betas=(0.0, 0.9))\nopt_gen = optim.Adam(gen.parameters(), lr= learning_rate, betas=(0.0,0.9))","5e6ee65c":"# telling the model that the data is for training\ngen.train()","1e51b5d5":"critic.train()","ade92da0":"# Traning Loop\nimg_list = []\nstep = 0\n\nfor epoch in range(num_epochs):\n    for batch_idx, (real, _) in enumerate(loader):\n        real = real.to(device)\n\n        \n        for _ in range(critic_iterations):\n            noise = torch.randn(batch_size, z_dim, 1, 1).to(device)\n            fake = gen(noise)                                                 # G(z)\n            critic_real = critic(real).reshape(-1)\n            critic_fake = critic(fake).reshape(-1)\n            gp = gradient_penalty(critic, real, fake, device = device)\n            loss_critic = -(torch.mean(critic_real) - torch.mean(critic_fake)) + lambda_GP*gp\n            #loss_crit.append(loss_critic)\n            critic.zero_grad()\n            loss_critic.backward(retain_graph = True)\n            opt_critic.step()\n            \n        # Training Generator : -min E(critic(fgen_fake))\n        output = critic(fake).reshape(-1)\n        loss_gen = -torch.mean(output)\n        #loss_generator.append(loss_gen)\n        gen.zero_grad()\n        loss_gen.backward()\n        opt_gen.step()\n        \n        \n        # Printing\n        if batch_idx % 100 ==0:\n            print(f\"Epoch [{epoch+1}\/{num_epochs}] Batch : {batch_idx}\/{len(loader)} \\\n            LossD: {loss_critic:.4f}, LossG: {loss_gen:.4f}\"\n                 )\n\n        step += 1","dcb49f46":"# Print model's state_dict\nprint(\"Model's state_dict:\")\nfor param_tensor in critic.state_dict():\n    #print(param_tensor, \"\\t\", critic.state_dict()[param_tensor].size())\n    pass\n\n# Print optimizer's state_dict\nprint(\"Optimizer's state_dict:\")\nfor var_name in opt_critic.state_dict():\n    #print(var_name, \"\\t\", opt_critic.state_dict()[var_name])\n    pass\n    \n#torch.save(critic.state_dict(), \"model_trained.h5\")\ntorch.save(critic.state_dict(), \"Critic_trained.h5\")","a23ece07":"# Print model's state_dict\nprint(\"Model's state_dict:\")\nfor param_tensor in gen.state_dict():\n    #print(param_tensor, \"\\t\", critic.state_dict()[param_tensor].size())\n    pass\n\n# Print optimizer's state_dict\nprint(\"Optimizer's state_dict:\")\nfor var_name in opt_gen.state_dict():\n    #print(var_name, \"\\t\", opt_critic.state_dict()[var_name])\n    pass\n\ntorch.save(gen.state_dict(), \"Generator_trained.h5\")","a7a4d51c":"gen_1 = Generator(z_dim, channel_img, feature_g).to(device)\ngen_1.load_state_dict(torch.load('..\/input\/wgan-data\/Generator_trained (1).h5', map_location='cuda'))\ngen_1.cuda()","d57a82b4":"img_list = []\nfixed_noise = torch.randn(32, z_dim, 1, 1).to(device)\nwith torch.no_grad():\n    fake = gen_1(fixed_noise).detach().cpu()\nimg_list.append(torchvision.utils.make_grid(fake, padding=2, normalize=True))","303559b3":"fig = plt.figure(figsize=(8,8))\nplt.axis(\"off\")\nims = [[plt.imshow(np.transpose(i,(1,2,0)), animated=True)] for i in img_list]\n","2eab1735":"critic_1 = Critic(channel_img, feature_d).to(device)\ncritic_1.load_state_dict(torch.load('..\/input\/wganepoch-7\/Critic_trained_epoch_7.h5', map_location='cuda'))\ncritic_1.cuda()","adbc7a6b":"gen_1 = Generator(z_dim, channel_img, feature_g).to(device)\ngen_1.load_state_dict(torch.load('..\/input\/wganepoch-7\/Generator_trained_epoch_7.h5', map_location='cuda'))\ngen_1.cuda()","bcac3c84":"# Defining optimizer and loss functions\nopt_critic = optim.Adam(critic_1.parameters(), lr = learning_rate, betas=(0.0, 0.9))\nopt_gen = optim.Adam(gen_1.parameters(), lr= learning_rate, betas=(0.0,0.9))","9c23f6d6":"gen_1.train()\ncritic_1.train()","80ef9aa7":"# Traning Loop\nimg_list = []\nstep = 0\nnum_epcohs = 7\n\nfor epoch in range(num_epochs):\n    for batch_idx, (real, _) in enumerate(loader):\n        real = real.to(device)\n\n        \n        for _ in range(critic_iterations):\n            noise = torch.randn(batch_size, z_dim, 1, 1).to(device)\n            fake = gen_1(noise)                                                 # G(z)\n            critic_real = critic_1(real).reshape(-1)\n            critic_fake = critic_1(fake).reshape(-1)\n            gp = gradient_penalty(critic_1, real, fake, device = device)\n            loss_critic = -(torch.mean(critic_real) - torch.mean(critic_fake)) + lambda_GP*gp\n            #loss_crit.append(loss_critic)\n            critic_1.zero_grad()\n            loss_critic.backward(retain_graph = True)\n            opt_critic.step()\n            \n        # Training Generator : -min E(critic(fgen_fake))\n        output = critic_1(fake).reshape(-1)\n        loss_gen = -torch.mean(output)\n        #loss_generator.append(loss_gen)\n        gen_1.zero_grad()\n        loss_gen.backward()\n        opt_gen.step()\n        \n        \n        # Printing\n        if batch_idx % 100 ==0:\n            print(f\"Epoch [{epoch+7}\/{num_epochs}] Batch : {batch_idx}\/{len(loader)} \\\n            LossD: {loss_critic:.4f}, LossG: {loss_gen:.4f}\"\n                 )\n        \n        if num_epcohs == 7:\n            #torch.save(critic.state_dict(), \"model_trained.h5\")\n            torch.save(critic_1.state_dict(), \"Critic_trained_epoch_7.h5\")\n            torch.save(gen_1.state_dict(), \"Generator_trained_epoch_7.h5\")\n            \n        \n#         if (step % 500 == 0) or ((epoch == num_epochs-1) and (i == len(loader)-1)):\n#             with torch.no_grad():\n#                 fake = gen(fixed_noise).detach().cpu()\n#             img_list.append(torchvision.utils.make_grid(fake, padding=2, normalize=True))\n\n        step += 1","574066f9":"torch.save(critic_1.state_dict(), \"Critic_Final_trained.h5\")\ntorch.save(gen_1.state_dict(), \"Generator_Final_trained.h5\")","a75eabb8":"gen_2 = Generator(z_dim, channel_img, feature_g).to(device)\ngen_2.load_state_dict(torch.load('.\/Generator_Final_trained.h5', map_location='cuda'))\ngen_2.cuda()","70cf19db":"img_list = []\nfixed_noise = torch.randn(32, z_dim, 1, 1).to(device)\nwith torch.no_grad():\n    fake = gen_2(fixed_noise).detach().cpu()\nimg_list.append(torchvision.utils.make_grid(fake, padding=2, normalize=True))","b0c919c6":"fig = plt.figure(figsize=(8,8))\nplt.axis(\"off\")\nims = [[plt.imshow(np.transpose(i,(1,2,0)), animated=True)] for i in img_list]\nplt.title('Generated Fake Images')","e16761d9":"# Checking the shape and the batch size","070142d7":"# Visualizing the training dataset images","47c08b8a":"# Visualizing images till 3 epochs","15162e18":"# Loading celebA dataset","51f4c1bd":"# Setting optimizer and the loss function","1d2891f5":"# Training Loop for initial 3 epochs","ca4c79f9":"# Loading the models till 3 epochs","c0506bfa":"# Creating model instance","914c9a66":"# Creating Generator Class","17cfd030":"# Setting up GPU as device","7fff1198":"# Setting hyperparameters and applying transform on the dataset images","745ababb":"# Setting file location","ecaf793a":"# Initializing the weights","17625a06":"# Defining gradient penalty","4eff06db":"# Images generator after 8 epochs","9f9d58f6":"# Saving the Critic and Generator model","ccd2f441":"# Loading useful libraries","9959479d":"# Creating Critic Class of WGAN","cb3edb11":"# Continuing the training","d3ccc335":"# Finally saving the parameters","d24828ed":"# Loading the critic and generator model trained till 7th epoch"}}