{"cell_type":{"3727f485":"code","7e4532be":"code","beb33b5b":"code","7f0ba942":"code","3a5829f7":"code","d9fe472e":"code","06b13ea4":"code","41d2c129":"code","71aa04db":"code","ac70ccf9":"code","5d18ac76":"code","9e39510c":"code","d0bb790e":"code","e2392eb4":"code","835b98b8":"code","c90e5ce7":"code","b8d0771e":"code","21683fe9":"code","167ce3ed":"code","52107638":"code","1afbd814":"code","6dca0806":"code","5641aa62":"code","13522116":"code","a7e5fa47":"code","c4fec1a9":"code","9e86120d":"code","73f5fa7c":"code","67709ce9":"code","769628ef":"code","ba297f95":"code","02694083":"code","b585f048":"code","8034357a":"code","afd664f5":"code","2a43bb28":"code","fa3198bb":"code","229ce425":"code","cfef974f":"code","7caf9e10":"code","5aed07a3":"code","8e22322e":"code","852b757f":"code","ba8b2958":"code","ad5a711f":"code","a3473dc9":"code","f1142f78":"code","8e083b8b":"code","536f4d5d":"markdown","5e4e88a7":"markdown","18c59ee5":"markdown","d1e76c6a":"markdown","c81a2e83":"markdown"},"source":{"3727f485":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7e4532be":"data1 = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsub=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\ndata1.shape, test.shape,sub.shape","beb33b5b":"test['SalePrice']=sub['SalePrice']","7f0ba942":"data=pd.concat([data1,test])","3a5829f7":"test.shape","d9fe472e":"data.shape","06b13ea4":"#categorial data\ndf5=data.select_dtypes('object')\n","41d2c129":"data.select_dtypes(np.number).columns\n","71aa04db":"data=data.set_index('Id')\n","ac70ccf9":"#MISSING VALUES\ndef missingValuesInfo(df):\n    total = df.isnull().sum().sort_values(ascending = False)\n    percentage=(df.isnull().sum()\/(df.shape[0]))*100\n    temp = pd.concat([total,percentage], axis = 1,keys= ['Total','percentage'])\n    return temp.loc[(temp['Total'] > 0)]\n\n\ndf1=missingValuesInfo(data)\n","5d18ac76":"df1","9e39510c":"cloumnsdrop=df1[df1.percentage>20]\ncloumnsdrop\ndata.drop(['Alley','MiscFeature','Fence','PoolQC','FireplaceQu'],axis=1,inplace=True)","d0bb790e":"data['BsmtQual']=data['BsmtQual'].fillna(data['BsmtQual'].mode()[0])\ndata['BsmtCond']=data['BsmtCond'].fillna(data['BsmtCond'].mode()[0])\ndata['BsmtExposure']=data['BsmtExposure'].fillna(data['BsmtExposure'].mode()[0])\ndata['BsmtFinType1']=data['BsmtFinType1'].fillna(data['BsmtFinType1'].mode()[0])\ndata['BsmtFinType2']=data['BsmtFinType2'].fillna(data['BsmtFinType2'].mode()[0])\ndata['Electrical']=data['Electrical'].fillna(data['Electrical'].mode()[0])\ndata['GarageType']=data['GarageType'].fillna(data['GarageType'].mode()[0])\ndata['GarageFinish']=data['GarageFinish'].fillna(data['GarageFinish'].mode()[0])\ndata['GarageQual']=data['GarageQual'].fillna(data['GarageQual'].mode()[0])\ndata['GarageCond']=data['GarageCond'].fillna(data['GarageCond'].mode()[0])\ndata['MasVnrType']=data['MasVnrType'].fillna(data['MasVnrType'].mode()[0])\ndata['MSZoning']=data['MSZoning'].fillna(data['MSZoning'].mode()[0])\ndata['SaleType']=data['SaleType'].fillna(data['SaleType'].mode()[0])\ndata['Exterior2nd']=data['Exterior2nd'].fillna(data['Exterior2nd'].mode()[0])\ndata['Exterior1st']=data['Exterior1st'].fillna(data['Exterior1st'].mode()[0])\ndata['Utilities']=data['Utilities'].fillna(data['Utilities'].mode()[0])\ndata['Functional']=data['Functional'].fillna(data['Functional'].mode()[0])\ndata['KitchenQual']=data['KitchenQual'].fillna(data['KitchenQual'].mode()[0])\n","e2392eb4":"data['LotFrontage']=data['LotFrontage'].fillna(data['LotFrontage'].median())\ndata['GarageYrBlt']=data['GarageYrBlt'].fillna(data['GarageYrBlt'].median())\ndata['MasVnrArea']=data['MasVnrArea'].fillna(data['MasVnrArea'].median())\n\ndata['GarageArea']=data['GarageArea'].fillna(data['GarageArea'].median())\n\n\ndata['BsmtFinSF1']=data['BsmtFinSF1'].fillna(data['BsmtFinSF1'].median())\ndata['BsmtFinSF2']=data['BsmtFinSF2'].fillna(data['BsmtFinSF2'].median())\ndata['BsmtUnfSF']=data['BsmtUnfSF'].fillna(data['BsmtUnfSF'].median())\ndata['TotalBsmtSF']=data['TotalBsmtSF'].fillna(data['TotalBsmtSF'].median())\ndata['BsmtFullBath']=data['BsmtFullBath'].fillna(data['BsmtFullBath'].median())\ndata['BsmtHalfBath']=data['BsmtHalfBath'].fillna(data['BsmtHalfBath'].median())\n\ndata['GarageCars']=data['GarageCars'].fillna(data['GarageCars'].median())\n","835b98b8":"import seaborn as sns\nimport matplotlib.pyplot as plt\ng=sns.distplot(data1['SalePrice'])\ng=g.legend(['Skewness :{:.2f}'.format(data['SalePrice'].skew())],loc='best')","c90e5ce7":"numerical_features = [feature for feature in data.columns if data[feature].dtypes != 'O']\n\nprint('Number of numerical variables: ', len(numerical_features))\n\n# visualise the numerical variables\ndata1[numerical_features].head()","b8d0771e":"year_feature = [feature for feature in numerical_features if 'Yr' in feature or 'Year' in feature]\n\nyear_feature","21683fe9":"for feature in year_feature:\n    print(feature, data1[feature].unique())","167ce3ed":"data.groupby('YrSold')['SalePrice'].median().plot()\nplt.xlabel('Year Sold')\nplt.ylabel('Median House Price')\nplt.title(\"House Price vs YearSold\")","52107638":"\n## Here we will compare the difference between All years feature with SalePrice\n\nfor feature in year_feature:\n    if feature!='YrSold':\n        data1=data1.copy()\n        ## We will capture the difference between year variable and year the house was sold for\n        data1[feature]=data1['YrSold']-data1[feature]\n\n        plt.scatter(data1[feature],data1['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('SalePrice')\n        plt.show()","1afbd814":"## Numerical variables are usually of 2 type\n## 1. Continous variable and Discrete Variables\n\ndiscrete_feature=[feature for feature in numerical_features if len(data1[feature].unique())<25 and feature not in year_feature+['Id']]\nprint(\"Discrete Variables Count: {}\".format(len(discrete_feature)))","6dca0806":"data[discrete_feature].head()","5641aa62":"## Lets Find the realtionship between them and Sale PRice\n\nfor feature in discrete_feature:\n    data1=data1.copy()\n    #data.groupby(feature)['SalePrice'].median().plot.bar()\n    sns.catplot(x=feature, y=\"SalePrice\", kind=\"bar\", data=data1)\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","13522116":"continuous_feature=[feature for feature in numerical_features if feature not in discrete_feature+year_feature+['Id']]\nprint(\"Continuous feature Count {}\".format(len(continuous_feature)))","a7e5fa47":"for feature in continuous_feature:\n    data1=data1.copy()\n    data1[feature].hist(bins=25)\n    plt.xlabel(feature)\n    plt.ylabel(\"Count\")\n    plt.title(feature)\n    plt.show()","c4fec1a9":"## We will be using logarithmic transformation\n\n\nfor feature in continuous_feature:\n    data1=data1.copy()\n    if 0 in data1[feature].unique():\n        pass\n    else:\n        data1[feature]=np.log(data1[feature])\n        data1['SalePrice']=np.log(data1['SalePrice'])\n        plt.scatter(data1[feature],data1['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('SalesPrice')\n        plt.title(feature)\n        plt.show()","9e86120d":"for feature in continuous_feature:\n    data1=data1.copy()\n    if 0 in data1[feature].unique():\n        pass\n    else:\n        data1[feature]=np.log(data1[feature])\n        data.boxplot(column=feature)\n        plt.ylabel(feature)\n        plt.title(feature)\n        plt.show()","73f5fa7c":"## Temporal Variables (Date Time Variables)\n\nfor feature in ['YearBuilt','YearRemodAdd','GarageYrBlt']:\n       \n    data[feature]=data['YrSold']-data[feature]","67709ce9":"data[['YearBuilt','YearRemodAdd','GarageYrBlt']].head()","769628ef":"import numpy as np\nnum_features=['LotFrontage','LotArea','1stFlrSF','GrLivArea','SalePrice']\n\nfor feature in num_features:\n    data[feature]=np.log(data[feature])\n","ba297f95":"data.sample(10)","02694083":"data = pd.get_dummies(data)\ndata.head()","b585f048":"scaling_feature=[feature for feature in data.columns if feature not in ['Id','SalePerice'] ]\nlen(scaling_feature)","8034357a":"scaling_feature","afd664f5":"feature_scale=[feature for feature in data.columns if feature not in ['Id','SalePrice']]\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()\nscaler.fit(data[feature_scale])","2a43bb28":"scaler.transform(data[feature_scale])","fa3198bb":"y=data[['SalePrice']]","229ce425":"X=data.drop(['SalePrice'],axis=1)","cfef974f":"from sklearn.model_selection import train_test_split","7caf9e10":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4998, random_state=42)","5aed07a3":"X_test.shape","8e22322e":"from sklearn.linear_model import Lasso","852b757f":"clf = Lasso(alpha=20.0) # remember to set the seed, the random state in this function\nclf.fit(X_train,y_train)","ba8b2958":"prediction=clf.predict( X_test)","ad5a711f":"from sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error","a3473dc9":"r2_score(y_test, prediction)\n","f1142f78":"testdf = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","8e083b8b":"submission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\n\n#Visualize the first 5 rows\nsubmission.head()\nfilename = 'HosingPrice.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","536f4d5d":"From above we can say that Alley,MiscFeature,Fence,PoolQC have more than 50% of missing values so we need to drop it ","5e4e88a7":"Model","18c59ee5":"****DATA CLEANING****","d1e76c6a":"Feature Scaling","c81a2e83":"Data Explore"}}