{"cell_type":{"f2495b65":"code","a34b6ae8":"code","304b681a":"code","89779d45":"code","13647ba2":"code","dd93499b":"code","3bf7de94":"code","491be015":"code","ce243503":"code","ff6f2715":"code","e19bda99":"code","3d0ac305":"code","2234e989":"code","b7434619":"code","41b04b52":"code","b732918e":"code","e089755d":"code","bcf0ce57":"markdown","efe495b9":"markdown","f692b93c":"markdown","be144de2":"markdown","4078f257":"markdown"},"source":{"f2495b65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a34b6ae8":"df = pd.read_csv('\/kaggle\/input\/indian-population\/IndiaPopulation_2021.csv')\ndf.head()","304b681a":"df.info()","89779d45":"df.describe()","13647ba2":"df = df.sort_values(by='Year')\ndf = df.reset_index(drop=True)\ndf","dd93499b":"#GrowthRate Plot\n\nsns.lmplot(x=\"Year\", y=\"GrowthRate\",data=df, ci=None)","3bf7de94":"#Population Plot\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x='Year', y='Population', data=df, color=\"b\")","491be015":"mean_growth_rate = df.GrowthRate.mean()\nsd_growth_rate = df.GrowthRate.std()\nprint('mean = ',mean_growth_rate, ',sd =', sd_growth_rate)","ce243503":"from sklearn import metrics\n\ndef evaluate_model(y_true, y_predict):\n    mae = metrics.mean_absolute_error(y_true, y_predict)\n    mse = metrics.mean_squared_error(y_true, y_predict)\n    mape = np.mean((abs((y_true - y_predict) \/ y_true))) * 100\n    rmse = np.sqrt(metrics.mean_squared_error(y_true, y_predict))\n    \n    print('Model Performance')\n    print('MAE = {:0.4f}'.format(mae))\n    print('MAPE = {:0.4f}%'.format(mape))\n    print('MSE = {:0.4f}'.format(mse))\n    print('RMSE = {:0.4f}'.format(rmse))\n    \n    return mae, mse, mape, rmse","ff6f2715":"from sklearn.linear_model import LinearRegression\n\n#Split Data\nX_train = np.array(df['Year'][:-10]).reshape(-1,1)\ny_train = np.array(df['Population'][:-10]).reshape(-1,1)\n\nX_test = np.array(df['Year'][-10:]).reshape(-1,1)\ny_test = np.array(df['Population'][-10:]).reshape(-1,1)\n","e19bda99":"#Build Linear Model\nmodel_linear = LinearRegression()\nmodel_linear.fit(X_train,y_train)\npredict_model_linear = model_linear.predict(X_test)\nevaluate_model(y_test, predict_model_linear)","3d0ac305":"from sklearn.linear_model import Ridge\n\nmodel_ridge = Ridge(alpha=1.0)\nmodel_ridge.fit(X_train,y_train)\npredict_model_ridge = model_ridge.predict(X_test)\nevaluate_model(y_test, predict_model_ridge)","2234e989":"from sklearn.linear_model import Perceptron\n\nmodel_perceptron = Perceptron()\nmodel_perceptron.fit(X_train,y_train)\npredict_model_perceptron = model_perceptron.predict(X_test)\nevaluate_model(y_test, predict_model_perceptron)","b7434619":"pd.set_option('display.float_format', lambda x: '%.0f' % x)\n\ndf_result = pd.DataFrame(data = predict_model_linear, columns = ['y_predict'])\ndf_result['y_true'] = y_test\n\ndf_result","41b04b52":"df_result.plot()","b732918e":"Predict_X = pd.DataFrame(list(range(2022,2050)),columns=['Year'])\nPredict_X['Prediction'] = model_linear.predict(Predict_X[['Year']])","e089755d":"ax = df.plot(x=\"Year\", y=\"Population\")\nPredict_X.plot(x=\"Year\", y=\"Prediction\", ax = ax)","bcf0ce57":"**Split Data**","efe495b9":"**Result**","f692b93c":"**Evaluate Fuction**","be144de2":"**Build The Models**","4078f257":"**EDA**"}}