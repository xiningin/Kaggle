{"cell_type":{"464e7098":"code","b1f9b27c":"code","33875420":"code","068d5d69":"code","2cd99b6a":"code","5f4681da":"code","98cb26d4":"code","31885cb1":"code","420d9a46":"code","1af3c429":"code","2d97f79a":"code","6bf74099":"code","178fd731":"code","a0a1a378":"markdown","9070abac":"markdown","0c594687":"markdown","ce0e6ed3":"markdown"},"source":{"464e7098":"import numpy as np \nimport pandas as pd ","b1f9b27c":"df_train = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv')\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv')\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv')","33875420":"features = [col for col in df_train.columns if 'f' in col]","068d5d69":"import seaborn as sns\n\nsns.countplot(x = 'target', data = df_train)","2cd99b6a":"print(df_train[features].isna().sum().sum())\nprint(df_test[features].isna().sum().sum())","5f4681da":"from sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import make_column_transformer\n\n# the number 2 is just a threshold to split \nh_skew = list(df_train.loc[:,df_train.skew() >= 2].columns)  \nl_skew = list(df_train.loc[:,df_train.skew() < 2].columns)   \n\n#h_skew.remove('target')\nl_skew.remove('target')\n\ndf_train['median_h'] = df_train[h_skew].median(axis=1)\ndf_test['median_h'] = df_test[h_skew].median(axis=1)\n\ndf_train['median_l'] = df_train[l_skew].median(axis=1)\ndf_test['median_l'] = df_test[l_skew].median(axis=1)\n\nfeatures.append('median_h')\nfeatures.append('median_l')","98cb26d4":"X = df_train[features].copy()\ny = df_train['target'].copy()\n\nx_test = df_test[features].copy()","31885cb1":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX[features] = scaler.fit_transform(X[features])\nx_test[features] = scaler.transform(x_test[features])","420d9a46":"from tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import callbacks\n\nimport tensorflow as tf\nimport random\nimport os\n\nmy_seed = 42\n\ninput_shape = [X.shape[1]]\nPATIENCE = 10\nMIN_DELTA = 0.0005\n\nmodel = keras.Sequential([\n    layers.BatchNormalization(input_shape=input_shape),\n    layers.Dense(units=128, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.5),\n    layers.Dense(units=64, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.5),\n    layers.Dense(units=1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', \n              loss='binary_crossentropy', \n              metrics=['AUC'])\n\nearly_stopping = keras.callbacks.EarlyStopping(\n    patience=15,\n    min_delta=MIN_DELTA,\n    restore_best_weights=True,\n)","1af3c429":"model.summary()","2d97f79a":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\n\nEPOCHS = 700\nBATCH_SIZE = 2048 \nACTIVATION = 'swish'\nLEARNING_RATE = 0.0007\nRANDOM_SEED = 42\nn_splits = 5\n\nskf = StratifiedKFold(n_splits = n_splits, shuffle = True, random_state = RANDOM_SEED)\n\npreds_test_nn = []\nmean_auc = 0\n\nbest_nn_model = None\nbest_roc_score_nn = 0\n\nfor fold, (train_idx, val_idx) in enumerate(skf.split(X, y)):\n    X_train, X_val = X.loc[train_idx], X.loc[val_idx]\n    y_train, y_val = y.loc[train_idx], y.loc[val_idx]\n    \n    model.fit(X_train, y_train,\n             verbose = 0,\n             validation_data = (X_val, y_val),\n             batch_size = BATCH_SIZE, \n             epochs = EPOCHS,\n             callbacks = [early_stopping],\n             shuffle = True)\n   \n    y_pred = model.predict(X_val)\n    score = roc_auc_score(y_val, y_pred)\n    mean_auc += score\n    \n    \n    if score>best_roc_score_nn:\n        best_roc_score_nn = score\n        best_nn_model = model\n    \n    print(f\"Fold {fold}'s score: {score}\")\n        \n    preds_test_nn.append(model.predict(x_test).reshape(1,-1)[0])\n\nprint(\"==========================================\")\nprint(f\"Mean auc of all folds: {mean_auc \/ n_splits}\")","6bf74099":"submission = pd.DataFrame()\nsubmission['id'] = df_test['id']\nsubmission['target'] = np.mean(preds_test_nn, axis = 0)","178fd731":"submission.to_csv('submission', index=False)","a0a1a378":"### Let's build a simple Neural Network","9070abac":"### Training model ","0c594687":"### Conclusion\n\nThe distribution of data with target = 0 and target = 1 made are the same. This is one less thing to worry about :)","ce0e6ed3":"### Observing the test data"}}