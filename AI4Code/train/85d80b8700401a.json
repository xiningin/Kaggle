{"cell_type":{"9bbbc7b6":"code","a980ba50":"code","8e91a3d3":"code","83279ab4":"code","32df6c7e":"code","0e21b5a8":"code","c9d301af":"code","6105dd9e":"code","eb0fd5b2":"code","fdfd3527":"code","e98f34cb":"code","1933f54c":"code","da5b9c63":"code","a4d47c8e":"code","a9daed04":"code","7b69cc64":"code","40bc2639":"markdown","dab6e0f6":"markdown","80f1bfce":"markdown","6212c600":"markdown","c7be53c7":"markdown","45e93635":"markdown","3eab53c0":"markdown","c96acb76":"markdown","19ff2b3e":"markdown","7fa3548b":"markdown","5f0f09e9":"markdown","6910c0c3":"markdown","f59f2541":"markdown","8d36bca6":"markdown","fb564d04":"markdown","8f76f9fc":"markdown","e32574a0":"markdown"},"source":{"9bbbc7b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a980ba50":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import LeakyReLU, Dense","8e91a3d3":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntrain.head()\ny = train.label\nx = train.drop(columns= 'label')\nx = x\/255\nx.head()","83279ab4":"from sklearn.model_selection import train_test_split \nx_train, x_val , y_train, y_val = train_test_split(\n    x,\n    y,\n    test_size=0.15,\n    random_state=42 )","32df6c7e":"\nmodel = keras.Sequential([\n    Dense(64, input_shape=(784,), activation='sigmoid'),\n    Dense(32, activation=LeakyReLU(alpha=0.3)),\n    Dense(32, activation=LeakyReLU(alpha=0.3)),\n\n    Dense(10, activation='softmax')\n\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n","0e21b5a8":"model.summary()","c9d301af":"keras.utils.plot_model(model, show_shapes=True)\n","6105dd9e":"model.fit(\n    x= x_train,\n    y= y_train,\n    validation_data=(x_val, y_val),\n    workers=10,\n    epochs=10)","eb0fd5b2":"xtest = test\/255\nypre= model.predict(xtest)\nypre","fdfd3527":"sample = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\nsample1 = sample.drop(columns= 'ImageId')\nsample1[:5]","e98f34cb":"y_predicted = [np.argmax(i) for i in ypre]\ny_predicted[:5]","1933f54c":"print(len(sample1),'<-- sample prediction-->  ' ,  len(y_predicted))\n","da5b9c63":"y_predicted = pd.DataFrame(y_predicted)\nnewY = pd.concat([sample.drop(columns='Label'), y_predicted], axis = 1)","a4d47c8e":"newY.columns=['ImageId', 'Label']\nnewY","a9daed04":"model.evaluate(xtest,y_predicted)\n","7b69cc64":"newY.to_csv('my_submission.csv', index= False)\n","40bc2639":"# transform the prediction matrix into values ","dab6e0f6":"# importing the libraries ","80f1bfce":"# digital recognition with tensorflow","6212c600":"# model summary \n","c7be53c7":" <img src= \"https:\/\/camo.githubusercontent.com\/521578c8e820dc0f662ea03366138a6e0468bf8cb1a4b2286024a0d0b524d54b\/68747470733a2f2f6d6c34612e6769746875622e696f2f696d616765732f666967757265732f6d6e6973742d696e7075742e706e67\" alt =\"nuroal network \"  align=\"center\" style='width: 500px;' >\n","45e93635":"# saving the prediction values ","3eab53c0":"# training the model using ","c96acb76":"# save the values in CSV file","19ff2b3e":"# evaluate the model in test data","7fa3548b":"###  **Please upvote if you like my approach or if you learned something from this notebook. Your support gives me motivation to create interesting stuff. Thank you.** ","5f0f09e9":"# train validate split ","6910c0c3":"# reading the submission file ","f59f2541":"# creating the model ","8d36bca6":"# predicting the test values  ","fb564d04":"# ploting the model ","8f76f9fc":"# Handwritten digits classification using neural network\nIn this notebook we will classify handwritten digits using a simple neural network which has only input and output layers. We will than add a hidden layer and see how the performance of the model improves\n\nafter reading the data we are going to normalize it by divid each pixel with 255","e32574a0":"here we are going to use sklearn models to fit the data into a NN model that have **64 nuroal** in the frist hidden layer, **32 nuroal** in the second hidden layer, and **10 output** layers\n\n"}}