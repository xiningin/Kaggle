{"cell_type":{"2347d763":"code","0602b2e7":"code","4ddebf9e":"code","3688955d":"code","c06d0e4d":"code","252171da":"code","24c077ea":"code","68962a57":"code","9b2abb6b":"code","4b9f5099":"code","a252f094":"code","28c2e746":"code","da4acc8d":"code","0666266b":"markdown","3db9ca95":"markdown","6d8220fb":"markdown","cc5a3446":"markdown","9423373a":"markdown"},"source":{"2347d763":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom plotly import tools\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.offline as offline\nimport plotly.offline as offline\noffline.init_notebook_mode()\nimport operator\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0602b2e7":"df_school = pd.read_csv('..\/input\/2016 School Explorer.csv')","4ddebf9e":"df_school.describe()","3688955d":"categorical = df_school.dtypes[df.dtypes == \"object\"].index\nprint(categorical)\n\ndf[categorical].describe()","c06d0e4d":"trace1 = go.Histogram(\n    x = df_school['School Income Estimate'],\n    name = 'School Income Estimate'\n)\ndat = [trace1]\n\nlayout = go.Layout(\n    title='School Income Estimate',paper_bgcolor='rgb(243, 243, 243)',plot_bgcolor='rgb(243, 243, 243)'\n)\n\nfig = go.Figure(data=dat, layout = layout)\npy.iplot(fig, filename='School-Income-Hist')","252171da":"from collections import Counter\ncity_names = []\ncity_count = []\ncity_dict = dict(Counter(df_school.City))\ncity_dict = sorted(city_dict.items(), key=operator.itemgetter(1))\nfor tup in city_dict:\n    city_names.append(tup[0].lower())\n    city_count.append(tup[1])\n\ndataa = [go.Bar(\n            y= city_names,\n            x = city_count,\n            width = 0.9,\n            opacity=0.6, \n            orientation = 'h',\n            marker=dict(\n                color='rgb(158,202,225)',\n                line=dict(\n                    color='rgb(8,48,107)',\n                    width=1.5,\n                )\n            )\n        )]\nlayout = go.Layout(\n    title='Distribution of Schools ',\n    autosize = False,\n    width=800,\n    height=800,\n    margin=go.Margin(\n        l=250,\n        r=50,\n        b=100,\n        t=100,\n        pad=10\n    ),\n)\n\nfig = go.Figure(data=dataa, layout = layout)\npy.iplot(fig, filename='School-City-Bar')\n\nfig2 = {\n  \"data\": [\n    {\n      \"values\": city_count,\n      \"labels\": city_names,\n      \"hoverinfo\":\"label+percent\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    }],\n  \"layout\": {\n        \"title\":\"Percentage of Schools in each City\",\n        \"paper_bgcolor\":'rgb(243, 243, 243)',\"plot_bgcolor\":'rgb(178, 255, 102)'\n        \n    }\n}\npy.iplot(fig2, filename='School-City-Pie')","24c077ea":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(12,12))\nsns.jointplot(x=df_school.Latitude.values, y=df_school.Longitude.values, size=10, color = 'red')\n#sns.swarmplot(x=\"Latitude\", y=\"Longitude\", hue=\"Percent Asian\" data=df_school)\nplt.ylabel('Longitude', fontsize=12)\nplt.xlabel('Latitude', fontsize=12)\nplt.show()","68962a57":"from plotly.offline import init_notebook_mode, iplot\ndf=df_school\n\ntrace0 = go.Box(x=df[\"School Income Estimate\"][df[\"Community School?\"]==\"Yes\"],name=\"Community School\",boxmean=True)\ntrace1 = go.Box(x=df[\"School Income Estimate\"][df[\"Community School?\"]==\"No\"],name=\"Private School\",boxmean=True)\ndata = [trace0, trace1]\nlayout = go.Layout(\n    title = \"Box Plot of estimated income of Community and Private schools\",\n    margin = go.Margin(l=115)\n)\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","9b2abb6b":"plt.title('Distribution Of The Average Math Proficiency')\nsns.distplot(df_school[df_school['Average Math Proficiency'].notna()]['Average Math Proficiency'])","4b9f5099":"data = df['Economic Need Index'].dropna()\nsns.distplot(data)","a252f094":"def floater(x):\n    return float(x.strip('%'))\ndf[\"Supportive Environment %\"] = df[\"Supportive Environment %\"].astype(str).apply(floater)\ndf[\"Supportive Environment %\"] = df[\"Supportive Environment %\"].fillna(df[\"Supportive Environment %\"].mean())\ntrace1 = go.Bar(\n    y=df[\"Supportive Environment Rating\"].value_counts(sort=True).index,\n    x=df[\"Supportive Environment Rating\"].value_counts(sort=True).values,\n    text=df[\"Supportive Environment Rating\"].value_counts(sort=True).values,\n    textposition='auto',\n    name='Frequency',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(62, 66, 75, 0.6)',\n        line = dict(\n            color = 'rgba(62, 66, 75, 1)',\n            width = 3)\n    )\n)\ntrace2 = go.Bar(\n    y=list(df[\"Supportive Environment Rating\"].unique()),\n    x=[df[\"Supportive Environment %\"][df[\"Supportive Environment Rating\"] == i].mean() for i in list(df[\"Supportive Environment Rating\"].unique())],\n    text=[df[\"Supportive Environment %\"][df[\"Supportive Environment Rating\"] == i].mean() for i in list(df[\"Supportive Environment Rating\"].unique())],\n    textposition='auto',\n    name='Mean',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(232, 138, 32, 0.6)',\n        line = dict(\n            color = 'rgba(232, 138, 32, 1)',\n            width = 3)\n    )\n)\n\ntrace3 = go.Bar(\n    y=list(df[\"Supportive Environment Rating\"].unique()),\n    x=[df[\"Supportive Environment %\"][df[\"Supportive Environment Rating\"] == i].median() for i in list(df[\"Supportive Environment Rating\"].unique())],\n    text=[df[\"Supportive Environment %\"][df[\"Supportive Environment Rating\"] == i].median() for i in list(df[\"Supportive Environment Rating\"].unique())],\n    textposition='auto',\n    name='Median',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(243, 186, 50, 0.6)',\n        line = dict(\n            color = 'rgba(243, 186, 50, 1)',\n            width = 3)\n    )\n)\n\nfig = tools.make_subplots(rows=1, cols=3, print_grid=False, shared_yaxes=True)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\n\nfig['layout'].update(height=400, width=800, title='Statistical analysis of Supportive Environment rating',margin=go.Margin(l=100),yaxis=dict(tickangle=45))\niplot(fig, filename='simple-subplot-with-annotations')","28c2e746":"sns.countplot(df['Community School?'])","da4acc8d":"sns.countplot(df['Grade High'])","0666266b":"**Geographic distribution of schools**","3db9ca95":"**Distribution Of The Average Math Proficiency**","6d8220fb":"**To find the highest grade in schools**","cc5a3446":"**Economic need index of schools**","9423373a":"**Number of community schools**"}}