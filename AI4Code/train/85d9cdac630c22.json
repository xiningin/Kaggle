{"cell_type":{"81e1ef38":"code","94745f2c":"code","2e5e41f7":"code","8ee98e2b":"code","f77560fe":"code","98502628":"code","29a9ce8c":"code","62381208":"code","255e37b5":"code","e3ea13c2":"code","95075a81":"code","87823e8f":"markdown","29b81222":"markdown","7116bb45":"markdown","a43c6fe6":"markdown","2f94442d":"markdown","0b7a6a77":"markdown","4ff654fd":"markdown","dbb07494":"markdown","ada55c43":"markdown","ef1a52ec":"markdown","b2e59639":"markdown","306c90e9":"markdown","ea79edc4":"markdown","bbfef7d9":"markdown"},"source":{"81e1ef38":"# install\nfrom IPython.display import clear_output\n!pip install autogluon --user\nclear_output()\n\n#basic\nimport numpy as np\nimport pandas as pd\nimport random \nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#ui\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import TSNE\n\n#autogluon\nfrom autogluon.core.utils.loaders.load_pd import load\nfrom autogluon.text import TextPredictor","94745f2c":"# data & target\nTRAIN_PATH = 'https:\/\/autogluon-text.s3-accelerate.amazonaws.com\/glue\/sst\/train.parquet'\nTEST_PATH = 'https:\/\/autogluon-text.s3-accelerate.amazonaws.com\/glue\/sst\/dev.parquet'\nTARGET = \"label\"\n\n# seed\nSEED = 2022\ndef seed_everything(seed=SEED):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)    \nseed_everything()\n\n# train model\nMODEL_TRAIN_METRIC = \"acc\"\nMODEL_TRAIN_SAVED_PATH = '.\/ag_sst'\nMODEL_TRAIN_TIME = 60*3 # 3 min\n\n#evaluate model\nEVALUATE_METRIC = ['acc','f1']\nTNSE_N_COMPNENTS = 2\nMODEL_SAVE_PATH = \"modelSaveFolder\"","2e5e41f7":"train = load(TRAIN_PATH)\ntest = load(TEST_PATH)\nsampeSize = 2000  \ntrain = train.sample(n=sampeSize,random_state=SEED)\ntrain.head(10)","8ee98e2b":"predictor = TextPredictor(label=TARGET, eval_metric=MODEL_TRAIN_METRIC, path=MODEL_TRAIN_SAVED_PATH)\npredictor.fit(train, time_limit=MODEL_TRAIN_TIME)","f77560fe":"predictor.results.sort_values(\"accuracy\", ascending=False)","98502628":"test_score = predictor.evaluate(test, metrics=EVALUATE_METRIC)\nprint('Accuracy = {:.2f}%'.format(test_score[\"acc\"] * 100))\nprint('f1 = {:.2f}%'.format(test_score[\"f1\"] * 100))","29a9ce8c":"sentence1 = \"it's a charming and often affecting journey.\"\nsentence2 = \"It's slow, very, very, very slow.\"\npredictions = predictor.predict({'sentence': [sentence1, sentence2]})\nprint('\"Sentence\":', sentence1, '\"Predicted Sentiment\":', predictions[0])\nprint('\"Sentence\":', sentence2, '\"Predicted Sentiment\":', predictions[1])","62381208":"probs = predictor.predict_proba({'sentence': [sentence1, sentence2]})\nprint('\"Sentence\":', sentence1, '\"Predicted Class-Probabilities\":', probs[0])\nprint('\"Sentence\":', sentence2, '\"Predicted Class-Probabilities\":', probs[1])","255e37b5":"test_predictions = predictor.predict(test)\ntest_predictions.head()","e3ea13c2":"loaded_predictor = TextPredictor.load(MODEL_TRAIN_SAVED_PATH)\nloaded_predictor.predict_proba({'sentence': [sentence1, sentence2]})","95075a81":"loaded_predictor.save(MODEL_SAVE_PATH)\nloaded_predictor2 = TextPredictor.load(MODEL_SAVE_PATH)\nloaded_predictor2.predict_proba({'sentence': [sentence1, sentence2]})","87823e8f":"# model results","29b81222":"### evaluate model(accuarcy)","7116bb45":"### save model and load model and predict","a43c6fe6":"### predict test data target using saved model","2f94442d":"# evaludate model","0b7a6a77":"### evaluate model(predict sample data probability)","4ff654fd":"# installs & imports","dbb07494":"### predict test data target using trained model","ada55c43":"# predict model","ef1a52ec":"# load data","b2e59639":"### evaluate model(predict sample data target)","306c90e9":"# variables","ea79edc4":"# build model","bbfef7d9":"# Sentiment Analysis Task"}}