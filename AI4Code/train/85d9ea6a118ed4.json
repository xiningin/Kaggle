{"cell_type":{"62c2f899":"code","005fae57":"code","a75d8f31":"code","22e2e868":"code","e8d72ca2":"code","ba5da23d":"code","4ff57531":"code","5547dadd":"code","7e0a6188":"code","c5f9ac08":"code","12c64ed3":"code","a06003d1":"code","80dc480d":"code","4e44a6f6":"code","04e8e8a4":"code","af87e01e":"code","c54e5344":"code","571fa7c2":"code","8bdcce58":"code","786dc38f":"code","03d8cd27":"code","0131839f":"code","6ce73ae7":"code","23856ae8":"code","fee5d7e0":"code","f0878639":"code","f928315c":"code","eb610149":"code","76dbd612":"code","b696dbf4":"code","e34085c2":"code","ba47366f":"code","8fef69d6":"code","67982d8a":"markdown","fc596c1f":"markdown","c1009b5c":"markdown","d231f99b":"markdown","11a68063":"markdown","f9e5fbfa":"markdown","f965c5ff":"markdown","1f71444b":"markdown","ecd2f8cc":"markdown","3a825749":"markdown","0a3b4074":"markdown","e0e2a784":"markdown","c08ec95f":"markdown","7d62779d":"markdown","9785e500":"markdown","551ab35f":"markdown","dac7b098":"markdown","d48117a2":"markdown","fbde9faf":"markdown","4566803c":"markdown","0bf42e34":"markdown","e6ff7f40":"markdown","1945b2e6":"markdown","77c8ca07":"markdown"},"source":{"62c2f899":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nfrom sklearn.utils import shuffle\nsns.set()\n\nfrom random import choices\nfrom random import seed","005fae57":"digits_PATH = '\/kaggle\/input\/digit-recognizer\/'\n\ndigits_train = pd.read_csv(digits_PATH+'train.csv')","a75d8f31":"X, y = digits_train.iloc[:,1:].values\/255, digits_train.iloc[:,0].values\n\nX = X.reshape(-1,28, 28, 1)","22e2e868":"seed(1)\n\nN_images = 50\n\n# localiza\u00e7\u00e3o dos exemplos na matriz de dados \nrows = choices(range(0, 42000), k=N_images)\n\n# selecionando os d\u00edgitos, j\u00e1 no formato de matriz\ndigitos = [X[i].reshape(28,28) for i in rows]\nlabel_value = y[rows]\n\n# criando figura do matplotlib\nfig, ax = plt.subplots(5, int(len(rows)\/5),figsize=(18,10))\n\n# plotando!\nfor i in range(len(rows)):\n    j = int(i\/10)\n    k = i - j*10\n    ax[j, k].imshow(digitos[i], cmap = plt.cm.binary, interpolation=\"nearest\")\n    ax[j, k].set_title(label_value[i])\n    ax[j, k].axis('off')","e8d72ca2":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.9, random_state=0)","ba5da23d":"fig, ax = plt.subplots(2,2,figsize=(12,10))\n\nsns.countplot(y, ax=ax[0,0])\nax[0,0].set_title('Distribui\u00e7\u00e3o Original')\nsns.countplot(y_train, ax=ax[0,1])\nax[0,1].set_title('Distribui\u00e7\u00e3o do Treinamento')\nsns.countplot(y_test, ax=ax[1,0])\nax[1,0].set_title('Distribui\u00e7\u00e3o do Teste')\n\n\nplt.plot()","4ff57531":"def plot_erros(model, X, target, cols=10, rows=5):\n\n    y_pred = model.predict(X)\n    y_pred = np.argmax(y_pred, axis=1)\n    \n    predicao = pd.DataFrame(data={'predicao':y_pred, 'target':target})\n    predicao_erros = predicao[predicao.predicao != predicao.target]\n    \n    digitos = predicao_erros.index\n\n    fig, ax = plt.subplots(rows, cols,figsize=(4*rows,1.2*cols))\n\n    count = 0\n    for row in range(0, rows):\n        for col in range(0, cols):\n            if count<len(digitos):\n                ax[row, col].imshow(X[digitos[count],:,:,0], cmap = plt.cm.binary, interpolation=\"nearest\")\n                ax[row, col].set_title(f'{target[digitos[count]]} confused {y_pred[digitos[count]]}')\n            ax[row, col].axis('off')\n            count +=1\n            ","5547dadd":"class MultiCNN():\n    def __init__(self, model_generator, num_models=1):\n        self.models = []\n        self.create_models(model_generator, num_models)\n        \n    def create_models(self, model_generator, num_models=1):\n        for i in range(0,num_models):\n            m = keras.models.Sequential(model_generator())\n\n            m.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n            self.models.append(m)\n            \n    def fit(self, train_inputs, train_targets, early_stop=True, verbose=2, batch_size=200, epochs=100):\n        callback = []\n        \n        if early_stop:\n            callback.append(keras.callbacks.EarlyStopping(monitor='val_loss', min_delta=1e-6, patience=5))\n        \n        for m in self.models:\n            X_train2, X_val2, y_train2, y_val2 = train_test_split(train_inputs, train_targets, test_size = 0.2)\n            m.fit(X_train2, y_train2, \n                  batch_size= batch_size, \n                  epochs = epochs,\n                  callbacks=callback,\n                  validation_data = (X_val2, y_val2),\n                  verbose=verbose\n                 )\n            \n    def fit_generator(self, generator, train_inputs, train_targets, early_stop=True, verbose=2, batch_size=32, epochs=100):\n        callback = []\n        \n        if early_stop:\n            callback.append(keras.callbacks.EarlyStopping(monitor='val_loss', min_delta=1e-6, patience=5))\n        \n        for m in self.models:\n            X_train2, X_val2, y_train2, y_val2 = train_test_split(train_inputs, train_targets, test_size = 0.2)\n            \n            m.fit_generator(generator.flow(X_train2,y_train2, batch_size=batch_size),\n                            epochs = epochs,\n                            callbacks=callback,\n                            validation_data = (X_val2, y_val2),\n                            verbose=verbose\n                            )\n            \n    def predict(self, test_inputs):\n        prediction = [model.predict(test_inputs) for model in self.models]\n        return sum(prediction)\/len(prediction)\n    \n    def acuracia(self, test_input, test_target):\n        prediction = self.predict(test_input)\n        prediction = np.argmax(prediction, axis=1)\n        return accuracy_score(prediction, test_target)\n    \n    def confusion_matrix(self, test_input, test_target):\n        \n        y_pred = self.predict(test_input)\n\n        y_pred = np.argmax(y_pred, axis=1)\n\n        confusao = confusion_matrix(y_pred, test_target)\n\n        fig, ax = plt.subplots(1, figsize=(10,10))\n        sns.heatmap(pd.DataFrame(confusao), ax=ax, cbar=False, annot=True)\n        ax.set_title('Matriz de confus\u00e3o', size=20)\n        ax.set_yticklabels(ax.get_xticklabels(), rotation=0, size=15)\n        ax.set_xticklabels(ax.get_yticklabels(), rotation=0, size=15)\n        plt.show()\n        \n    def acuracia_individual(self, test_input, test_target):\n        return [accuracy_score(np.argmax(m.predict(X_test), axis=1), y_test) for m in self.models]","7e0a6188":"def make_CNN():\n    return  [\n\n            keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation=\"relu\", input_shape=(28, 28, 1)),\n            keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n\n            keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation=\"relu\"),\n            keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n\n            keras.layers.Flatten(),\n            keras.layers.Dense(units=64, activation=\"relu\"),\n\n            keras.layers.Dropout(0.2),\n\n            keras.layers.Dense(units=10, activation=\"softmax\")\n\n            ]\n    \n\n\nmultiCNN_default = MultiCNN(make_CNN, num_models=15)\n\nmultiCNN_default.fit(X_train, y_train, verbose = 0, early_stop=True)\n\nmultiCNN_default.acuracia(X_test, y_test)","c5f9ac08":"def make_CNN():\n    return  [\n\n                keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation=\"relu\", input_shape=(28, 28, 1)),\n                keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n\n                keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation=\"relu\"),\n                keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n\n                keras.layers.Flatten(),\n                keras.layers.Dense(units=64, activation=\"relu\"),\n                keras.layers.Dense(units=64, activation=\"relu\"),\n\n                keras.layers.Dropout(0.2),\n\n                keras.layers.Dense(units=10, activation=\"softmax\")\n\n            ]\n\nmultiCNN_plus_layer = MultiCNN(make_CNN, num_models=15)\n\nmultiCNN_plus_layer.fit(X_train, y_train, verbose = 0, early_stop=True)\n\nmultiCNN_plus_layer.acuracia(X_test, y_test)","12c64ed3":"fig,axes = plt.subplots(1)\naxes = sns.kdeplot(multiCNN_default.acuracia_individual(X_test, y_test), shade=True, color='r', label='default')\naxes = sns.kdeplot(multiCNN_plus_layer.acuracia_individual(X_test, y_test), shade=True, color='b', label='layer add')","a06003d1":"def make_CNN():\n    return [\n\n                keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation=\"relu\", input_shape=(28, 28, 1)),\n                keras.layers.AveragePooling2D(pool_size = (2,2), strides = 2),\n\n                keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation=\"relu\"),\n                keras.layers.AveragePooling2D(pool_size = (2,2), strides = 2),\n\n                keras.layers.Flatten(),\n                keras.layers.Dense(units=64, activation=\"relu\"),\n\n                keras.layers.Dropout(0.2),\n\n                keras.layers.Dense(units=10, activation=\"softmax\")\n\n                ]\n\n\nmultiCNN_pooling = MultiCNN(make_CNN, num_models=15)\n\nmultiCNN_pooling.fit(X_train, y_train, verbose = 0, early_stop=True)\n\nmultiCNN_pooling.acuracia(X_test, y_test)","80dc480d":"fig,axes = plt.subplots(1)\naxes = sns.kdeplot(multiCNN_default.acuracia_individual(X_test, y_test), shade=True, color='r', label='default')\naxes = sns.kdeplot(multiCNN_pooling.acuracia_individual(X_test, y_test), shade=True, color='b', label='pooling average')","4e44a6f6":"def make_CNN():\n    return [\n\n                keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation=\"relu\", input_shape=(28, 28, 1)),\n                keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n                keras.layers.BatchNormalization(),\n\n                keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation=\"relu\"),\n                keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n                keras.layers.BatchNormalization(),\n    \n\n                keras.layers.Flatten(),\n                keras.layers.Dense(units=64, activation=\"relu\"),\n\n                keras.layers.Dropout(0.2),\n\n                keras.layers.Dense(units=10, activation=\"softmax\")\n\n                ]\n\nmultiCNN_batch_normalization = MultiCNN(make_CNN, num_models=15)\n\nmultiCNN_batch_normalization.fit(X_train, y_train, verbose = 0, early_stop=True)\n\nmultiCNN_batch_normalization.acuracia(X_test, y_test)","04e8e8a4":"fig,axes = plt.subplots(1)\naxes = sns.kdeplot(multiCNN_default.acuracia_individual(X_test, y_test), shade=True, color='r', label='default')\naxes = sns.kdeplot(multiCNN_batch_normalization.acuracia_individual(X_test, y_test), shade=True, color='b', label='batch normalization')","af87e01e":"def make_CNN():\n    return [\n\n                keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation=\"relu\", input_shape=(28, 28, 1)),\n                keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n                keras.layers.BatchNormalization(),\n\n                keras.layers.Dropout(0.2),\n    \n                keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation=\"relu\"),\n                keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n                keras.layers.BatchNormalization(),\n    \n                keras.layers.Dropout(0.2),\n\n                keras.layers.Flatten(),\n                keras.layers.Dense(units=64, activation=\"relu\"),\n\n                keras.layers.Dropout(0.2),\n\n                keras.layers.Dense(units=10, activation=\"softmax\")\n\n                ]\n\nmultiCNN_dropout = MultiCNN(make_CNN, num_models=15)\n\nmultiCNN_dropout.fit(X_train, y_train, verbose = 0, early_stop=True)\n\nmultiCNN_dropout.acuracia(X_test, y_test)","c54e5344":"fig,axes = plt.subplots(1)\naxes = sns.kdeplot(multiCNN_default.acuracia_individual(X_test, y_test), shade=True, color='r', label='default')\naxes = sns.kdeplot(multiCNN_dropout.acuracia_individual(X_test, y_test), shade=True, color='b', label='dropout-layers')","571fa7c2":"def make_CNN():\n    return [\n\n                keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation=\"relu\", input_shape=(28, 28, 1)),\n                keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n                keras.layers.BatchNormalization(),\n\n                keras.layers.Dropout(0.2),\n    \n                keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation=\"relu\"),\n                keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n                keras.layers.BatchNormalization(),\n    \n                keras.layers.Dropout(0.2),\n\n                keras.layers.Flatten(),\n                keras.layers.Dense(units=200, activation=\"relu\"),\n\n                keras.layers.Dropout(0.2),\n\n                keras.layers.Dense(units=10, activation=\"softmax\")\n\n                ]\n\n\nmultiCNN_200 = MultiCNN(make_CNN, num_models=15)\n\nmultiCNN_200.fit(X_train, y_train, verbose = 0, early_stop=True)\n\nmultiCNN_200.acuracia(X_test, y_test)","8bdcce58":"fig,axes = plt.subplots(1)\naxes = sns.kdeplot(multiCNN_default.acuracia_individual(X_test, y_test), shade=True, color='r', label='default')\naxes = sns.kdeplot(multiCNN_200.acuracia_individual(X_test, y_test), shade=True, color='b', label='200 last layer')","786dc38f":"def make_CNN():\n    return [\n\n                keras.layers.Conv2D(filters=32, kernel_size=(5,5), activation=\"relu\", input_shape=(28, 28, 1)),\n                keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n                keras.layers.BatchNormalization(),\n\n                keras.layers.Dropout(0.2),\n    \n                keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation=\"relu\"),\n                keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n                keras.layers.BatchNormalization(),\n    \n                keras.layers.Dropout(0.2),\n\n                keras.layers.Flatten(),\n                keras.layers.Dense(units=200, activation=\"relu\"),\n\n                keras.layers.Dropout(0.2),\n\n                keras.layers.Dense(units=10, activation=\"softmax\")\n\n                ]\n\nmultiCNN_bigger_kernel = MultiCNN(make_CNN, num_models=15)\n\nmultiCNN_bigger_kernel.fit(X_train, y_train, verbose = 0, early_stop=True)\n\nmultiCNN_bigger_kernel.acuracia(X_test, y_test)","03d8cd27":"fig,axes = plt.subplots(1)\naxes = sns.kdeplot(multiCNN_default.acuracia_individual(X_test, y_test), shade=True, color='r', label='default')\naxes = sns.kdeplot(multiCNN_bigger_kernel.acuracia_individual(X_test, y_test), shade=True, color='b', label='5x5 kernel')","0131839f":"def make_CNN():\n    return [\n\n                keras.layers.Conv2D(filters=32, kernel_size=(5,5), activation=\"relu\", input_shape=(28, 28, 1)),\n                keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n                keras.layers.BatchNormalization(),\n\n                keras.layers.Dropout(0.2),\n    \n                keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation=\"relu\"),\n                keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n                keras.layers.BatchNormalization(),\n    \n                keras.layers.Dropout(0.2),\n\n                keras.layers.Flatten(),\n                keras.layers.Dense(units=200, activation=\"relu\"),\n\n                keras.layers.Dropout(0.2),\n\n                keras.layers.Dense(units=10, activation=\"softmax\")\n\n                ]\n\n\nmultiCNN_min_epochs = MultiCNN(make_CNN, num_models=15)\n\nmultiCNN_min_epochs.fit(X_train, y_train, verbose = 0, early_stop=True, epochs=10)\n\nmultiCNN_min_epochs.acuracia(X_test, y_test)","6ce73ae7":"fig,axes = plt.subplots(1)\naxes = sns.kdeplot(multiCNN_default.acuracia_individual(X_test, y_test), shade=True, color='r', label='default')\naxes = sns.kdeplot(multiCNN_min_epochs.acuracia_individual(X_test, y_test), shade=True, color='b', label='max 10 epochs')","23856ae8":"datagen = keras.preprocessing.image.ImageDataGenerator(\n                                                        featurewise_center=False,\n                                                        samplewise_center=False,\n                                                        featurewise_std_normalization=False,\n                                                        samplewise_std_normalization=False,\n                                                        zca_whitening=False,\n                                                        zca_epsilon=1e-06,\n                                                        rotation_range=10,\n                                                        width_shift_range=0.1,\n                                                        height_shift_range=0.1,\n                                                        brightness_range=None,\n                                                        zoom_range=0.1,\n                                                        fill_mode=\"nearest\",\n                                                        cval=0.0,\n                                                        horizontal_flip=False,\n                                                        vertical_flip=False,\n                                                        rescale=None,\n                                                        preprocessing_function=None,\n                                                        data_format=None,\n                                                        validation_split=0.0,\n                                                        dtype=None,\n                                                    )\n\ndatagen.fit(X_train)","fee5d7e0":"def make_CNN():\n    return [\n\n                keras.layers.Conv2D(filters=32, kernel_size=(5,5), activation=\"relu\", input_shape=(28, 28, 1)),\n                keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n                keras.layers.BatchNormalization(),\n\n                keras.layers.Dropout(0.2),\n    \n                keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation=\"relu\"),\n                keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n                keras.layers.BatchNormalization(),\n    \n                keras.layers.Dropout(0.2),\n\n                keras.layers.Flatten(),\n                keras.layers.Dense(units=200, activation=\"relu\"),\n\n                keras.layers.Dropout(0.2),\n\n                keras.layers.Dense(units=10, activation=\"softmax\")\n\n                ]\n\n\nmultiCNN_data_augmentation = MultiCNN(make_CNN, num_models=15)\n\nmultiCNN_data_augmentation.fit_generator(datagen, X_train, y_train, verbose = 0, early_stop=True)\n\nmultiCNN_data_augmentation.acuracia(X_test, y_test)","f0878639":"fig,axes = plt.subplots(1)\naxes = sns.kdeplot(multiCNN_default.acuracia_individual(X_test, y_test), shade=True, color='r', label='default')\naxes = sns.kdeplot(multiCNN_data_augmentation.acuracia_individual(X_test, y_test), shade=True, color='b', label='Data Augmentation')","f928315c":"plot_erros(multiCNN_data_augmentation, X_test, y_test, cols=10, rows=5)","eb610149":"def make_CNN():\n    return [\n\n                keras.layers.Conv2D(filters=32, kernel_size=(5,5), activation=\"relu\", input_shape=(28, 28, 1)),\n                keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n                keras.layers.BatchNormalization(),\n\n                keras.layers.Dropout(0.2),\n    \n                keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation=\"relu\"),\n                keras.layers.MaxPooling2D(pool_size = (2,2), strides = 2),\n                keras.layers.BatchNormalization(),\n    \n                keras.layers.Dropout(0.2),\n\n                keras.layers.Flatten(),\n                keras.layers.Dense(units=200, activation=\"relu\"),\n\n                keras.layers.Dropout(0.2),\n\n                keras.layers.Dense(units=10, activation=\"softmax\")\n\n                ]\n\nmultiCNN_final = MultiCNN(make_CNN, num_models=15)\n\nmultiCNN_final.fit_generator(datagen, X_train, y_train, verbose = 0, early_stop=True)","76dbd612":"multiCNN_final.acuracia(X_test, y_test)","b696dbf4":"submission = pd.read_csv(digits_PATH+'sample_submission.csv', index_col=0)\ntest = pd.read_csv(digits_PATH+'test.csv')\/255\ntest = test.values.reshape(-1,28, 28, 1)","e34085c2":"submission['Label'] = np.argmax(multiCNN_final.predict(test), axis=1)","ba47366f":"submission.Label.value_counts()","8fef69d6":"submission.to_csv('submission.csv')","67982d8a":"## Altera\u00e7\u00e3o da camada de Pooling para m\u00e9dia","fc596c1f":"## Erros do Melhor modelo","c1009b5c":"A distribui\u00e7\u00e3o dos n\u00fameros nos 3 no conjunto de teste e valida\u00e7\u00e3o est\u00e1 pr\u00f3xima a ser homog\u00eanea.","d231f99b":"## Aumento do n\u00famero de neur\u00f4nios na \u00faltima camada","11a68063":"## Importando Dataset","f9e5fbfa":"Aumentou um pouco a qualidade do modelo.","f965c5ff":"N\u00e3o aumentou a qualidade do modelo","1f71444b":"## Normaliza\u00e7\u00e3o por lote","ecd2f8cc":"N\u00e3o afetou a qualidade do modelo","3a825749":"## Fun\u00e7\u00f5es Auxiliares","0a3b4074":"## Diminui\u00e7\u00e3o n\u00famero m\u00e1ximo de Epochs","e0e2a784":"## Treinamento para submiss\u00e3o","c08ec95f":"## Separando Treino, Valida\u00e7\u00e3o e Teste","7d62779d":"Houve melhora no modelo.","9785e500":"Adi\u00e7\u00e3o de dropouts ap\u00f3s cada camada apresentou pequena melhora","551ab35f":"Usar imagens geradas aumentaram a qualidade do modelo ","dac7b098":"Afetou negativamente o resultado","d48117a2":"## Adi\u00e7\u00e3o de mais camadas de dropout","fbde9faf":"# Digit Recognizer","4566803c":"## Aumento do Tamanho do kernel","0bf42e34":"## Adicionando uma camada ao final ","e6ff7f40":"## Keras CNN","1945b2e6":"## Adi\u00e7\u00e3o de dados","77c8ca07":"Aumentou a qualidade do modelo"}}