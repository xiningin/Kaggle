{"cell_type":{"51644077":"code","0ae9dde5":"code","6f6c99bc":"code","36a3b4cb":"code","6ffdf29a":"code","7dc98273":"code","8f7b5de5":"code","7ab34e8a":"code","f2cb2229":"code","9a566c31":"code","f495e421":"code","03a92ece":"code","a4952226":"code","c1bbfddb":"code","862070fe":"code","0be1e1f0":"code","ead4debb":"code","55742017":"code","5386cfb2":"code","973d017a":"code","f6754108":"code","2b65a6f2":"code","4ab55ced":"code","43e565f9":"code","8d8a643f":"code","54ccd047":"code","b81e101a":"code","21fe5f7d":"code","02737ace":"code","21f6e39b":"markdown","07ea5308":"markdown","0826f052":"markdown","251b99b6":"markdown","af526ecf":"markdown","4be4463a":"markdown","19922fdf":"markdown","5042f3cd":"markdown","7450aa0d":"markdown","878f2b8f":"markdown","8dce8849":"markdown","f6f28cd5":"markdown","a63a3481":"markdown","91f13b43":"markdown","e9b19e78":"markdown","b5a139ad":"markdown","97466e24":"markdown","1703dc65":"markdown","e5f72f46":"markdown","f7639fa1":"markdown","12ce220d":"markdown","d97ce20e":"markdown","88c24f85":"markdown","76484dae":"markdown","91361fb0":"markdown","318e7bc1":"markdown","c7c926c5":"markdown","950b45f6":"markdown","ff289345":"markdown","9967754e":"markdown","2e40caa8":"markdown","3e000113":"markdown","683f3d8f":"markdown","07d09cf5":"markdown","555cbd02":"markdown","977db534":"markdown","fbf5ff39":"markdown","12f52688":"markdown","61e6e3a1":"markdown","bad6ec46":"markdown","6a229d24":"markdown","50b1a44a":"markdown","74f3d5bb":"markdown","6865f95f":"markdown","d3b2f6fc":"markdown","3f1b990d":"markdown","4db8d61a":"markdown","2e1bccc6":"markdown"},"source":{"51644077":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_columns', None)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ae9dde5":"def prettify(plt):\n    plt.grid(False)\n    plt.xticks([],[])\n    plt.xlabel('')","6f6c99bc":"# os.listdir('..\/input\/stack-overflow-developer-survey-2020\/developer_survey_2020')\npath = '..\/input\/stack-overflow-developer-survey-2020\/developer_survey_2020\/survey_results_public.csv'\ndf = pd.read_csv(path)","36a3b4cb":"dfp = df[df.Country=='Pakistan']\ndfp.head(2)","6ffdf29a":"dfp.groupby(['Country']).mean()","7dc98273":"plt.style.use('seaborn')\n\ndft = dfp.groupby(['Ethnicity']).count().sort_values('Respondent', ascending=False).head(5)\nfig = plt.figure(figsize=(8,8))\nexplode = [0.01, 0.01, 0.05, 0.05, 0.05]\nplt.pie(dft.Respondent, labels=dft.index,labeldistance=1.05, explode=explode,\n        autopct='%.1f%%', startangle=180)\n\nplt.show()","8f7b5de5":"plt.style.use('dark_background')\n\ndft = dfp.groupby(['Gender']).count().sort_values('Respondent', ascending=False)\nfig = plt.figure(figsize=(8,8))\nexplode = [0.01, 0.05, 0.05, 0.1]\nplt.pie(dft.Respondent, labels=dft.index,labeldistance=1.05,\n        explode=explode, startangle=10 )\nplt.show()\nplt.style.use('default')","7ab34e8a":"plt.style.use('default')\n\ndft = dfp.groupby(['Sexuality']).count()\nfig = plt.figure(figsize=(6,6))\nexplode = [0.01, 0.05, 0.2, 0.01]\nplt.pie(dft.Respondent,labels=dft.index,labeldistance=1.01,\n        explode=explode, startangle=50 )\nplt.show()","f2cb2229":"plt.style.use('ggplot')\n\ndft = df.groupby(['Country']).count()\n\nfig, ax = plt.subplots(ncols=2, nrows=1, figsize=(15,5))\n\nsns.violinplot(df.Age.where(df.Age<80), inner='quartile', ax=ax[0])\nax[0].set_xticks(np.arange(0, 90, 10))\nax[0].set_title('Age of Respondents WorldWide')\n\nsns.violinplot(df.Age.where(df.Country=='Pakistan'),  inner='quartile',ax=ax[1])\nax[1].set_xticks(np.arange(10, 60, 5))\nax[1].set_title('Age of Respondents of Pakistan')\n\nax[0].set_xlabel('Age')\nax[1].set_xlabel('Age')\n\nplt.show()","9a566c31":"plt.style.use('fast')\n\ndft = dfp.groupby(['EdLevel']).count()\nEdLvl = [\n    x[:x.find('(')-1] if x.find('(')!=-1\n    else \"No Formal Education\" if x.find('formal')!=-1\n    else \"College Dropout\" if x.find('without earning')!=-1\n    else x\n    for x in dft.index \n]\npies = [dft.Respondent[dft.index==x][0] for x in dft.index]\n\nfig = plt.figure(figsize=(6,6))\nplt.pie(pies, labels=EdLvl, startangle=50, autopct=\"%.1f%%\", pctdistance=0.75,\n       labeldistance=1.03, explode=[0,0,0,0,0,0.1,0,0])\n# ax.set_title('Education Levels',fontdict={'fontsize':30})\n\nplt.savefig('4.png', dpi=200, bbox_inches='tight')\nplt.style.use('default')","f495e421":"plt.style.use('seaborn')\n\ndft = dfp.groupby(['EdLevel']).mean()\n\nfig = plt.figure()\nplt.barh(EdLvl, dft.Age)\n\nfor i, x in enumerate(round(dft.Age,1)):\n    plt.annotate(x, (x,i))\n\nprettify(plt)\n\nplt.style.use('default')","03a92ece":"plt.style.use('ggplot')\n\ndft = dfp.groupby(['Employment']).count()\n\nfig = plt.figure()\n\nplt.pie(dft.Respondent, labels=dft.index, startangle=-130,\n       explode=[0.01, 0.03, 0.02, 0.06, 0.02, 0.1, 0.02],\n        labeldistance=1.05)\n\nplt.show()\n\nplt.style.use('default')","a4952226":"plt.style.use('ggplot')\n\ndft = dfp.groupby(['Employment']).mean()\ndft.Age.Retired = 0\nfig = plt.figure()\n\nplt.barh(dft.index, dft.Age)\nplt.xlabel('Age')\nfor i, x in enumerate(round(dft.Age,1)):\n    plt.annotate(x, (x,i))\nprettify(plt)\nplt.show()","c1bbfddb":"plt.style.use('ggplot')\n\nfig, ax = plt.subplots(ncols=2, figsize=(14,4))\ndfp.Age1stCode.replace('Younger than 5 years', '4', inplace=True)\ndfp.Age1stCode.replace('Older than 85', '86', inplace=True)\ndf.Age1stCode.replace('Younger than 5 years', '4', inplace=True)\ndf.Age1stCode.replace('Older than 85', '86', inplace=True)\ndf.Age1stCode = df.Age1stCode.astype('float')\ndfp.Age1stCode = df.Age1stCode.astype('float')\n\nsns.violinplot(df.Age1stCode.where(df.Age1stCode<50), inner='quartile', ax=ax[0])\nsns.violinplot(dfp.Age1stCode, inner='quartile', ax=ax[1])\n\nax[0].set_title('Age of 1st Code Worlwide')\nax[1].set_title('Age of 1st Code in Paksitan')\n\nax[0].set_xticks(np.arange(0,60,10))\nax[1].set_xticks(np.arange(0,40,5))\n\nax[0].set_xlabel('Age')\nax[1].set_xlabel('Age')\n\nplt.style.use('default')","862070fe":"plt.style.use('ggplot')\n\nfig, ax = plt.subplots(ncols=2, figsize=(14,4))\n\ndfp.YearsCode.replace('Less than 1 year', 0.5, inplace=True)\ndfp.YearsCodePro.replace('Less than 1 year', 0.5, inplace=True)\ndfp.YearsCode = dfp.YearsCode.astype('float')\ndfp.YearsCodePro = dfp.YearsCodePro.astype('float')\n\nsns.boxplot(dfp.YearsCode.dropna(), ax=ax[0])\nsns.boxplot(dfp.YearsCodePro.dropna(), ax=ax[1])\n\nax[0].set_title('Coding Experience')\nax[1].set_title('Professional Coding Experience')\n\nax[0].set_xticks(np.arange(0,40,5))\nax[1].set_xticks(np.arange(0,30,5))\n\nax[0].set_xlabel('Years')\nax[1].set_xlabel('Years')\n\n\nplt.style.use('default')","0be1e1f0":"plt.style.use('ggplot')\ndft = dfp.groupby(['OpSys']).Respondent.count()\n\ntypes = [x for x in dft.index]\npcnts = [round(100*dft[x]\/nums,1) for x in dft.index]\n\nfig= plt.figure(figsize=(8,4))\nplt.barh(types, pcnts)\n\nfor y, p in enumerate(pcnts):\n  plt.annotate(\"%.1f%%\"%p, (p+0.5, y))\nprettify(plt)\n\nplt.style.use('default')","ead4debb":"plt.style.use('seaborn')\n\nmt = {}\nfor x in dfp.MiscTechWorkedWith.dropna():\n    for d in x.split(';'):\n        if d not in mt:\n            mt[d] = 1   # create new instance\n        else:\n            mt[d] += 1  # increments that instance           \nmt = {k:v for k,v in sorted(mt.items(), key=lambda x:x[1])}\npos = np.arange(0,len(mt.keys()), 1)\nlabels = [x for x in mt.keys()]\ntot = dfp.LanguageWorkedWith.count()\npcnts = [round(100*x\/tot, 1) for x in mt.values()]\n\nfig = plt.figure()\nplt.barh(labels, pcnts)\n\nfor i, x in enumerate(pcnts):\n    plt.annotate('%.1f%%'%x, (x+0.2, i-0.2))\nprettify(plt)\n    ","55742017":"plt.style.use('bmh')\n\nmt = {}\nfor x in dfp.NEWCollabToolsWorkedWith.dropna():\n    for d in x.split(';'):\n        if d not in mt:\n            mt[d] = 1   # create new instance\n        else:\n            mt[d] += 1  # increments that instance           \nmt = {k:v for k,v in sorted(mt.items(), key=lambda x:x[1])}\npos = np.arange(0,len(mt.keys()), 1)\nlabels = [x for x in mt.keys()]\ntot = dfp.LanguageWorkedWith.count()\npcnts = [round(100*x\/tot, 1) for x in mt.values()]\n\nfig = plt.figure()\nplt.barh(labels, pcnts)\n\nfor i, x in enumerate(pcnts):\n    plt.annotate('%.1f%%'%x, (x+0.2, i-0.2))\nprettify(plt)\n    ","5386cfb2":"plt.style.use('seaborn-dark')\n\n# current lw users\nlw = {}\nfor x in dfp.LanguageWorkedWith.dropna():\n    for d in x.split(';'):\n        if d not in lw:\n            lw[d] = 1   # create new instance\n        else:\n            lw[d] += 1  # increments that instance           \nlw = {k:v for k,v in sorted(lw.items(), key=lambda x:x[1])}\npos = np.arange(0,len(lw.keys()), 1)\nlabels = [x for x in lw.keys()]\ntot = dfp.LanguageWorkedWith.count()\npcnts = [round(100*x\/tot, 2) for x in lw.values()]\n\nfig = plt.figure(figsize=(10,10))\n\nplt.barh(labels, list(lw.values()), color='y', edgecolor='k')\n\nfor (y, p), x  in zip(enumerate(pcnts), lw.values()):\n   plt.annotate(\"%.2f%%\"%p, (x+5 ,y-0.125))\nprettify(plt)\n","973d017a":"plt.style.use('seaborn-dark')\n\n# current lw users\nlw = {}\nfor x in dfp.LanguageWorkedWith.dropna():\n    for d in x.split(';'):\n        if d not in lw:\n            lw[d] = 1   # create new instance\n        else:\n            lw[d] += 1  # increments that instance           \nlw = {k:v for k,v in sorted(lw.items(), key=lambda x:x[1])}\npos = np.arange(0,len(lw.keys()), 1)\nlabels = [x for x in lw.keys()]\ntot = dfp.LanguageWorkedWith.count()\npcnts = [round(100*x\/tot, 1) for x in lw.values()]\n\nfig = plt.figure()\n\nplt.barh(labels[-8:], list(lw.values())[-8:], color='y', edgecolor='k')\n\nfor (y, p), x  in zip(enumerate(pcnts[-8:]), list(lw.values())[-8:]):\n   plt.annotate(\"%.1f%%\"%p, (x+5 ,y-0.125))\nprettify(plt)\n","f6754108":"plt.style.use('ggplot')\n\n# current lw users\nlw = {}\nfor x in dfp.LanguageDesireNextYear.dropna():\n    for d in x.split(';'):\n        if d not in lw:\n            lw[d] = 1   # create new instance\n        else:\n            lw[d] += 1  # increments that instance           \nlw = {k:v for k,v in sorted(lw.items(), key=lambda x:x[1])}\npos = np.arange(0,len(lw.keys()), 1)\nlabels = [x for x in lw.keys()]\ntot = dfp.LanguageWorkedWith.count()\npcnts = [round(100*x\/tot, 1) for x in lw.values()]\n\nfig = plt.figure()\n\nplt.barh(labels[-8:], list(lw.values())[-8:], edgecolor='k')\n\nfor (y, p), x  in zip(enumerate(pcnts[-8:]), list(lw.values())[-8:]):\n   plt.annotate(\"%.1f%%\"%p, (x+5 ,y-0.125))\nprettify(plt)\n","2b65a6f2":"plt.style.use('seaborn-dark')\n\n# current lw users\nlw = {}\nfor x in dfp.DatabaseWorkedWith.dropna():\n    for d in x.split(';'):\n        if d not in lw:\n            lw[d] = 1   # create new instance\n        else:\n            lw[d] += 1  # increments that instance           \nlw = {k:v for k,v in sorted(lw.items(), key=lambda x:x[1])}\npos = np.arange(0,len(lw.keys()), 1)\nlabels = [x for x in lw.keys()]\ntot = dfp.LanguageWorkedWith.count()\npcnts = [round(100*x\/tot, 1) for x in lw.values()]\n\nfig = plt.figure()\n\nplt.barh(labels, list(lw.values()), edgecolor='k')\n\nfor (y, p), x  in zip(enumerate(pcnts), list(lw.values())):\n   plt.annotate(\"%.1f%%\"%p, (x+5 ,y-0.125))\nprettify(plt)\n","4ab55ced":"plt.style.use('seaborn-dark')\n\n# current lw users\nlw = {}\nfor x in dfp.DatabaseWorkedWith.dropna():\n    for d in x.split(';'):\n        if d not in lw:\n            lw[d] = 1   # create new instance\n        else:\n            lw[d] += 1  # increments that instance           \nlw = {k:v for k,v in sorted(lw.items(), key=lambda x:x[1])}\npos = np.arange(0,len(lw.keys()), 1)\nlabels = [x for x in lw.keys()]\ntot = dfp.LanguageWorkedWith.count()\npcnts = [round(100*x\/tot, 1) for x in lw.values()]\n\nfig = plt.figure()\n\nplt.barh(labels[-8:], list(lw.values())[-8:], edgecolor='k')\n\nfor (y, p), x  in zip(enumerate(pcnts[-8:]), list(lw.values())[-8:]):\n   plt.annotate(\"%.1f%%\"%p, (x+5 ,y-0.125))\nprettify(plt)\n","43e565f9":"plt.style.use('seaborn')\n\n# current lw users\nlw = {}\nfor x in dfp.DevType.dropna():\n    for d in x.split(';'):\n        if d not in lw:\n            lw[d] = 1   # create new instance\n        else:\n            lw[d] += 1  # increments that instance           \nlw = {k:v for k,v in sorted(lw.items(), key=lambda x:x[1])}\npos = np.arange(0,len(lw.keys()), 1)\nlabels = [x for x in lw.keys()]\ntot = dfp.LanguageWorkedWith.count()\npcnts = [round(100*x\/tot, 1) for x in lw.values()]\n\nfig = plt.figure()\n\nplt.barh(labels, list(lw.values()), edgecolor='r')\n\nfor (y, p), x  in zip(enumerate(pcnts), list(lw.values())):\n   plt.annotate(\"%.1f%%\"%p, (x+5 ,y-0.125))\nprettify(plt)\n","8d8a643f":"plt.style.use('seaborn')\n\n# current lw users\nlw = {}\nfor x in dfp.DevType.dropna():\n    for d in x.split(';'):\n        if d not in lw:\n            lw[d] = 1   # create new instance\n        else:\n            lw[d] += 1  # increments that instance           \nlw = {k:v for k,v in sorted(lw.items(), key=lambda x:x[1])}\npos = np.arange(0,len(lw.keys()), 1)\nlabels = [x for x in lw.keys()]\ntot = dfp.LanguageWorkedWith.count()\npcnts = [round(100*x\/tot, 1) for x in lw.values()]\n\nfig = plt.figure()\n\nplt.barh(labels[-8:], list(lw.values())[-8:], edgecolor='r')\n\nfor (y, p), x  in zip(enumerate(pcnts[-8:]), list(lw.values())[-8:]):\n   plt.annotate(\"%.1f%%\"%p, (x+5 ,y-0.125))\nprettify(plt)\n","54ccd047":"plt.style.use('ggplot')\n\nfig= plt.figure(figsize=(8,6))\nsns.boxplot(dfp[dfp.WorkWeekHrs<100].WorkWeekHrs)\nplt.xticks(np.arange(0,101,10))\nplt.grid(axis='y')\n\nplt.style.use('default')","b81e101a":"plt.style.use('seaborn')\n\ndft = dfp.groupby(['NEWOvertime']).Respondent.count()\nnames = list(map(lambda x: x, dft.index))\nnums = list(map(lambda x: dft[x], range(len(dft.index))))\npcnts = [round(100*x\/sum(nums),1) for x in nums]\n\nfig = plt.figure()\nplt.barh(names, pcnts, edgecolor='k')\nfor y, p in enumerate(pcnts):\n  plt.annotate(\"{}%\".format(p), (p+0.5, y))\nprettify(plt)\n\nplt.style.use('default')","21fe5f7d":"plt.style.use('ggplot')\n\nuns = {}\nfor d in dfp.NEWStuck.dropna():\n  for x in d.split(';'):\n    if x not in uns:\n      uns[x] = 1\n    else:\n      uns[x] += 1\nuns = {k:v for k,v in sorted(uns.items(), key=lambda x:x[1])}\n\nnames = [x[:x.find('(')-1]if x=='Visit another developer community (please name):' else x for x in uns.keys()]\npcnts = [round(100*x\/dfp.NEWStuck.dropna().count(),1) for x in uns.values()]\n\nfig = plt.figure()\nplt.barh(names, pcnts)\nfor y, p in enumerate(pcnts):\n  plt.annotate(\"%.1f%%\"%p, (p+0.5, y-0.1))\nprettify(plt)\n\nplt.style.use('default')","02737ace":"plt.style.use('bmh')\n\ndft = dfp.groupby(['NEWEdImpt']).Respondent.count()\npies = [dft[x] for x in dft.index]\nlabels = [dft.index[x] for x in range(dft.shape[0])]\n\nfig= plt.figure()\nplt.pie(pies, labels=labels)\n\nplt.style.use('default')","21f6e39b":"I guess that is all.<br>\nI hope IT industry really boom in Pakistan and we get to see more and more talent rising from Pakistan.<br>\nBest of luck, bhaiyo behno :)","07ea5308":"# Job Related","0826f052":"Majority of folks visit StackOverflow when they get stuck","251b99b6":"# Languages Worked With","af526ecf":"### Employment Status","4be4463a":"### Education Levels","19922fdf":"Most of the Pakistanis has age between between 17 - 35. <br>\nThe mean age of Pakistani Respondents is ~25. Whereas the mean age worldwide is ~30","5042f3cd":"note: This is a violinplot. Its thickness(yaxis) shows frequency and its length shows range. The dotted lines represents quartiles \nwith middle dotted line being the mean value","7450aa0d":"### Primary Operating System For Work","878f2b8f":"Most people use windows and few people use MacOS","8dce8849":"### Written their First Code","f6f28cd5":"# Coding Experience","a63a3481":"### Importance of Formal Education for career","91f13b43":"### What do you do when you get stuck?","e9b19e78":"This holds true as Master's degree holder have higher mean age and those in primary school have lower mean age.","b5a139ad":"Glad to know python is most desired language","97466e24":"Most of the folks think formal education is necessary.","1703dc65":"### Distribution of Hours Worked Weekly","e5f72f46":"# Aptitudes and Trends","f7639fa1":"Most of the folks works as front-end, fullstack, backend and app developers<br>\n\n(expand the output below to view all of DevTypes)","12ce220d":"WE WORK OVERTIME A LOT :-P","d97ce20e":"### Overtime Routine","88c24f85":"### Age","76484dae":"# Employment","91361fb0":"# Age and Education","318e7bc1":"1. Most of the Respondents have Coding experience of 4-8 years with maximum being ~30 years\n2. Most of the Respondents have Professional Coding experience of >5 years with maximum being ~20 years","c7c926c5":"### Mean age of various Education Levels","950b45f6":"### Misc Techs Worked With","ff289345":"In this notebook, I will be visualizing different components of the Stack Overflow survey 2020 for my country Pakistan only.","9967754e":"Most of the folks are South Asian. <br>\nBut there are other diverse ethnic groups as well.","2e40caa8":"Most of the Paki folks work for 35-50 hours per a week.<br>\nSome hard working folks take it upto 90+ hours per week!","3e000113":"### Mean Age Of Various Employments","683f3d8f":"1. Most are employed full time\n2. Lots of Respondents are students ","07d09cf5":"MySQL is the most popular database.\n\n(expand the output below to view all of databases worked with)","555cbd02":"Makes sense as Employed folks have higher mean ages and Students have lower mean ages<br>\nRetired folks didn't provide their age","977db534":"### Developer Type","fbf5ff39":"IT industry is mostly men-dominated followed by a fewer number of women","12f52688":"Most of the Pakistanis are straight.<br>\n","61e6e3a1":"# Technology","bad6ec46":"Note that a Respondent could mark mutliple languages, thus the percentage sum crosses well above 100.\n70% of Respondents have worked with JavaScript. Woah. (and here I am dont know a thing about JS)<br>\nOur python stands at 7th position. BTW, in world overall, python was at number 4.<br>\n\n(expand the output below to watch all of the languages stats)","6a229d24":"### Databases worked with","50b1a44a":"### Languages Desired","74f3d5bb":"### Gender","6865f95f":"# Ethinicity","d3b2f6fc":"### Coding Experience and Professional Coding Experience","3f1b990d":"# Gender and Sexuality","4db8d61a":"### Sexual Orientation","2e1bccc6":"1. Most of the people in Pak wrote their first code at age 15-22 whereas worldwide it's 10-20\n2. Mean age in Pak is ~18 years and worldwide is ~15 years"}}