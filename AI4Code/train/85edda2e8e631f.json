{"cell_type":{"cbe93c0e":"code","cdaa276b":"code","2aa9c17d":"code","15043699":"code","7287b973":"code","5721276b":"code","99e0a8f3":"markdown","85ce430c":"markdown","2329a6b5":"markdown","61b44968":"markdown"},"source":{"cbe93c0e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as outpu","cdaa276b":"data_all = pd.read_excel(\"\/kaggle\/input\/covid19\/dataset.xlsx\") # load excel file\n\n# supressing columns for better visualization\ncolumns_to_drop = [\"Patient ID\", \"Patient age quantile\", \"Patient addmited to regular ward (1=yes, 0=no)\", \"Patient addmited to semi-intensive unit (1=yes, 0=no)\", \"Patient addmited to intensive care unit (1=yes, 0=no)\", \"Mycoplasma pneumoniae\", \"Promyelocytes\",\"Metamyelocytes\", \"Myelocytes\", \"Myeloblasts\", \"Fio2 (venous blood gas analysis)\", \"Urine - Sugar\", \"Urine - Red blood cells\", \"Partial thromboplastin time\u00a0(PTT)\u00a0\", \"Prothrombin time (PT), Activity\", \"D-Dimer\", \"Vitamin B12\", \"Albumin\"]\n\n#data_all =\n#data_all.dropna()\n#data_all.infer_objects()\n\n#data_all.loc[data_all['SARS-Cov-2 exam result'] == 'positive'] = 1\n#data_all.loc[data_all['SARS-Cov-2 exam result'] == 'negative'] = 0\n\ndata_positive = data_all.loc[data_all[\"SARS-Cov-2 exam result\"] == 'positive'][:] # select only covid-19 positive cases\n#data_positive = data_all.loc[data_all[\"SARS-Cov-2 exam result\"] == 1][:] # select only covid-19 positive cases\ndata_positive.drop(columns=columns_to_drop, inplace=True)","2aa9c17d":"# select only covid-19 negative cases\ndata_negative = data_all.loc[data_all[\"SARS-Cov-2 exam result\"] == 'negative'][:]\n#data_negative = data_all.loc[data_all[\"SARS-Cov-2 exam result\"] == 0][:]\ndata_negative.drop(columns=columns_to_drop, inplace=True)\n\nDat\n\n","15043699":"# data_all.boxplot(rot=90, fontsize=10, figsize=(16,6)) # boxplot of all cases (negative and positive)","7287b973":"import matplotlib.pyplot as plt\n\nmy_medianprops = dict(linestyle='-', linewidth=2, color='red')\nmy_fontsize=10\nmy_showfliers=False\n\nfig, axes = plt.subplots(nrows=2, ncols=1, figsize=(16, 6), sharey=True)\n\nbox_positive = data_positive.boxplot(return_type='dict', ax=axes[0], rot=90, fontsize=my_fontsize, showfliers=my_showfliers, medianprops=my_medianprops) # draw boxplot of positive cases\nbox_negative = data_negative.boxplot(return_type='dict', ax=axes[1], rot=90, fontsize=my_fontsize, showfliers=my_showfliers, medianprops=my_medianprops) # draw boxplot of positive cases\n\n# https:\/\/stackoverflow.com\/questions\/18861075\/overlaying-the-numeric-value-of-median-variance-in-boxplots\nx_pos, y_pos = [[], []]\nfor line in box_positive['medians']:\n    # get position data for median line\n    x0, y0 = line.get_xydata()[0] # top of median line\n#    x0, y0, x1, y1 = line.get_xydata() # top of median line\n    x1, y1 = line.get_xydata()[1] # bottom of median line\n    x_pos.append((x0 + x1) \/ 2)\n    y_pos.append(y0)\n\nx_neg, y_neg = [[], []]\nfor line in box_negative['medians']:\n    # get position data for median line\n    x0, y0 = line.get_xydata()[0] # top of median line\n#    x1, y1, x2, y2 = line.get_xydata() # top of median line\n    x1, y1 = line.get_xydata()[1] # bottom of median line\n    x_neg.append((x0 + x1) \/ 2)\n    y_neg.append(y1)\n\n    \nfrom scipy.interpolate import make_interp_spline, BSpline\n\n# 300 represents number of points to make between min and max\nx_pos_sp = np.linspace(min(x_pos), max(x_pos), 300)\nspl = make_interp_spline(x_pos, y_pos, k=3)  # type: BSpline\ny_pos_sp = spl(x_pos_sp)\n\n# 300 represents number of points to make between min and max\nx_neg_sp = np.linspace(min(x_neg), max(x_neg), 300)\nspl = make_interp_spline(x_neg, y_neg, k=3)  # type: BSpline\ny_neg_sp = spl(x_neg_sp)\n\n#plt.plot(xnew, power_smooth)    \n    \n    \naxes[0].plot(x_pos_sp, y_pos_sp, color='red', linewidth=1)\naxes[1].plot(x_neg_sp, y_neg_sp, color='green',linewidth=1)\n\naxes[0].set_title('covid-19 positive n=(' + str(data_positive.shape[0]) + ')')\naxes[0].set_xticklabels('')\naxes[1].set_title('covid-19 negative n=(' + str(data_negative.shape[0]) + ')')\n\nfig.subplots_adjust(hspace=0.2)\nplt.show()","5721276b":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\n#X_std = StandardScaler().fit_transform(X)\n\nX_std = StandardScaler().fit_transform(data_positive)\n\npca = PCA().fit(X_std)\nplt.plot(np.cumsum(pca.explained_variance_ratio_))\nplt.xlim(0,7,1)\nplt.xlabel('Number of components')\nplt.ylabel('Cumulative explained variance')","99e0a8f3":"We present a basic exploration and data analisys of given covid-19 exams data. Let's select only data where covid-19 test results are **positive**.","85ce430c":"For sumarize positive data table, now we create a boxplot of its statiscs using as input each column of table.","2329a6b5":"If we compare box plots we see different behaviors in some variables. For example, in covid-19 negative subjects, the *platets*  variable boxplot is almost symmetric around zero, meaning that 25% of sampled subjects without covid-19 have positives *platets* values. In positive case we see that **interquartile range** of *platets* boxplot is inside negative values. This suggests that 50% of covid-19 infected subjects have negative *platets* values. This behavior occurs in others variables such *Arterial Acid Latic*, *Ionized Calcium*, etc. This suggests that some variables are more important to detect a positive case of coronavirus than others. Since we need to identify those columns, we could use a technique to identify them like **Principal Component Analysis** (PCA).","61b44968":"We create a new table to investigate the behavior of **negative** results of covid-19 exams."}}