{"cell_type":{"9836cba6":"code","aee8f72a":"code","a161a30a":"code","85e8001c":"code","3f2dc843":"code","631c182a":"code","6c0b2207":"code","6a51fc1f":"code","89c6d19f":"code","0d22d132":"code","0dcecfeb":"code","68ed6e17":"code","5aab3d6a":"code","f539c3a1":"code","91de611a":"code","8e7043b1":"code","196e70f5":"code","942c2ccf":"code","3eff5539":"code","6e9f3e78":"code","cdbbbf0d":"code","386fc5a3":"code","c0cfd32a":"code","a8f8ac70":"code","854b3575":"code","79996e9f":"code","ed103eff":"code","1372ceb2":"code","516ecd5b":"code","0f12c107":"code","3ccf0a69":"code","6e3cbe8e":"code","60dc4f42":"code","0a04653e":"code","2dfa3219":"code","225cc216":"markdown","626a47c7":"markdown","ad095498":"markdown","fa3540f6":"markdown","312fe8a4":"markdown","d2daca63":"markdown","704fa0d3":"markdown","a8f910b4":"markdown","d72c4de8":"markdown","0563a106":"markdown","bb7419bf":"markdown"},"source":{"9836cba6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use(\"fivethirtyeight\")\nimport warnings\nwarnings.simplefilter('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aee8f72a":"data = pd.read_csv(\"\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv\")","a161a30a":"data.head()","85e8001c":"data.columns","3f2dc843":"# Delete columns : \"id\", \"Unnamed: 32\"\ndata.drop([\"id\",\"Unnamed: 32\"], axis = 1, inplace = True)","631c182a":"data.info()","6c0b2207":"# Diagnosis\n# M : malignant\n# B : benign\ndata.diagnosis = [1 if i.strip() == \"M\" else 0 for i in data.diagnosis]","6a51fc1f":"numeric_variable = data.drop([\"diagnosis\"], axis = 1)","89c6d19f":"from sklearn.ensemble import ExtraTreesRegressor\nx = numeric_variable\ny = data.diagnosis\next = ExtraTreesRegressor(random_state = 42)\nmodel = ext.fit(x,y)\ndf = pd.DataFrame(sorted(zip(ext.feature_importances_,numeric_variable.columns)), columns=['Value','Variable'])","0d22d132":"#Visualization\nplt.figure(figsize = (15,6))\nsns.barplot(x = \"Value\", y  = \"Variable\", data = df.sort_values([\"Value\"], ascending = False))","0dcecfeb":"#Numeric variable visualization\ndef numeric(col):\n    fig, ax = plt.subplots(1,2, figsize = (15,6))\n    sns.scatterplot(x = data[col], y = data.diagnosis, ax= ax[0])\n    sns.distplot(x = data[col], kde = False, ax = ax[1])\n    fig.suptitle(str(col) + ' analysis')","68ed6e17":"numeric(\"concave points_worst\")","5aab3d6a":"numeric(\"concave points_mean\")","f539c3a1":"numeric(\"perimeter_worst\")","91de611a":"numeric(\"radius_worst\")","8e7043b1":"numeric(\"area_worst\")","196e70f5":"numeric(\"perimeter_mean\")","942c2ccf":"# Correlation Matrix\ndata.corr()[\"diagnosis\"].sort_values(ascending = False)","3eff5539":"corr_matrix=data.corr()\nthreshold=0.7\nfiltre=np.abs(corr_matrix[\"diagnosis\"])>threshold\ncorr_features=corr_matrix.columns[filtre].tolist()\nsns.clustermap(data[corr_features].corr(),annot=True,fmt=\".2f\")","6e9f3e78":"from collections import Counter\ndef outliers(data,columns):\n    aykiri_indexler=[]\n    for i in columns:\n        Q1 = data[i].quantile(0.25)\n        Q3 = data[i].quantile(0.75)\n        IQR = Q3 -Q1\n        alt_sinir = Q1 - 1.5*IQR\n        ust_sinir = Q3 + 1.5*IQR\n        filtre = ((data[i] < alt_sinir) | (data[i] > ust_sinir))\n        aykiri_gozlemler = data[i][filtre]\n        aykiri_index = aykiri_gozlemler.index\n        aykiri_indexler.extend(aykiri_index)\n        \n    aykiri_indexler = Counter(aykiri_indexler) #benzersiz degerleri bulup bunlar\u0131 dict \u00e7evirir\n    ortak_indexler = [i for i,v in aykiri_indexler.items() if v>2] #ayn\u0131 anda ikiden fazla outlier varsa bir sat\u0131r i\u00e7in bunu al\n    \n    return ortak_indexler","cdbbbf0d":"delete_index = outliers(data,data.columns)\ndata = data.drop(delete_index,axis=0).reset_index(drop=True)","386fc5a3":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler","c0cfd32a":"y = data.diagnosis.values.reshape(-1,1)\nx = data.drop([\"diagnosis\"], axis = 1)","a8f8ac70":"x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state = 42)","854b3575":"sc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","79996e9f":"#ML Models\nclassifier = [DecisionTreeClassifier(random_state = 42),\n             SVC(random_state = 42),\n             RandomForestClassifier(random_state = 42),\n             LogisticRegression(random_state = 42),\n             KNeighborsClassifier()]","ed103eff":"dt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}","1372ceb2":"classifier_params = [dt_param_grid,\n                    svc_param_grid,\n                    rf_param_grid,\n                    logreg_param_grid,\n                    knn_param_grid]","516ecd5b":"cv_results = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    grid = GridSearchCV(classifier[i], param_grid = classifier_params[i], cv = StratifiedKFold(n_splits = 10), \n                       scoring = \"accuracy\", n_jobs = -1, verbose = 1)\n    model = grid.fit(x_train, y_train)\n    cv_results.append(model.best_score_)\n    best_estimators.append(model.best_estimator_)\n    print(cv_results[i])\n    print(best_estimators[i])","0f12c107":"df = pd.DataFrame({\"Cross Validation\":cv_results,\n                  \"ML Models\":[\"DT\", \"SVM\", \"RF\", \"LR\", \"KN\"]})","3ccf0a69":"# Visualization\nsns.barplot(x = \"Cross Validation\", y = \"ML Models\", data = df.sort_values([\"Cross Validation\"], ascending = False))","6e3cbe8e":"grid={\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001],\n                 \"C\":[100]}\nsvm=SVC(random_state=42)\nsvm_cv=GridSearchCV(svm,grid,cv=10, scoring = \"accuracy\")\nmodel=svm_cv.fit(x_train,y_train)\nprint(\"train accuracy:\",model.best_score_)","60dc4f42":"y_head = model.predict(x_test)\nprint(\"test accuracy:\",accuracy_score(y_test, y_head))","0a04653e":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_head)","2dfa3219":"sns.heatmap(cm, annot = True)","225cc216":"# 1) Load and Check Data","626a47c7":"### Perimeter_mean","ad095498":"The best model is SVM","fa3540f6":"### Area_worst","312fe8a4":"# 3) Outlier Detection","d2daca63":"### Concave points_mean","704fa0d3":"### Concave points_worst","a8f910b4":"### Radius_worst","d72c4de8":"# 2)Variable Analysis","0563a106":"### Perimeter_worst","bb7419bf":"# 4) Create Model"}}