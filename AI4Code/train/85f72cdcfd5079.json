{"cell_type":{"788e4ce6":"code","440af9da":"code","55b25bd3":"code","56507e2f":"code","ff643d06":"code","f6ef0aaa":"code","bb235f56":"code","b792b9fb":"code","13212f94":"code","6b6e914b":"code","2ae573b0":"code","406b5f34":"code","b2fb2e7b":"code","1228d802":"markdown","bbe0676e":"markdown","1a108bde":"markdown","7579a1b5":"markdown","0de52fdc":"markdown","b4cecf4c":"markdown","d1800fcf":"markdown","cd27c150":"markdown"},"source":{"788e4ce6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","440af9da":"data = pd.read_csv('\/kaggle\/input\/fish-market\/Fish.csv')","55b25bd3":"data.head()","56507e2f":"data.info()","ff643d06":"data.isnull().sum()","f6ef0aaa":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(16, 6))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x=\"Species\", data=data)","bb235f56":"x= sns.PairGrid(data)\nx = x.map(plt.scatter)","b792b9fb":"X = data['Species']\ny=data['Height']\nz=data['Width']\n\nplt.figure(figsize=(16, 6))\n\nplt.scatter(X,y,label='Height')\nplt.scatter(X,z,label = 'Width')\nplt.legend()\nplt.show()\ndata.Species.unique()","13212f94":"from sklearn.linear_model import *\nfrom sklearn.model_selection import train_test_split\n\nX = data.drop(columns=['Species'])\ny = data.Species","6b6e914b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nmodel = LogisticRegression()","2ae573b0":"model.fit(X_train,y_train)","406b5f34":"model.predict(X_test)","b2fb2e7b":"model.score(X_test,y_test)","1228d802":"Split the data by test size of 20 percent . I tried different sizes of the test and train size . It seems like 20 percent is the best fit","bbe0676e":"We got 87 percent accuracy which is perfectly amazing . \n\nThe reason i used LOgistics regression is it works well with labels and small taining sets","1a108bde":"Now lets predict the value","7579a1b5":"I will be using Logistic Regresion for this problem","0de52fdc":"Today I'm trying to predict the type of species using Logistic Regression . IT worked out pretty well\n\n\nFirst let use see if the dataset requires any cleaning","b4cecf4c":"Let us see how many species are there in the dataset","d1800fcf":"Train the model ","cd27c150":"There are no null values in the data set . So now we can get into prediction process"}}