{"cell_type":{"91df5b6d":"code","0bb83fc8":"code","14955900":"code","ca207d2f":"code","f878e978":"code","369b9c4b":"code","a93a4e30":"code","a8f219ac":"code","9bee574f":"code","04104636":"code","639a4202":"code","76a14903":"code","e0b92ec3":"code","dc7099be":"code","f7fb6442":"code","65b3e72c":"code","4052e26e":"code","775c9f66":"code","f8234030":"code","befbc375":"code","3b27bf57":"code","f2db4cd7":"code","1c0b3ad3":"code","14d19f88":"code","33a1e3b2":"code","38b5b239":"code","b0e54151":"code","30dc619b":"code","b2402e2f":"code","e110dd1e":"code","8f628a45":"markdown","2be07c89":"markdown","b6cb0935":"markdown","5f0bc9fb":"markdown","0541868a":"markdown","dcb8de11":"markdown","6044ce9b":"markdown","c8c24085":"markdown","3e1793de":"markdown","374bd845":"markdown","620cf351":"markdown","a36edc06":"markdown","36803027":"markdown","339a4629":"markdown"},"source":{"91df5b6d":"# data analysis libraries:\nimport numpy as np\nimport pandas as pd\n# data visualization libraries:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\n\n# to ignore warnings:\nimport sys\nif not sys.warnoptions:\n    import os, warnings\n    warnings.simplefilter(\"ignore\") \n    os.environ[\"PYTHONWARNINGS\"] = \"ignore\" \n\npd.set_option('display.float_format', lambda x: '{:.3f}'.format(x)) #Limiting floats output to 3 decimal points","0bb83fc8":"# Importing modelling libraries\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.model_selection import KFold, cross_val_score","14955900":"# Read train and test data with pd.read_csv():\ndata = pd.read_csv(r'..\/input\/churn-modelling\/Churn_Modelling.csv')\ndata.name = 'Data Set'\nprint('Number of Examples = {}'.format(data.shape[0]))\nprint(data.name, 'X Shape = {}'.format(data.shape))\nprint(data.name, 'y Shape = {}\\n'.format(data['Exited'].shape[0]))\nprint(data.columns)","ca207d2f":"print(data.info())","f878e978":"data.sample(5)","369b9c4b":"def missing_values(data):    \n    for col in data.columns.tolist():          \n        print('{} column missing values: {}'.format(col, data[col].isnull().sum()))\n\nprint('{}'.format(data.name), 'missing values:')\nmissing_values(data)","a93a4e30":"data.iloc[:,2:len(data)].describe([0.1,0.25,0.5,0.75,0.99]).T","a8f219ac":"data[[\"Geography\", \"Exited\"]].groupby(['Geography'], as_index=False).mean().sort_values(by='Exited', ascending=False)","9bee574f":"g= sns.catplot(x = \"Geography\", y = \"Exited\", data = data, kind = \"bar\", height = 5)\ng.set_ylabels(\"Churn Probability\")\nplt.show()","04104636":"data[[\"Gender\", \"Exited\"]].groupby(['Gender'], as_index=False).mean().sort_values(by='Exited', ascending=False)","639a4202":"g= sns.catplot(x = \"Gender\", y = \"Exited\", data = data, kind = \"bar\", height = 5)\ng.set_ylabels(\"Churn Probability\")\nplt.show()","76a14903":"data[[\"HasCrCard\", \"Exited\"]].groupby(['HasCrCard'], as_index=False).mean().sort_values(by='Exited', ascending=False)","e0b92ec3":"g= sns.catplot(x = \"HasCrCard\", y = \"Exited\", data = data, kind = \"bar\", height = 5)\ng.set_ylabels(\"Churn Probability\")\nplt.show()","dc7099be":"data[[\"IsActiveMember\", \"Exited\"]].groupby(['IsActiveMember'], as_index=False).mean().sort_values(by='Exited', ascending=False)","f7fb6442":"g= sns.catplot(x = \"IsActiveMember\", y = \"Exited\", data = data, kind = \"bar\", height = 5)\ng.set_ylabels(\"Churn Probability\")\nplt.show()","65b3e72c":"data[[\"NumOfProducts\", \"Exited\"]].groupby(['NumOfProducts'], as_index=False).mean().sort_values(by='Exited', ascending=False)","4052e26e":"g= sns.catplot(x = \"NumOfProducts\", y = \"Exited\", data = data, kind = \"bar\", height = 5)\ng.set_ylabels(\"Churn Probability\")\nplt.show()","775c9f66":"fig, axs = plt.subplots(figsize=(12, 6))\n\nsns.heatmap(data.drop(['CustomerId', 'RowNumber'], axis=1).corr(), ax=axs, annot=True, fmt = \".2f\", linewidths=0.5, cmap='coolwarm')\n\naxs.tick_params(axis='x', labelsize=10)\naxs.tick_params(axis='y', labelsize=10)\n\naxs.set_title('Data Set Correlations', size=15)\n\nplt.show()","f8234030":"data.drop(\"RowNumber\", axis = 1, inplace = True)\ndata.drop(\"Surname\", axis = 1, inplace = True)\ndata.drop(\"CustomerId\", axis = 1, inplace = True)","befbc375":"data.sample(5)","3b27bf57":"enc = LabelEncoder()\ndata['Gender'] = enc.fit_transform(data['Gender'])","f2db4cd7":"data = pd.get_dummies(data, columns = ['Geography'])","1c0b3ad3":"train = data.sample(frac = 0.8)\n\ntest = data.drop(train.index)","14d19f88":"all_data = pd.concat((train.loc[:,:],test.loc[:,:]))\ntarget = all_data.Exited\nall_data.drop(\"Exited\", axis = 1, inplace = True)","33a1e3b2":"dataEx = MinMaxScaler().fit_transform(all_data)","38b5b239":"x_train = dataEx[:train.shape[0]]\nx_test = dataEx[train.shape[0]:]\n\ny_train = train.Exited\ny_test = test.Exited\n\nx_train.shape, y_train.shape, x_test.shape, y_test.shape","b0e54151":"r=1000\nmodels = [LogisticRegression(random_state=r),GaussianNB(), KNeighborsClassifier(),\n          SVC(random_state=r,probability=True),DecisionTreeClassifier(random_state=r),\n          RandomForestClassifier(random_state=r), GradientBoostingClassifier(random_state=r)]\nnames = [\"LogisticRegression\",\"GaussianNB\",\"KNN\",\"SVC\",\n             \"DecisionTree\",\"Random_Forest\",\"GBM\"]","30dc619b":"print('Default model test accuracies for the train data:', end = \"\\n\")\nprint('_____________________________________________________________________________________________________')\nfor name, model in zip(names, models):\n    model.fit(x_train, y_train)\n    print(name, ': Train set accuracy :', \"%.3f\" % round(model.score(x_train, y_train)*100, 2))\n    y_pred = model.predict(x_test) \n    print('Test set accuracy :',\"%.3f\" % round(accuracy_score(y_pred, y_test)*100, 2))\n    print('_____________________________________________________________________________________________________')","b2402e2f":"predictors=dataEx","e110dd1e":"results = []\nprint('10 fold Cross validation accuracy and std of the default models for all data:', end = \"\\n\")\nprint('_____________________________________________________________________________________________________')\nfor name, model in zip(names, models):\n    kfold = KFold(shuffle=True, n_splits=10, random_state=1000)\n    cv_results = cross_val_score(model, predictors, target, cv = kfold, scoring = \"accuracy\")\n    results.append(cv_results)\n    print(\"{}: {} ({})\".format(name, \"%.3f\" % round(cv_results.mean()*100, 2) , \"%.3f\" %  cv_results.std()))\n    print('_____________________________________________________________________________________________________')","8f628a45":"2.3 Correlation matrix","2be07c89":"3.2 One hot encoding of Geography (Country)","b6cb0935":"3.1 Label encoding of gender variable","5f0bc9fb":"# 3. Data Preprocessing","0541868a":"3.4 Scaling Features in [0,1] range","dcb8de11":"# 2. Data Analysis","6044ce9b":"**2.2 Basic summary statistics about the data**","c8c24085":"# 1. Introduction","3e1793de":"3.3 Splitting the data as train and Test data","374bd845":"**2.1 Importing Libraries and Loading Data**","620cf351":"# 4. Modeling","a36edc06":"Summary Information about the variables and their types in the data:\n* Surname : The customer surname\n* CreditScore : The customer credit score \n* Geography : The country of the customer(Germany\/France\/Spain)\n* Gender : The gender of the customer (Female\/Male)\n* Age : The age of the customer\n* Tenure : The customer's number of years in the in the bank\n* Balance : The customer's account balance\n* NumOfProducts : The number of bank products that the customer uses\n* HasCrCard : Does the customer has a credit card? (0=No,1=Yes)\n* IsActiveMember : Does the customer has an active mebership (0=No,1=Yes)\n* EstimatedSalary : The estimated salary of the customer\n* Exited : Churned or not? (0=No,1=Yes)","36803027":"4.2 Cross validation accuracy and std of the default models for all data","339a4629":"4.1 Test Set Accuracy for the default models"}}