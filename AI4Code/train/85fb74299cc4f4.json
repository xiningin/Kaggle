{"cell_type":{"32ece713":"code","3a2327e4":"code","57c3939d":"code","0fc22b87":"code","d6a58f0f":"code","3882a4cd":"code","a72b4eca":"code","a2f5e879":"code","1d5b7560":"code","b19dc685":"code","d07a3deb":"code","5d5e3763":"code","24a6a0f8":"code","c8b30284":"code","00354a85":"code","16d18d1b":"markdown","fabb4d7d":"markdown","0dcbff44":"markdown","f24bc411":"markdown","c7dfcb4e":"markdown","e5b3baac":"markdown","616ae5e7":"markdown","69f450f8":"markdown","9d9b34c1":"markdown"},"source":{"32ece713":"import numpy as np\nimport pandas as pd\n\nimport utils_data_prepping as udp\nimport utils_eda as eda\nimport utils_reg_models as reg\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3a2327e4":"df = udp.loading('\/kaggle\/input\/yeh-concret-data\/Concrete_Data_Yeh.csv')","57c3939d":"df.head()","0fc22b87":"df.info()","d6a58f0f":"udp.missing_values(df)","3882a4cd":"eda.corr_matrix(df)","a72b4eca":"eda.distribution(df, \"csMPa\")","a2f5e879":"sns.scatterplot(data=df, x='cement', y='csMPa')\nplt.show()","1d5b7560":"X, y = udp.pre_processing(df, 'csMPa')\nX, y","b19dc685":"lin = reg.Regressor(X, y, 'lin')","d07a3deb":"max_scores = {}\nfor i in np.arange(0.15, 0.45, 0.05):\n    i = round(i, 4)\n    scores_i = []\n    for j in range(0, 150):\n        lin.preprocess_split(size=i, state=j)\n        lin.fit_predict(reg_kwargs = {'normalize': True})\n        mets = lin.metrics()\n        scores_i.append(mets[-2])\n    i_max = max(scores_i)\n    max_index = scores_i.index(i_max)\n    max_scores[(i, max_index)] = round(i_max, 4)\n    \nv=list(max_scores.values())\nk=list(max_scores.keys())\nprint(k[v.index(max(v))], max(v))","5d5e3763":"lin.preprocess_cv(k=3)\nlin.fit_predict()\nlin.metrics()","24a6a0f8":"poly = reg.Regressor(X, y, 'poly', poly_degree=3)","c8b30284":"max_scores = {}\nfor i in np.arange(0.15, 0.45, 0.05):\n    i = round(i, 4)\n    scores_i = []\n    for j in range(0, 150):\n        poly.preprocess_split(size=i, state=j)\n        poly.fit_predict(reg_kwargs = {'normalize': True})\n        mets = poly.metrics()\n        scores_i.append(mets[-2])\n    i_max = max(scores_i)\n    max_index = scores_i.index(i_max)\n    max_scores[(i, max_index)] = round(i_max, 4)\n\nv=list(max_scores.values())\nk=list(max_scores.keys())\nprint(k[v.index(max(v))], max(v))","00354a85":"poly.preprocess_cv(k=20)\npoly.fit_predict()\npoly.metrics()","16d18d1b":"### Model Evaluation 2: Cross-validation","fabb4d7d":"## Multiple Linear Regression","0dcbff44":"# Exploration Data Analysis","f24bc411":"### Model Evaluation 2: Cross-validation","c7dfcb4e":"## Polynomial Regression","e5b3baac":"# Data Loading ","616ae5e7":"### Model Evalution 1: Train_test_split ","69f450f8":"### Model Evalution 1: Train_test_split ","9d9b34c1":"# Model Building & Evaluation"}}