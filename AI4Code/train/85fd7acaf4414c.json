{"cell_type":{"a68acd59":"code","50552a11":"code","b115ad57":"code","55a6b8a3":"code","1f08a312":"code","e034d0b8":"code","ec0ebc07":"code","382911e5":"code","fb968587":"code","c36ae3d9":"code","7319eb67":"code","b1739a64":"code","90cbde98":"code","7239088d":"code","99ee3490":"code","923b1d69":"code","5b14bc66":"code","f2e4c64a":"code","52639084":"code","c60e406f":"code","366592ae":"code","86dd90b1":"code","72d795fb":"code","20bb3dd9":"code","be3cc945":"code","2b4ae46c":"code","e45b0399":"code","d83c35e2":"code","b7633120":"markdown","08383136":"markdown","291fa55a":"markdown","c271f535":"markdown","09025030":"markdown","9d700882":"markdown","7c4742af":"markdown","f6ddbd47":"markdown","a8d40d2d":"markdown","342c906e":"markdown","b0ef84ce":"markdown","7853dc34":"markdown","f4933367":"markdown","88f6621d":"markdown","baf36220":"markdown","289f2450":"markdown","9effd395":"markdown","4e423d19":"markdown","b71c6af4":"markdown","21cd6dc8":"markdown"},"source":{"a68acd59":"!pip install ..\/input\/textstat-pypi\/Pyphen-0.9.3-py2.py3-none-any.whl\n!pip install ..\/input\/textstat-pypi\/textstat-0.7.0-py3-none-any.whl\n","50552a11":"import pandas as pd\nimport numpy as np\nimport tokenizers\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport nltk\nfrom nltk.stem import PorterStemmer,WordNetLemmatizer\nimport matplotlib.colors as mcolors\nimport matplotlib.colors as mcolors\nfrom wordcloud import WordCloud, STOPWORDS\nfrom nltk.corpus import stopwords\nimport gensim,pyLDAvis\nfrom collections import Counter\nimport pyLDAvis.gensim_models as gensimvis\nfrom nltk.tokenize import word_tokenize\nfrom warnings import filterwarnings\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nfrom transformers import *\nfrom sklearn.model_selection import train_test_split,KFold\nfrom tqdm import tqdm\nfrom tensorflow.keras.layers import Dense, Input,GlobalAveragePooling1D,Dropout,Average\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom IPython.core.display import display, HTML\nimport xgboost as xgb\nROOT = '..\/input\/tf-meta-features-bert\/'","b115ad57":"class color:\n    BOLD = '\\033[1m' + '\\033[93m'\n    END = '\\033[0m'\n    OKBLUE = '\\033[94m'\n    OKCYAN = '\\033[96m'\n    OKGREEN = '\\033[92m'\n    \nsns.set(style='whitegrid')\n   \nfilterwarnings(\"ignore\")\ndisplay(HTML(\"<style>.container { max-width:100% !important; }<\/style>\"))\ndisplay(HTML(\"<style>.output_result { max-width:100% !important; }<\/style>\"))\ndisplay(HTML(\"<style>.output_area { max-width:100% !important; }<\/style>\"))\ndisplay(HTML(\"<style>.input_area { max-width:100% !important; }<\/style>\"))\npyLDAvis.enable_notebook()","55a6b8a3":"df_train = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/train.csv\",nrows=300)\ndf_test = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/test.csv\")\n\nprint(f\"Train data has {df_train.shape[0]} rows as {df_train.shape[1]} columns\")\nprint(f\"Test data has {df_test.shape[0]} rows as {df_test.shape[1]} columns\")","1f08a312":"df_train.head(5)","e034d0b8":"plt.figure(figsize=(20, 15))\nsns.displot(df_train['target'],kde=True)\nplt.title(\"Target Distribution\", size=20)\nplt.show()","ec0ebc07":"print(f\"The min value of target is {color.BOLD} {df_train['target'].min()} {color.END} and max value of target is {color.BOLD} {df_train['target'].max()}\")","382911e5":"plt.figure(figsize=(20, 15))\nsns.displot(df_train['standard_error'],kde=True)\nplt.title(\"Target Distribution\", size=20)\nplt.show()","fb968587":"bins = 3\nw = (df_train['target'].max() - df_train['target'].min())\/bins\nvals = df_train['target'].min()+w,df_train['target'].min()+2*w,df_train['target'].min()+3*w\n","c36ae3d9":"def do_binning(x,vals=vals):\n    \n    if x<=vals[0]:\n        return \"Low\"\n    elif x>vals[0] and x<=vals[1]:\n        return \"Medium\"\n    else:\n        return \"High\"","7319eb67":"df_train['segment'] = df_train['target'].map(lambda x : do_binning(x))","b1739a64":"plt.figure(figsize=(8, 5))\nx=df_train.segment.value_counts().index\ny=df_train.segment.value_counts().values\nsns.barplot(x,y)\nplt.show()","90cbde98":"stop=set(stopwords.words('english'))\n\ndef preprocess(df):\n    corpus=[]\n    stem=PorterStemmer()\n    lem=WordNetLemmatizer()\n    for news in df['excerpt']:\n        words=[w for w in word_tokenize(news) if (w not in stop)]\n        \n        words=[lem.lemmatize(w) for w in words if len(w)>2]\n        \n        corpus.append(words)\n    return corpus\n","7239088d":"def show_wordcloud(data):\n    data = \" \".join([ i for texts in data for i in texts])\n    wordcloud = WordCloud(\n        background_color='white',\n        stopwords=stop,\n        max_words=150,\n        max_font_size=50,\n        scale=3,\n        random_state=1,width = 800, height = 800)\n   \n    wordcloud=wordcloud.generate(str(data))\n\n    return wordcloud\n\n\nfig,ax = plt.subplots(1,3,figsize=(16,6))\n\nfor i,segment in enumerate(['Low','Medium','High']):\n    \n    corpus = preprocess(df_train.query(f'segment==\"{segment}\"'))\n    wordcloud = show_wordcloud(corpus)\n    ax[i].imshow(wordcloud)\n    ax[i].set_title(segment,fontweight='bold')\n    ax[i].axis('off')\n    \n    \nplt.show()\n    \n\n","99ee3490":"MAX_LEN = 256\nPATH = '..\/input\/tf-roberta\/'\ntokenizer = tokenizers.ByteLevelBPETokenizer(\n    vocab=PATH+'vocab-roberta-base.json', \n    merges=PATH+'merges-roberta-base.txt', \n    lowercase=True,\n    add_prefix_space=True\n)","923b1d69":"def batch_encode_texts(texts,tokenizer,batch_size=256):\n\n    \n    \n    all_ids = []\n    all_masks = []\n    \n    for batch in tqdm(range(0,len(texts),batch_size)):\n        encoder = tokenizer.encode_batch(texts[batch:batch+batch_size],add_special_tokens=False)\n        all_ids.extend([([0]+enc.ids[:MAX_LEN-2]+[2])+[0]*(MAX_LEN-(len(enc.ids)+2)) for enc in encoder])\n        all_masks.extend([([1]+mask.attention_mask[:MAX_LEN-2]+[1])+[0]*(MAX_LEN-(len(mask.attention_mask)+2)) for mask in encoder])\n        \n    return np.array(all_ids),np.array(all_masks)\n\n    \n    ","5b14bc66":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.preprocessing import MinMaxScaler\nimport spacy\nfrom textstat.textstat import textstatistics, legacy_round\nimport textstat","f2e4c64a":"with open(\"..\/input\/english-common-words\/20k.txt\",'r') as file:\n    common_words = file.readlines()","52639084":"stops = np.array(stopwords.words('english'))\nwith open(\"..\/input\/english-common-words\/20k.txt\",'r') as file:\n    common_words = file.readlines()\n    \nNLP = spacy.load('en')\n\n\ndef make_sentences(text):\n    doc = NLP(text)\n    return [x for x in doc.sents]\n  \n    \ndef get_meta_features(df,col):\n    \n    tfidf = TfidfVectorizer()\n    #tsvd = TruncatedSVD(n_components = 50)\n    \n    df['word_count'] = df[col].map(lambda x : len(x.split()))\n    df['unique_words'] = df[col].map(lambda x : len(np.unique(x.split())))\n    df['char_len'] = df[col].str.len()\n    df['stop_words'] = df[col].map(lambda x : len(np.intersect1d(x.split(),stops)))\n    df['sentence_count'] = df[col].map(lambda x : len(make_sentences(x)))\n    df['common_words'] = df[col].map(lambda x : len(np.intersect1d(x.split(),common_words)))\n    df['syllable_count'] = df[col].map(lambda x : textstatistics().syllable_count(x))\n    df['average_syllable_word'] = df['word_count']\/df['syllable_count']\n    df['average_sentence_len'] = df['word_count']\/df['sentence_count']\n    df['flesch_reading_ease'] = df[col].map(lambda x : textstat.flesch_reading_ease(x) )\n    df['smog_index'] = df[col].map(lambda x : textstat.smog_index(x))\n    df['difficult_words'] = df[col].map(lambda x : textstat.difficult_words(x))\n    \n    \n    vectors = tfidf.fit_transform(df[col].values).toarray()\n    \n    #vectors = tsvd.fit_transform(vectors)\n    count_features = df[['word_count','unique_words','char_len','stop_words','sentence_count',\n                         'common_words','syllable_count','average_syllable_word','average_sentence_len',\n                        'flesch_reading_ease','smog_index','difficult_words']].values\n    return np.hstack([count_features,vectors])\n    ","c60e406f":"def commonlit_model(max_len=256):\n    \n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    attention_masks = Input(shape=(max_len,), dtype=tf.int32, name=\"attention_masks\")\n    \n    config = RobertaConfig.from_pretrained('..\/input\/tf-roberta\/config-roberta-base.json')\n    bert_model = TFRobertaModel.from_pretrained('..\/input\/tf-roberta\/pretrained-roberta-base.h5',config=config)\n    output = bert_model(input_word_ids,attention_mask = attention_masks)[0]\n    \n    pool = GlobalAveragePooling1D()(output)\n    \n    dense=[]\n    FC = Dense(32,activation='relu')\n    for p in np.linspace(0.1,0.5,5):\n        x=Dropout(p)(pool)\n#         x=FC(x)\n        x=Dense(1)(x)\n        dense.append(x)\n    \n    out = Average()(dense)\n    model = Model(inputs=[input_word_ids,attention_masks], outputs=out)\n    model.compile(Adam(lr=1e-5), loss='mean_squared_error', metrics=[tf.keras.metrics.RootMeanSquaredError()])\n    \n    return model","366592ae":"AUTO = tf.data.experimental.AUTOTUNE\nBATCH_SIZE =16","86dd90b1":"SEED=42\n\ndef train_nn(df_train,n_splits):\n    \n    train_ids,train_masks = batch_encode_texts(df_train['excerpt'].values,tokenizer)\n    target = df_train['target'].values\n    \n    skf = KFold(n_splits=n_splits,shuffle=True,random_state=SEED)\n    train_metics,valid_metrics=[],[]\n\n    for fold,(train_idx,valid_idx) in enumerate(skf.split(df_train)):\n\n\n            x_train_ids,x_train_masks,y_train = train_ids[train_idx],train_masks[train_idx],target[train_idx]\n            x_valid_ids,x_valid_masks,y_valid = train_ids[valid_idx],train_masks[valid_idx],target[valid_idx]\n\n\n\n            train_dataset = (\n            tf.data.Dataset\n            .from_tensor_slices(((x_train_ids,x_train_masks,train_meta),y_train))\n            .repeat()\n            .shuffle(2048)\n            .batch(BATCH_SIZE)\n            .prefetch(AUTO)\n            )\n\n            valid_dataset = (\n                tf.data.Dataset\n                .from_tensor_slices(((x_valid_ids,x_valid_masks),y_valid))\n                .batch(BATCH_SIZE)\n                .cache()\n                .prefetch(AUTO)\n            )\n\n            checkpoint = tf.keras.callbacks.ModelCheckpoint(\n                f'commonlit_fold{fold}.h5', monitor='val_root_mean_squared_error', verbose=0, save_best_only=True,\n                save_weights_only=True, mode='auto', save_freq='epoch')\n\n            model = commonlit_model()\n\n            n_steps = len(train_idx)\/\/ BATCH_SIZE\n            valid_steps = len(valid_idx)\/\/ BATCH_SIZE\n\n            print(color.OKCYAN,f\"Eval fold {fold}...\")\n            train_history = model.evaluate(valid_dataset)\n            print(color.OKBLUE,f\"Average train RMSE of fold {fold} = {np.mean(train_history.history['root_mean_squared_error']):.4f}\")\n            print(color.OKBLUE,f\"Average validation RMSE of fold {fold} = {np.mean(train_history.history['val_root_mean_squared_error']):.4f}\")\n\n            train_metics.append(np.mean(train_history.history['root_mean_squared_error']))\n            valid_metrics.append(np.mean(train_history.history['val_root_mean_squared_error']))\n        \n       \n            \n       \n    \n\n\n","72d795fb":"def train_xgb(df_train,n_splits):\n    \n\n    train_meta_features = get_meta_features(df_train,'excerpt')\n\n    skf = KFold(n_splits=n_splits,shuffle=True,random_state=SEED)\n    best_iterations=[]\n    oof_rmses,train_rmses=[],[]\n\n    for fold,(train_idx,valid_idx) in enumerate(skf.split(df_train)):\n\n        dtrain = xgb.DMatrix(train_meta_features[train_idx],target[train_idx])\n        dvalid =  xgb.DMatrix(train_meta_features[valid_idx],target[valid_idx])\n\n        evals_result = dict()\n        booster = xgb.train(params,\n                            dtrain,\n                            evals=[(dtrain, 'train'), (dvalid, 'valid')],\n                            num_boost_round=300,\n                            early_stopping_rounds=20,\n                            evals_result=evals_result,\n                            verbose_eval=False)\n\n        best_iteration = np.argmin(evals_result['valid']['rmse'])\n        best_iterations.append(best_iteration)\n        oof_rmse = evals_result['valid']['rmse'][best_iteration]\n        train_rmse = evals_result['train']['rmse'][best_iteration]\n        oof_rmses.append(oof_rmse)\n        train_rmses.append(train_rmse)\n\n    evals_df = pd.DataFrame()\n    evals_df['fold'] = range(1, skf.n_splits+1)\n    evals_df['best_iteration'] = best_iterations\n    evals_df['oof_rmse'] = oof_rmses\n    evals_df['train_rmse'] = train_rmses\n\n    display(evals_df)\n    print('mean oof rmse = {}'.format(np.mean(oof_rmses)))\n\n\n    ","20bb3dd9":"import joblib\n","be3cc945":"def inference_nn(df_test,n_splits=7):\n    \n    \n    test_ids,test_masks = batch_encode_texts(df_test['excerpt'].values,tokenizer)\n    y_test = np.zeros((len(df_test)))\n\n    test_dataset = (\n        tf.data.Dataset\n        .from_tensor_slices(((test_ids,test_masks),y_test))\n        .batch(BATCH_SIZE)\n    )\n    \n    preds_nn = np.zeros((len(test_ids),1))\n    model = commonlit_model()\n    for fold in range(n_splits):\n        model.load_weights(ROOT+f'commonlit_fold{fold}.h5')\n        print(color.OKGREEN,f\"Inference fold {fold}...\")\n        preds_nn += model.predict(test_dataset, verbose=1)\/ n_splits\n\n        \n    return preds_nn\n\n \ndef inference_xgb(df_test,n_splits=7):\n    \n    test_meta_features = get_meta_features(df_test,'excerpt')\n    \n    preds_xgb = np.zeros((len(test_meta_features)))\n    for fold in tqdm(range(n_splits)):\n        booster = joblib.load(ROOT+f'xgb_fold{fold}')\n        preds_xgb += booster.predict(xgb.DMatrix(test_meta_features)) \/ n_splits\n        \n    return preds_xgb\n\n\n\n    ","2b4ae46c":"preds_nn = inference_nn(df_test)\npreds_xgb = inference_xgb(df_test)\n","e45b0399":"preds = np.average([preds_nn.flatten(),preds_xgb.flatten()],axis=0)","d83c35e2":"sub = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/sample_submission.csv\")\nsub['target'] = preds\nsub.to_csv('submission.csv', index=False)","b7633120":"### Meta-Features","08383136":"## Model\nThis is a very simple model that averages the 786 dim output and passes it through a linear layer to produce teh output.","291fa55a":"- This looks like a normal distrbution with values ranging from ~ -3 to ~-1. Let's look at the minimum and maximum value of the target here.","c271f535":"### WordCloud","09025030":"\n## Inference","9d700882":"### Work in Progress! I hope you liked it :) ","7c4742af":"We can observe that the standard error is very left skewed, this implies that there are many instances in which the coders ( people who rate the text) have disagreed.","f6ddbd47":"### Importing imporant libraries","a8d40d2d":"## EDA","342c906e":"There is a column names **standard_error**. What is this?\nMultiple coders rate each texts and they might disagree on the readability of texts. This measure of spread of scores among multiple raters for each text.\n","b0ef84ce":"## Baseline","7853dc34":"## Read Data","f4933367":"## Introduction\nThe goal of this competition is to predict the text difficulty for a given text.The text difficulty here ranges from **-3.67 to 1.71**,the latter one being most difficult.\nHere in this notebook I am doing an **Exploratory Data Analysis** and baseline model using **tensorflow and roberta** ( huggingface). Hope you will learn something new from this notebook.\n\n<img src=\"https:\/\/media.giphy.com\/media\/WoWm8YzFQJg5i\/giphy.gif\" alt=\"Paris\" class=\"center\" >\n","88f6621d":"## Tokenizer \n\nHere I am using ByterLevelBPEtokenizer. ","baf36220":"### Let's look at the target distribution first.","289f2450":"### Binning and segment Analysis","9effd395":"### KFold Model","4e423d19":"#### Standard Error","b71c6af4":"I am using 10 fold split, only using the first 5 folds.\n","21cd6dc8":"## Text Level Analysis"}}