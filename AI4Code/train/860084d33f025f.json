{"cell_type":{"2f06de8e":"code","1e0a99d6":"code","904d2c14":"code","234e49c9":"code","215db967":"code","245a0c09":"code","71d5e1e1":"code","4f018ca6":"code","010039bb":"code","0c58186e":"code","5125f58f":"code","afde1f73":"code","4819aedb":"code","40e78a85":"code","cbef6ba0":"code","84a5ac68":"code","9dcdd018":"code","87980bd1":"code","86c8fd78":"code","b4a05af5":"code","c0199a5c":"code","04fd2c5b":"code","d5a460f3":"code","fd0d2441":"code","3f11185b":"code","b506ca31":"code","af4e11c6":"code","b9697374":"code","5b9fbd25":"code","1fd90e3d":"code","f8e3a882":"code","6cca95ee":"code","9d45f3fd":"code","bc185dd9":"code","bd300164":"code","0d040cc8":"code","e66a78c9":"code","55db6718":"code","85112254":"code","191fc833":"code","279b5ed3":"code","e0496689":"code","089aa31b":"code","2d3af6c5":"code","98660915":"code","becab047":"code","fadaaffa":"code","06bad8f6":"code","543b4b35":"code","97cdd44c":"code","396740df":"code","833351c0":"code","a43331fb":"code","3a6c26db":"code","9227fdf3":"code","deaeaa4d":"code","32569809":"code","789990b0":"code","7444dabc":"code","e2ff914f":"code","05fccc2c":"markdown","6f6278bf":"markdown","0580e7aa":"markdown","181c16ba":"markdown","870967fe":"markdown","127802a8":"markdown","5f7cdb38":"markdown","4aa2083b":"markdown","a5965734":"markdown","390e7635":"markdown","53ebd594":"markdown"},"source":{"2f06de8e":"!pip install pmdarima","1e0a99d6":"import pandas as pd\nimport datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\nfrom pmdarima import auto_arima\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import adfuller\nimport statsmodels.tsa.api as ts\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, SimpleRNN, Bidirectional, Dropout\nfrom keras.callbacks import EarlyStopping\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","904d2c14":"tf.__version__","234e49c9":"data = pd.read_csv(\"..\/input\/wind-energy-germany\/germany-wind-energy.csv\", parse_dates=['utc_timestamp'])\ndata[\"utc_timestamp\"] = pd.to_datetime(data[\"utc_timestamp\"])","215db967":"data","245a0c09":"data.info()","71d5e1e1":"data.isnull().sum()*100 \/ data.shape[0]","4f018ca6":"data.info()","010039bb":"fig, ax = plt.subplots(figsize=(8, 5))\none_year = data[(data[\"utc_timestamp\"] > '2018-12-30 22:00:00+00:00') & (data[\"utc_timestamp\"] <= '2019-12-30 22:00:00+00:00')]\nax.plot(one_year.index, one_year[\"wind_generation_actual\"])\nax.grid()\nax.set_ylabel('wind generation')\nax.set_xlabel('date')\nfig.tight_layout();","0c58186e":"fig, ax = plt.subplots(figsize=(8, 5))\none_year = data[(data[\"utc_timestamp\"] > '2018-12-30 22:00:00+00:00') & (data[\"utc_timestamp\"] <= '2019-12-30 22:00:00+00:00')]\nax.plot(one_year.index, one_year[\"temperature\"])\nax.grid()\nax.set_xlabel('date')\nax.set_ylabel('temperature variation')\nfig.tight_layout();","5125f58f":"fig, ax = plt.subplots(1,2,figsize=(15,8))\nacf_plot = plot_acf(data[\"wind_generation_actual\"], lags=30, ax = ax[0])\npacf_plot = plot_pacf(data[\"wind_generation_actual\"], lags=50, ax = ax[1])\nplt.show()","afde1f73":"def correlation_heatmap(df):\n    _ , ax = plt.subplots(figsize =(14, 12))\n    colormap = sns.diverging_palette(220, 10, as_cmap = True)\n    \n    _ = sns.heatmap(\n        df.corr(), \n        cmap = colormap,\n        square=True, \n        cbar_kws={'shrink':.9 }, \n        ax=ax,\n        annot=True, \n        linewidths=0.1,vmax=1.0, linecolor='white',\n        annot_kws={'fontsize':12 }\n    )\n    \n    plt.title('Pearson Correlation of Features', y=1.05, size=15)\n\ncorrelation_heatmap(data)","4819aedb":"def feature_engineering(data):\n    \n    data[\"utc_timestamp\"] = pd.to_datetime(data[\"utc_timestamp\"], format=\"%Y-%m-%d\")\n    data[\"year\"] = data[\"utc_timestamp\"].dt.year\n    data[\"month\"] = data[\"utc_timestamp\"].dt.month\n    \n    lag_features = [\"wind_generation_actual\", \"temperature\", \"wind_capacity\"]\n    window1 = 2\n    window2 = 3\n    window3 = 7\n\n    data_rolled_2d = data[lag_features].rolling(window=window1, min_periods=0)\n    data_rolled_3d = data[lag_features].rolling(window=window2, min_periods=0)\n    data_rolled_7d = data[lag_features].rolling(window=window3, min_periods=0)\n\n    data_mean_2d = data_rolled_2d.mean().shift(1)\n    data_mean_3d = data_rolled_3d.mean().shift(1)\n    data_mean_7d = data_rolled_7d.mean().shift(1)\n    \n    data_std_2d = data_rolled_2d.std().shift(1)\n    data_std_3d = data_rolled_3d.std().shift(1)\n    data_std_7d = data_rolled_7d.std().shift(1)\n\n    for feature in lag_features:\n        data[f\"{feature}_mean_lag{window1}\"] = data_mean_2d[feature]\n        data[f\"{feature}_mean_lag{window2}\"] = data_mean_3d[feature]\n        data[f\"{feature}_mean_lag{window3}\"] = data_mean_7d[feature]\n\n        data[f\"{feature}_std_lag{window1}\"] = data_std_2d[feature]\n        data[f\"{feature}_std_lag{window2}\"] = data_std_3d[feature]\n        data[f\"{feature}_std_lag{window3}\"] = data_std_7d[feature]\n\n    data.fillna(data.mean(), inplace=True)\n    \nfeature_engineering(data)","40e78a85":"data","cbef6ba0":"data.isnull().sum()","84a5ac68":"def correlation_heatmap(df):\n    _ , ax = plt.subplots(figsize =(20, 15))\n    colormap = sns.diverging_palette(220, 10, as_cmap = True)\n    \n    _ = sns.heatmap(\n        df.corr(), \n        cmap = colormap,\n        square=True, \n        cbar_kws={'shrink':.9 }, \n        ax=ax,\n        annot=True, \n        linewidths=0.1,vmax=1.0, linecolor='white',\n        annot_kws={'fontsize':12 }\n    )\n    \n    plt.title('Pearson Correlation of Features', y=1.05, size=15)\n\ncorrelation_heatmap(data)","9dcdd018":"train = data[data.year < 2019]\nvalid = data[data.year >= 2019]","87980bd1":"train.columns","86c8fd78":"result = adfuller(data[\"wind_generation_actual\"])\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])","b4a05af5":"data.columns","c0199a5c":"features = ['temperature', 'wind_capacity', 'year', 'month', 'wind_generation_actual_mean_lag2',\n            'wind_generation_actual_mean_lag3', 'wind_generation_actual_mean_lag7',\n            'wind_generation_actual_std_lag2', 'wind_generation_actual_std_lag3',\n            'wind_generation_actual_std_lag7', 'temperature_mean_lag2',\n            'temperature_mean_lag3', 'temperature_mean_lag7',\n            'temperature_std_lag2', 'temperature_std_lag3', 'temperature_std_lag7',\n           'wind_capacity_mean_lag2', 'wind_capacity_mean_lag3',\n           'wind_capacity_mean_lag7', 'wind_capacity_std_lag2',\n           'wind_capacity_std_lag3', 'wind_capacity_std_lag7']","04fd2c5b":"len(features)","d5a460f3":"arimaxmodel = auto_arima(train['wind_generation_actual'],\n                   exogenous = train[features], trace=True, \n                   error_action=\"ignore\", suppress_warnings=True)\narimaxmodel.fit(train['wind_generation_actual'], exogenous = train[features])\n# model = arima()\narimaxforecast = arimaxmodel.predict(n_periods=len(valid), exogenous = valid[features])\nvalid[\"Forecast_ARIMAX\"] = arimaxforecast","fd0d2441":"arimaxmodel.summary()","3f11185b":"valid[[\"wind_generation_actual\", \"Forecast_ARIMAX\"]].plot(figsize=(14, 7))","b506ca31":"arimax_rmse = np.sqrt(mean_squared_error(valid[\"wind_generation_actual\"], valid.Forecast_ARIMAX))\narimax_mae = mean_absolute_error(valid[\"wind_generation_actual\"], valid.Forecast_ARIMAX)\n\nprint(\"RMSE of Auto ARIMAX:\", arimax_rmse)\nprint(\"\\nMAE of Auto ARIMAX:\", arimax_mae)","af4e11c6":"fig, axes = plt.subplots(figsize=(15, 10))\n\naxes.plot(train.iloc[350:,:][\"wind_generation_actual\"], label='Training Data')\naxes.plot(valid.index, valid[\"wind_generation_actual\"], label='Actual Values')\naxes.plot(valid.index, arimaxforecast,label='Predicted Values')\naxes.set_title('Wind energy forecasts')\naxes.set_xlabel('Dates')\naxes.set_ylabel('Energy production')\naxes.legend()","b9697374":"dtregressor = DecisionTreeRegressor()\ndtregressor.fit(train[features], train['wind_generation_actual'])\ndtforecast = dtregressor.predict(valid[features])\nvalid[\"Forecast_DT\"] = dtforecast","5b9fbd25":"valid[[\"wind_generation_actual\", \"Forecast_DT\"]].plot(figsize=(14, 7))","1fd90e3d":"dt_rmse = np.sqrt(mean_squared_error(valid[\"wind_generation_actual\"], valid.Forecast_DT))\ndt_mae = mean_absolute_error(valid[\"wind_generation_actual\"], valid.Forecast_DT)\n\nprint(\"RMSE of Decision Trees:\", dt_rmse)\nprint(\"\\nMAE of Decision Trees:\", dt_mae)","f8e3a882":"fig, axes = plt.subplots(figsize=(15, 10))\n\naxes.plot(train.iloc[350:,:][\"wind_generation_actual\"], label='Training Data')\naxes.plot(valid.index, valid[\"wind_generation_actual\"], label='Actual Values')\naxes.plot(valid.index, dtforecast,label='Predicted Values')\naxes.set_title('Wind energy forecasts')\naxes.set_xlabel('Dates')\naxes.set_ylabel('Energy production')\naxes.legend()","6cca95ee":"rfregressor = RandomForestRegressor()\nrfregressor.fit(train[features], train['wind_generation_actual'])\nrfforecast = rfregressor.predict(valid[features])\nvalid[\"Forecast_RF\"] = rfforecast","9d45f3fd":"valid[[\"wind_generation_actual\", \"Forecast_RF\"]].plot(figsize=(14, 7))","bc185dd9":"rf_rmse = np.sqrt(mean_squared_error(valid[\"wind_generation_actual\"], valid.Forecast_RF))\nrf_mae = mean_absolute_error(valid[\"wind_generation_actual\"], valid.Forecast_RF)\n\nprint(\"RMSE of Random Forests:\", rf_rmse)\nprint(\"\\nMAE of Random Forests:\", rf_mae)","bd300164":"fig, axes = plt.subplots(figsize=(15, 10))\n\naxes.plot(train.iloc[350:,:][\"wind_generation_actual\"], label='Training Data')\naxes.plot(valid.index, valid[\"wind_generation_actual\"], label='Actual Values')\naxes.plot(valid.index, rfforecast,label='Predicted Values')\naxes.set_title('Wind energy forecasts')\naxes.set_xlabel('Dates')\naxes.set_ylabel('Energy production')\naxes.legend()","0d040cc8":"X_train, X_valid, Y_train, Y_valid=train[features], valid[features], train[\"wind_generation_actual\"], valid[\"wind_generation_actual\"]\nX_train, X_valid = np.array(X_train), np.array(X_valid)\n\nX_train_array = np.asarray(X_train.reshape((X_train.shape[0], 1, X_train.shape[1])))\nX_valid_array = np.asarray(X_valid.reshape(X_valid.shape[0], 1, X_valid.shape[1]))\nY_train_array = np.asarray(Y_train) \nY_valid_array = np.asarray(Y_valid)","e66a78c9":"X_train.shape","55db6718":"X_valid_array.shape","85112254":"ann_model = Sequential([\n    Dense(32, activation=\"relu\", input_shape=(1, X_train_array.shape[2])),\n    Dense(8, activation=\"relu\"),\n    Dense(1)\n    ])","191fc833":"ann_model.compile(loss=tf.losses.MeanSquaredError(),\n                optimizer=tf.optimizers.Adam(learning_rate = 0.001),\n                metrics=[tf.metrics.RootMeanSquaredError()])","279b5ed3":"history = ann_model.fit(X_train_array, Y_train_array, \n     validation_data=(X_valid_array, Y_valid_array),\n     epochs=150, verbose=1, batch_size = 128)","e0496689":"annforecast = ann_model.predict(X_valid_array)\nvalid[\"Forecast_ANN\"] = annforecast.squeeze()","089aa31b":"valid[[\"wind_generation_actual\", \"Forecast_ANN\"]].plot(figsize=(14, 7))","2d3af6c5":"ann_rmse = np.sqrt(mean_squared_error(valid[\"wind_generation_actual\"], valid.Forecast_ANN))\nann_mae = mean_absolute_error(valid[\"wind_generation_actual\"], valid.Forecast_ANN)\n\nprint(\"RMSE of ANN:\", ann_rmse)\nprint(\"\\nMAE of ANN:\", ann_mae)","98660915":"fig, axes = plt.subplots(figsize=(15, 10))\n\naxes.plot(train.iloc[350:,:][\"wind_generation_actual\"], label='Training Data')\naxes.plot(valid.index, valid[\"wind_generation_actual\"], label='Actual Values')\naxes.plot(valid.index, annforecast.squeeze(), label='Predicted Values')\naxes.set_title('Wind energy forecasts')\naxes.set_xlabel('Dates')\naxes.set_ylabel('Energy production')\naxes.legend()","becab047":"rnn_model = Sequential([\n    SimpleRNN(50, activation = \"relu\", return_sequences=False, input_shape=(1, X_train_array.shape[2])),\n    Dense(8, activation=\"relu\"),\n    Dense(1)\n\n    ])\nrnn_model.compile(loss=tf.losses.MeanSquaredError(),\n                optimizer=tf.optimizers.Adam(learning_rate = 0.001),\n                metrics=[tf.metrics.RootMeanSquaredError()])","fadaaffa":"history = rnn_model.fit(X_train_array, Y_train_array, \n     validation_data=(X_valid_array, Y_valid_array),\n     epochs=150, verbose=2, batch_size = 128)","06bad8f6":"rnnforecast = rnn_model.predict(X_valid_array)\nvalid[\"Forecast_RNN\"] = rnnforecast","543b4b35":"valid[[\"wind_generation_actual\", \"Forecast_RNN\"]].plot(figsize=(14, 7))","97cdd44c":"rnn_rmse = np.sqrt(mean_squared_error(valid[\"wind_generation_actual\"], valid.Forecast_RNN))\nrnn_mae = mean_absolute_error(valid[\"wind_generation_actual\"], valid.Forecast_RNN)\n\nprint(\"RMSE of RNN:\", rnn_rmse)\nprint(\"\\nMAE of RNN:\", rnn_mae)","396740df":"fig, axes = plt.subplots(figsize=(15, 10))\n\naxes.plot(train.iloc[350:,:][\"wind_generation_actual\"], label='Training Data')\naxes.plot(valid.index, valid[\"wind_generation_actual\"], label='Actual Values')\naxes.plot(valid.index, rnnforecast,label='Predicted Values')\naxes.set_title('Wind energy forecasts')\naxes.set_xlabel('Dates')\naxes.set_ylabel('Energy production')\naxes.legend()","833351c0":"lstm_model = Sequential([\n    Bidirectional(LSTM(100, activation = \"relu\", return_sequences=False, input_shape=(1, X_train_array.shape[2]))),\n    Dense(8, activation=\"relu\"),\n    Dense(1)\n\n    ])\nlstm_model.compile(loss=tf.losses.MeanSquaredError(),\n                optimizer=tf.optimizers.Adam(learning_rate = 0.001),\n                metrics=[tf.metrics.RootMeanSquaredError()])","a43331fb":"history = lstm_model.fit(X_train_array, Y_train_array, \n     validation_data=(X_valid_array, Y_valid_array),\n     epochs=150, verbose=2, batch_size = 128)","3a6c26db":"lstmforecast = lstm_model.predict(X_valid_array)\nvalid[\"Forecast_LSTM\"] = lstmforecast","9227fdf3":"valid[[\"wind_generation_actual\", \"Forecast_LSTM\"]].plot(figsize=(14, 7))","deaeaa4d":"lstm_rmse = np.sqrt(mean_squared_error(valid[\"wind_generation_actual\"], valid.Forecast_LSTM))\nlstm_mae = mean_absolute_error(valid[\"wind_generation_actual\"], valid.Forecast_LSTM)\n\nprint(\"RMSE of LSTM:\", lstm_rmse)\nprint(\"\\nMAE of LSTM:\", lstm_mae)","32569809":"fig, axes = plt.subplots(figsize=(15, 10))\n\naxes.plot(train.iloc[350:,:][\"wind_generation_actual\"], label='Training Data')\naxes.plot(valid.index, valid[\"wind_generation_actual\"], label='Actual Values')\naxes.plot(valid.index, lstmforecast,label='Predicted Values')\naxes.set_title('Wind energy forecasts')\naxes.set_xlabel('Dates')\naxes.set_ylabel('Energy production')\naxes.legend()","789990b0":"\nmetrics = {'Models' : ['ARIMAX', 'Decision Trees', 'Random Forest', 'ANN', 'RNN', 'LSTM'],\n           'RMSE'   : [arimax_rmse, dt_rmse, rf_rmse, ann_rmse, rnn_rmse, lstm_rmse],\n           'MAE'    : [arimax_mae, dt_mae, rf_mae, ann_mae, rnn_mae, lstm_mae],\n           'NRMSE'  : [arimax_rmse\/valid.Forecast_ARIMAX.mean(), dt_rmse\/valid.Forecast_DT.mean(), \n                       rf_rmse\/valid.Forecast_RF.mean(), ann_rmse\/valid.Forecast_ANN.mean(), \n                       rnn_rmse\/valid.Forecast_RNN.mean(), lstm_rmse\/valid.Forecast_LSTM.mean()]}\nmetrics = pd.DataFrame(metrics)","7444dabc":"metrics.sort_values(by = 'RMSE')","e2ff914f":"metrics.sort_values(by = 'MAE')","05fccc2c":"# Artificial Neural Network","6f6278bf":"# LSTM","0580e7aa":"# Conclusion","181c16ba":"# Recurrent Neural Network","870967fe":"the adfuller test is used to determine if our time series is stationary or not, here we see that it's stationary","127802a8":"we split our data into train and test, train being from 2017 to 2019 and test being from 2019 onwards","5f7cdb38":"# Random Forest","4aa2083b":"# Feature engineering\n\nwe create new features such as year or month and shifted versions of our original features (lag features)","a5965734":"# ARIMAX","390e7635":"# Decision Trees","53ebd594":"# Data Preparation"}}