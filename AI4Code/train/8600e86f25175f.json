{"cell_type":{"7f2ecb2f":"code","0f702b20":"code","1e61f13e":"code","cb7a04db":"code","a09ada1b":"code","0bbab46c":"code","bf673788":"code","ddb54741":"code","d53041ae":"code","4b83bd0a":"code","f59455fe":"code","01e8cfb0":"code","d8b8e4b0":"code","7f1c96d8":"code","d66528ff":"code","79f9d6f1":"code","e4183225":"code","3d106c4b":"code","8cb80258":"code","9912a660":"code","773c8e12":"code","199ff5ad":"code","08768fb3":"code","33a1f77a":"code","442ad4d2":"code","6c4bc3b0":"code","7b92b781":"code","a07e5310":"code","4abc3a2b":"code","0ebf16b0":"code","7175fee2":"code","d8af5158":"code","a6aa6f20":"code","b4aa8087":"code","ff63eb7d":"code","bbb3ba2f":"code","09839543":"markdown","c7ee6960":"markdown","777ad87e":"markdown","2c4b32d4":"markdown","2b35076c":"markdown","c3fc9c3b":"markdown","3c4810ef":"markdown","ecd7e783":"markdown","f32dd8da":"markdown"},"source":{"7f2ecb2f":"# Python modules\nfrom itertools import chain\nimport os\n\n# Standard imports\nimport pandas as pd\nimport numpy as np\n\n# Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, roc_auc_score, roc_curve\nfrom sklearn.preprocessing import StandardScaler, Normalizer\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import LabelEncoder","0f702b20":"# For colab\ntry:\n  from google.colab import files\n  google_colab = True\nexcept Exception:\n  google_colab = False\n  print('Working not in colab')","1e61f13e":"try:\n  from catboost import CatBoostClassifier\nexcept:\n  !pip install catboost\n  from catboost import CatBoostClassifier","cb7a04db":"# path for dir with train data\nif google_colab:\n  path = \"drive\/My Drive\/DS and ML\/cs_go\/cs-go_matches\/\"\nelse:\n  path = '..\/input\/csgo-matches\/'\n\n# For colab only\nif google_colab:\n  from google.colab import drive\n  drive.mount('\/content\/drive')","a09ada1b":"# read data\ndf = pd.read_csv(path + 'data_stat_all_maps.csv', index_col=0)","0bbab46c":"# Cleaning dataset from columns with URL and transform datetime to python datetime format\ndef clean_data(df):\n  df['1st_team_win'] = pd.to_numeric((df['score1'] > df['score2'])\\\n                                     .astype('int'), downcast='integer')\n  df['date'] = pd.to_datetime(df['date'])\n  # Find columns with history last_maps1_score_team1\n  drop_cols = list()\n  for i, col in enumerate(df):\n    if col.count('url'):\n      drop_cols.append(col)\n  df.drop(columns=drop_cols, inplace=True)","bf673788":"clean_data(df)\ndf.head()","ddb54741":"# Class for fast data testing, it takes data and:\n\nclass DataTester:\n  metrics = {\n      'accuracy': accuracy_score,\n             }\n  metrics_prob = {\n      'roc_auc': roc_auc_score,\n  }\n\n  def __init__(self,\n               data,\n               target_col='1st_team_win',\n               test_split=0.2,\n               cat_features=[],\n               use_eval=False,\n               **kwargs\n              ):\n    self.X = data.drop(columns=[target_col])\n    self.y = data.loc[:,target_col]\n    self.X_train, self.X_test, self.y_train, self.y_test =\\\n          train_test_split(self.X[::-1], self.y[::-1], test_size=test_split, shuffle=False)\n    self.model = CatBoostClassifier(**kwargs)\n    self.cat_features = cat_features\n    self.use_eval = use_eval\n    self.results = dict()\n    self.y_pred = None\n    self.y_pred_proba = None\n    \n\n\n  def evaluate(self):\n    self.model.fit(self.X_train, self.y_train,\n                   cat_features=self.cat_features,\n                   verbose=False,\n                   eval_set=(self.X_test, self.y_test) if self.use_eval else None\n                   )\n    self.y_pred = self.model.predict(self.X_test)\n    self.y_pred_proba= self.model.predict_proba(self.X_test)[:,1]\n    for metric in self.metrics:\n      self.results[metric] = self.metrics[metric](self.y_test, self.y_pred)\n    for metric in self.metrics_prob:\n      self.results[metric] = self.metrics_prob[metric](self.y_test,\n                                                       self.y_pred_proba)\n  \n  def plot_roc(self, lw=2, figsize=(6, 6)):\n    fpr, tpr, _ = roc_curve(self.y_test, self.y_pred_proba)\n    plt.figure(figsize=figsize)\n    plt.plot(fpr, tpr, color='darkorange',\n            lw=lw, label='ROC curve (area = %0.2f)' % self.results['roc_auc'])\n    plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n    \n  def __repr__(self):\n    if self.y_pred is None:\n      return \"Model is not fitted\"\n    res = ''\n    res += '\\n'.join([f'{metric}: {self.results[metric]}' for metric in \n                      self.results])\n    return res\n    ","d53041ae":"sns.distplot(df['prize_pool'] \/ 10 ** 3)","4b83bd0a":"# Transforming prize pool feature to categorical to avoid outliers but keep exam[les in train set]\npd.cut(df['prize_pool'], np.append((0, 10 ** 3), 10 ** np.arange(4,8)),\n       include_lowest=True,).value_counts(sort=0).plot(kind='bar')\nplt.show()","f59455fe":"pd.cut(df['event_teams'], 6).value_counts(sort=False)","01e8cfb0":"df['event_teams'].isna().sum()","d8b8e4b0":"df['event_teams'].describe()","7f1c96d8":"target_col = '1st_team_win'\nremain_cols='total_maps \th2h_wins1 \th2h_wins2'\\\n                .split()\nremain_cols.append(target_col)","d66528ff":"clear_df = df.loc[:,remain_cols]","79f9d6f1":"clear_df.head()","e4183225":"# Test model with minimal number of features\nno_features_data = DataTester(clear_df)","3d106c4b":"print(no_features_data)","8cb80258":"no_features_data.evaluate()\nno_features_data.plot_roc()\nprint(no_features_data)","9912a660":"def clean_rank(raw_rank):\n  rank = raw_rank.split('#')\n  rank = int(rank[1]) if len(rank) > 1 else -1\n  return rank\nclean_rank_vec = np.vectorize(clean_rank)\n\ndef transform_ranks(df):\n  res = pd.DataFrame()\n  for col in df:\n    if col.startswith('rank'):\n      res[col] = clean_rank_vec(df[col])\n  return res","773c8e12":"# All columns with date prefix is categorical\ndef get_date_features(date_col):\n  res = pd.DataFrame()\n  res['date_month'] = date_col.dt.month\n  res['date_day_of_week'] = date_col.dt.dayofweek\n  res['date_day_of_month'] = date_col.dt.day\n  res['date_week_of_year'] = date_col.dt.weekofyear\n  return res","199ff5ad":"def get_h2h_winrate(h2h_df):\n  sum_of_games = h2h_df.sum(axis=1)\n  res = pd.DataFrame([df['h2h_wins1'] \/ df[['h2h_wins1', 'h2h_wins2']].sum(axis=1),\n             df['h2h_wins2'] \/ df[['h2h_wins1', 'h2h_wins2']].sum(axis=1)],\n             ).T\n  return res.rename({\n      0: 'h2h_winrate1',\n      1: 'h2h_winrate2'\n  }, axis=1).fillna(0)","08768fb3":"def categorize_prize_pool(prize_pool_series):\n  bins = np.append((0, 10 ** 3), 10 ** np.arange(4,8))\n  return pd.cut(prize_pool_series, bins,\n       include_lowest=True, labels=range(1, len(bins)))\n  \ndef categorize_events(event_col, prefix='cat'):\n  res = pd.get_dummies(event_col)\n  res.columns = ['_'.join([prefix, col, 'online']) for col in res]\n  return res","33a1f77a":"def reduce_rating_dimensions_pca(player_df_view, team_num, player_num):\n  maps_number_list = [i for i in player_df_view if 'maps' in i]\n  player_df_view.loc[:,maps_number_list] =\\\n      StandardScaler().fit_transform(player_df_view.loc[:,maps_number_list])\n  pca = PCA(n_components=0.99, whiten=True)\n  pca_features = pd.DataFrame(pca.fit_transform(player_df_view))\n  pca_features.columns = [f'rating_pca_team{team_num}_player{player_num}_{i}'\n                            for i in range(pca_features.shape[1])]\n  return pca_features\n","442ad4d2":"def get_player_features(player_df_view,\n                        team_num,\n                        player_num,\n                        ):\n  res = reduce_rating_dimensions_pca(player_df_view, team_num, player_num)\n\n  res[f'cat_player{player_num}_teams_all_team{team_num}'] = \\\n      player_df_view[f'player{player_num}_teams_all_team{team_num}']\n  for col in [col for col in player_df_view if 'days' in col]:\n    res['_'.join([col, 'scaled'])] = days_std_scaler.transform(player_df_view[col].values.reshape(-1, 1))\n  for scaling_feat in scalers_dict:\n    col_name = player_df_view.loc[:,[i for i in player_df_view if scaling_feat in i]].iloc[:,0].name\n    res['_'.join([col_name, 'scaled'])] =\\\n      scalers_dict[scaling_feat].transform(player_df_view[col_name].values.reshape(-1, 1))\n  saved_cols = [col for col in player_df_view if 'age' in col or '\/' in col or '%' in col]\n  res = pd.concat([res, player_df_view.loc[:,saved_cols]], axis=1)\n\n  return res","6c4bc3b0":"def initialize_scalers(players_df_view,\n                       scaling_feats,\n                       scaler=StandardScaler()):\n  global scalers_dict, days_std_scaler\n  scalers_dict = dict()\n  all_days_feat_array = players_df_view.loc[:,[i for i in df.columns if 'days' in i]]\\\n                          .values.reshape(-1,1)\n  # print(all_days_feat_array)\n  days_std_scaler = StandardScaler((0, 1)).fit(all_days_feat_array)\n  for feat in scaling_feats:\n    all_feats_ar =\\\n      players_df_view.loc[:,[i for i in df.columns if feat in i]].values.reshape(-1,1)\n    scalers_dict[feat] = scaler.fit(all_feats_ar)\n\n\ndef get_players_features(players_df_view):\n  res = pd.DataFrame()\n\n  scaling_feats = ['Total kills', 'Total deaths', 'Maps played', 'Rounds played']\n  initialize_scalers(players_df_view, scaling_feats)\n  \n  for team_num in [1, 2]:\n    for player_num in range(1,6):\n      player_view = \\\n          df.loc[:,[col for col in df.columns if\n                    (f'player{player_num}' in col and f'team{team_num}' in col)]]\n      res = pd.concat([res, get_player_features(player_view, team_num, player_num)],\n                       axis=1)\n  return res","7b92b781":"def get_last_games_feats(last_games_df_view, num_last_games=5):\n  global match_labler\n  all_maps_array =\\\n      last_games_df_view[[col for col in last_games_df_view if 'maps' in col]].values.reshape(-1, 1)\n  match_labler = LabelEncoder().fit(all_maps_array)\n  res = pd.DataFrame()\n  for team_num in [1, 2]:\n    scores = np.zeros(last_games_df_view.iloc[:,0].shape)\n    for match_num in range(1, num_last_games + 1):\n      res[f'last_match{match_num}_map_team{team_num}_cat'] = \\\n        match_labler.transform(last_games_df_view[f'5last_match{match_num}_total_maps{team_num}'])\n      res[f'last_match{match_num}_win_team{team_num}_cat'] = \\\n        last_games_df_view[f'5last_match{match_num}_score{team_num}']\n      scores += res[f'last_match{match_num}_win_team{team_num}_cat'].values\n    res[f'last_games_winrate_team{team_num}'] = scores \/ 5\n  return res\n\n","a07e5310":"df['event_teams'] = df['event_teams'].fillna(df['event_teams'].median())\ndf['event_teams'] = pd.to_numeric(df['event_teams'], downcast='integer')","4abc3a2b":"def get_all_features(df):\n  res = get_date_features(df['date'])\n  res = pd.concat([res, transform_ranks(df)], axis=1)\n  res['prize_pool_cat'] = categorize_prize_pool(df['prize_pool'])\n  res = pd.concat([res, categorize_events(df['event_type'])], axis=1)\n  res = pd.concat([res, get_h2h_winrate(df[['h2h_wins1', 'h2h_wins2']])], axis=1)\n\n  # Last games history\n  last_games_view = df.loc[:, [i for i in df.columns if '5last' in i]]\n  res = pd.concat([res, get_last_games_feats(last_games_view)], axis=1)\n\n  # Players info\n  players_view = df.loc[:,[i for i in df.columns if 'player' in i and 'team' in i]]\n  res = pd.concat([res, get_players_features(players_view)], axis=1)\n      \n  return res","0ebf16b0":"%%time\nclear_preprocessed_df = pd.concat([clear_df, get_all_features(df)], axis=1)","7175fee2":"# Drop rating PCA features\n# clear_preprocessed_df.drop(columns=[i for i in clear_preprocessed_df if 'rating' in i], inplace=True)","d8af5158":"clear_preprocessed_df.head()","a6aa6f20":"# Creating list of categorical features for catboost\ndef iscat_feat(col_name):\n  cat_feat_marks = ['date', 'age', 'cat']\n  if any([col_name.startswith(mark) or col_name.endswith(mark)\n          for mark in cat_feat_marks]):\n    return True\n  return False\ncat_features = [feat for feat in clear_preprocessed_df if iscat_feat(feat)]","b4aa8087":"cat_features","ff63eb7d":"# del preprocessed_model\npreprocessed_model = DataTester(clear_preprocessed_df,\n                                cat_features=cat_features,\n                                test_split=0.2,\n                                use_eval=True,\n                                n_estimators=500,\n                                # task_type='GPU',\n#                                 boosting_type='Ordered',\n                                # learning_rate=0.033,\n                                l2_leaf_reg=0.7\n                                )\nclear_preprocessed_df.head()","bbb3ba2f":"# \npreprocessed_model.evaluate()\npreprocessed_model.plot_roc()\npreprocessed_model","09839543":"Some func for data preprocessing and adding them to baseline dataset","c7ee6960":"### Descriptions for all columns\n\n---\n\n  - 'match_url', - \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043c\u0430\u0442\u0447\n  - 'event_url', - \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0442\u0443\u0440\u043d\u0438\u0440\n  - 'players_url_1', - \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 1\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n  - 'players_url_2', - \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 2\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n  - 'maps_url', - \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0441\u044b\u0433\u0440\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u0440\u0442\u044b\n  - 'maps_name' - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u0430\u0440\u0442\n  - 'score1_maps' - \u0441\u0447\u0435\u0442 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0430\u0440\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b 1\n  - 'score2_maps' - \u0441\u0447\u0435\u0442 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0430\u0440\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b 2\n  - 'picks' - \u043f\u0438\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434; 1 - \u043f\u0435\u0440\u0432\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b, -1 - \u0432\u0442\u043e\u0440\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430; \u0435\u0441\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 None, \u0442\u043e \u043a\u0430\u0440\u0442 < 2\n  - 'date', - \u0434\u0430\u0442\u0430 \u043c\u0430\u0442\u0447\u0430\n  - 'total_maps', - \u0432\u0441\u0435\u0433\u043e \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u0441\u044b\u0433\u0440\u0430\u0442\u044c \u043a\u0430\u0440\u0442 (\u043e\u0431\u044b\u0447\u043d\u043e 1, 3 \u0438\u043b\u0438 5)\n  - 'maps_played', - \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u0430\u0440\u0442 \u0441\u044b\u0433\u0440\u0430\u043b\u043e\u0441\u044c \u0432 \u0438\u0442\u043e\u0433\u0435\n  - 'score1', - \u0441\u0447\u0435\u0442 1\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n  - 'score2', - \u0441\u0447\u0435\u0442 2\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n  - 'h2h_wins1', - \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u043f\u043e\u0431\u0435\u0434 1\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0430\u0434 2\u043e\u0439\n  - 'h2h_wins2', - \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u043f\u043e\u0431\u0435\u0434 2\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0430\u0434 1\u043e\u0439\n  - 'rank1', - \u0440\u0430\u043d\u0433 1\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n  - 'rank2', - \u0440\u0430\u043d\u0433 2\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n  - event_type - \u0442\u0438\u043f \u0442\u0443\u0440\u043d\u0438\u0440\u0430 (Lan \u0438\u043b\u0438 Online)\n  - event_teams - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u0430\u043d\u0434 \u043d\u0430 \u0442\u0443\u0440\u043d\u0438\u0440\u0435\n  - prize_pool - \u043f\u0440\u0438\u0437\u043e\u0432\u043e\u0439 \u0444\u043e\u043d\u0434 \u0442\u0443\u0440\u043d\u0438\u0440\u0430\n  \n  playerID - \u043d\u043e\u043c\u0435\u0440 \u0438\u0433\u0440\u043e\u043a\u0430 (\u043e\u0442 1 \u0434\u043e 5); team_id - \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (1 \u0438\u043b\u0438 2)\n  - 'player{playerID}_days_in_current_team{team_id}' - \u0434\u043d\u0435\u0439, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0433\u0440\u043e\u043a \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 (0 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435)\n  - 'player{playerID}_days_in_all_team{team_id}' - \u0434\u043d\u0435\u0439, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0438\u0433\u0440\u043e\u043a \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u0445 (0 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435)\n  - 'player{playerID}_teams_all_team{team_id}' - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u0430\u043d\u0434, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u043b \u0438\u0433\u0440\u043e\u043a (0 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435)\n  - '{param}_player{player}_team{team_id}' - \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0438\u0433\u0440\u043e\u043a\u0430\n  - '{param}_maps_player{player_id}_team{team_id}' - \u0441\u044b\u0433\u0440\u0430\u043d\u043e \u043a\u0430\u0440\u0442 \u0434\u043b\u044f \u0440\u0430\u0441\u0441\u0447\u0435\u0442\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 (\u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432)\n  - 'age_player{player_id}_team{team_id}' - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0438\u0433\u0440\u043e\u043a\u0430\n  - '{param}_team{team_id}' - \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u0430\u0440\u0442\u0435\n  - 'current_map_played{\u2116}_team{team_id}' - \u0441\u0447\u0435\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u0430\u0440\u0442\u0435\u0435 \u0438\u0437 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0438\u0433\u0440\n  - 'current_map_played{\u2116}_opponent_team{team_id}' - \u0441\u0447\u0435\u0442 \u043e\u043f\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u0430\u0440\u0442\u0435 \u0438\u0437 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0438\u0433\u0440\n  - 'map_score1' - \u0441\u0447\u0435\u0442 1\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0430 \u043a\u0430\u0440\u0442\u0435\n  - 'map_score2' - \u0441\u0447\u0435\u0442 2\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0430 \u043a\u0430\u0440\u0442\u0435\n  - 'pick1' - \u0435\u0441\u043b\u0438 \u0440\u0430\u0432\u043d\u043e 1 - \u043f\u0438\u043a 1\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b; \u0435\u0441\u043b\u0438 0 - \u043d\u0435 \u043f\u0438\u043a 1\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n  - 'pick2' - \u0435\u0441\u043b\u0438 \u0440\u0430\u0432\u043d\u043e 1 - \u043f\u0438\u043a 2\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b; \u0435\u0441\u043b\u0438 0 - \u043d\u0435 \u043f\u0438\u043a 2\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b","777ad87e":"Class for testing preprocessed data using CatbosstClassifier. It takes:\n\n\n1.   data - Full dataset\n2.   target_col - Column to be handeled as y\n3.   test_split - size of test split (equal to sklearn.select_model.train_test_split.test_size (from 0. to 1.)\n4.   cat_features - names of columns with categorical features\n5.   use_eval - use test dataset as evaluation in catboost during training\n6.   **kwargs - params just moved directly in CatBoostClassifier initialization\n\nMove further to see examples\n","2c4b32d4":"Looking for distribution of some features.","2b35076c":"## Form base dataset","c3fc9c3b":"### Preprocessing","3c4810ef":"Baseline best results with some hyperparams which was lost :D\n  - accuracy: ~0.67\n  - roc_auc: ~0.72","ecd7e783":"## Data research","f32dd8da":"## Concat result df"}}