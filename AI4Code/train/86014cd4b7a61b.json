{"cell_type":{"ab79af56":"code","6d79427d":"code","9db0fad6":"code","d4c53fa6":"code","3f2ad31b":"code","46701b65":"code","1b71b2bd":"code","bd86c3cf":"code","a287011f":"code","dd8d22fe":"code","17e1438a":"code","f0d80002":"code","82c48bf4":"code","586b9769":"code","e302201f":"code","de07ce0e":"code","bf089719":"code","7471f8ab":"code","29a6aa5f":"code","1a2c9eaa":"code","0ee80268":"code","3e21bb73":"code","e92e7c21":"code","e31d68f1":"code","85090f01":"code","2cb282da":"code","f49e9888":"code","5424849a":"code","43019920":"code","dc9ab0f2":"code","522a53ea":"code","c655537a":"code","1eb50ea4":"code","03c19eee":"code","e4bd3d73":"code","95fb50f4":"code","317423bd":"code","514083aa":"code","4ba9ec2b":"code","de19c6c4":"code","c58a042d":"code","a808b83e":"code","a102ddba":"code","9b98306d":"code","deced414":"code","2117dcc8":"code","4c7b38cd":"code","b9e2e141":"code","30cceae0":"code","e429ea50":"code","236b59e1":"code","50937dd0":"markdown","e5fc8e90":"markdown"},"source":{"ab79af56":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport seaborn as sns\n\n\nfrom pandas_profiling import ProfileReport\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d79427d":"train_data=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\nsub=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","9db0fad6":"train_data.head(3)","d4c53fa6":"test_data.head(3)","3f2ad31b":"train_data.shape","46701b65":"test_data.shape\n","1b71b2bd":"train_data.info()","bd86c3cf":"train_data.SalePrice","a287011f":"test_data.info()","dd8d22fe":"df=pd.concat([train_data.iloc[:,:-1],test_data],axis=0)","17e1438a":"df.shape","f0d80002":"print(df.isnull().sum())","82c48bf4":"percentage =((df.isnull().sum())\/len(df))\nt=percentage.sort_values(ascending=False)\nlist_of_null=t[t>0]\nlist_of_null","586b9769":"with open('\/kaggle\/input\/house-prices-advanced-regression-techniques\/data_description.txt') as f:\n    print(f.read())","e302201f":"features=['Alley','MasVnrType','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PoolQC','Fence','MiscFeature']","de07ce0e":"df[features].info()","bf089719":"for col in features:\n\n    df[col]=df[col].fillna('None')","7471f8ab":"def display_missing(df1):\n    missing=(df1.isnull().sum())\/(len(df1))*100\n    missing=missing.drop(missing[missing==0].index).sort_values(ascending=False)\n    return missing","29a6aa5f":"lis=display_missing(df)\nlis","1a2c9eaa":"def features_dtypes(d):\n    t=d.index\n    for i in t:\n        print(i,\"\\t\",df[i].dtype)","0ee80268":"features_dtypes(lis)","3e21bb73":"features_1=['GarageYrBlt', 'GarageArea', 'GarageCars','BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath','MasVnrArea']","e92e7c21":"for col in features_1:\n    df[col]=df[col].fillna(0)","e31d68f1":"missing_1=display_missing(df)\nmissing_1","85090f01":"features_dtypes(missing_1)","2cb282da":"features_2=[ 'MSZoning', 'Functional', 'Utilities', 'SaleType',\n       'KitchenQual', 'Electrical', 'Exterior2nd', 'Exterior1st']","f49e9888":"for col in features_2:\n    df[col].fillna(df[col].mode()[0],inplace=True)","5424849a":"display_missing(df)","43019920":"df['LotFrontage']=df.groupby(\"Neighborhood\")['LotFrontage'].transform(lambda x: x.fillna(x.median()))","dc9ab0f2":"display_missing(df)","522a53ea":"df.select_dtypes(include='object').columns","c655537a":"df.dtypes.value_counts()","1eb50ea4":"train_df=df[:1460]\n\ntest_df=df[1460:]","03c19eee":"train_df.drop(['Alley','FireplaceQu','PoolQC','Fence','MiscFeature'],axis=1,inplace=True);\ntest_df.drop(['Alley','FireplaceQu','PoolQC','Fence','MiscFeature'],axis=1,inplace=True);\n","e4bd3d73":"objects = train_df.columns[train_df.dtypes == 'object'].to_list()\ntrain_x=pd.get_dummies(train_df,columns=objects)\nfor i in objects:\n    cols = train_x.filter(like=i).columns\n    train_x.drop(cols[0],axis=1,inplace=True)\n    \nobjects = test_df.columns[test_df.dtypes == 'object'].to_list()\ntest=pd.get_dummies(test_df,columns=objects)\nfor i in objects:\n    cols = test.filter(like=i).columns\n    test.drop(cols[0],axis=1,inplace=True)\n\nmissing = (list(set(train_x.columns) - set(test.columns)))\ntrain_x.drop(columns = missing,axis = 1,inplace=True)\ntrain_x.head()","95fb50f4":"train_x.drop('Id',axis=1,inplace = True)\n","317423bd":"train_x.shape[1]","514083aa":"test.drop('Id',axis=1,inplace = True)\n","4ba9ec2b":"test.shape[1]","de19c6c4":"y_new","c58a042d":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\n\nfrom sklearn.preprocessing import MinMaxScaler","a808b83e":"scaler=MinMaxScaler()\n\ntrain_x=scaler.fit_transform(train_x)\n\ntest=scaler.fit_transform(test)\n","a102ddba":"y=train_data.iloc[:,-1]\n\ny=scaler.fit_transform(y.values.reshape(-1,1))\n\ny_new=scaler.inverse_transform(y.reshape(-1,1))","9b98306d":"y_new","deced414":"classifier=Sequential()\nclassifier.add(Dense(units=512,kernel_initializer='uniform',activation='relu',input_dim=225))\n\nclassifier.add(Dense(units=128,kernel_initializer='uniform',activation='relu'))\n\nclassifier.add(Dense(units=128,kernel_initializer='uniform',activation='relu'))\n\nclassifier.add(Dense(units=64,kernel_initializer='uniform',activation='relu'))\n\nclassifier.add(Dense(units=1,kernel_initializer='uniform',activation='relu'))\nclassifier.compile(optimizer='adam',loss='mean_squared_error',metrics=['mean_squared_error'])","2117dcc8":"classifier.fit(train_x,y,batch_size=15,epochs=500)\n","4c7b38cd":"y_pred = classifier.predict(test) \n","b9e2e141":"\ny_new_=scaler.inverse_transform(y_pred.reshape(-1,1))","30cceae0":"pred=[]\n\nfor i in y_new_:\n    pred.append(i.tolist()[0])","e429ea50":"test_df","236b59e1":"new_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\noutput = pd.DataFrame({'Id': test_df.Id,'SalePrice': pred})\noutput.to_csv('submission.csv', index=False)","50937dd0":"> It will be easier to identify the missing values if we list the percentage of columns in descending order.","e5fc8e90":"To better understand the content present in each column we had loaded the text file"}}