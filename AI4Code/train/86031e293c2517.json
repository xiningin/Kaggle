{"cell_type":{"cb0814e7":"code","41f63c0e":"code","d88782e2":"code","a92efe71":"code","618b646f":"code","8081b0e2":"code","8109c79a":"code","d2dbcd25":"code","64f915d3":"code","15e24ef4":"code","57614723":"code","54978ee5":"code","eb28cfff":"code","99dc28a1":"code","d8b8ce13":"code","c1247515":"code","f8930ef8":"code","c66ce896":"code","b537e192":"code","4bf74b3e":"code","d28ea7fb":"code","a2736c9c":"code","a8375ce1":"code","c7af6f8e":"code","e7358859":"code","19c7dac3":"markdown","745b126f":"markdown","6b6bebda":"markdown","25c10481":"markdown","cd338514":"markdown","f740e682":"markdown"},"source":{"cb0814e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","41f63c0e":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d88782e2":"df = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")\ndf.head()","a92efe71":"df.info()","618b646f":"#Let us visualize the missing values. \n\nmsno.matrix(df)","8081b0e2":"#Let's find out missing value count using Bar chart \n\nmsno.bar(df)","8109c79a":"#Let's see how many unique values are there\ndf.nunique()","d2dbcd25":"#Count of missing values.\n\ndf.isna().sum()","64f915d3":"df.groupby('type').count()","15e24ef4":"#using Descripition , We will try building recommendation engine\n\n# Remove unwanted rows from description column\n#We are dropping those movies which does not have description.\ndf.dropna(subset=['description'],inplace=True)","57614723":"#Let's plot what words are common from the description.\n\nfrom wordcloud import WordCloud\ndef plot_wordcloud(msg):\n    plt.figure(figsize=(8,8))\n    wordcloud = WordCloud(max_font_size=120, background_color = 'white').generate(\", \".join(msg))\n    plt.imshow(wordcloud, interpolation = 'bilinear')\n    plt.axis('off')\n    plt.show()\n\n    \nplot_wordcloud(df['description'])","54978ee5":"# Create a column that contains a combintion of listed_in,cast,director and genres\n\ndf['soup'] = df['listed_in'] + df['cast'] + df['director']","eb28cfff":"df['soup']","99dc28a1":"df['soup'].isna().sum()","d8b8ce13":"df = df.dropna()","c1247515":"df['soup']","f8930ef8":"df.info()","c66ce896":"df['soup'][1]","b537e192":"from scipy import stats\nfrom ast import literal_eval\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel, cosine_similarity\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.corpus import wordnet\nfrom surprise import Reader, Dataset, SVD\nfrom surprise.model_selection import cross_validate\n\nimport warnings; warnings.simplefilter('ignore')","4bf74b3e":"# Vectorize words to numbers and builds a sparse matrix\n\ncount = CountVectorizer(analyzer = 'word', ngram_range = (1,2), stop_words ='english')\ncount_matrix = count.fit_transform(df['soup'])\nprint(count_matrix)","d28ea7fb":"#Computes similarity between movies and series using cosine similarity metric\n\ncosine_sim = cosine_similarity(count_matrix, count_matrix)","a2736c9c":"print (cosine_sim.shape)","a8375ce1":"#Getting the title of the movie and series along with the index\n\ndf = df.reset_index()\ntitles = df['title']\nprint(titles)\nindices = pd.Series(df.index, index = df['title'])\nprint(indices)","c7af6f8e":"def recommendations(userId, title):\n    \n    #Extract the index of movie title\n    idx = indices[title]\n    \n    #Extract the similarity scores and their corresponding index for every movie from the cosine similarity matrix\n    sim_scores = list(enumerate(cosine_sim[int(idx)]))\n    #Sort the (index,score) tuples in decreasing order of similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    \n    #Select top 25\n    sim_scores = sim_scores[1:26]  #not taking 0 in consideration because we are neglecting the self\n    print (\"Sim_scores\",sim_scores)\n    #Store the cosine_sim indices of the top 25 movies in a list\n    movie_indices = [i[0] for i in sim_scores]\n    \n    #Extract metadata of the movie\n    movies = df.iloc[movie_indices][['title', 'director', 'cast', 'rating']]\n     \n    #Sort the movies in decreasing order of predicted rating \n    movies = movies.sort_values('title', ascending=False)\n    \n    #Return top 10 movies as recommendations\n    return movies.head(10)","e7358859":"recommendations(4805, 'Zoom')","19c7dac3":"Exploratory Data Analysis.\n\nLet's produce a word cloud of the movie overview","745b126f":"As displayed above, there are few missing values in different columns. We will have to look at those in order to proceed.","6b6bebda":"The dataset has 7787 rows and 12 columns:<br>\n\nshow_id: unique id of each show (not much of a use for us in this notebook)<br>\ntype: The category of a show, can be either a Movie or a TV Show<br>\ntitle: Name of the show<br>\ndirector: Name of the director(s) of the show<br>\ncast: Name of actors and other cast of the show<br>\ncountry: Name of countries the show is available to watch on Netflix<br>\ndate_added: Date when the show was added on Netflix<br>\nrelease_year: Release year of the show<br>\nrating: Show rating on netflix<br>\nduration: Time duration of the show<br>\nlisted_in: Genre of the show<br>\ndescription: Some text describing the show<br>","25c10481":"\nObservation: Life is the most commonly used word. Family,Find, World, two are also popular in Movies and TV Series wordcloud. Together with woman,Love, these wordclouds give us a pretty good idea of the most popular themes present in movies.","cd338514":"Load the Data Set.","f740e682":"Director, cast and country has lot of variation which indicates there are missing values in these columns."}}