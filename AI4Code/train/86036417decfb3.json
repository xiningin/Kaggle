{"cell_type":{"be4acf51":"code","47f20d9f":"code","5f662d8e":"code","d0caf7c0":"code","68d38375":"code","85d1f157":"code","b42db791":"code","9db81a3c":"code","707f06a1":"code","0957eaf0":"code","11efd35c":"markdown","86f3ca3a":"markdown","63f0620e":"markdown","beba79b1":"markdown","87e72ad1":"markdown","1b98a837":"markdown","0b06bc16":"markdown","88936799":"markdown"},"source":{"be4acf51":"import pandas as pd\n# show images inline\n%matplotlib inline\nimport keras\nimport tensorflow\n# import miscellaneous modules\nimport matplotlib.pyplot as plt\nimport cv2\nimport os\nimport numpy as np\nimport time\nimport tensorflow as tf\n\n# Create 'RetinaNet' dir for zip extraction\n%mkdir RetinaNet\n\n#%cd RetinaNet\/\nfrom distutils.dir_util import copy_tree\n\nf='\/kaggle\/input\/offlineretinanet\/'\nt='\/kaggle\/working\/RetinaNet\/'\ncopy_tree(f,t)","47f20d9f":"#Clone Git Repository\n#!git clone https:\/\/github.com\/fizyr\/keras-retinanet.git\n#%cd keras-retinanet\/\n%cd RetinaNet\/\n!python setup.py build_ext --inplace\n\n# import keras_retinanet\nfrom keras_retinanet import models\nfrom keras_retinanet.utils.image import read_image_bgr, preprocess_image, resize_image\nfrom keras_retinanet.utils.visualization import draw_box, draw_caption\nfrom keras_retinanet.utils.colors import label_color\nfrom keras_retinanet import models\n\n!pip install \/kaggle\/input\/creating-whl-file-retinanet\/whlfiles\/keras_resnet-0.2.0-py2.py3-none-any.whl\nimport keras\nimport keras_resnet","5f662d8e":"model_path = '\/kaggle\/input\/v2models\/bestRetinanet.h5'\n#print(model_path)\n\n# load retinanet model\nmodel = models.load_model(model_path, backbone_name='resnet50')  ## Use backbone as resnet50\nmodel = models.convert_model(model)\n\n# load label to names mapping for visualization purposes\n#labels_to_names = pd.read_csv('\/kaggle\/input\/detection-using-keras-retinanet-train\/keras-retinanet\/classes.csv',header=None).T.loc[0].to_dict()","d0caf7c0":"#Annotation file for visualizing result\ndf_extrain_main=pd.read_csv(\"\/kaggle\/input\/v2models\/annotation.csv\",names=['image_path','x','y','width','height',\"class\"])\ndf_extrain_main","68d38375":"THRES_SCORE = 0.5  # Set Score Threshold Value\n\ndef df_plot_orinal(drawOG,img_path,df):\n    df=df[df['image_path']==img_path]\n    for i,r in df.iterrows():\n        cv2.rectangle(drawOG, (r['x'], r['y']), (r['width'], r['height']), (255,0,0),2)\n    \n\ndef img_inference(img_path):\n  image = read_image_bgr(img_path)\n\n  # copy to draw on\n  draw = image.copy()\n  draw = cv2.cvtColor(draw, cv2.COLOR_BGR2RGB)\n  drawOG = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n  # preprocess image for network\n  image = preprocess_image(image)\n  image, scale = resize_image(image)\n\n  # process image\n  start = time.time()\n  boxes, scores, labels = model.predict_on_batch(np.expand_dims(image, axis=0))\n  df_plot_orinal(drawOG,img_path,df_extrain_main)\n  # correct for image scale\n  boxes \/= scale\n  #print(boxes)\n  # visualize detections\n  for box, score, label in zip(boxes[0], scores[0], labels[0]):\n      # scores are sorted so we can break\n      #print(score)\n      if score < THRES_SCORE:\n          continue\n      #print(score)\n      color = label_color(label)\n      b = box.astype(int)\n      draw_box(draw, b, color=color)\n      #caption = \"{} {:.3f}%\".format(labels_to_names[label], score*100)\n    \n  fig = plt.figure(figsize=(20, 20))\n  ax1=fig.add_subplot(1, 2, 1)\n  plt.imshow(draw)\n  ax2=fig.add_subplot(1, 2, 2)\n  plt.imshow(drawOG)\n\n  ax1.title.set_text('Predicted')\n  ax2.title.set_text('Actual')\n  plt.show()","85d1f157":"data=df_extrain_main.sample(n=10)  #Predict on Random 10 Image\nfor i,r in data.iterrows():\n    img_inference(r['image_path'])","b42db791":"%cd \/kaggle\/working\/","9db81a3c":"import greatbarrierreef\n\nenv = greatbarrierreef.make_env()   # initialize the environment\niter_test = env.iter_test()","707f06a1":"submission_dict = {\n    'id': [],\n    'prediction_string': [],\n}\n\nfor (image, sample_prediction_df) in iter_test:\n  #image = read_image_bgr(Image.fromarray(image))\n  image = preprocess_image(image[:, :, ::-1])\n  image, scale = resize_image(image)\n\n  bboxes, scores, labels = model.predict_on_batch(np.expand_dims(image, axis=0))\n  #bboxes_, scores_, labels_=bboxes[0], scores[0], labels[0]\n  # correct for image scale\n  bboxes \/= scale\n  predictions = []\n  for box, score, label in zip(bboxes[0], scores[0], labels[0]):\n      # scores are sorted so we can break\n      if score < THRES_SCORE:\n          continue\n      x_min = int(box[0])  \n      y_min = int(box[1])\n      x_max = int(box[2])\n      y_max = int(box[3])\n\n      bbox_width = x_max - x_min\n      bbox_height = y_max - y_min\n      predictions.append('{:.2f} {} {} {} {}'.format(score, x_min, y_min, bbox_width, bbox_height))\n\n  prediction_str = ' '.join(predictions)\n  sample_prediction_df['annotations'] = prediction_str\n  env.predict(sample_prediction_df)\n\nprint('Prediction:', sample_prediction_df)","0957eaf0":"sub_df = pd.read_csv('submission.csv')\nsub_df.head()","11efd35c":"<a id=\"1\"><\/a>\n# <p style=\"background-color:#000000;font-family:newtimeroman;color:#fff;font-size:120%;text-align:center;border-radius:20px 80px;\"> Train <\/p>\n### This notebook is a follow-up of [\ud83c\udf1f\ud83d\udc1fDetection using Keras-RetinaNet-Train Notebook](https:\/\/www.kaggle.com\/mahipalsingh\/detection-using-keras-retinanet-train)","86f3ca3a":"<a id=\"5\"><\/a>\n# <p style=\"background-color:#000000;font-family:newtimeroman;color:#fff;font-size:120%;text-align:center;border-radius:20px 80px;\"> Make Submission  <\/p>","63f0620e":"<a id=\"3\"><\/a>\n# <p style=\"background-color:#000000;font-family:newtimeroman;color:#fff;font-size:120%;text-align:center;border-radius:20px 80px;\"> Install RetinaNet Offline  <\/p>","beba79b1":"<a id=\"5\"><\/a>\n# <p style=\"background-color:#000000;font-family:newtimeroman;color:#fff;font-size:120%;text-align:center;border-radius:20px 80px;\"> Visualizing Results  <\/p>","87e72ad1":"<a id=\"5\"><\/a>\n# <p style=\"background-color:#000000;font-family:newtimeroman;color:#fff;font-size:120%;text-align:center;border-radius:20px 80px;\"> Reference  <\/p>\n\n## [Creating WHL file - Retinanet](https:\/\/www.kaggle.com\/akhileshdkapse\/creating-whl-file-retinanet)","1b98a837":"<a id=\"2\"><\/a>\n# <p style=\"background-color:#000000;font-family:newtimeroman;color:#fff;font-size:120%;text-align:center;border-radius:20px 80px;\"> Import Modules <\/p>","0b06bc16":"<p style=\"font-size:220%;text-align:center\"> If you find this notebook interesting, please do upvote :) <\/p>\n\n# <p style=\"text-align:center\"> <img src=\"https:\/\/media.giphy.com\/media\/3oEdva9BUHPIs2SkGk\/giphy.gif\"> <\/p>\n\n<p style=\"font-size:130%;text-align:center\"> Still lot of improvments is remaining!... \ud83d\udee0\u2699 <\/p>","88936799":"<a id=\"4\"><\/a>\n# <p style=\"background-color:#000000;font-family:newtimeroman;color:#fff;font-size:120%;text-align:center;border-radius:20px 80px;\"> Load Model  <\/p>"}}