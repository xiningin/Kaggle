{"cell_type":{"17c9e238":"code","272bd982":"code","3944cac3":"code","87cf6c9c":"code","7577a86a":"code","a0c67d39":"code","3a346230":"code","27ae3496":"code","f8bdf8b7":"code","fca1262b":"code","493d1a17":"code","1ceaffc0":"code","1070f3ca":"code","c19f7646":"code","5d4a05fa":"code","cdc77476":"code","bd98ab51":"code","a01a90e4":"markdown","92f00ccd":"markdown","73d2846c":"markdown","201ef85b":"markdown","41d80bb8":"markdown","fe6dab81":"markdown","19d2c6e3":"markdown","da60f1ce":"markdown","15d85042":"markdown","f3ecbe2b":"markdown","5d13a43d":"markdown","6eda9dd9":"markdown","41f3c8a1":"markdown","2120ce9b":"markdown","050f12d9":"markdown","1cf14426":"markdown","a5baa936":"markdown"},"source":{"17c9e238":"import numpy as np # linear algebra\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nprint(os.listdir(\"..\/input\"))\ntdata=pd.read_csv('..\/input\/train.csv')\nx_test=pd.read_csv('..\/input\/test.csv')\ny_test=pd.read_csv('..\/input\/gender_submission.csv')\ntrain=pd.DataFrame(tdata)\ntrain.info()","272bd982":"train.head()","3944cac3":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nle.fit(train['Sex'])\nSex=le.transform(train['Sex'])\nsex=pd.DataFrame(Sex,)\ntrain=pd.concat([train,sex],axis=1)\ntrain.columns=['PassengerId','Survived',  'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked','sex']\n","87cf6c9c":"train.columns","7577a86a":"le=LabelEncoder()\nle.fit(x_test['Sex'])\nSex=le.transform(x_test['Sex'])\nsex=pd.DataFrame(Sex)\nX_test=pd.concat([x_test,sex],axis=1)\nX_test.columns=['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked','sex']\nX_test=X_test.fillna(0)\nxtest=X_test[['Pclass','Age','SibSp','Parch','Fare','sex']]","a0c67d39":"data=train[['Survived','Pclass','Age','SibSp','Parch','Fare','sex']]\nxtr=train[['Pclass','Age','SibSp','Parch','Fare','sex']]\nytr=train['Survived']\nYtr=pd.DataFrame(ytr)","3a346230":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix,mean_squared_error,mean_absolute_error\nmodel=DecisionTreeClassifier()\nmodel.fit(xtr,Ytr)\npredict=model.predict(xtest)\npredict","27ae3496":"Ytest=y_test['Survived']\nYtest.head()","f8bdf8b7":"print(\"accuracy_score:\", accuracy_score(Ytest,predict))","fca1262b":"confusion_matrix(Ytest,predict)","493d1a17":"from sklearn.ensemble import ExtraTreesClassifier\nmodel=ExtraTreesClassifier()\nmodel.fit(xtr,Ytr)\npredict=model.predict(xtest)\naccuracy_score(Ytest,predict)\nprint(\"accuracy_score:\", accuracy_score(Ytest,predict))","1ceaffc0":"from sklearn.ensemble import BaggingClassifier\nmodel=BaggingClassifier()\nmodel.fit(xtr,Ytr)\npredict=model.predict(xtest)\naccuracy_score(Ytest,predict)\nprint(\"accuracy_score:\", accuracy_score(Ytest,predict))","1070f3ca":"from sklearn.ensemble import GradientBoostingClassifier\nmodel=GradientBoostingClassifier()\nmodel.fit(xtr,Ytr)\npredict=model.predict(xtest)\naccuracy_score(Ytest,predict)\nprint(\"accuracy_score:\", accuracy_score(Ytest,predict))","c19f7646":"from sklearn.ensemble import AdaBoostClassifier\nmodel=AdaBoostClassifier()\nmodel.fit(xtr,Ytr)\npredict1=model.predict(xtest)\naccuracy_score(Ytest,predict)\nprint(\"accuracy_score:\", accuracy_score(Ytest,predict))","5d4a05fa":"confusion_matrix(Ytest,predict1)","cdc77476":"submission = pd.DataFrame({\n        \"PassengerId\": x_test[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('submission.csv', index=False)","bd98ab51":"filename = 'submission.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","a01a90e4":"Now PassengerId, Name, Ticket, Cabin and Embarked will not make much impact on survival rate. So We will not take those columns into consideration.\nLets define our testing set as below.","92f00ccd":"Now Lets train the model on above data and lets see what is the accuracy.","73d2846c":"Wowww this is really nice accuracy score.\n\nI never expected such a geat score.\nLets check with array,","201ef85b":"Lets check my accuracy score.","41d80bb8":"Accuracy score nearly to 93%. We will try to optimise it in the upcoming versions.\n\nFor now Lets submit the result.","fe6dab81":"Lets apply other classification method and lets see the results","19d2c6e3":"I can see slight improvement but lets apply other classifiers.","da60f1ce":"This is also much better than previous one but not upto the expection.","15d85042":"Thank you for your time.\n\n**Let me know If you have any suggestion.\n\nPlease upvote if you like.**","f3ecbe2b":"Lets see how my datatable looks like.","5d13a43d":"We have to deal with test values so Lets do the same process what we did for training set.","6eda9dd9":"Lets first encode the data for sex using LabelEncoder.\n\nThen, Fill the empty values with Zero using Fillna.","41f3c8a1":"Lets evaluate our test data.","2120ce9b":"Lets take a look at data.","050f12d9":"I can see slight improvement but lets apply other classifiers.","1cf14426":" which is not bad. But I want more.","a5baa936":"Lets take look at columns."}}