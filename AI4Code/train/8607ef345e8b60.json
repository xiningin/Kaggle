{"cell_type":{"bb8b7845":"code","63f9cbd7":"code","638775c0":"code","678f425a":"code","a735219e":"code","0aac7eaa":"code","e5773c23":"code","6444a9e3":"code","98804f6f":"code","35a923bf":"code","2f9ba2d6":"code","5704d0ff":"code","f52851ba":"code","361078f1":"code","0d0f445a":"code","9c344428":"code","ccf0aae4":"code","2f8ac910":"code","14699396":"code","afe5f414":"code","d6026c03":"code","f427d768":"code","31ed75bb":"code","24eb96e4":"code","3f5b7564":"code","c43f8983":"code","e8ea729f":"code","17f094d0":"code","d8d97de8":"code","db1581d4":"code","8d5caecf":"code","f397ee97":"code","7e30be78":"code","e28fb43c":"code","e836c848":"code","8cba5d5c":"code","bdb2a5ac":"code","2ce19b4e":"code","00e74e4e":"code","ed4376c8":"code","78d7d509":"code","240d756d":"code","930bd97c":"code","add86d3b":"code","0aac8c68":"code","3d894573":"code","fe85a413":"code","49655236":"code","0b046b82":"code","b3bd7ce3":"code","7b57e0a8":"code","e573da96":"code","0630df64":"code","2da1d643":"code","584d7fc9":"code","0ed88c37":"code","9444e93f":"code","ba797c56":"code","faa6140a":"code","9f835bff":"code","4acae04e":"code","29241c57":"code","eebd3d53":"code","c2ec6892":"code","ac0c0d3c":"code","764bcf16":"code","4058cc49":"code","1a65fa5f":"code","5777362e":"code","83ef4b31":"code","48b35819":"code","4938737b":"code","bb3ad878":"code","0083d28a":"code","786823fc":"code","f548de0e":"code","af62ec50":"code","43b042eb":"code","0c1fe345":"code","ece6fc7c":"code","3c618dc6":"code","3ddb6816":"code","7612e6d1":"code","b4dae841":"code","9ff0aac0":"code","4c461f77":"code","6db05889":"code","22384563":"code","9f10bd77":"code","6a49358c":"code","b5cbdfab":"code","c9454ea9":"code","53bd1acd":"code","1a3fef1a":"code","61a8f793":"code","6768c1ef":"code","485e34d6":"code","3a7a6100":"markdown","77634483":"markdown","1d3bceed":"markdown","aad01515":"markdown","9ce9c07f":"markdown","e875fc49":"markdown","9e733609":"markdown","2abf63f1":"markdown","db53d9bd":"markdown","697c3363":"markdown","90d9bda1":"markdown","57ed2792":"markdown","00c0a20c":"markdown","042abc53":"markdown","289f5681":"markdown","4f362bd3":"markdown","fe6a3141":"markdown","2583efd7":"markdown","0047f358":"markdown","778cfe18":"markdown","f4e884a2":"markdown","bf3a037b":"markdown"},"source":{"bb8b7845":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","63f9cbd7":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","638775c0":"train.head()","678f425a":"test.head()","a735219e":"train.shape\n","0aac7eaa":"test.shape","e5773c23":"train.info()","6444a9e3":"test.info()","98804f6f":"train.isnull().sum()","35a923bf":"test.isnull().sum()","2f9ba2d6":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()","5704d0ff":"def barChar(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived'] == 0][feature].value_counts()\n    df = pd.DataFrame([survived, dead])\n    df.index = ['Survived', 'Dead']\n    df.plot(kind = 'bar', stacked=True, figsize=(10,5))","f52851ba":"barChar('Sex')","361078f1":"barChar('Pclass')","0d0f445a":"barChar('SibSp')","9c344428":"barChar('Parch')","ccf0aae4":"train.isnull()","2f8ac910":"sns.heatmap(train.isnull(),yticklabels=False, cbar=False,cmap='viridis')","14699396":"#0----> not survived\n# 1---> survived\n\nsns.set_style('whitegrid')\nsns.countplot(x='Survived', data=train)","afe5f414":"#see the distribution of age\n#it helps us to see the avg age of people in titanic\nsns.distplot(train['Age'].dropna(), kde=False, color='blue',bins=40)","d6026c03":"#countplot of sibling \nsns.countplot(x='SibSp', data=train)","f427d768":"#average fare of ticket\ntrain['Fare'].hist(color='red',bins=40)","31ed75bb":"train_test_data = [train, test]\n\nfor dataset in train_test_data:\n    dataset['Title']=dataset['Name'].str.extract('([A-Za-z]+)\\.', expand=False)","24eb96e4":"train['Title'].value_counts()","3f5b7564":"test['Title'].value_counts()","c43f8983":"plt.figure(figsize=(12,7))\nsns.boxplot(x='Pclass', y='Age', data = train, palette='winter')","e8ea729f":"def inputAge(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n        \n    else:\n        return Age","17f094d0":"def embarkNull(cols):\n    emb = cols\n    if pd.isnull(emb):\n        return 'S'\n    \n    else:\n        return emb","d8d97de8":"# now apply this function\ntrain['Age'] = train[['Age','Pclass']].apply(inputAge,axis=1)","db1581d4":"train['Embarked'] = train['Embarked'].apply(embarkNull)","8d5caecf":"#again check heat map\nsns.heatmap(train.isnull(),yticklabels=False, cbar=False,cmap='viridis')","f397ee97":"#again check heat map\nsns.heatmap(test.isnull(),yticklabels=False, cbar=False,cmap='viridis')","7e30be78":"train.isnull().sum()","e28fb43c":"test.isnull().sum()","e836c848":"plt.figure(figsize=(12,7))\nsns.boxplot(x='Pclass', y='Age', data = test, palette='winter')","8cba5d5c":"def inputAge(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 41\n        elif Pclass == 2:\n            return 27\n        else:\n            return 24\n        \n    else:\n        return Age","bdb2a5ac":"def embarkNull(cols):\n    emb = cols\n    if pd.isnull(emb):\n        return 'S'\n    \n    else:\n        return emb","2ce19b4e":"# now apply this function\ntest['Age'] = test[['Age','Pclass']].apply(inputAge,axis=1)\n\ntest['Embarked'] = test['Embarked'].apply(embarkNull)","00e74e4e":"#again check heat map\nsns.heatmap(test.isnull(),yticklabels=False, cbar=False,cmap='viridis')","ed4376c8":"train.head()","78d7d509":"test.head()","240d756d":"train.drop('Cabin', axis = 1, inplace = True)\ntest.drop('Cabin', axis = 1, inplace = True)","930bd97c":"train.head()","add86d3b":"test.head()","0aac8c68":"sns.heatmap(train.isnull(),yticklabels=False, cbar=False,cmap='viridis')","3d894573":"sns.heatmap(test.isnull(),yticklabels=False, cbar=False,cmap='viridis')","fe85a413":"#fill missing fare\ntrain['Fare'].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"),inplace=True)\ntest['Fare'].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"),inplace=True)","49655236":"sns.heatmap(test.isnull(),yticklabels=False, cbar=False,cmap='viridis')","0b046b82":"train.isnull().sum()","b3bd7ce3":"test.isnull().sum()","7b57e0a8":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\n \nplt.show()\n","e573da96":"sns.factorplot('Sex', 'Survived', hue='Pclass', size=4, aspect=2, data=train)","0630df64":"plt.figure(figsize=(15,6))\nsns.heatmap(train.drop('PassengerId',axis=1).corr(), vmax=0.6, square=True, annot=True)","2da1d643":"for dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map({'female':1, 'male':0}).astype(int)","584d7fc9":"train.head()","0ed88c37":"test.head()","9444e93f":"pd.crosstab(train['Title'],train['Sex'])","ba797c56":"for dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col', \\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    \ntrain[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","faa6140a":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Other\": 5}\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)","9f835bff":"train.head()","4acae04e":"test.head()","29241c57":"for dataset in train_test_data:\n    dataset.loc[dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <=32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] >32) & (dataset['Age'] <= 48), 'Age'] =2\n    dataset.loc[(dataset['Age'] >48) & (dataset['Age'] <= 64), 'Age'] =3\n    dataset.loc[dataset['Age'] >64, 'Age'] =4","eebd3d53":"train.head()","c2ec6892":"test.head()","ac0c0d3c":"train['FareBand'] = pd.qcut(train['Fare'], 4)\nprint (train[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean())","764bcf16":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)","4058cc49":"train.head()","1a65fa5f":"train.Embarked.unique()\n","5777362e":"train.Embarked.value_counts()","83ef4b31":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","48b35819":"for dataset in train_test_data:\n    #print(dataset.Embarked.unique())\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)","4938737b":"train.head()","bb3ad878":"for dataset in train_test_data:\n    dataset['FamilySize'] = dataset['SibSp'] +  dataset['Parch'] + 1\n\nprint (train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean())","0083d28a":"for dataset in train_test_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n    \nprint (train[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean())\n","786823fc":"train.head(2)","f548de0e":"train.columns","af62ec50":"test.columns","43b042eb":"features_drop = ['Name', 'SibSp', 'Parch', 'Ticket', 'FamilySize']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId', 'FareBand'], axis=1)","0c1fe345":"train.head()\n","ece6fc7c":"test.head()","3c618dc6":"x_train = train.drop('Survived', axis = 1)\ny_train = train['Survived']\n\nx_test = test.drop('PassengerId', axis=1).copy()\nx_train.shape, y_train.shape, x_test.shape","3ddb6816":"#importing Classifier Modules\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier","7612e6d1":"x_train.info()","b4dae841":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","9ff0aac0":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, x_train, y_train, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)\n","4c461f77":"clf.fit(x_train, y_train)\ny_pred = clf.predict(x_test)\naccKNN = round(clf.score(x_train, y_train)*100, 2)\naccKNN","6db05889":"clf = RandomForestClassifier(n_estimators=15)\nscoring = 'accuracy'\nscore = cross_val_score(clf, x_train, y_train, cv = k_fold, n_jobs=1, scoring=scoring)\nprint(score)","22384563":"acc_RForest = round(np.mean(score)*100,2)","9f10bd77":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, x_train, y_train, cv = k_fold, n_jobs=1, scoring=scoring)\nprint(score)","6a49358c":"acc_NB = round(np.mean(score)*100,2)","b5cbdfab":"clf = SVC()\nclf.fit(x_train, y_train)\ny_pred_svc = clf.predict(x_test)\nacc_svc = round(clf.score(x_train, y_train) * 100, 2)\nprint (acc_svc)","c9454ea9":"clf = DecisionTreeClassifier()\nclf.fit(x_train, y_train)\ny_predDTree = clf.predict(x_test)\naccDTree = round(clf.score(x_train,y_train) *100, 2)\nprint(accDTree)","53bd1acd":"clf = Perceptron(max_iter = 5, tol=None)\nclf.fit(x_train,y_train)\ny_predPercp = clf.predict(x_test)\naccPercp = round(clf.score(x_train, y_train) * 100, 2)\nprint(accPercp)","1a3fef1a":"models = pd.DataFrame({\n    'Model':['KNN', 'Random Forest', 'Naive Bayes', 'SVM', 'Decision Tree','Perceptron'],\n    'Score' : [accKNN, acc_RForest, acc_NB, acc_svc, accDTree, accPercp]\n})\nmodels.sort_values(by='Score', ascending=False)","61a8f793":"test.head()","6768c1ef":"submission = pd.DataFrame({\n    \"PassengerId\" : test[\"PassengerId\"],\n    \"Survived\" : y_predDTree\n})","485e34d6":"submission.to_csv('myResult.csv')","3a7a6100":"## Decision Tree","77634483":"Convert Categorical Feature","1d3bceed":"Our Age Column is all full","aad01515":"# Feature Engineering","9ce9c07f":"# Make the Model","e875fc49":"# Feature Selection","9e733609":"## Preceptron","2abf63f1":"# References\n\n* Github\n* Titanic Beginnner Guide","db53d9bd":"for test data set","697c3363":"## Naive Bayes","90d9bda1":"## Age Feature","57ed2792":"## Random Forest","00c0a20c":"women survived more than men","042abc53":"we fill the vacant space of age with average age","289f5681":"## CRoss Validation","4f362bd3":"## Drop the Cabin values","fe6a3141":"### CHeck average age","2583efd7":"## KNN","0047f358":"## Bar Chart for Categorical Features ","778cfe18":"convert categroical title into numeric form","f4e884a2":"## SVM","bf3a037b":"# Compare Model"}}