{"cell_type":{"e24df2ac":"code","ab1cff77":"code","13e9ec75":"code","a29105b5":"code","351cc575":"code","ad9b5fb6":"code","7cd7e751":"code","0a92148f":"code","ae8af7e4":"code","10d288e3":"code","4d1fe98f":"code","9424fa47":"code","93b5ec59":"code","23118585":"code","adaf8000":"code","5b7f433a":"code","4f2bf836":"markdown","24185b1d":"markdown","95de84dd":"markdown","94502d34":"markdown","d860ed3c":"markdown","1bf70e20":"markdown"},"source":{"e24df2ac":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime\nfrom datetime import date\ndf_national = pd.read_csv( \"..\/input\/covid19-belgium\/covid19-belgium.csv\")\ndf_nl = pd.read_csv( \"..\/input\/covid19-belgium\/covid19-netherlands.csv\",  parse_dates=['Datum'])\ndf_italy = pd.read_csv( \"..\/input\/coronavirusdataset-france\/contagioitalia.csv\", parse_dates=['date'])\n","ab1cff77":"#import dateparser\n#dateparser.parse(df_national['date'], settings={'DATE_ORDER': 'DMY'})\n\ndf_national['date'] = pd.to_datetime(df_national['date'], format = \"%Y\/%m\/%d\")","13e9ec75":"df_national.rename(columns={'cumul_cases':'cases'},inplace=True) \ndf_national.tail()","a29105b5":"latest_date = max(df_national['date'])\nprint(latest_date)\nnational_latest = df_national[df_national['date'] == latest_date]\n\n","351cc575":"df_nl = df_nl[df_nl['Type'] == 'Totaal']\ndf_nl.rename(columns={'Aantal':'cases', 'Datum':'date'},inplace=True)\ndf_nl = df_nl.reset_index()\ndf_nl= df_nl[['date','cases']]\n","ad9b5fb6":"y = df_national['cases'].values # transform the column to differentiate into a numpy array\n\nderiv_y = np.gradient(y) # now we can get the derivative as a new numpy array\n\noutput = np.transpose(deriv_y)\n#now add the numpy array to our dataframe\ndf_national['ContagionRate'] = pd.Series(output)\ndf_national.to_csv('contagiobelgio.csv')\n","7cd7e751":"df_national['%hospitalized'] = (df_national['hospitalized']\/df_national['cases'])*100\ndf_national['%dead'] = (df_national['cumul_deceased']\/df_national['cases'])*100\ndf_national['%released'] = (df_national['cumul_released']\/df_national['cases'])*100","0a92148f":"#national data fit\nfrom scipy.optimize import curve_fit\nfrom numpy import exp, linspace, random\nfrom math import pi\n# build an extrapolated gaussian based on italian data fit\ndef gaussian(x, amp, cen, wid):\n    \"\"\"1-d gaussian: gaussian(x, amp, cen, wid)\"\"\"\n    return (amp \/ (np.sqrt(2*pi) * wid)) * exp(-(x-cen)**2 \/ (2*wid**2)) \ndef gauss_function(X, amp, cen, sigma):\n    return amp*exp(-(X-cen)**2\/(2*sigma**2))\n\n#belgian data fit\nx1 = df_national.index.values\ny1 = (df_national['ContagionRate'].values)\n\ninit_vals1 = [2000, 30, 200]  # for [amp, cen, wid]\nbest_vals1, covar1 = curve_fit(gaussian, x1, y1, p0=init_vals1)\nprint('best_vals1: {}'.format(best_vals1))","ae8af7e4":"# extrapolated gaussian\n\nx_e = np.arange(0, 70)\ntimerange = pd.date_range(start='3\/1\/2020', periods=70)\ny_e = gauss_function(x_e, 2500,best_vals1[1],best_vals1[2])\n#plt.plot(timerange,y_e)\n#plt.xticks(rotation=90)","10d288e3":"dummy = np.zeros(70)\nplt.figure(figsize= (12,12))\nplt.subplot(321)\nplt.plot(df_national['date'],df_national['cases'], color = 'c') #trend cases\nplt.plot(timerange,dummy, ':', color = 'w') \nplt.title('Cases over time')\nplt.ylabel('number of cases')\nplt.xticks(df_national['date'],\" \")\n\nplt.subplot(323)\nplt.plot(timerange,y_e, '--', color = 'orange') \nplt.plot(df_national['date'],df_national['daily_cases'], color = 'r') \nplt.title('Confirmed cases rate')\nplt.ylabel('Rate\/daily cases')\nplt.xticks(rotation=90)\n\nplt.subplot(322)\nplt.plot(df_national['date'],df_national['%hospitalized'], color = 'b') #trend cases\nplt.title('Hospitalized over time')\nplt.ylabel('Hospitalized(%)')\nplt.xticks(df_national['date'],\" \")\n\n\nplt.subplot(324)\nplt.plot(df_national['date'],df_national['%released'], color = 'g', label = 'Released') \nplt.plot(df_national['date'],df_national['%dead'], color = 'k', label = 'Dead') \nplt.title('Mortality and recovery')\nplt.ylabel('Percentages over total cases')\nplt.legend()\nplt.xticks(rotation=90)\nplt.suptitle('Covid national stats - Belgium')\nplt.show()","4d1fe98f":"population_italy = 60488373\npopulation_belgium = 11585253\npopulation_netherlands = 17126567\npopulratio = population_italy\/population_belgium\npopulratio_nl = population_italy\/population_netherlands","9424fa47":"y_it = df_italy['TotalPositiveCases'].values # transform the column to differentiate into a numpy array\n\nderiv_y_it = np.gradient(y_it) # now we can get the derivative as a new numpy array\n#np.savetxt(\"contagioitalia.csv\", deriv_y, delimiter=\",\")\noutput_it = np.transpose(deriv_y_it)\n#now add the numpy array to our dataframe\ndf_italy['ContagionRate'] = pd.Series(output_it)\n\nx = df_italy.index.values\ny = df_italy['ContagionRate'].values\n\ninit_vals = [40, 35, 60]  # for [amp, cen, wid]\nbest_vals, covar = curve_fit(gaussian, x, y, p0=init_vals)\nprint('best_vals: {}'.format(best_vals))","93b5ec59":"#belgian data fit normalized to population ratio Italy\/Belgium\nx1 = df_national.index.values\ny1 = (df_national['ContagionRate'].values)*populratio\n\ninit_vals1 = [8000, 33, 200]  # for [amp, cen, wid]\nbest_vals1, covar1 = curve_fit(gaussian, x1, y1, p0=init_vals1)\nprint('best_vals1: {}'.format(best_vals1))","23118585":"# extrapolated gaussian\ntimeframe_days = 80\nx_it= np.arange(0, timeframe_days)\ny_it = gauss_function(x_it, 6000,33,best_vals[2])\ny_be = gauss_function(x_it, 8000,best_vals1[1],best_vals1[2])\nplt.plot(x_it, y_it, label = 'Model Italy')\nplt.plot(x_it, y_be, label = 'Model Belgium')\nplt.xlabel('Days', fontsize=14)\nplt.ylabel('Rates (a.u.)', fontsize=14)\nplt.legend()\nplt.title('Modelled curves for Covid-19 spread over time')","adaf8000":"plt.figure(figsize=(12, 10))\nplt.subplot(221)\nplt.plot(df_national.index,df_national['cases'], label = 'Belgium') #trend cases\nplt.plot(df_italy.index,df_italy['TotalPositiveCases'], label = 'Italy') #trend cases\nplt.plot(df_nl.index,df_nl['cases'], label = 'Netherlands') #trend cases\nplt.title('International comparison of cases growth', fontsize = 20)\nplt.xlabel('Days', fontsize=14)\nplt.ylabel('Num. cases', fontsize=14)\n\n\nplt.subplot(222)\nplt.plot(df_national.index,(df_national['cases']\/population_belgium)*100, label = 'Belgium') #trend cases\nplt.plot(df_italy.index,(df_italy['TotalPositiveCases']\/population_italy)*100, label = 'Italy') #trend cases\nplt.plot(df_nl.index,(df_nl['cases']\/population_netherlands)*100, label = 'Netherlands') #trend cases\nplt.xlabel('Days', fontsize=14)\nplt.yscale('log')\nplt.ylabel('Log %cases over population total', fontsize=14)\n\n\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)","5b7f433a":"plt.figure(figsize= (6,6))\n#plot the fit results\n\n#plt.plot(X1,gauss_function(X1, *popt1), ':', label = 'Italy-modelled gaussian')\n\n#confront the given data\nplt.plot(df_national.index,df_national['ContagionRate']*(populratio), label = 'Belgium (normalized)') #trend cases\nplt.plot(df_italy.index,df_italy['ContagionRate'],color='g', label = 'Italy') #trend cases\n# with models\nplt.plot(x_it, y_it, ':',color='r', label = 'Italy-modelled gaussian')\nplt.plot(x_it, y_be, ':',color='orange', label = 'Belgium-modelled gaussian')\n\n# set timeframes\nplt.axvline(x=33 , color='k', linewidth = 0.5)\nplt.axvline(x=59, ymin=0.05, ymax=0.2, color='k', linewidth = 0.5)\nplt.text(32, 9000, ' Italy: 2020-03-27\\n Belgium: 2020-04-03')\nplt.text(49, 2000, ' Italy: 2020-04-25\\n Belgium: 2020-05-02')\nplt.title('Cases over time')\nplt.ylabel('Spread rate')\n\nplt.xticks(rotation=90)\nplt.xlim(0, 80)\nplt.ylabel('Contagion rate (first derivative of cases count)', fontsize=14)\nplt.xlabel('Days', fontsize = 14)\nplt.legend\n\nplt.title('International comparison of spread rate', fontsize = 20)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)","4f2bf836":"## Rate calculated by differentiation","24185b1d":"## Plot of the rate of increase fitted by the gaussian model above","95de84dd":"## International comparison Belgium-Italy","94502d34":"## 1. Virus spread at a national level","d860ed3c":"## Estimation : Gaussian model","1bf70e20":"<h1>Tracking the spread of 2019 Coronavirus in Belgium<\/h1>\n\n# Introduction\n\nThis are statistics for the spread in Belgium of 2019-nCoV, a highly contagious coronavirus that originated from Wuhan (Hubei province), Mainland China. Data are compared to those from Italy and modelled according to gaussian fits\n\n\n"}}