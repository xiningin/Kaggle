{"cell_type":{"667aca82":"code","aeb5f83e":"code","789edf67":"code","c6439a8e":"code","54195c90":"code","f61d3996":"code","c0357f26":"code","e1b3c305":"code","0c6042f3":"code","03e02197":"code","26416655":"code","cb13c3b8":"code","524e403a":"code","e9f47ce5":"code","cb07b365":"code","c7bf80c8":"code","fbad6587":"markdown","d142f6ba":"markdown","f92cfa13":"markdown","d04b5808":"markdown"},"source":{"667aca82":"# Import Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-pastel')\nplt.rcParams['figure.dpi'] = 120\n","aeb5f83e":"dataset = pd.read_csv('..\/input\/titanic-dataset-from-kaggle\/train.csv')\ndataset.head()\n","789edf67":"dataset.drop(labels=['Name', 'Ticket'],\n             axis=1,\n             inplace=True)\ndataset.head()\n\n","c6439a8e":"# Separate the data into two subsets to see if there is some difference in distr\n# from survived to non survived\n\nsurvivedSubset = dataset[dataset['Survived'] == 1]\nnotSurvivedSubset = dataset[dataset['Survived'] == 0]\n\ntotalSurvived = len(survivedSubset)\ntotalNotSurvived = len(notSurvivedSubset)\n\nprint(\n    f'Total Survived: {totalSurvived}\\nTotal Not Survived: {totalNotSurvived}')\nprint(f'Ratio NS\/S: {totalNotSurvived \/ totalSurvived :.2f}')\n\n","54195c90":"for column in dataset.columns.values:\n    hasMissingValues = dataset[column].isnull().values.any()\n    if hasMissingValues:\n        print(f'Column: {column} has missing values')\n","f61d3996":"\n\ndef drawPieChart(labels,\n                 count,\n                 title=' '):\n\n    # Pie chart, where the slices will be ordered and plotted counter-clockwise:\n    _, ax1 = plt.subplots()\n    ax1.set_title(title)\n    explode = [0.1 for i in labels]\n    ax1.pie(count, labels=labels,\n            autopct=lambda perc: f'{perc:.2f}% ({int(perc * sum(count)\/100)})',\n            shadow=True, explode=explode,\n            pctdistance=0.7, startangle=90)\n    # Equal aspect ratio ensures that pie is drawn as a circle.\n    ax1.axis('equal')\n\n    plt.show()\n\n\ndef getFrequenciesInCategoricalColumn(dataframe, columnName):\n    labels = dataframe[columnName].unique()\n    # print(f'Antes: {labels}, {list(map(lambda x: x is np.nan,labels))}')\n    labels = sorted(labels, key=lambda x: '0' if x is np.nan else x)\n    # print(labels)\n\n    def sumatoryFunction(columnContent):\n        if columnContent is np.nan:\n            return sum(dataframe[columnName].isnull())\n        return sum(dataframe[columnName] == columnContent)\n\n    count = list(map(sumatoryFunction,\n                     labels))\n    return labels, count\n\n","c0357f26":"columnName = 'Survived'\nlabels, count = getFrequenciesInCategoricalColumn(dataset, columnName)\ndrawPieChart(labels, count, columnName)\n\n","e1b3c305":"columnName = 'Sex'\nlabels, count = getFrequenciesInCategoricalColumn(dataset, columnName)\ndrawPieChart(labels, count, columnName)\n\n","0c6042f3":"columnName = 'Embarked'\nlabels, count = getFrequenciesInCategoricalColumn(dataset, columnName)\ndrawPieChart(labels, count, columnName)\n\n","03e02197":"columnName = 'Survived'\ndatasetFemale = dataset[dataset['Sex'] == 'female']\ndatasetMale = dataset[dataset['Sex'] == 'male']\n\nlabelsFemale, countFemale = getFrequenciesInCategoricalColumn(\n    datasetFemale, columnName)\nlabelsFemale = list(\n    map(lambda x: 'Female Survived' if x else 'Female Not Survived', labelsFemale))\n\nlabelsMale, countMale = getFrequenciesInCategoricalColumn(\n    datasetMale, columnName)\nlabelsMale = list(\n    map(lambda x: 'Male Survived' if x else 'Male Not Survived', labelsMale))\n\ndrawPieChart(list(labelsFemale) + list(labelsMale),\n             countFemale + countMale, columnName)\n\n","26416655":"# Does the gender influences on surviability?\n\nfig, ax = plt.subplots()\n\nwidth = 0.7\nind = np.arange(2)    # the x locations for the groups\n\np1 = ax.bar(ind, countMale, width, label='Men')\np2 = ax.bar(ind, countFemale, width,\n            bottom=countMale, label='Women')\n\nax.axhline(0, color='grey', linewidth=0.8)\nax.set_ylabel('Quantity')\nax.set_title('Gender Surviability')\nax.set_xticks(ind)\nax.set_xticklabels(('Not Survived', 'Survived'))\nax.legend()\n\n# Label with label_type 'center' instead of the default 'edge'\nax.bar_label(p1, label_type='center')\nax.bar_label(p2, label_type='center')\nax.bar_label(p2)\n\nplt.show()\n\n","cb13c3b8":"# Lets see the distributions between survived and not survived\n# we will use both boxplot and violin plot to see the pros and cons\n# in each of them.\n# TLDR: Violin shows the distr whereas boxplot only shows quartiles.\n\nlabels = ['Survived', 'Not Survived']\n\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(18, 8))\n\n# rectangular box plot\nbplot1 = ax1.boxplot([survivedSubset['Age'].dropna(axis=0).values,\n                      notSurvivedSubset['Age'].dropna(axis=0).values],\n                     vert=True,  # vertical box alignment\n                     patch_artist=True,  # fill with color\n                     labels=labels)  # will be used to label x-ticks\nax1.set_title('Rectangular box plot')\n\nbplot2 = ax2.violinplot([survivedSubset['Age'].dropna(axis=0).values,\n                         notSurvivedSubset['Age'].dropna(axis=0).values])\nax2.set_title('Violin plot')\n\nax2.set_xticks([1, 2])\nax2.set_xticklabels(labels)\n\n# fill with colors\ncolors = ['pink', 'lightblue']\n\nfor patch, color in zip(bplot1['boxes'], colors):\n    patch.set_facecolor(color)\n\n# adding horizontal grid lines\n\nax1.yaxis.grid(True)\nax1.set_xlabel('Survived')\nax1.set_ylabel('Age')\n\nplt.show()\n\n","524e403a":"# Lets look at some histograms to see if something  appears looking at the fare\n\nbins = np.linspace(0, 100, 10)\n\n# plt.hist(survivedSubset['Age'].dropna(axis=0).values,\n#          bins, alpha=0.5, label='Survived')\nplt.hist([notSurvivedSubset['Age'].dropna(axis=0).values,\n          survivedSubset['Age'].dropna(axis=0).values],\n         bins,\n         alpha=0.5,\n         histtype='barstacked',\n         stacked=True,\n         label=['Not Survived', 'Survived'])\nplt.legend(loc='upper right')\nplt.ylabel('N\u00ba People')\nplt.xlabel('Age')\nplt.show()\n\nhistogramMin = min(dataset['Fare'].values)\nhistogramMax = max(dataset['Fare'].values)\n\nbins = np.linspace(histogramMin, histogramMax, 10)\n# plt.hist(survivedSubset['Fare'].dropna(axis=0).values,\n#          bins, alpha=0.5, label='Survived',\n#          histtype='barstacked')\nplt.hist([notSurvivedSubset['Fare'].dropna(axis=0).values,\n          survivedSubset['Fare'].dropna(axis=0).values],\n         bins,\n         alpha=0.5,\n         label=['Not Survived', 'Survived'],\n         histtype='barstacked',\n         stacked=True)\nplt.legend(loc='upper right')\nplt.ylabel('N\u00ba People')\nplt.xlabel('Fare')\nplt.show()\n\n","e9f47ce5":"# Lets see if there is a difference in surviability given different classes\n\nfig, ax = plt.subplots()\n\nwidth = 0.7\nind = np.arange(3)    # the x locations for the groups\n\nsurvivedClass = list(\n    map(lambda x: sum(survivedSubset['Pclass'] == x), [1, 2, 3]))\nnotSurvivedClass = list(\n    map(lambda x: sum(notSurvivedSubset['Pclass'] == x), [1, 2, 3]))\n\np1 = ax.bar(ind, survivedClass, width, label='Survived')\np2 = ax.bar(ind, notSurvivedClass, width,\n            bottom=survivedClass, label='Not Survived')\n\nax.axhline(0, color='grey', linewidth=0.8)\nax.set_ylabel('Quantity')\nax.set_title('pClass Surviability')\nax.set_xticks(ind)\nax.set_xticklabels(('Class 1', 'Class 2', 'Class 3'))\nax.legend()\n\n# Label with label_type 'center' instead of the default 'edge'\n# To create the percentage labels whe use list comprehension\n# in a zipped list to compute the percentage of survivors\nlabelsSurvived = [\n    round((perc[0]\/sum(perc))*100, 2) for perc in zip(survivedClass, notSurvivedClass)]\n# the percentage not survived is 100 - percentage survived\nlabelsNotSurvived = list(map(lambda x: f'{100 - x:.2f}%', labelsSurvived))\n# converts to string\nlabelsSurvived = list(map(lambda x: f'{x}%', labelsSurvived))\n\nax.bar_label(p1, labels=labelsSurvived, label_type='center')\nax.bar_label(p2, labels=labelsNotSurvived, label_type='center')\nax.bar_label(p2)\n\nplt.show()\n","cb07b365":"datasetAges = dataset.dropna(axis=0, subset=['Age'])\ndatasetAges = datasetAges.assign(AgeGroup=datasetAges['Age'].apply(\n    lambda x: x \/\/ 10 if x \/\/ 10 <= 6 else 6))\n# There is a trick here, since Survived is a boolean attribute\n# the Survived mean is the same as Rate of Survival (do the math smarty pants!)\nageGroup = datasetAges.groupby(['AgeGroup']).aggregate([np.mean, np.var])\n\n","c7bf80c8":"\nfig, ax = plt.subplots()\nsurvivedRatio = ageGroup['Survived']['mean'].values\nax.scatter(ageGroup.index.values,\n           survivedRatio)\nax.set_xticks(ageGroup.index.values)\n\nax.set_title('Surviability by Age Group')\nax.set_ylim((0, 1))\nax.set_ylabel('Survival Rate')\nax.set_xlabel('Age Group')\n\nax.set_xticklabels(['0 - 10', '10 - 20', '20 - 30',\n                   '30 - 40', '40 - 50', '50 -60', '60+'])\nfor i in range(len(survivedRatio)):\n    xyAnnotation = list(zip(ageGroup.index.values, survivedRatio))\n# The magic number 0.03 serves as a offset so the annotation wont\n# be in the same place of the dot in the graph\n    xyAnnotationPlace = list(\n        map(lambda x: (x[0]+0.03, x[1]+0.03), xyAnnotation))\n    ax.annotate(f'{survivedRatio[i]*100:.2f}%',\n                xy=xyAnnotation[i],\n                xytext=xyAnnotationPlace[i])\n# (ageGroup['Survived']['mean'].values)\n\nfig.show()\n","fbad6587":" # Some helper functions\n Lets define two auxiliary functions to help us plot some pie charts\n to see how are the how many observations on the dataset are categorized according to\n the attributes ** Sex ** and **Embarked** as well as the ** Survived ** target.","d142f6ba":"  # Some Terminology\n  In our *dataset* we distinguish between the variables that gives us information that we are going to use\n  in the estimation and we call them *features*, the variable we are trying to estimate is called target.\n\n  In formal machine learning books, you will often see the dataset expressed as a set $D$ composed of\n  $n$ tuples $(\\textbf{x},y)$ where $\\textbf{x}$ is the feature vector (or predictors) and y is the target variable.\n\n  In this specific problem, **Survived** is the attribute that is our *target* value, all the other attributes from the\n  dataset are *features*. However we don't need (and in this case we should not) use all the avaliable attributes as features for\n  our model.","f92cfa13":" # Feature Engineering + DataVis\n By combining feature engineering to datavis we can see if different age groups have different survival rates.\n We compute the age group by doing an integer division of age by 10, this way we categorize 0-9 years passenger in group 0, 10-19 years in group 1, and so on.\n\n Then we use the **groupby** function in pandas (similar to the *SQL* groupby) and we aggregate values with the np.mean function;","d04b5808":"  # Lets load the data\n  Okay, we got our libraries loaded, now it is time to use pandas to read\n  the train.csv file that is located in the data folder.\n\n  Pandas read_csv command is able to read and parse csv files into dataframes,\n  you can see the dataframe as a matrix on steroids.\n\n  ## Data Dictionary\n\n\n  | Variable | Definition | Key |\n  | :-: | :-: | :-: |\n  | survival | Survival | 0 = No, 1 = Yes|\n  | pclass | Ticket class | 1 = 1st, 2 = 2nd, 3 = 3rd|\n  | sex | Sex | |\n  | Age | Age in years | |\n  | sibsp | # of siblings \/ spouses aboard the Titanic | |\n  | parch | # of parents \/ children aboard the Titanic | |\n  | ticket | Ticket number | |\n  | fare | Passenger fare | |\n  | cabin | Cabin number | |\n  | embarked | Port of Embarkation | C = Cherbourg, Q = Queenstown, S = Southampton |"}}