{"cell_type":{"f9ab0856":"code","9d0032fa":"code","7d766690":"code","f83a6b9c":"code","c6763654":"code","0cd90f74":"code","e63f744b":"code","ca4bab15":"code","ff75a02e":"code","6cbcd054":"code","9c140fe9":"code","98f8afa8":"code","96f9525d":"code","90f75938":"code","a9d17c58":"code","4910016e":"code","5f8679b0":"code","214506dd":"code","bc8bea50":"code","c2202d0e":"markdown","c7c5a5a9":"markdown","2178caf9":"markdown"},"source":{"f9ab0856":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","9d0032fa":"\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7d766690":"data = pd.read_csv('\/kaggle\/input\/icc-test-cricket-runs\/ICC Test Batting Figures.csv', encoding='ISO-8859-1')","f83a6b9c":"data.head()","c6763654":"data.info()","0cd90f74":"def row(player):\n    if '*' in player['HS']:\n        return 1\n    else:\n        return 0\n\ndata['hs_not_out'] = data.apply(row, axis=1)","e63f744b":"data.head()","ca4bab15":"data['HS'] = data['HS'].str.replace('*', '')\ndata['HS'] = data['HS'].str.replace('-', '0')\ndata['Mat'] = data['Mat'].replace('-', '0')\ndata['Inn'] = data['Inn'].str.replace('-', '0')\ndata['NO'] = data['NO'].str.replace('-', '0')\ndata['Runs'] = data['Runs'].str.replace('-', '0')\ndata['100'] = data['100'].str.replace('-', '0')\ndata['50'] = data['50'].str.replace('-', '0')\ndata['0'] = data['0'].str.replace('-', '0')\ndata['Avg'] = data['Avg'].str.replace('-', '0')","ff75a02e":"data['Inn'] = data['Inn'].astype('int32')\ndata['NO'] = data['NO'].astype('int32')\ndata['Runs'] = data['Runs'].astype('int32')\ndata['HS'] = data['HS'].astype('int32')\ndata['Avg'] = data['Avg'].astype('float32')\ndata['100'] = data['100'].astype('int32')\ndata['50'] = data['50'].astype('int32')\ndata['0'] = data['0'].astype('int32')","6cbcd054":"data.info()","9c140fe9":"# histogram for the avg. innings played\nplt.figure(figsize=(15,6))\nsns.distplot(data['Inn'])","98f8afa8":"plt.figure(figsize=(15,6))\nsns.lineplot(data['Inn'], data['100'])\nplt.title('Np. of innings played vs centuries scored')","96f9525d":"# scatterplot for the no. of centuries scored for the innings played\nsns.scatterplot(data['Inn'], data['100'])","90f75938":"# high score from a player\ntop_10_HS = data['HS'].sort_values(ascending=False)[:10].index\ntop_10 = data.iloc[top_10_HS]\ntop_10['HS'].plot.bar()\ny = np.arange(10)\nplt.xticks(y, labels=top_10['Player'])\nplt.show()","a9d17c58":"plt.figure(figsize=(15,6))\nsns.scatterplot(data['HS'], data['Inn'], hue=data['hs_not_out'])\nplt.title('High score vs no. of innings played')","4910016e":"# distribution of whether batsman was out or not out when they scored their high score\nf, ax = plt.subplots(1,2,figsize=(15,6))\ndata['hs_not_out'].value_counts().plot.bar(ax=ax[0])\nlabels = ['out', 'not out']\ndata['hs_not_out'].value_counts().plot.pie(ax=ax[1], autopct='%1.1f%%', labels=labels)","5f8679b0":"# no. of 100, 50 , 0 runs scored\nx = [100, 50, 0]\ny = [data['100'].sum(), data['50'].sum(), data['0'].sum()]\nsns.barplot(x,y)","214506dd":"# top 10 avg runs by a player\nplt.figure(figsize=(15,6))\ntop_10_avg = data['Avg'].sort_values(ascending=False)[:10].index\ntop_10 = data.iloc[top_10_avg]\ntop_10['Avg'].plot.bar()\ny = np.arange(10)\nplt.xticks(y, labels=top_10['Player'])\nplt.show()","bc8bea50":"# most 100's by a player\nplt.figure(figsize=(15,6))\ntop_100_i = data['100'].sort_values(ascending=False)[:10].index\ntop_100 = data.iloc[top_100_i]\ntop_100\ntop_100['100'].plot.bar()\ny = np.arange(10)\nplt.xticks(y, top_100['Player'])\nplt.title('Top the 100 scored by a player')\nplt.show()","c2202d0e":"No empty rows, that's good.\nBut all the integer columns are string. So let's transform them.\nBut before that, the High Score has not_out or not '*', let's create a new column for not_out or not","c7c5a5a9":"Now let's convert all string columns to integer","2178caf9":"some players have empyty integer columns, so let's remove them"}}