{"cell_type":{"e3dd6579":"code","66091416":"code","0817a8c1":"code","b12c2bfc":"code","50c671e7":"code","cc248217":"code","da9fc4a4":"code","c6ff33a2":"code","1568bbb5":"code","9952e770":"code","c5e97ab3":"code","6d883046":"code","ee1b113c":"code","bb295851":"code","c09f80b6":"code","4effd9c8":"code","1dc053b6":"code","4b087b43":"code","b2e302c4":"code","c0bfb41d":"code","5b38e037":"code","3f19ee3e":"code","62849944":"code","742e24a0":"markdown"},"source":{"e3dd6579":"#!kaggle competitions download -c 2020-ai-exam-fashionmnist-3","66091416":"#!unzip 2020-ai-exam-fashionmnist-3.zip","0817a8c1":"import torch\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random\n\nimport pandas as pd\nimport numpy as np\n","b12c2bfc":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","50c671e7":"learning_rate = 0.01\ntraining_epochs = 15\nbatch_size = 100","cc248217":"train_data = pd.read_csv('..\/input\/2020-ai-exam-fashionmnist-3\/mnist_train_label.csv', header = None)\ntest_data = pd.read_csv('..\/input\/2020-ai-exam-fashionmnist-3\/mnist_test.csv', header = None, usecols=range(1, 785))","da9fc4a4":"test_data","c6ff33a2":"train_data","1568bbb5":"x_train_data = train_data.loc[:, 1:784]\ny_train_data = train_data.loc[:, 0]\n\n#\ub370\uc774\ud130 \uc815\uaddc\ud654\nx_train_data = x_train_data\/255\nx_train_data","9952e770":"  \nx_train_data = np.array(x_train_data)\ny_train_data = np.array(y_train_data)\nx_train_data = torch.FloatTensor(x_train_data)\ny_train_data = torch.LongTensor(y_train_data)","c5e97ab3":"train_dataset =  torch.utils.data.TensorDataset(x_train_data, y_train_data)","6d883046":"data_loader = torch.utils.data.DataLoader(dataset=train_dataset, \n                                          batch_size=batch_size, \n                                          shuffle = True, \n                                          drop_last = True)","ee1b113c":"linear1 = torch.nn.Linear(784,256, bias = True)\nlinear2 = torch.nn.Linear(256,128, bias = True)\nlinear3 = torch.nn.Linear(128,10, bias = True)\nReLU = torch.nn.ReLU()","bb295851":"torch.nn.init.xavier_normal_(linear1.weight)\ntorch.nn.init.xavier_normal_(linear2.weight)\ntorch.nn.init.xavier_normal_(linear3.weight)","c09f80b6":"model = torch.nn.Sequential(linear1, ReLU,\n                            linear2, ReLU,\n                            linear3).to(device)","4effd9c8":"loss = torch.nn.CrossEntropyLoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr = learning_rate)","1dc053b6":"total_batch = len(data_loader)\nfor epoch in range(training_epochs):\n  avg_cost = 0\n\n  for X, Y in data_loader:\n    X = X.to(device)\n    Y = Y.to(device)\n\n    optimizer.zero_grad()\n    hypothesis = model(X)\n    cost = loss(hypothesis, Y)\n    cost.backward()\n    optimizer.step()\n\n    avg_cost += cost\/total_batch\n  print(epoch+1)\n  print(avg_cost)\nprint(\"f\")","4b087b43":"with torch.no_grad():\n  test_data.loc[:, 783] = 0\n  x_test = test_data.loc[:,:]\n  x_test = x_test\/255\n  x_test = np.array(x_test)\n  x_test = torch.from_numpy(x_test).float().to(device)\n  prediction = model(x_test)\n  correct = torch.argmax(prediction, 1)\ncorrect","b2e302c4":"correct = correct.cpu().numpy().reshape(-1, 1)\ncorrect","c0bfb41d":"submit = pd.read_csv('..\/input\/2020-ai-exam-fashionmnist-3\/submission.csv')\nsubmit","5b38e037":"for i in range(len(correct)):\n  submit['Category'][i] = correct[i].item()\nsubmit","3f19ee3e":"submit.to_csv('submit.csv', index = False, header = True)","62849944":"!kaggle competitions submit -c 2020-ai-exam-fashionmnist-3 -f submit.csv -m \"result\"","742e24a0":"!pip uninstall kaggle<br>\n!pip install --upgrade pip<br>\n!pip install kaggle==1.5.6<br>\n!mkdir -p ~\/.kaggle<br>\n!cp kaggle.json ~\/.kaggle<br>\n!ls -lha kaggle.json<br>\n!chmood 600 ~\/.kaggle\/kaggle.json<br>"}}