{"cell_type":{"2608d78b":"code","caa76ff7":"code","571af779":"code","22ecc0ab":"code","614b3600":"code","3bae52b9":"code","4f6ad488":"code","85f3b74a":"code","788450d7":"code","6c4333b3":"code","b3562b56":"code","03bee5dc":"code","c5d53920":"code","6dbfdb05":"code","e4be3425":"code","005a061a":"code","de1e5aa6":"code","1314e7b2":"code","3da86e10":"code","aa8c7108":"code","8b4e81a1":"code","e6fbb259":"code","92f4fb46":"code","a6fe6ff1":"code","f7f15748":"code","fbea011d":"code","1195858b":"code","d2814102":"code","94b4c05b":"code","42b90f2f":"code","1693c1d4":"code","d6f98011":"code","333192d2":"code","1384146a":"code","aea6f71a":"code","0e431642":"code","f7749f7b":"code","5581ce9a":"code","c9a48a53":"code","553ddee4":"code","4ff83f1e":"code","47ecb6ab":"code","8331666b":"code","47ed4d38":"code","37a3aec2":"code","cf73e2b0":"code","46c1fbd5":"code","d4e15f9d":"code","c42b6872":"code","596ea509":"code","834b4ada":"code","61e4bb93":"code","b4bf2543":"code","f0491e6a":"code","5df791ef":"code","1a8b7d49":"code","062148fd":"code","1ee67754":"code","37c7973d":"code","01ed879d":"code","224b32df":"code","c1d3409d":"code","30948313":"code","7f19e2bc":"code","25f0180c":"code","294077a2":"code","931c3391":"code","760bbd17":"markdown","0ecdced0":"markdown","b8349471":"markdown"},"source":{"2608d78b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\npd.pandas.set_option('display.max_columns', None)","caa76ff7":"df = pd.read_csv('..\/input\/titanic\/train.csv')","571af779":"df.head()","22ecc0ab":"df.tail()","614b3600":"df.shape","3bae52b9":"df.info()","4f6ad488":"df.columns","85f3b74a":"df.index","788450d7":"df.describe().T","6c4333b3":"df.isnull().values.any()","b3562b56":"df.isnull().sum()","03bee5dc":"def check_df(dataframe, head=5):\n    print(\"##### SHAPE #####\")\n    print(dataframe.shape)\n    print(\"##### TYPES #####\")\n    print(dataframe.dtypes)\n    print(\"##### HEAD ######\")\n    print(dataframe.head(head))\n    print(\"##### TAIL #####\")\n    print(dataframe.tail(head))\n    print(\"##### NA #####\")\n    print(dataframe.isnull().sum())\n    print(\"##### QUANTILES #####\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)","c5d53920":"check_df(df)","6dbfdb05":"df[\"Sex\"].value_counts()","e4be3425":"df[\"Sex\"].unique()","005a061a":"df[\"Sex\"].nunique()","de1e5aa6":"cat_cols = [col for col in df.columns if df[col].dtypes == \"O\"]\ncat_but_car = [col for col in df.columns if df[col].nunique() > 20 and df[col].dtypes == \"O\"]\ncat_cols = [col for col in cat_cols if col not in cat_but_car]","1314e7b2":"num_but_cat = [col for col in df.columns if df[col].nunique() < 10 and df[col].dtypes != \"O\"]","3da86e10":"cat_cols = cat_cols + num_but_cat","aa8c7108":"cat_cols","8b4e81a1":"df[cat_cols]","e6fbb259":"df[cat_cols].nunique()","92f4fb46":"df[cat_but_car].nunique()","a6fe6ff1":"def cat_summary(dataframe, col_name, plot=False):\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                       \"Ratio\": 100 * dataframe[col_name].value_counts() \/ len(dataframe)}))\n    print(\"##############################\")\n    if plot:\n        sns.countplot(x=dataframe[col_name], data=dataframe)\n        plt.show()","f7f15748":"for col in cat_cols:\n    cat_summary(df, col, plot=True)","fbea011d":"# analysis of numerical variables\ndf[[\"Age\", \"Fare\"]].describe([0.05, 0.10, 0.25, 0.50, 0.75, 0.80, 0.90, 0.95, 0.99]).T","1195858b":"num_cols = [col for col in df.columns if df[col].dtypes != \"O\"]\nnum_cols = [col for col in df.columns if df[col].dtypes != \"O\" and col not in [\"PassengerId\"]]\nnum_cols = [col for col in num_cols if col not in cat_cols]","d2814102":"num_cols","94b4c05b":"def num_summary(dataframe, numerical_col, plot=False, plot_type=\"hist\"):\n    quantiles = [0.05, 0.10, 0.25, 0.50, 0.75, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[numerical_col].describe(quantiles).T)\n    if plot:\n        if plot_type == \"hist\":\n            dataframe[numerical_col].hist(bins=30)\n            plt.xlabel(numerical_col)\n            plt.title(numerical_col)\n            plt.show()\n        \n        elif plot_type == \"box_plot\":\n            sns.boxplot(x=dataframe[numerical_col])\n            plt.xlabel(numerical_col)\n            plt.title(numerical_col)\n            plt.show()\n        else:\n            print(\"Not correct chart type\")","42b90f2f":"num_summary(df, \"Age\", plot=True)","1693c1d4":"for col in num_cols:\n    num_summary(df, col, plot=True)","d6f98011":"for col in num_cols:\n    num_summary(df, col, plot=True, plot_type=\"box_plot\")","333192d2":"def grab_col_name(dataframe, cat_th=10, car_th=20):\n    \"\"\"\n    It gives the names of categorical, numerical and categorical but cardinal variables in the data set.\n    Note: Categorical variables with numerical appearance are also included in categorical variables.\n    \n    Parameters\n    ----------\n    dataframe: dataframe\n        The dataframe from which variable names are to be retrieved\n    cat_th: int, optional\n        Class threshold value for numeric but categorical variables\n    car_th: int, optional\n    \n    Returns\n    -------\n        cat_cols: list\n   Categorical variable list\n         num_cols: list\n             Numeric variable list\n         cat_but_car: list\n             Categorical view cardinal variable list\n    \n     Examples\n     --------\n         import seaborn as sns\n         df = sns.load_dataset(\"iris\")\n         print(grab_col_names(df))\n    \n     Notes\n     -----\n         cat_cols + num_cols + cat_but_Car = total number of variables\n         num_but_cat is inside cat_cols.\n         The sum of the 3 returned lists equals the total number of variables: cat_cols + num_cols + cat_but_car = number of variables\n        \n    \"\"\"\n    \n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    \n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and \n                   dataframe[col].dtypes != \"O\"]\n    \n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and \n                   dataframe[col].dtypes == \"O\"]\n    \n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n    \n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n    \n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f\"cat_cols: {len(cat_cols)}\")\n    print(f\"num_cols: {len(num_cols)}\")\n    print(f\"cat_but_car: {len(cat_but_car)}\")\n    print(f\"num_but_cat: {len(num_but_cat)}\")\n    \n    return cat_cols, num_cols, cat_but_car","1384146a":"grab_col_name(df)","aea6f71a":"dff = pd.read_csv(\"..\/input\/nba-players-data\/all_seasons.csv\")","0e431642":"cat_cols, num_cols, cat_but_car = grab_col_name(dff)","f7749f7b":"for col in cat_cols:\n    cat_summary(dff, col, plot=True)","5581ce9a":"for col in num_cols:\n    num_summary(dff, col, plot=True)","c9a48a53":"cat_cols, num_cols, cat_but_car = grab_col_name(df)","553ddee4":"def target_summary_with_cat(dataframe, target, categorical_col):\n    print(pd.DataFrame({\"TARGET_MEAN\": dataframe.groupby(categorical_col)[target].mean()}), end=\"\\n\\n\\n\")","4ff83f1e":"for col in cat_cols:\n    target_summary_with_cat(df, \"Survived\", col)","47ecb6ab":"def target_summary_with_num(dataframe, target, numerical_col):\n    print(dataframe.groupby(target).agg({numerical_col: \"mean\"}), end=\"\\n\\n\\n\")","8331666b":"for col in num_cols:\n    target_summary_with_num(df, \"Survived\", col)","47ed4d38":"df_bc = pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")","37a3aec2":"df_bc.head()","cf73e2b0":"df_bc = df_bc.iloc[:, 1:-1]","46c1fbd5":"num_cols = [col for col in df_bc.columns if df_bc[col].dtype in [int, float]]","d4e15f9d":"corr = df_bc[num_cols].corr()","c42b6872":"corr","596ea509":"sns.set(rc={'figure.figsize': (12, 12)})\nsns.heatmap(corr, cmap=\"RdBu\")\nplt.show()","834b4ada":"# deletion of highly correlated variables\npd.set_option('display.max_columns', 5)\n\ncor_matrix = df_bc.corr().abs()","61e4bb93":"cor_matrix","b4bf2543":"upper_triangle_matrix = cor_matrix.where(np.triu(np.ones(cor_matrix.shape), k=1).astype(np.bool))","f0491e6a":"upper_triangle_matrix","5df791ef":"drop_list = [col for col in upper_triangle_matrix.columns if any(upper_triangle_matrix[col] > 0.90)]","1a8b7d49":"cor_matrix[drop_list]","062148fd":"df_bc.drop(drop_list, axis=1)","1ee67754":"def high_correlated_cols(dataframe, plot=False, corr_th=0.90):\n    corr = dataframe.corr()\n    cor_matrix = corr.abs()\n    upper_triangle_matrix = cor_matrix.where(np.triu(np.ones(cor_matrix.shape), k=1).astype(np.bool))\n    drop_list = [col for col in upper_triangle_matrix.columns if any(upper_triangle_matrix[col] > corr_th)]\n    if plot:\n        import seaborn as sns\n        import matplotlib.pyplot as plt\n        sns.set(rc={'figure.figsize': (15, 15)})\n        sns.heatmap(corr, cmap=\"RdBu\")\n        plt.show()\n    return drop_list","37c7973d":"high_correlated_cols(df_bc, plot=True)","01ed879d":"drop_list = high_correlated_cols(df_bc)","224b32df":"df_bc.drop(drop_list, axis=1)","c1d3409d":"high_correlated_cols(df_bc.drop(drop_list, axis=1), plot=True)","30948313":"df_fraud = pd.read_csv(\"..\/input\/ieee-fraud-detection\/train_transaction.csv\")","7f19e2bc":"df_fraud.head()","25f0180c":"check_df(df_fraud)","294077a2":"drop_list = high_correlated_cols(df_fraud, plot=True)","931c3391":"len(df_fraud.drop(drop_list, axis=1).columns)","760bbd17":"- <span style=\"color:blue\">Analysis of target variable with numerical variables<\/span>","0ecdced0":"<h2 style='background:#11489c; border:0; color:white'><center>Advanced Functional Exploratory Data Analysis<\/center><\/h2>\n\nIt is a study that focuses on advanced functionalized exploratory data analysis with a simple step-by-step explanation\n\n<h2 style='background:#11489c; border:0; color:white'><center>What is Exploratory Data Analysis?<\/center><\/h2>\n\n<a href=\"https:\/\/ibb.co\/MMSWwR3\"><img src=\"https:\/\/i.ibb.co\/jgfB0L1\/Screenshot-2022-01-05-030343.png\" alt=\"Screenshot-2022-01-05-030343\" border=\"0\"><\/a>\n\nExploratory data analysis (EDA) is used by data scientists to analyze and investigate data sets and summarize their main characteristics, often employing data visualization methods. It helps determine how best to manipulate data sources to get the answers you need, making it easier for data scientists to discover patterns, spot anomalies, test a hypothesis, or check assumptions.\n\nEDA is primarily used to see what data can reveal beyond the formal modeling or hypothesis testing task and provides a provides a better understanding of data set variables and the relationships between them. It can also help determine if the statistical techniques you are considering for data analysis are appropriate. Originally developed by American mathematician John Tukey in the 1970s, EDA techniques continue to be a widely used method in the data discovery process today\n\nIt is a study that focuses on advanced functionalized exploratory data analysis with a simple step-by-step explanation\n\n* <span style=\"color:blue\">Analysis of Categorical Variables<\/span>\n* <span style=\"color:blue\">Analysis of Numerical Variables<\/span>\n* <span style=\"color:blue\">Analysis of Target Variable<\/span>\n* <span style=\"color:blue\">Analysis of Correlation<\/span>\n\n<h2 style='background:#11489c; border:0; color:white'><center>In particular, EDA consists of<\/center><\/h2>\n\nOrganizing and summarizing the raw data, discovering important features and patterns in the data and any striking deviations from those patterns, and then interpreting our findings in the context of the problem\n\nAnd can be useful for:\n\n* Describing the distribution of a single variable (center, spread, shape, outliers)\n* Checking data (for errors or other problems)\n* Checking assumptions to more complex statistical analyses\n* Investigating relationships between variables\n\n<h2 style='background:#11489c; border:0; color:white'><center>Importing Libraries<\/center><\/h2>","b8349471":"* <span style=\"color:blue\">Analysis of target variable<\/span>"}}