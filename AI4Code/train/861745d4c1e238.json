{"cell_type":{"91402eb2":"code","6c0e62f3":"code","61df19a8":"code","0a855a6b":"code","471aa524":"code","10610fe9":"code","ed435742":"code","96bd35bb":"code","1cbe4aad":"code","099a6b01":"code","2c242225":"code","eea21ba9":"code","eae205bf":"code","463b61b5":"code","336eeed5":"code","e3a2a1b0":"code","00f61848":"code","2557bcbf":"code","9004f5c1":"code","e0d4e8b4":"code","32aa5583":"code","95004be5":"code","77cb7703":"code","d17ad670":"code","e76b287c":"code","e1cb475d":"code","e7c65d6f":"code","e67037db":"code","206830a5":"code","6e31ad7d":"code","0ce1d592":"code","5b806135":"code","7d687878":"code","49922da4":"code","a1a1ecb6":"markdown","b9c5f592":"markdown","ac32842d":"markdown","606bfc5b":"markdown","fc348628":"markdown","d37fcdbd":"markdown","9f618ccc":"markdown","2e654319":"markdown","10fa0a32":"markdown","380e4d09":"markdown","a70d9a43":"markdown","b2c3848e":"markdown","b64f8c12":"markdown","c605d7c4":"markdown","d0429ec0":"markdown","e45dbdab":"markdown","2dd85b18":"markdown","6eec8e8d":"markdown","9a69e126":"markdown","973e0e04":"markdown","d1d093a6":"markdown","dcf474ad":"markdown","dac2e2a1":"markdown","b97a603a":"markdown","3d4fbc75":"markdown"},"source":{"91402eb2":"import numpy as np\nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import classification_report\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\nimport xgboost as xgb\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6c0e62f3":"test_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain_data.head()","61df19a8":"train_data = train_data[train_data['Embarked'].notna()]\ntrain_data['Embarked'].isnull().sum()\ntrain_data.head()","0a855a6b":"clean_data = train_data.drop(['PassengerId','Survived'], axis=1)\nclean_data.head()","471aa524":"clean_test_data = test_data.drop(['PassengerId'], axis=1)\nclean_test_data.head()","10610fe9":"clean_data['CabinType'] = clean_data['Cabin'].fillna('X')\nclean_test_data['CabinType'] = clean_test_data['Cabin'].fillna('X')","ed435742":"clean_data['CabinType'] = clean_data['CabinType'].apply(lambda x: x[0])\nclean_data['CabinType'] = clean_data['CabinType'].astype('category')\nclean_data['CabinType'] = clean_data['CabinType'].cat.codes\nclean_data.sample(3)","96bd35bb":"clean_test_data['CabinType'] = clean_test_data['CabinType'].apply(lambda x: x[0])\nclean_test_data['CabinType'] = clean_test_data['CabinType'].astype('category')\nclean_test_data['CabinType'] = clean_test_data['CabinType'].cat.codes\nclean_test_data.sample(3)","1cbe4aad":"clean_data['Cabin'] = (clean_data['Cabin'].notnull()).astype('int')\nclean_test_data['Cabin'] = (clean_test_data['Cabin'].notnull()).astype('int')","099a6b01":"clean_data['Title'] = clean_data['Name'].str.extract(' ([A-Za-z]+)\\.')\nclean_data['Title'] = clean_data['Title'].replace(['Ms', 'Mlle'], 'Miss')\nclean_data['Title'] = clean_data['Title'].replace(['Mme', 'Countess', 'Lady', 'Dona'], 'Mrs')\nclean_data['Title'] = clean_data['Title'].replace(['Dr', 'Major', 'Col', 'Sir', 'Rev', 'Jonkheer', 'Capt', 'Don'], 'Mr')\nclean_data = clean_data.drop(['Name'], axis=1)\nclean_data.head()","2c242225":"clean_test_data['Title'] = clean_test_data['Name'].str.extract(' ([A-Za-z]+)\\.')\nclean_test_data['Title'] = clean_test_data['Title'].replace(['Ms', 'Mlle'], 'Miss')\nclean_test_data['Title'] = clean_test_data['Title'].replace(['Mme', 'Countess', 'Lady', 'Dona'], 'Mrs')\nclean_test_data['Title'] = clean_test_data['Title'].replace(['Dr', 'Major', 'Col', 'Sir', 'Rev', 'Jonkheer', 'Capt', 'Don'], 'Mr')\nclean_test_data = clean_test_data.drop(['Name'], axis=1)\nclean_test_data.head()","eea21ba9":"clean_data['Ticket']","eae205bf":"clean_data['Ticket'] = clean_data['Ticket'].apply(lambda x: x[0:3])\nclean_data['Ticket'] = clean_data['Ticket'].astype('category')\nclean_data['Ticket'] = clean_data['Ticket'].cat.codes\nclean_data.sample(3)","463b61b5":"clean_test_data['Ticket'] = clean_test_data['Ticket'].apply(lambda x: x[0:3])\nclean_test_data['Ticket'] = clean_test_data['Ticket'].astype('category')\nclean_test_data['Ticket'] = clean_test_data['Ticket'].cat.codes\nclean_test_data.sample(3)","336eeed5":"clean_data['FamSize'] = clean_data['SibSp']+clean_data['Parch']\nclean_data.sample(3)","e3a2a1b0":"clean_test_data['FamSize'] = clean_test_data['SibSp']+clean_test_data['Parch']\nclean_test_data.sample(3)","00f61848":"clean_data['Alone'] = (clean_data['FamSize']==0).astype('int')\nclean_data.sample(3)","2557bcbf":"clean_test_data['Alone'] = (clean_test_data['FamSize']==0).astype('int')\nclean_test_data.sample(3)","9004f5c1":"sns.set_style('white')","e0d4e8b4":"sns.boxplot(x = 'Pclass', y = 'Age', data = clean_data,  palette = 'rainbow')","32aa5583":"sns.distplot(clean_data['Age'])","95004be5":"sns.boxplot(x = 'Survived', y = 'Age', data = train_data, palette = 'prism')","77cb7703":"sns.countplot(x='Sex',data=clean_data)","d17ad670":"plt.figure(figsize=(10,10))\nsns.heatmap(clean_data.corr(),linewidths=0.1,vmax=1.0, square=True, cmap='coolwarm', linecolor='white', annot=True).set_title(\"Correlation Map\")","e76b287c":"clean_data.info()","e1cb475d":"clean_data['Alone'] = clean_data['Alone'].astype('object', copy=True, errors='raise')\nclean_data['Ticket'] = clean_data['Ticket'].astype('object', copy=True, errors='raise')\nclean_data['Cabin'] = clean_data['Cabin'].astype('object', copy=True, errors='raise')\nclean_data['CabinType'] = clean_data['CabinType'].astype('object', copy=True, errors='raise')\nclean_data['Pclass'] = clean_data['Pclass'].astype('object', copy=True, errors='raise')\nclean_data.sample(4)","e7c65d6f":"clean_test_data['Alone'] = clean_test_data['Alone'].astype('object', copy=True, errors='raise')\nclean_test_data['Ticket'] = clean_test_data['Ticket'].astype('object', copy=True, errors='raise')\nclean_test_data['Cabin'] = clean_test_data['Cabin'].astype('object', copy=True, errors='raise')\nclean_test_data['CabinType'] = clean_test_data['CabinType'].astype('object', copy=True, errors='raise')\nclean_test_data['Pclass'] = clean_test_data['Pclass'].astype('object', copy=True, errors='raise')\nclean_test_data.sample(4)","e67037db":"s = (clean_data.dtypes == 'object')\ncategorical_cols = list(s[s].index)\n\nt = (clean_data.dtypes != 'object')\nnumerical_cols = list(t[t].index)","206830a5":"numerical_transformer = Pipeline(steps = [\n    ('imputer',SimpleImputer(strategy = 'most_frequent')),\n    ('scaler', StandardScaler(with_mean = False))\n])\n\ncategorical_transformer = Pipeline(steps = [\n    ('imputer', SimpleImputer(strategy = 'most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown = 'ignore')),\n    ('scaler', StandardScaler(with_mean = False))\n])\n\npreprocessor = ColumnTransformer(\n    transformers = [\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","6e31ad7d":"# param_grid =  {'n_estimators': [100, 500, 1000, 2000, 3000, 4000, 5000],\n#           'gamma': [1, 0.9, 0.7, 0.3, 0.1], \n#           'learning_rate': [0.1,0.01,0.001,0.0001]}\n\n# param_grid = {'n_estimators': [5000,6000],\n#               'gamma': [1], \n#               'learning_rate': [0.001],\n#               'max_depth': [2,3,4,5,6],'min_child_weight': [2,3,4]}\n\n\n# grid1 = GridSearchCV(xgb.XGBClassifier(), param_grid, refit = True, verbose = 3,n_jobs=-1)\n# grid = Pipeline(steps=[('preprocessor', preprocessor),\n#                               ('model', grid1)])\n\n\n# grid.fit(train_X, train_y)","0ce1d592":"# print(grid1.best_params_) \n# grid_predictions = grid.predict(val_X) \n   \n# print(classification_report(val_y, grid_predictions)) ","5b806135":"y = train_data[\"Survived\"]\nX = clean_data\nX_test = clean_test_data\nX.columns = clean_data.columns\nX_test.columns = clean_test_data.columns\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, test_size = 0.2, random_state = 1)\n\n\nmodel = xgb.XGBClassifier(\n    learning_rate = 0.001,\n    n_estimators= 5000,\n    max_depth= 3,\n    min_child_weight= 3,\n    gamma=1,\n    subsample=0.8,\n    colsample_bytree=0.8,\n    objective= 'binary:logistic',\n    nthread= -1,\n    scale_pos_weight=1\n)\n\npipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model)])\n\npipeline.fit(train_X, train_y)\n\nval_predictions = pipeline.predict(val_X)\n\n\nprint(classification_report(val_y, val_predictions)) ","7d687878":"predictions = pipeline.predict(X_test)","49922da4":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\noutput","a1a1ecb6":"The \"Embarked\" column has some NaN values. To fix that we will remove the rows containing them. We are doing this because it doesn't affect our model very much as there are only two of them.","b9c5f592":"Save them.","ac32842d":"Thanks for checking out my notebook. If you found it helpful, please do upvote. Have a great day.","606bfc5b":"# Feature Engineering","fc348628":"Let's predict!","d37fcdbd":"# Prediction","9f618ccc":"# Pipeline","2e654319":"Differentiate numberical columns from the non-numerical ones.","10fa0a32":"# Set up the enviornment","380e4d09":"# Clean the Data","a70d9a43":"# Submission","b2c3848e":"Import the data.","b64f8c12":"Import all of the necessary libraries.","c605d7c4":"# Data Visualisation","d0429ec0":"There is a pattern in cabin names which can tell us the type of cabin.\n\nThe format of a cabin number is - **{letter}{number}**\n\nThis letter can tell us the type of cabin.","e45dbdab":"#### THIS NOTEBOOK IS A FORK FROM MY OTHER NOTEBOOK, [CHECK IT OUT HERE](https:\/\/www.kaggle.com\/iamyajat\/titanic-survival-classification-random-forest)!","2dd85b18":"Filling X for passengers with no cabins.","6eec8e8d":"Generate a new feature called \"Title\".","9a69e126":"Let's drop the column which aren't very significant.","973e0e04":"# Model","d1d093a6":"Using GridSearchCV, we can find out the best parameters.","dcf474ad":"Create a Pipeline.","dac2e2a1":"Having a cabin could be a sign of importance of a person, so let's put false for the NaN values and true for the rest.","b97a603a":"Let's now explore the ticket numbers.","3d4fbc75":"Let's now find out the family sizes."}}