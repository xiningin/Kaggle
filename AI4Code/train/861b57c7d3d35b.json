{"cell_type":{"04c9bd45":"code","5758a5ad":"code","42c26e70":"code","cf379f08":"code","fb0c658b":"code","d7388f01":"code","b4f84346":"code","32bedbe3":"code","28793bb3":"code","2ec9e23f":"code","8e575cde":"code","9db8e2a6":"code","1458563d":"code","af490143":"code","3ce16c89":"code","681a1cec":"code","27f00a83":"code","ee7accc4":"code","ac5293b1":"code","7e56b5b3":"code","50ccb78c":"code","4fd64e14":"code","256598ac":"code","ffdeab7f":"code","48eca3fd":"code","81c95da2":"code","4eeeaa5d":"code","5bf6d912":"code","8bc3a365":"markdown","e5928fce":"markdown","3b75bbdb":"markdown","c4ccb58d":"markdown","173b3acd":"markdown"},"source":{"04c9bd45":"# Install all packeges\n\n# !python -m pip install --upgrade pip\n# !pip3 install pandas\n# !pip3 install numpy\n# !pip3 install plotly\n# !pip3 install cufflinks\n# !pip3 install seaborn\n# !pip3 install sklearn\n# !pip3 install scikit-plot\n# !pip3 install chart_studio","5758a5ad":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score, StratifiedKFold, GridSearchCV, train_test_split\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestClassifier, BaggingClassifier\n\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.metrics import precision_recall_curve, classification_report\nfrom sklearn.metrics import confusion_matrix\nimport itertools  \n\nfrom sklearn.metrics import roc_curve, auc\n\n\nimport seaborn as sns\nfrom sklearn.datasets import make_circles\nfrom sklearn.model_selection import train_test_split\n\nimport scikitplot as skplt\nimport plotly.express as px\nimport matplotlib.pyplot as plt","42c26e70":"# Import Data\ndf = pd.read_csv(\"..\/input\/coronavirusdataset\/PatientInfo.csv\")\ndf.head()","cf379f08":"# Remove symbols from df\ndf['age'].replace(regex=True,inplace=True,to_replace=r'\\D',value=r'')","fb0c658b":"age_dist = df['age'].value_counts()\npx.bar(age_dist, title='Age distribution')","d7388f01":"df['sex'].dropna(axis=0,inplace=True)","b4f84346":"# Change to int\nd_state =  {\"released\": 0, 'deceased': 1, 'isolated': 2}\ndf['state'] = df['state'].map(d_state)\nd_sex = {\"male\": 1, \"female\": 0,}\ndf['sex'] = df['sex'].map(d_sex)\n# fill nan values\ndf['state'].fillna(2, inplace = True)","32bedbe3":"# Remove active cases\nindexNames = df[df['state'] == 2].index\n\ndf_c = df.drop(indexNames)","28793bb3":"death_by_sex = pd.crosstab(df_c['sex'], df_c['state'], normalize=True)\n","2ec9e23f":"px.bar(death_by_sex, title='Death by sex')","8e575cde":"# Save only informative features and change datatypes\ndf_closed = df_c[['state', 'age', 'sex']]\ndf_closed['age'].dropna(axis=0,inplace=True)\ndf_closed['age'].astype('float64')\ndf_closed.fillna(0,inplace = True)\ndf_closed.dropna(inplace=True)","9db8e2a6":"y = df_closed['state']\nX = df_closed.drop('state', axis = 1)\n\nX_train, X_holdout, y_train, y_holdout,  = train_test_split(X, y, test_size=0.3,\n                                                          random_state=10, stratify=y)","1458563d":"X_train.shape, X_holdout.shape, y_train.shape, y_holdout.shape","af490143":"y_holdout.value_counts()","3ce16c89":"tree = DecisionTreeClassifier(max_depth=10, random_state=10, class_weight='balanced')","681a1cec":"knn = KNeighborsClassifier(n_neighbors=3)","27f00a83":"%%time\nknn.fit(X_train, y_train)","ee7accc4":"%%time\ntree.fit(X_train, y_train)","ac5293b1":"knn_pred = knn.predict(X_holdout)\nmetrics.balanced_accuracy_score(y_holdout, knn_pred)","7e56b5b3":"tree_pred = tree.predict(X_holdout)\nmetrics.balanced_accuracy_score(y_holdout, tree_pred)","50ccb78c":"# Initialize hyperparameters for grid search\nparameters = { 'min_samples_leaf': range(1,10, 2), 'min_samples_split': range(1,25, 5)}\nrfc = RandomForestClassifier(n_estimators=500, random_state=42, \n                             n_jobs=-1, criterion='gini', class_weight='balanced')\ngcv = GridSearchCV(rfc, parameters, n_jobs=2, cv=10, verbose=1)\ngcv.fit(X, y)","4fd64e14":"print(gcv.best_estimator_, gcv.best_score_)","256598ac":"metrics.balanced_accuracy_score(y_holdout, gcv.best_estimator_.predict(X_holdout))","ffdeab7f":"true_labels = (y_holdout)\npredicted_labels = np.array(gcv.best_estimator_.predict(X_holdout))\n\nM = metrics.confusion_matrix(true_labels, predicted_labels)\nM\n\n\nPPV = metrics.precision_score(true_labels, predicted_labels)\nTPR = metrics.recall_score(true_labels, predicted_labels)\nF1 = metrics.f1_score(true_labels, predicted_labels)\nACC = metrics.accuracy_score(true_labels, predicted_labels)\nBalanced = metrics.balanced_accuracy_score(true_labels, predicted_labels)\nrecall = metrics.recall_score(true_labels, predicted_labels)\n\nprint(f' PPV: {PPV}, \\n TPR: {TPR}, \\n ACC: {ACC}, \\n F1: {F1}, \\n Balanced: {Balanced}, \\n recall: {recall}')","48eca3fd":"fpr, tpr, thresholds = roc_curve(y_holdout, gcv.best_estimator_.predict_proba(X_holdout)[:,1], pos_label=1)\n\nfig = px.area(\n    x=fpr, y=tpr,\n    title=f'ROC Curve (AUC={auc(fpr, tpr):.4f})',\n    labels=dict(x='False Positive Rate', y='True Positive Rate'),\n    width=800, height=800\n)\nfig.add_shape(\n    type='line', line=dict(dash='dash'),\n    x0=0, x1=1, y0=0, y1=1\n)\n\nfig.update_yaxes(scaleanchor=\"x\", scaleratio=1)\nfig.update_xaxes(constrain='domain')\nfig.show()","81c95da2":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = (cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]*100)\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\nfont = {'size' : 15}\n\nplt.rc('font', **font)\n\ncnf_matrix = confusion_matrix(y_holdout, gcv.best_estimator_.predict(X_holdout))\nplt.figure(figsize=(10, 8))\nplot_confusion_matrix(cnf_matrix, classes=['Survived', 'Dead'],\n                      title='Confusion matrix', normalize=False)\nplt.savefig(\"conf_matrix.png\")\nplt.show()","4eeeaa5d":"skplt.estimators.plot_feature_importances(gcv.best_estimator_, title='Feature Importance', feature_names=X_holdout.columns, \n                                          max_num_features=5, \n                                          order='descending', x_tick_rotation=45,\n                                          ax=None, figsize=None, title_fontsize='medium', text_fontsize='medium')","5bf6d912":"# Deriving Class probabilities\npredicted_probabilities = gcv.best_estimator_.predict_proba(X_holdout)\n\n# Creating the plot\nskplt.metrics.plot_cumulative_gain(y_holdout, predicted_probabilities)","8bc3a365":"# Stratifying Split Data","e5928fce":"# Confusion Matrix for Random Forest Best params model","3b75bbdb":"# Feature Importances","c4ccb58d":"### Metrics of Binar Classifier\n\n$$rec = TPR = \\frac{TP}{TP + FN},\\quad SPC = \\frac{TN}{TN + FP},\\quad prec = PPV = \\frac{TP}{TP + FP},\\quad FPR = 1 - SPC,$$\n\n$$ACC = \\frac{TP + TN}{TP + TN + FP + FN},\\quad F1 = 2\\frac{PPV\\cdot TRP}{PPV + TPR}.$$\n\n $TPR$ (True positive rate, recall, sensitivity)\n\n $SPC$ (Specificity, true negative rate)\n\n $PPV$ (Positive predictive value, precision)\n\n$FPR$ (False positive rate)\n\n$ACC$ (Accuracy)\n$F1$ (F1-measure)","173b3acd":"# Models Training "}}