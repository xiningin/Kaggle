{"cell_type":{"73f031c5":"code","4ae921f0":"code","53acb472":"code","29fa2986":"code","87dbf8d8":"code","1f9a521b":"code","521812c9":"code","51a6a354":"code","0b2138a1":"code","391efb8c":"code","0c961855":"code","2b071df9":"code","232f2c7c":"code","8a0fffe3":"code","270e84c9":"code","3ff44dcf":"code","1fe739d2":"code","685a9f7e":"code","8eb76445":"code","36b70995":"markdown","d9802b39":"markdown","9e96f9fa":"markdown","4081c08d":"markdown"},"source":{"73f031c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4ae921f0":"#import the data\ndiabetes = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","53acb472":"#gets name of column\ndiabetes.columns","29fa2986":"#information about the column\ndiabetes.info()","87dbf8d8":"#get basic statistics about the data\ndiabetes.describe()","1f9a521b":"# check for the null values\ndiabetes.isnull().sum()","521812c9":"#let us look at first 10 rows\ndiabetes.head(10)","51a6a354":"def check_for_zero(columns):\n    for col in columns:\n        if 0 in diabetes[col]:\n            print(col+' has 0 in it.')\n\ncolumns = ['Glucose', 'BloodPressure', 'SkinThickness',\n           'BMI', 'DiabetesPedigreeFunction', 'Age',]\ncheck_for_zero(columns)","0b2138a1":"#before doing so, we will split our X and y\nX = diabetes.drop('Outcome',axis=1)\nY = diabetes['Outcome']","391efb8c":"from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=0, strategy='mean')\nX[columns] = imp.fit_transform(X[columns]) #fit the imputer","0c961855":"X.head(10)","2b071df9":"X = X.drop('Insulin',axis=1)","232f2c7c":"#let's do some EDA\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.countplot(X['Pregnancies'])\nX['Pregnancies'].value_counts()","8a0fffe3":"def draw_dist(column):\n    plt.figure()\n    return sns.distplot(X[col])","270e84c9":"for col in columns:\n    draw_dist(col)","3ff44dcf":"#Let us have some visualization about y\nsns.countplot(Y)","1fe739d2":"#since all columns are not on same scale so let us normalize them\n# Import the necessary modules\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\n# Setup the pipeline steps: steps\nsteps = [('scaler', StandardScaler()),\n        ('knn', KNeighborsClassifier(n_neighbors=5))]\n        \n# Create the pipeline: pipeline\npipeline = Pipeline(steps)\n\n# Create train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.4, random_state=42)\n\n# Fit the pipeline to the training set: knn_scaled\nknn_scaled = pipeline.fit(X_train,y_train)\n\n# Instantiate and fit a k-NN classifier to the unscaled data\nknn_unscaled = KNeighborsClassifier().fit(X_train, y_train)\n\n# Compute and print metrics\nprint('Accuracy on training data: {}'.format(knn_scaled.score(X_train,y_train)))\nprint('Accuracy on test data: {}'.format(knn_scaled.score(X_test,y_test)))\n","685a9f7e":"#implement logistic regression\n# Setup the pipeline steps: steps\nsteps = [('scaler', StandardScaler()),\n        ('knn', LogisticRegression())]\n        \n# Create the pipeline: pipeline\npipeline = Pipeline(steps)\n\n# Create train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.4, random_state=42)\n\n# Fit the pipeline to the training set: knn_scaled\nlogreg_scaled = pipeline.fit(X_train,y_train)\n\n# Compute and print metrics\nprint('Accuracy on training data: {}'.format(logreg_scaled.score(X_train,y_train)))\nprint('Accuracy on test data: {}'.format(logreg_scaled.score(X_test,y_test)))\n","8eb76445":"#implement logistic regression\n# Setup the pipeline steps: steps\nsteps = [('scaler', StandardScaler()),\n        ('knn', SVC())]\n        \n# Create the pipeline: pipeline\npipeline = Pipeline(steps)\n\n# Create train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.4, random_state=42)\n\n# Fit the pipeline to the training set: knn_scaled\nSvm_scaled = pipeline.fit(X_train,y_train)\n\n# Compute and print metrics\nprint('Accuracy on training data: {}'.format(Svm_scaled.score(X_train,y_train)))\nprint('Accuracy on test data: {}'.format(Svm_scaled.score(X_test,y_test)))\n","36b70995":"## Conclusion 1\n\nIt seems there is no columns with null values","d9802b39":"## Conclusion 3\nTill now we have transformed our coulumns containing 0 in it. Now there is a column named Insulin which also have zeros but since I have no idea whether this column can contains zero too, so I will drop this column","9e96f9fa":"These all column has zeros in it and it can't be, so we will find a way to replace these zeros:\n1. One obvious way is to replace them with the mean, median or mode of respective columns, since they are all non categorical columns\n2. Other way can be to replace with the mean, median or mode of respective columns based on outcome columns.\n\nIn this kernel we will follow first.","4081c08d":"## Conclusion 2\n\nBy looking at the columns SkinThickness,BloodPressure,Glucose and BMI, we come at a conclusion that their values can't be zeros. It means null values are represented by 0 in these columns."}}