{"cell_type":{"3ba1a5a2":"code","a243e572":"code","65c9219e":"code","375b14b7":"code","5fd3fd21":"code","db090671":"code","1add3703":"code","9a02c8f4":"code","b01a6686":"code","ebd71b1d":"code","de1940cc":"code","1520d8e8":"markdown","e3031e1b":"markdown","371d3b09":"markdown","c3bb2b0e":"markdown","2b5bd349":"markdown","d23b3310":"markdown","c7368487":"markdown"},"source":{"3ba1a5a2":"import numpy as np\nimport pandas as pd","a243e572":"train = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/train.csv', parse_dates=['Date'])\ntest  = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/test.csv',  parse_dates=['Date'])\n\ntrain.rename(columns={\n        'Id': 'id',\n        'Date': 'date',\n        'Province\/State':'state',\n        'Country\/Region':'country',\n        'Lat':'lat',\n        'Long': 'long',\n        'ConfirmedCases': 'confirmed',\n        'Fatalities':'deaths',\n        }, inplace=True)\n\ntest.rename(columns={\n        'ForecastId': 'id',\n        'Date': 'date',\n        'Province\/State':'state',\n        'Country\/Region':'country',\n        'Lat':'lat',\n        'Long': 'long',\n        }, inplace=True)\n\nvalid = train[train['date'] >= test['date'].min()]\ntrain = train[(train['date'] < test['date'].min()) & (train['date'] > pd.Timestamp('2020-03-01'))]\n\ntrain['date'] = (train['date'] - pd.Timestamp('2020-03-01')).dt.days\nvalid['date'] = (valid['date'] - pd.Timestamp('2020-03-01')).dt.days\ntest['date']  = (test['date'] - pd.Timestamp('2020-03-01')).dt.days\n\ntrain['lat-long'] = train['lat'].astype(str) + '-' + train['long'].astype(str)\nvalid['lat-long'] = valid['lat'].astype(str) + '-' + valid['long'].astype(str)\ntest['lat-long'] = test['lat'].astype(str) + '-' + test['long'].astype(str)","65c9219e":"all_coords = train['lat-long'].unique().tolist()\npredictions = dict()\nRMSE = dict()\ntotal_RMSE = 0\n\nfor coords in all_coords:\n    \n    X_train_ = train[train['lat-long']==coords]['date']#.values.reshape(-1,1)\n    y_train_ = train[train['lat-long']==coords]['confirmed']#.values.reshape(-1,1)\n    \n    X_valid_ = valid[valid['lat-long']==coords]['date']#.values.reshape(-1,1)\n    y_valid_ = valid[valid['lat-long']==coords]['confirmed']#.values.reshape(-1,1)\n    \n    last_diff = y_train_.iloc[-1] - y_train_.iloc[-2]\n    y_linear = y_train_.iloc[-1] + last_diff*np.arange(1,len(X_valid_)+1,1)\n    \n    z = np.polyfit(X_train_.values, y_train_.values, 3)\n    pf = np.poly1d(z)\n        \n    y_preds_ = np.round(X_valid_.apply(pf)).clip(lower=y_linear)\n    \n    predictions[coords] = y_preds_\n    RMSE[coords]=np.sqrt(np.sum(np.square(y_preds_-y_valid_)))\n    total_RMSE += np.sqrt(np.sum(np.square(y_preds_-y_valid_)))\n\n    \nprint(total_RMSE)","375b14b7":"all_coords = train['lat-long'].unique().tolist()\npredictions = dict()\nRMSE = dict()\ntotal_RMSE = 0\n\nfor coords in all_coords:\n    \n    X_train_ = train[train['lat-long']==coords]['date']#.values.reshape(-1,1)\n    y_train_ = train[train['lat-long']==coords]['deaths']#.values.reshape(-1,1)\n    \n    X_valid_ = valid[valid['lat-long']==coords]['date']#.values.reshape(-1,1)\n    y_valid_ = valid[valid['lat-long']==coords]['deaths']#.values.reshape(-1,1)\n    \n    last_diff = y_train_.iloc[-1] - y_train_.iloc[-2]\n    y_linear = y_train_.iloc[-1] + last_diff*np.arange(1,len(X_valid_)+1,1)\n    \n    z = np.polyfit(X_train_.values, y_train_.values, 3)\n    pf = np.poly1d(z)\n    \n    y_preds_ = np.round(X_valid_.apply(pf)).clip(lower=y_linear)\n    predictions[coords] = y_preds_\n    RMSE[coords]=np.sqrt(np.sum(np.square(y_preds_-y_valid_)))\n    total_RMSE += np.sqrt(np.sum(np.square(y_preds_-y_valid_)))\n\n    \nprint(total_RMSE)","5fd3fd21":"train = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/train.csv', parse_dates=['Date'])\ntest  = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/test.csv',  parse_dates=['Date'])\n\ntrain.rename(columns={\n        'Id': 'id',\n        'Date': 'date',\n        'Province\/State':'state',\n        'Country\/Region':'country',\n        'Lat':'lat',\n        'Long': 'long',\n        'ConfirmedCases': 'confirmed',\n        'Fatalities':'deaths',\n        }, inplace=True)\n\ntest.rename(columns={\n        'ForecastId': 'id',\n        'Date': 'date',\n        'Province\/State':'state',\n        'Country\/Region':'country',\n        'Lat':'lat',\n        'Long': 'long',\n        }, inplace=True)\n\ntrain = train[train['date'] > pd.Timestamp('2020-03-01')]\n\ntrain['date'] = (train['date'] - pd.Timestamp('2020-03-01')).dt.days\ntest['date']  = (test['date'] - pd.Timestamp('2020-03-01')).dt.days\n\ntrain['lat-long'] = train['lat'].astype(str) + '-' + train['long'].astype(str)\ntest['lat-long'] = test['lat'].astype(str) + '-' + test['long'].astype(str)","db090671":"submission = pd.DataFrame()\nsubmission['lat-long'] = test['lat-long']\nsubmission.reset_index(inplace=True)\n\nsubmission['ConfirmedCases'] = 0\nsubmission['Fatalities'] = 0","1add3703":"all_coords = train['lat-long'].unique().tolist()\npredictions = dict()\nRMSE = dict()\ntotal_RMSE = 0\n\nfor coords in all_coords:\n    \n    X_train_ = train[train['lat-long']==coords]['date']#.values.reshape(-1,1)\n    y_train_ = train[train['lat-long']==coords]['confirmed']#.values.reshape(-1,1)\n    \n    X_test_ = test[test['lat-long']==coords]['date']#.values.reshape(-1,1)\n    \n    last_diff = y_train_.iloc[-1] - y_train_.iloc[-2]\n    y_linear = y_train_.iloc[-1] + last_diff*np.arange(1,len(X_test_)+1,1)\n    \n    z = np.polyfit(X_train_.values, y_train_.values, 3)\n    pf = np.poly1d(z)\n    \n    y_preds_ = np.round(X_test_.apply(pf)).clip(lower=y_linear)\n        \n    submission.loc[submission['lat-long']==coords,'ConfirmedCases'] = y_preds_","9a02c8f4":"all_coords = train['lat-long'].unique().tolist()\npredictions = dict()\nRMSE = dict()\ntotal_RMSE = 0\n\nfor coords in all_coords:\n    \n    X_train_ = train[train['lat-long']==coords]['date']#.values.reshape(-1,1)\n    y_train_ = train[train['lat-long']==coords]['deaths']#.values.reshape(-1,1)\n    \n    X_test_ = test[test['lat-long']==coords]['date']#.values.reshape(-1,1)\n    \n    last_diff = y_train_.iloc[-1] - y_train_.iloc[-2]\n    y_linear = y_train_.iloc[-1] + last_diff*np.arange(1,len(X_test_)+1,1)\n    \n    z = np.polyfit(X_train_.values, y_train_.values, 3)\n    pf = np.poly1d(z)\n    \n    y_preds_ = np.round(X_test_.apply(pf)).clip(lower=y_linear)\n    \n    submission.loc[submission['lat-long']==coords,'Fatalities'] = y_preds_","b01a6686":"submission.drop('lat-long', axis=1, inplace=True)\nsubmission['index'] = submission['index'] + 1\nsubmission.rename(columns={\n    'index' : 'ForecastId'}, inplace=True)","ebd71b1d":"submission","de1940cc":"submission.to_csv('submission.csv', index=False)","1520d8e8":"### Fatalities","e3031e1b":"### Confirmed cases","371d3b09":"### Confirmed cases","c3bb2b0e":"## Full model","2b5bd349":"### Deaths","d23b3310":"##  Data preprocessing","c7368487":"## Toy model "}}