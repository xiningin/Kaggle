{"cell_type":{"49a06383":"code","f8856a3e":"code","aa4250f8":"code","482ae8cb":"code","6a537ea6":"code","91c41b90":"code","33d199f6":"code","ae72c670":"code","55152b77":"markdown","08917575":"markdown","691069ee":"markdown","a21e6471":"markdown","315de6dc":"markdown","7ce1b761":"markdown","7722f57c":"markdown","ff783a49":"markdown","ab6116e9":"markdown"},"source":{"49a06383":"import tensorflow as tf\nimport numpy as np\nfrom keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D\nfrom keras.layers import Dense, Activation, Dropout, Flatten\nfrom keras import optimizers\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img\n\nusing_gpu = tf.test.is_gpu_available()\n\nif using_gpu:\n    print(\"Using GPU - performance boost activated\")\nelse:\n    print(\"Not using GPU - performance may be slower\")","f8856a3e":"IMG_SIZE = 100\n\nBATCH_SIZE = 32\nEPOCHS = 5\nLEARNING_RATE = 0.5\n\nTRAIN_SIZE = 8005\nTEST_SIZE = 2023\n\nTRAIN_DIR = '..\/input\/cat-and-dog\/training_set\/training_set'\nTEST_DIR = '..\/input\/cat-and-dog\/test_set\/test_set'\n\nprint(\"Hyperparameters set\")","aa4250f8":"datagen = ImageDataGenerator(rescale=1.\/255)\n\nprint(\"Training Set\")\ntrain_gen = datagen.flow_from_directory(\n    TRAIN_DIR,\n    target_size=(IMG_SIZE, IMG_SIZE),\n    classes=['dogs', 'cats'],\n    batch_size=BATCH_SIZE)\nprint(\"\")\n\nprint(\"Test Set\")\ntest_gen = datagen.flow_from_directory(\n    TEST_DIR,\n    target_size=(IMG_SIZE, IMG_SIZE),\n    classes=['dogs', 'cats'],\n    batch_size=BATCH_SIZE)","482ae8cb":"from keras.utils.vis_utils import plot_model\n\nmodel = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), input_shape=(IMG_SIZE, IMG_SIZE, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3, 3), input_shape=(IMG_SIZE, IMG_SIZE, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, (3, 3), input_shape=(IMG_SIZE, IMG_SIZE, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2))\nmodel.add(Activation('softmax'))\n\nmodel.compile(\n    loss='categorical_crossentropy',\n    optimizer='adam',\n    metrics=['accuracy'])\n\nprint(\"Visualizing model...\")\nmodel.summary()","6a537ea6":"training = model.fit_generator(\n    generator=train_gen,\n    steps_per_epoch= TRAIN_SIZE \/\/ BATCH_SIZE,\n    epochs=EPOCHS,\n    validation_data=test_gen,\n    validation_steps= TEST_SIZE \/\/ BATCH_SIZE)","91c41b90":"import matplotlib.pyplot as plt  \n\nfig, (ax0, ax1) = plt.subplots(ncols=2, figsize=(16,6))\n\n# loss history\nax0.plot(training.history['loss'])\nax0.plot(training.history['val_loss'])\nax0.set_title('Model Loss (lower is better)')\nax0.set_ylabel('Loss')\nax0.set_xlabel('Epoch')\nax0.legend(['Train', 'Test'], loc='upper right')\n\n#accuracy history\nax1.plot(training.history['accuracy'])\nax1.plot(training.history['val_accuracy'])\nax1.set_title('Model Accuracy (higher is better)')\nax1.set_ylabel('Accuracy')\nax1.set_xlabel('Epoch')\nax1.legend(['Train', 'Test'], loc='upper left')\n\nplt.show()","33d199f6":"import matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\n\ndef predict(img_path):\n    # show image\n    show_image = mpimg.imread(TEST_IMG_PATH)\n    imgplot = plt.imshow(show_image)\n\n    # resize image and turn into array\n    img = load_img(img_path, target_size=(IMG_SIZE, IMG_SIZE))\n    x = img_to_array(img)\n    x = x.reshape((1,) + x.shape)\n    x = x\/255\n    result = model.predict(x).tolist()\n\n    # make a prediction with confidence\n    if result[0][0] >= 0.5:\n        prediction = 'DOG \ud83d\udc36'\n        confidence = (\"{:.2%}\".format(result[0][0]))\n    else:\n        prediction = 'CAT \ud83d\udc31'\n        confidence = (\"{:.2%}\".format(result[0][1]))\n        \n    print(\"I am {0} confident that this is a {1}\".format(confidence, prediction))\n    \nprint(\"Prediction function ready\")","ae72c670":"TEST_IMG_PATH = \"..\/input\/cat-and-dog\/test_set\/test_set\/cats\/cat.4015.jpg\"\n\npredict(TEST_IMG_PATH)","55152b77":"# 2. \ud83c\udf9b\ufe0f Defining our Hyperparameters\n\nTwo values are very important to us for determining success while training:\n- \u274c **Loss** - the penalty for a bad prediction. **We want closer to 0**.\n- \u2705 **Accuracy** - the fraction of predictions that our model got right. **We want closer to 1**\n\nHow does our model learn?\n- We need to find what weights for what features are important. (e.g. Cat whiskers, Dog's snout)\n- Weights have numerical value and can be optimized using a process called **Gradient Descent**.\n\n**Hyperparameters** are the knobs that programmers tweak in machine learning algorithms.\n- **Batch Size** - a number of samples processed before the model is updated\n- **Epochs** - the number of complete passes through the training dataset\n- **Learning Rate** - A scalar used to train a model via gradient descent. [Interactive Example](https:\/\/developers.google.com\/machine-learning\/crash-course\/fitter\/graph)","08917575":"You will notice that our model may be inaccurate and have mixed results. How can we improve the results?\n\n- Longer training\n- More data\n- *Transfer Learning","691069ee":"# 1. \ud83d\udce6 Importing Packages\n\n- **[Python](https:\/\/www.python.org\/)** - a high level programming language. Great for beginners and data scientists. All the code in this notebook is in Python.\n- **[Jupyter Notebook](https:\/\/jupyter-notebook.readthedocs.io\/)** - an interactive document that allows us to execute code and display rich media. We are in one now.\n- **[Tensorflow](https:\/\/www.tensorflow.org\/)** - An open-source machine learning library created by Google.\n- **[Keras](https:\/\/keras.io\/)** - A neural network library built on top of Tensorflow with a very human-friendly API.\n\n> Note: Make sure that you click on \"...\" in the top right and set the **Accelerator** to **GPU** for added performance","a21e6471":"# 7. \ud83d\udd2e Try out your Model!","315de6dc":"# 3. \ud83d\uddbc\ufe0f Gathering our Training Images\n\nWith Keras, we can easily bring in our training and test images.\n","7ce1b761":"# 6. \ud83d\udcc9 Visualizing Training Results\n\n- We can visualise the loss\/accuracy graphs for the model on both the training and testing dataset.\n- We want to minimise loss and maximise accuracy on the test set.","7722f57c":"# \ud83d\udc31\ud83d\udc36 Cat or Dog Machine Learning Exercise (Part I)\n\nToday we are going to train a function that can help answer the age-old question: \"**Is this image a CAT or a DOG**?\" \ud83e\udd14\n\nWe will achieve this feat using minimal data and time by training a **Convolutional Neural Network (CNN)**, a type of neural network that is quite effective at image classification.\n\nWe are going to do something called **Supervised Machine Learning**, where we will use pre-labelled data.","ff783a49":"# 5. \ud83c\udfcb\ufe0f Run Training\n\n- **Loss** - a number indicating how bad the model's prediction was on a single example. We want closer to 0.\n- **Accuracy** - the fraction of predictions our model got right. We want closer to 1.\n- **Val Loss** - the loss computed on the validation set (data that have never been 'seen' by the model)\n- **Val Accuracy** - the accuracy computed on the validation set (data that have never been 'seen' by the model)","ab6116e9":"# 4. \ud83e\udd16 Building the Model"}}