{"cell_type":{"7326a014":"code","03d6dcb0":"code","b11f7447":"code","b2f04c1e":"code","6d77f061":"code","db5018b5":"code","a3b0f603":"code","c21c24e5":"code","62cde575":"code","ad5ef4ca":"code","6574f285":"code","df5164da":"code","6f4ed813":"code","426b95ee":"code","6fed4c94":"code","7f274ec8":"markdown","f39ffd77":"markdown","45984aec":"markdown","0c1882bc":"markdown","5bb641a1":"markdown","7a9b7b2e":"markdown","76ac897a":"markdown","57c5d4d5":"markdown","790390cb":"markdown","2ed20372":"markdown","13644202":"markdown"},"source":{"7326a014":"# work with maps\n#!pip install folium","03d6dcb0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # datavizualization\nimport seaborn as sns # datavizualization\nimport folium\nimport json\nimport requests\nimport geopandas\nimport os\nfrom branca.colormap import linear\n\ndf = pd.read_csv(\"..\/input\/apartment-rental-offers-in-germany\/immo_data.csv\")","b11f7447":"# Coordinates of Capital of States\ndf2 = pd.DataFrame(np.array([[1,\"Stuttgart\", 48.78, 9.18],\n                             [2,\"Munich\", 48.133333, 11.566667],\n                             [3,\"Berlin\", 52.52, 13.405],\n                             [16,\"Erfurt\",50.983333, 11.033333],\n                             [15,\"Kiel\",54.323333, 10.139444],\n                             [14,\"Magdeburg\",52.133333, 11.616667],\n                             [13,\"Dresden\",51.033333, 13.733333],\n                             [12,\"Saarbr\u00fccken\",49.233333, 7],\n                             [11,\"Mainz\",50, 8.266667],\n                             [10,\"D\u00fcsseldorf\",51.233333, 6.783333],\n                             [9,\"Hanover\",52.366667, 9.716667],\n                             [8,\"Schwerin\",53.633333, 11.416667],\n                             [7,\"Wiesbaden\",50.0825, 8.24],\n                             [6,\"Hamburg\",53.565278, 10.001389],\n                             [5,\"Bremen\",53.083333, 8.8],\n                             [4,\"Potsdam\",52.4, 13.066667],\n                            ]), \n                   columns=['ID_1','city', 'lat', 'lon'])","b2f04c1e":"df['regio1'] = df['regio1'].str.replace('_','-')","6d77f061":"datarows_original = df.shape[0]\nprint(\"We have {} appartments\/rows\".format(datarows_original))","db5018b5":"df = df.drop(['description',\n              'facilities', \n              'picturecount',\n              'telekomHybridUploadSpeed', \n              'houseNumber',\n              'telekomTvOffer', \n              'telekomUploadSpeed', \n              'streetPlain', \n              'firingTypes', \n              'pricetrend',\n              'baseRentRange', \n              'noRoomsRange', \n              'thermalChar',\n              'date',\n              'yearConstructedRange',\n              'livingSpaceRange'], axis=1)             ","a3b0f603":"df = df[df.baseRent.between(100,10000, inclusive=True)] #drop extreme rent values\ndf = df[df.livingSpace.between(10, 500, inclusive=True)] #drop extreme and wrongly coded values\ndf = df[df.floor.between(-1, 50, inclusive=True)] #drop extreme and wrongly coded values\ndf = df[df.yearConstructed.between(1900, 2020, inclusive=True)] #drop extreme and wrongly coded values\ndf = df[df.noRooms.between(0,15, inclusive=True)] #drop extreme and probably wrongly coded value\ndf = df[np.isfinite(df['totalRent'])] #drop observations where totalRent isn't available\ndf = df[df.totalRent.between(100,10000, inclusive=True)] #drop extreme totalRent value\n","c21c24e5":"#df.to_excel(\"imm_data.xlsx\", sheet_name='data')","62cde575":"datarows_current=df.shape[0]\nprint(\"We have {} appartments\/rows\".format(datarows_current))\nprint(\"Procentage of lost: {} \".format((1-datarows_current\/datarows_original)*100))\n","ad5ef4ca":"# Setting a base map\ngdf = geopandas.read_file(\"..\/input\/germany-geo-json\/gr.json\")\ngdf = gdf.drop(['ID_0','VARNAME_1','ISO','ISO','NAME_0','NL_NAME_1','TYPE_1','ENGTYPE_1'], axis=1) \ngdf.rename(columns={'NAME_1': 'State'}, inplace=True)\ngdf","6574f285":"# calculating median price per state\ndf.rename(columns={'regio1': 'State'}, inplace=True)\nmedianPrice  = pd.DataFrame(df.groupby(['State'])['totalRent'].mean().astype(int))\nmedianPrice = medianPrice.reset_index()\nmedianPrice.columns = ['State', 'Median_price']\nmedianPrice","df5164da":"colormap = linear.OrRd_04.scale(\n    medianPrice.Median_price.min(),\n    medianPrice.Median_price.max())\ncolormap","6f4ed813":"medianPrice_dict = medianPrice.set_index('State')['Median_price']\nmedianPrice_dict","426b95ee":"color_dict = {key: colormap(medianPrice_dict[key]) for key in medianPrice_dict.keys()}\ncolor_dict","6fed4c94":"base_m = folium.Map([51.3, 9.5],tiles='cartodbpositron', zoom_start=6, control_scale=True, attr='Mapbox attribution',smooth_factor=None)\n\nfolium.GeoJson(\n    gdf,\n    name='Finnish cities',\n    show=True,\n    style_function=lambda feature: {\n        'fillColor': color_dict[feature['properties']['State']], \n        'color': '#964B00',\n        'weight': 1,\n        'dashArray': '1, 1',\n        'fillOpacity':0.8\n    },\n    highlight_function=lambda x: {'weight':3,\n        'color': '#964B00',\n        'fillOpacity': 1\n    },\n    \n    tooltip=folium.features.GeoJsonTooltip(\n        fields = ['State'],\n        aliases=['State:'],\n    )    \n).add_to(base_m)\n\ncolormap.caption = 'Mean appartment rent price color scale'\ncolormap.add_to(base_m)\n\n\n# add markers with basic information\nfg = folium.FeatureGroup(name='State Info')\nfor index,row in df2.iterrows():\n    fg.add_child(folium.Marker(location=[row[2], row[3]], tooltip=row[1] )) #icon=folium.Icon(color='darkblue', icon='point')\nbase_m.add_child(fg)\n\nbase_m.add_child(folium.LatLngPopup())\nbase_m.save('base_map.html')\n\nbase_m","7f274ec8":"Modify states names","f39ffd77":"We lost about 46% of data.","45984aec":"Let's drop useless data for this type of analysis","0c1882bc":"Explore via visualization","5bb641a1":"**DATASET LOADING**","7a9b7b2e":"Create dictionary","76ac897a":"Map is saved as **base_map.html**","57c5d4d5":"Dowload excel file (if needed)","790390cb":"Some basic statistics","2ed20372":"Rename columns and find Median price per state","13644202":"**IDEA**\nVizualize median price of the appartments rental price in Germany per state on the geo map.\n"}}