{"cell_type":{"40430986":"code","da1f8153":"code","65ee4ae1":"code","1d04031b":"code","317bab17":"code","1249ba89":"code","98ac5af7":"code","2a9166fc":"code","bed9c627":"code","db289b50":"code","18833acc":"code","4068c6bc":"code","383e3902":"code","30dcee87":"code","217452ea":"code","3bb70613":"code","51152113":"code","6c91a633":"code","acf063e9":"code","20f79425":"code","0514cb7a":"code","fcbc9d3e":"code","5ef85df4":"code","ff8535a2":"code","00da3790":"code","864872bb":"code","8509c9ba":"code","ac98ad10":"code","e3926e31":"code","05b05e82":"code","1bb31ca0":"code","f43e943f":"code","6288a6c2":"code","b7ed42e4":"code","eb14509d":"code","ec9b7bf8":"code","4406704a":"code","fa92f6a4":"code","1e222f0a":"code","8f13c26b":"code","42f7f232":"code","aab7c813":"code","6e854f53":"code","ff47df2c":"code","691be678":"code","1685f3f6":"code","66c31370":"code","5e998a22":"code","4c99661f":"code","cbc4a802":"code","b64141b0":"markdown","e4cd875d":"markdown","e3090f96":"markdown","6b617bc9":"markdown","8ebe5822":"markdown","58dec2a2":"markdown","720c1840":"markdown","619663b5":"markdown","2dda1477":"markdown","71787388":"markdown","112e9579":"markdown","f0591365":"markdown","0d3712da":"markdown","9b0aff13":"markdown","7b5f18b0":"markdown","4747cbf6":"markdown","c91734b7":"markdown","6510a69a":"markdown","4ae6af3a":"markdown","1a0eb173":"markdown","a8b34a9a":"markdown","dd4ddf41":"markdown","09cc9956":"markdown","19f6b5e7":"markdown","1c64999f":"markdown","63fed18e":"markdown","56107337":"markdown","3577e401":"markdown","ef3eb5cc":"markdown","ef5a2b38":"markdown","82a0e5ab":"markdown","06d12d91":"markdown","2faa4028":"markdown","8a7a8a23":"markdown"},"source":{"40430986":"# test_features = pd.read_csv(\"..\/input\/lish-moa\/test_features.csv\")\n\n# if test_features.shape[0] == 3982:\n#     print(\"Running for ONE SEED...\")\n#     SEED = [0] # 1 SEED only during commit\n# else:\n#     SEED = [0, 1, 2, 3, 4, 5, 6] # 7 SEED during inference as test_features.csv will be replaced by another file","da1f8153":"import sys\nsys.path.append('..\/input\/iterativestratification')\n\nimport numpy as np\nimport random\nimport pandas as pd\nimport os\nimport copy\nimport gc\n\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfrom sklearn import preprocessing\nfrom sklearn.metrics import log_loss\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.feature_selection import VarianceThreshold\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch.nn.modules.loss import _WeightedLoss\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nos.listdir('..\/input\/lish-moa')\n\npd.set_option('max_columns', 2000)","65ee4ae1":"n_comp_GENES = 463\nn_comp_CELLS = 60\nVarianceThreshold_for_FS = 0.01\nDropout_Model = 0.25\nprint('n_comp_GENES', n_comp_GENES, 'n_comp_CELLS', n_comp_CELLS, 'total', n_comp_GENES + n_comp_CELLS)","1d04031b":"commits_df = pd.DataFrame(columns = ['n_commit', 'n_comp_GENES', 'n_comp_CELLS', 'train_features','VarianceThreshold_for_FS', 'Dropout_Model', 'LB_score', 'CV_logloss'])","317bab17":"n=0\ncommits_df.loc[n, 'n_commit'] = 0                       # Number of commit\ncommits_df.loc[n, 'n_comp_GENES'] = 600                 # Number of output features for PCA for g-features\ncommits_df.loc[n, 'n_comp_CELLS'] = 50                  # Number of output features for PCA for c-features\ncommits_df.loc[n, 'VarianceThreshold_for_FS'] = 0.8     # Threshold for VarianceThreshold for feature selection\ncommits_df.loc[n, 'train_features'] = 1245              # Number features in the training dataframe after FE and before modeling\ncommits_df.loc[n, 'Dropout_Model'] = 0.2619422201258426 # Dropout in Model\ncommits_df.loc[n, 'CV_logloss'] = 0.01458269555140327   # Result CV logloss metrics\ncommits_df.loc[n, 'LB_score'] = 0.01839                 # LB score after submitting","1249ba89":"n=1\ncommits_df.loc[n, 'n_commit'] = 4\ncommits_df.loc[n, 'n_comp_GENES'] = 610\ncommits_df.loc[n, 'n_comp_CELLS'] = 55\ncommits_df.loc[n, 'VarianceThreshold_for_FS'] = 0.82\ncommits_df.loc[n, 'train_features'] = 1240\ncommits_df.loc[n, 'Dropout_Model'] = 0.25\ncommits_df.loc[n, 'CV_logloss'] =  0.014584545081734047\ncommits_df.loc[n, 'LB_score'] = 0.01839","98ac5af7":"n=2\ncommits_df.loc[n, 'n_commit'] = 5\ncommits_df.loc[n, 'n_comp_GENES'] = 670\ncommits_df.loc[n, 'n_comp_CELLS'] = 67\ncommits_df.loc[n, 'VarianceThreshold_for_FS'] = 0.67\ncommits_df.loc[n, 'train_features'] = 1298\ncommits_df.loc[n, 'Dropout_Model'] = 0.25\ncommits_df.loc[n, 'CV_logloss'] =  0.014588561242139069\ncommits_df.loc[n, 'LB_score'] = 0.01840","2a9166fc":"n=3\ncommits_df.loc[n, 'n_commit'] = 6\ncommits_df.loc[n, 'n_comp_GENES'] = 450\ncommits_df.loc[n, 'n_comp_CELLS'] = 45\ncommits_df.loc[n, 'VarianceThreshold_for_FS'] = 0.67\ncommits_df.loc[n, 'train_features'] = 1297\ncommits_df.loc[n, 'Dropout_Model'] = 0.25\ncommits_df.loc[n, 'CV_logloss'] =  0.014586229676302227\ncommits_df.loc[n, 'LB_score'] = 0.01840","bed9c627":"n=4\ncommits_df.loc[n, 'n_commit'] = 9\ncommits_df.loc[n, 'n_comp_GENES'] = 463\ncommits_df.loc[n, 'n_comp_CELLS'] = 60\ncommits_df.loc[n, 'VarianceThreshold_for_FS'] = 0.9\ncommits_df.loc[n, 'train_features'] = 1219\ncommits_df.loc[n, 'Dropout_Model'] = 0.25\ncommits_df.loc[n, 'CV_logloss'] =  0.014572358066092783\ncommits_df.loc[n, 'LB_score'] = 0.01839","db289b50":"n=5\ncommits_df.loc[n, 'n_commit'] = 10\ncommits_df.loc[n, 'n_comp_GENES'] = 463\ncommits_df.loc[n, 'n_comp_CELLS'] = 80\ncommits_df.loc[n, 'VarianceThreshold_for_FS'] = 0.92\ncommits_df.loc[n, 'train_features'] = 1214\ncommits_df.loc[n, 'Dropout_Model'] = 0.25\ncommits_df.loc[n, 'CV_logloss'] =  0.014571552074579226\ncommits_df.loc[n, 'LB_score'] = 0.01841","18833acc":"n=6\ncommits_df.loc[n, 'n_commit'] = 12\ncommits_df.loc[n, 'n_comp_GENES'] = 450\ncommits_df.loc[n, 'n_comp_CELLS'] = 65\ncommits_df.loc[n, 'VarianceThreshold_for_FS'] = 0.9\ncommits_df.loc[n, 'train_features'] = 1219\ncommits_df.loc[n, 'Dropout_Model'] = 0.25\ncommits_df.loc[n, 'CV_logloss'] = 0.01458043214513875\ncommits_df.loc[n, 'LB_score'] = 0.01840","4068c6bc":"commits_df['n_comp_total'] = commits_df['n_comp_GENES'] + commits_df['n_comp_CELLS']\ncommits_df['seed'] = 42","383e3902":"# Find and mark minimun value of LB score\ncommits_df['LB_score'] = pd.to_numeric(commits_df['LB_score'])\ncommits_df = commits_df.sort_values(by=['LB_score', 'CV_logloss'], ascending = True).reset_index(drop=True)\ncommits_df['min'] = 0\ncommits_df.loc[0, 'min'] = 1\ncommits_df","30dcee87":"commits_df.sort_values(by=['CV_logloss'], ascending = True)","217452ea":"# Interactive plot with results of parameters tuning\nfig = px.scatter_3d(commits_df, x='n_comp_GENES', y='n_comp_CELLS', z='LB_score', color = 'min', \n                    symbol = 'Dropout_Model',\n                    title='Parameters and LB score visualization of MoA solutions')\nfig.update(layout=dict(title=dict(x=0.1)))","3bb70613":"# Interactive plot with results of parameters tuning\nfig = px.scatter_3d(commits_df, x='train_features', y='VarianceThreshold_for_FS', z='LB_score', color = 'min', \n                    symbol = 'seed',\n                    title='Parameters and LB score visualization of MoA solutions')\nfig.update(layout=dict(title=dict(x=0.1)))","51152113":"# Interactive plot with results of parameters tuning\nfig = px.scatter_3d(commits_df, x='train_features', y='CV_logloss', z='LB_score', color = 'min', \n                    symbol = 'seed',\n                    title='Parameters and LB score visualization of MoA solutions')\nfig.update(layout=dict(title=dict(x=0.1)))","6c91a633":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets_scored = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntrain_targets_nonscored = pd.read_csv('..\/input\/lish-moa\/train_targets_nonscored.csv')\n\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\nsample_submission = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')","acf063e9":"GENES = [col for col in train_features.columns if col.startswith('g-')]\nCELLS = [col for col in train_features.columns if col.startswith('c-')]","20f79425":"# RankGauss - transform to Gauss\n\nfor col in (GENES + CELLS):\n\n    transformer = QuantileTransformer(n_quantiles=100,random_state=0, output_distribution=\"normal\")\n    vec_len = len(train_features[col].values)\n    vec_len_test = len(test_features[col].values)\n    raw_vec = train_features[col].values.reshape(vec_len, 1)\n    transformer.fit(raw_vec)\n\n    train_features[col] = transformer.transform(raw_vec).reshape(1, vec_len)[0]\n    test_features[col] = transformer.transform(test_features[col].values.reshape(vec_len_test, 1)).reshape(1, vec_len_test)[0]","0514cb7a":"def seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    \nseed_everything(seed=42)","fcbc9d3e":"len(GENES)","5ef85df4":"# GENES\n\ndata = pd.concat([pd.DataFrame(train_features[GENES]), pd.DataFrame(test_features[GENES])])\ndata2 = (PCA(n_components=n_comp_GENES, random_state=42).fit_transform(data[GENES]))\ntrain2 = data2[:train_features.shape[0]]; test2 = data2[-test_features.shape[0]:]\n\ntrain2 = pd.DataFrame(train2, columns=[f'pca_G-{i}' for i in range(n_comp_GENES)])\ntest2 = pd.DataFrame(test2, columns=[f'pca_G-{i}' for i in range(n_comp_GENES)])\n\ntrain_features = pd.concat((train_features, train2), axis=1)\ntest_features = pd.concat((test_features, test2), axis=1)","ff8535a2":"len(CELLS)","00da3790":"# CELLS\n\ndata = pd.concat([pd.DataFrame(train_features[CELLS]), pd.DataFrame(test_features[CELLS])])\ndata2 = (PCA(n_components=n_comp_CELLS, random_state=42).fit_transform(data[CELLS]))\ntrain2 = data2[:train_features.shape[0]]; test2 = data2[-test_features.shape[0]:]\n\ntrain2 = pd.DataFrame(train2, columns=[f'pca_C-{i}' for i in range(n_comp_CELLS)])\ntest2 = pd.DataFrame(test2, columns=[f'pca_C-{i}' for i in range(n_comp_CELLS)])\n\ntrain_features = pd.concat((train_features, train2), axis=1)\ntest_features = pd.concat((test_features, test2), axis=1)","864872bb":"train_features.shape","8509c9ba":"train_features.head(5)","ac98ad10":"var_thresh = VarianceThreshold(VarianceThreshold_for_FS)\ndata = train_features.append(test_features)\ndata_transformed = var_thresh.fit_transform(data.iloc[:, 4:])\n\ntrain_features_transformed = data_transformed[ : train_features.shape[0]]\ntest_features_transformed = data_transformed[-test_features.shape[0] : ]\n\n\ntrain_features = pd.DataFrame(train_features[['sig_id','cp_type','cp_time','cp_dose']].values.reshape(-1, 4),\\\n                              columns=['sig_id','cp_type','cp_time','cp_dose'])\n\ntrain_features = pd.concat([train_features, pd.DataFrame(train_features_transformed)], axis=1)\n\n\ntest_features = pd.DataFrame(test_features[['sig_id','cp_type','cp_time','cp_dose']].values.reshape(-1, 4),\\\n                             columns=['sig_id','cp_type','cp_time','cp_dose'])\n\ntest_features = pd.concat([test_features, pd.DataFrame(test_features_transformed)], axis=1)\n\ntrain_features.shape","e3926e31":"train_features.head(5)","05b05e82":"train = train_features.merge(train_targets_scored, on='sig_id')\ntrain = train[train['cp_type']!='ctl_vehicle'].reset_index(drop=True)\ntest = test_features[test_features['cp_type']!='ctl_vehicle'].reset_index(drop=True)\n\ntarget = train[train_targets_scored.columns]","1bb31ca0":"train = train.drop('cp_type', axis=1)\ntest = test.drop('cp_type', axis=1)","f43e943f":"train.head(5)","6288a6c2":"target_cols = target.drop('sig_id', axis=1).columns.values.tolist()","b7ed42e4":"folds = train.copy()\n\nmskf = MultilabelStratifiedKFold(n_splits=7) #7\n\nfor f, (t_idx, v_idx) in enumerate(mskf.split(X=train, y=target)):\n    folds.loc[v_idx, 'kfold'] = int(f)\n\nfolds['kfold'] = folds['kfold'].astype(int)\nfolds","eb14509d":"print(train.shape)\nprint(folds.shape)\nprint(test.shape)\nprint(target.shape)\nprint(sample_submission.shape)","ec9b7bf8":"class MoADataset:\n    def __init__(self, features, targets):\n        self.features = features\n        self.targets = targets\n        \n    def __len__(self):\n        return (self.features.shape[0])\n    \n    def __getitem__(self, idx):\n        dct = {\n            'x' : torch.tensor(self.features[idx, :], dtype=torch.float),\n            'y' : torch.tensor(self.targets[idx, :], dtype=torch.float)            \n        }\n        return dct\n    \nclass TestDataset:\n    def __init__(self, features):\n        self.features = features\n        \n    def __len__(self):\n        return (self.features.shape[0])\n    \n    def __getitem__(self, idx):\n        dct = {\n            'x' : torch.tensor(self.features[idx, :], dtype=torch.float)\n        }\n        return dct\n    ","4406704a":"def train_fn(model, optimizer, scheduler, loss_fn, dataloader, device):\n    model.train()\n    final_loss = 0\n    \n    for data in dataloader:\n        optimizer.zero_grad()\n        inputs, targets = data['x'].to(device), data['y'].to(device)\n        outputs = model(inputs)\n        loss = loss_fn(outputs, targets)\n        loss.backward()\n        optimizer.step()\n        scheduler.step()\n        \n        final_loss += loss.item()\n        \n    final_loss \/= len(dataloader)\n    \n    return final_loss\n\n\ndef valid_fn(model, loss_fn, dataloader, device):\n    model.eval()\n    final_loss = 0\n    valid_preds = []\n    \n    for data in dataloader:\n        inputs, targets = data['x'].to(device), data['y'].to(device)\n        outputs = model(inputs)\n        loss = loss_fn(outputs, targets)\n        \n        final_loss += loss.item()\n        valid_preds.append(outputs.sigmoid().detach().cpu().numpy())\n        \n    final_loss \/= len(dataloader)\n    valid_preds = np.concatenate(valid_preds)\n    \n    return final_loss, valid_preds\n\ndef inference_fn(model, dataloader, device):\n    model.eval()\n    preds = []\n    \n    for data in dataloader:\n        inputs = data['x'].to(device)\n\n        with torch.no_grad():\n            outputs = model(inputs)\n        \n        preds.append(outputs.sigmoid().detach().cpu().numpy())\n        \n    preds = np.concatenate(preds)\n    \n    return preds","fa92f6a4":"class SmoothBCEwLogits(_WeightedLoss):\n    def __init__(self, weight=None, reduction='mean', smoothing=0.0):\n        super().__init__(weight=weight, reduction=reduction)\n        self.smoothing = smoothing\n        self.weight = weight\n        self.reduction = reduction\n\n    @staticmethod\n    def _smooth(targets:torch.Tensor, n_labels:int, smoothing=0.0):\n        assert 0 <= smoothing < 1\n        with torch.no_grad():\n            targets = targets * (1.0 - smoothing) + 0.5 * smoothing\n        return targets\n\n    def forward(self, inputs, targets):\n        targets = SmoothBCEwLogits._smooth(targets, inputs.size(-1),\n            self.smoothing)\n        loss = F.binary_cross_entropy_with_logits(inputs, targets,self.weight)\n\n        if  self.reduction == 'sum':\n            loss = loss.sum()\n        elif  self.reduction == 'mean':\n            loss = loss.mean()\n\n        return loss","1e222f0a":"def process_data(data):\n    data = pd.get_dummies(data, columns=['cp_time','cp_dose'])\n    return data","8f13c26b":"feature_cols = [c for c in process_data(folds).columns if c not in target_cols]\nfeature_cols = [c for c in feature_cols if c not in ['kfold','sig_id']]\nlen(feature_cols)","42f7f232":"# HyperParameters\n\nDEVICE = ('cuda' if torch.cuda.is_available() else 'cpu')\nEPOCHS = 25\nBATCH_SIZE = 128\nLEARNING_RATE = 1e-3\nWEIGHT_DECAY = 1e-5\nNFOLDS = 7 #7\nEARLY_STOPPING_STEPS = 10\nEARLY_STOP = False\n\nnum_features=len(feature_cols)\nnum_targets=len(target_cols)\nhidden_size=1500","aab7c813":"class Model(nn.Module):\n    def __init__(self, num_features, num_targets, hidden_size):\n        super(Model, self).__init__()\n        self.batch_norm1 = nn.BatchNorm1d(num_features)\n        self.dense1 = nn.utils.weight_norm(nn.Linear(num_features, hidden_size))\n        \n        self.batch_norm2 = nn.BatchNorm1d(hidden_size)\n        self.dropout2 = nn.Dropout(Dropout_Model)\n        self.dense2 = nn.utils.weight_norm(nn.Linear(hidden_size, hidden_size))\n        \n        self.batch_norm3 = nn.BatchNorm1d(hidden_size)\n        self.dropout3 = nn.Dropout(Dropout_Model)\n        self.dense3 = nn.utils.weight_norm(nn.Linear(hidden_size, num_targets))\n    \n    def forward(self, x):\n        x = self.batch_norm1(x)\n        x = F.leaky_relu(self.dense1(x))\n        \n        x = self.batch_norm2(x)\n        x = self.dropout2(x)\n        x = F.leaky_relu(self.dense2(x))\n        \n        x = self.batch_norm3(x)\n        x = self.dropout3(x)\n        x = self.dense3(x)\n        \n        return x\n    \nclass LabelSmoothingLoss(nn.Module):\n    def __init__(self, classes, smoothing=0.0, dim=-1):\n        super(LabelSmoothingLoss, self).__init__()\n        self.confidence = 1.0 - smoothing\n        self.smoothing = smoothing\n        self.cls = classes\n        self.dim = dim\n\n    def forward(self, pred, target):\n        pred = pred.log_softmax(dim=self.dim)\n        with torch.no_grad():\n            true_dist = torch.zeros_like(pred)\n            true_dist.fill_(self.smoothing \/ (self.cls - 1))\n            true_dist.scatter_(1, target.data.unsqueeze(1), self.confidence)\n        return torch.mean(torch.sum(-true_dist * pred, dim=self.dim))    ","6e854f53":"def run_training(fold, seed):\n    \n    seed_everything(seed)\n    \n    train = process_data(folds)\n    test_ = process_data(test)\n    \n    trn_idx = train[train['kfold'] != fold].index\n    val_idx = train[train['kfold'] == fold].index\n    \n    train_df = train[train['kfold'] != fold].reset_index(drop=True)\n    valid_df = train[train['kfold'] == fold].reset_index(drop=True)\n    \n    x_train, y_train  = train_df[feature_cols].values, train_df[target_cols].values\n    x_valid, y_valid =  valid_df[feature_cols].values, valid_df[target_cols].values\n    \n    train_dataset = MoADataset(x_train, y_train)\n    valid_dataset = MoADataset(x_valid, y_valid)\n    trainloader = torch.utils.data.DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\n    validloader = torch.utils.data.DataLoader(valid_dataset, batch_size=BATCH_SIZE, shuffle=False)\n    \n    model = Model(\n        num_features=num_features,\n        num_targets=num_targets,\n        hidden_size=hidden_size,\n    )\n    \n    model.to(DEVICE)\n    \n    optimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=WEIGHT_DECAY)\n    scheduler = optim.lr_scheduler.OneCycleLR(optimizer=optimizer, pct_start=0.1, div_factor=1e3, \n                                              max_lr=1e-2, epochs=EPOCHS, steps_per_epoch=len(trainloader))\n    \n    loss_fn = nn.BCEWithLogitsLoss()\n    loss_tr = SmoothBCEwLogits(smoothing =0.001)\n    \n    early_stopping_steps = EARLY_STOPPING_STEPS\n    early_step = 0\n   \n    oof = np.zeros((len(train), target.iloc[:, 1:].shape[1]))\n    best_loss = np.inf\n    \n    for epoch in range(EPOCHS):\n        \n        train_loss = train_fn(model, optimizer,scheduler, loss_tr, trainloader, DEVICE)\n        valid_loss, valid_preds = valid_fn(model, loss_fn, validloader, DEVICE)\n        print(f\"FOLD: {fold}, EPOCH: {epoch}, train_loss: {train_loss}, valid_loss: {valid_loss}\")\n        \n        if valid_loss < best_loss:\n            \n            best_loss = valid_loss\n            oof[val_idx] = valid_preds\n            torch.save(model.state_dict(), f\"FOLD{fold}_.pth\")\n        \n        elif(EARLY_STOP == True):\n            \n            early_step += 1\n            if (early_step >= early_stopping_steps):\n                break\n            \n    \n    #--------------------- PREDICTION---------------------\n    x_test = test_[feature_cols].values\n    testdataset = TestDataset(x_test)\n    testloader = torch.utils.data.DataLoader(testdataset, batch_size=BATCH_SIZE, shuffle=False)\n    \n    model = Model(\n        num_features=num_features,\n        num_targets=num_targets,\n        hidden_size=hidden_size,\n\n    )\n    \n    model.load_state_dict(torch.load(f\"FOLD{fold}_.pth\"))\n    model.to(DEVICE)\n    \n    predictions = np.zeros((len(test_), target.iloc[:, 1:].shape[1]))\n    predictions = inference_fn(model, testloader, DEVICE)\n    \n    return oof, predictions\n","ff47df2c":"def run_k_fold(NFOLDS, seed):\n    oof = np.zeros((len(train), len(target_cols)))\n    predictions = np.zeros((len(test), len(target_cols)))\n    \n    for fold in range(NFOLDS):\n        oof_, pred_ = run_training(fold, seed)\n        \n        predictions += pred_ \/ NFOLDS\n        oof += oof_\n        \n    return oof, predictions","691be678":"# Averaging on multiple SEEDS\n\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\n\nif test_features.shape[0] == 3982:\n    print(\"Running for ONE SEED...\")\n    SEED = [0] # 1 SEED only during commit\nelse:\n    SEED = [0, 1, 2, 3, 4, 5, 6] # 7 SEED during inference as test_features.csv will be replaced by another file\n    \n    \noof = np.zeros((len(train), len(target_cols)))\npredictions = np.zeros((len(test), len(target_cols)))\n\nfor seed in SEED:\n    \n    oof_, predictions_ = run_k_fold(NFOLDS, seed)\n    oof += oof_ \/ len(SEED)\n    predictions += predictions_ \/ len(SEED)\n\ntrain[target_cols] = oof\ntest[target_cols] = predictions\n","1685f3f6":"train_targets_scored","66c31370":"len(target_cols)\n","5e998a22":"valid_results = train_targets_scored.drop(columns=target_cols).merge(train[['sig_id']+target_cols], on='sig_id', how='left').fillna(0)\n\ny_true = train_targets_scored[target_cols].values\ny_pred = valid_results[target_cols].values\n\nscore = 0\nfor i in range(len(target_cols)):\n    score_ = log_loss(y_true[:, i], y_pred[:, i])\n    score += score_ \/ target.shape[1]\n    \nprint(\"CV log_loss: \", score)    ","4c99661f":"sub = sample_submission.drop(columns=target_cols).merge(test[['sig_id']+target_cols], on='sig_id', how='left').fillna(0)\nsub.to_csv('submission.csv', index=False)","cbc4a802":"sub.shape","b64141b0":"### 4.4 FS by Variance Encoding<a class=\"anchor\" id=\"4.4\"><\/a>\n\n[Back to Table of Contents](#0.1)","e4cd875d":"### 2.1. Commit now <a class=\"anchor\" id=\"2.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","e3090f96":"### 4.6 Dataset Classes<a class=\"anchor\" id=\"4.6\"><\/a>\n\n[Back to Table of Contents](#0.1)","6b617bc9":"## 3. Download data<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","8ebe5822":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [My upgrade](#2)\n    -  [Commit now](#2.1)\n    -  [Previous commits](#2.2)\n    -  [Parameters and LB score visualization](#2.3)\n1. [Download data](#3)\n1. [FE & Data Preprocessing](#4)\n    - [RankGauss](#4.1)\n    - [Seed](#4.2)    \n    - [PCA features](#4.3)\n    - [FS by Variance Encoding](#4.4)\n    - [CV folds](#4.5)\n    - [Dataset Classes](#4.6)\n    - [Smoothing](#4.7)\n    - [Preprocessing](#4.8)\n1. [Modeling](#5)\n1. [Prediction & Submission](#6)","58dec2a2":"### 4.7 Smoothing<a class=\"anchor\" id=\"4.7\"><\/a>\n\n[Back to Table of Contents](#0.1)","720c1840":"### Commit 6","619663b5":"### Commit 9","2dda1477":"### 2.3 Parameters and LB score visualization <a class=\"anchor\" id=\"2.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","71787388":"## 2. My upgrade <a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","112e9579":"### I use the notebook [Pytorch CV|0.0145| LB| 0.01839 |](https:\/\/www.kaggle.com\/riadalmadani\/pytorch-cv-0-0145-lb-0-01839) from [riadalmadani](https:\/\/www.kaggle.com\/riadalmadani) as a basis and will try to tune its various parameters. ","f0591365":"# Acknowledgements\n\n* [MoA | Pytorch | 0.01859 | RankGauss | PCA | NN](https:\/\/www.kaggle.com\/kushal1506\/moa-pytorch-0-01859-rankgauss-pca-nn)\n* [[MoA] Pytorch NN+PCA+RankGauss](https:\/\/www.kaggle.com\/nayuts\/moa-pytorch-nn-pca-rankgauss)\n* [Pytorch CV|0.0145| LB| 0.01839 |](https:\/\/www.kaggle.com\/riadalmadani\/pytorch-cv-0-0145-lb-0-01839)\n* [[New Baseline] Pytorch | MoA](https:\/\/www.kaggle.com\/namanj27\/new-baseline-pytorch-moa)\n* [Deciding (n_components) in PCA](https:\/\/www.kaggle.com\/kushal1506\/deciding-n-components-in-pca)\n* tuning and visualization from [Higher LB score by tuning mloss - upgrade & visual](https:\/\/www.kaggle.com\/vbmokin\/higher-lb-score-by-tuning-mloss-upgrade-visual)\n* [Data Science for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/data-science-for-tabular-data-advanced-techniques)","0d3712da":"## 5. Modeling<a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","9b0aff13":"### My upgrade:\n\n* PCA parameters\n* VarianceThreshold in the Feature Selection by Variance Encoding\n* Dropout\n* Structuring of the notebook\n* Tuning visualization\n\nI used the code from sources (please see above). But I am planning to develop this notebook. There are still promising areas for improvement and research of parameters.","7b5f18b0":"- As the runtime of the original notebook is 2213.8 seconds (~ 37 mins).\n- To Save TIME while committing, we can run the E2E pipeline only for ONE SEED by ***making the changes mentioned in the below cell***\n- It will reduce the commit time to ~ 6 mins\n- The same approach can be followed while Blending multiple models (once you know the CV score is stable) to save\/reduce the commit time, saving 30 mins per commit should be helpful in doing more experiments and submissions!!\n\n\n","4747cbf6":"### Commit 0 (parameters from https:\/\/www.kaggle.com\/riadalmadani\/pytorch-cv-0-0145-lb-0-01839, commit 8)","c91734b7":"<a class=\"anchor\" id=\"0\"><\/a>\n# [Mechanisms of Action (MoA) Prediction](https:\/\/www.kaggle.com\/c\/lish-moa)","6510a69a":"## 6. Prediction & Submission <a class=\"anchor\" id=\"6\"><\/a>\n\n[Back to Table of Contents](#0.1)","4ae6af3a":"### 4.1 RankGauss<a class=\"anchor\" id=\"4.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","1a0eb173":"## 4. FE & Data Preprocessing <a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","a8b34a9a":"### Commit 4","dd4ddf41":"### Commit 5","09cc9956":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","19f6b5e7":"Disclaimer: This notebook is fork of the notebook: https:\/\/www.kaggle.com\/vbmokin\/moa-pytorch-rankgauss-pca-nn-upgrade-3d-visual\n\nThe credits for the entire pipeline\/kernel goes to the all sources\/references mentioned in the url of the above notebook ","1c64999f":"### 4.2 Seed<a class=\"anchor\" id=\"4.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","63fed18e":"### Commit 12","56107337":"# SAVE TIME WHILE COMMIT","3577e401":"### 4.5 CV folds<a class=\"anchor\" id=\"4.5\"><\/a>\n\n[Back to Table of Contents](#0.1)","ef3eb5cc":"[Go to Top](#0)","ef5a2b38":"### 2.2 Previous commits <a class=\"anchor\" id=\"2.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","82a0e5ab":"### 4.8 Preprocessing<a class=\"anchor\" id=\"4.8\"><\/a>\n\n[Back to Table of Contents](#0.1)","06d12d91":"### It is recommended:\n* **n_comp_GENES** smaller, \n* **n_comp_CELLS** more,\n* **VarianceThreshold_for_FS** more, so that **train_features** is less.","2faa4028":"### 4.3 PCA features<a class=\"anchor\" id=\"4.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","8a7a8a23":"### Commit 10"}}