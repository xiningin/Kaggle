{"cell_type":{"a09f7df2":"code","f252dd4b":"code","5175fd84":"code","e6925d5b":"code","5e8a70a3":"code","4e3c6f48":"code","88f80f1d":"code","4c570d8f":"code","51f63bbd":"code","e9596f03":"code","914d7a4b":"code","19b1f08c":"code","27c68855":"code","887dcf02":"code","aafbf599":"code","b10dc4f0":"code","06eaf6be":"code","ceeb5fb4":"code","16cf1ca6":"code","dc3b87ce":"code","65c94c49":"code","4a0b84a6":"code","2e372c30":"code","c645e290":"code","ffa80dfe":"code","484f6ea7":"code","1b1408fa":"code","78a1e46b":"code","696aeddf":"code","9922bf08":"code","34278eb0":"code","8d473ba0":"code","ab3e5546":"code","81663dbe":"code","74f91548":"code","f590dddf":"code","1013c5ab":"markdown","224a6064":"markdown"},"source":{"a09f7df2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f252dd4b":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom datetime import date\nimport plotly.express as px\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBRegressor","5175fd84":"train=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv\",parse_dates=['Date'])\ntest=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv\",parse_dates=['Date'])\nsubmission=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/submission.csv\")","e6925d5b":"train.info()","5e8a70a3":"train.head()","4e3c6f48":"train.isnull().sum()","88f80f1d":"train=train.rename(columns={'Country\/Region':'Country','Province\/State':'State'})\ntest=test.rename(columns={'Country\/Region':'Country','Province\/State':'State'})\ntrain['State']=train['State'].fillna('')\ntest['State']=test['State'].fillna('')\ntrain.head()","4c570d8f":"submission.head()","51f63bbd":"train['ActiveCases']=train['ConfirmedCases']-train['Fatalities']","e9596f03":"df1=train.groupby(\n    [pd.to_datetime(train.Date).dt.strftime('%b %Y'), 'Country']\n)['ConfirmedCases'].sum().reset_index(name='TotalCases')\n#df1['Month']=pd.DatetimeIndex(df1['Date']).month\n#df1['Month-str'] = pd.to_datetime(train.Date).dt.strftime('%b')\ndf1['Month'] =  pd.to_datetime(df1.Date).dt.strftime('%B')\ndf1.sort_values('TotalCases', inplace=True)\ndf1","914d7a4b":"fig, ax = plt.subplots()\nax.set_xlabel('Month')\nax.set_ylabel('TotalCases')\nplt.bar(df1['Month'],df1['TotalCases'])\n#plt.xticks(rotation=90)\nplt.show()","19b1f08c":"grouped_data=train.groupby('Date')['Date','ConfirmedCases','Fatalities'].sum().reset_index()\ngrouped_data.head()\nfigure1=px.line(grouped_data, x=\"Date\",y=\"ConfirmedCases\",title=\"Total Confirmed Cases\")\nfigure1.show()\n\nfigure2=px.line(grouped_data, x=\"Date\",y=\"ConfirmedCases\", title=\"Total Confirmed Cases(log value)\", log_y=True)\nfigure2.show()","27c68855":"us_data=train[train['Country']=='US'].reset_index()\nus_date=us_data.groupby('Date')['Date','ConfirmedCases','Fatalities'].sum().reset_index()\nfigure3=px.line(us_date,x='Date',y=\"ConfirmedCases\",title=\"Total Cases in USA\")\nfigure3.show()","887dcf02":"China_data=train[train['Country']=='China'].reset_index()\nchina_data1=China_data.groupby('Date')['Date','ConfirmedCases','Fatalities'].sum().reset_index()\n#china_data1=china_data1[china_data1['Date']<'2020-02-01']\n#china_data1\nfigure4=px.line(china_data1,x='Date',y=\"ConfirmedCases\",title=\"Total Cases in China\")\nfigure4.show()","aafbf599":"Italy_data=train[train['Country']=='Italy'].reset_index()\nItaly_data1=Italy_data.groupby('Date')['Date','ConfirmedCases','Fatalities'].sum().reset_index()\nfigure5=px.line(Italy_data1,x='Date',y=\"ConfirmedCases\",title=\"Total Cases in Italy\")\nfigure5.show()","b10dc4f0":"Spain_data=train[train['Country']=='Spain'].reset_index()\nSpain_data1=Spain_data.groupby('Date')['Date','ConfirmedCases','Fatalities'].sum().reset_index()\nfigure5=px.line(Spain_data1,x='Date',y=\"ConfirmedCases\",title=\"Total Cases in Spain\")\nfigure5.show()","06eaf6be":"India_data=train[train['Country']=='India'].reset_index()\nIndia_data1=India_data.groupby('Date')['Date','ConfirmedCases','Fatalities'].sum().reset_index()\nfigure6=px.line(India_data1,x='Date',y=\"ConfirmedCases\",title=\"Total Cases in India\")\nfigure6.show()","ceeb5fb4":"country_wise_data = train[train['Date']==max(train['Date'])].reset_index(drop=True).drop('Date', axis=1)\ncountry_wise_data=country_wise_data.groupby('Country')['ConfirmedCases','Fatalities','ActiveCases'].sum().reset_index()\ncountry_wise_data.head()","16cf1ca6":"fig_7 = px.bar(country_wise_data.sort_values('ConfirmedCases').tail(10), x=\"ConfirmedCases\", y=\"Country\", orientation='h', color_discrete_sequence = ['#f38181'],text ='ConfirmedCases')\nfig_7.update_layout(title_text=\"Top 10 countries with the Most Confirmed Cases\")\nfig_7.show()\nfig_8 = px.bar(country_wise_data.sort_values('Fatalities').tail(10), x=\"Fatalities\", y=\"Country\", text='Fatalities', orientation='h', color_discrete_sequence = ['#333333'])\nfig_8.update_layout(title_text=\"Top 10 countries with the Most Fatalities\")\nfig_8.show()\nfig_9 = px.bar(country_wise_data.sort_values('ActiveCases').tail(10), x=\"ActiveCases\", y=\"Country\", text='ActiveCases', orientation='h', color_discrete_sequence = ['#c61951'])\nfig_9.update_layout(title_text=\"Top 10 countries with the Active Cases\")\nfig_9.show()","dc3b87ce":"#plt.figure(figsize=(15,10))\nfigure = px.choropleth(train, locations=\"Country\", \n                     color=\"ConfirmedCases\", \n                    hover_name=\"Country\", color_continuous_scale=\"RdBu\",\n                    locationmode='country names',range_color=(0, 1000), \n                    title='Total Cases in the world')\nfigure.show()","65c94c49":"china_data=train[train['Country']=='China'].reset_index()\nchina_df=china_data.groupby('Date')['ConfirmedCases'].sum().reset_index(name='TotalCases')\nlog_data=china_df['TotalCases']\nlog_data=log_data.reset_index(drop=False)\nlog_data.columns=['Timesteps','TotalCases']\nlog_data","4a0b84a6":"##defining the function to be used\ndef my_logistic(t,a,b,c):\n    return c\/(1+a*np.exp(-b*t))\n","2e372c30":"##Randomly initializing a,b,c and setting the bounds\np0=np.random.exponential(size=3)\nbounds=(0,[100000.,3.,1000000000.])","c645e290":"import scipy.optimize as optim\nx=np.array(log_data['Timesteps'])+1\ny=np.array(log_data['TotalCases'])\n(a,b,c),cov=optim.curve_fit(my_logistic,x,y,bounds=bounds,p0=p0)\na,b,c","ffa80dfe":"def my_logistic(t):\n    return c\/(1+a*np.exp(-b*t))","484f6ea7":"\nplt.scatter(x,y)\nplt.plot(x,my_logistic(x))\nplt.title(\"Logistic model vs the actual trend China\")\nplt.legend(['Logistic Model','Actual Trend'])\nplt.xlabel(\"Time\")\nplt.ylabel(\"Infections\")","1b1408fa":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nx_features=train\nx_features=x_features.drop(columns=['State','ConfirmedCases','Fatalities','Id','Lat','Long','ActiveCases'])\nx_features['Date'] = pd.to_datetime(train['Date'], infer_datetime_format=True)\n#x_features.loc[:, 'Date'] = x_features.Date.dt.strftime(\"%m%d\")\nx_features[\"Date\"]  = x_features[\"Date\"].astype(int)\nx_features.Country = le.fit_transform(x_features.Country)\ntest['Date'] = pd.to_datetime(test['Date'], infer_datetime_format=True)\nx_features.head()\nx_features.info()","78a1e46b":"y_target_con = train\ny_target_con = y_target_con.drop(columns=['Id','Date','Country','State','Fatalities','Lat','Long','ActiveCases'])\ny_target_con.info()\ny_target_con.head()","696aeddf":"test.head()","9922bf08":"test_features = test\ntest.head()\ntest_features.Country= le.fit_transform(test_features.Country)\ntest_features.Date = pd.to_datetime(test_features.Date)\n#test_features.loc[:, 'Date'] = test_features.Date.dt.strftime(\"%m%d\")\ntest_features[\"Date\"]  = test_features[\"Date\"].astype(int)\ntest_features=test_features.drop(columns=['Long', 'Lat'],axis=1)\ntest_features.info()\ntest_features.head()\n","34278eb0":"test_features = test_features.drop(columns=['ForecastId','State'],axis=1)\ntest_features.info()\ntest_features.head()\n","8d473ba0":"from xgboost import XGBRegressor\nmodel_con1 = XGBRegressor()\ncon_target = train.ConfirmedCases\nmodel_con1.fit(x_features,con_target)","ab3e5546":"predict_con= model_con1.predict(test_features)\npredict_con","81663dbe":"fatalities = train.Fatalities\ntrain.info()\nsubmission.info()\nfatalities","74f91548":"model_fat1 = XGBRegressor()\nmodel_fat1.fit(x_features,fatalities)\npredict_fat = model_fat1.predict(test_features)\npredict_fat","f590dddf":"submission = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/submission.csv')\ndf_out = pd.DataFrame({'ForecastId': [], 'ConfirmedCases': [], 'Fatalities': []})\ndf = pd.DataFrame({'ForecastId': test.ForecastId, 'ConfirmedCases':predict_con , 'Fatalities': predict_fat})\ndf_out = pd.concat([df_out, df], axis=0)\ndf_out.ForecastId = df_out.ForecastId.astype('int')\ndf_out.to_csv('submission.csv', index=False)","1013c5ab":"Now trying to see if we can get the Curve from china using the Non Linear Least Square method. We know that the formula for the logistic regression is  \ny(t)=c\/a+a*e-bt\n\nwhere\ny(t) is the number of cases at any given time t\nc is the limiting value, the maximum capacity for y\nb has to be larger than 0","224a6064":"To start with we need to get the data, reading the data into the train and test datasets, to have a look"}}