{"cell_type":{"cd2d7cd9":"code","6cf030bd":"code","0e268240":"code","aad6fae7":"code","b42f2bd4":"code","7d14bb28":"code","14babb8f":"code","b90f4f57":"markdown","359a1dc5":"markdown","dc35fd9a":"markdown","742a43aa":"markdown","9ada55ba":"markdown","0d5e15c0":"markdown","9bd4f5c1":"markdown"},"source":{"cd2d7cd9":"import numpy as np \nfrom functools import reduce\nimport operator,functools","6cf030bd":"result = reduce(lambda x,y:x + y,[1,2,3,4,5],10)\nresult","0e268240":"def sum(x,y):\n    return x + y \n\nresult = reduce(lambda x,y:sum(x,y),[1,2,3,4,5],10)\nresult","aad6fae7":"def sum(x,y):\n    return x + y \n\n\nsumLogic = lambda x,y:sum(x,y)\n\nresult = reduce(sumLogic,[1,2,3,4,5],10)\nresult","b42f2bd4":"maxLogic = lambda x,y: x if (x > y) else y \n\nresult = reduce(maxLogic,[71,25,31,54,25])\nresult\n","7d14bb28":"reduce(operator.mul, np.arange(1, 4))","14babb8f":"def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return functools.reduce(lambda x,y: x*y, range(1,n+1))\n        \n\nfactorial(3)","b90f4f57":"# 3.lambda function division version","359a1dc5":"# 1.default version","dc35fd9a":"# 4. other exame","742a43aa":"### 4.1.get max ","9ada55ba":"### 4.2.factorial","0d5e15c0":"# reduce ( lambda parameters: function , data ,initValue) ","9bd4f5c1":"# 2.function division version "}}