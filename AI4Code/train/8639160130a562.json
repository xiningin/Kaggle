{"cell_type":{"b0e598c0":"code","526b4258":"code","00b172ca":"code","c9d3d31e":"code","0179de3a":"code","02a7736f":"code","861868dc":"code","33e53c5f":"code","73bda6e4":"code","fd341993":"code","fe95c905":"code","c9bc94f8":"code","203ada69":"markdown","536bdfd1":"markdown","b2005c50":"markdown","c102c295":"markdown"},"source":{"b0e598c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","526b4258":"structure = pd.read_csv('..\/input\/structures.csv')\ntraindf = pd.read_csv('..\/input\/train.csv')\ntestdf = pd.read_csv('..\/input\/test.csv')","00b172ca":"def compute_all_dist(x):   \n    #Apply compute_all_dist2 to each atom \n    return x.apply(compute_all_dist2,axis=1,x2=x)","c9d3d31e":"def compute_all_dist2(x,x2):\n    # atoms in the molecule which are not the processed one\n    notatom = x2[(x2.atom_index != x[\"atom_index\"])].reset_index(drop=True) \n    # processed atom\n    atom = x[[\"x\",\"y\",\"z\"]]\n    \n    # compute distance from to processed atom to each other\n    notatom[\"dist\"] = 1\/((notatom[[\"x\",\"y\",\"z\"]].values - atom.values)**2).sum(axis=1)\n    \n    # sort atom per the smallest distance (highest 1\/r**2) per group of C\/H\/N... \n    s = notatom.groupby(\"atom\")[\"dist\"].transform(lambda x : x.sort_values(ascending=False))\n    \n    # keep only the five nearest atoms per group of C\/H\/N...\n    index0, index1=[],[]\n    for i in notatom.atom.unique():\n        for j in range(notatom[notatom.atom == i].shape[0]):\n            if j < 5:\n                index1.append(\"dist_\" + i + \"_\" + str(j))\n            index0.append(j)\n    s.index = index0\n    s = s[s.index < 5]\n    s.index = index1\n    \n    return s","0179de3a":"def merge_with_struc(df, structure):\n    df = df \\\n        .merge(structure,\n               left_on=[\"molecule_name\",'atom_index_0'],right_on=[\"molecule_name\",\"atom_index\"]) \\\n        .merge(structure, left_on=[\"molecule_name\",'atom_index_1'],right_on=[\"molecule_name\",\"atom_index\"]) \\\n        .drop([\"atom_index_x\",\"atom_index_y\",\"atom_x\",\"atom_x\"],axis=1) \\\n        .sort_values([\"id\"]) \\\n        .reset_index(drop=True)\n    return df","02a7736f":"%%time\n# 10 times faster than the parallelized kernel\nsmallstruct = pd.concat([structure[structure.molecule_name.isin(structure.molecule_name.unique()[:100])][[\"molecule_name\",\"atom_index\",\"atom\"]],\n                         structure[structure.molecule_name.isin(structure.molecule_name.unique()[:100])].groupby(\"molecule_name\").apply(compute_all_dist)],\n                         axis=1).fillna(0)","861868dc":"smallstruct.head()","33e53c5f":"%%time\nmerge_with_struc(traindf,smallstruct).head()","73bda6e4":"%%time\nstructure = \\\n    pd.concat([structure[[\"molecule_name\",\"atom_index\",\"atom\"]],\n               structure.groupby(\"molecule_name\",sort=False).apply(compute_all_dist)], axis=1) \\\n    .fillna(0)","fd341993":"structure.head()","fe95c905":"%%time\ntraindf = merge_with_struc(traindf,structure)\ntestdf = merge_with_struc(testdf,structure)","c9bc94f8":"traindf.head()","203ada69":"# All molecules in the structure.csv file","536bdfd1":"# First 100 molecules","b2005c50":"# Merge with train and test","c102c295":"Try improving performance of these kernels https:\/\/www.kaggle.com\/rio114\/coulomb-interaction\/notebook and https:\/\/www.kaggle.com\/brandenkmurray\/coulomb-interaction-parallelized\/notebook"}}