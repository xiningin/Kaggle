{"cell_type":{"9cfbb1de":"code","d2c4f2e8":"code","8857202a":"code","2dae9e4e":"code","de66710b":"code","1878d49f":"code","09111445":"code","8ede47cf":"code","ecec6e80":"code","3c225ad1":"code","e86cb8a8":"code","e778fa2d":"code","0ab666de":"code","f0ab855b":"code","64253e7c":"code","e6bd2d37":"code","f9d4e879":"code","d5d68300":"code","9a811c5a":"code","484d1063":"code","14afad6b":"code","e35afea8":"code","4f393f7f":"code","cd63e165":"code","c517347a":"code","ea6089a5":"code","4a3c989d":"code","0e261cd4":"code","f6f79ffc":"code","d74b9112":"code","6ddec6cd":"code","26b56357":"code","b3d958cb":"code","b00f3e0e":"markdown","6f930f20":"markdown","e78c7c3a":"markdown","54e8dfd7":"markdown","e4ff7b9a":"markdown","51ba00c4":"markdown","21b7962c":"markdown","35c20244":"markdown","09979968":"markdown","1b587a5e":"markdown","b6822e8b":"markdown","478a4f98":"markdown","884d5ef6":"markdown","d13dafaf":"markdown","0ebd0dbc":"markdown","af9a3880":"markdown","6ecbbf14":"markdown"},"source":{"9cfbb1de":"import numpy as np\nimport pandas as pd \nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport os\nimport seaborn as sns\nimport folium\nfrom folium import plugins","d2c4f2e8":"os.listdir('..\/input\/new-york-city-airbnb-open-data\/')","8857202a":"data=pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndata.head()","2dae9e4e":"data.isnull().sum()","de66710b":"data=data.dropna(subset=['name'])","1878d49f":"data.neighbourhood_group.unique()","09111445":"fig,ax=plt.subplots(1,2,figsize=(20,6))\nclr = (\"blue\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\ndata.neighbourhood_group.value_counts().plot.bar(color=clr,ax=ax[0])\nax[0].set_title('The number of rooms in each neighbourhood_group',size=20)\nax[0].set_ylabel('rooms',size=18)\nax[0].tick_params(axis='x', rotation=360)\nax[0].tick_params(labelsize=18)\n\ndata.groupby(['neighbourhood_group','room_type'])['id'].agg('count').unstack('room_type').plot.bar(ax=ax[1])\nax[1].tick_params(axis='x', rotation=360)\nax[1].set_title('The number of rooms in each room_type',size=20)\nax[1].set_ylabel('rooms',size=18)\nax[1].set_xlabel('')\nax[1].tick_params(labelsize=18)","8ede47cf":"data.room_type.unique()","ecec6e80":"fig,ax=plt.subplots(3,1,figsize=(15,36))\nsns.boxplot(x=\"neighbourhood_group\", y=\"price\", data=data[data.room_type=='Shared room'],ax=ax[0])\nax[0].set_title(\"Boxplot of Price for 'Shared room' in each neighbourhood_group\",size=20)\n\nsns.boxplot(x=\"neighbourhood_group\", y=\"price\", data=data[data.room_type=='Private room'],ax=ax[1])\nax[1].set_title(\"Boxplot of Price for 'Private room' in each neighbourhood_group\",size=20)\n\nsns.boxplot(x=\"neighbourhood_group\", y=\"price\", data=data[data.room_type=='Entire home\/apt'],ax=ax[2])\nax[2].set_title(\"Boxplot of Price for 'Entire home\/apt' in each neighbourhood_group\",size=20)","3c225ad1":"data_manha=data[data.neighbourhood_group=='Manhattan']\ndata_manha.head()","e86cb8a8":"data_manha.neighbourhood.unique()","e778fa2d":"fig,ax=plt.subplots(1,2,figsize=(15,8))\nclr = (\"blue\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\ndata_manha.neighbourhood.value_counts().sort_values(ascending=False)[:10].sort_values().plot(kind='barh',color=clr,ax=ax[0])\nax[0].set_title(\"Top 10 neighbourhood by the number of rooms\",size=20)\nax[0].set_xlabel('rooms',size=18)\n\n\ncount=data_manha['neighbourhood'].value_counts()\ngroups=list(data_manha['neighbourhood'].value_counts().index)[:10]\ncounts=list(count[:10])\ncounts.append(count.agg(sum)-count[:10].agg('sum'))\ngroups.append('Other')\ntype_dict=pd.DataFrame({\"group\":groups,\"counts\":counts})\nclr1=('brown','darksalmon','orange','hotpink','cadetblue','purple','red','gold','forestgreen','blue','plum')\nqx = type_dict.plot(kind='pie', y='counts', labels=groups,colors=clr1,autopct='%1.1f%%', pctdistance=0.9, radius=1.2,ax=ax[1])\nplt.legend(loc=0, bbox_to_anchor=(1.15,0.4)) \nplt.subplots_adjust(wspace =0.5, hspace =0)\nplt.ylabel('')","0ab666de":"data_manha_65=data_manha[data_manha.price<65]\ndata_manha_65['label']=data_manha_65.apply(lambda x: (x['name'],'price:'+str(x['price'])),axis=1)\ndata_manha_65.head()","f0ab855b":"Long=-73.92\nLat=40.86\nmanha_map=folium.Map([Lat,Long],zoom_start=12)\n\nmanha_rooms_map=plugins.MarkerCluster().add_to(manha_map)\nfor lat,lon,label in zip(data_manha_65.latitude,data_manha_65.longitude,data_manha_65.label):\n    folium.Marker(location=[lat,lon],icon=None,popup=label).add_to(manha_rooms_map)\nmanha_map.add_child(manha_rooms_map)\n\nmanha_map","64253e7c":"data_manha_65_80=data_manha.loc[(data_manha['price'] >=65) & (data_manha['price'] <80)]\ndata_manha_65_80['label']=data_manha_65_80.apply(lambda x: (x['name'],'price:'+str(x['price'])),axis=1)\nLong=-73.92\nLat=40.86\nmanha_65_80_map=folium.Map([Lat,Long],zoom_start=12)\n\nmanha_65_80_rooms_map=plugins.MarkerCluster().add_to(manha_65_80_map)\nfor lat,lon,label in zip(data_manha_65_80.latitude,data_manha_65_80.longitude,data_manha_65_80.label):\n    folium.Marker(location=[lat,lon],icon=None,popup=label).add_to(manha_65_80_rooms_map)\nmanha_65_80_map.add_child(manha_65_80_rooms_map)\n\nmanha_65_80_map","e6bd2d37":"data_Brooklyn=data[data.neighbourhood_group=='Brooklyn']\ndata_Brooklyn.head()","f9d4e879":"data_Brooklyn.neighbourhood.unique()","d5d68300":"fig,ax=plt.subplots(1,2,figsize=(15,8))\nclr = (\"blue\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\ndata_Brooklyn.neighbourhood.value_counts().sort_values(ascending=False)[:10].sort_values().plot(kind='barh',color=clr,ax=ax[0])\nax[0].set_title(\"Top 10 neighbourhood by the number of rooms\",size=20)\nax[0].set_xlabel('rooms',size=18)\n\n\ncount=data_Brooklyn['neighbourhood'].value_counts()\ngroups=list(data_Brooklyn['neighbourhood'].value_counts().index)[:10]\ncounts=list(count[:10])\ncounts.append(count.agg(sum)-count[:10].agg('sum'))\ngroups.append('Other')\ntype_dict=pd.DataFrame({\"group\":groups,\"counts\":counts})\nclr1=('brown','darksalmon','orange','hotpink','cadetblue','purple','red','gold','forestgreen','blue','plum')\nqx = type_dict.plot(kind='pie', y='counts', labels=groups,colors=clr1,autopct='%1.1f%%', pctdistance=0.9, radius=1.2,ax=ax[1])\nplt.legend(loc=0, bbox_to_anchor=(1.15,0.4)) \nplt.subplots_adjust(wspace =0.5, hspace =0)\nplt.ylabel('')","9a811c5a":"data_Brooklyn_10_65=data_Brooklyn.loc[(data_Brooklyn['price'] >=10) & (data_Brooklyn['price'] <65)][:2000]\ndata_Brooklyn_10_65['label']=data_Brooklyn_10_65.apply(lambda x: (x['name'],'price:'+str(x['price'])),axis=1)\ndata_Brooklyn_10_65.head()","484d1063":"Long=-73.94\nLat=40.72\nBrooklyn_10_65_map=folium.Map([Lat,Long],zoom_start=12)\n\nBrooklyn_10_65_rooms_map=plugins.MarkerCluster().add_to(Brooklyn_10_65_map)\nfor lat,lon,label in zip(data_Brooklyn_10_65.latitude,data_Brooklyn_10_65.longitude,data_Brooklyn_10_65.label):\n    folium.Marker(location=[lat,lon],icon=None,popup=label).add_to(Brooklyn_10_65_rooms_map)\nBrooklyn_10_65_map.add_child(Brooklyn_10_65_rooms_map)\n\nBrooklyn_10_65_map","14afad6b":"data_Queens=data[data.neighbourhood_group=='Queens']\ndata_Queens.head()","e35afea8":"data_Queens.neighbourhood.unique()","4f393f7f":"fig,ax=plt.subplots(1,2,figsize=(15,8))\nclr = (\"blue\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\ndata_Queens.neighbourhood.value_counts().sort_values(ascending=False)[:10].sort_values().plot(kind='barh',color=clr,ax=ax[0])\nax[0].set_title(\"Top 10 neighbourhood by the number of rooms\",size=20)\nax[0].set_xlabel('rooms',size=18)\n\n\ncount=data_Queens['neighbourhood'].value_counts()\ngroups=list(data_Queens['neighbourhood'].value_counts().index)[:10]\ncounts=list(count[:10])\ncounts.append(count.agg(sum)-count[:10].agg('sum'))\ngroups.append('Other')\ntype_dict=pd.DataFrame({\"group\":groups,\"counts\":counts})\nclr1=('brown','darksalmon','orange','hotpink','cadetblue','purple','red','gold','forestgreen','blue','plum')\nqx = type_dict.plot(kind='pie', y='counts', labels=groups,colors=clr1,autopct='%1.1f%%', pctdistance=0.9, radius=1.2,ax=ax[1])\nplt.legend(loc=0, bbox_to_anchor=(1.15,0.4)) \nplt.subplots_adjust(wspace =0.5, hspace =0)\nplt.ylabel('')","cd63e165":"data_Queens_100_1=data_Queens.loc[(data_Queens['price'] <100)][:2000]\ndata_Queens_100_1['label']=data_Queens_100_1.apply(lambda x: (x['name'],'price:'+str(x['price'])),axis=1)\ndata_Queens_100_1.head()","c517347a":"Long=-73.80\nLat=40.70\ndata_Queens_100_1_map=folium.Map([Lat,Long],zoom_start=12)\n\ndata_Queens_100_1_rooms_map=plugins.MarkerCluster().add_to(data_Queens_100_1_map)\nfor lat,lon,label in zip(data_Queens_100_1.latitude,data_Queens_100_1.longitude,data_Queens_100_1.label):\n    folium.Marker(location=[lat,lon],icon=None,popup=label).add_to(data_Queens_100_1_rooms_map)\ndata_Queens_100_1_map.add_child(data_Queens_100_1_rooms_map)\n\ndata_Queens_100_1_map","ea6089a5":"data_Queens_100_2=data_Queens.loc[(data_Queens['price'] <100)][2000:2800]\ndata_Queens_100_2['label']=data_Queens_100_2.apply(lambda x: (x['name'],'price:'+str(x['price'])),axis=1)\nLong=-73.80\nLat=40.70\ndata_Queens_100_2_map=folium.Map([Lat,Long],zoom_start=12)\n\ndata_Queens_100_2_rooms_map=plugins.MarkerCluster().add_to(data_Queens_100_2_map)\nfor lat,lon,label in zip(data_Queens_100_2.latitude,data_Queens_100_2.longitude,data_Queens_100_2.label):\n    folium.Marker(location=[lat,lon],icon=None,popup=label).add_to(data_Queens_100_2_rooms_map)\ndata_Queens_100_2_map.add_child(data_Queens_100_2_rooms_map)\n\ndata_Queens_100_2_map","4a3c989d":"data_Queens_100_3=data_Queens.loc[(data_Queens['price'] <100)][2801:-1]\ndata_Queens_100_3['label']=data_Queens_100_3.apply(lambda x: (x['name'],'price:'+str(x['price'])),axis=1)\nLong=-73.80\nLat=40.70\ndata_Queens_100_3_map=folium.Map([Lat,Long],zoom_start=12)\n\ndata_Queens_100_3_rooms_map=plugins.MarkerCluster().add_to(data_Queens_100_3_map)\nfor lat,lon,label in zip(data_Queens_100_3.latitude,data_Queens_100_3.longitude,data_Queens_100_3.label):\n    folium.Marker(location=[lat,lon],icon=None,popup=label).add_to(data_Queens_100_3_rooms_map)\ndata_Queens_100_3_map.add_child(data_Queens_100_3_rooms_map)\n\ndata_Queens_100_3_map","0e261cd4":"fig,ax=plt.subplots(1,2,figsize=(18,8))\nclr = (\"blue\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\ndata.groupby(['host_name'])['number_of_reviews'].agg('sum').sort_values(ascending=False)[:10].sort_values().plot(kind='barh',color=clr,ax=ax[0])\nax[0].set_title(\"Top 10 host by the number of reviews\",size=20)\nax[0].set_xlabel('reviews',size=18)\nax[0].set_ylabel('')\n\ndata.groupby(['host_name'])['price'].agg('mean').sort_values(ascending=False)[:10].sort_values().plot(kind='barh',color=clr,ax=ax[1])\nax[1].set_title(\"Top 10 host by the average of price for rooms\",size=20)\nax[1].set_xlabel('average of price',size=18)\nax[1].set_ylabel('')","f6f79ffc":"plt.figure(figsize=(15,15))\ncorr = data.corr()\nsns.heatmap(corr, xticklabels=corr.columns,yticklabels=corr.columns)\nplt.title(\"correlation plot\",size=28)","d74b9112":"data_tree=data[['neighbourhood_group','neighbourhood','room_type','minimum_nights','number_of_reviews','price']]\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\ndata_tree['neighbourhood_group_new'] = labelencoder.fit_transform(data_tree['neighbourhood_group'])\ndata_tree['neighbourhood_new'] = labelencoder.fit_transform(data_tree['neighbourhood'])\ndata_tree['room_type_new'] = labelencoder.fit_transform(data_tree['room_type'])\ndata_tree.head()","6ddec6cd":"data_tree=data_tree[data_tree.price<=180]\ndata_tree=data_tree[data_tree.price>=90]\nlen(data_tree)","26b56357":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nx_train,x_test,y_train,y_test=train_test_split(data_tree[['neighbourhood_group_new','neighbourhood_new','room_type_new','minimum_nights','number_of_reviews']],data_tree[['price']],test_size=0.1,random_state=0)\nReg_tree=DecisionTreeRegressor(criterion='mse',max_depth=3,random_state=0)\nReg_tree=Reg_tree.fit(x_train,y_train)\ny=y_test['price']\npredict=Reg_tree.predict(x_test)\nprint(\"median absolute deviation (MAD): \",np.mean(abs(np.multiply(np.array(y_test.T-predict),np.array(1\/y_test)))))","b3d958cb":"from subprocess import check_call\nfrom PIL import Image, ImageDraw, ImageFont\nfrom IPython.display import Image as PImage\nfrom sklearn.tree import export_graphviz\nwith open(\"tree1.dot\", 'w') as f:\n     f = export_graphviz(Reg_tree,\n                              out_file=f,\n                              max_depth = 3,\n                              impurity = True,\n                              feature_names = ['neighbourhood_group_new','neighbourhood_new','room_type_new','minimum_nights','number_of_reviews'],\n                              rounded = True,\n                              filled= True )\ncheck_call(['dot','-Tpng','tree1.dot','-o','tree1.png'])\nimg = Image.open(\"tree1.png\")\ndraw = ImageDraw.Draw(img)\nimg.save('sample-out.png')\nPImage(\"sample-out.png\")","b00f3e0e":"<h3 id=\"221\">2.2.1&nbsp;Visualization&nbsp;for&nbsp;the&nbsp;rooms&nbsp;with&nbsp;price&nbsp;<65&nbsp;in&nbsp;Manhattan<\/h3>","6f930f20":"I use the regression tree to predict the price of room,and the variables include\n\n'neighbourhood_group','neighbourhood','room_type','minimum_nights',and 'number_of_reviews'\n\nI use the data whcih price is between 90 and 180. The MAD is about 0.16 that mean the regression tree is not bad.","e78c7c3a":"# 2.Visualization","54e8dfd7":"# 3.Regression_tree","e4ff7b9a":"* [1.DataOverview](#1.DataOverview)\n* [2.Visualization](#2.Visualization)\n    * [2.1 Visualization for neighbourhood_group](#21)\n    * [2.2 Visualization for Manhattan](#22)\n        * [2.2.1 Visualization for the rooms with price <65 in Manhattan](#221)\n        * [2.2.2 Visualization for the rooms with price between 65 and 80 in Manhattan](#222)\n    * [2.3 Visualization for Brooklyn](#23)\n        * [2.3.1 Visualization for the rooms with price between 10 and 65 in Brooklyn](#231)\n    * [2.4 Visualization for Queens](#24)\n        * [2.4.1 Visualization for the rooms with price is less than 100 in Queens](#241)\n    * [2.5 Visualization for host](#25)\n    * [2.6 Visualization for correlation](#26)\n* [3.Regression_tree](#3.Regression_tree)","51ba00c4":"<h3 id=\"222\">2.2.2 Visualization for the rooms with price between 65 and 80 in Manhattan<\/h3>","21b7962c":"<h3 id=\"23\">2.3&nbsp;Visualization&nbsp;for&nbsp;Brooklyn<\/h3>","35c20244":"<h3 id=\"22\">2.2&nbsp;Visualization&nbsp;for&nbsp;Manhattan<\/h3>","09979968":"<h3 id=\"26\">2.6 Visualization for correlation<\/h3>","1b587a5e":"<h3 id=\"24\">2.4&nbsp;Visualization&nbsp;for&nbsp;Queens<\/h3>","b6822e8b":"# 1.DataOverview","478a4f98":"<h3 id=\"231\">2.3.1 Visualization for the rooms with price between 10 and 65 in Brooklyn<\/h3>","884d5ef6":"<h3 id=\"25\">2.5 Visualization for host<\/h3>","d13dafaf":"Remove the missing value from 'name'.","0ebd0dbc":"According to this map,you can not only  see the comment,but also see the price for the room. ","af9a3880":"<h3 id=\"241\">2.4.1 Visualization for the rooms with price is less than 100 in Queens<\/h3>","6ecbbf14":"<h3 id=\"21\">2.1&nbsp;Visualization&nbsp;for&nbsp;neighbourhood_group<\/h3>"}}