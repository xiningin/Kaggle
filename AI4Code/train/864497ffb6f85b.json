{"cell_type":{"5b0073a3":"code","3924ff1b":"code","33e1e8a2":"code","f3599d97":"code","c4e1fb9e":"code","2a3743d9":"code","7200a547":"code","c3477def":"code","e63d2c39":"code","4ec1be47":"code","db43b591":"code","6fbe4c28":"code","61b572f7":"code","97f5e3a8":"code","b6b7ffe7":"code","ac517923":"code","6f57b82e":"code","ac086c3c":"code","0e195eaf":"code","3ef19f84":"code","95e635ea":"code","0c0d7e65":"code","0190987d":"code","39ae72d4":"code","8d8325c3":"code","0803b4aa":"code","bcf136a8":"code","2f6fb31a":"code","4a36b5cb":"code","026d4867":"code","8034bb25":"code","ffdf981b":"code","fa9e93a7":"code","881bcdf5":"code","b6148aa4":"code","dafc6072":"code","f7d10960":"code","5d3c3b27":"code","95b11dae":"code","09fed846":"code","dc2ab677":"code","41ea1f43":"code","b92edbd3":"code","b5428dba":"code","03c2da7b":"code","4dd69197":"code","20324690":"code","e24b6203":"code","686434ec":"code","b0f0b3e6":"code","68cbcdaa":"code","5ba01476":"code","e5332e35":"code","434b82c3":"code","2588b27f":"code","441bc9cd":"code","925ecc6b":"code","45702222":"code","04d5f865":"code","57d5e2c6":"code","05c5ccfc":"code","68c5e29d":"code","83a810df":"code","16ba9a5e":"code","3ca3d67f":"code","5b31b462":"code","9aa5a17c":"code","b45973de":"code","22020a21":"code","eb999eaf":"code","18b754ef":"code","3cab557b":"code","dfe7cae2":"code","78077d06":"code","05dbc7f1":"code","ae189074":"code","0bd87315":"code","d43c1ee6":"code","5aede5df":"code","0326070d":"code","172d13cc":"code","b809a24c":"code","346ac8e7":"markdown","b82cbb48":"markdown","b0aaf0e0":"markdown","8dad481a":"markdown","42d2a752":"markdown","3e09faed":"markdown","9f16708d":"markdown","53e16255":"markdown","e4034952":"markdown","81d54fa6":"markdown","96361ad9":"markdown","ad43f7e3":"markdown","4f55b767":"markdown","e07f57f3":"markdown","b306e6b0":"markdown","30154426":"markdown","c8fb07f6":"markdown","44016162":"markdown","78155b4f":"markdown","821aaa26":"markdown","58df3dca":"markdown","cd342c57":"markdown","40b7d2e2":"markdown","2ca7054b":"markdown","b7526f80":"markdown","efc983cf":"markdown","3f9dcec9":"markdown","96d063ab":"markdown","5f48a8f1":"markdown"},"source":{"5b0073a3":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\nimport time\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nimport imageio\nfrom IPython.display import Image\nimport matplotlib.image as mpimg\nfrom skimage.transform import resize\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nimport zipfile\nfrom io import BytesIO\nfrom nibabel import FileHolder\nfrom nibabel.analyze import AnalyzeImage\nimport PIL\nfrom IPython import display\nfrom skimage.morphology import convex_hull_image, erosion\nfrom skimage.morphology import square\nfrom skimage.feature import hessian_matrix, hessian_matrix_eigvals\nfrom skimage import data, io, filters\nimport skimage\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN,\\\nLSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, Convolution2D, ZeroPadding2D,Reshape, Conv2DTranspose, LeakyReLU, ReLU\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.datasets import mnist\nimport keras\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","3924ff1b":"Bacteria_Path = Path(\"..\/input\/bacteria-detection-with-darkfield-microscopy\/images\")\nMask_Path = Path(\"..\/input\/bacteria-detection-with-darkfield-microscopy\/masks\")","33e1e8a2":"Bacteria_PNG = list(Bacteria_Path.glob(r\"*.png\"))\nMask_PNG = list(Mask_Path.glob(r\"*.png\"))","f3599d97":"print(Bacteria_PNG[0:5])","c4e1fb9e":"print(Mask_PNG[0:5])","2a3743d9":"Bacteria_Series = pd.Series(Bacteria_PNG,name=\"BACTERIA\").astype(str)\nMask_Series = pd.Series(Mask_PNG,name=\"MASK\").astype(str)","7200a547":"print(Bacteria_Series.head(-1))","c3477def":"print(Mask_Series.head(-1))","e63d2c39":"Main_Set = pd.concat([Bacteria_Series,Mask_Series],axis=1)","4ec1be47":"print(Main_Set.head(-1))","db43b591":"def simple_reading(image):\n    \n    Reading_Image = cv2.cvtColor(cv2.imread(image),cv2.COLOR_BGR2RGB)\n    \n    return Reading_Image","6fbe4c28":"def gray_reading(image):\n    \n    Gray_Image = cv2.cvtColor(cv2.imread(image),cv2.COLOR_BGR2GRAY)\n    \n    return Gray_Image","61b572f7":"def threshold_reading(image):\n    \n    _,Threshold_Image = cv2.threshold(image,200,255,cv2.THRESH_BINARY)\n    \n    return Threshold_Image","97f5e3a8":"def adaptive_threshold_reading(image):\n    \n    Reading_Image = cv2.cvtColor(cv2.imread(image),cv2.COLOR_BGR2GRAY)\n    Adaptive_Image = cv2.adaptiveThreshold(Reading_Image,20,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,9,2)\n    \n    return Adaptive_Image","b6b7ffe7":"def canny_reading(image):\n    \n    Canny_Image = cv2.Canny(image,10,100)\n    \n    return Canny_Image","ac517923":"def hessian_reading(image,sigma,order):\n    \n    Reading_Image = cv2.cvtColor(cv2.imread(image),cv2.COLOR_BGR2GRAY)\n    Hessian_Image = hessian_matrix(Reading_Image,sigma=sigma,order=order)\n    \n    Max_IMG,Min_IMG = hessian_matrix_eigvals(Hessian_Image)\n    \n    return Max_IMG,Min_IMG","6f57b82e":"def skeleton_reading(image):\n    \n    Reading_Image = cv2.cvtColor(cv2.imread(image),cv2.COLOR_BGR2GRAY)\n    _,Threshold_Image = cv2.threshold(Reading_Image,200,255,cv2.THRESH_BINARY)\n    Array_Image = np.array(Reading_Image > Threshold_Image).astype(int)\n    Skeleton_Image = skimage.morphology.skeletonize(Array_Image)\n    \n    return Skeleton_Image  ","ac086c3c":"def layers_reading(image,mask):\n    \n    Reading_Image = cv2.cvtColor(cv2.imread(image),cv2.COLOR_BGR2RGB)\n    Reading_Mask = cv2.cvtColor(cv2.imread(mask),cv2.COLOR_BGR2GRAY)\n    \n    Copy_Main = Reading_Image.copy()\n    Copy_Main[Reading_Mask == 1] = [255,0,0]\n    Copy_Main[Reading_Mask == 2] = [0,0,255]\n    \n    Copy_Main_Two = Reading_Image.copy()\n    Blend_Image = cv2.addWeighted(Copy_Main,0.5,Copy_Main_Two,0.5,0,Copy_Main_Two)\n    \n    return Blend_Image","0e195eaf":"def drawing_contours_vision(image):\n    \n    figure,axis = plt.subplots(nrows=1,ncols=2,figsize=(12,12))\n    \n    Reading_Image = cv2.cvtColor(cv2.imread(image),cv2.COLOR_BGR2RGB)\n    Canny_Image = cv2.Canny(Reading_Image,10,100)\n    contours,_ = cv2.findContours(Canny_Image,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\n    Draw_Contours = cv2.drawContours(Reading_Image,contours,-1,(255,0,0),1)\n    \n    axis[0].imshow(Canny_Image)\n    axis[1].imshow(Draw_Contours)","3ef19f84":"def simple_reading_vision(image):\n    \n    figure = plt.figure(figsize=(8,8))\n    \n    Reading_Image = cv2.cvtColor(cv2.imread(image),cv2.COLOR_BGR2RGB)\n    \n    plt.imshow(Reading_Image)\n    plt.xlabel(Reading_Image.shape)\n    plt.ylabel(Reading_Image.size)","95e635ea":"def simple_spectrum_vision(image,cmap_type):\n    \n    figure = plt.figure(figsize=(8,8))\n    \n    Reading_Image = cv2.cvtColor(cv2.imread(image),cv2.COLOR_BGR2RGB)\n    Reading_Image = Reading_Image[:,:,0]\n    \n    plt.imshow(Reading_Image,cmap=cmap_type)\n    plt.xlabel(Reading_Image.shape)\n    plt.ylabel(Reading_Image.size)\n    ","0c0d7e65":"def simple_vision(image):\n    \n    figure = plt.figure(figsize=(8,8))\n    \n    plt.imshow(image)\n    plt.xlabel(image.shape)\n    plt.ylabel(image.size)","0190987d":"figure,axis = plt.subplots(1,2,figsize=(11,11))\n\naxis[0].set_xlabel(simple_reading(Main_Set[\"BACTERIA\"][10]).shape)\naxis[0].set_ylabel(simple_reading(Main_Set[\"BACTERIA\"][10]).size)\naxis[0].set_title(\"BACTERIA\")\naxis[0].imshow(simple_reading(Main_Set[\"BACTERIA\"][10]))\n\naxis[1].set_xlabel(gray_reading(Main_Set[\"MASK\"][10]).shape)\naxis[1].set_ylabel(gray_reading(Main_Set[\"MASK\"][10]).size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(gray_reading(Main_Set[\"MASK\"][10]))","39ae72d4":"figure,axis = plt.subplots(1,2,figsize=(11,11))\n\naxis[0].set_xlabel(simple_reading(Main_Set[\"BACTERIA\"][100]).shape)\naxis[0].set_ylabel(simple_reading(Main_Set[\"BACTERIA\"][100]).size)\naxis[0].set_title(\"BACTERIA\")\naxis[0].imshow(simple_reading(Main_Set[\"BACTERIA\"][100]))\n\naxis[1].set_xlabel(gray_reading(Main_Set[\"MASK\"][100]).shape)\naxis[1].set_ylabel(gray_reading(Main_Set[\"MASK\"][100]).size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(gray_reading(Main_Set[\"MASK\"][100]))","8d8325c3":"figure,axis = plt.subplots(1,2,figsize=(11,11))\n\naxis[0].set_xlabel(simple_reading(Main_Set[\"BACTERIA\"][230]).shape)\naxis[0].set_ylabel(simple_reading(Main_Set[\"BACTERIA\"][230]).size)\naxis[0].set_title(\"BACTERIA\")\naxis[0].imshow(simple_reading(Main_Set[\"BACTERIA\"][230]))\n\naxis[1].set_xlabel(gray_reading(Main_Set[\"MASK\"][230]).shape)\naxis[1].set_ylabel(gray_reading(Main_Set[\"MASK\"][230]).size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(gray_reading(Main_Set[\"MASK\"][230]))","0803b4aa":"figure,axis = plt.subplots(1,2,figsize=(11,11))\n\naxis[0].set_xlabel(simple_reading(Main_Set[\"BACTERIA\"][311]).shape)\naxis[0].set_ylabel(simple_reading(Main_Set[\"BACTERIA\"][311]).size)\naxis[0].set_title(\"BACTERIA\")\naxis[0].imshow(simple_reading(Main_Set[\"BACTERIA\"][311]))\n\naxis[1].set_xlabel(gray_reading(Main_Set[\"MASK\"][311]).shape)\naxis[1].set_ylabel(gray_reading(Main_Set[\"MASK\"][311]).size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(gray_reading(Main_Set[\"MASK\"][311]))","bcf136a8":"figure,axis = plt.subplots(5,5,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Picking_Image = simple_reading(Main_Set[\"BACTERIA\"][indexing])\n    \n    operations.set_xlabel(Picking_Image.shape)\n    operations.set_ylabel(Picking_Image.size)\n    operations.set_title(\"BACTERIA\")\n    operations.imshow(Picking_Image)\n    \nplt.tight_layout()\nplt.show()","2f6fb31a":"figure,axis = plt.subplots(5,5,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Picking_Mask = gray_reading(Main_Set[\"MASK\"][indexing])\n    \n    operations.set_xlabel(Picking_Mask.shape)\n    operations.set_ylabel(Picking_Mask.size)\n    operations.set_title(\"MASK\")\n    operations.imshow(Picking_Mask)\n    \nplt.tight_layout()\nplt.show()","4a36b5cb":"figure,axis = plt.subplots(1,3,figsize=(11,11))\n\n\nImage_Picking = Main_Set[\"BACTERIA\"][15]\nMask_Picking = Main_Set[\"MASK\"][15]\n\naxis[0].set_xlabel(threshold_reading(simple_reading(Image_Picking)).shape)\naxis[0].set_ylabel(threshold_reading(simple_reading(Image_Picking)).size)\naxis[0].set_title(\"THRESHOLD\")\naxis[0].imshow(threshold_reading(simple_reading(Image_Picking)))\n\naxis[1].set_xlabel(gray_reading(Mask_Picking).shape)\naxis[1].set_ylabel(gray_reading(Mask_Picking).size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(gray_reading(Mask_Picking))\n\naxis[2].set_xlabel(simple_reading(Image_Picking).shape)\naxis[2].set_ylabel(simple_reading(Image_Picking).size)\naxis[2].set_title(\"BACTERIA\")\naxis[2].imshow(simple_reading(Image_Picking))","026d4867":"figure,axis = plt.subplots(1,3,figsize=(11,11))\n\n\nImage_Picking = Main_Set[\"BACTERIA\"][155]\nMask_Picking = Main_Set[\"MASK\"][155]\n\naxis[0].set_xlabel(threshold_reading(simple_reading(Image_Picking)).shape)\naxis[0].set_ylabel(threshold_reading(simple_reading(Image_Picking)).size)\naxis[0].set_title(\"THRESHOLD\")\naxis[0].imshow(threshold_reading(simple_reading(Image_Picking)))\n\naxis[1].set_xlabel(gray_reading(Mask_Picking).shape)\naxis[1].set_ylabel(gray_reading(Mask_Picking).size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(gray_reading(Mask_Picking))\n\naxis[2].set_xlabel(simple_reading(Image_Picking).shape)\naxis[2].set_ylabel(simple_reading(Image_Picking).size)\naxis[2].set_title(\"BACTERIA\")\naxis[2].imshow(simple_reading(Image_Picking))","8034bb25":"figure,axis = plt.subplots(1,3,figsize=(11,11))\n\n\nImage_Picking = Main_Set[\"BACTERIA\"][1]\nMask_Picking = Main_Set[\"MASK\"][1]\n\naxis[0].set_xlabel(adaptive_threshold_reading(Image_Picking).shape)\naxis[0].set_ylabel(adaptive_threshold_reading(Image_Picking).size)\naxis[0].set_title(\"ADAPTIVE THRESHOLD\")\naxis[0].imshow(adaptive_threshold_reading(Image_Picking))\n\naxis[1].set_xlabel(gray_reading(Mask_Picking).shape)\naxis[1].set_ylabel(gray_reading(Mask_Picking).size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(gray_reading(Mask_Picking))\n\naxis[2].set_xlabel(simple_reading(Image_Picking).shape)\naxis[2].set_ylabel(simple_reading(Image_Picking).size)\naxis[2].set_title(\"BACTERIA\")\naxis[2].imshow(simple_reading(Image_Picking))","ffdf981b":"figure,axis = plt.subplots(1,3,figsize=(11,11))\n\n\nImage_Picking = Main_Set[\"BACTERIA\"][244]\nMask_Picking = Main_Set[\"MASK\"][244]\n\naxis[0].set_xlabel(adaptive_threshold_reading(Image_Picking).shape)\naxis[0].set_ylabel(adaptive_threshold_reading(Image_Picking).size)\naxis[0].set_title(\"ADAPTIVE THRESHOLD\")\naxis[0].imshow(adaptive_threshold_reading(Image_Picking))\n\naxis[1].set_xlabel(gray_reading(Mask_Picking).shape)\naxis[1].set_ylabel(gray_reading(Mask_Picking).size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(gray_reading(Mask_Picking))\n\naxis[2].set_xlabel(simple_reading(Image_Picking).shape)\naxis[2].set_ylabel(simple_reading(Image_Picking).size)\naxis[2].set_title(\"BACTERIA\")\naxis[2].imshow(simple_reading(Image_Picking))","fa9e93a7":"figure,axis = plt.subplots(1,3,figsize=(11,11))\n\n\nImage_Picking = Main_Set[\"BACTERIA\"][1]\nMask_Picking = Main_Set[\"MASK\"][1]\n\naxis[0].set_xlabel(canny_reading(simple_reading(Image_Picking)).shape)\naxis[0].set_ylabel(canny_reading(simple_reading(Image_Picking)).size)\naxis[0].set_title(\"CANNY BASIC\")\naxis[0].imshow(canny_reading(simple_reading(Image_Picking)))\n\naxis[1].set_xlabel(gray_reading(Mask_Picking).shape)\naxis[1].set_ylabel(gray_reading(Mask_Picking).size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(gray_reading(Mask_Picking))\n\naxis[2].set_xlabel(simple_reading(Image_Picking).shape)\naxis[2].set_ylabel(simple_reading(Image_Picking).size)\naxis[2].set_title(\"BACTERIA\")\naxis[2].imshow(simple_reading(Image_Picking))","881bcdf5":"figure,axis = plt.subplots(1,3,figsize=(11,11))\n\n\nImage_Picking = Main_Set[\"BACTERIA\"][10]\nMask_Picking = Main_Set[\"MASK\"][10]\n\naxis[0].set_xlabel(canny_reading(simple_reading(Image_Picking)).shape)\naxis[0].set_ylabel(canny_reading(simple_reading(Image_Picking)).size)\naxis[0].set_title(\"CANNY BASIC\")\naxis[0].imshow(canny_reading(simple_reading(Image_Picking)))\n\naxis[1].set_xlabel(gray_reading(Mask_Picking).shape)\naxis[1].set_ylabel(gray_reading(Mask_Picking).size)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(gray_reading(Mask_Picking))\n\naxis[2].set_xlabel(simple_reading(Image_Picking).shape)\naxis[2].set_ylabel(simple_reading(Image_Picking).size)\naxis[2].set_title(\"BACTERIA\")\naxis[2].imshow(simple_reading(Image_Picking))","b6148aa4":"figure,axis = plt.subplots(1,2,figsize=(11,11))\n\nMax_Image,Min_Image = hessian_reading(Main_Set[\"BACTERIA\"][230],0.15,\"rc\")\n\naxis[0].set_xlabel(Max_Image.shape)\naxis[0].set_ylabel(Max_Image.size)\naxis[0].set_title(\"MAX\")\naxis[0].imshow(Max_Image)\n\naxis[1].set_xlabel(Min_Image.shape)\naxis[1].set_ylabel(Min_Image.size)\naxis[1].set_title(\"MIN\")\naxis[1].imshow(Min_Image)","dafc6072":"figure,axis = plt.subplots(1,2,figsize=(11,11))\n\nMax_Image,Min_Image = hessian_reading(Main_Set[\"BACTERIA\"][7],0.15,\"rc\")\n\naxis[0].set_xlabel(Max_Image.shape)\naxis[0].set_ylabel(Max_Image.size)\naxis[0].set_title(\"MAX\")\naxis[0].imshow(Max_Image)\n\naxis[1].set_xlabel(Min_Image.shape)\naxis[1].set_ylabel(Min_Image.size)\naxis[1].set_title(\"MIN\")\naxis[1].imshow(Min_Image)","f7d10960":"figure,axis = plt.subplots(1,2,figsize=(11,11))\n\nMax_Image,Min_Image = hessian_reading(Main_Set[\"BACTERIA\"][77],0.15,\"rc\")\n\naxis[0].set_xlabel(Max_Image.shape)\naxis[0].set_ylabel(Max_Image.size)\naxis[0].set_title(\"MAX\")\naxis[0].imshow(Max_Image)\n\naxis[1].set_xlabel(Min_Image.shape)\naxis[1].set_ylabel(Min_Image.size)\naxis[1].set_title(\"MIN\")\naxis[1].imshow(Min_Image)","5d3c3b27":"figure,axis = plt.subplots(1,2,figsize=(11,11))\n\nMax_Image,Min_Image = hessian_reading(Main_Set[\"BACTERIA\"][177],0.15,\"rc\")\n\naxis[0].set_xlabel(Max_Image.shape)\naxis[0].set_ylabel(Max_Image.size)\naxis[0].set_title(\"MAX\")\naxis[0].imshow(Max_Image)\n\naxis[1].set_xlabel(Min_Image.shape)\naxis[1].set_ylabel(Min_Image.size)\naxis[1].set_title(\"MIN\")\naxis[1].imshow(Min_Image)","95b11dae":"figure,axis = plt.subplots(1,2,figsize=(11,11))\n\nSkeleton_Image = skeleton_reading(Main_Set[\"BACTERIA\"][22])\n\naxis[0].set_xlabel(Skeleton_Image.shape)\naxis[0].set_ylabel(Skeleton_Image.size)\naxis[0].set_title(\"SKELETON\")\naxis[0].imshow(Skeleton_Image)\n\naxis[1].set_xlabel(simple_reading(Main_Set[\"BACTERIA\"][22]).shape)\naxis[1].set_ylabel(simple_reading(Main_Set[\"BACTERIA\"][22]).size)\naxis[1].set_title(\"BACTERIA\")\naxis[1].imshow(simple_reading(Main_Set[\"BACTERIA\"][22]))","09fed846":"figure,axis = plt.subplots(1,2,figsize=(11,11))\n\nSkeleton_Image = skeleton_reading(Main_Set[\"BACTERIA\"][229])\n\naxis[0].set_xlabel(Skeleton_Image.shape)\naxis[0].set_ylabel(Skeleton_Image.size)\naxis[0].set_title(\"SKELETON\")\naxis[0].imshow(Skeleton_Image)\n\naxis[1].set_xlabel(simple_reading(Main_Set[\"BACTERIA\"][229]).shape)\naxis[1].set_ylabel(simple_reading(Main_Set[\"BACTERIA\"][229]).size)\naxis[1].set_title(\"BACTERIA\")\naxis[1].imshow(simple_reading(Main_Set[\"BACTERIA\"][229]))","dc2ab677":"drawing_contours_vision(Main_Set[\"BACTERIA\"][111])","41ea1f43":"drawing_contours_vision(Main_Set[\"BACTERIA\"][161])","b92edbd3":"drawing_contours_vision(Main_Set[\"BACTERIA\"][61])","b5428dba":"simple_spectrum_vision(Main_Set[\"BACTERIA\"][299],\"jet\")","03c2da7b":"simple_spectrum_vision(Main_Set[\"BACTERIA\"][299],\"hot\")","4dd69197":"simple_spectrum_vision(Main_Set[\"BACTERIA\"][299],\"Spectral\")","20324690":"simple_spectrum_vision(Main_Set[\"BACTERIA\"][99],\"jet\")","e24b6203":"simple_spectrum_vision(Main_Set[\"BACTERIA\"][99],\"hot\")","686434ec":"simple_spectrum_vision(Main_Set[\"BACTERIA\"][99],\"Spectral\")","b0f0b3e6":"figure,axis = plt.subplots(1,2,figsize=(11,11))\n\nTransformation_Mask = layers_reading(Main_Set[\"BACTERIA\"][22],Main_Set[\"MASK\"][22])\n\naxis[0].set_xlabel(Transformation_Mask.shape)\naxis[0].set_ylabel(Transformation_Mask.size)\naxis[0].set_title(\"TRANSFORMATION\")\naxis[0].imshow(Transformation_Mask)\n\naxis[1].set_xlabel(simple_reading(Main_Set[\"BACTERIA\"][22]).shape)\naxis[1].set_ylabel(simple_reading(Main_Set[\"BACTERIA\"][22]).size)\naxis[1].set_title(\"BACTERIA\")\naxis[1].imshow(simple_reading(Main_Set[\"BACTERIA\"][22]))","68cbcdaa":"figure,axis = plt.subplots(1,2,figsize=(11,11))\n\nTransformation_Mask = layers_reading(Main_Set[\"BACTERIA\"][277],Main_Set[\"MASK\"][277])\n\naxis[0].set_xlabel(Transformation_Mask.shape)\naxis[0].set_ylabel(Transformation_Mask.size)\naxis[0].set_title(\"TRANSFORMATION\")\naxis[0].imshow(Transformation_Mask[:,:,0])\n\naxis[1].set_xlabel(simple_reading(Main_Set[\"BACTERIA\"][277]).shape)\naxis[1].set_ylabel(simple_reading(Main_Set[\"BACTERIA\"][277]).size)\naxis[1].set_title(\"BACTERIA\")\naxis[1].imshow(simple_reading(Main_Set[\"BACTERIA\"][277]))","5ba01476":"figure,axis = plt.subplots(1,2,figsize=(11,11))\n\nTransformation_Mask = layers_reading(Main_Set[\"BACTERIA\"][301],Main_Set[\"MASK\"][301])\n\naxis[0].set_xlabel(Transformation_Mask.shape)\naxis[0].set_ylabel(Transformation_Mask.size)\naxis[0].set_title(\"TRANSFORMATION\")\naxis[0].imshow(Transformation_Mask[:,:,0])\n\naxis[1].set_xlabel(simple_reading(Main_Set[\"BACTERIA\"][301]).shape)\naxis[1].set_ylabel(simple_reading(Main_Set[\"BACTERIA\"][301]).size)\naxis[1].set_title(\"BACTERIA\")\naxis[1].imshow(simple_reading(Main_Set[\"BACTERIA\"][301]))","e5332e35":"figure,axis = plt.subplots(1,2,figsize=(11,11))\n\nTransformation_Mask = layers_reading(Main_Set[\"BACTERIA\"][201],Main_Set[\"MASK\"][201])\n\naxis[0].set_xlabel(Transformation_Mask.shape)\naxis[0].set_ylabel(Transformation_Mask.size)\naxis[0].set_title(\"TRANSFORMATION\")\naxis[0].imshow(Transformation_Mask[:,:,0])\n\naxis[1].set_xlabel(simple_reading(Main_Set[\"BACTERIA\"][201]).shape)\naxis[1].set_ylabel(simple_reading(Main_Set[\"BACTERIA\"][201]).size)\naxis[1].set_title(\"BACTERIA\")\naxis[1].imshow(simple_reading(Main_Set[\"BACTERIA\"][201]))","434b82c3":"figure,axis = plt.subplots(1,2,figsize=(11,11))\n\nTransformation_Mask = layers_reading(Main_Set[\"BACTERIA\"][291],Main_Set[\"MASK\"][291])\n\naxis[0].set_xlabel(Transformation_Mask.shape)\naxis[0].set_ylabel(Transformation_Mask.size)\naxis[0].set_title(\"TRANSFORMATION\")\naxis[0].imshow(Transformation_Mask)\n\naxis[1].set_xlabel(simple_reading(Main_Set[\"BACTERIA\"][291]).shape)\naxis[1].set_ylabel(simple_reading(Main_Set[\"BACTERIA\"][291]).size)\naxis[1].set_title(\"BACTERIA\")\naxis[1].imshow(simple_reading(Main_Set[\"BACTERIA\"][291]))","2588b27f":"figure,axis = plt.subplots(1,2,figsize=(11,11))\n\nTransformation_Mask = layers_reading(Main_Set[\"BACTERIA\"][91],Main_Set[\"MASK\"][91])\n\naxis[0].set_xlabel(Transformation_Mask.shape)\naxis[0].set_ylabel(Transformation_Mask.size)\naxis[0].set_title(\"TRANSFORMATION\")\naxis[0].imshow(Transformation_Mask)\n\naxis[1].set_xlabel(simple_reading(Main_Set[\"BACTERIA\"][91]).shape)\naxis[1].set_ylabel(simple_reading(Main_Set[\"BACTERIA\"][91]).size)\naxis[1].set_title(\"BACTERIA\")\naxis[1].imshow(simple_reading(Main_Set[\"BACTERIA\"][91]))","441bc9cd":"figure,axis = plt.subplots(1,2,figsize=(11,11))\n\nTransformation_Mask = layers_reading(Main_Set[\"BACTERIA\"][7],Main_Set[\"MASK\"][7])\n\naxis[0].set_xlabel(Transformation_Mask.shape)\naxis[0].set_ylabel(Transformation_Mask.size)\naxis[0].set_title(\"TRANSFORMATION\")\naxis[0].imshow(Transformation_Mask)\n\naxis[1].set_xlabel(simple_reading(Main_Set[\"BACTERIA\"][7]).shape)\naxis[1].set_ylabel(simple_reading(Main_Set[\"BACTERIA\"][7]).size)\naxis[1].set_title(\"BACTERIA\")\naxis[1].imshow(simple_reading(Main_Set[\"BACTERIA\"][7]))","925ecc6b":"Image_List = []\nTransformation_List = []\n\nfor image_x,mask_x in zip(Main_Set.BACTERIA.values,Main_Set.MASK.values):\n    \n    Reading_Image = simple_reading(image_x)\n    Transformation_Image = layers_reading(image_x,mask_x)\n    \n    Resized_Image = cv2.resize(Reading_Image,(180,180))\n    Resized_Transformation = cv2.resize(Transformation_Image,(180,180))\n    \n    Image_List.append(Resized_Image)\n    Transformation_List.append(Resized_Transformation)","45702222":"print(len(Image_List))\nprint(len(Transformation_List))","04d5f865":"print(\"WHEN IT IS ARRAY IMAGE SHAPE: \",np.shape(np.array(Image_List)))\nprint(\"WHEN IT IS ARRAY MASK SHAPE: \",np.shape(np.array(Transformation_List)))","57d5e2c6":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(Transformation_List[10],cmap=\"jet\")\naxis[0].set_xlabel(Transformation_List[10].shape)\naxis[0].set_title(\"MASK\")\naxis[1].imshow(Image_List[10])\naxis[1].set_xlabel(Image_List[10].shape)\naxis[1].set_title(\"ORIGINAL\")","05c5ccfc":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(Transformation_List[100],cmap=\"jet\")\naxis[0].set_xlabel(Transformation_List[100].shape)\naxis[0].set_title(\"MASK\")\naxis[1].imshow(Image_List[100])\naxis[1].set_xlabel(Image_List[100].shape)\naxis[1].set_title(\"ORIGINAL\")","68c5e29d":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(Transformation_List[190],cmap=\"jet\")\naxis[0].set_xlabel(Transformation_List[190].shape)\naxis[0].set_title(\"MASK\")\naxis[1].imshow(Image_List[190])\naxis[1].set_xlabel(Image_List[190].shape)\naxis[1].set_title(\"ORIGINAL\")","83a810df":"Train_Set = np.array(Image_List,dtype=\"float32\")\nTransformation_Set = np.array(Transformation_List,dtype=\"float32\")\n\nTrain_Set = Train_Set \/ 255.\nTransformation_Set = Transformation_Set \/ 255.","16ba9a5e":"print(\"TRAIN SHAPE: \",Train_Set.shape)\nprint(\"TRANSFORMATION SHAPE: \",Transformation_Set.shape)","3ca3d67f":"print(\"TRAIN REDUCE SHAPE: \",Train_Set[:350].shape)\nprint(\"TRANSFORMATION REDUCE SHAPE: \",Transformation_Set[:350].shape)","5b31b462":"compile_loss = \"binary_crossentropy\"\ncompile_optimizer = Adam(lr=0.00001)\noutput_class = 1","9aa5a17c":"Early_Stopper = tf.keras.callbacks.EarlyStopping(monitor=\"loss\",patience=3,mode=\"min\")\nCheckpoint_Model = tf.keras.callbacks.ModelCheckpoint(monitor=\"val_accuracy\",\n                                                      save_best_only=True,\n                                                      save_weights_only=True,\n                                                      filepath=\".\/modelcheck\")","b45973de":"E_AE = Sequential()\nE_AE.add(Conv2D(20,(5,5),kernel_initializer = 'he_normal',use_bias = True))\nE_AE.add(BatchNormalization())\nE_AE.add(ReLU())\n#\nE_AE.add(Conv2D(40,(5,5),kernel_initializer = 'he_normal',use_bias = True))\nE_AE.add(BatchNormalization())\nE_AE.add(ReLU())\n#\nE_AE.add(Conv2D(80,(5,5),kernel_initializer = 'he_normal',use_bias = True))\nE_AE.add(BatchNormalization())\nE_AE.add(ReLU())\n#\nE_AE.add(Conv2D(160,(5,5),kernel_initializer = 'he_normal',use_bias = True))\nE_AE.add(BatchNormalization())\nE_AE.add(ReLU())\n#\nE_AE.add(Conv2D(210,(5,5),kernel_initializer = 'he_normal',use_bias = True))\nE_AE.add(BatchNormalization())\nE_AE.add(ReLU())\n\n\nD_AE = Sequential()\nD_AE.add(Conv2DTranspose(160,(5,5)))\nD_AE.add(ReLU())\n#\nD_AE.add(Conv2DTranspose(80,(5,5)))\nD_AE.add(ReLU())\n#\nD_AE.add(Conv2DTranspose(40,(5,5)))\nD_AE.add(ReLU())\n#\nD_AE.add(Conv2DTranspose(20,(5,5)))\nD_AE.add(ReLU())\n#\nD_AE.add(Conv2DTranspose(output_class,(5,5)))\nD_AE.add(ReLU())","22020a21":"Auto_Encoder = Sequential([E_AE,D_AE])\nAuto_Encoder.compile(loss=compile_loss,optimizer=compile_optimizer,metrics=[\"mse\"])","eb999eaf":"Model_AutoEncoder = Auto_Encoder.fit(Train_Set[:350],Transformation_Set[:350],epochs=40,callbacks=[Checkpoint_Model])","18b754ef":"Prediction_Seen = Auto_Encoder.predict(Train_Set[:5])","3cab557b":"figure,axis = plt.subplots(1,2,figsize=(10,10))\naxis[0].imshow(Train_Set[4])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Seen[4])\naxis[1].set_title(\"PREDICTION\")","dfe7cae2":"figure,axis = plt.subplots(1,2,figsize=(10,10))\naxis[0].imshow(Train_Set[1])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Seen[1])\naxis[1].set_title(\"PREDICTION\")","78077d06":"figure,axis = plt.subplots(1,2,figsize=(10,10))\naxis[0].imshow(Train_Set[0])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Seen[0])\naxis[1].set_title(\"PREDICTION\")","05dbc7f1":"figure,axis = plt.subplots(1,2,figsize=(10,10))\naxis[0].imshow(Train_Set[2])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Seen[2])\naxis[1].set_title(\"PREDICTION\")","ae189074":"Prediction_Non_Seen = Auto_Encoder.predict(Train_Set[350:])","0bd87315":"figure,axis = plt.subplots(1,2,figsize=(10,10))\naxis[0].imshow(Train_Set[350])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Non_Seen[0])\naxis[1].set_title(\"PREDICTION\")","d43c1ee6":"figure,axis = plt.subplots(1,2,figsize=(10,10))\naxis[0].imshow(Train_Set[351])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Non_Seen[1])\naxis[1].set_title(\"PREDICTION\")","5aede5df":"figure,axis = plt.subplots(1,2,figsize=(10,10))\naxis[0].imshow(Train_Set[355])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Non_Seen[5])\naxis[1].set_title(\"PREDICTION\")","0326070d":"figure,axis = plt.subplots(1,2,figsize=(10,10))\naxis[0].imshow(Train_Set[360])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Non_Seen[10])\naxis[1].set_title(\"PREDICTION\")","172d13cc":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Picking_Prediction_Image = Prediction_Non_Seen[indexing]\n    \n    operations.set_xlabel(Picking_Prediction_Image.shape)\n    operations.set_ylabel(Picking_Prediction_Image.size)\n    operations.set_title(\"PREDICTION\")\n    operations.imshow(Picking_Prediction_Image)\n    \nplt.tight_layout()\nplt.show()","b809a24c":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Picking_Prediction_Image = Prediction_Non_Seen[indexing]\n    \n    operations.set_xlabel(Picking_Prediction_Image.shape)\n    operations.set_ylabel(Picking_Prediction_Image.size)\n    operations.set_title(\"PREDICTION\")\n    operations.imshow(Picking_Prediction_Image,cmap=\"hot\")\n    \nplt.tight_layout()\nplt.show()","346ac8e7":"#### TRANSFORMATION VISION","b82cbb48":"#### PREDICTION SEEN","b0aaf0e0":"#### PNG PATH","8dad481a":"#### CANNY VISION","42d2a752":"# PATH PROCESS","3e09faed":"#### ADAPTIVE THRESHOLD VISION","9f16708d":"#### TO SERIES","53e16255":"#### HESSIAN VISION","e4034952":"# PACKAGES AND LIBRARIES","81d54fa6":"# AUTO ENCODER PROCESS","96361ad9":"#### SIMPLE VISION","ad43f7e3":"#### SKELETON VISION","4f55b767":"#### STRUCTURE","e07f57f3":"#### PREDICTION NON-SEEN \/ MAIN PREDICTION","b306e6b0":"# TRANSFORMATION DATA","30154426":"#### CONTOUR DRAWING VISION","c8fb07f6":"#### FUNCTION","44016162":"#### PARAMETERS","78155b4f":"#### CHECKING","821aaa26":"#### THRESHOLD VISION","58df3dca":"#### MAIN PATH","cd342c57":"# HISTORY\n\n* Spirochaeta is a genus of bacteria classified within the phylum Spirochaetes. Included in this dataset are 366 darkfield microscopy images and manually annotated masks which can be used for classification and segmentation purposes. Detecting bacteria in blood could have a huge significance for research in both the medical and computer science field.\n\n#### What is special about this dataset?\n* It was gathered and annotated by students (hand-on experience)\n* It has more than just one targeted class (blood cell and bacteria were annotated)\n* It is highly imbalanced, so naive loss functions would work less properly","40b7d2e2":"#### TO ARRAY","2ca7054b":"#### SPECTRUM VISION","b7526f80":"# VISION & ANALYSIS","efc983cf":"#### TO DATAFRAME","3f9dcec9":"#### TRAINING","96d063ab":"#### TRANSFORMATION","5f48a8f1":"#### CALLBACKS"}}