{"cell_type":{"f27a6026":"code","40bab13a":"code","b059019c":"code","2b7fc857":"code","6e339a15":"code","1eca8266":"code","71340be1":"code","874a65f0":"code","2c96d50a":"code","b2ccd185":"code","4e96426f":"code","b24f637e":"code","d7b8c66c":"code","8809d8ea":"code","06d3ebfc":"code","73a2b250":"code","27b2b8ca":"code","42391b31":"code","3a83aa60":"code","5338d35a":"code","c66c6cf1":"code","093b4ff4":"code","fbed65ca":"code","fd28c5ac":"code","032d2fe0":"code","acda49b3":"code","659c5a8f":"code","3a5ee895":"code","e2d88f7b":"code","8b56fe94":"code","059e91bc":"code","d7bfbb45":"code","dafb11ff":"code","ac7e2c30":"markdown","72a3206a":"markdown","e00ae4db":"markdown","8db968e7":"markdown","cd6b0fbd":"markdown","7652eaa9":"markdown","50c7d787":"markdown","f76651b7":"markdown","b80b72fc":"markdown","bc01e6bd":"markdown","861ccd5d":"markdown","f08b6321":"markdown","975c3f75":"markdown","2933d873":"markdown","023613e4":"markdown","9fdf3a86":"markdown","f44e3ea8":"markdown","3d732477":"markdown","4e9ef8d3":"markdown","314fb8df":"markdown","6455e6ad":"markdown","47419b10":"markdown","3450839c":"markdown","1096043c":"markdown","813fa698":"markdown"},"source":{"f27a6026":"import pandas as pd # dataframe manipulation\nimport numpy as np # linear algebra\n#------------------data viz-----------------------\nimport matplotlib.pyplot as plt \nimport matplotlib.gridspec as gridspec \n%matplotlib inline\nimport seaborn as sns \nimport plotly.express as px # \nimport plotly.graph_objects as go # \nfrom statsmodels.graphics.gofplots import qqplot \n#_________________________________________________\nimport re # text data\nimport string","40bab13a":"file_path = '..\/input\/disneyland-reviews\/DisneylandReviews.csv'\ndf = pd.read_csv(file_path, encoding = 'ISO-8859-1')","b059019c":"df.shape","2b7fc857":"df.isnull().sum()","6e339a15":"df.head()","1eca8266":"df.tail()","71340be1":"df = pd.read_csv(file_path, encoding = 'ISO-8859-1', na_values = 'missing')\ndf.tail()","874a65f0":"df.isnull().sum()\/len(df)*100","2c96d50a":"df.Review_ID.value_counts().head(21)","b2ccd185":"df[df.Review_ID == 166787525]","4e96426f":"df[df.Review_ID == 129231609]","b24f637e":"df.drop_duplicates(subset='Review_ID', inplace=True, keep='first')","d7b8c66c":"df.shape","8809d8ea":"branch_count = df.Branch.value_counts()\nbranch_col = ['navy', 'crimson', 'forestgreen']\n# remove extra characters from branch name\nbranch_name = [branch[11:] for branch in branch_count.index] \n\nwith plt.style.context('fivethirtyeight'):\n    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n    plt.subplots_adjust(wspace=0.3)\n    # plot 1\n    ax[0].bar(branch_name, \n              branch_count.values, \n              color=branch_col)\n    for x , y, col in zip(branch_name, \n                     branch_count.values, branch_col):\n        ax[0].text(x, y\/2, y, \n                   ha='center',color='white', \n                   bbox=dict(facecolor=col, edgecolor='white', boxstyle='circle'))\n    ax[0].set_ylabel('Number of Reviews')\n    # plot 2\n    ax[1].pie(x=branch_count.values, \n              #labels=branch_name,\n              colors=branch_col,  \n              autopct='%1.1f%%', textprops=dict(color='white'))\n    ax[1].legend(labels=branch_name, loc='upper right', fontsize=\"xx-small\")\n    plt.show()","06d3ebfc":"no_missing = df.dropna().reset_index() # drop missing dates\nno_missing['Year'] = no_missing['Year_Month'].apply(lambda x: int(re.split('-', x)[0]))\nno_missing['Month'] = no_missing['Year_Month'].apply(lambda x: int(re.split('-', x)[1]))\n# computes quater using month number\nno_missing['Quater'] = no_missing['Month'].apply(lambda x: (x-1)\/\/3+1) ","73a2b250":"# plot\nbranch_col = ['navy', 'crimson', 'forestgreen']\nwith plt.style.context('ggplot'):\n    fig, ax = plt.subplots(1, 3, figsize=(12, 5), sharey=True)\n    plt.subplots_adjust(top=0.8)\n    for i, (branch, col) in enumerate(zip(no_missing.Branch.unique(), branch_col)):\n        counts = no_missing[(no_missing.Branch == branch)|(no_missing.Year>=2014)]['Quater'].value_counts()\n        x = counts.index\n        y = counts.values\n        ax[i].bar(x, y, color=col, label=branch)\n        for q, val in zip(x, y):\n            ax[i].text(q, val\/2, val, ha='center', \n                       color='white', \n                       bbox=dict(facecolor=col, edgecolor='white', boxstyle=\"circle\"))\n        ax[i].set_xlabel('Quater')\n        ax[0].set_ylabel('Number of visits')\n        ax[i].set_title(branch.upper()[11:], color=col)\n    fig.suptitle('Peak time to visit Disneyland (from 2014-2019 data)', fontsize=15, fontweight='semibold')\n    fig.show()","27b2b8ca":"fig = go.Figure()\nfor i, (branch, col) in enumerate(zip(no_missing.Branch.unique(), branch_col)):\n    counts = no_missing[(no_missing.Branch == branch)|(no_missing.Year>=2014)]['Quater'].value_counts()\n    x = counts.index\n    y = counts.values\n    fig.add_trace(go.Bar(x=x, y=y, name=branch[11:], marker_color=col, text=y))\nfig.update_traces(textposition='inside')\nfig.update_layout(barmode='group', xaxis_tickangle=-45, template='ggplot2')\nfig.show()","42391b31":"with plt.style.context('seaborn'):\n    fig, ax = plt.subplots(1, 3, figsize=(12, 5))\n    plt.subplots_adjust(top=0.8, wspace=0.3)\n    for i, (branch, col) in enumerate(zip(df.Branch.unique(), branch_col)):\n        # count the reviews for a particular disneyland branch\n        loc_count = df[df.Branch == branch]['Reviewer_Location'].value_counts()[:5]\n        # plot\n        x = loc_count.index\n        y = loc_count.values\n        ax[i].bar(x, y, color=col)\n        ax[0].set_ylabel('Number of visits')\n        ax[i].set_title(branch.upper()[11:], color=col)\n        ax[i].tick_params(axis='x', rotation=90)\n        for c, val in zip(x, y):\n            ax[i].text(c, val*1.01, val, ha='center', color='white',\n                       bbox=dict(facecolor=col, \n                                 edgecolor='white', \n                                 boxstyle=\"circle\", pad=0.5))\n    fig.suptitle('Major groups visiting disneyland branches', \n                     fontsize=15, fontweight='semibold')\n    fig.show()","3a83aa60":"rating_count = df.Rating.value_counts()\nwith plt.style.context('ggplot'):\n    plt.figure(figsize=(8, 6))\n    plt.bar(rating_count.index, rating_count.values, color='teal')\n    for r, val in zip(rating_count.index, rating_count.values):\n        plt.text(r, val, \n                 str(round(val\/sum(rating_count.values)*100, 2))+'%', \n                 ha='center', color='white', \n                 bbox=dict(facecolor='dimgrey', edgecolor='white', boxstyle=\"round\"))\n    plt.xlabel('Ratings')\n    plt.ylabel('Number of reviewers')\n    plt.yticks(np.arange(0, 30001, 5000))","5338d35a":"markers = ['o', '*', 'D']\nwith plt.style.context('bmh'):\n    plt.figure(figsize=(10, 8))\n    for branch, m, col in zip(df.Branch.unique(), markers, branch_col):\n        counts = df[df.Branch == branch]['Rating'].value_counts()\n        x = counts.index\n        y = counts.values\n        plt.plot(x, y, marker=m, markersize=9, color=col, label=branch)\n        plt.xticks(np.arange(1, 6))\n        plt.xlabel('Ratings')\n        plt.ylabel('Number of reviews')\n    plt.title('Distribution of Ratings across disneyland branches')\n    plt.legend()\n    plt.show()","c66c6cf1":"branch_ratings = df.groupby('Branch').agg({'Rating': 'mean'}).unstack()['Rating']\nplt.figure(figsize=(6, 5))\nplt.barh([branch[11:] for branch in branch_ratings.index], \n         branch_ratings.values, \n         color=['forestgreen', 'navy', 'crimson'])\nfor val, p in zip(branch_ratings.values, [branch[11:] for branch in branch_ratings.index]):\n    plt.text(val\/2, p, round(val, 2), color='white', ha='center', \n            bbox=dict(boxstyle='round4', facecolor='black'))\nplt.xlabel('Average rating')\nplt.xticks(np.arange(0, 6))\nplt.show()","093b4ff4":"df['review_len'] = df.Review_Text.apply(lambda x: len(x) - x.count(' '))","fbed65ca":"def univariate_dist(data, col, color=None, theme='ggplot', figsize=(12, 10), hist_bins='auto'):\n    \"\"\"\n    This functions plots the univariate distribution - histogram, boxplot and qqplot, \n    for a pandas dataframe \n    \"\"\"\n    with plt.style.context(theme):\n        fig = plt.figure(figsize=figsize)\n        plt.subplots_adjust(wspace=0.5, hspace=0.4)\n        spec = gridspec.GridSpec(2, 3, figure=fig)\n        ax1 = fig.add_subplot(spec[0, :-1]) # first axis\n        ax1.set_title('Histogram', color='crimson')\n        ax2 = fig.add_subplot(spec[1, :-1]) # second axis\n        ax2.set_title('QQ Plot', color='crimson')\n        ax3 = fig.add_subplot(spec[:, -1:]) # third axis\n        ax3.set_title('Boxplot', color='crimson')\n        sns.histplot(data=data, x=col, ax=ax1, color=color, kde=True, bins=hist_bins)\n        qqplot(data[col], fit=True, line='45', ax=ax2, color=color)\n        sns.boxplot(y=data[col], ax=ax3, color=color)\n        plt.suptitle(col.upper())\n        return fig.show()","fd28c5ac":"univariate_dist(df, 'review_len', 'goldenrod')","032d2fe0":"punctuations = string.punctuation # list of punctuations\n# percentage of punctuations\ndef count_punc(text):\n    \"\"\"This function counts the number of punctuations in a text\"\"\"\n    count = sum(1 for char in text if char in punctuations)\n    return round(count\/(len(text) - text.count(\" \"))*100, 3)\n\n# apply function\ndf['punc%'] = df['Review_Text'].apply(lambda x: count_punc(x))","acda49b3":"univariate_dist(df, 'punc%')","659c5a8f":"df.head(1)","3a5ee895":"df['word_count'] = df['Review_Text'].apply(lambda x: len(x.split(' ')))","e2d88f7b":"univariate_dist(df, 'word_count')","8b56fe94":"with plt.style.context('ggplot'):\n    plt.figure(figsize=(12, 8))\n    sns.scatterplot(data=df, x='review_len', y='word_count')\n    plt.text(188, 1330, 'Bad Data')\n    plt.text(521, 5600, 'Bad Data')\n    plt.text(168, 793, 'Bad Data')\n    plt.text(145, 1175, 'Bad Data')","059e91bc":"RE_SUSPICIOUS = re.compile(r'[&#<>{}\\[\\]\\\\]')\ndef impurity(text, min_len=10):\n    \"\"\"returns the share of suspicious characters in a text\"\"\"\n    if text == None or len(text) < min_len:\n        return 0\n    else:\n        return len(RE_SUSPICIOUS.findall(text))\/len(text)*100","d7bfbb45":"df['impurity'] = df['Review_Text'].apply(impurity)","dafb11ff":"df.sort_values(by='impurity', ascending=False)","ac7e2c30":"The `Review_ID` column consits of dupicate id's","72a3206a":"## Duplicate Reviews","e00ae4db":"`Year_month` column consists of 6 percent missing values. These value are not dropped since the goal is to analyse the reviews. Removing these missing dates will result in loss of data.","8db968e7":"## First five rows","cd6b0fbd":"## Major Groups visiting Disneyland branches","7652eaa9":"# Check Impurity","50c7d787":"### Word Count","f76651b7":"# Lets look at the data...","b80b72fc":"## Distribution of Ratings","bc01e6bd":"Therefore, Quater 3 is the most busiest period to visit Disneyland for all the Disneyland branches.","861ccd5d":"## Peak time to visit Disneyland\nThe peak time is computed by counting the reviews\/visits in all the quaters for a repective disneyland branch. `Note` only data from 2014 - 2019 was included in this analysis, to analyse the current trend.","f08b6321":"## Number of reviews for the three Disneyland branches\nDisneyland Califoria has the highest percentage of reviews (approx. 46%).","975c3f75":"It is quit obvious that the relationship between the review length an the word count would be linear. But the plot below indicates some impurity in the dataset. There are some data points with a small review length but a extremly large word count. Further analysis needs to be conducted.","2933d873":"### Length of Review\nIt is the length of a review minus the spaces","023613e4":"## Function to check impurity\n- The below function searches for all the characters defined in RE_SUSPICIOUS","9fdf3a86":"Further analysing the dupicate id indicate that they also contain the same information in other columns too.","f44e3ea8":"- After applying the function to the dataframe, the dataframe is sorted with respect to the percecntage of impurity in decending order.\n- It can be observed that there is maximum 3% impurity in the data. ","3d732477":"## Additional Features","4e9ef8d3":"## Last five rows","314fb8df":"# EDA","6455e6ad":"- Although, there were no missing values initially, but, after looking as the last five rows of the dataset, the `Year_month` column consists of missing values passed as string. Therefore, reading the file again and specifying the na_values as `missing` ","47419b10":"## Droping duplicate records and keeping first","3450839c":"### Punctuations Percentage","1096043c":"## Reading data again and specifying na_values as 'missing'","813fa698":"# Import Libraries"}}