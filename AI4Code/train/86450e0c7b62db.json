{"cell_type":{"902d1c7c":"code","719f0ce5":"code","80400928":"code","9c98a6a5":"code","05a99f75":"code","ae44c6f5":"code","2ca6257a":"code","7549420f":"code","00ac020b":"code","0ac9a389":"code","422e9542":"code","50e8c876":"code","72c55403":"code","dd84db21":"code","352c9f37":"code","acc37105":"code","40b36d05":"code","a5b5c344":"code","04941710":"code","a51b6142":"code","478df7bf":"code","f8c469b4":"code","54d54343":"code","31ec07fe":"code","84d79cdc":"code","9933f2a1":"code","5631efe0":"markdown","2a1f5ee9":"markdown","89898b5e":"markdown","2a512c6a":"markdown","56c82e14":"markdown","f87c337c":"markdown","84b293b8":"markdown","a9bda947":"markdown"},"source":{"902d1c7c":"import os\nimport torch\nimport torchvision\nimport torch.nn as nn\nfrom tqdm.notebook import tqdm\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\nimport torchvision.transforms as T\nimport torchvision.models as models\nfrom torch.utils.data import DataLoader","719f0ce5":"TRAIN_DIR = \"..\/input\/chest-xray-pneumonia\/chest_xray\/train\"\nVAL_DIR = \"..\/input\/chest-xray-pneumonia\/chest_xray\/val\"\nTEST_DIR = \"..\/input\/chest-xray-pneumonia\/chest_xray\/test\"","80400928":"transform_train = T.Compose([\n    T.Resize((64, 64)),\n    T.RandomCrop(64, padding_mode=\"reflect\"),\n    T.RandomHorizontalFlip(),\n    T.ToTensor()\n])\n\ntransform_val = T.Compose([\n    T.Resize((64, 64)),\n    T.ToTensor()\n])","9c98a6a5":"train_ds = torchvision.datasets.ImageFolder(root=TRAIN_DIR, transform=transform_train)\nval_ds = torchvision.datasets.ImageFolder(root=VAL_DIR, transform=transform_val)","05a99f75":"batch_size=128","ae44c6f5":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=4, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size, num_workers=4, pin_memory=True)","2ca6257a":"def get_device():\n    if torch.cuda.is_available():\n        return torch.device(\"cuda\")\n    else:\n        return torch.device(\"cpu\")\n    \ndef to_device(data, device):\n    if isinstance(data, (list, tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        for x in self.dl:\n            yield to_device(x, self.device)\n            \n    def __len__(self):\n        return len(self.dl)\n    \ndevice = get_device()\ndevice","7549420f":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","00ac020b":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch\n        outputs = self(images)\n        loss = F.cross_entropy(outputs, labels)\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch\n        outputs = self(images)\n        loss = F.cross_entropy(outputs, labels)\n        acc = accuracy(outputs, labels)\n        return {\"val_loss\": loss.detach(), \"val_acc\": acc}\n    \n    def validation_epoch_end(self, outputs):\n        batch_loss = [x[\"val_loss\"] for x in outputs]\n        epoch_loss = torch.stack(batch_loss).mean()\n        batch_acc = [x[\"val_acc\"] for x in outputs]\n        epoch_acc = torch.stack(batch_acc).mean()\n        return {\"val_loss\": epoch_loss.item(), \"val_acc\": epoch_acc.item()}\n    \n    def epoch_end(self, epoch, epochs, result):\n        print(\"Epoch [{}\/{}], last_lr: {:.6f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n        epoch+1, epochs, result[\"lrs\"][-1], result[\"train_loss\"], result[\"val_loss\"], result[\"val_acc\"]))","0ac9a389":"class ResNet(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = models.resnet18(pretrained=True)\n        number_of_features = self.network.fc.in_features\n        self.network.fc = nn.Linear(number_of_features, 2)\n        \n    def forward(self, xb):\n        return self.network(xb)\n    \n    def freeze(self):\n        for param in self.network.parameters():\n            param.requires_grad=False\n        for param in self.network.fc.parameters():\n            param.requires_grad=True\n            \n    def unfreeze(self):\n        for param in self.network.parameters():\n            param.requires_grad=True","422e9542":"model = to_device(ResNet(), device)","50e8c876":"@torch.no_grad()\ndef evaluate(model, val_dl):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_dl]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group[\"lr\"]\n    \ndef fit_one_cycle(epochs, max_lr, model, train_dl, val_dl,\n                 weight_decay=0, grad_clip=None, opt_func=torch.optim.Adam):\n    history = []\n    \n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    scheduler = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,\n                                        steps_per_epoch=len(train_dl))\n    \n    for epoch in range(epochs):\n        model.train()\n        train_loss = []\n        lrs = []\n        for batch in tqdm(train_dl):\n            loss = model.training_step(batch)\n            train_loss.append(loss)\n            loss.backward()\n            \n            \n            if grad_clip:\n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n                \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            lrs.append(get_lr(optimizer))\n            scheduler.step()\n        result = evaluate(model, val_dl)\n        result[\"train_loss\"] = torch.stack(train_loss).mean().item()\n        result[\"lrs\"] = lrs\n        model.epoch_end(epoch, epochs, result)\n        history.append(result)\n    return history","72c55403":"result = evaluate(model, val_dl)\nresult","dd84db21":"model.freeze()","352c9f37":"epochs = 10\nmax_lr = 10e-4\ngrad_clip = 0.01\nweight_decay = 10e-4\nopt_func= torch.optim.Adam","acc37105":"%%time\n\nhistory= fit_one_cycle(epochs, max_lr, model, train_dl, val_dl,\n                       grad_clip=grad_clip, weight_decay=weight_decay,\n                       opt_func=opt_func)","40b36d05":"model.unfreeze()","a5b5c344":"%%time\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl,\n                       grad_clip=grad_clip, weight_decay=weight_decay,\n                       opt_func=opt_func)","04941710":"accuracy = [x[\"val_acc\"] for x in history]\nplt.plot(accuracy, \"-rx\")\nplt.title(\"Accuracy\")\nplt.xlabel(\"number of epochs\")\nplt.ylabel(\"Accuracy\")","a51b6142":"val_loss = [x[\"val_loss\"] for x in history]\ntrain_loss = [x.get(\"train_loss\") for x in history]\nplt.plot(val_loss, \"-bx\")\nplt.plot(train_loss, \"-gx\")\nplt.title(\"Loss\")\nplt.legend([\"val_loss\", \"train_loss\"])\nplt.xlabel(\"number of epochs\")","478df7bf":"TEST_DIR =\"..\/input\/chest-xray-pneumonia\/chest_xray\/test\"","f8c469b4":"transform_test = T.Compose([\n    T.Resize((128, 128)),\n    T.ToTensor()\n])\n\ntest_ds = torchvision.datasets.ImageFolder(root=TEST_DIR, transform=transform_test)","54d54343":"test_dl = DataLoader(test_ds, batch_size, num_workers=4, pin_memory=True)","31ec07fe":"test_dl = DeviceDataLoader(test_dl, device)","84d79cdc":"def predict_image(images, model):\n    xb = to_device(images.unsqueeze(0), device)\n    out = model(xb)\n    _, preds = torch.max(out, dim=1)\n    prediction = preds[0].item()\n    return prediction","9933f2a1":"images, labels = test_ds[11]\nplt.imshow(images.permute(1,2,0))\nprint(\"Label\", labels, \"Prediction:\", predict_image(images, model))","5631efe0":"# X-ray","2a1f5ee9":"## Model performance","89898b5e":"## Training","2a512c6a":"## Importing the modules","56c82e14":"## Moving to the GPU","f87c337c":"## Preparing the data","84b293b8":"## The Model","a9bda947":"## Predictions"}}