{"cell_type":{"2b71b579":"code","69bd359d":"markdown","f3c77d98":"markdown","c49d0c1d":"markdown","976e423b":"markdown","31bff01d":"markdown","c7f8d759":"markdown","373a6ae5":"markdown","2448dddb":"markdown","e2cabfa9":"markdown","7badd856":"markdown","899735c7":"markdown","0a6df5fb":"markdown","909eab15":"markdown","47cacb5b":"markdown","858c3d2e":"markdown","de9096cf":"markdown","ba3da46a":"markdown","9c65decf":"markdown","d1379376":"markdown","18146d51":"markdown","2711a7e8":"markdown","874fc114":"markdown","0fa5665e":"markdown"},"source":{"2b71b579":"# Import necessary modules\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n \n# Define data for the model\nx = data = np.linspace(1,2,200)\ny = x*4 + np.random.randn(*x.shape) * 0.3\n\n\n# Create a Sequential model\nmodel = Sequential()\n\n\n# Add layers to the Sequential model\nmodel.add(Dense(1, input_dim=1, activation='linear'))\n\n\n# Compile the model\nmodel.compile(optimizer='sgd', loss='mse', metrics=['mse'])\n\n\n# Declare initial weights and bias\nweights = model.layers[0].get_weights()\nw_init = weights[0][0][0]\nb_init = weights[1][0]\nprint('Linear regression model is initialized with weights w: %.2f, b: %.2f' % (w_init, b_init)) \n\n\n# Train the model\nmodel.fit(x,y, batch_size=1, epochs=30, shuffle=False)\n\n\n# Set final weights and bias\nweights = model.layers[0].get_weights()\nw_final = weights[0][0][0]\nb_final = weights[1][0]\nprint('Linear regression model is trained to have weight w: %.2f, b: %.2f' % (w_final, b_final))\n\n\n# Predict the results\npredict = model.predict(data)\n\n\n# Visualize the results\nplt.figure(figsize=(12,8))\nplt.plot(data, predict, 'b', data , y, 'k.')\nplt.show()","69bd359d":"## 7. Conclusion <a class=\"anchor\" id=\"7\"><\/a>\n\n\n[Back to Table of Contents](#0.1)\n\n- In this kernel, I present a high level overview of Keras - the Deep Learning library of Python.\n\n- In particular, I discuss the Keras Sequential model and Keras Functional API, common layers in Keras and how to compile, train and evaluate our model.\n\n- Then, I present a simple linear regression example using Keras","f3c77d98":"### 3.1 Keras Sequential model <a class=\"anchor\" id=\"3.1\"><\/a>\n\n\n- The **Sequential model** is a linear stack of layers.\n\n- We can create a Sequential model by passing a list of layer instances to the constructor as follows:-\n\n\n`from keras.models import Sequential`\n\n`from keras.layers import Dense, Activation,Conv2D,MaxPooling2D,Flatten,Dropout`\n\n`model = Sequential()`\n\n\n- We can also simply add layers via the **.add()** method as follows:-\n\n`model = Sequential()`\n\n`model.add(Dense(32, input_dim=784))`\n\n`model.add(Activation('relu'))`\n\n\n- For more detailed discussion on Keras Sequential model follow the link below:-\n\n\n[Keras Sequential model](https:\/\/keras.io\/getting-started\/sequential-model-guide\/)","c49d0c1d":"### 5.2 Train with .fit() method <a class=\"anchor\" id=\"5.2\"><\/a>\n\n\n- Now we want to train our model.\n\n- We can use **.fit()** method to fed the training and validation data to the model. \n\n- This will allow you to train the network in batches and set the epochs as follows:-\n\n`model.fit(X_train, X_train, batch_size=32, epochs=10, validation_data=(x_val, y_val))`","976e423b":"### 3.2 Keras Functional API <a class=\"anchor\" id=\"3.2\"><\/a>\n\n\n- The **Keras functional API** is used to define complex models, such as multi-output models, directed acyclic graphs, or models with shared layers.\n\n\n- For more detailed discussion on Keras Functional API follow the link below:-\n\n[Keras Functional API](https:\/\/keras.io\/getting-started\/functional-api-guide\/)\n","31bff01d":"### 4.4 Dense Layer <a class=\"anchor\" id=\"4.4\"><\/a>\n\n\n- We can add a fully connected layer with just specifying the output size,\n\n`model.add(Dense(256, activation='relu'))`","c7f8d759":"### 4.1 Sequential Model <a class=\"anchor\" id=\"4.1\"><\/a>\n\n\n- We can create a Sequential model by passing a list of layer instances to the constructor as follows:-\n\n\n`from keras.models import Sequential`\n\n`from keras.layers import Dense, Activation,Conv2D,MaxPooling2D,Flatten,Dropout`\n\n`model = Sequential()`\n\n","373a6ae5":"### 5.3 Evaluate with .evaluate() method <a class=\"anchor\" id=\"5.3\"><\/a>\n\n\n- The final step is to evaluate the model with the test data.\n\n- It can be done with the **.evaluate()** method as follows:-\n\n`score = model.evaluate(x_test, y_test, batch_size=32)`","2448dddb":"<a class=\"anchor\" id=\"0\"><\/a>\n# **Keras basics for beginners**\n\n\nHello friends,\n\nIn this kernel, I will discuss Keras and Keras fundamentals. In particular, I will show how to compile, train and evaluate the model using Keras. Also, I present a Simple Linear Regression example using Keras and visualize the results. \n\nSo, let's get started.","e2cabfa9":"## 3. Keras fundamentals <a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)\n\n\n- The main structure in Keras is the model which defines the complete graph of a network. \n\n- It is a way to organize layers.\n\n- The simplest type of model is the **Sequential model**. It is the linear stack of layers. \n\n- For more complex architectures, we should use the **Keras functional API**, which allows to build arbitrary graphs of layers.","7badd856":"Thus, we come to the end of this kernel.\n\n\nI hope you find it useful and enjoyable.","899735c7":"### 4.5 Dropout Layer <a class=\"anchor\" id=\"4.5\"><\/a>\n\n\n- We can add a dropout layer with 50% probability as follows:-\n\n`model.add(Dropout(0.5))`","0a6df5fb":"### 4.2 Convolutional Layer <a class=\"anchor\" id=\"4.2\"><\/a>\n\n\n- This is an example of convolutional layer as the input layer with the input shape of 320x320x3, with 48 filters of size 3x3 and use ReLU as an activation function.\n\n\n`input_shape=(320,320,3)`  #this is the input shape of an image 320x320x3\n\n`model.add(Conv2D(48, (3, 3), activation='relu', input_shape= input_shape))`\n\n\n- Another example is as follows:-\n\n`model.add(Conv2D(48, (3, 3), activation='relu'))`","909eab15":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Introduction to Keras](#1)\n1. [What is a backend](#2)\n1. [Keras fundamentals](#3)\n   - [Keras Sequential model](#3.1)\n   - [Keras Functional API](#3.2)\n1. [Keras layers](#4)\n   - [Sequential Model](#4.1)\n   - [Convolutional Layer](#4.2)\n   - [MaxPooling Layer](#4.3)\n   - [Dense Layer](#4.4)\n   - [Dropout Layer](#4.5)\n1. [Compile, train and evaluate model](#5)\n   - [Compile with .compile() method](#5.1)\n   - [Train with ,fit() method](#5.2)\n   - [Evaluate with .evaluate() method](#5.3)\n1. [Keras in action - Simple Linear Regression example](#6)\n1. [Conclusion](#7)\n","47cacb5b":"## 2. What is a backend <a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)\n\n- **Backend** is a term in Keras that performs all low-level computations such as tensor products, convolutions and many other things with the help of other libraries such as Tensorflow or Theano. \n\n- So, the **backend engine** will perform the computation and development of the models. Tensorflow is the default **backend engine** but we can change it in the configuration.","858c3d2e":"**I hope you find this kernel useful and your <font color=\"red\"><b>UPVOTES<\/b><\/font> would be very much appreciated**","de9096cf":"## 6. Keras in action - Simple Linear Regression example <a class=\"anchor\" id=\"6\"><\/a>\n\n[Back to Table of Contents](#0.1)","ba3da46a":"After training the data, the output should look like the above plot.","9c65decf":"### 5.1 Compile with .compile() method <a class=\"anchor\" id=\"5.1\"><\/a>\n\n\n- After we have define our model, we will train them. \n\n- It is required to compile the network first with the loss function and optimizer function. \n\n- This will allow the network to change weights and minimized the loss.\n\n- We will compile our model with **.compile()** method as follows:-\n\n\n`model.compile(loss='mean_squared_error', optimizer='adam')`\n\n","d1379376":"### 4.3 MaxPooling Layer <a class=\"anchor\" id=\"4.3\"><\/a>\n\n\n- To downsample the input representation, use MaxPool2d and specify the kernel size.\n\n\n`model.add(MaxPooling2D(pool_size=(2, 2)))`","18146d51":"## 1. Introduction to Keras <a class=\"anchor\" id=\"1\"><\/a>\n\n\n[Back to Table of Contents](#0.1)\n\n\n\n- Keras is an Open Source Neural Network library written in Python that runs on top of Theano or Tensorflow. \n\n- It is designed to be modular, fast and easy to use.\n\n- Keras High-Level API handles the way we make models, defining layers, or set up multiple input-output models. In this level, Keras also compiles our model with loss and optimizer functions, training process with fit function. \n\n- Keras doesn't handle Low-Level API such as making the computational graph, making tensors or other variables because it has been handled by the \"backend\" engine.\n\n- So, Keras doesn't handle low-level computation. Instead, it uses another library to do it, called the **Backend**. Thus, Keras is a high-level API wrapper for the low-level API, capable of running on top of TensorFlow, CNTK or Theano.\n\n- Please consult the Keras Official documentation for more information on Keras:-\n\n[Keras Official Documentation](https:\/\/keras.io\/)","2711a7e8":"## 4. Keras layers <a class=\"anchor\" id=\"4\"><\/a>\n\n\n[Back to Table of Contents](#0.1)\n\n\n- Keras consists of different types of layers which are fundamental to building blocks of Keras.\n\n- In this section, we will discuss few commonly used layers in Keras.\n","874fc114":"## 5. Compile, train and evaluate model <a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","0fa5665e":"[Go to Top](#0)"}}