{"cell_type":{"2aa3ea81":"code","1c17693c":"code","626e12de":"code","0dc288d8":"code","8310b547":"code","c453f069":"code","84d675fc":"code","d9148d37":"code","ee3cdfb8":"code","32ee715a":"code","25ab6637":"code","7e2fab80":"code","c5471d44":"code","27aea9ea":"code","5c595e9b":"code","5ed17c05":"code","7a269e9d":"code","d3e6aa86":"code","86024829":"code","5fd8606a":"code","ce223b41":"code","4b4fe24c":"code","f09af9ee":"code","7bbd356e":"code","b09ba67b":"code","b2bc0af1":"code","6c87b08d":"code","5d9a570a":"code","0afc4ac6":"code","d5ebbbe9":"code","b2e06315":"code","09c52ece":"code","357f9410":"code","e94aabeb":"code","55be7078":"code","d05adad0":"code","e798771b":"code","2cf373a1":"code","2e23e0a5":"code","28259d3d":"code","d854b5d7":"code","5aa588e7":"code","e3603255":"code","664b1911":"code","cda574f5":"code","4d98211a":"code","8617777a":"code","7db0c98f":"code","638ac4e9":"code","dd9c1f67":"code","5575db80":"code","8bfe5748":"code","712216ad":"code","53b26a2a":"code","4b48522f":"code","93280514":"code","14da3fd8":"code","d9c6d18f":"code","ceaddf3e":"code","9f3da5fd":"code","8a88a2ea":"code","da29f896":"code","8ddf9052":"code","1652e84e":"code","34f37240":"code","83ee03ea":"code","b2f87d0a":"code","dfbc2196":"code","8f305c9e":"code","41526f3f":"code","a0500201":"code","11c9716e":"code","fda4493d":"code","aade6394":"code","6270d92f":"code","53f15167":"code","e65348d9":"code","203d31af":"code","6e8b1913":"code","9e34b623":"code","dd3afcbc":"code","bbbe4049":"code","f99a9d19":"code","c56a8446":"code","8f678781":"markdown","82f9ca70":"markdown","de1e37cc":"markdown","f4b14259":"markdown","a72e8075":"markdown","b15dcb39":"markdown","7d2c36c7":"markdown","ea6d68a1":"markdown","b612b62e":"markdown","a5017781":"markdown","a55cd6ea":"markdown","9bf54511":"markdown","49ce5cc2":"markdown","2f944cfc":"markdown","0352be1b":"markdown","f68df1dd":"markdown","b796e1a3":"markdown","82221e53":"markdown","dfc239c9":"markdown","c34182ef":"markdown","146c7528":"markdown","ce169ef0":"markdown","89f20796":"markdown","1155f779":"markdown","7e4f817b":"markdown","afcf17d8":"markdown","f28d528c":"markdown","c3f56dea":"markdown","d17f50b1":"markdown","d66465bb":"markdown","a3576590":"markdown","0b62f5b9":"markdown","182efbb9":"markdown","a07aed9a":"markdown","e40a602d":"markdown","fb7b6241":"markdown","2f5e6f8a":"markdown","0644dc66":"markdown","e940e253":"markdown","930d7e7b":"markdown","18c5b04e":"markdown","1f333f05":"markdown","7cb8cd79":"markdown","5b607923":"markdown","dc1436c8":"markdown","66fb7c07":"markdown","1038c7aa":"markdown","b2650d3e":"markdown","bca09079":"markdown","da453570":"markdown","337e0512":"markdown","f6870376":"markdown","bffb2937":"markdown","b2175101":"markdown","2a7ac37b":"markdown"},"source":{"2aa3ea81":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1c17693c":"df = pd.read_csv('..\/input\/aircraft-performance-dataset-aircraft-bluebook\/Aiplane_BlueBook.csv')\n\ndf.head()","626e12de":"df.info()","0dc288d8":"df.rename(columns = {'HP or lbs thr ea engine': 'SHP\/THR',\n           'Max speed Knots': 'Vmax',\n           'Rcmnd cruise Knots': 'Vcruise',\n           'Stall Knots dirty': 'Vstall',\n           'Fuel gal\/lbs': 'FW',\n           'All eng service ceiling': 'Hmax',\n           'Eng out service ceiling': 'Hmax (One)',\n           'All eng rate of climb': 'ROC',\n           'Eng out rate of climb': 'ROC (One)',\n           'Takeoff over 50ft': 'Vlo', \n           'Takeoff ground run': 'Slo', \n           'Landing over 50ft': 'Vl',\n           'Landing ground roll': 'Sl',\n           'Gross weight lbs': 'AUW',\n           'Empty weight lbs': 'MEW',\n           'Length ft\/in': 'Length',\n           'Height ft\/in': 'Height',\n           'Wing span ft\/in': 'Wing Span',\n           'Range N.M.': 'Range'}, inplace=True)","8310b547":"plt.figure(figsize=(12, 6))\nsns.heatmap(df.isnull());","c453f069":"mask = df['Engine Type'].isnull()\n\ndf[mask].head()","84d675fc":"df[mask]['Company'].value_counts()","d9148d37":"df.drop(786, inplace = True)\n\nmask = df['Engine Type'].isnull()\n\ndf[mask]","ee3cdfb8":"plt.figure(figsize=(12, 6))\nsns.heatmap(df[mask].isnull());","32ee715a":"plus_mew = df[mask]['MEW'].str.replace('+','', regex=False).astype(int)\ndf.loc[mask, 'MEW'] = np.nan","25ab6637":"df_aux = df[mask].copy()\ndf_aux = df_aux[~df[mask]['Model'].str.find('Cessna').astype(bool)]\nmods = df_aux['Model'].str.replace('Cessna ', '', False)\n\nmods","7e2fab80":"list_cessna = df[df['Company'] == 'Cessna Aircraft Company']['Model'].to_list()\nlist_mods = mods.to_list()\n\ndic = {}\nfor m in list_mods:\n    for c in list_cessna:\n        if c in m or m in c:\n            dic[m] = c\ndic","c5471d44":"for c in list_cessna:\n    if '421' in c:\n        print(c)","27aea9ea":"dic.update({'421,-A':'421 - A & B'})\n\nfor c in list_cessna:\n    if '402' in c:\n        print(c)","5c595e9b":"dic.update({'402,-B; 401,-A': \"402,-A turbocharged\"})\n\nlst = ['310', '337', '340']\nfor c in list_cessna:\n    for l in lst:\n        if l in c:\n            print(c)","5ed17c05":"dic.update({'310 series':'310,-A',\n            '337 (turbo, pressurized)': \"T 337 C Skymaster turbocharged\",\n            '340, -A': '340 A, II pressurized\/turbocharged'})","7a269e9d":"for k,v in dic.items():\n    mod = 'Cessna ' + k\n    ind = df.loc[(df['Model'] == mod)].index\n    orig = df.loc[df['Model'] == v, :].to_dict('records')[0]\n    fillna = df.loc[ind, :].fillna(value=orig)\n    df.loc[ind, :] = fillna","d3e6aa86":"df['TP mods'] = False\ndf.loc[mask,'TP mods'] = True","86024829":"df_aux = df[mask].copy()\ndf_aux = df_aux[~df[mask]['Model'].str.find('Piper').astype(bool)]\nmods = df_aux['Model'].str.replace('Piper ', '', False)\n\nmods","5fd8606a":"list_piper = df[df['Company'] == 'Piper Aircraft']['Model'].to_list()\nlist_mods = mods.to_list()\n\ndic = {}\nfor m in list_mods:\n    for c in list_cessna:\n        if c in m or m in c:\n            dic[m] = c\n            \ndic.update({'PA-23-250 Aztec': 'PA-23 C Aztec',\n            'PA-34 Seneca I,II':'PA-34-200 C\/R Seneca (1972)',\n            'PA-30,-39':'PA-30 C Twin Comanche',\n            'PA-32':\"PA-32-260,C,D,E & '73 (c\/s prop)\",\n    \n})\n\nfor k,v in dic.items():\n    mod = 'Piper ' + k\n    ind = df.loc[(df['Model'] == mod)].index\n    orig = df.loc[df['Model'] == v, :].to_dict('records')[0]\n    fillna = df.loc[ind, :].fillna(value=orig)\n    df.loc[ind, :] = fillna","ce223b41":"orig = 'V 35 A & B-TC Turbo Bonanza'\nmod = 'Beech V35,A,B'\n\nind = df.loc[(df['Model'] == mod)].index\norig = df.loc[df['Model'] == v, :].to_dict('records')[0]\nfillna = df.loc[ind, :].fillna(value=orig)\ndf.loc[ind, :] = fillna\n\ndf.loc[mask,'MEW'] = df.loc[mask,'MEW'].astype(int)\n\ndf.loc[mask,'MEW'] += plus_mew","4b4fe24c":"plt.figure(figsize=(12, 6))\nsns.heatmap(df[mask].isnull());","f09af9ee":"mask = (df == 'Orig').sum(axis=1).astype(bool)\n\ndf[mask]\n\ndf.loc[mask,'TP mods'] = True\n\ndf[mask]","7bbd356e":"plus_mew = df.loc[mask,'MEW'].str.replace('+','',regex=False)\nplus_mew = plus_mew.str.replace('lb','',regex=False)\nplus_mew = plus_mew.str.replace(' ','',regex=False)\nplus_mew = plus_mew.str.replace('NC','0',regex=False)\nplus_mew = plus_mew.fillna(0)\nplus_mew = plus_mew.astype(int)\nplus_mew.iloc[-2:] = 0\nplus_mew[mask]\n\nsave_mew = df.loc[mask, 'MEW'].iloc[-2:]\ndf.loc[mask, 'MEW'] = np.nan","b09ba67b":"nans = ['Length', 'Height', 'Wing Span']\n\ndf.loc[mask, nans] = np.nan","b2bc0af1":"df.loc[mask & ((df['AUW'] == 'Orig') | (df['AUW'] == 'NC')), 'AUW'] = np.nan","6c87b08d":"mask1 = df['Vmax'].apply(lambda x: '+' in str(x))\n\nvmax_vcru_plus = df.loc[mask & mask1, ['Vmax', 'Vcruise']].copy()\ndf.loc[mask & mask1, ['Vmax', 'Vcruise']] = np.nan","5d9a570a":"plt.figure(figsize=(12, 6))\nsns.heatmap(df[mask].isnull());","0afc4ac6":"df.loc[mask, 'Model']","d5ebbbe9":"dic = {'Superstar II (600 series Aerostar)': 'PA-600,600A,-Aerostar',\n       'Superstar I (601P Aerostar)': \"PA-601P pressurized Aerostar ('77 service ceiling=26,350)\",\n       '350 Turbo A-36 Bonanza': 'A 36 Bonanza (300 hp)',\n       '350 Turbo V-35B Bonanza': \"V 35B Bonanza ('80 & up=fuel std 74 gal)\",\n       'RAM 421CW (W = winglets)': '421 pressurized\/turbocharged',\n       'RAM 414AW-IV (W = winglets)': \"414A II Chancellor (pressurized-turbo) ('78 span=44\/3)\",\n       'RAM 414AW-V (V = liquid-cooled)': \"414A II Chancellor (pressurized-turbo) ('78 span=44\/3)\",\n       'RAM 414AV-VII':\"414A II Chancellor (pressurized-turbo) ('78 span=44\/3)\",\n       'RAM 414A-VII (no winglets)': \"414A II Chancellor (pressurized-turbo) ('78 span=44\/3)\",\n       'RAM 414A-IV, III or Super Ram': \"414A II Chancellor (pressurized-turbo) ('78 span=44\/3)\",\n       'RAM 414-IV, III or Super Ram': '414 pressurized-turbocharged',\n       'RAM 414-VI': '414 pressurized-turbocharged',\n       'RAM 414-II (39\" MP)': '414 pressurized-turbocharged',\n       'RAM 340\/340A-VI': '340 A, II pressurized\/turbocharged',\n       'RAM 340\/340A-IV,III or Super Ram': '340 A, II pressurized\/turbocharged',\n       'RAM 340\/340A-II (39\" MP)': '340 A, II pressurized\/turbocharged',\n       'RAM CT310P,Q,R \/320-IV':'T 310 P turbocharged',\n       'RAM CT310P,Q,R \/320-I':'T 310 P turbocharged',\n       'RAM T310-IV (-P & -Q) \/ 320-IV':'T 310 P turbocharged',\n       'RAM T310-I (-P & -Q)':'T 310 P turbocharged',\n       'RAM T210 (G-J)':'T 210 G,H & J Turbo Centurion',\n       'RAM T206-I (A-F)': 'T206H Turbo Stationair',\n       \"RAM 172 (1963-'76)\": '172,-A',\n       'RAM PA 28-140\/151': 'PA-28 140 Cherokee Cruiser',\n       'Jet Prop 421 C':\"421C Golden Eagle III ('79 stall=85 mph)\",\n       'Jet Prop 421 (Cessna 421 conversion)': '421 pressurized\/turbocharged',\n       '414 Rocket (Cessna 414 conversion)': '414 pressurized-turbocharged',\n       '340 Rocket (Cessna 340 conversion)': '340 pressurized\/turbocharged',\n       'Super 340 (Cessna 340 conversion)': '340 pressurized\/turbocharged',\n       'TurboStream (Cessna 310 & 320 conv) 350hp': '310,-A',\n       'TurboStream (Cessna 310 & 320 conv) 310hp': '310,-A',\n       'Turbo Rocket (Cessna 310 conversion)': '310,-A',\n       'Rocket (Cessna 310 conversion)': '310,-A'}\n\nfor k,v in dic.items():\n    ind = df.loc[(df['Model'] == k)].index\n    orig = df.loc[df['Model'] == v, :].to_dict('records')[0]\n    fillna = df.loc[ind, :].fillna(value=orig)\n    df.loc[ind, :] = fillna","b2e06315":"vmax_vcru_plus['Vmax'] = vmax_vcru_plus['Vmax'].str.replace('+','', regex=False).astype(int)\nvmax_vcru_plus['Vcruise'] = vmax_vcru_plus['Vcruise'].str.replace('+','', regex=False).astype(int)","09c52ece":"ind = vmax_vcru_plus.index","357f9410":"df.loc[ind, ['Vmax', 'Vcruise']] = df.loc[ind, ['Vmax', 'Vcruise']].astype(int) \ndf.loc[ind, ['Vmax', 'Vcruise']] += vmax_vcru_plus","e94aabeb":"df.loc[ind, 'MEW'] = save_mew","55be7078":"plt.figure(figsize=(12, 6))\nsns.heatmap(df[mask].isnull());","d05adad0":"plt.figure(figsize=(12, 6))\nsns.heatmap(df.isnull());","e798771b":"df['Engine Type'].value_counts()","2cf373a1":"dic = {'piston': 'Piston',\n       'PT6A-21': 'Propjet',\n       'Pistion': 'Piston',\n       'TSIO 520': 'Piston',\n       'IO550': 'Piston',\n       'PT6A-35': 'Propjet'}\n\nfor k, v in dic.items():\n    df.loc[df['Engine Type'] == k, 'Engine Type'] = v\n\ndf['Engine Type'].value_counts()","2e23e0a5":"df.info()","28259d3d":"df['SHP\/THR'] = df['SHP\/THR'].astype(str)\n\nmask = df['SHP\/THR'].apply(lambda x: not x.isnumeric())\n\ndf[mask]","d854b5d7":"dic = {'940wet': 940,\n       '1000 dry': 1000,\n       '100 hp': 100,\n       '717.5': 717.5}\n\nfor k, v in dic.items():\n    df.loc[df['SHP\/THR'] == k, 'SHP\/THR'] = v\n    \ndf['SHP\/THR'] = df['SHP\/THR'].apply(lambda x: float(x))","5aa588e7":"df['Vmax'] = df['Vmax'].astype(str)\n\nmask = df['Vmax'].apply(lambda x: not x.isnumeric() and x != 'nan')\n\ndf[mask]['Vmax']","e3603255":"def mach_to_kts(x):\n\n    if 'mach' in x.lower():\n        y = x.split(' ')[0]\n        y = 667 * float(y)\n        return y\n    elif float(x) < 1:\n        y = 667 * float(x)\n        return y\n    else:\n        return x\n\ndf['Vmax'] = df['Vmax'].str.replace('+', '', regex=False)\n\ndf['Vmax'] = df['Vmax'].apply(mach_to_kts)\n\ndf['Vmax'] = df['Vmax'].apply(lambda x: float(x))","664b1911":"df['Vcruise'] = df['Vcruise'].astype(str)\n\nmask = df['Vcruise'].apply(lambda x: not x.isnumeric() and x != 'nan')\n\ndf[mask]['Vcruise']","cda574f5":"def mach_to_kts(x):\n\n    if 'mach' in x.lower():\n        y = x.split(' ')[0]\n        y = 667 * float(y)\n        return y\n    elif 'kts' in x.lower():\n        y = x.split('k')[0]\n        y = float(y)\n        return y\n    elif float(x) < 1:\n        y = 667 * float(x)\n        return y\n    else:\n        return x\n\ndf['Vcruise'] = df['Vcruise'].str.replace('+', '', regex=False)\n\ndf['Vcruise'] = df['Vcruise'].apply(mach_to_kts)\n\ndf['Vcruise'] = df['Vcruise'].apply(lambda x: float(x))","4d98211a":"df['Vstall'] = df['Vstall'].astype(str)\n\nmask = df['Vstall'].apply(lambda x: not x.isnumeric() and x != 'nan')\n\ndf[mask]['Vstall']","8617777a":"dic = {'84.5':84.5,\n       '44kcas':44,\n       '49kts':49}\n\nfor k, v in dic.items():\n    df.loc[df['Vstall'] == k, 'Vstall'] = v\n\ndf['Vstall'] = df['Vstall'].apply(lambda x: float(x))","7db0c98f":"df['FW'] = df['FW'].astype(str)\n\nmask = df['FW'].apply(lambda x: not x.isnumeric() and x != 'nan')\n\ndf[mask]['FW']","638ac4e9":"df['Hmax (One)'] = df['Hmax (One)'].astype(str)\n\nmask = df['Hmax (One)'].apply(lambda x: not x.isnumeric() and x != 'nan')\n\ndf[mask]['Hmax (One)']","dd9c1f67":"def conversor(x):\n\n    if 'fwd' in x.lower():\n        y = x.split(' ')[1]\n        y1, y2 = y.split(',')\n        y = 1000 * float(y1) + float(y2)\n        return y\n    elif 'f' in x.lower():\n        x = x[1:]\n        y1, y2 = x.split(',')\n        y = 1000 * float(y1) + float(y2)\n        return y\n    else:\n        return x\n\ndf['Hmax (One)'] = df['Hmax (One)'].apply(conversor)\n\ndf['Hmax (One)'] = df['Hmax (One)'].apply(lambda x: float(x))","5575db80":"df['ROC'] = df['ROC'].astype(str)\n\nmask = df['ROC'].apply(lambda x: not x.isnumeric() and x != 'nan')\n\ndf[mask]['ROC']","8bfe5748":"def conversor(x):\n\n    if '3bld' in x.lower():\n        y = x.split(' ')[0]\n        y1, y2 = y.split(',')\n        y = 1000 * float(y1) + float(y2)\n        return y\n    else:\n        return x\n\ndf['ROC'] = df['ROC'].apply(conversor)\n\ndf['ROC'] = df['ROC'].apply(lambda x: float(x))","712216ad":"df['ROC (One)'] = df['ROC (One)'].astype(str)\n\nmask = df['ROC (One)'].apply(lambda x: not x.isnumeric() and x != 'nan')\n\ndf[mask]['ROC (One)']","53b26a2a":"def conversor(x):\n    if 'f' in x.lower():\n        y = x[1:]\n        return float(y)\n    else:\n        return x\n\ndf['ROC (One)'] = df['ROC (One)'].apply(conversor)\n\ndf['ROC (One)'] = df['ROC (One)'].apply(lambda x: float(x))","4b48522f":"df['AUW'] = df['AUW'].astype(str)\n\nmask = df['AUW'].apply(lambda x: not x.isnumeric() and x != 'nan')\n\ndf[mask]['AUW']","93280514":"df['MEW'] = df['MEW'].astype(str)\n\nmask = df['MEW'].apply(lambda x: not x.isnumeric() and x != 'nan')\n\ndf[mask]['MEW']","14da3fd8":"df.loc[mask, 'MEW'] = df.loc[mask, 'MEW'].apply(lambda x: 1000 * float(x))\n\ndf.loc['MEW'] = df['MEW'].apply(lambda x: float(x))","d9c6d18f":"df['Range'] = df['Range'].astype(str)\n\nmask = df['Range'].apply(lambda x: not x.isnumeric() and x != 'nan')\n\ndf.loc[mask,'Range']","ceaddf3e":"dic = {'1,000+':1000,\n       '600nm':600}\n\nfor k, v in dic.items():\n    df.loc[df['Range'] == k, 'Range'] = v\n\ndf['Range'] = df['Range'].apply(lambda x: float(x))\n    \ndf[mask]['Range']","9f3da5fd":"df['Length'] = df['Length'].astype(str)\n\nmask1 = df['Length'].apply(lambda x: x.isnumeric() and x != 'nan')\n\ndf.loc[mask1] ","8a88a2ea":"df.loc[df['Model'] == \"G164B-525 (design-sprayer) prior'78=25\/11 length\", 'Length'] = '25\/11'\ndf.loc[df['Length'] == 'N\/C', 'Length'] = 'nan'\n\n\nmask0 = df['Length'].apply(lambda x: not x.isnumeric() and x != 'nan')\n\ndef conversor(x):\n    y1, y2 = x.split('\/')\n    \n    return float(y1) + float(y2)\/12\n\ndf.loc[mask0, 'Length'] = df.loc[mask0, 'Length'].apply(conversor)\n\ndf['Length'] = df['Length'].apply(lambda x: float(x))","da29f896":"df['Height'] = df['Height'].astype(str)\n\nmask1 = df['Height'].apply(lambda x: x.isnumeric() and x != 'nan')\n\ndf.loc[mask1] ","8ddf9052":"df.loc[df['Height'] == 'N\/C', 'Height'] = 'nan'\n\nmask0 = df['Height'].apply(lambda x: not x.isnumeric() and x != 'nan')\n\ndef conversor(x):\n    y1, y2 = x.split('\/')\n    \n    return float(y1) + float(y2)\/12\n\ndf.loc[mask0, 'Height'] = df.loc[mask0, 'Height'].apply(conversor)\n\ndf['Height'] = df['Height'].apply(lambda x: float(x))","1652e84e":"df['Wing Span'] = df['Wing Span'].astype(str)\n\nmask1 = df['Wing Span'].apply(lambda x: x.isnumeric() and x != 'nan')\n\ndf.loc[mask1,'Wing Span'] ","34f37240":"df.loc[df['Wing Span'] == 'N\/C', 'Wing Span'] = 'nan'\n\nmask0 = df['Wing Span'].apply(lambda x: not x.isnumeric() and x != 'nan')\n\ndef conversor(x):\n    if '.' not in x:\n        y1, y2 = x.split('\/')\n        return float(y1) + float(y2)\/12\n    else:\n        return x\n\ndf.loc[mask0, 'Wing Span'] = df.loc[mask0, 'Wing Span'].apply(conversor)\n\ndf['Wing Span'] = df['Wing Span'].apply(lambda x: float(x))","83ee03ea":"list_convert = df.drop(['Model', 'Company', 'Engine Type', 'TP mods'], axis=1).columns.to_list()\n\nfor lst in list_convert:\n    df[lst] = df[lst].astype(float)\n    \ndf['TP mods'] = df['TP mods'].astype(bool)\n\ndf = df.iloc[:-1,:]\n\ndf.info()","b2f87d0a":"df['THR'] = np.nan\ndf['SHP'] = np.nan\ndf.loc[df['Engine Type'] == 'Jet', 'THR'] = df.loc[df['Engine Type'] == 'Jet', 'SHP\/THR']\ndf.loc[df['Engine Type'].isin(['Propjet', 'Piston']), 'SHP'] = df.loc[df['Engine Type'].isin(['Propjet', 'Piston']), 'SHP\/THR']\n\ndf.drop('SHP\/THR', axis=1, inplace = True)","dfbc2196":"df[(df['AUW'] - df['MEW']) < 0]","8f305c9e":"df[(df['AUW'] - df['MEW']) < 0][['AUW', 'MEW']]","41526f3f":"df.loc[(df['AUW'] - df['MEW']) < 0, 'AUW'] = 3150 \ndf.loc[(df['AUW'] - df['MEW']) < 0, 'MEW'] = 2680","a0500201":"df['Error1'] = np.abs(df['AUW'] - (df['MEW'] + df['FW']))\ndf['Error2'] = np.abs(df['AUW'] - (df['MEW'] + 6.7*df['FW']))\n\ndf['FWt'] = np.abs(df['AUW'] - df['MEW'])\n\ngals = df['Error1'] > df['Error2']\n\ndf['Unit'] = gals\n\ndf.loc[gals == True, 'Unit'] = 'gals'\ndf.loc[gals == False, 'Unit'] = 'lb'","11c9716e":"plt.figure(figsize=(12, 6))\nsns.lmplot(data=df, x='FW', y='FWt', palette='rocket', hue='Unit');","fda4493d":"df.loc[df['Unit'] == 'gals', 'FW'] *= 6.7","aade6394":"df.loc[(df['FW'] < 100.), ['FW', 'MEW', 'AUW']]","6270d92f":"df.loc[df['Unit'] == 'gals', 'FW'] \/= 6.7\n\ndf.loc[(df['FW'] < 100.) & (df['MEW'].isnull()), 'Unit'] = 'gals'\n\ndf.loc[df['Unit'] == 'gals', 'FW'] *= 6.7","53f15167":"df.drop(['Error1', 'Error2', 'Unit', 'FWt'], axis=1, inplace=True)","e65348d9":"for c in df.columns:\n    if c not in ['Model', 'Company', 'Engine Type', 'TP mods']:\n        plt.figure(figsize=(12, 6))\n        sns.histplot(data=df, x=c)","203d31af":"print(df.loc[df['Slo'] > 4e4]['Slo'])\ndf.loc[df['Slo'] > 4e4]","6e8b1913":"df.loc[df['Range'] >1e4]","9e34b623":"df.loc[df['Slo'] > 4e4, 'Slo'] = 4222.\ndf.loc[df['Range'] >1e4, 'Range'] = 5200.","dd3afcbc":"mask1 = (df['Hmax'] != df['Hmax (One)']) & (~df['Hmax (One)'].isnull())\nmask2 = (df['ROC'] != df['ROC (One)']) & (~df['ROC (One)'].isnull())\n\ndf['Multi Engine'] = np.nan\ndf.loc[mask1 | mask2, 'Multi Engine'] = True","bbbe4049":"order = ['Model', 'Company', 'Engine Type','Multi Engine', 'TP mods',\n 'THR', 'SHP', 'Length', 'Height', 'Wing Span', 'FW', 'MEW', 'AUW',\n 'Vmax', 'Vcruise', 'Vstall', 'Hmax', 'Hmax (One)', 'ROC', 'ROC (One)',\n 'Vlo', 'Slo', 'Vl', 'Sl',  'Range']\n\n\ndf = df[order]","f99a9d19":"plt.figure(figsize=(12, 6))\nsns.heatmap(df.isnull());","c56a8446":"df.to_csv('Airplane_Cleaned.csv', index=False)","8f678781":"# 2. Third Party Modification Aircrafts","82f9ca70":"Changing column values to NaN.","de1e37cc":"## 3.12. Range","f4b14259":"Now, we will check if there wrong values in the dataset.","a72e8075":"The instances classified as gals will be multiplied by 6.7.","b15dcb39":"Important thing to note: there are only three categorical features (Model, Company, Engine type), but almost every feature is in the object format, which might be indicate that the feature might be on a non-conventional format for numerical data, such as strings, it must investigate further. For simplicity, let's change columns name for simpler ones. ","7d2c36c7":"Some airplanes from this dataset are multi engine, but there is no information about it. This is crucial, and we can't consider using engine specifications without . I believe there's only mono and bi engine planes in this dataset, but we have to investigate this more carefully. For now, let's just consider if they are multi or mono engine airplanes. The only way is to consider information regarding Hmax (One) and ROC (One), since if its values are different from the normal, its multi engine. The large amount of missing values from this two features might be explained by the fact that large part of this dataset is mono engine, but it might be lack of information on the feature also.","ea6d68a1":"Saving the columns to add weight and the ones to change, once MEW feature have different formats.","b612b62e":"## 3.5. Vstall","a5017781":"## 3.14. Height","a55cd6ea":"G164B-525 correct AUW and MEW are [3150 and 2680 lb respectively](https:\/\/en.wikipedia.org\/wiki\/Grumman_Ag_Cat).","9bf54511":"Note: Some modification names are general, and does not specify a airplane, Therefore, a airplane from the family was picked, but the correct procedure is to investigate from external sources how exactly is this modification, or take the mean value from a family instead of one instance.","49ce5cc2":"# 4. Feature Units","2f944cfc":"\n<h1><center>Data Wrangling and Cleanup<\/center><\/h1>","0352be1b":"Now, the numeric features can be used for data analysis.","f68df1dd":"G500 correct range is [5200 nm](https:\/\/en.wikipedia.org\/wiki\/Gulfstream_G400\/G500\/G600).","b796e1a3":"# 5. Checking Errors","82221e53":"## 3.7. Hmax (One)","dfc239c9":"First, let's impute data from Cessna airplanes.","c34182ef":"Now, for Piper Aircraft and Beech:","146c7528":"For this change, I manually selected the airplanes, the string identification was getting more complex and I believed this was the most robust approach to go. Please share your thoughts down in the comments on how should I have approached this problem.","ce169ef0":"## 3.15. Wing Span","89f20796":"## 3.3. Vmax","1155f779":"The missing information are from companies focused on modifying airplanes. Therefore, it was only informed the modifications for a given aiplane, all the missing data can be assumed as equal as the original. Rockwell Meyers 200 only have one instance and any information about their airplane, for this reason, we will drop it.","7e4f817b":"We will add another column, the Third Party modification indicator, as a Boolean.","afcf17d8":"We have to feature with different units, the `SHP\/THR` (hp\/lb) and `FW` (gals\/lb). For engine performance, Shaft Horsepower is only applied to Propeller-driven airplanes, [it does not make sense specify to jets](https:\/\/code7700.com\/aero_thrust_vs_power.htm). The opposite occurs to Turbo-driven aiplanes, where the thrust must be specified. For Propeller-driven airplanes, you must specifiy the propeller to use, and even then your thrust might not be constant.","f28d528c":"## 3.8. ROC","c3f56dea":"## 3.6. FW","d17f50b1":"There's more things to do to improve this dataset, like:\n\n* Impute missing data;\n* Define if the airplanes are multi engine or not;\n* Predict the number of engines;\n* Retrieve information from model's name;\n\nBut regardless, the dataset now can be used for data analysis and data science. Please upvote if like it and share your thoughts down in the comments. Thank you for reading it.","d66465bb":"MEW attribute have a different format and interpretation, it indicates how much empty weight was added from the original airplane.","a3576590":"## 3.11. MEW","0b62f5b9":"With the exception of Hmax (One) and ROC (One), that we will explain further why, all data was imputated. But there's more modifications. They can be identified with the \"Orig\" term, that refers to the original.","182efbb9":"As for Fuel Weight, some instances are specified in volume (gallons). To convert, we must multiply by [6.7 lb\/USgal](http:\/\/https:\/\/en.wikipedia.org\/wiki\/Aviation_fuel). The problem is identify which instances are described as gallons. We can, however, know which istances are more reasonable. We can approximate AUW values by summing MEW and FW, the approach with less absolute error is more likely to be correct.","a07aed9a":"As said before, some features are not corretly represented. Let's go throught then and understand why.","e40a602d":"Let's if there's any exception:","fb7b6241":"Praetor 500 correct take-off distance is [4222 ft](https:\/\/en.wikipedia.org\/wiki\/Embraer_Legacy_450\/500_and_Praetor_500\/600).","2f5e6f8a":"# 1. Import Data","0644dc66":"We can see from the heatmap that the observations with the least informations are the ones with missing engine type. Let's investigate further. ","e940e253":"Data Wrangling and Clean up are vital parts of machine learning. Depending the situation, it's impossible to analyse data without manipulation. For that reason, we have to prepare the data in a way that makes it accessible for effective use further. In this notebook, we will focus mostly on this two process, the imputation of missing data must be treated separately and after the dataset is usable, however, given the nature of the dataset, some data will be imputated in the wrangling process.","930d7e7b":"Some values are missing, therefore, the classification is not possible. We will change for this instances.","18c5b04e":"Some instances are represented in Mach number, therefore it must be multiplied by the speed of sound. The last three ones have a +, but they are not modifications.","1f333f05":"In this section, we will focus on how the features are formatted and how we have to approach to give and representative numerical format for numerical features. ","7cb8cd79":"![VALET_CLEANING.jpg](attachment:c058fad6-e775-4b3a-a764-6eefa475de11.jpg)","5b607923":"# 3. Feature Format","dc1436c8":"This method does not englobe all the modifications, the rest must be done manually.","66fb7c07":"## 6. Multi Engine","1038c7aa":"## 3.9. ROC (One)","b2650d3e":"The non numeric attributes have a commentary on it. Let's change it.","bca09079":"# 7. Conclusions","da453570":"## 3.2. SHP\/THR","337e0512":"## 3.10. AUW","f6870376":"## 3.13. Length","bffb2937":"## 3.1. Engine Type","b2175101":"## 3.4. Vcruise","2a7ac37b":"We can easily reduce the cardinality of this feature, just by addressing if it's a Piston, a Jet or a Propjet."}}