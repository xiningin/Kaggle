{"cell_type":{"be1974b2":"code","03e6557c":"code","0128c112":"code","d1761afe":"code","66ea61c3":"code","6013c1d4":"code","9bf56b7b":"code","d5a00047":"code","eb13026a":"code","9496eda4":"code","25b982c0":"code","a0c388f5":"code","f2301638":"code","fbead564":"code","8b413595":"code","f49a7172":"code","78684800":"code","395db40e":"code","595067e7":"code","38bb231e":"code","1d37f93e":"code","0694736b":"code","6395acf9":"code","3dae30fd":"code","da2fa878":"code","2f771033":"code","b97138f8":"code","1fcc6003":"code","5795008f":"code","06f7e0a5":"code","bfbdd220":"code","ca4d524b":"code","fb53f27b":"code","0ec7ef12":"code","1098805c":"code","44e71867":"code","fa2fe36c":"code","1ef9901b":"code","749bdcec":"code","7fa513ca":"code","e96e1174":"code","39ed0564":"code","1572739e":"markdown","e2cc5e67":"markdown","3852f790":"markdown","9f639476":"markdown","188e7f98":"markdown","1af4aa31":"markdown","eb3da47d":"markdown","a9ccb62a":"markdown","5e51765b":"markdown","69b4598d":"markdown","5b460b34":"markdown","990b8f63":"markdown","c7482761":"markdown","51fe0caf":"markdown","6d5af48e":"markdown","6a7edb86":"markdown","a60165fe":"markdown","e2dae6e6":"markdown","85a6028f":"markdown","c11499e2":"markdown","6e3c6e98":"markdown","706d4edd":"markdown","4787bbb0":"markdown","bcf4be1c":"markdown","63905067":"markdown","0c49349d":"markdown","a2a3176c":"markdown"},"source":{"be1974b2":"%matplotlib inline \n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\n\nimport re\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom gensim.models import Word2Vec\nfrom gensim.models import KeyedVectors\nimport pickle\n\nfrom tqdm import tqdm\nimport os\n\ncwd= os.getcwd() #to get the current working directory location\nprint (cwd)","03e6557c":"# using the SQLite Table to read data.\ncon = sqlite3.connect('..\/input\/database.sqlite') \n# filtering only positive and negative reviews i.e. not taking into consideration those reviews with Score=3\n# SELECT * FROM Reviews WHERE Score != 3 LIMIT 500000, will give top 500000 data points\n# you can change the number to any other number based on your computing power\n# filtered_data = pd.read_sql_query(\"\"\" SELECT * FROM Reviews WHERE Score != 3 LIMIT 500000\"\"\", con) \n\nfiltered_data = pd.read_sql_query(\"\"\" SELECT * FROM Reviews WHERE Score != 3 LIMIT 5000\"\"\", con) \n\n# Give reviews with Score>3 a positive rating, and reviews with a score<3 a negative rating.\ndef partition(x):\n    if x < 3:\n        return 'negative'\n    return 'positive'\n\n# changing reviews with score less than 3 to be negative and vice-versa\nactualScore = filtered_data['Score']\npositiveNegative = actualScore.map(partition) \nfiltered_data['Score'] = positiveNegative\nprint(\"Number of data points in our data\", filtered_data.shape)\nfiltered_data.head(3)","0128c112":"display = pd.read_sql_query(\"\"\" \nSELECT UserId, ProductId, ProfileName, Time, Score, Text, COUNT(*)\nFROM Reviews\nGROUP BY UserId\nHAVING COUNT(*)>1\n\"\"\", con)","d1761afe":"print(display.shape)\ndisplay.head(5)","66ea61c3":"# checking a random review.\ndisplay[display['UserId']=='AZY10LLTJ71NX']","6013c1d4":"display['COUNT(*)'].sum()","9bf56b7b":"display= pd.read_sql_query(\"\"\"\nSELECT *\nFROM Reviews\nWHERE Score != 3 AND UserId=\"AR5J8UI46CURR\"\nORDER BY ProductID\n\"\"\", con)\ndisplay.head()","d5a00047":"#Sorting data according to ProductId in ascending order\nsorted_data=filtered_data.sort_values('ProductId', axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')","eb13026a":"#Deduplication of entries\nfinal=sorted_data.drop_duplicates(subset={\"UserId\",\"ProfileName\",\"Time\",\"Text\"}, keep='first', inplace=False)\nfinal.shape","9496eda4":"#Checking to see how much % of data still remains\n(final['Id'].size*1.0)\/(filtered_data['Id'].size*1.0)*100","25b982c0":"display= pd.read_sql_query(\"\"\"\nSELECT *\nFROM Reviews\nWHERE Score != 3 AND Id=44737 OR Id=64422\nORDER BY ProductID\n\"\"\", con)\n\ndisplay.head()","a0c388f5":"final=final[final.HelpfulnessNumerator<=final.HelpfulnessDenominator]","f2301638":"#Before starting the next phase of preprocessing lets see the number of entries left\nprint(final.shape)\n\n#How many positive and negative reviews are present in our dataset?\nfinal['Score'].value_counts()","fbead564":"# printing some random reviews\nsent_0 = final['Text'].values[0]\nprint(sent_0)\nprint(\"=\"*50)\n\nsent_100 = final['Text'].values[100]\nprint(sent_100)\nprint(\"=\"*50)\n\nsent_300 = final['Text'].values[300]\nprint(sent_300)\nprint(\"=\"*50)\n\nsent_900 = final['Text'].values[900]\nprint(sent_900)\nprint(\"=\"*50)","8b413595":"# remove urls from text python: https:\/\/stackoverflow.com\/a\/40823105\/4084039\nsent_0 = re.sub(r\"http\\S+\", \"\", sent_0)\nsent_100 = re.sub(r\"http\\S+\", \"\", sent_100)\nsent_300 = re.sub(r\"http\\S+\", \"\", sent_300)\nsent_900 = re.sub(r\"http\\S+\", \"\", sent_900)\n\nprint(sent_0)","f49a7172":"# https:\/\/stackoverflow.com\/questions\/16206380\/python-beautifulsoup-how-to-remove-all-tags-from-an-element\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(sent_0, 'lxml')\ntext = soup.get_text()\nprint(text)\nprint(\"=\"*50)\n\nsoup = BeautifulSoup(sent_100, 'lxml')\ntext = soup.get_text()\nprint(text)\nprint(\"=\"*50)\n\nsoup = BeautifulSoup(sent_300, 'lxml')\ntext = soup.get_text()\nprint(text)\nprint(\"=\"*50)\n\nsoup = BeautifulSoup(sent_900, 'lxml')\ntext = soup.get_text()\nprint(text)","78684800":"# https:\/\/stackoverflow.com\/a\/47091490\/4084039\nimport re\n\ndef decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","395db40e":"sent_300 = decontracted(sent_300)\nprint(sent_300)\nprint(\"=\"*50)","595067e7":"#remove words with numbers python: https:\/\/stackoverflow.com\/a\/18082370\/4084039\nsent_0 = re.sub(\"\\S*\\d\\S*\", \"\", sent_0).strip()\nprint(sent_0)","38bb231e":"#remove spacial character: https:\/\/stackoverflow.com\/a\/5843547\/4084039\nsent_300 = re.sub('[^A-Za-z0-9]+', ' ', sent_300)\nprint(sent_300)","1d37f93e":"# https:\/\/gist.github.com\/sebleier\/554280\n# we are removing the words from the stop words list: 'no', 'nor', 'not'\n# <br \/><br \/> ==> after the above steps, we are getting \"br br\"\n# we are including them into stop words list\n# instead of <br \/> if we have <br\/> these tags would have revmoved in the 1st step\n\nstopwords= set(['br', 'the', 'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\"])","0694736b":"from bs4 import BeautifulSoup\nfrom tqdm import tqdm\npreprocessed_reviews = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(final['Text'].values):\n    sentance = re.sub(r\"http\\S+\", \"\", sentance)\n    sentance = BeautifulSoup(sentance, 'lxml').get_text()\n    sentance = decontracted(sentance)\n    sentance = re.sub(\"\\S*\\d\\S*\", \"\", sentance).strip()\n    sentance = re.sub('[^A-Za-z]+', ' ', sentance)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sentance = ' '.join(e.lower() for e in sentance.split() if e.lower() not in stopwords)\n    preprocessed_reviews.append(sentance.strip())","6395acf9":"preprocessed_reviews[500]","3dae30fd":"# https:\/\/stackoverflow.com\/q\/23748995\nscore=final['Score'] #storing all scores in a new series.\nprint(type(score))\nprint(score.shape)","da2fa878":"#BoW\ncount_vect = CountVectorizer() #in scikit-learn\ncount_vect.fit(preprocessed_reviews)\nprint(\"some feature names \", count_vect.get_feature_names()[:10])\nprint('='*50)\n\nfinal_counts = count_vect.transform(preprocessed_reviews)\nprint(\"the type of count vectorizer \",type(final_counts))\nprint(\"the shape of out text BOW vectorizer \",final_counts.get_shape())\nprint(\"the number of unique words \", final_counts.get_shape()[1])","2f771033":"#bi-gram, tri-gram and n-gram\n\n#removing stop words like \"not\" should be avoided before building n-grams\n# count_vect = CountVectorizer(ngram_range=(1,2))\n# please do read the CountVectorizer documentation http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_extraction.text.CountVectorizer.html\n# you can choose these numebrs min_df=10, max_features=5000, of your choice\ncount_vect = CountVectorizer(ngram_range=(1,2))\nfinal_bigram_counts = count_vect.fit_transform(preprocessed_reviews)\nprint(\"the type of count vectorizer \",type(final_bigram_counts))\nprint(\"the shape of out text BOW vectorizer \",final_bigram_counts.get_shape())\nprint(\"the number of unique words including both unigrams and bigrams \", final_bigram_counts.get_shape()[1])","b97138f8":"tf_idf_vect = TfidfVectorizer(ngram_range=(1,2), min_df=10)\ntf_idf_vect.fit(preprocessed_reviews)\nprint(\"some sample features(unique words in the corpus)\",tf_idf_vect.get_feature_names()[0:10])\nprint('='*50)\n\nfinal_tf_idf = tf_idf_vect.transform(preprocessed_reviews)\nprint(\"the type of count vectorizer \",type(final_tf_idf))\nprint(\"the shape of out text TFIDF vectorizer \",final_tf_idf.get_shape())\nprint(\"the number of unique words including both unigrams and bigrams \", final_tf_idf.get_shape()[1])","1fcc6003":"# Train your own Word2Vec model using your own text corpus\ni=0\nlist_of_sentance=[]\nfor sentance in preprocessed_reviews:\n    list_of_sentance.append(sentance.split())","5795008f":"w2v_model=Word2Vec(list_of_sentance,min_count=5,size=50, workers=4)\nprint(w2v_model.wv.most_similar('great'))\nprint('='*50)\nprint(w2v_model.wv.most_similar('worst'))","06f7e0a5":"w2v_words = list(w2v_model.wv.vocab)\nprint(\"number of words that occured minimum 5 times \",len(w2v_words))\nprint(\"sample words \", w2v_words[0:30])","bfbdd220":"# average Word2Vec\n# compute average word2vec for each review.\nsent_vectors = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sent in tqdm(list_of_sentance): # for each review\/sentence\n    sent_vec = np.zeros(50) # as word vectors are of zero length 50, you might need to change this to 300 if you use google's w2v\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words:\n            vec = w2v_model.wv[word]\n            sent_vec += vec\n            cnt_words += 1\n    if cnt_words != 0:\n        sent_vec \/= cnt_words\n    sent_vectors.append(sent_vec)\nprint(len(sent_vectors))\nprint(len(sent_vectors[0]))","ca4d524b":"# S = [\"abc def pqr\", \"def def def abc\", \"pqr pqr def\"]\nmodel = TfidfVectorizer()\nmodel.fit(preprocessed_reviews)\n# we are converting a dictionary with word as a key, and the idf as a value\ndictionary = dict(zip(model.get_feature_names(), list(model.idf_)))","fb53f27b":"# TF-IDF weighted Word2Vec\ntfidf_feat = model.get_feature_names() # tfidf words\/col-names\n# final_tf_idf is the sparse matrix with row= sentence, col=word and cell_val = tfidf\n\ntfidf_sent_vectors = []; # the tfidf-w2v for each sentence\/review is stored in this list\nrow=0;\nfor sent in tqdm(list_of_sentance): # for each review\/sentence \n    sent_vec = np.zeros(50) # as word vectors are of zero length\n    weight_sum =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words and word in tfidf_feat:\n            vec = w2v_model.wv[word]\n#             tf_idf = tf_idf_matrix[row, tfidf_feat.index(word)]\n            # to reduce the computation we are \n            # dictionary[word] = idf value of word in whole courpus\n            # sent.count(word) = tf valeus of word in this review\n            tf_idf = dictionary[word]*(sent.count(word)\/len(sent))\n            sent_vec += (vec * tf_idf)\n            weight_sum += tf_idf\n    if weight_sum != 0:\n        sent_vec \/= weight_sum\n    tfidf_sent_vectors.append(sent_vec)\n    row += 1","0ec7ef12":"# As BoW and TF-IDF gives sparse matrix, and TSNE only accepts Dense matrix.so we need to convert sparse matrix to dense\nfrom sklearn.preprocessing import StandardScaler\nprint(final_bigram_counts.shape)\nstd_data = StandardScaler(with_mean = False).fit_transform(final_bigram_counts)\nprint(std_data.shape)\ntype(std_data)\nstd_data=std_data.todense()\nprint(type(std_data))","1098805c":"from sklearn.manifold import TSNE\nfrom sklearn import datasets\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nmodel = TSNE(n_components=2, perplexity=45, learning_rate=100, n_iter = 500, random_state=0)\n\nfor_tsne = model.fit_transform(std_data)\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.todense()) , .toarray() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.vstack((for_tsne.T, score)).T\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\nsns.FacetGrid(for_tsne_df, hue=\"Score\", size=10).map(plt.scatter, 'Dimension_x', 'Dimension_y').add_legend()\nplt.title(\"TSNE for Bag of Words\")","44e71867":"from sklearn.preprocessing import StandardScaler\n\nstd_data1 = StandardScaler(with_mean = False).fit_transform(final_tf_idf)\nprint(std_data1.shape)\ntype(std_data1)\nstd_data1=std_data1.todense()\ntype(std_data1)","fa2fe36c":"\nmodel = TSNE(n_components=2, perplexity=40, learning_rate=100, n_iter=500)\n\nfor_tsne = model.fit_transform(std_data1)\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.todense()) , .toarray() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.vstack((for_tsne.T, score)).T\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\nsns.FacetGrid(for_tsne_df, hue=\"Score\", size=6).map(plt.scatter, 'Dimension_x', 'Dimension_y').add_legend()\nplt.title(\"TF-IDF\")","1ef9901b":"from sklearn.preprocessing import StandardScaler\n\nstd_data2 = StandardScaler(with_mean = False).fit_transform(sent_vectors)\nprint(std_data2.shape)\ntype(std_data2)\ntype(std_data2)","749bdcec":"\nmodel = TSNE(n_components=2, perplexity=30, learning_rate=600, n_iter=500)\n\nfor_tsne = model.fit_transform(std_data2)\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.todense()) , .todense() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.vstack((for_tsne.T, score)).T\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\nsns.FacetGrid(for_tsne_df, hue=\"Score\", size=6).map(plt.scatter, 'Dimension_x', 'Dimension_y').add_legend()\nplt.title(\"AVG W2V\")","7fa513ca":"from sklearn.preprocessing import StandardScaler\n\nstd_data3 = StandardScaler(with_mean = False).fit_transform(tfidf_sent_vectors)\nprint(std_data3.shape)\ntype(std_data3)\ntype(std_data3)\n\n","e96e1174":"model = TSNE(n_components=2, perplexity=40, learning_rate=600, n_iter=500)\n\nfor_tsne = model.fit_transform(std_data3)\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.todense()) , .todense() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.vstack((for_tsne.T, score)).T\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\nsns.FacetGrid(for_tsne_df, hue=\"Score\", size=6).map(plt.scatter, 'Dimension_x', 'Dimension_y').add_legend()\nplt.title(\"Weighted W2V\")","39ed0564":"# store final table into an SQlLite table for future.\nconn = sqlite3.connect('final.sqlite')\nc=conn.cursor()\nconn.text_factory = str\nfinal.to_sql('Reviews', conn, schema=None, if_exists='replace', index=True, index_label=None, chunksize=None, dtype=None)","1572739e":"# [5] Applying TSNE","e2cc5e67":"<b>[1]<\/b> None of the text handling method proved efficient to generate a well seperated TSNE.<br>\n<b>[2]<\/b> Maybe some other method is to be used to seperate negative and positive reviews. I will try KNN on the same dataset in the next kernel.\n","3852f790":"<b>Observation:-<\/b> It was also seen that in two rows given below the value of HelpfulnessNumerator is greater than HelpfulnessDenominator which is not practically possible hence these two rows too are removed from calcualtions","9f639476":"## [5.1] Applying TNSE on Text TFIDF vectors","188e7f98":"As can be seen above the same user has multiple reviews of the with the same values for HelpfulnessNumerator, HelpfulnessDenominator, Score, Time, Summary and Text  and on doing analysis it was found that <br>\n<br> \nProductId=B000HDOPZG was Loacker Quadratini Vanilla Wafer Cookies, 8.82-Ounce Packages (Pack of 8)<br>\n<br> \nProductId=B000HDL1RQ was Loacker Quadratini Lemon Wafer Cookies, 8.82-Ounce Packages (Pack of 8) and so on<br>\n\nIt was inferred after analysis that reviews with same parameters other than ProductId belonged to the same product just having different flavour or quantity. Hence in order to reduce redundancy it was decided to eliminate the rows having same parameters.<br>\n\nThe method used for the same was that we first sort the data according to ProductId and then just keep the first similar product review and delelte the others. for eg. in the above just the review for ProductId=B000HDL1RQ remains. This method ensures that there is only one representative for each product and deduplication without sorting would lead to possibility of different representatives still existing for the same product.","1af4aa31":"**Amazon Fine Food Reviews Analysis**\n\nThe Amazon Fine Food Reviews dataset consists of reviews of fine foods from Amazon.","eb3da47d":"<b> observation:<\/b> TSNE on BoW vectors does not seperate positive and negative reviews","a9ccb62a":"# [3].  Text Preprocessing.\n\nNow that we have finished deduplication our data requires some preprocessing before we go on further with analysis and making the prediction model.\n\nHence in the Preprocessing phase we do the following in the order below:-\n\n1. Begin by removing the html tags\n2. Remove any punctuations or limited set of special characters like , or . or # etc.\n3. Check if the word is made up of english letters and is not alpha-numeric\n4. Check to see if the length of the word is greater than 2 (as it was researched that there is no adjective in 2-letters)\n5. Convert the word to lowercase\n6. Remove Stopwords\n7. Finally Snowball Stemming the word (it was obsereved to be better than Porter Stemming)<br>\n\nAfter which we collect the words used to describe positive and negative reviews","5e51765b":"## [4.4] Word2Vec","69b4598d":"## [4.1] BAG OF WORDS","5b460b34":"## [4.4.1] Converting text into vectors using wAvg W2V, TFIDF-W2V","990b8f63":"# [4] Featurization","c7482761":"<b> observation:<\/b> TSNE on Weighted W2V vectors does not seperate positive and negative reviews","51fe0caf":"# [1]. Reading Data","6d5af48e":"# [6] Conclusions","6a7edb86":"#  Exploratory Data Analysis\n\n## [2] Data Cleaning: Deduplication\n\nIt is observed (as shown in the table below) that the reviews data had many duplicate entries. Hence it was necessary to remove duplicates in order to get unbiased results for the analysis of the data.  Following is an example:","a60165fe":"## [5.3] Applying TNSE on Text Avg W2V vectors","e2dae6e6":"#### [4.4.1.1] Avg W2v","85a6028f":"## [4.3] TF-IDF","c11499e2":"<b> observation:<\/b> TSNE on AVG W2V vectors does not seperate positive and negative reviews","6e3c6e98":"#### [4.4.1.2] TFIDF weighted W2v","706d4edd":"## [5.4] Applying TNSE on Text TFIDF weighted W2V vectors","4787bbb0":"## [4.2] Bi-Grams and n-Grams.","bcf4be1c":"## [5.1] Applying TNSE on Text BOW vectors","63905067":"<b> observation:<\/b> TSNE on TF-IDF vectors does not seperate positive and negative reviews","0c49349d":"<ol> \n    <li> you need to plot 4 tsne plots with each of these feature set\n        <ol>\n            <li>Review text, preprocessed one converted into vectors using (BOW)<\/li>\n            <li>Review text, preprocessed one converted into vectors using (TFIDF)<\/li>\n            <li>Review text, preprocessed one converted into vectors using (AVG W2v)<\/li>\n            <li>Review text, preprocessed one converted into vectors using (TFIDF W2v)<\/li>\n        <\/ol>\n    <\/li>\n    <li> <font color='blue'>Note 1: The TSNE accepts only dense matrices<\/font><\/li>\n    <li> <font color='blue'>Note 2: Consider only 5k to 6k data points <\/font><\/li>\n<\/ol>","a2a3176c":"## Loading the data\n\nThe dataset is available in two forms\n1. .csv file\n2. SQLite Database\n\nIn order to load the data, We have used the SQLITE dataset as it easier to query the data and visualise the data efficiently.\n<br> \n\nHere as we only want to get the global sentiment of the recommendations (positive or negative), we will purposefully ignore all Scores equal to 3. If the score id above 3, then the recommendation wil be set to \"positive\". Otherwise, it will be set to \"negative\"."}}