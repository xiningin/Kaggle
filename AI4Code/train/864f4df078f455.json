{"cell_type":{"d0bf1645":"code","c605b822":"code","97888173":"code","bd0b39a1":"code","112281eb":"code","953e9a87":"code","097ca1f3":"code","3b261bd2":"code","f3591b57":"code","d10780bd":"code","a8e02108":"code","b98462bf":"code","4fd6be3f":"code","67c33af7":"code","5c4bd72c":"code","67d2716e":"code","33e0ea50":"code","28b24085":"code","c0d7684e":"code","1564822b":"code","91adbb02":"code","5e4c221e":"code","04281496":"code","dc786487":"code","3c9b65cc":"code","6816557f":"code","91ef0669":"code","6fb5d591":"code","e8c31bc6":"code","173be78a":"code","6fedf22a":"code","e6ea4148":"code","b18832c0":"code","61095621":"code","036289f8":"code","5133a3f9":"code","22e4f212":"code","26d0dbfb":"code","8d634b07":"code","2a0f92fa":"code","6043c620":"code","5c4dc2db":"code","8bcdef2f":"code","9ed30095":"code","6043a9e4":"code","8c7dd8e6":"code","401a3800":"code","b1a359dc":"code","923db7f0":"code","70bc1657":"code","6ae98b8a":"code","6a5a5409":"code","856a5960":"code","b75345ff":"code","910cfb9e":"code","93b8be21":"code","2edc74a8":"code","7c7d3454":"code","37038d5e":"code","d85ee748":"code","de2aa1d4":"code","9decc894":"code","c81550ae":"markdown","d7efff21":"markdown","b601b991":"markdown","c7e89f12":"markdown","880b4fdd":"markdown","5995839a":"markdown","aa3acc69":"markdown","02d14b4f":"markdown","07f7676f":"markdown","cd3f9b16":"markdown","1e8dd2b4":"markdown","0d3fbf0d":"markdown","3e65402a":"markdown","ae2ceb3e":"markdown"},"source":{"d0bf1645":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import tree, svm\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB, MultinomialNB\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc, roc_auc_score, f1_score\nfrom sklearn.inspection import permutation_importance\n\nimport xgboost as xgb\nfrom xgboost import XGBClassifier, plot_importance\nfrom hyperopt import fmin, hp, tpe","c605b822":"labs = pd.read_csv('..\/input\/national-health-and-nutrition-examination-survey\/labs.csv')\nexam = pd.read_csv('..\/input\/national-health-and-nutrition-examination-survey\/examination.csv')\ndemo = pd.read_csv('..\/input\/national-health-and-nutrition-examination-survey\/demographic.csv')\ndiet = pd.read_csv('..\/input\/national-health-and-nutrition-examination-survey\/diet.csv')\nques = pd.read_csv('..\/input\/national-health-and-nutrition-examination-survey\/questionnaire.csv')\n\nexam.drop(['SEQN'], axis = 1, inplace=True)\ndemo.drop(['SEQN'], axis = 1, inplace=True)\ndiet.drop(['SEQN'], axis = 1, inplace=True)\nques.drop(['SEQN'], axis = 1, inplace=True)\n\ndf = pd.concat([labs, exam], axis=1, join='inner')\ndf = pd.concat([df, demo], axis=1, join='inner')\ndf = pd.concat([df, diet], axis=1, join='inner')\ndf = pd.concat([df, ques], axis=1, join='inner')","97888173":"# SI columns are duplicate columns that give unit conversions\ncols = [c for c in df.columns if c[-2:] != 'SI']\ndf = df[cols]","bd0b39a1":"# Removing highly specific columns, HPV type, specific tooth missing, sample weights, metadata\ndrop_cols = ['ORXGH', 'ORXGL', 'ORXH06', 'ORXH11', 'ORXH16', 'ORXH18', 'ORXH26', 'ORXH31', 'ORXH33', 'ORXH35', 'ORXH39', 'ORXH40', 'ORXH42', 'ORXH45', 'ORXH51', 'ORXH52', 'ORXH53', \n             'ORXH54', 'ORXH55', 'ORXH56', 'ORXH58', 'ORXH59', 'ORXH61', 'ORXH62', 'ORXH64', 'ORXH66', 'ORXH67', 'ORXH68', 'ORXH69', 'ORXH70', 'ORXH71', 'ORXH72', 'ORXH73', \n             'ORXH81', 'ORXH82', 'ORXH83', 'ORXH84', 'ORXHPC', 'ORXHPI','OHX01TC', 'OHX02TC', 'OHX03TC', 'OHX04TC', 'OHX05TC', 'OHX06TC', 'OHX07TC', 'OHX08TC', 'OHX09TC', \n             'OHX10TC', 'OHX11TC', 'OHX12TC', 'OHX13TC', 'OHX14TC', 'OHX15TC', 'OHX16TC', 'OHX17TC', 'OHX18TC', 'OHX19TC', 'OHX20TC', 'OHX21TC', 'OHX22TC', 'OHX23TC', 'OHX24TC', \n             'OHX25TC', 'OHX26TC', 'OHX27TC', 'OHX28TC', 'OHX29TC', 'OHX30TC', 'OHX31TC', 'OHX32TC', 'OHX02CTC', 'OHX03CTC', 'OHX04CTC', 'OHX05CTC', 'OHX06CTC', 'OHX07CTC', \n             'OHX08CTC', 'OHX09CTC', 'OHX10CTC', 'OHX11CTC', 'OHX12CTC', 'OHX13CTC', 'OHX14CTC', 'OHX15CTC', 'OHX18CTC', 'OHX19CTC', 'OHX20CTC', 'OHX21CTC', 'OHX22CTC', \n             'OHX23CTC', 'OHX24CTC', 'OHX25CTC', 'OHX26CTC', 'OHX27CTC', 'OHX28CTC', 'OHX29CTC', 'OHX30CTC', 'OHX31CTC','DMDHRAGE','WTDR2D','WTINT2YR','WTMEC2YR',\n             'PHAFSTMN.x','SEQN','RIDSTATR'\n            ]\ndf.drop(drop_cols, axis=1,inplace=True)","112281eb":"col_decoder = {\n'ACD011A' : 'speak_english',\n'AIALANGA' : 'speak_english2',\n'ALQ101' : 'drink_alcohol',\n'ALQ130' : 'alcohol_per_day',\n'AUQ136' : 'ear_infections',\n'BMDAVSAD' : 'saggital_abdominal_avg',\n'BMXARMC' : 'arm_circum',\n'BMXBMI' : 'BMI',\n'BMXLEG' : 'leg_length',\n'BMXSAD1' : 'saggital_abdominal_1',\n'BMXSAD2' : 'saggital_abdominal_2',\n'BMXWAIST' : 'waist_circum',\n'BMXWT' : 'weight_kg',\n'BPQ020' : 'high_bp',\n'BPQ056' : 'measure_bp_home',\n'BPQ059' : 'measure_bp_doctor',\n'BPQ060' : 'cholesterol_checked',\n'BPQ070' : 'cholesterol_checked_1y',\n'BPQ080' : 'high_cholesterol',\n'BPQ090D' : 'cholesterol_prescription',\n'BPXDI1' : 'diastolic_bp',\n'BPXML1' : 'cuff_max_inflation',\n'BPXSY1' : 'blood_pressure_1',\n'BPXSY2' : 'blood_pressure_2',\n'BPXSY3' : 'blood_pressure_3',\n'CBD070' : 'grocery_budget',\n'CBD090' : 'nonfood_budget',\n'CBD110' : 'food_budget',\n'CBD120' : 'restaurant_budget',\n'CBD130' : 'food_delivery_budget',\n'CBQ505' : 'fast_food',\n'CBQ535' : 'saw_nutrition_fast_food',\n'CBQ545' : 'use_nutrition_fast_food',\n'CBQ550' : 'eat_restaurants',\n'CBQ552' : 'eat_chain_restaurants',\n'CBQ580' : 'saw_nutrition_restaurant',\n'CBQ590' : 'use_nutrition_restaurant',\n'CBQ596' : 'saw_my_plate',\n'CDQ001' : 'chest_pain_ever',\n'CDQ010' : 'short_breath_stairs',\n'CSQ030' : 'sensative_smell',\n'CSQ100' : 'loss_of_taste',\n'CSQ110' : 'taste_in_mouth',\n'CSQ202' : 'dry_mouth',\n'CSQ204' : 'nasal_congestion',\n'CSQ210' : 'wisdom_teeth_removed',\n'CSQ220' : 'tonsils_removed',\n'CSQ240' : 'head_injury',\n'CSQ250' : 'broken_nose',\n'CSQ260' : 'sinus_infections',\n'DBD100' : 'salt_frequency',\n'DBD895' : 'meals_not_homemade',\n'DBD900' : 'meals_fast_food',\n'DBD905' : 'meals_prepackaged',\n'DBD910' : 'frozen_meals_per_month',\n'DBQ095Z' : 'salt_type',\n'DBQ197' : 'milk_product_per_month',\n'DBQ229' : 'milk_drinker',\n'DBQ700' : 'healthy_diet',\n'DEQ034C' : 'long_sleeve_shirt',\n'DEQ034D' : 'use_sunscreen',\n'DEQ038G' : 'sunburn_1y',\n'DIQ010' : 'diabetes',\n'DIQ050' : 'taking_insulin',\n'DIQ160' : 'prediabetes',\n'DIQ170' : 'diabetes_risk',\n'DIQ172' : 'diabetes_concern',\n'DIQ180' : 'blood_test_3y',\n'DLQ010' : 'deaf',\n'DLQ020' : 'blind',\n'DLQ040' : 'mental_issues',\n'DLQ050' : 'difficulty_walking',\n'DLQ060' : 'difficulty_dressing',\n'DLQ080' : 'difficulty_errands',\n'DMDBORN4' : 'born_in_us2',\n'DMDHHSIZ' : 'people_in_house',\n'DMDHHSZB' : 'children_in_house',\n'DMDHHSZE' : 'people_over_60_in_house',\n'DMDHRBR4' : 'born_in_us',\n'DMDHRGND' : 'gender2',\n'DMDMARTL' : 'Marital_Status',\n'DMDYRSUS' : 'years_in_US',\n'DPQ010' : 'no_interest_2w',\n'DPQ020' : 'depression',\n'DPQ030' : 'trouble_sleeping_2w',\n'DPQ040' : 'fatigue_2w',\n'DPQ050' : 'eating_problems_2w',\n'DPQ060' : 'feel_bad_2w',\n'DPQ070' : 'trouble_concentrating_2w',\n'DPQ080' : 'speaking_problems_2w',\n'DPQ090' : 'suicidal_2w',\n'DPQ100' : 'depression_difficulty',\n'DR1.320Z' : 'water',\n'DR1_320Z' : 'plain_water_yesterday',\n'DR1_330Z' : 'tap_water_yesterday',\n'DR1BWATZ' : 'bottled_water_yesterday',\n'DR1HELPD' : 'interview_help',\n'DR1TACAR' : 'dietary_alpha_carotene',\n'DR1TALCO' : 'alcohol',\n'DR1TATOC' : 'dietary_vitamin_e',\n'DR1TBCAR' : 'dietary_beta_carotene',\n'DR1TCAFF' : 'caffeine',\n'DR1TCALC' : 'dietary_calcium',\n'DR1TCARB' : 'carb',\n'DR1TCHL' : 'dietary_choline',\n'DR1TCHOL' : 'cholesterol',\n'DR1TCOPP' : 'dietary_copper',\n'DR1TCRYP' : 'dietary_beta_cryptoxanthin',\n'DR1TFA' : 'dietary_folic_acid',\n'DR1TFF' : 'folate_food',\n'DR1TFIBE' : 'fiber',\n'DR1TFOLA' : 'dietary_folate',\n'DR1TIRON' : 'dietary_iron',\n'DR1TKCAL' : 'calories',\n'DR1TLYCO' : 'dietary_lycopene',\n'DR1TLZ' : 'dietary_lutein',\n'DR1TM181' : 'octadecenoic_percent',\n'DR1TMAGN' : 'magnesium',\n'DR1TMFAT' : 'monounsaturated_fats',\n'DR1TMOIS' : 'moisture',\n'DR1TNIAC' : 'dietary_niacin',\n'DR1TP183' : 'octadecatrienoic_percent',\n'DR1TPHOS' : 'dietary_phosphorus',\n'DR1TPOTA' : 'dietary_potassium',\n'DR1TPROT' : 'protein',\n'DR1TRET' : 'dietary_retinol',\n'DR1TS140' : 'tetradeconoic_percent',\n'DR1TSELE' : 'dietary_selenium',\n'DR1TSODI' : 'sodium',\n'DR1TSUGR' : 'sugar',\n'DR1TTFAT' : 'fat',\n'DR1TTHEO' : 'dietary_theobromine',\n'DR1TVARA' : 'dietary_vitamin_a',\n'DR1TVB1' : 'dietary_b1',\n'DR1TVB12' : 'dietary_b12',\n'DR1TVB2' : 'dietary_b2',\n'DR1TVB6' : 'dietary_b6',\n'DR1TVC' : 'dietary_vit_c',\n'DR1TVD' : 'dietary_vit_d',\n'DR1TVK' : 'dietary_vit_k',\n'DR1TZINC' : 'dietary_zinc',\n'DRABF' : 'breast_fed',\n'DRD340' : 'shellfish',\n'DRD350A' : 'clams',\n'DRD350B' : 'crabs',\n'DRD350C' : 'crayfish',\n'DRD350D' : 'lobsters',\n'DRD350E' : 'mussels',\n'DRD350F' : 'oysters',\n'DRD350G' : 'scallops',\n'DRD350H' : 'shrimp',\n'DRD370A' : 'breaded_fish',\n'DRD370B' : 'tuna',\n'DRD370C' : 'bass',\n'DRD370D' : 'catfish',\n'DRD370E' : 'cod',\n'DRD370F' : 'flatfish',\n'DRD370G' : 'haddock',\n'DRD370H' : 'mackerel',\n'DRD370I' : 'perch',\n'DRD370J' : 'pike',\n'DRD370K' : 'pollock',\n'DRD370L' : 'porgy',\n'DRD370M' : 'salmon',\n'DRD370N' : 'sardines',\n'DRD370O' : 'sea_bass',\n'DRD370P' : 'shark',\n'DRD370Q' : 'swordfish',\n'DRD370R' : 'trout',\n'DRD370S' : 'walleye',\n'DRD370T' : 'other_fish',\n'DRQSDIET' : 'special_diet',\n'DRQSDT1' : 'low_cal_diet',\n'DRQSDT10' : 'high_protein_diet',\n'DRQSDT11' : 'low_gluten_diet',\n'DRQSDT12' : 'kidney_diet',\n'DRQSDT2' : 'low_fat_diet',\n'DRQSDT3' : 'low_salt_diet',\n'DRQSDT4' : 'low_sugar_diet',\n'DRQSDT5' : 'low_fiber_diet',\n'DRQSDT6' : 'high_fiber_diet',\n'DRQSDT7' : 'diabetic_diet',\n'DRQSDT8' : 'muscle_diet',\n'DRQSDT9' : 'low_carb_diet',\n'DRQSDT91' : 'other_diet',\n'DRQSPREP' : 'salt_used',\n'DUQ200' : 'marijuana',\n'DUQ370' : 'needle_drugs',\n'FSD032A' : 'food_insecure',\n'FSD032B' : 'not_enough_food',\n'FSD032C' : 'cheap_food',\n'FSD032D' : 'cheap_food_children',\n'FSD032E' : 'bad_food_children',\n'FSD032F' : 'low_food_children',\n'FSD151' : 'emergency_food_received',\n'FSDAD' : 'food_secure',\n'FSDCH' : 'child_food_secure',\n'FSDHH' : 'household_food_secure',\n'FSQ162' : 'wic_received',\n'FSQ165' : 'food_stamps',\n'HEQ010' : 'hepetitis_b',\n'HEQ030' : 'hepetitis_c',\n'HIQ011' : 'health_insurance',\n'HIQ210' : 'insurance_gap',\n'HIQ270' : 'prescription_insurance',\n'HOD050' : 'rooms_in_home',\n'HOQ065' : 'homeowner',\n'HSAQUEX' : 'health_status_source_data',\n'HSD010' : 'general_health',\n'HSQ500' : 'ever_had_cold',\n'HSQ510' : 'intestinal_illness',\n'HSQ520' : 'ever_had_flu',\n'HSQ571' : 'donate_blood',\n'HSQ590' : 'hiv',\n'HUQ010' : 'general_health2',\n'HUQ020' : 'health_compared_last_year',\n'HUQ030' : 'routine_healthcare',\n'HUQ041' : 'healthcare_location',\n'HUQ051' : 'dr_visits',\n'HUQ071' : 'overnight_hospital',\n'HUQ090' : 'mental_health_treatment',\n'IMQ011' : 'hepatitis_a_vaccine',\n'IMQ020' : 'hepatitis_b_vaccine',\n'IND235' : 'monthly_income',\n'INDFMMPC' : 'poverty_level_category',\n'INDFMMPI' : 'poverty_level_index',\n'INDFMPIR' : 'family_income',\n'INQ012' : 'self_employ_income',\n'INQ020' : 'income_from_wages',\n'INQ030' : 'income_from_SS',\n'INQ060' : 'disability_income',\n'INQ080' : 'retirement_income',\n'INQ090' : 'ss_income',\n'INQ132' : 'state_assistance_income',\n'INQ140' : 'investment_income',\n'INQ150' : 'other_income',\n'INQ244' : 'family_savings',\n'LBDBCDLC' : 'blood_cadmium',\n'LBDBGMLC' : 'methyl_mercury',\n'LBDHDD' : 'HDL_mg',\n'LBDIHGLC' : 'inorganic_mercury',\n'LBDNENO' : 'neutrophils_percent',\n'LBDTHGLC' : 'blood_mercury',\n'LBDWFL' : 'floride_water',\n'LBXEOPCT' : 'eosinophils_percent',\n'LBXGH' : 'glyco_hemoglobin',\n'LBXLYPCT' : 'lymphocite_percent',\n'LBXMC' : 'hemoglobin_concentration',\n'LBXSAL' : 'blood_albumin',\n'LBXSCA' : 'blood_calcium',\n'LBXSGL' : 'serum_glucose_mg',\n'LBXSTP' : 'blood_protein',\n'MCQ010' : 'asthma_ever',\n'MCQ025' : 'asthma_age',\n'MCQ035' : 'asthma',\n'MCQ040' : 'asthma_year',\n'MCQ050' : 'asthma_ER',\n'MCQ053' : 'anemia',\n'MCQ070' : 'psoriasis',\n'MCQ080' : 'overweight',\n'MCQ082' : 'celiac_disease',\n'MCQ086' : 'gluten_free',\n'MCQ092' : 'blood_transfusion',\n'MCQ149' : 'menstruate',\n'MCQ151' : 'menstruate_age',\n'MCQ160A' : 'arthritis',\n'MCQ160B' : 'congestive_heart_failure',\n'MCQ160C' : 'coronary_heart_disease',\n'MCQ160D' : 'angina',\n'MCQ160E' : 'heart_attack',\n'MCQ160F' : 'stroke',\n'MCQ160G' : 'emphysema',\n'MCQ160K' : 'bronchitis_ever',\n'MCQ160L' : 'liver_condition_ever',\n'MCQ160M' : 'thyroid_ever',\n'MCQ160N' : 'gout',\n'MCQ160O' : 'COPD',\n'MCQ170K' : 'bronchitis_now',\n'MCQ170L' : 'liver_condition',\n'MCQ170M' : 'thyroid_now',\n'MCQ180A' : 'arthritis_age',\n'MCQ180B' : 'heart_failure_age',\n'MCQ180C' : 'heart_disease_age',\n'MCQ180D' : 'angina_age',\n'MCQ180E' : 'heart_attack_age',\n'MCQ180F' : 'stroke_age',\n'MCQ180G' : 'emphysema_age',\n'MCQ180K' : 'bronchitis_age',\n'MCQ180L' : 'liver_condition_age',\n'MCQ180M' : 'thyroid_age',\n'MCQ180N' : 'gout_age',\n'MCQ195' : 'arthritis_type',\n'MCQ203' : 'jaundice',\n'MCQ206' : 'jaundice_age',\n'MCQ220' : 'cancer',\n'MCQ230A' : 'cancer_type1',\n'MCQ230B' : 'cancer_type2',\n'MCQ230C' : 'cancer_type3',\n'MCQ230D' : 'cancer_type4',\n'MCQ240A' : 'bladder_cancer_age',\n'MCQ240AA' : 'test_cancer_age',\n'MCQ240B' : 'blood_cancer_age',\n'MCQ240BB' : 'thyroid_cancer_age',\n'MCQ240C' : 'bone_cancer_age',\n'MCQ240CC' : 'uterine_cancer_age',\n'MCQ240D' : 'brain_cancer_age',\n'MCQ240DK' : 'cancer_age',\n'MCQ240E' : 'breast_cancer_age',\n'MCQ240F' : 'cervical_cancer_age',\n'MCQ240G' : 'colon_cancer_age',\n'MCQ240H' : 'esoph_cancer_age',\n'MCQ240I' : 'gallbladder_cancer_age',\n'MCQ240J' : 'kidney_cancer_age',\n'MCQ240K' : 'larynx_cancer_age',\n'MCQ240L' : 'leukemia_age',\n'MCQ240M' : 'liver_cancer_age',\n'MCQ240N' : 'lung_cancer_age',\n'MCQ240O' : 'lymphoma_age',\n'MCQ240P' : 'melanoma_age',\n'MCQ240Q' : 'mouth_cancer_age',\n'MCQ240R' : 'nervous_cancer_age',\n'MCQ240S' : 'ovarian_cancer_age',\n'MCQ240T' : 'pancreatic_cancer_age',\n'MCQ240U' : 'prostate_cancer_age',\n'MCQ240V' : 'rectal_cancer_age',\n'MCQ240X' : 'skin_cancer_age',\n'MCQ240Y' : 'soft_cancer_age',\n'MCQ240Z' : 'stomach_cancer_age',\n'MCQ300A' : 'relative_heart_attack',\n'MCQ300B' : 'relative_asthma',\n'MCQ300C' : 'relative_diabetes',\n'MCQ365A' : 'need_weight_loss',\n'MCQ365B' : 'need_exercise',\n'MCQ365C' : 'need_reduce_salt',\n'MCQ365D' : 'need_reduce_calories',\n'MCQ370A' : 'losing_weight',\n'MCQ370B' : 'excercising',\n'MCQ370C' : 'reducing_salt',\n'MCQ370D' : 'reducing_fat',\n'MGDCGSZ' : 'grip_strength',\n'OCD150' : 'work_done',\n'OCD270' : 'months_of_work',\n'OCD390G' : 'type_of_work',\n'OCD395' : 'job_duration',\n'OCQ260' : 'non_govt_employee',\n'OHQ030' : 'visit_dentist',\n'OHQ033' : 'dentist_reason',\n'OHQ620' : 'aching_mouth',\n'OHQ640' : 'mouth_problems',\n'OHQ680' : 'mouth_problems2',\n'OHQ770' : 'need_dental',\n'OHQ835' : 'gum_disease',\n'OHQ845' : 'teeth_health',\n'OHQ850' : 'gum_treatment',\n'OHQ855' : 'loose_teeth',\n'OHQ860' : 'teeth_bone_loss',\n'OHQ865' : 'weird_tooth',\n'OHQ870' : 'floss',\n'OHQ875' : 'use_mouthwash',\n'OHQ880' : 'oral_cancer_exam',\n'OHQ885' : 'oral_cancer_exam2',\n'OSQ060' : 'osteoporosis',\n'OSQ130' : 'take_prednisone',\n'OSQ230' : 'metal_objects',\n'PAAQUEX' : 'question_source',\n'PAD680' : 'sedentary_time',\n'PAQ605' : 'vigorous_work',\n'PAQ620' : 'moderate_work',\n'PAQ635' : 'walk_or_bike',\n'PAQ650' : 'vigorous_recreation',\n'PAQ665' : 'moderate_recreation',\n'PAQ710' : 'tv_hours',\n'PAQ715' : 'pc_hours',\n'PEASCST1' : 'bp_status',\n'PEASCTM1' : 'blood_pressure_time',\n'PFQ049' : 'work_limitations',\n'PFQ051' : 'work_limitations2',\n'PFQ054' : 'walk_equipment_required',\n'PFQ057' : 'confusion_memory_problems',\n'PFQ090' : 'special_healthcare_equipment',\n'PUQ100' : 'insecticide_used',\n'PUQ110' : 'weedkiller_used',\n'RIAGENDR' : 'gender',\n'RIDAGEYR' : 'age',\n'RIDRETH1' : 'hispanic',\n'RXQ510' : 'take_aspirin',\n'SEQN' : 'ID',\n'SLD010H' : 'sleep_hours',\n'SLQ050' : 'trouble_sleeping',\n'SLQ060' : 'sleep_disorder',\n'SMAQUEX.x' : 'question_mode',\n'SMAQUEX.y' : 'question_mode2',\n'SMAQUEX2' : 'question_mode3',\n'SMD460' : 'smokers_in_house',\n'SMDANY' : 'tobaco_1w',\n'SMQ681' : 'smoked_1w',\n'SMQ851' : 'tobaco2_1w',\n'SMQ856' : 'smoked_at_work',\n'SMQ858' : 'someone_smoked_at_job',\n'SMQ860' : 'smoked_at_restaurant',\n'SMQ863' : 'nicotine_1w',\n'SMQ866' : 'smoked_at_bar',\n'SMQ870' : 'smoked_in_car',\n'SMQ872' : 'someone_smoked_in_car',\n'SMQ874' : 'smoked_another_home',\n'SMQ876' : 'someone_smoked_in_home',\n'SMQ878' : 'smoked_other_building',\n'SMQ880' : 'someone_smoked_other_building',\n'SXD021' : 'sex_ever',\n'URXUCR' : 'creatinine_urine',\n'WHD010' : 'height_in',\n'WHD020' : 'current_weight_lb',\n'WHD050' : 'weight_1y',\n'WHD110' : 'weight_10y',\n'WHD120' : 'weight_age_25',\n'WHD140' : 'greatest_weight',\n'WHQ030' : 'overweight_self',\n'WHQ040' : 'weightloss_desire',\n'WHQ070' : 'weightloss_attempt',\n'WHQ150' : 'age_when_heaviest'\n}\ndf = df.rename(columns = col_decoder)\nlabs = labs.rename(columns = col_decoder)\nexam = exam.rename(columns = col_decoder)\ndemo = demo.rename(columns = col_decoder)\ndiet = diet.rename(columns = col_decoder)\nques = ques.rename(columns = col_decoder)","953e9a87":"cancer_df = df.dropna(subset=['cancer'])\ndiabetes_df = df.dropna(subset=['diabetes'])\nheart_df = df.dropna(subset=['coronary_heart_disease'])\nliver_df = df.dropna(subset=['liver_condition'])","097ca1f3":"target_dfs = [cancer_df, diabetes_df, heart_df, liver_df]","3b261bd2":"for df in target_dfs:\n    df.replace({7:None, 9:None, 77:None,99:None,777:None,999:None,7777:None,9999:None,77777:None,99999:None,\n            777777:None,999999:None,55:None,555:None,5555:None,8:None,88:None}, inplace=True)","f3591b57":"df.replace({7:None, 9:None, 77:None,99:None,777:None,999:None,7777:None,9999:None,77777:None,99999:None,\n            777777:None,999999:None,55:None,555:None,5555:None,8:None,88:None}, inplace=True)","d10780bd":"def filter_columns(df, cutoff=0.9):\n    tot_rows = df.shape[0]\n    removed_cols = []\n    print(\"original number of columns: \", df.shape[1])\n    for col in df.columns:\n        num_na = df[col].isna().sum()\n        if (num_na\/tot_rows) > cutoff:\n            #print(col, df[col].isna().sum())\n            removed_cols.append(col)\n    print(\"number of columns removed: \", len(removed_cols))\n    return df.drop(removed_cols, axis=1)\n    \ndef filter_rows(df, cutoff=0.9):\n    tot_cols = df.shape[1]\n    print(\"original number of rows: \", df.shape[0])\n    df = df[df.isnull().sum(axis=1) < tot_cols*cutoff]\n    print(\"remaining rows: \", df.shape[0])\n    return df","a8e02108":"#df = df[df.age > 18]","b98462bf":"def trans_cat_cols(df, cat_cols):\n    for col in cat_cols:\n        df.loc[df[col] != 1, col] = 0\n    return df","4fd6be3f":"x = df.nunique()\ncat_cols = x[(x<15)].index\ndf = trans_cat_cols(df, cat_cols)","67c33af7":"#df.loc[df[col] != 1, col] = 0","5c4bd72c":"for df in target_dfs:\n    x = df.nunique()\n    cat_cols = x[(x<15)].index\n    df = trans_cat_cols(df, cat_cols)","67d2716e":"for df in target_dfs:\n    df = filter_rows(df, cutoff=0.8)\n    df = filter_columns(df, cutoff=0.5)","33e0ea50":"for df in target_dfs:\n    df.fillna(df.mode().iloc[0], inplace=True)","28b24085":"lifestyle_cols = ['drink_alcohol','alcohol_per_day','saggital_abdominal_avg','arm_circum','BMI',\n                  'saggital_abdominal_1','saggital_abdominal_2','waist_circum','weight_kg',\n                  'grocery_budget','nonfood_budget','food_budget',\n                  'restaurant_budget','food_delivery_budget','fast_food','saw_nutrition_fast_food',\n                  'use_nutrition_fast_food','eat_restaurants','eat_chain_restaurants','saw_nutrition_restaurant',\n                  'use_nutrition_restaurant','saw_my_plate','wisdom_teeth_removed','tonsils_removed',\n                  'salt_frequency','meals_not_homemade','meals_fast_food','meals_prepackaged',\n                  'frozen_meals_per_month','salt_type','milk_product_per_month','milk_drinker','healthy_diet',\n                  'long_sleeve_shirt','use_sunscreen','people_in_house','children_in_house','Marital_Status',\n                  'trouble_sleeping_2w','eating_problems_2w','water','plain_water_yesterday','tap_water_yesterday',\n                  'bottled_water_yesterday','dietary_alpha_carotene','alcohol','dietary_vitamin_e',\n                  'dietary_beta_carotene','caffeine','dietary_calcium','carb','dietary_choline','cholesterol',\n                  'dietary_copper','dietary_beta_cryptoxanthin','dietary_folic_acid','folate_food','fiber',\n                  'dietary_folate','dietary_iron','calories','dietary_lycopene','dietary_lutein',\n                  'octadecenoic_percent','magnesium','monounsaturated_fats','moisture','dietary_niacin',\n                  'octadecatrienoic_percent','dietary_phosphorus','dietary_potassium','protein','dietary_retinol',\n                  'tetradeconoic_percent','dietary_selenium','sodium','sugar','fat','dietary_theobromine',\n                  'dietary_vitamin_a','dietary_b1','dietary_b12','dietary_b2','dietary_b6','dietary_vit_c',\n                  'dietary_vit_d','dietary_vit_k','dietary_zinc','shellfish','clams','crabs','crayfish',\n                  'lobsters','mussels','oysters','scallops','shrimp','breaded_fish','tuna','bass','catfish',\n                  'cod','flatfish','haddock','mackerel','perch','pike','pollock','porgy','salmon','sardines',\n                  'sea_bass','shark','swordfish','trout','walleye','other_fish','special_diet','low_cal_diet',\n                  'high_protein_diet','low_gluten_diet','kidney_diet','low_fat_diet','low_salt_diet','low_sugar_diet',\n                  'low_fiber_diet','high_fiber_diet','muscle_diet','low_carb_diet','other_diet','salt_used',\n                  'marijuana','needle_drugs','food_insecure','not_enough_food','cheap_food','cheap_food_children',\n                  'bad_food_children','low_food_children','emergency_food_received','food_secure','child_food_secure',\n                  'household_food_secure','wic_received','food_stamps','health_insurance','insurance_gap',\n                  'prescription_insurance','donate_blood','routine_healthcare','healthcare_location','dr_visits',\n                  'hepatitis_a_vaccine','hepatitis_b_vaccine','neutrophils_percent','floride_water',\n                  'overweight','gluten_free','losing_weight','excercising',\n                  'reducing_salt','reducing_fat','work_done','months_of_work','type_of_work','job_duration',\n                  'non_govt_employee','visit_dentist','floss','use_mouthwash','take_prednisone','sedentary_time',\n                  'vigorous_work','moderate_work','walk_or_bike','vigorous_recreation','moderate_recreation',\n                  'tv_hours','pc_hours','bp_status','insecticide_used','weedkiller_used','age',\n                  'sleep_hours','smokers_in_house','tobaco_1w','smoked_1w','tobaco2_1w','smoked_at_work',\n                  'someone_smoked_at_job','smoked_at_restaurant','nicotine_1w','smoked_at_bar','smoked_in_car',\n                  'someone_smoked_in_car','smoked_another_home','someone_smoked_in_home','smoked_other_building',\n                  'someone_smoked_other_building','weight_1y','weight_10y','weight_age_25','greatest_weight',\n                  'overweight_self','weightloss_desire','weightloss_attempt']","c0d7684e":"cols = ['age','BMI','calories','family_income']\n\nfig, ax = plt.subplots(2, 2)\nfor i, col in enumerate(cols):\n    ax[i\/\/2, i%2].hist(df[col])\n    ax[i\/\/2, i%2].set_title(col)\n    ax[i\/\/2, i%2].set_ylabel(\"Num of Patients\")\nplt.tight_layout()","1564822b":"targets = ['cancer','diabetes','coronary_heart_disease','liver_condition']","91adbb02":"plot = df[targets].mean().sort_values().plot.barh(figsize=(8,8))\nplot.set_xlabel(\"Prevelance\")\nplot.set_title(\"Disease Prevelance for all groups\")\nplt.show()","5e4c221e":"target_df = df[targets]\ntarget_df = target_df[target_df.mean(axis=1) == 1\/4]\ntarget_df['disease'] = target_df.idxmax(1)\ntarget_df['counter'] = 1\nplt.figure(figsize = (10,10))\ntarget_df.groupby('disease').counter.count().plot(kind='pie')","04281496":"for df in target_dfs:\n    ex_df = df[list(set(df.columns) & set(lifestyle_cols))]\n    corr = ex_df.corr()\n    corr = corr.mask(np.tril(np.ones(corr.shape)).astype(np.bool))\n    redun = corr[abs(corr) >= 0.9].stack().reset_index()['level_1']\n    ex_df = ex_df.drop(redun, axis=1)\n    corr = ex_df.corr()\n    corr = corr.mask(np.tril(np.ones(corr.shape)).astype(np.bool))\n    big_corr = ex_df[corr[abs(corr).max() > 0.5].index].corr()\n    big_corr = big_corr.mask(np.tril(np.ones(big_corr.shape)).astype(np.bool))\n    big_corr = ex_df[big_corr[abs(big_corr).max() > 0.5].index].corr()\n\n    plt.figure(figsize = (10,8))\n    sns.heatmap(big_corr, \n            xticklabels=big_corr.columns,\n            yticklabels=big_corr.columns,\n            cmap=\"PiYG\",\n            vmin=-1, vmax=1)","dc786487":"neg_factors = set()\npos_factors = set()\nfor col, df in zip(targets, target_dfs):\n    ex_df = df[list(set(df.columns) & set(lifestyle_cols))]\n    print('==========================')\n    print(\"Correlations with \", col)\n    print('==========================')\n    corr = ex_df.corrwith(df[col])\n    neg_factors.update(corr.sort_values().dropna().head(10).index)\n    pos_factors.update(corr.sort_values().dropna().tail(10).index)\n    temp_df = corr.sort_values().dropna().head(5)\n    temp_df.plot(kind='barh',\n                    color=(temp_df > 0).map({True: 'g',\n                                                    False: 'r'}))\n    plt.show()\n    temp_df = corr.sort_values().dropna().tail(5)\n    temp_df.plot(kind='barh',\n                    color=(temp_df > 0).map({True: 'g',\n                                                    False: 'r'}))\n    plt.show()","3c9b65cc":"temp_df = corr.sort_values().dropna().head(5)\ntemp_df.plot(kind='barh',\n                    color=(temp_df > 0).map({True: 'g',\n                                                    False: 'r'}))","6816557f":"temp_df > 0","91ef0669":"neg_factors","6fb5d591":"pos_factors","e8c31bc6":"diabetes_df.age.hist()","173be78a":"for col in ['age','greatest_weight']:#,'tetradeconoic_percent','BMI','restaurant_budget','sugar','protein']:\n    plt.figure(figsize=(8,6))\n    plt.hist(diabetes_df[diabetes_df.diabetes == 1][col], bins=10, alpha=0.5, label=\"diabetes\", density=True)\n    plt.hist(diabetes_df[diabetes_df.diabetes == 0][col], bins=10, alpha=0.5, label=\"healty\", density=True)\n    plt.xlabel(col, size=14)\n    plt.ylabel(\"Percent\", size=14)\n    plt.title(col + \" Distribution Comparison\")\n    plt.legend(loc='upper right')\n    plt.show()","6fedf22a":"for col in ['job_duration','age','child_food_secure','smoked_at_work','dr_visits','food_insecure','dietary_vitamin_a', 'dietary_beta_carotene']:\n    plt.figure(figsize=(8,6))\n    plt.hist(cancer_df[cancer_df.cancer == 1][col], bins=10, alpha=0.5, label=\"cancer\", density=True)\n    plt.hist(cancer_df[cancer_df.cancer == 0][col], bins=10, alpha=0.5, label=\"healty\", density=True)\n    plt.xlabel(col, size=14)\n    plt.ylabel(\"Percent\", size=14)\n    plt.title(col + \" Distribution Comparison\")\n    plt.legend(loc='upper right')\n    plt.show()","e6ea4148":"neg_factors","b18832c0":"pos_factors","61095621":"def tree_diag(target, df, depth=5, ratio=3):\n    ex_df = df[list(set(df.columns) & set(lifestyle_cols))]\n    tree_mod = DecisionTreeClassifier(max_depth=depth, class_weight={0:1,1:ratio})\n    tree_mod.fit(ex_df, df[target])\n    fig = plt.figure(figsize=(18,13))\n    _ = tree.plot_tree(tree_mod,\n                      feature_names = ex_df.columns,\n                      class_names = ['healthy',target],\n                      filled=True)\ndef tree_f1(target, df, ratio=3):\n    ex_df = df[list(set(df.columns) & set(lifestyle_cols))]\n    X_train, X_test, y_train, y_test = train_test_split(ex_df, df[[target]], test_size=0.2)\n    tree_mod = DecisionTreeClassifier(class_weight={0:1,1:ratio}, ccp_alpha=0.0001)\n    tree_mod.fit(X_train, y_train)\n    return(f1_score(tree_mod.predict(X_test),y_test))","036289f8":"print('Diabetes F1 score: ', tree_f1('diabetes', diabetes_df, ratio=12))\nprint('Cancer F1 score: ', tree_f1('cancer', cancer_df, ratio=10))\nprint('Heart Disease F1 score: ', tree_f1('coronary_heart_disease', heart_df, ratio=20))\nprint('Liver Disease F1 score: ', tree_f1('liver_condition', liver_df, ratio=0.5))","5133a3f9":"tree_diag('diabetes', diabetes_df, depth=3, ratio=10)","22e4f212":"tree_diag('cancer', cancer_df, depth=3, ratio=10)","26d0dbfb":"tree_diag('coronary_heart_disease', heart_df, 3, ratio=20)","8d634b07":"tree_diag('liver_condition', liver_df, 3, ratio=0.5)","2a0f92fa":"def nhanes_pred(model, target, df, proba=False):\n    ex_df = df[list(set(df.columns) & set(lifestyle_cols))]\n    X = ex_df\n    y = df[[target]]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n    model.fit(X_train, y_train.values.ravel())\n    if proba:\n        preds = model.predict_proba(X_test)[:,1]\n    else:\n        preds = model.predict(X_test)\n    return y_test, preds\n\ndef plot_roc(y_test, probs):\n    fpr, tpr, _ = roc_curve(y_test, probs)\n    auc_score = auc(fpr, tpr)\n\n    plt.plot(fpr, tpr, label='AUC = {:.2f}'.format(auc_score))\n    plt.plot([0,1],[0,1],'r--')\n\n    plt.xlim([-0.1,1.1])\n    plt.ylim([-0.1,1.1])\n    plt.ylabel('True Positive Rate')\n    plt.xlabel('False Positive Rate')\n\n    plt.legend(loc='lower right')\n    plt.show()","6043c620":"fig, ax = plt.subplots(2,2, figsize=(15,15))\nfor (i, target), df in zip(enumerate(targets), target_dfs):\n    nb = GaussianNB()#var_smoothing=0.0000001)\n    y_test, preds = nhanes_pred(nb, target, df)\n    print(target, ' F1 score: ', f1_score(y_test,preds))\n    mat = confusion_matrix(y_test, preds)\n    sns.heatmap(mat, ax=ax[i%2, i\/\/2], square=True, annot=True, cbar=False, fmt='d').set_title(target)\n    \nplt.show()\n","5c4dc2db":"nb = GaussianNB(var_smoothing=0.0000001)\nex_df = cancer_df[list(set(cancer_df.columns) & set(lifestyle_cols))]\nX = ex_df\ny = cancer_df[['cancer']]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\nnb.fit(X_train, y_train.values.ravel())","8bcdef2f":"imps = permutation_importance(nb, X_test, y_test)\nimportances = imps.importances_mean","9ed30095":"imp_df = pd.DataFrame(ex_df.columns, columns=['feature'])\nimp_df['importance'] = importances\nimp_df.set_index('feature').sort_values(by='importance').tail(10).plot.barh()","6043a9e4":"space = {\n        'C': hp.quniform('C', 0.005,1.0,0.01),\n        'kernel': hp.choice('kernel', ['poly', 'sigmoid', 'rbf']),\n        'degree': hp.choice('degree', [1,2,3,4])\n        }","8c7dd8e6":"ex_df = heart_df[list(set(heart_df.columns) & set(lifestyle_cols))]\nX_train, X_test, y_train, y_test = train_test_split(ex_df, heart_df.coronary_heart_disease, test_size=0.5)","401a3800":"def svm_score(params):\n    mod = svm.SVC(**params)\n    mod.fit(X_train, y_train.values.ravel())\n    predictions = mod.predict(X_test)\n    return 1 - f1_score(y_test, predictions)","b1a359dc":"def get_params(score):    \n    best = fmin(score, space, algo=tpe.suggest, max_evals=100)\n    return best","923db7f0":"get_params(svm_score)","70bc1657":"best_params = {'C': 0.17, 'degree': 2, 'kernel': 'sigmoid'}","6ae98b8a":"for target, df in zip(targets, target_dfs):\n    mod = svm.SVC(**best_params)\n    ex_df = df[list(set(df.columns) & set(lifestyle_cols))]\n    X_train, X_test, y_train, y_test = train_test_split(ex_df, df[[target]], test_size=0.2)\n    mod.fit(X_train, y_train.values.ravel())\n    predictions = mod.predict(X_test)\n    print('F1 score for ', target, ': ', f1_score(y_test, predictions))","6a5a5409":"#Dataset is imbalanced, so we will pass a balancing parameter to XGBoost\nheart_df.coronary_heart_disease.value_counts()[0]\/heart_df.coronary_heart_disease.value_counts()[1]","856a5960":"targets","b75345ff":"space = {\n        'eta': hp.quniform('eta', 0.025, 0.5, 0.025),\n        'max_depth':  hp.choice('max_depth', np.arange(1, 14, dtype=int)),\n        'min_child_weight': hp.quniform('min_child_weight', 1, 8, 1),\n        'subsample': hp.quniform('subsample', 0.5, 1, 0.05),\n        'gamma': hp.quniform('gamma', 0.5, 1, 0.05),\n        'colsample_bytree': hp.quniform('colsample_bytree', 0.5, 1, 0.05),\n        'scale_pos_weight': hp.choice('scale_pos_weight', np.arange(5, 25, dtype=int)),\n        'eval_metric': 'auc'\n    }","910cfb9e":"def xg_score(params):\n    mod = xgb.train(params, dtrain,\n                    early_stopping_rounds=100,\n                    evals=[(dvalid,'valid'), (dtrain,'train')],\n                    verbose_eval=False)\n    predictions = mod.predict(dvalid)\n    return 1 - roc_auc_score(y_test, predictions)","93b8be21":"ex_df = heart_df[list(set(heart_df.columns) & set(lifestyle_cols))]\nX_train, X_test, y_train, y_test = train_test_split(ex_df, heart_df.coronary_heart_disease, test_size=0.2)\ndtrain = xgb.DMatrix(data=X_train.values,\n                     feature_names=X_train.columns,\n                     label=y_train.values)\ndvalid = xgb.DMatrix(data=X_test.values,\n                     feature_names=X_test.columns,\n                     label=y_test.values)","2edc74a8":"def get_params(score):    \n    best = fmin(score, space, algo=tpe.suggest, max_evals=250)\n    return best","7c7d3454":"get_params(xg_score)","37038d5e":"#Note: hpchoice actually returns the index, so the value for max_depth is 1\nbest_params = {'colsample_bytree': 0.7,\n                'eta': 0.45,\n                'gamma': 0.55,\n                'max_depth': 1,\n                'min_child_weight': 1.0,\n                'subsample': 0.85,\n                'scale_pos_weight': 13,\n                'eval_metric': 'auc'}","d85ee748":"fig, ax = plt.subplots(2,2, figsize=(15,15))\nfor (i, target),df in zip(enumerate(targets), target_dfs):\n    \n    xgc = XGBClassifier(**best_params)\n    y_test, preds = nhanes_pred(xgc, target, df)\n    mat = confusion_matrix(y_test, preds)\n    sns.heatmap(mat, ax=ax[i%2, i\/\/2], square=True, annot=True, cbar=False, fmt='d').set_title(target)\n    print(target, ' F1 score: ', f1_score(y_test,preds))\nplt.show()","de2aa1d4":"xgc = XGBClassifier(**best_params)\ny_test, probs = nhanes_pred(xgc, 'coronary_heart_disease', heart_df, proba=1)\nplot_roc(y_test, probs)","9decc894":"ax = plot_importance(xgc, max_num_features=10)\nfig = ax.figure\nfig.set_size_inches(5, 10)","c81550ae":"#### Combinations of 7s and 9s are used when data is not applicable or when the patient refused to answer","d7efff21":"## Support function","b601b991":"## Importing and Joining data","c7e89f12":"## SVM","880b4fdd":"#### Remove columns and rows with excessive nulls","5995839a":"## Naive Bayes","aa3acc69":"## Handling Nulls and Category columns","02d14b4f":"## Finding Correlations with Disease","07f7676f":"## Exploring Factors","cd3f9b16":"## XGBoost","1e8dd2b4":"# Health Survey Analysis","0d3fbf0d":"## Decoding Columns","3e65402a":"## Decision Trees","ae2ceb3e":"### Results are poor when using default parameters. \n### Below is a systematic search of hyperparamters"}}