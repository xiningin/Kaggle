{"cell_type":{"2817d3e4":"code","facf0d02":"code","187b8efa":"code","8181f548":"code","2f306c70":"code","17c4e026":"code","cafb2b1e":"code","c1f05b3e":"code","ff888fda":"code","627adbe1":"code","0b8292c4":"markdown","351e85d0":"markdown","4040af25":"markdown","414c1d50":"markdown","f185938e":"markdown","3060632c":"markdown","25e10273":"markdown","4b84c895":"markdown","eff716a7":"markdown"},"source":{"2817d3e4":"import numpy as np \nfrom ipywidgets import interact\nfrom bokeh.io import push_notebook, show, output_notebook\nfrom bokeh.plotting import figure\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport os\noutput_notebook()","facf0d02":"spotify_data = pd.read_csv(\"..\/input\/data.csv\") ","187b8efa":"spotify_data.head()","8181f548":"print(\"DataFrame's columns: \", spotify_data.columns)\nprint(\"DataFrame's shape: \", spotify_data.shape)\nprint(\"Countries :\", spotify_data['Region'].unique()) \n\n# Notice in the list of countries, that \"global\" is also an option","2f306c70":"index = np.where(spotify_data[\"Streams\"] == max(spotify_data['Streams']))  # Find the index with the maximum value for 'Streams'\nprint(spotify_data['Track Name'][index[0][0]])                             # Print the Track Name using the first entry of index\nprint(spotify_data['Date'][index[0][0]])                                   # Print the Date with the most streams\nprint(spotify_data['Region'][index[0][0]])","17c4e026":"Region = spotify_data['Region'] == 'global'\nDate   = spotify_data['Date']=='2017-01-12'  # yy-mm-dd\nspotify_data[Region & Date].head()","cafb2b1e":"Region_global = spotify_data['Region'] == 'global'\nRegion_other = spotify_data['Region'] == 'fr'\nPosition = spotify_data['Position'] <= 10\nTop_10_Tracks_Global = spotify_data[Region_global & Position]['Track Name'].drop_duplicates().reset_index(drop=True)\n\n\nName   = spotify_data['Track Name'] == Top_10_Tracks_Global[1]\nGlobal_Position = spotify_data[Region_global & Name]['Position'].reset_index(drop=True)\nLocal_Position = spotify_data[Region_other & Name]['Position'].reset_index(drop=True)\n\nx_1 = list(range(0,len(Global_Position)))\ny_1 = list(Global_Position[:])\nx_2 = list(range(0,len(Local_Position)))\ny_2 = list(Local_Position[:])\n\nfig_2 = figure(title=\"\", plot_height=400,plot_width=700) \nfig_2.xaxis.axis_label = 'Time in Days'\nfig_2.yaxis.axis_label = 'Position'\ninp_multi=fig_2.multi_line([x_1, x_2], [y_1, y_2], color=[\"navy\", \"green\"], alpha=[0.8, 0.8], line_width=2,legend='Global')\nfig_2.legend.location = \"top_left\"","c1f05b3e":"def update_name_and_region(trackName,region):\n    Name = spotify_data['Track Name'] == trackName\n    Region = spotify_data['Region'] == 'global'\n    Region_local = spotify_data['Region'] == region\n    Global_Position = spotify_data[Region & Name]['Position'].reset_index(drop=True)\n    Local_Position = spotify_data[Region_local & Name]['Position'].reset_index(drop=True)\n    inp_multi.data_source.data['xs'][0] = list(range(0,len(Global_Position[:])))\n    inp_multi.data_source.data['ys'][0] = list(Global_Position[:])\n    inp_multi.data_source.data['xs'][1] = list(range(0,len(Local_Position[:])))\n    inp_multi.data_source.data['ys'][1] = list(Local_Position[:])\n    fig_2.title.text = trackName + ' (Global Position and Local Position; Region: ' + region + ')'\n    show(fig_2,notebook_handle=True)\n    push_notebook()\n    ","ff888fda":"interact(update_name_and_region, trackName=Top_10_Tracks_Global[:],region= spotify_data['Region'].unique());","627adbe1":"song_names    = list()\ndays_in_top_1 = list()\nPosition = spotify_data['Position'] <= 1\nRegion   = spotify_data['Region'] == 'global'\nTop_1_Tracks_Global = spotify_data[Region & Position]['Track Name'].drop_duplicates().reset_index(drop=True)\n\n\nfor n in range(len(Top_1_Tracks_Global)):\n    song_names.append(str(Top_1_Tracks_Global[n]))\n    Name     = spotify_data['Track Name'] == song_names[n]\n    days_in_top_1.append(len(spotify_data[Region & Position & Name]))\n\n    \ntop_1_fig = figure(x_range=song_names, plot_height=550,plot_width=800, title=\"Days in spot No. 1\",\n                   y_axis_label = 'Total days' ,toolbar_location=None, tools=\"\")\n\ntop_1_fig.vbar(x=song_names, top=days_in_top_1, width=0.9)\ntop_1_fig.xgrid.grid_line_color = None\ntop_1_fig.y_range.start = 0\ntop_1_fig.xaxis.major_label_orientation = 1\n#top_1_fig.y_axis_label = 'Days in spot Number 1'\nshow(top_1_fig)\ntype(top_1_fig.xaxis)","0b8292c4":"## Now let's see which was the most streamed song on a single day\n\n* For that we can use the function np.where() \n\n","351e85d0":"# Tracks which made it at least to the top 10 globally\n# Position through time in different regions","4040af25":"### Use pd.read_csv('filepath') to read the .csv file. ","414c1d50":"### For the given timespan the number one spot (global) was pretty much dominated by only 3 different songs :\n- Shape of You\n- Despacito\n- rockstar","f185938e":"According to Wikipedia this song was released January 12, 2017, which means that it took more than 5 months for\nit to reach its global maximum peak of streams-on-a-single-day on Spotify.\n\n### Using this time only the dataframe we can show the top songs (global) on that date","3060632c":" This function returns a pandas dataframe. We can see the first rows of the file with the head() function","25e10273":"# Top-Song Analysis using Spotify data\n","4b84c895":"\n# Exploring the data\n### According to the source's description: \n\"This dataset contains the daily ranking of the 200 most listened songs in 53 countries from 2017 and 2018 by Spotify users. It contains more than 2 million rows, which comprises 6629 artists, 18598 songs for a total count of one hundred five billion streams count.\"","eff716a7":"# Total days on the number one spot"}}