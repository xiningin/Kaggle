{"cell_type":{"a607587d":"code","c73157d7":"code","7cf3b5d7":"code","7c12332a":"code","693b11f4":"code","5c43e197":"code","962a15a5":"code","0b39ce35":"code","2e0045c5":"code","95e11067":"code","5599dd0c":"code","1f08d695":"code","1481f43d":"code","ae0d39c1":"code","73da33aa":"markdown","717b7a41":"markdown","36ccb6bd":"markdown","76991f74":"markdown","5d4d6557":"markdown","815b0296":"markdown","25509d8f":"markdown","2309f1aa":"markdown","f12f829d":"markdown"},"source":{"a607587d":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\npd.options.mode.chained_assignment = None\n\ndf = pd.read_csv('\/kaggle\/input\/bart-ridership\/ridership\/date-hour-soo-dest-2019.csv')\n","c73157d7":"df.head()","7cf3b5d7":"df.info()","7c12332a":"df['Origin Station'].unique()","693b11f4":"plt.figure(figsize=(20,20))\nimg = plt.imread('\/kaggle\/input\/bart-map\/BART System Map API.png')\nplt.imshow(img)\nplt.show()","5c43e197":"import plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\nimport base64\n\ndef animate_stations(df, x_col, y_col, animation_frame, size, hover_name, title):\n\n    init_notebook_mode()\n    fig = px.scatter(df, \n                 x=x_col,\n                 y=y_col, \n                 animation_frame= animation_frame, \n                 size= size, \n                 hover_name = hover_name,\n                 range_x=(0,2050), \n                 range_y=(2050,0), \n                 width=700, \n                 height=700,\n                 labels = {'origin_x':'', 'origin_y':''})\n    image_filename = \"\/kaggle\/input\/bart-map-black-and-white\/BART System Map API BW.png\"\n    plotly_logo = base64.b64encode(open(image_filename, 'rb').read())\n    fig.update_layout(xaxis_showgrid=False, \n                    yaxis_showgrid=False,\n                    xaxis_showticklabels=False,\n                    yaxis_showticklabels=False,\n                    title= title,\n                    images= [dict(\n                    source='data:image\/png;base64,{}'.format(plotly_logo.decode()),\n                    xref=\"paper\", yref=\"paper\",\n                    x=0, y=1,\n                    sizex=1, sizey=1,\n                    xanchor=\"left\",\n                    yanchor=\"top\",\n                    sizing=\"stretch\",\n                    layer=\"below\")])\n    iplot(fig)","962a15a5":"station_coords = {\n    '12TH':[798, 702],\n    '19TH':[798, 655],\n    'MCAR':[802, 607],\n    '16TH':[375, 948],\n    'CIVC':[397, 915],\n    'POWL':[419, 886],\n    'MONT':[438, 860],\n    'EMBR':[457, 834],\n    '24TH':[358, 988],\n    'GLEN':[339, 1023],\n    'BALB':[318, 1052],\n    'DALY':[288, 1100],\n    'COLM':[301, 1154],\n    'SSAN':[342, 1200],\n    'SBRN':[380, 1270],\n    'SFIA':[485, 1321],\n    'MLBR':[495, 1435],\n    'WOAK':[679, 793],\n    'LAKE':[846, 871],\n    'FTVL':[903, 928],\n    'COLS':[959, 983],\n    'SANL':[1025, 1045],\n    'BAYF':[1075, 1105],\n    'HAYW':[1196, 1245],\n    'SHAY':[1280, 1335],\n    'UCTY':[1360, 1420],\n    'FRMT':[1455, 1525],\n    'WARM':[1505, 1635],\n    'MLPT':[1525, 1765],\n    'BERY':[1535, 1895],\n    'ROCK':[886, 542],\n    'ORIN':[965, 492],\n    'LAFY':[1055, 444],\n    'WCRK':[1135, 394],\n    'PHIL':[1225, 337],\n    'CONC':[1295, 294],\n    'NCON':[1375, 244],\n    'PITT':[1535, 182],\n    'PCTR':[1695, 193],\n    'ANTC':[1855, 187],\n    'CAST':[1265, 1125],\n    'WDUB':[1505, 1105],\n    'DUBL':[1655, 1085],\n    'OAKL':[884, 1065],\n    'ASHB':[765, 537],\n    'DBRK':[735, 492],\n    'NBRK':[706, 450],\n    'PLZA':[673, 407],\n    'DELN':[644, 356],\n    'RICH':[611, 310]\n}\n    \ndef get_x_coord(station):\n    return station_coords[station][0]\n\ndef get_y_coord(station):\n    return station_coords[station][1]\n\ndf_day = df[df.Date == '2019-01-09']\ndf_day['origin_x'] = df_day['Origin Station'].apply(lambda x: get_x_coord(x))\ndf_day['origin_y'] = df_day['Origin Station'].apply(lambda x: get_y_coord(x))\ndf_day['destination_x'] = df_day['Destination Station'].apply(lambda x: get_x_coord(x))\ndf_day['destination_y'] = df_day['Destination Station'].apply(lambda x: get_y_coord(x))\ndf_day['Route'] = df_day[['Origin Station', 'Destination Station']].apply(lambda x: '-'.join(x), axis=1)\n\ndf_day_origin = df_day.groupby(['Hour', 'Origin Station', 'origin_x', 'origin_y']).sum().reset_index()\nanimate_stations(df_day_origin, 'origin_x', 'origin_y', 'Hour', 'Trip Count', 'Origin Station', 'Departures: 2019-01-09')\n\ndf_day_destination = df_day.groupby(['Hour', 'Destination Station', 'destination_x', 'destination_y']).sum().reset_index()\nanimate_stations(df_day_destination, 'destination_x', 'destination_y', 'Hour', 'Trip Count', 'Destination Station', 'Arrivals: 2019-01-09')\n","0b39ce35":"fig = px.bar(df_day.groupby(['Hour']).sum().reset_index(), x='Hour', y='Trip Count', hover_name='Trip Count', title='Total Trips each Hour 1\/9\/2019')\nfig.show()\n\nidx = df_day.groupby(['Hour'])['Trip Count'].transform(max) == df_day['Trip Count']\nfig = px.bar(df_day[idx], x='Hour', y='Trip Count', hover_name = 'Route', color='Route', title = 'Most Travelled Routes each Hour 1\/9\/2019')\nfig.show()\n\ndf_day_o = df_day.groupby(['Hour', 'Origin Station']).sum().reset_index()\nidx = df_day_o.groupby(['Hour'])['Trip Count'].transform(max) == df_day_o['Trip Count']\nfig = px.bar(df_day_o[idx], x='Hour', y='Trip Count', hover_name = 'Origin Station', color='Origin Station', title='Most common Origin Station each Hour 1\/9\/2019')\nfig.show()\n\ndf_day_d = df_day.groupby(['Hour', 'Destination Station']).sum().reset_index()\nidx = df_day_d.groupby(['Hour'])['Trip Count'].transform(max) == df_day_d['Trip Count']\nfig = px.bar(df_day_d[idx], x='Hour', y='Trip Count', hover_name = 'Destination Station', color='Destination Station', title='Most common Destination Station each Hour 1\/9\/2019')\nfig.show()\n","2e0045c5":"MAX_SHOW = 40\ndf_day['Hour_string'] = df_day['Hour'].astype(str)\ndf_day['Route:Hour'] = df_day[['Route', 'Hour_string']].apply(lambda x: ':'.join(x), axis=1)\n\nfig = px.bar(df_day.sort_values(by=['Trip Count'], ascending=False)[0:MAX_SHOW].reset_index(), x='Route:Hour', y='Trip Count', hover_name='Route:Hour', color='Hour', title='Most Common Route:Hour Combinations 1\/9\/2019')\nfig.show()\n\nfig = px.bar(df_day.groupby(['Origin Station']).sum().sort_values(by = ['Trip Count'], ascending=False).reset_index(), x = 'Origin Station', y = 'Trip Count', hover_name = 'Origin Station', title='Most Used Stations (Departures) 1\/9\/2019')\nfig.show()\n\nfig = px.bar(df_day.groupby(['Destination Station']).sum().sort_values(by = ['Trip Count'], ascending=False).reset_index(), x = 'Destination Station', y = 'Trip Count', hover_name = 'Destination Station', title='Most Used Stations (Arrivals) 1\/9\/2019')\nfig.show()\n\ndf_day_o = df_day.groupby(['Origin Station']).sum().sort_values(by = ['Trip Count'], ascending=False).reset_index()\ndf_day_d = df_day.groupby(['Destination Station']).sum().sort_values(by = ['Trip Count'], ascending=False).reset_index()\ndf_day_o.rename(columns={'Origin Station': 'Station'}, inplace=True)\ndf_day_d.rename(columns={'Destination Station': 'Station'}, inplace=True)\ndf_day_o['Trip Type'] = 'Departure'\ndf_day_d['Trip Type'] = 'Arrival'\ndf_day_t = pd.concat([df_day_o, df_day_d]).reset_index()\nfig = px.bar(df_day_t.sort_values(by = ['Trip Count'], ascending=False).reset_index(), x = 'Station', y = 'Trip Count', hover_name = 'Station', color='Trip Type', title='Most Used Stations (Departures and Arrivals) 1\/9\/2019')\nfig.show()\n\n","95e11067":"def show_station(station_name, df_day, plot_title):\n    df_o = df_day[df_day[\"Origin Station\"] == station_name].groupby(['Hour']).sum().reset_index()\n    df_d = df_day[df_day[\"Destination Station\"] == station_name].groupby(['Hour']).sum().reset_index()\n    df_o[\"Trip Type\"] = 'Departure'\n    df_d[\"Trip Type\"] = 'Arrival'\n    df = pd.concat([df_o, df_d]).reset_index()\n    fig = px.bar(df, x='Hour', y='Trip Count', color='Trip Type', hover_name='Trip Type', title=plot_title)\n    fig.show()\n\nshow_station('MONT', df_day, 'MONT (Montgomery St.) Station Usage 1\/9\/2019')\nshow_station('EMBR', df_day, 'EMBR (Embarcadero) Station Usage 1\/9\/2019')\nshow_station('RICH', df_day, 'RICH (Richmond) Station Usage 1\/9\/2019')\nshow_station('DUBL', df_day, 'DUBL (Dublin\/Pleasanton) Station Usage 1\/9\/2019')","5599dd0c":"def category_score(station_name, df_day):\n    df_o = df_day[df_day[\"Origin Station\"] == station_name].groupby(['Hour']).sum().reset_index()\n    df_d = df_day[df_day[\"Destination Station\"] == station_name].groupby(['Hour']).sum().reset_index()\n    if len(df_d) == 0 or len(df_o) == 0:\n        return 0\n    else:\n        waah = np.average(df_d['Hour'],weights=df_d['Trip Count'])\n        wadh = np.average(df_o['Hour'],weights=df_o['Trip Count'])\n    return waah - wadh\n\ndef category_score_df(station_coords, df_day):\n    stations = list(station_coords.keys())\n    category_scores = []\n    x_coords = []\n    y_coords = []\n    for station in stations:\n        category_scores.append(category_score(station, df_day))\n        loc = station_coords[station]\n        x_coords.append(loc[0])\n        y_coords.append(loc[1])\n    df = pd.DataFrame.from_dict({'station':stations, 'category_score':category_scores, 'x_coord':x_coords, 'y_coord':y_coords})\n    df = df.loc[df['category_score'] != 0]\n    df['category_score'] = df['category_score'] * (1\/df['category_score'].abs().max())\n    return df\n    \ndf_cat = category_score_df(station_coords, df_day)\n\ninit_notebook_mode()\nfig = px.scatter(df_cat, \n                 x='x_coord',\n                 y='y_coord',  \n                 hover_name = 'station',\n                 color = 'category_score',\n                 range_x=(0,2050), \n                 range_y=(2050,0), \n                 width=700, \n                 height=700,\n                 labels = {'origin_x':'', 'origin_y':''})\nimage_filename = \"\/kaggle\/input\/bart-map-black-and-white\/BART System Map API BW.png\"\nplotly_logo = base64.b64encode(open(image_filename, 'rb').read())\nfig.update_layout(xaxis_showgrid=False, \n                    yaxis_showgrid=False,\n                    xaxis_showticklabels=False,\n                    yaxis_showticklabels=False,\n                    title= 'Station by Category Score 1\/9\/2019',\n                    images= [dict(\n                    source='data:image\/png;base64,{}'.format(plotly_logo.decode()),\n                    xref=\"paper\", yref=\"paper\",\n                    x=0, y=1,\n                    sizex=1, sizey=1,\n                    xanchor=\"left\",\n                    yanchor=\"top\",\n                    sizing=\"stretch\",\n                    layer=\"below\")])\niplot(fig)\n\nfig = px.bar(df_cat.sort_values(['category_score']), x='station', y='category_score', color='category_score', hover_name='station', title='Station by Category Score 1\/9\/2019')\nfig.show()\n","1f08d695":"show_station('OAKL', df_day, 'OAKL (Oakland International Airport) Station Usage 1\/9\/2019')","1481f43d":"df_fare = pd.read_csv('\/kaggle\/input\/bart-fares\/BART_fares.csv')\ndf_fare","ae0d39c1":"#import matplotlib.pyplot as plt \n#import mpld3 from mpld3 \n#import plugins \n#img = plt.imread(\"\/kaggle\/input\/bart-map\/BART System Map API.png\") \n#fig, ax = plt.subplots(figsize=(14,14)) ax.imshow(img) plt.grid('on')\n#plt.axis('off') plt.scatter([457], [834]) plugins.connect(fig, plugins.MousePosition(fontsize=14))\n#plt.show() mpld3.enable_notebook()","73da33aa":"Initial Observations:\n* There is a lot of data here. We'll have to be careful doing anything with the entire dataframe all at once. \n* Which line was taken might be able to be inferred from the data for some Origin\/Destination pairs, but generally unknowable. \n* We've got some work to do to match the acronyms to the station names (the xls file given has a mapping from two-digit station IDs to station names)","717b7a41":"# Data Inspection\nFor now, we'll just be looking at a single year (2019).","36ccb6bd":"Fare analysis to be continued...","76991f74":"From those four plots, we can see examples of two different \"categories\" of stations: nexus stations (stations that people commute TO) and home stations (stations that people commute FROM). It would be interesting to quanitfy each station from a scale of -1 to 1, -1 being the station is a pure nexus station and 1 being the station is a pure home station. Let's call this the category_score.\n\nHere's a basic way we can try to calculate category_score (comments or potential improvements are welcome!):\n\n> >\ncategory_score = Weighted Average Arrival Hour - Weighted Average Departure Hour\n>>\ncategory_score = category_score \/ absmax(category_score)\n","5d4d6557":"# Visualizations for a Single Day\nLet's start by taking a look at BART rides for a single day - January 9th, 2019, which was a non-holiday wednesday.","815b0296":"Doesn't it look like the city is breathing? Pretty cool.\n\nThis visualization also helps us see where people are going and when they are going there. Notice that Embarcadero, Montgomery, Powell, Civic Center, 19th Street, and 12th Street have very high arrivals in the morning and very high departures in the evening. ","25509d8f":"These plots are further evidence of the morning\/evening commute. Notice how the peak of the 'Most Common Destination' occurs in the morning (everyone travelling to the same downtown) and the peak of the 'Most Common Origin' occurs in the evening (everyone leaving said downtown).\n\nHere is an excellent article that examines the disparity between population density and BART stations: http:\/\/www.geocurrents.info\/place\/north-america\/northern-california\/the-mismatch-between-population-and-mass-transit-in-the-san-francisco-bay-area (Its from 2012, since then a few more stops have been added)\n\nLet's do some more digging for individual routes and stations.","2309f1aa":"We can see that most stations have a positive category score (stations people commute FROM) and only a few stations have a negative category score (stations people commute TO). Which stations are the most ambiguous? OAKL (Oakland International Airport) has the smallest absolute value category score (which makes sense since it supports traffic from arriving and departing flights).","f12f829d":"Observe that the four most utilized stations (Embarcadero, Montgomery St, Powell St, and Civic Center\/UN Plaza) are all right next to each other next to the Financial District of San Francisco. Between the two most utilized stations, passengers use Montgomery Street slightly more frequently than Embarcadero as their origin station and vice versa for their departure station. Why might this be? Perhaps there are better dining options around the Montgomery Station, so people go slightly out of their way on the way home? Or maybe there is some sort of price incentive which passengers respond to in the morning but not so much in the evening as they are more tired and just want to get home? I welcome discussion on this topic (especially if you live or have lived in San Francisco and have an educated hypothesis).\n\nLet's take a closer look at some stations."}}