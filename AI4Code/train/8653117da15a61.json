{"cell_type":{"b17efb56":"code","1cf2b2f8":"code","1ff039e2":"code","d70fa1d2":"code","448117aa":"code","25260e94":"code","ecd99f10":"code","479f0d04":"code","c98d0d52":"code","7811fcd2":"code","9da1c59b":"code","156437c7":"code","fbdf557a":"code","a1751844":"code","08280ea3":"code","26e4d800":"code","22ea67fc":"code","192076ca":"code","64c44b78":"code","a623f4e8":"code","5bd5b837":"code","9c65e900":"code","a2204999":"code","15013a9e":"code","5540511d":"code","6e0140b9":"code","3d9993c5":"code","ad6f83db":"code","ef4de9dc":"code","e4333e0f":"code","cb548659":"code","a70a7f4a":"code","1fa30d25":"code","244327ec":"code","5d089392":"code","3fb613bf":"code","b668b326":"code","f5c2e7cd":"code","c29374c8":"code","2e1f5a73":"code","99506a64":"code","43313838":"code","ce000524":"code","69ee6647":"code","1b24ca75":"code","8705109d":"code","bc3d5949":"code","e7d84481":"code","0754a5d2":"code","c6c8da12":"code","a2cb2d9a":"code","9637d6b2":"code","89e83c62":"code","13b00359":"code","f9ba4697":"markdown","afbadbbe":"markdown","3608862c":"markdown","5c602df3":"markdown","011096f7":"markdown"},"source":{"b17efb56":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1cf2b2f8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1ff039e2":"data = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/train.csv')\nstore= pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')\ntest= pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/test.csv')","d70fa1d2":"print(data.shape)\nprint(store.shape)","448117aa":"data.head()","25260e94":"store.head()","ecd99f10":"data.info()\n# data.dtypes","479f0d04":"data.describe(include='object')","c98d0d52":"data.describe()[['Sales','Customers']]","7811fcd2":"data.describe()[['Sales','Customers']].loc['mean']","9da1c59b":"data.describe()[['Sales','Customers']].loc['min']","156437c7":"data.describe()[['Sales','Customers']].loc['max']","fbdf557a":"data.Store.nunique()","a1751844":"data.head()\ndata.Store.value_counts().head(50).plot.bar()","08280ea3":"data.Store.value_counts().tail(50).plot.bar()","26e4d800":"data.Store.value_counts()","22ea67fc":"data.DayOfWeek.value_counts()","192076ca":"data.Open.value_counts()","64c44b78":"data.Promo.value_counts()","a623f4e8":"data['Date']=pd.to_datetime(data['Date'],format='%Y-%m-%d')\nstore_id= data.Store.unique()[0]\nprint(store_id)\nstore_rows=data[data['Store']==store_id]\nprint(store_rows.shape)\n# store_rows.resample('1D',on='Date')['Sales'].sum().plot.line(figsize=(14,4))","5bd5b837":"# store_rows[store_rows['Sales']==0]","9c65e900":"test['Date']=pd.to_datetime(test['Date'],format='%Y-%m-%d')\nstore_test_rows = test[test['Store']==store_id]\nstore_test_rows['Date'].min(),store_test_rows['Date'].max()","a2204999":"store_rows['Sales'].plot.hist()\n# it is slightly skewed.","15013a9e":"data['Sales'].plot.hist()\n# it is slightly skewed.","5540511d":"store.head()","6e0140b9":"# store.isna.sum()","3d9993c5":"store_id=store[store['Store']==1].T","ad6f83db":"store[~store['Promo2SinceYear'].isna()].iloc[0]","ef4de9dc":"# Method1\nstore = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')\nstore['Promo2SinceWeek']= store['Promo2SinceWeek'].fillna(0)\nstore['Promo2SinceYear']= store['Promo2SinceYear'].fillna(store['Promo2SinceYear'].mode().iloc[0])\nstore['PromoInterval']= store['PromoInterval'].fillna(store['PromoInterval'].mode().iloc[0]) \n\nstore['CompetitionDistance']=store['CompetitionDistance'].fillna(store['CompetitionDistance'].max())\nstore['CompetitionOpenSinceMonth']= store['CompetitionOpenSinceMonth'].fillna(store['CompetitionOpenSinceMonth'].mode().iloc[0])\nstore['CompetitionOpenSinceYear']= store['CompetitionOpenSinceYear'].fillna(store['CompetitionOpenSinceYear'].mode().iloc[0])\nstore.isna().sum()\n      ","e4333e0f":"data_merged = data.merge(store, on='Store',how='left')\nprint(data.shape)\nprint(data_merged.shape)\nprint(data_merged.isna().sum().sum()) #to cross check if there are any missing values","cb548659":"# encoding\n# 3 categorical column,1 date column, rest are numerical\n# data_merged.dtypes\ndata_merged['day']=data_merged['Date'].dt.day\ndata_merged['month']=data_merged['Date'].dt.month\ndata_merged['year']=data_merged['Date'].dt.year\n#data_merged['dayofweek']=data_merged['Date'].dt.strftime('%a')\n","a70a7f4a":"# Decision tress - label encoding should be used.\n# regression - one hot encoding must be used.","1fa30d25":"# data_merged.dtypes\n# StateHoliday,StoreType,Assortment,PromoInterval\ndata_merged['StateHoliday'].unique()\n# for creating dummy variables - label encoding is used\ndata_merged['StateHoliday']=data_merged['StateHoliday'].map({'0':0,0:0,'a':1,'b':2,'c':3})\ndata_merged['StateHoliday']=data_merged['StateHoliday'].astype(int)\ndata_merged","244327ec":"# encoding assorted\ndata_merged['Assortment']\n# for creating dummy variables - label encoding is used\ndata_merged['Assortment']=data_merged['Assortment'].map({'a':1,'b':2,'c':3})\ndata_merged['Assortment']=data_merged['Assortment'].astype(int)\ndata_merged","5d089392":"data_merged['StoreType'].unique()\ndata_merged['StoreType']=data_merged['StoreType'].map({'a':1,'b':2,'c':3,'d':4})\ndata_merged['StoreType']=data_merged['StoreType'].astype(int)\ndata_merged","3fb613bf":"data_merged['PromoInterval'].unique()\nmap_promo = {'Jan,Apr,Jul,Oct':1,'Feb,May,Aug,Nov':2,'Mar,Jun,Sept,Dec':3}\ndata_merged['PromoInterval']=data_merged['PromoInterval'].map(map_promo)\ndata_merged","b668b326":"# Train and validate Split\nfeatures= data_merged.columns.drop(['Sales','Customers','Date'])\nfrom sklearn.model_selection import train_test_split\ntrain_x,validate_x,train_y,validate_y = train_test_split(data_merged[features],np.log(data_merged['Sales']+1),test_size=0.2,random_state=1)\ntrain_x.shape,validate_x.shape,train_y.shape,validate_y.shape","f5c2e7cd":"# from sklearn.tree import DecisionTreeRegressor\n\n# model_dt = DecisionTreeRegressor(max_depth=20,random_state=1).fit(train_x,train_y)\n# validate_y_pred = model_dt.predict(validate_x)\n\nfrom sklearn.tree import DecisionTreeRegressor\nmodel_dt=DecisionTreeRegressor(max_depth=10,random_state=1).fit(train_x,train_y)\nvalidate_y_pred=model_dt.predict(validate_x)","c29374c8":"# !pip install pydotplus","2e1f5a73":"# def draw_tree(model, columns):\n#     import pydotplus\n#     from sklearn.externals.six import StringIO\n#     from IPython.display import Image\n#     import os\n#     from sklearn import tree\n    \n#     graphviz_path = 'C:\\Program Files (x86)\\Graphviz2.38\/bin\/'\n#     os.environ[\"PATH\"] += os.pathsep + graphviz_path\n\n#     dot_data = StringIO()\n#     tree.export_graphviz(model,\n#                          out_file=dot_data,\n#                          feature_names=columns)\n#     graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \n#     return Image(graph.create_png())","99506a64":"#draw_tree(model_dt,features)","43313838":"validate_y_pred = model_dt.predict(validate_x)\nfrom sklearn.metrics import mean_squared_error\nvalidate_y_inv = np.exp(validate_y) - 1\nvalidate_y_pred_inv = np.exp(validate_y_pred) - 1\nrmse_val=np.sqrt(mean_squared_error(validate_y_inv , validate_y_pred_inv))\n\ndef ToWeight(y):\n    w = np.zeros(y.shape, dtype=float)\n    ind = y != 0\n    w[ind] = 1.\/(y[ind]**2)\n    return w\n\ndef rmspe(y, yhat):\n    w = ToWeight(y)\n    rmspe = np.sqrt(np.mean( w * (y - yhat)**2 ))\n    return rmspe\n\nvalidate_y_inv = np.exp(validate_y) - 1\nvalidate_y_pred_inv = np.exp(validate_y_pred) - 1\nrmse_val=np.sqrt(mean_squared_error(validate_y_inv , validate_y_pred_inv))\nrmspe_val=rmspe(validate_y_inv , validate_y_pred_inv)\nprint(rmse_val,rmspe_val)","ce000524":"# submitting the train on test data set","69ee6647":"model_dt.feature_importances_","1b24ca75":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,5))\nplt.barh(features,model_dt.feature_importances_)\npd.Series(model_dt.feature_importances_,index=features)","8705109d":"#Hyperparameter tuning\nfrom sklearn.model_selection import GridSearchCV\n\nparameters={'max_depth':list(range(5,20))}\nbase_model=DecisionTreeRegressor()\ncv_model=GridSearchCV(base_model,param_grid=parameters,cv=5,return_train_score=True).fit(train_x,train_y)\nparameters","bc3d5949":"cv_model.best_params_","e7d84481":"stores_avg_cust = data.groupby(['Store'])[['Customers']].mean().reset_index().astype(int)\ntest_1 = test.merge(stores_avg_cust,on='Store',how='left')\ntest.shape,test_1.shape\ntest_merged = test_1.merge(store,on='Store',how='inner')\ntest_merged['Open']=test_merged['Open'].fillna(1)\ntest_merged['Date']=pd.to_datetime(test_merged[\"Date\"],format='%Y-%m-%d')\ntest_merged['day']=test_merged['Date'].dt.day\ntest_merged['month']=test_merged['Date'].dt.month\ntest_merged['year']=test_merged['Date'].dt.year\ntest_merged['StateHoliday']=test_merged['StateHoliday'].map({'0':0,'a':1})\ntest_merged['StateHoliday']=test_merged['StateHoliday'].astype(int)\ntest_merged['Assortment']=test_merged['Assortment'].map({'a':1,'b':2,'c':3})\ntest_merged['Assortment']=test_merged['Assortment'].astype(int)\ntest_merged['StoreType']=test_merged['StoreType'].map({'a':1,'b':2,'c':3,'d':4})\ntest_merged['StoreType']=test_merged['StoreType'].astype(int)\nmap_promo = {'Jan,Apr,Jul,Oct':1,'Feb,May,Aug,Nov':2,'Mar,Jun,Sept,Dec':3}\ntest_merged['PromoInterval']=test_merged['PromoInterval'].map(map_promo)\n","0754a5d2":"df_cv_results=pd.DataFrame(cv_model.cv_results_).sort_values(by='mean_test_score',ascending=False)[['param_max_depth','mean_test_score','mean_train_score']]\nimport matplotlib.pyplot as plt\ndf_cv_results.set_index('param_max_depth')['mean_test_score'].plot.line()\ndf_cv_results.set_index('param_max_depth')['mean_train_score'].plot.line()","c6c8da12":"df_cv_results[df_cv_results['param_max_depth']==11].T","a2cb2d9a":"test_merged","9637d6b2":"test_pred = model_dt.predict(test_merged[features])\ntest_pred_inv = np.exp(test_pred) - 1","89e83c62":"submission = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/sample_submission.csv')\nsubmission_predicted = pd.DataFrame({'Id':test['Id'],'Sales':test_pred_inv})\nsubmission_predicted.to_csv('submission.csv',index=False)\nsubmission_predicted.head()","13b00359":"def get_rmspe_score(model,input_values,y_actual):\n    y_predicted=model.predict(input_values)\n    y_actual=np.exp(y_actual)-1\n    y_predicted=np.exp(y_predicted)-1\n    score=rmspe(y_actual,y_predicted)\n    return score\n\nparameters={'max_depth':list(range(5,8))}\nbase_model=DecisionTreeRegressor()\ncv_model=GridSearchCV(base_model,param_grid=parameters,cv=5,return_train_score=True,scoring=get_rmspe_score).fit(train_x,train_y)\npd.DataFrame(cv_model.cv_results_)[['params','mean_test_score','mean_train_score']]","f9ba4697":"****Store - It is categorical column hence min and max must not be done. we do value counts to check if every category has same amount of data********","afbadbbe":"# steps done in the current ml data\n\n* summary stats\n* understand your data\n* data preprocessing\n --missing value imputation\n --transformation\n --scaling\n --encoding\n* model fitting'\n* model summary\n* Prediction\n* Evaluation","3608862c":"store_test_rows","5c602df3":"****Granularity - One big brand has various number of branches and each rows is the data of that branch day wise****","011096f7":"****Granularity - Here it is the metadata of the branches with respect to promotional events events conducted overall****"}}