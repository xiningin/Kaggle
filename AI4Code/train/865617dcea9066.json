{"cell_type":{"02bf665a":"code","f70fd18a":"code","95d7d53a":"code","1d5f4500":"code","f28b1fb7":"code","58141e51":"code","d55873d0":"code","2025d102":"code","d94a3da6":"code","5294e94b":"code","67952cd6":"code","09522df3":"code","396c129c":"code","152ce4cc":"code","4cb60ced":"code","19f59c44":"code","23f15387":"code","68437934":"code","97e343a3":"code","20c5b1ea":"code","22e9b7ff":"code","ed7240c8":"code","d8b5bc40":"code","a9052632":"code","3b2753e7":"code","138c560b":"code","cb5e4a7b":"code","1368598d":"code","0a858d9d":"code","b291e8d0":"code","431b9bb3":"code","f5a1bea4":"code","0d3bcdb6":"code","ba8d03a1":"code","478e0071":"code","b6292a7e":"code","b6099142":"code","9e862e18":"markdown"},"source":{"02bf665a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f70fd18a":"import pandas as pd\ntest = pd.read_csv(\"..\/input\/santander-customer-transaction-prediction-dataset\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/santander-customer-transaction-prediction-dataset\/train.csv\")","95d7d53a":"test.head()","1d5f4500":"train.head()","f28b1fb7":"train.info()","58141e51":"test.info()","d55873d0":"train.isna().sum()","2025d102":"test.isna().sum()","d94a3da6":"train.describe()","5294e94b":"test.describe()","67952cd6":"test.ID_code.value_counts()","09522df3":"train.shape,test.shape","396c129c":"import seaborn as sns\nimport matplotlib. pyplot as plt","152ce4cc":"sns.countplot(train.target)","4cb60ced":"sns.distplot(train.mean(axis=1),color=\"green\", label='train')\nsns.distplot(test.mean(axis=1),color=\"blue\",label='test')","19f59c44":"q=train.corr()\nplt.figure(figsize=(15,12))\nsns.heatmap(q)","23f15387":"test.corr()","68437934":"import numpy as np\nimport matplotlib.pylab as plt\nimport plotly\nimport plotly.graph_objs as go\nplotly.offline.init_notebook_mode(connected=True)","97e343a3":"X_COL = \"var_81\"\nY_COL = \"var_68\"\nZ_COL = \"var_108\"\nHUE_COL = \"target\"\nN_SAMPLES = 10000\ndf = train.sample(N_SAMPLES)","20c5b1ea":"# The 3D scatter plot \ntrace = go.Scatter3d(\n    x=df[X_COL],\n    y=df[Y_COL],\n    z=df[Z_COL],\n    mode='markers',\n    marker=dict(\n        size=12,\n        color=df[HUE_COL],            \n        opacity=0.5,\n        showscale=True,\n        colorscale=[[0.0, 'black'], [1.0, 'blue']]\n        \n    ),\n)\n\n\nlayout = go.Layout(\n    width=600,\n    height=600,\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0\n    ),\n    scene = dict(    \n        xaxis = dict(\n            title=X_COL),\n        yaxis = dict(\n            title=Y_COL),\n        zaxis = dict(\n            title=Z_COL),\n    ),\n)\nfig = go.Figure(data=[trace], layout=layout)","22e9b7ff":"plotly.offline.iplot(fig)","ed7240c8":"from sklearn.model_selection import train_test_split","d8b5bc40":"from sklearn.linear_model import LogisticRegression\nfrom imblearn import over_sampling\nfrom imblearn.over_sampling import SMOTE","a9052632":"X = train.drop(['target', 'ID_code'],1)\ny = train['target']\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 0)\nY_test = test.drop(columns = ['ID_code'])","3b2753e7":"print('X_train shape is :', X_train.shape, '\\ny_train shape is ',y_train.shape)","138c560b":"sm = SMOTE(random_state=42)\nX_train_res, y_train_res = sm.fit_sample(X_train, y_train.ravel())","cb5e4a7b":"X_train_res, X_test_res, y_train_res, y_test_res = train_test_split(X_train_res, y_train_res, test_size = 0.2, random_state = 123, stratify = y_train_res)","1368598d":"reg=LogisticRegression()\nreg.fit(X_train_res, y_train_res)","0a858d9d":"logist_pred = reg.predict_proba(X_test)[:,1]","b291e8d0":"logist_pred_test = reg.predict_proba(Y_test)[:,1]\nsubmit = test[['ID_code']]\nsubmit['target'] = logist_pred_test\nsubmit.head()","431b9bb3":"submit.to_csv('logreg_baseline.csv', index = False)","f5a1bea4":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report","0d3bcdb6":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report","ba8d03a1":"gaus = GaussianNB()\ngaus.fit(X_train,y_train)","478e0071":"gaus.fit(X_train,y_train)","b6292a7e":"nb_pred_test = gaus.predict_proba(Y_test)[:,1]\nsubmit = test[['ID_code']]\nsubmit['target'] = nb_pred_test\nsubmit.head()","b6099142":"submit.to_csv('NaiveBayes.csv', index = False)","9e862e18":"Naive Bayes"}}