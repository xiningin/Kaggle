{"cell_type":{"b184452d":"code","51d90624":"code","b6a7a19e":"code","e24340d2":"code","ba066c78":"code","ad101725":"code","53158f97":"code","c2b4e70d":"code","f1321c25":"code","392c0814":"code","116ec393":"code","b890bdfe":"code","ce672e9f":"code","5f8b45fe":"code","6751c300":"code","f4093bcc":"code","27129a22":"code","39846573":"code","a84bb6e2":"code","62869fa5":"code","69e0764d":"code","17bc7118":"code","d862d6ca":"code","f036ad20":"code","82b49f3c":"code","a9c7de99":"code","41297b32":"code","e6c68c26":"code","42f7b74d":"code","d326fb96":"code","daf14131":"markdown","85196e67":"markdown","44f1e7f0":"markdown"},"source":{"b184452d":"from sklearn import datasets\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n","51d90624":"np.random.seed(0)\n\nX, y = datasets.make_circles(n_samples=1000, factor=.3, noise=0.15)","b6a7a19e":"plt.figure()\nplt.subplots(1,1,figsize=(5,5))\n# plt.subplot(1,2,3, projection='polar')\nplt.title(\"Original Data\")\nreds = y == 0\nblues = y == 1\n\nplt.scatter(X[reds, 0], X[reds, 1], c=\"red\",\n            s=20, edgecolor='k')\nplt.scatter(X[blues, 0], X[blues, 1], c=\"blue\",\n            s=20, edgecolor='k')\nplt.xlabel(\"$x_1$\")\nplt.ylabel(\"$x_2$\")","e24340d2":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.3, random_state=1, stratify=y)","ba066c78":"k = np.bincount(y)\nm = np.bincount(y_test)\nn = np.bincount(y_train)\nfig = plt.figure()\nax1 = fig.add_axes([0, 0, .5, .5], aspect=1)\nax1.pie(m,labels=m)\nax2 = fig.add_axes([.5, .0, .5, .5], aspect=1)\nax2.pie(n,labels=n)\nax3 = fig.add_axes([1, .0, .5, .5], aspect=1)\nax3.pie(k,labels=k)\n\nax1.set_title('y_test')\nax2.set_title('y_train')\nax3.set_title('y')\nplt.show()\npass","ad101725":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nsc.fit(X_train)\nX_train_scale = sc.transform(X_train)\nX_test_scale= sc.transform(X_test)","53158f97":"from sklearn.linear_model import Perceptron\n\nppn = Perceptron(eta0=0.1, random_state=1)\nppn.fit(X_train_scale, y_train)","c2b4e70d":"y_pred = ppn.predict(X_test_scale)\nprint('Misclassified examples: %d' % (y_test != y_pred).sum())","f1321c25":"from sklearn.metrics import accuracy_score\n\nprint('Prediction Accuracy: %.3f' % accuracy_score(y_test, y_pred))","392c0814":"print('Training Accuracy: %.3f' % ppn.score(X_train_scale, y_train))","116ec393":"print('Test Accuracy: %.3f' % ppn.score(X_test_scale, y_test))","b890bdfe":"from mlxtend.plotting import plot_decision_regions\n","ce672e9f":"plot_decision_regions(X, y, clf=ppn, legend=2)","5f8b45fe":"from sklearn.svm import SVC\n\nsvm = SVC(kernel='rbf',C=1 , gamma=100)\nsvm.fit(X_train_scale, y_train)","6751c300":"svc_y_pred = svm.predict(X_test_scale)\nprint('False Negative: %d' % (y_test != svc_y_pred).sum())","f4093bcc":"print('Prediction Accuracy SVC: %.3f' % accuracy_score(y_test, svc_y_pred))","27129a22":"print('Training Accuracy: %.3f' % svm.score(X_train_scale, y_train))","39846573":"print('Test Accuracy: %.3f' % svm.score(X_test_scale, y_test))","a84bb6e2":"from sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_test, svc_y_pred)\nprint(cm)","62869fa5":"plot_decision_regions(X, y, clf=svm, legend=2)","69e0764d":"fig = plt.figure(figsize=(10,8))\nax1 = fig.add_axes([0, 0, .5, .5], aspect=1)\nplot_decision_regions(X_test_scale, y_test, clf=ppn, legend=2)\nax2 = fig.add_axes([.5, .0, .5, .5], aspect=1)\nplot_decision_regions(X_test_scale, y_test, clf=svm, legend=2)\n\n\nax1.set_title('Perceptron')\nax2.set_title('SVC-RBF')\n\nplt.show()\npass","17bc7118":"from sklearn.neural_network import MLPClassifier\n\nclf_mlp = MLPClassifier(solver='lbfgs', alpha=1e-5,\n                   hidden_layer_sizes=(5, 2), random_state=1)\n\nclf_mlp.fit(X_train_scale, y_train)","d862d6ca":"mlf_y_pred = clf_mlp.predict(X_test_scale)\nprint('False Negative: %d' % (y_test != mlf_y_pred).sum())","f036ad20":"print('Prediction Accuracy SVC: %.3f' % accuracy_score(y_test, mlf_y_pred))","82b49f3c":"plot_decision_regions(X_test_scale, y_test, clf=clf_mlp, legend=2)","a9c7de99":"[coef.shape for coef in clf_mlp.coefs_]","41297b32":"clf_mlp.predict_proba(X_test_scale)","e6c68c26":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB \nfrom sklearn.ensemble import RandomForestClassifier\nimport matplotlib.gridspec as gridspec\nimport itertools","42f7b74d":"clf_pct = Perceptron()\nclf_rfc = RandomForestClassifier(random_state=1, n_estimators=100)\nclf_nb = GaussianNB()\nclf_svc = SVC(gamma=100)","d326fb96":"gs = gridspec.GridSpec(2, 2)\nfig = plt.figure(figsize=(10,8))\n\nlabels = ['Perceptron', 'Random Forest', 'Naive Bayes', 'SVM']\nfor clf, lab, grd in zip([clf_pct, clf_rfc, clf_nb, clf_svc],\n                         labels,\n                         itertools.product([0, 1], repeat=2)):\n\n    clf.fit(X, y)\n    ax = plt.subplot(gs[grd[0], grd[1]])\n    fig = plot_decision_regions(X=X, y=y, clf=clf, legend=2)\n    plt.title(lab)\n   \n\nplt.show()","daf14131":"## Multiple Models","85196e67":"## Multi-layer Perceptron","44f1e7f0":"## SVM RBF kernal"}}