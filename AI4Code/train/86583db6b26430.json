{"cell_type":{"cde8607c":"code","4ed46280":"code","32e8a525":"code","d7956744":"code","8949a9dc":"code","08c9a7da":"code","fdec8d17":"code","e7a7eba3":"code","fdb65923":"code","9c38b8f6":"code","a4a0cb08":"code","cb74ca62":"code","3c222a43":"code","059e6cba":"code","5de62432":"code","6ae16b8c":"code","e0d91e08":"code","9085b5be":"code","dbee138e":"code","efdc24b4":"code","ede47a4c":"code","ded71a5e":"code","84bbb923":"code","62d60d50":"code","2da21786":"code","0930f7c2":"code","3c3249d0":"code","e7db946e":"markdown","44fd8f47":"markdown"},"source":{"cde8607c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4ed46280":"from xgboost import XGBClassifier\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nwarnings.filterwarnings('ignore')","32e8a525":"data = pd.read_csv(r'\/kaggle\/input\/fetal-health-classification\/fetal_health.csv')\n\nplt.style.use('ggplot')\n\nsns.set_style('darkgrid')","d7956744":"data.info()","8949a9dc":"data.isna().sum()","08c9a7da":"data.duplicated().sum()","fdec8d17":"data.drop_duplicates(inplace=True)","e7a7eba3":"data.shape","fdb65923":"!pip install pingouin","9c38b8f6":"import pingouin as pg","a4a0cb08":"pair_corr = pg.pairwise_corr(data, method='spearman').loc[:, ['X', 'Y', 'r', 'p-unc']]\n\npair_corr = pair_corr[pair_corr['Y'] == 'fetal_health']\n\npair_corr.sort_values(by=['p-unc'])","cb74ca62":"sns.countplot(data['fetal_health'])\nplt.show()\n# unbalanced classes","3c222a43":"from imblearn.over_sampling import SMOTE","059e6cba":"frame = [data.iloc[:300, :], data.iloc[500:1800,:]]\n\ntrain_data = pd.concat(frame, axis=0)\n\ntrain_data.shape, data.shape","5de62432":"X_train = train_data.iloc[:,:-1]\ny_train = train_data['fetal_health']\n\nX_val = data.iloc[1800:,:-1]\ny_val = data.iloc[1800:, -1]\n\nX_test = data.iloc[300:500,:-1]\ny_test = data['fetal_health'][300:500]","6ae16b8c":"X_train.shape[0] + X_test.shape[0] + X_val.shape[0], data.shape[0]","e0d91e08":"smote = SMOTE(sampling_strategy='not majority', k_neighbors=3).fit(X_train, y_train)","9085b5be":"# over sampling validation and train data\n\nval_X, val_y = smote.fit_resample(X_val, y_val)\n\ntrain_X, train_y = smote.fit_resample(X_train, y_train)\n\ntrain_X = pd.DataFrame(train_X)\ntrain_X.columns = X_train.columns\n\ntrain_y = pd.DataFrame(train_y)\ntrain_y.columns = ['target']","dbee138e":"model = XGBClassifier(booster='gbtree', colsample_bylevel=0.6,\n              colsample_bynode=0.7, colsample_bytree=1, gamma=0.3, gpu_id=-1,\n              importance_type='gain',\n              learning_rate=0.06, max_delta_step=0.9, max_depth=7,\n              min_child_weight=0.8,\n              n_estimators=300, n_jobs=4, num_class=3, num_parallel_tree=1, objetive='multi:softmax',\n              reg_alpha=0, reg_lambda=0.1, scale_pos_weight=None,\n              subsample=0.8, tree_method='approx',\n              verbosity=0, grow_policy='lossguide', feature_selector='greedy')\n\nmodel.fit(train_X, train_y, early_stopping_rounds=10, eval_metric='merror', eval_set=[(val_X, val_y)])","efdc24b4":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score","ede47a4c":"def report(test_Y, pred_Y):\n    \n    model_cm = confusion_matrix(test_Y, pred_Y)\n    print('\\t\\t\\tReport\\n')\n    print(classification_report(test_Y, pred_Y))\n    print('\\t\\t\\tAccuracy\\n')\n    print(accuracy_score(test_Y, pred_Y))\n    print('\\t\\t\\tHeatmap\\n')\n    sns.heatmap(model_cm, annot=True, cmap='Blues')","ded71a5e":"pred = model.predict(X_test)","84bbb923":"# report test\nreport(y_test, pred)","62d60d50":"# report val without over sampling\n\npred_val = model.predict(X_val)\n\nreport(y_val, pred_val)","2da21786":"# report val with over sampling\npred_val = model.predict(val_X)\n\nreport(val_y, pred_val)","0930f7c2":"# report train without over sampling\npred_train = model.predict(X_train)\n\nreport(y_train, pred_train)","3c3249d0":"# report train with over sampling\npred_train = model.predict(train_X)\n\nreport(train_y, pred_train)","e7db946e":"*recall for class 3 -> 'Pathological'; since it is better to classify a patient as pathological even if it is not a case, so that future diagnoses deny the classification.\nIn this way we would be preventing several cases of maternal and infant mortality.*","44fd8f47":"**REPORT BONUS REPORT OF THE FOLLOWING DATA**"}}