{"cell_type":{"5b3347a6":"code","1d69fb67":"code","4d2fd1ab":"code","7d27e374":"code","74793175":"code","f91d6535":"code","f6361fc3":"code","82632de6":"code","e17a1423":"code","7418cd36":"code","d27a24a8":"code","7dd6884f":"code","7071be86":"code","16688f3a":"code","7133170d":"code","382fdee4":"code","2a88778a":"code","c095e74c":"code","1bbb462c":"code","813d0f47":"code","91149da3":"code","bc380751":"code","855232d3":"code","a7ad7acb":"code","97be8529":"code","7bccede9":"code","e1db530b":"code","bd240996":"code","ceed323e":"code","8e79eb2b":"code","e8cf3431":"code","1903bcc9":"code","d6cdc468":"code","6fd42e0b":"code","8a13c479":"code","4131eead":"code","c603afae":"code","bd7356ee":"code","3aa06791":"code","880f209b":"code","73c5765e":"code","5923de3a":"code","1d549bdb":"code","3cfdd6aa":"code","5b5113ac":"code","87416146":"code","0c6dbae3":"code","ca26a8cc":"code","6eeeb0e2":"code","a02560ee":"code","32cfc801":"markdown","0f01348e":"markdown","d0603694":"markdown","f6a952d9":"markdown","ae70dcd0":"markdown","039e7b7f":"markdown","9df54a96":"markdown","2d2d3b33":"markdown","6e8580e9":"markdown","4fe21a85":"markdown","dc944ff6":"markdown","dfb1f038":"markdown","3c0ec6ec":"markdown","8a1a0568":"markdown","333ea512":"markdown"},"source":{"5b3347a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1d69fb67":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import date, datetime, timedelta\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\npd.set_option('display.max_columns', 10)\npd.set_option('display.max_rows', 10)\nnp.set_printoptions(precision=6, suppress=True)","4d2fd1ab":"train_df = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv\")\ndf_C = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\ndf_R = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv\")\ndf_D = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\")\n\nregion_metadata_df = pd.read_csv(\"\/kaggle\/input\/covid19-forecasting-metadata\/region_metadata.csv\")\nregion_date_metadata_df = pd.read_csv(\"\/kaggle\/input\/covid19-forecasting-metadata\/region_date_metadata.csv\")\n\ndf_covid19 = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\")\ndf_table = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_time.csv\",parse_dates=['Last_Update'])\n\n# Retriving Dataset\ndf_confirmed = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndf_deaths = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')","7d27e374":"df_C_2=df_C.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_C_global_sum=df_C_2.sum()\ndf_D_2=df_D.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_D_global_sum=df_D_2.sum()\ndf_R_2=df_R.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_R_global_sum=df_R_2.sum()\ndf_A_global_sum=df_C_global_sum-df_D_global_sum-df_R_global_sum\ndates=df_C_2.keys()\ndates \nsince_date_1_22 = np.array([ a for a in range(len(dates))])\nsince_date_1_22","74793175":"df_R_global_sum","f91d6535":"df_C_2","f6361fc3":"plt.figure(figsize=(12,8))\nplt.title(\"Global Confirmed case spread over time\",fontsize=24)\nplt.xlabel(\"Since date 1\/22\",fontsize=24)\nplt.ylabel('# of global Confirmed Case', fontsize=24)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.plot(since_date_1_22,df_C_global_sum)\nplt.plot(since_date_1_22,df_D_global_sum)\nplt.plot(since_date_1_22,df_R_global_sum)\nplt.plot(since_date_1_22,df_A_global_sum)\nplt.legend(['Confirmed','Deaths','Recover', 'Active'], prop={'size':23})\nplt.show()","82632de6":"df_world_meter = pd.read_csv(\"\/kaggle\/input\/worldmeters-corona-dataset\/worldmeters_corona_dataset.csv\", encoding= 'unicode_escape')\ndf_world_meter.fillna(0, inplace=True)\n","e17a1423":"df_world_meter.keys()","7418cd36":"\ndf_world_meter['test_per_m']","d27a24a8":"df_world_meter.test_per_m=pd.to_numeric(df_world_meter['test_per_m'].str.replace(',','')).fillna(0).astype(np.int64)\n","7dd6884f":"df_C.loc[df_C['Country\/Region'] == \"US\", \"Country\/Region\"] = \"USA\"\ndf_D.loc[df_D['Country\/Region'] == \"US\", \"Country\/Region\"] = \"USA\"\ndf_R.loc[df_R['Country\/Region'] == \"US\", \"Country\/Region\"] = \"USA\"\n\ndf_C.loc[df_C['Country\/Region'] == \"UK\", \"Country\/Region\"] = \"USA\"\ndf_D.loc[df_D['Country\/Region'] == \"UK\", \"Country\/Region\"] = \"USA\"\ndf_R.loc[df_R['Country\/Region'] == \"UK\", \"Country\/Region\"] = \"USA\"\n\ndf_C.loc[df_C['Country\/Region']  == 'Korea, South', \"Country\/Region\"] = 'South Korea'\ndf_D.loc[df_D['Country\/Region']  == 'Korea, South', \"Country\/Region\"] = 'South Korea'\ndf_R.loc[df_R['Country\/Region']  == 'Korea, South', \"Country\/Region\"] = 'South Korea'\n\ndf_C.loc[df_confirmed['Country\/Region'] == 'Taiwan*', \"Country\/Region\"] = 'Taiwan'\ndf_D.loc[df_D['Country\/Region'] == 'Taiwan*', \"Country\/Region\"] = 'Taiwan'\ndf_R.loc[df_R['Country\/Region']  == \"Taiwan*\", \"Country\/Region\"] = \"Taiwan\"\n\n\n\ndf_C.loc[df_C['Country\/Region'] =='Taiwan*', \"Country\/Region\"] = 'Taiwan'\ndf_D.loc[df_D['Country\/Region'] == 'Taiwan*', \"Country\/Region\"] = 'Taiwan'\ndf_R.loc[df_R['Country\/Region'] == \"Taiwan*\", \"Country\/Region\"] = \"Taiwan\"\n\ndf_C.loc[df_C['Country\/Region'] == 'Congo (Kinshasa)', \"Country\/Region\"] = 'Democratic Republic of the Congo'\ndf_D.loc[df_D['Country\/Region'] == 'Congo (Kinshasa)', \"Country\/Region\"] = 'Democratic Republic of the Congo'\ndf_R.loc[df_R['Country\/Region']  == \"Congo (Kinshasa)\", \"Country\/Region\"] = \"Democratic Republic of the Congo\"\n\n\ndf_C.loc[df_C['Country\/Region'] == \"Cote d'Ivoire\", \"Country\/Region\"] = \"C\u00f4te d'Ivoire\"\ndf_D.loc[df_D['Country\/Region'] == \"Cote d'Ivoire\", \"Country\/Region\"] = \"C\u00f4te d'Ivoire\"\ndf_R.loc[df_R['Country\/Region']  == \"Cote d'Ivoire\", \"Country\/Region\"] = \"C\u00f4te d'Ivoire\"\n\n\ndf_world_meter.loc[df_world_meter['Country'] == \"UK\", \"Country\"] = \"United Kingdom\"\n","7071be86":"df_world_meter['Country'].values","16688f3a":"high_test_list=df_world_meter.loc[df_world_meter['test_per_m']>20000 , 'Country']\nmidium_test_list=df_world_meter.loc[(df_world_meter['test_per_m']<20000) & (df_world_meter['test_per_m']>5000) , 'Country']\nlow_test_list=df_world_meter.loc[(df_world_meter['test_per_m']<5000) & (df_world_meter['test_per_m']>1500)  , 'Country']\nvlow_test_list=df_world_meter.loc[(df_world_meter['test_per_m']<1000) & (df_world_meter['test_per_m']>50)  , 'Country']","7133170d":"high_test_list.values","382fdee4":"midium_test_list.values","2a88778a":"low_test_list.values","c095e74c":"vlow_test_list.values","1bbb462c":"df_C_ht=df_C.loc[df_C['Country\/Region'].isin(high_test_list.values)].copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_C_global_sum_ht=df_C_ht.sum()\ndf_D_ht=df_D.loc[df_D['Country\/Region'].isin(high_test_list.values)].copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_D_global_sum_ht=df_D_ht.sum()\ndf_R_ht=df_R.loc[df_R['Country\/Region'].isin(high_test_list.values)].copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_R_global_sum_ht=df_R_ht.sum()\ndf_A_global_sum_ht=df_C_global_sum_ht-df_D_global_sum_ht-df_R_global_sum_ht","813d0f47":"df_C_mt=df_C.loc[df_C['Country\/Region'].isin(midium_test_list.values)].copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_C_global_sum_mt=df_C_mt.sum()\ndf_D_mt=df_D.loc[df_D['Country\/Region'].isin(midium_test_list.values)].copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_D_global_sum_mt=df_D_mt.sum()\ndf_R_mt=df_R.loc[df_R['Country\/Region'].isin(midium_test_list.values)].copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_R_global_sum_mt=df_R_mt.sum()\ndf_A_global_sum_mt=df_C_global_sum_mt-df_D_global_sum_mt-df_R_global_sum_mt","91149da3":"df_C_lt=df_C.loc[df_C['Country\/Region'].isin(low_test_list.values)].copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_C_global_sum_lt=df_C_lt.sum()\ndf_D_lt=df_D.loc[df_D['Country\/Region'].isin(low_test_list.values)].copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_D_global_sum_lt=df_D_lt.sum()\ndf_R_lt=df_R.loc[df_R['Country\/Region'].isin(low_test_list.values)].copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_R_global_sum_lt=df_R_lt.sum()\ndf_A_global_sum_lt=df_C_global_sum_lt-df_D_global_sum_lt-df_R_global_sum_lt","bc380751":"df_C_vlt=df_C.loc[df_C['Country\/Region'].isin(vlow_test_list.values)].copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_C_global_sum_vlt=df_C_vlt.sum()\ndf_D_vlt=df_D.loc[df_D['Country\/Region'].isin(vlow_test_list.values)].copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_D_global_sum_vlt=df_D_vlt.sum()\ndf_R_vlt=df_R.loc[df_R['Country\/Region'].isin(vlow_test_list.values)].copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_R_global_sum_vlt=df_R_vlt.sum()\ndf_A_global_sum_vlt=df_C_global_sum_vlt-df_D_global_sum_vlt-df_R_global_sum_vlt","855232d3":"df_C_global_sum_vlt","a7ad7acb":"df_A_global_sum_vlt","97be8529":"plt.figure(figsize=(12,8))\nplt.title(\"Global spread over time for high test rate Countries\",fontsize=24)\nplt.xlabel(\"Since date 1\/22\",fontsize=24)\nplt.ylabel('# of global Case', fontsize=24)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.plot(since_date_1_22,df_C_global_sum_ht)\nplt.plot(since_date_1_22,df_D_global_sum_ht)\nplt.plot(since_date_1_22,df_R_global_sum_ht)\nplt.plot(since_date_1_22,df_A_global_sum_ht)\nplt.legend(['Confirmed','Deaths','Recover', 'Active'], prop={'size':23})\nplt.show()\n\nplt.figure(figsize=(12,8))\nplt.title(\"Global spread over time for midium test rate Countries\",fontsize=24)\nplt.xlabel(\"Since date 1\/22\",fontsize=24)\nplt.ylabel('# of global Case', fontsize=24)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.plot(since_date_1_22,df_C_global_sum_mt)\nplt.plot(since_date_1_22,df_D_global_sum_mt)\nplt.plot(since_date_1_22,df_R_global_sum_mt)\nplt.plot(since_date_1_22,df_A_global_sum_mt)\nplt.legend(['Confirmed','Deaths','Recover', 'Active'], prop={'size':23})\nplt.show()\n\nplt.figure(figsize=(12,8))\nplt.title(\"Global spread over time for low test rate Countries\",fontsize=24)\nplt.xlabel(\"Since date 1\/22\",fontsize=24)\nplt.ylabel('# of global Case', fontsize=24)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.plot(since_date_1_22,df_C_global_sum_lt)\nplt.plot(since_date_1_22,df_D_global_sum_lt)\nplt.plot(since_date_1_22,df_R_global_sum_lt)\nplt.plot(since_date_1_22,df_A_global_sum_lt)\nplt.legend(['Confirmed','Deaths','Recover', 'Active'], prop={'size':23})\nplt.show()\n\n","7bccede9":"plt.figure(figsize=(12,8))\nplt.title(\"Global spread over time for very low test rate Countries\",fontsize=24)\nplt.xlabel(\"Since date 1\/22\",fontsize=24)\nplt.ylabel('# of global Case', fontsize=24)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.plot(since_date_1_22,df_C_global_sum_vlt)\nplt.plot(since_date_1_22,df_D_global_sum_vlt)\nplt.plot(since_date_1_22,df_R_global_sum_vlt)\nplt.plot(since_date_1_22,df_A_global_sum_vlt)\nplt.legend(['Confirmed','Deaths','Recover', 'Active'], prop={'size':23})\nplt.show()","e1db530b":"\ndf_c = df_C[df_C['Country\/Region']=='Italy']\ndf_c = df_c.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\n#df_C_global_sum_mt=df_C_mt.sum()\ndf_c=df_c.transpose()\n\ndf_d = df_D[df_D['Country\/Region']=='Italy']\ndf_d = df_d.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_d=df_d.transpose()\n\ndf_r = df_R[df_R['Country\/Region']=='Italy']\ndf_r = df_r.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_r.index+=6\ndf_r=df_r.transpose()\ndf_a=df_c-df_d-df_r","bd240996":"plt.figure(figsize=(12,8))\nplt.title(\"Global spread over time for Itally\",fontsize=24)\nplt.xlabel(\"Since date 1\/22\",fontsize=24)\nplt.ylabel('# of global Case', fontsize=24)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.plot(since_date_1_22,df_c)\nplt.plot(since_date_1_22,df_d)\nplt.plot(since_date_1_22,df_r)\nplt.plot(since_date_1_22,df_a)\nplt.legend(['Confirmed','Deaths','Recover', 'Active'], prop={'size':23})\nplt.show()","ceed323e":"df_c = df_C[df_C['Country\/Region']=='Spain']\ndf_c = df_c.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\n#df_C_global_sum_mt=df_C_mt.sum()\ndf_c=df_c.transpose()\n\ndf_d = df_D[df_D['Country\/Region']=='Spain']\ndf_d = df_d.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_d=df_d.transpose()\n\ndf_r = df_R[df_R['Country\/Region']=='Spain']\ndf_r = df_r.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_r.index+=2\ndf_r=df_r.transpose()\ndf_a=df_c-df_d-df_r\n\n\nplt.figure(figsize=(12,8))\nplt.title(\"Global spread over time for Spain\",fontsize=24)\nplt.xlabel(\"Since date 1\/22\",fontsize=24)\nplt.ylabel('# of global Case', fontsize=24)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.plot(since_date_1_22,df_c)\nplt.plot(since_date_1_22,df_d)\nplt.plot(since_date_1_22,df_r)\nplt.plot(since_date_1_22,df_a)\nplt.legend(['Confirmed','Deaths','Recover', 'Active'], prop={'size':23})\nplt.show()","8e79eb2b":"df_c","e8cf3431":"df_c = df_C[df_C['Country\/Region']=='USA']\ndf_c = df_c.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\n#df_C_global_sum_mt=df_C_mt.sum()\ndf_c=df_c.transpose()\n\ndf_d = df_D[df_D['Country\/Region']=='USA']\ndf_d = df_d.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_d=df_d.transpose()\n\ndf_r = df_R[df_R['Country\/Region']=='USA']\ndf_r = df_r.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_r.index+=0\ndf_r=df_r.transpose()\ndf_a=df_c-df_d-df_r\n\n\nplt.figure(figsize=(12,8))\nplt.title(\"Global spread over time for United State\",fontsize=24)\nplt.xlabel(\"Since date 1\/22\",fontsize=24)\nplt.ylabel('# of global Case', fontsize=24)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.plot(since_date_1_22,df_c)\nplt.plot(since_date_1_22,df_d)\nplt.plot(since_date_1_22,df_r)\nplt.plot(since_date_1_22,df_a)\nplt.legend(['Confirmed','Deaths','Recover', 'Active'], prop={'size':23})\nplt.show()","1903bcc9":"df_c = df_C[df_C['Country\/Region']=='United Kingdom']\ndf_c = df_c.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\n#df_C_global_sum_mt=df_C_mt.sum()\ndf_c=df_c.sum()\n\ndf_d = df_D[df_D['Country\/Region']=='United Kingdom']\ndf_d = df_d.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_d=df_d.sum()\n\ndf_r = df_R[df_R['Country\/Region']=='United Kingdom']\ndf_r = df_r.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_r=df_r.sum()\ndf_a=df_c-df_d-df_r\n\n\nplt.figure(figsize=(12,8))\nplt.title(\"Global spread over time for United Kingdom\",fontsize=24)\nplt.xlabel(\"Since date 1\/22\",fontsize=24)\nplt.ylabel('# of global Case', fontsize=24)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.plot(since_date_1_22,df_c)\nplt.plot(since_date_1_22,df_d)\nplt.plot(since_date_1_22,df_r)\nplt.plot(since_date_1_22,df_a)\nplt.legend(['Confirmed','Deaths','Recover', 'Active'], prop={'size':23})\nplt.show()","d6cdc468":"df_italy_c = df_C[df_C['Country\/Region']=='South Korea']\ndf_italy_c = df_italy_c.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\n#df_C_global_sum_mt=df_C_mt.sum()\ndf_italy_c=df_italy_c.transpose()\n\ndf_italy_d = df_D[df_D['Country\/Region']=='South Korea']\ndf_italy_d = df_italy_d.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_italy_d=df_italy_d.transpose()\n\ndf_italy_r = df_R[df_R['Country\/Region']=='South Korea']\ndf_italy_r = df_italy_r.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_italy_r.index+=6\ndf_italy_r=df_italy_r.transpose()\ndf_italy_a=df_italy_c-df_italy_d-df_italy_r\n\n\nplt.figure(figsize=(12,8))\nplt.title(\"Global spread over time for South Korea\",fontsize=24)\nplt.xlabel(\"Since date 1\/22\",fontsize=24)\nplt.ylabel('# of global Case', fontsize=24)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.plot(since_date_1_22,df_italy_c)\nplt.plot(since_date_1_22,df_italy_d)\nplt.plot(since_date_1_22,df_italy_r)\nplt.plot(since_date_1_22,df_italy_a)\nplt.legend(['Confirmed','Deaths','Recover', 'Active'], prop={'size':23})\nplt.show()","6fd42e0b":"df_italy_c = df_C[df_C['Country\/Region']=='Bangladesh']\ndf_italy_c = df_italy_c.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\n#df_C_global_sum_mt=df_C_mt.sum()\ndf_italy_c=df_italy_c.transpose()\n\ndf_italy_d = df_D[df_D['Country\/Region']=='Bangladesh']\ndf_italy_d = df_italy_d.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_italy_d=df_italy_d.transpose()\n\ndf_italy_r = df_R[df_R['Country\/Region']=='Bangladesh']\ndf_italy_r = df_italy_r.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_italy_r.index+=0\ndf_italy_r=df_italy_r.transpose()\ndf_italy_a=df_italy_c-df_italy_d-df_italy_r\n\n\nplt.figure(figsize=(12,8))\nplt.title(\"Global spread over time for Bangladesh\",fontsize=24)\nplt.xlabel(\"Since date 1\/22\",fontsize=24)\nplt.ylabel('# of global Case', fontsize=24)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.plot(since_date_1_22,df_italy_c)\nplt.plot(since_date_1_22,df_italy_d)\nplt.plot(since_date_1_22,df_italy_r)\nplt.plot(since_date_1_22,df_italy_a)\nplt.legend(['Confirmed','Deaths','Recover', 'Active'], prop={'size':23})\nplt.show()","8a13c479":"df_c = df_C[df_C['Country\/Region']=='India']\ndf_c = df_c.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\n#df_C_global_sum_mt=df_C_mt.sum()\ndf_c=df_c.sum()\n\ndf_d = df_D[df_D['Country\/Region']=='India']\ndf_d = df_d.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_d=df_d.sum()\n\ndf_r = df_R[df_R['Country\/Region']=='India']\ndf_r = df_r.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_r=df_r.sum()\ndf_a=df_c-df_d-df_r\n\n\nplt.figure(figsize=(12,8))\nplt.title(\"Global spread over time for India\",fontsize=24)\nplt.xlabel(\"Since date 1\/22\",fontsize=24)\nplt.ylabel('# of global Case', fontsize=24)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.plot(since_date_1_22,df_c)\nplt.plot(since_date_1_22,df_d)\nplt.plot(since_date_1_22,df_r)\nplt.plot(since_date_1_22,df_a)\nplt.legend(['Confirmed','Deaths','Recover', 'Active'], prop={'size':23})\nplt.show()","4131eead":"df_c = df_C[df_C['Country\/Region']=='Brazil']\ndf_c = df_c.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\n#df_C_global_sum_mt=df_C_mt.sum()\ndf_c=df_c.sum()\n\ndf_d = df_D[df_D['Country\/Region']=='Brazil']\ndf_d = df_d.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_d=df_d.sum()\n\ndf_r = df_R[df_R['Country\/Region']=='Brazil']\ndf_r = df_r.copy().drop(columns=['Country\/Region','Province\/State','Lat', 'Long'])\ndf_r=df_r.sum()\ndf_a=df_c-df_d-df_r\n\n\nplt.figure(figsize=(12,8))\nplt.title(\"Global spread over time for Brazil\",fontsize=24)\nplt.xlabel(\"Since date 1\/22\",fontsize=24)\nplt.ylabel('# of global Case', fontsize=24)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.plot(since_date_1_22,df_c)\nplt.plot(since_date_1_22,df_d)\nplt.plot(since_date_1_22,df_r)\nplt.plot(since_date_1_22,df_a)\nplt.legend(['Confirmed','Deaths','Recover', 'Active'], prop={'size':23})\nplt.show()","c603afae":"df_R.keys()","bd7356ee":"from sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error","3aa06791":"future_days=10\ndays_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nfuture_forcast= np.array([i for i in range(len(dates))+future_days]).reshape(-1, 1)\nworld_cases = np.array(world_cases).reshape(-1, 1)\ntotal_deaths = np.array(total_deaths).reshape(-1, 1)\ntotal_recovered = np.array(total_recovered).reshape(-1, 1)","880f209b":"dates = df_C_global_sum.keys()\ndays_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nfuture_days=10\nfuture_forcast= np.array([i for i in range((len(dates))+future_days)]).reshape(-1, 1)\ndf_Confirmed= np.array([df_C_global_sum[dates[i]] for i in range(len(dates))]).reshape(-1, 1)\n#df_Confirmed=df_C_global_sum.copy().drop(df_C_global_sum.columns[i], axis=1)\nprint(df_Confirmed)","73c5765e":"\nX_train_c,X_test_c, y_train_c, y_test_c = train_test_split(days_since_1_22[:],df_Confirmed[:],test_size=0.12, shuffle=False)\n#y_train_c=[x[0] for x in y_train_c]\n#y_test_c=[x[0] for x in y_test_c]","5923de3a":"y_train_c","1d549bdb":"poly = PolynomialFeatures(degree=5)\npoly_X_train_confirmed = poly.fit_transform(X_train_c)\npoly_X_test_confirmed = poly.fit_transform(X_test_c)\npoly_future_forcast = poly.fit_transform(future_forcast)","3cfdd6aa":"poly_X_train_confirmed","5b5113ac":"# polynomial regression\nlinear_model = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model.fit(poly_X_train_confirmed, y_train_c)\ntest_linear_pred = linear_model.predict(poly_X_test_confirmed)\nlinear_pred = linear_model.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_c))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_c))","87416146":"print(linear_model.coef_)","0c6dbae3":"plt.plot(y_test_c)\nplt.plot(test_linear_pred)\nplt.legend(['Test Data', 'Polynomial Regression Predictions'])","ca26a8cc":"X_train_c,X_test_c, y_train_c, y_test_c = train_test_split(days_since_1_22[60:],df_Confirmed[60:],test_size=0.12, shuffle=False)\npoly = PolynomialFeatures(degree=5)\npoly_X_train_confirmed = poly.fit_transform(X_train_c)\npoly_X_test_confirmed = poly.fit_transform(X_test_c)\npoly_future_forcast = poly.fit_transform(future_forcast[60:])\n# polynomial regression\nlinear_model = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model.fit(poly_X_train_confirmed, y_train_c)\ntest_linear_pred = linear_model.predict(poly_X_test_confirmed)\nlinear_pred = linear_model.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_c))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_c))\nplt.plot(y_test_c)\nplt.plot(test_linear_pred)\nplt.legend(['Test Data', 'Polynomial Regression Predictions'])","6eeeb0e2":"linear_pred.shape","a02560ee":"\nplt.plot(linear_pred)\nplt.legend(['Polynomial Regression Predictions'])\nlinear_pred[77]","32cfc801":"*** ploting for Bnagladesh***","0f01348e":"***Miduim rate Tested Countries***","d0603694":"Ploting For Spain","f6a952d9":"*** Ploting High test performed coutries ***","ae70dcd0":"*** Ploting for South Korea ***","039e7b7f":"***Low rate tested Countries***","9df54a96":"***Ploting for india ***","2d2d3b33":"*** Spain, Itally ploting *** ","6e8580e9":"*** Preprocessing ***","4fe21a85":"*** Ploting for Uinited Kindom***","dc944ff6":"*** Ploting for USA***","dfb1f038":"*** Polynomial regression considering after 60 days beacuse first 60 days the data showed less patternic ***","3c0ec6ec":"***Preprocessing***","8a1a0568":"*** Prediction Model ***\n","333ea512":"*** Very low test rate country***"}}