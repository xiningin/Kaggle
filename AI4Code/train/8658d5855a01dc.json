{"cell_type":{"3903062e":"code","49044bfd":"code","770f7930":"code","e124f0d6":"code","4fd1fca3":"code","8b2e7ee8":"code","6f002e6a":"code","f69ceee0":"code","7c92a5f6":"code","d7b31675":"code","08406b13":"code","36614c17":"code","2d501978":"code","38a3fd55":"code","1225e6f1":"code","1c76826c":"code","b95d279f":"code","0fbcf047":"markdown","2a3cdb8c":"markdown","2ef6756b":"markdown","8187da2d":"markdown","405f5f36":"markdown","ad43353a":"markdown","50ed6c17":"markdown","12d18028":"markdown","8370da65":"markdown","bf7f99d8":"markdown","a8f551e1":"markdown"},"source":{"3903062e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing,\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.optimizers import RMSprop\nimport cv2\nfrom tensorflow.keras import Model\nimport os\nimport glob\nimport seaborn as sns","49044bfd":"#printing the number of classes with class name\nds = '..\/input\/chest-xray-pneumonia\/chest_xray\/train'\nprint(len(os.listdir(ds)),'Classes')\nuniq_labels = sorted(os.listdir(ds))\nprint(uniq_labels)","770f7930":"normal = glob.glob(ds+\"\/NORMAL\/*.jpeg\")\npneumonia = glob.glob(ds+\"\/PNEUMONIA\/*.jpeg\")","e124f0d6":"sns.barplot(x=[\"Normal\",\"Pneumonia\"],y=[len(normal),len(pneumonia)])","4fd1fca3":"from tensorflow.keras.applications.inception_v3 import InceptionV3\n\n# Creating an instance of the inception model from the imagenet weights\npre_trained_model = InceptionV3(input_shape=(150,150,3),\n                               include_top = False,\n                               weights='imagenet')\n\n# Making all the layers in the pre-trained model non-trainable\nfor layer in pre_trained_model.layers:\n    layer.trainable = False","8b2e7ee8":"last_layer = pre_trained_model.get_layer('mixed7')\nprint('last layer output shape: ', last_layer.output_shape)\nlast_output = last_layer.output","6f002e6a":"x = tf.keras.layers.Flatten()(last_output)\nx = tf.keras.layers.Dense(1024,activation='relu')(x)\nx = tf.keras.layers.Dropout(0.2)(x)                  \nx = tf.keras.layers.Dense(1,activation='sigmoid')(x)           \n\nmodel = Model(pre_trained_model.input, x) \n\nmodel.compile(optimizer = RMSprop(lr=0.0001), \n              loss = 'binary_crossentropy', \n              metrics = ['acc'])\n\nmodel.summary()","f69ceee0":"TRAINING_DIR = \"..\/input\/chest-xray-pneumonia\/chest_xray\/train\"\ntrain_datagen = ImageDataGenerator(\n                    rescale=1.\/255,\n                    rotation_range=40,\n                    width_shift_range=0.2,\n                    height_shift_range=0.2,\n                    shear_range=0.2,\n                    zoom_range=0.2,\n                    horizontal_flip=True,\n                    fill_mode='nearest'\n                    #preprocessing_function=myFunc\n)\n\nVALIDATION_DIR = \"..\/input\/chest-xray-pneumonia\/chest_xray\/val\"\nval_datagen = ImageDataGenerator(\n                    rescale=1.\/255,\n                    rotation_range=40,\n                    width_shift_range=0.2,\n                    height_shift_range=0.2,\n                    shear_range=0.2,\n                    zoom_range=0.2,\n                    horizontal_flip=True,\n                    fill_mode='nearest'\n                   # preprocessing_function=myFunc\n)\n\ntrain_generator = train_datagen.flow_from_directory(\n                    TRAINING_DIR,\n                    batch_size=32,\n                    class_mode='binary',\n                    target_size=(150, 150)\n)\n\nvalidation_generator = val_datagen.flow_from_directory(\n                    VALIDATION_DIR,\n                    batch_size=32,\n                    class_mode='binary',\n                    target_size=(150, 150))\n","7c92a5f6":"learning_rate_reduction = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_accuracy',\n                                            patience = 2,\n                                            verbose=1,\n                                            factor=0.3,\n                                            min_lr=0.0001)","d7b31675":"history = model.fit_generator(train_generator,\n                    epochs=10,\n                    verbose = 1,\n                    validation_data = validation_generator,\n                    callbacks = [learning_rate_reduction])","08406b13":"%matplotlib inline\nimport matplotlib.pyplot as plt\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()","36614c17":"TEST_DIR = \"..\/input\/chest-xray-pneumonia\/chest_xray\/test\/\"\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\ntest = test_datagen.flow_from_directory(TEST_DIR,\n                                          batch_size=32,\n                                          target_size=(150,150),\n                                          class_mode=\"binary\")","2d501978":"result = model.evaluate(test)","38a3fd55":"images, labels = next(test)","1225e6f1":"class_names = train_generator.class_indices\nclass_names = list(class_names.keys())","1c76826c":"def plotImages(image, label):\n    plt.figure(figsize=[22,14])\n    for i in range(16):\n        plt.subplot(4,4,i+1)\n        plt.imshow(image[i])\n        plt.title(f\"Class : {class_names[np.argmax(label[i])]}\")\n        plt.axis(\"off\")\n    plt.show()","b95d279f":"plotImages(images,labels)","0fbcf047":"# Plotting Accuracy and Loss Curves","2a3cdb8c":"# Building a CNN Chest Xray Pneumonia Classifier using Transfer Learning","2ef6756b":"# Model Evaluation","8187da2d":"# Creating ImageDatagenerator with Data-Augmentation","405f5f36":"# Transfer Learning: Importing the Inception model","ad43353a":"# Defining Test Image Generator","50ed6c17":"# Adding our Output layer to the Pre-defined Model","12d18028":"# Making the mixed7 layer as our last layer ","8370da65":"# We got 91.35% Test Accuracy. That's good! Without tuning our hyperparameters.","bf7f99d8":"# Training the Model","a8f551e1":"# Ploting Images"}}