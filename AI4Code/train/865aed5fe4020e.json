{"cell_type":{"cdde0967":"code","00a19c43":"code","7e44ee82":"code","5817659a":"code","cbc966d2":"code","ce788dea":"code","231c4b9e":"code","d91cc477":"code","c1e4ddd8":"code","8f3cf63c":"code","493ab122":"code","387b26ef":"code","ca5b6319":"code","9a958756":"code","dd4da287":"code","9fea2050":"code","aaf710d4":"code","46a34b8b":"code","a558d852":"code","0a5e5096":"code","fc0d8018":"code","1c9dd4ad":"code","4a5d4852":"code","45425851":"code","f1a0b3c2":"code","9da9eb18":"code","63013b03":"code","e3203562":"code","c26bdee4":"code","5141c7e8":"markdown"},"source":{"cdde0967":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","00a19c43":"import pandas as pd\nimport numpy as np\nimport re \nimport sklearn\nimport xgboost as xgb\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Going to use these 5 base models for the stacking\nfrom sklearn.ensemble import (RandomForestClassifier, AdaBoostClassifier, \n                              GradientBoostingClassifier, ExtraTreesClassifier)\nfrom sklearn.svm import SVC\nfrom sklearn.cross_validation import KFold","7e44ee82":"train=pd.read_csv('..\/input\/train.csv')\ntest=pd.read_csv('..\/input\/test.csv')\n\nPassengerId=test['PassengerId']\n\ntrain.head(3)","5817659a":"full_data=[train,test]\n\ntrain['Name_length']=train['Name'].apply(len)\ntest['Name_length']=test['Name'].apply(len)\n\n\ntrain['Has_Cabin']=train['Cabin'].apply(lambda x : 0 if type(x)==float else 1)\ntest['Has_Cabin']=test['Cabin'].apply(lambda x : 0 if type(x)==float else 1)\n#type of 'nan' is float\n\nfor dataset in full_data:\n    dataset['FamilySize']=dataset['SibSp']+dataset['Parch']+1\n\nfor dataset in full_data:\n    dataset['IsAlone']=0\n    dataset.loc[dataset['FamilySize']==1,'IsAlone']=1\n    \n    dataset['Embarked']=dataset['Embarked'].fillna('S')\n\nfor dataset in full_data:    \n    dataset['Fare']=dataset['Fare'].fillna(train['Fare'].median())\ntrain['CategoricalFare']=pd.qcut(train['Fare'],4,duplicates='drop')\n\nfor dataset in full_data:\n    age_avg=dataset['Age'].mean()\n    age_std=dataset['Age'].std()\n    age_null_count=dataset['Age'].isnull().sum()\n    age_null_random_list=np.random.randint(age_avg-age_std,age_avg+age_std , size=age_null_count)\n    \n    dataset['Age'][np.isnan(dataset['Age'])]=age_null_random_list\n    dataset['Age'].astype(int)\n    \ntrain['CategoricalAge']=pd.cut(train['Age'],5)       \n\ndef get_title(name):\n    title_search=re.search('([A-Za-z]+)\\.',name)\n    if title_search:\n        return title_search.group(1)\n    return \"\"\n\nfor dataset in full_data:\n    dataset['Title']=dataset['Name'].apply(get_title)\n\nfor dataset in full_data:\n    dataset['Title']=dataset['Title'].replace(['Lady','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\nfor dataset in full_data:\n    dataset['Sex']=dataset['Sex'].map({'female':0,'male':1}).astype(int)\n    title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\n    dataset.loc[dataset['Fare']<=7.91,'Fare']=0\n    dataset.loc[(dataset['Fare']>7.91)&(dataset['Fare']<=14.454),'Fare']=1\n    dataset.loc[(dataset['Fare']>14.454)&(dataset['Fare']<=31),'Fare']=2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare']  = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n    \n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4 ;\n    \n    ","cbc966d2":"train.head(3)","ce788dea":"drop_elements=['PassengerId','Name','Ticket','Cabin','SibSp']\ndrop_elements=['PassengerId','Name','Ticket','Cabin','SibSp']\ntrain=train.drop(drop_elements,axis=1)\ntrain=train.drop(['CategoricalAge','CategoricalFare'],axis=1)\ntest=test.drop(drop_elements,axis=1)\n\n#\u2191\u4e8c\u56de\u76ee\u4ee5\u964d\u306f\u3067\u304d\u306a\u3044\uff08\u3082\u3046\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u306e\u3067\uff09","231c4b9e":"train.head()","d91cc477":"colormap = plt.cm.RdBu\nplt.figure(figsize=(14,12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(train.astype(float).corr(),linewidths=0.1,vmax=1.0, \n            square=True, cmap=colormap, linecolor='white', annot=True)","c1e4ddd8":"g=sns.pairplot(train[[u'Survived',u'Pclass',u'Sex',u'Age',u'Parch',u'Fare',u'Embarked',\n                      u'FamilySize', u'Title']] ,hue='Survived',palette='seismic',size=1.2,\n               diag_kind='ked',diag_kws=dict(shade=True),plot_kws=dict(s=10))\ng.set(xticklabels=[])\n\n#\u5bfe\u89d2\u7dda\u306b\u306f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304c\u914d\u7f6e\u3055\u308c\u308b\n#\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306b\u5f93\u3063\u3066\u8272\u5206\u3051: \u5f15\u6570hue\n# \u30ab\u30c6\u30b4\u30ea\u306e\u8272\u3092\u6307\u5b9a: \u5f15\u6570palette\n# \u5bfe\u89d2\u7dda\u306e\u30b0\u30e9\u30d5\u306e\u7a2e\u985e\u3092\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u5206\u5e03\u306b\u5909\u66f4: \u5f15\u6570diag_kin\n# \u6563\u5e03\u56f3\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306b\u5bfe\u3057\u3066pairplot()\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u4ee5\u5916\u306e\u7d30\u304b\u3044\u5f15\u6570\u306f\u3001\u305d\u308c\u305e\u308c\u5f15\u6570plot_kws, diag_kws\u3067\u6307\u5b9a\u3067\u304d\u308b\u3002","8f3cf63c":"ntrain=train.shape[0]\nntest=test.shape[0]\n\nSEED=0\nNFOLDS=5\nkf=KFold(ntrain,n_folds=NFOLDS,random_state=SEED)\n\nprint(kf)\n\n\nclass SklearnHelper(object):\n    def __init__(self,clf,seed=0,params=None):\n        params['random_state']=seed\n        self.clf=clf(**params)\n        \n    def train(self,x_train,y_train):\n        self.clf.fit(x_train,y_train)\n    \n    def predict(self,x):\n        return self.clf.predict(x)\n    \n    def fit(self,x,y):\n        return self.clf.fit(x,y)\n    \n    def feature_importances(self,x,y):\n        print(self.clf.fit(x,y).feature_importances_)\n        \n","493ab122":"def get_oof(clf,x_train,y_train,x_test):\n    oof_train=np.zeros((ntrain,))\n    oof_test=np.zeros((ntest,))\n    oof_test_skf=np.empty((NFOLDS,ntest))\n#kfolds\u3067\u6df7\u305c\u3089\u308c\u305ftrain_index\u304c\u6e21\u3055\u308c\u308b\n    for i,(train_index,test_index) in enumerate(kf):\n        x_tr=x_train[train_index]\n        y_tr=y_train[train_index]\n        x_te=x_train[test_index]\n        \n        clf.train(x_tr,y_tr)\n        \n        oof_train[test_index]=clf.predict(x_te)\n        oof_test_skf[i,:]=clf.predict(x_test)\n    \n    oof_test[:]=oof_test_skf.mean(axis=0)\n    return oof_train.reshape(-1,1),oof_test.reshape(-1,1)\n        ","387b26ef":"# Put in our parameters for said classifiers\n# Random Forest parameters\nrf_params = {\n    'n_jobs': -1,\n    'n_estimators': 500,\n     'warm_start': True, \n     #'max_features': 0.2,\n    'max_depth': 6,\n    'min_samples_leaf': 2,\n    'max_features' : 'sqrt',\n    'verbose': 0\n}\n\n# Extra Trees Parameters\net_params = {\n    'n_jobs': -1,\n    'n_estimators':500,\n    #'max_features': 0.5,\n    'max_depth': 8,\n    'min_samples_leaf': 2,\n    'verbose': 0\n}\n\n# AdaBoost parameters\nada_params = {\n    'n_estimators': 500,\n    'learning_rate' : 0.75\n}\n\n# Gradient Boosting parameters\ngb_params = {\n    'n_estimators': 500,\n     #'max_features': 0.2,\n    'max_depth': 5,\n    'min_samples_leaf': 2,\n    'verbose': 0\n}\n\n# Support Vector Classifier parameters \nsvc_params = {\n    'kernel' : 'linear',\n    'C' : 0.025\n    }","ca5b6319":"rf=SklearnHelper(clf=RandomForestClassifier,seed=SEED,params=rf_params)\net=SklearnHelper(clf=ExtraTreesClassifier,seed=SEED,params=et_params)\nada=SklearnHelper(clf=AdaBoostClassifier,seed=SEED,params=ada_params)\ngb=SklearnHelper(clf=GradientBoostingClassifier,seed=SEED,params=gb_params)\nsvc=SklearnHelper(clf=SVC,seed=SEED,params=svc_params)","9a958756":"train.head(3)","dd4da287":"y_train=train['Survived'].ravel()\ntrain=train.drop(['Survived'],axis=1)\nx_train=train.values\nx_test=test.values\n\n#x_test,train\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u5024\u3060\u3051\u3092\u53d6\u308a\u51fa\u3057\u305f\u3082\u306e\n#y_train,\u6b63\u89e3\u3001\u4e0d\u6b63\u89e3\u306e\u307f\u3092\u62bd\u51fa\n","9fea2050":"rf_feature=rf.feature_importances(x_train,y_train)\net_feature=et.feature_importances(x_train,y_train)\nada_feature=ada.feature_importances(x_train,y_train)\ngb_feature=gb.feature_importances(x_train,y_train)\n\nprint(rf_feature)","aaf710d4":"rf_features = [0.10474135,  0.21837029,  0.04432652,  0.02249159,  0.05432591,  0.02854371\n  ,0.07570305,  0.01088129 , 0.24247496,  0.13685733 , 0.06128402]\net_features = [ 0.12165657,  0.37098307  ,0.03129623 , 0.01591611 , 0.05525811 , 0.028157\n  ,0.04589793 , 0.02030357 , 0.17289562 , 0.04853517,  0.08910063]\nada_features = [0.028 ,   0.008  ,      0.012   ,     0.05866667,   0.032 ,       0.008\n  ,0.04666667 ,  0.     ,      0.05733333,   0.73866667,   0.01066667]\ngb_features = [ 0.06796144 , 0.03889349 , 0.07237845 , 0.02628645 , 0.11194395,  0.04778854\n  ,0.05965792 , 0.02774745,  0.07462718,  0.4593142 ,  0.01340093]","46a34b8b":"et_oof_train, et_oof_test = get_oof(et, x_train, y_train, x_test) # Extra Trees\nrf_oof_train, rf_oof_test = get_oof(rf,x_train, y_train, x_test) # Random Forest\nada_oof_train, ada_oof_test = get_oof(ada, x_train, y_train, x_test) # AdaBoost \ngb_oof_train, gb_oof_test = get_oof(gb,x_train, y_train, x_test) # Gradient Boost\nsvc_oof_train, svc_oof_test = get_oof(svc,x_train, y_train, x_test) # Support Vector Classifier\n\nprint(\"Training is complete\")","a558d852":"# print(et_oof_train,et_oof_test)\n#train\u306f[0.]\u304b[1.].\n#test\u306f[0.6.]\u3068\u304b\u304c\u5165\u3063\u3066\u3044\u308b\uff08\uff1f\n\nprint(rf_feature)","0a5e5096":"#train\u306e\u5217\u306e\u5024\u304c\u5165\u3063\u3066\u3044\u308b\n#\u3053\u308c\u3092\u5217\u306b\u5909\u63db\u3059\u308b\ncols=train.columns.values\nfeature_dataframe=pd.DataFrame({\n    'features':cols,\n    'Random Forest feature importances':rf_features,\n    'Extra Trees feature importances':et_features,\n    'AdaBoost feature importances':ada_features,\n    'Gradient Boost feature importances':gb_features\n})\n\nfeature_dataframe.head(10)","fc0d8018":"trace=go.Scatter(\n    y=feature_dataframe['Random Forest feature importances'].values,\n    x=feature_dataframe['features'].values,\n    mode='markers',\n    marker=dict(\n        #\u76f4\u5f84\u3067\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b\u65b9\u91dd\n        sizemode='diameter',\n        sizeref=1,\n        #\u5186\u306e\u5927\u304d\u3055\n        size=25,\n        color=feature_dataframe['Random Forest feature importances'].values,\n        #\u8272\u8abf\u2191\n        colorscale='Portland',\n#         \u30ab\u30e9\u30fc\u30d0\u30fc\u3092\u8868\u793a\u3059\u308b\u304b\u3069\u3046\u304b\n        showscale=True\n        \n    ),\n    text=feature_dataframe['features'].values)\ndata=[trace]\nlayout=go.Layout(\n    autosize=True,\n    title='Random Forest Feature Importance',\n    #hover\u3057\u305f\u6642\u306b\u3069\u3053\u306b\u8a73\u7d30\u304c\u8868\u793a\u3055\u308c\u308b\u304b\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u2193\n    hovermode='closest',\n    yaxis=dict(\n    title='Feature Importance',\n    ticklen=5,\n    gridwidth=2),\n    showlegend=False\n)\n\nfig=go.Figure(data=data, layout=layout)\npy.iplot(fig,filename='scatter2010')\n\ntrace=go.Scatter(\n    y=feature_dataframe['AdaBoost feature importances'].values,\n    x=feature_dataframe['features'].values,\n    mode='markers',\n    marker=dict(\n        #\u76f4\u5f84\u3067\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b\u65b9\u91dd\n        sizemode='diameter',\n        sizeref=1,\n        #\u5186\u306e\u5927\u304d\u3055\n        size=25,\n        color=feature_dataframe['AdaBoost feature importances'].values,\n        #\u8272\u8abf\u2191\n        colorscale='Portland',\n#         \u30ab\u30e9\u30fc\u30d0\u30fc\u3092\u8868\u793a\u3059\u308b\u304b\u3069\u3046\u304b\n        showscale=True\n        \n    ),\n    text=feature_dataframe['features'].values)\ndata=[trace]\nlayout=go.Layout(\n    autosize=True,\n    title='AdaBoost Feature Importance',\n    #hover\u3057\u305f\u6642\u306b\u3069\u3053\u306b\u8a73\u7d30\u304c\u8868\u793a\u3055\u308c\u308b\u304b\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u2193\n    hovermode='closest',\n    yaxis=dict(\n    title='Feature Importance',\n    ticklen=5,\n    gridwidth=2),\n    showlegend=False\n)\n\nfig=go.Figure(data=data, layout=layout)\npy.iplot(fig,filename='scatter2010')\n\n# Scatter plot \ntrace = go.Scatter(\n    y = feature_dataframe['Extra Trees feature importances'].values,\n    x = feature_dataframe['features'].values,\n    mode='markers',\n    marker=dict(\n        sizemode = 'diameter',\n        sizeref = 1,\n        size = 25,\n#       size= feature_dataframe['AdaBoost feature importances'].values,\n        #color = np.random.randn(500), #set color equal to a variable\n        color = feature_dataframe['Extra Trees feature importances'].values,\n        colorscale='Portland',\n        showscale=True\n    ),\n    text = feature_dataframe['features'].values\n)\ndata = [trace]\n\nlayout= go.Layout(\n    autosize= True,\n    title= 'Extra Trees Feature Importance',\n    hovermode= 'closest',\n#     xaxis= dict(\n#         title= 'Pop',\n#         ticklen= 5,\n#         zeroline= False,\n#         gridwidth= 2,\n#     ),\n    yaxis=dict(\n        title= 'Feature Importance',\n        ticklen= 5,\n        gridwidth= 2\n    ),\n    showlegend= False\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig,filename='scatter2010')\n\n# Scatter plot \ntrace = go.Scatter(\n    y = feature_dataframe['AdaBoost feature importances'].values,\n    x = feature_dataframe['features'].values,\n    mode='markers',\n    marker=dict(\n        sizemode = 'diameter',\n        sizeref = 1,\n        size = 25,\n#       size= feature_dataframe['AdaBoost feature importances'].values,\n        #color = np.random.randn(500), #set color equal to a variable\n        color = feature_dataframe['AdaBoost feature importances'].values,\n        colorscale='Portland',\n        showscale=True\n    ),\n    text = feature_dataframe['features'].values\n)\ndata = [trace]\n\nlayout= go.Layout(\n    autosize= True,\n    title= 'AdaBoost Feature Importance',\n    hovermode= 'closest',\n#     xaxis= dict(\n#         title= 'Pop',\n#         ticklen= 5,\n#         zeroline= False,\n#         gridwidth= 2,\n#     ),\n    yaxis=dict(\n        title= 'Feature Importance',\n        ticklen= 5,\n        gridwidth= 2\n    ),\n    showlegend= False\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig,filename='scatter2010')\n\n# Scatter plot \ntrace = go.Scatter(\n    y = feature_dataframe['Gradient Boost feature importances'].values,\n    x = feature_dataframe['features'].values,\n    mode='markers',\n    marker=dict(\n        sizemode = 'diameter',\n        sizeref = 1,\n        size = 25,\n#       size= feature_dataframe['AdaBoost feature importances'].values,\n        #color = np.random.randn(500), #set color equal to a variable\n        color = feature_dataframe['Gradient Boost feature importances'].values,\n        colorscale='Portland',\n        showscale=True\n    ),\n    text = feature_dataframe['features'].values\n)\ndata = [trace]\n\nlayout= go.Layout(\n    autosize= True,\n    title= 'Gradient Boosting Feature Importance',\n    hovermode= 'closest',\n#     xaxis= dict(\n#         title= 'Pop',\n#         ticklen= 5,\n#         zeroline= False,\n#         gridwidth= 2,\n#     ),\n    yaxis=dict(\n        title= 'Feature Importance',\n        ticklen= 5,\n        gridwidth= 2\n    ),\n    showlegend= False\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig,filename='scatter2010')\n    \n    ","1c9dd4ad":"feature_dataframe['mean']=feature_dataframe.mean(axis=1)\nfeature_dataframe.head(3)","4a5d4852":"y=feature_dataframe['mean'].values\nx=feature_dataframe['features'].values\ndata=[go.Bar(\n    x=x,\n    y=y,\n    width=0.5,\n    marker=dict(\n    color=feature_dataframe['mean'].values,\n    colorscale='Portland',\n    showscale=False)\n,opacity=0.6)]\n\nlayout=go.Layout(\n    autosize=True,\n    title='Barplots of Mean Fatture Importance',\n    hovermode='closest',\n    yaxis=dict(\n        title='Feature Importance',\n        ticklen=5,\n        gridwidth=2),\n    showlegend=False)\n\nfig=go.Figure(data=data,layout=layout)\npy.iplot(fig,filename='bar-direct-labels')","45425851":"base_predictions_train=pd.DataFrame({'RandomForest':rf_oof_train.ravel(),\n                                    'ExtraTrees':et_oof_train.ravel(),\n                                    'AdaBoost':ada_oof_train.ravel(),\n                                    'GradientBoost':gb_oof_train.ravel()})\nbase_predictions_train.head()","f1a0b3c2":"data=[\n    go.Heatmap(\n    z=base_predictions_train.astype(float).corr().values,\n    x=base_predictions_train.columns.values,\n    y=base_predictions_train.columns.values,\n        colorscale='Viridis',\n        showscale=True,\n        reversescale=True\n    )\n]\n\npy.iplot(data,filename='labbelled-heatmap')","9da9eb18":"x_train=np.concatenate((et_oof_train,rf_oof_train,ada_oof_train,gb_oof_train,svc_oof_train),axis=1)\nx_test=np.concatenate((et_oof_test,rf_oof_test,ada_oof_test,gb_oof_test,svc_oof_test),axis=1)","63013b03":"gbm=xgb.XGBClassifier(\nn_estimators=2000,\nmax_depth=4,\nmin_child_weight=2,\ngamma=0.9,\nsubsample=0.8,\nobjective='binary:logistic',\nnthread=-1,\nscale_pos_weight=1).fit(x_train,y_train)\npredictions=gbm.predict(x_test)\nprint(x_test)","e3203562":"print(len(predictions))\nprint(len(PassengerId))","c26bdee4":"StackingSubmission = pd.DataFrame({ 'PassengerId': PassengerId,\n                            'Survived': predictions })\nStackingSubmission.to_csv(\"StackingSubmission.csv\", index=False)","5141c7e8":"This kernel copied by \"Introduction to Ensembling\/Stacking in Python\" to study pandas &classify technique\n[Base kernel link](https:\/\/www.kaggle.com\/zerebom\/introduction-to-ensembling-stacking-in-python\/edit)"}}