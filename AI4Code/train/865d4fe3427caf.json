{"cell_type":{"6ca74c13":"code","7331a537":"code","c52db458":"code","4da513d1":"code","306caeef":"code","06cbb540":"code","4a5049e6":"markdown","c79a1fc0":"markdown","8adb7659":"markdown","67881458":"markdown","1df2213e":"markdown","9088f012":"markdown","1030c57e":"markdown","88a4df5e":"markdown","d6e003fd":"markdown","cd06d999":"markdown","d437f273":"markdown"},"source":{"6ca74c13":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7331a537":"import matplotlib.pyplot as plt\n\n#reading the data into variable new_data\nnew_data = pd.read_csv('\/kaggle\/input\/kc-house-data\/kc_house_data.csv')\n\n#plot price histogram\nnew_data.hist('price',figsize=(10,5))\nplt.title('Number of houses vs Price')\nplt.ylabel('Number of Houses')\nplt.xlabel(\"Price\")\nplt.ticklabel_format(style='plain')","c52db458":"#log transfrom\nnp.log(new_data.price).hist(figsize=(10,5))\n\nplt.show()","4da513d1":"#square root tranform and its distribution\n(new_data.price**(1\/2)).hist(figsize=(10,5))\nplt.show()","306caeef":"#reciprocal transformation and its plot\n(1\/new_data.price+1).hist(figsize=(10,5))\nplt.show()","06cbb540":"# Taking exponenent value as 1\/8\n(new_data.price**(1\/8)).hist(figsize=(10,5))\nplt.show()","4a5049e6":"# Reciprocal transformation `[ f(x) = 1\/x ]`\n* It is a powerful transformation with a radical effect \n* Reciprocal reverses order among values of same sign, so large values become smaller\n    * Negative reciprocal preserves order among values of same sign\n\n`Note: this function is not defined for zero`","c79a1fc0":"##  Logarithmic transformation `[ f(x) = ln(x) ]`\n* Simplest and most popular among different types of transformations and involves a substantial transformation that significantly affects distribution shape\n\n* Can use it (`natural logarithmic ln or log base 10`) to make extremely skewed distributions less skewed, especially for right-skewed (+ve vly) distributions\n\n`Note: that this function is defined only for strictly positive numbers`","8adb7659":"----\n----\n\n# other notebook links:\n* [Simple Linear Regression](https:\/\/www.kaggle.com\/mukeshmanral\/linear-regression-basic)\n* [Multiple Linear Regression](https:\/\/www.kaggle.com\/mukeshmanral\/multiple-linear-regression-basic)\n* [Polynomial Regression](https:\/\/www.kaggle.com\/mukeshmanral\/polynomial-regression-basic)\n* [Advanced Linear Regression](https:\/\/www.kaggle.com\/mukeshmanral\/advance-linear-regression-basic-gridsearchcv-hpt)\n\n\n\n\n* [Feature Engineering 1](https:\/\/www.kaggle.com\/mukeshmanral\/feature-engineering-dataset-1-basic)\n* [Feature Engineering 2](https:\/\/www.kaggle.com\/mukeshmanral\/feature-engineering-dataset-2-basic)\n* [Feature Engineering 4](https:\/\/www.kaggle.com\/mukeshmanral\/feature-engineering-dataset-4-basic)\n\n----\n----","67881458":"##  Square root transformation `[ f(x) = \u221ax ]`\n* Another simple transformation, this one has an average effect on distribution shape\n    * it\u2019s weaker than logarithmic transformation\n    * it\u2019s also used for `reducing right-skewed distributions`\n\n`One particular advantage of square root transformation is that ir can be applyied to zero values`\n\n`Note: that this function is defined only for positive numbers`","1df2213e":"----\n----\n\n# other notebook links:\n* [Simple Linear Regression](https:\/\/www.kaggle.com\/mukeshmanral\/linear-regression-basic)\n* [Multiple Linear Regression](https:\/\/www.kaggle.com\/mukeshmanral\/multiple-linear-regression-basic)\n* [Polynomial Regression](https:\/\/www.kaggle.com\/mukeshmanral\/polynomial-regression-basic)\n* [Advanced Linear Regression](https:\/\/www.kaggle.com\/mukeshmanral\/advance-linear-regression-basic-gridsearchcv-hpt)\n\n\n\n\n* [Feature Engineering 1](https:\/\/www.kaggle.com\/mukeshmanral\/feature-engineering-dataset-1-basic)\n* [Feature Engineering 2](https:\/\/www.kaggle.com\/mukeshmanral\/feature-engineering-dataset-2-basic)\n* [Feature Engineering 4](https:\/\/www.kaggle.com\/mukeshmanral\/feature-engineering-dataset-4-basic)\n\n----\n----","9088f012":"## Exponential or Power transformation `[ f(x) = x^n or f(x) = e^x ]`\n* A reasonable effect on distribution shape\n    * generally it is apply power transformation (power of two usually) `to reduce left skewness`\n\n`Note: Can use any exponent in this transformation; can even use the exp() function. lets see which one gives better results`","1030c57e":"#  8. Date and Time Engineering\nThree types of preprocessing for dates:\n* Extracting the parts of the date into different columns: `Year, month, day` \n* Extracting the time period between current date and columns in terms of `years, months, days`\n* Extracting some specific features from the date: `Name of weekday, Weekend or not, holiday or not`","88a4df5e":"I am trying to show Variable Transformation in this notebook\n# 7. Variable Transformation\n* Linear and Logistic Regression model assume that variables follow a normal distribution\n    * More likely variables in real datasets will follow more OF a skewed distribution\n\nBy applying a number of transformations to these variables, and mapping their skewed distribution to a normal distribution, we can increase the performance of our models\n\n#### How can we transform variables?\nThe most commonly-used methods to transform variables are the following:\n\n* `Logarithmic transformation` for +ve vly skewed (right skewed)\n* `Square root transformation`\n* `Reciprocal transformation`\n* `Exponential` or `Power transformation` for -ve vly skewed (left skewed)","d6e003fd":"* difference between non transormed and transformed Price data can be seen","cd06d999":"As mentioned Square root transformation is actually weaker than log transformation","d437f273":"* Lets apply log transform on price column and plot its distribution"}}