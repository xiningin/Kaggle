{"cell_type":{"0f93d6a4":"code","b3876d5b":"code","5b164477":"code","1a3d4aca":"code","03e91353":"code","d801b5eb":"code","d8a633e6":"code","a7cf5b8d":"code","ae8ed71a":"code","ca4c4f42":"code","900ff8a0":"code","de78386b":"code","7dfd5edc":"code","d5721f0e":"code","46f16be0":"code","9c60571e":"code","fe67cfab":"code","e1a8c68c":"code","45fbf393":"code","b3d0dc73":"code","7866ffae":"code","37503f22":"code","5f042001":"code","8a557839":"code","1e6a63f7":"code","a0f8a1a0":"code","162bac4a":"code","dd6d9591":"code","bc532705":"code","222ab722":"code","b9042b4d":"code","6a5267ca":"code","46fe0166":"code","5cc6b854":"code","fb5f8391":"code","92d9cdc1":"code","f2e78169":"code","f6657ef5":"code","4c9316c0":"code","31bff3d5":"markdown","ed4cad85":"markdown","ae6d8b42":"markdown","99898dd7":"markdown","eb608b2d":"markdown","dac928c7":"markdown","b4e16de3":"markdown","7fad6e02":"markdown","8e13b7d8":"markdown","68d3c3b2":"markdown","6228bfe7":"markdown","10748135":"markdown","8ecc48d6":"markdown","a3dd1f5d":"markdown","ceafc862":"markdown","7d2121f9":"markdown","836b74ef":"markdown","b02a0865":"markdown","a4ed04df":"markdown","ea67769b":"markdown","2a570e1f":"markdown","a814ba56":"markdown","7fcfdf26":"markdown","48c414df":"markdown","b59a6843":"markdown","e7986f9e":"markdown","812d1466":"markdown","2c52903b":"markdown","f61eeaf8":"markdown","b1e74b3d":"markdown","3dd49243":"markdown","260ceb89":"markdown","ccd0c009":"markdown","056faebf":"markdown","487dfb98":"markdown","f8ec4363":"markdown","1acc7313":"markdown","22607ac9":"markdown","b8c2e86e":"markdown","88193362":"markdown","aa67c3d8":"markdown","53c2a72b":"markdown","19f59ed1":"markdown","14ece8ed":"markdown","2bc8d30a":"markdown","9fedaaae":"markdown","2f2eae8d":"markdown","b5471f3a":"markdown","7ac14eab":"markdown","a6960c84":"markdown","2dbd85de":"markdown"},"source":{"0f93d6a4":"import pandas as pd\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\n%matplotlib inline\nrandom.seed(42)","b3876d5b":"df = pd.read_csv('\/kaggle\/input\/analyze-ab-test-results-notebook\/ab_data.csv')\ndf.head()","5b164477":"df.shape[0]","1a3d4aca":"df['user_id'].nunique()","03e91353":"sum(df['converted'])\/df.shape[0]","d801b5eb":"df.query('group == \"treatment\" & landing_page != \"new_page\"').shape[0]","d8a633e6":"df.info()","a7cf5b8d":"# Remove the inaccurate rows, and store the result in a new dataframe df2\n\ndf2 = df.query('(group == \"treatment\" & landing_page == \"new_page\")|(group == \"control\" & landing_page == \"old_page\")')\ndf2.shape[0]","ae8ed71a":"# Double Check all of the incorrect rows were removed from df2 - \n# Output of the statement below should be 0\ndf2[((df2['group'] == 'treatment') == (df2['landing_page'] == 'new_page')) == False].shape[0]","ca4c4f42":"df2['user_id'].nunique()","900ff8a0":"df2[df2['user_id'].duplicated()]","de78386b":"df2[df2['user_id'].duplicated(keep=False)]","7dfd5edc":"# Remove one of the rows with a duplicate user_id..\n# Hint: The dataframe.drop_duplicates() may not work in this case because the rows with duplicate user_id are not entirely identical. \ndf2 = df2.drop([2893])\n# Check again if the row with a duplicate user_id is deleted or not\ndf2[df2['user_id'].duplicated()]\n","d5721f0e":"#df.reset_index()\n\np_population = df2.query('converted == 1').shape[0]\/df2.shape[0]\np_population","46f16be0":"p_control_converted = df2.query('group == \"control\" & converted == 1').shape[0]\/df2.query('group == \"control\"').shape[0]\np_control_converted","9c60571e":"p_treatment_converted = df2.query('group == \"treatment\" & converted == 1').shape[0]\/df2.query('group == \"treatment\"').shape[0]\np_treatment_converted\n","fe67cfab":"# Calculate the actual difference (obs_diff) between the conversion rates for the two groups.\nobs_diff = p_treatment_converted - p_control_converted\nobs_diff","e1a8c68c":"p_population_newpage = df2.query('landing_page == \"new_page\"').shape[0]\/df2.shape[0]\np_population_newpage","45fbf393":"p_new = p_population\np_new","b3d0dc73":"p_old = p_population\np_old","7866ffae":"n_new = df2.query('group == \"treatment\"').shape[0]\nn_new","37503f22":"n_old = df2.query('group == \"control\"').shape[0]\nn_old","5f042001":"# Simulate a Sample for the treatment Group\n\nnew_page_converted = np.random.choice([0,1],p=[1-p_new,p_new], size = n_new)\nconverted_probability_new = sum(new_page_converted == 1) \/ n_new\nconverted_probability_new","8a557839":"# Simulate a Sample for the control Group\n\nold_page_converted = np.random.choice([0,1],p=[1-p_old,p_old], size = n_old)\nconverted_probability_old = sum(old_page_converted == 1) \/ n_old\nconverted_probability_old","1e6a63f7":"converted_probability_diff = converted_probability_new - converted_probability_old\nconverted_probability_diff","a0f8a1a0":"# Sampling distribution \np_diffs = []\nnew_converted_simulation = np.random.binomial(n_new, p_new, 10000)\/n_new \nold_converted_simulation = np.random.binomial(n_old, p_old, 10000)\/n_old \np_diffs = new_converted_simulation - old_converted_simulation","162bac4a":"null_val = np.random.normal(0, np.array(p_diffs).std(), np.array(p_diffs).size)\nplt.hist(null_val)\nplt.axvline(x=obs_diff,color='red')\nplt.xlabel('The difference in the converted probability')\nplt.ylabel('Number of samples')\nplt.title('Histogram of the Sampling distribution of the difference in the converted probability');","dd6d9591":"p_val = (null_val > obs_diff).mean()\np_val","bc532705":"import statsmodels.api as sm\n\n# number of conversions with the old_page\nconvert_old = sum(df2.query('landing_page == \"old_page\"')['converted'])\n\n# number of conversions with the new_page\nconvert_new = sum(df2.query('landing_page == \"new_page\"')['converted'])\n\n# number of individuals who were shown the old_page\nn_old = df2.query('landing_page == \"old_page\"').shape[0]\n\n# number of individuals who received new_page\nn_new = df2.query('landing_page == \"new_page\"').shape[0]\n\ncount = np.array([convert_new, convert_old])\nnobs = np.array([n_new, n_old])\n\ncount, nobs","222ab722":"import statsmodels.api as sm\n# ToDo: Complete the sm.stats.proportions_ztest() method arguments\nz_score, p_value = sm.stats.proportions_ztest(count, nobs, alternative='larger')\nprint(z_score, p_value)","b9042b4d":"df2['intercept'] = 1\ndf2[['control_page','ab_page']] = pd.get_dummies(df2['group'])\ndf2.drop(['control_page'], axis=1, inplace = True)","6a5267ca":"import statsmodels.api as sm;\n\nlrm = sm.Logit(df2['converted'],df2[['intercept','ab_page']])\nres= lrm.fit()","46fe0166":"res.summary2()","5cc6b854":"# Read the countries.csv\ncountries = pd.read_csv('\/kaggle\/input\/countries\/countries.csv')\ncountries.head()","fb5f8391":"# Join with the df2 dataframe\n\ndf_merged = df2.join(countries['country'])\ndf_merged.head()","92d9cdc1":"# Create the necessary dummy variables\ndf_merged[['CA', 'UK' , 'US']] = pd.get_dummies(df_merged['country'])\ndf_merged.head()","f2e78169":"# Fitting model, and summarize the results\n\nlrm_2 = sm.Logit(df_merged['converted'],df_merged[['intercept','ab_page','UK', 'CA']])\nres_2= lrm_2.fit()\nres_2.summary2()","f6657ef5":"df_merged['ab_UK'] = df_merged['ab_page'] * df_merged['UK']\ndf_merged['ab_CA'] = df_merged['ab_page'] * df_merged['CA']","4c9316c0":"# Fitting model, and summarize the results\n\nlrm_2 = sm.Logit(df_merged['converted'],df_merged[['intercept','ab_page','UK','CA','ab_UK', 'ab_CA']])\nres_2= lrm_2.fit()\nres_2.summary2()","31bff3d5":"**d.** What is the p-value associated with **ab_page**? Why does it differ from the value we found in **Part II**?<br><br>  ","ed4cad85":"**d.** What is $n_{old}$, the number of individuals in the control group?","ae6d8b42":">$$H_0:  p_{new} - p_{old} \\le 0 $$\n\n$$H_1:  p_{new} - p_{old}  > 0 $$","99898dd7":"- `convert_old`: number of conversions with the old_page\n- `convert_new`: number of conversions with the new_page\n- `n_old`: number of individuals who were shown the old_page\n- `n_new`: number of individuals who were shown the new_page","eb608b2d":">The actual difference between the conversion rates for the two groups is 0.0016 in favor of the control group, So the new treatment group users do not lead to more conversions.","dac928c7":"### ToDo 1.3\n\n**a.** What is the probability of an individual converting regardless of the page they receive?<br><br>","b4e16de3":"**d.** The proportion of users converted.","7fad6e02":"**c.** The number of unique users in the dataset.","8e13b7d8":"**b.** Given that an individual was in the `control` group, what is the probability they converted?","68d3c3b2":"**c.** Display the rows for the duplicate **user_id**? ","6228bfe7":">* p-value = 0.1899, failing to reject the null hypothesis.\n* The p-value differs from the value found in Part II Because the p-value here tests if the parameter equals zero in the null hypothesis.\n* Null and alternative hypothesis from Logistic regression (two-tailed test):\n$$H_0:  p_{new} - p_{old} = 0 $$\n$$H_1:  p_{new} - p_{old} \\neq 0 $$\n* While null and alternative hypothesis from part II (one-tailed test):\n$$H_0:  p_{new} - p_{old} \\le 0 $$\n$$H_1:  p_{new} - p_{old}  > 0 $$\nWhere,\n- $H_0$ is the null hypothesis.\n- $H_1$ is the alternative hypothesis.\n- $p_{new}$ and $p_{old}$ are the \"converted\" success rates for the two groups in the population. \n","10748135":"**b.** There is one **user_id** repeated in **df2**.  What is it?","8ecc48d6":"**f. Simulate Sample for the `control` Group** <br>\nSimulate $n_{old}$ transactions with a conversion rate of $p_{old}$ under the null hypothesis. <br> Store these $n_{old}$ 1's and 0's in the `old_page_converted` numpy array.","a3dd1f5d":"**e.** The number of times when the \"group\" is `treatment` but \"landing_page\" is not a `new_page`.","ceafc862":"There is no missing values.","7d2121f9":"**j.** What proportion of the **p_diffs** are greater than the actual difference observed in the `df2` data? In other words, what is the p-value?","836b74ef":"**b.** Use **statsmodels** to instantiate our regression model on the two columns we created in part (a) above, then fit the model to predict whether or not an individual converts. \n","b02a0865":"<a id='Final_Conclusion'><\/a>\n ### Final conclusion\n\n* From the analysis we made, we fail to reject the null hypothesis for all the cases mentioned above, Which was that there is no significant difference between the old page and the new one. \n\n* Finally we reach a conclusion:\nWe should keep the old page for the foreseeable future until we could gather new data that may give us more evidence that the new page is better.","a4ed04df":"**e. Adding countries**<br> \nNow along with testing if the conversion rate changes for different pages, also add an effect based on which country a user lives in. \n\n1. We will need to read in the **countries.csv** dataset and merge together our `df2` datasets on the appropriate rows. We call the resulting dataframe `df_merged`.\n\n2. Does it appear that country had an impact on conversion?  To answer this question, consider the three unique values, `['UK', 'US', 'CA']`, in the `country` column. Create dummy variables for these country columns.  ","ea67769b":"## Data description","2a570e1f":"**f.** Do any of the rows have missing values?","a814ba56":"**c.** Given that an individual was in the `treatment` group, what is the probability they converted?","7fcfdf26":"**a.** What is the **conversion rate** for $p_{new}$ under the null hypothesis? ","48c414df":">* The p-value of 'ab_page' with the country 'US' is more than the Type I error rate (0.05), So they have no statistically significant effects on conversion.\n* Also the confidence intervals of each of the countries ('UK' and 'CA') and 'ab_page' are overlapping. Therefore, There are no statistically significant effects on conversion.\n* We failed to reject the null hypothesis as a result of the above conclusion.","b59a6843":"**g.** Find the difference in the \"converted\" probability $(p{'}_{new}$ - $p{'}_{old})$ for our simulated samples from the parts (e) and (f) above. ","e7986f9e":"**d.** Remove **one** of the rows with a duplicate **user_id**, from the **df2** dataframe.","812d1466":"**m.** Now use `sm.stats.proportions_ztest()` to compute our test statistic and p-value.\n\nwhere, \n- `count_array` = represents the number of \"converted\" for each group\n- `nobs_array` = represents the total number of observations (rows) in each group\n- `alternative` = choose one of the values from `[\u2018two-sided\u2019, \u2018smaller\u2019, \u2018larger\u2019]` depending upon two-tailed, left-tailed, or right-tailed respectively. \n\nThe built-in function above will return the z_score, p_value. \n\n---\n### About the two-sample z-test\nRecall that we have plotted a distribution `p_diffs` representing the\ndifference in the \"converted\" probability  $(p{'}_{new}-p{'}_{old})$  for our two simulated samples 10,000 times. \n\nAnother way for comparing the mean of two independent and normal distribution is a **two-sample z-test**. we can perform the Z-test to calculate the Z_score, as shown in the equation below:\n\n$$\nZ_{score} = \\frac{ (p{'}_{new}-p{'}_{old}) - (p_{new}  -  p_{old})}{ \\sqrt{ \\frac{\\sigma^{2}_{new} }{n_{new}} + \\frac{\\sigma^{2}_{old} }{n_{old}}  } }\n$$\n\nwhere,\n- $p{'}$ is the \"converted\" success rate in the sample\n- $p_{new}$ and $p_{old}$ are the \"converted\" success rate for the two groups in the population. \n- $\\sigma_{new}$ and $\\sigma_{new}$ are the standard deviation for the two groups in the population. \n- $n_{new}$ and $n_{old}$ represent the size of the two groups or samples (it's same in our case)\n\n\n>Z-test is performed when the sample size is large, and the population variance is known. The z-score represents the distance between the two \"converted\" success rates in terms of the standard error. \n\nNext step is to make a decision to reject or fail to reject the null hypothesis based on comparing these two values: \n- $Z_{score}$\n- $Z_{\\alpha}$ or $Z_{0.05}$, also known as critical value at 95% confidence interval.\n- $Z_{0.05}$ is 1.645 for one-tailed tests,  and 1.960 for two-tailed test. \n\n ","2c52903b":"In a particular row, the **group** and **landing_page** columns should have either of the following acceptable values:\n\n|user_id| timestamp|group|landing_page|converted|\n|---|---|---|---|---|\n|XXXX|XXXX|`control`| `old_page`|X |\n|XXXX|XXXX|`treatment`|`new_page`|X |\n\n\nIt means, the `control` group users should match with `old_page`; and `treatment` group users should matched with the `new_page`. \n\nHowever, for the rows where `treatment` does not match with `new_page` or `control` does not match with `old_page`, we cannot be sure if such rows truly received the new or old wepage.  \n\nStore new dataframe in **df2**.","f61eeaf8":"<a id='probability'><\/a>\n## Part I - Probability\n\nTo get started, let's import our libraries.","b1e74b3d":"**e. Simulate Sample for the `treatment` Group**<br> \nSimulate $n_{new}$ transactions with a conversion rate of $p_{new}$ under the null hypothesis.  <br><br>\nStore these $n_{new}$ 1's and 0's in the `new_page_converted` numpy array.\n","3dd49243":"**c.** Provide the summary of our model below, and use it as necessary to answer the following questions.","260ceb89":"This data is given by Udacity Advanced Data Analysis Nanodegree Program, It consists of two CSV files countries.csv and ab_data.csv.\nThe two CSV files are [here](https:\/\/video.udacity-data.com\/topher\/2017\/December\/5a32c9a0_analyzeabtestresults-2\/analyzeabtestresults-2.zip).\n\nBelow is the description of ab_data.csv, there are a total of 5 columns:\n\n![Capture.PNG](attachment:d496bdcd-fc8e-4eca-bc35-fa97957dcefc.PNG) ","ccd0c009":"#### 12\/01\/2021\n\nWe have organized the current notebook into the following sections: \n\n- [Introduction](#intro)\n- [Part I - Probability](#probability)\n- [Part II - A\/B Test](#ab_test)\n- [Part III - Regression](#regression)\n- [Final Conclusion](#Final_Conclusion)\n\n\n<a id='intro'><\/a>\n## Introduction\n\nFor this project, We will be working to understand the results of an A\/B test run by an e-commerce website. Our goal is to work through this notebook to help the company understand if they should:\n- Implement the new webpage, \n- Keep the old webpage, or \n- Perhaps run the experiment longer to make their decision.\n\n\n","056faebf":"Calculate the actual difference between the conversion rates for the two groups.","487dfb98":"## Set up the environment","f8ec4363":"**d.** What is the probability that an individual received the new page?","1acc7313":">* The p-value of interaction between the page and the countries are more than the Type I error rate (0.05), p-values are 0.6938 and 0.1251, So they have no statistically significant effects on conversion.\n* We failed to reject the null hypothesis as a result of the above conclusion.","22607ac9":"<a id='regression'><\/a>\n### Part III - A regression approach\n\n### ToDo 3.1 \nIn this final part, we will see that the result we achieved in the A\/B test in Part II above can also be achieved by performing regression.<br><br> \n\n**a.** The goal is to use **statsmodels** library to fit the Logistic regression model to see if there is a significant difference in conversion based on the page-type a customer receives. However, we first need to create the following two columns in the `df2` dataframe:\n 1. `intercept` - It should be `1` in the entire column. \n 2. `ab_page` - It's a dummy variable column, having a value `1` when an individual receives the **treatment**, otherwise `0`.  ","b8c2e86e":"\n**h. Sampling distribution** <br>\nRe-create `new_page_converted` and `old_page_converted` and find the $(p{'}_{new}$ - $p{'}_{old})$ value 10,000 times using the same simulation process we used in parts (a) through (g) above. \n\n<br>\nStore all  $(p{'}_{new}$ - $p{'}_{old})$  values in a NumPy array called `p_diffs`.","88193362":"### ToDo 1.2\n\n**a.** How many unique **user_id**s are in **df2**?","aa67c3d8":"**b.** What is the **conversion rate** for $p_{old}$ under the null hypothesis? ","53c2a72b":"> The $Z_{score}$ is less than $Z_{0.05}$, So we fail to reject the null hypothesis.","19f59ed1":"**b.** Use the cell below to find the number of rows in the dataset.","14ece8ed":"\n\n**l. Using Built-in Methods for Hypothesis Testing**<br>\nWe could also use a built-in to achieve similar results.","2bc8d30a":"<a id='ab_test'><\/a>\n## Part II - A\/B Test\n\n### ToDo 2.1\nFor now, consider we need to make the decision just based on all the data provided.  \n\nIf we want to assume that the old page is better unless the new page proves to be definitely better at a Type I error rate of 5%, what should be our null and alternative hypotheses (**$H_0$** and **$H_1$**)?  \n","9fedaaae":"### ToDo 2.2 - Null Hypothesis $H_0$ Testing\nUnder the null hypothesis $H_0$, assume that $p_{new}$ and $p_{old}$ are equal. Furthermore, assume that $p_{new}$ and $p_{old}$ both are equal to the **converted** success rate in the `df2` data regardless of the page. So, our assumption is: <br><br>\n<center>\n$p_{new}$ = $p_{old}$ = $p_{population}$\n<\/center>\n\nIn this section, We will: \n\n- Simulate (bootstrap) sample data set for both groups, and compute the  \"converted\" probability $p$ for those samples. \n\n\n- Use a sample size for each group equal to the ones in the `df2` data.\n\n\n- Compute the difference in the \"converted\" probability for the two samples above. \n\n\n- Perform the sampling distribution for the \"difference in the converted probability\" between the two simulated-samples over 10,000 iterations; and calculate an estimate. \n\n","2f2eae8d":"**c.** What is $n_{new}$, the number of individuals in the treatment group? <br><br>","b5471f3a":"### ToDo 1.1\n\n**a.** Read in the dataset from the `ab_data.csv` file and take a look at the top few rows here:\n","7ac14eab":"**h. Fit our model and obtain the results**<br> \nThough we have now looked at the individual factors of country and page on conversion, we would now like to look at an interaction between page and country to see if are there significant effects on conversion.","a6960c84":"> Since the p-value is much more than the type I error rate, We can not reject the null hypothesis. Therefore, There is no significant difference between the old and the new pages.","2dbd85de":"**i. Histogram**<br> \nPlot a histogram of the **p_diffs**."}}