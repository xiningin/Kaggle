{"cell_type":{"42229d33":"code","24e8c178":"code","69098614":"code","2656a9c4":"code","f8eb264a":"code","6ed742ad":"code","dc37eec0":"code","9c78ba3b":"code","b6efdd41":"code","6ccc1f40":"code","f09082d7":"code","236812c1":"code","24afe3b0":"code","a0c1a471":"code","7fa681ce":"code","a267e268":"code","b97c5423":"code","a930c811":"code","3ab1894c":"code","0cd32dd4":"code","f8b09274":"code","f2d825b5":"code","d7dc2ade":"code","e0e7d5f2":"code","54db1ff2":"code","b762630d":"code","82081904":"code","3b0719bb":"code","9579bf27":"code","c47861eb":"code","06c31bb3":"code","83edbe6b":"code","3f61f6c1":"code","5525ae28":"code","4d83b577":"markdown","e710d5cd":"markdown","0a6ca2d9":"markdown"},"source":{"42229d33":"import numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\nfrom tqdm.notebook import tqdm\nimport inspect\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","24e8c178":"data_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\n\ntraining_tasks = sorted(os.listdir(training_path))\nevaluation_tasks = sorted(os.listdir(evaluation_path))\ntest_tasks = sorted(os.listdir(test_path))","69098614":"# from: https:\/\/www.kaggle.com\/boliu0\/visualizing-all-task-pairs-with-gridlines\n\ncmap = colors.ListedColormap(\n    ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n\ndef plot_one(ax, i,train_or_test,input_or_output):\n   \n    input_matrix = task[train_or_test][i][input_or_output]\n    ax.imshow(input_matrix, cmap=cmap, norm=norm)\n    ax.grid(True,which='both',color='lightgrey', linewidth=0.5)    \n    ax.set_yticks([x-0.5 for x in range(1+len(input_matrix))])\n    ax.set_xticks([x-0.5 for x in range(1+len(input_matrix[0]))])     \n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_title(train_or_test + ' '+input_or_output)\n    \n\ndef plot_task(task):\n    \"\"\"\n    Plots the first train and test pairs of a specified task,\n    using same color scheme as the ARC app\n    \"\"\"    \n    num_train = len(task['train'])\n    fig, axs = plt.subplots(2, num_train, figsize=(3*num_train,3*2))\n    for i in range(num_train):     \n        plot_one(axs[0,i],i,'train','input')\n        plot_one(axs[1,i],i,'train','output')        \n    plt.tight_layout()\n    plt.show()        \n        \n    num_test = len(task['test'])\n    fig, axs = plt.subplots(2, num_test, figsize=(3*num_test,3*2))\n    if num_test==1: \n        plot_one(axs[0],0,'test','input')\n        plot_one(axs[1],0,'test','output')     \n    else:\n        for i in range(num_test):      \n            plot_one(axs[0,i],i,'test','input')\n            plot_one(axs[1,i],i,'test','output')  \n    plt.tight_layout()\n    plt.show()\n\nplt.figure(figsize=(5, 2), dpi=200)\nplt.imshow([list(range(10))], cmap=cmap, norm=norm)\nplt.xticks(list(range(10)))\nplt.yticks([])\nplt.show()","2656a9c4":"# from: https:\/\/www.kaggle.com\/nagiss\/manual-coding-for-the-first-10-tasks\n\ndef get_data(task_filename):\n    with open(task_filename, 'r') as f:\n        task = json.load(f)\n    return task\n\nnum2color = [\"black\", \"blue\", \"red\", \"green\", \"yellow\", \"gray\", \"magenta\", \"orange\", \"sky\", \"brown\"]\ncolor2num = {c: n for n, c in enumerate(num2color)}\n\ndef check_p(task, pred_func):\n    n = len(task[\"train\"]) + len(task[\"test\"])\n    fig, axs = plt.subplots(3, n, figsize=(4*n,12), dpi=50)\n    plt.subplots_adjust(wspace=0.3, hspace=0.3)\n    fig_num = 0\n    for i, t in enumerate(task[\"train\"]):\n        t_in, t_out = np.array(t[\"input\"]).astype('uint8'), np.array(t[\"output\"]).astype('uint8')\n        sz_out = t_out.shape\n        if len(inspect.getargspec(pred_func).args)==1:\n            t_pred = pred_func(t_in)\n        else:\n            t_pred = pred_func(t_in,sz_out)\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Train-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Train-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        axs[2][fig_num].imshow(t_pred, cmap=cmap, norm=norm)\n        axs[2][fig_num].set_title(f'Train-{i} pred')\n        axs[2][fig_num].set_yticks(list(range(t_pred.shape[0])))\n        axs[2][fig_num].set_xticks(list(range(t_pred.shape[1])))\n        fig_num += 1\n    for i, t in enumerate(task[\"test\"]):\n        t_in, t_out = np.array(t[\"input\"]).astype('uint8'), np.array(t[\"output\"]).astype('uint8')\n        if len(inspect.getargspec(pred_func).args)==1:\n            t_pred = pred_func(t_in)\n        else:\n            t_pred = pred_func(t_in,sz_out)\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Test-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Test-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        axs[2][fig_num].imshow(t_pred, cmap=cmap, norm=norm)\n        axs[2][fig_num].set_title(f'Test-{i} pred')\n        axs[2][fig_num].set_yticks(list(range(t_pred.shape[0])))\n        axs[2][fig_num].set_xticks(list(range(t_pred.shape[1])))\n        fig_num += 1","f8eb264a":"def train(task, pred_func):\n    try:\n        ok = 0\n        for i, t in enumerate(task[\"train\"]):\n            t_in, t_out = np.array(t[\"input\"]).astype('uint8'), np.array(t[\"output\"]).astype('uint8')\n            sz_out = t_out.shape\n            if len(inspect.getargspec(pred_func).args)==1:\n                t_pred = pred_func(t_in)\n            else:\n                t_pred = pred_func(t_in,sz_out)\n            if len(t_out)==len(t_pred):\n                if len(t_out)==1:\n                    if t_pred==t_out:\n                        ok += 1\n                elif (t_pred==t_out).all():\n                    ok += 1\n        t_pred = []\n        if ok==len(task[\"train\"]):\n            for i, t in enumerate(task[\"test\"]):\n                t_in = np.array(t[\"input\"]).astype('uint8')\n                if len(inspect.getargspec(pred_func).args)==1:\n                    t_pred.append(pred_func(t_in))\n                else:\n                    t_pred.append(pred_func(t_in, sz_out))\n                return t_pred\n        else:\n            return None\n    except:\n        return None","6ed742ad":"def flattener(pred):\n    str_pred = str([row for row in pred])\n    return str_pred.replace(', ', '').replace('[[', '|').replace('][', '|').replace(']]', '|')","dc37eec0":"def crop_min(a):\n    try:\n        b = np.bincount(a.flatten(),minlength=10)\n        c = int(np.where(b==np.min(b[np.nonzero(b)]))[0])\n        coords = np.argwhere(a==c)\n        x_min, y_min = coords.min(axis=0)\n        x_max, y_max = coords.max(axis=0)\n        return a[x_min:x_max+1, y_min:y_max+1]\n    except:\n        return a  ","9c78ba3b":"def crop_max(a):\n    try:\n        b = np.bincount(a.flatten(),minlength=10)\n        b[0] = 255\n        c = np.argsort(b)[-2]\n        coords = np.argwhere(a==c)\n        x_min, y_min = coords.min(axis=0)\n        x_max, y_max = coords.max(axis=0)\n        return a[x_min:x_max+1, y_min:y_max+1]\n    except:\n        return a","b6efdd41":"def resize_o(a,s):\n    try:\n        nx,ny = s[1]\/\/a.shape[1],s[0]\/\/a.shape[0]\n        return np.repeat(np.repeat(a, nx, axis=0), ny, axis=1)\n    except:\n        return a","6ccc1f40":"def resize_c(a):\n    c = np.count_nonzero(np.bincount(a.flatten(),minlength=10)[1:])\n    return np.repeat(np.repeat(a, c, axis=0), c, axis=1)","f09082d7":"def resize_2(a):\n    return np.repeat(np.repeat(a, 2, axis=0), 2, axis=1)","236812c1":"def repeat_1(a,s):\n    try:\n        si = a.shape\n        nx,ny = s[1]\/\/si[1],s[0]\/\/si[0]\n        return np.tile(a,(nx,ny))\n    except:\n        return a","24afe3b0":"def repeat_2(a):\n    return np.tile(a,a.shape)","a0c1a471":"task = get_data(str(evaluation_path \/ evaluation_tasks[325]))\ncheck_p(task, resize_c)","7fa681ce":"task = get_data(str(evaluation_path \/ evaluation_tasks[148]))\ncheck_p(task, resize_2)","a267e268":"task = get_data(str(training_path \/ training_tasks[222]))\ncheck_p(task, resize_o)","b97c5423":"task = get_data(str(evaluation_path \/ evaluation_tasks[311]))\ncheck_p(task, repeat_2)","a930c811":"task = get_data(str(training_path \/ training_tasks[268]))\ncheck_p(task, resize_c)","3ab1894c":"task = get_data(str(training_path \/ training_tasks[288]))\ncheck_p(task, resize_o)","0cd32dd4":"task = get_data(str(training_path \/ training_tasks[13]))\ncheck_p(task, crop_min)","f8b09274":"task = get_data(str(training_path \/ training_tasks[30]))\ncheck_p(task, crop_min)","f2d825b5":"task = get_data(str(training_path \/ training_tasks[35]))\ncheck_p(task, crop_min)","d7dc2ade":"task = get_data(str(training_path \/ training_tasks[48]))\ncheck_p(task, crop_min)","e0e7d5f2":"task = get_data(str(training_path \/ training_tasks[309]))\ncheck_p(task, crop_min)","54db1ff2":"task = get_data(str(training_path \/ training_tasks[383]))\ncheck_p(task, crop_min)","b762630d":"task = get_data(str(training_path \/ training_tasks[262]))\ncheck_p(task, crop_max)","82081904":"task = get_data(str(training_path \/ training_tasks[299]))\ncheck_p(task, crop_max)","3b0719bb":"task = get_data(str(evaluation_path \/ evaluation_tasks[251]))\ncheck_p(task, repeat_1)","9579bf27":"task = get_data(str(training_path \/ training_tasks[176]))\ncheck_p(task, crop_max)","c47861eb":"task = get_data(str(training_path \/ training_tasks[87]))\ncheck_p(task, crop_max)","06c31bb3":"task = get_data(str(evaluation_path \/ evaluation_tasks[224]))\ncheck_p(task, crop_max)","83edbe6b":"submission = pd.read_csv(data_path \/ 'sample_submission.csv', index_col='output_id')","3f61f6c1":"for output_id in tqdm(submission.index):\n    task_id = output_id.split('_')[0]\n    pair_id = int(output_id.split('_')[1])\n    f = test_path \/ str(task_id + '.json')\n    if f.is_file():\n        task = get_data(f)\n        data = task['test'][pair_id]['input']   \n        pred_1 = flattener(data)\n        for oper in ['crop_min','crop_max','resize_o','resize_c','resize_2','repeat_1','repeat_2']:\n            data = train(task, globals()[oper])\n            if data: \n                pred_1 = flattener(data)\n                break\n        \n    data = task['test'][pair_id]['input']\n    pred_2 = flattener(data)\n    data = [[5 if i==0 else i for i in j] for j in data]\n    pred_3 = flattener(data)\n    \n    # concatenate and add to the submission output\n    pred = pred_1 + ' ' + pred_2 + ' ' + pred_3 + ' ' \n    submission.loc[output_id, 'output'] = pred","5525ae28":"submission.to_csv('submission.csv')","4d83b577":"# Some useful basic functions","e710d5cd":"## Test Submission","0a6ca2d9":"## Some usage examples"}}