{"cell_type":{"8053e9b5":"code","4716507e":"code","746ea8cd":"code","f6cdbd74":"code","672fc37f":"code","7bb4668a":"code","f90d778b":"code","98ae9030":"code","144e468e":"code","7ca8e9d5":"code","dcacfcec":"markdown","f458be37":"markdown","38a267b8":"markdown","14632f5b":"markdown","d2980cb7":"markdown","d915d165":"markdown","aab92640":"markdown","bef00f8b":"markdown"},"source":{"8053e9b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline  \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4716507e":"df=pd.read_csv('\/kaggle\/input\/wine-reviews\/winemag-data_first150k.csv')\ndf.dropna(subset=['region_1','points','price'],inplace=True)\ndf.drop(['Unnamed: 0'],axis=1, inplace=True)\ndf.drop_duplicates(inplace=True)\nregions=df.region_1.unique()\ndf1=pd.read_csv('\/kaggle\/input\/df1df1df1\/df1.csv')\n# there is another Cuyo in Philippines, I fix the data for the wine region\ndf1.iloc[866,2]=-32.970970\ndf1.iloc[866,3]=-68.851790","746ea8cd":"import matplotlib.ticker as mtick\nfrom statistics import median\nimport matplotlib.pyplot as plt\nimport matplotlib\n\nmedians_std=100*df.groupby(['region_1']).std()\/df.groupby(['region_1']).median()\nmedians_std.plot(figsize=(40,20))\n\nstring='Median std as % of median value of'+'\\nprices: '+str(100*median(medians_std['price']))+\" ; \"+'\\npoints: '+str(100*medians_std['points'].median())\nplt.legend(prop={'family':'serif',\"size\":'40'})\nplt.yticks(family='serif', size=40)\nplt.yticks(family='serif', size=40)\nplt.ylabel('%', fontsize=40,family='serif')\nplt.xlabel(\"\")\nplt.title(label='Standard deviation as per cent of a median value of a price or points in a region', fontsize=40,family='serif')\nplt.tick_params(bottom=False, labelbottom=False) ","f6cdbd74":"region_mentions=df.region_1.value_counts()\ndf2=pd.merge(df, df1, on=['region_1'])\n\n#let's count mentions of regions \nvalue_counts=pd.DataFrame(df2['region_1'].value_counts())\nvalue_counts.reset_index(inplace=True)\nvalue_counts.columns=['region_1','value counts']\ndf1=pd.merge(df1,value_counts,on=['region_1'])\n\n#calculate average price and points per region\nregion_points_sum=pd.DataFrame(df.groupby('region_1')['points'].sum()).reset_index()\nregion_price_sum=pd.DataFrame(df.groupby('region_1')['price'].sum()).reset_index()\ndf1=pd.merge(region_price_sum,df1,on='region_1')\ndf1=pd.merge(region_points_sum,df1,on='region_1')\ndf1['points']=df1['points']\/df1['value counts']\ndf1['price']=df1['price']\/df1['value counts']\n\n#quality\/price ratio\ndf1['quality\/price']=df1['points']\/df1['price']","672fc37f":"import matplotlib.pyplot as plt\nimport plotly.express as px\nfig = px.scatter_mapbox(df1,                        \n                            lat=\"latitude\",                        lon=\"longitude\",\n                        color=\"points\",\n                        color_continuous_scale='Bluered', \n                        hover_name=\"region_1\",\n                        height=600,\n                        zoom=1,\n                        size=\"price\",\n                        size_max=10,\n                        opacity=0.4,\n                        width=1300)\nfig.update_layout(mapbox_style='open-street-map')\nfig.show()","7bb4668a":"import matplotlib.pyplot as plt\nimport plotly.express as px\nfig = px.scatter_mapbox(df1,                        \n                            lat=\"latitude\",                        lon=\"longitude\",\n                        color=\"points\",\n                        zoom=1,\n                        color_continuous_scale='Bluered', \n                        hover_name=\"region_1\",\n                        height=600,\n                        size=\"quality\/price\",\n                        size_max=30,\n                        opacity=0.4,\n                        width=1300)\nfig.update_layout(mapbox_style='open-street-map')\nfig.show()","f90d778b":"df['quality\/price']=df['points']\/df['price']\ndf['variety+winery']=df['variety']+\" \"+df['winery']\n#top 20 wineries all over the world\ntop20wineries=df.sort_values(by='quality\/price',ascending=False)[0:20]\n# top15 wineries from the top regions\ntop10=df1.sort_values(by='quality\/price',ascending=False)['region_1'][0:10]\ndftop10=None\nfor i in list(top10): \n    dftop10=pd.concat([dftop10,df[df['region_1']==i]], sort=False)\ndftop10.sort_values(by='quality\/price',ascending=True, inplace=True)\ndftop10.plot(kind='barh', x='variety+winery',  figsize=(30,20))\nplt.legend(prop={'family':'serif',\"size\":'40'})\nplt.yticks(family='serif', size=40)\nplt.xticks(family='serif', size=30)\nplt.ylabel('Full title: variety and winery', fontsize=40,family='serif')\nplt.xlabel('Score', fontsize=40,family='serif')\nplt.title(label='Wines from the top 10 regions', fontsize=60,family='serif')","98ae9030":"dftop10.reset_index(inplace=True)\nprint(dftop10['variety+winery'])","144e468e":"top20wineries.sort_values(by='quality\/price',ascending=True, inplace=True)\ntop20wineries.plot(kind='barh', x='variety+winery',  figsize=(30,30))\nplt.legend(prop={'family':'serif',\"size\":'40'})\nplt.yticks(family='serif', size=40)\nplt.xticks(family='serif', size=30)\nplt.ylabel('Full title: variety and winery', fontsize=40,family='serif')\nplt.xlabel('Score', fontsize=40,family='serif')\nplt.title(label='Wines from the top 20 wineries', fontsize=60,family='serif')","7ca8e9d5":"top20wineries.reset_index(inplace=True)\nprint(top20wineries['variety+winery'])","dcacfcec":"<p style = \"font-family:palatino linotype,serif;font-size:40px;\"> Color of bubbles = Ranking points <br\/>\nSize of bubbles = Ranking points divide the price <\/p>\n    ","f458be37":"# <p style = \"font-family:palatino linotype,serif;font-size:40px;\"> Receiving the data of longitudes and latitudes. <\/p> \n<p style = \"font-family:palatino linotype,serif;font-size:16px;\"> It took 10 min after the launch of this chunk, so I markdown the code and save df in input. Unfortunately, not for all regions geolocation were found (875\/1197) <\/p>","38a267b8":"# <p style = \"font-family:palatino linotype,serif;font-size:40px;\"> A little tip for those who go for a wine <\/p>\n<p style = \"font-family:palatino linotype,serif;font-size:16px;\"> Christmas and New Year eve is coming and we all going to have a good time with our folks. So, here I decided to add a list of all wines from the top 10 regions according to quality\/price parameter as well as top 20 wineries from all over the World.  <\/p>","14632f5b":"<p style = \"font-family:palatino linotype,serif;font-size:40px;\"> Color of bubbles = Ranking points <br\/>\nSize of bubbles = The price <\/p>\n    ","d2980cb7":"# <p style = \"font-family:palatino linotype,serif;font-size:40px;\"> The prices of wines in a region vary dramatically whereas the ranking scores are far more stable <p\/>","d915d165":"<p style = \"font-family:monospace;font-size:16px;\"> \nfrom geopy.geocoders import Nominatim \ngeolocator = Nominatim(user_agent=\"wsdfb\") \nlatitude=[] \nlongitude=[] \nerrors=[] \nproved_regions=[] \nfor i in regions: \n    try: \n        location = geolocator.geocode(str(i)) \n        latitude.append(location.latitude) \n        longitude.append(location.longitude) \n        proved_regions.append(i) \n    except AttributeError: \n        errors.append(i)\ndf1=pd.DataFrame({'region_1':proved_regions,'latitude':latitude,'longitude':longitude}) \ndf1.to_csv(r'df1.csv') \n\n<\/p>\n","aab92640":"![<a href=\"https:\/\/ibb.co\/tM7VyV4\"><img src=\"https:\/\/i.ibb.co\/hRP3p3y\/Facebook-851x315.jpg\" alt=\"Facebook-851x315\" border=\"0\"><\/a>](https:\/\/i.ibb.co\/hRP3p3y\/Facebook-851x315.jpg)\n<p style = \"font-family:palatino linotype,serif;font-size:16px;\">\n   When it comes to wine, mapping the best regions may be helpful for amateur sommelier like me. <br \/> First longitudes and latitudes of all regions were scraped with geopy. Then, the data were aggregated for each region and median prices and ranking points were calculated. Although the values of regional prices are extremely volatile, it was possible to highlight regions with highest\/lowest quality\/price ratio.<br \/>\n<ol style = \"font-family:palatino linotype,serif;font-size:16px;\">\n    <p style = \"font-family:palatino linotype,serif;font-size:16px;\"> Contents:<\/p>\n    <li>receiving the coordinates of regions<\/li>\n    <li>price&points volatility assessment<\/li>\n    <li>maps of wine regions<\/li>\n<\/ol>\n<\/p>","bef00f8b":"# <p style = \"font-family:palatino linotype,serif;font-size:40px;\">Geomaps of the best wine regions <\/p>\n<p style = \"font-family:palatino linotype,serif;font-size:40px;\">\n    \n<p style = \"font-family:palatino linotype,serif;font-size:16px;\"> \nHere I would like to show bubble maps of the regions. As you might notice a French road from Beaune to Dijon in Bourgogne-Franche-Comt\u00e9 province is the most remarkable cluster for wine. However, please, take into consideration the prices for wines in this area, because they are outstanding as well. Surprisingly (at least for me), the region with the highest quality\/price ratio of wine is Cuyo (Argentina). <\/p>\n<p style = \"font-family:palatino linotype,serif;font-size:16px;\"> \nUnfortunately, Kaggle environment does not allow any interactive widgets, therefore I will show you a couple of geoplots with size\/colour combinations.<\/p>"}}