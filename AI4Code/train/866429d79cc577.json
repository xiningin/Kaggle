{"cell_type":{"cba108d3":"code","2801a21d":"code","fd1ced3b":"code","b4ab4a75":"code","c41f495d":"code","e9e1d0a6":"code","fda2573d":"code","710a32c8":"code","ae4f8524":"code","0158123e":"code","74915a4e":"code","a655aaa2":"code","551dbc64":"code","494ec754":"code","58752951":"code","b8dab105":"code","f0d687f0":"code","d14d6fb5":"markdown","8194f416":"markdown","4c90a11c":"markdown","c5eed99b":"markdown","713ca5c1":"markdown","eae03c87":"markdown","f57f5bc7":"markdown"},"source":{"cba108d3":"# import library\nimport os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib_venn import venn2, venn2_circles\nimport seaborn as sns\nfrom tqdm.notebook import tqdm\nimport pathlib\nimport plotly\nimport plotly.express as px","2801a21d":"def calc_haversine(lat1, lon1, lat2, lon2):\n    \"\"\"Calculates the great circle distance between two points\n    on the earth. Inputs are array-like and specified in decimal degrees.\n    \"\"\"\n    RADIUS = 6_367_000\n    lat1, lon1, lat2, lon2 = map(np.radians, [lat1, lon1, lat2, lon2])\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = np.sin(dlat\/2)**2 + \\\n        np.cos(lat1) * np.cos(lat2) * np.sin(dlon\/2)**2\n    dist = 2 * RADIUS * np.arcsin(a**0.5)\n    return dist","fd1ced3b":"def visualize_trafic(df, center, zoom=9):\n    fig = px.scatter_mapbox(df,\n                            \n                            # Here, plotly gets, (x,y) coordinates\n                            lat=\"latDeg\",\n                            lon=\"lngDeg\",\n                            \n                            #Here, plotly detects color of series\n                            color=\"phoneName\",\n                            labels=\"phoneName\",\n                            \n                            zoom=zoom,\n                            center=center,\n                            height=600,\n                            width=800)\n    fig.update_layout(mapbox_style='stamen-terrain')\n    fig.update_layout(margin={\"r\": 0, \"t\": 0, \"l\": 0, \"b\": 0})\n    fig.update_layout(title_text=\"GPS trafic\")\n    fig.show()\n    \ndef visualize_collection(df, collection):\n    target_df = df[df['collectionName']==collection].copy()\n    lat_center = target_df['latDeg'].mean()\n    lng_center = target_df['lngDeg'].mean()\n    center = {\"lat\":lat_center, \"lon\":lng_center}\n    \n    visualize_trafic(target_df, center)","b4ab4a75":"def add_distance_diff(df):\n    df['latDeg_prev'] = df['latDeg'].shift(1)\n    df['latDeg_next'] = df['latDeg'].shift(-1)\n    df['lngDeg_prev'] = df['lngDeg'].shift(1)\n    df['lngDeg_next'] = df['lngDeg'].shift(-1)\n    df['phone_prev'] = df['phone'].shift(1)\n    df['phone_next'] = df['phone'].shift(-1)\n    \n    df['latDeg_gt_prev'] = df['latDeg_gt'].shift(1)\n    df['latDeg_gt_next'] = df['latDeg_gt'].shift(-1)\n    df['lngDeg_gt_prev'] = df['lngDeg_gt'].shift(1)\n    df['lngDeg_gt_next'] = df['lngDeg_gt'].shift(-1)    \n    \n    df['latDeg_prev_diff'] = df['latDeg'] - df['latDeg_prev']\n    df['latDeg_next_diff'] = df['latDeg_next'] - df['latDeg']\n    df['latDeg_gt_prev_diff'] = df['latDeg_gt'] - df['latDeg_gt_prev']\n    df['latDeg_gt_next_diff'] = df['latDeg_gt_next'] - df['latDeg_gt']\n    \n    df['lngDeg_prev_diff'] = df['lngDeg'] - df['lngDeg_prev']\n    df['lngDeg_next_diff'] = df['lngDeg_next'] - df['lngDeg']\n    df['lngDeg_gt_prev_diff'] = df['lngDeg_gt'] - df['lngDeg_gt_prev']\n    df['lngDeg_gt_next_diff'] = df['lngDeg_gt_next'] - df['lngDeg_gt']\n    \n    df['dist_prev'] = calc_haversine(df['latDeg'], df['lngDeg'], df['latDeg_prev'], df['lngDeg_prev'])\n    df['dist_next'] = calc_haversine(df['latDeg'], df['lngDeg'], df['latDeg_next'], df['lngDeg_next'])\n    \n    df['dist_gt_prev'] = calc_haversine(df['latDeg_gt'], df['lngDeg_gt'], df['latDeg_gt_prev'], df['lngDeg_gt_prev'])\n    df['dist_gt_next'] = calc_haversine(df['latDeg_gt'], df['lngDeg_gt'], df['latDeg_gt_next'], df['lngDeg_gt_next'])\n    \n    df.loc[df['phone']!=df['phone_prev'], ['latDeg_prev', 'lngDeg_prev', 'dist_prev', 'latDeg_gt_prev', 'lngDeg_gt_prev', 'dist_gt_prev', \n                                           'latDeg_prev_diff', 'latDeg_gt_prev_diff', 'lngDeg_prev_diff', 'lngDeg_gt_prev_diff']] = np.nan\n    \n    df.loc[df['phone']!=df['phone_next'], ['latDeg_next', 'lngDeg_next', 'dist_next', 'latDeg_gt_next', 'lngDeg_gt_next', 'dist_gt_next',\n                                           'latDeg_next_diff', 'latDeg_gt_next_diff', 'lngDeg_next_diff', 'lngDeg_gt_next_diff']] = np.nan\n    \n    return df","c41f495d":"# directory setting\nINPUT = '..\/input\/google-smartphone-decimeter-challenge'","e9e1d0a6":"train = pd.read_csv(INPUT + '\/' + 'baseline_locations_train.csv')\ntest = pd.read_csv(INPUT + '\/' + 'baseline_locations_test.csv')\nsample_sub = pd.read_csv(INPUT + '\/' + 'sample_submission.csv')","fda2573d":"# ground_truth\np = pathlib.Path(INPUT)\ngt_files = list(p.glob('train\/*\/*\/ground_truth.csv'))\n\ngts = []\nfor gt_file in gt_files:\n    gts.append(pd.read_csv(gt_file))\nground_truth = pd.concat(gts)","710a32c8":"# preparing data for viz\ntmp1 = ground_truth.copy()\ntmp1['phone'] = tmp1['collectionName'] + '_' + tmp1['phoneName']\ntmp1['phoneName'] = tmp1['phoneName'] + '_GT'\ntmp = train.append(tmp1)","ae4f8524":"visualize_trafic(tmp[tmp['phone']=='2020-05-14-US-MTV-1_Pixel4XLModded'],\n                 center={\"lat\":37.6458, \"lon\":-122.4056}, zoom=19)","0158123e":"visualize_trafic(tmp[tmp['phone']=='2020-06-04-US-MTV-1_Pixel4'],\n                 center={\"lat\":37.41634, \"lon\":-122.0805}, zoom=19)","74915a4e":"ground_truth = ground_truth.rename(columns={'latDeg':'latDeg_gt', 'lngDeg':'lngDeg_gt', 'heightAboveWgs84EllipsoidM':'heightAboveWgs84EllipsoidM_gt'})\ntrain = train.merge(ground_truth, on=['collectionName', 'phoneName', 'millisSinceGpsEpoch'], how='inner')\ntrain['dist_err'] = calc_haversine(train['latDeg_gt'], train['lngDeg_gt'], train['latDeg'], train['lngDeg'])\ntrain = add_distance_diff(train)","a655aaa2":"train['speedMps'].hist()\nplt.title('Distribution of \"speedMps\"')","551dbc64":"train.loc[train['speedMps']==0.0,'speed0'] = 'speed = 0'\ntrain.loc[train['speedMps']>0.0,'speed0'] = 'speed > 0'","494ec754":"sns.boxplot(x='speed0', y='dist_err', data=train, showfliers = False)","58752951":"def visualize_err_move_dist(df, phone, reject_outlier=True):\n    '''\n    visualize baseline error and relative move distance\n    '''\n    fig, axes = plt.subplots(figsize=(20, 10), nrows=2,sharex=True)\n    df = df[df['phone']==phone]\n    if reject_outlier:\n        th = (df['dist_err'].std() * 3) + df['dist_err'].mean()\n        df = df[df['dist_err']<th]\n    \n    axes[0].plot(df['millisSinceGpsEpoch'], df['dist_err'], label='err(baseline)')\n    axes[1].plot(df['millisSinceGpsEpoch'], df['speedMps'], label='speedMps')\n    axes[1].plot(df['millisSinceGpsEpoch'], df['dist_prev'], label='move dist(baseline)')\n    axes[1].plot(df['millisSinceGpsEpoch'], df['dist_gt_prev'], label='move dist(ground_truth)')\n    axes[0].legend(loc='upper right')\n    axes[1].legend(loc='upper right')\n    axes[0].grid(color='g', linestyle=':', linewidth=0.3)\n    axes[1].grid(color='g', linestyle=':', linewidth=0.3)\n    fig.suptitle(phone, fontsize=16)","b8dab105":"visualize_err_move_dist(train, '2020-05-14-US-MTV-1_Pixel4XLModded')","f0d687f0":"phones = train['phone'].unique()\nfor phone in phones:\n    visualize_err_move_dist(train, phone)","d14d6fb5":"View all phone results below","8194f416":"We just looked at a few examples, but even when looking at the entire train data,  \nthe error appears to be large when the car is stopped.","4c90a11c":"# utils","c5eed99b":"# EDA","713ca5c1":"As you can see in the graph above, the baseline coordinates seem to vary widely,  \neven though the car is stopped at the start or goal and the ground_truth coordinates have not changed.","eae03c87":"The speed of the train data is held by ground_truth.  \nLooking at this distribution, we can see that there are many records with speed = 0.","f57f5bc7":"Let's check the time series of baseline error and move distance  \nfor the example we just checked on the map.  \n\nAs you can see in the graph below,  \nthe baseline is moving a lot while it is actually stopped at the start and end points.  \n\nI am not sure about the cause,  \nbut I think this approach to reduce the error may be effective.\n\n(supplement)  \nmove_dist(ground_truth) and speedMps are almost identical.   \nIs the speed being calculated based on the coordinates?"}}