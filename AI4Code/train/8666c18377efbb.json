{"cell_type":{"eb330175":"code","182144f3":"code","6f3e56ea":"code","08510c2a":"code","b2a98a25":"code","8807a4d0":"code","e37149c5":"code","b8f05a0d":"code","f3f133d7":"code","79a36be7":"code","d54bae7d":"code","9ae7e469":"code","bfea3f5d":"code","8c91dccc":"code","35f8f7a1":"code","e3c63e14":"code","07430500":"code","9d495ad0":"code","3e3efa7e":"code","82ef6c45":"code","de256fd8":"code","9c1ed4b3":"code","c9c6aa9b":"markdown","097ee9e7":"markdown","5bb5c73d":"markdown","10686598":"markdown","a198719b":"markdown","55644bda":"markdown","0d04c9be":"markdown","5b9e36c4":"markdown","55e4b620":"markdown","8522b511":"markdown","9f67d51c":"markdown","9326558b":"markdown","34586380":"markdown","6f570dc4":"markdown","1e3f59e5":"markdown","221dffaf":"markdown","f74a1223":"markdown","b4579ab5":"markdown","c46a160d":"markdown","d2258b8a":"markdown","76d5e6fe":"markdown","b9a47272":"markdown","576bc9a5":"markdown","e822edc0":"markdown","10be64bc":"markdown","7c941ee5":"markdown","dc316ed3":"markdown","51b4c152":"markdown"},"source":{"eb330175":"# # This Python 3 environment comes with many helpful analytics libraries installed\n# # It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# # For example, here's several helpful packages to load\n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# # Input data files are available in the read-only \"..\/input\/\" directory\n# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# # You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# # You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","182144f3":"import torch\nimport cv2\nimport os\nimport torch.nn as tnn\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.express as px\nimport seaborn as sns\n\nfrom PIL import Image\nfrom skimage import io, transform\nfrom torchvision.transforms import transforms\nfrom torchvision import utils\nfrom torchvision import datasets\nfrom torch.utils.data import DataLoader, Dataset\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom collections import Counter\n","6f3e56ea":"IMAGE_PATH = \"..\/input\/plant-pathology-2021-fgvc8\/train_images\/\"\nTEST_IMG_PATH = \"..\/input\/plant-pathology-2021-fgvc8\/test_images\/\"\nTRAIN_PATH = \"..\/input\/plant-pathology-2021-fgvc8\/train.csv\"\nSUB_PATH = \"..\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv\"","08510c2a":"train_labels = pd.read_csv(TRAIN_PATH)\ntrain_labels","b2a98a25":"train_labels['labels'].unique()","8807a4d0":"plt.figure(figsize=(18,12))\nplt.title(\"Ph\u00e2n ph\u1ed1i s\u1ed1 l\u01b0\u1ee3ng \u1ea3nh trong c\u00e1c nh\u00e3n\",size= 25)\nplt.ylabel(\"S\u1ed1 l\u01b0\u1ee3ng \u1ea3nh\", size=20);\nplt.xlabel(\"Nh\u00e3n\", size=20);\nlabels = sns.barplot(train_labels.labels.value_counts().index,train_labels.labels.value_counts())\nfor item in labels.get_xticklabels():\n    item.set_rotation(45)\nplt.savefig('plot.png')","e37149c5":"mlb = MultiLabelBinarizer().fit(train_labels.labels.apply(lambda x : x.split()))\nlabels = pd.DataFrame(mlb.transform(train_labels.labels.apply(lambda x : x.split())), columns = mlb.classes_)\n\nlabels = pd.concat([train_labels['image'], labels], axis=1)\nlabels.head()","b8f05a0d":"data = ['1','2','3']\nvalue = labels.iloc[:,1:].sum(axis=1).value_counts().values\ncolors = ['mediumturquoise', 'burlywood','sandybrown']\nplt.figure(figsize=(8, 8))\nplt.bar(data, value, color = colors)\nplt.title('\u1ea2nh c\u00f3 nhi\u1ec1u nh\u00e3n',fontsize = 14)\nplt.xlabel('S\u1ed1 nh\u00e3n',fontsize = 12)\nplt.ylabel('S\u1ed1 l\u01b0\u1ee3ng \u1ea3nh',fontsize = 12)\nplt.savefig('plot2.png')\nplt.show()","f3f133d7":"img_name = labels.iloc[:,0].tolist()","79a36be7":"hs = []\nws = []\nfor i in range(len(img_name)):\n        img = Image.open(IMAGE_PATH+(img_name[i]))\n        h, w = img.size\n        hs.append(h)\n        ws.append(w)","d54bae7d":"labels, values = zip(*Counter(hs).items())\n\nindexes = np.arange(len(labels))\nwidth = 1\n\nplt.bar(indexes, values, width)\nplt.xticks(indexes + width * 0.5, labels)\nplt.savefig('plot4.png')\nplt.show()","9ae7e469":"labels, values = zip(*Counter(ws).items())\n\nindexes = np.arange(len(labels))\nwidth = 1\n\nplt.bar(indexes, values, width)\nplt.xticks(indexes + width * 0.5, labels)\nplt.savefig('plot5.png')\nplt.show()","bfea3f5d":"labels = pd.DataFrame(mlb.transform(train_labels.labels.apply(lambda x : x.split())), columns = mlb.classes_)\n\nlabels = pd.concat([train_labels['image'], labels], axis=1)","8c91dccc":"def visualize_batch(path,image_ids, labels):\n    plt.figure(figsize=(16, 12))\n    \n    for ind, (image_id, label) in enumerate(zip(image_ids, labels)):\n        plt.subplot(3, 3, ind + 1)\n        image = cv2.imread(os.path.join(path, image_id))\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n        plt.imshow(image)\n        plt.title(f\"Class: {label}\", fontsize=12)\n        plt.axis(\"off\")\n        plt.savefig('plot3.png')\n    plt.show()","35f8f7a1":"img_s = train_labels.sample(9)\nimage_ids = img_s[\"image\"].values\nlabels_s = img_s[\"labels\"].values\nvisualize_batch(IMAGE_PATH,image_ids,labels_s)","e3c63e14":"l_complex = labels.loc[labels['complex'] == 1].iloc[:,0].tolist()\nfrog_eye_leaf_spot = labels.loc[labels['frog_eye_leaf_spot'] == 1].iloc[:,0].tolist()\nhealthy = labels.loc[labels['healthy'] == 1].iloc[:,0].tolist()\npowdery_mildew = labels.loc[labels['powdery_mildew'] == 1].iloc[:,0].tolist()\nrust = labels.loc[labels['rust'] == 1].iloc[:,0].tolist()\nscab = labels.loc[labels['scab'] == 1].iloc[:,0].tolist()","07430500":"fig = plt.figure(figsize=(12, 12))\nfor i in range(0,9):\n        img_array = np.array(Image.open(IMAGE_PATH +healthy[i]))\n        fig.add_subplot(3, 3, i+1) \n        plt.imshow(img_array)","9d495ad0":"fig = plt.figure(figsize=(12, 12))\nfor i in range(0,9):\n        img_array = np.array(Image.open(IMAGE_PATH +l_complex[i]))\n        fig.add_subplot(3, 3, i+1) \n        plt.imshow(img_array)","3e3efa7e":"fig = plt.figure(figsize=(12, 12))\nfor i in range(0,9):\n        img_array = np.array(Image.open(IMAGE_PATH +frog_eye_leaf_spot[i]))\n        fig.add_subplot(3, 3, i+1) \n        plt.imshow(img_array)","82ef6c45":"fig = plt.figure(figsize=(12, 12))\nfor i in range(0,9):\n        img_array = np.array(Image.open(IMAGE_PATH +scab[i]))\n        fig.add_subplot(3, 3, i+1) \n        plt.imshow(img_array)","de256fd8":"fig = plt.figure(figsize=(12, 12))\nfor i in range(0,9):\n        img_array = np.array(Image.open(IMAGE_PATH +powdery_mildew[i]))\n        fig.add_subplot(3, 3, i+1) \n        plt.imshow(img_array)","9c1ed4b3":"fig = plt.figure(figsize=(12, 12))\nfor i in range(0,9):\n        img_array = np.array(Image.open(IMAGE_PATH +rust[i]))\n        fig.add_subplot(3, 3, i+1) \n        plt.imshow(img_array)","c9c6aa9b":"## Complex","097ee9e7":"### Nh\u1eadn x\u00e9t:\nC\u00e1c \u1ea3nh c\u00f3 k\u00edch c\u1ee1 kh\u00f4ng \u0111\u1ed3ng \u0111\u1ec1u, b\u00ean c\u1ea1nh \u0111\u00f3 d\u1eef li\u1ec7u \u1ea3nh r\u1ea5t l\u1edbn\n\n==> Gi\u1ea3i ph\u00e1p: Gi\u1ea3m k\u00edch c\u1ee1 \u1ea3nh, \u0111\u01b0a d\u1eef li\u1ec7u v\u1ec1 k\u00edch c\u1ee1 \u0111\u1ed3ng nh\u1ea5t","5bb5c73d":"### Nh\u1eadn x\u00e9t:\nC\u00e1c b\u1ec7nh \u0111\u01a1n l\u1ebb chi\u1ebfm t\u1ec9 l\u1ec7 l\u1edbn trong khi c\u00e1c b\u1ec7nh k\u1ebft h\u1ee3p r\u1ea5t hi\u1ebfm.\n\nKho\u1ea3ng 51% d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o thu\u1ed9c lo\u1ea1i Scab ho\u1eb7c Healthy. \n\n==> Do \u0111\u00f3 ta chuy\u1ec3n t\u1eeb b\u00e0i to\u00e1n ph\u00e2n lo\u1ea1i m\u1ed9t nh\u00e3n duy nh\u1ea5t cho \u1ea3nh,sang b\u00e0i to\u00e1n ph\u00e2n l\u1edbp \u0111a nh\u00e3n","10686598":"D\u1ea5u hi\u1ec7u c\u1ee7a c\u00e1c l\u00e1 b\u1ecb Powdery Mildew \u0111\u01b0\u1ee3c bao ph\u1ee7 m\u1ed9t l\u1edbp n\u1ea5m x\u00e1m d\u00e0y \u0111\u1eb7c nh\u01b0 b\u1ed9t ph\u1ea5n h\u1ebft c\u1ea3 phi\u1ebfn l\u00e1. L\u1edbp ph\u1ea5n tr\u1eafng xu\u1ea5t hi\u1ec7n tr\u00ean c\u1ea3 th\u00e2n, c\u00e0nh, hoa l\u00e0m hoa kh\u00f4 r\u1ee5ng v\u00e0 ch\u1ebft.","a198719b":"## Frog Eye Leaf Spot ","55644bda":"#### **Nh\u1eadn x\u00e9t:** \nD\u1eef li\u1ec7u g\u1ed3m 12 lo\u1ea1i nh\u00e3n. Trong \u0111\u00f3 c\u00f3 6 nh\u00e3n ch\u00ednh l\u00e0  healthy,scab, rust, complex, powdery_mildew v\u00e0 frog_eye_leaf_spot, 6 nh\u00e3n c\u00f2n l\u1ea1i l\u00e0 c\u00e1c nh\u00e3n k\u1ebft h\u1ee3p t\u1eeb 6 nh\u00e3n ch\u00ednh","0d04c9be":"# Gi\u1edbi thi\u1ec7u\n\u0110\u00e2y l\u00e0 cu\u1ed9c thi Plant Pathology 2021. M\u1ee5c ti\u00eau c\u1ee7a cu\u1ed9c thi n\u00e0y l\u00e0 x\u00e1c \u0111\u1ecbnh b\u1ec7nh c\u1ee7a c\u00e2y d\u1ef1a tr\u00ean h\u00ecnh \u1ea3nh c\u1ee7a l\u00e1, c\u00f3 r\u1ea5t nhi\u1ec1u lo\u1ea1i b\u1ec7nh. Gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 n\u00e0y r\u1ea5t quan tr\u1ecdng v\u00ec ch\u1ea9n \u0111o\u00e1n b\u1ec7nh c\u00e2y s\u1edbm c\u00f3 th\u1ec3 ti\u1ebft ki\u1ec7m h\u00e0ng t\u1ea5n n\u00f4ng s\u1ea3n h\u00e0ng n\u0103m. \nTrong notebook n\u00e0y, ch\u00fang ta s\u1ebd kh\u00e1m ph\u00e1 d\u1eef li\u1ec7u n\u00e0y c\u00f3 nh\u1eefng g\u00ec, tr\u1ef1c quan h\u00f3a n\u00f3 th\u00f4ng qua c\u00e1c h\u00ecnh \u1ea3nh, bi\u1ec3u \u0111\u1ed3","5b9e36c4":"**M\u00f4 t\u1ea3 d\u1eef li\u1ec7u:**\n\nD\u1eef li\u1ec7u l\u01b0u gi\u1eef h\u00ecnh \u1ea3nh c\u1ee7a c\u00e2y t\u00e1o. L\u00e1 c\u00e2y kh\u1ecfe m\u1ea1nh v\u00e0 b\u1ecb nhi\u1ec5m b\u1ec7nh.\n\nFiles train.csv - d\u1eef li\u1ec7u t\u1eadp hu\u1ea5n luy\u1ec7n.\n\nImage - ID c\u1ee7a h\u00ecnh \u1ea3nh\n\nLabel - c\u00e1c l\u1edbp m\u1ee5c ti\u00eau th\u1ec3 hi\u1ec7n t\u1ea5t c\u1ea3 c\u00e1c b\u1ec7nh \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y trong h\u00ecnh \u1ea3nh. Nh\u1eefng l\u00e1 kh\u00f4ng t\u1ed1t c\u00f3 qu\u00e1 nhi\u1ec1u b\u1ec7nh \u0111\u1ec3 ph\u00e2n lo\u1ea1i b\u1eb1ng m\u1eaft th\u01b0\u1eddng s\u1ebd c\u00f3 l\u1edbp ph\u1ee9c t\u1ea1p, v\u00e0 c\u0169ng c\u00f3 th\u1ec3 c\u00f3 m\u1ed9t t\u1eadp h\u1ee3p con c\u1ee7a c\u00e1c b\u1ec7nh \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh.\n\nsample_submission.csv - T\u1ec7p g\u1eedi m\u1eabu \u1edf \u0111\u1ecbnh d\u1ea1ng:\n\n1. image\n2. labels\n\ntrain_images - t\u1eadp \u1ea3nh train.\n\ntest_images - t\u1eadp \u1ea3nh test.","55e4b620":"## Scab","8522b511":"## Chi\u1ec1u cao c\u1ee7a \u1ea3nh","9f67d51c":"Nh\u1eefng l\u00e1 kh\u1ecfe m\u1ea1nh l\u00e0 nh\u1eefng l\u00e1 xanh ho\u00e0n to\u00e0n ","9326558b":"# \u0110\u01b0\u1eddng d\u1eabn ","34586380":"Th\u00f4ng qua nh\u1eefng h\u00ecnh \u1ea3nh tr\u00ean, nh\u1eefng chi\u1ebfc l\u00e1 b\u1ecb \"rust\" c\u00f3 m\u1ed9t v\u00e0i \u0111\u1ed1m m\u00e0u v\u00e0ng n\u00e2u tr\u00ean kh\u1eafp m\u1eb7t l\u00e1.","6f570dc4":"# Th\u1ed1ng k\u00ea s\u1ed1 l\u01b0\u1ee3ng \u1ea3nh \u0111a nh\u00e3n","1e3f59e5":"Tri\u1ec7u ch\u1ee9ng ch\u1ea9n \u0111o\u00e1n r\u00f5 nh\u1ea5t c\u1ee7a b\u1ec7nh Frog Eye Leaf Spot l\u00e0 nh\u1eefng \u0111\u1ed1m c\u00f3 g\u00f3c c\u1ea1nh v\u1edbi t\u00e2m m\u00e0u x\u00e1m nh\u1ea1t v\u00e0 r\u00eca l\u00e1 m\u00e0u t\u00edm \u0111\u1ebfn n\u00e2u \u0111\u1ecf r\u00f5 r\u1ec7t. Kh\u00f4ng c\u00f3 qu\u1ea7ng v\u00e0ng xung quanh ch\u1ed7 b\u1ec7nh. C\u00e1c \u0111\u1ed1m l\u00e1 c\u00f3 th\u1ec3 \u0111\u01a1n l\u1ebb ho\u1eb7c h\u1ee3p nh\u1ea5t \u0111\u1ec3 t\u1ea1o th\u00e0nh c\u00e1c \u0111\u1ed1m l\u1edbn h\u01a1n. ","221dffaf":"Trong nh\u1eefng h\u00ecnh \u1ea3nh tr\u00ean, ch\u00fang ta c\u00f3 th\u1ec3 th\u1ea5y nh\u1eefng chi\u1ebfc l\u00e1 nh\u00e3n scab c\u00f3 nh\u1eefng v\u1ebft m\u00e0u n\u00e2u l\u1edbn v\u00e0 nh\u1eefng v\u1ebft loang l\u1ed5 kh\u1eafp m\u1eb7t l\u00e1. ","f74a1223":"# Th\u1ed1ng k\u00ea s\u1ed1 l\u01b0\u1ee3ng nh\u00e3n","b4579ab5":"## Healthy","c46a160d":"**Nh\u1eadn x\u00e9t:**\nT\u1eadp d\u1eef li\u1ec7u b\u1ecb m\u1ea5t c\u00e2n b\u1eb1ng kh\u00e1 nhi\u1ec1u","d2258b8a":"**X\u00e1c \u0111\u1ecbnh m\u1ee5c ti\u00eau:**\n\nM\u1ee5c ti\u00eau ch\u00ednh c\u1ee7a cu\u1ed9c thi l\u00e0 ph\u00e1t tri\u1ec3n c\u00e1c m\u00f4 h\u00ecnh d\u1ef1a tr\u00ean m\u00e1y h\u1ecdc \u0111\u1ec3 ph\u00e2n lo\u1ea1i ch\u00ednh x\u00e1c m\u1ed9t h\u00ecnh \u1ea3nh l\u00e1 nh\u1ea5t \u0111\u1ecbnh t\u1eeb b\u1ed9 d\u1eef li\u1ec7u th\u1eed nghi\u1ec7m cho m\u1ed9t lo\u1ea1i b\u1ec7nh c\u1ee5 th\u1ec3 v\u00e0 x\u00e1c \u0111\u1ecbnh m\u1ed9t b\u1ec7nh ri\u00eang l\u1ebb t\u1eeb nhi\u1ec1u tri\u1ec7u ch\u1ee9ng b\u1ec7nh tr\u00ean m\u1ed9t h\u00ecnh \u1ea3nh l\u00e1 \u0111\u01a1n","76d5e6fe":"# D\u1eef li\u1ec7u","b9a47272":"Nh\u1eefng l\u00e1 n\u00e0y c\u00f3 m\u00e0u xanh nh\u1ee3t nh\u1ea1t, c\u00e1c \u0111\u1ed1m v\u00e0ng n\u00e2u","576bc9a5":"## Chi\u1ec1u r\u1ed9ng c\u1ee7a \u1ea3nh","e822edc0":"## Powdery Mildew","10be64bc":"# C\u1ea5u h\u00ecnh","7c941ee5":"## Rust","dc316ed3":"# K\u00edch th\u01b0\u1edbc c\u1ee7a \u1ea3nh","51b4c152":"# D\u1eef li\u1ec7u theo t\u1eebng nh\u00e3n"}}