{"cell_type":{"d04baf74":"code","e83e758f":"code","b0478335":"code","616f5ac1":"code","d79efdeb":"code","9ae63f12":"code","c3b17643":"code","ed8d8bed":"markdown","14bc7b47":"markdown","590ee075":"markdown","2d6473f5":"markdown","0cb94d21":"markdown","bc75523d":"markdown"},"source":{"d04baf74":"A = [1,22,30,35,300,1000]\nprint(A)","e83e758f":"A = [1,22,30,35,300,1000]\nprint(A.index(35))","b0478335":"def linearSearch(array, n, x):\n\n    # Going through array sequencially\n    for i in range(0, n):\n        if (array[i] == x):\n            return i\n    return -1\n\n\narray = [10, 20, 30, 40, 50, 60, 70]\nx = 50\nn = len(array)\nresult = linearSearch(array, n, x)\nif(result == -1):\n    print(\"Element not found\")\nelse:\n    print(\"Element found at index: \", result)","616f5ac1":"def binary_search_recursive(array, element, start, end):\n    if start > end:\n        return -1\n\n    mid = (start + end) \/\/ 2\n    if element == array[mid]:\n        return mid\n\n    if element < array[mid]:\n        return binary_search_recursive(array, element, start, mid-1)\n    else:\n        return binary_search_recursive(array, element, mid+1, end)","d79efdeb":"element = 50\narray =[10, 20, 30, 40, 50, 60, 70]\n\nprint(\"Searching for {}\".format(element))\nprint(\"Index of {}: {}\".format(element, binary_search_recursive(array, element, 0, len(array))))","9ae63f12":"def selectionSort(array, size):\n   \n    for step in range(size):\n        min_idx = step\n\n        for i in range(step + 1, size):\n         \n            # to sort in descending order, change > to < in this line\n            # select the minimum element in each loop\n            if array[i] < array[min_idx]:\n                min_idx = i\n         \n        # put min at the correct position\n        (array[step], array[min_idx]) = (array[min_idx], array[step])\n\n\ndata = [10, 5, 30, 15, 50, 6,25]\nsize = len(data)\nselectionSort(data, size)\nprint('Sorted Array in Ascending Order:')\nprint(data)","c3b17643":"def insertionSort(array):\n\n    for step in range(1, len(array)):\n        key = array[step]\n        j = step - 1\n        \n        # Compare key with each element on the left of it until an element smaller than it is found\n        # For descending order, change key<array[j] to key>array[j].        \n        while j >= 0 and key < array[j]:\n            array[j + 1] = array[j]\n            j = j - 1\n        \n        # Place key at after the element just smaller than it.\n        array[j + 1] = key\n\n\ndata = [10, 5, 30, 15, 50, 6,25]\ninsertionSort(data)\nprint('Sorted Array in Ascending Order:')\nprint(data)","ed8d8bed":"insertion sort","14bc7b47":"Array A[1...n]","590ee075":"linear search","2d6473f5":" binary search","0cb94d21":"selection sort","bc75523d":"tampilkan element yang bernilai 35 dengan posisi indexnya"}}