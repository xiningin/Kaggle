{"cell_type":{"2cf3353a":"code","c05a19c7":"code","cd1b5d98":"code","fdffacee":"code","d86b4685":"code","a1450701":"code","cbf559d0":"code","3019d93d":"code","24366c0d":"code","69e72bde":"code","c605d366":"code","9103723b":"code","c8302d96":"code","1fdfd7cc":"code","37937242":"code","57b8cef6":"code","73421fb8":"code","185e4962":"code","d3794e20":"code","2d3a56e7":"code","21711899":"code","31487a37":"code","4d52737e":"code","09edbff2":"code","66427609":"code","baffaf83":"code","246d7490":"code","581fb1b0":"code","5cdcd77a":"code","a7c27ada":"code","0f62741f":"code","9b0fb409":"code","9a0b8851":"code","e17f00b4":"code","687641b6":"code","2bd393b2":"code","8a60b747":"code","e3bdd3ab":"code","2197b5fc":"code","d7ffed33":"code","57723b3b":"code","f778fd25":"code","6dcc39af":"markdown","7060203a":"markdown","d616aa0c":"markdown","1a29f82c":"markdown","23759fdd":"markdown","41e01eab":"markdown","12856fd0":"markdown","16f65ebc":"markdown","0d49d468":"markdown","f409524d":"markdown","dc96b857":"markdown","a8142aff":"markdown","35e1c6bf":"markdown","15c94f2c":"markdown","d9e510b3":"markdown"},"source":{"2cf3353a":"import numpy as np\nimport pandas as pd\nfrom pandas_datareader import data, wb\nfrom pandas.util.testing import assert_frame_equal\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nimport math\nimport datetime\nimport plotly\nimport cufflinks as cf\ncf.go_offline()\n%matplotlib inline","c05a19c7":"start = datetime.datetime(2015, 7, 11)\nend = datetime.datetime(2020, 7, 11)","cd1b5d98":"df = data.DataReader(\"GOOG\",'yahoo',start,end)\ndf.head()","fdffacee":"df.tail()","d86b4685":"df.xs(key='Close',axis=1).max()","a1450701":"df.xs(key='Close',axis=1).iplot()","cbf559d0":"plt.figure(figsize=(12,5))\ndf['Close'].loc['2019-07-10':'2020-07-10'].rolling(window=30).mean().plot(label='30 Day Moving Avg.')\ndf['Close'].loc['2019-07-10':'2020-07-10'].plot(label='Close')\nplt.legend()","3019d93d":"df0 = df[['Open','High','Low','Close']].loc['2019-07-10':'2020-07-10']\ndf0.iplot(kind='candle')","24366c0d":"df['Close'].loc['2019-07-10':'2020-07-10'].ta_plot(study='sma',periods=[9,18,27])","69e72bde":"df1=df.reset_index()['Close']","c605d366":"df1","9103723b":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler(feature_range=(0,1))\ndf1=scaler.fit_transform(np.array(df1).reshape(-1,1))","c8302d96":"print(df1)","1fdfd7cc":"training_size=int(len(df1)*0.70)\ntest_size=len(df1)-training_size\ntrain_data,test_data=df1[0:training_size,:],df1[training_size:len(df1),:1]","37937242":"training_size,test_size","57b8cef6":"train_data","73421fb8":"# convert an array of values into a dataset matrix\ndef create_dataset(dataset, time_step=1):\n\tdataX, dataY = [], []\n\tfor i in range(len(dataset)-time_step-1):\n\t\ta = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100 \n\t\tdataX.append(a)\n\t\tdataY.append(dataset[i + time_step, 0])\n\treturn np.array(dataX), np.array(dataY)","185e4962":"# reshape into X=t,t+1,t+2,t+3 and Y=t+4\ntime_step = 100\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, y_test = create_dataset(test_data, time_step)","d3794e20":"print(X_train.shape), print(y_train.shape)","2d3a56e7":"print(X_test.shape), print(y_test.shape)","21711899":"# reshape input to be [samples, time steps, features] which is required for LSTM\nX_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)","31487a37":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM","4d52737e":"model=Sequential()\nmodel.add(LSTM(50,return_sequences=True,input_shape=(100,1)))\nmodel.add(LSTM(50,return_sequences=True))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error',optimizer='adam')\n","09edbff2":"model.summary()","66427609":"model.summary()","baffaf83":"model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=100,batch_size=64,verbose=1)","246d7490":"train_predict=model.predict(X_train)\ntest_predict=model.predict(X_test)","581fb1b0":"# Transformback to original form\ntrain_predict=scaler.inverse_transform(train_predict)\ntest_predict=scaler.inverse_transform(test_predict)","5cdcd77a":"### Calculate RMSE performance metrics\nfrom sklearn.metrics import mean_squared_error\nmath.sqrt(mean_squared_error(y_train,train_predict))","a7c27ada":"### Test Data RMSE\nmath.sqrt(mean_squared_error(y_test,test_predict))","0f62741f":"# shift train predictions for plotting\nlook_back=100\ntrainPredictPlot = np.empty_like(df1)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(df1)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1, :] = test_predict\n# plot baseline and predictions\nplt.plot(scaler.inverse_transform(df1))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.show()","9b0fb409":"len(test_data)","9a0b8851":"x_input=test_data[278:].reshape(1,-1)\nx_input.shape","e17f00b4":"temp_input=list(x_input)\ntemp_input=temp_input[0].tolist()","687641b6":"temp_input","2bd393b2":"# demonstrate prediction for next 10 days\nfrom numpy import array\n\nlst_output=[]\nn_steps=100\ni=0\nwhile(i<30):\n    \n    if(len(temp_input)>100):\n        #print(temp_input)\n        x_input=np.array(temp_input[1:])\n        print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        #print(x_input)\n        yhat = model.predict(x_input, verbose=0)\n        print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input=temp_input[1:]\n        #print(temp_input)\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    else:\n        x_input = x_input.reshape((1, n_steps,1))\n        yhat = model.predict(x_input, verbose=0)\n        print(yhat[0])\n        temp_input.extend(yhat[0].tolist())\n        print(len(temp_input))\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    \n\nprint(lst_output)","8a60b747":"day_new=np.arange(1,101)\nday_pred=np.arange(101,131)","e3bdd3ab":"len(df1)","2197b5fc":"plt.plot(day_new,scaler.inverse_transform(df1[1159:]))\nplt.plot(day_pred,scaler.inverse_transform(lst_output))","d7ffed33":"df3=df1.tolist()\ndf3.extend(lst_output)\nplt.plot(df3[1200:])","57723b3b":"df3=scaler.inverse_transform(df3).tolist()","f778fd25":"plt.plot(df3)","6dcc39af":"### Exploratory Data Analysis","7060203a":"### Let's Visualize the Predictions","d616aa0c":"#### Visualization (Closing Rate)","1a29f82c":"#### Maximum Closing Rate","23759fdd":"### Import the data using DataReader","41e01eab":"### Stacked LSTM Model","12856fd0":"#### Using MinMaxScaler","16f65ebc":"### Predictions for Next 30 Days","0d49d468":"#### Let's Reset the Index to Close","f409524d":"#### Splitting the Close data into Train and Test sets","dc96b857":"### Set Duration","a8142aff":"### Lets Predict","35e1c6bf":"#### 30-day Moving Average for Close Price","15c94f2c":"### Import the Libraries","d9e510b3":"### Stock Market Prediction And Forecasting Using Stacked LSTM"}}