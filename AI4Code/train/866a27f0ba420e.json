{"cell_type":{"9bf61fc7":"code","361d02e6":"code","87ceeff6":"code","27023e07":"code","8c87953e":"code","85f1a3f8":"code","49d75602":"code","be58fb53":"code","5b083f21":"code","cad58e97":"code","eded0501":"code","b6faa363":"code","e562e784":"code","b3bf15d2":"code","0913510f":"code","58d3bf40":"code","ef4b3186":"code","4045b8c9":"code","98912759":"code","29230f3e":"code","68d57a0e":"code","1632d488":"code","2dc7422b":"code","df504ec9":"code","3139a3a4":"code","bea7966b":"code","75011456":"code","40491157":"code","6100cd87":"code","79e0e1fc":"code","a9253e56":"code","6403c46d":"code","79ecf0c4":"code","ee67bca3":"code","16a37beb":"code","44c82fd4":"code","6ebb48ac":"markdown","b3542147":"markdown","8f66e122":"markdown","4accdc5e":"markdown","5e0199ed":"markdown","b55f537a":"markdown","0966aa39":"markdown","39b25415":"markdown","ea04d10a":"markdown","0399ac00":"markdown","61b8422e":"markdown","53c71ca0":"markdown","21c5b0a8":"markdown","8feba57a":"markdown","6bfa1f0b":"markdown","53e2f104":"markdown","122935b2":"markdown","622e4ad6":"markdown","7e72eb2d":"markdown","fce8cd0a":"markdown","f2494a3b":"markdown","0e08e2b4":"markdown","c1c3dc90":"markdown","81bdc91a":"markdown","7e92523d":"markdown","c0c15d81":"markdown","13acc6f7":"markdown"},"source":{"9bf61fc7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/sign-language-mnist\"))","361d02e6":"train = pd.read_csv(\"\/kaggle\/input\/sign-language-mnist\/sign_mnist_train\/sign_mnist_train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/sign-language-mnist\/sign_mnist_test\/sign_mnist_test.csv\")","87ceeff6":"train.head()","27023e07":"train.shape","8c87953e":"test.head()","85f1a3f8":"test.shape","49d75602":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.subplots(figsize=(10,6))\nsns.countplot(train[\"label\"], palette=\"Set2\")","be58fb53":"y_train = train[\"label\"]\nX_train = train.drop(\"label\", axis=1)\n\ny_test = test[\"label\"]\nX_test = test.drop(\"label\", axis=1)","5b083f21":"from sklearn.preprocessing import LabelBinarizer\nencode = LabelBinarizer()\ny_train = encode.fit_transform(y_train)\ny_test = encode.fit_transform(y_test)","cad58e97":"X_train = X_train.values\n\nX_test = X_test.values","eded0501":"X_train","b6faa363":"X_train = X_train \/ 255\nX_test = X_test \/ 255","e562e784":"y_train # label binarizer","b3bf15d2":"X_train # Normalize values","0913510f":"X_train = X_train.reshape(-1, 28, 28, 1)\nX_test = X_test.reshape(-1, 28, 28, 1)","58d3bf40":"X_train.shape","ef4b3186":"f, ax = plt.subplots(3,5) \nf.set_size_inches(10, 10)\nk = 0\nfor i in range(3):\n    for j in range(5):\n        ax[i,j].imshow(X_train[k].reshape(28, 28) , cmap = \"gray\")\n        k += 1\n    plt.tight_layout()","4045b8c9":"f, ax = plt.subplots(3,5) \nf.set_size_inches(10, 10)\nk = 0\nfor i in range(3):\n    for j in range(5):\n        ax[i,j].imshow(X_test[k].reshape(28, 28) , cmap = \"gray\")\n        k += 1\n    plt.tight_layout()","98912759":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Flatten, Dense, Activation, MaxPooling2D, BatchNormalization, Dropout\nfrom keras.preprocessing.image import ImageDataGenerator","29230f3e":"datagen = ImageDataGenerator(featurewise_center=False, #featurewise_center: Boolean. Set input mean to 0 over the dataset, feature-wise.\n    samplewise_center=False, # samplewise_center: Boolean. Set each sample mean to 0.\n    featurewise_std_normalization=False, # featurewise_std_normalization: Boolean. Divide inputs by std of the dataset, feature-wise.\n    samplewise_std_normalization=False, # samplewise_std_normalization: Boolean. Divide each input by its std.\n    zca_whitening=False, # zca_whitening: Boolean. Apply ZCA whitening.\n    zca_epsilon=1e-06, # zca_epsilon: epsilon for ZCA whitening. Default is 1e-6.\n    rotation_range=15, # rotation_range: Int. Degree range for random rotations.\n    width_shift_range=0.1, # shift image horizontally\n    height_shift_range=0.1, # shift image vertically\n    shear_range=0.3, # Shear angle in counter-clockwise direction in degrees\n    zoom_range=0.1, # zoom range \n    channel_shift_range=0.0, # Range for random channel shifts. \n    fill_mode=\"nearest\",\n    horizontal_flip=False, # horizontally flip image\n    vertical_flip=True, # vertically flip image\n    validation_split=0.0,)\n\ndatagen.fit(X_train)","68d57a0e":"model = Sequential()\n\nmodel.add(Conv2D(32 , (3,3), input_shape = X_train.shape[1:]))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2,2) , padding = 'same'))\n\nmodel.add(Conv2D(64 , (3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2,2), padding = 'same'))\n\nmodel.add(Conv2D(64 , (3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2,2), padding = 'same'))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(units = 512 , activation = 'relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(units = 24 , activation = 'softmax'))\n\nmodel.compile(loss=\"categorical_crossentropy\", metrics=[\"accuracy\"], optimizer=\"adam\")\n\nhistory = model.fit(datagen.flow(X_train,y_train, batch_size = 32) ,epochs = 20 , validation_data = (X_test, y_test))","1632d488":"score = model.evaluate(X_test, y_test)","2dc7422b":"accuracy = history.history[\"accuracy\"]\nval_acc = history.history[\"val_accuracy\"]\n\nloss = history.history[\"loss\"]\nval_loss = history.history[\"val_loss\"]\n\nepochs = range(len(accuracy))\n\nplt.plot(epochs, accuracy, \"b\", label=\"trainning accuracy\")\nplt.plot(epochs, val_acc, \"r\", label=\"validation accuracy\")\nplt.legend()\nplt.show()\n\nplt.plot(epochs, loss, \"b\", label=\"trainning loss\")\nplt.plot(epochs, val_loss, \"r\", label=\"validation loss\")\nplt.legend()\nplt.show()","df504ec9":"predictions = model.predict_classes(X_test)\n\n\nfor i in range(len(predictions)):\n    if predictions[i] >= 9:\n        predictions[i] += 1\n        \npredictions[:10]","3139a3a4":"y_test_inv_label = encode.inverse_transform(y_test)\ny_test_inv_label","bea7966b":"from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n\nconfusion_matrix(predictions, y_test_inv_label)","75011456":"print(accuracy_score(y_test_inv_label, predictions))","40491157":"labels = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\"]\nprint(classification_report(y_test_inv_label, predictions, target_names=labels))","6100cd87":"model.save(\"hand7.model\")","79e0e1fc":"import cv2\nimport tensorflow as tf\n\n\nlabels = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\"]\n\ndef prepare(filepath):\n    img_array = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)\n    img_array = img_array \/ 255\n    new_array = cv2.resize(img_array, (28, 28))\n    return new_array.reshape(-1, 28, 28, 1)\n\nmodel = tf.keras.models.load_model(\"hand7.model\")","a9253e56":"prediction = model.predict_classes([prepare(\"..\/input\/imagedata\/c.png\")])\nprint(labels[prediction[0]])","6403c46d":"prediction = model.predict_classes([prepare(\"..\/input\/imagedata\/d.png\")])\nprint(labels[prediction[0]])","79ecf0c4":"prediction = model.predict_classes([prepare(\"..\/input\/imagedata\/n.png\")])\nprint(labels[prediction[0]])","ee67bca3":"prediction = model.predict_classes([prepare(\"..\/input\/imagedata\/e.png\")])\nprint(labels[prediction[0]])","16a37beb":"prediction = model.predict_classes([prepare(\"..\/input\/imagedata\/y.png\")])\nprint(labels[prediction[0]])","44c82fd4":"prediction = model.predict_classes([prepare(\"..\/input\/imagedata\/a.png\")])\nprint(labels[prediction[0]])","6ebb48ac":"# Accuracy check, confusion matrix and classification report","b3542147":"# Look at test dataset","8f66e122":"# Train and test values","4accdc5e":"# import some necessary packages","5e0199ed":"# Here we see that, after 8, comes 10.. so if after inverse labelbinarizer the label shows 9 or greater, then we need to add 1..","b55f537a":"# Shape of train","0966aa39":"# Train the model","39b25415":"# Data augmentation\n\n## Data augmentation is a strategy that enables practitioners to significantly increase the diversity of data available for training models, without actually collecting new data. Data augmentation techniques such as cropping, padding, and horizontal flipping are commonly used to train large neural networks\n\n![data.jpg](attachment:data.jpg)\n\n\n[Also visit this page](https:\/\/keras.io\/api\/preprocessing\/image\/)","ea04d10a":"# predict C sign","0399ac00":"# Predict N","61b8422e":"# split dataset","53c71ca0":"# Take a look of train dataset","21c5b0a8":"# predict some to check","8feba57a":"# American Sign Language (ASL) is a natural language that serves as the predominant sign language of Deaf communities in the United States and most of Anglophone Canada. Besides North America, dialects of ASL and ASL-based creoles are used in many countries around the world, including much of West Africa and parts of Southeast Asia. ASL is also widely learned as a second language, serving as a lingua franca. ASL is most closely related to French Sign Language\n\n![amer_sign2.png](attachment:amer_sign2.png)","6bfa1f0b":"# Analyze model","53e2f104":"# Test data shape","122935b2":"# Normalize the values. By dividing 255, value will convert in range 0 to 1","622e4ad6":"# some train visualization","7e72eb2d":"# Save model","fce8cd0a":"# Load the csv file","f2494a3b":"# visualization","0e08e2b4":"# reshape the array","c1c3dc90":"# inverse labelbinarizer","81bdc91a":"# Some prediction, if prediction is >= 9, then we will add 1, so, 9 becomes 10... Otherwise it will show wrong...","7e92523d":"# labelbinarizer convert your label\n# think labels = ['A', 'B', 'C'... ...]\n# then B will convert like 0 1 0 0 0\n# A will convert like 1 0 0 0 0","c0c15d81":"# Some test visualization","13acc6f7":"# predict D hand gesture"}}