{"cell_type":{"83ea3660":"code","4a0e03b1":"code","9110a030":"code","e43f111c":"code","16f2bda7":"code","c2da18ef":"code","0b44f70a":"code","3bb0c9f9":"code","832b6435":"code","32483c8b":"code","dd43ea5c":"code","27a39c2a":"code","a37ee6fe":"code","5e04bd21":"code","5631433b":"code","7b41d9f0":"code","c97572ee":"code","1ef4bbdc":"code","2dd8381e":"code","4f55b543":"code","4caedfe1":"code","216e911a":"code","9fcc70df":"code","67ea4099":"code","2e2e45dc":"markdown","3316cfa3":"markdown","51eccb9d":"markdown","8b3f39ee":"markdown","51f4324a":"markdown","dbe4ee54":"markdown","b49c49d0":"markdown","e2da64bc":"markdown"},"source":{"83ea3660":"import re\nimport nltk\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom ast import literal_eval\nimport matplotlib.pyplot as plt\nfrom nltk.corpus import wordnet\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n\n%matplotlib inline\nwarnings.simplefilter('ignore')\npd.set_option('display.max_columns', 50)","4a0e03b1":"credits = pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\nmovies = pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')","9110a030":"credits.head()","e43f111c":"from ast import literal_eval\n\n#Converting the string into list of dictionaries\ncredits.cast = credits.cast.apply(literal_eval)\ncredits.crew = credits.crew.apply(literal_eval)\n\n# Extracting the Casts into a list from Dictionaries\ncredits['cast'] = credits['cast'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])\n\n# Extracting the Director from the Crew\ndef extract_director(x):\n    for crew_mem in x:\n        if crew_mem['job'] == 'Director':\n            return crew_mem['name']\n        else:\n            return np.nan\n\ncredits['director'] = credits['crew'].apply(extract_director)\ncredits['director'].fillna('',inplace = True)\ncredits.drop(['crew'],axis = 1,inplace = True)\ncredits.drop(['title'],axis = 1,inplace = True)","16f2bda7":"movies.head()","c2da18ef":"# Extracting the Genres into a list from Dictionaris\nmovies['genres'] = movies['genres'].fillna('[]').apply(literal_eval).apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])\n# Extracting the Keywords into a list from Dictionaris\nmovies['keywords'] = movies['keywords'].fillna('[]').apply(literal_eval).apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])","0b44f70a":"movies = movies.merge(credits, left_on='id', right_on='movie_id', how = 'left')","3bb0c9f9":"# Selecting required columns from the master dataframe\nmovies = movies[['id','original_title','title','cast', 'director', 'keywords', 'genres', 'release_date', 'overview', \n                 'original_language', 'runtime', 'tagline', 'vote_average', 'vote_count','popularity']]\nmovies.head()","832b6435":"movies.isna().sum()","32483c8b":"movies.tagline.fillna('',inplace = True)\nmovies = movies.dropna().reset_index()","dd43ea5c":"movies.release_date = pd.to_datetime(movies.release_date,format = '%Y-%m-%d')\nmovies['release_year'] = movies.release_date.apply(lambda x: x.year)","27a39c2a":"def get_wordnet_pos(word):\n    tag = nltk.pos_tag([word])[0][1][0].upper()\n    tag_dict = {\"J\": wordnet.ADJ,\n                \"N\": wordnet.NOUN,\n                \"V\": wordnet.VERB,\n                \"R\": wordnet.ADV}\n\n    return tag_dict.get(tag, wordnet.NOUN)\n\nlemmatizer=WordNetLemmatizer()\n\ndef clean_plot(txt):\n    regex = re.compile(r\"[!@%&;?'',.\"\"-]\")\n    txt_clean = re.sub(regex,'',txt)\n    txt_clean = txt_clean.lower()\n    txt_clean = txt_clean.split(' ')\n    txt_clean = [word for word in txt_clean if word not in stopwords.words('english')]\n    txt_clean = ' '.join(txt_clean)\n    word_list = nltk.word_tokenize(txt_clean)\n    txt_clean = ' '.join([lemmatizer.lemmatize(w,get_wordnet_pos(w)) for w in word_list])\n    return txt_clean\n","a37ee6fe":"movies.head()","5e04bd21":"genres = movies['genres'].apply(lambda x : \" \".join(x))\nkeywords = movies['keywords'].apply(lambda x : \" \".join(x))","5631433b":"overview = movies.overview.apply(clean_plot)\ngenres = genres.apply(clean_plot)\nkeywords = keywords.apply(clean_plot)","7b41d9f0":"release_year = movies.release_year","c97572ee":"genre_keys = genres + ' ' + keywords","1ef4bbdc":"tfidf = TfidfVectorizer(analyzer = 'word', ngram_range = (1,1), min_df = 0, stop_words = 'english')\nplot_vector = tfidf.fit_transform(overview)","2dd8381e":"cv = CountVectorizer(analyzer = 'word', ngram_range = (1,1), min_df = 0, stop_words = 'english')\ngenrekey_vector = cv.fit_transform(genre_keys)","4f55b543":"from scipy.spatial import distance\nimport time\nscore = []\nstart_time = time.time()\n\nplot_arr = plot_vector.toarray()\ngenrekey_arr = genrekey_vector.toarray()\n\ndef get_pos(title):\n    target_plot_arr = plot_vector[movies[movies.title==title].index.values[0]].toarray()\n    target_genre_arr = genrekey_vector[movies[movies.title==title].index.values[0]].toarray()\n    pos = {}\n    for i in range(plot_arr.shape[0]):\n        plot_pos = distance.euclidean(target_plot_arr,plot_arr[i])\n        genre_pos = distance.euclidean(target_genre_arr,genrekey_arr[i])\n        pos[movies.title[i]] = [release_year[i],plot_pos,genre_pos]\n    return pos\n\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","4caedfe1":"import plotly.graph_objects as go\nimport plotly.express as px\nimport networkx as nx","216e911a":"def create_graph(title):\n    G = nx.Graph()\n    G.clear()\n    G.add_nodes_from(movies.title.tolist())\n    pos = get_pos(title)\n    for node in G.nodes:\n        G.nodes[node]['pos'] = pos[node]\n    return G","9fcc70df":"def plot_graph(G):\n    edge_x = []\n    edge_y = []\n    for edge in G.edges():\n        x0, y0 = G.nodes[edge[0]]['pos']\n        x1, y1 = G.nodes[edge[1]]['pos']\n        edge_x.append(x0)\n        edge_x.append(x1)\n        edge_x.append(None)\n        edge_y.append(y0)\n        edge_y.append(y1)\n        edge_y.append(None)\n\n    edge_trace = go.Scatter(\n        x=edge_x, y=edge_y,\n        line=dict(width=0.5, color='#888'),\n        hoverinfo='none',\n        mode='lines')\n\n    node_x = []\n    node_y = []\n    node_z = []\n    for node in G.nodes():\n        x, y, z = G.nodes[node]['pos']\n        node_x.append(x)\n        node_y.append(y)\n        node_z.append(z)\n\n    node_trace = go.Scatter3d(\n        x=node_x, y=node_y,z=node_z,\n        mode='markers',\n        hoverinfo='text',\n        marker=dict(\n            # colorscale options\n            #'Greys' | 'YlGnBu' | 'Greens' | 'YlOrRd' | 'Bluered' | 'RdBu' |\n            #'Reds' | 'Blues' | 'Picnic' | 'Rainbow' | 'Portland' | 'Jet' |\n            #'Hot' | 'Blackbody' | 'Earth' | 'Electric' | 'Viridis' |\n            colorscale='YlGnBu',\n            reversescale=True,\n            color=z,\n            size=10,\n            opacity=0.8,\n            colorbar=dict(\n                thickness=15,\n                title='Similarty',\n                xanchor='left',\n                titleside='right'\n            ),\n            line_width=2))\n    node_adjacencies = []\n    node_text = []\n    for index,row in movies[['title','genres']].iterrows():\n        gen = \" | \".join(row['genres'])\n        text = 'Title: ' + row['title'] + '\\nGenres:' + gen\n        node_text.append(text)\n#     for node, adjacencies in enumerate(G.adjacency()):\n#         node_adjacencies.append(len(adjacencies[1]))\n#         node_text.append('# of connections: '+str(len(adjacencies[1])))\n#     zipped_nodes = zip(node_x,node_y,node_z)\n#     color_node = [round(x + y + z) for (x, y,z) in zipped_nodes]\n    node_trace.text = node_text\n    fig = go.Figure(data=[edge_trace, node_trace],\n             layout=go.Layout(\n                title='<br>Movie Similarity Graph with Python',\n                titlefont_size=16,\n                showlegend=False,\n                hovermode='closest',\n                margin=dict(b=20,l=5,r=5,t=40),\n                annotations=[ dict(\n                    text=\"Python code: <a href='https:\/\/www.kaggle.com\/aadarsh168\/movie-visualization\/'> Kaggle Notebook<\/a>\",\n                    showarrow=False,\n                    xref=\"paper\", yref=\"paper\",\n                    x=0.005, y=-0.002 ) ],\n                xaxis=dict(showgrid=False, zeroline=True, showticklabels=True),\n                yaxis=dict(showgrid=False, zeroline=True, showticklabels=True))\n                )\n    fig.update_layout(\n    scene = dict(\n        xaxis = dict(nticks=4, range=[1915,2018],),\n        yaxis = dict(nticks=4, range=[-1,10],),\n        zaxis = dict(nticks=4, range=[-1,10],),),\n        width=700,\n        margin=dict(r=20, l=10, b=10, t=10))\n    \n    fig.update_layout(\n        scene = dict(\n            xaxis_title='Release Year',\n            yaxis_title='Plot Distance',\n            zaxis_title='Genres Distance'),\n            width=700,\n            margin=dict(r=20, b=10, l=10, t=10))\n    \n\n#     fig.update_layout(\n#         xaxis = dict(\n#             tickangle = 90,\n#             title_text = \"Genre Distance\",\n#             title_font = {\"size\": 20},\n#             title_standoff = 25),\n#         yaxis = dict(\n#             title_text = \"Plot Distance\",\n#             title_font = {\"size\": 20},\n#             title_standoff = 25))\n    return fig\n","67ea4099":"fig = plot_graph(create_graph('Toy Story'))\nfig.show()","2e2e45dc":"## Calculating Distances","3316cfa3":"## Handling Missing Values","51eccb9d":"## Text Processing","8b3f39ee":"## Prepare Data","51f4324a":"# MOVIE SIMILARTY VISUALIZATION","dbe4ee54":"## Import Data","b49c49d0":"## Import Library","e2da64bc":"## Plotting"}}