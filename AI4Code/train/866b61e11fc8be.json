{"cell_type":{"389c6d3e":"code","d19184c1":"code","9c064e5d":"code","fe1eb062":"code","04f64283":"code","c0855309":"code","6c05972e":"code","e21614b8":"code","b1ddde52":"code","a1e108f3":"code","a304d431":"code","f0ce8c1e":"code","ff8c8ab1":"code","bb5cc3bd":"code","d68775be":"code","55570852":"markdown"},"source":{"389c6d3e":"# Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d19184c1":"# Data Creation\nticker_symbol = \"GOOGL\" # just replace it with any other ticker symbol listed in NYSE\/NASDAQ\npath = \"..\/input\/price-volume-data-for-all-us-stocks-etfs\/Stocks\/\" + ticker_symbol.lower() + \".us.txt\"\nfile = open(path)\ncolumns = list(file.readline().strip().split(\",\"))\n\ndata = []\nfor line in file.readlines():\n    data.append(line.strip().split(\",\"))\n\ndf = pd.DataFrame(data=data, columns=columns)\ndf.head()","9c064e5d":"# Dropping unnecessary columns\ndata = df.reset_index()[\"Close\"].astype(\"float32\")\ndata.head()","fe1eb062":"# Visualizing the closing price\ntry:\n    sns.lineplot(data=data[:, 0], label=\"Closing Price\")\nexcept:\n    sns.lineplot(data=data, label=\"Closing Price\")","04f64283":"# Scaling\nfrom sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler(feature_range=(0,1))\ndata=scaler.fit_transform(np.array(data).reshape(-1,1))\nprint(data.shape)","c0855309":"# Splitting dataset into train and test split\ntrain_size = int(len(data) * 0.65)\ntest_size = len(data) - train_size\ntrain_data, test_data = data[0:train_size,:], data[train_size:len(data), :1]\nprint(train_size, test_size)","6c05972e":"# Convert an array of values into a dataset matrix\ndef create_dataset(dataset, time_step=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-time_step-1):\n        a = dataset[i:(i+time_step), 0]    \n        dataX.append(a)\n        dataY.append(dataset[i + time_step, 0])\n    return np.array(dataX), np.array(dataY)","e21614b8":"# Preparing the dataset\ntime_step = 90\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, y_test = create_dataset(test_data, time_step)","b1ddde52":"# X and y shapes\nprint(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)","a1e108f3":"# Reshape input to be [samples, time steps, features] which is required for LSTM\nX_train = X_train.reshape(X_train.shape[0], X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0], X_test.shape[1] , 1)\nprint(X_train.shape, X_test.shape)","a304d431":"# Libraries\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM","f0ce8c1e":"# Model\nmodel=Sequential()\nmodel.add(LSTM(32, return_sequences=True, input_shape=(time_step, 1)))\nmodel.add(LSTM(32))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel.summary()","ff8c8ab1":"# Run the model\nmodel.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=32)","bb5cc3bd":"# Predicting the results\ntrain_predict = model.predict(X_train)\ntest_predict = model.predict(X_test)\nresults = np.concatenate((train_predict, test_predict), axis=0)","d68775be":"# Original vs Predicted\ntry:\n    sns.lineplot(data=data[:, 0], label=\"Original\")\n    sns.lineplot(data=results[:, 0], label=\"Predicted\")\nexcept:\n    sns.lineplot(data=data, label=\"Original\")\n    sns.lineplot(data=results, label=\"Predicted\")","55570852":"Please give an upvote if you found this notebook helpful and feel free to give any suggestions. Thanks & stay safe!!!"}}