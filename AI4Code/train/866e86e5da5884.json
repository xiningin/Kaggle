{"cell_type":{"ba91cbcb":"code","d97c6cd7":"code","39b9e0e5":"code","a4d81d33":"code","c38abe00":"code","fea62f3c":"code","04ea4421":"code","e2c2a45f":"code","6a191e5c":"code","6948d4c8":"code","ec867769":"code","4ff08765":"code","8b8b88e7":"code","745e1ffa":"code","19ca53e6":"code","d9057e91":"code","1e160450":"code","9e9956d0":"code","7e793d71":"code","c2547052":"code","f30eb538":"code","3ad63284":"code","f7d6fcf0":"code","15d13e0b":"code","73f51daf":"code","e0c3e655":"code","15030131":"code","74b4dd5c":"code","f911bb6e":"code","5fe1438e":"code","01aaccc9":"code","66348477":"code","78eb9e70":"code","61ed101e":"code","695cff02":"code","fac51b82":"code","b7884a1a":"code","ea6e51d8":"code","e6887929":"code","3b520f99":"code","233cc45c":"code","fef47d14":"code","fdbd8e9e":"code","4ebe566e":"code","71d56a5f":"code","a4ab4f9c":"code","9665a07d":"code","6ba068ae":"code","de9649a5":"code","747d9c19":"code","3ebf1b9b":"code","a81f0ac1":"code","6c4ef5db":"code","95c8f517":"code","1b456b2b":"code","c550d968":"code","204e7921":"code","9b5ebc10":"code","5d4cf96b":"code","be326734":"markdown"},"source":{"ba91cbcb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d97c6cd7":"import matplotlib.pyplot as plt","39b9e0e5":"df = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf.head()","a4d81d33":"df.info()","c38abe00":"fig, ax = plt.subplots()\nax.scatter(df['YrSold'], df['SalePrice'])","fea62f3c":"df.SalePrice.plot.hist()","04ea4421":"df.tail().T","e2c2a45f":"df.sort_values(by=['YrSold'], inplace=True, ascending=True)","6a191e5c":"df.YrSold.tail(20)","6948d4c8":"df_original = df.copy()","ec867769":"df.info()","4ff08765":"df.isna().sum()","8b8b88e7":"i=0\nfor label, content in df.items():\n    if pd.api.types.is_string_dtype(content):\n        print(label)\n        i+=1\nprint('--------\\n',i)","745e1ffa":"for label, content in df.items():\n    if pd.api.types.is_string_dtype(content):\n        df[label] = content.astype('category').cat.as_ordered()","19ca53e6":"df.info()","d9057e91":"df.isnull().sum()\/len(df)","1e160450":"for label, content in df.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum():\n            print(label, pd.isnull(content).sum()\/len(df))","9e9956d0":"for label, content in df.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum():\n            df[label+'_is_missing'] = pd.isnull(content)\n            df[label] = content.fillna(content.median())","7e793d71":"for label, content in df.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum():\n            print(label, pd.isnull(content).sum()\/len(df))","c2547052":"df.LotFrontage_is_missing.value_counts()","f30eb538":"for label, content in df.items():\n    if not pd.api.types.is_numeric_dtype(content):\n        #if pd.isnull(content).sum():\n        print(label, pd.isnull(content).sum()\/len(df))","3ad63284":"for label, content in df.items():\n    if not pd.api.types.is_numeric_dtype(content):\n        df[label+'_is_missing'] = pd.isnull(content)\n        df[label] = pd.Categorical(content).codes+1","f7d6fcf0":"df.info()","15d13e0b":"df.isna().sum()","73f51daf":"df.head().T","e0c3e655":"from sklearn.ensemble import RandomForestRegressor","15030131":"model = RandomForestRegressor(n_jobs=-1)\n\nmodel.fit(df.drop('SalePrice', axis=1), df.SalePrice)","74b4dd5c":"model.score(df.drop('SalePrice', axis=1), df.SalePrice)","f911bb6e":"X_train, y_train = df.drop('SalePrice', axis=1), df.SalePrice","5fe1438e":"from sklearn.metrics import mean_squared_log_error, mean_absolute_error\n\ndef rmsle1(y_test, y_preds):\n    return np.sqrt(mean_squared_log_error(y_test, y_preds))\n\ndef show_scores1(model):\n    train_preds = model.predict(X_train)\n    scores = {\"Training MAE\": mean_absolute_error(y_train, train_preds),\n              \"Training RMSLE\": rmsle1(y_train, train_preds),\n              \"Training R^2\": model.score(X_train, y_train)}\n    return scores","01aaccc9":"show_scores1(model)","66348477":"model_no_tune = model","78eb9e70":"df.head()","61ed101e":"df.YrSold.value_counts()","695cff02":"df_val = df[df.YrSold == 2010]\ndf_train = df[df.YrSold != 2010]\n\nlen(df_val), len(df_train)","fac51b82":"X_train, y_train = df_train.drop(\"SalePrice\", axis=1), df_train.SalePrice\nX_valid, y_valid = df_val.drop(\"SalePrice\", axis=1), df_val.SalePrice\n\nX_train.shape, y_train.shape, X_valid.shape, y_valid.shape","b7884a1a":"def rmsle(y_test, y_preds):\n    return np.sqrt(mean_squared_log_error(y_test, y_preds))\n\ndef show_scores(model):\n    train_preds = model.predict(X_train)\n    val_preds = model.predict(X_valid)\n    scores = {\"Training MAE\": mean_absolute_error(y_train, train_preds),\n              \"Valid MAE\": mean_absolute_error(y_valid, val_preds),\n              \"Training RMSLE\": rmsle(y_train, train_preds),\n              \"Valid RMSLE\": rmsle(y_valid, val_preds),\n              \"Training R^2\": model.score(X_train, y_train),\n              \"Valid R^2\": model.score(X_valid, y_valid)}\n    return scores","ea6e51d8":"len(X_train), len(X_valid)","e6887929":"model1 = RandomForestRegressor(n_jobs=-1)","3b520f99":"model1.fit(X_train, y_train)","233cc45c":"show_scores(model1)","fef47d14":"model_train_val = model1","fdbd8e9e":"from sklearn.model_selection import RandomizedSearchCV\n\n# Different RandomForestClassifier hyperparameters\nrf_grid = {\"n_estimators\": np.arange(10, 100, 10),\n           \"max_depth\": [None, 3, 5, 10],\n           \"min_samples_split\": np.arange(2, 20, 2),\n           \"min_samples_leaf\": np.arange(1, 20, 2),\n           \"max_features\": [0.5, 1, \"sqrt\", \"auto\"]}\n\nrs_model = RandomizedSearchCV(RandomForestRegressor(),\n                              param_distributions=rf_grid,\n                              n_iter=20,\n                              cv=5,\n                              verbose=True)\n\nrs_model.fit(X_train, y_train)","4ebe566e":"rs_model.best_params_","71d56a5f":"show_scores(rs_model)","a4ab4f9c":"show_scores(model_train_val)","9665a07d":"models = {'model_no_tune': model_no_tune,\n          'model_train_val': model_train_val,\n          'model_rs': rs_model}","6ba068ae":"df_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf_test.head()","de9649a5":"for label, content in df_test.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum():\n            df_test[label+\"_is_missing\"] = pd.isnull(content)\n            df_test[label] = content.fillna(content.median())\n\n    # Turn categorical variables into numbers\n    if not pd.api.types.is_numeric_dtype(content):\n        df_test[label+\"_is_missing\"] = pd.isnull(content)\n        # We add the +1 because pandas encodes missing categories as -1\n        df_test[label] = pd.Categorical(content).codes+1","747d9c19":"df_test.head().T","3ebf1b9b":"for label in set(df.drop(\"SalePrice\", axis=1).columns) - set(df_test.columns):\n#      df_test[label] = False\n    print(label)","a81f0ac1":"for label in set(df.drop(\"SalePrice\", axis=1).columns) - set(df_test.columns):\n     df_test[label] = False\n","6c4ef5db":"for label in set(df.drop(\"SalePrice\", axis=1).columns) - set(df_test.columns):\n#      df_test[label] = False\n    print(label)","95c8f517":"for label in set(df_test.columns) - set(df.drop(\"SalePrice\", axis=1).columns):\n#      df_test[label] = False\n    print(label)","1b456b2b":"for label in set(df_test.columns) - set(df.drop(\"SalePrice\", axis=1).columns):\n#      df_test[label] = False\n    df_test = df_test.drop(label, axis=1)","c550d968":"for label in set(df_test.columns) - set(df.drop(\"SalePrice\", axis=1).columns):\n#      df_test[label] = False\n    print(label)","204e7921":"df_test.head().T","9b5ebc10":"predictions = {}\noutputs = {}\nfor label, model in models.items():\n    predictions[label] = model.predict(df_test)\n    outputs[label] = pd.DataFrame({'Id': df_test.Id,\n                                   'SalePrice': predictions[label]})","5d4cf96b":"for label, output in outputs.items():\n    filename = 'my_submission_'+label+'.csv'\n    output.to_csv(filename, index=False)\n","be326734":"# **Testing**"}}