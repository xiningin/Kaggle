{"cell_type":{"46116b51":"code","9dd39639":"code","0f1c58f5":"code","695f13f3":"code","dc7747ce":"code","212487fb":"code","6430c350":"code","f1acc2d9":"code","a3f97846":"code","f9a207af":"code","69b2920b":"code","07a00b1f":"code","538fdbc1":"code","2a3fa022":"code","bdba454f":"code","ddba390c":"code","99af6a37":"code","3244a5c1":"code","97979df0":"code","a61afa5d":"code","285ccd7d":"code","79f70e0d":"code","4594d60a":"code","9ba54315":"code","fbaed55c":"code","e0f022b7":"code","e6d76d4f":"code","4820b17c":"code","fdf6b09e":"code","8c04d494":"code","f6dddf24":"code","1f7edd05":"code","b9a065ae":"code","50220769":"code","3fb049a5":"code","4e2839dd":"code","ba84aa67":"code","23729591":"code","f56445d3":"code","f37be84b":"code","de4824a5":"code","4f26a641":"code","5661fe96":"code","7c24e073":"code","6bbd2009":"code","76bc8d09":"code","2bbfe5ce":"code","df82698c":"code","71bfe501":"code","396b8172":"code","67b63126":"markdown"},"source":{"46116b51":"# Thisklearn.model_selectionvironment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        train=pd.read_csv(os.path.join(dirname, 'train.csv'))\n        test=pd.read_csv(os.path.join(dirname, 'test.csv'))\n        \n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9dd39639":"obj=train.select_dtypes(include=['object'])\nnum=train.select_dtypes(include=['int64','float64'])\nobj_tst=test.select_dtypes(include=['object'])\nnum_tst=test.select_dtypes(include=['int64','float64'])\nfor col in obj.columns:\n    \n    if train[col].isnull().sum()>0:\n        train.loc[train[col].isnull()==True,col]=train[col].mode()[0]\n        \n        print(train.loc[train[col].isnull()==True,col])\nfor col in obj_tst.columns:\n    if test[col].isnull().sum()>0:\n        test.loc[test[col].isnull()==True,col]=test[col].mode()[0]\n        \n        print(test.loc[test[col].isnull()==True,col])\n\n        \nfor col in num_tst.columns:\n    \n    if test[col].isnull().sum()>0:\n        test.loc[test[col].isnull()==True,col]=test[col].median()\n        print(test.loc[test[col].isnull()==True,col])\n        \n\n        \nfor col in num.columns:\n    \n    if train[col].isnull().sum()>0:\n        train.loc[train[col].isnull()==True,col]=train[col].median()\n        print(train.loc[train[col].isnull()==True,col])\n        #print(col,df[col].isnull().sum(),df[col].value_counts())","0f1c58f5":"train.info()","695f13f3":"train.select_dtypes(include=['object'])","dc7747ce":"num_train=train.select_dtypes(include=['int64','float64'])\nnum_test=test.select_dtypes(include=['int64','float64'])\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndef outlier_removal(df,cols):\n    for col in df.columns:\n        df[col].plot(kind='kde',label=col)\n        percentile25 = df[col].quantile(0.25)\n        percentile75 = df[col].quantile(0.75)\n        iqr=percentile75-percentile25\n        upper_limit = percentile75 + 1.5 * iqr\n        lower_limit = percentile25 - 1.5 * iqr\n        df[df[col] < upper_limit]\n        df[df[col] > lower_limit]\n        \n        #plt.show()\n        return df","212487fb":"train=outlier_removal(train,num_train)\ntest=outlier_removal(test,num_test)","6430c350":"var=train.select_dtypes(include=['float64','int64'])\nplt.figure(figsize=(30,30))\nsns.heatmap(var.corr(),annot=True)\nplt.show()","f1acc2d9":"train.SalePrice=np.log(train.SalePrice)","a3f97846":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n","f9a207af":"cat=train.select_dtypes(include=['object'])\ntrain_cat=pd.get_dummies(train,columns=cat.columns,drop_first=True)\ntest_cat=pd.get_dummies(test,columns=cat.columns,drop_first=True)\n","69b2920b":"print(len(train_cat.columns),len(test_cat.columns))\n","07a00b1f":"\ny=train_cat.pop('SalePrice')\n\ntrain_cat=train_cat[test_cat.columns]\nX=train_cat\n\nvariable=X.select_dtypes(include=['float64','int64'])\nsc=StandardScaler()\nsc.fit(variable)\ntrain_cat[variable.columns]=sc.fit_transform(variable)\n\n#temp=temp.drop(['RoofMatl_CompShg', 'RoofMatl_Metal', 'RoofMatl_Roll', 'Exterior1st_Stone', 'Heating_GasA', 'GarageQual_Fa'],axis=1)\n","538fdbc1":"test_cat\n","2a3fa022":"train_cat","bdba454f":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=.3,random_state=42)","ddba390c":"X_test","99af6a37":"from sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error","3244a5c1":"def accuracy_finder(true,pred,data_type):\n    print('RMSE Score for {}   :'.format(data_type),mean_squared_error(true,pred,squared=False))","97979df0":"lr=LinearRegression()\nlr.fit(X_train,y_train)\ny_pred_lr_train=lr.predict(X_train)\ny_pred_lr_test=lr.predict(X_test)\n\n\naccuracy_finder(y_train,y_pred_lr_train,'Train Data')\naccuracy_finder(y_test,y_pred_lr_test,'Test Data')","a61afa5d":"from sklearn.feature_selection import RFE\nrfe=RFE(lr,n_features_to_select=10,step=1)\nrfe=rfe.fit(X_train,y_train)\ntrain_rfe_lr=rfe.predict(X_train)\ntest_rfe_lr=rfe.predict(X_test)\naccuracy_finder(y_train,train_rfe_lr,'Train Data with RFE')\naccuracy_finder(y_test,test_rfe_lr,'Test Data with RFE')","285ccd7d":"from sklearn.model_selection import GridSearchCV\n\nparams={'n_features_to_select':[0,10,20,30,40,50,60,70,80,100,120,150]}\nmod=GridSearchCV(rfe,param_grid=params,verbose = 3,n_jobs=-1,cv=5,scoring='r2',return_train_score=True)\nmod.fit(X_train,y_train)\n\ntrain_gscv_lr=mod.predict(X_train)\ntest_gscv_lr=mod.predict(X_test)\naccuracy_finder(y_train,train_gscv_lr,'Train Data with Hyperparameters')\naccuracy_finder(y_test,test_gscv_lr,'Test Data with Hyperparameters')\n\n\n","79f70e0d":"mod.best_params_","4594d60a":"X_train.drop(X_train.columns[np.where(rfe.support_ == False)[0]], axis=1, inplace=True)\nX_test.drop(X_test.columns[np.where(rfe.support_ == False)[0]], axis=1, inplace=True)\n","9ba54315":"X_train","fbaed55c":"cv_results = pd.DataFrame(mod.cv_results_)\ncv_results = cv_results[cv_results['param_n_features_to_select']<=100]\n#print(cv_results.head())\n# plotting mean test and train scoes with alpha \ncv_results['param_n_features_to_select'] = cv_results['param_n_features_to_select'].astype('int32')\n\nplt.figure(figsize=(10,5))\n# plotting\nplt.plot(cv_results['param_n_features_to_select'], cv_results['mean_train_score'])\nplt.plot(cv_results['param_n_features_to_select'], cv_results['mean_test_score'])\nplt.xlabel('n_features_to_select')\nplt.ylabel('Negative Mean Absolute Error')\nplt.title(\"Negative Mean Absolute Error and alpha\")\nplt.legend(['train score', 'test score'], loc='upper left')\n\n#plt.ylim(0,1)\nplt.show()","e0f022b7":"rfe_svr=SVR(C=3)\nfrom sklearn.feature_selection import RFE\n\nrfe_svr=rfe_svr.fit(X_train,y_train)\ntrain_rfe_svr=rfe_svr.predict(X_train)\ntest_rfe_svr=rfe_svr.predict(X_test)\naccuracy_finder(y_train,train_rfe_svr,'SVR-Training Data without Hyperparameters')\naccuracy_finder(y_test,test_rfe_svr,'SVR-Test Data without Hyperparameters')\n\nparams={'C':[0.1,1,10,20,50], 'kernel':['linear', 'poly', 'rbf', 'sigmoid'] ,'degree':[1,2,3,4]}\nsvr_grid=GridSearchCV(rfe_svr,param_grid=params,verbose = 3,n_jobs=-1,cv=5,scoring='r2',return_train_score=True)\nsvr_grid.fit(X_train,y_train)\n\ntrain_gscv_svr=svr_grid.predict(X_train)\ntest_gscv_svr=svr_grid.predict(X_test)\naccuracy_finder(y_train,train_gscv_svr,'SVR -Training Data with Hyperparameters')\naccuracy_finder(y_test,test_gscv_svr,'SVR - Test Data with Hyperparameters')\n\n","e6d76d4f":"cv_results = pd.DataFrame(svr_grid.cv_results_)\ncv_results = cv_results[cv_results['param_C']<=100]\n#print(cv_results.head())\n# plotting mean test and train scoes with alpha \ncv_results['param_C'] = cv_results['param_C'].astype('int32')\n\nplt.figure(figsize=(10,5))\n# plotting\nsns.scatterplot(cv_results['param_C'], cv_results['mean_train_score'])\nsns.scatterplot(cv_results['param_C'], cv_results['mean_test_score'])\nplt.xlabel('C')\nplt.ylabel('Negative Mean Absolute Error')\nplt.title(\"Negative Mean Absolute Error and alpha\")\nplt.legend(['train score', 'test score'], loc='upper left')\n\n#plt.ylim(0,1)\nplt.show()\nplt.figure(figsize=(10,5))\nsns.boxplot(cv_results['param_kernel'], cv_results['mean_train_score'])\nsns.boxplot(cv_results['param_kernel'], cv_results['mean_test_score'])\nplt.xlabel('kernel')\nplt.ylabel('Negative Mean Absolute Error')\nplt.title(\"Negative Mean Absolute Error and alpha\")\nplt.legend(['train score', 'test score'], loc='upper left')\n\n#plt.ylim(0,1)\nplt.show()","4820b17c":"svr_grid.best_params_","fdf6b09e":"from sklearn.linear_model import Ridge\nridge=Ridge(alpha=.1)\nridge.fit(X_train,y_train)\ntrain_ridge_pr=ridge.predict(X_train)\ntest_ridge_pr=ridge.predict(X_test)\naccuracy_finder(y_train,train_ridge_pr,'Ridge-Training Data without Hyperparameter')\naccuracy_finder(y_test,test_ridge_pr,'Ridge-Test Data without Hyperparameter')","8c04d494":"ridge_cv=Ridge()\nparams={'alpha':[0.01,0.1,1,2,3,4,5,6,7,8,10,20,50,100]}\nridge_grid=GridSearchCV(ridge_cv,param_grid=params,verbose = 3,n_jobs=-1,cv=5,scoring='r2',return_train_score=True)\nridge_grid.fit(X_train,y_train)\n\ntrain_gscv_ridge=ridge_grid.predict(X_train)\ntest_gscv_ridge=ridge_grid.predict(X_test)\naccuracy_finder(y_train,train_gscv_ridge,'Ridge-Training Data with Hyperparameter')\naccuracy_finder(y_test,test_gscv_ridge,'Ridge-Test Data with Hyperparameter')\nprint(ridge_grid.best_params_)","f6dddf24":"from sklearn.linear_model import Lasso\nlasso=Lasso(alpha=.1)\nlasso.fit(X_train,y_train)\ntrain_lasso_pr=lasso.predict(X_train)\ntest_lasso_pr=lasso.predict(X_test)\naccuracy_finder(y_train,train_lasso_pr,'Lasso- Training Data without Hyperparameter')\naccuracy_finder(y_test,test_lasso_pr,'Lasso- Test Data without Hyperparameter')\n","1f7edd05":"lasso_cv=Lasso()\nparams={'alpha':[0.01,0.1,1,2,3,4,5,6,7,8,10,20,50,100]}\nlasso_grid=GridSearchCV(lasso_cv,param_grid=params,verbose = 3,n_jobs=-1,cv=5,scoring='r2',return_train_score=True)\nlasso_grid.fit(X_train,y_train)\n\ntrain_gscv_lasso=lasso_grid.predict(X_train)\ntest_gscv_lasso=lasso_grid.predict(X_test)\naccuracy_finder(y_train,train_gscv_lasso,'Lasso-Training Data with Hyperparameter')\naccuracy_finder(y_test,test_gscv_lasso,'Lasso-Test Data with Hyperparameter')\nprint(ridge_grid.best_params_)","b9a065ae":"accuracy_finder(y_train,train_gscv_lasso,'Lasso-Training Data with Hyperparameter')\naccuracy_finder(y_test,test_gscv_lasso,'Lasso- Test Data with Hyperparameter')","50220769":"from sklearn.ensemble import RandomForestRegressor\nrf=RandomForestRegressor()\nrf.fit(X_train,y_train)\ntrain_rf_pr=rf.predict(X_train)\ntest_rf_pr=rf.predict(X_test)\naccuracy_finder(y_train,train_rf_pr,'Random Forest -Training Data without Hyperparameter')\naccuracy_finder(y_test,test_rf_pr,'Random Forest-Test Data without Hyperparameter')","3fb049a5":"importances = rf.feature_importances_\nindices = np.argsort(importances)\n\nfig, ax = plt.subplots(figsize=(20,10))\nax.barh(range(len(importances)), importances[indices])\nax.set_yticks(range(len(importances)))\n_ = ax.set_yticklabels(np.array(X_train.columns)[indices])\nplt.show()","4e2839dd":"from sklearn.model_selection import RandomizedSearchCV\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\n# Use the random grid to search for best hyperparameters\n# First create the base model to tune\nrf_gcv = RandomForestRegressor()\n# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations, and use all available cores\nrf_random = RandomizedSearchCV(estimator = rf_gcv, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n# Fit the random search model\nrf_random.fit(X_train, y_train)\n#rf_random.fit(X_train, y_train)","ba84aa67":"best_random = rf_random.best_estimator_\n#train_pred_best_random=rf_random.predict(X_train)\ntrain_pred_best_random=rf_random.predict(X_train)\ntest_pred_best_random=rf_random.predict(X_test)\naccuracy_finder(y_train,train_pred_best_random,'Random Forest -Training Data with Hyperparameters')\naccuracy_finder( y_test,test_pred_best_random,'Random Forest -Test Data with Hyperparameters')\n\n","23729591":"#from xgboost import XGBRegressor\n\n#xb=XGBRegressor()\nn_estimators = [int(x) for x in np.linspace(start = 1, stop = 200, num = 10)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(2, 100, num = 10)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               \n               'max_depth': max_depth}\n# Use the random grid to search for best hyperparameters\n# First create the base model to tune\n#xgb_gcv = xb.fit(X_train,y_train)\n# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations, and use all available cores\n#xgb_random = GridSearchCV(estimator = xgb_gcv, param_grid= random_grid,  cv = 5, verbose=2, n_jobs = -1)\n# Fit the random search model\n#xgb_random.fit(X_train, y_train)","f56445d3":"import tensorflow as tf\nfrom keras.layers import Dense,Dropout\nfrom keras.activations import relu,sigmoid\nfrom keras import Sequential\nfrom keras import regularizers,optimizers\nfrom keras import initializers\nfrom keras import backend as K\nfrom keras.callbacks import EarlyStopping\nimport keras\nfrom keras.callbacks import ReduceLROnPlateau\n\n","f37be84b":"model=Sequential()\nmodel.add(Dense(512,input_dim=len(X_train.columns),activation='relu'))\nmodel.add(Dense(256,activation='relu'))\nmodel.add(Dropout(.3))\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dropout(.3))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(.3))\nmodel.add(Dense(32,activation='relu'))\nmodel.add(Dropout(.3))\nmodel.add(Dense(16,activation='relu'))\nmodel.add(Dropout(.3))\nmodel.add(Dense(1))","de4824a5":"def root_mean_squared_error(y_true, y_pred):\n    return K.sqrt(mean_squared_error(y_true, y_pred),axis=-1)\n\nearly_stopping_monitor = EarlyStopping(monitor='val_loss', patience=500)\nrlrop = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=100)","4f26a641":"model.compile(optimizer = 'adam', loss = 'mse', \n          metrics =[\"accuracy\"])","5661fe96":"dataset = tf.data.Dataset.from_tensor_slices((\n    {\n        'input': X_train,\n        \n    },\n    {\n        'output': y_train\n    },\n))","7c24e073":"BATCH_SIZE = 32\nmodel.fit(X_train,y_train,batch_size=BATCH_SIZE,epochs=5000, callbacks = [early_stopping_monitor,rlrop],verbose=2)","6bbd2009":"best_random","76bc8d09":"temp=X_train.copy()\n","2bbfe5ce":"test_cat.isna().sum()","df82698c":"#temp=X_train.drop(['Condition2_RRAe', 'RoofMatl_CompShg', 'RoofMatl_Metal', 'RoofMatl_Roll', 'GarageQual_Fa'],axis=1)","71bfe501":"test_cat=pd.get_dummies(test,columns=cat.columns,drop_first=True)\nvar1=test_cat.select_dtypes(include=['float64','int64'])\ntest_cat[var1.columns]=sc.transform(var1)\n#Scaling Test data\n\n#Getting predictions\ntest_df_preds=best_random.predict(test_cat[X_train.columns])\nprint(test_df_preds)\n#Adding Id column\ntest_preds=pd.DataFrame({'Id':test['Id'],'SalePrice':(np.exp(test_df_preds))})\n#test_preds.to_csv('Submission.csv',index=False)","396b8172":"test_cat=pd.get_dummies(test,columns=cat.columns,drop_first=True)\nvar1=test_cat.select_dtypes(include=['float64','int64'])\ntest_cat[var1.columns]=sc.transform(var1)\n#Scaling Test data\n\n#Getting predictions\ntest_df_preds1=model.predict(test_cat[X_train.columns])\ntest_df_preds2=[x[0] for x in test_df_preds1]\n    \nprint(test_df_preds2)\n#Adding Id column\ntest_preds1=pd.DataFrame({'Id':test['Id'],'SalePrice':(np.exp(test_df_preds2))})\ntest_preds1.to_csv('Submission.csv',index=False)","67b63126":"base_xgb=XGBRegressor()\nbase_xgb.fit(X_train,y_train)\npred_train=base_xgb.predict(X_train)\npred_test=base_xgb.predict(X_test)\naccuracy_finder(y_train,pred_train,'XGBoost Model-Training Data without Hyperparameter')\naccuracy_finder(y_test,pred_test,'XGBoost Model- Test Data without Hyperparameter')\n\npred_train_xgb=xgb_random.predict(X_train)\npred_test_xgb=xgb_random.predict(X_test)\naccuracy_finder(y_train,pred_train_xgb,'XGBoost Model-Training Data with Hyperparameter')\naccuracy_finder(y_test,pred_test_xgb,'XGBoost Model- Test Data with Hyperparameter')"}}