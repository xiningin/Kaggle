{"cell_type":{"bf4a7b37":"code","44fc901e":"code","b80fd4ff":"code","91893a10":"code","b4dccf76":"code","bebb9936":"code","77fe8851":"code","e1c3cb68":"code","0d7daab5":"code","6bd192ea":"code","5d326e17":"code","d60abc16":"code","dcaea387":"code","7c2b0520":"code","ce444bb1":"code","27df9731":"code","c346ee8b":"code","598e76ce":"code","d5c89d36":"code","47396d07":"code","523482e6":"code","7679a156":"code","c414c03b":"code","499b92ae":"code","bf5386ea":"code","76313876":"code","dad52a8b":"code","434a50d9":"code","c3ddedf0":"code","935433b0":"code","8fa9582b":"code","29cbab8b":"code","6cb83d09":"code","3354ac9b":"code","ca51ca70":"code","81d34581":"code","abe47c52":"code","2de59525":"code","e053a65a":"code","587b6722":"code","cca208fc":"code","0cef51ff":"code","f3d077e6":"code","97e5ae62":"code","fea8ba4a":"code","2a20262e":"code","872f096e":"code","c84c32aa":"code","d6975e31":"code","9ad23a26":"code","bd53e3d2":"code","efaab058":"code","efe581e1":"code","09d8ab8b":"code","69a85daa":"code","3ca7fbbf":"code","00419deb":"code","347c10c0":"code","fdca5a28":"code","67531c7d":"code","38c2743a":"code","c51166d3":"code","e2b0825a":"code","222fdea6":"code","96fec320":"code","38e9234c":"code","b8803d35":"markdown"},"source":{"bf4a7b37":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","44fc901e":"import pandas as pd\nimport numpy as np","b80fd4ff":"df = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/train.csv')","91893a10":"t_df = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/test.csv')","b4dccf76":"t_df.head()","bebb9936":"df.head()","77fe8851":"df.info()","e1c3cb68":"df.isna().mean()","0d7daab5":"df.describe()","6bd192ea":"df['Vehicle_Age'].value_counts()","5d326e17":"df['Response'].value_counts()","d60abc16":"t_df.head()","dcaea387":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","7c2b0520":"df['Gender'] = le.fit_transform(df['Gender'])\nt_df['Gender'] = le.transform(t_df['Gender'])","ce444bb1":"df['Vehicle_Age'] = le.fit_transform(df['Vehicle_Age'])\nt_df['Vehicle_Age'] = le.transform(t_df['Vehicle_Age'])","27df9731":"df['Vehicle_Damage'] = le.fit_transform(df['Vehicle_Damage'])\nt_df['Vehicle_Damage'] = le.transform(t_df['Vehicle_Damage'])","c346ee8b":"df.info()","598e76ce":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(x='Response',data=df)\nplt.show()","d5c89d36":"df['Response'].value_counts(normalize=True)*100","47396d07":"ext = df[df['Response'] == 1]","523482e6":"train_final = pd.concat([df,ext,ext,ext,ext,ext,ext])","7679a156":"train_final['Response'].value_counts(normalize=True)*100","c414c03b":"import seaborn as sns\nsns.countplot(x='Response',data=train_final)\nplt.show()","499b92ae":"dff = train_final\ndff.corr().round(2)","bf5386ea":"sns.heatmap(dff.corr())","76313876":"   \ncat_features = dff[[ 'Vehicle_Damage', 'Previously_Insured', 'Gender','Vehicle_Damage', 'Vehicle_Age', 'Driving_License']].columns\nfor i in cat_features:\n    sns.barplot(x=\"Response\",y=i,data=dff)\n    plt.title(i+\" by \"+\"Response\")\n    plt.show()","dad52a8b":"X = dff.drop(['Response','id'],axis = 1)\ny = dff['Response']","434a50d9":"from sklearn.tree import DecisionTreeClassifier","c3ddedf0":"dt = DecisionTreeClassifier().fit(X,y)","935433b0":"dt.feature_importances_","8fa9582b":"X.columns","29cbab8b":"pd.DataFrame(dt.feature_importances_,index=['Gender', 'Age', 'Driving_License', 'Region_Code', 'Previously_Insured','Vehicle_Age', 'Vehicle_Damage', 'Annual_Premium','Policy_Sales_Channel', 'Vintage']).plot.bar()","6cb83d09":"X_new = X.drop(['Gender','Driving_License','Vehicle_Age'],axis = 1)","3354ac9b":"from sklearn.preprocessing import StandardScaler","ca51ca70":"sc = StandardScaler()","81d34581":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(X_new,y,test_size = 0.33,random_state = 42)","abe47c52":"x_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","2de59525":"x_train","e053a65a":"x_test","587b6722":"from sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier,AdaBoostClassifier\nfrom xgboost import XGBClassifier","cca208fc":"dt = DecisionTreeClassifier(random_state=42).fit(x_train,y_train)","0cef51ff":"dt.score(x_test,y_test)","f3d077e6":"dt_pred = dt.predict(x_test)","97e5ae62":"from sklearn.metrics import roc_auc_score","fea8ba4a":"print('DT_Score :',roc_auc_score(y_test,dt_pred))","2a20262e":"forest = RandomForestClassifier(random_state=42).fit(x_train,y_train)\nforest.score(x_test,y_test)","872f096e":"forest_pred = forest.predict(x_test)\nprint('Forest_Score :',roc_auc_score(y_test,forest_pred))","c84c32aa":"grad = GradientBoostingClassifier().fit(x_train,y_train)\ngrad_pred = grad.predict(x_test)\ngrad.score(x_test,y_test)","d6975e31":"print('GradientBoosting_Score :',roc_auc_score(y_test,grad_pred))","9ad23a26":"ada = AdaBoostClassifier().fit(x_train,y_train)\nada_pred = ada.predict(x_test)","bd53e3d2":"ada.score(x_test,y_test)\nprint('AdaBoost_Score :',roc_auc_score(y_test,ada_pred))","efaab058":"xgb = XGBClassifier().fit(x_train,y_train)\nxgb_pred = xgb.predict(x_test)","efe581e1":"xgb.score(x_test,y_test)","09d8ab8b":"print('xgb_Score :',roc_auc_score(y_test,xgb_pred))","69a85daa":"dt = DecisionTreeClassifier(random_state=42).fit(x_train,y_train)","3ca7fbbf":"dt.score(x_test,y_test)","00419deb":"print('ROC_AUC_Score :',roc_auc_score(y_test,dt_pred))","347c10c0":"from sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(y_test, dt_pred).ravel()\nconfusion_matrix","fdca5a28":"#Predicting proba\ny_pred_prob = dt.predict(x_test)\nfrom sklearn.metrics import roc_curve\n# Generate ROC curve values: fpr, tpr, thresholds\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\n\n# Plot ROC curve\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show()","67531c7d":"from sklearn import metrics\ncols = ['Model', 'ROC Score', 'Precision Score', 'Recall Score','Accuracy Score','Kappa Score']\nmodels_report = pd.DataFrame(columns = cols)\n\ntmp5 = pd.Series({'Model': \" Decision Tree\",\n                 'ROC Score' : metrics.roc_auc_score(y_test, dt_pred),\n                 'Precision Score': metrics.precision_score(y_test, dt_pred),\n                 'Recall Score': metrics.recall_score(y_test, dt_pred),\n                 'Accuracy Score': metrics.accuracy_score(y_test, dt_pred),\n                 'Kappa Score':metrics.cohen_kappa_score(y_test, dt_pred)})\n\nmodel5_report = models_report.append(tmp5, ignore_index = True)\nmodel5_report","38c2743a":"t_df = t_df[X_new.columns]","c51166d3":"scc = StandardScaler().fit(X_new)","e2b0825a":"X_new_sc = scc.transform(X_new)\nt_sc = scc.transform(t_df)","222fdea6":"dtt = DecisionTreeClassifier(random_state=42).fit(X_new_sc,y)","96fec320":"pred = dtt.predict(t_sc)","38e9234c":"pd.Series(pred).to_csv('Prediction.csv')","b8803d35":"# Decision Tree is givng best results"}}