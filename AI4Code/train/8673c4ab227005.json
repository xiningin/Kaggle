{"cell_type":{"840b9810":"code","789a2c01":"code","390c94eb":"code","9adce545":"code","e4cadca7":"code","536aff70":"code","f44408f9":"code","af15cbb4":"code","70b693eb":"code","6d885419":"code","5eb72fe2":"code","6d15cb3a":"code","12dc2964":"code","9bc4951b":"code","500f9c22":"code","b0764879":"code","8bce22e7":"code","0a4676bf":"code","e4a259e3":"code","92e662c5":"code","e5ddc453":"markdown","613a9a92":"markdown","e0ebb145":"markdown","b541a717":"markdown","f3805696":"markdown","4c17ce0e":"markdown","5dd5dded":"markdown","d02be89f":"markdown","3cfcdd73":"markdown","52bd8d99":"markdown","4e4f53ad":"markdown","c5b258b8":"markdown","1415d59f":"markdown"},"source":{"840b9810":"%matplotlib inline\n\n# Importa biblioteca\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport warnings\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.grid_search import GridSearchCV\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\n# Configuracoes basicas.\nwarnings.filterwarnings(\"ignore\")\nplt.rcParams[\"figure.dpi\"] = 100\nplt.style.use(\"ggplot\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\n# Configura seed.\nnp.random.seed(42)","789a2c01":"diabetes = pd.read_csv(\"..\/input\/diabetes.csv\")","390c94eb":"diabetes.head()","9adce545":"diabetes.describe()","e4cadca7":"#sns.pairplot(data=diabetes, hue=\"Outcome\");","536aff70":"#plt.figure(figsize=(12, 10))\n#sns.heatmap(data=diabetes.corr(), annot=True)","f44408f9":"diabetes_features = diabetes.drop(\"Outcome\", axis=1)\ndiabetes_outcome = diabetes[\"Outcome\"]","af15cbb4":"diabetes_features.head()","70b693eb":"diabetes_outcome.head()","6d885419":"X_train, X_test, y_train, y_test = train_test_split(diabetes_features, diabetes_outcome, test_size=0.2)","5eb72fe2":"gnb = GaussianNB()\n\ngnb.fit(X_train, y_train)","6d15cb3a":"y_predicted_gnb = gnb.predict(X_test)","12dc2964":"confusion_matrix(y_test, y_predicted_gnb)\npd.crosstab(y_test, y_predicted_gnb, rownames=[\"Actual\"], colnames=[\"Predicted\"], margins=True)","9bc4951b":"print(classification_report(y_test, y_predicted_gnb))","500f9c22":"svm = SVC()\n\nparam_grid = {'C': [1, 5, 10, 50],\n              'gamma': [0.0001, 0.0005, 0.001, 0.005]}\n\ngrid = GridSearchCV(svm, param_grid)\n\ngrid.fit(X_train, y_train)\n\ngrid.best_params_\n\nsvm = grid.best_estimator_","b0764879":"y_predicted_svm = svm.predict(X_test)","8bce22e7":"confusion_matrix(y_test, y_predicted_svm)\npd.crosstab(y_test, y_predicted_svm, rownames=[\"Actual\"], colnames=[\"Predicted\"], margins=True)","0a4676bf":"print(classification_report(y_test, y_predicted_svm))","e4a259e3":"X = X_test.assign(Outcome=y_test)\n\nX","92e662c5":"case = 382\n\nprint(f\"Outcome real: {y_test.loc[case]}\")\nprint(f\"Previs\u00e3o do GaussianNB: {gnb.predict([X_test.loc[case, :]])[0]}\")\nprint(f\"Previs\u00e3o do SVM: {svm.predict([X_test.loc[case, :]])[0]}\")\nprint(f\"Probabilidades pelo GaussianNB: {gnb.predict_proba([X_test.loc[case, :]])[0]}\")","e5ddc453":"# Cria\u00e7\u00e3o de modelos\n\nAgora vamos criar dois modelos simples que nos permitir\u00e3o prever se uma pessoa pode ser considerada diabetica ou n\u00e3o.\n\nO primeiro modelo \u00e9 o [Na\u00efve Bayes](http:\/\/scikit-learn.org\/stable\/modules\/naive_bayes.html) e o segundo \u00e9 o Support Vector Machine [SVM](http:\/\/scikit-learn.org\/stable\/modules\/svm.html).\n\nAntes, vamos separar os dados em treino e teste:","613a9a92":"## Leitura dos dados e primeira an\u00e1lise","e0ebb145":"### Avalia\u00e7\u00e3o do resultado","b541a717":"### Previs\u00e3o","f3805696":"### Treinamento","4c17ce0e":"## Na\u00efve Bayes","5dd5dded":"# An\u00e1lise explorat\u00f3ria","d02be89f":"## O conjunto de teste","3cfcdd73":"### Previs\u00e3o","52bd8d99":"# An\u00e1lise do dataset Pima Indians Diabetes Database\n\nColunas:\n\n* Pregnancies: n\u00famero de vezes gr\u00e1vida.\n* Glucose: concentra\u00e7\u00e3o de plasma glicose em duas horas em um teste oral de toler\u00e2ncia \u00e0 glicose.\n* BloodPressure: press\u00e3o di\u00e1stolica (mm Hg).\n* SkinThickness: espessura das dobras cut\u00e2neas do tr\u00edcepes (mm).\n* Insulin: duas horas serum insulina (mu U\/ml)\n* BMI: \u00edndice de massa corp\u00f3rea (peso em kg\/(altura em m)\u00b2)\n* DiabetesPedigreeFunction: fun\u00e7\u00e3o de pedigree da diabetes.\n* Age: idade (anos).\n* Outcome: vari\u00e1vel de classe (0 ou 1).","4e4f53ad":"## SVM","c5b258b8":"### Avalia\u00e7\u00e3o do resultado","1415d59f":"### Treinamento"}}