{"cell_type":{"34835223":"code","1dd8e34c":"code","5044a426":"code","69cd9939":"code","b89d9583":"code","a887e464":"code","e3fa79e1":"code","b090d9c0":"code","30ef7d13":"code","d748a7bd":"code","47105e7e":"code","0eade5a3":"code","ffe1a6a4":"code","4b282075":"code","19f45f71":"code","69029418":"code","67fef063":"code","826ebf0a":"code","25d57602":"code","790092cb":"code","0fb5d602":"markdown","c5a6b9b4":"markdown","8b8b7ff3":"markdown","86a76eeb":"markdown","8a70e332":"markdown","d75f5796":"markdown","d1dad7f3":"markdown","5149701b":"markdown","45984d4a":"markdown"},"source":{"34835223":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n%matplotlib inline\nimport os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom matplotlib import pyplot as plt\nfrom matplotlib import image as img\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms\nimport torch.optim as optim\n\nfrom sklearn.model_selection import train_test_split\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1dd8e34c":"# set all dir\ndata_dir = \"..\/input\/aerial-cactus-identification\"            # main dir\ntrain_dir = data_dir + \"\/train\/train\"                         # train images folder\ntest_dir = data_dir + \"\/test\/test\"                            # test images folder","5044a426":"# read train csv\ndata = pd.read_csv(data_dir + \"\/train.csv\")\ndata.head()                                                   # test csv","69cd9939":"# check ratio of images with cactus and without cactus\ndata[\"has_cactus\"].value_counts()","b89d9583":"# visualize ratio of images with cactus and without cactus\nplt.hist(data.has_cactus,align='mid',bins=4)\nplt.xlim(-1, 2)\nplt.xlabel(\"0: has not cactus and 1: has cactus\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Number of Images has cactus {1} and without cactus\")","a887e464":"# inherit Dataset and make changes as we access images through index latter\nclass cactData(Dataset):\n    def __init__(self, split_data, data_root = '.\/', transform = None):\n        super().__init__()\n        self.df = split_data.values                       # set dataframe\n        self.data_root = data_root                        # images path\n        self.transform = transform                        # transform\n\n    def __len__(self):\n        return len(self.df)                               # return total length of dataframe \n    \n    def __getitem__(self, index):\n        img_name,label = self.df[index]                   # get image id and label from csv\n        img_path = os.path.join(self.data_root, img_name) # set image path\n        image = img.imread(img_path)                      # read image from given image path\n        if self.transform is not None:                    # transform image if transform available \n            image = self.transform(image)\n        return image, label                               # return image and image label","e3fa79e1":"# split data into train and validation set; so training data = 80% and validation data = 20%\ntrain, valid = train_test_split(data, stratify=data.has_cactus, test_size = 0.2)","b090d9c0":"# define transforms\ntrain_transf = transforms.Compose([transforms.ToPILImage(),\n                                   transforms.ToTensor()])\n\nvalid_transf = transforms.Compose([transforms.ToPILImage(),\n                                  transforms.ToTensor()])","30ef7d13":"#  batch size \nbatch_size = 128","d748a7bd":"# set cactData cons\ntrain_data = cactData(train, train_dir, train_transf)\nvalid_data = cactData(valid, train_dir, valid_transf)\n\n# get training and validation data\ntrain_loader = DataLoader(dataset=train_data, batch_size=batch_size, shuffle=True)\nvalid_loader = DataLoader(dataset=valid_data, batch_size=batch_size\/\/2, shuffle=False)","47105e7e":"# test data\nimages, labels = next(iter(train_loader))\nimages[0], labels[0]","0eade5a3":"# define CNN model\nclass Net(nn.Module): \n    def __init__(self):\n        super(Net, self).__init__()\n        \n        # Convolutional Neural Networks\n        self.conv1 = nn.Conv2d(3, 10, 3, padding=1)\n        self.conv2 = nn.Conv2d(10, 20, 3, padding=1)\n        \n        # fully connected network\n        self.fc1 = nn.Linear(1280, 640)\n        self.fc2 = nn.Linear(640, 2)\n        \n        # pooling and dropout layer\n        self.pool = nn.MaxPool2d(2, 2)\n        self.dropout = nn.Dropout(0.25)\n        \n    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))\n        \n        # reshape to fit into fully connected net\n        x = x.view(x.shape[0],-1)\n        x = F.relu(self.fc1(x))\n        x = F.dropout(x, training=self.training)\n        x = self.fc2(x)\n        \n        return x","ffe1a6a4":"# set hyper parameters\nnum_epochs = 20\nlearning_rate = 0.01\nmomentum = 0.9\n\n# check if GPU available\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\ndevice","4b282075":"# model architecture  \nmodel = Net().to(device)\nprint(model)","19f45f71":"# specify loss function (categorical cross-entropy)\ncriterion = nn.CrossEntropyLoss()\n\n# SGD optimizer\noptimizer = optim.SGD(model.parameters(), lr=learning_rate,momentum=momentum)","69029418":"# to track validation loss\nvalid_loss_min = np.Inf\n\nfor epoch in range(1, num_epochs + 1):\n    # keep track of training and validation loss\n    train_loss = 0.0\n    valid_loss = 0.0\n    \n    # training model\n    model.train()\n    for data, target in train_loader:\n        # move tensors to GPU if CUDA is available\n        data = data.to(device)\n        target = target.to(device)\n        \n        # clear the gradients of all optimized variables\n        optimizer.zero_grad()\n        # forward pass: compute predicted outputs by passing inputs to the model\n        output = model(data)\n        # calculate the batch loss\n        loss = criterion(output, target)\n        # backward pass: compute gradient of the loss with respect to model parameters\n        loss.backward()\n        # perform a single optimization step (parameter update)\n        optimizer.step()\n        # update training loss\n        train_loss += loss.item() * data.size(0)\n        \n    # validate the model\n    model.eval()\n    for data, target in valid_loader:\n        # move tensors to GPU if CUDA is available\n        data = data.to(device)\n        target = target.to(device)\n        \n        # forward pass: compute predicted outputs by passing inputs to the model\n        output = model(data)\n        # calculate the batch loss\n        loss = criterion(output, target)\n        # update average validation loss \n        valid_loss += loss.item() * data.size(0)\n    \n    # calculate average losses\n    train_loss = train_loss\/len(train_loader.sampler)\n    valid_loss = valid_loss\/len(valid_loader.sampler)\n        \n    # print training\/validation statistics \n    print('Epoch: {} \\tTraining Loss: {:.6f} \\tValidation Loss: {:.6f}'.format(\n        epoch, train_loss, valid_loss))\n    \n    # save model if validation loss has decreased\n    if valid_loss <= valid_loss_min:\n        print('Validation loss decreased ({:.6f} --> {:.6f}).  Saving model ...'.format(\n        valid_loss_min,\n        valid_loss))\n        torch.save(model.state_dict(), 'CNN_model.pt')\n        valid_loss_min = valid_loss","67fef063":"# set best model params\nmodel.load_state_dict(torch.load('CNN_model.pt'))","826ebf0a":"# check accuracy on validation dataset\nmodel.eval()\nwith torch.no_grad():\n    correct = 0\n    total = 0\n    for data, target in valid_loader:\n        # move tensors to GPU if CUDA is available\n        data = data.to(device)\n        target = target.to(device)\n        \n        # forward pass: compute predicted outputs by passing inputs to the model\n        outputs = model(data)\n        \n        # convert output probabilities to predicted class\n        _, predicted = torch.max(outputs.data, 1)\n        \n        total += target.size(0)\n        correct += (predicted == target).sum().item()\n    print('Test Accuracy: {} %'.format(100 * correct \/ total))","25d57602":"# prepare data for submission\ndf_submission = pd.read_csv(data_dir + \"\/sample_submission.csv\")\n\ntest_data = cactData(df_submission, test_dir, transform=valid_transf)\ntest_loader = DataLoader(dataset = test_data, batch_size=batch_size, shuffle=False)","790092cb":"model.eval()\n\npred_label = []\nfor data, target in test_loader:\n    # move tensors to GPU if CUDA is available\n    data, target = data.cuda(), target.cuda()\n    \n    # forward pass\n    output = model(data)\n    \n    prob = output[:,1].detach().cpu().numpy()\n    for p in prob:\n        pred_label.append(p)\n\n# Set predicted labels to submission\ndf_submission['has_cactus'] = pred_label\ndf_submission.to_csv('submission.csv', index=False)","0fb5d602":"# 9. Prepare data for submission","c5a6b9b4":"# 3. Explore Data","8b8b7ff3":"# 2. Set directories","86a76eeb":"# 7. Train and validate model","8a70e332":"# 4. Prepare data and split into training and validation","d75f5796":"# 8. Validation accurecy","d1dad7f3":"# 5. Define CNN Model","5149701b":"# 1. Import necessary librares","45984d4a":"# 6. Set hyper parameters"}}