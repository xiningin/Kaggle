{"cell_type":{"1178d047":"code","5598dcc6":"code","20a38af3":"code","76893edc":"code","ff97ff6b":"code","2cde0fcb":"code","5852a128":"code","15c20e7e":"code","57210a98":"code","59f11164":"code","08dc2bb1":"code","885a49ea":"code","f3adc889":"code","2198dbb6":"code","390c54f4":"code","37bccecc":"code","41cf9748":"code","1903e820":"code","3ca0abdc":"code","06ec4170":"code","c06010a4":"code","109d83cc":"code","84f5724f":"code","c184b8ad":"code","205e86a5":"code","dea1a800":"code","8c3bf07f":"code","5be83916":"code","22955142":"code","def0c96a":"code","38c0276a":"code","797ce432":"code","4694eaac":"code","3e0ec3e9":"code","bd3c9cca":"code","ddb301c9":"code","d84778e5":"code","bd584575":"code","51b54713":"code","e588fa2d":"code","608f195c":"code","626178df":"markdown","25d71a8e":"markdown","c6aea072":"markdown","411cd645":"markdown","3d116222":"markdown"},"source":{"1178d047":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom collections import Counter","5598dcc6":"dados = pd.read_csv('..\/input\/potablewater\/water_potability.csv')","20a38af3":"dados.head()","76893edc":"dados.shape","ff97ff6b":"fig = px.histogram(dados, x = 'Solids', template='plotly_white',\n            color = 'Potability', histfunc = 'count', marginal = 'box', opacity=0.9)\n\nfig.update_layout(font_family = 'monospace', bargap = 0.4, \n                  title = dict(text=\"TDS - Total Dissolved Solids\",x= 0.48, y = 0.95),\n                  xaxis_title_text='Solids')","2cde0fcb":"fig = px.histogram(dados, x = 'Sulfate', template='plotly_white',\n            color = 'Potability', histfunc = 'count', marginal = 'box', opacity=0.9)\n\nfig.update_layout(font_family = 'monospace', bargap = 0.4,\n                  title = dict(text=\"Sulfate Distribution\",x= 0.54, y = 0.95),\n                  xaxis_title_text='Sulfate (mg\/L)')\n\nfig.add_vline(x = 250, line_width = 0.8, line_dash = 'dot')\nfig.add_annotation(x = 210, y = 90, text = '<250 mg\/L is considered <br>safe to drink', showarrow  = False)\nfig.show()","5852a128":"fig = px.histogram(dados, x = 'Hardness', template='plotly_white',\n            color = 'Potability', histfunc = 'count', marginal = 'box', opacity=0.9)\n\nfig.update_layout(font_family = 'monospace', bargap = 0.4,\n                  title = dict(text=\"Water Hardness\",x= 0.5, y = 0.95),\n                  xaxis_title_text='Hardness (mg\/L)')\n\nfig.add_vline(x = 75, line_dash = 'dot', line_width = 0.8)\nfig.add_annotation(text = '<75mg\/L is generally  <br> considered soft', x = 50, y = 150,showarrow=False)\nfig.add_vline(x = 150, line_dash = 'dot', line_width = 0.8)\nfig.add_annotation(text = '75<Hardness<150(mg\/L) is <br> moderately hard', x = 120, y = 150,showarrow=False)\nfig.add_vline(x = 300, line_dash = 'dot', line_width = 0.8)\nfig.add_annotation(text = '151<Hardness<300(mg\/L) is <br> hard', x = 260, y = 150,showarrow=False)\nfig.add_annotation(text = '>300mg\/L is very hard', x = 350, y = 150,showarrow=False)","15c20e7e":"fig = px.histogram(dados, x = 'Turbidity', template='plotly_white',\n            color = 'Potability', histfunc = 'count', marginal = 'box', opacity=0.9)\n\nfig.update_layout(font_family = 'monospace', bargap = 0.4,\n                  title = dict(text=\"Water Turbidity\",x= 0.45, y = 0.95),\n                  xaxis_title_text='Turbidity (NTU)')\n\nfig.add_vline(x = 5, line_width = 0.8, line_dash = 'dot')\nfig.add_annotation(text = '<5 NTU is safe <br> to drink', x=5.5, y=120,showarrow = False)","57210a98":"fig = px.histogram(dados, x = 'ph', template='plotly_white',\n            color = 'Potability', histfunc = 'count', marginal = 'box', opacity=0.9)\n\nfig.update_layout(font_family = 'monospace', bargap = 0.4,\n                  title = dict(text=\"Water pH\",x= 0.49, y = 0.95),\n                  xaxis_title_text='pH')\n\nfig.add_vline(x = 7, line_width = 2.0, line_dash = 'dot')\nfig.add_annotation(text = 'pH=7 is<br> neutral', x = 6.0, y = 160, showarrow=False)\nfig.add_annotation(text = 'pH<7 is<br> acid', x = 3.5, y = 100, showarrow=False)\nfig.add_annotation(text = 'pH>7 is<br> alkaline', x = 10, y = 100, showarrow=False)","59f11164":"fig = px.histogram(dados, x = 'Conductivity', template='plotly_white',\n            color = 'Potability', histfunc = 'count', marginal = 'box', opacity=0.9)\n\nfig.update_layout(font_family = 'monospace', bargap = 0.3,\n                  title = dict(text=\"Water Conductivity\",x= 0.45, y = 0.95),\n                  xaxis_title_text='Conductivity (\u00b5S\/cm)')\n\nfig.add_vline(x = 400, line_width = 0.8, line_dash = 'dot')\nfig.add_annotation(text='<400 \u00b5S\/cm is considered<br> safe to drink', x=330, y = 160,showarrow=False)","08dc2bb1":"fig = px.histogram(dados, x = 'Chloramines', template='plotly_white',\n            color = 'Potability', histfunc = 'count', marginal = 'box', opacity=0.9)\n\nfig.update_layout(font_family = 'monospace', bargap = 0.4,\n                  title = dict(text=\"Water Chloramines\",x= 0.5, y = 0.95),\n                 xaxis_title_text='Chloramines (ppm)')\n\nfig.add_vline(x = 4, line_width = 0.8, line_dash = 'dot')\nfig.add_annotation(text='Chloramine levels up to 4 mg\/L<br> are considered safe<br> in drinking water', x = 2, y = 120,\n                  showarrow=False)","885a49ea":"fig = px.histogram(dados, x = 'Organic_carbon', template='plotly_white',\n            color = 'Potability', histfunc = 'count', marginal = 'box', opacity=0.9)\n\nfig.update_layout(font_family = 'monospace', bargap = 0.4,\n                  title = dict(text=\"Organic Carbon Distribution\",x= 0.5, y = 0.95),\n                 xaxis_title_text='Organic Carbon (mg\/L)')\n\nfig.add_vline(x=10, line_width = 0.8, line_dash = 'dot')\nfig.add_annotation(text='Typical TOC values<br> are up to 10mg\/L',x=7, y = 120,showarrow=False)","f3adc889":"fig = px.histogram(dados, x = 'Trihalomethanes', template='plotly_white',\n            color = 'Potability', histfunc = 'count', marginal = 'box', opacity=0.9)\n\nfig.update_layout(font_family = 'monospace', bargap = 0.4,\n                  title = dict(text=\"Trihalomethanes Distribution\",x= 0.5, y = 0.95),\n                 xaxis_title_text='Trihalomethanes (\u00b5g\/L)')\n\nfig.add_vline(x=80,line_width=0.8,line_dash = 'dot')\nfig.add_annotation(text='THM levels up to 80\u00b5g\/L <br> are considered safe<br> in drinking water', x=95,y=120,\n                  showarrow=False)","2198dbb6":"sns.heatmap(dados.corr(), vmin = -0.5, cmap = 'Blues');","390c54f4":"dados.isnull().sum()","37bccecc":"#Treating the Null values by replacing them with their mean\ndados['ph'] = dados['ph'].fillna(dados['ph'].mean())\ndados['Sulfate'] = dados['Sulfate'].fillna(dados['Sulfate'].mean())\ndados['Trihalomethanes'] = dados['Trihalomethanes'].fillna(dados['Trihalomethanes'].mean())","41cf9748":"dados.isnull().sum()","1903e820":"dados.describe()","3ca0abdc":"#Splitting the data in features (x) and target (y)\nx_water = dados.iloc[:, 0:9].values\ny_water = dados.iloc[:, 9].values\nx_water.shape, y_water.shape","06ec4170":"from sklearn.preprocessing import StandardScaler","c06010a4":"scaler_water = StandardScaler()\nx_water = scaler_water.fit_transform(x_water)","109d83cc":"from sklearn.model_selection import train_test_split\nx_water_training, x_water_test, y_water_training, y_water_testing = train_test_split(x_water, y_water, test_size = 0.20,\n                                                                                    random_state = 0)","84f5724f":"x_water_training.shape, y_water_training.shape","c184b8ad":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV   \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier","205e86a5":"#Parameter Tuning:\nlr = LogisticRegression()\nknn = KNeighborsClassifier()\ndt = DecisionTreeClassifier()\nrf = RandomForestClassifier()\nxgb = XGBClassifier(eval_metric='logloss', use_label_encoder=False)\nsvm = SVC()","dea1a800":"par_knn = {'n_neighbors': np.arange(1,40), 'p':[1,2]}\ngrid_knn = GridSearchCV(knn, param_grid=par_knn, cv = 10)\n\npar_dt = {'criterion': ['gini', 'entropy'], 'max_depth':np.arange(1,40),\n         'min_samples_leaf':[1,2,4,5,10,20,30,40,80,100]}\ngrid_dt = GridSearchCV(dt, param_grid=par_dt, cv=10)\n\npar_rf = {'n_estimators': [100,200,350,500], 'min_samples_leaf':[2,10,30]}\ngrid_rf = GridSearchCV(rf, param_grid=par_rf, cv=10)\n\npar_lr = {'tol': [0.0001, 0.00001, 0.000001],\n             'C': [1.0, 1.5, 2],\n             'solver': ['lbfgs', 'sag', 'saga']}\ngrid_lr = GridSearchCV(lr, param_grid=par_lr, cv=10)\n\npar_xgb = {'n_estimators': [50,100,250,400,600,800,1000],\n              'learning_rate': [0.2,0.5,0.8,1]}\nrs_xgb = RandomizedSearchCV(xgb, param_distributions=par_xgb, cv=10)\n\npar_svm = {'kernel': ['linear', 'rbf', 'poly'], 'C': [0.1, 1, 1.5],\n          'degree': [2,3,5]}\ngrid_svm = GridSearchCV(svm, param_grid=par_svm, cv=10, n_jobs=-1)","8c3bf07f":"grid_knn.fit(x_water_training, y_water_training)\nprint('Melhores par\u00e2metros kNN', grid_knn.best_params_)","5be83916":"grid_dt.fit(x_water_training, y_water_training)\nprint('Melhores par\u00e2metros \u00c1rvores de Decis\u00e3o', grid_dt.best_params_)","22955142":"grid_lr.fit(x_water_training, y_water_training)\nprint('Melhores par\u00e2metros Regress\u00e3o Log\u00edstica', grid_lr.best_params_)","def0c96a":"rs_xgb.fit(x_water_training, y_water_training)\nprint('Melhores par\u00e2metros XGB', rs_xgb.best_params_)","38c0276a":"grid_rf.fit(x_water_training, y_water_training)\nprint('Melhores Par\u00e2metros Random Forest', grid_rf.best_params_)","797ce432":"grid_svm.fit(x_water_training,y_water_training)\nprint('Melhores parametros SVM', grid_svm.best_params_)","4694eaac":"knn = KNeighborsClassifier(n_neighbors=25, p=2)\ndt = DecisionTreeClassifier(criterion='entropy', max_depth=7, min_samples_leaf=40, random_state=0)\nrf = RandomForestClassifier(min_samples_leaf=2, n_estimators=350, random_state=0)\nlr = LogisticRegression(C=1.0, solver='lbfgs', tol=0.0001, random_state=0)\nxgb = XGBClassifier(n_estimators = 50, learning_rate = 0.2, use_label_encoder = False, random_state=0, eval_metric='mlogloss')\nsvm = SVC(C=1, degree=2, kernel='rbf', random_state=0)","3e0ec3e9":"classifiers = [('kNN', knn), ('\u00c1rvore Decis\u00e3o', dt), ('RandomForest', rf), ('Logistic Regression', lr),\n              ('XGBoost', xgb), ('SVM', svm)]","bd3c9cca":"from sklearn.metrics import accuracy_score, classification_report\nfor classifier_name, classifier in classifiers:\n    classifier.fit(x_water_training, y_water_training)\n    pred = classifier.predict(x_water_test)\n    acc = accuracy_score(y_water_testing, pred)\n    \n    \n    print('{:s} : {:.2f}'.format(classifier_name, acc*100), '%')","ddb301c9":"from sklearn.model_selection import cross_val_score,KFold\nresults_dt = []\nresults_rf = []\nresults_knn = []\nresults_lr = []\nresults_xgb = []\nresults_svm = []\nfor i in range(30):    #30 is generally used for KFold CV.\n    kfold = KFold(n_splits=10, shuffle=True, random_state=i)  #random_state = i so that every loop we get a different value\n    \n    scores = cross_val_score(dt, x_water, y_water, cv=kfold)\n    results_dt.append(scores.mean())\n    \n    scores = cross_val_score(rf, x_water, y_water, cv = kfold)\n    results_rf.append(scores.mean())\n    \n    scores = cross_val_score(knn, x_water, y_water, cv=kfold)\n    results_knn.append(scores.mean())\n    \n    scores = cross_val_score(lr, x_water, y_water, cv=kfold)\n    results_lr.append(scores.mean())\n    \n    scores = cross_val_score(xgb, x_water, y_water,cv=kfold)\n    results_xgb.append(scores.mean())\n    \n    scores = cross_val_score(svm, x_water, y_water,cv=kfold)\n    results_svm.append(scores.mean())","d84778e5":"resultados = pd.DataFrame({'Decision Tree': results_dt, 'RandomForest': results_rf,\n                          'kNN': results_knn, 'Logistic Regression': results_lr,\n                          'XGBoost': results_xgb, 'SVM': results_svm})","bd584575":"resultados.describe()","51b54713":"resultados.max()","e588fa2d":"rf.fit(x_water_training, y_water_training)\npred_rf = rf.predict(x_water_test)\nfrom sklearn.metrics import classification_report\nprint(classification_report(pred_rf, y_water_testing))","608f195c":"from yellowbrick.classifier import ConfusionMatrix\ncm = ConfusionMatrix(rf)\ncm.fit(x_water_training, y_water_training)\ncm.score(x_water_test, y_water_testing)","626178df":"Using KFold cross validation to estatistically judge the algorithms","25d71a8e":"From the ConfusionMatrix we can see that the algorithm can identify almost 70% of the non-potable water and classify them corretly with 90% accuracy.","c6aea072":"### Data Visualization","411cd645":"### Pre Processing","3d116222":"### Analizing the Confusion Matrix"}}