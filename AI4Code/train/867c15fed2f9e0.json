{"cell_type":{"6fb7b7c5":"code","322f15c5":"code","64f5097e":"code","be809406":"code","074b4374":"code","267fc89c":"code","b123b73e":"code","df605f11":"code","755ccc20":"code","eb53cb6f":"code","e3e1c835":"code","7627d6c2":"code","9ec89d1e":"code","3163f758":"code","a716cfa9":"code","4065ef62":"code","56c6c78c":"code","515ed009":"code","f87c260f":"code","163ffb32":"code","cb74d0ef":"code","0df90994":"code","0339c622":"code","ca5415f5":"code","0a32c86b":"code","7ff23098":"code","2c909ee1":"code","2d453ac8":"code","ab2b6423":"code","4bd544b0":"code","bc8da941":"code","c03fd852":"code","cf267491":"code","f72b724f":"code","b418bceb":"code","e85d2072":"code","7d3a90f4":"code","e819cf29":"code","84f75695":"code","b07eced3":"code","48f233b0":"code","b53394ce":"code","e880dea2":"code","5de5a5c5":"code","f04ed855":"markdown","61293994":"markdown","e1158758":"markdown","7b9a16a9":"markdown","5c7adcc2":"markdown","c1e7e3d1":"markdown","1c2f1251":"markdown","8ed40a66":"markdown","b46abfb9":"markdown","86f504bc":"markdown","f4cd6d40":"markdown"},"source":{"6fb7b7c5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data VIZ\nfrom sklearn.svm import SVC # \"Support vector classifier\"\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","322f15c5":"train_df = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","64f5097e":"train_df.info()","be809406":"train_df.head(1)","074b4374":"image = np.array(train_df.drop('label', axis=1).iloc[0])","267fc89c":"image.shape","b123b73e":"# number of each label\ntrain_df.label.value_counts()","df605f11":"image = image.reshape(28,28,1)\nplt.imshow(image)\nplt.title(f\"label: {train_df.iloc[0]['label']}\")","755ccc20":"plt.figure(figsize=(8,6))\nfor i in range(10):\n    ax = plt.subplot(2, 5, i+1)\n    index = np.random.randint(0, 1000)\n    image = np.array(train_df.drop('label', axis=1).iloc[index])\n    image = image.reshape(28,28,1)\n    plt.imshow(image)\n    plt.title(f\"label: {train_df.iloc[index]['label']}\")\n    plt.axis(\"off\")","eb53cb6f":"from sklearn.model_selection import train_test_split","e3e1c835":"X = train_df.drop('label', axis=1).values\ny = train_df.label.values","7627d6c2":"X.shape","9ec89d1e":"y.shape","3163f758":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","a716cfa9":"X_train.shape","4065ef62":"X_test.shape","56c6c78c":"X_train = X_train.reshape(33600, 28, 28, 1)","515ed009":"X_test = X_test.reshape(8400, 28, 28, 1)","f87c260f":"X_train.shape","163ffb32":"X_train = X_train \/ 255.0\nX_test = X_test \/ 255.0","cb74d0ef":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Conv2D,MaxPool2D,Flatten,Dropout, BatchNormalization","0df90994":"model= Sequential()\n\nmodel.add(Conv2D(kernel_size=(3,3), filters=32, activation='relu', input_shape=(28, 28,1)))\n# model.add(Conv2D(filters=30,kernel_size = (3,3),activation='relu'))\n\nmodel.add(MaxPool2D(2,2))\nmodel.add(Conv2D(filters=32,kernel_size = (3,3),activation='relu', input_shape=(28, 28,1)))\n\nmodel.add(MaxPool2D(2,2))\n# model.add(Conv2D(filters=32,kernel_size = (3,3),activation='relu'))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(256,activation='relu'))\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dense(10,activation = 'softmax'))  # the output layer","0339c622":"model.summary()","ca5415f5":"# model compilation\nmodel.compile(loss = 'SparseCategoricalCrossentropy', optimizer ='adam', metrics= ['accuracy'])","0a32c86b":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss', patience=2, restore_best_weights=True)","7ff23098":"model.fit(X_train, y_train, epochs = 30 , validation_data = (X_test, y_test), verbose=1)","2c909ee1":"pd.DataFrame(model.history.history).plot()\nplt.xlabel('epochs')","2d453ac8":"# svm = SVC(random_state=0)","ab2b6423":"# X = train_df.drop('label', axis=1).values\n# y = train_df.label.values","4bd544b0":"# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","bc8da941":"# svm.fit(X_train, y_train)","c03fd852":"# predY = svm.predict(X_test)","cf267491":"# svm.score(X_test, y_test)","f72b724f":"test_df.head(1)","b418bceb":"test_images = np.array(test_df)","e85d2072":"test_images.shape","7d3a90f4":"test_images = test_images.reshape(28000, 28, 28, 1)","e819cf29":"test_images = test_images \/ 255.0","84f75695":"predictions = model.predict(test_images)\npredictions = predictions.argmax(axis=1)\npredictions[:5]","b07eced3":"sub_df = pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")\nsub_df.head(2)","48f233b0":"sub_df['Label'] = predictions","b53394ce":"sub_df.head(2)","e880dea2":"# predictions value counts\nsub_df.Label.value_counts()","5de5a5c5":"sub_df.to_csv(\"submission.csv\", index=False)","f04ed855":"> # Modeling ","61293994":"> the accuracy is almost 97.5","e1158758":"# > **Pre_Processing**","7b9a16a9":"> Rescale the images","5c7adcc2":"Model summary","c1e7e3d1":"# Predictions","1c2f1251":"> train_test split","8ed40a66":"# Get The Data","b46abfb9":"> **SVM**","86f504bc":"Model Structure","f4cd6d40":"> **Viz some results**"}}