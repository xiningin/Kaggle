{"cell_type":{"45de6e98":"code","0a77411e":"code","b284eeaf":"code","b156222a":"code","650434e8":"code","3fd29fa4":"code","2bf2523e":"code","a4536999":"code","bffcbaaf":"code","7a4a6cbd":"code","15f077e1":"code","b672fd58":"code","34650abe":"code","bc61efa8":"code","8f4b585d":"code","8301b43e":"code","df196546":"code","0d6a51e6":"code","c35e6919":"code","da026fe2":"code","decdd28b":"code","dc28b9c3":"code","ac18ad8f":"code","9e661b2b":"markdown","5d9bd2c2":"markdown","0b07c0de":"markdown","2f1331ce":"markdown","bf8336e8":"markdown"},"source":{"45de6e98":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport statsmodels\nfrom statsmodels.tsa.stattools import adfuller\nimport pandas as pd\nfrom fbprophet import Prophet\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\nimport datetime\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0a77411e":"# Basic packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random as rd # generating random numbers\nimport datetime # manipulating date formats\n# Viz\nimport matplotlib.pyplot as plt # basic plotting\nimport seaborn as sns # for prettier plots\nsns.set(rc={'figure.figsize':(11, 4)})\n\n# TIME SERIES\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom pandas.plotting import autocorrelation_plot\nfrom statsmodels.tsa.stattools import adfuller, acf, pacf,arma_order_select_ic\nimport statsmodels.formula.api as smf\nimport statsmodels.tsa.api as smt\nimport statsmodels.api as sm\nimport scipy.stats as scs\n\n\n# settings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b284eeaf":"train = pd.read_csv('\/kaggle\/input\/janatahack-machine-learning-for-iot-dataset\/train_aWnotuB.csv')\ntest = pd.read_csv('\/kaggle\/input\/janatahack-machine-learning-for-iot-dataset\/test_BdBKkAj_L87Nc3S.csv')\nsample = pd.read_csv('\/kaggle\/input\/janatahack-machine-learning-for-iot-dataset\/sample_submission_KVKNmI7.csv')","b156222a":"train.columns","650434e8":"train = train[['ID','DateTime','Junction','Vehicles']]\ntest = test[['ID','DateTime','Junction']]","3fd29fa4":"train.isna().sum()","2bf2523e":"print(train.dtypes)\nprint(test.dtypes)","a4536999":"train['DateTime'] = pd.to_datetime(train['DateTime'])\ntest['DateTime'] = pd.to_datetime(test['DateTime'])","bffcbaaf":"for junc in list(set(train['Junction'])):\n    temp = train[train['Junction'] == junc]\n    print(junc, temp.shape)","7a4a6cbd":"for junc in list(set(test['Junction'])):\n    temp = test[test['Junction'] == junc]\n    print(junc, temp.shape)","15f077e1":"for junc in list(set(train['Junction'])):\n    temp = train[train['Junction'] == junc]\n    print(\"Junction\", junc)\n    print(\"Starting Date -> \",temp['DateTime'].iloc[0])\n    print(\"Ending Date -> \", temp['DateTime'].iloc[-1])\n    print()","b672fd58":"for junc in list(set(test['Junction'])):\n    temp = test[test['Junction'] == junc]\n    print(\"Junction\", junc)\n    print(\"Starting Date -> \",temp['DateTime'].iloc[0])\n    print(\"Ending Date -> \", temp['DateTime'].iloc[-1])\n    print()","34650abe":"for junc in list(set(train['Junction'])):\n    temp = train[train['Junction'] == junc]\n    plt.figure(figsize=(30,8))\n    plt.plot(temp['DateTime'],temp['Vehicles'])\n    plt.show()","bc61efa8":"class StationarityTests:\n    def __init__(self, significance=.05):\n        self.SignificanceLevel = significance\n        self.pValue = None\n        self.isStationary = None\n    def ADF_Stationarity_Test(self, timeseries, printResults = True):\n        #Dickey-Fuller test:\n        adfTest = adfuller(timeseries, autolag='AIC')\n        \n        self.pValue = adfTest[1]\n        \n        if (self.pValue<self.SignificanceLevel):\n            self.isStationary = True\n        else:\n            self.isStationary = False\n        \n        if printResults:\n            dfResults = pd.Series(adfTest[0:4], index=['ADF Test Statistic','P-Value','# Lags Used','# Observations Used'])\n            #Add Critical Values\n            for key,value in adfTest[4].items():\n                dfResults['Critical Value (%s)'%key] = value\n            print('Augmented Dickey-Fuller Test Results:')\n            print(dfResults)","8f4b585d":"for junc in list(set(train['Junction'])):\n    temp = train[train['Junction'] == 1].copy()\n    temp.rename(columns = {'DateTime':'ds','Vehicles':'y'},inplace = True)\n    sTest = StationarityTests()\n    sTest.ADF_Stationarity_Test(temp['y'], printResults = True)\n    print(\"Is the time series stationary? {0}\".format(sTest.isStationary))\n","8301b43e":"def getResult_AdFuller_OR_kpss(_label_col ,_df, testType=1):\n#     print(\"\"\"\n#     for dickeyFuller -> testType = 0\n#     for kpss -> testType = 1\n#     for acf -> testType = 2\n#     for pacf -> testType = 3\n#     for visual and MA ->testType = 4\n#     \"\"\")\n    \n    if testType == 1:\n        from statsmodels.tsa.stattools import adfuller\n        addfull=adfuller(_df[_label_col], autolag='AIC')\n        print(\"\\n\\n > Is the data stationary via addfuller test?\")\n        print(\"Test statistic = {:.3f}\".format(addfull[0]))\n        print(\"P-value = {:.3f}\".format(addfull[1]))\n        print(\"#Lag Used: = {:.3f}\".format(addfull[2]))\n        print(\"Critical values :\")\n        for k, v in addfull[4].items():\n            print(\"\\t{}: {} - The data is {} stationary with {}% confidence\".format(k, v, \"not\" if v<addfull[0] else \"\", 100-int(k[:-1])))\n\n        def isStationary(tstats):\n            if addfull[0] < 0.5:\n                return 'TS data is stationary'\n            else:\n                return 'TS data is non-stationary'    \n        print(isStationary(addfull[0]))\n    if testType == 0:\n        from statsmodels.tsa.stattools import kpss\n        print(\"\\n\\n > Is the data stationary via kpss test?\")\n        kpss_result=kpss(_df[_label_col],regression='c')\n        print(\"Test statistic = {:.3f}\".format(kpss_result[0]))\n        print(\"P-value = {:.3f}\".format(kpss_result[1]))\n        print(\"#Lag Used: = {:.3f}\".format(kpss_result[2]))\n        print(\"Critical values :\")\n        for k, v in kpss_result[3].items():\n            print(\"\\t{}: {} - The data is {} stationary with {}% confidence\".format(k, v, \"not\" if v<kpss_result[0] else \"\", 100.0-float(k[:-1])))\n\n\n        def isStationary(tstats):\n            if kpss_result[0] < 0.5:\n                return 'TS data is stationary'\n            else:\n                return 'TS data is non-stationary'    \n        print(isStationary(kpss_result[0]))\n    if testType == 2:\n        from statsmodels.graphics.tsaplots import plot_acf\n        plt.figure(figsize=(20,6))\n        ax= plt.subplot(111)\n        plot_acf(_df[_label_col],ax=ax)\n        plt.xticks(fontsize=20)\n        plt.title(\"AutoCorrelation plot\",fontsize=30,color='grey')\n        plt.yticks(fontsize=20)\n        plt.xlabel(\"#No of lags\",fontsize=20)\n        plt.ylabel(\"correlation value -1<>1\",fontsize=20)\n    if testType == 3:\n        from statsmodels.graphics.tsaplots import plot_pacf\n        plt.figure(figsize=(20,6))\n        ax= plt.subplot(111)\n        plot_pacf(_df[_label_col],ax=ax)\n        plt.xticks(fontsize=20)\n        plt.title(\"Partial AutoCorrelation plot\",fontsize=30,color='grey')\n        plt.yticks(fontsize=20)\n        plt.xlabel(\"#No of lags\",fontsize=20)\n        plt.ylabel(\"correlation value -1<>1\",fontsize=20)\n        \n    if testType == 4:\n        print(\"\\n\\n1. use ploting to test stationarity in dataset(moving Average)\")\n        plt.rc('xtick', labelsize=25)     \n        plt.rc('ytick', labelsize=25)\n        plt.figure(figsize=(26,10))\n        plt.rc('legend',fontsize=20) # using a size in points\n\n        plt.suptitle(\"Rolling average(Original hourly data) to test stationarity in data\", y=1.0, fontsize=30)\n\n        # 1. Original TS Junction 1\n        plt.plot(_df[_label_col],label='Orig Train Count',color='grey')\n\n        # 2. Original TS Junction 1 Rolling mean and std\n        plt.plot(_df[_label_col].rolling(window=24).mean(),label='Orig Rolling mean',color='brown' )\n        plt.plot(_df[_label_col].rolling(window=24).std(),label='Orig Rolling std',color='blue' )\n        plt.legend(loc='best')\n        \n        \ndef ARIMAcorrPlot(_label_col,_df):\n    from statsmodels.tsa.stattools import acf, pacf \n    lag_acf = acf(_df.dropna()[_label_col], nlags=30) \n    lag_pacf = pacf(_df.dropna()[_label_col], nlags=30, method='ols')\n    lag_acf,lag_pacf\n\n    # Lets plot Autocorrelation Function\n    figure = plt.figure(figsize=(25,7))\n    plt.rc('xtick', labelsize=25)     \n    plt.rc('ytick', labelsize=25)\n    plt.rc('legend',fontsize=20) # using a size in points\n    plt.plot(lag_acf) \n    plt.axhline(y=0,linestyle='--',color='gray') \n    plt.axhline(y=-1.96\/np.sqrt(len(_df.dropna())),linestyle='--',color='Red',label='Lower Confidence Interval') \n    plt.axhline(y=1.96\/np.sqrt(len(_df.dropna())),linestyle='--',color='Blue',label='Upper Confidence Interval') \n    plt.title('Autocorrelation Function (Give Q value on first cut point Upper CI)',fontsize=35) \n    plt.legend(loc='best')\n\n\n    # Lets plot Partial Autocorrelation Function\n    figure = plt.figure(figsize=(25,7))\n    plt.rc('xtick', labelsize=25)     \n    plt.rc('ytick', labelsize=25)\n    plt.rc('legend',fontsize=20) # using a size in points\n    plt.plot(lag_pacf) \n    plt.axhline(y=0,linestyle='--',color='gray') \n    plt.axhline(y=-1.96\/np.sqrt(len(_df.dropna())),linestyle='--',color='red',label='Lower Confidence Interval') \n    plt.axhline(y=1.96\/np.sqrt(len(_df.dropna())),linestyle='--',color='blue',label='Upper Confidence Interval') \n    plt.title('Partial Autocorrelation Function (Give P value on first cut point Upper CI)',fontsize=35) \n    plt.legend(loc='best')","df196546":"train.index = train.DateTime\ntest.index = test.DateTime\nlabel_col='Vehicles'","0d6a51e6":"train","c35e6919":"def applier(row):\n    if row == 5 or row == 6:\n        return 1\n    else:\n        return 0\n\ntrain['year'] =train.DateTime.dt.year\ntrain['day'] = train.DateTime.dt.day\ntrain['month'] = train.DateTime.dt.month\ntrain['Hour'] = train.DateTime.dt.hour\ntrain['day of week'] = train['DateTime'].dt.dayofweek\ntrain['weekend'] = train['DateTime'].dt.dayofweek.apply(applier)\ntest['year'] =test.DateTime.dt.year\ntest['day'] = test.DateTime.dt.day\ntest['month'] = test.DateTime.dt.month\ntest['Hour'] = test.DateTime.dt.hour\ntest['day of week'] = test['DateTime'].dt.dayofweek\ntest['weekend'] = test['DateTime'].dt.dayofweek.apply(applier)","da026fe2":"getResult_AdFuller_OR_kpss(label_col,train,1)","decdd28b":"getResult_AdFuller_OR_kpss(label_col,train,2)","dc28b9c3":"getResult_AdFuller_OR_kpss(label_col,train,3)","ac18ad8f":"getResult_AdFuller_OR_kpss(label_col,train,4)","9e661b2b":"Holidays must be included","5d9bd2c2":"The test results shows that all are stationary ","0b07c0de":"This is a time series forecasting problem\n\nThe datetime given is hourly data\n\n1 day = 24 hours\n\nTherefore 608 days are available \n\n20 months data is available","2f1331ce":"Note that, Juntion 4 has 6 months data","bf8336e8":"We dont have any negative values"}}