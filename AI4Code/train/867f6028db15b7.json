{"cell_type":{"520f7e30":"code","491cdc40":"code","d884766d":"code","50f10b88":"code","270f677d":"code","0da9b771":"code","644e14a8":"code","9a0b3ea2":"code","7a028c96":"code","c87baf9b":"code","3382aa69":"code","d03f5232":"code","ec17090d":"code","0d378fe1":"code","447b8402":"code","30c15c35":"code","af737300":"code","1a6c7e71":"markdown","49db52e7":"markdown","7d22dacf":"markdown"},"source":{"520f7e30":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","491cdc40":"# load data\ntrain_data = pd.read_csv('..\/input\/leaf-classification\/train.csv.zip', index_col ='id')\ntest_data = pd.read_csv('..\/input\/leaf-classification\/test.csv.zip')","d884766d":"test_ids = test_data.id\ntest_data = test_data.drop(['id'], axis =1)","50f10b88":"train_data.head()","270f677d":"# taking care of missing values\ntrain_data.isnull().any().sum()","0da9b771":"test_data.isnull().any().sum()","644e14a8":"# encoding catagorical\ntrain_data.info()","9a0b3ea2":"test_data.info()","7a028c96":"train_data['species'].nunique()","c87baf9b":"# IV and DV\nx = train_data.drop('species',axis=1)\ny = train_data['species']","3382aa69":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\ny_fit = encoder.fit(train_data['species'])\ny_label = y_fit.transform(train_data['species']) \nclasses = list(y_fit.classes_) \nclasses","d03f5232":"# splitting\nfrom sklearn.model_selection import  train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y_label, test_size = 0.2, random_state =1)","ec17090d":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 40)\nclassifier.fit(x_train, y_train)","0d378fe1":"from sklearn.metrics import classification_report\npredictions = classifier.predict(x_test)\nprint (classification_report(y_test, predictions))","447b8402":"final_predictions = classifier.predict_proba(test_data)","30c15c35":"submission = pd.DataFrame(final_predictions, columns=classes)\nsubmission.insert(0, 'id', test_ids)\nsubmission.reset_index()","af737300":"submission.to_csv('submission.csv', index = False)","1a6c7e71":"The target y is the only catagorical column","49db52e7":"# Part 1: Data Preprocessing","7d22dacf":"# Part 2: Building model"}}