{"cell_type":{"de82696e":"code","5f4ad0e1":"code","c24b870b":"code","83e7b98d":"code","db1e9d6a":"code","56b0e083":"code","16bd6de2":"code","50dc0ffa":"code","913562a7":"code","def924fa":"code","dd7b38e8":"code","65d586c4":"code","2157a77b":"code","899fc420":"code","08b6a11a":"code","0fe7e796":"code","029f0949":"code","863693a7":"code","a340fa18":"code","56422457":"code","8057525f":"code","d66ad381":"code","a5c56740":"code","a70cba70":"code","4de3f50c":"code","c54f2180":"code","05bce124":"code","b0456201":"code","883fe41b":"code","aba896b2":"code","e33d7551":"code","002c4665":"code","00fd85d1":"code","6ad69504":"markdown","b5cf8182":"markdown","dbb0cd0a":"markdown","f368f615":"markdown","e9c714bf":"markdown","05cc3700":"markdown","8f92582f":"markdown","39fd5b82":"markdown","9fb1dcf9":"markdown","e3564d93":"markdown"},"source":{"de82696e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5f4ad0e1":"d1 = pd.read_csv('..\/input\/fish-market\/Fish.csv')\nd1.head(10)","c24b870b":"d1.shape","83e7b98d":"d1.info()","db1e9d6a":"d1.describe()","56b0e083":"d1.hist(figsize=(10,10))","16bd6de2":"corr = d1.corr()\ncorr","50dc0ffa":"fig, ax = plt.subplots(figsize=(22,15))\nsns.heatmap(corr, annot=True, ax=ax)","913562a7":"# Checking for null vlaues\nd1.isnull().sum()","def924fa":"# Splitting the attributes\ny1 = d1[\"Weight\"]\nX1 = d1[[\"Length1\", \"Height\", \"Width\", \"Species\"]]\nX1 = pd.get_dummies(X1, columns=[\"Species\"])","dd7b38e8":"# Analysing Categorical Variables\n\nsns.countplot(y1);","65d586c4":"# Numerical attributes comparison using scatterplot\nsns.scatterplot(x=d1['Height'], y=d1['Weight']);","2157a77b":"groupby_species = d1.groupby('Species')\nfor species, value in groupby_species['Weight']:\n    print((species, value.mean()))","899fc420":"groupby_species.mean()","08b6a11a":"groupby_species.boxplot(figsize=(15,15))","0fe7e796":"from statsmodels.graphics.gofplots import qqplot\n\nqqplot(X1,line='s')\nplt.show()","029f0949":"from scipy.stats import skew\n\nprint(skew(X1))","863693a7":"# Splitting data into training and validation dataframes\n\nfrom sklearn.model_selection import train_test_split\nX_train_1, X_test_1, y_train_1, y_test_1 = train_test_split(X1,y1,random_state=1,test_size=0.2)\n\n# verifying shape of data\nprint(X_train_1.shape,y_train_1.shape)\nprint(X_test_1.shape,y_test_1.shape)","a340fa18":"# Scaling Data using Min-Max Scaler\n\nfrom sklearn.preprocessing import MinMaxScaler\nmms = MinMaxScaler()\nX_train_norm_1 = mms.fit_transform(X_train_1)\nX_test_norm_1 = mms.transform(X_test_1)\n\n# Scaling Data using Standard Scaler\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train_1)\nX_train_std_1 = scaler.transform(X_train_1)\nX_test_std_1 = scaler.transform(X_test_1)\n\n# Comparing Scaled Data\n\nxx = np.arange(len(X_train_std_1))\nyy1 = X_train_norm_1[:,0]\nyy2 = X_train_std_1[:,0]\nplt.scatter(xx,yy1,color='b')\nplt.scatter(xx,yy2,color='r')\n\nprint(X_train_std_1.shape)\nprint(X_test_std_1.shape)","56422457":"import statsmodels.api as sm\nmodel_ols = sm.OLS(y_train_1, X_train_norm_1)\nfitted = model_ols.fit()\nprint(fitted.summary())","8057525f":"from scipy.stats import shapiro\nfig, ax = plt.subplots(figsize=(16,4), ncols=2)\nax[0] = sns.scatterplot(x=y_train_1, y=fitted.resid, ax=ax[0])\nax[1] = sns.histplot(fitted.resid, ax=ax[1])\n\nstatistic, p_value = shapiro(fitted.resid)\nif p_value>0.05:\n    print(\"Distribution is normal. Statistic: {0:.3}, p-value: {1:.4}\".format(statistic, p_value))\nelse:\n    print(\"Distribution is not normal. Statistic: {0:.3}, p-value: {1:.4}\".format(statistic, p_value))","d66ad381":"from sklearn.neighbors import KNeighborsRegressor as knn\nmodel1 = knn(n_neighbors=3, p=1)\nmodel1.fit(X_train_norm_1,y_train_1)","a5c56740":"ypred1 = model1.predict(X_test_norm_1)\nypred1","a70cba70":"model1.score(X_test_norm_1,y_test_1)","4de3f50c":"k_values = np.arange(1,100,2)","c54f2180":"train_score_arr = []\nval_score_arr = []\n\nfor k in k_values:\n    \n    model2 = knn(n_neighbors=k)\n    model2.fit(X_train_norm_1,y_train_1)\n    \n    train_score = model2.score(X_train_norm_1, y_train_1) \n    train_score_arr.append(train_score*100)\n    \n    val_score = model2.score(X_test_norm_1, y_test_1)\n    val_score_arr.append(val_score*100)\n    \n    print(\"k=%d, train_accuracy=%.2f%%, test_accuracy=%.2f%%\" % (k, train_score * 100, val_score*100))","05bce124":"plt.plot(k_values,train_score_arr,'g')\nplt.plot(k_values,val_score_arr,'r')","b0456201":"from sklearn.model_selection import cross_val_score\ncross_val_score_train = cross_val_score(model1, X_train_norm_1, y_train_1, cv=10, scoring='r2')\nprint(cross_val_score_train)","883fe41b":"cross_val_score_train.mean()","aba896b2":"from sklearn.metrics import r2_score\n\nprint(r2_score(y_test_1, ypred1))","e33d7551":"a = pd.DataFrame(ypred1, columns=['Estimated Weight'])\na.head()","002c4665":"b = pd.DataFrame(y_test_1)\nb = y_test_1.reset_index(drop=True)\nb.head()","00fd85d1":"ynew = pd.concat([a,b], axis=1)\nynew","6ad69504":"## Observations\n\nThe data doesnot follow Gaussian \/ Normal Distribution and has skewed data","b5cf8182":"There appears to be positive relation between the Weight and Height of the fish.<br>More the weight of fish, more height is observed.","dbb0cd0a":"Highest Fish sold are from category 'Perch'.","f368f615":"## KNN Regressor model construction","e9c714bf":"## OLS regression analysis","05cc3700":"From the above values we can conclude that the best value for k will be between 17 to 19","8f92582f":"## Fish Market Dataset Analysis","39fd5b82":"## Correlation Analysis\nLength1, Length2 and Length3 are highly correlated.","9fb1dcf9":"Min-Max Scaler gives more uniform scaling than Standard Scaler","e3564d93":"## Statistical Analysis"}}