{"cell_type":{"d01d8d2f":"code","fd3ea8d2":"code","3e04cc1c":"code","8d6a5e6e":"code","41546177":"code","59d9248b":"code","2d733a7e":"code","f415ad9f":"code","bf2c7cde":"code","eb91c314":"code","b828ac20":"code","5ca427d9":"code","2cfb60e2":"code","bb432e76":"code","4a804b95":"code","47b6437d":"code","34512725":"code","7a7c23bf":"code","98210c89":"code","b45cb01a":"code","1d5f7590":"code","62a6e3e4":"code","9a557cc0":"code","936a52d7":"code","fa6423cb":"code","31b2ac7e":"code","6f6b5ef2":"markdown","83972970":"markdown","89425a45":"markdown","61ddc49b":"markdown","5d5f886b":"markdown","e3ce257f":"markdown","f13f8cf8":"markdown","e0d7a168":"markdown","b713f4d1":"markdown","0c7e57f2":"markdown","36866e2f":"markdown","ce66a873":"markdown","ccfd86a2":"markdown","1f2ec769":"markdown","e1954c7e":"markdown","8dab0fe9":"markdown","42311ce9":"markdown","8136a358":"markdown","11a73669":"markdown","f17e943b":"markdown","52556c2a":"markdown","2ae3d008":"markdown","ca2fdb1d":"markdown","014357d3":"markdown","1d3ca7ec":"markdown","481bdd73":"markdown","590d15cc":"markdown","6822f497":"markdown","e5c742d4":"markdown","4fa53ef6":"markdown","b54ec977":"markdown","80845922":"markdown","1c79075e":"markdown","27379f0b":"markdown","dd688fe9":"markdown"},"source":{"d01d8d2f":"# Data Manipulation\nimport pandas as pd\nimport numpy as np\n\n# Data Viz\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import DivergingNorm\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.io as pio\n\n# Cluster\nfrom sklearn.cluster import KMeans\n\nnp.warnings.filterwarnings('ignore')","fd3ea8d2":"game = pd.read_csv('..\/input\/videogamesales\/vgsales.csv')\ndisplay(game)","3e04cc1c":"sns.heatmap(game.isnull())","8d6a5e6e":"display(game[game['Year'].isnull()].head(10))\ndisplay(game[game['Year'].isnull()].shape)\ndisplay(game[game['Publisher'].isnull()].head(10))\ndisplay(game[game['Publisher'].isnull()].shape)\n","41546177":"game.info()","59d9248b":"game.info()","2d733a7e":"game.select_dtypes('object').columns","f415ad9f":"fig = px.histogram(game, x=\"Platform\", template=\"plotly_white\", color_discrete_sequence=[\"rgb(127,232,186)\"]).update_xaxes(categoryorder=\"total descending\")\nfig.show()\n\nprint(\"Platform has {} unique values\".format(len(game['Platform'].unique())))\nprint(\"Top 5 values are: {}\".format(', '.join(game['Platform'].value_counts().index[:5])))","bf2c7cde":"fig = px.histogram(game, x=\"Genre\", template=\"plotly_white\", color_discrete_sequence=[\"rgb(127,232,186)\"]).update_xaxes(categoryorder=\"total descending\")\nfig.show()\n\nprint(\"Genre has {} unique values\".format(len(game['Genre'].unique())))\nprint(\"Top 5 values are: {}\".format(', '.join(game['Genre'].value_counts().index[:5])))","eb91c314":"fig = px.histogram(game, x=\"Publisher\", template=\"plotly_white\", color_discrete_sequence=[\"rgb(127,232,186)\"]).update_xaxes(categoryorder=\"total descending\")\nfig.show()\n\nprint(\"Publisher has {} unique values\".format(len(game['Publisher'].unique())))\nprint(\"Top 10 values are: {}\".format(', '.join(game['Publisher'].value_counts().index[:10])))","b828ac20":"numbers = list(game.select_dtypes(['int64', 'float64']).columns)[2:]\nnumbers","5ca427d9":"fig = make_subplots(rows=6, cols=2)\n\nfig.add_trace(go.Histogram(x=game['NA_Sales'], nbinsx=10, name='NA_Sales', marker_color='rgb(254, 147, 140)', opacity=0.8), row=1, col=1)\nfig.add_trace(go.Box(x=game['NA_Sales'], name='NA_Sales', marker_color='rgb(254, 147, 140)'), row=2, col=1)\n\nfig.add_trace(go.Histogram(x=game['EU_Sales'], nbinsx=10, name='EU_Sales', marker_color='rgb(230, 184, 156)', opacity=0.8), row=1, col=2)\nfig.add_trace(go.Box(x=game['EU_Sales'], name='EU_Sales', marker_color='rgb(230, 184, 156)'), row=2, col=2)\n\nfig.add_trace(go.Histogram(x=game['JP_Sales'], nbinsx=10, name='JP_Sales', marker_color='rgb(234, 210, 172)', opacity=0.8), row=3, col=1)\nfig.add_trace(go.Box(x=game['JP_Sales'], name='JP_Sales', marker_color='rgb(234, 210, 172)'), row=4, col=1)\n\nfig.add_trace(go.Histogram(x=game['Other_Sales'], nbinsx=10, name='Other_Sales', marker_color='rgb(156, 175, 183)', opacity=0.8), row=3, col=2)\nfig.add_trace(go.Box(x=game['Other_Sales'], name='Other_Sales', marker_color='rgb(156, 175, 183)'), row=4, col=2)\n\nfig.add_trace(go.Histogram(x=game['Global_Sales'], nbinsx=10, name='Global_Sales', marker_color='rgb(66, 129, 164)', opacity=0.8), row=5, col=1)\nfig.add_trace(go.Box(x=game['Global_Sales'], name='Global_Sales', marker_color='rgb(66, 129, 164)'), row=6, col=1)\n\nfig.update_layout(template=\"plotly_white\",\n    autosize=False,\n    width=1200,\n    height=1000,\n    margin=dict(\n        l=50,\n        r=50,\n        b=100,\n        t=100))\n\nfig.show()","2cfb60e2":"woutliers = game[game['Global_Sales']<0.5]\nwoutliers[numbers].hist(figsize=(20,10), color='#aaf0d1', edgecolor='white')\n\nplt.show()\n\ngame[numbers].describe()","bb432e76":"fig = px.histogram(game, x=\"Year\", template=\"plotly_white\", color_discrete_sequence=[\"rgb(127,232,186)\"]).update_xaxes(categoryorder=\"total descending\")\nfig.show()\n\ngame['Year'].describe()","4a804b95":"sales = game.dropna(subset=['Year'], how='all')\nsales['Year'] = sales['Year'].astype(str)\nsales = sales.sort_values(by=['Year'])\n\n# Code to create 'empty data', necessary to fit in the data into the plotly slide figure\nplatform = list(sales['Platform'].value_counts().index)\nyear = list(sales['Year'].value_counts().sort_index().index)\n\n\nd = {}\np = []\ny = []\n\n\nfor i in platform:\n    for j in year:\n        p.append(i)\n        y.append(j)\n\nd['Platform'] = p\nd['Year'] = y\n\nscratch = pd.DataFrame(d)\nscratch['Global_Sales'] = 0\n\n\nsales = sales.loc[:,['Platform', 'Year', 'Global_Sales']]\n\nfinal = pd.concat([sales,scratch])\nfinal = final.sort_values(by=['Year'])\n\nfinalx = pd.DataFrame(final.groupby(['Platform', 'Year'])['Global_Sales'].sum())\nfinalx = finalx.reset_index()\n\n# Plotly figure with slide\nfig = px.bar(\n    data_frame=finalx,\n    y='Global_Sales',\n    x='Platform',\n    animation_frame='Year', template=\"plotly_white\", color_discrete_sequence=['rgb(254, 147, 140)']).update_xaxes(categoryorder=\"total descending\")\n\nfig.show()","47b6437d":"best =  pd.DataFrame(game.groupby('Platform')['Global_Sales'].sum())\nbest = best.reset_index()\n\nfig = px.bar(\n  data_frame=best,\n  y='Global_Sales',\n  x='Platform',\n    template=\"plotly_white\", color_discrete_sequence=['rgb(254, 147, 140)']).update_xaxes(categoryorder=\"total descending\")\n\nfig.show()","34512725":"sales = game.dropna(subset=['Year'], how='all')\nsales['Year'] = sales['Year'].astype(str)\nsales = sales.sort_values(by=['Year'])\n\n# Code to create 'empty data', necessary to fit in the data into the plotly slide figure\ngenre = list(sales['Genre'].value_counts().index)\nyear = list(sales['Year'].value_counts().sort_index().index)\n\n\nd = {}\ng = []\ny = []\n\n\nfor i in genre:\n    for j in year:\n        g.append(i)\n        y.append(j)\n\nd['Genre'] = g\nd['Year'] = y\n\nscratch = pd.DataFrame(d)\nscratch['Global_Sales'] = 0\n\n\nsales = sales.loc[:,['Genre', 'Year', 'Global_Sales']]\n\nfinal = pd.concat([sales,scratch])\nfinal = final.sort_values(by=['Year'])\n\nfinalx = pd.DataFrame(final.groupby(['Genre', 'Year'])['Global_Sales'].sum())\nfinalx = finalx.reset_index()\n\n# Plotly figure with slide\nfig = px.bar(\n  data_frame=finalx,\n  y='Global_Sales',\n  x='Genre',\n  animation_frame='Year', template=\"plotly_white\", color_discrete_sequence=['rgb(66, 129, 164)']).update_xaxes(categoryorder=\"total descending\")\n\nfig.show()","7a7c23bf":"best =  pd.DataFrame(game.groupby('Genre')['Global_Sales'].sum())\nbest = best.reset_index()\n\nfig = px.bar(\n  data_frame=best,\n  y='Global_Sales',\n  x='Genre',\n    template=\"plotly_white\", color_discrete_sequence=['rgb(66, 129, 164)']).update_xaxes(categoryorder=\"total descending\")\n\nfig.show()","98210c89":"fig, ax = plt.subplots(2, 1, figsize=(23,12))\nfig.tight_layout(pad=8)\n\nline = game.groupby(['Year'])['Global_Sales'].sum()\nline = pd.DataFrame(line)\n\ngroup = game.groupby(['Year'])['Global_Sales'].sum()\ngroup = pd.DataFrame(group)\ngroup['Global_Sales'] = np.round(group['Global_Sales'].pct_change() * 100, 2)\n\nnorm = DivergingNorm(vmin=group['Global_Sales'].min(), vcenter=0, vmax=group['Global_Sales'].max())\ncolors = [plt.cm.RdYlGn(norm(c)) for c in group['Global_Sales']]\n\nsns.lineplot(x=line.index, y=line['Global_Sales'], data=line, ax=ax[0])\nax[0].tick_params(labelrotation=90)\n\nsns.barplot(x=group.index, y=group['Global_Sales'], data=group, palette=colors, ax=ax[1])\nax[1].tick_params(labelrotation=90)\n\nplt.show()\n\ndisplay(line.iloc[19:,:].T)","b45cb01a":"X = game.loc[:,'NA_Sales':].values\n\nkmeans = KMeans(n_clusters=3)\nkmeans.fit(X)\n\ngame['Cluster'] = kmeans.labels_\ngame['Cluster'] = game['Cluster'].astype(str)\n\nfig = px.scatter(data_frame=game,\n    x='EU_Sales',\n    y='Global_Sales',\n    color='Cluster',\n    template=\"plotly_white\",\n    color_discrete_map={'0':\"rgb(219, 58, 52)\", '2':\"rgb(255, 200, 87)\", '1':\"rgb(8, 76, 97)\"},\n     hover_name='Name',\n    hover_data=['Platform', 'Publisher', 'Year'])\nfig.show()","1d5f7590":"def cat(cluster):\n    if cluster == '0':\n        return 'low'\n    if cluster == '1':\n        return 'high'\n    if cluster == '2':\n        return 'medium'\n\ngame['Cluster'] = game['Cluster'].apply(cat)\n","62a6e3e4":"sns.countplot(game['Cluster'], palette='Set3')\nplt.show()","9a557cc0":"low = game[game['Cluster']=='low']\n\n\nprint(\"5 most frequent Platform in the low category are: {}\".format(', '.join(low['Platform'].value_counts().index[:5])))\nprint(\"5 most frequent Genre in the low category are: {}\".format(', '.join(low['Genre'].value_counts().index[:5])))\nprint(\"5 most frequent Publisher in the low category are: {}\".format(', '.join(low['Publisher'].value_counts().index[:5])))\n\ndisplay(low.describe())","936a52d7":"medium = game[game['Cluster']=='medium']\n\n\nprint(\"5 most frequent Platform in the medium category are: {}\".format(', '.join(medium['Platform'].value_counts().index[:5])))\nprint(\"5 most frequent Genre in the medium category are: {}\".format(', '.join(medium['Genre'].value_counts().index[:5])))\nprint(\"5 most frequent Publisher in the medium category are: {}\".format(', '.join(medium['Publisher'].value_counts().index[:5])))\n\ndisplay(medium.describe())","fa6423cb":"high = game[game['Cluster']=='high']\n\n\nprint(\"5 most frequent Platform in the high category are: {}\".format(', '.join(high['Platform'].value_counts().index[:5])))\nprint(\"5 most frequent Genre in the high category are: {}\".format(', '.join(high['Genre'].value_counts().index[:5])))\nprint(\"5 most frequent Publisher in the high category are: {}\".format(', '.join(high['Publisher'].value_counts().index[:5])))\n\ndisplay(high.describe())","31b2ac7e":"best = game.sort_values(by=['Global_Sales'], ascending=False)['Name'][0]\nprint(\"Best selling game ever is: {}\".format(best))","6f6b5ef2":"'Publisher' feature has lot's of values values. One of the advantages of plotly is that you are able to zoom-in and out the graph to freely explore it and make a more readable graph","83972970":"Hope you enjoy the notebook and learn something from it! i can gurantee i got hook by this fun dataset. I would appreciate some honest feedback on the comments on ways i could further improve, or any thought you have about the dataset. If you like it, please upvote (i'm really close to become a notebook expert :D).\n\nCheers and happy coding!","89425a45":"## 2.2. Numbers","61ddc49b":"## 2.1. Categories","5d5f886b":"# 4. Popularity Through the Years by Genre\nSince the logic is same (category vs sales) we are going to use the same code as in section 3. \n\nLet's analyze 'Genre'","e3ce257f":"# Data analysis","f13f8cf8":"# 1. Data Loading and Data Cleaning","e0d7a168":"# About the Dataset\nThis dataset contains a list of video games with sales greater than 100,000 copies. It was generated by a scrape of vgchartz.com.\n\n# Features\n- Rank - Ranking of overall sales\n\n- Name - The games name\n\n- Platform - Platform of the games release (i.e. PC,PS4, etc.)\n\n- Year - Year of the game's release\n\n- Genre - Genre of the game\n\n- Publisher - Publisher of the game\n\n- NA_Sales - Sales in North America (in millions)\n\n- EU_Sales - Sales in Europe (in millions)\n\n- JP_Sales - Sales in Japan (in millions)\n\n- Other_Sales - Sales in the rest of the world (in millions)\n\n- Global_Sales - Total worldwide sales.\n\n\n# Table of Contents\n\n1. [Data Loading and Data Cleaning](#1.-Data-Loading-and-Data-Cleaning)\n2. [Descriptive Analysis](#2.-Descriptive-Analysis)\n3. [Popularity Through the Years by Platform](#3.-Popularity-Through-the-Years-by-Platform)\n4. [Popularity Through the Years by Genre](#4.-Popularity-Through-the-Years-by-Genre)\n5. [Global Sales Growth](#5-Global-Sales-Growth)\n6. [Clusters](#6.-Clusters)\n7. [Bonus](#Bonus.)\n\n# Purpose\nThe purose of the dataset is to explore it's features along with their relationships and find interesting patterns, analyze them and visualize them.\n\nThe Dataset is pretty tidy, has categorical values, date values and sales values. Those values will be perfect to practice s visualization skills and maybe we can find a useful machine learning model\n\ndon't forget to upvote if you find the notebook useful, i'm so close to become a notebook expert so i would really (REALLY) appreciate it :D ","b713f4d1":"# 2. Descriptive Analysis","0c7e57f2":"No surpise that action is the winner with 1,751 in total sales.","36866e2f":"Feel free to explor the chart, remember to press the 'Autoscale' button as you advance to get a more clear view of the chart.\nFrom the chart we can see how a the platforms have been overperforming other platforms as the years pass. Some platforms that dominated an are are:\n\n- SNES: 1983-1994\n- PS: 1995-2000\n- PS2: 2001-2005\n- Wii: 2006-2009\n- PS3 : 2011-2013\n- PS4: 2014-2017\n\nThere must be something that PSX consoles are doing that always dominate the market, will they keep performing the same when the PS5 is realeased?\n\nWe see that the PSX consoles together dominate the market, but which consoles absolutly wins in terms of sales through all these years? Let's find out","ce66a873":"- We see in the graph how the video game sales have been increasing from 1980 until 2008 when they reached theyr peak at 678.9\n- from to 2008 until today, sales have been suspiciously decreasing. Call it intuition but i guess the data from 2016 until 2020 is not complete","ccfd86a2":"- Cluster 0 = low sales\n- Cluster 1 = high sales\n- Cluster 2 = medium sales\nlet's change the names in the dataset so that we don\u00c4t getconfuse later","1f2ec769":"## Inspecting Null's Values","e1954c7e":"# 5 Global Sales Growth","8dab0fe9":"- The winner is the PS2 with a staggering total sales of 1,255.64.\n- Although X360 was just in place 1 in one year (2010) it was able to make it place 2. Seems like the 10's was an excelent period to sell video games.\n\nLet's continue with how the 'Genre' performed through the years","42311ce9":"The data types are also in order.\n\nLet's then continue with the descriptive analysis","8136a358":"# Bonus.\n## Whats the best selling game ever?","11a73669":"# 6. Clusters\n\nLet's apply k-means. My intention is to divide the dataset into low-sales, medium-sales and high-sales; in order to inspect and build a sales profile.","f17e943b":"## 6.2. Medium-Sales","52556c2a":"Most of the data is 'low' but thats normal. Let's see each category","2ae3d008":"- The graph and the statistics show us that the games in this dataset tend to be from year 2003 until 2010","ca2fdb1d":"- The graphs without the outliers show the shape of the distribution. Most of the values are indeed in the lower values and then it descends.\n- All of the number features have a similar descending shape\n- The box plots show how rich in outliers the data set is. We are not going to drop the ouliers since they could tell an interesting success story about some games. Nevertheless, for the machine learning model, i might be dropping the extreme values to create a more realitic and perhaps accuarate model.","014357d3":"# 3. Popularity Through the Years by Platform\nA good measure of popularity is the total sales that a platform generated. Therefore, in this seciton we are going to take a look at how each platform has been gaining or loosing popularity or sales through the years.\n\nTo graph the dataframe with plotly it is necessary that we drop the Nan's values from the 'Year' column","1d3ca7ec":"## 6.3. High-Sales","481bdd73":"### Publisher","590d15cc":"## 6.1. Low-Sales","6822f497":"Looks like we have a few nulls values in the dataset. Let's check them out","e5c742d4":"### Genre","4fa53ef6":"### Platform","b54ec977":"## 2.3. Date","80845922":"## Data Types","1c79075e":"Nulls values dont seem to be inconsistent data and there are not a lot of them. I don't think that dropping them would make a huge impact on the analysis. Quite the contrary, to my mind, we would be losing some interest information, like sports games in the case of nulls values in the year features, or GBA games in the publisher feature.","27379f0b":"looks like the vast majority of values lie in the lower bin, the boxplots show where exactly the outliers are and the reason why the distributions don't have a shape. Let's take the outliers out of the analysis for this section to see if we can get a more readable distribution","dd688fe9":"- Until 2001, we see how the different genres fight for position 1 without dominating for years.\n- Since 2001, the 'Action' genre dominated the market, until 2017, when role-playing took its position\n\nWhat is the absolute winner in sales?"}}