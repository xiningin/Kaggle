{"cell_type":{"ed331b2f":"code","5986f51b":"code","d7f6ca8e":"code","c0cdaf0c":"code","c6da3f9e":"code","6b675ce1":"code","9f0b0b59":"code","d5cacec5":"code","fb849810":"code","662daba0":"code","9ce4396d":"code","400b3f99":"code","c4fc2a93":"code","7365d8bd":"code","96e972c7":"code","45ec238a":"code","08679cf2":"code","f5f8030d":"code","700e3991":"code","b6f28725":"code","4842c573":"code","0cdc220f":"code","cf3f0602":"code","731c3d0e":"code","85ed4be3":"code","3bc0d140":"code","e45fb631":"code","08cfc6af":"code","301d3372":"code","3f34557e":"code","7c3cf3a9":"code","cd5e10ef":"code","d5e6489d":"code","21bfbc38":"code","b0495b1f":"code","1af0a970":"code","347b79f1":"code","1c52a163":"code","a57c7f43":"code","f9e90982":"code","70935ac4":"code","913b1db5":"code","fc47e407":"code","51a5701b":"code","d9c66037":"code","aabcfaba":"code","9a0c16a1":"code","d7fe8df2":"code","ec116f79":"code","1744204f":"code","d09e89df":"code","516721db":"code","07dc579c":"code","8e78268d":"code","0105850f":"code","40a2638d":"code","e0412a3f":"code","fd86487b":"code","982f2a44":"code","e0dcd3a6":"code","2e2686a4":"code","f53fddc2":"code","70b8ba20":"code","0c312fe1":"code","12224fa0":"code","3ab0d221":"code","46d1c599":"code","86053f81":"code","06b8ccff":"code","452405c4":"code","09d05eca":"code","414a4004":"code","a05748a0":"code","8513259a":"code","449c8eaa":"code","02256096":"markdown","395a171c":"markdown","82365635":"markdown","7e128a6f":"markdown","3d358c65":"markdown","433fec91":"markdown","cc6392a7":"markdown","870c3376":"markdown","a7d871d1":"markdown","5420233b":"markdown","0b142e23":"markdown","97b1c375":"markdown","42c8ba69":"markdown","ff47a514":"markdown","e8099012":"markdown","859081d2":"markdown","abfb26d0":"markdown","319eabea":"markdown","c7544824":"markdown","c98bba26":"markdown","ea7a7e4e":"markdown","b2f933e0":"markdown","8d8450e9":"markdown","5e7c57e2":"markdown","51df2276":"markdown","99bd7b41":"markdown","fbe0c138":"markdown","56034822":"markdown","7f40a781":"markdown","720b8543":"markdown","8a167cd5":"markdown","6b4d0e64":"markdown","e1438b51":"markdown","226fd00b":"markdown","ff3e6d7c":"markdown","57dfce97":"markdown","fab697d5":"markdown","0ae8dfae":"markdown","96ba5156":"markdown","2d44ba81":"markdown","adab6103":"markdown","bf96742b":"markdown","9bc0b461":"markdown","80f4defc":"markdown","6bc8c013":"markdown","cf464937":"markdown","ed622410":"markdown"},"source":{"ed331b2f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom scipy import stats\nimport matplotlib.style as style\nstyle.use('fivethirtyeight')\n\ntype_colors = sns.color_palette(\"hls\", 16)","5986f51b":"# Read the Dataset\n\ndata_train=pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_features.csv\")\ndata_test = pd.read_csv(\"\/kaggle\/input\/lish-moa\/test_features.csv\")\ntarget_scored = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_targets_scored.csv\")\ntarget_nonscored = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_targets_nonscored.csv\")\n","d7f6ca8e":"# First Five rows\n\ndata_train.head()","c0cdaf0c":"# Shape of the training data\n\ndata_train.shape","c6da3f9e":"# Check for Null\n\ndata_train.isna().sum()","6b675ce1":"# Check if id is unique\n\ndata_train.sig_id.nunique()","9f0b0b59":"print('There are  {:} rows in training data.'.format(len(data_train)))","d5cacec5":"# Describe the training Dataset\n\ndata_train.describe()","fb849810":"def plot_fn(df, feature):\n\n    ## Create a chart\n    fig = plt.figure(constrained_layout=True, figsize=(12,8))\n    ## create a grid of 3 cols and 3 rows. \n    grid = gridspec.GridSpec(ncols=3, nrows=3, figure=fig)\n    \n\n    ## Customizing the histogram grid. \n    ax1 = fig.add_subplot(grid[0, :2])\n    ## Set the title. \n    ax1.set_title('Histogram')\n    ## plot the histogram. \n    sns.distplot(df.loc[:,feature], norm_hist=True, ax = ax1)\n\n    # customizing the QQ_plot. \n    ax2 = fig.add_subplot(grid[1, :2])\n    ## Set the title. \n    ax2.set_title('QQ_plot')\n    ## Plotting the QQ_Plot. \n    stats.probplot(df.loc[:,feature], plot = ax2)\n\n    ## Customizing the Box Plot. \n    ax3 = fig.add_subplot(grid[:, 2])\n    ## Set title. \n    ax3.set_title('Box Plot')\n    ## Plotting the box plot. \n    sns.boxplot(df.loc[:,feature], orient='v', ax = ax3 );","662daba0":"# c-90 cell\nplot_fn(data_train, 'c-90')","9ce4396d":"# c-0 cell\nplot_fn(data_train, 'c-0')","400b3f99":"# c-93 cell\nplot_fn(data_train, 'c-93')","c4fc2a93":"# g-90 gene\nplot_fn(data_train, 'g-90')","7365d8bd":"# g-0 gene\nplot_fn(data_train, 'g-0')","96e972c7":"# g-93 gene\nplot_fn(data_train, 'g-93')","45ec238a":"cp_plot = data_train.cp_type.value_counts()\nax = cp_plot.plot(kind='bar', figsize=(10, 5),   # barh -> for Horizontal rectangles plot & bar -> Vertical rectangles plot\n          title='Category wise Contribution',\n          color=type_colors)\nfor i, (p, pr) in enumerate(zip(cp_plot.index, cp_plot.values)):\n    \n    plt.text(s=str(pr), y=pr-5, x=i, color=\"b\",\n             horizontalalignment='center', verticalalignment='top',\n              size=14)\nax.set_xlabel(\"Group\")\nax.set_ylabel(\"Count\")\nplt.xticks(rotation= 45) \nplt.show()","08679cf2":"cp_dose_plot = data_train.cp_dose.value_counts()\nax = cp_dose_plot.plot(kind='bar', figsize=(10, 5),   # barh -> for Horizontal rectangles plot & bar -> Vertical rectangles plot\n          title='Category wise Contribution',\n          color=type_colors)\nfor i, (p, pr) in enumerate(zip(cp_dose_plot.index, cp_dose_plot.values)):\n    \n    plt.text(s=str(pr), y=pr-5, x=i, color=\"b\",\n             horizontalalignment='center', verticalalignment='top',\n              size=14)\nax.set_xlabel(\"Group\")\nax.set_ylabel(\"Count\")\nplt.xticks(rotation= 45) \nplt.show()","f5f8030d":"## Target Scored Multi-Label data\ntarget_scored.head()","700e3991":"## Target non-Scored Multi-Label data\ntarget_nonscored.head()","b6f28725":"target_scored.sum()[1:].sort_values()","4842c573":"## Skewness in target_scored\n\ntarget_scored.skew().sort_values()","0cdc220f":"target_nonscored.sum()[1:].sort_values()  # remove the first column id(sig_id) and sort the values","cf3f0602":"## Skewness in target_nonscored\n\ntarget_nonscored.skew().sort_values()","731c3d0e":"data_train.skew().sort_values()","85ed4be3":"def sig_fn(data):\n    e = np.exp(1)\n    y = 1\/(1+e**(-data))\n    return y","3bc0d140":"## Get all numerical columns and create new dataset\nnumerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumeri_train = data_train.select_dtypes(include=numerics)","e45fb631":"#numeri_train.head()","08cfc6af":"## Apply the sigmoid function on training data\nsig_data = sig_fn(numeri_train)\n\n## Find the Skewness\n#sig_data.skew()\nsig_data.skew().sort_values()","301d3372":"sig_data.head()","3f34557e":"# First Five rows\ndata_test.head()","7c3cf3a9":"# Shape of the training data\n\ndata_test.shape","cd5e10ef":"data_test.skew().sort_values()","d5e6489d":"## Get numerical columns on test data\nnumeri_test = data_test.select_dtypes(include=numerics)\n\n## Apply the sigmoid function on test data\nsig_data_test = sig_fn(numeri_test)\n\n## Find the Skewness\n#sig_data_test.skew()\nsig_data_test.skew().sort_values()","21bfbc38":"data_train=data_train[list(data_test)]\nall_data=pd.concat((data_train, data_test))\nprint(data_train.shape, data_test.shape, all_data.shape)","b0495b1f":"## Apply Dummies\n\nall_data = pd.concat([all_data, pd.get_dummies(all_data['cp_dose'], prefix='cp_dose', dtype=float)],axis=1)\nall_data = pd.concat([all_data, pd.get_dummies(all_data['cp_time'], prefix='cp_time', dtype=float)],axis=1)\nall_data = pd.concat([all_data, pd.get_dummies(all_data['cp_type'], prefix='cp_type', dtype=float)],axis=1)\nall_data = all_data.drop(['cp_dose', 'cp_time', 'cp_type'], axis=1)","1af0a970":"## After Dummies\n\n## Create a copy of data\nfull_data = all_data.copy()\nall_data.head()","347b79f1":"## Check Skewness on whole dataset (training and test)\nall_data.skew().sort_values()","1c52a163":"## Get numerical columns from whole dataset\nnumeri_all = all_data.select_dtypes(include=numerics)\n\n## Apply the sigmoid function\nsig_data_all = sig_fn(numeri_all)\n\n## Find the Skewness\n\nsig_data_all.skew().sort_values()","a57c7f43":"sig_data_all.head()","f9e90982":"def normalize_fn(data):\n    upper = data.max()\n    lower = data.min()\n    y = (data - lower)\/(upper-lower)\n    return y\ndata_normalized = normalize_fn(sig_data_all)\n\ndata_normalized.skew().sort_values()","70935ac4":"data_normalized.head()","913b1db5":"# data_log = np.log(numeri_all + 1)\n# data_log_normalized = normalize_fn(data_log)\n# data_log_normalized.describe()\n\n\n# Divide by Zero Occurs","fc47e407":"# def sig_inf_fn(data):\n#     e = np.exp(1)\n#     y = 2\/(1+e**(-data))\n#     return y\n\n\n\n## Apply the  function\n#sig_data_al = sig_inf_fn(numeri_all)\n\n## Find the Skewness\n#sig_data_al.skew().sort_values()\n## Plot the Skewness values to check the value range\n","51a5701b":"plt.plot(sig_data_all.skew())","d9c66037":"all_data = all_data.drop(['g-213', 'cp_type_ctl_vehicle', 'cp_type_trt_cp'], axis=1)\nnumeri_all = all_data.select_dtypes(include=numerics)\n\n## Apply the sigmoid function\nsig_data_all = sig_fn(numeri_all)\n\n## Find the Skewness\n\n#sig_data_all.skew().sort_values()\n\nplt.plot(sig_data_all.skew())","aabcfaba":"Xtrain=all_data[:len(data_train)]\nXtest=all_data[len(data_train):]\n","9a0c16a1":"plt.plot(Xtrain.skew())","d7fe8df2":"## Separate the data\nXtrain=full_data[:len(data_train)]\nXtest=full_data[len(data_train):]","ec116f79":"## Get numerical columns from training dataset\nnumerical_train = Xtrain.select_dtypes(include=numerics)\n\n## Apply the sigmoid function\nsig_data_train = sig_fn(numerical_train)\n\n## Find the Skewness\n\nplt.plot(sig_data_train.skew())","1744204f":"## Get numerical columns from test dataset\nnumerical_test = Xtest.select_dtypes(include=numerics)\n\n## Apply the sigmoid function\nsig_data_test = sig_fn(numerical_test)\n\n## Find the Skewness\n\nplt.plot(sig_data_test.skew())","d09e89df":"final_train = Xtrain.drop(['g-213', 'cp_type_ctl_vehicle', 'cp_type_trt_cp'], axis=1)\nnumeri_final_train = final_train.select_dtypes(include=numerics)\n\n## Apply the sigmoid function\nsig_data_final_train = sig_fn(numeri_final_train)\n\n## Find the Skewness\n\n#sig_data_final_train.skew().sort_values()\n\nplt.plot(sig_data_final_train.skew())\n#sig_data_final_train.head()","516721db":"final_test = Xtest.drop(['g-213', 'cp_type_ctl_vehicle', 'cp_type_trt_cp'], axis=1)\nnumeri_final_test = final_test.select_dtypes(include=numerics)\n\n## Apply the sigmoid function\nsig_data_final_test = sig_fn(numeri_final_test)\n\n## Find the Skewness\n\n#sig_data_final_test.skew().sort_values()\n\nplt.plot(sig_data_final_test.skew())\n#sig_data_final_test.head()","07dc579c":"numeri_target_score = target_scored.select_dtypes(include=numerics)\n\n## Apply the sigmoid function\nsig_target_score = sig_fn(numeri_target_score)\n\n## Plot the Skewness\n\n#plt.plot(sig_target_score.skew())\nsig_target_score.skew()","8e78268d":"sig_target_score.head()","0105850f":"# Check percentage\nsig_target_score['5-alpha_reductase_inhibitor'].value_counts(normalize=True)\n\n","40a2638d":"target_scored['11-beta-hsd1_inhibitor'].value_counts(normalize=True)","e0412a3f":"# Choose 1st target column and build a model\nYtrain=target_scored['11-beta-hsd1_inhibitor']","fd86487b":"from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold, KFold\nimport scipy\nfrom sklearn.linear_model import LogisticRegression\nimport optuna\nfrom sklearn.metrics import log_loss, make_scorer\n\n\nftwo_scorer = make_scorer(log_loss)\nftwo_scorer","982f2a44":"#kf=StratifiedKFold(n_splits=10)\nkf = KFold(n_splits=10)","e0dcd3a6":"Xtrain=sig_data_final_train\nXtest=sig_data_final_test\n","2e2686a4":"from imblearn.over_sampling import SMOTE\n\noversample = SMOTE()\nX, y = oversample.fit_resample(Xtrain, Ytrain)","f53fddc2":"y.value_counts(normalize=True)","70b8ba20":"print(list(target_scored.columns))","0c312fe1":"target_scored.atm_kinase_inhibitor.value_counts()","12224fa0":"target_scored['5-alpha_reductase_inhibitor'].value_counts()","3ab0d221":"Ytrain = target_scored['atm_kinase_inhibitor']\nfrom imblearn.over_sampling import SMOTE\n\noversample = SMOTE()\nX, y = oversample.fit_resample(Xtrain, Ytrain)","46d1c599":"y.shape","86053f81":"Ytrain = target_scored['atm_kinase_inhibitor']\nfrom imblearn.over_sampling import SMOTE\n\noversample = SMOTE()\nX, y = oversample.fit_resample(Xtrain, Ytrain)","06b8ccff":"y.value_counts()","452405c4":"Ytrain = target_scored['atm_kinase_inhibitor']\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.pipeline import Pipeline\n\noversample = SMOTE(sampling_strategy=0.1)\nundersample = RandomUnderSampler(sampling_strategy=0.5)\n\nsteps = [('o', oversample), ('u', undersample)]\npipeline = Pipeline(steps=steps)\n\n\nX, y = pipeline.fit_resample(Xtrain, Ytrain)","09d05eca":"y.value_counts()","414a4004":"y.shape","a05748a0":"target_scored['atm_kinase_inhibitor'].skew()","8513259a":"y.skew()","449c8eaa":"## Save clean train and test dataset\n#sig_data_final_train.to_csv('train_clean', index=False)\nsig_data_final_test.to_csv('test_clean', index=False)\n","02256096":"### We have 873 columns with Numerical Features and 2 columns with Categorical Features(cp_type and cp_dose)","395a171c":"## Remove Skewness \nRemove Skewness on whole dataset (training and test) by following:\n\n\n*     Apply Sigmoid Function and create a new Dataset.\n*     Find the Skewness on new Dataset\n","82365635":"**We can see skewness lies between [-1, 1] except some feature columns (g-213, cp_type_ctl_vehicle & cp_type_trt_cp). Let's drop these columns to see the effect.**","7e128a6f":"## Cell Feature distribution","3d358c65":"## Training Dataset","433fec91":"# Save Dataset","cc6392a7":"# Read and Describe the Dataset","870c3376":"## Concatenate training and test Dataset","a7d871d1":"## Training Dataset","5420233b":"### cp_type have two categories(trt_cp and ctl_vehicle). cp_type is highly imbalance as ctl_vehicle has lower count .","0b142e23":"## Separate the data","97b1c375":"## Remove Skewness from target scored","42c8ba69":"## Apply Sigmoid Function on training data\n* Get all numerical columns from the Dataset.\n* Apply Sigmoid Function and create a new Dataset.\n* Find the Skewness on new Dataset","ff47a514":"**Values are in the range from -0.809382 to 1.197749 which is an improvement.**","e8099012":"**Values are in the range from -0.933437 to 1.201311 which is an improvement.**","859081d2":"\n# Work in Progress......","abfb26d0":"**We can see values are greater than +1 so data is highly skewed.**","319eabea":"## Gene Feature distribution","c7544824":"# Check for Skewness\nIf **skewness is positive**, the data are positively skewed or **skewed right**, meaning that the right tail of the distribution is longer than the left. If **skewness is negative**, the data are negatively skewed or **skewed left**, meaning that the left tail is longer.\n\n\n*     If skewness is less than \u22121 or greater than +1, the distribution is highly skewed.\n*     If skewness is between \u22121 and \u2212\u00bd or between +\u00bd and +1, the distribution is moderately skewed.\n*     If skewness is between \u2212\u00bd and +\u00bd, the distribution is approximately symmetric.\n\n","c98bba26":"# Model Prepration","ea7a7e4e":"## Test Dataset","b2f933e0":"**Id is same as shape of the data i.e number of rows.**","8d8450e9":"## Skewness in target_nonscored","5e7c57e2":"**We can see values are greater than +1 so data is highly skewed.**","51df2276":"**Some rows have less number of 1's value. Most of the data are belonging to one class (i.e 0's). So, data is highly imbalance.**","99bd7b41":"### Nearly distribution in all cell features are same.\n### Nearly distribution in all gene features are same.","fbe0c138":"## Skewness in target_scored","56034822":"## Skewness","7f40a781":"**Data is highly skewed as we have already seen in visualization also.**","720b8543":"# Let's see the target data","8a167cd5":"# Remove the Skewness","6b4d0e64":"**We can see skewness lies between [-1, 1] except some feature columns (g-213, cp_type_ctl_vehicle & cp_type_trt_cp).\nLet's drop these columns to see the effect.**\n","e1438b51":"# Visualization","226fd00b":"## Check Skewness \nCheck Skewness on whole dataset (training and test)","ff3e6d7c":"**Result is improved after dropping some columns.**","57dfce97":"# Import Library","fab697d5":"**Normalization does not improve our results.**","0ae8dfae":"### cp_dose have two categories(D1 and D2)","96ba5156":"## Skewness in training data","2d44ba81":"**Result is improved after dropping some columns.**","adab6103":"# Check the test data","bf96742b":"## Plot the Skewness\nCheck the range of values of skewness by plotting the graph","9bc0b461":"**On removing skewness from whole data training and test dataset have skewnees. So let's first separate the data from whole data then remove skewness.**","80f4defc":"**Data is highly skewed**","6bc8c013":"## Apply Dummies on Dataset","cf464937":"## Test Dataset","ed622410":"## Sigmoid Function"}}