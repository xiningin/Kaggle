{"cell_type":{"332daf6b":"code","63a87823":"code","7c4bcd75":"code","83521796":"code","0990e2a4":"code","e7125ff1":"code","60b6a45b":"code","9606178d":"code","d8f1293c":"code","7538cbf4":"code","9a211c3a":"code","cc6a17e7":"code","e3bef831":"code","d40f5eb2":"code","143f59a1":"code","3d955ed0":"code","21396db5":"code","011c7b50":"code","2952f4c5":"code","4592c320":"code","33868dcf":"code","4ebaf1f2":"code","d30d2708":"code","e04aa218":"code","9f48c0a5":"code","790d1e04":"code","ac3c0543":"code","d8ebb1eb":"code","9222cb71":"code","b0f728d5":"code","8cf9a65f":"code","2e35b50d":"code","5f8a7662":"code","c28ba6a4":"code","d2487a30":"code","277bd185":"code","c67ff475":"code","9373512b":"code","ffdd870c":"code","4c2f2524":"code","93956f69":"code","551a4512":"code","921b6fbb":"code","7ce51c6c":"code","c0ab1965":"markdown","27ecadef":"markdown","ca461840":"markdown","71da13d5":"markdown","6c827a12":"markdown","42122ec7":"markdown","d6dee661":"markdown","5fce0228":"markdown","721c5f8d":"markdown","49dd9f6f":"markdown","a3ac1507":"markdown"},"source":{"332daf6b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","63a87823":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ntrain","7c4bcd75":"# Find the duplicates, if any\ntrain[train.duplicated()]","83521796":"# Find the number of missing values, Cabin has a lot\ntrain.info()","0990e2a4":"# Segregate categorical and continuous features\nTARGET = 'Survived'\nFEATURES = [col for col in train.columns if col not in ['PassengerId', TARGET]]\n\nnum_attributes = [col for col in FEATURES if train[col].dtype in ['int64', 'float64']]\ncat_attributes = [col for col in FEATURES if train[col].dtype == 'object']\n\nprint('Numerical Features:', num_attributes)\nprint('Categorical Features:', cat_attributes)","e7125ff1":"train[cat_attributes].info()","60b6a45b":"# Cabin has a lot of missing values, so we remove it\ncat_attributes.remove('Cabin')","9606178d":"# Embarked has 2 missing values, \n# will replace by mode in Pipeline later\ntrain['Embarked'].value_counts()","d8f1293c":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\ngrid = sns.FacetGrid(train, col = 'Embarked')\ngrid.map(sns.barplot, 'Sex', 'Survived')\ngrid.add_legend()","7538cbf4":"# Females are more likely to survive\ntrain[['Sex', 'Survived']].groupby(['Sex'], as_index = False).mean()","9a211c3a":"sns.countplot(x = train['Sex'], hue = train['Survived'])","cc6a17e7":"# 'Ticket' is very complex, will remove it\ntrain['Ticket']","e3bef831":"cat_attributes.remove('Ticket')","d40f5eb2":"# We'll remove Name column\ncat_attributes.remove('Name')\ncat_attributes","143f59a1":"num_attributes","3d955ed0":"train[num_attributes]","21396db5":"# Find missing values\ntrain[num_attributes].info()","011c7b50":"# Age has some missing values, \n# will replace by mode\nsns.displot(x = train['Age'])","2952f4c5":"grid = sns.FacetGrid(train, col = 'Survived')\ngrid.map(plt.hist, 'Age', bins = 20)\ngrid.add_legend()","4592c320":"# Pclass = 1 and Plass = 2 have good chances of surviving\ntrain[['Pclass', 'Survived']].groupby(['Pclass'], as_index = False).mean()","33868dcf":"grid = sns.FacetGrid(train, col = 'Survived', row = 'Pclass')\ngrid.map(plt.hist, 'Age', bins = 20)\ngrid.add_legend()","4ebaf1f2":"# Passengers with 1 or 2 sibling are more likely to survive\ntrain[['SibSp', 'Survived']].groupby(['SibSp'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","d30d2708":"# Passengers with 1, 2 or 3 values of Parch are more likely to survive\ntrain[['Parch', 'Survived']].groupby(['Parch'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","e04aa218":"# Relatives = SibSp + Parch\ntrain['Relatives'] = train['SibSp'] + train['Parch']\ntest['Relatives'] = test['SibSp'] + test['Parch']\nnum_attributes.append('Relatives')\n\ntrain[['Relatives', 'Survived']].groupby(['Relatives'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","9f48c0a5":"# If passenger is alone\ntrain['isAlone'] = 0 \ntrain.loc[train['Relatives'] == 0, 'isAlone'] = 1\ntest['isAlone'] = 0 \ntest.loc[test['isAlone'] == 0, 'isAlone'] = 1\nnum_attributes.append('isAlone')\n\ntrain[['isAlone', 'Survived']].groupby(['isAlone'], as_index = False).mean()","790d1e04":"num_attributes","ac3c0543":"y_train = train[TARGET]\nX_train = train[num_attributes + cat_attributes]\nX_test = test[num_attributes + cat_attributes]","d8ebb1eb":"X_train","9222cb71":"cat_features = ['Pclass', 'Embarked', 'Sex']\nnum_features = [col for col in X_train.columns if col not in cat_features]\nnum_features","b0f728d5":"from sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\n\nnum_pipeline = Pipeline([\n    (\"imputer\", SimpleImputer(strategy = \"median\")), \n    (\"std_scaler\", StandardScaler()),\n])","8cf9a65f":"from sklearn.preprocessing import OneHotEncoder\n\ncat_pipeline = Pipeline([\n    (\"imputer\", SimpleImputer(strategy = \"most_frequent\")), \n    (\"cat_encoder\", OneHotEncoder()),\n])","2e35b50d":"from sklearn.compose import ColumnTransformer\n\npreprocess_pipeline = ColumnTransformer([\n    (\"num\", num_pipeline, num_features), \n    (\"cat\", cat_pipeline, cat_features), \n])","5f8a7662":"X_train = preprocess_pipeline.fit_transform(X_train)\nX_test = preprocess_pipeline.transform(X_test)","c28ba6a4":"# Since this is a small dataset, we can't use a single validation set.\n# We'll have to use k-fold cross-validation\nX_train.shape","d2487a30":"from sklearn.model_selection import cross_val_score\n\ndef fit_ml_algo(algo, X_train = X_train, y_train = y_train):\n    model = algo.fit(X_train, y_train)\n    \n    # Cross-validation\n    scores = cross_val_score(algo, X_train, y_train, \n                             cv = 10, scoring = 'accuracy', \n                             n_jobs = -1)\n    \n    return scores.mean()","277bd185":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier, ExtraTreesClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\n\nmodels = [ \n    LogisticRegression(multi_class = 'multinomial'), \n    SVC(), \n    LinearSVC(), \n    DecisionTreeClassifier(), \n    RandomForestClassifier(), \n    ExtraTreesClassifier(), \n    GradientBoostingClassifier(), \n    KNeighborsClassifier(), \n    GaussianNB(), \n    AdaBoostClassifier(), \n]\n\nmodels_acc = []\n\nfor model in models:\n    acc = fit_ml_algo(model)\n    models_acc.append(acc)","c67ff475":"models_summary = pd.DataFrame()\n\nmodels_summary['Model'] = [str(model).split('(')[0] for model in models]\nmodels_summary['Accuracy'] = models_acc\n  \nmodels_summary.sort_values(by = 'Accuracy', ascending = False)\n# I am choosing GradientBoostingClassifier, SVC, AdaBoostClassifier and RandomForestClassifier for the Ensemble","9373512b":"# Fine-tuning GradientBoostingClassifier\nfrom sklearn.model_selection import GridSearchCV\n\ngbc = GradientBoostingClassifier()\ngbc_param_grid = {'loss': ['deviance'], \n                  'learning_rate': [0.05, 0.1, 0.15], \n                  'n_estimators': [50, 100, 150], \n                  'max_depth': [3, 4], \n                  'min_samples_leaf': [1, 2, 3], \n                  'max_features': ['sqrt', 'log2'], \n                 }\n\ngs_gbc = GridSearchCV(gbc, param_grid = gbc_param_grid, \n                      cv = 3, scoring = \"accuracy\", \n                      n_jobs = -1)\n\ngs_gbc.fit(X_train, y_train)\n\ngbc_best = gs_gbc.best_estimator_\n\n# Best score\ngs_gbc.best_score_","ffdd870c":"# Fine-tuning SVC\n\nsvc = SVC()\nsvc_param_grid = {'kernel': ['rbf'], \n                  'C': [0.1, 1, 10, 100], \n                  'gamma': ['auto', 'scale'],  \n                 }\n\ngs_svc = GridSearchCV(svc, param_grid = svc_param_grid, \n                      cv = 3, scoring = \"accuracy\", \n                      n_jobs = -1)\n\ngs_svc.fit(X_train, y_train)\n\nsvc_best = gs_svc.best_estimator_\n\n# Best score\ngs_svc.best_score_","4c2f2524":"# Fine-tuning AdaBoostClassifier\n\nada = AdaBoostClassifier(DecisionTreeClassifier())\nada_param_grid = {'n_estimators': [10, 25, 50, 75], \n                  'algorithm': ['SAMME.R'], \n                  'learning_rate': [0.001, 0.01, 0.1, 1],  \n                 }\n\ngs_ada = GridSearchCV(ada, param_grid = ada_param_grid, \n                      cv = 3, scoring = \"accuracy\", \n                      n_jobs = -1, return_train_score = True)\n\ngs_ada.fit(X_train, y_train)\n\nada_best = gs_ada.best_estimator_\n\n# Best score\ngs_ada.best_score_","93956f69":"# Fine-tuning RandomForestClassifier\n\nrfc = RandomForestClassifier()\nrfc_param_grid = {'n_estimators': [50, 100, 150], \n                  'min_samples_split': [2, 3, 4], \n                  'min_samples_leaf': [1, 2, 3],\n                  'max_features': ['auto', 'sqrt', 'log2'], \n                  'bootstrap': [False], \n                 }\n\ngs_rfc = GridSearchCV(rfc, param_grid = rfc_param_grid, \n                      cv = 3, scoring = \"accuracy\", \n                      n_jobs = -1)\n\ngs_rfc.fit(X_train, y_train)\n\nrfc_best = gs_rfc.best_estimator_\n\n# Best score\ngs_rfc.best_score_","551a4512":"# The code in this cell is directly taken from https:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_learning_curve.html#sphx-glr-auto-examples-model-selection-plot-learning-curve-py\n# with a few modifications done along the way\n\nfrom sklearn.model_selection import learning_curve, ShuffleSplit\n\ndef plot_learning_curve(\n    estimator,\n    title,\n    X,\n    y,\n    axes=None,\n    ylim=None,\n    cv=None,\n    n_jobs=None,\n    train_sizes=np.linspace(0.1, 1.0, 5),\n):\n    \"\"\"\n    Generate 3 plots: the test and training learning curve, the training\n    samples vs fit times curve, the fit times vs score curve.\n\n    Parameters\n    ----------\n    estimator : estimator instance\n        An estimator instance implementing `fit` and `predict` methods which\n        will be cloned for each validation.\n\n    title : str\n        Title for the chart.\n\n    X : array-like of shape (n_samples, n_features)\n        Training vector, where ``n_samples`` is the number of samples and\n        ``n_features`` is the number of features.\n\n    y : array-like of shape (n_samples) or (n_samples, n_features)\n        Target relative to ``X`` for classification or regression;\n        None for unsupervised learning.\n\n    axes : array-like of shape (3,), default=None\n        Axes to use for plotting the curves.\n\n    ylim : tuple of shape (2,), default=None\n        Defines minimum and maximum y-values plotted, e.g. (ymin, ymax).\n\n    cv : int, cross-validation generator or an iterable, default=None\n        Determines the cross-validation splitting strategy.\n        Possible inputs for cv are:\n\n          - None, to use the default 5-fold cross-validation,\n          - integer, to specify the number of folds.\n          - :term:`CV splitter`,\n          - An iterable yielding (train, test) splits as arrays of indices.\n\n        For integer\/None inputs, if ``y`` is binary or multiclass,\n        :class:`StratifiedKFold` used. If the estimator is not a classifier\n        or if ``y`` is neither binary nor multiclass, :class:`KFold` is used.\n\n        Refer :ref:`User Guide <cross_validation>` for the various\n        cross-validators that can be used here.\n\n    n_jobs : int or None, default=None\n        Number of jobs to run in parallel.\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n        for more details.\n\n    train_sizes : array-like of shape (n_ticks,)\n        Relative or absolute numbers of training examples that will be used to\n        generate the learning curve. If the ``dtype`` is float, it is regarded\n        as a fraction of the maximum size of the training set (that is\n        determined by the selected validation method), i.e. it has to be within\n        (0, 1]. Otherwise it is interpreted as absolute sizes of the training\n        sets. Note that for classification the number of samples usually have\n        to be big enough to contain at least one sample from each class.\n        (default: np.linspace(0.1, 1.0, 5))\n    \"\"\"\n    if axes is None:\n        _, axes = plt.subplots(1, 3, figsize=(60, 8))\n\n    axes[0].set_title(title)\n    if ylim is not None:\n        axes[0].set_ylim(*ylim)\n    axes[0].set_xlabel(\"Training examples\")\n    axes[0].set_ylabel(\"Score\")\n\n    train_sizes, train_scores, test_scores, fit_times, _ = learning_curve(\n        estimator,\n        X,\n        y,\n        cv=cv,\n        n_jobs=n_jobs,\n        train_sizes=train_sizes,\n        return_times=True,\n    )\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    fit_times_mean = np.mean(fit_times, axis=1)\n    fit_times_std = np.std(fit_times, axis=1)\n\n    # Plot learning curve\n    axes[0].grid()\n    axes[0].fill_between(\n        train_sizes,\n        train_scores_mean - train_scores_std,\n        train_scores_mean + train_scores_std,\n        alpha=0.1,\n        color=\"r\",\n    )\n    axes[0].fill_between(\n        train_sizes,\n        test_scores_mean - test_scores_std,\n        test_scores_mean + test_scores_std,\n        alpha=0.1,\n        color=\"g\",\n    )\n    axes[0].plot(\n        train_sizes, train_scores_mean, \"o-\", color=\"r\", label=\"Training score\"\n    )\n    axes[0].plot(\n        train_sizes, test_scores_mean, \"o-\", color=\"g\", label=\"Cross-validation score\"\n    )\n    axes[0].legend(loc=\"best\")\n\n    # Plot n_samples vs fit_times\n    axes[1].grid()\n    axes[1].plot(train_sizes, fit_times_mean, \"o-\")\n    axes[1].fill_between(\n        train_sizes,\n        fit_times_mean - fit_times_std,\n        fit_times_mean + fit_times_std,\n        alpha=0.1,\n    )\n    axes[1].set_xlabel(\"Training examples\")\n    axes[1].set_ylabel(\"fit_times\")\n    axes[1].set_title(\"Scalability of the model\")\n\n    # Plot fit_time vs score\n    axes[2].grid()\n    axes[2].plot(fit_times_mean, test_scores_mean, \"o-\")\n    axes[2].fill_between(\n        fit_times_mean,\n        test_scores_mean - test_scores_std,\n        test_scores_mean + test_scores_std,\n        alpha=0.1,\n    )\n    axes[2].set_xlabel(\"fit_times\")\n    axes[2].set_ylabel(\"Score\")\n    axes[2].set_title(\"Performance of the model\")\n\n    return plt\n\n\nfig, axes = plt.subplots(3, 4, figsize=(15, 24))\ntitle = \"Learning Curves (Gradient Boost)\"\n# Cross validation with 100 iterations to get smoother mean test and train\n# score curves, each time with 20% data randomly selected as a validation set.\ncv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=0)\n\nestimator = gbc_best\nplot_learning_curve(\n    estimator, title, X_train, y_train, axes=axes[:, 0], ylim=(0.7, 1.01), cv=cv, n_jobs=-1\n)\n\ntitle = \"Learning Curves (SVC)\"\ncv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=0)\nestimator = svc_best\nplot_learning_curve(\n    estimator, title, X_train, y_train, axes=axes[:, 1], ylim=(0.7, 1.01), cv=cv, n_jobs=-1\n)\n\ntitle = \"Learning Curves (AdaBoost)\"\ncv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=0)\nestimator = ada_best\nplot_learning_curve(\n    estimator, title, X_train, y_train, axes=axes[:, 2], ylim=(0.7, 1.01), cv=cv, n_jobs=-1\n)\n\ntitle = r\"Learning Curves (Random Forest)\"\ncv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=0)\nestimator = rfc_best\nplot_learning_curve(\n    estimator, title, X_train, y_train, axes=axes[:, 3], ylim=(0.7, 1.01), cv=cv, n_jobs=-1\n)\n\nplt.show()","921b6fbb":"from sklearn.ensemble import VotingClassifier\n\nvoting_clf = VotingClassifier(\n    estimators = [('gbc', gbc_best), \n                  ('svc', svc_best), \n                  ('ada', ada_best), \n                  ('rfc',rfc_best), \n                 ], \n    voting = 'soft', n_jobs = -1)\n\nvoting_clf.fit(X_train, y_train)","7ce51c6c":"y_pred = model.predict(X_test)\n\nsubmission[TARGET] = y_pred\nsubmission.to_csv('submission.csv', index = False)","c0ab1965":"## Numerical Features","27ecadef":"## Categorical Features","ca461840":"## Submission","71da13d5":"## Final Data Preparation","6c827a12":"## Modelling","42122ec7":"## Voting Classifier","d6dee661":"## Fine-tuning the models for ensemble","5fce0228":"## EDA","721c5f8d":"## New features by combining existing features","49dd9f6f":"## Pipelines","a3ac1507":"## Learning Curves"}}