{"cell_type":{"1706186b":"code","50da58e5":"code","a367fd90":"code","d4234e1b":"code","84c97b02":"code","ee2a44ee":"code","840baf59":"code","663f6f87":"code","d168448d":"code","beb0ace1":"code","1fb2a607":"code","04e52ec2":"code","a3be3318":"code","be7008b7":"code","1a002763":"code","43d61cdc":"code","b93da4c5":"markdown","f38c51ad":"markdown"},"source":{"1706186b":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nfrom IPython.core.display import display, HTML\nimport pickle","50da58e5":"data_path = '..\/input\/ashrae-data-wrangling-csv-to-pickle\/'\nwith open(data_path + 'X_train.pickle', 'rb') as f:\n    X_train = pickle.load(f)\nwith open(data_path + 'nan.pickle', 'rb') as f:\n    nan = pickle.load(f)    \nwith open(data_path + 'building_metadata.pickle', 'rb') as f:\n    building_metadata = pickle.load(f)\nwith open(data_path + 'weather_train.pickle', 'rb') as f:\n    weather_train = pickle.load(f)\n    \nworld_cities = pd.read_csv('..\/input\/world-cities\/worldcities.csv')","a367fd90":"weather_train['timestamp'] = pd.to_datetime(weather_train['timestamp'], format='%Y-%m-%d %H:%M:%S')","d4234e1b":"weather_train['hour'] = weather_train['timestamp'].dt.hour\nweather_train['day'] = weather_train['timestamp'].dt.day\nweather_train['week'] = weather_train['timestamp'].dt.week\nweather_train['month'] = weather_train['timestamp'].dt.month","84c97b02":"weather_train.head()","ee2a44ee":"weather_hour = weather_train.groupby(by=['site_id', 'hour']).agg([np.mean, np.std])\nweather_hour.reset_index(inplace=True)\nweather_hour","840baf59":"weather_hour['air_temperature']['mean']","663f6f87":"level_0 = weather_hour.columns.droplevel(0)\nlevel_1 = weather_hour.columns.droplevel(1)\nlevel_0 = ['' if x == '' else '-' + x for x in level_0]\nweather_hour.columns = level_1 + level_0","d168448d":"import seaborn as sns\npalette = sns.color_palette(\"Oranges\", 16)\npalette_hex = [f'#{int(256*x[0]):02x}{int(256*x[1]):02x}{int(256*x[2]):02x}'for x in palette]\nfig = px.line(weather_hour,\n             x='hour',\n             y='air_temperature-mean',\n             color='site_id',\n             color_discrete_sequence=palette_hex)\nfig.update_layout()\nfig.show()","beb0ace1":"weather_hour","1fb2a607":"time_offset = weather_hour[['site_id', 'air_temperature-mean']].groupby(by=['site_id']).agg(['idxmin'])\ntime_offset[('air_temperature-mean', 'idxmin')]","04e52ec2":"weather_time_offset = weather_hour.iloc[time_offset[('air_temperature-mean', 'idxmin')]][['site_id', 'hour']]\nweather_time_offset.reset_index(drop=True, inplace=True)\nweather_time_offset['offset'] = weather_time_offset['hour'] - weather_time_offset['hour'].min()\nweather_time_offset.drop(['hour'], axis='columns', inplace=True)\nweather_time_offset","a3be3318":"weather_time_offset['city'] = ['Jacksonville',\n                               'London',\n                               'Phoenix',\n                               'Philadelphia',\n                               'San Francisco',\n                               'Leicester',\n                               'Philadelphia',\n                               'Montr\u00e9al',\n                               'Jacksonville',\n                               'San Antonio',\n                               'Las Vegas',\n                               'Montr\u00e9al',\n                               'Dublin',\n                               'Minneapolis',\n                               'Philadelphia',\n                               'Pittsburgh']\nweather_time_offset","be7008b7":"def get_city_info(city):\n    results = world_cities[world_cities['city'] == city].sort_values(by='population', ascending=False)[['lat', 'lng', 'country', 'admin_name', 'population']]\n    if results.empty:\n        return None\n    else:\n        return results.iloc[0]\n\ncity_info = weather_time_offset['city'].apply(get_city_info)\ncity_info","1a002763":"weather_time_offset = pd.concat([weather_time_offset, city_info], axis='columns')\nweather_time_offset","43d61cdc":"import plotly.express as px\nfig = px.scatter_geo(weather_time_offset,\n                     lat='lat',\n                     lon='lng',\n                     color='offset',\n                     size='population',\n                     hover_name='city',\n                     hover_data=['admin_name', 'country'],\n                     projection='kavrayskiy7',\n                     color_continuous_scale=px.colors.sequential.Plasma)\nfig.show()","b93da4c5":"# Introduction\n\nThe aim of this notebook is to analyse the relation between energy and temperature.","f38c51ad":"# Import data"}}