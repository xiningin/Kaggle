{"cell_type":{"0ba2b384":"code","4f1707ad":"code","2f54e46a":"code","d25e1509":"code","2507ef45":"code","7d6cc6fd":"code","8f8e3a33":"code","1e0db45a":"code","c4fbd928":"code","6b671519":"code","d2a2b53c":"code","7257ef1f":"code","e94190e3":"code","d7e66516":"code","538e7bae":"code","ea3a3e34":"code","d4530783":"code","152b425e":"code","1ce7d421":"code","8bbcc946":"code","4cf62f0b":"code","ea81b2e1":"code","fd9cad0d":"code","7f3241fe":"code","86f43141":"code","8db8f925":"code","dd3a0e1a":"code","954bb54a":"code","1237d65a":"code","9a73848e":"code","ddb34e07":"code","bd62f1f4":"code","17d65a12":"code","1af2b042":"code","2556835c":"markdown","bc36121c":"markdown","c08c51f3":"markdown","e41d55d4":"markdown","43d51102":"markdown","965ca726":"markdown","c6940981":"markdown","fde03bd9":"markdown","18349b1b":"markdown","c8456105":"markdown","f54d6be3":"markdown","8ceea3f7":"markdown"},"source":{"0ba2b384":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4f1707ad":"# Install librosa as a liblary for music analysis\n!pip install librosa","2f54e46a":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport os\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm_notebook as tqdm\nimport warnings\nwarnings.filterwarnings('ignore')","d25e1509":"filename = '\/kaggle\/input\/accentdb-core-extended\/accentdb_extended\/data\/american\/speaker_01\/american_s01_676.wav'","2507ef45":"import IPython.display as ipd\nimport librosa \nimport librosa.display\n\n#Displaying the wavelenght of the filename american audio\nLibrosa_data, Librosa_sample_rate = librosa.load(filename)\nlibrosa.display.waveplot(Librosa_data, sr=Librosa_sample_rate)\nplt.figure(figsize = (14,5))\nipd.Audio(filename)","7d6cc6fd":"print('Librosa sample rate = ', Librosa_sample_rate)\nprint('Mono Audio of Librosa_data:', Librosa_data)","8f8e3a33":"### Lets read with scipy\n### Scipy help us to see if the audio have noise or \nfrom scipy.io import wavfile as wav\nwave_sample_rate, wave_audio = wav.read(filename)","1e0db45a":"wave_audio","c4fbd928":"import matplotlib.pyplot as plt\n\n# Original audio\nplt.figure(figsize=(12, 4))\nplt.plot(wave_audio)","6b671519":"mfccs = librosa.feature.mfcc(y=Librosa_data, sr=Librosa_sample_rate, n_mfcc=20)\nprint(mfccs.shape)","d2a2b53c":"type(mfccs)","7257ef1f":"librosa.display.specshow(mfccs, sr=Librosa_sample_rate, x_axis='time')","e94190e3":"def feature_extractor():\n    DIR1 = '\/kaggle\/input\/accentdb-core-extended\/accentdb_extended\/data'\n    DIR2 = '\/kaggle\/input\/accentdb-core-extended\/accentdb_core\/data'\n    dir_name = os.listdir(DIR1)\n    dir2_name = os.listdir(DIR2)\n    speaker_files = []\n    #Mapping all the audiofiles at the accentdb_extend folder\n    for folder_name in dir_name:\n        for speaker in os.listdir(os.path.join(DIR1,folder_name)):\n            for audio in os.listdir(os.path.join(DIR1,folder_name,speaker)):\n                filename_speaker = os.path.join(DIR1,folder_name,speaker,audio)\n                speaker_files.append([folder_name, filename_speaker])\n    #Mapping all the audiofiles at the accentdb_core folder          \n    for folder2_name in dir2_name:\n        for speaker2 in os.listdir(os.path.join(DIR2,folder2_name)):\n            for audio2 in os.listdir(os.path.join(DIR2,folder2_name,speaker2)):\n                filename2_speaker = os.path.join(DIR2,folder2_name,speaker2,audio2)\n                speaker_files.append([folder2_name, filename2_speaker])\n        \n    return speaker_files","d7e66516":"f = feature_extractor()\nf[0]","538e7bae":"audio_data = pd.DataFrame(f, columns = ['Speaker','audio_path'])\nprint(audio_data.head())\nprint(audio_data.shape)\nprint(audio_data['Speaker'].unique())","ea3a3e34":"%%time\n\ndata_extracted = []\nfile_path = audio_data['audio_path'].tolist()\naudio_name = audio_data['Speaker'].tolist()\nclass_number = audio_data['Speaker'].unique()\ni = 0\nfor i in range(len(audio_data['audio_path'])):\n    mfccs = features_extractor(file_path[i])\n    data_extracted.append([mfccs,audio_name[i]])\n    i+=1","d4530783":"data = pd.DataFrame(data_extracted, columns = ['Features', 'audio_name'])\ndata.head()","152b425e":"X = data['Features'].tolist()\nX[0].shape","1ce7d421":"## Split the dataset into independent and dependent dataset\nX = data['Features'].tolist()\nX = [np.mean(i.T,axis = 0) for i in X]\nX = np.asarray(X)\nX.shape","8bbcc946":"#Transform the y_name into a number \ny = np.array(pd.get_dummies(y_name))\ny.shape","4cf62f0b":"# Standardization of x_data (independent variables)\nfrom sklearn import preprocessing \nX = preprocessing.StandardScaler().fit(X).transform(X)\nX[0]","ea81b2e1":"### Train Test Split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=10)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","fd9cad0d":"import tensorflow as tf\nprint(tf.__version__)","7f3241fe":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout,Activation,Flatten\nfrom tensorflow.keras.optimizers import Adam\nfrom sklearn import metrics","86f43141":"### No of classes\nnum_labels=y.shape[1]","8db8f925":"model=Sequential()\n###first layer\nmodel.add(Dense(100,input_shape=(20,)))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\n###second layer\nmodel.add(Dense(200))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\n###third layer\nmodel.add(Dense(100))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\n\n###final layer\nmodel.add(Dense(num_labels))\nmodel.add(Activation('softmax'))","dd3a0e1a":"model.summary()","954bb54a":"model.compile(loss='categorical_crossentropy',metrics=['accuracy'],optimizer='adam')","1237d65a":"## Trianing my model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom datetime import datetime \n\nnum_epochs = 100\nnum_batch_size = 32\n\ncheckpointer = ModelCheckpoint(filepath='saved_models\/audio_classification.hdf5', \n                               verbose=1, save_best_only=True,patience=10)\n\nstart = datetime.now()\n\nhistory = model.fit(X_train, y_train, batch_size=num_batch_size, epochs=num_epochs, validation_data=(X_test, y_test), callbacks=[checkpointer], verbose=1)\n\n\nduration = datetime.now() - start\nprint(\"Training completed in time: \", duration)","9a73848e":"model.evaluate(X_test, y_test)","ddb34e07":"# Plot training and validation accuracy values\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train','Validation'], loc = 'upper left')\nplt.show()\n\n# Plot training and validation accuracy values\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train','Validation'], loc = 'upper left')\nplt.show()\n","bd62f1f4":"# Get the prediction from the X_test Dataset\nprediction_ANN = model.predict(X_test)\nprediction_ANN_rounded = [np.argmax(i) for i in prediction_ANN]\nprediction_ANN_rounded[0]\ny_test_index = [np.argmax(i) for i in y_test]","17d65a12":"#Confusion Matrix - verify accuracy of each class\nimport seaborn as sns\ncm = tf.math.confusion_matrix(labels = y_test_index, predictions = prediction_ANN_rounded)\nplt.figure(figsize = (10,7))\nsns.heatmap(cm,annot=True, fmt='d')\nplt.xlabel('Prediction')\nplt.ylabel('True_value')","1af2b042":"#Transform the Prediction_ANN_rounded into a categorical\nspeaker = ['american','welsh','telugu','bangla','australian','british','odiya',\n 'indian','malayalam']\n#for the prediction dataset\ny_pred_speaker = []\ny_test_speaker = []\nfor x in prediction_ANN_rounded:\n    y_pred_speaker.append(speaker[x])\n# for the y_test dataset\nfor y in y_test_index:\n    y_test_speaker.append(speaker[y])\nprint('Predicted Audio:'+ ' ' + y_test_speaker[0])\nprint('Test Audio:'+ ' ' +y_pred_speaker[0])","2556835c":"##### Note: Librosa converts the signal to mono, meaning the channel will alays be 1","bc36121c":"#### Lets extract all MFCCS of audio data in the dataset folder","c08c51f3":"#### Based the original audio signal there's only 1 speaker and no noise.","e41d55d4":"### Confusion Matrix ","43d51102":"### 4 Layer ANN ","965ca726":"## Evaluation of Model","c6940981":"## Modeling","fde03bd9":"### EDA","18349b1b":"Here we will be using Mel-Frequency Cepstral Coefficients(MFCC) from the audio samples. The MFCC summarises the frequency distribution across the window size, so it is possible to analyse both the frequency and time characteristics of the sound. These audio representations will allow us to identify features for classification.","c8456105":"<img src= \"https:\/\/image.jimcdn.com\/app\/cms\/image\/transf\/none\/path\/sf1ff7ca1dd72191f\/image\/ib751b6262352cb2a\/version\/1453992968\/image.png\" alt =\"MFCC\" style='width: 1500px;'>","f54d6be3":"## Conclusion:\n Based on the model of 4 layer ANN we have a accuracy of 99.43% ","8ceea3f7":"### Extract Features"}}