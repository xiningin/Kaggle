{"cell_type":{"bb376f8b":"code","06575c58":"code","dca45702":"code","97d73d26":"code","d0b0f7d7":"code","435c44eb":"code","49f08243":"code","bb48232e":"code","d3981977":"code","9051da10":"code","4159df52":"code","0410ce88":"code","f882917c":"code","08cef41e":"code","e56b24d2":"code","112e30bf":"code","be421221":"code","8c981c3f":"code","e5e38281":"code","12a71ce3":"code","f6c448e2":"code","1235587d":"markdown","d170eb9a":"markdown","9a424861":"markdown"},"source":{"bb376f8b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","06575c58":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\nx_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')                    \n","dca45702":"import matplotlib.pyplot as plt\nimport tensorflow as tf\nimport cv2\nfrom collections import deque\nimport numpy as np","97d73d26":"y_train = train['label']\nx_train = train.drop(labels = ['label'], axis=1)","d0b0f7d7":"x_train.shape\n","435c44eb":"image_index = 7777\nprint(y_train[image_index])","49f08243":"# Reshaping the array to 4-dims so that it can work with the Keras API\nx_train = x_train.values.reshape(x_train.shape[0], 28, 28, 1)\nx_test = x_test.values.reshape(x_test.shape[0], 28, 28, 1)","bb48232e":"print(x_train.shape)","d3981977":"input_shape = (28, 28, 1)\n","9051da10":"# Making sure that the values are float so that we can get decimal points after division\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')","4159df52":"# Normalizing the RGB codes by dividing it to the max RGB value.\nx_train \/= 255\nx_test \/= 255\n","0410ce88":"print('x_train shape:', x_train.shape)\nprint('Number of images in x_train', x_train.shape[0])\nprint('Number of images in x_test', x_test.shape[0])","f882917c":"# Some examples\nprint(plt.imshow(x_train[5][:,:,0]))","08cef41e":"print(plt.imshow(x_train[450][:,:,0]))","e56b24d2":"print(plt.imshow(x_train[4215][:,:,0]))","112e30bf":"# Importing the required Keras modules containing model and layers\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D","be421221":"# Creating a Sequential Model and adding the layers\nmodel = Sequential()\nmodel.add(Conv2D(256, kernel_size=(5, 5), activation='relu', input_shape=input_shape))\nmodel.add(Conv2D(128, kernel_size=(5, 5), activation='relu'))\nmodel.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())  # Flattening the 2D arrays for fully connected layers\nmodel.add(Dense(100, activation=tf.nn.relu))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10, activation=tf.nn.softmax))","8c981c3f":"#compiling the model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","e5e38281":"model.fit(x=x_train,y=y_train,epochs=150, verbose = 1)","12a71ce3":"pred = model.predict(x_test)\nresults = np.argmax(pred,axis = 1)\nresults = pd.Series(results,name = 'Label')","f6c448e2":"sub = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsub.to_csv(\"cnn_best_model.csv\",index=False)","1235587d":"In this tutorial, we will predict digits.\nLet's start","d170eb9a":"# CNN\n Okay let's explain what CNN is.\n \n In neural networks, Convolutional neural network (ConvNets or CNNs) is one of the main categories to do images recognition, images classifications. Objects detections, recognition faces etc., are some of the areas where CNNs are widely used.\n\nCNN image classifications takes an input image, process it and classify it under certain categories (Eg., Dog, Cat, Tiger, Lion). Computers sees an input image as array of pixels and it depends on the image resolution. Based on the image resolution, it will see h x w x d( h = Height, w = Width, d = Dimension ). Eg., An image of 6 x 6 x 3 array of matrix of RGB (3 refers to RGB values) and an image of 4 x 4 x 1 array of matrix of grayscale image.\n\nTechnically, deep learning CNN models to train and test, each input image will pass it through a series of convolution layers with filters (Kernals), Pooling, fully connected layers (FC) and apply Softmax function to classify an object with probabilistic values between 0 and 1. The below figure is a complete flow of CNN to process an input image and classifies the objects based on values.","9a424861":"If you like it, please vote! :)"}}