{"cell_type":{"a190a252":"code","b4de1b2e":"code","aced7b4c":"code","92f2ec16":"code","e4ab6bb1":"code","be1430c3":"code","b9c9e6cd":"code","e088673e":"code","eefb0bf1":"code","89f14ed4":"code","8eec9064":"code","54225ac0":"code","136ac464":"code","2d43c57d":"code","f0fa17dd":"code","44966b7b":"code","70bd4649":"code","e1e1b86f":"code","2e44116b":"code","7afe3ad4":"code","2c2796a1":"markdown","7cc1bd97":"markdown","44b90c26":"markdown","a883b3d5":"markdown","99b51144":"markdown","b4c82d1e":"markdown","ef3e5dcd":"markdown","e935c581":"markdown"},"source":{"a190a252":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b4de1b2e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","aced7b4c":"df = pd.read_csv('\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\ndf.head()","92f2ec16":"df.shape","e4ab6bb1":"df.info()","be1430c3":"df.describe().T","b9c9e6cd":"df.isnull().sum()","e088673e":"plt.figure(1 , figsize = (10 , 5))\nn = 0 \nfor x in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n    n += 1\n    plt.subplot(1 , 3 , n)\n    plt.subplots_adjust(hspace =0.5 , wspace = 0.5)\n    sns.histplot(df[x] , bins = 20, kde=True, stat=\"density\")\nplt.show()","eefb0bf1":"plt.figure(1 , figsize = (5 , 5))\nsns.countplot(data=df,x='Gender')","89f14ed4":"plt.figure(1 , figsize = (10 , 7))\nfor gender in ['Male','Female']:\n    sns.scatterplot(data=df[df.Gender == gender],x='Age',y='Annual Income (k$)',label=gender,s=100,alpha=.6)\nplt.title('Age vs Annual Income Based On Gender')","8eec9064":"plt.figure(1 , figsize = (10 , 7))\nfor gender in ['Male','Female']:\n    sns.scatterplot(data=df[df.Gender == gender],y='Spending Score (1-100)',x='Annual Income (k$)',label=gender,s=100,alpha=.6)\nplt.title('Annual Income vs Spending Score Based On Gender')","54225ac0":"X = df.iloc[:,[3,4]].values","136ac464":"# Using the elbow method to find the optimal number of clusters\nfrom sklearn.cluster import KMeans\nwcss = []\nfor i in range(1,11):\n    kmeans = KMeans(n_clusters=i,init='k-means++',n_init=12,random_state=42)\n    kmeans.fit(X)\n    wcss.append(kmeans.inertia_)\nplt.plot(range(1,11),wcss)\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS')\nplt.show()","2d43c57d":"# Training the K-Means model on the dataset\nkmeans = KMeans(n_clusters=5,init='k-means++',n_init=12)\ny_kmeans = kmeans.fit_predict(X)","f0fa17dd":"# Visualising the clusters\nplt.figure(1 , figsize = (10 , 10))\nplt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 100, c = 'red', label = 'Cluster 1')\nplt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')\nplt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green', label = 'Cluster 3')\nplt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')\nplt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 150, c = 'yellow', label = 'Centroids')\nplt.title('Clusters of customers')\nplt.xlabel('Annual Income (k$)')\nplt.ylabel('Spending Score (1-100)')\nplt.legend()\nplt.show()","44966b7b":"X2 = df.iloc[:,2:]","70bd4649":"# Using the Elbow method to find the optimal number of cluster\nfrom sklearn.cluster import KMeans\nwcss = []\nfor i in range(1,11):\n    kmeans2 = KMeans(n_clusters=i,init='k-means++',n_init=12)\n    kmeans2.fit(X2)\n    wcss.append(kmeans2.inertia_)\nplt.plot(range(1,11),wcss)\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS')\nplt.show()","e1e1b86f":"# Training the K-Means model on the dataset\nkmeans2 = KMeans(n_clusters=6,init='k-means++',n_init=12)\ny_kmeans2 = kmeans2.fit_predict(X2)","2e44116b":"df['cluster'] = y_kmeans2","7afe3ad4":"# Visualising the clusters\nimport plotly.graph_objects as go\n\nPLOT = go.Figure()\n\nfor C in list(df.cluster.unique()):\n    \n    PLOT.add_trace(go.Scatter3d(x = df[df.cluster == C]['Annual Income (k$)'],\n                                y = df[df.cluster == C]['Age'],\n                                z = df[df.cluster == C]['Spending Score (1-100)'],\n                                mode = 'markers', marker_size = 8, marker_line_width = 1,\n                                name = 'Cluster ' + str(C)))\n\n\nPLOT.update_layout(width = 800, height = 800, autosize = True, showlegend = True,\n                   scene = dict(xaxis=dict(title = 'Annual Income', titlefont_color = 'black'),\n                                yaxis=dict(title = 'Age', titlefont_color = 'black'),\n                                zaxis=dict(title = 'Spending Score', titlefont_color = 'black')),\n                   font = dict(family = \"Gilroy\", color  = 'black', size = 12))","2c2796a1":"## EDA","7cc1bd97":"K-Means will partition your customers into mutually exclusive groups, for example, into `5 clusters`. The customers in each cluster are similar to each other demographically. Now we can create a profile for each group, considering the common characteristics of each cluster. For example, the `5 clusters` can be:\n\n`Cluster1` : High Annual Income and Low Spending Score (**Careful**)\n\n`Cluster2` : High Annual Income and High Spending Score (**Target**)\n\n`Cluster3` : Low Annual Income and Low Spending Score (**Sensible**)\n\n`Cluster4` : Low Annual Income and High Spending Score (**Careless**)\n\n`Cluster5` : Middle Annual Income and Middle Spending Score (**Standard**)\n","44b90c26":"## Segmentation using Annual Income and Spending Score","a883b3d5":"## Segmentation using Annual Income , Spending Score and Age","99b51144":"K-Means will partition your customers into mutually exclusive groups, for example, into `6 clusters`. The customers in each cluster are similar to each other demographically. Now we can create a profile for each group, considering the common characteristics of each cluster. For example, the `6 clusters` can be:\n\n`Cluster1` : Mid Age , High Annual Income and Low Spending Score \n\n`Cluster2` : Mid Age , High Annual Income and High Spending Score \n\n`Cluster3` : Old Age , Low Annual Income and Very Low Spending Score `\n\n`Cluster4` : Old Age , High Annual Income and High Spending Score \n\n`Cluster5` : Youth Age, Low Annual Income and High Spending Score \n\n`Cluster6` : Youth Age, Low Annual Income and High Spending Score ","b4c82d1e":"The number of clusters is 5","ef3e5dcd":"The number of clusters is 6","e935c581":"# Mall Customer Segmentation "}}