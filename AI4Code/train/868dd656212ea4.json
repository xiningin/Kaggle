{"cell_type":{"483d4c5d":"code","1a08d66a":"code","f3df4d7b":"code","05dcc673":"code","83da0daa":"code","d139a7ee":"code","211b6df8":"code","d42b8bf3":"code","08f59e74":"code","58f0ed06":"code","67745ce0":"code","a767d96e":"code","43550da2":"code","e1bdff43":"code","fd279446":"code","1b701121":"code","1000f648":"code","a83f767b":"code","02aff374":"code","c134f3f6":"code","5d0f57e4":"code","3d154d21":"code","fb6f3fad":"code","4fda7c13":"code","426ef71c":"code","1d9bd1b6":"code","5caa5423":"code","d00ec39b":"code","9a62b9c7":"code","d2b17247":"code","097c0d9f":"code","60525acd":"code","f3b9549f":"code","481d01fc":"code","c772c2ab":"code","56299459":"code","f5be15b2":"code","cb1294e3":"code","f5db7694":"code","ab6b4046":"code","b154453c":"code","e340a532":"markdown","218143d6":"markdown","89337c75":"markdown","0ec42ef0":"markdown","cda91d00":"markdown","84a6ae1f":"markdown","c140dd53":"markdown","39c8a1e6":"markdown","0dcbea80":"markdown","f29f6586":"markdown","be962977":"markdown","42159b2b":"markdown","29ee1719":"markdown","b9465cc0":"markdown","9acf2527":"markdown","a6f3dd34":"markdown","d28004ee":"markdown","8ff2e46f":"markdown","8ba81da3":"markdown","45b7dd74":"markdown","c43518dc":"markdown","3a5cc120":"markdown","60e1811d":"markdown","72d9db9e":"markdown","ce2109e4":"markdown","6522b180":"markdown","b2b008f8":"markdown","e68e8cd6":"markdown","78c42f93":"markdown","f601aafd":"markdown","a4899be0":"markdown","9c1d8957":"markdown","5bd78121":"markdown","57574e25":"markdown","f19bda19":"markdown","8b8fe5ea":"markdown","dc2b8e06":"markdown","f749896f":"markdown","638e2acc":"markdown","28ab41c0":"markdown","b8be3246":"markdown","150f2033":"markdown","78e183d6":"markdown","d375050b":"markdown","ef60ef24":"markdown"},"source":{"483d4c5d":"import numpy as np\nimport pandas as pd\nfrom pyproj import Proj\nimport folium\nfrom folium.plugins import MarkerCluster, HeatMap\nimport re\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\n%matplotlib inline\nplt.rcParams['figure.figsize'] = [10, 6]\nplt.rcParams['figure.dpi'] = 100\n\nimport seaborn as sns\nsns.set_style(\n    style='darkgrid', \n    rc={'axes.facecolor': '.9', 'grid.color': '.8'}\n)\nsns.set_palette(palette='deep')\nsns_c = sns.color_palette(palette='deep')","1a08d66a":"accidents_raw_df = pd.read_csv(\n    '..\/input\/road-traffic-accidents-in-berlin\/AfSBBB_BE_LOR_Strasse_Strassenverkehrsunfaelle_2019_Datensatz_utf8.csv',\n    delimiter=\";\"\n)\naccidents_raw_df.info()","f3df4d7b":"accidents_raw_df['LAND'].unique()","05dcc673":"accidents_raw_df['UJAHR'].unique()","83da0daa":"accidents_df = accidents_raw_df.drop(columns=['LAND',\n                                              'LOR',\n                                              'UJAHR',\n                                              'XGCSWGS84',\n                                              'YGCSWGS84'])","d139a7ee":"accidents_df.rename(columns={   'OBJECTID': 'id',\n                                'BEZ':'district',\n                                'STRASSE':'street',\n                                'UMONAT':'month',\n                                'USTUNDE':'hour',\n                                'UWOCHENTAG':'weekday',\n                                'UKATEGORIE':'category',\n                                'UART':'kind',\n                                'UTYP1':'type',\n                                'ULICHTVERH':'lighting conditions',\n                                'IstRad':'bicycle',                  # bicycle involved\n                                'IstPKW':'car',                      # car involved\n                                'IstFuss':'pedestrian',              # pedestrian involved\n                                'IstKrad':'motorbike',               # motorbike involved\n                                'IstGkfz':'truck',                   # truck involved\n                                'IstSonstige':'other vehicle',       # other vehicle involved\n                                'USTRZUSTAND':'road condition'\n                               },inplace=True)","211b6df8":"accidents_df['district'] = accidents_df['district'].astype(str)\naccidents_df['district'] = accidents_df['district'].replace(\n    ['1','2','3','4','5','6','7','8','9','10','11','12'],\n    ['Mitte',\n     'Friedrichshain-Kreuzberg',\n     'Pankow',\n     'Charlottenburg-Wilmersdorf',\n     'Spandau',\n     'Steglitz-Zehlendorf',\n     'Tempelhof-Sch\u00f6neberg',\n     'Neuk\u00f6lln',\n     'Treptow-K\u00f6penick',\n     'Marzahn-Hellersdorf',\n     'Lichtenberg',\n     'Reinickendorf'\n    ])","d42b8bf3":"accidents_df[['month','weekday','category','kind','type','lighting conditions','road condition']] = \\\naccidents_df[['month','weekday','category','kind','type','lighting conditions','road condition']].astype(str)\n\nmonths = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\naccidents_df['month'] = accidents_df['month'].replace(\n    ['1','2','3','4','5','6','7','8','9','10','11','12'],\n    months)\n# we make this a category so that Pandas can properly sort our results\naccidents_df['month'] = pd.Categorical(accidents_df['month'], categories=months, ordered=True)\n\nweekdays = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']\naccidents_df['weekday'] = accidents_df['weekday'].replace(\n    ['1','2','3','4','5','6','7'],\n    weekdays)\n# we make this a category so that Pandas can properly sort our results\naccidents_df['weekday'] = pd.Categorical(accidents_df['weekday'], categories=weekdays, ordered=True)\n\naccidents_df['category'] = accidents_df['category'].replace(\n    ['1','2','3'],\n    ['fatal','serious injury','light casualty'])\n    \naccidents_df['kind'] = accidents_df['kind'].replace(\n    ['1','2','3','4','5','6','7','8','9','0'],\n    ['crash with parked vehicle',\n    'crash with vehicle ahead',\n    'lateral crash with vehicle driving in same direction',\n    'crash with vehicle coming from opposite direction',\n    'crash with turning\/crossing vehicle',\n    'crash between vehicle and pedestrian',\n    'crash with obstacle',\n    'going off the street to the right',\n    'going off the street to the left',\n    'other accident'])\n\naccidents_df['type'] = accidents_df['type'].replace(\n    ['1','2','3','4','5','6','7'],\n    ['going straight',\n    'turning',\n    'crossing',\n    'exceeding limit',\n    'stationary traffic',\n    'lengthwise traffic',\n    'other accident'])\n\naccidents_df['lighting conditions'] = accidents_df['lighting conditions'].replace(\n    ['0','1','2'],\n    ['daylight','dawn','darkness'])\n\naccidents_df['road condition'] = accidents_df['road condition'].replace(\n    ['0','1','2'],\n    ['dry','wet','icy'])","08f59e74":"accidents_df.head(10)","58f0ed06":"for col in ['LINREFX', 'LINREFY']:\n    accidents_df[col] = pd.to_numeric(accidents_df[col].apply(lambda x: re.sub(',', '.', str(x))))\n    \naccidents_df.head(10)","67745ce0":"accidents_df.shape","a767d96e":"accidents_df.nunique()","43550da2":"accidents_df['other vehicle'].value_counts()","e1bdff43":"accidents_df['road condition'].value_counts()","fd279446":"accidents_df.drop(\n    index = accidents_df\n    .index[accidents_df['other vehicle'] == '812083,7893']\n    .to_list(),\n    inplace=True)","1b701121":"accidents_df.nunique()","1000f648":"accidents_df[['other vehicle']] = accidents_df[['other vehicle']].astype(int)","a83f767b":"accidents_df.info()","02aff374":"accidents_df.describe()","c134f3f6":"fig, ax = plt.subplots()\naccidents_df \\\n    .groupby(['district']) \\\n    .agg(n=('id', 'count')) \\\n    .reset_index(drop=False) \\\n    .sort_values('n', ascending=False) \\\n    .pipe((sns.barplot, 'data'), \n        x='n', \n        y='district',\n        color=sns_c[0],\n        edgecolor=sns_c[0],\n        ax=ax\n    )\nax.set(\n    title='Number of accidents per district in Berlin', \n    xlabel='number of accidents', \n    ylabel='district'\n);","5d0f57e4":"fig, ax = plt.subplots()\naccidents_df \\\n    .groupby(['district']) \\\n    .agg(n=('id', 'count')) \\\n    .assign(share= lambda x: x['n'] \/ x['n'].sum()) \\\n    .reset_index(drop=False) \\\n    .sort_values('n', ascending=False) \\\n    .pipe((plt.pie, 'data'), \n        x='share',\n        labels='district',\n        autopct=\"%.1f%%\", \n        pctdistance=0.7,\n        explode=[0.02]*12\n    )\nax.set(title='Share of accidents per district in Berlin');","3d154d21":"accidents_df['street'].value_counts().head(20)","fb6f3fad":"fig, ax = plt.subplots()\ncmap = sns.light_palette(sns_c[1])\nfmt = lambda y, _: f'{y :0.0%}'\naccidents_df \\\n    .groupby(['district', 'month']) \\\n    .agg(n=('id', 'count')) \\\n    .reset_index(drop=False) \\\n    .assign(\n        num_accidents_district = lambda x: x.groupby(['district'])['n'].transform(np.sum),\n        share = lambda x: x['n'].div(x['num_accidents_district'])\n    ) \\\n    .pivot(index='district', columns='month', values='share') \\\n    .pipe((sns.heatmap, 'data'), \n        vmin=0.0,\n        vmax=0.15,\n        cmap=cmap,\n        linewidths=0.2, \n        linecolor='white',\n        annot=True, \n        fmt='0.1%',\n        cbar_kws={'format': mtick.FuncFormatter(fmt)},\n        ax=ax\n    )\nax.set(title='Share of accidents per district and month');","4fda7c13":"fig, ax = plt.subplots()\naccidents_df \\\n    .groupby(['road condition']) \\\n    .agg(n=('id', 'count')) \\\n    .assign(share= lambda x: x['n'] \/ x['n'].sum()) \\\n    .reset_index(drop=False) \\\n    .sort_values('n', ascending=False) \\\n    .pipe((plt.pie, 'data'), \n        x='share',\n        labels='road condition',\n        autopct=\"%.1f%%\", \n        pctdistance=0.7,\n        explode=[0.02]*3\n    )\nax.set(title='Share of accidents for different road conditions');","426ef71c":"fig, ax = plt.subplots()\ncmap = sns.light_palette(sns_c[1])\nfmt = lambda y, _: f'{y :0.0%}'\naccidents_df \\\n    .groupby(['district', 'weekday']) \\\n    .agg(n=('id', 'count')) \\\n    .reset_index(drop=False) \\\n    .assign(\n        num_accidents_district = lambda x: x.groupby(['district'])['n'].transform(np.sum),\n        share = lambda x: x['n'].div(x['num_accidents_district'])\n    ) \\\n    .pivot(index='district', columns='weekday', values='share') \\\n    .pipe((sns.heatmap, 'data'), \n        vmin=0.0,\n        vmax=0.2,\n        cmap=cmap,\n        linewidths=0.2, \n        linecolor='white',\n        annot=True, \n        fmt='0.1%',\n        cbar_kws={'format': mtick.FuncFormatter(fmt)},\n        ax=ax\n    )\nax.set(title='Share of accidents per district and weekday');","1d9bd1b6":"bins = range(0,25,2)\ncategory = ['0-2','-4','-6','-8','-10','-12','-14','-16','-18','-20','-22','-0']\n\nfig, ax = plt.subplots()\ncmap = sns.light_palette(sns_c[1])\nfmt = lambda y, _: f'{y :0.0%}'\naccidents_df \\\n    .assign(hours = pd.cut(accidents_df[\"hour\"],bins,labels = category)) \\\n    .groupby(['district', 'hours']) \\\n    .agg(n=('id', 'count')) \\\n    .reset_index(drop=False) \\\n    .assign(\n        num_accidents_district = lambda x: x.groupby(['district'])['n'].transform(np.sum),\n        share = lambda x: x['n'].div(x['num_accidents_district'])\n    ) \\\n    .pivot(index='district', columns='hours', values='share') \\\n    .pipe((sns.heatmap, 'data'), \n        vmin=0.0,\n        vmax=0.2,\n        cmap=cmap,\n        linewidths=0.2, \n        linecolor='white',\n        annot=True, \n        fmt='0.1%',\n        cbar_kws={'format': mtick.FuncFormatter(fmt)},\n        ax=ax\n    )\nax.set(title='Share of accidents per district and hour');","5caa5423":"fig, ax = plt.subplots()\naccidents_df \\\n    .groupby(['lighting conditions']) \\\n    .agg(n=('id', 'count')) \\\n    .assign(share= lambda x: x['n'] \/ x['n'].sum()) \\\n    .reset_index(drop=False) \\\n    .sort_values('n', ascending=False) \\\n    .pipe((plt.pie, 'data'), \n        x='share',\n        labels='lighting conditions',\n        autopct=\"%.1f%%\", \n        pctdistance=0.7,\n        explode=[0.02]*3,\n        normalize=True\n    )\nax.set(title='Share of accidents for different lighting conditions');","d00ec39b":"fig, ax = plt.subplots()\ncmap = sns.light_palette(sns_c[1])\nfmt = lambda y, _: f'{y :0.0%}'\naccidents_df \\\n    .loc[accidents_df['district'] == 'Mitte'] \\\n    .groupby(['month', 'weekday']) \\\n    .agg(n=('id', 'count')) \\\n    .reset_index(drop=False) \\\n    .assign(\n        num_accidents_month = lambda x: x.groupby(['month'])['n'].transform(np.sum),\n        share = lambda x: x['n'].div(x['num_accidents_month'])\n    ) \\\n    .pivot(index='month', columns='weekday', values='share') \\\n    .pipe((sns.heatmap, 'data'), \n        vmin=0.0,\n        vmax=0.3,\n        cmap=cmap,\n        linewidths=0.2, \n        linecolor='white',\n        annot=True, \n        fmt='0.1%',\n        cbar_kws={'format': mtick.FuncFormatter(fmt)},\n        ax=ax\n    )\nax.set(title='Share of accidents per month and weekday for Mitte');\nax.set(xlabel='');","9a62b9c7":"bins = range(0,25,2)\ncategory = ['0-2','-4','-6','-8','-10','-12','-14','-16','-18','-20','-22','-0']\n\nfig, ax = plt.subplots()\ncmap = sns.light_palette(sns_c[1])\nfmt = lambda y, _: f'{y :0.0%}'\naccidents_df \\\n    .loc[accidents_df['district'] == 'Mitte'] \\\n    .assign(hours = pd.cut(accidents_df[\"hour\"],bins,labels = category)) \\\n    .groupby(['weekday','hours']) \\\n    .agg(n=('id', 'count')) \\\n    .reset_index(drop=False) \\\n    .assign(\n        num_accidents_weekday = lambda x: x.groupby(['weekday'])['n'].transform(np.sum),\n        share = lambda x: x['n'].div(x['num_accidents_weekday'])\n    ) \\\n    .pivot(index='weekday', columns='hours', values='share') \\\n    .pipe((sns.heatmap, 'data'), \n        vmin=0.0,\n        vmax=0.3,\n        cmap=cmap,\n        linewidths=0.2, \n        linecolor='white',\n        annot=True, \n        fmt='0.1%',\n        cbar_kws={'format': mtick.FuncFormatter(fmt)},\n        ax=ax\n    )\nax.set(title='Share of accidents per weekday and hour for Mitte');","d2b17247":"fig, ax = plt.subplots(figsize=(15, 6))\naccidents_df \\\n    .groupby(['district', 'category']) \\\n    .agg(n=('id', 'count')) \\\n    .reset_index(drop=False) \\\n    .sort_values('n', ascending=False) \\\n    .pipe((sns.barplot, 'data'), \n        y='district', \n        x='n',\n        hue='category',\n        edgecolor='white',\n        dodge=True,\n        ax=ax\n    )\nax.tick_params(axis='x', labelrotation=90)\nax.set(\n    title='Number of accidents per district in Berlin (per severeness of injury)', \n    xlabel='number of accidents', \n    ylabel='district'\n);","097c0d9f":"fig, ax = plt.subplots()\naccidents_df \\\n    .groupby(['category']) \\\n    .agg(n=('id', 'count')) \\\n    .assign(share= lambda x: x['n'] \/ x['n'].sum()) \\\n    .reset_index(drop=False) \\\n    .sort_values('n', ascending=False) \\\n    .pipe((plt.pie, 'data'), \n        x='share',\n        labels='category',\n        autopct=\"%.1f%%\", \n        pctdistance=0.7,\n        explode=[0.02]*3\n    )\nax.set(title='Share of accidents for different casualties');","60525acd":"fig, ax = plt.subplots()\ncmap = sns.light_palette(sns_c[1])\nfmt = lambda y, _: f'{y :0.0%}'\naccidents_df \\\n    .groupby(['district', 'kind']) \\\n    .agg(n=('id', 'count')) \\\n    .reset_index(drop=False) \\\n    .assign(\n        num_accidents_district = lambda x: x.groupby(['district'])['n'].transform(np.sum),\n        share = lambda x: x['n'].div(x['num_accidents_district'])\n    ) \\\n    .pivot(index='district', columns='kind', values='share') \\\n    .pipe((sns.heatmap, 'data'), \n        vmin=0.0,\n        vmax=0.5,\n        cmap=cmap,\n        linewidths=0.2, \n        linecolor='white',\n        annot=True, \n        fmt='0.1%',\n        cbar_kws={'format': mtick.FuncFormatter(fmt)},\n        ax=ax\n    )\nax.set(title='Share of accidents per district and kind');\nax.set(xlabel='');","f3b9549f":"fig, ax = plt.subplots()\ncmap = sns.light_palette(sns_c[1])\nfmt = lambda y, _: f'{y :0.0%}'\naccidents_df \\\n    .groupby(['district', 'type']) \\\n    .agg(n=('id', 'count')) \\\n    .reset_index(drop=False) \\\n    .assign(\n        num_accidents_district = lambda x: x.groupby(['district'])['n'].transform(np.sum),\n        share = lambda x: x['n'].div(x['num_accidents_district'])\n    ) \\\n    .pivot(index='district', columns='type', values='share') \\\n    .pipe((sns.heatmap, 'data'), \n        vmin=0.0,\n        vmax=0.3,\n        cmap=cmap,\n        linewidths=0.2, \n        linecolor='white',\n        annot=True, \n        fmt='0.1%',\n        cbar_kws={'format': mtick.FuncFormatter(fmt)},\n        ax=ax\n    )\nax.set(title='Share of accidents per district and type');\nax.set(xlabel='');","481d01fc":"fig, ax = plt.subplots()\ncmap = sns.light_palette(sns_c[1])\nfmt = lambda y, _: f'{y :0.0%}'\naccidents_df \\\n    .groupby('district') \\\n    .agg(\n        n = ('id', 'count'),\n        num_bikes=('bicycle', 'sum'),\n        num_cars=('car', 'sum'),\n        num_pedestrians=('pedestrian', 'sum'),\n        num_motorbikes=('motorbike', 'sum'),\n        num_trucks=('truck', 'sum'),\n        num_other=('other vehicle', 'sum')\n    ) \\\n    .reset_index(drop=False) \\\n    .assign(\n        bicycles = lambda x: x['num_bikes'] \/ x['n'],\n        cars = lambda x: x['num_cars'] \/ x['n'],\n        pedestrians = lambda x: x['num_pedestrians'] \/ x['n'],\n        motorbikes = lambda x: x['num_motorbikes'] \/ x['n'],\n        trucks = lambda x: x['num_trucks'] \/ x['n'],\n        others = lambda x: x['num_other'] \/ x['n'],\n    ) \\\n    .melt(id_vars=['district'], value_vars=['bicycles', 'cars', 'pedestrians', 'motorbikes', 'trucks', 'others']) \\\n    .pivot(index='district', columns='variable', values='value') \\\n    .pipe((sns.heatmap, 'data'), \n        vmin=0.0,\n        vmax=0.9,\n        cmap=cmap,\n        linewidths=0.2, \n        linecolor='white',\n        annot=True, \n        fmt='0.1%',\n        cbar_kws={'format': mtick.FuncFormatter(fmt)},\n        ax=ax\n    )\nax.set(title='Share of accidents per district and type');\nax.set(xlabel='');\n    ","c772c2ab":"accidents_df.iloc[9,:]","56299459":"ZoneNo = \"32N\" # UTM zone, according to reference PDF that came with the dataset\n\n# initialize using the WGS84 reference system\nmyProj = Proj(\"+proj=utm +zone=\"+\\\nZoneNo+\", +north +ellps=WGS84 +datum=WGS84 +units=m +no_defs\")\n# converting the coordinates\nLon_test, Lat_test = myProj(accidents_df.loc[9,'LINREFX'],accidents_df.loc[9,'LINREFY'], inverse=True)\nprint([Lat_test,Lon_test])","f5be15b2":"# initializing the base map\nfmap = folium.Map(location=[Lat_test, Lon_test], zoom_start=16)\n# adding marker at coordinates\nfolium.Circle(\n    radius=20,\n    location=[Lat_test, Lon_test],\n    color=\"crimson\",\n    fill=False,\n).add_to(fmap)\n# showing the map\nfmap","cb1294e3":"Lons, Lats = myProj(\n    np.array(accidents_df.loc[:,'LINREFX']),\n    np.array(accidents_df.loc[:,'LINREFY']), \n    inverse=True)\n\n# initializing the base map\nfmap = folium.Map(location=[Lats.mean(), Lons.mean()], zoom_start=11)\nmarker_cluster = MarkerCluster().add_to(fmap)\n\n# adding marker at coordinates with 'id' and 'street' columns as description\nids = np.array(accidents_df.loc[:,'id'])\nstreets = np.array(accidents_df.loc[:,'street'])\nfor Lon, Lat, idd, street in zip(Lons, Lats, ids, streets):\n    folium.Circle(\n            radius=30,\n            location=[Lat, Lon],\n            popup=str(idd)+': '+street,\n            color=\"blue\",\n            fill=False,\n            ).add_to(marker_cluster)\n    \n# showing the map\nfmap","f5db7694":"test = pd.DataFrame({'Lats':Lats,'Lons':Lons})\ntest.head()","ab6b4046":"Lons, Lats = myProj(\n    np.array(accidents_df.loc[accidents_df['bicycle']==1,'LINREFX']),\n    np.array(accidents_df.loc[accidents_df['bicycle']==1,'LINREFY']), \n    inverse=True)\n\n# initializing the base map\nfmap = folium.Map(location=[Lats.mean(), Lons.mean()], zoom_start=11, tiles='cartodbpositron')   \nHeatMap(data=pd.DataFrame({'Lats':Lats,'Lons':Lons}), radius=10).add_to(fmap)\n    \n# showing the map\nfmap","b154453c":"# define vehicle and district\nvehicle = 'bicycle'\ndistrict = 'Mitte'\n\n# define categories of injuries\ninj_cats = ['fatal', 'serious injury', 'light casualty']\n\n# marker colors\ncolors = ['red','blue','green']\n\n# build color selector\ncolor_sel = {}\nfor cat,color in zip(inj_cats,colors):\n    color_sel[cat] = color\n\n# function to filter results by vehicle and district\ndef filtered_by_vehicle_district(df,vehicle,district):\n    return df[(df[vehicle]==1) & accidents_df['district'].isin([district])]\n\n# function to define feature group for each category\ndef define_feature_groups(cats):\n    feature_groups = {}\n    for cat in cats:\n        feature_groups[cat] = folium.FeatureGroup(name=cat)\n    return feature_groups\n\n# filter by bikes for Mitte\nfiltered_df = filtered_by_vehicle_district(accidents_df,vehicle,district)\n\n# convert coordinates\nLons, Lats = myProj(\n    np.array(filtered_df['LINREFX']),\n    np.array(filtered_df['LINREFY']), \n    inverse=True)\n\n# initializing the base map\nfmap = folium.Map(location=[Lats.mean(), Lons.mean()], zoom_start=13)\n\n# define feature groups\nfeature_groups = define_feature_groups(inj_cats)\n\n# adding marker at coordinates with 'id' and 'street' columns as description, marker colored by category of injury\nfor Lon, Lat, idd, street, cat in zip(\n    Lons, \n    Lats, \n    np.array(filtered_df['id']), \n    np.array(filtered_df['street']),\n    np.array(filtered_df['category'])\n    ):\n    folium.Circle(\n                radius=30,\n                location=[Lat, Lon],\n                popup=str(idd)+': '+street,\n                color=color_sel[cat],\n                fill=False,\n                ).add_to(feature_groups[cat])\n    \nfor cat in inj_cats:\n    fmap.add_child(feature_groups[cat])\n\n# turn on layer control\nfmap.add_child(folium.map.LayerControl())\n\n# showing the map\nfmap","e340a532":"At least one row in the dataset seems to be corrupted (it's likely the same row that messes up both columns here). Let us find this faulty row based on the \"other vehicle\" column and remove it, and see if it fixes both our problems.","218143d6":"This looks very interesting. We can clearly see that the density of accidents increases towards the city center. Now we can filter the results and only look at specific types of accidents. As a cyclist I am mostly interested in accidents involving bicycles. This time we will use folium's heatmap feature.","89337c75":"Please note the layer icon in the top right, where you can toggle between the different categories. As a cyclist living in Mitte I am relieved to see that most bicycle accidents in Mitte only result in light casualties (green). However, there are still a few accidents resulting in serious injuries (blue) and one fatal accident (red) near Alexanderplatz. Accidents resulting in serious injuries appear to occur predominantly on bigger roads. The same can be observed for accidents resulting in light casualties. Hot spots are bigger roads like Unter den Linden\/Stra\u00dfe des 17. Juni, Friedrichstra\u00dfe\/M\u00fcllerstra\u00dfe, or Invalidenstra\u00dfe.","0ec42ef0":"# Reading the data\nWe need to load the UTF-8 encoded version of the dataset, using semicolon delimeters.","cda91d00":"# Cleaning the data\nThe original data contains some information that we won't need.\n* The \"LAND\" column, which is equal to 11 (for Berlin) for all entries.\n* The \"LOR\" column, which describes the location of the accident within the city, based on a key system only used by Berlin authorities.\n* The \"UJAHR\" column, which describes the year of each observation, and which is equal to 2019 for all entries.\n* The last two columns, which describe the coordinates of where the accident happened in the reference system GK3. We will only use the UTM coordinates and convert them to lattitude\/longitude coordinates. \n\nLet's delete those columns.","84a6ae1f":"This confirms our hypothesis that more accidents occur when people are more active, since there are more accidents during the week, compared to on weekends. Also, there is only very little variation between the different districts and between days during the week. That means that there is no distinct day when most accidents happen, e.g. on Fridays, after working all week.\n\nWhile we are on it, let's also look at the distribution of accidents over the time of the day.","c140dd53":"# Local distribution of accidents\nFirst we check where accidents are most likely to occur. We will start with the total number of accidents in each of the 12 districts of Berlin.","39c8a1e6":"# Kinds of accidents\nThe dataset distinguishes differents kinds of accidents, depending on the relative direction of vehicles before the crash, or whether a vehicle went off the road.","0dcbea80":"While we are on it, we will also replace the other identifiers with their real meanings.","f29f6586":"# Exploring the dataset\nOne of the main objectives of this notebook is to do an exploratory data analysis to understand which questions this data set can answer. To begin, we look at some basic properties of the dataset, like its size...\n\n","be962977":"# Distribution of accidents over time\nThe dataset tells us the month, day and hour of every accident in 2019. Maybe we are able to find some patterns indicating when accidents are most likely to occur.","42159b2b":"# Conclusion\nThis completes my first analysis of the dataset. Let me know what you think and what other aspects you would include.","29ee1719":"However, these statistics don't tell us much, since most columns either refer to certain IDs or to dates and times.","b9465cc0":"Here, we see that accidents occurred in all 12 districts of Berlin. We also see that the \"id\" column can be used as a unique identifier for each entry, since it has the same length as the dataset.\n\nWhile most of these values make sense given the different classifications of accidents, lighting conditions etc., the values for the columns \"other vehicle\" and \"road condition\" seem off. The column \"other vehicle\" should only contain two unique values, 0 or 1, indicating whether a vehicle other than the ones listed in the previous columns was involved in the accident. Similarly, the \"road condition\" column should only contain three unique values, corresponding to 0-dry, 1-wet, and 2-icy conditions.\n\nLet's investigate this further by looking at the unique values of these two columns.","9acf2527":"Let's look at the first ten lines of our dataframe.","a6f3dd34":"Unfortunately, we see that the marker location is not quite where it should be, which is somewhere on Fritz-Werner-Stra\u00dfe (the next road to the left, leading south). I found similar deviations for many coordinates I tested. This inaccuracy is far beyond the 70-80 centimeter offset discussed above. I also confirmed that the conversion is correct using other conversion tools, like [https:\/\/coordinates-converter.com\/en\/](http:\/\/). The only feasable explanation I came up with is that this deviation is due to insufficient GPS accuracy when the measurement was taken. Since we can't do anything about this let's plot the markers for all accidents anyway.","d28004ee":"We see that most accidents occur in the four central districts, with Mitte (the city center) leading the field. In the outer districts, much less accidents occur. This seems intuitive, as we would expect more accidents to occur where roads are busier. We can also express this as shares of the total number of accidents.","8ff2e46f":"Much better, let's start exploring the dataset.","8ba81da3":"From this we see that there appear to be slightly more accidents around the summer months, especially in \"Mitte\". This could be due to increased activity in summer, while more people may stay at home more often in winter. However, the lower number of accidents in the winter months is surprising, given that icy roads should increase the number of accidents. ","45b7dd74":"Again there is little variation between the different weekdays. On weekends, the increase of the number of accidents throughout the day seems to be delayed by two to four hours, which could correspond to people being more active later in the day.","c43518dc":"Looks like our problem has been fixed. Because of the corrupted values, pandas wasn't able to guess the data type of the \"other vehicle\" column and made it an \"object\". Let's fix this by converting it to integer values.","3a5cc120":"# Introduction\nThis is my first notebook on kaggle. In this notebook, I want to explore some data I found on the Berlin Open Data portal [daten.berlin.de](http:\/\/). The data source contains information on all road traffic accidents that occurred in the city of Berlin in 2019. We first provide an initial exploratory data analysis of the data set and then continue to investigate the impact of various factors on the occurance of road traffic accidents in Berlin. I'd be happy to know what you think about this analysis. Please share your ideas and thoughts about what other aspects could be studied using this dataset.","60e1811d":"Also here we see that almost half of the accidents occur in the four central districts Mitte, Charlottenburg-Wilmersdorf, Friedrichshain-Kreuzberg, and Tempelhof-Sch\u00f6neberg, while roughly the other half of accidents occurs in the other 8 districts.\n\nLet's also look at the top 20 streets where accidents occur.","72d9db9e":"For easier identification we will convert the district identifiers to real district names.","ce2109e4":"Fortunately, fatal accidents seem to be the exception, while accidents with light casualties prevail. However, there is also still a large number of accidents resulting in serious injuries across all districts, again with larger numbers in the central districts.\n\nFor the sake of completeness, let's also plot the total share of different casualties.","6522b180":"# Type of accident\nThe dataset further distinguishes between types of accidents. Plotted like before for the different districts this yields.","b2b008f8":"# Casualties\nOne important metric when investigating accidents is how badly people get injured. Let's compare the categories for the different districts. ","e68e8cd6":"Let's confirm that there is only one city (column \"LAND\": 11 correspoding to Berlin) and one year (column \"UJAHR\": 2019).","78c42f93":"Again, there is little variation between the different districts. Accidents while crossing a road, in lengthwise traffic, and while turning are the most common types across the board. What stands out is that are more accidents in stationary traffic in Mitte and Friedrichshain-Kreuzberg, potentially due an increased number of traffic jams in these areas. In contrast, there much less accidents in stationary traffic in the outer districts, like Treptow-K\u00f6penick, Marzahn-Hellersdorf, and Lichtenberg. At the same time, the latter two also exhibit an increased number of accidents associated with exceeding speed limits.","f601aafd":"# Road users involved\nFinally, we want to investigate the different types of road users involved in those accidents. Please note that while these numbers are expressed as ratios relative to the total number of accidents in each district, their sum may exceed 100%, since multiple different road users may be involved in the same accident.","a4899be0":"# Geospatial Analysis","9c1d8957":"Bicycle accidents seem to be concentrated around the city center and the south west. Let's look at the central district Mitte in greater detail. We will color the markers by category of injury.","5bd78121":"There doesn't seem to be a significant variation between the different months. The month April stands out to some extend, with much less accidents on Sundays and much more accidents on Tuesdays, compared to the rest of the year. The reason for this phenomenon is ammenable to speculation.\n\nSimilarly we can also investigate the number of accidents for different hours of the day on different weekdays. We will look at Mitte again.","57574e25":"Let's also check if the number of accidents on different weekdays varies for different months. We will look at the district \"Mitte\".","f19bda19":"Like before, there is only little variation between the different districts. The vast majority of accidents are related to crashes with turning or crossing vehicles, followed by crashes with vehicles driving ahead, which likely refer to rear-end collisions. Crashes between a vehicle and a pedestrian appear to be the third most common kind of accident.","8b8fe5ea":"Now everything looks much better. We can start with some basic statistics.","dc2b8e06":"As expected, most road traffic accidents concern cars. However, there is also a large number of bicycles involved, again especially in the central districts Mitte and Friedrichshain-Kreuzberg. But also in Pankow, a district on the outskirts of Berlin, nearly half of the accidents involve bicycles. This could be due to factors like a large number of cyclists in this district or the lack of dedicated bicycle lanes. In contrast, in the districts of Reinickendorf and Spandau, both far from the city centre, there are the lowest shares of accidents involving bicycles.\n\nPedestrians, motorbikes, and other road users (like trams or busses) only seem to be involved in roughly one out of seven accidents each. Trucks are rarely involved.","f749896f":"# Prepare notebook","638e2acc":"We will also translate the column names from German to English.","28ab41c0":"Looking at the pie chart above, however, tells us that icy conditions are only responsible for a tiny fraction of the total number of accidents, while the majority of accidents happens with dry conditions.\n\nNext, let's look at the distribution of accidents over weekdays.","b8be3246":"We see that the coordinates in the last two columns are still using German decimal notation with commas instead of dots. We need to change this.","150f2033":"Overall, these is little variation between the different districts. As expected, there are very few accidents at night (between 8 pm and 6 am), followed by a growing number of accidents throughout the day, before peaking in the afternoon around 4 pm during rush hour. What is interesting is that a much smaller peak is observed during the morning rush hour, after which the number of accidents seems to decrease towards noon, before picking up again. This could be due to multiple reasons, like e.g. people being more tired\/less concentrated in the evening vs. the morning. \n\nAnother way to look at this is by plotting the lighting conditions for each accident, which confirms our previous observations.","78e183d6":"...which tells us that 13390 accidents occurred in Berlin in 2019, which makes about 37 accidents per day. Next we look at the number of unique values in each column...","d375050b":"Most of the accidents occur at \"Alexanderplatzviertel\", which describes the area around Alexanderplatz, Berlin's central plaza. It is home to the TV tower and many shopping streets, separated by multiple larger roads and highly frequented tram lines. The second highest number of accidents occur at \"Samariterviertel\", a mostly residential area just east of the city center in the district of Friedrichshain. Later on we will also look at the location of each accident on the map.","ef60ef24":"Since we have the GPS coordinates of each accident, let's look at how they are distributed on the map. In order to do this we need to convert the coordinates specified in the UTM system with reference system ETRS89 to lattitude and longitude. We'll cheat a bit by using the WGS84 reference system, as there are no python conversion libraries available for ETRS89 (at least to my knowledge). \n\nETRS89 is a European system, fixed to the Eurasian plate and (19)89 describes the year at which it was equal to the international terrestrial reference system (ITRS). WGS (84 describes the year the last version was created) is an international system. Due to plate tectonics, the offset between WGS84\/ITRS and ETRS89 dynamically grows at a rate of approximately 2.5 centimeters annually, and has reached a value of 70 to 80 centimeters (in 2020) since the introduction of ETRS89. The offset varies depending on the location of a given coordinate on the Eurasian plate, as the European continent slowly rotates around the Earth center of mass. Therefore, the location error we will make should be on the order of 70 to 80 centimeters, which is considered negligible for our purpose.\n\nLet's test the conversion for a sample case using the \"pyproj\" library. We will use the 10th entry in the dataframe."}}