{"cell_type":{"74b28d03":"code","09fb11b4":"code","1504d152":"code","c7a4ab47":"code","fb48c6e2":"code","0cb85ff7":"code","b74bbffc":"code","c6832426":"code","13511ef1":"code","2c07eeb8":"code","756a65e3":"code","f7aa9a69":"code","bdb4762e":"code","e9208c17":"code","4f8f367f":"code","5c4f9b20":"code","332fc563":"code","c98ad847":"code","d2b7a2d6":"code","f5f6adac":"code","5fa5f1d4":"code","8665279f":"code","6b78fad1":"code","187ec671":"code","84f1a0c7":"code","a0d468bb":"code","2429d473":"code","ff17004f":"code","51b2301f":"code","a39f1359":"code","b50088f9":"code","bb962f77":"code","7e7e86bc":"code","48c69936":"code","30e2fdff":"code","54b07207":"code","e64316ba":"code","88069eae":"code","d1590d2c":"code","a4ecd6d2":"code","e6821e1c":"code","141c3e28":"code","97b7f213":"markdown","98fe4113":"markdown","a30e2d7e":"markdown","ad6bbcfa":"markdown","6a520ef1":"markdown","d2b56e81":"markdown","76ae0dd9":"markdown"},"source":{"74b28d03":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nimport gc\nfrom matplotlib import pyplot\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom lightgbm import LGBMRegressor\nimport xgboost as xgb\nfrom xgboost import plot_importance, plot_tree\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.layers import Conv1D, Conv2D, MaxPooling1D, MaxPooling2D, Flatten, Dense, Reshape, Dropout, LSTM, RepeatVector, TimeDistributed","09fb11b4":"train = pd.read_csv(\"..\/input\/electricity-consumption\/train.csv\")\ntest = pd.read_csv(\"..\/input\/electricity-consumption\/test.csv\")","1504d152":"train.head()","c7a4ab47":"test.head()","fb48c6e2":"plt.figure(figsize=(10,4))\nplt.xlim(-100, 3000)\nsns.boxplot(x=train.electricity_consumption)\n\nplt.figure(figsize=(10,4))\nplt.xlim(train.temperature.min(), train.temperature.max()*1.1)\nsns.boxplot(x=train.temperature)\n\nplt.figure(figsize=(10,4))\nplt.xlim(-100, 3000)\nsns.boxplot(x=train.windspeed)\n\nplt.figure(figsize=(10,4))\nplt.xlim(train.var1.min(), train.var1.max()*1.1)\nsns.boxplot(x=train.var1)\n\nplt.figure(figsize=(10,4))\nplt.xlim(train.pressure.min(), train.pressure.max()*1.1)\nsns.boxplot(x=train.pressure)","0cb85ff7":"train = train[train['electricity_consumption']<=1000]","b74bbffc":"train = train[train['var1']>=-30]","c6832426":"train = train[train['windspeed']<=400]","13511ef1":"print(train.temperature.min())\nprint(train.temperature.max())\nprint(train.temperature.mean())\npyplot.plot(train.temperature)","2c07eeb8":"print(train.pressure.min())\nprint(train.pressure.max())\nprint(train.pressure.mean())\npyplot.plot(train.pressure)","756a65e3":"print(train.windspeed.min())\nprint(train.windspeed.max())\nprint(train.windspeed.mean())\npyplot.plot(train.windspeed)","f7aa9a69":"print(train.var1.min())\nprint(train.var1.max())\nprint(train.var1.mean())\npyplot.plot(train.var1)","bdb4762e":"train.var2.unique()","e9208c17":"le = LabelEncoder()\ntrain[\"var2_label\"] = le.fit_transform(train.var2)\ntrain = train.drop('var2',axis=1)\nle = LabelEncoder()\ntest[\"var2_label\"] = le.fit_transform(test.var2)\ntest = test.drop('var2',axis=1)","4f8f367f":"train.head()","5c4f9b20":"test.head()","332fc563":"train['DateAndTime'] = pd.to_datetime(train['datetime'])\ntest['DateAndTime'] = pd.to_datetime(test['datetime'])\n\ntrain['month'] = train['DateAndTime'].dt.month\ntrain['day'] = train['DateAndTime'].dt.day\ntrain['year'] = train['DateAndTime'].dt.year\ntrain['hour'] = train['DateAndTime'].dt.hour\n\ntest['month'] = test['DateAndTime'].dt.month\ntest['day'] = test['DateAndTime'].dt.day\ntest['year'] = test['DateAndTime'].dt.year\ntest['hour'] = test['DateAndTime'].dt.hour","c98ad847":"train = train.drop('datetime',axis=1)\ntest = test.drop('datetime', axis=1)","d2b7a2d6":"train = train.drop('DateAndTime',axis=1)\ntest = test.drop('DateAndTime', axis=1)","f5f6adac":"train['temp_shift_1'] = train.groupby('day')['temperature'].shift(1)\ntrain['pres_shift_1'] = train.groupby('day')['pressure'].shift(1)\ntrain['ws_shift_1'] = train.groupby('day')['windspeed'].shift(1)\ntrain['var1_shift_1'] = train.groupby('day')['var1'].shift(1)\ntrain['var2_label_shift_1'] = train.groupby('day')['var2_label'].shift(1)","5fa5f1d4":"test['temp_shift_1'] = test.groupby('day')['temperature'].shift(1)\ntest['pres_shift_1'] = test.groupby('day')['pressure'].shift(1)\ntest['ws_shift_1'] = test.groupby('day')['windspeed'].shift(1)\ntest['var1_shift_1'] = test.groupby('day')['var1'].shift(1)\ntest['var2_label_shift_1'] = test.groupby('day')['var2_label'].shift(1)","8665279f":"train.isnull().sum().sum()","6b78fad1":"train = train.dropna()","187ec671":"train.isnull().sum().sum()","84f1a0c7":"test.isnull().sum().sum()","a0d468bb":"test = test.fillna(test.mean())","2429d473":"test.isnull().sum().sum()","ff17004f":"X = train.copy()","51b2301f":"y = X['electricity_consumption']\nX = X.drop(['electricity_consumption'],axis=1)","a39f1359":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=18)","b50088f9":"model = LGBMRegressor(boosting_type='gbdt', class_weight=None, colsample_bytree=0.8,\n              importance_type='split', learning_rate=0.025, max_depth=8,\n              min_child_samples=20, min_child_weight=100, min_split_gain=0.0,\n              n_estimators=1000, n_jobs=-1, num_leaves=256,\n              random_state=None, reg_alpha=0.8, reg_lamda=0.8,silent=True)","bb962f77":"model.fit(X_train, y_train, eval_metric='rmse')","7e7e86bc":"# model = RandomForestRegressor(n_estimators=2000,random_state=42)","48c69936":"# model.fit(X_train, y_train)","30e2fdff":"#model = xgb.XGBRegressor(n_estimators=800, learning_rate=0.05,objective='reg:squarederror',max_depth=10,reg_alpha=0,reg_lambda=1,booster='gbtree')\n#model = xgb.XGBRegressor(n_estimators=1000, learning_rate=0.25,objective='reg:linear',max_depth=8,reg_alpha=0.7,reg_lambda=0.7,booster='gbtree')\n#model = xgb.XGBRegressor(n_estimators=2000)","54b07207":"#model.fit(X_train, y_train,verbose=True, eval_set=[(X_train, y_train), (X_val, y_val)], early_stopping_rounds = 10)\n#model.fit(X_train,y_train)","e64316ba":"# _ = plot_importance(model, height=0.9)","88069eae":"# model = Sequential()\n# model.add(Reshape((1,X_train.shape[1],1)))\n# model.add(Conv2D(filters = 32, kernel_size = (1,1),padding = 'Same',\n#              activation ='relu', input_shape = (1,X_train.shape[1],1)))\n# model.add(Conv2D(filters = 32, kernel_size = (1,1),padding = 'Same',\n#              activation ='relu'))\n# model.add(Conv2D(filters = 32, kernel_size = (1,1),padding = 'Same',\n#              activation ='relu'))\n# model.add(Flatten())\n# model.add(Dense (500, activation='relu'))\n# model.add(Dense (10, activation='relu'))\n# model.add(Dense (1, activation='linear'))\n# model.compile(loss='mean_squared_error', optimizer='adam',\n#               metrics=['mse'])","d1590d2c":"# CNNModel = model.fit(np.array(X_train), np.array(y_train), nb_epoch=10000, batch_size=20, validation_data=(np.array(X_val),np.array(y_val)))","a4ecd6d2":"predict_val = model.predict(X_val)","e6821e1c":"np.sqrt(mean_squared_error(y_val, predict_val))","141c3e28":"predictions = model.predict(test)\nsubmit = test.copy()\nsubmit['electricity_consumption'] = predictions\nsubmit = submit[['ID','electricity_consumption']]\nsubmit.to_csv(\"submission.csv\",index=False)","97b7f213":"**Remove Outliers**","98fe4113":"***Random Forest***","a30e2d7e":"***LGBM***","ad6bbcfa":"**Submission**","6a520ef1":"**EDA**","d2b56e81":"**XGBOOST**","76ae0dd9":"**CNN**"}}