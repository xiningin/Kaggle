{"cell_type":{"e7179c47":"code","f67f059e":"code","2163cc2f":"code","87718190":"code","54245785":"code","f79dbfc5":"code","8899c5e5":"code","b1946ae2":"code","0908a426":"code","33fd7552":"code","fd36a16e":"code","45058382":"code","ac8cb2de":"code","1b8baf3d":"code","156c0fb8":"code","250c0c7b":"code","fc1208ef":"code","4e5e756d":"code","efe99af1":"code","00508ec4":"code","bcef6f9b":"code","799f7dcd":"code","563f94f6":"code","3f94cd86":"code","8eab669f":"code","c3f66cb3":"code","d1983576":"code","d8f9a7dc":"code","4f493fa5":"code","a09a4cc1":"code","1b2f618e":"code","62f4574a":"code","c89c5473":"code","06964d01":"code","d2f2c004":"code","ebee3936":"code","238361f0":"code","54ffd408":"code","2264b5d3":"code","25b3adc3":"code","d6598254":"code","75e093a8":"code","0abe4c88":"code","851404de":"code","36bf067e":"code","109c1ceb":"code","b0604243":"code","13b03262":"code","45fe7fff":"code","aafc5e92":"code","651fb191":"code","2d07ef52":"markdown","8df64308":"markdown","d2672b79":"markdown","a4c06fa1":"markdown","8ade7e73":"markdown","4c1c42f2":"markdown","5767eaaa":"markdown","cd1015a2":"markdown","a93e1957":"markdown"},"source":{"e7179c47":"import numpy as np\nimport scipy as sp\nimport pandas as pd\nfrom pandas import DataFrame, Series\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold,train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\n\nfrom category_encoders import OrdinalEncoder, OneHotEncoder, TargetEncoder\nfrom tqdm import tqdm_notebook as tqdm\n","f67f059e":"df_train = pd.read_csv('..\/input\/homework-for-students4plus\/train.csv', index_col=0)\ndf_test = pd.read_csv('..\/input\/homework-for-students4plus\/test.csv', index_col=0)","2163cc2f":"df_train['issue_d_year']= pd.to_datetime(df_train['issue_d']).apply(lambda x: int(x.strftime('%Y')))\ndf_test['issue_d_year']= pd.to_datetime(df_test['issue_d']).apply(lambda x: int(x.strftime('%Y')))","87718190":"y_train = df_train.query('issue_d_year > 2014').loan_condition\nX_train = df_train.query('issue_d_year > 2014').drop(['loan_condition'], axis=1)\n\nX_test = df_test","54245785":"X_train['nan_count'] = X_train.isnull().sum(axis=1)\nX_test['nan_count'] = X_test.isnull().sum(axis=1)","f79dbfc5":"for col in X_train.columns:\n    if X_train[col].isnull().any():\n        X_train['nanflg_'+col] = X_train[col].isnull().astype(int)\n    \nfor col in X_test.columns:\n    if X_test[col].isnull().any():\n        X_test['nanflg_'+col] = X_test[col].isnull().astype(int)","8899c5e5":"X_train['amnt_per_inc'] = X_train['loan_amnt']\/X_train['annual_inc']\nX_test['amnt_per_inc'] = X_test['loan_amnt']\/X_test['annual_inc']","b1946ae2":"X_train['amnt_per_revol'] = X_train['loan_amnt']\/X_train['revol_bal']\nX_test['amnt_per_revol'] = X_test['loan_amnt']\/X_test['revol_bal']","0908a426":"X_train['amnt_per_cur'] = X_train['loan_amnt']\/X_train['tot_cur_bal']\nX_test['amnt_per_cur'] = X_test['loan_amnt']\/X_test['tot_cur_bal']","33fd7552":"X_train['amnt_per_acc'] = X_train['loan_amnt']\/X_train['total_acc']\nX_test['amnt_per_acc'] = X_test['loan_amnt']\/X_test['total_acc']","fd36a16e":"X_train['revol_per_acc'] = X_train['revol_bal']\/X_train['total_acc']\nX_test['revol_per_acc'] = X_test['revol_bal']\/X_test['total_acc']","45058382":"X_train['revol_per_util'] = X_train['revol_bal']\/X_train['revol_util']\nX_test['revol_per_util'] = X_test['revol_bal']\/X_test['revol_util']","ac8cb2de":"X_train['revol_by_acc'] = X_train['revol_bal']*X_train['total_acc']\nX_test['revol_by_acc'] = X_test['revol_bal']*X_test['total_acc']","1b8baf3d":"X_train['amnt_by_inq'] = X_train['loan_amnt']*X_train['inq_last_6mths']\nX_test['amnt_by_inq'] = X_test['loan_amnt']*X_test['inq_last_6mths']","156c0fb8":"X_train['nan_cnt'] = X_train.isnull().sum(axis=1)\nX_test['nan_cnt'] = X_test.isnull().sum(axis=1)","250c0c7b":"X_train['issue_d'] = pd.to_datetime(X_train.issue_d, format=\"%b-%Y\")\nX_test['issue_d'] = pd.to_datetime(X_test.issue_d, format=\"%b-%Y\")","fc1208ef":"X_train['issue_d_month'] = X_train['issue_d'].dt.month.astype(str)\nX_test['issue_d_month'] = X_test['issue_d'].dt.month.astype(str)","4e5e756d":"X_train['issue_d'] = X_train['issue_d'].astype(int)\nX_test['issue_d'] = X_test['issue_d'].astype(int)","efe99af1":"X_train['earliest_cr_line'] = pd.to_datetime(X_train.earliest_cr_line, format=\"%b-%Y\")\nX_test['earliest_cr_line'] = pd.to_datetime(X_test.earliest_cr_line, format=\"%b-%Y\")","00508ec4":"X_train['earliest_cr_line_year'] = X_train['earliest_cr_line'].dt.year\nX_test['earliest_cr_line_year'] = X_test['earliest_cr_line'].dt.year","bcef6f9b":"X_train['earliest_cr_line_month'] = X_train['earliest_cr_line'].dt.month.astype(str)\nX_test['earliest_cr_line_month'] = X_test['earliest_cr_line'].dt.month.astype(str)","799f7dcd":"X_train['earliest_cr_line'] = X_train['earliest_cr_line'].astype(int)\nX_test['earliest_cr_line'] = X_test['earliest_cr_line'].astype(int)","563f94f6":"X_train['relative_earliest_cr_line'] = X_train['issue_d'] - X_train['earliest_cr_line']\nX_test['relative_earliest_cr_line'] = X_test['issue_d'] - X_test['earliest_cr_line']","3f94cd86":"lst = [X_train]\nX_train['emp_length_int'] = np.nan\n\nfor col in lst:\n    col.loc[col['emp_length'] == '10+ years', \"emp_length_int\"] = 10\n    col.loc[col['emp_length'] == '9 years', \"emp_length_int\"] = 9\n    col.loc[col['emp_length'] == '8 years', \"emp_length_int\"] = 8\n    col.loc[col['emp_length'] == '7 years', \"emp_length_int\"] = 7\n    col.loc[col['emp_length'] == '6 years', \"emp_length_int\"] = 6\n    col.loc[col['emp_length'] == '5 years', \"emp_length_int\"] = 5\n    col.loc[col['emp_length'] == '4 years', \"emp_length_int\"] = 4\n    col.loc[col['emp_length'] == '3 years', \"emp_length_int\"] = 3\n    col.loc[col['emp_length'] == '2 years', \"emp_length_int\"] = 2\n    col.loc[col['emp_length'] == '1 year', \"emp_length_int\"] = 1\n    col.loc[col['emp_length'] == '< 1 year', \"emp_length_int\"] = 0.5\n    col.loc[col['emp_length'] == 'n\/a', \"emp_length_int\"] = 0\n    \nlst_test = [X_test]\nX_test['emp_length_int'] = np.nan\n\nfor col in lst_test:\n    col.loc[col['emp_length'] == '10+ years', \"emp_length_int\"] = 10\n    col.loc[col['emp_length'] == '9 years', \"emp_length_int\"] = 9\n    col.loc[col['emp_length'] == '8 years', \"emp_length_int\"] = 8\n    col.loc[col['emp_length'] == '7 years', \"emp_length_int\"] = 7\n    col.loc[col['emp_length'] == '6 years', \"emp_length_int\"] = 6\n    col.loc[col['emp_length'] == '5 years', \"emp_length_int\"] = 5\n    col.loc[col['emp_length'] == '4 years', \"emp_length_int\"] = 4\n    col.loc[col['emp_length'] == '3 years', \"emp_length_int\"] = 3\n    col.loc[col['emp_length'] == '2 years', \"emp_length_int\"] = 2\n    col.loc[col['emp_length'] == '1 year', \"emp_length_int\"] = 1\n    col.loc[col['emp_length'] == '< 1 year', \"emp_length_int\"] = 0.5\n    col.loc[col['emp_length'] == 'n\/a', \"emp_length_int\"] = 0","8eab669f":"cats = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, X_train[col].nunique())","c3f66cb3":"col = 'purpose'\n\nencoder = OneHotEncoder()\nenc_train = encoder.fit_transform(pd.DataFrame(X_train[col].values))\nenc_test = encoder.transform(pd.DataFrame(X_test[col].values))","d1983576":"X_train.fillna(X_train.median(), inplace=True)\nX_test.fillna(X_train.median(), inplace=True)","d8f9a7dc":"oelist = cats\nfor c in oelist:\n    oe=OrdinalEncoder()\n    oe.fit(pd.DataFrame(X_train[c]))\n    X_train[c]=oe.fit_transform(pd.DataFrame(X_train[c]))\n    X_test[c]=oe.transform(pd.DataFrame(X_test[c]))","4f493fa5":"X_temp = pd.concat([X_train, y_train], axis=1)\n\nsummary = X_temp.groupby(['emp_title'])['loan_condition'].mean()\nX_test['emp_title'] = X_test['emp_title'].map(summary) \n\n\n    # X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n    summary = X_train_.groupby(['emp_title'])['loan_condition'].mean()\n    enc_train.iloc[val_ix] = X_val['emp_title'].map(summary)\n        \n    X_train['emp_title']  = enc_train","a09a4cc1":"X_train.fillna(X_train.mean(), axis=0, inplace=True)\nX_test.fillna(X_train.mean(), axis=0, inplace=True)","1b2f618e":"X_train.shape, y_train.shape, X_test.shape","62f4574a":"X_train.info()","c89c5473":"X_train.head()","06964d01":"X_temp = X_train\ny_target = y_train\nX_train_bin = X_temp\n\nX_test_bin = X_test","d2f2c004":"X_train_, X_val, y_train_, y_val= train_test_split(X_train_bin, y_target, test_size=0.05, random_state=71)","ebee3936":"clf = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.9,\n                                importance_type='split', learning_rate=0.05, max_depth=-1,\n                                min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                                n_estimators=9999, n_jobs=-1, num_leaves=15, objective=None,\n                                random_state=71, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n                                subsample=1.0, subsample_for_bin=200000, subsample_freq=0)","238361f0":"%%time\nclf.fit(X_train_, y_train_, early_stopping_rounds=20, eval_metric='auc', eval_set=[(X_val, y_val)])","54ffd408":"clf.booster_.feature_importance(importance_type='gain')","2264b5d3":"imp = DataFrame(clf.booster_.feature_importance(importance_type='gain'), index = X_train_bin.columns, columns=['importance']).sort_values(['importance'], ascending=False)\nimp","25b3adc3":"imp.shape","d6598254":"use_col = imp.index[:55] # \u5909\u6570\u91cd\u8981\u5ea6\u3067\u7279\u5fb4\u91cf\u3092\u7d5e\u308a\u8fbc\u3080","75e093a8":"%%time\nclf.fit(X_train_[use_col], y_train_, early_stopping_rounds=20, eval_metric='auc', eval_set=[(X_val[use_col], y_val)])","0abe4c88":"fig, ax = plt.subplots(figsize=(5, 8))\nlgb.plot_importance(clf, max_num_features=50, ax=ax, importance_type='gain')","851404de":"scores = []\n\ny_pred_test = np.zeros(len(X_test[use_col])) # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u683c\u7d0d\u7528array\nskf = StratifiedKFold(n_splits=10, random_state=2020, shuffle=True)\n\nfor i, (train_ix, test_ix) in enumerate(tqdm(skf.split(X_train[use_col], y_train))):\n    X_train_, y_train_ = X_train[use_col].iloc[train_ix], y_train.iloc[train_ix]\n    X_val, y_val = X_train[use_col].iloc[test_ix], y_train.iloc[test_ix ]\n\n    clf = LGBMClassifier(max_depth=50, n_estimators=500, num_leaves=100, learning_rate=0.1, silent=False)\n\n    clf.fit(X_train_[use_col], y_train_, early_stopping_rounds=200, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred = clf.predict_proba(X_val)[:,1]\n    scores = np.append(scores, roc_auc_score(y_val, y_pred))\n    y_pred_test += clf.predict_proba(X_test[use_col])[:,1] # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u3092\u8db3\u3057\u3066\u3044\u304f\n    scores = np.array(scores)\n\n    print('Ave. CV score is %f' % scores.mean())","36bf067e":"skf = StratifiedKFold(n_splits=10, random_state=71, shuffle=True)\n\nfor i, (train_ix, test_ix) in enumerate(tqdm(skf.split(X_train[use_col], y_train))):\n    X_train_, y_train_ = X_train[use_col].iloc[train_ix], y_train.iloc[train_ix]\n    X_val, y_val = X_train[use_col].iloc[test_ix], y_train.iloc[test_ix ]\n\n    clf = LGBMClassifier(max_depth=50, n_estimators=500, num_leaves=100, learning_rate=0.1, silent=False)\n\n    clf.fit(X_train_[use_col], y_train_, early_stopping_rounds=200, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred = clf.predict_proba(X_val)[:,1]\n    scores = np.append(scores, roc_auc_score(y_val, y_pred))\n#    scores.append(roc_auc_score(y_val, y_pred))\n    y_pred_test += clf.predict_proba(X_test[use_col])[:,1] # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u3092\u8db3\u3057\u3066\u3044\u304f\n    scores = np.array(scores)\n\n    print('Ave. CV score is %f' % scores.mean())","109c1ceb":"skf = StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\n\nfor i, (train_ix, test_ix) in enumerate(tqdm(skf.split(X_train[use_col], y_train))):\n    X_train_, y_train_ = X_train[use_col].iloc[train_ix], y_train.iloc[train_ix]\n    X_val, y_val = X_train[use_col].iloc[test_ix], y_train.iloc[test_ix ]\n\n    clf = LGBMClassifier(max_depth=50, n_estimators=500, num_leaves=100, learning_rate=0.1, silent=False)\n\n    clf.fit(X_train_[use_col], y_train_, early_stopping_rounds=200, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred = clf.predict_proba(X_val)[:,1]\n    scores = np.append(scores, roc_auc_score(y_val, y_pred))\n#    scores.append(roc_auc_score(y_val, y_pred))\n    y_pred_test += clf.predict_proba(X_test[use_col])[:,1] # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u3092\u8db3\u3057\u3066\u3044\u304f\n    scores = np.array(scores)\n\n    print('Ave. CV score is %f' % scores.mean())","b0604243":"skf = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)\n\nfor i, (train_ix, test_ix) in enumerate(tqdm(skf.split(X_train[use_col], y_train))):\n    X_train_, y_train_ = X_train[use_col].iloc[train_ix], y_train.iloc[train_ix]\n    X_val, y_val = X_train[use_col].iloc[test_ix], y_train.iloc[test_ix ]\n\n    clf = LGBMClassifier(max_depth=50, n_estimators=500, num_leaves=100, learning_rate=0.1, silent=False)\n\n    clf.fit(X_train_[use_col], y_train_, early_stopping_rounds=200, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred = clf.predict_proba(X_val)[:,1]\n    scores = np.append(scores, roc_auc_score(y_val, y_pred))\n#    scores.append(roc_auc_score(y_val, y_pred))\n    y_pred_test += clf.predict_proba(X_test[use_col])[:,1] # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u3092\u8db3\u3057\u3066\u3044\u304f\n    scores = np.array(scores)\n\n    print('Ave. CV score is %f' % scores.mean())","13b03262":"skf = StratifiedKFold(n_splits=10, random_state=0, shuffle=True)\n\nfor i, (train_ix, test_ix) in enumerate(tqdm(skf.split(X_train[use_col], y_train))):\n    X_train_, y_train_ = X_train[use_col].iloc[train_ix], y_train.iloc[train_ix]\n    X_val, y_val = X_train[use_col].iloc[test_ix], y_train.iloc[test_ix ]\n\n    clf = LGBMClassifier(max_depth=50, n_estimators=500, num_leaves=100, learning_rate=0.1, silent=False)\n\n    clf.fit(X_train_[use_col], y_train_, early_stopping_rounds=200, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred = clf.predict_proba(X_val)[:,1]\n    scores = np.append(scores, roc_auc_score(y_val, y_pred))\n#    scores.append(roc_auc_score(y_val, y_pred))\n    y_pred_test += clf.predict_proba(X_test[use_col])[:,1] # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u3092\u8db3\u3057\u3066\u3044\u304f\n    scores = np.array(scores)\n\n    print('Ave. CV score is %f' % scores.mean())","45fe7fff":"y_pred_test \/= 50 # \u6700\u5f8c\u306bfold\u6570\u3067\u5272\u308b","aafc5e92":"y_pred_test","651fb191":"# sample submission\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u306e\u5f8c\u3001\u4fdd\u5b58\u3059\u308b\nsubmission = pd.read_csv('..\/input\/homework-for-students4plus\/sample_submission.csv', index_col=0)\n\nsubmission.loan_condition = y_pred_test\nsubmission.to_csv('submission.csv')","2d07ef52":"# **\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u6307\u5b9a\u3068\u5206\u5272**","8df64308":"# **\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8**","d2672b79":"# **CV Averaging\/kFold Averaging**","a4c06fa1":"# **\u7279\u5fb4\u91cf\u306e\u8ffd\u52a0**","8ade7e73":"# *Object\u9805\u76ee\u306e\u6d17\u3044\u51fa\u3057*","4c1c42f2":"# **\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f**","5767eaaa":"# **Encoder**","cd1015a2":"# **Null\u5024\u306e\u88dc\u5b8c**","a93e1957":"# **importance\u306e\u78ba\u8a8d**"}}