{"cell_type":{"d434d3bc":"code","63f162c6":"code","58ddabda":"code","e15000c3":"code","af9393c0":"code","b783ab1c":"code","6d5c1db9":"code","1348d893":"code","263c93af":"code","f83f2d6f":"code","62e6f1cc":"code","bc157ec3":"code","e36d11d9":"code","2e32f24f":"code","ca821499":"code","130b7a63":"code","13070957":"code","33dc9541":"code","ad6258a8":"code","aae7ee1a":"code","4d501537":"code","47481a1d":"code","9eeb778c":"code","2212d3ba":"code","af1f331c":"code","e0961fd9":"markdown","a5011b13":"markdown","5492e775":"markdown","0a8ba70d":"markdown","58ab4946":"markdown","84b9204e":"markdown","561e5354":"markdown","99e8309a":"markdown","21a0bc77":"markdown","f56aaf90":"markdown"},"source":{"d434d3bc":"import os\nimport numpy as np\nimport pandas as pd\nimport math \nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport category_encoders as ce\nimport torch\nimport scipy as sp\nimport torch.nn as nn\n\nfrom logging import getLogger, INFO, StreamHandler, FileHandler, Formatter\nfrom functools import partial\nfrom sklearn.model_selection import StratifiedKFold, GroupKFold, KFold\nfrom sklearn.metrics import mean_squared_error\nfrom tqdm import tqdm\nfrom torch.autograd import Variable\n\nimport warnings\nwarnings.filterwarnings('ignore')","63f162c6":"def get_logger(filename='log'):\n    logger = getLogger(__name__)\n    logger.setLevel(INFO)\n    handler1 = StreamHandler()\n    handler1.setFormatter(Formatter(\"%(message)s\"))\n    handler2 = FileHandler(filename=f\"{filename}.log\")\n    handler2.setFormatter(Formatter(\"%(message)s\"))\n    logger.addHandler(handler1)\n    logger.addHandler(handler2)\n    return logger\n\nlogger = get_logger()\n\ndef seed_everything(seed=777):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True","58ddabda":"OUTPUT_DICT = '.\/'\n\nID = 'Patient_Week'\nTARGET = 'FVC'\nSEED = 42\nseed_everything(seed=SEED)\n\nN_FOLD = 4","e15000c3":"train = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/train.csv')\ntrain.head(10)","af9393c0":"# add a new `Patient_Week` column\ntrain[ID] = train['Patient'].astype(str) + '_' + train['Weeks'].astype(str)\nprint(train.shape)\ntrain.head()","b783ab1c":"# construct train input\noutput = pd.DataFrame()\ngb = train.groupby('Patient')\ntk0 = tqdm(gb, total=len(gb))\nfor _, usr_df in tk0:\n    usr_output = pd.DataFrame()\n    for week, tmp in usr_df.groupby('Weeks'):\n        rename_cols = {\n            'Weeks': 'base_Week', 'FVC': 'base_FVC', \n            'Percent': 'base_Percent', 'Age': 'base_Age'\n        }\n        tmp = tmp.drop(columns='Patient_Week').rename(columns=rename_cols)\n        drop_cols = [\n            'Age', 'Sex', 'SmokingStatus', 'Percent'\n        ]\n        _usr_output = usr_df.drop(columns=drop_cols).rename(columns={\n            'Weeks': 'predict_Week'\n        }).merge(tmp, on='Patient')\n        _usr_output['Week_passed'] = _usr_output['predict_Week'] - _usr_output['base_Week']\n        usr_output = pd.concat([usr_output, _usr_output])\n    output = pd.concat([output, usr_output])\n    \ntrain = output[output['Week_passed']!=0].reset_index(drop=True)\nprint(train.shape)\ntrain.head()","6d5c1db9":"# construct test output\ntest = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/test.csv')\\\n        .rename(columns={'Weeks': 'base_Week', 'FVC': 'base_FVC', 'Percent': 'base_Percent', 'Age': 'base_Age'})\ntest.head(10)","1348d893":"submission = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/sample_submission.csv')\nsubmission['Patient'] = submission['Patient_Week'].apply(\n    lambda x: x.split('_')[0])\nsubmission['predict_Week'] = submission['Patient_Week'].apply(\n    lambda x: x.split('_')[1]).astype(int)\ntest = submission.drop(columns=['FVC', 'Confidence']).merge(test, on='Patient')\ntest['Week_passed'] = test['predict_Week'] - test['base_Week']\nprint(test.shape)\ntest.head()","263c93af":"submission = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/sample_submission.csv')\nprint(submission.shape)\nsubmission.head()","f83f2d6f":"folds = train[[ID, 'Patient', TARGET]].copy()\n\nFold = GroupKFold(n_splits=N_FOLD)\ngroups = folds['Patient'].values\nfor n, (train_index, val_index) in enumerate(Fold.split(folds, folds[TARGET], groups)):\n    folds.loc[val_index, 'fold'] = int(n)\nfolds['fold'] = folds['fold'].astype(int)\nprint(folds.shape)\nfolds.head()","62e6f1cc":"def return_data(train_df, test_df, features, target, folds, fold_num):\n    trn_idx = folds[folds.fold!=fold_num].index\n    val_idx = folds[folds.fold==fold_num].index\n    \n    y_train = target.iloc[trn_idx].values\n    x_train = train_df.iloc[trn_idx][features].values\n    y_val = target.iloc[val_idx].values\n    x_val = train_df.iloc[val_idx][features].values\n    \n    oof = np.zeros(len(train_df))\n    predictions = np.zeros(len(test_df))\n    \n    x_train = torch.tensor(x_train, dtype=torch.float)\n    y_train = torch.tensor(y_train, dtype=torch.float)\n    x_val = torch.tensor(x_val, dtype=torch.float)\n    y_val = torch.tensor(y_val, dtype=torch.float)\n    \n    x_train = x_train.t()\n    y_train = y_train.t()\n    x_val = x_val.t()\n    y_val = y_val.t()\n    \n    return x_train, y_train, x_val, y_val, val_idx\n\ndef run_single_linear_nn(train_df, test_df, folds, features, \n                     target, fold_num):\n    x_train, y_train, x_val, y_val, val_idx = return_data(train, test, features, \n                                                 target, folds, fold_num)\n    \n    print(x_train.shape, y_train.shape)\n    \n    \n    n = 6 # num features\n\n    A = torch.randn((1, n), requires_grad=True)\n    b = torch.randn(1, requires_grad=True)\n\n    def model(x_input):\n        return A.mm(x_input) + b\n\n    def loss(y_predicted, y_target):\n        return ((y_predicted - y_target)**2).sum()\n    optimizer = torch.optim.Adam([A, b], lr=0.1)\n\n    for t in range(20000): # run each CV for 20000 epochs\n        # set the gradients to 0\n        optimizer.zero_grad()\n        # compute predictions\n        y_predicted = model(x_train)\n        # compute MSE loss\n        current_loss = loss(y_predicted, y_train)\n        # backprop\n        current_loss.backward()\n        # update optimizer\n        optimizer.step()\n#         print(y_predicted)\n    #     print(f\"t = {t}, loss = {current_loss}, A = {A.detach().numpy()}, b = {b.item()}\")\n    \n    oof = np.zeros(len(train_df))\n    predictions = np.zeros(len(test_df))\n    test_df = test_df[features].values\n    test_df = torch.tensor(test_df, dtype=torch.float)\n    test_df = test_df.t()\n    \n    \n    with torch.no_grad():\n        oof[val_idx] = model(x_val)\n        preds = model(test_df)\n        preds = preds.t().reshape(-1, 1)\n        preds = torch.flatten(preds)\n        preds = preds.numpy()\n#         print(preds.size())\n        predictions += preds\n    \n    logger.info(f\"fold {fold_num} score: {np.sqrt(mean_squared_error(target[val_idx], oof[val_idx])):<8.5f}\")\n    \n    return oof, predictions\n\ndef run_kfold_linear_nn(train, test, folds, features, target, n_fold=5):\n    oof = np.zeros(len(train))\n    predictions = np.zeros(len(test))\n    feature_importance_df = pd.DataFrame()\n    \n    for fold_ in range(n_fold):\n        logger.info(f\"fold {fold_}\")\n        _oof, _predictions = run_single_linear_nn(train, test, folds, features, target,\n                                              fold_num=fold_\n        )\n        oof += _oof\n        predictions += _predictions \/ n_fold\n        \n    logger.info(f\"CV score: {np.sqrt(mean_squared_error(target, oof)):<8.5f}\")\n        \n    return oof, predictions","bc157ec3":"target = train[TARGET]\ntest[TARGET] = np.nan\n\n# features\ncat_features = ['Sex', 'SmokingStatus']\nnum_features = [c for c in test.columns if (test.dtypes[c] != 'object')\n                & (c not in cat_features)]\nfeatures = num_features + cat_features\ndrop_features = [ID, TARGET, 'predict_Week', 'base_Week']\nfeatures = [c for c in features if c not in drop_features]\n\nif cat_features:\n    ce_oe = ce.OrdinalEncoder(cols=cat_features, handle_unknown='impute')\n    ce_oe.fit(train)\n    train = ce_oe.transform(train)\n    test = ce_oe.transform(test)\n    \n\noof, predictions = run_kfold_linear_nn(train, test, folds, features, \n                                   target, n_fold=N_FOLD)","e36d11d9":"train['FVC_pred'] = oof\ntest['FVC_pred'] = predictions","2e32f24f":"# baseline score\ntrain['Confidence'] = 100\ntrain['sigma_clipped'] = train['Confidence'].apply(\n    lambda x: max(x, 70))\ntrain['diff'] = abs(train['FVC'] - train['FVC_pred'])\ntrain['delta'] = train['diff'].apply(lambda x: min(x, 1000))\ntrain['score'] = -math.sqrt(2) * train['delta']\/train['sigma_clipped'] - \\\nnp.log(math.sqrt(2)*train['sigma_clipped'])\nscore = train['score'].mean()\nprint(score)","ca821499":"train.head(10)","130b7a63":"def loss_func(weight, row):\n    confidence = weight\n    sigma_clipped = max(confidence, 70)\n    diff = abs(row['FVC'] - row['FVC_pred'])\n    delta = min(diff, 1000)\n    score = -math.sqrt(2)*delta\/sigma_clipped - np.log(math.sqrt(2)*sigma_clipped)\n    return -score\n\nresults = []\ntk0 = tqdm(train.iterrows(), total=len(train))\nfor _, row in tk0:\n    loss_partial = partial(loss_func, row=row)\n    weight = [100]\n    result = sp.optimize.minimize(loss_partial, weight, method='SLSQP')\n    x = result['x']\n    results.append(x[0])","13070957":"# optimized score\ntrain['Confidence'] = results\ntrain['sigma_clipped'] = train['Confidence'].apply(lambda x: max(x, 70))\ntrain['diff'] = abs(train['FVC'] - train['FVC_pred'])\ntrain['delta'] = train['diff'].apply(lambda x: min(x, 1000))\ntrain['score'] = -math.sqrt(2)*train['delta']\/train['sigma_clipped'] - np.log(math.sqrt(2)*train['sigma_clipped'])\nscore = train['score'].mean()\nprint(score)","33dc9541":"train.head(10)","ad6258a8":"TARGET = 'Confidence'\n\ntarget = train[TARGET]\ntest[TARGET] = np.nan\n\n# features\ncat_features = ['Sex', 'SmokingStatus']\nnum_features = [c for c in test.columns if (test.dtypes[c] != 'object') \n                & (c not in cat_features)]\nfeatures = num_features + cat_features\ndrop_features = [ID, TARGET, 'predict_Week', 'base_Week', 'FVC', 'FVC_pred']\nfeatures  = [c for c in features if c not in drop_features]\n\noof, predictions = run_kfold_linear_nn(train, test, folds, features, \n                                   target, n_fold=N_FOLD)","aae7ee1a":"train['Confidence'] = oof\ntrain['sigma_clipped'] = train['Confidence'].apply(lambda x: max(x, 70))\ntrain['diff'] = abs(train['FVC'] - train['FVC_pred'])\ntrain['delta'] = train['diff'].apply(lambda x: min(x, 1000))\ntrain['score'] = -math.sqrt(2)*train['delta']\/train['sigma_clipped'] - \\\nnp.log(math.sqrt(2)*train['sigma_clipped'])\nscore = train['score'].mean()\nprint(score)","4d501537":"def lb_metric(train):\n    train['sigma_clipped'] = train['Confidence'].apply(lambda x: max(x, 70))\n    train['diff'] = abs(train['FVC'] - train['FVC_pred'])\n    train['delta'] = train['diff'].apply(lambda x: min(x, 1000))\n    train['score'] = -math.sqrt(2)*train['delta']\/train['sigma_clipped'] - \\\n    np.log(math.sqrt(2)*train['sigma_clipped'])\n    score = train['score'].mean()\n    return score","47481a1d":"score = lb_metric(train)\nlogger.info(f\"Local Score: {score}\")","9eeb778c":"test['Confidence'] = predictions","2212d3ba":"submission.head()","af1f331c":"sub = submission.drop(columns=['FVC', 'Confidence']).merge(test[[\n    'Patient_Week', 'FVC_pred', 'Confidence']], on='Patient_Week')\nsub.columns = submission.columns\nsub.to_csv('submission.csv', index=False)\nsub.head()","e0961fd9":"## <u>Introduction<\/u>\n* Data preprocessing based on this kernel => https:\/\/www.kaggle.com\/yasufuminakama\/osic-ridge-baseline\/output.","a5011b13":"## <u>Data Loading<\/u>","5492e775":"## <u>Utils<\/u>","0a8ba70d":"## <u>Model<\/u>\n","58ab4946":"## <u>Submission<\/u>","84b9204e":"## <u>Prepare Folds<\/u>","561e5354":"## <u>Predict Confidence<\/u>","99e8309a":"## <u>Make Confidence Labels<\/u>","21a0bc77":"## <u>Config<\/u>","f56aaf90":"## <u>Predict FVC<\/u>"}}