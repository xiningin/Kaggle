{"cell_type":{"b4320d01":"code","5298dde2":"code","ab46a18b":"code","e6957222":"code","f7d8322c":"code","bb9ef661":"code","3d4a6bfc":"code","7cc4b1b9":"code","53ed94a4":"code","03b53645":"code","5f389c23":"code","fa7292a0":"code","8a0d13cb":"code","3ce61efe":"code","b84ca298":"code","6be57db3":"code","f7682cda":"code","e07ff7be":"code","36740e94":"code","b127ce12":"code","2893424c":"code","5de740fb":"code","2a50dd81":"code","f951bed6":"code","3dc72189":"code","8b22e48f":"code","cfbe512d":"code","dbdb5bfe":"markdown","52459a9a":"markdown","e6c65f20":"markdown","cc9333e3":"markdown"},"source":{"b4320d01":"import os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport re\nimport cv2\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\n\nimport pydicom\nimport plotly.graph_objs as go\nimport glob as glob\nimport imageio\n\n# Segmentation\nfrom skimage import morphology\nfrom scipy import ndimage\nfrom skimage import measure\nfrom skimage.transform import resize\nfrom sklearn.cluster import KMeans\nfrom plotly.tools import FigureFactory as FF\n\nimport warnings\nwarnings.simplefilter(action='ignore')\nsns.set(style=\"white\")\n\n%matplotlib inline\n","5298dde2":"train = pd.read_csv(\"\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/test.csv\")\nsample = pd.read_csv(\"\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/sample_submission.csv\")","ab46a18b":"train.head()","e6957222":"train.tail()","f7d8322c":"train.info()","bb9ef661":"train.isnull().sum()","3d4a6bfc":"\nprint(f\"No of patients are {train['Patient'].count()} with {train['Patient'].value_counts().shape[0]} unique patient ID\")","7cc4b1b9":"train.shape","53ed94a4":"columns = list(train.columns)\nprint(f'The colums are {columns}')","03b53645":"f, ax = plt.subplots(figsize=(7, 5))\nsns.despine(f)\nsns.distplot(train['Age'])\nplt.title(\"PATIENT AGE DISTRIBUTION\")","5f389c23":"plt.figure(figsize=(8, 4))\nsns.countplot(x='SmokingStatus', data=train)\nplt.title(\"Smoking Status Patient\")\nplt.show()","fa7292a0":"sns.scatterplot(x='FVC', y='Percent', hue='Sex', data=train, palette='PuOr')\nplt.title('Correlation between FVC and Percent')\n","8a0d13cb":"# FVC vs AGE\nsns.scatterplot(x='Age', y='FVC', hue='SmokingStatus', data=train, palette='Set1')\nplt.title('Correlation between FVC and Age')","3ce61efe":"plt.title('Correlation between FVC and Age')\nsns.kdeplot(train['FVC'], train['Age'], cmap=\"Blues\", shade=True, shade_lowest=True )\n","b84ca298":"heat_map = sns.heatmap(train.corr(method='pearson'), annot=True, fmt='.2f', linewidths=2)\nheat_map.set_xticklabels(heat_map.get_xticklabels(), rotation=45);","6be57db3":"#Image pacient on Data\n\ndir = \"..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00007637202177411956430\/20.dcm\"\ndata = pydicom.dcmread(dir)\n\nprint(\"Patient id.......:\", data.PatientID, \"\\n\" +\n      \"Modality.........:\", data.Modality, \"\\n\" +\n      \"Rows.............:\", data.Rows, \"\\n\" +\n      \"Columns..........:\", data.Columns)\n\nplt.figure(figsize = (5, 5))\nplt.imshow(data.pixel_array, cmap=\"Blues_r\")\nplt.axis('off');","f7682cda":"dir = \"..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00007637202177411956430\"\ndata = []\n\n\nfiles = []\nfor dcm in list(os.listdir(dir)):\n    files.append(dcm) \nfiles.sort(key=lambda f: int(re.sub('\\D', '', f)))\n\n\nfor dcm in files:\n    path = dir + \"\/\" + dcm\n    data.append(pydicom.dcmread(path))\n\n\nfig=plt.figure(figsize=(18, 6))\ncolumns = 10\nrows = 3\n\nfor i in range(1, columns*rows +1):\n    img = data[i-1].pixel_array\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(img, cmap=\"Blues_r\")\n    plt.title(i, fontsize = 12)\n    plt.axis('off');\n","e07ff7be":"\ndir = \"..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00007637202177411956430\/18.dcm\"\n\ndata = pydicom.dcmread(dir)\nprint(data)\nimage = data.pixel_array","36740e94":"def transform_to_hu(data, image):\n    intercept = data.RescaleIntercept\n    slope = data.RescaleSlope\n    hu_image = image * slope + intercept\n\n    return hu_image","b127ce12":"def window_image(image, window_center, window_width):\n    img_min = window_center - window_width \/\/ 2\n    img_max = window_center + window_width \/\/ 2\n    window_image = image.copy()\n    window_image[window_image < img_min] = img_min\n    window_image[window_image > img_max] = img_max\n    \n    return window_image","2893424c":"dir = \"..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00007637202177411956430\/16.dcm\"\ndata = pydicom.dcmread(dir)\n\ndef remove_noise(dir, display=False):\n    data = pydicom.dcmread(dir)\n    image = data.pixel_array\n    \n    hu_image = transform_to_hu(data, image)\n    brain_image = window_image(hu_image, 40, 80)\n\n    # morphology.dilation creates a segmentation of the image\n    # If one pixel is between the origin and the edge of a square of size\n    # 5x5, the pixel belongs to the same class\n    \n    # We can instead use a circule using: morphology.disk(2)\n    # In this case the pixel belongs to the same class if it's between the origin\n    # and the radius\n    \n    segmentation = morphology.dilation(brain_image, np.ones((5, 5)))\n    labels, label_nb = ndimage.label(segmentation)\n    \n    label_count = np.bincount(labels.ravel().astype(np.int))\n    # The size of label_count is the number of classes\/segmentations found\n    \n    # We don't use the first class since it's the background\n    label_count[0] = 0\n    \n    # We create a mask with the class with more pixels\n    # In this case should be the brain\n    mask = labels == label_count.argmax()\n    \n    # Improve the brain mask\n    mask = morphology.dilation(mask, np.ones((5, 5)))\n    mask = ndimage.morphology.binary_fill_holes(mask)\n    mask = morphology.dilation(mask, np.ones((3, 3)))\n    \n    # Since the the pixels in the mask are zero's and one's\n    # We can multiple the original image to only keep the brain region\n    masked_image = mask * brain_image\n\n    if display:\n        plt.figure(figsize=(15, 2.5))\n        plt.subplot(141)\n        plt.imshow(brain_image)\n        plt.title('Original Image')\n        plt.axis('off')\n        \n        plt.subplot(142)\n        plt.imshow(mask)\n        plt.title('Mask')\n        plt.axis('off')\n\n        plt.subplot(143)\n        plt.imshow(masked_image)\n        plt.title('Final Image')\n        plt.axis('off')\n    \n    return masked_image","5de740fb":"_ = remove_noise(dir, display=True)","2a50dd81":"dir = \"..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00007637202177411956430\/30.dcm\"\ndata = pydicom.dcmread(dir)\n\ndef crop_image(image, display=False):\n    # Create a mask with the background pixels\n    mask = image == 0\n\n    # Find the brain area\n    coords = np.array(np.nonzero(~mask))\n    top_left = np.min(coords, axis=1)\n    bottom_right = np.max(coords, axis=1)\n    \n    # Remove the background\n    croped_image = image[top_left[0]:bottom_right[0],\n                top_left[1]:bottom_right[1]]\n    \n    return croped_image\n","f951bed6":"final = remove_noise(dir)","3dc72189":"plt.imshow(final)","8b22e48f":"final = crop_image(final)","cfbe512d":"plt.imshow(final)","dbdb5bfe":"![OSIC Pulmonary Fibrosis](https:\/\/www.osicild.org\/uploads\/1\/2\/2\/7\/122798879\/editor\/kaggle-v01-clipped.png?1569346633)\n> Imagine one day, your breathing became consistently labored and shallow. Months later you were finally diagnosed with pulmonary fibrosis, a disorder with no known cause and no known cure, created by scarring of the lungs. If that happened to you, you would want to know your prognosis. That\u2019s where a troubling disease becomes frightening for the patient: outcomes can range from long-term stability to rapid deterioration, but doctors aren\u2019t easily able to tell where an individual may fall on that spectrum. Your help, and data science, may be able to aid in this prediction, which would dramatically help both patients and clinicians.\n\n> Current methods make fibrotic lung diseases difficult to treat, even with access to a chest CT scan. In addition, the wide range of varied prognoses create issues organizing clinical trials. Finally, patients suffer extreme anxiety\u2014in addition to fibrosis-related symptoms\u2014from the disease\u2019s opaque path of progression.\n\n> Open Source Imaging Consortium (OSIC) is a not-for-profit, co-operative effort between academia, industry and philanthropy. The group enables rapid advances in the fight against Idiopathic Pulmonary Fibrosis (IPF), fibrosing interstitial lung diseases (ILDs), and other respiratory diseases, including emphysematous conditions. Its mission is to bring together radiologists, clinicians and computational scientists from around the world to improve imaging-based treatments.\n\n> In this competition, you\u2019ll predict a patient\u2019s severity of decline in lung function based on a CT scan of their lungs. You\u2019ll determine lung function based on output from a spirometer, which measures the volume of air inhaled and exhaled. The challenge is to use machine learning techniques to make a prediction with the image, metadata, and baseline FVC as input.\n\n> If successful, patients and their families would better understand their prognosis when they are first diagnosed with this incurable lung disease. Improved severity detection would also positively impact treatment trial design and accelerate the clinical development of novel treatments.\n\n","52459a9a":"# EXAMPLES OF PATIENT LUNGS","e6c65f20":"# EXAMPLES OF PATIENT LUNGS","cc9333e3":"# **Create Mask of CT Scans Patient**\n**References** [Medical Images in Python](https:\/\/vincentblog.xyz\/posts\/medical-images-in-python-computed-tomography)"}}