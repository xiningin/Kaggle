{"cell_type":{"9340aef5":"code","768885d6":"code","9e03f326":"code","3f0ed4e8":"code","c34c6dc2":"code","9c92b9f9":"code","748b6c69":"code","53f76b61":"code","9965a58c":"code","00bedb5f":"code","82a14a70":"code","850ace80":"code","9667d6e2":"markdown","129300d8":"markdown","b103ac65":"markdown","11a46ec1":"markdown","d402e9e0":"markdown","4901581c":"markdown","8f93243c":"markdown","82c2c74b":"markdown"},"source":{"9340aef5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","768885d6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg \nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nsns.set(style='white', context='notebook', palette='deep')\n","9e03f326":"#Load the data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","3f0ed4e8":"Y_train = train[\"label\"]\n#Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis=1)\ndel train\ng = sns.countplot(Y_train)\nY_train.value_counts()","c34c6dc2":"X_train.isnull().any().describe()","9c92b9f9":"test.isnull().any().describe()","748b6c69":"X_train = X_train\/255.0\ntest = test\/255.0","53f76b61":"X_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","9965a58c":"Y_train = to_categorical(Y_train, num_classes = 10)","00bedb5f":"random_seed = 2\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=random_seed)","82a14a70":"g = plt.imshow(X_train[0][:,:,0])","850ace80":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5), padding = 'Same',\n                activation = 'relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5), padding = 'Same',\n         activation = 'relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'Same',\n                activation = 'relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'Same',\n                activation = 'relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = 'softmax'))","9667d6e2":"**Data Preparation**\n1. Load Data","129300d8":"**3. Normalization**\n\nConverting data from [0...255] value to [0...1]","b103ac65":"**6. Split training and Validation set**","11a46ec1":"Model will be trained on 90% of the data and randomly chosen 10% of the data has been kept aside for testing the model.","d402e9e0":"**4. Reshape**\nReshaping images from 784px to [28,28,1] 3D Matrices\n\nHere, if RGB images would have been present then we would have reshaped into [28,28,3] 3D matrices. \n\nExtra dimenion is channel which is used in Keras.","4901581c":"**2. Check for null and missing values**","8f93243c":"**5. Label Encoding **","82c2c74b":"**CNN**\n1.  Convoultional Layer : Here the model learns features from the images, we have to set filters 32 or 64 depending upon the usecase.\n2. Pooling : MaxPool 2D is the next layer which picks the maximal value in a region.\n3. Dropout : Randomly shutting off some nodes of the network to prevent repetition (here regularization) and thus reduces overfiting (mugging up of results xD).\n4. Activation Function : Here we have used \"relu\" [max(0, x)]. It is added to provide non-linearity to the network.\n5. Flatten Layer : It is used to convert final feature map into a one single vector.\n\n"}}