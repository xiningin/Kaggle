{"cell_type":{"2b2162a5":"code","97d5dde4":"code","3b9dd504":"code","351cc556":"code","3b6b124c":"code","a15800b0":"code","922f3ba1":"code","d75dc9bb":"code","ae19049c":"code","c7c3b882":"code","ba29949a":"code","abe190f5":"code","7bc74697":"code","b73b52bd":"code","1ff0a9df":"code","85858270":"code","e1980a6c":"code","f0fafa55":"code","7106d75b":"code","5f7b04e5":"code","84e03f6a":"code","f7c7f41d":"code","c61b8fcc":"code","67cd9212":"code","40ccfd65":"code","312f35cf":"code","38ca4258":"code","b345131c":"code","902a9210":"code","41645465":"code","bbedf0cf":"code","49e42da0":"markdown","10b79105":"markdown","9f314b58":"markdown","2c14036c":"markdown","8d0811a0":"markdown","4784fe2c":"markdown","1fe4ff6c":"markdown","2da78665":"markdown","3e145143":"markdown","3dcef6b5":"markdown","0a842cc4":"markdown","f5b15303":"markdown","22c7e90b":"markdown"},"source":{"2b2162a5":"%%HTML\n<div class='tableauPlaceholder' id='viz1638280736164' style='position: relative'><noscript><a href='#'><img alt='Dashboard 1 ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;fo&#47;forest_fires_brazil&#47;Dashboard1&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='forest_fires_brazil&#47;Dashboard1' \/><param name='tabs' value='no' \/><param name='toolbar' value='yes' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;fo&#47;forest_fires_brazil&#47;Dashboard1&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><param name='language' value='pt-BR' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1638280736164');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.width='1200px';vizElement.style.height='927px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.width='1200px';vizElement.style.height='927px';} else { vizElement.style.width='100%';vizElement.style.height='1177px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","97d5dde4":"#importing libraries\n\n#basics\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport numpy as np\nimport seaborn as sns\nfrom mpl_toolkits.mplot3d import axes3d\nfrom IPython.display import display, HTML\n\n#stats\nimport math, time, random, datetime\nfrom pandas_profiling import ProfileReport\n\n#visualizing missing values\nimport missingno as msno\n\n#processing data\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, label_binarize\n\n#spliting and testing data\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict, StratifiedKFold, GridSearchCV\nfrom sklearn import metrics, model_selection, tree, preprocessing, linear_model\nfrom sklearn.metrics import accuracy_score\n\n#plt params\nparams = {'figure.figsize':(12,6),\n          'font.size':15,\n          'axes.titlesize':'large'}\nplt.rcParams.update(params)\n\n#colors\nPURPLE = '\\033[95m'\nCYAN = '\\033[96m'\nDARKCYAN = '\\033[36m'\nBLUE = '\\033[94m'\nGREEN = '\\033[92m'\nYELLOW = '\\033[93m'\nRED = '\\033[91m'\nBOLD = '\\033[1m'\nUNDERLINE = '\\033[4m'\nEND = '\\033[0m'","3b9dd504":"#reading\ndf = pd.read_csv('..\/input\/forest-fires-in-brazil\/amazon.csv', encoding='latin1')\n\n#grouping data by year, state, month\ndf = df.groupby(by = ['year','state','month']).sum().reset_index()\ndf","351cc556":"#basic info\ndf.info()","3b6b124c":"#the data has no null values\ndf.isna().sum()","a15800b0":"#the gpkg file has multiple layers, we want states\nimport fiona\nfiona.listlayers('..\/input\/geopandasbrazil\/gadm36_BRA.gpkg')","922f3ba1":"#using geopandas\nimport geopandas as gpd\nbr = gpd.read_file('..\/input\/geopandasbrazil\/gadm36_BRA.gpkg',layer='gadm36_BRA_1')\nbr.columns","d75dc9bb":"#column NAME_1 contains the name of all states\nbr.NAME_1","ae19049c":"#visualizing the geometry of each state\nfor i in range(26):\n    print(br.NAME_1[i])\n    display(br.geometry[i])","c7c3b882":"#now seeing the whole map\nbr.plot()","ba29949a":"#comparing tha state nomes on the data set with the state names in the geopandas file\nbr.NAME_1.values,np.unique(df.state)","abe190f5":"#some states listed in the geopandas files don't appear in the dataset\ndf[df.state=='Mato Grosso do Sul']","7bc74697":"#some states have wrong names, we'll have to replace them with right name\ndf_states = sorted(np.unique(df.state))\nstates = br.NAME_1.values\n\n#delete states with no data\nstates = np.delete(states,np.argwhere(states=='Mato Grosso do Sul'))\nstates = np.delete(states,np.argwhere(states=='Paran\u00e1'))\nstates = np.delete(states,np.argwhere(states=='Rio Grande do Norte'))\nstates = np.delete(states,np.argwhere(states=='Rio Grande do Sul'))\n\n#change para\u00edba and par\u00e1 because error messed up order\ndef swap_states(states,df_states,state1,state2):\n    states = np.where(states==state1,'transition',states)\n    states = np.where(states==state2,state1,states)\n    states = np.where(states=='transition',state2,states)\n    return states\n\n#dict to replace state names\nstates = swap_states(states,df_states,'Par\u00e1','Para\u00edba')\nstates = {df_state:state for df_state,state in zip(df_states,states)}\nstates","b73b52bd":"#finally replacing and checking\nfor state in states:\n    df = df.replace(state,states[state])\nnp.unique(df.state)","1ff0a9df":"#creating file to visualize map\n\nbr_fires = df.groupby(by=['state']).sum().reset_index().drop('year',axis=1)\nbr.rename({'NAME_1':'state'},axis=1,inplace=True)\n\nbr_df = br.merge(br_fires,on='state',how='left')\nbr_df.head()","85858270":"# finally, visualizing fires by state\nbr_df.plot(column='number',\n        cmap='Reds',\n        figsize=(16,10),\n        legend=True,\n        edgecolor='black')\n\nplot = plt.title('Fires by state', fontsize=40)\nplt.show()","e1980a6c":"#grouping by state\ndf_state = df.groupby(by='state').sum().reset_index().sort_values('number')\n\n\nplt.title('Fires by state')\nplt.plot(df_state.state,df_state.number)\nplt.xticks(rotation=70)\nplt.show()","f0fafa55":"#grouping by year\ndf_year = df.groupby(by=['year']).sum().reset_index()\nyears = sorted(np.unique(df['year']))\n\nplt.title('Fires by year')\nplt.plot(df_year.year,df_year.number)\nplt.xticks(years,rotation=50)\nplt.show()","7106d75b":"#grouping by month\n\ndf_month = df.groupby(by=['month']).sum()\nmonths = ['Janeiro','Fevereiro','Mar\u00e7o','Abril',\n                                          'Maio','Junho','Julho','Agosto','Setembro',\n                                          'Outubro','Novembro','Dezembro']\n\ndf_month = df_month.reindex(months).reset_index()\ndf_month  = df_month.replace({\n    'Janeiro': 'January',\n    'Fevereiro': 'Feburary',\n    'Mar\u00e7o': 'March',\n    'Abril': 'April',\n    'Maio': 'May',\n    'Junho': 'June',\n    'Julho': 'July',\n    'Agosto': 'August',\n    'Setembro': 'September',\n    'Outubro': 'October',\n    'Novembro': 'November',\n    'Dezembro': 'December'\n})\n\nplt.title('Fires by month')\nplt.plot(df_month.month,df_month.number)\nplt.xticks(rotation=70)\nplt.show()","5f7b04e5":"def linear_regression(x,y):\n    A = np.column_stack((np.ones(x.shape[0]),x))\n    p = np.matmul(np.linalg.pinv(A),y)\n    return p\ndef polynomial_regression(x,y,kx):\n    A = np.column_stack((np.ones(x.shape[0]),*[x**i for i in range(1,kx+1)]))\n    p = np.matmul(np.linalg.pinv(A),y)\n    return p\ndef surface_regression(x,y,z,kx,ky):\n    A = np.column_stack((np.ones(x.shape[0]),*[x**i for i in range(1,kx+1)],*[y**i for i in range(1,ky+1)]))\n    p = np.matmul(np.linalg.pinv(A),z)\n    return p","84e03f6a":"#data grouped by years\nyear_data = df.groupby(by = ['year']).sum().reset_index()\nyear_data","f7c7f41d":"#visualize graph\n\nsns.set_style('whitegrid')\n\n#graphics style\nplt.figure(figsize=(16,9))\nplt.title('Total Fires in Brazil : 1998 - 2017', fontsize = 25)\nplt.xlabel('Year', fontsize = 20)\nplt.ylabel('Number of Fires', fontsize = 20)\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\n\n#plot\nplt.plot(year_data['year'],year_data['number'])","c61b8fcc":"#model\n\np = linear_regression(year_data['year'],year_data['number'])\n\n#graphics style\nplt.figure(figsize=(16,9))\nplt.title('Total Fires in Brazil : 1998 - 2017', fontsize = 25)\nplt.xlabel('Year', fontsize = 20)\nplt.ylabel('Number of Fires', fontsize = 20)\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\n\n#regression plot\nx = np.array(year_data['year'])\ny = np.zeros(year_data.shape[0])\nfor i in range(year_data.shape[0]):\n    y[i] =  p[1] * x[i] + p[0]\n\n#legends\ngrau = mpatches.Patch(color='red',label='polin\u00f4mio of 1st degree')\nm = mpatches.Patch(color='red',label='{} = {}'.format('m',p[1]))\nc = mpatches.Patch(color='red',label='{} = {}'.format('c',p[0]))\nplt.legend(loc='upper left',prop={'size':14},handles=[grau,m,c])\n    \n#plot\nplt.plot(year_data['year'],year_data['number'],'o')\nplt.plot(x,y,color='red')\nplt.show()","67cd9212":"#visualize data\n\ndata = df.groupby(by='month').sum().reset_index()\ndata = data.drop('year',axis=1)\n\n#translate months\ndata = data.replace({\n    'Janeiro': 'January',\n    'Fevereiro': 'February',\n    'Mar\u00e7o': 'March',\n    'Abril': 'April',\n    'Maio': 'May',\n    'Junho': 'June',\n    'Julho': 'July',\n    'Agosto': 'August',\n    'Setembro': 'September',\n    'Outubro': 'October',\n    'Novembro': 'November',\n    'Dezembro': 'December'\n})\n\nmonth_data = data\n\n#loop that gets integer vale of month and puts in the new position\nmonth = {'January':1,'February':2,'March':3,'April':4,'May':5,\n         'June':6,'July':7,'August':8,'September':9,\n         'October':10,'November':11,'December':12}\nnew_index = [None for i in range(12)]\n\nfor i in range(len(data['month'])):\n    new_index[month[data['month'][i]]-1] = i\n\nmonth_data = month_data.iloc[new_index].reset_index(drop='True')\nmonth_data","40ccfd65":"#visualize graphic\n\nplt.figure(figsize=(16,9))\nplt.plot(month_data['month'],month_data['number'])","312f35cf":"\n#model with smaller precision\n\nx = np.arange(12)\np = polynomial_regression(x,month_data['number'],5) \ncurve = np.poly1d(list(reversed(p)))\ny = curve(x)\n\n\n#graphics style\nplt.figure(figsize=(16,9))\nplt.title('Total Fires in Brazil by Month : 1998 - 2017 ', fontsize = 25)\nplt.xlabel('Month', fontsize = 20)\nplt.ylabel('Number of Fires', fontsize = 20)\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\n\n#equation\nequation = ''\nfor i in range(len(curve)):\n    equation = ''.join([equation,str(round(curve[i],2)) + ' x' + str(i) + ' + '])\nequation = ''.join([equation,str(round(curve[-1],2)) + ' x' + str(len(curve))])\nprint('Equation: ' + BOLD + equation + END)\n\n\n#plot\ngrau = mpatches.Patch(color='red',label='polinimial of 5th degree')\nplt.legend(loc='upper left',prop={'size':15},handles=[grau])\nplt.plot(x,month_data['number'],'o')\nplt.plot(x,y,color='red')\nplt.show()","38ca4258":"#model with bigger precision\n\nx = np.arange(12)\np = polynomial_regression(x,month_data['number'],9) \ncurve = np.poly1d(list(reversed(p)))\ny = curve(x)\n\n\n#graphics style\nplt.figure(figsize=(16,9))\nplt.title('Total Fires in Brazil by Month : 1998 - 2017 ', fontsize = 25)\nplt.xlabel('Month', fontsize = 20)\nplt.ylabel('Number of Fires', fontsize = 20)\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\n\n#equation\nequation = ''\nfor i in range(len(curve)):\n    equation = ''.join([equation,str(round(curve[i],2)) + ' x' + str(i) + ' + '])\nequation = ''.join([equation,str(round(curve[-1],2)) + ' x' + str(len(curve))])\nprint('Equation: ' + BOLD + equation + END)\n\n#plot\ngrau = mpatches.Patch(color='red',label='polinomial of 9th degree')\nplt.legend(loc='upper left',prop={'size':15},handles=[grau])\nplt.plot(np.arange(12),month_data['number'],'o')\nplt.plot(x,y,color='red')\nplt.show()","b345131c":"#we convert states and months to nominals and organize data\nmonths_dict = {'Janeiro':0,'Fevereiro':1,'Mar\u00e7o':2,'Abril':3,'Maio':4,'Junho':5,'Julho':6,'Agosto':7,'Setembro':8,'Outubro':9,'Novembro':10,'Dezembro':11}\nsates = np.unique(df['state'])\n\n#convert months to nominals\nnew_data = df.copy()\nfor month in months_dict:\n    new_data = new_data.replace(month,months_dict[month])\nnew_data = new_data.sort_values(['year','month'],ascending=[1,1])\n\n#converte states to nominals\nnew_data['state'] = pd.factorize(new_data.state)[0]\n\n#group data into year and month (strip states)\n#shows the beginning and end of the data to check\n#note that the 2017 data will only go until the month of November (10)\n\nnew_data = new_data.groupby(by=['year','month']).sum().reset_index()\nnew_data = new_data.drop(['state'],axis=1)\nnew_data","902a9210":"#view of the surface\n#x is a year, y is a month and z is a number, use the order of magnitude 6\n\n#view points\nfig = plt.figure(figsize=(16,9))\nax = fig.add_subplot(111,projection='3d')\nax.scatter(new_data['month'],new_data['year'],new_data['number'],color='red')\nax.set_xlabel('Month', fontsize = 25,labelpad=20) \nax.set_ylabel('Year', fontsize = 25,labelpad=20)\nplt.title('Total fires in Brazil by month and year',fontsize=30)\nplt.show()","41645465":"#model\n#x is a year, y is a month and z is a number, use the order of magnitude 9\ngrau = 10\np = surface_regression(new_data['month'],new_data['year'],new_data['number'],grau,grau)\n\n#calculate values from model\nz = np.full(new_data.shape[0],np.nan)\nfor j in range(new_data.shape[0]):\n    z[j] = 0\n    for i in range(grau+1):\n        z[j] += p[i]*(new_data['month'][j]**i) + p[5+i]*(new_data['year'][j]**i)\n\n#show regression results\nfig = plt.figure(figsize=(16,9))\nax = fig.add_subplot(111,projection='3d')    \nax.scatter(new_data['month'],new_data['year'],new_data['number'],color='red')\nax.plot_trisurf(new_data['month'],new_data['year'],z,color='lightblue')\n\nax.set_title('Total Fires in Brazil: Regression', fontsize = 25)\nax.set_xlabel('Month', fontsize = 25,labelpad=20) \nax.set_ylabel('Year', fontsize = 25,labelpad=20) \n_grau = mpatches.Patch(color='red',label='polynomial of degree '+str(grau))\nplt.legend(loc='upper right',prop={'size':15},handles=[_grau])\n\nplt.show()\n\nprint(BOLD+'Constant:'+END)\ndisplay(p[0])\nprint(BOLD+'X coefficients:'+END)\ndisplay(p[1:int(grau\/2)+1])\nprint(BOLD+'Y coefficients:'+END)\ndisplay(p[int(grau\/2)+1:grau+1])","bbedf0cf":"#model\n#x is a year, y is a month and z is a number, use the order of magnitude 100\ngrau = 100\np = surface_regression(new_data['month'],new_data['year'],new_data['number'],grau,grau)\n\n#calculate values from model\nz = np.full(new_data.shape[0],np.nan)\nfor j in range(new_data.shape[0]):\n    z[j] = 0\n    for i in range(grau+1):\n        z[j] += p[i]*(new_data['month'][j]**i) + p[50+i]*(new_data['year'][j]**i)\n\n#show regression results\nfig = plt.figure(figsize=(16,9))\nax = fig.add_subplot(111,projection='3d')    \nax.scatter(new_data['month'],new_data['year'],new_data['number'],color='red')\nax.plot_trisurf(new_data['month'],new_data['year'],z,color='lightblue')\n\nax.set_title('Total Fires in Brazil: Regression', fontsize = 25)\nax.set_xlabel('Month', fontsize = 25,labelpad=20) \nax.set_ylabel('Year', fontsize = 25,labelpad=20) \n_grau = mpatches.Patch(color='red',label='polynomial of degree '+str(grau))\nplt.legend(loc='upper right',prop={'size':15},handles=[_grau])\n\nplt.show()\n\nprint(BOLD+'Constant:'+END)\ndisplay(p[0])\nprint(BOLD+'X coefficients:'+END)\ndisplay(p[1:int(grau\/2)+1])\nprint(BOLD+'Y coefficients:'+END)\ndisplay(p[int(grau\/2)+1:grau+1])","49e42da0":"## 1 - Getting data and importing libraries","10b79105":"### General Regression\n\n- A matrix A containing one column with ones and following columns containing x values is used.\n- Then, y is multiplied by A's pseudo-inverse to obtain p, that contains the parameters.\n\n#### <center> $\\vec{y} = \\ A\\,\\vec{p}$ <\/center>\n#### <center> $\\vec{p} = [(A^TA)^{-1}A^T]\\;\\vec{y}$ <\/center>\n\n### Linear Regression (n points)\n\n<br>\n<center>\n$\n\\vec{y} = \\begin{bmatrix}\\ y_1 \\\\ ... \\\\ y_{n} \\end{bmatrix}\\;\n\\ A = \\begin{bmatrix}\\ 1 & x_0\\\\... & ...\\\\1 & x_n\\end{bmatrix}\\;\n\\vec{p} = \\begin{bmatrix}\\ c \\\\ m \\end{bmatrix}\n$\n<\/center>\n<br>\n\n### Polynomial Regression (n points, degree k)\n\n<br>\n<center>\n$\\vec{y} = \\begin{bmatrix}\\  y_1 \\\\ ... \\\\ y_{n} \\end{bmatrix}\\;$ \n$\\ A = \\begin{bmatrix}\\ 1 & x_1 & ... & x_1^k \\\\... & ... & ... & ... \\\\1 & x_n & ... & x_n^k \\end{bmatrix}\\;$ \n$\\vec{p} = \\begin{bmatrix}\\ a_0 \\\\a_1 \\\\ ... \\\\ a_k \\end{bmatrix}$  \n<\/center>\n<br>\n\n### Surface Regression (n pontos, graus kx e ky)\n\n<br>\n<center>\n$\\vec{y} = \\begin{bmatrix}\\ z_1 \\\\ ... \\\\ z_{n} \\end{bmatrix}\\;$ \n$\\ A = \\begin{bmatrix}\\ 1 & x_1 & ... & x_1^{kx} & y_1 & ... & y_1^{ky} \n                       \\\\... & ... & ... & ... & ... & ... & ...\n                        \\\\ 1 & x_n & ... & x_n^{kx} & y_n & ... & y_n^{ky} \\end{bmatrix}\\;$ \n$\\vec{p} = \\begin{bmatrix}\\ a_0 \\\\a_1 \\\\ ... \\\\ a_{kx} \\\\ a_{kx+1} \\\\ ... \\\\ a_{kx+ky} \\end{bmatrix}$  \n<\/center>\n<br>","9f314b58":"## The state of Mato Grosso is the state with more fires and the state of Sergipe is the State with less fires among the ones with data available.","2c14036c":"## 3 - Regression with least squares","8d0811a0":"## Linear Regression\n### - Parameters: in the upper left corner of the graph\n\n- View the graph in the form of number of fires per year to see the relationship\n-  Do the regression using the least squares method","4784fe2c":"### Generally, it seems that the number of fires is increasing every year in a somewhat linear way, with 2003 as an outlier, having a lot of fires. ","1fe4ff6c":"## 2 - Exploratory Data Analysis","2da78665":"### Surface Regression\n#### - Parameters: the fit was made with grade 10 and 100 for comparison, so instead of a subtitle I show the vectors containing the parameters obtained for x and y, from grade 0 to grade 10 and 100\n\n- View the graph in the form of fire number (z-axis) depending on the month (y-axis) and year (x-axis) to see the relationship\n- It is noted that it was possible to visualize that there is an almost constant growth on the x-axis, since the number of fires per year always grows, on the y-axis there is a variation that occurs during the year, that is, the results of the previous items\n- As much as it was possible to visualize the relationship, this polynomial is probably not the best way to model these data, otherwise it could be a function of z as a function of x and y that grows in x and oscillates y for example $ z = ax ^ { n} cos (b + cy) $\n- Does regression using the least squares method\n","3e145143":"## Polynomial Regression\n### - Parameters: as the equation is large, it is shown (rounded) above the graph for better visualization\n\n- View the graph of the number of fires per month (sum of all years) to see the list.\n- Performs the polynomial regression with different precision for visualization, since the month of September breaks the pattern and from there it is possible to compare how the regression with high precision shows one pattern and the one with less another. This analysis is interesting to analyze overfitting which can be a problem due to the presence of outliers.\n","3dcef6b5":"### Visualizing Brazil map using fiona and geopandas","0a842cc4":"### The months are in Portuguese, here I translate them to English and see the distribution of fires by month. We see a pattern in which the months of July to November have more fires than the rest of the year. However, the pattern is broken in September.","f5b15303":"### I'll do the following regressions:\n\n#### (i) Year x Number - Linear Regression\n#### (ii) Year x Month - Polynomial Regression\n#### (iii) Year x Month x Number - Surface Regression","22c7e90b":"## About the data and forest fires\n\n- The data used here is about forest fires in Brazil from 1998 to 2017.\n\n- I also did made a dashboard in Tableau using this dataset, with interesting visualizations: \nhttps:\/\/public.tableau.com\/app\/profile\/victor.foscarini.almeida3130\/viz\/forest_fires_brazil\/Dashboard1\n\n- Check out some of my other projects on GitHub:\nhttps:\/\/github.com\/Victor-Foscarini"}}