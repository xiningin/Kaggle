{"cell_type":{"2409fcff":"code","ad36eb57":"code","b4d25fa1":"code","ed6ff8c5":"code","480cf494":"code","e74aa448":"code","812f594b":"code","4b746a73":"code","73011b76":"markdown","5f6be11a":"markdown","dd0aa739":"markdown","c5273c8f":"markdown","9b9051dc":"markdown","8231ff02":"markdown"},"source":{"2409fcff":"%matplotlib inline\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.integrate import odeint, solve_ivp\nfrom scipy.optimize import fsolve\nfrom mpl_toolkits import mplot3d\n\nplt.rcParams['figure.figsize'] = [10,5]\nsns.set()\nsns.set_style(\"darkgrid\")","ad36eb57":"def odesys(x,t):\n    x1 = x[0]\n    x2 = x[1]\n    dx1dt = x2\n    dx2dt = -x1 -mu*x2\n    dxdt = [dx1dt, dx2dt]\n    return dxdt\n\n# Condi\u00e7\u00f5es iniciais\nx0 = [1,1]\n\n# Tempo\nt = np.linspace(0,100,1000)\n\nmu = -1\nx = odeint(odesys,x0,t)\n\nplt.plot(t, x[:,0],label='x1');\nplt.plot(t, x[:,1], label='x2');\nplt.legend();\nplt.xlabel('Tempo');\nplt.ylabel('X');","b4d25fa1":"mu = 0\nx = odeint(odesys,x0,t)\n\nplt.plot(t, x[:,0],label='x1');\nplt.plot(t, x[:,1], label='x2');\nplt.legend();\nplt.xlabel('Tempo');\nplt.ylabel('X');","ed6ff8c5":"mu = 1\nx = odeint(odesys,x0,t)\n\nplt.plot(t, x[:,0],label='x1');\nplt.plot(t, x[:,1], label='x2');\nplt.legend();\nplt.xlabel('Tempo');\nplt.ylabel('X');","480cf494":"def vanderpol(x,t):\n    x1 = x[0]\n    x2 = x[1]\n    dx1dt = x2\n    dx2dt = mu*(1-x1**2)*x2 - x1\n    dxdt = [dx1dt, dx2dt]\n    return dxdt\n\n# Chute Inicial\nx0 = [0.5, 0.5]\n\n# Tempos \nt = np.linspace(0,100,10000)\n\n\nmu_values = [-3,-1,0,1,3]\n\nx1 = []\nx2 = []\n\nfor i in mu_values:\n    mu = i\n    x = odeint(vanderpol,x0,t)\n    x1.append(x[:,0])\n    x2.append(x[:,1])\n\n\nx1 = np.array(x1)\nx2 = np.array(x2)\n\nj = 0\nplt.figure(figsize=(8,8))\nfor row in x1:\n    plt.plot(x1[j,:], x2[j,:], label=(r'$\\mu = %i$' %mu_values[j]));\n    j+=1\n    \nplt.legend();\nplt.xlabel(r'$x_1$');\nplt.ylabel(r'$x_2$');\n\nfig = plt.figure(figsize=(10,8))\nax = plt.axes(projection='3d')\n\n\nk = 0\nfor row in x1:\n    ax.plot3D(x1[k,:], x2[k,:], mu_values[k], zdir='x')\n    k+=1\n\nax.view_init(30,250); \nax.zaxis.set_rotate_label(False)\nax.set_zlabel(r'$x_1$', fontsize=15, rotation=0);\nax.set_ylabel(r'$x_2$', fontsize=15);\nax.set_xlabel(r'$\\mu$', fontsize=15);\n\nax.set_yticks([2,0,-2]);","e74aa448":"# Sistema de EDOS\n\ndef polarsys(z,t):\n    rho = z[0]\n    theta = z[1]\n    drhodt = 1 - rho**2\n    dthetadt = 1\n    dzdt = [drhodt, dthetadt]\n    return dzdt\n\n# Chute inicial\nz0 = [0,0]\n\n# Tempo\nt = np.linspace(0, 100, 1000)\n\n# Resolu\u00e7\u00e3o do sistema\nz = odeint(polarsys,z0,t)\n\n# Retorno as vari\u00e1veis do problema original\nrho = z[:,0]\ntheta = z[:,1]\n\nx1 = rho*np.cos(theta)\nx2 = rho*np.sin(theta)\n\n# Gr\u00e1fico\n\nplt.figure(figsize=(8,8));\nplt.plot(x1,x2);\nplt.xlabel(r'$x_1$');\nplt.ylabel(r'$x_2$');","812f594b":"# Sistema n\u00e3o-linear\ndef odesys(x):\n    x1 = x[0]\n    x2 = x[1]\n    dx1dt = -x2 + x1*((x1**2)+(x2**2)-1)\n    dx2dt = x1 + x2*((x1**2)+(x2**2)-1)\n    dxdt = [dx1dt, dx2dt]\n    return dxdt\n\n# Chute inicial\nx0 = [2,2]\n\n# Ra\u00edzes do sistema n\u00e3o-linear\nx = fsolve(odesys,x0)\nprint(x)\n\n# Sistema em coordenadas polares\ndef polarsys(z, t):\n    rho = z[0]\n    theta = z[1]\n    drhodt = rho*(rho**2 -1)\n    dthetadt = 1\n    dzdt = [drhodt, dthetadt]\n    return dzdt\n\n# Chute inicial\nz0 = [1,1]\n\n# Tempo\nt = np.linspace(0,100,1000)\n\n# Resolu\u00e7\u00e3o do Sistema\nz = odeint(polarsys,z0,t)\n\n# Retorno as vari\u00e1veis do problema original\nrho = z[:,0]\ntheta = z[:,1]\n\nx1 = rho*np.cos(theta)\nx2 = rho*np.sin(theta)\n\n# Resolu\u00e7\u00e3o para trajet\u00f3ria dentro do ciclo limite\nz0_in = [0.95, 0.95]\nt = np.linspace(0,1000, 10000)\nz_in = odeint(polarsys,z0_in,t)\nrho_in = z_in[:,0]\ntheta_in = z_in[:,1]\nx1_in = rho_in*np.cos(theta_in)\nx2_in = rho_in*np.sin(theta_in)\n\n# Resolu\u00e7\u00e3o para trajet\u00f3ria fora do ciclo limite\nz0_out = [1.2, 1.2]\nt_out = np.linspace(0,-1, 10000)\nz_out = odeint(polarsys,z0_out,t_out)\nrho_out = z_out[:,0]\ntheta_out = z_out[:,1]\nx1_out = rho_out*np.cos(theta_out)\nx2_out = rho_out*np.sin(theta_out)\n\n# Gr\u00e1fico\nplt.figure(figsize=(9,9));\nplt.plot(x1,x2,label='Ciclo Limite Inst\u00e1vel');\nplt.plot(x1_in,x2_in,color='orangered',zorder=1);\nplt.plot(x1_out,x2_out,color='orangered',zorder=1);\nplt.xlabel(r'$x_1$');\nplt.ylabel(r'$x_2$');\n\n# Pontos do Gr\u00e1fico\nplt.scatter(x1_in[0],x2_in[0], s=100, color='crimson', zorder=10,label='Condi\u00e7\u00e3o Inicial')\nplt.scatter(x1_out[0],x2_out[0],s=100, color='crimson',zorder=10,label='Condi\u00e7\u00e3o Inicial')\nplt.scatter(0,0, s=100,color='navy',zorder=10,label='EE est\u00e1vel')\n\n# Configura\u00e7\u00f5es do Gr\u00e1fico\nhandles, labels = plt.gca().get_legend_handles_labels()\nby_label = dict(zip(labels, handles))\nplt.legend(by_label.values(), by_label.keys());","4b746a73":"def duffing(x,t):\n    x1 = x[0]\n    x2 = x[1]\n    dx1dt = x2\n    dx2dt = -x2 + x1 - x1**3\n    dxdt = [dx1dt, dx2dt]\n    return dxdt\n\nx0 = [(1.1, 0.1), (-1.1,0.1), (-0.001,0), (0,0.001), (0.5,2), (-0.5,-2)]\n\nt = np.linspace(0,100,10000)\n\nj = 0\nfor i in x0:\n    x = odeint(duffing,x0[j],t)\n    x1 = x[:,0]\n    x2 = x[:,1]\n    plt.plot(x1,x2,'crimson');\n    j+=1\n\n# Separatrizes\n\nx0_sep = [(0.001, 0.001), (-0.001,0.001), (0.001,-0.001), (-0.001,-0.001)]\nt_sep = np.linspace(0,-5.5,1000)\n\nk = 0\nfor i in x0_sep:\n    x_sep = odeint(duffing,x0_sep[k],t_sep)\n    x1_sep = x_sep[:,0]\n    x2_sep = x_sep[:,1]\n    plt.plot(x1_sep,x2_sep,'green', linestyle='--', label='Separatriz');\n    k+=1\n    \n# roots_sep = np.roots([1, 1, -1])\n# x1_sep = np.linspace(-0.1,0.1,1000)\n\n# k=0\n# for i in roots_sep:\n#     x2_sep = x1_sep*roots_sep[k]\n#     plt.plot(x1_sep,x2_sep, 'k--', label='Separatriz')\n#     k+=1\n\n# Pontos Estacion\u00e1rios\n\nx1_est = [-1, 0, 1]\nx2_est = [0, 0, 0]\n\n# Textos\n\nl = 0\nfor i in x1_est:\n    plt.plot(x1_est[l],x2_est[l],'bo', label='Pontos Estacion\u00e1rios')\n    plt.text(x1_est[l]+0.05,x2_est[l],[x1_est[l],x2_est[l]], bbox=dict(facecolor='white', alpha=0.8))\n    l+=1\n    \n# Configura\u00e7\u00f5es Gr\u00e1fico\n\nhandles, labels = plt.gca().get_legend_handles_labels()\nby_label = dict(zip(labels, handles))\nplt.legend(by_label.values(), by_label.keys())\n\nplt.xlabel(r'$x_1$');\nplt.ylabel(r'$x_2$');","73011b76":"## Quest\u00e3o 4","5f6be11a":"## Quest\u00e3o 1","dd0aa739":"## Quest\u00e3o 5","c5273c8f":"# Quest\u00e3o 6","9b9051dc":"## Quest\u00e3o 3","8231ff02":"# Lista 3 - Modelagem e Simula\u00e7\u00e3o de Procesos (COQ791)\n\n## Gabriela Dias"}}