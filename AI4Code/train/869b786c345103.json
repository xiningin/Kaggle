{"cell_type":{"f789a28a":"code","60b93ea8":"code","9db3195c":"code","17626ee3":"code","e33fe90a":"code","bded2533":"code","d3933e7a":"code","d4578ab7":"code","d86d32ac":"code","29967c2a":"markdown","b4407223":"markdown","8685698b":"markdown","85e28151":"markdown","883d80d5":"markdown","6c088fea":"markdown","a370257b":"markdown","000d9844":"markdown","3dcab63a":"markdown"},"source":{"f789a28a":"import numpy as np\nimport matplotlib.pyplot as plt","60b93ea8":"data = [[3,1.5,1],[2,1,0],[4,1.5,1],[3,1,0],[3.5,.5,1],[2,.5,0],[5.5,1,1],[1,1,0]]\ntest = [[2,2],[4.5,2]]","9db3195c":"def sigmoid(x):\n    return (1\/(1+np.exp(-x)))\ndef sigmoid_p(x):\n    return (sigmoid(x)*(1-sigmoid(x)))","17626ee3":"w1 = np.random.randn()\nw2 = np.random.randn()\nb = np.random.randn()","e33fe90a":"for i in range(len(data)):\n    point = data[i]\n    color = \"orange\"\n    if point[2] == 0:\n        color = \"cyan\"\n    plt.scatter(point[0],point[1],c=color,s=120)\n \nplt.axis([0,5,0,5])\nplt.grid()","bded2533":"learning_rate = 0.2\ncosts = []\nfor i in range(10000):\n    ri = np.random.randint(len(data))\n    point = data[ri]\n    z = point[0]*w1+point[1]*w2+b\n    pred = sigmoid(z)\n    target = point[2]\n    cost = np.square(pred-target)\n    dcost_pred = 2 * (pred-target)\n    dpred_dz = sigmoid_p(z)\n    dz_w1 = point[0]\n    dz_w2 = point[1]\n    dz_db = 1\n    dcost_dw1 = dcost_pred * dpred_dz * dz_w1\n    dcost_dw2 = dcost_pred * dpred_dz * dz_w2\n    dcost_db = dcost_pred * dpred_dz * dz_db\n    w1 = w1 - learning_rate * dcost_dw1\n    w2 = w2 - learning_rate * dcost_dw2\n    b = b - learning_rate * dcost_db\n    cost_sum = 0\n    for j in range(len(data)):\n        p = data[j]\n        z = p[0] * w1 + p[1] * w2 + b\n        pred = sigmoid(z)\n        cost_sum += np.square(pred-target)\n    costs.append(cost_sum)","d3933e7a":"plt.hist(costs,bins = 100,color=\"red\")","d4578ab7":"pred = []\nfor i in range(len(test)):\n    math = test[i][0]*w1+test[i][1]*w2+b\n    prediction = sigmoid(math)\n    if prediction >= 0.5:\n        print(1)\n        pred.append(1)\n    else:\n        print(0)\n        pred.append(0)","d86d32ac":"plt.subplot(1,2,1)\nfor i in range(len(data)):\n    point = data[i]\n    color = \"orange\"\n    if point[2] == 0:\n        color = \"cyan\"\n    plt.scatter(point[0],point[1],c=color,s=120)\nplt.axis([0,5,0,5])\nplt.grid()\nplt.subplot(1,2,2)\nfor i in range(len(data)):\n    point = data[i]\n    color = \"orange\"\n    if point[2] == 0:\n        color = \"cyan\"\n    plt.scatter(point[0],point[1],c=color,s=120)\nfor i in range(len(test)):\n    if pred[i] >= 0.5:\n        plt.scatter(test[i][0],test[i][1],c = \"red\")\n    else:\n        plt.scatter(test[i][0],test[i][1],c = \"blue\")\nplt.plot(sigmoid(math))   \nplt.axis([0,5,0,5])\nplt.grid()","29967c2a":"Taking the wheight 1 , wheight 2 and bias and starting random","b4407223":"Scatter Plot for all the data points","8685698b":"the real model or the neural network and my training loop","85e28151":"[](http:\/\/)","883d80d5":"Predicting the test with model and VOILA! \ud83d\ude42 \n<br><\/br>\nAnd it works fantastically nice","6c088fea":"**data for training and giving as an input**\n<br><\/br>\n**test for testing the model**","a370257b":"**Defing the activation function that is Sigmoid function here so that i have numbers squashed between 0 and 1.**\n<br><\/br>\nAnd the derivative of sigmoid function","000d9844":"Plotting a histogram of the data","3dcab63a":"**Importing the needed Liabraries\\Modules** \n<br>\n1) matplotlib for ploting \n<\/br>\n<br>\n2) numpy for doing maths and taking random index\n<\/br>"}}