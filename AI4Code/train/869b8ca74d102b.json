{"cell_type":{"96ad0698":"code","f595f71f":"code","97e0e8c4":"code","1edfc39a":"code","1817973d":"code","75f23813":"code","96db8679":"code","2eb4355a":"code","14b220d6":"code","da39f13e":"code","66f31ed2":"code","fe90136e":"code","2a83f86d":"code","8128fe94":"code","02703902":"code","ef324341":"code","97b1cdee":"code","6e1e7fdf":"code","99a3601a":"code","d07dd299":"code","329b6f60":"code","50a3bf4a":"code","b03b726e":"markdown","f7c440d6":"markdown","309df138":"markdown","6df78485":"markdown","b57fe206":"markdown","9c1c64d9":"markdown","ec0ade11":"markdown","e86fddd7":"markdown","0333846f":"markdown","5b700fc6":"markdown","816b60f6":"markdown","d2236227":"markdown","ca841833":"markdown","eed75b97":"markdown","03ead974":"markdown","70e9891b":"markdown","6290d47a":"markdown","8b474ba5":"markdown","347b4d70":"markdown","e98781c4":"markdown","cec8890a":"markdown","c1b7c0f1":"markdown","c12be68d":"markdown","6c7625d6":"markdown","bd0165b2":"markdown","3d6263de":"markdown","9eb6a945":"markdown","94fe9722":"markdown","05fb71b3":"markdown","95986856":"markdown","f7a19a1b":"markdown","ad286b5d":"markdown"},"source":{"96ad0698":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f595f71f":"data = pd.read_csv(\"\/kaggle\/input\/price-volume-data-for-all-us-stocks-etfs\/Stocks\/tsla.us.txt\")","97e0e8c4":"#Let's examine a few examples from our data.\ndata.head()","1edfc39a":"print(\"Data Shape -->\", data.shape)","1817973d":"data.describe()","75f23813":"print(\"Do you have a null column? \\n\", data.isna().sum())","96db8679":"training_size = int(len(data)*0.80)\ndata_len = len(data)\n\ntrain, test = data[0:training_size],data[training_size:data_len]","2eb4355a":"print(\"Training Size --> \", training_size)\nprint(\"total length of data --> \", data_len)\nprint(\"Train length --> \", len(train))\nprint(\"Test length --> \", len(test))","14b220d6":"# the part of data that we will use as training.\ntrain = train.loc[:, [\"Open\"]].values\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0, 1))\ntrain_scaled = scaler.fit_transform(train)","da39f13e":"end_len = len(train_scaled)\nX_train = []\ny_train = []\ntimesteps = 40\n\nfor i in range(timesteps, end_len):\n    X_train.append(train_scaled[i - timesteps:i, 0])\n    y_train.append(train_scaled[i, 0])\nX_train, y_train = np.array(X_train), np.array(y_train)","66f31ed2":"X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\nprint(\"X_train --> \", X_train.shape)\nprint(\"y_train shape --> \", y_train.shape)","fe90136e":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import SimpleRNN\nfrom keras.layers import Dropout","2a83f86d":"regressor = Sequential()\n\nregressor.add(SimpleRNN(units = 50, activation = \"tanh\", return_sequences = True, input_shape = (X_train.shape[1],1)))\nregressor.add(Dropout(0.2))\n\nregressor.add(SimpleRNN(units = 50, activation = \"tanh\", return_sequences = True))\nregressor.add(Dropout(0.2))\n\nregressor.add(SimpleRNN(units = 50, activation = \"tanh\", return_sequences = True))\nregressor.add(Dropout(0.2))\n\nregressor.add(SimpleRNN(units = 50))\nregressor.add(Dropout(0.2))\n\nregressor.add(Dense(units = 1))","8128fe94":"regressor.compile(optimizer= \"adam\", loss = \"mean_squared_error\")","02703902":"epochs = 100 \nbatch_size = 20","ef324341":"regressor.fit(X_train, y_train, epochs = epochs, batch_size = batch_size)","97b1cdee":"test.head()","6e1e7fdf":"real_price = test.loc[:, [\"Open\"]].values\nprint(\"Real Price Shape --> \", real_price.shape)","99a3601a":"dataset_total = pd.concat((data[\"Open\"], test[\"Open\"]), axis = 0)\ninputs = dataset_total[len(dataset_total) - len(test) - timesteps:].values.reshape(-1,1)\ninputs = scaler.transform(inputs)","d07dd299":"X_test = []\n\nfor i in range(timesteps, 412):\n    X_test.append(inputs[i-timesteps:i, 0])\nX_test = np.array(X_test)\n\nprint(\"X_test shape --> \", X_test.shape)","329b6f60":"X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\npredict = regressor.predict(X_test)\npredict = scaler.inverse_transform(predict)","50a3bf4a":"plt.plot(real_price, color = \"red\", label = \"Real Stock Price\")\nplt.plot(predict, color = \"black\", label = \"Predict Stock Price\")\nplt.title(\"Stock Price Prediction\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Tesla Stock Price\")\nplt.legend()\nplt.show()","b03b726e":"<a id ='13' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\" > Split the data as train and test \u2753<\/h3>\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >In this section, we will separate the data we have as a train and test. <\/p> <\/li>\n<\/ul>","f7c440d6":"<a id ='6' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\">What are the application areas of RNN \u2753  <\/h3>\n\n<ul> \n    <li style = \"color:darkred\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Image Captioning <\/p> <\/li>\n        <li style = \"color:darkred\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Time Series Prediction <\/p> <\/li>\n        <li style = \"color:darkred\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Natural Language Processing <\/p> <\/li>\n            <li style = \"color:darkred\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Machine Translation <\/p> <\/li>\n<\/ul>","309df138":"<a id ='2' ><\/a>\n<h2 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\">Recurrent Neural Networks (RNN) \ud83d\udcda<\/h2>\n\n![RNN.png](attachment:ada57eb7-1b82-4065-aa82-1df2a2f4484c.png)","6df78485":"<a id ='16' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\" > X_train - y_train \u2753<\/h3>\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >We will separate the normalized data into x_train and y_train. <\/p> <\/li>\n        <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >We will make this distinction 40 steps 40 steps. So we will train in 40 steps. We will anticipate step 41.didn't we understand Let's examine the picture below and visualize this in our minds. <\/p> <\/li>\n<\/ul>\n\n<a id ='17' ><\/a>\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > What is the steps logic? <\/p>\n\n![Steps.png](attachment:f039f066-9cc8-4f01-98ad-8b672763020e.png)\n\n<ul>\n    <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Let's think of the number of steps as 3, not 40. <\/p> <\/li>\n     <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >then we reserve the first 3 numbers for training data since our step count is 3. <\/p> <\/li>\n         <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >We try to guess the number that comes after these 3 numbers. so we separate it as y_train. <\/p> <\/li>\n             <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >And take this one step further, as you can see in the picture, we continue to do this. You can think of it exactly like this in our real data. <\/p> <\/li>\n<\/ul>","b57fe206":"<a id ='18' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\" > Reshape \u2753<\/h3>\n\n<a id ='19' ><\/a>\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > why do we reshape ?  <\/p>\n\n<ul>\n    <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > One of the most basic points to be considered in RNNs is that they want their input to have 3 dimensions. <\/p> <\/li>\n     <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >These 3 sizes are typically:<\/p> <ul>\n         <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" >the size of data we have<\/li>\n         <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" >Number of steps<\/li>\n         <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" >Number of features<\/li>\n         <\/ul> <\/li>       \n<\/ul>","9c1c64d9":"<h2 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\">Import Libraries \ud83d\udd16 <\/h2>","ec0ade11":"<a id ='21' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\" > Create Model\u2753<\/h3>\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >We are importing the libraries we will use for our model.<\/p> <\/li>\n        <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Later, we will create our RNN model.<\/p> <\/li>\n<\/ul>","e86fddd7":"<ul>\n    <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Our model has made good predictions until a certain time, but after a while the difference with the real data has started to increase. <\/p> <\/li>\n     <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Well, if we used LSTM instead of RNN, how would the result change? I will discuss this in my next notebook. <\/p> <\/li>\n<\/ul>","0333846f":"<a id ='20' ><\/a>\n<h2 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\">Implementing with Keras \u2754 <\/h2>\n\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\"> In this section, we create and fit  RNN model. <\/p>\n<ul>\n    <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Create Model<\/li>\n    <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Compile Model<\/li>\n    <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Epochs and Batch Size<\/li>\n    <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Fit the model<\/li>\n<\/ul>","5b700fc6":"<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >units --> Positive integer, dimensionality of the output space.<\/p> <\/li>\n        <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >activation --> Activation function to use. Default: hyperbolic tangent (tanh). If you pass None, no activation is applied (ie. \"linear\" activation: a(x) = x).<\/p> <\/li>\n            <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >return_sequences --> Boolean. Whether to return the last output in the output sequence, or the full sequence. Default: False.<\/p> <\/li>\n                <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >inputs --> A 3D tensor, with shape [batch, timesteps, feature].<\/p> <\/li>\n<\/ul>\n\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > for detail referance --> <a href = \"https:\/\/keras.io\/api\/layers\/recurrent_layers\/simple_rnn\/\" >https:\/\/keras.io\/api\/layers\/recurrent_layers\/simple_rnn\/ <\/a> <\/p>","816b60f6":"<a id ='3' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\">What is this RNN \u2753<\/h3>\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > RNN is a type of Deep Learning structure that is often used to predict the next step. So what is the biggest difference from other learning structures? The biggest difference from other deep learning structures is that they remember. Yes, RNNs can remember. <\/p>\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Another difference is that in other neural networks, each input is independent from each other, while in RNNs the inputs are related to each other. How so ? RNN establishes relationships between inputs in order to follow the next step. It realizes education based on these relationships. <\/p>\n\n<a id ='4' ><\/a>  \n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > We said RNN will remember. so how does that happen? <\/p>\n    \n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > RNNs use a loop-like structure that rotates within themselves so that the relationships they have established are permanent. To understand this, let's look at the visual of the RNN structure. <\/p>\n\n![RNNFirst.png](attachment:c19d8a3a-b019-4e7f-b607-d7df3510ff92.png)\n\n<ul>\n  <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > Let's examine the picture above, there are actually nodes in the hidden layer here. We can see this from the previous picture. <\/li>\n  <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > these nodes have temporal cycles that feed them. Thanks to this loop, even if an output is given, the input value is not forgotten and is kept in their memory. (Short memory) <\/li>\n<\/ul>\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > To understand this better, let's open this picture a little more. <\/p>\n\n![RNNEX.png](attachment:7d78dcb1-9760-4aea-aa24-68e8f6755f88.png)\n\n<ul>\n  <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > As we understand from the picture. For example, y0 obtained in the previous step and x1, our current input, are used to output y1. <\/li>\n<\/ul>","d2236227":"<ul>\n    <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >We can now make an estimate here as data is ready to predict. <\/p> <\/li>\n        <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >inverse_transform --> If you remember before training our model, we normalized our data. converts these values \u200b\u200bto before normalization. <\/p> <\/li>\n<\/ul>","ca841833":"<ul>\n    <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Since we use the \"open\" feature while training the model, we will use the same feature while testing. <\/p> <\/li>\n<\/ul>","eed75b97":"<a id ='27' ><\/a>\n<h4 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> CONCLUSION<\/h4>\n\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > I tried to talk more about the logic of the work without getting into mathematics. I hope I was able to help a little bit.I am waiting for them if you have any questions or suggestions. <\/p>\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >  Seaborn Tutorial -->  \n    <a href = \"https:\/\/www.kaggle.com\/rafetcan\/visualization-tutorial-with-seaborn\" >https:\/\/www.kaggle.com\/rafetcan\/visualization-tutorial-with-seaborn<\/a>\n<\/p>\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >  Plotly Tutorial -->  \n    <a href = \"https:\/\/www.kaggle.com\/rafetcan\/plotly-tutorial-for-beginners\" >https:\/\/www.kaggle.com\/rafetcan\/plotly-tutorial-for-beginners<\/a>\n    <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >  CNN Tutorial -->  \n    <a href = \"https:\/\/www.kaggle.com\/rafetcan\/convolutional-neural-network-cnn-tutorial\" >https:\/\/www.kaggle.com\/rafetcan\/convolutional-neural-network-cnn-tutorial<\/a>\n<\/p>\n\n<p style = \"text-shadow: 12px 12px 2px #333;color:darkred;font-family:Segoe Print;font-weight:bold\" > THANK YOU<\/p>","03ead974":"<a id ='14' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\" > Normalize data \u2753<\/h3>\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >In this section, we will normalize the data we have.<\/p> <\/li>\n<\/ul>\n\n<a id ='15' ><\/a>\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > Why do we normalize data? <\/p>\n\n<ul>\n        <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Normalization is very important in all deep learning in general. <\/p> <\/li>\n            <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Normalization makes the properties more consistent. This allows the model to predict its output more accurately.<\/p> <\/li>\n                <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >In this notebook, since we use the \"open\" feature from our data to train the model, it will be sufficient to normalize it.<\/p> <\/li>\n<\/ul>","70e9891b":"<ul>\n    <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > We use the data we separated above as our test data. <\/p> <\/li>\n<\/ul>","6290d47a":"<a id ='11' ><\/a>\n<h4 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> Many to Many \u2049\ufe0f  <\/h4>\n\n![manytomany.png](attachment:84edcfa2-e8d1-443b-b996-9694f8f2d7d8.png)\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > It is a type of RNN that gives many inputs and many outputs.  <\/p>\n\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > Example : An example is machine translation from one language to another. <\/p>","8b474ba5":"<a id ='24' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\" > Fit the model \u2753<\/h3> \n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >We train the model we created above using our data. <\/p> <\/li>\n<\/ul>","347b4d70":"<ul>\n    <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >we distinguish the values \u200b\u200bthat I will guess. <\/p> <\/li>\n<\/ul>","e98781c4":"<a id ='23' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\" > Epochs and Batch Size \u2753<\/h3> \n\n<ul>\n    <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Epochs : the forward and backward processing of data one by one. In other words, we can simply call it a complete educational tour. Education is determined by the number of eras. <\/li>\n        <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Batch Size : Basically, in the periods I mentioned above, it takes a long time for us to train the data one by one. During training\nhow much of the data,indicates that it will be trained. <\/li>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" >To give an example of this, imagine we have 10 loaves of bread. If we select batch_size as 2, imagine that we eat these breads 2 times and 2 times.<\/li>  \n<\/ul>","cec8890a":"<a id ='1' ><\/a>\n<h2 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\">Load and Check Data \ud83d\uddf8 <\/h2>","c1b7c0f1":"![RNN.gif](attachment:4692c423-aa44-4a4e-83c0-77d12414c333.gif)\n\n<center><h1 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\">Introduction \ud83d\udcd6 <\/h1><\/center>\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\">The data (last updated 11\/10\/2017) is presented in CSV format as follows: Date, Open, High, Low, Close, Volume, OpenInt.<\/p>\n\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > What are we going to do in this notebook? <\/p>\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\">First, we look at our very short model. Later, we'll talk about what RNN is. We will look at how RNN works and we will support this with visuals. We will look at where RNN is used. In short, we will try to understand the things we have stated in the content section below as logic without going into the mathematics of the work. <\/p>\n\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > So, let's get started. <\/p>\n    \n<h2 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\">Content :<\/h2>\n\n<ul>\n    <li style = \"color:gray;font-size:16px\"> <a href = \"#1\" style = \"color:black;font-family:Segoe Print;font-weight:bold\"> Load and Check Data \ud83d\uddf8 <\/a> <\/li> \n        <li style = \"color:gray;font-size:16px\"> <a href = \"#2\" style = \"color:black;font-family:Segoe Print;font-weight:bold\"> Recurrent Neural Networks (RNN) \ud83d\udcda <\/a>\n            <ul>\n                <li style = \"color:black;font-size:16px\" ><a href = \"#3\" style = \"color:darkred;font-family:Segoe Print;font-weight:bold\"> What is this RNN \u2753 <\/a><\/li>\n                <li style = \"color:black;font-size:16px\" ><a href = \"#4\" style = \"color:darkred;font-family:Segoe Print;font-weight:bold\"> We said RNN will remember. so how does that happen? <\/a><\/li><\/ul>\n         <li style = \"color:gray;font-size:16px\" ><a href = \"#5\" style = \"color:black;font-family:Segoe Print;font-weight:bold\"> Why Recurrent Neural Networks \u2753 <\/a> <\/li>\n                      <li style = \"color:gray;font-size:16px\" ><a href = \"#6\" style = \"color:black;font-family:Segoe Print;font-weight:bold\"> What are the application areas of RNN \u2753 <\/a> <\/li>\n                                   <li style = \"color:gray;font-size:16px\" ><a href = \"#7\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" > What are the types of RNN \u2753 <\/a> <ul>\n                                       <li style = \"color:gray;font-size:16px\" ><a href = \"#8\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" > One to One \u2049\ufe0f <\/a><\/li>\n                                        <li style = \"color:gray;font-size:16px\" ><a href = \"#9\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" > One to Many \u2049\ufe0f <\/a><\/li>\n                                        <li style = \"color:gray;font-size:16px\" ><a href = \"#10\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Many to One \u2049\ufe0f <\/a><\/li>\n                                        <li style = \"color:gray;font-size:16px\" ><a href = \"#11\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Many to Many \u2049\ufe0f <\/a><\/li>\n                                       <\/ul><\/li>\n    <li  style = \"color:gray;font-size:16px\" > <a href = \"#12\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Data Preprocessing \u2754 <\/a> \n        <ul>\n            <li style = \"color:gray;font-size:16px\" ><a href = \"#13\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" >  Split the data as train and test \u2753 <\/a> <\/li>\n            <li style = \"color:gray;font-size:16px\" ><a href = \"#14\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" >  Normalize Data \u2753 <\/a> \n                <ul>\n                    <li style = \"color:gray;font-size:16px\" ><a href = \"#15\" style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" >   Why do we normalize data? <\/a><\/li>\n                <\/ul>\n            <\/li>\n            <li style = \"color:gray;font-size:16px\" ><a href = \"#16\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" >  X_train - y_train \u2753 <\/a> \n                <ul>\n                    <li style = \"color:gray;font-size:16px\" ><a href = \"#17\" style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" >   What is the steps logic? <\/a><\/li>\n                <\/ul>\n            <\/li>\n            <li style = \"color:gray;font-size:16px\" ><a href = \"#18\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" >  Reshape \u2753 <\/a> \n                <ul>\n                    <li style = \"color:gray;font-size:16px\" ><a href = \"#19\" style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" >   why do we reshape ? <\/a><\/li>\n                <\/ul>\n            <\/li>\n        <\/ul>\n    <\/li>\n            <li style = \"color:gray;font-size:16px\" ><a href = \"#20\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Implementing with Keras \u2754 <\/a> <ul>\n          <li style = \"color:gray;font-size:16px\" ><a href = \"#21\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Create Model \u2753 <\/a><\/li>\n                                        <li style = \"color:gray;font-size:16px\" ><a href = \"#22\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Compile Model \u2753 <\/a><\/li>\n                                        <li style = \"color:gray;font-size:16px\" ><a href = \"#23\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Epochs and Batch Size \u2753 <\/a><\/li>\n                                        <li style = \"color:gray;font-size:16px\" ><a href = \"#24\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Fit the model \u2753 <\/a><\/li>\n                                       <\/ul><\/li>\n                          <li style = \"color:black;font-size:16px\" ><a href = \"#25\" style = \"color:black;font-family:Segoe Print;font-weight:bold\"> Predict \u2753 <\/a><\/li>\n                             <li style = \"color:black;font-size:16px\" ><a href = \"#26\" style = \"color:black;font-family:Segoe Print;font-weight:bold\"> Evaluate the model \u2754 <\/a><\/li>\n       <li style = \"color:black;font-size:16px\" ><a href = \"#27\" style = \"color:darkred;font-family:Segoe Print;font-weight:bold\"> CONCLUSION <\/a><\/li>\n       <\/ul>\n    <\/li>\n<\/ul>\n","c12be68d":"<a id ='12' ><\/a>\n<h2 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\" > Data Preprocessing \u2754<\/h2>\n\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\"> In this section, we will make the data available for RNN. <\/p>\n<ul>\n     <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Split the data as train and test<\/li>\n     <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Normalize data.<\/li>\n     <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >X_train - y_train ?<\/li>\n    <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Reshape<\/li>\n<\/ul>","6c7625d6":"<ul>\n    <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Finally, we trained our model according to the steps above. We generate our test data based on this number of steps. <\/p> <\/li>\n<\/ul>","bd0165b2":"<a id ='25' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\" > Predict \u2753<\/h3> \n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >We will make predictions using the model we have created.<\/p> <\/li>\n<\/ul>","3d6263de":"<a id ='5' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\">Why Recurrent Neural Networks \u2753  <\/h3>\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > In the picture above we have seen the forward neural network. forward neural network : <\/p>\n\n<ul> \n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" >Cannot handle sequential data<\/li>\n        <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" >Takes into account the current entry.<\/li>\n        <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" >It does not consider previous entries, so it does not remember<\/li>\n<\/ul>\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > The solution to these problems is RNN. RNN can process sequential data, accept existing input data and previously received inputs.RNNs can remember previous entries as they have internal memories. <\/p>","9eb6a945":"<a id ='7' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\">What are the types of RNN \u2753  <\/h3>\n\n<ol> \n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > One to One <\/p> <\/li>\n        <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > One to Many <\/p> <\/li>\n        <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Many to One <\/p> <\/li>\n            <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Many to Many <\/p> <\/li>\n<\/ol>","94fe9722":"<a id ='10' ><\/a>\n<h4 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> Many to One \u2049\ufe0f  <\/h4>\n\n![manytoone.png](attachment:ea318661-d352-4401-a8ba-ecdf2dd6ca1b.png)\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > This RNN takes multiple inputs and yields a single output.  <\/p>\n\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > Example : Suppose it takes a sentence as input. It can also give the emotion of this sentence as output. as in the picture above. <\/p>","05fb71b3":"<a id ='26' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\" > Evaluate the model \u2754<\/h3> \n\n<ul>\n    <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >yes, finally let's take a look at our results by comparing our predictions with real data. <\/p> <\/li>\n<\/ul>","95986856":"<a id ='22' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\" > Compile Model\u2753<\/h3>\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Yes, now we need to compile our model.  <\/p>\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" >optimizer --> The optimizer does the process of updating our parameters for us here. some kind of healer I can say. There are methods used for multiple optimizers, and you should choose the most suitable one for the model. <\/li>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" >loss --> It is a number that indicates how good or bad the model is to its prediction. As it approaches 0, the error starts to decrease.<\/li>\n<\/ul>","f7a19a1b":"<a id ='9' ><\/a>\n<h4 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> One to Many \u2049\ufe0f  <\/h4>\n\n![OnetoMany.png](attachment:78913137-2b2c-48de-a6c8-248348238b10.png)\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > this neural network has one input and multiple outputs.  <\/p>\n\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > Example : An example is the picture and the sentence that describes it. A picture is input as input and a sentence describing it comes out. <\/p>","ad286b5d":"<a id ='8' ><\/a>\n<h4 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> One to One \u2049\ufe0f  <\/h4>\n\n![RNNEX.png](attachment:b3836f81-4faa-4c65-b922-8f88da75da70.png)\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > This type of neural network can be called the vanilla neural network. It has a single entrance and a single exit. It is often used for machine learning problems. <\/p>"}}