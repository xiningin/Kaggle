{"cell_type":{"6c4429b8":"code","874c264f":"code","d2eee894":"code","b7fa6b76":"code","036c1ed2":"code","95c7b68e":"code","4b2c30b4":"code","70060019":"code","a50fd636":"code","fbc0efe2":"code","dd465989":"code","0d89ad35":"code","25efb595":"code","7f47045c":"code","62dc3ea6":"code","f1f16486":"code","afe5036f":"code","4a692c5e":"code","27abcbc9":"code","f21a7dc8":"code","8c4f4fb0":"code","213f38e8":"code","9b694f9b":"code","1099b836":"code","4acdb233":"code","fd500e6f":"code","7dda93b8":"code","1a84dcb4":"code","41b5318b":"code","bedd0f95":"markdown","0df4441d":"markdown","89d843f9":"markdown","a60b5571":"markdown","1e332c94":"markdown","6ee12294":"markdown","97bd7419":"markdown","44ab514f":"markdown","3e579641":"markdown","c2b3c029":"markdown","0dfad50a":"markdown","be076c6b":"markdown","64a63cd9":"markdown"},"source":{"6c4429b8":"import numpy as np # \u5bfc\u5165numpy\u5e93","874c264f":"x = np.array([1, 2, 1, 0, 3])\ny = np.array([-1, -1, 2, 1, 1])\n\nprint(x - y) # \u5bf9\u4f4d\u76f8\u51cf\nprint(x + y) # \u5bf9\u4f4d\u76f8\u52a0\nprint(x * y) # \u5bf9\u4f4d\u76f8\u4e58\nprint(x @ y) # \u70b9\u79ef\nprint(np.sqrt(x)) # \u5f00\u6839\nprint(x ** 2) # \u6bcf\u4e00\u4f4d\u5e73\u65b9\nprint(np.sum(x)) # \u6c42\u548c","d2eee894":"np.sqrt(np.sum((x-y)**2)) # \u8ba1\u7b97\u6b27\u5f0f\u8ddd\u79bb","b7fa6b76":"(x @ y) \/ (np.sqrt(np.sum(x**2))) \/ (np.sqrt(np.sum(y**2))) # \u8ba1\u7b97cos\u8ddd\u79bb ","036c1ed2":"A = np.array([\n    [1, 0],\n    [0, -1],\n    [2, 2]\n])\nB = np.array([\n    [0, 1],\n    [-1, 1],\n    [1, 1]\n])\nC = np.array([\n    [1, 0],\n    [2, 1]\n])\nprint(A + B) # \u5bf9\u4f4d\u76f8\u52a0\nprint(A * B) # \u5bf9\u4f4d\u76f8\u4e58\nprint(A - B) # \u5bf9\u4f4d\u76f8\u51cf\nprint(A @ C) # \u77e9\u9635\u76f8\u4e58","95c7b68e":"x = np.array([1, 0, -1, -2]) # \u795e\u7ecf\u7f51\u7edc\u8f93\u5165x\nw = np.array([\n    [1, 0, 0],\n    [1, 0, 1],\n    [1, 0, 1],\n    [1, 0, 0],\n])                          # 4\u00d73 \u7684\u6743\u91cd\u77e9\u9635\nb = np.array([1, 2, 3])     # \u504f\u7f6e\u9879bias \u4e0e\u8f93\u51fa\u7ef4\u5ea6\u76f8\u540c\nprint(w[0]) # \u53d6\u7b2c\u4e00\u884c\nprint(w[:,0]) # \u53d6\u7b2c\u4e00\u5217\uff0c\u5176\u4e2d:\u8868\u793a\u8be5\u7ef4\u5ea6\u5168\u53d6\uff0c\u6240\u4ee5\u662f\u6bcf\u4e00\u884c\u90fd\u53d6\uff0c\u53d6\u6bcf\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5c31\u662f\u7b2c\u4e00\u5217 \nw[1:3, 1:3] # \u53d6\u7b2c\u4e8c\u7b2c\u4e09\u884c\uff0c\u7b2c\u4e8c\u5217\u7b2c\u4e09\u5217\nw[-1] # \u53d6\u6700\u540e\u4e00\u884c\nw[-2] # \u53d6\u5012\u6570\u7b2c\u4e8c\u884c\n\nprint(x @ w + b) # \u5168\u8fde\u63a5\u5c42\u7684\u8f93\u51fay","4b2c30b4":"x = np.array([1, 0, -1, -2]) \nX = np.array([\n    [1, 0],\n    [0, -1],\n    [2, 2]\n])\n\nprint(X.flatten()) # \u628a\u77e9\u9635X\u5c55\u5f00\u6210\u5411\u91cf\nprint(np.average(x)) # \u5bf9\u5411\u91cfx\u7684\u6240\u6709\u5143\u7d20\u53d6\u5e73\u5747\nprint(np.average(X)) # \u5bf9\u77e9\u9635X\u7684\u6240\u6709\u5143\u7d20\u53d6\u5e73\u5747\nprint(np.average(X, axis = 1)) # \u5bf9\u77e9\u9635X\u7684\u6bcf\u4e00\u884c\u53d6\u5e73\u5747\nprint(np.average(X, axis = 0)) # \u5bf9\u77e9\u9635X\u7684\u6bcf\u4e00\u5217\u53d6\u5e73\u5747\n","70060019":"print(np.zeros(10))\nprint(np.ones(5))\nprint(np.random.randn(5, 5)) # \u7528\u5747\u503c\u4e3a0\uff0c\u65b9\u5dee\u4e3a1\u7684\u9ad8\u65af\u5206\u5e03\u968f\u673a\u751f\u62105*5\u7684\u77e9\u9635\nprint(np.linspace(-5, 5, 101)) # \u628a-5\u52305\u7b49\u5206\u6210100\u4e2a\u533a\u95f4\uff0c\u56e0\u4e3a\u5de6\u95ed\u53f3\u95ed\uff0c\u6240\u4ee5\u603b\u5171\u6709101\u4e2a\u6570\u5b57","a50fd636":"print(np.arange(12))\nX = np.arange(12).reshape((4, 3)) # \u628a0~11\u5341\u4e8c\u4e2a\u6570\u7684\u5411\u91cfreshape\u62104\u884c3\u5217\u7684\u77e9\u9635\nprint(X)\nprint(X.reshape(3, 4)) # \u628a\u77e9\u9635X\u8c03\u6574\u62103\u884c4\u5217","fbc0efe2":"import matplotlib.pyplot as plt # \u5bfc\u5165matplotlib\u5e93","dd465989":"print(np.exp([0,1,2])) # \u6c42\u81ea\u7136\u5e95\u6570e\u7684\u5e42","0d89ad35":"x = np.array([1,2,3])\nprint(x.shape)\ny = np.array([[1,2,3]]) # \u6ce8\u610f\u4e0ey = np.array([1, 2, 3])\u7684\u533a\u522b\uff0cX\u662f\u7ef4\u5ea6\u4e3a3\u7684\u5411\u91cf\uff0cY\u662f\u7ef4\u5ea6\u4e3a1\u884c3\u5217\u7684\u77e9\u9635\nprint(y.shape)\nprint(x)\nprint(y)\nprint(x + y) # \u6ce8\u610fx+y\u7684\u7ed3\u679c\u662f1\u884c3\u5217\u7684\u77e9\u9635","25efb595":"x = np.linspace(-10, 10, 201) # -10\u523010\uff0c\u7b49\u8ddd\u79bb\u5212\u5206200\u4e2a\u70b9\ny = 1 \/ (1 + np.exp(-x))\nplt.title(\"happy coding\") # \u56fe\u7247\u6807\u9898\nplt.xlabel(\"time\") # \u56fe\u7247\u7684\u6a2a\u8f74\u6807\u9898\nplt.ylabel(\"speed\") # \u56fe\u7247\u7684\u7eb5\u8f74\u6807\u9898\nplt.plot(x, y, '-') # \u7528\u8fde\u7eed\u7684-\u7ebf\u753b\u56fe\nplt.show() # \u5c55\u793a\u56fe\u7247\nplt.plot(x, y, 'r-') # 'r-'\u4ee3\u8868\u7ea2\u8272\u7684\u7ebf\uff0c\u4f60\u8fd8\u53ef\u4ee5\u8bd5\u8bd5'bo', 'g--'\nplt.show() # \u5c55\u793a\u56fe\u7247","7f47045c":"plt.plot([-2,-1,0,1], [0,4,1,3], 'x') # 'x'\u8868\u793a\u6563\u70b9\u56fe\nplt.show()\nplt.plot([-2,-1,0,1], [0,4,1,3], 'x--') # 'x'\u8868\u793a\u6563\u70b9\u56fe\uff0c'--'\u8868\u793a\u7528\u865a\u7ebf\u628a\u6563\u70b9\u56fe\u8fde\u6210\u6298\u7ebf\u56fe\nplt.show()","62dc3ea6":"# \u4ea7\u751f10000\u4e2a \u4ece\u5747\u503c\u4e3a100\uff0c\u65b9\u5dee\u4e3a20\u7684\u9ad8\u65af\u5206\u5e03 \u968f\u673a\u751f\u6210\u7684\u70b9\nmu = 100\nsigma = 20\n\n# \u201c\u5747\u503c\u4e3amu\u65b9\u5dee\uff0c\u4e3asigma\u9ad8\u65af\u5206\u5e03\u201d = mu + sigma * \u201c\u5747\u503c\u4e3a0\uff0c\u65b9\u5dee\u4e3a1\u7684\u9ad8\u65af\u5206\u5e03\u201d\n# \u8fd9\u662f\u9ad8\u65af\u5206\u5e03\u7684\u6570\u5b66\u6027\u8d28\nx = mu + sigma * np.random.randn(10000)\nprint(x)\n\n# \u67f1\u72b6\u56fe\u7edf\u8ba1\u51fa\u73b0\u6b21\u6570\nplt.hist(x, 50) # \u5c06\u6570\u7ec4x\u5206\u4e3a50\u4e2a\u7edf\u8ba1\u533a\u95f4\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u533a\u95f4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5c06\u51fa\u73b0\u6b21\u6570\u753b\u6210\u67f1\u72b6\u56fe\nplt.show() # \u53ef\u4ee5\u770b\u5230\u56fe\u50cf\u8fd8\u662f\u6bd4\u8f83\u50cf\u9ad8\u65af\uff08\u6b63\u6001\uff09\u5206\u5e03\u7684","f1f16486":"import os\nos.listdir(\".\") # \u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u6240\u6709\u6587\u4ef6\nos.listdir(\"..\/input\/youthaiimageclassification\")","afe5036f":"mnist_dir = \"..\/input\/youthaiimageclassification\/\"\nf = open(mnist_dir + \"mnist_train.csv\")\nprint(f.readline())\nprint(f.readline())","4a692c5e":"for i in range(10):\n    data_line = f.readline() # \u8bfb\u53d6\u4e00\u884c\n    \n    # int(x) \u5c06list\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u8f6c\u6362\u4e3a\u6574\u6570\n    # data_line.split(',') \u7528\u9017\u53f7\u5206\u5f00\uff0c\u5f97\u5230\u4e00\u4e2alist\n    # reshape \u5c06\u56fe\u7247\u8f6c\u4e3a28*28\u7684\u77e9\u9635\n    image = np.array([int(x) for x in data_line.split(',')][1:]).reshape(28, 28) \n    \n    # \u4f7f\u7528imshow\u5c06\u5176\u753b\u51fa\uff0c\u6ce8\u610f\u8fd9\u91cccmap; \u753b\u7684\u65f6\u5019\u9ed8\u8ba4\u662f\u5f69\u8272\u56fe\uff0ccmap=\"gray\"\u8f6c\u6362\u4e3a\u7070\u5ea6\u56fe\uff0ccmap=\"gray_r\"\u4ee3\u8868\u53cd\u7070\u5ea6\u56fe\uff08\u53730\u4ee3\u8868\u767d\u8272\uff0c255\u4ee3\u8868\u9ed1\u8272\uff09\n    plt.imshow(image, cmap=\"gray_r\") \n    \n    plt.show() #\u53ea\u5c55\u793a\u4e00\u5f20\uff0c\u9700\u8981\u518d\u7528plt.show()\u51fa\u73b0\u4e0b\u4e00\u5f20","27abcbc9":"ans = []\nfor x in data_line.split(','):\n    ans.append(int(x))\nprint(ans)\n\n# \u4e0e\u4e0b\u9762\u4e00\u884c\u7b49\u6548\nprint([int(x) for x in data_line.split(',')])","f21a7dc8":"import pandas as pd\nmnist_train = pd.read_csv(mnist_dir + \"\/mnist_train.csv\")\nmnist_test = pd.read_csv(mnist_dir + \"\/mnist_test.csv\")\nx_train = np.array(mnist_train.iloc[:, 1:]).reshape(-1, 28, 28) # \u9009\u53d6\u6240\u6709\u884c\uff0c\u4ece\u7b2c\u4e8c\u5217\u5230\u6700\u540e\u4e00\u5217\uff0828*28=784\u4e2a\u50cf\u7d20\u7684\u503c\uff09\ny_train = np.array(mnist_train.iloc[:, 0])\nx_test = np.array(mnist_test.iloc[:, 1:]).reshape(-1, 28, 28)\ny_test = np.array(mnist_test.iloc[:, 0])\nprint(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","8c4f4fb0":"class Cat:\n    def __init__(self, age, name):\n        self.age = age\n        self.name = name\n        \n    def shout(self):\n        print(self.name)","213f38e8":"cat1 = Cat(5, \"haha\")\ncat1.shout()\ncat2 = Cat(6, \"hehe\")\ncat2.shout()","9b694f9b":"from sklearn.neighbors import KNeighborsClassifier","1099b836":"import pandas as pd\nmnist_train = pd.read_csv(mnist_dir + \"\/mnist_train.csv\")\nmnist_test = pd.read_csv(mnist_dir + \"\/mnist_test.csv\")\nx_train = np.array(mnist_train.iloc[:, 1:]).reshape(-1, 28, 28) # \u9009\u53d6\u6240\u6709\u884c\uff0c\u4ece\u7b2c\u4e8c\u5217\u5230\u6700\u540e\u4e00\u5217\uff0828*28=784\u4e2a\u50cf\u7d20\u7684\u503c\uff09\ny_train = np.array(mnist_train.iloc[:, 0])\nx_test = np.array(mnist_test.iloc[:, 1:]).reshape(-1, 28, 28)\ny_test = np.array(mnist_test.iloc[:, 0])\nprint(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","4acdb233":"x_train = x_train.reshape(x_train.shape[0], -1)\nx_test = x_test.reshape(x_test.shape[0], -1)\n\n# \u8bad\u7ec3\u8fc7\u7a0b\nknc = KNeighborsClassifier(n_neighbors=5)\n\nn_train = 2000\nknc.fit(x_train[:n_train], y_train[:n_train]) # fit\u662f\u8bad\u7ec3\u7684\u51fd\u6570 predict\u662f\u6d4b\u8bd5\u7684\u51fd\u6570\n\n# \u6d4b\u8bd5\u8fc7\u7a0b\nn_test = 100\nnp.sum(knc.predict(x_test[0:100]) == y_test[0:100].flatten()) # predict\u662f\u6d4b\u8bd5\u7684\u51fd\u6570\n# \u8f93\u51fa100\u4e2a\u6570\u636e\u4e2d\u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570","fd500e6f":"# \u753b\u51fa\u5206\u7c7b\u9519\u8bef\u7684\u56fe\u50cf\nprint(np.where(knc.predict(x_test[0:100]) != y_test[0:100])[0])\nfor i in np.where(knc.predict(x_test[0:100]) != y_test[0:100])[0]:\n    plt.imshow(x_test[i].reshape(28, 28), cmap=\"gray_r\")\n    plt.show()","7dda93b8":"import pickle\nwith open(\"..\/input\/youthaiimageclassification\/cifar10.pkl\", \"rb\") as f:\n    (x_train, y_train), (x_test, y_test) = pickle.load(f)\nprint(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","1a84dcb4":"x_train = x_train.reshape(x_train.shape[0], -1)\nx_test = x_test.reshape(x_test.shape[0], -1)\n\n# \u8bad\u7ec3\u8fc7\u7a0b\nknc = KNeighborsClassifier(n_neighbors=5)\n\nn_train = 2000\nknc.fit(x_train[:n_train], y_train[:n_train]) # fit\u662f\u8bad\u7ec3\u7684\u51fd\u6570 predict\u662f\u6d4b\u8bd5\u7684\u51fd\u6570\n\n# \u6d4b\u8bd5\u8fc7\u7a0b\nn_test = 100\nprint(knc.predict(x_test[0:100]) == y_test[0:100].flatten())\nprint(np.sum(knc.predict(x_test[0:100]) == y_test[0:100].flatten())) # predict\u662f\u6d4b\u8bd5\u7684\u51fd\u6570\n# \u8f93\u51fa100\u4e2a\u6570\u636e\u4e2d\u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570","41b5318b":"# \u753b\u51fa\u5206\u7c7b\u9519\u8bef\u7684\u56fe\u50cf\nfor i in np.where(knc.predict(x_test[0:100]) != y_test[0:100].flatten())[0]:\n    plt.imshow(x_test[i].reshape(32, 32, 3))\n    plt.show()\n    if i>30:\n        break","bedd0f95":"# matplotlib \u57fa\u7840\u64cd\u4f5c","0df4441d":"### \u7528 pandas \u76f4\u63a5\u8bfb\u53d6 csv \u6587\u4ef6","89d843f9":"### \u8fd0\u884c","a60b5571":"# \u53ef\u89c6\u5316 MNIST \u6570\u636e\u96c6","1e332c94":"### \u8bfb\u53d6 MNIST \u6570\u636e\u96c6","6ee12294":"### \u8fd0\u884c","97bd7419":"# numpy \u57fa\u7840\u64cd\u4f5c","44ab514f":"\u53ef\u4ee5\u770b\u5230\u7b2c\u4e00\u884c\u662f csv \u6587\u4ef6\u7684 header\uff0c\u4ee3\u8868\u4e86\u6bcf\u4e00\u5217\u662f\u4ec0\u4e48\n\n\u7b2c\u4e8c\u884c\u5f00\u59cb\u5219\u662f\u6570\u636e\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u503c\u662f\u6807\u7b7e\uff0c\u7b2c\u4e8c\u4e2a\u503c\u5230\u6700\u540e\u4e00\u4e2a\u503c\u662f\u50cf\u7d20\u70b9\u7684\u503c\n\n\u6211\u4eec\u5c1d\u8bd5\u8bfb\u53d6\u4e00\u884c\u6570\u636e\uff0c\u5e76\u628a\u56fe\u7247\u753b\u51fa\u6765","3e579641":"### \u8bfb\u53d6 CIFAR10 \u6570\u636e\u96c6","c2b3c029":"### \u5b9e\u73b0\u5168\u8fde\u63a5\u5c42 y = x @ w + b","0dfad50a":"# \u7c7b\u7684\u8bd5\u7528","be076c6b":"# \u4f7f\u7528 Sklearn \u8fdb\u884c K\u8fd1\u90bb\u7b97\u6cd5 \u5206\u7c7b","64a63cd9":"### \u753b\u51fasigmoid\u51fd\u6570"}}