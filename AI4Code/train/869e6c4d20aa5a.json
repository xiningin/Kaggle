{"cell_type":{"5ab22cbd":"code","c54249d0":"code","e432b57b":"code","71bf50e9":"code","6b013975":"code","033c81a4":"code","87d66b6e":"code","ddc40404":"code","f1fc98df":"code","61301291":"code","f35492df":"code","1c5a9114":"code","39cc8efa":"code","6c72cabf":"markdown","005a88f5":"markdown","f2f27ce5":"markdown","3b9d3136":"markdown","b294afa6":"markdown","bce43f68":"markdown","062c0a20":"markdown","e2d07b20":"markdown","9b3c00cf":"markdown","06747ab6":"markdown","58d2bc90":"markdown"},"source":{"5ab22cbd":"from keras.datasets import cifar10\nfrom tensorflow.keras.layers import Conv2D,MaxPooling2D\nfrom keras.layers.core import  Dense, Dropout, Activation\nfrom keras.models import Sequential\n\nimport matplotlib.pyplot as plt\nfrom keras import models,layers\nfrom tensorflow.keras.utils import to_categorical\nfrom keras import optimizers\nimport numpy as np","c54249d0":"(xtrain, ytrain), (xtest, ytest) = cifar10.load_data()\nprint(xtrain.shape)\nprint(xtest.shape)\nprint(ytrain.shape)\nprint(ytest.shape)","e432b57b":"# convert the pixel values in float\nxtrain = xtrain.astype('float32')\nxtest = xtest.astype('float32')\n# scale the images\nxtrain \/= 255  # ths is eqvalent to xtrain = xtrain\/255 \nxtest \/= 255\nytrain = to_categorical(ytrain)\nytest = to_categorical(ytest)   ","71bf50e9":"labels=['airplane', 'automobile','bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']","6b013975":"#explore data\nprint(ytrain[2000])\nplt.imshow(xtrain[2000])\nplt.show()","033c81a4":"from datetime import datetime\ndef timer(start_time=None):\n    if not start_time:\n        print(datetime.now())\n        start_time = datetime.now()\n        return start_time\n    elif start_time:\n        thour, temp_sec = divmod((datetime.now() - start_time).total_seconds(), 3600)\n        tmin, tsec = divmod(temp_sec, 60)\n        print('Time taken: %i hours %i minutes and %s seconds.' % (thour, tmin, round(tsec, 2)))","87d66b6e":"print(xtrain[10])","ddc40404":"ytrain[10]","f1fc98df":"model = models.Sequential()\n\nmodel.add(layers.Conv2D(32, (3, 3), padding='same', activation='relu', input_shape=(32,32,3)))\nmodel.add(layers.Conv2D(32,(3,3), padding='same',activation='relu'))\nmodel.add(layers.MaxPooling2D(pool_size=2)) \nmodel.add(layers.Dropout(0.2))\n\nmodel.add(layers.Conv2D(64,(3,3), padding='same',activation='relu'))\nmodel.add(layers.Conv2D(128,(3,3), padding='same',activation='relu'))\nmodel.add(layers.MaxPooling2D(pool_size=2)) \nmodel.add(layers.Dropout(0.2))\n\nmodel.add(layers.Conv2D(64,(3,3), padding='same',activation='relu'))\nmodel.add(layers.Conv2D(64,(3,3), padding='same',activation='relu'))\nmodel.add(layers.MaxPooling2D(pool_size=2)) \nmodel.add(layers.Dropout(0.2))\n\n#Classification layers\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(512,activation='relu'))\nmodel.add(layers.Dropout(0.2))\nmodel.add(layers.Dense(64,activation='relu'))\nmodel.add(layers.Dropout(0.2))\nmodel.add(layers.Dense(10,activation='softmax'))  # this is the actual output layer\n\n# initiate Adam optimizer\nopt = optimizers.Adam(learning_rate=1e-4, decay=1e-6)\n\n# Let's train the model \nmodel.compile(loss='categorical_crossentropy',\n              optimizer=opt,\n              metrics=['accuracy'])\n","61301291":"model.summary()","f35492df":"start_time=timer(None)\nresult = model.fit(\n    xtrain,\n    ytrain,\n    validation_split=0.1,    \n    verbose=True,\n    epochs=125,\n    steps_per_epoch= 64,\n    batch_size=512\n    )\ntimer(start_time)","1c5a9114":"plt.figure(figsize=(20, 10))\nplt.subplot(1, 2, 1)\nplt.title(\"CNN Training and Validation Accuracy\")\nplt.plot(result.history[\"accuracy\"], label='Training Accuracy')\nplt.plot(result.history['val_accuracy'], label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.subplot(1, 2, 2)\nplt.plot( result.history[\"loss\"], label='Training Loss')\nplt.plot( result.history[\"val_loss\"], label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('CNN Training and Validation Loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.show()","39cc8efa":"# check performance on test\nscores = model.evaluate(xtest, ytest, verbose=1) \nprint('Test loss:', scores[0])\nprint('Test accuracy:', scores[1])","6c72cabf":"# Cifar Solution:","005a88f5":"## Name: Sailesh Nair","f2f27ce5":"## Viewing the Model Summary","3b9d3136":"### Testing Accuracy is 76%","b294afa6":"## Result: ","bce43f68":"## Check performance on test","062c0a20":"## Fitting the Model","e2d07b20":"## Creating the Model Layers","9b3c00cf":"### So the model's final Training Accuracy is 79% ","06747ab6":"### Validation Accuracy is 77% ","58d2bc90":"##Visualizing the performance"}}