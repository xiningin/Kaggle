{"cell_type":{"076fb971":"code","0ffd1a52":"code","229b37ba":"code","2dc33718":"code","d961b8b5":"code","f7665bbd":"code","5bf0c4e1":"code","5502c55a":"code","4c74dff0":"code","6b94d454":"code","1c160aeb":"code","75b2bad4":"code","9d470e20":"code","d9599044":"code","368477b3":"code","36cbae81":"code","877bcfd5":"code","4daf1a6a":"code","59aab4e3":"code","c6c19056":"code","123fb3d0":"code","6a736f53":"code","da3c567f":"code","44700ab0":"code","76021b3f":"code","93c7bbfe":"code","3b0cc7c2":"code","688369d5":"code","554e1a90":"code","4269b6cd":"code","574f1a4e":"code","9fde3a5f":"code","7ec003ab":"code","dda838da":"code","fcdaacfb":"code","6e9db645":"code","57fedc42":"code","6a93d53c":"code","57c379bf":"markdown","ebb02573":"markdown","5d3694af":"markdown","2711f354":"markdown","fe612db0":"markdown","a56eb4e4":"markdown","d9315bc9":"markdown","ea66e7c7":"markdown","75b432ee":"markdown","43480314":"markdown","36b141f6":"markdown","81393850":"markdown","fee1cef7":"markdown","481a5adb":"markdown","ab37b4f6":"markdown","8d230a0b":"markdown","027af20c":"markdown","d44527e6":"markdown","4470cc16":"markdown","0af87296":"markdown","f55f67f6":"markdown"},"source":{"076fb971":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ffd1a52":"df=pd.read_csv('\/kaggle\/input\/telecom-churn\/telecom_churn.csv')\ndf.shape","229b37ba":"df.head(5)","2dc33718":"df.info()","d961b8b5":"df.describe().T","f7665bbd":"import matplotlib.pyplot as plt\nimport seaborn as sns","5bf0c4e1":"plt.figure(figsize=(7,7))\nplt.pie(\n    df['Churn'].value_counts(sort=True)\n    , labels=['Churned', 'Stayed']\n    , autopct='%1.1f%%'\n    , textprops={'fontsize':14}\n)\n\nplt.show()","5502c55a":"df.hist(\n    figsize=(15,15)\n    , bins=50\n);","4c74dff0":"plt.figure(figsize=(15,15))\nsns.heatmap(\n    df.corr()\n    , annot=True\n);","6b94d454":"for a_col in ['DataPlan', 'DataUsage', 'MonthlyCharge']:\n    print(f'{a_col} correlation to \"Churn\" is {df[a_col].corr(df[\"Churn\"])}')","1c160aeb":"from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.metrics import precision_recall_curve, auc, roc_curve","75b2bad4":"y=df['Churn']\nX=df[[col for col in df.columns if col!='Churn']]","9d470e20":"X","d9599044":"X_scaled=pd.DataFrame(StandardScaler().fit_transform(X), columns=df.columns[1:])\nX_scaled","368477b3":"# train and test split\nX_trainval, X_test, y_trainval, y_test = train_test_split(\n    X_scaled\n    , y\n    , test_size=0.2\n    , random_state=1\n)","36cbae81":"# train and validation split\nX_train, X_val, y_train, y_val = train_test_split(\n    X_trainval\n    , y_trainval\n    , test_size=0.2\n    , random_state=1\n)","877bcfd5":"def modelling(classifiers, X_train, y_train, X_val, y_val):\n    \n    for i, clf in enumerate(classifiers):\n        model = clf#.__class__.__name__\n        model.fit(X_train, y_train)\n        pred_y=model.predict(X_val)\n        \n        score = accuracy_score(y_val, pred_y)\n        \n        fpr, tpr, threshholds=roc_curve(y_val, pred_y)\n        auc_score=auc(fpr, tpr)\n        cross_val = cross_val_score(model, X_val, y_val)\n\n        print(f'\\n{model}\\nModel accuracy: {score}.\\nauc={auc_score}\\nCross-valdation score: {cross_val.mean()}.')","4daf1a6a":"clf_list = [\n    LogisticRegression(random_state=1, solver='liblinear')\n    , DecisionTreeClassifier(random_state=1, max_depth = 8)\n    , RandomForestClassifier(random_state=1, max_depth=8)\n    , KNeighborsClassifier()\n    , GaussianNB()\n    , SVC()\n    , GradientBoostingClassifier(random_state=1)\n    , XGBClassifier(\n        random_state=1\n        , use_label_encoder=False\n        , max_depth=8\n    )]\n\n#modelling(clf_list)","59aab4e3":"modelling(\n    clf_list\n    , X_train=X_train\n    , X_val=X_val\n    , y_train=y_train\n    , y_val=y_val\n)","c6c19056":"def confusion_matrices(clfs, X_train, y_train, X_val, y_val):\n    \n    for i, clf in enumerate(clfs):\n        name=clf\n        clf.fit(X_train, y_train)\n        pred_y=clf.predict(X_val)\n        #matrix_norm=confusion_matrix(y_val, pred_y, normalize='all')\n        matrix=confusion_matrix(y_val, pred_y)\n        class_rep=classification_report(y_val, pred_y)\n        print(f'\\n{name} Confusion Matrix:\\n{matrix}\\n{class_rep}')","123fb3d0":"confusion_matrices(\n    clf_list\n    , X_train=X_train\n    , X_val=X_val\n    , y_train=y_train\n    , y_val=y_val\n)","6a736f53":"from imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler","da3c567f":"y_train.value_counts()","44700ab0":"sm=SMOTE(\n    sampling_strategy='auto'\n    , k_neighbors=2\n    , random_state=1\n)","76021b3f":"X_sm_train, y_sm_train = sm.fit_resample(X_train, y_train)","93c7bbfe":"y_sm_train.value_counts()","3b0cc7c2":"modelling(\n    clf_list\n    , X_train=X_sm_train\n    , y_train=y_sm_train\n    , X_val=X_val\n    , y_val=y_val\n)","688369d5":"confusion_matrices(\n    clf_list\n    , X_train=X_sm_train\n    , y_train=y_sm_train\n    , X_val=X_val\n    , y_val=y_val\n)","554e1a90":"rus=RandomUnderSampler()","4269b6cd":"X_rus_train, y_rus_train = rus.fit_resample(X_train, y_train)","574f1a4e":"y_rus_train.value_counts()","9fde3a5f":"modelling(\n    clf_list\n    , X_train=X_rus_train\n    , y_train=y_rus_train\n    , X_val=X_val\n    , y_val=y_val\n)","7ec003ab":"confusion_matrices(\n    clf_list\n    , X_train=X_rus_train\n    , y_train=y_rus_train\n    , X_val=X_val\n    , y_val=y_val\n)","dda838da":"def rfc(X_train, X_val, y_train, y_val, estim=100, depth=8, leaf_nodes=None):\n    # define model\n    model=RandomForestClassifier(\n        random_state=1\n        , n_estimators=estim\n        , max_depth=depth\n        , max_leaf_nodes=leaf_nodes\n    )\n    \n    modelling(\n        [model]\n        , X_train=X_train\n        , y_train=y_train\n        , X_val=X_val\n        , y_val=y_val\n    )\n    \n    confusion_matrices(\n        [model]\n        , X_train=X_train\n        , y_train=y_train\n        , X_val=X_val\n        , y_val=y_val\n    )","fcdaacfb":"rfc(\n    X_train=X_train\n    , y_train=y_train\n    , X_val=X_val\n    , y_val=y_val\n)","6e9db645":"rf_model=RandomForestClassifier(random_state=1, max_depth=8)\nrf_model.fit(X_rus_train, y_rus_train)\nfeat_importances=pd.Series(\n    rf_model.feature_importances_\n    , index=df.columns[1:]\n)\nfeat_importances.nlargest(20).plot(kind='barh', figsize=(10,10));","57fedc42":"rfc(\n    X_train=X_train.drop('DataPlan', axis=1)\n    , y_train=y_train\n    , X_val=X_val.drop('DataPlan', axis=1)\n    , y_val=y_val\n)","6a93d53c":"rfc(\n    estim=100\n    , depth=8\n    , X_train=X_trainval.drop('DataPlan', axis=1)\n    , X_val=X_test.drop('DataPlan', axis=1)\n    , y_train=y_trainval\n    , y_val=y_test\n)","57c379bf":"Most of the columns are normally distributed","ebb02573":"## Creating models","5d3694af":"There is a high degree of correlation of 'Churn' column to 'DayMins', 'CustServCalls' and 'ContractRenewal'.<br>\nColumns 'DataPlan', 'DataUsage' and 'MonthlyCharge' are also highly correlated. The common advice is to get rid of one of correlated features, but it is better to do it after fitting the model and checking feature importance. So we are not going to drop any of the correlated features now.","2711f354":"## Data splitting","fe612db0":"# final test","a56eb4e4":"First of all I notice that RandomForestClassifier() performs better compared to other models. <br>\nAs for dataset balancing - its tricky. Let's compare the results: <br>\n\n![image.png](attachment:87563896-b724-4563-b75f-834bd4340fee.png)\n\nYou can see that the model with unbalanced data has the lowest precision and the highest recall rates for churn, while the model with undersampled data has the highest precision and the lowest recall rates. <br>\n\nAs a quick reminder: <br>\n    * precision rate - correct churn predictions \/ all churn predictions <br>\n    * recall rate - correct churn predictions \/ actual churn <br>\n    \nIn case of churn prediction I'd prefer my model to have higher recall rate rather than precision, so I am going to use the unbalanced dataset for model training.\n","d9315bc9":"# EDA","ea66e7c7":"There are no missing values and no categorical variables in the dataset.","75b432ee":"# Data Overview","43480314":"## Feature selection","36b141f6":"**Goal:** to correctly identify customers who will churn so that we can keep them <br>\n\n**Variables**: <br>\nChurn: 1 if customer cancelled service, 0 if not <br>\nAccountWeeks: number of weeks customer has had active account <br>\nContractRenewal: 1 if customer recently renewed contract, 0 if not <br>\nDataPlan: 1 if customer has data plan, 0 if not <br>\nDataUsage: gigabytes of monthly data usage <br>\nCustServCalls: number of calls into customer service <br>\nDayMins: average daytime minutes per month <br>\nDayCalls: average number of daytime calls <br>\nMonthlyCharge: average monthly bill <br>\nOverageFee: largest overage fee in last 12 months <br>\nRoamMins: average number of roaming minutes <br>\n","81393850":"### Oversampling","fee1cef7":"'DataPlan' is the least affecting feature for the model. <br>\nLet's see if we can improve model metrics by removing this feature.","481a5adb":"I am going to use StandardScaler to level-up the scale difference of features","ab37b4f6":"# Introduction","8d230a0b":"### Undersampling","027af20c":"## Resampling the dataset","d44527e6":"# Modeling","4470cc16":"We can see that the dataset is highly imbalanced which is going to result in a model biased towards 'Churn'. Nevertheless we are going to first train our model on the original dataset and then use resampling methods to compare the results.","0af87296":"## Evaluating","f55f67f6":"Next I am going to resample the training dataset and then compare the results to find which approach is better."}}