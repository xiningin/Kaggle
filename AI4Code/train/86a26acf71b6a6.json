{"cell_type":{"18fe76c7":"code","df857421":"code","b993b3f1":"code","b93027ff":"code","200f2e0b":"code","4fa5b0e4":"code","86027cab":"code","0fbbf1dc":"code","60ccad5d":"code","7179e6c9":"code","c642fe9f":"code","6ad1db7b":"code","dbd6afd5":"code","07bb3423":"code","ca8b3fd6":"code","52f4ab9e":"code","5bc74fb9":"code","4999a62a":"code","da299681":"code","5226a249":"code","0b7a79d4":"code","6038c25e":"code","1ad6f264":"code","5b195a03":"code","a8190bb6":"code","c85adbf9":"code","14bf3962":"code","09813087":"code","08cfbcee":"code","14b6e6fb":"code","4f684fce":"code","2426b32d":"code","6fcec38d":"code","e8f09ac2":"code","3b12b1bd":"code","522fc3d8":"code","06902a7e":"code","8dc9f387":"code","b4ef7cf3":"code","644926d8":"code","37bc3415":"code","921dd71c":"code","3b20ebb0":"code","a1a98b73":"code","9effaa80":"code","a4aa2849":"code","74d9a6c2":"code","72f422f1":"code","e2d1daf1":"code","a2913847":"code","fdc13a6d":"code","c59ba60e":"code","784fc3ac":"code","6fd46718":"code","a1906865":"code","3234551b":"code","bbea205b":"code","0b32fa28":"code","83d66c54":"code","c5eebb41":"code","b1a27551":"code","600630eb":"code","2f14776b":"code","a9e11c6e":"code","7c9e5936":"code","0adaa7e2":"code","c8d8332c":"code","b8bb63e0":"code","8dc8314b":"code","8e5fc5f3":"code","eadffcf2":"code","fce3d712":"code","5469a198":"code","91b5ef30":"code","ff1d04c0":"code","7d9da222":"code","5d86a34a":"code","8c3c71c4":"code","aa1a04c2":"code","d1bd74a6":"code","c9d87cc6":"code","50ec4d0e":"code","edfc743e":"code","a091bb87":"code","9b645e07":"code","1906188b":"code","55153b8c":"code","6b3975ce":"code","6feec733":"code","6cc71994":"code","297174d8":"code","866cd6cd":"markdown","9f09f4f4":"markdown","36ac0ce0":"markdown","affac21c":"markdown","0bf9ac62":"markdown","c3b8b1c2":"markdown","1b2f7cd1":"markdown","0c4ff2c5":"markdown","5e4049b5":"markdown","701132ac":"markdown","5c910d60":"markdown","07eeef0e":"markdown","67b2c582":"markdown","c4ed62c9":"markdown","392aa75f":"markdown","cbce15b4":"markdown","d3c86a3a":"markdown","4cdd1b5c":"markdown","253ddf29":"markdown","764b7f11":"markdown","eb81c5ca":"markdown","b35f7685":"markdown","449121dd":"markdown","a47aee06":"markdown","24fef825":"markdown","12851429":"markdown"},"source":{"18fe76c7":"# Import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline","df857421":"df = pd.read_csv('..\/input\/lending-club-loan-data\/lending_club_loan_two.csv')","b993b3f1":"df.info()","b93027ff":"sns.countplot(df['loan_status'])\nplt.show()","200f2e0b":"plt.figure(figsize=(12,4))\nplt.xlim(0,45000)\nsns.distplot(df['loan_amnt'], kde=False)\nplt.show()","4fa5b0e4":"# Examining the correlation of all numerical features to one another\ndf.corr()","86027cab":"plt.figure(figsize=(12,8))\nsns.heatmap(df.corr(), annot=True, cmap='coolwarm')\nplt.ylim(12,0)\nplt.show()","0fbbf1dc":"sns.scatterplot(x='installment', y='loan_amnt', data=df, alpha=0.1, edgecolor=None)\nplt.show()","60ccad5d":"sns.boxplot(x='loan_status', y='loan_amnt', data=df)\nplt.show()","7179e6c9":"df.groupby('loan_status')['loan_amnt'].describe()","c642fe9f":"grades = sorted(df['grade'].unique())\nsub_grades = sorted(df['sub_grade'].unique())","6ad1db7b":"sns.countplot(x='grade', data=df, hue=df['loan_status'], order=grades, palette='seismic')\nplt.show()","dbd6afd5":"plt.figure(figsize=(14,4))\nsns.countplot(x='sub_grade', data=df, alpha=0.8, order=sub_grades, palette='seismic')\nplt.show()","07bb3423":"plt.figure(figsize=(14,4))\nsns.countplot(x='sub_grade', data=df, alpha=0.8, hue='loan_status', order=sub_grades, palette='seismic')\nplt.show()","ca8b3fd6":"df_f_g = df[(df['grade'] == 'F') | (df['grade'] == 'G')]\nFG_grades = sorted(df_f_g['sub_grade'].unique())","52f4ab9e":"plt.figure(figsize=(12,4))\nsns.countplot(x='sub_grade', data=df_f_g, hue='loan_status', order=FG_grades, palette='seismic')\nplt.show()","5bc74fb9":"# Mapping target to binary\ndf['loan_repaid'] = df['loan_status'].map({'Fully Paid': 1, 'Charged Off': 0})","4999a62a":"df[['loan_repaid', 'loan_status']]","da299681":"df.corr()['loan_repaid'].sort_values()","5226a249":"plt.figure(figsize=(10,6))\ndf.corr()['loan_repaid'].drop('loan_repaid').sort_values().plot(kind='barh')\nplt.show()","0b7a79d4":"df.head()","6038c25e":"len(df)","1ad6f264":"df.isnull().sum()","5b195a03":"# Percentage of missing values per feature\ndf.isnull().sum() \/ len(df) * 100","a8190bb6":"df['emp_title'].nunique()","c85adbf9":"df['emp_title'].value_counts()","14bf3962":"# Dropping 'emp_title' feature\ndf = df.drop('emp_title', axis=1)","09813087":"list(df['emp_length'].unique())","08cfbcee":"sorted_emp_length = ['< 1 year',\n '1 year',\n '2 years',\n '3 years',\n '4 years',\n '5 years',\n '6 years',\n '7 years',\n '8 years',\n '9 years',\n '10+ years']","14b6e6fb":"plt.figure(figsize=(12,4))\nsns.countplot(x=df['emp_length'], order=sorted_emp_length)\nplt.show()","4f684fce":"plt.figure(figsize=(12,4))\nsns.countplot(x='emp_length', data=df, order=sorted_emp_length, hue='loan_status')\nplt.show()","2426b32d":"default_count = df[df['loan_repaid'] == 0].groupby('emp_length').count()['loan_repaid']\ntotal_count = df.groupby('emp_length').count()['loan_repaid']\npercent_default = default_count \/ total_count","6fcec38d":"emp_length_series = pd.Series(percent_default)\nemp_length_series","e8f09ac2":"emp_length_series.index.values","3b12b1bd":"plt.figure(figsize=(10,4))\nsns.barplot(x=emp_length_series.index, y=emp_length_series.values, order=sorted_emp_length)\nplt.show()","522fc3d8":"# Dropping 'emp_length' feature.\ndf = df.drop('emp_length', axis=1)","06902a7e":"# Remaining null values to deal with\ndf.isnull().sum()","8dc9f387":"df[['purpose', 'title']]","b4ef7cf3":"# Dropping 'title' feature\ndf = df.drop('title', axis=1)","644926d8":"# Investigating 'mort_acc' feature\ndf['mort_acc'].value_counts()","37bc3415":"# Investigating 'mort_acc' correlation with other features.\ndf.corr()['mort_acc'].sort_values()","921dd71c":"total_acc_avg = df.groupby('total_acc')['mort_acc'].mean()\ntotal_acc_avg","3b20ebb0":"sns.scatterplot(x='total_acc', y='mort_acc', data=df, alpha=0.1, edgecolor=None)\nplt.show()","a1a98b73":"# Missing values in 'mort_acc' will be filled in based its average value based on 'total_acc' grouping \ndef fill_mort_acc(total_acc, mort_acc):\n    if np.isnan(mort_acc):\n        return total_acc_avg[total_acc]\n    else: \n        return mort_acc","9effaa80":"df['mort_acc'] = df.apply(lambda x: fill_mort_acc(x['total_acc'], x['mort_acc']), axis=1)","a4aa2849":"# Recheck missing data\ndf.isnull().sum()","74d9a6c2":"# Dropping the rest of the missing values.\ndf = df.dropna()","72f422f1":"df.isnull().sum()","e2d1daf1":"# Numberical features\ndf.select_dtypes(exclude=['object']).columns","a2913847":"# Categorical features\ndf.select_dtypes(include=['object']).columns","fdc13a6d":"df.info()","c59ba60e":"# Converting 'term' data from str to int\ndf['term'] = df['term'].map({' 36 months': 36, ' 60 months': 60})","784fc3ac":"df['term']","6fd46718":"# Dropping 'grade' feature\ndf = df.drop('grade', axis=1)","a1906865":"# Converting 'sub_grade' feature into dummy variables\ndf_subgrade_dummies = pd.get_dummies(df['sub_grade'], drop_first=True)","3234551b":"# Concatenating 'sub_grade' dummies to primary dataframe.\ndf = pd.concat([df, df_subgrade_dummies], axis=1)","bbea205b":"# Dropping original 'sub_grade' feature\ndf = df.drop('sub_grade', axis=1)","0b32fa28":"df.columns","83d66c54":"# Creating more dummy variables for the following features: 'verification_status', 'application_type', 'initial_list_status', 'purpose'\ndf_more_dummies = pd.get_dummies(df[['verification_status', 'application_type', 'initial_list_status', 'purpose']], drop_first=True)\ndf_more_dummies.head()","c5eebb41":"# Concatenating additional dummy variables to primary dataframe\ndf = pd.concat([df, df_more_dummies], axis=1)","b1a27551":"# Dropping the 'verification_status', 'application_type', 'initial_list_status', and 'purpose' features \ndf = df.drop(['verification_status', 'application_type', 'initial_list_status', 'purpose'], axis=1)","600630eb":"df.columns","2f14776b":"df['home_ownership'].value_counts()","a9e11c6e":"# Grouping 'NONE' and 'ANY' with 'OTHER' in the 'home_ownership' feature\ndf['home_ownership'] = df['home_ownership'].replace(['NONE', 'ANY'], 'OTHER')","7c9e5936":"# Rechecking 'home_ownership' feature\ndf['home_ownership'].value_counts()","0adaa7e2":"# Converting 'home_ownership' to dummy variables and adding them to primary dataframe\ndf_home_dummies = pd.get_dummies(df['home_ownership'], drop_first=True)\ndf = pd.concat([df, df_home_dummies], axis=1)\ndf = df.drop('home_ownership', axis=1)\ndf.columns","c8d8332c":"# Extracting zipcode from first row\ndf['address'][0][-5:]","b8bb63e0":"# Creating a new feature 'zipcode'\ndf['zipcode'] = df['address'].apply(lambda x: x[-5:])","8dc8314b":"df['zipcode'].value_counts()","8e5fc5f3":"# Creating dummy variables for 'zipcode' feature\ndf_zipcode_dummies = pd.get_dummies(df['zipcode'], drop_first=True)\ndf = pd.concat([df, df_zipcode_dummies], axis=1)\n\n# Dropping 'address' feature\ndf = df.drop(['zipcode', 'address'], axis=1)\ndf.columns","eadffcf2":"# Issue date would be listed only if a loan was issued. Feature will be dropped to avoid data leakage.\ndf = df.drop('issue_d', axis=1)","fce3d712":"df['earliest_cr_line']","5469a198":"# Extracting year from 'earliest_cr_line' and creating a new features 'year' as an integer\ndf['earliest_cr_year'] = df['earliest_cr_line'].apply(lambda x: int(x[-4:]))","91b5ef30":"# Dropping 'earliest_cr_line' feature\ndf = df.drop('earliest_cr_line', axis=1)","ff1d04c0":"df.columns","7d9da222":"# Dropping 'loan_status' label. Target was earlier converted to 'loan_repaid'.\ndf = df.drop('loan_status', axis=1)","5d86a34a":"df.info()","8c3c71c4":"from sklearn.model_selection import train_test_split\nX = df.drop('loan_repaid', axis=1)\ny = df['loan_repaid']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=19)","aa1a04c2":"# Normalizing and scaling features\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n# Fitting and transforming training and test sets\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","d1bd74a6":"X_test_scaled","c9d87cc6":"y_train = y_train.values\ny_test = y_test.values","50ec4d0e":"# Importing tensorflow\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout","edfc743e":"# Instantiate model\nmodel = Sequential()\n\n# input layer\nmodel.add(Dense(units=78, activation='relu'))\nmodel.add(Dropout(0.25))\n\n# hidden layers\nmodel.add(Dense(units=39, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(units=19, activation='relu'))\nmodel.add(Dropout(0.25))\n\n# output layer\nmodel.add(Dense(units=1, activation='sigmoid'))\n\n# compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam')","a091bb87":"# Fitting model\nmodel.fit(X_train_scaled, y_train, epochs=25, validation_data=(X_test_scaled, y_test), batch_size=256)","9b645e07":"# Saving model\nfrom tensorflow.keras.models import load_model\nmodel.save('Client_Loan_ANN_model.h5')","1906188b":"# Creating dataframe including training loss values vs. validation loss values\ndf_model = pd.DataFrame(model.history.history)\ndf_model.head()","55153b8c":"df_model.plot()\nplt.show()","6b3975ce":"# Creating predictions using model\ny_pred = model.predict_classes(X_test_scaled)","6feec733":"from sklearn.metrics import confusion_matrix, classification_report","6cc71994":"y_test.shape","297174d8":"print(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))","866cd6cd":"# Model Performance","9f09f4f4":"Plotting loss of training data vs. validation data to ensure we are not overfitting the model to the training dataset.","36ac0ce0":"**Exploring missing data**","affac21c":"We can extract the zipcode from address and create a new feature 'zipcode'","0bf9ac62":"**Information on the features of this dataset:**\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th><\/th>\n      <th>LoanStatNew<\/th>\n      <th>Description<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <th>0<\/th>\n      <td>loan_amnt<\/td>\n      <td>The listed amount of the loan applied for by the borrower. If at some point in time, the credit department reduces the loan amount, then it will be reflected in this value.<\/td>\n    <\/tr>\n    <tr>\n      <th>1<\/th>\n      <td>term<\/td>\n      <td>The number of payments on the loan. Values are in months and can be either 36 or 60.<\/td>\n    <\/tr>\n    <tr>\n      <th>2<\/th>\n      <td>int_rate<\/td>\n      <td>Interest Rate on the loan<\/td>\n    <\/tr>\n    <tr>\n      <th>3<\/th>\n      <td>installment<\/td>\n      <td>The monthly payment owed by the borrower if the loan originates.<\/td>\n    <\/tr>\n    <tr>\n      <th>4<\/th>\n      <td>grade<\/td>\n      <td>LC assigned loan grade<\/td>\n    <\/tr>\n    <tr>\n      <th>5<\/th>\n      <td>sub_grade<\/td>\n      <td>LC assigned loan subgrade<\/td>\n    <\/tr>\n    <tr>\n      <th>6<\/th>\n      <td>emp_title<\/td>\n      <td>The job title supplied by the Borrower when applying for the loan.*<\/td>\n    <\/tr>\n    <tr>\n      <th>7<\/th>\n      <td>emp_length<\/td>\n      <td>Employment length in years. Possible values are between 0 and 10 where 0 means less than one year and 10 means ten or more years.<\/td>\n    <\/tr>\n    <tr>\n      <th>8<\/th>\n      <td>home_ownership<\/td>\n      <td>The home ownership status provided by the borrower during registration\u00a0or obtained from the credit report.\u00a0Our values are: RENT, OWN, MORTGAGE, OTHER<\/td>\n    <\/tr>\n    <tr>\n      <th>9<\/th>\n      <td>annual_inc<\/td>\n      <td>The self-reported annual income provided by the borrower during registration.<\/td>\n    <\/tr>\n    <tr>\n      <th>10<\/th>\n      <td>verification_status<\/td>\n      <td>Indicates if income was verified by LC, not verified, or if the income source was verified<\/td>\n    <\/tr>\n    <tr>\n      <th>11<\/th>\n      <td>issue_d<\/td>\n      <td>The month which the loan was funded<\/td>\n    <\/tr>\n    <tr>\n      <th>12<\/th>\n      <td>loan_status<\/td>\n      <td>Current status of the loan<\/td>\n    <\/tr>\n    <tr>\n      <th>13<\/th>\n      <td>purpose<\/td>\n      <td>A category provided by the borrower for the loan request.<\/td>\n    <\/tr>\n    <tr>\n      <th>14<\/th>\n      <td>title<\/td>\n      <td>The loan title provided by the borrower<\/td>\n    <\/tr>\n    <tr>\n      <th>15<\/th>\n      <td>zip_code<\/td>\n      <td>The first 3 numbers of the zip code provided by the borrower in the loan application.<\/td>\n    <\/tr>\n    <tr>\n      <th>16<\/th>\n      <td>addr_state<\/td>\n      <td>The state provided by the borrower in the loan application<\/td>\n    <\/tr>\n    <tr>\n      <th>17<\/th>\n      <td>dti<\/td>\n      <td>A ratio calculated using the borrower\u2019s total monthly debt payments on the total debt obligations, excluding mortgage and the requested LC loan, divided by the borrower\u2019s self-reported monthly income.<\/td>\n    <\/tr>\n    <tr>\n      <th>18<\/th>\n      <td>earliest_cr_line<\/td>\n      <td>The month the borrower's earliest reported credit line was opened<\/td>\n    <\/tr>\n    <tr>\n      <th>19<\/th>\n      <td>open_acc<\/td>\n      <td>The number of open credit lines in the borrower's credit file.<\/td>\n    <\/tr>\n    <tr>\n      <th>20<\/th>\n      <td>pub_rec<\/td>\n      <td>Number of derogatory public records<\/td>\n    <\/tr>\n    <tr>\n      <th>21<\/th>\n      <td>revol_bal<\/td>\n      <td>Total credit revolving balance<\/td>\n    <\/tr>\n    <tr>\n      <th>22<\/th>\n      <td>revol_util<\/td>\n      <td>Revolving line utilization rate, or the amount of credit the borrower is using relative to all available revolving credit.<\/td>\n    <\/tr>\n    <tr>\n      <th>23<\/th>\n      <td>total_acc<\/td>\n      <td>The total number of credit lines currently in the borrower's credit file<\/td>\n    <\/tr>\n    <tr>\n      <th>24<\/th>\n      <td>initial_list_status<\/td>\n      <td>The initial listing status of the loan. Possible values are \u2013 W, F<\/td>\n    <\/tr>\n    <tr>\n      <th>25<\/th>\n      <td>application_type<\/td>\n      <td>Indicates whether the loan is an individual application or a joint application with two co-borrowers<\/td>\n    <\/tr>\n    <tr>\n      <th>26<\/th>\n      <td>mort_acc<\/td>\n      <td>Number of mortgage accounts.<\/td>\n    <\/tr>\n    <tr>\n      <th>27<\/th>\n      <td>pub_rec_bankruptcies<\/td>\n      <td>Number of public record bankruptcies<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>","c3b8b1c2":"Some notes on feature correlation: <br>\n- 'installment' and 'loan amnt' are nearly perfectly correlation. <br>\n- We want to make sure we are not subjecting our model to data leakage here. <br>\n- Looking back at the description of 'installment': The monthly payment owed by the borrower *if* the loan originates. Keyword - here is \"if\" so this data is collected before a loan has been given or not. So no data leakage here.","1b2f7cd1":"The feature 'total_acc' has the highest correlation to 'mort_acc'. We can group the dataframe by 'total_acc' and use the mean of 'mort_acc' based on the 'total_acc' group.","0c4ff2c5":"# Exploratory Data Analysis","5e4049b5":"# Creating an Artificial Neural Network Model","701132ac":"Note: Not much clarity to see if there is a strong relationship between employment length and loan being charged off.","5c910d60":"All missing values have been addressed.","07eeef0e":"**Creating dummy variables for categorical features**","67b2c582":"Notes: It apppears loans given out to clients in grades 'F' and 'G' had a greater perentage of being charged off.","c4ed62c9":"Note: Title repeats information found in purpose. 'Purpose' feature is therefore dropped, taking care of those missing values.","392aa75f":"## Loading Data and Library Imports","cbce15b4":"There are quite a lot of unique titles under 'emp_title' and one-hot encoding this feature will results in way too many new features. Because of this, this features was dropped.","d3c86a3a":"There seems to be spikes at every $5000 increment.","4cdd1b5c":"No significant difference between loans that were fully paid and charged off in terms of loan amount.","253ddf29":"The distribution of our targets is not even. Need to take this into consideration when evalutating model performance.","764b7f11":"An overall accuracy of 89% was achieved with this model. To imporve the recall and accuracy, we can investigate modifying the neural network with more layers and adding an early stopping call to continue training the model. Model improvements will be ongoing and updated as needed.","eb81c5ca":"**Splitting data into training and testing sets**","b35f7685":"All information in 'grade' feature can be found in 'sub_grade'. 'grade' will be dropped.","449121dd":"The remaining missing values account for less than 0.5% of the total data. These missing values will be dropped as they will not significantly affect the model.","a47aee06":"The percentage of charge-offs in terms of employment legnth doesn't appear to differ significantly between employment legnth catagories. Because of this, 'emp_length' feature was dropped.","24fef825":"# Data Preprocessing","12851429":"## Introduction to Project\n\nLendingClub is a US peer-to-peer lending company, headquartered in San Francisco, California. It was the first peer-to-peer lender to register its offerings as securities with the Securities and Exchange Commission (SEC), and to offer loan trading on a secondary market. LendingClub is the world's largest peer-to-peer lending platform.\n\n### Our Goal\n\nGiven historical data on loans given out with information on whether or not the borrower defaulted (charge-off), a model was built using an artificial neural network to predict whether or not a borrower will pay back their loan.\n\nThe \"loan_status\" column contains our target."}}