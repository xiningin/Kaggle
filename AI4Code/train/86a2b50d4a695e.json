{"cell_type":{"02dc9d82":"code","873e603e":"code","bb6eabe8":"code","1b430b72":"code","c0b3328b":"code","f65e5f3e":"code","ad9a8fef":"code","b1f96837":"code","83a99297":"code","08d1930c":"code","5f34c935":"code","d136ffd5":"code","2d5c9b57":"code","c475deee":"code","8f35cd3a":"code","b0f4d636":"code","2510d859":"code","f2847261":"code","dc498baf":"code","4ae40cae":"code","ed15a3db":"markdown","0cf32fba":"markdown","620920f4":"markdown","f4df6f14":"markdown","97794c02":"markdown","7945f840":"markdown","29e1a684":"markdown","cf6fbfe4":"markdown","54a4019e":"markdown"},"source":{"02dc9d82":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","873e603e":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport warnings\nimport os\n!pip install tensorflow\n!pip install keras\n%matplotlib inline\nwarnings.simplefilter(action= 'ignore')\nplt.style.use('seaborn')","bb6eabe8":"from tensorflow.keras.preprocessing.image import ImageDataGenerator","1b430b72":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n    shear_range=0.2, #Shear' means that the image will be distorted along an axis, mostly to create or rectify the perception angles. It's usually used to augment images so that computers can see how humans see things from different angles.\n    zoom_range=0.2,\n    rotation_range = 30,  # randomly rotate images in the range (degrees, 0 to 180)\n    width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n    height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n    horizontal_flip = True,  # randomly flip images\n    vertical_flip=False,  # randomly flip images\n    validation_split=0.3) # set validation split\n\ntrain_generator = train_datagen.flow_from_directory(\n    '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train',\n \n    class_mode='categorical',\n    subset='training') # set as training data\n\nvalidation_generator = train_datagen.flow_from_directory(\n    '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train', # same directory as training data\n   \n    class_mode='categorical',\n    subset='validation') # set as validation data","c0b3328b":"train_generator.image_shape # bcheck 3la el shape","f65e5f3e":"train_generator.class_indices #bcheck 3la el classes el training","ad9a8fef":"# Loading Deep Learning Libraries\nfrom keras.models import Sequential, load_model, Model\nfrom keras.layers import Input, Dense, Dropout, Flatten, Activation, MaxPool2D\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization, GlobalAveragePooling2D, SeparableConv2D\nfrom keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop\nfrom keras.callbacks import ReduceLROnPlateau, LearningRateScheduler,ModelCheckpoint,EarlyStopping\nfrom keras.utils import to_categorical","b1f96837":"EPOCHS = 20\nINIT_LR = 1e-3 #The amount that the weights are updated during training is referred to as the step size or the \u201clearning rate.\n#the learning rate is a configurable hyperparameter used in the training of neural networks that has a small positive value\nBS = 15 # a number that can be divided into the total dataset size\ndefault_image_size = tuple((256, 256))\nimage_size = 0\nwidth=256\nheight=256\ndepth=3","83a99297":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu', input_shape = (256,256,3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n \n\nmodel.add(Conv2D(filters =96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Conv2D(filters = 96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(512))\nmodel.add(Activation('relu'))\nmodel.add(Dense(2, activation = \"softmax\"))","08d1930c":"model.summary()","5f34c935":"from keras.preprocessing import image\nimport numpy as np\nimg1 = image.load_img('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val\/NORMAL\/NORMAL2-IM-1431-0001.jpeg')\nplt.imshow(img1);\n\n#preprocess image\nimg1 = image.load_img('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val\/NORMAL\/NORMAL2-IM-1431-0001.jpeg', target_size=(256, 256,3))\nimg = image.img_to_array(img1)\nimg = np.expand_dims(img, axis=0)\nimg = img\/255","d136ffd5":"# Visualizing output after every layer.\nfrom keras.models import Model\nconv2d_1_output = Model(inputs=model.input, outputs=model.get_layer('conv2d_1').output)\nmax_pooling2d_1_output = Model(inputs=model.input,outputs=model.get_layer('max_pooling2d_1').output)\nconv2d_2_output = Model(inputs=model.input,outputs=model.get_layer('conv2d_2').output)\nmax_pooling2d_2_output = Model(inputs=model.input,outputs=model.get_layer('max_pooling2d_2').output)\nconv2d_3_output = Model(inputs=model.input,outputs=model.get_layer('conv2d_3').output)\nmax_pooling2d_3_output = Model(inputs=model.input,outputs=model.get_layer('max_pooling2d_3').output)\n#conv2d_3_output = Model(inputs=model.input,outputs=model.get_layer('conv2d_4').output)\n#max_pooling2d_3_output = Model(inputs=model.input,outputs=model.get_layer('max_pooling2d_4').output)\n#flatten_1_output = Model(inputs=model.input,outputs=model.get_layer('flatten_1').output)\nconv2d_1_features = conv2d_1_output.predict(img)\nmax_pooling2d_1_features = max_pooling2d_1_output.predict(img)\nconv2d_2_features = conv2d_2_output.predict(img)\nmax_pooling2d_2_features = max_pooling2d_2_output.predict(img)\nconv2d_3_features = conv2d_3_output.predict(img)\nmax_pooling2d_3_features = max_pooling2d_3_output.predict(img)\n#flatten_1_features = flatten_1_output.predict(img)","2d5c9b57":"import matplotlib.image as mpimg\n\nfig=plt.figure(figsize=(14,7))\ncolumns = 8\nrows = 4\nfor i in range(columns*rows):\n    #img = mpimg.imread()\n    fig.add_subplot(rows, columns, i+1)\n    plt.axis('off')\n    plt.title('filter'+str(i))\n    plt.imshow(max_pooling2d_1_features[0, :, :, i], cmap='viridis') # Visualizing in color mode.\nplt.show()","c475deee":"opt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=opt,metrics=[\"accuracy\"])\n# Adam optimizer\n# loss function will be categorical cross entropy\n# evaluation metric will be accuracy\n#The purpose of loss functions is to compute the quantity that a model should seek to minimize during training.\n#Computes the crossentropy loss between the labels and predictions.\n#Use this crossentropy loss function when there are two or more label classes","8f35cd3a":"history = model.fit_generator(\n        train_generator,\n        steps_per_epoch=train_generator.samples\/\/train_generator.batch_size,\n        epochs=10,\n        validation_data=validation_generator,\n        validation_steps=validation_generator.samples\/\/validation_generator.batch_size)","b0f4d636":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\n#Train and validation accuracy\nplt.plot(epochs, acc, 'b', label='Training accurarcy')\nplt.plot(epochs, val_acc, 'r', label='Validation accurarcy')\nplt.title('Training and Validation accurarcy')\nplt.legend()\n\nplt.figure()\n#Train and validation loss\nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and Validation loss')\nplt.legend()\nplt.show()","2510d859":"classes = train_generator.class_indices \nclasses","f2847261":"Classes = [\"COVID\",\"NORMAL\"]","dc498baf":"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Pre-Processing test data same as train data.\nimg_width=256\nimg_height=256\n#model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\n\nfrom keras.preprocessing import image\n\ndef prepare(img_path):\n    img = image.load_img(img_path, target_size=(256, 256))\n    x = image.img_to_array(img)\n    x = x\/255\n    return np.expand_dims(x, axis=0)\n    \n    \nresult = model.predict_classes([prepare('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\/PNEUMONIA\/person1676_virus_2892.jpeg')])\nchest=image.load_img('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\/PNEUMONIA\/person1676_virus_2892.jpeg')\nplt.imshow(chest)\nprint (Classes[int(result)])","4ae40cae":"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Pre-Processing test data same as train data.\nimg_width=256\nimg_height=256\n#model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\n\nfrom keras.preprocessing import image\n\ndef prepare(img_path):\n    img = image.load_img(img_path, target_size=(256, 256))\n    x = image.img_to_array(img)\n    x = x\/255\n    return np.expand_dims(x, axis=0)\n    \n    \nresult = model.predict_classes([prepare('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/__MACOSX\/chest_xray\/test\/NORMAL\/._NORMAL2-IM-0259-0001.jpeg')])\nchest=image.load_img('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/__MACOSX\/chest_xray\/test\/NORMAL\/._NORMAL2-IM-0259-0001.jpeg')\nplt.imshow(chest)\nprint (Classes[int(result)])","ed15a3db":"**Evaluating model on Test data**","0cf32fba":"**Plotting train vs validation curves**","620920f4":"**Displaying model architecture**","f4df6f14":"**Define Parameters**","97794c02":"**Data Augmentation**","7945f840":"**Loading Deep Learning Libraries**","29e1a684":"**Showing image from our dataset**","cf6fbfe4":"**Bulding Model Architecture**","54a4019e":"**Training the model**"}}