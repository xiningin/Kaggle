{"cell_type":{"1de53aa2":"code","27842d9d":"code","78dd5fe1":"code","cfcfdb90":"code","e91b5975":"code","f10a78b9":"code","2c874865":"code","9b292d44":"code","95b05c41":"code","793381bf":"code","38b6de6b":"code","cd8eface":"code","ac4f50eb":"code","3bfbc3a4":"code","f0d0db5b":"code","573ab912":"code","42fd8606":"code","38028b3e":"code","b482ae31":"code","5b8c86f6":"code","13be5cc5":"code","0d678bb1":"code","a771842d":"code","b67ab355":"code","de09815a":"code","52f745dc":"code","e9d135d0":"code","482f87d9":"code","afa0fe5e":"code","0165fa3a":"code","2f1a8960":"code","157ce784":"code","17e5b61d":"code","d594208c":"code","6ee84d18":"code","f4d0daeb":"code","91b1950a":"code","708c7c0f":"code","e9dc78e9":"markdown","106c4b67":"markdown","9aaf2e3d":"markdown","534c38fd":"markdown","2b95f198":"markdown","d3a3b16a":"markdown","edbd646a":"markdown","ab97d51a":"markdown","f4ac935e":"markdown","47ed601f":"markdown","25d7d602":"markdown","e8cc1ad9":"markdown","34569f30":"markdown","d56de935":"markdown","7c1fc8cc":"markdown","f5f43a75":"markdown","7163039f":"markdown","80fed6c8":"markdown","58579d88":"markdown","db491860":"markdown","1fba1ebb":"markdown","90f3b57b":"markdown"},"source":{"1de53aa2":"import pandas as pd\nimport numpy as np\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode,iplot\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport folium\nimport plotly.graph_objs as go\nfrom plotly import tools\nprint(os.listdir(\"..\/input\"))","27842d9d":"school=pd.read_csv('..\/input\/2016 School Explorer_new.csv')\nschool=pd.DataFrame(school)","78dd5fe1":"print(school.head(6,))","cfcfdb90":"school.shape","e91b5975":"school.dtypes","f10a78b9":"#Removing 'Adjusted Grade' , 'New?' and 'Other Location Code in LCGMS' columns.\nschool=school.drop(['Adjusted Grade','New?','Other Location Code in LCGMS'],axis=1)\nprint(school.shape)\nprint(school.head(6,))","2c874865":"#Removing $ and , from 'School Income Estimate' and converting it to float\nschool[\"School Income Estimate\"]=school[\"School Income Estimate\"].replace('[\\$,]','',regex=True)\nschool[\"School Income Estimate\"]=school[\"School Income Estimate\"].astype(float)\nprint(type(school[\"School Income Estimate\"]))","9b292d44":"school[\"School Income Estimate\"]","95b05c41":"def percent_remove(x):\n    school[x]=school[x].replace('[%$]','',regex=True).astype(float)","793381bf":"percent_remove(\"Percent ELL\")\npercent_remove(\"Percent Asian\")\npercent_remove(\"Percent Black\")\npercent_remove(\"Percent Hispanic\")\npercent_remove(\"Percent Black \/ Hispanic\")\npercent_remove(\"Percent White\")\npercent_remove(\"Student Attendance Rate\")\npercent_remove(\"Percent of Students Chronically Absent\")\npercent_remove(\"Rigorous Instruction %\")\npercent_remove(\"Collaborative Teachers %\")\npercent_remove(\"Supportive Environment %\")\npercent_remove(\"Effective School Leadership %\")\npercent_remove(\"Strong Family-Community Ties %\")\npercent_remove(\"Trust %\")","38b6de6b":"school.dtypes","cd8eface":"NA_count = school.isnull().sum().reset_index()\nmissing_values = NA_count[NA_count[0] != 0]\nmissing_values[\"%\"]=(missing_values[0]\/school.shape[0])*100\nmissing_values = missing_values.sort_values(by = \"%\",ascending =False)\nmissing_values","ac4f50eb":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(8,8))\nax = sns.barplot(\"%\",\"index\",data=missing_values,\n                 linewidth=1 ,palette=\"vlag\",edgecolor=\"k\"*len(missing_values))\nplt.ylabel(\"columns\")\nfor i,j in enumerate(np.around(missing_values[\"%\"],1).astype(str) + \" %\"):\n    ax.text(.7,i,j ,weight = \"bold\")\nplt.title(\"Percentage of missing values in Schools data\")\nplt.grid(True)\nplt.show()","3bfbc3a4":"#Imputing missing values in numeric variables by mean \nschool[\"School Income Estimate\"] = school[\"School Income Estimate\"].fillna(school[\"School Income Estimate\"].mean())\nschool[\"Economic Need Index\"] = school[\"Economic Need Index\"].fillna(school[\"Economic Need Index\"].mean())\nschool[\"Student Attendance Rate\"] = school[\"Student Attendance Rate\"].fillna(school[\"Student Attendance Rate\"].mean())\nschool[\"Percent of Students Chronically Absent\"] = school[\"Percent of Students Chronically Absent\"].fillna(school[\"Percent of Students Chronically Absent\"].mean())\nschool[\"Rigorous Instruction %\"] = school[\"Rigorous Instruction %\"].fillna(school[\"Rigorous Instruction %\"].mean())\nschool[\"Collaborative Teachers %\"] = school[\"Collaborative Teachers %\"].fillna(school[\"Collaborative Teachers %\"].mean())\nschool[\"Average ELA Proficiency\"] = school[\"Average ELA Proficiency\"].fillna(school[\"Average ELA Proficiency\"].mean())\nschool[\"Average Math Proficiency\"] = school[\"Average Math Proficiency\"].fillna(school[\"Average Math Proficiency\"].mean())\nschool[\"Percent Asian\"] = school[\"Percent Asian\"].fillna(school[\"Percent Asian\"].mean())\nschool[\"Percent Black\"] = school[\"Percent Black\"].fillna(school[\"Percent Black\"].mean())\nschool[\"Percent Hispanic\"] = school[\"Percent Hispanic\"].fillna(school[\"Percent Hispanic\"].mean())\nschool[\"Percent White\"] = school[\"Percent White\"].fillna(school[\"Percent White\"].mean())\nschool[\"Rigorous Instruction %\"] = school[\"Rigorous Instruction %\"].fillna(school[\"Rigorous Instruction %\"].mean())\nschool[\"Collaborative Teachers %\"] = school[\"Collaborative Teachers %\"].fillna(school[\"Collaborative Teachers %\"].mean())\nschool[\"Supportive Environment %\"] = school[\"Supportive Environment %\"].fillna(school[\"Supportive Environment %\"].mean())\nschool[\"Effective School Leadership %\"] = school[\"Effective School Leadership %\"].fillna(school[\"Effective School Leadership %\"].mean())\nschool[\"Strong Family-Community Ties %\"] = school[\"Strong Family-Community Ties %\"].fillna(school[\"Strong Family-Community Ties %\"].mean())\nschool[\"Trust %\"] = school[\"Trust %\"].fillna(school[\"Trust %\"].mean())\n","f0d0db5b":"#Imputing missing values in categorical variables by 'Unknown' \nschool[\"Rigorous Instruction Rating\"] = school[\"Rigorous Instruction Rating\"].fillna(\"Unknown\")\nschool[\"Collaborative Teachers Rating\"] = school[\"Collaborative Teachers Rating\"].fillna(\"Unknown\")\nschool[\"Supportive Environment Rating\"] = school[\"Supportive Environment Rating\"].fillna(\"Unknown\")\nschool[\"Effective School Leadership Rating\"] = school[\"Effective School Leadership Rating\"].fillna(\"Unknown\")\nschool[\"Strong Family-Community Ties Rating\"] = school[\"Strong Family-Community Ties Rating\"].fillna(\"Unknown\")\nschool[\"Trust Rating\"] = school[\"Trust Rating\"].fillna(\"Unknown\")\nschool[\"Student Achievement Rating\"] = school[\"Student Achievement Rating\"].fillna(\"Unknown\")","573ab912":"#Checking all columns for missing values after performing missing value treatment\nNA_count1 = school.isnull().sum().reset_index()\nmissing_values1 = NA_count1[NA_count1[0] != 0]\nmissing_values1","42fd8606":"#Taking Latitude and Longitude values of all unique cities for locating in a map\nunique_city=school['City'].unique()\nlocations_index=[]\nlocationlist1=[]\nlocationlist2=[]\n#locationlist3=pd.DataFrame()\nlocations = school[['Latitude', 'Longitude']]\nab=school['City'].tolist()\nfor i in unique_city:    \n    locations_index.append(ab.index(i))\nfor j in locations_index:\n    locationlist1.append(locations.iloc[j,0])\n    locationlist2.append(locations.iloc[j,1])\n#locationlist = locationlist1.values.tolist()\n#len(locationlist)\ndict1={\"l1\":locationlist1,\"l2\":locationlist2}\nlocationlist3=pd.DataFrame(dict1)\nlocationlist3\nlocations = locationlist3[['l1', 'l2']]\nlocationlist = locations.values.tolist()\n# locationlist contains Latitude and Longitude values of all unique cities\nlocationlist","38028b3e":"for point in range(0, len(unique_city)):\n    map = folium.Map(location=[40.714301, -73.982966], zoom_start=12)\n    folium.Marker(locationlist[point], popup=school['School Name'][point]).add_to(map)\nmap","b482ae31":"ab=school.describe()\nprint(ab)","5b8c86f6":"tab = pd.crosstab(index = school[\"City\"],  columns=school[\"Community School?\"], colnames = ['']) \nprint(tab)","13be5cc5":"NYC_Asians=school[(school.City==\"NEW YORK\")& (school[\"Community School?\"]==\"Yes\")]\nprint(NYC_Asians[\"Percent Asian\"])","0d678bb1":"plt.hist(NYC_Asians[\"Percent Asian\"],bins=18)\nplt.title(\"Histogram of of Asians in Community schools in New York\")\nplt.xlabel(\"Asians\")\nplt.ylabel(\"Percent\")\nplt.show()","a771842d":"school[\"Others\"]=1-(school[\"Percent Asian\"]+school[\"Percent Black\"]+school[\"Percent Hispanic\"]+school[\"Percent White\"])\n","b67ab355":"#Assigning 0 of -ve % value\nschool.iloc[3,158]=0","de09815a":"school.iloc[3,158]","52f745dc":"#initializing plotly offline for ipython notebooks\ninit_notebook_mode(connected=True)","e9d135d0":"#Grades High and Low across region\n%matplotlib inline\nsns.countplot(school[\"Grade Low\"],palette=\"vlag\")","482f87d9":"sns.countplot(school[\"Grade High\"],palette=\"vlag\")","afa0fe5e":"sns.countplot(school[\"Community School?\"])","0165fa3a":"data = []\ncity_list = list(school[\"City\"].value_counts().index)\nfor i in city_list:\n    data.append(\n        go.Bar(\n          y = [school[\"Percent Asian\"][school[\"City\"] == i].mean(), school[\"Percent Black\"][school[\"City\"] == i].mean(), school[\"Percent Hispanic\"][school[\"City\"] == i].mean(), school[\"Percent White\"][school[\"City\"] == i].mean(), school[\"Others\"][school[\"City\"] == i].mean()],\n          x = ['Asian','Black','Hispanic', 'White', 'Others'],\n          name = i,\n          opacity = 0.6\n        )\n    )\nk=0\nfig = tools.make_subplots(rows=15, cols=3, subplot_titles=city_list, print_grid=False)\nfor i in range(1,16):\n    for j in range(1,4):\n        fig.append_trace(data[k], i, j)\n        k = k + 1\nfig['layout'].update(height=2000, title='Average racial distribution in different cities',showlegend=False)\niplot(fig)","2f1a8960":"y=[]\ncity_list = list(school[\"City\"].value_counts().index)\n#print(city_list)\nfor i in city_list:\n    y.append(school[\"Average ELA Proficiency\"][school[\"City\"] == i].mean())\ndframe=[('City',city_list),('Average ELA Score',y)]\nnew_df1 = pd.DataFrame.from_items(dframe)\nnew_df1\ndata = [go.Bar(\n            x=new_df1[\"City\"],\n            y=new_df1[\"Average ELA Score\"],\n            text=new_df1[\"Average ELA Score\"],\n            textposition = 'auto',\n            marker=dict(\n                color='rgb(158,202,225)',\n                line=dict(\n                    color='rgb(8,48,107)',\n                    width=1.5),\n            ),\n            opacity=0.6\n        )]\niplot(data)","157ce784":"y=[]\ncity_list = list(school[\"City\"].value_counts().index)\n#print(city_list)\nfor i in city_list:\n    y.append(school[\"Average Math Proficiency\"][school[\"City\"] == i].mean())\ndframe=[('City',city_list),('Average Math Proficiency',y)]\nnew_df = pd.DataFrame.from_items(dframe)\nnew_df\ndata = [go.Bar(\n            x=new_df[\"City\"],\n            y=new_df[\"Average Math Proficiency\"],\n            text=new_df[\"Average Math Proficiency\"],\n            textposition = 'auto',\n            marker=dict(\n                color='rgb(158,202,225)',\n                line=dict(\n                    color='rgb(8,48,107)',\n                    width=1.5),\n            ),\n            opacity=0.6\n        )]\niplot(data)","17e5b61d":"trace1 = go.Bar(\n    y=new_df1['City'],\n    x=new_df1['Average ELA Score'],\n    name='Average ELA Score',\n    orientation = 'h'\n)\ntrace2 = go.Bar(\n    y=new_df['City'],\n    x=new_df['Average Math Proficiency'],\n    name='Average Math Proficiency',\n    orientation = 'h'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='stack',\n    showlegend = True,\n    margin=go.Margin(\n        l=350,\n        r=50,\n        b=100,\n        t=100,\n        pad=4\n    ),\n    height = 800,\n    \n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n\n","d594208c":"#### School Performance Features","6ee84d18":"features = ['Rigorous Instruction %',\n'Collaborative Teachers %',\n'Supportive Environment %',\n'Effective School Leadership %',\n'Strong Family-Community Ties %',\n'Trust %']\n\nschool[['School Name'] + features ].head(10,)","f4d0daeb":"corr = school[features].corr()\nplt.figure(figsize=(8, 8))\nsns.heatmap(corr, cmap='PuBuGn')\ntemp = plt.xticks(rotation=75, fontsize=11) \ntemp = plt.yticks(fontsize=11)","91b1950a":"plt.figure(figsize=(12,7))\ntemp = sns.distplot(school[['Economic Need Index']].values, kde=True,color = 'y')\ntemp= plt.title(\"ENI distribution\", fontsize=15)\ntemp = plt.xlabel(\"ENI\", fontsize=15)\ntemp = plt.ylabel(\"School count\", fontsize=15)","708c7c0f":"sns.lmplot(x='School Income Estimate', y='Economic Need Index', data=school,\n           fit_reg=False)","e9dc78e9":"#### Importing all Libraries","106c4b67":"### EDA and Visualization","9aaf2e3d":"#### Stack graph of Average ELA Proficiency and Average Math Proficiency","534c38fd":"#### Missing value treatment","2b95f198":"#### Plotting percentage of missing values in School data using Bar graph","d3a3b16a":"#### Calculating % of others","edbd646a":"#### Reading the school data","ab97d51a":"#### Correlation Matrix for Performance features","f4ac935e":"#### Summary statistics of school data","47ed601f":"#### Scater plot of School Income Estimate vs Economic Need Index","25d7d602":"#### Average racial distribution in different cities","e8cc1ad9":"#### Distribution of Asians in Community schools in New York","34569f30":"#### Data Cleaning","d56de935":"#### count plot of Low Grade in different schools across regions","7c1fc8cc":"#### Average ELA Score across cities","f5f43a75":"#### Data Cleaning and Preparation","7163039f":"#### Defining function to remove '%' sign from 14 columns and converting it to float data type","80fed6c8":"#### count plot of High Grade in different schools across regions","58579d88":"#### Average Math Proficiency across cities","db491860":"#### count plot of Community School across regions","1fba1ebb":"#### Map locating names of all schools","90f3b57b":"#### Economic Need Index Distribution"}}