{"cell_type":{"01730c26":"code","9ca23d07":"code","74b10497":"code","7304f968":"code","6935ffa6":"code","0273a64b":"code","3f78997a":"code","72047645":"code","c19e96f4":"code","45d45299":"code","dabff84e":"code","7a3b7deb":"code","2ad05bac":"code","b637886f":"code","a594a6f5":"code","96740e45":"code","98e49c2b":"code","b5e69d55":"code","af5ed620":"code","00e4225a":"code","8e4d5cef":"code","9b6e372b":"code","925eec8c":"code","feda6c5c":"code","5baf7d58":"code","6a301319":"code","f0dde325":"code","f9124f1a":"code","27b1ec4f":"code","911e7c94":"code","599985f9":"code","95a38155":"code","d46a0737":"code","0bcf0d4b":"code","570acd04":"markdown","50d67b35":"markdown","2be158f9":"markdown","71e283ef":"markdown","2877c425":"markdown","5d58b803":"markdown","bebe624c":"markdown","ae9b9fd6":"markdown","ba93b659":"markdown","3c769b82":"markdown","229bccb3":"markdown","d6ce6e50":"markdown","9b5b8c8b":"markdown","eee9fd2b":"markdown","89bacf63":"markdown","5c55f4de":"markdown","c2c228bc":"markdown","b50e29cc":"markdown","54805314":"markdown","25969dab":"markdown","5da078f7":"markdown","d6bcc358":"markdown","99e24941":"markdown","d67a7b76":"markdown","287f1edf":"markdown","ef5688b6":"markdown","72aa2b41":"markdown","998f9f27":"markdown","26b26530":"markdown","5987c29d":"markdown"},"source":{"01730c26":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'","9ca23d07":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","74b10497":"df = pd.read_csv('..\/input\/iris.csv')\ndf.head()","7304f968":"df.describe()","6935ffa6":"df.columns\ndf.species.describe()\ndf.species.unique()","0273a64b":"import matplotlib.pyplot as plt\n# The following line just for the convience of seeing the plot in the notebook sheet\n%matplotlib inline","3f78997a":"from random import randint, seed\nseed(20)\nx = [i for i in range(1, 21)]\ny = [randint(20, 60) for _ in range(20)]\ny_x = list(zip(x, y))\nprint(y_x)\nplt.xticks(np.arange(0, 21, 1));\nplt.plot(x,y);","72047645":"plt.bar(x, y);\n\n","c19e96f4":"plt.ylabel('people')\nplt.xlabel('language')\nplt.bar(['Java', 'c++', 'c', 'python', 'R'], [10, 80, 70, 80, 50], color = 'orange');","45d45299":"column_name = df.columns\nprint(column_name)\ndf[column_name[0]].plot(legend = True, xticks = np.arange(0, 151, 10));\ndf[column_name[1]].plot(legend = True, xticks = np.arange(0, 151, 10));\ndf.plot(xticks = np.arange(0, 151, 10));\n","dabff84e":"df.species.unique()","7a3b7deb":"setosa_df = df.query('species == \"setosa\"')\nversicolor_df = df.query('species == \"versicolor\"')\nvirginica_df = df.query('species == \"virginica\"')\nsetosa_df.describe()\nversicolor_df.describe()\nvirginica_df.describe()","2ad05bac":"setosa_df = df[df.species == 'setosa']\nversicolor_df = df[df.species == 'versicolor']\nvirginica_df = df[df.species == 'virginica']\nsetosa_df.describe()\nversicolor_df.describe()\nvirginica_df.describe()","b637886f":"setosa_df.plot(yticks=np.arange(0, 9, 1))\nversicolor_df.plot(use_index = False, yticks=np.arange(0, 9, 1))\nvirginica_df.plot(use_index = False, yticks=np.arange(0, 9, 1))","a594a6f5":"# Plot a scatter chart using x='sepal_length', y='sepal_width', and separate colors for each of the three dataframes\nax = setosa_df.plot.scatter(x='sepal_length', y='sepal_width', label='setosa')\nax = versicolor_df.plot.scatter(x='sepal_length', y='sepal_width', label='versicolor', color='green', ax=ax)\nax = virginica_df.plot.scatter(x='sepal_length', y='sepal_width', label='virginica', color='red', ax=ax)","96740e45":"# Plot a scatter chart using x='sepal_length', y='sepal_width', and separate colors for each of the three dataframes\nax = setosa_df.plot.scatter(x='petal_length', y='petal_width', label='setosa')\nax = versicolor_df.plot.scatter(x='petal_length', y='petal_width', label='versicolor', color='green', ax=ax)\nax = virginica_df.plot.scatter(x='petal_length', y='petal_width', label='virginica', color='red', ax=ax)","98e49c2b":"df2 = df.copy()\ndf2.describe()\ndf.describe()","b5e69d55":"df2.drop(['sepal_length', 'sepal_width'], inplace = True, axis = 1)\n# axis = 1 is column, axis = 0 is row\ndf2.describe()","af5ed620":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split","00e4225a":"y = df2.pop('species')\nX = df2","8e4d5cef":"X.head()\ny.head()","9b6e372b":"\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.7, random_state=42)\nX_train.head()\nX_train.describe()\ny_train.head()","925eec8c":"# define a model\nclf = LogisticRegression(random_state=0, solver='lbfgs',\n                         multi_class='multinomial')\n# fit the data, training\nclf.fit(X_train, y_train)","feda6c5c":"# predict the data base on the \ny_predict = clf.predict(X_test)","5baf7d58":"from sklearn.metrics import accuracy_score","6a301319":"accuracy_score([1, 1, 0], [1, 1, 1])","f0dde325":"accuracy_score(y_test, y_predict)","f9124f1a":"# can also use the model score function\nclf.score(X_test, y_test)","27b1ec4f":"y = df.pop('species')","911e7c94":"X = df\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.7, random_state=42)\n\nclf2 = LogisticRegression(random_state=0, solver='lbfgs',\n                         multi_class='multinomial')\n# fit the data, training\nclf2.fit(X_train, y_train)\nclf2.score(X_test, y_test)","599985f9":"X = df\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n\nclf2 = LogisticRegression(random_state=0, solver='lbfgs',\n                         multi_class='multinomial')\n# fit the data, training\nclf2.fit(X_train, y_train)\nclf2.score(X_test, y_test)","95a38155":"import pickle","d46a0737":"pickle.dump(clf2, open('logs_model.pkl', 'wb'))","0bcf0d4b":"loaded_model = pickle.load(open('logs_model.pkl', 'rb'))\nresult = loaded_model.score(X_test, y_test)\nresult","570acd04":"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.plot.html","50d67b35":"**plot on the data**","2be158f9":"<h1>Author: Richard<h1>\n***Master of computer science***","71e283ef":"**Read dataset**","2877c425":"**How well is the prediction**","5d58b803":"**bar chart**","bebe624c":"**use all feature to fit**","ae9b9fd6":"**Seperate feature and label**","ba93b659":"**plot data**","3c769b82":"**load the model**","229bccb3":"https:\/\/matplotlib.org\/gallery\/lines_bars_and_markers\/barchart.html#sphx-glr-gallery-lines-bars-and-markers-barchart-py","d6ce6e50":"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.plot.scatter.html","9b5b8c8b":"**test_size** will be how many percentage of data you want to set as test data, the rest will be training data.<br>\nNormally, we do want to have **at least half-half**, and the training data will usually more than the test data.<br>\nRandom_state is how to randomly select the training data and test data.","eee9fd2b":"Query the dataframe:\nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.query.html","89bacf63":"pickle can also store the csv, sql etc data file.","5c55f4de":"https:\/\/matplotlib.org\/gallery\/lines_bars_and_markers\/simple_plot.html#sphx-glr-gallery-lines-bars-and-markers-simple-plot-py","c2c228bc":"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.drop.html","b50e29cc":"**separate by label**","54805314":"**    split data in training set and test set**","25969dab":"**store model**","5da078f7":"**Get the column we want**","d6bcc358":"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.describe.html","99e24941":"**sepal_length and sepal_width**","d67a7b76":"**Data preparation**","287f1edf":"https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.train_test_split.html<br>\nhttps:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LogisticRegression.html<br>\nMore info can be found in:https:\/\/scikit-learn.org\/stable\/index.html","ef5688b6":"**Welcome datasoc second python(pandas) workshop**","72aa2b41":"https:\/\/docs.python.org\/3\/library\/pickle.html#module-pickle","998f9f27":"<p>Gao jian support some script<p>","26b26530":"<p>Pandas can read different kinds of file, such as csv, json, sql.<p><br>\n    More info can be found in https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/io.html","5987c29d":"x as feature, y as the label<br> Our final goal is using x to predict the label."}}