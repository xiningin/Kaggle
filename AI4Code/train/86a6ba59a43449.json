{"cell_type":{"4bf4e6f1":"code","8e2b3f1f":"code","df4f1ce4":"code","1731b3de":"code","d3f407d1":"code","fec17959":"code","95149d09":"code","6b426edb":"code","fe513b84":"code","7e2f347a":"code","2749d07c":"code","61b9cd01":"code","8ed7da0c":"code","e835223b":"code","26cdf9e5":"code","1b0fa984":"code","9c82aee7":"code","faf1fd01":"code","68c4b7ec":"code","6cd649a1":"code","e3245947":"markdown","c7b69e89":"markdown","8cdf9265":"markdown","79e3a46a":"markdown","ef68ef07":"markdown"},"source":{"4bf4e6f1":"# importing important libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.preprocessing import OrdinalEncoder","8e2b3f1f":"data = pd.read_csv('..\/input\/loan-prediction-based-on-customer-behavior\/Training Data.csv')\ndata.head()","df4f1ce4":"data.info()","1731b3de":"data.isna().sum()","d3f407d1":"data.columns","fec17959":"data['Risk_Flag'].unique()","95149d09":"def encoding(df):\n    df = df.copy()\n    \n    #label encoding\n    df[\"Married\/Single\"].replace({\"single\":1,\"married\":2},inplace=True)\n    df[\"House_Ownership\"].replace({\"rented\":0,\"norent_noown\":1,\"owned\":2},inplace=True)\n    df[\"Car_Ownership\"].replace({\"no\":1,\"yes\":1},inplace=True)\n    \n    ord_enc = OrdinalEncoder()\n    df[\"Profession\"] = ord_enc.fit_transform(df[[\"Profession\"]])\n    df[\"CITY\"] = ord_enc.fit_transform(df[[\"CITY\"]])\n    df[\"STATE\"] = ord_enc.fit_transform(df[[\"STATE\"]])\n    \n    return df","6b426edb":"#label encoding\ndef preprocess_inputs(df):\n    df = df.copy()\n    \n    # Drop ID column\n    df = df.drop('Id', axis=1)\n    \n    df = encoding(df)\n    \n    # Split df into X and y\n    y = df['Risk_Flag'].copy()\n    X = df.drop('Risk_Flag', axis=1).copy()\n    \n    # Scale X with a standard scaler\n    scaler = StandardScaler()\n    X = pd.DataFrame(scaler.fit_transform(X),columns = X.columns)\n\n    \n    return X, y\n     \n        \n","fe513b84":"X, y = preprocess_inputs(data)","7e2f347a":"X","2749d07c":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=123)","61b9cd01":"models = [\n    LogisticRegression(),\n    DecisionTreeClassifier(),\n    RandomForestClassifier(),\n    XGBClassifier()\n]\n    \nfor model in models:\n    model.fit(X_train,y_train)\n    print(f'{model} trained')\n","8ed7da0c":"model_names = [\n    \"   Logistic Regression\",\n    \"         Decision Tree\",\n    \"         Random Forest\",\n    \"               XGBoost\"\n]\n\nfor model, name in zip(models, model_names):\n    print(name + \": {:.4f}%\".format(model.score(X_test, y_test) * 100))","e835223b":"final_model = RandomForestClassifier()\nfinal_model.fit(X_train,y_train)\nprint('Decision Tree' + \": {:.4f}%\".format(final_model.score(X_test, y_test) * 100))","26cdf9e5":"# Read the test data\ntest = pd.read_csv('..\/input\/loan-prediction-based-on-customer-behavior\/Test Data.csv')\ntest.head()","1b0fa984":"# preprocessing of test\ndef test_Preprocess(df):\n    test_df = df.copy()\n    \n    # Drop ID column\n    test_df = test_df.drop('ID', axis=1)\n    \n    # encoding \n    test_df = encoding(test_df)\n    \n    \n    \n    # Scale X with a standard scaler\n    scaler = StandardScaler()\n    test_df = pd.DataFrame(scaler.fit_transform(test_df),columns = test_df.columns)\n\n    \n    return test_df\n     \n        ","9c82aee7":"test_preprocessed = test_Preprocess(test)","faf1fd01":"test_preprocessed","68c4b7ec":"predictions = final_model.predict(test_preprocessed)\nprint(predictions)","6cd649a1":"# Save test predictions to file\noutput = pd.DataFrame({'id': test.index,\n                       'risk_flag': predictions})\noutput.id = output.id + 1\noutput.to_csv('submission.csv', index=False)","e3245947":" # preprocessing","c7b69e89":" # Loan default prediction","8cdf9265":"no missing values","79e3a46a":"# Training","ef68ef07":"# Data checking"}}