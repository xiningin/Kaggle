{"cell_type":{"968152bd":"code","7e6764c3":"code","6bb3b5c0":"code","6c63a087":"code","9ecc4536":"code","7484fd0d":"code","b758c92f":"code","4af58d2b":"code","8e0d5db3":"code","db255b95":"code","af30912b":"code","d3624a47":"code","e98ee319":"code","05d45ec5":"code","ec70782d":"code","6607db7a":"code","0547b579":"code","680bb8e2":"code","1cabe930":"code","393ba650":"code","5ca0b73e":"code","a1733627":"code","c868c37f":"code","8c67c5d0":"code","f0206bc7":"code","2fe5ec1c":"code","1072516c":"code","10c4d7fb":"code","535a09b9":"code","f033464e":"code","6c32c34f":"code","6979003a":"code","daccd5d7":"code","2a3bb8f1":"code","e6b6524f":"code","00d69ead":"code","d2651b94":"markdown","caf4c16c":"markdown","07042b73":"markdown","8821bd6f":"markdown","de870673":"markdown","2e1c2f95":"markdown","81d10108":"markdown","7c9d2d3d":"markdown","ef766ba0":"markdown","46df0a0e":"markdown","48127bb8":"markdown","7ea71900":"markdown","bc6849b3":"markdown","98090e1c":"markdown","b1f54323":"markdown","631af164":"markdown","d6b577db":"markdown","76c9147d":"markdown"},"source":{"968152bd":"import datetime\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport catboost\nfrom catboost import Pool\nfrom catboost import CatBoostRegressor\n\npd.set_option('display.max_rows', 1000)\npd.set_option('display.max_columns', 100)\n\n\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n%matplotlib inline\n#sns.set(style=\"darkgrid\")\n# pd.set_option('display.float_format', lambda x: '%.2f' % x)\nwarnings.filterwarnings(\"ignore\")\n\nimport time\n\nfrom xgboost import XGBRegressor\nfrom string import punctuation\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LinearRegression","7e6764c3":"test = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv', dtype={'ID': 'int32', 'shop_id': 'int32', \n                                                  'item_id': 'int32'})\nitem_categories = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv', \n                              dtype={'item_category_name': 'str', 'item_category_id': 'int32'})\nitems = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/items.csv', dtype={'item_name': 'str', 'item_id': 'int32', \n                                                 'item_category_id': 'int32'})\nshops = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/shops.csv', dtype={'shop_name': 'str', 'shop_id': 'int32'})\nsales = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv', \n                    dtype={'date': 'str', 'date_block_num': 'int32', 'shop_id': 'int32', \n                          'item_id': 'int32', 'item_price': 'float32', 'item_cnt_day': 'int32'})\n#sales = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')","6bb3b5c0":"sales.date=sales.date.apply(lambda x:datetime.datetime.strptime(x, '%d.%m.%Y'))\n# check\nprint(sales.info())\nsales.head()","6c63a087":"train = sales.join(items, on='item_id', rsuffix='_').join(shops, on='shop_id', rsuffix='_').join(item_categories, on='item_category_id', rsuffix='_').drop(['item_id_', 'shop_id_', 'item_category_id_'], axis=1)\ntrain.head()","9ecc4536":"monthly_sales=sales.groupby([\"date_block_num\",\"shop_id\",\"item_id\"])[\n    \"date\",\"item_price\",\"item_cnt_day\"].agg({\"date\":[\"min\",'max'],\"item_price\":\"mean\",\"item_cnt_day\":\"sum\"})\nmonthly_sales.head(10)","7484fd0d":"print('Min date from train set: %s' % train['date'].min().date())\nprint('Max date from train set: %s' % train['date'].max().date())\nprint('Min item_price from train set: %s' % train['item_price'].min())\nprint('Max item_price from train set: %s' % train['item_price'].max())\nprint('Min item_cnt_day from train set: %s' % train['item_cnt_day'].min())\nprint('Max item_cnt_day from train set: %s' % train['item_cnt_day'].max())","b758c92f":"train.head()","4af58d2b":"sns.distplot(np.log10(train['item_price']), kde=False)\nplt.yscale('log')","8e0d5db3":"sns.distplot(train.loc[(train['item_cnt_day']<10000)&(train['item_cnt_day']>-5),\n                          'item_cnt_day'], kde=False)\nplt.yscale('log')","db255b95":"train_df = train.loc[(train['item_cnt_day']<750), :]\ntrain_df = train_df.loc[(train_df['item_price']<10**5), :]","af30912b":"plt.figure(figsize=(12, 8))\nplt.scatter(train_df['item_price'], train_df['item_cnt_day'], alpha=0.25)\nplt.xscale('log')\nplt.yscale('log')\nplt.ylim((1e-1, 1e4))\nplt.xlim((1e-3, 1e6))\nplt.show()","d3624a47":"test_shop_ids = test['shop_id'].unique()\ntest_item_ids = test['item_id'].unique()\n# \u5728test data\u4e2d\u6709shop_id\ntrain_in_data = train[train['shop_id'].isin(test_shop_ids)]\n# \u5728test data\u4e2d\u6709item_id\ntrain_in_data = train_in_data[train_in_data['item_id'].isin(test_item_ids)]\nprint('Data set size in train:', train.shape[0])\nprint('Data set size in both train & test:', train_in_data.shape[0])","e98ee319":"def eda(data):\n    print(\"----------Top-5- Record----------\")\n    print(data.head(5))\n    print(\"-----------Information-----------\")\n    print(data.info())\n    print(\"-----------Data Types-----------\")\n    print(data.dtypes)\n    print(\"----------Missing value-----------\")\n    print(data.isnull().sum())\n    print(\"----------Null value-----------\")\n    print(data.isna().sum())\n    print(\"----------Shape of Data----------\")\n    print(data.shape)\n\ndef graph_insight(data):\n    print(set(data.dtypes.tolist()))\n#     df_num = data.select_dtypes(include = ['float64', 'int64'])\n    df_num = data.select_dtypes(include = ['float32', 'int32'])\n    df_num.hist(figsize=(16, 16), bins=50, xlabelsize=8, ylabelsize=8);\n    \ndef drop_duplicate(data, subset):\n    print('Before drop shape:', data.shape)\n    before = data.shape[0]\n    data.drop_duplicates(subset,keep='first', inplace=True) #subset is list where you have to put all column for duplicate check\n    data.reset_index(drop=True, inplace=True)\n    print('After drop shape:', data.shape)\n    after = data.shape[0]\n    print('Total Duplicate:', before-after)\neda(train)\ngraph_insight(train)","05d45ec5":"train.head(20)","ec70782d":"l = list(item_categories.item_category_name)\nl_cat = l\nl_cat_int = l\nl_cat[0] = 'pc_headphone'\n\nfor ind in range(1,8):\n    l_cat[ind] = 'console_accessory'\n\nl_cat[8] = 'ticket'\nl_cat[9] = 'delivary'\nfor ind in range(10,18):\n    l_cat[ind] = 'console'\nl_cat[12] = 'new_console'\nl_cat[14] = 'new_console'\nl_cat[16] = 'new_console'\n    \nfor ind in range(18,25):\n    l_cat[ind] = 'console_game'\nl_cat[25] = 'console_game_accessory'\nl_cat[21] = 'mobile_game'\nl_cat[22] = 'mobile_game'\nl_cat[26] = 'mobile_game'\nfor ind in range(27,32):\n    l_cat[ind] = 'pc_game'\n\nfor ind in range(32,37):\n    l_cat[ind] = 'payment_card'\n\nfor ind in range(37,42):\n    l_cat[ind] = 'dvd'\n\nfor ind in range(42,55):\n    l_cat[ind] = 'book'\n\nfor ind in range(55,61):\n    l_cat[ind] = 'music'\n\nfor ind in range(61,73):\n    l_cat[ind] = 'gift'\n\nfor ind in range(73,79):\n    l_cat[ind] = 'software'\n\n\n\nitem_categories['my_category_tmp'] = l_cat\n\nl_tmp=[]\nl_cat_int=[]\ninit=0\nfor x in l_cat:\n    if x in l_tmp:\n        l_cat_int.append(l_tmp.index(x))\n    else:\n        l_tmp.append(x)        \n        l_cat_int.append(init)\n        init=init+1\nitem_categories['my_category'] = l_cat_int\n\nitem_categories.head()","6607db7a":"train_monthly = train_in_data[['date', 'date_block_num', 'shop_id', 'item_category_id', 'item_id', 'item_price', 'item_cnt_day']]\nshop_ids = train_monthly['shop_id'].unique()\nitem_ids = train_monthly['item_id'].unique()\nempty_df = []\nfor i in range(34):\n    for shop in shop_ids:\n        for item in item_ids:\n            empty_df.append([i, shop, item])\n    \nempty_df = pd.DataFrame(empty_df, columns=['date_block_num','shop_id','item_id'])\ntrain_monthly = pd.merge(empty_df, train_monthly, on=['date_block_num','shop_id','item_id'], how='left')\ntrain_monthly.fillna(0, inplace=True)","0547b579":"train_monthly[train_monthly[\"item_cnt_day\"]>20].count()","680bb8e2":"print(\"unique item day sale cnt>20 amt in train_monthly (keep only item_id in test) is\",len(train_monthly[train_monthly[\"item_cnt_day\"]>20]['item_id'].unique()),\"\/\",len(train_monthly[train_monthly[\"item_cnt_day\"]>=0]['item_id'].unique()))\nprint(\"item day sale cnt>20 amt in train_monthly (keep only item_id in test) is\",len(train_monthly[train_monthly[\"item_cnt_day\"]>20]),\"\/\",len(train_monthly[train_monthly[\"item_cnt_day\"]>0]))","1cabe930":"print(\"unique item day sale cnt>20 amt in train is\",len(train[train[\"item_cnt_day\"]>20]['item_id'].unique()),\"\/\",len(train[train[\"item_cnt_day\"]>=0]['item_id'].unique()))\nprint(\"item day sale cnt>20 amt in train is\",len(train[train[\"item_cnt_day\"]>20]),\"\/\",len(train[train[\"item_cnt_day\"]>0]))","393ba650":"train_monthly.head()","5ca0b73e":"train.head()","a1733627":"train_monthly['date_block_num'] = train_monthly['date_block_num'].astype(int)\ntrain_monthly['shop_id'] = train_monthly['shop_id'].astype(int)\ntrain_monthly['item_category_id'] = train_monthly['item_category_id'].astype(int)\ntrain_monthly['item_id'] = train_monthly['item_id'].astype(int)\n\ntrain_monthly = train_monthly.sort_values('date_block_num').groupby(['date_block_num', 'shop_id', 'item_category_id', 'item_id'], as_index=False)\n# train_monthly = train_monthly.agg({'item_price':['sum', 'mean'], 'item_cnt_day':['sum', 'mean','count']})\n# Rename features.\n# train_monthly.columns = ['date_block_num', 'shop_id', 'item_category_id', 'item_id', 'item_price', 'mean_item_price', 'item_cnt', 'mean_item_cnt', 'transactions']","c868c37f":"train_monthly = train_monthly.agg({'item_price':['sum', 'mean'], 'item_cnt_day':['sum', 'mean','count']})\n# Rename feature\ntrain_monthly.columns = ['date_block_num', 'shop_id', 'item_category_id', 'item_id', 'item_price', 'mean_item_price', 'item_cnt', 'mean_item_cnt', 'transactions']","8c67c5d0":"train_monthly[train_monthly['item_category_id']==40].head()","f0206bc7":"# train_monthly.columns = ['date_block_num', 'shop_id', 'item_id', 'date', 'item_category_id', 'item_price',  'item_cnt', 'mean_item_cnt', 'transactions']\ntrain_monthly['year'] = train_monthly['date_block_num'].apply(lambda x: ((x\/\/12) + 2013))\ntrain_monthly['month'] = train_monthly['date_block_num'].apply(lambda x: (x % 12))\ngp_month_mean = train_monthly.groupby(['month'], as_index=False)['item_cnt'].mean()\ngp_month_sum = train_monthly.groupby(['month'], as_index=False)['item_cnt'].sum()\ngp_category_mean = train_monthly.groupby(['item_category_id'], as_index=False)['item_cnt'].mean()\ngp_category_sum = train_monthly.groupby(['item_category_id'], as_index=False)['item_cnt'].sum()\ngp_shop_mean = train_monthly.groupby(['shop_id'], as_index=False)['item_cnt'].mean()\ngp_shop_sum = train_monthly.groupby(['shop_id'], as_index=False)['item_cnt'].sum()","2fe5ec1c":"train_monthly.head()","1072516c":"f, axes = plt.subplots(2, 1, figsize=(20, 10), sharex=True)\nsns.barplot(x=\"item_category_id\", y=\"item_cnt\", data=gp_category_mean, ax=axes[0], palette=\"mako\").set_title(\"Monthly mean\")\nsns.barplot(x=\"item_category_id\", y=\"item_cnt\", data=gp_category_sum, ax=axes[1], palette=\"mako\").set_title(\"Monthly sum\")\nplt.show()","10c4d7fb":"plt.figure(figsize=(20,10)) \nsns.boxplot(x=\"item_category_id\",y=\"item_cnt\",data=train_monthly,palette=\"mako\")\nplt.show()","535a09b9":"train_monthly[train_monthly['item_cnt']>500].head(10)","f033464e":"## print('unique shop #: ',len(train_monthly['shop_id'].unique()))\nprint('unique item #: ',len(train_monthly['item_id'].unique()))\nprint('unique category #: ',len(train_monthly['item_category_id'].unique()))","6c32c34f":"train_monthly.groupby(['month'], as_index=False)['item_cnt'].sum()","6979003a":"train_monthly[train_monthly['mean_item_price']>10].head()","daccd5d7":"input_data = pd.merge(train_monthly, item_categories.drop(columns=['item_category_name']), on=['item_category_id'])\ninput_data['item_id']= input_data.item_id.astype('str')\ninput_data['item_category_id']= input_data.item_category_id.astype('str')\ninput_data['shop_id']= input_data.shop_id.astype('str')\ninput_data['year']= input_data.year.astype('str')\ninput_data['month']= input_data.month.astype('str')\ninput_data = input_data.drop(['item_price','mean_item_cnt','transactions','my_category_tmp'], axis = 1)\n# remove mean_item_price for now\n\ncols = input_data.columns.tolist()\ncols = cols[5:]+cols[:5]\ninput_data[cols].head()\n\n","2a3bb8f1":"# Encode Categories\nfrom sklearn import preprocessing\n\ninput_data_clean=input_data[cols]\nnumber = preprocessing.LabelEncoder()\ninput_data_clean[['item_id']] = number.fit_transform(input_data_clean.item_id)\ninput_data_clean[['item_category_id']] = number.fit_transform(input_data_clean.item_category_id)\ninput_data_clean[['shop_id']] = number.fit_transform(input_data_clean.shop_id)\ninput_data_clean[['year']] = number.fit_transform(input_data_clean.year)\ninput_data_clean[['month']] = number.fit_transform(input_data_clean.month)\ninput_data_clean[['my_category']] = number.fit_transform(input_data_clean.my_category)\ninput_data_clean[['date_block_num']] = number.fit_transform(input_data_clean.date_block_num)\ninput_data_clean.head()","e6b6524f":"import xgboost as xgb\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\n# input_data_clean=input_data_clean.drop(['my_category'], axis = 1)\n\nX, y = input_data_clean.iloc[:,1:],input_data_clean.iloc[:,0]\n# data_dmatrix = xgb.DMatrix(data=X,label=y)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)\n# xg_reg = xgb.XGBRegressor(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,\n#                 max_depth = 10, alpha = 10, n_estimators = 10)\n\nparam = {'max_depth':10, \n         'subsample':1,\n         'min_child_weight':0.5,\n         'eta':0.3, \n         'num_round':1000, \n         'seed':1,\n         'silent':0,\n         'eval_metric':'rmse'}\n\nprogress = dict()\nxgbtrain = xgb.DMatrix(X_train, y_train)\nwatchlist  = [(xgbtrain,'train-rmse')]\n\nbst = xgb.train(param, xgbtrain)\npreds = bst.predict(xgb.DMatrix(X_test))\nfrom sklearn.metrics import mean_squared_error \nrmse = np.sqrt(mean_squared_error(preds,y_test))\nprint(rmse)","00d69ead":"plt.figure(figsize=(20,10)) \nxgb.plot_importance(bst)\nplt.show()","d2651b94":"### \u6aa2\u67e5\u985e\u5225\u6bcf\u65e5\u92b7\u91cf","caf4c16c":"### \u7531\u65bctraining data \u5305\u542b\u8a31\u591a\u975etest data\u4e2d\u6709\u7684item\uff0c\u9078\u64c7\u5254\u9664\n\nfuture plan: \u6aa2\u67e5\u4ee5\u5168\u6578dataset\u662f\u5426\u80fd\u5f97\u5230\u66f4\u597d\u7d50\u679c","07042b73":"### \u4f7f\u7528xgboost\u8a13\u7df4\/\u9810\u6e2c","8821bd6f":"### \u67e5\u770b\u50f9\u683c\u8207\u91d1\u984d\u662f\u5426\u6709\u76f8\u95dc\u6027\n\nnote: \u4e00\u5b9a\u91d1\u984d\u4e4b\u5167\u6709\u6b64\u7279\u6027","de870673":"### Find date \/ price \/ item sell per day","2e1c2f95":"### Link with item catigory","81d10108":"### \u7c21\u6613EDA\n\ncredit: NowYSM@kaggle","7c9d2d3d":"### \u67e5\u770b\u6bcf\u65e5\u92b7\u91cf\u5206\u4f48","ef766ba0":"### \u53ef\u4ee5\u767c\u73fe\u81ea\u5b9a\u7fa9\u7684\u5206\u985e\u6548\u679c\u6709\u9650\uff0c\u91cd\u8981\u6027\u9060\u4f4e\u65bc\u539f\u59cb\u5b9a\u7fa9\n\nfuture plan\uff1a\n    1. \u53bb\u6389\u81ea\u5206\u985e\n    2. \u6b64\u8f38\u5165\u8cc7\u6599\u55ae\u7d14\u628axgboost\u7576\u6210\u56de\u6b78\u5de5\u5177\u4f7f\u7528(\u91dd\u5c0d\u55ae\u4e00item\u7d66\u4e88item_category_id,shop_id,year,month,date_block_num)\uff0c\u5c0d\u65bc\u9031\u671f\u6027\u6ce2\u52d5\u9810\u6e2c\u5ea6\u6050\u6709\u9650\u3002\n       \u61c9\u91dd\u5c0d\u55ae\u4e00item\u8f38\u5165\u6700\u63a5\u8fd1\u7684\u6578\u7b46\u8cc7\u6599\u4f5c\u70ba\u9810\u6e2c\u6700\u65b0\u6642\u9593\u9ede\u7684\u53c3\u8003","46df0a0e":"### Sale data (main training data)","48127bb8":"### \u9810\u671fdefault\u5206\u985e\u65b9\u5f0f\u904e\u7d30\uff0c\u6839\u64da\u5546\u54c1\u578b\u614b\u9032\u884ccategory merge","7ea71900":"### \u7531\u65bc\u5206\u4f48\u6709\u5de8\u5927\u843d\u5dee\uff0c\u9078\u64c7\u6bcf\u65e5\u92b7\u91cf<750\u4f5c\u70ba\u5206\u754c\u9ede\uff0c\u4ee5\u907f\u514doutlier\n\n\u591a\u6578\u8cc7\u6599\u55ae\u65e5\u6709\u5de8\u5927\u92b7\u91cf\u53ef\u80fd\u56e0\u70ba\u65b0\u54c1\u4e0a\u5e02(\u5982GTA5)\uff0c\u7279\u50f9\u4fc3\u92b7\uff0c\u6216\u67d0\u4e9b\u8cc7\u6599\u4e0a\u7121\u6cd5\u78ba\u8a8d\u7684\u72c0\u614b\u9020\u6210\u3002\n\nnote: 750\u53ea\u662f\u4e00\u500b\u96a8\u610f\u6293\u53d6\u7684\u6578\u503c\uff0c\u6709\u512a\u5316\u7a7a\u9593\n\n","bc6849b3":"### \u67e5\u770b\u50f9\u683c\u5206\u4f48","98090e1c":"### \u5229\u7528boxplot\u6aa2\u67e5\u6975\u7aef\u503c\u5206\u4f48","b1f54323":"### \u6bd4\u8f03\u6bcf\u65e5\u92b7\u91cf\u572820\u4ee5\u4e0a\/\u4ee5\u4e0b \u548c \u50c5\u5728test data\u4e2d\u51fa\u73fe\u7684item \/ training data\u7684\u6240\u6709item \u7684\u6bd4\u4f8b\n","631af164":"### \u7531Max item_cnt_day from train set \u5f97\u77e5\u92b7\u552e\u884c\u70ba\u8207\u50f9\u683c\u76f8\u95dc \uff08\u50f9\u683c\u6d6e\u52d5\uff09\uff08\u7279\u50f9\uff09\n\u82e5\u50f9\u683c\u8abf\u964d\u6709\u9031\u671f\u6027 -> \u92b7\u552e\u91cf\u6709\u9031\u671f\u6027 -> \u4e0d\u9700\u8981\u89c0\u5bdf\u50f9\u683c\u5373\u53ef\u5f97\u77e5\n\n### Future Plan:\n\u6839\u64da\u50f9\u683c\u505a\u9810\u6e2c\uff0c\u9032\u4e00\u6b65\u9810\u6e2c\u92b7\u552e\u6578\u91cf\n","d6b577db":"### Data\n\u672c\u6b21\u8cc7\u6599\u4f86\u6e90\u70ba2013~2015\u4fc4\u7f85\u65af\u5546\u5e97\u92b7\u552e\u8cc7\u6599\uff0c\u5e0c\u671b\u9810\u6e2c\u672a\u4f86\u92b7\u552e\u6578\u503c\u3002\n\u521d\u6b65\u8a08\u5283\uff1a\u8457\u91cddata engineering\u90e8\u5206","76c9147d":"### training data info"}}