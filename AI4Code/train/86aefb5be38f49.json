{"cell_type":{"390813c7":"code","31e38906":"code","7fef810e":"code","b5dccc89":"code","6b5abc6c":"code","fd7ae5d7":"code","e6516ce7":"code","31e966d7":"code","6de069ab":"code","caa039d4":"code","793859c3":"markdown","8012c77c":"markdown","19593686":"markdown","57c7f3f4":"markdown","4ee681d9":"markdown","69cc4391":"markdown","89dc2466":"markdown","2b99e1f1":"markdown","6604e1f8":"markdown","d5799853":"markdown","65c7b288":"markdown","24224a5d":"markdown","af664ea0":"markdown","8d0060ad":"markdown","c18d2dca":"markdown","6bf7ed60":"markdown"},"source":{"390813c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31e38906":"df = pd.read_csv(\"..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv\")\ndf.head(2)","7fef810e":"df1 = df.copy()\ndf1.head(2)","b5dccc89":"df.shape","6b5abc6c":"max_thresold = df['price'].quantile(0.95)\nmax_thresold","fd7ae5d7":"df[df['price']>max_thresold].head(2)","e6516ce7":"min_thresold = df['price'].quantile(0.05)\nmin_thresold","31e966d7":"df[df['price']<min_thresold].head(2)","6de069ab":"df[(df['price']<max_thresold) & (df['price']>min_thresold)]","caa039d4":"min_thresold1, max_thresold1 = df.price.quantile([0.001, 0.999])\nmin_thresold1, max_thresold1\n\ndf2 = df1[(df.price<max_thresold) & (df1.price>min_thresold)]\ndf2.shape","793859c3":"So after applying the upper and lower threshold our Outlier are removed from the DataSet.","8012c77c":"### Data Above Max Threshold","19593686":"### Shape of Data","57c7f3f4":"# 1.Importing DataSet and Preprocessing ","4ee681d9":"### Copy of Data","69cc4391":"### Data Below Minimum Threshold","89dc2466":"### Remove outliers","2b99e1f1":"So we can see that out of 48895 row of data 2441 row of data falls above the maximum threshold of 0.95 Quantile.","6604e1f8":"### Recently I published a self help book titled Inspiration: Thoughts on Spirituality, Technology, Wealth, Leadership and Motivation. The preview of the book can be read from the Amazon link https:\/\/lnkd.in\/gj7bMQA\n\n### You can refer to my other notebooks from https:\/\/www.kaggle.com\/binuthomasphilip\/code","d5799853":"# 2.Detecting Outlier Using Quantile Percentage\n\nWe can consider values above 95% and 5% Quantile as outliers.We will use same criteria to sort out the outliers","65c7b288":"# TO BE CONTINUED","24224a5d":"In this notebook we will explore various methods to detect outliers and how to do feature engineering in case of data with outliers.\n\n1.Data Import \n\n2.Outlier Detection Using Quantile Percentage \n\n3.Outlier Detection Using Threshold ","af664ea0":"So we can see that out of 48895 row of data 2042 row of data falls above the maximum threshold of 0.05 Quantile.","8d0060ad":"### Max Threshold","c18d2dca":"### Doing same thing with less code","6bf7ed60":"### Minmum Threshold"}}