{"cell_type":{"4989b988":"code","7620b171":"code","7a5954a1":"code","7ec4f10a":"code","4b109fa3":"code","6e92cf98":"code","e137c931":"code","1eb582bf":"code","f3bedf7b":"code","358ebe73":"code","d05e518f":"code","a66a5db1":"code","6b8052c0":"code","447b3722":"code","f3b75b9c":"code","94593d0d":"code","e5380756":"code","878dd03d":"code","e654b821":"code","4a0912e1":"markdown","e0f570d0":"markdown","d334cbc3":"markdown","e8e48c70":"markdown","214f3ccd":"markdown","318c7b9a":"markdown","f66bb731":"markdown","0dc3731e":"markdown","1cd20d98":"markdown","7f4be613":"markdown","f61318eb":"markdown","d063f3c5":"markdown","f9bcd31c":"markdown","1a56947e":"markdown","7b679820":"markdown","af728258":"markdown","d2a9f489":"markdown"},"source":{"4989b988":"import os\nimport pandas as pd\nimport matplotlib.pyplot as plt","7620b171":"path = r\"..\/input\/new-project\"\nfiles = [file for file in os.listdir(path) if not file.startswith('.')] # Ignore hidden files\n\nall_months_data = pd.DataFrame()\n\nfor file in files:\n    current_data = pd.read_csv(path+\"\/\"+file)\n    all_months_data = pd.concat([all_months_data, current_data])\n    \nall_months_data.to_csv(\"all_data_copy.csv\", index=False)\n    ","7a5954a1":"all_data = pd.read_csv(\"all_data_copy.csv\")\nall_data.head()","7ec4f10a":"# Find NAN\nnan_df = all_data[all_data.isna().any(axis=1)]\ndisplay(nan_df.head())\n\nall_data = all_data.dropna()\nall_data.head()","4b109fa3":"all_data = all_data[all_data['Order Date'].str[0:2]!='Or']","6e92cf98":"all_data['Quantity Ordered'] = pd.to_numeric(all_data['Quantity Ordered'])\nall_data['Price Each'] = pd.to_numeric(all_data['Price Each'])","e137c931":"all_data['Month'] = all_data['Order Date'].str[0:2]\nall_data['Month'] = all_data['Month'].astype('int32')\nall_data.head()","1eb582bf":"def get_city(address):\n    return address.split(\",\")[1].strip(\" \")\n\ndef get_state(address):\n    return address.split(\",\")[2].split(\" \")[1]\n\nall_data['City'] = all_data['Purchase Address'].apply(lambda x: f\"{get_city(x)}  ({get_state(x)})\")\nall_data.head()","f3bedf7b":"all_data['Sales'] = all_data['Quantity Ordered'].astype('int') * all_data['Price Each'].astype('float')","358ebe73":"all_data.groupby(['Month']).sum()","d05e518f":"import matplotlib.pyplot as plt\n\nmonths = range(1,13)\nprint(months)\n\nplt.bar(months,all_data.groupby(['Month']).sum()['Sales'])\nplt.xticks(months)\nplt.ylabel('Sales in USD ($)')\nplt.xlabel('Month number')\nplt.show()\n\n","a66a5db1":"all_data.groupby(['City']).sum()","6b8052c0":"keys = [city for city, df in all_data.groupby(['City'])]\n\nplt.bar(keys,all_data.groupby(['City']).sum()['Sales'])\nplt.ylabel('Sales in USD ($)')\nplt.xlabel('Month number')\nplt.xticks(keys, rotation='vertical', size=8)\nplt.show()","447b3722":"# Add hour column\nall_data['Hour'] = pd.to_datetime(all_data['Order Date']).dt.hour\nall_data['Minute'] = pd.to_datetime(all_data['Order Date']).dt.minute\nall_data['Count'] = 1\nall_data.head()\n","f3b75b9c":"keys = [pair for pair, df in all_data.groupby(['Hour'])]\n\nplt.plot(keys, all_data.groupby(['Hour']).count()['Count'])\nplt.xticks(keys)\nplt.grid()\nplt.show()\n\n# My recommendation is slightly before 11am or 7pm","94593d0d":"# https:\/\/stackoverflow.com\/questions\/43348194\/pandas-select-rows-if-id-appear-several-time\ndf = all_data[all_data['Order ID'].duplicated(keep=False)]\n\n# Referenced: https:\/\/stackoverflow.com\/questions\/27298178\/concatenate-strings-from-several-rows-using-pandas-groupby\ndf['Grouped'] = df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))\ndf2 = df[['Order ID', 'Grouped']].drop_duplicates()","e5380756":"# Referenced: https:\/\/stackoverflow.com\/questions\/52195887\/counting-unique-pairs-of-numbers-into-a-python-dictionary\nfrom itertools import combinations\nfrom collections import Counter\n\ncount = Counter()\n\nfor row in df2['Grouped']:\n    row_list = row.split(',')\n    count.update(Counter(combinations(row_list, 2)))\n\nfor key,value in count.most_common(10):\n    print(key, value)\n","878dd03d":"product_group = all_data.groupby('Product')\nquantity_ordered = product_group.sum()['Quantity Ordered']\n\nkeys = [pair for pair, df in product_group]\nplt.bar(keys, quantity_ordered)\nplt.xticks(keys, rotation='vertical', size=8)\nplt.show()","e654b821":"# Referenced: https:\/\/stackoverflow.com\/questions\/14762181\/adding-a-y-axis-label-to-secondary-y-axis-in-matplotlib\n\nprices = all_data.groupby('Product').mean()['Price Each']\n\nfig, ax1 = plt.subplots()\n\nax2 = ax1.twinx()\nax1.bar(keys, quantity_ordered, color='g')\nax2.plot(keys, prices, color='b')\n\nax1.set_xlabel('Product Name')\nax1.set_ylabel('Quantity Ordered', color='g')\nax2.set_ylabel('Price ($)', color='b')\nax1.set_xticklabels(keys, rotation='vertical', size=8)\n\nfig.show()","4a0912e1":"#### Merge data from each month into one CSV","e0f570d0":"#### Adding city column","d334cbc3":"## Data Analysis and various results","e8e48c70":"#### Read in updated dataframe","214f3ccd":"# Yearly Sales Analysis\n### Vivek Kumar ","318c7b9a":"#### Question 1: What was the best month for sales? How much was earned that month? ","f66bb731":"#### What product sold the most? Why do you think it sold the most?","0dc3731e":"#### Question 3: What time should we display advertisements to maximize likelihood of customer's buying product?","1cd20d98":"##### Removing date in order date column","7f4be613":"#### Question 4: What products are most often sold together?","f61318eb":"### Augment data with additional columns","d063f3c5":"#### Import necessary libraries","f9bcd31c":"#### Question 2: What city sold the most product?","1a56947e":"#### Make columns correct type","7b679820":"### Clean up the data!\nThe first step in any analysis is to clean data. Here NaN values are a obstacles in further analysis , hence needs to be removed from the table.","af728258":"#### Add month column","d2a9f489":"##### Drop rows of NAN"}}