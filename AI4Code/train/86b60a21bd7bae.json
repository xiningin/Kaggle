{"cell_type":{"20867f13":"code","edca3052":"code","fb2cda1b":"code","659d818e":"code","9958fc95":"code","6ac7ad91":"code","517764dc":"code","73ef0b1e":"code","1cdefd0f":"code","b247c6fe":"code","e5791218":"code","543e0c98":"code","c775e456":"code","1af89e41":"code","5c87892f":"code","fe09a693":"code","dcedf404":"code","66bbbb66":"code","119e98b0":"code","0a9b4941":"code","7839909e":"code","5bd34122":"code","ff1ff82b":"code","01d1d55c":"code","85b0bcc3":"code","54741088":"code","d5786fe3":"code","be6d9f36":"code","22088c3f":"code","9a9bfaae":"code","c50d9451":"code","fa60000f":"code","80b46c4a":"code","92470c09":"code","51ca8dbc":"markdown","247ef171":"markdown","83427b15":"markdown","c8daaf77":"markdown","b8aef1e4":"markdown"},"source":{"20867f13":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nplt.rcParams['figure.figsize'] = (12, 9)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","edca3052":"df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv')","fb2cda1b":"df.head(10)","659d818e":"df.Ticket.sample(20)","9958fc95":"t_df = df.groupby('Ticket').Survived.agg(['count', 'mean']).sort_values('count', ascending=False)\nt_df","6ac7ad91":"df['FamilyName'] = df.Name.apply(lambda x : x.split(',')[0])\ndf['FirstName'] = df.Name.apply(lambda x : x.split(',')[1])\n\nt_df = df.groupby('FamilyName').Survived.agg(['count', 'mean']).sort_values('count', ascending=False)\nt_df[(t_df['count'] > 1) & (t_df['count'] < 10)]","517764dc":"t_df = df.groupby('FirstName').Survived.agg(['count', 'mean']).sort_values('count', ascending=False)\nt_df[(t_df['count'] > 1) & (t_df['count'] < 20)]","73ef0b1e":"df.groupby('Sex').Survived.mean()","1cdefd0f":"import seaborn as sns\nsns.violinplot(x='Survived', y='Age', data=df)","b247c6fe":"df.groupby('Pclass').Survived.mean()","e5791218":"df[df.Parch > 0].Survived.mean()","543e0c98":"df[df.Parch == 0].Survived.mean()","c775e456":"df.corr()[['Survived']].T","1af89e41":"df[df.SibSp > 2].Survived.mean()","5c87892f":"df[df.SibSp == 0].Survived.mean()","fe09a693":"df.groupby('Embarked').Survived.mean().to_frame()","dcedf404":"df['CabinLetter'] = df.Cabin.apply(lambda x : x[0] if not pd.isna(x) else x)\ndf.groupby('CabinLetter').Survived.agg(['count', 'mean'])","66bbbb66":"import re\ndef extract_ticket_prefix(ticket):\n    if pd.isna(ticket):\n        return ticket\n    first_digit_search = re.search(r'\\d', ticket)\n    if first_digit_search:\n        return ticket[:first_digit_search.span()[0]].strip()\n    return None\n\ndef preprocess_dataframe(df):\n    df = df.copy()\n    df['CabinLetter'] = df.Cabin.apply(lambda v : v if pd.isna(v) else v[0])\n    df['FamilyId'] = df.Name.str.lower().str.split(', ').str[0] + df.CabinLetter + df.Embarked + df.Pclass.astype(str)\n    df['TicketPrefix'] = df.Ticket.apply(extract_ticket_prefix)\n    df['FirstName'] = df.Name.str.split(' ').apply(lambda vs : vs[1].lower())\n    df['Pclass'] = df['Pclass'].astype(str)\n    return df\n\ndf = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv')\ndf = preprocess_dataframe(df)\ndf.head(10)","119e98b0":"from sklearn.model_selection import train_test_split\n\ndf_train, df_test = train_test_split(df, test_size=0.25, random_state=0)\ndf_train.sample(5)","0a9b4941":"df_test.shape","7839909e":"NUMERIC_FEATURES = ['Age', 'SibSp', 'Parch', 'Fare']\nnum_df = df_train[NUMERIC_FEATURES].copy()\nnum_df.loc[num_df['Age'].isna(), 'Age'] = num_df['Age'].mean()\nnum_df","5bd34122":"from sklearn.preprocessing import OneHotEncoder\n\nCATEGORICAL_FEATURES = ['Pclass', 'Sex', 'Embarked', 'CabinLetter']\ncat_df = df_train[CATEGORICAL_FEATURES].copy()\ncat_df","ff1ff82b":"one_hot_encoder = OneHotEncoder(drop='first')\ncat_features = one_hot_encoder.fit_transform(cat_df).todense()\npd.DataFrame(cat_features, columns=one_hot_encoder.get_feature_names())","01d1d55c":"scaler = StandardScaler()\nscaled_df = pd.DataFrame(scaler.fit_transform(num_df), columns=num_df.columns)\nscaled_df","85b0bcc3":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n\ndf_train, df_test = train_test_split(df, test_size=0.25, random_state=0)\n\n\ndef fit_transformers(df_train):\n    one_hot_encoder = OneHotEncoder(drop='first')\n    one_hot_encoder.fit(df_train[CATEGORICAL_FEATURES])\n    scaler = StandardScaler()\n    scaler.fit(compute_features(df_train, one_hot_encoder, scaler=None))\n    return scaler, one_hot_encoder\n\ndef compute_features(df, one_hot_encoder, scaler):\n    df = preprocess_dataframe(df)\n    cat_features = one_hot_encoder.transform(df[CATEGORICAL_FEATURES])\n    cat_df = pd.DataFrame(cat_features.todense(), columns=one_hot_encoder.get_feature_names()).reset_index(drop=True)\n    num_df = df[NUMERIC_FEATURES].reset_index(drop=True)\n    num_df['Age'] = num_df['Age'].fillna(38.0)\n    num_df['Fare'] = num_df['Fare'].fillna(44)\n    features = pd.concat([num_df, cat_df], axis=1)\n    if scaler:\n        features = pd.DataFrame(scaler.transform(features), columns=features.columns)\n    return features\n\nscaler, one_hot_encoder = fit_transformers(df_train)\n\nX_train = compute_features(df_train, one_hot_encoder, scaler)\ny_train = df_train.Survived\n\nX_test = compute_features(df_test, one_hot_encoder, scaler)\ny_test = df_test.Survived","54741088":"from sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.dummy import DummyClassifier\n\nmodel = XGBClassifier()\nbaseline = DummyClassifier(strategy='most_frequent')\n\nmodel.fit(X_train, y_train)\nbaseline.fit(X_train, y_train)","d5786fe3":"from sklearn.metrics import classification_report, roc_auc_score\n\nprint(classification_report(y_test, model.predict(X_test)))","be6d9f36":"print(classification_report(y_test, baseline.predict(X_test), zero_division=0))","22088c3f":"model.predict(X_test)","9a9bfaae":"# Train the model on all training data.\nsub_train_df = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv')\nsub_train_df = preprocess_dataframe(sub_train_df)\nscaler, one_hot_encoder = fit_transformers(sub_train_df)\n\nX_train = compute_features(sub_train_df, one_hot_encoder, scaler)\ny_train = sub_train_df.Survived\n\nmodel.fit(X_train, y_train)","c50d9451":"# Run inference on the test dataset and create a submission.\nsub_test_df = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')\nX_test = compute_features(sub_test_df, one_hot_encoder, scaler)\n\nsubmission_df = sub_test_df[['PassengerId']].copy()\nsubmission_df['Survived'] = model.predict(X_test)\nsubmission_df.head(10)","fa60000f":"submission_df.to_csv('submission.csv', index=False)","80b46c4a":"submission_df","92470c09":"!ls","51ca8dbc":"For reference, this is the Titanic's layout (to motivate some of the analysis discussed below).\n\n![](https:\/\/www.encyclopedia-titanica.org\/files\/1\/figure-one-side-view-l.gif)","247ef171":"This notebook was written as part of a Machine Learning livestream (in Arabic), on the Al Fihriya Academy channel.\nFeel free to [watch the livestream](https:\/\/www.youtube.com\/watch?v=GDD0-7FUG4s) or [join us on facebook](https:\/\/www.facebook.com\/groups\/1145703169114621).","83427b15":"## Pre-processing.","c8daaf77":"## Submission.","b8aef1e4":"## Train the Survival Prediction Model."}}