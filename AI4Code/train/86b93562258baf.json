{"cell_type":{"17ebcc53":"code","8d7cdd43":"code","f8a0d589":"code","eb40a401":"code","aef76449":"code","56abea13":"code","100b9cdc":"code","0d191bdb":"code","804d776a":"code","a019fc53":"code","6b8ef0f3":"code","d7294722":"code","be92eaa0":"code","0aac71d5":"code","5c9d0294":"code","583b7f69":"code","e47047e4":"code","9e4cb9f1":"code","e929bb91":"code","c450d9a3":"code","6d4b0216":"code","d3f8d00b":"code","44ff7c6a":"code","b2c7f3ce":"code","65186b26":"markdown","306f6f83":"markdown","290fca12":"markdown","f1d191a1":"markdown","e1d632cc":"markdown","1c12d6e3":"markdown","33e6033c":"markdown","2a2b9293":"markdown","5dcc9671":"markdown","c2139118":"markdown","66946d3f":"markdown","35b4ec8c":"markdown","dd54e500":"markdown"},"source":{"17ebcc53":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d7cdd43":"import numpy as np \nimport matplotlib.pyplot as plt  \nimport h5py \nfrom PIL import Image ","f8a0d589":"#Loading the Dataset\n#Code from another kernel\ndef load_dataset():\n    train_dataset = h5py.File('..\/input\/cat-images-dataset\/train_catvnoncat.h5', \"r\")\n    train_set_x_orig = np.array(train_dataset[\"train_set_x\"][:]) \n    train_set_y_orig = np.array(train_dataset[\"train_set_y\"][:]) \n\n    test_dataset = h5py.File('..\/input\/cat-images-dataset\/test_catvnoncat.h5', \"r\")\n    test_set_x_orig = np.array(test_dataset[\"test_set_x\"][:]) \n    test_set_y_orig = np.array(test_dataset[\"test_set_y\"][:]) \n\n    classes = np.array(test_dataset[\"list_classes\"][:]) \n    \n    train_set_y_orig = train_set_y_orig.reshape((1, train_set_y_orig.shape[0]))\n    test_set_y_orig = test_set_y_orig.reshape((1, test_set_y_orig.shape[0]))\n    \n    return train_set_x_orig, train_set_y_orig, test_set_x_orig, test_set_y_orig, classes\nX_train_org, Y_train_org, X_test_org, Y_test_org, classes = load_dataset()\n","eb40a401":"#Code Starts Here\nX_train, Y_train, X_test, Y_test=X_train_org, Y_train_org, X_test_org, Y_test_org\nfor x in [X_train, Y_train, X_test, Y_test, classes]:\n    print(x.shape)","aef76449":"X_train=X_train.reshape([X_train.shape[0],-1])\nX_test=X_test.reshape([X_test.shape[0],-1])\nX_train.shape","56abea13":"X_train=X_train\/255\nX_test=X_test\/255","100b9cdc":"from sklearn.linear_model import LogisticRegression","0d191bdb":"model=LogisticRegression(n_jobs=-1)","804d776a":"model","a019fc53":"model.fit(X_train,Y_train.T)","6b8ef0f3":"model.score(X_train,Y_train.T)","d7294722":"model.score(X_test,Y_test.T)","be92eaa0":"from sklearn.linear_model import SGDClassifier","0aac71d5":"?SGDClassifier","5c9d0294":"score=[]\nlr=[0.001,0.003,0.01,0.03,0.1,0.3,0.9,1]","583b7f69":"for l in lr:\n    model=SGDClassifier(loss='log',n_jobs=-1,learning_rate='constant',eta0=l,random_state=2)\n    model.fit(X_train,Y_train.T)\n    score.append(model.score(X_test,Y_test.T))\n    ","e47047e4":"import matplotlib.pyplot as plt","9e4cb9f1":"plt.plot(lr,score)","e929bb91":"score","c450d9a3":"def cat_or_no_cat(i):\n    if i==1:\n        return 'cat'\n    else:\n        return 'no cat'","6d4b0216":"def predict(X_org,model):\n    X=X_org.reshape(1,-1)\n    X=X\/255\n    Y_hat=model.predict(X)\n    return Y_hat","d3f8d00b":"import random\n?random.randint\n","44ff7c6a":"num=random.randint(0,X_test_org.shape[0]-1)\nprint(\"IT IS A \",cat_or_no_cat(Y_test_org[0,num]))\nprint(\"According to model it IS A \" ,cat_or_no_cat(predict(X_test_org[num],model)))\nplt.imshow(X_test_org[num])","b2c7f3ce":"acc=0\nfor i in range(100):\n    num=random.randint(0,X_test_org.shape[0]-1)\n    \n    acc=acc+abs(Y_test_org[0,num]-predict(X_test_org[num],model))\nprint(acc\/100)","65186b26":"We have 209 train cases i.e. 209 pictures intotal, each row of array represents  a picture\nwe would like to create a feature columns for each row hence We will reshape X_train and X_test to size (64x64x3,total number of samples)","306f6f83":"setting random_state=2 helps in keeping outcomes consistent.eta0 represents intial learning rate","290fca12":"SO we Have a test accuracy of 72% which is pretty nice","f1d191a1":"This just plot accuracy over 100 data examples","e1d632cc":"Now Ones we have trained our model, we will use them to classify cat or no cat","1c12d6e3":"This function loads the datast","33e6033c":"We will use n_jobs=-1 so to utilize every available cpu","2a2b9293":"Let Us try different learning rate. Logistic regression do not provide mehtod to adjust learning rate. But SGDClassifier does, so we will use it for further analysis\n","5dcc9671":"we would like to save our original datas So we can compare result better at end\nWe use shape attribute to find out shape of our train and test dataset","c2139118":"First Lets Use Well Implemented Function in SkLearn for our logistic regression. We shall use LogistricRegression and Then SGDclassifier to compare various score with various learning rates","66946d3f":"To determine a cat or no cat we will use our test cases images. These images can be accesed using num variable. By default it is set to a random number in each iteration","35b4ec8c":"Now we would flatten the inputs. This brings the input values in range of 0-1","dd54e500":"fit the model"}}