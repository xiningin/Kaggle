{"cell_type":{"cfe6b127":"code","0cd09648":"code","6657ba55":"code","a78c6cde":"code","779a01d0":"code","17fd8cb3":"code","84ef3138":"code","8233da57":"code","63cf3caf":"code","c4899209":"code","4da38bb6":"code","d2624033":"code","62a2fc70":"code","c641f5a1":"code","fc9c4807":"code","ab9be065":"code","9252bd91":"code","2aeb89ca":"code","4a49d12c":"code","560049be":"markdown","a5123abe":"markdown","ce91f4d1":"markdown","7dd0cfbf":"markdown","876b9509":"markdown","36a009cb":"markdown","e1b182c8":"markdown","0563f5ab":"markdown","ae29df36":"markdown","4ce632c7":"markdown","495a27cd":"markdown","bbad7726":"markdown","f2a0e33a":"markdown","7aa105f7":"markdown","81841393":"markdown","d29ce2a3":"markdown","6ec4da2f":"markdown","16e1e745":"markdown","5ac44c92":"markdown"},"source":{"cfe6b127":"### Load the package\n\nimport pandas as pd\nimport numpy as np\nfrom datetime import date\nimport matplotlib.pyplot as plt\nfrom datetime import datetime as dt\nimport matplotlib.dates as mdates\nimport datetime\n\n\n\n# Load the dataset\ndata_corona=pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\", index_col=0)\ndata_brasil=pd.read_csv(\"..\/input\/corona-virus-brazil\/brazil_covid19.csv\")\ndata_brasil_states=pd.read_csv(\"..\/input\/brazilianstates\/states.csv\")\ndata_idh_populacao=pd.read_csv(\"..\/input\/population-hdi-countries\/idh_populacao.csv\",index_col=0)\n\n\n\n","0cd09648":"\ntoday = datetime.datetime.now().strftime('%d\/%m\/%Y')\nprint(datetime.datetime.now())\n\n","6657ba55":"# Data cleaning\n\n\ndf = data_corona.drop('Last Update',axis=1)\n\n# Change data format\nfor i in df.index:\n    data = df['ObservationDate'][i]\n    new_data= date(int(data.split('\/')[2]),int(data.split('\/')[0]),int(data.split('\/')[1]))\n    df.loc[i,'ObservationDate']=new_data\n\n\n\n\n\n# Sorting the data\ndf=df.sort_values(['Country\/Region','ObservationDate'],ascending =  [True ,False])\ndf.index = range(len(df))# redefinindo os \u00edndices ap\u00f3s colocar em ordem alfab\u00e9tica\n\n\n# Bringing together different provinces from the same country\nfor i in df['Country\/Region'].unique():\n    aux = df.loc[df['Country\/Region']==i]\n    if aux['Province\/State'].isna().sum()==0:\n        for j in aux['ObservationDate'].unique():\n            aux2 = aux.loc[aux['ObservationDate']==j]\n            df  = df.append({'ObservationDate':j,'Country\/Region':i,'Confirmed':\\\n                             aux2['Confirmed'].sum(),'Deaths': aux2['Deaths'].sum(), \\\n                                 'Recovered': aux2['Recovered'].sum()}, ignore_index= True)\n                \ndf = df.loc[df['Province\/State'].isnull()]\ndf = df.drop('Province\/State',axis=1)\n    \ndf=df.sort_values(['Country\/Region','ObservationDate'],ascending =  [True ,False])\ndf.index = range(len(df))# redefinindo os \u00edndices ap\u00f3s colocar em ordem alfab\u00e9tica\n\n\n# Removendo pa\u00edses com poucos dados\nnumero_dados_minimo = 10\nfor i in df['Country\/Region'].unique():\n    aux= df.loc[df['Country\/Region']==i]\n    if len(aux)<numero_dados_minimo:\n        for j in aux.index:\n            df = df.drop(j)\ndf=df.sort_values(['Country\/Region','ObservationDate'],ascending =  [True ,False])\ndf.index = range(len(df))# redefinindo os \u00edndices ap\u00f3s colocar em ordem alfab\u00e9tica \n\n\n## Arrumando o nome dos eua e china\ndf = df.set_index('Country\/Region')\n\ndf= df.rename({'US':'United States'})\ndf= df.rename({'Mainland China':'China'})\ndf ['Active cases']= df['Confirmed']- df['Deaths']-df['Recovered']\ndf['Country\/Region'] = df.index\ndf.index = range(len(df))# redefinindo os \u00edndices ap\u00f3s colocar em ordem alfab\u00e9tica\n\ndf=df.sort_values(['Country\/Region','ObservationDate'],ascending =  [True ,False])\ndf.index = range(len(df))# redefinindo os \u00edndices ap\u00f3s colocar em ordem alfab\u00e9tica\n","a78c6cde":"df3=df[df.columns]\n\n# Dinamics of some countries and Brazil\nimport warnings  \nwarnings.filterwarnings('ignore')\n\n#Contry more afected\nn_cr = 4\naux2 = pd.DataFrame(columns=['Country','Number'])\nfor i in df['Country\/Region'].unique():\n    aux= df.loc[df['Country\/Region']==i]\n    aux2=aux2.append({'Country':i,'Number':aux['Active cases'].max()},ignore_index=True)\naux2 = aux2.set_index('Country')\npaises_analisados = list(aux2['Number'].nlargest(n_cr).index)   \n\n\n\nif  not 'Brazil' in paises_analisados:\n    paises_analisados.append('Brazil')\n\nif not 'Italy' in paises_analisados:\n        paises_analisados.append('Italy')\n\nif not 'China' in paises_analisados:\n        paises_analisados.append('China')\n\nfig,ax = plt.subplots(1,2 ,figsize=(20, 8))\n\n\nax[0].grid('True')\nax[0].set_title(\"N\u00famero de casos ativos\",fontsize=20)\nfor i in paises_analisados:\n    aux = df.loc[df['Country\/Region']==i]\n    ax[0].plot(aux['ObservationDate'],aux['Active cases'], label = i, linewidth=4)\n    \n\nax[0].legend(loc='best',fontsize=20)\nax[0].set_xlabel('Data',fontsize=20)\n    \nimport matplotlib.ticker as ticker # pacote para colocar as datas em formato cientifico\n\n#ax.xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, pos: '{:,.2f}'.format(x\/1000) + 'K'))\nax[0].yaxis.set_major_formatter(ticker.EngFormatter())# isto p\u00f5e os numeros no formato de engenheiro\nax[0].xaxis.set_major_formatter(mdates.DateFormatter('%d-%m'))\nax[0].xaxis.set_tick_params(labelsize=20)\nax[0].yaxis.set_tick_params(labelsize=20)\n\n# Changing the date, instead of entering the date, the day since the first infection will be placed\ntoday = date.today() # load the data now\ndf2 = df\nfor i in df['Country\/Region'].unique():\n    aux = df.loc[df['Country\/Region']==i]\n    data_primeiro_caso = aux.loc[aux['Confirmed']!=0]['ObservationDate'].min()\n    for j in aux.index:\n        df2.loc[j,'ObservationDate'] =(df['ObservationDate'][j] - data_primeiro_caso).days \n        \n# Removnedo linhas antes do primeiro caso\ndf2 = df2.drop(df[df['ObservationDate']<0].index)\n\n\n\n  \n\n\nax[1].grid('True')\nax[1].set_title(\"N\u00famero de casos ativos\",fontsize=20)\nfor i in paises_analisados:\n    aux = df2.loc[df['Country\/Region']==i]\n    ax[1].plot(aux['ObservationDate'],aux['Active cases'], label = i, linewidth=4)\n    \n\nax[1].legend(loc='best',fontsize=20)\nax[1].set_xlabel('Dias ap\u00f3s primeiro caso',fontsize=20)\n\n#ax.xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, pos: '{:,.2f}'.format(x\/1000) + 'K'))\nax[1].yaxis.set_major_formatter(ticker.EngFormatter())# isto p\u00f5e os numeros no formato de engenheiro\nax[1].xaxis.set_tick_params(labelsize=20)\nax[1].yaxis.set_tick_params(labelsize=20)\n\nplt.show()","779a01d0":"fig,ax = plt.subplots(figsize=(20, 8))\n\ncases_state = data_brasil.loc[data_brasil['date']== data_brasil['date'].max()]\n\ncases_state=cases_state.sort_values(['state'])\n\n\n\n\np1 = plt.bar(cases_state['state'], cases_state['cases'],label = 'Insiria uma legenda aqui')\n\n\nplt.title('Incid\u00eancia por estado',fontsize=30)\nax.xaxis.set_tick_params(labelsize=20)\nax.yaxis.set_tick_params(labelsize=20)\nplt.xticks(rotation=90)\nax.yaxis.set_major_formatter(ticker.EngFormatter())# isto p\u00f5e os numeros no formato de engenheiro\n\n\nxlocs, xlabs = plt.xticks()\n\ny = list(cases_state['cases'])\n\n# create a list to collect the plt.patches data\ntotals = []\n\n\n\n# set individual bar lables using above list\nfor i in ax.patches:\n    # get_x pulls left or right; get_height pushes up or down\n    ax.text(i.get_x()-.03, i.get_height()+40,str(i.get_height()), fontsize=15)\n\n\nplt.show()","17fd8cb3":"cases_state = cases_state.set_index('state')\npopulacao_brasil = data_brasil_states[['State','Population']].set_index('State')\ndf_br = cases_state.merge(populacao_brasil, left_index=True, right_index=True)\n\ndf_br=df_br.sort_index()\n\n\nfig,ax = plt.subplots(figsize=(20, 8))\np1 = plt.bar(df_br.index, df_br['cases']\/df_br['Population']*100000)\nplt.title('N\u00famero de infectados a cada 100 mil habitantes',fontsize=30)\nax.xaxis.set_tick_params(labelsize=20)\nax.yaxis.set_tick_params(labelsize=20)\nplt.xticks(rotation=90)\nax.yaxis.set_major_formatter(ticker.EngFormatter())# isto p\u00f5e os numeros no formato de engenheiro\nxlocs, xlabs = plt.xticks()\n\ny = list(cases_state['cases'])\n\n# set individual bar lables using above list\nfor i in ax.patches:\n    # get_x pulls left or right; get_height pushes up or down\n    ax.text(i.get_x()-.03, i.get_height()+0.1,str(round(i.get_height(),2)), fontsize=15)\n\nplt.show()","84ef3138":"data_today = pd.DataFrame(columns= ['ObservationDate', 'Confirmed', 'Deaths', 'Recovered', 'Active cases',\\\n       'Country\/Region'])\nfor i in df['Country\/Region'].unique():\n        aux= df.loc[df['Country\/Region']==i]\n        data_today= data_today.append(aux[aux['ObservationDate']== aux['ObservationDate'].max()])\n        \ndata_today =  data_today.set_index('Country\/Region')\n\ndata_today =  data_today.merge(data_idh_populacao, left_index=True, right_index=True)\n\ncorr_hdi_deaths = data_today['Deaths'].corr(data_today['humanDevelopmentIndex'])\nprint(corr_hdi_deaths)  \n","8233da57":"df2.index = range(len(df2))# redefinindo os \u00edndices ap\u00f3s colocar em ordem alfab\u00e9tica\n\ndf2=df2.sort_values(['Country\/Region','ObservationDate'],ascending =  [True ,False])\ndf2.index = range(len(df2))# redefinindo os \u00edndices ap\u00f3s colocar em ordem alfab\u00e9tica\n\n# Remove countries with little data\nnumero_dados_minimo = 10\nfor i in df2['Country\/Region'].unique():\n    aux= df2.loc[df2['Country\/Region']==i]\n    if len(aux)<numero_dados_minimo:\n        for j in aux.index:\n            df2 = df2.drop(j)\ndf2=df2.sort_values(['Country\/Region','ObservationDate'],ascending =  [True ,False])\ndf2.index = range(len(df2))","63cf3caf":"\n# Criando feacture primeira derivada\ndf2['Primeira derivada']=0\nfor i in df2['Country\/Region'].unique():\n    aux= df2.loc[df2['Country\/Region']==i]\n    for j in aux.index[0:len(aux.index)-3]:\n        df2.loc[j,'Primeira derivada']= -aux['Active cases'].diff()[j+2]\n        \n        \ndf2['Segunda derivada']=0\nfor i in df2['Country\/Region'].unique():\n    aux= df2.loc[df2['Country\/Region']==i]\n    for j in aux.index[0:len(aux.index)-3]:\n        df2.loc[j,'Segunda derivada']= -aux['Primeira derivada'].diff()[j+2]\n\n           \n\n\n# Criando  media segunda derivada   \nwindow_size = 4\ndf2['Media primeira derivada'] = 0\nfor i in df2['Country\/Region'].unique():\n    aux= df2.loc[df2['Country\/Region']==i]\n    for j in aux.index:\n        if j+window_size-1<(aux.index[len(aux.index)-1]):\n            df2.loc[j,'Media primeira derivada']=aux['Primeira derivada'].rolling(window_size).mean()[j+3]\n        else:\n            df2.loc[j,'Media primeira derivada']=0\n            \ndf2['Media segunda derivada'] = 0\nfor i in df2['Country\/Region'].unique():\n    aux= df2.loc[df2['Country\/Region']==i]\n    for j in aux.index:\n        if j+window_size-1<(aux.index[len(aux.index)-1]):\n            df2.loc[j,'Media segunda derivada']=aux['Segunda derivada'].rolling(window_size).mean()[j+3]\n        else:\n            df2.loc[j,'Media segunda derivada']=0\n        \n        \ndf2['Valor anterior'] = 0\nfor i in df2['Country\/Region'].unique():\n    aux= df2.loc[df2['Country\/Region']==i]\n    for j in aux.index:\n        if j+1<(aux.index[len(aux.index)-1]):\n            df2.loc[j,'Valor anterior']=aux['Active cases'][j+1]\n        else:\n            df2.loc[j,'Valor anterior']=0 ","c4899209":"df2=df2.sort_values(['Country\/Region','ObservationDate'],ascending =  [True ,False])\ndf2.index = range(len(df2))# redefinindo os \u00edndices ap\u00f3s colocar em ordem alfab\u00e9tica\n\n\n## Machine learning\n\ny  = df2['Active cases']\n\nx= df2[['ObservationDate','Media primeira derivada','Media segunda derivada', 'Valor anterior','Primeira derivada', 'Segunda derivada']]\n\n\n# Feature scaling\nfrom sklearn import preprocessing\n\nscaler = preprocessing.MinMaxScaler()\nscaled_df = scaler.fit_transform(x)\nscaled_df = pd.DataFrame(scaled_df, columns=['ObservationDate', 'Media primeira derivada'\\\n                                             , 'Media segunda derivada','Valor anterior'\\\n                                                 ,'Primeira derivada', 'Segunda derivada'])\n\n\nx=scaled_df\n\n\n\nfrom sklearn.preprocessing import PolynomialFeatures \nfrom sklearn.linear_model import LinearRegression \nlin = LinearRegression() \n  \nlin.fit(x, y)  \n\n\n\n \npoly = PolynomialFeatures(degree = 3)\nX_poly = poly.fit_transform(x) \n  \npoly.fit(X_poly, y) \nlin2 = LinearRegression() \nlin2.fit(X_poly, y) \n\n\n\n\n\n\n## Previs\u00e3o para o brasil\n\nx_brasil = x.loc[df2['Country\/Region']=='Brazil']\ny_brasil = y.loc[df2['Country\/Region']=='Brazil']\ndf2_brasil = df2.loc[df2['Country\/Region']=='Brazil']\n\ndayx = df2_brasil['ObservationDate'].max()\nnumero_dias_previsto = 60\n\n\nfor i in range(1,numero_dias_previsto):\n    # Retroalimenta\u00e7\u00e3o\n    df2_brasil = df2.loc[df2['Country\/Region']=='Brazil']\n    df2_brasil=df2_brasil.sort_values(['ObservationDate'],ascending =  [False])\n    df2_brasil.index = range(len(df2_brasil))# redefinindo os \u00edndices ap\u00f3s colocar em ordem alfab\u00e9tica \n    data_ultimo_dia = df2_brasil[df2_brasil['ObservationDate']==df2_brasil['ObservationDate'].max()].copy()\n\n    data_ultimo_dia['ObservationDate']+=1\n    data_ultimo_dia['Primeira derivada']=df2_brasil['Active cases'][df2_brasil.index[0]]-df2_brasil['Active cases'][df2_brasil.index[1]]\n    data_ultimo_dia['Segunda derivada'] = df2_brasil['Primeira derivada'][df2_brasil.index[0]]-df2_brasil['Primeira derivada'][df2_brasil.index[1]]\n    \n    df2_brasil= df2_brasil.append(data_ultimo_dia)\n    df2_brasil=df2_brasil.sort_values(['ObservationDate'],ascending =  [False])\n    df2_brasil.index = range(len(df2_brasil))# redefinindo os \u00edndices ap\u00f3s colocar em ordem alfab\u00e9tica \n    \n    df2_brasil.loc[0,'Media primeira derivada'] = df2_brasil['Media primeira derivada'].rolling(window_size).mean()[3] \n    df2_brasil.loc[0,'Media segunda derivada'] = df2_brasil['Media segunda derivada'].rolling(window_size).mean()[3] \n    df2_brasil.loc[0,'Valor anterior']= df2_brasil['Active cases'][1]\n    df2= df2.append(df2_brasil.iloc[0])\n    # valores_maximos = df2.max(axis=0)\n    df2=df2.sort_values(['Country\/Region','ObservationDate'],ascending =  [True ,False])\n    df2.index = range(len(df2))# redefinindo os \u00edndices ap\u00f3s colocar em ordem alfab\u00e9tica \n    \n\n    \n    \n    \n    \n    #Normalizando os dados novamente\n    x_teste= df2[['ObservationDate','Media primeira derivada','Media segunda derivada', 'Valor anterior','Primeira derivada', 'Segunda derivada']]\n    \n    scaler = preprocessing.MinMaxScaler()\n    scaled_df = scaler.fit_transform(x_teste)\n    scaled_df = pd.DataFrame(scaled_df, columns=['ObservationDate', 'Media primeira derivada'\\\n                                             , 'Media segunda derivada','Valor anterior'\\\n                                                 ,'Primeira derivada', 'Segunda derivada'])\n    x_teste=scaled_df\n    x_teste_brasil = x_teste[df2['Country\/Region']=='Brazil']\n\n    # Prevendo resultados\n    prev=lin2.predict(poly.fit_transform(pd.DataFrame( x_teste_brasil.head(1)) ))\n    index_change = df2[df2['Country\/Region']=='Brazil'].index[0]\n    df2.loc[index_change,'Active cases'] = prev[0]\n# df2[df2['Active cases']<0]=0\n\n# Plotando os resultados\n    \ninteirar = lambda t: int(t)\ny_pred = np.array([inteirar(xi) for xi in df2_brasil['Active cases']])\ny_pred = y_pred[::-1]\n\n\ndef date_linspace(start, end, steps):\n  delta = (end - start) \/ steps\n  increments = range(0, steps) * np.array([delta]*steps)\n  return start + increments\n\n\n\ndata_first_case_brasil = date(2020,2,26)\nlabel_days = date_linspace(data_first_case_brasil ,date(today.year,today.month+int(numero_dias_previsto\/30),today.day),len(y_pred))\n\n\n\ny_pred = pd.Series(y_pred)\ny_pred.index = label_days\n\n\n\n# fig, ax = plt.subplots()\n# ax.plot(y_pred)\n# ax = plt.gca()\n# locs, labels=plt.xticks()\n# locs = [locs[i] for i in np.arange(0, len(locs), 16)]\n# new_xticks=aaa\n# plt.xticks(locs,new_xticks, rotation=45)\n# plt.xlabel('Date')\n# plt.ylabel('Number of active cases')\n# plt.title('Forecast of corona virus in Brazil')\n# plt.grid('True')\n# plt.show()\n\n# y_pred[dayx+1:].head(numero_dias_previsto)\n\n\n\n\n\n\n\n\n# ax.set_xticks(label_days)\n# ax.set_xticklabels([label_days[5*i] for i in range(1,int(len(label_days)\/5)) ])\n# plt.xticks( aaa,np.arange(0, len(label_days), 5),rotation=90) \n\n\n\n\n\n\n","4da38bb6":"\nfig, ax = plt.subplots(figsize = (14,8))\nax.plot(y_pred.index,y_pred, linewidth=8,color= 'red')\nax.set_xlabel('Data',fontsize=20)    \nimport matplotlib.ticker as ticker # pacote para colocar as datas em formato cientifico\n\nax.yaxis.set_major_formatter(ticker.EngFormatter())# isto p\u00f5e os numeros no formato de engenheiro\nax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%m'))\nax.xaxis.set_tick_params(labelsize=20)\nax.yaxis.set_tick_params(labelsize=20)\nax.grid('True')\nax.set_title(\"N\u00famero de casos ativos\",fontsize=40)\nplt.show()\nplt.show()\n\n\ny_pred.to_csv(str(today)+'_ativos.csv')\n\n","d2624033":"previsoes_confirmados = pd.Series.to_frame(y_pred)\nprevisoes_confirmados=previsoes_confirmados.rename(columns={0: 'Confirmados'})\nprevisoes_confirmados =previsoes_confirmados.rename_axis( 'Data')\n\nprevisoes_confirmados.iloc[dayx+1:].head(numero_dias_previsto)","62a2fc70":"\n# Plot hte relationbetween recovered and confirmed\n\n\n# Selecting Contry more afected\nn_cr = 10\naux2 = pd.DataFrame(columns=['Country','Number'])\nfor i in df['Country\/Region'].unique():\n    aux= df.loc[df['Country\/Region']==i]\n    aux2=aux2.append({'Country':i,'Number':aux['Active cases'].max()},ignore_index=True)\naux2 = aux2.set_index('Country')\npaises_analisados = list(aux2['Number'].nlargest(n_cr).index)   \n\n\n\nif 'Brazil' not in paises_analisados:# selecting Brazil an d china because they are important\n    paises_analisados.append('Brazil')\n    \nif 'China' not in paises_analisados:\n    paises_analisados.append('China')\n\n\ndata_ultimo_dia_paises_analisados=pd.DataFrame(columns= df3.columns)\nfor i in paises_analisados:\n    aux = df3.loc[df3['Country\/Region']==i]\n    data_ultimo_dia= aux.loc[aux['ObservationDate']==aux['ObservationDate'].max()]\n    data_ultimo_dia_paises_analisados=data_ultimo_dia_paises_analisados.append(data_ultimo_dia)\n\ndata_ultimo_dia_paises_analisados=data_ultimo_dia_paises_analisados.set_index('Country\/Region')\nrazao_recuperado_confirmado= pd.Series(index = paises_analisados, dtype=float)\nrazao_morto_confirmado= pd.Series(index = paises_analisados, dtype=float)\n\nfor i in paises_analisados:\n    razao_recuperado_confirmado[i] = 100*data_ultimo_dia_paises_analisados['Recovered'][i]\/data_ultimo_dia_paises_analisados['Confirmed'][i]\n    razao_morto_confirmado[i] = 100*data_ultimo_dia_paises_analisados['Deaths'][i]\/data_ultimo_dia_paises_analisados['Confirmed'][i]\n\nrazao_morto_confirmado=razao_morto_confirmado.sort_index()\nrazao_recuperado_confirmado=razao_recuperado_confirmado.sort_index()\n\nfig,ax = plt.subplots(figsize=(20, 8))\n\n\n\np1 = plt.bar(razao_recuperado_confirmado.index, round(razao_recuperado_confirmado,2))\n\n\nplt.title('Taxa de recupera\u00e7\u00e3o (%)',fontsize=30)\nax.xaxis.set_tick_params(labelsize=20)\nax.yaxis.set_tick_params(labelsize=20)\nplt.xticks(rotation=45)\nax.yaxis.set_major_formatter(ticker.EngFormatter())# isto p\u00f5e os numeros no formato de engenheiro\n\n\nxlocs, xlabs = plt.xticks()\n\ny = list(cases_state['cases'])\n\n# create a list to collect the plt.patches data\ntotals = []\n\n# set individual bar lables using above list\nfor i in ax.patches:\n    # get_x pulls left or right; get_height pushes up or down\n    ax.text(i.get_x()+.11, i.get_height()+0.1,str(i.get_height()), fontsize=15)","c641f5a1":"\nfig,ax = plt.subplots(figsize=(20, 8))\n\n\n\np1 = plt.bar(razao_morto_confirmado.index, round(razao_morto_confirmado,2))\n\n\nplt.title('Taxa de mortalidade (%)',fontsize=30)\nax.xaxis.set_tick_params(labelsize=20)\nax.yaxis.set_tick_params(labelsize=20)\nplt.xticks(rotation=45)\nax.yaxis.set_major_formatter(ticker.EngFormatter())# isto p\u00f5e os numeros no formato de engenheiro\n\n\nxlocs, xlabs = plt.xticks()\n\ny = list(cases_state['cases'])\n\n# create a list to collect the plt.patches data\ntotals = []\n\n# set individual bar lables using above list\nfor i in ax.patches:\n    # get_x pulls left or right; get_height pushes up or down\n    ax.text(i.get_x()+.11, i.get_height()+0.1,str(i.get_height()), fontsize=15)\n\nplt.show()","fc9c4807":"\n\n# This file make the forecast of 'Confirmed' cases of  corona virus in april\n\n\n# Criando feacture primeira derivada\ndf3['Primeira derivada']=0\nfor i in df3['Country\/Region'].unique():\n    aux= df3.loc[df3['Country\/Region']==i]\n    for j in aux.index[0:len(aux.index)-3]:\n        df3.loc[j,'Primeira derivada']= -aux['Confirmed'].diff()[j+2]\n        \n        \ndf3['Segunda derivada']=0\nfor i in df3['Country\/Region'].unique():\n    aux= df3.loc[df3['Country\/Region']==i]\n    for j in aux.index[0:len(aux.index)-3]:\n        df3.loc[j,'Segunda derivada']= -aux['Primeira derivada'].diff()[j+2]\n\n           \n\n\n# Criando  media segunda derivada   \nwindow_size = 4\ndf3['Media primeira derivada'] = 0\nfor i in df3['Country\/Region'].unique():\n    aux= df3.loc[df3['Country\/Region']==i]\n    for j in aux.index:\n        if j+window_size-1<(aux.index[len(aux.index)-1]):\n            df3.loc[j,'Media primeira derivada']=aux['Primeira derivada'].rolling(window_size).mean()[j+3]\n        else:\n            df3.loc[j,'Media primeira derivada']=0\n            \ndf3['Media segunda derivada'] = 0\nfor i in df3['Country\/Region'].unique():\n    aux= df3.loc[df3['Country\/Region']==i]\n    for j in aux.index:\n        if j+window_size-1<(aux.index[len(aux.index)-1]):\n            df3.loc[j,'Media segunda derivada']=aux['Segunda derivada'].rolling(window_size).mean()[j+3]\n        else:\n            df3.loc[j,'Media segunda derivada']=0\n        \n        \ndf3['Valor anterior'] = 0\nfor i in df3['Country\/Region'].unique():\n    aux= df3.loc[df3['Country\/Region']==i]\n    for j in aux.index:\n        if j+1<(aux.index[len(aux.index)-1]):\n            df3.loc[j,'Valor anterior']=aux['Confirmed'][j+1]\n        else:\n            df3.loc[j,'Valor anterior']=0           \n\n\n\n\n\n\n\n\n\n\n\n\n\ndf3=df3.sort_values(['Country\/Region','ObservationDate'],ascending =  [True ,False])\ndf3.index = range(len(df3))# redefinindo os \u00edndices ap\u00f3s colocar em ordem alfab\u00e9tica\n\n\n\n\n\n# Changing the date, instead of entering the date, the day since the first infection will be placed\ntoday = date.today() # load the data now\nfor i in df3['Country\/Region'].unique():\n    aux = df3.loc[df3['Country\/Region']==i]\n    data_primeiro_caso = aux.loc[aux['Confirmed']!=0]['ObservationDate'].min()\n    for j in aux.index:\n        df3.loc[j,'ObservationDate'] =(df3['ObservationDate'][j] - data_primeiro_caso).days \n        \n# Removnedo linhas antes do primeiro caso\ndf3 = df3.drop(df3[df3['ObservationDate']<0].index)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndf3=df3.sort_values(['Country\/Region','ObservationDate'],ascending =  [True ,False])\ndf3.index = range(len(df3))# redefinindo os \u00edndices ap\u00f3s colocar em ordem alfab\u00e9tica\n\n\n## Machine learning\n\ny  = df3['Confirmed']\n\nx= df3[['ObservationDate','Media primeira derivada','Media segunda derivada', 'Valor anterior','Primeira derivada', 'Segunda derivada']]\n\n\n# Feature scaling\nfrom sklearn import preprocessing\n\nscaler = preprocessing.MinMaxScaler()\nscaled_df = scaler.fit_transform(x)\nscaled_df = pd.DataFrame(scaled_df, columns=['ObservationDate', 'Media primeira derivada'\\\n                                             , 'Media segunda derivada','Valor anterior'\\\n                                                 ,'Primeira derivada', 'Segunda derivada'])\n\n\nx=scaled_df\n\n\n\nfrom sklearn.preprocessing import PolynomialFeatures \nfrom sklearn.linear_model import LinearRegression \nlin = LinearRegression() \n  \nlin.fit(x, y)  \n\n\n\n \npoly = PolynomialFeatures(degree = 2)\nX_poly = poly.fit_transform(x) \n  \npoly.fit(X_poly, y) \nlin2 = LinearRegression() \nlin2.fit(X_poly, y) \n\n\n\n\n\n\n## Previs\u00e3o para o brasil\n\nx_brasil = x.loc[df3['Country\/Region']=='Brazil']\ny_brasil = y.loc[df3['Country\/Region']=='Brazil']\ndf3_brasil = df3.loc[df3['Country\/Region']=='Brazil']\n\ndayx = df3_brasil['ObservationDate'].max()\nnumero_dias_previsto = 60\n\n\nfor i in range(1,numero_dias_previsto):\n    # Retroalimenta\u00e7\u00e3o\n    df3_brasil = df3.loc[df3['Country\/Region']=='Brazil']\n    df3_brasil=df3_brasil.sort_values(['ObservationDate'],ascending =  [False])\n    df3_brasil.index = range(len(df3_brasil))# redefinindo os \u00edndices ap\u00f3s colocar em ordem alfab\u00e9tica \n    data_ultimo_dia = df3_brasil[df3_brasil['ObservationDate']==df3_brasil['ObservationDate'].max()].copy()\n\n    data_ultimo_dia['ObservationDate']+=1\n    data_ultimo_dia['Primeira derivada']=df3_brasil['Confirmed'][df3_brasil.index[0]]-df3_brasil['Confirmed'][df3_brasil.index[1]]\n    data_ultimo_dia['Segunda derivada'] = df3_brasil['Primeira derivada'][df3_brasil.index[0]]-df3_brasil['Primeira derivada'][df3_brasil.index[1]]\n    \n    df3_brasil= df3_brasil.append(data_ultimo_dia)\n    df3_brasil=df3_brasil.sort_values(['ObservationDate'],ascending =  [False])\n    df3_brasil.index = range(len(df3_brasil))# redefinindo os \u00edndices ap\u00f3s colocar em ordem alfab\u00e9tica \n    \n    df3_brasil.loc[0,'Media primeira derivada'] = df3_brasil['Media primeira derivada'].rolling(window_size).mean()[3] \n    df3_brasil.loc[0,'Media segunda derivada'] = df3_brasil['Media segunda derivada'].rolling(window_size).mean()[3] \n    df3_brasil.loc[0,'Valor anterior']= df3_brasil['Confirmed'][1]\n    df3= df3.append(df3_brasil.iloc[0])\n    # valores_maximos = df3.max(axis=0)\n    df3=df3.sort_values(['Country\/Region','ObservationDate'],ascending =  [True ,False])\n    df3.index = range(len(df3))# redefinindo os \u00edndices ap\u00f3s colocar em ordem alfab\u00e9tica \n    \n\n    \n    \n    \n    \n    #Normalizando os dados novamente\n    x_teste= df3[['ObservationDate','Media primeira derivada','Media segunda derivada', 'Valor anterior','Primeira derivada', 'Segunda derivada']]\n    \n    scaler = preprocessing.MinMaxScaler()\n    scaled_df = scaler.fit_transform(x_teste)\n    scaled_df = pd.DataFrame(scaled_df, columns=['ObservationDate', 'Media primeira derivada'\\\n                                             , 'Media segunda derivada','Valor anterior'\\\n                                                 ,'Primeira derivada', 'Segunda derivada'])\n    x_teste=scaled_df\n    x_teste_brasil = x_teste[df3['Country\/Region']=='Brazil']\n\n    # Prevendo resultados\n    prev=lin2.predict(poly.fit_transform(pd.DataFrame( x_teste_brasil.head(1)) ))\n    index_change = df3[df3['Country\/Region']=='Brazil'].index[0]\n    df3.loc[index_change,'Confirmed'] = prev[0]\n# df3[df3['Active cases']<0]=0\n\n# Plotando os resultados\n    \ny_pred = np.array([inteirar(xi) for xi in df3_brasil['Confirmed']])\ny_pred = y_pred[::-1]\n\ndata_first_case_brasil = date(2020,2,26)\n\nlabel_days = date_linspace(data_first_case_brasil ,date(today.year,today.month+int(numero_dias_previsto\/30),today.day),len(y_pred))\n\n\n\ny_pred = pd.Series(y_pred)\ny_pred.index = label_days\n\n","ab9be065":"warnings.filterwarnings('ignore')\n\nfig, ax = plt.subplots(figsize = (21,12))\nax.plot(y_pred,linewidth=8)\nax.set_xlabel('Data',fontsize=20)    \nimport matplotlib.ticker as ticker # pacote para colocar as datas em formato cientifico\n\nax.yaxis.set_major_formatter(ticker.EngFormatter())# isto p\u00f5e os numeros no formato de engenheiro\nax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%m'))\nax.xaxis.set_tick_params(labelsize=20)\nax.yaxis.set_tick_params(labelsize=20)\n\nax.grid('True')\nax.set_title(\"N\u00famero de casos confirmados\",fontsize=40)\nplt.show()\n\nprevisoes_confirmados = pd.Series.to_frame(y_pred)\nprevisoes_confirmados=previsoes_confirmados.rename(columns={0: 'Confirmados'})\nprevisoes_confirmados =previsoes_confirmados.rename_axis( 'Data')","9252bd91":"previsoes_confirmados.iloc[dayx+1:].head(numero_dias_previsto)\n","2aeb89ca":"previsao_mortos_brasil = int(razao_morto_confirmado.Brazil*previsoes_confirmados.max()\/100)\nprint(previsao_mortos_brasil)\n","4a49d12c":"y_pred.to_csv(str(today)+'_confirmados.csv')\n","560049be":"**3) Pa\u00edses menos desenvolvidos s\u00e3o mais afetados pela covid19?**\n\nPara analisar se pa\u00edses menos desenvolvidos s\u00e3o mais afetados pela covid 19, \u00e9 calculado a coeficiente de correla\u00e7\u00e3o de Pearson entre o n\u00famero de mortos pela covid19 com o IDH dos pa\u00edses. ","a5123abe":"**7) Quantas pessoas ser\u00e3o infectadas no Brasil at\u00e9 junho?**\n\nTamb\u00e9m utilizando regress\u00e3o polinomial e usando o mesmo modelo e features utilizadas anteriormente, foi previsto o n\u00famero de infectados no Brasil pela covid 19.\n","ce91f4d1":"# <font color='black'>Previs\u00e3o de casos da covid19 no Brasil nos pr\u00f3ximos dois meses <\/font>","7dd0cfbf":" ## Extra\u00e7\u00e3o de caracter\u00edsticas\n\nComo pode ser visto na imagem acima, o tempo desde a ocorr\u00eancia do primeiro caso exerce uma grande influ\u00eancia na din\u00e2mica do v\u00edrus. Outra vari\u00e1vel interessante \u00e9 a taxa de crescimento do v\u00edrus, isto \u00e9, a derivada. A segunda derivada tamb\u00e9m \u00e9 uma vari\u00e1vel interessante, pois quando ela \u00e9 positiva indica que ainda estamos na parte exponencial da curva de infec\u00e7\u00e3o. Desta forma, estas duas vari\u00e1veis ser\u00e3o usadas como features, assim como o tempo, em dias, desde o primeiro caso no pa\u00eds.\n","876b9509":" ## Cria\u00e7\u00e3o do modelo\n\n\nDada as seis vari\u00e1veis de entrada(primeira derivada, segunda derivada, m\u00e9dia m\u00f3vel da primeira derivada, m\u00e9dia m\u00f3vel da segunda derivada, valor de infectados no dia anterior e o n\u00famero de dias), uma regress\u00e3o polinomial de segundo grau foi realizada para tentar predizer o n\u00famero de casos ativos no Brasil.\n\n","36a009cb":"**1) Quais os pa\u00edses mais infectados pela corona v\u00edrus e como o Brasil est\u00e1 em compara\u00e7\u00e3o a eles?**\n\nA imagem a seguir mostra a curva de casos ativos(infetados - recuperados - mortos) da covid19 em diversos pa\u00edses desde o primeiro dia de cont\u00e1gio.\n\nAnalisando esta imagem, podemos ver que a curva come\u00e7a crescendo lentamente nos primeiros dias, ent\u00e3o ela passa por um crescimento exponencial, at\u00e9 alcan\u00e7ar um plat\u00f4, onde fica constante para a partir deste ponto comecar a decrescer.\n","e1b182c8":"**5) Qual o percentual de recuperados no Brasil em rela\u00e7\u00e3o a outros pa\u00edses?**\n\n\nO gr\u00e1fico abaixo mostra a taxa de recuperados no Brasil em rela\u00e7\u00e3o ao numero de casos confirmados, comparando com os outros 10 pa\u00edses que mais tiveram casos de codiv 19 at\u00e9 o momento. \nNote que o Brasil possui uma das maiores taxas, a frente mesmo de pa\u00edses que est\u00e3o enfrentando a doen\u00e7a h\u00e1 mais tempo, como It\u00e1lia e Fran\u00e7a.","0563f5ab":"**6) Qual a mortalidade da covid19 no Brasil comparado com outros pa\u00edses?**\n\n\n\nO gr\u00e1fico abaixo mostra a raz\u00e3o mortos por confirmados nos dez pa\u00edses com mais casos junto com o Brasil. Apesar de serem mais desenvlvidos, pa\u00edses da Europa possuem maiores taxas de mortalidade.\nIsto poderia ser explicado devido ao fato de serem pa\u00edses com percentual de idosos maior.\n","ae29df36":"Apesar de S\u00e3o Paulo e Rio de Janeiro estarem entre os estados com maior n\u00famero de casos, tais estados, assim com MG est\u00e3o entre os mais populosos do Brasil. Logo o tamanho da popula\u00e7\u00e3o poderia ser uma medida que estaria enviesando nossos resultados. O gr\u00e1fico a seguir mostra o n\u00famero de casos afetados dividido pelo tamanho da popula\u00e7\u00e3o.\nAssim podemos ver que apesar de S\u00e3o Paulo e Rio possuirem mais casos, estados como Amap\u00e1, Amazonas e Ceear\u00e1 est\u00e3o em sitau\u00e7\u00e3o pior.","4ce632c7":"**2) Quais os estados brasileiros mais atingidos pela covid19?**\n\nO gr\u00e1fico mostra o n\u00famero total de casos pela covid 19 em cada estado brasileiro. \n","495a27cd":"**8) Mantendo a atual taxa de mortalidade, quantas pessoas ser\u00e3o mortas no Brasil at\u00e9 os pr\u00f3ximos dois meses?**\n\n\n","bbad7726":"**4) Quais s\u00e3o as previs\u00f5es de casos ativos no Brasil para os pr\u00f3ximos dois meses por meio de regress\u00e3o polinomial??**\n\n\nAs previs\u00f5es para os meses de abril e maio s\u00e3o dadas no gr\u00e1fico abaixo. Deve-se lembrar que estas previs\u00f5es excluem o n\u00famero de mortos e recuperados, logo o total de pessoas infectadas ser\u00e1 muito maior.","f2a0e33a":"Para atenuar o efeito de grandes varia\u00e7\u00f5es di\u00e1rias causadas por fatores externos n\u00e3o previstos no modelo, foi realizada um m\u00e9dia m\u00f3vel na primeira e segunda derivada. Estas m\u00e9dias m\u00f3veis s\u00e3o usadas como features. O valor de infec\u00e7\u00f5es no dia anterior tamb\u00e9m \u00e9 uma importatne feature, e pode ser um indicativo importante do ponto de infec\u00e7\u00e3o da curva no dia previsto. Logo tamb\u00e9m ser\u00e1 usado como feature\n\n","7aa105f7":"Por se tratar de um valor baixo, poderia-se concluir que todos os pa\u00edses s\u00e3o igualmente afetados pelo corona v\u00edrus. Entretanto, por se tratar de um v\u00edrus novo, \u00e9 poss\u00edvel que em muitos pa\u00edses menos desenvolvidos n\u00e3o tenha chegado o corona v\u00edrus ainda. Por isto, ainda \u00e9 cedo para maiores conclus\u00f5es.","81841393":"\u00daltima execu\u00e7\u00e3o do c\u00f3digo:","d29ce2a3":"Este notebook consiste de uma an\u00e1lise explorat\u00f3ria da covid19 no Brasil, comparando a com outros pa\u00edses. Al\u00e9m disso, atrav\u00e9s de um modelo de Machine Learning \u00e9 feita uma previs\u00e3o da incid\u00eancia de covid19 no Brasil durante os pr\u00f3ximos dois meses. \n\nQuais as perguntas que ser\u00e3o respondidas neste notebook:\n\n> 1) Quais os pa\u00edses mais infectados pela covid19 e como o Brasil est\u00e1 em compara\u00e7\u00e3o a eles?\n\n> 2) Quais os estados brasileiros mais atingidos pela covid19?\n\n> 3) Pa\u00edses menos desenvolvidos s\u00e3o mais afetados pela covid19?\n\n> 4) Quais s\u00e3o as previs\u00f5es de casos ativos no Brasil para os pr\u00f3ximos dois meses por meio de regress\u00e3o polinomial?\n\n> 5) Qual \u00e9 a taxa de recupera\u00e7\u00e3o da covid19 no Brasil e como se compara com demais pa\u00edses no mundo?\n\n> 6) Qual \u00e9 a taxa de mortalidade da covid19 no Brasil e como se compara com demais pa\u00edses no mundo?\n\n> 7) Quantas pessoas ser\u00e3o infectadas no Brasil nos pr\u00f3ximos dois meses, de acordo com a regress\u00e3o polinomial? \n\n> 8) Mantendo a atual taxa de mortalidade, quantas pessoas ser\u00e3o mortas no Brasil ate os pr\u00f3ximos dois meses?\n\n   \n\n\n\n\nOs dados usados neste modelos est\u00e3o dispon\u00edveis em:\nhttps:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset\nhttps:\/\/www.kaggle.com\/thiagobodruk\/brazilianstates\n\n\nO projeto pode ser encontrado em https:\/\/github.com\/lucasarielrc\/Corona-virus.\n\n\n\n","6ec4da2f":"Outra forma de ver as previs\u00f5es para cada data:","16e1e745":"Outra forma de ver os resultados","5ac44c92":"## An\u00e1lise explorat\u00f3ria dos dados\n"}}