{"cell_type":{"f443647f":"code","a6177b5b":"code","3b557704":"code","ce442d69":"code","1f78e105":"code","ec5ba0d3":"code","3f2c9a8c":"code","b923e84c":"code","dff5bc0f":"code","96f04544":"code","f1227122":"code","5bf75e38":"code","98cbdabd":"code","5c0b46cb":"code","277f8ad1":"code","9334f8f9":"code","decb43cf":"code","8edc1b41":"code","d13e4cff":"code","84612f5c":"code","25c860ff":"code","d4f17f95":"code","4c3813cf":"code","6743173f":"code","5974839c":"code","6bcb4c5a":"code","aac1c72a":"code","aef44c10":"code","72c0c3f3":"code","a63d72a6":"code","70e5b836":"code","e1fa3d74":"code","126f8303":"code","813fb5fe":"code","0aacc482":"code","4ceb3d69":"code","afa41a8a":"code","ef957cdc":"code","599db881":"code","f8fa4ec1":"code","9ef11c61":"code","13bcc291":"code","e550ea0a":"code","2214c340":"code","46023f50":"code","c6466311":"code","e1e19ddb":"code","73e864e9":"code","4a262f39":"markdown","e6e10360":"markdown","767088fd":"markdown","846d7917":"markdown","5a8cb09b":"markdown","2ee63ffc":"markdown","80a3db16":"markdown","6d0b3ed9":"markdown","7270dd34":"markdown","c05917a7":"markdown","9cc02c46":"markdown"},"source":{"f443647f":"# import the dependencies \nimport numpy as np\nimport pandas as pd\nimport tensorflow\nimport seaborn as sns\n","a6177b5b":"# load and check data\ntrain_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")","3b557704":"# Data exploratory\n\n#printing first five rows of  train_dataset\ntrain_data.head() ","ce442d69":"test_data.head()","1f78e105":"# check the shape of train_data\ntrain_data.shape # 891 rows and 12 columns","ec5ba0d3":"# Now check shape of test data\ntest_data.shape","3f2c9a8c":"#info\ntrain_data.info()","b923e84c":"#info 2\ntest_data.info()","dff5bc0f":"# sumarie and statistics\ntrain_data.describe()","96f04544":"test_data.describe()","f1227122":"train_data.isnull().sum()","5bf75e38":"test_data.isnull().sum()","98cbdabd":"# Correlation matrix between numerical values (SibSp Parch Age and Fare values) and Survived \ng = sns.heatmap(train_data[[\"Survived\",\"SibSp\",\"Parch\",\"Age\",\"Fare\"]].corr(),annot=True\n                , fmt = \".2f\", cmap = \"coolwarm\")","5c0b46cb":"# survival probability\ng1 = sns.barplot(x=\"Sex\",y=\"Survived\",data=train_data)\ng1 = g.set_ylabel(\"Survival Probability\")","277f8ad1":"# handle missing value in train_data\ntrain_data[\"Age\"] = train_data[\"Age\"].fillna(train_data[\"Age\"].mean())","9334f8f9":"train_data[\"Age\"].head()","decb43cf":"train_data.isnull().sum()","8edc1b41":"# handle missing value in test_data\ntest_data[\"Age\"] = test_data[\"Age\"].fillna(test_data[\"Age\"].mean())","d13e4cff":"test_data.isnull().sum()","84612f5c":"# train_data\ntrain_data['Cabin']=train_data['Cabin'].fillna(train_data['Cabin'].mode()[0])\ntrain_data['Embarked']=train_data['Embarked'].fillna(train_data['Embarked'].mode()[0])","25c860ff":"train_data.isnull().sum() # all missing values handle","d4f17f95":"# test_data\ntest_data['Cabin']=test_data['Cabin'].fillna(test_data['Cabin'].mode()[0])\ntest_data['Fare']=test_data['Fare'].fillna(test_data['Fare'].mode()[0])","4c3813cf":"test_data.isnull().sum()","6743173f":"dataset =  pd.concat([train_data, test_data], axis=0)","5974839c":"dataset.shape","6bcb4c5a":"# Fill empty and NaNs values with NaN\ndataset = dataset.fillna(np.nan)","aac1c72a":"# drop name column\ndataset.drop(['Name'],axis=1,inplace=True)","aef44c10":"dataset.columns","72c0c3f3":"# How to handle categorical data?\nfrom sklearn.preprocessing import LabelEncoder\nenc = LabelEncoder()","a63d72a6":"encode = dataset[['Sex','Ticket','Cabin','Embarked']].apply(enc.fit_transform)\nencode","70e5b836":"dataset[['Sex','Ticket','Cabin','Embarked']] = encode[['Sex','Ticket','Cabin','Embarked']]","e1fa3d74":"dataset.head()","126f8303":"dataset.shape","813fb5fe":"train_len = len(train_data)","0aacc482":"# Modeling","4ceb3d69":"train = dataset[:train_len]\ntest= dataset[train_len:]\ntest.drop(labels=[\"Survived\"],axis = 1,inplace=True)","afa41a8a":"test.shape","ef957cdc":"train.shape","599db881":"train[\"Survived\"] = train[\"Survived\"].astype(int)","f8fa4ec1":"Y_train = train[\"Survived\"]\n\nX_train = train.drop(labels = [\"Survived\"],axis = 1)","9ef11c61":"from sklearn.ensemble import GradientBoostingClassifier","13bcc291":"# Training ","e550ea0a":"#model = GradientBoostingClassifier(learning_rate=0.01,max_depth = 2)\nmodel = GradientBoostingClassifier(learning_rate=0.02,max_depth = 3,n_estimators =100)\nmodel.fit(X_train, Y_train)","2214c340":"Score = model.score(X_train, Y_train)\nprint(\"Score: %.2f%%\" % (Score * 100.0))","46023f50":"predictions = model.predict(test)","c6466311":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})","e1e19ddb":"output ","73e864e9":"output.to_csv('my_submissionAtta.csv', index=False)\nprint(\"Your submission was successfully saved!\")","4a262f39":"# Content \n\u2022\tIntroduction::\n\u2022\tLoad data\n\u2022\tData exploratory\n\u2022\tCheck missing value\n\u2022\tFeature analysis\n\u2022\tHandle missing values\n\u2022\tJoining test and train data\n\u2022\tOne hot coding\n\u2022\tSplitting data\n\u2022\tTraning model using RandomForestClassifier\n\u2022\tPredication\n\u2022\tSaving submission file in csv format\n","e6e10360":"# Predication","767088fd":"# handle missing values\n# numerical_values","846d7917":"# Categorical values","5a8cb09b":"# check the missing values in train and test data","2ee63ffc":"#  By Using ML to create a model that predicts which passengers survived the Titanic shipwreck.","80a3db16":"If you found this notebook helpful or you just liked it , some upvotes would be very much appreciated - That will keep me motivated :)","6d0b3ed9":"# Extras","7270dd34":"# Now Feature analysis","c05917a7":"# Now Output","9cc02c46":"#  Saving submission csv file"}}