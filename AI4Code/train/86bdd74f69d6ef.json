{"cell_type":{"c5342391":"code","128d0a08":"code","1fb7f964":"code","45ea04e8":"code","36a95426":"code","37910cac":"code","8fe81620":"code","72d2c9b0":"code","62fcf489":"code","7f974e8c":"code","c49b2a63":"code","781de1c5":"code","e972fc62":"code","8d35e29e":"code","cc6a732c":"code","4de51f83":"code","f3bc3f6a":"code","442e29f6":"code","643c4bb0":"code","ba1e86ff":"code","5509f349":"code","8a8c68c4":"code","6cb7a46f":"code","3dadbe95":"code","762e6ad5":"code","cf8c6667":"code","94297f6b":"code","c92f4617":"code","debdc482":"code","e225a4f9":"code","84700e0a":"code","c9683743":"code","98616061":"markdown","693f4563":"markdown","52651c20":"markdown","df926c72":"markdown","28575165":"markdown"},"source":{"c5342391":"import os\nimport sys\nimport warnings\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, StackingClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\n\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier","128d0a08":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1fb7f964":"Train_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv')\nTest_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')","45ea04e8":"Train_df.head()","36a95426":"Test_df.head()","37910cac":"sub.head()","8fe81620":"Train_df.shape","72d2c9b0":"Train_df.isna().sum()","62fcf489":"not_need_columns = [\n    'PassengerId', 'Name', 'Cabin'\n]","7f974e8c":"train_df = Train_df.drop(axis=1, columns=not_need_columns)\ntest_df = Test_df.drop(axis=1, columns=not_need_columns)","c49b2a63":"train_df.info()","781de1c5":"le = LabelEncoder()\n\ntrain_df['Sex'] = le.fit_transform(train_df['Sex'])\ntrain_df['Embarked'] = le.fit_transform(train_df['Embarked'])\ntrain_df['Age'] = train_df['Age'].fillna(value=train_df['Age'].mean())\n\ntest_df['Sex'] = le.fit_transform(test_df['Sex'])\ntest_df['Embarked'] = le.fit_transform(test_df['Embarked'])\ntest_df['Age'] = test_df['Age'].fillna(value=test_df['Age'].mean())","e972fc62":"test_df.info()","8d35e29e":"tickets = train_df['Ticket'].str.split()\ntickets = [\n    ticket[-1] if len(ticket) > 1 else ticket[0] \n    for ticket in [\n        ['9999999999'] if ticket is np.nan else ticket \n    for ticket in tickets]\n]\ntickets = [int(elem) if elem.isdigit() else 9999999999 for elem in tickets]\ntrain_df['Ticket'] = tickets\n\ntickets = test_df['Ticket'].str.split()\ntickets = [\n    ticket[-1] if len(ticket) > 1 else ticket[0] \n    for ticket in [\n        ['9999999999'] if ticket is np.nan else ticket \n    for ticket in tickets]\n]\ntickets = [int(elem) if elem.isdigit() else 9999999999 for elem in tickets]\ntest_df['Ticket'] = tickets\n\ntest_df['Fare'] = test_df['Fare'].fillna(value=test_df['Fare'].mean())\ntrain_df['Fare'] = train_df['Fare'].fillna(value=train_df['Fare'].mean())","cc6a732c":"train_df.info()","4de51f83":"test_df['Fare'] = test_df['Fare'].fillna(value=test_df['Fare'].mean())\ntrain_df['Fare'] = train_df['Fare'].fillna(value=train_df['Fare'].mean())","f3bc3f6a":"Y_train = train_df.loc[:, ['Survived']]\nX_train = train_df.drop(axis=1, columns=['Survived'])\nx_train, x_test, y_train, y_test = train_test_split(X_train, Y_train,\n                                                    test_size=0.33,\n                                                    random_state=42)","442e29f6":"selector = SelectKBest(k=5)\nrfc = RandomForestClassifier()\npipe = Pipeline(steps=[('selector', selector), ('rfc', rfc)])\n\nparameters = {'rfc__n_estimators':[13, 25, 50, 102, 124], \n              'rfc__max_depth': [5, 7, 18, 47, 100],\n              'rfc__min_samples_split': [1, 2, 3],\n              'rfc__random_state': [5, 23, 38, 42]}\ng_search = GridSearchCV(pipe, parameters, n_jobs=-1)","643c4bb0":"g_fit = g_search.fit(x_train, y_train)\nbest_clf = g_fit.best_estimator_\nprint(best_clf)","ba1e86ff":"best_predictions = best_clf.predict(x_test)\naccuracy_score(best_predictions, y_test)","5509f349":"y_pred_best_clf = best_clf.predict(test_df)","8a8c68c4":"estimators = [\n    ('rfc', RandomForestClassifier(max_depth=70, \n                                   n_estimators=58, \n                                   min_samples_split=2,\n                                   n_jobs=-1,\n                                   random_state=3)),\n    ('lgbm', LGBMClassifier(max_depth=123,\n                            n_estimators=95,\n                            n_jobs=-1,\n                            num_leaves=65,\n                            random_state=95),\n    ('xgb', XGBClassifier(max_depth=150, \n                          n_estimators=95, \n                          random_state=45, \n                          n_jobs=-1)))\n]","6cb7a46f":"stack_clfs = StackingClassifier(\n    estimators=estimators, final_estimator=LogisticRegression(C=0.09, \n                                                              max_iter=150,\n                                                              random_state=65,\n                                                              solver='liblinear',\n                                                              n_jobs=-1)\n)","3dadbe95":"stack_clfs.fit(x_train, y_train)","762e6ad5":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline","cf8c6667":"params = {'n_estimators': 500,\n          'objective': 'binary',\n          'max_depth': 250,\n          'num_leaves': 180,\n          'random_state': 42,\n          'metric': 'auc',\n          'n_jobs': -1}\n\nlgbm = LGBMClassifier(**params)","94297f6b":"pipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('lgbm', lgbm),\n])","c92f4617":"pipeline.fit(x_train, y_train)","debdc482":"y_pred = pipeline.predict(x_test)\naccuracy_score(y_pred, y_test)","e225a4f9":"y_pred = lgbm.predict(test_df)","84700e0a":"submission = pd.DataFrame({\n        \"PassengerId\": Test_df[\"PassengerId\"],\n        \"Survived\": y_pred_best_clf\n    })","c9683743":"submission.to_csv('submission.csv', index=False)","98616061":"### 2.4 Pipeline, StandardScaller","693f4563":"# Thanks for reading. Don't forget to upvote the work. Good luck kaggling!","52651c20":"### 2.3 Stacking models","df926c72":"# Modeling","28575165":"### 2.1 RandomForestClassifier, GridSearchCV"}}