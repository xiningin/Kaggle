{"cell_type":{"787364bb":"code","38852139":"code","120515c4":"code","017a87b4":"code","57609195":"code","86115876":"code","e68839f1":"code","15d18bb7":"code","4a313f95":"code","419c08d2":"code","1d4755a2":"code","502769b3":"code","3ce31bf4":"code","2af74ce1":"code","00a78c40":"code","a71140b4":"code","d132010b":"code","688b6e2c":"code","d614e0c3":"code","8e95e09d":"code","45d9a357":"code","04798dcb":"code","e5735afe":"code","1b114c77":"code","9f39ac46":"code","8ec57e54":"code","3f574536":"code","15e715cd":"code","e4d14b1b":"code","f803238c":"code","e7665d08":"code","f626348e":"code","38a60b4a":"code","978203fb":"code","9c55609b":"code","0fcd7dd0":"code","93578a29":"code","7d01b3eb":"markdown","9efb78b5":"markdown","a5c25616":"markdown","964ec387":"markdown","ecb9e8c4":"markdown","4552c348":"markdown","e6545463":"markdown","f1537937":"markdown","0f666897":"markdown","fa6019f2":"markdown","066549a5":"markdown","d3a3abf0":"markdown","e279b8f9":"markdown","c616aff5":"markdown","914e573e":"markdown","58519b54":"markdown","249790cc":"markdown","3e88df9d":"markdown","780c15c5":"markdown","3bd0a2d7":"markdown","1f0f1d35":"markdown","388fdbf0":"markdown","37998722":"markdown","dcd35488":"markdown","64829a16":"markdown","76da2ea0":"markdown","5caf95ae":"markdown","eb5e9487":"markdown","188fdc68":"markdown","9abbd767":"markdown","7b188aab":"markdown","bc4f98ed":"markdown","882ec330":"markdown","aadf8840":"markdown","c3096a7b":"markdown","880bb6d5":"markdown","d8540c0f":"markdown","25992b2f":"markdown","6bb419ba":"markdown","89304f6a":"markdown","24f3e77f":"markdown"},"source":{"787364bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","38852139":"data=pd.read_csv(\"\/kaggle\/input\/league-of-legends-diamond-ranked-games-10-min\/high_diamond_ranked_10min.csv\")","120515c4":"data.head()","017a87b4":"data.drop([\"gameId\"],axis=1,inplace=True)","57609195":"data.head()","86115876":"\ndt=data.loc[:,:\"blueDragons\"].head(100)","e68839f1":"dt.head()","15d18bb7":"dt.shape","4a313f95":"dt.info()","419c08d2":"dt.describe().T","1d4755a2":"dt.head()","502769b3":"sns.countplot(dt.blueWins)\nplt.xlabel(\"Win(1) and Loss(0)\")\nplt.title(\"W\u0130NNER AND LOSTER\")\nplt.show()","3ce31bf4":"x=dt.blueKills.value_counts().index\ny=dt.blueKills.value_counts().values\nplt.figure(figsize=(15,8))\nsns.barplot(x,y)\nplt.title(\"Blue Team K\u0130ll Rate\")\nplt.xlabel(\" K\u0130ll Number\")\nplt.ylabel(\" K\u0130LL Rate\")\nplt.xticks(rotation= 45)\nplt.show()\n","2af74ce1":"sns.boxplot(x=\"blueKills\",y=\"blueDeaths\",data=dt,palette=\"PRGn\")","00a78c40":"dt.tail()","a71140b4":"y=dt.blueWins.values\nx_data=dt.drop([\"blueWins\"],axis=1)","d132010b":"#Normalization\nx=(x_data-np.min(x_data)\/np.max(x_data)-np.min(x_data))\n","688b6e2c":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)\n\nx_train=x_train.T\nx_test=x_test.T\ny_train=y_train.T\ny_test=y_test.T\nprint(\"x_train: \",x_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)\n","d614e0c3":"def initialize(dimension):\n    \n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b","8e95e09d":"\ndef sigmoid(z):\n    \n    y_head = 1\/(1+ np.exp(-z))\n    return y_head","45d9a357":"def forward_backward(w,b,x_train,y_train):\n    # forward propagation\n    z = np.dot(w.T,x_train) + b\n    \n    y_head = sigmoid(z)\n    \n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    \n    cost = (np.sum(loss))\/x_train.shape[1]  \n    \n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] \n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                 \n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    \n    return cost,gradients","04798dcb":"def update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n   \n    for i in range(number_of_iterarion):\n \n        cost,gradients = forward_backward(w,b,x_train,y_train)\n        cost_list.append(cost)\n         \n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n   \n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","e5735afe":"def predict(w,b,x_test):\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","1b114c77":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    \n    dimension =  x_train.shape[0]  \n    w,b = initialize(dimension)\n    \n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n     \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n\n   \n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    ","9f39ac46":"logistic_regression(x_train, y_train, x_test, y_test,1,180)","8ec57e54":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\nlr.fit(x_train.T,y_train.T)\naccuracy = lr.score(x_test.T,y_test.T)*100\nprint(\"Test Accuracy {}%\".format(accuracy))","3f574536":"y=dt.blueWins.values\nx_data=dt.drop([\"blueWins\"],axis=1)\nx=(x_data-np.min(x_data)\/np.max(x_data)-np.min(x_data))\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=42)\n\n# knn model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 1) # n_neighbors = k\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\nprint(\" {} nn score: {}% \".format(2,knn.score(x_test,y_test)))\n\n","15e715cd":"\n# find and try k value\nscore_list = []\nfor i in range(1,25):\n    knn2 = KNeighborsClassifier(n_neighbors = i)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\n    \nplt.plot(range(1,25),score_list)\nplt.xlabel(\"k values\")\nplt.ylabel(\"accuracy\")\nplt.show()\n","e4d14b1b":"dt.head()","f803238c":"y=dt.blueWins.values\nx_data=dt.drop([\"blueWins\"],axis=1)\nx=(x_data-np.min(x_data)\/np.max(x_data)-np.min(x_data))\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=42)","e7665d08":"#SVM\nfrom sklearn.svm import SVC\nsvm=SVC(random_state=2)\nsvm.fit(x_train,y_train)\nprint(\"Accuracy of SVM \",svm.score(x_test,y_test))","f626348e":"y=dt.blueWins.values\nx_data=dt.drop([\"blueWins\"],axis=1)\nx=(x_data-np.min(x_data)\/np.max(x_data)-np.min(x_data))\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state=1)","38a60b4a":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train,y_train)\nacc=nb.score(x_test,y_test)*100\nprint(\"Accuracy of naive bayes algo:{:.2f}\".format(acc))","978203fb":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)\n\nprint(\"score: \", dt.score(x_test,y_test))","9c55609b":"\n# Predicted values\ny_head_lr = lr.predict(x_test)\nknn1=KNeighborsClassifier(n_neighbors =1)\nknn1.fit(x_train, y_train)\ny_head_knn=knn1.predict(x_test)\ny_head_svm=svm.predict(x_test)\ny_head_nb = nb.predict(x_test)\ny_head_dt = dt.predict(x_test)\n\n","0fcd7dd0":"from sklearn.metrics import confusion_matrix\ncm_lr = confusion_matrix(y_test,y_head_lr)\ncm_knn = confusion_matrix(y_test,y_head_knn)\ncm_svm = confusion_matrix(y_test,y_head_svm)\ncm_nb = confusion_matrix(y_test,y_head_nb)\ncm_dt = confusion_matrix(y_test,y_head_dt)\n","93578a29":"#Vizualizate\nplt.figure(figsize=(24,12))\n\nplt.suptitle(\"Confusion Matrixes\",fontsize=24)\nplt.subplots_adjust(wspace = 0.4, hspace= 0.4)\n\nplt.subplot(2,3,1)\nplt.title(\"Logistic Regression Confusion Matrix\")\nsns.heatmap(cm_lr,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,2)\nplt.title(\"K Nearest Neighbors Confusion Matrix\")\nsns.heatmap(cm_knn,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,3)\nplt.title(\"Support Vector Machine Confusion Matrix\")\nsns.heatmap(cm_svm,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,4)\nplt.title(\"Naive Bayes Confusion Matrix\")\nsns.heatmap(cm_nb,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,5)\nplt.title(\"Decision Tree Classifier Confusion Matrix\")\nsns.heatmap(cm_dt,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.show()","7d01b3eb":"Gradient Descent\n","9efb78b5":"# KNN Algorithm","a5c25616":"## Normalization\n\n* Normalize etmek Column degerleri aras\u0131ndaki \u00fcst\u00fcnl\u00fcg\u00fc ortadan kald\u0131rma olay\u0131d\u0131r.K\u0131saca Y\u00fcksek degerlerin daha d\u00fc\u015f\u00fck degerleri yok saymamas\u0131 i\u00e7in.\n* \u00d6rnek blueWardsPlaced'daki 75 say\u0131s\u0131n\u0131n blueWardsDestroyed'daki 2 degeri \u00fczerinde \u00fcst\u00fcnl\u00fcg\u00fc \n* Matematiksel ifadesi :\n    * norm:x-min(x)\/max(x)-min(x)","964ec387":"# Introdiction\n<a font color= Blue>\n    \n### This data set has the properties of blue and red teams. I prepared a notebook considering the blue team. I hope it was useful.\n\n### I'm new to machine learning, thank you for your help in advance\n    \n### Instagram:cuneytaykac_\n ","ecb9e8c4":"![](http:\/\/)<font color=\"Orange\">Accuracy of naive bayes algo  <font color=\"Red\">**66.6**<\/font><\/font><br>","4552c348":"gameId dropped ","e6545463":"\u0130lk olarak x ve y degerlerimizi belirleyelim.\n","f1537937":"* random state yazmassak train test split random bir \u015fekilde b\u00f6ler \n* test size 0.1 :datam\u0131n %10 sini test etmek i\u00e7in ay\u0131r.","0f666897":"### What lojistic regression?\n* Logistic Regression ( Lojistik Regresyon ) s\u0131n\u0131fland\u0131rma i\u015flemi yapmaya yarayan bir regresyon y\u00f6ntemidir. Kategorik veya say\u0131sal verilerin s\u0131n\u0131fland\u0131r\u0131lmas\u0131nda kullan\u0131l\u0131r. Ba\u011f\u0131ml\u0131 de\u011fi\u015fkenin yani sonucun sadece 2 farkl\u0131 de\u011fer alabilmesi durumda \u00e7al\u0131\u015f\u0131r. ( Evet \/ Hay\u0131r, Erkek \/Kazand\u0131 ,Kaybetti vs. )\n* \u015eimdiki \u00f6rnegimizde Mavi tak\u0131m\u0131n Kazanma ve kaybetmeleri \u00fczerinde lojistic regression yap\u0131caz. (1 kazanma 0 kaybetme)\n* Gelin ilk olarak sklearn k\u00fct\u00fcphanesine ait Lojistic regression k\u00fct\u00fcphanesini kullanmadan nas\u0131l yazabiliriz inceleyelim.\n\n","fa6019f2":"# Fogward Propagation","066549a5":"Let's say weight = 0.01 and bias = 0.0","d3a3abf0":"# Sigmoid Function \n\n\n\n","e279b8f9":"\n\n![4.png](attachment:4.png)","c616aff5":"# Confusion Matrix","914e573e":"![11.png](attachment:11.png)","58519b54":"![Bayes.png](attachment:Bayes.png)","249790cc":"By the way in formulas;\n\n* h0(x^i)= y_head\n* y^i = y_train\n* x^i = x_train","3e88df9d":"# Naive Bayes Algorithm","780c15c5":"![svm.png](attachment:svm.png)","3bd0a2d7":"### Let's examine what the column means\n\n* BlueWins:The target column. 1 if the blue team has won, 0 otherwise.\n* blueWardsPlaced: Number of warding totems placed by the blue team on the map\n* blueWardsDestroyed: Number of enemy warding totems the blue team has destroyed\n* blueFirstBlood: First kill of the game. 1 if the blue team did the first kill, 0 otherwise\n* blueKills:Number of enemies killed by the blue team\n* blueDeaths:Number of deaths (blue team)\n* blueAssists:Number of kill assists (blue team)\n* blueEliteMonsters: Number of elite monsters killed by the blue team (Dragons and Heralds)\n* blueDragons:Number of dragons killed by the blue team\n","1f0f1d35":"# LOJ\u0130ST\u0130C REGRESS\u0130ON","388fdbf0":"<font color=\"green\"> Test Accuracy is <font color=\"red\">**73.33%**<\/font><\/font><br>","37998722":"\n* We will visualize and classify in the blue team.\n*  (Biz Mavi tak\u0131m \u00fczerinde g\u00f6rselle\u015ftirme ve classification yapacag\u0131m\u0131z i\u00e7in bu bilgiler i\u015fimizi g\u00f6r\u00fcr.)","dcd35488":"Sklearn Lojistic Regression","64829a16":"##### All we have to do is to set our data to cover only the blue team.\n##### datam\u0131z\u0131 sadece mavi tak\u0131m\u0131 kapsayacak \u015fekilde ayarlamak kald\u0131.\u0130\u015flem kolayl\u0131g\u0131 olmas\u0131 i\u00e7in ilk 100 sat\u0131r \u00fczerinden i\u015flem yap\u0131caz","76da2ea0":"# Support Vector Machine (SVM) Algorithm","5caf95ae":"Y degerlerim benim kazanma kaybetme degerlerim\n* X degerlerim ise BlueWins hari\u00e7 geri kalan k\u0131s\u0131m","eb5e9487":"Caner Dabakoglu thank you ","188fdc68":"![cost.png](attachment:cost.png)","9abbd767":"## \u0130mport Library","7b188aab":"# Decision Tree Algorithm","bc4f98ed":"![](http:\/\/)<font color=\"Blue\"> Decision Tree Score   <font color=\"Red\">**0.6**<\/font><\/font><br>","882ec330":"# Vizualizate","aadf8840":"![knn.png](attachment:knn.png)","c3096a7b":"![gradient-descent-back-propagation-and-auto-differentiation-advanced-spark-and-tensorflow-meetup-08042016-62-638.jpg](attachment:gradient-descent-back-propagation-and-auto-differentiation-advanced-spark-and-tensorflow-meetup-08042016-62-638.jpg)","880bb6d5":"<font color=\"red\">Accuracy of SVM <font color=\"green\">**0.63**<\/font><\/font><br>","d8540c0f":"\n![image.png](attachment:image.png)","25992b2f":"Cost Function","6bb419ba":"* \u015eimdiki b\u00f6l\u00fcm ise datam\u0131z\u0131 b\u00f6lme i\u015flemine.Buradaki ama\u00e7 modelimizi egitirken test etmek i\u00e7in bir test datas\u0131na ihtiya\u00e7 duyuyoruz onu belirlemek.\n* Datay\u0131 istediginiz \u015fekilde test ve train split olarak b\u00f6lebilirsiniz.","89304f6a":"[](http:\/\/)<font color=\"blue\"> 2 nn score <font color=\"green\">**0.75%**<\/font><\/font><br>\n<br>\n","24f3e77f":"# \u0130nitalize\n\n* Buradaki olay \u015eu \u015fekilde ger\u00e7ekle\u015fiyor.Elimizdeki w degerleri x_trainlerler \u00e7arp\u0131l\u0131r ve bias degerleriyle toplan\u0131r. \n\n * Form\u00fcl\u00fc:Z = (w.t)x + b => z equals to (transpose of weights times input x) + bias\n "}}