{"cell_type":{"bb13ba55":"code","193876e0":"code","47e3374c":"code","85f3898f":"code","4bc598ce":"code","d017d07f":"code","56d90443":"code","49d2db09":"code","41e7e423":"code","2f6f6678":"code","32b0e965":"code","d1002a58":"code","03fbc4d1":"code","c4556165":"code","3af94cc4":"code","f162e2c9":"code","9b754668":"code","885d83fa":"code","a41e24f3":"code","44da05f9":"code","5517c26a":"code","05ff9712":"code","e9d040e2":"code","4ee1c384":"markdown","fd21baa2":"markdown","a6f311cf":"markdown","5eff026a":"markdown","87b8ef8d":"markdown","76626c41":"markdown","b9414bab":"markdown","8ce7ffab":"markdown","a154d711":"markdown","887d3219":"markdown","039456cf":"markdown","c57c58e0":"markdown","ebedcecd":"markdown","76979406":"markdown","203260b9":"markdown","7a2dcaa4":"markdown","6305f99b":"markdown","ddeb74db":"markdown"},"source":{"bb13ba55":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport re\n\nsns.set(color_codes=True, style='darkgrid')\n%matplotlib inline","193876e0":"games = pd.read_csv('..\/input\/games.csv')\ngames.head(2)","47e3374c":"games = games[games.rated]  # only rated games\ngames['mean_rating'] = (games.white_rating + games.black_rating) \/ 2\ngames['rating_diff'] = abs(games.white_rating - games.black_rating)","85f3898f":"plt.figure(figsize=(10,5))\nsns.distplot(games['mean_rating'])","4bc598ce":"plt.figure(figsize=(10,5))\nsns.distplot(games.turns)","d017d07f":"games.victory_status.value_counts()","56d90443":"under_1500 = games[games.mean_rating < 1500]\nunder_2000 = games[games.mean_rating < 2000]\nover_2000 = games[games.mean_rating > 2000]\n\nbrackets = [under_1500, under_2000, over_2000]\nbracket_titles = ['Under 1500', 'Under 2000', 'Over 2000']","49d2db09":"plt.figure(figsize=(15,11))\nfor i, bracket in enumerate(brackets):\n    victory_status = bracket.victory_status.value_counts()\n    plt.subplot(1, 4, i+1)\n    plt.title(bracket_titles[i])\n    plt.pie(victory_status, labels=victory_status.index)","41e7e423":"mate_games = games[games.victory_status=='mate']\n\nunder_1500 = mate_games[mate_games.mean_rating < 1500]\nunder_2000 = mate_games[mate_games.mean_rating < 2000]\nover_2000 = mate_games[mate_games.mean_rating > 2000]\n\nm_brackets = [under_1500, under_2000, over_2000]","2f6f6678":"turn_means = [b.turns.mean() for b in m_brackets]\n\nplt.figure(figsize=(10,5))\nplt.ylim(0, 100)\nplt.title('Number of turns until mate')\nplt.plot(bracket_titles, turn_means, 'o-', color='r')","32b0e965":"plt.figure(figsize=(10,5))\nplt.scatter(mate_games.mean_rating, mate_games.turns)","d1002a58":"mate_games.loc[mate_games['turns'].idxmax()]","03fbc4d1":"scholar_mates = mate_games[mate_games.turns==4]\nscholar_mates\n","c4556165":"white_upsets = games[(games.winner == 'white') & (games.white_rating < games.black_rating)]\nblack_upsets = games[(games.winner == 'black') & (games.black_rating < games.white_rating)]\nupsets = pd.concat([white_upsets, black_upsets])","3af94cc4":"THRESHOLD = 900\nSTEP = 50\n\nu_percentages = []\n\nprint(f'Rating difference : Percentage of wins by weaker player')\nfor i in range(0+STEP, THRESHOLD, STEP):\n    th_upsets = upsets[upsets.rating_diff > i]\n    th_games = games[games.rating_diff > i]\n    upsets_percentage = (th_upsets.shape[0] \/ th_games.shape[0]) * 100\n    u_percentages.append([i, upsets_percentage])\n    print(f'{str(i).ljust(18)}:  {upsets_percentage:.2f}%')","f162e2c9":"plt.figure(figsize=(10,5))\nplt.plot(*zip(*u_percentages))\nplt.xlabel('rating difference')\nplt.ylabel('upsets percentage')","9b754668":"p = re.compile('([a-h][1-8])')\nsquares = {}\nfor moves in games.moves:\n    for move in moves.split():\n        try:\n            square = re.search(p, move).group()\n        except AttributeError:  # castling\n            square = move.replace('+', '')\n        squares[square] = squares.get(square, 0) + 1","885d83fa":"squares_df = pd.DataFrame.from_dict(squares, orient='index', columns=['count'])\n\n# add castling\n\ntotal_shorts = int(squares_df.loc['O-O'])\ntotal_longs = int(squares_df.loc['O-O-O'])\n\nhalf_shorts = total_shorts\/\/2\nhalf_longs = total_longs\/\/2\n\n# white short castling\nsquares_df.loc['f1'] = squares_df.loc['f1'] + half_shorts\nsquares_df.loc['g1'] = squares_df.loc['g1'] + half_shorts\n# black short castling\nsquares_df.loc['f8'] = squares_df.loc['f8'] + half_shorts\nsquares_df.loc['g8'] = squares_df.loc['g8'] + half_shorts \n# white long castling\nsquares_df.loc['c1'] = squares_df.loc['c1'] + half_longs\nsquares_df.loc['d1'] = squares_df.loc['d1'] + half_longs\n# black long castling\nsquares_df.loc['c8'] = squares_df.loc['c8'] + half_longs\nsquares_df.loc['d8'] = squares_df.loc['d8'] + half_longs\n\nsquares_df.drop(['O-O', 'O-O-O'], inplace=True)","a41e24f3":"total_castles = total_shorts + total_longs\nprint(f'Short: {(total_shorts\/total_castles)*100:.2f}%')\nprint(f'Long: {(total_longs\/total_castles)*100:.2f}%')","44da05f9":"plt.figure(figsize=(10,5))\nplt.pie([total_shorts, total_longs],\n       labels=['Short', 'Long'])","5517c26a":"squares_df.reset_index(inplace=True)\nsquares_df['letter'] = squares_df['index'].str[0]\nsquares_df['number'] = squares_df['index'].str[1]","05ff9712":"squares_df = squares_df.pivot('number', 'letter', 'count')\nsquares_df.sort_index(level=0, ascending=False, inplace=True)  # to get right chessboard orientation\nsquares_df","e9d040e2":"sns.set(rc={'figure.figsize':(20,15)})\nhm = sns.heatmap(squares_df,\n            cmap='Oranges',\n            annot=False, \n            vmin=0,\n            fmt='d',\n            linewidths=2,\n            linecolor='black',\n            cbar_kws={'label':'occupation'},\n            )\nhm.set(xlabel='', ylabel='')\n","4ee1c384":"# Chess games analysis","fd21baa2":"**Chances of the weaker player winning against higher rated player are, naturally, decreasing as the rating difference increases.\nHowever, approximately every fourth game where the ranking difference is more than 100 points results in a win of lower-ranked player - I expected this number to be a little less.**","a6f311cf":"# Squares occupation","5eff026a":"**Most of the games ended by resignation (more than 50%). \nAs we can see, players resign often in higher rated games. I suppose these players are certain if the have disadvantage their opponent is not going to have trouble mating them - they don't waste their time playing lost games.**\n\n**In games over 2000 there are also a little more draws - players make less mistakes.**","87b8ef8d":"**Even though there doesn't appear to be strong correlation between players' rating and number of turns to mate, in higher rated games the number is slightly higher.**","76626c41":"**and took around 50 turns.**","b9414bab":"### Interlude: Which castling is more common?","8ce7ffab":"**The longest game resulting in mate (222 moves) were played by players with ratings 1617 and 1614.**","a154d711":"**Most games were played between ~1500 rated players**\n","887d3219":"**As I tried to see if there were any [Scholar's Mates](https:\/\/en.wikipedia.org\/wiki\/Scholar%27s_mate) (mate in 4 moves). However, I only found one player boosting his rating beating his other accounts.**\n\n**Checking his  [profile on lichesss](https:\/\/lichess.org\/@\/SMARTduckduckcow) we can see he's banned now.**","039456cf":"# Number of turns to mate","c57c58e0":"# Basic observations","ebedcecd":"# Scholar mates","76979406":"# Loading and cleaning the data","203260b9":"# About the data\nThe dataset contains most recent (at the time of creating) ~20k games rated\/non-rated from [lichess.org](http:\/\/lichess.org).\n\nI'm analysing only the rated games, of which there are 16,155.","7a2dcaa4":"## Table of contents\n* [About the data](#About-the-data)\n* [Loading and cleaning the data](#Loading-and-cleaning-the-data)\n* [Basic observations](#Basic-observations)\n* [Types of victory](#Types-of-victory)\n* [Number of turns to mate](#Number-of-turns-to-mate)\n* [Scholar mates](#Scholar-mates)\n* [Wins by lower rated players](#Wins-by-lower-rated-players)\n* [Squares occupation](#Squares-occupation)","6305f99b":"# Types of victory","ddeb74db":"# Wins by lower rated players"}}