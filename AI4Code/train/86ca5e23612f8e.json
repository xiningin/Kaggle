{"cell_type":{"70a5c2f3":"code","90094812":"code","853584e2":"code","a2ff601e":"code","9c12bc0c":"code","44931c90":"code","92056d46":"code","4af4c874":"code","58b88d02":"code","6e9ccde8":"code","a634bfa4":"code","387302c9":"code","085276c7":"code","7ff79a53":"code","428958b2":"code","2f55feed":"code","9e184ec9":"code","f6208713":"code","cf3b5b41":"code","06db22a7":"code","85735b6c":"code","6f57dd49":"code","ff77dc20":"code","5744fdbf":"code","05da2a78":"code","ccb4ded2":"code","2da5cc4c":"code","d90ab885":"code","524121bf":"code","3187b0c1":"code","f7206be2":"code","01e3340e":"markdown","58aa6377":"markdown","c2702782":"markdown","51aa8533":"markdown","da38d2c3":"markdown","83aee72b":"markdown","13509749":"markdown","60349c96":"markdown","1d73edc7":"markdown","a9678859":"markdown","a11d4a65":"markdown","7a4f36f1":"markdown","5828f226":"markdown","3dd2676e":"markdown","b70feafa":"markdown","85456846":"markdown","ab1b65d7":"markdown","17f7415e":"markdown","e09f6cf0":"markdown","87347bfb":"markdown","8b10b608":"markdown"},"source":{"70a5c2f3":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom PIL import  Image\nimport pandas as pd\n%matplotlib inline\n\n\nplt.figure(figsize=(15,10))\nimg = np.array(Image.open(r\"..\/input\/mom2018\/mom.jpg\"))\nplt.imshow(img,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","90094812":"#importing libraries\nimport pandas as pd\nimport seaborn as sns\nimport itertools\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom wordcloud import WordCloud,STOPWORDS\nimport io\nimport base64\nfrom matplotlib import rc,animation\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom mpl_toolkits.basemap import Basemap\nimport folium\nimport folium.plugins\nimport os\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n#import seaborn as sns\n%matplotlib inline\nimport seaborn as sns # for making plots with seaborn\ncolor = sns.color_palette()\nimport random\nimport cufflinks as cf \ncf.set_config_file(offline=True, world_readable=True, theme='ggplot')\n#print(os.listdir(\"..\/input\"))\nfrom matplotlib_venn import venn2\nimport plotly.plotly as py\n\n","853584e2":"import random\nnumber_of_colors = 1000\ncolor = [\"#\"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])\n             for i in range(number_of_colors)]\ncolor_theme = dict(color = color)\n\n#---------------------Bar Plot----------------------------------------#\ndef plot_insight(x,y,header=\"\",xaxis=\"\",yaxis=\"\"):\n    trace = go.Bar(y=y,x=x,marker=color_theme)\n    layout = go.Layout(title = header,xaxis=dict(title=xaxis,tickfont=dict(size=13,)),\n                       yaxis=dict(title=yaxis,titlefont=dict(size=16),tickfont=dict(size=14)))\n    data = [trace]\n    fig = go.Figure(data=data, layout=layout)\n    return iplot(fig,filename='basic-bar1')\n\n#---------------------Donutplot----------------------------------------#\ndef donut_graph(label1, value1, label2, value2,title = \"\",text1=\"\",text2=\"\"):\n    fig = {\n        \"data\": [{\n                  \"values\": value1,\n                  \"labels\": label1,\n                  \"domain\": {'x': [0.0, 0.35], 'y': [2.22, 2.53]},\n                  \"name\": text1,\n                  \"hoverinfo\":\"label+percent+name\",\n                  \"hole\": .45,  \n                  \"type\": \"pie\",\n                },     \n                {\n                  \"values\": value2,\n                  \"labels\": label2,\n                  \"text\":text2,\n                  \"textposition\":\"inside\",\n                  \"domain\":{'x': [0.50, 0.85], 'y': [2.22, 2.53]},\n                  \"name\": text2,\n                  \"hoverinfo\":\"label+percent+name\",\n                  \"hole\": .45,  \n                  \"type\": \"pie\",\n                  \"textinfo\": value2\n                }],\n        \"layout\": {\n                    \"title\":title,\n                    \"annotations\": [\n                        {\n                            \"font\": {\n                                \"size\": 12,\n                            },\n                            \"showarrow\": False,\n                            \"text\": text1,\n                            \"x\": 0.12,\n                            \"y\": 0.5\n                        },\n                        {\n                            \"font\": {\n                                \"size\": 12,\n                            },\n                            \"showarrow\": False,\n                            \"text\": text2,\n                            \"x\": 0.73,\n                            \"y\": 0.5\n                            }]\n                }\n            }\n    return iplot(fig, filename='donut')\n#---------------------Word Cloud Plot----------------------------------------#\ndef word_cloud_graph(df):\n    # data prepararion\n    plt.subplots(figsize=(20,12))\n    wordcloud = WordCloud(background_color='white',width=512,height=384,).generate(\" \".join(df))\n    plt.imshow(wordcloud)\n    plt.axis('off')\n    plt.savefig('graph.png')\n    return plt.show()\n#-------------------Ven Diagram--------------------------------#\ndef venn(team1,team2):\n    plt.figure(figsize=(20,10))\n    venn2([set(fifa[fifa[\"Team\"] == team1][\"Opponent\"]), set(fifa[fifa[\"Team\"] == team2][\"Opponent\"])], set_labels = ('Croatia', 'Belgium'))\n    return plt.show()\n\n# fifa[fifa[\"Team\"] == \"Croatia\"][\"Opponent\"],fifa[fifa[\"Team\"] == \"Belgium\"][\"Opponent\"]","a2ff601e":"fifa = pd.read_csv(\"..\/input\/fifa-2018-match-statistics\/FIFA 2018 Statistics.csv\")\nfifa.head()","9c12bc0c":"goals = fifa.groupby('Team')['Goal Scored'].sum().reset_index().sort_values(by=('Goal Scored'),ascending=False)\nplot_insight(x=goals[\"Team\"],y=goals[\"Goal Scored\"],header=\"Total Goal Done by team\", xaxis=\"Teams\",yaxis=\"Total Goals\")","44931c90":"label1=goals[\"Team\"]\nvalue1=(goals[\"Goal Scored\"]\/goals[\"Goal Scored\"].sum())*100\nlabel2 = goals[\"Team\"]\nvalue2=(goals[\"Goal Scored\"]\/goals[\"Goal Scored\"].sum())\ndonut_graph(label1, value1, label2, value2,title =\"Total Goals By Teams\",text1=\"Goal Percent\",text2=\"Goal Count\")","92056d46":"word_cloud_graph(goals[\"Team\"])","4af4c874":"attempt = fifa.groupby('Team')['Attempts'].sum().reset_index().sort_values(by=('Attempts'),ascending=False)\nplot_insight(x=attempt[\"Team\"],y=attempt[\"Attempts\"],header=\"Total Goal Attempts Done by team\", xaxis=\"Teams\",yaxis=\"Total attempt\")","58b88d02":"label1=attempt[\"Team\"]\nvalue1=(attempt[\"Attempts\"]\/attempt[\"Attempts\"].sum())*100\nlabel2 = attempt[\"Team\"]\nvalue2= attempt[\"Attempts\"].value_counts()\ndonut_graph(label1, value1, label2, value2,title =\"Total Goals Attempt By Teams\",text1=\"Attempts Percent\",text2=\"Attempt Count\")","6e9ccde8":"word_cloud_graph(attempt[\"Team\"])","a634bfa4":"ball_possession=fifa.groupby('Team')['Ball Possession %'].sum().reset_index().sort_values(by=('Ball Possession %'),ascending=False)\nplot_insight(x=ball_possession[\"Team\"],y=ball_possession[\"Ball Possession %\"],header=\"Total Ball Possession % Done by team\", xaxis=\"Teams\",yaxis=\"Total ball_possession\")","387302c9":"label1=ball_possession[\"Team\"]\nvalue1=(ball_possession[\"Ball Possession %\"]\/ball_possession[\"Ball Possession %\"].sum())*100\nlabel2 = ball_possession[\"Team\"]\nvalue2=(ball_possession[\"Ball Possession %\"].values)\ndonut_graph(label1, value1, label2, value2,title =\"Total Goals Attempt By Teams\",text1=\"Ball Positions Percent\",text2=\"Ball Positions Count\")","085276c7":"word_cloud_graph(ball_possession[\"Team\"])","7ff79a53":"# Plotting total Man of the Match awards for teams\n\n# Encoding the values for the column man of the Match\nmom_1={'Man of the Match':{'Yes':1,'No':0}}\nfifa.replace(mom_1,inplace=True)\n\n# Converting column datatype to int\nfifa['Man of the Match']=fifa['Man of the Match'].astype(int)\n\nmom=fifa.groupby('Team')['Man of the Match'].sum().reset_index().sort_values(by=('Man of the Match'),ascending=False)\nplot_insight(x=mom[\"Team\"],y=mom[\"Man of the Match\"],header=\"Total Man of the Match by team\", xaxis=\"Teams\",yaxis=\"Total Man of the Match\")","428958b2":"label1=mom[\"Team\"]\nvalue1=(mom[\"Man of the Match\"]\/mom[\"Man of the Match\"].sum())*100\nlabel2 = mom[\"Team\"]\nvalue2=(mom[\"Man of the Match\"]\/mom[\"Man of the Match\"].sum())\ndonut_graph(label1, value1, label2, value2,title =\"Total Man of The Match By Teams\",text1=\"MOM Percent\",text2=\"MOM Count\")","2f55feed":"Blocked = fifa.groupby('Team')['Blocked'].sum().reset_index().sort_values(by=('Blocked'),ascending=False)\nplot_insight(x=Blocked[\"Team\"],y=Blocked[\"Blocked\"],header=\"Total Blocked by team\", xaxis=\"Teams\",yaxis=\"Total Blocked\")","9e184ec9":"word_cloud_graph(Blocked[\"Team\"])","f6208713":"for i in fifa[\"Team\"].unique():\n    df = fifa[fifa[\"Team\"] == i][[\"Opponent\",\"Goal Scored\"]]\n    plot_insight(x=df[\"Opponent\"],y=df[\"Goal Scored\"],header= i +\" Goals Against Opponent\", xaxis=\"Teams\",yaxis=\"Goals\")","cf3b5b41":"group_attempt = fifa.groupby('Team')['On-Target','Off-Target','Blocked'].sum().reset_index()\ngroup_attempt_sorted = group_attempt.melt('Team', var_name='Target', value_name='Value')","06db22a7":"# Plotting the new dataset created above\nplt.figure(figsize = (20, 8), facecolor = \"White\")\n\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Team\", y=\"Value\", hue=\"Target\", data=group_attempt_sorted, color = color[100])\n\nplot1.set_xticklabels(group_attempt_sorted['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Total Attempts')\nplot1.set_title('Total On-Target, Off-Target and Blocked attempts by teams')","85735b6c":"for i in group_attempt_sorted[\"Team\"].unique():\n    df = group_attempt_sorted[group_attempt_sorted[\"Team\"] == i]\n    plot_insight(x=df[\"Target\"],y=df[\"Value\"],header= i +\" On-Target, Off-Target, Bloaked Attempts\", xaxis=\"Teams\",yaxis=\"Goals\")","6f57dd49":"saves=fifa.groupby('Team')['Saves'].sum().reset_index().sort_values(by=('Saves'),ascending=False)\nplot_insight(x=saves[\"Team\"],y=saves[\"Saves\"],header=\"Total Saves Goals by team\", xaxis=\"Teams\",yaxis=\"Save goal\")","ff77dc20":"label1=saves[\"Team\"]\nvalue1=(saves[\"Saves\"]\/saves[\"Saves\"].sum())*100\nlabel2 = saves[\"Team\"]\nvalue2=(saves[\"Saves\"].values)\ndonut_graph(label1, value1, label2, value2,title =\"Total Goals Saved By Teams\",text1=\"Save Percent\",text2=\"Save Count\")","5744fdbf":"word_cloud_graph(saves[\"Team\"])","05da2a78":"own_goal=fifa.groupby('Opponent')['Own goals'].sum().reset_index().sort_values(by=('Own goals'),ascending=False)\nown_goal=own_goal[own_goal['Own goals']!=0]\nplot_insight(x=own_goal[\"Opponent\"],y=own_goal[\"Own goals\"],header=\"Teams who did Own goals against themselves\", xaxis=\"Opponents\",yaxis=\"own_goal\")\n\nlabel1=own_goal[\"Opponent\"]\nvalue1=(own_goal[\"Own goals\"]\/own_goal[\"Own goals\"].sum())*100\nlabel2 = own_goal[\"Opponent\"]\nvalue2=(own_goal[\"Own goals\"].values)\ndonut_graph(label1, value1, label2, value2,title =\"Teams who did Own goals against themselves\",text1=\"Save Percent\",text2=\"Save Count\")\n\nword_cloud_graph(own_goal[\"Opponent\"])","ccb4ded2":"# Plot of total corners, free kicks and offsides for teams\n\ncorners_offsides_freekicks = fifa.groupby('Team')['Corners','Offsides','Free Kicks'].sum().reset_index()\ncorners_offsides_freekicks\n\n# Changing the dataframe for plotting\ncorners_offsides_freekicks_sort = corners_offsides_freekicks.melt('Team', var_name='Target', value_name='Value')\n\n# Plotting the new dataset created above\nplt.figure(figsize = (20, 8), facecolor = None)\n\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Team\", y=\"Value\", hue=\"Target\", data=corners_offsides_freekicks_sort, color = color[905])\n\nplot1.set_xticklabels(corners_offsides_freekicks_sort['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Totals')\nplot1.set_title('Total Corners, free kicks and offsides for teams')","2da5cc4c":"passes=fifa.groupby('Team')['Passes'].sum().reset_index().sort_values(by=('Passes'),ascending=False)\nplot_insight(x=passes[\"Team\"],y=passes[\"Passes\"],header=\"Total passes By Team\", xaxis=\"Teams\",yaxis=\"passes\")\n\nlabel1=passes[\"Team\"]\nvalue1=(passes[\"Passes\"]\/passes[\"Passes\"].sum())*100\nlabel2 = passes[\"Team\"]\nvalue2=(passes[\"Passes\"].values)\ndonut_graph(label1, value1, label2, value2,title =\"Total passes By Team\",text1=\"Passes Percent\",text2=\"Passes Count\")\n\nword_cloud_graph(passes[\"Team\"])","d90ab885":"yellow_cards = fifa.groupby('Team')['Yellow Card'].sum().reset_index().sort_values(by=('Yellow Card'), ascending=False)\nred_cards = fifa.groupby('Team')['Red'].sum().reset_index().sort_values(by=('Red'), ascending=False)","524121bf":"plot_insight(x=yellow_cards[\"Team\"],y=yellow_cards[\"Yellow Card\"],header=\"Total Yellow Card By Team\", xaxis=\"Teams\",yaxis=\"Yellow Card\")\nplot_insight(x=red_cards[\"Team\"],y=red_cards[\"Red\"],header=\"Total Red Card By Team\", xaxis=\"Teams\",yaxis=\"Red Card\")\n\nlabel1=yellow_cards[\"Team\"]\nvalue1=(yellow_cards[\"Yellow Card\"]\/yellow_cards[\"Yellow Card\"].sum())*100\nlabel2 = yellow_cards[\"Team\"]\nvalue2=(yellow_cards[\"Yellow Card\"].values)\ndonut_graph(label1, value1, label2, value2,title =\"Total Yellow Card By Team\",text1=\"Yellow Card Percent\",text2=\"Yellow Card Count\")\n\nlabel1=red_cards[\"Team\"]\nvalue1=(red_cards[\"Red\"]\/red_cards[\"Red\"].sum())*100\nlabel2 = red_cards[\"Team\"]\nvalue2=(red_cards[\"Red\"].values)\ndonut_graph(label1, value1, label2, value2,title =\"Total Red Card By Team\",text1=\"Red Card Percent\",text2=\"Red Card Count\")\n\nword_cloud_graph(yellow_cards[\"Team\"])\nword_cloud_graph(red_cards[\"Team\"])","3187b0c1":"# Lables for the Radar plot\n\nlabels=np.array(['Goal Scored', 'Attempts', 'Corners', 'Offsides', 'Free Kicks', 'Saves', 'Fouls Committed', 'Yellow Card'])\n\n# Radar data for the Finals, \"France vs Croatia\"\n\ndata1=fifa.loc[126,labels].values\ndata2=fifa.loc[127,labels].values\n\n# Radar data for Semi-Final 1 - \"France vs Belgium\"\ndata3=fifa.loc[120,labels].values\ndata4=fifa.loc[121,labels].values\n\n# Radar data for Semi-Final 2 - \"Croatia vs England\"\n\ndata5=fifa.loc[122,labels].values\ndata6=fifa.loc[123,labels].values\n\n# Radar data for 3nd runnerups\n\ndata7 = fifa.loc[125,labels].values\ndata8 = fifa.loc[124,labels].values","f7206be2":"# Create a radar plot for Semi-Final 2 using plotly\nimport plotly\nplotly.offline.init_notebook_mode(connected=True)\n\ndef radar_chart(data1,data2,name = \"\", name1 = \"\"):\n    data = [go.Scatterpolar(r = data1,theta = labels,mode = 'lines',fill = 'toself',name = name),\n        go.Scatterpolar(r = data2,theta = labels,mode = 'lines',fill = 'toself',name = name1)]\n    layout = go.Layout(title = name +\" vs \"+name1,polar = dict(radialaxis = dict(visible = True,range = [0, 20])),showlegend = True)\n    fig = go.Figure(data=data, layout=layout)\n    return plotly.offline.iplot(fig)\n\nradar_chart(data3,data4,name = \"Final Match: France\", name1 =\"Belgium\")\nradar_chart(data1,data2,name=\"Semifinal Match: France\", name1=\"Croatia\")\nradar_chart(data5,data6,name=\"Semifinal Match: Croatia\", name1=\"England\")\nradar_chart(data7,data8,name=\"1st Runner up Match: England\", name1=\"Belgium\")","01e3340e":"# 10. Corners, Offsides, Free Kicks by Teams","58aa6377":"### Ball Positions Insight\n- **Highest Ball Positions** had taken By **Croatia(386 Times)**\n- **Lowest Ball Positions** Done By **Iran(98 Times)**","c2702782":"# 4. Man of Match by Team","51aa8533":"# 8.Total Goal Save by Teams\n\n- Here visualize all team goal **statistics against opponent**","da38d2c3":"# 7. Total On-target and Off-target and blocked attempts by teams","83aee72b":"# 5.Blocks By Team","13509749":"# 6.All Team Goals Against Opponent\n\n- Here visualize all team goal **statistics against opponent**","60349c96":"## Yellow Card & Red Card\n- **2 Teams Switzerland and Columbia** who received **Red cards**\n- **31 Teams** Who received **Yellow Cards**\n- **Max Yellow Card --> Croatia**\n- **Min Yellow Card --> Germany**","1d73edc7":"### Blocked Insight\n- **Highest Blocked** Team is **Brazil(30 Times)**\n- **Lowest Blocked** Team is **Iran (2 Times)**","a9678859":"### Target Insights\n- **Croatia** has** Highest Target Value**","a11d4a65":"### Attempts Insights\n- There are 32 Teams who attempt most goals\n- **Highest Attempts** Done By **Croatia**\n- **Lowest Attempts** Done By **Iran****","7a4f36f1":"## 1. Total Goal Done by Team","5828f226":"## 9. Teams who did Own goals against themselves","3dd2676e":"### Man of the Match Insight\n- **Highest Man of the Match** had taken By **France(6 Times)**\n- **Lowest Man of the Match** had taken By **Mexico(1 Times)**","b70feafa":"## 12. Total Yellow and Red Card Given To the teams","85456846":"### Goals Insights\n- You can see that only **32 Teams who succeed to do a goal**\n- **Highest goa**l hitted by **Belgium**\n- **Lowest goal** hitted by **Egypt**","ab1b65d7":"### Passes by Teams\n- **Croatia** had done highest passes **3906**.\n- **Iran** had done lowest passes **639**.","17f7415e":"# 2.Total Goal Attempts by Team","e09f6cf0":"# 3. Ball Position by Team","87347bfb":"## 11. Total Passes By Teams","8b10b608":"### Own Goal Insights\n- **Highest** Own Goal by **Croatia**\n-  **Lowest** Own Goal by **Russia**\n- There are only 11 teams earn own goals"}}