{"cell_type":{"e5548405":"code","58b1c87c":"code","cc8622e9":"code","7624d766":"code","754f7b53":"code","08fce5a8":"code","df2888f5":"code","1966e955":"code","a47f2f12":"code","03da6f6d":"code","5ebabb72":"code","3b5763c1":"code","299347ba":"code","6a8e2ef0":"code","d970edb2":"code","f7ab931b":"code","ff866651":"code","e74ce8a1":"code","d64bf34b":"code","5c11cffb":"code","482c508b":"code","721b0d19":"code","1d6743a7":"code","ebe30f6f":"code","2fb009e6":"code","e72c0852":"code","a562dc49":"code","8df4d220":"code","c9422d5b":"code","12df27f8":"code","09701024":"code","35830135":"code","0104a716":"code","8212b19d":"code","195455db":"markdown","2edb9712":"markdown","1553cdd1":"markdown","84d8d7c2":"markdown","0e460b6c":"markdown","7a310aaf":"markdown","91a306bc":"markdown","8821ee83":"markdown","2f20c97f":"markdown","d57705fb":"markdown","85b6236e":"markdown","a4b067d0":"markdown","089cf503":"markdown","c268ed0c":"markdown","51f9479a":"markdown","6e6adb04":"markdown","6dfdbab4":"markdown","daaa0924":"markdown","47163619":"markdown","849fa261":"markdown","46daeb9e":"markdown","d14eb9d8":"markdown","44d494b8":"markdown","9d31d536":"markdown","32ef2c32":"markdown","cb22108b":"markdown"},"source":{"e5548405":"''' This project is to predict whether a patient is prone to heart failure.'''","58b1c87c":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom colorama import Fore, Back, Style \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom plotly.offline import plot, iplot, init_notebook_mode\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nfrom statsmodels.formula.api import ols\nimport plotly.graph_objs as gobj\nimport plotly.figure_factory as ff\nimport xgboost\nimport lightgbm\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom catboost import CatBoostClassifier\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n \nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ninit_notebook_mode(connected=True)\n\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cc8622e9":"df = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","7624d766":"### Run this to Profile data\n\nimport pandas_profiling as pp\n\n\nprofile = pp.ProfileReport(    df, title=\"Heart Failure Profile\", html={\"style\": {\"full_width\": True}}, sort=None)\nprofile","754f7b53":"# age distribution\n\nhist_data =[df[\"age\"].values]\ngroup_labels = ['age'] \n\nfig = ff.create_distplot(hist_data, group_labels)\nfig.update_layout(title_text='Age Distribution plot')\nfig.show()","08fce5a8":"fig = px.box(df, x='sex', y='age', points=\"all\")\nfig.update_layout(\n    title_text=\"Gender wise Age Spread - Male = 1 Female =0\")\nfig.show()","df2888f5":"male = df[df[\"sex\"]==1]\nfemale = df[df[\"sex\"]==0]\n\nmale_survi = male[df[\"DEATH_EVENT\"]==0]\nmale_not = male[df[\"DEATH_EVENT\"]==1]\nfemale_survi = female[df[\"DEATH_EVENT\"]==0]\nfemale_not = female[df[\"DEATH_EVENT\"]==1]\n\nlabels = ['Male - Survived','Male - Not Survived', \"Female -  Survived\", \"Female - Not Survived\"]\nvalues = [len(male[df[\"DEATH_EVENT\"]==0]),len(male[df[\"DEATH_EVENT\"]==1]),\n         len(female[df[\"DEATH_EVENT\"]==0]),len(female[df[\"DEATH_EVENT\"]==1])]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.update_layout(\n    title_text=\"Analysis on Survival - Gender\")\nfig.show()","1966e955":"surv = df[df[\"DEATH_EVENT\"]==0][\"age\"]\nnot_surv = df[df[\"DEATH_EVENT\"]==1][\"age\"]\nhist_data = [surv,not_surv]\ngroup_labels = ['Survived', 'Not Survived']\nfig = ff.create_distplot(hist_data, group_labels, bin_size=0.5)\nfig.update_layout(\n    title_text=\"Analysis in Age on Survival Status\")\nfig.show()","a47f2f12":"fig = px.violin(df, y=\"age\", x=\"sex\", color=\"DEATH_EVENT\", box=True, points=\"all\", hover_data=df.columns)\nfig.update_layout(title_text=\"Analysis in Age and Gender on Survival Status\")\nfig.show()","03da6f6d":"fig = px.violin(df, y=\"age\", x=\"smoking\", color=\"DEATH_EVENT\", box=True, points=\"all\", hover_data=df.columns)\nfig.update_layout(title_text=\"Analysis in Age and Smoking on Survival Status\")\nfig.show()","5ebabb72":"fig = px.violin(df, y=\"age\", x=\"diabetes\", color=\"DEATH_EVENT\", box=True, points=\"all\", hover_data=df.columns)\nfig.update_layout(title_text=\"Analysis in Age and Diabetes on Survival Status\")\nfig.show()","3b5763c1":"fig = px.histogram(df, x=\"creatinine_phosphokinase\", color=\"DEATH_EVENT\", marginal=\"violin\", hover_data=df.columns)\nfig.show()","299347ba":"fig = px.histogram(df, x=\"ejection_fraction\", color=\"DEATH_EVENT\", marginal=\"violin\", hover_data=df.columns)\nfig.show()","6a8e2ef0":"fig = px.histogram(df, x=\"platelets\", color=\"DEATH_EVENT\", marginal=\"violin\", hover_data=df.columns)\nfig.show()","d970edb2":"fig = px.histogram(df, x=\"serum_creatinine\", color=\"DEATH_EVENT\", marginal=\"violin\", hover_data=df.columns)\nfig.show()","f7ab931b":"fig = px.histogram(df, x=\"serum_sodium\", color=\"DEATH_EVENT\", marginal=\"violin\",hover_data=df.columns)\nfig.show()","ff866651":"surv = df[df['DEATH_EVENT']==0]['serum_sodium']\nnot_surv = df[df['DEATH_EVENT']==1]['serum_sodium']\nhist_data = [surv,not_surv]\ngroup_labels = ['Survived', 'Not Survived']\nfig = ff.create_distplot(hist_data, group_labels, bin_size=0.5)\nfig.update_layout(\n    title_text=\"Analysis in Serum Sodium on Survival Status\")\nfig.show()","e74ce8a1":"surv = df[df['DEATH_EVENT']==0]['serum_creatinine']\nnot_surv = df[df['DEATH_EVENT']==1]['serum_creatinine']\nhist_data = [surv,not_surv]\ngroup_labels = ['Survived', 'Not Survived']\nfig = ff.create_distplot(hist_data, group_labels, bin_size=0.5)\nfig.update_layout(\n    title_text=\"Analysis in Serum Creatinine on Survival Status\")\nfig.show()","d64bf34b":"surv = df[df['DEATH_EVENT']==0]['ejection_fraction']\nnot_surv = df[df['DEATH_EVENT']==1]['ejection_fraction']\nhist_data = [surv,not_surv]\ngroup_labels = ['Survived', 'Not Survived']\nfig = ff.create_distplot(hist_data, group_labels, bin_size=0.5)\nfig.update_layout(\n    title_text=\"Analysis in Ejaction Fraction on Survival Status\")\nfig.show()","5c11cffb":"labels = ['No Diabetes','Diabetes']\ndiabetes_yes = df[df['diabetes']==1]\ndiabetes_no = df[df['diabetes']==0]\nvalues = [len(diabetes_no), len(diabetes_yes)]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.update_layout(\n    title_text=\"Analysis on Diabetes\")\nfig.show()","482c508b":"fig = px.pie(df, values='diabetes',names='DEATH_EVENT', title='Diabetes Death Event Ratio')\nfig.show()","721b0d19":"diabetes_yes_survi = diabetes_yes[df[\"DEATH_EVENT\"]==0]\ndiabetes_yes_not_survi = diabetes_yes[df[\"DEATH_EVENT\"]==1]\ndiabetes_no_survi = diabetes_no[df[\"DEATH_EVENT\"]==0]\ndiabetes__no_not_survi = diabetes_no[df[\"DEATH_EVENT\"]==1]\n\nlabels = ['Diabetes Yes - Survived','Diabetes Yes - Not Survived', 'Diabetes NO - Survived', 'Diabetes NO - Not Survived']\nvalues = [len(diabetes_yes[df[\"DEATH_EVENT\"]==0]),len(diabetes_yes[df[\"DEATH_EVENT\"]==1]),\n         len(diabetes_no[df[\"DEATH_EVENT\"]==0]),len(diabetes_no[df[\"DEATH_EVENT\"]==1])]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.update_layout(\n    title_text=\"Analysis on Survival - Diabetes\")\nfig.show()","1d6743a7":"anaemia_yes = df[df['anaemia']==1]\nanaemia_no = df[df['anaemia']==0]\n\nlabels = ['No Anaemia', 'Anaemia']\nvalues = [len(anaemia_no), len(anaemia_yes)]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.update_layout(\n    title_text=\"Analysis on - Anaemia\")\nfig.show()","ebe30f6f":"fig = px.pie(df, values='anaemia',names='DEATH_EVENT', title='Anaemia Death Event Ration')\nfig.show()","2fb009e6":"anaemia_yes_survi = anaemia_yes[df[\"DEATH_EVENT\"]==0]\nanaemia_yes_not_survi = anaemia_yes[df[\"DEATH_EVENT\"]==1]\nanaemia_no_survi = anaemia_no[df[\"DEATH_EVENT\"]==0]\nanaemia_no_not_survi = anaemia_no[df[\"DEATH_EVENT\"]==1]\n\nlabels = ['Anaemia Yes - Survived','Anaemia Yes - Not Survived', 'Anaemia No - Survived', 'Anaemia NO - Not Survived']\nvalues = [len(anaemia_yes[df[\"DEATH_EVENT\"]==0]),len(anaemia_yes[df[\"DEATH_EVENT\"]==1]),\n         len(anaemia_no[df[\"DEATH_EVENT\"]==0]),len(anaemia_no[df[\"DEATH_EVENT\"]==1])]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.update_layout(\n    title_text=\"Analysis on Survival - Anaemia\")\nfig.show()","e72c0852":"hbp_yes = df[df['high_blood_pressure']==1]\nhbp_no = df[df['high_blood_pressure']==0]\n\nlabels = [\"No High BP\",\"High BP\"]\nvalues = [len(hbp_no), len(hbp_yes)]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.update_layout(\n    title_text=\"Analysis on - High Blood Pressure\")\nfig.show()","a562dc49":"fig = px.pie(df, values='high_blood_pressure',names='DEATH_EVENT', title='High Blood Pressure Death Event Ratio')\nfig.show()","8df4d220":"hbp_yes_survi = hbp_yes[df[\"DEATH_EVENT\"]==0]\nhbp_yes_not_survi = hbp_yes[df[\"DEATH_EVENT\"]==1]\nhbp_no_survi = hbp_no[df[\"DEATH_EVENT\"]==0]\nhbp_no_not_survi = hbp_no[df[\"DEATH_EVENT\"]==1]\n\nlabels = ['HBP Yes - Survived','HBP Yes - Not Survived', 'HBP No - Survived', 'HBP NO - Not Survived']\nvalues = [len(hbp_yes[df[\"DEATH_EVENT\"]==0]),len(hbp_yes[df[\"DEATH_EVENT\"]==1]),\n         len(hbp_no[df[\"DEATH_EVENT\"]==0]),len(hbp_no[df[\"DEATH_EVENT\"]==1])]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.update_layout(\n    title_text=\"Analysis on Survival - HBP(high blood pressure)\")\nfig.show()","c9422d5b":"smoking_yes = df[df['smoking']==1]\nsmoking_no = df[df['smoking']==0]\n\nlabels = ['No Smoking','Smoking']\nvalues = [len(smoking_no), len(smoking_yes)]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.update_layout(\n    title_text=\"Analysis on - Smoking\")\nfig.show()","12df27f8":"fig = px.pie(df, values='smoking',names='DEATH_EVENT', title='Smoking Death Event Ratio')\nfig.show()","09701024":"smoking_yes_survi = smoking_yes[df[\"DEATH_EVENT\"]==0]\nsmoking_yes_not_survi = smoking_yes[df[\"DEATH_EVENT\"]==1]\nsmoking_no_survi = smoking_no[df[\"DEATH_EVENT\"]==0]\nsmoking_no_not_survi = smoking_no[df[\"DEATH_EVENT\"]==1]\n\nlabels = ['Smoking Yes - Survived','Smoking Yes - Not Survived', 'Smoking No - Survived', 'Smoking NO- Not Survived']\nvalues = [len(smoking_yes[df[\"DEATH_EVENT\"]==0]),len(smoking_yes[df[\"DEATH_EVENT\"]==1]),\n         len(smoking_no[df[\"DEATH_EVENT\"]==0]),len(smoking_no[df[\"DEATH_EVENT\"]==1])]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.update_layout(\n    title_text=\"Analysis on Survival - Smoking\")\nfig.show()","35830135":"plt.figure(figsize=(10,10))\nsns.heatmap(df.corr(), vmin=-1, cmap='coolwarm', annot=True);","0104a716":"Features = ['time','ejection_fraction','serum_creatinine']\nX = df[Features]\ny = df[\"DEATH_EVENT\"]","8212b19d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=123)\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nimport lightgbm\nimport xgboost\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\n\nnames = [\n    \"CatBoostClassifier\",\n    \"Logistic Regression\",\n    \"Support Vector Machine\",\n    \"Decision Tree\",\n    \"Neural Network\",\n    \"Random Forest\",\n    \"XGBoost\",\n    \"LGBMClassifier\",\n    \"XGBRFClassifier\",\n    \"GradientBoosting\",\n    \"GaussianNB\",\n    \"KNeighborsClassifier\"\n]\nmodels = [\n    CatBoostClassifier(verbose= False),\n    LogisticRegression(),\n    SVC(),\n    DecisionTreeClassifier(),\n    MLPClassifier(),\n    RandomForestClassifier(),\n    XGBClassifier(),\n    lightgbm.LGBMClassifier(max_depth=2, random_state=4),\n    xgboost.XGBRFClassifier(max_depth=3, random_state=1),\n    GradientBoostingClassifier(max_depth=2, random_state=1),\n    GaussianNB(),\n    KNeighborsClassifier(n_neighbors=5, p=2, metric='minkowski')\n]\n\naccuracy=[]\nfor model, name in zip(models,names):\n    model.fit(X_train, y_train)\n    \n    y_pred = model.predict(X_test)\n    print('Confusion matrix of ',name)\n    print(confusion_matrix(y_test, y_pred))\n    ac = accuracy_score(y_test, y_pred)\n    print('Accuracy score is ',ac)\n    accuracy.append(ac)\n    print('='*50)\n\nAccuracy_list = pd.DataFrame(list(zip(names, accuracy)),columns =['Model', 'Accuracy'])\nAccuracy_list= Accuracy_list.sort_values('Accuracy', axis=0, ascending=False, inplace=False, kind='quicksort', na_position='last', ignore_index=True, key=None)\n\nplt.rcParams['figure.figsize']=20,6 \nsns.set_style(\"darkgrid\")\nax = sns.barplot(x = 'Model',y = 'Accuracy',data = Accuracy_list , palette = \"rocket\", saturation =1.5)\nplt.xlabel(\"Model\", fontsize = 20 )\nplt.ylabel(\"Accuracy\", fontsize = 20)\nplt.title(\"Accuracy of different Models\", fontsize = 20)\nplt.xticks(fontsize = 11, horizontalalignment = 'center', rotation = 8)\nplt.yticks(fontsize = 13)\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate(f'{height:.2%}', (x + width\/2, y + height*1.02), ha='center', fontsize = 'x-large')\nplt.show()","195455db":"# **Lets Explore the data**","2edb9712":"***Pie Charts***","1553cdd1":"# About Data\n\nDataset from Davide Chicco, Giuseppe Jurman: \u00e2\u20ac\u0153Machine learning can predict survival of patients with heart failure from serum creatinine and ejection fraction alone. BMC Medical Informatics and Decision Making 20, 16 (2020)\n\nSource : https:\/\/www.kaggle.com\/andrewmvd\/heart-failure-clinical-data\n\n### Attribute Information:\n\nage\nAge\n\nanaemia\nDecrease of red blood cells or hemoglobin (boolean)\n\ncreatinine_phosphokinase\nLevel of the CPK enzyme in the blood (mcg\/L)\n\ndiabetes\nIf the patient has diabetes (boolean)\n\nejection_fraction\nPercentage of blood leaving the heart at each contraction (percentage)\n\nhigh_blood_pressure\nIf the patient has hypertension (boolean)\n\nplatelets\nPlatelets in the blood (kiloplatelets\/mL)\n\nserum_creatinine\nLevel of serum creatinine in the blood (mg\/dL)\n\nserum_sodium\nLevel of serum sodium in the blood (mEq\/L)\n\nsex\nWoman or man (binary)\n\nsmoking\nIf the patient smokes or not (boolean)\n\ntime\nFollow-up period (days)\n\nDEATH_EVENT\nIf the patient deceased during the follow-up period (boolean)","84d8d7c2":"From the above pie chart we can conclude that in our dataset 58.2% (174) pepole are No Diabetes Person and 41.8% (125) are Diabetes Person.","0e460b6c":"From the above pie chart we can conclude that in our dataset 67.9%(203) pepoles are Non Smoking pepoles, while 32.1%(96) are Smoking pepoles.","7a310aaf":"**Distribution plots Survived and Not-Survived**","91a306bc":"* Age wise 40 to 80 the spread is High\n* less than 40 age and higher than 80 age people are very low","8821ee83":"**Heatmap**","2f20c97f":"* From above pie charts we can conclude that in our dataset diabetes from 170 of Non Anaemic person 120 are survived and 50 are not survived and\n* From 129 Anaemic person 83 are survived, while 46 are not survived.","d57705fb":"# **Data Modeling**","85b6236e":"* The Survival is high for not smoking person 55 to 65, while for smoking person it is between 50 to 60\n* Death event for smoking person is high than not smoking person","a4b067d0":"* From above pie charts we can conclude that in our dataset diabetes from 203 of Non Smoking person 137 are survived and 66 are not survived and\n* From 96 Smoking person 66 are survived, while 30 are not survived.","089cf503":"### Importing the Dataset","c268ed0c":"# Gender factor Analysis","51f9479a":"# Is Age and Sex an indicator for Death Event?","6e6adb04":"**Hist Plots**","6dfdbab4":"* Survival is high on 40 to 70\n* The spread of Not survival is going through all ages.","daaa0924":"From the above pie chart we can conclude that in our dataset 56.9%(170) pepoles are Non anaemic pepoles, while 43.1%(129) are anaemic pepoles.","47163619":"# **Other Factors**","849fa261":"* From above pie charts we can conclude that in our dataset diabetes from 174 of Non Diabetes person 118 are survived and 56 are not survived and\n* From 125 Diabetes person 85 are survived, while 40 are not survived.","46daeb9e":"* From above pie charts we can conclude that in our dataset diabetes from 194 of Non High BP person 137 are survived and 57 are not survived and\n* From 105 High BP person 66 are survived, while 39 are not survived.","d14eb9d8":"# **Import Libraries**","44d494b8":"Age Report\n\n* Survival spread is high in age's flow of 40 to 70\n* The Survival is high for both male between 50 to 60 and female's age between 60 to 70 respectively","9d31d536":"**Train Test Split**","32ef2c32":" # Please let me know in the comments what improvements can be done ","cb22108b":"From the above pie chart we can conclude that in our dataset 64.9%(194) pepoles are Non High BP pepoles, while 35.1%(105) are High BP pepoles."}}