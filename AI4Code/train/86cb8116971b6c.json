{"cell_type":{"dbce1a9c":"code","b6da05f7":"code","26378075":"code","0a912149":"code","7ea9f97e":"code","01b395ec":"code","10588615":"code","a430032f":"code","3de9a806":"code","3cd70266":"code","f6ddc5a8":"code","8fe7e70e":"code","805111fa":"code","1cebd8e5":"code","eb6ae519":"code","a9c1a99d":"code","b3a3f6cd":"code","121c11ba":"code","06477b77":"code","360dba4e":"code","f058e072":"code","bbe43a7f":"code","55016708":"code","209d130f":"code","ffce63f2":"code","0a990497":"code","4c449ea3":"code","0215af4f":"code","a0db94dc":"code","a3b1f783":"code","ba75289d":"code","83b6ccf2":"code","c45c940c":"code","6526d9e9":"code","ede1e61b":"code","ecd9ca0e":"code","e58589b8":"code","0b1ad72b":"code","a3c6f391":"code","c8982afd":"code","84e70454":"code","6594446f":"code","bdaffbe8":"code","6c0e9100":"markdown","d51c0b37":"markdown","189cb5b9":"markdown","744d6ad6":"markdown","f7c19cc9":"markdown","6a487e94":"markdown","eec53edd":"markdown","fc5abc51":"markdown","9d7db828":"markdown","b9014557":"markdown","e4323df6":"markdown","c87896fe":"markdown","a42de194":"markdown","d93061d3":"markdown","84a0ec4f":"markdown","0db5e8fb":"markdown","1556217c":"markdown","d9885aca":"markdown","73ed80c2":"markdown","e1ebb809":"markdown","7ff10013":"markdown","dac7d12c":"markdown","84e6f453":"markdown"},"source":{"dbce1a9c":"# Let's import the necessary tools\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #for data visualization\nimport seaborn as sns","b6da05f7":"# Input data files are available in the \"..\/input\/\" directory.\nimport os\nprint(os.listdir(\"..\/input\"))","26378075":"# Get in the data\n# I am using only the googleplaystore.csv file in this kernel\npath = '..\/input'\nplay_store_data = pd.read_csv(path + \"\/googleplaystore.csv\")","0a912149":"play_store_data.head(10)","7ea9f97e":"play_store_data.shape","01b395ec":"play_store_data.info()","10588615":"# Starting with the easiest.\n# Convert Reviews to numeric\nplay_store_data['Reviews'] = pd.to_numeric(play_store_data.Reviews, errors = 'coerce')","a430032f":"play_store_data.info()","3de9a806":"#Let's look closely at the apps in the data \nplay_store_data.App.value_counts().head(20)","3cd70266":"#Taking 3 sample Apps for exploration\nplay_store_data[play_store_data['App'].isin(['ROBLOX', 'Candy Crush Saga','Granny'])].sort_values(by='App')","f6ddc5a8":"# Sort App in Ascending order of reviews\nplay_store_data_sorted = play_store_data.sort_values(by = ['App', 'Reviews'], ascending = True)\n\n#drops other duplicate entries keeping the App with the highest reviews\nplay_store_data_sorted.drop_duplicates('App',keep='last',inplace=True)","8fe7e70e":"#Let's verify that duplicates has been removed\nplay_store_data_sorted.App.value_counts().head(10)","805111fa":"play_store_data_sorted.shape","1cebd8e5":"# Let's check out the App categories\nplay_store_data_sorted.Category.value_counts()","eb6ae519":"# Drop the category named 1.9, unknown category\nplay_store_data_sorted[play_store_data_sorted['Category'] == '1.9']","a9c1a99d":"play_store_data_sorted = play_store_data_sorted.drop([10472])","b3a3f6cd":"#Let's check for null values and start dealing with them.\nplay_store_data_sorted.isnull().sum()","121c11ba":"play_store_data_sorted.dropna(axis = 0, inplace = True, subset = ['Rating'])","06477b77":"play_store_data_sorted.isnull().sum()","360dba4e":"play_store_data_sorted.Size.value_counts()","f058e072":"#Convert non numeric values in App size to NAN\nplay_store_data_sorted['Size'][play_store_data_sorted['Size'] == 'Varies with device'] = np.nan\n\n#Replace M with 1 million and k with 1 thousand\nplay_store_data_sorted['Size'] = play_store_data_sorted.Size.str.replace('M', 'e6')\nplay_store_data_sorted['Size'] = play_store_data_sorted.Size.str.replace('k', 'e3')\n\n#convert column to numeric, dropping non numeric values\nplay_store_data_sorted['Size'] = pd.to_numeric(play_store_data_sorted['Size'], errors = 'coerce')","bbe43a7f":"play_store_data_sorted.info()","55016708":"play_store_data_sorted['Installs'].value_counts()","209d130f":"# To eliminate the '+' and ',' signs and convert to numeric\nplay_store_data_sorted['Installs'] = play_store_data_sorted.Installs.str.replace('+', '')\nplay_store_data_sorted['Installs'] = play_store_data_sorted.Installs.str.replace(',', '')\n\n# Convert to numeric type\nplay_store_data_sorted['Installs'] = pd.to_numeric(play_store_data_sorted['Installs'], errors = 'coerce')","ffce63f2":"play_store_data_sorted['Installs'].value_counts()","0a990497":"#Get the bin levels\nbin_array = play_store_data_sorted.Installs.sort_values().unique()\n#convert to array\nbins = [x for x in bin_array]\n\n# Added 5 billion for the higher range of app installs\nbins.append(5000000000)","4c449ea3":"#Create bins for Installs\nplay_store_data_sorted['Installs_binned'] = pd.cut(play_store_data_sorted['Installs'], bins)\n\n# Digitize the bins for encoding\nInstalls_digitized = np.digitize(play_store_data_sorted['Installs'], bins = bins )\n\n#Add to the data frame as a column\nplay_store_data_sorted = play_store_data_sorted.assign(Installs_d = pd.Series(Installs_digitized).values)","0215af4f":"play_store_data_sorted.info()","a0db94dc":"play_store_data_sorted.describe()","a3b1f783":"#as most machine learning models do not work well with NA, I have to drop rows having them.\nattributes = ['Category', 'Reviews', 'Size' , 'Installs_d','Rating']\npsa = play_store_data_sorted[attributes].dropna().copy()\npsa.shape","ba75289d":"#convert ratings to high and low categories.\nRating_cat = dict()\nfor i in range(0,len(psa['Rating'])):\n    if psa['Rating'].iloc[i] >= 3.5:\n        Rating_cat[i] = 'High'\n    else: Rating_cat[i] = 'Low'\n        \n#Add the categorical column to the data \npsa = psa.assign(Rating_cat = pd.Series(Rating_cat).values)","83b6ccf2":"psa['Rating_cat'].value_counts()","c45c940c":"#drop the Ratings column\npsa = psa.drop(['Rating'], axis = 1)\n\n#To encode the Ratings labels for learning\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\npsa['Rating_cat'] = le.fit_transform(psa['Rating_cat'])","6526d9e9":"#To view the encoded labels\nlist(le.classes_)","ede1e61b":"#Applying One-Hot Encoding to the Categorical Column 'Category' and 'Installs_d'\npsa_encode = pd.get_dummies(psa, columns= ['Category','Installs_d'])\nprint(psa_encode.columns)","ecd9ca0e":"X = psa_encode.drop(['Rating_cat'], axis = 1)\ny = psa_encode['Rating_cat']","e58589b8":"#Checking for correlation using heatmap\nplt.figure(figsize=(20,15)) \n\nsns.heatmap(X.corr())","0b1ad72b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,random_state=42)\n\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=1)","a3c6f391":"knn.fit(X_train, y_train)","c8982afd":"print('Training Set Score: {} \\nTest Set Score: {}'.format(knn.score(X_train, y_train),knn.score(X_test, y_test) ))","84e70454":"# Looking for optimum value of n_neighbours for the dataset.\nfor i in range(1,7):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train);\n    print('For n = {}, Test = {}, Train = {}'.format(i,knn.score(X_train, y_train),knn.score(X_test, y_test) ))","6594446f":"from sklearn.ensemble import RandomForestClassifier\nforest = RandomForestClassifier(n_estimators=10, max_depth = 10, random_state=2)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=42)\nforest.fit(X_train, y_train)","bdaffbe8":"print(\"Accuracy on training set: {:.3f}\".format(forest.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(forest.score(X_test, y_test)))","6c0e9100":"# Apply K- Nearest Neighbour to model","d51c0b37":" # Data Exploration and Cleaning","189cb5b9":"### Observation: Data sample has been redured to 9660 from 10841 samples due to duplicate entries","744d6ad6":"### Observation:  There are 10841 uncleaned samples for analysis with 13 columns. Only the Ratings column is represented as numeric. Other 'numeric' columns such as Size, number of installs, number of reviews need to be worked on","f7c19cc9":"## Working on Size column\n### The column currently contail alphanumeric values. I call a function to work on the strings and convert to numbers","6a487e94":"### Observation: Ratings is not given for over 15 percent of the data. which is necessary for my analysis.\n\n### I will have to remove rows with NA ratings since this is what I will be predicting.","eec53edd":"## Using Random Forest Classifier","fc5abc51":"* ### Observation: n_neighbours = 4 seems to optimise the model.","9d7db828":"## Observation: \n### The rating is on a scale of 1 - 5 with 1 being minimum and 5 being maximum\n### The mean rating is 4.17 while the median rating is 4.3. This implies that average rating is greater than 4.1\n### The minimum App size is 8.5 kb with maximum size being 100 Mb","b9014557":"### Observation: 7020 samples are available for my training and testing","e4323df6":"Inspecting some of the duplicate values indicate that they have the same data with minor changes in their **number of reviews ** during crawling.\n\nI can therefore drop duplicates of each App keeping the one with the** highest review** at the time","c87896fe":"### We can apply this model to a sample and be correct 90% of the time.","a42de194":"### Observation: What is a 1.9 category? That has to be removed or given the correct value. I go with remove.","d93061d3":"###  Observation: App duplicates !!!\n### We will need to take care of the duplicate entries for Apps in the dataset, but let's see if there are differences between the App entries or they are exactly the same.","84a0ec4f":"# Thank you.","0db5e8fb":"## Data cleaning done for the prediction","1556217c":"## Observation: The model seems to have  **overfitted** the data","d9885aca":"###  Good day everyone, this is my first kernel. I am happy to share it with you.\n\n## Aim : To predict if an app would have a high rating or low rating knowing its number of downloads, the category it belongs, number of reviews on playstore, and app size.\n\n## Steps:\n* Performed a short descriptive analysis of the dataset,\n* Cleaned the data\n* Performed conversion from one datatype to the other\n* Applied labelEncoding and oneHotEncoding, Label Encoding\n* Applied machine learning algorith such as K-nearest neighbour and Random Forest.,\n\nI was able to get a 90% score for my model which means I can be wrong 10 times in 100.\n\n### I hope you enjoy it and please drop your feedback.\n### Let's go","73ed80c2":"# Type Conversions from Object to Numeric\n1. Size in Megabyte (1e6), Kilobyte (1e3) and a 3rd option, \"Varies with Device\"\n2. Number of Instals, removing \"+\" and \",\"\n","e1ebb809":"## Observation: Ratings, Reviews and Size are now numeric columns.\n  ### Let's move on to Installs","7ff10013":"# Machine Learning  - Predicting Ratings\n\n### Using ['Category', 'Reviews', 'Size' , 'Installs'] to predict 'Rating'","dac7d12c":"## A.Convert Ratings to two categories\n* High rating -: 3.5 - 5.0 \n* Low Rating  -:  < 3.5","84e6f453":"## Create bins for the Install size as it was given in data"}}