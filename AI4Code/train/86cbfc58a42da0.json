{"cell_type":{"390f6ab2":"code","205dd041":"code","b956822e":"code","f9a9f574":"code","a685d834":"code","7ca070fd":"code","171a6dff":"code","c5411502":"code","7e9492f0":"code","39c8a88c":"code","2f956bda":"code","2f06a781":"code","2635aedd":"markdown","587a11d6":"markdown","53d7da34":"markdown","fcc95d5c":"markdown","1cad4eb0":"markdown","91d7fbac":"markdown","253a697e":"markdown","8afd1d75":"markdown","3b23f9da":"markdown","b7cbf6f9":"markdown","88dacf4f":"markdown"},"source":{"390f6ab2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","205dd041":"# seaborn plotting library\nimport seaborn as sns\n# load basic style defaults\nsns.set()","b956822e":"# set a random seed for reproducibility\nnp.random.seed(1)\n# generate an array of 10,000 normally distributed random numbers\nx = np.random.randn(10000)\n# convert the array to a pandas series object\nx = pd.Series(x, name=\"x Variable\")\n# view summary statistics for the series\nx.describe()","f9a9f574":"ax = sns.distplot(x)","a685d834":"ax = sns.distplot(x, kde=False)","7ca070fd":"from scipy.stats import norm, expon, cauchy\n# plot with a normal distribution fit\nax = sns.distplot(x, fit=norm, kde=False)","171a6dff":"# plot with an exponential distribution fit (not very sensible here)\nax = sns.distplot(x, fit=expon, kde=False)","c5411502":"# plot with a normal distribution fit (not completely unreasonable, but clearly inferior to normal fit)\nax = sns.distplot(x, fit=cauchy, kde=False)","7e9492f0":"# using only the first 100 points for clarity \nax = sns.distplot(x[0:100], rug=True)","39c8a88c":"ax = sns.distplot(x, vertical=True)","2f956bda":"# adjust how color codes are interpreted\nsns.set_color_codes()\n# produce a plot with a green color palette\nax = sns.distplot(x, color=\"g\")","2f06a781":"# define formatting dictionaries\nhist_kws={\"histtype\": \"step\",\n          \"linewidth\": 3, \n          \"alpha\": 0.8, \n          \"color\": \"c\"}\n\nkde_kws={\"color\": \"y\", \n         \"lw\": 4, \n         \"label\": \"KDE\"}\n\nrug_kws={\"color\": \"m\"}\n\n# again using only the first 100 points for clarity on rug plot\nax = sns.distplot(x[0:100], rug=True, rug_kws=rug_kws, kde_kws=kde_kws, hist_kws=hist_kws)","2635aedd":"If the data should be displayed vertically, set the **vertica**l keyword to *True*.","587a11d6":"Now that we have some idea of what our data looks like in aggregate, we can use distplot to visualize it graphically with default arguments.","53d7da34":"Let's begin exploring this function by loading the default notebook code.","fcc95d5c":"Next we can create a dummy data set of random numbers with NumPy and store it in a pandas series object.","1cad4eb0":"[Histograms](https:\/\/en.wikipedia.org\/wiki\/Histogram) serve as the cornerstone of univariate data visualization.  While Python\u2019s [Matplotlib](https:\/\/matplotlib.org\/) visualization library does provide basic functionality for generating histograms, the [Seaborn library](https:\/\/seaborn.pydata.org\/) (conventionally and amusingly abbreviated to \u201csns\u201d in honor of [Sam N. Seaborn](https:\/\/en.wikipedia.org\/wiki\/Sam_Seaborn), [Rob Lowe](https:\/\/www.imdb.com\/name\/nm0000507\/)\u2019s character on [*The West Wing*](https:\/\/www.imdb.com\/title\/tt0200276\/), after whom the project was named) provides considerable improvements in ease of use and often-desired additional functionality in the form of its *distplot* function. ","91d7fbac":"From a more advanced stylistic perspective, *distplot* allows for the use of several keyword arguments to specify formatting parameters for the histogram bars (**hist_kws**), the kde curve (**kde_kws**), the rug ticks (**rug_kws**), and\/or the fit curve (**fit_kws**). Simply specify the desired values as designated for each underlying function\u2019s respective keyword argument in a dictionary with their respective keywords as keys of the corresponding dictionary.","253a697e":"If the irregular shape of the kernel density estimation curve is not desirable, the fit keyword may be used to specify a continuous distribution object, typically from SciPy\u2019s stats module (which will, of course, require an additional import statement). Example curves include the [normal\/Gaussian](https:\/\/en.wikipedia.org\/wiki\/Normal_distribution) (norm), the [exponential](https:\/\/en.wikipedia.org\/wiki\/Exponential_distribution) (expon) and the [Cauchy-Lorentz](https:\/\/en.wikipedia.org\/wiki\/Cauchy_distribution) (cauchy).","8afd1d75":"The *distplot* function, like the rest of the Seaborn collection, makes generous use of common parameter settings and default keyword arguments to reduce what would most likely be a substantial block of Matplotlib code to a single (albeit potentially lengthy) line.  With as little as a single sequence argument provided (*e.g.*, list, tuple, NumPy ndarray, Pandas DataFrame, *etc.*), the defaults will produce a normalized histogram with kernel density estimation based on the normalized summation of standard normal distributions around each data point. The function provides basic histogram functionality with straight counts on the y-axis if the **kde** keyword argument is manually set to *False*.  ","3b23f9da":"Next we need to load the Seaborn library.","b7cbf6f9":"Setting the **rug** keyword to *True* will add a rug plot to the figure, drawing a tick mark for the first occurence of each x value contributing to the figure. This functionality can be useful in helping to evaluate the suitability of the default binning per the [Freedman-Diaconis rule](https:\/\/en.wikipedia.org\/wiki\/Freedman%E2%80%93Diaconis_rule), which is, as in Matplotlib, controlled manually by setting the **bins** keyword argument. ","88dacf4f":"The color palette may be broadly set with the **color** keyword in a manner similar to setting color in Matplotlib."}}