{"cell_type":{"55375fba":"code","5c0ec038":"code","deacffac":"code","dea6d2a7":"code","b0f9782c":"code","1ea23e1b":"code","d57f1c3a":"code","e9c47079":"markdown","03f63c67":"markdown","fb04d9e9":"markdown","7a768220":"markdown","399517a4":"markdown","414c2833":"markdown"},"source":{"55375fba":"%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\nwarnings.filterwarnings('ignore', category=DeprecationWarning)\n\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n","5c0ec038":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nmerged = pd.concat([train, test], sort = False)","deacffac":"##Flag all the NaNs of Cabin as 'X'\nmerged.Cabin.fillna(value = 'X', inplace = True)\n##Keep only the 1st character where Cabin is alphanumerical\nmerged.Cabin = merged.Cabin.apply( lambda x : x[0])\ndisplay(merged.Cabin.value_counts())","dea6d2a7":"display(merged.Name.head(8))","b0f9782c":"##Create a new variable Title that extracts titles from Name\nmerged['Title'] = merged.Name.str.extract('([A-Za-z]+)\\.')\n##Create a bucket Officer and put Dr, Rev, Col, Major, Capt titles into it\nmerged.Title.replace(to_replace = ['Dr', 'Rev', 'Col', 'Major', 'Capt'], value = 'Officer', inplace = True)\n##Put Dona, Jonkheer, Countess, Sir, Lady, Don in bucket Aristocrat\nmerged.Title.replace(to_replace = ['Dona', 'Jonkheer', 'Countess', 'Sir', 'Lady', 'Don'], value = 'Aristocrat', inplace = True)\n##Replace Mlle and Ms with Miss. And Mme with Mrs\nmerged.Title.replace({'Mlle':'Miss', 'Ms':'Miss', 'Mme':'Mrs'}, inplace = True)\n##Count the extracted categories of Title from Name\ndisplay(merged.Title.value_counts())","1ea23e1b":"##Merge SibSp and Parch to create a variable Family_size.'''\nmerged['Family_size'] = merged.SibSp + merged.Parch + 1  # Adding 1 for single person\n##Create buckets of single, small, medium, and large and then put respective values into them.'''\nmerged.Family_size.replace(to_replace = [1], value = 'single', inplace = True)\nmerged.Family_size.replace(to_replace = [2,3], value = 'small', inplace = True)\nmerged.Family_size.replace(to_replace = [4,5], value = 'medium', inplace = True)\nmerged.Family_size.replace(to_replace = [6, 7, 8, 11], value = 'large', inplace = True)\ndisplay(merged.Family_size.value_counts())","d57f1c3a":"##Assign N if there is only number and no character. If there is a character, extract the character only\nticket = []\nfor x in list(merged.Ticket):\n    if x.isdigit():\n        ticket.append('N')\n    else:\n        ticket.append(x.replace('.','').replace('\/','').strip().split(' ')[0])\n        \n##Swap values\nmerged.Ticket = ticket\n##Count the categories in Ticket.'''\ndisplay(merged.Ticket.value_counts())","e9c47079":"Libraries involved in this Kernel are\n\n**Pandas** for data manipulation and ingestion.\n","03f63c67":"**2.Processing Name**\n\nProfessionals like Dr, Rev, Col, Major, Capt will be put into 'Officer' bucket. Titles such as Dona, Jonkheer, Countess, Sir, Lady, Don were usually entitled to the aristocrats and hence these titles will be put into bucket 'Aristocrat'. Also Mlle and Ms is replaced with Miss and Mme by Mrs as these are French titles.","fb04d9e9":"**3.Processing SibSp & Parch**\n\nSince these two variables SibSp & Parch together indicate the size of a family,  a new variable 'Family_size' is created from these two variables.","7a768220":"**1.Processing Cabin**\n\nCabin is alphanumeric type variable with no special characters (like ., \/, % etc) between letters and numbers.NaN will be flagged as 'X' and only the 1st character will be retained wherever Cabin has alphanumeric values. ","399517a4":"References : https:\/\/www.kaggle.com\/eraaz1\/a-comprehensive-guide-to-titanic-machine-learning#About-this-Kernel","414c2833":"**4.Processing Ticket**\n\nTicket is an alphanumeric type variable. There will be two groups created - one for number and another fo character extracted from string .If a row contains both character and number, character will be retained."}}