{"cell_type":{"c7774f3c":"code","52281b9a":"code","a4ca3edb":"code","23276e4e":"code","91551e48":"code","58e47d11":"code","b734ee13":"code","1f5c5bf0":"code","7a7082cc":"code","ce8232d0":"code","4091b329":"code","05d19aac":"code","8b173f17":"code","6816b9a1":"code","150a05a9":"code","b259c1ee":"code","17e1aec0":"code","8eea0caf":"code","8bd0c214":"code","75a0b3a0":"code","69415140":"code","8339992f":"markdown","5b0ec5df":"markdown","896e9993":"markdown","95842dda":"markdown","be4df73b":"markdown","71fdfcec":"markdown","f2425d3d":"markdown","b98956b0":"markdown","d2900cad":"markdown","7c81122d":"markdown","30a28320":"markdown"},"source":{"c7774f3c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","52281b9a":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport time\ndata = pd.read_csv(\"\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv\")","a4ca3edb":"data.head()","23276e4e":"data.info()","91551e48":"y = data['diagnosis'] \nunnecessary_columns = ['id','Unnamed: 32','diagnosis']\nx = data.drop(unnecessary_columns,axis = 1)","58e47d11":"x.head()","b734ee13":"ax = sns.countplot(y,label=\"count\")\nM, B = y.value_counts()\nprint(\"Malignant count\", M)\nprint(\"Benign count\", B)","1f5c5bf0":"x.describe()","7a7082cc":"data = x\ndata_std = (data - data.mean()) \/ data.std()","ce8232d0":"data_std.describe()","4091b329":"data_1 = pd.concat([y, data_std.iloc[:, 0:10]], axis=1)\ndata_1 = pd.melt(data_1, id_vars='diagnosis',var_name='features',value_name='values')\nplt.figure(figsize=(10,10))\nsns.violinplot(x = 'features', y= 'values', hue = 'diagnosis',data= data_1, split = True,inner = 'quart' )\nplt.xticks(rotation=45)","05d19aac":"data_2 = pd.concat([y, data_std.iloc[:, 10:20]], axis=1)\ndata_2 = pd.melt(data_2, id_vars='diagnosis',var_name='features',value_name='values')\nplt.figure(figsize=(10,10))\nsns.violinplot(x = 'features', y= 'values', hue = 'diagnosis',data= data_2, split = True,inner = 'quart' )\nplt.xticks(rotation=45)","8b173f17":"data_3 = pd.concat([y, data_std.iloc[:, 20:30]], axis=1)\ndata_3 = pd.melt(data_3, id_vars='diagnosis',var_name='features',value_name='values')\nplt.figure(figsize=(10,10))\nsns.violinplot(x = 'features', y= 'values', hue = 'diagnosis',data= data_3, split = True,inner = 'quart' )\nplt.xticks(rotation=45)","6816b9a1":"plt.figure(figsize=(15,10))\nsns.boxplot(x = 'features', y= 'values', hue = 'diagnosis',data= data_1)\nplt.xticks(rotation=45)","150a05a9":"plt.figure(figsize=(15,10))\nsns.boxplot(x = 'features', y= 'values', hue = 'diagnosis',data= data_2)\nplt.xticks(rotation=45)","b259c1ee":"plt.figure(figsize=(15,10))\nsns.boxplot(x = 'features', y= 'values', hue = 'diagnosis',data= data_3)\nplt.xticks(rotation=45)","17e1aec0":"sns.jointplot(x.loc[:,'concavity_worst'], x.loc[:,'concave points_worst'], kind = 'regg')","8eea0caf":"sns.set(style='whitegrid',palette='muted')\nplt.figure(figsize=(10,10))\nsns.swarmplot(x = 'features', y= 'values', hue = 'diagnosis',data= data_1)\nplt.xticks(rotation=45)","8bd0c214":"sns.set(style='whitegrid',palette='muted')\nplt.figure(figsize=(10,10))\nsns.swarmplot(x = 'features', y= 'values', hue = 'diagnosis',data= data_2)\nplt.xticks(rotation=45)","75a0b3a0":"sns.set(style='whitegrid',palette='muted')\nplt.figure(figsize=(10,10))\nsns.swarmplot(x = 'features', y= 'values', hue = 'diagnosis',data= data_3)\nplt.xticks(rotation=45)","69415140":"f, ax = plt.subplots(figsize = (18,18))\nsns.heatmap(x.corr(),annot = True, linewidths=.5, fmt = '.1f',ax=ax)","8339992f":"Lets plot swamplots for our features","5b0ec5df":"we will import modules required and the data","896e9993":"now we observed two feature concavity_worst and concave point_worst showing similar violinplots and boxplots\n* lets check their correlation using jointplot","95842dda":"**now lets plot violin plots for the features**\n* we will plot these graphs in 3 sections 10 features each so as not to cluster out graphs with 30 features","be4df73b":"lets check target column count of cancer type i.e. Malignant or Benign","71fdfcec":"# In this notebook we will visualize the data using seaborn.","f2425d3d":"Now lets plot correlations between features and plot heatmap showing it ","b98956b0":"* the ranges of values in various columns are very different.\n* lets standardize our data ","d2900cad":"lets check the head and get info of the data","7c81122d":"there are some unnecessary columns in our dataset. lets get rid of those.\nand \n***separate our target column from the data. i.e. diagnosis.***","30a28320":"**now lets plot boxplots for our features**"}}