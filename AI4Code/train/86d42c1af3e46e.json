{"cell_type":{"dd21a4ca":"code","e081281e":"code","f57d6be7":"code","e20d4d56":"code","34d845f1":"code","93ea313b":"code","d761bad7":"code","b769ea5d":"code","5b3bda0e":"code","2b68fb37":"code","acb0c0f8":"code","33afb093":"code","1d7d1c79":"code","defc46a2":"code","0126a554":"code","ecd00386":"code","896f05fe":"code","50cd42a9":"code","e70c5b46":"code","21eaa4e8":"code","27d835c6":"code","79e80b71":"markdown","a03c5f0f":"markdown","58a54e3a":"markdown","f2885d42":"markdown","40600968":"markdown"},"source":{"dd21a4ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e081281e":"df= pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf1=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ndf2=pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\nprint(\"Sucess !\")","f57d6be7":"df1.head()","e20d4d56":"df.head()","34d845f1":"df.info()","93ea313b":"df.isnull().sum()","d761bad7":"df.dropna()","b769ea5d":"df.shape","5b3bda0e":"df[[\"Pclass\",\"Survived\"]].groupby(\"Pclass\").mean()","2b68fb37":"df[[\"Sex\",\"Survived\"]].groupby(\"Sex\").mean()","acb0c0f8":"df[[\"Embarked\",\"Survived\"]].groupby(\"Embarked\").mean()","33afb093":"import re as re","1d7d1c79":"def get_title(name):\n\ttitle_search = re.search(' ([A-Za-z]+)\\.', name)\n\t# If the title exists, extract and return it.\n\tif title_search:\n\t\treturn title_search.group(1)\n\treturn \"\"\n\nfor dataset in df:\n    df['Title'] = df['Name'].apply(get_title)\n\nprint(pd.crosstab(df['Title'], df['Sex']))","defc46a2":"for dataset in df:\n    df['Title'] = df['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    df['Title'] = df['Title'].replace('Mlle', 'Miss')\n    df['Title'] = df['Title'].replace('Ms', 'Miss')\n    df['Title'] = df['Title'].replace('Mme', 'Mrs')\n\nprint (df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean())\n","0126a554":"from sklearn.neighbors import KNeighborsClassifier","ecd00386":"model=KNeighborsClassifier(n_neighbors=3)","896f05fe":"X=df[[\"Pclass\"]]\ny=df[[\"Survived\"]]","50cd42a9":"from sklearn.neighbors import KNeighborsClassifier\nmodel=KNeighborsClassifier(n_neighbors=6)\nmodel.fit(X,y)\n","e70c5b46":"pred=model.predict(df1[[\"Pclass\"]])","21eaa4e8":"print(\"Pclass\",\"Survived\")\nfor i in range(0,100):\n    print(df1[\"Pclass\"].values[i],pred[i])","27d835c6":"\noutput = pd.DataFrame({'PassengerId': df1.PassengerId, 'Survived': pred})\noutput.to_csv('KNN_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","79e80b71":"# We will be using KNN to predict wether the person was able to survive or not","a03c5f0f":"# From the above analysis it is clear that we PClass has the greatest impact on the chances of survival","58a54e3a":"# Now, we are checking for which feature has a good impact on the chances of survival","f2885d42":"Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton","40600968":"# Loading the data and performing the basic analysis"}}